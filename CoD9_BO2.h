/*
   This file has been generated by IDA.
   It contains local type definitions from
   CoDMPServer_PC.idb
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct IUnknownVtbl;
struct tagVARIANT;
struct IRecordInfo;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct bdReferencableVtbl;
struct bdConnectionListenerVtbl;
struct bdConnection;
struct bdDispatchInterceptorVtbl;
struct _RTL_CRITICAL_SECTION;
struct bdNATTravListenerVtbl;
struct bdQoSProbeListenerVtbl;
struct bdAntiCheatChallengeParamVtbl;
struct bdLobbyConnectionListenerVtbl;
struct bdCypherVtbl;
struct bdLobbyConnection;
struct bdAntiCheatChallengeVtbl;
struct bdNetImplVtbl;
struct bdSocket;
struct bdSocketVtbl;
struct bdString;
struct bdSecurityKeyMapListenerVtbl;
struct bdPacketInterceptorVtbl;
struct bdAddressMap;
struct bdDTLSAssociationVtbl;
struct bdDTLSHeaderVtbl;
struct bdSocketRouter;
struct bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node;
struct bdIPDiscoveryClient;
struct bdNATTypeDiscoveryClient;
struct bdRunnableVtbl;
struct bdThread;
struct bdGetHostByName;
struct _s__RTTIClassHierarchyDescriptor;
struct bdTaskResultVtbl;
struct bdTaskResultProcessorVtbl;
struct itemDef_s;
struct bdHMacVtbl;
struct bdRemoteTaskManagerVtbl;
struct bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node;
struct bdSingletonRegistryImplVtbl;
struct jqAtomicQueue<jqBatch,32>::NodeType;
struct jqBatchGroup;
struct jqModule;
struct std::exceptionVtbl;
struct bdDownloadInterceptorVtbl;
struct bdAntiCheatResponsesVtbl;
struct bdHashVtbl;
struct actor_t;
struct gentity_t;
struct pathnode_t;
struct sentient_t;
struct TurretInfo;
struct FxElemDef;
struct Destructible;
struct pulse_sum_node;
struct rigid_body;
struct rigid_body_constraint_point;
struct rigid_body_constraint_hinge;
struct rigid_body_constraint_distance;
struct rigid_body_constraint_ragdoll;
struct pulse_sum_normal;
struct rigid_body_constraint_wheel;
struct rigid_body_constraint_angular_actuator;
struct rigid_body_constraint_upright;
struct rigid_body_constraint_custom_orientation;
struct rigid_body_constraint_custom_path;
struct phys_collision_pair;
struct phys_gjk_geomVtbl;
struct broad_phase_info;
struct phys_gjk_cache_info;
struct rigid_body_constraint_contact;
struct PhysObjUserData;
struct VehicleParameter;
struct VehicleDef;
struct visitor_base_tVtbl;
struct cbrush_t;
struct TraceThreadInfo;
struct CollisionAabbTree;
struct vehicle_t;
struct animscripted_t;
struct tagInfo_t;
struct XAnimTree_s;
struct scr_animscript_t;
struct gjkcc_input_t;
struct tagPROPVARIANT;
struct tlAtomicMutex;
struct bdSessionParamsVtbl;
struct bdContentStreamingBaseVtbl;
struct bdUploadInterceptor;
struct bdUploadInterceptorVtbl;
struct bdFileID;
struct curl_slist;
struct bdUCD;
struct bdLobbyEventHandlerVtbl;
struct tlThreadVtbl;
struct bdArbitratedStatsInfoVtbl;
struct generic_avl_map_node_t;
struct cgZBarrier_s;
struct DroppedWeaponDobjInfo;
struct shellshock_parms_t;
struct animation_s;
struct scr_animtree_t;
struct bgsAnim_s;
struct clientField_s;
struct bgsClientFields_s;
struct DObjModel_s;
struct clientInfo_t;
struct DObj;
struct gjk_collision_visitorVtbl;
struct phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal;
struct pulse_sum_point;
struct pulse_sum_angular;
struct pulse_sum_wheel;
struct pulse_sum_contact;
struct pulse_sum_contact_point;
struct phys_inplace_avl_tree_node<broad_phase_environment_info>;
struct phys_auto_activate_callbackVtbl;
struct broad_phase_terrain_query_callbackVtbl;
struct TaskDefinition;
struct GfxDrawSurfListInfo;
struct GfxCmdBufInput;
struct GfxBackEndData;
struct std::_Container_base12;
struct std::_Iterator_base12;
struct std::tr1::_Ref_count_baseVtbl;
struct pathnode_tree_t;
struct GfxPortal;
struct GfxCell;
struct gjk_slide_move_input_tVtbl;
struct bdTeamProfileSearchParamsVtbl;
struct GlassPackedOutline::PackedVert;
struct GlassPhysics;
struct ShardGroup;
struct bdLinkableVtbl;
struct internal_state;
struct CCallbackBaseVtbl;
struct LiveSteamServer;
struct SteamServersConnected_t;
struct SteamServerConnectFailure_t;
struct SteamServersDisconnected_t;
struct GSPolicyResponse_t;
struct GSClientApprove_t;
struct GSClientDeny_t;
struct GSClientKick_t;
struct ISteamGameServerVtbl;
struct ISteamFriendsVtbl;
struct ISteamUserVtbl;
struct LiveSteamClient;
struct EncryptedAppTicketResponse_t;
struct GameOverlayActivated_t;
struct DlcInstalled_t;
struct GameRichPresenceJoinRequested_t;
struct CSteamAchievements;
struct UserStatsReceived_t;
struct UserStatsStored_t;
struct UserAchievementStored_t;
struct ISteamUtilsVtbl;
struct ISteamUserStatsVtbl;
struct ISteamNetworkingVtbl;
struct ISteamRemoteStorageVtbl;
struct ISteamMatchmakingVtbl;
struct ISteamMatchmakingServerListResponseVtbl;
struct ISteamMatchmakingPingResponseVtbl;
struct ISteamMatchmakingPlayersResponseVtbl;
struct ISteamMatchmakingRulesResponseVtbl;
struct ISteamMatchmakingServersVtbl;
struct ISteamAppsVtbl;
struct ISteamScreenshotsVtbl;
struct ISteamHTTPVtbl;
struct ISteamClientVtbl;
struct SndDuckActive;
struct IXAudio2VoiceVtbl;
struct IXAudio2VoiceCallbackVtbl;
struct IXAudio2EngineCallbackVtbl;
struct scr_block_s;
struct flameGeneric_s;
struct flameStream_s;
struct flameRenderList_s;
struct flameChunk_s;
struct pulse_sum_constraint_solver::temp_user_rigid_body;
struct pulse_sum_constraint_solver::user_rigid_body_restore_info;
struct phys_inplace_avl_tree_node<auto_rigid_body>;
struct CPingThreadVtbl;
struct directory_t;
struct std::locale::facetVtbl;
struct std::locale;
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl;
struct std::ios_baseVtbl;
struct std::ios_base::_Iosarray;
struct std::ios_base::_Fnarray;
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl;
struct std::error_categoryVtbl;
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl;
struct std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >;
struct MapProfileElement;
struct png_row_info_struct;
struct png_color_struct;
struct png_info_def;
struct SpeexBits;
struct FxTriGroup;
struct _mixerLight_t;
struct RumbleGraph;
struct RumbleInfo;
struct jqAtomicQueue<jqConditionalQueue *,32>::NodeType;
struct axis_aligned_sweep_and_prune::sap_node;
struct bdPacketVtbl;
struct bdLinkedList<bdReference<bdChunk> >::Node;
struct bdUnreliableReceiveWindowVtbl;
struct bdLinkedList<bdReference<bdDataChunk> >::Node;
struct bdUnreliableSendWindowVtbl;
struct stdext::exceptionVtbl;
struct BINK;
struct BINKSND;
struct ID3DIncludeVtbl;
struct jpeg_common_struct;
struct backing_store_struct;
struct jpeg_memory_mgr;
struct jpeg_progress_mgr;
struct jpeg_decompress_struct;
struct jpeg_decomp_master;
struct jpeg_d_main_controller;
struct jpeg_d_coef_controller;
struct jpeg_d_post_controller;
struct jpeg_input_controller;
struct jpeg_marker_reader;
struct jpeg_entropy_decoder;
struct jpeg_inverse_dct;
struct jpeg_upsampler;
struct jpeg_color_deconverter;
struct jpeg_color_quantizer;
struct jpeg_destination_mgr;
struct jpeg_scan_info;
struct jpeg_comp_master;
struct jpeg_c_main_controller;
struct jpeg_c_prep_controller;
struct jpeg_c_coef_controller;
struct jpeg_marker_writer;
struct jpeg_color_converter;
struct jpeg_downsampler;
struct jpeg_forward_dct;
struct jpeg_entropy_encoder;
struct ID3D11ShaderReflectionTypeVtbl;
struct ID3D11ShaderReflectionConstantBufferVtbl;
struct ID3D11ShaderReflectionVariableVtbl;
struct std::pair<unsigned int const ,ID3D11BlendState *>;
struct std::pair<unsigned __int64 const ,ID3D11DepthStencilState *>;
union small_pool_struct;
union large_pool_struct;
struct DNameNodeVtbl;

/* 1 */
enum bdNATType
{
  BD_NAT_UNKNOWN = 0x0,
  BD_NAT_OPEN = 0x1,
  BD_NAT_MODERATE = 0x2,
  BD_NAT_STRICT = 0x3,
};

/* 2 */
enum D3D11_COMPARISON_FUNC
{
  D3D11_COMPARISON_NEVER = 0x1,
  D3D11_COMPARISON_LESS = 0x2,
  D3D11_COMPARISON_EQUAL = 0x3,
  D3D11_COMPARISON_LESS_EQUAL = 0x4,
  D3D11_COMPARISON_GREATER = 0x5,
  D3D11_COMPARISON_NOT_EQUAL = 0x6,
  D3D11_COMPARISON_GREATER_EQUAL = 0x7,
  D3D11_COMPARISON_ALWAYS = 0x8,
};

/* 3 */
enum D3D11_FEATURE
{
  D3D11_FEATURE_THREADING = 0x0,
  D3D11_FEATURE_DOUBLES = 0x1,
  D3D11_FEATURE_FORMAT_SUPPORT = 0x2,
  D3D11_FEATURE_FORMAT_SUPPORT2 = 0x3,
  D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 0x4,
};

/* 4 */
enum D3D11_DEPTH_WRITE_MASK
{
  D3D11_DEPTH_WRITE_MASK_ZERO = 0x0,
  D3D11_DEPTH_WRITE_MASK_ALL = 0x1,
};

/* 5 */
enum D3D11_STENCIL_OP
{
  D3D11_STENCIL_OP_KEEP = 0x1,
  D3D11_STENCIL_OP_ZERO = 0x2,
  D3D11_STENCIL_OP_REPLACE = 0x3,
  D3D11_STENCIL_OP_INCR_SAT = 0x4,
  D3D11_STENCIL_OP_DECR_SAT = 0x5,
  D3D11_STENCIL_OP_INVERT = 0x6,
  D3D11_STENCIL_OP_INCR = 0x7,
  D3D11_STENCIL_OP_DECR = 0x8,
};

/* 6 */
enum $87CF076C0160D10C53742F434F2D6573
{
  VAR_TYPE_MASK = 0x7F,
  VAR_HAS_CHILDREN_MASK = 0x80,
};

/* 7 */
enum D3D11_BLEND
{
  D3D11_BLEND_ZERO = 0x1,
  D3D11_BLEND_ONE = 0x2,
  D3D11_BLEND_SRC_COLOR = 0x3,
  D3D11_BLEND_INV_SRC_COLOR = 0x4,
  D3D11_BLEND_SRC_ALPHA = 0x5,
  D3D11_BLEND_INV_SRC_ALPHA = 0x6,
  D3D11_BLEND_DEST_ALPHA = 0x7,
  D3D11_BLEND_INV_DEST_ALPHA = 0x8,
  D3D11_BLEND_DEST_COLOR = 0x9,
  D3D11_BLEND_INV_DEST_COLOR = 0xA,
  D3D11_BLEND_SRC_ALPHA_SAT = 0xB,
  D3D11_BLEND_BLEND_FACTOR = 0xE,
  D3D11_BLEND_INV_BLEND_FACTOR = 0xF,
  D3D11_BLEND_SRC1_COLOR = 0x10,
  D3D11_BLEND_INV_SRC1_COLOR = 0x11,
  D3D11_BLEND_SRC1_ALPHA = 0x12,
  D3D11_BLEND_INV_SRC1_ALPHA = 0x13,
};

/* 8 */
enum scriptInstance_t
{
  SCRIPTINSTANCE_SERVER = 0x0,
  SCRIPTINSTANCE_CLIENT = 0x1,
  SCRIPT_INSTANCE_MAX = 0x2,
};

/* 9 */
enum meansOfDeath_t
{
  MOD_UNKNOWN = 0x0,
  MOD_PISTOL_BULLET = 0x1,
  MOD_RIFLE_BULLET = 0x2,
  MOD_GRENADE = 0x3,
  MOD_GRENADE_SPLASH = 0x4,
  MOD_PROJECTILE = 0x5,
  MOD_PROJECTILE_SPLASH = 0x6,
  MOD_MELEE = 0x7,
  MOD_BAYONET = 0x8,
  MOD_HEAD_SHOT = 0x9,
  MOD_CRUSH = 0xA,
  MOD_TELEFRAG = 0xB,
  MOD_FALLING = 0xC,
  MOD_SUICIDE = 0xD,
  MOD_TRIGGER_HURT = 0xE,
  MOD_EXPLOSIVE = 0xF,
  MOD_IMPACT = 0x10,
  MOD_BURNED = 0x11,
  MOD_HIT_BY_OBJECT = 0x12,
  MOD_DROWN = 0x13,
  MOD_GAS = 0x14,
  MOD_NUM = 0x15,
};

/* 10 */
enum D3D11_BLEND_OP
{
  D3D11_BLEND_OP_ADD = 0x1,
  D3D11_BLEND_OP_SUBTRACT = 0x2,
  D3D11_BLEND_OP_REV_SUBTRACT = 0x3,
  D3D11_BLEND_OP_MIN = 0x4,
  D3D11_BLEND_OP_MAX = 0x5,
};

/* 11 */
enum D3D11_COLOR_WRITE_ENABLE
{
  D3D11_COLOR_WRITE_ENABLE_RED = 0x1,
  D3D11_COLOR_WRITE_ENABLE_GREEN = 0x2,
  D3D11_COLOR_WRITE_ENABLE_BLUE = 0x4,
  D3D11_COLOR_WRITE_ENABLE_ALPHA = 0x8,
  D3D11_COLOR_WRITE_ENABLE_ALL = 0xF,
};

/* 12 */
enum D3D11_MESSAGE_CATEGORY
{
  D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0x0,
  D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 0x1,
  D3D11_MESSAGE_CATEGORY_INITIALIZATION = 0x2,
  D3D11_MESSAGE_CATEGORY_CLEANUP = 0x3,
  D3D11_MESSAGE_CATEGORY_COMPILATION = 0x4,
  D3D11_MESSAGE_CATEGORY_STATE_CREATION = 0x5,
  D3D11_MESSAGE_CATEGORY_STATE_SETTING = 0x6,
  D3D11_MESSAGE_CATEGORY_STATE_GETTING = 0x7,
  D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 0x8,
  D3D11_MESSAGE_CATEGORY_EXECUTION = 0x9,
};

/* 13 */
enum bdBitBufferDataType
{
  BD_BB_NO_TYPE = 0x0,
  BD_BB_BOOL_TYPE = 0x1,
  BD_BB_SIGNED_CHAR8_TYPE = 0x2,
  BD_BB_UNSIGNED_CHAR8_TYPE = 0x3,
  BD_BB_WCHAR16_TYPE = 0x4,
  BD_BB_SIGNED_INTEGER16_TYPE = 0x5,
  BD_BB_UNSIGNED_INTEGER16_TYPE = 0x6,
  BD_BB_SIGNED_INTEGER32_TYPE = 0x7,
  BD_BB_UNSIGNED_INTEGER32_TYPE = 0x8,
  BD_BB_SIGNED_INTEGER64_TYPE = 0x9,
  BD_BB_UNSIGNED_INTEGER64_TYPE = 0xA,
  BD_BB_RANGED_SIGNED_INTEGER32_TYPE = 0xB,
  BD_BB_RANGED_UNSIGNED_INTEGER32_TYPE = 0xC,
  BD_BB_FLOAT32_TYPE = 0xD,
  BD_BB_FLOAT64_TYPE = 0xE,
  BD_BB_RANGED_FLOAT32_TYPE = 0xF,
  BD_BB_SIGNED_CHAR8_STRING_TYPE = 0x10,
  BD_BB_UNSIGNED_CHAR8_STRING_TYPE = 0x11,
  BD_BB_MBSTRING_TYPE = 0x12,
  BD_BB_BLOB_TYPE = 0x13,
  BD_BB_NAN_TYPE = 0x14,
  BD_BB_FULL_TYPE = 0x15,
  BD_BB_MAX_TYPE = 0x20,
};

/* 14 */
enum D3D11_MESSAGE_SEVERITY
{
  D3D11_MESSAGE_SEVERITY_CORRUPTION = 0x0,
  D3D11_MESSAGE_SEVERITY_ERROR = 0x1,
  D3D11_MESSAGE_SEVERITY_WARNING = 0x2,
  D3D11_MESSAGE_SEVERITY_INFO = 0x3,
};

/* 15 */
enum D3D11_MESSAGE_ID
{
  D3D11_MESSAGE_ID_UNKNOWN = 0x0,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 0x1,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 0x2,
  D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 0x3,
  D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 0x4,
  D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 0x5,
  D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 0x6,
  D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 0x7,
  D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 0x8,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 0x9,
  D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 0xA,
  D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 0xB,
  D3D11_MESSAGE_ID_CORRUPTED_THIS = 0xC,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 0xD,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 0xE,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 0xF,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 0x10,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 0x11,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 0x12,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 0x13,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 0x14,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 0x15,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 0x16,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 0x17,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 0x18,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 0x19,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 0x1A,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 0x1B,
  D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 0x1C,
  D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 0x1D,
  D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 0x1E,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 0x1F,
  D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 0x20,
  D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 0x21,
  D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x22,
  D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x23,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x24,
  D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 0x25,
  D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x26,
  D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x27,
  D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x28,
  D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 0x29,
  D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 0x2A,
  D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2B,
  D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2C,
  D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x2D,
  D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 0x2E,
  D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 0x2F,
  D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 0x30,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 0x31,
  D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 0x32,
  D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 0x33,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 0x34,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 0x35,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 0x36,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 0x37,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 0x38,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 0x39,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 0x3A,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 0x3B,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 0x3C,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 0x3D,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 0x3E,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 0x3F,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 0x40,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 0x41,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 0x42,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 0x43,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 0x44,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 0x45,
  D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 0x46,
  D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 0x47,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 0x48,
  D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 0x49,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 0x4A,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 0x4B,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 0x4C,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 0x4D,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 0x4E,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 0x4F,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 0x50,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 0x51,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 0x52,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 0x53,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 0x54,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 0x55,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 0x56,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 0x57,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 0x58,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 0x59,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 0x5A,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 0x5B,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 0x5C,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 0x5D,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 0x5E,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 0x5F,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 0x60,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 0x61,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 0x62,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 0x63,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 0x64,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 0x65,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 0x66,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 0x67,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 0x68,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 0x69,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 0x6A,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 0x6B,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 0x6C,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 0x6D,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 0x6E,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 0x6F,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 0x70,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 0x71,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 0x72,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 0x73,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 0x74,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 0x75,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 0x76,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 0x77,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 0x78,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 0x79,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 0x7A,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 0x7B,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 0x7C,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 0x7D,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 0x7E,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 0x7F,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 0x80,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 0x81,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 0x82,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 0x83,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 0x84,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 0x85,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 0x86,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 0x87,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 0x88,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 0x89,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 0x8A,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 0x8B,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 0x8C,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 0x8D,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 0x8E,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 0x8F,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 0x90,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 0x91,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 0x92,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 0x93,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 0x94,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 0x95,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 0x96,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 0x97,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 0x98,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 0x99,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 0x9A,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 0x9B,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 0x9C,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 0x9D,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 0x9E,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 0x9F,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 0xA0,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 0xA1,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 0xA2,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 0xA3,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 0xA4,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 0xA5,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 0xA6,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 0xA7,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 0xA8,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 0xA9,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 0xAA,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 0xAB,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 0xAC,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 0xAD,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 0xAE,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 0xAF,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 0xB0,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 0xB1,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 0xB2,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 0xB3,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 0xB4,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 0xB5,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 0xB6,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 0xB7,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 0xB8,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 0xB9,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 0xBA,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 0xBB,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 0xBC,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 0xBD,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 0xBE,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 0xBF,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 0xC0,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 0xC1,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 0xC2,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 0xC3,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 0xC4,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 0xC5,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 0xC6,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 0xC7,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 0xC8,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 0xC9,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 0xCA,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 0xCB,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 0xCC,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 0xCD,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 0xCE,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 0xCF,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 0xD0,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 0xD1,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 0xD2,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 0xD3,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 0xD4,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 0xD5,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 0xD6,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 0xD7,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 0xD8,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 0xD9,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 0xDA,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 0xDB,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 0xDC,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 0xDD,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 0xDE,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 0xDF,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 0xE0,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 0xE1,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 0xE2,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 0xE3,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 0xE4,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 0xE5,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 0xE6,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 0xE7,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 0xE8,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 0xE9,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 0xEA,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 0xEB,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 0xEC,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 0xED,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 0xEE,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 0xEF,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 0xF0,
  D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 0xF1,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 0xF2,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 0xF3,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 0xF4,
  D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF5,
  D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xF6,
  D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xF7,
  D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 0xF8,
  D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF9,
  D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xFA,
  D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xFB,
  D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 0xFC,
  D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 0xFD,
  D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 0xFE,
  D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 0xFF,
  D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x100,
  D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x101,
  D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 0x102,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 0x103,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 0x104,
  D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 0x105,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 0x106,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 0x107,
  D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 0x108,
  D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 0x109,
  D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10A,
  D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 0x10B,
  D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 0x10C,
  D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10D,
  D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 0x10E,
  D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 0x10F,
  D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 0x110,
  D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x111,
  D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 0x112,
  D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 0x113,
  D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 0x114,
  D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 0x115,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 0x116,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 0x117,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 0x118,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 0x119,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 0x11A,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 0x11B,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 0x11C,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 0x11D,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 0x11E,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 0x11F,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 0x120,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 0x121,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 0x122,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 0x123,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 0x124,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 0x125,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 0x126,
  D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 0x127,
  D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 0x128,
  D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 0x129,
  D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 0x12A,
  D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 0x12B,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 0x12C,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 0x12D,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 0x12E,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 0x12F,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 0x130,
  D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 0x131,
  D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 0x132,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 0x133,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 0x134,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 0x135,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 0x136,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 0x137,
  D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 0x138,
  D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 0x139,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 0x13A,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 0x13B,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 0x13C,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 0x13D,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 0x13E,
  D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 0x13F,
  D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 0x140,
  D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 0x141,
  D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 0x142,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 0x143,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 0x144,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 0x145,
  D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 0x146,
  D3D11_MESSAGE_ID_REF_THREADING_MODE = 0x147,
  D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 0x148,
  D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 0x149,
  D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 0x14A,
  D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 0x14B,
  D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 0x14C,
  D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 0x14D,
  D3D11_MESSAGE_ID_REF_INFO = 0x14E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 0x14F,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 0x150,
  D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 0x151,
  D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 0x152,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 0x153,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 0x154,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 0x155,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 0x156,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 0x157,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 0x158,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 0x159,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 0x15A,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 0x15B,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 0x15C,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 0x15D,
  D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 0x15E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 0x15F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 0x160,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 0x161,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 0x162,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 0x163,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 0x164,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 0x165,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 0x166,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 0x167,
  D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 0x168,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 0x169,
  D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 0x16A,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 0x16B,
  D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 0x16C,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 0x16D,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 0x16E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 0x16F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 0x170,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 0x171,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 0x172,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 0x173,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 0x174,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 0x175,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 0x176,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 0x177,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 0x178,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 0x179,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 0x17A,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 0x17B,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 0x17C,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 0x17D,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 0x17E,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 0x17F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 0x180,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 0x181,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 0x182,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 0x183,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 0x184,
  D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 0x185,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 0x186,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 0x187,
  D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 0x188,
  D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 0x189,
  D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 0x18A,
  D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 0x18B,
  D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 0x18C,
  D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 0x18D,
  D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x18E,
  D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 0x18F,
  D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 0x190,
  D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 0x191,
  D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 0x192,
  D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x193,
  D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 0x194,
  D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 0x195,
  D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 0x196,
  D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 0x197,
  D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 0x198,
  D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 0x199,
  D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 0x19A,
  D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 0x19B,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 0x19C,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 0x19D,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 0x19E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 0x19F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 0x1A0,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 0x1A1,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 0x1A2,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 0x1A3,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 0x1A4,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 0x1A5,
  D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 0x1A6,
  D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
  D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000A,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000B,
  D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000C,
  D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000D,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000E,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000F,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
  D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
  D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
  D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
  D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001A,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001B,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001C,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001D,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001E,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001F,
  D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
  D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
  D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
  D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
  D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
  D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002A,
  D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002B,
  D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002C,
  D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002D,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002E,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002F,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
  D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
  D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
  D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
  D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
  D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
  D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
  D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
  D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003A,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003B,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003C,
  D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003D,
  D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 0x200000,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 0x200001,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 0x200002,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 0x200003,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 0x200004,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 0x200005,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 0x200006,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 0x200007,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 0x200008,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 0x200009,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 0x20000A,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 0x20000B,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 0x20000C,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 0x20000D,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 0x20000E,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 0x20000F,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 0x200010,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 0x200011,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 0x200012,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 0x200013,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 0x200014,
  D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 0x200015,
  D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 0x200016,
  D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200017,
  D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200018,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 0x200019,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 0x20001A,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 0x20001B,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 0x20001C,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 0x20001D,
  D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20001E,
  D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20001F,
  D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200020,
  D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 0x200021,
  D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200022,
  D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200023,
  D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 0x200024,
  D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 0x200025,
  D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 0x200026,
  D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200027,
  D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200028,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 0x200029,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 0x20002A,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 0x20002B,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 0x20002C,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 0x20002D,
  D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20002E,
  D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20002F,
  D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200030,
  D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 0x200031,
  D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200032,
  D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200033,
  D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 0x200034,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 0x200035,
  D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 0x200036,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 0x200037,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 0x200038,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 0x200039,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 0x20003A,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 0x20003B,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 0x20003C,
  D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 0x20003D,
  D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 0x20003E,
  D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 0x20003F,
  D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 0x200040,
  D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 0x200041,
  D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 0x200042,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 0x200043,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 0x200044,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 0x200045,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 0x200046,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 0x200047,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 0x200048,
  D3D11_MESSAGE_ID_CREATE_CONTEXT = 0x200049,
  D3D11_MESSAGE_ID_LIVE_CONTEXT = 0x20004A,
  D3D11_MESSAGE_ID_DESTROY_CONTEXT = 0x20004B,
  D3D11_MESSAGE_ID_CREATE_BUFFER = 0x20004C,
  D3D11_MESSAGE_ID_LIVE_BUFFER = 0x20004D,
  D3D11_MESSAGE_ID_DESTROY_BUFFER = 0x20004E,
  D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 0x20004F,
  D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 0x200050,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 0x200051,
  D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 0x200052,
  D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 0x200053,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 0x200054,
  D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 0x200055,
  D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 0x200056,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 0x200057,
  D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 0x200058,
  D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 0x200059,
  D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 0x20005A,
  D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 0x20005B,
  D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 0x20005C,
  D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 0x20005D,
  D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 0x20005E,
  D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 0x20005F,
  D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 0x200060,
  D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 0x200061,
  D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 0x200062,
  D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 0x200063,
  D3D11_MESSAGE_ID_CREATE_HULLSHADER = 0x200064,
  D3D11_MESSAGE_ID_LIVE_HULLSHADER = 0x200065,
  D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 0x200066,
  D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 0x200067,
  D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 0x200068,
  D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 0x200069,
  D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 0x20006A,
  D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 0x20006B,
  D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 0x20006C,
  D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 0x20006D,
  D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 0x20006E,
  D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 0x20006F,
  D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 0x200070,
  D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 0x200071,
  D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 0x200072,
  D3D11_MESSAGE_ID_CREATE_SAMPLER = 0x200073,
  D3D11_MESSAGE_ID_LIVE_SAMPLER = 0x200074,
  D3D11_MESSAGE_ID_DESTROY_SAMPLER = 0x200075,
  D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 0x200076,
  D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 0x200077,
  D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 0x200078,
  D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 0x200079,
  D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 0x20007A,
  D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 0x20007B,
  D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 0x20007C,
  D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 0x20007D,
  D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 0x20007E,
  D3D11_MESSAGE_ID_CREATE_QUERY = 0x20007F,
  D3D11_MESSAGE_ID_LIVE_QUERY = 0x200080,
  D3D11_MESSAGE_ID_DESTROY_QUERY = 0x200081,
  D3D11_MESSAGE_ID_CREATE_PREDICATE = 0x200082,
  D3D11_MESSAGE_ID_LIVE_PREDICATE = 0x200083,
  D3D11_MESSAGE_ID_DESTROY_PREDICATE = 0x200084,
  D3D11_MESSAGE_ID_CREATE_COUNTER = 0x200085,
  D3D11_MESSAGE_ID_LIVE_COUNTER = 0x200086,
  D3D11_MESSAGE_ID_DESTROY_COUNTER = 0x200087,
  D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 0x200088,
  D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 0x200089,
  D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 0x20008A,
  D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 0x20008B,
  D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 0x20008C,
  D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 0x20008D,
  D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 0x20008E,
  D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 0x20008F,
  D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 0x200090,
  D3D11_MESSAGE_ID_LIVE_DEVICE = 0x200091,
  D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 0x200092,
  D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 0x200093,
  D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 0x200094,
  D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 0x200095,
  D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 0x200096,
  D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 0x200097,
  D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 0x200098,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 0x200099,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 0x20009A,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 0x20009B,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 0x20009C,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 0x20009D,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 0x20009E,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 0x20009F,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 0x2000A0,
  D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 0x2000A1,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 0x2000A2,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 0x2000A3,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 0x2000A4,
  D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 0x2000A5,
  D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 0x2000A6,
  D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2000A7,
  D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2000A8,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 0x2000A9,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 0x2000AA,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 0x2000AB,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 0x2000AC,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 0x2000AD,
  D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 0x2000AE,
  D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x2000AF,
  D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000B0,
  D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 0x2000B1,
  D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 0x2000B2,
  D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000B3,
  D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 0x2000B4,
  D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B5,
  D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B6,
  D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B7,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B8,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B9,
  D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000BA,
  D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000BB,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 0x2000BC,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 0x2000BD,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 0x2000BE,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 0x2000BF,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 0x2000C0,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 0x2000C1,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 0x2000C2,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 0x2000C3,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 0x2000C4,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 0x2000C5,
  D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000C6,
  D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000C7,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 0x2000C8,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 0x2000C9,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 0x2000CA,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 0x2000CB,
  D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 0x2000CC,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000CD,
  D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000CE,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 0x2000CF,
  D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 0x2000D0,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 0x2000D1,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 0x2000D2,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 0x2000D3,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000D4,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000D5,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 0x2000D6,
  D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000D7,
  D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000D8,
  D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 0x2000D9,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 0x2000DA,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 0x2000DB,
  D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 0x2000DC,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 0x2000DD,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 0x2000DE,
  D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 0x2000DF,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 0x2000E0,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 0x2000E1,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 0x2000E2,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000E3,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 0x2000E4,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 0x2000E5,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 0x2000E6,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 0x2000E7,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 0x2000E8,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 0x2000E9,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 0x2000EA,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 0x2000EB,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 0x2000EC,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 0x2000ED,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 0x2000EE,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 0x2000EF,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 0x2000F0,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000F1,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 0x2000F2,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 0x2000F3,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 0x2000F4,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 0x2000F5,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 0x2000F6,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 0x2000F7,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 0x2000F8,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 0x2000F9,
  D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 0x2000FA,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 0x2000FB,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 0x2000FC,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 0x2000FD,
  D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 0x2000FE,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 0x2000FF,
  D3D11_MESSAGE_ID_REF_WARNING = 0x200100,
  D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 0x200101,
};

/* 16 */
enum $A1DCD2217109A7AE09DC983F421B16AD
{
  CS_GAME_VERSION = 0x2,
  CS_SERVERID = 0x3,
  CS_MESSAGE = 0x4,
  CS_SCORES1 = 0x5,
  CS_SCORES2 = 0x6,
  CS_CULLDIST = 0x7,
  CS_SUNLIGHT = 0x8,
  CS_SUNDIR = 0x9,
  CS_FOGVARS = 0xA,
  CS_MOTD = 0xB,
  CS_GAMEENDTIME = 0xC,
  CS_MAPCENTER = 0xD,
  CS_TIMESCALE = 0xE,
  CS_VOTE_TIME = 0xF,
  CS_VOTE_STRING = 0x10,
  CS_VOTE_YES = 0x11,
  CS_VOTE_NO = 0x12,
  CS_VOTE_MAPNAME = 0x13,
  CS_VOTE_GAMETYPE = 0x14,
  CS_MULTI_MAPWINNER = 0x15,
  CS_ENEMY_CROSSHAIR = 0x16,
  CS_CODINFO = 0x17,
  CS_CODINFO_LAST = 0xAC,
  CS_CODINFO_VALUE = 0xAD,
  CS_CODINFO_VALUE_LAST = 0x142,
  CS_PLAYERINFOS = 0x143,
  CS_PLAYERINFOS_LAST = 0x154,
  CS_SESSIONNONCE = 0x155,
  CS_PLAYEREMBLEMS = 0x156,
  CS_PLAYEREMBLEMS_LAST = 0x167,
  CS_TARGETS = 0x168,
  CS_TARGETS_LAST = 0x187,
  CS_USE_TRIG_STRINGS = 0x188,
  CS_USE_TRIG_STRINGS_LAST = 0x1E7,
  CS_LOCALIZED_STRINGS = 0x1E8,
  CS_LOCALIZED_STRINGS_LAST = 0x3E7,
  CS_CLIENTSYSTEM_NAMES = 0x3E8,
  CS_CLIENTSYSTEM_NAMES_LAST = 0x3F0,
  CS_CASE_INSENSITIVE_BEGIN = 0x3F1,
  CS_AMBIENT = 0x3F1,
  CS_RUMBLES = 0x3F2,
  CS_RUMBLE_LAST = 0x421,
  CS_NORTHYAW = 0x422,
  CS_MINIMAP = 0x423,
  CS_VISIONSET_NAKED = 0x424,
  CS_VISIONSET_NIGHT = 0x425,
  CS_NIGHTVISION = 0x426,
  CS_LOC_SEL_MTLS = 0x427,
  CS_LOC_SEL_MTLS_LAST = 0x435,
  CS_MODELS = 0x436,
  CS_MODELS_LAST = 0x635,
  CS_EFFECT_NAMES = 0x636,
  CS_EFFECT_NAMES_LAST = 0x6F9,
  CS_EFFECT_TAGS = 0x6FA,
  CS_EFFECT_TAGS_LAST = 0x7F9,
  CS_SHELLSHOCKS = 0x7FA,
  CS_SHELLSHOCKS_LAST = 0x809,
  CS_SCRIPT_MENUS = 0x80A,
  CS_SCRIPT_MENUS_LAST = 0x829,
  CS_SERVER_MATERIALS = 0x82A,
  CS_SERVER_MATERIALS_LAST = 0x929,
  CS_WEAPONFILES = 0x92A,
  CS_WEAPONFILES_LAST = 0xA29,
  CS_STATUS_ICONS = 0xA2A,
  CS_STATUS_ICONS_LAST = 0xA31,
  CS_HEAD_ICONS = 0xA32,
  CS_HEAD_ICONS_LAST = 0xA40,
  CS_TAGS = 0xA41,
  CS_TAGS_LAST = 0xA80,
  CS_ITEMS = 0xA81,
  CS_VEHICLE_TYPES = 0xA82,
  CS_VEHICLE_TYPES_LAST = 0xAA1,
  CS_DESTRUCTIBLES = 0xAA2,
  CS_DESTRUCTIBLES_LAST = 0xAE1,
  CS_ANIMTREES = 0xAE2,
  CS_ANIMTREES_LAST = 0xAF1,
  CS_VISIONSET_LASTSTAND = 0xAF2,
  CS_LEADERBOARDS = 0xAF3,
  CS_SESSIONINFO = 0xAF4,
  CS_MATCHID = 0xAF5,
  MAX_CONFIGSTRINGS = 0xAF6,
};

/* 17 */
enum D3D_DRIVER_TYPE
{
  D3D_DRIVER_TYPE_UNKNOWN = 0x0,
  D3D_DRIVER_TYPE_HARDWARE = 0x1,
  D3D_DRIVER_TYPE_REFERENCE = 0x2,
  D3D_DRIVER_TYPE_NULL = 0x3,
  D3D_DRIVER_TYPE_SOFTWARE = 0x4,
  D3D_DRIVER_TYPE_WARP = 0x5,
};

/* 18 */
enum $3668E0C3F31064D9F0C96146BDC3AF36
{
  VAR_UNDEFINED = 0x0,
  VAR_BEGIN_REF = 0x1,
  VAR_POINTER = 0x1,
  VAR_STRING = 0x2,
  VAR_ISTRING = 0x3,
  VAR_VECTOR = 0x4,
  VAR_END_REF = 0x5,
  VAR_HASH = 0x5,
  VAR_FLOAT = 0x6,
  VAR_INTEGER = 0x7,
  VAR_CODEPOS = 0x8,
  VAR_PRECODEPOS = 0x9,
  VAR_FUNCTION = 0xA,
  VAR_STACK = 0xB,
  VAR_ANIMATION = 0xC,
  VAR_DEVELOPER_CODEPOS = 0xD,
  VAR_THREAD = 0xE,
  VAR_NOTIFY_THREAD = 0xF,
  VAR_TIME_THREAD = 0x10,
  VAR_CHILD_THREAD = 0x11,
  VAR_OBJECT = 0x12,
  VAR_DEAD_ENTITY = 0x13,
  VAR_ENTITY = 0x14,
  VAR_ARRAY = 0x15,
  VAR_DEAD_THREAD = 0x16,
  VAR_COUNT = 0x17,
  VAR_FREE = 0x17,
  VAR_THREAD_LIST = 0x18,
  VAR_ENT_LIST = 0x19,
  VAR_TOTAL_COUNT = 0x1A,
};

/* 19 */
typedef D3D10_PRIMITIVE_TOPOLOGY D3D_PRIMITIVE_TOPOLOGY;

/* 20 */
enum doubleXPGroups_e
{
  DOUBLEXP_EVERYONE = 0x0,
  DOUBLEXP_PREORDER = 0x1,
  DOUBLEXP_ELITE_MEMBER = 0x2,
  DOUBLEXP_ELITE_FOUNDER = 0x3,
  DOUBLEXP_ELITE3 = 0x4,
  DOUBLEXP_ELITE_INVALID_MARKETING_OPTIN = 0x5,
  DOUBLEXP_GROUP_DLCALL = 0x6,
  DOUBLEXP_GROUP_DLCANY = 0x7,
  DOUBLEXP_GROUP_DLC0 = 0x8,
  DOUBLEXP_GROUP_DLC_FIRST = 0x8,
  DOUBLEXP_GROUP_DLCZM0 = 0x9,
  DOUBLEXP_GROUP_DLC1 = 0xA,
  DOUBLEXP_GROUP_DLC2 = 0xB,
  DOUBLEXP_GROUP_DLC3 = 0xC,
  DOUBLEXP_GROUP_DLC4 = 0xD,
  DOUBLEXP_GROUP_DLC5 = 0xE,
  DOUBLEXP_GROUP_DLCSEASONPASS = 0xF,
  DOUBLEXP_GROUP_DLC_LAST = 0xF,
  DOUBLEXP_GROUP_OWN_DLCALL = 0x10,
  DOUBLEXP_GROUP_OWN_DLCANY = 0x11,
  DOUBLEXP_GROUP_OWN_DLC0 = 0x12,
  DOUBLEXP_GROUP_OWN_DLC_FIRST = 0x12,
  DOUBLEXP_GROUP_OWN_DLCZM0 = 0x13,
  DOUBLEXP_GROUP_OWN_DLC1 = 0x14,
  DOUBLEXP_GROUP_OWN_DLC2 = 0x15,
  DOUBLEXP_GROUP_OWN_DLC3 = 0x16,
  DOUBLEXP_GROUP_OWN_DLC4 = 0x17,
  DOUBLEXP_GROUP_OWN_DLC5 = 0x18,
  DOUBLEXP_GROUP_OWN_DLCSEASONPASS = 0x19,
  DOUBLEXP_GROUP_OWN_DLC_LAST = 0x19,
  DOUBLEXP_GROUP_CE_NUKETOWN_2025 = 0x1A,
  DOUBLEXP_GROUP_CE_NUKETOWN_Z = 0x1B,
  DOUBLEXP_GROUP_CE_CAMO = 0x1C,
  DOUBLEXP_GROUP_PHANTOM = 0x1D,
  DOUBLEXP_GROUP_MISC5 = 0x1E,
  DOUBLEXP_GROUP_MISC6 = 0x1F,
  DOUBLEXP_GROUP_COUNT = 0x20,
};

/* 21 */
enum $15454EDC65404665873E2A95C6F44F70
{
  FIRST_OBJECT = 0xE,
  FIRST_CLEARABLE_OBJECT = 0x12,
  LAST_NONENTITY_OBJECT = 0x12,
  FIRST_ENTITY_OBJECT = 0x14,
  FIRST_NONFIELD_OBJECT = 0x15,
  FIRST_DEAD_OBJECT = 0x16,
};

/* 22 */
enum bdLogMessageType
{
  BD_LOG_INFO = 0x0,
  BD_LOG_WARNING = 0x1,
  BD_LOG_ERROR = 0x2,
};

/* 23 */
enum mtxItemsColumns_e
{
  MTX_COLUMN_ID = 0x0,
  MTX_COLUMN_NAME = 0x1,
  MTX_COLUMN_OFFERID = 0x2,
  MTX_COLUMN_CATEGORY = 0x3,
  MTX_COLUMN_PS3PRODUCTNAME = 0x4,
  MTX_COLUMN_PCSTEAMAPPID = 0x5,
  MTX_COLUMN_ISHIDDEN = 0x6,
};

/* 24 */
enum $3A28824DCC635DED3FE44AEE09BF0D54
{
  FX_FLESHTYPE_BODY_NONFATAL = 0x0,
  FX_FLESHTYPE_BODY_FATAL = 0x1,
  FX_FLESHTYPE_HEAD_NONFATAL = 0x2,
  FX_FLESHTYPE_HEAD_FATAL = 0x3,
  FX_FLESHTYPE_COUNT = 0x4,
};

/* 25 */
typedef D3D10_PRIMITIVE D3D_PRIMITIVE;

/* 26 */
enum $BA9F847B460546ED7BFFDBCD5B0768E1
{
  SCR_XANIM_CLIENT = 0x0,
  SCR_XANIM_SERVER = 0x1,
  SCR_XANIM_COUNT = 0x2,
};

/* 27 */
enum csParseFieldType_t
{
  CSPFT_STRING = 0x0,
  CSPFT_STRING_MAX_STRING_CHARS = 0x1,
  CSPFT_STRING_MAX_QPATH = 0x2,
  CSPFT_STRING_MAX_OSPATH = 0x3,
  CSPFT_INT = 0x4,
  CSPFT_UINT = 0x5,
  CSPFT_BOOL = 0x6,
  CSPFT_QBOOLEAN = 0x7,
  CSPFT_FLOAT = 0x8,
  CSPFT_MILLISECONDS = 0x9,
  CSPFT_FX = 0xA,
  CSPFT_XMODEL = 0xB,
  CSPFT_MATERIAL = 0xC,
  CSPFT_MATERIAL_STREAM = 0xD,
  CSPFT_PHYS_PRESET = 0xE,
  CSPFT_SCRIPT_STRING = 0xF,
  CSPFT_TRACER = 0x10,
  CSPFT_SOUND_ALIAS_ID = 0x11,
  CSPFT_NUM_BASE_FIELD_TYPES = 0x12,
};

/* 28 */
enum VehicleWheelType
{
  FL_WHEEL = 0x0,
  FR_WHEEL = 0x1,
  BL_WHEEL = 0x2,
  BR_WHEEL = 0x3,
  ML_WHEEL = 0x4,
  MR_WHEEL = 0x5,
  NUM_VEHICLE_WHEELS = 0x6,
};

/* 29 */
enum D3D10_MESSAGE_CATEGORY
{
  D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0x0,
  D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 0x1,
  D3D10_MESSAGE_CATEGORY_INITIALIZATION = 0x2,
  D3D10_MESSAGE_CATEGORY_CLEANUP = 0x3,
  D3D10_MESSAGE_CATEGORY_COMPILATION = 0x4,
  D3D10_MESSAGE_CATEGORY_STATE_CREATION = 0x5,
  D3D10_MESSAGE_CATEGORY_STATE_SETTING = 0x6,
  D3D10_MESSAGE_CATEGORY_STATE_GETTING = 0x7,
  D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 0x8,
  D3D10_MESSAGE_CATEGORY_EXECUTION = 0x9,
};

/* 30 */
enum $9855C24CB2A725CBCFD35D4FA918D804
{
  VEH_ENGINESND_FADE_IN_START = 0x0,
  VEH_ENGINESND_FADE_IN_END = 0x1,
  VEH_ENGINESND_FADE_OUT_START = 0x2,
  VEH_ENGINESND_FADE_OUT_END = 0x3,
  VEH_ENGINESND_PITCH_REF = 0x4,
  NUM_VEHICLE_ENGINESND_PARAMS = 0x5,
};

/* 31 */
enum VehicleMaterialSound
{
  VEH_WHEEL_ROAD_NOISE = 0x0,
  VEH_WHEEL_SLIDING = 0x1,
  VEH_WHEEL_PEELING_OUT = 0x2,
  NUM_VEHICLE_MATERIAL_SNDS = 0x3,
};

/* 32 */
enum D3D10_MESSAGE_ID
{
  D3D10_MESSAGE_ID_UNKNOWN = 0x0,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 0x1,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 0x2,
  D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 0x3,
  D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 0x4,
  D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 0x5,
  D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 0x6,
  D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 0x7,
  D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 0x8,
  D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 0x9,
  D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 0xA,
  D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 0xB,
  D3D10_MESSAGE_ID_CORRUPTED_THIS = 0xC,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 0xD,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 0xE,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 0xF,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 0x10,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 0x11,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 0x12,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 0x13,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 0x14,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 0x15,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 0x16,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 0x17,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 0x18,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 0x19,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 0x1A,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 0x1B,
  D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 0x1C,
  D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 0x1D,
  D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 0x1E,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 0x1F,
  D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 0x20,
  D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 0x21,
  D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x22,
  D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x23,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x24,
  D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 0x25,
  D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x26,
  D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x27,
  D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x28,
  D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 0x29,
  D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 0x2A,
  D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2B,
  D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2C,
  D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x2D,
  D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 0x2E,
  D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 0x2F,
  D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 0x30,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 0x31,
  D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 0x32,
  D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 0x33,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 0x34,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 0x35,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 0x36,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 0x37,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 0x38,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 0x39,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 0x3A,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 0x3B,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 0x3C,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 0x3D,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 0x3E,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 0x3F,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 0x40,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 0x41,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 0x42,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 0x43,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 0x44,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 0x45,
  D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 0x46,
  D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 0x47,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 0x48,
  D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 0x49,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 0x4A,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 0x4B,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 0x4C,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 0x4D,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 0x4E,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 0x4F,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 0x50,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 0x51,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 0x52,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 0x53,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 0x54,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 0x55,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 0x56,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 0x57,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 0x58,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 0x59,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 0x5A,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 0x5B,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 0x5C,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 0x5D,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 0x5E,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 0x5F,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 0x60,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 0x61,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 0x62,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 0x63,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 0x64,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 0x65,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 0x66,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 0x67,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 0x68,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 0x69,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 0x6A,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 0x6B,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 0x6C,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 0x6D,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 0x6E,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 0x6F,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 0x70,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 0x71,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 0x72,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 0x73,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 0x74,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 0x75,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 0x76,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 0x77,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 0x78,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 0x79,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 0x7A,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 0x7B,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 0x7C,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 0x7D,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 0x7E,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 0x7F,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 0x80,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 0x81,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 0x82,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 0x83,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 0x84,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 0x85,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 0x86,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 0x87,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 0x88,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 0x89,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 0x8A,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 0x8B,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 0x8C,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 0x8D,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 0x8E,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 0x8F,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 0x90,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 0x91,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 0x92,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 0x93,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 0x94,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 0x95,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 0x96,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 0x97,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 0x98,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 0x99,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 0x9A,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 0x9B,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 0x9C,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 0x9D,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 0x9E,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 0x9F,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 0xA0,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 0xA1,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 0xA2,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 0xA3,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 0xA4,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 0xA5,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 0xA6,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 0xA7,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 0xA8,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 0xA9,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 0xAA,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 0xAB,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 0xAC,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 0xAD,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 0xAE,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 0xAF,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 0xB0,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 0xB1,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 0xB2,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 0xB3,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 0xB4,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 0xB5,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 0xB6,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 0xB7,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 0xB8,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 0xB9,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 0xBA,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 0xBB,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 0xBC,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 0xBD,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 0xBE,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 0xBF,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 0xC0,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 0xC1,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 0xC2,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 0xC3,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 0xC4,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 0xC5,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 0xC6,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 0xC7,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 0xC8,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 0xC9,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 0xCA,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 0xCB,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 0xCC,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 0xCD,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 0xCE,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 0xCF,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 0xD0,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 0xD1,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 0xD2,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 0xD3,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 0xD4,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 0xD5,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 0xD6,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 0xD7,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 0xD8,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 0xD9,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 0xDA,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 0xDB,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 0xDC,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 0xDD,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 0xDE,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 0xDF,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 0xE0,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 0xE1,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 0xE2,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 0xE3,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 0xE4,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 0xE5,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 0xE6,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 0xE7,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 0xE8,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 0xE9,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 0xEA,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 0xEB,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 0xEC,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 0xED,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 0xEE,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 0xEF,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 0xF0,
  D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 0xF1,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 0xF2,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 0xF3,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 0xF4,
  D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF5,
  D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xF6,
  D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xF7,
  D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 0xF8,
  D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF9,
  D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xFA,
  D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xFB,
  D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 0xFC,
  D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 0xFD,
  D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 0xFE,
  D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 0xFF,
  D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x100,
  D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x101,
  D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 0x102,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 0x103,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 0x104,
  D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 0x105,
  D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 0x106,
  D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 0x107,
  D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 0x108,
  D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 0x109,
  D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10A,
  D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 0x10B,
  D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 0x10C,
  D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10D,
  D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 0x10E,
  D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 0x10F,
  D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 0x110,
  D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x111,
  D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 0x112,
  D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 0x113,
  D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 0x114,
  D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 0x115,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 0x116,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 0x117,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 0x118,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 0x119,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 0x11A,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 0x11B,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 0x11C,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 0x11D,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 0x11E,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 0x11F,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 0x120,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 0x121,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 0x122,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 0x123,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 0x124,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 0x125,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 0x126,
  D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 0x127,
  D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 0x128,
  D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 0x129,
  D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 0x12A,
  D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 0x12B,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 0x12C,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 0x12D,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 0x12E,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 0x12F,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 0x130,
  D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 0x131,
  D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 0x132,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 0x133,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 0x134,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 0x135,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 0x136,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 0x137,
  D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 0x138,
  D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 0x139,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 0x13A,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 0x13B,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 0x13C,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 0x13D,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 0x13E,
  D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 0x13F,
  D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 0x140,
  D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 0x141,
  D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 0x142,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 0x143,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 0x144,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 0x145,
  D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 0x146,
  D3D10_MESSAGE_ID_REF_THREADING_MODE = 0x147,
  D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 0x148,
  D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 0x149,
  D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 0x14A,
  D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 0x14B,
  D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 0x14C,
  D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 0x14D,
  D3D10_MESSAGE_ID_REF_INFO = 0x14E,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 0x14F,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 0x150,
  D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 0x151,
  D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 0x152,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 0x153,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 0x154,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 0x155,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 0x156,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 0x157,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 0x158,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 0x159,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 0x15A,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 0x15B,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 0x15C,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 0x15D,
  D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 0x15E,
  D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 0x15F,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 0x160,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 0x161,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 0x162,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 0x163,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 0x164,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 0x165,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 0x166,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 0x167,
  D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 0x168,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 0x169,
  D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 0x16A,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 0x16B,
  D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 0x16C,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 0x16D,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 0x16E,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 0x16F,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 0x170,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 0x171,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 0x172,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 0x173,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 0x174,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 0x175,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 0x176,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 0x177,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 0x178,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 0x179,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 0x17A,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 0x17B,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 0x17C,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 0x17D,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 0x17E,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 0x17F,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 0x180,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 0x181,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 0x182,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 0x183,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 0x184,
  D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 0x185,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 0x186,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 0x187,
  D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 0x188,
  D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 0x189,
  D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 0x18A,
  D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 0x18B,
  D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 0x18C,
  D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 0x18D,
  D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x18E,
  D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 0x18F,
  D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 0x190,
  D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 0x191,
  D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 0x192,
  D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x193,
  D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 0x194,
  D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 0x195,
  D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 0x196,
  D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 0x197,
  D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 0x198,
  D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 0x199,
  D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 0x19A,
  D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 0x19B,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 0x19C,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 0x19D,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 0x19E,
  D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 0x19F,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 0x1A0,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 0x1A1,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 0x1A2,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 0x1A3,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 0x1A4,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 0x1A5,
  D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 0x1A6,
  D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
  D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000A,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000B,
  D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000C,
  D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000D,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000E,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000F,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
  D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
  D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
  D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
  D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001A,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001B,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001C,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001D,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001E,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001F,
  D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
  D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
  D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
  D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
  D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
  D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002A,
  D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002B,
  D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002C,
  D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002D,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002E,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002F,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
  D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
  D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
  D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
  D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
  D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
  D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
  D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
  D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003A,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003B,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003C,
  D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003D,
};

/* 33 */
enum trType_t
{
  TR_STATIONARY = 0x0,
  TR_INTERPOLATE = 0x1,
  TR_INTERPOLATE_MOVER = 0x2,
  TR_LINEAR = 0x3,
  TR_LINEAR_STOP = 0x4,
  TR_SINE = 0x5,
  TR_GRAVITY = 0x6,
  TR_LOW_GRAVITY = 0x7,
  TR_ACCELERATE = 0x8,
  TR_DECELERATE = 0x9,
  TR_PHYSICS = 0xA,
  TR_XDOLL = 0xB,
  TR_FIRST_RAGDOLL = 0xC,
  TR_RAGDOLL = 0xC,
  TR_RAGDOLL_GRAVITY = 0xD,
  TR_RAGDOLL_INTERPOLATE = 0xE,
  TR_LAST_RAGDOLL = 0xE,
  TR_MOON_GRAVITY = 0xF,
  NUM_TRTYPES = 0x10,
};

/* 34 */
enum scriptAnimMoveTypes_t
{
  ANIM_MT_UNUSED = 0x0,
  ANIM_MT_IDLE = 0x1,
  ANIM_MT_SHUFFLE = 0x2,
  ANIM_MT_WALK = 0x3,
  ANIM_MT_RUN = 0x4,
  ANIM_MT_CLIMBUP = 0x5,
  ANIM_MT_CLIMBDOWN = 0x6,
  ANIM_MT_SPRINT = 0x7,
  ANIM_MT_MANTLE_ROOT = 0x8,
  ANIM_MT_MANTLE_UP_57 = 0x9,
  ANIM_MT_MANTLE_UP_51 = 0xA,
  ANIM_MT_MANTLE_UP_45 = 0xB,
  ANIM_MT_MANTLE_UP_39 = 0xC,
  ANIM_MT_MANTLE_UP_33 = 0xD,
  ANIM_MT_MANTLE_UP_27 = 0xE,
  ANIM_MT_MANTLE_UP_21 = 0xF,
  ANIM_MT_MANTLE_OVER_HIGH = 0x10,
  ANIM_MT_MANTLE_OVER_MID = 0x11,
  ANIM_MT_MANTLE_OVER_LOW = 0x12,
  ANIM_MT_TURNRIGHT = 0x13,
  ANIM_MT_TURNLEFT = 0x14,
  ANIM_MT_STUMBLE = 0x15,
  ANIM_MT_STUMBLE_WALK = 0x16,
  ANIM_MT_STUMBLE_SPRINT = 0x17,
  ANIM_MT_SWIM = 0x18,
  ANIM_MT_DTP = 0x19,
  ANIM_MT_SLIDE = 0x1A,
  NUM_ANIM_MOVETYPES = 0x1B,
};

/* 35 */
enum TractionType
{
  TRACTION_TYPE_FRONT = 0x0,
  TRACTION_TYPE_BACK = 0x1,
  TRACTION_TYPE_ALL_WD = 0x2,
  NUM_TRACTION_TYPES = 0x3,
};

/* 36 */
enum perksEnum
{
  PERK_ADDITIONALPRIMARYWEAPON = 0x0,
  PERK_ARMORPIERCING = 0x1,
  PERK_ARMORVEST = 0x2,
  PERK_ACCURACY = 0x3,
  PERK_BULLETDMG = 0x4,
  PERK_REDUCEBULLETFLINCH = 0x5,
  PERK_EXTRABP = 0x6,
  PERK_DEADSHOT = 0x7,
  PERK_DELAYEXPLOSIVE = 0x8,
  PERK_DETECTEXPLOSIVE = 0x9,
  PERK_DISARMEXPLOSIVE = 0xA,
  PERK_EARNMOREMOMENTUM = 0xB,
  PERK_EXPLOSIVEDMG = 0xC,
  PERK_EXTRAAMMO = 0xD,
  PERK_FALLHEIGHT = 0xE,
  PERK_FASTADS = 0xF,
  PERK_FASTEQUIPMENTUSE = 0x10,
  PERK_FASTLADDERCLIMB = 0x11,
  PERK_FASTMANTLE = 0x12,
  PERK_FASTMELEE = 0x13,
  PERK_FASTRELOAD = 0x14,
  PERK_FASTTOSS = 0x15,
  PERK_FASTSWITCH = 0x16,
  PERK_FINALSTAND = 0x17,
  PERK_FIREPROOF = 0x18,
  PERK_FLAKJACKET = 0x19,
  PERK_FLASHPROTECTION = 0x1A,
  PERK_JAMRADAR = 0x1B,
  PERK_GRENADEDEATH = 0x1C,
  PERK_HEALTHREGEN = 0x1D,
  PERK_EXTRABREATH = 0x1E,
  PERK_IMMUNECOUNTERUAV = 0x1F,
  PERK_IMMUNEEMP = 0x20,
  PERK_IMMUNEMMS = 0x21,
  PERK_IMMUNENVTHERMAL = 0x22,
  PERK_IMMUNERANGEFINDER = 0x23,
  PERK_KILLSTREAK = 0x24,
  PERK_LONGERSPRINT = 0x25,
  PERK_LOUDENEMIES = 0x26,
  PERK_MARKSMAN = 0x27,
  PERK_MOVEFASTER = 0x28,
  PERK_NOMOTIONSENSOR = 0x29,
  PERK_NONAME = 0x2A,
  PERK_NOTTARGETEDBYAIRSUPPORT = 0x2B,
  PERK_NOKILLSTREAKRETICLE = 0x2C,
  PERK_NOTTARGETEDBYSENTRY = 0x2D,
  PERK_TOSSBACK = 0x2E,
  PERK_PISTOLDEATH = 0x2F,
  PERK_PROXIMITYPROTECTION = 0x30,
  PERK_QUICKREVIVE = 0x31,
  PERK_QUIETMOVE = 0x32,
  PERK_RECON = 0x33,
  PERK_RATEOFFIRE = 0x34,
  PERK_SCAVENGER = 0x35,
  PERK_SHOWENEMYEQUIPMENT = 0x36,
  PERK_STUNPROTECTION = 0x37,
  PERK_REDUCESHELLSHOCK = 0x38,
  PERK_SPRINTRECOVERY = 0x39,
  PERK_SHOWONRADAR = 0x3A,
  PERK_STALKER = 0x3B,
  PERK_TWOGRENADES = 0x3C,
  PERK_TWOPRIMARIES = 0x3D,
  PERK_UNLIMITEDSPRINT = 0x3E,
  PERK_COUNT = 0x3F,
  PERK_UNKNOWN = 0x3F,
};

/* 37 */
typedef D3D10_SRV_DIMENSION D3D_SRV_DIMENSION;

/* 38 */
enum team_t
{
  TEAM_FREE = 0x0,
  TEAM_BAD = 0x0,
  TEAM_ALLIES = 0x1,
  TEAM_AXIS = 0x2,
  TEAM_THREE = 0x3,
  TEAM_FOUR = 0x4,
  TEAM_FIVE = 0x5,
  TEAM_SIX = 0x6,
  TEAM_SEVEN = 0x7,
  TEAM_EIGHT = 0x8,
  TEAM_NUM_PLAYING_TEAMS = 0x9,
  TEAM_SPECTATOR = 0x9,
  TEAM_NUM_TEAMS = 0xA,
  TEAM_LOCALPLAYERS = 0xB,
  TEAM_FIRST_PLAYING_TEAM = 0x1,
  TEAM_LAST_PLAYING_TEAM = 0x8,
};

/* 39 */
enum $97CBFB1B513E8491D5B795850FC24ECE
{
  DAMAGE_RANGE_1 = 0x0,
  DAMAGE_RANGE_2 = 0x1,
  DAMAGE_RANGE_3 = 0x2,
  DAMAGE_RANGE_4 = 0x3,
  DAMAGE_RANGE_5 = 0x4,
  DAMAGE_RANGE_6 = 0x5,
  DAMAGE_RANGE_COUNT = 0x6,
  DAMAGE_RANGE_MAX = 0x0,
  DAMAGE_RANGE_MIN = 0x5,
};

/* 40 */
enum jqProcessor
{
  JQ_CORE_0 = 0x1,
  JQ_CORE_1 = 0x2,
  JQ_CORE_2 = 0x4,
  JQ_CORE_3 = 0x8,
  JQ_CORE_4 = 0x10,
  JQ_CORE_5 = 0x20,
  JQ_CORE_6 = 0x40,
  JQ_CORE_7 = 0x80,
  JQ_CORE_ALL = 0xFF,
};

/* 41 */
enum scriptAnimEventTypes_t
{
  ANIM_ET_UNUSED = 0x0,
  ANIM_ET_DEATH = 0x1,
  ANIM_ET_FIREWEAPON = 0x2,
  ANIM_ET_JUMP = 0x3,
  ANIM_ET_LAND = 0x4,
  ANIM_ET_DROPWEAPON = 0x5,
  ANIM_ET_RAISEWEAPON = 0x6,
  ANIM_ET_FIRSTRAISEWEAPON = 0x7,
  ANIM_ET_RELOAD = 0x8,
  ANIM_ET_CROUCH_TO_PRONE = 0x9,
  ANIM_ET_PRONE_TO_CROUCH = 0xA,
  ANIM_ET_STAND_TO_CROUCH = 0xB,
  ANIM_ET_CROUCH_TO_STAND = 0xC,
  ANIM_ET_PRONE_TO_STAND = 0xD,
  ANIM_ET_PRONE_TO_SPRINT = 0xE,
  ANIM_ET_RUN_TO_IDLE = 0xF,
  ANIM_ET_MELEEATTACK = 0x10,
  ANIM_ET_MELEELEFT = 0x11,
  ANIM_ET_KNIFE_MELEE = 0x12,
  ANIM_ET_KNIFE_MELEE_CHARGE = 0x13,
  ANIM_ET_FLINCH = 0x14,
  ANIM_ET_SHELLSHOCK = 0x15,
  ANIM_ET_VEHICLE_ENTER = 0x16,
  ANIM_ET_VEHICLE_CHANGE_SEATS = 0x17,
  ANIM_ET_VEHICLE_EXIT = 0x18,
  ANIM_ET_SCRIPTEVENT = 0x19,
  ANIM_ET_DTP_TAKEOFF = 0x1A,
  ANIM_ET_DTP_LAND = 0x1B,
  ANIM_ET_STAND_TO_LASTSTAND = 0x1C,
  ANIM_ET_CROUCH_TO_LASTSTAND = 0x1D,
  ANIM_ET_PRONE_TO_LASTSTAND = 0x1E,
  ANIM_ET_LASTSTAND_TO_STAND = 0x1F,
  ANIM_ET_LASTSTAND_TO_CROUCH = 0x20,
  ANIM_ET_LASTSTAND_TO_PRONE = 0x21,
  ANIM_ET_FLARED = 0x22,
  ANIM_ET_LASTSTAND_SUICIDE = 0x23,
  ANIM_ET_PRIME_GRENADE = 0x24,
  NUM_ANIM_EVENTTYPES = 0x25,
};

/* 42 */
enum jqWorkerType
{
  JQ_WORKER_GENERIC = 0x0,
  JQ_WORKER_MAX = 0x1,
  JQ_WORKER_DEFAULT = 0x0,
};

/* 43 */
enum $40CD8C26C9D3F436EDECE988BA0B6A87
{
  AIDEMOLOCKONVIEW_STANDING = 0x0,
  AIDEMOLOCKONVIEW_MISSING_LEGS = 0x1,
  AIDEMOLOCKONVIEW_COUNT = 0x2,
};

/* 44 */
enum $7A573D928505CD4C365AD84FA0C45A1A
{
  STATMON_FPS = 0x0,
  STATMON_FILEACCESS = 0x1,
  STATMON_SOUNDCPU = 0x2,
  STATMON_MAXEFFECTS = 0x3,
  STATMON_SNAPSHOTENTS = 0x4,
  STATMON_TRIS = 0x5,
  STATMON_SERVERFPS = 0x6,
  STATMON_NET = 0x7,
  STATMON_DENSECOLLISION = 0x8,
  STATMON_IK = 0x9,
  STATMON_SCRIPTERROR = 0xA,
  STATMON_BANDWIDTHEXCEEDED = 0xB,
  STATMON_GAMESTATEEXCEEDED = 0xC,
  STATMON_BANDWIDTHLIMITED = 0xD,
  STATMON_COUNT = 0xE,
};

/* 45 */
enum keyNum_t
{
  K_NONE = 0x0,
  K_FIRSTGAMEPADBUTTON_RANGE_1 = 0x1,
  K_BUTTON_A = 0x1,
  K_BUTTON_B = 0x2,
  K_BUTTON_X = 0x3,
  K_BUTTON_Y = 0x4,
  K_BUTTON_LSHLDR = 0x5,
  K_BUTTON_RSHLDR = 0x6,
  K_LASTGAMEPADBUTTON_RANGE_1 = 0x6,
  K_BS = 0x8,
  K_TAB = 0x9,
  K_NL = 0xA,
  K_ENTER = 0xD,
  K_FIRSTGAMEPADBUTTON_RANGE_2 = 0xE,
  K_BUTTON_START = 0xE,
  K_BUTTON_BACK = 0xF,
  K_BUTTON_LSTICK = 0x10,
  K_BUTTON_RSTICK = 0x11,
  K_BUTTON_LTRIG = 0x12,
  K_BUTTON_RTRIG = 0x13,
  K_DPAD_UP = 0x14,
  K_FIRSTDPAD = 0x14,
  K_DPAD_DOWN = 0x15,
  K_DPAD_LEFT = 0x16,
  K_DPAD_RIGHT = 0x17,
  K_BUTTON_RTRIG_PUSH = 0x18,
  K_BUTTON_LTRIG_PUSH = 0x19,
  K_BUTTON_LSTICK_ALTIMAGE2 = 0x10,
  K_BUTTON_RSTICK_ALTIMAGE2 = 0x11,
  K_BUTTON_LSTICK_ALTIMAGE = 0xBC,
  K_NUNCHUK_RIGHT = 0xBC,
  K_BUTTON_RSTICK_ALTIMAGE = 0xBD,
  K_WIIUMOTE_RIGHT = 0xBD,
  K_LASTDPAD = 0x17,
  K_DPAD_LEFTRIGHT = 0x18,
  K_DPAD_UPDOWN = 0x19,
  K_LASTGAMEPADBUTTON_RANGE_2 = 0x19,
  K_CODPOINTS = 0x1A,
  K_ESCAPE = 0x1B,
  K_FIRSTGAMEPADBUTTON_RANGE_3 = 0x1C,
  K_APAD_UP = 0x1C,
  K_FIRSTAPAD = 0x1C,
  K_APAD_DOWN = 0x1D,
  K_APAD_LEFT = 0x1E,
  K_APAD_RIGHT = 0x1F,
  K_LASTAPAD = 0x1F,
  K_LASTGAMEPADBUTTON_RANGE_3 = 0x1F,
  K_SPACE = 0x20,
  K_BACKSPACE = 0x7F,
  K_ASCII_FIRST = 0x80,
  K_ASCII_181 = 0x80,
  K_ASCII_191 = 0x81,
  K_ASCII_223 = 0x82,
  K_ASCII_224 = 0x83,
  K_ASCII_225 = 0x84,
  K_ASCII_228 = 0x85,
  K_ASCII_229 = 0x86,
  K_ASCII_230 = 0x87,
  K_ASCII_231 = 0x88,
  K_ASCII_232 = 0x89,
  K_ASCII_233 = 0x8A,
  K_ASCII_236 = 0x8B,
  K_ASCII_241 = 0x8C,
  K_ASCII_242 = 0x8D,
  K_ASCII_243 = 0x8E,
  K_ASCII_246 = 0x8F,
  K_ASCII_248 = 0x90,
  K_ASCII_249 = 0x91,
  K_ASCII_250 = 0x92,
  K_ASCII_252 = 0x93,
  K_END_ASCII_CHARS = 0x94,
  K_COMMAND = 0x96,
  K_CAPSLOCK = 0x97,
  K_POWER = 0x98,
  K_PAUSE = 0x99,
  K_UPARROW = 0x9A,
  K_DOWNARROW = 0x9B,
  K_LEFTARROW = 0x9C,
  K_RIGHTARROW = 0x9D,
  K_ALT = 0x9E,
  K_CTRL = 0x9F,
  K_SHIFT = 0xA0,
  K_INS = 0xA1,
  K_DEL = 0xA2,
  K_PGDN = 0xA3,
  K_PGUP = 0xA4,
  K_HOME = 0xA5,
  K_END = 0xA6,
  K_F1 = 0xA7,
  K_F2 = 0xA8,
  K_F3 = 0xA9,
  K_F4 = 0xAA,
  K_F5 = 0xAB,
  K_F6 = 0xAC,
  K_F7 = 0xAD,
  K_F8 = 0xAE,
  K_F9 = 0xAF,
  K_F10 = 0xB0,
  K_F11 = 0xB1,
  K_F12 = 0xB2,
  K_F13 = 0xB3,
  K_F14 = 0xB4,
  K_F15 = 0xB5,
  K_KP_HOME = 0xB6,
  K_KP_UPARROW = 0xB7,
  K_KP_PGUP = 0xB8,
  K_KP_LEFTARROW = 0xB9,
  K_KP_5 = 0xBA,
  K_KP_RIGHTARROW = 0xBB,
  K_KP_END = 0xBC,
  K_KP_DOWNARROW = 0xBD,
  K_KP_PGDN = 0xBE,
  K_KP_ENTER = 0xBF,
  K_KP_INS = 0xC0,
  K_KP_DEL = 0xC1,
  K_KP_SLASH = 0xC2,
  K_KP_MINUS = 0xC3,
  K_KP_PLUS = 0xC4,
  K_KP_NUMLOCK = 0xC5,
  K_KP_STAR = 0xC6,
  K_KP_EQUALS = 0xC7,
  K_MOUSE1 = 0xC8,
  K_MOUSE2 = 0xC9,
  K_MOUSE3 = 0xCA,
  K_MOUSE4 = 0xCB,
  K_MOUSE5 = 0xCC,
  K_MWHEELDOWN = 0xCD,
  K_MWHEELUP = 0xCE,
  K_AUX1 = 0xCF,
  K_AUX2 = 0xD0,
  K_AUX3 = 0xD1,
  K_AUX4 = 0xD2,
  K_AUX5 = 0xD3,
  K_AUX6 = 0xD4,
  K_AUX7 = 0xD5,
  K_AUX8 = 0xD6,
  K_AUX9 = 0xD7,
  K_AUX10 = 0xD8,
  K_AUX11 = 0xD9,
  K_AUX12 = 0xDA,
  K_AUX13 = 0xDB,
  K_AUX14 = 0xDC,
  K_AUX15 = 0xDD,
  K_AUX16 = 0xDE,
  K_LAST_KEY = 0xDF,
};

/* 46 */
typedef _D3D10_INCLUDE_TYPE _D3D_INCLUDE_TYPE;

/* 47 */
enum weapAnimFiles_t
{
  WEAP_ANIM_ROOT = 0x0,
  WEAP_ANIM_IDLE = 0x1,
  WEAP_ANIM_EMPTY_IDLE = 0x2,
  WEAP_ANIM_FIRE_INTRO = 0x3,
  WEAP_ANIM_FIRE = 0x4,
  WEAP_ANIM_HOLD_FIRE = 0x5,
  WEAP_ANIM_LASTSHOT = 0x6,
  WEAP_ANIM_FINALSHOT = 0x7,
  WEAP_ANIM_RECHAMBER = 0x8,
  WEAP_ANIM_MELEE = 0x9,
  WEAP_ANIM_MELEE1 = 0xA,
  WEAP_ANIM_MELEE2 = 0xB,
  WEAP_ANIM_MELEE3 = 0xC,
  WEAP_ANIM_MELEE_EMPTY = 0xD,
  WEAP_ANIM_MELEE_CHARGE = 0xE,
  WEAP_ANIM_MELEE_CHARGE_EMPTY = 0xF,
  WEAP_ANIM_RELOAD = 0x10,
  WEAP_ANIM_RELOAD_RIGHT = 0x11,
  WEAP_ANIM_RELOAD_EMPTY = 0x12,
  WEAP_ANIM_RELOAD_START = 0x13,
  WEAP_ANIM_RELOAD_END = 0x14,
  WEAP_ANIM_RELOAD_QUICK = 0x15,
  WEAP_ANIM_RELOAD_QUICK_EMPTY = 0x16,
  WEAP_ANIM_RAISE = 0x17,
  WEAP_ANIM_FIRST_RAISE = 0x18,
  WEAP_ANIM_DROP = 0x19,
  WEAP_ANIM_ALT_RAISE = 0x1A,
  WEAP_ANIM_ALT_DROP = 0x1B,
  WEAP_ANIM_QUICK_RAISE = 0x1C,
  WEAP_ANIM_QUICK_DROP = 0x1D,
  WEAP_ANIM_EMPTY_RAISE = 0x1E,
  WEAP_ANIM_EMPTY_DROP = 0x1F,
  WEAP_ANIM_SPRINT_IN = 0x20,
  WEAP_ANIM_SPRINT_LOOP = 0x21,
  WEAP_ANIM_SPRINT_OUT = 0x22,
  WEAP_ANIM_SPRINT_EMPTY_IN = 0x23,
  WEAP_ANIM_SPRINT_EMPTY_LOOP = 0x24,
  WEAP_ANIM_SPRINT_EMPTY_OUT = 0x25,
  WEAP_ANIM_LOWREADY_IN = 0x26,
  WEAP_ANIM_LOWREADY_LOOP = 0x27,
  WEAP_ANIM_LOWREADY_OUT = 0x28,
  WEAP_ANIM_CONT_FIRE_IN = 0x29,
  WEAP_ANIM_CONT_FIRE_LOOP = 0x2A,
  WEAP_ANIM_CONT_FIRE_OUT = 0x2B,
  WEAP_ANIM_CRAWL_IN = 0x2C,
  WEAP_ANIM_CRAWL_FORWARD = 0x2D,
  WEAP_ANIM_CRAWL_BACK = 0x2E,
  WEAP_ANIM_CRAWL_RIGHT = 0x2F,
  WEAP_ANIM_CRAWL_LEFT = 0x30,
  WEAP_ANIM_CRAWL_OUT = 0x31,
  WEAP_ANIM_CRAWL_EMPTY_IN = 0x32,
  WEAP_ANIM_CRAWL_EMPTY_FORWARD = 0x33,
  WEAP_ANIM_CRAWL_EMPTY_BACK = 0x34,
  WEAP_ANIM_CRAWL_EMPTY_RIGHT = 0x35,
  WEAP_ANIM_CRAWL_EMPTY_LEFT = 0x36,
  WEAP_ANIM_CRAWL_EMPTY_OUT = 0x37,
  WEAP_ANIM_DEPLOY = 0x38,
  WEAP_ANIM_BREAKDOWN = 0x39,
  WEAP_ANIM_DETONATE = 0x3A,
  WEAP_ANIM_NIGHTVISION_WEAR = 0x3B,
  WEAP_ANIM_NIGHTVISION_REMOVE = 0x3C,
  WEAP_ANIM_ADS_FIRE = 0x3D,
  WEAP_ANIM_ADS_LASTSHOT = 0x3E,
  WEAP_ANIM_ADS_FIRE_INTRO = 0x3F,
  WEAP_ANIM_ADS_RECHAMBER = 0x40,
  WEAP_ANIM_DTP_IN = 0x41,
  WEAP_ANIM_DTP_LOOP = 0x42,
  WEAP_ANIM_DTP_OUT = 0x43,
  WEAP_ANIM_DTP_EMPTY_IN = 0x44,
  WEAP_ANIM_DTP_EMPTY_LOOP = 0x45,
  WEAP_ANIM_DTP_EMPTY_OUT = 0x46,
  WEAP_ANIM_SLIDE_IN = 0x47,
  WEAP_ANIM_MANTLE = 0x48,
  WEAP_ANIM_CAMERA_SPRINT_LOOP = 0x49,
  WEAP_ANIM_CAMERA_DTP_IN = 0x4A,
  WEAP_ANIM_CAMERA_DTP_LOOP = 0x4B,
  WEAP_ANIM_CAMERA_DTP_OUT = 0x4C,
  WEAP_ANIM_CAMERA_MANTLE = 0x4D,
  WEAP_ANIM_FIRE_LEFT = 0x4E,
  WEAP_ANIM_LASTSHOT_LEFT = 0x4F,
  WEAP_ANIM_FINALSHOT_LEFT = 0x50,
  WEAP_ANIM_IDLE_LEFT = 0x51,
  WEAP_ANIM_EMPTY_IDLE_LEFT = 0x52,
  WEAP_ANIM_RELOAD_EMPTY_LEFT = 0x53,
  WEAP_ANIM_RELOAD_LEFT = 0x54,
  WEAP_ANIM_ADS_UP = 0x55,
  WEAP_ANIM_ADS_DOWN = 0x56,
  WEAP_ANIM_ADS_UP_OTHER_SCOPE = 0x57,
  NUM_WEAP_ANIMS = 0x58,
};

/* 48 */
enum $95E1DE07A0859745FF169FB2923C4BF2
{
  COL_PARTITION = 0x0,
  COL_BRUSH = 0x1,
};

/* 49 */
enum CoreStringTable
{
  CORE_TABLE_STATS = 0x0,
  CORE_TABLE_MILESTONE_0 = 0x1,
  CORE_TABLE_MILESTONE_FIRST = 0x1,
  CORE_TABLE_MILESTONE_1 = 0x2,
  CORE_TABLE_MILESTONE_2 = 0x3,
  CORE_TABLE_MILESTONE_3 = 0x4,
  CORE_TABLE_MILESTONE_LAST = 0x4,
  CORE_TABLE_GLOBAL_COUNTERS = 0x5,
  CORE_TABLE_GLOBAL_COUNTERS_REF = 0x6,
  CORE_TABLE_TRACKER_COLUMNS = 0x7,
  CORE_TABLE_SP_STATS = 0x8,
  CORE_TABLE_RANK_ICON = 0x9,
  CORE_TABLE_SCORE_INFO = 0xA,
  CORE_TABLE_GAMETYPES = 0xB,
  CORE_TABLE_GAMEMODES = 0xC,
  CORE_TABLE_RANK_ICON_ZM = 0xD,
  CORE_TABLE_GUNLEVELS = 0xE,
  CORE_TABLE_ZM_STATS = 0xF,
  CORE_TABLE_MTX_ITEMS = 0x10,
  CORE_TABLE_COUNT = 0x11,
};

/* 50 */
enum statsLocation
{
  STATS_LOCATION_NORMAL = 0x0,
  STATS_LOCATION_FORCE_NORMAL = 0x1,
  STATS_LOCATION_BACKUP = 0x2,
  STATS_LOCATION_STABLE = 0x3,
  STATS_LOCATION_OTHERPLAYER = 0x4,
  STATS_LOCATION_COUNT = 0x5,
};

/* 51 */
enum $281899ECFC445037A6FDF23043927723
{
  qfalse = 0x0,
  qtrue = 0x1,
};

/* 52 */
enum $EEFB6B9224E02F3F92C050B1A347CB32
{
  IMGF_MIPMAPS = 0x1,
  IMGF_ALLOWPICMIP = 0x2,
  IMGF_CHARACTERMIP = 0x4,
  IMGF_LIGHTMAP = 0x8,
  IMGF_CLAMP_S = 0x10,
  IMGF_CLAMP_T = 0x20,
  IMGF_HEIGHTMAP = 0x40,
  IMGF_DELAYLOAD = 0x80,
  IMGF_NOOPT = 0x100,
  IMGF_SCREENDEPTH = 0x200,
  IMGF_TEXTURENAME = 0x400,
  IMGF_SHEET_KEEP_FLAGS = 0x1,
};

/* 53 */
typedef _D3D10_SHADER_VARIABLE_CLASS _D3D_SHADER_VARIABLE_CLASS;

/* 54 */
enum eAttachmentGroup
{
  ATTACHMENT_GROUP_ATTACHMENT = 0x0,
  ATTACHMENT_GROUP_WEAPONOPTIONS = 0x1,
  ATTACHMENT_GROUP_COUNT = 0x2,
  ATTACHMENT_GROUP_INVALID = 0x2,
};

/* 55 */
enum eWeaponOptionGroup
{
  WEAPONOPTION_GROUP_FIRST = 0x0,
  WEAPONOPTION_GROUP_CAMO = 0x0,
  WEAPONOPTION_GROUP_TAG = 0x1,
  WEAPONOPITON_GROUP_EMBLEM = 0x2,
  WEAPONOPTION_GROUP_FIRST_ATTACHMENT_OPTION = 0x3,
  WEAPONOPTION_GROUP_RETICLE = 0x3,
  WEAPONOPTION_GROUP_LENS = 0x4,
  WEAPONOPTION_GROUP_RETICLE_COLOR = 0x5,
  WEAPONOPTION_GROUP_LAST_ATTACHMENT_OPTION = 0x5,
  WEAPONOPTION_GROUP_COUNT = 0x6,
  WEAPONOPTION_GROUP_INVALID = 0x6,
};

/* 56 */
typedef _D3D10_SHADER_VARIABLE_FLAGS _D3D_SHADER_VARIABLE_FLAGS;

/* 57 */
enum VehicleSeatPositions
{
  VEH_POS_NONE = 0xFFFFFFFF,
  VEH_POS_DRIVER = 0x0,
  VEH_POS_MIN_GUNNER = 0x1,
  VEH_POS_GUNNER_1 = 0x1,
  VEH_POS_GUNNER_2 = 0x2,
  VEH_POS_GUNNER_3 = 0x3,
  VEH_POS_GUNNER_4 = 0x4,
  VEH_POS_MAX_GUNNER = 0x4,
  VEH_POS_MIN_PASSENGER = 0x5,
  VEH_POS_PASSENGER_1 = 0x5,
  VEH_POS_PASSENGER_2 = 0x6,
  VEH_POS_PASSENGER_3 = 0x7,
  VEH_POS_PASSENGER_4 = 0x8,
  VEH_POS_PASSENGER_5 = 0x9,
  VEH_POS_PASSENGER_6 = 0xA,
  VEH_POS_MAX_PASSENGER = 0xA,
  NUM_VEHICLE_POSITIONS = 0xB,
};

/* 58 */
enum EMemTrack
{
  TRACK_DEBUG = 0x0,
  TRACK_HUNK = 0x1,
  TRACK_BINARIES = 0x2,
  TRACK_MISC_SWAP = 0x3,
  TRACK_DELIMITER1 = 0x4,
  TRACK_AI = 0x5,
  TRACK_AI_NODES = 0x6,
  TRACK_SCRIPT = 0x7,
  TRACK_SCRIPT_DEBUG = 0x8,
  TRACK_FX = 0x9,
  TRACK_GLASS = 0xA,
  TRACK_NETWORK_ENTITY = 0xB,
  TRACK_MISC = 0xC,
  TRACK_FASTFILE = 0xD,
  TRACK_ANIMATION = 0xE,
  TRACK_ANIMCACHE = 0xF,
  TRACK_WORLD_GLOBALS = 0x10,
  TRACK_SOUND_GLOBALS = 0x11,
  TRACK_CLIENT_ANIMSCRIPT = 0x12,
  TRACK_SOUND = 0x13,
  TRACK_DELIMITER2 = 0x14,
  TRACK_RENDERER_GLOBALS = 0x15,
  TRACK_RENDERER_IMAGES = 0x16,
  TRACK_RENDERER_WORLD = 0x17,
  TRACK_RENDERER_MODELS = 0x18,
  TRACK_RENDERER_MISC = 0x19,
  TRACK_RENDERER_SIEGE = 0x1A,
  TRACK_CINEMATICS = 0x1B,
  TRACK_DELIMITER3 = 0x1C,
  TRACK_COLLISION_MISC = 0x1D,
  TRACK_COLLISION_BRUSH = 0x1E,
  TRACK_COLLISION_MODEL_TRI = 0x1F,
  TRACK_COLLISION_TERRAIN = 0x20,
  TRACK_PHYSICS = 0x21,
  TRACK_MAP_ENTS = 0x22,
  TRACK_TEMP = 0x23,
  TRACK_DELIMITER4 = 0x24,
  TRACK_LOCALIZATION = 0x25,
  TRACK_FLAME = 0x26,
  TRACK_UI = 0x27,
  TRACK_TL = 0x28,
  TRACK_ZMEM = 0x29,
  TRACK_FIREMANAGER = 0x2A,
  TRACK_PROFILE = 0x2B,
  TRACK_CLIENT = 0x2C,
  TRACK_RECORDER = 0x2D,
  TRACK_RSTREAM = 0x2E,
  TRACK_RENDERER_STREAMBUFFER = 0x2F,
  TRACK_RENDERER_STREAMBUFFER_EXTRA = 0x30,
  TRACK_GEOSTREAM = 0x31,
  TRACK_DDL = 0x32,
  TRACK_ONLINE = 0x33,
  TRACK_EMBLEM = 0x34,
  TRACK_VEHICLEDEF = 0x35,
  TRACK_THREAD_LOCAL = 0x36,
  TRACK_MINSPEC_IMAGES = 0x37,
  TRACK_DELIMITER5 = 0x38,
  TRACK_NONE = 0x39,
  TRACK_COUNT = 0x3A,
};

/* 59 */
enum eAttachment
{
  ATTACHMENT_NONE = 0x0,
  ATTACHMENT_ACOG = 0x1,
  ATTACHMENT_DUALCLIP = 0x2,
  ATTACHMENT_DUALOPTIC = 0x3,
  ATTACHMENT_DW = 0x4,
  ATTACHMENT_EXTBARREL = 0x5,
  ATTACHMENT_EXTCLIP = 0x6,
  ATTACHMENT_EXTRAMAGS = 0x7,
  ATTACHMENT_FASTADS = 0x8,
  ATTACHMENT_FASTRELOAD = 0x9,
  ATTACHMENT_FMJ = 0xA,
  ATTACHMENT_GL = 0xB,
  ATTACHMENT_GRIP = 0xC,
  ATTACHMENT_HOLO = 0xD,
  ATTACHMENT_IR = 0xE,
  ATTACHMENT_IRONSIGHTS = 0xF,
  ATTACHMENT_LONGBREATH = 0x10,
  ATTACHMENT_MK = 0x11,
  ATTACHMENT_MMS = 0x12,
  ATTACHMENT_RANGEFINDER = 0x13,
  ATTACHMENT_REFLEX = 0x14,
  ATTACHMENT_RF = 0x15,
  ATTACHMENT_SELECTFIRE = 0x16,
  ATTACHMENT_SILENCER = 0x17,
  ATTACHMENT_STACKFIRE = 0x18,
  ATTACHMENT_STALKER = 0x19,
  ATTACHMENT_STEADYAIM = 0x1A,
  ATTACHMENT_SWAYREDUC = 0x1B,
  ATTACHMENT_TACKNIFE = 0x1C,
  ATTACHMENT_VZOOM = 0x1D,
  ATTACHMENT_TYPE_COUNT = 0x1E,
  ATTACHMENT_INVALID = 0x1E,
};

/* 60 */
typedef _D3D10_SHADER_VARIABLE_TYPE _D3D_SHADER_VARIABLE_TYPE;

/* 61 */
enum aistateEnum_t
{
  AISTATE_COMBAT = 0x0,
  MAX_AISTATES = 0x1,
};

/* 62 */
enum statIndex_t
{
  STAT_HEALTH = 0x0,
  STAT_DEAD_YAW = 0x1,
  STAT_MAX_HEALTH = 0x2,
  STAT_SPAWN_COUNT = 0x3,
  MAX_STATS = 0x4,
};

/* 63 */
enum scriptAnimConditions_t
{
  ANIM_COND_PLAYERANIMTYPE = 0x0,
  ANIM_COND_WEAPONCLASS = 0x1,
  ANIM_COND_NEXTPLAYERANIMTYPE = 0x2,
  ANIM_COND_NEXTWEAPONCLASS = 0x3,
  ANIM_COND_MOUNTED = 0x4,
  ANIM_COND_MOVESTATUS = 0x5,
  ANIM_COND_PREVDIRECTION = 0x6,
  ANIM_COND_DIRECTION = 0x7,
  ANIM_COND_DMGDIRECTION = 0x8,
  ANIM_COND_DMGTYPE = 0x9,
  ANIM_COND_STANCE = 0xA,
  ANIM_COND_UNDERHAND = 0xB,
  ANIM_COND_FIRING = 0xC,
  ANIM_COND_WEAPON_POSITION = 0xD,
  ANIM_COND_SLOPE = 0xE,
  ANIM_COND_PERK = 0xF,
  ANIM_COND_ATTACHMENT = 0x10,
  ANIM_COND_RIOTSHIELDNEXT = 0x11,
  ANIM_COND_VEHICLE_NAME = 0x12,
  ANIM_COND_VEHICLE_SEAT_TO = 0x13,
  ANIM_COND_VEHICLE_SEAT_FROM = 0x14,
  ANIM_COND_VEHICLE_ANIM_STAGE = 0x15,
  ANIM_COND_VEHICLE_ENTRY_POS = 0x16,
  ANIM_COND_EVENT = 0x17,
  ANIM_COND_CAC = 0x18,
  NUM_ANIM_CONDITIONS = 0x19,
};

/* 64 */
enum eAttachmentPoint
{
  ATTACHMENT_POINT_NONE = 0x0,
  ATTACHMENT_POINT_TOP = 0x1,
  ATTACHMENT_POINT_FIRST = 0x1,
  ATTACHMENT_POINT_BOTTOM = 0x2,
  ATTACHMENT_POINT_TRIGGER = 0x3,
  ATTACHMENT_POINT_MUZZLE = 0x4,
  ATTACHMENT_POINT_GUNPERK = 0x5,
  ATTACHMENT_POINT_COUNT = 0x6,
  ATTACHMENT_POINT_INVALID = 0x6,
};

/* 65 */
enum $445250AAC6BFAA79010D6EA411B1B37D
{
  DRAW_SURF_BSP_CAMERA_LIT = 0x0,
  DRAW_SURF_SMODEL_CAMERA_LIT = 0x1,
  DRAW_SURF_CAMERA_LIT_BEGIN = 0x2,
  DRAW_SURF_ENT_CAMERA_LIT = 0x2,
  DRAW_SURF_CAMERA_LIT_END = 0x3,
  DRAW_SURF_BSP_CAMERA_LIGHT_MAP = 0x3,
  DRAW_SURF_SMODEL_CAMERA_LIGHT_MAP_OPAQUE = 0x4,
  DRAW_SURF_CAMERA_LIGHT_MAP_BEGIN = 0x5,
  DRAW_SURF_ENT_CAMERA_LIGHT_MAP_OPAQUE = 0x5,
  DRAW_SURF_CAMERA_LIGHT_MAP_END = 0x6,
  DRAW_SURF_DEPTH_HACK_BEGIN = 0x6,
  DRAW_SURF_DEPTH_HACK_CAMERA = 0x6,
  DRAW_SURF_DEPTH_HACK_END = 0x7,
  DRAW_SURF_CAMERA_LIT_TRANS_BEGIN = 0x7,
  DRAW_SURF_BSP_CAMERA_LIT_TRANS = 0x7,
  DRAW_SURF_SMODEL_CAMERA_LIT_TRANS = 0x8,
  DRAW_SURF_ENT_CAMERA_LIT_TRANS = 0x9,
  DRAW_SURF_CAMERA_LIT_TRANS_END = 0xA,
  DRAW_SURF_CAMERA_LIT_QUASI_OPAQUE_BEGIN = 0xA,
  DRAW_SURF_SMODEL_CAMERA_LIT_QUASI_OPAQUE = 0xA,
  DRAW_SURF_ENT_CAMERA_LIT_QUASI_OPAQUE = 0xB,
  DRAW_SURF_CAMERA_LIT_QUASI_OPAQUE_END = 0xC,
  DRAW_SURF_CAMERA_LIT_FX_BEGIN = 0xC,
  DRAW_SURF_FX_CAMERA_LIT = 0xC,
  DRAW_SURF_FX_CAMERA_LIT_AUTO = 0xD,
  DRAW_SURF_FX_CAMERA_LIT_DECAL = 0xE,
  DRAW_SURF_CODEMESH_CAMERA_LIT = 0xF,
  DRAW_SURF_CAMERA_LIT_FX_END = 0x10,
  DRAW_SURF_CAMERA_EMISSIVE_OPAQUE_BEGIN = 0x10,
  DRAW_SURF_BSP_CAMERA_EMISSIVE_OPAQUE = 0x10,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_OPAQUE = 0x11,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_OPAQUE = 0x12,
  DRAW_SURF_CAMERA_EMISSIVE_OPAQUE_END = 0x13,
  DRAW_SURF_CAMERA_EMISSIVE_TRANS_BEGIN = 0x13,
  DRAW_SURF_BSP_CAMERA_EMISSIVE_TRANS = 0x13,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_TRANS = 0x14,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_TRANS = 0x15,
  DRAW_SURF_CAMERA_EMISSIVE_TRANS_END = 0x16,
  DRAW_SURF_CAMERA_EMISSIVE_FX_BEGIN = 0x16,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE_FX = 0x16,
  DRAW_SURF_ENT_CAMERA_EMISSIVE_FX = 0x17,
  DRAW_SURF_FX_CAMERA_EMISSIVE = 0x18,
  DRAW_SURF_FX_CAMERA_EMISSIVE_AUTO = 0x19,
  DRAW_SURF_FX_CAMERA_EMISSIVE_DECAL = 0x1A,
  DRAW_SURF_FX_CAMERA_EMISSIVE_VIEWMODEL = 0x1B,
  DRAW_SURF_FX_CAMERA_EMISSIVE_SUPERFLARE = 0x1C,
  DRAW_SURF_CAMERA_EMISSIVE_FX_END = 0x1D,
  DRAW_SURF_SUNSHADOW_0_BEGIN = 0x1D,
  DRAW_SURF_BSP_SUNSHADOW_0 = 0x1D,
  DRAW_SURF_SMODEL_SUNSHADOW_0 = 0x1E,
  DRAW_SURF_ENT_SUNSHADOW_0 = 0x1F,
  DRAW_SURF_CODEMESH_SUNSHADOW_0 = 0x20,
  DRAW_SURF_SUNSHADOW_1_BEGIN = 0x21,
  DRAW_SURF_BSP_SUNSHADOW_1 = 0x21,
  DRAW_SURF_SMODEL_SUNSHADOW_1 = 0x22,
  DRAW_SURF_ENT_SUNSHADOW_1 = 0x23,
  DRAW_SURF_CODEMESH_SUNSHADOW_1 = 0x24,
  DRAW_SURF_SPOTSHADOW_0_BEGIN = 0x25,
  DRAW_SURF_BSP_SPOTSHADOW_0 = 0x25,
  DRAW_SURF_SMODEL_SPOTSHADOW_0 = 0x26,
  DRAW_SURF_ENT_SPOTSHADOW_0 = 0x27,
  DRAW_SURF_SPOTSHADOW_1_BEGIN = 0x28,
  DRAW_SURF_BSP_SPOTSHADOW_1 = 0x28,
  DRAW_SURF_SMODEL_SPOTSHADOW_1 = 0x29,
  DRAW_SURF_ENT_SPOTSHADOW_1 = 0x2A,
  DRAW_SURF_SPOTSHADOW_2_BEGIN = 0x2B,
  DRAW_SURF_BSP_SPOTSHADOW_2 = 0x2B,
  DRAW_SURF_SMODEL_SPOTSHADOW_2 = 0x2C,
  DRAW_SURF_ENT_SPOTSHADOW_2 = 0x2D,
  DRAW_SURF_SPOTSHADOW_3_BEGIN = 0x2E,
  DRAW_SURF_BSP_SPOTSHADOW_3 = 0x2E,
  DRAW_SURF_SMODEL_SPOTSHADOW_3 = 0x2F,
  DRAW_SURF_ENT_SPOTSHADOW_3 = 0x30,
  DRAW_SURF_ENT_CAMERA_SONAR = 0x31,
  DRAW_SURF_TYPE_COUNT = 0x32,
};

/* 66 */
enum animCommandFlags
{
  ANIM_FL_THROW_GRENADE = 0x0,
  ANIM_FL_TURN_TO_TURRET = 0x1,
  ANIM_FL_MAX = 0x2,
};

/* 67 */
enum $3A9AEBEE8AE118FBC1C891DCB68A3B56
{
  TECHNIQUE_DEPTH_PREPASS = 0x0,
  TECHNIQUE_BUILD_SHADOWMAP_DEPTH = 0x1,
  TECHNIQUE_UNLIT = 0x2,
  TECHNIQUE_EMISSIVE = 0x3,
  TECHNIQUE_LIT_BEGIN = 0x4,
  TECHNIQUE_LIT = 0x4,
  TECHNIQUE_LIT_SUN = 0x5,
  TECHNIQUE_LIT_SUN_SHADOW = 0x6,
  TECHNIQUE_LIT_SPOT = 0x7,
  TECHNIQUE_LIT_SPOT_SHADOW = 0x8,
  TECHNIQUE_LIT_SPOT_SQUARE = 0x9,
  TECHNIQUE_LIT_SPOT_SQUARE_SHADOW = 0xA,
  TECHNIQUE_LIT_SPOT_ROUND = 0xB,
  TECHNIQUE_LIT_SPOT_ROUND_SHADOW = 0xC,
  TECHNIQUE_LIT_OMNI = 0xD,
  TECHNIQUE_LIT_OMNI_SHADOW = 0xE,
  TECHNIQUE_LIT_DLIGHT_GLIGHT = 0xF,
  TECHNIQUE_LIT_SUN_DLIGHT_GLIGHT = 0x10,
  TECHNIQUE_LIT_SUN_SHADOW_DLIGHT_GLIGHT = 0x11,
  TECHNIQUE_LIT_SPOT_DLIGHT_GLIGHT = 0x12,
  TECHNIQUE_LIT_SPOT_SHADOW_DLIGHT_GLIGHT = 0x13,
  TECHNIQUE_LIT_SPOT_SQUARE_DLIGHT_GLIGHT = 0x14,
  TECHNIQUE_LIT_SPOT_SQUARE_SHADOW_DLIGHT_GLIGHT = 0x15,
  TECHNIQUE_LIT_SPOT_ROUND_DLIGHT_GLIGHT = 0x16,
  TECHNIQUE_LIT_SPOT_ROUND_SHADOW_DLIGHT_GLIGHT = 0x17,
  TECHNIQUE_LIT_OMNI_DLIGHT_GLIGHT = 0x18,
  TECHNIQUE_LIT_OMNI_SHADOW_DLIGHT_GLIGHT = 0x19,
  TECHNIQUE_LIT_END = 0x1A,
  TECHNIQUE_LIGHT_SPOT = 0x1A,
  TECHNIQUE_LIGHT_OMNI = 0x1B,
  TECHNIQUE_FAKELIGHT_NORMAL = 0x1C,
  TECHNIQUE_FAKELIGHT_VIEW = 0x1D,
  TECHNIQUE_SUNLIGHT_PREVIEW = 0x1E,
  TECHNIQUE_CASE_TEXTURE = 0x1F,
  TECHNIQUE_WIREFRAME_SOLID = 0x20,
  TECHNIQUE_WIREFRAME_SHADED = 0x21,
  TECHNIQUE_DEBUG_BUMPMAP = 0x22,
  TECHNIQUE_DEBUG_PERFORMANCE = 0x23,
  TECHNIQUE_COUNT = 0x24,
  TECHNIQUE_TOTAL_COUNT = 0x25,
  TECHNIQUE_CUSTOM_01 = 0x2,
  TECHNIQUE_CUSTOM_02 = 0x3,
  TECHNIQUE_CUSTOM_03 = 0x4,
  TECHNIQUE_CUSTOM_04 = 0x5,
  TECHNIQUE_CUSTOM_05 = 0x6,
  TECHNIQUE_CUSTOM_06 = 0x7,
  TECHNIQUE_CUSTOM_07 = 0x8,
  TECHNIQUE_CUSTOM_08 = 0x9,
  TECHNIQUE_CUSTOM_09 = 0xA,
  TECHNIQUE_CUSTOM_10 = 0xB,
  TECHNIQUE_CUSTOM_11 = 0xC,
  TECHNIQUE_CUSTOM_12 = 0xD,
  TECHNIQUE_CUSTOM_13 = 0xE,
  TECHNIQUE_CUSTOM_14 = 0xF,
  TECHNIQUE_CUSTOM_15 = 0x10,
  TECHNIQUE_CUSTOM_16 = 0x11,
  TECHNIQUE_CUSTOM_17 = 0x12,
  TECHNIQUE_CUSTOM_18 = 0x13,
  TECHNIQUE_CUSTOM_19 = 0x14,
  TECHNIQUE_CUSTOM_20 = 0x15,
  TECHNIQUE_CUSTOM_21 = 0x16,
  TECHNIQUE_CUSTOM_22 = 0x17,
  TECHNIQUE_CUSTOM_23 = 0x18,
  TECHNIQUE_CUSTOM_24 = 0x19,
  TECHNIQUE_CUSTOM_25 = 0x1A,
  TECHNIQUE_CUSTOM_26 = 0x1B,
  TECHNIQUE_CUSTOM_27 = 0x1C,
  TECHNIQUE_CUSTOM_28 = 0x1D,
  TECHNIQUE_CUSTOM_29 = 0x1E,
  TECHNIQUE_CUSTOM_30 = 0x1F,
  TECHNIQUE_CUSTOM_COUNT = 0x20,
  TECHNIQUE_NONE = 0xFF,
};

/* 68 */
enum $0067B3625803BF20F1C14D2DD0AB38A5
{
  DSKEL_CREATE_INC = 0x20,
};

/* 69 */
enum $C449BC9FACAA7A175DAEF42E806D3C5D
{
  TRACK_LOCATION_MRAM = 0x0,
  TRACK_LOCATION_LRAM = 0x1,
  TRACK_LOCATION_COUNT = 0x2,
};

/* 70 */
enum he_type_t
{
  HE_TYPE_FREE = 0x0,
  HE_TYPE_TEXT = 0x1,
  HE_TYPE_VALUE = 0x2,
  HE_TYPE_PLAYERNAME = 0x3,
  HE_TYPE_MAPNAME = 0x4,
  HE_TYPE_GAMETYPE = 0x5,
  HE_TYPE_DAMAGE_INDICATOR = 0x6,
  HE_TYPE_SCORE = 0x7,
  HE_TYPE_MATERIAL = 0x8,
  HE_TYPE_TIMER_DOWN = 0x9,
  HE_TYPE_TIMER_UP = 0xA,
  HE_TYPE_TENTHS_TIMER_DOWN = 0xB,
  HE_TYPE_TENTHS_TIMER_UP = 0xC,
  HE_TYPE_CLOCK_DOWN = 0xD,
  HE_TYPE_CLOCK_UP = 0xE,
  HE_TYPE_WAYPOINT = 0xF,
  HE_TYPE_PERKS = 0x10,
  HE_TYPE_COUNT = 0x11,
};

/* 71 */
typedef _D3D10_SHADER_INPUT_FLAGS _D3D_SHADER_INPUT_FLAGS;

/* 72 */
enum BindIndex_t
{
  BIND_INDEX_PLAYER = 0x0,
  BIND_INDEX_START = 0x0,
  BIND_INDEX_VEHICLE = 0x1,
  BIND_INDEX_COUNT = 0x2,
};

/* 73 */
enum $78AA6D041F5FE63B64A610E2DAEB4A18
{
  CAMERA_REGION_LIT_OPAQUE = 0x0,
  CAMERA_REGION_LIT_TRANS = 0x1,
  CAMERA_REGION_LIT_QUASI_OPAQUE = 0x2,
  CAMERA_REGION_EMISSIVE_OPAQUE = 0x3,
  CAMERA_REGION_EMISSIVE_TRANS = 0x4,
  CAMERA_REGION_EMISSIVE_FX = 0x5,
  CAMERA_REGION_LIGHT_MAP_OPAQUE = 0x6,
  CAMERA_REGION_DEPTH_HACK = 0x7,
  CAMERA_REGION_UNUSED = 0x8,
  CAMERA_REGION_SONAR = 0x9,
  CAMERA_REGION_COUNT = 0xA,
  CAMERA_REGION_NONE = 0xA,
};

/* 74 */
typedef _D3D10_SHADER_INPUT_TYPE _D3D_SHADER_INPUT_TYPE;

/* 75 */
enum loadoutClass_t
{
  CLASS_INVALID = 0xFFFFFFFF,
  CUSTOM_CLASS_1 = 0x0,
  CUSTOM_CLASS_FIRST = 0x0,
  CUSTOM_CLASS_2 = 0x1,
  CUSTOM_CLASS_3 = 0x2,
  CUSTOM_CLASS_4 = 0x3,
  CUSTOM_CLASS_5 = 0x4,
  BASIC_CUSTOM_CLASS_COUNT = 0x5,
  CUSTOM_CLASS_6 = 0x5,
  CUSTOM_CLASS_7 = 0x6,
  CUSTOM_CLASS_8 = 0x7,
  CUSTOM_CLASS_9 = 0x8,
  CUSTOM_CLASS_10 = 0x9,
  CUSTOM_CLASS_COUNT = 0xA,
  DEFAULT_CLASS_FIRST = 0xA,
  DEFAULT_CLASS_SMG = 0xA,
  DEFAULT_CLASS_CQB = 0xB,
  DEFAULT_CLASS_ASSAULT = 0xC,
  DEFAULT_CLASS_LMG = 0xD,
  DEFAULT_CLASS_SNIPER = 0xE,
  DEFAULT_CLASS_LAST = 0xE,
  TOTAL_CLASS_COUNT = 0xF,
};

/* 76 */
enum weapPositionAnimNum_t
{
  WEAPPOS_HIP_TO_ADS = 0x0,
  WEAPPOS_ADS_TO_HIP = 0x1,
  NUM_WEAPPOS_ANIMS = 0x2,
};

/* 77 */
enum consoleChannel_e
{
  CON_CHANNEL_DONT_FILTER = 0x0,
  CON_CHANNEL_ERROR = 0x1,
  CON_CHANNEL_GAMENOTIFY = 0x2,
  CON_CHANNEL_BOLDGAME = 0x3,
  CON_CHANNEL_OBJNOTIFY = 0x4,
  CON_CHANNEL_SUBTITLE = 0x5,
  CON_CHANNEL_OBITUARY = 0x6,
  CON_CHANNEL_COOPINFO = 0x7,
  CON_CHANNEL_LOGFILEONLY = 0x8,
  CON_CHANNEL_CONSOLEONLY = 0x9,
  CON_CHANNEL_SYSTEM = 0xA,
  CON_CHANNEL_NETWORK = 0xB,
  CON_CHANNEL_TASK = 0xC,
  CON_CHANNEL_GFX = 0xD,
  CON_CHANNEL_SOUND = 0xE,
  CON_CHANNEL_FILES = 0xF,
  CON_CHANNEL_UI = 0x10,
  CON_CHANNEL_AI = 0x11,
  CON_CHANNEL_ANIM = 0x12,
  CON_CHANNEL_PHYS = 0x13,
  CON_CHANNEL_FX = 0x14,
  CON_CHANNEL_SCRIPT = 0x15,
  CON_CHANNEL_TL = 0x16,
  CON_CHANNEL_PERFORMANCE = 0x17,
  CON_CHANNEL_DEVGUI = 0x18,
  CON_CHANNEL_CLIENT = 0x19,
  CON_CHANNEL_SERVER = 0x1A,
  CON_CHANNEL_PLAYERWEAP = 0x1B,
  CON_CHANNEL_LIVE = 0x1C,
  CON_CHANNEL_FROMSCRIPT = 0x1D,
  CON_CHANNEL_SPAWNSYSTEM = 0x1E,
  CON_CHANNEL_LEADERBOARDS = 0x1F,
  CON_CHANNEL_DDL = 0x20,
  CON_CHANNEL_SPU = 0x21,
  CON_CHANNEL_GAMERPROFILE = 0x22,
  CON_CHANNEL_PRESENCE = 0x23,
  CON_CHANNEL_RUMBLE = 0x24,
  CON_CHANNEL_UNLOCKABLES = 0x25,
  CON_CHANNEL_VOICE = 0x26,
  CON_CHANNEL_HTTP = 0x27,
  CON_CHANNEL_GFWL = 0x28,
  CON_CHANNEL_IPAK = 0x29,
  CON_CHANNEL_WEBM = 0x2A,
  CON_CHANNEL_PROBER = 0x2B,
  CON_CHANNEL_MIPSTER = 0x2C,
  CON_CHANNEL_STEAM = 0x2D,
  CON_CHANNEL_SOCIAL = 0x2E,
  CON_CHANNEL_DCACHE = 0x2F,
  CON_CHANNEL_RSTREAM = 0x30,
  CON_CHANNEL_SCHEDULER = 0x31,
  CON_CHANNEL_MATCHRECORD = 0x32,
  CON_CHANNEL_MIGRATE = 0x33,
  CON_BUILTIN_CHANNEL_COUNT = 0x34,
  CON_FIRST_DEBUG_CHANNEL = 0x2E,
};

/* 78 */
enum WeapAccuracyType
{
  WEAP_ACCURACY_AI_VS_AI = 0x0,
  WEAP_ACCURACY_AI_VS_PLAYER = 0x1,
  WEAP_ACCURACY_COUNT = 0x2,
};

/* 79 */
enum $F7CFCAF4B83C6FF421C1E2DF2BC018BD
{
  CF_INVALID = 0xFFFFFFFF,
  CF_WORLDFIELDS = 0x0,
  CF_ACTORFIELDS = 0x1,
  CF_VEHICLEFIELDS = 0x2,
  CF_PLAYERFIELDS_CLIENTSIDE = 0x3,
  CF_PLAYERFIELDS_SERVERSIDE = 0x4,
  CF_PLAYERSTATEFIELDS = 0x5,
  CF_SCRIPTMOVERFIELDS = 0x6,
  CF_HELICOPTERFIELDS = 0x7,
  CF_PLANEFIELDS = 0x8,
  CF_TURRETFIELDS = 0x9,
  CF_MISSILEFIELDS = 0xA,
  CF_ZBARRIERFIELDS = 0xB,
  MAX_CLIENTFIELD_SETS = 0xC,
};

/* 80 */
enum D3D11_FILTER
{
  D3D11_FILTER_MIN_MAG_MIP_POINT = 0x0,
  D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
  D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
  D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
  D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
  D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
  D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
  D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
  D3D11_FILTER_ANISOTROPIC = 0x55,
  D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
  D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
  D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
  D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
  D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
  D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
  D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
  D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
  D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xD5,
};

/* 81 */
typedef _D3D10_SHADER_CBUFFER_FLAGS _D3D_SHADER_CBUFFER_FLAGS;

/* 82 */
enum XAnimFlags
{
  XANIM_LOOP_SYNC_TIME = 0x1,
  XANIM_NONLOOP_SYNC_TIME = 0x2,
  XANIM_SYNC_ROOT = 0x4,
  XANIM_COMPLETE = 0x8,
  XANIM_ADDITIVE = 0x10,
  XANIM_CLIENT = 0x20,
  XANIM_SEPARATE = 0x40,
  XANIM_FORCELOAD = 0x80,
  XANIM_PROPOGATE_FLAGS = 0x63,
};

/* 83 */
enum itemGroup_t
{
  ITEMGROUP_SMG = 0x0,
  ITEMGROUP_FIRST = 0x0,
  ITEMGROUP_ASSAULT = 0x1,
  ITEMGROUP_CQB = 0x2,
  ITEMGROUP_LMG = 0x3,
  ITEMGROUP_SNIPER = 0x4,
  ITEMGROUP_PISTOL = 0x5,
  ITEMGROUP_LAUNCHER = 0x6,
  ITEMGROUP_SPECIAL = 0x7,
  ITEMGROUP_SHOTGUN = 0x8,
  ITEMGROUP_EXPLOSIVE = 0x9,
  ITEMGROUP_GRENADE = 0xA,
  ITEMGROUP_MASTERKEY = 0xB,
  ITEMGROUP_GRENADELAUNCHER = 0xC,
  ITEMGROUP_FLAMETHROWER = 0xD,
  ITEMGROUP_SPECIALTY = 0xE,
  ITEMGROUP_SPECIALGRENADE = 0xF,
  ITEMGROUP_MISCWEAPON = 0x10,
  ITEMGROUP_FEATURE = 0x11,
  ITEMGROUP_BONUSCARD = 0x12,
  ITEMGROUP_GLOBAL_ITEMS_START = 0x13,
  ITEMGROUP_KILLSTREAK = 0x13,
  ITEMGROUP_COUNT = 0x14,
  ITEMGROUP_INVALID = 0xFFFFFFFF,
};

/* 84 */
typedef _D3D10_CBUFFER_TYPE _D3D_CBUFFER_TYPE;

/* 85 */
enum D3D11_TEXTURE_ADDRESS_MODE
{
  D3D11_TEXTURE_ADDRESS_WRAP = 0x1,
  D3D11_TEXTURE_ADDRESS_MIRROR = 0x2,
  D3D11_TEXTURE_ADDRESS_CLAMP = 0x3,
  D3D11_TEXTURE_ADDRESS_BORDER = 0x4,
  D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 0x5,
};

/* 86 */
enum $271BB269F7B93CB64B58E36CB63A3BCE
{
  XANIM_NOTIFY_NO_ONE = 0x0,
  XANIM_NOTIFY_SERVER = 0x1,
  XANIM_NOTIFY_CLIENT = 0x2,
  XANIM_NOTIFY_BOTH = 0x3,
};

/* 87 */
enum $58B4D765AF619469E5E4B7472B8F5CC7
{
  MT_NODE_SIZE = 0x18,
};

/* 88 */
typedef D3D10_NAME D3D_NAME;

/* 89 */
enum loadoutSlot_t
{
  LOADOUTSLOT_INVALID = 0xFFFFFFFF,
  LOADOUTSLOT_FIRST = 0x0,
  LOADOUTSLOT_PRIMARY_WEAPON = 0x0,
  LOADOUTSLOT_PRIMARY_ATTACHMENT1 = 0x1,
  LOADOUTSLOT_PRIMARY_ATTACHMENT2 = 0x2,
  LOADOUTSLOT_PRIMARY_ATTACHMENT3 = 0x3,
  LOADOUTSLOT_PRIMARY_CAMO = 0x4,
  LOADOUTSLOT_PRIMARY_RETICLE = 0x5,
  LOADOUTSLOT_PRIMARY_RETICLE_COLOR = 0x6,
  LOADOUTSLOT_PRIMARY_LENS = 0x7,
  LOADOUTSLOT_PRIMARY_EMBLEM = 0x8,
  LOADOUTSLOT_PRIMARY_TAG = 0x9,
  LOADOUTSLOT_SECONDARY_WEAPON = 0xA,
  LOADOUTSLOT_SECONDARY_ATTACHMENT1 = 0xB,
  LOADOUTSLOT_SECONDARY_ATTACHMENT2 = 0xC,
  LOADOUTSLOT_SECONDARY_ATTACHMENT3 = 0xD,
  LOADOUTSLOT_SECONDARY_CAMO = 0xE,
  LOADOUTSLOT_SECONDARY_RETICLE = 0xF,
  LOADOUTSLOT_SECONDARY_RETICLE_COLOR = 0x10,
  LOADOUTSLOT_SECONDARY_LENS = 0x11,
  LOADOUTSLOT_SECONDARY_EMBLEM = 0x12,
  LOADOUTSLOT_SECONDARY_TAG = 0x13,
  LOADOUTSLOT_KNIFE_CAMO = 0x14,
  LOADOUTSLOT_FIRST_SPECIALTY = 0x15,
  LOADOUTSLOT_SPECIALTY1 = 0x15,
  LOADOUTSLOT_SPECIALTY2 = 0x16,
  LOADOUTSLOT_SPECIALTY3 = 0x17,
  LOADOUTSLOT_SPECIALTY4 = 0x18,
  LOADOUTSLOT_SPECIALTY5 = 0x19,
  LOADOUTSLOT_SPECIALTY6 = 0x1A,
  LOADOUTSLOT_LAST_SPECIALTY = 0x1A,
  LOADOUTSLOT_PRIMARY_GRENADE = 0x1B,
  LOADOUTSLOT_PRIMARY_GRENADE_COUNT = 0x1C,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS1 = 0x1D,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS2 = 0x1E,
  LOADOUTSLOT_PRIMARY_GRENADE_STATUS3 = 0x1F,
  LOADOUTSLOT_SPECIAL_GRENADE = 0x20,
  LOADOUTSLOT_SPECIAL_GRENADE_COUNT = 0x21,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS1 = 0x22,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS2 = 0x23,
  LOADOUTSLOT_SPECIAL_GRENADE_STATUS3 = 0x24,
  LOADOUTSLOT_FIRST_BONUSCARD = 0x25,
  LOADOUTSLOT_BONUSCARD1 = 0x25,
  LOADOUTSLOT_BONUSCARD2 = 0x26,
  LOADOUTSLOT_BONUSCARD3 = 0x27,
  LOADOUTSLOT_LAST_BONUSCARD = 0x27,
  LOADOUTSLOT_GLOBAL_ITEMS_START = 0x28,
  LOADOUTSLOT_KILLSTREAK1 = 0x28,
  LOADOUTSLOT_KILLSTREAK2 = 0x29,
  LOADOUTSLOT_KILLSTREAK3 = 0x2A,
  LOADOUTSLOT_KILLSTREAK4 = 0x2B,
  LOADOUTSLOT_GLOBAL_ITEMS_END = 0x2B,
  LOADOUTSLOT_COUNT = 0x2C,
};

/* 90 */
enum statsMilestoneTypes_t
{
  MILESTONE_GLOBAL = 0x0,
  MILESTONE_FIRST = 0x0,
  MILESTONE_WEAPON = 0x1,
  MILESTONE_GAMEMODE = 0x2,
  MILESTONE_GROUP = 0x3,
  MILESTONE_ATTACHMENTS = 0x4,
  MILESTONE_COUNT = 0x5,
  MILESTONE_INVALID = 0x5,
};

/* 91 */
enum dlcIndex_t
{
  CONTENT_DEV_MAP_INDEX = 0xFFFFFFFF,
  CONTENT_ORIGINAL_MAP_INDEX = 0x0,
  CONTENT_DLC0_INDEX = 0x1,
  CONTENT_DLCZM0_INDEX = 0x2,
  CONTENT_DLC1_INDEX = 0x3,
  CONTENT_DLC2_INDEX = 0x4,
  CONTENT_DLC3_INDEX = 0x5,
  CONTENT_DLC4_INDEX = 0x6,
  CONTENT_DLC5_INDEX = 0x7,
  CONTENT_DLC0DD_INDEX = 0x8,
  CONTENT_DLCSEASONPASS_INDEX = 0x9,
  CONTENT_DLC_INDEX_MAX = 0xA,
};

/* 92 */
enum LocalClientNum_t
{
  INVALID_LOCAL_CLIENT = 0xFFFFFFFF,
  LOCAL_CLIENT_FIRST = 0x0,
  LOCAL_CLIENT_0 = 0x0,
  ONLY_LOCAL_CLIENT = 0x0,
  LOCAL_CLIENT_COUNT = 0x1,
};

/* 93 */
enum LbZombieGameMode
{
  LB_GAMEMODE_ZGRIEF = 0x0,
  LB_ZOMBIE_GAMEMODE_START = 0x0,
  LB_GAMEMODE_ZCLASSIC = 0x1,
  LB_GAMEMODE_ZSTANDARD = 0x2,
  LB_GAMEMODE_ZCLEANSED = 0x3,
  LB_ZOMBIE_GAMEMODE_COUNT = 0x4,
};

/* 94 */
enum ControllerIndex_t
{
  INVALID_CONTROLLER_PORT = 0xFFFFFFFF,
  CONTROLLER_INDEX_FIRST = 0x0,
  CONTROLLER_INDEX_0 = 0x0,
  CONTROLLER_INDEX_COUNT = 0x1,
};

/* 95 */
enum scoreboardColumnType_t
{
  SB_TYPE_INVALID = 0x0,
  SB_TYPE_NONE = 0x1,
  SB_TYPE_SCORE = 0x2,
  SB_TYPE_KILLS = 0x3,
  SB_TYPE_DEATHS = 0x4,
  SB_TYPE_ASSISTS = 0x5,
  SB_TYPE_DEFENDS = 0x6,
  SB_TYPE_PLANTS = 0x7,
  SB_TYPE_DEFUSES = 0x8,
  SB_TYPE_RETURNS = 0x9,
  SB_TYPE_CAPTURES = 0xA,
  SB_TYPE_DESTRUCTIONS = 0xB,
  SB_TYPE_KDRATIO = 0xC,
  SB_TYPE_SURVIVED = 0xD,
  SB_TYPE_STABS = 0xE,
  SB_TYPE_TOMAHAWKS = 0xF,
  SB_TYPE_HUMILIATED = 0x10,
  SB_TYPE_X2SCORE = 0x11,
  SB_TYPE_HEADSHOTS = 0x12,
  SB_TYPE_DOWNS = 0x13,
  SB_TYPE_REVIVES = 0x14,
  SB_TYPE_AGRKILLS = 0x15,
  SB_TYPE_HACKS = 0x16,
  SB_TYPE_POINTS_TO_WIN = 0x17,
  SB_TYPE_KILLS_CONFIRMED = 0x18,
  SB_TYPE_KILLS_DENIED = 0x19,
  NUM_SB_TYPES = 0x1A,
};

/* 96 */
typedef D3D10_RESOURCE_RETURN_TYPE D3D_RESOURCE_RETURN_TYPE;

/* 97 */
enum UIContextIndex_t
{
  INVALID_UI_CONTEXT = 0xFFFFFFFF,
  UI_CONTEXT_FRONTEND = 0x0,
  UI_CONTEXT_INDEX_0 = 0x0,
  UI_CONTEXT_COUNT = 0x1,
};

/* 98 */
enum bdLobbyErrorCode
{
  BD_NO_ERROR = 0x0,
  BD_TOO_MANY_TASKS = 0x1,
  BD_NOT_CONNECTED = 0x2,
  BD_SEND_FAILED = 0x3,
  BD_HANDLE_TASK_FAILED = 0x4,
  BD_START_TASK_FAILED = 0x5,
  BD_RESULT_EXCEEDS_BUFFER_SIZE = 0x64,
  BD_ACCESS_DENIED = 0x65,
  BD_EXCEPTION_IN_DB = 0x66,
  BD_MALFORMED_TASK_HEADER = 0x67,
  BD_INVALID_ROW = 0x68,
  BD_EMPTY_ARG_LIST = 0x69,
  BD_PARAM_PARSE_ERROR = 0x6A,
  BD_PARAM_MISMATCHED_TYPE = 0x6B,
  BD_SERVICE_NOT_AVAILABLE = 0x6C,
  BD_CONNECTION_RESET = 0x6D,
  BD_INVALID_USER_ID = 0x6E,
  BD_LOBBY_PROTOCOL_VERSION_FAILURE = 0x6F,
  BD_LOBBY_INTERNAL_FAILURE = 0x70,
  BD_LOBBY_PROTOCOL_ERROR = 0x71,
  BD_LOBBY_FAILED_TO_DECODE_UTF8 = 0x72,
  BD_LOBBY_ASCII_EXPECTED = 0x73,
  BD_ASYNCHRONOUS_ERROR = 0xC8,
  BD_STREAMING_COMPLETE = 0xC9,
  BD_MEMBER_NO_PROPOSAL = 0x12C,
  BD_TEAMNAME_ALREADY_EXISTS = 0x12D,
  BD_MAX_TEAM_MEMBERSHIPS_LIMITED = 0x12E,
  BD_MAX_TEAM_OWNERSHIPS_LIMITED = 0x12F,
  BD_NOT_A_TEAM_MEMBER = 0x130,
  BD_INVALID_TEAM_ID = 0x131,
  BD_INVALID_TEAM_NAME = 0x132,
  BD_NOT_A_TEAM_OWNER = 0x133,
  BD_NOT_AN_ADMIN_OR_OWNER = 0x134,
  BD_MEMBER_PROPOSAL_EXISTS = 0x135,
  BD_MEMBER_EXISTS = 0x136,
  BD_TEAM_FULL = 0x137,
  BD_VULGAR_TEAM_NAME = 0x138,
  BD_TEAM_USERID_BANNED = 0x139,
  BD_TEAM_EMPTY = 0x13A,
  BD_INVALID_TEAM_PROFILE_QUERY_ID = 0x13B,
  BD_TEAMNAME_TOO_SHORT = 0x13C,
  BD_UNIQUE_PROFILE_DATA_EXISTS_ALREADY = 0x13D,
  BD_INVALID_LEADERBOARD_ID = 0x190,
  BD_INVALID_STATS_SET = 0x191,
  BD_EMPTY_STATS_SET_IGNORED = 0x193,
  BD_NO_DIRECT_ACCESS_TO_ARBITRATED_LBS = 0x194,
  BD_STATS_WRITE_PERMISSION_DENIED = 0x195,
  BD_STATS_WRITE_TYPE_DATA_TYPE_MISMATCH = 0x196,
  BD_NO_STATS_FOR_USER = 0x197,
  BD_INVALID_ACCESS_TO_UNRANKED_LB = 0x198,
  BD_INVALID_EXTERNAL_TITLE_ID = 0x199,
  BD_DIFFERENT_LEADERBOARD_SCHEMAS = 0x19A,
  BD_TOO_MANY_LEADERBOARDS_REQUESTED = 0x19B,
  BD_ENTITLEMENTS_ERROR = 0x19C,
  BD_ENTITLEMENTS_INVALID_TITLEID = 0x19D,
  BD_ENTITLEMENTS_INVALID_LEADERBOARDID = 0x19E,
  BD_ENTITLEMENTS_INVALID_GET_MODE_FOR_TITLE = 0x19F,
  BD_ENTITLEMENTS_URL_CONNECTION_ERROR = 0x1A0,
  BD_ENTITLEMENTS_CONFIG_ERROR = 0x1A1,
  BD_ENTITLEMENTS_NAMED_PARENT_ERROR = 0x1A2,
  BD_ENTITLEMENTS_NAMED_KEY_ERROR = 0x1A3,
  BD_TOO_MANY_ENTITY_IDS_REQUESTED = 0x1A4,
  BD_STATS_READ_FAILED = 0x1A5,
  BD_INVALID_TITLE_ID = 0x1F4,
  BD_MESSAGING_INVALID_MAIL_ID = 0x258,
  BD_SELF_BLOCK_NOT_ALLOWED = 0x259,
  BD_GLOBAL_MESSAGE_ACCESS_DENIED = 0x25A,
  BD_GLOBAL_MESSAGES_USER_LIMIT_EXCEEDED = 0x25B,
  BD_AUTH_NO_ERROR = 0x2BC,
  BD_AUTH_BAD_REQUEST = 0x2BD,
  BD_AUTH_SERVER_CONFIG_ERROR = 0x2BE,
  BD_AUTH_BAD_TITLE_ID = 0x2BF,
  BD_AUTH_BAD_ACCOUNT = 0x2C0,
  BD_AUTH_ILLEGAL_OPERATION = 0x2C1,
  BD_AUTH_INCORRECT_LICENSE_CODE = 0x2C2,
  BD_AUTH_CREATE_USERNAME_EXISTS = 0x2C3,
  BD_AUTH_CREATE_USERNAME_ILLEGAL = 0x2C4,
  BD_AUTH_CREATE_USERNAME_VULGAR = 0x2C5,
  BD_AUTH_CREATE_MAX_ACC_EXCEEDED = 0x2C6,
  BD_AUTH_MIGRATE_NOT_SUPPORTED = 0x2C7,
  BD_AUTH_TITLE_DISABLED = 0x2C8,
  BD_AUTH_ACCOUNT_EXPIRED = 0x2C9,
  BD_AUTH_ACCOUNT_LOCKED = 0x2CA,
  BD_AUTH_UNKNOWN_ERROR = 0x2CB,
  BD_AUTH_INCORRECT_PASSWORD = 0x2CC,
  BD_AUTH_IP_NOT_IN_ALLOWED_RANGE = 0x2CD,
  BD_AUTH_WII_TOKEN_VERIFICATION_FAILED = 0x2CE,
  BD_AUTH_WII_AUTHENTICATION_FAILED = 0x2CF,
  BD_AUTH_IP_KEY_LIMIT_REACHED = 0x2D0,
  BD_AUTH_INVALID_GSPID = 0x2D1,
  BD_AUTH_INVALID_IP_RANGE_ID = 0x2D2,
  BD_AUTH_3DS_TOKEN_VERIFICATION_FAILED = 0x2D1,
  BD_AUTH_3DS_AUTHENTICATION_FAILED = 0x2D2,
  BD_AUTH_STEAM_APP_ID_MISMATCH = 0x2D3,
  BD_AUTH_ABACCOUNTS_APP_ID_MISMATCH = 0x2D4,
  BD_AUTH_CODO_USERNAME_NOT_SET = 0x2D5,
  BD_AUTH_WIIU_TOKEN_VERIFICATION_FAILED = 0x2D6,
  BD_AUTH_WIIU_AUTHENTICATION_FAILED = 0x2D7,
  BD_AUTH_CODO_USERNAME_NOT_BASE64 = 0x2D8,
  BD_AUTH_CODO_USERNAME_NOT_UTF8 = 0x2D9,
  BD_AUTH_TENCENT_TICKET_EXPIRED = 0x2DA,
  BD_NO_PROFILE_INFO_EXISTS = 0x320,
  BD_FRIENDSHIP_NOT_REQUSTED = 0x384,
  BD_NOT_A_FRIEND = 0x385,
  BD_SELF_FRIENDSHIP_NOT_ALLOWED = 0x387,
  BD_FRIENDSHIP_EXISTS = 0x388,
  BD_PENDING_FRIENDSHIP_EXISTS = 0x389,
  BD_USERID_BANNED = 0x38A,
  BD_FRIENDS_FULL = 0x38C,
  BD_FRIENDS_NO_RICH_PRESENCE = 0x38D,
  BD_RICH_PRESENCE_TOO_LARGE = 0x38E,
  BD_NO_FILE = 0x3E8,
  BD_PERMISSION_DENIED = 0x3E9,
  BD_FILESIZE_LIMIT_EXCEEDED = 0x3EA,
  BD_FILENAME_MAX_LENGTH_EXCEEDED = 0x3EB,
  BD_CHANNEL_DOES_NOT_EXIST = 0x44D,
  BD_CHANNEL_ALREADY_SUBSCRIBED = 0x44E,
  BD_CHANNEL_NOT_SUBSCRIBED = 0x44F,
  BD_CHANNEL_FULL = 0x450,
  BD_CHANNEL_SUBSCRIPTIONS_FULL = 0x451,
  BD_CHANNEL_NO_SELF_WHISPERING = 0x452,
  BD_CHANNEL_ADMIN_REQUIRED = 0x453,
  BD_CHANNEL_TARGET_NOT_SUBSCRIBED = 0x454,
  BD_CHANNEL_REQUIRES_PASSWORD = 0x455,
  BD_CHANNEL_TARGET_IS_SELF = 0x456,
  BD_CHANNEL_PUBLIC_BAN_NOT_ALLOWED = 0x457,
  BD_CHANNEL_USER_BANNED = 0x458,
  BD_CHANNEL_PUBLIC_PASSWORD_NOT_ALLOWED = 0x459,
  BD_CHANNEL_PUBLIC_KICK_NOT_ALLOWED = 0x45A,
  BD_EVENT_DESC_TRUNCATED = 0x4B0,
  BD_CONTENT_UNLOCK_UNKNOWN_ERROR = 0x514,
  BD_UNLOCK_KEY_INVALID = 0x515,
  BD_UNLOCK_KEY_ALREADY_USED_UP = 0x516,
  BD_SHARED_UNLOCK_LIMIT_REACHED = 0x517,
  BD_DIFFERENT_HARDWARE_ID = 0x518,
  BD_INVALID_CONTENT_OWNER = 0x519,
  BD_CONTENT_UNLOCK_INVALID_USER = 0x51A,
  BD_KEY_ARCHIVE_INVALID_WRITE_TYPE = 0x5DC,
  BD_KEY_ARCHIVE_EXCEEDED_MAX_IDS_PER_REQUEST = 0x5DD,
  BD_BANDWIDTH_TEST_TRY_AGAIN = 0x712,
  BD_BANDWIDTH_TEST_STILL_IN_PROGRESS = 0x713,
  BD_BANDWIDTH_TEST_NOT_PROGRESS = 0x714,
  BD_BANDWIDTH_TEST_SOCKET_ERROR = 0x715,
  BD_INVALID_SESSION_NONCE = 0x76D,
  BD_ARBITRATION_FAILURE = 0x76F,
  BD_ARBITRATION_USER_NOT_REGISTERED = 0x771,
  BD_ARBITRATION_NOT_CONFIGURED = 0x772,
  BD_CONTENTSTREAMING_FILE_NOT_AVAILABLE = 0x7D0,
  BD_CONTENTSTREAMING_STORAGE_SPACE_EXCEEDED = 0x7D1,
  BD_CONTENTSTREAMING_NUM_FILES_EXCEEDED = 0x7D2,
  BD_CONTENTSTREAMING_UPLOAD_BANDWIDTH_EXCEEDED = 0x7D3,
  BD_CONTENTSTREAMING_FILENAME_MAX_LENGTH_EXCEEDED = 0x7D4,
  BD_CONTENTSTREAMING_MAX_THUMB_DATA_SIZE_EXCEEDED = 0x7D5,
  BD_CONTENTSTREAMING_DOWNLOAD_BANDWIDTH_EXCEEDED = 0x7D6,
  BD_CONTENTSTREAMING_NOT_ENOUGH_DOWNLOAD_BUFFER_SPACE = 0x7D7,
  BD_CONTENTSTREAMING_SERVER_NOT_CONFIGURED = 0x7D8,
  BD_CONTENTSTREAMING_INVALID_APPLE_RECEIPT = 0x7DA,
  BD_CONTENTSTREAMING_APPLE_STORE_NOT_AVAILABLE = 0x7DB,
  BD_CONTENTSTREAMING_APPLE_RECEIPT_FILENAME_MISMATCH = 0x7DC,
  BD_CONTENTSTREAMING_HTTP_ERROR = 0x7E4,
  BD_CONTENTSTREAMING_FAILED_TO_START_HTTP = 0x7E5,
  BD_CONTENTSTREAMING_LOCALE_INVALID = 0x7E6,
  BD_CONTENTSTREAMING_LOCALE_MISSING = 0x7E7,
  BD_VOTERANK_ERROR_EMPTY_RATING_SUBMISSION = 0x7EE,
  BD_VOTERANK_ERROR_MAX_VOTES_EXCEEDED = 0x7EF,
  BD_VOTERANK_ERROR_INVALID_RATING = 0x7F0,
  BD_MAX_NUM_TAGS_EXCEEDED = 0x82A,
  BD_TAGGED_COLLECTION_DOES_NOT_EXIST = 0x82B,
  BD_EMPTY_TAG_ARRAY = 0x82C,
  BD_INVALID_QUERY_ID = 0x834,
  BD_NO_ENTRY_TO_UPDATE = 0x835,
  BD_SESSION_INVITE_EXISTS = 0x836,
  BD_INVALID_SESSION_ID = 0x837,
  BD_ATTACHMENT_TOO_LARGE = 0x838,
  BD_INVALID_GROUP_ID = 0xAF0,
  BD_UCD_SERVICE_ERROR = 0xC80,
  BD_UCD_SERVICE_DISABLED = 0xC81,
  BD_UCD_UNINTIALIZED_ERROR = 0xC82,
  BD_UCD_ACCOUNT_ALREADY_REGISTERED = 0xC83,
  BD_UCD_ACCOUNT_NOT_REGISTERED = 0xC84,
  BD_UCD_AUTH_ATTEMPT_FAILED = 0xC85,
  BD_UCD_ACCOUNT_LINKING_ERROR = 0xC86,
  BD_UCD_ENCRYPTION_ERROR = 0xC87,
  BD_UCD_ACCOUNT_DATA_INVALID = 0xC88,
  BD_UCD_ACCOUNT_DATA_INVALID_FIRSTNAME = 0xC89,
  BD_UCD_ACCOUNT_DATA_INVALID_LASTNAME = 0xC8A,
  BD_UCD_ACCOUNT_DATA_INVALID_DOB = 0xC8B,
  BD_UCD_ACCOUNT_DATA_INVALID_EMAIL = 0xC8C,
  BD_UCD_ACCOUNT_DATA_INVALID_COUNTRY = 0xC8D,
  BD_UCD_ACCOUNT_DATA_INVALID_POSTCODE = 0xC8E,
  BD_UCD_ACCOUNT_NAME_ALREADY_RESISTERED = 0xC94,
  BD_UCD_ACCOUNT_EMAIL_ALREADY_RESISTERED = 0xC95,
  BD_TWITCH_SERVICE_ERROR = 0xC1D,
  BD_TWITCH_ACCOUNT_ALREADY_LINKED = 0xC1E,
  BD_TWITCH_NO_LINKED_ACCOUNT = 0xC1F,
  BD_YOUTUBE_SERVICE_ERROR = 0xCE5,
  BD_YOUTUBE_SERVICE_COMMUNICATION_ERROR = 0xCE6,
  BD_YOUTUBE_USER_DENIED_AUTHORIZATION = 0xCE7,
  BD_YOUTUBE_AUTH_MAX_TIME_EXCEEDED = 0xCE8,
  BD_YOUTUBE_USER_UNAUTHORIZED = 0xCE9,
  BD_YOUTUBE_UPLOAD_MAX_TIME_EXCEEDED = 0xCEA,
  BD_YOUTUBE_DUPLICATE_UPLOAD = 0xCEB,
  BD_YOUTUBE_FAILED_UPLOAD = 0xCEC,
  BD_YOUTUBE_ACCOUNT_ALREADY_REGISTERED = 0xCED,
  BD_YOUTUBE_ACCOUNT_NOT_REGISTERED = 0xCEE,
  BD_YOUTUBE_CONTENT_SERVER_ERROR = 0xCEF,
  BD_YOUTUBE_UPLOAD_DOES_NOT_EXIST = 0xCF0,
  BD_YOUTUBE_NO_LINKED_ACCOUNT = 0xCF1,
  BD_YOUTUBE_DEVELOPER_TAGS_INVALID = 0xCF2,
  BD_TWITTER_AUTH_ATTEMPT_FAILED = 0xDAD,
  BD_TWITTER_AUTH_TOKEN_INVALID = 0xDAE,
  BD_TWITTER_UPDATE_LIMIT_REACHED = 0xDAF,
  BD_TWITTER_UNAVAILABLE = 0xDB0,
  BD_TWITTER_ERROR = 0xDB1,
  BD_TWITTER_TIMED_OUT = 0xDB2,
  BD_TWITTER_DISABLED_FOR_USER = 0xDB3,
  BD_TWITTER_ACCOUNT_AMBIGUOUS = 0xDB4,
  BD_TWITTER_MAXIMUM_ACCOUNTS_REACHED = 0xDB5,
  BD_TWITTER_ACCOUNT_NOT_REGISTERED = 0xDB6,
  BD_TWITTER_DUPLICATE_STATUS = 0xDB7,
  BD_TWITTER_ACCOUNT_ALREADY_REGISTERED = 0xE1C,
  BD_FACEBOOK_AUTH_ATTEMPT_FAILED = 0xE11,
  BD_FACEBOOK_AUTH_TOKEN_INVALID = 0xE12,
  BD_FACEBOOK_PHOTO_DOES_NOT_EXIST = 0xE13,
  BD_FACEBOOK_PHOTO_INVALID = 0xE14,
  BD_FACEBOOK_PHOTO_ALBUM_FULL = 0xE15,
  BD_FACEBOOK_UNAVAILABLE = 0xE16,
  BD_FACEBOOK_ERROR = 0xE17,
  BD_FACEBOOK_TIMED_OUT = 0xE18,
  BD_FACEBOOK_DISABLED_FOR_USER = 0xE19,
  BD_FACEBOOK_ACCOUNT_AMBIGUOUS = 0xE1A,
  BD_FACEBOOK_MAXIMUM_ACCOUNTS_REACHED = 0xE1B,
  BD_FACEBOOK_INVALID_NUM_PICTURES_REQUESTED = 0xE1C,
  BD_FACEBOOK_VIDEO_DOES_NOT_EXIST = 0xE1D,
  BD_FACEBOOK_ACCOUNT_ALREADY_REGISTERED = 0xE1E,
  BD_APNS_INVALID_PAYLOAD = 0xE74,
  BD_MAX_CONSOLEID_LENGTH_EXCEEDED = 0xEE1,
  BD_MAX_WHITELIST_LENGTH_EXCEEDED = 0xEE2,
  BD_USERGROUP_NAME_ALREADY_EXISTS = 0x1770,
  BD_INVALID_USERGROUP_ID = 0x1771,
  BD_USER_ALREADY_IN_USERGROUP = 0x1772,
  BD_USER_NOT_IN_USERGROUP = 0x1773,
  BD_INVALID_USERGROUP_MEMBER_TYPE = 0x1774,
  BD_TOO_MANY_MEMBERS_REQUESTED = 0x1775,
  BD_USERGROUP_NAME_TOO_SHORT = 0x1776,
  BD_RICH_PRESENCE_DATA_TOO_LARGE = 0x1A90,
  BD_RICH_PRESENCE_TOO_MANY_USERS = 0x1A91,
  BD_SUBSCRIPTION_TOO_MANY_USERS = 0x1B58,
  BD_SUBSCRIPTION_TICKET_PARSE_ERROR = 0x1B59,
  BD_CODO_ID_INVALID_DATA = 0x1BBC,
  BD_INVALID_MESSAGE_FORMAT = 0x1BBD,
  BD_TLOG_TOO_MANY_MESSAGES = 0x1BBE,
  BD_CODO_ID_NOT_IN_WHITELIST = 0x1BBF,
  BD_TLOG_MESSAGE_TRANSFORMATION_ERROR = 0x1BC0,
  BD_MARKETPLACE_ERROR = 0x1F40,
  BD_MARKETPLACE_RESOURCE_NOT_FOUND = 0x1F41,
  BD_MARKETPLACE_INVALID_CURRENCY = 0x1F42,
  BD_MARKETPLACE_INVALID_PARAMETER = 0x1F43,
  BD_MARKETPLACE_RESOURCE_CONFLICT = 0x1F44,
  BD_MARKETPLACE_STORAGE_ERROR = 0x1F45,
  BD_MARKETPLACE_INTEGRITY_ERROR = 0x1F46,
  BD_MARKETPLACE_INSUFFICIENT_FUNDS_ERROR = 0x1F47,
  BD_MARKETPLACE_MMP_SERVICE_ERROR = 0x1F48,
  BD_MARKETPLACE_PRECONDITION_REQUIRED = 0x1F49,
  BD_MARKETPLACE_ITEM_MULTIPLE_PURCHASE_ERROR = 0x1F4A,
  BD_MARKETPLACE_MISSING_REQUIRED_ENTITLEMENT = 0x1F4B,
  BD_MARKETPLACE_VALIDATION_ERROR = 0x1F4C,
  BD_MARKETPLACE_TENCENT_PAYMENT_ERROR = 0x1F4D,
  BD_MARKETPLACE_SKU_NOT_COUPON_ENABLED_ERROR = 0x1F4E,
  BD_LEAGUE_INVALID_TEAM_SIZE = 0x1FA4,
  BD_LEAGUE_INVALID_TEAM = 0x1FA5,
  BD_LEAGUE_INVALID_SUBDIVISION = 0x1FA6,
  BD_LEAGUE_INVALID_LEAGUE = 0x1FA7,
  BD_LEAGUE_TOO_MANY_RESULTS_REQUESTED = 0x1FA8,
  BD_LEAGUE_METADATA_TOO_LARGE = 0x1FA9,
  BD_LEAGUE_TEAM_ICON_TOO_LARGE = 0x1FAA,
  BD_LEAGUE_TEAM_NAME_TOO_LONG = 0x1FAB,
  BD_LEAGUE_ARRAY_SIZE_MISMATCH = 0x1FAC,
  BD_LEAGUE_SUBDIVISION_MISMATCH = 0x2008,
  BD_LEAGUE_INVALID_WRITE_TYPE = 0x2009,
  BD_LEAGUE_INVALID_STATS_DATA = 0x200A,
  BD_LEAGUE_SUBDIVISION_UNRANKED = 0x200B,
  BD_LEAGUE_CROSS_TEAM_STATS_WRITE_PREVENTED = 0x200C,
  BD_LEAGUE_INVALID_STATS_SEASON = 0x200D,
  BD_COMMERCE_ERROR = 0x206C,
  BD_COMMERCE_RESOURCE_NOT_FOUND = 0x206D,
  BD_COMMERCE_STORAGE_INVALID_PARAMETER = 0x206E,
  BD_COMMERCE_APPLICATION_INVALID_PARAMETER = 0x206F,
  BD_COMMERCE_RESOURCE_CONFLICT = 0x2070,
  BD_COMMERCE_STORAGE_ERROR = 0x2071,
  BD_COMMERCE_INTEGRITY_ERROR = 0x2072,
  BD_COMMERCE_MMP_SERVICE_ERROR = 0x2073,
  BD_COMMERCE_PERMISSION_DENIED = 0x2074,
  BD_COMMERCE_INSUFFICIENT_FUNDS_ERROR = 0x2075,
  BD_COMMERCE_UNKNOWN_CURRENCY = 0x2076,
  BD_COMMERCE_INVALID_RECEIPT = 0x2077,
  BD_COMMERCE_RECEIPT_USED = 0x2078,
  BD_COMMERCE_TRANSACTION_ALREADY_APPLIED = 0x2079,
  BD_COMMERCE_INVALID_CURRENCY_TYPE = 0x207A,
  BD_CONNECTION_COUNTER_ERROR = 0x20D0,
  BD_GMSG_INVALID_CATEGORY_ID = 0x27D8,
  BD_GMSG_CATEGORY_MEMBERSHIPS_LIMIT = 0x27D9,
  BD_GMSG_NONMEMBER_POST_DISALLOWED = 0x27DA,
  BD_GMSG_CATEGORY_DISALLOWS_CLIENT_TYPE = 0x27DB,
  BD_GMSG_PAYLOAD_TOO_BIG = 0x27DC,
  BD_GMSG_MEMBER_POST_DISALLOWED = 0x27DD,
  BD_GMSG_OVERLOADED = 0x27DE,
  BD_GMSG_USER_PERCATEGORY_POST_RATE_EXCEEDED = 0x27DF,
  BD_GMSG_USER_GLOBAL_POST_RATE_EXCEEDED = 0x27E0,
  BD_GMSG_GROUP_POST_RATE_EXCEEDED = 0x27E1,
  BD_MAX_ERROR_CODE = 0x27E2,
};

/* 99 */
enum ClientNum_t
{
  INVALID_CLIENT_INDEX = 0xFFFFFFFF,
  CLIENT_INDEX_FIRST = 0x0,
  CLIENT_INDEX_0 = 0x0,
  CLIENT_INDEX_1 = 0x1,
  CLIENT_INDEX_2 = 0x2,
  CLIENT_INDEX_3 = 0x3,
  CLIENT_INDEX_4 = 0x4,
  CLIENT_INDEX_5 = 0x5,
  CLIENT_INDEX_6 = 0x6,
  CLIENT_INDEX_7 = 0x7,
  CLIENT_INDEX_8 = 0x8,
  CLIENT_INDEX_9 = 0x9,
  CLIENT_INDEX_10 = 0xA,
  CLIENT_INDEX_11 = 0xB,
  CLIENT_INDEX_12 = 0xC,
  CLIENT_INDEX_13 = 0xD,
  CLIENT_INDEX_14 = 0xE,
  CLIENT_INDEX_15 = 0xF,
  CLIENT_INDEX_16 = 0x10,
  CLIENT_INDEX_17 = 0x11,
  CLIENT_INDEX_18 = 0x12,
  CLIENT_INDEX_19 = 0x13,
  CLIENT_INDEX_20 = 0x14,
  CLIENT_INDEX_21 = 0x15,
  CLIENT_INDEX_22 = 0x16,
  CLIENT_INDEX_23 = 0x17,
  CLIENT_INDEX_24 = 0x18,
  CLIENT_INDEX_25 = 0x19,
  CLIENT_INDEX_26 = 0x1A,
  CLIENT_INDEX_27 = 0x1B,
  CLIENT_INDEX_28 = 0x1C,
  CLIENT_INDEX_29 = 0x1D,
  CLIENT_INDEX_30 = 0x1E,
  CLIENT_INDEX_31 = 0x1F,
  CLIENT_INDEX_COUNT = 0x12,
};

/* 100 */
enum $6443C7AFBE560028F5D88B5FF251D247
{
  DDL_USERFLAGS_VALUE_CHANGED = 0x1,
  DDL_USERFLAGS_ONLINE_RANKED_STATS = 0x2,
  DDL_USERFLAGS_ONLINE_ZOMBIE_STATS = 0x8,
  DDL_USERFLAGS_ALL = 0xB,
  DDL_USERFLAGS_COUNT = 0x3,
};

/* 101 */
enum $2A70F505D789AA085081A46E5D3A469B
{
  TOTAL_STRINGLIST_SIZE = 0xC000,
  STRINGLIST_SIZE = 0xC000,
};

/* 102 */
enum bonusCards_t
{
  BONUSCARD_INVALID = 0xFFFFFFFF,
  BONUSCARD_FIRST = 0x0,
  BONUSCARD_PRIMARY_GUNFIGHTER = 0x0,
  BONUSCARD_SECONDARY_GUNFIGHTER = 0x1,
  BONUSCARD_OVERKILL = 0x2,
  BONUSCARD_PERK_1_GREED = 0x3,
  BONUSCARD_PERK_2_GREED = 0x4,
  BONUSCARD_PERK_3_GREED = 0x5,
  BONUSCARD_DANGER_CLOSE = 0x6,
  BONUSCARD_TWO_TACTICALS = 0x7,
  BONUSCARD_COUNT = 0x8,
};

/* 103 */
typedef D3D10_REGISTER_COMPONENT_TYPE D3D_REGISTER_COMPONENT_TYPE;

/* 104 */
enum XAssetType
{
  ASSET_TYPE_XMODELPIECES = 0x0,
  ASSET_TYPE_PHYSPRESET = 0x1,
  ASSET_TYPE_PHYSCONSTRAINTS = 0x2,
  ASSET_TYPE_DESTRUCTIBLEDEF = 0x3,
  ASSET_TYPE_XANIMPARTS = 0x4,
  ASSET_TYPE_XMODEL = 0x5,
  ASSET_TYPE_MATERIAL = 0x6,
  ASSET_TYPE_TECHNIQUE_SET = 0x7,
  ASSET_TYPE_IMAGE = 0x8,
  ASSET_TYPE_SOUND = 0x9,
  ASSET_TYPE_SOUND_PATCH = 0xA,
  ASSET_TYPE_CLIPMAP = 0xB,
  ASSET_TYPE_CLIPMAP_PVS = 0xC,
  ASSET_TYPE_COMWORLD = 0xD,
  ASSET_TYPE_GAMEWORLD_SP = 0xE,
  ASSET_TYPE_GAMEWORLD_MP = 0xF,
  ASSET_TYPE_MAP_ENTS = 0x10,
  ASSET_TYPE_GFXWORLD = 0x11,
  ASSET_TYPE_LIGHT_DEF = 0x12,
  ASSET_TYPE_UI_MAP = 0x13,
  ASSET_TYPE_FONT = 0x14,
  ASSET_TYPE_FONTICON = 0x15,
  ASSET_TYPE_MENULIST = 0x16,
  ASSET_TYPE_MENU = 0x17,
  ASSET_TYPE_LOCALIZE_ENTRY = 0x18,
  ASSET_TYPE_WEAPON = 0x19,
  ASSET_TYPE_WEAPONDEF = 0x1A,
  ASSET_TYPE_WEAPON_VARIANT = 0x1B,
  ASSET_TYPE_WEAPON_FULL = 0x1C,
  ASSET_TYPE_ATTACHMENT = 0x1D,
  ASSET_TYPE_ATTACHMENT_UNIQUE = 0x1E,
  ASSET_TYPE_WEAPON_CAMO = 0x1F,
  ASSET_TYPE_SNDDRIVER_GLOBALS = 0x20,
  ASSET_TYPE_FX = 0x21,
  ASSET_TYPE_IMPACT_FX = 0x22,
  ASSET_TYPE_AITYPE = 0x23,
  ASSET_TYPE_MPTYPE = 0x24,
  ASSET_TYPE_MPBODY = 0x25,
  ASSET_TYPE_MPHEAD = 0x26,
  ASSET_TYPE_CHARACTER = 0x27,
  ASSET_TYPE_XMODELALIAS = 0x28,
  ASSET_TYPE_RAWFILE = 0x29,
  ASSET_TYPE_STRINGTABLE = 0x2A,
  ASSET_TYPE_LEADERBOARD = 0x2B,
  ASSET_TYPE_XGLOBALS = 0x2C,
  ASSET_TYPE_DDL = 0x2D,
  ASSET_TYPE_GLASSES = 0x2E,
  ASSET_TYPE_EMBLEMSET = 0x2F,
  ASSET_TYPE_SCRIPTPARSETREE = 0x30,
  ASSET_TYPE_KEYVALUEPAIRS = 0x31,
  ASSET_TYPE_VEHICLEDEF = 0x32,
  ASSET_TYPE_MEMORYBLOCK = 0x33,
  ASSET_TYPE_ADDON_MAP_ENTS = 0x34,
  ASSET_TYPE_TRACER = 0x35,
  ASSET_TYPE_SKINNEDVERTS = 0x36,
  ASSET_TYPE_QDB = 0x37,
  ASSET_TYPE_SLUG = 0x38,
  ASSET_TYPE_FOOTSTEP_TABLE = 0x39,
  ASSET_TYPE_FOOTSTEPFX_TABLE = 0x3A,
  ASSET_TYPE_ZBARRIER = 0x3B,
  ASSET_TYPE_COUNT = 0x3C,
  ASSET_TYPE_STRING = 0x3C,
  ASSET_TYPE_ASSETLIST = 0x3D,
  ASSET_TYPE_REPORT = 0x3E,
  ASSET_TYPE_DEPEND = 0x3F,
  ASSET_TYPE_FULL_COUNT = 0x40,
};

/* 105 */
enum D3D_TESSELLATOR_DOMAIN
{
  D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0x0,
  D3D_TESSELLATOR_DOMAIN_ISOLINE = 0x1,
  D3D_TESSELLATOR_DOMAIN_TRI = 0x2,
  D3D_TESSELLATOR_DOMAIN_QUAD = 0x3,
  D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0x0,
  D3D11_TESSELLATOR_DOMAIN_ISOLINE = 0x1,
  D3D11_TESSELLATOR_DOMAIN_TRI = 0x2,
  D3D11_TESSELLATOR_DOMAIN_QUAD = 0x3,
};

/* 106 */
enum vc_attributes::YesNoMaybe
{
  No = 0xFFF0001,
  Maybe = 0xFFF0010,
  Yes = 0xFFF0100,
};

/* 107 */
enum vc_attributes::AccessType
{
  NoAccess = 0x0,
  Read = 0x1,
  Write = 0x2,
  ReadWrite = 0x3,
};

/* 108 */
enum D3D_TESSELLATOR_PARTITIONING
{
  D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0x0,
  D3D_TESSELLATOR_PARTITIONING_INTEGER = 0x1,
  D3D_TESSELLATOR_PARTITIONING_POW2 = 0x2,
  D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 0x3,
  D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 0x4,
  D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0x0,
  D3D11_TESSELLATOR_PARTITIONING_INTEGER = 0x1,
  D3D11_TESSELLATOR_PARTITIONING_POW2 = 0x2,
  D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 0x3,
  D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 0x4,
};

/* 109 */
enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
{
  D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0x0,
  D3D_TESSELLATOR_OUTPUT_POINT = 0x1,
  D3D_TESSELLATOR_OUTPUT_LINE = 0x2,
  D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 0x3,
  D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 0x4,
  D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0x0,
  D3D11_TESSELLATOR_OUTPUT_POINT = 0x1,
  D3D11_TESSELLATOR_OUTPUT_LINE = 0x2,
  D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 0x3,
  D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 0x4,
};

/* 110 */
enum D3D11_QUERY
{
  D3D11_QUERY_EVENT = 0x0,
  D3D11_QUERY_OCCLUSION = 0x1,
  D3D11_QUERY_TIMESTAMP = 0x2,
  D3D11_QUERY_TIMESTAMP_DISJOINT = 0x3,
  D3D11_QUERY_PIPELINE_STATISTICS = 0x4,
  D3D11_QUERY_OCCLUSION_PREDICATE = 0x5,
  D3D11_QUERY_SO_STATISTICS = 0x6,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE = 0x7,
  D3D11_QUERY_SO_STATISTICS_STREAM0 = 0x8,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 0x9,
  D3D11_QUERY_SO_STATISTICS_STREAM1 = 0xA,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 0xB,
  D3D11_QUERY_SO_STATISTICS_STREAM2 = 0xC,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 0xD,
  D3D11_QUERY_SO_STATISTICS_STREAM3 = 0xE,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 0xF,
};

/* 111 */
enum OffhandSecondaryClass
{
  PLAYER_OFFHAND_SECONDARY_SMOKE = 0x0,
  PLAYER_OFFHAND_SECONDARY_FLASH = 0x1,
  PLAYER_OFFHAND_SECONDARIES_TOTAL = 0x2,
};

/* 112 */
enum $7D4D259855399C24193CA5705950FD3C
{
  THREAD_VALUE_PROF_STACK = 0x0,
  THREAD_VALUE_VA = 0x1,
  THREAD_VALUE_COM_ERROR = 0x2,
  THREAD_VALUE_TRACE = 0x3,
  THREAD_VALUE_CMD = 0x4,
  THREAD_VALUE_COUNT = 0x5,
};

/* 113 */
enum OffhandPrimaryClass
{
  PLAYER_OFFHAND_PRIMARY_FRAG = 0x0,
  PLAYER_OFFHAND_PRIMARY_GEAR = 0x1,
  PLAYER_OFFHAND_PRIMARIES_TOTAL = 0x2,
};

/* 114 */
enum $55F491858F073C2D54717BB4D444F4DC
{
  THREAD_CONTEXT_MAIN = 0x0,
  THREAD_CONTEXT_BACKEND = 0x1,
  THREAD_CONTEXT_WORKER0 = 0x2,
  THREAD_CONTEXT_WORKER1 = 0x3,
  THREAD_CONTEXT_WORKER2 = 0x4,
  THREAD_CONTEXT_WORKER3 = 0x5,
  THREAD_CONTEXT_WORKER4 = 0x6,
  THREAD_CONTEXT_WORKER5 = 0x7,
  THREAD_CONTEXT_WORKER6 = 0x8,
  THREAD_CONTEXT_WORKER7 = 0x9,
  THREAD_CONTEXT_SERVER = 0xA,
  THREAD_CONTEXT_TITLE_SERVER = 0xB,
  THREAD_CONTEXT_DATABASE = 0xC,
  THREAD_CONTEXT_TRACE_COUNT = 0xD,
  THREAD_CONTEXT_TRACE_LAST = 0xC,
  THREAD_CONTEXT_STREAM = 0xD,
  THREAD_CONTEXT_SOUND_MIX = 0xE,
  THREAD_CONTEXT_SOUND_DECODE = 0xF,
  THREAD_CONTEXT_WEBM_DEC_DECODE = 0x10,
  THREAD_CONTEXT_COUNT = 0x11,
  THREAD_CONTEXT_INVALID = 0xFFFFFFFF,
};

/* 115 */
enum weaponstate_t
{
  WEAPON_READY = 0x0,
  WEAPON_RAISING = 0x1,
  WEAPON_RAISING_ALTSWITCH = 0x2,
  WEAPON_DROPPING = 0x3,
  WEAPON_DROPPING_QUICK = 0x4,
  WEAPON_DROPPING_ALTSWITCH = 0x5,
  WEAPON_FIRING = 0x6,
  WEAPON_RECHAMBER_START = 0x7,
  WEAPON_RECHAMBERING = 0x8,
  WEAPON_RELOADING_RIGHT = 0x9,
  WEAPON_RELOADING_LEFT = 0xA,
  WEAPON_RELOADING = 0xB,
  WEAPON_RELOADING_INTERUPT = 0xC,
  WEAPON_RELOAD_START = 0xD,
  WEAPON_RELOAD_START_RECHAMBER = 0xE,
  WEAPON_RELOAD_START_INTERUPT = 0xF,
  WEAPON_RELOAD_END = 0x10,
  WEAPON_RELOAD_QUICK = 0x11,
  WEAPON_RELOAD_QUICK_EMPTY = 0x12,
  WEAPON_MELEE_INIT = 0x13,
  WEAPON_MELEE_FIRE = 0x14,
  WEAPON_MELEE_END = 0x15,
  WEAPON_OFFHAND_INIT = 0x16,
  WEAPON_OFFHAND_PREPARE = 0x17,
  WEAPON_OFFHAND_HOLD = 0x18,
  WEAPON_OFFHAND_DETONATE = 0x19,
  WEAPON_OFFHAND_START = 0x1A,
  WEAPON_OFFHAND = 0x1B,
  WEAPON_OFFHAND_HOLDUSE = 0x1C,
  WEAPON_OFFHAND_END = 0x1D,
  WEAPON_RIOTSHIELD_PREPARE = 0x1E,
  WEAPON_RIOTSHIELD_START = 0x1F,
  WEAPON_RIOTSHIELD_HOLD = 0x20,
  WEAPON_RIOTSHIELD = 0x21,
  WEAPON_RIOTSHIELD_END = 0x22,
  WEAPON_DETONATING = 0x23,
  WEAPON_SPRINT_RAISE = 0x24,
  WEAPON_SPRINT_LOOP = 0x25,
  WEAPON_SPRINT_DROP = 0x26,
  WEAPON_CONT_FIRE_IN = 0x27,
  WEAPON_CONT_FIRE_LOOP = 0x28,
  WEAPON_CONT_FIRE_OUT = 0x29,
  WEAPON_NIGHTVISION_WEAR = 0x2A,
  WEAPON_NIGHTVISION_REMOVE = 0x2B,
  WEAPON_DEPLOYING = 0x2C,
  WEAPON_DEPLOYED = 0x2D,
  WEAPON_BREAKING_DOWN = 0x2E,
  WEAPON_SWIM_IN = 0x2F,
  WEAPON_SWIM_OUT = 0x30,
  WEAPON_DTP_IN = 0x31,
  WEAPON_DTP_LOOP = 0x32,
  WEAPON_DTP_OUT = 0x33,
  WEAPON_SLIDE_IN = 0x34,
  WEAPON_FIRING_LEFT = 0x35,
  WEAPON_FIRING_BOTH = 0x36,
  WEAPON_JAMMED = 0x37,
  WEAPON_LOWREADY_RAISE = 0x38,
  WEAPON_LOWREADY_LOOP = 0x39,
  WEAPON_LOWREADY_DROP = 0x3A,
  WEAPON_CRAWL_IN = 0x3B,
  WEAPON_CRAWL_FORWARD = 0x3C,
  WEAPON_CRAWL_BACK = 0x3D,
  WEAPON_CRAWL_RIGHT = 0x3E,
  WEAPON_CRAWL_LEFT = 0x3F,
  WEAPON_CRAWL_OUT = 0x40,
  WEAPONSTATES_NUM = 0x41,
};

/* 116 */
enum D3D11_FILL_MODE
{
  D3D11_FILL_WIREFRAME = 0x2,
  D3D11_FILL_SOLID = 0x3,
};

/* 117 */
enum D3D11_CULL_MODE
{
  D3D11_CULL_NONE = 0x1,
  D3D11_CULL_FRONT = 0x2,
  D3D11_CULL_BACK = 0x3,
};

/* 118 */
enum ActionSlotType
{
  ACTIONSLOTTYPE_DONOTHING = 0x0,
  ACTIONSLOTTYPE_SPECIFYWEAPON = 0x1,
  ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 0x2,
  ACTIONSLOTTYPE_NIGHTVISION = 0x3,
  ACTIONSLOTTYPECOUNT = 0x4,
};

/* 119 */
enum $1BE567E1DCADAFE20F6CF10702038F8D
{
  DOBJ_MAX_PARTS = 0xA0,
  DOBJ_MAX_PART_BITS = 0x5,
  MAX_LODS = 0x4,
};

/* 120 */
enum $75E1C3852A037895CAC05730BA245838
{
  ASSERT_TYPE_ASSERT = 0x0,
  ASSERT_TYPE_SANITY = 0x1,
  ASSERT_TYPE_STACKTRACE = 0x2,
};

/* 121 */
enum GfxLightType
{
  GFX_LIGHT_TYPE_NONE = 0x0,
  GFX_LIGHT_TYPE_DIR = 0x1,
  GFX_LIGHT_TYPE_SPOT = 0x2,
  GFX_LIGHT_TYPE_SPOT_SQUARE = 0x3,
  GFX_LIGHT_TYPE_SPOT_ROUND = 0x4,
  GFX_LIGHT_TYPE_OMNI = 0x5,
  GFX_LIGHT_TYPE_COUNT = 0x6,
  GFX_LIGHT_TYPE_DIR_SHADOWMAP = 0x6,
  GFX_LIGHT_TYPE_SPOT_SHADOWMAP = 0x7,
  GFX_LIGHT_TYPE_SPOT_SQUARE_SHADOWMAP = 0x8,
  GFX_LIGHT_TYPE_SPOT_ROUND_SHADOWMAP = 0x9,
  GFX_LIGHT_TYPE_OMNI_SHADOWMAP = 0xA,
  GFX_LIGHT_TYPE_COUNT_WITH_SHADOWMAP_VERSIONS = 0xB,
};

/* 122 */
enum weaponAttachModel_t
{
  WEAP_ATTACH_MODEL_OPTIC_1 = 0x0,
  WEAP_ATTACH_MODEL_OPTIC_2 = 0x1,
  WEAP_ATTACH_MODEL_IRONSIGHTS = 0x2,
  WEAP_ATTACH_MODEL_MUZZLE = 0x3,
  WEAP_ATTACH_MODEL_UNDERBARREL = 0x4,
  WEAP_ATTACH_MODEL_MISC = 0x5,
  WEAP_ATTACH_MODEL_CLIP = 0x6,
  WEAP_ATTACH_MODEL_OPTIC_1_ADS = 0x7,
  NUM_WEAP_ATTACHMODELS = 0x8,
};

/* 123 */
enum AISpecies
{
  AI_SPECIES_DOG = 0x0,
  AI_SPECIES_BIGDOG = 0x1,
  AI_SPECIES_ZOMBIE = 0x2,
  AI_SPECIES_ZOMBIE_DOG = 0x3,
  MAX_AI_SPECIES = 0x4,
  AI_SPECIES_ALL = 0x4,
};

/* 124 */
enum D3D11_DSV_DIMENSION
{
  D3D11_DSV_DIMENSION_UNKNOWN = 0x0,
  D3D11_DSV_DIMENSION_TEXTURE1D = 0x1,
  D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 0x2,
  D3D11_DSV_DIMENSION_TEXTURE2D = 0x3,
  D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 0x4,
  D3D11_DSV_DIMENSION_TEXTURE2DMS = 0x5,
  D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 0x6,
};

/* 125 */
enum ViewLockTypes
{
  PLAYERVIEWLOCK_NONE = 0x0,
  PLAYERVIEWLOCK_FULL = 0x1,
  PLAYERVIEWLOCK_WEAPONJITTER = 0x2,
  PLAYERVIEWLOCKCOUNT = 0x3,
};

/* 126 */
enum VehicleAnimState
{
  VEHICLEANIMSTATE_IDLE = 0x0,
  VEHICLEANIMSTATE_ENTRY = 0x1,
  VEHICLEANIMSTATE_CHANGEPOS = 0x2,
  VEHICLEANIMSTATE_EXIT = 0x3,
  VEHICLEANIMSTATECOUNT = 0x4,
};

/* 127 */
enum $600C5C55DA623EC1BA27D4F06AFBFC7E
{
  CONTROL_ANGLES_BACK_LOW = 0x0,
  CONTROL_ANGLES_BACK_MID = 0x1,
  CONTROL_ANGLES_BACK_UP = 0x2,
  CONTROL_ANGLES_NECK = 0x3,
  CONTROL_ANGLES_HEAD = 0x4,
  CONTROL_ANGLES_PELVIS = 0x5,
  CONTROL_ANGLES_COUNT = 0x6,
};

/* 128 */
enum D3D11_RTV_DIMENSION
{
  D3D11_RTV_DIMENSION_UNKNOWN = 0x0,
  D3D11_RTV_DIMENSION_BUFFER = 0x1,
  D3D11_RTV_DIMENSION_TEXTURE1D = 0x2,
  D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 0x3,
  D3D11_RTV_DIMENSION_TEXTURE2D = 0x4,
  D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 0x5,
  D3D11_RTV_DIMENSION_TEXTURE2DMS = 0x6,
  D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
  D3D11_RTV_DIMENSION_TEXTURE3D = 0x8,
};

/* 129 */
enum $179FE4A045522FE924580783294974DF
{
  MARK_MODEL_TYPE_WORLD_BRUSH = 0x0,
  MARK_MODEL_TYPE_WORLD_MODEL = 0x40,
  MARK_MODEL_TYPE_ENT_BRUSH = 0x80,
  MARK_MODEL_TYPE_ENT_MODEL = 0xC0,
  MARK_MODEL_TYPE_MASK = 0xC0,
  MARK_MODEL_SURF_MASK = 0x3F,
  MARK_MODEL_MASK_ENTMDL_INDEX = 0x1F,
  MARK_MODEL_MASK_ENTMDL_VIEWMDL = 0x20,
};

/* 130 */
enum $8FDC0AE1D3D4638B1569AB07FF99DBD8
{
  SERVER_VARIABLELIST_PARENT_SIZE = 0x6000,
  SERVER_VARIABLELIST_CHILD_SIZE = 0x10000,
  SERVER_VARIABLELIST_SIZE = 0x16000,
  SERVER_VARIABLELIST_PARENT_DEV_SIZE = 0x5380,
  SERVER_VARIABLELIST_CHILD_DEV_SIZE = 0xF380,
};

/* 131 */
enum D3D11_UAV_DIMENSION
{
  D3D11_UAV_DIMENSION_UNKNOWN = 0x0,
  D3D11_UAV_DIMENSION_BUFFER = 0x1,
  D3D11_UAV_DIMENSION_TEXTURE1D = 0x2,
  D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 0x3,
  D3D11_UAV_DIMENSION_TEXTURE2D = 0x4,
  D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 0x5,
  D3D11_UAV_DIMENSION_TEXTURE3D = 0x8,
};

/* 132 */
enum $DF8E24BA443F97D009CDED80F9C66A3A
{
  CLIENT_VARIABLELIST_PARENT_SIZE = 0x4000,
  CLIENT_VARIABLELIST_CHILD_SIZE = 0x10000,
  CLIENT_VARIABLELIST_PARENT_DEV_SIZE = 0x3380,
  CLIENT_VARIABLELIST_CHILD_DEV_SIZE = 0xF380,
  CLIENT_VARIABLELIST_SIZE = 0x14000,
};

/* 133 */
enum D3D11_USAGE
{
  D3D11_USAGE_DEFAULT = 0x0,
  D3D11_USAGE_IMMUTABLE = 0x1,
  D3D11_USAGE_DYNAMIC = 0x2,
  D3D11_USAGE_STAGING = 0x3,
};

/* 134 */
enum $B8B5C10C9ADD82C7972D8F90A6AD72A5
{
  VAR_NAME_BITS = 0x8,
  VAR_NAME_LOW_MASK = 0xFFFFFF,
  VAR_NAME_HIGH_MASK = 0xFFFFFF00,
  VAR_MIN_INT = 0xFF800000,
  VAR_MAX_INT = 0x7FFFFF,
  ENTITY_NUM_BITS = 0xE,
};

/* 135 */
enum D3D11_COUNTER_TYPE
{
  D3D11_COUNTER_TYPE_FLOAT32 = 0x0,
  D3D11_COUNTER_TYPE_UINT16 = 0x1,
  D3D11_COUNTER_TYPE_UINT32 = 0x2,
  D3D11_COUNTER_TYPE_UINT64 = 0x3,
};

/* 136 */
enum $C8BBF97847B75AB8EF6BA8B79D61A8B5
{
  BOMB_TIMER_PRIMARY = 0x0,
  BOMB_TIMER_SECONDARY = 0x1,
  BOMB_TIMER_COUNT = 0x2,
};

/* 137 */
enum entity_event_t
{
  EV_NONE = 0x0,
  EV_FOLIAGE_SOUND = 0x1,
  EV_STOP_WEAPON_SOUND = 0x2,
  EV_STOP_SOUND_ALIAS = 0x3,
  EV_SOUND_ALIAS = 0x4,
  EV_SOUND_ALIAS_NOTIFY = 0x5,
  EV_SOUND_BATTLECHAT_ALIAS = 0x6,
  EV_STOPSOUNDS = 0x7,
  EV_STANCE_FORCE_STAND = 0x8,
  EV_STANCE_FORCE_CROUCH = 0x9,
  EV_STANCE_FORCE_PRONE = 0xA,
  EV_ITEM_PICKUP = 0xB,
  EV_AMMO_PICKUP = 0xC,
  EV_NOAMMO = 0xD,
  EV_NOAMMO_LEFT = 0xE,
  EV_EMPTYCLIP = 0xF,
  EV_EMPTY_OFFHAND = 0x10,
  EV_RESET_ADS = 0x11,
  EV_RELOAD = 0x12,
  EV_RELOAD_FROM_EMPTY = 0x13,
  EV_RELOAD_START = 0x14,
  EV_RELOAD_END = 0x15,
  EV_RELOAD_START_NOTIFY = 0x16,
  EV_RELOAD_ADDAMMO = 0x17,
  EV_RAISE_WEAPON = 0x18,
  EV_FIRST_RAISE_WEAPON = 0x19,
  EV_RAISE_PICKUP_WEAPON = 0x1A,
  EV_PUTAWAY_WEAPON = 0x1B,
  EV_WEAPON_ALT = 0x1C,
  EV_WEAPON_SWITCH_STARTED = 0x1D,
  EV_PULLBACK_WEAPON = 0x1E,
  EV_FIRE_WEAPON_SCRIPTED = 0x1F,
  EV_FIRE_WEAPON = 0x20,
  EV_FIRE_WEAPON_LASTSHOT = 0x21,
  EV_FIRE_WEAPON_LEFT = 0x22,
  EV_FIRE_WEAPON_LASTSHOT_LEFT = 0x23,
  EV_FIRE_RICOCHET = 0x24,
  EV_RECHAMBER_WEAPON = 0x25,
  EV_EJECT_BRASS = 0x26,
  EV_MELEE_SWIPE = 0x27,
  EV_FIRE_MELEE = 0x28,
  EV_WEAPON_DEPLOYING = 0x29,
  EV_WEAPON_FINISH_DEPLOYING = 0x2A,
  EV_WEAPON_BREAKING_DOWN = 0x2B,
  EV_WEAPON_FINISH_BREAKING_DOWN = 0x2C,
  EV_INC_CHARGESHOT_LEVEL = 0x2D,
  EV_CHARGESHOT_DISCHARGEWEAPON = 0x2E,
  EV_PREP_OFFHAND = 0x2F,
  EV_USE_OFFHAND = 0x30,
  EV_SWITCH_OFFHAND = 0x31,
  EV_PREP_RIOTSHIELD = 0x32,
  EV_DEPLOY_RIOTSHIELD = 0x33,
  EV_LOWER_RIOTSHIELD = 0x34,
  EV_MELEE_HIT = 0x35,
  EV_MELEE_MISS = 0x36,
  EV_MELEE_BLOOD = 0x37,
  EV_FIRE_WEAPON_MOUNTED_TURRET = 0x38,
  EV_FIRE_WEAPON_MOUNTED_TURRETA = 0x39,
  EV_FIRE_BARREL_1 = 0x3A,
  EV_FIRE_BARREL_2 = 0x3B,
  EV_FIRE_BARREL_3 = 0x3C,
  EV_FIRE_BARREL_4 = 0x3D,
  EV_BULLET_HIT = 0x3E,
  EV_BULLET_HIT_SHIELD = 0x3F,
  EV_BULLET_HIT_CLIENT_SHIELD = 0x40,
  EV_EXPLOSIVE_IMPACT_ON_SHIELD = 0x41,
  EV_EXPLOSIVE_SPLASH_ON_SHIELD = 0x42,
  EV_BULLET_HIT_CLIENT_SMALL = 0x43,
  EV_BULLET_HIT_CLIENT_LARGE = 0x44,
  EV_DESTRUCTIBLE_BULLET_HIT = 0x45,
  EV_DESTRUCTIBLE_EXPLOSION_HIT = 0x46,
  EV_GRENADE_BOUNCE = 0x47,
  EV_GRENADE_EXPLODE = 0x48,
  EV_ROCKET_EXPLODE = 0x49,
  EV_ROCKET_EXPLODE_NOMARKS = 0x4A,
  EV_FLASHBANG_EXPLODE = 0x4B,
  EV_CUSTOM_EXPLODE = 0x4C,
  EV_CUSTOM_EXPLODE_NOMARKS = 0x4D,
  EV_SENSOR_GRENADE_EXPLODE = 0x4E,
  EV_CHANGE_TO_DUD = 0x4F,
  EV_DUD_EXPLODE = 0x50,
  EV_DUD_IMPACT = 0x51,
  EV_FIRE_EXPLODE = 0x52,
  EV_TIMED_FX = 0x53,
  EV_MOLOTOV_FLOAT = 0x54,
  EV_FAKE_FIRE = 0x55,
  EV_PLAY_FX = 0x56,
  EV_PLAY_FX_ON_TAG = 0x57,
  EV_PHYS_EXPLOSION_SPHERE = 0x58,
  EV_PHYS_EXPLOSION_CYLINDER = 0x59,
  EV_PHYS_EXPLOSION_JOLT = 0x5A,
  EV_PHYS_JET_THRUST = 0x5B,
  EV_PHYS_LAUNCH = 0x5C,
  EV_CREATE_DYNENT = 0x5D,
  EV_CREATE_ROPE = 0x5E,
  EV_BLOOD_IMPACTS = 0x5F,
  EV_DETACH_ENTITY = 0x60,
  EV_DELETE_ROPE = 0x61,
  EV_ROPE_COLLIDE = 0x62,
  EV_ROPE_SETFLAG = 0x63,
  EV_ROPE_SETPARAM = 0x64,
  EV_ROPE_ADDANCHOR = 0x65,
  EV_ROPE_REMOVEANCHOR = 0x66,
  EV_ROPE_MOVEANCHOR = 0x67,
  EV_SETWETNESS = 0x68,
  EV_EARTHQUAKE = 0x69,
  EV_GRENADE_DROP = 0x6A,
  EV_GRENADE_SUICIDE = 0x6B,
  EV_DETONATE = 0x6C,
  EV_NIGHTVISION_WEAR = 0x6D,
  EV_NIGHTVISION_REMOVE = 0x6E,
  EV_MISSILE_REMOTE_BOOST = 0x6F,
  EV_PLAY_RUMBLE_ON_ENT = 0x70,
  EV_PLAY_RUMBLE_ON_POS = 0x71,
  EV_PLAY_RUMBLELOOP_ON_ENT = 0x72,
  EV_PLAY_RUMBLELOOP_ON_POS = 0x73,
  EV_STOP_RUMBLE = 0x74,
  EV_STOP_ALL_RUMBLES = 0x75,
  EV_OBITUARY = 0x76,
  EV_REVIVE_OBITUARY = 0x77,
  EV_DIRECTIONAL_HIT_INDICATOR = 0x78,
  EV_ANIMATE_UI = 0x79,
  EV_KILLSTREAK_DAMAGE = 0x7A,
  EV_NO_FRAG_GRENADE_HINT = 0x7B,
  EV_NO_SPECIAL_GRENADE_HINT = 0x7C,
  EV_TARGET_TOO_CLOSE_HINT = 0x7D,
  EV_TARGET_NOT_ENOUGH_CLEARANCE = 0x7E,
  EV_LOCKON_REQUIRED_HINT = 0x7F,
  EV_FOOTSTEP_SPRINT = 0x80,
  EV_FOOTSTEP_RUN = 0x81,
  EV_FOOTSTEP_WALK = 0x82,
  EV_FOOTSTEP_CROUCHRUN = 0x83,
  EV_FOOTSTEP_CROUCHWALK = 0x84,
  EV_FOOTSTEP_PRONE = 0x85,
  EV_LADDER_HAND_GRAB = 0x86,
  EV_MANTLE = 0x87,
  EV_JUMP = 0x88,
  EV_LANDING_FIRST = 0x89,
  EV_LANDING_LAST = 0xA8,
  EV_LANDING_PAIN_FIRST = 0xA9,
  EV_LANDING_PAIN_LAST = 0xC8,
  EV_FIRE_VEHICLE_TURRET = 0xC9,
  EV_FIRE_GUNNER_1 = 0xCA,
  EV_FIRE_GUNNER_2 = 0xCB,
  EV_FIRE_GUNNER_3 = 0xCC,
  EV_FIRE_GUNNER_4 = 0xCD,
  EV_FIRE_GUNNER_1A = 0xCE,
  EV_FIRE_GUNNER_2A = 0xCF,
  EV_FIRE_GUNNER_3A = 0xD0,
  EV_FIRE_GUNNER_4A = 0xD1,
  EV_START_CAMERA_TWEEN = 0xD2,
  EV_DESTRUCTIBLE_DISABLE_PIECES = 0xD3,
  EV_FOOTPRINT = 0xD4,
  EV_CANNOTPLANT = 0xD5,
  EV_CANT_EQUIP_PRONE = 0xD6,
  EV_DTP_LAUNCH = 0xD7,
  EV_DTP_LAND = 0xD8,
  EV_SLIDE_START = 0xD9,
  EV_SLIDE_STOP = 0xDA,
  EV_SCOPE_ZOOM = 0xDB,
  EV_JAM_WEAPON = 0xDC,
  EV_STACKFIRE = 0xDD,
  EV_BOLT_IMPACT = 0xDE,
  EV_BOLT_IMPALE = 0xDF,
  EV_PLAY_WEAPON_DEATH_EFFECTS = 0xE0,
  EV_PLAY_WEAPON_DAMAGE_EFFECTS = 0xE1,
  EV_FACE_EVENT = 0xE2,
  EV_SETLOCALWIND = 0xE3,
  EV_FLOAT_LONGER = 0xE4,
  EV_FORCE_BUOYANCY = 0xE5,
  EV_DISABLE_DEPTH_BUOYANCY_ADJUSTMENTS = 0xE6,
  EV_SCALE_BUOYANCY = 0xE7,
  EV_ALLOWPITCH = 0xE8,
  EV_GIB = 0xE9,
  EV_STANCE_INVALID = 0xEA,
  EV_ENTER_VEHICLE = 0xEB,
  EV_EXIT_VEHICLE = 0xEC,
  EV_IMMEDIATE_RAGDOLL = 0xED,
  EV_ENT_SPAWNED_SENTINEL = 0xEE,
  EV_PROJECTILE_PASS_THROUGH = 0xEF,
  EV_MAX_EVENTS = 0xF0,
};

/* 138 */
enum $48CB5FF48600BABB00A6CDA6817AC61F
{
  FS_LOOK_IN_MAIN = 0x1,
  FS_LOOK_IN_DEV = 0x2,
  FS_LOOK_IN_TEMP = 0x4,
  FS_LOOK_IN_RAW = 0x8,
  FS_LOOK_IN_RAWSHARED = 0x10,
  FS_LOOK_IN_DEVRAW = 0x20,
  FS_LOOK_IN_ALL = 0x3F,
};

/* 139 */
enum expDataType
{
  VAL_INT = 0x0,
  VAL_FLOAT = 0x1,
  VAL_STRING = 0x2,
  VAL_ADDRESS = 0x3,
  VAL_DVAR = 0x4,
};

/* 140 */
enum ConstraintType
{
  CONSTRAINT_NONE = 0x0,
  CONSTRAINT_POINT = 0x1,
  CONSTRAINT_DISTANCE = 0x2,
  CONSTRAINT_HINGE = 0x3,
  CONSTRAINT_JOINT = 0x4,
  CONSTRAINT_ACTUATOR = 0x5,
  CONSTRAINT_FAKE_SHAKE = 0x6,
  CONSTRAINT_LAUNCH = 0x7,
  CONSTRAINT_ROPE = 0x8,
  CONSTRAINT_LIGHT = 0x9,
  NUM_CONSTRAINT_TYPES = 0xA,
};

/* 141 */
enum AttachPointType
{
  ATTACH_POINT_WORLD = 0x0,
  ATTACH_POINT_DYNENT = 0x1,
  ATTACH_POINT_ENT = 0x2,
  ATTACH_POINT_BONE = 0x3,
};

/* 142 */
enum HU_ALLOCATION_SCHEME
{
  HU_SCHEME_DEFAULT = 0x0,
  HU_SCHEME_DEBUG = 0x1,
  HU_SCHEME_FIRSTFIT = 0x2,
  HU_SCHEME_FIXED = 0x3,
  HU_SCHEME_NULL = 0x4,
  HU_SCHEME_COUNT = 0x5,
};

/* 143 */
enum connectionType_e
{
  CONNECTION_TYPE_UNKNOWN = 0x0,
  CONNECTION_TYPE_WIRED = 0x1,
  CONNECTION_TYPE_WIRELESS = 0x2,
};

/* 144 */
enum guidedMissileType_t
{
  MISSILE_GUIDANCE_NONE = 0x0,
  MISSILE_GUIDANCE_SIDEWINDER = 0x1,
  MISSILE_GUIDANCE_HELLFIRE = 0x2,
  MISSILE_GUIDANCE_JAVELIN = 0x3,
  MISSILE_GUIDANCE_BALLISTIC = 0x4,
  MISSILE_GUIDANCE_WIREGUIDED = 0x5,
  MISSILE_GUIDANCE_TVGUIDED = 0x6,
  MISSILE_GUIDANCE_DRONE = 0x7,
  MISSILE_GUIDANCE_HEATSEEKING = 0x8,
  MISSILE_GUIDANCE_COUNT = 0x9,
};

/* 145 */
enum bdNATTravClientData::bdNATTravClientDataState
{
  BD_NTCDS_INITIAL = 0x0,
  BD_NTCDS_STAGE_1 = 0x1,
  BD_NTCDS_STAGE_2 = 0x2,
  BD_NTCDS_STAGE_3 = 0x3,
};

/* 146 */
enum OffhandClass
{
  OFFHAND_CLASS_NONE = 0x0,
  OFFHAND_CLASS_FRAG_GRENADE = 0x1,
  OFFHAND_CLASS_SMOKE_GRENADE = 0x2,
  OFFHAND_CLASS_FLASH_GRENADE = 0x3,
  OFFHAND_CLASS_GEAR = 0x4,
  OFFHAND_CLASS_SUPPLYDROP_MARKER = 0x5,
  OFFHAND_CLASS_COUNT = 0x6,
};

/* 147 */
enum weapProjExposion_t
{
  WEAPPROJEXP_GRENADE = 0x0,
  WEAPPROJEXP_ROCKET = 0x1,
  WEAPPROJEXP_FLASHBANG = 0x2,
  WEAPPROJEXP_NONE = 0x3,
  WEAPPROJEXP_DUD = 0x4,
  WEAPPROJEXP_SMOKE = 0x5,
  WEAPPROJEXP_HEAVY = 0x6,
  WEAPPROJEXP_FIRE = 0x7,
  WEAPPROJEXP_NAPALMBLOB = 0x8,
  WEAPPROJEXP_BOLT = 0x9,
  WEAPPROJEXP_SHRAPNELSPAN = 0xA,
  WEAPPROJEXP_NUM = 0xB,
};

/* 148 */
enum activeReticleType_t
{
  VEH_ACTIVE_RETICLE_NONE = 0x0,
  VEH_ACTIVE_RETICLE_PIP_ON_A_STICK = 0x1,
  VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND = 0x2,
  VEH_ACTIVE_RETICLE_MISSILE_LOCK = 0x3,
  VEH_ACTIVE_RETICLE_COUNT = 0x4,
};

/* 149 */
enum ammoCounterClipType_t
{
  AMMO_COUNTER_CLIP_NONE = 0x0,
  AMMO_COUNTER_CLIP_MAGAZINE = 0x1,
  AMMO_COUNTER_CLIP_SHORTMAGAZINE = 0x2,
  AMMO_COUNTER_CLIP_SHOTGUN = 0x3,
  AMMO_COUNTER_CLIP_ROCKET = 0x4,
  AMMO_COUNTER_CLIP_BELTFED = 0x5,
  AMMO_COUNTER_CLIP_ALTWEAPON = 0x6,
  AMMO_COUNTER_CLIP_COUNT = 0x7,
};

/* 150 */
enum ImpactType
{
  IMPACT_TYPE_NONE = 0x0,
  IMPACT_TYPE_BULLET_SMALL = 0x1,
  IMPACT_TYPE_BULLET_LARGE = 0x2,
  IMPACT_TYPE_BULLET_AP = 0x3,
  IMPACT_TYPE_BULLET_XTREME = 0x4,
  IMPACT_TYPE_SHOTGUN = 0x5,
  IMPACT_TYPE_GRENADE_BOUNCE = 0x6,
  IMPACT_TYPE_GRENADE_EXPLODE = 0x7,
  IMPACT_TYPE_RIFLE_GRENADE = 0x8,
  IMPACT_TYPE_ROCKET_EXPLODE = 0x9,
  IMPACT_TYPE_ROCKET_EXPLODE_XTREME = 0xA,
  IMPACT_TYPE_PROJECTILE_DUD = 0xB,
  IMPACT_TYPE_MORTAR_SHELL = 0xC,
  IMPACT_TYPE_TANK_SHELL = 0xD,
  IMPACT_TYPE_BOLT = 0xE,
  IMPACT_TYPE_BLADE = 0xF,
  IMPACT_TYPE_COUNT = 0x10,
};

/* 151 */
enum objectiveState_t
{
  OBJST_EMPTY = 0x0,
  OBJST_ACTIVE = 0x1,
  OBJST_INVISIBLE = 0x2,
  OBJST_NUMSTATES = 0x3,
};

/* 152 */
enum weapInventoryType_t
{
  WEAPINVENTORY_PRIMARY = 0x0,
  WEAPINVENTORY_OFFHAND = 0x1,
  WEAPINVENTORY_ITEM = 0x2,
  WEAPINVENTORY_ALTMODE = 0x3,
  WEAPINVENTORY_MELEE = 0x4,
  WEAPINVENTORY_DWLEFTHAND = 0x5,
  WEAPINVENTORYCOUNT = 0x6,
};

/* 153 */
enum bdAuthTicket::bdTicketTypes
{
  BD_AUTH_USER_TO_SERVICE_TICKET = 0x0,
  BD_AUTH_HOST_TO_SERVICE_TICKET = 0x1,
  BD_AUTH_USER_TO_HOST_TICKET = 0x2,
};

/* 154 */
enum D3D11_COUNTER
{
  D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
};

/* 155 */
enum $2A146807E7F7A23AE802A877572B6D01
{
  MAX_HISTORY = 0x4,
};

/* 156 */
enum barrelType_t
{
  BARREL_TYPE_SINGLE = 0x0,
  BARREL_TYPE_DUAL = 0x1,
  BARREL_TYPE_DUAL_ALTERNATE = 0x2,
  BARREL_TYPE_QUAD = 0x3,
  BARREL_TYPE_QUAD_ALTERNATE = 0x4,
  BARREL_TYPE_QUAD_DOUBLE_ALTERNATE = 0x5,
  BARREL_TYPE_COUNT = 0x6,
};

/* 157 */
enum bdAuthService::bdStatus
{
  BD_READY = 0x0,
  BD_CONNECTING = 0x1,
  BD_PENDING_REPLY = 0x2,
};

/* 158 */
enum bdGetHostByName::bdStatus
{
  BD_LOOKUP_UNINITIALIZED = 0x0,
  BD_LOOKUP_PENDING = 0x1,
  BD_LOOKUP_SUCCEEDED = 0x2,
  BD_LOOKUP_FAILED = 0x3,
  BD_LOOKUP_CANCELLED = 0x4,
  BD_LOOKUP_TIMED_OUT = 0x5,
  BD_LOOKUP_ERROR = 0x6,
};

/* 159 */
enum ParamDataDesc
{
  P_WORKERCMD = 0x0,
  P_FENCE = 0x1,
  P_LAST = 0x2,
};

/* 160 */
enum bdQoSProbe::bdQoSProbeStatus
{
  BD_QOS_PROBE_UNINITIALIZED = 0x0,
  BD_QOS_PROBE_INITIALIZED = 0x1,
  BD_QOS_PROBE_RUNNING = 0x2,
};

/* 161 */
enum bdQoSProbe::bdQoSListenerState
{
  BD_QOS_OFF = 0x0,
  BD_QOS_DISABLED = 0x1,
  BD_QOS_ENABLED = 0x2,
};

/* 162 */
enum tracerType_t
{
  TRACERTYPE_LASER = 0x0,
  TRACERTYPE_SMOKE = 0x1,
  TRACERTYPE_NUM = 0x2,
};

/* 163 */
enum D3D11_MAP
{
  D3D11_MAP_READ = 0x1,
  D3D11_MAP_WRITE = 0x2,
  D3D11_MAP_READ_WRITE = 0x3,
  D3D11_MAP_WRITE_DISCARD = 0x4,
  D3D11_MAP_WRITE_NO_OVERWRITE = 0x5,
};

/* 164 */
enum D3D11_DEVICE_CONTEXT_TYPE
{
  D3D11_DEVICE_CONTEXT_IMMEDIATE = 0x0,
  D3D11_DEVICE_CONTEXT_DEFERRED = 0x1,
};

/* 165 */
enum clc_ops_e
{
  clc_move = 0x0,
  clc_moveNoDelta = 0x1,
  clc_clientCommand = 0x2,
  clc_EOF = 0x3,
};

/* 166 */
enum bdTwitterResultType
{
  BD_TWITTER_DEFAULT_RESULT = 0x0,
  BD_TWITTER_MIXED_RESULT = 0x1,
  BD_TWITTER_RECENT_RESULT = 0x2,
  BD_TWITTER_POPULAR_RESULT = 0x3,
};

/* 167 */
enum MergeDedicatedState
{
  MERGE_DEDICATED_COMPLETE = 0x0,
  MERGE_DEDICATED_NOT_REQUESTED = 0x1,
  MERGE_DEDICATED_REQUESTED = 0x2,
  MERGE_DEDICATED_IN_PROGRESS = 0x3,
};

/* 168 */
enum weapType_t
{
  WEAPTYPE_BULLET = 0x0,
  WEAPTYPE_GRENADE = 0x1,
  WEAPTYPE_PROJECTILE = 0x2,
  WEAPTYPE_BINOCULARS = 0x3,
  WEAPTYPE_GAS = 0x4,
  WEAPTYPE_BOMB = 0x5,
  WEAPTYPE_MINE = 0x6,
  WEAPTYPE_MELEE = 0x7,
  WEAPTYPE_RIOTSHIELD = 0x8,
  WEAPTYPE_NUM = 0x9,
};

/* 169 */
enum std::_Uninitialized
{
  _Noinit = 0x0,
};

/* 170 */
enum tlThreadPriority
{
  TL_THREAD_PRIORITY_IDLE = 0xFFFFFFFE,
  TL_THREAD_PRIORITY_LOWEST = 0xFFFFFFFE,
  TL_THREAD_PRIORITY_BELOW_NORMAL = 0xFFFFFFFF,
  TL_THREAD_PRIORITY_NORMAL = 0x0,
  TL_THREAD_PRIORITY_ABOVE_NORMAL = 0x1,
  TL_THREAD_PRIORITY_HIGHEST = 0x2,
  TL_THREAD_PRIORITY_TIME_CRITICAL = 0xF,
};

/* 171 */
enum Bind_t
{
  BIND_VOID = 0x0,
  BIND_ATTACK1 = 0x1,
  BIND_ATTACK0 = 0x2,
  BIND_MELEE1 = 0x3,
  BIND_MELEE0 = 0x4,
  BIND_FRAG1 = 0x5,
  BIND_FRAG0 = 0x6,
  BIND_SMOKE1 = 0x7,
  BIND_SMOKE0 = 0x8,
  BIND_BREATH_SPRINT1 = 0x9,
  BIND_BREATH_SPRINT0 = 0xA,
  BIND_USERELOAD1 = 0xB,
  BIND_USERELOAD0 = 0xC,
  BIND_SPEED_THROW1 = 0xD,
  BIND_SPEED_THROW0 = 0xE,
  BIND_TOGGLEADS_THROW1 = 0xF,
  BIND_TOGGLEADS_THROW0 = 0x10,
  BIND_ACTIONSLOT11 = 0x11,
  BIND_ACTIONSLOT10 = 0x12,
  BIND_ACTIONSLOT21 = 0x13,
  BIND_ACTIONSLOT20 = 0x14,
  BIND_ACTIONSLOT31 = 0x15,
  BIND_ACTIONSLOT30 = 0x16,
  BIND_ACTIONSLOT41 = 0x17,
  BIND_ACTIONSLOT40 = 0x18,
  BIND_ACTIONSLOT51 = 0x19,
  BIND_ACTIONSLOT50 = 0x1A,
  BIND_ACTIONSLOT61 = 0x1B,
  BIND_ACTIONSLOT60 = 0x1C,
  BIND_ACTIONSLOT71 = 0x1D,
  BIND_ACTIONSLOT70 = 0x1E,
  BIND_STANCE1 = 0x1F,
  BIND_STANCE0 = 0x20,
  BIND_GOSTAND1 = 0x21,
  BIND_GOSTAND0 = 0x22,
  BIND_SPECNEXT1 = 0x23,
  BIND_SPECNEXT0 = 0x24,
  BIND_SPECPREV1 = 0x25,
  BIND_SPECPREV0 = 0x26,
  BIND_TOGGLESPEC1 = 0x27,
  BIND_TOGGLESPEC0 = 0x28,
  BIND_MELEE_ZOOM1 = 0x29,
  BIND_MELEE_ZOOM0 = 0x2A,
  BIND_CHANGEZOOM1 = 0x2B,
  BIND_CHANGEZOOM0 = 0x2C,
  BIND_WEAPNEXTINVENTORY1 = 0x2D,
  BIND_WEAPNEXTINVENTORY0 = 0x2E,
  BIND_GAS1 = 0x2F,
  BIND_GAS0 = 0x30,
  BIND_REVERSE1 = 0x31,
  BIND_REVERSE0 = 0x32,
  BIND_HANDBRAKE1 = 0x33,
  BIND_HANDBRAKE0 = 0x34,
  BIND_VEHICLEATTACK1 = 0x35,
  BIND_VEHICLEATTACK0 = 0x36,
  BIND_VEHICLESECONDATTACK1 = 0x37,
  BIND_VEHICLESECONDATTACK0 = 0x38,
  BIND_VEHICLEBOOST1 = 0x39,
  BIND_VEHICLEBOOST0 = 0x3A,
  BIND_VEHICLEMOVEUP1 = 0x3B,
  BIND_VEHICLEMOVEUP0 = 0x3C,
  BIND_VEHICLEMOVEDOWN1 = 0x3D,
  BIND_VEHICLEMOVEDOWN0 = 0x3E,
  BIND_VEHICLESWTICHSEAT1 = 0x3F,
  BIND_VEHICLESWTICHSEAT0 = 0x40,
  BIND_FORWARD1 = 0x41,
  BIND_FORWARD0 = 0x42,
  BIND_BACK1 = 0x43,
  BIND_BACK0 = 0x44,
  BIND_MOVELEFT1 = 0x45,
  BIND_MOVELEFT0 = 0x46,
  BIND_MOVERIGHT1 = 0x47,
  BIND_MOVERIGHT0 = 0x48,
  BIND_MOVEDOWN1 = 0x49,
  BIND_MOVEDOWN0 = 0x4A,
  BIND_LEFT1 = 0x4B,
  BIND_LEFT0 = 0x4C,
  BIND_RIGHT1 = 0x4D,
  BIND_RIGHT0 = 0x4E,
  BIND_LOOKUP1 = 0x4F,
  BIND_LOOKUP0 = 0x50,
  BIND_LOOKDOWN1 = 0x51,
  BIND_LOOKDOWN0 = 0x52,
  BIND_STRAFE1 = 0x53,
  BIND_STRAFE0 = 0x54,
  BIND_HOLDBREATH1 = 0x55,
  BIND_HOLDBREATH0 = 0x56,
  BIND_ACTIVATE1 = 0x57,
  BIND_ACTIVATE0 = 0x58,
  BIND_RELOAD1 = 0x59,
  BIND_RELOAD0 = 0x5A,
  BIND_PRONE1 = 0x5B,
  BIND_PRONE0 = 0x5C,
  BIND_MLOOK1 = 0x5D,
  BIND_MLOOK0 = 0x5E,
  BIND_SPRINT1 = 0x5F,
  BIND_SPRINT0 = 0x60,
  BIND_SCORES1 = 0x61,
  BIND_SCORES0 = 0x62,
  BIND_LEANLEFT1 = 0x63,
  BIND_LEANLEFT0 = 0x64,
  BIND_LEANRIGHT1 = 0x65,
  BIND_LEANRIGHT0 = 0x66,
  BIND_TALK1 = 0x67,
  BIND_TALK0 = 0x68,
  BIND_FIRST_NON_UP_DOWN = 0x69,
  BIND_TOGGLEMENU = 0x69,
  BIND_WEAPNEXT = 0x6A,
  BIND_PAUSE = 0x6B,
  BIND_CHATMODEPUBLIC = 0x6C,
  BIND_CHATMODETEAM = 0x6D,
  BIND_INVENTORY = 0x6E,
  BIND_WEAPPREV = 0x6F,
  BIND_CENTERVIEW = 0x70,
  BIND_TOGGLECROUCH = 0x71,
  BIND_TOGGLEPRONE = 0x72,
  BIND_GOPRONE = 0x73,
  BIND_GOCROUCH = 0x74,
  BIND_TOGGLEADS = 0x75,
  BIND_LEAVEADS = 0x76,
  BIND_VOTEYES = 0x77,
  BIND_VOTENO = 0x78,
  BIND_SCREENSHOTJPEG = 0x79,
  BIND_TOGGLESCORES = 0x7A,
  BIND_SKIP = 0x7B,
  BIND_CHOOSECLASS = 0x7C,
  BIND_ACCEPTLASTGAMEINVITE = 0x7D,
  BIND_COUNT = 0x7E,
};

/* 172 */
enum $606CFAE19BA6CAEA52E45F7689204F5C
{
  NUM_GLOBAL_MODULES = 0x64,
};

/* 173 */
enum CriticalSection
{
  CRITSECT_ALLOC_MARK = 0x0,
  CRITSECT_FX_VIS = 0x1,
  CRITSECT_OCCLUSION_QUERY = 0x2,
  CRITSECT_PHYSICS = 0x3,
  CRITSECT_PHYSICS_UPDATE = 0x4,
  CRITSECT_PHYSICS_DESTRUCTIBLE_HIT = 0x5,
  CRITSECT_FX_UNIQUE_HANDLE = 0x6,
  CRITSECT_SOUND_COMMAND_ALLOC = 0x7,
  CRITSECT_SOUND_COMMAND_PUSH = 0x8,
  CRITSECT_SOUND_NOTIFY_ALLOC = 0x9,
  CRITSECT_SOUND_NOTIFY_PUSH = 0xA,
  CRITSECT_SOUND_BANK = 0xB,
  CRITSECT_SOUND_LOOKUP_CACHE = 0xC,
  CRITSECT_CAREER_STATS = 0xD,
  CRITSECT_CONSOLE = 0xE,
  CRITSECT_DEBUG_SOCKET = 0xF,
  CRITSECT_COM_ERROR = 0x10,
  CRITSECT_STATMON = 0x11,
  CRITSECT_MEM_ALLOC0 = 0x12,
  CRITSECT_MEM_ALLOC1 = 0x13,
  CRITSECT_DEBUG_LINE = 0x14,
  CRITSECT_DEBUG_BRUSHES_AND_PATCHES = 0x15,
  CRITSECT_CLIENT_MESSAGE = 0x16,
  CRITSECT_CLIENT_CMD = 0x17,
  CRITSECT_DOBJ_ALLOC = 0x18,
  CRITSECT_XANIM_ALLOC = 0x19,
  CRITSECT_KEY_BINDINGS = 0x1A,
  CRITSECT_SERVER_MESSAGE = 0x1B,
  CRITSECT_SERVER_PLAYERINFO = 0x1C,
  CRITSECT_SCRIPT_STRING = 0x1D,
  CRITSECT_MEMORY_TREE = 0x1E,
  CRITSECT_ASSERT = 0x1F,
  CRITSECT_RD_BUFFER = 0x20,
  CRITSECT_SYS_EVENT_QUEUE = 0x21,
  CRITSECT_FATAL_ERROR = 0x22,
  CRITSECT_DXDEVICE = 0x23,
  CRITSECT_DXDEVICE_GLOB = 0x24,
  CRITSECT_DXCONTEXT = 0x25,
  CRITSECT_SCRIPT_DEBUGGER_ALLOC = 0x26,
  CRITSECT_SCRIPT_DEBUGGER = 0x27,
  CRITSECT_REMOTE = 0x28,
  CRITSECT_MISSING_ASSET = 0x29,
  CRITSECT_LIVE = 0x2A,
  CRITSECT_AUDIO_PHYSICS = 0x2B,
  CRITSECT_LUI = 0x2C,
  CRITSECT_VCS = 0x2D,
  CRITSECT_CINEMATIC = 0x2E,
  CRITSECT_CINEMATIC_TARGET_CHANGE = 0x2F,
  CRITSECT_CINEMATIC_UPDATEFRAME = 0x30,
  CRITSECT_RB_TRANSFER = 0x31,
  CRITSECT_NETTHREAD_OVERRIDE = 0x32,
  CRITSECT_DEMONWARE = 0x33,
  CRITSECT_IK = 0x34,
  CRITSECT_TL_MEMALLOC = 0x35,
  CRITSECT_VA_ALLOC = 0x36,
  CRITSECT_MEMTRACK = 0x37,
  CRITSECT_CBUF = 0x38,
  CRITSECT_CURVEALLOC = 0x39,
  CRITSECT_NETQUEUE = 0x3A,
  CRITSECT_ZLIB = 0x3B,
  CRITSECT_BLACKBOX = 0x3C,
  CRITSECT_GDT_COMMAND = 0x3D,
  CRITSECT_STRINGED_COMMAND = 0x3E,
  CRITSECT_RADIANT_SERVER_COMMAND = 0x3F,
  CRITSECT_RADIANT_CLIENT_COMMAND = 0x40,
  CRITSECT_RECORDER = 0x41,
  CRITSECT_SERVERDEMO = 0x42,
  CRITSECT_IO_SCHEDULER = 0x43,
  CRITSECT_FILE_ID_ARRAY = 0x44,
  CRITSECT_MEMFIRSTFIT = 0x45,
  CRITSECT_FXBEAM = 0x46,
  CRITSECT_GLASS_ACTIONS = 0x47,
  CRITSECT_DBHASH = 0x48,
  CRITSECT_CLUMP = 0x49,
  CRITSECT_SNAPSHOT_PROFILE = 0x4A,
  CRITSEC_WEBM_STREAM_ACCESS = 0x4B,
  CRITSEC_SV_LEADERBOARDS = 0x4C,
  CRITSECT_COUNT = 0x4D,
};

/* 174 */
enum bdDTLSAssociationStatus
{
  BD_SOCKET_IDLE = 0x0,
  BD_SOCKET_PENDING = 0x1,
  BD_SOCKET_CONNECTED = 0x2,
  BD_SOCKET_LOST = 0x3,
};

/* 175 */
enum bdDTLSAssociation::bdDTLSStatus
{
  BD_DTLS_CLOSED = 0x0,
  BD_DTLS_COOKIE_WAIT = 0x1,
  BD_DTLS_COOKIE_ECHOED = 0x2,
  BD_DTLS_ESTABLISHED = 0x3,
};

/* 176 */
enum bdDTLSError::bdDTLSErrorType
{
  BD_DTLS_ERROR_BAD_SECID = 0x0,
  BD_DTLS_INVALID_STATE = 0x1,
};

/* 177 */
enum bdKeyValuePair::bdArchiveUpdateType
{
  BD_REPLACE = 0x0,
  BD_ADD = 0x1,
  BD_MAX = 0x2,
  BD_MIN = 0x3,
  BD_AND = 0x4,
  BD_OR = 0x5,
  BD_XOR = 0x6,
  BD_SUB_SAFE = 0x7,
};

/* 178 */
enum locSel_t
{
  LOC_SEL_NONE = 0x0,
  LOC_SEL_ARTILLERY = 0x1,
  LOC_SEL_AIRSTRIKE = 0x2,
  LOC_SEL_MORTAR = 0x3,
  LOC_SEL_NAPALM = 0x4,
  LOC_SEL_COMLINK = 0x5,
};

/* 179 */
enum bdECCKey::bdECCKeyStatus
{
  BD_ECC_KEY_UNINITIALIZED = 0x0,
  BD_ECC_KEY_INITIALIZED = 0x1,
};

/* 180 */
enum tlThreadFlags
{
  TL_THREAD_JOINABLE = 0x0,
  TL_THREAD_CREATE_SUSPENDED = 0x4,
  TL_THREAD_DEFAULT_FLAGS = 0x0,
};

/* 181 */
typedef $80B40C51F983DF6470D1FE94B60AC2DA MULTICAST_MODE_TYPE;

/* 182 */
enum UILocalVarType
{
  UILOCALVAR_INT = 0x0,
  UILOCALVAR_FLOAT = 0x1,
  UILOCALVAR_STRING = 0x2,
};

/* 183 */
enum WeapOverlayInteface_t
{
  WEAPOVERLAYINTERFACE_NONE = 0x0,
  WEAPOVERLAYINTERFACE_JAVELIN = 0x1,
  WEAPOVERLAYINTERFACE_TURRETSCOPE = 0x2,
  WEAPOVERLAYINTERFACECOUNT = 0x3,
};

/* 184 */
enum D3D11_INPUT_CLASSIFICATION
{
  D3D11_INPUT_PER_VERTEX_DATA = 0x0,
  D3D11_INPUT_PER_INSTANCE_DATA = 0x1,
};

/* 185 */
enum VehicleMantlePoints
{
  MANTLE_ANGLE_FRONT = 0x0,
  MANTLE_ANGLE_BACK = 0x1,
  MANTLE_ANGLE_LEFT = 0x2,
  MANTLE_ANGLE_RIGHT = 0x3,
  MANTLE_ANGLE_MAX = 0x4,
};

/* 186 */
enum weapFireType_t
{
  WEAPON_FIRETYPE_FULLAUTO = 0x0,
  WEAPON_FIRETYPE_SINGLESHOT = 0x1,
  WEAPON_FIRETYPE_BURSTFIRE2 = 0x2,
  WEAPON_FIRETYPE_BURSTFIRE3 = 0x3,
  WEAPON_FIRETYPE_BURSTFIRE4 = 0x4,
  WEAPON_FIRETYPE_BURSTFIRE5 = 0x5,
  WEAPON_FIRETYPE_STACKED = 0x6,
  WEAPON_FIRETYPE_MINIGUN = 0x7,
  WEAPON_FIRETYPE_CHARGESHOT = 0x8,
  WEAPON_FIRETYPE_JETGUN = 0x9,
  WEAPON_FIRETYPECOUNT = 0xA,
};

/* 187 */
enum ffa_team_t
{
  TEAM_FFA_NONE = 0x0,
  TEAM_FFA_AXIS = 0x1,
  TEAM_FFA_ALLIES = 0x2,
  TEAM_FFA_THREE = 0x3,
};

/* 188 */
enum bdUPnP::bdUPnPState
{
  BD_UPNP_UNINITIALISED = 0x0,
  BD_UPNP_INITIALISED = 0x1,
  BD_UPNP_DISCOVERING_DEVICES = 0x2,
  BD_UPNP_DISCOVERED_DEVICE = 0x3,
  BD_UPNP_CONFIGURING_DEVICE = 0x4,
  BD_UPNP_SHUTTING_DOWN = 0x5,
  BD_UPNP_FINISHED = 0x6,
  BD_UPNP_FAILED = 0x7,
};

/* 189 */
enum bdUPnPDevice::bdUPnPDeviceShutdownType
{
  BD_UPNP_DEVICE_SHUTDOWN_ELEGANT = 0x0,
  BD_UPNP_DEVICE_SHUTDOWN_IMMEDIATE = 0x1,
};

/* 190 */
enum bdUPnPDevice::bdUPnPPortStatus
{
  BD_UPNP_PORT_STATUS_UNKNOWN = 0x0,
  BD_UPNP_PORT_COLLISION_FOUND = 0x1,
  BD_UPNP_PORT_NOT_MAPPED = 0x2,
  BD_UPNP_PORT_MAPPED = 0x3,
};

/* 191 */
enum connstate_t
{
  CA_DISCONNECTED = 0x0,
  CA_CINEMATIC = 0x1,
  CA_UICINEMATIC = 0x2,
  CA_LOGO = 0x3,
  CA_CONNECTING = 0x4,
  CA_CHALLENGING = 0x5,
  CA_CONNECTED = 0x6,
  CA_SENDINGSTATS = 0x7,
  CA_LOADING = 0x8,
  CA_PRIMED = 0x9,
  CA_ACTIVE = 0xA,
};

/* 192 */
enum bdRemoteTask::bdStatus
{
  BD_EMPTY = 0x0,
  BD_PENDING = 0x1,
  BD_DONE = 0x2,
  BD_FAILED = 0x3,
  BD_TIMED_OUT = 0x4,
  BD_CANCELLED = 0x5,
  BD_MAX_STATUS = 0x6,
};

/* 193 */
enum bdNetImpl::bdNetStatus
{
  BD_NET_PARAMS_CONFIG_ERROR = 0xFFFFFFFC,
  BD_NET_BIND_FAILED = 0xFFFFFFFD,
  BD_NET_ONLINE_FAILED = 0xFFFFFFFE,
  BD_NET_INIT_FAILED = 0xFFFFFFFF,
  BD_NET_STOPPED = 0x0,
  BD_NET_PENDING = 0x1,
  BD_NET_DONE = 0x2,
};

/* 194 */
enum bdAddrHandle::bdAddrHandleStatus
{
  BD_ADDR_NOT_CONSTRUCTED = 0x0,
  BD_ADDR_NOT_RESOLVED = 0x1,
  BD_ADDR_ERROR = 0x2,
  BD_ADDR_RESOLVED = 0x3,
  BD_ADDR_UNRESOLVED = 0x4,
};

/* 195 */
enum $CE4BA2DAF647F61DB807591D9F104AD4
{
  CellWidth = 0x40,
};

/* 196 */
enum $B8D7E67B97FF9225146591E0B626DDB3
{
  MaxBlocks = 0x400,
};

/* 197 */
enum WeapStickinessType
{
  WEAPSTICKINESS_NONE = 0x0,
  WEAPSTICKINESS_ALL = 0x1,
  WEAPSTICKINESS_ALL_NO_SENTIENTS = 0x2,
  WEAPSTICKINESS_GROUND = 0x3,
  WEAPSTICKINESS_GROUND_WITH_YAW = 0x4,
  WEAPSTICKINESS_FLESH = 0x5,
  WEAPSTICKINESS_COUNT = 0x6,
};

/* 198 */
enum weapClass_t
{
  WEAPCLASS_RIFLE = 0x0,
  WEAPCLASS_MG = 0x1,
  WEAPCLASS_SMG = 0x2,
  WEAPCLASS_SPREAD = 0x3,
  WEAPCLASS_PISTOL = 0x4,
  WEAPCLASS_GRENADE = 0x5,
  WEAPCLASS_ROCKETLAUNCHER = 0x6,
  WEAPCLASS_TURRET = 0x7,
  WEAPCLASS_NON_PLAYER = 0x8,
  WEAPCLASS_GAS = 0x9,
  WEAPCLASS_ITEM = 0xA,
  WEAPCLASS_MELEE = 0xB,
  WEAPCLASS_KILLSTREAK_ALT_STORED_WEAPON = 0xC,
  WEAPCLASS_PISTOL_SPREAD = 0xD,
  WEAPCLASS_NUM = 0xE,
};

/* 199 */
enum EVehicleRotors
{
  VEHROT_MAIN = 0x0,
  VEHROT_TAIL = 0x1,
  VEHROT_QUAD_FL = 0x0,
  VEHROT_QUAD_FR = 0x1,
  VEHROT_QUAD_RL = 0x2,
  VEHROT_QUAD_RR = 0x3,
  VEHROT_MAX = 0x4,
};

/* 200 */
enum PartyLeagueState
{
  LEAGUE_WAITING_FOR_STATS = 0x0,
  LEAGUE_FORMING_TEAMS = 0x1,
  LEAGUE_CANNOT_FORM_TEAMS = 0x2,
  LEAGUE_SENDING_OUTCOMES = 0x3,
  LEAGUE_READY_TO_GO = 0x4,
};

/* 201 */
enum D3D10_MESSAGE_SEVERITY
{
  D3D10_MESSAGE_SEVERITY_CORRUPTION = 0x0,
  D3D10_MESSAGE_SEVERITY_ERROR = 0x1,
  D3D10_MESSAGE_SEVERITY_WARNING = 0x2,
  D3D10_MESSAGE_SEVERITY_INFO = 0x3,
};

/* 202 */
enum TraceHitType
{
  TRACE_HITTYPE_NONE = 0x0,
  TRACE_HITTYPE_ENTITY = 0x1,
  TRACE_HITTYPE_DYNENT_MODEL = 0x2,
  TRACE_HITTYPE_DYNENT_BRUSH = 0x3,
  TRACE_HITTYPE_GLASS = 0x4,
};

/* 203 */
enum bdFileMetaData::bdVisibility
{
  BD_VISIBLE_PUBLIC = 0x0,
  BD_VISIBLE_PRIVATE = 0x1,
  BD_MAX_VISIBILITY_TYPE = 0x2,
};

/* 204 */
enum bdUPnPConfig::bdUPnPRunMode
{
  BD_UPNP_DO_PORT_MAPPING = 0x0,
  BD_UPNP_EXTERNAL_IP_ONLY = 0x1,
};

/* 205 */
enum weapOverlayReticle_t
{
  WEAPOVERLAYRETICLE_NONE = 0x0,
  WEAPOVERLAYRETICLE_CROSSHAIR = 0x1,
  WEAPOVERLAYRETICLE_NUM = 0x2,
};

/* 206 */
enum OffhandSlot
{
  OFFHAND_SLOT_NONE = 0x0,
  OFFHAND_SLOT_LETHAL_GRENADE = 0x1,
  OFFHAND_SLOT_TACTICAL_GRENADE = 0x2,
  OFFHAND_SLOT_EQUIPMENT = 0x3,
  OFFHAND_SLOT_SPECIFIC_USE = 0x4,
  OFFHAND_SLOT_COUNT = 0x5,
};

/* 207 */
typedef bdLobbyErrorCode bdLobbyConnection::Status;

/* 208 */
enum bdNATTravClient::bdNATTravClientStatus
{
  BD_NAT_TRAV_UNINITIALIZED = 0x0,
  BD_NAT_TRAV_INITIALIZED = 0x1,
  BD_NAT_TRAV_RUNNING = 0x2,
};

/* 209 */
enum Dtp_SurfaceType
{
  DTP_SURF_TYPE_DEFAULT = 0x0,
  DTP_SURF_TYPE_METAL = 0x1,
  DTP_SURF_TYPE_CONCRETE = 0x2,
  DTP_SURF_TYPE_WOOD = 0x3,
  DTP_SURF_TYPE_SNOW = 0x4,
  DTP_SURF_TYPE_DIRT = 0x5,
  DTP_SURF_TYPE_GRAVEL = 0x6,
  DTP_SURF_TYPE_GRASS = 0x7,
  DTP_SURF_TYPE_MUD = 0x8,
  DTP_SURF_TYPE_COUNT = 0x9,
};

/* 210 */
enum weaponIconRatioType_t
{
  WEAPON_ICON_RATIO_1TO1 = 0x0,
  WEAPON_ICON_RATIO_2TO1 = 0x1,
  WEAPON_ICON_RATIO_4TO1 = 0x2,
  WEAPON_ICON_RATIO_COUNT = 0x3,
};

/* 211 */
enum WeaponDobjInfo::Slot
{
  HELD = 0x0,
  STOWED = 0x1,
  MELEE = 0x2,
};

/* 212 */
enum VehicleDriveBySoundType
{
  VEH_DRIVE_BY_PRIMARY = 0x0,
  VEH_DRIVE_BY_SECONDARY = 0x1,
  NUM_VEH_DRIVE_BY_TYPES = 0x2,
};

/* 213 */
enum ddlReturnCodes_e
{
  DDL_RC_SUCCESS = 0x0,
  DDL_RC_ERROR = 0xFFFFFFFF,
  DDL_RC_BUFFER_IO_ERROR = 0xFFFFFFFE,
  DDL_RC_STATE_INVALID = 0xFFFFFFFD,
  DDL_RC_MEMBER_NULL = 0xFFFFFFFC,
  DDL_RC_MEMBER_INVALID = 0xFFFFFFFB,
  DDL_RC_OFFSET_INVALID = 0xFFFFFFFA,
  DDL_RC_TRUNCATED = 0xFFFFFFF9,
};

/* 214 */
enum weapClipType_t
{
  WEAPON_CLIPTYPE_BOTTOM = 0x0,
  WEAPON_CLIPTYPE_TOP = 0x1,
  WEAPON_CLIPTYPE_LEFT = 0x2,
  WEAPON_CLIPTYPE_DP28 = 0x3,
  WEAPON_CLIPTYPE_PTRS = 0x4,
  WEAPON_CLIPTYPE_LMG = 0x5,
  WEAPON_CLIPTYPECOUNT = 0x6,
};

/* 215 */
enum HELICOPTER_STAGES
{
  HELICOPTER_ONFIRE = 0x0,
  HELICOPTER_HEAVYSMOKE = 0x1,
  HELICOPTER_SMOKING = 0x2,
  HELICOPTER_FULLHEALTH = 0x3,
  NUM_HELICOPTERSTAGES = 0x4,
};

/* 216 */
enum VehicleSound
{
  VEH_TURRET_SPIN_SND = 0x0,
  VEH_TURRET_STOP_SND = 0x1,
  NUM_VEHICLE_SNDS = 0x2,
};

/* 217 */
enum ComDevhostSystem
{
  COM_DEVHOST_SYSTEM_DEVHOST = 0x0,
  COM_DEVHOST_SYSTEM_CONSOLE = 0x1,
  COM_DEVHOST_SYSTEM_DVAR = 0x2,
  COM_DEVHOST_SYSTEM_SOUND = 0x3,
  COM_DEVHOST_SYSTEM_SOUND_COMMAND = 0x4,
  COM_DEVHOST_SYSTEM_FX = 0x5,
  COM_DEVHOST_SYSTEM_XANIM_SERVER = 0x6,
  COM_DEVHOST_SYSTEM_XANIM_NETWORK = 0x7,
  COM_DEVHOST_SYSTEM_XANIM_CLIENT = 0x8,
  COM_DEVHOST_SYSTEM_AI_GENERAL = 0x9,
  COM_DEVHOST_SYSTEM_AI_ENT_INFO = 0xA,
  COM_DEVHOST_SYSTEM_AI_ANIM_SCRIPT = 0xB,
  COM_DEVHOST_SYSTEM_AI_CODE_STATE = 0xC,
  COM_DEVHOST_SYSTEM_COUNT = 0xD,
  COM_DEVHOST_SYSTEM_INVALID = 0xFFFFFFFF,
};

/* 218 */
enum $48D6FFC28A4FF14B011914B43D4C4CEC
{
  BITS_PER_WORD = 0x20,
  WORD_COUNT = 0x2,
};

/* 219 */
enum netsrc_t
{
  NS_NULL = 0xFFFFFFFF,
  NS_CLIENT1 = 0x0,
  NS_CLIENT2 = 0x1,
  NS_CLIENT3 = 0x2,
  NS_CLIENT4 = 0x3,
  NS_SERVER = 0x4,
  NS_MAXCLIENTS = 0x4,
  NS_PACKET = 0x5,
};

/* 220 */
enum bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest
{
  BD_NTDP_SAME_ADDR = 0x0,
  BD_NTDP_DIFF_PORT = 0x1,
  BD_NTDP_DIFF_IP = 0x2,
  BD_NTDP_DIFF_PORT_IP = 0x3,
  BD_NTDP_INVALID_TYPE = 0x4,
};

/* 221 */
enum bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState
{
  BD_NTDCS_UNINITIALIZED = 0x0,
  BD_NTDCS_RUN_TEST_1 = 0x1,
  BD_NTDCS_RUN_TEST_2 = 0x2,
  BD_NTDCS_RUN_TEST_3 = 0x3,
  BD_NTDCS_FINI = 0x4,
  BD_NTDCS_ERROR = 0x5,
};

/* 222 */
enum bdLobbyConnection::RecvState
{
  BD_READ_INIT = 0x0,
  BD_READ_SIZE = 0x1,
  BD_READ_ENCRYPT = 0x2,
  BD_READ_MESSAGE = 0x3,
  BD_READ_COMPLETE = 0x4,
};

/* 223 */
enum WeapRotateType
{
  WEAPROTATE_GRENADE_ROTATE = 0x0,
  WEAPROTATE_BLADE_ROTATE = 0x1,
  WEAPROTATE_CYLINDER_ROTATE = 0x2,
  WEAPROTATE_COUNT = 0x3,
};

/* 224 */
enum bdPriority
{
  BD_PRIORITY_VERY_LOW = 0x0,
  BD_PRIORITY_LOW = 0x1,
  BD_PRIORITY_NORMAL = 0x2,
  BD_PRIORITY_HIGH = 0x3,
  BD_PRIORITY_VERY_HIGH = 0x4,
  BD_NUM_PRIORITIES = 0x5,
};

/* 225 */
enum bdSocketStatusCode
{
  BD_NET_SUCCESS = 0x1,
  BD_NET_CONNECTION_CLOSED = 0x0,
  BD_NET_ERROR = 0xFFFFFFFF,
  BD_NET_WOULD_BLOCK = 0xFFFFFFFE,
  BD_NET_SUBSYTEM_ERROR = 0xFFFFFFFD,
  BD_NET_ADDRESS_IN_USE = 0xFFFFFFFC,
  BD_NET_CONNECTION_RESET = 0xFFFFFFFB,
  BD_NET_MSG_SIZE = 0xFFFFFFFA,
  BD_NET_ADDRESS_INVALID = 0xFFFFFFF9,
  BD_NET_BLOCKING_CALL_CANCELED = 0xFFFFFFF8,
  BD_NET_NOT_BOUND = 0xFFFFFFF7,
  BD_NET_INVALID_HANDLE = 0xFFFFFFF6,
  BD_NET_NOT_CONNECTED = 0xFFFFFFF5,
  BD_NET_CONNECTION_REFUSED = 0xFFFFFFF4,
  BD_NET_HOST_UNREACH = 0xFFFFFFF3,
};

/* 226 */
enum D3D_FEATURE_LEVEL
{
  D3D_FEATURE_LEVEL_9_1 = 0x9100,
  D3D_FEATURE_LEVEL_9_2 = 0x9200,
  D3D_FEATURE_LEVEL_9_3 = 0x9300,
  D3D_FEATURE_LEVEL_10_0 = 0xA000,
  D3D_FEATURE_LEVEL_10_1 = 0xA100,
  D3D_FEATURE_LEVEL_11_0 = 0xB000,
};

/* 227 */
enum weapStance_t
{
  WEAPSTANCE_STAND = 0x0,
  WEAPSTANCE_DUCK = 0x1,
  WEAPSTANCE_PRONE = 0x2,
  WEAPSTANCE_NUM = 0x3,
};

/* 228 */
enum StanceState
{
  CL_STANCE_STAND = 0x0,
  CL_STANCE_CROUCH = 0x1,
  CL_STANCE_PRONE = 0x2,
  CL_STANCE_DIVE_TO_PRONE = 0x3,
};

/* 229 */
enum PenetrateType
{
  PENETRATE_TYPE_NONE = 0x0,
  PENETRATE_TYPE_SMALL = 0x1,
  PENETRATE_TYPE_MEDIUM = 0x2,
  PENETRATE_TYPE_LARGE = 0x3,
  PENETRATE_TYPE_COUNT = 0x4,
};

/* 230 */
enum bdConnectionStore::bdConnectionStoreStatus
{
  BD_CONNECTION_STORE_UNINITIALIZED = 0x0,
  BD_CONNECTION_STORE_INITIALIZED = 0x1,
  BD_CONNECTION_STORE_SHUTTING_DOWN = 0x2,
  BD_CONNECTION_STORE_ERROR = 0x3,
};

/* 231 */
enum bdConnectionStore::bdConnectionStoreShutdownType
{
  BD_CONNECTION_STORE_SHUTDOWN_ELEGANT = 0x0,
  BD_CONNECTION_STORE_SHUTDOWN_IMMEDIATE = 0x1,
};

/* 232 */
enum bdKeyArchive::bdReservedCategory
{
  USERS = 0x0,
  TEAMS = 0x1,
};

/* 233 */
enum bdDTLSPacketTypes
{
  BD_DTLS_INIT = 0x1,
  BD_DTLS_INIT_ACK = 0x2,
  BD_DTLS_COOKIE_ECHO = 0x3,
  BD_DTLS_COOKIE_ACK = 0x4,
  BD_DTLS_ERROR = 0x5,
  BD_DTLS_DATA = 0x6,
};

/* 234 */
enum serverState_t
{
  SS_DEAD = 0x0,
  SS_LOADING = 0x1,
  SS_GAME = 0x2,
};

/* 235 */
enum clientMigState_t
{
  CMSTATE_INACTIVE = 0x0,
  CMSTATE_OLDHOSTLEAVING = 0x1,
  CMSTATE_LIMBO = 0x2,
  CMSTATE_NEWHOSTCONNECT = 0x3,
  CMSTATE_COUNT = 0x4,
};

/* 236 */
enum bdRSAKey::bdRSAKeyStatus
{
  BD_RSA_KEY_UNINITIALIZED = 0x0,
  BD_RSA_KEY_INITIALIZED = 0x1,
};

/* 237 */
enum D3D11_BIND_FLAG
{
  D3D11_BIND_VERTEX_BUFFER = 0x1,
  D3D11_BIND_INDEX_BUFFER = 0x2,
  D3D11_BIND_CONSTANT_BUFFER = 0x4,
  D3D11_BIND_SHADER_RESOURCE = 0x8,
  D3D11_BIND_STREAM_OUTPUT = 0x10,
  D3D11_BIND_RENDER_TARGET = 0x20,
  D3D11_BIND_DEPTH_STENCIL = 0x40,
  D3D11_BIND_UNORDERED_ACCESS = 0x80,
};

/* 238 */
enum bdSocketRouter::bdSocketRouterStatus
{
  BD_SOCKET_ROUTER_UNINITIALIZED = 0x0,
  BD_SOCKET_ROUTER_INITIALIZED = 0x1,
  BD_SOCKET_ROUTER_ERROR = 0x2,
};

/* 239 */
enum LeagueDataState
{
  LEAGUE_DATA_REQUESTING_BASE = 0x0,
  LEAGUE_DATA_BASE_RECEIVED = 0x1,
  LEAGUE_DATA_SENDING_OUTCOMES = 0x2,
  LEAGUE_DATA_OUTCOMES_ACKED = 0x3,
};

/* 240 */
typedef MACRO_PENDING bdTencentAASRecord::bdRecordStatus;

/* 241 */
enum netadrtype_t
{
  NA_BOT = 0x0,
  NA_BAD = 0x1,
  NA_LOOPBACK = 0x2,
  NA_BROADCAST = 0x3,
  NA_IP = 0x4,
};

/* 242 */
enum MissileStage
{
  MISSILESTAGE_SOFTLAUNCH = 0x0,
  MISSILESTAGE_ASCENT = 0x1,
  MISSILESTAGE_DESCENT = 0x2,
};

/* 243 */
enum MissileFlightMode
{
  MISSILEFLIGHTMODE_TOP = 0x0,
  MISSILEFLIGHTMODE_DIRECT = 0x1,
};

/* 244 */
typedef bdFileMetaData::bdVisibility bdFileInfo::bdVisibility;

/* 245 */
enum VehicleEntryPoints
{
  VEH_ENTRY_LEFT = 0x0,
  VEH_ENTRY_RIGHT = 0x1,
  VEH_ENTRY_REAR = 0x2,
  VEH_ENTRY_GUNNER3 = 0x3,
  VEH_ENTRY_GUNNER4 = 0x4,
  NUM_VEHICLE_ENTRY_POINTS = 0x5,
};

/* 246 */
typedef bdRemoteTask::bdStatus bdHTTPWrapperBase::bdStatus;

/* 247 */
enum bdSequenceNumberStore::bdSequenuceStatus
{
  BD_SN_INVALID_SMALLER = 0xFFFFFFFE,
  BD_SN_VALID_SMALLER = 0xFFFFFFFF,
  BD_SN_INVALID_DUPLICATE = 0x0,
  BD_SN_VALID_LARGER = 0x1,
  BD_SN_VALID_MUCH_LARGER = 0x2,
};

/* 248 */
enum D3D11_RESOURCE_DIMENSION
{
  D3D11_RESOURCE_DIMENSION_UNKNOWN = 0x0,
  D3D11_RESOURCE_DIMENSION_BUFFER = 0x1,
  D3D11_RESOURCE_DIMENSION_TEXTURE1D = 0x2,
  D3D11_RESOURCE_DIMENSION_TEXTURE2D = 0x3,
  D3D11_RESOURCE_DIMENSION_TEXTURE3D = 0x4,
};

/* 249 */
enum bdStats::bdWriteType
{
  STAT_WRITE_REPLACE = 0x0,
  STAT_WRITE_ADD = 0x1,
  STAT_WRITE_MAX = 0x2,
  STAT_WRITE_MIN = 0x3,
  STAT_WRITE_REPLACE_WHEN_RATING_INCREASE = 0x4,
  STAT_WRITE_ADD_WHEN_RATING_INCREASE = 0x5,
  STAT_WRITE_MAX_WHEN_RATING_INCREASE = 0x6,
  STAT_WRITE_MIN_WHEN_RATING_INCREASE = 0x7,
};

/* 250 */
enum bdContentStreamingBase::bdStatus
{
  READY = 0x0,
  PRE_HTTP_OPERATION = 0x1,
  HTTP_OPERATION = 0x2,
  POST_HTTP_OPERATION = 0x3,
  DONE = 0x4,
  FAILED = 0x5,
};

/* 251 */
enum bdUPnPDevice::bdUPnPDeviceState
{
  BD_UPNP_DEVICE_UNINITIALISED = 0x0,
  BD_UPNP_DEVICE_INITIALISED = 0x1,
  BD_UPNP_DEVICE_SENDING_DESCRIPTION_REQ = 0x2,
  BD_UPNP_DEVICE_GETTING_DESCRIPTION = 0x3,
  BD_UPNP_DEVICE_GOT_DESCRIPTION = 0x4,
  BD_UPNP_DEVICE_SENDING_IP_REQ = 0x5,
  BD_UPNP_DEVICE_DISCOVERING_IP = 0x6,
  BD_UPNP_DEVICE_DISCOVERED_IP = 0x7,
  BD_UPNP_DEVICE_SENDING_PORT_QUERY_REQ = 0x8,
  BD_UPNP_DEVICE_DISCOVERING_PORT_MAPPING = 0x9,
  BD_UPNP_DEVICE_DISCOVERED_PORT_MAPPING = 0xA,
  BD_UPNP_DEVICE_SENDING_MAPPING_REQ = 0xB,
  BD_UPNP_DEVICE_MAPPING_PORT = 0xC,
  BD_UPNP_DEVICE_MAPPED_PORT = 0xD,
  BD_UPNP_DEVICE_SENDING_UNMAPPING_REQ = 0xE,
  BD_UPNP_DEVICE_UNMAPPING_PORT = 0xF,
  BD_UPNP_DEVICE_UNMAPPED_PORT = 0x10,
  BD_UPNP_DEVICE_SHUTTING_DOWN = 0x11,
  BD_UPNP_DEVICE_FINISHED = 0x12,
  BD_UPNP_DEVICE_FAILED = 0x13,
};

/* 252 */
enum bdHTTPWrapperBase::bdOperation
{
  BD_IDLE = 0x0,
  BD_UPLOAD = 0x1,
  BD_DOWNLOAD = 0x2,
  BD_DELETE = 0x3,
  BD_COPY = 0x4,
};

/* 253 */
enum bdIPDiscoveryClient::bdIPDiscoveryClientStatus
{
  BD_IP_DISC_UNINITIALIZED = 0x0,
  BD_IP_DISC_RUNNING = 0x1,
  BD_IP_DISC_SUCCESS = 0x2,
  BD_IP_DISC_FAIL = 0x3,
  BD_IP_DISC_ERROR = 0x4,
};

/* 254 */
enum PerLocalClientAllocFlags
{
  CLIENT_ALLOC_FLAG_CLIENT = 0x0,
  CLIENT_ALLOC_FLAG_SERVER = 0x1,
  CLIENT_ALLOC_FLAG_WORST_CASE = 0x2,
  CLIENT_ALLOC_FLAG_DRY_RUN = 0x4,
  CLIENT_ALLOC_FLAG_FULL = 0x3,
};

/* 255 */
enum GamePadStick
{
  GPAD_INVALID = 0x0,
  GPAD_LX = 0x40000000,
  GPAD_LY = 0x40000001,
  GPAD_RX = 0x40000002,
  GPAD_RY = 0x40000003,
};

/* 256 */
enum QueryId
{
  ENUM_SEARCH_SESSIONS_INVALID = 0x0,
  ENUM_SEARCH_SESSIONS_BY_PLAYLIST_VERSION = 0x1,
  ENUM_SEARCH_SESSIONS = 0x2,
  ENUM_SEARCH_SESSION_BY_GAME_SECURITY_ID = 0x3,
};

/* 257 */
enum ai_stance_e
{
  STANCE_BAD = 0x0,
  STANCE_STAND = 0x1,
  STANCE_CROUCH = 0x2,
  STANCE_PRONE = 0x4,
  STANCE_ANY = 0x7,
};

/* 258 */
enum nearestNodeHeightCheck
{
  NEAREST_NODE_DO_HEIGHT_CHECK = 0x0,
  NEAREST_NODE_DONT_DO_HEIGHT_CHECK = 0x1,
};

/* 259 */
enum hudelem_update_t
{
  HUDELEM_UPDATE_ARCHIVAL = 0x1,
  HUDELEM_UPDATE_CURRENT = 0x2,
  HUDELEM_UPDATE_ARCHIVAL_AND_CURRENT = 0x3,
};

/* 260 */
enum $BAFD794FCB417DE5E48789F94EE84EE7
{
  GJK_BASE = 0x0,
  GJK_AABB = 0x1,
  GJK_BRUSH = 0x2,
  GJK_PARTITION = 0x3,
  GJK_DOUBLE_SPHERE = 0x4,
  GJK_CYLINDER = 0x5,
  GJK_OBB = 0x6,
  GJK_POLYGON_CYLINDER = 0x7,
};

/* 261 */
enum hintType_t
{
  HINT_NONE = 0x0,
  HINT_NOICON = 0x1,
  HINT_SEAT = 0x2,
  HINT_ACTIVATE = 0x3,
  HINT_HEALTH = 0x4,
  HINT_SPECTATOR = 0x5,
  HINT_TEAMPOT = 0x6,
  HINT_WEAPON = 0x7,
  HINT_NUM_HINTS = 0x8,
};

/* 262 */
enum DynEntityCollType
{
  DYNENT_COLL_CLIENT_FIRST = 0x0,
  DYNENT_COLL_CLIENT_MODEL = 0x0,
  DYNENT_COLL_CLIENT_BRUSH = 0x1,
  DYNENT_COLL_SERVER_FIRST = 0x2,
  DYNENT_COLL_SERVER_MODEL = 0x2,
  DYNENT_COLL_SERVER_BRUSH = 0x3,
  DYNENT_COLL_COUNT = 0x4,
};

/* 263 */
enum cgDrawTalkEnum
{
  CG_TALKER_NONE = 0x0,
  CG_TALKER_ALL = 0x1,
  CG_TALKER_FRIENDLY = 0x2,
  CG_TALKER_ENEMY = 0x3,
  CG_TALKER_COUNT = 0x4,
};

/* 264 */
enum $E351CD4544A7DEDBDC4A12661E1431AE
{
  NUM_MOVER_RECORDS = 0x20,
};

/* 265 */
enum $9F542375BBDEAA431522D680B21CEDC0
{
  HUD_OBJ_SAME = 0x0,
  HUD_OBJ_NUM = 0x1,
};

/* 266 */
enum $EB4C04F82FF422DBE0B009674EBABB1E
{
  FRIEND_ICON = 0x0,
  FRIEND_CHAT_ICON = 0x1,
  FRIEND_REVIVE_ICON = 0x2,
  FRIEND_ICON_NUM = 0x3,
};

/* 267 */
enum profile_setting
{
  PROFILE_SETTING_INVALID = 0xFFFFFFFF,
  PROFILE_QUICK_LAUNCH_MODE = 0x0,
  PROFILE_GPAD_RUMBLE = 0x1,
  PROFILE_SESSION_REJOIN = 0x2,
  PROFILE_INVERT_PITCH = 0x3,
  PROFILE_VIEW_SENSITIVITY = 0x4,
  PROFILE_AUTO_AIM = 0x5,
  PROFILE_TEAM_INDICATOR = 0x6,
  PROFILE_UI_CAMO_UNLOCKS = 0x7,
  PROFILE_UI_ATTACH_UNLOCKS = 0x8,
  PROFILE_MATURE_CONTENT = 0x9,
  PROFILE_SHOW_BLOOD = 0xA,
  PROFILE_GPAD_BUTTONS_CONFIG = 0xB,
  PROFILE_GPAD_STICKS_CONFIG = 0xC,
  PROFILE_GPAD_BUTTON_L_STICK_DEFLECT = 0xD,
  PROFILE_GPAD_BUTTON_R_STICK_DEFLECT = 0xE,
  PROFILE_GAMMA = 0xF,
  PROFILE_SND_MENU_VOICE = 0x10,
  PROFILE_SND_MENU_MUSIC = 0x11,
  PROFILE_SND_MENU_SFX = 0x12,
  PROFILE_SND_MENU_MASTER = 0x13,
  PROFILE_SND_MENU_CINEMATIC = 0x14,
  PROFILE_SND_MENU_HEARING_IMPAIRED = 0x15,
  PROFILE_SND_MENU_PRESETS = 0x16,
  PROFILE_SND_MENU_SPEAKER_SETUP = 0x17,
  PROFILE_SPEAKER_LEFT_FRONT = 0x18,
  PROFILE_SPEAKER_LEFT = 0x19,
  PROFILE_SPEAKER_CENTER = 0x1A,
  PROFILE_SPEAKER_RIGHT_FRONT = 0x1B,
  PROFILE_SPEAKER_RIGHT = 0x1C,
  PROFILE_SPEAKER_LEFT_SURROUND = 0x1D,
  PROFILE_SPEAKER_LEFT_SURROUND_BACK = 0x1E,
  PROFILE_SPEAKER_RIGHT_SURROUND = 0x1F,
  PROFILE_SPEAKER_RIGHT_SURROUND_BACK = 0x20,
  PROFILE_SPEAKER_LFE = 0x21,
  PROFILE_PARTY_PRIVACY_STATUS = 0x22,
  PROFILE_GEOGRAPHICAL_MATCHMAKING = 0x23,
  PROFILE_SAFE_AREA_HORIZONTAL = 0x24,
  PROFILE_SAFE_AREA_VERTICAL = 0x25,
  PROFILE_DEMO_CONTROLLER_CONFIG = 0x26,
  PROFILE_DRAW_CROSSHAIR_3D = 0x27,
  PROFILE_START_IN_3D = 0x28,
  PROFILE_MOUSE_SENSITIVITY = 0x29,
  PROFILE_ANISO_MIN = 0x2A,
  PROFILE_FLIPPED_CONTROL_CONFIG = 0x2B,
  PROFILE_COMMON_INITIALIZED = 0x2C,
  PROFILE_SND_SHOUTCAST_VOIP = 0x2D,
  PROFILE_SND_SHOUTCAST_GAME = 0x2E,
  PROFILE_COLOR_BLIND_ASSIST = 0x2F,
  PROFILE_INVITE_XUID_DECIMAL = 0x30,
  PROFILE_SND_VOICECHAT_VOLUME = 0x31,
  PROFILE_SND_VOICECHAT_RECORD_LEVEL = 0x32,
  PROFILE_VER43_DEFAULTS = 0x33,
  PROFILE_EXE_SETTINGS_START = 0x34,
  PROFILE_FIRST_TIME = 0x34,
  PROFILE_CHEAT_COUNT = 0x35,
  PROFILE_EMAIL_ADDRESS = 0x36,
  PROFILE_SHOW_SUBTITLES = 0x37,
  PROFILE_LAST_SAVE_GAME = 0x38,
  PROFILE_GAMESKILL = 0x39,
  PROFILE_MISSION_HIGHEST_DIFFICULTY = 0x3A,
  PROFILE_MISSION = 0x3B,
  PROFILE_TAKE_COVER_WARNINGS = 0x3C,
  PROFILE_COLLECTIBLES = 0x3D,
  PROFILE_SKILL_SET = 0x3E,
  PROFILE_MISSION_GLOBALS = 0x3F,
  PROFILE_TARGET_ASSIST = 0x40,
  PROFILE_SPECTATE_THIRD_PERSON = 0x41,
  PROFILE_MOTD = 0x42,
  PROFILE_PLAYLIST_LEAGUEMATCH = 0x43,
  PROFILE_PLAYLIST_WAGERMATCH = 0x44,
  PROFILE_PLAYLIST_PLAYERMATCH = 0x45,
  PROFILE_PLAYLIST_SOLOMATCH = 0x46,
  PROFILE_CLASS_LOADOUTS = 0x47,
  PROFILE_SELECTED_CLASS_LOADOUT_SYSTEMLINK = 0x48,
  PROFILE_SELECTED_CLASS_LOADOUT_ONLINE = 0x49,
  PROFILE_SELECTED_CLASS_LOADOUT_LEAGUE = 0x4A,
  PROFILE_EXE_INITIALIZED = 0x4B,
  PROFILE_LOADOUT_INITIALIZED = 0x4C,
  PROFILE_PARTY_MAX_PLAYERS = 0x4D,
  PROFILE_MAP = 0x4E,
  PROFILE_GAMETYPE = 0x4F,
  PROFILE_MAP_ZM = 0x50,
  PROFILE_GAMETYPE_ZM = 0x51,
  PROFILE_UNLOCK_CRUMBS_ZM = 0x52,
  PROFILE_EMBLEM = 0x53,
  PROFILE_FIRST_TIME_MISSION_SELECT = 0x54,
  PROFILE_SHOUTCASTER_SCORE_PANEL = 0x55,
  PROFILE_SHOUTCASTER_NAME_PLATE = 0x56,
  PROFILE_SHOUTCASTER_PERKS = 0x57,
  PROFILE_SHOUTCASTER_INVENTORY = 0x58,
  PROFILE_SHOUTCASTER_SCORESTREAKS = 0x59,
  PROFILE_SHOUTCASTER_SCORESTREAKS_NOTIFICATION = 0x5A,
  PROFILE_SHOUTCASTER_MINIMAP = 0x5B,
  PROFILE_SHOUTCASTER_KILLFEED = 0x5C,
  PROFILE_SHOUTCASTER_CALLOUTCARDS = 0x5D,
  PROFILE_SHOUTCASTER_TEAM_SCORE = 0x5E,
  PROFILE_SHOUTCASTER_PLAYER_NOTIFICATIONS = 0x5F,
  PROFILE_SHOUTCASTER_VOIP_DOCK = 0x60,
  PROFILE_SHOUTCASTER_MAP_ICON_COLORS = 0x61,
  PROFILE_FIRST_TIME_PRIVATEGAME_HOST_ZM = 0x62,
  PROFILE_ELITE_EMBLEM_UPLOAD_REQUESTED = 0x63,
  PROFILE_ELITE_WELCOME_POPUP_SHOWN = 0x64,
  PROFILE_DEMO_SHOUTCASTER_NAME_PLATE = 0x65,
  PROFILE_ELITE_POSTMATCHRECORD_LAST_UPLOAD_TIME = 0x66,
  PROFILE_ELITE_REGISTRATION_POPUP_LAST_SHOWN_TIME = 0x67,
  PROFILE_ELITE_REGISTRATION_POPUP_TIMES_SHOWN = 0x68,
  PROFILE_ELITE_REGISTRATION_SIGNIN_COUNTER = 0x69,
  PROFILE_SHOUTCASTER_MAP_IN_PLAYER_COLUMN = 0x6A,
  PROFILE_PREFERRED_PING = 0x6B,
  PROFILE_SETTINGS_COUNT = 0x6C,
};

/* 268 */
enum gjk_query_flags_e
{
  GJK_QUERY_FLAG_TERRAIN = 0x1,
  GJK_QUERY_FLAG_ENTS = 0x2,
  GJK_QUERY_FLAG_DENTS = 0x4,
};

/* 269 */
enum $15ECC96D9C0E42899A1476BDB4AB35E1
{
  PMOVE_HANDLER_CLIENT = 0x0,
  PMOVE_HANDLER_SERVER = 0x1,
  PMOVE_HANDLER_COUNT = 0x2,
};

/* 270 */
enum DynEntityDrawType
{
  DYNENT_DRAW_MODEL = 0x0,
  DYNENT_DRAW_BRUSH = 0x1,
  DYNENT_DRAW_COUNT = 0x2,
};

/* 271 */
enum rope_constraint_e
{
  ROPE_PAIR_CONSTRAINT = 0x0,
  ROPE_WORLD_CONSTRAINT = 0x1,
  ROPE_DENTITY_CONSTRAINT = 0x2,
  ROPE_CENTITY_CONSTRAINT = 0x3,
};

/* 272 */
enum bb_profilelog_thread
{
  PROFILELOG_THREAD_UNKNOWN = 0x0,
  PROFILELOG_THREAD_SERVER = 0x1,
  PROFILELOG_THREAD_MAINTHREAD = 0x2,
  PROFILELOG_THREAD_SERVER_NETWORK_FRAME = 0x3,
  PROFILELOG_THREAD_COUNT = 0x4,
};

/* 273 */
enum ai_state_t
{
  AIS_INVALID = 0x0,
  AIS_KEEPCURRENT = 0x0,
  AIS_EXPOSED = 0x1,
  AIS_TURRET = 0x2,
  AIS_GRENADE_RESPONSE = 0x3,
  AIS_BADPLACE_FLEE = 0x4,
  AIS_COVERARRIVAL = 0x5,
  AIS_DEATH = 0x6,
  AIS_DEFAULT = 0x1,
  AIS_SETABLE_FIRST = 0x1,
  AIS_SETABLE_LAST = 0x6,
  AIS_PAIN = 0x7,
  AIS_REACT = 0x8,
  AIS_SCRIPTEDANIM = 0x9,
  AIS_CUSTOMANIM = 0xA,
  AIS_NEGOTIATION = 0xB,
  AIS_PUSHABLE_FIRST = 0x7,
  AIS_PUSHABLE_LAST = 0xB,
  AIS_COUNT = 0xC,
};

/* 274 */
enum $39C31954953DC0780268E0DB23FBED98
{
  FX_MARK_VISUALS_CLASS_MODEL_INDEX = 0x0,
  FX_MARK_VISUALS_CLASS_WORLD_INDEX = 0x1,
  FX_MARK_VISUALS_CLASS_COUNT = 0x2,
};

/* 275 */
enum cgScoreboardSort_e
{
  SCOREBOARD_SORT_DEFAULT = 0x0,
  SCOREBOARD_SORT_SCORE = 0x0,
  SCOREBOARD_SORT_ALPHABETICAL = 0x1,
  SCOREBOARD_SORT_CLIENTNUM = 0x2,
};

/* 276 */
enum $401CE64E30B63FC6CE46B5010254B205
{
  FX_ELEM_SPAWN_RELATIVE_TO_EFFECT = 0x2,
  FX_ELEM_SPAWN_FRUSTUM_CULL = 0x4,
  FX_ELEM_RUNNER_USES_RAND_ROT = 0x8,
  FX_ELEM_SPAWN_OFFSET_NONE = 0x0,
  FX_ELEM_SPAWN_OFFSET_SPHERE = 0x10,
  FX_ELEM_SPAWN_OFFSET_CYLINDER = 0x20,
  FX_ELEM_SPAWN_OFFSET_MASK = 0x30,
  FX_ELEM_RUN_RELATIVE_TO_WORLD = 0x0,
  FX_ELEM_RUN_RELATIVE_TO_SPAWN = 0x40,
  FX_ELEM_RUN_RELATIVE_TO_EFFECT = 0x80,
  FX_ELEM_RUN_RELATIVE_TO_OFFSET = 0xC0,
  FX_ELEM_RUN_RELATIVE_TO_OFFSET_EFFECT_NOW = 0x100,
  FX_ELEM_RUN_MASK = 0x1C0,
  FX_ELEM_USE_COLLISION = 0x200,
  FX_ELEM_DIE_ON_TOUCH = 0x400,
  FX_ELEM_DRAW_PAST_FOG = 0x800,
  FX_ELEM_DRAW_WITH_VIEWMODEL = 0x1000,
  FX_ELEM_BLOCK_SIGHT = 0x2000,
  FX_ELEM_USE_ITEM_CLIP = 0x4000,
  FX_ELEM_USE_OCCLUSION_QUERY = 0x8000,
  FX_ELEM_IS_SUPERFLARE = 0x10000,
  FX_ELEM_USE_THERMAL = 0x20000,
  FX_ELEM_DISABLE_ALPHA_CULLING = 0x40000,
  FX_ELEM_USE_WORLD_UP = 0x80000,
  FX_ELEM_ALIGN_VIEWPOINT = 0x100000,
  FX_ELEM_USE_BILLBOARD_PIVOT = 0x200000,
  FX_ELEM_USE_GAUSSIAN_CLOUD = 0x400000,
  FX_ELEM_USE_ROTATIONAXIS = 0x800000,
  FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL = 0x1000000,
  FX_ELEM_HAS_VELOCITY_GRAPH_WORLD = 0x2000000,
  FX_ELEM_HAS_GRAVITY = 0x4000000,
  FX_ELEM_USE_MODEL_PHYSICS = 0x8000000,
  FX_ELEM_NONUNIFORM_SCALE = 0x10000000,
  FX_ELEM_FLAME_CHUNK = 0x20000000,
  FX_ELEM_HAS_REFLECTION = 0x40000000,
  FX_ELEM_IS_MATURE_CONTENT = 0x80000000,
};

/* 277 */
enum $C9F55DE73698ED13D7706CFB6064672B
{
  FX_ELEM_TYPE_SPRITE_BILLBOARD = 0x0,
  FX_ELEM_TYPE_SPRITE_ORIENTED = 0x1,
  FX_ELEM_TYPE_SPRITE_ROTATED = 0x2,
  FX_ELEM_TYPE_TAIL = 0x3,
  FX_ELEM_TYPE_LINE = 0x4,
  FX_ELEM_TYPE_TRAIL = 0x5,
  FX_ELEM_TYPE_CLOUD = 0x6,
  FX_ELEM_TYPE_MODEL = 0x7,
  FX_ELEM_TYPE_OMNI_LIGHT = 0x8,
  FX_ELEM_TYPE_SPOT_LIGHT = 0x9,
  FX_ELEM_TYPE_SOUND = 0xA,
  FX_ELEM_TYPE_DECAL = 0xB,
  FX_ELEM_TYPE_RUNNER = 0xC,
  FX_ELEM_TYPE_COUNT = 0xD,
  FX_ELEM_TYPE_LAST_SPRITE = 0x5,
  FX_ELEM_TYPE_LAST_DRAWN = 0x9,
};

/* 278 */
enum errorParm_t
{
  ERR_FATAL = 0x0,
  ERR_DROP = 0x1,
  ERR_FROM_STARTUP = 0x2,
  ERR_SERVERDISCONNECT = 0x3,
  ERR_DISCONNECT = 0x4,
  ERR_SCRIPT = 0x5,
  ERR_SCRIPT_DROP = 0x6,
  ERR_LOCALIZATION = 0x7,
};

/* 279 */
enum PacketEntityType
{
  ANALYZE_DATATYPE_ENTITYTYPE_GENERALENTITY = 0x0,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERENTITY = 0x1,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERCORPSEENTITY = 0x2,
  ANALYZE_DATATYPE_ENTITYTYPE_ITEMENTITY = 0x3,
  ANALYZE_DATATYPE_ENTITYTYPE_MISSILEENTITY = 0x4,
  ANALYZE_DATATYPE_ENTITYTYPE_INVISIBLEENTITY = 0x5,
  ANALYZE_DATATYPE_ENTITYTYPE_SCRIPTMOVERENTITY = 0x6,
  ANALYZE_DATATYPE_ENTITYTYPE_SOUNDBLENDENTITY = 0x7,
  ANALYZE_DATATYPE_ENTITYTYPE_FXENTITY = 0x8,
  ANALYZE_DATATYPE_ENTITYTYPE_LOOPFXENTITY = 0x9,
  ANALYZE_DATATYPE_ENTITYTYPE_PRIMARYLIGHTENTITY = 0xA,
  ANALYZE_DATATYPE_ENTITYTYPE_TURRETENTITY = 0xB,
  ANALYZE_DATATYPE_ENTITYTYPE_HELICOPTER = 0xC,
  ANALYZE_DATATYPE_ENTITYTYPE_PLANE = 0xD,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE = 0xE,
  ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE_CORPSE = 0xF,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR = 0x10,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR_SPAWNER = 0x11,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTOR_CORPSE = 0x12,
  ANALYZE_DATATYPE_ENTITYTYPE_STREAMER_HINT = 0x13,
  ANALYZE_DATATYPE_ENTITYTYPE_ZBARRIER = 0x14,
  ANALYZE_DATATYPE_ENTITYTYPE_TEMPENTITY = 0x15,
  ANALYZE_DATATYPE_ENTITYTYPE_ARCHIVEDENTITY = 0x16,
  ANALYZE_DATATYPE_ENTITYTYPE_MATCHSTATE = 0x17,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENTSTATE = 0x18,
  ANALYZE_DATATYPE_ENTITYTYPE_PLAYERSTATE = 0x19,
  ANALYZE_DATATYPE_ENTITYTYPE_ACTORSTATE = 0x1A,
  ANALYZE_DATATYPE_ENTITYTYPE_HUDELEM = 0x1B,
  ANALYZE_DATATYPE_ENTITYTYPE_BASELINE = 0x1C,
  ANALYZE_DATATYPE_ENTITYTYPE_GLASS = 0x1D,
  ANALYZE_DATATYPE_ENTITYTYPE_PERF = 0x1E,
  ANALYZE_DATATYPE_ENTITYTYPE_SERVERCMD = 0x1F,
  ANALYZE_DATATYPE_ENTITYTYPE_VOIP_UPLOAD = 0x20,
  ANALYZE_DATATYPE_ENTITYTYPE_VOIP_DOWNLOAD = 0x21,
  ANALYZE_DATATYPE_ENTITYTYPE_DEMO_UPLOAD = 0x22,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_UPLOAD = 0x23,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_PING = 0x24,
  ANALYZE_DATATYPE_ENTITYTYPE_CLIENT_PACKETS = 0x25,
  ANALYZE_DATATYPE_ENTITYTYPE_COUNT = 0x26,
};

/* 280 */
enum PacketSpecialEntityIndex_t
{
  ANALYZE_ENTITY_STANDARD = 0x0,
  ANALYZE_ENTITY_CLIENTSTATES = 0x400,
  ANALYZE_ENTITY_MATCHSTATE = 0x412,
  ANALYZE_ENTITY_GLASS = 0x413,
  ANALYZE_ENTITY_PERF = 0x414,
  ANALYZE_ENTITY_SERVERCMD = 0x415,
  ANALYZE_ENTITY_SERVERCMD_END = 0x425,
  ANALYZE_ENTITY_VOIP_UPLOAD = 0x426,
  ANALYZE_ENTITY_VOIP_DOWNLOAD = 0x427,
  ANALYZE_ENTITY_DEMO_UPLOAD = 0x428,
  ANALYZE_ENTITY_CLIENT_UPLOAD = 0x429,
  ANALYZE_ENTITY_CLIENT_PING = 0x42A,
  ANALYZE_ENTITY_CLIENT_PACKETS = 0x42B,
  ANALYZE_ENTITY_CLIENT_PACKETS_END = 0x432,
  ANALYZE_MAX_UPDATE_ITEMS = 0x433,
};

/* 281 */
enum nodeType
{
  NODE_BADNODE = 0x0,
  NODE_PATHNODE = 0x1,
  NODE_COVER_STAND = 0x2,
  NODE_COVER_CROUCH = 0x3,
  NODE_COVER_CROUCH_WINDOW = 0x4,
  NODE_COVER_PRONE = 0x5,
  NODE_COVER_RIGHT = 0x6,
  NODE_COVER_LEFT = 0x7,
  NODE_COVER_PILLAR = 0x8,
  NODE_AMBUSH = 0x9,
  NODE_EXPOSED = 0xA,
  NODE_CONCEALMENT_STAND = 0xB,
  NODE_CONCEALMENT_CROUCH = 0xC,
  NODE_CONCEALMENT_PRONE = 0xD,
  NODE_REACQUIRE = 0xE,
  NODE_BALCONY = 0xF,
  NODE_SCRIPTED = 0x10,
  NODE_NEGOTIATION_BEGIN = 0x11,
  NODE_NEGOTIATION_END = 0x12,
  NODE_TURRET = 0x13,
  NODE_GUARD = 0x14,
  NODE_NUMTYPES = 0x15,
  NODE_DONTLINK = 0x15,
};

/* 282 */
enum $76FFF98BDE84028E2612C6C893659C9C
{
  FX_ATLAS_START_FIXED = 0x0,
  FX_ATLAS_START_RANDOM = 0x1,
  FX_ATLAS_START_INDEXED = 0x2,
  FX_ATLAS_START_FIXED_RANGE = 0x3,
  FX_ATLAS_START_MASK = 0x3,
  FX_ATLAS_PLAY_OVER_LIFE = 0x4,
  FX_ATLAS_LOOP_ONLY_N_TIMES = 0x8,
};

/* 283 */
enum entityType_t
{
  ET_GENERAL = 0x0,
  ET_PLAYER = 0x1,
  ET_PLAYER_CORPSE = 0x2,
  ET_ITEM = 0x3,
  ET_MISSILE = 0x4,
  ET_INVISIBLE = 0x5,
  ET_SCRIPTMOVER = 0x6,
  ET_SOUND_BLEND = 0x7,
  ET_FX = 0x8,
  ET_LOOP_FX = 0x9,
  ET_PRIMARY_LIGHT = 0xA,
  ET_TURRET = 0xB,
  ET_HELICOPTER = 0xC,
  ET_PLANE = 0xD,
  ET_VEHICLE = 0xE,
  ET_VEHICLE_CORPSE = 0xF,
  ET_ACTOR = 0x10,
  ET_ACTOR_SPAWNER = 0x11,
  ET_ACTOR_CORPSE = 0x12,
  ET_STREAMER_HINT = 0x13,
  ET_ZBARRIER = 0x14,
  ET_EVENTS = 0x15,
};

/* 284 */
enum $62F88F4AF377EC98DA5F7AD185611112
{
  CONNECT_PATHS_NONE = 0x0,
  CONNECT_PATHS_RUN_GAME_WHEN_DONE = 0x1,
  CONNECT_PATHS_EXIT_WHEN_DONE = 0x2,
  CONNECT_PATHS_EXIT_WHEN_DONE_OR_ERROR = 0x3,
  NUM_CONNECT_PATH_OPTIONS = 0x3,
};

/* 285 */
enum $C05763ADA1C5C59CF287C4E58C968615
{
  PNF_DONTLINK = 0x1,
  PNF_PLACEHOLDER_FLAG = 0x2,
  PNF_DONTSTAND = 0x4,
  PNF_DONTCROUCH = 0x8,
  PNF_DONTPRONE = 0x10,
  PNF_NORAILING = 0x20,
  PNF_PRIORITY = 0x40,
  PNF_IDLE = 0x80,
  PNF_CAN_PARENT = 0x100,
  PNF_DISABLED = 0x200,
  PNF_DONTLEFT = 0x400,
  PNF_DONTRIGHT = 0x800,
  PNF_STRICT_CONNECT = 0x800,
  PNF_CHOKEPOINT = 0x1000,
  PNF_LINKSTOCHOKE = 0x2000,
  PNF_TEMP_LINKS = 0x4000,
  PNF_ANGLEVALID = 0x8000,
  PNF_SUSPENDED = 0x10000,
  PNF_COVER_PEEKOVER = 0x20000,
  PNF_COVER_PEEKLEFT = 0x40000,
  PNF_COVER_PEEKRIGHT = 0x80000,
  PNF_DOUBLE_WIDE = 0x100000,
  PNF_QUADROTOR = 0x200000,
  PNF_HINT_LADDER = 0x400000,
  PNF_HINT_MANTLE = 0x800000,
  PNF_HINT_JUMP = 0x1000000,
  PNF_HINT_FALL = 0x2000000,
  PNF_NO_DOUBLEWIDE = 0x4000000,
  PNF_NO_QUADROTOR = 0x8000000,
};

/* 286 */
enum $D05F650BFA454C43BC46E3FC8126B492
{
  WATER_EFFECT_HIT_SM = 0x0,
  WATER_EFFECT_HIT_MD = 0x1,
  WATER_EFFECT_HIT_LG = 0x2,
  WATER_EFFECT_HIT_OBJECT_RIPPLE = 0x3,
  WATER_EFFECT_HIT_BUBBLES = 0x4,
  WATER_EFFECT_HIT_WAIST_RIPPLE = 0x5,
  WATER_EFFECT_HIT_KNEE_RIPPLE = 0x6,
  WATER_EFFECT_HIT_SPLASH = 0x7,
  WATER_EFFECT_NUM = 0x8,
};

/* 287 */
enum GfxSaveScreenParam::SAVESCREEN_MODE
{
  SAVESCREEN_OFF = 0x0,
  SAVESCREEN = 0x1,
  SAVESCREEN_SECTION = 0x2,
};

/* 288 */
enum VehicleEngineState
{
  VEH_ENGINE_STATE_IDLE = 0x0,
  VEH_ENGINE_STATE_IN_GEAR = 0x1,
  VEH_ENGINE_STATE_SHIFT_UP = 0x2,
  VEH_ENGINE_STATE_SHIFT_DOWN = 0x3,
};

/* 289 */
enum ObjectIconType
{
  OBJECTIVEICON_MAP = 0x0,
  OBJECTIVEICON_SHOUTCASTER_MAP = 0x1,
  OBJECTIVEICON_COUNT = 0x2,
};

/* 290 */
enum clientConnected_t
{
  CON_DISCONNECTED = 0x0,
  CON_CONNECTING = 0x1,
  CON_CONNECTED = 0x2,
};

/* 291 */
enum PhysicsOwnerType
{
  PHYS_OWNER_DYNENT = 0x0,
  PHYS_OWNER_ENTITY = 0x1,
  PHYS_OWNER_GLASS = 0x2,
  PHYS_OWNER_PARTICLE = 0x3,
  PHYS_OWNER_RAGDOLL = 0x4,
  PHYS_OWNER_XDOLL = 0x5,
  PHYS_OWNER_COUNT = 0x6,
};

/* 292 */
enum ai_traverse_mode_t
{
  AI_TRAVERSE_INVALID = 0x0,
  AI_TRAVERSE_GRAVITY = 0x1,
  AI_TRAVERSE_NOGRAVITY = 0x2,
  AI_TRAVERSE_NOCLIP = 0x3,
  AI_TRAVERSE_COUNT = 0x4,
};

/* 293 */
enum ai_animmode_t
{
  AI_ANIM_UNKNOWN = 0x0,
  AI_ANIM_MOVE_CODE = 0x1,
  AI_ANIM_USE_POS_DELTAS = 0x2,
  AI_ANIM_USE_ANGLE_DELTAS = 0x3,
  AI_ANIM_USE_BOTH_DELTAS = 0x4,
  AI_ANIM_USE_BOTH_DELTAS_NOCLIP = 0x5,
  AI_ANIM_USE_BOTH_DELTAS_NOGRAVITY = 0x6,
  AI_ANIM_USE_BOTH_DELTAS_ZONLY_PHYSICS = 0x7,
  AI_ANIM_NOPHYSICS = 0x8,
  AI_ANIM_POINT_RELATIVE = 0x9,
  AI_ANIM_SLIDE = 0xA,
};

/* 294 */
enum SndMenuCategory
{
  SND_CATEGORY_SFX = 0x0,
  SND_CATEGORY_MUSIC = 0x1,
  SND_CATEGORY_VOICE = 0x2,
  SND_CATEGORY_UI = 0x3,
  SND_CATEGORY_CINEMATIC = 0x4,
  SND_CATEGORY_COUNT = 0x5,
};

/* 295 */
enum rigid_body_constraint_wheel::internal_wheel_flags_e
{
  WHEEL_FLAG_IS_COLLIDING = 0x1,
  WHEEL_FLAG_HARD_LIMIT_ACTIVE = 0x2,
  WHEEL_FLAG_IS_SLIDING = 0x4,
};

/* 296 */
enum rigid_body_constraint_wheel::wheel_flags_e
{
  WHEEL_FLAG_HAS_TURNING = 0x8,
  WHEEL_FLAG_HAS_POWER = 0x10,
  WHEEL_FLAG_HAS_POWER_BRAKING = 0x20,
  WHEEL_FLAG_HAS_BRAKING = 0x40,
  WHEEL_FLAG_HOVER = 0x80,
};

/* 297 */
enum rigid_body_constraint_wheel::ps_cache_e
{
  PSC_HARD_LIMIT = 0x0,
  PSC_SUSPENSION = 0x1,
  PSC_SIDE_FRIC = 0x2,
  PSC_FWD_FRIC = 0x3,
  NUM_PSC = 0x4,
};

/* 298 */
enum rigid_body_constraint_wheel::wheel_state_e
{
  WHEEL_STATE_ACCELERATING = 0x0,
  WHEEL_STATE_BRAKING = 0x1,
};

/* 299 */
enum eHand
{
  HAND_RIGHT = 0x0,
  HAND_LEFT = 0x1,
  MAX_HANDS = 0x2,
};

/* 300 */
enum rigid_body_constraint_ragdoll::flags_e
{
  FLAG_HAS_HINGE = 0x4,
  FLAG_HAS_SWIVEL = 0x8,
  FLAG_HAS_DAMP = 0x40,
  FLAG_FORCE_LIMITS_ACTIVE = 0x80,
  FLAG_DISABLE_JOINT_LIMITS = 0x100,
  FLAG_DAMP_TYPE_IMPLICIT = 0x200,
};

/* 301 */
typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_ragdoll::ps_cache_e;

/* 302 */
enum $ED49F055BCC80A4388AEEC36423E68C8
{
  ENTRY_COUNT_BIT_COUNT = 0x9,
  ENTRY_COUNT_MASK = 0x1FF,
  ENTRY_COUNT_MAX = 0x100,
  INDEX_RANGE_BIT_COUNT = 0x7,
  INDEX_RANGE_SHIFT = 0x9,
  INDEX_RANGE_MASK = 0x7F,
  INDEX_RANGE_MAX = 0x7F,
};

/* 303 */
enum $9692EB9AB566B1E700D95024E91D4BCA
{
  FLAG_DO_INITIAL_TUNNEL_TEST = 0x200,
  BPG_FIRST_UNUSED_FLAG = 0x400,
};

/* 304 */
typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_hinge::ps_cache_e;

/* 305 */
enum rigid_body_constraint_hinge::flags_e
{
  HINGE_MIN_LIMIT_ACTIVE = 0x1,
  HINGE_MAX_LIMIT_ACTIVE = 0x2,
  PRIVATE_FLAGS_END = 0x2,
};

/* 306 */
enum rigid_body_constraint_hinge::public_flags_e
{
  NO_HINGE_LIMITS = 0x4,
  SNIDER_STYLE_HINGE = 0x8,
  NO_POINT_TO_POINT = 0x10,
};

/* 307 */
enum AlertLevel
{
  AI_ALERTNESS_ASLEEP = 0x0,
  AI_ALERTNESS_NONCOMBAT = 0x1,
  AI_ALERTNESS_ALERT = 0x2,
  AI_ALERTNESS_COMBAT = 0x3,
  NUM_ALERT_LEVELS = 0x4,
};

/* 308 */
enum CombatMode
{
  AI_COMBAT_COVER = 0x0,
  AI_COMBAT_NO_COVER = 0x1,
  AI_COMBAT_COVER_ONLY = 0x2,
  AI_COMBAT_AMBUSH = 0x3,
  AI_COMBAT_AMBUSH_NODES_ONLY = 0x4,
  AI_COMBAT_EXPOSED_NODES_ONLY = 0x5,
  AI_COMBAT_ANY_EXPOSED_NODES_ONLY = 0x6,
  NUM_COMBAT_MODES = 0x7,
};

/* 309 */
enum bb_profilelog_id
{
  PROFILELOG_UNKNOWN = 0x0,
  PROFILELOG_SV_FRAME_MP = 0x1,
  PROFILELOG_SV_RUNFRAME_MP = 0x2,
  PROFILELOG_SV_PREFRAME_MP = 0x3,
  PROFILELOG_SV_POSTFRAME_MP = 0x4,
  PROFILELOG_SV_SCRIPTS_ALL = 0x5,
  PROFILELOG_SV_EVENTLOOP_MP = 0x6,
  PROFILELOG_SV_PMOVE = 0x7,
  PROFILELOG_SV_PMOVE_COLLISION = 0x8,
  PROFILELOG_VEHICLE_THINK = 0x9,
  PROFILELOG_ACTOR_THINK = 0xA,
  PROFILELOG_NON_PLAYER_COLLISION = 0xB,
  PROFILELOG_XXX = 0xC,
  PROFILELOG_DOBJ_SKEL = 0xD,
  PROFILELOG_STREAM_SORT_WAIT = 0xE,
  PROFILELOG_GET_BITFIELD = 0xF,
  PROFILELOG_SCR_UPDATESCREEN = 0x10,
  PROFILELOG_BLANK1 = 0x11,
  PROFILELOG_BLANK2 = 0x12,
  PROFILELOG_BLANK3 = 0x13,
  PROFILELOG_BLANK4 = 0x14,
  PROFILELOG_BLANK5 = 0x15,
  PROFILELOG_BLANK6 = 0x16,
  PROFILELOG_BLANK7 = 0x17,
  PROFILELOG_BLANK8 = 0x18,
  PROFILELOG_NET_BAND_SERVER_TRANSMITTED = 0x19,
  PROFILELOG_NET_BAND_SERVER_TOTAL = 0x1A,
  PROFILELOG_NET_BAND_SERVER_ENTITYSTATES = 0x1B,
  PROFILELOG_NET_BAND_SERVER_PLAYERSTATES = 0x1C,
  PROFILELOG_NET_BAND_SERVER_CLIENTSTATES = 0x1D,
  PROFILELOG_NET_BAND_SERVER_ACTORSTATES = 0x1E,
  PROFILELOG_NET_BAND_SERVER_GLASS = 0x1F,
  PROFILELOG_NET_BAND_SERVER_DEMO_UPLOAD = 0x20,
  PROFILELOG_NET_BAND_SERVER_BLACKBOX = 0x21,
  PROFILELOG_NET_BAND_SERVER_VOICE = 0x22,
  PROFILELOG_NET_BAND_SERVER_RELIABLE_CMDS = 0x23,
  PROFILELOG_NET_BAND_SERVER_GAMESTATE = 0x24,
  PROFILELOG_MAX = 0x25,
};

/* 310 */
typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_upright::ps_cache_e;

/* 311 */
enum $7A09EA2AAD0A6D46DA0D1538562CC91A
{
  FLAG_CALC_CG_TO_WORLD_XFORM = 0x200,
  BPI_FIRST_UNUSED_FLAG = 0x400,
};

/* 312 */
enum visionSetLerpStyle_t
{
  VISIONSETLERP_UNDEFINED = 0x0,
  VISIONSETLERP_NONE = 0x1,
  VISIONSETLERP_TO_LINEAR = 0x2,
  VISIONSETLERP_TO_SMOOTH = 0x3,
  VISIONSETLERP_BACKFORTH_LINEAR = 0x4,
  VISIONSETLERP_BACKFORTH_SMOOTH = 0x5,
  VISIONSETLERP_CUSTOM_VALUE = 0x6,
};

/* 313 */
enum sessionState_t
{
  SESS_STATE_PLAYING = 0x0,
  SESS_STATE_DEAD = 0x1,
  SESS_STATE_SPECTATOR = 0x2,
  SESS_STATE_INTERMISSION = 0x3,
};

/* 314 */
typedef rigid_body_constraint_wheel::ps_cache_e contact_point_info::ps_cache_e;

/* 315 */
enum contact_point_info::flags_e
{
  FLAG_SOLVER_PRIORITY_MASK = 0x7,
  FLAG_NO_OVERFLOW_ERROR = 0x8,
  FLAG_HAS_VALID_RB2_ENTITY = 0x10,
};

/* 316 */
enum $5A72DFFC688AE8761FB1B74882D8C52B
{
  FLAG_TEMP_ALLOCATION = 0x1,
  FLAG_AABB_LOC_VALID = 0x2,
  FLAG_GEOM_ID_VALID = 0x4,
  FLAG_XFORM_VALID = 0x8,
  FLAG_CONTENTS_VALID = 0x10,
};

/* 317 */
enum visionSetMode_t
{
  VISIONSETMODE_NAKED = 0x0,
  VISIONSETMODE_SERVER = 0x1,
  VISIONSETMODE_NIGHT = 0x2,
  VISIONSETMODE_FLARE = 0x3,
  VISIONSETMODE_INFRARED = 0x4,
  VISIONSETMODE_TVGUIDED = 0x5,
  VISIONSETMODE_EXTRACAM = 0x6,
  VISIONSETMODE_LASTSTAND = 0x7,
  VISIONSETMODECOUNT = 0x8,
};

/* 318 */
enum TurretRotateState
{
  TURRET_ROTATE_STOPPED = 0x0,
  TURRET_ROTATE_STOPPING = 0x1,
  TURRET_ROTATE_MOVING = 0x2,
};

/* 319 */
enum DynEntityType
{
  DYNENT_TYPE_INVALID = 0x0,
  DYNENT_TYPE_CLUTTER = 0x1,
  DYNENT_TYPE_DESTRUCT = 0x2,
  DYNENT_TYPE_COUNT = 0x3,
};

/* 320 */
enum $8C233EAE5AD366892D224D3EF0B85233
{
  PTR_LIST_SIZE = 0x100,
};

/* 321 */
enum rigid_body_constraint_distance::flags_e
{
  FLAG_ENABLE = 0x1,
  FLAG_B2_R_IS_DAMP_POINT = 0x2,
};

/* 322 */
typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_distance::ps_cache_e;

/* 323 */
enum aiGoalSources
{
  AI_GOAL_SRC_SCRIPT_GOAL = 0x0,
  AI_GOAL_SRC_SCRIPT_ENTITY_GOAL = 0x1,
  AI_GOAL_SRC_ENEMY = 0x2,
};

/* 324 */
enum ai_state_transition_t
{
  AIS_TRANSITION_CANONICAL = 0xFFFFFFFF,
  AIS_TRANSITION_NONE = 0x0,
  AIS_TRANSITION_SET = 0x1,
  AIS_TRANSITION_PUSH = 0x2,
  AIS_TRANSITION_POP = 0x3,
};

/* 325 */
enum DelayedWeapDropState
{
  ACTOR_WEAP_DROP_NONE = 0x0,
  ACTOR_WEAP_DROP_GRAB_INITIAL_VALUE = 0x1,
  ACTOR_WEAP_DROP_FINISH = 0x2,
};

/* 326 */
typedef $8C233EAE5AD366892D224D3EF0B85233 $51C2FF7C363288B423F968BE64AB075A;

/* 327 */
enum aiphys_t
{
  AIPHYS_BAD = 0x0,
  AIPHYS_NORMAL_ABSOLUTE = 0x1,
  AIPHYS_NORMAL_RELATIVE = 0x2,
  AIPHYS_NOCLIP = 0x3,
  AIPHYS_NOGRAVITY = 0x4,
  AIPHYS_ZONLY_PHYSICS_RELATIVE = 0x5,
  AIPHYS_ZONLY_PHYSICS_ABSOLUTE = 0x6,
  AIPHYS_GRAVITY_SLIDE = 0x7,
};

/* 328 */
typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_custom_orientation::ps_cache_e;

/* 329 */
enum phys_gjk_cache_info::phys_gjk_cache_info_e
{
  FLAG_WAS_TOUCHED = 0x1,
  FLAG_IS_SWAPPED = 0x2,
  FLAG_IS_SUPPORT_DIR_VALID = 0x4,
  FLAG_IS_SIMPLEX_VALID = 0x8,
};

/* 330 */
enum $96FC0632DF0D20E92EF2DCF3703CF5AB
{
  ALLOCATOR_MEMORY_SIZE = 0x4000,
};

/* 331 */
enum $74ED09C3E92D9FF9721BAB8D414AAFB8
{
  NUM_QUAD_VERTS = 0x4,
};

/* 332 */
enum $733EDCC574984F795B651FE7153302AE
{
  NUM_VERTS_ = 0xC,
};

/* 333 */
enum ai_orient_mode_t
{
  AI_ORIENT_INVALID = 0x0,
  AI_ORIENT_DONT_CHANGE = 0x1,
  AI_ORIENT_TO_MOTION = 0x2,
  AI_ORIENT_TO_ENEMY = 0x3,
  AI_ORIENT_TO_ENEMY_OR_MOTION = 0x4,
  AI_ORIENT_TO_ENEMY_OR_MOTION_SIDESTEP = 0x5,
  AI_ORIENT_TO_GOAL = 0x6,
  AI_ORIENT_COUNT = 0x7,
};

/* 334 */
typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_point::ps_cache_e;

/* 335 */
enum $898AB88E5F7318D5E933E525703EB000
{
  BLOCK_SIZE = 0x4000,
  BLOCK_ALIGNMENT = 0x4,
};

/* 336 */
enum AI_STAIRS_STATE
{
  AI_STAIRS_NONE = 0x0,
  AI_STAIRS_UP = 0x1,
  AI_STAIRS_DOWN = 0x2,
  NUM_STAIRS_STATES = 0x3,
};

/* 337 */
enum rigid_body::rigid_body_flags_e
{
  FLAG_DISABLE_FORCES = 0x1,
  FLAG_STABLE = 0x4,
  FLAG_GROUP_STABLE = 0x8,
  FLAG_ENVIRONMENT_RIGID_BODY = 0x10,
  FLAG_USER_RIGID_BODY = 0x20,
  FLAG_NO_AUTO_REMOVE = 0x40,
  FLAG_DANGEROUS = 0x80,
  FLAG_HAS_RBC_CONTACT = 0x100,
  FLAG_EXPENSIVE = 0x200,
  FLAG_CLIENT_FLAGS_START = 0x400,
};

/* 338 */
enum thirdPersonType
{
  TP_OFF = 0x0,
  TP_FOR_MODEL = 0x1,
  TP_FOR_SHADOW = 0x2,
};

/* 339 */
typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_angular_actuator::ps_cache_e;

/* 340 */
enum ai_substate_t
{
  STATE_EXPOSED_COMBAT = 0x64,
  STATE_EXPOSED_NONCOMBAT = 0x65,
  STATE_EXPOSED_REACQUIRE_MOVE = 0x66,
  STATE_EXPOSED_REACQUIRE_DONE = 0x67,
  STATE_EXPOSED_FLASHBANGED = 0x68,
  STATE_EXPOSED_REACTION = 0x69,
  STATE_DEATH_PRECLEANUP = 0xC8,
  STATE_DEATH_POSTCLEANUP = 0xC9,
  STATE_GRENADE_FLEE = 0x12C,
  STATE_GRENADE_TAKECOVER = 0x12D,
  STATE_GRENADE_COWER = 0x12E,
  STATE_GRENADE_COMBAT = 0x12F,
  STATE_GRENADE_COVERATTACK = 0x130,
  STATE_GRENADE_ACQUIRE = 0x131,
  STATE_GRENADE_THROWBACK = 0x132,
};

/* 341 */
enum team_indicator
{
  TEAM_INDICATOR_FULL = 0x0,
  TEAM_INDICATOR_ABBREVIATED = 0x1,
  TEAM_INDICATOR_ICON = 0x2,
  TEAM_INDICATOR_COUNT = 0x3,
};

/* 342 */
enum ai_badplace_t
{
  AI_BADPLACE_NONE = 0x0,
  AI_BADPLACE_NORMAL = 0x1,
  AI_BADPLACE_REALLYBAD = 0x2,
};

/* 343 */
typedef $48D6FFC28A4FF14B011914B43D4C4CEC $E53982B30394FD72FC51F177FCAC9D1F;

/* 344 */
enum gjccc_create_type_e
{
  CT_CYLINDER = 0x0,
  CT_COLLMAP = 0x1,
};

/* 345 */
enum ShockViewTypes
{
  SHELLSHOCK_VIEWTYPE_BLURRED = 0x0,
  SHELLSHOCK_VIEWTYPE_FLASHED = 0x1,
  SHELLSHOCK_VIEWTYPE_NONE = 0x2,
};

/* 346 */
enum DemoType
{
  DEMO_TYPE_NONE = 0x0,
  DEMO_TYPE_CLIENT = 0x1,
  DEMO_TYPE_SERVER = 0x2,
  DEMO_TYPE_SERVER_SNAPSHOT = 0x3,
};

/* 347 */
enum CubemapShot
{
  CUBEMAPSHOT_NONE = 0x0,
  CUBEMAPSHOT_RIGHT = 0x1,
  CUBEMAPSHOT_LEFT = 0x2,
  CUBEMAPSHOT_BACK = 0x3,
  CUBEMAPSHOT_FRONT = 0x4,
  CUBEMAPSHOT_UP = 0x5,
  CUBEMAPSHOT_DOWN = 0x6,
  CUBEMAPSHOT_COUNT = 0x7,
};

/* 348 */
enum InvalidCmdHintType
{
  INVALID_CMD_NONE = 0x0,
  INVALID_CMD_NO_AMMO_BULLETS = 0x1,
  INVALID_CMD_NO_AMMO_FRAG_GRENADE = 0x2,
  INVALID_CMD_NO_AMMO_SPECIAL_GRENADE = 0x3,
  INVALID_CMD_NO_AMMO_FLASH_GRENADE = 0x4,
  INVALID_CMD_NO_AMMO_EQUIPMENT = 0x5,
  INVALID_CMD_STAND_BLOCKED = 0x6,
  INVALID_CMD_CROUCH_BLOCKED = 0x7,
  INVALID_CMD_PRONE_BLOCKED = 0x8,
  INVALID_CMD_TARGET_TOO_CLOSE = 0x9,
  INVALID_CMD_LOCKON_REQUIRED = 0xA,
  INVALID_CMD_NOT_ENOUGH_CLEARANCE = 0xB,
  INVALID_CMD_CANT_PLACE_TURRET = 0xC,
  INVALID_CMD_CANT_EQUIP_WHILE_PRONE = 0xD,
  INVALID_CMD_CANT_PLANT_EQUIPMENT = 0xE,
};

/* 349 */
enum SuccessfulCmdHintType
{
  SUCCESSFUL_CMD_NONE = 0x0,
  SUCCESSFUL_CMD_GOD_MODE_ON = 0x1,
  SUCCESSFUL_CMD_GOD_MODE_OFF = 0x2,
  SUCCESSFUL_CMD_DEMIGOD_MODE_ON = 0x3,
  SUCCESSFUL_CMD_DEMIGOD_MODE_OFF = 0x4,
  SUCCESSFUL_CMD_UFO_ON = 0x5,
  SUCCESSFUL_CMD_UFO_OFF = 0x6,
  SUCCESSFUL_CMD_WEAPNEXT = 0x7,
  SUCCESSFUL_CMD_WEAPPREV = 0x8,
  SUCCESSFUL_CMD_GIVE_ALL = 0x9,
  SUCCESSFUL_CMD_CAMLOCK_ON = 0xA,
  SUCCESSFUL_CMD_CAMLOCK_OFF = 0xB,
  SUCCESSFUL_CMD_LOOKSPRING_ON = 0xC,
  SUCCESSFUL_CMD_LOOKSPRING_OFF = 0xD,
};

/* 350 */
enum KillCamEntityType
{
  KC_NO_ENTITY = 0x0,
  KC_HELICOPTER = 0x1,
  KC_DESTRUCTIBLE = 0x2,
  KC_SCRIPTED = 0x3,
  KC_EXPLOSIVE = 0x4,
  KC_FAST_EXPLOSIVE = 0x5,
  KC_ROCKET = 0x6,
  KC_DRONE = 0x7,
  KC_DOG = 0x8,
  KC_ARTILLERY = 0x9,
  KC_VEHICLE = 0xA,
  KC_TURRET = 0xB,
};

/* 351 */
enum KillCamEntityRestState
{
  KC_ENT_MOVING = 0x0,
  KC_ENT_AT_REST = 0x1,
  KC_ENT_STUCK_GROUND = 0x2,
  KC_ENT_STUCK_WALL = 0x3,
};

/* 352 */
enum link_type_e
{
  PITCH_CTRL = 0x0,
  YAW_CTRL = 0x1,
  ROLL_CTRL = 0x2,
  SWIM_CTRL = 0x3,
  FULL_CTRL = 0x4,
  COMPASS_CTRL = 0x5,
};

/* 353 */
typedef rigid_body_constraint_wheel::ps_cache_e rigid_body_constraint_custom_path::ps_cache_e;

/* 354 */
enum phys_gjk_info::gjk_retval_e
{
  GJK_SEPARATED = 0x0,
  GJK_VALID = 0x1,
  GJK_PENETRATING = 0x2,
  GJK_INVALID = 0x3,
};

/* 355 */
enum phys_gjk_info::gjk_flags_e
{
  FLAG_EXIT_ON_SEP_THRESH = 0x1,
  INTERSECTION_TEST_ONLY = 0x2,
  FLAG_TEST_CONVERGENCE = 0x4,
  CONTINUOUS_COLLISION = 0x8,
  FLAG_TEST_UD_LT_SP = 0x10,
  FLAG_IS_SEPARATED = 0x20,
  FLAG_GI_DANGEROUS = 0x40,
};

/* 356 */
enum gjk_entity_info_t::ENTITY_TYPE
{
  ET_GENT = 0x0,
  ET_CENT = 0x1,
  ET_DENT = 0x2,
  ET_GLASS = 0x3,
  ET_NONE = 0x4,
};

/* 357 */
enum $1600D6246533A3D2B4CF6340B278D47A
{
  NUM_CONSTANTS_PER_SET = 0x7,
};

/* 358 */
enum $07FC284CCBAF4F0A18340F473A6B20ED
{
  FLAG_IS_BPI = 0x1,
  FLAG_IS_BPG = 0x2,
  FLAG_IS_BPI_ENV = 0x4,
  FLAG_IS_IN_CLUSTER = 0x10,
  FLAG_ON_ENV_LIST = 0x20,
  FLAG_ON_BPG_LIST = 0x40,
  FLAG_IS_AUTO_ACTIVATE = 0x80,
  BPB_FIRST_UNUSED_FLAG = 0x200,
};

/* 359 */
enum CameraMode
{
  CAM_NORMAL = 0x0,
  CAM_LINKED = 0x1,
  CAM_VEHICLE = 0x2,
  CAM_VEHICLE_THIRDPERSON = 0x3,
  CAM_VEHICLE_GUNNER = 0x4,
  CAM_TURRET = 0x5,
  CAM_MISSILE = 0x6,
  CAM_SPIKECAMERA = 0x7,
  CAM_SCRIPTED_EXTRACAM = 0x8,
  CAM_RADIANT = 0x9,
};

/* 360 */
enum rb_vehicle_model::rb_vehicle_model_flags_e
{
  FLAG_IS_POWER_BRAKING = 0x1,
  FLAG_IS_BRAKING = 0x2,
  FLAG_IS_FORWARD_ACCELERATION = 0x4,
  FLAG_IS_REVERSE_ACCELERATION = 0x8,
  FLAG_IS_COASTING = 0x10,
};

/* 361 */
enum eSessionModes
{
  SESSIONMODE_OFFLINE = 0x0,
  SESSIONMODE_SYSTEMLINK = 0x1,
  SESSIONMODE_ONLINE = 0x2,
  SESSIONMODE_PRIVATE = 0x3,
  SESSIONMODE_ZOMBIES = 0x4,
  SESSIONMODE_MAX = 0x5,
  INVALID_SESSIONMODE = 0x6,
};

/* 362 */
enum $78CED8018494370359DB12F72F47DA52
{
  RIOTSHIELD_DEFAULT_MODEL = 0x0,
  RIOTSHIELD_RED_MODEL = 0x1,
};

/* 363 */
enum LUI::LUISystem
{
  FIRST_LUI_SYSTEM = 0x0,
  LUI_SYSTEM_PARTY = 0x0,
  LUI_SYSTEM_LOBBY = 0x1,
  LUI_SYSTEM_THEATER = 0x2,
  LUI_SYSTEM_GAME_OPTIONS = 0x3,
  LUI_SYSTEM_WEBM_STREAMING = 0x4,
  LUI_SYSTEM_HUD_REFRESH = 0x5,
  LUI_SYSTEM_MATCHMAKING_PROGRESS = 0x6,
  NUM_LUI_SYSTEMS = 0x7,
};

/* 364 */
enum $65CCBF5A98A0635036CBC99D27AE0490
{
  PRIM_POINTLIST = 0x1,
  PRIM_LINELIST = 0x2,
  PRIM_LINESTRIP = 0x3,
  PRIM_TRIANGLELIST = 0x4,
  PRIM_TRIANGLESTRIP = 0x5,
  PRIM_TRIANGLEFAN = 0xFFFFFFFF,
  PRIM_QUADLIST = 0xFFFFFFFF,
  PRIM_QUADSTRIP = 0xFFFFFFFF,
  PRIM_RECTLIST = 0xFFFFFFFF,
};

/* 365 */
enum $38A0BF23096CF28A1D1D4DA128DDA441
{
  CONST_SRC_CODE_MAYBE_DIRTY_PS_BEGIN = 0x0,
  CONST_SRC_CODE_LIGHT_POSITION = 0x0,
  CONST_SRC_CODE_LIGHT_DIFFUSE = 0x1,
  CONST_SRC_CODE_LIGHT_SPOTDIR = 0x2,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS = 0x3,
  CONST_SRC_CODE_LIGHT_ATTENUATION = 0x4,
  CONST_SRC_CODE_LIGHT_FALLOFF_A = 0x5,
  CONST_SRC_CODE_LIGHT_FALLOFF_B = 0x6,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX0 = 0x7,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX1 = 0x8,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX2 = 0x9,
  CONST_SRC_CODE_LIGHT_SPOT_MATRIX3 = 0xA,
  CONST_SRC_CODE_LIGHT_SPOT_AABB = 0xB,
  CONST_SRC_CODE_LIGHT_CONE_CONTROL1 = 0xC,
  CONST_SRC_CODE_LIGHT_CONE_CONTROL2 = 0xD,
  CONST_SRC_CODE_LIGHT_SPOT_COOKIE_SLIDE_CONTROL = 0xE,
  CONST_SRC_CODE_SHADOW_PARMS = 0xF,
  CONST_SRC_CODE_SHADOWMAP_POLYGON_OFFSET = 0x10,
  CONST_SRC_CODE_RENDER_TARGET_SIZE = 0x11,
  CONST_SRC_CODE_UPSCALED_TARGET_SIZE = 0x12,
  CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR = 0x13,
  CONST_SRC_CODE_DOF_EQUATION_SCENE = 0x14,
  CONST_SRC_CODE_DOF_LERP_SCALE = 0x15,
  CONST_SRC_CODE_DOF_LERP_BIAS = 0x16,
  CONST_SRC_CODE_DOF_ROW_DELTA = 0x17,
  CONST_SRC_CODE_PARTICLE_CLOUD_COLOR = 0x18,
  CONST_SRC_CODE_GAMETIME = 0x19,
  CONST_SRC_CODE_MAYBE_DIRTY_PS_END = 0x1A,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_BEGIN = 0x1A,
  CONST_SRC_CODE_FILTER_TAP_0 = 0x1A,
  CONST_SRC_CODE_FILTER_TAP_1 = 0x1B,
  CONST_SRC_CODE_FILTER_TAP_2 = 0x1C,
  CONST_SRC_CODE_FILTER_TAP_3 = 0x1D,
  CONST_SRC_CODE_FILTER_TAP_4 = 0x1E,
  CONST_SRC_CODE_FILTER_TAP_5 = 0x1F,
  CONST_SRC_CODE_FILTER_TAP_6 = 0x20,
  CONST_SRC_CODE_FILTER_TAP_7 = 0x21,
  CONST_SRC_CODE_COLOR_MATRIX_R = 0x22,
  CONST_SRC_CODE_COLOR_MATRIX_G = 0x23,
  CONST_SRC_CODE_COLOR_MATRIX_B = 0x24,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_END = 0x25,
  CONST_SRC_CODE_NEVER_DIRTY_PS_BEGIN = 0x25,
  CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION = 0x25,
  CONST_SRC_CODE_SUNSHADOWMAP_PIXEL_SIZE = 0x26,
  CONST_SRC_CODE_SHADOWMAP_SCALE = 0x27,
  CONST_SRC_CODE_ZNEAR = 0x28,
  CONST_SRC_CODE_SUN_POSITION = 0x29,
  CONST_SRC_CODE_SUN_DIFFUSE = 0x2A,
  CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE = 0x2B,
  CONST_SRC_CODE_DEBUG_BUMPMAP = 0x2C,
  CONST_SRC_CODE_DEBUG_PERFORMANCE = 0x2D,
  CONST_SRC_CODE_MATERIAL_COLOR = 0x2E,
  CONST_SRC_CODE_FOG = 0x2F,
  CONST_SRC_CODE_FOG2 = 0x30,
  CONST_SRC_CODE_FOG_COLOR = 0x31,
  CONST_SRC_CODE_SUN_FOG = 0x32,
  CONST_SRC_CODE_SUN_FOG_DIR = 0x33,
  CONST_SRC_CODE_SUN_FOG_COLOR = 0x34,
  CONST_SRC_CODE_GLOW_SETUP = 0x35,
  CONST_SRC_CODE_GLOW_APPLY = 0x36,
  CONST_SRC_CODE_COLOR_BIAS = 0x37,
  CONST_SRC_CODE_COLOR_TINT_BASE = 0x38,
  CONST_SRC_CODE_COLOR_TINT_DELTA = 0x39,
  CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS = 0x3A,
  CONST_SRC_CODE_SKY_TRANSITION = 0x3B,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST = 0x3C,
  CONST_SRC_CODE_DLIGHT_SPOT_SHADOWMAP_PIXEL_ADJUST = 0x3D,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE = 0x3E,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET = 0x3F,
  CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX = 0x40,
  CONST_SRC_CODE_PARTICLE_CLOUD_VEL_WORLD = 0x41,
  CONST_SRC_CODE_DEPTH_FROM_CLIP = 0x42,
  CONST_SRC_CODE_CODE_MESH_ARG_0 = 0x43,
  CONST_SRC_CODE_CODE_MESH_ARG_1 = 0x44,
  CONST_SRC_CODE_CODE_MESH_ARG_LAST = 0x44,
  CONST_SRC_CODE_GRID_LIGHTING_COORDS_AND_VIS = 0x45,
  CONST_SRC_CODE_GRID_LIGHTING_SH_0 = 0x46,
  CONST_SRC_CODE_GRID_LIGHTING_SH_1 = 0x47,
  CONST_SRC_CODE_GRID_LIGHTING_SH_2 = 0x48,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_0 = 0x49,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_1 = 0x4A,
  CONST_SRC_CODE_REFLECTION_LIGHTING_SH_2 = 0x4B,
  CONST_SRC_CODE_WIND_DIRECTION = 0x4C,
  CONST_SRC_CODE_MOTIONBLUR_DIRECTION_AND_MAGNITUDE = 0x4D,
  CONST_SRC_CODE_COMPOSITE_FX_DISTORTION = 0x4E,
  CONST_SRC_CODE_GLOW_BLOOM_SCALE = 0x4F,
  CONST_SRC_CODE_COMPOSITE_FX_OVERLAY_TEXCOORD = 0x50,
  CONST_SRC_CODE_COLOR_BIAS1 = 0x51,
  CONST_SRC_CODE_COLOR_TINT_BASE1 = 0x52,
  CONST_SRC_CODE_COLOR_TINT_DELTA1 = 0x53,
  CONST_SRC_CODE_POSTFX_FADE_EFFECT = 0x54,
  CONST_SRC_CODE_VIEWPORT_DIMENSIONS = 0x55,
  CONST_SRC_CODE_FRAMEBUFFER_READ = 0x56,
  CONST_SRC_CODE_RESIZE_PARAMS1 = 0x57,
  CONST_SRC_CODE_RESIZE_PARAMS2 = 0x58,
  CONST_SRC_CODE_RESIZE_PARAMS3 = 0x59,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_0 = 0x5A,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_1 = 0x5B,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_2 = 0x5C,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_3 = 0x5D,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_4 = 0x5E,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_5 = 0x5F,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_6 = 0x60,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_7 = 0x61,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_8 = 0x62,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_9 = 0x63,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_10 = 0x64,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_11 = 0x65,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_12 = 0x66,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_13 = 0x67,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_14 = 0x68,
  CONST_SRC_CODE_VARIANT_WIND_SPRING_15 = 0x69,
  CONST_SRC_CODE_CHARACTER_CHARRED_AMOUNT = 0x6A,
  CONST_SRC_CODE_POSTFX_CONTROL0 = 0x6B,
  CONST_SRC_CODE_POSTFX_CONTROL1 = 0x6C,
  CONST_SRC_CODE_POSTFX_CONTROL2 = 0x6D,
  CONST_SRC_CODE_POSTFX_CONTROL3 = 0x6E,
  CONST_SRC_CODE_POSTFX_CONTROL4 = 0x6F,
  CONST_SRC_CODE_POSTFX_CONTROL5 = 0x70,
  CONST_SRC_CODE_POSTFX_CONTROL6 = 0x71,
  CONST_SRC_CODE_POSTFX_CONTROL7 = 0x72,
  CONST_SRC_CODE_POSTFX_CONTROL8 = 0x73,
  CONST_SRC_CODE_POSTFX_CONTROL9 = 0x74,
  CONST_SRC_CODE_POSTFX_CONTROLA = 0x75,
  CONST_SRC_CODE_POSTFX_CONTROLB = 0x76,
  CONST_SRC_CODE_POSTFX_CONTROLC = 0x77,
  CONST_SRC_CODE_POSTFX_CONTROLD = 0x78,
  CONST_SRC_CODE_POSTFX_CONTROLE = 0x79,
  CONST_SRC_CODE_POSTFX_CONTROLF = 0x7A,
  CONST_SRC_CODE_HDRCONTROL_0 = 0x7B,
  CONST_SRC_CODE_HDRCONTROL_1 = 0x7C,
  CONST_SRC_CODE_GLIGHT_POSXS = 0x7D,
  CONST_SRC_CODE_GLIGHT_POSYS = 0x7E,
  CONST_SRC_CODE_GLIGHT_POSZS = 0x7F,
  CONST_SRC_CODE_GLIGHT_FALLOFFS = 0x80,
  CONST_SRC_CODE_GLIGHT_REDS = 0x81,
  CONST_SRC_CODE_GLIGHT_GREENS = 0x82,
  CONST_SRC_CODE_GLIGHT_BLUES = 0x83,
  CONST_SRC_CODE_DLIGHT_POSITION = 0x84,
  CONST_SRC_CODE_DLIGHT_DIFFUSE = 0x85,
  CONST_SRC_CODE_DLIGHT_ATTENUATION = 0x86,
  CONST_SRC_CODE_DLIGHT_FALLOFF = 0x87,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_0 = 0x88,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_1 = 0x89,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_2 = 0x8A,
  CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_3 = 0x8B,
  CONST_SRC_CODE_DLIGHT_SPOT_DIR = 0x8C,
  CONST_SRC_CODE_DLIGHT_SPOT_FACTORS = 0x8D,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_0 = 0x8E,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_1 = 0x8F,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_2 = 0x90,
  CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_3 = 0x91,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL0 = 0x92,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL1 = 0x93,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL2 = 0x94,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL3 = 0x95,
  CONST_SRC_CODE_CLOUD_LAYER_CONTROL4 = 0x96,
  CONST_SRC_CODE_HERO_LIGHTING_R = 0x97,
  CONST_SRC_CODE_HERO_LIGHTING_G = 0x98,
  CONST_SRC_CODE_HERO_LIGHTING_B = 0x99,
  CONST_SRC_CODE_LIGHT_HERO_SCALE = 0x9A,
  CONST_SRC_CODE_CINEMATIC_BLUR_BOX = 0x9B,
  CONST_SRC_CODE_CINEMATIC_BLUR_BOX2 = 0x9C,
  CONST_SRC_CODE_ADSZSCALE = 0x9D,
  CONST_SRC_CODE_UI3D_UV_SETUP_0 = 0x9E,
  CONST_SRC_CODE_UI3D_UV_SETUP_1 = 0x9F,
  CONST_SRC_CODE_UI3D_UV_SETUP_2 = 0xA0,
  CONST_SRC_CODE_UI3D_UV_SETUP_3 = 0xA1,
  CONST_SRC_CODE_UI3D_UV_SETUP_4 = 0xA2,
  CONST_SRC_CODE_UI3D_UV_SETUP_5 = 0xA3,
  CONST_SRC_CODE_CHARACTER_DISSOLVE_COLOR = 0xA4,
  CONST_SRC_CODE_CAMERA_LOOK = 0xA5,
  CONST_SRC_CODE_CAMERA_UP = 0xA6,
  CONST_SRC_CODE_CAMERA_SIDE = 0xA7,
  CONST_SRC_CODE_RIMINTENSITY = 0xA8,
  CONST_SRC_CODE_GENERIC_PARAM0 = 0xA9,
  CONST_SRC_CODE_GENERIC_PARAM1 = 0xAA,
  CONST_SRC_CODE_GENERIC_PARAM2 = 0xAB,
  CONST_SRC_CODE_GENERIC_PARAM3 = 0xAC,
  CONST_SRC_CODE_GENERIC_PARAM4 = 0xAD,
  CONST_SRC_CODE_GENERIC_PARAM5 = 0xAE,
  CONST_SRC_CODE_GENERIC_PARAM6 = 0xAF,
  CONST_SRC_CODE_GENERIC_PARAM7 = 0xB0,
  CONST_SRC_CODE_GENERIC_EYEOFFSET = 0xB1,
  CONST_SRC_CODE_GENERIC_QUADINTENSITY = 0xB2,
  CONST_SRC_CODE_WEAPON_PARAM0 = 0xB3,
  CONST_SRC_CODE_WEAPON_PARAM1 = 0xB4,
  CONST_SRC_CODE_WEAPON_PARAM2 = 0xB5,
  CONST_SRC_CODE_WEAPON_PARAM3 = 0xB6,
  CONST_SRC_CODE_WEAPON_PARAM4 = 0xB7,
  CONST_SRC_CODE_WEAPON_PARAM5 = 0xB8,
  CONST_SRC_CODE_WEAPON_PARAM6 = 0xB9,
  CONST_SRC_CODE_WEAPON_PARAM7 = 0xBA,
  CONST_SRC_CODE_WEAPON_PARAM8 = 0xBB,
  CONST_SRC_CODE_WEAPON_PARAM9 = 0xBC,
  CONST_SRC_CODE_QRCODE_0 = 0xBD,
  CONST_SRC_CODE_QRCODE_1 = 0xBE,
  CONST_SRC_CODE_QRCODE_2 = 0xBF,
  CONST_SRC_CODE_QRCODE_3 = 0xC0,
  CONST_SRC_CODE_QRCODE_4 = 0xC1,
  CONST_SRC_CODE_QRCODE_5 = 0xC2,
  CONST_SRC_CODE_QRCODE_6 = 0xC3,
  CONST_SRC_CODE_QRCODE_7 = 0xC4,
  CONST_SRC_CODE_QRCODE_8 = 0xC5,
  CONST_SRC_CODE_QRCODE_9 = 0xC6,
  CONST_SRC_CODE_QRCODE_10 = 0xC7,
  CONST_SRC_CODE_QRCODE_11 = 0xC8,
  CONST_SRC_CODE_EYEOFFSET = 0xC9,
  CONST_SRC_CODE_SKY_COLOR_MULTIPLIER = 0xCA,
  CONST_SRC_CODE_EXTRA_CAM_PARAM = 0xCB,
  CONST_SRC_CODE_EMBLEM_LUT_SELECTOR = 0xCC,
  CONST_SRC_CODE_DEBUG_COLOR_OVERRIDE = 0xCD,
  CONST_SRC_CODE_DEBUG_ALPHA_OVERRIDE = 0xCE,
  CONST_SRC_CODE_DEBUG_NORMAL_OVERRIDE = 0xCF,
  CONST_SRC_CODE_DEBUG_SPECULAR_OVERRIDE = 0xD0,
  CONST_SRC_CODE_DEBUG_GLOSS_OVERRIDE = 0xD1,
  CONST_SRC_CODE_DEBUG_OCCLUSION_OVERRIDE = 0xD2,
  CONST_SRC_CODE_NEVER_DIRTY_PS_END = 0xD3,
  CONST_SRC_CODE_COUNT_FLOAT4 = 0xD3,
  CONST_SRC_FIRST_CODE_MATRIX = 0xD3,
  CONST_SRC_CODE_WORLD_MATRIX = 0xD3,
  CONST_SRC_CODE_INVERSE_WORLD_MATRIX = 0xD4,
  CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX = 0xD5,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX = 0xD6,
  CONST_SRC_CODE_VIEW_MATRIX = 0xD7,
  CONST_SRC_CODE_INVERSE_VIEW_MATRIX = 0xD8,
  CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX = 0xD9,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX = 0xDA,
  CONST_SRC_CODE_PROJECTION_MATRIX = 0xDB,
  CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX = 0xDC,
  CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX = 0xDD,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX = 0xDE,
  CONST_SRC_CODE_WORLD_VIEW_MATRIX = 0xDF,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX = 0xE0,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX = 0xE1,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX = 0xE2,
  CONST_SRC_CODE_VIEW_PROJECTION_MATRIX = 0xE3,
  CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX = 0xE4,
  CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0xE5,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0xE6,
  CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX = 0xE7,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX = 0xE8,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0xE9,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0xEA,
  CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX = 0xEB,
  CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX = 0xEC,
  CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0xED,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0xEE,
  CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xEF,
  CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xF0,
  CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xF1,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0xF2,
  CONST_SRC_TOTAL_COUNT = 0xF3,
  CONST_SRC_NONE = 0xF4,
};

/* 366 */
enum $BBA3098F62A091CA0E0EE5EF0264C478
{
  GFX_SYM_FILTER_1 = 0x0,
  GFX_SYM_FILTER_2 = 0x1,
  GFX_SYM_FILTER_3 = 0x2,
  GFX_SYM_FILTER_4 = 0x3,
  GFX_SYM_FILTER_5 = 0x4,
  GFX_SYM_FILTER_6 = 0x5,
  GFX_SYM_FILTER_7 = 0x6,
  GFX_SYM_FILTER_8 = 0x7,
  GFX_SYM_FILTER_COUNT = 0x8,
};

/* 367 */
enum GfxPrimStatsStage
{
  GFX_PRIM_STATS_STAGE_FIRST = 0x0,
  GFX_PRIM_STATS_STAGE_DEFAULT = 0x0,
  GFX_PRIM_STATS_STAGE_SHADOW_SUN = 0x1,
  GFX_PRIM_STATS_STAGE_SHADOW_SPOT = 0x2,
  GFX_PRIM_STATS_STAGE_PREPASS = 0x3,
  GFX_PRIM_STATS_STAGE_LIT = 0x4,
  GFX_PRIM_STATS_STAGE_SONAR = 0x5,
  GFX_PRIM_STATS_STAGE_SONAR_DEPTH = 0x6,
  GFX_PRIM_STATS_STAGE_DEPTH_HACK = 0x7,
  GFX_PRIM_STATS_STAGE_LIGHTMAP = 0x8,
  GFX_PRIM_STATS_STAGE_LIT_QUASI_OPAQUE = 0x9,
  GFX_PRIM_STATS_STAGE_LIT_TRANS = 0xA,
  GFX_PRIM_STATS_STAGE_LIT_FX = 0xB,
  GFX_PRIM_STATS_STAGE_EMISSIVE_OPAQUE = 0xC,
  GFX_PRIM_STATS_STAGE_EMISSIVE_TRANS = 0xD,
  GFX_PRIM_STATS_STAGE_EMISSIVE_FX = 0xE,
  GFX_PRIM_STATS_STAGE_2D = 0xF,
  GFX_PRIM_STATS_STAGE_COUNT = 0x10,
  GFX_PRIM_STATS_STAGE_LAST = 0xF,
};

/* 368 */
enum GfxPrimStatsTarget
{
  GFX_PRIM_STATS_FIRST = 0x0,
  GFX_PRIM_STATS_DEFAULT = 0x0,
  GFX_PRIM_STATS_WORLD = 0x1,
  GFX_PRIM_STATS_SMODELRIGID = 0x2,
  GFX_PRIM_STATS_XMODELRIGID = 0x3,
  GFX_PRIM_STATS_XMODELSKINNED = 0x4,
  GFX_PRIM_STATS_BMODEL = 0x5,
  GFX_PRIM_STATS_FX = 0x6,
  GFX_PRIM_STATS_HUD = 0x7,
  GFX_PRIM_STATS_DEBUG = 0x8,
  GFX_PRIM_STATS_CODE = 0x9,
  GFX_PRIM_STATS_LAST = 0x9,
  GFX_PRIM_STATS_COUNT = 0xA,
};

/* 369 */
enum GfxPrimStatsCounters
{
  GFX_PRIM_STATS_COUNTER_PRIMS = 0x0,
  GFX_PRIM_STATS_COUNTER_TRIS = 0x1,
  GFX_PRIM_STATS_COUNTER_SURFS = 0x2,
  GFX_PRIM_STATS_COUNTER_MATS = 0x3,
  GFX_PRIM_STATS_COUNTER_STATIC_IDXS = 0x4,
  GFX_PRIM_STATS_COUNTER_STATIC_VERTS = 0x5,
  GFX_PRIM_STATS_COUNTER_DYNAMIC_IDXS = 0x6,
  GFX_PRIM_STATS_COUNTER_DYNAMIC_VERTS = 0x7,
  GFX_PRIM_STATS_COUNTER_COUNT = 0x8,
};

/* 370 */
enum $412CBBA6A069E8F5B8AD4D13AE59A223
{
  CMDBUF_LIT_BSP = 0x0,
  CMDBUF_LIT_BSP_END = 0x0,
  CMDBUF_LIT_STATIC_MODEL = 0x1,
  CMDBUF_LIT_STATIC_MODEL_END = 0x1,
  CMDBUF_LIT = 0x2,
  CMDBUF_LIT_END = 0x2,
  CMDBUF_LIT_BSP_POST_RESOLVE = 0x3,
  CMDBUF_LIT_STATIC_MODEL_POST_RESOLVE = 0x4,
  CMDBUF_LIT_POST_RESOLVE = 0x5,
  CMDBUF_LIT_SONAR = 0x6,
  CMDBUF_LIGHT_MAP_BSP = 0x7,
  CMDBUF_LIGHT_MAP_BSP_END = 0x8,
  CMDBUF_LIGHT_MAP_STATIC_MODEL = 0x9,
  CMDBUF_LIGHT_MAP_STATIC_MODEL_END = 0xA,
  CMDBUF_LIGHT_MAP = 0xB,
  CMDBUF_LIGHT_MAP_END = 0xC,
  CMDBUF_LIGHT_MAP_BSP_POST_RESOLVE = 0xD,
  CMDBUF_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 0xE,
  CMDBUF_LIGHT_MAP_POST_RESOLVE = 0xF,
  CMDBUF_DEPTH_HACK = 0x10,
  CMDBUF_TRANS = 0x11,
  CMDBUF_TRANS_POST_FX = 0x12,
  CMDBUF_LIT_QUASI_OPAQUE = 0x13,
  CMDBUF_EMISSIVE_OPAQUE = 0x14,
  CMDBUF_EMISSIVE_FX = 0x15,
  CMDBUF_VIEWMODEL_FX = 0x16,
  CMDBUF_SUPERFLARE = 0x17,
  CMDBUF_VIEWMODEL_TRANS = 0x18,
  CMDBUF_POST_BLUR = 0x19,
  CMDBUF_SUN_SHADOW_MAP0 = 0x1A,
  CMDBUF_SUN_SHADOW_MAP1 = 0x1B,
  CMDBUF_SPOT_SHADOW_MAP0 = 0x1C,
  CMDBUF_SPOT_SHADOW_MAP1 = 0x1D,
  CMDBUF_SPOT_SHADOW_MAP2 = 0x1E,
  CMDBUF_SPOT_SHADOW_MAP3 = 0x1F,
  CMDBUF_PREPASS = 0x20,
  CMDBUF_COUNT = 0x21,
};

/* 371 */
enum GfxDepthRangeType
{
  GFX_DEPTH_RANGE_SCENE = 0x0,
  GFX_DEPTH_RANGE_VIEWMODEL = 0x40000000,
  GFX_DEPTH_RANGE_FULL = 0xFFFFFFFF,
};

/* 372 */
enum $C156EA94900A25ACB37AB6C4E6570920
{
  XSURFACE_FLAG_QUANTIZED = 0x1,
  XSURFACE_FLAG_SKINNED = 0x2,
  XSURFACE_FLAG_CONSTANT_COLOR = 0x4,
  XSURFACE_FLAG_DEFORMED = 0x80,
};

/* 373 */
enum $BA0B8FB55513FA14053B2005999DEB52
{
  BG_EMBLEM_LOCKED = 0x0,
  BG_EMBLEM_PURCHASED = 0x1,
  BG_EMBLEM_AFFORDABLE = 0x2,
  BG_EMBLEM_CATEGORY_CUSTOM_START = 0x3,
  BG_EMBLEM_CATEGORY_CUSTOM_END = 0xF,
  BG_EMBLEM_CATEGORY_COUNT = 0x10,
};

/* 374 */
enum $1A43E199D598702BA6AE9AAEEC23C2D4
{
  BG_EMBLEM_ICON_TYPE_LOCKED = 0x0,
  BG_EMBLEM_ICON_TYPE_START = 0x1,
  BG_EMBLEM_ICON_TYPE_END = 0xF,
  BG_EMBLEM_ICON_TYPE_COUNT = 0x10,
};

/* 375 */
enum $42AD3FB5B96667CAA4E976D8E9D14CEE
{
  BG_EMBLEM_BGCATEGORY_LOCKED = 0x0,
  BG_EMBLEM_BGCATEGORY_START = 0x1,
  BG_EMBLEM_BGCATEGORY_END = 0xF,
  BG_EMBLEM_BGCATEGORY_COUNT = 0x10,
};

/* 376 */
enum $FA0009E2E8E456BE8F3D72B31C37E880
{
  STREAM_SRC_POSITION = 0x0,
  STREAM_SRC_COLOR = 0x1,
  STREAM_SRC_TEXCOORD_0 = 0x2,
  STREAM_SRC_NORMAL = 0x3,
  STREAM_SRC_TANGENT = 0x4,
  STREAM_SRC_TEXCOORD_1 = 0x5,
  STREAM_SRC_OPTIONAL_BEGIN = 0x6,
  STREAM_SRC_PRE_OPTIONAL_BEGIN = 0x5,
  STREAM_SRC_TEXCOORD_2 = 0x6,
  STREAM_SRC_TEXCOORD_3 = 0x7,
  STREAM_SRC_NORMAL_TRANSFORM_0 = 0x8,
  STREAM_SRC_NORMAL_TRANSFORM_1 = 0x9,
  STREAM_SRC_BLEND_WEIGHT = 0xA,
  STREAM_SRC_COUNT = 0xB,
};

/* 377 */
enum $3CEEE3EA7EBF190B3461370AE713A767
{
  STREAM_DST_POSITION = 0x0,
  STREAM_DST_NORMAL = 0x1,
  STREAM_DST_COLOR_0 = 0x2,
  STREAM_DST_COLOR_1 = 0x3,
  STREAM_DST_DEPTH = 0x4,
  STREAM_DST_TEXCOORD_0 = 0x5,
  STREAM_DST_TEXCOORD_1 = 0x6,
  STREAM_DST_TEXCOORD_2 = 0x7,
  STREAM_DST_TEXCOORD_3 = 0x8,
  STREAM_DST_TEXCOORD_4 = 0x9,
  STREAM_DST_TEXCOORD_5 = 0xA,
  STREAM_DST_TEXCOORD_6 = 0xB,
  STREAM_DST_TEXCOORD_7 = 0xC,
  STREAM_DST_TEXCOORD_8 = 0xD,
  STREAM_DST_TEXCOORD_9 = 0xE,
  STREAM_DST_TEXCOORD_10 = 0xF,
  STREAM_DST_TEXCOORD_11 = 0x10,
  STREAM_DST_TEXCOORD_12 = 0x11,
  STREAM_DST_TEXCOORD_13 = 0x12,
  STREAM_DST_BLENDWEIGHT = 0x13,
  STREAM_DST_COUNT = 0x14,
};

/* 378 */
enum demoBookmarkType
{
  DEMO_BOOKMARK_KILL = 0x0,
  DEMO_BOOKMARK_GAME_FIRST = 0x0,
  DEMO_BOOKMARK_EVENT = 0x1,
  DEMO_BOOKMARK_ZM_ROUND_END = 0x2,
  DEMO_BOOKMARK_ZM_PLAYER_DOWNED = 0x3,
  DEMO_BOOKMARK_ZM_PLAYER_REVIVED = 0x4,
  DEMO_BOOKMARK_ZM_PLAYER_BLEDOUT = 0x5,
  DEMO_BOOKMARK_ZM_PLAYER_USE_MAGICBOX = 0x6,
  DEMO_BOOKMARK_SCORE_EVENT = 0x7,
  DEMO_BOOKMARK_MEDAL = 0x8,
  DEMO_BOOKMARK_ROUND_RESULT = 0x9,
  DEMO_BOOKMARK_GAME_RESULT = 0xA,
  DEMO_BOOKMARK_ZM_POWERUP_DROPPED = 0xB,
  DEMO_BOOKMARK_ZM_PLAYER_POWERUP_GRABBED = 0xC,
  DEMO_BOOKMARK_ZM_PLAYER_PERK = 0xD,
  DEMO_BOOKMARK_ZM_POWER = 0xE,
  DEMO_BOOKMARK_ZM_PLAYER_DOOR = 0xF,
  DEMO_BOOKMARK_ZM_PLAYER_BUILDABLE_PLACED = 0x10,
  DEMO_BOOKMARK_ZM_PLAYER_USE_PACKAPUNCH = 0x11,
  DEMO_BOOKMARK_ZM_PLAYER_RAMPAGE = 0x12,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_SPECIAL = 0x13,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_MULTIATTACK = 0x14,
  DEMO_BOOKMARK_ZM_PLAYER_MEAT_STINK = 0x15,
  DEMO_BOOKMARK_ZM_PLAYER_GRABBED_MAGICBOX = 0x16,
  DEMO_BOOKMARK_ZM_PLAYER_GRABBED_PACKAPUNCH = 0x17,
  DEMO_BOOKMARK_ZM_PLAYER_GRENADE_SPECIAL_LONG = 0x18,
  DEMO_BOOKMARK_GAME_LAST = 0x18,
  DEMO_BOOKMARK_BADSPAWN = 0x19,
  DEMO_BOOKMARK_BADSERVERFRAME = 0x1A,
  DEMO_BOOKMARK_BADSERVERBANDWIDTH = 0x1B,
  DEMO_BOOKMARK_LAST = 0x1C,
};

/* 379 */
enum D3D11_CLEAR_FLAG
{
  D3D11_CLEAR_DEPTH = 0x1,
  D3D11_CLEAR_STENCIL = 0x2,
};

/* 380 */
enum $AD3EB994F0AACDF79C8F5FC7C1509B00
{
  R_LIGHT_OVERRIDE_BLACK = 0x0,
  R_LIGHT_OVERRIDE_NONE = 0x1,
  R_LIGHT_OVERRIDE_INTENSITY_1 = 0x2,
  R_LIGHT_OVERRIDE_INTENSITY_2 = 0x3,
  R_LIGHT_OVERRIDE_INTENSITY_3 = 0x4,
  R_LIGHT_OVERRIDE_INTENSITY_4 = 0x5,
  R_LIGHT_OVERRIDE_INTENSITY_5 = 0x6,
  R_LIGHT_OVERRIDE_INTENSITY_6 = 0x7,
  R_LIGHT_OVERRIDE_INTENSITY_7 = 0x8,
  R_LIGHT_OVERRIDE_INTENSITY_8 = 0x9,
  R_LIGHT_OVERRIDE_INTENSITY_9 = 0xA,
  R_LIGHT_OVERRIDE_INTENSITY_10 = 0xB,
  R_LIGHT_OVERRIDE_INTENSITY_11 = 0xC,
  R_LIGHT_OVERRIDE_INTENSITY_12 = 0xD,
  R_LIGHT_OVERRIDE_INTENSITY_13 = 0xE,
  R_LIGHT_OVERRIDE_INTENSITY_14 = 0xF,
  R_LIGHT_OVERRIDE_INTENSITY_15 = 0x10,
  R_LIGHT_OVERRIDE_INTENSITY_16 = 0x11,
  R_LIGHT_OVERRIDE_INTENSITY_17 = 0x12,
  R_LIGHT_OVERRIDE_INTENSITY_18 = 0x13,
  R_LIGHT_OVERRIDE_INTENSITY_19 = 0x14,
  R_LIGHT_OVERRIDE_INTENSITY_20 = 0x15,
  R_LIGHT_OVERRIDE_INTENSITY_21 = 0x16,
  R_LIGHT_OVERRIDE_INTENSITY_22 = 0x17,
  R_LIGHT_OVERRIDE_INTENSITY_23 = 0x18,
  R_LIGHT_OVERRIDE_INTENSITY_24 = 0x19,
  R_LIGHT_OVERRIDE_INTENSITY_25 = 0x1A,
  R_LIGHT_OVERRIDE_INTENSITY_26 = 0x1B,
  R_LIGHT_OVERRIDE_INTENSITY_27 = 0x1C,
  R_LIGHT_OVERRIDE_INTENSITY_28 = 0x1D,
  R_LIGHT_OVERRIDE_INTENSITY_29 = 0x1E,
  R_LIGHT_OVERRIDE_INTENSITY_30 = 0x1F,
  R_LIGHT_OVERRIDE_INTENSITY_31 = 0x20,
  R_LIGHT_OVERRIDE_COUNT = 0x21,
};

/* 381 */
enum $1079F2444C84FB82F2AC30601816D9DF
{
  FOG_NONE = 0x0,
  FOG_SERVER = 0x1,
  FOG_CURRENT = 0x2,
  FOG_LAST = 0x3,
  FOG_TARGET = 0x4,
  FOG_WORLDVOLUME = 0x5,
  FOG_COUNT = 0x6,
};

/* 382 */
enum MaterialVertexDeclType
{
  VERTDECL_GENERIC = 0x0,
  VERTDECL_PACKED = 0x1,
  VERTDECL_PACKED_LMAP_VC = 0x2,
  VERTDECL_WORLD = 0x3,
  VERTDECL_PACKED_WORLD = 0x4,
  VERTDECL_PACKED_WORLD_T1N0 = 0x5,
  VERTDECL_PACKED_WORLD_T1N1 = 0x6,
  VERTDECL_PACKED_WORLD_T2N0 = 0x7,
  VERTDECL_PACKED_WORLD_T2N1 = 0x8,
  VERTDECL_PACKED_WORLD_T2N2 = 0x9,
  VERTDECL_PACKED_WORLD_T3N0 = 0xA,
  VERTDECL_PACKED_WORLD_T3N1 = 0xB,
  VERTDECL_PACKED_WORLD_T3N2 = 0xC,
  VERTDECL_PACKED_WORLD_T4N0 = 0xD,
  VERTDECL_PACKED_WORLD_T4N1 = 0xE,
  VERTDECL_PACKED_WORLD_T4N2 = 0xF,
  VERTDECL_POS_TEX = 0x10,
  VERTDECL_PARTICLECLOUD = 0x11,
  VERTDECL_POS_COLOR = 0x12,
  VERTDECL_POS_FP16TEX = 0x13,
  VERTDECL_COUNT = 0x14,
};

/* 383 */
enum MaterialTextureSource
{
  TEXTURE_SRC_CODE_BLACK = 0x0,
  TEXTURE_SRC_CODE_WHITE = 0x1,
  TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP = 0x2,
  TEXTURE_SRC_CODE_MODEL_LIGHTING = 0x3,
  TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY = 0x4,
  TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY = 0x5,
  TEXTURE_SRC_CODE_SHADOWMAP_SUN = 0x6,
  TEXTURE_SRC_CODE_SHADOWMAP_SPOT = 0x7,
  TEXTURE_SRC_CODE_FEEDBACK = 0x8,
  TEXTURE_SRC_CODE_RESOLVED_POST_SUN = 0x9,
  TEXTURE_SRC_CODE_RESOLVED_SCENE = 0xA,
  TEXTURE_SRC_CODE_POST_EFFECT_SRC = 0xB,
  TEXTURE_SRC_CODE_POST_EFFECT_GODRAYS = 0xC,
  TEXTURE_SRC_CODE_POST_EFFECT_0 = 0xD,
  TEXTURE_SRC_CODE_POST_EFFECT_1 = 0xE,
  TEXTURE_SRC_CODE_LIGHT_ATTENUATION = 0xF,
  TEXTURE_SRC_CODE_DLIGHT_ATTENUATION = 0x10,
  TEXTURE_SRC_CODE_OUTDOOR = 0x11,
  TEXTURE_SRC_CODE_FLOATZ = 0x12,
  TEXTURE_SRC_CODE_PROCESSED_FLOATZ = 0x13,
  TEXTURE_SRC_CODE_RAW_FLOATZ = 0x14,
  TEXTURE_SRC_CODE_STENCIL = 0x15,
  TEXTURE_SRC_CODE_CINEMATIC_Y = 0x16,
  TEXTURE_SRC_CODE_CINEMATIC_CR = 0x17,
  TEXTURE_SRC_CODE_CINEMATIC_CB = 0x18,
  TEXTURE_SRC_CODE_CINEMATIC_A = 0x19,
  TEXTURE_SRC_CODE_REFLECTION_PROBE = 0x1A,
  TEXTURE_SRC_CODE_FEATHER_FLOAT_Z = 0x1B,
  TEXTURE_SRC_CODE_TEXTURE_0 = 0x1C,
  TEXTURE_SRC_CODE_TEXTURE_1 = 0x1D,
  TEXTURE_SRC_CODE_TEXTURE_2 = 0x1E,
  TEXTURE_SRC_CODE_TEXTURE_3 = 0x1F,
  TEXTURE_SRC_CODE_IMPACT_MASK_DEPRECATED = 0x20,
  TEXTURE_SRC_CODE_UI3D = 0x21,
  TEXTURE_SRC_CODE_MISSILE_CAM = 0x22,
  TEXTURE_SRC_CODE_MISSILE_CAM_0 = 0x23,
  TEXTURE_SRC_CODE_MISSILE_CAM_1 = 0x24,
  TEXTURE_SRC_CODE_MISSILE_CAM_2 = 0x25,
  TEXTURE_SRC_CODE_MISSILE_CAM_3 = 0x26,
  TEXTURE_SRC_CODE_COMPOSITE_RESULT = 0x27,
  TEXTURE_SRC_CODE_HEATMAP = 0x28,
  TEXTURE_SRC_CODE_SONAR_COLOR = 0x29,
  TEXTURE_SRC_CODE_SONAR_DEPTH = 0x2A,
  TEXTURE_SRC_CODE_QRCODE_0 = 0x2B,
  TEXTURE_SRC_CODE_QRCODE_1 = 0x2C,
  TEXTURE_SRC_CODE_QRCODE_2 = 0x2D,
  TEXTURE_SRC_CODE_QRCODE_3 = 0x2E,
  TEXTURE_SRC_CODE_QRCODE_4 = 0x2F,
  TEXTURE_SRC_CODE_QRCODE_5 = 0x30,
  TEXTURE_SRC_CODE_QRCODE_6 = 0x31,
  TEXTURE_SRC_CODE_QRCODE_7 = 0x32,
  TEXTURE_SRC_CODE_QRCODE_8 = 0x33,
  TEXTURE_SRC_CODE_QRCODE_9 = 0x34,
  TEXTURE_SRC_CODE_QRCODE_10 = 0x35,
  TEXTURE_SRC_CODE_QRCODE_11 = 0x36,
  TEXTURE_SRC_CODE_COUNT = 0x37,
};

/* 384 */
enum $4B9E0CA1D4CB2853FB9099B8EAF4FF57
{
  MTL_ARG_MATERIAL_VERTEX_CONST = 0x0,
  MTL_ARG_LITERAL_VERTEX_CONST = 0x1,
  MTL_ARG_MATERIAL_PIXEL_SAMPLER = 0x2,
  MTL_ARG_CODE_PRIM_BEGIN = 0x3,
  MTL_ARG_CODE_VERTEX_CONST = 0x3,
  MTL_ARG_CODE_PIXEL_SAMPLER = 0x4,
  MTL_ARG_CODE_PIXEL_CONST = 0x5,
  MTL_ARG_CODE_PRIM_END = 0x6,
  MTL_ARG_MATERIAL_PIXEL_CONST = 0x6,
  MTL_ARG_LITERAL_PIXEL_CONST = 0x7,
  MLT_ARG_COUNT = 0x8,
};

/* 385 */
enum $26A775274E1959BFAEBEFAA49DDF73CF
{
  SCENE_VIEW_CAMERA = 0x0,
  SCENE_VIEW_SUNSHADOW_0 = 0x1,
  SCENE_VIEW_SUNSHADOW_1 = 0x2,
  SCENE_VIEW_COUNT = 0x3,
  SCENE_VIEW_SPOTSHADOW_0 = 0x3,
  SCENE_VIEW_SPOTSHADOW_1 = 0x4,
  SCENE_VIEW_SPOTSHADOW_2 = 0x5,
  SCENE_VIEW_SPOTSHADOW_3 = 0x6,
  SCENE_VIEW_COUNT_ENTVIS = 0x7,
};

/* 386 */
enum MaterialUpdateFrequency
{
  MTL_UPDATE_PER_PRIM = 0x0,
  MTL_UPDATE_PER_OBJECT = 0x1,
  MTL_UPDATE_RARELY = 0x2,
  MTL_UPDATE_CUSTOM = 0x3,
  MTL_UPDATE_IGNORE = 0x4,
};

/* 387 */
enum $3A91044D1FD8C43D79BCF9A8B8ED810E
{
  STATE_FLAG_CULL_BACK = 0x1,
  STATE_FLAG_CULL_FRONT = 0x2,
  STATE_FLAG_DECAL = 0x4,
  STATE_FLAG_WRITES_DEPTH = 0x8,
  STATE_FLAG_USES_DEPTH_BUFFER = 0x10,
  STATE_FLAG_USES_STENCIL_BUFFER = 0x20,
  STATE_FLAG_CULL_BACK_SHADOW = 0x40,
  STATE_FLAG_CULL_FRONT_SHADOW = 0x80,
};

/* 388 */
enum GfxRenderCommand
{
  RC_END_OF_LIST = 0x0,
  RC_SET_CUSTOM_CONSTANT = 0x1,
  RC_SET_MATERIAL_COLOR = 0x2,
  RC_SAVE_SCREEN = 0x3,
  RC_SAVE_SCREEN_SECTION = 0x4,
  RC_CLEAR_SCREEN = 0x5,
  RC_BEGIN_VIEW = 0x6,
  RC_SET_VIEWPORT = 0x7,
  RC_SET_SCISSOR = 0x8,
  RC_RESOLVE_COMPOSITE = 0x9,
  RC_PC_COPY_IMAGE_GEN_MIP = 0xA,
  RC_FIRST_NONCRITICAL = 0xB,
  RC_STRETCH_PIC = 0xB,
  RC_STRETCH_PIC_FLIP_ST = 0xC,
  RC_STRETCH_PIC_ROTATE_XY = 0xD,
  RC_STRETCH_PIC_ROTATE_ST = 0xE,
  RC_DRAW_QUAD_PIC = 0xF,
  RC_DRAW_FULL_SCREEN_COLORED_QUAD = 0x10,
  RC_DRAW_TEXT_2D = 0x11,
  RC_DRAW_TEXT_3D = 0x12,
  RC_BLEND_SAVED_SCREEN_BLURRED = 0x13,
  RC_BLEND_SAVED_SCREEN_FLASHED = 0x14,
  RC_DRAW_POINTS = 0x15,
  RC_DRAW_LINES = 0x16,
  RC_DRAW_UI_QUADS = 0x17,
  RC_DRAW_UI_QUADS_REPLACE_IMAGE = 0x18,
  RC_DRAW_TRIANGLES = 0x19,
  RC_DRAW_UI_TRIANGLES = 0x1A,
  RC_DRAW_QUADLIST_2D = 0x1B,
  RC_DRAW_EMBLEM_LAYER = 0x1C,
  RC_STRETCH_COMPOSITE = 0x1D,
  RC_PROJECTION_SET = 0x1E,
  RC_DRAW_FRAMED = 0x1F,
  RC_CONSTANT_SET = 0x20,
  RC_COUNT = 0x21,
};

/* 389 */
enum $E6122F0407812146080905DFBF4F2FAB
{
  R_ZEBRASTRIPE_LEVEL_0 = 0x0,
  R_ZEBRASTRIPE_LEVEL_1 = 0x1,
  R_ZEBRASTRIPE_LEVEL_2 = 0x2,
  R_ZEBRASTRIPE_LEVEL_3 = 0x3,
  R_ZEBRASTRIPE_COUNT = 0x3,
};

/* 390 */
enum $621403C95F0C948D62ABE644C3C2A5D6
{
  R_RENDERTARGET_NULL = 0x0,
  R_RENDERTARGET_SAVED_SCREEN = 0x1,
  R_RENDERTARGET_FRAME_BUFFER = 0x2,
  R_RENDERTARGET_FRAME_BUFFER_COMPOSITE = 0x3,
  R_RENDERTARGET_SCENE = 0x4,
  R_RENDERTARGET_SCENE_NULLCOLOR = 0x5,
  R_RENDERTARGET_RESOLVED_POST_SUN = 0x6,
  R_RENDERTARGET_RESOLVED_SCENE = 0x7,
  R_RENDERTARGET_FLOAT_Z = 0x8,
  R_RENDERTARGET_PINGPONG_0 = 0x9,
  R_RENDERTARGET_PINGPONG_1 = 0xA,
  R_RENDERTARGET_POST_EFFECT_SRC = 0xB,
  R_RENDERTARGET_POST_EFFECT_GODRAYS = 0xC,
  R_RENDERTARGET_POST_EFFECT_0 = 0xD,
  R_RENDERTARGET_POST_EFFECT_1 = 0xE,
  R_RENDERTARGET_SHADOWMAP_SUN = 0xF,
  R_RENDERTARGET_SHADOWMAP_SPOT = 0x10,
  R_RENDERTARGET_UI3D = 0x11,
  R_RENDERTARGET_UI3D_PING_PONG = 0x12,
  R_RENDERTARGET_MISSILE_CAM = 0x13,
  R_RENDERTARGET_FLOAT_Z_MISSILE_CAM = 0x14,
  R_RENDERTARGET_MISSILE_CAM_MULTI_0 = 0x15,
  R_RENDERTARGET_MISSILE_CAM_MULTI_1 = 0x16,
  R_RENDERTARGET_MISSILE_CAM_MULTI_2 = 0x17,
  R_RENDERTARGET_MISSILE_CAM_MULTI_3 = 0x18,
  R_RENDERTARGET_COMPOSITE = 0x19,
  R_RENDERTARGET_DOF_SCENE_MASK_PING = 0x1A,
  R_RENDERTARGET_DOF_SCENE_MASK_PONG = 0x1B,
  R_RENDERTARGET_DOF_SCENE_FP16 = 0x1C,
  R_RENDERTARGET_DOF_SCENE_FP16_0 = 0x1D,
  R_RENDERTARGET_DOF_SCENE_FP16_1 = 0x1E,
  R_RENDERTARGET_DOF_SCENE_FP16_2 = 0x1F,
  R_RENDERTARGET_DOF_SCENE_FP16_3 = 0x20,
  R_RENDERTARGET_DOF_SCENE_FP16_4 = 0x21,
  R_RENDERTARGET_DOF_SCENE_FP16_5 = 0x22,
  R_RENDERTARGET_DOF_SCENE_FINAL = 0x23,
  R_RENDERTARGET_BLOOM_MIP1_PING = 0x24,
  R_RENDERTARGET_BLOOM_MIP1_PONG = 0x25,
  R_RENDERTARGET_BLOOM_MIP2_PING = 0x26,
  R_RENDERTARGET_BLOOM_MIP2_PONG = 0x27,
  R_RENDERTARGET_BLOOM_MIP3_PING = 0x28,
  R_RENDERTARGET_BLOOM_MIP3_PONG = 0x29,
  R_RENDERTARGET_BLOOM_MIP4_PING = 0x2A,
  R_RENDERTARGET_BLOOM_MIP4_PONG = 0x2B,
  R_RENDERTARGET_BLOOM_STREAK = 0x2C,
  R_RENDERTARGET_LUT2D = 0x2D,
  R_RENDERTARGET_SSAO_CSZ = 0x2E,
  R_RENDERTARGET_SSAO_CSZ_0 = 0x2F,
  R_RENDERTARGET_SSAO_CSZ_1 = 0x30,
  R_RENDERTARGET_SSAO_CSZ_2 = 0x31,
  R_RENDERTARGET_SSAO_CSZ_3 = 0x32,
  R_RENDERTARGET_SSAO_CSZ_4 = 0x33,
  R_RENDERTARGET_SSAO_CSZ_5 = 0x34,
  R_RENDERTARGET_SSAO_1 = 0x35,
  R_RENDERTARGET_SSAO_2 = 0x36,
  R_RENDERTARGET_TXAA_FEEDBACK = 0x37,
  R_RENDERTARGET_TXAA_SRGB = 0x38,
  R_RENDERTARGET_SONAR = 0x39,
  R_RENDERTARGET_SONAR_BLUR = 0x3A,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_FULL = 0x3B,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_PARTITION_0 = 0x3C,
  R_RENDERTARGET_SHADOWMAP_SUN_HI_PARTITION_1 = 0x3D,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_FULL = 0x3E,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_PARTITION_0 = 0x3F,
  R_RENDERTARGET_SHADOWMAP_SUN_LO_PARTITION_1 = 0x40,
  R_RENDERTARGET_SHADOWMAP_SPOT_FULL = 0x41,
  R_RENDERTARGET_SHADOWMAP_SPOT_0 = 0x42,
  R_RENDERTARGET_SHADOWMAP_SPOT_1 = 0x43,
  R_RENDERTARGET_SHADOWMAP_SPOT_2 = 0x44,
  R_RENDERTARGET_SHADOWMAP_SPOT_3 = 0x45,
  R_RENDERTARGET_SHADOWMAP_SPOT_HI_0 = 0x46,
  R_RENDERTARGET_SHADOWMAP_SPOT_HI_1 = 0x47,
  R_RENDERTARGET_COUNT = 0x48,
  R_RENDERTARGET_NONE = 0x0,
};

/* 391 */
enum $4CE6903AE494DB8D67BA38E7062AC970
{
  IMG_CATEGORY_UNKNOWN = 0x0,
  IMG_CATEGORY_AUTO_GENERATED = 0x1,
  IMG_CATEGORY_LIGHTMAP = 0x2,
  IMG_CATEGORY_LOAD_FROM_FILE = 0x3,
  IMG_CATEGORY_RAW = 0x4,
  IMG_CATEGORY_FIRST_UNMANAGED = 0x5,
  IMG_CATEGORY_RENDERTARGET = 0x5,
  IMG_CATEGORY_TEMP = 0x6,
};

/* 392 */
enum $E039F973340A0E27C29B04AB0197BED7
{
  PICMIP_PLATFORM_USED = 0x0,
  PICMIP_PLATFORM_MINSPEC = 0x1,
  PICMIP_PLATFORM_COUNT = 0x2,
};

/* 393 */
enum $E18F0E1C2851AA6A061B10079235D647
{
  TEXTURE_FILTER_DISABLED = 0x0,
  TEXTURE_FILTER_NEAREST = 0x1,
  TEXTURE_FILTER_LINEAR = 0x2,
  TEXTURE_FILTER_ANISO2X = 0x3,
  TEXTURE_FILTER_ANISO4X = 0x4,
  TEXTURE_FILTER_COMPARE = 0x5,
};

/* 394 */
enum $7877B361D9334B18A84A891D0480E444
{
  SAMPLER_FILTER_SHIFT = 0x0,
  SAMPLER_FILTER_NEAREST = 0x1,
  SAMPLER_FILTER_LINEAR = 0x2,
  SAMPLER_FILTER_ANISO2X = 0x3,
  SAMPLER_FILTER_ANISO4X = 0x4,
  SAMPLER_FILTER_COMPARE = 0x5,
  SAMPLER_FILTER_MASK = 0x7,
  SAMPLER_MIPMAP_SHIFT = 0x3,
  SAMPLER_MIPMAP_DISABLED = 0x0,
  SAMPLER_MIPMAP_NEAREST = 0x8,
  SAMPLER_MIPMAP_LINEAR = 0x10,
  SAMPLER_MIPMAP_COUNT = 0x3,
  SAMPLER_MIPMAP_MASK = 0x18,
  SAMPLER_CLAMP_U_SHIFT = 0x5,
  SAMPLER_CLAMP_V_SHIFT = 0x6,
  SAMPLER_CLAMP_W_SHIFT = 0x7,
  SAMPLER_CLAMP_U = 0x20,
  SAMPLER_CLAMP_V = 0x40,
  SAMPLER_CLAMP_W = 0x80,
  SAMPLER_CLAMP_MASK = 0xE0,
  SAMPLER_ANISO_SHIFT = 0x8,
  SAMPLER_ANISO_1X = 0x0,
  SAMPLER_ANISO_2X = 0x100,
  SAMPLER_ANISO_4X = 0x200,
  SAMPLER_ANISO_6X = 0x300,
  SAMPLER_ANISO_8X = 0x400,
  SAMPLER_ANISO_10X = 0x500,
  SAMPLER_ANISO_12X = 0x600,
  SAMPLER_ANISO_16X = 0x700,
  SAMPLER_ANISO_MASK = 0x700,
  SAMPLER_CONVOLUTION = 0x20000,
  SAMPLER_GAMMA = 0x40000,
  SAMPLER_UNNORMALIZED_UV = 0x80000,
  SAMPLER_DIRECT_FILTER_UNNORMALIZED = 0x80000,
};

/* 395 */
enum GfxBlend
{
  GFXS_BLEND_DISABLED = 0x0,
  GFXS_BLEND_ZERO = 0x1,
  GFXS_BLEND_ONE = 0x2,
  GFXS_BLEND_SRCCOLOR = 0x3,
  GFXS_BLEND_INVSRCCOLOR = 0x4,
  GFXS_BLEND_SRCALPHA = 0x5,
  GFXS_BLEND_INVSRCALPHA = 0x6,
  GFXS_BLEND_DESTALPHA = 0x7,
  GFXS_BLEND_INVDESTALPHA = 0x8,
  GFXS_BLEND_DESTCOLOR = 0x9,
  GFXS_BLEND_INVDESTCOLOR = 0xA,
  GFXS_BLEND_MASK = 0xF,
};

/* 396 */
enum GfxBlendOp
{
  GFXS_BLENDOP_DISABLED = 0x0,
  GFXS_BLENDOP_ADD = 0x1,
  GFXS_BLENDOP_SUBTRACT = 0x2,
  GFXS_BLENDOP_REVSUBTRACT = 0x3,
  GFXS_BLENDOP_MIN = 0x4,
  GFXS_BLENDOP_MAX = 0x5,
  GFXS_BLENDOP_MASK = 0x7,
};

/* 397 */
enum $7233C4F16832DFA7BB124F042BA8ECEB
{
  GFXS0_SRCBLEND_RGB_SHIFT = 0x0,
  GFXS0_SRCBLEND_RGB_MASK = 0xF,
  GFXS0_DSTBLEND_RGB_SHIFT = 0x4,
  GFXS0_DSTBLEND_RGB_MASK = 0xF0,
  GFXS0_BLENDOP_RGB_SHIFT = 0x8,
  GFXS0_BLENDOP_RGB_MASK = 0x700,
  GFXS0_BLEND_RGB_MASK = 0x7FF,
  GFXS0_ATEST_SHIFT = 0xB,
  GFXS0_ATEST_DISABLE = 0x800,
  GFXS0_ATEST_GT_0 = 0x0,
  GFXS0_ATEST_GE_128 = 0x1000,
  GFXS0_ATEST_MASK = 0x1000,
  GFXS0_CULL_SHIFT = 0xE,
  GFXS0_CULL_NONE = 0x4000,
  GFXS0_CULL_BACK = 0x8000,
  GFXS0_CULL_FRONT = 0xC000,
  GFXS0_CULL_MASK = 0xC000,
  GFXS0_SRCBLEND_ALPHA_SHIFT = 0x10,
  GFXS0_SRCBLEND_ALPHA_MASK = 0xF0000,
  GFXS0_DSTBLEND_ALPHA_SHIFT = 0x14,
  GFXS0_DSTBLEND_ALPHA_MASK = 0xF00000,
  GFXS0_BLENDOP_ALPHA_SHIFT = 0x18,
  GFXS0_BLENDOP_ALPHA_MASK = 0x7000000,
  GFXS0_BLEND_ALPHA_MASK = 0x7FF0000,
  GFXS0_COLORWRITE_RGB = 0x8000000,
  GFXS0_COLORWRITE_ALPHA = 0x10000000,
  GFXS0_COLORWRITE_MASK = 0x18000000,
  GFXS0_POLYMODE_LINE = 0x80000000,
  GFXS1_DEPTHWRITE = 0x1,
  GFXS1_DEPTHTEST_DISABLE = 0x2,
  GFXS1_DEPTHTEST_SHIFT = 0x2,
  GFXS1_DEPTHTEST_ALWAYS = 0x0,
  GFXS1_DEPTHTEST_LESS = 0x4,
  GFXS1_DEPTHTEST_EQUAL = 0x8,
  GFXS1_DEPTHTEST_LESSEQUAL = 0xC,
  GFXS1_DEPTHTEST_MASK = 0xC,
  GFXS1_DEPTHFUNC_MASK = 0xF,
  GFXS1_POLYGON_OFFSET_SHIFT = 0x4,
  GFXS1_POLYGON_OFFSET_0 = 0x0,
  GFXS1_POLYGON_OFFSET_1 = 0x10,
  GFXS1_POLYGON_OFFSET_2 = 0x20,
  GFXS1_POLYGON_OFFSET_SHADOWMAP = 0x30,
  GFXS1_POLYGON_OFFSET_MASK = 0x30,
  GFXS1_STENCIL_FRONT_ENABLE = 0x40,
  GFXS1_STENCIL_BACK_ENABLE = 0x80,
  GFXS1_STENCIL_MASK = 0xC0,
  GFXS1_STENCIL_FRONT_PASS_SHIFT = 0x8,
  GFXS1_STENCIL_FRONT_FAIL_SHIFT = 0xB,
  GFXS1_STENCIL_FRONT_ZFAIL_SHIFT = 0xE,
  GFXS1_STENCIL_FRONT_FUNC_SHIFT = 0x11,
  GFXS1_STENCIL_FRONT_MASK = 0xFFF00,
  GFXS1_STENCIL_BACK_PASS_SHIFT = 0x14,
  GFXS1_STENCIL_BACK_FAIL_SHIFT = 0x17,
  GFXS1_STENCIL_BACK_ZFAIL_SHIFT = 0x1A,
  GFXS1_STENCIL_BACK_FUNC_SHIFT = 0x1D,
  GFXS1_STENCIL_BACK_MASK = 0xFFF00000,
  GFXS1_STENCILFUNC_FRONTBACK_MASK = 0xE00E0000,
  GFXS1_STENCILOP_FRONTBACK_MASK = 0x1FF1FF00,
};

/* 398 */
enum GfxTextureOp
{
  GFXS_TEXOP_DISABLE = 0x0,
  GFXS_TEXOP_SELECTARG1 = 0x1,
  GFXS_TEXOP_SELECTARG2 = 0x2,
  GFXS_TEXOP_MODULATE = 0x3,
  GFXS_TEXOP_MODULATE2X = 0x4,
  GFXS_TEXOP_MODULATE4X = 0x5,
  GFXS_TEXOP_ADD = 0x6,
  GFXS_TEXOP_ADDSIGNED = 0x7,
  GFXS_TEXOP_ADDSIGNED2X = 0x8,
  GFXS_TEXOP_SUBTRACT = 0x9,
  GFXS_TEXOP_ADDSMOOTH = 0xA,
  GFXS_TEXOP_BLENDDIFFUSEALPHA = 0xB,
  GFXS_TEXOP_BLENDTEXTUREALPHA = 0xC,
  GFXS_TEXOP_BLENDFACTORALPHA = 0xD,
  GFXS_TEXOP_BLENDTEXTUREALPHAPM = 0xE,
  GFXS_TEXOP_BLENDCURRENTALPHA = 0xF,
  GFXS_TEXOP_MODULATEALPHA_ADDCOLOR = 0x10,
  GFXS_TEXOP_MODULATECOLOR_ADDALPHA = 0x11,
  GFXS_TEXOP_MODULATEINVALPHA_ADDCOLOR = 0x12,
  GFXS_TEXOP_MODULATEINVCOLOR_ADDALPHA = 0x13,
  GFXS_TEXOP_DOTPRODUCT3 = 0x14,
  GFXS_TEXOP_MULTIPLYADD = 0x15,
  GFXS_TEXOP_LERP = 0x16,
  GFXS_TEXOP_COUNT = 0x17,
  GFXS_TEXOP_BITS = 0x5,
  GFXS_TEXOP_MASK = 0x1F,
};

/* 399 */
enum GfxTextureArg
{
  GFXS_TEXARG_CONSTANT = 0x0,
  GFXS_TEXARG_CURRENT = 0x1,
  GFXS_TEXARG_COLOR_0 = 0x2,
  GFXS_TEXARG_COLOR_1 = 0x3,
  GFXS_TEXARG_TEMP = 0x4,
  GFXS_TEXARG_TEXTURE = 0x5,
  GFXS_TEXARG_TFACTOR = 0x6,
  GFXS_TEXARG_COUNT = 0x7,
  GFXS_TEXARG_BASE_BITS = 0x3,
  GFXS_TEXARG_BASE_MASK = 0x7,
  GFXS_TEXARG_COMPLEMENT = 0x8,
  GFXS_TEXARG_ALPHA_REPLICATE = 0x10,
  GFXS_TEXARG_BITS = 0x5,
  GFXS_TEXARG_MASK = 0x1F,
};

/* 400 */
enum GfxTextureFunc
{
  GFXS_TEXFUNC_OP_SHIFT = 0x0,
  GFXS_TEXFUNC_DEST_SHIFT = 0x5,
  GFXS_TEXFUNC_ARG1_SHIFT = 0xA,
  GFXS_TEXFUNC_ARG2_SHIFT = 0xF,
  GFXS_TEXFUNC_ARG0_SHIFT = 0x14,
};

/* 401 */
enum surfaceType_t
{
  SF_TRIANGLES = 0x0,
  SF_TRIANGLES_NO_SUN_SHADOW = 0x1,
  SF_BEGIN_STATICMODEL = 0x2,
  SF_STATICMODEL_RIGID_NO_SUN_SHADOW = 0x2,
  SF_STATICMODEL_RIGID = 0x3,
  SF_STATICMODEL_SKINNED = 0x4,
  SF_END_STATICMODEL = 0x5,
  SF_BMODEL = 0x5,
  SF_BEGIN_XMODEL = 0x6,
  SF_XMODEL_RIGID = 0x6,
  SF_XMODEL_RIGID_NO_SUN_SHADOW = 0x7,
  SF_XMODEL_RIGID_SKINNED = 0x8,
  SF_XMODEL_SKINNED = 0x9,
  SF_XMODEL_SKINNED_NO_SUN_SHADOW = 0xA,
  SF_END_XMODEL = 0xB,
  SF_BEGIN_FX = 0xB,
  SF_CODE_MESH = 0xB,
  SF_MARK_MESH = 0xC,
  SF_PARTICLE_CLOUD = 0xD,
  SF_ROPE_MESH = 0xE,
  SF_GLASS_MESH = 0xF,
  SF_END_FX = 0x10,
  SF_NUM_SURFACE_TYPES = 0x10,
  SF_FORCE_32_BITS = 0xFFFFFFFF,
};

/* 402 */
enum LocalTaskState
{
  LOCAL_TASK_STATE_INPROGRESS = 0x0,
  LOCAL_TASK_STATE_COMPLETED = 0x1,
  LOCAL_TASK_STATE_FAILED = 0x2,
};

/* 403 */
enum VehicleTypes
{
  VEH_WHEELS_4 = 0x0,
  VEH_MOTORCYCLE = 0x1,
  VEH_TANK = 0x2,
  VEH_PLANE = 0x3,
  VEH_BOAT = 0x4,
  VEH_ARTILLERY = 0x5,
  VEH_HELICOPTER = 0x6,
  NUM_VEHICLE_TYPES = 0x7,
};

/* 404 */
enum GfxStencilOp
{
  GFXS_STENCILOP_KEEP = 0x0,
  GFXS_STENCILOP_ZERO = 0x1,
  GFXS_STENCILOP_REPLACE = 0x2,
  GFXS_STENCILOP_INCRSAT = 0x3,
  GFXS_STENCILOP_DECRSAT = 0x4,
  GFXS_STENCILOP_INVERT = 0x5,
  GFXS_STENCILOP_INCR = 0x6,
  GFXS_STENCILOP_DECR = 0x7,
  GFXS_STENCILOP_COUNT = 0x8,
};

/* 405 */
enum NitrousVehicle::NitrousVehicleFlags
{
  FLAG_PAUSED = 0x1,
  FLAG_INITIALIZED = 0x2,
  FLAG_SCRIPT_CONTROL = 0x4,
  FLAG_DEBUG_RENDER = 0x8,
  FLAG_PLAYERS_VEHICLE = 0x40,
  FLAG_ATTACHED_PATH = 0x80,
  FLAG_DRIVING_PATH = 0x100,
  FLAG_ACTUATOR_DISABLED = 0x200,
  FLAG_IN_WATER = 0x400,
  FLAG_DISABLE_STABILIZERS = 0x800,
  FLAG_STUNNED = 0x1000,
  FLAG_NEEDS_UNPAUSE = 0x2000,
  FLAG_NEEDS_ENTITIES_WHEELS_COLLISION = 0x4000,
  FLAG_NEEDS_WHEEL_SETUP = 0x8000,
  FLAG_BOOSTING = 0x10000,
  FLAG_ANIMSCRIPTED = 0x20000,
};

/* 406 */
enum NitrousVehicle::NitrousNotifyFlags
{
  NOTIFY_COLLISION = 0x1,
  NOTIFY_IN_AIR = 0x2,
  NOTIFY_LANDED = 0x4,
  NOTIFY_SUSPENSION_LIMIT_ACTIVATED = 0x8,
  NOTIFY_ENGINE_STUTTER = 0x10,
  NOTIFY_REACHED_GOAL = 0x20,
  NOTIFY_STUCK = 0x40,
};

/* 407 */
typedef rb_vehicle_model::rb_vehicle_model_flags_e NitrousVehicle::NitrousVehicleModelFlags;

/* 408 */
enum TaskState
{
  TASK_STATE_INVALID = 0x0,
  TASK_STATE_INIT = 0x1,
  TASK_STATE_INPROGRESS = 0x2,
  TASK_STATE_INCALLBACK = 0x3,
  TASK_STATE_CHILDCOMPLETE = 0x4,
  TASK_STATE_CHILDFAILED = 0x5,
  TASK_STATE_COMPLETED = 0x6,
  TASK_STATE_FAILED = 0x7,
  TASK_STATE_CANCELLED = 0x8,
};

/* 409 */
enum TaskGroup
{
  TASK_GROUP_UNKNOWN = 0x0,
  TASK_GROUP_XSESSION = 0x1,
};

/* 410 */
enum MaterialStateSet
{
  MTL_STATE_SET_ALPHA_TEST = 0x0,
  MTL_STATE_SET_BLEND_FUNC_RGB = 0x1,
  MTL_STATE_SET_BLEND_FUNC_ALPHA = 0x2,
  MTL_STATE_SET_CULL_FACE = 0x3,
  MTL_STATE_SET_DEPTH_TEST = 0x4,
  MTL_STATE_SET_DEPTH_WRITE = 0x5,
  MTL_STATE_SET_COLOR_WRITE = 0x6,
  MTL_STATE_SET_POLYGON_OFFSET = 0x7,
  MTL_STATE_SET_STENCIL = 0x8,
  MTL_STATE_SET_WIREFRAME = 0x9,
  MTL_STATE_SET_COUNT = 0xA,
};

/* 411 */
enum $F6F19268FA22C5D7F5133CE744D58ADA
{
  GFX_TEXTURE_OVERRIDE_IMAGE = 0x0,
  GFX_TEXTURE_OVERRIDE_MATERIAL = 0x1,
  GFX_TEXTURE_OVERRIDE_SHADER_CONST = 0x2,
};

/* 412 */
enum WheelEffectState
{
  WHEEL_STATE_ROLLING = 0x0,
  WHEEL_STATE_AIRBORN = 0x1,
  WHEEL_STATE_SKIDDING = 0x2,
  WHEEL_STATE_MAX = 0x3,
};

/* 413 */
enum GfxViewMode
{
  VIEW_MODE_NONE = 0x0,
  VIEW_MODE_3D = 0x1,
  VIEW_MODE_2D = 0x2,
  VIEW_MODE_IDENTITY = 0x3,
};

/* 414 */
enum GfxStencilFunc
{
  GFXS_STENCILFUNC_NEVER = 0x0,
  GFXS_STENCILFUNC_LESS = 0x1,
  GFXS_STENCILFUNC_EQUAL = 0x2,
  GFXS_STENCILFUNC_LESSEQUAL = 0x3,
  GFXS_STENCILFUNC_GREATER = 0x4,
  GFXS_STENCILFUNC_NOTEQUAL = 0x5,
  GFXS_STENCILFUNC_GREATEREQUAL = 0x6,
  GFXS_STENCILFUNC_ALWAYS = 0x7,
  GFXS_STENCILFUNC_COUNT = 0x8,
};

/* 415 */
enum ShadowType
{
  SHADOW_NONE = 0x0,
  SHADOW_MAP = 0x1,
};

/* 416 */
enum NitrousVehicleController::VehicleHorseControlState
{
  LEFT_STICK_STEERS_HORSE_AND_CAMERA = 0x0,
  LEFT_STICK_STEERS_HORSE_RIGHT_STICK_CAMERA = 0x1,
  RIGHT_STICK_STEERS_HORSE_AND_CAMERA = 0x2,
};

/* 417 */
enum OcclusionReportsMode
{
  OCCLUSION_REPORTS_DISABLED = 0x0,
  OCCLUSION_REPORTS_RECORDING = 0x1,
  OCCLUSION_REPORTS_TESTING = 0x2,
};

/* 418 */
enum $340F3BADAA55BFB3E200C37B24ABA0C7
{
  PM_WATER_LEVEL_NONE = 0x0,
  PM_WATER_LEVEL_SHALLOW = 0x1,
  PM_WATER_LEVEL_WAIST = 0x2,
  PM_WATER_LEVEL_CHEST = 0x3,
  PM_WATER_LEVEL_SWIM = 0x4,
  PM_WATER_LEVEL_DEEP = 0x5,
  PM_WATER_LEVEL_UNDER_WATER = 0x6,
  PM_WATER_LEVEL_COUNT = 0x7,
};

/* 419 */
enum bobType_t
{
  HBOB = 0x0,
  VBOB = 0x1,
};

/* 420 */
enum std::pointer_safety::pointer_safety
{
  relaxed = 0x0,
  preferred = 0x1,
  strict = 0x2,
};

/* 421 */
enum hitLocation_t
{
  HITLOC_NONE = 0x0,
  HITLOC_HELMET = 0x1,
  HITLOC_HEAD = 0x2,
  HITLOC_NECK = 0x3,
  HITLOC_TORSO_UPR = 0x4,
  HITLOC_TORSO_MID = 0x5,
  HITLOC_TORSO_LWR = 0x6,
  HITLOC_R_ARM_UPR = 0x7,
  HITLOC_L_ARM_UPR = 0x8,
  HITLOC_R_ARM_LWR = 0x9,
  HITLOC_L_ARM_LWR = 0xA,
  HITLOC_R_HAND = 0xB,
  HITLOC_L_HAND = 0xC,
  HITLOC_R_LEG_UPR = 0xD,
  HITLOC_L_LEG_UPR = 0xE,
  HITLOC_R_LEG_LWR = 0xF,
  HITLOC_L_LEG_LWR = 0x10,
  HITLOC_R_FOOT = 0x11,
  HITLOC_L_FOOT = 0x12,
  HITLOC_GUN = 0x13,
  HITLOC_SHIELD = 0x14,
  HITLOC_NUM = 0x15,
};

/* 422 */
enum eWeaponComponentType
{
  WEAPON_COMPONENT_UNKNOWN = 0x0,
  WEAPON_COMPONENT_ATTACHMENT = 0x1,
  WEAPON_COMPONENT_BASE = 0x2,
};

/* 423 */
enum eAttachmentOverrideSounds
{
  ATTACHMENT_OVERRIDE_SOUND_FIRE = 0x0,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_PLAYER = 0x1,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP = 0x2,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_PLAYER = 0x3,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_END = 0x4,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LOOP_END_PLAYER = 0x5,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_START = 0x6,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_STOP = 0x7,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_START_PLAYER = 0x8,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_STOP_PLAYER = 0x9,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LAST = 0xA,
  ATTACHMENT_OVERRIDE_SOUND_FIRE_LAST_PLAYER = 0xB,
  NUM_ATTACHMENT_OVERRIDE_SOUNDS = 0xC,
};

/* 424 */
enum eAttachmentOverrideEffects
{
  ATTACHMENT_OVERRIDE_EFFECT_VIEW_FLASH = 0x0,
  ATTACHMENT_OVERRIDE_EFFECT_WORLD_FLASH = 0x1,
  NUM_ATTACHMENT_OVERRIDE_EFFECTS = 0x2,
};

/* 425 */
enum std::float_denorm_style
{
  denorm_indeterminate = 0xFFFFFFFF,
  denorm_absent = 0x0,
  denorm_present = 0x1,
};

/* 426 */
enum std::float_round_style
{
  round_indeterminate = 0xFFFFFFFF,
  round_toward_zero = 0x0,
  round_to_nearest = 0x1,
  round_toward_infinity = 0x2,
  round_toward_neg_infinity = 0x3,
};

/* 427 */
enum fsMode_t
{
  FS_READ = 0x0,
  FS_WRITE = 0x1,
  FS_APPEND = 0x2,
  FS_APPEND_SYNC = 0x3,
};

/* 428 */
enum WeaponCamoMaterialFlags
{
  WCM_REPLACE_COLOR = 0x1,
  WCM_REPLACE_NORMAL = 0x2,
  WCM_REPLACE_SPECULAR = 0x4,
};

/* 429 */
enum $9D0C6E555DA097B298BAD42ECCC13C13
{
  MAX_WEAP_NOTETRACK_TO_SOUND_MAPPINGS = 0x14,
};

/* 430 */
enum $6A3086798CEDAE15DA7E15CAFB410181
{
  MT_TYPE_EMPTY = 0x0,
  MT_TYPE_THREAD = 0x1,
  MT_TYPE_VECTOR = 0x2,
  MT_TYPE_ANIM_NOTETRACK = 0x3,
  MT_TYPE_ANIM_TREE = 0x4,
  MT_TYPE_SMALL_ANIM_TREE = 0x5,
  MT_TYPE_EXTERNAL = 0x6,
  MT_TYPE_TEMP = 0x7,
  MT_TYPE_SURFACE = 0x8,
  MT_TYPE_ANIM_PART = 0x9,
  MT_TYPE_MODEL_PART = 0xA,
  MT_TYPE_MODEL_PART_MAP = 0xB,
  MT_TYPE_MODEL_DUPLICATE_PARTS = 0xC,
  MT_TYPE_MODEL_LIST = 0xD,
  MT_TYPE_SCRIPT_PARSE = 0xE,
  MT_TYPE_SCRIPT_STRING = 0xF,
  MT_TYPE_CLASS = 0x10,
  MT_TYPE_TAG_INFO = 0x11,
  MT_TYPE_ANIMSCRIPTED = 0x12,
  MT_TYPE_CONFIG_STRING = 0x13,
  MT_TYPE_DEBUGGER_STRING = 0x14,
  MT_TYPE_VEHICLE = 0x15,
  MT_TYPE_GENERIC = 0x16,
  MT_TYPE_COUNT = 0x17,
};

/* 431 */
enum weapFieldType_t
{
  WFT_WEAPONTYPE = 0x12,
  WFT_WEAPONCLASS = 0x13,
  WFT_OVERLAYRETICLE = 0x14,
  WFT_PENETRATE_TYPE = 0x15,
  WFT_IMPACT_TYPE = 0x16,
  WFT_STANCE = 0x17,
  WFT_PROJ_EXPLOSION = 0x18,
  WFT_OFFHAND_CLASS = 0x19,
  WFT_OFFHAND_SLOT = 0x1A,
  WFT_ANIMTYPE = 0x1B,
  WFT_ACTIVE_RETICLE_TYPE = 0x1C,
  WFT_GUIDED_MISSILE_TYPE = 0x1D,
  WFT_BOUNCE_SOUND = 0x1E,
  WFT_STICKINESS = 0x1F,
  WFT_ROTATETYPE = 0x20,
  WFT_OVERLAYINTERFACE = 0x21,
  WFT_INVENTORYTYPE = 0x22,
  WFT_FIRETYPE = 0x23,
  WFT_CLIPTYPE = 0x24,
  WFT_AMMOCOUNTER_CLIPTYPE = 0x25,
  WFT_ICONRATIO_HUD = 0x26,
  WFT_ICONRATIO_AMMOCOUNTER = 0x27,
  WFT_ICONRATIO_KILL = 0x28,
  WFT_ICONRATIO_DPAD = 0x29,
  WFT_ICONRATIO_INDICATOR = 0x2A,
  WFT_BARRELTYPE = 0x2B,
  WFT_HIDETAGS = 0x2C,
  WFT_EXPLOSION_TAG = 0x2D,
  WFT_NOTETRACKSOUNDMAP = 0x2E,
  WFT_WEAPON_CAMO = 0x2F,
  WFT_NUM_FIELD_TYPES = 0x30,
};

/* 432 */
enum weaponAltModel_t
{
  WEAP_ALT_MODEL0 = 0x0,
  WEAP_ALT_MODEL1 = 0x1,
  WEAP_ALT_MODEL2 = 0x2,
  WEAP_ALT_MODEL3 = 0x3,
  WEAP_ALT_MODEL4 = 0x4,
  WEAP_ALT_MODEL5 = 0x5,
  WEAP_ALT_MODEL6 = 0x6,
  WEAP_ALT_MODEL7 = 0x7,
  WEAP_ALT_MODEL8 = 0x8,
  WEAP_ALT_MODEL9 = 0x9,
  WEAP_ALT_MODEL10 = 0xA,
  WEAP_ALT_MODEL11 = 0xB,
  WEAP_ALT_MODEL12 = 0xC,
  WEAP_ALT_MODEL13 = 0xD,
  WEAP_ALT_MODEL14 = 0xE,
  WEAP_ALT_MODEL15 = 0xF,
  NUM_WEAP_ALTMODELS = 0x10,
};

/* 433 */
enum PlayerAnimType
{
  PLAYERANIMTYPE_REVIVEE = 0x0,
  PLAYERANIMTYPE_SNIPER = 0x1,
  PLAYERANIMTYPE_SNIPER_REARCLIP = 0x2,
  PLAYERANIMTYPE_BRIEFCASE = 0x3,
};

/* 434 */
enum eAttachmentTableColumns
{
  ATTACHMENTTABLE_NUMBER = 0x0,
  ATTACHMENTTABLE_ATTACH_POINT = 0x1,
  ATTACHMENTTABLE_GROUP = 0x2,
  ATTACHMENTTABLE_NAME = 0x3,
  ATTACHMENTTABLE_REFERENCE = 0x4,
  ATTACHMENTTABLE_COUNT = 0x5,
  ATTACHMENTTABLE_IMAGE = 0x6,
  ATTACHMENTTABLE_DESCRIPTION = 0x7,
  ATTACHMENTTABLE_DATA_STRING = 0x8,
  ATTACHMENTTABLE_DATA_INT = 0x9,
  ATTACHMENTTABLE_DATA_INT2 = 0xA,
  ATTACHMENTTABLE_COMPATIBLE_ATTACHMENTS = 0xB,
  ATTACHMENTTABLE_ALLOCATION_COST = 0xC,
  ATTACHMENTTABLE_UNLOCK_LVL = 0xD,
  ATTACHMENTTABLE_UNLOCK_PLEVEL = 0xE,
  ATTACHMENTTABLE_COST = 0xF,
  ATTACHMENTTABLE_DEFAULT_PRIMARY_CLASS = 0x10,
  ATTACHMENTTABLE_DEFAULT_SECONDARY_CLASS = 0x11,
  ATTACHMENTTABLE_IS_ELITE = 0x12,
  MAX_ATTACHMENTTABLE_COUNT = 0x13,
};

/* 435 */
enum pmtype_t
{
  PM_NORMAL = 0x0,
  PM_NORMAL_LINKED = 0x1,
  PM_NOCLIP = 0x2,
  PM_UFO = 0x3,
  PM_MPVIEWER = 0x4,
  PM_SPECTATOR = 0x5,
  PM_INTERMISSION = 0x6,
  PM_LASTSTAND = 0x7,
  PM_REVIVEE = 0x8,
  PM_LASTSTAND_TRANSITION = 0x9,
  PM_DEAD = 0xA,
  PM_DEAD_LINKED = 0xB,
};

/* 436 */
enum PlayerSpreadOverrideState
{
  PSOS_DISABLED = 0x0,
  PSOS_RESETTING = 0x1,
  PSOS_ENABLED = 0x2,
};

/* 437 */
enum LastInput_t
{
  LAST_INPUT_GAMEPAD = 0x0,
  LAST_INPUT_MOUSEMOVE = 0x1,
  LAST_INPUT_MOUSECLICK = 0x2,
  LAST_INPUT_KEYBOARD = 0x3,
};

/* 438 */
enum weapAnimNumber_t
{
  WEAP_IDLE = 0x0,
  WEAP_FORCE_IDLE = 0x1,
  WEAP_ATTACK = 0x2,
  WEAP_ATTACK_LEFT = 0x3,
  WEAP_ATTACK_LASTSHOT = 0x4,
  WEAP_ATTACK_LASTSHOT_LEFT = 0x5,
  WEAP_RECHAMBER = 0x6,
  WEAP_ADS_ATTACK = 0x7,
  WEAP_ADS_ATTACK_LASTSHOT = 0x8,
  WEAP_ADS_RECHAMBER = 0x9,
  WEAP_MELEE_ATTACK = 0xA,
  WEAP_MELEE_ATTACK_EMPTY = 0xB,
  WEAP_MELEE_CHARGE = 0xC,
  WEAP_MELEE_CHARGE_EMPTY = 0xD,
  WEAP_DROP = 0xE,
  WEAP_RAISE = 0xF,
  WEAP_FIRST_RAISE = 0x10,
  WEAP_RELOAD = 0x11,
  WEAP_RELOAD_EMPTY = 0x12,
  WEAP_RELOAD_START = 0x13,
  WEAP_RELOAD_END = 0x14,
  WEAP_RELOAD_QUICK = 0x15,
  WEAP_RELOAD_QUICK_EMPTY = 0x16,
  WEAP_ALTSWITCHFROM = 0x17,
  WEAP_ALTSWITCHTO = 0x18,
  WEAP_QUICK_DROP = 0x19,
  WEAP_QUICK_RAISE = 0x1A,
  WEAP_EMPTY_DROP = 0x1B,
  WEAP_EMPTY_RAISE = 0x1C,
  WEAP_SPRINT_IN = 0x1D,
  WEAP_SPRINT_LOOP = 0x1E,
  WEAP_SPRINT_OUT = 0x1F,
  WEAP_SPRINT_EMPTY_IN = 0x20,
  WEAP_SPRINT_EMPTY_LOOP = 0x21,
  WEAP_SPRINT_EMPTY_OUT = 0x22,
  WEAP_LOWREADY_IN = 0x23,
  WEAP_LOWREADY_LOOP = 0x24,
  WEAP_LOWREADY_OUT = 0x25,
  WEAP_CONT_FIRE_IN = 0x26,
  WEAP_CONT_FIRE_LOOP = 0x27,
  WEAP_CONT_FIRE_OUT = 0x28,
  WEAP_HOLD_FIRE = 0x29,
  WEAP_DETONATE = 0x2A,
  WEAP_NIGHTVISION_WEAR = 0x2B,
  WEAP_NIGHTVISION_REMOVE = 0x2C,
  WEAP_DEPLOYING = 0x2D,
  WEAP_BREAKING_DOWN = 0x2E,
  WEAP_DTP_IN = 0x2F,
  WEAP_DTP_LOOP = 0x30,
  WEAP_DTP_OUT = 0x31,
  WEAP_DTP_EMPTY_IN = 0x32,
  WEAP_DTP_EMPTY_LOOP = 0x33,
  WEAP_DTP_EMPTY_OUT = 0x34,
  WEAP_SLIDE_IN = 0x35,
  WEAP_MANTLE = 0x36,
  WEAP_JAM = 0x37,
  WEAP_CRAWL_IN = 0x38,
  WEAP_CRAWL_FORWARD = 0x39,
  WEAP_CRAWL_BACK = 0x3A,
  WEAP_CRAWL_RIGHT = 0x3B,
  WEAP_CRAWL_LEFT = 0x3C,
  WEAP_CRAWL_OUT = 0x3D,
  WEAP_CRAWL_EMPTY_IN = 0x3E,
  WEAP_CRAWL_EMPTY_FORWARD = 0x3F,
  WEAP_CRAWL_EMPTY_BACK = 0x40,
  WEAP_CRAWL_EMPTY_RIGHT = 0x41,
  WEAP_CRAWL_EMPTY_LEFT = 0x42,
  WEAP_CRAWL_EMPTY_OUT = 0x43,
  MAX_WP_ANIMATIONS = 0x44,
};

/* 439 */
enum $451A00533D5EE4C242F55D5BA9006690
{
  WPLF_LOCK_STARTED = 0x1,
  WPLF_LOCK_SET = 0x2,
  WPLF_LOCK_ATTACK_TOP = 0x4,
  WPLF_LOCK_ATTACK_DIRECT = 0x8,
  WPLF_LOCK_TARGET_TOO_CLOSE = 0x10,
  WPLF_LOCK_NOT_ENOUGH_CLEARANCE = 0x20,
  WEAPONLOCKFLAG_BITS = 0x6,
};

/* 440 */
enum pmoveVehAnimState_t
{
  PMOVE_VEH_ANIM_STATE_PLAYING = 0x0,
  PMOVE_VEH_ANIM_STATE_END_STAGE = 0x1,
  PMOVE_VEH_ANIM_STATE_COMPLETE = 0x2,
};

/* 441 */
enum $970A897487EC8E576FC0BAA7D1E03C63
{
  FILEDATA_AITYPE = 0x0,
  FILEDATA_ANIMSCRIPTS_TRAVERSE = 0x1,
  FILEDATA_XANIMLIST = 0x2,
  FILEDATA_ZBARRIERTYPE = 0x3,
  FILEDATA_XMODELSURFS = 0x4,
  FILEDATA_XMODELPARTS = 0x5,
  FILEDATA_XMODEL = 0x6,
  FILEDATA_XANIM = 0x7,
  FILEDATA_PHYSPRESET = 0x8,
  FILEDATA_PHYSCONSTRAINTS = 0x9,
  FILEDATA_DESTRUCTIBLEDEF = 0xA,
  FILEDATA_VEHICLEPHYSPARAMS = 0xB,
  FILEDATA_XMODELPIECES = 0xC,
  FILEDATA_STRINGTABLE = 0xD,
  FILEDATA_VEHICLEDEF = 0xE,
  FILEDATA_FOOTSTEPFXTABLEDEF = 0xF,
  FILEDATA_ZBARRIERDEF = 0x10,
};

/* 442 */
enum $1B32A84016F35D5EFF0C11FB5328ABED
{
  VFT_TYPE = 0x12,
  VFT_CAMERAMODE = 0x13,
  VFT_TRACTION_TYPE = 0x14,
  VFT_MPH_TO_INCHES_PER_SECOND = 0x15,
  VFT_POUNDS_TO_GAME_MASS = 0x16,
  VFT_TEAM = 0x17,
  VFT_KEY_BINDING = 0x18,
  VFT_GRAPH = 0x19,
  VFT_WIIUCONTROLOVERRIDE = 0x1A,
  VFT_NUM = 0x1B,
};

/* 443 */
enum DevEventType
{
  EVENT_ACTIVATE = 0x0,
  EVENT_DEACTIVATE = 0x1,
  EVENT_ACCEPT = 0x2,
  EVENT_UPDATE = 0x3,
  EVENT_DRAW = 0x4,
  EVENT_SAVE = 0x5,
};

/* 444 */
enum $9E02737228DF5060E759F32703142FF5
{
  _BUF_SIZE = 0x8,
};

/* 445 */
enum $B2FB91FA9CC7CF3BD50434AFDECAC47F
{
  _ALLOC_MASK = 0x7,
};

/* 446 */
typedef $9E02737228DF5060E759F32703142FF5 $F0551E099AE6F36F41F19B6664DCAFD9;

/* 447 */
typedef $B2FB91FA9CC7CF3BD50434AFDECAC47F $8B51C3C74DF083A54E50CA72E34056B8;

/* 448 */
enum $25EF9448C800B18F0C83DB367159AFD6
{
  PART_TYPE_NO_QUAT = 0x0,
  PART_TYPE_HALF_QUAT = 0x1,
  PART_TYPE_FULL_QUAT = 0x2,
  PART_TYPE_HALF_QUAT_NO_SIZE = 0x3,
  PART_TYPE_FULL_QUAT_NO_SIZE = 0x4,
  PART_TYPE_SMALL_TRANS = 0x5,
  PART_TYPE_TRANS = 0x6,
  PART_TYPE_TRANS_NO_SIZE = 0x7,
  PART_TYPE_NO_TRANS = 0x8,
  PART_TYPE_ALL = 0x9,
  PART_TYPE_COUNT = 0xA,
};

/* 449 */
enum VehicleTurretState
{
  VEH_TURRET_STOPPED = 0x0,
  VEH_TURRET_STOPPING = 0x1,
  VEH_TURRET_MOVING = 0x2,
};

/* 450 */
enum path_type_e
{
  PT_OLD_SPLINE = 0x0,
  PT_SPLINE = 0x1,
};

/* 451 */
enum VehicleMoveState
{
  VEH_MOVESTATE_STOP = 0x0,
  VEH_MOVESTATE_MOVE = 0x1,
  VEH_MOVESTATE_HOVER = 0x2,
  VEH_MOVESTATE_PLANE_ONCURVE = 0x3,
  VEH_MOVESTATE_PLANE_FREE = 0x4,
};

/* 452 */
enum eGameModes
{
  GAMEMODE_PUBLIC_MATCH = 0x0,
  GAMEMODE_PRIVATE_MATCH = 0x1,
  GAMEMODE_LOCAL_SPLITSCREEN = 0x2,
  GAMEMODE_WAGER_MATCH = 0x3,
  GAMEMODE_BASIC_TRAINING = 0x4,
  GAMEMODE_THEATER = 0x5,
  GAMEMODE_LEAGUE_MATCH = 0x6,
  GAMEMODE_RTS = 0x7,
  GAMEMODE_MAX = 0x8,
  INVALID_GAMEMODE = 0x9,
};

/* 453 */
enum playerStatsKeyIndex_t
{
  MP_PLAYERSTATSKEY_RANKXP = 0x0,
  MP_PLAYERSTATSKEY_PLEVEL = 0x1,
  MP_PLAYERSTATSKEY_RANK = 0x2,
  MP_PLAYERSTATSKEY_SCORE = 0x3,
  MP_PLAYERSTATSKEY_TIMEPLAYEDTOTAL = 0x4,
  MP_PLAYERSTATSKEY_GAMETYPEBAN = 0x5,
  MP_PLAYERSTATSKEY_TIMEWHENNEXTHOST = 0x6,
  MP_PLAYERSTATSKEY_BADHOSTCOUNT = 0x7,
  MP_PLAYERSTATSKEY_LEADERBOARDFAILURES = 0x8,
  MP_PLAYERSTATSKEY_LASTSTATSBACKUP = 0x9,
  MP_PLAYERSTATSKEY_MAPPACKMASK = 0xA,
  MP_PLAYERSTATSKEY_STATSBACKUPVERSION = 0xB,
  MP_PLAYERSTATSKEY_CODPOINTS = 0xC,
  MP_PLAYERSTATSKEY_CURRENCYSPENT = 0xD,
  MP_PLAYERSTATSKEY_STATS_VERSION = 0xE,
  MP_PLAYERSTATSKEY_KILLS = 0xF,
  MP_PLAYERSTATSKEY_DEATHS = 0x10,
  MP_PLAYERSTATSKEY_DEATHSDURINGUSE = 0x11,
  MP_PLAYERSTATSKEY_HEADSHOTS = 0x12,
  MP_PLAYERSTATSKEY_KDRATIO = 0x13,
  MP_PLAYERSTATSKEY_HIGHEST_KDRATIO = 0x14,
  MP_PLAYERSTATSKEY_ACCURACY = 0x15,
  MP_PLAYERSTATSKEY_HIGHEST_ACCURACY = 0x16,
  MP_PLAYERSTATSKEY_SHOTS = 0x17,
  MP_PLAYERSTATSKEY_HITS = 0x18,
  MP_PLAYERSTATSKEY_TIMEUSED = 0x19,
  MP_PLAYERSTATSKEY_USED = 0x1A,
  MP_PLAYERSTATSKEY_DESTROYED = 0x1B,
  MP_PLAYERSTATSKEY_GAMETYPE = 0x1C,
  MP_PLAYERSTATSKEY_WINS = 0x1D,
  MP_PLAYERSTATSKEY_LOSSES = 0x1E,
  MP_PLAYERSTATSKEY_TIES = 0x1F,
  MP_PLAYERSTATSKEY_LIFETIME_EARNINGS = 0x20,
  MP_PLAYERSTATSKEY_LIFETIME_BUYIN = 0x21,
  MP_PLAYERSTATSKEY_CONTRACTS_PURCHASED = 0x22,
  MP_PLAYERSTATSKEY_CONTRACTS_COMPLETED = 0x23,
  MP_PLAYERSTATSKEY_LASTESCROW = 0x24,
  MP_PLAYERSTATSKEY_STATRESETCOUNT = 0x25,
  MP_PLAYERSTATSKEY_FILMS_SHOUTCASTED = 0x26,
  MP_PLAYERSTATSKEY_HIGHLIGHTS_CREATED = 0x27,
  MP_PLAYERSTATSKEY_COUNT = 0x28,
};

/* 454 */
enum clanTagFeatureColumn_t
{
  CLANTAG_COL_INDEX = 0x0,
  CLANTAG_COL_NAME = 0x1,
  CLANTAG_COL_UNLOCKLVL = 0x2,
  CLANTAG_COL_UNLOCKPLVL = 0x3,
  CLANTAG_COL_COST = 0x4,
  CLANTAG_COL_TYPE = 0x5,
  CLANTAG_COL_DATA = 0x6,
  CLANTAG_COL_NUMFRAMES = 0x7,
  CLANTAG_COL_PHASE = 0x8,
  CLANTAG_COL_FRAME1 = 0x9,
  CLANTAG_COL_FRAME2 = 0xA,
  CLANTAG_COL_FRAME3 = 0xB,
  CLANTAG_COL_FRAME4 = 0xC,
  CLANTAG_COL_FRAME5 = 0xD,
  CLANTAG_COL_FRAME6 = 0xE,
  CLANTAG_COL_FRAME7 = 0xF,
  CLANTAG_COL_FRAME8 = 0x10,
};

/* 455 */
enum prestigeTokenType_e
{
  PRESTIGE_TOKEN_RESPEC = 0x0,
  PRESTIGE_TOKEN_RESET_STATS = 0x1,
  PRESTIGE_TOKEN_EXTRA_CAC = 0x2,
  PRESTIGE_TOKEN_COUNT = 0x3,
};

/* 456 */
enum statsTableColumns_t
{
  STATSTABLE_NUMBER = 0x0,
  STATSTABLE_PASSIVE = 0x1,
  STATSTABLE_GROUP = 0x2,
  STATSTABLE_NAME = 0x3,
  STATSTABLE_REFERENCE = 0x4,
  STATSTABLE_ITEMCOUNT = 0x5,
  STATSTABLE_IMAGE = 0x6,
  STATSTABLE_DESCRIPTION = 0x7,
  STATSTABLE_ATTACHMENTS_DATA = 0x8,
  STATSTABLE_SORTKEY = 0x9,
  STATSTABLE_UNLOCK_LVL = 0xA,
  STATSTABLE_DEFAULT_CLASS = 0xB,
  STATSTABLE_ALLOCATION_COST = 0xC,
  STATSTABLE_LOADOUT_SLOT = 0xD,
  STATSTABLE_UNLOCK_PLVL = 0xE,
  STATSTABLE_DLC_INDEX = 0xF,
  STATSTABLE_MOMENTUM_COST = 0x10,
  STATSTABLE_COST = 0x11,
  STATSTABLE_DEMO_VERSION = 0x12,
  STATSTABLE_ZM_MAPS_TRACKED_BY = 0x13,
  STATSTABLE_COUNT = 0x14,
};

/* 457 */
enum msgLocErrType_t
{
  LOCMSG_SAFE = 0x0,
  LOCMSG_NOERR = 0x1,
};

/* 458 */
enum GameTypeSettingsType
{
  GAMETYPE_SETTINGS_FIRST = 0x0,
  GAMETYPE_SETTINGS_DISALLOW_AIM_SLOWDOWN = 0x0,
  GAMETYPE_SETTINGS_DISALLOW_PRONE = 0x1,
  GAMETYPE_SETTINGS_ALLOW_SPECTATING = 0x2,
  GAMETYPE_SETTINGS_AUTO_TEAM_BALANCE = 0x3,
  GAMETYPE_SETTINGS_TEAM_COUNT = 0x4,
  GAMETYPE_SETTINGS_PRESET_CLASSES_PER_TEAM = 0x5,
  GAMETYPE_SETTINGS_MAX_ALLOCATION = 0x6,
  GAMETYPE_SETTINGS_HARDCORE_MODE = 0x7,
  GAMETYPE_SETTINGS_DISABLE_THIRD_PERSON_SPECTATING = 0x8,
  GAMETYPE_SETTINGS_NUM = 0x9,
};

/* 459 */
enum gunLevelTableColumns_t
{
  GUNLEVELTABLE_RANKID = 0x0,
  GUNLEVELTABLE_TARGETXP = 0x1,
  GUNLEVELTABLE_WEAPON = 0x2,
  GUNLEVELTABLE_ATTACHMENT = 0x3,
  GUNLEVELTABLE_REWARDXP = 0x4,
  GUNLEVELTABLE_COUNT = 0x5,
};

/* 460 */
enum cacmpshared_type_e
{
  CACMPSHARED_TYPE_NONE = 0x0,
  CACMPSHARED_TYPE_WEAPON = 0x1,
};

/* 461 */
enum elitePasswordStatus_e
{
  ELITEPASSWORD_Success = 0x0,
  ELITEPASSWORD_LengthError = 0x1,
  ELITEPASSWORD_EmailError = 0x2,
  ELITEPASSWORD_CharError = 0x3,
  ELITEPASSWORD_LetterNumberError = 0x4,
  ELITEPASSWORD_RepeatError = 0x5,
  ELITEPASSWORD_SequentialError = 0x6,
  ELITEPASSWORD_COUNT = 0x7,
};

/* 462 */
enum pointsSpent_t
{
  POINTSSPENT_IGNORE = 0x0,
  POINTSSPENT_EMBLEM_LAYER = 0x1,
  POINTSSPENT_EMBLEM_ICON = 0x2,
  POINTSSPENT_CONTRACT = 0x3,
  POINTSSPENT_UNLOCKABLE_CLANTAG = 0x4,
  POINTSSPENT_UNLOCKABLE_ITEM = 0x5,
  POINTSSPENT_UNLOCKABLE_SELL = 0x6,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT = 0x7,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT_POINT = 0x8,
  POINTSSPENT_UNLOCKABLE_ATTACHMENT_OPTION = 0x9,
  POINTSSPENT_ESCROW = 0xA,
  POINTSSPENT_GUEST_SIGNIN = 0xB,
};

/* 463 */
enum bdUCDAccountStatus::bdMarketingOptInStatus
{
  BD_MARKETING_OPT_IN_FALSE = 0x0,
  BD_MARKETING_OPT_IN_TRUE = 0x1,
};

/* 464 */
enum RecordEventType
{
  DW_EVENT_UNKNOWN = 0x0,
  DW_EVENT_AVI = 0x1,
  DW_EVENT_SCREENSHOT = 0x2,
  DW_EVENT_MATCH_RECORD_POINTS_SPENT = 0x3,
  DW_EVENT_EMAIL = 0x5,
  DW_EVENT_MATCH_RECORD_FINISHED = 0x6,
  DW_EVENT_INVALID_GAMERTAG = 0x7,
  DW_EVENT_CRASH_DUMP = 0x8,
  DW_EVENT_EMPTY_STATS = 0x9,
  DW_EVENT_UPLOAD_FAILURE = 0xA,
  DW_EVENT_DB_READ_ERROR = 0xB,
  DW_EVENT_NO_HELI_MESH = 0x10,
  DW_EVENT_INVALID_EMBLEM = 0x11,
  DW_EVENT_UPLOAD_SP_SESSION = 0x12,
  DW_EVENT_VALID_EMBLEM = 0x13,
  DW_EVENT_POSTMATCH_EVENTS = 0x14,
  DW_EVENT_MATCH_RECORD_FINISHED_AND_UPLOADED = 0x15,
  DW_EVENT_LOG_MATCHMAKING_DATA = 0x1E,
  DW_EVENT_LOG_XSESSION_NON_SERIALIZED_CALLS = 0x20,
  DW_EVENT_SYS_ERROR = 0x29,
  DW_EVENT_UI_ERROR = 0x2A,
  DW_EVENT_SEASON_PASS_PURCHASED = 0x2B,
  DW_EVENT_THEATER_CLIP_UPLOADED = 0x2C,
  DW_UCD_ERROR = 0x2D,
  DW_EREG_ENTRY_ERROR = 0x2E,
  DW_EREG_YOUTUBE_ERROR = 0x2F,
  DW_EVENT_UI_SP_ERROR = 0x30,
  DW_EVENT_UI_MP_ERROR = 0x31,
  DW_EVENT_UI_ZM_ERROR = 0x32,
  DW_EVENT_DEDI_NOGEOINFO = 0x33,
  DW_EVENT_CONNECTION_LOG = 0x34,
  DW_EVENT_SESSION_MODIFY_FAILURE = 0x35,
  DW_EVENT_DEDICATED_PING_LOG = 0x36,
  DW_EVENT_STATS_ACCESS_ERROR = 0x37,
  DW_EVENT_ZERO_FLAG_ERROR = 0x38,
  DW_EVENT_SESSION_LOG = 0x39,
  DW_EVENT_DOUBLE_XP_FLAG_CHANGED = 0x46,
  DW_EVENT_DLC_FLAG_CHANGED = 0x47,
  DW_EVENT_DEMO_UPLOAD_FAILURE = 0x48,
  DW_EVENT_BLACKBOX = 0x58,
  DW_EVENT_LEAGUE = 0x64,
  DW_EVENT_REMOTE_CONSOLE = 0xC8,
  DW_EVENT_WATCHDOG = 0xC9,
  DW_EVENT_IGS = 0xFA,
  DW_EVENT_DLC_MENUS_VIEWED = 0xFB,
  DW_EVENT_CUSTOMCLASS_ERRORLOG = 0x12C,
  DW_EVENT_IW6_PROMO_PURCHASED = 0x145,
  DW_EVENT_IW6_PROMO_ACCESSED = 0x146,
  DW_EVENT_RATE_MATCH = 0x190,
  DW_EVENT_VOTE_MTX = 0x1A9,
  DW_EVENT_SP_REMINDER_ACTION = 0x1AA,
  DW_EVENT_DSP_PROMOTION_ACTION = 0x1AB,
  DW_EVENT_GHOST_UPSELL = 0x1AC,
  DW_EVENT_CONTENT_AVAILABLE = 0x1AE,
  DW_EVENT_REPORT_OFFENSIVE_EMBLEM = 0x1AF,
  DW_EVENT_ANTICHEAT_DEBUG = 0x1B8,
  DW_EVENT_NUM_EVENTS = 0x1B9,
};

/* 465 */
enum bdSubscriptionFilter
{
  BD_SUBSCRIPTION_FILTER_ALL = 0x0,
  BD_SUBSCRIPTION_FILTER_VALID = 0x1,
  BD_SUBSCRIPTION_FILTER_EXPIRED = 0x2,
};

/* 466 */
enum bdUCDAccountStatus::bdElitePaidStatus
{
  BD_ELITE_PAID_UNKNOWN = 0xFFFFFFFF,
  BD_ELITE_PAID_FALSE = 0x0,
  BD_ELITE_PAID_TRUE = 0x1,
};

/* 467 */
enum proneCheckType_t
{
  PCT_CLIENT = 0x0,
  PCT_ACTOR = 0x1,
};

/* 468 */
enum PmStanceFrontBack
{
  PM_STANCE_STAND = 0x0,
  PM_STANCE_PRONE = 0x1,
  PM_STANCE_CROUCH = 0x2,
  PM_STANCE_BACKWARD_FIRST = 0x3,
  PM_STANCE_BACKWARD_RUN = 0x3,
  PM_STANCE_BACKWARD_PRONE = 0x4,
  PM_STANCE_BACKWARD_CROUCH = 0x5,
  NUM_PM_STANCE_FRONTBACK = 0x6,
};

/* 469 */
enum PmMoveSpeeds
{
  PM_MOVE_SPEED_RUN = 0x0,
  PM_MOVE_SPEED_WALK = 0x1,
  PM_MOVE_SPEED_SHUFFLE = 0x2,
  NUM_PM_MOVE_SPEED = 0x3,
};

/* 470 */
enum animBodyPart_t
{
  ANIM_BP_UNUSED = 0x0,
  ANIM_BP_LEGS = 0x1,
  ANIM_BP_TORSO = 0x2,
  ANIM_BP_BOTH = 0x3,
  NUM_ANIM_BODYPARTS = 0x4,
};

/* 471 */
enum clientplatform_t
{
  CLIENT_PLATFORM_PC = 0x0,
  CLIENT_PLATFORM_PS3 = 0x1,
  CLIENT_PLATFORM_XENON = 0x2,
  CLIENT_PLATFORM_WIIU = 0x3,
  MAX_CLIENT_PLATFORMS = 0x4,
};

/* 472 */
enum invalid_cmd_hint_t
{
  INVALID_CMD_NO_HINT = 0x0,
  INVALID_CMD_STAND_HINT = 0x1,
  INVALID_CMD_CROUCH_HINT = 0x2,
  INVALID_CMD_PRONE_HINT = 0x3,
};

/* 473 */
enum EVehicleCameraMode
{
  VEH_MODE_FIRSTPERSON = 0x0,
  VEH_MODE_CHASECAM = 0x1,
  VEH_MODE_HLO = 0x2,
  VEH_MODE_STRAFE = 0x3,
  VEH_MODE_HORSE = 0x4,
  VEH_MODE_OLDTANK = 0x5,
  VEH_MODE_HOVER = 0x6,
  VEH_MODE_VTOL = 0x7,
  VEH_MODE_MAX = 0x8,
};

/* 474 */
enum EVehicleWiiUControlOverride
{
  VEH_WIIU_CONTROL_OVERRIDE_NONE = 0x0,
  VEH_WIIU_CONTROL_OVERRIDE_PLANE_WINGSUIT = 0x1,
  VEH_WIIU_CONTROL_OVERRIDE_CLAW = 0x2,
  VEH_WIIU_CONTROL_OVERRIDE_F35 = 0x3,
  VEH_WIIU_CONTROL_OVERRIDE_AITANK = 0x4,
  VEH_WIIU_CONTROL_OVERRIDE_QRDRONE = 0x5,
  VEH_WIIU_CONTROL_OVERRIDE_RCXD = 0x6,
  VEH_WIIU_CONTROL_OVERRIDE_CHOPPERGUNNER = 0x7,
  VEH_WIIU_CONTROL_OVERRIDE_SOCT = 0x8,
  VEH_WIIU_CONTROL_OVERRIDE_PLANE_JETWING = 0x9,
  VEH_WIIU_CONTROL_OVERRIDE_MAX = 0xA,
};

/* 475 */
enum TerrainFireSource
{
  TFS_DEFAULT = 0x0,
  TFS_FLAMETHROWER = 0x1,
};

/* 476 */
enum ActorAnimStates
{
  ACTOR_ANIMATION_IDLE = 0x0,
  ACTOR_ANIMATION_MOVE_RUN = 0x1,
  ACTOR_ANIMATION_MOVE_START = 0x2,
  ACTOR_ANIMATION_MOVE_STOP = 0x3,
  ACTOR_ANIMATION_MOVE_WALK = 0x4,
  ACTOR_ANIMATION_MOVE_TURN_LEFT = 0x5,
  ACTOR_ANIMATION_MOVE_TURN_RIGHT = 0x6,
  ACTOR_ANIMATION_MOVE_RUN_TURN_LEFT = 0x7,
  ACTOR_ANIMATION_MOVE_RUN_TURN_RIGHT = 0x8,
  ACTOR_ANIMATION_MOVE_TURN_AROUND_LEFT = 0x9,
  ACTOR_ANIMATION_MOVE_TURN_AROUND_RIGHT = 0xA,
  ACTOR_ANIMATION_MOVE_RUN_TURN_AROUND_LEFT = 0xB,
  ACTOR_ANIMATION_MOVE_RUN_TURN_AROUND_RIGHT = 0xC,
  ACTOR_ANIMATION_ATTACK = 0xD,
  ACTOR_ANIMATION_STOP_IDLE = 0xE,
  ACTOR_ANIMATION_STOP_ATTACKIDLE = 0xF,
  ACTOR_ANIMATION_STOP_ATTACKIDLE_BARK = 0x10,
  ACTOR_ANIMATION_STOP_ATTACKIDLE_GROWL = 0x11,
  ACTOR_ANIMATION_PAIN_MAIN = 0x12,
  ACTOR_ANIMATION_PAIN_FRONT = 0x13,
  ACTOR_ANIMATION_PAIN_BACK = 0x14,
  ACTOR_ANIMATION_PAIN_LEFT = 0x15,
  ACTOR_ANIMATION_PAIN_RIGHT = 0x16,
  ACTOR_ANIMATION_RUN_PAIN_FRONT = 0x17,
  ACTOR_ANIMATION_RUN_PAIN_BACK = 0x18,
  ACTOR_ANIMATION_RUN_PAIN_LEFT = 0x19,
  ACTOR_ANIMATION_RUN_PAIN_RIGHT = 0x1A,
  ACTOR_ANIMATION_DEATH_FRONT = 0x1B,
  ACTOR_ANIMATION_DEATH_BACK = 0x1C,
  ACTOR_ANIMATION_DEATH_LEFT = 0x1D,
  ACTOR_ANIMATION_DEATH_RIGHT = 0x1E,
  ACTOR_ANIMATION_FLASHED = 0x1F,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE = 0x20,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE_BARK = 0x21,
  ACTOR_ANIMATION_ATTACK_ATTACKIDLE_GROWL = 0x22,
  ACTOR_ANIMATION_ATTACK_RUN = 0x23,
  ACTOR_ANIMATION_ATTACK_PLAYER_CLOSE_RANGE = 0x24,
  ACTOR_ANIMATION_ATTACK_MISS = 0x25,
  ACTOR_ANIMATION_ATTACK_MISS_LEFT = 0x26,
  ACTOR_ANIMATION_ATTACK_MISS_RIGHT = 0x27,
  ACTOR_ANIMATION_TRAVERSE_JUMP_UP_40 = 0x28,
  ACTOR_ANIMATION_TRAVERSE_JUMP_UP_80 = 0x29,
  ACTOR_ANIMATION_TRAVERSE_JUMP_DOWN_40 = 0x2A,
  ACTOR_ANIMATION_TRAVERSE_JUMP_DOWN_80 = 0x2B,
  ACTOR_ANIMATION_TRAVERSE_WALLHOP = 0x2C,
  ACTOR_ANIMATION_TRAVERSE_WINDOW = 0x2D,
  ACTOR_ANIMATION_TRAVERSE_THROUGH_HOLE_42 = 0x2E,
  ACTOR_ANIMATION_COUNT = 0x2F,
};

/* 477 */
enum MantleAnims
{
  MANTLE_ROOT = 0x0,
  MANTLE_UP_57 = 0x1,
  MANTLE_UP_51 = 0x2,
  MANTLE_UP_45 = 0x3,
  MANTLE_UP_39 = 0x4,
  MANTLE_UP_33 = 0x5,
  MANTLE_UP_27 = 0x6,
  MANTLE_UP_21 = 0x7,
  MANTLE_OVER_HIGH = 0x8,
  MANTLE_OVER_MID = 0x9,
  MANTLE_OVER_LOW = 0xA,
  MANTLE_ANIM_COUNT = 0xB,
  MANTLE_UP_FIRST = 0x1,
  MANTLE_UP_LAST = 0x7,
  MANTLE_UP_COUNT = 0x7,
  MANTLE_OVER_FIRST = 0x8,
  MANTLE_OVER_LAST = 0xA,
  MANTLE_OVER_COUNT = 0x3,
};

/* 478 */
enum $B80D7AEB868CF23412AD94C5D3A25183
{
  TS_2D = 0x0,
  TS_FUNCTION = 0x1,
  TS_COLOR_MAP = 0x2,
  TS_UNUSED_1 = 0x3,
  TS_UNUSED_2 = 0x4,
  TS_NORMAL_MAP = 0x5,
  TS_UNUSED_3 = 0x6,
  TS_UNUSED_4 = 0x7,
  TS_SPECULAR_MAP = 0x8,
  TS_UNUSED_5 = 0x9,
  TS_OCCLUSION_MAP = 0xA,
  TS_UNUSED_6 = 0xB,
  TS_COLOR0_MAP = 0xC,
  TS_COLOR1_MAP = 0xD,
  TS_COLOR2_MAP = 0xE,
  TS_COLOR3_MAP = 0xF,
  TS_COLOR4_MAP = 0x10,
  TS_COLOR5_MAP = 0x11,
  TS_COLOR6_MAP = 0x12,
  TS_COLOR7_MAP = 0x13,
  TS_COLOR8_MAP = 0x14,
  TS_COLOR9_MAP = 0x15,
  TS_COLOR10_MAP = 0x16,
  TS_COLOR11_MAP = 0x17,
  TS_COLOR12_MAP = 0x18,
  TS_COLOR13_MAP = 0x19,
  TS_COLOR14_MAP = 0x1A,
  TS_COLOR15_MAP = 0x1B,
  TS_THROW_MAP = 0x1C,
};

/* 479 */
enum $065B9D63BC3BA62D67B7891BC006BC0F
{
  IMAGE_TRACK_MISC = 0x0,
  IMAGE_TRACK_DEBUG = 0x1,
  IMAGE_TRACK_TEXTURENAME = 0x2,
  IMAGE_TRACK_UI = 0x3,
  IMAGE_TRACK_LIGHTMAP = 0x4,
  IMAGE_TRACK_LIGHT = 0x5,
  IMAGE_TRACK_FX = 0x6,
  IMAGE_TRACK_HUD = 0x7,
  IMAGE_TRACK_MODEL = 0x8,
  IMAGE_TRACK_WORLD = 0x9,
  IMAGE_TRACK_COUNT = 0xA,
};

/* 480 */
enum eEmblemLayers
{
  EMBLEMLAYER_TYPE = 0x0,
  EMBLEMLAYER_COST = 0x1,
  EMBLEMLAYER_UNLOCK_LVL = 0x2,
  EMBLEMLAYER_UNLOCK_PLEVEL = 0x3,
  MAX_EMBLEMLAYER_COUNT = 0x4,
};

/* 481 */
enum eEmblemCategoriesOrLayersType
{
  EMBLEMCATEGORIES_TYPE_LAYER = 0x0,
  EMBLEMCATEGORIES_TYPE_CATEGORY = 0x1,
  EMBLEMCATEGORIES_TYPE_ICONTYPE = 0x2,
  EMBLEMCATEGORIES_TYPE_BGCATEGORY = 0x3,
  EMBLEMCATEGORIES_TYPE_COUNT = 0x4,
  EMBLEMCATEGORIES_TYPE_INVALID = 0x4,
};

/* 482 */
enum eEmblemsOrBackings
{
  EMBLEMSORBACKINGS_TYPE = 0x0,
  EMBLEMSORBACKINGS_ID = 0x1,
  EMBLEMSORBACKINGS_SORTKEY = 0x2,
  EMBLEMSORBACKINGS_IMAGE = 0x3,
  EMBLEMSORBACKINGS_DESC = 0x4,
  EMBLEMSORBACKINGS_COST = 0x5,
  EMBLEMSORBACKINGS_UNLOCK_LVL = 0x6,
  EMBLEMSORBACKINGS_UNLOCK_PLVL = 0x7,
  EMBLEMSORBACKINGS_UNCLASSIFYAT = 0x8,
  EMBLEMSORBACKINGS_CATEGORY = 0x9,
  EMBLEMSORBACKINGS_ICONTYPE = 0xA,
  EMBLEMSORBACKINGS_MTX_NAME = 0xA,
  EMBLEMSORBACKINGS_OUTLINESIZE = 0xB,
  MAX_EMBLEMSORBACKINGS_COUNT = 0xC,
};

/* 483 */
enum eEmblemOrBackingsType
{
  EMBLEMSORBACKINGS_TYPE_BACKGROUND = 0x0,
  EMBLEMSORBACKINGS_TYPE_EMBLEM = 0x1,
  EMBLEMSORBACKINGS_TYPE_COUNT = 0x2,
  EMBLEMSORBACKINGS_TYPE_INVALID = 0x2,
};

/* 484 */
enum emblemOrBacking_e
{
  EMBLEM = 0x0,
  BACKING = 0x1,
  EMBLEM_OR_BACKING_COUNT = 0x2,
};

/* 485 */
enum emblemTypes_t
{
  EMBLEM_TYPE_DEFAULT = 0x0,
  EMBLEM_TYPE_MAX_LEVEL = 0x1,
  EMBLEM_TYPE_EXPERT = 0x2,
  EMBLEM_TYPE_MASTERY = 0x3,
  MAX_ITEM_EMBLEM_TYPES = 0x4,
};

/* 486 */
enum eEmblemCategories
{
  EMBLEMCATEGORY_TYPE = 0x0,
  EMBLEMCATEGORY_NAME = 0x1,
  EMBLEMCATEGORY_DESC = 0x2,
  EMBLEMCATEGORYORLAYER_COST = 0x3,
  EMBLEMCATEGORYORLAYER_UNLOCK_LVL = 0x4,
  EMBLEMCATEGORYORLAYER_UNLOCK_PLEVEL = 0x5,
  MAX_EMBLEMCATEGORY_COUNT = 0x6,
};

/* 487 */
enum scriptAnimMoveStatusStates_t
{
  ANIM_MOVESTATUS_STATIONARY = 0x0,
  ANIM_MOVESTATUS_WALK = 0x1,
  ANIM_MOVESTATUS_RUN = 0x2,
  NUM_ANIM_MOVESTATUSES = 0x3,
};

/* 488 */
enum scriptAnimDirections_t
{
  ANIM_DIRECTION_NONE = 0x0,
  ANIM_DIRECTION_FORWARD = 0x1,
  ANIM_DIRECTION_BACKWARD = 0x2,
  ANIM_DIRECTION_LEFT = 0x3,
  ANIM_DIRECTION_RIGHT = 0x4,
  NUM_ANIM_DIRECTIONS = 0x5,
};

/* 489 */
enum scriptAnimDmgDirections_t
{
  ANIM_DMGDIRECTION_NONE = 0x0,
  ANIM_DMGDIRECTION_FRONT = 0x1,
  ANIM_DMGDIRECTION_BACK = 0x2,
  ANIM_DMGDIRECTION_LEFT = 0x3,
  ANIM_DMGDIRECTION_RIGHT = 0x4,
  NUM_ANIM_DMGDIRECTIONS = 0x5,
};

/* 490 */
enum scriptAnimDmgTypes_t
{
  ANIM_DMGTYPE_NORMAL = 0x0,
  ANIM_DMGTYPE_NORMAL_SHOTGUN = 0x1,
  ANIM_DMGTYPE_EXPLOSIVE = 0x2,
  ANIM_DMGTYPE_MELEE = 0x3,
  ANIM_DMGTYPE_MELEE_BASH = 0x4,
  ANIM_DMGTYPE_HEADSHOT = 0x5,
  ANIM_DMGTYPE_BURNED = 0x6,
  ANIM_DMGTYPE_SUICIDE = 0x7,
  ANIM_DMGTYPE_GAS = 0x8,
  ANIM_DMGTYPE_FALLING = 0x9,
  NUM_ANIM_DMGTYPES = 0xA,
};

/* 491 */
enum scriptAnimStances_t
{
  ANIM_STANCE_STAND = 0x0,
  ANIM_STANCE_CROUCH = 0x1,
  ANIM_STANCE_PRONE = 0x2,
  NUM_ANIM_STANCES = 0x3,
};

/* 492 */
enum scriptAnimWeaponPositions_t
{
  ANIM_WP_HIP = 0x0,
  ANIM_WP_ADS = 0x1,
  ANIM_WP_RAISED = 0x2,
  NUM_ANIM_WEAPONPOSITIONS = 0x3,
};

/* 493 */
enum scriptAnimSlopeStates_t
{
  ANIM_SLOPE_NONE = 0x0,
  ANIM_SLOPE_UP = 0x1,
  ANIM_SLOPE_DOWN = 0x2,
  NUM_ANIM_SLOPESTATES = 0x3,
};

/* 494 */
enum scriptAnimPerkStates_t
{
  ANIM_PERK_UNUSED = 0x0,
  ANIM_PERK_LASTSTAND = 0x1,
  ANIM_PERK_GRENADEDEATH = 0x2,
  ANIM_PERK_FASTMANTLE = 0x3,
  ANIM_PERK_TURNED = 0x4,
  ANIM_PERK_FEMALE = 0x5,
  ANIM_PERK_ONEINCHPUNCH = 0x6,
  NUM_ANIM_PERKSTATES = 0x7,
};

/* 495 */
enum scriptAnimAttachmentStates_t
{
  ANIM_ATTACHMENT_UNUSED = 0x0,
  ANIM_ATTACHMENT_BAYONET = 0x1,
  NUM_ANIM_ATTACHMENTSTATES = 0x2,
};

/* 496 */
enum animScriptMounted_t
{
  MOUNTED_UNUSED = 0x0,
  MOUNTED_TURRET = 0x1,
  NUM_ANIM_COND_MOUNTED = 0x2,
};

/* 497 */
enum animScriptConditionTypes_t
{
  ANIM_CONDTYPE_BITFLAGS = 0x0,
  ANIM_CONDTYPE_VALUE = 0x1,
  ANIM_CONDTYPE_ENABLED = 0x2,
  ANIM_CONDTYPE_STRINGHASH = 0x3,
  NUM_ANIM_CONDTYPES = 0x4,
};

/* 498 */
enum scriptAnimNoteType_t
{
  ANIM_NOTE_RELOAD = 0x1,
  ANIM_NOTE_FOOTPRINT = 0x2,
  ANIM_NOTE_MODEL_PREVIEWER = 0x4,
};

/* 499 */
enum scriptAnimStrafeStates_t
{
  ANIM_STRAFE_NOT = 0x0,
  ANIM_STRAFE_LEFT = 0x1,
  ANIM_STRAFE_RIGHT = 0x2,
  NUM_ANIM_STRAFESTATES = 0x3,
};

/* 500 */
enum scriptAnimVehicleEntryPos_t
{
  ANIM_VEHICLE_ENTRY_SIDE_LEFT = 0x0,
  ANIM_VEHICLE_ENTRY_SIDE_RIGHT = 0x1,
  ANIM_VEHICLE_ENTRY_REAR = 0x2,
  NUM_ANIM_VEHICLE_ENTRY_POSITIONS = 0x3,
};

/* 501 */
enum $BC6EBFA47C948483B9F0EC28F1994011
{
  SL_USER_GAME = 0x1,
  SL_USER_TEMP = 0x2,
  SL_USER_XZONE = 0x4,
  SL_USER_XZONE_TEMP = 0x8,
};

/* 502 */
enum animScriptParseMode_t
{
  PARSEMODE_DEFINES = 0x0,
  PARSEMODE_ANIMATION = 0x1,
  PARSEMODE_CANNED_ANIMATIONS = 0x2,
  PARSEMODE_STATECHANGES = 0x3,
  PARSEMODE_EVENTS = 0x4,
  PARSEMODE_FORCELOAD = 0x5,
  NUM_PARSEMODES = 0x6,
};

/* 503 */
enum eDogMainAnims
{
  DOG_ANIMINDEX_MAIN_ROOT = 0x0,
  DOG_ANIMINDEX_IDLE = 0x1,
  DOG_ANIMINDEX_MOVE_WALK = 0x2,
  DOG_ANIMINDEX_RUN_STOP = 0x3,
  DOG_ANIMINDEX_RUN_PAIN = 0x4,
  DOG_ANIMINDEX_RUN_ATTACK = 0x5,
  DOG_ANIMINDEX_RUN_TURN_LEFT = 0x6,
  DOG_ANIMINDEX_RUN_TURN_RIGHT = 0x7,
  DOG_ANIMINDEX_TURN_LEFT = 0x8,
  DOG_ANIMINDEX_TURN_RIGHT = 0x9,
  DOG_ANIMINDEX_RUN_TURN_AROUND_LEFT = 0xA,
  DOG_ANIMINDEX_RUN_TURN_AROUND_RIGHT = 0xB,
  DOG_ANIMINDEX_TURN_AROUND_LEFT = 0xC,
  DOG_ANIMINDEX_TURN_AROUND_RIGHT = 0xD,
  DOG_ANIMINDEX_PAIN_RUN_FRONT = 0xE,
  DOG_ANIMINDEX_PAIN_RUN_BACK = 0xF,
  DOG_ANIMINDEX_PAIN_RUN_LEFT = 0x10,
  DOG_ANIMINDEX_PAIN_RUN_RIGHT = 0x11,
  DOG_ANIMINDEX_PAIN_FRONT = 0x12,
  DOG_ANIMINDEX_PAIN_BACK = 0x13,
  DOG_ANIMINDEX_PAIN_LEFT = 0x14,
  DOG_ANIMINDEX_PAIN_RIGHT = 0x15,
  DOG_ANIMINDEX_DEATH_FRONT = 0x16,
  DOG_ANIMINDEX_DEATH_BACK = 0x17,
  DOG_ANIMINDEX_DEATH_LEFT = 0x18,
  DOG_ANIMINDEX_DEATH_RIGHT = 0x19,
  DOG_ANIMINDEX_FLASHED_RUN = 0x1A,
  DOG_ANIMINDEX_ATTACK_MISS = 0x1B,
  DOG_ANIMINDEX_ATTACK_MISS_LEFT = 0x1C,
  DOG_ANIMINDEX_ATTACK_MISS_RIGHT = 0x1D,
  DOG_ANIMINDEX_ATTACK_CLOSE_RANGE = 0x1E,
  DOG_ANIMINDEX_TRAVERSE_JUMP_UP_40 = 0x1F,
  DOG_ANIMINDEX_TRAVERSE_JUMP_UP_80 = 0x20,
  DOG_ANIMINDEX_TRAVERSE_JUMP_DOWN_40 = 0x21,
  DOG_ANIMINDEX_TRAVERSE_JUMP_DOWN_80 = 0x22,
  DOG_ANIMINDEX_TRAVERSE_WALLHOP = 0x23,
  DOG_ANIMINDEX_TRAVERSE_WINDOW = 0x24,
  DOG_ANIMINDEX_TRAVERSE_THROUGH_HOLE_42 = 0x25,
  DOG_ANIMINDEX_MAIN_COUNT = 0x26,
};

/* 504 */
enum eDogRunStartKnobAnims
{
  DOG_ANIMINDEX_RUN_START_KNOB_ROOT = 0x0,
  DOG_ANIMINDEX_RUN_START = 0x1,
  DOG_ANIMINDEX_RUN_START_COUNT = 0x2,
};

/* 505 */
enum eDogRunKnobAnims
{
  DOG_ANIMINDEX_RUN_KNOB_ROOT = 0x0,
  DOG_ANIMINDEX_RUN = 0x1,
  DOG_ANIMINDEX_RUN_LEAN_L = 0x2,
  DOG_ANIMINDEX_RUN_LEAN_R = 0x3,
  DOG_ANIMINDEX_RUN_WATER = 0x4,
  DOG_ANIMINDEX_RUN_WATER_LEAN_L = 0x5,
  DOG_ANIMINDEX_RUN_WATER_LEAN_R = 0x6,
  DOG_ANIMINDEX_RUN_COUNT = 0x7,
};

/* 506 */
enum eDogAttackIdleKnobAnims
{
  DOG_ANIMINDEX_ATTACKIDLE_KNOB_ROOT = 0x0,
  DOG_ANIMINDEX_ATTACKIDLE = 0x1,
  DOG_ANIMINDEX_ATTACKIDLE_BARK = 0x2,
  DOG_ANIMINDEX_ATTACKIDLE_GROWL = 0x3,
  DOG_ANIMINDEX_ATTACKIDLE_COUNT = 0x4,
};

/* 507 */
enum eDogLookDown
{
  DOG_ANIMINDEX_LOOK_DOWN_ROOT = 0x0,
  DOG_ANIMINDEX_LOOK_DOWN = 0x1,
  DOG_ANIMINDEX_LOOK_DOWN_ATTACK = 0x2,
  DOG_ANIMINDEX_LOOK_DOWN_COUNT = 0x3,
};

/* 508 */
enum eDogLookUp
{
  DOG_ANIMINDEX_LOOK_UP_ROOT = 0x0,
  DOG_ANIMINDEX_LOOK_UP = 0x1,
  DOG_ANIMINDEX_LOOK_UP_ATTACK = 0x2,
  DOG_ANIMINDEX_LOOK_UP_COUNT = 0x3,
};

/* 509 */
enum eDogLookRight
{
  DOG_ANIMINDEX_LOOK_RIGHT_ROOT = 0x0,
  DOG_ANIMINDEX_LOOK_RIGHT = 0x1,
  DOG_ANIMINDEX_LOOK_RIGHT_ATTACK = 0x2,
  DOG_ANIMINDEX_LOOK_RIGHT_COUNT = 0x3,
};

/* 510 */
enum eDogLookLeft
{
  DOG_ANIMINDEX_LOOK_LEFT_ROOT = 0x0,
  DOG_ANIMINDEX_LOOK_LEFT = 0x1,
  DOG_ANIMINDEX_LOOK_LEFT_ATTACK = 0x2,
  DOG_ANIMINDEX_LOOK_LEFT_COUNT = 0x3,
};

/* 511 */
enum eDogAnimStateStart
{
  DOG_ANIMSTATE_INDEX_ROOT = 0x0,
  DOG_ANIMSTATE_LAST_ROOT_ANIM = 0x26,
  DOG_ANIMSTATE_INDEX_MOVE_START = 0x26,
  DOG_ANIMSTATE_INDEX_MOVE = 0x27,
  DOG_ANIMSTATE_INDEX_ATTACKIDLE_KNOB = 0x28,
  DOG_ANIMSTATE_INDEX_LOOK_DOWN = 0x29,
  DOG_ANIMSTATE_INDEX_LOOK_UP = 0x2A,
  DOG_ANIMSTATE_INDEX_LOOK_RIGHT = 0x2B,
  DOG_ANIMSTATE_INDEX_LOOK_LEFT = 0x2C,
  DOG_ANIMSTATE_LAST_ROOT_ANIM_GROUP = 0x2D,
  DOG_ANIMSTATE_CHILDINDEX_MOVE_START = 0x2D,
  DOG_ANIMSTATE_CHILDINDEX_MOVE = 0x2E,
  DOG_ANIMSTATE_CHILDINDEX_ATTACKIDLE = 0x34,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_DOWN = 0x37,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_UP = 0x39,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_RIGHT = 0x3B,
  DOG_ANIMSTATE_CHILDINDEX_LOOK_LEFT = 0x3D,
  DOG_ANIMSTATE_INDEX_COUNT = 0x3F,
};

/* 512 */
enum ActorAnimCategories
{
  ACTOR_ANIMATION_CATEGORY_INIT = 0x0,
  ACTOR_ANIMATION_CATEGORY_STOP = 0x1,
  ACTOR_ANIMATION_CATEGORY_MOVE = 0x2,
  ACTOR_ANIMATION_CATEGORY_COMBAT = 0x3,
  ACTOR_ANIMATION_CATEGORY_PAIN = 0x4,
  ACTOR_ANIMATION_CATEGORY_DEATH = 0x5,
  ACTOR_ANIMATION_CATEGORY_FLASHED = 0x6,
  ACTOR_ANIMATION_CATEGORY_TRAVERSE = 0x7,
};

/* 513 */
enum $25466869D0E7323FFAA41135EA762C5E
{
  IPAK_PRIORITY_NORMAL = 0x0,
  IPAK_PRIORITY_HIGH = 0x1,
};

/* 514 */
enum stream_priority
{
  STREAM_PRIO_LOW = 0x0,
  STREAM_PRIO_NORMAL = 0x1,
  STREAM_PRIO_HIGH = 0x2,
};

/* 515 */
enum stream_status
{
  STREAM_STATUS_INVALID = 0x0,
  STREAM_STATUS_QUEUED = 0x1,
  STREAM_STATUS_INPROGRESS = 0x2,
  STREAM_STATUS_CANCELLED = 0x3,
  STREAM_STATUS_DEVICE_REMOVED = 0x4,
  STREAM_STATUS_READFAILED = 0x5,
  STREAM_STATUS_EOF = 0x6,
  STREAM_STATUS_FINISHED = 0x7,
  STREAM_STATUS_USER1 = 0x8,
  STREAM_STATUS_COUNT = 0x9,
};

/* 516 */
enum $1B82B6AE48EB9E6905CC94A5C8D048CF
{
  IPAK_ADDPACKFILE_ERROR_SPLIT = 0xFFFFFFF7,
  IPAK_ADDPACKFILE_ERROR_NO_FREE_IPAK_SLOT = 0xFFFFFFF8,
  IPAK_ADDPACKFILE_ERROR_EMPTY = 0xFFFFFFF9,
  IPAK_ADDPACKFILE_ERROR_NO_INDEX_SECTION = 0xFFFFFFFA,
  IPAK_ADDPACKFILE_ERROR_NO_DATA_SECTION = 0xFFFFFFFB,
  IPAK_ADDPACKFILE_ERROR_VERSION_MISMATCH = 0xFFFFFFFC,
  IPAK_ADDPACKFILE_ERROR_INVALID_HEADER = 0xFFFFFFFD,
  IPAK_ADDPACKFILE_ERROR_FILE_READ = 0xFFFFFFFE,
  IPAK_ADDPACKFILE_ERROR_FILE_OPEN = 0xFFFFFFFF,
  IPAK_ADDPACKFILE_SUCCESS = 0x0,
  IPAK_ADDPACKFILE_ALREADY_ADDED = 0x1,
};

/* 517 */
enum $FECAAF7E448A51D8BD7822806FBCFBED
{
  GFX_NOT_STREAMING = 0x0,
  GFX_STREAMING = 0x1,
  GFX_MANUAL_STREAMING = 0x2,
  GFX_TEMP_STREAMING = 0x3,
};

/* 518 */
enum SA_AttrTarget
{
  SA_All = 0xFFFF,
  SA_Assembly = 0x1,
  SA_Class = 0x4,
  SA_Constructor = 0x20,
  SA_Delegate = 0x1000,
  SA_Enum = 0x10,
  SA_Event = 0x200,
  SA_Field = 0x100,
  SA_GenericParameter = 0x4000,
  SA_Interface = 0x400,
  SA_Method = 0x40,
  SA_Module = 0x2,
  SA_Parameter = 0x800,
  SA_Property = 0x80,
  SA_ReturnValue = 0x2000,
  SA_Struct = 0x8,
  SA_This = 0x8000,
};

/* 519 */
enum $0A515787AEC998A82A656FBEBEECF2D4
{
  F_none = 0x0,
  F_sub = 0x1,
  F_up = 0x2,
  F_avg = 0x3,
  F_paeth = 0x4,
  F_avg_first = 0x5,
  F_paeth_first = 0x6,
};

/* 520 */
enum $E7F8A64E92EDFF134ABDD42A52CC879E
{
  STBI_default = 0x0,
  STBI_grey = 0x1,
  STBI_grey_alpha = 0x2,
  STBI_rgb = 0x3,
  STBI_rgb_alpha = 0x4,
};

/* 521 */
enum $C74BE78AFF075BD999734DFED25D4AB6
{
  SCAN_load = 0x0,
  SCAN_type = 0x1,
  SCAN_header = 0x2,
};

/* 522 */
enum demoHighlightReelInformationType
{
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_PLAYER = 0x0,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_START = 0x0,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_EVENT = 0x1,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_SCORE_EVENT = 0x2,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_MEDAL = 0x3,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_ROUND_RESULT = 0x4,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_FIRST_PERSON_GAME_RESULT = 0x5,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ACTOR = 0x6,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_HELICOPTER = 0x7,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_TURRET = 0x8,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_SCRIPTED = 0x9,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_MISSILE = 0xA,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_VEHICLE = 0xB,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_ROUND_END = 0xC,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_DOWNED = 0xD,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_REVIVED = 0xE,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_BLEDOUT = 0xF,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_USE_MAGICBOX = 0x10,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_POWERUP_DROPPED = 0x11,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_POWERUP_GRABBED = 0x12,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_PERK = 0x13,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_POWER = 0x14,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_DOOR = 0x15,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_BUILDABLE_PLACED = 0x16,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_USE_PACKAPUNCH = 0x17,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_RAMPAGE = 0x18,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_SPECIAL = 0x19,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_MULTIATTACK = 0x1A,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_MEAT_STINK = 0x1B,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRABBED_MAGICBOX = 0x1C,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRABBED_PACKAPUNCH = 0x1D,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_ZM_FIRST_PLAYER_GRENADE_SPECIAL_LONG = 0x1E,
  DEMO_HIGHLIGHT_REEL_INFORMATION_TYPE_COUNT = 0x1F,
};

/* 523 */
enum demoHighlightReelPlayerFilter
{
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_ME = 0x0,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_FIRST = 0x0,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_FRIENDS = 0x1,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ME_AND_FRIENDS = 0x2,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_FRIENDLY_TEAM = 0x3,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_ENEMY_TEAM = 0x4,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_EVERYONE = 0x5,
  DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_LAST = 0x5,
};

/* 524 */
enum demoControlsButton
{
  DEMO_CONTROLS_BUTTON_PLAY = 0x0,
  DEMO_CONTROLS_BUTTON_RECORD = 0x1,
  DEMO_CONTROLS_BUTTON_SWITCH_PLAYER = 0x2,
  DEMO_CONTROLS_BUTTON_SWITCH_CAMERA = 0x3,
  DEMO_CONTROLS_BUTTON_TOGGLE_GAME_HUD = 0x4,
  DEMO_CONTROLS_BUTTON_TOGGLE_DEMO_HUD = 0x5,
  DEMO_CONTROLS_BUTTON_JUMP_BACK = 0x6,
  DEMO_CONTROLS_BUTTON_JUMP_FORWARD = 0x7,
  DEMO_CONTROLS_BUTTON_TIMESCALE_DECREASE = 0x8,
  DEMO_CONTROLS_BUTTON_TIMESCALE_INCREASE = 0x9,
  DEMO_CONTROLS_BUTTON_COUNT = 0xA,
};

/* 525 */
enum demoHighlightReelTransitionFilter
{
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_NONE = 0x0,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_FIRST = 0x0,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_FADE = 0x1,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_RANDOM = 0x2,
  DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_LAST = 0x2,
};

/* 526 */
enum demoHighlightReelStylesFilter
{
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_BEST_MOMENTS = 0x0,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_FIRST = 0x0,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_EXPLOSIVE_AND_PROJECTILE_KILLS = 0x1,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_VEHICLE_KILLS = 0x2,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_GUN_KILLS_ONLY = 0x3,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_GUN_KILLS_AND_EVENTS = 0x4,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_TURRET_KILLS = 0x5,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_DOG_KILLS = 0x6,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_RAMPAGER = 0x7,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_SAVIOR_AND_SINNER = 0x8,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_TEAM_PLAYER = 0x9,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_BIG_SPENDER = 0xA,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_HANDYMAN = 0xB,
  DEMO_HIGHLIGHT_REEL_STYLES_FILTER_LAST = 0xB,
};

/* 527 */
enum demoHighlightReelGameResultFilter
{
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_OFF = 0x0,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_FIRST = 0x0,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_FINAL_RESULT = 0x1,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_WITH_EVENTS = 0x2,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_ALL_RESULTS = 0x3,
  DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_LAST = 0x3,
};

/* 528 */
enum demoKeyboardModes
{
  DEMO_KEYBOARD_NONE = 0x0,
  DEMO_KEYBOARD_SEGMENT_NAME = 0x1,
  DEMO_KEYBOARD_CLIP_NAME_INGAME = 0x2,
  DEMO_KEYBOARD_CLIP_DESC_INGAME = 0x3,
  DEMO_KEYBOARD_SCREENSHOT_NAME_INGAME = 0x4,
  DEMO_KEYBOARD_SCREENSHOT_DESC_INGAME = 0x5,
  DEMO_KEYBOARD_FILM_NAME = 0x6,
  DEMO_KEYBOARD_FILM_DESCRIPTION = 0x7,
  DEMO_KEYBOARD_CUSTOMGAME_NAME = 0x8,
  DEMO_KEYBOARD_CUSTOMGAME_DESCRIPTION = 0x9,
  DEMO_KEYBOARD_EMBLEM_NAME = 0xA,
  DEMO_KEYBOARD_EMBLEM_DESCRIPTION = 0xB,
  DEMO_KEYBOARD_COUNT = 0xC,
};

/* 529 */
enum demoState
{
  DEMO_STATE_IDLE = 0x0,
  DEMO_STATE_RECORDING = 0x1,
  DEMO_STATE_PLAYING = 0x2,
  DEMO_STATE_COUNT = 0x3,
};

/* 530 */
enum demoStreamingThrottleState
{
  DEMO_STREAMING_THROTTLE_OPEN = 0x0,
  DEMO_STREAMING_THROTTLE_CLOSED_MIN_INTERVAL = 0x1,
  DEMO_STREAMING_THROTTLE_CLOSED_BANDWIDTH_LIMIT = 0x2,
};

/* 531 */
enum demoLagFlag_e
{
  DEMO_LAGFLAG_NONE = 0x0,
  DEMO_LAGFLAG_LOW = 0x64,
  DEMO_LAGFLAG_MED = 0xC8,
  DEMO_LAGFLAG_HIGH = 0x12C,
  DEMO_LAGFLAG_IS_SET = 0x3E8,
};

/* 532 */
enum fileshareCategory_e
{
  FILESHARE_CATEGORY_INVALID = 0xFFFFFFFF,
  FILESHARE_CATEGORY_ALL = 0x0,
  FILESHARE_CATEGORY_MP_START = 0x1,
  FILESHARE_CATEGORY_FILM_MP = 0x1,
  FILESHARE_CATEGORY_CLIP_MP = 0x2,
  FILESHARE_CATEGORY_SCREENSHOT_MP = 0x3,
  FILESHARE_CATEGORY_HIGHLIGHT = 0x4,
  FILESHARE_CATEGORY_CUSTOM_GAME_MP = 0x5,
  FILESHARE_CATEGORY_EMBLEM = 0x6,
  FILESHARE_CATEGORY_CUSTOM_CLASS = 0x7,
  FILESHARE_CATEGORY_EMBLEMIMAGE = 0x8,
  FILESHARE_CATEGORY_MP_END = 0x8,
  FILESHARE_CATEGORY_ZM_START = 0x33,
  FILESHARE_CATEGORY_FILM_ZM = 0x33,
  FILESHARE_CATEGORY_CLIP_ZM = 0x34,
  FILESHARE_CATEGORY_SCREENSHOT_ZM = 0x35,
  FILESHARE_CATEGORY_CUSTOM_GAME_ZM = 0x36,
  FILESHARE_CATEGORY_ZM_END = 0x36,
  FILESHARE_CATEGORY_INGAMESTORE_START = 0x64,
  FILESHARE_CATEGORY_INGAMESTORE_MAPPACKS = 0x64,
  FILESHARE_CATEGORY_INGAMESTORE_THEMES = 0x65,
  FILESHARE_CATEGORY_INGAMESTORE_AVATARS = 0x66,
  FILESHARE_CATEGORY_INGAMESTORE_WEAPONPACKS = 0x67,
  FILESHARE_CATEGORY_INGAMESTORE_CALLINGCARDPACKS = 0x68,
  FILESHARE_CATEGORY_INGAMESTORE_STORAGEPACKS = 0x69,
  FILESHARE_CATEGORY_INGAMESTORE_GHOSTS = 0x6A,
  FILESHARE_CATEGORY_INGAMESTORE_END = 0x6A,
  FILESHARE_CATEGORY_MOTD_IMAGES = 0x78,
  FILESHARE_CATEGORY_VOTE_IMAGES = 0x82,
  FILESHARE_CATEGORY_AVI_MP = 0x8000,
  FILESHARE_CATEGORY_AVI_ZM = 0x8001,
  FILESHARE_CATEGORY_EXEMONITOR = 0x8002,
};

/* 533 */
enum demoFreeCameraMode
{
  DEMO_FREECAM_MODE_FIRST = 0x0,
  DEMO_FREECAM_MODE_FREEROAM = 0x0,
  DEMO_FREECAM_MODE_EDIT = 0x1,
  DEMO_FREECAM_MODE_DOLLY = 0x2,
  DEMO_FREECAM_MODE_LAST = 0x2,
  DEMO_FREECAM_MODE_COUNT = 0x3,
};

/* 534 */
enum demoClipTransition
{
  DEMO_CLIP_TRANSITION_FIRST = 0x0,
  DEMO_CLIP_TRANSITION_NONE = 0x0,
  DEMO_CLIP_TRANSITION_FADE = 0x1,
  DEMO_CLIP_TRANSITION_LAST = 0x1,
  DEMO_CLIP_TRANSITION_COUNT = 0x2,
};

/* 535 */
enum demoProfileData
{
  DEMO_PROFILE_GAMESTATE = 0x0,
  DEMO_PROFILE_SNAPSHOT = 0x1,
  DEMO_PROFILE_MATCHSTATES = 0x2,
  DEMO_PROFILE_PLAYERSTATES = 0x3,
  DEMO_PROFILE_ENTITIES = 0x4,
  DEMO_PROFILE_CLIENTS = 0x5,
  DEMO_PROFILE_ACTORS = 0x6,
  DEMO_PROFILE_ANIMCMDS = 0x7,
  DEMO_PROFILE_DATA_TYPE_COUNT = 0x8,
};

/* 536 */
enum demoRestorePoint
{
  DEMO_RESTORE_POINT_START = 0x0,
  DEMO_RESTORE_POINT_END = 0x1,
  DEMO_RESTORE_POINT_COUNT = 0x2,
};

/* 537 */
enum demoHighlightReelPlayerPriority
{
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_EVERYONE = 0x0,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_FRIEND = 0x1,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_SELF = 0x2,
  DEMO_HIGHLIGHT_REEL_PLAYER_PRIORITY_COUNT = 0x3,
};

/* 538 */
enum demoInformationScreenTypes
{
  DEMO_INFORMATION_SCREEN_NONE = 0x0,
  DEMO_INFORMATION_SCREEN_FILM_START_SCREEN_FADE_IN = 0x1,
  DEMO_INFORMATION_SCREEN_FILM_START_SCREEN_FADE_OUT = 0x2,
  DEMO_INFORMATION_SCREEN_TRANSITION = 0x3,
  DEMO_INFORMATION_SCREEN_WAITING_FOR_DOWNLOAD = 0x4,
  DEMO_INFORMATION_SCREEN_COUNT = 0x5,
};

/* 539 */
enum demoClipState
{
  DEMO_CLIP_IDLE = 0x0,
  DEMO_CLIP_RECORD_UNCOMPRESSED_SNAPHOT = 0x1,
  DEMO_CLIP_RECORD_CONTINUOUS = 0x2,
  DEMO_CLIP_PAUSED = 0x3,
  DEMO_CLIP_PREVIEW = 0x4,
  DEMO_CLIP_STREAMING = 0x5,
};

/* 540 */
enum demoDollyCameraTimeScaleMode
{
  DEMO_DOLLYCAM_TIMESCALE_MODE_MANUAL = 0x0,
  DEMO_DOLLYCAM_TIMESCALE_MODE_LINEAR = 0x1,
  DEMO_DOLLYCAM_TIMESCALE_MODE_FIXED = 0x2,
  DEMO_DOLLYCAM_TIMESCALE_MODE_COUNT = 0x3,
};

/* 541 */
enum demoCameraMode
{
  DEMO_CAMERA_MODE_NONE = 0x0,
  DEMO_CAMERA_MODE_THIRDPERSON = 0x1,
  DEMO_CAMERA_MODE_FREECAM = 0x2,
  DEMO_CAMERA_MODE_COUNT = 0x3,
};

/* 542 */
enum netFieldTypes_t
{
  NET_FIELD_TYPE_ARCHIVED_ENTITY = 0x0,
  NET_FIELD_TYPE_ARCHIVED_ENTITY_STATE = 0x1,
  NET_FIELD_TYPE_CLIENT_STATE = 0x2,
  NET_FIELD_TYPE_ACTORSTATE = 0x3,
  NET_FIELD_TYPE_PLAYERSTATE = 0x4,
  NET_FIELD_TYPE_OBJECTIVE = 0x5,
  NET_FIELD_TYPE_HUDELEMS = 0x6,
  NET_FIELD_TYPE_MATCHSTATE = 0x7,
  NET_FIELD_TYPE_COUNT = 0x8,
};

/* 543 */
enum demoSavePopup
{
  DEMO_SAVE_POPUP_CLIP = 0x0,
  DEMO_SAVE_POPUP_SCREENSHOT = 0x1,
};

/* 544 */
enum uiMenuCommand_t
{
  UIMENU_NONE = 0x0,
  UIMENU_MAIN = 0x1,
  UIMENU_MAINLOBBY = 0x2,
  UIMENU_INGAME = 0x3,
  UIMENU_PREGAME = 0x4,
  UIMENU_POSTGAME = 0x5,
  UIMENU_WM_QUICKMESSAGE = 0x6,
  UIMENU_SCRIPT_POPUP = 0x7,
  UIMENU_SCOREBOARD = 0x8,
  UIMENU_GAMERCARD = 0x9,
  UIMENU_MUTEERROR = 0xA,
  UIMENU_SPLITSCREENGAMESETUP = 0xB,
  UIMENU_SYSTEMLINKJOINGAME = 0xC,
  UIMENU_PARTY = 0xD,
  UIMENU_WAGER_PARTY = 0xE,
  UIMENU_LEAGUE_PARTY = 0xF,
  UIMENU_GAMELOBBY = 0x10,
  UIMENU_WAGERLOBBY = 0x11,
  UIMENU_PRIVATELOBBY = 0x12,
  UIMENU_LEAGUELOBBY = 0x13,
  UIMENU_THEATERLOBBY = 0x14,
  UIMENU_MIGRATION = 0x15,
  UIMENU_CONTROLLERREMOVED = 0x16,
  UIMENU_ENDOFGAME = 0x17,
  UIMENU_INGAME_NOUNPAUSE = 0x18,
};

/* 545 */
enum eSpawnSystemDebugMode
{
  SS_DEBUG_OFF = 0x0,
  SS_DEBUG_LIVE = 0x1,
  SS_DEBUG_ARCHIVE_LOADING = 0x2,
  SS_DEBUG_ARCHIVE_VIEW = 0x3,
  SS_DEBUG_ARCHIVE_SIMULATE = 0x4,
  SS_DEBUG_ARCHIVE_SIMULATE_LIVE = 0x5,
  SS_DEBUG_ARCHIVE_MAX = 0x5,
  SS_DEBUG_COUNT = 0x6,
};

/* 546 */
enum eDemoSpawnLogDataType
{
  DEMOSPAWNLOG_FIRST = 0x0,
  DEMOSPAWNLOG_BAD_SPAWN = 0x1,
  DEMOSPAWNLOG_INFLUENCER_PRESET = 0x2,
  DEMOSPAWNLOG_INFLUENCER_INSTANCE = 0x3,
  DEMOSPAWNLOG_SPAWN_POINT = 0x4,
  DEMOSPAWNLOG_REJECTED_POINT = 0x5,
  DEMOSPAWNLOG_COUNT = 0x6,
};

/* 547 */
enum svc_ops_e
{
  svc_nop = 0x0,
  svc_gamestate = 0x1,
  svc_configstring = 0x2,
  svc_gameinformation = 0x3,
  svc_baseline = 0x4,
  svc_entitycache = 0x5,
  svc_dynentstate = 0x6,
  svc_destructiblestate = 0x7,
  svc_ropestate = 0x8,
  svc_glassstate = 0x9,
  svc_serverCommand = 0xA,
  svc_download = 0xB,
  svc_snapshot = 0xC,
  svc_servercommands = 0xD,
  svc_EOF = 0xE,
};

/* 548 */
typedef CALL_STATE $5768F200A90265EBC806C091AD37A86D;

/* 549 */
enum $319FB7AC4823D22D5C237FD70142947F
{
  CINEMATIC_ID_INVALID = 0x0,
  CINEMATIC_ID_MIN_VALID = 0x1,
  CINEMATIC_ID_MAX_VALID = 0x20,
  CINEMATIC_ID_RESERVED_BIT = 0x1000,
};

/* 550 */
enum DeltaFlags
{
  DELTA_FLAGS_NONE = 0x1,
  DELTA_FLAGS_FORCE = 0x0,
};

/* 551 */
enum demoPacketType
{
  DEMO_PACKET_END_OF_MSG_BLOCK = 0x0,
  DEMO_PACKET_END_OF_DEMO = 0x1,
  DEMO_PACKET_CLIP_COMMAND = 0x2,
  DEMO_PACKET_RAW_SNAPSHOT = 0x3,
  DEMO_PACKET_TYPE_COUNT = 0x4,
};

/* 552 */
enum profile_category_e
{
  PROFC_NONE = 0x0,
  PROFC_ADDPACK = 0x1,
  PROFC_GAMELOGIC = 0x2,
  PROFC_SCRIPT = 0x3,
  PROFC_DRAW = 0x4,
  PROFC_DRAW_ADD_SCENE = 0x5,
  PROFC_DRAWSKIN = 0x6,
  PROFC_DPVS = 0x7,
  PROFC_SOUND = 0x8,
  PROFC_SOUND_GAME = 0x9,
  PROFC_SOUND_UPDATE = 0xA,
  PROFC_SOUND_DRIVER = 0xB,
  PROFC_SOUND_OCC = 0xC,
  PROFC_FX = 0xD,
  PROFC_STREAMER = 0xE,
  PROFC_PHYSICS = 0xF,
  PROFC_ANIM = 0x10,
  PROFC_DRAW2D = 0x11,
  PROFC_SERVER = 0x12,
  PROFC_WAIT = 0x13,
  PROFC_MAX_COUNT = 0x14,
};

/* 553 */
enum demoDebugInformation
{
  DEMO_DEBUG_INFORMATION_NONE = 0x0,
  DEMO_DEBUG_INFORMATION_ENTITIES = 0x1,
  DEMO_DEBUG_INFORMATION_FAKE_ENTITIES = 0x2,
  DEMO_DEBUG_INFORMATION_HIGHLIGHT_REEL_POINTS = 0x3,
  DEMO_DEBUG_INFORMATION_COUNT = 0x4,
};

/* 554 */
enum print_msg_dest_t
{
  CON_DEST_CONSOLE = 0x0,
  CON_DEST_MINICON = 0x1,
  CON_DEST_ERROR = 0x2,
  CON_DEST_GAME_FIRST = 0x3,
  CON_DEST_GAME1 = 0x3,
  CON_DEST_GAME2 = 0x4,
  CON_DEST_GAME3 = 0x5,
  CON_DEST_GAME4 = 0x6,
  CON_DEST_GAME_LAST = 0x6,
  CON_DEST_COUNT = 0x7,
};

/* 555 */
enum demoControllerConfig
{
  DEMO_CONTROLLER_CONFIG_DEFAULT = 0x0,
  DEMO_CONTROLLER_CONFIG_DIGITAL = 0x1,
  DEMO_CONTROLLER_CONFIG_BADBOT = 0x2,
  DEMO_CONTROLLER_CONFIG_SHOUTCASTER = 0x3,
  DEMO_CONTROLLER_CONFIG_COUNT = 0x4,
};

/* 556 */
enum $1678BA6E009C67D6121C51307F6C7F7A
{
  HUDELEMFLAG_FOREGROUND = 0x1,
  HUDELEMFLAG_HIDEWHENDEAD = 0x2,
  HUDELEMFLAG_HIDEWHENINMENU = 0x4,
  HUDELEMFLAG_FONTSTYLE3D_SHADOWED = 0x8,
  HUDELEMFLAG_FONTSTYLE3D_SHADOWED_MORE = 0x10,
  HUDELEMFLAG_FONT3D_USE_GLOWCOLOR = 0x20,
  HUDELEMFLAG_HIDEWHENINKILLCAM = 0x40,
  HUDELEMFLAG_REDACT = 0x80,
  HUDELEMFLAG_FADEWHENTARGETED = 0x100,
  HUDELEMFLAG_HIDEWHENINDEMO = 0x200,
  HUDELEMFLAG_HIDEWHILEREMOTECONTROLING = 0x400,
  HUDELEMFLAG_COD7DECODE = 0x800,
  HUDELEMFLAG_NO_OFFSCREEN_WAYPOINT = 0x1000,
  HUDELEMFLAG_HIDEWHENINSCOPE = 0x2000,
  HUDELEMFLAG_TYPEWRITER = 0x4000,
  HUDELEMFLAG_IMMUNE_TO_DEMO_GAMEHUD_SETTINGS = 0x8000,
  HUDELEMFLAG_IMMUNE_TO_DEMO_FREECAMERA = 0x10000,
  HUDELEMFLAG_SHOW_PLAYER_TEAM_HUDELEM_TO_SPECTATOR = 0x20000,
  HUDELEMFLAG_DEBUG = 0x40000,
  HUDELEMFLAGBITS = 0x13,
};

/* 557 */
enum $C3A1652B1117435D4F9E11ADCCFD17E8
{
  CLASS_NUM_ENTITY = 0x0,
  CLASS_NUM_HUDELEM = 0x1,
  CLASS_NUM_PATHNODE = 0x2,
  CLASS_NUM_VEHICLENODE = 0x3,
  CLASS_NUM_DYNENTITY = 0x4,
  CLASS_NUM_MENUELEM = 0x5,
  CLASS_NUM_COUNT = 0x6,
};

/* 558 */
enum SndStopSoundFlags
{
  SND_STOP_ALL = 0x0,
  SND_STOP_PAUSED = 0x1,
};

/* 559 */
enum trackerColumn_e
{
  TRACKER_INVALID = 0xFFFFFFFF,
  TRACKER_OFFENSIVE = 0x0,
  TRACKER_EMBLEM = 0x1,
  TRACKER_CHEATER = 0x2,
  TRACKER_BOOSTER = 0x3,
  TRACKER_FAILED_STATS_XUID_RECEIVER = 0x4,
  TRACKER_FAILED_STATS_XUID_GIVER = 0x5,
  TRACKER_FAILED_PRESCRUB = 0x6,
  TRACKER_NON_SUPER_USER_WADEFPS_USE = 0x7,
  TRACKER_FAILED_DB_AUTH = 0x8,
  TRACKER_SUPER_OFFENSIVE = 0x9,
  TRACKER_SUPER_OFFENSIVE_EMBLEM = 0xA,
  TRACKER_SUPER_CHEATER = 0xB,
  TRACKER_SUPER_BOOSTER = 0xC,
  TRACKER_USER_REPORT_COUNT = 0xD,
  TRACKER_POST_LB_SCRUBBER = 0xE,
  TRACKER_ZOMBIE_OFFENSIVE = 0xF,
  TRACKER_ZOMBIE_CHEATER = 0x10,
  TRACKER_ZOMBIE_USER_REPORT_COUNT = 0x11,
  TRACKER_INVALID_DVAR_CHANGED = 0x12,
  TRACKER_BOOSTING_LOBBY_CLIENT = 0x13,
  TRACKER_BOOSTING_LOBBY_SERVER = 0x14,
  TRACKER_SCRIPT_CHECKSUM_ERROR_CLIENT = 0x15,
  TRACKER_SCRIPT_CHECKSUM_ERROR_SERVER = 0x16,
  TRACKER_FAILED_PRESCRUB_ZOMBIES = 0x17,
  TRACKER_SCRIPT_CHECKSUM_ERROR_CLIENT_SP = 0x18,
  TRACKER_SCRIPT_CHECKSUM_ERROR_SERVER_SP = 0x19,
  TRACKER_BAD_GAMERTAG = 0x1A,
  TRACKER_STATS_RESET_VERSION_OLD = 0x1B,
  TRACKER_STATS_RESET_BASIC_OLD = 0x1C,
  TRACKER_STATS_RESET_DDL_OLD = 0x1D,
  TRACKER_STATS_RESTORE = 0x1E,
  TRACKER_HACKED_CLIENT = 0x1F,
  TRACKER_HACKED_SERVER = 0x20,
  TRACKER_HACKED_CLANTAG = 0x21,
  TRACKER_HACKED_PROFILE = 0x22,
  TRACKER_VIEW_FILESHARE = 0x23,
  TRACKER_VIEW_OWN_FILESHARE = 0x24,
  TRACKER_VIEW_MATCH = 0x25,
  TRACKER_VIEW_OWN_MATCH = 0x26,
  TRACKER_VIEW_COMMUNITY = 0x27,
  TRACKER_VIEW_COMBAT_RECORD = 0x28,
  TRACKER_CHEATLOG_GOD = 0x29,
  TRACKER_CHEATLOG_GOD_TS = 0x2A,
  TRACKER_CHEATLOG_DEMIGOD = 0x2B,
  TRACKER_CHEATLOG_DEMIGOD_TS = 0x2C,
  TRACKER_CHEATLOG_PROF_DECRYPT_FAIL = 0x2D,
  TRACKER_CHEATLOG_PROF_DECRYPT_FAIL_TS = 0x2E,
  TRACKER_CHEATLOG_SAVE_DECRYPT_FAIL = 0x2F,
  TRACKER_CHEATLOG_SAVE_DECRYPT_FAIL_TS = 0x30,
  TRACKER_EXEC_DISC_CFG = 0x31,
  TRACKER_EXEC_DISC_CFG_TS = 0x32,
  TRACKER_EXEC_UNKN_CFG = 0x33,
  TRACKER_EXEC_UNKN_CFG_TS = 0x34,
  TRACKER_FF_AUTH_FAIL = 0x35,
  TRACKER_FF_AUTH_FAIL_TS = 0x36,
  TRACKER_REPORTED_FILM_GAMETYPE = 0x37,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_CONNECT_NEW_HOST = 0x38,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_HOST = 0x39,
  TRACKER_LOBBY_MIGRATION_FAIL_TIMEOUT = 0x3A,
  TRACKER_LOBBY_MIGRATION_FAIL_TOO_FEW_AGREE = 0x3B,
  TRACKER_LOBBY_MIGRATION_FAIL_CANNOT_CHOOSE_HOST = 0x3C,
  TRACKER_LOBBY_MIGRATION_SUCCESS = 0x3D,
  TRACKER_DEMO_UPLOAD_FAILURE = 0x3E,
  TRACKER_THEATRE_PARTY_COUNT = 0x3F,
  TRACKER_IGS_DOWNLOAD_COUNT = 0x40,
  TRACKER_IGS_DOWNLOAD_MSPOINTS = 0x41,
  TRACKER_NAT_TRAV_FAILURE_STAGE1 = 0x42,
  TRACKER_NAT_TRAV_FAILURE_STAGE2 = 0x43,
  TRACKER_NAT_TRAV_FAILURE_STAGE3 = 0x44,
  TRACKER_NAT_TRAV_SUCCESS_STAGE1 = 0x45,
  TRACKER_NAT_TRAV_SUCCESS_STAGE2 = 0x46,
  TRACKER_NAT_TRAV_SUCCESS_STAGE3 = 0x47,
  TRACKER_GAME_MIGRATION_FAIL_NO_GOOD_HOST = 0x48,
  TRACKER_GAME_MIGRATION_FAIL_TOO_MANY_MIGRATIONS = 0x49,
  TRACKER_GAME_MIGRATION_FAIL_TOO_FEW_PLAYERS = 0x4A,
  TRACKER_GAME_MIGRATION_SUCCESS_ALL_RESPONDED = 0x4B,
  TRACKER_GAME_MIGRATION_SUCCESS_TIMEOUT = 0x4C,
  TRACKER_IGS_DOWNLOAD_USD = 0x4D,
  TRACKER_IGS_DOWNLOAD_POUNDS = 0x4E,
  TRACKER_IGS_DOWNLOAD_EURO = 0x4F,
  TRACKER_EMBLEM_INVALID = 0x50,
  TRACKER_PIRACY_FAILED_HASHES = 0x51,
  TRACKER_PIRACY_FAILED_READS = 0x52,
  TRACKER_LB_CACHE_READ_FAILURE = 0x53,
  TRACKER_LB_MAX_WRITES = 0x54,
  TRACKER_USED_UP_ALL_CONSOLE_STAT_SLOTS = 0x55,
  TRACKER_CANNOT_BECOME_HOST = 0x56,
  TRACKER_CANNOT_BECOME_HOST_REASON = 0x57,
  TRACKER_USER_ON_NEW_CONSOLE = 0x58,
  TRACKER_TIMEOUT_PUBLIC = 0x59,
  TRACKER_TIMEOUT_LEAGUES = 0x5A,
  TRACKER_STATS_CHECKSUM_OLD = 0x5B,
  TRACKER_STATS_DECOMPRESS_ERROR_OLD = 0x5C,
  TRACKER_STATS_RESET_VERSION = 0x5D,
  TRACKER_STATS_RESET_BASIC = 0x5E,
  TRACKER_STATS_RESET_DDL = 0x5F,
  TRACKER_STATS_CHECKSUM = 0x60,
  TRACKER_STATS_DECOMPRESS_ERROR = 0x61,
  TRACKER_FAILED_STATS_XUID_RECEIVER_NEW = 0x62,
  TRACKER_FAILED_STATS_XUID_GIVER_NEW = 0x63,
  TRACKER_FAILED_STATS_XUID_ZERO = 0x64,
  TRACKER_LAGGED_HOST_DAMAGE = 0x65,
  TRACKER_CLASS_SETS_USED = 0x66,
  TRACKER_LOWMIP_READ_ERRORS = 0x67,
  TRACKER_COUNT = 0x68,
};

/* 560 */
enum demoClipCommand
{
  DEMO_CLIP_CMD_SET_CLIENT = 0x0,
  DEMO_CLIP_CMD_SET_TIMESCALE = 0x1,
  DEMO_CLIP_CMD_SET_FOV = 0x2,
  DEMO_CLIP_CMD_SET_CAMERA_MODE = 0x3,
  DEMO_CLIP_CMD_SET_CAMERA_ORIGIN = 0x4,
  DEMO_CLIP_CMD_SET_CAMERA_ANGLES = 0x5,
  DEMO_CLIP_CMD_SET_CAMERA_TRANSFORM = 0x6,
  DEMO_CLIP_CMD_SET_CAMERA_OFFSET_ENTITY = 0x7,
  DEMO_CLIP_CMD_HIDE_GAME_HUD = 0x8,
  DEMO_CLIP_CMD_RESET_SNAPSHOT_DATA = 0x9,
  DEMO_CLIP_CMD_SET_PAUSED_STATE = 0xA,
  DEMO_CLIP_CMD_TRANSITION = 0xB,
  DEMO_CLIP_CMD_END_OF_FRAME = 0xC,
  DEMO_CLIP_CMD_SET_HIGHLIGHT_REEL_PRIORITY = 0xD,
};

/* 561 */
enum $EDD38D6A57EF43793B1F773859FC039A
{
  FS_SEEK_CUR = 0x0,
  FS_SEEK_END = 0x1,
  FS_SEEK_SET = 0x2,
};

/* 562 */
enum GamePadButton
{
  GPAD_NONE = 0x0,
  GPAD_UP = 0x10000001,
  GPAD_DOWN = 0x10000002,
  GPAD_LEFT = 0x10000004,
  GPAD_RIGHT = 0x10000008,
  GPAD_START = 0x10000010,
  GPAD_BACK = 0x10000020,
  GPAD_L3 = 0x10000040,
  GPAD_R3 = 0x10000080,
  GPAD_A = 0x10001000,
  GPAD_B = 0x10002000,
  GPAD_X = 0x10004000,
  GPAD_Y = 0x10008000,
  GPAD_L_SHLDR = 0x10000100,
  GPAD_R_SHLDR = 0x10000200,
  GPAD_L_TRIG = 0x20000000,
  GPAD_R_TRIG = 0x20000001,
};

/* 563 */
enum AntiBurnHudMenus
{
  HUD_MENU_HEALTH = 0x0,
  HUD_MENU_AMMO = 0x1,
  HUD_MENU_HEAT = 0x2,
  HUD_MENU_COMPASS = 0x3,
  HUD_MENU_STANCE = 0x4,
  HUD_MENU_OFFHAND = 0x5,
  HUD_MENU_OBJECTIVES = 0x6,
  HUD_MENU_SPRINT = 0x7,
  HUD_MENU_VEHICLE = 0x8,
};

/* 564 */
enum $97CECC7405D33C626C5F95F71EB2E9C7
{
  PARTYSTATUS_EMPTY = 0x0,
  PARTYSTATUS_ZOMBIE = 0x1,
  PARTYSTATUS_ANONYMOUS = 0x2,
  PARTYSTATUS_PRESENT = 0x3,
  PARTYSTATUS_TESTCLIENT = 0x4,
  PARTYSTATUS_COUNT = 0x5,
};

/* 565 */
enum filesharePrimaryTags_e
{
  FILESHARE_PRITAG_GAMETYPE = 0x1,
  FILESHARE_PRITAG_MAP = 0x2,
  FILESHARE_PRITAG_CATEGORY = 0x3,
  FILESHARE_PRITAG_WINNERS = 0x4,
  FILESHARE_PRITAG_PLAYLIST_TYPE = 0x5,
  FILESHARE_PRITAG_PLAYLIST_ID = 0x6,
  FILESHARE_PRITAG_XUIDS = 0x7,
  FILESHARE_PRITAG_LOSERS = 0x8,
  FILESHARE_PRITAG_DROPOUTS = 0x9,
  FILESHARE_PRITAG_LEAGUE_SUBDIV_ID = 0xA,
  FILESHARE_PRITAG_LEAGUE_TEAM_ID = 0xB,
  FILESHARE_PRITAG_FINGERPRINT = 0xC,
  FILESHARE_PRITAG_MPZM = 0xD,
  FILESHARE_PRITAG_EMBLEM_FINGERPRINT = 0xE,
  FILESHARE_PRITAG_AUTHORXUID = 0xF,
  FILESHARE_PRITAG_ANTICHEAT = 0x10,
  FILESHARE_PRITAG_UPLOADTRACKER_BEGINTIMESTAMP = 0x11,
  FILESHARE_PRITAG_UPLOADTRACKER_COUNTER = 0x12,
  FILESHARE_PRITAG_MATCHID = 0x13,
  FILESHARE_PRITAG_COUNT = 0x14,
};

/* 566 */
enum fileshareMPZMPTag_e
{
  FILESHARE_MPZM_TAG_MP = 0x0,
  FILESHARE_MPZM_TAG_ZM = 0x1,
};

/* 567 */
enum fileShareLocation
{
  FILESHARE_LOCATION_INVALID = 0x0,
  FILESHARE_LOCATION_PUBLISHERSTORAGE = 0x1,
  FILESHARE_LOCATION_USERSTORAGE = 0x2,
  FILESHARE_LOCATION_POOLEDSTORAGE = 0x3,
};

/* 568 */
enum filesharePlaylistType_e
{
  FILESHARE_PLAYLIST_TYPE_PUBLIC = 0x0,
  FILESHARE_PLAYLIST_TYPE_CUSTOM = 0x1,
  FILESHARE_PLAYLIST_TYPE_LEAGUE = 0x2,
};

/* 569 */
enum demoStreamingState
{
  STREAMING_STATE_GAMESTATE = 0x0,
  STREAMING_STATE_SEGMENTS = 0x1,
  STREAMING_STATE_TRANSITION = 0x2,
  STREAMING_STATE_ENDOFCLIP = 0x3,
  STREAMING_STATE_INFO = 0x4,
  STREAMING_STATE_DONE = 0x5,
};

/* 570 */
enum downloadStreamingState
{
  DOWNLOAD_STREAMING_STATE_NONE = 0x0,
  DOWNLOAD_STREAMING_STATE_FULL_FILE = 0x1,
  DOWNLOAD_STREAMING_STATE_HEADER_BLOCK = 0x2,
  DOWNLOAD_STREAMING_STATE_FOOTER_BLOCK = 0x3,
  DOWNLOAD_STREAMING_STATE_DATA_BLOCK = 0x4,
  DOWNLOAD_STREAMING_STATE_FINISHED = 0x5,
  DOWNLOAD_STREAMING_STATE_FAILED = 0x6,
};

/* 571 */
enum printParm_t
{
  PRINT_ALL = 0x0,
  PRINT_DEVELOPER = 0x1,
  PRINT_WARNING = 0x2,
  PRINT_ERROR = 0x3,
};

/* 572 */
enum $4DCA217D68A98BAADCC9E71679709D8C
{
  KEYBOARD_TYPE_NONE = 0x0,
  KEYBOARD_TYPE_DEMO = 0x1,
  KEYBOARD_TYPE_EMAIL = 0x2,
  KEYBOARD_TYPE_CUSTOM_CLASS = 0x3,
  KEYBOARD_TYPE_LEAGUES = 0x4,
  KEYBOARD_TYPE_TWITCH_USER = 0x5,
  KEYBOARD_TYPE_TWITCH_PASS = 0x6,
  KEYBOARD_TYPE_TEXT_MESSAGE = 0x7,
  KEYBOARD_TYPE_ADD_FRIEND = 0x8,
  KEYBOARD_TYPE_REGISTRATION_INPUT_PASSWORD = 0x9,
  KEYBOARD_TYPE_REGISTRATION_INPUT_ACCENTS = 0xA,
  KEYBOARD_TYPE_REGISTRATION_INPUT_NUMERIC = 0xB,
  KEYBOARD_TYPE_REGISTRATION_INPUT_ACCOUNTNAME = 0xC,
  KEYBOARD_TYPE_NUMERIC_FIELD = 0xD,
  KEYBOARD_TYPE_CLAN_TAG = 0xE,
  KEYBOARD_TYPE_TWITTER_USER = 0xF,
  KEYBOARD_TYPE_TWITTER_PASS = 0x10,
  KEYBOARD_TYPE_CLASS_SET = 0x11,
  KEYBOARD_TYPE_COUNT = 0x12,
};

/* 573 */
enum FxBeamType
{
  BEAMTYPE_TRACER = 0x0,
  BEAMTYPE_SMOKE_TRACER = 0x1,
  BEAMTYPE_LASER = 0x2,
  BEAMTYPE_FLAME = 0x3,
  BEAMTYPE_DEMOLINE = 0x4,
  BEAMTYPE_ARC = 0x5,
  BEAMTYPE_COUNT = 0x6,
};

/* 574 */
enum demoDollyCamInformationType
{
  DEMO_DOLLYCAM_INFORMATION_FX = 0x0,
  DEMO_DOLLYCAM_INFORMATION_TEXT = 0x1,
};

/* 575 */
enum demoDollyCamFX
{
  DEMO_DOLLYCAM_FX_HEAD_NOCOLOR = 0x0,
  DEMO_DOLLYCAM_FX_HEAD_SELECT = 0x1,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_GREEN = 0x2,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_RED = 0x3,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_WHITE = 0x4,
  DEMO_DOLLYCAM_FX_HEAD_GLOW_YELLOW = 0x5,
  DEMO_DOLLYCAM_FX_COUNT = 0x6,
};

/* 576 */
enum $27A636E33FFB5B334000E39386731410
{
  TS_TURRET_SENTRY = 0x1,
  TS_TURRET_TOW = 0x2,
  TS_TURRET_FIRING = 0x4,
  TS_TURRET_IS_CARRIED = 0x8,
  TS_TURRET_OVERHEATING = 0x10,
  TS_TURRET_INITIALIZING = 0x20,
  TS_TURRET_ROTATING = 0x40,
  TS_TURRET_MICROWAVE = 0x80,
  TS_TURRET_WALLMOUNT = 0x80,
};

/* 577 */
enum turret_handler
{
  TURRET_HANDLER_CLIENT = 0x0,
  TURRET_HANDLER_SERVER = 0x1,
  TURRET_HANDLER_COUNT = 0x2,
};

/* 578 */
enum $6C569D3744F00ECAAA7F2874402B081E
{
  DPVS_BATCH_NONE = 0x0,
  DPVS_BATCH_STATIC = 0x1,
  DPVS_BATCH_DYNAMIC = 0x2,
  DPVS_BATCH_ALL = 0x3,
};

/* 579 */
enum $EFC12203927BEB71EAB8A02F942FE82B
{
  DPVS_DYNAMIC_BATCH_SIZE = 0x6,
};

/* 580 */
enum GlassShard::RemoveReason
{
  REMOVE_HIT_BOTTOM = 0x0,
  REMOVE_OUT_OF_SHARDS = 0x1,
  REMOVE_OUT_OF_GROUPS = 0x2,
  REMOVE_OUT_OF_VERTEX_MEMORY = 0x3,
  REMOVE_OUT_OF_SHARD_MEMORY = 0x4,
  REMOVE_OUT_OF_PHYSICS = 0x5,
  REMOVE_ROLLBACK_TIME = 0x6,
  REMOVE_INIT = 0x7,
  NUM_REMOVE_REASONS = 0x8,
  REMOVE_DONT_TRACK = 0x9,
};

/* 581 */
enum $D9ABE493ACF1F4D630FF9446790065D1
{
  FRAC_BITS = 0x7,
};

/* 582 */
enum $6590336166C3205C76424EF38CA2A1CE
{
  MAX_SHARDS = 0x20,
};

/* 583 */
enum $1FCF36EAD00CA54AD2F6073AFF3DDCFD
{
  OVERHEAD = 0x10,
  MIN_SIZE = 0x20,
};

/* 584 */
enum GlassState::State
{
  PRISTINE = 0x0,
  CRACKED = 0x1,
  SHATTERED = 0x2,
  INVALID = 0x3,
};

/* 585 */
enum $E3324E33E82FFC8C58B9D6D882692506
{
  MIN_OUTLINE_VERTS = 0x3,
  MAX_OUTLINE_VERTS = 0x10,
};

/* 586 */
enum GlassOutline::SplitFailReason
{
  SPLIT_FAIL_START_POS = 0x0,
  SPLIT_FAIL_START_DIR = 0x1,
  SPLIT_FAIL_INIT = 0x2,
  SPLIT_FAIL_VERTS = 0x3,
  SPLIT_FAIL_AREA = 0x4,
  SPLIT_FAIL_MEMORY = 0x5,
  SPLIT_FAIL_ANGLE = 0x6,
  SPLIT_FAIL_NARROW = 0x7,
  NUM_SPLIT_FAIL_REASONS = 0x8,
};

/* 587 */
enum $944717659723528F571DECA14806F3D2
{
  MAX_GROUPS = 0x10,
};

/* 588 */
typedef WeaponDobjInfo::Slot $16C569F95E4341FA9ED77D88E0AE30A9;

/* 589 */
enum $B9BB0DD1DF0F2223E24F468C44686C39
{
  MAX_GLASSES = 0x3E8,
};

/* 590 */
enum $860984AE526833AB3F2FDC74356D6122
{
  PHYS_OBJ_ID_NULL = 0x0,
  PHYS_OBJ_ID_DEAD = 0xFFFFFFFF,
};

/* 591 */
enum XModelLodRampType
{
  XMODEL_LOD_RAMP_RIGID = 0x0,
  XMODEL_LOD_RAMP_SKINNED = 0x1,
  XMODEL_LOD_RAMP_COUNT = 0x2,
};

/* 592 */
enum LumpType
{
  LUMP_MATERIALS = 0x0,
  LUMP_LIGHTBYTES_COMPRESSED = 0x1,
  LUMP_LIGHTGRIDENTRIES = 0x2,
  LUMP_LIGHTGRIDCOLORS = 0x3,
  LUMP_PLANES = 0x4,
  LUMP_BRUSHSIDES = 0x5,
  LUMP_BRUSHSIDEEDGECOUNTS = 0x6,
  LUMP_BRUSHEDGES = 0x7,
  LUMP_BRUSHES = 0x8,
  LUMP_TRIANGLES = 0x9,
  LUMP_DRAWVERTS = 0xA,
  LUMP_DRAWINDICES = 0xB,
  LUMP_CULLGROUPS = 0xC,
  LUMP_CULLGROUPINDICES = 0xD,
  LUMP_LIGHTBYTES_UNCOMPRESSED = 0xE,
  LUMP_OBSOLETE_2 = 0xF,
  LUMP_OBSOLETE_3 = 0x10,
  LUMP_OBSOLETE_4 = 0x11,
  LUMP_OBSOLETE_5 = 0x12,
  LUMP_PORTALVERTS = 0x13,
  LUMP_OBSOLETE_6 = 0x14,
  LUMP_UINDS = 0x15,
  LUMP_BRUSHVERTSCOUNTS = 0x16,
  LUMP_BRUSHVERTS = 0x17,
  LUMP_AABBTREES = 0x18,
  LUMP_CELLS = 0x19,
  LUMP_PORTALS = 0x1A,
  LUMP_NODES = 0x1B,
  LUMP_LEAFS = 0x1C,
  LUMP_LEAFBRUSHES = 0x1D,
  LUMP_LEAFSURFACES = 0x1E,
  LUMP_COLLISIONVERTS = 0x1F,
  LUMP_COLLISIONTRIS = 0x20,
  LUMP_COLLISIONEDGEWALKABLE = 0x21,
  LUMP_COLLISIONBORDERS = 0x22,
  LUMP_COLLISIONPARTITIONS = 0x23,
  LUMP_COLLISIONAABBS = 0x24,
  LUMP_MODELS = 0x25,
  LUMP_VISIBILITY = 0x26,
  LUMP_ENTITIES = 0x27,
  LUMP_PATHCONNECTIONS = 0x28,
  LUMP_REFLECTION_PROBES = 0x29,
  LUMP_VERTEX_LAYER_DATA = 0x2A,
  LUMP_PRIMARY_LIGHTS = 0x2B,
  LUMP_LIGHTGRIDHEADER = 0x2C,
  LUMP_LIGHTGRIDROWS = 0x2D,
  LUMP_OBSOLETE_10 = 0x2E,
  LUMP_OBSOLETE_11 = 0x2F,
  LUMP_OBSOLETE_12 = 0x30,
  LUMP_OBSOLETE_13 = 0x31,
  LUMP_OBSOLETE_14 = 0x32,
  LUMP_OBSOLETE_15 = 0x33,
  LUMP_UNUSED1 = 0x34,
  LUMP_UNUSED2 = 0x35,
  LUMP_UNUSED3 = 0x36,
  LUMP_UNUSED4 = 0x37,
  LUMP_UNUSED5 = 0x38,
  LUMP_UNUSED6 = 0x39,
  LUMP_SIMPLELIGHTMAPBYTES = 0x3A,
  LUMP_UNUSED7 = 0x3B,
  LUMP_UNUSED8 = 0x3C,
  LUMP_UNUSED9 = 0x3D,
  LUMP_LIGHTREGIONS = 0x3E,
  LUMP_LIGHTREGION_HULLS = 0x3F,
  LUMP_LIGHTREGION_AXES = 0x40,
  LUMP_UNUSED10 = 0x41,
  LUMP_LIGHTGRID2D_LIGHTS = 0x42,
  LUMP_LIGHTGRID2D_INDICES = 0x43,
  LUMP_LIGHTGRID2D_POINTS = 0x44,
  LUMP_LIGHTGRID2D_CELLS = 0x45,
  LUMP_LIGHT_CORONAS = 0x46,
  LUMP_SHADOWMAP_VOLUMES = 0x47,
  LUMP_SHADOWMAP_VOLUME_PLANES = 0x48,
  LUMP_EXPOSURE_VOLUMES = 0x49,
  LUMP_EXPOSURE_VOLUME_PLANES = 0x4A,
  LUMP_WORLDFOG_VOLUMES = 0x4B,
  LUMP_WORLDFOG_VOLUME_PLANES = 0x4C,
  LUMP_VISION_VOLUMES = 0x4D,
  LUMP_VISION_VOLUME_PLANES = 0x4E,
  LUMP_OCCLUDERS = 0x4F,
  LUMP_OUTDOORBOUNDS = 0x50,
  LUMP_HERO_ONLY_LIGHTS = 0x51,
  LUMP_STATIC_MODEL_DATA = 0x52,
  LUMP_SKY_GRID_VOLUMES = 0x53,
  LUMP_LIGHTING_INFO = 0x54,
  LUMP_SMODEL_LIGHTMAP_VCOLORS = 0x55,
  LUMP_SMODEL_LIGHTMAP_VC_INSTS = 0x56,
  LUMP_SIEGE_SKIN_MODEL_INSTS = 0x57,
  LUMP_LIGHTGRIDCOEFFS = 0x58,
  LUMP_LUT_VOLUMES = 0x59,
  LUMP_LUT_VOLUME_PLANES = 0x5A,
  LUMP_WORLDFOG_MODIFIER_VOLUMES = 0x5B,
  LUMP_WORLDFOG_MODIFIER_VOLUME_PLANES = 0x5C,
  LUMP_COUNT = 0x5D,
};

/* 593 */
enum GFX_SURFACE_FLAGS
{
  GFX_SURFACE_CASTS_SUN_SHADOW = 0x1,
  GFX_SURFACE_HAS_PRIMARY_LIGHT_CONFLICT = 0x2,
  GFX_SURFACE_IS_SKY = 0x4,
  GFX_SURFACE_NO_DRAW = 0x8,
  GFX_SURFACE_CASTS_SHADOW = 0x10,
  GFX_SURFACE_QUANTIZED = 0x20,
  GFX_SURFACE_NO_COLOR = 0x40,
};

/* 594 */
enum $6ECA3333CAC1FE160D67FB682515BFE1
{
  LOCAL_VAR_STACK_SIZE = 0x40,
};

/* 595 */
enum $E2769CD71BD3F06007FE83C4AAFE9C31
{
  MAX_VM_STACK_DEPTH = 0x20,
  MAX_VM_OPERAND_STACK = 0x800,
};

/* 596 */
enum XONLINE_NAT_TYPE
{
  XONLINE_NAT_OPEN = 0x1,
  XONLINE_NAT_MODERATE = 0x2,
  XONLINE_NAT_STRICT = 0x3,
};

/* 597 */
enum bdBandwidthTestType
{
  BD_UPLOAD_TEST = 0x0,
  BD_UPLOAD_DOWNLOAD_TEST = 0x1,
};

/* 598 */
enum bdBandwidthTestStatus
{
  BD_BANDWIDTH_TEST_IDLE = 0x0,
  BD_BANDWIDTH_TEST_REQUESTING_TEST = 0x1,
  BD_BANDWIDTH_TEST_UPLOAD_WAITING = 0x2,
  BD_BANDWIDTH_TEST_UPLOAD_SENDING = 0x3,
  BD_BANDWIDTH_TEST_DOWNLOAD_WAITING = 0x4,
  BD_BANDWIDTH_TEST_DOWNLOAD_RECEIVING = 0x5,
  BD_BANDWIDTH_TEST_FINALIZING = 0x6,
  BD_BANDWIDTH_TEST_DONE = 0x7,
};

/* 599 */
enum bdBandwidthTestInitStatus
{
  BD_BANDWIDTH_TEST_UNINITIALIZED = 0x0,
  BD_BANDWIDTH_TEST_INITIALIZED = 0x1,
};

/* 600 */
enum winConnectionState_e
{
  WIN_STATUS_ERROR = 0x0,
  WIN_STATUS_NOT_CONNECTED = 0x1,
  WIN_STATUS_DNS_RESOLVING = 0x2,
  WIN_STATUS_DNS_RESOLVED = 0x3,
  WIN_STATUS_STEAM_OFFLINE = 0x4,
  WIN_STATUS_GETTING_TICKET = 0x5,
  WIN_STATUS_GOT_TICKET = 0x6,
  WIN_STATUS_TICKET_ERROR = 0x7,
  WIN_STATUS_AUTHORIZING = 0x8,
  WIN_STATUS_CONNECTING = 0x9,
  WIN_STATUS_CONNECTED = 0xA,
  WIN_STATUS_IN_BACKOFF = 0xB,
  WIN_STATUS_DISABLE_CONNECT = 0xC,
};

/* 601 */
enum DWNetStatus
{
  DW_NET_ERROR_START_FAILED = 0x0,
  DW_NET_ERROR_NO_LOCAL_IP = 0x1,
  DW_NET_NOT_STARTED = 0x2,
  DW_NET_STARTING_LAN = 0x3,
  DW_NET_STARTED_LAN = 0x4,
  DW_NET_STARTING_ONLINE = 0x5,
  DW_NET_STARTED_ONLINE = 0x6,
  DW_NET_LINK_RESET = 0x7,
};

/* 602 */
enum e_JoinRejectionReason
{
  REASON_NONE = 0x0,
  REASON_PARTY_PRIVACY_CLOSED = 0x1,
  REASON_PARTY_PRIVACY_INVITE_ONLY = 0x2,
  REASON_PARTY_PRIVACY_FRIEND_ONLY = 0x3,
  REASON_SYSTEMLINK_LOBBY = 0x4,
};

/* 603 */
enum IMType
{
  JOIN_REQUEST = 0x0,
  JOIN_REPLY = 0x1,
  INVITE = 0x2,
  UPDATE_INVITE_INFO = 0x3,
  NUM_INSTANT_MESSAGE_TYPES = 0x4,
};

/* 604 */
enum uiSessionsLines_e
{
  UI_SESSIONS_LINE_FIRST = 0x0,
  UI_SESSIONS_LINE_1 = 0x0,
  UI_SESSIONS_LINE_2 = 0x1,
  UI_SESSIONS_LINE_3 = 0x2,
  UI_SESSIONS_NUM_LINES = 0x3,
};

/* 605 */
enum $C305A63DCF338D4393117302FF04A463
{
  PARTYPRIVACY_OPEN = 0x0,
  PARTYPRIVACY_FRIENDS_ONLY = 0x1,
  PARTYPRIVACY_INVITE_ONLY = 0x2,
  PARTYPRIVACY_CLOSED = 0x3,
};

/* 606 */
enum EUserTier
{
  USER_TIER_NONE = 0x0,
  USER_TIER_SUPER = 0x1,
  USER_TIER_DEVELOPER = 0x2,
  USER_TIER_FRIEND = 0x3,
  USER_TIER_DEDICATED = 0x4,
  USER_TIER_ENEMY = 0x29A,
};

/* 607 */
enum $4CFA67909B33A3D7D46BB47951105B67
{
  HOST_SERVER_OK = 0x0,
  HOST_SERVER_BANDWIDTH_TEST_IN_PROGRESS = 0x1,
  HOST_SERVER_NOT_HOST_OF_PARTY = 0x2,
  HOST_SERVER_DEDICATED_ONLY = 0x3,
  HOST_SERVER_NAT_TYPE_NOT_ALLOWED = 0x4,
  HOST_SERVER_WE_SHOULD_NOT_HOST = 0x5,
  HOST_SERVER_IS_NOT_GOOD_CITIZEN = 0x6,
  HOST_SERVER_HAS_NOT_NECESSARY_BANDWIDTH = 0x7,
  HOST_SERVER_NET_ENGINE_NOT_STARTED = 0x8,
  HOST_SERVER_LIVE_STREAMING = 0x9,
  HOST_SERVER_BANNED_FROM_HOSTING = 0xA,
};

/* 608 */
enum _XUSER_SIGNIN_STATE
{
  eXUserSigninState_NotSignedIn = 0x0,
  eXUserSigninState_SignedInLocally = 0x1,
  eXUserSigninState_SignedInToLive = 0x2,
};

/* 609 */
enum bdNotificationType
{
  BD_FRIENDSHIP_REJECTED = 0x1,
  BD_FRIENDSHIP_ACCEPTED = 0x2,
  BD_FRIENDSHIP_REVOKED = 0x3,
  BD_TEAMNAME_UPDATED = 0x4,
  BD_TEAMMEMBER_PROMOTED_TO_ADMIN = 0x5,
  BD_TEAMMEMBER_PROMOTED_TO_OWNER = 0x6,
  BD_TEAMMEMBER_DEMOTED_TO_ORDINARY = 0x7,
  BD_TEAMMEMBER_KICKED = 0x8,
  BD_TEAM_DISSOLVED = 0x9,
  BD_TEAMMEMBER_LEFT = 0xA,
  BD_TEAMMEMBER_INVITE_REJECTED = 0xB,
  BD_TEAMMEMBER_INVITE_ACCEPTED = 0xC,
};

/* 610 */
enum bdMessaging::bdBlockLevel
{
  BD_NOT_BLOCKED = 0x0,
  BD_BLOCKED = 0x1,
};

/* 611 */
enum eVoiceMuteReason
{
  MUTE_REASON_NOT_MUTED = 0x0,
  MUTE_REASON_MUTED_BY_LIVE = 0x1,
  MUTE_REASON_TALK_TO_NOBODY = 0x2,
  MUTE_REASON_TALK_TO_FRIENDS_0NLY = 0x3,
  MUTE_REASON_MUTED_IN_GAME = 0x4,
};

/* 612 */
enum bdTwitterFieldCode
{
  BD_TWITTER_NONE = 0x0,
  BD_TWITTER_SCREENNAME = 0x2,
  BD_TWITTER_NAME = 0x4,
  BD_TWITTER_DESCRIPTION = 0x8,
  BD_TWITTER_URL = 0x10,
  BD_TWITTER_LOCATION = 0x20,
  BD_TWITTER_STATUSTEXT = 0x40,
  BD_TWITTER_MAX_FIELD_CODE = 0x41,
};

/* 613 */
enum twitterStatus_e
{
  TW_ACCOUNT_NOT_CHECKED = 0x0,
  TW_ACCOUNT_CHECKING = 0x1,
  TW_ACCOUNT_CHECKED = 0x2,
  TW_ACCOUNT_CHECK_FAILED = 0x3,
};

/* 614 */
enum trackerFileCol_e
{
  TRACKER_CSV_COLNUM = 0x0,
  TRACKER_CSV_COLNAME = 0x1,
  TRACKER_CSV_COLTYPE = 0x2,
};

/* 615 */
enum trackerColType_e
{
  TRACKER_COLTYPE_AUTOTIMESTAMP = 0x0,
  TRACKER_COLTYPE_REPLACE = 0x1,
  TRACKER_COLTYPE_ADD = 0x2,
  TRACKER_COLTYPE_MAX = 0x3,
  TRACKER_COLTYPE_END = 0x3,
  TRACKER_COLTYPE_INVALID = 0xFFFFFFFF,
};

/* 616 */
enum taskCompleteResults
{
  TASK_NOTCOMPLETE = 0x0,
  TASK_COMPLETE = 0x1,
  TASK_ERROR = 0x2,
};

/* 617 */
enum $31D2C4EF0A86149A988EEC1F9F75C622
{
  PK_PUBLIC = 0x0,
  PK_PRIVATE = 0x1,
};

/* 618 */
enum $CB44196A807FEEF24F979602B2F0772A
{
  DB_ZONE_PRE_GFX = 0x1,
  DB_ZONE_PATCH = 0x2,
  DB_ZONE_PATCH_LOC = 0x4,
  DB_ZONE_CODE = 0x8,
  DB_ZONE_CODE_LOC = 0x10,
  DB_ZONE_CODE_RES = 0x20,
  DB_ZONE_DEV = 0x40,
  DB_ZONE_COMMON = 0x80,
  DB_ZONE_COMMON_PATCH = 0x100,
  DB_ZONE_COMMON_LOC = 0x200,
  DB_ZONE_LOAD = 0x400,
  DB_ZONE_SHARED_PATCH = 0x800,
  DB_ZONE_SHARED = 0x1000,
  DB_ZONE_SHARED_LOC = 0x2000,
  DB_ZONE_LEVEL_PATCH = 0x4000,
  DB_ZONE_LEVEL = 0x8000,
  DB_ZONE_LEVEL_LOC = 0x10000,
  DB_ZONE_LEVELOVERLAY_PATCH = 0x20000,
  DB_ZONE_LEVELOVERLAY = 0x40000,
  DB_ZONE_LEVELOVERLAY_LOC = 0x80000,
  DB_ZONE_WEAPONS = 0x100000,
  DB_ZONE_GUMP = 0x200000,
  DB_ZONE_LOW_MARKER = 0x400000,
  DB_ZONE_MYCHANGES = 0x1000000,
  DB_ZONE_FRONTEND = 0x2000000,
  DB_ZONE_FRONTEND_LOC = 0x4000000,
  DB_ZONE_PATCH_UI = 0x8000000,
  DB_ZONE_PATCH_UI_LOC = 0x10000000,
  DB_ZONE_FFOTD = 0x20000000,
  DB_ZONE_HIGH_MARKER = 0x40000000,
  DB_FLAG_STRICTFREE = 0x80000000,
};

/* 619 */
enum $25F4F0A0F9048C1F14536C947634A558
{
  XFILE_BLOCK_TEMP = 0x0,
  XFILE_BLOCK_RUNTIME_VIRTUAL = 0x1,
  XFILE_BLOCK_RUNTIME_PHYSICAL = 0x2,
  XFILE_BLOCK_DELAY_VIRTUAL = 0x3,
  XFILE_BLOCK_DELAY_PHYSICAL = 0x4,
  XFILE_BLOCK_VIRTUAL = 0x5,
  XFILE_BLOCK_PHYSICAL = 0x6,
  XFILE_BLOCK_STREAMER_RESERVE = 0x7,
  MAX_XFILE_COUNT = 0x8,
};

/* 620 */
enum statsResetReason_t
{
  STATSRESET_FILE_NOT_FOUND = 0x0,
  STATSRESET_CFG_VERSION_MISMATCH = 0x1,
  STATSRESET_DDL_CONVERSION_FAILED = 0x2,
  STATSRESET_EXEC_RESET_COMMAND = 0x3,
  STATSRESET_CHEATER_DETECTED = 0x4,
  STATSRESET_NEW_OFFLINE_USER = 0x5,
  STATSRESET_PRESTIGE_RESETALL = 0x6,
};

/* 621 */
enum $D007F252CE3CA6F806108CF05CF004B2
{
  GEOGRAPHICAL_REGION_NONE = 0x0,
  GEOGRAPHICAL_REGION_AUNZ = 0x1,
  GEOGRAPHICAL_REGION_ASIAN = 0x2,
  GEOGRAPHICAL_REGION_EUROPEAN = 0x3,
  GEOGRAPHICAL_REGION_NORTH_AMERICAN = 0x4,
  GEOGRAPHICAL_REGION_SOUTH_AMERICAN = 0x5,
};

/* 622 */
enum $A6090063515E5A08DA5C7E5BA72FB72C
{
  STATSBACKUP_NOREADWRITE = 0xFFFFFFFF,
  STATSBACKUP_READ_NOWRITE = 0x0,
};

/* 623 */
enum gamertagsTableColumns_t
{
  MP_GAMERTAGS_NAME = 0x0,
  MP_GAMERTAGS_TIER = 0x1,
  MP_GAMERTAGS_PLATFORM = 0x2,
  MP_GAMERTAGS_ID = 0x2,
  MP_GAMERTAGS_COUNT = 0x3,
};

/* 624 */
enum dwKeyArchiveCategories
{
  KEYARCHIVE_CATEGORY_NORMAL = 0x0,
  KEYARCHIVE_CATEGORY_TEAM = 0x1,
  KEYARCHIVE_CATEGORY_USER = 0x2,
  KEYARCHIVE_CATEGORY_LEAGUE = 0x3,
};

/* 625 */
enum uJson::Type
{
  String = 0x0,
  Nil = 0x1,
  Array = 0x2,
  Object = 0x3,
  End = 0x4,
};

/* 626 */
enum $FD360262F56B111CF7764CDEECCB2FA3
{
  k_cchStatNameMax = 0x80,
};

/* 627 */
enum $CE95BDF041289D58359A37E5F909D21B
{
  k_iSteamUserCallbacks = 0x64,
};

/* 628 */
enum $DF5067DC206604506EE823E9F6F3C040
{
  k_iSteamGameServerCallbacks = 0xC8,
};

/* 629 */
enum $7AE7D11A4A92908A95AD49D3D0A8B27B
{
  k_iSteamFriendsCallbacks = 0x12C,
};

/* 630 */
enum $5ACCA345198C743CBC537F8392B8D869
{
  k_iSteamMatchmakingCallbacks = 0x1F4,
};

/* 631 */
enum $68FBBB15FF2671A68E39B7920FBA40AF
{
  k_iSteamUtilsCallbacks = 0x2BC,
};

/* 632 */
enum $4D2F29AE67BC93B6AFDDDD4341956CF8
{
  k_iSteamAppsCallbacks = 0x3E8,
};

/* 633 */
enum $0E058EB220585A5F6AD0DD6CE8C49935
{
  k_iSteamUserStatsCallbacks = 0x44C,
};

/* 634 */
enum $FE0347FCF3B1460A2BEF2E7C3F0F7C2C
{
  k_iSteamNetworkingCallbacks = 0x4B0,
};

/* 635 */
enum $0264E91DBF7A2BBEC6E806BF204CFA1B
{
  k_iClientRemoteStorageCallbacks = 0x514,
};

/* 636 */
enum $76C92CD1779C0D7DB4273213BF1D65FA
{
  k_iSteamGameServerStatsCallbacks = 0x708,
};

/* 637 */
enum $8DF2C37A6FDD097329D0E936CB6AF929
{
  k_iClientHTTPCallbacks = 0x834,
};

/* 638 */
enum $AAC6F232B1BF6A25AA1F35F902015810
{
  k_iSteamScreenshotsCallbacks = 0x8FC,
};

/* 639 */
enum EServerMode
{
  eServerModeInvalid = 0x0,
  eServerModeNoAuthentication = 0x1,
  eServerModeAuthentication = 0x2,
  eServerModeAuthenticationAndSecure = 0x3,
};

/* 640 */
enum LiveAuthFlags_t
{
  AUTH_BLOB_REQUESTED = 0x1,
  AUTH_BLOB_RECEIVED = 0x2,
  AUTH_BLOB_SENT_TO_STEAM = 0x4,
  AUTH_APPROVE = 0x8,
  AUTH_DENY = 0x10,
};

/* 641 */
enum SteamServerState
{
  STEAM_SERVER_INIT_FAILED = 0x0,
  STEAM_SERVER_DISCONNECTED = 0x1,
  STEAM_SERVER_CONNECTING = 0x2,
  STEAM_SERVER_CONNECTED = 0x3,
  STEAM_SERVER_SECURED = 0x4,
};

/* 642 */
enum $483B864C2E2FBC8159CA33326516C8CA
{
  k_cchMaxRichPresenceValueLength = 0x100,
};

/* 643 */
enum EDenyReason
{
  k_EDenyInvalid = 0x0,
  k_EDenyInvalidVersion = 0x1,
  k_EDenyGeneric = 0x2,
  k_EDenyNotLoggedOn = 0x3,
  k_EDenyNoLicense = 0x4,
  k_EDenyCheater = 0x5,
  k_EDenyLoggedInElseWhere = 0x6,
  k_EDenyUnknownText = 0x7,
  k_EDenyIncompatibleAnticheat = 0x8,
  k_EDenyMemoryCorruption = 0x9,
  k_EDenyIncompatibleSoftware = 0xA,
  k_EDenySteamConnectionLost = 0xB,
  k_EDenySteamConnectionError = 0xC,
  k_EDenySteamResponseTimedOut = 0xD,
  k_EDenySteamValidationStalled = 0xE,
  k_EDenySteamOwnerLeftGuestUser = 0xF,
};

/* 644 */
enum EUserHasLicenseForAppResult
{
  k_EUserHasLicenseResultHasLicense = 0x0,
  k_EUserHasLicenseResultDoesNotHaveLicense = 0x1,
  k_EUserHasLicenseResultNoAuth = 0x2,
};

/* 645 */
enum EUniverse
{
  k_EUniverseInvalid = 0x0,
  k_EUniversePublic = 0x1,
  k_EUniverseBeta = 0x2,
  k_EUniverseInternal = 0x3,
  k_EUniverseDev = 0x4,
  k_EUniverseMax = 0x5,
};

/* 646 */
enum EAccountType
{
  k_EAccountTypeInvalid = 0x0,
  k_EAccountTypeIndividual = 0x1,
  k_EAccountTypeMultiseat = 0x2,
  k_EAccountTypeGameServer = 0x3,
  k_EAccountTypeAnonGameServer = 0x4,
  k_EAccountTypePending = 0x5,
  k_EAccountTypeContentServer = 0x6,
  k_EAccountTypeClan = 0x7,
  k_EAccountTypeChat = 0x8,
  k_EAccountTypeConsoleUser = 0x9,
  k_EAccountTypeAnonUser = 0xA,
  k_EAccountTypeMax = 0xB,
};

/* 647 */
enum EChatSteamIDInstanceFlags
{
  k_EChatAccountInstanceMask = 0xFFF,
  k_EChatInstanceFlagClan = 0x80000,
  k_EChatInstanceFlagLobby = 0x40000,
  k_EChatInstanceFlagMMSLobby = 0x20000,
};

/* 648 */
enum EBeginAuthSessionResult
{
  k_EBeginAuthSessionResultOK = 0x0,
  k_EBeginAuthSessionResultInvalidTicket = 0x1,
  k_EBeginAuthSessionResultDuplicateRequest = 0x2,
  k_EBeginAuthSessionResultInvalidVersion = 0x3,
  k_EBeginAuthSessionResultGameMismatch = 0x4,
  k_EBeginAuthSessionResultExpiredTicket = 0x5,
};

/* 649 */
enum $5B4DADFAECE1A139C105338A1FF444EE
{
  k_iCallback = 0xC9,
};

/* 650 */
typedef $5B4DADFAECE1A139C105338A1FF444EE $E9EBB0B96BF5FE5A4547A0938E0CD11F;

/* 651 */
enum EResult
{
  k_EResultOK = 0x1,
  k_EResultFail = 0x2,
  k_EResultNoConnection = 0x3,
  k_EResultInvalidPassword = 0x5,
  k_EResultLoggedInElsewhere = 0x6,
  k_EResultInvalidProtocolVer = 0x7,
  k_EResultInvalidParam = 0x8,
  k_EResultFileNotFound = 0x9,
  k_EResultBusy = 0xA,
  k_EResultInvalidState = 0xB,
  k_EResultInvalidName = 0xC,
  k_EResultInvalidEmail = 0xD,
  k_EResultDuplicateName = 0xE,
  k_EResultAccessDenied = 0xF,
  k_EResultTimeout = 0x10,
  k_EResultBanned = 0x11,
  k_EResultAccountNotFound = 0x12,
  k_EResultInvalidSteamID = 0x13,
  k_EResultServiceUnavailable = 0x14,
  k_EResultNotLoggedOn = 0x15,
  k_EResultPending = 0x16,
  k_EResultEncryptionFailure = 0x17,
  k_EResultInsufficientPrivilege = 0x18,
  k_EResultLimitExceeded = 0x19,
  k_EResultRevoked = 0x1A,
  k_EResultExpired = 0x1B,
  k_EResultAlreadyRedeemed = 0x1C,
  k_EResultDuplicateRequest = 0x1D,
  k_EResultAlreadyOwned = 0x1E,
  k_EResultIPNotFound = 0x1F,
  k_EResultPersistFailed = 0x20,
  k_EResultLockingFailed = 0x21,
  k_EResultLogonSessionReplaced = 0x22,
  k_EResultConnectFailed = 0x23,
  k_EResultHandshakeFailed = 0x24,
  k_EResultIOFailure = 0x25,
  k_EResultRemoteDisconnect = 0x26,
  k_EResultShoppingCartNotFound = 0x27,
  k_EResultBlocked = 0x28,
  k_EResultIgnored = 0x29,
  k_EResultNoMatch = 0x2A,
  k_EResultAccountDisabled = 0x2B,
  k_EResultServiceReadOnly = 0x2C,
  k_EResultAccountNotFeatured = 0x2D,
  k_EResultAdministratorOK = 0x2E,
  k_EResultContentVersion = 0x2F,
  k_EResultTryAnotherCM = 0x30,
  k_EResultPasswordRequiredToKickSession = 0x31,
  k_EResultAlreadyLoggedInElsewhere = 0x32,
  k_EResultSuspended = 0x33,
  k_EResultCancelled = 0x34,
  k_EResultDataCorruption = 0x35,
  k_EResultDiskFull = 0x36,
  k_EResultRemoteCallFailed = 0x37,
  k_EResultPasswordUnset = 0x38,
  k_EResultExternalAccountUnlinked = 0x39,
  k_EResultPSNTicketInvalid = 0x3A,
  k_EResultExternalAccountAlreadyLinked = 0x3B,
  k_EResultRemoteFileConflict = 0x3C,
  k_EResultIllegalPassword = 0x3D,
  k_EResultSameAsPreviousValue = 0x3E,
  k_EResultAccountLogonDenied = 0x3F,
  k_EResultCannotUseOldPassword = 0x40,
  k_EResultInvalidLoginAuthCode = 0x41,
  k_EResultAccountLogonDeniedNoMail = 0x42,
  k_EResultHardwareNotCapableOfIPT = 0x43,
  k_EResultIPTInitError = 0x44,
  k_EResultParentalControlRestricted = 0x45,
  k_EResultFacebookQueryError = 0x46,
  k_EResultExpiredLoginAuthCode = 0x47,
  k_EResultIPLoginRestrictionFailed = 0x48,
  k_EResultAccountLockedDown = 0x49,
  k_EResultAccountLogonDeniedVerifiedEmailRequired = 0x4A,
  k_EResultNoMatchingURL = 0x4B,
};

/* 652 */
enum $F7813D00DC2EF439805F4B10223F41B8
{
  k_ECallbackFlagsRegistered = 0x1,
  k_ECallbackFlagsGameServer = 0x2,
};

/* 653 */
enum EMarketingMessageFlags
{
  k_EMarketingMessageFlagsNone = 0x0,
  k_EMarketingMessageFlagsHighPriority = 0x1,
  k_EMarketingMessageFlagsPlatformWindows = 0x2,
  k_EMarketingMessageFlagsPlatformMac = 0x4,
  k_EMarketingMessageFlagsPlatformRestrictions = 0x6,
};

/* 654 */
enum EPersonaState
{
  k_EPersonaStateOffline = 0x0,
  k_EPersonaStateOnline = 0x1,
  k_EPersonaStateBusy = 0x2,
  k_EPersonaStateAway = 0x3,
  k_EPersonaStateSnooze = 0x4,
  k_EPersonaStateLookingToTrade = 0x5,
  k_EPersonaStateLookingToPlay = 0x6,
  k_EPersonaStateMax = 0x7,
};

/* 655 */
enum EFriendRelationship
{
  k_EFriendRelationshipNone = 0x0,
  k_EFriendRelationshipBlocked = 0x1,
  k_EFriendRelationshipRequestRecipient = 0x2,
  k_EFriendRelationshipFriend = 0x3,
  k_EFriendRelationshipRequestInitiator = 0x4,
  k_EFriendRelationshipIgnored = 0x5,
  k_EFriendRelationshipIgnoredFriend = 0x6,
  k_EFriendRelationshipSuggested = 0x7,
  k_EFriendRelationshipMax = 0x8,
};

/* 656 */
enum EOverlayToStoreFlag
{
  k_EOverlayToStoreFlag_None = 0x0,
  k_EOverlayToStoreFlag_AddToCart = 0x1,
  k_EOverlayToStoreFlag_AddToCartAndShow = 0x2,
};

/* 657 */
enum EChatEntryType
{
  k_EChatEntryTypeInvalid = 0x0,
  k_EChatEntryTypeChatMsg = 0x1,
  k_EChatEntryTypeTyping = 0x2,
  k_EChatEntryTypeInviteGame = 0x3,
  k_EChatEntryTypeEmote = 0x4,
  k_EChatEntryTypeLeftConversation = 0x6,
};

/* 658 */
enum CGameID::EGameIDType
{
  k_EGameIDTypeApp = 0x0,
  k_EGameIDTypeGameMod = 0x1,
  k_EGameIDTypeShortcut = 0x2,
  k_EGameIDTypeP2P = 0x3,
};

/* 659 */
enum LiveSteam_PersonaState
{
  LIVE_STEAM_PERSONA_STATE_OFFLINE = 0x0,
  LIVE_STEAM_PERSONA_STATE_ONLINE = 0x1,
  LIVE_STEAM_PERSONA_STATE_BUSY = 0x2,
  LIVE_STEAM_PERSONA_STATE_SNOOZE = 0x3,
};

/* 660 */
enum EFriendFlags
{
  k_EFriendFlagNone = 0x0,
  k_EFriendFlagBlocked = 0x1,
  k_EFriendFlagFriendshipRequested = 0x2,
  k_EFriendFlagImmediate = 0x4,
  k_EFriendFlagClanMember = 0x8,
  k_EFriendFlagOnGameServer = 0x10,
  k_EFriendFlagRequestingFriendship = 0x80,
  k_EFriendFlagRequestingInfo = 0x100,
  k_EFriendFlagIgnored = 0x200,
  k_EFriendFlagIgnoredFriend = 0x400,
  k_EFriendFlagSuggested = 0x800,
  k_EFriendFlagAll = 0xFFFF,
};

/* 661 */
enum EVoiceResult
{
  k_EVoiceResultOK = 0x0,
  k_EVoiceResultNotInitialized = 0x1,
  k_EVoiceResultNotRecording = 0x2,
  k_EVoiceResultNoData = 0x3,
  k_EVoiceResultBufferTooSmall = 0x4,
  k_EVoiceResultDataCorrupted = 0x5,
  k_EVoiceResultRestricted = 0x6,
  k_EVoiceResultUnsupportedCodec = 0x7,
};

/* 662 */
enum EAchievements
{
  ACH_MP_MISC_1 = 0x0,
  ACH_MP_MISC_2 = 0x1,
  ACH_MP_MISC_3 = 0x2,
  ACH_MP_MISC_4 = 0x3,
  ACH_MP_MISC_5 = 0x4,
  ACH_ZM_TRANSIT_SIDEQUEST = 0x5,
  ACH_ZM_DONT_FIRE_UNTIL_YOU_SEE = 0x6,
  ACH_ZM_THE_LIGHTS_OF_THEIR_EYES = 0x7,
  ACH_ZM_UNDEAD_MANS_PARTY_BUS = 0x8,
  ACH_ZM_DANCE_ON_MY_GRAVE = 0x9,
  ACH_ZM_STANDARD_EQUIPMENT_MAY_VARY = 0xA,
  ACH_ZM_YOU_HAVE_NO_POWER_OVER_ME = 0xB,
  ACH_ZM_I_DONT_THINK_THEY_EXIST = 0xC,
  ACH_ZM_FUEL_EFFICIENT = 0xD,
  ACH_ZM_HAPPY_HOUR = 0xE,
  ACH_ZM_DLC1_HIGHRISE_SIDEQUEST = 0xF,
  ACH_ZM_DLC1_VERTIGONER = 0x10,
  ACH_ZM_DLC1_MAD_WITHOUT_POWER = 0x11,
  ACH_ZM_DLC1_SHAFTED = 0x12,
  ACH_ZM_DLC1_SLIPPERY_WHEN_UNDEAD = 0x13,
  ACH_ZM_DLC1_FACING_THE_DRAGON = 0x14,
  ACH_ZM_DLC1_IM_MY_OWN_BEST_FRIEND = 0x15,
  ACH_ZM_DLC1_POLYARMORY = 0x16,
  ACH_ZM_DLC1_MONKEY_SEE_MONKEY_DOOM = 0x17,
  ACH_ZM_DLC1_I_SEE_LIVE_PEOPLE = 0x18,
  ACH_ZM_DLC2_PRISON_SIDEQUEST = 0x19,
  ACH_ZM_DLC2_FEED_THE_BEAST = 0x1A,
  ACH_ZM_DLC2_MAKING_THE_ROUNDS = 0x1B,
  ACH_ZM_DLC2_ACID_DRIP = 0x1C,
  ACH_ZM_DLC2_FULL_LOCKDOWN = 0x1D,
  ACH_ZM_DLC2_A_BURST_OF_FLAVOR = 0x1E,
  ACH_ZM_DLC2_PARANORMAL_PROGRESS = 0x1F,
  ACH_ZM_DLC2_GG_BRIDGE = 0x20,
  ACH_ZM_DLC2_TRAPPED_IN_TIME = 0x21,
  ACH_ZM_DLC2_POP_GOES_THE_WEASEL = 0x22,
  ACH_ZM_DLC3_BURIED_SIDEQUEST = 0x23,
  ACH_ZM_DLC3_ECTOPLASMIC_RESIDUE = 0x24,
  ACH_ZM_DLC3_IM_YOUR_HUCKLEBERRY = 0x25,
  ACH_ZM_DLC3_DEATH_FROM_BELOW = 0x26,
  ACH_ZM_DLC3_CANDYGRAM = 0x27,
  ACH_ZM_DLC3_AWAKEN_THE_GAZEBO = 0x28,
  ACH_ZM_DLC3_REVISIONIST_HISTORIAN = 0x29,
  ACH_ZM_DLC3_MAZED_AND_CONFUSED = 0x2A,
  ACH_ZM_DLC3_FSIRT_AGAINST_THE_WALL = 0x2B,
  ACH_ZM_DLC3_WHEN_THE_REVOLUTION_COMES = 0x2C,
  ACH_ZM_DLC4_TOMB_SIDEQUEST = 0x2D,
  ACH_ZM_DLC4_NOT_A_GOLD_DIGGER = 0x2E,
  ACH_ZM_DLC4_ALL_YOUR_BASE = 0x2F,
  ACH_ZM_DLC4_KUNG_FU_GRIP = 0x30,
  ACH_ZM_DLC4_PLAYING_WITH_POWER = 0x31,
  ACH_ZM_DLC4_IM_ON_A_TANK = 0x32,
  ACH_ZM_DLC4_SAVING_THE_DAY_ALL_DAY = 0x33,
  ACH_ZM_DLC4_MASTER_OF_DISGUISE = 0x34,
  ACH_ZM_DLC4_OVERACHIEVER = 0x35,
  ACH_ZM_DLC4_MASTER_WIZARD = 0x36,
  ACH_COUNT = 0x37,
};

/* 663 */
enum ENotificationPosition
{
  k_EPositionTopLeft = 0x0,
  k_EPositionTopRight = 0x1,
  k_EPositionBottomLeft = 0x2,
  k_EPositionBottomRight = 0x3,
};

/* 664 */
enum ESteamAPICallFailure
{
  k_ESteamAPICallFailureNone = 0xFFFFFFFF,
  k_ESteamAPICallFailureSteamGone = 0x0,
  k_ESteamAPICallFailureNetworkFailure = 0x1,
  k_ESteamAPICallFailureInvalidHandle = 0x2,
  k_ESteamAPICallFailureMismatchedCallback = 0x3,
};

/* 665 */
enum ELeaderboardSortMethod
{
  k_ELeaderboardSortMethodNone = 0x0,
  k_ELeaderboardSortMethodAscending = 0x1,
  k_ELeaderboardSortMethodDescending = 0x2,
};

/* 666 */
enum ELeaderboardDisplayType
{
  k_ELeaderboardDisplayTypeNone = 0x0,
  k_ELeaderboardDisplayTypeNumeric = 0x1,
  k_ELeaderboardDisplayTypeTimeSeconds = 0x2,
  k_ELeaderboardDisplayTypeTimeMilliSeconds = 0x3,
};

/* 667 */
enum ELeaderboardDataRequest
{
  k_ELeaderboardDataRequestGlobal = 0x0,
  k_ELeaderboardDataRequestGlobalAroundUser = 0x1,
  k_ELeaderboardDataRequestFriends = 0x2,
  k_ELeaderboardDataRequestUsers = 0x3,
};

/* 668 */
enum ELeaderboardUploadScoreMethod
{
  k_ELeaderboardUploadScoreMethodNone = 0x0,
  k_ELeaderboardUploadScoreMethodKeepBest = 0x1,
  k_ELeaderboardUploadScoreMethodForceUpdate = 0x2,
};

/* 669 */
enum $DEC60CB2430F492DA4FDAB29C999AF69
{
  k_cchPersonaNameMax = 0x80,
  k_cwchPersonaNameMax = 0x20,
};

/* 670 */
enum Livesteam_TicketState_t
{
  LIVE_STEAM_TICKET_ERROR = 0xFFFFFFFF,
  LIVE_STEAM_TICKET_SUCCESS = 0x0,
  LIVE_STEAM_TICKET_START = 0x1,
  LIVE_STEAM_TICKET_MAKE_REQUEST = 0x2,
  LIVE_STEAM_TICKET_REQUEST_IN_PROGRESS = 0x3,
  LIVE_STEAM_TICKET_RESPONSE = 0x4,
  LIVE_STEAM_TICKET_LIMIT_EXCEEDED = 0x5,
};

/* 671 */
enum EP2PSend
{
  k_EP2PSendUnreliable = 0x0,
  k_EP2PSendUnreliableNoDelay = 0x1,
  k_EP2PSendReliable = 0x2,
  k_EP2PSendReliableWithBuffering = 0x3,
};

/* 672 */
enum ESNetSocketConnectionType
{
  k_ESNetSocketConnectionTypeNotConnected = 0x0,
  k_ESNetSocketConnectionTypeUDP = 0x1,
  k_ESNetSocketConnectionTypeUDPRelay = 0x2,
};

/* 673 */
enum ERemoteStoragePlatform
{
  k_ERemoteStoragePlatformNone = 0x0,
  k_ERemoteStoragePlatformWindows = 0x1,
  k_ERemoteStoragePlatformOSX = 0x2,
  k_ERemoteStoragePlatformPS3 = 0x4,
  k_ERemoteStoragePlatformReserved1 = 0x8,
  k_ERemoteStoragePlatformReserved2 = 0x10,
  k_ERemoteStoragePlatformAll = 0xFFFFFFFF,
};

/* 674 */
enum ERemoteStoragePublishedFileVisibility
{
  k_ERemoteStoragePublishedFileVisibilityPublic = 0x0,
  k_ERemoteStoragePublishedFileVisibilityFriendsOnly = 0x1,
  k_ERemoteStoragePublishedFileVisibilityPrivate = 0x2,
};

/* 675 */
enum EWorkshopFileType
{
  k_EWorkshopFileTypeCommunity = 0x0,
  k_EWorkshopFileTypeMicrotransaction = 0x1,
  k_EWorkshopFileTypeCollection = 0x2,
  k_EWorkshopFileTypeArt = 0x3,
  k_EWorkshopFileTypeVideo = 0x4,
  k_EWorkshopFileTypeScreenshot = 0x5,
};

/* 676 */
enum EWorkshopVideoProvider
{
  k_EWorkshopVideoProviderNone = 0x0,
  k_EWorkshopVideoProviderYoutube = 0x1,
};

/* 677 */
enum EWorkshopFileAction
{
  k_EWorkshopFileActionPlayed = 0x0,
  k_EWorkshopFileActionCompleted = 0x1,
};

/* 678 */
enum EWorkshopEnumerationType
{
  k_EWorkshopEnumerationTypeRankedByVote = 0x0,
  k_EWorkshopEnumerationTypeRecent = 0x1,
  k_EWorkshopEnumerationTypeTrending = 0x2,
  k_EWorkshopEnumerationTypeFavoritesOfFriends = 0x3,
  k_EWorkshopEnumerationTypeVotedByFriends = 0x4,
  k_EWorkshopEnumerationTypeContentByFriends = 0x5,
  k_EWorkshopEnumerationTypeRecentFromFollowedUsers = 0x6,
};

/* 679 */
enum EHTTPMethod
{
  k_EHTTPMethodInvalid = 0x0,
  k_EHTTPMethodGET = 0x1,
  k_EHTTPMethodHEAD = 0x2,
  k_EHTTPMethodPOST = 0x3,
};

/* 680 */
enum EMatchMakingServerResponse
{
  eServerResponded = 0x0,
  eServerFailedToRespond = 0x1,
  eNoServersListedOnMasterServer = 0x2,
};

/* 681 */
enum ELobbyComparison
{
  k_ELobbyComparisonEqualToOrLessThan = 0xFFFFFFFE,
  k_ELobbyComparisonLessThan = 0xFFFFFFFF,
  k_ELobbyComparisonEqual = 0x0,
  k_ELobbyComparisonGreaterThan = 0x1,
  k_ELobbyComparisonEqualToOrGreaterThan = 0x2,
  k_ELobbyComparisonNotEqual = 0x3,
};

/* 682 */
enum ELobbyDistanceFilter
{
  k_ELobbyDistanceFilterClose = 0x0,
  k_ELobbyDistanceFilterDefault = 0x1,
  k_ELobbyDistanceFilterFar = 0x2,
  k_ELobbyDistanceFilterWorldwide = 0x3,
};

/* 683 */
enum ELobbyType
{
  k_ELobbyTypePrivate = 0x0,
  k_ELobbyTypeFriendsOnly = 0x1,
  k_ELobbyTypePublic = 0x2,
  k_ELobbyTypeInvisible = 0x3,
};

/* 684 */
enum SndBus
{
  SND_BUS_REVERB = 0x0,
  SND_BUS_FX = 0x1,
  SND_BUS_VOICE = 0x2,
  SND_BUS_PFUTZ = 0x3,
  SND_BUS_HDRFX = 0x4,
  SND_BUS_UI = 0x5,
  SND_BUS_MUSIC = 0x6,
  SND_BUS_MOVIE = 0x7,
  SND_BUS_REFERENCE = 0x8,
  SND_BUS_COUNT = 0x9,
};

/* 685 */
enum ddlPrimitiveTypes_e
{
  DDL_INVALID_TYPE = 0xFFFFFFFF,
  DDL_BYTE_TYPE = 0x0,
  DDL_SHORT_TYPE = 0x1,
  DDL_UINT_TYPE = 0x2,
  DDL_INT_TYPE = 0x3,
  DDL_INT64_TYPE = 0x4,
  DDL_FLOAT_TYPE = 0x5,
  DDL_FIXEDPOINT_TYPE = 0x6,
  DDL_STRING_TYPE = 0x7,
  DDL_STRUCT_TYPE = 0x8,
  DDL_ENUM_TYPE = 0x9,
};

/* 686 */
enum SndDuckCategoryType
{
  SND_DUCK_CATEGORY_ALIAS = 0x0,
  SND_DUCK_CATEGORY_AMBIENT = 0x1,
  SND_DUCK_CATEGORY_SCRIPT = 0x2,
  SND_DUCK_CATEGORY_SHELLSHOCK = 0x3,
  SND_DUCK_CATEGORY_BREATH = 0x4,
  SND_DUCK_CATEGORY_ADS = 0x5,
  SND_DUCK_CATEGORY_MENU = 0x6,
  SND_DUCK_CATEGORY_ENEMIES = 0x7,
  SND_DUCK_CATEGORY_HEALTH = 0x8,
  SND_DUCK_CATEGORY_DEBUG = 0x9,
  SND_DUCK_CATEGORY_LEVELFADE = 0xA,
  SND_DUCK_CATEGORY_MOVIE = 0xB,
  SND_DUCK_CATEGORY_COUNT = 0xC,
};

/* 687 */
enum SndCallLocation
{
  SND_CALL_LOCATION_SCRIPT = 0x0,
  SND_CALL_LOCATION_GDT = 0x1,
  SND_CALL_LOCATION_COUNT = 0x2,
};

/* 688 */
enum SndAliasType
{
  SAT_UNKNOWN = 0x0,
  SAT_LOADED = 0x1,
  SAT_STREAMED = 0x2,
  SAT_PRIMED = 0x3,
  SAT_COUNT = 0x4,
};

/* 689 */
enum SndFluxType
{
  SND_FLUX_TYPE_NONE = 0x0,
  SND_FLUX_TYPE_LEFT_OF_PLAYER = 0x1,
  SND_FLUX_TYPE_CENTER_OF_PLAYER = 0x2,
  SND_FLUX_TYPE_RIGHT_OF_PLAYER = 0x3,
  SND_FLUX_TYPE_RANDOM_PLAYER = 0x4,
  SND_FLUX_TYPE_LEFT_OF_SHOT = 0x5,
  SND_FLUX_TYPE_CENTER_OF_SHOT = 0x6,
  SND_FLUX_TYPE_RIGHT_OF_SHOT = 0x7,
  SND_FLUX_TYPE_COUNT = 0x8,
};

/* 690 */
enum SndLimitType
{
  SND_LIMIT_NONE = 0x0,
  SND_LIMIT_OLDEST = 0x1,
  SND_LIMIT_REJECT = 0x2,
  SND_LIMIT_PRIORITY = 0x3,
  SND_LIMIT_COUNT = 0x4,
};

/* 691 */
enum rankTableColumns_t
{
  MP_RANKTABLE_RANKID = 0x0,
  MP_RANKTABLE_RANK = 0x1,
  MP_RANKTABLE_MINXP = 0x2,
  MP_RANKTABLE_XPTONEXT = 0x3,
  MP_RANKTABLE_SHORTRANK = 0x4,
  MP_RANKTABLE_FULLRANK = 0x5,
  MP_RANKTABLE_ICON = 0x6,
  MP_RANKTABLE_MAXXP = 0x7,
  MP_RANKTABLE_WEAPUNLOCK = 0x8,
  MP_RANKTABLE_PERKUNLOCK = 0x9,
  MP_RANKTABLE_CHALLENGE = 0xA,
  MP_RANKTABLE_CAMO = 0xB,
  MP_RANKTABLE_ATTACHMENT = 0xC,
  MP_RANKTABLE_LEVEL = 0xD,
  MP_RANKTABLE_DISPLAYLEVEL = 0xE,
  MP_RANKTABLE_FEATURE = 0xF,
  MP_RANKTABLE_INGAMERANK = 0x10,
  MP_RANKTABLE_UNLOCKS = 0x11,
  MP_RANKTABLE_COUNT = 0x12,
};

/* 692 */
enum demonwareFlags_e
{
  DEMONWARE_FLAGS_INVALID = 0xFFFFFFFF,
  DEMONWARE_FLAGS_SEASONPASS_SENT = 0x0,
  DEMONWARE_FLAGS_MISSING_PRESTIGE_FILE = 0x1,
  DEMONWARE_FLAGS_PRESTIGE_TOO_FAST = 0x2,
  DEMONWARE_FLAGS_UNLOCK_TOKEN_MISMATCH = 0x3,
  DEMONWARE_FLAGS_BAD_GAMERTAG = 0x4,
  DEMONWARE_FLAGS_IW6_PROMO_PURCHASED = 0x5,
  DEMONWARE_FLAGS_IW6_PROMO_ACCESSED = 0x6,
  DEMONWARE_FLAGS_VOTING_VERSION = 0x7,
  DEMONWARE_FLAGS_VOTING_DATA = 0x8,
  DEMONWARE_FLAGS_VOTING_TIME_0 = 0x9,
  DEMONWARE_FLAGS_VOTING_TIME_1 = 0xA,
  DEMONWARE_FLAGS_VOTING_TIME_2 = 0xB,
  DEMONWARE_FLAGS_VOTING_TIME_3 = 0xC,
  DEMONWARE_FLAGS_CONNECTION_TYPE = 0xD,
  DEMONWARE_FLAGS_SPREMINDER_TIME_0 = 0xE,
  DEMONWARE_FLAGS_SPREMINDER_TIME_1 = 0xF,
  DEMONWARE_FLAGS_SPREMINDER_TIME_2 = 0x10,
  DEMONWARE_FLAGS_SPREMINDER_TIME_3 = 0x11,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_0 = 0x12,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_1 = 0x13,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_2 = 0x14,
  DEMONWARE_FLAGS_DSPPROMOTION_TIME_3 = 0x15,
  DEMONWARE_FLAGS_DSPPROMOTION_OPT_OUT = 0x16,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_0 = 0x17,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_1 = 0x18,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_2 = 0x19,
  DEMONWARE_FLAGS_GHOSTUPSELL_TIME_3 = 0x1A,
  DEMONWARE_FLAGS_GHOSTUPSELL_OPT_OUT = 0x1B,
  DEMONWARE_FLAGS_COUNT = 0x1C,
};

/* 693 */
enum zmGameModeGroup_t
{
  ZM_GAMEMODEGROUP_ZCLASSIC = 0x0,
  ZM_GAMEMODEGROUP_ZSURVIVAL = 0x1,
  ZM_GAMEMODEGROUP_ZENCOUNTER = 0x2,
  ZM_GAMEMODEGROUP_COUNT = 0x3,
};

/* 694 */
enum matchHistoryKeyIndex_t
{
  MP_MATCHHISTORYKEY_STARTINGTIME = 0x0,
  MP_MATCHHISTORYKEY_ENDINGTIME = 0x1,
  MP_MATCHHISTORYKEY_GAMETYPE = 0x2,
  MP_MATCHHISTORYKEY_SCORE = 0x3,
  MP_MATCHHISTORYKEY_KILLS = 0x4,
  MP_MATCHHISTORYKEY_DEATHS = 0x5,
  MP_MATCHHISTORYKEY_SCOREBOARDPOSITION = 0x6,
  MP_MATCHHISTORYKEY_TEAMSCORERATIO = 0x7,
  MP_MATCHHISTORYKEY_QUITTYPE = 0x8,
  MP_MATCHHISTORYKEY_FORGIVEN = 0x9,
  MP_MATCHHISTORYKEY_COUNT = 0xA,
};

/* 695 */
enum matchHistoryQuitType_t
{
  MP_QUITTYPE_DASHBOARD = 0x0,
  MP_QUITTYPE_TIMEOUT = 0x1,
  MP_QUITTYPE_KICKED = 0x2,
  MP_QUITTYPE_QUIT = 0x3,
  MP_QUITTYPE_FINISHED = 0x4,
  MP_QUITTYPE_COUNT = 0x5,
};

/* 696 */
enum zombieStatsKeyIndex_t
{
  ZM_ZOMBIESTATSKEY_TIME_PLAYED_TOTAL = 0x0,
  ZM_ZOMBIESTATSKEY_WEIGHTED_DOWNS = 0x1,
  ZM_ZOMBIESTATSKEY_WEIGHTED_ROUNDS_PLAYED = 0x2,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY1 = 0x3,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY2 = 0x4,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY3 = 0x5,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY4 = 0x6,
  ZM_ZOMBIESTATSKEY_TIMESTAMPLASTDAY5 = 0x7,
  ZM_ZOMBIESTATSKEY_KILLS = 0x8,
  ZM_ZOMBIESTATSKEY_ROUNDS = 0x9,
  ZM_ZOMBIESTATSKEY_COMBINED_RANK = 0xA,
  ZM_ZOMBIESTATSKEY_WINS = 0xB,
  ZM_ZOMBIESTATSKEY_LOSSES = 0xC,
  ZM_ZOMBIESTATSKEY_COUNT = 0xD,
};

/* 697 */
enum eScoreInfoTableColumns
{
  SCOREINFOTABLE_SCRIPTREF = 0x0,
  SCOREINFOTABLE_SCORESTRING = 0x1,
  SCOREINFOTABLE_MEDALREF = 0x2,
  SCOREINFOTABLE_MEDALBACKING = 0x3,
  SCOREINFOTABLE_INCLUDE_KILLSTREAKS = 0x4,
  SCOREINFOTABLE_SAVEMEDAL = 0x5,
  SCOREINFOTABLE_ADDBOOKMARK = 0x6,
  SCOREINFOTABLE_DOUBLEXP = 0x7,
  SCOREINFOTABLE_GIVEGUNXP = 0x8,
  SCOREINFOTABLE_MEDALCATEGORY = 0x9,
  SCOREINFOTABLE_MEDALSORTKEY = 0xA,
  MAX_SCOREINFOTABLE_COUNT = 0xB,
};

/* 698 */
enum $C72B7C9F3CCD9DAC8AA46776495D5444
{
  CRYPT_OK = 0x0,
  CRYPT_ERROR = 0x1,
  CRYPT_NOP = 0x2,
  CRYPT_INVALID_KEYSIZE = 0x3,
  CRYPT_INVALID_ROUNDS = 0x4,
  CRYPT_FAIL_TESTVECTOR = 0x5,
  CRYPT_BUFFER_OVERFLOW = 0x6,
  CRYPT_INVALID_PACKET = 0x7,
  CRYPT_INVALID_PRNGSIZE = 0x8,
  CRYPT_ERROR_READPRNG = 0x9,
  CRYPT_INVALID_CIPHER = 0xA,
  CRYPT_INVALID_HASH = 0xB,
  CRYPT_INVALID_PRNG = 0xC,
  CRYPT_MEM = 0xD,
  CRYPT_PK_TYPE_MISMATCH = 0xE,
  CRYPT_PK_NOT_PRIVATE = 0xF,
  CRYPT_INVALID_ARG = 0x10,
  CRYPT_FILE_NOTFOUND = 0x11,
  CRYPT_PK_INVALID_TYPE = 0x12,
  CRYPT_PK_INVALID_SYSTEM = 0x13,
  CRYPT_PK_DUP = 0x14,
  CRYPT_PK_NOT_FOUND = 0x15,
  CRYPT_PK_INVALID_SIZE = 0x16,
  CRYPT_INVALID_PRIME_SIZE = 0x17,
  CRYPT_PK_INVALID_PADDING = 0x18,
};

/* 699 */
enum statsDeltaColumns_t
{
  STATSDELTA_INDEX = 0x0,
  STATSDELTA_PATH = 0x1,
  STATSDELTA_MINREPORT = 0x2,
  STATSDELTA_MAXREPORT = 0x3,
  STATSDELTA_MINCLAMP = 0x4,
  STATSDELTA_MAXCLAMP = 0x5,
  STATSDELTA_MINDROP = 0x6,
  STATSDELTA_MAXDROP = 0x7,
  STATSDELTA_CLIENTLB = 0x8,
  STATSDELTA_SERVERLB = 0x9,
  STATSDELTA_COUNT = 0xA,
};

/* 700 */
enum gameTypeTableColumns_t
{
  GAMETYPETABLE_SECTION = 0x0,
  GAMETYPETABLE_REFERENCE = 0x1,
  GAMETYPETABLE_NAME = 0x2,
  GAMETYPETABLE_DESC = 0x3,
  GAMETYPETABLE_IMAGE = 0x4,
  GAMETYPETABLE_INDEX = 0x5,
  GAMETYPETABLE_SPLITSCREEN = 0x6,
  GAMETYPETABLE_NAMELCASE = 0x7,
  GAMETYPETABLE_TEAMBASED = 0x8,
  GAMETYPETABLE_GROUPNAME = 0x9,
  GAMETYPETABLE_HASHARDCORE = 0xA,
  GAMETYPETABLE_COUNT = 0xB,
};

/* 701 */
enum challengeSortOrder_e
{
  SORTORDER_FIRST = 0x0,
  SORTORDER_NEAREST = 0x0,
  SORTORDER_REWARD = 0x1,
  SORTORDER_PERCENTAGECOMPLETED = 0x2,
  SORTORDER_DEFAULT = 0x3,
  SORTORDER_COUNT = 0x4,
  SORTORDER_INVALID = 0xFFFFFFFF,
};

/* 702 */
enum statsValidation_t
{
  STATS_VALIDATION_PASSED = 0x0,
  STATS_VALIDATION_FAILED_REPORT = 0x1,
  STATS_VALIDATION_FAILED_TAKEACTION = 0x2,
};

/* 703 */
enum SndBankState
{
  SND_BANK_STATE_NEW = 0x0,
  SND_BANK_STATE_STREAM_HEADER = 0x1,
  SND_BANK_STATE_STREAM_TOC = 0x2,
  SND_BANK_STATE_LOADED_HEADER = 0x3,
  SND_BANK_STATE_LOADED_TOC = 0x4,
  SND_BANK_STATE_LOADED_ASSET_WAIT = 0x5,
  SND_BANK_STATE_LOADED_ASSETS = 0x6,
  SND_BANK_STATE_READY_TO_USE = 0x7,
  SND_BANK_STATE_ERROR = 0x8,
};

/* 704 */
enum SndLengthType
{
  SND_LENGTH_NOTIFY_NONE = 0x0,
  SND_LENGTH_NOTIFY_SCRIPT = 0x1,
  SND_LENGTH_NOTIFY_SUBTITLE = 0x2,
  SND_LENGTH_NOTIFY_COUNT = 0x3,
};

/* 705 */
enum SndCommandType
{
  SND_COMMAND_NOP = 0x0,
  SND_COMMAND_ALIAS_NAME = 0x1,
  SND_COMMAND_PLAY = 0x2,
  SND_COMMAND_STOP_ALIAS = 0x3,
  SND_COMMAND_STOP_ENT = 0x4,
  SND_COMMAND_CINEMATIC_START = 0x5,
  SND_COMMAND_CINEMATIC_END = 0x6,
  SND_COMMAND_DISCONNECT_LISTENER = 0x7,
  SND_COMMAND_SET_LISTENER = 0x8,
  SND_COMMAND_STOP_SOUNDS = 0x9,
  SND_COMMAND_FADE_IN = 0xA,
  SND_COMMAND_FADE_OUT = 0xB,
  SND_COMMAND_SET_ENVIRONMENT_EFFECTS = 0xC,
  SND_COMMAND_DEACTIVATE_ENVIRONMENT_EFFECTS = 0xD,
  SND_COMMAND_SET_PLAYBACK_ATTENUATION = 0xE,
  SND_COMMAND_SET_PLAYBACK_ATTENUATION_RATE = 0xF,
  SND_COMMAND_SET_PLAYBACK_PITCH = 0x10,
  SND_COMMAND_SET_PLAYBACK_PITCH_RATE = 0x11,
  SND_COMMAND_STOP_PLAYBACK = 0x12,
  SND_COMMAND_SET_START_PAUSED = 0x13,
  SND_COMMAND_DUCK = 0x14,
  SND_COMMAND_SET_ENT_STATE = 0x15,
  SND_COMMAND_SET_GAME_STATE = 0x16,
  SND_COMMAND_PLAY_LOOP_AT = 0x17,
  SND_COMMAND_STOP_LOOP_AT = 0x18,
  SND_COMMAND_PLAY_LINE_AT = 0x19,
  SND_COMMAND_STOP_LINE_AT = 0x1A,
  SND_COMMAND_GAME_RESET = 0x1B,
  SND_COMMAND_SET_CONTEXT = 0x1C,
  SND_COMMAND_SET_ENT_CONTEXT = 0x1D,
  SND_COMMAND_SCRIPT_TIMESCALE = 0x1E,
  SND_COMMAND_UPDATE_CG = 0x1F,
  SND_COMMAND_LOAD_BANK = 0x20,
  SND_COMMAND_UNLOAD_BANK = 0x21,
  SND_COMMAND_LOAD_PATCH = 0x22,
  SND_COMMAND_UNLOAD_PATCH = 0x23,
  SND_COMMAND_LOAD_GLOBALS = 0x24,
  SND_COMMAND_UNLOAD_GLOBALS = 0x25,
  SND_COMMAND_PRIME_ALIAS = 0x26,
  SND_COMMAND_RESTART_DRIVER = 0x27,
  SND_COMMAND_SET_SIDE_CHAIN_DUCK = 0x28,
  SND_COMMAND_SET_MUSIC_STATE = 0x29,
  SND_COMMAND_PREFETCH_LOADED_ALIAS = 0x2A,
  SND_COMMAND_SET_GLOBAL_FUTZ = 0x2B,
  SND_COMMAND_SET_AMBIENT_DEFAULT_CONTEXT = 0x2C,
  SND_COMMAND_SET_FRONTEND_MUSIC = 0x2D,
  SND_COMMAND_SET_LOOP_STATE = 0x2E,
  SND_COMMAND_PLAY_LOOPS = 0x2F,
  SND_COMMAND_SHUTDOWN = 0x30,
  SND_COMMAND_COUNT = 0x31,
};

/* 706 */
enum SndNotifyType
{
  SND_NOTIFY_NOP = 0x0,
  SND_NOTIFY_ENT_UPDATE = 0x1,
  SND_NOTIFY_SUBTITLE = 0x2,
  SND_NOTIFY_LENGTH = 0x3,
  SND_NOTIFY_PLAYBACK_UPDATE = 0x4,
  SND_NOTIFY_PLAYBACK_FREE = 0x5,
  SND_NOTIFY_BANK_FREE = 0x6,
};

/* 707 */
enum SndMusicActiveSegmentState
{
  SND_MUSIC_STATE_INACTIVE = 0x0,
  SND_MUSIC_STATE_PLAY_ON_EXIT = 0x1,
  SND_MUSIC_STATE_START_DELAY = 0x2,
  SND_MUSIC_STATE_PLAYING = 0x3,
  SND_MUSIC_STATE_STOP_DELAY = 0x4,
  SND_MUSIC_STATE_FADE_OUT = 0x5,
};

/* 708 */
enum SndFileLoadingState
{
  SFLS_UNLOADED = 0x0,
  SFLS_LOADING = 0x1,
  SFLS_LOADED = 0x2,
};

/* 709 */
enum SndEntityUpdate
{
  SND_ENTITY_UPDATE_ALWAYS = 0x0,
  SND_ENTITY_UPDATE_NEVER = 0x1,
};

/* 710 */
enum SndSpeaker
{
  SND_SPEAKER_LEFT = 0x0,
  SND_SPEAKER_RIGHT = 0x1,
  SND_SPEAKER_CENTER = 0x2,
  SND_SPEAKER_LFE = 0x3,
  SND_SPEAKER_LEFT_SURROUND = 0x4,
  SND_SPEAKER_RIGHT_SURROUND = 0x5,
  SND_SPEAKER_LEFT_REAR_SURROUND = 0x6,
  SND_SPEAKER_RIGHT_REAR_SURROUND = 0x7,
  SND_SPEAKER_COUNT = 0x8,
};

/* 711 */
enum SndEnvEffectPriority
{
  SND_ENVEFFECTPRIO_NONE = 0x0,
  SND_ENVEFFECTPRIO_LEVEL = 0x1,
  SND_ENVEFFECTPRIO_SHELLSHOCK = 0x2,
  SND_ENVEFFECTPRIO_COUNT = 0x3,
};

/* 712 */
enum searchSessionMode_t
{
  SEARCH_SESSION_MODE_INVALID = 0x0,
  SEARCH_SESSION_MODE_PUBLIC = 0x1,
  SEARCH_SESSION_MODE_LEAGUE = 0x2,
  SEARCH_SESSION_MODE_LOBBY_MERGE = 0x3,
  SEARCH_SESSION_MODE_DEDICATED_SERVER = 0x4,
  SEARCH_SESSION_MODE_COUNT = 0x5,
};

/* 713 */
enum $BAF469A0CB38886562C50411D710C8C1
{
  GEOGRAPHICAL_MATCHMAKING_NONE = 0x0,
  GEOGRAPHICAL_MATCHMAKING_PREFERRED = 0x1,
  GEOGRAPHICAL_MATCHMAKING_ONLY = 0x2,
};

/* 714 */
enum $EC6C096712EABBC1FB4AB0F79B2F71EA
{
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_NONE = 0x0,
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_ALL_PREFERRED = 0x1,
  GEOGRAPHICAL_MATCHMAKING_OVERRIDE_FOREIGN_PREFERRED = 0x2,
};

/* 715 */
enum friendsMode_e
{
  FRIENDS_SHOW_PLATFORM = 0x0,
  FRIENDS_SHOW_OFFLINE = 0x1,
  FRIENDS_NUM_MODES = 0x2,
};

/* 716 */
enum filesharePlayerFilter_e
{
  FSH_PLAYERFILTER_INVALID = 0xFFFFFFFF,
  FSH_PLAYERFILTER_ALL = 0x0,
  FSH_PLAYERFILTER_SELF = 0x1,
  FSH_PLAYERFILTER_OTHER = 0x2,
  FSH_PLAYERFILTER_FRIENDS = 0x3,
  FSH_PLAYERFILTER_STAFF = 0x4,
  FSH_PLAYERFILTER_CLAN = 0x5,
  FSH_PLAYERFILTER_LEAGUE = 0x6,
};

/* 717 */
enum $14DF47BCD58062D63354C0F320280F1A
{
  GAMETYPES_SECTION_GAME = 0x0,
  GAMETYPES_SECTION_BT = 0x1,
  GAMETYPES_SECTION_LB = 0x2,
  GAMETYPES_SECTION_LBRESET = 0x3,
  GAMETYPES_SECTION_LBFILTER = 0x4,
  GAMETYPES_SECTION_ZM_STARTLOC = 0x5,
  GAMETYPES_SECTION_ZM_STARTLOCGAME = 0x6,
};

/* 718 */
enum $3CEF1BC8B9C4A423177C7B9420F01C00
{
  GAMETYPES_COL_GAME_REF = 0x1,
  GAMETYPES_COL_GAME_NAMECAPS = 0x2,
  GAMETYPES_COL_GAME_DESCRIPTION = 0x3,
  GAMETYPES_COL_GAME_IMAGE = 0x4,
  GAMETYPES_COL_GAME_INDEX = 0x5,
  GAMETYPES_COL_GAME_SPLITSCREEN = 0x6,
  GAMETYPES_COL_GAME_NAMELOWER = 0x7,
  GAMETYPES_COL_GAME_ISTEAMBASED = 0x8,
  GAMETYPES_COL_GAME_GROUP = 0x9,
};

/* 719 */
enum $136956EDEC2A665535B235801C2041A7
{
  GAMETYPES_COL_ZM_STARTLOC_INDEX = 0x1,
  GAMETYPES_COL_ZM_STARTLOC_MAPREF = 0x2,
  GAMETYPES_COL_ZM_STARTLOC_REF = 0x3,
  GAMETYPES_COL_ZM_STARTLOC_NAMECAPS = 0x4,
  GAMETYPES_COL_ZM_STARTLOC_DESCRIPTION = 0x5,
  GAMETYPES_COL_ZM_STARTLOC_IMAGE = 0x6,
  GAMETYPES_COL_ZM_STARTLOC_GAMEMODENUM = 0x7,
  GAMETYPES_COL_ZM_STARTLOC_ICON_SCREEN_COORD_X = 0x8,
  GAMETYPES_COL_ZM_STARTLOC_ICON_SCREEN_COORD_Y = 0x9,
  GAMETYPES_COL_ZM_STARTLOC_MENU_SCREEN_COORD_X = 0xA,
  GAMETYPES_COL_ZM_STARTLOC_MENU_SCREEN_COORD_Y = 0xB,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_LEFT = 0xC,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_RIGHT = 0xD,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_UP = 0xE,
  GAMETYPES_COL_ZM_STARTLOC_MOVE_DOWN = 0xF,
  GAMETYPES_COL_ZM_STARTLOC_NAMELOWER = 0x10,
  GAMETYPES_COL_ZM_STARTLOC_NEW_SCREEN_COORD_X = 0x11,
  GAMETYPES_COL_ZM_STARTLOC_NEW_SCREEN_COORD_Y = 0x12,
};

/* 720 */
enum $B04905D442729CB6D8B033C4A32419B9
{
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_INDEX = 0x1,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_MAP_REF = 0x2,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_STARTLOC_REF = 0x3,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_GAMEMODE_REF = 0x4,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_DLC_GAMEMODE = 0x5,
  GAMETYPES_COL_ZM_STARTLOCGAMEMAP_NEW_ICON_PLACEMENT = 0x6,
};

/* 721 */
enum fileshareStatType_e
{
  FSH_STATS_VIEWS = 0x0,
  FSH_STATS_VOTES = 0x1,
  FSH_NUM_STATS = 0x2,
};

/* 722 */
enum fileshareState_e
{
  FILESHARE_STATE_INVALID = 0x0,
  FILESHARE_STATE_WORKING = 0x1,
  FILESHARE_STATE_SLOTS_FETCHED = 0x2,
  FILESHARE_STATE_VIEWS_FETCHED = 0x3,
  FILESHARE_STATE_VOTES_FETCHED = 0x4,
  FILESHARE_STATE_FAILURE = 0x5,
  FILESHARE_STATE_VALID = 0x6,
};

/* 723 */
enum $938699F29A6665EF52530DBDE25EEE7A
{
  PHYS_ALLOC_LOW = 0x0,
  PHYS_ALLOC_HIGH = 0x1,
  PHYS_ALLOC_COUNT = 0x2,
};

/* 724 */
enum $EB4E5F99EE3F38D377B0289A0B8D8D47
{
  FSHTABLE_CATEGORIES_COL_CATEGORYNAME = 0x0,
  FSHTABLE_CATEGORIES_COL_GROUPNAME = 0x1,
  FSHTABLE_CATEGORIES_COL_DWID = 0x2,
  FSHTABLE_CATEGORIES_COL_LOCNAME = 0x3,
};

/* 725 */
enum $257A3B86B82000CD22305E9C77BA0466
{
  FSHTABLE_GROUPS_COL_GROUPNAME = 0x0,
  FSHTABLE_GROUPS_COL_FIRSTSLOT = 0x1,
  FSHTABLE_GROUPS_COL_REGULARQUOTA = 0x2,
  FSHTABLE_GROUPS_COL_PREMIUMQUOTA = 0x3,
  FSHTABLE_GROUPS_COL_ISMANAGED = 0x4,
  FSHTABLE_GROUPS_COL_LOCNAME = 0x5,
  FSHTABLE_GROUPS_COL_ICON = 0x6,
  FSHTABLE_GROUPS_COL_R = 0x7,
  FSHTABLE_GROUPS_COL_G = 0x8,
  FSHTABLE_GROUPS_COL_B = 0x9,
};

/* 726 */
typedef MACRO_MAX_LANGUAGES language_t;

/* 727 */
enum eliteStatus_e
{
  ELITE_NOT_CHECKED = 0x0,
  ELITESUBSCRIBER_START = 0x1,
  ELITESUBSCRIBER_GET_INFO_FROM_FP = 0x2,
  ELITESUBSCRIBER_GET_INFO_FROM_FP_SUCCEEDED = 0x3,
  ELITESUBSCRIBER_GET_INFO_FROM_DW = 0x4,
  ELITESUBSCRIBER_GETTING_INFO_FROM_DW = 0x5,
  ELITESUBSCRIBER_COMPARE_RETRIEVED_DW_INFO = 0x6,
  ELITESUBSCRIBER_REFRESH_DW_INFO = 0x7,
  ELITESUBSCRIBER_REFRESHING_DW_INFO = 0x8,
  ELITESUBSCRIBER_FAILED = 0x9,
  ELITESUBSCRIBER_SUCCEEDED = 0xA,
  ELITECLAN_START = 0xB,
  ELITECLAN_GET_CLAN = 0xC,
  ELITECLAN_GETTING_CLAN = 0xD,
  ELITECLAN_GET_PUBLIC_PROFILE = 0xE,
  ELITECLAN_GETTING_PUBLIC_PROFILE = 0xF,
  ELITECLAN_GET_PRIVATE_PROFILE = 0x10,
  ELITECLAN_GETTING_PRIVATE_PROFILE = 0x11,
  ELITECLAN_GET_CLAN_MEMBERS = 0x12,
  ELITECLAN_GETTING_CLAN_MEMBERS = 0x13,
  ELITECLAN_GET_CLAN_LEVELANDXP = 0x14,
  ELITECLAN_GETTING_CLAN_LEVELANDXP = 0x15,
  ELITECLAN_FAILED = 0x16,
  ELITECLAN_SUCCEEDED = 0x17,
  ELITE_CHECKED = 0x18,
  ELITE_MAX_STATES = 0x19,
};

/* 728 */
enum eSubLevel_e
{
  ELITE_SUBSCRIPTION_LEVEL_UNKNOWN = 0xFFFFFFFF,
  ELITE_SUBSCRIPTION_LEVEL_NONE = 0x0,
  ELITE_SUBSCRIPTION_LEVEL_REGISTERED = 0x1,
  ELITE_SUBSCRIPTION_LEVEL_PAYING = 0x2,
  ELITE_SUBSCRIPTION_LEVEL_FOUNDER = 0x3,
};

/* 729 */
enum EliteStats_e
{
  ELITE_STATS_MEMBER = 0x0,
  ELITE_STATS_FIRST = 0x0,
  ELITE_STATS_FOUNDER = 0x1,
  ELITE_STATS_PAIDMEMBER = 0x2,
  ELITE_STATS_COUNT = 0x3,
};

/* 730 */
enum jsmnPrimitiveType_e
{
  JSMN_PRIMITIVE_TYPE_INVALID = 0x0,
  JSMN_PRIMITIVE_TYPE_INT = 0x1,
  JSMN_PRIMITIVE_TYPE_BOOL = 0x2,
};

/* 731 */
enum jsmntype_t
{
  JSMN_PRIMITIVE = 0x0,
  JSMN_OBJECT = 0x1,
  JSMN_ARRAY = 0x2,
  JSMN_KEY = 0x3,
  JSMN_STRING = 0x4,
};

/* 732 */
enum jsmnerr_t
{
  JSMN_ERROR_NOMEM = 0xFFFFFFFF,
  JSMN_ERROR_INVAL = 0xFFFFFFFE,
  JSMN_ERROR_PART = 0xFFFFFFFD,
  JSMN_SUCCESS = 0x0,
};

/* 733 */
enum combatRecordInfoTypes_t
{
  INFO_TYPE_INVALID = 0xFFFFFFFF,
  GAMEMODES = 0x0,
  WEAPONS = 0x1,
  EQUIPMENT = 0x2,
  SCORESTREAKS = 0x3,
  MEDALS = 0x4,
  INFO_TYPE_COUNT = 0x5,
};

/* 734 */
typedef ComponentCategory combatRecordMedalCategories_t;

/* 735 */
enum thresholdExceeded_e
{
  THRESHOLD_EXCEEDED_SCORE = 0x0,
  THRESHOLD_EXCEEDED_SCORE_PER_MIN = 0x1,
  THRESHOLD_EXCEEDED_KILLS = 0x2,
  THRESHOLD_EXCEEDED_DEATHS = 0x3,
  THRESHOLD_EXCEEDED_KD_RATIO = 0x4,
  THRESHOLD_EXCEEDED_KILLS_PER_MIN = 0x5,
  THRESHOLD_EXCEEDED_PLANTS = 0x6,
  THRESHOLD_EXCEEDED_DEFUSES = 0x7,
  THRESHOLD_EXCEEDED_CAPTURES = 0x8,
  THRESHOLD_EXCEEDED_DEFENDS = 0x9,
  THRESHOLD_EXCEEDED_TOTAL_TIME_PLAYED = 0xA,
  THRESHOLD_EXCEEDED_TACTICAL_INSERTION_USE = 0xB,
  THRESHOLD_EXCEEDED_JOIN_ATTEMPTS = 0xC,
  THRESHOLD_EXCEEDED_XP = 0xD,
  THRESHOLD_EXCEEDED_SPLITSCREEN = 0xE,
  THRESHOLD_EXCEEDED_COUNT = 0xF,
};

/* 736 */
enum challengeTest_t
{
  CT_TYPE_INVALID = 0x0,
  CT_TYPE_CRC32 = 0x1,
  CT_TYPE_SHA = 0x2,
  CT_TYPE_CRC32_SPLIT = 0x3,
};

/* 737 */
enum challengeResponseFunctionIDs_t
{
  FUNC_ID_CHECKSUM_CRC32 = 0x1,
  FUNC_ID_CHECKSUM_SHA = 0x2,
  FUNC_ID_CHECKSUM_CRC32_SPLIT = 0x3,
  FUNC_ID_DVAR = 0x4,
  FUNC_ID_DVAR_FLOAT = 0x5,
  FUNC_ID_EXPRESSION = 0x6,
  FUNC_ID_MIPSTER = 0x8,
};

/* 738 */
enum SndSpeakerFlag
{
  SND_SPEAKER_FLAG_LEFT = 0x1,
  SND_SPEAKER_FLAG_RIGHT = 0x2,
  SND_SPEAKER_FLAG_CENTER = 0x4,
  SND_SPEAKER_FLAG_LFE = 0x8,
  SND_SPEAKER_FLAG_LEFT_SURROUND = 0x10,
  SND_SPEAKER_FLAG_RIGHT_SURROUND = 0x20,
  SND_SPEAKER_FLAG_LEFT_REAR_SURROUND = 0x40,
  SND_SPEAKER_FLAG_RIGHT_REAR_SURROUND = 0x80,
};

/* 739 */
enum snd_occlusion_query_type
{
  SND_OCCLUSION_QUERY_TYPE_SINGLE = 0x0,
  SND_OCCLUSION_QUERY_TYPE_MULTIPLE = 0x1,
};

/* 740 */
enum snd_occlusion_single_state
{
  SND_OCCLUSION_SINGLE_STATE_FREE = 0x0,
  SND_OCCLUSION_SINGLE_STATE_PENDING = 0x1,
  SND_OCCLUSION_SINGLE_STATE_DONE = 0x2,
};

/* 741 */
enum XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER
{
  Processor1 = 0x1,
  Processor2 = 0x2,
  Processor3 = 0x4,
  Processor4 = 0x8,
  Processor5 = 0x10,
  Processor6 = 0x20,
  Processor7 = 0x40,
  Processor8 = 0x80,
  Processor9 = 0x100,
  Processor10 = 0x200,
  Processor11 = 0x400,
  Processor12 = 0x800,
  Processor13 = 0x1000,
  Processor14 = 0x2000,
  Processor15 = 0x4000,
  Processor16 = 0x8000,
  Processor17 = 0x10000,
  Processor18 = 0x20000,
  Processor19 = 0x40000,
  Processor20 = 0x80000,
  Processor21 = 0x100000,
  Processor22 = 0x200000,
  Processor23 = 0x400000,
  Processor24 = 0x800000,
  Processor25 = 0x1000000,
  Processor26 = 0x2000000,
  Processor27 = 0x4000000,
  Processor28 = 0x8000000,
  Processor29 = 0x10000000,
  Processor30 = 0x20000000,
  Processor31 = 0x40000000,
  Processor32 = 0x80000000,
  XAUDIO2_ANY_PROCESSOR = 0xFFFFFFFF,
  XAUDIO2_DEFAULT_PROCESSOR = 0xFFFFFFFF,
};

/* 742 */
enum XAUDIO2_DEVICE_ROLE
{
  NotDefaultDevice = 0x0,
  DefaultConsoleDevice = 0x1,
  DefaultMultimediaDevice = 0x2,
  DefaultCommunicationsDevice = 0x4,
  DefaultGameDevice = 0x8,
  GlobalDefaultDevice = 0xF,
  InvalidDeviceRole = 0xFFFFFFF0,
};

/* 743 */
enum XAUDIO2_FILTER_TYPE
{
  LowPassFilter = 0x0,
  BandPassFilter = 0x1,
  HighPassFilter = 0x2,
  NotchFilter = 0x3,
};

/* 744 */
enum sd_decoder_state
{
  SD_DECODER_FREE = 0x0,
  SD_DECODER_ALLOCATED = 0x1,
  SD_DECODER_RUNNING = 0x2,
  SD_DECODER_FREED = 0x3,
};

/* 745 */
enum sd_voice_param_state
{
  SD_VOICE_PARAM_FREE = 0x0,
  SD_VOICE_PARAM_ALLOCATED = 0x1,
};

/* 746 */
enum sd_mix_param_state
{
  SD_MIX_PARAM_FREE = 0x0,
  SD_MIX_PARAM_ALLOCATED = 0x1,
};

/* 747 */
enum snd_asset_format
{
  SND_ASSET_FORMAT_PCMS16 = 0x0,
  SND_ASSET_FORMAT_PCMS24 = 0x1,
  SND_ASSET_FORMAT_PCMS32 = 0x2,
  SND_ASSET_FORMAT_IEEE = 0x3,
  SND_ASSET_FORMAT_XMA4 = 0x4,
  SND_ASSET_FORMAT_MP3 = 0x5,
  SND_ASSET_FORMAT_MSADPCM = 0x6,
  SND_ASSET_FORMAT_WMA = 0x7,
  SND_ASSET_FORMAT_FLAC = 0x8,
  SND_ASSET_FORMAT_WIIUADPCM = 0x9,
  SND_ASSET_FORMAT_MPC = 0xA,
  SND_ASSET_FORMAT_COUNT = 0xB,
};

/* 748 */
enum sd_voice_state
{
  SD_VOICE_FREE = 0x0,
  SD_VOICE_ALLOCATED = 0x1,
  SD_VOICE_ACTIVE = 0x2,
  SD_VOICE_FREED = 0x3,
};

/* 749 */
enum sd_mix_channel
{
  SD_MIX_CHANNEL_LF = 0x0,
  SD_MIX_CHANNEL_RF = 0x1,
  SD_MIX_CHANNEL_CF = 0x2,
  SD_MIX_CHANNEL_LFE = 0x3,
  SD_MIX_CHANNEL_LS = 0x4,
  SD_MIX_CHANNEL_RS = 0x5,
  SD_MIX_CHANNEL_LR = 0x6,
  SD_MIX_CHANNEL_RR = 0x7,
};

/* 750 */
enum SndOverlayType
{
  SND_OVERLAY_NONE = 0x0,
  SND_OVERLAY_3D = 0x1,
  SND_OVERLAY_STREAM = 0x2,
  SND_OVERLAY_2D = 0x3,
};

/* 751 */
enum SndCsvParseEntryType
{
  SND_CSV_STRING = 0x0,
  SND_CSV_FLOAT = 0x1,
  SND_CSV_INT = 0x2,
  SND_CSV_ENUM = 0x3,
  SND_CSV_FLAG = 0x4,
  SND_CSV_USHORT_DBSPL = 0x5,
  SND_CSV_FLOAT_DBSPL = 0x6,
  SND_CSV_CENTS = 0x7,
  SND_CSV_HASH = 0x8,
  SND_CSV_ENUM_BITS = 0x9,
  SND_CSV_FLAG_BITS = 0xA,
  SND_CSV_BYTE = 0xB,
  SND_CSV_ENUM_BYTE = 0xC,
  SND_CSV_SHORT = 0xD,
  SND_CSV_USHORT = 0xE,
  SND_CSV_NORM_BYTE = 0xF,
  SND_CSV_DISTANCE = 0x10,
};

/* 752 */
enum SndDataTableType
{
  SND_TABLE_ALIAS = 0x0,
  SND_TABLE_GROUP = 0x1,
  SND_TABLE_CURVE = 0x2,
  SND_TABLE_PAN = 0x3,
  SND_TABLE_DUCK_GROUP = 0x4,
  SND_TABLE_DUCK = 0x5,
  SND_TABLE_CONTEXT = 0x6,
  SND_TABLE_RADVERB = 0x7,
  SND_TABLE_MASTER = 0x8,
  SND_TABLE_VOICE_DUCK = 0x9,
  SND_TABLE_DUCK_PATCH_ATTEN = 0xA,
  SND_TABLE_DUCK_PATCH_LPF = 0xB,
  SND_TABLE_COUNT = 0xC,
};

/* 753 */
enum SndLoadState
{
  SND_LOAD_UNUSED = 0x0,
  SND_LOAD_FINISHED = 0x1,
  SND_LOAD_PENDING = 0x2,
  SND_LOAD_READY = 0x3,
};

/* 754 */
enum SndRandomizeType
{
  SND_RANDOMIZE_INSTANCE = 0x0,
  SND_RANDOMIZE_ENTITY_VOLUME = 0x1,
  SND_RANDOMIZE_ENTITY_PITCH = 0x2,
  SND_RANDOMIZE_ENTITY_VARIANT = 0x4,
};

/* 755 */
enum $F7DD7E9699F04103778A329CE57EA4CA
{
  SCR_GAMECONST_ILLEGAL = 0x0,
  SCR_GAMECONST___name = 0x1,
  SCR_GAMECONST_abs = 0x2,
  SCR_GAMECONST_absangleclamp180 = 0x3,
  SCR_GAMECONST_absangleclamp360 = 0x4,
  SCR_GAMECONST_accuracy = 0x5,
  SCR_GAMECONST_acos = 0x6,
  SCR_GAMECONST_actionslotfourbuttonpressed = 0x7,
  SCR_GAMECONST_actionslotonebuttonpressed = 0x8,
  SCR_GAMECONST_actionslotthreebuttonpressed = 0x9,
  SCR_GAMECONST_actionslottwobuttonpressed = 0xA,
  SCR_GAMECONST_activateclientexploder = 0xB,
  SCR_GAMECONST_activatecrosshair = 0xC,
  SCR_GAMECONST_activatemixer = 0xD,
  SCR_GAMECONST_activator = 0xE,
  SCR_GAMECONST_addaieventlistener = 0xF,
  SCR_GAMECONST_addargus = 0x10,
  SCR_GAMECONST_addcylinderinfluencer = 0x11,
  SCR_GAMECONST_adddebugcommand = 0x12,
  SCR_GAMECONST_adddemobookmark = 0x13,
  SCR_GAMECONST_adddstat = 0x14,
  SCR_GAMECONST_addfriendlyscrambler = 0x15,
  SCR_GAMECONST_addgoal = 0x16,
  SCR_GAMECONST_addnodetocurve = 0x17,
  SCR_GAMECONST_addgametypestat = 0x18,
  SCR_GAMECONST_addplayerstat = 0x19,
  SCR_GAMECONST_addplayerstatwithgametype = 0x1A,
  SCR_GAMECONST_addrankxp = 0x1B,
  SCR_GAMECONST_addrankxpvalue = 0x1C,
  SCR_GAMECONST_addreactionevent = 0x1D,
  SCR_GAMECONST_addspawnpoints = 0x1E,
  SCR_GAMECONST_addsphereinfluencer = 0x1F,
  SCR_GAMECONST_addtestclient = 0x20,
  SCR_GAMECONST_addtocompass = 0x21,
  SCR_GAMECONST_addtomenuroot = 0x22,
  SCR_GAMECONST_addvehicletocompass = 0x23,
  SCR_GAMECONST_addweaponstat = 0x24,
  SCR_GAMECONST_addbonuscardstat = 0x25,
  SCR_GAMECONST_adsbuttonpressed = 0x26,
  SCR_GAMECONST_aimatpos = 0x27,
  SCR_GAMECONST_aimingatfriendly = 0x28,
  SCR_GAMECONST_aiteam = 0x29,
  SCR_GAMECONST_aiweapon = 0x2A,
  SCR_GAMECONST_alertlevel = 0x2B,
  SCR_GAMECONST_alertlevelint = 0x2C,
  SCR_GAMECONST_alignx = 0x2D,
  SCR_GAMECONST_aligny = 0x2E,
  SCR_GAMECONST_allclientsprint = 0x2F,
  SCR_GAMECONST_allocatemixerlights = 0x30,
  SCR_GAMECONST_allocatesoundrandoms = 0x31,
  SCR_GAMECONST_allowads = 0x32,
  SCR_GAMECONST_allowcrouch = 0x33,
  SCR_GAMECONST_allowdeath = 0x34,
  SCR_GAMECONST_allowedstances = 0x35,
  SCR_GAMECONST_allowjump = 0x36,
  SCR_GAMECONST_allowlean = 0x37,
  SCR_GAMECONST_allowmelee = 0x38,
  SCR_GAMECONST_allowpain = 0x39,
  SCR_GAMECONST_blockingpain = 0x3A,
  SCR_GAMECONST_allowpickupweapons = 0x3B,
  SCR_GAMECONST_allowpitchangle = 0x3C,
  SCR_GAMECONST_allowprone = 0x3D,
  SCR_GAMECONST_allowreact = 0x3E,
  SCR_GAMECONST_allowspectateteam = 0x3F,
  SCR_GAMECONST_allowsprint = 0x40,
  SCR_GAMECONST_allowstand = 0x41,
  SCR_GAMECONST_alpha = 0x42,
  SCR_GAMECONST_angleclamp180 = 0x43,
  SCR_GAMECONST_anglelerp = 0x44,
  SCR_GAMECONST_anglelerprate = 0x45,
  SCR_GAMECONST_angles = 0x46,
  SCR_GAMECONST_anglestoforward = 0x47,
  SCR_GAMECONST_anglestoright = 0x48,
  SCR_GAMECONST_anglestoup = 0x49,
  SCR_GAMECONST_anim_pose = 0x4A,
  SCR_GAMECONST_animateui = 0x4B,
  SCR_GAMECONST_animcustom = 0x4C,
  SCR_GAMECONST_animgetchildat = 0x4D,
  SCR_GAMECONST_animgetnumchildren = 0x4E,
  SCR_GAMECONST_animhasnotetrack = 0x4F,
  SCR_GAMECONST_animmode = 0x50,
  SCR_GAMECONST_animrelative = 0x51,
  SCR_GAMECONST_animscript = 0x52,
  SCR_GAMECONST_animscripted = 0x53,
  SCR_GAMECONST_animscriptedskiprestart = 0x54,
  SCR_GAMECONST_animtranslationscale = 0x55,
  SCR_GAMECONST_announcement = 0x56,
  SCR_GAMECONST_anyammoforweaponmodes = 0x57,
  SCR_GAMECONST_archived = 0x58,
  SCR_GAMECONST_archivetime = 0x59,
  SCR_GAMECONST_areallmissionsatscore = 0x5A,
  SCR_GAMECONST_arecontrolsfrozen = 0x5B,
  SCR_GAMECONST_aretexturesloaded = 0x5C,
  SCR_GAMECONST_array = 0x5D,
  SCR_GAMECONST_artilleryiconlocation = 0x5E,
  SCR_GAMECONST_asin = 0x5F,
  SCR_GAMECONST_assert = 0x60,
  SCR_GAMECONST_assertmsg = 0x61,
  SCR_GAMECONST_assists = 0x62,
  SCR_GAMECONST_atan = 0x63,
  SCR_GAMECONST_atdangerousnode = 0x64,
  SCR_GAMECONST_attach = 0x65,
  SCR_GAMECONST_attachpath = 0x66,
  SCR_GAMECONST_attachtodec20terminal = 0x67,
  SCR_GAMECONST_attackbuttonpressed = 0x68,
  SCR_GAMECONST_attacker = 0x69,
  SCR_GAMECONST_attackeraccuracy = 0x6A,
  SCR_GAMECONST_badplace_arc = 0x6B,
  SCR_GAMECONST_badplace_brush = 0x6C,
  SCR_GAMECONST_badplace_cylinder = 0x6D,
  SCR_GAMECONST_badplace_delete = 0x6E,
  SCR_GAMECONST_badplaceawareness = 0x6F,
  SCR_GAMECONST_ban = 0x70,
  SCR_GAMECONST_bbprint = 0x71,
  SCR_GAMECONST_beginlocationairstrikeselection = 0x72,
  SCR_GAMECONST_beginlocationartilleryselection = 0x73,
  SCR_GAMECONST_beginlocationcomlinkselection = 0x74,
  SCR_GAMECONST_beginlocationmortarselection = 0x75,
  SCR_GAMECONST_beginlocationnapalmselection = 0x76,
  SCR_GAMECONST_beginlocationselection = 0x77,
  SCR_GAMECONST_beginprediction = 0x78,
  SCR_GAMECONST_birthtime = 0x79,
  SCR_GAMECONST_bloodimpact = 0x7A,
  SCR_GAMECONST_boundswouldtelefrag = 0x7B,
  SCR_GAMECONST_box = 0x7C,
  SCR_GAMECONST_breakrope = 0x7D,
  SCR_GAMECONST_buildcurve = 0x7E,
  SCR_GAMECONST_bulletspread = 0x7F,
  SCR_GAMECONST_bullettrace = 0x80,
  SCR_GAMECONST_bullettracepassed = 0x81,
  SCR_GAMECONST_bullettracer = 0x82,
  SCR_GAMECONST_buttonpressed = 0x83,
  SCR_GAMECONST_bypasssledgehammer = 0x84,
  SCR_GAMECONST_calclookaheadpos = 0x85,
  SCR_GAMECONST_calcpathlength = 0x86,
  SCR_GAMECONST_calcplayeroptions = 0x87,
  SCR_GAMECONST_calcweaponoptions = 0x88,
  SCR_GAMECONST_cameraactivate = 0x89,
  SCR_GAMECONST_camerasetlookat = 0x8A,
  SCR_GAMECONST_camerasetposition = 0x8B,
  SCR_GAMECONST_canattackenemynode = 0x8C,
  SCR_GAMECONST_cancelaimove = 0x8D,
  SCR_GAMECONST_cancelgoal = 0x8E,
  SCR_GAMECONST_canflank = 0x8F,
  SCR_GAMECONST_canplaceriotshield = 0x90,
  SCR_GAMECONST_canplayerplaceturret = 0x91,
  SCR_GAMECONST_canplayerplacevehicle = 0x92,
  SCR_GAMECONST_cansee = 0x93,
  SCR_GAMECONST_canseepathgoal = 0x94,
  SCR_GAMECONST_canshoot = 0x95,
  SCR_GAMECONST_canshootenemy = 0x96,
  SCR_GAMECONST_canspawnturret = 0x97,
  SCR_GAMECONST_canuseturret = 0x98,
  SCR_GAMECONST_captures = 0x99,
  SCR_GAMECONST_carryturret = 0x9A,
  SCR_GAMECONST_ceil = 0x9B,
  SCR_GAMECONST_changeadvertisedstatus = 0x9C,
  SCR_GAMECONST_changefontscaleovertime = 0x9D,
  SCR_GAMECONST_changelevel = 0x9E,
  SCR_GAMECONST_changeseatbuttonpressed = 0x9F,
  SCR_GAMECONST_checkcoverexitposwithpath = 0xA0,
  SCR_GAMECONST_checkgrenadelaunch = 0xA1,
  SCR_GAMECONST_checkgrenadelaunchpos = 0xA2,
  SCR_GAMECONST_checkgrenadethrow = 0xA3,
  SCR_GAMECONST_checkgrenadethrowpos = 0xA4,
  SCR_GAMECONST_checkprone = 0xA5,
  SCR_GAMECONST_circle = 0xA6,
  SCR_GAMECONST_classname = 0xA7,
  SCR_GAMECONST_cleanupspawneddynents = 0xA8,
  SCR_GAMECONST_clearallcorpses = 0xA9,
  SCR_GAMECONST_clearalltextafterhudelem = 0xAA,
  SCR_GAMECONST_clearalternateaimparams = 0xAB,
  SCR_GAMECONST_clearanim = 0xAC,
  SCR_GAMECONST_clearanimlimited = 0xAD,
  SCR_GAMECONST_clearcenterpopups = 0xAE,
  SCR_GAMECONST_clearclientflag = 0xAF,
  SCR_GAMECONST_cleardamageindicator = 0xB0,
  SCR_GAMECONST_cleardefaultpitch = 0xB1,
  SCR_GAMECONST_clearendgame = 0xB2,
  SCR_GAMECONST_clearenemy = 0xB3,
  SCR_GAMECONST_clearentityowner = 0xB4,
  SCR_GAMECONST_clearentitytarget = 0xB5,
  SCR_GAMECONST_clearfixednodesafevolume = 0xB6,
  SCR_GAMECONST_cleargoalvolume = 0xB7,
  SCR_GAMECONST_cleargoalyaw = 0xB8,
  SCR_GAMECONST_cleargunnertarget = 0xB9,
  SCR_GAMECONST_clearlocalizedstrings = 0xBA,
  SCR_GAMECONST_clearlookatent = 0xBB,
  SCR_GAMECONST_clearmovehistory = 0xBC,
  SCR_GAMECONST_clearnearestenemyscrambler = 0xBD,
  SCR_GAMECONST_clearperks = 0xBE,
  SCR_GAMECONST_clearphysicsgravity = 0xBF,
  SCR_GAMECONST_clearpitchorient = 0xC0,
  SCR_GAMECONST_clearpopups = 0xC1,
  SCR_GAMECONST_clearpotentialthreat = 0xC2,
  SCR_GAMECONST_clearruntopos = 0xC3,
  SCR_GAMECONST_clearscriptenemy = 0xC4,
  SCR_GAMECONST_clearscriptgoal = 0xC5,
  SCR_GAMECONST_clearspawnpoints = 0xC6,
  SCR_GAMECONST_clearstowedweapon = 0xC7,
  SCR_GAMECONST_clearspawnpointsbaseweight = 0xC8,
  SCR_GAMECONST_cleartargetent = 0xC9,
  SCR_GAMECONST_cleartargetentity = 0xCA,
  SCR_GAMECONST_cleartargetyaw = 0xCB,
  SCR_GAMECONST_clearturrettarget = 0xCC,
  SCR_GAMECONST_clearvehgoalpos = 0xCD,
  SCR_GAMECONST_clearviewlockent = 0xCE,
  SCR_GAMECONST_clientannouncement = 0xCF,
  SCR_GAMECONST_clientclaimtrigger = 0xD0,
  SCR_GAMECONST_clientflag = 0xD1,
  SCR_GAMECONST_clienthassnapshot = 0xD2,
  SCR_GAMECONST_clientprint = 0xD3,
  SCR_GAMECONST_clientreleasetrigger = 0xD4,
  SCR_GAMECONST_clientsysregister = 0xD5,
  SCR_GAMECONST_clientsyssetstate = 0xD6,
  SCR_GAMECONST_cloneplayer = 0xD7,
  SCR_GAMECONST_closefile = 0xD8,
  SCR_GAMECONST_closeingamemenu = 0xD9,
  SCR_GAMECONST_closemainmenu = 0xDA,
  SCR_GAMECONST_closemenu = 0xDB,
  SCR_GAMECONST_closer = 0xDC,
  SCR_GAMECONST_codeplayloopedfx = 0xDD,
  SCR_GAMECONST_codespawn = 0xDE,
  SCR_GAMECONST_codespawnerforcespawn = 0xDF,
  SCR_GAMECONST_codespawnerspawn = 0xE0,
  SCR_GAMECONST_codespawnfx = 0xE1,
  SCR_GAMECONST_codespawnturret = 0xE2,
  SCR_GAMECONST_codespawnvehicle = 0xE3,
  SCR_GAMECONST_collisiontestpointsinbox = 0xE4,
  SCR_GAMECONST_collisiontestpointsincone = 0xE5,
  SCR_GAMECONST_collisiontestpointsincylinder = 0xE6,
  SCR_GAMECONST_collisiontestpointsinpill = 0xE7,
  SCR_GAMECONST_collisiontestpointsinsphere = 0xE8,
  SCR_GAMECONST_color = 0xE9,
  SCR_GAMECONST_combatmode = 0xEA,
  SCR_GAMECONST_combineangles = 0xEB,
  SCR_GAMECONST_commitsave = 0xEC,
  SCR_GAMECONST_compassscale = 0xED,
  SCR_GAMECONST_connectpaths = 0xEE,
  SCR_GAMECONST_coopinfo = 0xEF,
  SCR_GAMECONST_cos = 0xF0,
  SCR_GAMECONST_count = 0xF1,
  SCR_GAMECONST_createdynentandlaunch = 0xF2,
  SCR_GAMECONST_createprintchannel = 0xF3,
  SCR_GAMECONST_createrope = 0xF4,
  SCR_GAMECONST_createsoundrandom = 0xF5,
  SCR_GAMECONST_createstreamerhint = 0xF6,
  SCR_GAMECONST_createthreatbiasgroup = 0xF7,
  SCR_GAMECONST_createtrack = 0xF8,
  SCR_GAMECONST_cruncharray = 0xF9,
  SCR_GAMECONST_damageconetrace = 0xFA,
  SCR_GAMECONST_damagedir = 0xFB,
  SCR_GAMECONST_damagelocation = 0xFC,
  SCR_GAMECONST_damagemod = 0xFD,
  SCR_GAMECONST_damagetaken = 0xFE,
  SCR_GAMECONST_damageweapon = 0xFF,
  SCR_GAMECONST_damageyaw = 0x100,
  SCR_GAMECONST_deactivatechannelvolumes = 0x101,
  SCR_GAMECONST_deactivateclientexploder = 0x102,
  SCR_GAMECONST_deactivatereverb = 0x103,
  SCR_GAMECONST_deathfxname = 0x104,
  SCR_GAMECONST_deathfxsound = 0x105,
  SCR_GAMECONST_deathfxtag = 0x106,
  SCR_GAMECONST_deathmodel = 0x107,
  SCR_GAMECONST_deathquakeduration = 0x108,
  SCR_GAMECONST_deathquakeradius = 0x109,
  SCR_GAMECONST_deathquakescale = 0x10A,
  SCR_GAMECONST_deaths = 0x10B,
  SCR_GAMECONST_deathstreakactive = 0x10C,
  SCR_GAMECONST_debugstar = 0x10D,
  SCR_GAMECONST_defends = 0x10E,
  SCR_GAMECONST_defuses = 0x10F,
  SCR_GAMECONST_delayeddeath = 0x110,
  SCR_GAMECONST_delete = 0x111,
  SCR_GAMECONST_deletefakeent = 0x112,
  SCR_GAMECONST_deletefx = 0x113,
  SCR_GAMECONST_deletepathnode = 0x114,
  SCR_GAMECONST_deleterope = 0x115,
  SCR_GAMECONST_deployriotshield = 0x116,
  SCR_GAMECONST_depthinwater = 0x117,
  SCR_GAMECONST_desiredangle = 0x118,
  SCR_GAMECONST_destroy = 0x119,
  SCR_GAMECONST_destructiblehasnotify = 0x11A,
  SCR_GAMECONST_destructions = 0x11B,
  SCR_GAMECONST_detach = 0x11C,
  SCR_GAMECONST_detachall = 0x11D,
  SCR_GAMECONST_detachdec20terminal = 0x11E,
  SCR_GAMECONST_detonate = 0x11F,
  SCR_GAMECONST_devaddpitch = 0x120,
  SCR_GAMECONST_devaddroll = 0x121,
  SCR_GAMECONST_devaddyaw = 0x122,
  SCR_GAMECONST_diequietly = 0x123,
  SCR_GAMECONST_difftrack = 0x124,
  SCR_GAMECONST_difftrackangle = 0x125,
  SCR_GAMECONST_disableaimassist = 0x126,
  SCR_GAMECONST_disableclientlinkto = 0x127,
  SCR_GAMECONST_disabledeathstreak = 0x128,
  SCR_GAMECONST_disabledepthbuoyancyadjustments = 0x129,
  SCR_GAMECONST_disabledestructiblepieces = 0x12A,
  SCR_GAMECONST_disablegrenadesuicide = 0x12B,
  SCR_GAMECONST_disablegrenadetouchdamage = 0x12C,
  SCR_GAMECONST_disablegunnerfiring = 0x12D,
  SCR_GAMECONST_disableimpactmarks = 0x12E,
  SCR_GAMECONST_disableinvulnerability = 0x12F,
  SCR_GAMECONST_disableoffhandweapons = 0x130,
  SCR_GAMECONST_disableturretdismount = 0x131,
  SCR_GAMECONST_disableusability = 0x132,
  SCR_GAMECONST_disableweaponcycling = 0x133,
  SCR_GAMECONST_disableweaponfire = 0x134,
  SCR_GAMECONST_disableweaponreload = 0x135,
  SCR_GAMECONST_disableweapons = 0x136,
  SCR_GAMECONST_disallowvehicleusage = 0x137,
  SCR_GAMECONST_disconnectpaths = 0x138,
  SCR_GAMECONST_displaykillstreak = 0x139,
  SCR_GAMECONST_distance = 0x13A,
  SCR_GAMECONST_distance2d = 0x13B,
  SCR_GAMECONST_distance2dsquared = 0x13C,
  SCR_GAMECONST_distancesquared = 0x13D,
  SCR_GAMECONST_divetoprone = 0x13E,
  SCR_GAMECONST_dmg = 0x13F,
  SCR_GAMECONST_dochallengecompleteui = 0x140,
  SCR_GAMECONST_dointelacquiredui = 0x141,
  SCR_GAMECONST_dodamage = 0x142,
  SCR_GAMECONST_doingambush = 0x143,
  SCR_GAMECONST_dontavoidplayer = 0x144,
  SCR_GAMECONST_dontinterpolate = 0x145,
  SCR_GAMECONST_dosplevelwrapup = 0x146,
  SCR_GAMECONST_downs = 0x147,
  SCR_GAMECONST_drawcompassfriendlies = 0x148,
  SCR_GAMECONST_drawcurve = 0x149,
  SCR_GAMECONST_drawnode = 0x14A,
  SCR_GAMECONST_drawoncompass = 0x14B,
  SCR_GAMECONST_drawtrajectory = 0x14C,
  SCR_GAMECONST_drivebysoundtime0 = 0x14D,
  SCR_GAMECONST_drivebysoundtime1 = 0x14E,
  SCR_GAMECONST_drivepath = 0x14F,
  SCR_GAMECONST_dropitem = 0x150,
  SCR_GAMECONST_dropnodetofloor = 0x151,
  SCR_GAMECONST_dropscavengeritem = 0x152,
  SCR_GAMECONST_dropweapon = 0x153,
  SCR_GAMECONST_dumpanims = 0x154,
  SCR_GAMECONST_dumphistory = 0x155,
  SCR_GAMECONST_earthquake = 0x156,
  SCR_GAMECONST_eflags = 0x157,
  SCR_GAMECONST_eflags2 = 0x158,
  SCR_GAMECONST_enableaimassist = 0x159,
  SCR_GAMECONST_enablealldestructiblepieces = 0x15A,
  SCR_GAMECONST_enableclientlinkto = 0x15B,
  SCR_GAMECONST_enabledeathshield = 0x15C,
  SCR_GAMECONST_enabledeathstreak = 0x15D,
  SCR_GAMECONST_enablegrenadesuicide = 0x15E,
  SCR_GAMECONST_enablegrenadetouchdamage = 0x15F,
  SCR_GAMECONST_enablehealthshield = 0x160,
  SCR_GAMECONST_enableimpactmarks = 0x161,
  SCR_GAMECONST_enableinfluencer = 0x162,
  SCR_GAMECONST_enableinvulnerability = 0x163,
  SCR_GAMECONST_enablelinkto = 0x164,
  SCR_GAMECONST_enableoccluder = 0x165,
  SCR_GAMECONST_enableoffhandweapons = 0x166,
  SCR_GAMECONST_enablereactionsystem = 0x167,
  SCR_GAMECONST_enablesledgehammer = 0x168,
  SCR_GAMECONST_enableturretdismount = 0x169,
  SCR_GAMECONST_enableusability = 0x16A,
  SCR_GAMECONST_enablewatersheetfx = 0x16B,
  SCR_GAMECONST_enableweaponcycling = 0x16C,
  SCR_GAMECONST_enableweaponfire = 0x16D,
  SCR_GAMECONST_enableweaponreload = 0x16E,
  SCR_GAMECONST_enableweapons = 0x16F,
  SCR_GAMECONST_endlobby = 0x170,
  SCR_GAMECONST_endlocationselection = 0x171,
  SCR_GAMECONST_endparty = 0x172,
  SCR_GAMECONST_endprediction = 0x173,
  SCR_GAMECONST_enemy = 0x174,
  SCR_GAMECONST_engagemaxdist = 0x175,
  SCR_GAMECONST_engagemaxfalloffdist = 0x176,
  SCR_GAMECONST_engagemindist = 0x177,
  SCR_GAMECONST_engageminfalloffdist = 0x178,
  SCR_GAMECONST_enterprone = 0x179,
  SCR_GAMECONST_entgetsweaponfirenotification = 0x17A,
  SCR_GAMECONST_entsearch = 0x17B,
  SCR_GAMECONST_entyawoverrideslinkyaw = 0x17C,
  SCR_GAMECONST_execdevgui = 0x17D,
  SCR_GAMECONST_exhaustfxname = 0x17E,
  SCR_GAMECONST_exitlevel = 0x17F,
  SCR_GAMECONST_exitprone = 0x180,
  SCR_GAMECONST_exposedduration = 0x181,
  SCR_GAMECONST_extracamconfig = 0x182,
  SCR_GAMECONST_facemotion = 0x183,
  SCR_GAMECONST_fadeovertime = 0x184,
  SCR_GAMECONST_fadewhentargeted = 0x185,
  SCR_GAMECONST_fastrestart = 0x186,
  SCR_GAMECONST_favoriteenemy = 0x187,
  SCR_GAMECONST_ffateam = 0x188,
  SCR_GAMECONST_fgetarg = 0x189,
  SCR_GAMECONST_finalaccuracy = 0x18A,
  SCR_GAMECONST_findanimbyname = 0x18B,
  SCR_GAMECONST_findbestcovernode = 0x18C,
  SCR_GAMECONST_findbestcovernodes = 0x18D,
  SCR_GAMECONST_findcovernode = 0x18E,
  SCR_GAMECONST_findcovernodeatlocation = 0x18F,
  SCR_GAMECONST_findnearbycovernode = 0x190,
  SCR_GAMECONST_findpath = 0x191,
  SCR_GAMECONST_findreacquiredirectpath = 0x192,
  SCR_GAMECONST_findreacquirenode = 0x193,
  SCR_GAMECONST_findreacquireproximatepath = 0x194,
  SCR_GAMECONST_findshufflecovernode = 0x195,
  SCR_GAMECONST_finishactordamage = 0x196,
  SCR_GAMECONST_finishplayerdamage = 0x197,
  SCR_GAMECONST_finishvehicledamage = 0x198,
  SCR_GAMECONST_finishvehicleradiusdamage = 0x199,
  SCR_GAMECONST_fire = 0x19A,
  SCR_GAMECONST_firegrenadelauncher = 0x19B,
  SCR_GAMECONST_firegunnerweapon = 0x19C,
  SCR_GAMECONST_fireweapon = 0x19D,
  SCR_GAMECONST_fixednode = 0x19E,
  SCR_GAMECONST_fixednodesaferadius = 0x19F,
  SCR_GAMECONST_flagenemyunattackable = 0x1A0,
  SCR_GAMECONST_flashbangimmunity = 0x1A1,
  SCR_GAMECONST_float = 0x1A2,
  SCR_GAMECONST_floatlonger = 0x1A3,
  SCR_GAMECONST_floor = 0x1A4,
  SCR_GAMECONST_flushgump = 0x1A5,
  SCR_GAMECONST_followmax = 0x1A6,
  SCR_GAMECONST_followmin = 0x1A7,
  SCR_GAMECONST_font = 0x1A8,
  SCR_GAMECONST_font3duseglowcolor = 0x1A9,
  SCR_GAMECONST_fontscale = 0x1AA,
  SCR_GAMECONST_fontstyle = 0x1AB,
  SCR_GAMECONST_fontstyle3d = 0x1AC,
  SCR_GAMECONST_forcebuoyancy = 0x1AD,
  SCR_GAMECONST_forcedelete = 0x1AE,
  SCR_GAMECONST_forcegamemodemappings = 0x1AF,
  SCR_GAMECONST_setrimintensity = 0x1B0,
  SCR_GAMECONST_setgenericscenevalue = 0x1B1,
  SCR_GAMECONST_forcelevelend = 0x1B2,
  SCR_GAMECONST_forceragdollimmediate = 0x1B3,
  SCR_GAMECONST_forceteleport = 0x1B4,
  SCR_GAMECONST_forceviewmodelanimation = 0x1B5,
  SCR_GAMECONST_foreground = 0x1B6,
  SCR_GAMECONST_fovcosine = 0x1B7,
  SCR_GAMECONST_fovcosinebusy = 0x1B8,
  SCR_GAMECONST_fprintfields = 0x1B9,
  SCR_GAMECONST_fprintln = 0x1BA,
  SCR_GAMECONST_fragbuttonpressed = 0x1BB,
  SCR_GAMECONST_freadln = 0x1BC,
  SCR_GAMECONST_freecurve = 0x1BD,
  SCR_GAMECONST_freehelicopter = 0x1BE,
  SCR_GAMECONST_freevehicle = 0x1BF,
  SCR_GAMECONST_freezecontrols = 0x1C0,
  SCR_GAMECONST_freezecontrolsallowlook = 0x1C1,
  SCR_GAMECONST_gamehistorystartmatch = 0x1C2,
  SCR_GAMECONST_gamemodeismode = 0x1C3,
  SCR_GAMECONST_gamemodeisusingstats = 0x1C4,
  SCR_GAMECONST_gamemodeisusingxp = 0x1C5,
  SCR_GAMECONST_gasbuttonpressed = 0x1C6,
  SCR_GAMECONST_getaiarray = 0x1C7,
  SCR_GAMECONST_getaicount = 0x1C8,
  SCR_GAMECONST_getailimit = 0x1C9,
  SCR_GAMECONST_getaispeciesarray = 0x1CA,
  SCR_GAMECONST_getaitriggerflags = 0x1CB,
  SCR_GAMECONST_getaivelocity = 0x1CC,
  SCR_GAMECONST_getallnodes = 0x1CD,
  SCR_GAMECONST_getallvehiclenodes = 0x1CE,
  SCR_GAMECONST_getammocount = 0x1CF,
  SCR_GAMECONST_getangledelta = 0x1D0,
  SCR_GAMECONST_getanglestolikelyenemypath = 0x1D1,
  SCR_GAMECONST_getangularvelocity = 0x1D2,
  SCR_GAMECONST_getanimassettype = 0x1D3,
  SCR_GAMECONST_getanimcurrframecount = 0x1D4,
  SCR_GAMECONST_getanimdumpmodel = 0x1D5,
  SCR_GAMECONST_getanimdumptotaltime = 0x1D6,
  SCR_GAMECONST_getanimdumptree = 0x1D7,
  SCR_GAMECONST_getanimframecount = 0x1D8,
  SCR_GAMECONST_getanimlength = 0x1D9,
  SCR_GAMECONST_getanimstate = 0x1DA,
  SCR_GAMECONST_getanimstatecategory = 0x1DB,
  SCR_GAMECONST_getanimtime = 0x1DC,
  SCR_GAMECONST_getanimvalue = 0x1DD,
  SCR_GAMECONST_getanynodearray = 0x1DE,
  SCR_GAMECONST_getarraykeys = 0x1DF,
  SCR_GAMECONST_getassignedteam = 0x1E0,
  SCR_GAMECONST_getatrloaded = 0x1E1,
  SCR_GAMECONST_getattachignorecollision = 0x1E2,
  SCR_GAMECONST_getattachmentindex = 0x1E3,
  SCR_GAMECONST_getattachmodelname = 0x1E4,
  SCR_GAMECONST_getattachpos = 0x1E5,
  SCR_GAMECONST_getattachsize = 0x1E6,
  SCR_GAMECONST_getattachtagname = 0x1E7,
  SCR_GAMECONST_getbaseweaponitemindex = 0x1E8,
  SCR_GAMECONST_getbinklength = 0x1E9,
  SCR_GAMECONST_getbottomarc = 0x1EA,
  SCR_GAMECONST_getbrake = 0x1EB,
  SCR_GAMECONST_getbrushmodelcenter = 0x1EC,
  SCR_GAMECONST_getcamangles = 0x1ED,
  SCR_GAMECONST_getcampos = 0x1EE,
  SCR_GAMECONST_getcentroid = 0x1EF,
  SCR_GAMECONST_getcinematictimeremaining = 0x1F0,
  SCR_GAMECONST_getclientuivisibilityflag = 0x1F1,
  SCR_GAMECONST_getclosestanimdumpframefortime = 0x1F2,
  SCR_GAMECONST_getclosestenemysqdist = 0x1F3,
  SCR_GAMECONST_getcommandfromkey = 0x1F4,
  SCR_GAMECONST_getcontractname = 0x1F5,
  SCR_GAMECONST_getcontractrequiredcount = 0x1F6,
  SCR_GAMECONST_getcontractrequirements = 0x1F7,
  SCR_GAMECONST_getcontractresetconditions = 0x1F8,
  SCR_GAMECONST_getcontractrewardcp = 0x1F9,
  SCR_GAMECONST_getcontractrewardxp = 0x1FA,
  SCR_GAMECONST_getcontractstatname = 0x1FB,
  SCR_GAMECONST_getcontractstattype = 0x1FC,
  SCR_GAMECONST_getcorpseanim = 0x1FD,
  SCR_GAMECONST_getcorpsearray = 0x1FE,
  SCR_GAMECONST_getcountertotal = 0x1FF,
  SCR_GAMECONST_getcovernode = 0x200,
  SCR_GAMECONST_getcovernodearray = 0x201,
  SCR_GAMECONST_getcurrentoffhand = 0x202,
  SCR_GAMECONST_getcurrentweapon = 0x203,
  SCR_GAMECONST_getcurrentweaponclipammo = 0x204,
  SCR_GAMECONST_getcurrentweaponincludingmelee = 0x205,
  SCR_GAMECONST_getcurve = 0x206,
  SCR_GAMECONST_getcurvecurpos = 0x207,
  SCR_GAMECONST_getcurveserverpos = 0x208,
  SCR_GAMECONST_getcustomclassloadoutitem = 0x209,
  SCR_GAMECONST_getcustomclassmodifier = 0x20A,
  SCR_GAMECONST_getcycleoriginoffset = 0x20B,
  SCR_GAMECONST_getdate = 0x20C,
  SCR_GAMECONST_getdebugdvar = 0x20D,
  SCR_GAMECONST_getdebugdvarfloat = 0x20E,
  SCR_GAMECONST_getdebugdvarint = 0x20F,
  SCR_GAMECONST_getdebugeye = 0x210,
  SCR_GAMECONST_getdefaultclassslot = 0x211,
  SCR_GAMECONST_getclassindexfromname = 0x212,
  SCR_GAMECONST_getdeltaturnyaw = 0x213,
  SCR_GAMECONST_getdemofileid = 0x214,
  SCR_GAMECONST_getdepthoffield_farblur = 0x215,
  SCR_GAMECONST_getdepthoffield_farend = 0x216,
  SCR_GAMECONST_getdepthoffield_farstart = 0x217,
  SCR_GAMECONST_getdepthoffield_nearblur = 0x218,
  SCR_GAMECONST_getdepthoffield_nearend = 0x219,
  SCR_GAMECONST_getdepthoffield_nearstart = 0x21A,
  SCR_GAMECONST_getdestructibledefs = 0x21B,
  SCR_GAMECONST_getdestructiblename = 0x21C,
  SCR_GAMECONST_getdifficulty = 0x21D,
  SCR_GAMECONST_getdronemodel = 0x21E,
  SCR_GAMECONST_getdroppedweapons = 0x21F,
  SCR_GAMECONST_getdroptofloorposition = 0x220,
  SCR_GAMECONST_getdstat = 0x221,
  SCR_GAMECONST_getdstatarraycount = 0x222,
  SCR_GAMECONST_getdumpcmdsfortimedelta = 0x223,
  SCR_GAMECONST_getdvar = 0x224,
  SCR_GAMECONST_getdvarcoloralpha = 0x225,
  SCR_GAMECONST_getdvarcolorblue = 0x226,
  SCR_GAMECONST_getdvarcolorgreen = 0x227,
  SCR_GAMECONST_getdvarcolorred = 0x228,
  SCR_GAMECONST_getdvarfloat = 0x229,
  SCR_GAMECONST_getdvarint = 0x22A,
  SCR_GAMECONST_getdvarvector = 0x22B,
  SCR_GAMECONST_getdynent = 0x22C,
  SCR_GAMECONST_getdynentarray = 0x22D,
  SCR_GAMECONST_getdynmodels = 0x22E,
  SCR_GAMECONST_getenemyinfo = 0x22F,
  SCR_GAMECONST_getenemyscrambleramount = 0x230,
  SCR_GAMECONST_getenemysqdist = 0x231,
  SCR_GAMECONST_getent = 0x232,
  SCR_GAMECONST_getentarray = 0x233,
  SCR_GAMECONST_getentbynum = 0x234,
  SCR_GAMECONST_getentitynumber = 0x235,
  SCR_GAMECONST_getentitytype = 0x236,
  SCR_GAMECONST_getentnum = 0x237,
  SCR_GAMECONST_getextracamstatic = 0x238,
  SCR_GAMECONST_geteye = 0x239,
  SCR_GAMECONST_geteyeapprox = 0x23A,
  SCR_GAMECONST_getfirstarraykey = 0x23B,
  SCR_GAMECONST_getfixednodesafevolume = 0x23C,
  SCR_GAMECONST_getflashbangedstrength = 0x23D,
  SCR_GAMECONST_getfogsettings = 0x23E,
  SCR_GAMECONST_getfootstepstrings = 0x23F,
  SCR_GAMECONST_getfractionmaxammo = 0x240,
  SCR_GAMECONST_getfractionstartammo = 0x241,
  SCR_GAMECONST_getfriendlyscrambleramount = 0x242,
  SCR_GAMECONST_getfxvisibility = 0x243,
  SCR_GAMECONST_getgametypeenumfromname = 0x244,
  SCR_GAMECONST_getgametypesetting = 0x245,
  SCR_GAMECONST_getgoalspeedmph = 0x246,
  SCR_GAMECONST_getgoalvolume = 0x247,
  SCR_GAMECONST_getgridfrompos = 0x248,
  SCR_GAMECONST_getgroundenttype = 0x249,
  SCR_GAMECONST_getguid = 0x24A,
  SCR_GAMECONST_getgunneranimpitch = 0x24B,
  SCR_GAMECONST_getgunneranimyaw = 0x24C,
  SCR_GAMECONST_getgunnertargetent = 0x24D,
  SCR_GAMECONST_getgunnertargetvec = 0x24E,
  SCR_GAMECONST_getgvrule = 0x24F,
  SCR_GAMECONST_gethandbrake = 0x250,
  SCR_GAMECONST_gethelidamagestate = 0x251,
  SCR_GAMECONST_getheliheightlock = 0x252,
  SCR_GAMECONST_getheliheightlockheight = 0x253,
  SCR_GAMECONST_gethitenttype = 0x254,
  SCR_GAMECONST_gethityaw = 0x255,
  SCR_GAMECONST_getinkillcam = 0x256,
  SCR_GAMECONST_getinventoryweapon = 0x257,
  SCR_GAMECONST_getitemarray = 0x258,
  SCR_GAMECONST_getitemattachment = 0x259,
  SCR_GAMECONST_getitemattachmentallocationcost = 0x25A,
  SCR_GAMECONST_getitemgroupfromitemindex = 0x25B,
  SCR_GAMECONST_getkeybinding = 0x25C,
  SCR_GAMECONST_getknownlength = 0x25D,
  SCR_GAMECONST_getleftarc = 0x25E,
  SCR_GAMECONST_getlevelalias = 0x25F,
  SCR_GAMECONST_getlightcolor = 0x260,
  SCR_GAMECONST_getlightexponent = 0x261,
  SCR_GAMECONST_getlightfovinner = 0x262,
  SCR_GAMECONST_getlightfovouter = 0x263,
  SCR_GAMECONST_getlightintensity = 0x264,
  SCR_GAMECONST_getlightradius = 0x265,
  SCR_GAMECONST_getlinkedent = 0x266,
  SCR_GAMECONST_getloadoutitem = 0x267,
  SCR_GAMECONST_getlocalclientangles = 0x268,
  SCR_GAMECONST_getlocalclientdriver = 0x269,
  SCR_GAMECONST_getlocalclienteyepos = 0x26A,
  SCR_GAMECONST_getlocalclienthealth = 0x26B,
  SCR_GAMECONST_getlocalclientmaxhealth = 0x26C,
  SCR_GAMECONST_getlocalclientnumber = 0x26D,
  SCR_GAMECONST_getlocalclientpos = 0x26E,
  SCR_GAMECONST_getlocalgunnerangles = 0x26F,
  SCR_GAMECONST_getlocalplayer = 0x270,
  SCR_GAMECONST_getlocalplayers = 0x271,
  SCR_GAMECONST_getlocalplayerteam = 0x272,
  SCR_GAMECONST_getlocalprofilearrayint = 0x273,
  SCR_GAMECONST_getlocalprofilefloat = 0x274,
  SCR_GAMECONST_getlocalprofileint = 0x275,
  SCR_GAMECONST_getlocalprofilestring = 0x276,
  SCR_GAMECONST_getlockonradius = 0x277,
  SCR_GAMECONST_getlockonspeed = 0x278,
  SCR_GAMECONST_getlookaheaddir = 0x279,
  SCR_GAMECONST_getlookaheaddist = 0x27A,
  SCR_GAMECONST_getmapcenter = 0x27B,
  SCR_GAMECONST_getmapsundirection = 0x27C,
  SCR_GAMECONST_getmapsunlight = 0x27D,
  SCR_GAMECONST_getmaxactivecontracts = 0x27E,
  SCR_GAMECONST_getmaxlocalclients = 0x27F,
  SCR_GAMECONST_getactivelocalclients = 0x280,
  SCR_GAMECONST_getmaxreversespeed = 0x281,
  SCR_GAMECONST_getmaxspeed = 0x282,
  SCR_GAMECONST_getmaxvehicles = 0x283,
  SCR_GAMECONST_getmiscmodels = 0x284,
  SCR_GAMECONST_getmotionangle = 0x285,
  SCR_GAMECONST_getmovedelta = 0x286,
  SCR_GAMECONST_getmovehistoryaverage = 0x287,
  SCR_GAMECONST_getnegotiationendnode = 0x288,
  SCR_GAMECONST_getnegotiationstartnode = 0x289,
  SCR_GAMECONST_getnextarraykey = 0x28A,
  SCR_GAMECONST_getnode = 0x28B,
  SCR_GAMECONST_getnodearray = 0x28C,
  SCR_GAMECONST_getnodearraysorted = 0x28D,
  SCR_GAMECONST_getnodeowner = 0x28E,
  SCR_GAMECONST_getnodesinradius = 0x28F,
  SCR_GAMECONST_getnodesinradiussorted = 0x290,
  SCR_GAMECONST_getnormalhealth = 0x291,
  SCR_GAMECONST_getnormalizedcameramovement = 0x292,
  SCR_GAMECONST_getnormalizedmovement = 0x293,
  SCR_GAMECONST_getnorthyaw = 0x294,
  SCR_GAMECONST_getnotetracksindelta = 0x295,
  SCR_GAMECONST_getnotetracktimes = 0x296,
  SCR_GAMECONST_getnumchallengescomplete = 0x297,
  SCR_GAMECONST_getnumconnectedplayers = 0x298,
  SCR_GAMECONST_getnumexpectedplayers = 0x299,
  SCR_GAMECONST_getnumgvrules = 0x29A,
  SCR_GAMECONST_getnumparts = 0x29B,
  SCR_GAMECONST_getnumrestarts = 0x29C,
  SCR_GAMECONST_getnumvehicles = 0x29D,
  SCR_GAMECONST_getoccupantseat = 0x29E,
  SCR_GAMECONST_getoffhandsecondaryclass = 0x29F,
  SCR_GAMECONST_getorientmode = 0x2A0,
  SCR_GAMECONST_getorigin = 0x2A1,
  SCR_GAMECONST_getowner = 0x2A2,
  SCR_GAMECONST_getparententity = 0x2A3,
  SCR_GAMECONST_getpartname = 0x2A4,
  SCR_GAMECONST_getpathlength = 0x2A5,
  SCR_GAMECONST_getperfectinfo = 0x2A6,
  SCR_GAMECONST_getperks = 0x2A7,
  SCR_GAMECONST_getpersistentprofilevar = 0x2A8,
  SCR_GAMECONST_getphysacceleration = 0x2A9,
  SCR_GAMECONST_getplaybacktime = 0x2AA,
  SCR_GAMECONST_getplayerangles = 0x2AB,
  SCR_GAMECONST_getplayercamerapos = 0x2AC,
  SCR_GAMECONST_getplayerconnectionstate = 0x2AD,
  SCR_GAMECONST_getplayers = 0x2AE,
  SCR_GAMECONST_getplayerspawnid = 0x2AF,
  SCR_GAMECONST_getplayerviewheight = 0x2B0,
  SCR_GAMECONST_getpointinbounds = 0x2B1,
  SCR_GAMECONST_getreacquirenode = 0x2B2,
  SCR_GAMECONST_getreactionevent = 0x2B3,
  SCR_GAMECONST_getrealtime = 0x2B4,
  SCR_GAMECONST_getreffromitemindex = 0x2B5,
  SCR_GAMECONST_getreflectionlocs = 0x2B6,
  SCR_GAMECONST_getreflectionorigin = 0x2B7,
  SCR_GAMECONST_getretrievableweapons = 0x2B8,
  SCR_GAMECONST_getrightarc = 0x2B9,
  SCR_GAMECONST_getrope = 0x2BA,
  SCR_GAMECONST_getscoremultiplier = 0x2BB,
  SCR_GAMECONST_getscriptbrake = 0x2BC,
  SCR_GAMECONST_getscriptmoverarray = 0x2BD,
  SCR_GAMECONST_getseatfiringangles = 0x2BE,
  SCR_GAMECONST_getseatfiringorigin = 0x2BF,
  SCR_GAMECONST_getseatoccupant = 0x2C0,
  SCR_GAMECONST_getservertime = 0x2C1,
  SCR_GAMECONST_getservervolumetricfogdensity = 0x2C2,
  SCR_GAMECONST_getsessstat = 0x2C3,
  SCR_GAMECONST_getsessstatarraycount = 0x2C4,
  SCR_GAMECONST_setsessstat = 0x2C5,
  SCR_GAMECONST_addsessstat = 0x2C6,
  SCR_GAMECONST_getshootatpos = 0x2C7,
  SCR_GAMECONST_getsnapshotindexarray = 0x2C8,
  SCR_GAMECONST_getsortedspawnpoints = 0x2C9,
  SCR_GAMECONST_getsoundcount = 0x2CA,
  SCR_GAMECONST_getsoundname = 0x2CB,
  SCR_GAMECONST_getspawnerarray = 0x2CC,
  SCR_GAMECONST_getspawnerteamarray = 0x2CD,
  SCR_GAMECONST_getspeed = 0x2CE,
  SCR_GAMECONST_getspeedmph = 0x2CF,
  SCR_GAMECONST_getstance = 0x2D0,
  SCR_GAMECONST_getstartangles = 0x2D1,
  SCR_GAMECONST_getstartorigin = 0x2D2,
  SCR_GAMECONST_getstarttime = 0x2D3,
  SCR_GAMECONST_getsteering = 0x2D4,
  SCR_GAMECONST_getsubstr = 0x2D5,
  SCR_GAMECONST_getsurfacestrings = 0x2D6,
  SCR_GAMECONST_findstaticmodelindex = 0x2D7,
  SCR_GAMECONST_hidestaticmodel = 0x2D8,
  SCR_GAMECONST_unhidestaticmodel = 0x2D9,
  SCR_GAMECONST_getsystemtime = 0x2DA,
  SCR_GAMECONST_gettagangles = 0x2DB,
  SCR_GAMECONST_gettagforwardvector = 0x2DC,
  SCR_GAMECONST_gettagorigin = 0x2DD,
  SCR_GAMECONST_gettargetentity = 0x2DE,
  SCR_GAMECONST_gettargetorigin = 0x2DF,
  SCR_GAMECONST_getteam = 0x2E0,
  SCR_GAMECONST_getteamplayersalive = 0x2E1,
  SCR_GAMECONST_getteamsatellite = 0x2E2,
  SCR_GAMECONST_getteamscore = 0x2E3,
  SCR_GAMECONST_getteamspyplane = 0x2E4,
  SCR_GAMECONST_gettextwidth = 0x2E5,
  SCR_GAMECONST_getthreat = 0x2E6,
  SCR_GAMECONST_getthreatbias = 0x2E7,
  SCR_GAMECONST_getthreatbiasgroup = 0x2E8,
  SCR_GAMECONST_getthrottle = 0x2E9,
  SCR_GAMECONST_gettime = 0x2EA,
  SCR_GAMECONST_gettimescale = 0x2EB,
  SCR_GAMECONST_gettoparc = 0x2EC,
  SCR_GAMECONST_gettotalammo = 0x2ED,
  SCR_GAMECONST_getturret = 0x2EE,
  SCR_GAMECONST_getturretheatvalue = 0x2EF,
  SCR_GAMECONST_getturretowner = 0x2F0,
  SCR_GAMECONST_getturretarclimits = 0x2F1,
  SCR_GAMECONST_getturrettarget = 0x2F2,
  SCR_GAMECONST_getvalidcoverpeekouts = 0x2F3,
  SCR_GAMECONST_getvehiclearray = 0x2F4,
  SCR_GAMECONST_getvehicleavoidance = 0x2F5,
  SCR_GAMECONST_getvehiclehealth = 0x2F6,
  SCR_GAMECONST_getvehiclenode = 0x2F7,
  SCR_GAMECONST_getvehiclenodearray = 0x2F8,
  SCR_GAMECONST_getvehicleoccupied = 0x2F9,
  SCR_GAMECONST_getvehicleowner = 0x2FA,
  SCR_GAMECONST_getvehiclespawnerarray = 0x2FB,
  SCR_GAMECONST_getvehicletreadfxarray = 0x2FC,
  SCR_GAMECONST_getvehicletriggerflags = 0x2FD,
  SCR_GAMECONST_getvehoccupants = 0x2FE,
  SCR_GAMECONST_getvelocity = 0x2FF,
  SCR_GAMECONST_getviewmodel = 0x300,
  SCR_GAMECONST_getvisionsetnaked = 0x301,
  SCR_GAMECONST_getwagergametypelist = 0x302,
  SCR_GAMECONST_getwatcherweapons = 0x303,
  SCR_GAMECONST_getwaterheight = 0x304,
  SCR_GAMECONST_getweaponaccuracy = 0x305,
  SCR_GAMECONST_getweaponammoclip = 0x306,
  SCR_GAMECONST_getweaponammostock = 0x307,
  SCR_GAMECONST_getweaponclipmodel = 0x308,
  SCR_GAMECONST_getweaponfiresound = 0x309,
  SCR_GAMECONST_getweaponfiresoundplayer = 0x30A,
  SCR_GAMECONST_getweaponforwarddir = 0x30B,
  SCR_GAMECONST_getweaponfusetime = 0x30C,
  SCR_GAMECONST_getweaponindexfromname = 0x30D,
  SCR_GAMECONST_getweaponmaxdamage = 0x30E,
  SCR_GAMECONST_getweaponmaxdamagerange = 0x30F,
  SCR_GAMECONST_getweaponmindamage = 0x310,
  SCR_GAMECONST_getweaponmindamagerange = 0x311,
  SCR_GAMECONST_getweaponmodel = 0x312,
  SCR_GAMECONST_getweaponmuzzlepoint = 0x313,
  SCR_GAMECONST_getweaponpickupsound = 0x314,
  SCR_GAMECONST_getweaponpickupsoundplayer = 0x315,
  SCR_GAMECONST_getweaponposfrac = 0x316,
  SCR_GAMECONST_getweaponprojexplosionsound = 0x317,
  SCR_GAMECONST_getweaponrenderoptions = 0x318,
  SCR_GAMECONST_getweaponslist = 0x319,
  SCR_GAMECONST_getweaponslistprimaries = 0x31A,
  SCR_GAMECONST_getweaponstowedmodel = 0x31B,
  SCR_GAMECONST_getwheelsurface = 0x31C,
  SCR_GAMECONST_getworldfogscriptid = 0x31D,
  SCR_GAMECONST_getxuid = 0x31E,
  SCR_GAMECONST_gib = 0x31F,
  SCR_GAMECONST_giveachievement = 0x320,
  SCR_GAMECONST_givegamerpicture = 0x321,
  SCR_GAMECONST_givemaxammo = 0x322,
  SCR_GAMECONST_givenextbaseweapon = 0x323,
  SCR_GAMECONST_givestartammo = 0x324,
  SCR_GAMECONST_giveweapon = 0x325,
  SCR_GAMECONST_giveweaponnextattachment = 0x326,
  SCR_GAMECONST_glassradiusdamage = 0x327,
  SCR_GAMECONST_glowalpha = 0x328,
  SCR_GAMECONST_glowcolor = 0x329,
  SCR_GAMECONST_goalangle = 0x32A,
  SCR_GAMECONST_goalheight = 0x32B,
  SCR_GAMECONST_goalpos = 0x32C,
  SCR_GAMECONST_goalradius = 0x32D,
  SCR_GAMECONST_goodshootpos = 0x32E,
  SCR_GAMECONST_goodshootposvalid = 0x32F,
  SCR_GAMECONST_gpr = 0x330,
  SCR_GAMECONST_grenade = 0x331,
  SCR_GAMECONST_grenadeammo = 0x332,
  SCR_GAMECONST_grenadeawareness = 0x333,
  SCR_GAMECONST_grenadeawarness = 0x334,
  SCR_GAMECONST_grenadeexplosioneffect = 0x335,
  SCR_GAMECONST_grenadethrowback = 0x336,
  SCR_GAMECONST_grenadeweapon = 0x337,
  SCR_GAMECONST_groundentity = 0x338,
  SCR_GAMECONST_groundsurfacetype = 0x339,
  SCR_GAMECONST_groundtrace = 0x33A,
  SCR_GAMECONST_groundtype = 0x33B,
  SCR_GAMECONST_gunblockedbywall = 0x33C,
  SCR_GAMECONST_hasagrenadepulledback = 0x33D,
  SCR_GAMECONST_hasallintel = 0x33E,
  SCR_GAMECONST_hasanimtree = 0x33F,
  SCR_GAMECONST_hascollectible = 0x340,
  SCR_GAMECONST_hascompletedallgamechallenges = 0x341,
  SCR_GAMECONST_hasdobj = 0x342,
  SCR_GAMECONST_hasdstats = 0x343,
  SCR_GAMECONST_haspath = 0x344,
  SCR_GAMECONST_hasperk = 0x345,
  SCR_GAMECONST_hassatellite = 0x346,
  SCR_GAMECONST_hasscriptgoal = 0x347,
  SCR_GAMECONST_hasspyplane = 0x348,
  SCR_GAMECONST_hastacticalmaskoverlay = 0x349,
  SCR_GAMECONST_hasusedweapon = 0x34A,
  SCR_GAMECONST_hasweapon = 0x34B,
  SCR_GAMECONST_headicon = 0x34C,
  SCR_GAMECONST_headiconteam = 0x34D,
  SCR_GAMECONST_headshots = 0x34E,
  SCR_GAMECONST_health = 0x34F,
  SCR_GAMECONST_healthdefault = 0x350,
  SCR_GAMECONST_healthmax = 0x351,
  SCR_GAMECONST_healthmin = 0x352,
  SCR_GAMECONST_height = 0x353,
  SCR_GAMECONST_heliheightlockoffset = 0x354,
  SCR_GAMECONST_hide = 0x355,
  SCR_GAMECONST_hidepart = 0x356,
  SCR_GAMECONST_hidescores = 0x357,
  SCR_GAMECONST_hideviewmodel = 0x358,
  SCR_GAMECONST_hidewhendead = 0x359,
  SCR_GAMECONST_hidewhenindemo = 0x35A,
  SCR_GAMECONST_hidewheninkillcam = 0x35B,
  SCR_GAMECONST_hidewheninmenu = 0x35C,
  SCR_GAMECONST_hidewheninscope = 0x35D,
  SCR_GAMECONST_hidewhileremotecontrolling = 0x35E,
  SCR_GAMECONST_highlyawareradius = 0x35F,
  SCR_GAMECONST_horzalign = 0x360,
  SCR_GAMECONST_humiliated = 0x361,
  SCR_GAMECONST_ignoreall = 0x362,
  SCR_GAMECONST_ignoreclosefoliage = 0x363,
  SCR_GAMECONST_ignoreexplosionevents = 0x364,
  SCR_GAMECONST_ignoreforfixednodesafecheck = 0x365,
  SCR_GAMECONST_ignoreforfriendlyfire = 0x366,
  SCR_GAMECONST_ignorelocationaldamage = 0x367,
  SCR_GAMECONST_ignoreme = 0x368,
  SCR_GAMECONST_ignorerandombulletdamage = 0x369,
  SCR_GAMECONST_ignoresuppression = 0x36A,
  SCR_GAMECONST_ignoretriggers = 0x36B,
  SCR_GAMECONST_ikpriority = 0x36C,
  SCR_GAMECONST_incrementcounter = 0x36D,
  SCR_GAMECONST_index = 0x36E,
  SCR_GAMECONST_initchallengestats = 0x36F,
  SCR_GAMECONST_initclientobjectives = 0x370,
  SCR_GAMECONST_initdec20terminal = 0x371,
  SCR_GAMECONST_inmeleecharge = 0x372,
  SCR_GAMECONST_int = 0x373,
  SCR_GAMECONST_interval = 0x374,
  SCR_GAMECONST_inventorybuttonpressed = 0x375,
  SCR_GAMECONST_iprintln = 0x376,
  SCR_GAMECONST_iprintlnbold = 0x377,
  SCR_GAMECONST_isads = 0x378,
  SCR_GAMECONST_isai = 0x379,
  SCR_GAMECONST_isalive = 0x37A,
  SCR_GAMECONST_isanimleaf = 0x37B,
  SCR_GAMECONST_isanimloaded = 0x37C,
  SCR_GAMECONST_isanimlooping = 0x37D,
  SCR_GAMECONST_isarray = 0x37E,
  SCR_GAMECONST_isassetloaded = 0x37F,
  SCR_GAMECONST_isbadguy = 0x380,
  SCR_GAMECONST_isbeingwatched = 0x381,
  SCR_GAMECONST_isbigdog = 0x382,
  SCR_GAMECONST_isbonuscardactive = 0x383,
  SCR_GAMECONST_isbinkfinished = 0x384,
  SCR_GAMECONST_isburning = 0x385,
  SCR_GAMECONST_iscameraspiketoggled = 0x386,
  SCR_GAMECONST_iscarryingturret = 0x387,
  SCR_GAMECONST_iscoopepd = 0x388,
  SCR_GAMECONST_isdeflected = 0x389,
  SCR_GAMECONST_isdemoplaying = 0x38A,
  SCR_GAMECONST_isdog = 0x38B,
  SCR_GAMECONST_isdriving = 0x38C,
  SCR_GAMECONST_isempjammed = 0x38D,
  SCR_GAMECONST_isextracam = 0x38E,
  SCR_GAMECONST_isfiring = 0x38F,
  SCR_GAMECONST_isfiringturret = 0x390,
  SCR_GAMECONST_isflared = 0x391,
  SCR_GAMECONST_isfloat = 0x392,
  SCR_GAMECONST_isfxplaying = 0x393,
  SCR_GAMECONST_isglobalstatsserver = 0x394,
  SCR_GAMECONST_isgodmode = 0x395,
  SCR_GAMECONST_isgrenadepossafe = 0x396,
  SCR_GAMECONST_isgunnerfiring = 0x397,
  SCR_GAMECONST_ishost = 0x398,
  SCR_GAMECONST_isingoal = 0x399,
  SCR_GAMECONST_isinhelicopter = 0x39A,
  SCR_GAMECONST_isinmovemode = 0x39B,
  SCR_GAMECONST_isinscriptedstate = 0x39C,
  SCR_GAMECONST_isinsideheliheightlock = 0x39D,
  SCR_GAMECONST_isint = 0x39E,
  SCR_GAMECONST_isinvehicle = 0x39F,
  SCR_GAMECONST_isknownenemyinradius = 0x3A0,
  SCR_GAMECONST_isknownenemyinvolume = 0x3A1,
  SCR_GAMECONST_islocalclientdriver = 0x3A2,
  SCR_GAMECONST_islocalplayer = 0x3A3,
  SCR_GAMECONST_islocalplayerviewlinked = 0x3A4,
  SCR_GAMECONST_islocalplayerweaponviewonlylinked = 0x3A5,
  SCR_GAMECONST_islocaltohost = 0x3A6,
  SCR_GAMECONST_islookingat = 0x3A7,
  SCR_GAMECONST_ismantling = 0x3A8,
  SCR_GAMECONST_ismaturecontentenabled = 0x3A9,
  SCR_GAMECONST_ismeleeing = 0x3AA,
  SCR_GAMECONST_ismixerbehaviorhardcoded = 0x3AB,
  SCR_GAMECONST_ismixerlightbehaviorhardcoded = 0x3AC,
  SCR_GAMECONST_ismovesuppressed = 0x3AD,
  SCR_GAMECONST_ismp = 0x3AE,
  SCR_GAMECONST_isnodeoccupied = 0x3AF,
  SCR_GAMECONST_isnoreclosefoliage = 0x3B0,
  SCR_GAMECONST_isnotarget = 0x3B1,
  SCR_GAMECONST_isonground = 0x3B2,
  SCR_GAMECONST_isonladder = 0x3B3,
  SCR_GAMECONST_isonturret = 0x3B4,
  SCR_GAMECONST_ispathdirect = 0x3B5,
  SCR_GAMECONST_ispc = 0x3B6,
  SCR_GAMECONST_ispeelingout = 0x3B7,
  SCR_GAMECONST_isphysicsvehicle = 0x3B8,
  SCR_GAMECONST_isplayer = 0x3B9,
  SCR_GAMECONST_isplayernumber = 0x3BA,
  SCR_GAMECONST_isplayeronsamemachine = 0x3BB,
  SCR_GAMECONST_isplayerreloading = 0x3BC,
  SCR_GAMECONST_isplayingloopsound = 0x3BD,
  SCR_GAMECONST_ispoisoned = 0x3BE,
  SCR_GAMECONST_ispregameenabled = 0x3BF,
  SCR_GAMECONST_ispregamegamestarted = 0x3C0,
  SCR_GAMECONST_isps3 = 0x3C1,
  SCR_GAMECONST_isragdoll = 0x3C2,
  SCR_GAMECONST_isremotecontrolling = 0x3C3,
  SCR_GAMECONST_issaverecentlyloaded = 0x3C4,
  SCR_GAMECONST_issavesuccessful = 0x3C5,
  SCR_GAMECONST_isscrambled = 0x3C6,
  SCR_GAMECONST_issentient = 0x3C7,
  SCR_GAMECONST_isshufflecovernode = 0x3C8,
  SCR_GAMECONST_issoundloop = 0x3C9,
  SCR_GAMECONST_isspawner = 0x3CA,
  SCR_GAMECONST_isspawnpointvisible = 0x3CB,
  SCR_GAMECONST_isspectating = 0x3CC,
  SCR_GAMECONST_issplitscreen = 0x3CD,
  SCR_GAMECONST_issplitscreenhost = 0x3CE,
  SCR_GAMECONST_issprinting = 0x3CF,
  SCR_GAMECONST_isstartingclassdefault = 0x3D0,
  SCR_GAMECONST_isstartingclasseraappropriate = 0x3D1,
  SCR_GAMECONST_isstanceallowed = 0x3D2,
  SCR_GAMECONST_isstereoon = 0x3D3,
  SCR_GAMECONST_isstring = 0x3D4,
  SCR_GAMECONST_issubstr = 0x3D5,
  SCR_GAMECONST_issuppressed = 0x3D6,
  SCR_GAMECONST_issuppressionwaiting = 0x3D7,
  SCR_GAMECONST_isswitchingweapons = 0x3D8,
  SCR_GAMECONST_istalking = 0x3D9,
  SCR_GAMECONST_isthrowinggrenade = 0x3DA,
  SCR_GAMECONST_istouching = 0x3DB,
  SCR_GAMECONST_istring = 0x3DC,
  SCR_GAMECONST_isturretactive = 0x3DD,
  SCR_GAMECONST_isturretfiring = 0x3DE,
  SCR_GAMECONST_isturretready = 0x3DF,
  SCR_GAMECONST_isvalidgametype = 0x3E0,
  SCR_GAMECONST_isvec = 0x3E1,
  SCR_GAMECONST_isvehicle = 0x3E2,
  SCR_GAMECONST_isvehicleimmunetodamage = 0x3E3,
  SCR_GAMECONST_isvehicleturretoverheating = 0x3E4,
  SCR_GAMECONST_isvehicleusable = 0x3E5,
  SCR_GAMECONST_isvehicleinwater = 0x3E6,
  SCR_GAMECONST_iswaitingonsound = 0x3E7,
  SCR_GAMECONST_isweaponcliponly = 0x3E8,
  SCR_GAMECONST_isweapondetonationtimed = 0x3E9,
  SCR_GAMECONST_isweaponequipment = 0x3EA,
  SCR_GAMECONST_isweaponoverheating = 0x3EB,
  SCR_GAMECONST_isweaponprimary = 0x3EC,
  SCR_GAMECONST_isweaponscopeoverlay = 0x3ED,
  SCR_GAMECONST_isweaponspecificuse = 0x3EE,
  SCR_GAMECONST_isweaponviewonlylinked = 0x3EF,
  SCR_GAMECONST_iswheelcolliding = 0x3F0,
  SCR_GAMECONST_iswheelsliding = 0x3F1,
  SCR_GAMECONST_iswounded = 0x3F2,
  SCR_GAMECONST_isxenon = 0x3F3,
  SCR_GAMECONST_itemweaponsetammo = 0x3F4,
  SCR_GAMECONST_itemweaponsetoptions = 0x3F5,
  SCR_GAMECONST_joltbody = 0x3F6,
  SCR_GAMECONST_jumpbuttonpressed = 0x3F7,
  SCR_GAMECONST_keepclaimednode = 0x3F8,
  SCR_GAMECONST_keepclaimednodeifvalid = 0x3F9,
  SCR_GAMECONST_keepnodeduringscriptedanim = 0x3FA,
  SCR_GAMECONST_kick = 0x3FB,
  SCR_GAMECONST_kill = 0x3FC,
  SCR_GAMECONST_killcamentity = 0x3FD,
  SCR_GAMECONST_killcamtargetentity = 0x3FE,
  SCR_GAMECONST_kills = 0x3FF,
  SCR_GAMECONST_killserver = 0x400,
  SCR_GAMECONST_knockback = 0x401,
  SCR_GAMECONST_label = 0x402,
  SCR_GAMECONST_laseroff = 0x403,
  SCR_GAMECONST_laseron = 0x404,
  SCR_GAMECONST_lastenemysightpos = 0x405,
  SCR_GAMECONST_lastknownpos = 0x406,
  SCR_GAMECONST_lastknowntime = 0x407,
  SCR_GAMECONST_lastscriptstate = 0x408,
  SCR_GAMECONST_launch = 0x409,
  SCR_GAMECONST_launchbomb = 0x40A,
  SCR_GAMECONST_launchdynent = 0x40B,
  SCR_GAMECONST_launchlevel = 0x40C,
  SCR_GAMECONST_launchragdoll = 0x40D,
  SCR_GAMECONST_launchvehicle = 0x40E,
  SCR_GAMECONST_leanamount = 0x40F,
  SCR_GAMECONST_length = 0x410,
  SCR_GAMECONST_lengthsquared = 0x411,
  SCR_GAMECONST_lerp_to_darker = 0x412,
  SCR_GAMECONST_lerp_to_lighter = 0x413,
  SCR_GAMECONST_lerpfloat = 0x414,
  SCR_GAMECONST_lerpposition = 0x415,
  SCR_GAMECONST_lerpsundirection = 0x416,
  SCR_GAMECONST_lerpvector = 0x417,
  SCR_GAMECONST_lerpviewangleclamp = 0x418,
  SCR_GAMECONST_line = 0x419,
  SCR_GAMECONST_linelist = 0x41A,
  SCR_GAMECONST_linkguidedmissilecamera = 0x41B,
  SCR_GAMECONST_linknodes = 0x41C,
  SCR_GAMECONST_linkto = 0x41D,
  SCR_GAMECONST_linktoblendtotag = 0x41E,
  SCR_GAMECONST_linktocamera = 0x41F,
  SCR_GAMECONST_linktomissile = 0x420,
  SCR_GAMECONST_loadfx = 0x421,
  SCR_GAMECONST_loadgump = 0x422,
  SCR_GAMECONST_localclientactive = 0x423,
  SCR_GAMECONST_localtoworldcoords = 0x424,
  SCR_GAMECONST_log = 0x425,
  SCR_GAMECONST_logprint = 0x426,
  SCR_GAMECONST_logstring = 0x427,
  SCR_GAMECONST_lookahead = 0x428,
  SCR_GAMECONST_lookaheaddir = 0x429,
  SCR_GAMECONST_lookaheaddist = 0x42A,
  SCR_GAMECONST_lookaheadnodepos = 0x42B,
  SCR_GAMECONST_lookatent = 0x42C,
  SCR_GAMECONST_lookatentity = 0x42D,
  SCR_GAMECONST_lookatpos = 0x42E,
  SCR_GAMECONST_lookforward = 0x42F,
  SCR_GAMECONST_lookright = 0x430,
  SCR_GAMECONST_lookup = 0x431,
  SCR_GAMECONST_luinotifyevent = 0x432,
  SCR_GAMECONST_magicbullet = 0x433,
  SCR_GAMECONST_magicgrenade = 0x434,
  SCR_GAMECONST_magicgrenademanual = 0x435,
  SCR_GAMECONST_magicgrenadetype = 0x436,
  SCR_GAMECONST_makedvarserverinfo = 0x437,
  SCR_GAMECONST_makefakeai = 0x438,
  SCR_GAMECONST_makelight = 0x439,
  SCR_GAMECONST_makelocalizedstring = 0x43A,
  SCR_GAMECONST_makemixerlight = 0x43B,
  SCR_GAMECONST_maketurretunusable = 0x43C,
  SCR_GAMECONST_maketurretusable = 0x43D,
  SCR_GAMECONST_makeunusable = 0x43E,
  SCR_GAMECONST_makeusable = 0x43F,
  SCR_GAMECONST_makevehicleunusable = 0x440,
  SCR_GAMECONST_makevehicleusable = 0x441,
  SCR_GAMECONST_map = 0x442,
  SCR_GAMECONST_map_material = 0x443,
  SCR_GAMECONST_map_restart = 0x444,
  SCR_GAMECONST_mapexists = 0x445,
  SCR_GAMECONST_mapshaderconstant = 0x446,
  SCR_GAMECONST_matchend = 0x447,
  SCR_GAMECONST_material = 0x448,
  SCR_GAMECONST_matrix4x4transformpoints = 0x449,
  SCR_GAMECONST_max = 0x44A,
  SCR_GAMECONST_maxfaceenemydist = 0x44B,
  SCR_GAMECONST_maxhealth = 0x44C,
  SCR_GAMECONST_maxs = 0x44D,
  SCR_GAMECONST_maxsightdistsqrd = 0x44E,
  SCR_GAMECONST_maxvisibledist = 0x44F,
  SCR_GAMECONST_maymovefrompointtopoint = 0x450,
  SCR_GAMECONST_maymovetopoint = 0x451,
  SCR_GAMECONST_melee = 0x452,
  SCR_GAMECONST_meleeattackdist = 0x453,
  SCR_GAMECONST_meleebuttonpressed = 0x454,
  SCR_GAMECONST_min = 0x455,
  SCR_GAMECONST_minpaindamage = 0x456,
  SCR_GAMECONST_mins = 0x457,
  SCR_GAMECONST_minusedistsq = 0x458,
  SCR_GAMECONST_missile_createattractorent = 0x459,
  SCR_GAMECONST_missile_createattractororigin = 0x45A,
  SCR_GAMECONST_missile_createrepulsorent = 0x45B,
  SCR_GAMECONST_missile_createrepulsororigin = 0x45C,
  SCR_GAMECONST_missile_deleteattractor = 0x45D,
  SCR_GAMECONST_missile_settarget = 0x45E,
  SCR_GAMECONST_missile_dronesetvisible = 0x45F,
  SCR_GAMECONST_missionfailed = 0x460,
  SCR_GAMECONST_missionsuccess = 0x461,
  SCR_GAMECONST_model = 0x462,
  SCR_GAMECONST_modelhasphyspreset = 0x463,
  SCR_GAMECONST_modelswapdelay = 0x464,
  SCR_GAMECONST_momentum = 0x465,
  SCR_GAMECONST_movegravity = 0x466,
  SCR_GAMECONST_movemode = 0x467,
  SCR_GAMECONST_moveovertime = 0x468,
  SCR_GAMECONST_moveslide = 0x469,
  SCR_GAMECONST_moveto = 0x46A,
  SCR_GAMECONST_movex = 0x46B,
  SCR_GAMECONST_movey = 0x46C,
  SCR_GAMECONST_movez = 0x46D,
  SCR_GAMECONST_name = 0x46E,
  SCR_GAMECONST_nearclaimnode = 0x46F,
  SCR_GAMECONST_nearclaimnodeandangle = 0x470,
  SCR_GAMECONST_nearnode = 0x471,
  SCR_GAMECONST_netupdate = 0x472,
  SCR_GAMECONST_newclienthudelem = 0x473,
  SCR_GAMECONST_newdebughudelem = 0x474,
  SCR_GAMECONST_newenemyreaction = 0x475,
  SCR_GAMECONST_newenemyreactiondistsq = 0x476,
  SCR_GAMECONST_newenemyreactionpos = 0x477,
  SCR_GAMECONST_newhudelem = 0x478,
  SCR_GAMECONST_newmaterialelem = 0x479,
  SCR_GAMECONST_newmenuelem = 0x47A,
  SCR_GAMECONST_newscorehudelem = 0x47B,
  SCR_GAMECONST_newteamhudelem = 0x47C,
  SCR_GAMECONST_newtextelem = 0x47D,
  SCR_GAMECONST_nextallowedreacttime = 0x47E,
  SCR_GAMECONST_nextplayerrenderoption = 0x47F,
  SCR_GAMECONST_nightvisionforceoff = 0x480,
  SCR_GAMECONST_noattackeraccuracymod = 0x481,
  SCR_GAMECONST_node = 0x482,
  SCR_GAMECONST_nodeoffsetpos = 0x483,
  SCR_GAMECONST_nododgemove = 0x484,
  SCR_GAMECONST_nogrenadereturnthrow = 0x485,
  SCR_GAMECONST_nolean = 0x486,
  SCR_GAMECONST_nopronerotation = 0x487,
  SCR_GAMECONST_notifyoncommand = 0x488,
  SCR_GAMECONST_notsolid = 0x489,
  SCR_GAMECONST_numfreehudelem = 0x48A,
  SCR_GAMECONST_numremoteclients = 0x48B,
  SCR_GAMECONST_obituary = 0x48C,
  SCR_GAMECONST_objective_clearall = 0x48D,
  SCR_GAMECONST_objective_add = 0x48E,
  SCR_GAMECONST_objective_add_team = 0x48F,
  SCR_GAMECONST_objective_additionalcurrent = 0x490,
  SCR_GAMECONST_objective_additionalposition = 0x491,
  SCR_GAMECONST_objective_current = 0x492,
  SCR_GAMECONST_objective_delete = 0x493,
  SCR_GAMECONST_objective_flipicon = 0x494,
  SCR_GAMECONST_objective_icon = 0x495,
  SCR_GAMECONST_objective_onentity = 0x496,
  SCR_GAMECONST_objective_position = 0x497,
  SCR_GAMECONST_objective_ring = 0x498,
  SCR_GAMECONST_objective_set3d = 0x499,
  SCR_GAMECONST_objective_setcolor = 0x49A,
  SCR_GAMECONST_objective_setflag = 0x49B,
  SCR_GAMECONST_objective_seticon = 0x49C,
  SCR_GAMECONST_objective_setinvisibletoall = 0x49D,
  SCR_GAMECONST_objective_setinvisibletoplayer = 0x49E,
  SCR_GAMECONST_objective_seticonsize = 0x49F,
  SCR_GAMECONST_objective_setstencil = 0x4A0,
  SCR_GAMECONST_objective_setsize = 0x4A1,
  SCR_GAMECONST_objective_setvisibletoall = 0x4A2,
  SCR_GAMECONST_objective_setvisibletoplayer = 0x4A3,
  SCR_GAMECONST_objective_size = 0x4A4,
  SCR_GAMECONST_objective_state = 0x4A5,
  SCR_GAMECONST_objective_string = 0x4A6,
  SCR_GAMECONST_objective_string_nomessage = 0x4A7,
  SCR_GAMECONST_objective_team = 0x4A8,
  SCR_GAMECONST_objective_printtext = 0x4A9,
  SCR_GAMECONST_oktospawn = 0x4AA,
  SCR_GAMECONST_oneexhaust = 0x4AB,
  SCR_GAMECONST_openfile = 0x4AC,
  SCR_GAMECONST_openmainmenu = 0x4AD,
  SCR_GAMECONST_openmenu = 0x4AE,
  SCR_GAMECONST_openmenunomouse = 0x4AF,
  SCR_GAMECONST_orientmode = 0x4B0,
  SCR_GAMECONST_origin = 0x4B1,
  SCR_GAMECONST_pacifist = 0x4B2,
  SCR_GAMECONST_pacifistwait = 0x4B3,
  SCR_GAMECONST_pathdistancetraveled = 0x4B4,
  SCR_GAMECONST_pathenemyfightdist = 0x4B5,
  SCR_GAMECONST_pathenemylookahead = 0x4B6,
  SCR_GAMECONST_pathfixedoffset = 0x4B7,
  SCR_GAMECONST_pathfixedoffsetclear = 0x4B8,
  SCR_GAMECONST_pathgoalpos = 0x4B9,
  SCR_GAMECONST_pathlookpos = 0x4BA,
  SCR_GAMECONST_pathmove = 0x4BB,
  SCR_GAMECONST_pathmoveclear = 0x4BC,
  SCR_GAMECONST_pathpos = 0x4BD,
  SCR_GAMECONST_pathrandompercent = 0x4BE,
  SCR_GAMECONST_pathstartpos = 0x4BF,
  SCR_GAMECONST_pathvariableoffset = 0x4C0,
  SCR_GAMECONST_pathvariableoffsetclear = 0x4C1,
  SCR_GAMECONST_pathwidth = 0x4C2,
  SCR_GAMECONST_pathwidthlookaheadfrac = 0x4C3,
  SCR_GAMECONST_pause3dcinematic = 0x4C4,
  SCR_GAMECONST_pcserverupdateplaylist = 0x4C5,
  SCR_GAMECONST_perfectaim = 0x4C6,
  SCR_GAMECONST_pers = 0x4C7,
  SCR_GAMECONST_physicsexplosioncylinder = 0x4C8,
  SCR_GAMECONST_physicsexplosionsphere = 0x4C9,
  SCR_GAMECONST_physicsjolt = 0x4CA,
  SCR_GAMECONST_physicslaunch = 0x4CB,
  SCR_GAMECONST_physicstrace = 0x4CC,
  SCR_GAMECONST_physicstraceex = 0x4CD,
  SCR_GAMECONST_pickupgrenade = 0x4CE,
  SCR_GAMECONST_pingplayer = 0x4CF,
  SCR_GAMECONST_pixbeginevent = 0x4D0,
  SCR_GAMECONST_pixendevent = 0x4D1,
  SCR_GAMECONST_pixmarker = 0x4D2,
  SCR_GAMECONST_placespawnpoint = 0x4D3,
  SCR_GAMECONST_plants = 0x4D4,
  SCR_GAMECONST_playbink = 0x4D5,
  SCR_GAMECONST_playclientairstrike = 0x4D6,
  SCR_GAMECONST_playclientnapalm = 0x4D7,
  SCR_GAMECONST_player_setoffscreendownmaterial = 0x4D8,
  SCR_GAMECONST_player_setoffscreenmaterial = 0x4D9,
  SCR_GAMECONST_playerads = 0x4DA,
  SCR_GAMECONST_playeranimscriptevent = 0x4DB,
  SCR_GAMECONST_playeranimscripteventend = 0x4DC,
  SCR_GAMECONST_playerbullettrace = 0x4DD,
  SCR_GAMECONST_playercamlinkto = 0x4DE,
  SCR_GAMECONST_playercamunlink = 0x4DF,
  SCR_GAMECONST_playerknockback = 0x4E0,
  SCR_GAMECONST_playerlinkedoffsetdisable = 0x4E1,
  SCR_GAMECONST_playerlinkedoffsetenable = 0x4E2,
  SCR_GAMECONST_playerlinkedsetusebaseangleforviewclamp = 0x4E3,
  SCR_GAMECONST_playerlinkto = 0x4E4,
  SCR_GAMECONST_playerlinktoabsolute = 0x4E5,
  SCR_GAMECONST_playerlinktoblend = 0x4E6,
  SCR_GAMECONST_playerlinktodelta = 0x4E7,
  SCR_GAMECONST_playerlinkweaponviewtodelta = 0x4E8,
  SCR_GAMECONST_playername = 0x4E9,
  SCR_GAMECONST_playerphysicstrace = 0x4EA,
  SCR_GAMECONST_playerpositionvalid = 0x4EB,
  SCR_GAMECONST_playersetgroundreferenceent = 0x4EC,
  SCR_GAMECONST_playersighttrace = 0x4ED,
  SCR_GAMECONST_playfx = 0x4EE,
  SCR_GAMECONST_playfxondynent = 0x4EF,
  SCR_GAMECONST_playfxontag = 0x4F0,
  SCR_GAMECONST_playlocalsound = 0x4F1,
  SCR_GAMECONST_playloopedfx = 0x4F2,
  SCR_GAMECONST_playloopsound = 0x4F3,
  SCR_GAMECONST_playrumblelooponentity = 0x4F4,
  SCR_GAMECONST_playrumblelooponposition = 0x4F5,
  SCR_GAMECONST_playrumbleonentity = 0x4F6,
  SCR_GAMECONST_playrumbleonposition = 0x4F7,
  SCR_GAMECONST_playsound = 0x4F8,
  SCR_GAMECONST_playsoundasmaster = 0x4F9,
  SCR_GAMECONST_playsoundatposition = 0x4FA,
  SCR_GAMECONST_playsoundontag = 0x4FB,
  SCR_GAMECONST_playsoundtoplayer = 0x4FC,
  SCR_GAMECONST_playviewmodelfx = 0x4FD,
  SCR_GAMECONST_playweapondamageeffects = 0x4FE,
  SCR_GAMECONST_playweapondeatheffects = 0x4FF,
  SCR_GAMECONST_pointonsegmentnearesttopoint = 0x500,
  SCR_GAMECONST_popaistate = 0x501,
  SCR_GAMECONST_positionwouldtelefrag = 0x502,
  SCR_GAMECONST_pow = 0x503,
  SCR_GAMECONST_precacheheadicon = 0x504,
  SCR_GAMECONST_precacheitem = 0x505,
  SCR_GAMECONST_precachelocationselector = 0x506,
  SCR_GAMECONST_precachemenu = 0x507,
  SCR_GAMECONST_precachemodel = 0x508,
  SCR_GAMECONST_precacherumble = 0x509,
  SCR_GAMECONST_precacheshader = 0x50A,
  SCR_GAMECONST_precacheshellshock = 0x50B,
  SCR_GAMECONST_precachespawner = 0x50C,
  SCR_GAMECONST_precachestatusicon = 0x50D,
  SCR_GAMECONST_precachestring = 0x50E,
  SCR_GAMECONST_precacheturret = 0x50F,
  SCR_GAMECONST_precachevehicle = 0x510,
  SCR_GAMECONST_predictanim = 0x511,
  SCR_GAMECONST_predictoriginandangles = 0x512,
  SCR_GAMECONST_prefetchlevel = 0x513,
  SCR_GAMECONST_pregamestartgame = 0x514,
  SCR_GAMECONST_presentation = 0x515,
  SCR_GAMECONST_pressattackbutton = 0x516,
  SCR_GAMECONST_pressusebutton = 0x517,
  SCR_GAMECONST_prevanimdelta = 0x518,
  SCR_GAMECONST_prevnode = 0x519,
  SCR_GAMECONST_primaryweapon = 0x51A,
  SCR_GAMECONST_print = 0x51B,
  SCR_GAMECONST_print3d = 0x51C,
  SCR_GAMECONST_println = 0x51D,
  SCR_GAMECONST_profilelog_begintiming = 0x51E,
  SCR_GAMECONST_profilelog_endtiming = 0x51F,
  SCR_GAMECONST_proneok = 0x520,
  SCR_GAMECONST_providecoveringfire = 0x521,
  SCR_GAMECONST_psoffsettime = 0x522,
  SCR_GAMECONST_pushable = 0x523,
  SCR_GAMECONST_pushplayer = 0x524,
  SCR_GAMECONST_qsortscoredspawnpointsascending = 0x525,
  SCR_GAMECONST_quitlobby = 0x526,
  SCR_GAMECONST_quitparty = 0x527,
  SCR_GAMECONST_radius = 0x528,
  SCR_GAMECONST_radiusdamage = 0x529,
  SCR_GAMECONST_radiusdamagemax = 0x52A,
  SCR_GAMECONST_radiusdamagemin = 0x52B,
  SCR_GAMECONST_radiusdamageradius = 0x52C,
  SCR_GAMECONST_randomfloat = 0x52D,
  SCR_GAMECONST_randomfloatrange = 0x52E,
  SCR_GAMECONST_randomint = 0x52F,
  SCR_GAMECONST_randomintrange = 0x530,
  SCR_GAMECONST_rate = 0x531,
  SCR_GAMECONST_reacquiremove = 0x532,
  SCR_GAMECONST_reacquirestep = 0x533,
  SCR_GAMECONST_reactorigin = 0x534,
  SCR_GAMECONST_reconnectvehiclenodes = 0x535,
  SCR_GAMECONST_record3dtext = 0x536,
  SCR_GAMECONST_recordcircle = 0x537,
  SCR_GAMECONST_recordent = 0x538,
  SCR_GAMECONST_recordenttext = 0x539,
  SCR_GAMECONST_recorderplayback = 0x53A,
  SCR_GAMECONST_recordline = 0x53B,
  SCR_GAMECONST_recordmatchbegin = 0x53C,
  SCR_GAMECONST_recordplayermatchend = 0x53D,
  SCR_GAMECONST_recordplayerstats = 0x53E,
  SCR_GAMECONST_recordsphere = 0x53F,
  SCR_GAMECONST_recordusedspawnpoint = 0x540,
  SCR_GAMECONST_refreshhudammocounter = 0x541,
  SCR_GAMECONST_refreshhudcompass = 0x542,
  SCR_GAMECONST_registerxp = 0x543,
  SCR_GAMECONST_relativedir = 0x544,
  SCR_GAMECONST_releaseclaimedtrigger = 0x545,
  SCR_GAMECONST_relinktoturret = 0x546,
  SCR_GAMECONST_reloadbuttonpressed = 0x547,
  SCR_GAMECONST_removeaieventlistener = 0x548,
  SCR_GAMECONST_removeallfriendlyscramblers = 0x549,
  SCR_GAMECONST_removeforcenocull = 0x54A,
  SCR_GAMECONST_removefriendlyscrambler = 0x54B,
  SCR_GAMECONST_removeinfluencer = 0x54C,
  SCR_GAMECONST_removevehiclefromcompass = 0x54D,
  SCR_GAMECONST_reportclientdisconnected = 0x54E,
  SCR_GAMECONST_gamerepthresholdexceeded = 0x54F,
  SCR_GAMECONST_reportmtu = 0x550,
  SCR_GAMECONST_reportuser = 0x551,
  SCR_GAMECONST_requestarrivalnotify = 0x552,
  SCR_GAMECONST_reset = 0x553,
  SCR_GAMECONST_resetadswidthandlerp = 0x554,
  SCR_GAMECONST_resetailimit = 0x555,
  SCR_GAMECONST_resetcompassscale = 0x556,
  SCR_GAMECONST_resetcurve = 0x557,
  SCR_GAMECONST_resetmissiledetonationtime = 0x558,
  SCR_GAMECONST_resetplayerviewratescale = 0x559,
  SCR_GAMECONST_resetqosgamedatapayload = 0x55A,
  SCR_GAMECONST_resetspreadoverride = 0x55B,
  SCR_GAMECONST_resetsundirection = 0x55C,
  SCR_GAMECONST_resetsunlight = 0x55D,
  SCR_GAMECONST_resettimeout = 0x55E,
  SCR_GAMECONST_resetviewclamp = 0x55F,
  SCR_GAMECONST_restoredefaultdroppitch = 0x560,
  SCR_GAMECONST_resumespeed = 0x561,
  SCR_GAMECONST_returnplayercontrol = 0x562,
  SCR_GAMECONST_returns = 0x563,
  SCR_GAMECONST_revive = 0x564,
  SCR_GAMECONST_reviveobituary = 0x565,
  SCR_GAMECONST_reviveplayer = 0x566,
  SCR_GAMECONST_revives = 0x567,
  SCR_GAMECONST_ropeaddentityanchor = 0x568,
  SCR_GAMECONST_ropeaddworldanchor = 0x569,
  SCR_GAMECONST_ropecollide = 0x56A,
  SCR_GAMECONST_ropegetposition = 0x56B,
  SCR_GAMECONST_ropemoveanchor = 0x56C,
  SCR_GAMECONST_roperemoveanchor = 0x56D,
  SCR_GAMECONST_ropesetflag = 0x56E,
  SCR_GAMECONST_ropesetparam = 0x56F,
  SCR_GAMECONST_rotatepitch = 0x570,
  SCR_GAMECONST_rotatepoint = 0x571,
  SCR_GAMECONST_rotateroll = 0x572,
  SCR_GAMECONST_rotateto = 0x573,
  SCR_GAMECONST_rotatevelocity = 0x574,
  SCR_GAMECONST_rotateyaw = 0x575,
  SCR_GAMECONST_rumbleadditionaltime = 0x576,
  SCR_GAMECONST_rumblebasetime = 0x577,
  SCR_GAMECONST_rumbleduration = 0x578,
  SCR_GAMECONST_rumbleradius = 0x579,
  SCR_GAMECONST_rumblescale = 0x57A,
  SCR_GAMECONST_rumbletype = 0x57B,
  SCR_GAMECONST_runscriptonent = 0x57C,
  SCR_GAMECONST_safetochangescript = 0x57D,
  SCR_GAMECONST_savegame = 0x57E,
  SCR_GAMECONST_savegamenocommit = 0x57F,
  SCR_GAMECONST_sayall = 0x580,
  SCR_GAMECONST_sayteam = 0x581,
  SCR_GAMECONST_scalebuoyancy = 0x582,
  SCR_GAMECONST_scaleovertime = 0x583,
  SCR_GAMECONST_scalespeed = 0x584,
  SCR_GAMECONST_score = 0x585,
  SCR_GAMECONST_script_linkname = 0x586,
  SCR_GAMECONST_script_noteworthy = 0x587,
  SCR_GAMECONST_script_owner = 0x588,
  SCR_GAMECONST_scriptenemy = 0x589,
  SCR_GAMECONST_scriptenemytag = 0x58A,
  SCR_GAMECONST_scriptstate = 0x58B,
  SCR_GAMECONST_searchforonlinegames = 0x58C,
  SCR_GAMECONST_seatgetweapon = 0x58D,
  SCR_GAMECONST_secondaryoffhandbuttonpressed = 0x58E,
  SCR_GAMECONST_secondaryweapon = 0x58F,
  SCR_GAMECONST_seerecently = 0x590,
  SCR_GAMECONST_sendaiscriptkeys = 0x591,
  SCR_GAMECONST_sendaiscriptvals = 0x592,
  SCR_GAMECONST_sendfaceevent = 0x593,
  SCR_GAMECONST_sendranks = 0x594,
  SCR_GAMECONST_sessionmodeisonlinegame = 0x595,
  SCR_GAMECONST_sessionmodeisprivate = 0x596,
  SCR_GAMECONST_sessionmodeisprivateonlinegame = 0x597,
  SCR_GAMECONST_sessionmodeissystemlink = 0x598,
  SCR_GAMECONST_sessionmodeiszombiesgame = 0x599,
  SCR_GAMECONST_sessionstate = 0x59A,
  SCR_GAMECONST_sessionteam = 0x59B,
  SCR_GAMECONST_set_filter_pass_constant = 0x59C,
  SCR_GAMECONST_set_filter_pass_enabled = 0x59D,
  SCR_GAMECONST_set_filter_pass_material = 0x59E,
  SCR_GAMECONST_set_filter_pass_quads = 0x59F,
  SCR_GAMECONST_set_filter_bit_flag = 0x5A0,
  SCR_GAMECONST_set_overlay_constant = 0x5A1,
  SCR_GAMECONST_set_overlay_enabled = 0x5A2,
  SCR_GAMECONST_set_overlay_material = 0x5A3,
  SCR_GAMECONST_setacceleration = 0x5A4,
  SCR_GAMECONST_setactionslot = 0x5A5,
  SCR_GAMECONST_setadswidthandlerp = 0x5A6,
  SCR_GAMECONST_setafteractionreportstate = 0x5A7,
  SCR_GAMECONST_setailimit = 0x5A8,
  SCR_GAMECONST_setaimanims = 0x5A9,
  SCR_GAMECONST_setaimanimweights = 0x5AA,
  SCR_GAMECONST_setairresistance = 0x5AB,
  SCR_GAMECONST_setaispread = 0x5AC,
  SCR_GAMECONST_setambientsnapshot = 0x5AD,
  SCR_GAMECONST_setambientsidechainduck = 0x5AE,
  SCR_GAMECONST_setangularvelocity = 0x5AF,
  SCR_GAMECONST_setanim = 0x5B0,
  SCR_GAMECONST_setanimdumpuseserveranims = 0x5B1,
  SCR_GAMECONST_setanimforcenew = 0x5B2,
  SCR_GAMECONST_setanimknob = 0x5B3,
  SCR_GAMECONST_setanimknoball = 0x5B4,
  SCR_GAMECONST_setanimknoballlimited = 0x5B5,
  SCR_GAMECONST_setanimknoballlimitedrestart = 0x5B6,
  SCR_GAMECONST_setanimknoballrestart = 0x5B7,
  SCR_GAMECONST_setanimknoblimited = 0x5B8,
  SCR_GAMECONST_setanimknoblimitedrestart = 0x5B9,
  SCR_GAMECONST_setanimknobrestart = 0x5BA,
  SCR_GAMECONST_setanimlimited = 0x5BB,
  SCR_GAMECONST_setanimlimitedrestart = 0x5BC,
  SCR_GAMECONST_setanimratecomplete = 0x5BD,
  SCR_GAMECONST_setanimrestart = 0x5BE,
  SCR_GAMECONST_setanimstate = 0x5BF,
  SCR_GAMECONST_setanimtime = 0x5C0,
  SCR_GAMECONST_setarchive = 0x5C1,
  SCR_GAMECONST_setattacker = 0x5C2,
  SCR_GAMECONST_setautopickup = 0x5C3,
  SCR_GAMECONST_setblockweaponpickup = 0x5C4,
  SCR_GAMECONST_setblur = 0x5C5,
  SCR_GAMECONST_setbombtimer = 0x5C6,
  SCR_GAMECONST_setbottomarc = 0x5C7,
  SCR_GAMECONST_setbrake = 0x5C8,
  SCR_GAMECONST_setburn = 0x5C9,
  SCR_GAMECONST_setcandamage = 0x5CA,
  SCR_GAMECONST_setcellinvisible = 0x5CB,
  SCR_GAMECONST_setcellinvisibleatpos = 0x5CC,
  SCR_GAMECONST_setcellvisible = 0x5CD,
  SCR_GAMECONST_setcellvisibleatpos = 0x5CE,
  SCR_GAMECONST_setchannelvolumes = 0x5CF,
  SCR_GAMECONST_setclientaimlockonpitchstrength = 0x5D0,
  SCR_GAMECONST_setclientammocounterhide = 0x5D1,
  SCR_GAMECONST_setclientcgobjectivetext = 0x5D2,
  SCR_GAMECONST_setclientcompass = 0x5D3,
  SCR_GAMECONST_setclientdrawtalk = 0x5D4,
  SCR_GAMECONST_setclientdvar = 0x5D5,
  SCR_GAMECONST_setclientdvars = 0x5D6,
  SCR_GAMECONST_setclientflag = 0x5D7,
  SCR_GAMECONST_setclientflagasval = 0x5D8,
  SCR_GAMECONST_setclientfov = 0x5D9,
  SCR_GAMECONST_setclienthudhardcore = 0x5DA,
  SCR_GAMECONST_setclientminiscoreboardhide = 0x5DB,
  SCR_GAMECONST_setclientnamemode = 0x5DC,
  SCR_GAMECONST_setclientnumlives = 0x5DD,
  SCR_GAMECONST_setclientplayerpushamount = 0x5DE,
  SCR_GAMECONST_setclientplayersteponactors = 0x5DF,
  SCR_GAMECONST_setclientplayersprinttime = 0x5E0,
  SCR_GAMECONST_setclientprofilevar = 0x5E1,
  SCR_GAMECONST_setclientscriptmainmenu = 0x5E2,
  SCR_GAMECONST_setclientthirdperson = 0x5E3,
  SCR_GAMECONST_setclientthirdpersonangle = 0x5E4,
  SCR_GAMECONST_setclientuivisibilityflag = 0x5E5,
  SCR_GAMECONST_setclientvolumetricfog = 0x5E6,
  SCR_GAMECONST_setclock = 0x5E7,
  SCR_GAMECONST_setclockup = 0x5E8,
  SCR_GAMECONST_setcod7decodefx = 0x5E9,
  SCR_GAMECONST_setcollectible = 0x5EA,
  SCR_GAMECONST_setcompassicon = 0x5EB,
  SCR_GAMECONST_setcontents = 0x5EC,
  SCR_GAMECONST_setconvergencetime = 0x5ED,
  SCR_GAMECONST_setculldist = 0x5EE,
  SCR_GAMECONST_setcurrentspectatorclient = 0x5EF,
  SCR_GAMECONST_setcursorhint = 0x5F0,
  SCR_GAMECONST_setcurvebspline = 0x5F1,
  SCR_GAMECONST_setcurvecameraent = 0x5F2,
  SCR_GAMECONST_setcurvenotifyent = 0x5F3,
  SCR_GAMECONST_setcurverounded = 0x5F4,
  SCR_GAMECONST_setcurvesmooth = 0x5F5,
  SCR_GAMECONST_setcurvespeed = 0x5F6,
  SCR_GAMECONST_setdamagestage = 0x5F7,
  SCR_GAMECONST_setdeathcontents = 0x5F8,
  SCR_GAMECONST_setdebugangles = 0x5F9,
  SCR_GAMECONST_setdebugorigin = 0x5FA,
  SCR_GAMECONST_setdebugsideswitch = 0x5FB,
  SCR_GAMECONST_setdeceleration = 0x5FC,
  SCR_GAMECONST_setdefaultdroppitch = 0x5FD,
  SCR_GAMECONST_setdefaultpitch = 0x5FE,
  SCR_GAMECONST_setdemointermissionpoint = 0x5FF,
  SCR_GAMECONST_setdepthoffield = 0x600,
  SCR_GAMECONST_setdoublevision = 0x601,
  SCR_GAMECONST_setdrivepathphysicsscale = 0x602,
  SCR_GAMECONST_setdstat = 0x603,
  SCR_GAMECONST_setdvar = 0x604,
  SCR_GAMECONST_setdvarbool = 0x605,
  SCR_GAMECONST_setdvarfloat = 0x606,
  SCR_GAMECONST_setdynentenabled = 0x607,
  SCR_GAMECONST_setelectrified = 0x608,
  SCR_GAMECONST_setempjammed = 0x609,
  SCR_GAMECONST_setenablenode = 0x60A,
  SCR_GAMECONST_setenemyglobalscrambler = 0x60B,
  SCR_GAMECONST_setenemyscrambleramount = 0x60C,
  SCR_GAMECONST_setengagementmaxdist = 0x60D,
  SCR_GAMECONST_setengagementmindist = 0x60E,
  SCR_GAMECONST_setentertime = 0x60F,
  SCR_GAMECONST_setentityowner = 0x610,
  SCR_GAMECONST_setentitytarget = 0x611,
  SCR_GAMECONST_setexcludeteamfortrigger = 0x612,
  SCR_GAMECONST_setexpfog = 0x613,
  SCR_GAMECONST_setexploderid = 0x614,
  SCR_GAMECONST_setextracamactive = 0x615,
  SCR_GAMECONST_setextracamangles = 0x616,
  SCR_GAMECONST_setextracamentity = 0x617,
  SCR_GAMECONST_setextracamfov = 0x618,
  SCR_GAMECONST_setextracamorigin = 0x619,
  SCR_GAMECONST_setextracamstatic = 0x61A,
  SCR_GAMECONST_setfakeentorg = 0x61B,
  SCR_GAMECONST_setfixednodesafevolume = 0x61C,
  SCR_GAMECONST_setflagasaway = 0x61D,
  SCR_GAMECONST_setflaggedanim = 0x61E,
  SCR_GAMECONST_setflaggedanimknob = 0x61F,
  SCR_GAMECONST_setflaggedanimknoball = 0x620,
  SCR_GAMECONST_setflaggedanimknoballrestart = 0x621,
  SCR_GAMECONST_setflaggedanimknoblimited = 0x622,
  SCR_GAMECONST_setflaggedanimknoblimitedrestart = 0x623,
  SCR_GAMECONST_setflaggedanimknobrestart = 0x624,
  SCR_GAMECONST_setflaggedanimlimited = 0x625,
  SCR_GAMECONST_setflaggedanimlimitedrestart = 0x626,
  SCR_GAMECONST_setflaggedanimrestart = 0x627,
  SCR_GAMECONST_setflashbanged = 0x628,
  SCR_GAMECONST_setflashbangimmunity = 0x629,
  SCR_GAMECONST_setforcenocull = 0x62A,
  SCR_GAMECONST_setfriendlyscrambleramount = 0x62B,
  SCR_GAMECONST_setgameendtime = 0x62C,
  SCR_GAMECONST_setgametypesetting = 0x62D,
  SCR_GAMECONST_setgametypestring = 0x62E,
  SCR_GAMECONST_setgoalentity = 0x62F,
  SCR_GAMECONST_setgoalnode = 0x630,
  SCR_GAMECONST_setgoalpos = 0x631,
  SCR_GAMECONST_setgoalvolume = 0x632,
  SCR_GAMECONST_setgoalvolumeauto = 0x633,
  SCR_GAMECONST_setgoalyaw = 0x634,
  SCR_GAMECONST_setgpr = 0x635,
  SCR_GAMECONST_setgravity = 0x636,
  SCR_GAMECONST_setgroupsnapshot = 0x637,
  SCR_GAMECONST_setglobalfutz = 0x638,
  SCR_GAMECONST_setgunnertargetent = 0x639,
  SCR_GAMECONST_setgunnertargetvec = 0x63A,
  SCR_GAMECONST_setgunnerturretontargetrange = 0x63B,
  SCR_GAMECONST_sethealthsnapshot = 0x63C,
  SCR_GAMECONST_setheightlockoffset = 0x63D,
  SCR_GAMECONST_setheldweaponmodel = 0x63E,
  SCR_GAMECONST_setheliheightlock = 0x63F,
  SCR_GAMECONST_setheliheightpatchenabled = 0x640,
  SCR_GAMECONST_sethighlighted = 0x641,
  SCR_GAMECONST_sethintstring = 0x642,
  SCR_GAMECONST_sethostmigrationstatus = 0x643,
  SCR_GAMECONST_sethoverparams = 0x644,
  SCR_GAMECONST_sethudoutlinecolor = 0x645,
  SCR_GAMECONST_sethudwarningtype = 0x646,
  SCR_GAMECONST_setignoremegroup = 0x647,
  SCR_GAMECONST_setinfluencerteammask = 0x648,
  SCR_GAMECONST_setinfraredvision = 0x649,
  SCR_GAMECONST_setinfraredvisionset = 0x64A,
  SCR_GAMECONST_setinventoryweapon = 0x64B,
  SCR_GAMECONST_setinvisibletoplayer = 0x64C,
  SCR_GAMECONST_setjitterparams = 0x64D,
  SCR_GAMECONST_setlaststandprevweap = 0x64E,
  SCR_GAMECONST_setleftarc = 0x64F,
  SCR_GAMECONST_setlevelfadesnapshot = 0x650,
  SCR_GAMECONST_setlightcolor = 0x651,
  SCR_GAMECONST_setlightexponent = 0x652,
  SCR_GAMECONST_setlightfovrange = 0x653,
  SCR_GAMECONST_setlightintensity = 0x654,
  SCR_GAMECONST_setlightradius = 0x655,
  SCR_GAMECONST_setlocalprofilearrayvar = 0x656,
  SCR_GAMECONST_setlocalprofilevar = 0x657,
  SCR_GAMECONST_setlocalradarenabled = 0x658,
  SCR_GAMECONST_setlocalradarposition = 0x659,
  SCR_GAMECONST_setlocalwindsource = 0x65A,
  SCR_GAMECONST_setlookat = 0x65B,
  SCR_GAMECONST_setlookatanimnodes = 0x65C,
  SCR_GAMECONST_setlookatent = 0x65D,
  SCR_GAMECONST_setlookattext = 0x65E,
  SCR_GAMECONST_setlookatyawlimits = 0x65F,
  SCR_GAMECONST_setloweredweapon = 0x660,
  SCR_GAMECONST_setlowready = 0x661,
  SCR_GAMECONST_setmantleenabled = 0x662,
  SCR_GAMECONST_setmapcenter = 0x663,
  SCR_GAMECONST_setmapnamestring = 0x664,
  SCR_GAMECONST_setmatchflag = 0x665,
  SCR_GAMECONST_setmatchtalkflag = 0x666,
  SCR_GAMECONST_setmaxhealth = 0x667,
  SCR_GAMECONST_setmaxpitchroll = 0x668,
  SCR_GAMECONST_setmenuroot = 0x669,
  SCR_GAMECONST_setminimap = 0x66A,
  SCR_GAMECONST_setmissilecoasting = 0x66B,
  SCR_GAMECONST_setmixerbehavior = 0x66C,
  SCR_GAMECONST_setmixerexploderid = 0x66D,
  SCR_GAMECONST_setmixerl2rrampspeed = 0x66E,
  SCR_GAMECONST_setmixerlightbehavior = 0x66F,
  SCR_GAMECONST_setmixerlightcolor = 0x670,
  SCR_GAMECONST_setmixerlightexponent = 0x671,
  SCR_GAMECONST_setmixerlightfovrange = 0x672,
  SCR_GAMECONST_setmixerlightintensity = 0x673,
  SCR_GAMECONST_setmixerlightmodels = 0x674,
  SCR_GAMECONST_setmixerlightparam = 0x675,
  SCR_GAMECONST_setmixerlightradius = 0x676,
  SCR_GAMECONST_setmixerlightrotatetime = 0x677,
  SCR_GAMECONST_setmixerparam = 0x678,
  SCR_GAMECONST_setmixerr2lrampspeed = 0x679,
  SCR_GAMECONST_setmixerspinmodels = 0x67A,
  SCR_GAMECONST_setmode = 0x67B,
  SCR_GAMECONST_setmodel = 0x67C,
  SCR_GAMECONST_setmovespeedscale = 0x67D,
  SCR_GAMECONST_setmovingplatformenabled = 0x67E,
  SCR_GAMECONST_setmultiextracamactive = 0x67F,
  SCR_GAMECONST_setnearestenemyscrambler = 0x680,
  SCR_GAMECONST_setneargoalnotifydist = 0x681,
  SCR_GAMECONST_setnodepriority = 0x682,
  SCR_GAMECONST_setnormalhealth = 0x683,
  SCR_GAMECONST_setnorthyaw = 0x684,
  SCR_GAMECONST_setoffhandprimaryclass = 0x685,
  SCR_GAMECONST_setoffhandsecondaryclass = 0x686,
  SCR_GAMECONST_setontargetangle = 0x687,
  SCR_GAMECONST_setorigin = 0x688,
  SCR_GAMECONST_setowner = 0x689,
  SCR_GAMECONST_setperk = 0x68A,
  SCR_GAMECONST_setperks = 0x68B,
  SCR_GAMECONST_setpersistentprofilevar = 0x68C,
  SCR_GAMECONST_setphysacceleration = 0x68D,
  SCR_GAMECONST_setphysangles = 0x68E,
  SCR_GAMECONST_setphysicsgravity = 0x68F,
  SCR_GAMECONST_setphysicsgravitydir = 0x690,
  SCR_GAMECONST_setphysparams = 0x691,
  SCR_GAMECONST_setplacementhint = 0x692,
  SCR_GAMECONST_setplanebarrelroll = 0x693,
  SCR_GAMECONST_setplanegoalpos = 0x694,
  SCR_GAMECONST_setplayerangles = 0x695,
  SCR_GAMECONST_setplayercollision = 0x696,
  SCR_GAMECONST_setplayerignoreradiusdamage = 0x697,
  SCR_GAMECONST_setplayernamestring = 0x698,
  SCR_GAMECONST_setplayerrenderoptions = 0x699,
  SCR_GAMECONST_setplayerspread = 0x69A,
  SCR_GAMECONST_setplayerteamrank = 0x69B,
  SCR_GAMECONST_setplayerviewratescale = 0x69C,
  SCR_GAMECONST_setpotentialthreat = 0x69D,
  SCR_GAMECONST_setpredatoreffect = 0x69E,
  SCR_GAMECONST_setprintchannel = 0x69F,
  SCR_GAMECONST_setproneanimnodes = 0x6A0,
  SCR_GAMECONST_setpulsefx = 0x6A1,
  SCR_GAMECONST_setqosgamedatapayload = 0x6A2,
  SCR_GAMECONST_setrank = 0x6A3,
  SCR_GAMECONST_setredactfx = 0x6A4,
  SCR_GAMECONST_setreverb = 0x6A5,
  SCR_GAMECONST_setrightarc = 0x6A6,
  SCR_GAMECONST_setriotshieldfailhint = 0x6A7,
  SCR_GAMECONST_setrotorspeed = 0x6A8,
  SCR_GAMECONST_setroundsplayed = 0x6A9,
  SCR_GAMECONST_setruntopos = 0x6AA,
  SCR_GAMECONST_setsaveddvar = 0x6AB,
  SCR_GAMECONST_setscale = 0x6AC,
  SCR_GAMECONST_settargethighlight = 0x6AD,
  SCR_GAMECONST_setscoreboardcolumns = 0x6AF,
  SCR_GAMECONST_setscoremultiplier = 0x6B0,
  SCR_GAMECONST_setscriptenemy = 0x6B1,
  SCR_GAMECONST_setscripthintstring = 0x6B3,
  SCR_GAMECONST_setseatoccupied = 0x6B4,
  SCR_GAMECONST_setservervolumetricfogdensity = 0x6B5,
  SCR_GAMECONST_setshader = 0x6B6,
  SCR_GAMECONST_setshaderconstant = 0x6B7,
  SCR_GAMECONST_setslowmotion = 0x6B8,
  SCR_GAMECONST_setsonarenabled = 0x6B9,
  SCR_GAMECONST_setsoundblend = 0x6BA,
  SCR_GAMECONST_setsoundcontext = 0x6BB,
  SCR_GAMECONST_setsoundentcontext = 0x6BC,
  SCR_GAMECONST_setloopstate = 0x6BD,
  SCR_GAMECONST_setsoundpitch = 0x6BE,
  SCR_GAMECONST_setsoundpitchrate = 0x6BF,
  SCR_GAMECONST_setsoundvolume = 0x6C0,
  SCR_GAMECONST_setsoundvolumerate = 0x6C1,
  SCR_GAMECONST_setspawnerteam = 0x6C2,
  SCR_GAMECONST_setspawnpointrandomvariation = 0x6C3,
  SCR_GAMECONST_setspawnpointsbaseweight = 0x6C4,
  SCR_GAMECONST_setspawnweapon = 0x6C5,
  SCR_GAMECONST_setspeed = 0x6C6,
  SCR_GAMECONST_setspeedimmediate = 0x6C7,
  SCR_GAMECONST_setspreadoverride = 0x6C8,
  SCR_GAMECONST_setsprintcooldown = 0x6C9,
  SCR_GAMECONST_setsprintduration = 0x6CA,
  SCR_GAMECONST_setstablemissile = 0x6CB,
  SCR_GAMECONST_setstance = 0x6CC,
  SCR_GAMECONST_setstowedweapon = 0x6CD,
  SCR_GAMECONST_setstunned = 0x6CE,
  SCR_GAMECONST_setsuppressiontime = 0x6D1,
  SCR_GAMECONST_setswitchnode = 0x6D2,
  SCR_GAMECONST_settalktospecies = 0x6D3,
  SCR_GAMECONST_settargetent = 0x6D4,
  SCR_GAMECONST_settargetentity = 0x6D5,
  SCR_GAMECONST_settargetorigin = 0x6D6,
  SCR_GAMECONST_setteam = 0x6D8,
  SCR_GAMECONST_setteamsatellite = 0x6DA,
  SCR_GAMECONST_setteamscore = 0x6DB,
  SCR_GAMECONST_setteamspyplane = 0x6DC,
  SCR_GAMECONST_settenthstimer = 0x6DD,
  SCR_GAMECONST_settenthstimerup = 0x6DE,
  SCR_GAMECONST_settext = 0x6DF,
  SCR_GAMECONST_setthreatbias = 0x6E0,
  SCR_GAMECONST_setthreatbiasagainstall = 0x6E1,
  SCR_GAMECONST_setthreatbiasgroup = 0x6E2,
  SCR_GAMECONST_settoparc = 0x6E6,
  SCR_GAMECONST_setturningability = 0x6E8,
  SCR_GAMECONST_setturretanim = 0x6EA,
  SCR_GAMECONST_setturretcarried = 0x6EB,
  SCR_GAMECONST_setturretignoregoals = 0x6EC,
  SCR_GAMECONST_setturretnode = 0x6ED,
  SCR_GAMECONST_setturrettargetent = 0x6F0,
  SCR_GAMECONST_setturrettargetvec = 0x6F1,
  SCR_GAMECONST_setturretteam = 0x6F2,
  SCR_GAMECONST_setturrettype = 0x6F3,
  SCR_GAMECONST_setuinextlevel = 0x6F4,
  SCR_GAMECONST_setvalue = 0x6F5,
  SCR_GAMECONST_setvehgoalpos = 0x6F6,
  SCR_GAMECONST_setvehicleavoidance = 0x6F8,
  SCR_GAMECONST_setvehiclelockedon = 0x6F9,
  SCR_GAMECONST_setvehiclelookattext = 0x6FA,
  SCR_GAMECONST_setvehiclenodeenabled = 0x6FB,
  SCR_GAMECONST_setvehicletype = 0x6FC,
  SCR_GAMECONST_setvehmaxspeed = 0x6FD,
  SCR_GAMECONST_setvehvelocity = 0x6FE,
  SCR_GAMECONST_setvehweapon = 0x6FF,
  SCR_GAMECONST_setvelocity = 0x700,
  SCR_GAMECONST_setviewangleresistance = 0x701,
  SCR_GAMECONST_setviewclamp = 0x702,
  SCR_GAMECONST_setviewlockent = 0x703,
  SCR_GAMECONST_setviewmodel = 0x704,
  SCR_GAMECONST_setviewmodeldepthoffield = 0x705,
  SCR_GAMECONST_setviewmodelrenderflag = 0x706,
  SCR_GAMECONST_setvisibletoall = 0x707,
  SCR_GAMECONST_setvisibletoplayer = 0x708,
  SCR_GAMECONST_setvolfog = 0x70A,
  SCR_GAMECONST_setvolfogforclient = 0x70B,
  SCR_GAMECONST_setvotetime = 0x70E,
  SCR_GAMECONST_setvoteyescount = 0x70F,
  SCR_GAMECONST_setwatchstyle = 0x711,
  SCR_GAMECONST_setwaterdrops = 0x713,
  SCR_GAMECONST_setwaterfog = 0x714,
  SCR_GAMECONST_setwatersheeting = 0x715,
  SCR_GAMECONST_setwaypoint = 0x716,
  SCR_GAMECONST_setweapon = 0x717,
  SCR_GAMECONST_setweaponammoclip = 0x718,
  SCR_GAMECONST_setweaponammostock = 0x719,
  SCR_GAMECONST_setwetness = 0x71A,
  SCR_GAMECONST_setwinningplayer = 0x71B,
  SCR_GAMECONST_setwinningteam = 0x71C,
  SCR_GAMECONST_setworldfogactivebank = 0x71D,
  SCR_GAMECONST_setyawspeed = 0x71E,
  SCR_GAMECONST_shellshock = 0x71F,
  SCR_GAMECONST_shoot = 0x720,
  SCR_GAMECONST_shootblank = 0x721,
  SCR_GAMECONST_shootrumble = 0x722,
  SCR_GAMECONST_shootshock = 0x723,
  SCR_GAMECONST_shootturret = 0x724,
  SCR_GAMECONST_shootup = 0x725,
  SCR_GAMECONST_shouldfacemotion = 0x726,
  SCR_GAMECONST_shouldmonitorai = 0x727,
  SCR_GAMECONST_show = 0x728,
  SCR_GAMECONST_showallparts = 0x729,
  SCR_GAMECONST_showpart = 0x72A,
  SCR_GAMECONST_showscores = 0x72B,
  SCR_GAMECONST_showui = 0x72C,
  SCR_GAMECONST_sightconetrace = 0x72F,
  SCR_GAMECONST_sightlatency = 0x730,
  SCR_GAMECONST_sighttracepassed = 0x731,
  SCR_GAMECONST_sin = 0x732,
  SCR_GAMECONST_snapshotacknowledged = 0x733,
  SCR_GAMECONST_solid = 0x734,
  SCR_GAMECONST_sort = 0x735,
  SCR_GAMECONST_soundexists = 0x736,
  SCR_GAMECONST_soundgetplaybacktime = 0x737,
  SCR_GAMECONST_soundfade = 0x738,
  SCR_GAMECONST_soundsetmusicstate = 0x739,
  SCR_GAMECONST_soundlineemitter = 0x73A,
  SCR_GAMECONST_soundplaying = 0x73C,
  SCR_GAMECONST_soundstoplineemitter = 0x73D,
  SCR_GAMECONST_soundstoploopemitter = 0x73E,
  SCR_GAMECONST_soundtimescale = 0x73F,
  SCR_GAMECONST_spawn = 0x740,
  SCR_GAMECONST_spawnapalmgroundflame = 0x741,
  SCR_GAMECONST_spawncollision = 0x742,
  SCR_GAMECONST_spawndynent = 0x743,
  SCR_GAMECONST_spawnfakeent = 0x744,
  SCR_GAMECONST_spawnflags = 0x745,
  SCR_GAMECONST_spawnfx = 0x746,
  SCR_GAMECONST_spawnhelicopter = 0x747,
  SCR_GAMECONST_spawnpathnode = 0x748,
  SCR_GAMECONST_spawnplane = 0x749,
  SCR_GAMECONST_spawnstruct = 0x74A,
  SCR_GAMECONST_spawntimedfx = 0x74B,
  SCR_GAMECONST_spawnturret = 0x74C,
  SCR_GAMECONST_spawnvehicle = 0x74D,
  SCR_GAMECONST_species = 0x74E,
  SCR_GAMECONST_spectatorclient = 0x74F,
  SCR_GAMECONST_speed = 0x750,
  SCR_GAMECONST_sphere = 0x751,
  SCR_GAMECONST_splitargs = 0x752,
  SCR_GAMECONST_splitviewallowed = 0x753,
  SCR_GAMECONST_sprinting = 0x755,
  SCR_GAMECONST_sqrt = 0x756,
  SCR_GAMECONST_stabs = 0x757,
  SCR_GAMECONST_stairsstate = 0x758,
  SCR_GAMECONST_start3dcinematic = 0x759,
  SCR_GAMECONST_startactorreact = 0x75A,
  SCR_GAMECONST_startbinocs = 0x75B,
  SCR_GAMECONST_startcameratween = 0x75C,
  SCR_GAMECONST_startcoverarrival = 0x75D,
  SCR_GAMECONST_startcurve = 0x75E,
  SCR_GAMECONST_startfadingblur = 0x760,
  SCR_GAMECONST_startfiring = 0x761,
  SCR_GAMECONST_starthostmigration = 0x762,
  SCR_GAMECONST_startignoringspotlight = 0x763,
  SCR_GAMECONST_startmultiplayergame = 0x764,
  SCR_GAMECONST_startpath = 0x766,
  SCR_GAMECONST_startpoisoning = 0x767,
  SCR_GAMECONST_startprivatematch = 0x768,
  SCR_GAMECONST_startragdoll = 0x769,
  SCR_GAMECONST_startrevive = 0x76A,
  SCR_GAMECONST_startscriptedanim = 0x76B,
  SCR_GAMECONST_startshoot = 0x76C,
  SCR_GAMECONST_starttime = 0x76E,
  SCR_GAMECONST_starttraversearrival = 0x76F,
  SCR_GAMECONST_startwatersheetfx = 0x770,
  SCR_GAMECONST_statechangereason = 0x771,
  SCR_GAMECONST_stop3dcinematic = 0x773,
  SCR_GAMECONST_stopallrumbles = 0x774,
  SCR_GAMECONST_stopanimdistsq = 0x775,
  SCR_GAMECONST_stopanimscripted = 0x776,
  SCR_GAMECONST_stopbink = 0x777,
  SCR_GAMECONST_stopbinocs = 0x778,
  SCR_GAMECONST_stopcarryturret = 0x779,
  SCR_GAMECONST_stopcurve = 0x77A,
  SCR_GAMECONST_stopdoorbreach = 0x77B,
  SCR_GAMECONST_stopextracam = 0x77C,
  SCR_GAMECONST_stopfireweapon = 0x77D,
  SCR_GAMECONST_stopfiring = 0x77E,
  SCR_GAMECONST_stopfx = 0x77F,
  SCR_GAMECONST_stopignoringspotlight = 0x780,
  SCR_GAMECONST_stoplocalsound = 0x781,
  SCR_GAMECONST_stoplookat = 0x782,
  SCR_GAMECONST_stopmoveslide = 0x784,
  SCR_GAMECONST_stoprevive = 0x786,
  SCR_GAMECONST_stoprumble = 0x787,
  SCR_GAMECONST_stopshellshock = 0x788,
  SCR_GAMECONST_stopshoot = 0x789,
  SCR_GAMECONST_stopshootturret = 0x78A,
  SCR_GAMECONST_stopsound = 0x78B,
  SCR_GAMECONST_stopsounds = 0x78C,
  SCR_GAMECONST_stopuseanimtree = 0x78D,
  SCR_GAMECONST_stopuseturret = 0x78E,
  SCR_GAMECONST_stopusingturret = 0x78F,
  SCR_GAMECONST_stopwatersheetfx = 0x790,
  SCR_GAMECONST_strtok = 0x791,
  SCR_GAMECONST_structinfo = 0x792,
  SCR_GAMECONST_suicide = 0x793,
  SCR_GAMECONST_suppressionduration = 0x794,
  SCR_GAMECONST_suppressionmeter = 0x795,
  SCR_GAMECONST_suppressionstarttime = 0x796,
  SCR_GAMECONST_suppressionwait = 0x797,
  SCR_GAMECONST_surprisedbymedistsq = 0x799,
  SCR_GAMECONST_survived = 0x79A,
  SCR_GAMECONST_suspended = 0x79B,
  SCR_GAMECONST_swimming = 0x79C,
  SCR_GAMECONST_switchtoclientvolumetricfog = 0x79D,
  SCR_GAMECONST_switchtooffhand = 0x79E,
  SCR_GAMECONST_switchtoweapon = 0x7A0,
  SCR_GAMECONST_switchtoweaponimmediate = 0x7A1,
  SCR_GAMECONST_syncedmeleetarget = 0x7A2,
  SCR_GAMECONST_tablelookup = 0x7A3,
  SCR_GAMECONST_tablelookupcolumnforrow = 0x7A4,
  SCR_GAMECONST_tablelookupistring = 0x7A5,
  SCR_GAMECONST_tablelookuprownum = 0x7A6,
  SCR_GAMECONST_tablelookupfindcoreasset = 0x7A7,
  SCR_GAMECONST_takeallweapons = 0x7A8,
  SCR_GAMECONST_purchaseitem = 0x7A9,
  SCR_GAMECONST_getitemstatus = 0x7AA,
  SCR_GAMECONST_takedamage = 0x7AB,
  SCR_GAMECONST_takeplayercontrol = 0x7AC,
  SCR_GAMECONST_takeweapon = 0x7AD,
  SCR_GAMECONST_tan = 0x7AE,
  SCR_GAMECONST_target = 0x7AF,
  SCR_GAMECONST_target_clearreticlelockon = 0x7B0,
  SCR_GAMECONST_target_getarray = 0x7B1,
  SCR_GAMECONST_target_isincircle = 0x7B2,
  SCR_GAMECONST_target_isinrect = 0x7B3,
  SCR_GAMECONST_target_istarget = 0x7B4,
  SCR_GAMECONST_target_remove = 0x7B5,
  SCR_GAMECONST_target_set = 0x7B6,
  SCR_GAMECONST_target_setjavelinonly = 0x7B8,
  SCR_GAMECONST_target_setoffscreenshader = 0x7B9,
  SCR_GAMECONST_target_setshader = 0x7BA,
  SCR_GAMECONST_target_setturretaquire = 0x7BB,
  SCR_GAMECONST_target_startreticlelockon = 0x7BC,
  SCR_GAMECONST_target2 = 0x7BD,
  SCR_GAMECONST_targetname = 0x7BE,
  SCR_GAMECONST_team = 0x7BF,
  SCR_GAMECONST_teammovewaittime = 0x7C0,
  SCR_GAMECONST_teleport = 0x7C1,
  SCR_GAMECONST_testspawnpoint = 0x7C2,
  SCR_GAMECONST_threadbias = 0x7C3,
  SCR_GAMECONST_threatbias = 0x7C4,
  SCR_GAMECONST_threatbiasgroup = 0x7C5,
  SCR_GAMECONST_threatbiasgroupexists = 0x7C6,
  SCR_GAMECONST_throwbackgrenadekilledoriginalowner = 0x7C7,
  SCR_GAMECONST_throwbuttonpressed = 0x7C8,
  SCR_GAMECONST_throwdownweapon = 0x7C9,
  SCR_GAMECONST_throwgrenade = 0x7CA,
  SCR_GAMECONST_timedradiusdamage = 0x7CB,
  SCR_GAMECONST_toggleik = 0x7CC,
  SCR_GAMECONST_tolower = 0x7CD,
  SCR_GAMECONST_tomahawks = 0x7CE,
  SCR_GAMECONST_tracepoint = 0x7CF,
  SCR_GAMECONST_trackscriptstate = 0x7D0,
  SCR_GAMECONST_transmittargetname = 0x7D1,
  SCR_GAMECONST_treadfxnamearray = 0x7D3,
  SCR_GAMECONST_triggerfx = 0x7D4,
  SCR_GAMECONST_trimpathtoattack = 0x7D5,
  SCR_GAMECONST_turnrate = 0x7D6,
  SCR_GAMECONST_turretcantarget = 0x7D7,
  SCR_GAMECONST_turretfiredisable = 0x7D8,
  SCR_GAMECONST_turretfireenable = 0x7D9,
  SCR_GAMECONST_turretinvulnerability = 0x7DA,
  SCR_GAMECONST_turretrotscale = 0x7DB,
  SCR_GAMECONST_turretweapon = 0x7DC,
  SCR_GAMECONST_type = 0x7DD,
  SCR_GAMECONST_ufomode = 0x7DE,
  SCR_GAMECONST_ui3dsetwindow = 0x7DF,
  SCR_GAMECONST_ui3dwindow = 0x7E0,
  SCR_GAMECONST_uncruncharray = 0x7E1,
  SCR_GAMECONST_underwater = 0x7E2,
  SCR_GAMECONST_undolaststand = 0x7E3,
  SCR_GAMECONST_unlink = 0x7E4,
  SCR_GAMECONST_unlinkallfromcamera = 0x7E5,
  SCR_GAMECONST_unlinkfromcamera = 0x7E6,
  SCR_GAMECONST_unlinkfrommissile = 0x7E7,
  SCR_GAMECONST_unlinkguidedmissilecamera = 0x7E8,
  SCR_GAMECONST_unlinknodes = 0x7E9,
  SCR_GAMECONST_unsetperk = 0x7EA,
  SCR_GAMECONST_updateplayersightaccuracy = 0x7EE,
  SCR_GAMECONST_updateprone = 0x7EF,
  SCR_GAMECONST_updatestatratio = 0x7F0,
  SCR_GAMECONST_updateweaponoptions = 0x7F1,
  SCR_GAMECONST_uploadstats = 0x7F3,
  SCR_GAMECONST_uploadtime = 0x7F4,
  SCR_GAMECONST_useable = 0x7F5,
  SCR_GAMECONST_usealternateaimparams = 0x7F6,
  SCR_GAMECONST_useanimtree = 0x7F7,
  SCR_GAMECONST_usebuttonheld = 0x7F8,
  SCR_GAMECONST_usebuttonpressed = 0x7F9,
  SCR_GAMECONST_useby = 0x7FA,
  SCR_GAMECONST_usechokepoints = 0x7FB,
  SCR_GAMECONST_usecombatscriptatcover = 0x7FC,
  SCR_GAMECONST_usecovernode = 0x7FD,
  SCR_GAMECONST_usereacquirenode = 0x7FE,
  SCR_GAMECONST_useservervisionset = 0x7FF,
  SCR_GAMECONST_usetriggerrequirelookat = 0x800,
  SCR_GAMECONST_usingturret = 0x804,
  SCR_GAMECONST_usingvehicle = 0x805,
  SCR_GAMECONST_vectorlerp = 0x809,
  SCR_GAMECONST_vectornormalize = 0x80A,
  SCR_GAMECONST_vectorscale = 0x80B,
  SCR_GAMECONST_vectortoangles = 0x80C,
  SCR_GAMECONST_vehcansee = 0x80D,
  SCR_GAMECONST_vehclearentitytarget = 0x80F,
  SCR_GAMECONST_vehicleclass = 0x811,
  SCR_GAMECONST_vehicleposition = 0x812,
  SCR_GAMECONST_vehicletype = 0x813,
  SCR_GAMECONST_vehseenrecently = 0x814,
  SCR_GAMECONST_velocity = 0x817,
  SCR_GAMECONST_vertalign = 0x818,
  SCR_GAMECONST_vibrate = 0x819,
  SCR_GAMECONST_viewkick = 0x81A,
  SCR_GAMECONST_viewlockedentity = 0x81B,
  SCR_GAMECONST_visionsetdamage = 0x81C,
  SCR_GAMECONST_visionsetlaststand = 0x81D,
  SCR_GAMECONST_visionsetlerpratio = 0x81E,
  SCR_GAMECONST_visionsetnaked = 0x81F,
  SCR_GAMECONST_visionsetnight = 0x820,
  SCR_GAMECONST_visionsetunderwater = 0x821,
  SCR_GAMECONST_vteam = 0x822,
  SCR_GAMECONST_wagerwinnings = 0x823,
  SCR_GAMECONST_walkdist = 0x824,
  SCR_GAMECONST_weaponaccuracy = 0x827,
  SCR_GAMECONST_weaponaltweaponname = 0x828,
  SCR_GAMECONST_weaponbayonetinfo = 0x829,
  SCR_GAMECONST_weaponbottomarc = 0x82A,
  SCR_GAMECONST_weaponclass = 0x82B,
  SCR_GAMECONST_weaponclipsize = 0x82C,
  SCR_GAMECONST_weaponcliptype = 0x82D,
  SCR_GAMECONST_weapondogibbing = 0x82E,
  SCR_GAMECONST_weapondualwieldweaponname = 0x82F,
  SCR_GAMECONST_weaponfightdist = 0x830,
  SCR_GAMECONST_weaponfiretime = 0x831,
  SCR_GAMECONST_weaponguidedmissiletype = 0x832,
  SCR_GAMECONST_weaponhasattachment = 0x833,
  SCR_GAMECONST_weaponattachmentcount = 0x834,
  SCR_GAMECONST_weaponhasbayonet = 0x835,
  SCR_GAMECONST_weaponinventorytype = 0x836,
  SCR_GAMECONST_weaponisboltaction = 0x837,
  SCR_GAMECONST_weaponisdualwield = 0x838,
  SCR_GAMECONST_weaponisgasweapon = 0x839,
  SCR_GAMECONST_weaponissemiauto = 0x83A,
  SCR_GAMECONST_weaponischargeshot = 0x83B,
  SCR_GAMECONST_weaponissniperweapon = 0x83C,
  SCR_GAMECONST_weaponleftarc = 0x83D,
  SCR_GAMECONST_weaponlockfinalize = 0x83E,
  SCR_GAMECONST_weaponlocknoclearance = 0x840,
  SCR_GAMECONST_weaponlockonspeed = 0x842,
  SCR_GAMECONST_weaponlocktargettooclose = 0x844,
  SCR_GAMECONST_weaponmaxammo = 0x845,
  SCR_GAMECONST_weaponmaxdist = 0x846,
  SCR_GAMECONST_weaponmountable = 0x848,
  SCR_GAMECONST_weaponreloadtime = 0x849,
  SCR_GAMECONST_weaponrightarc = 0x84A,
  SCR_GAMECONST_weaponspinsettings = 0x84B,
  SCR_GAMECONST_weaponstartammo = 0x84C,
  SCR_GAMECONST_weapontoparc = 0x84D,
  SCR_GAMECONST_weapontype = 0x84E,
  SCR_GAMECONST_width = 0x84F,
  SCR_GAMECONST_worldentnumber = 0x851,
  SCR_GAMECONST_worldtolocalcoords = 0x852,
  SCR_GAMECONST_x = 0x853,
  SCR_GAMECONST_y = 0x855,
  SCR_GAMECONST_z = 0x856,
  SCR_GAMECONST_zerogravityvolumeoff = 0x857,
  SCR_GAMECONST_zerogravityvolumeon = 0x858,
  SCR_GAMECONST_setinvisibletoall = 0x859,
  SCR_GAMECONST_setvisibletoallexceptteam = 0x85A,
  SCR_GAMECONST_setvisibletoteam = 0x85B,
  SCR_GAMECONST_islinkedto = 0x85C,
  SCR_GAMECONST_getangles = 0x85D,
  SCR_GAMECONST_getmins = 0x85E,
  SCR_GAMECONST_getmaxs = 0x85F,
  SCR_GAMECONST_getabsmins = 0x860,
  SCR_GAMECONST_getabsmaxs = 0x861,
  SCR_GAMECONST_istouchingswept = 0x862,
  SCR_GAMECONST_istouchingvolume = 0x863,
  SCR_GAMECONST_playsoundwithnotify = 0x864,
  SCR_GAMECONST_playsoundtoteam = 0x865,
  SCR_GAMECONST_setzombieshrink = 0x867,
  SCR_GAMECONST_showtoplayer = 0x86A,
  SCR_GAMECONST_setrevivehintstring = 0x86B,
  SCR_GAMECONST_setfovforkillcam = 0x86C,
  SCR_GAMECONST_sethintlowpriority = 0x86E,
  SCR_GAMECONST_triggerignoreteam = 0x86F,
  SCR_GAMECONST_spawnnapalmgroundflame = 0x870,
  SCR_GAMECONST_isinsecondchance = 0x872,
  SCR_GAMECONST_depthofplayerinwater = 0x873,
  SCR_GAMECONST_stopburning = 0x874,
  SCR_GAMECONST_displaygamemodemessage = 0x876,
  SCR_GAMECONST_displaycontract = 0x878,
  SCR_GAMECONST_displaychallengecomplete = 0x879,
  SCR_GAMECONST_displayendgame = 0x87B,
  SCR_GAMECONST_displayendgamemilestone = 0x87C,
  SCR_GAMECONST_displayrankup = 0x87D,
  SCR_GAMECONST_displaywagerpopup = 0x87E,
  SCR_GAMECONST_displayhudanim = 0x87F,
  SCR_GAMECONST_isturretlockedon = 0x880,
  SCR_GAMECONST_heliturretsighttrace = 0x881,
  SCR_GAMECONST_heliturretdogtrace = 0x882,
  SCR_GAMECONST_setcameraspikeactive = 0x884,
  SCR_GAMECONST_isinsideheightlock = 0x885,
  SCR_GAMECONST_ismissileinsideheightlock = 0x886,
  SCR_GAMECONST_attachshieldmodel = 0x888,
  SCR_GAMECONST_detachshieldmodel = 0x889,
  SCR_GAMECONST_ismartyrdomgrenade = 0x88A,
  SCR_GAMECONST_setspawnclientflag = 0x88B,
  SCR_GAMECONST_setplayergravity = 0x88D,
  SCR_GAMECONST_clearplayergravity = 0x88E,
  SCR_GAMECONST_setperkfortrigger = 0x88F,
  SCR_GAMECONST_setignoreentfortrigger = 0x890,
  SCR_GAMECONST_isitemlocked = 0x891,
  SCR_GAMECONST_isitempurchased = 0x892,
  SCR_GAMECONST_uploadleaderboards = 0x893,
  SCR_GAMECONST_setnemesisxuid = 0x894,
  SCR_GAMECONST_getmovespeedscale = 0x895,
  SCR_GAMECONST_setzombiename = 0x896,
  SCR_GAMECONST_setentgravitytrajectory = 0x897,
  SCR_GAMECONST_setvehicleteam = 0x898,
  SCR_GAMECONST_setturretminimapvisible = 0x899,
  SCR_GAMECONST_spawnactor = 0x89A,
  SCR_GAMECONST_predictspawnpoint = 0x89B,
  SCR_GAMECONST_makegrenadedud = 0x89C,
  SCR_GAMECONST_getclientflag = 0x89D,
  SCR_GAMECONST_setscriptmoverflag = 0x89E,
  SCR_GAMECONST_fakefire = 0x89F,
  SCR_GAMECONST_predictgrenade = 0x8A0,
  SCR_GAMECONST_getindexforactivecontract = 0x8A1,
  SCR_GAMECONST_getactivecontractprogress = 0x8A2,
  SCR_GAMECONST_incrementactivecontractprogress = 0x8A3,
  SCR_GAMECONST_incrementactivecontracttime = 0x8A4,
  SCR_GAMECONST_isactivecontractcomplete = 0x8A5,
  SCR_GAMECONST_getactivecontracttimepassed = 0x8A7,
  SCR_GAMECONST_resetactivecontractprogress = 0x8A8,
  SCR_GAMECONST_getpregameclass = 0x8A9,
  SCR_GAMECONST_getpregameteam = 0x8AA,
  SCR_GAMECONST_setpregameteam = 0x8AC,
  SCR_GAMECONST_istestclient = 0x8AD,
  SCR_GAMECONST_actorikenabled = 0x8AE,
  SCR_GAMECONST_aimatentityik = 0x8AF,
  SCR_GAMECONST_aimatposik = 0x8B0,
  SCR_GAMECONST_setthirdperson = 0x8B1,
  SCR_GAMECONST_project2dto3d = 0x8B2,
  SCR_GAMECONST_throw = 0x8B3,
  SCR_GAMECONST_forwardrotatearoundupbyangle = 0x8B4,
  SCR_GAMECONST_linktoupdateoffset = 0x8B5,
  SCR_GAMECONST_setcharacterindex = 0x8B6,
  SCR_GAMECONST_getcharacterindex = 0x8B7,
  SCR_GAMECONST_usefootsteptable = 0x8B9,
  SCR_GAMECONST_useplayerfootsteptable = 0x8BA,
  SCR_GAMECONST_footstepdonothing = 0x8BB,
  SCR_GAMECONST_footstepdoeverything = 0x8BC,
  SCR_GAMECONST_footstepdosound = 0x8BD,
  SCR_GAMECONST_footstepdofootstepfx = 0x8BE,
  SCR_GAMECONST_usefootstepfxtable = 0x8BF,
  SCR_GAMECONST_setmaterialoverride = 0x8C0,
  SCR_GAMECONST_clearmaterialoverride = 0x8C1,
  SCR_GAMECONST_setsteptriggersound = 0x8C2,
  SCR_GAMECONST_clearsteptriggersound = 0x8C3,
  SCR_GAMECONST_getmovementtype = 0x8C4,
  SCR_GAMECONST_luiload = 0x8C5,
  SCR_GAMECONST_luihide = 0x8C7,
  SCR_GAMECONST_luievent = 0x8C8,
  SCR_GAMECONST_startzombies = 0x8CA,
  SCR_GAMECONST_launchsavegame = 0x8CB,
  SCR_GAMECONST_suienable = 0x8CC,
  SCR_GAMECONST_suidisable = 0x8CD,
  SCR_GAMECONST_bbclasschoice = 0x8CE,
  SCR_GAMECONST_luienable = 0x8CF,
  SCR_GAMECONST_luidisable = 0x8D0,
  SCR_GAMECONST_isluienabled = 0x8D1,
  SCR_GAMECONST_argusgetorigin = 0x8D2,
  SCR_GAMECONST_deleteelem = 0x8D3,
  SCR_GAMECONST_argussetdistance = 0x8D5,
  SCR_GAMECONST_argussetvisible = 0x8D7,
  SCR_GAMECONST_argussetstacked = 0x8D8,
  SCR_GAMECONST_argussetbracket = 0x8D9,
  SCR_GAMECONST_removeargus = 0x8DA,
  SCR_GAMECONST_getanimforstate = 0x8DB,
  SCR_GAMECONST_iscinematicinprogress = 0x8DC,
  SCR_GAMECONST_iscinematicpreloading = 0x8DD,
  SCR_GAMECONST_argussetoffset = 0x8DE,
  SCR_GAMECONST_setsonarattachmentenabled = 0x8E0,
  SCR_GAMECONST_precacheleaderboards = 0x8E1,
  SCR_GAMECONST_setcolorelem = 0x8E2,
  SCR_GAMECONST_moveelem = 0x8E3,
  SCR_GAMECONST_presentation_rate = 0x8E4,
  SCR_GAMECONST_rpc = 0x8E5,
  SCR_GAMECONST_is_visible = 0x8E6,
  SCR_GAMECONST_rotateelem = 0x8E7,
  SCR_GAMECONST_vehfovcosine = 0x8E8,
  SCR_GAMECONST_vehfovcosinebusy = 0x8E9,
  SCR_GAMECONST_vehmaxsightdistsqrd = 0x8EA,
  SCR_GAMECONST_vehsightlatency = 0x8EB,
  SCR_GAMECONST_vehignoreclosefoliage = 0x8EC,
  SCR_GAMECONST_setripplewave = 0x8ED,
  SCR_GAMECONST_x_alignment = 0x8EE,
  SCR_GAMECONST_y_alignment = 0x8EF,
  SCR_GAMECONST_x_anchor = 0x8F0,
  SCR_GAMECONST_y_anchor = 0x8F1,
  SCR_GAMECONST_elemvirtualtophysical = 0x8F2,
  SCR_GAMECONST_elemphysicaltovirtual = 0x8F3,
  SCR_GAMECONST_gettimefromvehiclenodetonode = 0x8F4,
  SCR_GAMECONST_ishostforbots = 0x8F5,
  SCR_GAMECONST_is_radial = 0x8F6,
  SCR_GAMECONST_start_angle = 0x8F7,
  SCR_GAMECONST_newradialmaterialelem = 0x8F9,
  SCR_GAMECONST_scale_children = 0x8FA,
  SCR_GAMECONST_argusgetui = 0x8FB,
  SCR_GAMECONST_columns = 0x8FC,
  SCR_GAMECONST_rows = 0x8FD,
  SCR_GAMECONST_precacheanimstatedef = 0x8FE,
  SCR_GAMECONST_setanimstatefromasd = 0x8FF,
  SCR_GAMECONST_hasanimstatefromasd = 0x900,
  SCR_GAMECONST_getanimstatefromasd = 0x901,
  SCR_GAMECONST_getanimsubstatefromasd = 0x902,
  SCR_GAMECONST_getanimsubstatecountfromasd = 0x903,
  SCR_GAMECONST_getanimfromasd = 0x904,
  SCR_GAMECONST_getanimlengthfromasd = 0x905,
  SCR_GAMECONST_getanimhasnotetrackfromasd = 0x906,
  SCR_GAMECONST_argusforcedrawbracket = 0x907,
  SCR_GAMECONST_chargeshotlevel = 0x908,
  SCR_GAMECONST_skillcleardata = 0x909,
  SCR_GAMECONST_skillplayersetresult = 0x90A,
  SCR_GAMECONST_skillupdate = 0x90B,
  SCR_GAMECONST_recordleaguewinner = 0x90C,
  SCR_GAMECONST_recordleaguepreloser = 0x90D,
  SCR_GAMECONST_fixedlinkyawonly = 0x90E,
  SCR_GAMECONST_getzbarrierarray = 0x90F,
  SCR_GAMECONST_iszbarrier = 0x910,
  SCR_GAMECONST_getnumzbarrierpieces = 0x911,
  SCR_GAMECONST_getzbarrierpiecestate = 0x912,
  SCR_GAMECONST_setzbarrierpiecestate = 0x913,
  SCR_GAMECONST_iszbarrieropen = 0x914,
  SCR_GAMECONST_iszbarrierclosed = 0x915,
  SCR_GAMECONST_hidezbarrierpiece = 0x916,
  SCR_GAMECONST_showzbarrierpiece = 0x917,
  SCR_GAMECONST_zbarrierpieceusedefaultmodel = 0x918,
  SCR_GAMECONST_zbarrierpieceusealternatemodel = 0x919,
  SCR_GAMECONST_zbarrierpieceuseupgradedmodel = 0x91A,
  SCR_GAMECONST_getupgradedpiecenumlives = 0x91B,
  SCR_GAMECONST_getzbarrierpieceanimlengthforstate = 0x91D,
  SCR_GAMECONST_getzbarrierpieceanimstate = 0x91E,
  SCR_GAMECONST_getzbarrierpieceanimsubstate = 0x91F,
  SCR_GAMECONST_zbarriersupportszombietaunts = 0x920,
  SCR_GAMECONST_getzbarriertauntanimstate = 0x922,
  SCR_GAMECONST_getzbarriernumattackslots = 0x924,
  SCR_GAMECONST_getzbarrierattackslothorzoffset = 0x925,
  SCR_GAMECONST_setpathtransitiontime = 0x926,
  SCR_GAMECONST_setteamhasmeat = 0x927,
  SCR_GAMECONST_vehdontejectoccupantsondeath = 0x928,
  SCR_GAMECONST_nodesarelinked = 0x929,
  SCR_GAMECONST_forceyellowdot = 0x92A,
  SCR_GAMECONST_disableyellowdot = 0x92B,
  SCR_GAMECONST_allowcamerarotation = 0x92C,
  SCR_GAMECONST_reloadonnunchuk = 0x92D,
  SCR_GAMECONST_reloadonwiiumote = 0x92E,
  SCR_GAMECONST_debugbreak = 0x92F,
  SCR_GAMECONST_setcheapflag = 0x930,
  SCR_GAMECONST_physicsjetthrust = 0x931,
  SCR_GAMECONST_getpathfixedoffset = 0x932,
  SCR_GAMECONST_getvehicleavoidancenodes = 0x934,
  SCR_GAMECONST_ismeleecharged = 0x935,
  SCR_GAMECONST_initialweaponraise = 0x936,
  SCR_GAMECONST_seteverhadweaponall = 0x937,
  SCR_GAMECONST_getcurrentweaponspinlerp = 0x938,
  SCR_GAMECONST_setcurrentweaponspinlerp = 0x939,
  SCR_GAMECONST_lightfxtagarray = 0x93B,
  SCR_GAMECONST_friendlylightfxtag = 0x93D,
  SCR_GAMECONST_enemylightfxname = 0x93E,
  SCR_GAMECONST_settypewriterfx = 0x941,
  SCR_GAMECONST_playerbeingspectated = 0x942,
  SCR_GAMECONST_weaponplayejectbrass = 0x943,
  SCR_GAMECONST_setdrawinfrared = 0x944,
  SCR_GAMECONST_newdamageindicatorhudelem = 0x945,
  SCR_GAMECONST_sprintuprequired = 0x946,
  SCR_GAMECONST_atgoal = 0x947,
  SCR_GAMECONST_hasgoal = 0x948,
  SCR_GAMECONST_isusingoffhand = 0x949,
  SCR_GAMECONST_arrayremovevalue = 0x94A,
  SCR_GAMECONST_arrayremoveindex = 0x94B,
  SCR_GAMECONST_trackweaponfirenative = 0x94D,
  SCR_GAMECONST_arraycombine = 0x94E,
  SCR_GAMECONST_arraycopy = 0x94F,
  SCR_GAMECONST_bbpostdemostreamstatsforround = 0x950,
  SCR_GAMECONST_isinarray = 0x951,
  SCR_GAMECONST_remotecontrolturret = 0x952,
  SCR_GAMECONST_remotecontrolturretoff = 0x953,
  SCR_GAMECONST_recordkillstreakevent = 0x954,
  SCR_GAMECONST_recordgameevent = 0x955,
  SCR_GAMECONST_recordmedal = 0x957,
  SCR_GAMECONST_recordloadoutandperks = 0x958,
  SCR_GAMECONST_recordnumzombierounds = 0x959,
  SCR_GAMECONST_recordgameresult = 0x95A,
  SCR_GAMECONST_recordmultikill = 0x95B,
  SCR_GAMECONST_registerclientfield = 0x95C,
  SCR_GAMECONST_codegetworldclientfield = 0x960,
  SCR_GAMECONST_setlightingentity = 0x961,
  SCR_GAMECONST_vehmodel = 0x962,
  SCR_GAMECONST_vehmodelenemy = 0x963,
  SCR_GAMECONST_setplayercurrentobjective = 0x964,
  SCR_GAMECONST_setobjectivepointstatus = 0x965,
  SCR_GAMECONST_setdemolockonvalues = 0x966,
  SCR_GAMECONST_ignorecheapentityflag = 0x967,
  SCR_GAMECONST_setforceads = 0x968,
  SCR_GAMECONST_setlutvolumeactivebank = 0x969,
  SCR_GAMECONST_getlastarraykey = 0x96A,
  SCR_GAMECONST_getprevarraykey = 0x96B,
  SCR_GAMECONST_makesentient = 0x96C,
  SCR_GAMECONST_coversearchinterval = 0x96D,
  SCR_GAMECONST_agrkills = 0x96E,
  SCR_GAMECONST_hacks = 0x96F,
  SCR_GAMECONST_setplayercurrentstreak = 0x970,
  SCR_GAMECONST_currentspectatingclient = 0x971,
  SCR_GAMECONST_goodenemyonly = 0x972,
  SCR_GAMECONST_scriptmodelsuseanimtree = 0x973,
  SCR_GAMECONST_toupper = 0x974,
  SCR_GAMECONST_getcontrollertype = 0x975,
  SCR_GAMECONST_setambienttrigger = 0x976,
  SCR_GAMECONST_setambientpackage = 0x977,
  SCR_GAMECONST_forceambientroom = 0x978,
  SCR_GAMECONST_forceambientpackage = 0x979,
  SCR_GAMECONST_setambientroomcontextengine = 0x97A,
  SCR_GAMECONST_ambient_package = 0x97B,
  SCR_GAMECONST_createqrcode = 0x97C,
  SCR_GAMECONST_getnearestnode = 0x97E,
  SCR_GAMECONST_getvisiblenode = 0x97F,
  SCR_GAMECONST_gamepadusedlast = 0x980,
  SCR_GAMECONST_vehcheckforpredictedcrash = 0x981,
  SCR_GAMECONST_vehonpath = 0x982,
  SCR_GAMECONST_turnedhuman = 0x983,
  SCR_GAMECONST_usealternatereviveicon = 0x984,
  SCR_GAMECONST_setdvarint = 0x985,
  SCR_GAMECONST_clearlookat = 0x986,
  SCR_GAMECONST_vehaircraftcollisionenabled = 0x988,
  SCR_GAMECONST_tension = 0x989,
  SCR_GAMECONST_nodesvisible = 0x98A,
  SCR_GAMECONST_nodescanpath = 0x98B,
  SCR_GAMECONST_setlutscriptindex = 0x98C,
  SCR_GAMECONST_getloadoutitemref = 0x98D,
  SCR_GAMECONST_getloadoutweapon = 0x98E,
  SCR_GAMECONST_getloadoutperks = 0x98F,
  SCR_GAMECONST_codesetplayerstateclientfield = 0x990,
  SCR_GAMECONST_codegetplayerstateclientfield = 0x991,
  SCR_GAMECONST_getmissileowner = 0x993,
  SCR_GAMECONST_canclaimnode = 0x994,
  SCR_GAMECONST_setweaponoverheating = 0x996,
  SCR_GAMECONST_getloadoutallocation = 0x997,
  SCR_GAMECONST_getvisiblenodes = 0x998,
  SCR_GAMECONST_visionsetnakedlerp = 0x999,
  SCR_GAMECONST_cincaptureenablealpha = 0x99A,
  SCR_GAMECONST_cincapturedisablealpha = 0x99B,
  SCR_GAMECONST_sethidegumpalpha = 0x99C,
  SCR_GAMECONST_gettouchingvolume = 0x99D,
  SCR_GAMECONST_objective_visibleteams = 0x99E,
  SCR_GAMECONST_objective_setprogress = 0x99F,
  SCR_GAMECONST_objective_setplayerusing = 0x9A0,
  SCR_GAMECONST_objective_clearplayerusing = 0x9A1,
  SCR_GAMECONST_objective_clearallusing = 0x9A2,
  SCR_GAMECONST_forceoffhandend = 0x9A3,
  SCR_GAMECONST_objective_setgamemodeflags = 0x9A4,
  SCR_GAMECONST_objective_getgamemodeflags = 0x9A5,
  SCR_GAMECONST_setupclientfieldcodecallbacks = 0x9A6,
  SCR_GAMECONST_zbarrierpieceuseboxriselogic = 0x9A7,
  SCR_GAMECONST_resetzombieboxweapons = 0x9A8,
  SCR_GAMECONST_addzombieboxweapon = 0x9A9,
  SCR_GAMECONST_getmoverent = 0x9AA,
  SCR_GAMECONST_objective_clearentity = 0x9AB,
  SCR_GAMECONST_ismovingplatform = 0x9AC,
  SCR_GAMECONST_entitytrace = 0x9AD,
  SCR_GAMECONST_allowattack = 0x9AE,
  SCR_GAMECONST_pressads = 0x9AF,
  SCR_GAMECONST_predictposition = 0x9B1,
  SCR_GAMECONST_botsighttracepassed = 0x9B2,
  SCR_GAMECONST_isreloading = 0x9B3,
  SCR_GAMECONST_setmissileowner = 0x9B4,
  SCR_GAMECONST_getgunangles = 0x9B5,
  SCR_GAMECONST_setinitialplayersconnected = 0x9B6,
  SCR_GAMECONST_setzbarriercolmodel = 0x9B7,
  SCR_GAMECONST_stancebuttonpressed = 0x9B8,
  SCR_GAMECONST_arraysort = 0x9B9,
  SCR_GAMECONST_worldtrace = 0x9BA,
  SCR_GAMECONST_getdamageableentarray = 0x9BB,
  SCR_GAMECONST_vehhighlyawareradius = 0x9BC,
  SCR_GAMECONST_pressmelee = 0x9BD,
  SCR_GAMECONST_setmaplatlong = 0x9BE,
  SCR_GAMECONST_setteamreviveicon = 0x9BF,
  SCR_GAMECONST_allowtacticalinsertion = 0x9C0,
  SCR_GAMECONST_recordkillstreakendevent = 0x9C1,
  SCR_GAMECONST_incrementlifestat = 0x9C2,
  SCR_GAMECONST_incrementplayerstat = 0x9C3,
  SCR_GAMECONST_recordmatchsummaryzombieendgamedata = 0x9C4,
  SCR_GAMECONST_matchrecorderincrementheaderstat = 0x9C5,
  SCR_GAMECONST_recordplayerdeathzombies = 0x9C6,
  SCR_GAMECONST_recordmatchinit = 0x9C7,
  SCR_GAMECONST_recordloadoutperksandkillstreaks = 0x9C8,
  SCR_GAMECONST_setpitchorient = 0x9C9,
  SCR_GAMECONST_getfriendlies = 0x9CA,
  SCR_GAMECONST_getenemies = 0x9CB,
  SCR_GAMECONST_getutc = 0x9CC,
  SCR_GAMECONST_luinotifyeventtospectators = 0x9CD,
  SCR_GAMECONST_setweaponheatpercent = 0x9CE,
  SCR_GAMECONST_forceinfraredmaterialsstreaming = 0x9CF,
  SCR_GAMECONST_setalphafadeforname = 0x9D0,
  SCR_GAMECONST_botsetfailsafenode = 0x9D1,
  SCR_GAMECONST_pressdtpbutton = 0x9D2,
  SCR_GAMECONST_setactorweapon = 0x9D5,
  SCR_GAMECONST_immunetodemogamehudsettings = 0x9D6,
  SCR_GAMECONST_getcurrentweaponaltweapon = 0x9D8,
  SCR_GAMECONST_murderline = 0x9D9,
  SCR_GAMECONST_setentityweapon = 0x9DA,
  SCR_GAMECONST_gamehistoryfinishmatch = 0x9DB,
  SCR_GAMECONST_animflaggedscripted = 0x9DC,
  SCR_GAMECONST_getloadoutitemindex = 0x9DD,
  SCR_GAMECONST_ishidden = 0x9DE,
  SCR_GAMECONST_getclientfieldversion = 0x9DF,
  SCR_GAMECONST_getfreeactorcount = 0x9E0,
  SCR_GAMECONST_fxblocksight = 0x9E3,
  SCR_GAMECONST_allowbottargetting = 0x9E4,
  SCR_GAMECONST_getserverhighestclientfieldversion = 0x9E5,
  SCR_GAMECONST_setblurbylocalclientnum = 0x9E6,
  SCR_GAMECONST_killsconfirmed = 0x9E7,
  SCR_GAMECONST_killsdenied = 0x9E8,
  SCR_GAMECONST_isweapondisallowedatmatchstart = 0x9E9,
  SCR_GAMECONST_is_ps3 = 0x9EA,
  SCR_GAMECONST_is_xenon = 0x9EB,
  SCR_GAMECONST_is_pc = 0x9EC,
  SCR_GAMECONST_is_wiiu = 0x9ED,
  SCR_GAMECONST_botsetdefaultclass = 0x9EE,
  SCR_GAMECONST_botclassadditem = 0x9EF,
  SCR_GAMECONST_botclassaddattachment = 0x9F0,
  SCR_GAMECONST_getweaponattachments = 0x9F2,
  SCR_GAMECONST_getwiiuremotepointerposition = 0x9F3,
  SCR_GAMECONST_getcamposbylocalclientnum = 0x9F4,
  SCR_GAMECONST_getcamanglesbylocalclientnum = 0x9F5,
  SCR_GAMECONST_demoisanyfreemovecamera = 0x9F6,
  SCR_GAMECONST_demoismoviecamera = 0x9F7,
  SCR_GAMECONST_demoisdollycamera = 0x9F9,
  SCR_GAMECONST_movepoint = 0x9FA,
  SCR_GAMECONST_setfreecameralockonallowed = 0x9FB,
  SCR_GAMECONST_botleavegame = 0x9FC,
  SCR_GAMECONST_immunetodemofreecamera = 0x9FD,
  SCR_GAMECONST_setrenderinthirdpersonspectate = 0x9FE,
  SCR_GAMECONST_iscinematicwebm = 0x9FF,
  SCR_GAMECONST_ghostindemo = 0xA00,
  SCR_GAMECONST_showindemo = 0xA01,
  SCR_GAMECONST_useweaponmodel = 0xA02,
  SCR_GAMECONST_islocalgame = 0xA03,
  SCR_GAMECONST_refreshshieldattachment = 0xA04,
  SCR_GAMECONST_overridelightingorigin = 0xA05,
  SCR_GAMECONST_gpsjammeractive = 0xA06,
  SCR_GAMECONST_gpsjammerinactive = 0xA07,
  SCR_GAMECONST_finishmeleehit = 0xA08,
  SCR_GAMECONST_makelightslave = 0xA09,
  SCR_GAMECONST_getenterbutton = 0xA0A,
  SCR_GAMECONST_setforcenotsimple = 0xA0B,
  SCR_GAMECONST_forcegrenadethrow = 0xA0C,
  SCR_GAMECONST_setoffhandvisible = 0xA0D,
  SCR_GAMECONST_sendkillstreakdamageevent = 0xA0E,
  SCR_GAMECONST_getstowedweapon = 0xA0F,
  SCR_GAMECONST_createstreamermodelhint = 0xA10,
  SCR_GAMECONST_fakedamagefrom = 0xA11,
  SCR_GAMECONST_doesweaponreplacespawnweapon = 0xA12,
  SCR_GAMECONST_MAX = 0xA15,
};

/* 756 */
enum fieldtype_t
{
  F_INT = 0x0,
  F_SHORT = 0x1,
  F_BYTE = 0x2,
  F_FLOAT = 0x3,
  F_LSTRING = 0x4,
  F_STRING = 0x5,
  F_VECTOR = 0x6,
  F_ENTITY = 0x7,
  F_ENTHANDLE = 0x8,
  F_ACTOR = 0x9,
  F_SENTIENT = 0xA,
  F_SENTIENTHANDLE = 0xB,
  F_CLIENT = 0xC,
  F_PATHNODE = 0xD,
  F_ACTORGROUP = 0xE,
  F_VECTORHACK = 0xF,
  F_OBJECT = 0x10,
  F_XMODEL_INDEX = 0x11,
  F_XMODEL = 0x12,
  F_BITFLAG = 0x13,
  F_FX = 0x14,
};

/* 757 */
enum $8A9D39BCFFE01273B7AAEA46ECEC0CB9
{
  ENTFIELD_ENTITY = 0x0,
  ENTFIELD_SENTIENT = 0x2000,
  ENTFIELD_ACTOR = 0x4000,
  ENTFIELD_CLIENT = 0x6000,
  ENTFIELD_VEHICLE = 0x8000,
  ENTFIELD_MASK = 0xE000,
};

/* 758 */
enum ai_event_t
{
  AI_EV_BAD = 0x0,
  AI_EV_FIRST_POINT_EVENT = 0x1,
  AI_EV_FOOTSTEP = 0x2,
  AI_EV_FOOTSTEP_LITE = 0x3,
  AI_EV_NEW_ENEMY = 0x4,
  AI_EV_PAIN = 0x5,
  AI_EV_REACT = 0x6,
  AI_EV_DEATH = 0x7,
  AI_EV_EXPLOSION = 0x8,
  AI_EV_GRENADE_PING = 0x9,
  AI_EV_PROJECTILE_PING = 0xA,
  AI_EV_GUNSHOT = 0xB,
  AI_EV_SILENCED_SHOT = 0xC,
  AI_EV_LAST_POINT_EVENT = 0xD,
  AI_EV_FIRST_LINE_EVENT = 0xE,
  AI_EV_BULLET = 0xF,
  AI_EV_BLOCK_FRIENDLIES = 0x10,
  AI_EV_BULLET_REACT = 0x11,
  AI_EV_PROJECTILE_IMPACT = 0x12,
  AI_EV_LAST_LINE_EVENT = 0x13,
  AI_EV_FIRST_ARC_EVENT = 0x14,
  AI_EV_BADPLACE_ARC = 0x15,
  AI_EV_BADPLACE_LIMITED_ARC = 0x16,
  AI_EV_REALLY_BADPLACE_ARC = 0x17,
  AI_EV_LAST_ARC_EVENT = 0x18,
  AI_EV_FIRST_VOLUME_EVENT = 0x19,
  AI_EV_BADPLACE_VOLUME = 0x1A,
  AI_EV_LAST_VOLUME_EVENT = 0x1B,
  AI_EV_NUM_EVENTS = 0x1C,
};

/* 759 */
enum $9B94FB67DFE5FD8D5F4161BFB17650A5
{
  SCR_SYS_GAME = 0x1,
};

/* 760 */
enum $6F8F8CA9F7E203114524E2115DC1A28B
{
  PLF_SAFE_SHUFFLE_LINK = 0x1,
  PLF_DOOR_SHUFFLE_LINK = 0x2,
  PLF_SCRIPT_LINK = 0x4,
  PLF_DOUBLE_WIDE = 0x8,
  PLF_REDUNDANT = 0x10,
  PLF_QUADROTOR = 0x20,
};

/* 761 */
enum RadiantCommandType
{
  RADIANT_COMMAND_SELECT = 0x0,
  RADIANT_COMMAND_DESELECT = 0x1,
  RADIANT_COMMAND_UPDATE_SELECTED = 0x2,
  RADIANT_COMMAND_UPDATE = 0x3,
  RADIANT_COMMAND_CREATE = 0x4,
  RADIANT_COMMAND_DELETE = 0x5,
  RADIANT_COMMAND_CAMERA = 0x6,
  RADIANT_COMMAND_CAMERA_POLL = 0x7,
};

/* 762 */
typedef MACRO_GT_UNKNOWN GUIDType;

/* 763 */
enum $F7EC8E6EBE1EECAD8EDBDD69F5F6EF7E
{
  FL_GODMODE = 0x1,
  FL_DEMI_GODMODE = 0x2,
  FL_NOTARGET = 0x4,
  FL_NO_KNOCKBACK = 0x8,
  FL_DROPPED_ITEM = 0x10,
  FL_NO_BOTS = 0x20,
  FL_NO_HUMANS = 0x40,
  FL_TOGGLE = 0x80,
  FL_SOFTACTIVATE = 0x100,
  FL_LOW_PRIORITY_USEABLE = 0x200,
  FL_NO_TACTICAL_INSERTION = 0x400,
  FL_DYNAMICPATH = 0x800,
  FL_SUPPORTS_LINKTO = 0x1000,
  FL_NO_AUTO_ANIM_UPDATE = 0x2000,
  FL_GRENADE_TOUCH_DAMAGE = 0x4000,
  FL_GRENADE_MARTYRDOM = 0x8000,
  FL_MISSILE_DESTABILIZED = 0x10000,
  FL_STABLE_MISSILES = 0x20000,
  FL_REPEAT_ANIM_UPDATE = 0x40000,
  FL_VEHICLE_TARGET = 0x80000,
  FL_GROUND_ENT = 0x100000,
  FL_CURSOR_HINT = 0x200000,
  FL_USE_TURRET = 0x400000,
  FL_MISSILE_ATTRACTOR = 0x800000,
  FL_TARGET = 0x1000000,
  FL_WEAPON_BEING_GRABBED = 0x2000000,
  FL_OBSTACLE = 0x4000000,
  FL_DODGE_LEFT = 0x8000000,
  FL_DODGE_RIGHT = 0x10000000,
  FL_BADPLACE_VOLUME = 0x20000000,
  FL_AUTO_BLOCKPATHS = 0x40000000,
  FL_MOVER_SLIDE = 0x80000000,
};

/* 764 */
enum actor_think_result_t
{
  ACTOR_THINK_DONE = 0x0,
  ACTOR_THINK_REPEAT = 0x1,
  ACTOR_THINK_MOVE_TO_BODY_QUEUE = 0x2,
};

/* 765 */
enum ThreatDebugStringCategory
{
  TDS_TOTAL_THREAT = 0x0,
  TDS_FLASHED = 0x1,
  TDS_SUPPRESSED = 0x2,
  TDS_THREATBIAS = 0x3,
  TDS_THREATBIAS_GROUP = 0x4,
  TDS_ATTACKER_COUNT = 0x5,
  TDS_CUR_ENEMY_BONUS = 0x6,
  TDS_AWARENESS = 0x7,
  TDS_DIST_THREAT = 0x8,
  TDS_SCARINESS_THREAT = 0x9,
  TDS_NO_COVER = 0xA,
  NUM_TDS = 0xB,
};

/* 766 */
enum AI_MOVE_MODE
{
  AI_MOVE_DEFAULT = 0xFFFFFFFF,
  AI_MOVE_STOP = 0x0,
  AI_MOVE_STOP_SOON = 0x1,
  AI_MOVE_WALK = 0x2,
  AI_MOVE_RUN = 0x3,
  NUM_AI_MOVE_MODES = 0x4,
};

/* 767 */
enum ai_teammove_t
{
  AI_TEAMMOVE_TRAVEL = 0x0,
  AI_TEAMMOVE_WAIT = 0x1,
  AI_TEAMMOVE_SLOW_DOWN = 0x2,
};

/* 768 */
enum $3984E34AA27269E7B97CA82ED99773A4
{
  AISF_SPAWNER = 0x1,
  AISF_FORCESPAWN = 0x2,
  AISF_UNDELETABLE = 0x4,
  AISF_ENEMYINFO = 0x8,
  AIS_SCRIPT_FORCESPAWN = 0x10,
};

/* 769 */
enum enumForceSpawn
{
  CHECK_SPAWN = 0x0,
  FORCE_SPAWN = 0x1,
};

/* 770 */
enum DEBUGMAYMOVE_LIFT_ENUM
{
  DEBUGMAYMOVE_NOT_LIFTED = 0x0,
  DEBUGMAYMOVE_LIFTED = 0x1,
};

/* 771 */
enum $9505FA1F29307E39AD89C64EA52FAA6A
{
  IMPACTEFFECT_HEADSHOT = 0x1,
  IMPACTEFFECT_FATAL = 0x2,
  IMPACTEFFECT_EXIT = 0x4,
  IMPACTEFFECT_UNDERWATER = 0x8,
  IMPACTEFFECT_VEH_ARMOR = 0x10,
  IMPACTEFFECT_VEH_LOCOMOTION = 0x20,
};

/* 772 */
enum SlideMoveResult
{
  SLIDEMOVE_COMPLETE = 0x0,
  SLIDEMOVE_CLIPPED = 0x1,
  SLIDEMOVE_FAIL = 0x2,
};

/* 773 */
enum $0104FC9B5B2ECB33FFB52A72D172B4A3
{
  RELATIVE_DIR_NONE = 0x0,
  RELATIVE_DIR_FRONT = 0x1,
  RELATIVE_DIR_LEFT = 0x2,
  RELATIVE_DIR_RIGHT = 0x3,
  RELATIVE_DIR_BACK = 0x4,
  NUM_RELATIVE_DIR = 0x5,
};

/* 774 */
enum NodeClaimSpecies
{
  NODE_CLAIM_SPECIES_BOT = 0x0,
  NODE_CLAIM_SPECIES_MAX = 0x1,
};

/* 775 */
enum PredictionTraceResult
{
  PTR_SUCCESS = 0x0,
  PTR_HIT_WORLD = 0x1,
  PTR_HIT_ENTITY = 0x2,
};

/* 776 */
enum BotGoalPriority
{
  GOAL_PRIORITY_UNUSED = 0x0,
  GOAL_PRIORITY_LOW = 0x1,
  GOAL_PRIORITY_NORMAL = 0x2,
  GOAL_PRIORITY_HIGH = 0x3,
  GOAL_PRIORITY_URGENT = 0x4,
  GOAL_PRIORITY_MAX = 0x5,
};

/* 777 */
enum BotStance
{
  BOT_STANCE_STAND = 0x0,
  BOT_STANCE_CROUCH = 0x1,
  BOT_STANCE_PRONE = 0x2,
};

/* 778 */
enum scriptAnimAIFunctionTypes_t
{
  AI_ANIM_FUNCTION_STOP = 0x0,
  AI_ANIM_FUNCTION_MOVE = 0x1,
  AI_ANIM_FUNCTION_COMBAT = 0x2,
  AI_ANIM_FUNCTION_PAIN = 0x3,
  AI_ANIM_FUNCTION_REACT = 0x4,
  AI_ANIM_FUNCTION_DEATH = 0x5,
};

/* 779 */
enum PARM_SUPPRESSION
{
  DO_SUPPRESSION = 0x0,
  DONT_SUPPRESS = 0x1,
};

/* 780 */
enum $178F3883DE1217B1F36121634AC8C30F
{
  ENT_HANDLER_NULL = 0x0,
  ENT_HANDLER_ACTOR_INIT = 0x1,
  ENT_HANDLER_ACTOR = 0x2,
  ENT_HANDLER_ACTOR_CORPSE = 0x3,
  ENT_HANDLER_TRIGGER_MULTIPLE = 0x4,
  ENT_HANDLER_TRIGGER_HURT = 0x5,
  ENT_HANDLER_TRIGGER_HURT_TOUCH = 0x6,
  ENT_HANDLER_TRIGGER_DAMAGE = 0x7,
  ENT_HANDLER_SCRIPT_MOVER = 0x8,
  ENT_HANDLER_SCRIPT_MODEL = 0x9,
  ENT_HANDLER_GRENADE = 0xA,
  ENT_HANDLER_TIMED_OBJECT = 0xB,
  ENT_HANDLER_ROCKET = 0xC,
  ENT_HANDLER_CLIENT = 0xD,
  ENT_HANDLER_CLIENT_SPECTATOR = 0xE,
  ENT_HANDLER_CLIENT_DEAD = 0xF,
  ENT_HANDLER_PLAYER_CLONE = 0x10,
  ENT_HANDLER_TURRET_INIT = 0x11,
  ENT_HANDLER_TURRET = 0x12,
  ENT_HANDLER_DROPPED_ITEM = 0x13,
  ENT_HANDLER_ITEM_INIT = 0x14,
  ENT_HANDLER_ITEM = 0x15,
  ENT_HANDLER_TRIGGER_USE = 0x16,
  ENT_HANDLER_PRIMARY_LIGHT = 0x17,
  ENT_HANDLER_PLAYER_BLOCK = 0x18,
  ENT_HANDLER_VEHICLE_INIT = 0x19,
  ENT_HANDLER_VEHICLE = 0x1A,
  ENT_HANDLER_VEHICLE_FREE = 0x1B,
  ENT_HANDLER_HELICOPTER = 0x1C,
  ENT_HANDLER_IK_PLAYERCLIP_TERRAIN = 0x1D,
  ENT_HANDLER_IK_DISABLE_TERRAIN_MAPPING = 0x1E,
  ENT_HANDLER_SPAWNER = 0x1F,
  ENT_HANDLER_ZBARRIER = 0x20,
  ENT_HANDLER_COUNT = 0x21,
};

/* 781 */
enum $2BED38710CCF04DA80D0A4229A76DD54
{
  BADPLACE_INVALID = 0x0,
  BADPLACE_ARC = 0x1,
  BADPLACE_BRUSH = 0x2,
  BADPLACE_REALLY_BAD = 0x3,
  BADPLACE_LIMITED_DEPTH = 0x4,
};

/* 782 */
enum rieType
{
  RIE_NONE = 0x0,
  RIE_NEARBYDEATH = 0x1,
  RIE_NEARBYEXPOSION = 0x2,
  RIE_NEARBYFRIENDLY = 0x3,
  RIE_NUMTYPES = 0x4,
};

/* 783 */
enum $2C1387FB21D01FF73DDC78B93669782B
{
  FIXED_LINK_ANGLES = 0x0,
  FIXED_LINK_ANGLES_YAW_ONLY = 0x1,
  FIXED_LINK_ANGLES_NONE = 0x2,
};

/* 784 */
enum EntInfo_AITextMode
{
  AI_TEXT_ALL = 0x0,
  AI_TEXT_BRIEF = 0x1,
  AI_TEXT_COMBAT = 0x2,
  AI_TEXT_MOVEMENT = 0x3,
  AI_TEXT_STATE = 0x4,
  NUM_AI_TEXT_TYPE = 0x5,
};

/* 785 */
enum ddlIntValueChanged_e
{
  DDL_INTVALUE_SAME = 0x0,
  DDL_INTVALUE_CHANGED = 0x1,
  DDL_INTVALUE_ERROR = 0xFFFFFFFF,
};

/* 786 */
enum $0DC8BD707522F181C826A881DE0D2444
{
  OP_End = 0x0,
  OP_Return = 0x1,
  OP_GetUndefined = 0x2,
  OP_GetZero = 0x3,
  OP_GetByte = 0x4,
  OP_GetNegByte = 0x5,
  OP_GetUnsignedShort = 0x6,
  OP_GetNegUnsignedShort = 0x7,
  OP_GetInteger = 0x8,
  OP_GetFloat = 0x9,
  OP_GetString = 0xA,
  OP_GetIString = 0xB,
  OP_GetVector = 0xC,
  OP_GetLevelObject = 0xD,
  OP_GetAnimObject = 0xE,
  OP_GetSelf = 0xF,
  OP_GetLevel = 0x10,
  OP_GetGame = 0x11,
  OP_GetAnim = 0x12,
  OP_GetAnimation = 0x13,
  OP_GetGameRef = 0x14,
  OP_GetFunction = 0x15,
  OP_CreateLocalVariable = 0x16,
  OP_SafeCreateLocalVariables = 0x17,
  OP_RemoveLocalVariables = 0x18,
  OP_EvalLocalVariableCached = 0x19,
  OP_EvalArray = 0x1A,
  OP_EvalLocalArrayRefCached = 0x1B,
  OP_EvalArrayRef = 0x1C,
  OP_ClearArray = 0x1D,
  OP_EmptyArray = 0x1E,
  OP_GetSelfObject = 0x1F,
  OP_EvalFieldVariable = 0x20,
  OP_EvalFieldVariableRef = 0x21,
  OP_ClearFieldVariable = 0x22,
  OP_SafeSetVariableFieldCached = 0x23,
  OP_SafeSetWaittillVariableFieldCached = 0x24,
  OP_ClearParams = 0x25,
  OP_CheckClearParams = 0x26,
  OP_EvalLocalVariableRefCached = 0x27,
  OP_SetVariableField = 0x28,
  OP_CallBuiltin = 0x29,
  OP_CallBuiltinMethod = 0x2A,
  OP_Wait = 0x2B,
  OP_WaitTillFrameEnd = 0x2C,
  OP_PreScriptCall = 0x2D,
  OP_ScriptFunctionCall = 0x2E,
  OP_ScriptFunctionCallPointer = 0x2F,
  OP_ScriptMethodCall = 0x30,
  OP_ScriptMethodCallPointer = 0x31,
  OP_ScriptThreadCall = 0x32,
  OP_ScriptThreadCallPointer = 0x33,
  OP_ScriptMethodThreadCall = 0x34,
  OP_ScriptMethodThreadCallPointer = 0x35,
  OP_DecTop = 0x36,
  OP_CastFieldObject = 0x37,
  OP_CastBool = 0x38,
  OP_BoolNot = 0x39,
  OP_BoolComplement = 0x3A,
  OP_JumpOnFalse = 0x3B,
  OP_JumpOnTrue = 0x3C,
  OP_JumpOnFalseExpr = 0x3D,
  OP_JumpOnTrueExpr = 0x3E,
  OP_Jump = 0x3F,
  OP_JumpBack = 0x40,
  OP_Inc = 0x41,
  OP_Dec = 0x42,
  OP_Bit_Or = 0x43,
  OP_Bit_Xor = 0x44,
  OP_Bit_And = 0x45,
  OP_Equal = 0x46,
  OP_NotEqual = 0x47,
  OP_LessThan = 0x48,
  OP_GreaterThan = 0x49,
  OP_LessThanOrEqualTo = 0x4A,
  OP_GreaterThanOrEqualTo = 0x4B,
  OP_ShiftLeft = 0x4C,
  OP_ShiftRight = 0x4D,
  OP_Plus = 0x4E,
  OP_Minus = 0x4F,
  OP_Multiply = 0x50,
  OP_Divide = 0x51,
  OP_Modulus = 0x52,
  OP_SizeOf = 0x53,
  OP_WaitTillMatch = 0x54,
  OP_WaitTill = 0x55,
  OP_Notify = 0x56,
  OP_EndOn = 0x57,
  OP_VoidCodePos = 0x58,
  OP_Switch = 0x59,
  OP_EndSwitch = 0x5A,
  OP_Vector = 0x5B,
  OP_GetHash = 0x5C,
  OP_RealWait = 0x5D,
  OP_VectorConstant = 0x5E,
  OP_IsDefined = 0x5F,
  OP_VectorScale = 0x60,
  OP_AnglesToUp = 0x61,
  OP_AnglesToRight = 0x62,
  OP_AnglesToForward = 0x63,
  OP_AngleClamp180 = 0x64,
  OP_VectorToAngles = 0x65,
  OP_Abs = 0x66,
  OP_GetTime = 0x67,
  OP_GetDvar = 0x68,
  OP_GetDvarInt = 0x69,
  OP_GetDvarFloat = 0x6A,
  OP_GetDvarVector = 0x6B,
  OP_GetDvarColorRed = 0x6C,
  OP_GetDvarColorGreen = 0x6D,
  OP_GetDvarColorBlue = 0x6E,
  OP_GetDvarColorAlpha = 0x6F,
  OP_FirstArrayKey = 0x70,
  OP_NextArrayKey = 0x71,
  OP_ProfileStart = 0x72,
  OP_ProfileStop = 0x73,
  OP_SafeDecTop = 0x74,
  OP_Nop = 0x75,
  OP_Abort = 0x76,
  OP_Object = 0x77,
  OP_ThreadObject = 0x78,
  OP_EvalLocalVariable = 0x79,
  OP_EvalLocalVariableRef = 0x7A,
  OP_DevblockBegin = 0x7B,
  OP_DevblockEnd = 0x7C,
  OP_Breakpoint = 0x7D,
  OP_AutoBreakpoint = 0x7E,
  OP_ErrorBreakpoint = 0x7F,
  OP_WatchBreakpoint = 0x80,
  OP_NotifyBreakpoint = 0x81,
  OP_Count = 0x82,
};

/* 787 */
enum $2833BCEA8C0FE1006DC6A70D12840B58
{
  ENUM_NOP = 0x0,
  ENUM_program = 0x1,
  ENUM_assignment = 0x2,
  ENUM_unknown_variable = 0x3,
  ENUM_duplicate_variable = 0x4,
  ENUM_local_variable = 0x5,
  ENUM_local_variable_frozen = 0x6,
  ENUM_duplicate_expression = 0x7,
  ENUM_primitive_expression = 0x8,
  ENUM_integer = 0x9,
  ENUM_float = 0xA,
  ENUM_minus_integer = 0xB,
  ENUM_minus_float = 0xC,
  ENUM_string = 0xD,
  ENUM_istring = 0xE,
  ENUM_array_variable = 0xF,
  ENUM_unknown_field = 0x10,
  ENUM_field_variable = 0x11,
  ENUM_field_variable_frozen = 0x12,
  ENUM_variable = 0x13,
  ENUM_function = 0x14,
  ENUM_call_expression = 0x15,
  ENUM_local_function = 0x16,
  ENUM_far_function = 0x17,
  ENUM_function_pointer = 0x18,
  ENUM_call = 0x19,
  ENUM_method = 0x1A,
  ENUM_call_expression_statement = 0x1B,
  ENUM_script_call = 0x1C,
  ENUM_return = 0x1D,
  ENUM_return2 = 0x1E,
  ENUM_wait = 0x1F,
  ENUM_script_thread_call = 0x20,
  ENUM_script_child_thread_call = 0x21,
  ENUM_script_builtin_call_pointer = 0x22,
  ENUM_undefined = 0x23,
  ENUM_self = 0x24,
  ENUM_self_frozen = 0x25,
  ENUM_level = 0x26,
  ENUM_game = 0x27,
  ENUM_anim = 0x28,
  ENUM_if = 0x29,
  ENUM_if_else = 0x2A,
  ENUM_while = 0x2B,
  ENUM_for = 0x2C,
  ENUM_inc = 0x2D,
  ENUM_dec = 0x2E,
  ENUM_binary_equals = 0x2F,
  ENUM_statement_list = 0x30,
  ENUM_developer_statement_list = 0x31,
  ENUM_expression_list = 0x32,
  ENUM_bool_or = 0x33,
  ENUM_bool_and = 0x34,
  ENUM_binary = 0x35,
  ENUM_bool_not = 0x36,
  ENUM_bool_complement = 0x37,
  ENUM_size_field = 0x38,
  ENUM_self_field = 0x39,
  ENUM_precachetree = 0x3A,
  ENUM_waittill = 0x3B,
  ENUM_waittillmatch = 0x3C,
  ENUM_waittillFrameEnd = 0x3D,
  ENUM_notify = 0x3E,
  ENUM_endon = 0x3F,
  ENUM_switch = 0x40,
  ENUM_case = 0x41,
  ENUM_default = 0x42,
  ENUM_break = 0x43,
  ENUM_continue = 0x44,
  ENUM_expression = 0x45,
  ENUM_empty_array = 0x46,
  ENUM_animation = 0x47,
  ENUM_animation_animtree = 0x48,
  ENUM_thread = 0x49,
  ENUM_begin_developer_thread = 0x4A,
  ENUM_end_developer_thread = 0x4B,
  ENUM_usingtree = 0x4C,
  ENUM_false = 0x4D,
  ENUM_true = 0x4E,
  ENUM_animtree = 0x4F,
  ENUM_breakon = 0x50,
  ENUM_breakpoint = 0x51,
  ENUM_prof_begin = 0x52,
  ENUM_prof_end = 0x53,
  ENUM_vector = 0x54,
  ENUM_object = 0x55,
  ENUM_thread_object = 0x56,
  ENUM_local = 0x57,
  ENUM_statement = 0x58,
  ENUM_bad_expression = 0x59,
  ENUM_bad_statement = 0x5A,
  ENUM_include = 0x5B,
  ENUM_argument = 0x5C,
  ENUM_thisthread = 0x5D,
  ENUM_construct_array = 0x5E,
  ENUM_define_statement = 0x5F,
};

/* 788 */
enum dvarType_t
{
  DVAR_TYPE_INVALID = 0x0,
  DVAR_TYPE_BOOL = 0x1,
  DVAR_TYPE_FLOAT = 0x2,
  DVAR_TYPE_FLOAT_2 = 0x3,
  DVAR_TYPE_FLOAT_3 = 0x4,
  DVAR_TYPE_FLOAT_4 = 0x5,
  DVAR_TYPE_INT = 0x6,
  DVAR_TYPE_ENUM = 0x7,
  DVAR_TYPE_STRING = 0x8,
  DVAR_TYPE_COLOR = 0x9,
  DVAR_TYPE_INT64 = 0xA,
  DVAR_TYPE_LINEAR_COLOR_RGB = 0xB,
  DVAR_TYPE_COLOR_XYZ = 0xC,
  DVAR_TYPE_COUNT = 0xD,
};

/* 789 */
enum $03867A11B1B3B42489FB24988FB94119
{
  STEP_CONTINUE = 0x0,
  STEP_OVER = 0x1,
  STEP_INTO = 0x2,
  STEP_OUT = 0x3,
  STEP_AUTO = 0x4,
};

/* 790 */
enum FsListBehavior_e
{
  FS_LIST_PURE_ONLY = 0x0,
  FS_LIST_ALL = 0x1,
};

/* 791 */
enum $61F28D565F73FF5CB9C3C2AD2980FCA7
{
  HASH_STAT_FREE = 0x0,
  HASH_STAT_MOVABLE = 0x10000,
  HASH_STAT_HEAD = 0x20000,
  HASH_STAT_MASK = 0x30000,
};

/* 792 */
enum $31BE3B436F7CBB6536CC8909FBBBCE99
{
  HASH_NEXT_MASK = 0xFFFF,
};

/* 793 */
enum $6156218400BF35F5A891B149BA6ABAFE
{
  SAVE_OBJECT_DEFAULT = 0x0,
  SAVE_OBJECT_THREAD = 0x1,
  SAVE_OBJECT_NOTIFY_THREAD = 0x2,
  SAVE_OBJECT_TIME_THREAD = 0x3,
  SAVE_OBJECT_CHILD_THREAD = 0x4,
  SAVE_OBJECT_DEAD_ENTITY = 0x5,
};

/* 794 */
enum $9C122730CDD5B3A26E00534D33DB1490
{
  BUILTIN_ANY = 0x0,
  BUILTIN_DEVELOPER_ONLY = 0x1,
};

/* 795 */
enum $6E4FE15F53C22A3ACCD9BF7A6D163E38
{
  DEBUG_MSG_VOID = 0x0,
  DEBUG_MSGIN_VERSION = 0x1,
  DEBUG_MSGIN_FILE_INFO_LIST = 0x2,
  DEBUG_MSGIN_FILE_INFO_DONE = 0x3,
  DEBUG_MSGIN_DEBUGGER_DISCONNECT = 0x4,
  DEBUG_MSGIN_STEP = 0x5,
  DEBUG_MSGIN_FORCE_BREAK = 0x6,
  DEBUG_MSGIN_SET_BREAKPOINT = 0x7,
  DEBUG_MSGIN_SET_WATCH_BREAKPOINT = 0x8,
  DEBUG_MSGIN_SET_NOTIFY_BREAKPOINT = 0x9,
  DEBUG_MSGIN_CLEAR_BREAKPOINT = 0xA,
  DEBUG_MSGIN_CLEAR_WATCH_BREAKPOINT = 0xB,
  DEBUG_MSGIN_CLEAR_NOTIFY_BREAKPOINT = 0xC,
  DEBUG_MSGIN_CLEAR_ALL_BREAKPOINT = 0xD,
  DEBUG_MSGIN_SET_BREAKPOINT_CONDITION = 0xE,
  DEBUG_MSGIN_RUN_TO_LINE = 0xF,
  DEBUG_MSGIN_ASM_STEP_INTO = 0x10,
  DEBUG_MSGIN_ASM_STEP_OVER = 0x11,
  DEBUG_MSGIN_SET_LINE = 0x12,
  DEBUG_MSGIN_WATCH_UPDATE = 0x13,
  DEBUG_MSGIN_WATCH_EXPAND = 0x14,
  DEBUG_MSGIN_WATCH_SETDATA = 0x15,
  DEBUG_MSGIN_PROFILE_START = 0x16,
  DEBUG_MSGIN_PROFILE_STOP = 0x17,
  DEBUG_MSGIN_DEADCODE = 0x18,
  DEBUG_MSGIN_THREADUSAGE = 0x19,
  DEBUG_MSGIN_SHELL_COMMAND = 0x1A,
  DEBUG_MSGIN_EXEC = 0x1B,
  DEBUG_MSGIN_UPDATECODE = 0x1C,
  DEBUG_MSGIN_CHANGESCOPE = 0x1D,
  DEBUG_MSGOUT_VERSION = 0x1E,
  DEBUG_MSGOUT_FILE_INFO_LIST = 0x1F,
  DEBUG_MSGOUT_FILE_INFO = 0x20,
  DEBUG_MSGOUT_CALLSTACK = 0x21,
  DEBUG_MSGOUT_UNABLETOSET_BREAKPOINT = 0x22,
  DEBUG_MSGOUT_HIT_BREAKPOINT = 0x23,
  DEBUG_MSGOUT_HIT_WATCH_BREAKPOINT = 0x24,
  DEBUG_MSGOUT_HIT_NOTIFY_BREAKPOINT = 0x25,
  DEBUG_MSGOUT_WATCH_REQUEST_UPDATES = 0x26,
  DEBUG_MSGOUT_WATCH_DATA = 0x27,
  DEBUG_MSGOUT_WATCH_CHILD_DATA = 0x28,
  DEBUG_MSGOUT_PROFILE_DATA = 0x29,
  DEBUG_MSGOUT_DEADCODE_DATA = 0x2A,
  DEBUG_MSGOUT_PRINT_MESSAGE = 0x2B,
  DEBUG_MSGOUT_ERROR_MESSAGE = 0x2C,
  DEBUG_MSGOUT_SHELL_MESSAGE = 0x2D,
  DEBUG_MSGOUT_PAUSEGAME = 0x2E,
  DEBUG_MSGOUT_UNPAUSEGAME = 0x2F,
  DEBUG_MSGOUT_SELF = 0x30,
  DEBUG_MSGOUT_LOCALS = 0x31,
  DEBUG_MSGOUT_HEARTBEAT = 0x32,
  DEBUG_MSGOUT_ABORT = 0x33,
  DEBUG_MSGOUT_THREADUSAGE = 0x34,
  DEBUG_MSGOUT_ENT_DATA = 0x35,
  DEBUG_MSG_COUNT = 0x36,
};

/* 796 */
enum $B6D2B03FCCF1F86B7ECBDB3634B13D5E
{
  SCR_DEV_NO = 0x0,
  SCR_DEV_YES = 0x1,
  SCR_DEV_IGNORE = 0x2,
  SCR_DEV_EVALUATE = 0x3,
};

/* 797 */
enum $319C08D585EEA511F1EE2C3D4039D9C5
{
  SCR_BREAKPOINT_NONE = 0x0,
  SCR_BREAKPOINT_DISABLED = 0x1,
  SCR_BREAKPOINT_WATCH = 0x2,
  SCR_BREAKPOINT_NOTIFY = 0x3,
  SCR_BREAKPOINT_NORMAL = 0x4,
  SCR_BREAKPOINT_AUTO = 0x5,
  SCR_BREAKPOINT_AUTO_IN = 0x6,
  SCR_BREAKPOINT_AUTO_OVER = 0x7,
};

/* 798 */
enum $97F44CCB984D8F626C42854014D497EA
{
  THREAD_COUNT = 0x0,
  THREAD_INDICES = 0x1,
};

/* 799 */
enum $E5CB004E2A30A05BB958A67A0E28C4D0
{
  FUNC_SCOPE_LOCAL = 0x0,
  FUNC_SCOPE_FAR = 0x1,
};

/* 800 */
enum $C9B837D32D3B67A796093F5BAFC05F1F
{
  SCR_ABORT_NONE = 0x0,
  SCR_ABORT_CONTINUE = 0x1,
  SCR_ABORT_BREAK = 0x2,
  SCR_ABORT_RETURN = 0x3,
  SCR_ABORT_MAX = 0x3,
};

/* 801 */
enum $9B142580F131EE6645CE9FDFAAC456D5
{
  CALL_NONE = 0x0,
  CALL_BUILTIN = 0x1,
  CALL_THREAD = 0x2,
  CALL_FUNCTION = 0x3,
};

/* 802 */
enum $61470FA02CA266764E9F021A16E57D54
{
  ANIMPROP_LOOPSYNC = 0x0,
  ANIMPROP_NONLOOPSYNC = 0x1,
  ANIMPROP_COMPLETE = 0x2,
  ANIMPROP_ADDITIVE = 0x3,
  ANIMPROP_CLIENT = 0x4,
  ANIMPROP_SEPARATE = 0x5,
  ANIMPROP_FORCELOAD = 0x6,
  ANIMPROP_COUNT = 0x7,
};

/* 803 */
enum ValueType
{
  VALT_NUMBER = 0x0,
  VALT_IDENTIFIER = 0x1,
  VALT_BAD = 0x2,
};

/* 804 */
enum $C096FBC08B2001022F577565A6E1DD48
{
  ANIMTREE_NAMES = 0x0,
  ANIMTREE_XANIM = 0x1,
};

/* 805 */
enum $0ABF2427D98140FB93D51D64F6FB7A02
{
  ANIMTREE_PROPERTIES = 0x0,
  ANIMTREE_HAS_CHILDREN = 0x1,
  NUM_NON_COMPONENT_ANIMTREE_VALUES = 0x2,
  ANIMTREE_COMPONENT_TIME = 0x2,
  ANIMTREE_COMPONENT_BLEND = 0x3,
  NUM_ANIMTREE_VALUES = 0x4,
};

/* 806 */
enum ScriptTokenizer::TokenType
{
  TOK_IDENTIFIER = 0x0,
  TOK_SYMBOL = 0x1,
  TOK_NUMBER = 0x2,
  TOK_UNKNOWN = 0x3,
};

/* 807 */
enum snd_flame_source_flags
{
  SND_FLAME_SOURCE_NONE = 0x0,
  SND_FLAME_SOURCE_TURN_ON = 0x1,
  SND_FLAME_SOURCE_TURN_OFF = 0x2,
  SND_FLAME_SOURCE_IS_FIRING = 0x4,
};

/* 808 */
enum FLAME_TYPE
{
  FLAME_TYPE_STREAM = 0x0,
  FLAME_TYPE_CHUNK = 0x1,
  FLAME_TYPE_FIRE = 0x2,
  FLAME_TYPE_SMOKE = 0x3,
  FLAME_TYPE_DRIP = 0x4,
};

/* 809 */
enum cCurve::eCurveType
{
  CURVE_RNS = 0x0,
  CURVE_SNS = 0x1,
  CURVE_TNS = 0x2,
  CURVE_BSPLINE = 0x3,
};

/* 810 */
enum IKBoneNames
{
  IKBONE_NONE = 0xFFFFFFFF,
  IKBONE_FIRST = 0x0,
  IKBONE_ORIGIN = 0x0,
  IKBONE_PELVIS = 0x1,
  IKBONE_SPINE = 0x2,
  IKBONE_SPINE1 = 0x3,
  IKBONE_SPINE2 = 0x4,
  IKBONE_NECK = 0x5,
  IKBONE_HEAD = 0x6,
  IKBONE_LCLAVICLE = 0x7,
  IKBONE_LUPPERARM = 0x8,
  IKBONE_LFOREARM = 0x9,
  IKBONE_LHAND = 0xA,
  IKBONE_LWRIST_TWIST = 0xB,
  IKBONE_RCLAVICLE = 0xC,
  IKBONE_RUPPERARM = 0xD,
  IKBONE_RFOREARM = 0xE,
  IKBONE_RHAND = 0xF,
  IKBONE_RWRIST_TWIST = 0x10,
  IKBONE_LTHIGH = 0x11,
  IKBONE_LCALF = 0x12,
  IKBONE_LFOOT = 0x13,
  IKBONE_RTHIGH = 0x14,
  IKBONE_RCALF = 0x15,
  IKBONE_RFOOT = 0x16,
  IKBONE_RWEAPON = 0x17,
  IKBONE_COUNT = 0x18,
};

/* 811 */
enum IKEntityStatusFunctions
{
  IKSTATUS_SPECTATING = 0x0,
  IKSTATUS_PRONE = 0x1,
  IKSTATUS_CROUCHING = 0x2,
  IKSTATUS_FIRING = 0x3,
  IKSTATUS_MOUNTED_TURRET = 0x4,
  IKSTATUS_APPLY_TERRAIN_MAPPING = 0x5,
  IKSTATUS_BYPASS_TERRAIN_MAPPING = 0x6,
  IKSTATUS_APPLY_LEFT_HAND_IK = 0x7,
  IKSTATUS_APPLY_RIGHT_HAND_IK = 0x8,
  IKSTATUS_MOVING = 0x9,
  IKSTATUS_ONGROUND = 0xA,
  IKSTATUS_COUNT = 0xB,
};

/* 812 */
enum IKLayerNames
{
  IKLAYER_CROUCH_ACTIVE = 0x0,
  IKLAYER_PRONE_ACTIVE = 0x1,
  IKLAYER_PRONE_SLOW_FADE_ACTIVE = 0x2,
  IKLAYER_NOT_MOVING = 0x3,
  IKLAYER_NOT_MOVING_MED = 0x4,
  IKLAYER_NOT_MOVING_FAST = 0x5,
  IKLAYER_MINIGUN_ACTIVE = 0x6,
  IKLAYER_SHOTGUN_ACTIVE = 0x7,
  IKLAYER_AI_AIMING_ACTIVE = 0x8,
  IKLAYER_FIRST_REAL_LAYER = 0x9,
  IKLAYER_PELVIS_TEST = 0x9,
  IKLAYER_TERRAIN_MAPPING = 0xA,
  IKLAYER_HAND_TEST = 0xB,
  IKLAYER_LEFT_HAND_ON_GUN = 0xC,
  IKLAYER_RIGHT_HAND_ON_GUN = 0xD,
  IKLAYER_PLAYER_PITCH = 0xE,
  IKLAYER_VEHICLE_GUNNER_OFFSET = 0xF,
  IKLAYER_TURRET_FIRING = 0x10,
  IKLAYER_TURRET_OFFSET = 0x11,
  IKLAYER_PLAYER_CONTROLLERS = 0x12,
  IKLAYER_LOOK_AT_ENTITY = 0x13,
  IKLAYER_LOOK_AT_ENTITY_BODY_FADE = 0x14,
  IKLAYER_PREVENT_HEAD_CLIP = 0x15,
  IKLAYER_PONYTAIL = 0x16,
  IKLAYER_AI_LEAN = 0x17,
  IKLAYER_AI_LEFT_HAND_ON_GUN = 0x18,
  IKLAYER_COUNT = 0x19,
};

/* 813 */
enum IKDvarNames
{
  IK_DVAR_ENABLE = 0x0,
  IK_DVAR_DEBUG = 0x1,
  IK_DVAR_PELVIS_TEST = 0x2,
  IK_DVAR_FOOT_TEST = 0x3,
  IK_DVAR_HAND_TEST = 0x4,
  IK_DVAR_LEFT_HAND_LERP_TEST = 0x5,
  IK_DVAR_RIGHT_HAND_LERP_TEST = 0x6,
  IK_DVAR_ENABLE_PLAYER_HAND = 0x7,
  IK_DVAR_ENABLE_PLAYER_TERRAIN = 0x8,
  IK_DVAR_ENABLE_AI_HAND = 0x9,
  IK_DVAR_ENABLE_AI_TERRAIN = 0xA,
  IK_DVAR_HAND_TUNING = 0xB,
  IK_DVAR_HAND_OFFSET_VEC = 0xC,
  IK_DVAR_HAND_ROTATION_VEC = 0xD,
  IK_DVAR_HAND_GET_DATA = 0xE,
  IK_DVAR_PARANOID_MATRIX_CHECKS = 0xF,
  IK_DVAR_PITCH_LIMIT_THRESH = 0x10,
  IK_DVAR_PITCH_LIMIT_MAX = 0x11,
  IK_DVAR_ROLL_LIMIT_THRESH = 0x12,
  IK_DVAR_ROLL_LIMIT_MAX = 0x13,
  IK_DVAR_YAW_LIMIT_THRESH = 0x14,
  IK_DVAR_YAW_LIMIT_MAX = 0x15,
  IK_DVAR_LOOKATENTITY_HEAD_SCALE = 0x16,
  IK_DVAR_LOOKATENTITY_NOTORSO = 0x17,
  IK_DVAR_LOOKATENTITY_TRACKING_RATE = 0x18,
  IK_DVAR_LOOKATENTITY_EYES_SCALE = 0x19,
  IK_DVAR_LOOKATPOS_HEAD_SCALE = 0x1A,
  IK_DVAR_LOOKATPOS_NOTORSO = 0x1B,
  IK_DVAR_LOOKATPOS_TRACKING_RATE = 0x1C,
  IK_DVAR_LOOKATPOS_EYES_SCALE = 0x1D,
  IK_DVAR_AI_AIM_TRACKING_RATE = 0x1E,
  IK_DVAR_AI_POOL_SIZE = 0x1F,
  IK_DVAR_AI_RANGE_MAX = 0x20,
  IK_DVAR_COUNT = 0x21,
};

/* 814 */
enum IKDebug
{
  IK_DEBUG_OFF = 0x0,
  IK_DEBUG_FOOT_TRACE = 0x1,
  IK_DEBUG_SHOW_SKELETON = 0x2,
  IK_DEBUG_COUNT = 0x3,
};

/* 815 */
enum IKFootNames
{
  IKFOOT_LEFT = 0x0,
  IKFOOT_RIGHT = 0x1,
  IKFOOT_COUNT = 0x2,
};

/* 816 */
enum IKJoints
{
  IKJOINT_LEFT_ARM = 0x0,
  IKJOINT_RIGHT_ARM = 0x1,
  IKJOINT_LEFT_LEG = 0x2,
  IKJOINT_RIGHT_LEG = 0x3,
  IKJOINT_COUNT = 0x4,
};

/* 817 */
enum IKHandNames
{
  IKHAND_LEFT = 0x0,
  IKHAND_RIGHT = 0x1,
  IKHAND_COUNT = 0x2,
};

/* 818 */
enum IKWeaponOffsetType
{
  IKWEAPOFS_DEFAULT = 0x0,
  IKWEAPOFS_PISTOL = 0x1,
  IKWEAPOFS_SHOULDER = 0x2,
  IKWEAPOFS_MINIGUN = 0x3,
  IKWEAPOFS_GRENADE = 0x4,
  IKWEAPOFS_COUNT = 0x5,
};

/* 819 */
enum IKWeaponSpecialNames
{
  IKWEAPSPECIAL_RIOTSHIELD = 0x0,
  IKWEAPSPECIAL_NONE = 0x1,
};

/* 820 */
enum IKWeaponClass
{
  IKWEAPCLASS_DEFAULT = 0x0,
  IKWEAPCLASS_SHOTGUN = 0x1,
  IKWEAPCLASS_COUNT = 0x2,
};

/* 821 */
enum IKDebugColor
{
  IK_DEBUG_COLOR_RED = 0x0,
  IK_DEBUG_COLOR_GREEN = 0x1,
  IK_DEBUG_COLOR_BLUE = 0x2,
  IK_DEBUG_COLOR_LIGHT_CYAN = 0x3,
};

/* 822 */
enum $7787EB6E0242FFB6938439E9565186E7
{
  DOBJ_IS_SERVER = 0x1,
  DOBJ_IS_LOCAL_PLAYER = 0x2,
  DOBJ_IS_RECORDED = 0x4,
  DOBJ_IS_IK_ACTIVE = 0x8,
  DOBJ_IS_IK_LEFT_HAND_GRIP_ACTIVE = 0x10,
  DOBJ_IS_PLAYER_SHADOW = 0x20,
  DOBJ_IS_IK_BYPASS = 0x40,
  DOBJ_MAX_FLAGS = 0x80,
};

/* 823 */
enum IKMiscBoneNames
{
  IKMISC_WEAPON_LEFT_HAND_IK = 0x0,
  IKMISC_WEAPON_RIGHT_HAND_IK = 0x1,
  IKMISC_TAG_HEAD = 0x2,
  IKMISC_COUNT = 0x3,
};

/* 824 */
enum tracerFieldType_t
{
  TFT_TRACERTYPE = 0x12,
  TFT_NUM_FIELD_TYPES = 0x13,
};

/* 825 */
enum TracerDrawFlags
{
  TRACER_DRAW_FLAG_NONE = 0x0,
  TRACER_DRAW_FLAG_THERMAL = 0x1,
};

/* 826 */
enum leType_t
{
  LE_MOVING_TRACER_RED = 0x0,
  LE_MOVING_TRACER_GREEN = 0x1,
  LE_MOVING_TRACER = 0x2,
};

/* 827 */
enum JointType
{
  RAGDOLL_JOINT_NONE = 0x0,
  RAGDOLL_JOINT_HINGE = 0x1,
  RAGDOLL_JOINT_SWIVEL = 0x2,
};

/* 828 */
enum RagdollBodyState
{
  BS_DEAD = 0x0,
  BS_DOBJ_WAIT = 0x1,
  BS_VELOCITY_CAPTURE = 0x2,
  BS_TUNNEL_TEST = 0x3,
  BS_RUNNING = 0x4,
  BS_IDLE = 0x5,
  RAGDOLL_NUM_STATES = 0x6,
};

/* 829 */
enum Phys_ObjFlags
{
  PHYS_OBJ_FLAG_ENABLE_EFFECTS = 0x1,
  PHYS_OBJ_FLAG_BUOYANT_IN_MITTON_WATER = 0x2,
  PHYS_OBJ_FLAG_FLOAT_LONGER = 0x4,
  PHYS_OBJ_DISABLE_DEPTH_BUOYANCY_ADJUSTMENTS = 0x8,
  PHYS_OBJ_FLAG_FORCE_BUOYANCY = 0x10,
  PHYS_OBJ_FLAG_RAGDOLL_BONE = 0x20,
};

/* 830 */
enum PhysicsGeomType
{
  PHYS_GEOM_NONE = 0x0,
  PHYS_GEOM_BOX = 0x1,
  PHYS_GEOM_BRUSH = 0x2,
  PHYS_GEOM_CYLINDER = 0x3,
  PHYS_GEOM_CYLINDER_LARGE = 0x4,
  PHYS_GEOM_CAPSULE = 0x5,
  PHYS_GEOM_POINT = 0x6,
  PHYS_GEOM_COUNT = 0x7,
};

/* 831 */
enum $F4595001938BD415E6182EA055BFFCB4
{
  CFT_TYPE = 0x12,
  CFT_NUM = 0x13,
};

/* 832 */
enum $9D1FD92287F6B5C9B992C5EE0CC2FA58
{
  GFX_PRIM_TRIANGLES = 0x4,
  GFX_PRIM_QUADS = 0xFFFFFFFF,
};

/* 833 */
enum TessPrimType
{
  TESS_TRIANGLES = 0x4,
  TESS_QUADS = 0xFFFFFFFF,
  TESS_INLINE_TRIANGLES = 0x4,
  TESS_INLINE_QUADS = 0xFFFFFFFF,
};

/* 834 */
enum $C691444B67DCD449B3A7AA08D3A24D0A
{
  MAX_INPUT_VERTICES = 0x1800,
};

/* 835 */
enum pulse_sum_angular::flags_e
{
  APPLY_MIN_FACTOR = 0x1,
};

/* 836 */
enum physics_system::physics_system_flags_e
{
  FLAG_IN_COLLISION_CALLBACK = 0x1,
};

/* 837 */
enum $15E821F45724C66C6BB38F536793629E
{
  MAX_GEOMS = 0x32,
};

/* 838 */
typedef pulse_sum_angular::flags_e pulse_sum_normal::flags_e;

/* 839 */
enum $C637BE892E6461EE6FB619992BC3EF23
{
  DRT_ALL = 0x0,
  DRT_PLAYER = 0x1,
  DRT_PLAYERCLIP = 0x2,
  DRT_VEHICLE = 0x3,
  DRT_HELICOPTER = 0x4,
  DRT_AI_COLLISION = 0x5,
  DRT_AI_SIGHT = 0x6,
  DRT_WEAPON = 0x7,
  DRT_MANTLE = 0x8,
  DRT_PHYSICS = 0x9,
  DRT_AIM_ASSIST = 0xA,
  DRT_SPAWN_VISIBILITY = 0xB,
  DRT_TRIGGER = 0xC,
  DRT_CLIENTSIDE_TRIGGER = 0xD,
  MAX_DRT = 0xE,
};

/* 840 */
enum surface_types_e
{
  SURFACE_TYPE_PROP = 0x20,
  SURFACE_TYPE_RAGDOLL = 0x21,
  SURFACE_TYPE_TERRAIN = 0x22,
};

/* 841 */
enum $DB64A6B5BF511A78878DEFCFBB27281F
{
  FX_TYPE_BULLET_HIT_SMALL_NORMAL = 0x0,
  FX_TYPE_BULLET_HIT_SMALL_EXIT = 0x1,
  FX_TYPE_BULLET_HIT_SMALL_UNDERWATER = 0x2,
  FX_TYPE_BULLET_HIT_LARGE_NORMAL = 0x3,
  FX_TYPE_BULLET_HIT_LARGE_EXIT = 0x4,
  FX_TYPE_SHOTGUN_HIT_NORMAL = 0x5,
  FX_TYPE_SHOTGUN_HIT_EXIT = 0x6,
  FX_TYPE_BULLET_HIT_AP_NORMAL = 0x7,
  FX_TYPE_BULLET_HIT_AP_EXIT = 0x8,
  FX_TYPE_BULLET_HIT_XTREME_NORMAL = 0x9,
  FX_TYPE_BULLET_HIT_XTREME_EXIT = 0xA,
  FX_TYPE_GRENADE_BOUNCE = 0xB,
  FX_TYPE_GRENADE_EXPLODE = 0xC,
  FX_TYPE_ROCKET_EXPLODE = 0xD,
  FX_TYPE_ROCKET_EXPLODE_XTREME = 0xE,
  FX_TYPE_PROJECTILE_DUD = 0xF,
  FX_TYPE_MORTAR_SHELL = 0x10,
  FX_TYPE_TANK_SHELL = 0x11,
  FX_TYPE_PHYSICS_IMPACT = 0x12,
  FX_TYPE_BOLT = 0x13,
  FX_TYPE_BLADE = 0x14,
  FX_TYPE_COUNT = 0x15,
};

/* 842 */
enum Phys_SurfaceType
{
  EFFECT_SURF_TYPE_HARD = 0x0,
  EFFECT_SURF_TYPE_SOFT = 0x1,
  EFFECT_SURF_TYPE_METAL = 0x2,
  EFFECT_SURF_TYPE_GLASS = 0x3,
  EFFECT_SURF_TYPE_WATER = 0x4,
  EFFECT_SURF_TYPE_WOOD = 0x5,
  EFFECT_SURF_TYPE_FOLIAGE = 0x6,
  EFFECT_SURF_TYPE_FLESH = 0x7,
  EFFECT_SURF_TYPE_COUNT = 0x8,
};

/* 843 */
enum Wheel
{
  WHEEL_FL = 0x0,
  WHEEL_FR = 0x1,
  WHEEL_BL = 0x2,
  WHEEL_BR = 0x3,
  WHEEL_ML = 0x4,
  WHEEL_MR = 0x5,
};

/* 844 */
enum destructiblePieceFieldType_t
{
  DPFT_EXPLOSIVEDAMAGEONLY = 0x12,
  DPFT_EXPLOSIVEDAMAGEONLYD1 = 0x13,
  DPFT_EXPLOSIVEDAMAGEONLYD2 = 0x14,
  DPFT_EXPLOSIVEDAMAGEONLYD3 = 0x15,
  DPFT_EXPLOSIVEDAMAGEONLYD4 = 0x16,
  DPFT_MELEEDAMAGE = 0x17,
  DPFT_MELEEDAMAGED1 = 0x18,
  DPFT_MELEEDAMAGED2 = 0x19,
  DPFT_MELEEDAMAGED3 = 0x1A,
  DPFT_MELEEDAMAGED4 = 0x1B,
  DPFT_PARENTDAMAGE = 0x1C,
  DPFT_PARENTDAMAGED1 = 0x1D,
  DPFT_PARENTDAMAGED2 = 0x1E,
  DPFT_PARENTDAMAGED3 = 0x1F,
  DPFT_PARENTDAMAGED4 = 0x20,
  DPFT_PHYSICSONPARENTDEATH = 0x21,
  DPFT_PHYSICSONPARENTDEATHD1 = 0x22,
  DPFT_PHYSICSONPARENTDEATHD2 = 0x23,
  DPFT_PHYSICSONPARENTDEATHD3 = 0x24,
  DPFT_PHYSICSONPARENTDEATHD4 = 0x25,
  DPFT_MAX_FIELD_TYPES = 0x26,
};

/* 845 */
enum destructibleFieldType_t
{
  DFT_PIECE0 = 0x12,
  DFT_PIECE1 = 0x13,
  DFT_PIECE2 = 0x14,
  DFT_PIECE3 = 0x15,
  DFT_PIECE4 = 0x16,
  DFT_PIECE5 = 0x17,
  DFT_PIECE6 = 0x18,
  DFT_PIECE7 = 0x19,
  DFT_PIECE8 = 0x1A,
  DFT_PIECE9 = 0x1B,
  DFT_PIECE10 = 0x1C,
  DFT_PIECE11 = 0x1D,
  DFT_PIECE12 = 0x1E,
  DFT_PIECE13 = 0x1F,
  DFT_PIECE14 = 0x20,
  DFT_PIECE15 = 0x21,
  DFT_PIECE16 = 0x22,
  DFT_PIECE17 = 0x23,
  DFT_PIECE18 = 0x24,
  DFT_PIECE19 = 0x25,
  DFT_PIECE20 = 0x26,
  DFT_PIECE21 = 0x27,
  DFT_PIECE22 = 0x28,
  DFT_PIECE23 = 0x29,
  DFT_PIECE24 = 0x2A,
  DFT_PIECE25 = 0x2B,
  DFT_PIECE26 = 0x2C,
  DFT_PIECE27 = 0x2D,
  DFT_PIECE28 = 0x2E,
  DFT_PIECE29 = 0x2F,
  DFT_PIECE30 = 0x30,
  DFT_PIECE31 = 0x31,
  DFT_PIECE_HEALTH0 = 0x32,
  DFT_PIECE_HEALTH1 = 0x33,
  DFT_PIECE_HEALTH2 = 0x34,
  DFT_PIECE_HEALTH3 = 0x35,
  DFT_PIECE_HEALTH4 = 0x36,
  DFT_PIECE_HEALTH5 = 0x37,
  DFT_PIECE_HEALTH6 = 0x38,
  DFT_PIECE_HEALTH7 = 0x39,
  DFT_PIECE_HEALTH8 = 0x3A,
  DFT_PIECE_HEALTH9 = 0x3B,
  DFT_PIECE_HEALTH10 = 0x3C,
  DFT_PIECE_HEALTH11 = 0x3D,
  DFT_PIECE_HEALTH12 = 0x3E,
  DFT_PIECE_HEALTH13 = 0x3F,
  DFT_PIECE_HEALTH14 = 0x40,
  DFT_PIECE_HEALTH15 = 0x41,
  DFT_PIECE_HEALTH16 = 0x42,
  DFT_PIECE_HEALTH17 = 0x43,
  DFT_PIECE_HEALTH18 = 0x44,
  DFT_PIECE_HEALTH19 = 0x45,
  DFT_PIECE_HEALTH20 = 0x46,
  DFT_PIECE_HEALTH21 = 0x47,
  DFT_PIECE_HEALTH22 = 0x48,
  DFT_PIECE_HEALTH23 = 0x49,
  DFT_PIECE_HEALTH24 = 0x4A,
  DFT_PIECE_HEALTH25 = 0x4B,
  DFT_PIECE_HEALTH26 = 0x4C,
  DFT_PIECE_HEALTH27 = 0x4D,
  DFT_PIECE_HEALTH28 = 0x4E,
  DFT_PIECE_HEALTH29 = 0x4F,
  DFT_PIECE_HEALTH30 = 0x50,
  DFT_PIECE_HEALTH31 = 0x51,
  DFT_PARENT_PIECE0 = 0x52,
  DFT_PARENT_PIECE1 = 0x53,
  DFT_PARENT_PIECE2 = 0x54,
  DFT_PARENT_PIECE3 = 0x55,
  DFT_PARENT_PIECE4 = 0x56,
  DFT_PARENT_PIECE5 = 0x57,
  DFT_PARENT_PIECE6 = 0x58,
  DFT_PARENT_PIECE7 = 0x59,
  DFT_PARENT_PIECE8 = 0x5A,
  DFT_PARENT_PIECE9 = 0x5B,
  DFT_PARENT_PIECE10 = 0x5C,
  DFT_PARENT_PIECE11 = 0x5D,
  DFT_PARENT_PIECE12 = 0x5E,
  DFT_PARENT_PIECE13 = 0x5F,
  DFT_PARENT_PIECE14 = 0x60,
  DFT_PARENT_PIECE15 = 0x61,
  DFT_PARENT_PIECE16 = 0x62,
  DFT_PARENT_PIECE17 = 0x63,
  DFT_PARENT_PIECE18 = 0x64,
  DFT_PARENT_PIECE19 = 0x65,
  DFT_PARENT_PIECE20 = 0x66,
  DFT_PARENT_PIECE21 = 0x67,
  DFT_PARENT_PIECE22 = 0x68,
  DFT_PARENT_PIECE23 = 0x69,
  DFT_PARENT_PIECE24 = 0x6A,
  DFT_PARENT_PIECE25 = 0x6B,
  DFT_PARENT_PIECE26 = 0x6C,
  DFT_PARENT_PIECE27 = 0x6D,
  DFT_PARENT_PIECE28 = 0x6E,
  DFT_PARENT_PIECE29 = 0x6F,
  DFT_PARENT_PIECE30 = 0x70,
  DFT_PARENT_PIECE31 = 0x71,
  DFT_PARENT_DAMAGE_PERCENT0 = 0x72,
  DFT_PARENT_DAMAGE_PERCENT1 = 0x73,
  DFT_PARENT_DAMAGE_PERCENT2 = 0x74,
  DFT_PARENT_DAMAGE_PERCENT3 = 0x75,
  DFT_PARENT_DAMAGE_PERCENT4 = 0x76,
  DFT_PARENT_DAMAGE_PERCENT5 = 0x77,
  DFT_PARENT_DAMAGE_PERCENT6 = 0x78,
  DFT_PARENT_DAMAGE_PERCENT7 = 0x79,
  DFT_PARENT_DAMAGE_PERCENT8 = 0x7A,
  DFT_PARENT_DAMAGE_PERCENT9 = 0x7B,
  DFT_PARENT_DAMAGE_PERCENT10 = 0x7C,
  DFT_PARENT_DAMAGE_PERCENT11 = 0x7D,
  DFT_PARENT_DAMAGE_PERCENT12 = 0x7E,
  DFT_PARENT_DAMAGE_PERCENT13 = 0x7F,
  DFT_PARENT_DAMAGE_PERCENT14 = 0x80,
  DFT_PARENT_DAMAGE_PERCENT15 = 0x81,
  DFT_PARENT_DAMAGE_PERCENT16 = 0x82,
  DFT_PARENT_DAMAGE_PERCENT17 = 0x83,
  DFT_PARENT_DAMAGE_PERCENT18 = 0x84,
  DFT_PARENT_DAMAGE_PERCENT19 = 0x85,
  DFT_PARENT_DAMAGE_PERCENT20 = 0x86,
  DFT_PARENT_DAMAGE_PERCENT21 = 0x87,
  DFT_PARENT_DAMAGE_PERCENT22 = 0x88,
  DFT_PARENT_DAMAGE_PERCENT23 = 0x89,
  DFT_PARENT_DAMAGE_PERCENT24 = 0x8A,
  DFT_PARENT_DAMAGE_PERCENT25 = 0x8B,
  DFT_PARENT_DAMAGE_PERCENT26 = 0x8C,
  DFT_PARENT_DAMAGE_PERCENT27 = 0x8D,
  DFT_PARENT_DAMAGE_PERCENT28 = 0x8E,
  DFT_PARENT_DAMAGE_PERCENT29 = 0x8F,
  DFT_PARENT_DAMAGE_PERCENT30 = 0x90,
  DFT_PARENT_DAMAGE_PERCENT31 = 0x91,
  DFT_BULLET_DAMAGE_SCALE0 = 0x92,
  DFT_BULLET_DAMAGE_SCALE1 = 0x93,
  DFT_BULLET_DAMAGE_SCALE2 = 0x94,
  DFT_BULLET_DAMAGE_SCALE3 = 0x95,
  DFT_BULLET_DAMAGE_SCALE4 = 0x96,
  DFT_BULLET_DAMAGE_SCALE5 = 0x97,
  DFT_BULLET_DAMAGE_SCALE6 = 0x98,
  DFT_BULLET_DAMAGE_SCALE7 = 0x99,
  DFT_BULLET_DAMAGE_SCALE8 = 0x9A,
  DFT_BULLET_DAMAGE_SCALE9 = 0x9B,
  DFT_BULLET_DAMAGE_SCALE10 = 0x9C,
  DFT_BULLET_DAMAGE_SCALE11 = 0x9D,
  DFT_BULLET_DAMAGE_SCALE12 = 0x9E,
  DFT_BULLET_DAMAGE_SCALE13 = 0x9F,
  DFT_BULLET_DAMAGE_SCALE14 = 0xA0,
  DFT_BULLET_DAMAGE_SCALE15 = 0xA1,
  DFT_BULLET_DAMAGE_SCALE16 = 0xA2,
  DFT_BULLET_DAMAGE_SCALE17 = 0xA3,
  DFT_BULLET_DAMAGE_SCALE18 = 0xA4,
  DFT_BULLET_DAMAGE_SCALE19 = 0xA5,
  DFT_BULLET_DAMAGE_SCALE20 = 0xA6,
  DFT_BULLET_DAMAGE_SCALE21 = 0xA7,
  DFT_BULLET_DAMAGE_SCALE22 = 0xA8,
  DFT_BULLET_DAMAGE_SCALE23 = 0xA9,
  DFT_BULLET_DAMAGE_SCALE24 = 0xAA,
  DFT_BULLET_DAMAGE_SCALE25 = 0xAB,
  DFT_BULLET_DAMAGE_SCALE26 = 0xAC,
  DFT_BULLET_DAMAGE_SCALE27 = 0xAD,
  DFT_BULLET_DAMAGE_SCALE28 = 0xAE,
  DFT_BULLET_DAMAGE_SCALE29 = 0xAF,
  DFT_BULLET_DAMAGE_SCALE30 = 0xB0,
  DFT_BULLET_DAMAGE_SCALE31 = 0xB1,
  DFT_EXPLOSIVE_DAMAGE_SCALE0 = 0xB2,
  DFT_EXPLOSIVE_DAMAGE_SCALE1 = 0xB3,
  DFT_EXPLOSIVE_DAMAGE_SCALE2 = 0xB4,
  DFT_EXPLOSIVE_DAMAGE_SCALE3 = 0xB5,
  DFT_EXPLOSIVE_DAMAGE_SCALE4 = 0xB6,
  DFT_EXPLOSIVE_DAMAGE_SCALE5 = 0xB7,
  DFT_EXPLOSIVE_DAMAGE_SCALE6 = 0xB8,
  DFT_EXPLOSIVE_DAMAGE_SCALE7 = 0xB9,
  DFT_EXPLOSIVE_DAMAGE_SCALE8 = 0xBA,
  DFT_EXPLOSIVE_DAMAGE_SCALE9 = 0xBB,
  DFT_EXPLOSIVE_DAMAGE_SCALE10 = 0xBC,
  DFT_EXPLOSIVE_DAMAGE_SCALE11 = 0xBD,
  DFT_EXPLOSIVE_DAMAGE_SCALE12 = 0xBE,
  DFT_EXPLOSIVE_DAMAGE_SCALE13 = 0xBF,
  DFT_EXPLOSIVE_DAMAGE_SCALE14 = 0xC0,
  DFT_EXPLOSIVE_DAMAGE_SCALE15 = 0xC1,
  DFT_EXPLOSIVE_DAMAGE_SCALE16 = 0xC2,
  DFT_EXPLOSIVE_DAMAGE_SCALE17 = 0xC3,
  DFT_EXPLOSIVE_DAMAGE_SCALE18 = 0xC4,
  DFT_EXPLOSIVE_DAMAGE_SCALE19 = 0xC5,
  DFT_EXPLOSIVE_DAMAGE_SCALE20 = 0xC6,
  DFT_EXPLOSIVE_DAMAGE_SCALE21 = 0xC7,
  DFT_EXPLOSIVE_DAMAGE_SCALE22 = 0xC8,
  DFT_EXPLOSIVE_DAMAGE_SCALE23 = 0xC9,
  DFT_EXPLOSIVE_DAMAGE_SCALE24 = 0xCA,
  DFT_EXPLOSIVE_DAMAGE_SCALE25 = 0xCB,
  DFT_EXPLOSIVE_DAMAGE_SCALE26 = 0xCC,
  DFT_EXPLOSIVE_DAMAGE_SCALE27 = 0xCD,
  DFT_EXPLOSIVE_DAMAGE_SCALE28 = 0xCE,
  DFT_EXPLOSIVE_DAMAGE_SCALE29 = 0xCF,
  DFT_EXPLOSIVE_DAMAGE_SCALE30 = 0xD0,
  DFT_EXPLOSIVE_DAMAGE_SCALE31 = 0xD1,
  DFT_MELEE_DAMAGE_SCALE0 = 0xD2,
  DFT_MELEE_DAMAGE_SCALE1 = 0xD3,
  DFT_MELEE_DAMAGE_SCALE2 = 0xD4,
  DFT_MELEE_DAMAGE_SCALE3 = 0xD5,
  DFT_MELEE_DAMAGE_SCALE4 = 0xD6,
  DFT_MELEE_DAMAGE_SCALE5 = 0xD7,
  DFT_MELEE_DAMAGE_SCALE6 = 0xD8,
  DFT_MELEE_DAMAGE_SCALE7 = 0xD9,
  DFT_MELEE_DAMAGE_SCALE8 = 0xDA,
  DFT_MELEE_DAMAGE_SCALE9 = 0xDB,
  DFT_MELEE_DAMAGE_SCALE10 = 0xDC,
  DFT_MELEE_DAMAGE_SCALE11 = 0xDD,
  DFT_MELEE_DAMAGE_SCALE12 = 0xDE,
  DFT_MELEE_DAMAGE_SCALE13 = 0xDF,
  DFT_MELEE_DAMAGE_SCALE14 = 0xE0,
  DFT_MELEE_DAMAGE_SCALE15 = 0xE1,
  DFT_MELEE_DAMAGE_SCALE16 = 0xE2,
  DFT_MELEE_DAMAGE_SCALE17 = 0xE3,
  DFT_MELEE_DAMAGE_SCALE18 = 0xE4,
  DFT_MELEE_DAMAGE_SCALE19 = 0xE5,
  DFT_MELEE_DAMAGE_SCALE20 = 0xE6,
  DFT_MELEE_DAMAGE_SCALE21 = 0xE7,
  DFT_MELEE_DAMAGE_SCALE22 = 0xE8,
  DFT_MELEE_DAMAGE_SCALE23 = 0xE9,
  DFT_MELEE_DAMAGE_SCALE24 = 0xEA,
  DFT_MELEE_DAMAGE_SCALE25 = 0xEB,
  DFT_MELEE_DAMAGE_SCALE26 = 0xEC,
  DFT_MELEE_DAMAGE_SCALE27 = 0xED,
  DFT_MELEE_DAMAGE_SCALE28 = 0xEE,
  DFT_MELEE_DAMAGE_SCALE29 = 0xEF,
  DFT_MELEE_DAMAGE_SCALE30 = 0xF0,
  DFT_MELEE_DAMAGE_SCALE31 = 0xF1,
  DFT_IMPACT_DAMAGE_SCALE0 = 0xF2,
  DFT_IMPACT_DAMAGE_SCALE1 = 0xF3,
  DFT_IMPACT_DAMAGE_SCALE2 = 0xF4,
  DFT_IMPACT_DAMAGE_SCALE3 = 0xF5,
  DFT_IMPACT_DAMAGE_SCALE4 = 0xF6,
  DFT_IMPACT_DAMAGE_SCALE5 = 0xF7,
  DFT_IMPACT_DAMAGE_SCALE6 = 0xF8,
  DFT_IMPACT_DAMAGE_SCALE7 = 0xF9,
  DFT_IMPACT_DAMAGE_SCALE8 = 0xFA,
  DFT_IMPACT_DAMAGE_SCALE9 = 0xFB,
  DFT_IMPACT_DAMAGE_SCALE10 = 0xFC,
  DFT_IMPACT_DAMAGE_SCALE11 = 0xFD,
  DFT_IMPACT_DAMAGE_SCALE12 = 0xFE,
  DFT_IMPACT_DAMAGE_SCALE13 = 0xFF,
  DFT_IMPACT_DAMAGE_SCALE14 = 0x100,
  DFT_IMPACT_DAMAGE_SCALE15 = 0x101,
  DFT_IMPACT_DAMAGE_SCALE16 = 0x102,
  DFT_IMPACT_DAMAGE_SCALE17 = 0x103,
  DFT_IMPACT_DAMAGE_SCALE18 = 0x104,
  DFT_IMPACT_DAMAGE_SCALE19 = 0x105,
  DFT_IMPACT_DAMAGE_SCALE20 = 0x106,
  DFT_IMPACT_DAMAGE_SCALE21 = 0x107,
  DFT_IMPACT_DAMAGE_SCALE22 = 0x108,
  DFT_IMPACT_DAMAGE_SCALE23 = 0x109,
  DFT_IMPACT_DAMAGE_SCALE24 = 0x10A,
  DFT_IMPACT_DAMAGE_SCALE25 = 0x10B,
  DFT_IMPACT_DAMAGE_SCALE26 = 0x10C,
  DFT_IMPACT_DAMAGE_SCALE27 = 0x10D,
  DFT_IMPACT_DAMAGE_SCALE28 = 0x10E,
  DFT_IMPACT_DAMAGE_SCALE29 = 0x10F,
  DFT_IMPACT_DAMAGE_SCALE30 = 0x110,
  DFT_IMPACT_DAMAGE_SCALE31 = 0x111,
  DFT_PHYS_CONSTRAINT0 = 0x112,
  DFT_PHYS_CONSTRAINT1 = 0x113,
  DFT_PHYS_CONSTRAINT2 = 0x114,
  DFT_PHYS_CONSTRAINT3 = 0x115,
  DFT_PHYS_CONSTRAINT4 = 0x116,
  DFT_PHYS_CONSTRAINT5 = 0x117,
  DFT_PHYS_CONSTRAINT6 = 0x118,
  DFT_PHYS_CONSTRAINT7 = 0x119,
  DFT_PHYS_CONSTRAINT8 = 0x11A,
  DFT_PHYS_CONSTRAINT9 = 0x11B,
  DFT_PHYS_CONSTRAINT10 = 0x11C,
  DFT_PHYS_CONSTRAINT11 = 0x11D,
  DFT_PHYS_CONSTRAINT12 = 0x11E,
  DFT_PHYS_CONSTRAINT13 = 0x11F,
  DFT_PHYS_CONSTRAINT14 = 0x120,
  DFT_PHYS_CONSTRAINT15 = 0x121,
  DFT_PHYS_CONSTRAINT16 = 0x122,
  DFT_PHYS_CONSTRAINT17 = 0x123,
  DFT_PHYS_CONSTRAINT18 = 0x124,
  DFT_PHYS_CONSTRAINT19 = 0x125,
  DFT_PHYS_CONSTRAINT20 = 0x126,
  DFT_PHYS_CONSTRAINT21 = 0x127,
  DFT_PHYS_CONSTRAINT22 = 0x128,
  DFT_PHYS_CONSTRAINT23 = 0x129,
  DFT_PHYS_CONSTRAINT24 = 0x12A,
  DFT_PHYS_CONSTRAINT25 = 0x12B,
  DFT_PHYS_CONSTRAINT26 = 0x12C,
  DFT_PHYS_CONSTRAINT27 = 0x12D,
  DFT_PHYS_CONSTRAINT28 = 0x12E,
  DFT_PHYS_CONSTRAINT29 = 0x12F,
  DFT_PHYS_CONSTRAINT30 = 0x130,
  DFT_PHYS_CONSTRAINT31 = 0x131,
  DFT_DAMAGE_SOUND0 = 0x132,
  DFT_DAMAGE_SOUND1 = 0x133,
  DFT_DAMAGE_SOUND2 = 0x134,
  DFT_DAMAGE_SOUND3 = 0x135,
  DFT_DAMAGE_SOUND4 = 0x136,
  DFT_DAMAGE_SOUND5 = 0x137,
  DFT_DAMAGE_SOUND6 = 0x138,
  DFT_DAMAGE_SOUND7 = 0x139,
  DFT_DAMAGE_SOUND8 = 0x13A,
  DFT_DAMAGE_SOUND9 = 0x13B,
  DFT_DAMAGE_SOUND10 = 0x13C,
  DFT_DAMAGE_SOUND11 = 0x13D,
  DFT_DAMAGE_SOUND12 = 0x13E,
  DFT_DAMAGE_SOUND13 = 0x13F,
  DFT_DAMAGE_SOUND14 = 0x140,
  DFT_DAMAGE_SOUND15 = 0x141,
  DFT_DAMAGE_SOUND16 = 0x142,
  DFT_DAMAGE_SOUND17 = 0x143,
  DFT_DAMAGE_SOUND18 = 0x144,
  DFT_DAMAGE_SOUND19 = 0x145,
  DFT_DAMAGE_SOUND20 = 0x146,
  DFT_DAMAGE_SOUND21 = 0x147,
  DFT_DAMAGE_SOUND22 = 0x148,
  DFT_DAMAGE_SOUND23 = 0x149,
  DFT_DAMAGE_SOUND24 = 0x14A,
  DFT_DAMAGE_SOUND25 = 0x14B,
  DFT_DAMAGE_SOUND26 = 0x14C,
  DFT_DAMAGE_SOUND27 = 0x14D,
  DFT_DAMAGE_SOUND28 = 0x14E,
  DFT_DAMAGE_SOUND29 = 0x14F,
  DFT_DAMAGE_SOUND30 = 0x150,
  DFT_DAMAGE_SOUND31 = 0x151,
  DFT_BURN_EFFECT0 = 0x152,
  DFT_BURN_EFFECT1 = 0x153,
  DFT_BURN_EFFECT2 = 0x154,
  DFT_BURN_EFFECT3 = 0x155,
  DFT_BURN_EFFECT4 = 0x156,
  DFT_BURN_EFFECT5 = 0x157,
  DFT_BURN_EFFECT6 = 0x158,
  DFT_BURN_EFFECT7 = 0x159,
  DFT_BURN_EFFECT8 = 0x15A,
  DFT_BURN_EFFECT9 = 0x15B,
  DFT_BURN_EFFECT10 = 0x15C,
  DFT_BURN_EFFECT11 = 0x15D,
  DFT_BURN_EFFECT12 = 0x15E,
  DFT_BURN_EFFECT13 = 0x15F,
  DFT_BURN_EFFECT14 = 0x160,
  DFT_BURN_EFFECT15 = 0x161,
  DFT_BURN_EFFECT16 = 0x162,
  DFT_BURN_EFFECT17 = 0x163,
  DFT_BURN_EFFECT18 = 0x164,
  DFT_BURN_EFFECT19 = 0x165,
  DFT_BURN_EFFECT20 = 0x166,
  DFT_BURN_EFFECT21 = 0x167,
  DFT_BURN_EFFECT22 = 0x168,
  DFT_BURN_EFFECT23 = 0x169,
  DFT_BURN_EFFECT24 = 0x16A,
  DFT_BURN_EFFECT25 = 0x16B,
  DFT_BURN_EFFECT26 = 0x16C,
  DFT_BURN_EFFECT27 = 0x16D,
  DFT_BURN_EFFECT28 = 0x16E,
  DFT_BURN_EFFECT29 = 0x16F,
  DFT_BURN_EFFECT30 = 0x170,
  DFT_BURN_EFFECT31 = 0x171,
  DFT_BURN_SOUND0 = 0x172,
  DFT_BURN_SOUND1 = 0x173,
  DFT_BURN_SOUND2 = 0x174,
  DFT_BURN_SOUND3 = 0x175,
  DFT_BURN_SOUND4 = 0x176,
  DFT_BURN_SOUND5 = 0x177,
  DFT_BURN_SOUND6 = 0x178,
  DFT_BURN_SOUND7 = 0x179,
  DFT_BURN_SOUND8 = 0x17A,
  DFT_BURN_SOUND9 = 0x17B,
  DFT_BURN_SOUND10 = 0x17C,
  DFT_BURN_SOUND11 = 0x17D,
  DFT_BURN_SOUND12 = 0x17E,
  DFT_BURN_SOUND13 = 0x17F,
  DFT_BURN_SOUND14 = 0x180,
  DFT_BURN_SOUND15 = 0x181,
  DFT_BURN_SOUND16 = 0x182,
  DFT_BURN_SOUND17 = 0x183,
  DFT_BURN_SOUND18 = 0x184,
  DFT_BURN_SOUND19 = 0x185,
  DFT_BURN_SOUND20 = 0x186,
  DFT_BURN_SOUND21 = 0x187,
  DFT_BURN_SOUND22 = 0x188,
  DFT_BURN_SOUND23 = 0x189,
  DFT_BURN_SOUND24 = 0x18A,
  DFT_BURN_SOUND25 = 0x18B,
  DFT_BURN_SOUND26 = 0x18C,
  DFT_BURN_SOUND27 = 0x18D,
  DFT_BURN_SOUND28 = 0x18E,
  DFT_BURN_SOUND29 = 0x18F,
  DFT_BURN_SOUND30 = 0x190,
  DFT_BURN_SOUND31 = 0x191,
  DFT_DAMAGE_ENTITY0 = 0x192,
  DFT_DAMAGE_ENTITY1 = 0x193,
  DFT_DAMAGE_ENTITY2 = 0x194,
  DFT_DAMAGE_ENTITY3 = 0x195,
  DFT_DAMAGE_ENTITY4 = 0x196,
  DFT_DAMAGE_ENTITY5 = 0x197,
  DFT_DAMAGE_ENTITY6 = 0x198,
  DFT_DAMAGE_ENTITY7 = 0x199,
  DFT_DAMAGE_ENTITY8 = 0x19A,
  DFT_DAMAGE_ENTITY9 = 0x19B,
  DFT_DAMAGE_ENTITY10 = 0x19C,
  DFT_DAMAGE_ENTITY11 = 0x19D,
  DFT_DAMAGE_ENTITY12 = 0x19E,
  DFT_DAMAGE_ENTITY13 = 0x19F,
  DFT_DAMAGE_ENTITY14 = 0x1A0,
  DFT_DAMAGE_ENTITY15 = 0x1A1,
  DFT_DAMAGE_ENTITY16 = 0x1A2,
  DFT_DAMAGE_ENTITY17 = 0x1A3,
  DFT_DAMAGE_ENTITY18 = 0x1A4,
  DFT_DAMAGE_ENTITY19 = 0x1A5,
  DFT_DAMAGE_ENTITY20 = 0x1A6,
  DFT_DAMAGE_ENTITY21 = 0x1A7,
  DFT_DAMAGE_ENTITY22 = 0x1A8,
  DFT_DAMAGE_ENTITY23 = 0x1A9,
  DFT_DAMAGE_ENTITY24 = 0x1AA,
  DFT_DAMAGE_ENTITY25 = 0x1AB,
  DFT_DAMAGE_ENTITY26 = 0x1AC,
  DFT_DAMAGE_ENTITY27 = 0x1AD,
  DFT_DAMAGE_ENTITY28 = 0x1AE,
  DFT_DAMAGE_ENTITY29 = 0x1AF,
  DFT_DAMAGE_ENTITY30 = 0x1B0,
  DFT_DAMAGE_ENTITY31 = 0x1B1,
  DFT_PIECE_LABEL0 = 0x1B2,
  DFT_PIECE_LABEL1 = 0x1B3,
  DFT_PIECE_LABEL2 = 0x1B4,
  DFT_PIECE_LABEL3 = 0x1B5,
  DFT_PIECE_LABEL4 = 0x1B6,
  DFT_PIECE_LABEL5 = 0x1B7,
  DFT_PIECE_LABEL6 = 0x1B8,
  DFT_PIECE_LABEL7 = 0x1B9,
  DFT_PIECE_LABEL8 = 0x1BA,
  DFT_PIECE_LABEL9 = 0x1BB,
  DFT_PIECE_LABEL10 = 0x1BC,
  DFT_PIECE_LABEL11 = 0x1BD,
  DFT_PIECE_LABEL12 = 0x1BE,
  DFT_PIECE_LABEL13 = 0x1BF,
  DFT_PIECE_LABEL14 = 0x1C0,
  DFT_PIECE_LABEL15 = 0x1C1,
  DFT_PIECE_LABEL16 = 0x1C2,
  DFT_PIECE_LABEL17 = 0x1C3,
  DFT_PIECE_LABEL18 = 0x1C4,
  DFT_PIECE_LABEL19 = 0x1C5,
  DFT_PIECE_LABEL20 = 0x1C6,
  DFT_PIECE_LABEL21 = 0x1C7,
  DFT_PIECE_LABEL22 = 0x1C8,
  DFT_PIECE_LABEL23 = 0x1C9,
  DFT_PIECE_LABEL24 = 0x1CA,
  DFT_PIECE_LABEL25 = 0x1CB,
  DFT_PIECE_LABEL26 = 0x1CC,
  DFT_PIECE_LABEL27 = 0x1CD,
  DFT_PIECE_LABEL28 = 0x1CE,
  DFT_PIECE_LABEL29 = 0x1CF,
  DFT_PIECE_LABEL30 = 0x1D0,
  DFT_PIECE_LABEL31 = 0x1D1,
  DFT_MAX_FIELDS = 0x1D2,
};

/* 846 */
enum $22C86B71545FDB8A9599A22D0CC3B90C
{
  DE_DAMAGE = 0x0,
  DE_RADIUS_DAMAGE = 0x1,
  DE_HITEVENT = 0x2,
};

/* 847 */
enum codetype
{
  CODES = 0x0,
  LENS = 0x1,
  DISTS = 0x2,
};

/* 848 */
typedef _ATTRIBUTEINFO inflate_mode;

/* 849 */
enum block_state
{
  need_more = 0x0,
  block_done = 0x1,
  finish_started = 0x2,
  finish_done = 0x3,
};

/* 850 */
enum $763885B40551D1A993259186FAE0955F
{
  DOBJ_CREATE_SIZE = 0x7C,
  XSURFACE_SIZE = 0x50,
};

/* 851 */
enum SideClassification
{
  SIDE_FRONT = 0x0,
  SIDE_BACK = 0x1,
  SIDE_ON = 0x2,
  SIDE_CROSS = 0x3,
  SIDE_COUNT = 0x4,
};

/* 852 */
enum $A58835BC49EDD74CAD4ECC1F509BC372
{
  XANIM_VERSION = 0x13,
  XMODEL_VERSION = 0x40,
  XMODEL_PIECES_VERSION = 0x1,
};

/* 853 */
enum $3A2B9D8ED8229F71E25E428FDC2E990E
{
  MTL_TYPE_DEFAULT = 0x0,
  MTL_TYPE_MODEL = 0x1,
  MTL_TYPE_MODEL_VERTCOL = 0x2,
  MTL_TYPE_MODEL_LIGHTMAP_VC = 0x3,
  MTL_TYPE_WORLD_VERTCOL = 0x4,
  MTL_TYPE_PACKED_WORLD_VERTCOL = 0x5,
  MTL_TYPE_QUANT_WORLD = 0x6,
  MTL_TYPE_QUANT_WORLD_VERTCOL = 0x7,
  MTL_TYPE_COUNT = 0x8,
};

/* 854 */
enum $70A0590CFEE2A73F14AF1E9B8A7E32F8
{
  ANIM_LOOP = 0x1,
  ANIM_DELTA = 0x2,
  ANIM_DELTA_3D = 0x4,
  ANIM_LEFT_HAND_GRIP_IK = 0x8,
};

/* 855 */
enum $673D3D32AD1EBCE7A4DFDC45146E2679
{
  XANIM_ERROR_NONE = 0x0,
  XANIM_ERROR_BAD_ROOT_ANIM = 0x1,
  XANIM_ERROR_BAD_NOTIFY = 0x2,
};

/* 856 */
enum ComDevhostCommandXAnim
{
  COM_DEVHOST_XANIM_TIMESTAMP = 0x0,
  COM_DEVHOST_XANIM_ENTNUM = 0x1,
  COM_DEVHOST_XANIM_NODE = 0x2,
  COM_DEVHOST_XANIM_ANIMCMD = 0x3,
  COM_DEVHOST_XANIM_PAUSED = 0x4,
};

/* 857 */
enum sysEventType_t
{
  SE_NONE = 0x0,
  SE_KEY = 0x1,
  SE_CHAR = 0x2,
  SE_CONSOLE = 0x3,
};

/* 858 */
enum $F66F11577883FF5103D9AE46B3FA5794
{
  R_WINDOW = 0x0,
  R_FULLSCREEN = 0x1,
  R_FULLSCREEN_WINDOW = 0x2,
};

/* 859 */
enum $BB2E02FDB446203B7C7FEF11704DD1AF
{
  HW_CURSOR_ARROW = 0x0,
  HW_CURSOR_GRABOPEN = 0x1,
  HW_CURSOR_GRABCLOSE = 0x2,
  HW_CURSOR_GRABOPENZM = 0x3,
  HW_CURSOR_GRABCLOSEZM = 0x4,
  HW_CURSOR_COUNT = 0x5,
};

/* 860 */
typedef $BAFBE4AC9B3285BEF72BDB25B79551C4 IPPROTO;

/* 861 */
enum DataNodeType
{
  DataNodeType_String = 0x0,
  DataNodeType_Binary = 0x1,
};

/* 862 */
typedef $D1D25F7E59039EE4F06FC6A15C79D0DD InternetCookieState;

/* 863 */
typedef $5BDA056A888DC5F03790D737B7575A6D INTERNET_SCHEME;

/* 864 */
typedef $8C57D1DDA788D6050A7C554DBD1EB1AC ADDRESS_MODE;

/* 865 */
enum clientlsg_t
{
  CLIENT_LSG_DEV = 0x0,
  CLIENT_LSG_CERT = 0x1,
  CLIENT_LSG_LIVE = 0x2,
  MAX_CLIENT_LSGS = 0x3,
};

/* 866 */
enum WinQuitBehavior
{
  WIN_IGNORE_QUIT = 0x0,
  WIN_HANDLE_QUIT = 0x1,
};

/* 867 */
enum $820EBB545D3F146E29ECE2850B6BADE7
{
  TRACK_EXE_PROJ = 0x0,
  TRACK_CG_PROJ = 0x1,
  TRACK_G_PROJ = 0x2,
  TRACK_R_PROJ = 0x3,
  TRACK_COUNT_PROJ = 0x4,
};

/* 868 */
enum IdentityParam
{
  IDENTITY_ID = 0x0,
  IDENTITY_TITLE_ID = 0x1,
  IDENTITY_AUTH_ADDR = 0x2,
  IDENTITY_LSG_ADDR = 0x3,
  IDENTITY_DW_KEY = 0x4,
  IDENTITY_ENVIRONMENT = 0x5,
  IDENTITY_PLATFORM = 0x6,
  IDENTITY_PARAM_COUNT = 0x7,
};

/* 869 */
typedef $7A3BD45A5F95625F9F6BD169AC310B53 SHELL_LINK_DATA_FLAGS;

/* 870 */
enum GamePadStickDir
{
  GPAD_STICK_POS = 0x0,
  GPAD_STICK_NEG = 0x1,
  GPAD_STICK_DIRCOUNT = 0x2,
};

/* 871 */
enum GamepadPhysicalAxis
{
  GPAD_PHYSAXIS_RSTICK_X = 0x0,
  GPAD_PHYSAXIS_RSTICK_Y = 0x1,
  GPAD_PHYSAXIS_LSTICK_X = 0x2,
  GPAD_PHYSAXIS_LSTICK_Y = 0x3,
  GPAD_PHYSAXIS_RTRIGGER = 0x4,
  GPAD_PHYSAXIS_LTRIGGER = 0x5,
  GPAD_PHYSAXIS_COUNT = 0x6,
  GPAD_PHYSAXIS_NONE = 0xFFFFFFFF,
};

/* 872 */
enum GamePadButtonEvent
{
  GPAD_BUTTON_RELEASED = 0x0,
  GPAD_BUTTON_PRESSED = 0x1,
  GPAD_BUTTON_UPDATE = 0x2,
};

/* 873 */
enum MB_PREDICTION_MODE
{
  DC_PRED = 0x0,
  V_PRED = 0x1,
  H_PRED = 0x2,
  TM_PRED = 0x3,
  B_PRED = 0x4,
  NEARESTMV = 0x5,
  NEARMV = 0x6,
  ZEROMV = 0x7,
  NEWMV = 0x8,
  SPLITMV = 0x9,
  MB_MODE_COUNT = 0xA,
};

/* 874 */
enum MB_LVL_FEATURES
{
  MB_LVL_ALT_Q = 0x0,
  MB_LVL_ALT_LF = 0x1,
  MB_LVL_MAX = 0x2,
};

/* 875 */
enum MV_REFERENCE_FRAME
{
  INTRA_FRAME = 0x0,
  LAST_FRAME = 0x1,
  GOLDEN_FRAME = 0x2,
  ALTREF_FRAME = 0x3,
  MAX_REF_FRAMES = 0x4,
};

/* 876 */
enum YUV_TYPE
{
  REG_YUV = 0x0,
  INT_YUV = 0x1,
};

/* 877 */
enum B_PREDICTION_MODE
{
  B_DC_PRED = 0x0,
  B_TM_PRED = 0x1,
  B_VE_PRED = 0x2,
  B_HE_PRED = 0x3,
  B_LD_PRED = 0x4,
  B_RD_PRED = 0x5,
  B_VR_PRED = 0x6,
  B_VL_PRED = 0x7,
  B_HD_PRED = 0x8,
  B_HU_PRED = 0x9,
  LEFT4X4 = 0xA,
  ABOVE4X4 = 0xB,
  ZERO4X4 = 0xC,
  NEW4X4 = 0xD,
  B_MODE_COUNT = 0xE,
};

/* 878 */
enum FRAME_TYPE
{
  KEY_FRAME = 0x0,
  INTER_FRAME = 0x1,
};

/* 879 */
enum $D0733A9785AB0541CBA7AFF8BC2DE68C
{
  VORBIS_packet_id = 0x1,
  VORBIS_packet_comment = 0x3,
  VORBIS_packet_setup = 0x5,
};

/* 880 */
enum STBVorbisError
{
  VORBIS__no_error = 0x0,
  VORBIS_need_more_data = 0x1,
  VORBIS_invalid_api_mixing = 0x2,
  VORBIS_outofmem = 0x3,
  VORBIS_feature_not_supported = 0x4,
  VORBIS_too_many_channels = 0x5,
  VORBIS_file_open_failure = 0x6,
  VORBIS_seek_without_length = 0x7,
  VORBIS_unexpected_eof = 0xA,
  VORBIS_seek_invalid = 0xB,
  VORBIS_invalid_setup = 0x14,
  VORBIS_invalid_stream = 0x15,
  VORBIS_missing_capture_pattern = 0x1E,
  VORBIS_invalid_stream_structure_version = 0x1F,
  VORBIS_continued_packet_flag_invalid = 0x20,
  VORBIS_incorrect_stream_serial_number = 0x21,
  VORBIS_invalid_first_page = 0x22,
  VORBIS_bad_packet_type = 0x23,
  VORBIS_cant_find_last_page = 0x24,
  VORBIS_seek_failed = 0x25,
};

/* 881 */
enum GamepadVirtualAxis
{
  GPAD_VIRTAXIS_SIDE = 0x0,
  GPAD_VIRTAXIS_FORWARD = 0x1,
  GPAD_VIRTAXIS_UP = 0x2,
  GPAD_VIRTAXIS_YAW = 0x3,
  GPAD_VIRTAXIS_PITCH = 0x4,
  GPAD_VIRTAXIS_ATTACK = 0x5,
  GPAD_VIRTAXIS_COUNT = 0x6,
  GPAD_VIRTAXIS_NONE = 0xFFFFFFFF,
};

/* 882 */
enum ROMType
{
  ROM_2K_MIRROR = 0x0,
  ROM_4K = 0x1,
  ROM_2_4K = 0x2,
  ROM_2_4K_DPC = 0x3,
};

/* 883 */
enum D3D11_CPU_ACCESS_FLAG
{
  D3D11_CPU_ACCESS_WRITE = 0x10000,
  D3D11_CPU_ACCESS_READ = 0x20000,
};

/* 884 */
enum Location
{
  LOC_TIA = 0x0,
  LOC_PIA_RAM = 0x1,
  LOC_PIA = 0x2,
  LOC_ROM = 0x3,
};

/* 885 */
enum TIAPort
{
  VSYNC = 0x0,
  VBLANK = 0x1,
  WSYNC = 0x2,
  RSYNC = 0x3,
  NUSIZ0 = 0x4,
  NUSIZ1 = 0x5,
  COLUP0 = 0x6,
  COLUP1 = 0x7,
  COLUPF = 0x8,
  COLUBK = 0x9,
  CTRLPF = 0xA,
  REFP0 = 0xB,
  REFP1 = 0xC,
  PF0 = 0xD,
  PF1 = 0xE,
  PF2 = 0xF,
  RESP0 = 0x10,
  RESP1 = 0x11,
  RESM0 = 0x12,
  RESM1 = 0x13,
  RESBL = 0x14,
  AUDC0 = 0x15,
  AUDC1 = 0x16,
  AUDF0 = 0x17,
  AUDF1 = 0x18,
  AUDV0 = 0x19,
  AUDV1 = 0x1A,
  GRP0 = 0x1B,
  GRP1 = 0x1C,
  ENAM0 = 0x1D,
  ENAM1 = 0x1E,
  ENABL = 0x1F,
  HMP0 = 0x20,
  HMP1 = 0x21,
  HMM0 = 0x22,
  HMM1 = 0x23,
  HMBL = 0x24,
  VDELP0 = 0x25,
  VDELP1 = 0x26,
  VDELBL = 0x27,
  RESMP0 = 0x28,
  RESMP1 = 0x29,
  HMOVE = 0x2A,
  HMCLR = 0x2B,
  CXCLR = 0x2C,
  CXM0P = 0x30,
  CXM1P = 0x31,
  CXP0FB = 0x32,
  CXP1FB = 0x33,
  CXM0FB = 0x34,
  CXM1FB = 0x35,
  CXBLPF = 0x36,
  CXPPMM = 0x37,
  INPT0 = 0x38,
  INPT1 = 0x39,
  INPT2 = 0x3A,
  INPT3 = 0x3B,
  INPT4 = 0x3C,
  INPT5 = 0x3D,
};

/* 886 */
enum AddressingMode
{
  AM_INVALID = 0x0,
  AM_IMPLICIT = 0x1,
  AM_ACCUMULATOR = 0x2,
  AM_IMMEDIATE = 0x3,
  AM_RELATIVE = 0x4,
  AM_ZEROPAGE = 0x5,
  AM_ZEROPAGE_X = 0x6,
  AM_ZEROPAGE_Y = 0x7,
  AM_ABSOLUTE = 0x8,
  AM_ABSOLUTE_X = 0x9,
  AM_ABSOLUTE_Y = 0xA,
  AM_INDEXED_INDIRECT = 0xB,
  AM_INDIRECT_INDEXED = 0xC,
};

/* 887 */
enum PIAPort
{
  SWCHA = 0x0,
  SWACNT = 0x1,
  SWCHB = 0x2,
  SWBCNT = 0x3,
  INTIM = 0x4,
  INSTAT = 0x5,
  TIM1T = 0x14,
  TIM8T = 0x15,
  TIM64T = 0x16,
  T1024T = 0x17,
};

/* 888 */
enum PIMP_TECHSET
{
  PIMP_TECHSET_DEFAULT = 0x0,
  PIMP_TECHSET_MODEL = 0x1,
  PIMP_TECHSET_WORLD = 0x2,
  PIMP_TECHSET_PACKED_WORLD = 0x3,
  PIMP_TECHSET_QUANT_WORLD_NO_COLOR = 0x4,
  PIMP_TECHSET_QUANT_WORLD = 0x5,
  PIMP_TECHSET_LMAP_VERTEX_MODEL = 0x6,
  PIMP_TECHSET_COUNT = 0x7,
};

/* 889 */
enum $B8B020795EE7B60F2562A4AAB6C6F743
{
  LEFT = 0x0,
  RIGHT = 0x1,
};

/* 890 */
enum $F405DBE12AC9DCDAC57F7AFCE3D12168
{
  RED = 0x0,
  BLACK = 0x1,
};

/* 891 */
enum ParseTokenType
{
  PARSE_TOKEN_UNKNOWN = 0x0,
  PARSE_TOKEN_NUMBER = 0x1,
  PARSE_TOKEN_STRING = 0x2,
  PARSE_TOKEN_NAME = 0x3,
  PARSE_TOKEN_HASH = 0x4,
  PARSE_TOKEN_PUNCTUATION = 0x5,
};

/* 892 */
enum ParseThreadContext
{
  PARSE_THREAD_MAIN = 0x0,
  PARSE_THREAD_BACKEND = 0x1,
  PARSE_THREAD_SERVER = 0x2,
  PARSE_THREAD_FASTFILE = 0x3,
  PARSE_THREAD_COUNT = 0x4,
};

/* 893 */
enum Q_DATA_TYPE
{
  Q_DATA_TYPE_INT = 0x0,
  Q_DATA_TYPE_FLOAT = 0x1,
  Q_DATA_TYPE_BLOB = 0x2,
  Q_DATA_TYPE_STRING = 0x3,
  Q_DATA_TYPE_ISTRING = 0x4,
};

/* 894 */
enum Q_OPERATOR
{
  Q_OPERATOR_EQUAL = 0x0,
  Q_OPERATOR_LESSTHAN = 0x1,
  Q_OPERATOR_GREATERTHAN = 0x2,
  Q_OPERATOR_LESSTHANOREQUALTO = 0x3,
  Q_OPERATOR_GREATERTHANOREQUALTO = 0x4,
};

/* 895 */
enum $F9FDB751964486EBBB4E316E0810D19A
{
  Size = 0x20,
};

/* 896 */
enum $47F4210D2B59DBE02E60A87266E5FF22
{
  Chars = 0x1C,
};

/* 897 */
enum $ED575902F3AE2141663C376AD65694D4
{
  Elements = 0x8,
};

/* 898 */
enum $C07696C12B5D84BD2A714AC3BCA1BF5A
{
  SAVE_SEGMENT_START = 0x0,
  SAVE_SEGMENT_MAIN = 0x1,
  SAVE_SEGMENT_NORMAL = 0x2,
  SAVE_SEGMENT_LEVEL = 0x3,
  SAVE_SEGMENT_SCRIPT = 0x4,
  SAVE_SEGMENT_ANIMTREE = 0x5,
  SAVE_SEGMENT_END = 0x6,
  SAVE_SEGMENT_COUNT = 0x7,
  SAVE_SEGMENT_NONE = 0xFFFFFFFF,
};

/* 899 */
enum EvalValueType
{
  EVAL_VALUE_DOUBLE = 0x0,
  EVAL_VALUE_INT = 0x1,
  EVAL_VALUE_STRING = 0x2,
};

/* 900 */
enum EvalOperatorType
{
  EVAL_OP_LPAREN = 0x0,
  EVAL_OP_RPAREN = 0x1,
  EVAL_OP_COLON = 0x2,
  EVAL_OP_QUESTION = 0x3,
  EVAL_OP_PLUS = 0x4,
  EVAL_OP_MINUS = 0x5,
  EVAL_OP_UNARY_PLUS = 0x6,
  EVAL_OP_UNARY_MINUS = 0x7,
  EVAL_OP_MULTIPLY = 0x8,
  EVAL_OP_DIVIDE = 0x9,
  EVAL_OP_MODULUS = 0xA,
  EVAL_OP_LSHIFT = 0xB,
  EVAL_OP_RSHIFT = 0xC,
  EVAL_OP_BITWISE_NOT = 0xD,
  EVAL_OP_BITWISE_AND = 0xE,
  EVAL_OP_BITWISE_OR = 0xF,
  EVAL_OP_BITWISE_XOR = 0x10,
  EVAL_OP_LOGICAL_NOT = 0x11,
  EVAL_OP_LOGICAL_AND = 0x12,
  EVAL_OP_LOGICAL_OR = 0x13,
  EVAL_OP_EQUALS = 0x14,
  EVAL_OP_NOT_EQUAL = 0x15,
  EVAL_OP_LESS = 0x16,
  EVAL_OP_LESS_EQUAL = 0x17,
  EVAL_OP_GREATER = 0x18,
  EVAL_OP_GREATER_EQUAL = 0x19,
  EVAL_OP_COUNT = 0x1A,
};

/* 901 */
enum DvarSetSource
{
  DVAR_SOURCE_INTERNAL = 0x0,
  DVAR_SOURCE_EXTERNAL = 0x1,
  DVAR_SOURCE_SCRIPT = 0x2,
  DVAR_SOURCE_DEVGUI = 0x3,
};

/* 902 */
enum showpacketsType_t
{
  SHOWPACKETS_DISABLED = 0x0,
  SHOWPACKETS_LEVEL_1 = 0x1,
  SHOWPACKETS_LEVEL_2 = 0x2,
  SHOWPACKETS_LEVEL_COUNT = 0x3,
};

/* 903 */
enum shownetType_t
{
  SHOWNET_LEVEL_MINUS_2 = 0xFFFFFFFE,
  SHOWNET_LEVEL_MINUS_1 = 0xFFFFFFFF,
  SHOWNET_LEVEL_0 = 0x0,
  SHOWNET_LEVEL_1 = 0x1,
  SHOWNET_LEVEL_2 = 0x2,
  SHOWNET_LEVEL_3 = 0x3,
  SHOWNET_LEVEL_4 = 0x4,
  SHOWNET_LEVEL_COUNT = 0x7,
};

/* 904 */
enum clearType_t
{
  R_CLEAR_NEVER = 0x0,
  R_CLEAR_DEV_ONLY_BLINK = 0x1,
  R_CLEAR_BLINK = 0x2,
  R_CLEAR_STEADY = 0x3,
  R_CLEAR_FOG_COLOR = 0x4,
  R_CLEAR_COUNT = 0x5,
};

/* 905 */
enum compassPartialType_t
{
  COMPASS_PARTIAL_TYPE_2D = 0x0,
  COMPASS_PARTIAL_TYPE_3D = 0x1,
};

/* 906 */
enum systemTest_t
{
  LUA_SYSTEM_TEST_OFF = 0x0,
  LUA_SYSTEM_TEST_ON = 0x1,
  LUA_SYSTEM_TEST_ON_EXTRA_LOGGING = 0x2,
};

/* 907 */
enum perfValType_t
{
  PERF_CLIENTPING = 0x0,
  PERF_CLIENTTIMEOUTS = 0x1,
  PERF_DWTASKSCOMPLETE = 0x2,
  PERF_DWTASKSFAIL = 0x3,
  PERF_DWTASKSTIMEOUT = 0x4,
  PERF_TASKTIME = 0x5,
  PERF_DWDISCONNECTS = 0x6,
  PERF_SERVERFRAMEMS = 0x7,
  PERF_SNAPSHOT_CLIENT_NODELTA = 0x8,
  PERF_SNAPSHOT_STALE_DELTA = 0x9,
  PERF_SNAPSHOT_STALE_ENTS = 0xA,
  PERF_SNAPSHOT_OK_DELTA = 0xB,
  PERF_GAMESTATES = 0xC,
  PERF_PARTYSTATES = 0xD,
  PERF_MAX_COUNTERS = 0xE,
};

/* 908 */
enum FsThread
{
  FS_THREAD_MAIN = 0x0,
  FS_THREAD_STREAM = 0x1,
  FS_THREAD_DATABASE = 0x2,
  FS_THREAD_BACKEND = 0x3,
  FS_THREAD_SERVER = 0x4,
  FS_THREAD_COUNT = 0x5,
  FS_THREAD_INVALID = 0x6,
};

/* 909 */
typedef $D02A68EF54712B1F200C52B69E1D9509 SHGFP_TYPE;

/* 910 */
enum FS_ErrorCodes
{
  FS_OPEN_FAILURE = 0xFFFFFFFF,
  FS_OPEN_NOT_IN_IWD_OR_LOCALIZED_DIR = 0xFFFFFFFE,
};

/* 911 */
enum expOperationEnum
{
  OP_NOOP = 0x0,
  OP_RIGHTPAREN = 0x1,
  OP_MULTIPLY = 0x2,
  OP_DIVIDE = 0x3,
  OP_MODULUS = 0x4,
  OP_ADD = 0x5,
  OP_SUBTRACT = 0x6,
  OP_NEGATE = 0x7,
  OP_NOT = 0x8,
  OP_LESSTHAN = 0x9,
  OP_LESSTHANEQUALTO = 0xA,
  OP_GREATERTHAN = 0xB,
  OP_GREATERTHANEQUALTO = 0xC,
  OP_EQUALS = 0xD,
  OP_NOTEQUAL = 0xE,
  OP_AND = 0xF,
  OP_OR = 0x10,
  OP_LEFTPAREN = 0x11,
  OP_COMMA = 0x12,
  OP_BITWISEAND = 0x13,
  OP_BITWISEOR = 0x14,
  OP_BITWISENOT = 0x15,
  OP_BITSHIFTLEFT = 0x16,
  OP_BITSHIFTRIGHT = 0x17,
  NUM_EXPRESSION_OPERATORS = 0x18,
  MAX_OPERATOR_VALUE = 0x4000,
};

/* 912 */
enum expressionRpnEnum
{
  RPN_CONSTANT = 0x0,
  RPN_CMD_IDX = 0x1,
  RPN_CMD = 0x2,
  RPN_END = 0x3,
};

/* 913 */
enum afterActionReportAwards_t
{
  AAR_AWARDS_PERSONAL_BESTS = 0x0,
  AAR_AWARDS_STATS_MILESTONES = 0x1,
  AAR_AWARDS_CONTRACTS = 0x2,
  AAR_AWARDS_COUNT = 0x3,
  AAR_MAX_AWARDS = 0x3,
};

/* 914 */
enum $6FADF5C15CAE3D6CBD73BEF199E6F39C
{
  PLAYER_FIELD_name = 0x0,
  PLAYER_FIELD_localname = 0x1,
  PLAYER_FIELD_teamname = 0x2,
  PLAYER_FIELD_otherteamname = 0x3,
  PLAYER_FIELD_rank = 0x4,
  PLAYER_FIELD_clan = 0x5,
  PLAYER_FIELD_tag = 0x6,
  PLAYER_FIELD_rankicon = 0x7,
  PLAYER_FIELD_currentteamname = 0x8,
  PLAYER_FIELD_xuid = 0x9,
  PLAYER_FIELD_dead = 0xA,
  PLAYER_FIELD_clipAmmo = 0xB,
  PLAYER_FIELD_nightvision = 0xC,
  PLAYER_FIELD_number = 0xD,
  PLAYER_FIELD_score = 0xE,
  PLAYER_FIELD_deaths = 0xF,
  PLAYER_FIELD_kills = 0x10,
  PLAYER_FIELD_place = 0x11,
  PLAYER_FIELD_ping = 0x12,
  NUM_PLAYER_FIELDS = 0x13,
};

/* 915 */
enum e_mapSelectionColumns
{
  FEEDER_MAPSELECTION_COLUMN_BACKGROUND = 0x0,
  FEEDER_MAPSELECTION_COLUMN_NAME = 0x1,
  FEEDER_MAPSELECTION_COLUMN_A_BUTTON = 0x2,
};

/* 916 */
enum e_gametypesBaseColumns
{
  GAMETYPES_BASE_COLUMN_BACKGROUND = 0x0,
  GAMETYPES_BASE_COLUMN_NAME = 0x1,
  GAMETYPES_BASE_COLUMN_A_BUTTON = 0x2,
  GAMETYPES_BASE_COLUMN_ICON = 0x3,
};

/* 917 */
enum $98AE70F732E8CB9170317084211DA179
{
  OPERATOR = 0x0,
  OPERAND = 0x1,
  INVALID_ENTRY_TYPE = 0x2,
};

/* 918 */
enum $8B3B976AE54B64658C99FB6D46027F88
{
  PARSE_NORMAL = 0x0,
  PARSE_CONVERSION = 0x1,
  PARSE_LENGTH = 0x2,
  PARSE_PRECISION = 0x3,
  PARSE_PRECISION_MAYBE = 0x4,
  PARSE_WIDTH = 0x5,
  PARSE_FLAG = 0x6,
};

/* 919 */
enum AssertOccurance
{
  FIRST_TIME = 0x0,
  RECURSIVE = 0x1,
};

/* 920 */
enum $A1DB2830E2D640E6C56480966E17B57C
{
  CONDITION_TYPE_NONE = 0x0,
  CONDITION_TYPE_IF = 0x1,
  CONDITION_TYPE_ELSEIF = 0x2,
  CONDITION_TYPE_ELSE = 0x3,
};

/* 921 */
enum msgwnd_mode_t
{
  MWM_BOTTOMUP_ALIGN_TOP = 0x0,
  MWM_BOTTOMUP_ALIGN_BOTTOM = 0x1,
  MWM_TOPDOWN_ALIGN_TOP = 0x2,
  MWM_TOPDOWN_ALIGN_BOTTOM = 0x3,
};

/* 922 */
enum $A014624DBDC6D0CCECD1FB54F2C8C97B
{
  MAX_STACK_SIZE = 0x2,
};

/* 923 */
enum $C4F9F26EDD3B79EFFA731C35E64ADC96
{
  STACK_MAX_SIZE = 0x2,
};

/* 924 */
enum PlaylistLockState
{
  PLS_UNLOCKED = 0x0,
  PLS_FETCHING = 0x1,
  PLS_XP = 0x2,
  PLS_PLEVEL = 0x3,
  PLS_MAXPARTY = 0x4,
  PLS_MINPARTY = 0x5,
  PLS_GAMETYPEBAN = 0x6,
  PLS_FINISHEDSOLO = 0x7,
  PLS_REQUIRED_DLC_DISABLED = 0x8,
  PLS_REQUIRED_DLC_NOT_AVAILABLE = 0x9,
  PLS_CODPOINTS = 0xA,
  PLS_VISPROFILEVAR = 0xB,
  PLS_LOCALPLAYERS = 0xC,
  PLS_NOGUESTS = 0xD,
  PLS_COUNT = 0xE,
};

/* 925 */
enum parseBlockTypes
{
  PARSE_UNKNOWN = 0x0,
  PARSE_GAMETYPE = 0x1,
  PARSE_PLAYLIST = 0x2,
  PARSE_SUPERCATEGORY = 0x3,
  PARSE_CATEGORY = 0x4,
  PARSE_IGNORE = 0x5,
  PARSE_SETTINGS = 0x6,
  PARSE_MAPLIST = 0x7,
};

/* 926 */
enum motdDescriptorStatus_e
{
  MOTD_DESCRIPTOR_STATUS_INVALID = 0x0,
  MOTD_DESCRIPTOR_STATUS_WORKING = 0x1,
  MOTD_DESCRIPTOR_STATUS_DONE = 0x2,
  MOTD_DESCRIPTOR_STATUS_ERROR = 0x3,
};

/* 927 */
enum LbAggType
{
  LBAGG_TYPE_MIN = 0x0,
  LBAGG_TYPE_MAX = 0x1,
  LBAGG_TYPE_ADD = 0x2,
  LBAGG_TYPE_REPLACE = 0x3,
  LBAGG_TYPE_COUNT = 0x4,
};

/* 928 */
enum LbUpdateType
{
  LBUPDATE_TYPE_NORMAL = 0x0,
  LBUPDATE_TYPE_RANK = 0x1,
  LBUPDATE_TYPE_COMBINE = 0x2,
  LBUPDATE_TYPE_COUNT = 0x3,
};

/* 929 */
enum LbColType
{
  LBCOL_TYPE_NUMBER = 0x0,
  LBCOL_TYPE_TIME = 0x1,
  LBCOL_TYPE_LEVELXP = 0x2,
  LBCOL_TYPE_PRESTIGE = 0x3,
  LBCOL_TYPE_BIGNUMBER = 0x4,
  LBCOL_TYPE_PERCENT = 0x5,
  LBCOL_TYPE_TIME_FULL = 0x6,
  LBCOL_TYPE_COUNT = 0x7,
};

/* 930 */
enum scoreBoardColumns_e
{
  SCOREBOARD_COLUMN_NEMESIS_BG = 0x0,
  SCOREBOARD_COLUMN_RANK_BG = 0x1,
  SCOREBOARD_COLUMN_RANK = 0x2,
  SCOREBOARD_COLUMN_RANK_ICON = 0x3,
  SCOREBOARD_COLUMN_NAME = 0x4,
  SCOREBOARD_COLUMN_1 = 0x5,
  SCOREBOARD_COLUMN_2 = 0x6,
  SCOREBOARD_COLUMN_3 = 0x7,
  SCOREBOARD_COLUMN_4 = 0x8,
  SCOREBOARD_COLUMN_5 = 0x9,
};

/* 931 */
enum e_inGamePlayerListColumns
{
  INGAME_LIST_COLUMN_TALKING = 0x0,
  INGAME_LIST_COLUMN_BACKGROUND = 0x1,
  INGAME_LIST_COLUMN_ALT_BG = 0x2,
  INGAME_LIST_COLUMN_RANK_BG = 0x3,
  INGAME_LIST_COLUMN_RANK = 0x4,
  INGAME_LIST_COLUMN_RANK_ICON = 0x5,
  INGAME_LIST_COLUMN_NAME = 0x6,
  INGAME_LIST_COLUMN_SCORE = 0x7,
};

/* 932 */
enum e_itemListColumns
{
  ITEM_LIST_COLUMN_BACKGROUND = 0x0,
  ITEM_LIST_COLUMN_NAME = 0x1,
  ITEM_LIST_COLUMN_IMAGE = 0x2,
  ITEM_LIST_COLUMN_COST = 0x3,
  ITEM_LIST_COLUMN_LOCK = 0x4,
  ITEM_LIST_COLUMN_COUNT = 0x5,
  ITEM_LIST_COLUMN_EXTRA_IMAGE = 0x6,
  ITEM_LIST_COLUMN_NEWICON = 0x7,
};

/* 933 */
enum e_challengesPerksColumns
{
  PERKS_LIST_COLUMN_NAME = 0x0,
  PERKS_LIST_COLUMN_LOCK = 0x1,
  PERKS_LIST_COLUMN_COUNT = 0x2,
};

/* 934 */
enum e_statsMilestonesListColumns
{
  STATS_MILESTONES_COLUMN_MILESTONE_NAME = 0x0,
  STATS_MILESTONES_COLUMN_PROGRESS_BAR = 0x1,
  STATS_MILESTONES_COLUMN_COMPLETED_TEXT = 0x2,
  STATS_MILESTONES_COLUMN_MILESTONE_LOCKED = 0x3,
};

/* 935 */
enum e_playlistsColumns
{
  FEEDER_NEW_PLAYLISTS_COLUMN_BACKGROUND = 0x0,
  FEEDER_NEW_PLAYLISTS_COLUMN_NAME = 0x1,
  FEEDER_NEW_PLAYLISTS_COLUMN_A_BUTTON = 0x2,
  FEEDER_NEW_PLAYLISTS_COLUMN_BUY = 0x3,
};

/* 936 */
enum $A3A7E6E2E2AC2375FFED1233A0A96B46
{
  MZ_ZIP_MAX_IO_BUF_SIZE = 0x10000,
  MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE = 0x104,
  MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE = 0x100,
};

/* 937 */
enum $167839DCEF9C83A6AAF314A3A0BADA5A
{
  TINFL_MAX_HUFF_TABLES = 0x3,
  TINFL_MAX_HUFF_SYMBOLS_0 = 0x120,
  TINFL_MAX_HUFF_SYMBOLS_1 = 0x20,
  TINFL_MAX_HUFF_SYMBOLS_2 = 0x13,
  TINFL_FAST_LOOKUP_BITS = 0xA,
  TINFL_FAST_LOOKUP_SIZE = 0x400,
};

/* 938 */
enum $35005C78248C81979D44CE3F428C8E03
{
  TDEFL_MAX_HUFF_TABLES = 0x3,
  TDEFL_MAX_HUFF_SYMBOLS_0 = 0x120,
  TDEFL_MAX_HUFF_SYMBOLS_1 = 0x20,
  TDEFL_MAX_HUFF_SYMBOLS_2 = 0x13,
  TDEFL_LZ_DICT_SIZE = 0x8000,
  TDEFL_LZ_DICT_SIZE_MASK = 0x7FFF,
  TDEFL_MIN_MATCH_LEN = 0x3,
  TDEFL_MAX_MATCH_LEN = 0x102,
};

/* 939 */
enum $5C89F83863B8E7803A362DD5A4D97FF0
{
  TDEFL_LZ_CODE_BUF_SIZE = 0x10000,
  TDEFL_OUT_BUF_SIZE = 0x14CCC,
  TDEFL_MAX_HUFF_SYMBOLS = 0x120,
  TDEFL_LZ_HASH_BITS = 0xF,
  TDEFL_LEVEL1_HASH_SIZE_MASK = 0xFFF,
  TDEFL_LZ_HASH_SHIFT = 0x5,
  TDEFL_LZ_HASH_SIZE = 0x8000,
};

/* 940 */
enum scaleMode_t
{
  EMBLEM_FIXED_SCALE = 0x0,
  EMBLEM_FREE_SCALE = 0x1,
};

/* 941 */
enum emblemIdentity_e
{
  EMBLEM_IDENTITY_INVALID = 0x0,
  EMBLEM_IDENTITY_SELF = 0x1,
  EMBLEM_IDENTITY_LEAGUE = 0x2,
  EMBLEM_IDENTITY_CLAN = 0x3,
  EMBLEM_NUM_IDENTITIES = 0x4,
};

/* 942 */
enum codtvType_e
{
  CODTV_TYPE_INVALID = 0x1,
  CODTV_TYPE_FOLDER = 0x2,
  CODTV_TYPE_DWFOLDER = 0x3,
  CODTV_TYPE_VIDEOFOLDER = 0x4,
  CODTV_TYPE_CUSTOMBUTTON = 0x5,
  CODTV_TYPE_COUNT = 0x6,
};

/* 943 */
enum fileshareDataFilter_e
{
  CODTV_DATAFILTER_INVALID = 0x0,
  CODTV_DATAFILTER_BOOKMARKS = 0x1,
  CODTV_DATAFILTER_VICTORIES = 0x2,
  CODTV_DATAFILTER_HIGHEST_RATED = 0x3,
  CODTV_DATAFILTER_TRENDING = 0x4,
  CODTV_DATAFILTER_INGAMESTORE = 0x5,
};

/* 944 */
enum codtvImageCategory_e
{
  CODTV_IMAGE_TYPE_INVALID = 0xFFFFFFFF,
  CODTV_IMAGE_TYPE_MATERIAL = 0x0,
};

/* 945 */
enum std::io_errc::io_errc
{
  stream = 0x1,
};

/* 946 */
enum std::errc::errc
{
  address_family_not_supported = 0x66,
  address_in_use = 0x64,
  address_not_available = 0x65,
  already_connected = 0x71,
  argument_list_too_long = 0x7,
  argument_out_of_domain = 0x21,
  bad_address = 0xE,
  bad_file_descriptor = 0x9,
  bad_message = 0x68,
  broken_pipe = 0x20,
  connection_aborted = 0x6A,
  connection_already_in_progress = 0x67,
  connection_refused = 0x6B,
  connection_reset = 0x6C,
  cross_device_link = 0x12,
  destination_address_required = 0x6D,
  device_or_resource_busy = 0x10,
  directory_not_empty = 0x29,
  executable_format_error = 0x8,
  file_exists = 0x11,
  file_too_large = 0x1B,
  filename_too_long = 0x26,
  function_not_supported = 0x28,
  host_unreachable = 0x6E,
  identifier_removed = 0x6F,
  illegal_byte_sequence = 0x2A,
  inappropriate_io_control_operation = 0x19,
  interrupted = 0x4,
  invalid_argument = 0x16,
  invalid_seek = 0x1D,
  io_error = 0x5,
  is_a_directory = 0x15,
  message_size = 0x73,
  network_down = 0x74,
  network_reset = 0x75,
  network_unreachable = 0x76,
  no_buffer_space = 0x77,
  no_child_process = 0xA,
  no_link = 0x79,
  no_lock_available = 0x27,
  no_message_available = 0x78,
  no_message = 0x7A,
  no_protocol_option = 0x7B,
  no_space_on_device = 0x1C,
  no_stream_resources = 0x7C,
  no_such_device_or_address = 0x6,
  no_such_device = 0x13,
  no_such_file_or_directory = 0x2,
  no_such_process = 0x3,
  not_a_directory = 0x14,
  not_a_socket = 0x80,
  not_a_stream = 0x7D,
  not_connected = 0x7E,
  not_enough_memory = 0xC,
  not_supported = 0x81,
  operation_canceled = 0x69,
  operation_in_progress = 0x70,
  operation_not_permitted = 0x1,
  operation_not_supported = 0x82,
  operation_would_block = 0x8C,
  owner_dead = 0x85,
  permission_denied = 0xD,
  protocol_error = 0x86,
  protocol_not_supported = 0x87,
  read_only_file_system = 0x1E,
  resource_deadlock_would_occur = 0x24,
  resource_unavailable_try_again = 0xB,
  result_out_of_range = 0x22,
  state_not_recoverable = 0x7F,
  stream_timeout = 0x89,
  text_file_busy = 0x8B,
  timed_out = 0x8A,
  too_many_files_open_in_system = 0x17,
  too_many_files_open = 0x18,
  too_many_links = 0x1F,
  too_many_synbolic_link_levels = 0x72,
  value_too_large = 0x84,
  wrong_protocol_type = 0x88,
};

/* 947 */
enum $C7A66656BD20095141AF9DA597C58E36
{
  ok = 0x0,
  partial = 0x1,
  error = 0x2,
  noconv = 0x3,
};

/* 948 */
enum std::_Iosb<int>::_Dummy_enum
{
  _Dummy_enum_val = 0x1,
};

/* 949 */
enum std::_Iosb<int>::_Fmtflags
{
  _Fmtmask = 0xFFFF,
  _Fmtzero = 0x0,
};

/* 950 */
enum std::_Iosb<int>::_Iostate
{
  _Statmask = 0x17,
};

/* 951 */
enum std::_Iosb<int>::_Openmode
{
  _Openmask = 0xFF,
};

/* 952 */
enum std::_Iosb<int>::_Seekdir
{
  _Seekmask = 0x3,
};

/* 953 */
enum $0AE1ED1D395576D0F5C137E464D7BFE0
{
  _Openprot = 0x40,
};

/* 954 */
enum $3065823E5191D2C998FA93C46B23A3F9
{
  alnum = 0x107,
  alpha = 0x103,
  cntrl = 0x20,
  digit = 0x4,
  graph = 0x117,
  lower = 0x2,
  print = 0x1D7,
  punct = 0x10,
  space = 0x48,
  upper = 0x1,
  xdigit = 0x80,
};

/* 955 */
enum std::ios_base::event
{
  erase_event = 0x0,
  imbue_event = 0x1,
  copyfmt_event = 0x2,
};

/* 956 */
enum $9ADEBD8A921918A39AFE0B81FE4AC4B2
{
  _Multi = 0x0,
};

/* 957 */
enum std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Redbl
{
  _Red = 0x0,
  _Black = 0x1,
};

/* 958 */
enum EXT_INSERTTYPE
{
  EXT_INSERTTYPE_BEFORE = 0x0,
  EXT_INSERTTYPE_AFTER = 0x1,
};

/* 959 */
enum FLAC__StreamDecoderState
{
  FLAC__STREAM_DECODER_SEARCH_FOR_METADATA = 0x0,
  FLAC__STREAM_DECODER_READ_METADATA = 0x1,
  FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC = 0x2,
  FLAC__STREAM_DECODER_READ_FRAME = 0x3,
  FLAC__STREAM_DECODER_END_OF_STREAM = 0x4,
  FLAC__STREAM_DECODER_OGG_ERROR = 0x5,
  FLAC__STREAM_DECODER_SEEK_ERROR = 0x6,
  FLAC__STREAM_DECODER_ABORTED = 0x7,
  FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR = 0x8,
  FLAC__STREAM_DECODER_UNINITIALIZED = 0x9,
};

/* 960 */
enum FLAC__StreamDecoderReadStatus
{
  FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0x0,
  FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 0x1,
  FLAC__STREAM_DECODER_READ_STATUS_ABORT = 0x2,
};

/* 961 */
enum FLAC__StreamDecoderWriteStatus
{
  FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0x0,
  FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 0x1,
};

/* 962 */
enum FLAC__StreamMetadata_Picture_Type
{
  FLAC__STREAM_METADATA_PICTURE_TYPE_OTHER = 0x0,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON_STANDARD = 0x1,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON = 0x2,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FRONT_COVER = 0x3,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BACK_COVER = 0x4,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LEAFLET_PAGE = 0x5,
  FLAC__STREAM_METADATA_PICTURE_TYPE_MEDIA = 0x6,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LEAD_ARTIST = 0x7,
  FLAC__STREAM_METADATA_PICTURE_TYPE_ARTIST = 0x8,
  FLAC__STREAM_METADATA_PICTURE_TYPE_CONDUCTOR = 0x9,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BAND = 0xA,
  FLAC__STREAM_METADATA_PICTURE_TYPE_COMPOSER = 0xB,
  FLAC__STREAM_METADATA_PICTURE_TYPE_LYRICIST = 0xC,
  FLAC__STREAM_METADATA_PICTURE_TYPE_RECORDING_LOCATION = 0xD,
  FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_RECORDING = 0xE,
  FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_PERFORMANCE = 0xF,
  FLAC__STREAM_METADATA_PICTURE_TYPE_VIDEO_SCREEN_CAPTURE = 0x10,
  FLAC__STREAM_METADATA_PICTURE_TYPE_FISH = 0x11,
  FLAC__STREAM_METADATA_PICTURE_TYPE_ILLUSTRATION = 0x12,
  FLAC__STREAM_METADATA_PICTURE_TYPE_BAND_LOGOTYPE = 0x13,
  FLAC__STREAM_METADATA_PICTURE_TYPE_PUBLISHER_LOGOTYPE = 0x14,
  FLAC__STREAM_METADATA_PICTURE_TYPE_UNDEFINED = 0x15,
};

/* 963 */
enum FLAC__ChannelAssignment
{
  FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT = 0x0,
  FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE = 0x1,
  FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE = 0x2,
  FLAC__CHANNEL_ASSIGNMENT_MID_SIDE = 0x3,
};

/* 964 */
enum FLAC__FrameNumberType
{
  FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER = 0x0,
  FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER = 0x1,
};

/* 965 */
enum FLAC__StreamDecoderLengthStatus
{
  FLAC__STREAM_DECODER_LENGTH_STATUS_OK = 0x0,
  FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR = 0x1,
  FLAC__STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED = 0x2,
};

/* 966 */
enum FLAC__EntropyCodingMethodType
{
  FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE = 0x0,
  FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2 = 0x1,
};

/* 967 */
enum FLAC__StreamDecoderTellStatus
{
  FLAC__STREAM_DECODER_TELL_STATUS_OK = 0x0,
  FLAC__STREAM_DECODER_TELL_STATUS_ERROR = 0x1,
  FLAC__STREAM_DECODER_TELL_STATUS_UNSUPPORTED = 0x2,
};

/* 968 */
enum FLAC__SubframeType
{
  FLAC__SUBFRAME_TYPE_CONSTANT = 0x0,
  FLAC__SUBFRAME_TYPE_VERBATIM = 0x1,
  FLAC__SUBFRAME_TYPE_FIXED = 0x2,
  FLAC__SUBFRAME_TYPE_LPC = 0x3,
};

/* 969 */
enum FLAC__MetadataType
{
  FLAC__METADATA_TYPE_STREAMINFO = 0x0,
  FLAC__METADATA_TYPE_PADDING = 0x1,
  FLAC__METADATA_TYPE_APPLICATION = 0x2,
  FLAC__METADATA_TYPE_SEEKTABLE = 0x3,
  FLAC__METADATA_TYPE_VORBIS_COMMENT = 0x4,
  FLAC__METADATA_TYPE_CUESHEET = 0x5,
  FLAC__METADATA_TYPE_PICTURE = 0x6,
  FLAC__METADATA_TYPE_UNDEFINED = 0x7,
};

/* 970 */
enum FLAC__StreamDecoderInitStatus
{
  FLAC__STREAM_DECODER_INIT_STATUS_OK = 0x0,
  FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 0x1,
  FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS = 0x2,
  FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 0x3,
  FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 0x4,
  FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 0x5,
};

/* 971 */
enum FLAC__StreamDecoderErrorStatus
{
  FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC = 0x0,
  FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER = 0x1,
  FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH = 0x2,
  FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM = 0x3,
};

/* 972 */
enum FLAC__StreamDecoderSeekStatus
{
  FLAC__STREAM_DECODER_SEEK_STATUS_OK = 0x0,
  FLAC__STREAM_DECODER_SEEK_STATUS_ERROR = 0x1,
  FLAC__STREAM_DECODER_SEEK_STATUS_UNSUPPORTED = 0x2,
};

/* 973 */
enum serverAction_t
{
  ACTION_NOTHING = 0x0,
  ACTION_RECORDEVENT = 0x1,
  ACTION_KICK = 0x2,
  ACTION_KICKANDRECORDEVENT = 0x3,
};

/* 974 */
enum svscmd_type
{
  SV_CMD_CAN_IGNORE = 0x0,
  SV_CMD_RELIABLE = 0x1,
};

/* 975 */
enum ePreviousFrame
{
  PREVIOUS_FRAME_DELTA = 0x0,
  PREVIOUS_FRAME_CLIENT_NOT_ACTIVE = 0x1,
  PREVIOUS_FRAME_NO_DELTA_MESSAGE = 0x2,
  PREVIOUS_FRAME_OUT_OF_DATE_PACKET = 0x3,
  PREVIOUS_FRAME_OUT_OF_ENTITIES = 0x4,
};

/* 976 */
enum MigrationState
{
  MSTATE_INACTIVE = 0x0,
  MSTATE_STARTING = 0x1,
  MSTATE_HEADER = 0x2,
  MSTATE_SENDING = 0x3,
  MSTATE_FINALIZING = 0x4,
};

/* 977 */
enum MigrationClientState
{
  CSTATE_INACTIVE = 0x0,
  CSTATE_WAITFORRATING = 0x1,
  CSTATE_MIGRATING = 0x2,
};

/* 978 */
enum SaveType
{
  SAVE_TYPE_INTERNAL = 0x0,
  SAVE_TYPE_AUTOSAVE = 0x1,
  SAVE_TYPE_CONSOLE = 0x2,
};

/* 979 */
enum SaveHandleType
{
  SAVE_MIGRATION_HANDLE = 0x0,
};

/* 980 */
enum $769F68704DB21C8E65964BB87DD7C7E3
{
  QUERY_INFO_SYN = 0x0,
  QUERY_STATUS_SYN = 0x1,
  QUERY_SCORE_SYN = 0x2,
  QUERY_PING_SYN = 0x3,
  QUERY_PERF_SYN = 0x4,
  QUERY_CLIENTUIDS_SYN = 0x5,
  MAX_QUERY_CMDS = 0x6,
  QUERY_INFO_ACK = 0x64,
  QUERY_STATUS_ACK = 0x65,
  QUERY_SCORE_ACK = 0x66,
  QUERY_PING_ACK = 0x67,
  QUERY_PERF_ACK = 0x68,
  QUERY_CLIENTUIDS_ACK = 0x69,
  MAX_QUERY_ACKS = 0x6A,
};

/* 981 */
enum server_hardware_types
{
  SERVERHARDWARE_UNKNOWN = 0x0,
  SERVERHARDWARE_LINUXDEDICATED = 0x1,
  SERVERHARDWARE_WINDEDICATED = 0x2,
  SERVERHARDWARE_MACDEDICATED = 0x3,
  SERVERHARDWARE_XENONDEDICATED = 0x4,
  SERVERHARDWARE_PS3DEDICATED = 0x5,
  SERVERHARDWARE_WIIUDEDICATED = 0x6,
  SERVERHARDWARE_WINLISTEN = 0x7,
  SERVERHARDWARE_MACLISTEN = 0x8,
  SERVERHARDWARE_XENONLISTEN = 0x9,
  SERVERHARDWARE_PS3LISTEN = 0xA,
  SERVERHARDWARE_WIIULISTEN = 0xB,
  MAX_SERVERHARDWARE = 0xC,
};

/* 982 */
enum ComSaveLumpBehavior
{
  COM_SAVE_LUMP_AND_CLOSE = 0x0,
  COM_SAVE_LUMP_AND_REOPEN = 0x1,
};

/* 983 */
enum $F1EC995512C3A3AC740705E060E5B3C5
{
  PA_UNVALIDATED = 0x0,
  PA_VALID = 0x1,
  PA_INVALID = 0x2,
};

/* 984 */
enum FF_DIR
{
  FFD_DEFAULT = 0x0,
};

/* 985 */
enum eExtraCamResolution
{
  EXTRACAM_RES_OFF = 0x0,
  EXTRACAM_RES_NORMAL = 0x1,
  EXTRACAM_RES_HIGH = 0x2,
  EXTRACAM_RES_DEFAULT = 0x1,
};

/* 986 */
enum $B2778AB4851445F9DD200ECE4C4FB15A
{
  BACKEND_EVENT_WORKER_CMD = 0x0,
  BACKEND_EVENT_GENERIC = 0x1,
  BACKEND_EVENT_COUNT = 0x2,
};

/* 987 */
enum EntityFieldInfoFlags
{
  ENTITY_FIELD_INFO_NONE = 0x0,
  ENTITY_FIELD_INFO_IS_LINKED = 0x1,
  ENTITY_FIELD_INFO_POS_USES_TR_DELTA = 0x2,
  ENTITY_FIELD_INFO_POS_USES_TR_DURATION = 0x4,
  ENTITY_FIELD_INFO_APOS_USES_TR_DELTA = 0x8,
  ENTITY_FIELD_INFO_APOS_USES_TR_DURATION = 0x10,
};

/* 988 */
enum $A5A77F3E5CF275E0BD37DBE9372920D9
{
  MAX_FILE_IDS = 0x40,
};

/* 989 */
enum CommandProcessorType
{
  COMMAND_SERVER = 0x0,
  COMMAND_CLIENT = 0x1,
  COMMAND_BOTH = 0x2,
};

/* 990 */
enum $00A2C21AF09500D0E9DAB8922D559766
{
  COMPRESS_NONE = 0x0,
  COMPRESS_HUFFMAN = 0x1,
  COMPRESS_ZLIB = 0x2,
};

/* 991 */
enum $ED888797827304BBF4B6EC6AD42D1C37
{
  UT_STATIC = 0x0,
  UT_VSTATIC = 0x1,
  UT_MALLOC = 0x2,
  UT_HUNK = 0x3,
  UT_VOID = 0x4,
  UT_IMAGE = 0x5,
  UT_TEMP = 0x6,
  UT_PHYSICAL = 0x7,
  UT_USERHUNK = 0x8,
  UT_COUNT = 0x9,
};

/* 992 */
enum FS_SERVER_COMPARE_RESULT
{
  FILES_MATCH = 0x0,
  NEED_DOWNLOAD = 0x1,
  NOT_DOWNLOADABLE = 0x2,
};

/* 993 */
enum mtxItemsCategory_e
{
  MTX_CATEGORY_STORAGEPACK = 0x0,
  MTX_CATEGORY_WEAPONPACK = 0x1,
  MTX_CATEGORY_CALLINGCARDPACK = 0x2,
  MTX_CATEGORY_INVALID = 0x3,
};

/* 994 */
enum $224C1461075E8477628294F3A758A27E
{
  MTX_DISABLED = 0x0,
  MTX_USEABLE = 0x1,
  MTX_ENABLED = 0x2,
};

/* 995 */
enum $C07EEE809FFCDB7E7C597A236C56EEB4
{
  TDEFL_MAX_SUPPORTED_HUFF_CODESIZE = 0x20,
};

/* 996 */
enum war_flag_t
{
  WAR_FLAG_A = 0x0,
  WAR_FLAG_B = 0x1,
  WAR_FLAG_C = 0x2,
  WAR_FLAG_D = 0x3,
  WAR_FLAG_E = 0x4,
  WAR_FLAG_COUNT = 0x5,
};

/* 997 */
enum $A6CC998355679A6FC49B3C4833866C68
{
  MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG = 0x6054B50,
  MZ_ZIP_CENTRAL_DIR_HEADER_SIG = 0x2014B50,
  MZ_ZIP_LOCAL_DIR_HEADER_SIG = 0x4034B50,
  MZ_ZIP_LOCAL_DIR_HEADER_SIZE = 0x1E,
  MZ_ZIP_CENTRAL_DIR_HEADER_SIZE = 0x2E,
  MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE = 0x16,
  MZ_ZIP_CDH_SIG_OFS = 0x0,
  MZ_ZIP_CDH_VERSION_MADE_BY_OFS = 0x4,
  MZ_ZIP_CDH_VERSION_NEEDED_OFS = 0x6,
  MZ_ZIP_CDH_BIT_FLAG_OFS = 0x8,
  MZ_ZIP_CDH_METHOD_OFS = 0xA,
  MZ_ZIP_CDH_FILE_TIME_OFS = 0xC,
  MZ_ZIP_CDH_FILE_DATE_OFS = 0xE,
  MZ_ZIP_CDH_CRC32_OFS = 0x10,
  MZ_ZIP_CDH_COMPRESSED_SIZE_OFS = 0x14,
  MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS = 0x18,
  MZ_ZIP_CDH_FILENAME_LEN_OFS = 0x1C,
  MZ_ZIP_CDH_EXTRA_LEN_OFS = 0x1E,
  MZ_ZIP_CDH_COMMENT_LEN_OFS = 0x20,
  MZ_ZIP_CDH_DISK_START_OFS = 0x22,
  MZ_ZIP_CDH_INTERNAL_ATTR_OFS = 0x24,
  MZ_ZIP_CDH_EXTERNAL_ATTR_OFS = 0x26,
  MZ_ZIP_CDH_LOCAL_HEADER_OFS = 0x2A,
  MZ_ZIP_LDH_SIG_OFS = 0x0,
  MZ_ZIP_LDH_VERSION_NEEDED_OFS = 0x4,
  MZ_ZIP_LDH_BIT_FLAG_OFS = 0x6,
  MZ_ZIP_LDH_METHOD_OFS = 0x8,
  MZ_ZIP_LDH_FILE_TIME_OFS = 0xA,
  MZ_ZIP_LDH_FILE_DATE_OFS = 0xC,
  MZ_ZIP_LDH_CRC32_OFS = 0xE,
  MZ_ZIP_LDH_COMPRESSED_SIZE_OFS = 0x12,
  MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS = 0x16,
  MZ_ZIP_LDH_FILENAME_LEN_OFS = 0x1A,
  MZ_ZIP_LDH_EXTRA_LEN_OFS = 0x1C,
  MZ_ZIP_ECDH_SIG_OFS = 0x0,
  MZ_ZIP_ECDH_NUM_THIS_DISK_OFS = 0x4,
  MZ_ZIP_ECDH_NUM_DISK_CDIR_OFS = 0x6,
  MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS = 0x8,
  MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS = 0xA,
  MZ_ZIP_ECDH_CDIR_SIZE_OFS = 0xC,
  MZ_ZIP_ECDH_CDIR_OFS_OFS = 0x10,
  MZ_ZIP_ECDH_COMMENT_SIZE_OFS = 0x14,
};

/* 998 */
enum $DE765A26A33DDA56D827A59D1FDE0C6B
{
  MZ_DEFAULT_STRATEGY = 0x0,
  MZ_FILTERED = 0x1,
  MZ_HUFFMAN_ONLY = 0x2,
  MZ_RLE = 0x3,
  MZ_FIXED = 0x4,
};

/* 999 */
enum $9A5BDD0C2B57E1A81A93CBEA44FE3EAD
{
  MZ_NO_FLUSH = 0x0,
  MZ_PARTIAL_FLUSH = 0x1,
  MZ_SYNC_FLUSH = 0x2,
  MZ_FULL_FLUSH = 0x3,
  MZ_FINISH = 0x4,
  MZ_BLOCK = 0x5,
};

/* 1000 */
enum $DC04FA4AA81230D63B5DA9DCC51E4870
{
  MZ_OK = 0x0,
  MZ_STREAM_END = 0x1,
  MZ_NEED_DICT = 0x2,
  MZ_ERRNO = 0xFFFFFFFF,
  MZ_STREAM_ERROR = 0xFFFFFFFE,
  MZ_DATA_ERROR = 0xFFFFFFFD,
  MZ_MEM_ERROR = 0xFFFFFFFC,
  MZ_BUF_ERROR = 0xFFFFFFFB,
  MZ_VERSION_ERROR = 0xFFFFFFFA,
  MZ_PARAM_ERROR = 0xFFFFD8F0,
};

/* 1001 */
enum $124B00A3267580F54FB8883626F03ECB
{
  MZ_NO_COMPRESSION = 0x0,
  MZ_BEST_SPEED = 0x1,
  MZ_BEST_COMPRESSION = 0x9,
  MZ_UBER_COMPRESSION = 0xA,
  MZ_DEFAULT_LEVEL = 0x6,
  MZ_DEFAULT_COMPRESSION = 0xFFFFFFFF,
};

/* 1002 */
enum mz_zip_mode
{
  MZ_ZIP_MODE_INVALID = 0x0,
  MZ_ZIP_MODE_READING = 0x1,
  MZ_ZIP_MODE_WRITING = 0x2,
  MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED = 0x3,
};

/* 1003 */
enum mz_zip_flags
{
  MZ_ZIP_FLAG_CASE_SENSITIVE = 0x100,
  MZ_ZIP_FLAG_IGNORE_PATH = 0x200,
  MZ_ZIP_FLAG_COMPRESSED_DATA = 0x400,
  MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY = 0x800,
};

/* 1004 */
enum $08CDCBEF93D76ABC2971F255E051D0EA
{
  SLOW_MOTION_LINEAR = 0x0,
};

/* 1005 */
enum $BF90F758338921BFD252DA549F2DFB5C
{
  TINFL_FLAG_PARSE_ZLIB_HEADER = 0x1,
  TINFL_FLAG_HAS_MORE_INPUT = 0x2,
  TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF = 0x4,
  TINFL_FLAG_COMPUTE_ADLER32 = 0x8,
};

/* 1006 */
enum tinfl_status
{
  TINFL_STATUS_BAD_PARAM = 0xFFFFFFFD,
  TINFL_STATUS_ADLER32_MISMATCH = 0xFFFFFFFE,
  TINFL_STATUS_FAILED = 0xFFFFFFFF,
  TINFL_STATUS_DONE = 0x0,
  TINFL_STATUS_NEEDS_MORE_INPUT = 0x1,
  TINFL_STATUS_HAS_MORE_OUTPUT = 0x2,
};

/* 1007 */
enum $83CF57ADFA7FA2EBE5AC915EC6FB0513
{
  TDEFL_HUFFMAN_ONLY = 0x0,
  TDEFL_DEFAULT_MAX_PROBES = 0x80,
  TDEFL_MAX_PROBES_MASK = 0xFFF,
};

/* 1008 */
enum $EE6EEAFAC057EC2BE5E8A8BFD1AA27E3
{
  TDEFL_WRITE_ZLIB_HEADER = 0x1000,
  TDEFL_COMPUTE_ADLER32 = 0x2000,
  TDEFL_GREEDY_PARSING_FLAG = 0x4000,
  TDEFL_NONDETERMINISTIC_PARSING_FLAG = 0x8000,
  TDEFL_RLE_MATCHES = 0x10000,
  TDEFL_FILTER_MATCHES = 0x20000,
  TDEFL_FORCE_ALL_STATIC_BLOCKS = 0x40000,
  TDEFL_FORCE_ALL_RAW_BLOCKS = 0x80000,
};

/* 1009 */
enum tdefl_status
{
  TDEFL_STATUS_BAD_PARAM = 0xFFFFFFFE,
  TDEFL_STATUS_PUT_BUF_FAILED = 0xFFFFFFFF,
  TDEFL_STATUS_OKAY = 0x0,
  TDEFL_STATUS_DONE = 0x1,
};

/* 1010 */
enum tdefl_flush
{
  TDEFL_NO_FLUSH = 0x0,
  TDEFL_SYNC_FLUSH = 0x2,
  TDEFL_FULL_FLUSH = 0x3,
  TDEFL_FINISH = 0x4,
};

/* 1011 */
enum CIN_CALLBACK_TYPE
{
  CINEMATIC_CALLBACK_INVALID = 0x0,
  CINEMATIC_CALLBACK_CSCR = 0x1,
  CINEMATIC_CALLBACK_IMMEDIATE = 0x2,
  CINEMATIC_CALLBACK_TYPE_COUNT = 0x3,
};

/* 1012 */
enum MapProfileTrackedValue
{
  MAP_PROFILE_FILE_OPEN = 0x0,
  MAP_PROFILE_FILE_SEEK = 0x1,
  MAP_PROFILE_FILE_READ = 0x2,
  MAP_PROFILE_VALUE_MAX = 0x3,
};

/* 1013 */
enum SphereEdgeTraceResult
{
  SPHERE_HITS_EDGE = 0x0,
  SPHERE_MISSES_EDGE = 0x1,
  SPHERE_MAY_HIT_V0 = 0x2,
  SPHERE_MAY_HIT_V1 = 0x3,
};

/* 1014 */
enum youtubeStatus_e
{
  YT_ACCOUNT_NOT_CHECKED = 0x0,
  YT_ACCOUNT_CHECKING = 0x1,
  YT_ACCOUNT_CHECKED = 0x2,
  YT_ACCOUNT_GETTING_TOKEN = 0x3,
  YT_ACCOUNT_TOKEN_RECEIVED = 0x4,
  YT_WAITING_FOR_AUTH = 0x5,
  YT_ACCOUNT_NOT_READY = 0x6,
  YT_ACCOUNT_READY = 0x7,
  YT_ACCOUNT_AUTH_COOLOFF = 0x8,
};

/* 1015 */
enum dwVoteCategory_e
{
  DW_VOTE_CATEGORY_INVALID = 0xFFFFFFFF,
  DW_VOTE_CATEGORY_FILM = 0x0,
  DW_VOTE_CATEGORY_CLIP = 0x1,
  DW_VOTE_CATEGORY_SCREENSHOT = 0x2,
  DW_VOTE_CATEGORY_CUSTOM_GAME = 0x3,
  DW_VOTE_CATEGORY_VIDEO = 0x4,
  DW_VOTE_CATEGORY_EMBLEM = 0x5,
  DW_VOTE_NUM_CATEGORIES = 0x6,
};

/* 1016 */
enum dwVote_e
{
  DW_VOTE_INVALID = 0xFFFFFFFF,
  DW_VOTE_DISLIKE = 0x0,
  DW_VOTE_LIKE = 0xA,
};

/* 1017 */
enum twitchStatus_e
{
  TWITCH_ACCOUNT_NOT_CHECKED = 0x0,
  TWITCH_ACCOUNT_CHECKING = 0x1,
  TWITCH_ACCOUNT_CHECKED = 0x2,
  TWITCH_ACCOUNT_GETTING_INFO = 0x3,
  TWITCH_ACCOUNT_INFO_RECEIVED = 0x4,
  TWITCH_ACCOUNT_NOT_READY = 0x5,
  TWITCH_ACCOUNT_READY = 0x6,
};

/* 1018 */
enum streamBuffErr_e
{
  LIVE_STREAMBUFF_EOF = 0xFFFFFFFF,
  LIVE_STREAMBUFF_FATAL = 0xFFFFFFFE,
  LIVE_STREAMBUFF_OVERFLOW = 0xFFFFFFFD,
  LIVE_STREAMBUFF_NO_DATA = 0xFFFFFFFC,
};

/* 1019 */
enum hostDelegationState_t
{
  HOST_NOT_DELEGATED = 0x0,
  HOST_DELEGATING = 0x1,
  HOST_DELEGATED = 0x2,
  CLIENT_DELEGATE_INACTIVE = 0x3,
  CLIENT_CREATING_SESSION = 0x4,
  CLIENT_ACTIVE_DELEGATE = 0x5,
  CLIENT_ABORT = 0x6,
  HOST_DELEGATE_NUM_STATES = 0x7,
};

/* 1020 */
enum $3447E938CF5B824A277FEEA74A2A9E26
{
  DELEGATE_CREATE_SESSION = 0x0,
  DELEGATE_NUM_MSG_TYPES = 0x1,
};

/* 1021 */
enum LeagueOutcome
{
  LEAGUE_OUTCOME_BASE = 0x0,
  LEAGUE_OUTCOME_WINNER = 0x1,
  LEAGUE_OUTCOME_LOSER = 0x2,
  LEAGUE_OUTCOME_PRE_LOSER = 0x3,
  LEAGUE_OUTCOME_RESET = 0x4,
  LEAGUE_OUTCOME_DRAW = 0x5,
};

/* 1022 */
enum StatsState
{
  STATS_STATE_ERROR = 0x0,
  STATS_STATE_READY_TO_FETCH = 0x1,
  STATS_STATE_FETCHING_SUBDIVISION = 0x2,
  STATS_STATE_FETCHED_SUBDIVISION = 0x3,
  STATS_STATE_FETCHING_STATS = 0x4,
  STATS_STATE_FETCHED = 0x5,
  STATS_STATE_HAVE_OUTCOMES = 0x6,
  STATS_STATE_DIRTY = 0x7,
  STATS_STATE_DIRTY_UPLOADING_STATS = 0x8,
  STATS_STATE_DIRTY_NEED_SUBDIVISION = 0x9,
  STATS_STATE_DIRTY_REFETCHING_SUBDIVISION = 0xA,
  NUM_STATS_STATES = 0xB,
};

/* 1023 */
enum NameChangeType
{
  NAMECHANGE_SOLO_AUTO = 0x0,
  NAMECHANGE_TEAM_PARTY = 0x1,
  NAMECHANGE_TEAM_UI = 0x2,
};

/* 1024 */
enum bdLeague::bdWriteType
{
  LEAGUE_STAT_WRITE_REPLACE = 0x0,
  LEAGUE_STAT_WRITE_ADD = 0x1,
};

/* 1025 */
enum bdLeague::bdOrderType
{
  LEAGUE_ORDER_BY_TEAM_ID = 0x0,
  LEAGUE_ORDER_BY_RECENT_ACTIVITY = 0x1,
};

/* 1026 */
enum LbFilter
{
  LB_FILTER_NONE = 0x0,
  LB_FILTER_FRIENDS = 0x1,
  LB_FILTER_LOBBY_MEMBERS = 0x2,
  LB_FILTER_ELITE = 0x3,
  LB_FILTER_COUNT = 0x4,
};

/* 1027 */
enum $17C0A0F4E2344B6CC9E8B9657C3A4790
{
  REQUEST_MULTI_LB_READ_COMBAT_RECORD_DATA = 0x1,
  REQUEST_MULTI_LB_READ_MINI_LBS = 0x2,
};

/* 1028 */
enum typeEnumLB
{
  LB_SERVER = 0x0,
  LB_OWNERSHIP_PLAYED = 0x1,
  LB_OWNERSHIP_OWNED = 0x2,
  LB_OWNERSHIP_DENIED = 0x3,
};

/* 1029 */
enum doubleXPColumns_t
{
  GROUPSTABLE_INDEX = 0x0,
  GROUPSTABLE_NAME = 0x1,
  GROUPSTABLE_STATPATH = 0x2,
  GROUPSTABLE_KEYARCHIVE = 0x3,
  GROUPSTABLE_CONTENTMASK = 0x4,
  GROUPSTABLE_COUNT = 0x5,
};

/* 1030 */
enum matchmakingHopperState_t
{
  HOPPER_PARKED = 0x0,
  HOPPER_UNPARKED = 0x1,
  HOPPER_NUM_STATES = 0x2,
};

/* 1031 */
enum dediConnectionState_e
{
  DEDI_STATUS_ERROR = 0x0,
  DEDI_STATUS_NOT_CONNECTED = 0x1,
  DEDI_STATUS_AUTHORIZING = 0x2,
  DEDI_STATUS_CONNECTING = 0x3,
  DEDI_STATUS_CONNECTED = 0x4,
  DEDI_STATUS_IN_BACKOFF = 0x5,
};

/* 1032 */
enum $F00FCF266BA5749504F109B433F3D026
{
  PLAY_MODE_FAST = 0x0,
  PLAY_MODE_SLOW = 0x1,
  PLAY_MODE_NORMAL = 0x2,
};

/* 1033 */
enum bandwidth_enum
{
  BANDWIDTH_NARROW = 0x0,
  BANDWIDTH_WIDE = 0x1,
  BANDWIDTH_ULTRAWIDE = 0x2,
  NUM_BANDWIDTH_MODES = 0x3,
};

/* 1034 */
enum $E7B1D95E0381D419A2E31D1BE14AA034
{
  ACTIVE_STATE_INACTIVE = 0x0,
  ACTIVE_STATE_ACTIVE = 0x1,
  ACTIVE_STATE_WANTS_TURRET_DISMOUNT = 0x2,
};

/* 1035 */
enum $1DAE1ED24CAF628074D9AF9D10A521A1
{
  TURRET_REQUIRES_AI = 0x1,
  TURRET_AUTO = 0x2,
  TURRET_FIRING = 0x4,
  TURRET_HAS_MISS_TARGET = 0x8,
  TURRET_TAKEN_PAIN = 0x10,
  TURRET_ERROR_INITED = 0x20,
  TURRET_HAS_TARGET = 0x40,
  TURRET_BAD_TARGET = 0x80,
  TURRET_FIRST_PITCH_CAP = 0x100,
  TURRET_PITCH_CAP = 0x200,
  TURRET_PITCH_MIN = 0x400,
  TURRET_INIT_VIEW = 0x800,
  TURRET_USABLE = 0x1000,
  TURRET_IGNOREGOAL = 0x2000,
  TURRET_FIRING_DISABLED = 0x4000,
  TURRET_HAS_TARGET_ORIGIN = 0x8000,
  TURRET_HAS_TARGET_OFFSET = 0x10000,
  TURRET_TARGET_SENTIENT = 0x20000,
  TURRET_TARGET_KILLSTREAK = 0x40000,
  TURRET_SCANNING = 0x80000,
  TURRET_SCANNING_TOGGLE = 0x100000,
  TURRET_OFFLINE = 0x200000,
  TURRET_TARGET_SENTRY = 0x400000,
};

/* 1036 */
enum $D5085E6FA63A0C46359E0DBF9B5045DD
{
  TARGETFLAG_ATTACKPROFILETOP = 0x1,
  TARGETFLAG_JAVELINONLY = 0x2,
  TARGETFLAG_TURRETS_NO_AQUIRE = 0x4,
};

/* 1037 */
enum $4CDBAAD297881F0EBB353DE16C0E42A4
{
  TS_IDLE = 0x0,
  TS_FIRING_HEAD = 0x1,
  TS_FIRING_FEET = 0x2,
};

/* 1038 */
enum profileLocation_e
{
  PROFILE_LOCATION_INVALID = 0xFFFFFFFF,
  PROFILE_LOCATION_COMMON = 0x0,
  PROFILE_LOCATION_EXE = 0x1,
  PROFILE_LOCATION_COUNT = 0x2,
};

/* 1039 */
enum shoutcaster_showperks
{
  SHOUTCASTER_SHOW_PERKS_OFF = 0x0,
  SHOUTCASTER_SHOW_PERKS_ON = 0x1,
  SHOUTCASTER_SHOW_PERKS_ALWAYS = 0x2,
  SHOUTCASTER_SHOW_PERKS_COUNT = 0x3,
};

/* 1040 */
enum start_game
{
  START_GAME_CAMPAIGN = 0x0,
  START_GAME_MULTIPLAYER = 0x1,
  START_GAME_ZOMBIES = 0x2,
  START_GAME_TYPE_COUNT = 0x3,
};

/* 1041 */
enum audio_preset
{
  AUDIO_PRESET_TREYARCH_MIX = 0x0,
  AUDIO_PRESET_BASS_BOOST = 0x1,
  AUDIO_PRESET_HIGH_BOOST = 0x2,
  AUDIO_PRESET_SUPERCRUNCH = 0x3,
  AUDIO_PRESET_HEADPHONES = 0x4,
  AUDIO_PRESET_COUNT = 0x5,
};

/* 1042 */
enum speaker_setup
{
  SPEAKER_SETUP_STEREO = 0x0,
  SPEAKER_SETUP_5_1 = 0x1,
  SPEAKER_SETUP_7_1 = 0x2,
  SPEAKER_SETUP_COUNT = 0x3,
};

/* 1043 */
enum DAMAGE_FLAGS
{
  DAMAGE_NOFLAG = 0x0,
  DAMAGE_RADIUS = 0x1,
  DAMAGE_ARMOR_PIERCING = 0x2,
  DAMAGE_NO_KNOCKBACK = 0x4,
  DAMAGE_PENETRATION = 0x8,
  DAMAGE_DESTRUCTIBLE_ENTITY = 0x10,
  DAMAGE_SHIELD_EXPLOSIVE_IMPACT = 0x20,
  DAMAGE_SHIELD_EXPLOSIVE_IMPACT_HUGE = 0x40,
  DAMAGE_SHIELD_EXPLOSIVE_SPLASH = 0x80,
};

/* 1044 */
enum VehicleManualMode
{
  VEH_MANUAL_OFF = 0x0,
  VEH_MANUAL_ON = 0x1,
  VEH_MANUAL_TRANS = 0x2,
};

/* 1045 */
enum VP_FindCustomPath::__l4::pathNodeTransientFlags
{
  FLAG_OPEN = 0x1,
  FLAG_CLOSED = 0x2,
};

/* 1046 */
enum eInfluencerType
{
  INFLUENCER_TYPE_NORMAL = 0x0,
  INFLUENCER_TYPE_PLAYER = 0x1,
  INFLUENCER_TYPE_WEAPON = 0x2,
  INFLUENCER_TYPE_DOG = 0x3,
  INFLUENCER_TYPE_VEHICLE = 0x4,
  INFLUENCER_TYPE_SQUAD = 0x5,
  INFLUENCER_TYPE_GAME_MODE = 0x6,
  INFLUENCER_TYPE_ENEMY_SPAWNED = 0x7,
  INFLUENCER_TYPE_UNUSED = 0x8,
  MAX_INFLUENCER_TYPE = 0x9,
};

/* 1047 */
enum eInfluencerShape
{
  INFLUENCER_SHAPE_SPHERE = 0x0,
  INFLUENCER_SHAPE_CYLINDER = 0x1,
  INFLUENCER_SHAPE_BOX = 0x2,
  MAX_INFLUENCER_SHAPE = 0x3,
};

/* 1048 */
enum eInfluencerScoreCurve
{
  INFLUENCER_SC_CONSTANT = 0x0,
  INFLUENCER_SC_LINEAR = 0x1,
  INFLUENCER_SC_STEEP = 0x2,
  INFLUENCER_SC_INVERSE_LINEAR = 0x3,
  INFLUENCER_SC_NEGATIVE_TO_POSITIVE = 0x4,
  MAX_INFLUENCER_SCORE_CURVE = 0x5,
};

/* 1049 */
enum eSpawnSystemDebugLoadingMode
{
  SSDLM_BEGIN = 0x0,
  SSDLM_PRESETS = 0x1,
  SSDLM_INFLUENCERS = 0x2,
  SSDLM_SPAWNPOINTS = 0x3,
  SSDLM_CLIENTS = 0x4,
  SSDLM_FINALIZING = 0x5,
  SSDLM_COUNT = 0x6,
};

/* 1050 */
enum XAnimFaceEvents
{
  XANIM_FACE_CASUAL = 0x0,
  XANIM_FACE_ALERT = 0x1,
  XANIM_FACE_CQB = 0x2,
  XANIM_FACE_RUNNING = 0x3,
  XANIM_FACE_SHOOT = 0x4,
  XANIM_FACE_SHOOT_BURST = 0x5,
  XANIM_FACE_MELEE = 0x6,
  XANIM_FACE_REACT = 0x7,
  XANIM_FACE_TALK = 0x8,
  XANIM_FACE_TALK_LONG = 0x9,
  XANIM_FACE_PAIN = 0xA,
  XANIM_FACE_DEATH = 0xB,
  XANIM_FACE_NUM_EVENTS = 0xC,
};

/* 1051 */
enum $056D4A366440905B6547B35DB90BAB80
{
  LF_NONE = 0x0,
  LF_MAP_RESTART = 0x1,
  LF_MAP_CHANGE = 0x2,
  LF_EXITLEVEL = 0x3,
};

/* 1052 */
enum BloodImpactFxType
{
  BLOOD_IMPACT_NONE = 0x0,
  BLOOD_IMPACT_NORMAL = 0x1,
  BLOOD_IMPACT_HERO = 0x2,
  NUM_BLOOD_IMPACT_TYPES = 0x3,
};

/* 1053 */
enum $AB69BE09F1E432422C7ADD49660ED737
{
  MF_BOOST_ENABLED = 0x1,
  MF_DETONATION_ENABLED = 0x2,
  MF_MISSILE_BOOSTING = 0x4,
  MF_MISSLE_COASTING = 0x8,
  MF_MISSILE_SCRIPT_DETONATE = 0x10,
};

/* 1054 */
enum $DC2F25456C11ACC05FA24A09A778D5D2
{
  ZBPS_CLOSED = 0x0,
  ZBPS_OPENING = 0x1,
  ZBPS_OPEN = 0x2,
  ZBPS_CLOSING = 0x3,
  ZBPS_TARGETTED_BY_ZOMBIE = 0x4,
};

/* 1055 */
enum $3A69AAC08A6234F087FC19B9E633E12E
{
  CF_INT = 0x0,
  CF_FLOAT = 0x1,
};

/* 1056 */
enum $14A0853ED00DE3B58DBBB5F0206BFD1E
{
  TALKFLAG_EVERYONE_HEARS_EVERYONE = 0x1,
  TALKFLAG_DEAD_CHAT_WITH_DEAD = 0x2,
  TALKFLAG_DEAD_CHAT_WITH_TEAM = 0x4,
  TALKFLAG_DEAD_HEAR_TEAM_LIVING = 0x8,
  TALKFLAG_DEAD_HEAR_ALL_LIVING = 0x10,
  TALKFLAG_DEAD_HEAR_KILLER = 0x20,
  TALKFLAG_KILLERS_HEAR_VICTIM = 0x40,
};

/* 1057 */
enum animScrMode_t
{
  ASM_NORMAL = 0x0,
  ASM_DEATHPLANT = 0x1,
};

/* 1058 */
enum BlurTime
{
  BLUR_TIME_RELATIVE = 0x0,
  BLUR_TIME_ABSOLUTE = 0x1,
};

/* 1059 */
enum BlurPriority
{
  BLUR_PRIORITY_NONE = 0x0,
  BLUR_PRIORITY_SCRIPT = 0x1,
  BLUR_PRIORITY_CODE = 0x2,
};

/* 1060 */
enum PlayerLinkToType
{
  PLAYERLINKTO_NORMAL = 0x0,
  PLAYERLINKTO_DELTA = 0x1,
  PLAYERLINKTO_DELTA_WEAPONVIEWONLY = 0x2,
  PLAYERLINKTOCNT = 0x3,
};

/* 1061 */
enum ComDevhostCommandAI
{
  COM_DEVHOST_AI_TIMESTAMP = 0x0,
  COM_DEVHOST_AI_ENT_NUM = 0x1,
  COM_DEVHOST_AI_SCRIPT_KEYS = 0x2,
  COM_DEVHOST_AI_SCRIPT_DATA = 0x3,
  COM_DEVHOST_AI_INFO_REQ = 0x4,
};

/* 1062 */
enum SaveErrorType
{
  SAVE_ERROR_MISSING_DEVICE = 0x0,
  SAVE_ERROR_CORRUPT_SAVE = 0x1,
};

/* 1063 */
enum saveFieldtype_t
{
  SF_NONE = 0x0,
  SF_STRING = 0x1,
  SF_ENTITY = 0x2,
  SF_ENTHANDLE = 0x3,
  SF_CLIENT = 0x4,
  SF_ACTOR = 0x5,
  SF_SENTIENT = 0x6,
  SF_SENTIENTHANDLE = 0x7,
  SF_VEHICLE = 0x8,
  SF_TURRETINFO = 0x9,
  SF_DESTRUCTIBLE = 0xA,
  SF_THREAD = 0xB,
  SF_ANIMSCRIPT = 0xC,
  SF_PATHNODE = 0xD,
  SF_ANIMTREE = 0xE,
  SF_TYPE_TAG_INFO = 0xF,
  SF_TYPE_SCRIPTED = 0x10,
  SF_ACTOR_INFO = 0x11,
  SF_MODELUSHORT = 0x12,
  SF_MODELINT = 0x13,
  SF_SCRIPTFUNCTION = 0x14,
};

/* 1064 */
enum entinfoType_t
{
  ENTINFO_NO_INFO = 0x0,
  ENTINFO_ALL_AI_ALL_LINES_ALL_INFO = 0x1,
  ENTINFO_SELECTED_AI_ALL_LINES_ALL_INFO = 0x2,
  ENTINFO_SELECTED_AI_ALL_INFO = 0x3,
  ENTINFO_ALL_AI_ONLY_GOAL_LINE_AND_RADIUS = 0x4,
  ENTINFO_SELECTED_AI_ONLY_GOAL_LINE_AND_RADIUS = 0x5,
  ENTINFO_LEVEL_6 = 0x6,
  ENTINFO_LEVEL_7 = 0x7,
  ENTINFO_LEVEL_8 = 0x8,
  ENTINFO_COUNT = 0x9,
};

/* 1065 */
enum $B0ECFEA91672C7394B1BEDF9F602CBCF
{
  MEAT_NO_ONE_HAS = 0x0,
  MEAT_ALLIES_HAVE = 0x1,
  MEAT_AXIS_HAS = 0x2,
  MEAT_TEAM_3_HAS = 0x3,
};

/* 1066 */
enum EntInfoType
{
  ENTINFO_TYPE_ALL = 0x0,
  ENTINFO_TYPE_AI = 0x1,
  ENTINFO_TYPE_VEHICLE = 0x2,
  ENTINFO_TYPE_TRIGGER = 0x3,
  NUM_ENTINFO_TYPE = 0x4,
};

/* 1067 */
enum $88CEF5A99BEC9C82C6956DC986AE9C3B
{
  HE_FONT_DEFAULT = 0x0,
  HE_FONT_BIGFIXED = 0x1,
  HE_FONT_SMALLFIXED = 0x2,
  HE_FONT_OBJECTIVE = 0x3,
  HE_FONT_BIG = 0x4,
  HE_FONT_SMALL = 0x5,
  HE_FONT_EXTRABIG = 0x6,
  HE_FONT_EXTRASMALL = 0x7,
  HE_FONT_COUNT = 0x8,
};

/* 1068 */
enum dvar_cmd_t
{
  DVAR_CMD_AIM_LOCKON_PITCH_STRENGTH = 0x0,
  DVAR_CMD_AMMO_COUNTER_HIDE = 0x1,
  DVAR_CMD_CG_OBJECTIVE_TEXT = 0x2,
  DVAR_CMD_COMPASS = 0x3,
  DVAR_CMD_DRAW_TALK = 0x4,
  DVAR_CMD_FOV = 0x5,
  DVAR_CMD_HUD_HARDCORE = 0x6,
  DVAR_CMD_PLAYER_SPRINT_TIME = 0x7,
  DVAR_CMD_MINI_SCOREBOARD_HIDE = 0x8,
  DVAR_CMD_NUM_LIVES = 0x9,
  DVAR_CMD_PLAYER_PUSH_AMOUNT = 0xA,
  DVAR_CMD_PLAYER_STEP_ON_ACTORS = 0xB,
  DVAR_CMD_SCRIPT_MAIN_MENU = 0xC,
  DVAR_CMD_THIRD_PERSON = 0xD,
  DVAR_CMD_THIRD_PERSON_ANGLE = 0xE,
  DVAR_CMD_COUNT = 0xF,
};

/* 1069 */
enum $F9234A30D75C5DF88005E0EAB32E42E6
{
  AVOID_FLAG_STUBBORN = 0x1,
  AVOID_FLAG_DISABLED = 0x2,
};

/* 1070 */
enum FxRandKey
{
  FXRAND_VELOCITY_X = 0x0,
  FXRAND_VELOCITY_Y = 0x1,
  FXRAND_VELOCITY_Z = 0x2,
  FXRAND_ANGULAR_VELOCITY_PITCH = 0x3,
  FXRAND_ANGULAR_VELOCITY_YAW = 0x4,
  FXRAND_ANGULAR_VELOCITY_ROLL = 0x5,
  FXRAND_ORIGIN_X = 0x6,
  FXRAND_ORIGIN_Y = 0x7,
  FXRAND_ORIGIN_Z = 0x8,
  FXRAND_OFFSET_YAW = 0x9,
  FXRAND_OFFSET_HEIGHT = 0xA,
  FXRAND_OFFSET_RADIUS = 0xB,
  FXRAND_ANGLES_PITCH = 0xC,
  FXRAND_ANGLES_YAW = 0xD,
  FXRAND_ANGLES_ROLL = 0xE,
  FXRAND_GRAVITY = 0xF,
  FXRAND_REFLECTION_FACTOR = 0x10,
  FXRAND_LIFE_SPAN = 0x11,
  FXRAND_SPAWN_DELAY = 0x12,
  FXRAND_SPAWN_COUNT = 0x13,
  FXRAND_EMIT_DIST = 0x14,
  FXRAND_VISUAL = 0x15,
  FXRAND_TILE_START = 0x16,
  FXRAND_COLOR = 0x17,
  FXRAND_ROTATION = 0x18,
  FXRAND_ROTATION_DELTA = 0x19,
  FXRAND_SIZE_0 = 0x1A,
  FXRAND_SIZE_1 = 0x1B,
  FXRAND_SCALE = 0x1C,
  FXRAND_CLOUD_DENSITY = 0x1D,
  FXRAND_COUNT = 0x1E,
};

/* 1071 */
enum $25A31A9D6F667CEA3410D50C3530EE04
{
  FX_STATUS_REF_COUNT_MASK = 0x3FFF,
  FX_STATUS_IS_STALE_ATTACHED_FX = 0x4000,
  FX_STATUS_BASE_REF_REMOVED = 0x8000,
  FX_STATUS_HAS_PENDING_LOOP_ELEMS = 0x10000,
  FX_STATUS_OWNED_EFFECTS_SHIFT = 0x11,
  FX_STATUS_OWNED_EFFECTS_MASK = 0x7FE0000,
  FX_STATUS_IS_LOCKED = 0x20000000,
  FX_STATUS_IS_LOCKED_MASK = 0x60000000,
};

/* 1072 */
enum $7E23918555002659587F63136D232798
{
  FX_ELEM_CLASS_SPRITE = 0x0,
  FX_ELEM_CLASS_NONSPRITE = 0x1,
  FX_ELEM_CLASS_CLOUD = 0x2,
  FX_ELEM_CLASS_COUNT = 0x3,
};

/* 1073 */
enum $2A82A8A45F53537A34F1DDEE78935165
{
  FLAG_MARKVIEWMODEL = 0x1,
  FLAG_HIDEINEXTRACAM = 0x2,
  FLAG_SPAWNED_OFFSCREEN = 0x4,
  FLAG_RETRIGGERED_OFFSCREEN = 0x8,
};

/* 1074 */
enum $22B77A28BA75C7E357DF3337A633BAC4
{
  INVALID_NODE = 0xFFFFFFFF,
};

/* 1075 */
enum FxBoltType
{
  FX_BOLT_TYPE_NONE = 0x0,
  FX_BOLT_TYPE_BOLTED = 0x1,
  FX_BOLT_TYPE_DYNENT = 0x2,
  FX_BOLT_TYPE_MARKENT = 0x3,
};

/* 1076 */
enum $8979F7DA267ECB657EAC9CFB882B436A
{
  FX_STATUS2_NO_RESTART_ON_REWIND = 0x1,
  FX_STATUS2_OFFSCREEN_SPAWN = 0x4,
  FX_STATUS2_OFFSCREEN_RETRIGGER = 0x8,
};

/* 1077 */
enum $2EFE2E32CA9DF77DC9012F4ED8974D74
{
  FX_CMD_CAMERA_REGULAR = 0x0,
  FX_CMD_CAMERA_EXTRA = 0x1,
};

/* 1078 */
enum FxUpdateResult
{
  FX_UPDATE_REMOVE = 0x0,
  FX_UPDATE_KEEP = 0x1,
};

/* 1079 */
enum FxUpdateEffectType
{
  UPDATE_EFFECT_INDEPENDENT = 0x0,
  UPDATE_EFFECT_BOLTED = 0x1,
  UPDATE_EFFECT_NONSPRITE = 0x2,
  UPDATE_EFFECT_PORTALLED = 0x3,
  UPDATE_EFFECT_INVALID = 0x4,
};

/* 1080 */
enum $41147F01AAE17FFB7E60C26CB30FA8A7
{
  FX_EFFECT_NEEDS_LIGHTING = 0x1,
  FX_EFFECT_HAS_SPOT_LIGHT_ELEM = 0x2,
  FX_EFFECT_USE_BOUNDING_BOX = 0x4,
  FX_EFFECT_LOCAL_BOUNDING_BOX = 0x8,
  FX_EFFECT_HAS_OMNI_LIGHT_ELEM = 0x10,
  FX_EFFECT_HAS_MODEL_ELEM = 0x20,
  FX_EFFECT_HAS_SOUND_ELEM = 0x40,
  FX_EFFECT_HAS_RUNNER_ELEM = 0x80,
  FX_EFFECT_HAS_TRAIL_ELEM = 0x100,
  FX_EFFECT_BBOX_SPAWNCULL = 0x200,
  FX_EFFECT_BBOX_PORTALLED = 0x400,
  FX_EFFECT_IGNORE_TELEPORTING = 0x800,
  FX_EFFECT_FAST_OFFSCREEN_UPDATE = 0x8000,
};

/* 1081 */
enum GfxWarningType
{
  R_WARN_FRONTEND_ENT_LIMIT = 0x0,
  R_WARN_KNOWN_MODELS = 0x1,
  R_WARN_KNOWN_SPECIAL_MODELS = 0x2,
  R_WARN_TEXTURE_OVERRIDES = 0x3,
  R_WARN_MODEL_LIGHT_CACHE = 0x4,
  R_WARN_MODEL_LIGHTING_HANDLE_ALLOC_FAILED = 0x5,
  R_WARN_SCENE_ENTITIES = 0x6,
  R_WARN_TEMP_SKIN_BUF_SIZE = 0x7,
  R_WARN_MAX_SKINNED_CACHE_VERTICES = 0x8,
  R_WARN_MAX_SCENE_SURFS_SIZE = 0x9,
  R_WARN_MAX_SCENE_CULLINFOS_SIZE = 0xA,
  R_WARN_PORTAL_PLANES = 0xB,
  R_WARN_MAX_CLOUDS = 0xC,
  R_WARN_MAX_DLIGHTS = 0xD,
  R_WARN_SMODEL_LIGHTING = 0xE,
  R_WARN_MAX_DRAWSURFS = 0xF,
  R_WARN_GFX_CODE_MESH_LIMIT = 0x10,
  R_WARN_GFX_MARK_MESH_LIMIT = 0x11,
  R_WARN_MAX_SCENE_DRAWSURFS = 0x12,
  R_WARN_MAX_FX_DRAWSURFS = 0x13,
  R_WARN_NONEMISSIVE_FX_MATERIAL = 0x14,
  R_WARN_NONLIGHTMAP_MARK_MATERIAL = 0x15,
  R_WARN_PRIM_DRAW_SURF_BUFFER_SIZE = 0x16,
  R_WARN_CMDBUF_OVERFLOW = 0x17,
  R_WARN_MISSING_DECL_NONDEBUG = 0x18,
  R_WARN_MAX_DYNENT_REFS = 0x19,
  R_WARN_MAX_SCENE_DOBJ_REFS = 0x1A,
  R_WARN_MAX_SCENE_MODEL_REFS = 0x1B,
  R_WARN_MAX_SCENE_BRUSH_REFS = 0x1C,
  R_WARN_MAX_CODE_INDS = 0x1D,
  R_WARN_MAX_CODE_VERTS = 0x1E,
  R_WARN_MAX_CODE_ARGS = 0x1F,
  R_WARN_MAX_MARK_INDS = 0x20,
  R_WARN_MAX_MARK_VERTS = 0x21,
  R_WARN_DEBUG_ALLOC = 0x22,
  R_WARN_SPOT_LIGHT_LIMIT = 0x23,
  R_WARN_FX_ELEM_LIMIT = 0x24,
  R_WARN_VTX_DATA_OVERFLOW = 0x25,
  R_WARN_WORKER_CMD_SIZE = 0x26,
  R_WARN_UNKNOWN_STATICMODEL_SHADER = 0x27,
  R_WARN_UNKNOWN_XMODEL_SHADER = 0x28,
  R_WARN_DYNAMIC_INDEX_BUFFER_SIZE = 0x29,
  R_WARN_MICROCODE_BUFFER_SIZE = 0x2A,
  R_WARN_TOO_MANY_LIGHT_GRID_POINTS = 0x2B,
  R_WARN_MAX_TRANSFER_REQUESTS = 0x2C,
  R_WARN_MAX_SHADER_CONSTANT_SETS = 0x2D,
  R_WARN_SHADER_CONSTANT_SET_ALLOCATE = 0x2E,
  R_WARN_MISSING_TECHNIQUE = 0x2F,
  R_WARN_DEPTH_HACK_NOT_IN_DRAWLIST = 0x30,
  R_WARN_WORLD_IN_DEPTH_HACK_DRAWLIST = 0x31,
  R_WARN_VIEWMODEL_MISSING_STENCIL = 0x32,
  R_WARN_MARKS_ERR_PROBE_MISMATCH = 0x33,
  R_WARN_MARKS_ERR_LMAP_MISMATCH = 0x34,
  R_WARN_OCCLUSION_QUERY = 0x35,
  R_WARN_MAX_OCCLUSION_QUERIES = 0x36,
  R_WARN_FX_ACTIONS_LIMIT = 0x37,
  R_WARN_FX_UNIQUE_HANDLES_LIMIT = 0x38,
  R_WARN_MAX_QUEUED_FX_SPAWN_WORKERS = 0x39,
  R_WARN_TENSION_VERT_COUNT = 0x3A,
  R_WARN_TENSION_PATCH_COUNT = 0x3B,
  R_WARN_COUNT = 0x3C,
};

/* 1082 */
enum $FDF268B9E4B4E1555DF01FC10E3EBDEB
{
  FX_SPRITE_ALLOCATE = 0x0,
  FX_SPRITE_GENERATE = 0x1,
};

/* 1083 */
enum MarkFragmentsAgainstEnum
{
  MARK_FRAGMENTS_AGAINST_BRUSHES = 0x0,
  MARK_FRAGMENTS_AGAINST_MODELS = 0x1,
};

/* 1084 */
enum $50D852DF5C135667F89A6E027D7CB3BA
{
  VISDATA_VISIBLE = 0x1,
  VISDATA_CULL_OUT = 0x2,
  VISDATA_VISIBLE_SPOT = 0x4,
};

/* 1085 */
enum $E871F3C97192DCDAB36BE6DBE6B15DE8
{
  FX_ED_FLAG_LOOPING = 0x1,
  FX_ED_FLAG_USE_RANDOM_COLOR = 0x2,
  FX_ED_FLAG_USE_RANDOM_ALPHA = 0x4,
  FX_ED_FLAG_USE_RANDOM_SIZE_0 = 0x8,
  FX_ED_FLAG_USE_RANDOM_SIZE_1 = 0x10,
  FX_ED_FLAG_USE_RANDOM_SCALE = 0x20,
  FX_ED_FLAG_USE_RANDOM_ROTATION_DELTA = 0x40,
  FX_ED_FLAG_MODULATE_COLOR_BY_ALPHA = 0x80,
  FX_ED_FLAG_USE_RANDOM_VELOCITY_0 = 0x100,
  FX_ED_FLAG_USE_RANDOM_VELOCITY_1 = 0x200,
  FX_ED_FLAG_BACKCOMPAT_VELOCITY = 0x400,
  FX_ED_FLAG_ABSOLUTE_VELOCITY_0 = 0x800,
  FX_ED_FLAG_ABSOLUTE_VELOCITY_1 = 0x1000,
  FX_ED_FLAG_PLAY_ON_TOUCH = 0x2000,
  FX_ED_FLAG_PLAY_ON_DEATH = 0x4000,
  FX_ED_FLAG_PLAY_ON_RUN = 0x8000,
  FX_ED_FLAG_BOUNDING_SPHERE = 0x10000,
  FX_ED_FLAG_PLAY_ATTACHED = 0x40000,
  FX_ED_FLAG_DISABLED = 0x80000000,
};

/* 1086 */
enum $22CAD37148EF9B91393E7A70F3C1AB68
{
  FX_FLAG_TYPE_EDITOR = 0x0,
  FX_FLAG_TYPE_NATIVE = 0x1,
  FX_FLAG_TYPE_ATLAS = 0x2,
  FX_FLAG_TYPE_EFFECT = 0x3,
  FX_FLAG_TYPE_COUNT = 0x4,
};

/* 1087 */
enum $4D8453BF508CC3D38B947DD136A80DEE
{
  VERTS_PER_SPRITE_ELEM = 0x4,
  INDICES_PER_SPRITE_ELEM = 0x6,
};

/* 1088 */
enum $64C0F3FB36AD467454B413C9E74917B7
{
  JQ_RETURN_SUCCESS = 0x0,
  JQ_RETURN_REQUEUE = 0x1,
};

/* 1089 */
enum FX_DrawElement_Setup_Handle_Overtime_Enum
{
  FX_DRAWELEMENT_SETUP_DO_NOT_HANDLE_OVERTIME = 0x0,
  FX_DRAWELEMENT_SETUP_CLAMP_OVERTIME = 0x1,
};

/* 1090 */
enum FxSampleChannel
{
  FX_CHAN_RGBA = 0x0,
  FX_CHAN_SIZE_0 = 0x1,
  FX_CHAN_SIZE_1 = 0x2,
  FX_CHAN_SCALE = 0x3,
  FX_CHAN_ROTATION = 0x4,
  FX_CHAN_COUNT = 0x5,
  FX_CHAN_NONE = 0x6,
};

/* 1091 */
enum $8B40AB7C145FA104EFECA777FE122E85
{
  eFxActionPlaySound = 0x0,
};

/* 1092 */
enum PhysWorld
{
  PHYS_WORLD_DYNENT = 0x0,
  PHYS_WORLD_FX = 0x1,
  PHYS_WORLD_RAGDOLL = 0x2,
  PHYS_WORLD_COUNT = 0x3,
};

/* 1093 */
enum SERVER_TYPE
{
  P2P_SERVER_MP = 0x3E8,
  P2P_SERVER_ZM = 0x3E9,
  DEDICATED_SERVER = 0x7D0,
};

/* 1094 */
typedef bdLobbyErrorCode bdConnection::Status;

/* 1095 */
enum DevGuiInputButton
{
  INPUT_UP = 0x0,
  INPUT_DOWN = 0x1,
  INPUT_LEFT = 0x2,
  INPUT_RIGHT = 0x3,
  INPUT_ACCEPT = 0x4,
  INPUT_REJECT = 0x5,
  INPUT_BIND = 0x6,
  INPUT_GRAPH_EDIT = 0x7,
  INPUT_GRAPH_ADD = 0x8,
  INPUT_GRAPH_REMOVE = 0x9,
  INPUT_GRAPH_SAVE = 0xA,
  INPUT_LINK = 0xB,
  INPUT_RESET = 0xC,
  INPUT_COUNT = 0xD,
};

/* 1096 */
enum DevGuiInputAxis
{
  SCROLL_XAXIS = 0x0,
  SCROLL_YAXIS = 0x1,
  SCROLL_AXIS_COUNT = 0x2,
};

/* 1097 */
enum DevGuiInputState
{
  SCROLL_NONE = 0x0,
  SCROLL_PRESSED = 0x1,
  SCROLL_STALLED = 0x2,
  SCROLL_HELD = 0x3,
};

/* 1098 */
enum DevGuiTokenResult
{
  DEVGUI_TOKEN_ERROR = 0x0,
  DEVGUI_TOKEN_MORE = 0x1,
  DEVGUI_TOKEN_LAST = 0x2,
};

/* 1099 */
enum $B6789AC828AA13A9664728BF6F9D0D4A
{
  DEV_CHILD_MENU = 0x0,
  DEV_CHILD_DVAR = 0x1,
  DEV_CHILD_DVAR_LIST = 0x2,
  DEV_CHILD_COMMAND = 0x3,
  DEV_CHILD_GRAPH = 0x4,
  DEV_CHILD_TYPECOUNT = 0x5,
};

/* 1100 */
enum $FEF9B00F939F60181CA876CB6272F353
{
  HIGHLIGHT_REEL_STAR_LEVELS_COL_INDEX = 0x0,
  HIGHLIGHT_REEL_STAR_LEVELS_COL_MIN_SCORE = 0x1,
};

/* 1101 */
enum $6D077D29A42793D195A0401DFFBAFC30
{
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_TYPE = 0x0,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_BOOKMARK_TYPE = 0x1,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_ETYPE = 0x2,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_SECONDS_BEFORE = 0x3,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_SECONDS_AFTER = 0x4,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_THUMBNAIL_CAPTURE_TIME_DELTA = 0x5,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_PRIORITY_WEIGHT_PER_EVENT = 0x6,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_PRIORITY_STACK_FACTOR = 0x7,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_BOOST_PRIORITY_ONLY = 0x8,
  HIGHLIGHT_REEL_INFORMATION_DEFINE_COL_KILLCAM_AVAILABLE = 0x9,
};

/* 1102 */
enum DBCloneMethod
{
  DB_CLONE_NORMAL = 0x0,
  DB_CLONE_FROM_DEFAULT = 0x1,
  DB_CLONE_SWAP = 0x2,
};

/* 1103 */
enum XZoneState
{
  XZONE_UNLOADING = 0xFFFFFFFF,
  XZONE_EMPTY = 0x0,
  XZONE_LOADING = 0x1,
  XZONE_LOADED = 0x2,
  XZONE_COMPLETE = 0x3,
};

/* 1104 */
enum $CA2693375CC508CF1F067C7004EB0F00
{
  DM_MAIN_MEMORY = 0x0,
  DM_VIDEO_MEMORY = 0x1,
  DM_STREAMER_RESERVE = 0x2,
  DM_MEMORY_LOCATION_COUNT = 0x3,
};

/* 1105 */
enum $68BA7050023167B143590A548296522E
{
  ENT_DRAW_DOBJ = 0x0,
  ENT_DRAW_BRUSH = 0x1,
  ENT_DRAW_COUNT = 0x2,
};

/* 1106 */
enum MaterialWorldVertexFormat
{
  MTL_WORLDVERT_TEX_1_NRM_1 = 0x0,
  MTL_WORLDVERT_TEX_2_NRM_1 = 0x1,
  MTL_WORLDVERT_TEX_2_NRM_2 = 0x2,
  MTL_WORLDVERT_TEX_3_NRM_1 = 0x3,
  MTL_WORLDVERT_TEX_3_NRM_2 = 0x4,
  MTL_WORLDVERT_TEX_3_NRM_3 = 0x5,
  MTL_WORLDVERT_TEX_4_NRM_1 = 0x6,
  MTL_WORLDVERT_TEX_4_NRM_2 = 0x7,
  MTL_WORLDVERT_TEX_4_NRM_3 = 0x8,
};

/* 1107 */
enum $ED6EEC88108C35AFCBE9744AD3834FBB
{
  DB_GUMP_1 = 0x1,
  DB_GUMP_2 = 0x2,
  DB_GUMP_3 = 0x4,
  DB_GUMP_4 = 0x8,
};

/* 1108 */
enum eProgressBar
{
  PROGRESSBAR_MAX_FF_COUNT = 0x3,
  PROGRESSBAR_TEXTURES = 0x3,
  PROGRESSBAR_COUNT = 0x4,
};

/* 1109 */
enum bidTypes_e
{
  BID_RELATED = 0x0,
  BID_NOT_MET = 0x1,
  BID_RANDOM = 0x2,
  BID_SAME_MACHINE = 0x3,
  NUM_BIDS = 0x4,
};

/* 1110 */
enum $A6342FAB94B84E94672868514A3886A9
{
  LOBBYSTAT_KILLS = 0x0,
  LOBBYSTAT_DIVIDER = 0x1,
  LOBBYSTAT_DEATHS = 0x2,
  LOBBYSTAT_COUNT = 0x3,
};

/* 1111 */
enum ProberMode
{
  PROBER_UNDEFINED = 0x0,
  PROBER_SEARCH = 0x1,
  PROBER_MERGE = 0x2,
  PROBER_INVITE = 0x3,
  PROBER_NEWLOBBY = 0x4,
  PROBER_CLIENT = 0x5,
};

/* 1112 */
enum ProberState
{
  STATE_IDLE = 0x0,
  STATE_WAITING_FOR_HOSTS = 0x1,
  STATE_QOS_IN_PROGRESS = 0x2,
  STATE_QOS_COMPLETE = 0x3,
  STATE_ASSOCIATING = 0x4,
  STATE_HANDSHAKING = 0x5,
  STATE_HOST_FAILED = 0x6,
  STATE_NO_HOSTS = 0x7,
  STATE_SEARCH_EXHAUSTED = 0x8,
  STATE_CLIENT_ASSOCIATING = 0x9,
  STATE_CLIENT_HANDSHAKING = 0xA,
  STATE_CLIENT_CONNECTED = 0xB,
  STATE_CLIENT_FAILED = 0xC,
  STATE_HOST_ACCEPT = 0xD,
  STATE_CLIENTS_AGREE = 0xE,
  STATE_ALL_IN = 0xF,
  STATE_ERROR = 0x10,
};

/* 1113 */
enum PartyProberStatus
{
  PARTY_PROBER_NO_STATUS = 0x0,
  PARTY_PROBER_IDLE = 0x1,
  PARTY_PROBER_WORKING = 0x2,
  PARTY_PROBER_READY_TO_JOIN = 0x3,
  PARTY_PROBER_SEARCH_FAILED = 0x4,
  PARTY_PROBER_FORCED_ERROR = 0x5,
};

/* 1114 */
typedef MACRO_PENDING ConnectStatus;

/* 1115 */
enum migrateClientState_t
{
  MIGRATE_CLIENT_IDLE = 0x0,
  MIGRATE_CLIENT_SENDING_PACKETS = 0x1,
  MIGRATE_WAITING_FOR_RESPONSES = 0x2,
  MIGRATE_ACTIVE = 0x3,
  MIGRATE_BECOMING_HOST = 0x4,
  MIGRATE_CLIENT_NUM_STATES = 0x5,
};

/* 1116 */
enum voteWinner_e
{
  NOT_VOTED_ANY_MAP = 0x0,
  VOTED_ROTATIONAL_MAP = 0x1,
  VOTED_PREVIOUS_MAP = 0x2,
  VOTED_NEXT_ROTATIONAL_MAP = 0x3,
};

/* 1117 */
enum votePossible_e
{
  VOTE_UNKNOWN = 0x0,
  VOTE_POSSIBLE = 0x1,
  VOTE_NOTPOSSIBLE = 0x2,
};

/* 1118 */
enum PartyMemberAddResult
{
  MEMBER_ADD_SUCCESS = 0x0,
  MEMBER_ADD_FAILED = 0x1,
  MEMBER_ADD_FAILED_OCCUPIED = 0x2,
  MEMBER_ADD_FAILED_CHALLENGE = 0x3,
  MEMBER_ADD_FAILED_INSUFFICIENT_FUNDS = 0x4,
};

/* 1119 */
enum partydebugValue_t
{
  PARTYSTATEDEBUG_BEGIN = 0x0,
  PARTYSTATEDEBUG_AFTER_WRITEMODES = 0x1,
  PARTYSTATEDEBUG_AFTER_ID = 0x2,
  PARTYSTATEDEBUG_AFTER_HOSTADDR = 0x3,
  PARTYSTATEDEBUG_AFTER_HOSTUISTRING = 0x4,
  PARTYSTATEDEBUG_AFTER_NONCEANDFLAGS = 0x5,
  PARTYSTATEDEBUG_AFTER_LOBBYFLAGSANDTIMES = 0x6,
  PARTYSTATEDEBUG_AFTER_SLOTS = 0x7,
  PARTYSTATEDEBUG_AFTER_MIGRATEBITS = 0x8,
  PARTYSTATEDEBUG_AFTER_VETOBITS = 0x9,
  PARTYSTATEDEBUG_AFTER_SESSIONINFO = 0xA,
  PARTYSTATEDEBUG_AFTER_PRESENCE = 0xB,
  PARTYSTATEDEBUG_AFTERMAPFLAGS = 0xC,
  PARTYSTATEDEBUG_MEMBERMARKER = 0xD,
  PARTYSTATEDEBUG_AFTERMEMBERS = 0xE,
  PARTYSTATEDEBUG_BEFORE_MEMBER = 0xF,
  PARTYSTATEDEBUG_AFTER_MEMBER = 0x10,
};

/* 1120 */
enum $870B1582F347FCCEC34A9B176695CADB
{
  SEARCH_PREFERENCE_NORMAL = 0x0,
  SEARCH_PREFERENCE_BEST = 0x1,
  SEARCH_PREFERENCE_ANY = 0x2,
};

/* 1121 */
enum PartyMemberProbation
{
  MEMBER_PROBATION_PUBLIC = 0x0,
  MEMBER_PROBATION_LEAGUE = 0x1,
};

/* 1122 */
enum PeerDataPacketType
{
  PEER_DATA_VOICE_PACKET = 0x0,
  PEER_DATA_DATA_PACKET = 0x1,
  PEER_DATA_NUM_PACKET_TYPES = 0x2,
};

/* 1123 */
enum $58B0C236D90F3D9E24DDDB7428653BB0
{
  RENDERCMD_BEGINFRAME = 0x1,
  RENDERCMD_ENDFRAME = 0x2,
  RENDERCMD_LEFTEYE = 0x4,
  RENDERCMD_RIGHTEYE = 0x8,
  RENDERCMD_ENDEYE = 0x10,
};

/* 1124 */
enum rankTierTableColumns_t
{
  ZM_RANKTABLE_TIER_ID = 0x0,
  ZM_RANKTABLE_TIER_TIMEPLAYEDLIMIT = 0x1,
  ZM_RANKTABLE_TIER_SKILLLIMIT0 = 0x2,
  ZM_RANKTABLE_COUNT = 0x3,
};

/* 1125 */
enum milestoneTableColumns_t
{
  MILESTONE_COLUMN_INDEX = 0x0,
  MILESTONE_COLUMN_TIERID = 0x1,
  MILESTONE_COLUMN_TARGETVALUE = 0x2,
  MILESTONE_COLUMN_STATTYPE = 0x3,
  MILESTONE_COLUMN_STATNAME = 0x4,
  MILESTONE_COLUMN_STRING = 0x5,
  MILESTONE_COLUMN_XPEARNED = 0x6,
  MILESTONE_COLUMN_PREREQUISITE = 0x7,
  MILESTONE_COLUMN_EXCLUDE = 0x8,
  MILESTONE_COLUMN_UNLOCKITEM = 0x9,
  MILESTONE_COLUMN_CHALLENGESTATNAME = 0xA,
  MILESTONE_COLUMN_UNLOCKLVL = 0xB,
  MILESTONE_COLUMN_UNLOCKIMAGE = 0xC,
  MILESTONE_COLUMN_INCLUDE = 0xD,
  MILESTONE_COLUMN_UNLOCKPLVL = 0xE,
  MILESTONE_COLUMN_RESETONPRESTIGE = 0xF,
  MILESTONE_COLUMN_CATEGORY = 0x10,
  MILESTONE_COLUMN_ISMAXLEVEL = 0x11,
  MILESTONE_COLUMN_ISMASTERY = 0x12,
  MILESTONE_COLUMN_ISITEMUNLOCKED = 0x13,
  MILESTONE_COLUMN_ISEXPERT = 0x14,
  MILESTONE_COLUMN_SETGLOBALSTAT = 0x15,
  MILESTONE_COLUMN_XPGROUPMASK = 0x16,
};

/* 1126 */
enum wagerMedalTableColumns_t
{
  WAGER_MEDAL_COLUMN_INDEX = 0x0,
  WAGER_MEDAL_COLUMN_STAT_NAME = 0x1,
  WAGER_MEDAL_COLUMN_NAME = 0x2,
  WAGER_MEDAL_COLUMN_DESC = 0x3,
  WAGER_MEDAL_COLUMN_CP_TEAMBASED = 0x4,
  WAGER_MEDAL_COLUMN_CP_FFA = 0x5,
};

/* 1127 */
enum medalTableColumns_t
{
  MEDAL_COLUMN_SCRIPT_REFERENCE = 0x0,
  MEDAL_COLUMN_MEDAL_STRING = 0x1,
};

/* 1128 */
enum $F26A47F4FC659BD9174B0378003EAEFE
{
  KEYS_ALL = 0x0,
  KEYS_GAMEPAD_ONLY = 0x1,
};

/* 1129 */
enum LocSelInputState
{
  LOC_SEL_INPUT_NONE = 0x0,
  LOC_SEL_INPUT_CONFIRM = 0x1,
  LOC_SEL_INPUT_YAW = 0x2,
  LOC_SEL_INPUT_CANCEL = 0x3,
};

/* 1130 */
enum GamepadMapping
{
  GPAD_MAP_LINEAR = 0x0,
  GPAD_MAP_SQUARED = 0x1,
  GPAD_MAP_COUNT = 0x2,
  GPAD_MAP_NONE = 0xFFFFFFFF,
};

/* 1131 */
enum CompositeType
{
  COMPOSITE_NONE = 0x0,
  COMPOSITE_EMBLEM = 0x1,
};

/* 1132 */
enum CompositeState
{
  COMPOSITE_STATE_IDLE = 0x0,
  COMPOSITE_STATE_PRE = 0x1,
  COMPOSITE_STATE_RENDERING = 0x2,
  COMPOSITE_STATE_COMPLETE = 0x3,
};

/* 1133 */
enum ClientViewViewportSize
{
  VIEWPORT_LARGE = 0x0,
  VIEWPORT_SMALL = 0x1,
};

/* 1134 */
enum $BE792FD47626AF2D5015141619808AD3
{
  KB_LEFT = 0x0,
  KB_RIGHT = 0x1,
  KB_FORWARD = 0x2,
  KB_BACK = 0x3,
  KB_LOOKUP = 0x4,
  KB_LOOKDOWN = 0x5,
  KB_MOVELEFT = 0x6,
  KB_MOVERIGHT = 0x7,
  KB_STRAFE = 0x8,
  KB_SPEED = 0x9,
  KB_UP = 0xA,
  KB_DOWN = 0xB,
  KB_ANYUP = 0xC,
  KB_MLOOK = 0xD,
  KB_SPECTATE = 0xE,
  KB_SPECNEXT = 0xF,
  KB_SPECPREV = 0x10,
  KB_ATTACK = 0x11,
  KB_BREATH = 0x12,
  KB_FRAG = 0x13,
  KB_OFFHANDSECONDARY = 0x14,
  KB_THROWBACK = 0x15,
  KB_MELEE = 0x16,
  KB_ACTIVATE = 0x17,
  KB_RELOAD = 0x18,
  KB_USE_RELOAD = 0x19,
  KB_LEANLEFT = 0x1A,
  KB_LEANRIGHT = 0x1B,
  KB_PRONE = 0x1C,
  KB_CROUCH = 0x1D,
  KB_THROW = 0x1E,
  KB_STANCE = 0x1F,
  KB_SPRINT = 0x20,
  KB_NIGHTVISION = 0x21,
  KB_GAS = 0x22,
  KB_REVERSE = 0x23,
  KB_HANDBRAKE = 0x24,
  KB_SWITCHSEAT = 0x25,
  KB_VEHICLEATTACK = 0x26,
  KB_VEHICLEATTACKSECOND = 0x27,
  KB_VEHICLEMOVEUP = 0x28,
  KB_VEHICLEMOVEDOWN = 0x29,
  KB_VEHICLEBOOST = 0x2A,
  KB_JAM = 0x2B,
  KB_TALK = 0x2C,
  NUM_BUTTONS = 0x2D,
};

/* 1135 */
enum $B7071B574607A329820632295AD9EBD6
{
  WEAP_ANIM_VIEWMODEL_START = 0x0,
  WEAP_ANIM_VIEWMODEL_END = 0x55,
};

/* 1136 */
enum $2EAE442CDFE504C99B88FCE62ABC90C4
{
  WEAP_ANIM_CAMERA_START = 0x49,
  WEAP_ANIM_CAMERA_END = 0x4D,
};

/* 1137 */
enum LaserOwnerEnum
{
  LASER_OWNER_NON_PLAYER = 0x0,
  LASER_OWNER_PLAYER = 0x1,
};

/* 1138 */
enum LaserLightEnum
{
  LASER_LIGHT_OFF = 0x0,
  LASER_LIGHT_ON = 0x1,
};

/* 1139 */
enum ActionSlotIndex
{
  ACTIONSLOTINDEX_0 = 0x0,
  ACTIONSLOTINDEX_1 = 0x1,
  ACTIONSLOTINDEX_2 = 0x2,
  ACTIONSLOTINDEX_3 = 0x3,
};

/* 1140 */
enum tagColorIndexs
{
  TAG_WEAPON_LEFT_COLOR = 0x0,
  TAG_WEAPON_RIGHT_COLOR = 0x1,
  TAG_INHAND_COLOR = 0x2,
  TAG_STOWED_BACK_COLOR = 0x3,
  TAG_WEAPON_CHEST_COLOR = 0x4,
  TAG_EYE_COLOR = 0x5,
};

/* 1141 */
enum WeaponOptions::ReticleType
{
  RETICLE_REFLEX = 0x0,
  RETICLE_REFLEX_PISTOL = 0x1,
  RETICLE_ACOG = 0x2,
  RETICLE_HOLO = 0x3,
  RETICLE_COMBO_UP = 0x4,
  RETICLE_COMBO_DOWN = 0x5,
  RETICLE_LONGBREATH = 0x6,
  RETICLE_COUNT = 0x7,
};

/* 1142 */
enum $7CE723B692AA0D158C7CFE6E95BF8BC0
{
  DTYPE_BOOL = 0x0,
  DTYPE_FLOAT = 0x1,
  DTYPE_VEC3 = 0x2,
  DTYPE_VEC4 = 0x3,
  DTYPE_STEPFLOAT = 0x4,
  DTYPE_INTEGER = 0x5,
  DTYPE_MATERIAL = 0x6,
};

/* 1143 */
enum FxDrawScene
{
  FX_SCENE_MAIN = 0x0,
  FX_SCENE_EXTRACAM = 0x1,
  NUM_FX_SCENES = 0x2,
};

/* 1144 */
enum SurfaceGroupEnum
{
  SURF_GROUP_SOFT = 0x0,
  SURF_GROUP_HARD = 0x1,
  NUM_SURF_GROUPS = 0x2,
};

/* 1145 */
enum $752FF802448D94C5F325EFB753F2B23C
{
  CULL_OUT = 0x0,
  CULL_CALC_POSE = 0x1,
  CULL_CALC_SKIN = 0x2,
};

/* 1146 */
enum cgVehicleTurretLoopState_t
{
  CG_VEHICLE_LOOP_STOP = 0x0,
  CG_VEHICLE_LOOP_PLAY = 0x1,
  CG_VEHICLE_LOOP_STOPPING = 0x2,
};

/* 1147 */
enum EVehicleRotorOrientation
{
  VEHROT_ORIENT_HORIZONTAL = 0x0,
  VEHROT_ORIENT_VERTICAL = 0x1,
};

/* 1148 */
enum eFoot
{
  FOOTSTEP_FRONTRIGHT = 0x0,
  FOOTSTEP_FRONTLEFT = 0x1,
  FOOTSTEP_REARRIGHT = 0x2,
  FOOTSTEP_REARLEFT = 0x3,
  FOOTSTEP_COUNT = 0x4,
};

/* 1149 */
enum dynEntFieldType_t
{
  F_DYNENT_CLIENT = 0x0,
  F_DYNENT_POSE = 0x1,
  F_DYNENT_DEF = 0x2,
};

/* 1150 */
enum gumpFadeState
{
  GUMP_FADE_OFF = 0x0,
  GUMP_FADE_WATCH_FOR_LOAD = 0x1,
  GUMP_FADE_LOADING = 0x2,
  GUMP_FADE_FADING = 0x3,
};

/* 1151 */
enum $702174DFB72464F542ACC988DE1F106A
{
  LL_INIT = 0x0,
  LL_INITIAL_DELAY = 0x1,
  LL_MAX = 0x2,
};

/* 1152 */
enum $D474983B8F3AA7127A6694D3EFE0BE3F
{
  LL_FC_START_FLICKER = 0x2,
  LL_FC_FLICKER = 0x3,
};

/* 1153 */
enum $271D9B48528044B41641A9DC75A54823
{
  LL_FF_START_FLICKER = 0x2,
  LL_FF_FLICKER = 0x3,
};

/* 1154 */
enum $DD1FAC16D34AF722A7FA9C2C292FF4FB
{
  LL_ETF_START_FLICKER = 0x2,
  LL_ETF_WAIT_FOR_ACTIVATION = 0x3,
  LL_ETF_BURST_WAIT = 0x4,
  LL_ETF_FADE_DOWN_INIT = 0x5,
  LL_ETF_FADE_DOWN = 0x6,
  LL_ETF_BECOME_FIRE_FLICKER = 0x7,
};

/* 1155 */
enum $2ECDB2F9229856424F60622142D85C3D
{
  CENTFIELD_ENTITY = 0x0,
  CENTFIELD_SENTIENT = 0x2000,
  CENTFIELD_ACTOR = 0x4000,
  CENTFIELD_CLIENT = 0x6000,
  CENTFIELD_VEHICLE = 0x8000,
  CENTFIELD_MASK = 0xE000,
};

/* 1156 */
enum $C60DE4EDBCD487033D6314FBB04DA521
{
  LL_EF_START_FLICKER = 0x2,
  LL_EF_FLICKER = 0x3,
};

/* 1157 */
enum $2040EA4927AE26CB05BCA3718A41E220
{
  LL_GS_WAIT_OFF_INIT = 0x2,
  LL_GS_WAIT = 0x3,
  LL_GS_WAIT_ON_INIT = 0x4,
};

/* 1158 */
enum $1E1F2B3AEB713AE4AF1231F64098E00E
{
  LL_DS_WAIT_OFF_INIT = 0x2,
  LL_DS_WAIT = 0x3,
  LL_DS_WAIT_ON_INIT = 0x4,
};

/* 1159 */
enum $653C642B507F192B2E5F801FCB283E7D
{
  LL_GP_RAMP_DOWN_INIT = 0x2,
  LL_GP_RAMP_DOWN = 0x3,
  LL_GP_RAMP_UP_INIT = 0x4,
  LL_GP_RAMP_UP = 0x5,
  LL_GP_RAMP_UP_HOLD_INIT = 0x6,
  LL_GP_WAIT = 0x7,
  LL_GP_WAIT_ON_INIT = 0x8,
  LL_GP_WAIT_OFF_INIT = 0x9,
};

/* 1160 */
enum $670125C1FF69321D971391D3DB6EB707
{
  LL_TV_INTENSITY_LERP_INIT = 0x2,
  LL_TV_INTENSITY_LERP = 0x3,
  LL_TV_COLOR_LERP_INIT = 0x4,
  LL_TV_COLOR_LERP = 0x5,
};

/* 1161 */
enum $A28B13C4CAC1905949D95F64BA8C5485
{
  LL_GF_FLICKER_BURST_INIT = 0x2,
  LL_GF_FLICKER_WAIT_INIT = 0x3,
  LL_GF_FLICKER_WAIT = 0x4,
  LL_GF_BETWEEN_BURSTS_WAIT_INIT = 0x5,
};

/* 1162 */
enum $EC9E7C40902018858A3A57456D01625A
{
  RM_DO_WAIT = 0x2,
};

/* 1163 */
enum $4364087DA6978EF5106B8DA7DBA3FA7D
{
  SL_INIT = 0x0,
  SL_TURNING_ON = 0x1,
  SL_ON = 0x2,
  SL_TURNING_OFF = 0x3,
  SL_OFF = 0x4,
};

/* 1164 */
enum listColumnTypes_t
{
  LCT_NAME = 0x0,
  LCT_CLAN = 0x1,
  LCT_SCORE = 0x2,
  LCT_PING = 0x3,
  LCT_STATUS_ICON = 0x4,
  LCT_TALKING_ICON = 0x5,
  LCT_KILLS = 0x6,
  LCT_RANK_ICON = 0x7,
  LCT_ASSISTS = 0x8,
  LCT_DOWNS = 0x9,
  LCT_REVIVES = 0xA,
  LCT_HEADSHOTS = 0xB,
  LCT_MULTIPLIER = 0xC,
  LCT_NUM = 0xD,
};

/* 1165 */
enum RumbleSourceType
{
  RUMBLESOURCE_INVALID = 0x0,
  RUMBLESOURCE_ENTITY = 0x1,
  RUMBLESOURCE_POS = 0x2,
};

/* 1166 */
enum $49F100D19B2F0B54A66E56149FEEF817
{
  CENT_ACTOR_PRONE_NONE = 0x0,
  CENT_ACTOR_PRONE_NORMAL = 0x1,
  CENT_ACTOR_PRONE_CORPSE = 0x2,
};

/* 1167 */
enum CompassType
{
  COMPASS_TYPE_PARTIAL = 0x0,
  COMPASS_TYPE_FULL = 0x1,
};

/* 1168 */
enum eGuidedMissileInfo
{
  GUIDED_MISSILE_VIEWPOS = 0x0,
  GUIDED_MISSILE_DIST_TO_TARG = 0x1,
  GUIDED_MISSILE_DIST_FROM_OWNER = 0x2,
};

/* 1169 */
enum e_tank_hud_component
{
  _tank_component_core = 0x0,
  _tank_component_left_tread = 0x1,
  _tank_component_right_tread = 0x2,
  _tank_component_turret = 0x3,
  _tank_component_driver_seat = 0x4,
  _tank_component_gunner_seat = 0x5,
  k_tank_hud_component_count = 0x6,
};

/* 1170 */
enum cursorHintType_t
{
  CURSORHINTS_NO_HINTS = 0x0,
  CURSORHINTS_SIN_SIZE_PULSE = 0x1,
  CURSORHINTS_ONE_WAY_SIZE_PULSE = 0x2,
  CURSORHINTS_ALPHA_PULSE = 0x3,
  CURSORHINTS_STATIC_IMAGE = 0x4,
  CURSORHINTS_COUNT = 0x5,
};

/* 1171 */
enum eScriptsMismatch
{
  SCRIPTS_MISMATCH_NO_MODIFICATION = 0x0,
  SCRIPTS_MISMATCH_MODIFIED_NO_ACTION = 0x1,
  SCRIPTS_MISMATCH_MODIFIED = 0x2,
};

/* 1172 */
enum eBattleChatterPlayStates
{
  BCMP_NONE = 0x0,
  BCMP_SOUND_ONE = 0x1,
  BCMP_SOUND_TWO = 0x2,
};

/* 1173 */
enum $4C1A6FE61241F9D9DC7EB76E7013A15B
{
  AI_STANCE_STANDING = 0x0,
  AI_STANCE_CROUCH = 0x1,
  AI_STANCE_PRONE = 0x2,
};

/* 1174 */
enum $5786A8F4C8F02723716ED7C0B1B6AAFE
{
  AI_MOVEMODE_SPRINT = 0x0,
  AI_MOVEMODE_RUN = 0x1,
  AI_MOVEMODE_WALK = 0x2,
  AI_MOVEMODE_CROUCH_RUN = 0x3,
  AI_MOVEMODE_CROUCH_WALK = 0x4,
  AI_MOVEMODE_PRONE = 0x5,
};

/* 1175 */
enum ADJUST_TYPES
{
  ADJUST_NULL = 0x0,
  ADJUST_NOTHING = 0x1,
  ADJUST_DOUBLEX = 0x2,
  ADJUST_HALFY = 0x3,
  ADJUST_HALFY_CUSTOM_CENTERY = 0x4,
  ADJUST_WRT_SCREEN = 0x5,
};

/* 1176 */
enum turretAnims_t
{
  TURRETANIM_ROOT = 0x0,
  TURRETANIM_IDLE = 0x1,
  TURRETANIM_FIRE = 0x2,
  TURRETANIM_NUM = 0x3,
};

/* 1177 */
enum $B220D5E67C2D3EDB2B43054EAB2A9D6D
{
  DRAW_INFO_STATE_NONE = 0x0,
  DRAW_INFO_STATE_PENDING = 0x1,
  DRAW_INFO_STATE_READY = 0x2,
};

/* 1178 */
enum $3F37E8BEF3524BE8A8A977618198178A
{
  ZBPSS_INIT = 0x0,
  ZBPSS_INIT_WAIT = 0x1,
  ZBPSS_WAIT = 0x2,
  ZBPSS_STAGE_2 = 0x3,
  ZBPSS_STAGE_3 = 0x4,
};

/* 1179 */
enum $66C1F3A7DCBF992DBB5993F1FB92F105
{
  OVERHEAD_DISPLAY_GAMERTAGONLY = 0x0,
  OVERHEAD_DISPLAY_RANK_AND_CLAN = 0x1,
  OVERHEAD_DISPLAY_GAMERTAG_CLAN_AND_RANK = 0x2,
  OVERHEAD_DISPLAY_MARQUEE = 0x3,
  OVERHEAD_REMOVE_MARQUEE = 0x4,
  OVERHEAD_RANK_ONLY = 0x5,
  NUM_OVERHEAD_DISPLAY_MODES = 0x6,
};

/* 1180 */
enum GfxExtraCamParms::eExtraCamRenderMode
{
  EXTRA_CAM_NONE = 0x0,
  EXTRA_CAM_SINGLE = 0x1,
  EXTRA_CAM_MULTI = 0x2,
};

/* 1181 */
enum $2A452970A3D4B53640803F3FD746CB1C
{
  R_DRAW_INFO_NONE = 0x0,
  R_DRAW_INFO_STAGES = 0x1,
  R_DRAW_INFO_TARGETS = 0x2,
  R_DRAW_INFO_TRIS = 0x3,
  R_DRAW_INFO_PRIMS = 0x4,
  R_DRAW_INFO_COUNT = 0x5,
};

/* 1182 */
enum GridPointAlignType
{
  GRID_TOP_LEFT_ALIGN = 0x0,
  GRID_TOP_CENTER_ALIGN = 0x1,
  GRID_TOP_RIGHT_ALIGN = 0x2,
  GRID_LEFT_ALIGN = 0x3,
  GRID_CENTER_ALIGN = 0x4,
  GRID_RIGHT_ALIGN = 0x5,
  GRID_BOTTOM_LEFT_ALIGN = 0x6,
  GRID_BOTTOM_CENTER_ALIGN = 0x7,
  GRID_BOTTOM_RIGHT_ALIGN = 0x8,
};

/* 1183 */
enum parseSkip_t
{
  SKIP_NO = 0x0,
  SKIP_YES = 0x1,
  SKIP_ALL_ELIFS = 0x2,
};

/* 1184 */
enum unlockMapTableColumns_t
{
  UNLOCKMAPTABLE_INDEX = 0x0,
  UNLOCKMAPTABLE_GROUPLIST = 0x1,
  UNLOCKMAPTABLE_NAME = 0x2,
  UNLOCKMAPTABLE_STRINGREF = 0x3,
  UNLOCKMAPTABLE_COUNT = 0x4,
};

/* 1185 */
enum FactionTableColumn
{
  FACTION_TABLE_COLUMN_NAME = 0x0,
  FACTION_TABLE_COLUMN_TEAM = 0x1,
  FACTION_TABLE_COLUMN_RED = 0x2,
  FACTION_TABLE_COLUMN_GREEN = 0x3,
  FACTION_TABLE_COLUMN_BLUE = 0x4,
  NUM_FACTION_TABLE_COLUMNS = 0x5,
};

/* 1186 */
enum attachedFieldType_t
{
  AUFT_ATTACHMENTTYPE = 0x12,
  AUFT_HIDETAGS = 0x13,
  AUFT_OVERLAYRETICLE = 0x14,
  AUFT_CAMO = 0x15,
  AUFT_NUM_FIELD_TYPES = 0x16,
};

/* 1187 */
enum eAutoMeleeState
{
  AMS_NOT_ACTIVE = 0x0,
  AIM_MELEE_STATE_TARGETED = 0x1,
  AIM_MELEE_STATE_UPDATING = 0x2,
};

/* 1188 */
enum _NvAPI_Status
{
  NVAPI_OK = 0x0,
  NVAPI_ERROR = 0xFFFFFFFF,
  NVAPI_LIBRARY_NOT_FOUND = 0xFFFFFFFE,
  NVAPI_NO_IMPLEMENTATION = 0xFFFFFFFD,
  NVAPI_API_NOT_INITIALIZED = 0xFFFFFFFC,
  NVAPI_INVALID_ARGUMENT = 0xFFFFFFFB,
  NVAPI_NVIDIA_DEVICE_NOT_FOUND = 0xFFFFFFFA,
  NVAPI_END_ENUMERATION = 0xFFFFFFF9,
  NVAPI_INVALID_HANDLE = 0xFFFFFFF8,
  NVAPI_INCOMPATIBLE_STRUCT_VERSION = 0xFFFFFFF7,
  NVAPI_HANDLE_INVALIDATED = 0xFFFFFFF6,
  NVAPI_OPENGL_CONTEXT_NOT_CURRENT = 0xFFFFFFF5,
  NVAPI_INVALID_POINTER = 0xFFFFFFF2,
  NVAPI_NO_GL_EXPERT = 0xFFFFFFF4,
  NVAPI_INSTRUMENTATION_DISABLED = 0xFFFFFFF3,
  NVAPI_NO_GL_NSIGHT = 0xFFFFFFF1,
  NVAPI_EXPECTED_LOGICAL_GPU_HANDLE = 0xFFFFFF9C,
  NVAPI_EXPECTED_PHYSICAL_GPU_HANDLE = 0xFFFFFF9B,
  NVAPI_EXPECTED_DISPLAY_HANDLE = 0xFFFFFF9A,
  NVAPI_INVALID_COMBINATION = 0xFFFFFF99,
  NVAPI_NOT_SUPPORTED = 0xFFFFFF98,
  NVAPI_PORTID_NOT_FOUND = 0xFFFFFF97,
  NVAPI_EXPECTED_UNATTACHED_DISPLAY_HANDLE = 0xFFFFFF96,
  NVAPI_INVALID_PERF_LEVEL = 0xFFFFFF95,
  NVAPI_DEVICE_BUSY = 0xFFFFFF94,
  NVAPI_NV_PERSIST_FILE_NOT_FOUND = 0xFFFFFF93,
  NVAPI_PERSIST_DATA_NOT_FOUND = 0xFFFFFF92,
  NVAPI_EXPECTED_TV_DISPLAY = 0xFFFFFF91,
  NVAPI_EXPECTED_TV_DISPLAY_ON_DCONNECTOR = 0xFFFFFF90,
  NVAPI_NO_ACTIVE_SLI_TOPOLOGY = 0xFFFFFF8F,
  NVAPI_SLI_RENDERING_MODE_NOTALLOWED = 0xFFFFFF8E,
  NVAPI_EXPECTED_DIGITAL_FLAT_PANEL = 0xFFFFFF8D,
  NVAPI_ARGUMENT_EXCEED_MAX_SIZE = 0xFFFFFF8C,
  NVAPI_DEVICE_SWITCHING_NOT_ALLOWED = 0xFFFFFF8B,
  NVAPI_TESTING_CLOCKS_NOT_SUPPORTED = 0xFFFFFF8A,
  NVAPI_UNKNOWN_UNDERSCAN_CONFIG = 0xFFFFFF89,
  NVAPI_TIMEOUT_RECONFIGURING_GPU_TOPO = 0xFFFFFF88,
  NVAPI_DATA_NOT_FOUND = 0xFFFFFF87,
  NVAPI_EXPECTED_ANALOG_DISPLAY = 0xFFFFFF86,
  NVAPI_NO_VIDLINK = 0xFFFFFF85,
  NVAPI_REQUIRES_REBOOT = 0xFFFFFF84,
  NVAPI_INVALID_HYBRID_MODE = 0xFFFFFF83,
  NVAPI_MIXED_TARGET_TYPES = 0xFFFFFF82,
  NVAPI_SYSWOW64_NOT_SUPPORTED = 0xFFFFFF81,
  NVAPI_IMPLICIT_SET_GPU_TOPOLOGY_CHANGE_NOT_ALLOWED = 0xFFFFFF80,
  NVAPI_REQUEST_USER_TO_CLOSE_NON_MIGRATABLE_APPS = 0xFFFFFF7F,
  NVAPI_OUT_OF_MEMORY = 0xFFFFFF7E,
  NVAPI_WAS_STILL_DRAWING = 0xFFFFFF7D,
  NVAPI_FILE_NOT_FOUND = 0xFFFFFF7C,
  NVAPI_TOO_MANY_UNIQUE_STATE_OBJECTS = 0xFFFFFF7B,
  NVAPI_INVALID_CALL = 0xFFFFFF7A,
  NVAPI_D3D10_1_LIBRARY_NOT_FOUND = 0xFFFFFF79,
  NVAPI_FUNCTION_NOT_FOUND = 0xFFFFFF78,
  NVAPI_INVALID_USER_PRIVILEGE = 0xFFFFFF77,
  NVAPI_EXPECTED_NON_PRIMARY_DISPLAY_HANDLE = 0xFFFFFF76,
  NVAPI_EXPECTED_COMPUTE_GPU_HANDLE = 0xFFFFFF75,
  NVAPI_STEREO_NOT_INITIALIZED = 0xFFFFFF74,
  NVAPI_STEREO_REGISTRY_ACCESS_FAILED = 0xFFFFFF73,
  NVAPI_STEREO_REGISTRY_PROFILE_TYPE_NOT_SUPPORTED = 0xFFFFFF72,
  NVAPI_STEREO_REGISTRY_VALUE_NOT_SUPPORTED = 0xFFFFFF71,
  NVAPI_STEREO_NOT_ENABLED = 0xFFFFFF70,
  NVAPI_STEREO_NOT_TURNED_ON = 0xFFFFFF6F,
  NVAPI_STEREO_INVALID_DEVICE_INTERFACE = 0xFFFFFF6E,
  NVAPI_STEREO_PARAMETER_OUT_OF_RANGE = 0xFFFFFF6D,
  NVAPI_STEREO_FRUSTUM_ADJUST_MODE_NOT_SUPPORTED = 0xFFFFFF6C,
  NVAPI_TOPO_NOT_POSSIBLE = 0xFFFFFF6B,
  NVAPI_MODE_CHANGE_FAILED = 0xFFFFFF6A,
  NVAPI_D3D11_LIBRARY_NOT_FOUND = 0xFFFFFF69,
  NVAPI_INVALID_ADDRESS = 0xFFFFFF68,
  NVAPI_STRING_TOO_SMALL = 0xFFFFFF67,
  NVAPI_MATCHING_DEVICE_NOT_FOUND = 0xFFFFFF66,
  NVAPI_DRIVER_RUNNING = 0xFFFFFF65,
  NVAPI_DRIVER_NOTRUNNING = 0xFFFFFF64,
  NVAPI_ERROR_DRIVER_RELOAD_REQUIRED = 0xFFFFFF63,
  NVAPI_SET_NOT_ALLOWED = 0xFFFFFF62,
  NVAPI_ADVANCED_DISPLAY_TOPOLOGY_REQUIRED = 0xFFFFFF61,
  NVAPI_SETTING_NOT_FOUND = 0xFFFFFF60,
  NVAPI_SETTING_SIZE_TOO_LARGE = 0xFFFFFF5F,
  NVAPI_TOO_MANY_SETTINGS_IN_PROFILE = 0xFFFFFF5E,
  NVAPI_PROFILE_NOT_FOUND = 0xFFFFFF5D,
  NVAPI_PROFILE_NAME_IN_USE = 0xFFFFFF5C,
  NVAPI_PROFILE_NAME_EMPTY = 0xFFFFFF5B,
  NVAPI_EXECUTABLE_NOT_FOUND = 0xFFFFFF5A,
  NVAPI_EXECUTABLE_ALREADY_IN_USE = 0xFFFFFF59,
  NVAPI_DATATYPE_MISMATCH = 0xFFFFFF58,
  NVAPI_PROFILE_REMOVED = 0xFFFFFF57,
  NVAPI_UNREGISTERED_RESOURCE = 0xFFFFFF56,
  NVAPI_ID_OUT_OF_RANGE = 0xFFFFFF55,
  NVAPI_DISPLAYCONFIG_VALIDATION_FAILED = 0xFFFFFF54,
  NVAPI_DPMST_CHANGED = 0xFFFFFF53,
  NVAPI_INSUFFICIENT_BUFFER = 0xFFFFFF52,
  NVAPI_ACCESS_DENIED = 0xFFFFFF51,
  NVAPI_MOSAIC_NOT_ACTIVE = 0xFFFFFF50,
  NVAPI_SHARE_RESOURCE_RELOCATED = 0xFFFFFF4F,
  NVAPI_REQUEST_USER_TO_DISABLE_DWM = 0xFFFFFF4E,
  NVAPI_D3D_DEVICE_LOST = 0xFFFFFF4D,
  NVAPI_INVALID_CONFIGURATION = 0xFFFFFF4C,
  NVAPI_STEREO_HANDSHAKE_NOT_DONE = 0xFFFFFF4B,
  NVAPI_EXECUTABLE_PATH_IS_AMBIGUOUS = 0xFFFFFF4A,
  NVAPI_DEFAULT_STEREO_PROFILE_IS_NOT_DEFINED = 0xFFFFFF49,
  NVAPI_DEFAULT_STEREO_PROFILE_DOES_NOT_EXIST = 0xFFFFFF48,
  NVAPI_CLUSTER_ALREADY_EXISTS = 0xFFFFFF47,
  NVAPI_DPMST_DISPLAY_ID_EXPECTED = 0xFFFFFF46,
  NVAPI_INVALID_DISPLAY_ID = 0xFFFFFF45,
  NVAPI_STREAM_IS_OUT_OF_SYNC = 0xFFFFFF44,
  NVAPI_INCOMPATIBLE_AUDIO_DRIVER = 0xFFFFFF43,
  NVAPI_VALUE_ALREADY_SET = 0xFFFFFF42,
  NVAPI_TIMEOUT = 0xFFFFFF41,
  NVAPI_GPU_WORKSTATION_FEATURE_INCOMPLETE = 0xFFFFFF40,
  NVAPI_STEREO_INIT_ACTIVATION_NOT_DONE = 0xFFFFFF3F,
};

/* 1189 */
enum _NVAPI_MODULE_ID
{
  NVAPI_MODULE_GPU = 0x0,
  NVAPI_MODULE_PEP = 0x1,
};

/* 1190 */
enum _NV_TARGET_VIEW_MODE
{
  NV_VIEW_MODE_STANDARD = 0x0,
  NV_VIEW_MODE_CLONE = 0x1,
  NV_VIEW_MODE_HSPAN = 0x2,
  NV_VIEW_MODE_VSPAN = 0x3,
  NV_VIEW_MODE_DUALVIEW = 0x4,
  NV_VIEW_MODE_MULTIVIEW = 0x5,
};

/* 1191 */
enum NV_SYSTEM_TYPE
{
  NV_SYSTEM_TYPE_UNKNOWN = 0x0,
  NV_SYSTEM_TYPE_LAPTOP = 0x1,
  NV_SYSTEM_TYPE_DESKTOP = 0x2,
};

/* 1192 */
enum _NV_GPU_OUTPUT_TYPE
{
  NVAPI_GPU_OUTPUT_UNKNOWN = 0x0,
  NVAPI_GPU_OUTPUT_CRT = 0x1,
  NVAPI_GPU_OUTPUT_DFP = 0x2,
  NVAPI_GPU_OUTPUT_TV = 0x3,
};

/* 1193 */
enum _NV_GPU_TYPE
{
  NV_SYSTEM_TYPE_GPU_UNKNOWN = 0x0,
  NV_SYSTEM_TYPE_IGPU = 0x1,
  NV_SYSTEM_TYPE_DGPU = 0x2,
};

/* 1194 */
enum _NV_GPU_BUS_TYPE
{
  NVAPI_GPU_BUS_TYPE_UNDEFINED = 0x0,
  NVAPI_GPU_BUS_TYPE_PCI = 0x1,
  NVAPI_GPU_BUS_TYPE_AGP = 0x2,
  NVAPI_GPU_BUS_TYPE_PCI_EXPRESS = 0x3,
  NVAPI_GPU_BUS_TYPE_FPCI = 0x4,
  NVAPI_GPU_BUS_TYPE_AXI = 0x5,
};

/* 1195 */
enum NV_GPU_RAM_TYPE
{
  NV_GPU_RAM_TYPE_UNKNOWN = 0x0,
  NV_GPU_RAM_TYPE_SDRAM = 0x1,
  NV_GPU_RAM_TYPE_DDR1 = 0x2,
  NV_GPU_RAM_TYPE_DDR2 = 0x3,
  NV_GPU_RAM_TYPE_GDDR2 = 0x4,
  NV_GPU_RAM_TYPE_GDDR3 = 0x5,
  NV_GPU_RAM_TYPE_GDDR4 = 0x6,
  NV_GPU_RAM_TYPE_DDR3 = 0x7,
  NV_GPU_RAM_TYPE_GDDR5 = 0x8,
  NV_GPU_RAM_TYPE_LPDDR2 = 0x9,
};

/* 1196 */
enum _NV_GPU_FB_LOCATION
{
  NV_GPU_FB_RAM_LOCATION_UNKNOWN = 0x0,
  NV_GPU_FB_RAM_LOCATION_GPU_DEDICATED = 0x1,
  NV_GPU_FB_RAM_LOCATION_SYS_SHARED = 0x2,
  NV_GPU_FB_RAM_LOCATION_SYS_DEDICATED = 0x3,
};

/* 1197 */
enum NV_COOLER_POLICY
{
  NVAPI_COOLER_POLICY_NONE = 0x0,
  NVAPI_COOLER_POLICY_MANUAL = 0x1,
  NVAPI_COOLER_POLICY_PERF = 0x2,
  NVAPI_COOLER_POLICY_TEMPERATURE_DISCRETE = 0x4,
  NVAPI_COOLER_POLICY_TEMPERATURE_CONTINUOUS = 0x8,
  NVAPI_COOLER_POLICY_TEMPERATURE_CONTINUOUS_SW = 0x10,
  NVAPI_COOLER_POLICY_DEFAULT = 0x20,
};

/* 1198 */
enum _NV_GPU_PERF_PSTATE_ID
{
  NVAPI_GPU_PERF_PSTATE_P0 = 0x0,
  NVAPI_GPU_PERF_PSTATE_P1 = 0x1,
  NVAPI_GPU_PERF_PSTATE_P2 = 0x2,
  NVAPI_GPU_PERF_PSTATE_P3 = 0x3,
  NVAPI_GPU_PERF_PSTATE_P4 = 0x4,
  NVAPI_GPU_PERF_PSTATE_P5 = 0x5,
  NVAPI_GPU_PERF_PSTATE_P6 = 0x6,
  NVAPI_GPU_PERF_PSTATE_P7 = 0x7,
  NVAPI_GPU_PERF_PSTATE_P8 = 0x8,
  NVAPI_GPU_PERF_PSTATE_P9 = 0x9,
  NVAPI_GPU_PERF_PSTATE_P10 = 0xA,
  NVAPI_GPU_PERF_PSTATE_P11 = 0xB,
  NVAPI_GPU_PERF_PSTATE_P12 = 0xC,
  NVAPI_GPU_PERF_PSTATE_P13 = 0xD,
  NVAPI_GPU_PERF_PSTATE_P14 = 0xE,
  NVAPI_GPU_PERF_PSTATE_P15 = 0xF,
  NVAPI_GPU_PERF_PSTATE_UNDEFINED = 0x10,
  NVAPI_GPU_PERF_PSTATE_ALL = 0x11,
};

/* 1199 */
enum _NV_PERF_PSTATE_CLIENT_LIMIT_ID
{
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_HARD = 0x1,
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_SOFT = 0x2,
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_BOTH = 0x3,
};

/* 1200 */
enum _NVAPI_DITHER_TYPE
{
  NVAPI_DITHER_TYPE_DEFAULT = 0x0,
  NVAPI_DITHER_TYPE_ENABLE = 0x1,
  NVAPI_DITHER_TYPE_DISABLE = 0x2,
};

/* 1201 */
enum _NVAPI_DITHER_BITS
{
  NVAPI_DITHER_BITS_6BITS = 0x0,
  NVAPI_DITHER_BITS_8BITS = 0x1,
};

/* 1202 */
enum _NVAPI_DITHER_MODE
{
  NVAPI_DITHER_MODE_DYNAMIC_ERR_ACC = 0x0,
  NVAPI_DITHER_MODE_STATIC_ERR_ACC = 0x1,
  NVAPI_DITHER_MODE_DYNAMIC_2X2 = 0x2,
  NVAPI_DITHER_MODE_STATIC_2X2 = 0x3,
};

/* 1203 */
enum NV_GPS_PS_STATUS
{
  NV_GPS_PS_DISABLED = 0x0,
  NV_GPS_PS_ENABLED = 0x1,
  NV_GPS_PS_NOT_SUPPORTED = 0x2,
};

/* 1204 */
enum NV_EVENT_LEVEL
{
  UNKNOWN_LEVEL = 0x0,
  NORMAL_LEVEL = 0x1,
  WARNING_LEVEL = 0x2,
  CRITICAL_LEVEL = 0x3,
};

/* 1205 */
enum _NV_PWR_SOURCE_INFO
{
  NVAPI_PWR_SOURCE_AC = 0x1,
  NVAPI_PWR_SOURCE_BATT = 0x2,
};

/* 1206 */
enum _NV_SELECT_INFO
{
  NVAPI_INDEX_PWR_MZR_HARD = 0x1,
  NVAPI_INDEX_PWR_MZR_SOFT = 0x2,
  NVAPI_INDEX_ADC = 0x3,
};

/* 1207 */
enum _NV_LEVEL_INFO
{
  NVAPI_PWR_MZR_HARD_LIMIT_MAX = 0x1,
  NVAPI_PWR_MZR_HARD_LIMIT_BAL = 0x2,
  NVAPI_PWR_MZR_MAX_BATT = 0x3,
  NVAPI_PWR_MZR_SOFT_LIMIT_MAX = 0x4,
  NVAPI_PWR_MZR_SOFT_LIMIT_BAL = 0x5,
  NVAPI_ADC_OFF = 0x6,
  NVAPI_ADC_ON = 0x7,
};

/* 1208 */
enum _NV_INFOFRAME_TYPE
{
  NV_INFOFRAME_TYPE_AVI = 0x2,
  NV_INFOFRAME_TYPE_SPD = 0x3,
  NV_INFOFRAME_TYPE_AUDIO = 0x4,
  NV_INFOFRAME_TYPE_MS = 0x5,
};

/* 1209 */
enum NV_TV_BORDER_COLOR
{
  NV_TV_BORDER_COLOR_BLACK = 0x0,
  NV_TV_BORDER_COLOR_GREY = 0x1,
};

/* 1210 */
enum _NV_TIMING_OVERRIDE
{
  NV_TIMING_OVERRIDE_CURRENT = 0x0,
  NV_TIMING_OVERRIDE_AUTO = 0x1,
  NV_TIMING_OVERRIDE_EDID = 0x2,
  NV_TIMING_OVERRIDE_DMT = 0x3,
  NV_TIMING_OVERRIDE_DMT_RB = 0x4,
  NV_TIMING_OVERRIDE_CVT = 0x5,
  NV_TIMING_OVERRIDE_CVT_RB = 0x6,
  NV_TIMING_OVERRIDE_GTF = 0x7,
  NV_TIMING_OVERRIDE_EIA861 = 0x8,
  NV_TIMING_OVERRIDE_ANALOG_TV = 0x9,
  NV_TIMING_OVERRIDE_CUST = 0xA,
  NV_TIMING_OVERRIDE_NV_PREDEFINED = 0xB,
  NV_TIMING_OVERRIDE_NV_PSF = 0xB,
  NV_TIMING_OVERRIDE_NV_ASPR = 0xC,
  NV_TIMING_OVERRIDE_SDI = 0xD,
  NV_TIMING_OVRRIDE_MAX = 0xE,
};

/* 1211 */
enum _NV_HYBRID_MODE
{
  NV_HYBRID_MODE_IGPU = 0x0,
  NV_HYBRID_MODE_DGPU = 0x1,
  NV_HYBRID_MODE_MULTI_ADAPTER = 0x2,
  NV_HYBRID_MODE_INVALID = 0x3,
  NV_HYBRID_MODE_DGPU_WARMUP = 0x4,
  NV_HYBRID_MODE_DGPU_DEEP_IDLE = 0x5,
  NV_HYBRID_MODE_INSTALL = 0x6,
  NV_HYBRID_MODE_ADAPTIVE = 0x7,
};

/* 1212 */
enum NV_COPROC_STATE
{
  NV_COPROC_STATE_DGPU_GOLD = 0x0,
  NV_COPROC_STATE_DGPU_ON = 0x1,
};

/* 1213 */
enum NV_MOSAIC_TOPO_TYPE
{
  NV_MOSAIC_TOPO_TYPE_ALL = 0x0,
  NV_MOSAIC_TOPO_TYPE_BASIC = 0x1,
  NV_MOSAIC_TOPO_TYPE_PASSIVE_STEREO = 0x2,
  NV_MOSAIC_TOPO_TYPE_SCALED_CLONE = 0x3,
  NV_MOSAIC_TOPO_TYPE_PASSIVE_STEREO_SCALED_CLONE = 0x4,
  NV_MOSAIC_TOPO_TYPE_MAX = 0x5,
};

/* 1214 */
enum _NVAPI_D3D_SETRESOURCEHINT_CATEGORY
{
  NVAPI_D3D_SRH_CATEGORY_SLI = 0x1,
};

/* 1215 */
enum _NVAPI_D3D_QUERY_TYPE
{
  NVAPI_D3D_QUERY_TYPE_RESERVED0 = 0x0,
  NVAPI_D3D_QUERY_TYPE_RESERVED1 = 0x1,
  NVAPI_D3D_QUERY_TYPE_RESERVED2 = 0x2,
  NVAPI_D3D_QUERY_TYPE_RESERVED3 = 0x3,
  NVAPI_D3D_QUERY_TYPE_ROP_TIMESTAMP = 0x4,
};

/* 1216 */
enum _NV_PATH_DATATYPE
{
  NV_BYTE = 0x0,
  NV_UNSIGNED_BYTE = 0x1,
  NV_SHORT = 0x2,
  NV_UNSIGNED_SHORT = 0x3,
  NV_INT = 0x4,
  NV_UNSIGNED_INT = 0x5,
  NV_FLOAT = 0x6,
  NV_FIXED = 0x7,
};

/* 1217 */
enum _NV_PATH_PARAMTYPE
{
  PATH_QUALITY_NV = 0x8ED8,
  FILL_RULE_NV = 0x8ED9,
  STROKE_CAP0_STYLE_NV = 0x8EE0,
  STROKE_CAP1_STYLE_NV = 0x8EE1,
  STROKE_CAP2_STYLE_NV = 0x8EE2,
  STROKE_CAP3_STYLE_NV = 0x8EE3,
  STROKE_JOIN_STYLE_NV = 0x8EE8,
  STROKE_MITER_LIMIT_NV = 0x8EE9,
};

/* 1218 */
enum _NV_PATH_TARGETTYPE
{
  MATRIX_PATH_TO_CLIP_NV = 0x8F04,
  MATRIX_STROKE_TO_PATH_NV = 0x8F05,
  MATRIX_PATH_COORD0_NV = 0x8F08,
  MATRIX_PATH_COORD1_NV = 0x8F09,
  MATRIX_PATH_COORD2_NV = 0x8F0A,
  MATRIX_PATH_COORD3_NV = 0x8F0B,
};

/* 1219 */
enum _NV_PATH_MODE
{
  FILL_PATH_NV = 0x8F18,
  STROKE_PATH_NV = 0x8F19,
};

/* 1220 */
enum _NV_GAMUT_FORMAT
{
  NV_GAMUT_FORMAT_VERTICES = 0x0,
  NV_GAMUT_FORMAT_RANGE = 0x1,
};

/* 1221 */
enum _NVAPI_SETRESOURCEHINT_CATEGORY
{
  NvApiHints_Sli = 0x1,
};

/* 1222 */
enum _NV_SLI_MODE
{
  NV_SLI_RENDERING_MODE_AUTOSELECT = 0x0,
  NV_SLI_RENDERING_MODE_AFR = 0x1,
  NV_SLI_RENDERING_MODE_SFR = 0x2,
  NV_SLI_RENDERING_MODE_SINGLE = 0x3,
  NV_SLI_RENDERING_MODE_AFR_OF_SFR = 0x4,
};

/* 1223 */
enum NVFBC_BUFFER_FORMAT
{
  NVFBC_FORMAT_ARGB = 0x0,
  NVFBC_FORMAT_RGB = 0x1,
  NVFBC_FORMAT_YUV_420 = 0x2,
  NVFBC_FORMAT_RGB_PLANAR = 0x3,
  NVFBC_FORMAT_RGB_XOR = 0x4,
  NVFBC_FORMAT_YUV_444 = 0x5,
  NVFBC_FORMAT_NOT_SUPPORTED = 0x6,
};

/* 1224 */
enum NVAPI_DEVICE_FEATURE_LEVEL
{
  NVAPI_DEVICE_FEATURE_LEVEL_NULL = 0xFFFFFFFF,
  NVAPI_DEVICE_FEATURE_LEVEL_10_0 = 0x0,
  NVAPI_DEVICE_FEATURE_LEVEL_10_0_PLUS = 0x1,
  NVAPI_DEVICE_FEATURE_LEVEL_10_1 = 0x2,
  NVAPI_DEVICE_FEATURE_LEVEL_11_0 = 0x3,
};

/* 1225 */
enum NVAPI_VSYNC_MODE
{
  NVAPI_VSYNC_DEFAULT = 0x0,
  NVAPI_VSYNC_OFF = 0x1,
  NVAPI_VSYNC_ON = 0x2,
  NVAPI_VSYNC_ADAPTIVE = 0x3,
  NVAPI_VSYNC_ADAPTIVE_HALF_REFRESH_RATE = 0x4,
};

/* 1226 */
enum _NVVIOOWNERTYPE
{
  NVVIOOWNERTYPE_NONE = 0x0,
  NVVIOOWNERTYPE_APPLICATION = 0x1,
  NVVIOOWNERTYPE_DESKTOP = 0x2,
};

/* 1227 */
enum _NV_StereoRegistryProfileType
{
  NVAPI_STEREO_DEFAULT_REGISTRY_PROFILE = 0x0,
  NVAPI_STEREO_DX9_REGISTRY_PROFILE = 0x1,
  NVAPI_STEREO_DX10_REGISTRY_PROFILE = 0x2,
};

/* 1228 */
enum _NV_StereoRegistryID
{
  NVAPI_CONVERGENCE_ID = 0x0,
  NVAPI_FRUSTUM_ADJUST_MODE_ID = 0x1,
};

/* 1229 */
enum _NV_FrustumAdjustMode
{
  NVAPI_NO_FRUSTUM_ADJUST = 0x0,
  NVAPI_FRUSTUM_STRETCH = 0x1,
  NVAPI_FRUSTUM_CLEAR_EDGES = 0x2,
};

/* 1230 */
enum _NVAPI_STEREO_INIT_ACTIVATION_FLAGS
{
  NVAPI_STEREO_INIT_ACTIVATION_IMMEDIATE = 0x0,
  NVAPI_STEREO_INIT_ACTIVATION_DELAYED = 0x1,
};

/* 1231 */
enum _NV_StereoActiveEye
{
  NVAPI_STEREO_EYE_RIGHT = 0x1,
  NVAPI_STEREO_EYE_LEFT = 0x2,
  NVAPI_STEREO_EYE_MONO = 0x3,
};

/* 1232 */
enum _NV_StereoDriverMode
{
  NVAPI_STEREO_DRIVER_MODE_AUTOMATIC = 0x0,
  NVAPI_STEREO_DRIVER_MODE_DIRECT = 0x2,
};

/* 1233 */
enum _NVAPI_STEREO_SURFACECREATEMODE
{
  NVAPI_STEREO_SURFACECREATEMODE_AUTO = 0x0,
  NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO = 0x1,
  NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO = 0x2,
};

/* 1234 */
enum _NV_StereoSwapChainMode
{
  NVAPI_STEREO_SWAPCHAIN_DEFAULT = 0x0,
  NVAPI_STEREO_SWAPCHAIN_STEREO = 0x1,
  NVAPI_STEREO_SWAPCHAIN_MONO = 0x2,
};

/* 1235 */
enum _NVAPI_VENTURA_STATE
{
  NVAPI_VENTURA_STATE_UNSUPPORTED = 0x0,
  NVAPI_VENTURA_STATE_DISABLED = 0x1,
  NVAPI_VENTURA_STATE_ENABLED = 0x2,
};

/* 1236 */
enum _NVAPI_VENTURA_DEVICE
{
  NVAPI_VENTURA_DEVICE_SYSTEM = 0x0,
  NVAPI_VENTURA_DEVICE_CPU_0 = 0x1,
  NVAPI_VENTURA_DEVICE_GPU_0 = 0x2,
};

/* 1237 */
enum _NV_SCALING
{
  NV_SCALING_DEFAULT = 0x0,
  NV_SCALING_GPU_SCALING_TO_CLOSEST = 0x1,
  NV_SCALING_GPU_SCALING_TO_NATIVE = 0x2,
  NV_SCALING_GPU_SCANOUT_TO_NATIVE = 0x3,
  NV_SCALING_GPU_SCALING_TO_ASPECT_SCANOUT_TO_NATIVE = 0x5,
  NV_SCALING_GPU_SCALING_TO_ASPECT_SCANOUT_TO_CLOSEST = 0x6,
  NV_SCALING_GPU_SCANOUT_TO_CLOSEST = 0x7,
  NV_SCALING_MONITOR_SCALING = 0x1,
  NV_SCALING_ADAPTER_SCALING = 0x2,
  NV_SCALING_CENTERED = 0x3,
  NV_SCALING_ASPECT_SCALING = 0x5,
  NV_SCALING_CUSTOMIZED = 0xFF,
};

/* 1238 */
enum NV_MOSAIC_TOPO
{
  NV_MOSAIC_TOPO_NONE = 0x0,
  NV_MOSAIC_TOPO_BEGIN_BASIC = 0x1,
  NV_MOSAIC_TOPO_1x2_BASIC = 0x1,
  NV_MOSAIC_TOPO_2x1_BASIC = 0x2,
  NV_MOSAIC_TOPO_1x3_BASIC = 0x3,
  NV_MOSAIC_TOPO_3x1_BASIC = 0x4,
  NV_MOSAIC_TOPO_1x4_BASIC = 0x5,
  NV_MOSAIC_TOPO_4x1_BASIC = 0x6,
  NV_MOSAIC_TOPO_2x2_BASIC = 0x7,
  NV_MOSAIC_TOPO_2x3_BASIC = 0x8,
  NV_MOSAIC_TOPO_2x4_BASIC = 0x9,
  NV_MOSAIC_TOPO_3x2_BASIC = 0xA,
  NV_MOSAIC_TOPO_4x2_BASIC = 0xB,
  NV_MOSAIC_TOPO_1x5_BASIC = 0xC,
  NV_MOSAIC_TOPO_1x6_BASIC = 0xD,
  NV_MOSAIC_TOPO_7x1_BASIC = 0xE,
  NV_MOSAIC_TOPO_END_BASIC = 0x17,
  NV_MOSAIC_TOPO_BEGIN_PASSIVE_STEREO = 0x18,
  NV_MOSAIC_TOPO_1x2_PASSIVE_STEREO = 0x18,
  NV_MOSAIC_TOPO_2x1_PASSIVE_STEREO = 0x19,
  NV_MOSAIC_TOPO_1x3_PASSIVE_STEREO = 0x1A,
  NV_MOSAIC_TOPO_3x1_PASSIVE_STEREO = 0x1B,
  NV_MOSAIC_TOPO_1x4_PASSIVE_STEREO = 0x1C,
  NV_MOSAIC_TOPO_4x1_PASSIVE_STEREO = 0x1D,
  NV_MOSAIC_TOPO_2x2_PASSIVE_STEREO = 0x1E,
  NV_MOSAIC_TOPO_END_PASSIVE_STEREO = 0x22,
  NV_MOSAIC_TOPO_MAX = 0x23,
};

/* 1239 */
enum _NVVIOBITSPERCOMPONENT
{
  NVVIOBITSPERCOMPONENT_UNKNOWN = 0x0,
  NVVIOBITSPERCOMPONENT_8 = 0x1,
  NVVIOBITSPERCOMPONENT_10 = 0x2,
  NVVIOBITSPERCOMPONENT_12 = 0x3,
};

/* 1240 */
enum _NVVIOLINKID
{
  NVVIOLINKID_UNKNOWN = 0x0,
  NVVIOLINKID_A = 0x1,
  NVVIOLINKID_B = 0x2,
  NVVIOLINKID_C = 0x3,
  NVVIOLINKID_D = 0x4,
};

/* 1241 */
enum _NV_CODEC
{
  NV_CODEC_TYPE_NONE = 0x0,
  NV_CODEC_TYPE_MPEG2 = 0x1,
  NV_CODEC_TYPE_H264 = 0x2,
  NV_CODEC_TYPE_VC1 = 0x3,
  NV_CODEC_TYPE_MVC = 0x4,
};

/* 1242 */
enum _NVVIOCOMPONENTSAMPLING
{
  NVVIOCOMPONENTSAMPLING_UNKNOWN = 0x0,
  NVVIOCOMPONENTSAMPLING_4444 = 0x1,
  NVVIOCOMPONENTSAMPLING_4224 = 0x2,
  NVVIOCOMPONENTSAMPLING_444 = 0x3,
  NVVIOCOMPONENTSAMPLING_422 = 0x4,
};

/* 1243 */
enum _NVVIOPCILINKWIDTH
{
  NVVIOPCILINKWIDTH_UNKNOWN = 0x0,
  NVVIOPCILINKWIDTH_x1 = 0x1,
  NVVIOPCILINKWIDTH_x2 = 0x2,
  NVVIOPCILINKWIDTH_x4 = 0x4,
  NVVIOPCILINKWIDTH_x8 = 0x8,
  NVVIOPCILINKWIDTH_x16 = 0x10,
};

/* 1244 */
enum _NVVIOPCILINKRATE
{
  NVVIOPCILINKRATE_UNKNOWN = 0x0,
  NVVIOPCILINKRATE_GEN1 = 0x1,
  NVVIOPCILINKRATE_GEN2 = 0x2,
  NVVIOPCILINKRATE_GEN3 = 0x3,
};

/* 1245 */
enum _NVVIOCOLORSPACE
{
  NVVIOCOLORSPACE_UNKNOWN = 0x0,
  NVVIOCOLORSPACE_YCBCR = 0x1,
  NVVIOCOLORSPACE_YCBCRA = 0x2,
  NVVIOCOLORSPACE_YCBCRD = 0x3,
  NVVIOCOLORSPACE_GBR = 0x4,
  NVVIOCOLORSPACE_GBRA = 0x5,
  NVVIOCOLORSPACE_GBRD = 0x6,
};

/* 1246 */
enum _NVVIOCAPTURESTATUS
{
  NVVIOSTATUS_STOPPED = 0x0,
  NVVIOSTATUS_RUNNING = 0x1,
  NVVIOSTATUS_ERROR = 0x2,
};

/* 1247 */
enum _NVVIOSIGNALFORMAT
{
  NVVIOSIGNALFORMAT_NONE = 0x0,
  NVVIOSIGNALFORMAT_487I_59_94_SMPTE259_NTSC = 0x1,
  NVVIOSIGNALFORMAT_576I_50_00_SMPTE259_PAL = 0x2,
  NVVIOSIGNALFORMAT_1035I_60_00_SMPTE260 = 0x3,
  NVVIOSIGNALFORMAT_1035I_59_94_SMPTE260 = 0x4,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE295 = 0x5,
  NVVIOSIGNALFORMAT_1080I_60_00_SMPTE274 = 0x6,
  NVVIOSIGNALFORMAT_1080I_59_94_SMPTE274 = 0x7,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE274 = 0x8,
  NVVIOSIGNALFORMAT_1080P_30_00_SMPTE274 = 0x9,
  NVVIOSIGNALFORMAT_1080P_29_97_SMPTE274 = 0xA,
  NVVIOSIGNALFORMAT_1080P_25_00_SMPTE274 = 0xB,
  NVVIOSIGNALFORMAT_1080P_24_00_SMPTE274 = 0xC,
  NVVIOSIGNALFORMAT_1080P_23_976_SMPTE274 = 0xD,
  NVVIOSIGNALFORMAT_720P_60_00_SMPTE296 = 0xE,
  NVVIOSIGNALFORMAT_720P_59_94_SMPTE296 = 0xF,
  NVVIOSIGNALFORMAT_720P_50_00_SMPTE296 = 0x10,
  NVVIOSIGNALFORMAT_1080I_48_00_SMPTE274 = 0x11,
  NVVIOSIGNALFORMAT_1080I_47_96_SMPTE274 = 0x12,
  NVVIOSIGNALFORMAT_720P_30_00_SMPTE296 = 0x13,
  NVVIOSIGNALFORMAT_720P_29_97_SMPTE296 = 0x14,
  NVVIOSIGNALFORMAT_720P_25_00_SMPTE296 = 0x15,
  NVVIOSIGNALFORMAT_720P_24_00_SMPTE296 = 0x16,
  NVVIOSIGNALFORMAT_720P_23_98_SMPTE296 = 0x17,
  NVVIOSIGNALFORMAT_2048P_30_00_SMPTE372 = 0x18,
  NVVIOSIGNALFORMAT_2048P_29_97_SMPTE372 = 0x19,
  NVVIOSIGNALFORMAT_2048I_60_00_SMPTE372 = 0x1A,
  NVVIOSIGNALFORMAT_2048I_59_94_SMPTE372 = 0x1B,
  NVVIOSIGNALFORMAT_2048P_25_00_SMPTE372 = 0x1C,
  NVVIOSIGNALFORMAT_2048I_50_00_SMPTE372 = 0x1D,
  NVVIOSIGNALFORMAT_2048P_24_00_SMPTE372 = 0x1E,
  NVVIOSIGNALFORMAT_2048P_23_98_SMPTE372 = 0x1F,
  NVVIOSIGNALFORMAT_2048I_48_00_SMPTE372 = 0x20,
  NVVIOSIGNALFORMAT_2048I_47_96_SMPTE372 = 0x21,
  NVVIOSIGNALFORMAT_1080PSF_25_00_SMPTE274 = 0x22,
  NVVIOSIGNALFORMAT_1080PSF_29_97_SMPTE274 = 0x23,
  NVVIOSIGNALFORMAT_1080PSF_30_00_SMPTE274 = 0x24,
  NVVIOSIGNALFORMAT_1080PSF_24_00_SMPTE274 = 0x25,
  NVVIOSIGNALFORMAT_1080PSF_23_98_SMPTE274 = 0x26,
  NVVIOSIGNALFORMAT_1080P_50_00_SMPTE274_3G_LEVEL_A = 0x27,
  NVVIOSIGNALFORMAT_1080P_59_94_SMPTE274_3G_LEVEL_A = 0x28,
  NVVIOSIGNALFORMAT_1080P_60_00_SMPTE274_3G_LEVEL_A = 0x29,
  NVVIOSIGNALFORMAT_1080P_60_00_SMPTE274_3G_LEVEL_B = 0x2A,
  NVVIOSIGNALFORMAT_1080I_60_00_SMPTE274_3G_LEVEL_B = 0x2B,
  NVVIOSIGNALFORMAT_2048I_60_00_SMPTE372_3G_LEVEL_B = 0x2C,
  NVVIOSIGNALFORMAT_1080P_50_00_SMPTE274_3G_LEVEL_B = 0x2D,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE274_3G_LEVEL_B = 0x2E,
  NVVIOSIGNALFORMAT_2048I_50_00_SMPTE372_3G_LEVEL_B = 0x2F,
  NVVIOSIGNALFORMAT_1080P_30_00_SMPTE274_3G_LEVEL_B = 0x30,
  NVVIOSIGNALFORMAT_2048P_30_00_SMPTE372_3G_LEVEL_B = 0x31,
  NVVIOSIGNALFORMAT_1080P_25_00_SMPTE274_3G_LEVEL_B = 0x32,
  NVVIOSIGNALFORMAT_2048P_25_00_SMPTE372_3G_LEVEL_B = 0x33,
  NVVIOSIGNALFORMAT_1080P_24_00_SMPTE274_3G_LEVEL_B = 0x34,
  NVVIOSIGNALFORMAT_2048P_24_00_SMPTE372_3G_LEVEL_B = 0x35,
  NVVIOSIGNALFORMAT_1080I_48_00_SMPTE274_3G_LEVEL_B = 0x36,
  NVVIOSIGNALFORMAT_2048I_48_00_SMPTE372_3G_LEVEL_B = 0x37,
  NVVIOSIGNALFORMAT_1080P_59_94_SMPTE274_3G_LEVEL_B = 0x38,
  NVVIOSIGNALFORMAT_1080I_59_94_SMPTE274_3G_LEVEL_B = 0x39,
  NVVIOSIGNALFORMAT_2048I_59_94_SMPTE372_3G_LEVEL_B = 0x3A,
  NVVIOSIGNALFORMAT_1080P_29_97_SMPTE274_3G_LEVEL_B = 0x3B,
  NVVIOSIGNALFORMAT_2048P_29_97_SMPTE372_3G_LEVEL_B = 0x3C,
  NVVIOSIGNALFORMAT_1080P_23_98_SMPTE274_3G_LEVEL_B = 0x3D,
  NVVIOSIGNALFORMAT_2048P_23_98_SMPTE372_3G_LEVEL_B = 0x3E,
  NVVIOSIGNALFORMAT_1080I_47_96_SMPTE274_3G_LEVEL_B = 0x3F,
  NVVIOSIGNALFORMAT_2048I_47_96_SMPTE372_3G_LEVEL_B = 0x40,
  NVVIOSIGNALFORMAT_END = 0x41,
};

/* 1248 */
enum _NV_GPU_ILLUMINATION_ATTRIB
{
  NV_GPU_IA_LOGO_BRIGHTNESS = 0x0,
  NV_GPU_IA_SLI_BRIGHTNESS = 0x1,
};

/* 1249 */
enum _NVVIOSYNCSTATUS
{
  NVVIOSYNCSTATUS_OFF = 0x0,
  NVVIOSYNCSTATUS_ERROR = 0x1,
  NVVIOSYNCSTATUS_SYNCLOSS = 0x2,
  NVVIOSYNCSTATUS_COMPOSITE = 0x3,
  NVVIOSYNCSTATUS_SDI_SD = 0x4,
  NVVIOSYNCSTATUS_SDI_HD = 0x5,
};

/* 1250 */
enum _NVVIOCOMPSYNCTYPE
{
  NVVIOCOMPSYNCTYPE_AUTO = 0x0,
  NVVIOCOMPSYNCTYPE_BILEVEL = 0x1,
  NVVIOCOMPSYNCTYPE_TRILEVEL = 0x2,
};

/* 1251 */
enum NV_THERMAL_CONTROLLER
{
  NVAPI_THERMAL_CONTROLLER_NONE = 0x0,
  NVAPI_THERMAL_CONTROLLER_GPU_INTERNAL = 0x1,
  NVAPI_THERMAL_CONTROLLER_ADM1032 = 0x2,
  NVAPI_THERMAL_CONTROLLER_MAX6649 = 0x3,
  NVAPI_THERMAL_CONTROLLER_MAX1617 = 0x4,
  NVAPI_THERMAL_CONTROLLER_LM99 = 0x5,
  NVAPI_THERMAL_CONTROLLER_LM89 = 0x6,
  NVAPI_THERMAL_CONTROLLER_LM64 = 0x7,
  NVAPI_THERMAL_CONTROLLER_ADT7473 = 0x8,
  NVAPI_THERMAL_CONTROLLER_SBMAX6649 = 0x9,
  NVAPI_THERMAL_CONTROLLER_VBIOSEVT = 0xA,
  NVAPI_THERMAL_CONTROLLER_OS = 0xB,
  NVAPI_THERMAL_CONTROLLER_UNKNOWN = 0xFFFFFFFF,
};

/* 1252 */
enum NV_THERMAL_TARGET
{
  NVAPI_THERMAL_TARGET_NONE = 0x0,
  NVAPI_THERMAL_TARGET_GPU = 0x1,
  NVAPI_THERMAL_TARGET_MEMORY = 0x2,
  NVAPI_THERMAL_TARGET_POWER_SUPPLY = 0x4,
  NVAPI_THERMAL_TARGET_BOARD = 0x8,
  NVAPI_THERMAL_TARGET_VCD_BOARD = 0x9,
  NVAPI_THERMAL_TARGET_VCD_INLET = 0xA,
  NVAPI_THERMAL_TARGET_VCD_OUTLET = 0xB,
  NVAPI_THERMAL_TARGET_ALL = 0xF,
  NVAPI_THERMAL_TARGET_UNKNOWN = 0xFFFFFFFF,
};

/* 1253 */
enum _NVVIOCONFIGTYPE
{
  NVVIOCONFIGTYPE_IN = 0x0,
  NVVIOCONFIGTYPE_OUT = 0x1,
};

/* 1254 */
enum _NVVIOSYNCSOURCE
{
  NVVIOSYNCSOURCE_SDISYNC = 0x0,
  NVVIOSYNCSOURCE_COMPSYNC = 0x1,
};

/* 1255 */
enum _NV_STANDARD_COLORSPACE
{
  NV_STANDARD_COLORSPACE_DISABLED = 0x0,
  NV_STANDARD_COLORSPACE_AUTOSELECT = 0x1,
  NV_STANDARD_COLORSPACE_sRGB = 0x2,
  NV_STANDARD_COLORSPACE_MONITOR_RGB = 0x3,
  NV_STANDARD_COLORSPACE_ADOBE_RGB = 0x4,
  NV_STANDARD_COLORSPACE_ADOBE_WIDE_GAMUT = 0x5,
  NV_STANDARD_COLORSPACE_APPLE = 0x6,
  NV_STANDARD_COLORSPACE_NTSC = 0x7,
  NV_STANDARD_COLORSPACE_HDTV = 0x8,
  NV_STANDARD_COLORSPACE_PAL = 0x9,
  NV_STANDARD_COLORSPACE_DCIP3 = 0xA,
  NV_STANDARD_COLORSPACE_MAX = 0xB,
};

/* 1256 */
enum _NVAPI_D3D9_DMA_TRANSFER_TYPE
{
  NVAPI_D3D9_DMA_TRANSFER_TYPE_PROGRESSIVE = 0x0,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_INTERLACED = 0x1,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_BOB_TOP_FIELD = 0x2,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_BOB_BTM_FIELD = 0x3,
};

/* 1257 */
enum _NV_DISPLAYCONFIG_SPANNING_ORIENTATION
{
  NV_DISPLAYCONFIG_SPAN_NONE = 0x0,
  NV_DISPLAYCONFIG_SPAN_HORIZONTAL = 0x1,
  NV_DISPLAYCONFIG_SPAN_VERTICAL = 0x2,
};

/* 1258 */
enum NV_COOLER_TARGET
{
  NVAPI_COOLER_TARGET_NONE = 0x0,
  NVAPI_COOLER_TARGET_GPU = 0x1,
  NVAPI_COOLER_TARGET_MEMORY = 0x2,
  NVAPI_COOLER_TARGET_POWER_SUPPLY = 0x4,
  NVAPI_COOLER_TARGET_ALL = 0x7,
  NVAPI_COOLER_TARGET_VCD_COOLER1 = 0x8,
  NVAPI_COOLER_TARGET_VCD_COOLER2 = 0x9,
  NVAPI_COOLER_TARGET_VCD_COOLER3 = 0xA,
  NVAPI_COOLER_TARGET_VCD_COOLER4 = 0xB,
  NVAPI_COOLER_TARGET_VCD_COOLER5 = 0xC,
  NVAPI_COOLER_TARGET_VCD_COOLER6 = 0xD,
  NVAPI_COOLER_TARGET_VCD_COOLER7 = 0xE,
  NVAPI_COOLER_TARGET_VCD_COOLER8 = 0xF,
  NVAPI_COOLER_TARGET_VCD_COOLER9 = 0x10,
  NVAPI_COOLER_TARGET_VCD_COOLER10 = 0x11,
  NVAPI_COOLER_TARGET_VCD_COOLER11 = 0x12,
  NVAPI_COOLER_TARGET_VCD_COOLER12 = 0x13,
  NVAPI_COOLER_TARGET_VCD_COOLER13 = 0x14,
  NVAPI_COOLER_TARGET_VCD_COOLER14 = 0x15,
  NVAPI_COOLER_TARGET_VCD_COOLER15 = 0x16,
  NVAPI_COOLER_TARGET_VCD_COOLER16 = 0x17,
  NVAPI_COOLER_TARGET_VCD_COOLER17 = 0x18,
  NVAPI_COOLER_TARGET_VCD_COOLER18 = 0x19,
  NVAPI_COOLER_TARGET_VCD_COOLER19 = 0x1A,
  NVAPI_COOLER_TARGET_VCD_COOLER20 = 0x1B,
};

/* 1259 */
enum _NVVIOINPUTOUTPUTSTATUS
{
  NVINPUTOUTPUTSTATUS_OFF = 0x0,
  NVINPUTOUTPUTSTATUS_ERROR = 0x1,
  NVINPUTOUTPUTSTATUS_SDI_SD = 0x2,
  NVINPUTOUTPUTSTATUS_SDI_HD = 0x3,
};

/* 1260 */
enum _NVAPI_VIDEO_ENGINES
{
  NVAPI_VE_UNKNOWN = 0x0,
  NVAPI_VE_PixelShader = 0x1,
  NVAPI_VE_MPEG2Decoder = 0x2,
  NVAPI_VE_VideoProcessor1 = 0x3,
  NVAPI_VE_VideoProcessor2 = 0x4,
  NVAPI_VE_MSDEC = 0x5,
  NVAPI_VE_VIC = 0x6,
};

/* 1261 */
enum _NVAPI_VIDEO_FEATURE_GET_FLAG
{
  NVAPI_VF_GET_COUNT = 0x0,
  NVAPI_VF_GET_DETAILS = 0x1,
};

/* 1262 */
enum NV_GPS_SENSOR_INDEX
{
  NV_GPS_SENSOR_INDEX_TGPU_LIMIT = 0x9,
  NV_GPS_SENSOR_INDEX_PDTS_LIMIT = 0xA,
  NV_GPS_SENSOR_INDEX_SFAN_LIMIT = 0xB,
  NV_GPS_SENSOR_INDEX_SKNT_LIMIT = 0xC,
  NV_GPS_SENSOR_INDEX_CPUE_LIMIT = 0xD,
  NV_GPS_SENSOR_INDEX_TMP1_LIMIT = 0xE,
  NV_GPS_SENSOR_INDEX_TMP2_LIMIT = 0xF,
};

/* 1263 */
enum _NVAPI_D3D9_QUERY_COMMAND
{
  NVAPI_D3D9_QUERY_NULL_CMD = 0x0,
  NVAPI_D3D9_QUERY_STEREO_INFO_CMD = 0x1,
  NVAPI_D3D9_QUERY_COLOR_INFO_CMD = 0x2,
};

/* 1264 */
enum _NVVIOINTERLACEMODE
{
  NVVIOINTERLACEMODE_PROGRESSIVE = 0x0,
  NVVIOINTERLACEMODE_INTERLACE = 0x1,
  NVVIOINTERLACEMODE_PSF = 0x2,
};

/* 1265 */
enum _NVVIOVIDEOSTANDARD
{
  NVVIOVIDEOSTANDARD_SMPTE259 = 0x0,
  NVVIOVIDEOSTANDARD_SMPTE260 = 0x1,
  NVVIOVIDEOSTANDARD_SMPTE274 = 0x2,
  NVVIOVIDEOSTANDARD_SMPTE295 = 0x3,
  NVVIOVIDEOSTANDARD_SMPTE296 = 0x4,
  NVVIOVIDEOSTANDARD_SMPTE372 = 0x5,
};

/* 1266 */
enum _NVVIOVIDEOTYPE
{
  NVVIOVIDEOTYPE_SD = 0x0,
  NVVIOVIDEOTYPE_HD = 0x1,
};

/* 1267 */
enum _NV_DISPLAY_TV_FORMAT
{
  NV_DISPLAY_TV_FORMAT_NONE = 0x0,
  NV_DISPLAY_TV_FORMAT_SD_NTSCM = 0x1,
  NV_DISPLAY_TV_FORMAT_SD_NTSCJ = 0x2,
  NV_DISPLAY_TV_FORMAT_SD_PALM = 0x4,
  NV_DISPLAY_TV_FORMAT_SD_PALBDGH = 0x8,
  NV_DISPLAY_TV_FORMAT_SD_PALN = 0x10,
  NV_DISPLAY_TV_FORMAT_SD_PALNC = 0x20,
  NV_DISPLAY_TV_FORMAT_SD_576i = 0x100,
  NV_DISPLAY_TV_FORMAT_SD_480i = 0x200,
  NV_DISPLAY_TV_FORMAT_ED_480p = 0x400,
  NV_DISPLAY_TV_FORMAT_ED_576p = 0x800,
  NV_DISPLAY_TV_FORMAT_HD_720p = 0x1000,
  NV_DISPLAY_TV_FORMAT_HD_1080i = 0x2000,
  NV_DISPLAY_TV_FORMAT_HD_1080p = 0x4000,
  NV_DISPLAY_TV_FORMAT_HD_720p50 = 0x8000,
  NV_DISPLAY_TV_FORMAT_HD_1080p24 = 0x10000,
  NV_DISPLAY_TV_FORMAT_HD_1080i50 = 0x20000,
  NV_DISPLAY_TV_FORMAT_HD_1080p50 = 0x40000,
  NV_DISPLAY_TV_FORMAT_SD_OTHER = 0x1000000,
  NV_DISPLAY_TV_FORMAT_ED_OTHER = 0x2000000,
  NV_DISPLAY_TV_FORMAT_HD_OTHER = 0x4000000,
  NV_DISPLAY_TV_FORMAT_ANY = 0x80000000,
};

/* 1268 */
enum _NVDRS_SETTING_TYPE
{
  NVDRS_DWORD_TYPE = 0x0,
  NVDRS_BINARY_TYPE = 0x1,
  NVDRS_STRING_TYPE = 0x2,
  NVDRS_WSTRING_TYPE = 0x3,
};

/* 1269 */
enum _NVDRS_SETTING_LOCATION
{
  NVDRS_CURRENT_PROFILE_LOCATION = 0x0,
  NVDRS_GLOBAL_PROFILE_LOCATION = 0x1,
  NVDRS_BASE_PROFILE_LOCATION = 0x2,
};

/* 1270 */
enum NV_COOLER_TYPE
{
  NVAPI_COOLER_TYPE_NONE = 0x0,
  NVAPI_COOLER_TYPE_FAN = 0x1,
  NVAPI_COOLER_TYPE_WATER = 0x2,
  NVAPI_COOLER_TYPE_LIQUID_NO2 = 0x3,
};

/* 1271 */
enum NV_HW_CURSOR_COLOR_FORMAT_FLAGS
{
  NV_HW_CURSOR_COLOR_FORMAT_MONOCHROME = 0x0,
  NV_HW_CURSOR_COLOR_FORMAT_COLOR = 0x1,
  NV_HW_CURSOR_COLOR_FORMAT_MASKED_COLOR = 0x2,
};

/* 1272 */
enum _NV_DPCD_CMD
{
  NV_DP_AUXCH_CMD_REQ_TYPE_WRITE = 0x0,
  NV_DP_AUXCH_CMD_REQ_TYPE_READ = 0x1,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_WRITE = 0x2,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_READ = 0x3,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_WRITE_STATUS = 0x4,
  NV_DP_AUXCH_CMD_REQ_TYPE_MOT_I2C_WRITE = 0x5,
  NV_DP_AUXCH_CMD_REQ_TYPE_MOT_I2C_READ = 0x6,
};

/* 1273 */
enum _NV_DPCD_REPLY_TYPE
{
  NV_DP_AUXCH_REPLYTYPE_ACK = 0x0,
  NV_DP_AUXCH_REPLYTYPE_NACK = 0x1,
  NV_DP_AUXCH_REPLYTYPE_DEFER = 0x2,
  NV_DP_AUXCH_REPLYTYPE_TIMEOUT = 0xFF,
};

/* 1274 */
enum _NVVIODATAFORMAT
{
  NVVIODATAFORMAT_UNKNOWN = 0xFFFFFFFF,
  NVVIODATAFORMAT_R8G8B8_TO_YCRCB444 = 0x0,
  NVVIODATAFORMAT_R8G8B8A8_TO_YCRCBA4444 = 0x1,
  NVVIODATAFORMAT_R8G8B8Z10_TO_YCRCBZ4444 = 0x2,
  NVVIODATAFORMAT_R8G8B8_TO_YCRCB422 = 0x3,
  NVVIODATAFORMAT_R8G8B8A8_TO_YCRCBA4224 = 0x4,
  NVVIODATAFORMAT_R8G8B8Z10_TO_YCRCBZ4224 = 0x5,
  NVVIODATAFORMAT_X8X8X8_444_PASSTHRU = 0x6,
  NVVIODATAFORMAT_X8X8X8A8_4444_PASSTHRU = 0x7,
  NVVIODATAFORMAT_X8X8X8Z10_4444_PASSTHRU = 0x8,
  NVVIODATAFORMAT_X10X10X10_444_PASSTHRU = 0x9,
  NVVIODATAFORMAT_X10X8X8_444_PASSTHRU = 0xA,
  NVVIODATAFORMAT_X10X8X8A10_4444_PASSTHRU = 0xB,
  NVVIODATAFORMAT_X10X8X8Z10_4444_PASSTHRU = 0xC,
  NVVIODATAFORMAT_DUAL_R8G8B8_TO_DUAL_YCRCB422 = 0xD,
  NVVIODATAFORMAT_DUAL_X8X8X8_TO_DUAL_422_PASSTHRU = 0xE,
  NVVIODATAFORMAT_R10G10B10_TO_YCRCB422 = 0xF,
  NVVIODATAFORMAT_R10G10B10_TO_YCRCB444 = 0x10,
  NVVIODATAFORMAT_X12X12X12_444_PASSTHRU = 0x11,
  NVVIODATAFORMAT_X12X12X12_422_PASSTHRU = 0x12,
  NVVIODATAFORMAT_Y10CR10CB10_TO_YCRCB422 = 0x13,
  NVVIODATAFORMAT_Y8CR8CB8_TO_YCRCB422 = 0x14,
  NVVIODATAFORMAT_Y10CR8CB8A10_TO_YCRCBA4224 = 0x15,
  NVVIODATAFORMAT_R10G10B10_TO_RGB444 = 0x16,
  NVVIODATAFORMAT_R12G12B12_TO_YCRCB444 = 0x17,
  NVVIODATAFORMAT_R12G12B12_TO_YCRCB422 = 0x18,
};

/* 1275 */
enum _NVVIOOUTPUTAREA
{
  NVVIOOUTPUTAREA_FULLSIZE = 0x0,
  NVVIOOUTPUTAREA_SAFEACTION = 0x1,
  NVVIOOUTPUTAREA_SAFETITLE = 0x2,
};

/* 1276 */
enum _NVVIOANCPARITYCOMPUTATION
{
  NVVIOANCPARITYCOMPUTATION_AUTO = 0x0,
  NVVIOANCPARITYCOMPUTATION_ON = 0x1,
  NVVIOANCPARITYCOMPUTATION_OFF = 0x2,
};

/* 1277 */
enum _NV_FORMAT
{
  NV_FORMAT_UNKNOWN = 0x0,
  NV_FORMAT_P8 = 0x29,
  NV_FORMAT_R5G6B5 = 0x17,
  NV_FORMAT_A8R8G8B8 = 0x15,
  NV_FORMAT_A16B16G16R16F = 0x71,
};

/* 1278 */
enum _NVVIOSTATUSTYPE
{
  NVVIOSTATUSTYPE_IN = 0x0,
  NVVIOSTATUSTYPE_OUT = 0x1,
};

/* 1279 */
enum NV_DP_BPC
{
  NV_DP_BPC_DEFAULT = 0x0,
  NV_DP_BPC_6 = 0x1,
  NV_DP_BPC_8 = 0x2,
  NV_DP_BPC_10 = 0x3,
  NV_DP_BPC_12 = 0x4,
  NV_DP_BPC_16 = 0x5,
};

/* 1280 */
enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID
{
  NVAPI_GPU_PERF_VOLTAGE_INFO_DOMAIN_CORE = 0x0,
  NVAPI_GPU_PERF_VOLTAGE_INFO_DOMAIN_UNDEFINED = 0x10,
};

/* 1281 */
enum NV_COOLER_CONTROLLER
{
  NVAPI_COOLER_CONTROLLER_NONE = 0x0,
  NVAPI_COOLER_CONTROLLER_ADI = 0x1,
  NVAPI_COOLER_CONTROLLER_INTERNAL = 0x2,
};

/* 1282 */
enum NV_COOLER_CONTROL
{
  NVAPI_COOLER_CONTROL_NONE = 0x0,
  NVAPI_COOLER_CONTROL_TOGGLE = 0x1,
  NVAPI_COOLER_CONTROL_VARIABLE = 0x2,
};

/* 1283 */
enum NV_COOLER_ACTIVITY_LEVEL
{
  NVAPI_INACTIVE = 0x0,
  NVAPI_ACTIVE = 0x1,
};

/* 1284 */
enum _NV_GPU_HDCP_FUSE_STATE
{
  NV_GPU_HDCP_FUSE_STATE_UNKNOWN = 0x0,
  NV_GPU_HDCP_FUSE_STATE_DISABLED = 0x1,
  NV_GPU_HDCP_FUSE_STATE_ENABLED = 0x2,
};

/* 1285 */
enum _NV_GPU_HDCP_KEY_SOURCE
{
  NV_GPU_HDCP_KEY_SOURCE_UNKNOWN = 0x0,
  NV_GPU_HDCP_KEY_SOURCE_NONE = 0x1,
  NV_GPU_HDCP_KEY_SOURCE_CRYPTO_ROM = 0x2,
  NV_GPU_HDCP_KEY_SOURCE_SBIOS = 0x3,
  NV_GPU_HDCP_KEY_SOURCE_I2C_ROM = 0x4,
  NV_GPU_HDCP_KEY_SOURCE_FUSES = 0x5,
};

/* 1286 */
enum _NV_GPU_HDCP_KEY_SOURCE_STATE
{
  NV_GPU_HDCP_KEY_SOURCE_STATE_UNKNOWN = 0x0,
  NV_GPU_HDCP_KEY_SOURCE_STATE_ABSENT = 0x1,
  NV_GPU_HDCP_KEY_SOURCE_STATE_PRESENT = 0x2,
};

/* 1287 */
enum _NV_ROTATE
{
  NV_ROTATE_0 = 0x0,
  NV_ROTATE_90 = 0x1,
  NV_ROTATE_180 = 0x2,
  NV_ROTATE_270 = 0x3,
  NV_ROTATE_IGNORED = 0x4,
};

/* 1288 */
enum _NV_GPU_CONNECTOR_TYPE
{
  NVAPI_GPU_CONNECTOR_VGA_15_PIN = 0x0,
  NVAPI_GPU_CONNECTOR_TV_COMPOSITE = 0x10,
  NVAPI_GPU_CONNECTOR_TV_SVIDEO = 0x11,
  NVAPI_GPU_CONNECTOR_TV_HDTV_COMPONENT = 0x13,
  NVAPI_GPU_CONNECTOR_TV_SCART = 0x14,
  NVAPI_GPU_CONNECTOR_TV_COMPOSITE_SCART_ON_EIAJ4120 = 0x16,
  NVAPI_GPU_CONNECTOR_TV_HDTV_EIAJ4120 = 0x17,
  NVAPI_GPU_CONNECTOR_PC_POD_HDTV_YPRPB = 0x18,
  NVAPI_GPU_CONNECTOR_PC_POD_SVIDEO = 0x19,
  NVAPI_GPU_CONNECTOR_PC_POD_COMPOSITE = 0x1A,
  NVAPI_GPU_CONNECTOR_DVI_I_TV_SVIDEO = 0x20,
  NVAPI_GPU_CONNECTOR_DVI_I_TV_COMPOSITE = 0x21,
  NVAPI_GPU_CONNECTOR_DVI_I = 0x30,
  NVAPI_GPU_CONNECTOR_DVI_D = 0x31,
  NVAPI_GPU_CONNECTOR_ADC = 0x32,
  NVAPI_GPU_CONNECTOR_LFH_DVI_I_1 = 0x38,
  NVAPI_GPU_CONNECTOR_LFH_DVI_I_2 = 0x39,
  NVAPI_GPU_CONNECTOR_SPWG = 0x40,
  NVAPI_GPU_CONNECTOR_OEM = 0x41,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_EXTERNAL = 0x46,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_INTERNAL = 0x47,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_MINI_EXT = 0x48,
  NVAPI_GPU_CONNECTOR_HDMI_A = 0x61,
  NVAPI_GPU_CONNECTOR_HDMI_C_MINI = 0x63,
  NVAPI_GPU_CONNECTOR_LFH_DISPLAYPORT_1 = 0x64,
  NVAPI_GPU_CONNECTOR_LFH_DISPLAYPORT_2 = 0x65,
  NVAPI_GPU_CONNECTOR_UNKNOWN = 0xFFFFFFFF,
};

/* 1289 */
enum NV_HDMI_STEREO_TYPE
{
  NV_HDMI_STEREO_3D_NONE = 0x0,
  NV_STEREO_NVISION = 0x1,
  NV_HDMI_STEREO_3D_FRAME_PACKING = 0x2,
  NV_HDMI_STEREO_3D_FRAME_PACKING_INT = 0x3,
  NV_HDMI_STEREO_3D_LINE_ALT = 0x4,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_FULL = 0x5,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_ODD_LEFT_ODD_RIGHT = 0x6,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_ODD_LEFT_EVEN_RIGHT = 0x7,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_EVEN_LEFT_ODD_RIGHT = 0x8,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_EVEN_LEFT_EVEN_RIGHT = 0x9,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_ODD_LEFT_ODD_RIGHT = 0xA,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_ODD_LEFT_EVEN_RIGHT = 0xB,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_EVEN_LEFT_ODD_RIGHT = 0xC,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_EVEN_LEFT_EVEN_RIGHT = 0xD,
  NV_HDMI_STEREO_3D_FIELD_ALT = 0xE,
  NV_HDMI_STEREO_3D_L_DEPTH = 0xF,
  NV_HDMI_STEREO_3D_L_DEPTH_GFX = 0x10,
  NV_HDMI_STEREO_3D_ANY = 0xFF,
};

/* 1290 */
enum NV_DP_COLORIMETRY
{
  NV_DP_COLORIMETRY_RGB = 0x0,
  NV_DP_COLORIMETRY_YCbCr_ITU601 = 0x1,
  NV_DP_COLORIMETRY_YCbCr_ITU709 = 0x2,
};

/* 1291 */
enum NV_I2C_SPEED
{
  NVAPI_I2C_SPEED_DEFAULT = 0x0,
  NVAPI_I2C_SPEED_3KHZ = 0x1,
  NVAPI_I2C_SPEED_10KHZ = 0x2,
  NVAPI_I2C_SPEED_33KHZ = 0x3,
  NVAPI_I2C_SPEED_100KHZ = 0x4,
  NVAPI_I2C_SPEED_200KHZ = 0x5,
  NVAPI_I2C_SPEED_400KHZ = 0x6,
};

/* 1292 */
enum NV_GPU_PERF_PSTATE20_CLOCK_TYPE_ID
{
  NVAPI_GPU_PERF_PSTATE20_CLOCK_TYPE_SINGLE = 0x0,
  NVAPI_GPU_PERF_PSTATE20_CLOCK_TYPE_RANGE = 0x1,
};

/* 1293 */
enum NV_DP_LINK_RATE
{
  NV_DP_1_62GBPS = 0x6,
  NV_DP_2_70GBPS = 0xA,
};

/* 1294 */
enum NV_3D_PROPERTY
{
  NV_3D_PROPERTY_AS = 0x1,
  NV_3D_PROPERTY_AA = 0x2,
  NV_3D_PROPERTY_AF = 0x3,
  NV_3D_PROPERTY_MAX_FRAMES = 0x4,
  NV_3D_PROPERTY_TEX_FILTER = 0x5,
};

/* 1295 */
enum NV_VIRTUALMODE_CMD
{
  NV_VIRTUALMODE_CMD_GET_INFO = 0x1,
};

/* 1296 */
enum NV_HCLONE_HOTPLUG_BEHAVIOR
{
};

/* 1297 */
enum _NVAPI_VIDEO_FEATURE
{
  NVAPI_VF_UNKNOWN = 0x0,
  NVAPI_VF_MPEG2SDDecodeAcceleration = 0x1,
  NVAPI_VF_MPEG2HDDecodeAcceleration = 0x2,
  NVAPI_VF_VC1SDDecodeAcceleration = 0x3,
  NVAPI_VF_VC1HDDecodeAcceleration = 0x4,
  NVAPI_VF_H264SDDecodeAcceleration = 0x5,
  NVAPI_VF_H264HDDecodeAcceleration = 0x6,
  NVAPI_VF_WMV9SDDecodeAcceleration = 0x7,
  NVAPI_VF_WMV9HDDecodeAcceleration = 0x8,
  NVAPI_VF_ProcAmp = 0x9,
  NVAPI_VF_ColorTemperatureCorrection = 0xA,
  NVAPI_VF_ColorSpaceConversion = 0xB,
  NVAPI_VF_GammaCorrection = 0xC,
  NVAPI_VF_OverDrive = 0xD,
  NVAPI_VF_DynamicContrastEnhancement = 0xE,
  NVAPI_VF_StretchBlueGreenSkin = 0xF,
  NVAPI_VF_AdaptiveDeInterlacing = 0x10,
  NVAPI_VF_NoiseReduction = 0x11,
  NVAPI_VF_EdgeEnhancement = 0x12,
  NVAPI_VF_InverseTelecine = 0x13,
  NVAPI_VF_Scaling = 0x14,
  NVAPI_VF_VideoMirror = 0x15,
  NVAPI_VF_Blend = 0x16,
  NVAPI_VF_DxvaHDTest = 0x17,
  NVAPI_VF_GamutRemap = 0x18,
  NVAPI_VF_MftXcode = 0x19,
  NVAPI_VF_SkinToneCorrection = 0x1A,
  NVAPI_VF_MftYUY2Xcode = 0x1B,
  NVAPI_VF_MftDivxXcode = 0x1C,
  NVAPI_VF_MftWmv9Encode = 0x1D,
  NVAPI_VF_DynamicPState = 0x1E,
  NVAPI_VF_PostProcessVIC = 0x1F,
  NVAPI_VF_MVCHDDecodeAcceleration = 0x20,
  NVAPI_VF_SVCHDDecodeAcceleration = 0x21,
  NVAPI_VF_SimpleScaling = 0x22,
  NVAPI_VF_ID_LAST = 0x23,
};

/* 1298 */
enum _NVAPI_SURFACE_LAYOUT
{
  NVAPI_SURFACE_LAYOUT_BL = 0x0,
  NVAPI_SURFACE_LAYOUT_PL = 0x1,
  NVAPI_SURFACE_LAYOUT_TILED = 0x2,
};

/* 1299 */
enum NV_GPS_THERM_LIMIT_SRC
{
  NV_GPS_THERM_LIMIT_SRC_USER_LIMITED = 0x1,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_LIMITED = 0x2,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_UNLIMITED = 0x3,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_NOT_SUPPORTED = 0x4,
  NV_GPS_THERM_LIMIT_SRC_USER_DISABLED = 0x5,
};

/* 1300 */
enum _NVAPI_VIDEO_DRIVER_ENTRY_POINT
{
  NVAPI_EP_UNKNOWN = 0x0,
  NVAPI_EP_DecodeEndFrame = 0x1,
  NVAPI_EP_OverlayTransfer = 0x2,
  NVAPI_EP_DIBlitEx = 0x3,
  NVAPI_EP_VideoProcessBlt = 0x4,
  NVAPI_EP_D3DBlt = 0x5,
  NVAPI_EP_Blit32 = 0x6,
  NVAPI_EP_VPBltHD = 0x7,
};

/* 1301 */
enum _NV_GPU_CONNECTOR_PLATFORM
{
  NVAPI_GPU_CONNECTOR_PLATFORM_DEFAULT_ADD_IN_CARD = 0x0,
  NVAPI_GPU_CONNECTOR_PLATFORM_TWO_PLATE_ADD_IN_CARD = 0x1,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_ADD_IN_CARD = 0x8,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK = 0x10,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK_LEFT = 0x11,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK_DOCK = 0x18,
  NVAPI_GPU_CONNECTOR_PLATFORM_MAINBOARD_DEFAULT = 0x20,
  NVAPI_GPU_CONNECTOR_PLATFORM_UNKNOWN = 0xFFFFFFFF,
};

/* 1302 */
enum _NV_STEREO_VIDEO_FORMAT
{
  NV_STEREO_VIDEO_FORMAT_NOT_STEREO = 0x0,
  NV_STEREO_VIDEO_FORMAT_SIDE_BY_SIDE_LR = 0x1,
  NV_STEREO_VIDEO_FORMAT_SIDE_BY_SIDE_RL = 0x2,
  NV_STEREO_VIDEO_FORMAT_TOP_BOTTOM_LR = 0x3,
  NV_STEREO_VIDEO_FORMAT_TOP_BOTTOM_RL = 0x4,
  NV_STEREO_VIDEO_FORMAT_ROW_INTERLEAVE_LR = 0x5,
  NV_STEREO_VIDEO_FORMAT_ROW_INTERLEAVE_RL = 0x6,
  NV_STEREO_VIDEO_FORMAT_TWO_FRAMES_LR = 0x7,
  NV_STEREO_VIDEO_FORMAT_MONO_PLUS_OFFSET = 0x8,
  NV_STEREO_VIDEO_FORMAT_LAST = 0x9,
};

/* 1303 */
enum NV_DP_LANE_COUNT
{
  NV_DP_1_LANE = 0x1,
  NV_DP_2_LANE = 0x2,
  NV_DP_4_LANE = 0x4,
};

/* 1304 */
enum NV_DP_COLOR_FORMAT
{
  NV_DP_COLOR_FORMAT_RGB = 0x0,
  NV_DP_COLOR_FORMAT_YCbCr422 = 0x1,
  NV_DP_COLOR_FORMAT_YCbCr444 = 0x2,
};

/* 1305 */
enum NV_DP_DYNAMIC_RANGE
{
  NV_DP_DYNAMIC_RANGE_VESA = 0x0,
  NV_DP_DYNAMIC_RANGE_CEA = 0x1,
};

/* 1306 */
enum NV_HDCP_COMMANDS
{
  NV_HDCP_CMD_NULL = 0x0,
  NV_HDCP_CMD_QUERY_HEAD_CONFIG = 0x1,
  NV_HDCP_CMD_READ_LINK_STATUS = 0x2,
  NV_HDCP_CMD_VALIDATE_LINK = 0x3,
  NV_HDCP_CMD_RENEGOTIATE = 0x4,
  NV_HDCP_CMD_ABORTAUTHENTICATION = 0x5,
  NV_HDCP_CMD_SETLINKPOLICY = 0x6,
};

/* 1307 */
enum NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID
{
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_TOTAL_GPU_POWER = 0x0,
};

/* 1308 */
enum NV_GPU_WARPING_VERTICE_FORMAT
{
  NV_GPU_WARPING_VERTICE_FORMAT_TRIANGLESTRIP_XYUVRQ = 0x0,
  NV_GPU_WARPING_VERTICE_FORMAT_TRIANGLES_XYUVRQ = 0x1,
};

/* 1309 */
enum _NV_GPU_PUBLIC_CLOCK_ID
{
  NVAPI_GPU_PUBLIC_CLOCK_GRAPHICS = 0x0,
  NVAPI_GPU_PUBLIC_CLOCK_MEMORY = 0x4,
  NVAPI_GPU_PUBLIC_CLOCK_PROCESSOR = 0x7,
  NVAPI_GPU_PUBLIC_CLOCK_UNDEFINED = 0x20,
};

/* 1310 */
enum NV_HDCP_FLAGS
{
  NV_HDCP_FLAGS_NULL = 0x0,
  NV_HDCP_FLAGS_APINDEX = 0x1,
  NV_HDCP_FLAGS_AN = 0x10,
  NV_HDCP_FLAGS_AKSV = 0x20,
  NV_HDCP_FLAGS_BKSV = 0x40,
  NV_HDCP_FLAGS_BSTATUS = 0x80,
  NV_HDCP_FLAGS_CN = 0x100,
  NV_HDCP_FLAGS_CKSV = 0x200,
  NV_HDCP_FLAGS_DKSV = 0x400,
  NV_HDCP_FLAGS_KP = 0x1000,
  NV_HDCP_FLAGS_S = 0x2000,
  NV_HDCP_FLAGS_CS = 0x4000,
  NV_HDCP_FLAGS_V = 0x10000,
  NV_HDCP_FLAGS_MP = 0x20000,
  NV_HDCP_FLAGS_BKSVLIST = 0x40000,
  NV_HDCP_FLAGS_DUAL_LINK = 0x100000,
  NV_HDCP_FLAGS_ALWAYS_AUTH = 0x200000,
  NV_HDCP_FLAGS_ON_BY_DEMAND = 0x0,
  NV_HDCP_FLAGS_ABORT_UNTRUST = 0x400000,
  NV_HDCP_FLAGS_ABORT_UNRELBL = 0x800000,
  NV_HDCP_FLAGS_ABORT_KSV_LEN = 0x1000000,
  NV_HDCP_FLAGS_ABORT_KSV_SIG = 0x2000000,
  NV_HDCP_FLAGS_ABORT_SRM_SIG = 0x4000000,
  NV_HDCP_FLAGS_ABORT_SRM_REV = 0x8000000,
  NV_HDCP_FLAGS_ABORT_NORDY = 0x10000000,
  NV_HDCP_FLAGS_ABORT_KSVTOP = 0x20000000,
  NV_HDCP_FLAGS_ABORT_BADBKSV = 0x40000000,
};

/* 1311 */
enum _NVAPI_D3D9_DMA_TRANSFER_DIR
{
  NVAPI_D3D9_DMA_TRANSFER_DIR_UPLOAD = 0x0,
  NVAPI_D3D9_DMA_TRANSFER_DIR_DOWNLOAD = 0x1,
};

/* 1312 */
enum NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID
{
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID_TOTAL_GPU_POWER = 0x0,
};

/* 1313 */
enum NV_MONITOR_CONN_TYPE
{
  NV_MONITOR_CONN_TYPE_UNINITIALIZED = 0x0,
  NV_MONITOR_CONN_TYPE_VGA = 0x1,
  NV_MONITOR_CONN_TYPE_COMPONENT = 0x2,
  NV_MONITOR_CONN_TYPE_SVIDEO = 0x3,
  NV_MONITOR_CONN_TYPE_HDMI = 0x4,
  NV_MONITOR_CONN_TYPE_DVI = 0x5,
  NV_MONITOR_CONN_TYPE_LVDS = 0x6,
  NV_MONITOR_CONN_TYPE_DP = 0x7,
  NV_MONITOR_CONN_TYPE_COMPOSITE = 0x8,
  NV_MONITOR_CONN_TYPE_UNKNOWN = 0xFFFFFFFF,
};

/* 1314 */
enum _NV_GPU_FLATPANEL_SIGNAL_LINK
{
  NV_GPU_FLATPANEL_SIGNAL_SINGLE_LINK = 0x1,
  NV_GPU_FLATPANEL_SIGNAL_DUAL_LINK = 0x2,
};

/* 1315 */
enum NV_HDCP_RET_STATUS
{
  NV_HDCP_STATUS_SUCCESS = 0x0,
  NV_HDCP_STATUS_UNSUCCESSFUL = 0xC0000001,
  NV_HDCP_STATUS_PENDING = 0x103,
  NV_HDCP_STATUS_LINK_FAILED = 0xC000013E,
  NV_HDCP_STATUS_INVALID_PARAMETER = 0xC000000D,
  NV_HDCP_STATUS_INVALID_PARAMETER_MIX = 0xC0000030,
  NV_HDCP_STATUS_NO_MEMORY = 0xC0000017,
  NV_HDCP_STATUS_BAD_TOKEN_TYPE = 0xC00000A8,
};

/* 1316 */
enum NV_EVENT_TYPE
{
  NV_EVENT_TYPE_NONE = 0x0,
  NV_EVENT_TYPE_FAN_SPEED_CHANGE = 0x1,
  NV_EVENT_TYPE_THERMAL_CHANGE = 0x2,
};

/* 1317 */
enum _NV_GPU_FLATPANEL_SIGNAL_TYPE
{
  NV_GPU_FLATPANEL_SIGNAL_TYPE_TMDS = 0x0,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_LVDS = 0x1,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_SDI = 0x2,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_DISPLAYPORT = 0x3,
};

/* 1318 */
enum _NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES
{
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_NONE = 0x0,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_SINGLE_LANE = 0x1,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_DUAL_LANE = 0x2,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_QUAD_LANE = 0x3,
};

/* 1319 */
enum NVAPI_GPIO_DIRECTION
{
  NVAPI_GPIO_DIRECTION_INPUT = 0x0,
  NVAPI_GPIO_DIRECTION_OUTPUT = 0x1,
};

/* 1320 */
enum _NV_ECC_CONFIGURATION
{
  NV_ECC_CONFIGURATION_NOT_SUPPORTED = 0x0,
  NV_ECC_CONFIGURATION_DEFERRED = 0x1,
  NV_ECC_CONFIGURATION_IMMEDIATE = 0x2,
};

/* 1321 */
enum D3D10_MAP
{
};

/* 1322 */
enum D3D10_FILL_MODE
{
};

/* 1323 */
enum D3D10_CULL_MODE
{
};

/* 1324 */
enum D3D10_STENCIL_OP
{
};

/* 1325 */
enum D3D10_COMPARISON_FUNC
{
};

/* 1326 */
enum D3D10_DEPTH_WRITE_MASK
{
};

/* 1327 */
enum D3D10_INPUT_CLASSIFICATION
{
};

/* 1328 */
enum D3D10_RTV_DIMENSION
{
};

/* 1329 */
enum D3D10_DSV_DIMENSION
{
};

/* 1330 */
enum D3D10_FILTER
{
};

/* 1331 */
enum D3D10_TEXTURE_ADDRESS_MODE
{
};

/* 1332 */
enum D3D10_BLEND
{
};

/* 1333 */
enum D3D10_BLEND_OP
{
};

/* 1334 */
enum D3D10_RESOURCE_DIMENSION
{
};

/* 1335 */
enum D3DX11_IMAGE_FILE_FORMAT
{
};

/* 1336 */
enum D3DX10_IMAGE_FILE_FORMAT
{
};

/* 1337 */
enum D2D1_ALPHA_MODE
{
  D2D1_ALPHA_MODE_UNKNOWN = 0x0,
  D2D1_ALPHA_MODE_PREMULTIPLIED = 0x1,
  D2D1_ALPHA_MODE_STRAIGHT = 0x2,
  D2D1_ALPHA_MODE_IGNORE = 0x3,
  D2D1_ALPHA_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1338 */
enum D2D1_GAMMA
{
  D2D1_GAMMA_2_2 = 0x0,
  D2D1_GAMMA_1_0 = 0x1,
  D2D1_GAMMA_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1339 */
enum D2D1_EXTEND_MODE
{
  D2D1_EXTEND_MODE_CLAMP = 0x0,
  D2D1_EXTEND_MODE_WRAP = 0x1,
  D2D1_EXTEND_MODE_MIRROR = 0x2,
  D2D1_EXTEND_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1340 */
enum D2D1_ANTIALIAS_MODE
{
  D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0x0,
  D2D1_ANTIALIAS_MODE_ALIASED = 0x1,
  D2D1_ANTIALIAS_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1341 */
enum D2D1_TEXT_ANTIALIAS_MODE
{
  D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0x0,
  D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0x1,
  D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 0x2,
  D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 0x3,
  D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1342 */
enum D2D1_BITMAP_INTERPOLATION_MODE
{
  D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0x0,
  D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 0x1,
  D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1343 */
enum D2D1_DRAW_TEXT_OPTIONS
{
  D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 0x1,
  D2D1_DRAW_TEXT_OPTIONS_CLIP = 0x2,
  D2D1_DRAW_TEXT_OPTIONS_NONE = 0x0,
  D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1344 */
enum D2D1_CAP_STYLE
{
  D2D1_CAP_STYLE_FLAT = 0x0,
  D2D1_CAP_STYLE_SQUARE = 0x1,
  D2D1_CAP_STYLE_ROUND = 0x2,
  D2D1_CAP_STYLE_TRIANGLE = 0x3,
  D2D1_CAP_STYLE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1345 */
enum D2D1_DASH_STYLE
{
  D2D1_DASH_STYLE_SOLID = 0x0,
  D2D1_DASH_STYLE_DASH = 0x1,
  D2D1_DASH_STYLE_DOT = 0x2,
  D2D1_DASH_STYLE_DASH_DOT = 0x3,
  D2D1_DASH_STYLE_DASH_DOT_DOT = 0x4,
  D2D1_DASH_STYLE_CUSTOM = 0x5,
  D2D1_DASH_STYLE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1346 */
enum D2D1_LINE_JOIN
{
  D2D1_LINE_JOIN_MITER = 0x0,
  D2D1_LINE_JOIN_BEVEL = 0x1,
  D2D1_LINE_JOIN_ROUND = 0x2,
  D2D1_LINE_JOIN_MITER_OR_BEVEL = 0x3,
  D2D1_LINE_JOIN_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1347 */
enum _D3DXCLEANTYPE
{
  D3DXCLEAN_BACKFACING = 0x1,
  D3DXCLEAN_BOWTIES = 0x2,
  D3DXCLEAN_SKINNING = 0x1,
  D3DXCLEAN_OPTIMIZATION = 0x1,
  D3DXCLEAN_SIMPLIFICATION = 0x3,
};

/* 1348 */
enum D2D1_LAYER_OPTIONS
{
  D2D1_LAYER_OPTIONS_NONE = 0x0,
  D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 0x1,
  D2D1_LAYER_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1349 */
enum D3D10_FEATURE_LEVEL1
{
  D3D10_FEATURE_LEVEL_10_0 = 0xA000,
  D3D10_FEATURE_LEVEL_10_1 = 0xA100,
  D3D10_FEATURE_LEVEL_9_1 = 0x9100,
  D3D10_FEATURE_LEVEL_9_2 = 0x9200,
  D3D10_FEATURE_LEVEL_9_3 = 0x9300,
};

/* 1350 */
enum DWRITE_MEASURING_MODE
{
  DWRITE_MEASURING_MODE_NATURAL = 0x0,
  DWRITE_MEASURING_MODE_GDI_CLASSIC = 0x1,
  DWRITE_MEASURING_MODE_GDI_NATURAL = 0x2,
};

/* 1351 */
enum D2D1_RENDER_TARGET_TYPE
{
  D2D1_RENDER_TARGET_TYPE_DEFAULT = 0x0,
  D2D1_RENDER_TARGET_TYPE_SOFTWARE = 0x1,
  D2D1_RENDER_TARGET_TYPE_HARDWARE = 0x2,
  D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1352 */
enum D2D1_FEATURE_LEVEL
{
  D2D1_FEATURE_LEVEL_DEFAULT = 0x0,
  D2D1_FEATURE_LEVEL_9 = 0x9100,
  D2D1_FEATURE_LEVEL_10 = 0xA000,
  D2D1_FEATURE_LEVEL_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1353 */
enum D2D1_RENDER_TARGET_USAGE
{
  D2D1_RENDER_TARGET_USAGE_NONE = 0x0,
  D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 0x1,
  D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 0x2,
  D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1354 */
enum D2D1_PRESENT_OPTIONS
{
  D2D1_PRESENT_OPTIONS_NONE = 0x0,
  D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 0x1,
  D2D1_PRESENT_OPTIONS_IMMEDIATELY = 0x2,
  D2D1_PRESENT_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1355 */
enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS
{
  D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0x0,
  D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 0x1,
  D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = 0xFFFFFFFF,
};

/* 1356 */
enum _D3DXERR
{
  D3DXERR_CANNOTMODIFYINDEXBUFFER = 0x88760B54,
  D3DXERR_INVALIDMESH = 0x88760B55,
  D3DXERR_CANNOTATTRSORT = 0x88760B56,
  D3DXERR_SKINNINGNOTSUPPORTED = 0x88760B57,
  D3DXERR_TOOMANYINFLUENCES = 0x88760B58,
  D3DXERR_INVALIDDATA = 0x88760B59,
  D3DXERR_LOADEDMESHASNODATA = 0x88760B5A,
  D3DXERR_DUPLICATENAMEDFRAGMENT = 0x88760B5B,
  D3DXERR_CANNOTREMOVELASTITEM = 0x88760B5C,
};

/* 1357 */
enum DWRITE_FONT_FEATURE_TAG
{
};

/* 1358 */
enum DWRITE_READING_DIRECTION
{
};

/* 1359 */
enum DWRITE_FLOW_DIRECTION
{
};

/* 1360 */
enum D2D1_FILL_MODE
{
};

/* 1361 */
enum D2D1_PATH_SEGMENT
{
};

/* 1362 */
enum D2D1_FIGURE_BEGIN
{
};

/* 1363 */
enum D2D1_FIGURE_END
{
};

/* 1364 */
enum DWRITE_FONT_WEIGHT
{
};

/* 1365 */
enum DWRITE_FONT_STRETCH
{
};

/* 1366 */
enum DWRITE_FONT_STYLE
{
};

/* 1367 */
enum DWRITE_INFORMATIONAL_STRING_ID
{
};

/* 1368 */
enum DWRITE_FONT_SIMULATIONS
{
};

/* 1369 */
enum DWRITE_FONT_FILE_TYPE
{
};

/* 1370 */
enum DWRITE_FONT_FACE_TYPE
{
};

/* 1371 */
enum _MAX_FVF_DECL_SIZE
{
  MAX_FVF_DECL_SIZE = 0x41,
};

/* 1372 */
enum D2D1::ColorF::Enum
{
  AliceBlue = 0xF0F8FF,
  AntiqueWhite = 0xFAEBD7,
  Aqua = 0xFFFF,
  Aquamarine = 0x7FFFD4,
  Azure = 0xF0FFFF,
  Beige = 0xF5F5DC,
  Bisque = 0xFFE4C4,
  Black = 0x0,
  BlanchedAlmond = 0xFFEBCD,
  Blue = 0xFF,
  BlueViolet = 0x8A2BE2,
  Brown = 0xA52A2A,
  BurlyWood = 0xDEB887,
  CadetBlue = 0x5F9EA0,
  Chartreuse = 0x7FFF00,
  Chocolate = 0xD2691E,
  Coral = 0xFF7F50,
  CornflowerBlue = 0x6495ED,
  Cornsilk = 0xFFF8DC,
  Crimson = 0xDC143C,
  Cyan = 0xFFFF,
  DarkBlue = 0x8B,
  DarkCyan = 0x8B8B,
  DarkGoldenrod = 0xB8860B,
  DarkGray = 0xA9A9A9,
  DarkGreen = 0x6400,
  DarkKhaki = 0xBDB76B,
  DarkMagenta = 0x8B008B,
  DarkOliveGreen = 0x556B2F,
  DarkOrange = 0xFF8C00,
  DarkOrchid = 0x9932CC,
  DarkRed = 0x8B0000,
  DarkSalmon = 0xE9967A,
  DarkSeaGreen = 0x8FBC8F,
  DarkSlateBlue = 0x483D8B,
  DarkSlateGray = 0x2F4F4F,
  DarkTurquoise = 0xCED1,
  DarkViolet = 0x9400D3,
  DeepPink = 0xFF1493,
  DeepSkyBlue = 0xBFFF,
  DimGray = 0x696969,
  DodgerBlue = 0x1E90FF,
  Firebrick = 0xB22222,
  FloralWhite = 0xFFFAF0,
  ForestGreen = 0x228B22,
  Fuchsia = 0xFF00FF,
  Gainsboro = 0xDCDCDC,
  GhostWhite = 0xF8F8FF,
  Gold = 0xFFD700,
  Goldenrod = 0xDAA520,
  Gray = 0x808080,
  Green = 0x8000,
  GreenYellow = 0xADFF2F,
  Honeydew = 0xF0FFF0,
  HotPink = 0xFF69B4,
  IndianRed = 0xCD5C5C,
  Indigo = 0x4B0082,
  Ivory = 0xFFFFF0,
  Khaki = 0xF0E68C,
  Lavender = 0xE6E6FA,
  LavenderBlush = 0xFFF0F5,
  LawnGreen = 0x7CFC00,
  LemonChiffon = 0xFFFACD,
  LightBlue = 0xADD8E6,
  LightCoral = 0xF08080,
  LightCyan = 0xE0FFFF,
  LightGoldenrodYellow = 0xFAFAD2,
  LightGreen = 0x90EE90,
  LightGray = 0xD3D3D3,
  LightPink = 0xFFB6C1,
  LightSalmon = 0xFFA07A,
  LightSeaGreen = 0x20B2AA,
  LightSkyBlue = 0x87CEFA,
  LightSlateGray = 0x778899,
  LightSteelBlue = 0xB0C4DE,
  LightYellow = 0xFFFFE0,
  Lime = 0xFF00,
  LimeGreen = 0x32CD32,
  Linen = 0xFAF0E6,
  Magenta = 0xFF00FF,
  Maroon = 0x800000,
  MediumAquamarine = 0x66CDAA,
  MediumBlue = 0xCD,
  MediumOrchid = 0xBA55D3,
  MediumPurple = 0x9370DB,
  MediumSeaGreen = 0x3CB371,
  MediumSlateBlue = 0x7B68EE,
  MediumSpringGreen = 0xFA9A,
  MediumTurquoise = 0x48D1CC,
  MediumVioletRed = 0xC71585,
  MidnightBlue = 0x191970,
  MintCream = 0xF5FFFA,
  MistyRose = 0xFFE4E1,
  Moccasin = 0xFFE4B5,
  NavajoWhite = 0xFFDEAD,
  Navy = 0x80,
  OldLace = 0xFDF5E6,
  Olive = 0x808000,
  OliveDrab = 0x6B8E23,
  Orange = 0xFFA500,
  OrangeRed = 0xFF4500,
  Orchid = 0xDA70D6,
  PaleGoldenrod = 0xEEE8AA,
  PaleGreen = 0x98FB98,
  PaleTurquoise = 0xAFEEEE,
  PaleVioletRed = 0xDB7093,
  PapayaWhip = 0xFFEFD5,
  PeachPuff = 0xFFDAB9,
  Peru = 0xCD853F,
  Pink = 0xFFC0CB,
  Plum = 0xDDA0DD,
  PowderBlue = 0xB0E0E6,
  Purple = 0x800080,
  Red = 0xFF0000,
  RosyBrown = 0xBC8F8F,
  RoyalBlue = 0x4169E1,
  SaddleBrown = 0x8B4513,
  Salmon = 0xFA8072,
  SandyBrown = 0xF4A460,
  SeaGreen = 0x2E8B57,
  SeaShell = 0xFFF5EE,
  Sienna = 0xA0522D,
  Silver = 0xC0C0C0,
  SkyBlue = 0x87CEEB,
  SlateBlue = 0x6A5ACD,
  SlateGray = 0x708090,
  Snow = 0xFFFAFA,
  SpringGreen = 0xFF7F,
  SteelBlue = 0x4682B4,
  Tan = 0xD2B48C,
  Teal = 0x8080,
  Thistle = 0xD8BFD8,
  Tomato = 0xFF6347,
  Turquoise = 0x40E0D0,
  Violet = 0xEE82EE,
  Wheat = 0xF5DEB3,
  White = 0xFFFFFF,
  WhiteSmoke = 0xF5F5F5,
  Yellow = 0xFFFF00,
  YellowGreen = 0x9ACD32,
};

/* 1373 */
enum DWRITE_RENDERING_MODE
{
};

/* 1374 */
enum DWRITE_TEXT_ALIGNMENT
{
};

/* 1375 */
enum DWRITE_PARAGRAPH_ALIGNMENT
{
};

/* 1376 */
enum DWRITE_WORD_WRAPPING
{
};

/* 1377 */
enum DWRITE_LINE_SPACING_METHOD
{
};

/* 1378 */
enum D2D1_WINDOW_STATE
{
};

/* 1379 */
enum DWRITE_TRIMMING_GRANULARITY
{
};

/* 1380 */
enum D2D1_GEOMETRY_RELATION
{
};

/* 1381 */
enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION
{
};

/* 1382 */
enum D2D1_COMBINE_MODE
{
};

/* 1383 */
enum D2D1_OPACITY_MASK_CONTENT
{
};

/* 1384 */
enum D2D1_DEBUG_LEVEL
{
};

/* 1385 */
enum DWRITE_PIXEL_GEOMETRY
{
};

/* 1386 */
enum D2D1_SWEEP_DIRECTION
{
};

/* 1387 */
enum D2D1_ARC_SIZE
{
};

/* 1388 */
enum DWRITE_BREAK_CONDITION
{
};

/* 1389 */
enum $0C46C5BEC24EBCBDF427CEC7022EDE9F
{
  TL_MEMALLOC_NGL = 0x1000000,
  TL_MEMALLOC_NAL = 0x2000000,
  TL_MEMALLOC_AEPS = 0x3000000,
  TL_MEMALLOC_NVL = 0x4000000,
  TL_MEMALLOC_PHYSICS = 0x5000000,
  TL_MEMALLOC_LIBMASK = 0xFF000000,
  TL_MEMALLOC_TEMP = 0x1,
  TL_MEMALLOC_CANFAIL = 0x2,
  TL_MEMALLOC_PHYSICAL = 0x10000,
  TL_MEMALLOC_WRITECOMBINE = 0x20000,
  TL_MEMALLOC_FIFO = 0x80000,
  TL_MEMALLOC_RSXMAIN = 0x0,
  TL_MEMALLOC_RSXLOCAL = 0x0,
  TL_MEMALLOC_MEM1 = 0x0,
  TL_MEMALLOC_MEM2 = 0x0,
};

/* 1390 */
enum $95A1CAAECAA1964EE3EDB699D4F2AB76
{
  X_AXIS = 0x0,
  Y_AXIS = 0x1,
  Z_AXIS = 0x2,
  NUM_AXIS = 0x3,
  AE_MIN_ELEMENT = 0x0,
  AE_MAX_ELEMENT = 0x1,
};

/* 1391 */
enum DISPLAYCONFIG_SCANLINE_ORDERING
{
  DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0x0,
  DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 0x1,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 0x2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 0x2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 0x3,
  DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 1392 */
enum bdChunkTypes
{
  BD_CT_INVALID = 0x0,
  BD_CT_PADDING = 0x1,
  BD_CT_DATA = 0x2,
  BD_CT_INIT = 0x3,
  BD_CT_INIT_ACK = 0x4,
  BD_CT_SACK = 0x5,
  BD_CT_HEARTBEAT = 0x6,
  BD_CT_HEARTBEAT_ACK = 0x7,
  BD_CT_ABORT = 0x8,
  BD_CT_SHUTDOWN = 0x9,
  BD_CT_SHUTDOWN_ACK = 0xA,
  BD_CT_SHUTDOWN_COMPLETE = 0xB,
  BD_CT_ERROR = 0xC,
  BD_CT_COOKIE_ECHO = 0xD,
  BD_CT_COOKIE_ACK = 0xE,
};

/* 1393 */
enum bdCookieAckChunk::bdCookieAckFlags
{
  BD_CA_NO_FLAGS = 0x0,
};

/* 1394 */
enum bdCookieEchoChunk::bdCookieEchoFlags
{
  BD_CE_NO_FLAGS = 0x0,
};

/* 1395 */
enum bdDataChunk::bdDataFlags
{
  BD_DC_NO_FLAGS = 0x0,
  BD_DC_UNRELIABLE = 0x1,
  BD_DC_ENC_DATA = 0x2,
  BD_DC_UNENC_DATA = 0x4,
};

/* 1396 */
typedef bdCookieAckChunk::bdCookieAckFlags bdHeartbeatAckChunk::bdHeartbeatAckFlags;

/* 1397 */
typedef bdCookieAckChunk::bdCookieAckFlags bdHeartbeatChunk::bdHeartbeatFlags;

/* 1398 */
enum bdInitChunk::bdInitChunkFlags
{
  BD_IC_NO_FLAGS = 0x0,
};

/* 1399 */
typedef bdInitChunk::bdInitChunkFlags bdInitAckChunk::bdInitAckChunkFlags;

/* 1400 */
enum bdShutdownAckChunk::bdShutdownAckFlags
{
  BD_SA_NO_FLAGS = 0x0,
};

/* 1401 */
enum bdShutdownCompleteChunk::bdShutdownCompleteFlags
{
  BD_SCC_NO_FLAGS = 0x0,
};

/* 1402 */
enum bdSAckChunk::bdSAckFlags
{
  BD_SC_NO_FLAGS = 0x0,
};

/* 1403 */
typedef bdSAckChunk::bdSAckFlags bdShutdownChunk::bdShutdownFlags;

/* 1404 */
enum bdReliableSendWindow::bdCongestionWindowDecreaseReason
{
  BD_CWDR_PACKET_LOSS_DETECTED = 0x0,
  BD_CWDR_RESEND_TIMER_EXPIRED = 0x1,
  BD_CWDR_INACTIVE = 0x2,
};

/* 1405 */
enum bdUnicastConnection::bdUnicastConnectionStatus
{
  BD_UC_CLOSED = 0x0,
  BD_UC_COOKIE_WAIT = 0x1,
  BD_UC_COOKIE_ECHOED = 0x2,
  BD_UC_ESTABLISHED = 0x3,
  BD_UC_SHUTDOWN_PENDING = 0x4,
  BD_UC_SHUTDOWN_SENT = 0x5,
  BD_UC_SHUTDOWN_RECEIVED = 0x6,
  BD_UC_SHUTDOWN_ACK_SENT = 0x7,
};

/* 1406 */
enum ltc_pkcs_1_paddings
{
  LTC_LTC_PKCS_1_V1_5 = 0x1,
  LTC_LTC_PKCS_1_OAEP = 0x2,
  LTC_LTC_PKCS_1_PSS = 0x3,
};

/* 1407 */
enum bdContentStatusCode
{
  BD_INVALID_KEY = 0x0,
  BD_CONTENT_UNLOCKABLE = 0x1,
  BD_CONTENT_UNLOCKED_TO_OTHER_USER = 0x2,
  BD_CONTENT_UNLOCKED_TO_THIS_USER = 0x3,
  BD_MAX_CONTENT_STATUS_CODE = 0x4,
};

/* 1408 */
enum bdFacebookFieldCode
{
  BD_FACEBOOK_NONE = 0x0,
  BD_FACEBOOK_USERNAME = 0x2,
  BD_FACEBOOK_LASTNAME = 0x4,
  BD_FACEBOOK_FIRSTNAME = 0x8,
  BD_FACEBOOK_ABOUTME = 0x10,
  BD_FACEBOOK_WEBSITE = 0x20,
  BD_FACEBOOK_CITY = 0x40,
  BD_FACEBOOK_STATE = 0x80,
  BD_FACEBOOK_COUNTRY = 0x100,
  BD_FACEBOOK_EMAIL = 0x200,
  BD_FACEBOOK_LOCATION = 0x400,
  BD_FACEBOOK_MAX_FIELD_CODE = 0x401,
};

/* 1409 */
enum bdFacebookFriendSort
{
  BD_FBSORT_UNSORTED = 0x0,
  BD_FBSORT_ACCOUNT_NAME_ASC = 0x1,
  BD_FBSORT_ACCOUNT_NAME_DESC = 0x2,
};

/* 1410 */
enum CURLcode
{
  CURLE_OK = 0x0,
  CURLE_UNSUPPORTED_PROTOCOL = 0x1,
  CURLE_FAILED_INIT = 0x2,
  CURLE_URL_MALFORMAT = 0x3,
  CURLE_OBSOLETE4 = 0x4,
  CURLE_COULDNT_RESOLVE_PROXY = 0x5,
  CURLE_COULDNT_RESOLVE_HOST = 0x6,
  CURLE_COULDNT_CONNECT = 0x7,
  CURLE_FTP_WEIRD_SERVER_REPLY = 0x8,
  CURLE_REMOTE_ACCESS_DENIED = 0x9,
  CURLE_OBSOLETE10 = 0xA,
  CURLE_FTP_WEIRD_PASS_REPLY = 0xB,
  CURLE_OBSOLETE12 = 0xC,
  CURLE_FTP_WEIRD_PASV_REPLY = 0xD,
  CURLE_FTP_WEIRD_227_FORMAT = 0xE,
  CURLE_FTP_CANT_GET_HOST = 0xF,
  CURLE_OBSOLETE16 = 0x10,
  CURLE_FTP_COULDNT_SET_TYPE = 0x11,
  CURLE_PARTIAL_FILE = 0x12,
  CURLE_FTP_COULDNT_RETR_FILE = 0x13,
  CURLE_OBSOLETE20 = 0x14,
  CURLE_QUOTE_ERROR = 0x15,
  CURLE_HTTP_RETURNED_ERROR = 0x16,
  CURLE_WRITE_ERROR = 0x17,
  CURLE_OBSOLETE24 = 0x18,
  CURLE_UPLOAD_FAILED = 0x19,
  CURLE_READ_ERROR = 0x1A,
  CURLE_OUT_OF_MEMORY = 0x1B,
  CURLE_OPERATION_TIMEDOUT = 0x1C,
  CURLE_OBSOLETE29 = 0x1D,
  CURLE_FTP_PORT_FAILED = 0x1E,
  CURLE_FTP_COULDNT_USE_REST = 0x1F,
  CURLE_OBSOLETE32 = 0x20,
  CURLE_RANGE_ERROR = 0x21,
  CURLE_HTTP_POST_ERROR = 0x22,
  CURLE_SSL_CONNECT_ERROR = 0x23,
  CURLE_BAD_DOWNLOAD_RESUME = 0x24,
  CURLE_FILE_COULDNT_READ_FILE = 0x25,
  CURLE_LDAP_CANNOT_BIND = 0x26,
  CURLE_LDAP_SEARCH_FAILED = 0x27,
  CURLE_OBSOLETE40 = 0x28,
  CURLE_FUNCTION_NOT_FOUND = 0x29,
  CURLE_ABORTED_BY_CALLBACK = 0x2A,
  CURLE_BAD_FUNCTION_ARGUMENT = 0x2B,
  CURLE_OBSOLETE44 = 0x2C,
  CURLE_INTERFACE_FAILED = 0x2D,
  CURLE_OBSOLETE46 = 0x2E,
  CURLE_TOO_MANY_REDIRECTS = 0x2F,
  CURLE_UNKNOWN_TELNET_OPTION = 0x30,
  CURLE_TELNET_OPTION_SYNTAX = 0x31,
  CURLE_OBSOLETE50 = 0x32,
  CURLE_PEER_FAILED_VERIFICATION = 0x33,
  CURLE_GOT_NOTHING = 0x34,
  CURLE_SSL_ENGINE_NOTFOUND = 0x35,
  CURLE_SSL_ENGINE_SETFAILED = 0x36,
  CURLE_SEND_ERROR = 0x37,
  CURLE_RECV_ERROR = 0x38,
  CURLE_OBSOLETE57 = 0x39,
  CURLE_SSL_CERTPROBLEM = 0x3A,
  CURLE_SSL_CIPHER = 0x3B,
  CURLE_SSL_CACERT = 0x3C,
  CURLE_BAD_CONTENT_ENCODING = 0x3D,
  CURLE_LDAP_INVALID_URL = 0x3E,
  CURLE_FILESIZE_EXCEEDED = 0x3F,
  CURLE_USE_SSL_FAILED = 0x40,
  CURLE_SEND_FAIL_REWIND = 0x41,
  CURLE_SSL_ENGINE_INITFAILED = 0x42,
  CURLE_LOGIN_DENIED = 0x43,
  CURLE_TFTP_NOTFOUND = 0x44,
  CURLE_TFTP_PERM = 0x45,
  CURLE_REMOTE_DISK_FULL = 0x46,
  CURLE_TFTP_ILLEGAL = 0x47,
  CURLE_TFTP_UNKNOWNID = 0x48,
  CURLE_REMOTE_FILE_EXISTS = 0x49,
  CURLE_TFTP_NOSUCHUSER = 0x4A,
  CURLE_CONV_FAILED = 0x4B,
  CURLE_CONV_REQD = 0x4C,
  CURLE_SSL_CACERT_BADFILE = 0x4D,
  CURLE_REMOTE_FILE_NOT_FOUND = 0x4E,
  CURLE_SSH = 0x4F,
  CURLE_SSL_SHUTDOWN_FAILED = 0x50,
  CURLE_AGAIN = 0x51,
  CURLE_SSL_CRL_BADFILE = 0x52,
  CURLE_SSL_ISSUER_ERROR = 0x53,
  CURL_LAST = 0x54,
};

/* 1411 */
enum CURLoption
{
  CURLOPT_FILE = 0x2711,
  CURLOPT_URL = 0x2712,
  CURLOPT_PORT = 0x3,
  CURLOPT_PROXY = 0x2714,
  CURLOPT_USERPWD = 0x2715,
  CURLOPT_PROXYUSERPWD = 0x2716,
  CURLOPT_RANGE = 0x2717,
  CURLOPT_INFILE = 0x2719,
  CURLOPT_ERRORBUFFER = 0x271A,
  CURLOPT_WRITEFUNCTION = 0x4E2B,
  CURLOPT_READFUNCTION = 0x4E2C,
  CURLOPT_TIMEOUT = 0xD,
  CURLOPT_INFILESIZE = 0xE,
  CURLOPT_POSTFIELDS = 0x271F,
  CURLOPT_REFERER = 0x2720,
  CURLOPT_FTPPORT = 0x2721,
  CURLOPT_USERAGENT = 0x2722,
  CURLOPT_LOW_SPEED_LIMIT = 0x13,
  CURLOPT_LOW_SPEED_TIME = 0x14,
  CURLOPT_RESUME_FROM = 0x15,
  CURLOPT_COOKIE = 0x2726,
  CURLOPT_HTTPHEADER = 0x2727,
  CURLOPT_HTTPPOST = 0x2728,
  CURLOPT_SSLCERT = 0x2729,
  CURLOPT_KEYPASSWD = 0x272A,
  CURLOPT_CRLF = 0x1B,
  CURLOPT_QUOTE = 0x272C,
  CURLOPT_WRITEHEADER = 0x272D,
  CURLOPT_COOKIEFILE = 0x272F,
  CURLOPT_SSLVERSION = 0x20,
  CURLOPT_TIMECONDITION = 0x21,
  CURLOPT_TIMEVALUE = 0x22,
  CURLOPT_CUSTOMREQUEST = 0x2734,
  CURLOPT_STDERR = 0x2735,
  CURLOPT_POSTQUOTE = 0x2737,
  CURLOPT_WRITEINFO = 0x2738,
  CURLOPT_VERBOSE = 0x29,
  CURLOPT_HEADER = 0x2A,
  CURLOPT_NOPROGRESS = 0x2B,
  CURLOPT_NOBODY = 0x2C,
  CURLOPT_FAILONERROR = 0x2D,
  CURLOPT_UPLOAD = 0x2E,
  CURLOPT_POST = 0x2F,
  CURLOPT_DIRLISTONLY = 0x30,
  CURLOPT_APPEND = 0x32,
  CURLOPT_NETRC = 0x33,
  CURLOPT_FOLLOWLOCATION = 0x34,
  CURLOPT_TRANSFERTEXT = 0x35,
  CURLOPT_PUT = 0x36,
  CURLOPT_PROGRESSFUNCTION = 0x4E58,
  CURLOPT_PROGRESSDATA = 0x2749,
  CURLOPT_AUTOREFERER = 0x3A,
  CURLOPT_PROXYPORT = 0x3B,
  CURLOPT_POSTFIELDSIZE = 0x3C,
  CURLOPT_HTTPPROXYTUNNEL = 0x3D,
  CURLOPT_INTERFACE = 0x274E,
  CURLOPT_KRBLEVEL = 0x274F,
  CURLOPT_SSL_VERIFYPEER = 0x40,
  CURLOPT_CAINFO = 0x2751,
  CURLOPT_MAXREDIRS = 0x44,
  CURLOPT_FILETIME = 0x45,
  CURLOPT_TELNETOPTIONS = 0x2756,
  CURLOPT_MAXCONNECTS = 0x47,
  CURLOPT_CLOSEPOLICY = 0x48,
  CURLOPT_FRESH_CONNECT = 0x4A,
  CURLOPT_FORBID_REUSE = 0x4B,
  CURLOPT_RANDOM_FILE = 0x275C,
  CURLOPT_EGDSOCKET = 0x275D,
  CURLOPT_CONNECTTIMEOUT = 0x4E,
  CURLOPT_HEADERFUNCTION = 0x4E6F,
  CURLOPT_HTTPGET = 0x50,
  CURLOPT_SSL_VERIFYHOST = 0x51,
  CURLOPT_COOKIEJAR = 0x2762,
  CURLOPT_SSL_CIPHER_LIST = 0x2763,
  CURLOPT_HTTP_VERSION = 0x54,
  CURLOPT_FTP_USE_EPSV = 0x55,
  CURLOPT_SSLCERTTYPE = 0x2766,
  CURLOPT_SSLKEY = 0x2767,
  CURLOPT_SSLKEYTYPE = 0x2768,
  CURLOPT_SSLENGINE = 0x2769,
  CURLOPT_SSLENGINE_DEFAULT = 0x5A,
  CURLOPT_DNS_USE_GLOBAL_CACHE = 0x5B,
  CURLOPT_DNS_CACHE_TIMEOUT = 0x5C,
  CURLOPT_PREQUOTE = 0x276D,
  CURLOPT_DEBUGFUNCTION = 0x4E7E,
  CURLOPT_DEBUGDATA = 0x276F,
  CURLOPT_COOKIESESSION = 0x60,
  CURLOPT_CAPATH = 0x2771,
  CURLOPT_BUFFERSIZE = 0x62,
  CURLOPT_NOSIGNAL = 0x63,
  CURLOPT_SHARE = 0x2774,
  CURLOPT_PROXYTYPE = 0x65,
  CURLOPT_ENCODING = 0x2776,
  CURLOPT_PRIVATE = 0x2777,
  CURLOPT_HTTP200ALIASES = 0x2778,
  CURLOPT_UNRESTRICTED_AUTH = 0x69,
  CURLOPT_FTP_USE_EPRT = 0x6A,
  CURLOPT_HTTPAUTH = 0x6B,
  CURLOPT_SSL_CTX_FUNCTION = 0x4E8C,
  CURLOPT_SSL_CTX_DATA = 0x277D,
  CURLOPT_FTP_CREATE_MISSING_DIRS = 0x6E,
  CURLOPT_PROXYAUTH = 0x6F,
  CURLOPT_FTP_RESPONSE_TIMEOUT = 0x70,
  CURLOPT_IPRESOLVE = 0x71,
  CURLOPT_MAXFILESIZE = 0x72,
  CURLOPT_INFILESIZE_LARGE = 0x75A3,
  CURLOPT_RESUME_FROM_LARGE = 0x75A4,
  CURLOPT_MAXFILESIZE_LARGE = 0x75A5,
  CURLOPT_NETRC_FILE = 0x2786,
  CURLOPT_USE_SSL = 0x77,
  CURLOPT_POSTFIELDSIZE_LARGE = 0x75A8,
  CURLOPT_TCP_NODELAY = 0x79,
  CURLOPT_FTPSSLAUTH = 0x81,
  CURLOPT_IOCTLFUNCTION = 0x4EA2,
  CURLOPT_IOCTLDATA = 0x2793,
  CURLOPT_FTP_ACCOUNT = 0x2796,
  CURLOPT_COOKIELIST = 0x2797,
  CURLOPT_IGNORE_CONTENT_LENGTH = 0x88,
  CURLOPT_FTP_SKIP_PASV_IP = 0x89,
  CURLOPT_FTP_FILEMETHOD = 0x8A,
  CURLOPT_LOCALPORT = 0x8B,
  CURLOPT_LOCALPORTRANGE = 0x8C,
  CURLOPT_CONNECT_ONLY = 0x8D,
  CURLOPT_CONV_FROM_NETWORK_FUNCTION = 0x4EAE,
  CURLOPT_CONV_TO_NETWORK_FUNCTION = 0x4EAF,
  CURLOPT_CONV_FROM_UTF8_FUNCTION = 0x4EB0,
  CURLOPT_MAX_SEND_SPEED_LARGE = 0x75C1,
  CURLOPT_MAX_RECV_SPEED_LARGE = 0x75C2,
  CURLOPT_FTP_ALTERNATIVE_TO_USER = 0x27A3,
  CURLOPT_SOCKOPTFUNCTION = 0x4EB4,
  CURLOPT_SOCKOPTDATA = 0x27A5,
  CURLOPT_SSL_SESSIONID_CACHE = 0x96,
  CURLOPT_SSH_AUTH_TYPES = 0x97,
  CURLOPT_SSH_PUBLIC_KEYFILE = 0x27A8,
  CURLOPT_SSH_PRIVATE_KEYFILE = 0x27A9,
  CURLOPT_FTP_SSL_CCC = 0x9A,
  CURLOPT_TIMEOUT_MS = 0x9B,
  CURLOPT_CONNECTTIMEOUT_MS = 0x9C,
  CURLOPT_HTTP_TRANSFER_DECODING = 0x9D,
  CURLOPT_HTTP_CONTENT_DECODING = 0x9E,
  CURLOPT_NEW_FILE_PERMS = 0x9F,
  CURLOPT_NEW_DIRECTORY_PERMS = 0xA0,
  CURLOPT_POSTREDIR = 0xA1,
  CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = 0x27B2,
  CURLOPT_OPENSOCKETFUNCTION = 0x4EC3,
  CURLOPT_OPENSOCKETDATA = 0x27B4,
  CURLOPT_COPYPOSTFIELDS = 0x27B5,
  CURLOPT_PROXY_TRANSFER_MODE = 0xA6,
  CURLOPT_SEEKFUNCTION = 0x4EC7,
  CURLOPT_SEEKDATA = 0x27B8,
  CURLOPT_CRLFILE = 0x27B9,
  CURLOPT_ISSUERCERT = 0x27BA,
  CURLOPT_ADDRESS_SCOPE = 0xAB,
  CURLOPT_CERTINFO = 0xAC,
  CURLOPT_USERNAME = 0x27BD,
  CURLOPT_PASSWORD = 0x27BE,
  CURLOPT_PROXYUSERNAME = 0x27BF,
  CURLOPT_PROXYPASSWORD = 0x27C0,
  CURLOPT_LASTENTRY = 0x27C1,
};

/* 1412 */
enum CURLINFO
{
  CURLINFO_NONE = 0x0,
  CURLINFO_EFFECTIVE_URL = 0x100001,
  CURLINFO_RESPONSE_CODE = 0x200002,
  CURLINFO_TOTAL_TIME = 0x300003,
  CURLINFO_NAMELOOKUP_TIME = 0x300004,
  CURLINFO_CONNECT_TIME = 0x300005,
  CURLINFO_PRETRANSFER_TIME = 0x300006,
  CURLINFO_SIZE_UPLOAD = 0x300007,
  CURLINFO_SIZE_DOWNLOAD = 0x300008,
  CURLINFO_SPEED_DOWNLOAD = 0x300009,
  CURLINFO_SPEED_UPLOAD = 0x30000A,
  CURLINFO_HEADER_SIZE = 0x20000B,
  CURLINFO_REQUEST_SIZE = 0x20000C,
  CURLINFO_SSL_VERIFYRESULT = 0x20000D,
  CURLINFO_FILETIME = 0x20000E,
  CURLINFO_CONTENT_LENGTH_DOWNLOAD = 0x30000F,
  CURLINFO_CONTENT_LENGTH_UPLOAD = 0x300010,
  CURLINFO_STARTTRANSFER_TIME = 0x300011,
  CURLINFO_CONTENT_TYPE = 0x100012,
  CURLINFO_REDIRECT_TIME = 0x300013,
  CURLINFO_REDIRECT_COUNT = 0x200014,
  CURLINFO_PRIVATE = 0x100015,
  CURLINFO_HTTP_CONNECTCODE = 0x200016,
  CURLINFO_HTTPAUTH_AVAIL = 0x200017,
  CURLINFO_PROXYAUTH_AVAIL = 0x200018,
  CURLINFO_OS_ERRNO = 0x200019,
  CURLINFO_NUM_CONNECTS = 0x20001A,
  CURLINFO_SSL_ENGINES = 0x40001B,
  CURLINFO_COOKIELIST = 0x40001C,
  CURLINFO_LASTSOCKET = 0x20001D,
  CURLINFO_FTP_ENTRY_PATH = 0x10001E,
  CURLINFO_REDIRECT_URL = 0x10001F,
  CURLINFO_PRIMARY_IP = 0x100020,
  CURLINFO_APPCONNECT_TIME = 0x300021,
  CURLINFO_CERTINFO = 0x400022,
  CURLINFO_LASTONE = 0x22,
};

/* 1413 */
enum CURLversion
{
  CURLVERSION_FIRST = 0x0,
  CURLVERSION_SECOND = 0x1,
  CURLVERSION_THIRD = 0x2,
  CURLVERSION_FOURTH = 0x3,
  CURLVERSION_LAST = 0x4,
};

/* 1414 */
enum CURLMcode
{
  CURLM_CALL_MULTI_PERFORM = 0xFFFFFFFF,
  CURLM_OK = 0x0,
  CURLM_BAD_HANDLE = 0x1,
  CURLM_BAD_EASY_HANDLE = 0x2,
  CURLM_OUT_OF_MEMORY = 0x3,
  CURLM_INTERNAL_ERROR = 0x4,
  CURLM_BAD_SOCKET = 0x5,
  CURLM_UNKNOWN_OPTION = 0x6,
  CURLM_LAST = 0x7,
};

/* 1415 */
enum CURLMSG
{
  CURLMSG_NONE = 0x0,
  CURLMSG_DONE = 0x1,
  CURLMSG_LAST = 0x2,
};

/* 1416 */
enum bdBandwidthRequest
{
  BD_BANDWIDTH_TEST_REQUEST = 0x0,
  BD_BANDWIDTH_TEST_FINALIZE = 0x1,
};

/* 1417 */
enum bdPagingToken::bdStatus
{
  BD_NOT_STARTED = 0x0,
  BD_IN_PROGRESS = 0x1,
  BD_FINISHED = 0x2,
};

/* 1418 */
enum bdAuthMsgTypes
{
  BD_AUTH_CREATE_ACCOUNT_REQUEST = 0x0,
  BD_AUTH_CREATE_ACCOUNT_REPLY = 0x1,
  BD_AUTH_CHANGE_USER_KEY_REQUEST = 0x2,
  BD_AUTH_CHANGE_USER_KEY_REPLY = 0x3,
  BD_AUTH_RESET_ACCOUNT_REQUEST = 0x4,
  BD_AUTH_RESET_ACCOUNT_REPLY = 0x5,
  BD_AUTH_DELETE_ACCOUNT_REQUEST = 0x6,
  BD_AUTH_DELETE_ACCOUNT_REPLY = 0x7,
  BD_AUTH_MIGRATE_ACCOUNTS_REQUEST = 0x8,
  BD_AUTH_MIGRATE_ACCOUNTS_REPLY = 0x9,
  BD_AUTH_ACCOUNT_FOR_MMP_REQUEST = 0xA,
  BD_AUTH_ACCOUNT_FOR_MMP_REPLY = 0xB,
  BD_AUTH_HOST_FOR_MMP_REQUEST = 0xC,
  BD_AUTH_HOST_FOR_MMP_REPLY = 0xD,
  BD_AUTH_ACCOUNT_FOR_HOST_REQUEST = 0xE,
  BD_AUTH_ACCOUNT_FOR_HOST_REPLY = 0xF,
  BD_AUTH_ANONYMOUS_FOR_MMP_REQUEST = 0x10,
  BD_AUTH_ANONYMOUS_FOR_MMP_REPLY = 0x11,
  BD_AUTH_PS3_FOR_MMP_REQUEST = 0x12,
  BD_AUTH_PS3_FOR_MMP_REPLY = 0x13,
  BD_AUTH_GET_USERNAMES_BY_LICENSE_REQUEST = 0x14,
  BD_AUTH_GET_USERNAMES_BY_LICENSE_REPLY = 0x15,
  BD_AUTH_WII_FOR_MMP_REQUEST = 0x16,
  BD_AUTH_WII_FOR_MMP_REPLY = 0x17,
  BD_AUTH_FOR_DEDICATED_SERVER_REQUEST = 0x18,
  BD_AUTH_FOR_DEDICATED_SERVER_REPLY = 0x19,
  BD_AUTH_FOR_DEDICATED_SERVER_REQUEST_RSA = 0x1A,
  BD_AUTH_FOR_DEDICATED_SERVER_REPLY_RSA = 0x1B,
  BD_AUTH_STEAM_FOR_MMP_REQUEST = 0x1C,
  BD_AUTH_STEAM_FOR_MMP_REPLY = 0x1D,
  BD_AUTH_3DS_FOR_MMP_REQUEST = 0x1E,
  BD_AUTH_3DS_FOR_MMP_REPLY = 0x1F,
  BD_AUTH_CODO_FOR_MMP_REQUEST = 0x20,
  BD_AUTH_CODO_FOR_MMP_REPLY = 0x21,
  BD_AUTH_ABACCOUNTS_FOR_MMP_REQUEST = 0x22,
  BD_AUTH_ABACCOUNTS_FOR_MMP_REPLY = 0x23,
  BD_AUTH_WIIU_FOR_MMP_REQUEST = 0x24,
  BD_AUTH_WIIU_FOR_MMP_REPLY = 0x25,
  BD_AUTH_WIIU_FOR_MMP_REQUEST2 = 0x26,
  BD_AUTH_WIIU_FOR_MMP_REPLY2 = 0x27,
  BD_AUTH_WIIU_SECONDARY_FOR_MMP_REQUEST = 0x28,
  BD_AUTH_WIIU_SECONDARY_FOR_MMP_REPLY = 0x29,
};

/* 1419 */
enum bdEventType
{
  BD_NEW_NOTIFICATION = 0x1,
  BD_FRIENDSHIP_PROPOSAL = 0x2,
  BD_TEAM_PROPOSAL = 0x3,
  BD_FRIEND_CONNECTED = 0x4,
  BD_FRIEND_DISCONNECTED = 0x5,
  BD_SESSION_INVITATION = 0x6,
  BD_CHANNEL_CHAT_BROADCAST_MSG = 0x7,
  BD_CHANNEL_CHAT_WHISPER_MSG = 0x8,
  BD_CHANNEL_USER_SUBSCRIBED = 0x9,
  BD_CHANNEL_USER_UNSUBSCRIBED = 0xA,
  BD_TEAMMEMBER_CONNECTED = 0xB,
  BD_TEAMMEMBER_DISCONNECTED = 0xC,
  BD_FRIEND_RICH_PRESENCE_UPDATED = 0xD,
  BD_FRIEND_CHAT_MSG = 0xF,
  BD_TEAM_CHAT_MSG = 0x10,
  BD_NOTIFY_LEAVE = 0x11,
  BD_NEW_MAIL = 0x12,
  BD_CHALLENGES_RECEIVED = 0x13,
  BD_ASYNCHRONOUS_RESULT = 0x14,
  BD_GLOBAL_INSTANT_MESSAGE = 0x15,
  BD_MULTIPLE_LOGONS = 0x1D,
  BD_PLAYER_BANNED = 0x1E,
  BD_CHANNEL_USER_PROMOTED = 0x1F,
  BD_CHANNEL_USER_KICKED = 0x20,
  BD_FEATURE_BAN = 0x21,
  BD_GMSG_GROUP_MESSAGE = 0x22,
  BD_GMSG_BROADCAST = 0x23,
  BD_TENCENT_AAS_RECORD = 0x24,
  BD_YOUTUBE_REGISTRATION = 0x25,
  BD_NOT_WHITE_LISTED = 0x26,
};

/* 1420 */
enum $C9F4CEB8FE87A3A762913B3303A31350
{
  LTC_ASN1_EOL = 0x0,
  LTC_ASN1_BOOLEAN = 0x1,
  LTC_ASN1_INTEGER = 0x2,
  LTC_ASN1_SHORT_INTEGER = 0x3,
  LTC_ASN1_BIT_STRING = 0x4,
  LTC_ASN1_OCTET_STRING = 0x5,
  LTC_ASN1_NULL = 0x6,
  LTC_ASN1_OBJECT_IDENTIFIER = 0x7,
  LTC_ASN1_IA5_STRING = 0x8,
  LTC_ASN1_PRINTABLE_STRING = 0x9,
  LTC_ASN1_UTF8_STRING = 0xA,
  LTC_ASN1_UTCTIME = 0xB,
  LTC_ASN1_CHOICE = 0xC,
  LTC_ASN1_SEQUENCE = 0xD,
  LTC_ASN1_SET = 0xE,
  LTC_ASN1_SETOF = 0xF,
};

/* 1421 */
enum ltc_pkcs_1_v1_5_blocks
{
  LTC_LTC_PKCS_1_EMSA = 0x1,
  LTC_LTC_PKCS_1_EME = 0x2,
};

/* 1422 */
enum eBspSurfRegionType
{
  BSP_SURF_REGION_LIT = 0x0,
  BSP_SURF_REGION_LIGHT_MAP = 0x1,
  BSP_SURF_REGION_TYPE_COUNT = 0x2,
};

/* 1423 */
enum $768049DC628C68F0AFF545284C646513
{
  R_REFLECTIONPROBESELECTION_OFF = 0x0,
  R_REFLECTIONPROBESELECTION_BSP = 0x1,
  R_REFLECTIONPROBESELECTION_STATICMODELS = 0x2,
  R_REFLECTIONPROBESELECTION_ENTS = 0x3,
  R_REFLECTIONPROBESELECTION_COUNT = 0x4,
};

/* 1424 */
enum $8ABCB3C5B58E4C2A3C8471A568218CA8
{
  ADD_ALL_BSP_SURFACES_LIT = 0x0,
  ADD_ALL_BSP_SURFACES_LIT_TRANS = 0x1,
  ADD_ALL_BSP_SURFACES_EMISSIVE_OPAQUE = 0x2,
  ADD_ALL_BSP_SURFACES_EMISSIVE_TRANS = 0x3,
};

/* 1425 */
enum ViewParmsType
{
  VIEW_PARMS_CAMERA = 0x0,
  VIEW_PARMS_SHADOW = 0x1,
};

/* 1426 */
enum CullType
{
  CULL_TYPE_INVALID = 0x0,
  CULL_TYPE_BSP = 0x1,
  CULL_TYPE_STATIC_MODEL = 0x2,
  CULL_TYPE_XMODEL_RIGID = 0x3,
};

/* 1427 */
typedef $55F491858F073C2D54717BB4D444F4DC $541891AE75379CEC9EA07DF2F03085F0;

/* 1428 */
enum TestForSunShadowList
{
  SUNSHADOWLIST_TEST_DISABLE = 0x0,
  SUNSHADOWLIST_TEST_ENABLE = 0x1,
};

/* 1429 */
enum $F2FF9957A69341E6AF19FA359B8A86E7
{
  R_PRIMARYLIGHTLINES_OFF = 0x0,
  R_PRIMARYLIGHTLINES_BSP = 0x1,
  R_PRIMARYLIGHTLINES_STATICMODELS = 0x2,
  R_PRIMARYLIGHTLINES_SCENEMODELS = 0x3,
  R_PRIMARYLIGHTLINES_DOBJS = 0x4,
  R_PRIMARYLIGHTLINES_DYNENT_MODELS = 0x5,
  R_PRIMARYLIGHTLINES_COUNT = 0x6,
};

/* 1430 */
enum GfxDrawSceneMethod
{
  GFX_DRAW_SCENE_NONE = 0x0,
  GFX_DRAW_SCENE_FULLBRIGHT = 0x1,
  GFX_DRAW_SCENE_DEBUGSHADER = 0x2,
  GFX_DRAW_SCENE_STANDARD = 0x3,
};

/* 1431 */
enum $7FDEEB5A5CE3FD5200D8B96A9CB0D4BF
{
  DOBJ_MAX_SURFS = 0x80,
  XMODEL_MAX_SURFS = 0x50,
};

/* 1432 */
enum StaticModelFlag
{
  STATIC_MODEL_FLAG_NO_SHADOW = 0x1,
  STATIC_MODEL_FLAG_LIGHTMAP_VC = 0x2,
};

/* 1433 */
enum $0E9EE34A21A8F04CA050E8897323EB2F
{
  CUSTOM_SAMPLER_REFLECTION_PROBE = 0x0,
  CUSTOM_SAMPLER_LIGHTMAP_PRIMARY = 0x1,
  CUSTOM_SAMPLER_LIGHTMAP_SECONDARY = 0x2,
  CUSTOM_SAMPLER_COUNT = 0x3,
};

/* 1434 */
enum $351D4A514B598C11AE7AEF5E0316605E
{
  MAPTYPE_NONE = 0x0,
  MAPTYPE_INVALID1 = 0x1,
  MAPTYPE_INVALID2 = 0x2,
  MAPTYPE_2D = 0x3,
  MAPTYPE_3D = 0x4,
  MAPTYPE_CUBE = 0x5,
  MAPTYPE_COUNT = 0x6,
};

/* 1435 */
enum $EBDC4FECEDB8FE0E43D2D8DFDB674FDB
{
  CINEMATIC_IMAGE_MAIN0 = 0x0,
  CINEMATIC_IMAGE_MAIN1 = 0x1,
  CINEMATIC_IMAGES_REQUIRED_MAIN = 0x2,
  CINEMATIC_IMAGES_REQUIRED = 0x2,
};

/* 1436 */
enum GfxScreenshotType
{
  R_SCREENSHOT_JPG = 0x0,
  R_SCREENSHOT_TGA = 0x1,
};

/* 1437 */
enum $B4B8BED61B7FCB74F140B41556B61C01
{
  CULL_STATE_OUT = 0x0,
  CULL_STATE_BOUNDED_PENDING = 0x1,
  CULL_STATE_BOUNDED = 0x2,
  CULL_STATE_SKINNED_PENDING = 0x3,
  CULL_STATE_DONE = 0x4,
};

/* 1438 */
enum $E5FDC3FBB75517B69F0A5319C6E61587
{
  R_SHOWOCCLUDERS_LEVEL_0 = 0x0,
  R_SHOWOCCLUDERS_LEVEL_1 = 0x1,
  R_SHOWOCCLUDERS_LEVEL_2 = 0x2,
  R_SHOWOCCLUDERS_LEVEL_3 = 0x3,
  R_SHOWOCCLUDERS_LEVEL_4 = 0x4,
  R_SHOWOCCLUDERS_COUNT = 0x5,
};

/* 1439 */
enum DpvsForceBevels
{
  DPVS_DONT_FORCE_BEVELS = 0x0,
  DPVS_FORCE_BEVELS = 0x1,
};

/* 1440 */
enum DpvsClipChildren
{
  DPVS_DONT_CLIP_CHILDREN = 0x0,
  DPVS_CLIP_CHILDREN = 0x1,
};

/* 1441 */
enum $964CE85D34452C1B554C0FA53C6C1DC3
{
  TYPE_SINGLE = 0x0,
  TYPE_BATCH = 0x1,
};

/* 1442 */
typedef $0E9EE34A21A8F04CA050E8897323EB2F $1F952145B8589A29C63E97A17240E602;

/* 1443 */
enum LitPhaseID
{
  LIT_PHASE_LIT_BSP = 0x0,
  LIT_PHASE_LIT_STATIC_MODEL = 0x1,
  LIT_PHASE_LIT = 0x2,
  LIT_PHASE_LIT_BSP_POST_RESOLVE = 0x3,
  LIT_PHASE_LIT_STATIC_MODEL_POST_RESOLVE = 0x4,
  LIT_PHASE_LIT_POST_RESOLVE = 0x5,
  LIT_PHASE_SONAR = 0x6,
  LIT_PHASE_LIGHT_MAP_BSP = 0x7,
  LIT_PHASE_LIGHT_MAP_STATIC_MODEL = 0x8,
  LIT_PHASE_LIGHT_MAP = 0x9,
  LIT_PHASE_LIGHT_MAP_BSP_POST_RESOLVE = 0xA,
  LIT_PHASE_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 0xB,
  LIT_PHASE_LIGHT_MAP_POST_RESOLVE = 0xC,
  LIT_PHASE_DEPTH_HACK = 0xD,
};

/* 1444 */
enum $11511110F7F737297C5C7A26A809FE38
{
  IMAGE_PROG_SHADOWMAP_SUN = 0x0,
  IMAGE_PROG_SHADOWMAP_SPOT = 0x1,
  IMAGE_PROG_FLOATZ = 0x2,
  IMAGE_PROG_POST_EFFECT_SRC = 0x3,
  IMAGE_PROG_POST_EFFECT_0 = 0x4,
  IMAGE_PROG_POST_EFFECT_1 = 0x5,
  IMAGE_PROG_PINGPONG_0 = 0x6,
  IMAGE_PROG_PINGPONG_1 = 0x7,
  IMAGE_PROG_RESOLVED_SCENE = 0x8,
  IMAGE_PROG_SCENE = 0x9,
  IMAGE_PROG_SAVEDSCREEN = 0xA,
  IMAGE_PROG_SCENE_DEPTH = 0xB,
  IMAGE_PROG_RAW = 0xC,
  IMAGE_PROG_SSAO_CSZ = 0xD,
  IMAGE_PROG_SSAO_CSZ_0 = 0xE,
  IMAGE_PROG_SSAO_CSZ_1 = 0xF,
  IMAGE_PROG_SSAO_CSZ_2 = 0x10,
  IMAGE_PROG_SSAO_CSZ_3 = 0x11,
  IMAGE_PROG_SSAO_CSZ_4 = 0x12,
  IMAGE_PROG_SSAO_CSZ_5 = 0x13,
  IMAGE_PROG_SSAO_1 = 0x14,
  IMAGE_PROG_SSAO_2 = 0x15,
  IMAGE_PROG_TXAA_FEEDBACK = 0x16,
  IMAGE_PROG_TXAA_SRGB = 0x17,
  IMAGE_PROG_TXAA_SRGB_SCENE = 0x18,
  IMAGE_PROG_MODEL_LIGHTING = 0x19,
  IMAGE_PROG_LUT = 0x1A,
  IMAGE_PROG_UI3D = 0x1B,
  IMAGE_PROG_UI3D_PING_PONG = 0x1C,
  IMAGE_PROG_MISSILE_CAM = 0x1D,
  IMAGE_PROG_FLOATZ_MISSILE_CAM = 0x1E,
  IMAGE_PROG_MISSILE_CAM_MULTI_0 = 0x1F,
  IMAGE_PROG_MISSILE_CAM_MULTI_1 = 0x20,
  IMAGE_PROG_MISSILE_CAM_MULTI_2 = 0x21,
  IMAGE_PROG_MISSILE_CAM_MULTI_3 = 0x22,
  IMAGE_PROG_SONAR = 0x23,
  IMAGE_PROG_SONAR_BLUR = 0x24,
  IMAGE_PROG_SONAR_DEPTH = 0x25,
  IMAGE_PROG_COMPOSITE = 0x26,
  IMAGE_PROG_DOF_SCENE_MASK_PING = 0x27,
  IMAGE_PROG_DOF_SCENE_MASK_PONG = 0x28,
  IMAGE_PROG_DOF_SCENE_FP16 = 0x29,
  IMAGE_PROG_DOF_SCENE_FP16_0 = 0x2A,
  IMAGE_PROG_DOF_SCENE_FP16_1 = 0x2B,
  IMAGE_PROG_DOF_SCENE_FP16_2 = 0x2C,
  IMAGE_PROG_DOF_SCENE_FP16_3 = 0x2D,
  IMAGE_PROG_DOF_SCENE_FP16_4 = 0x2E,
  IMAGE_PROG_DOF_SCENE_FP16_5 = 0x2F,
  IMAGE_PROG_DOF_SCENE_FINAL = 0x30,
  IMAGE_PROG_BLOOM_MIP1_PING = 0x31,
  IMAGE_PROG_BLOOM_MIP1_PONG = 0x32,
  IMAGE_PROG_BLOOM_MIP2_PING = 0x33,
  IMAGE_PROG_BLOOM_MIP2_PONG = 0x34,
  IMAGE_PROG_BLOOM_MIP3_PING = 0x35,
  IMAGE_PROG_BLOOM_MIP3_PONG = 0x36,
  IMAGE_PROG_BLOOM_MIP4_PING = 0x37,
  IMAGE_PROG_BLOOM_MIP4_PONG = 0x38,
  IMAGE_PROG_BLOOM_STREAK = 0x39,
  IMAGE_PROG_LUT2D = 0x3A,
  IMAGE_PROG_COUNT = 0x3B,
};

/* 1445 */
enum GfxDepthHackDrawMode
{
  GFX_DEPTH_HACK_IGNORE_STENCIL = 0x0,
  GFX_DEPTH_HACK_FILL_STENCIL = 0x1,
  GFX_DEPTH_HACK_TEST_STENCIL = 0x2,
};

/* 1446 */
enum $AB00C10DF62D9021BD6CEC46BE490B19
{
  DRAWLIST_LIT_BSP = 0x0,
  DRAWLIST_LIT_STATIC_MODEL = 0x1,
  DRAWLIST_LIT = 0x2,
  DRAWLIST_LIT_BSP_POST_RESOLVE = 0x3,
  DRAWLIST_LIT_STATIC_MODEL_POST_RESOLVE = 0x4,
  DRAWLIST_LIT_POST_RESOLVE = 0x5,
  DRAWLIST_LIT_SONAR = 0x6,
  DRAWLIST_LIGHT_MAP_BSP = 0x7,
  DRAWLIST_LIGHT_MAP_STATIC_MODEL = 0x8,
  DRAWLIST_LIGHT_MAP = 0x9,
  DRAWLIST_LIGHT_MAP_BSP_POST_RESOLVE = 0xA,
  DRAWLIST_LIGHT_MAP_STATIC_MODEL_POST_RESOLVE = 0xB,
  DRAWLIST_LIGHT_MAP_POST_RESOLVE = 0xC,
  DRAWLIST_DEPTH_HACK = 0xD,
  DRAWLIST_TRANS = 0xE,
  DRAWLIST_TRANS_POST_FX = 0xF,
  DRAWLIST_LIT_QUASI_OPAQUE = 0x10,
  DRAWLIST_EMISSIVE_OPAQUE = 0x11,
  DRAWLIST_EMISSIVE_FX = 0x12,
  DRAWLIST_SUPERFLARE = 0x13,
  DRAWLIST_VIEWMODEL_FX = 0x14,
  DRAWLIST_VIEWMODEL_TRANS = 0x15,
  DRAWLIST_POST_BLUR = 0x16,
  DRAWLIST_SUN_SHADOW_MAP0 = 0x17,
  DRAWLIST_SUN_SHADOW_MAP1 = 0x18,
  DRAWLIST_SPOT_SHADOW_MAP0 = 0x19,
  DRAWLIST_SPOT_SHADOW_MAP1 = 0x1A,
  DRAWLIST_SPOT_SHADOW_MAP2 = 0x1B,
  DRAWLIST_SPOT_SHADOW_MAP3 = 0x1C,
  DRAWLIST_COUNT = 0x1D,
};

/* 1447 */
enum $D899EEF0576FFDDDFA475DD9DA27699D
{
  MTL_PREPASS_STANDARD = 0x0,
  MTL_PREPASS_NONSTANDARD = 0x1,
  MTL_PREPASS_NONE = 0x2,
  MTL_PREPASS_ALPHA_NO_OCCLUSION = 0x3,
  MTL_PREPASS_TYPECOUNT = 0x4,
};

/* 1448 */
enum $C4CF83DDB732D64A0068052DBFEEC90D
{
  R_DEBUG_PERFORMANACE_NONE = 0x0,
  R_DEBUG_PERFORMANACE_CURRENT = 0x1,
  R_DEBUG_PERFORMANACE_AVERAGE = 0x2,
  R_DEBUG_PERFORMANACE_COUNT = 0x3,
};

/* 1449 */
enum LightHasShadowMap
{
  LIGHT_HAS_SHADOWMAP = 0x0,
  LIGHT_HAS_NO_SHADOWMAP = 0x1,
};

/* 1450 */
enum $9F4D0CAD83AB850B6366D2C46EDBBA84
{
  VERTEX_SHADER_NONE = 0x0,
  VERTEX_SHADER_MODEL_LIT = 0x1,
  VERTEX_SHADER_MODEL_LIT_LIGHTMAP_VC = 0x2,
  VERTEX_SHADER_MODEL_UNLIT = 0x3,
};

/* 1451 */
enum $4A14966BA591075B7E947292EB04A5A9
{
  CUSTOMINDEX_XMODEL_HAS_CULL_INFO = 0x1,
  CUSTOMINDEX_XMODEL_SHADER_CONSTANT_SET_MASK = 0x1FC,
  CUSTOMINDEX_CODEMESH_ENABLE_DEPTHHACK = 0x1,
};

/* 1452 */
enum SuperflareDrawlistModes
{
  R_SUPERFLARE_DRAWLIST_OFF = 0x0,
  R_SUPERFLARE_DRAWLIST_PRE_VIEWMODEL = 0x1,
  R_SUPERFLARE_DRAWLIST_POST_VIEWMODEL = 0x2,
  R_SUPERFLARE_DRAWLIST_POST_BLUR = 0x3,
  R_SUPERFLARE_DRAWLIST_COUNT = 0x4,
};

/* 1453 */
enum $A1DDBD79F25272D3C12DFFE5D3A639A2
{
  R_ALPHA_OVERRIDE_NONE = 0x0,
  R_ALPHA_OVERRIDE_255 = 0x1,
  R_ALPHA_OVERRIDE_192 = 0x2,
  R_ALPHA_OVERRIDE_128 = 0x3,
  R_ALPHA_OVERRIDE_COUNT = 0x4,
};

/* 1454 */
enum $5384EEE03C0470984D8051ABE23793BA
{
  R_SPECULAR_OVERRIDE_NON_METAL = 0x0,
  R_SPECULAR_OVERRIDE_NONE = 0x1,
  R_SPECULAR_OVERRIDE_METAL = 0x2,
  R_SPECULAR_OVERRIDE_COUNT = 0x3,
};

/* 1455 */
enum $6B0FAAEB1760EF1F2C17072BEFE38EC1
{
  R_GLOSS_OVERRIDE_0 = 0x0,
  R_GLOSS_OVERRIDE_NONE = 0x1,
  R_GLOSS_OVERRIDE_255 = 0x2,
  R_GLOSS_OVERRIDE_204 = 0x3,
  R_GLOSS_OVERRIDE_153 = 0x4,
  R_GLOSS_OVERRIDE_102 = 0x5,
  R_GLOSS_OVERRIDE_51 = 0x6,
  R_GLOSS_OVERRIDE_COUNT = 0x7,
};

/* 1456 */
enum $C4601A422CA03737CEA2976DFE100EF6
{
  R_OCCLUSION_OVERRIDE_0 = 0x0,
  R_OCCLUSION_OVERRIDE_NONE = 0x1,
  R_OCCLUSION_OVERRIDE_255 = 0x2,
  R_OCCLUSION_OVERRIDE_128 = 0x3,
  R_OCCLUSION_OVERRIDE_COUNT = 0x4,
};

/* 1457 */
enum $D6D873938D2EAC70BBDCF93D3349E4FB
{
  R_FB_COLOR_DEBUG_NONE = 0x0,
  R_FB_COLOR_DEBUG_SCREEN = 0x1,
  R_FB_COLOR_DEBUG_FEEDBACK = 0x2,
  R_FB_COLOR_DEBUG_COUNT = 0x3,
};

/* 1458 */
enum $E2CDA8A82BF57EFA22051CF93D09120A
{
  R_SHOW_COLLISION_NONE = 0x0,
  R_SHOW_COLLISION_ALL = 0x1,
  R_SHOW_COLLISION_PLAYER = 0x2,
  R_SHOW_COLLISION_BULLET = 0x3,
  R_SHOW_COLLISION_MISSILE = 0x4,
  R_SHOW_COLLISION_VEHICLE = 0x5,
  R_SHOW_COLLISION_MONSTER = 0x6,
  R_SHOW_COLLISION_ITEM = 0x7,
  R_SHOW_COLLISION_CANSHOOT = 0x8,
  R_SHOW_COLLISION_AINOSIGHT = 0x9,
  R_SHOW_COLLISION_COUNT = 0xA,
};

/* 1459 */
enum $2CD1931032F3F4B08177F7A266F70BEB
{
  R_SHOW_COLLISION_GROUPS_ALL = 0x0,
  R_SHOW_COLLISION_GROUPS_BRUSH = 0x1,
  R_SHOW_COLLISION_GROUPS_TERRAIN = 0x2,
  R_SHOW_COLLISION_GROUPS_COUNT = 0x3,
};

/* 1460 */
enum $B1500625AD77958F20BE412F803D9A1A
{
  R_SHOW_COLLISION_POLYTYPE_ALL = 0x0,
  R_SHOW_COLLISION_POLYTYPE_WIREFRAME = 0x1,
  R_SHOW_COLLISION_POLYTYPE_INTERIOR = 0x2,
  R_SHOW_COLLISION_POLYTYPE_COUNT = 0x3,
};

/* 1461 */
enum $E81C4FB232F7235B5FFDFADF1F4CFED1
{
  R_DEBUGSHADER_NONE = 0x0,
  R_DEBUGSHADER_TEXTURE = 0x1,
  R_DEBUGSHADER_TANGENT = 0x2,
  R_DEBUGSHADER_BINORMAL = 0x3,
  R_DEBUGSHADER_NORMAL = 0x4,
  R_DEBUGSHADER_LMAPDIR = 0x5,
  R_DEBUGSHADER_COUNT = 0x6,
};

/* 1462 */
enum $A9C5BD9C84CD6680CDF0F8E5D4D1C1A0
{
  GFX_SM_OVERLAY_OFF = 0x0,
  GFX_SM_OVERLAY_SUN = 0x1,
  GFX_SM_OVERLAY_SPOT = 0x2,
  GFX_SM_OVERLAY_COUNT = 0x3,
};

/* 1463 */
enum $C5F35AB99D4F0E9933C52083AE7D4A61
{
  GFX_AA_ALPHA_OFF = 0x0,
  GFX_AA_ALPHA_TO_COVERAGE = 0x1,
  GFX_AA_ALPHA_SUPERSAMPLE = 0x2,
  GFX_AA_ALPHA_COUNT = 0x3,
};

/* 1464 */
enum $A944181E10C925239B04A13D9B7AD208
{
  R_SHOWTESS_OFF = 0x0,
  R_SHOWTESS_TECH = 0x1,
  R_SHOWTESS_TECHSET = 0x2,
  R_SHOWTESS_MATERIAL = 0x3,
  R_SHOWTESS_VERTEX_SHADER = 0x4,
  R_SHOWTESS_PIXEL_SHADER = 0x5,
  R_SHOWTESS_COUNT = 0x6,
};

/* 1465 */
enum $BAB9ACD025604F7E057259C62F656B8A
{
  R_MIP_FILTER_UNCHANGED = 0x0,
  R_MIP_FILTER_FORCE_LINEAR = 0x1,
  R_MIP_FILTER_FORCE_NEAREST = 0x2,
  R_MIP_FILTER_FORCE_NO_MIPS = 0x3,
  R_MIP_FILTER_COUNT = 0x4,
};

/* 1466 */
enum $91D8F3EB46CD7454743C35070698CA5A
{
  STEREO_MODE_2D = 0x0,
  STEREO_MODE_3D = 0x1,
};

/* 1467 */
enum R_STREAMPAINT_TYPES
{
  R_STREAMPAINT_OFF = 0x0,
  R_STREAMPAINT_RENDEREDMIP = 0x1,
  R_STREAMPAINT_RENDERED_AND_LOADED_MIP = 0x2,
  R_STREAMPAINT_MAX_MATERIAL_MEMORY = 0x3,
  R_STREAMPAINT_LOADED_MATERIAL_MEMORY = 0x4,
  R_STREAMPAINT_TYPE_COUNT = 0x5,
};

/* 1468 */
enum DBLOCK_READY
{
  DBLOCK_EMPTY = 0x0,
  DBLOCK_READY_FOG = 0x1,
  DBLOCK_READY_COLOR = 0x2,
  DBLOCK_READY_BLOOM = 0x3,
  DBLOCK_READY_WSI = 0x4,
};

/* 1469 */
enum DVBLOCK_FOG
{
  FOG_BaseDist = 0x0,
  FOG_HalfDist = 0x1,
  FOG_BaseHeight = 0x2,
  FOG_HalfHeight = 0x3,
  FOG_ColorR = 0x4,
  FOG_ColorG = 0x5,
  FOG_ColorB = 0x6,
  FOG_Opacity = 0x7,
  FOG_SunColorR = 0x8,
  FOG_SunColorG = 0x9,
  FOG_SunColorB = 0xA,
  FOG_SunOpacity = 0xB,
  FOG_SunPitch = 0xC,
  FOG_SunYaw = 0xD,
  FOG_SunInner = 0xE,
  FOG_SunOuter = 0xF,
  FOG_MAX = 0x10,
};

/* 1470 */
enum DVBLOCK_VC_BLOOM
{
  BLOOM_vc_LIB = 0x0,
  BLOOM_vc_LIG = 0x1,
  BLOOM_vc_LIW = 0x2,
  BLOOM_vc_LOB = 0x3,
  BLOOM_vc_LOW = 0x4,
  BLOOM_vc_RGBH = 0x5,
  BLOOM_vc_RGBL = 0x6,
  BLOOM_vc_YH = 0x7,
  BLOOM_vc_YL = 0x8,
  BLOOM_VC_MAX = 0x9,
};

/* 1471 */
enum DVBLOCK_VC_COLOR
{
  COLOR_vc_RS = 0x0,
  COLOR_vc_RE = 0x1,
  COLOR_vc_SMR = 0x2,
  COLOR_vc_SMG = 0x3,
  COLOR_vc_SMB = 0x4,
  COLOR_vc_MMR = 0x5,
  COLOR_vc_MMG = 0x6,
  COLOR_vc_MMB = 0x7,
  COLOR_vc_HMR = 0x8,
  COLOR_vc_HMG = 0x9,
  COLOR_vc_HMB = 0xA,
  COLOR_vc_FGM = 0xB,
  COLOR_vc_FSM = 0xC,
  COLOR_vc_FBM = 0xD,
  COLOR_VC_MAX = 0xE,
};

/* 1472 */
enum DVBLOCK_WSI
{
  WSI_enable = 0x0,
  WSI_ev = 0x1,
  WSI_pitch = 0x2,
  WSI_yaw = 0x3,
  WSI_MAX = 0x4,
};

/* 1473 */
enum GfxAspectRatio
{
  GFX_ASPECT_RATIO_AUTO = 0x0,
  GFX_ASPECT_RATIO_STANDARD = 0x1,
  GFX_ASPECT_RATIO_WIDE_16_10 = 0x2,
  GFX_ASPECT_RATIO_WIDE_16_9 = 0x3,
  GFX_ASPECT_RATIO_COUNT = 0x4,
};

/* 1474 */
enum $B69ED4B8C5590B591DE6E818DF3A53E7
{
  R_CODEC_MJPEG = 0x0,
  R_CODEC_VPX = 0x1,
  R_CODEC_COUNT = 0x2,
};

/* 1475 */
enum $C2524787AA08E890D9D95C7E8CE96B80
{
  R_CLIP_SIZE_360 = 0x0,
  R_CLIP_SIZE_480 = 0x1,
  R_CLIP_SIZE_720 = 0x2,
  R_CLIP_SIZE_1080 = 0x3,
  R_CLIP_SIZE_COUNT = 0x4,
};

/* 1476 */
enum $D1F8C9E5B2133630ECD99F38087A5540
{
  R_LOD_INFO_NONE = 0x0,
  R_LOD_INFO_ALL = 0x1,
  R_LOD_INFO_CUR_LOD_ONLY = 0x2,
  R_LOD_INFO_CUR_DIST_ONLY = 0x3,
  R_LOD_INFO_AUTO_DIST_ONLY = 0x4,
  R_LOD_INFO_COUNT = 0x5,
};

/* 1477 */
enum $9C2B01E614D4804D5258A3417D3A7F16
{
  R_COLOR_OVERRIDE_BLACK = 0x0,
  R_COLOR_OVERRIDE_NONE = 0x1,
  R_COLOR_OVERRIDE_WHITE = 0x2,
  R_COLOR_OVERRIDE_GRAY_LINEAR = 0x3,
  R_COLOR_OVERRIDE_GRAY_SRGB = 0x4,
  R_COLOR_OVERRIDE_COUNT = 0x5,
};

/* 1478 */
enum PerfTimerDisplayMode
{
  PERF_TIMER_MODE_TOP = 0x0,
  PERF_TIMER_MODE_ALL = 0x1,
  PERF_TIMER_MODE_ACTIVE = 0x2,
  PERF_TIMER_MODE_MAJOR = 0x3,
  PERF_TIMER_MODE_MINOR = 0x4,
  PERF_TIMER_MODE_UNKNOWN = 0x5,
};

/* 1479 */
enum PerfTimerDisplayType
{
  PERF_TIMER_TYPE_STANDARD = 0x0,
  PERF_TIMER_TYPE_IN_PLACE = 0x1,
  PERF_TIMER_TYPE_COM_ONLY = 0x2,
  PERF_TIMER_TYPE_UNKNOWN = 0x3,
};

/* 1480 */
enum GPUTimerId
{
  GPU_TIMER_UI3D = 0x0,
  GPU_TIMER_LIT_SONAR = 0x1,
  GPU_TIMER_SHADOW_TOTAL = 0x2,
  GPU_TIMER_SUN_SHADOW_TOTAL = 0x3,
  GPU_TIMER_SPOT_SHADOW_TOTAL = 0x4,
  GPU_TIMER_SUN_SHADOW_0 = 0x5,
  GPU_TIMER_SUN_SHADOW_1 = 0x6,
  GPU_TIMER_SPOT_SHADOW_0 = 0x7,
  GPU_TIMER_SPOT_SHADOW_1 = 0x8,
  GPU_TIMER_SPOT_SHADOW_2 = 0x9,
  GPU_TIMER_SPOT_SHADOW_3 = 0xA,
  GPU_TIMER_MAINPASS_TOTAL = 0xB,
  GPU_TIMER_CLEAR_SCREEN = 0xC,
  GPU_TIMER_DEPTH_HACK = 0xD,
  GPU_TIMER_DEPTH_PREPASS = 0xE,
  GPU_TIMER_ZCULL_RELOAD = 0xF,
  GPU_TIMER_LIT_BSP = 0x10,
  GPU_TIMER_LIT_SMODEL = 0x11,
  GPU_TIMER_LIT = 0x12,
  GPU_TIMER_LIGHTMAP = 0x13,
  GPU_TIMER_EMISSIVE_OPAQUE = 0x14,
  GPU_TIMER_LIT_QUASI_OPAQUE = 0x15,
  GPU_TIMER_RESOLVE_SCENE = 0x16,
  GPU_TIMER_LIT_POST_RESOLVE = 0x17,
  GPU_TIMER_LIGHTMAP_POST_RESOLVE = 0x18,
  GPU_TIMER_TRANS = 0x19,
  GPU_TIMER_SUN = 0x1A,
  GPU_TIMER_EMISSIVE_TOTAL = 0x1B,
  GPU_TIMER_EMISSIVE_FX = 0x1C,
  GPU_TIMER_TRANS_POST_FX = 0x1D,
  GPU_TIMER_VIEWMODEL_FX = 0x1E,
  GPU_TIMER_VIEWMODEL_TRANS = 0x1F,
  GPU_TIMER_SUPERFLARE = 0x20,
  GPU_TIMER_EXTRACAM = 0x21,
  GPU_TIMER_FXAA = 0x22,
  GPU_TIMER_BLOOM = 0x23,
  GPU_TIMER_DOF = 0x24,
  GPU_TIMER_UPSCALE = 0x25,
  GPU_TIMER_2D = 0x26,
  GPU_TIMER_2D_TOTAL = 0x27,
  GPU_TIMER_COUNT = 0x28,
};

/* 1481 */
enum GPUTimerDisplayMode
{
  GPU_TIMER_DISPLAY_MODE_DISABLED = 0x0,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_IN_PLACE_SIMPLE = 0x1,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_IN_PLACE = 0x2,
  GPU_TIMER_DISPLAY_MODE_ALL_IN_PLACE = 0x3,
  GPU_TIMER_DISPLAY_MODE_TOP = 0x4,
  GPU_TIMER_DISPLAY_MODE_ALL = 0x5,
  GPU_TIMER_DISPLAY_MODE_ACTIVE = 0x6,
  GPU_TIMER_DISPLAY_MODE_MAJOR = 0x7,
  GPU_TIMER_DISPLAY_MODE_MINOR = 0x8,
  GPU_TIMER_DISPLAY_MODE_MAJOR_IN_PLACE = 0x9,
  GPU_TIMER_DISPLAY_MODE_MINOR_IN_PLACE = 0xA,
  GPU_TIMER_DISPLAY_MODE_ALL_COM_ONLY = 0xB,
  GPU_TIMER_DISPLAY_MODE_ACTIVE_COM_ONLY = 0xC,
  GPU_TIMER_DISPLAY_MODE_COLLECT_ONLY = 0xD,
  GPU_TIMER_DISPLAY_MODE_COUNT = 0xE,
};

/* 1482 */
enum D3D11_RESOURCE_MISC_FLAG
{
  D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1,
  D3D11_RESOURCE_MISC_SHARED = 0x2,
  D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4,
  D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10,
  D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20,
  D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40,
  D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80,
  D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100,
  D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200,
};

/* 1483 */
enum file_image_flags_t
{
  IMG_FLAG_NOPICMIP = 0x1,
  IMG_FLAG_NOMIPMAPS = 0x2,
  IMG_FLAG_CUBEMAP = 0x4,
  IMG_FLAG_VOLMAP = 0x8,
  IMG_FLAG_STREAMING = 0x10,
  IMG_FLAG_CLAMP_U = 0x40,
  IMG_FLAG_CLAMP_V = 0x80,
  IMG_FLAG_FORCE_SYSTEM = 0x100,
  IMG_FLAG_DYNAMIC = 0x10000,
  IMG_FLAG_RENDER_TARGET = 0x20000,
  IMG_FLAG_MULTISAMPLE = 0x40000,
};

/* 1484 */
enum D3D11_TEXTURECUBE_FACE
{
  D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0x0,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 0x1,
  D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 0x2,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 0x3,
  D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 0x4,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 0x5,
};

/* 1485 */
enum GfxImageFileFormat
{
  IMG_FORMAT_INVALID = 0x0,
  IMG_FORMAT_BITMAP_RGBA = 0x1,
  IMG_FORMAT_BITMAP_RGB = 0x2,
  IMG_FORMAT_BITMAP_LUMINANCE_ALPHA = 0x3,
  IMG_FORMAT_BITMAP_LUMINANCE = 0x4,
  IMG_FORMAT_BITMAP_ALPHA = 0x5,
  IMG_FORMAT_WAVELET_RGBA = 0x6,
  IMG_FORMAT_WAVELET_RGB = 0x7,
  IMG_FORMAT_WAVELET_LUMINANCE_ALPHA = 0x8,
  IMG_FORMAT_WAVELET_LUMINANCE = 0x9,
  IMG_FORMAT_WAVELET_ALPHA = 0xA,
  IMG_FORMAT_DXT1 = 0xB,
  IMG_FORMAT_DXT3 = 0xC,
  IMG_FORMAT_DXT5 = 0xD,
  IMG_FORMAT_DXN = 0xE,
  IMG_FORMAT_BITMAP_RGB565 = 0xF,
  IMG_FORMAT_BITMAP_RGB5A3 = 0x10,
  IMG_FORMAT_BITMAP_C8 = 0x11,
  IMG_FORMAT_BITMAP_RGBA8 = 0x12,
  IMG_FORMAT_A16B16G16R16F = 0x13,
  IMG_FORMAT_COUNT = 0x14,
};

/* 1486 */
enum DXGI_RESIDENCY
{
};

/* 1487 */
enum J_COLOR_SPACE
{
  JCS_UNKNOWN = 0x0,
  JCS_GRAYSCALE = 0x1,
  JCS_RGB = 0x2,
  JCS_YCbCr = 0x3,
  JCS_CMYK = 0x4,
  JCS_YCCK = 0x5,
};

/* 1488 */
enum J_DCT_METHOD
{
  JDCT_ISLOW = 0x0,
  JDCT_IFAST = 0x1,
  JDCT_FLOAT = 0x2,
};

/* 1489 */
enum J_DITHER_MODE
{
  JDITHER_NONE = 0x0,
  JDITHER_ORDERED = 0x1,
  JDITHER_FS = 0x2,
};

/* 1490 */
enum J_BUF_MODE
{
  JBUF_PASS_THRU = 0x0,
  JBUF_SAVE_SOURCE = 0x1,
  JBUF_CRANK_DEST = 0x2,
  JBUF_SAVE_AND_PASS = 0x3,
};

/* 1491 */
enum MtlTechSetNotFoundBehavior
{
  MTL_TECHSET_NOT_FOUND_RETURN_NULL = 0x0,
  MTL_TECHSET_NOT_FOUND_RETURN_DEFAULT = 0x1,
};

/* 1492 */
enum MtlParseSuccess
{
  MTL_PARSE_SUCCESS = 0x0,
  MTL_PARSE_NO_MATCH = 0x1,
  MTL_PARSE_ERROR = 0x2,
};

/* 1493 */
enum ShaderParamType
{
  SHADER_PARAM_FLOAT4 = 0x0,
  SHADER_PARAM_SAMPLER_2D = 0x1,
  SHADER_PARAM_SAMPLER_3D = 0x2,
  SHADER_PARAM_SAMPLER_CUBE = 0x3,
  SHADER_PARAM_SAMPLER_1D = 0x4,
};

/* 1494 */
enum MaterialShaderType
{
  MTL_VERTEX_SHADER = 0x0,
  MTL_PIXEL_SHADER = 0x1,
};

/* 1495 */
enum GfxModelLightExtrapolation
{
  GFX_MODELLIGHT_EXTRAPOLATE = 0x0,
  GFX_MODELLIGHT_SHOW_MISSING = 0x1,
};

/* 1496 */
enum $31751EB5B4E40F094814DE65F5850FDF
{
  BLEND_WEIGHTS_PER_VERTEX = 0x1,
};

/* 1497 */
typedef $31751EB5B4E40F094814DE65F5850FDF $C8AF599720F65996934637345E13D803;

/* 1498 */
enum DUALPLAY_STATE
{
  DUALPLAY_NOTUSED = 0x0,
  DUALPLAY_INGAME = 0x1,
  DUALPLAY_INMENU = 0x2,
};

/* 1499 */
enum $2C086C9DD7E90B2F999294A6B98C5CA6
{
  TEXT_RENDERFLAG_FORCEMONOSPACE = 0x1,
  TEXT_RENDERFLAG_CURSOR = 0x2,
  TEXT_RENDERFLAG_DROPSHADOW = 0x4,
  TEXT_RENDERFLAG_DROPSHADOW_EXTRA = 0x8,
  TEXT_RENDERFLAG_GLOW = 0x10,
  TEXT_RENDERFLAG_GLOW_FORCE_COLOR = 0x20,
  TEXT_RENDERFLAG_FX_DECODE = 0x40,
  TEXT_RENDERFLAG_PADDING = 0x80,
  TEXT_RENDERFLAG_SUBTITLETEXT = 0x100,
  TEXT_RENDERFLAG_CINEMATIC = 0x200,
  TEXT_RENDERFLAG_TYPEWRITER = 0x400,
  TEXT_RENDERFLAG_FADEIN = 0x800,
  TEXT_RENDERFLAG_COD7_TYPEWRITER = 0x1000,
  TEXT_RENDERFLAG_POP_IN_WRITE = 0x2000,
  TEXT_RENDERFLAG_REDACT = 0x4000,
  TEXT_RENDERFLAG_JITTERSCALE = 0x8000,
  TEXT_RENDERFLAG_COD7_DECODE = 0x10000,
  TEXT_RENDERFLAG_AUTOWRAP = 0x20000,
};

/* 1500 */
enum $F12B5D4E6F47626DBE20BDB33386CCE7
{
  TEXT_DRAWTEXT_DEPRECATED = 0x0,
  TEXT_DRAWTEXT_TELETYPE = 0x1,
};

/* 1501 */
enum GfxProjectionTypes
{
  GFX_PROJECTION_2D = 0x0,
  GFX_PROJECTION_3D = 0x1,
};

/* 1502 */
enum RenderTargetUsage
{
  RENDERTARGET_USAGE_DEPTH = 0x0,
  RENDERTARGET_USAGE_RENDER = 0x1,
  RENDERTARGET_USAGE_RENDER_SHARE_SCENE = 0x2,
  RENDERTARGET_USAGE_TEXTURE = 0x3,
};

/* 1503 */
enum FullscreenType
{
  FULLSCREEN_DISPLAY = 0x0,
  FULLSCREEN_MIXED = 0x1,
  FULLSCREEN_SCENE = 0x2,
};

/* 1504 */
enum TexAllocFlags
{
  TEXALLOC_STREAM = 0x1,
  TEXALLOC_HIGHMEM = 0x2,
};

/* 1505 */
enum ShadowmapRTTiling
{
  SHADOWMAP_RT_TILE_VERTICAL = 0x0,
  SHADOWMAP_RT_TILE_GRID = 0x1,
};

/* 1506 */
enum $72A5C0E404CAEEF0B988B91EED6FDB83
{
  DRAWSURFLISTINFOSETUP_LIT_QUASI_OPAQUE = 0x0,
  DRAWSURFLISTINFOSETUP_EMISSIVE_OPAQUE = 0x1,
  DRAWSURFLISTINFOSETUP_EMISSIVE_FX = 0x2,
  DRAWSURFLISTINFOSETUP_TRANS = 0x3,
  DRAWSURFLISTINFOSETUP_TRANS_POST_FX = 0x4,
  DRAWSURFLISTINFOSETUP_VIEWMODEL_FX = 0x5,
  DRAWSURFLISTINFOSETUP_SUPERFLARE = 0x6,
  DRAWSURFLISTINFOSETUP_VIEWMODEL_TRANS = 0x7,
  DRAWSURFLISTINFOSETUP_POST_BLUR = 0x8,
  DRAWSURFLISTINFOSETUP_LIT_BSP = 0x9,
  DRAWSURFLISTINFOSETUP_LIT_STATIC_MODEL = 0xA,
  DRAWSURFLISTINFOSETUP_LIT = 0xB,
  DRAWSURFLISTINFOSETUP_LIT_BSP_POST_RESOLVE = 0xC,
  DRAWSURFLISTINFOSETUP_LIT_STATIC_MODEL_POST_RESOLVE = 0xD,
  DRAWSURFLISTINFOSETUP_LIT_POST_RESOLVE = 0xE,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_BSP = 0xF,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_STATIC_MODEL = 0x10,
  DRAWSURFLISTINFOSETUP_LIGHTMAP = 0x11,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_BSP_POST_RESOLVE = 0x12,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_STATIC_MODEL_POST_RESOLVE = 0x13,
  DRAWSURFLISTINFOSETUP_LIGHTMAP_POST_RESOLVE = 0x14,
  DRAWSURFLISTINFOSETUP_DEPTH_HACK = 0x15,
  DRAWSURFLISTINFOSETUP_SONAR = 0x16,
  DRAWSURFLISTINFOSETUP_COUNT = 0x17,
};

/* 1507 */
enum $3A950A923D8F4BA232BDB7651ED2F7AD
{
  POST_FX_FLAME = 0x1,
  POST_FX_ELECTRIFIED = 0x2,
  POST_FX_TRANSPORTED = 0x4,
  POST_FX_WATER = 0x8,
  POST_FX_POISON = 0x10,
  POST_FX_DOUBLE_VISION = 0x20,
  POST_FX_DEPTH_OF_FIELD = 0x40,
  POST_FX_REVIVE = 0x80,
  POST_FX_ANAGLYPH = 0x100,
  POST_FX_MAIN_GROUP = 0x1FF,
  POST_FX_GENERIC = 0x200,
  POST_FX_BLUR = 0x80000,
  POST_FX_SAVE_SCREEN_BLUR = 0x20000000,
  POST_FX_SAVE_SCREEN_FLASH = 0x40000000,
  POST_FX_SAVE_SCREEN_REQUIRED = 0x80000000,
  POST_FX_SAVE_SCREEN_MASK = 0xE0000000,
};

/* 1508 */
enum GFX_SPOT_SHADOW_FLAGS
{
  SPOT_LIGHT_USING_FULL_SPOT_SHADOW_BUFFER = 0x1,
};

/* 1509 */
enum $D107F8A00F518DAD6EB89B416AFBB3E2
{
  GFX_USE_VIEWPORT_FOR_VIEW = 0x0,
  GFX_USE_VIEWPORT_FULL = 0x1,
};

/* 1510 */
typedef $9ADEBD8A921918A39AFE0B81FE4AC4B2 $58DE2DA9E8DDE5DA2E2F36082422D5FD;

/* 1511 */
typedef std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Redbl std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Redbl;

/* 1512 */
typedef std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Redbl std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Redbl;

/* 1513 */
enum $0754400364EC1CB2E0FDE0E6ED4FE74A
{
  TEMP_IMAGE_FREE = 0x0,
  TEMP_IMAGE_RESERVED = 0x1,
  TEMP_IMAGE_ALLOCED = 0x2,
  TEMP_IMAGE_ADDED = 0x3,
  TEMP_IMAGE_STOMPED = 0x4,
};

/* 1514 */
enum XSurfaceVertColType
{
  XSURFACE_VERTCOL_NONE = 0x0,
  XSURFACE_VERTCOL_GREY = 0x1,
  XSURFACE_VERTCOL_ALL = 0x2,
};

/* 1515 */
enum _NVAPI_D3D_RESOURCERENDERING_FLAG
{
  NVAPI_D3D_RR_FLAG_DEFAULTS = 0x0,
  NVAPI_D3D_RR_FLAG_FORCE_DISCARD_CONTENT = 0x1,
  NVAPI_D3D_RR_FLAG_FORCE_KEEP_CONTENT = 0x2,
  NVAPI_D3D_RR_FLAG_MULTI_FRAME = 0x4,
};

/* 1516 */
enum filterFlags
{
  FILTER_BIT0 = 0x1,
  FILTER_BIT1 = 0x2,
  FILTER_USEQUAD = 0x4,
};

/* 1517 */
enum $5F723902D2B1F85C963490202D9D889A
{
  SPHERE_MAX_SIDES = 0x20,
};

/* 1518 */
enum GfxFrameBufferTextures
{
  RT_COLOR0 = 0x0,
  RT_DEPTH = 0x1,
  RT_DEPTH_AS_ARGB = 0x2,
  FRAME_BUFFER_TEXTURE_COUNT = 0x3,
};

/* 1519 */
enum J_MESSAGE_CODE
{
  JMSG_NOMESSAGE = 0x0,
  JERR_ARITH_NOTIMPL = 0x1,
  JERR_BAD_ALIGN_TYPE = 0x2,
  JERR_BAD_ALLOC_CHUNK = 0x3,
  JERR_BAD_BUFFER_MODE = 0x4,
  JERR_BAD_COMPONENT_ID = 0x5,
  JERR_BAD_DCT_COEF = 0x6,
  JERR_BAD_DCTSIZE = 0x7,
  JERR_BAD_HUFF_TABLE = 0x8,
  JERR_BAD_IN_COLORSPACE = 0x9,
  JERR_BAD_J_COLORSPACE = 0xA,
  JERR_BAD_LENGTH = 0xB,
  JERR_BAD_LIB_VERSION = 0xC,
  JERR_BAD_MCU_SIZE = 0xD,
  JERR_BAD_POOL_ID = 0xE,
  JERR_BAD_PRECISION = 0xF,
  JERR_BAD_PROGRESSION = 0x10,
  JERR_BAD_PROG_SCRIPT = 0x11,
  JERR_BAD_SAMPLING = 0x12,
  JERR_BAD_SCAN_SCRIPT = 0x13,
  JERR_BAD_STATE = 0x14,
  JERR_BAD_STRUCT_SIZE = 0x15,
  JERR_BAD_VIRTUAL_ACCESS = 0x16,
  JERR_BUFFER_SIZE = 0x17,
  JERR_CANT_SUSPEND = 0x18,
  JERR_CCIR601_NOTIMPL = 0x19,
  JERR_COMPONENT_COUNT = 0x1A,
  JERR_CONVERSION_NOTIMPL = 0x1B,
  JERR_DAC_INDEX = 0x1C,
  JERR_DAC_VALUE = 0x1D,
  JERR_DHT_INDEX = 0x1E,
  JERR_DQT_INDEX = 0x1F,
  JERR_EMPTY_IMAGE = 0x20,
  JERR_EMS_READ = 0x21,
  JERR_EMS_WRITE = 0x22,
  JERR_EOI_EXPECTED = 0x23,
  JERR_FILE_READ = 0x24,
  JERR_FILE_WRITE = 0x25,
  JERR_FRACT_SAMPLE_NOTIMPL = 0x26,
  JERR_HUFF_CLEN_OVERFLOW = 0x27,
  JERR_HUFF_MISSING_CODE = 0x28,
  JERR_IMAGE_TOO_BIG = 0x29,
  JERR_INPUT_EMPTY = 0x2A,
  JERR_INPUT_EOF = 0x2B,
  JERR_MISMATCHED_QUANT_TABLE = 0x2C,
  JERR_MISSING_DATA = 0x2D,
  JERR_MODE_CHANGE = 0x2E,
  JERR_NOTIMPL = 0x2F,
  JERR_NOT_COMPILED = 0x30,
  JERR_NO_BACKING_STORE = 0x31,
  JERR_NO_HUFF_TABLE = 0x32,
  JERR_NO_IMAGE = 0x33,
  JERR_NO_QUANT_TABLE = 0x34,
  JERR_NO_SOI = 0x35,
  JERR_OUT_OF_MEMORY = 0x36,
  JERR_QUANT_COMPONENTS = 0x37,
  JERR_QUANT_FEW_COLORS = 0x38,
  JERR_QUANT_MANY_COLORS = 0x39,
  JERR_SOF_DUPLICATE = 0x3A,
  JERR_SOF_NO_SOS = 0x3B,
  JERR_SOF_UNSUPPORTED = 0x3C,
  JERR_SOI_DUPLICATE = 0x3D,
  JERR_SOS_NO_SOF = 0x3E,
  JERR_TFILE_CREATE = 0x3F,
  JERR_TFILE_READ = 0x40,
  JERR_TFILE_SEEK = 0x41,
  JERR_TFILE_WRITE = 0x42,
  JERR_TOO_LITTLE_DATA = 0x43,
  JERR_UNKNOWN_MARKER = 0x44,
  JERR_VIRTUAL_BUG = 0x45,
  JERR_WIDTH_OVERFLOW = 0x46,
  JERR_XMS_READ = 0x47,
  JERR_XMS_WRITE = 0x48,
  JMSG_COPYRIGHT = 0x49,
  JMSG_VERSION = 0x4A,
  JTRC_16BIT_TABLES = 0x4B,
  JTRC_ADOBE = 0x4C,
  JTRC_APP0 = 0x4D,
  JTRC_APP14 = 0x4E,
  JTRC_DAC = 0x4F,
  JTRC_DHT = 0x50,
  JTRC_DQT = 0x51,
  JTRC_DRI = 0x52,
  JTRC_EMS_CLOSE = 0x53,
  JTRC_EMS_OPEN = 0x54,
  JTRC_EOI = 0x55,
  JTRC_HUFFBITS = 0x56,
  JTRC_JFIF = 0x57,
  JTRC_JFIF_BADTHUMBNAILSIZE = 0x58,
  JTRC_JFIF_EXTENSION = 0x59,
  JTRC_JFIF_THUMBNAIL = 0x5A,
  JTRC_MISC_MARKER = 0x5B,
  JTRC_PARMLESS_MARKER = 0x5C,
  JTRC_QUANTVALS = 0x5D,
  JTRC_QUANT_3_NCOLORS = 0x5E,
  JTRC_QUANT_NCOLORS = 0x5F,
  JTRC_QUANT_SELECTED = 0x60,
  JTRC_RECOVERY_ACTION = 0x61,
  JTRC_RST = 0x62,
  JTRC_SMOOTH_NOTIMPL = 0x63,
  JTRC_SOF = 0x64,
  JTRC_SOF_COMPONENT = 0x65,
  JTRC_SOI = 0x66,
  JTRC_SOS = 0x67,
  JTRC_SOS_COMPONENT = 0x68,
  JTRC_SOS_PARAMS = 0x69,
  JTRC_TFILE_CLOSE = 0x6A,
  JTRC_TFILE_OPEN = 0x6B,
  JTRC_THUMB_JPEG = 0x6C,
  JTRC_THUMB_PALETTE = 0x6D,
  JTRC_THUMB_RGB = 0x6E,
  JTRC_UNKNOWN_IDS = 0x6F,
  JTRC_XMS_CLOSE = 0x70,
  JTRC_XMS_OPEN = 0x71,
  JWRN_ADOBE_XFORM = 0x72,
  JWRN_BOGUS_PROGRESSION = 0x73,
  JWRN_EXTRANEOUS_DATA = 0x74,
  JWRN_HIT_MARKER = 0x75,
  JWRN_HUFF_BAD_CODE = 0x76,
  JWRN_JFIF_MAJOR = 0x77,
  JWRN_JPEG_EOF = 0x78,
  JWRN_MUST_RESYNC = 0x79,
  JWRN_NOT_SEQUENTIAL = 0x7A,
  JWRN_TOO_MUCH_DATA = 0x7B,
  JMSG_LASTMSGCODE = 0x7C,
};

/* 1520 */
enum JPEG_MARKER
{
  M_SOF0 = 0xC0,
  M_SOF1 = 0xC1,
  M_SOF2 = 0xC2,
  M_SOF3 = 0xC3,
  M_SOF5 = 0xC5,
  M_SOF6 = 0xC6,
  M_SOF7 = 0xC7,
  M_JPG = 0xC8,
  M_SOF9 = 0xC9,
  M_SOF10 = 0xCA,
  M_SOF11 = 0xCB,
  M_SOF13 = 0xCD,
  M_SOF14 = 0xCE,
  M_SOF15 = 0xCF,
  M_DHT = 0xC4,
  M_DAC = 0xCC,
  M_RST0 = 0xD0,
  M_RST1 = 0xD1,
  M_RST2 = 0xD2,
  M_RST3 = 0xD3,
  M_RST4 = 0xD4,
  M_RST5 = 0xD5,
  M_RST6 = 0xD6,
  M_RST7 = 0xD7,
  M_SOI = 0xD8,
  M_EOI = 0xD9,
  M_SOS = 0xDA,
  M_DQT = 0xDB,
  M_DNL = 0xDC,
  M_DRI = 0xDD,
  M_DHP = 0xDE,
  M_EXP = 0xDF,
  M_APP0 = 0xE0,
  M_APP1 = 0xE1,
  M_APP2 = 0xE2,
  M_APP3 = 0xE3,
  M_APP4 = 0xE4,
  M_APP5 = 0xE5,
  M_APP6 = 0xE6,
  M_APP7 = 0xE7,
  M_APP8 = 0xE8,
  M_APP9 = 0xE9,
  M_APP10 = 0xEA,
  M_APP11 = 0xEB,
  M_APP12 = 0xEC,
  M_APP13 = 0xED,
  M_APP14 = 0xEE,
  M_APP15 = 0xEF,
  M_JPG0 = 0xF0,
  M_JPG13 = 0xFD,
  M_COM = 0xFE,
  M_TEM = 0x1,
  M_ERROR = 0x100,
};

/* 1521 */
enum c_pass_type
{
  main_pass = 0x0,
  huff_opt_pass = 0x1,
  output_pass = 0x2,
};

/* 1522 */
enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 0x1,
  NtProductLanManNt = 0x2,
  NtProductServer = 0x3,
};

/* 1523 */
enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0x0,
  NEC98x86 = 0x1,
  EndAlternatives = 0x2,
};

/* 1524 */
enum INTRNCVT_STATUS
{
  INTRNCVT_OK = 0x0,
  INTRNCVT_OVERFLOW = 0x1,
  INTRNCVT_UNDERFLOW = 0x2,
};

/* 1525 */
enum STATE
{
  ST_NORMAL = 0x0,
  ST_PERCENT = 0x1,
  ST_FLAG = 0x2,
  ST_WIDTH = 0x3,
  ST_DOT = 0x4,
  ST_PRECIS = 0x5,
  ST_SIZE = 0x6,
  ST_TYPE = 0x7,
};

/* 1526 */
enum CHARTYPE
{
  CH_OTHER = 0x0,
  CH_PERCENT = 0x1,
  CH_DOT = 0x2,
  CH_STAR = 0x3,
  CH_ZERO = 0x4,
  CH_DIGIT = 0x5,
  CH_FLAG = 0x6,
  CH_SIZE = 0x7,
  CH_TYPE = 0x8,
};

/* 1527 */
enum ARG_TYPE
{
  eblank = 0x0,
  e_int_arg = 0x1,
  e_short_arg = 0x2,
  e_ptr_arg = 0x3,
  e_int64_arg = 0x4,
  e_long_long_arg = 0x5,
  e_long_arg = 0x6,
  e_longdouble_arg = 0x7,
  e_double_arg = 0x8,
};

/* 1528 */
enum $1DD7A03358E0D01DD359262876E6A0F0
{
  lkNormal = 0x0,
  lkPrealloc = 0x1,
  lkDeleted = 0x2,
};

/* 1529 */
enum state_t
{
  S_INIT = 0x0,
  S_EAT0L = 0x1,
  S_SIGNM = 0x2,
  S_GETL = 0x3,
  S_GETR = 0x4,
  S_POINT = 0x5,
  S_E = 0x6,
  S_SIGNE = 0x7,
  S_EAT0E = 0x8,
  S_GETE = 0x9,
  S_END = 0xA,
  S_E_IMPLICIT = 0xB,
};

/* 1530 */
enum error_types
{
  logl_zero = 0x0,
  logl_negative = 0x1,
  log_zero = 0x2,
  log_negative = 0x3,
  logf_zero = 0x4,
  logf_negative = 0x5,
  log10l_zero = 0x6,
  log10l_negative = 0x7,
  log10_zero = 0x8,
  log10_negative = 0x9,
  log10f_zero = 0xA,
  log10f_negative = 0xB,
  expl_overflow = 0xC,
  expl_underflow = 0xD,
  exp_overflow = 0xE,
  exp_underflow = 0xF,
  expf_overflow = 0x10,
  expf_underflow = 0x11,
  powl_overflow = 0x12,
  powl_underflow = 0x13,
  powl_zero_to_zero = 0x14,
  powl_zero_to_negative = 0x15,
  powl_neg_to_non_integer = 0x16,
  powl_nan_to_zero = 0x17,
  pow_overflow = 0x18,
  pow_underflow = 0x19,
  pow_zero_to_zero = 0x1A,
  pow_zero_to_negative = 0x1B,
  pow_neg_to_non_integer = 0x1C,
  pow_nan_to_zero = 0x1D,
  powf_overflow = 0x1E,
  powf_underflow = 0x1F,
  powf_zero_to_zero = 0x20,
  powf_zero_to_negative = 0x21,
  powf_neg_to_non_integer = 0x22,
  powf_nan_to_zero = 0x23,
  atan2l_zero = 0x24,
  atan2_zero = 0x25,
  atan2f_zero = 0x26,
  expm1l_overflow = 0x27,
  expm1l_underflow = 0x28,
  expm1_overflow = 0x29,
  expm1_underflow = 0x2A,
  expm1f_overflow = 0x2B,
  expm1f_underflow = 0x2C,
  hypotl_overflow = 0x2D,
  hypot_overflow = 0x2E,
  hypotf_overflow = 0x2F,
  sqrtl_negative = 0x30,
  sqrt_negative = 0x31,
  sqrtf_negative = 0x32,
  scalbl_overflow = 0x33,
  scalbl_underflow = 0x34,
  scalb_overflow = 0x35,
  scalb_underflow = 0x36,
  scalbf_overflow = 0x37,
  scalbf_underflow = 0x38,
  acosl_gt_one = 0x39,
  acos_gt_one = 0x3A,
  acosf_gt_one = 0x3B,
  asinl_gt_one = 0x3C,
  asin_gt_one = 0x3D,
  asinf_gt_one = 0x3E,
  coshl_overflow = 0x3F,
  cosh_overflow = 0x40,
  coshf_overflow = 0x41,
  y0l_zero = 0x42,
  y0l_negative = 0x43,
  y0l_gt_loss = 0x44,
  y0_zero = 0x45,
  y0_negative = 0x46,
  y0_gt_loss = 0x47,
  y0f_zero = 0x48,
  y0f_negative = 0x49,
  y0f_gt_loss = 0x4A,
  y1l_zero = 0x4B,
  y1l_negative = 0x4C,
  y1l_gt_loss = 0x4D,
  y1_zero = 0x4E,
  y1_negative = 0x4F,
  y1_gt_loss = 0x50,
  y1f_zero = 0x51,
  y1f_negative = 0x52,
  y1f_gt_loss = 0x53,
  ynl_zero = 0x54,
  ynl_negative = 0x55,
  ynl_gt_loss = 0x56,
  yn_zero = 0x57,
  yn_negative = 0x58,
  yn_gt_loss = 0x59,
  ynf_zero = 0x5A,
  ynf_negative = 0x5B,
  ynf_gt_loss = 0x5C,
  j0l_gt_loss = 0x5D,
  j0_gt_loss = 0x5E,
  j0f_gt_loss = 0x5F,
  j1l_gt_loss = 0x60,
  j1_gt_loss = 0x61,
  j1f_gt_loss = 0x62,
  jnl_gt_loss = 0x63,
  jn_gt_loss = 0x64,
  jnf_gt_loss = 0x65,
  lgammal_overflow = 0x66,
  lgammal_negative = 0x67,
  lgammal_reserve = 0x68,
  lgamma_overflow = 0x69,
  lgamma_negative = 0x6A,
  lgamma_reserve = 0x6B,
  lgammaf_overflow = 0x6C,
  lgammaf_negative = 0x6D,
  lgammaf_reserve = 0x6E,
  gammal_overflow = 0x6F,
  gammal_negative = 0x70,
  gammal_reserve = 0x71,
  gamma_overflow = 0x72,
  gamma_negative = 0x73,
  gamma_reserve = 0x74,
  gammaf_overflow = 0x75,
  gammaf_negative = 0x76,
  gammaf_reserve = 0x77,
  fmodl_by_zero = 0x78,
  fmod_by_zero = 0x79,
  fmodf_by_zero = 0x7A,
  remainderl_by_zero = 0x7B,
  remainder_by_zero = 0x7C,
  remainderf_by_zero = 0x7D,
  sinhl_overflow = 0x7E,
  sinh_overflow = 0x7F,
  sinhf_overflow = 0x80,
  atanhl_gt_one = 0x81,
  atanhl_eq_one = 0x82,
  atanh_gt_one = 0x83,
  atanh_eq_one = 0x84,
  atanhf_gt_one = 0x85,
  atanhf_eq_one = 0x86,
  acoshl_lt_one = 0x87,
  acosh_lt_one = 0x88,
  acoshf_lt_one = 0x89,
  log1pl_zero = 0x8A,
  log1pl_negative = 0x8B,
  log1p_zero = 0x8C,
  log1p_negative = 0x8D,
  log1pf_zero = 0x8E,
  log1pf_negative = 0x8F,
  ldexpl_overflow = 0x90,
  ldexpl_underflow = 0x91,
  ldexp_overflow = 0x92,
  ldexp_underflow = 0x93,
  ldexpf_overflow = 0x94,
  ldexpf_underflow = 0x95,
  logbl_zero = 0x96,
  logb_zero = 0x97,
  logbf_zero = 0x98,
  nextafterl_overflow = 0x99,
  nextafter_overflow = 0x9A,
  nextafterf_overflow = 0x9B,
  ilogbl_zero = 0x9C,
  ilogb_zero = 0x9D,
  ilogbf_zero = 0x9E,
  exp2l_overflow = 0x9F,
  exp2l_underflow = 0xA0,
  exp2_overflow = 0xA1,
  exp2_underflow = 0xA2,
  exp2f_overflow = 0xA3,
  exp2f_underflow = 0xA4,
  exp10l_overflow = 0xA5,
  exp10_overflow = 0xA6,
  exp10f_overflow = 0xA7,
  log2l_zero = 0xA8,
  log2l_negative = 0xA9,
  log2_zero = 0xAA,
  log2_negative = 0xAB,
  log2f_zero = 0xAC,
  log2f_negative = 0xAD,
  log_nan = 0x3E8,
  log10_nan = 0x3E9,
  exp_nan = 0x3EA,
  atan_nan = 0x3EB,
  ceil_nan = 0x3EC,
  floor_nan = 0x3ED,
  pow_nan = 0x3EE,
  modf_nan = 0x3EF,
  acos_nan = 0x3F0,
  asin_nan = 0x3F1,
  sin_naninf = 0x3F2,
  cos_naninf = 0x3F3,
  tan_naninf = 0x3F4,
};

/* 1531 */
enum _FPIEEE_FORMAT
{
  _FpFormatFp32 = 0x0,
  _FpFormatFp64 = 0x1,
  _FpFormatFp80 = 0x2,
  _FpFormatFp128 = 0x3,
  _FpFormatI16 = 0x4,
  _FpFormatI32 = 0x5,
  _FpFormatI64 = 0x6,
  _FpFormatU16 = 0x7,
  _FpFormatU32 = 0x8,
  _FpFormatU64 = 0x9,
  _FpFormatBcd80 = 0xA,
  _FpFormatCompare = 0xB,
  _FpFormatString = 0xC,
};

/* 1532 */
enum _FP_OPERATION_CODE
{
  _FpCodeUnspecified = 0x0,
  _FpCodeAdd = 0x1,
  _FpCodeSubtract = 0x2,
  _FpCodeMultiply = 0x3,
  _FpCodeDivide = 0x4,
  _FpCodeSquareRoot = 0x5,
  _FpCodeRemainder = 0x6,
  _FpCodeCompare = 0x7,
  _FpCodeConvert = 0x8,
  _FpCodeRound = 0x9,
  _FpCodeTruncate = 0xA,
  _FpCodeFloor = 0xB,
  _FpCodeCeil = 0xC,
  _FpCodeAcos = 0xD,
  _FpCodeAsin = 0xE,
  _FpCodeAtan = 0xF,
  _FpCodeAtan2 = 0x10,
  _FpCodeCabs = 0x11,
  _FpCodeCos = 0x12,
  _FpCodeCosh = 0x13,
  _FpCodeExp = 0x14,
  _FpCodeFabs = 0x15,
  _FpCodeFmod = 0x16,
  _FpCodeFrexp = 0x17,
  _FpCodeHypot = 0x18,
  _FpCodeLdexp = 0x19,
  _FpCodeLog = 0x1A,
  _FpCodeLog10 = 0x1B,
  _FpCodeModf = 0x1C,
  _FpCodePow = 0x1D,
  _FpCodeSin = 0x1E,
  _FpCodeSinh = 0x1F,
  _FpCodeTan = 0x20,
  _FpCodeTanh = 0x21,
  _FpCodeY0 = 0x22,
  _FpCodeY1 = 0x23,
  _FpCodeYn = 0x24,
  _FpCodeLogb = 0x25,
  _FpCodeNextafter = 0x26,
  _FpCodeNegate = 0x27,
  _FpCodeFmin = 0x28,
  _FpCodeFmax = 0x29,
  _FpCodeConvertTrunc = 0x2A,
  _XMMIAddps = 0x2B,
  _XMMIAddss = 0x2C,
  _XMMISubps = 0x2D,
  _XMMISubss = 0x2E,
  _XMMIMulps = 0x2F,
  _XMMIMulss = 0x30,
  _XMMIDivps = 0x31,
  _XMMIDivss = 0x32,
  _XMMISqrtps = 0x33,
  _XMMISqrtss = 0x34,
  _XMMIMaxps = 0x35,
  _XMMIMaxss = 0x36,
  _XMMIMinps = 0x37,
  _XMMIMinss = 0x38,
  _XMMICmpps = 0x39,
  _XMMICmpss = 0x3A,
  _XMMIComiss = 0x3B,
  _XMMIUComiss = 0x3C,
  _XMMICvtpi2ps = 0x3D,
  _XMMICvtsi2ss = 0x3E,
  _XMMICvtps2pi = 0x3F,
  _XMMICvtss2si = 0x40,
  _XMMICvttps2pi = 0x41,
  _XMMICvttss2si = 0x42,
  _XMMIAddsubps = 0x43,
  _XMMIHaddps = 0x44,
  _XMMIHsubps = 0x45,
  _XMMIRoundps = 0x46,
  _XMMIRoundss = 0x47,
  _XMMIDpps = 0x48,
  _XMMI2Addpd = 0x49,
  _XMMI2Addsd = 0x4A,
  _XMMI2Subpd = 0x4B,
  _XMMI2Subsd = 0x4C,
  _XMMI2Mulpd = 0x4D,
  _XMMI2Mulsd = 0x4E,
  _XMMI2Divpd = 0x4F,
  _XMMI2Divsd = 0x50,
  _XMMI2Sqrtpd = 0x51,
  _XMMI2Sqrtsd = 0x52,
  _XMMI2Maxpd = 0x53,
  _XMMI2Maxsd = 0x54,
  _XMMI2Minpd = 0x55,
  _XMMI2Minsd = 0x56,
  _XMMI2Cmppd = 0x57,
  _XMMI2Cmpsd = 0x58,
  _XMMI2Comisd = 0x59,
  _XMMI2UComisd = 0x5A,
  _XMMI2Cvtpd2pi = 0x5B,
  _XMMI2Cvtsd2si = 0x5C,
  _XMMI2Cvttpd2pi = 0x5D,
  _XMMI2Cvttsd2si = 0x5E,
  _XMMI2Cvtps2pd = 0x5F,
  _XMMI2Cvtss2sd = 0x60,
  _XMMI2Cvtpd2ps = 0x61,
  _XMMI2Cvtsd2ss = 0x62,
  _XMMI2Cvtdq2ps = 0x63,
  _XMMI2Cvttps2dq = 0x64,
  _XMMI2Cvtps2dq = 0x65,
  _XMMI2Cvttpd2dq = 0x66,
  _XMMI2Cvtpd2dq = 0x67,
  _XMMI2Addsubpd = 0x68,
  _XMMI2Haddpd = 0x69,
  _XMMI2Hsubpd = 0x6A,
  _XMMI2Roundpd = 0x6B,
  _XMMI2Roundsd = 0x6C,
  _XMMI2Dppd = 0x6D,
};

/* 1533 */
enum _FPIEEE_ROUNDING_MODE
{
  _FpRoundNearest = 0x0,
  _FpRoundMinusInfinity = 0x1,
  _FpRoundPlusInfinity = 0x2,
  _FpRoundChopped = 0x3,
};

/* 1534 */
enum _FPIEEE_PRECISION
{
  _FpPrecisionFull = 0x0,
  _FpPrecision53 = 0x1,
  _FpPrecision24 = 0x2,
};

/* 1535 */
enum Tokens
{
  TOK_basedLp = 0x0,
  TOK_cdecl = 0x1,
  TOK_pascal = 0x2,
  TOK_stdcall = 0x3,
  TOK_thiscall = 0x4,
  TOK_fastcall = 0x5,
  TOK_cocall = 0x6,
  TOK_eabi = 0x7,
  TOK_ptr64 = 0x8,
  TOK_restrict = 0x9,
  TOK_unaligned = 0xA,
  TOK__last = 0xB,
};

/* 1536 */
enum DNameStatus
{
  DN_valid = 0x0,
  DN_truncated = 0x1,
  DN_invalid = 0x2,
  DN_error = 0x3,
};

/* 1537 */
enum _RTC_ErrorNumber
{
  _RTC_CHKSTK = 0x0,
  _RTC_CVRT_LOSS_INFO = 0x1,
  _RTC_CORRUPT_STACK = 0x2,
  _RTC_UNINIT_LOCAL_USE = 0x3,
  _RTC_CORRUPTED_ALLOCA = 0x4,
  _RTC_ILLEGAL = 0x5,
};

/* 1538 */
typedef serverAction_t serverSignedStatsAction_t;

/* 1539 */
struct MenuCell
{
  int type;
  int maxChars;
  char *stringValue;
};

/* 1540 */
struct $91D1B2149FAC90180ECB9AC277F76009
{
  float x;
  float y;
  float z;
  float w;
};

/* 1541 */
struct $43F634250C0E94E2A09AB0840E4770D1
{
  float r;
  float g;
  float b;
  float a;
};

/* 1542 */
union vec4_t
{
  float v[4];
  $91D1B2149FAC90180ECB9AC277F76009 __s1;
  $43F634250C0E94E2A09AB0840E4770D1 __s2;
};

/* 1543 */
union DvarValue
{
  bool enabled;
  int integer;
  unsigned int unsignedInt;
  __int64 integer64;
  unsigned __int64 unsignedInt64;
  float value;
  vec4_t vector;
  const char *string;
  char color[4];
};

/* 1544 */
struct $BFBB53559BEAC4289F32B924847E59CB
{
  int stringCount;
  const char **strings;
};

/* 1545 */
struct $9CA192F9DB66A3CB7E01DE78A0DEA53D
{
  int min;
  int max;
};

/* 1546 */
struct $5FF817DA2B223410B016B4653DEC4160
{
  __int64 min;
  __int64 max;
};

/* 1547 */
struct $251C2428A496074035CACA7AAF3D55BD
{
  float min;
  float max;
};

/* 1548 */
union DvarLimits
{
  $BFBB53559BEAC4289F32B924847E59CB enumeration;
  $9CA192F9DB66A3CB7E01DE78A0DEA53D integer;
  $5FF817DA2B223410B016B4653DEC4160 integer64;
  $251C2428A496074035CACA7AAF3D55BD value;
  $251C2428A496074035CACA7AAF3D55BD vector;
};

/* 1549 */
struct __declspec(align(8)) dvar_t
{
  const char *name;
  const char *description;
  int hash;
  unsigned int flags;
  dvarType_t type;
  bool modified;
  DvarValue current;
  DvarValue latched;
  DvarValue reset;
  DvarLimits domain;
  dvar_t *hashNext;
};

/* 1550 */
union operandInternalDataUnion
{
  int intVal;
  float floatVal;
  const char *string;
  dvar_t *dvar;
};

/* 1551 */
struct $393C16A032292777F0C3725FFB2C0008
{
  float x;
  float y;
  float z;
};

/* 1552 */
union vec3_t
{
  $393C16A032292777F0C3725FFB2C0008 __s0;
  float v[3];
};

/* 1553 */
struct cplane_s
{
  vec3_t normal;
  float dist;
  char type;
  char signbits;
  char pad[2];
};

/* 1554 */
struct cbrushside_t
{
  cplane_s *plane;
  int cflags;
  int sflags;
};

/* 1555 */
struct GfxDrawSurfFields
{
  unsigned __int64 objectId : 16;
  unsigned __int64 customIndex : 9;
  unsigned __int64 reflectionProbeIndex : 5;
  unsigned __int64 dlightMask : 2;
  unsigned __int64 materialSortedIndex : 12;
  unsigned __int64 primaryLightIndex : 8;
  unsigned __int64 surfType : 4;
  unsigned __int64 prepass : 2;
  unsigned __int64 primarySortKey : 6;
};

/* 1556 */
union GfxDrawSurf
{
  GfxDrawSurfFields fields;
  unsigned __int64 packed;
};

/* 1557 */
struct __declspec(align(8)) MaterialInfo
{
  const char *name;
  unsigned int gameFlags;
  char pad;
  char sortKey;
  char textureAtlasRowCount;
  char textureAtlasColumnCount;
  GfxDrawSurf drawSurf;
  unsigned int surfaceTypeBits;
  unsigned int layeredSurfaceTypes;
  unsigned __int16 hashIndex;
  int surfaceFlags;
  int contents;
};

/* 1558 */
struct MaterialStreamRouting
{
  char source;
  char dest;
};

/* 1559 */
const struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 1560 */
struct IUnknown
{
  IUnknownVtbl *vfptr;
};

/* 7362 */
typedef int HRESULT;

/* 1561 */
struct IUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *this, _GUID *, void **);
  unsigned int (__stdcall *AddRef)(IUnknown *this);
  unsigned int (__stdcall *Release)(IUnknown *this);
};

/* 1562 */
struct __cppobj ID3D11DeviceChild : IUnknown
{
};

/* 1563 */
struct __cppobj ID3D11InputLayout : ID3D11DeviceChild
{
};

/* 1564 */
struct MaterialVertexStreamRouting
{
  MaterialStreamRouting data[16];
  ID3D11InputLayout *decl[20];
};

/* 1565 */
struct MaterialVertexDeclaration
{
  char streamCount;
  bool hasOptionalSource;
  bool isLoaded;
  MaterialVertexStreamRouting routing;
};

/* 1566 */
struct __cppobj ID3D11VertexShader : ID3D11DeviceChild
{
};

/* 1567 */
struct GfxVertexShaderLoadDef
{
  char *program;
  unsigned int programSize;
};

/* 1568 */
struct MaterialVertexShaderProgram
{
  ID3D11VertexShader *vs;
  GfxVertexShaderLoadDef loadDef;
};

/* 1569 */
struct MaterialVertexShader
{
  const char *name;
  MaterialVertexShaderProgram prog;
};

/* 1570 */
struct __cppobj ID3D11PixelShader : ID3D11DeviceChild
{
};

/* 1571 */
struct GfxPixelShaderLoadDef
{
  char *program;
  unsigned int programSize;
};

/* 1572 */
struct MaterialPixelShaderProgram
{
  ID3D11PixelShader *ps;
  GfxPixelShaderLoadDef loadDef;
};

/* 1573 */
struct MaterialPixelShader
{
  const char *name;
  MaterialPixelShaderProgram prog;
};

/* 1574 */
struct $31FD236FB3888DAAD580490E35E6A96F
{
  char textureIndex;
  char samplerIndex;
};

/* 1575 */
union MaterialArgumentLocation
{
  unsigned __int16 offset;
  $31FD236FB3888DAAD580490E35E6A96F __s1;
};

/* 1576 */
struct MaterialArgumentCodeConst
{
  unsigned __int16 index;
  char firstRow;
  char rowCount;
};

/* 1577 */
union MaterialArgumentDef
{
  const float *literalConst;
  MaterialArgumentCodeConst codeConst;
  unsigned int codeSampler;
  unsigned int nameHash;
};

/* 1578 */
struct MaterialShaderArgument
{
  unsigned __int16 type;
  MaterialArgumentLocation location;
  unsigned __int16 size;
  unsigned __int16 buffer;
  MaterialArgumentDef u;
};

/* 1579 */
union $FD064E2D54254842C138006CCDF089CE
{
  MaterialPixelShader *pixelShader;
  MaterialPixelShader *localPixelShader;
};

/* 1580 */
union $B3C66DDD8C04D5B4145EC172E0EB66AC
{
  MaterialShaderArgument *localArgs;
  MaterialShaderArgument *args;
};

/* 1581 */
struct MaterialPass
{
  MaterialVertexDeclaration *vertexDecl;
  MaterialVertexShader *vertexShader;
  $FD064E2D54254842C138006CCDF089CE ___u2;
  char perPrimArgCount;
  char perObjArgCount;
  char stableArgCount;
  char customSamplerFlags;
  char precompiledIndex;
  char materialType;
  $B3C66DDD8C04D5B4145EC172E0EB66AC ___u9;
};

/* 1582 */
struct MaterialTechnique
{
  const char *name;
  unsigned __int16 flags;
  unsigned __int16 passCount;
  MaterialPass passArray[1];
};

/* 1583 */
struct MaterialTechniqueSet
{
  const char *name;
  char worldVertFormat;
  MaterialTechnique *techniques[36];
};

/* 1584 */
struct __cppobj ID3D11View : ID3D11DeviceChild
{
};

/* 1585 */
struct __cppobj ID3D11ShaderResourceView : ID3D11View
{
};

/* 1586 */
struct __declspec(align(4)) GfxImageLoadDef
{
  char levelCount;
  char flags;
  int format;
  int resourceSize;
  char data[1];
};

/* 1587 */
union GfxTexture
{
  ID3D11ShaderResourceView *basemap;
  GfxImageLoadDef *loadDef;
};

/* 1588 */
struct Picmip
{
  char platform[2];
};

/* 1589 */
struct CardMemory
{
  int platform[2];
};

/* 1590 */
struct GfxStreamedPartInfo
{
  unsigned int levelCountAndSize;
  unsigned int hash;
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned __int32 offset : 32;
  unsigned __int32 size : 28;
  unsigned __int32 ipakIndex : 4;
  unsigned __int32 adjacentLeft : 15;
  unsigned __int32 adjacentRight : 15;
  unsigned __int32 compressed : 1;
  unsigned __int32 valid : 1;
};

/* 1591 */
struct GfxImage
{
  GfxTexture texture;
  char mapType;
  char semantic;
  char category;
  bool delayLoadPixels;
  Picmip picmip;
  bool noPicmip;
  char track;
  CardMemory cardMemory;
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned __int16 depth;
  char levelCount;
  char streaming;
  unsigned int baseSize;
  char *pixels;
  GfxStreamedPartInfo streamedParts[1];
  char streamedPartCount;
  unsigned int loadedSize;
  char skippedMipLevels;
  const char *name;
  unsigned int hash;
};

/* 1592 */
struct MaterialTextureDef
{
  unsigned int nameHash;
  char nameStart;
  char nameEnd;
  char samplerState;
  char semantic;
  char isMatureContent;
  char pad[3];
  GfxImage *image;
};

/* 1593 */
struct MaterialConstantDef
{
  unsigned int nameHash;
  char name[12];
  vec4_t literal;
};

/* 1594 */
struct __cppobj ID3D11BlendState : ID3D11DeviceChild
{
};

/* 1595 */
struct __cppobj ID3D11DepthStencilState : ID3D11DeviceChild
{
};

/* 1596 */
struct __cppobj ID3D11RasterizerState : ID3D11DeviceChild
{
};

/* 1597 */
struct GfxStateBits
{
  unsigned int loadBits[2];
  ID3D11BlendState *blendState;
  ID3D11DepthStencilState *depthStencilState;
  ID3D11RasterizerState *rasterizerState;
};

/* 1599 */
union $5E7A6E4E379AE9DDA6699CEA1AB8F575
{
  MaterialTechniqueSet *localTechniqueSet;
  MaterialTechniqueSet *techniqueSet;
};

/* 1600 */
union $AB4C9F7D952F473DDA413126B84D2D91
{
  MaterialConstantDef *localConstantTable;
  MaterialConstantDef *constantTable;
};

/* 1598 */
struct Material
{
  MaterialInfo info;
  char stateBitsEntry[36];
  char textureCount;
  char constantCount;
  char stateBitsCount;
  char stateFlags;
  char cameraRegion;
  char probeMipBits;
  $5E7A6E4E379AE9DDA6699CEA1AB8F575 ___u8;
  MaterialTextureDef *textureTable;
  $AB4C9F7D952F473DDA413126B84D2D91 ___u10;
  GfxStateBits *stateBitsTable;
  Material *thermalMaterial;
};

/* 1601 */
struct PhysConstraint
{
  unsigned __int16 targetname;
  ConstraintType type;
  AttachPointType attach_point_type1;
  int target_index1;
  unsigned __int16 target_ent1;
  const char *target_bone1;
  AttachPointType attach_point_type2;
  int target_index2;
  unsigned __int16 target_ent2;
  const char *target_bone2;
  vec3_t offset;
  vec3_t pos;
  vec3_t pos2;
  vec3_t dir;
  int flags;
  int timeout;
  int min_health;
  int max_health;
  float distance;
  float damp;
  float power;
  vec3_t scale;
  float spin_scale;
  float minAngle;
  float maxAngle;
  Material *material;
  int constraintHandle;
  int rope_index;
  int centity_num[4];
};

/* 1602 */
struct XNADDR
{
  char addrBuff[37];
};

/* 1603 */
struct liveAddr
{
  XNADDR xnaddr;
};

/* 1604 */
struct LerpEntityStateVehicleRotorArm
{
  __int16 pitch;
  __int16 roll;
};

/* 1605 */
struct $C96EA5EC2ACBB9C0BF22693F316ACC67
{
  char r;
  char g;
  char b;
  char a;
};

/* 1606 */
union hudelem_color_t
{
  $C96EA5EC2ACBB9C0BF22693F316ACC67 __s0;
  int rgba;
};

/* 1607 */
struct des_key
{
  unsigned int ek[32];
  unsigned int dk[32];
};

/* 1608 */
struct des3_key
{
  unsigned int ek[3][32];
  unsigned int dk[3][32];
};

/* 1609 */
struct blowfish_key
{
  unsigned int S[4][256];
  unsigned int K[18];
};

/* 1610 */
struct rijndael_key
{
  unsigned int eK[60];
  unsigned int dK[60];
  int Nr;
};

/* 1611 */
union Symmetric_key
{
  des_key des;
  des3_key des3;
  blowfish_key blowfish;
  rijndael_key rijndael;
  void *data;
};

/* 1612 */
struct symmetric_CTR
{
  int cipher;
  int blocklen;
  int padlen;
  int mode;
  int ctrlen;
  char ctr[128];
  char pad[128];
  Symmetric_key key;
};

/* 1613 */
struct Operand
{
  expDataType dataType;
  operandInternalDataUnion internals;
};

/* 1614 */
struct MenuRow
{
  MenuCell *cells;
  char *eventName;
  char *onFocusEventName;
  bool disableArg;
  int status;
  int name;
};

/* 1615 */
struct Glyph
{
  unsigned __int16 letter;
  char x0;
  char y0;
  char dx;
  char pixelWidth;
  char pixelHeight;
  float s0;
  float t0;
  float s1;
  float t1;
};

/* 1616 */
struct KerningPairs
{
  unsigned __int16 wFirst;
  unsigned __int16 wSecond;
  int iKernAmount;
};

/* 1617 */
struct Font_s
{
  const char *fontName;
  int pixelHeight;
  int isScalingAllowed;
  int glyphCount;
  int kerningPairsCount;
  Material *material;
  Material *glowMaterial;
  Glyph *glyphs;
  KerningPairs *kerningPairs;
};

/* 1618 */
struct rectDef_s
{
  float x;
  float y;
  float w;
  float h;
  int horzAlign;
  int vertAlign;
};

/* 1619 */
struct columnInfo_s
{
  int elementStyle;
  int maxChars;
  rectDef_s rect;
};

/* 1620 */
struct LerpEntityStateVehicleGunnerAngles
{
  __int16 pitch;
  __int16 yaw;
};

/* 1621 */
struct sockaddr_storage_xp
{
  __int16 ss_family;
  char __ss_pad1[6];
  __int64 __ss_align;
  char __ss_pad2[112];
};

/* 1622 */
struct D3D11_MAPPED_SUBRESOURCE
{
  void *pData;
  unsigned int RowPitch;
  unsigned int DepthPitch;
};

/* 1623 */
struct LerpEntityStateZBarrierPiece
{
  char flags;
  char animTime;
};

/* 1624 */
struct __cppobj ID3D11CommandList : ID3D11DeviceChild
{
};

/* 1625 */
struct BrushWrapper
{
  vec3_t mins;
  int contents;
  vec3_t maxs;
  unsigned int numsides;
  cbrushside_t *sides;
  int axial_cflags[2][3];
  int axial_sflags[2][3];
  unsigned int numverts;
  vec3_t *verts;
  cplane_s *planes;
};

/* 1626 */
struct multiDef_s
{
  const char *dvarList[32];
  const char *dvarStr[32];
  float dvarValue[32];
  int count;
  int actionOnEnterPressOnly;
  int strDef;
};

/* 1627 */
struct $983F061E0B702DD8AE0B4B955735A6A3
{
  unsigned int Lo;
  int Hi;
};

/* 1628 */
union tagCY
{
  $983F061E0B702DD8AE0B4B955735A6A3 __s0;
  __int64 int64;
};

/* 1629 */
struct __cppobj IDispatch : IUnknown
{
};

/* 1630 */
struct tagSAFEARRAYBOUND
{
  unsigned int cElements;
  int lLbound;
};

/* 1631 */
struct tagSAFEARRAY
{
  unsigned __int16 cDims;
  unsigned __int16 fFeatures;
  unsigned int cbElements;
  unsigned int cLocks;
  void *pvData;
  tagSAFEARRAYBOUND rgsabound[1];
};

/* 1639 */
struct $E2F13C0D8C7A5E44CBEA2DDC2BADB614
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  __int64 llVal;
};

/* 1633 */
struct $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA
{
  char scale;
  char sign;
};

/* 1634 */
union $0D806C93242F44358DAA2ADDDCD3D3E3
{
  $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA __s0;
  unsigned __int16 signscale;
};

/* 1635 */
struct $A04CD8C0331024E133CCEC4B0AB36956
{
  unsigned int Lo32;
  unsigned int Mid32;
};

/* 1636 */
union $E1A62EEF6A79D9882685B17986C714C2
{
  $A04CD8C0331024E133CCEC4B0AB36956 __s0;
  unsigned __int64 Lo64;
};

/* 1637 */
struct tagDEC
{
  unsigned __int16 wReserved;
  $0D806C93242F44358DAA2ADDDCD3D3E3 ___u1;
  unsigned int Hi32;
  $E1A62EEF6A79D9882685B17986C714C2 ___u3;
};

/* 1640 */
struct $9EC1B2264F5ED957BE6AEF9040C3D6FC
{
  _BYTE gap0[8];
  int lVal;
  IRecordInfo *pRecInfo;
};

/* 1641 */
struct $F28A51B4B40B0D33C72915D739D42B4B
{
  _BYTE gap0[8];
  char bVal;
};

/* 1642 */
struct $31126B8528A05AF3606C6D495FD178E8
{
  _BYTE gap0[8];
  __int16 iVal;
};

/* 1643 */
struct $50230A970D9734D4E9774CFC619DF0F6
{
  _BYTE gap0[8];
  float fltVal;
};

/* 1644 */
struct $4C0EC2258454B893CE739DAE89D8DB7B
{
  _BYTE gap0[8];
  long double dblVal;
};

/* 1645 */
struct $6DB36323059316E675433BB10D285009
{
  _BYTE gap0[8];
  __int16 boolVal;
};

/* 1646 */
struct $8E3C8731874D1B3BC66617C4DD3163A6
{
  _BYTE gap0[8];
  int scode;
};

/* 1647 */
struct $61AD20D59856C3FFB61EBD7435F71664
{
  _BYTE gap0[8];
  tagCY cyVal;
};

/* 1648 */
struct $E94952165EEA9EEA990FEB33603E1B19
{
  _BYTE gap0[8];
  long double date;
};

/* 7178 */
typedef unsigned __int16 wchar_t;

/* 1649 */
struct $7B1C2AA558A72DB3909F7F0B6C8C78B2
{
  _BYTE gap0[8];
  wchar_t *bstrVal;
};

/* 1650 */
struct $1FCDE729AC50EF5BABC51E5C79B7023A
{
  _BYTE gap0[8];
  IUnknown *punkVal;
};

/* 1651 */
struct $E16632CD3B1C14C18455813167009011
{
  _BYTE gap0[8];
  IDispatch *pdispVal;
};

/* 1652 */
struct $9EE33AFE25F9C33DDD902D20EE083198
{
  _BYTE gap0[8];
  tagSAFEARRAY *parray;
};

/* 1653 */
struct $166B1F81F6EA96F97683A65F38FB1A59
{
  _BYTE gap0[8];
  char *pbVal;
};

/* 1654 */
struct $76732A64405C0E287FCB302687644550
{
  _BYTE gap0[8];
  __int16 *piVal;
};

/* 1655 */
struct $E5FC128E66C26C95254032BA69D36E74
{
  _BYTE gap0[8];
  int *plVal;
};

/* 1656 */
struct $E9CDCC48CD0BB58E8F361AA17BFDA76E
{
  _BYTE gap0[8];
  __int64 *pllVal;
};

/* 1657 */
struct $BF8CC88CDF129BD6E4FA4ABA13F521AD
{
  _BYTE gap0[8];
  float *pfltVal;
};

/* 1658 */
struct $2CABE618CF1C2625A4479554E4967E0A
{
  _BYTE gap0[8];
  long double *pdblVal;
};

/* 1659 */
struct $AAA92DA1D6E1B0E8462F69216B62027C
{
  _BYTE gap0[8];
  __int16 *pboolVal;
};

/* 1660 */
struct $F7167AE7A8ABA03C094C204FB1564A28
{
  _BYTE gap0[8];
  int *pscode;
};

/* 1661 */
struct $A67807D1C4CFA317963E8236F6537AA0
{
  _BYTE gap0[8];
  tagCY *pcyVal;
};

/* 1662 */
struct $6857AE69DB7C952EEFD665431A7B503A
{
  _BYTE gap0[8];
  long double *pdate;
};

/* 1663 */
struct $BE56ADCB97A5F80C4E840DC3FCEE04D4
{
  _BYTE gap0[8];
  wchar_t **pbstrVal;
};

/* 1664 */
struct $1348F48CB399E33D48B42DCD1643FC89
{
  _BYTE gap0[8];
  IUnknown **ppunkVal;
};

/* 1665 */
struct $A198DDA0BA6767578E3DC8270E73FD92
{
  _BYTE gap0[8];
  IDispatch **ppdispVal;
};

/* 1666 */
struct $6007DB503E9F4A30F0A067AB2FC9B41E
{
  _BYTE gap0[8];
  tagSAFEARRAY **pparray;
};

/* 1667 */
struct $D20B387FB1C1BAC1232DBFF5E8EF1349
{
  _BYTE gap0[8];
  tagVARIANT *pvarVal;
};

/* 1668 */
struct $6C39A09D97B880131B2C5BB4943CBB45
{
  _BYTE gap0[8];
  void *byref;
};

/* 1669 */
struct $E898A5260D8380431CCAA47FCC291563
{
  _BYTE gap0[8];
  char cVal;
};

/* 1670 */
struct $48802A31D3D0701BC13CEF9CEA041E7B
{
  _BYTE gap0[8];
  unsigned __int16 uiVal;
};

/* 1671 */
struct $B644145F46FF1F932B106BFA6CC3F6D9
{
  _BYTE gap0[8];
  unsigned int ulVal;
};

/* 1672 */
struct $EA00B0D50EAA1933F67C45009B664198
{
  _BYTE gap0[8];
  unsigned __int64 ullVal;
};

/* 1673 */
struct $5CA90CF57237397281FB12BFD52C1905
{
  _BYTE gap0[8];
  int intVal;
};

/* 1674 */
struct $E7F48E2F4EAA3149E57D87E5D1B2C6B8
{
  _BYTE gap0[8];
  unsigned int uintVal;
};

/* 1675 */
struct $FE6F595D504927BBC5C40878017A8B65
{
  _BYTE gap0[8];
  tagDEC *pdecVal;
};

/* 1676 */
struct $E1D71D20C3D01115E20D79FAE9629CE8
{
  _BYTE gap0[8];
  char *pcVal;
};

/* 1677 */
struct $5669F5A4AD19EF2CB42A5602080CB0A6
{
  _BYTE gap0[8];
  unsigned __int16 *puiVal;
};

/* 1678 */
struct $886F8AE9D7C8B1B861B6CA58D67B682A
{
  _BYTE gap0[8];
  unsigned int *pulVal;
};

/* 1679 */
struct $ADBB94A21537A8461C6168A5B871A740
{
  _BYTE gap0[8];
  unsigned __int64 *pullVal;
};

/* 1680 */
struct $CDA73A427DD2A30CDA26CA3394C33CF0
{
  _BYTE gap0[8];
  int *pintVal;
};

/* 1681 */
struct $2516E53E690D8CC5659AAB7EDC49E664
{
  _BYTE gap0[8];
  unsigned int *puintVal;
};

/* 1682 */
struct $17B4421FDC73B39569D8A12F584CB67F
{
  _BYTE gap0[8];
  void *pvRecord;
};

/* 1683 */
union $4FFADEBFF09D2153025580599A338EA6
{
  $E2F13C0D8C7A5E44CBEA2DDC2BADB614 __s0;
  tagDEC decVal;
  $9EC1B2264F5ED957BE6AEF9040C3D6FC __s2;
  $F28A51B4B40B0D33C72915D739D42B4B __s3;
  $31126B8528A05AF3606C6D495FD178E8 __s4;
  $50230A970D9734D4E9774CFC619DF0F6 __s5;
  $4C0EC2258454B893CE739DAE89D8DB7B __s6;
  $6DB36323059316E675433BB10D285009 __s7;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s8;
  $61AD20D59856C3FFB61EBD7435F71664 __s9;
  $E94952165EEA9EEA990FEB33603E1B19 __s10;
  $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s11;
  $1FCDE729AC50EF5BABC51E5C79B7023A __s12;
  $E16632CD3B1C14C18455813167009011 __s13;
  $9EE33AFE25F9C33DDD902D20EE083198 __s14;
  $166B1F81F6EA96F97683A65F38FB1A59 __s15;
  $76732A64405C0E287FCB302687644550 __s16;
  $E5FC128E66C26C95254032BA69D36E74 __s17;
  $E9CDCC48CD0BB58E8F361AA17BFDA76E __s18;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s19;
  $2CABE618CF1C2625A4479554E4967E0A __s20;
  $AAA92DA1D6E1B0E8462F69216B62027C __s21;
  $F7167AE7A8ABA03C094C204FB1564A28 __s22;
  $A67807D1C4CFA317963E8236F6537AA0 __s23;
  $6857AE69DB7C952EEFD665431A7B503A __s24;
  $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s25;
  $1348F48CB399E33D48B42DCD1643FC89 __s26;
  $A198DDA0BA6767578E3DC8270E73FD92 __s27;
  $6007DB503E9F4A30F0A067AB2FC9B41E __s28;
  $D20B387FB1C1BAC1232DBFF5E8EF1349 __s29;
  $6C39A09D97B880131B2C5BB4943CBB45 __s30;
  $E898A5260D8380431CCAA47FCC291563 __s31;
  $48802A31D3D0701BC13CEF9CEA041E7B __s32;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s33;
  $EA00B0D50EAA1933F67C45009B664198 __s34;
  $5CA90CF57237397281FB12BFD52C1905 __s35;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s36;
  $FE6F595D504927BBC5C40878017A8B65 __s37;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s38;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s39;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s40;
  $ADBB94A21537A8461C6168A5B871A740 __s41;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s42;
  $2516E53E690D8CC5659AAB7EDC49E664 __s43;
  $17B4421FDC73B39569D8A12F584CB67F __s44;
};

/* 1632 */
struct tagVARIANT
{
  $4FFADEBFF09D2153025580599A338EA6 ___u0;
};

/* 1638 */
struct __cppobj IRecordInfo : IUnknown
{
};

/* 1684 */
struct tagPARAMDESCEX
{
  unsigned int cBytes;
  tagVARIANT varDefaultValue;
};

/* 1685 */
struct __declspec(align(4)) tagPARAMDESC
{
  tagPARAMDESCEX *pparamdescex;
  unsigned __int16 wParamFlags;
};

/* 1686 */
struct D3D11_CLASS_INSTANCE_DESC
{
  unsigned int InstanceId;
  unsigned int InstanceIndex;
  unsigned int TypeId;
  unsigned int ConstantBuffer;
  unsigned int BaseConstantBufferOffset;
  unsigned int BaseTexture;
  unsigned int BaseSampler;
  int Created;
};

/* 1687 */
struct LerpEntityStateEarthquake
{
  float scale;
  float radius;
  int duration;
};

/* 1688 */
struct __declspec(align(4)) hudelem_s
{
  float x;
  float y;
  float z;
  float fontScale;
  float fromFontScale;
  int fontScaleStartTime;
  hudelem_color_t color;
  hudelem_color_t fromColor;
  int fadeStartTime;
  int scaleStartTime;
  float fromX;
  float fromY;
  int moveStartTime;
  int time;
  int duration;
  float value;
  float sort;
  hudelem_color_t glowColor;
  int fxBirthTime;
  unsigned int flags;
  __int16 targetEntNum;
  __int16 fontScaleTime;
  __int16 fadeTime;
  __int16 label;
  __int16 width;
  __int16 height;
  __int16 fromWidth;
  __int16 fromHeight;
  __int16 scaleTime;
  __int16 moveTime;
  __int16 text;
  unsigned __int16 fxLetterTime;
  unsigned __int16 fxDecayStartTime;
  unsigned __int16 fxDecayDuration;
  unsigned __int16 fxRedactDecayStartTime;
  unsigned __int16 fxRedactDecayDuration;
  char type;
  char font;
  char alignOrg;
  char alignScreen;
  char materialIndex;
  char offscreenMaterialIdx;
  char fromAlignOrg;
  char fromAlignScreen;
  char soundID;
  char ui3dWindow;
};

/* 1689 */
struct bdFastArray<char [64]>
{
  char (*m_data)[64];
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1690 */
struct ltc_ecc_set_type
{
  int size;
  char *name;
  char *prime;
  char *B;
  char *order;
  char *Gx;
  char *Gy;
};

/* 1693 */
union $17ECB2E9E83B9942FF053EE7925D48E0
{
  tagTYPEDESC *lptdesc;
  tagARRAYDESC *lpadesc;
  unsigned int hreftype;
};

/* 1691 */
struct __declspec(align(4)) tagTYPEDESC
{
  $17ECB2E9E83B9942FF053EE7925D48E0 ___u0;
  unsigned __int16 vt;
};

/* 1692 */
struct __unaligned __declspec(align(4)) tagARRAYDESC
{
  tagTYPEDESC tdescElem;
  unsigned __int16 cDims;
  __declspec(align(4)) tagSAFEARRAYBOUND rgbounds[1];
};

/* 1694 */
struct __declspec(align(4)) tagIDLDESC
{
  unsigned int dwReserved;
  unsigned __int16 wIDLFlags;
};

/* 1695 */
union $3F91C806880EDEA8C285588FA6C83414
{
  tagIDLDESC idldesc;
  tagPARAMDESC paramdesc;
};

/* 1696 */
struct tagELEMDESC
{
  tagTYPEDESC tdesc;
  $3F91C806880EDEA8C285588FA6C83414 ___u1;
};

/* 1697 */
struct __declspec(align(4)) tagFUNCDESC
{
  int memid;
  int *lprgscode;
  tagELEMDESC *lprgelemdescParam;
  tagFUNCKIND funckind;
  tagINVOKEKIND invkind;
  tagCALLCONV callconv;
  __int16 cParams;
  __int16 cParamsOpt;
  __int16 oVft;
  __int16 cScodes;
  tagELEMDESC elemdescFunc;
  unsigned __int16 wFuncFlags;
};

/* 1698 */
union $804D9CAF422E1605BD03149341DE06E2
{
  unsigned int oInst;
  tagVARIANT *lpvarValue;
};

/* 1699 */
struct tagVARDESC
{
  int memid;
  wchar_t *lpstrSchema;
  $804D9CAF422E1605BD03149341DE06E2 ___u2;
  tagELEMDESC elemdescVar;
  unsigned __int16 wVarFlags;
  tagVARKIND varkind;
};

/* 1700 */
struct __cppobj ITypeComp : IUnknown
{
};

/* 1701 */
union tagBINDPTR
{
  tagFUNCDESC *lpfuncdesc;
  tagVARDESC *lpvardesc;
  ITypeComp *lptcomp;
};

/* 1702 */
union expressionRpnDataUnion
{
  Operand constant;
  void *cmd;
  int cmdIdx;
};

/* 1703 */
struct bdFastArray<unsigned int>
{
  unsigned int *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1704 */
union $DDE6850FA3B86A9C87C6DBFCDF4AD649
{
  LerpEntityStateVehicleGunnerAngles gunnerAngles[4];
  LerpEntityStateVehicleRotorArm rotors[4];
};

/* 1705 */
union $ABF14481B6CB3C635AAEF83DF0F35947
{
  __int16 throttle;
  __int16 bodyPitch;
};

/* 1706 */
struct __declspec(align(2)) LerpEntityStateVehicle
{
  float steerYaw;
  float bodyRoll;
  $DDE6850FA3B86A9C87C6DBFCDF4AD649 ___u2;
  $ABF14481B6CB3C635AAEF83DF0F35947 ___u3;
  __int16 gunPitch;
  __int16 gunYaw;
  char targetRotorSpeed;
};

/* 1707 */
struct bdDispatchInterceptor
{
  bdDispatchInterceptorVtbl *vfptr;
};

/* 1708 */
struct bdReferencable
{
  bdReferencableVtbl *vfptr;
  volatile int m_refCount;
};

/* 1709 */
struct bdReferencableVtbl
{
  void *(__thiscall *__vecDelDtor)(bdReferencable *this, unsigned int);
};

/* 1710 */
struct bdFastArray<unsigned char>
{
  char *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1711 */
struct __cppobj __declspec(align(4)) bdBitBuffer : bdReferencable
{
  bdFastArray<unsigned char> m_data;
  unsigned int m_writePosition;
  unsigned int m_maxWritePosition;
  unsigned int m_readPosition;
  bool m_failedRead;
  bool m_typeChecked;
};

/* 1712 */
struct bdReference<bdBitBuffer>
{
  bdBitBuffer *m_ptr;
};

/* 1713 */
struct __cppobj __declspec(align(2)) bdByteBuffer : bdReferencable
{
  unsigned int m_size;
  char *m_data;
  char *m_readPtr;
  char *m_writePtr;
  bool m_typeChecked;
  bool m_typeCheckedCopy;
  bool m_allocatedData;
};

/* 1714 */
struct bdReference<bdByteBuffer>
{
  bdByteBuffer *m_ptr;
};

/* 1715 */
struct __cppobj bdMessage : bdReferencable
{
  char m_type;
  bdReference<bdBitBuffer> m_payload;
  bool m_payloadTypeChecked;
  bdReference<bdByteBuffer> m_unencPayload;
};

/* 1716 */
struct bdReference<bdMessage>
{
  bdMessage *m_ptr;
};

/* 1717 */
struct $DC3D5EA3E6080C8C82A5E1CDF5FE24EF
{
  char m_b1;
  char m_b2;
  char m_b3;
  char m_b4;
};

/* 1718 */
union $F24B18ECC3430177D9E4F132F16030A2
{
  $DC3D5EA3E6080C8C82A5E1CDF5FE24EF m_caddr;
  unsigned int m_iaddr;
};

/* 1719 */
struct bdInAddr
{
  $F24B18ECC3430177D9E4F132F16030A2 inUn;
};

/* 1720 */
struct bdInetAddr
{
  bdInAddr m_addr;
};

/* 1721 */
struct __declspec(align(4)) bdAddr
{
  bdInetAddr m_address;
  unsigned __int16 m_port;
};

/* 1722 */
struct bdArray<bdAddr>
{
  bdAddr *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1723 */
struct __cppobj __declspec(align(4)) bdCommonAddr : bdReferencable
{
  bdArray<bdAddr> m_localAddrs;
  bdAddr m_publicAddr;
  bdNATType m_natType;
  unsigned int m_hash;
  bool m_isLoopback;
};

/* 1724 */
struct bdReference<bdCommonAddr>
{
  bdCommonAddr *m_ptr;
};

/* 1725 */
struct bdSecurityID
{
  char ab[8];
};

/* 1726 */
struct bdEndpoint
{
  bdReference<bdCommonAddr> m_ca;
  bdSecurityID m_secID;
};

/* 1727 */
struct __cppobj bdAddrHandle : bdReferencable
{
  bdEndpoint m_endpoint;
  bdAddrHandle::bdAddrHandleStatus m_status;
  bdAddr m_realAddr;
};

/* 1728 */
struct bdReference<bdAddrHandle>
{
  bdAddrHandle *m_ptr;
};

/* 1729 */
struct bdConnectionListener
{
  bdConnectionListenerVtbl *vfptr;
};

/* 1730 */
struct bdReference<bdConnection>
{
  bdConnection *m_ptr;
};

/* 1731 */
struct bdConnectionListenerVtbl
{
  void *(__thiscall *__vecDelDtor)(bdConnectionListener *this, unsigned int);
  void (__thiscall *onConnect)(bdConnectionListener *this, bdReference<bdConnection>);
  void (__thiscall *onConnectFailed)(bdConnectionListener *this, bdReference<bdConnection>);
  void (__thiscall *onDisconnect)(bdConnectionListener *this, bdReference<bdConnection>);
  void (__thiscall *onReconnect)(bdConnectionListener *this, bdReference<bdConnection>);
};

/* 1732 */
struct bdFastArray<bdConnectionListener *>
{
  bdConnectionListener **m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1733 */
struct __cppobj bdConnection : bdReferencable
{
  bdReference<bdCommonAddr> m_addr;
  bdReference<bdAddrHandle> m_addrHandle;
  bdFastArray<bdConnectionListener *> m_listeners;
  unsigned int m_maxTransmissionRate;
  bdConnection::Status m_status;
};

/* 1734 */
const struct bdReceivedMessage
{
  bdReference<bdMessage> m_message;
  bdReference<bdConnection> m_connection;
};

/* 1735 */
struct bdDispatchInterceptorVtbl
{
  void *(__thiscall *__vecDelDtor)(bdDispatchInterceptor *this, unsigned int);
  bool (__thiscall *accept)(bdDispatchInterceptor *this, bdReceivedMessage *);
};

/* 1736 */
struct bdFastArray<bdDispatchInterceptor *>
{
  bdDispatchInterceptor **m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1737 */
struct LerpEntityStateJetThrust
{
  vec3_t thrustDir;
  int dummy;
  float dotLimit;
};

/* 1738 */
struct XModelCollTri_s
{
  vec4_t plane;
  vec4_t svec;
  vec4_t tvec;
};

/* 1739 */
struct PhysConstraints
{
  const char *name;
  unsigned int count;
  PhysConstraint data[16];
};

/* 1740 */
struct gameTypeInfo
{
  char gameType[12];
  char gameTypeName[32];
  char gameTypeShortName[32];
  char gameTypeNameCaps[32];
  int splitscreen;
};

/* 1741 */
struct mapStartLocInfo
{
  char startLoc[12];
  char startLocName[32];
  char mapLoadName[24];
  int numGameModes;
  gameTypeInfo gameModes[16];
};

/* 1742 */
struct LerpEntityStatePhysicsJitter
{
  float innerRadius;
  float minDisplacement;
  float maxDisplacement;
};

/* 1745 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 1743 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  unsigned __int16 Type;
  unsigned __int16 CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  _LIST_ENTRY ProcessLocksList;
  unsigned int EntryCount;
  unsigned int ContentionCount;
  unsigned int Flags;
  unsigned __int16 CreatorBackTraceIndexHigh;
  unsigned __int16 SpareWORD;
};

/* 1744 */
struct _RTL_CRITICAL_SECTION
{
  _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
  int LockCount;
  int RecursionCount;
  void *OwningThread;
  void *LockSemaphore;
  unsigned int SpinCount;
};

/* 1746 */
struct __declspec(align(8)) bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node
{
  bdReference<bdByteBuffer> m_data;
  unsigned __int64 m_key;
  bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node *m_next;
};

/* 1747 */
struct __cppobj bdHashingClass
{
};

/* 1748 */
struct __declspec(align(4)) bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1749 */
union $54FFFBD4E33C1C3B3F8B53E0A896B6CC
{
  char ip[4];
  unsigned int inaddr;
};

/* 1750 */
struct __declspec(align(4)) netadr_t
{
  $54FFFBD4E33C1C3B3F8B53E0A896B6CC ___u0;
  unsigned __int16 port;
  netadrtype_t type;
  netsrc_t localNetID;
  unsigned __int16 serverID;
};

/* 1751 */
struct __declspec(align(4)) platformNetAdr
{
  netadr_t netAddr;
  liveAddr liveaddr;
};

/* 1752 */
struct ScriptCondition
{
  bool fireOnTrue;
  int constructID;
  int blockID;
  ScriptCondition *next;
};

/* 1753 */
struct __cppobj bdPendingBufferTransfer : bdReferencable
{
  bdReference<bdByteBuffer> m_buffer;
  char *m_txPtr;
  unsigned int m_txAvail;
};

/* 1754 */
struct bdLinkedList<bdPendingBufferTransfer>::Node
{
  bdPendingBufferTransfer m_data;
  bdLinkedList<bdPendingBufferTransfer>::Node *m_next;
  bdLinkedList<bdPendingBufferTransfer>::Node *m_prev;
};

/* 1755 */
struct bdLinkedList<bdPendingBufferTransfer>
{
  bdLinkedList<bdPendingBufferTransfer>::Node *m_head;
  bdLinkedList<bdPendingBufferTransfer>::Node *m_tail;
  unsigned int m_size;
};

/* 1756 */
struct listBoxDef_s
{
  int mousePos;
  int cursorPos[1];
  int startPos[1];
  int endPos[1];
  int drawPadding;
  float elementWidth;
  float elementHeight;
  int numColumns;
  float special;
  columnInfo_s columnInfo[16];
  int notselectable;
  int noScrollBars;
  int usePaging;
  vec4_t selectBorder;
  vec4_t disableColor;
  vec4_t focusColor;
  vec4_t elementHighlightColor;
  vec4_t elementBackgroundColor;
  Material *selectIcon;
  Material *backgroundItemListbox;
  Material *highlightTexture;
  int noBlinkingHighlight;
  MenuRow *rows;
  int maxRows;
  int rowCount;
};

/* 1757 */
struct bdQoSReplyPacket
{
  char m_type;
  unsigned int m_id;
  unsigned __int64 m_timestamp;
  bool m_enabledMode;
  char *m_data;
  unsigned int m_dataSize;
  unsigned int m_serializedSize;
};

/* 1758 */
struct pinglist_t
{
  char adrstr[64];
  int start;
};

/* 1759 */
struct pendingServer_t
{
  char adrstr[64];
  char name[64];
  int startTime;
  int serverNum;
  int valid;
};

/* 1760 */
struct __cppobj ID3D11DepthStencilView : ID3D11View
{
};

/* 1761 */
struct D3D11_TEX1D_DSV
{
  unsigned int MipSlice;
};

/* 1762 */
struct D3D11_TEX1D_ARRAY_DSV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 1763 */
struct D3D11_TEX2D_DSV
{
  unsigned int MipSlice;
};

/* 1764 */
struct D3D11_TEX2D_ARRAY_DSV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 1765 */
struct D3D11_TEX2DMS_DSV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 1766 */
struct D3D11_TEX2DMS_ARRAY_DSV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 1767 */
union $5B7261F6E22EE6650B31A77EA7DA18D6
{
  D3D11_TEX1D_DSV Texture1D;
  D3D11_TEX1D_ARRAY_DSV Texture1DArray;
  D3D11_TEX2D_DSV Texture2D;
  D3D11_TEX2D_ARRAY_DSV Texture2DArray;
  D3D11_TEX2DMS_DSV Texture2DMS;
  D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
};

/* 1768 */
struct D3D11_DEPTH_STENCIL_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_DSV_DIMENSION ViewDimension;
  unsigned int Flags;
  $5B7261F6E22EE6650B31A77EA7DA18D6 ___u3;
};

/* 1769 */
struct expressionRpn
{
  int type;
  expressionRpnDataUnion data;
};

/* 1770 */
struct ExpressionStatement
{
  char *filename;
  int line;
  int numRpn;
  expressionRpn *rpn;
};

/* 1771 */
struct GenericEventScript
{
  ScriptCondition *prerequisites;
  ExpressionStatement condition;
  int type;
  bool fireOnTrue;
  const char *action;
  int blockID;
  int constructID;
  GenericEventScript *next;
};

/* 1772 */
struct GenericEventHandler
{
  const char *name;
  GenericEventScript *eventScript;
  GenericEventHandler *next;
};

/* 1773 */
struct animParamsDef_t
{
  const char *name;
  rectDef_s rectClient;
  float borderSize;
  vec4_t foreColor;
  vec4_t backColor;
  vec4_t borderColor;
  vec4_t outlineColor;
  float textScale;
  float rotation;
  GenericEventHandler *onEvent;
};

/* 1774 */
struct HunkUser
{
  HU_ALLOCATION_SCHEME scheme;
  unsigned int flags;
  const char *name;
  int type;
};

/* 1775 */
struct scrVarPub_t
{
  const char *fieldBuffer;
  bool developer;
  bool developer_script;
  bool evaluate;
  const char *error_message;
  int error_index;
  unsigned int time;
  unsigned int timeArrayId;
  unsigned int pauseArrayId;
  unsigned int levelId;
  unsigned int gameId;
  unsigned int animId;
  unsigned int freeEntList;
  unsigned int tempVariable;
  bool bInited;
  unsigned __int16 savecount;
  unsigned int checksum;
  unsigned int entId;
  unsigned int entFieldName;
  HunkUser *programHunkUser;
  char *programBuffer;
  char *endScriptBuffer;
  unsigned __int16 *saveIdMap;
  unsigned __int16 *saveIdMapRev;
  unsigned int numScriptThreads;
  unsigned int numScriptValues;
  unsigned int numScriptObjects;
  char *varUsagePos;
  int ext_threadcount;
  int totalObjectRefCount;
  volatile int totalVectorRefCount;
  int allocationCount;
};

/* 1776 */
struct yarrow_prng
{
  int cipher;
  int hash;
  char pool[128];
  symmetric_CTR ctr;
};

/* 1777 */
struct bdFastArray<unsigned __int64>
{
  unsigned __int64 *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1778 */
struct serverStatus_s
{
  pinglist_t pingList[16];
  int numqueriedservers;
  int currentping;
  int nextpingtime;
  int maxservers;
  int refreshtime;
  int numServers;
  int sortKey;
  int sortDir;
  int lastCount;
  int refreshActive;
  int currentServer;
  int displayServers[20000];
  int numDisplayServers;
  int serverCount;
  int numPlayersOnServers;
  int nextDisplayRefresh;
  int nextSortTime;
  Material *currentServerPreview;
  int motdLen;
  int motdWidth;
  int motdPaintX;
  int motdPaintX2;
  int motdOffset;
  int motdTime;
  char motd[1024];
  char displayServersFriendNameInd[300];
};

/* 1779 */
struct UnarchivedMatchState
{
  int teamScores[9];
  int matchUIVisibilityFlags;
  scoreboardColumnType_t scoreboardColumnTypes[5];
  char sideHasMeat;
  bool initialPlayersConnected;
  unsigned int talkFlags;
};

/* 1780 */
struct enumDvarDef_s
{
  const char *enumDvarName;
};

/* 1781 */
struct PhysPreset
{
  const char *name;
  int flags;
  float mass;
  float bounce;
  float friction;
  float bulletForceScale;
  float explosiveForceScale;
  const char *sndAliasPrefix;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  int canFloat;
  float gravityScale;
  vec3_t centerOfMassOffset;
  vec3_t buoyancyBoxMin;
  vec3_t buoyancyBoxMax;
};

/* 1782 */
struct profileMultiDef_s
{
  const char *profileVarList[32];
  const char *profileVarStr[32];
  float profileVarValue[32];
  int count;
  int actionOnEnterPressOnly;
  int strDef;
};

/* 1783 */
struct __cppobj ID3D11UnorderedAccessView : ID3D11View
{
};

/* 1784 */
struct D3D11_BUFFER_UAV
{
  unsigned int FirstElement;
  unsigned int NumElements;
  unsigned int Flags;
};

/* 1785 */
struct D3D11_TEX1D_UAV
{
  unsigned int MipSlice;
};

/* 1786 */
struct D3D11_TEX1D_ARRAY_UAV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 1787 */
struct D3D11_TEX2D_UAV
{
  unsigned int MipSlice;
};

/* 1788 */
struct D3D11_TEX2D_ARRAY_UAV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 1789 */
struct D3D11_TEX3D_UAV
{
  unsigned int MipSlice;
  unsigned int FirstWSlice;
  unsigned int WSize;
};

/* 1790 */
union $AA55597937929215B70BC5AF5BE12377
{
  D3D11_BUFFER_UAV Buffer;
  D3D11_TEX1D_UAV Texture1D;
  D3D11_TEX1D_ARRAY_UAV Texture1DArray;
  D3D11_TEX2D_UAV Texture2D;
  D3D11_TEX2D_ARRAY_UAV Texture2DArray;
  D3D11_TEX3D_UAV Texture3D;
};

/* 1791 */
struct D3D11_UNORDERED_ACCESS_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_UAV_DIMENSION ViewDimension;
  $AA55597937929215B70BC5AF5BE12377 ___u2;
};

/* 1792 */
struct $190F2CF944EC18EE3AF27F473C4F9DBE
{
  unsigned __int32 weaponIdx : 8;
  unsigned __int32 attachment1 : 6;
  unsigned __int32 attachment2 : 6;
  unsigned __int32 attachment3 : 6;
  unsigned __int32 padding : 6;
};

/* 1793 */
union Weapon
{
  $190F2CF944EC18EE3AF27F473C4F9DBE __s0;
  unsigned int weaponData;
};

/* 1794 */
struct LerpEntityStatePlayer
{
  float leanf;
  int movementDir;
  int moveType;
  Weapon primaryWeapon;
  Weapon stowedWeapon;
  Weapon offhandWeapon;
  Weapon meleeWeapon;
  char meleeWeaponCamo;
  char meleeWeaponModel;
  char vehicleType;
  char vehicleAnimBoneIndex;
  char vehicleSeat;
  char stowedWeaponCamo;
  char weaponHeat;
  char proneLegsAngle;
};

/* 1795 */
struct customGameTypeInfo
{
  char gameType[12];
  char gameTypeName[32];
  char gameTypeDesc[128];
  char fileName[32];
  char gameTypeNameCaps[32];
  int splitscreen;
};

/* 1796 */
struct bdNATTravListener
{
  bdNATTravListenerVtbl *vfptr;
};

/* 1797 */
struct bdNATTravListenerVtbl
{
  void *(__thiscall *__vecDelDtor)(bdNATTravListener *this, unsigned int);
  void (__thiscall *onNATAddrDiscovery)(bdNATTravListener *this, bdReference<bdCommonAddr>, bdAddr *);
  void (__thiscall *onNATAddrDiscoveryFailed)(bdNATTravListener *this, bdReference<bdCommonAddr>);
};

/* 1798 */
struct bdStopwatch
{
  unsigned __int64 m_start;
};

/* 1799 */
struct bdNATTravClientData
{
  bdNATTravClientData::bdNATTravClientDataState m_state;
  bdReference<bdCommonAddr> m_local;
  bdReference<bdCommonAddr> m_remote;
  bdNATTravListener *m_listener;
  bdNATTravListener *m_secondaryListener;
  unsigned int m_tries;
  bdStopwatch m_lastSent;
  bool m_throttled;
  bdStopwatch m_age;
};

/* 1800 */
struct bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node
{
  bdNATTravClientData m_data;
  unsigned int m_key;
  bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node *m_next;
};

/* 1801 */
struct __declspec(align(4)) bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1802 */
struct PhysGeomInfo
{
  BrushWrapper *brush;
  int type;
  vec3_t orientation[3];
  vec3_t offset;
  vec3_t halfLengths;
};

/* 1803 */
struct XModelCollSurf_s
{
  XModelCollTri_s *collTris;
  int numCollTris;
  vec3_t mins;
  vec3_t maxs;
  int boneIdx;
  int contents;
  int surfFlags;
};

/* 1804 */
struct LerpEntityStateLoopFx
{
  float cullDist;
  int period;
};

/* 1805 */
struct __declspec(align(4)) tagTLIBATTR
{
  _GUID guid;
  unsigned int lcid;
  tagSYSKIND syskind;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  unsigned __int16 wLibFlags;
};

/* 1806 */
struct LerpEntityStateCustomExplode
{
  int startTime;
  int effectIndex;
};

/* 1807 */
struct gameMsgDef_s
{
  int gameMsgWindowIndex;
  int gameMsgWindowMode;
};

/* 1808 */
struct bdSecurityKey
{
  char ab[16];
};

/* 1809 */
struct bdQoSProbeListener
{
  bdQoSProbeListenerVtbl *vfptr;
};

/* 1810 */
const struct bdQoSProbeInfo
{
  bdReference<bdCommonAddr> m_addr;
  bdAddr m_realAddr;
  float m_latency;
  char *m_data;
  unsigned int m_dataSize;
  bool m_disabled;
  unsigned int m_bandwidthDown;
  unsigned int m_bandwidthUp;
};

/* 1811 */
struct bdQoSProbeListenerVtbl
{
  void *(__thiscall *__vecDelDtor)(bdQoSProbeListener *this, unsigned int);
  void (__thiscall *onQoSProbeSuccess)(bdQoSProbeListener *this, bdQoSProbeInfo *);
  void (__thiscall *onQoSProbeFail)(bdQoSProbeListener *this, bdReference<bdCommonAddr>);
};

/* 1812 */
struct bdQoSProbe::bdQoSProbeEntryWrapper
{
  bdReference<bdCommonAddr> m_addr;
  bdSecurityID m_id;
  bdSecurityKey m_key;
  bdQoSProbeListener *m_listener;
  bdAddr m_realAddr;
  unsigned int m_retries;
  bdStopwatch m_lastTry;
};

/* 1813 */
struct bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>::Node
{
  bdQoSProbe::bdQoSProbeEntryWrapper m_data;
  unsigned int m_key;
  bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>::Node *m_next;
};

/* 1814 */
struct __declspec(align(4)) bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1815 */
struct __declspec(align(4)) D3D11_RENDER_TARGET_BLEND_DESC
{
  int BlendEnable;
  D3D11_BLEND SrcBlend;
  D3D11_BLEND DestBlend;
  D3D11_BLEND_OP BlendOp;
  D3D11_BLEND SrcBlendAlpha;
  D3D11_BLEND DestBlendAlpha;
  D3D11_BLEND_OP BlendOpAlpha;
  char RenderTargetWriteMask;
};

/* 1816 */
struct D3D11_BLEND_DESC
{
  int AlphaToCoverageEnable;
  int IndependentBlendEnable;
  D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
};

/* 1817 */
struct pendingServerStatus_t
{
  int num;
  pendingServer_t server[16];
};

/* 1818 */
struct bdAntiCheatChallengeParam
{
  bdAntiCheatChallengeParamVtbl *vfptr;
  char *m_data;
  unsigned int m_size;
};

/* 1819 */
struct bdAntiCheatChallengeParamVtbl
{
  void *(__thiscall *__vecDelDtor)(bdAntiCheatChallengeParam *this, unsigned int);
  bool (__thiscall *deserialize)(bdAntiCheatChallengeParam *this, bdReference<bdByteBuffer>);
  unsigned int (__thiscall *sizeOf)(bdAntiCheatChallengeParam *this);
};

/* 1820 */
struct bdArray<bdAntiCheatChallengeParam>
{
  bdAntiCheatChallengeParam *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1821 */
struct SndAlias
{
  const char *name;
  unsigned int id;
  const char *subtitle;
  const char *secondaryname;
  unsigned int assetId;
  const char *assetFileName;
  unsigned int flags0;
  unsigned int flags1;
  unsigned int duck;
  unsigned int contextType;
  unsigned int contextValue;
  unsigned int stopOnPlay;
  unsigned int futzPatch;
  unsigned __int16 fluxTime;
  unsigned __int16 startDelay;
  unsigned __int16 reverbSend;
  unsigned __int16 centerSend;
  unsigned __int16 volMin;
  unsigned __int16 volMax;
  unsigned __int16 pitchMin;
  unsigned __int16 pitchMax;
  unsigned __int16 distMin;
  unsigned __int16 distMax;
  unsigned __int16 distReverbMax;
  unsigned __int16 envelopMin;
  unsigned __int16 envelopMax;
  unsigned __int16 envelopPercentage;
  __int16 fadeIn;
  __int16 fadeOut;
  __int16 dopplerScale;
  char minPriorityThreshold;
  char maxPriorityThreshold;
  char probability;
  char occlusionLevel;
  char minPriority;
  char maxPriority;
  char pan;
  char limitCount;
  char entityLimitCount;
  char duckGroup;
};

/* 1822 */
struct SndAliasList
{
  const char *name;
  unsigned int id;
  SndAlias *head;
  int count;
  int sequence;
};

/* 1823 */
struct CachedAssets_t
{
  Material *scrollBarArrowUp;
  Material *scrollBarArrowDown;
  Material *scrollBarArrowLeft;
  Material *scrollBarArrowRight;
  Material *scrollBar;
  Material *scrollBarThumb;
  Material *sliderBar;
  Material *sliderThumb;
  Material *whiteMaterial;
  Material *cursor;
  Material *dvarlistArrowLeft;
  Material *dvarlistArrowRight;
  Material *line;
  Material *blur;
  Material *lineGraph;
  Font_s *bigFont;
  Font_s *smallFont;
  Font_s *consoleFont;
  Font_s *boldFont;
  Font_s *textFont;
  Font_s *extraBigFont;
  Font_s *extraSmallFont;
  Font_s *fxFont;
  SndAliasList *itemFocusSound;
};

/* 1824 */
struct mapInfo
{
  char mapName[32];
  char mapLoadName[24];
  char mapNameCaps[32];
  int splitscreen;
  char mapPackType[16];
  dlcIndex_t mapPackTypeIndex;
};

/* 1825 */
struct contentPackInfo
{
  char mapPackName[16];
};

/* 1826 */
struct serverStatusInfo_s
{
  char address[64];
  const char *lines[128][8];
  char text[1024];
  char pings[54];
  int numLines;
};

/* 1827 */
struct __declspec(align(8)) sharedUiInfo_t
{
  CachedAssets_t assets;
  int playerCount;
  char playerNames[18][32];
  char teamNames[18][32];
  ClientNum_t playerClientNums[18];
  int numGameTypes;
  gameTypeInfo gameTypes[32];
  int numCustomGameTypes;
  customGameTypeInfo customGameTypes[32];
  int numCustomMatchGameTypes;
  gameTypeInfo customMatchGameTypes[32];
  int gameTypeMapCount[32];
  int numMapStartLocsZombie;
  mapStartLocInfo mapStartLocsZombie[16];
  int numJoinGameTypes;
  gameTypeInfo joinGameTypes[32];
  int mapCount;
  int mapsLoadedCount;
  mapInfo mapList[128];
  contentPackInfo contentPackList[8];
  unsigned __int64 partyMemberXuid;
  Material *talkingIcons[3];
  serverStatus_s serverStatus;
  char serverStatusAddress[64];
  serverStatusInfo_s serverStatusInfo;
  serverStatusInfo_s serverStatusInfoScoreBoard;
  int nextServerStatusRefresh;
  int nextServerStatusScoreBoardRefresh;
  pendingServerStatus_t pendingServerStatus;
  unsigned __int64 visibilityBits[1];
  unsigned __int64 localVisibilityBits[1];
  Material *loadingScreen;
};

/* 1828 */
struct __declspec(align(4)) XBoneInfo
{
  vec3_t bounds[2];
  vec3_t offset;
  float radiusSquared;
  char collmap;
};

/* 1829 */
struct ecc_point
{
  void *x;
  void *y;
  void *z;
};

/* 1830 */
struct editFieldDef_s
{
  int cursorPos[1];
  float minVal;
  float maxVal;
  float defVal;
  float range;
  int maxChars;
  int maxCharsGotoNext;
  int maxPaintChars;
  int paintOffset;
};

/* 1831 */
union Prng_state
{
  char dummy[1];
  yarrow_prng yarrow;
};

/* 1832 */
struct LerpEntityStateTurret
{
  vec3_t gunAngles;
  int ownerNum;
  float heatVal;
  int overheating;
  float pivotOffset;
  int flags;
};

/* 1833 */
struct bdFastArray<__int64>
{
  __int64 *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1834 */
struct tagRECT
{
  int left;
  int top;
  int right;
  int bottom;
};

/* 1835 */
struct ecc_key
{
  int type;
  int idx;
  ltc_ecc_set_type *dp;
  ecc_point pubkey;
  void *k;
};

/* 1836 */
struct $850776BF090FAFF484F9CD75F25DE23D
{
  unsigned __int16 prev;
  unsigned __int16 next;
};

/* 1837 */
union $4DDD577F5C85114F40967F144B35CFEC
{
  unsigned __int16 size;
  unsigned __int16 entnum;
  unsigned __int16 nextEntId;
  unsigned __int16 self;
};

/* 1838 */
struct $7D9FF9A81E38C08295BFDA11C15D5D29
{
  unsigned __int16 refCount;
  $4DDD577F5C85114F40967F144B35CFEC u;
};

/* 1839 */
union $AEFA4C665F4517EB7F01C7810C98DC47
{
  $850776BF090FAFF484F9CD75F25DE23D f;
  $7D9FF9A81E38C08295BFDA11C15D5D29 o;
};

/* 1840 */
union $4CAE3BB0937162708CDD133717E057AE
{
  unsigned int typeAndData;
  unsigned int classnum;
  unsigned int notifyName;
  unsigned int waitTime;
  unsigned int parentLocalId;
};

/* 1841 */
struct ObjectVariableValue
{
  $AEFA4C665F4517EB7F01C7810C98DC47 u;
  $4CAE3BB0937162708CDD133717E057AE w;
};

/* 1842 */
struct ObjectVariableChildren
{
  unsigned __int16 firstChild;
  unsigned __int16 lastChild;
};

/* 1843 */
struct __declspec(align(2)) VariableStackBuffer
{
  char *pos;
  char *creationPos;
  int waitTime;
  unsigned __int16 size;
  unsigned __int16 bufLen;
  unsigned __int16 localId;
  char buf[1];
};

/* 1844 */
union VariableUnion
{
  int intValue;
  unsigned int uintValue;
  float floatValue;
  unsigned int stringValue;
  const float *vectorValue;
  char *codePosValue;
  unsigned int pointerValue;
  VariableStackBuffer *stackValue;
  unsigned int entityOffset;
};

/* 1845 */
union $0B22842470545EAD10916933DE839D26
{
  $850776BF090FAFF484F9CD75F25DE23D f;
  VariableUnion u;
};

/* 1846 */
struct $56D04237E6FDF8AF9F8BC894CC36B067
{
  unsigned __int16 name_hi;
  unsigned __int16 parentId;
};

/* 1847 */
union ChildBucketMatchKeys
{
  $56D04237E6FDF8AF9F8BC894CC36B067 keys;
  unsigned int match;
};

/* 1848 */
struct ChildVariableValue
{
  $0B22842470545EAD10916933DE839D26 u;
  unsigned __int16 next;
  char type;
  char name_lo;
  ChildBucketMatchKeys k;
  unsigned __int16 nextSibling;
  unsigned __int16 prevSibling;
};

/* 1849 */
struct scrVarGlob_t
{
  ObjectVariableValue *objectVariableValue;
  __declspec(align(128)) ObjectVariableChildren *objectVariableChildren;
  __declspec(align(128)) unsigned __int16 *childVariableBucket;
  __declspec(align(128)) ChildVariableValue *childVariableValue;
};

/* 1850 */
struct __cppobj ID3D11ClassInstance : ID3D11DeviceChild
{
};

/* 1851 */
struct __cppobj ID3D11ClassLinkage : ID3D11DeviceChild
{
};

/* 1852 */
struct bdNonce<16>
{
  char m_nonce[16];
  bool m_initialised;
};

/* 1853 */
struct D3D11_SUBRESOURCE_DATA
{
  const void *pSysMem;
  unsigned int SysMemPitch;
  unsigned int SysMemSlicePitch;
};

/* 1854 */
struct WeaponCamoMaterial
{
  unsigned __int16 replaceFlags;
  unsigned __int16 numBaseMaterials;
  Material **baseMaterials;
  Material **camoMaterials;
  float shaderConsts[8];
};

/* 1855 */
struct bdReference<bdPendingBufferTransfer>
{
  bdPendingBufferTransfer *m_ptr;
};

/* 1856 */
union $41090544F01B971CEA6978417397BD1B
{
  int actorNum;
  int corpseNum;
};

/* 1857 */
struct $0E2ADDF4FFAE096DF2EC3B0B4A5C12BC
{
  __int16 fBodyPitch;
};

/* 1858 */
struct LerpEntityStateActor
{
  $41090544F01B971CEA6978417397BD1B index;
  int species;
  int team;
  int enemy;
  int freeCameraLockOnAllowed;
  $0E2ADDF4FFAE096DF2EC3B0B4A5C12BC proneInfo;
  unsigned __int16 aiType;
};

/* 1859 */
struct ActionSlotParam_SpecifyWeapon
{
  Weapon weapon;
};

/* 1860 */
struct LeagueStats
{
  int rankPoints;
  int rank;
  float floats[3];
  int ints[8];
};

/* 1861 */
struct D3D11_RASTERIZER_DESC
{
  D3D11_FILL_MODE FillMode;
  D3D11_CULL_MODE CullMode;
  int FrontCounterClockwise;
  int DepthBias;
  float DepthBiasClamp;
  float SlopeScaledDepthBias;
  int DepthClipEnable;
  int ScissorEnable;
  int MultisampleEnable;
  int AntialiasedLineEnable;
};

/* 1862 */
struct LerpEntityStateZBarrier
{
  unsigned int barrierTypeIndex;
  LerpEntityStateZBarrierPiece pieces[6];
};

/* 1863 */
struct mover_slidedata_t
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t velocity;
};

/* 1864 */
struct LerpEntityStateAnonymous
{
  int data[9];
};

/* 1865 */
struct __cppobj ID3D11Asynchronous : ID3D11DeviceChild
{
};

/* 1866 */
struct __cppobj ID3D11Query : ID3D11Asynchronous
{
};

/* 1867 */
struct D3D11_QUERY_DESC
{
  D3D11_QUERY Query;
  unsigned int MiscFlags;
};

/* 1868 */
struct __cppobj ID3D11Counter : ID3D11Asynchronous
{
};

/* 1869 */
struct D3D11_COUNTER_DESC
{
  D3D11_COUNTER Counter;
  unsigned int MiscFlags;
};

/* 1870 */
struct tagEXCEPINFO
{
  unsigned __int16 wCode;
  unsigned __int16 wReserved;
  wchar_t *bstrSource;
  wchar_t *bstrDescription;
  wchar_t *bstrHelpFile;
  unsigned int dwHelpContext;
  void *pvReserved;
  HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
  int scode;
};

/* 1871 */
struct __cppobj bdTaskByteBuffer : bdByteBuffer
{
  char *m_taskData;
  unsigned int m_taskDataSize;
  unsigned int m_validHeaderSize;
  unsigned int m_paddingSize;
};

/* 1872 */
struct bdReference<bdTaskByteBuffer>
{
  bdTaskByteBuffer *m_ptr;
};

/* 1873 */
struct bdQueue<bdPendingBufferTransfer>
{
  bdLinkedList<bdPendingBufferTransfer> m_list;
};

/* 1874 */
struct bdStreamSocket
{
  int m_handle;
};

/* 1875 */
struct bdLobbyConnectionListener
{
  bdLobbyConnectionListenerVtbl *vfptr;
};

/* 1876 */
struct bdReference<bdLobbyConnection>
{
  bdLobbyConnection *m_ptr;
};

/* 1877 */
struct bdLobbyConnectionListenerVtbl
{
  void *(__thiscall *__vecDelDtor)(bdLobbyConnectionListener *this, unsigned int);
  void (__thiscall *onConnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
  void (__thiscall *onConnectFailed)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
  void (__thiscall *onDisconnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
};

/* 1878 */
struct bdCypher
{
  bdCypherVtbl *vfptr;
};

/* 1879 */
struct bdCypherVtbl
{
  void *(__thiscall *__vecDelDtor)(bdCypher *this, unsigned int);
  bool (__thiscall *encrypt)(bdCypher *this, const char *, const char *, char *, unsigned int);
  bool (__thiscall *decrypt)(bdCypher *this, const char *, const char *, char *, unsigned int);
};

/* 1880 */
struct symmetric_CBC
{
  int cipher;
  int blocklen;
  char IV[128];
  Symmetric_key key;
};

/* 1881 */
struct __cppobj bdCypher3Des : bdCypher
{
  symmetric_CBC m_cbc;
};

/* 1882 */
struct __cppobj bdLobbyConnection : bdReferencable
{
  bdReference<bdCommonAddr> m_addr;
  unsigned int m_maxSendMessageSize;
  unsigned int m_maxRecvMessageSize;
  bdLobbyConnection::RecvState m_recvState;
  char m_msgSizeBuffer[4];
  unsigned int m_recvCount;
  char m_recvEncryptType;
  unsigned int m_messageSize;
  bdReference<bdTaskByteBuffer> m_recvMessage;
  bdReference<bdPendingBufferTransfer> m_recvTransfer;
  bdQueue<bdPendingBufferTransfer> m_outgoingBuffers;
  bdStreamSocket m_socket;
  bdLobbyConnection::Status m_status;
  bdLobbyConnectionListener *m_connectionListener;
  bdCypher3Des m_cypher;
  char m_sessionKey[24];
  unsigned int m_messageCount;
  bdStopwatch m_keepAliveTimer;
  bdStopwatch m_lastReceivedTimer;
  bdStopwatch m_asyncConnectTimer;
};

/* 1883 */
struct scrMemTreePub_t
{
  char *mt_buffer;
};

/* 1884 */
struct bdAntiCheatChallenge
{
  bdAntiCheatChallengeVtbl *vfptr;
  __declspec(align(8)) unsigned __int16 m_functionID;
  unsigned __int64 m_challengeID;
  bdArray<bdAntiCheatChallengeParam> m_parameters;
};

/* 1885 */
struct bdAntiCheatChallengeVtbl
{
  void *(__thiscall *__vecDelDtor)(bdAntiCheatChallenge *this, unsigned int);
  bool (__thiscall *deserialize)(bdAntiCheatChallenge *this, bdReference<bdByteBuffer>);
};

/* 1886 */
struct bdArray<bdAntiCheatChallenge>
{
  bdAntiCheatChallenge *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1887 */
struct __cppobj bdAntiCheatChallenges : bdReferencable
{
  bdArray<bdAntiCheatChallenge> *m_challenges;
};

/* 1888 */
struct bdReference<bdAntiCheatChallenges>
{
  bdAntiCheatChallenges *m_ptr;
};

/* 1889 */
struct $B950AFB169DC87688B328897744C612F
{
  unsigned int LowPart;
  unsigned int HighPart;
};

/* 1890 */
union _ULARGE_INTEGER
{
  $B950AFB169DC87688B328897744C612F __s0;
  $B950AFB169DC87688B328897744C612F u;
  unsigned __int64 QuadPart;
};

/* 1891 */
struct _FILETIME
{
  unsigned int dwLowDateTime;
  unsigned int dwHighDateTime;
};

/* 1892 */
struct tagSTATSTG
{
  wchar_t *pwcsName;
  unsigned int type;
  _ULARGE_INTEGER cbSize;
  _FILETIME mtime;
  _FILETIME ctime;
  _FILETIME atime;
  unsigned int grfMode;
  unsigned int grfLocksSupported;
  _GUID clsid;
  unsigned int grfStateBits;
  unsigned int reserved;
};

/* 1893 */
struct _PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 1894 */
struct bdArray<bdReference<bdAddrHandle> >
{
  bdReference<bdAddrHandle> *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1895 */
struct bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>
{
  bdQoSProbe::bdQoSProbeEntryWrapper *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1896 */
struct bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>::Node
{
  bdArray<bdQoSProbe::bdQoSProbeEntryWrapper> m_data;
  bdReference<bdCommonAddr> m_key;
  bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>::Node *m_next;
};

/* 1897 */
struct __declspec(align(4)) bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1898 */
struct netProfilePacket_t
{
  int iTime;
  int iSize;
  int bFragment;
};

/* 1899 */
struct netProfileStream_t
{
  netProfilePacket_t packets[60];
  int iCurrPacket;
  int iBytesPerSecond;
  int iLastBPSCalcTime;
  int iCountedPackets;
  int iCountedFragments;
  int iFragmentPercentage;
  int iLargestPacket;
  int iSmallestPacket;
};

/* 1900 */
struct __cppobj bdSingleton<bdTrulyRandomImpl>
{
};

/* 1901 */
struct __cppobj bdTrulyRandomImpl
{
};

/* 1902 */
struct LerpEntityStateExplosion
{
  float innerRadius;
  float magnitude;
  float innerDamage;
  int dummy;
  float outerDamage;
};

/* 1903 */
struct LerpEntityStateBulletHit
{
  vec3_t start;
};

/* 1904 */
struct clientLinkInfo_t
{
  __int16 parentEnt;
  char tagIndex;
  char flags;
};

/* 1905 */
struct LerpEntityStatePrimaryLight
{
  char colorAndExp[4];
  float intensity;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  unsigned int mixerIndex;
};

/* 1906 */
struct __cppobj bdSingleton<bdNetImpl>
{
};

/* 1912 */
struct bdArray<bdString>
{
  bdString *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1913 */
struct bdArray<bdInetAddr>
{
  bdInetAddr *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1914 */
struct bdGetHostByNameConfig
{
  float m_timeout;
};

/* 1915 */
struct __declspec(align(4)) bdUPnPConfig
{
  float m_discoveryTimeout;
  float m_responseTimeout;
  float m_connectTimeout;
  bdUPnPConfig::bdUPnPRunMode m_runMode;
  unsigned int m_discoveryRetries;
  bool m_disabled;
  bdInetAddr m_gatewayAddr;
  bool m_onlyUseGateway;
};

/* 1916 */
struct __declspec(align(4)) bdSocketRouterConfig
{
  bool m_ignoreConnectionReset;
  float m_DTLSAssociationReceiveTimeout;
  unsigned int m_maxConnectionResets;
  bool m_simulateNAT;
};

/* 1917 */
struct bdNetStartParams
{
  bool m_onlineGame;
  unsigned __int16 m_gamePort;
  bdSocket *m_socket;
  bdArray<bdString> m_natTravHosts;
  unsigned __int16 m_natTravPort;
  bdArray<bdInetAddr> m_localAddresses;
  bdAddr m_overridePublicAddr;
  bdNATType m_overrideNATType;
  bdGetHostByNameConfig m_hostNameLookupConfig;
  bdUPnPConfig m_UPnPConfig;
  bool m_useAnyIP;
  unsigned int m_threadStackSize;
  bdSocketRouterConfig m_socketRouterConfig;
};

/* 1947 */
struct bdAddrHandleRefWrapper
{
  bdReference<bdAddrHandle> m_handle;
};

/* 1949 */
struct bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node **m_map;
  bdAddrHandleRefWrapper m_hashClass;
};

/* 1950 */
struct bdDispatcher
{
  bdFastArray<bdDispatchInterceptor *> m_interceptors;
};

/* 1951 */
struct bdConnectionStoreConfig
{
  unsigned int m_maxReceiveIterations;
  float m_maxShutdownDuration;
  unsigned int m_maxFlushIterations;
};

/* 1952 */
struct bdConnectionStore
{
  bdSocketRouter *m_socket;
  bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper> m_connectionMap;
  bdConnectionStore::bdConnectionStoreStatus m_status;
  bdDispatcher m_dispatcher;
  bdStopwatch m_shutdownTimer;
  bdAddressMap *m_addrMap;
  bdConnectionStoreConfig m_config;
};

/* 1909 */
struct bdSocket
{
  bdSocketVtbl *vfptr;
  int m_handle;
};

/* 1962 */
struct bdUPnPDevice
{
  bdUPnPDevice::bdUPnPDeviceState m_state;
  bool m_shutdownRequested;
  bdUPnPDevice::bdUPnPDeviceShutdownType m_shutdownType;
  bdUPnPDevice::bdUPnPPortStatus m_portStatus;
  bdAddr m_deviceAddr;
  bdArray<bdInetAddr> *m_localAddrs;
  bdInetAddr m_localConnectedAddr;
  bdStreamSocket m_streamSocket;
  bool m_isIp;
  bdUPnPConfig m_config;
  unsigned __int16 m_gamePort;
  bdInetAddr m_externalDeviceAddr;
  char m_requestBuffer[2048];
  unsigned int m_requestSize;
  char m_readBuffer[6144];
  unsigned int m_bytesReceived;
  char m_fetchLocation[64];
  char m_controlURL[128];
  bdStopwatch m_connectTimer;
  bdStopwatch m_responseTimer;
};

/* 1963 */
struct __declspec(align(4)) bdUPnP
{
  bdUPnP::bdUPnPState m_state;
  unsigned __int16 m_gamePort;
  bdArray<bdInetAddr> *m_localAddrs;
  bdUPnPConfig m_config;
  bdSocket m_discoverySocket;
  char m_readBuffer[1025];
  unsigned int m_bytesReceived;
  bdUPnPDevice m_device;
  bdUPnPDevice m_cachedDevice;
  bdStopwatch m_discoveryTimer;
  unsigned int m_numDiscoveryAttempts;
  bool m_shutdownRequested;
};

/* 1907 */
struct bdNetImpl
{
  bdNetImplVtbl *vfptr;
  __declspec(align(8)) bdNetStartParams m_params;
  bdConnectionStore m_connectionStore;
  bdSocketRouter *m_socketRouter;
  bdNetImpl::bdNetStatus m_status;
  bdIPDiscoveryClient *m_ipDiscClient;
  bdNATTypeDiscoveryClient *m_natTypeDiscClient;
  bdGetHostByName *m_getHostByName;
  __declspec(align(8)) bdUPnP m_UPnP;
  bdArray<bdAddr> m_natTravAddrs;
  unsigned int m_currentNatTravAddrIndex;
  unsigned int m_currentNatTravHostIndex;
  unsigned int m_upnpCollisionRetryCount;
};

/* 1908 */
struct bdNetImplVtbl
{
  void *(__thiscall *__vecDelDtor)(bdNetImpl *this, unsigned int);
};

/* 1910 */
struct bdSocketVtbl
{
  void *(__thiscall *__vecDelDtor)(bdSocket *this, unsigned int);
  bool (__thiscall *create)(bdSocket *this, const bool, const bool, const bool);
  bdSocketStatusCode (__thiscall *bind)(bdSocket *this, bdAddr *);
  bdSocketStatusCode (__thiscall *bind)(bdSocket *this, const unsigned __int16);
  int (__thiscall *sendTo)(bdSocket *this, bdAddr *, const void *, const unsigned int);
  int (__thiscall *receiveFrom)(bdSocket *this, bdAddr *, void *, const unsigned int);
  bool (__thiscall *close)(bdSocket *this);
};

/* 1911 */
struct bdString
{
  char *m_string;
};

/* 1918 */
struct bdSecurityKeyMapListener
{
  bdSecurityKeyMapListenerVtbl *vfptr;
};

/* 1919 */
union $7CCE7C18C2C651E539132088C853DA09
{
  void (__thiscall *~bdSecurityKeyMapListener)(bdSecurityKeyMapListener *this);
  void *(__thiscall *__vecDelDtor)(bdSecurityKeyMapListener *this, unsigned int);
};

/* 1920 */
struct bdSecurityKeyMapListenerVtbl
{
  void (__thiscall *onSecurityKeyRemove)(bdSecurityKeyMapListener *this, bdSecurityID *);
  $7CCE7C18C2C651E539132088C853DA09 ___u1;
};

/* 1921 */
struct bdPacketInterceptor
{
  bdPacketInterceptorVtbl *vfptr;
};

/* 1922 */
struct bdPacketInterceptorVtbl
{
  void *(__thiscall *__vecDelDtor)(bdPacketInterceptor *this, unsigned int);
  bool (__thiscall *acceptPacket)(bdPacketInterceptor *this, bdSocket *, bdAddr, void *, const unsigned int, const char);
};

/* 1923 */
struct bdFastArray<bdPacketInterceptor *>
{
  bdPacketInterceptor **m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1924 */
struct bdAddressMap
{
  bdArray<bdReference<bdAddrHandle> > m_addrHandles;
};

/* 1925 */
struct bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node
{
  bdSecurityKey m_data;
  bdSecurityID m_key;
  bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node *m_next;
};

/* 1926 */
struct __declspec(align(4)) bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1927 */
struct bdSecurityKeyMap
{
  bdSecurityKeyMapListener *m_listener;
  bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass> m_map;
};

/* 1928 */
struct __declspec(align(4)) bdServiceBandwidthArbitrator
{
  int m_allowedSend;
  bool m_sentThisSlice;
};

/* 1929 */
struct __cppobj __declspec(align(4)) bdNATTravClient : bdPacketInterceptor
{
  bdServiceBandwidthArbitrator *m_bandArb;
  bdArray<bdAddr> m_introducers;
  bdSocket *m_socket;
  bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass> m_callbacks;
  bdStopwatch m_keepAliveTimer;
  char m_secretKey[28];
  bdNATTravClient::bdNATTravClientStatus m_status;
  bdReference<bdCommonAddr> m_localCommonAddr;
  bool m_simulateNAT;
};

/* 1930 */
struct __cppobj bdQoSProbe : bdNATTravListener, bdPacketInterceptor
{
  unsigned int m_maxBandwidth;
  bdSocket *m_socket;
  bdNATTravClient *m_natTrav;
  bdServiceBandwidthArbitrator *m_bandArb;
  unsigned int m_lastProbeId;
  bdStopwatch m_probingTimer;
  bdFastArray<unsigned int> m_secids;
  bdQoSReplyPacket m_replyData;
  bdQoSProbe::bdQoSListenerState m_listenState;
  bdQoSProbe::bdQoSProbeStatus m_status;
  bdHashMap<bdReference<bdCommonAddr>,bdArray<bdQoSProbe::bdQoSProbeEntryWrapper>,bdHashingClass> m_probesResolving;
  bdHashMap<unsigned int,bdQoSProbe::bdQoSProbeEntryWrapper,bdHashingClass> m_probesProbing;
};

/* 1931 */
struct bdECCKey
{
  bdECCKey::bdECCKeyStatus m_status;
  ecc_key m_key;
};

/* 1934 */
struct bdSequenceNumber
{
  int m_seqNum;
};

/* 1935 */
struct bdSequenceNumberStore
{
  unsigned int m_bitmap;
  bdSequenceNumber m_lastSeq;
};

/* 1936 */
struct __declspec(align(4)) bdDTLSHeader
{
  bdDTLSHeaderVtbl *vfptr;
  char m_type;
  char m_version;
  unsigned __int16 m_vtag;
  unsigned __int16 m_counter;
};

/* 1938 */
struct __cppobj bdDTLSInitAck : bdDTLSHeader
{
  unsigned int m_timestamp;
  unsigned int m_signature;
  unsigned __int16 m_initTag;
  unsigned __int16 m_localTag;
  unsigned __int16 m_peerTag;
  unsigned __int16 m_localTieTag;
  unsigned __int16 m_peerTieTag;
  bdAddr m_peerAddr;
  bdSecurityID m_secID;
};

/* 1932 */
struct bdDTLSAssociation
{
  bdDTLSAssociationVtbl *vfptr;
  __declspec(align(8)) bdSocket *m_socket;
  bdSecurityKeyMap *m_keyMap;
  bdECCKey *m_ECCKey;
  bdCypher3Des m_cypher;
  char m_sharedKey[24];
  bdAddr m_addr;
  bdReference<bdAddrHandle> m_addrHandle;
  bdDTLSAssociation::bdDTLSStatus m_state;
  bdStopwatch m_lastReceived;
  bdStopwatch m_initTimer;
  char m_initResends;
  bdStopwatch m_cookieTimer;
  char m_cookieResends;
  unsigned __int16 m_localTag;
  unsigned __int16 m_peerTag;
  bdSequenceNumber m_seqNum;
  bdSequenceNumberStore m_incomingSeqNums;
  bdDTLSInitAck m_initAck;
  bdSecurityID m_localId;
  bdReference<bdCommonAddr> m_localCommonAddr;
  bdAddressMap *m_addrMap;
  float m_receiveTimeout;
};

/* 1933 */
struct bdDTLSAssociationVtbl
{
  void *(__thiscall *__vecDelDtor)(bdDTLSAssociation *this, unsigned int);
  int (__thiscall *sendTo)(bdDTLSAssociation *this, bdAddr *, const void *, const unsigned int, bdSecurityID *const );
  int (__thiscall *receiveFrom)(bdDTLSAssociation *this, bdAddr *, const void *, const unsigned int, bdReference<bdAddrHandle> *, void *, const unsigned int);
};

/* 1937 */
struct bdDTLSHeaderVtbl
{
  void *(__thiscall *__vecDelDtor)(bdDTLSHeader *this, unsigned int);
  bool (__thiscall *serialize)(bdDTLSHeader *this, void *, const unsigned int, const unsigned int, unsigned int *);
  bool (__thiscall *deserialize)(bdDTLSHeader *this, const void *, const unsigned int, const unsigned int, unsigned int *);
};

/* 1939 */
struct bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>::Node
{
  bdDTLSAssociation *m_data;
  bdEndpoint m_key;
  bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>::Node *m_next;
};

/* 1940 */
struct __cppobj bdEndpointHashingClass
{
};

/* 1941 */
struct __declspec(align(4)) bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass>::Node **m_map;
  bdEndpointHashingClass m_hashClass;
};

/* 1942 */
struct bdPacketBufferInternal
{
  char m_buffer[1024];
  unsigned int m_offset;
  unsigned int m_key;
};

/* 1943 */
struct bdPacketBuffer
{
  bdPacketBufferInternal m_buffers[10];
  unsigned int m_numActiveBuffers;
};

/* 1944 */
struct bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node
{
  bdReference<bdAddrHandle> m_data;
  bdEndpoint m_key;
  bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node *m_next;
};

/* 1945 */
struct __declspec(align(4)) bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node **m_map;
  bdEndpointHashingClass m_hashClass;
};

/* 1946 */
struct __cppobj __declspec(align(8)) bdSocketRouter : bdNATTravListener, bdSecurityKeyMapListener
{
  bdSocket *m_socket;
  bdFastArray<bdPacketInterceptor *> m_interceptors;
  bdSocketRouter::bdSocketRouterStatus m_status;
  bdSocketRouterConfig m_config;
  bdReference<bdCommonAddr> m_localCommonAddr;
  bdAddressMap m_addrMap;
  bdSecurityKeyMap m_keyStore;
  bdQoSProbe m_qosProber;
  bdNATTravClient m_natTrav;
  bdECCKey m_ECCKey;
  bdServiceBandwidthArbitrator m_qosBandwidth;
  bdHashMap<bdEndpoint,bdDTLSAssociation *,bdEndpointHashingClass> m_dtls;
  bdPacketBuffer *m_sendtoBuffer;
  bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass> m_endpointToAddrMap;
};

/* 1948 */
struct bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node
{
  bdReference<bdConnection> m_data;
  bdAddrHandleRefWrapper m_key;
  bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node *m_next;
};

/* 1953 */
struct bdIPDiscoveryConfig
{
  char m_retries;
  float m_requestTimeout;
};

/* 1954 */
struct bdIPDiscoveryClient
{
  bdSocket *m_socket;
  bdAddr m_serverAddr;
  bdAddr m_publicAddr;
  bdStopwatch m_timer;
  bdIPDiscoveryClient::bdIPDiscoveryClientStatus m_status;
  bdIPDiscoveryConfig m_config;
  unsigned int m_retries;
};

/* 1955 */
struct bdNATTypeDiscoveryConfig
{
  unsigned int m_NtdcsMaxResends;
  float m_NtdcsSendTimeout;
};

/* 1956 */
struct bdNATTypeDiscoveryClient
{
  bdSocket *m_socket;
  bdAddr m_serverAddr1;
  bdAddr m_serverAddr2;
  bdAddr m_mappedAddr;
  bdNATType m_NATType;
  bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState m_state;
  char m_resends;
  bdStopwatch m_timer;
  bdNATTypeDiscoveryConfig m_config;
};

/* 1957 */
struct __declspec(align(4)) bdRunnable
{
  bdRunnableVtbl *vfptr;
  bool m_stop;
};

/* 1958 */
struct bdRunnableVtbl
{
  void *(__thiscall *__vecDelDtor)(bdRunnable *this, unsigned int);
  unsigned int (__thiscall *run)(bdRunnable *this, void *);
  void (__thiscall *stop)(bdRunnable *this);
};

/* 1960 */
struct bdThreadArgs
{
  void *m_args;
  bdRunnable *m_runnable;
  bdThread *m_thread;
};

/* 1959 */
struct bdThread
{
  bdRunnable *m_runnable;
  bdThreadArgs m_threadArgs;
  void *m_handle;
  bool m_isRunning;
  unsigned int m_stackSize;
  unsigned int m_priority;
};

/* 1961 */
struct __cppobj bdGetHostByName : bdRunnable
{
  bdStopwatch m_timer;
  bdGetHostByName::bdStatus m_status;
  bdThread *m_thread;
  bdGetHostByNameConfig m_config;
  bdInAddr m_adresses[4];
  unsigned int m_numAddresses;
  int m_handle;
  unsigned int m_threadStackSize;
};

/* 1964 */
struct PhysGeomList
{
  unsigned int count;
  PhysGeomInfo *geoms;
  int contents;
};

/* 1965 */
struct _TypeDescriptor
{
  const void *pVFTable;
  void *spare;
  char name[];
};

/* 1966 */
struct _s__RTTIBaseClassDescriptor2
{
  _TypeDescriptor *pTypeDescriptor;
  unsigned int numContainedBases;
  _PMD where;
  unsigned int attributes;
  _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 1967 */
const struct __unaligned __declspec(align(1)) _s__RTTIBaseClassArray
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[];
};

/* 1968 */
const struct _s__RTTIClassHierarchyDescriptor
{
  unsigned int signature;
  unsigned int attributes;
  unsigned int numBaseClasses;
  _s__RTTIBaseClassArray *pBaseClassArray;
};

/* 1969 */
struct bdTaskResult
{
  bdTaskResultVtbl *vfptr;
};

/* 1970 */
struct bdTaskResultVtbl
{
  void *(__thiscall *__vecDelDtor)(bdTaskResult *this, unsigned int);
  bool (__thiscall *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
  unsigned int (__thiscall *sizeOf)(bdTaskResult *this);
};

/* 1971 */
struct bdTaskResultProcessor
{
  bdTaskResultProcessorVtbl *vfptr;
};

/* 1972 */
struct bdTaskResultProcessorVtbl
{
  void *(__thiscall *__vecDelDtor)(bdTaskResultProcessor *this, unsigned int);
  bool (__thiscall *processResult)(bdTaskResultProcessor *this, bdTaskResult *, unsigned int);
};

/* 1973 */
struct __cppobj bdRemoteTask : bdReferencable
{
  bdStopwatch m_timer;
  float m_timeout;
  bdRemoteTask::bdStatus m_status;
  bdReference<bdByteBuffer> m_byteResults;
  bdTaskResult *m_taskResult;
  bdTaskResult **m_taskResultList;
  unsigned int m_numResults;
  unsigned int m_maxNumResults;
  unsigned int m_totalNumResults;
  unsigned __int64 m_transactionID;
  bdLobbyErrorCode m_errorCode;
  bdTaskResultProcessor *m_taskResultProcessor;
};

/* 1974 */
struct bdReference<bdRemoteTask>
{
  bdRemoteTask *m_ptr;
};

/* 1975 */
struct bdLinkedList<bdReference<bdRemoteTask> >::Node
{
  bdReference<bdRemoteTask> m_data;
  bdLinkedList<bdReference<bdRemoteTask> >::Node *m_next;
  bdLinkedList<bdReference<bdRemoteTask> >::Node *m_prev;
};

/* 1976 */
struct bdLinkedList<bdReference<bdRemoteTask> >
{
  bdLinkedList<bdReference<bdRemoteTask> >::Node *m_head;
  bdLinkedList<bdReference<bdRemoteTask> >::Node *m_tail;
  unsigned int m_size;
};

/* 1977 */
union $545C80804CFDAA65132ED5A8382CA602
{
  unsigned int FirstElement;
  unsigned int ElementOffset;
};

/* 1978 */
union $44D74FBD1C023638CFA48FB7FF47174A
{
  unsigned int NumElements;
  unsigned int ElementWidth;
};

/* 1979 */
struct D3D11_BUFFER_SRV
{
  $545C80804CFDAA65132ED5A8382CA602 ___u0;
  $44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 1980 */
struct D3D11_TEX1D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 1981 */
struct D3D11_TEX1D_ARRAY_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 1982 */
struct D3D11_TEX2D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 1983 */
struct D3D11_TEX2D_ARRAY_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 1984 */
struct D3D11_TEX2DMS_SRV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 1985 */
struct D3D11_TEX2DMS_ARRAY_SRV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 1986 */
struct D3D11_TEX3D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 1987 */
struct D3D11_TEXCUBE_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 1988 */
struct D3D11_TEXCUBE_ARRAY_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
  unsigned int First2DArrayFace;
  unsigned int NumCubes;
};

/* 1989 */
struct D3D11_BUFFEREX_SRV
{
  unsigned int FirstElement;
  unsigned int NumElements;
  unsigned int Flags;
};

/* 1990 */
union $67A4D13DD95088AE5517325B3932895B
{
  D3D11_BUFFER_SRV Buffer;
  D3D11_TEX1D_SRV Texture1D;
  D3D11_TEX1D_ARRAY_SRV Texture1DArray;
  D3D11_TEX2D_SRV Texture2D;
  D3D11_TEX2D_ARRAY_SRV Texture2DArray;
  D3D11_TEX2DMS_SRV Texture2DMS;
  D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
  D3D11_TEX3D_SRV Texture3D;
  D3D11_TEXCUBE_SRV TextureCube;
  D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
  D3D11_BUFFEREX_SRV BufferEx;
};

/* 1991 */
struct D3D11_SHADER_RESOURCE_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D_SRV_DIMENSION ViewDimension;
  $67A4D13DD95088AE5517325B3932895B ___u2;
};

/* 1992 */
struct __declspec(align(2)) bdAuthTicket
{
  unsigned int m_magicNumber;
  char m_type;
  unsigned int m_titleID;
  unsigned int m_timeIssued;
  unsigned int m_timeExpires;
  unsigned __int64 m_licenseID;
  unsigned __int64 m_userID;
  char m_username[64];
  char m_sessionKey[24];
  char m_usingHashMagicNumber[3];
  char m_hash[4];
};

/* 1993 */
struct tagTHREADNAME_INFO
{
  unsigned int dwType;
  const char *szName;
  unsigned int dwThreadID;
  unsigned int dwFlags;
};

/* 1994 */
struct $8C32E5D3ED1763EA38B94549972C5F20
{
  unsigned __int32 LongFunction : 1;
  unsigned __int32 Persistent : 1;
  unsigned __int32 Private : 30;
};

/* 1995 */
union $61B67C3BB7C26C1108F2564B3909C1CD
{
  unsigned int Flags;
  $8C32E5D3ED1763EA38B94549972C5F20 s;
};

/* 1996 */
struct _TP_CALLBACK_ENVIRON_V1
{
  unsigned int Version;
  _TP_POOL *Pool;
  _TP_CLEANUP_GROUP *CleanupGroup;
  void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
  void *RaceDll;
  _ACTIVATION_CONTEXT *ActivationContext;
  void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
  $61B67C3BB7C26C1108F2564B3909C1CD u;
};

/* 1997 */
struct __cppobj __declspec(align(8)) bdLeagueSubdivisionResult : bdTaskResult
{
  unsigned __int64 m_teamID;
  unsigned __int64 m_leagueID;
  unsigned __int64 m_subdivisionID;
  char m_metadata[64];
  unsigned int m_metadataLength;
};

/* 1998 */
struct textExp_s
{
  ExpressionStatement textExp;
};

/* 1999 */
struct windowDef_t
{
  const char *name;
  rectDef_s rect;
  rectDef_s rectClient;
  const char *group;
  char style;
  char border;
  char modal;
  char frameSides;
  float frameTexSize;
  float frameSize;
  int ownerDraw;
  int ownerDrawFlags;
  float borderSize;
  int staticFlags;
  int dynamicFlags[1];
  int nextTime;
  vec4_t foreColor;
  vec4_t backColor;
  vec4_t borderColor;
  vec4_t outlineColor;
  float rotation;
  Material *background;
};

/* 2000 */
struct $9816E157869CE4BAAC72C5D665B03343
{
  char x;
  char y;
  char z;
  char w;
};

/* 2001 */
union $307E4550B204E85023DA181BAF74758D
{
  $9816E157869CE4BAAC72C5D665B03343 __s0;
  unsigned int v;
};

/* 2002 */
struct _XMBYTE4
{
  $307E4550B204E85023DA181BAF74758D ___u0;
};

/* 2003 */
struct $38C3DEC81229B66F67FB6D350D75FF5A
{
  float x;
  float y;
};

/* 2004 */
struct BlurStackEntry
{
  char menuName[64];
};

/* 2005 */
struct ItemKeyHandler
{
  int key;
  GenericEventScript *keyScript;
  ItemKeyHandler *next;
};

/* 2006 */
union vec2_t
{
  float v[2];
  $38C3DEC81229B66F67FB6D350D75FF5A __s1;
};

/* 2007 */
union focusDefData_t
{
  listBoxDef_s *listBox;
  multiDef_s *multi;
  profileMultiDef_s *profileMulti;
  editFieldDef_s *editField;
  enumDvarDef_s *enumDvar;
  void *data;
};

/* 2008 */
struct focusItemDef_s
{
  const char *mouseEnterText;
  const char *mouseExitText;
  const char *mouseEnter;
  const char *mouseExit;
  ItemKeyHandler *onKey;
  focusDefData_t focusTypeData;
};

/* 2009 */
union textDefData_t
{
  focusItemDef_s *focusItemDef;
  gameMsgDef_s *gameMsgDef;
  void *data;
};

/* 2010 */
struct textDef_s
{
  rectDef_s textRect[1];
  int alignment;
  int fontEnum;
  int itemFlags;
  int textAlignMode;
  float textalignx;
  float textaligny;
  float textscale;
  float textpadding;
  int textStyle;
  vec4_t fontColor;
  vec4_t glowColor;
  vec4_t shadowColor;
  float fontBlur;
  float glowSize;
  float shadowSize;
  vec2_t shadowOffset;
  const char *text;
  textExp_s *textExpData;
  textDefData_t textTypeData;
};

/* 2011 */
struct imageDef_s
{
  ExpressionStatement materialExp;
};

/* 2012 */
struct ownerDrawDef_s
{
  ExpressionStatement dataExp;
};

/* 2013 */
union itemDefData_t
{
  textDef_s *textDef;
  imageDef_s *imageDef;
  focusItemDef_s *blankButtonDef;
  ownerDrawDef_s *ownerDrawDef;
  void *data;
};

/* 2014 */
struct __declspec(align(8)) menuDef_t
{
  windowDef_t window;
  const char *font;
  int fullScreen;
  int ui3dWindowId;
  int itemCount;
  int fontIndex;
  int cursorItem[1];
  int fadeCycle;
  int priority;
  float fadeClamp;
  float fadeAmount;
  float fadeInAmount;
  float blurRadius;
  int openSlideSpeed;
  int closeSlideSpeed;
  int openSlideDirection;
  int closeSlideDirection;
  rectDef_s initialRectInfo;
  int openFadingTime;
  int closeFadingTime;
  int fadeTimeCounter;
  int slideTimeCounter;
  GenericEventHandler *onEvent;
  ItemKeyHandler *onKey;
  ExpressionStatement visibleExp;
  unsigned __int64 showBits;
  unsigned __int64 hideBits;
  const char *allowedBinding;
  const char *soundName;
  int imageTrack;
  int control;
  vec4_t focusColor;
  vec4_t disableColor;
  ExpressionStatement rectXExp;
  ExpressionStatement rectYExp;
  itemDef_s **items;
};

/* 2015 */
struct rectData_s
{
  ExpressionStatement rectXExp;
  ExpressionStatement rectYExp;
  ExpressionStatement rectWExp;
  ExpressionStatement rectHExp;
};

/* 2016 */
struct UIAnimInfo
{
  int animStateCount;
  animParamsDef_t **animStates;
  animParamsDef_t currentAnimState;
  animParamsDef_t nextAnimState;
  int animating;
  int animStartTime;
  int animDuration;
};

/* 2017 */
struct __declspec(align(8)) itemDef_s
{
  windowDef_t window;
  int type;
  int dataType;
  int imageTrack;
  const char *dvar;
  const char *profileVar;
  const char *dvarTest;
  const char *enableDvar;
  int dvarFlags;
  itemDefData_t typeData;
  menuDef_t *parent;
  rectData_s *rectExpData;
  ExpressionStatement visibleExp;
  unsigned __int64 showBits;
  unsigned __int64 hideBits;
  ExpressionStatement forecolorAExp;
  int ui3dWindowId;
  GenericEventHandler *onEvent;
  UIAnimInfo *animInfo;
};

/* 2018 */
struct UiMenuMap_t
{
  unsigned int hash;
  menuDef_t *menu;
};

/* 2019 */
struct menuClientNum_t
{
  menuDef_t *menu;
  LocalClientNum_t localClientNum;
};

/* 2020 */
union $B42A88463653BDCDFC5664844B4491DA
{
  int integer;
  float value;
  const char *string;
};

/* 2021 */
struct UILocalVar
{
  UILocalVarType type;
  const char *name;
  $B42A88463653BDCDFC5664844B4491DA u;
};

/* 2022 */
struct UILocalVarContext
{
  UILocalVar table[256];
};

/* 2023 */
struct __declspec(align(4)) UiContext
{
  UIContextIndex_t contextIndex;
  float bias;
  int realTime;
  int frameTime;
  $38C3DEC81229B66F67FB6D350D75FF5A cursor;
  int isCursorVisible;
  int screenWidth;
  int screenHeight;
  float screenAspect;
  float FPS;
  float blurRadiusOut;
  BlurStackEntry blurMenuStack[8];
  int blurMenuStackIndex;
  UiMenuMap_t Menus[600];
  int menuCount;
  menuClientNum_t menuStack[16];
  int openMenuCount;
  bool enableSlideAndFadeEffectForMenu;
  UILocalVarContext localVars;
  menuDef_t *uiBlurMenu;
  menuDef_t *menuToastPopupMenu;
  menuDef_t *subtitlesMenu;
  menuDef_t *cinematicSubtitlesMenu;
  UiMenuMap_t history[4];
  char historyPos;
  char historyCount;
};

/* 2024 */
struct __cppobj __declspec(align(8)) bdLeagueTeamInfo : bdTaskResult
{
  unsigned __int64 m_teamID;
  unsigned int m_createdTime;
  char m_name[65];
  char m_icon[1024];
  unsigned int m_iconLength;
};

/* 2025 */
struct __cppobj PIXProfile
{
};

/* 2026 */
struct $72A87371DC48B7F2C9A895B756EB6438
{
  unsigned __int32 entIndex : 12;
  unsigned __int32 useCount : 5;
  unsigned __int32 localClientNum : 2;
  unsigned __int32 isStationary : 1;
  unsigned __int32 isInKillCam : 1;
  unsigned __int32 team : 4;
  unsigned __int32 tag : 7;
};

/* 2027 */
union SndEntHandle
{
  $72A87371DC48B7F2C9A895B756EB6438 field;
  int handle;
};

/* 2028 */
struct tagCABSTR
{
  unsigned int cElems;
  wchar_t **pElems;
};

/* 2029 */
struct PartyMemberTeam
{
  int team;
  int switchTeam;
  int switchTeamTime;
  int lastTeam;
};

/* 2030 */
struct WeaponCamoMaterialSet
{
  unsigned int numMaterials;
  WeaponCamoMaterial *materials;
};

/* 2031 */
struct bdQoSRemoteAddr
{
  bdReference<bdCommonAddr> m_addr;
  bdSecurityID m_id;
  bdSecurityKey m_key;
};

/* 2032 */
struct __cppobj ID3D11Resource : ID3D11DeviceChild
{
};

/* 2033 */
struct bdAuthInfo
{
  unsigned int m_titleID;
  unsigned int m_IVSeed;
  char m_data[128];
  char m_sessionKey[24];
};

/* 2034 */
struct Rsa_key
{
  int type;
  void *e;
  void *d;
  void *N;
  void *p;
  void *q;
  void *qP;
  void *dP;
  void *dQ;
};

/* 2035 */
struct bdRSAKey
{
  bdRSAKey::bdRSAKeyStatus m_status;
  Rsa_key m_key;
};

/* 2036 */
struct __cppobj bdAuthService : bdLobbyConnectionListener
{
  bdFastArray<char [64]> m_usernamesForLicenseResult;
  bdReference<bdLobbyConnection> m_connection;
  unsigned int m_titleID;
  bdReference<bdCommonAddr> m_authServiceAddr;
  bdAuthService::bdStatus m_status;
  bdReference<bdBitBuffer> m_request;
  bdAuthInfo m_authInfo;
  __declspec(align(8)) bdAuthTicket m_authTicket;
  char m_steamCookieKey[88];
  char m_userKey[24];
  char m_licenseKey[24];
  bdLobbyErrorCode m_errorCode;
  unsigned int m_sendBufSize;
  unsigned int m_recvBufSize;
  bdGetHostByName m_authLookup;
  char *m_authAddress;
  unsigned __int16 m_authPort;
  bdAddr m_resolvedAuthAddress;
  bool m_isResolved;
  char m_cdKey[86];
  int m_cdKeyTimeToLiveSecs;
  bdRSAKey m_RSAKey;
};

/* 2037 */
struct _XMHALF4
{
  unsigned __int16 x;
  unsigned __int16 y;
  unsigned __int16 z;
  unsigned __int16 w;
};

/* 2038 */
struct $373A98546A87AC4E77B8EF8ED1574149
{
  unsigned __int32 x : 10;
  unsigned __int32 y : 11;
  unsigned __int32 z : 11;
};

/* 2039 */
union $5F5B9CE75FF235F5A98BDA4ACAB46FE2
{
  $373A98546A87AC4E77B8EF8ED1574149 __s0;
  unsigned int v;
};

/* 2040 */
struct _XMUDHEN3
{
  $5F5B9CE75FF235F5A98BDA4ACAB46FE2 ___u0;
};

/* 2041 */
struct $F59AD618DCB580D89B56C9C07BCCFAC1
{
  __int32 x : 10;
  __int32 y : 11;
  __int32 z : 11;
};

/* 2042 */
union $F3803C64C75C952D6DFB80C5E56CD3FA
{
  $F59AD618DCB580D89B56C9C07BCCFAC1 __s0;
  unsigned int v;
};

/* 2043 */
struct _XMDHEN3
{
  $F3803C64C75C952D6DFB80C5E56CD3FA ___u0;
};

/* 2044 */
struct $40FC779473844241B47EC3275E26AF41
{
  unsigned __int32 x : 10;
  unsigned __int32 y : 10;
  unsigned __int32 z : 10;
  unsigned __int32 w : 2;
};

/* 2045 */
union $CD165E0682C8F9729DA9385DFBEF1ADF
{
  $40FC779473844241B47EC3275E26AF41 __s0;
  unsigned int v;
};

/* 2046 */
struct _XMUDEC4
{
  $CD165E0682C8F9729DA9385DFBEF1ADF ___u0;
};

/* 2047 */
struct bdHMac
{
  bdHMacVtbl *vfptr;
};

/* 2048 */
struct bdHMacVtbl
{
  void *(__thiscall *__vecDelDtor)(bdHMac *this, unsigned int);
  bool (__thiscall *process)(bdHMac *this, const char *const , const unsigned int);
  bool (__thiscall *getData)(bdHMac *this, char *, unsigned int *);
};

/* 2049 */
struct __declspec(align(8)) sha256_state
{
  unsigned __int64 length;
  unsigned int state[8];
  unsigned int curlen;
  char buf[64];
};

/* 2050 */
struct sha1_state
{
  unsigned __int64 length;
  unsigned int state[5];
  unsigned int curlen;
  char buf[64];
};

/* 2051 */
struct __declspec(align(8)) md5_state
{
  unsigned __int64 length;
  unsigned int state[4];
  unsigned int curlen;
  char buf[64];
};

/* 2052 */
struct __declspec(align(8)) tiger_state
{
  unsigned __int64 state[3];
  unsigned __int64 length;
  unsigned int curlen;
  char buf[64];
};

/* 2053 */
union Hash_state
{
  char dummy[1];
  sha256_state sha256;
  sha1_state sha1;
  md5_state md5;
  tiger_state tiger;
  void *data;
};

/* 2054 */
struct __declspec(align(8)) Hmac_state
{
  Hash_state md;
  int hash;
  Hash_state hashstate;
  char *key;
};

/* 2055 */
struct __cppobj bdHMacSHA1 : bdHMac
{
  Hmac_state m_state;
};

/* 2056 */
struct _XMUDHENN3
{
  $5F5B9CE75FF235F5A98BDA4ACAB46FE2 ___u0;
};

/* 2057 */
struct bdFastArray<char>
{
  char *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 2058 */
struct bdArray<bdQoSRemoteAddr>
{
  bdQoSRemoteAddr *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 2059 */
struct bdFastArray<bdSecurityID>
{
  bdSecurityID *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 2060 */
struct bdQoSRequestPacket
{
  char m_type;
  unsigned __int64 m_timestamp;
  unsigned int m_id;
  unsigned int m_secid;
};

/* 2061 */
struct __cppobj bdRichPresence : bdTaskResult
{
  unsigned int m_dataSize;
  void *m_data;
};

/* 2062 */
struct LerpEntityStateCreateDynEnt
{
  int model;
  int fxId;
  int mature;
};

/* 2063 */
struct MaterialInfoRaw
{
  unsigned int nameOffset;
  unsigned int refImageNameOffset;
  unsigned int gameFlags;
  char _unused;
  char sortKey;
  char textureAtlasRowCount;
  char textureAtlasColumnCount;
  float maxDeformMove;
  char deformFlags;
  char usage;
  unsigned __int16 toolFlags;
  unsigned int locale;
  unsigned __int16 autoTexScaleWidth;
  unsigned __int16 autoTexScaleHeight;
  float tessSize;
  int surfaceFlags;
  int contents;
};

/* 2067 */
struct __declspec(align(4)) bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 2064 */
struct bdRemoteTaskManager
{
  bdRemoteTaskManagerVtbl *vfptr;
  __declspec(align(8)) bdLinkedList<bdReference<bdRemoteTask> > m_tasks;
  bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass> m_asyncTasks;
  bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass> m_asyncResults;
  bdReference<bdLobbyConnection> m_lobbyConnection;
  bool m_encryptedConnection;
  unsigned __int64 m_connectionID;
};

/* 2065 */
struct bdRemoteTaskManagerVtbl
{
  void *(__thiscall *__vecDelDtor)(bdRemoteTaskManager *this, unsigned int);
};

/* 2066 */
struct __declspec(align(8)) bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node
{
  bdReference<bdRemoteTask> m_data;
  unsigned __int64 m_key;
  bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node *m_next;
};

/* 2068 */
struct bdEventLog
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2069 */
struct bdTitleUtilities
{
  bdRemoteTaskManager *m_remoteTaskManager;
  bdEventLog *m_eventLog;
};

/* 2070 */
struct __cppobj __declspec(align(4)) bdVerifyString : bdTaskResult
{
  bool m_verified;
};

/* 2071 */
struct __cppobj bdTitleStats : bdTaskResult
{
  unsigned int m_numOnlineSessions;
  unsigned int m_numTotalUsers;
  unsigned int m_numOnlineUsers;
};

/* 2072 */
struct __cppobj __declspec(align(8)) bdOnlineUserInfo : bdTaskResult
{
  unsigned __int64 m_userID;
  bool m_isOnline;
};

/* 2073 */
struct __cppobj bdTimeStamp : bdTaskResult
{
  unsigned int m_timeStamp;
};

/* 2074 */
struct __cppobj bdMessageSigning : bdTaskResult
{
  unsigned int m_timeStamp;
  char m_messageAuthenticationCode[44];
  char m_macPiggyback[512];
};

/* 2075 */
struct __cppobj bdUserInfo : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
};

/* 2076 */
struct __cppobj ID3D11DeviceContext : ID3D11DeviceChild
{
};

/* 2077 */
struct __cppobj ID3D11Buffer : ID3D11Resource
{
};

/* 2078 */
struct __cppobj ID3D11SamplerState : ID3D11DeviceChild
{
};

/* 2079 */
struct __cppobj ID3D11GeometryShader : ID3D11DeviceChild
{
};

/* 2080 */
struct __cppobj ID3D11Predicate : ID3D11Query
{
};

/* 2081 */
struct __cppobj ID3D11RenderTargetView : ID3D11View
{
};

/* 2082 */
struct D3D11_VIEWPORT
{
  float TopLeftX;
  float TopLeftY;
  float Width;
  float Height;
  float MinDepth;
  float MaxDepth;
};

/* 2083 */
struct D3D11_BOX
{
  unsigned int left;
  unsigned int top;
  unsigned int front;
  unsigned int right;
  unsigned int bottom;
  unsigned int back;
};

/* 2084 */
struct __cppobj ID3D11HullShader : ID3D11DeviceChild
{
};

/* 2085 */
struct __cppobj ID3D11DomainShader : ID3D11DeviceChild
{
};

/* 2086 */
struct __cppobj ID3D11ComputeShader : ID3D11DeviceChild
{
};

/* 2087 */
struct _s__RTTICompleteObjectLocator
{
  unsigned int signature;
  unsigned int offset;
  unsigned int cdOffset;
  _TypeDescriptor *pTypeDescriptor;
  _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 2088 */
struct _XMSHORT4
{
  __int16 x;
  __int16 y;
  __int16 z;
  __int16 w;
};

/* 2089 */
struct tagCACLSID
{
  unsigned int cElems;
  _GUID *pElems;
};

/* 2090 */
union __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  char m128_i8[16];
  __int16 m128_i16[8];
  int m128_i32[4];
  __int64 m128_i64[2];
  char m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned int m128_u32[4];
};

/* 2091 */
union $EE90181479FAFEBEAAA38A1088A6FB04
{
  char u[16];
  __m128 v;
};

/* 2092 */
struct XMVECTORU8
{
  $EE90181479FAFEBEAAA38A1088A6FB04 ___u0;
};

/* 2093 */
union __m128i
{
  char m128i_i8[16];
  __int16 m128i_i16[8];
  int m128i_i32[4];
  __int64 m128i_i64[2];
  char m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned int m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 2094 */
struct __m128d
{
  long double m128d_f64[2];
};

/* 2095 */
struct $9E3A18598FC216A9C0535F4C83D74973
{
  __int32 x : 11;
  __int32 y : 11;
  __int32 z : 10;
};

/* 2096 */
union $3FCD737C0C8238216509528F827B367A
{
  $9E3A18598FC216A9C0535F4C83D74973 __s0;
  unsigned int v;
};

/* 2097 */
struct _XMHENDN3
{
  $3FCD737C0C8238216509528F827B367A ___u0;
};

/* 2098 */
struct tagCADBL
{
  unsigned int cElems;
  long double *pElems;
};

/* 2099 */
struct LerpEntityStateMissile
{
  int launchTime;
  int parentClientNum;
  int fuseTime;
  int forcedDud;
  float autoDetonateTime;
  vec3_t passThrough;
};

/* 2100 */
struct __cppobj bdTrulyRandom : bdSingleton<bdTrulyRandomImpl>
{
};

/* 2101 */
struct __cppobj ID3D11Texture2D : ID3D11Resource
{
};

/* 2102 */
struct DXGI_SAMPLE_DESC
{
  unsigned int Count;
  unsigned int Quality;
};

/* 2103 */
struct D3D11_TEXTURE2D_DESC
{
  unsigned int Width;
  unsigned int Height;
  unsigned int MipLevels;
  unsigned int ArraySize;
  DXGI_FORMAT Format;
  DXGI_SAMPLE_DESC SampleDesc;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2104 */
struct $7289791C297D16B15069A85D3D0FE11C
{
  __int64 x : 20;
  __int64 y : 20;
  __int64 z : 20;
  unsigned __int64 w : 4;
};

/* 2105 */
union $841EF69E69C0ACD7F77DE9BADEE3D933
{
  $7289791C297D16B15069A85D3D0FE11C __s0;
  unsigned __int64 v;
};

/* 2106 */
struct _XMXICO4
{
  $841EF69E69C0ACD7F77DE9BADEE3D933 ___u0;
};

/* 2107 */
struct sockaddr
{
  unsigned __int16 sa_family;
  char sa_data[14];
};

/* 2108 */
struct tagLC_ID
{
  unsigned __int16 wLanguage;
  unsigned __int16 wCountry;
  unsigned __int16 wCodePage;
};

/* 2109 */
struct $F0551D0CB09E7A078CAEF7CAC43D74C7
{
  char *locale;
  wchar_t *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 2110 */
struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
  wchar_t *_W_decimal_point;
  wchar_t *_W_thousands_sep;
  wchar_t *_W_int_curr_symbol;
  wchar_t *_W_currency_symbol;
  wchar_t *_W_mon_decimal_point;
  wchar_t *_W_mon_thousands_sep;
  wchar_t *_W_positive_sign;
  wchar_t *_W_negative_sign;
};

/* 2111 */
struct __lc_time_data
{
  char *wday_abbr[7];
  char *wday[7];
  char *month_abbr[12];
  char *month[12];
  char *ampm[2];
  char *ww_sdatefmt;
  char *ww_ldatefmt;
  char *ww_timefmt;
  unsigned int ww_lcid;
  int ww_caltype;
  int refcount;
  wchar_t *_W_wday_abbr[7];
  wchar_t *_W_wday[7];
  wchar_t *_W_month_abbr[12];
  wchar_t *_W_month[12];
  wchar_t *_W_ampm[2];
  wchar_t *_W_ww_sdatefmt;
  wchar_t *_W_ww_ldatefmt;
  wchar_t *_W_ww_timefmt;
};

/* 2112 */
struct threadlocaleinfostruct
{
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned int lc_handle[6];
  tagLC_ID lc_id[6];
  $F0551D0CB09E7A078CAEF7CAC43D74C7 lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  lconv *lconv;
  int *ctype1_refcount;
  unsigned __int16 *ctype1;
  const unsigned __int16 *pctype;
  const char *pclmap;
  const char *pcumap;
  __lc_time_data *lc_time_curr;
};

/* 2113 */
struct __declspec(align(4)) threadmbcinfostruct
{
  int refcount;
  int mbcodepage;
  int ismbcodepage;
  int mblcid;
  unsigned __int16 mbulinfo[6];
  char mbctype[257];
  char mbcasemap[256];
};

/* 2114 */
struct localeinfo_struct
{
  threadlocaleinfostruct *locinfo;
  threadmbcinfostruct *mbcinfo;
};

/* 2115 */
struct __cppobj bdTag : bdTaskResult
{
  unsigned __int64 m_priTag;
  unsigned __int64 m_secTag;
};

/* 2116 */
struct $40942CBCB8F0A1CDBC81269929B28324
{
  float _11;
  float _12;
  float _13;
  float _14;
  float _21;
  float _22;
  float _23;
  float _24;
  float _31;
  float _32;
  float _33;
  float _34;
  float _41;
  float _42;
  float _43;
  float _44;
};

/* 2117 */
union $30FAD6C19194ECF6EBCF2B83CC970FBB
{
  __m128 r[4];
  $40942CBCB8F0A1CDBC81269929B28324 __s1;
  float m[4][4];
};

/* 2118 */
struct _XMMATRIX
{
  $30FAD6C19194ECF6EBCF2B83CC970FBB ___u0;
};

/* 2119 */
struct _XMFLOAT4
{
  float x;
  float y;
  float z;
  float w;
};

/* 2120 */
struct jqMiniProfiler
{
  unsigned int *Var;
  unsigned int Start;
};

/* 2121 */
struct LerpEntityStateScriptMover
{
  char attachTagIndex[4];
  int attachedTagIndex;
  __int16 attachModelIndex[4];
  __int16 animScriptedAnim;
  __int16 attachedEntNum;
  int attachedEntTime;
  __int16 exploderIndex;
  unsigned __int16 scale;
  char flags;
  unsigned __int16 aiType;
};

/* 2122 */
struct __cppobj bdMemory
{
};

/* 2123 */
struct D3D11_DEPTH_STENCILOP_DESC
{
  D3D11_STENCIL_OP StencilFailOp;
  D3D11_STENCIL_OP StencilDepthFailOp;
  D3D11_STENCIL_OP StencilPassOp;
  D3D11_COMPARISON_FUNC StencilFunc;
};

/* 2124 */
struct D3D11_DEPTH_STENCIL_DESC
{
  int DepthEnable;
  D3D11_DEPTH_WRITE_MASK DepthWriteMask;
  D3D11_COMPARISON_FUNC DepthFunc;
  int StencilEnable;
  char StencilReadMask;
  char StencilWriteMask;
  D3D11_DEPTH_STENCILOP_DESC FrontFace;
  D3D11_DEPTH_STENCILOP_DESC BackFace;
};

/* 2125 */
struct D3D10_TEXTURE1D_DESC
{
  unsigned int Width;
  unsigned int MipLevels;
  unsigned int ArraySize;
  DXGI_FORMAT Format;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2126 */
struct tagCAUB
{
  unsigned int cElems;
  char *pElems;
};

/* 2127 */
struct _SECURITY_ATTRIBUTES
{
  unsigned int nLength;
  void *lpSecurityDescriptor;
  int bInheritHandle;
};

/* 2130 */
struct bdFastArray<void (__cdecl*)(void)>
{
  void (__cdecl **m_data)();
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 2128 */
struct __declspec(align(4)) bdSingletonRegistryImpl
{
  bdSingletonRegistryImplVtbl *vfptr;
  bdFastArray<void (__cdecl*)(void)> m_destroyFunctions;
  bool m_cleaningUp;
};

/* 2129 */
struct bdSingletonRegistryImplVtbl
{
  void *(__thiscall *__vecDelDtor)(bdSingletonRegistryImpl *this, unsigned int);
};

/* 2131 */
struct partyMergeData_t
{
  int timeSinceLastJoin;
  int lastSessionSearch;
  MergeDedicatedState dedicatedState;
};

/* 2132 */
struct zbarrier_piece_t
{
  char state;
  char scalar;
  char nextState;
  int startTime;
};

/* 2133 */
struct __cppobj __declspec(align(8)) bdFeatureBanInfo : bdTaskResult
{
  unsigned __int64 m_category;
  unsigned int m_secondsRemaining;
};

/* 2135 */
struct $5FB5E9F7DD505FEF63CC4059B1B1438B
{
  jqAtomicQueue<jqBatch,32>::NodeType *Ptr;
  unsigned int Count;
};

/* 2136 */
union $0C1F453AF80DAF2B2D6F43BB994C9E1B
{
  $5FB5E9F7DD505FEF63CC4059B1B1438B __s0;
  unsigned __int64 Val64;
};

/* 2137 */
struct jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType>
{
  $0C1F453AF80DAF2B2D6F43BB994C9E1B ___u0;
};

/* 2143 */
struct __cppobj _jqBatch
{
};

/* 2138 */
struct __declspec(align(4)) jqBatch
{
  void *p3x_info;
  void *Input;
  void *Output;
  jqModule *Module;
  jqBatchGroup *GroupID;
  void *ConditionalAddress;
  unsigned int ConditionalValue;
  unsigned int ParamData[55];
  _jqBatch _Batch;
};

/* 2134 */
struct __declspec(align(8)) jqAtomicQueue<jqBatch,32>::NodeType
{
  jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> Next;
  jqBatch Data;
};

/* 2139 */
struct $2BD02F38FBEBD854EF9A531D8B9F9671
{
  int QueuedBatchCount;
  int ExecutingBatchCount;
};

/* 2140 */
union $E323CA426F0E90DD266E8D23BC5065D0
{
  $2BD02F38FBEBD854EF9A531D8B9F9671 __s0;
  unsigned __int64 BatchCount;
};

/* 2141 */
struct jqBatchGroup
{
  $E323CA426F0E90DD266E8D23BC5065D0 ___u0;
};

/* 2142 */
struct __declspec(align(8)) jqModule
{
  const char *Name;
  jqWorkerType Type;
  int (__cdecl *Code)(jqBatch *);
  jqBatchGroup Group;
  unsigned __int64 Ticks;
  unsigned __int16 Calls;
  unsigned __int16 Requeues;
};

/* 2144 */
struct __declspec(align(4)) std::exception
{
  std::exceptionVtbl *vfptr;
  const char *_Mywhat;
  bool _Mydofree;
};

/* 2145 */
struct std::exceptionVtbl
{
  void *(__thiscall *__vecDelDtor)(std::exception *this, unsigned int);
  const char *(__thiscall *what)(std::exception *this);
};

/* 2146 */
struct __cppobj std::bad_exception : std::exception
{
};

/* 2147 */
struct std::_Exception_ptr
{
  void *_Data1;
  void *_Data2;
};

/* 2148 */
struct __cppobj std::bad_alloc : std::exception
{
};

/* 2149 */
struct __cppobj std::bad_array_new_length : std::bad_alloc
{
};

/* 2150 */
struct std::_Mutex
{
  void *_Mtx;
};

/* 2151 */
struct tagCACY
{
  unsigned int cElems;
  tagCY *pElems;
};

/* 2152 */
struct __cppobj bdURL : bdTaskResult
{
  char m_url[384];
  unsigned __int16 m_serverType;
  char m_serverIndex[128];
  unsigned __int64 m_fileID;
};

/* 2153 */
struct __cppobj bdPreCopyResult : bdTaskResult
{
  bdURL *m_source;
  char m_destination[384];
  unsigned int m_fileSize;
};

/* 2154 */
struct __declspec(align(2)) PartyHostData
{
  int partyGameStateChangeTime;
  int partyStateChangeTime;
  int stateSequenceNumber;
  int expectedPlayers;
  int vetoPassTime;
  int uiState;
  int uiEvent;
  int uiEventTime;
  int sessionSendTime;
  int lastValidLeagueTime;
  char votePossible;
  bool preloadingMap;
  bool firstLobby;
  bool migrateAfterRound;
  bool stopAfterRound;
  bool readyToStart;
  bool initialAckComplete;
};

/* 2155 */
struct __cppobj CD3D11_BLEND_DESC : D3D11_BLEND_DESC
{
};

/* 2156 */
struct __cppobj CD3D11_DEFAULT
{
};

/* 2157 */
struct $D77741121D80E826A72CBBB3B0B8D031
{
  __int32 x : 10;
  __int32 y : 10;
  __int32 z : 10;
  __int32 w : 2;
};

/* 2158 */
union $BD75FBFB9D003863D55F338AACE375C8
{
  $D77741121D80E826A72CBBB3B0B8D031 __s0;
  unsigned int v;
};

/* 2159 */
struct _XMDEC4
{
  $BD75FBFB9D003863D55F338AACE375C8 ___u0;
};

/* 2160 */
struct D3D11_TEXTURE3D_DESC
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int MipLevels;
  DXGI_FORMAT Format;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2161 */
struct LeagueOutcomes
{
  LeagueStats base;
  LeagueStats winner;
  LeagueStats loser;
};

/* 2162 */
struct TraceCheckCount
{
  unsigned __int16 global;
  unsigned __int16 *partitions;
  unsigned __int16 *brushes;
};

/* 2163 */
struct ddlHash_t
{
  int hash;
  int index;
};

/* 2164 */
struct ddlEnumDef_t
{
  const char *name;
  int memberCount;
  const char **members;
  ddlHash_t *hashTable;
};

/* 2165 */
struct $E13F9603E25AE253CEF2E605DB5FB65A
{
  __int32 x : 10;
  __int32 y : 10;
  __int32 z : 10;
  unsigned __int32 w : 2;
};

/* 2166 */
union $6843770DF32903625D233ED879F2E7D2
{
  $E13F9603E25AE253CEF2E605DB5FB65A __s0;
  unsigned int v;
};

/* 2167 */
struct _XMXDEC4
{
  $6843770DF32903625D233ED879F2E7D2 ___u0;
};

/* 2168 */
struct LerpEntityStateDestructibleHit
{
  unsigned int modelState[3];
};

/* 2169 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_21
{
  const void *pVFTable;
  void *spare;
  char name[21];
};

/* 2170 */
struct _XMUBYTEN4
{
  $307E4550B204E85023DA181BAF74758D ___u0;
};

/* 2171 */
struct __cppobj bdTwitterUserAttribute : bdTaskResult
{
  unsigned int m_name;
  char m_value[512];
};

/* 2172 */
struct bdDownloadInterceptor
{
  bdDownloadInterceptorVtbl *vfptr;
};

/* 2173 */
struct bdDownloadInterceptorVtbl
{
  void *(__thiscall *__vecDelDtor)(bdDownloadInterceptor *this, unsigned int);
  unsigned int (__thiscall *handleDownload)(bdDownloadInterceptor *this, void *, unsigned int);
};

/* 2174 */
struct $C3417F61F4833792F44264398840ADCA
{
  unsigned __int64 x : 20;
  unsigned __int64 y : 20;
  unsigned __int64 z : 20;
  unsigned __int64 w : 4;
};

/* 2175 */
union $B38ACCDA271EC06CC284D2A1B4FA5EEA
{
  $C3417F61F4833792F44264398840ADCA __s0;
  unsigned __int64 v;
};

/* 2176 */
struct _XMUICO4
{
  $B38ACCDA271EC06CC284D2A1B4FA5EEA ___u0;
};

/* 2177 */
struct Collmap
{
  PhysGeomList *geomList;
};

/* 2178 */
struct ScopedCriticalSection
{
  CriticalSection _s;
};

/* 2179 */
struct __declspec(align(8)) lobbyBanSlot_t
{
  unsigned __int64 bannedXuid;
  int banTime;
};

/* 2180 */
struct LerpEntityStateExplosionJolt
{
  float innerRadius;
  vec3_t impulse;
};

/* 2181 */
struct __cppobj __declspec(align(4)) bdDTLSInit : bdDTLSHeader
{
  unsigned __int16 m_initTag;
  bdSecurityID m_secID;
};

/* 2182 */
struct __cppobj __declspec(align(4)) bdDTLSCookieEcho : bdDTLSHeader
{
  bdDTLSInitAck m_cookie;
  char m_ca[37];
  char m_secID[8];
  char m_ECCKey[100];
};

/* 2183 */
struct __cppobj bdDTLSData : bdDTLSHeader
{
  char m_hmac[8];
};

/* 2184 */
struct __cppobj bdKeyValuePair : bdTaskResult
{
  char m_updateType;
  unsigned __int16 m_index;
  __int64 m_value;
};

/* 2185 */
struct __declspec(align(4)) PlayerVehicleState
{
  vec3_t origin;
  vec3_t angles;
  vec3_t velocity;
  vec3_t angVelocity;
  vec2_t tilt;
  vec2_t tiltVelocity;
  float targetHeightDelta;
  float lastGroundHeight;
  int entity;
  int flags;
  bool fullPhysics;
};

/* 2186 */
struct renderOptions_s
{
  unsigned int s;
};

/* 2187 */
struct __declspec(align(4)) PlayerHeldWeapon
{
  Weapon weapon;
  renderOptions_s options;
  float heatPercent;
  int fuelTankTime;
  int adsZoomSelect;
  bool overHeating;
  bool needsRechamber;
  bool heldBefore;
  bool quickReload;
  bool blockWeaponPickup;
  char model;
};

/* 2188 */
struct AmmoPool
{
  int count;
};

/* 2189 */
struct AmmoClip
{
  int count;
};

/* 2190 */
struct SprintState
{
  int sprintButtonUpRequired;
  int sprintDelay;
  int lastSprintStart;
  int lastSprintEnd;
  int sprintStartMaxLength;
  int sprintDuration;
  int sprintCooldown;
};

/* 2191 */
struct MantleState
{
  float yaw;
  int timer;
  int transIndex;
  int flags;
};

/* 2192 */
struct ActionSlotParam
{
  ActionSlotParam_SpecifyWeapon specifyWeapon;
};

/* 2193 */
struct __declspec(align(2)) objective_t
{
  objectiveState_t state;
  vec3_t origin;
  __int16 entNum;
  vec2_t size;
  int icon;
  __int16 ownerNum;
  unsigned __int16 name;
  __int16 teamMask;
  char progress;
  int clientUseMask[1];
  char gamemodeFlags;
  char flags;
  char teamNum;
};

/* 2194 */
struct $F5C28173AB9F55FBE8E1E7FFC8C7C9B1
{
  hudelem_s current[31];
  hudelem_s archival[31];
};

/* 2195 */
struct __declspec(align(8)) playerState_s
{
  int commandTime;
  int pm_type;
  int bobCycle;
  int pm_flags;
  __int64 weapFlags;
  int otherFlags;
  int pm_time;
  unsigned int loopSoundId;
  int loopSoundFade;
  vec3_t origin;
  vec3_t velocity;
  int remoteEyesEnt;
  int remoteEyesTagname;
  int remoteControlEnt;
  int weaponTime;
  int weaponDelay;
  int weaponTimeLeft;
  int weaponDelayLeft;
  int weaponIdleTime;
  int grenadeTimeLeft;
  int throwBackGrenadeOwner;
  int throwBackGrenadeTimeLeft;
  int weaponRestrictKickTime;
  bool mountAvailable;
  bool bRunLeftGun;
  bool bCarryingTurret;
  vec3_t mountPos;
  float mountDir;
  bool bThirdPerson;
  int foliageSoundTime;
  int gravity;
  float leanf;
  int speed;
  vec3_t delta_angles;
  int groundEntityNum;
  int moverEntityNum;
  int moverTimestamp;
  int groundType;
  vec3_t vLadderVec;
  int jumpTime;
  float jumpOriginZ;
  int slideTime;
  int moveType;
  int legsTimer;
  int torsoTimer;
  __int16 legsAnim;
  __int16 torsoAnim;
  int legsAnimDuration;
  int torsoAnimDuration;
  int damageTimer;
  int damageDuration;
  int dmgDirection;
  int dmgType;
  int corpseIndex;
  int movementDir;
  int eFlags;
  int eFlags2;
  PlayerVehicleState vehicleState;
  __int16 predictableEventSequence;
  __int16 predictableEventSequenceOld;
  int predictableEvents[4];
  unsigned int predictableEventParms[4];
  __int16 unpredictableEventSequence;
  __int16 unpredictableEventSequenceOld;
  int unpredictableEvents[4];
  unsigned int unpredictableEventParms[4];
  ClientNum_t clientNum;
  Weapon offHandWeapon;
  OffhandSecondaryClass offhandSecondary;
  OffhandPrimaryClass offhandPrimary;
  renderOptions_s renderOptions;
  int momentum;
  Weapon weapon;
  Weapon lastStandPrevWeapon;
  Weapon lastWeaponAltModeSwitch;
  Weapon stowedWeapon;
  char unusedCompatibilityPadding;
  Weapon meleeWeapon;
  int weaponstate;
  int weaponstateLeft;
  unsigned int weaponShotCount;
  unsigned int weaponShotCountLeft;
  float fWeaponPosFrac;
  int adsDelayTime;
  int spreadOverride;
  int spreadOverrideState;
  float weaponSpinLerp;
  int viewmodelIndex;
  vec3_t viewangles;
  int viewHeightTarget;
  float viewHeightCurrent;
  int viewHeightLerpTime;
  int viewHeightLerpTarget;
  int viewHeightLerpDown;
  vec2_t viewAngleClampBase;
  vec2_t viewAngleClampRange;
  int damageEvent;
  int damageYaw;
  int damagePitch;
  int damageCount;
  int stats[4];
  PlayerHeldWeapon heldWeapons[15];
  AmmoPool ammoNotInClip[15];
  AmmoClip ammoInClip[15];
  float proneDirection;
  float proneDirectionPitch;
  float proneTorsoPitch;
  ViewLockTypes viewlocked;
  __int16 viewlocked_entNum;
  int vehiclePos;
  int vehicleType;
  int vehicleAnimBoneIndex;
  int linkFlags;
  vec3_t linkAngles;
  int cursorHint;
  int cursorHintString;
  int cursorHintEntIndex;
  int cursorHintWeapon;
  int iCompassPlayerInfo;
  unsigned int spyplaneTypeEnabled;
  unsigned int satelliteTypeEnabled;
  int locationSelectionInfo;
  locSel_t locationSelectionType;
  SprintState sprintState;
  int lastDtpEnd;
  float fTorsoPitch;
  float fWaistPitch;
  float holdBreathScale;
  int holdBreathTimer;
  int chargeShotTimer;
  unsigned int chargeShotLevel;
  unsigned int shotsFiredFromChamber;
  float quickScopeScale;
  int quickScopeTimer;
  unsigned int clientFields;
  unsigned int clientFields2;
  unsigned int clientFields3;
  unsigned int entityStateClientFields;
  float moveSpeedScaleMultiplier;
  MantleState mantleState;
  int vehicleAnimStage;
  int vehicleEntryPoint;
  unsigned int scriptedAnim;
  int scriptedAnimTime;
  int meleeChargeEnt;
  int meleeChargeDist;
  int meleeChargeTime;
  int weapLockFlags;
  int weapLockedEntnum;
  unsigned int airburstMarkDistance;
  unsigned int perks[2];
  ActionSlotType actionSlotType[4];
  ActionSlotParam actionSlotParam[4];
  Weapon inventoryWeapon;
  __int16 wiiumoteAimX;
  __int16 wiiumoteAimY;
  char wiiuControllerType;
  char vehicleDefIndex;
  int entityEventSequence;
  int weapAnim;
  int weapAnimLeft;
  float aimSpreadScale;
  int shellshockIndex;
  int shellshockTime;
  int shellshockDuration;
  float dofNearStart;
  float dofNearEnd;
  float dofFarStart;
  float dofFarEnd;
  float dofNearBlur;
  float dofFarBlur;
  float dofViewmodelStart;
  float dofViewmodelEnd;
  int waterlevel;
  int smokeColorIndex;
  int hudElemLastAssignedSoundID;
  int adsZoomSelect;
  int adsZoomLatchTime;
  bool adsZoomLatchState;
  int adsPrevZoomSelect;
  int adsPrevZoomSelectTime;
  int artilleryInboundIconLocation;
  float visionSetLerpRatio;
  int poisoned;
  int binoculars;
  int scriptCursorHintString;
  objective_t objective[32];
  int deltaTime;
  int killCamEntity;
  int killCamTargetEntity;
  int introShotsFired;
  $F5C28173AB9F55FBE8E1E7FFC8C7C9B1 hud;
};

/* 2196 */
struct ArchivedMatchState
{
  int matchUIVisibilityFlags;
  int bombTimer[2];
  int roundsPlayed;
  int worldFields[8];
};

/* 2197 */
struct TracerDef
{
  const char *name;
  tracerType_t type;
  Material *material;
  unsigned int drawInterval;
  float speed;
  float beamLength;
  float beamWidth;
  float screwRadius;
  float screwDist;
  float fadeTime;
  float fadeScale;
  float texRepeatRate;
  vec4_t colors[5];
};

/* 2198 */
struct SubpartyMember
{
  int memberIndex;
  char *gamertag;
  int lastTeam;
  unsigned int affinityBits;
};

/* 2199 */
struct SubpartyInfo
{
  SubpartyMember members[18];
  bool links[18];
  int count;
  float skill;
  int skillRanking;
  int searchStartUTC;
  int score;
  int team;
};

/* 2200 */
struct score_s
{
  int ping;
  int status_icon;
  int place;
  int score;
  int kills;
  int assists;
  int deaths;
  int wagerWinnings;
  int scoreboardColumns[5];
  int downs;
  int revives;
  int headshots;
  int scoreMultiplier;
  int currentStreak;
};

/* 2201 */
struct vector3
{
  __m128 x;
  __m128 y;
  __m128 z;
};

/* 2202 */
struct __cppobj vector4 : vector3
{
  __m128 w;
};

/* 2203 */
struct D3D11_SAMPLER_DESC
{
  D3D11_FILTER Filter;
  D3D11_TEXTURE_ADDRESS_MODE AddressU;
  D3D11_TEXTURE_ADDRESS_MODE AddressV;
  D3D11_TEXTURE_ADDRESS_MODE AddressW;
  float MipLODBias;
  unsigned int MaxAnisotropy;
  D3D11_COMPARISON_FUNC ComparisonFunc;
  float BorderColor[4];
  float MinLOD;
  float MaxLOD;
};

/* 2204 */
union $7D06C17944BEA1209F0A04AD2A850FD9
{
  $40942CBCB8F0A1CDBC81269929B28324 __s0;
  float m[4][4];
};

/* 2205 */
struct _XMFLOAT4X4
{
  $7D06C17944BEA1209F0A04AD2A850FD9 ___u0;
};

/* 2206 */
struct __cppobj XMFLOAT4X4A : _XMFLOAT4X4
{
};

/* 2207 */
struct __cppobj tlNamedEventMarker
{
};

/* 2208 */
struct $00C5445D821F30703596DAFE93D3ED2D
{
  unsigned __int32 b : 8;
  unsigned __int32 g : 8;
  unsigned __int32 r : 8;
  unsigned __int32 a : 8;
};

/* 2209 */
union $3D3521153D1D65EE926B8DB141B09BD6
{
  $00C5445D821F30703596DAFE93D3ED2D __s0;
  unsigned int c;
};

/* 2210 */
struct _XMCOLOR
{
  $3D3521153D1D65EE926B8DB141B09BD6 ___u0;
};

/* 2211 */
struct __cppobj bdFileData : bdTaskResult
{
  void *m_fileData;
  unsigned int m_fileSize;
};

/* 2212 */
struct $468454A74AFA59C74C1DDE873C7DC854
{
  int type;
  VariableUnion u;
};

/* 2213 */
union $799256528897306B147C2DDF2BD8735E
{
  unsigned __int64 v64;
  $468454A74AFA59C74C1DDE873C7DC854 __s1;
};

/* 2214 */
struct VariableValue
{
  $799256528897306B147C2DDF2BD8735E ___u0;
};

/* 2215 */
struct XModelLodInfo
{
  float dist;
  unsigned __int16 numsurfs;
  unsigned __int16 surfIndex;
  int partBits[5];
};

/* 2216 */
struct $4E606432D672B6BF528F8C272D563E65
{
  unsigned __int16 x : 5;
  unsigned __int16 y : 5;
  unsigned __int16 z : 5;
  unsigned __int16 w : 1;
};

/* 2217 */
union $429F95499355F7BEA9437140485B2AD2
{
  $4E606432D672B6BF528F8C272D563E65 __s0;
  unsigned __int16 v;
};

/* 2218 */
struct _XMU555
{
  $429F95499355F7BEA9437140485B2AD2 ___u0;
};

/* 2219 */
struct _XMXICON4
{
  $841EF69E69C0ACD7F77DE9BADEE3D933 ___u0;
};

/* 2220 */
struct $C6A05ACA1F2E97F02BE5E69F955F05A1
{
  unsigned __int16 x : 5;
  unsigned __int16 y : 6;
  unsigned __int16 z : 5;
};

/* 2221 */
union $F6D45CB35CCA7EAC468EE669AC1C465F
{
  $C6A05ACA1F2E97F02BE5E69F955F05A1 __s0;
  unsigned __int16 v;
};

/* 2222 */
struct _XMU565
{
  $F6D45CB35CCA7EAC468EE669AC1C465F ___u0;
};

/* 2223 */
struct EntHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

/* 2224 */
struct entityShared_t
{
  char linked;
  char bmodel;
  char svFlags;
  char inuse;
  int broadcastTime;
  vec3_t mins;
  vec3_t maxs;
  int contents;
  vec3_t absmin;
  vec3_t absmax;
  vec3_t currentOrigin;
  vec3_t currentAngles;
  EntHandle ownerNum;
  int eventTime;
};

/* 2225 */
struct MemoryFile
{
  char *buffer;
  int bufferSize;
  int bytesUsed;
  char *careerStatsBuffer;
  int cacheBufferUsed;
  int segmentIndex;
  int segmentStart;
  int nonZeroCount;
  int zeroCount;
  bool errorOnOverflow;
  bool memoryOverflow;
  bool compress_enabled;
  bool rle_enabled;
  bool is_writing;
  int cacheBufferAvail;
  char cacheBuffer[32760];
};

/* 2226 */
struct fxLightingState_t
{
  float primaryLightFraction;
  int lightingOriginOffset;
};

/* 2227 */
struct bdTwitch
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2228 */
struct __cppobj __declspec(align(4)) bdBoolResult : bdTaskResult
{
  bool m_result;
};

/* 2229 */
struct __cppobj __declspec(align(4)) bdTwitchUserInfo : bdTaskResult
{
  char m_token[1025];
  char m_username[257];
};

/* 2230 */
struct D3D11_TEX2DMS_RTV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 2231 */
struct mover_positions_t
{
  float decelTime;
  float speed;
  float midTime;
  vec3_t pos1;
  vec3_t pos2;
  vec3_t pos3;
};

/* 2232 */
struct scriptMoverState_t
{
  char fov;
  char treeId;
  __int16 animId;
};

/* 2233 */
struct svEntity_s
{
  unsigned __int16 worldSector;
  unsigned __int16 nextEntityInWorldSector;
  int linkcontents;
  vec3_t linkmin;
  vec3_t linkmax;
};

/* 2234 */
struct _XMDECN4
{
  $BD75FBFB9D003863D55F338AACE375C8 ___u0;
};

/* 2235 */
struct __cppobj ID3D11Texture1D : ID3D11Resource
{
};

/* 2236 */
struct D3D11_TEXTURE1D_DESC
{
  unsigned int Width;
  unsigned int MipLevels;
  unsigned int ArraySize;
  DXGI_FORMAT Format;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2237 */
struct group_filter
{
  unsigned int gf_interface;
  sockaddr_storage_xp gf_group;
  MULTICAST_MODE_TYPE gf_fmode;
  unsigned int gf_numsrc;
  sockaddr_storage_xp gf_slist[1];
};

/* 2238 */
struct MaterialConstantDefRaw
{
  unsigned int nameOffset;
  vec4_t literal;
};

/* 2239 */
struct D3D11_BUFFER_DESC
{
  unsigned int ByteWidth;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
  unsigned int StructureByteStride;
};

/* 2240 */
struct __cppobj CD3D11_BUFFER_DESC : D3D11_BUFFER_DESC
{
};

/* 2241 */
struct tagCAUL
{
  unsigned int cElems;
  unsigned int *pElems;
};

/* 2242 */
struct bdAntiCheat
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2243 */
struct bdAntiCheatResponses
{
  bdAntiCheatResponsesVtbl *vfptr;
  bdFastArray<unsigned __int64> m_challengeIDs;
  bdFastArray<__int64> m_responses;
  unsigned __int16 m_numResponses;
  char m_logMessage[64];
  unsigned int m_logMessageSize;
};

/* 2244 */
struct bdAntiCheatResponsesVtbl
{
  void *(__thiscall *__vecDelDtor)(bdAntiCheatResponses *this, unsigned int);
};

/* 2245 */
struct __cppobj bdConsoleID : bdTaskResult
{
  char m_id[16];
};

/* 2246 */
struct bdMACAddr
{
  char m_data[6];
};

/* 2247 */
struct tagBSTRBLOB
{
  unsigned int cbSize;
  char *pData;
};

/* 2248 */
union $DE86D403B28CFDB22944C7C883F19EFF
{
  char Byte[16];
  unsigned __int16 Word[8];
};

/* 2249 */
struct in6_addr
{
  $DE86D403B28CFDB22944C7C883F19EFF u;
};

/* 2250 */
struct sockaddr_in6_w2ksp1
{
  __int16 sin6_family;
  unsigned __int16 sin6_port;
  unsigned int sin6_flowinfo;
  in6_addr sin6_addr;
  unsigned int sin6_scope_id;
};

/* 2251 */
struct __cppobj ID3D11Device : IUnknown
{
};

/* 2252 */
struct bdHash
{
  bdHashVtbl *vfptr;
};

/* 2253 */
struct bdHashVtbl
{
  void *(__thiscall *__vecDelDtor)(bdHash *this, unsigned int);
  bool (__thiscall *hash)(bdHash *this, const char *, const unsigned int, char *, unsigned int *);
};

/* 2254 */
struct $FAF74743FBE1C8632047CFB668F7028A
{
  unsigned int LowPart;
  int HighPart;
};

/* 2255 */
union _LARGE_INTEGER
{
  $FAF74743FBE1C8632047CFB668F7028A __s0;
  $FAF74743FBE1C8632047CFB668F7028A u;
  __int64 QuadPart;
};

/* 2256 */
struct tagCAH
{
  unsigned int cElems;
  _LARGE_INTEGER *pElems;
};

/* 2257 */
struct __cppobj CD3D11_TEXTURE1D_DESC : D3D11_TEXTURE1D_DESC
{
};

/* 2258 */
struct D3D11_INPUT_ELEMENT_DESC
{
  const char *SemanticName;
  unsigned int SemanticIndex;
  DXGI_FORMAT Format;
  unsigned int InputSlot;
  unsigned int AlignedByteOffset;
  D3D11_INPUT_CLASSIFICATION InputSlotClass;
  unsigned int InstanceDataStepRate;
};

/* 2259 */
struct LerpEntityStateStreamerHint
{
  float factor;
};

/* 2260 */
struct _XMHALF2
{
  unsigned __int16 x;
  unsigned __int16 y;
};

/* 2261 */
struct netUInt64
{
  unsigned int low;
  unsigned int high;
};

/* 2262 */
union $137F9095F7597C63EB19E8F61F5887B0
{
  int prestige;
  int lastDaysPlayed;
};

/* 2263 */
union $A5847F3733B25A05995DACEFEA4A5EF0
{
  unsigned __int64 xuid;
  netUInt64 xuid64;
};

/* 2264 */
union $42558DA933B613EBF7110FAC0B092AA9
{
  unsigned __int64 leagueTeamID;
  netUInt64 leagueTeamID64;
};

/* 2265 */
union $507BA11C2F866A98DA37F669C2EF3B8A
{
  unsigned __int64 leagueSubdivisionID;
  netUInt64 leagueSubdivisionID64;
};

/* 2266 */
struct __declspec(align(8)) clientState_s
{
  ClientNum_t clientIndex;
  team_t team;
  ffa_team_t ffaTeam;
  int modelindex;
  int riotShieldNext;
  int attachModelIndex[6];
  int attachTagIndex[6];
  char name[32];
  float maxSprintTimeMultiplier;
  int rank;
  $137F9095F7597C63EB19E8F61F5887B0 ___u10;
  int lastDamageTime;
  int lastStandStartTime;
  int turnedHumanTime;
  int beingRevived;
  $A5847F3733B25A05995DACEFEA4A5EF0 ___u15;
  $42558DA933B613EBF7110FAC0B092AA9 ___u16;
  int leagueDivisionID;
  $507BA11C2F866A98DA37F669C2EF3B8A ___u18;
  int leagueSubdivisionRank;
  unsigned int perks[2];
  int voiceConnectivityBits;
  char clanAbbrev[8];
  int attachedVehEntNum;
  int attachedVehSeat;
  int needsRevive;
  int clanAbbrevEV;
  VehicleAnimState vehAnimState;
  score_s score;
  int clientUIVisibilityFlags;
  int offhandWeaponVisible;
};

/* 2267 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_15
{
  const void *pVFTable;
  void *spare;
  char name[15];
};

/* 2268 */
struct __cppobj ITypeInfo : IUnknown
{
};

/* 2269 */
struct cmd_function_s
{
  cmd_function_s *next;
  const char *name;
  const char *autoCompleteDir;
  const char *autoCompleteExt;
  void (__cdecl *function)();
};

/* 2270 */
struct _XMFLOAT3
{
  float x;
  float y;
  float z;
};

/* 2271 */
struct __cppobj __declspec(align(8)) XMFLOAT3A : _XMFLOAT3
{
};

/* 2272 */
struct __cppobj __declspec(align(8)) bdStreamingTask : bdRemoteTask
{
  bool m_failOnPartialError;
  unsigned int m_partsFailed;
  bdStopwatch m_streamingTimer;
  float m_streamingTimeout;
};

/* 2273 */
struct bdReference<bdStreamingTask>
{
  bdStreamingTask *m_ptr;
};

/* 2274 */
struct __cppobj CD3D11_RECT : tagRECT
{
};

/* 2275 */
struct $F21043E2449FE85E4B8BB94E6ED895B3
{
  unsigned __int32 x : 11;
  unsigned __int32 y : 11;
  unsigned __int32 z : 10;
};

/* 2276 */
union $9B0CF740AB04CA62CC4B53184E7737F8
{
  $F21043E2449FE85E4B8BB94E6ED895B3 __s0;
  unsigned int v;
};

/* 2277 */
struct _XMUHEND3
{
  $9B0CF740AB04CA62CC4B53184E7737F8 ___u0;
};

/* 2278 */
struct tagCAUI
{
  unsigned int cElems;
  unsigned __int16 *pElems;
};

/* 2279 */
struct __cppobj CD3D11_BOX : D3D11_BOX
{
};

/* 2280 */
struct ClientVoicePacket_s
{
  char data[256];
  int dataSize;
};

/* 2281 */
struct __declspec(align(8)) MatchState
{
  int index;
  ArchivedMatchState archivedState;
  UnarchivedMatchState unarchivedState;
  unsigned int pad[1];
};

/* 2282 */
struct D3D11_TEX1D_ARRAY_RTV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2283 */
struct WeaponAttachment
{
  const char *szInternalName;
  const char *szDisplayName;
  eAttachment attachmentType;
  eAttachmentPoint attachmentPoint;
  PenetrateType penetrateType;
  weapFireType_t fireType;
  int firstRaisePriority;
  float fHipIdleAmount;
  bool bAltWeaponAdsOnly;
  bool bAltWeaponDisableSwitching;
  float altScopeADSTransInTime;
  float altScopeADSTransOutTime;
  bool bSilenced;
  bool bDualMag;
  bool laserSight;
  bool bInfraRed;
  bool bUseAsMelee;
  bool bDualWield;
  bool sharedAmmo;
  float fDamageRangeScale;
  float fAdsZoomFov1;
  float fAdsZoomFov2;
  float fAdsZoomFov3;
  float fAdsZoomInFrac;
  float fAdsZoomOutFrac;
  float fAdsTransInTimeScale;
  float fAdsTransOutTimeScale;
  float fAdsRecoilReductionRate;
  float fAdsRecoilReductionLimit;
  float fAdsViewKickCenterSpeedScale;
  float fAdsIdleAmountScale;
  bool swayOverride;
  float swayMaxAngle;
  float swayLerpSpeed;
  float swayPitchScale;
  float swayYawScale;
  float swayHorizScale;
  float swayVertScale;
  bool adsSwayOverride;
  float adsSwayMaxAngle;
  float adsSwayLerpSpeed;
  float adsSwayPitchScale;
  float adsSwayYawScale;
  float fAdsSwayHorizScale;
  float fAdsSwayVertScale;
  float adsMoveSpeedScale;
  float fHipSpreadMinScale;
  float fHipSpreadMaxScale;
  float strafeRotR;
  float standMoveF;
  vec3_t vStandRot;
  float fFireTimeScale;
  float fReloadTimeScale;
  float fReloadEmptyTimeScale;
  float fReloadAddTimeScale;
  float fReloadQuickTimeScale;
  float fReloadQuickEmptyTimeScale;
  float fReloadQuickAddTimeScale;
  bool mmsWeapon;
  bool mmsInScope;
  float mmsFOV;
  float mmsAspect;
  float mmsMaxDist;
  float clipSizeScale;
  int iClipSize;
  unsigned int stackFire;
  float stackFireSpread;
  float stackFireAccuracyDecay;
  unsigned int perks[2];
  float customFloat0;
  float customFloat1;
  float customFloat2;
  int customBool0;
  int customBool1;
  int customBool2;
};

/* 2284 */
struct tagCAFILETIME
{
  unsigned int cElems;
  _FILETIME *pElems;
};

/* 2285 */
struct D3D11_TEX1D_RTV
{
  unsigned int MipSlice;
};

/* 2286 */
struct __cppobj bdSessionID : bdTaskResult
{
  bdSecurityID m_sessionID;
};

/* 2287 */
struct __cppobj bdSessionInvite : bdTaskResult
{
  unsigned __int64 m_senderID;
  char m_senderName[64];
  bdSessionID m_sessionID;
  char m_attachment[1024];
  unsigned int m_attachmentSize;
};

/* 2288 */
struct clSnapshot_t
{
  int valid;
  int snapFlags;
  int serverTime;
  int physicsTime;
  int messageNum;
  int deltaNum;
  int ping;
  int cmdNum;
  playerState_s ps;
  int numEntities;
  int numClients;
  int numActors;
  int parseMatchStateIndex;
  int parseEntitiesIndex;
  int parseClientsIndex;
  int parseActorsIndex;
  int serverCommandNum;
};

/* 2289 */
struct __cppobj bdNet : bdSingleton<bdNetImpl>
{
};

/* 2290 */
struct __declspec(align(4)) MigrateMemberData
{
  ClientNum_t nominee;
  int nomineeUpload;
  int nomineeNAT;
  bool nomineeOnLSP;
  bool heardFrom;
  int lastHeardFrom;
  int lastSentTo;
  bool inSameGeographicalRegion;
};

/* 2291 */
struct $_TypeDescriptor$_extraBytes_24
{
  const void *pVFTable;
  void *spare;
  char name[24];
};

/* 2292 */
struct tagDISPPARAMS
{
  tagVARIANT *rgvarg;
  int *rgdispidNamedArgs;
  unsigned int cArgs;
  unsigned int cNamedArgs;
};

/* 2293 */
struct __declspec(align(4)) D3D11_COUNTER_INFO
{
  D3D11_COUNTER LastDeviceDependentCounter;
  unsigned int NumSimultaneousCounters;
  char NumDetectableParallelUnits;
};

/* 2294 */
struct trajectory_t
{
  char trType;
  int trTime;
  int trDuration;
  vec3_t trBase;
  vec3_t trDelta;
};

/* 2295 */
union LerpEntityStateTypeUnion
{
  LerpEntityStateTurret turret;
  LerpEntityStateLoopFx loopFx;
  LerpEntityStateActor actor;
  LerpEntityStatePrimaryLight primaryLight;
  LerpEntityStatePlayer player;
  LerpEntityStateVehicle vehicle;
  LerpEntityStateMissile missile;
  LerpEntityStateScriptMover scriptMover;
  LerpEntityStateBulletHit bulletHit;
  LerpEntityStateEarthquake earthquake;
  LerpEntityStateCustomExplode customExplode;
  LerpEntityStateExplosion explosion;
  LerpEntityStateExplosionJolt explosionJolt;
  LerpEntityStateJetThrust jetThrust;
  LerpEntityStatePhysicsJitter physicsJitter;
  LerpEntityStateDestructibleHit destructibleHit;
  LerpEntityStateCreateDynEnt createDynEnt;
  LerpEntityStateStreamerHint streamerHint;
  LerpEntityStateZBarrier zbarrier;
  LerpEntityStateAnonymous anonymous;
};

/* 2296 */
union $9B35D18BE7DE1A49784D3DA3953D5C89
{
  char iHeadIconTeam;
  __int16 teamAndOwnerIndex;
};

/* 2297 */
struct LerpEntityState
{
  int eFlags;
  int eFlags2;
  trajectory_t pos;
  trajectory_t apos;
  LerpEntityStateTypeUnion u;
  __int16 useCount;
  $9B35D18BE7DE1A49784D3DA3953D5C89 faction;
  unsigned int clientFields;
};

/* 2298 */
struct actorAnimState_t
{
  __int16 state;
  char subState;
  float fLeanAmount;
  float fAimUpDown;
  float fAimLeftRight;
};

/* 2299 */
struct playerAnimState_t
{
  int legsAnim;
  int torsoAnim;
  float fTorsoPitch;
  float fWaistPitch;
};

/* 2300 */
struct vehicleState_t
{
  __int16 flags;
  char vehicleDefIndex;
  char treeId;
  __int16 animId;
  __int16 attachModelIndex[2];
  char attachTagIndex[2];
};

/* 2301 */
struct hardlineHint_t
{
  char team;
  char perk;
  char hint;
};

/* 2302 */
union $72CF1A1A1998C3D3856B7CBEA1FE5B75
{
  actorAnimState_t animState;
  playerAnimState_t anim;
  vehicleState_t vehicleState;
  hardlineHint_t hardline;
  scriptMoverState_t moverState;
  fxLightingState_t fx;
};

/* 2303 */
union $8A55D3BB0C758A956A56F8E75035F352
{
  int hintString;
  int vehicleXModel;
  unsigned int secondBcAlias;
  unsigned int soundTag;
};

/* 2304 */
union $32A75A724673AB33BA2D603F67D50EA7
{
  __int16 brushmodel;
  __int16 xmodel;
  __int16 primaryLight;
  unsigned __int16 bone;
};

/* 2305 */
union $5941A7488DBCD59DA5C855EBC8EBAB48
{
  char scale;
  char eventParm2;
  char helicopterStage;
  char destructibleid;
  char zombieShrinkOn;
};

/* 2306 */
struct __declspec(align(2)) entityState_s
{
  int number;
  LerpEntityState lerp;
  int time2;
  unsigned int loopSoundId;
  int solid;
  renderOptions_s renderOptions;
  $72CF1A1A1998C3D3856B7CBEA1FE5B75 un2;
  $8A55D3BB0C758A956A56F8E75035F352 un3;
  unsigned int partBits[5];
  clientLinkInfo_t clientLinkInfo;
  int clientMask[1];
  char events[4];
  unsigned int eventParms[4];
  unsigned int eventParm;
  __int16 eType;
  __int16 groundEntityNum;
  $32A75A724673AB33BA2D603F67D50EA7 index;
  __int16 otherEntityNum;
  __int16 attackerEntityNum;
  __int16 enemyModel;
  Weapon weapon;
  Weapon lastStandPrevWeapon;
  unsigned __int16 targetname;
  __int16 loopSoundFade;
  __int16 eventSequence;
  char surfType;
  char clientNum;
  char iHeadIcon;
  char weaponModel;
  $5941A7488DBCD59DA5C855EBC8EBAB48 un1;
};

/* 2307 */
struct bitarray<64>
{
  int array[2];
};

/* 2308 */
union $60971AFD306BE716C67F4ED6B7576D56
{
  float rollmove;
  __int16 damageKick[2];
};

/* 2309 */
struct usercmd_s
{
  int serverTime;
  bitarray<64> button_bits;
  int angles[3];
  Weapon weapon;
  Weapon offHandWeapon;
  Weapon lastWeaponAltModeSwitch;
  char forwardmove;
  char rightmove;
  char upmove;
  char pitchmove;
  char yawmove;
  __int16 gunPitch;
  __int16 gunYaw;
  __int16 wiiumoteAimX;
  __int16 wiiumoteAimY;
  char wiiuControllerType;
  unsigned __int16 meleeChargeEnt;
  char meleeChargeDist;
  $60971AFD306BE716C67F4ED6B7576D56 ___u18;
  char selectedLocation[2];
  char selectedYaw;
  unsigned __int16 airburstMarkDistance;
  unsigned __int16 lastInput;
};

/* 2310 */
struct playerTeamState_t
{
  int location;
};

/* 2311 */
struct __declspec(align(8)) clientSession_t
{
  sessionState_t sessionState;
  ClientNum_t forceSpectatorClient;
  int killCamEntity;
  int killCamTargetEntity;
  int archiveTime;
  unsigned __int16 scriptPersId;
  clientConnected_t connected;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int localClient;
  int predictItemPickup;
  char newnetname[32];
  int maxHealth;
  int enterTime;
  playerTeamState_t teamState;
  int voteCount;
  int teamVoteCount;
  float moveSpeedScaleMultiplier;
  int viewmodelIndex;
  int noSpectate;
  int teamInfo;
  clientState_s cs;
  int psOffsetTime;
  int scoreboardColumnCache[26];
};

/* 2312 */
struct viewClamp
{
  vec2_t start;
  vec2_t current;
  vec2_t goal;
};

/* 2313 */
struct viewClampState
{
  viewClamp min;
  viewClamp max;
  float accelTime;
  float decelTime;
  float totalTime;
  float startTime;
};

/* 2314 */
struct gclient_t
{
  playerState_s ps;
  playerState_s lastPlayerPS;
  clientSession_t sess;
  ClientNum_t spectatorClient;
  int flags;
  int lastCmdTime;
  bitarray<64> button_bits;
  bitarray<64> oldbutton_bits;
  bitarray<64> latched_button_bits;
  bitarray<64> button_bitsSinceLastFrame;
  float fGunPitch;
  float fGunYaw;
  int damage_blood;
  vec3_t damage_from;
  int damage_fromWorld;
  int inactivityTime;
  int inactivityWarning;
  int lastVoiceTime;
  int outWaterTime;
  int switchSeatTime;
  float currentAimSpreadScale;
  int dropWeaponTime;
  EntHandle pLookatEnt;
  vec4_t prevLinkedInvQuat;
  bool prevLinkAnglesSet;
  bool link_doCollision;
  bool link_useTagAnglesForViewAngles;
  bool link_useBaseAnglesForViewClamp;
  float linkAnglesFrac;
  viewClampState link_viewClamp;
  EntHandle useHoldEntity;
  int useHoldTime;
  int useButtonDone;
  int iLastCompassPlayerInfoEnt;
  int compassPingTime;
  int damageTime;
  float v_dmg_roll;
  float v_dmg_pitch;
  vec3_t swayViewAngles;
  vec3_t swayOffset;
  vec3_t swayAngles;
  vec3_t baseAngles;
  vec3_t baseOrigin;
  vec3_t recoilAngles;
  float fLastIdleFactor;
  int weaponIdleTime;
  vec3_t recoilSpeed;
  int previousRecoilTime;
  float previousRecoilRatio;
  int lastServerTime;
  int lastSpawnTime;
  Weapon lastWeapon;
  bool previouslyFiring;
  bool previouslyUsingNightVision;
  bool previouslyDTP;
  bool previouslyBeganWeaponRaise;
  bool previouslySprinting;
  unsigned int hasSpyplane;
  unsigned int hasSatellite;
  int revive;
  int reviveTime;
  int disallowVehicleUsage;
  unsigned __int16 attachShieldTagName;
  int lastStand;
  int lastStandTime;
};

/* 2315 */
struct $01CA598949026614A299D91A8CA5C1D9
{
  unsigned __int32 inuse : 1;
  unsigned __int32 useable : 1;
  unsigned __int32 ignoreTriggers : 1;
  unsigned __int32 pushable : 1;
  unsigned __int32 ikPriority : 1;
  unsigned __int32 noPlayerMeleeBlood : 1;
  unsigned __int32 talkToSpecies : 5;
};

/* 2316 */
union $34493B95BBF0EAF3A29237A8BB905924
{
  $01CA598949026614A299D91A8CA5C1D9 __s0;
  unsigned int allBits;
};

/* 2317 */
struct ActorFlags
{
  $34493B95BBF0EAF3A29237A8BB905924 ___u0;
};

/* 2526 */
struct ai_transition_cmd_t
{
  ai_state_transition_t eTransition;
  ai_state_t eState;
};

/* 2527 */
struct actorState_s
{
  int actorIndex;
  int entityNum;
  int modelindex;
  int attachModelIndex[6];
  int attachTagIndex[6];
  unsigned int attachIgnoreCollision;
  char name[32];
  int animScriptedAnim;
};

/* 2528 */
struct ActorState
{
  ai_state_t eState[6];
  ai_substate_t eSubState[6];
  unsigned int stateLevel;
  int iStateTime;
  int preThinkTime;
  ai_transition_cmd_t StateTransitions[13];
  unsigned int transitionCount;
  ai_state_t eSimulatedState[6];
  unsigned int simulatedStateLevel;
  actorState_s as;
};

/* 2529 */
struct ActorShoot
{
  float accuracy;
  float playerSightAccuracy;
  unsigned int missCount;
  unsigned int hitCount;
  float debugLastAccuracy;
  int lastShotTime;
  bool lastCanShootEnemyResult;
  int lastCanShootEnemyTime;
  int bPerfectAim;
  int bIgnoreLocationalDamage;
  float debugWeaponAccuracy;
};

/* 2530 */
struct __declspec(align(4)) ActorOrientation
{
  float fDesiredBodyYaw;
  float fLookPitch;
  float fLookYaw;
  vec3_t vLookForward;
  vec3_t vLookRight;
  vec3_t vLookUp;
  float yawVeloc;
  int allowPitchAngle;
  float turnRate;
  int bNotifyTurnDone;
  float maxFaceEnemyDistSq;
  char relativeDir;
  char prevRelativeDir;
  bool faceMotion;
  bool gunBlockedByWall;
  int dontTurnTime;
  bool lockScriptOrient;
  bool fixedLinkYawOnly;
};

/* 2531 */
struct ai_orient_t
{
  ai_orient_mode_t eMode;
  float fDesiredLookPitch;
  float fDesiredLookYaw;
  float fDesiredBodyYaw;
};

/* 2532 */
struct __declspec(align(4)) ActorPainDeath
{
  int iPainTime;
  bool allowPain;
  bool blockingPain;
  bool allowDeath;
  bool delayedDeath;
  int iDamageTaken;
  int iDamageYaw;
  vec3_t damageDir;
  unsigned __int16 damageHitLoc;
  unsigned __int16 damageWeapon;
  unsigned __int16 damageMod;
  int deathContents;
  int bDropWeapon;
  bool forceRagdollImmediate;
  int minPainDamage;
  bool dieQuietly;
};

/* 2533 */
struct __declspec(align(4)) ActorProne
{
  unsigned __int16 animProneLow;
  unsigned __int16 animProneLevel;
  unsigned __int16 animProneHigh;
  int bProneOK;
  float fInvProneAnimLowPitch;
  float fInvProneAnimHighPitch;
  float fProneLastDiff;
  char feetDirection;
};

/* 2534 */
union $A899A4A44C693354E5CF33C9EDFF92AE
{
  float fTorsoPitch;
  float fBodyPitch;
};

/* 2535 */
union $8F7A1F2A0E788339D3BE9A175DA5EAEF
{
  float fWaistPitch;
  float fBodyRoll;
};

/* 2536 */
struct actor_prone_info_s
{
  bool bCorpseOrientation;
  bool orientPitch;
  bool prone;
  int iProneTime;
  int iProneTrans;
  float fBodyHeight;
  $A899A4A44C693354E5CF33C9EDFF92AE ___u6;
  $8F7A1F2A0E788339D3BE9A175DA5EAEF ___u7;
};

/* 2537 */
struct ActorCachedInfo
{
  int time;
  vec3_t pos;
  vec3_t dir;
};

/* 2538 */
struct ActorLookAtInfo
{
  vec3_t vLookAtPos;
  float fLookAtTurnAngle;
  float fLookAtTurnSpeed;
  float fLookAtTurnAccel;
  float fLookAtAnimYawLimit;
  float fLookAtYawLimit;
  unsigned __int16 animLookAtStraight;
  unsigned __int16 animLookAtLeft;
  unsigned __int16 animLookAtRight;
  bool bDoLookAt;
  bool bLookAtSetup;
  int iLookAtBlendEndTime;
  float fLookAtAnimBlendRate;
  float fLookAtLimitBlendRate;
};

/* 2539 */
struct ActorCoverArrivalInfo
{
  int arrivalNotifyRequested;
  int animscriptOverrideRunTo;
  vec3_t animscriptOverrideRunToPos;
  vec2_t offsetIncrement;
  int offsetAdjustCount;
  float arrivalYaw;
  EntHandle scriptedArrivalEnt;
};

/* 2540 */
struct ActorNodeSelect
{
  int numCoverNodesInGoal;
  int iPotentialCoverNodeCount;
  bool keepNodeDuringScriptedAnim;
  unsigned __int16 potentialCoverNode[10];
  unsigned __int16 potentialAmbushNode[32];
  int iPotentialAmbushNodeCount;
  int nextFindBestCoverTime;
  int coverSearchInterval;
  bool requestDifferentCover;
  bool keepClaimedNode;
  bool keepClaimedNodeIfValid;
  pathnode_t *pPotentialReacquireNode[10];
  int iPotentialReacquireNodeCount;
  pathnode_t *pPotentialCoverNode[32];
  bool doDangerReact;
  int dangerReactGoalTime;
  int dangerReactDuration;
};

/* 2480 */
struct ActorSight
{
  float fovDot;
  float fMaxSightDistSqrd;
  int ignoreCloseFoliage;
  bool lastEnemySightPosValid;
  vec3_t lastEnemySightPos;
  vec3_t anglesToLikelyEnemyPath;
  int faceLikelyEnemyPathNeedCheckTime;
  int faceLikelyEnemyPathNeedRecalculateTime;
  pathnode_t *faceLikelyEnemyPathNode;
  int iTraceCount;
  unsigned __int16 vis_blockers[72];
  float fovDotBusy;
  int latency;
  float upAimLimit;
  float downAimLimit;
  float rightAimLimit;
  float leftAimLimit;
};

/* 2541 */
struct ActorString
{
  unsigned __int16 properName;
  unsigned __int16 weaponName;
  unsigned __int16 primaryWeaponName;
  unsigned __int16 secondaryWeaponName;
  unsigned __int16 sideArmName;
  unsigned __int16 anim_pose;
  unsigned __int16 scriptState;
  unsigned __int16 lastScriptState;
  unsigned __int16 stateChangeReason;
  int iUseHintString;
};

/* 2542 */
struct ActorAnimSets
{
  unsigned __int16 aimLow;
  unsigned __int16 aimLevel;
  unsigned __int16 aimHigh;
  unsigned __int16 shootLow;
  unsigned __int16 shootLevel;
  unsigned __int16 shootHigh;
};

/* 2543 */
struct __declspec(align(4)) scr_animscript_t
{
  int func;
  int endFunc;
  unsigned __int16 name;
};

/* 2544 */
struct ActorAnimation
{
  ai_stance_e eAllowedStances;
  unsigned __int16 AnimScriptHandle;
  scr_animscript_t *pAnimScriptFunc;
  scr_animscript_t *pPrevAnimScriptFunc;
  scr_animscript_t AnimScriptSpecific;
  ai_traverse_mode_t eTraverseMode;
  char moveMode;
  bool useCombatScriptAtCover;
  bool prevAnimScriptTerminated;
  bool safeToChangeScript;
  bool bUseGoalWeight;
  ai_animmode_t eAnimMode;
  ai_animmode_t eScriptSetAnimMode;
  float fAnimTranslationScale;
};

/* 2389 */
struct pathpoint_t
{
  vec3_t vOrigPoint;
  vec2_t fDir2D;
  float fOrigLength;
  int iNodeNum;
};

/* 2390 */
struct path_t
{
  pathpoint_t pts[32];
  __int16 wPathLen;
  __int16 wOrigPathLen;
  __int16 wDodgeCount;
  __int16 wNegotiationStartNode;
  __int16 lookaheadNextNode;
  __int16 pathChangeNotifyNode;
  __int16 wDodgeEntity;
  vec3_t vFinalGoal;
  vec3_t vStartPos;
  vec3_t lookaheadDir;
  vec3_t lookaheadPos;
  float fLookaheadDist;
  float fLookaheadAmount;
  float fLookaheadDistToNextNode;
  int minLookAheadNodes;
  int flags;
  int iPathTime;
  int iPathClearedTime;
  team_t eTeam;
  float fCurrLength;
  vec3_t vCurrPoint;
  int iPathEndTime;
  float pathEndAnimDistSq;
  bool pathEndAnimNotified;
  bool lookaheadHitsStairs;
  bool useChokePoints;
  vec2_t pathChangeTracePos;
  int randomPercent;
  int owner;
  float physRadius;
  float physHeight;
};

/* 2545 */
struct path_trim_t
{
  int iIndex;
  int iDelta;
};

/* 2546 */
struct __declspec(align(4)) ActorNavigation
{
  float fWalkDist;
  float fWalkDistFacingMotion;
  float badPlaceAwareness;
  path_t Path;
  path_trim_t TrimInfo;
  int iFollowMin;
  int iFollowMax;
  float fInterval;
  int pathWaitTime;
  int iTeamMoveWaitTime;
  int iTeamMoveDodgeTime;
  int stoppedWaitStartTime;
  EntHandle stoppedWaitEnt;
  actor_t *pPileUpActor;
  gentity_t *pPileUpEnt;
  int bDontAvoidPlayer;
  float sideMove;
  bool noDodgeMove;
  int mayMoveTime;
  float nodeOffsetDist;
  vec3_t nodeOffsetPos;
  vec2_t prevMoveDir;
  float leanAmount;
  EntHandle pCloseEnt;
  ai_badplace_t aiBadPlace;
  bool isInBadPlace;
  char badplaceRecheckPathLen;
};

/* 2547 */
struct ActorCombat
{
  int exposedStartTime;
  int exposedDuration;
  bool provideCoveringFire;
  scr_animscript_t *pAttackScriptFunc;
  float pathEnemyLookahead;
  float pathEnemyFightDist;
  float meleeAttackDist;
  bool useEnemyGoal;
  bool useMeleeAttackSpot;
  vec3_t goodShootPos;
  int goodShootPosValid;
  float engageMinDist;
  float engageMinFalloffDist;
  float engageMaxDist;
  float engageMaxFalloffDist;
  bool noGrenadeReturnThrow;
  AlertLevel alertLevel;
  CombatMode combatMode;
  int exposedResumeTime;
  int stopPathTime;
  int ambushStartTime;
  bool doingAmbush;
  bool currentAmbushNodeInvalid;
  bool allAmbushNodesFailed;
  bool noAttackerAccuracyMod;
  bool canFlank;
  bool isWounded;
  bool damageShield;
  float frontShieldAngleCos;
};

/* 2548 */
struct __declspec(align(4)) ActorReact
{
  int iReactTime;
  int nextAllowedReactTime;
  bool allowReact;
  vec3_t reactOrigin;
  int lastHitTime;
  float newEnemyReactionDistSq;
  vec3_t newEnemyReactionPos;
  bool newEnemyReaction;
};

/* 2481 */
struct potential_threat_t
{
  bool isEnabled;
  vec2_t direction;
};

/* 2322 */
struct SentientHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

/* 2482 */
struct ActorSecondaryTarget
{
  EntHandle entity;
  vec2_t dirToEnt;
  float distToEnt;
  pathnode_t *node;
};

/* 2483 */
struct ActorThreat
{
  int hasThreateningEnemy;
  int bPacifist;
  int iPacifistWait;
  potential_threat_t potentialThreat;
  int threatUpdateTime;
  SentientHandle pFavoriteEnemy;
  int bDrawOnCompass;
  int bActivateCrosshair;
  float highlyAwareRadius;
  bool ignoreExplosionEvents;
  int numSecondaryTarget;
  ActorSecondaryTarget secondaryTargets[2];
  bool allEnemiesInSimilarDir;
  int goodEnemyOnly;
  float footstepDetectDistSq;
  float footstepDetectDistWalkSq;
  float footstepDetectDistSprintSq;
};

/* 2549 */
struct ActorGrenade
{
  float grenadeAwareness;
  EntHandle pGrenade;
  unsigned __int16 GrenadeTossMethod;
  int bGrenadeTossValid;
  int bGrenadeTargetValid;
  int iGrenadeAmmo;
  vec3_t vGrenadeTossPos;
  vec3_t vGrenadeTargetPos;
  vec3_t vGrenadeTossVel;
  EntHandle throwBackGrenadeKilledOriginalOwner;
  int bThrowbackGrenades;
  EntHandle pGrenadeFlee;
  int flashBanged;
  float flashBangedStrength;
  int flashBangImmunity;
  int grenadeExistTime;
  Weapon GrenadeWeapon;
  bool grenadeTossWithBounce;
  vec3_t pickupPos;
};

/* 2550 */
struct __declspec(align(2)) ActorTurret
{
  gentity_t *pTurret;
  unsigned __int16 turretAnim;
  char turretAnimSet;
};

/* 2551 */
struct actor_goal_s
{
  vec3_t pos;
  vec3_t ang;
  float radius;
  float height;
  pathnode_t *node;
  gentity_t *volume;
};

/* 2552 */
struct ActorGoal
{
  actor_goal_s codeGoal;
  aiGoalSources codeGoalSrc;
  actor_goal_s scriptGoal;
  EntHandle scriptGoalEnt;
  bool goalPosChanged;
  bool commitToFixedNode;
  bool ignoreForFixedNodeSafeCheck;
  bool fixedNode;
  float fixedNodeSafeRadius;
  float fixedNodeSafeVolumeRadiusSq;
  EntHandle fixedNodeSafeVolume;
  int moveHistoryIndex;
  bool moveHistoryConsistent;
  vec2_t moveHistory[10];
};

/* 2553 */
struct ActorSuppression
{
  int ignoreSuppression;
  int suppressionWait;
  int suppressionDuration;
  int suppressionStartTime;
  float suppressionMeter;
};

/* 2554 */
struct ActorDelayedWeaponDrop
{
  vec3_t matrix[4];
  int time;
  unsigned __int16 tagName;
  DelayedWeapDropState state;
  int weaponIndex;
};

/* 2484 */
struct vis_cache_t
{
  bool bVisible;
  int iLastUpdateTime;
  int iLastVisTime;
};

/* 2485 */
struct __declspec(align(4)) sentient_info_t
{
  vis_cache_t VisCache;
  int iLastAttackMeTime;
  int lastKnownPosTime;
  int attackTime;
  bool surprised;
  vec3_t vLastKnownPos;
  pathnode_t *pLastKnownNode;
  int iPathTestTime;
  bool bPathTestResult;
};

/* 2555 */
struct ai_suppression_t
{
  int iTime;
  sentient_t *pSuppressor;
  vec3_t clipPlane;
  int movementOnly;
};

/* 2459 */
struct visitor_base_t
{
  visitor_base_tVtbl *vfptr;
};

/* 2461 */
struct hybrid_vector
{
  __m128 vec;
};

/* 2473 */
struct __cppobj __declspec(align(8)) colgeom_visitor_t : visitor_base_t
{
  hybrid_vector m_mn;
  hybrid_vector m_mx;
  hybrid_vector m_p0;
  hybrid_vector m_p1;
  hybrid_vector m_delta;
  hybrid_vector m_rvec;
  float m_radius;
  int m_mask;
  TraceThreadInfo *m_threadInfo;
};

/* 2476 */
union $C70BC6D153D5EA68049F9C83F2557C3C
{
  CollisionAabbTree *tree;
  cbrush_t *brush;
};

/* 2477 */
struct col_prim_t
{
  int type;
  $C70BC6D153D5EA68049F9C83F2557C3C ___u1;
};

/* 2478 */
struct __cppobj __declspec(align(16)) colgeom_visitor_inlined_t<300> : colgeom_visitor_t
{
  int nprims;
  bool overflow;
  col_prim_t prims[300];
};

/* 2558 */
struct __declspec(align(8)) actor_physics_t
{
  vec3_t vOrigin;
  vec3_t vVelocity;
  unsigned __int16 groundEntNum;
  int iFootstepTimer;
  int bHasGroundPlane;
  float groundplaneSlope;
  int iSurfaceType;
  vec3_t vWishDelta;
  int bIsAlive;
  int iEntNum;
  aiphys_t ePhysicsType;
  float fGravity;
  int iMsec;
  vec3_t vMins;
  vec3_t vMaxs;
  bool prone;
  int iTraceMask;
  int foliageSoundTime;
  int iNumTouch;
  int iTouchEnts[32];
  int iHitEntnum;
  vec3_t vHitOrigin;
  vec3_t vHitNormal;
  char bStuck;
  char bDeflected;
  gjkcc_input_t *m_gjkcc_input;
  colgeom_visitor_inlined_t<300> proximity_data;
  bool pathGoingDown;
  AI_STAIRS_STATE stairsState;
  int groundEntityTimestamp;
};

/* 2559 */
struct ActorCoverInfluenceInfo
{
  pathnode_t *node;
  float weightAdjust;
  int timeAdded;
};

/* 2318 */
struct actor_t
{
  ActorFlags flags;
  gentity_t *ent;
  sentient_t *sentient;
  AISpecies species;
  ActorState state;
  ActorShoot shoot;
  ActorOrientation orientation;
  ai_orient_t CodeOrient;
  ai_orient_t ScriptOrient;
  ActorPainDeath painDeath;
  ActorProne prone;
  actor_prone_info_s ProneInfo;
  ActorCachedInfo eyeInfo;
  ActorCachedInfo muzzleInfo;
  ActorLookAtInfo lookAtInfo;
  ActorCoverArrivalInfo arrivalInfo;
  ActorNodeSelect nodeSelect;
  ActorSight sight;
  ActorString string;
  ActorAnimSets animSets;
  ActorAnimation anim;
  ActorNavigation navigation;
  ActorCombat combat;
  ActorReact react;
  ActorThreat threat;
  ActorGrenade grenade;
  ActorTurret turret;
  ActorGoal goal;
  ActorSuppression suppression;
  ActorDelayedWeaponDrop weapDrops[2];
  sentient_info_t sentientInfo[72];
  ai_suppression_t Suppressant[4];
  __declspec(align(16)) actor_physics_t Physics;
  const char *pszDebugInfo;
  ActorCoverInfluenceInfo cover_influencers[8];
};

/* 2487 */
struct flame_timed_damage_t
{
  gentity_t *attacker;
  int damage;
  float damageDuration;
  float damageInterval;
  int start_timestamp;
  int end_timestamp;
  int lastupdate_timestamp;
};

/* 2488 */
struct item_ent_t
{
  int ammoCount;
  int clipAmmoCount;
  Weapon weapon;
};

/* 2489 */
struct trigger_ent_t
{
  int threshold;
  int accumulate;
  int timestamp;
  int singleUserEntIndex;
  char perk;
  bool requireLookAt;
  bool ignoreTeam;
  bool excludeTeam;
  int exposureIndex;
  float exposureLerpToLighter;
  float exposureLerpToDarker;
  vec3_t exposureFeather;
};

/* 2490 */
union $B5D0606FDDE07FD92337EA091DD8B00A
{
  mover_positions_t pos;
  mover_slidedata_t slide;
};

/* 2491 */
struct mover_ent_t
{
  $B5D0606FDDE07FD92337EA091DD8B00A ___u0;
  mover_positions_t angle;
};

/* 2492 */
struct corpse_ent_t
{
  int deathAnimStartTime;
};

/* 2493 */
struct $F76C7746F45FCB6361E289C3853E566A
{
  vec3_t curvature;
  vec3_t targetOffset;
  MissileStage stage;
  MissileFlightMode flightMode;
};

/* 2494 */
struct $72842387414CD44A01249CD18A7BDEE4
{
  int effectIndex;
};

/* 2495 */
union $D42D03CD9AF418C44D92F37AA2398DF0
{
  $F76C7746F45FCB6361E289C3853E566A missile;
  $72842387414CD44A01249CD18A7BDEE4 grenade;
};

/* 2496 */
struct missile_ent_t
{
  int timestamp;
  float time;
  int timeOfBirth;
  float travelDist;
  vec3_t surfaceNormal;
  team_t team;
  char flags;
  int antilagTimeOffset;
  int timeAlive;
  float airburstActivationDistance;
  $D42D03CD9AF418C44D92F37AA2398DF0 ___u10;
  int forcedDud;
  float grenadeWobbleCycle;
  float grenadeCurve;
  int destructibleBounceCount;
};

/* 2497 */
struct blend_ent_t
{
  vec3_t pos;
  vec3_t vel;
  vec4_t viewQuat;
  bool changed;
  float posAccelTime;
  float posDecelTime;
  float angleAccelTime;
  float angleDecelTime;
  float startTime;
  float posTotalTime;
  float angleTotalTime;
};

/* 2499 */
struct actor_ent_t
{
  int spawnTime;
  animscripted_t *scripted;
};

/* 2500 */
struct spawner_ent_t
{
  int team;
  int timestamp;
};

/* 2501 */
struct zbarrier_ent_t
{
  zbarrier_piece_t pieces[6];
};

/* 2525 */
union $084D4AACCC54A8BAA8CA622D09C50977
{
  item_ent_t item[2];
  trigger_ent_t trigger;
  mover_ent_t mover;
  corpse_ent_t corpse;
  missile_ent_t missile;
  blend_ent_t blend;
  actor_ent_t actorInfo;
  spawner_ent_t spawner;
  zbarrier_ent_t zbarrier;
};

/* 2502 */
struct $8B2B5A2D6EB549120AB558355B552286
{
  unsigned __int16 notifyString;
  unsigned int index;
  char stoppable;
  int basetime;
  int duration;
};

/* 2319 */
struct gentity_t
{
  entityState_s s;
  entityShared_t r;
  gclient_t *client;
  actor_t *actor;
  sentient_t *sentient;
  TurretInfo *pTurretInfo;
  Destructible *destructible;
  vehicle_t *vehicle;
  unsigned __int16 model;
  char physicsObject;
  char takedamage;
  char active;
  char nopickup;
  char handler;
  char team;
  char avoidHandle;
  unsigned __int16 classname;
  unsigned __int16 target;
  unsigned __int16 targetname;
  unsigned __int16 script_noteworthy;
  unsigned int attachIgnoreCollision;
  int spawnflags;
  int flags;
  int eventTime;
  int freeAfterEvent;
  int unlinkAfterEvent;
  int clipmask;
  int processedFrame;
  EntHandle parent;
  int nextthink;
  int health;
  int maxHealth;
  int damage;
  flame_timed_damage_t flame_timed_damage[4];
  int last_timed_radius_damage;
  int count;
  $084D4AACCC54A8BAA8CA622D09C50977 ___u36;
  EntHandle missileTargetEnt;
  $8B2B5A2D6EB549120AB558355B552286 snd_wait;
  tagInfo_t *tagInfo;
  gentity_t *tagChildren;
  unsigned __int16 attachModelNames[19];
  unsigned __int16 attachTagNames[19];
  XAnimTree_s *pAnimTree;
  unsigned __int16 disconnectedLinks;
  int iDisconnectTime;
  int useCount;
  int physObjId;
  gentity_t *nextFree;
  int birthTime;
  int ikPlayerclipTerrainTime;
  int ikDisableTerrainMappingTime;
};

/* 2320 */
struct __declspec(align(4)) pathlink_s
{
  float fDist;
  unsigned __int16 nodeNum;
  char disconnectCount;
  char negotiationLink;
  char flags;
  char ubBadPlaceCount[5];
};

/* 2321 */
struct pathnode_constant_t
{
  nodeType type;
  int spawnflags;
  unsigned __int16 targetname;
  unsigned __int16 script_linkName;
  unsigned __int16 script_noteworthy;
  unsigned __int16 target;
  unsigned __int16 animscript;
  int animscriptfunc;
  vec3_t vOrigin;
  float fAngle;
  vec2_t forward;
  float fRadius;
  float minUseDistSq;
  __int16 wOverlapNode[2];
  unsigned __int16 totalLinkCount;
  pathlink_s *Links;
};

/* 2323 */
struct __declspec(align(4)) pathnode_dynamic_t
{
  SentientHandle pOwner;
  int iFreeTime;
  int iValidTime[3];
  int dangerousNodeTime[3];
  int inPlayerLOSTime;
  __int16 wLinkCount;
  __int16 wOverlapCount;
  __int16 turretEntNumber;
  __int16 userCount;
  bool hasBadPlaceLink;
};

/* 2325 */
union $73F238679C0419BE2C31C6559E8604FC
{
  float nodeCost;
  int linkIndex;
};

/* 2326 */
struct pathnode_transient_t
{
  int iSearchFrame;
  pathnode_t *pNextOpen;
  pathnode_t *pPrevOpen;
  pathnode_t *pParent;
  float fCost;
  float fHeuristic;
  $73F238679C0419BE2C31C6559E8604FC ___u6;
};

/* 2324 */
struct pathnode_t
{
  pathnode_constant_t constant;
  pathnode_dynamic_t dynamic;
  pathnode_transient_t transient;
};

/* 2327 */
struct __declspec(align(4)) sentient_t
{
  gentity_t *ent;
  team_t eTeam;
  EntHandle scriptOwner;
  int iThreatBias;
  int iThreatBiasGroupIndex;
  bool bIgnoreMe;
  bool bIgnoreAll;
  bool bIgnoreForFriendlyFire;
  bool originChanged;
  vec3_t oldOrigin;
  float maxVisibleDist;
  float surprisedByMeDistSq;
  int iEnemyNotifyTime;
  int attackerCount;
  EntHandle lastAttacker;
  EntHandle syncedMeleeEnt;
  EntHandle targetEnt;
  EntHandle scriptTargetEnt;
  unsigned __int16 scriptTargetTag;
  float entityTargetThreat;
  int meleeAttackerSpot[4];
  float attackerAccuracy;
  bool ignoreRandomBulletDamage;
  bool turretInvulnerability;
  pathnode_t *pClaimedNode;
  pathnode_t *pPrevClaimedNode;
  pathnode_t *pNearestNode;
  char bNearestNodeValid;
  char bNearestNodeBad;
  vec3_t vNearestNodeCheckPos;
  bool inuse;
  int banNodeTime;
  bool bInMeleeCharge;
};

/* 2328 */
struct TurretInfo
{
  bool inuse;
  int state;
  int flags;
  int fireTime;
  EntHandle manualTarget;
  EntHandle target;
  vec3_t targetPos;
  int targetTime;
  vec3_t missOffsetNormalized;
  float arcmin[2];
  float arcmax[2];
  float initialYawmin;
  float initialYawmax;
  float forwardAngleDot;
  float dropPitch;
  float scanningPitch;
  int convergenceTime[2];
  int suppressTime;
  float maxRangeSquared;
  SentientHandle detachSentient;
  int stance;
  int prevStance;
  int fireSndDelay;
  float accuracy;
  vec3_t userOrigin;
  int prevSentTarget;
  float aiSpread;
  float playerSpread;
  team_t eTeam;
  float heatVal;
  bool overheating;
  int fireBarrel;
  float scanSpeed;
  float scanDecelYaw;
  int scanPauseTime;
  vec3_t originError;
  vec3_t anglesError;
  float pitchCap;
  int triggerDown;
  unsigned int fireSnd;
  unsigned int fireSndPlayer;
  unsigned int startFireSnd;
  unsigned int startFireSndPlayer;
  unsigned int loopFireEnd;
  unsigned int loopFireEndPlayer;
  unsigned int rotateLoopSnd;
  unsigned int rotateLoopSndPlayer;
  unsigned int rotateStopSnd;
  unsigned int rotateStopSndPlayer;
  int sndIsFiring;
  vec3_t targetOffset;
  float onTargetAngle;
  TurretRotateState turretRotateState;
  vec3_t previousAngles;
};

/* 2329 */
struct DestructibleBurnData
{
  int burnTime;
  unsigned int fx;
  int sndId;
};

/* 2330 */
struct DESTRUCTIBLE_PIECE_INFO
{
  __int16 health;
  int xdollHandle;
  unsigned int fx;
  DestructibleBurnData burnData;
};

/* 2331 */
struct DObjAnimMat
{
  vec4_t quat;
  vec3_t trans;
  float transWeight;
};

/* 2332 */
struct XSurfaceVertexInfo
{
  __int16 vertCount[4];
  unsigned __int16 *vertsBlend;
  float *tensionData;
};

/* 2333 */
union GfxColor
{
  unsigned int packed;
  char array[4];
};

/* 2334 */
union PackedTexCoords
{
  unsigned int packed;
};

/* 2335 */
union PackedUnitVec
{
  unsigned int packed;
};

/* 2336 */
struct GfxPackedVertex
{
  vec3_t xyz;
  float binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 2337 */
struct XSurfaceCollisionAabb
{
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
};

/* 2338 */
struct XSurfaceCollisionNode
{
  XSurfaceCollisionAabb aabb;
  unsigned __int16 childBeginIndex;
  unsigned __int16 childCount;
};

/* 2339 */
struct XSurfaceCollisionLeaf
{
  unsigned __int16 triangleBeginIndex;
};

/* 2340 */
struct XSurfaceCollisionTree
{
  vec3_t trans;
  vec3_t scale;
  unsigned int nodeCount;
  XSurfaceCollisionNode *nodes;
  unsigned int leafCount;
  XSurfaceCollisionLeaf *leafs;
};

/* 2341 */
struct XRigidVertList
{
  unsigned __int16 boneOffset;
  unsigned __int16 vertCount;
  unsigned __int16 triOffset;
  unsigned __int16 triCount;
  XSurfaceCollisionTree *collisionTree;
};

/* 2342 */
union $533714B5A64C58DDBB88AE33CEAC2A84
{
  XRigidVertList *vertList;
  XRigidVertList *vertListEA;
};

/* 2343 */
struct __declspec(align(16)) XSurface
{
  char tileMode;
  char vertListCount;
  unsigned __int16 flags;
  unsigned __int16 vertCount;
  unsigned __int16 triCount;
  unsigned __int16 baseVertIndex;
  unsigned __int16 *triIndices;
  XSurfaceVertexInfo vertInfo;
  GfxPackedVertex *verts0;
  ID3D11Buffer *vb0;
  $533714B5A64C58DDBB88AE33CEAC2A84 ___u10;
  ID3D11Buffer *indexBuffer;
  int partBits[5];
};

/* 2344 */
union $C8C573B57ACA1D7542AD56C4163862EC
{
  unsigned __int16 *localBoneNames;
  unsigned __int16 *boneNames;
};

/* 2345 */
union $CB213585254F53F8EF5B6A00F1025158
{
  char *localParentList;
  char *parentList;
};

/* 2346 */
union $BF9640C0B3AB5E078C286DD9616EC22F
{
  __int16 *localQuats;
  __int16 *quats;
};

/* 2347 */
union $E1CD6A013C1D28F2956F4983A8D1052C
{
  float *localTrans;
  float *trans;
};

/* 2348 */
union $C44470544659A51610FBBFEAF9734665
{
  XBoneInfo *localBoneInfo;
  XBoneInfo *boneInfo;
};

/* 2349 */
struct XModel
{
  const char *name;
  char numBones;
  char numRootBones;
  char numsurfs;
  char lodRampType;
  $C8C573B57ACA1D7542AD56C4163862EC ___u5;
  $CB213585254F53F8EF5B6A00F1025158 ___u6;
  $BF9640C0B3AB5E078C286DD9616EC22F ___u7;
  $E1CD6A013C1D28F2956F4983A8D1052C ___u8;
  char *partClassification;
  DObjAnimMat *baseMat;
  XSurface *surfs;
  Material **materialHandles;
  XModelLodInfo lodInfo[4];
  XModelCollSurf_s *collSurfs;
  int numCollSurfs;
  int contents;
  $C44470544659A51610FBBFEAF9734665 ___u17;
  float radius;
  vec3_t mins;
  vec3_t maxs;
  __int16 numLods;
  __int16 collLod;
  float *himipInvSqRadii;
  int memUsage;
  int flags;
  bool bad;
  PhysPreset *physPreset;
  char numCollmaps;
  Collmap *collmaps;
  PhysConstraints *physConstraints;
  vec3_t lightingOriginOffset;
  float lightingOriginRange;
};

/* 2350 */
struct FxSpawnDefLooping
{
  int intervalMsec;
  int count;
};

/* 2351 */
struct FxIntRange
{
  int base;
  int amplitude;
};

/* 2352 */
struct FxSpawnDefOneShot
{
  FxIntRange count;
};

/* 2353 */
union FxSpawnDef
{
  FxSpawnDefLooping looping;
  FxSpawnDefOneShot oneShot;
};

/* 2354 */
struct FxFloatRange
{
  float base;
  float amplitude;
};

/* 2355 */
struct FxElemAtlas
{
  char behavior;
  char index;
  char fps;
  char loopCount;
  char colIndexBits;
  char rowIndexBits;
  unsigned __int16 entryCountAndIndexRange;
};

/* 2356 */
struct FxElemVec3Range
{
  vec3_t base;
  vec3_t amplitude;
};

/* 2357 */
struct FxElemVelStateInFrame
{
  FxElemVec3Range velocity;
  FxElemVec3Range totalDelta;
};

/* 2358 */
const struct FxElemVelStateSample
{
  FxElemVelStateInFrame local;
  FxElemVelStateInFrame world;
};

/* 2359 */
struct FxElemVisualState
{
  char color[4];
  float rotationDelta;
  float rotationTotal;
  float size[2];
  float scale;
};

/* 2360 */
const struct FxElemVisStateSample
{
  FxElemVisualState base;
  FxElemVisualState amplitude;
};

/* 2361 */
struct FxElemMarkVisuals
{
  Material *materials[2];
};

/* 2378 */
union $BB182A2B2784999970B61BF06358CBFF
{
  FxElemDef *elemDefs;
  FxElemDef *localElemDefs;
};

/* 2362 */
const struct FxEffectDef
{
  const char *name;
  unsigned __int16 flags;
  char efPriority;
  __int16 elemDefCountLooping;
  __int16 elemDefCountOneShot;
  __int16 elemDefCountEmission;
  int totalSize;
  int msecLoopingLife;
  int msecNonLoopingLife;
  $BB182A2B2784999970B61BF06358CBFF ___u9;
  vec3_t boundingBoxDim;
  vec3_t boundingBoxCentre;
  float occlusionQueryDepthBias;
  int occlusionQueryFadeIn;
  int occlusionQueryFadeOut;
  FxFloatRange occlusionQueryScaleRange;
};

/* 2363 */
union FxEffectDefRef
{
  FxEffectDef *handle;
  const char *name;
};

/* 2364 */
struct __declspec(align(4)) GfxLightImage
{
  GfxImage *image;
  char samplerState;
};

/* 2365 */
struct GfxLightDef
{
  const char *name;
  GfxLightImage attenuation;
  int lmapLookupStart;
};

/* 2366 */
union FxElemVisuals
{
  const void *anonymous;
  Material *material;
  XModel *model;
  FxEffectDefRef effectDef;
  const char *soundName;
  GfxLightDef *lightDef;
};

/* 2367 */
union FxElemDefVisuals
{
  FxElemMarkVisuals *markArray;
  FxElemVisuals *array;
  FxElemVisuals instance;
};

/* 2368 */
struct FxTrailVertex
{
  vec2_t pos;
  vec2_t normal;
  float texCoord;
};

/* 2369 */
union $D02EBC768381BFB4D84E93824E99AFCC
{
  FxTrailVertex *vertsEA;
  FxTrailVertex *verts;
};

/* 2370 */
union $D31B43AE1E46D24CA4A859818848B5E1
{
  unsigned __int16 *indsEA;
  unsigned __int16 *inds;
};

/* 2371 */
struct FxTrailDef
{
  int scrollTimeMsec;
  int repeatDist;
  int splitDist;
  int vertCount;
  $D02EBC768381BFB4D84E93824E99AFCC ___u4;
  int indCount;
  $D31B43AE1E46D24CA4A859818848B5E1 ___u6;
};

/* 2372 */
struct FxSpotLightDef
{
  float fovInnerFraction;
  float startRadius;
  float endRadius;
};

/* 2373 */
union FxElemExtendedDefPtr
{
  FxTrailDef *localTrailDef;
  FxTrailDef *trailDef;
  FxSpotLightDef *localSpotLightDef;
  FxSpotLightDef *spotLightDef;
  void *unknownDef;
};

/* 2374 */
struct FxBillboardTrim
{
  float topWidth;
  float bottomWidth;
};

/* 2375 */
union FxElemDefUnion
{
  FxBillboardTrim billboard;
  FxIntRange cloudDensityRange;
};

/* 2376 */
struct FxElemSpawnSound
{
  const char *spawnSound;
};

/* 2377 */
const struct FxElemDef
{
  int flags;
  FxSpawnDef spawn;
  FxFloatRange spawnRange;
  FxFloatRange fadeInRange;
  FxFloatRange fadeOutRange;
  float spawnFrustumCullRadius;
  FxIntRange spawnDelayMsec;
  FxIntRange lifeSpanMsec;
  FxFloatRange spawnOrigin[3];
  FxFloatRange spawnOffsetRadius;
  FxFloatRange spawnOffsetHeight;
  FxFloatRange spawnAngles[3];
  FxFloatRange angularVelocity[3];
  FxFloatRange initialRotation;
  unsigned int rotationAxis;
  FxFloatRange gravity;
  FxFloatRange reflectionFactor;
  FxElemAtlas atlas;
  float windInfluence;
  char elemType;
  char visualCount;
  char velIntervalCount;
  char visStateIntervalCount;
  FxElemVelStateSample *velSamples;
  FxElemVisStateSample *visSamples;
  FxElemDefVisuals visuals;
  vec3_t collMins;
  vec3_t collMaxs;
  FxEffectDefRef effectOnImpact;
  FxEffectDefRef effectOnDeath;
  FxEffectDefRef effectEmitted;
  FxFloatRange emitDist;
  FxFloatRange emitDistVariance;
  FxEffectDefRef effectAttached;
  FxElemExtendedDefPtr extended;
  char sortOrder;
  char lightingFrac;
  char unused[2];
  unsigned __int16 alphaFadeTimeMsec;
  unsigned __int16 maxWindStrength;
  unsigned __int16 spawnIntervalAtMaxWind;
  unsigned __int16 lifespanAtMaxWind;
  FxElemDefUnion u;
  FxElemSpawnSound spawnSound;
  vec2_t billboardPivot;
};

/* 2379 */
struct DestructibleStage
{
  unsigned __int16 showBone;
  float breakHealth;
  float maxTime;
  unsigned int flags;
  FxEffectDef *breakEffect;
  const char *breakSound;
  const char *breakNotify;
  const char *loopSound;
  XModel *spawnModel[3];
  PhysPreset *physPreset;
};

/* 2380 */
struct DestructiblePiece
{
  DestructibleStage stages[5];
  char parentPiece;
  float parentDamagePercent;
  float bulletDamageScale;
  float explosiveDamageScale;
  float meleeDamageScale;
  float impactDamageScale;
  float entityDamageTransfer;
  PhysConstraints *physConstraints;
  int health;
  const char *damageSound;
  FxEffectDef *burnEffect;
  const char *burnSound;
  unsigned __int16 enableLabel;
  int hideBones[5];
};

/* 2381 */
struct DestructibleDef
{
  const char *name;
  XModel *model;
  XModel *pristineModel;
  int numPieces;
  DestructiblePiece *pieces;
  int clientOnly;
};

/* 2382 */
struct DestructibleState
{
  LerpEntityStateDestructibleHit state;
  int time;
};

/* 2383 */
struct __declspec(align(4)) Destructible
{
  int entNum;
  DESTRUCTIBLE_PIECE_INFO *pieceArray;
  int oldestBurnTime;
  char destructiblePoseID;
  int pieceCount;
  DestructibleDef *ddef;
  unsigned int flags;
  DestructibleState states[5];
  char bHasBeenHit;
};

/* 2384 */
struct vehicle_spline_node_t
{
  __int16 nextIdx;
  __int16 prevIdx;
  float length;
  vec3_t dir;
  float t;
};

/* 2385 */
struct vehicle_path_node_t
{
  __int16 numLinks;
  __int16 firstLinkIndex;
};

/* 2386 */
union $8CC7CF0D0C75517C311088B368867281
{
  vehicle_spline_node_t splineNode;
  vehicle_path_node_t pathNode;
};

/* 2387 */
struct vehicle_node_t
{
  unsigned __int16 name;
  unsigned __int16 target;
  unsigned __int16 target2;
  unsigned __int16 script_linkname;
  unsigned __int16 script_noteworthy;
  __int16 index;
  int flags;
  float speed;
  float lookAhead;
  vec3_t origin;
  vec3_t angles;
  float radius;
  float tension;
  $8CC7CF0D0C75517C311088B368867281 ___u13;
};

/* 2388 */
struct __declspec(align(2)) vehicle_custom_path_t
{
  __int16 pathOrder[128];
  __int16 pathLinkIdx[128];
  char inUse;
};

/* 2391 */
struct vehicle_pathpos_t
{
  __int16 nodeIdx;
  __int16 prevIdx;
  __int16 endOfPath;
  float frac;
  float speed;
  float lookAhead;
  float slide;
  float width;
  float manualTime;
  float widthLookAheadFrac;
  float distanceTraveled;
  vec3_t origin;
  vec3_t angles;
  vec3_t lookPos;
  vec3_t origin_on_spline;
  vec3_t angles_on_spline;
  vec3_t lookPos_on_spline;
  int use_spline_speed;
  vehicle_node_t switchNode[2];
  int flags;
  vehicle_custom_path_t *customPath;
  float customGoalLength;
  vec3_t customGoalDir;
  path_t *aiPath;
  path_type_e path_type;
  __int16 startNodeIdx;
  float t;
  float tot_len;
  float tot_time;
};

/* 2392 */
struct vehicle_physic_t
{
  vec3_t origin;
  vec3_t prevOrigin;
  vec3_t angles;
  vec3_t prevAngles;
  vec3_t maxAngleVel;
  float yawAccel;
  float yawDecel;
  vec3_t mins;
  vec3_t maxs;
  vec3_t vel;
  vec3_t bodyVel;
  vec3_t rotVel;
  vec3_t accel;
  float maxPitchAngle;
  float maxRollAngle;
  float wheelZVel[6];
  float wheelZPos[6];
  int wheelSurfType[6];
  vec3_t bodyTilt;
  vec3_t worldTilt;
  vec3_t worldTiltVel;
  float heliLockHeight;
  float curveLength;
  int curveID;
  float curveStep;
  float curveTime;
  float timeStep;
};

/* 2393 */
struct VehicleTurret
{
  int fireTime;
  int fireBarrel;
  float barrelOffset;
  int flags;
  float heatVal;
  float turretOnTargetRange;
  int overheating;
  int weaponShotCount;
  VehicleTurretState turretState;
};

/* 2394 */
struct VehicleJitter
{
  int jitterPeriodMin;
  int jitterPeriodMax;
  int jitterEndTime;
  vec3_t jitterOffsetRange;
  vec3_t jitterDeltaAccel;
  vec3_t jitterAccel;
  vec3_t jitterPos;
};

/* 2395 */
struct VehicleHover
{
  float hoverRadius;
  float hoverSpeed;
  float hoverAccel;
  vec3_t hoverGoalPos;
  int useHoverAccelForAngles;
};

/* 2396 */
struct VehicleTarget
{
  int valid;
  int hasTargetYaw;
  int targetEnt;
  int lookAtEnt;
  vec3_t targetOrigin;
  vec3_t targetOffset;
  float targetYaw;
};

/* 2397 */
struct VehicleGunnerTags
{
  int turret;
  int barrel;
  int flash;
  int flash2;
};

/* 2398 */
struct VehicleTags
{
  int player;
  int popout;
  int body;
  int turret;
  int turret_base;
  int barrel;
  int flash[4];
  VehicleGunnerTags gunnerTags[4];
  int wheel[6];
  int seats[11];
  int entryPoints[5];
};

/* 2399 */
struct VehicleSeat
{
  int _occupantEntNum;
};

/* 2400 */
struct phys_vec3
{
  float x;
  float y;
  float z;
  float w;
};

/* 2401 */
struct phys_mat44
{
  phys_vec3 x;
  phys_vec3 y;
  phys_vec3 z;
  phys_vec3 w;
};

/* 2403 */
struct phys_link_list_base<pulse_sum_node>
{
  pulse_sum_node *m_next_link;
};

/* 2402 */
struct __cppobj pulse_sum_node : phys_link_list_base<pulse_sum_node>
{
  __declspec(align(16)) phys_mat44 m_world_inv_inertia;
  phys_vec3 t_vel;
  phys_vec3 a_vel;
  float m_inv_mass;
  rigid_body *m_rb;
};

/* 2439 */
struct rb_inplace_partition_node
{
  rigid_body_constraint_point *m_rbc_point_first;
  rigid_body_constraint_hinge *m_rbc_hinge_first;
  rigid_body_constraint_distance *m_rbc_dist_first;
  rigid_body_constraint_ragdoll *m_rbc_ragdoll_first;
  rigid_body_constraint_wheel *m_rbc_wheel_first;
  rigid_body_constraint_angular_actuator *m_rbc_angular_actuator_first;
  rigid_body_constraint_upright *m_rbc_upright_first;
  rigid_body_constraint_custom_orientation *m_rbc_custom_orientation_first;
  rigid_body_constraint_custom_path *m_rbc_custom_path_first;
  rigid_body_constraint_contact *m_rbc_contact_first;
  rigid_body *m_partition_head;
  rigid_body *m_partition_tail;
  rigid_body *m_next_node;
  int m_partition_size;
};

/* 2404 */
struct rigid_body
{
  phys_vec3 m_last_position;
  phys_vec3 m_moved_vec;
  float m_smallest_lambda;
  __declspec(align(16)) phys_mat44 m_mat;
  phys_vec3 m_inv_inertia;
  phys_vec3 m_gravity_acc_vec;
  phys_vec3 m_t_vel;
  phys_vec3 m_a_vel;
  phys_vec3 m_last_t_vel;
  phys_vec3 m_last_a_vel;
  phys_vec3 m_force_sum;
  phys_vec3 m_torque_sum;
  float m_inv_mass;
  float m_max_avel;
  float m_max_delta_t;
  unsigned int m_flags;
  unsigned int m_tick;
  pulse_sum_node *m_node;
  int m_constraint_count;
  int m_contact_count;
  int m_stable_min_contact_count;
  float m_stable_energy_time;
  float m_largest_vel_sq;
  float m_t_drag_coef;
  float m_a_drag_coef;
  void *m_userdata;
  rb_inplace_partition_node m_partition_node;
};

/* 2405 */
struct rigid_body_constraint
{
  rigid_body *b1;
  rigid_body *b2;
  rigid_body_constraint *m_next;
};

/* 2406 */
struct pulse_sum_cache
{
  float m_pulse_sum;
};

/* 2407 */
struct __cppobj rigid_body_constraint_point : rigid_body_constraint
{
  __declspec(align(8)) phys_vec3 m_b1_r_loc;
  phys_vec3 m_b2_r_loc;
  pulse_sum_cache m_ps_cache_list[3];
  float m_stress;
  float m_spring_k;
  float m_damp_k;
  bool m_spring_enabled;
};

/* 2408 */
struct __cppobj __declspec(align(16)) rigid_body_constraint_hinge : rigid_body_constraint
{
  __declspec(align(8)) phys_vec3 m_b1_r_loc;
  phys_vec3 m_b2_r_loc;
  phys_vec3 m_b1_axis_loc;
  phys_vec3 m_b2_axis_loc;
  phys_vec3 m_b1_a1_loc;
  phys_vec3 m_b1_a2_loc;
  phys_vec3 m_b1_ref_loc;
  phys_vec3 m_b2_ref_min_loc;
  phys_vec3 m_b2_ref_max_loc;
  float m_damp_k;
  unsigned int m_flags;
  pulse_sum_cache m_ps_cache[8];
};

/* 2409 */
struct __cppobj __declspec(align(16)) rigid_body_constraint_distance : rigid_body_constraint
{
  __declspec(align(8)) phys_vec3 m_b1_r_loc;
  phys_vec3 m_b2_r_loc;
  float m_min_distance;
  float m_max_distance;
  float m_next_max_distance;
  float m_max_distance_vel;
  float m_damp_coef;
  unsigned int m_flags;
  pulse_sum_cache m_ps_cache_list[3];
};

/* 2410 */
struct __declspec(align(8)) ragdoll_joint_limit_info
{
  phys_vec3 m_b1_ud_loc;
  float m_b1_ud_limit_co_;
  float m_b1_ud_limit_si_;
  float m_b1_ud_active_limit_co_;
};

/* 2411 */
struct __cppobj __declspec(align(16)) rigid_body_constraint_ragdoll : rigid_body_constraint
{
  __declspec(align(8)) phys_vec3 m_b1_r_loc;
  phys_vec3 m_b2_r_loc;
  unsigned int m_flags;
  pulse_sum_cache m_ps_cache_list[10];
  __declspec(align(8)) phys_vec3 m_b1_axis_loc;
  phys_vec3 m_b2_axis_loc;
  phys_vec3 m_b1_a1_loc;
  phys_vec3 m_b1_a2_loc;
  phys_vec3 m_b1_ref_loc;
  phys_vec3 m_b2_ref_min_loc;
  phys_vec3 m_b2_ref_max_loc;
  ragdoll_joint_limit_info m_joint_limits[2];
  int m_joint_limits_count;
  float m_damp_k;
};

/* 2413 */
struct phys_link_list_base<pulse_sum_normal>
{
  pulse_sum_normal *m_next_link;
};

/* 2412 */
struct __cppobj pulse_sum_normal : phys_link_list_base<pulse_sum_normal>
{
  __declspec(align(16)) phys_vec3 m_ud;
  phys_vec3 m_b1_r;
  phys_vec3 m_b2_r;
  phys_vec3 m_b1_ap;
  phys_vec3 m_b2_ap;
  float m_pulse_sum_min;
  float m_pulse_sum_max;
  float m_pulse_sum;
  float m_right_side;
  float m_big_dirt;
  float m_cfm;
  float m_denom;
  float m_pulse_limit_ratio;
  unsigned int m_flags;
  pulse_sum_normal *m_pulse_parent;
  pulse_sum_node *m_b1;
  pulse_sum_node *m_b2;
  pulse_sum_cache *m_pulse_sum_cache;
};

/* 2414 */
struct __cppobj rigid_body_constraint_wheel : rigid_body_constraint
{
  __declspec(align(8)) phys_vec3 m_b2_hitp_loc;
  phys_vec3 m_b2_hitn_loc;
  phys_vec3 m_b1_wheel_center_loc;
  phys_vec3 m_b1_suspension_dir_loc;
  phys_vec3 m_b1_wheel_axis_loc;
  float m_wheel_radius;
  float m_fwd_fric_k;
  float m_side_fric_k;
  float m_side_fric_max;
  float m_suspension_stiffness_k;
  float m_suspension_damp_k;
  float m_hard_limit_dist;
  float m_roll_stability_factor;
  float m_pitch_stability_factor;
  float m_turning_radius_ratio_max_speed;
  float m_turning_radius_ratio_accel;
  float m_desired_speed_k;
  float m_acceleration_factor_k;
  float m_braking_factor_k;
  float m_wheel_vel;
  float m_wheel_fwd;
  float m_wheel_pos;
  float m_wheel_displaced_center_dist;
  float m_wheel_normal_force;
  unsigned int m_wheel_state;
  unsigned int m_wheel_flags;
  pulse_sum_cache m_ps_cache_list[4];
  pulse_sum_normal *m_ps_suspension;
  pulse_sum_normal *m_ps_side_fric;
  pulse_sum_normal *m_ps_fwd_fric;
};

/* 2415 */
struct __cppobj __declspec(align(16)) rigid_body_constraint_angular_actuator : rigid_body_constraint
{
  __declspec(align(8)) phys_mat44 m_target_mat;
  phys_mat44 m_next_target_mat;
  phys_vec3 m_a_vel;
  float m_power;
  float m_power_scale;
  bool m_enabled;
  pulse_sum_cache m_ps_cache_list[3];
};

/* 2416 */
struct __cppobj __declspec(align(16)) rigid_body_constraint_upright : rigid_body_constraint
{
  __declspec(align(8)) phys_vec3 m_b1_forward_axis_loc;
  phys_vec3 m_b1_right_axis_loc;
  phys_vec3 m_b1_up_axis_loc;
  phys_vec3 m_b1_lean_axis_loc;
  phys_vec3 m_b2_up_axis_loc;
  phys_vec3 m_last_t_vel;
  phys_vec3 m_last_a_vel;
  float m_avg_side_force;
  float m_avg_normal_force;
  float m_lean_angle_calc_delta_t;
  float m_lean_angle;
  float m_lean_angle_multiplier;
  float m_max_lean_angle;
  float m_moving_average_total_time;
  bool m_enabled;
  pulse_sum_cache m_ps_cache_list[1];
};

/* 2417 */
struct __cppobj rigid_body_constraint_custom_orientation : rigid_body_constraint
{
  pulse_sum_cache m_ps_cache_list[5];
  bool m_active;
  bool m_no_orientation_correction;
  float m_torque_resistance_pitch_roll;
  float m_torque_resistance_yaw;
  float m_torque_resistance_yaw_max_collision_speed;
  float m_upright_strength;
};

/* 2418 */
struct __cppobj user_rigid_body : rigid_body
{
  phys_mat44 *m_dictator;
  __declspec(align(16)) phys_mat44 m_dictator_mat;
};

/* 2419 */
struct __cppobj rigid_body_constraint_custom_path : rigid_body_constraint
{
  __declspec(align(8)) phys_mat44 m_path_mat;
  phys_vec3 b1_r_loc;
  user_rigid_body *m_urb;
  int m_timestamp;
  float m_spring_scale;
  pulse_sum_cache m_list_psc[4];
};

/* 2420 */
struct contact_point_info::pulse_sum_cache_info
{
  pulse_sum_cache m_ps_cache_list[3];
};

/* 2421 */
struct __declspec(align(16)) contact_point_info
{
  phys_vec3 m_normal;
  float m_fric_coef;
  float m_bounce_coef;
  float m_max_restitution_vel;
  int m_flags;
  int m_point_pair_count;
  phys_vec3 *m_list_b1_r_loc;
  phys_vec3 *m_list_b2_r_loc;
  contact_point_info::pulse_sum_cache_info *m_list_pulse_sum_cache_info;
  contact_point_info *m_next_link;
  const void *m_rb2_entity;
  float m_translation_lambda;
  phys_collision_pair *m_pcp;
  rigid_body_constraint_contact *m_rbc_contact;
};

/* 2423 */
struct phys_link_list_base<phys_collision_pair>
{
  phys_collision_pair *m_next_link;
};

/* 2422 */
struct __cppobj phys_collision_pair : phys_link_list_base<phys_collision_pair>
{
  broad_phase_info *m_bpi1;
  broad_phase_info *m_bpi2;
  float m_hit_time;
  phys_gjk_cache_info *m_gjk_ci;
};

/* 2424 */
struct __declspec(align(8)) broad_phase_base
{
  phys_vec3 m_trace_aabb_min_whace;
  phys_vec3 m_trace_aabb_max_whace;
  phys_vec3 m_trace_translation;
  unsigned int m_flags;
  broad_phase_base *m_list_bpb_next;
  broad_phase_base *m_list_bpb_cluster_next;
  void *m_sap_node;
  void *m_user_data;
  unsigned int m_env_collision_flags;
  unsigned int m_my_collision_type_flags;
};

/* 2425 */
const struct phys_gjk_geom
{
  phys_gjk_geomVtbl *vfptr;
};

/* 2426 */
const struct cached_simplex_info
{
  phys_vec3 m_indices[3];
};

/* 2427 */
struct phys_memory_heap
{
  char *m_buffer_start;
  char *m_buffer_end;
  char *m_buffer_cur;
  char *m_user_start;
};

/* 2428 */
struct phys_vec2
{
  float x;
  float y;
};

/* 2429 */
struct __declspec(align(16)) contact_manifold_mesh_point
{
  phys_vec3 m_p;
  phys_vec2 m_contact_p;
};

/* 2430 */
struct __declspec(align(16)) phys_contact_manifold
{
  phys_vec3 m_feature_normal;
  phys_vec3 m_feature_hitp;
  phys_vec3 m_feature_hitn;
  float m_feature_distance_eps;
  float m_sin_feautre_angular_eps_sq;
  int m_close_mesh_point_count;
  phys_memory_heap *m_allocator;
  contact_manifold_mesh_point *m_list_mesh_point;
  int m_list_mesh_point_count;
  contact_manifold_mesh_point **m_list_sorted_mesh_point;
  contact_manifold_mesh_point **m_list_contact_point;
  int m_list_contact_point_count;
};

/* 2431 */
struct phys_gjk_geomVtbl
{
  void (__thiscall *support)(phys_gjk_geom *this, phys_vec3 *, phys_vec3 *, phys_vec3 *);
  _BYTE gap4[4];
  void (__thiscall *set_simplex)(phys_gjk_geom *this, phys_vec3 *, const int, phys_vec3 *, cached_simplex_info *);
  phys_vec3 *(__thiscall *get_center)(phys_gjk_geom *this, phys_vec3 *result);
  void (__thiscall *get_feature)(phys_gjk_geom *this, phys_contact_manifold *);
  float (__thiscall *get_geom_radius)(phys_gjk_geom *this);
  void (__thiscall *calc_aabb)(phys_gjk_geom *this, phys_mat44 *, phys_vec3 *, phys_vec3 *);
  bool (__thiscall *ray_cast)(phys_gjk_geom *this, phys_vec3 *, phys_vec3 *, const float, float *, phys_vec3 *);
  bool (__thiscall *is_polyhedron)(phys_gjk_geom *this);
};

/* 2432 */
struct __cppobj __declspec(align(8)) broad_phase_info : broad_phase_base
{
  rigid_body *m_rb;
  phys_mat44 *m_rb_to_world_xform;
  phys_mat44 *m_cg_to_world_xform;
  phys_mat44 *m_cg_to_rb_xform;
  phys_gjk_geom *m_gjk_geom;
  unsigned int m_gjk_geom_id;
  int m_surface_type;
};

/* 2433 */
struct phys_gjk_geom_id_pair_key
{
  unsigned int m_id1;
  unsigned int m_id2;
};

/* 2434 */
struct phys_gjk_cache_info
{
  phys_vec3 m_support_dir;
  cached_simplex_info m_support_a;
  cached_simplex_info m_support_b;
  int m_support_count;
  phys_gjk_geom_id_pair_key m_key;
  unsigned int m_flags;
};

/* 2436 */
struct phys_simple_link_list<contact_point_info>
{
  contact_point_info *m_first;
};

/* 2437 */
struct phys_inplace_avl_tree_node<rigid_body_constraint_contact>
{
  rigid_body_constraint_contact *m_left;
  rigid_body_constraint_contact *m_right;
  int m_balance;
};

/* 2438 */
struct rigid_body_pair_key
{
  rigid_body *m_b1;
  rigid_body *m_b2;
};

/* 2435 */
struct __cppobj rigid_body_constraint_contact : rigid_body_constraint
{
  phys_simple_link_list<contact_point_info> m_list_contact_point_info_buffer_1;
  phys_simple_link_list<contact_point_info> m_list_contact_point_info_buffer_2;
  unsigned int m_solver_priority;
  phys_inplace_avl_tree_node<rigid_body_constraint_contact> m_avl_tree_node;
  rigid_body_pair_key m_avl_key;
};

/* 2445 */
struct WheelState
{
  WheelEffectState m_state;
  WheelEffectState m_last_state;
  float m_state_time;
  float m_rate;
};

/* 2456 */
struct VehicleStun
{
  bool m_changed_this_frame;
  float m_stun_time;
  float m_last_throttle;
  float m_throttle_stun_time;
  float m_last_brake;
  float m_brake_stun_time;
};

/* 2457 */
struct __declspec(align(16)) NitrousVehicleController
{
  phys_vec3 m_script_goal_position;
  float m_script_goal_radius;
  float m_script_goal_speed;
  float m_drive_path_speed;
  float m_horse_target_speed;
  NitrousVehicleController::VehicleHorseControlState m_horse_control_state;
  float m_stopped_time;
  float m_stuck_time;
  __declspec(align(8)) phys_vec3 m_stuck_position;
  usercmd_s m_cmd;
  vec3_t m_cmd_viewangles;
  bool m_cmd_valid;
  bool m_stop_at_goal;
  float m_jump_held_time;
  vec2_t m_jump_input;
  VehicleStun m_stun;
};

/* 2458 */
struct minspec_mutex
{
  volatile unsigned int m_token;
};

/* 2440 */
struct NitrousVehicle
{
  PhysObjUserData *m_phys_user_data;
  WheelState m_wheel_state[4];
  __declspec(align(16)) phys_mat44 m_wheel_orig_relpo[6];
  int m_wheel_damage[6];
  int m_wheel_surf_types[6];
  float m_wheel_yaw[6];
  float m_steer_factor;
  float m_steer_scale;
  VehicleParameter *m_parameter;
  float m_throttle;
  float m_brake;
  float m_hand_brake;
  float m_script_brake;
  int m_boost_start_time;
  float m_boost_time_pool;
  float m_forward_vel;
  phys_vec3 m_ground_vel;
  float m_hand_brake_friction_time;
  gentity_t *m_owner;
  int m_entnum;
  VehicleDef *m_vehicle_def;
  XModel *m_xmodel;
  rigid_body_constraint_custom_orientation *m_orientation_constraint;
  rigid_body_constraint_custom_path *m_vpc;
  int m_flags;
  int m_notify_flags;
  int m_server_notify_flags;
  vec3_t m_collision_hitp;
  vec3_t m_collision_hitn;
  float m_collision_intensity;
  int m_collision_stype;
  int m_collision_entnum;
  __declspec(align(8)) phys_mat44 m_mat;
  NitrousVehicleController mVehicleController;
  float m_fake_rpm;
  int m_num_colliding_wheels;
  float m_current_side_fric_scale;
  float m_current_fwd_fric_scale;
  float m_stuck_time;
  int m_lastNetworkTime;
  int m_lastErrorReductionTime;
  vec3_t m_networkErrorOrigin;
  vec3_t m_networkErrorAngles;
  int m_trackDistAccumLeftInches;
  int m_trackDistAccumRightInches;
  int m_sfx_state_flags;
  float m_speed_scale;
  float m_drivepath_scale;
  int m_throttle_held_down;
  bool m_throttle_time_started;
  vec3_t m_last_origin;
  vec3_t m_last_angles;
  minspec_mutex m_mutex;
  int id;
  int refcount;
  rigid_body_constraint_wheel *m_wheels[6];
  float m_desired_speed_factor;
  float m_acceleration_factor;
  float m_power_braking_factor;
  float m_braking_factor;
  float m_coasting_factor;
  float m_reference_wheel_radius;
  float m_steer_current_angle;
  float m_steer_max_angle;
  float m_steer_speed;
  phys_vec3 m_steer_front_pt_loc;
  float m_steer_front_back_length;
  float m_min_turning_radius;
  unsigned int m_state_flags;
};

/* 2441 */
struct __cppobj gjk_base_t : phys_gjk_geom
{
  __declspec(align(16)) phys_vec3 m_aabb_mn_loc;
  phys_vec3 m_aabb_mx_loc;
  unsigned int m_gjk_geom_id;
  phys_mat44 *m_xform_;
  gjk_base_t *m_next_geom;
  unsigned int m_flags;
  int stype;
  int m_contents;
};

/* 2442 */
struct gjk_geom_list_t
{
  gjk_base_t *m_first_geom;
  int m_geom_count;
};

/* 2444 */
struct hitinfo_t
{
  int hittime;
  vec3_t hitp;
  vec3_t hitn;
  int stype;
  int entnum;
  float intensity;
};

/* 2443 */
struct PhysObjUserData
{
  rigid_body *body;
  NitrousVehicle *vehicle;
  gjk_geom_list_t m_gjk_geom_list;
  PhysObjUserData *m_next_link;
  __declspec(align(16)) phys_mat44 cg2rb;
  phys_mat44 m2w;
  broad_phase_base *m_bpb;
  vec3_t tvel;
  vec3_t avel;
  float friction;
  float bounce;
  int id;
  int underwater;
  int buoyancy;
  int timeBuoyant;
  int timeRipple;
  unsigned __int16 trDuration;
  unsigned __int16 refcount;
  float m_time_since_last_event;
  float m_time_since_last_reeval;
  int m_flags;
  float mass;
  vec3_t buoyancyBoxMin;
  vec3_t buoyancyBoxMax;
  vec3_t centerOfMassOffset;
  int owner;
  PhysicsOwnerType owner_type;
  hitinfo_t hitinfo;
};

/* 2446 */
const struct VehicleParameter
{
  float m_speed_max;
  float m_accel_max;
  float m_reverse_scale;
  float m_steer_angle_max;
  float m_steer_angle_speed_scale;
  float m_steer_speed;
  float m_wheel_radius;
  float m_susp_spring_k;
  float m_susp_damp_k;
  float m_susp_adj;
  float m_susp_hard_limit;
  float m_susp_min_height;
  float m_tire_fric_fwd;
  float m_tire_fric_side;
  float m_tire_fric_brake;
  float m_tire_fric_hand_brake;
  float m_body_mass;
  float m_roll_stability;
  float m_pitch_stability;
  float m_pitch_roll_resistance;
  float m_yaw_resistance;
  float m_upright_strength;
  float m_tilt_fakey;
  float m_peel_out_max_speed;
  float m_tire_damp_coast;
  float m_tire_damp_brake;
  float m_tire_damp_hand;
  float m_auto_hand_brake_min_speed;
  TractionType m_traction_type;
  const char *m_name;
  vec3_t m_bbox_min;
  vec3_t m_bbox_max;
  vec3_t m_mass_center_offset;
  vec3_t m_buoyancybox_min;
  vec3_t m_buoyancybox_max;
  float m_water_speed_max;
  float m_water_accel_max;
  float m_water_turn_accel;
  float m_water_turn_speed_max;
  float m_water_ebrake_power;
  vec3_t m_boat_motor_offset;
  float m_boat_speed_rise;
  float m_boat_speed_tilt;
  float m_boat_side_fric_scale;
  float m_boat_forward_fric_scale;
  float m_boat_vertical_fric_scale;
  float m_jump_force;
  float m_tire_fric_side_max;
  bool m_drive_on_walls;
  float m_linear_drag_scale;
  float m_angular_drag_scale;
};

/* 2447 */
struct view_limits_t
{
  float horizSpanLeft;
  float horizSpanRight;
  float vertSpanUp;
  float vertSpanDown;
  float horizResistLeft;
  float horizResistRight;
  float vertResistUp;
  float vertResistDown;
};

/* 2448 */
struct __declspec(align(4)) DevGraph
{
  vec2_t *knots;
  int *knotCount;
  int knotCountMax;
  int selectedKnot;
  void (__cdecl *eventCallback)(DevGraph *, DevEventType, LocalClientNum_t);
  void (__cdecl *textCallback)(DevGraph *, const float, const float, char *, const int);
  void *data;
  bool disableEditingEndPoints;
};

/* 2449 */
struct GraphFloat
{
  char name[64];
  vec2_t knots[32];
  int knotCount;
  float scale;
  DevGraph devguiGraph;
};

/* 2450 */
struct VehicleDriveBySound
{
  int apex;
  const char *name;
  unsigned int alias;
};

/* 2451 */
struct VehicleEngineSound
{
  const char *name;
  unsigned int alias;
  float params[5];
};

/* 2452 */
struct VehicleGearData
{
  float minRPM;
  float maxRPM;
  float ratio;
};

/* 2453 */
struct VehicleEngine
{
  float idleRpms;
  float maxRpms;
  float maxTorque;
  float brakingCoeff;
  vec4_t loadFadeParams;
  float loadScale;
  float loadSmoothing;
  float throttleLag;
  float pitchScale;
  VehicleEngineSound onload[5];
  VehicleEngineSound offload[5];
  int numGears;
  int loopLastGear;
  VehicleGearData gears[10];
};

/* 2454 */
struct VehicleAntenna
{
  float springK;
  float damp;
  float length;
  float gravity;
};

/* 2455 */
const struct VehicleDef
{
  const char *name;
  __int16 type;
  int remoteControl;
  int bulletDamage;
  int armorPiercingDamage;
  int grenadeDamage;
  int projectileDamage;
  int projectileSplashDamage;
  int heavyExplosiveDamage;
  __int16 cameraMode;
  int autoRecenterOnAccel;
  int thirdPersonDriver;
  int thirdPersonUseVehicleRoll;
  int thirdPersonCameraPitchVehicleRelative;
  int thirdPersonCameraHeightWorldRelative;
  float thirdPersonCameraRange;
  float thirdPersonCameraMinPitchClamp;
  float thirdPersonCameraMaxPitchClamp;
  float thirdPersonCameraHeight[2];
  float thirdPersonCameraPitch[2];
  int cameraAlwaysAutoCenter;
  float cameraAutoCenterLerpRate;
  float cameraAutoCenterMaxLerpRate;
  float thirdPersonCameraSpringDistance;
  float thirdPersonCameraSpringTime;
  float thirdPersonCameraHandbrakeTurnRateInc;
  float cameraFOV;
  float cameraRollFraction;
  vec3_t tagPlayerOffset;
  int killcamCollision;
  float killcamDist;
  float killcamZDist;
  float killcamMinDist;
  float killcamZTargetOffset;
  float killcamFOV;
  float killcamNearBlur;
  float killcamNearBlurStart;
  float killcamNearBlurEnd;
  float killcamFarBlur;
  float killcamFarBlurStart;
  float killcamFarBlurEnd;
  int isDrivable;
  int numberOfSeats;
  int numberOfGunners;
  int seatSwitchOrder[11];
  int driverControlledGunPos;
  float entryPointRadius[5];
  float texScrollScale;
  float wheelRotRate;
  float extraWheelRotScale;
  int wheelChildTakesSteerYaw;
  float maxSpeed;
  float maxSpeedVertical;
  float accel;
  float accelVertical;
  float rotRate;
  float rotAccel;
  float maxBodyPitch;
  float maxBodyRoll;
  float collisionDamage;
  float collisionSpeed;
  float suspensionTravel;
  float heliCollisionScalar;
  float viewPitchOffset;
  float viewInfluence;
  float tiltFromAcceleration[2];
  float tiltFromDeceleration[2];
  float tiltFromVelocity[2];
  float tiltSpeed[2];
  const char *turretWeapon;
  view_limits_t turretViewLimits;
  float turretRotRate;
  int turretClampPlayerView;
  int turretLockTurretToPlayerView;
  const char *gunnerWeapon[4];
  unsigned __int16 gunnerWeaponIndex[4];
  float gunnerRotRate;
  vec2_t gunnerRestAngles[4];
  view_limits_t passengerViewLimits[6];
  const char *sndNames[2];
  unsigned int sndIndices[2];
  const char *sndMaterialNames[3];
  float skidSpeedMin;
  float skidSpeedMax;
  const char *futzName;
  float futzBlend;
  int animType;
  const char *animSet;
  int scriptedAnimationEntry;
  float mantleAngles[4];
  unsigned __int16 extraWheelTags[4];
  unsigned __int16 driverHideTag;
  XModel *attachmentModels[4];
  unsigned __int16 attachmentTags[4];
  XModel *deathAttachmentModels[4];
  unsigned __int16 deathAttachmentTags[4];
  float tracerOffset[2];
  XModel *model;
  XModel *viewModel;
  XModel *deathModel;
  XModel *enemyModel;
  float modelSwapDelay;
  FxEffectDef *exhaustFx;
  int oneExhaust;
  FxEffectDef *treadFx[32];
  FxEffectDef *deathFx;
  unsigned __int16 deathFxTag;
  const char *deathFxSound;
  FxEffectDef *lightFx[4];
  unsigned __int16 lightFxTag[4];
  FxEffectDef *friendlyLightFx;
  unsigned __int16 friendlyLightFxTag;
  FxEffectDef *enemyLightFx;
  unsigned __int16 enemyLightFxTag;
  float radiusDamageMin;
  float radiusDamageMax;
  float radiusDamageRadius;
  const char *shootShock;
  const char *shootRumble;
  float deathQuakeScale;
  float deathQuakeDuration;
  float deathQuakeRadius;
  const char *rumbleType;
  float rumbleScale;
  float rumbleDuration;
  float rumbleRadius;
  float rumbleBaseTime;
  float rumbleAdditionalTime;
  int healthDefault;
  int healthMin;
  int healthMax;
  int eTeam;
  int boostAccelMultiplier;
  float boostDuration;
  float boostSpeedIncrease;
  int addToCompass;
  int addToCompassEnemy;
  const char *compassIcon;
  Material *compassIconMaterial;
  const char *gasButtonName;
  int gasButton;
  const char *reverseBrakeButtonName;
  int reverseBrakeButton;
  const char *handBrakeButtonName;
  int handBrakeButton;
  const char *attackButtonName;
  int attackButton;
  const char *attackSecondaryButtonName;
  int attackSecondaryButton;
  const char *boostButtonName;
  int boostButton;
  const char *moveUpButtonName;
  int moveUpButton;
  const char *moveDownButtonName;
  int moveDownButton;
  const char *switchSeatButtonName;
  int switchSeatButton;
  const char *steerGraphName;
  GraphFloat *steerGraph;
  const char *accelGraphName;
  GraphFloat *accelGraph;
  int isNitrous;
  int isFourWheelSteering;
  int useCollmap;
  float radius;
  float minHeight;
  float maxHeight;
  float max_fric_tilt_angle;
  float max_fric_tilt;
  int noDirectionalDamage;
  int fakeBodyStabilizer;
  float vehHelicopterBoundsRadius;
  float vehHelicopterDecelerationFwd;
  float vehHelicopterDecelerationSide;
  float vehHelicopterDecelerationUp;
  float vehHelicopterTiltFromControllerAxes;
  float vehHelicopterTiltFromFwdAndYaw;
  float vehHelicopterTiltFromFwdAndYaw_VelAtMaxTilt;
  float vehHelicopterTiltMomentum;
  int vehHelicopterQuadRotor;
  int vehHelicopterAccelTwardsView;
  float maxRotorArmMovementAngle;
  float maxRotorArmRotationAngle;
  int vehHelicopterMaintainHeight;
  int vehHelicopterMaintainMaxHeight;
  float vehHelicopterMaintainHeightLimit;
  float vehHelicopterMaintainHeightAccel;
  float vehHelicopterMaintainHeightMinimum;
  float vehHelicopterMaintainHeightMaximum;
  float vehHelicopterMaintainCeilingMinimum;
  int joltVehicle;
  int joltVehicleDriver;
  float joltMaxTime;
  float joltTime;
  float joltWaves;
  float joltIntensity;
  VehicleParameter nitrousVehParams;
  float driveBySoundRadius[2];
  VehicleDriveBySound driveBySounds[40];
  int doFootSteps;
  int isSentient;
  VehicleEngine engine;
  VehicleAntenna antenna[2];
  char *csvInclude;
  float customFloat0;
  float customFloat1;
  float customFloat2;
  int customBool0;
  int customBool1;
  int customBool2;
};

/* 2460 */
struct visitor_base_tVtbl
{
  void *(__thiscall *__vecDelDtor)(visitor_base_t *this, unsigned int);
};

/* 2462 */
struct __declspec(align(8)) cbrush_t
{
  vec3_t mins;
  int contents;
  vec3_t maxs;
  unsigned int numsides;
  cbrushside_t *sides;
  int axial_cflags[2][3];
  int axial_sflags[2][3];
  unsigned int numverts;
  vec3_t *verts;
};

/* 2463 */
struct ClipMaterial
{
  const char *name;
  int surfaceFlags;
  int contentFlags;
};

/* 2464 */
struct cLeafBrushNodeLeaf_t
{
  unsigned __int16 *brushes;
};

/* 2465 */
struct cLeafBrushNodeChildren_t
{
  float dist;
  float range;
  unsigned __int16 childOffset[2];
};

/* 2466 */
union cLeafBrushNodeData_t
{
  cLeafBrushNodeLeaf_t leaf;
  cLeafBrushNodeChildren_t children;
};

/* 2467 */
struct cLeafBrushNode_s
{
  char axis;
  __int16 leafBrushCount;
  int contents;
  cLeafBrushNodeData_t data;
};

/* 2468 */
struct Bounds
{
  vec3_t midPoint;
  vec3_t halfSize;
};

/* 2469 */
struct ClipInfo
{
  int planeCount;
  cplane_s *planes;
  unsigned int numMaterials;
  ClipMaterial *materials;
  unsigned int numBrushSides;
  cbrushside_t *brushsides;
  unsigned int leafbrushNodesCount;
  cLeafBrushNode_s *leafbrushNodes;
  unsigned int numLeafBrushes;
  unsigned __int16 *leafbrushes;
  unsigned int numBrushVerts;
  vec3_t *brushVerts;
  unsigned int nuinds;
  unsigned __int16 *uinds;
  unsigned __int16 numBrushes;
  cbrush_t *brushes;
  Bounds *brushBounds;
  int *brushContents;
};

/* 2470 */
struct __declspec(align(4)) cLeaf_s
{
  unsigned __int16 firstCollAabbIndex;
  unsigned __int16 collAabbCount;
  int brushContents;
  int terrainContents;
  vec3_t mins;
  vec3_t maxs;
  int leafBrushNode;
  __int16 cluster;
};

/* 2471 */
struct cmodel_t
{
  vec3_t mins;
  vec3_t maxs;
  float radius;
  ClipInfo *info;
  cLeaf_s leaf;
};

/* 2472 */
struct TraceThreadInfo
{
  TraceCheckCount checkcount;
  cbrush_t *box_brush;
  cmodel_t *box_model;
  PhysGeomList **geoms;
};

/* 2474 */
union CollisionAabbTreeIndex
{
  int firstChildIndex;
  int partitionIndex;
};

/* 2475 */
const struct CollisionAabbTree
{
  vec3_t origin;
  unsigned __int16 materialIndex;
  unsigned __int16 childCount;
  vec3_t halfSize;
  CollisionAabbTreeIndex u;
};

/* 2479 */
struct __declspec(align(16)) vehicle_cache_t
{
  vec3_t lastOrigin;
  vec3_t lastAngles;
  int hit_indices[6];
  int hit_sflags[6];
  vec3_t hit_normals[6];
  float hit_fractions[6];
  TraceHitType hit_type[6];
  unsigned __int16 hit_id[6];
  colgeom_visitor_inlined_t<300> proximity_data;
  int wheel_mask;
};

/* 2486 */
struct __declspec(align(16)) vehicle_t
{
  vehicle_pathpos_t pathPos;
  int pathOffsetFlags;
  vec3_t pathOffsetTransform[4];
  vec3_t pathFixedOffset;
  vec3_t pathVariableOffset;
  vec3_t pathVariableOffsetTargetPrev;
  vec3_t pathVariableOffsetTarget;
  float pathVariableOffsetRate;
  float pathVariableOffsetTime;
  vehicle_physic_t phys;
  int entNum;
  __int16 defIndex;
  int flags;
  team_t team;
  VehicleMoveState moveState;
  VehicleTurret turret;
  float turretRotScale;
  VehicleJitter jitter;
  VehicleHover hover;
  VehicleTurret gunnerTurrets[4];
  VehicleJitter gunnerJitter[4];
  float minigunRotationSpeed;
  unsigned __int16 lookAtText0;
  unsigned __int16 lookAtText1;
  int manualMode;
  float manualSpeed;
  float manualAccel;
  float manualDecel;
  float speed;
  float maxSpeedOverride;
  float maxDragSpeed;
  float turningAbility;
  int hasTarget;
  int hasTargetYaw;
  int hasGoalYaw;
  int stopAtGoal;
  int stopping;
  int targetEnt;
  EntHandle lookAtEnt;
  vec3_t targetOrigin;
  vec3_t targetOffset;
  float targetYaw;
  vec3_t goalPosition;
  float goalYaw;
  float prevGoalYaw;
  float yawOverShoot;
  int yawSlowDown;
  float pathTransitionTime;
  float maxPathTransitionTime;
  vec3_t pathTransitionOffset;
  vec3_t pathTransitionAngleOffset;
  int hasDefaultPitch;
  float defaultPitch;
  float hasGoalRoll;
  float goalRoll;
  float goalRollTime;
  float currentRollTime;
  int numRolls;
  VehicleTarget gunnerTargets[4];
  float nearGoalNotifyDist;
  vec2_t joltDir;
  float joltTime;
  float joltWave;
  float joltSpeed;
  float joltDecel;
  VehicleTags boneIndex;
  int turretHitNum;
  VehicleSeat seats[11];
  float modelSwapDelay;
  int oneExhaust;
  float deathQuakeScale;
  float deathQuakeDuration;
  float deathQuakeRadius;
  int secTurretAiControlled;
  int addToCompass;
  NitrousVehicle *nitrousVehicle;
  vehicle_cache_t vehicle_cache;
  float heliHeightLockOffset;
  float lastViewOffset;
  int driveBySoundIndex[2];
  float driveBySoundDelay[2];
  float driveBySoundTimeout[2];
  sentient_t *sentient;
  ActorSight sight;
  ActorThreat threat;
  sentient_info_t sentientInfo[72];
};

/* 2498 */
struct animscripted_t
{
  vec3_t axis[4];
  vec3_t originError;
  vec3_t originErrorReduction;
  vec3_t anglesError;
  vec3_t anglesErrorReduction;
  unsigned __int16 anim;
  unsigned __int16 root;
  char bStarted;
  char mode;
  int startTime;
  int lerpTime;
  float fHeightOfs;
  float fEndPitch;
  float fEndRoll;
  float fOrientLerp;
};

/* 2503 */
struct tagInfo_t
{
  gentity_t *parent;
  gentity_t *next;
  unsigned __int16 name;
  bool blendToParent;
  bool blendOnlyYaw;
  bool collisionPhysics;
  int index;
  vec3_t axis[4];
  vec3_t parentInvAxis[4];
};

/* 2504 */
struct XAnimParam
{
  char strName[16];
  float fValue;
};

/* 2505 */
union XAnimIndices
{
  char *_1;
  unsigned __int16 *_2;
  void *data;
};

/* 2506 */
struct XAnimNotifyInfo
{
  unsigned __int16 name;
  float time;
};

/* 2507 */
union XAnimDynamicFrames
{
  char (*_1)[3];
  unsigned __int16 (*_2)[3];
};

/* 2508 */
union XAnimDynamicIndices
{
  char _1[1];
  unsigned __int16 _2[1];
};

/* 2509 */
struct __declspec(align(4)) XAnimPartTransFrames
{
  vec3_t mins;
  vec3_t size;
  XAnimDynamicFrames frames;
  XAnimDynamicIndices indices;
};

/* 2510 */
union XAnimPartTransData
{
  XAnimPartTransFrames frames;
  vec3_t frame0;
};

/* 2511 */
struct XAnimPartTrans
{
  unsigned __int16 size;
  char smallTrans;
  XAnimPartTransData u;
};

/* 2512 */
struct __declspec(align(4)) XAnimDeltaPartQuatDataFrames2
{
  __int16 (*frames)[2];
  XAnimDynamicIndices indices;
};

/* 2513 */
union XAnimDeltaPartQuatData2
{
  XAnimDeltaPartQuatDataFrames2 frames;
  __int16 frame0[2];
};

/* 2514 */
struct XAnimDeltaPartQuat2
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData2 u;
};

/* 2515 */
struct __declspec(align(4)) XAnimDeltaPartQuatDataFrames
{
  __int16 (*frames)[4];
  XAnimDynamicIndices indices;
};

/* 2516 */
union XAnimDeltaPartQuatData
{
  XAnimDeltaPartQuatDataFrames frames;
  __int16 frame0[4];
};

/* 2517 */
struct XAnimDeltaPartQuat
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData u;
};

/* 2518 */
struct XAnimDeltaPart
{
  XAnimPartTrans *trans;
  XAnimDeltaPartQuat2 *quat2;
  XAnimDeltaPartQuat *quat;
};

/* 2519 */
struct XAnimParts
{
  const char *name;
  unsigned __int16 dataByteCount;
  unsigned __int16 dataShortCount;
  unsigned __int16 dataIntCount;
  unsigned __int16 randomDataByteCount;
  unsigned __int16 randomDataIntCount;
  unsigned __int16 numframes;
  bool bLoop;
  bool bDelta;
  bool bDelta3D;
  bool bLeftHandGripIK;
  unsigned int streamedFileSize;
  char boneCount[10];
  char notifyCount;
  char assetType;
  bool isDefault;
  unsigned int randomDataShortCount;
  unsigned int indexCount;
  float framerate;
  float frequency;
  float primedLength;
  float loopEntryTime;
  unsigned __int16 *names;
  char *dataByte;
  __int16 *dataShort;
  int *dataInt;
  __int16 *randomDataShort;
  char *randomDataByte;
  int *randomDataInt;
  XAnimIndices indices;
  XAnimNotifyInfo *notify;
  XAnimDeltaPart *deltaPart;
};

/* 2520 */
struct XAnimParent
{
  unsigned __int16 flags;
  unsigned __int16 children;
};

/* 2521 */
union $FCE44D6FB94E8BC99BF232AF6561B56E
{
  XAnimParts *parts;
  XAnimParent animParent;
};

/* 2522 */
struct XAnimEntry
{
  unsigned __int16 bCreated;
  unsigned __int16 numAnims;
  unsigned __int16 firstParamIxPlusOne;
  unsigned __int16 paramCount;
  unsigned __int16 parent;
  $FCE44D6FB94E8BC99BF232AF6561B56E ___u5;
};

/* 2523 */
struct XAnim_s
{
  const char *debugName;
  unsigned int size;
  unsigned int paramSize;
  XAnimParam *params;
  const char **debugAnimNames;
  bool *wasLoggedIfMissing;
  XAnimEntry entries[1];
};

/* 2524 */
struct XAnimTree_s
{
  XAnim_s *anims;
  unsigned __int16 children;
  __int16 inst;
};

/* 2556 */
struct gjccc_create_t
{
  gjccc_create_type_e type;
  vec3_t *mins;
  vec3_t *maxs;
  PhysGeomList *collmap;
};

/* 2557 */
const struct gjkcc_input_t
{
  unsigned int gjkcc_id;
  bool is_server_thread;
  colgeom_visitor_inlined_t<300> *proximity_data;
  int proximity_mask;
  int m_ent_num;
  unsigned int m_gjk_query_flags;
  gjk_base_t *m_gjk_cg;
  phys_mat44 *m_mat;
  gjccc_create_t *create_info;
};

/* 2560 */
struct tagCLIPDATA
{
  unsigned int cbSize;
  int ulClipFmt;
  char *pClipData;
};

/* 2561 */
struct tagBLOB
{
  unsigned int cbSize;
  char *pBlobData;
};

/* 2562 */
struct __cppobj ISequentialStream : IUnknown
{
};

/* 2563 */
struct __cppobj IStream : ISequentialStream
{
};

/* 2564 */
struct __cppobj IStorage : IUnknown
{
};

/* 2565 */
struct tagVersionedStream
{
  _GUID guidVersion;
  IStream *pStream;
};

/* 2566 */
struct tagCAC
{
  unsigned int cElems;
  char *pElems;
};

/* 2567 */
struct tagCAI
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 2568 */
struct tagCAL
{
  unsigned int cElems;
  int *pElems;
};

/* 2569 */
struct tagCAUH
{
  unsigned int cElems;
  _ULARGE_INTEGER *pElems;
};

/* 2570 */
struct tagCAFLT
{
  unsigned int cElems;
  float *pElems;
};

/* 2571 */
struct tagCABOOL
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 2572 */
struct tagCASCODE
{
  unsigned int cElems;
  int *pElems;
};

/* 2573 */
struct tagCADATE
{
  unsigned int cElems;
  long double *pElems;
};

/* 2574 */
struct tagCACLIPDATA
{
  unsigned int cElems;
  tagCLIPDATA *pElems;
};

/* 2575 */
struct tagCABSTRBLOB
{
  unsigned int cElems;
  tagBSTRBLOB *pElems;
};

/* 2576 */
struct tagCALPSTR
{
  unsigned int cElems;
  char **pElems;
};

/* 2577 */
struct tagCALPWSTR
{
  unsigned int cElems;
  wchar_t **pElems;
};

/* 2578 */
struct tagCAPROPVARIANT
{
  unsigned int cElems;
  tagPROPVARIANT *pElems;
};

/* 2580 */
struct __unaligned __declspec(align(1)) $5DF3780F58367B9F2537DF425A8A812E
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  char cVal;
};

/* 2581 */
struct $6D336DA143C556260FF80C12817B08DB
{
  _BYTE gap0[8];
  int lVal;
};

/* 2582 */
struct $05A5CAD3D73B137D72AADDDD0075FF2D
{
  _BYTE gap0[8];
  _LARGE_INTEGER hVal;
};

/* 2583 */
struct $9953E549EF4BA468736BF8BC72997D52
{
  _BYTE gap0[8];
  _ULARGE_INTEGER uhVal;
};

/* 2584 */
struct $160BBE55D42B88DE3EB0DA9440E81093
{
  _BYTE gap0[8];
  _FILETIME filetime;
};

/* 2585 */
struct $E45D853CCD6299E370F9C05B1296A2F8
{
  _BYTE gap0[8];
  _GUID *puuid;
};

/* 2586 */
struct $29E3A6C02BB09D805A42400F2694B7A9
{
  _BYTE gap0[8];
  tagCLIPDATA *pclipdata;
};

/* 2587 */
struct $E6F142218C7A77F27EC10F92316C7873
{
  _BYTE gap0[8];
  tagBSTRBLOB bstrblobVal;
};

/* 2588 */
struct $26E60874EDEA5E4486DEDFE0289D317F
{
  _BYTE gap0[8];
  tagBLOB blob;
};

/* 2589 */
struct $17BA733FE6B8BEB3CC80B954432F0727
{
  _BYTE gap0[8];
  char *pszVal;
};

/* 2590 */
struct $A123DDE5155BABE8656CED1ACF96B10E
{
  _BYTE gap0[8];
  wchar_t *pwszVal;
};

/* 2591 */
struct $D77E1C074D0C1609E04D736B72470B2B
{
  _BYTE gap0[8];
  IStream *pStream;
};

/* 2592 */
struct $62B3DA629E25CE4D36D2117D9C0B298D
{
  _BYTE gap0[8];
  IStorage *pStorage;
};

/* 2593 */
struct $39DC5E7CB46070AE5CDF3F2DC2BFA9DF
{
  _BYTE gap0[8];
  tagVersionedStream *pVersionedStream;
};

/* 2594 */
struct $F7B2B2FA6E5EA2945332003783C9AF87
{
  _BYTE gap0[8];
  tagCAC cac;
};

/* 2595 */
struct $CB545A54FBEAE8422A51E87CC33BB0E9
{
  _BYTE gap0[8];
  tagCAUB caub;
};

/* 2596 */
struct $82A56080923EF551EC4F07BCCC40AC54
{
  _BYTE gap0[8];
  tagCAI cai;
};

/* 2597 */
struct $CBE15FCD122944B54799ED3E4D07D948
{
  _BYTE gap0[8];
  tagCAUI caui;
};

/* 2598 */
struct $A8209C5A3E2BF3AFA49F0A927FDD2D4A
{
  _BYTE gap0[8];
  tagCAL cal;
};

/* 2599 */
struct $39BF9DED89A2310BCF56745470F4812B
{
  _BYTE gap0[8];
  tagCAUL caul;
};

/* 2600 */
struct $9433CA9A01D857B78A2B4DE240703E28
{
  _BYTE gap0[8];
  tagCAH cah;
};

/* 2601 */
struct $2BC37CDBFDDF91FC3FD453B6E2D99C77
{
  _BYTE gap0[8];
  tagCAUH cauh;
};

/* 2602 */
struct $0D4F867282BA5AADF3D4EA5EF47AFF1B
{
  _BYTE gap0[8];
  tagCAFLT caflt;
};

/* 2603 */
struct $72CBCDBD22515C4491887373F54B30D4
{
  _BYTE gap0[8];
  tagCADBL cadbl;
};

/* 2604 */
struct $7F0AAD903CC224412E56B10011D1E285
{
  _BYTE gap0[8];
  tagCABOOL cabool;
};

/* 2605 */
struct $978DAD48728CEF62801B40E09623EABA
{
  _BYTE gap0[8];
  tagCASCODE cascode;
};

/* 2606 */
struct $BF6BE6828D0647BB76FA43C8815358BC
{
  _BYTE gap0[8];
  tagCACY cacy;
};

/* 2607 */
struct $BF09348ACE5761475C0F2E81E616DA21
{
  _BYTE gap0[8];
  tagCADATE cadate;
};

/* 2608 */
struct $360B306F69610494981E31404E665A27
{
  _BYTE gap0[8];
  tagCAFILETIME cafiletime;
};

/* 2609 */
struct $4347CF3E527C1B8F41039509FC227314
{
  _BYTE gap0[8];
  tagCACLSID cauuid;
};

/* 2610 */
struct $DF88C4D18A001987426FFAA75989F567
{
  _BYTE gap0[8];
  tagCACLIPDATA caclipdata;
};

/* 2611 */
struct $5C94D48F59C4ED7A1FDEA0DAB8305026
{
  _BYTE gap0[8];
  tagCABSTR cabstr;
};

/* 2612 */
struct $749CB999BBFA17C49DEFE33F277C376E
{
  _BYTE gap0[8];
  tagCABSTRBLOB cabstrblob;
};

/* 2613 */
struct $E6DF106F95165F4CA8D5BC1E309C4F17
{
  _BYTE gap0[8];
  tagCALPSTR calpstr;
};

/* 2614 */
struct $C206B759AF2DA7BD20DFE1A01C5C71D3
{
  _BYTE gap0[8];
  tagCALPWSTR calpwstr;
};

/* 2615 */
struct $E9EBF16C53F2C77117CFA16431D5EC3C
{
  _BYTE gap0[8];
  tagCAPROPVARIANT capropvar;
};

/* 2616 */
struct $8A860A6060A8551710E3DECD21FDCBC5
{
  _BYTE gap0[8];
  tagPROPVARIANT *pvarVal;
};

/* 2617 */
union $79757BB845DEEA59B67C3CB9501FD1E4
{
  $5DF3780F58367B9F2537DF425A8A812E __s0;
  tagDEC decVal;
  $F28A51B4B40B0D33C72915D739D42B4B __s2;
  $31126B8528A05AF3606C6D495FD178E8 __s3;
  $48802A31D3D0701BC13CEF9CEA041E7B __s4;
  $6D336DA143C556260FF80C12817B08DB __s5;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s6;
  $5CA90CF57237397281FB12BFD52C1905 __s7;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s8;
  $05A5CAD3D73B137D72AADDDD0075FF2D __s9;
  $9953E549EF4BA468736BF8BC72997D52 __s10;
  $50230A970D9734D4E9774CFC619DF0F6 __s11;
  $4C0EC2258454B893CE739DAE89D8DB7B __s12;
  $6DB36323059316E675433BB10D285009 __s13;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s14;
  $61AD20D59856C3FFB61EBD7435F71664 __s15;
  $E94952165EEA9EEA990FEB33603E1B19 __s16;
  $160BBE55D42B88DE3EB0DA9440E81093 __s17;
  $E45D853CCD6299E370F9C05B1296A2F8 __s18;
  $29E3A6C02BB09D805A42400F2694B7A9 __s19;
  $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s20;
  $E6F142218C7A77F27EC10F92316C7873 __s21;
  $26E60874EDEA5E4486DEDFE0289D317F __s22;
  $17BA733FE6B8BEB3CC80B954432F0727 __s23;
  $A123DDE5155BABE8656CED1ACF96B10E __s24;
  $1FCDE729AC50EF5BABC51E5C79B7023A __s25;
  $E16632CD3B1C14C18455813167009011 __s26;
  $D77E1C074D0C1609E04D736B72470B2B __s27;
  $62B3DA629E25CE4D36D2117D9C0B298D __s28;
  $39DC5E7CB46070AE5CDF3F2DC2BFA9DF __s29;
  $9EE33AFE25F9C33DDD902D20EE083198 __s30;
  $F7B2B2FA6E5EA2945332003783C9AF87 __s31;
  $CB545A54FBEAE8422A51E87CC33BB0E9 __s32;
  $82A56080923EF551EC4F07BCCC40AC54 __s33;
  $CBE15FCD122944B54799ED3E4D07D948 __s34;
  $A8209C5A3E2BF3AFA49F0A927FDD2D4A __s35;
  $39BF9DED89A2310BCF56745470F4812B __s36;
  $9433CA9A01D857B78A2B4DE240703E28 __s37;
  $2BC37CDBFDDF91FC3FD453B6E2D99C77 __s38;
  $0D4F867282BA5AADF3D4EA5EF47AFF1B __s39;
  $72CBCDBD22515C4491887373F54B30D4 __s40;
  $7F0AAD903CC224412E56B10011D1E285 __s41;
  $978DAD48728CEF62801B40E09623EABA __s42;
  $BF6BE6828D0647BB76FA43C8815358BC __s43;
  $BF09348ACE5761475C0F2E81E616DA21 __s44;
  $360B306F69610494981E31404E665A27 __s45;
  $4347CF3E527C1B8F41039509FC227314 __s46;
  $DF88C4D18A001987426FFAA75989F567 __s47;
  $5C94D48F59C4ED7A1FDEA0DAB8305026 __s48;
  $749CB999BBFA17C49DEFE33F277C376E __s49;
  $E6DF106F95165F4CA8D5BC1E309C4F17 __s50;
  $C206B759AF2DA7BD20DFE1A01C5C71D3 __s51;
  $E9EBF16C53F2C77117CFA16431D5EC3C __s52;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s53;
  $166B1F81F6EA96F97683A65F38FB1A59 __s54;
  $76732A64405C0E287FCB302687644550 __s55;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s56;
  $E5FC128E66C26C95254032BA69D36E74 __s57;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s58;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s59;
  $2516E53E690D8CC5659AAB7EDC49E664 __s60;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s61;
  $2CABE618CF1C2625A4479554E4967E0A __s62;
  $AAA92DA1D6E1B0E8462F69216B62027C __s63;
  $FE6F595D504927BBC5C40878017A8B65 __s64;
  $F7167AE7A8ABA03C094C204FB1564A28 __s65;
  $A67807D1C4CFA317963E8236F6537AA0 __s66;
  $6857AE69DB7C952EEFD665431A7B503A __s67;
  $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s68;
  $1348F48CB399E33D48B42DCD1643FC89 __s69;
  $A198DDA0BA6767578E3DC8270E73FD92 __s70;
  $6007DB503E9F4A30F0A067AB2FC9B41E __s71;
  $8A860A6060A8551710E3DECD21FDCBC5 __s72;
};

/* 2579 */
struct tagPROPVARIANT
{
  $79757BB845DEEA59B67C3CB9501FD1E4 ___u0;
};

/* 2618 */
struct clientsPositionArchive_t
{
  int time;
  bool valid[18];
  char flags[18];
  vec3_t positions[18];
  vec3_t angles[18];
};

/* 2619 */
struct bdCounter
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2620 */
struct __cppobj bdCounterValue : bdTaskResult
{
  unsigned int m_counterID;
  __int64 m_counterValue;
};

/* 2621 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_8
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[2];
  _BYTE gap8[1];
};

/* 2624 */
struct jqAtomicHeap::LevelInfo
{
  unsigned int BlockSize;
  int NBlocks;
  int NCells;
  unsigned __int64 *CellAvailable;
  unsigned __int64 *CellAllocated;
};

/* 2622 */
struct jqAtomicHeap
{
  jqAtomicHeap *ThisPtr;
  tlAtomicMutex Mutex;
  char *HeapBase;
  unsigned int HeapSize;
  unsigned int BlockSize;
  volatile unsigned int TotalUsed;
  volatile unsigned int TotalBlocks;
  int NLevels;
  jqAtomicHeap::LevelInfo Levels[11];
  char *LevelData;
};

/* 2623 */
struct tlAtomicMutex
{
  unsigned __int64 ThreadId;
  int LockCount;
  tlAtomicMutex *ThisPtr;
};

/* 2625 */
struct D3D11_TEX2DMS_ARRAY_RTV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2626 */
struct __cppobj bdChannelInfo : bdTaskResult
{
  unsigned __int64 m_channelID;
  unsigned int m_numSubscribers;
  unsigned int m_maxSubscribers;
  unsigned __int64 m_adminID;
  bool m_isPasswordRequired;
  bool m_isPublicChannel;
  unsigned int m_dataVersion;
};

/* 2627 */
struct bdStringData
{
  unsigned int m_referenceCount;
  unsigned int m_length;
  unsigned int m_capacity;
};

/* 2628 */
struct _XMXDECN4
{
  $6843770DF32903625D233ED879F2E7D2 ___u0;
};

/* 2629 */
struct __cppobj CD3D11_SHADER_RESOURCE_VIEW_DESC : D3D11_SHADER_RESOURCE_VIEW_DESC
{
};

/* 2630 */
struct __cppobj ID3D11Texture3D : ID3D11Resource
{
};

/* 2631 */
struct $EEE1B8990825EB0C58819733ABDA2C4A
{
  unsigned __int32 xm : 6;
  unsigned __int32 xe : 5;
  unsigned __int32 ym : 6;
  unsigned __int32 ye : 5;
  unsigned __int32 zm : 5;
  unsigned __int32 ze : 5;
};

/* 2632 */
union $4FC5559A34726A687CC16BED180114FC
{
  $EEE1B8990825EB0C58819733ABDA2C4A __s0;
  unsigned int v;
};

/* 2633 */
struct _XMFLOAT3PK
{
  $4FC5559A34726A687CC16BED180114FC ___u0;
};

/* 2634 */
struct jqMemBaseMarker
{
  void *MemBaseRestore;
};

/* 2635 */
struct _XMUDECN4
{
  $CD165E0682C8F9729DA9385DFBEF1ADF ___u0;
};

/* 2636 */
struct _lldiv_t
{
  __int64 quot;
  __int64 rem;
};

/* 2637 */
struct _XMSHORTN2
{
  __int16 x;
  __int16 y;
};

/* 2638 */
struct __cppobj bdLeagueSubdivisionHistoryResult : bdTaskResult
{
  unsigned __int64 m_seasonID;
  unsigned __int64 m_subdivisionID;
};

/* 2639 */
struct _XMDHENN3
{
  $F3803C64C75C952D6DFB80C5E56CD3FA ___u0;
};

/* 2640 */
struct __declspec(align(4)) SessionStaticData
{
  char *sessionName;
  bool registerUsersWithVoice;
  bool isDedicated;
};

/* 2641 */
struct XSESSION_INFO
{
  bdSecurityID sessionID;
  XNADDR hostAddress;
  bdSecurityKey keyExchangeKey;
};

/* 2642 */
struct __declspec(align(8)) ClientInfo
{
  bool registered;
  bool voiceRegistered;
  unsigned __int64 xuid;
  int natType;
  netadr_t addr;
  int voiceConnectivityBits;
  int lastConnectivityTestTime[1];
  bool friends;
  int flags;
  bool muted;
  int performanceValue;
  bool privateSlot;
};

/* 2643 */
struct RegisteredUser
{
  bool active;
  unsigned __int64 xuid;
  bool privateSlot;
  int performanceValue;
};

/* 2644 */
struct SessionDynamicData
{
  bool sessionHandle;
  XSESSION_INFO sessionInfo;
  bool keysGenerated;
  bool sessionStartCalled;
  unsigned __int64 sessionNonce;
  int privateSlots;
  int publicSlots;
  int flags;
  bool qosListenEnabled;
  ClientInfo users[19];
  ControllerIndex_t sessionCreateController;
  int sessionDeleteTime;
  int actualPublicSlots;
  int voiceConnectivityBits;
  RegisteredUser internalRegisteredUsers[19];
};

/* 2645 */
struct SessionData
{
  SessionStaticData staticData;
  SessionDynamicData dyn;
};

/* 2646 */
struct MigrateData
{
  int indexBits;
  int startTime;
  MigrateMemberData memberData[18];
};

/* 2647 */
struct PartySceNpId
{
  char handle[20];
  char opt[8];
  char reserved[8];
};

/* 2648 */
union $4CC444478A5CF1CA3E666352329DBEA9
{
  int rank;
  int rankPosition;
};

/* 2649 */
union $6F592E3A475AB50E77AAA300354707EA
{
  int prestige;
  int divisionID;
  int daysLastPlayed;
};

/* 2650 */
struct PartyMember
{
  char status;
  int ackedMembers;
  int lastPacketTime;
  int lastHeartbeatTime;
  int lastPartyStateAck;
  int lastDemoHeartBeatTime;
  unsigned int challenge;
  int subpartyIndex;
  connstate_t reportedConnState;
  bool invited;
  bool headsetPresent;
  bool inLivePartyVoice;
  bool inLivePartyTalking;
  bool finishedLoadingDemo;
  bool isReady;
  bool isGuest;
  bool isSplitscreenClient;
  connectionType_e connectionType;
  int natType;
  unsigned __int64 player;
  char gamertag[32];
  ControllerIndex_t localControllerIndex;
  int playerEmblem;
  PartySceNpId npid;
  char clanAbbrev[5];
  bool clanAbbrev_IsEliteValidated;
  int codPoints;
  unsigned int affinityBits;
  platformNetAdr platformAddr;
  int availableMapPackFlags;
  bdSecurityID privatePartyId;
  $4CC444478A5CF1CA3E666352329DBEA9 ___u31;
  $6F592E3A475AB50E77AAA300354707EA ___u32;
  int deaths;
  float skillRating;
  float skillVariance;
  PartyMemberTeam teamInfo;
  int score;
  int vetoedMap;
  int downloadPercent;
  bool readyForPlayback;
  int maximumPing;
  int specialFlags;
  int clanTagFeature;
  int voiceConnectivityBits;
  unsigned __int64 leagueTeamID;
  int leagueMemberCount;
  int searchStartUTC;
  int uploadBandwidth;
  char probation;
  char recentPlaylistEntries[3];
  unsigned int serverchallenge;
  int serverChallengeDeadline;
};

/* 2651 */
struct PartyMemberProfile
{
  int updateTime;
  int sendTime;
  int ackTime;
  int acked;
  char DDL[1024];
};

/* 2652 */
struct __declspec(align(8)) PartyMemberLeagueData
{
  LeagueDataState state;
  int stateChangeTime;
  int stateUpdateTime;
  unsigned __int64 teamID;
  unsigned __int64 subdivisionID;
  int divisionID;
  int memberCount;
  char teamName[32];
  LeagueOutcomes outcomes;
};

/* 2653 */
struct __declspec(align(8)) PartyLeagueTeamData
{
  unsigned __int64 teamID;
  bool valid;
  char name[32];
};

/* 2654 */
struct __declspec(align(4)) PartyHostDetails
{
  netadr_t addr;
  XSESSION_INFO sessionInfo;
  unsigned __int64 xuid;
  int lastPacketTime;
  int lastPacketSentTime;
  int numPrivateSlots;
  int numPublicSlots;
  ClientNum_t hostNum;
  bool accepted;
  unsigned int challenge;
  bool isDedicated;
};

/* 2656 */
struct PartyStatePacket_s
{
  int sequenceNumber;
  int totalSize;
  int size;
  int offset;
};

/* 2655 */
struct PartyData_s
{
  SessionData *session;
  SessionData *presenceSession;
  MigrateData migrateData;
  PartyMember partyMembers[19];
  PartyMemberProfile partyProfiles[19];
  PartyLeagueState leagueState;
  PartyMemberLeagueData memberLeagueData[19];
  PartyLeagueTeamData leagueTeamData[9];
  SubpartyInfo subparties[19];
  int subpartyCount;
  lobbyBanSlot_t lobbyBans[16];
  int partyJoinTime;
  __declspec(align(8)) PartyHostDetails currentHost;
  PartyHostDetails potentialHost;
  PartyHostData hostData;
  partyMergeData_t mergeData;
  float qosPercent;
  int qosSuccesses;
  int qosTotal;
  int localPlayerFlags[1];
  int lastMemberUpdateTime[1];
  int memberUpdateInterval[1];
  int areWeHost;
  int joiningAnotherParty;
  int inParty;
  int party_systemActive;
  int veto;
  bool enteringStartReadyState;
  bool ready;
  int wagerTime;
  int allowedTeams;
  bool teamBased;
  unsigned __int64 demoFileId;
  int demoFileSize;
  bool demoIsUserFile;
  bool finishedLoadingDemo;
  bool retryDemoDownload;
  unsigned __int64 demoAuthorXUID;
  int partyId;
  int nextSessionSearchTime;
  int mapPackSearchFlags;
  int mapPackFlags;
  unsigned __int64 leagueTeamID;
  char leagueTeamName[32];
  int lastPartyStateTime;
  int gameStartTime;
  int countDownTimeLeft;
  int interEndTime;
  int partyTimer;
  int restartMatchmakingTimer;
  int goResumeTime;
  int hostTimeouts;
  char lobbyFlags;
  PartyData_s *partyToNotify;
  bool registeredWithArbitration;
  bool rejoining;
  char stateMsgBuf[7200];
  PartyStatePacket_s partyStatePackets[6];
  char lastEntries[8];
  int currentEntry;
  int lastQosEntry;
  bool qosDataReady;
  int lobbyBeginTime;
  bool stateParsed;
  int soundEvents;
  int hostChangelist;
  int partyStartTimeMs;
  int nextChallengeSend;
  unsigned int serverChallenge;
};

/* 2657 */
struct flameTable
{
  float flameVar_streamChunkGravityStart;
  float flameVar_streamChunkGravityEnd;
  float flameVar_streamChunkMaxSize;
  float flameVar_streamChunkStartSize;
  float flameVar_streamChunkEndSize;
  float flameVar_streamChunkStartSizeRand;
  float flameVar_streamChunkEndSizeRand;
  float flameVar_streamChunkDistScalar;
  float flameVar_streamChunkDistSwayScale;
  float flameVar_streamChunkDistSwayVelMax;
  float flameVar_streamChunkSpeed;
  float flameVar_streamChunkDecel;
  float flameVar_streamChunkVelocityAddScale;
  float flameVar_streamChunkDuration;
  float flameVar_streamChunkDurationScaleMaxVel;
  float flameVar_streamChunkDurationVelScalar;
  float flameVar_streamChunkSizeSpeedScale;
  float flameVar_streamChunkSizeAgeScale;
  float flameVar_streamChunkSpawnFireIntervalStart;
  float flameVar_streamChunkSpawnFireIntervalEnd;
  float flameVar_streamChunkSpawnFireMinLifeFrac;
  float flameVar_streamChunkSpawnFireMaxLifeFrac;
  float flameVar_streamChunkFireMinLifeFrac;
  float flameVar_streamChunkFireMinLifeFracStart;
  float flameVar_streamChunkFireMinLifeFracEnd;
  float flameVar_streamChunkDripsMinLifeFrac;
  float flameVar_streamChunkDripsMinLifeFracStart;
  float flameVar_streamChunkDripsMinLifeFracEnd;
  float flameVar_streamChunkRotationRange;
  float flameVar_streamSizeRandSinWave;
  float flameVar_streamSizeRandCosWave;
  float flameVar_streamDripsChunkInterval;
  float flameVar_streamDripsChunkMinFrac;
  float flameVar_streamDripsChunkRandFrac;
  float flameVar_streamSmokeChunkInterval;
  float flameVar_streamSmokeChunkMinFrac;
  float flameVar_streamSmokeChunkRandFrac;
  float flameVar_streamChunkCullDistSizeFrac;
  float flameVar_streamChunkCullMinLife;
  float flameVar_streamChunkCullMaxLife;
  float flameVar_streamFuelSizeStart;
  float flameVar_streamFuelSizeEnd;
  float flameVar_streamFuelLength;
  float flameVar_streamFuelNumSegments;
  float flameVar_streamFuelAnimLoopTime;
  float flameVar_streamFlameSizeStart;
  float flameVar_streamFlameSizeEnd;
  float flameVar_streamFlameLength;
  float flameVar_streamFlameNumSegments;
  float flameVar_streamFlameAnimLoopTime;
  float flameVar_streamPrimaryLightRadius;
  float flameVar_streamPrimaryLightRadiusFlutter;
  float flameVar_streamPrimaryLightR;
  float flameVar_streamPrimaryLightG;
  float flameVar_streamPrimaryLightB;
  float flameVar_streamPrimaryLightFlutterR;
  float flameVar_streamPrimaryLightFlutterG;
  float flameVar_streamPrimaryLightFlutterB;
  float flameVar_fireLife;
  float flameVar_fireLifeRand;
  float flameVar_fireSpeedScale;
  float flameVar_fireSpeedScaleRand;
  float flameVar_fireVelocityAddZ;
  float flameVar_fireVelocityAddZRand;
  float flameVar_fireVelocityAddSideways;
  float flameVar_fireGravity;
  float flameVar_fireGravityEnd;
  float flameVar_fireMaxRotVel;
  float flameVar_fireFriction;
  float flameVar_fireEndSizeAdd;
  float flameVar_fireStartSizeScale;
  float flameVar_fireEndSizeScale;
  float flameVar_fireBrightness;
  float flameVar_dripsLife;
  float flameVar_dripsLifeRand;
  float flameVar_dripsSpeedScale;
  float flameVar_dripsSpeedScaleRand;
  float flameVar_dripsVelocityAddZ;
  float flameVar_dripsVelocityAddZRand;
  float flameVar_dripsVelocityAddSideways;
  float flameVar_dripsGravity;
  float flameVar_dripsGravityEnd;
  float flameVar_dripsMaxRotVel;
  float flameVar_dripsFriction;
  float flameVar_dripsEndSizeAdd;
  float flameVar_dripsStartSizeScale;
  float flameVar_dripsEndSizeScale;
  float flameVar_dripsBrightness;
  float flameVar_smokeLife;
  float flameVar_smokeLifeRand;
  float flameVar_smokeSpeedScale;
  float flameVar_smokeVelocityAddZ;
  float flameVar_smokeGravity;
  float flameVar_smokeGravityEnd;
  float flameVar_smokeMaxRotation;
  float flameVar_smokeMaxRotVel;
  float flameVar_smokeFriction;
  float flameVar_smokeEndSizeAdd;
  float flameVar_smokeStartSizeAdd;
  float flameVar_smokeOriginSizeOfsZScale;
  float flameVar_smokeOriginOfsZ;
  float flameVar_smokeFadein;
  float flameVar_smokeFadeout;
  float flameVar_smokeMaxAlpha;
  float flameVar_smokeBrightness;
  float flameVar_smokeOriginOffset;
  float flameVar_collisionSpeedScale;
  float flameVar_collisionVolumeScale;
  const char *name;
  Material *fire;
  Material *smoke;
  Material *heat;
  Material *drips;
  Material *streamFuel;
  Material *streamFuel2;
  Material *streamFlame;
  Material *streamFlame2;
  const char *flameOffLoopSound;
  const char *flameIgniteSound;
  const char *flameOnLoopSound;
  const char *flameCooldownSound;
};

/* 2658 */
struct cStaticModelWritable
{
  unsigned __int16 nextModelInWorldSector;
};

/* 2659 */
struct cStaticModel_s
{
  cStaticModelWritable writable;
  XModel *xmodel;
  int contents;
  vec3_t origin;
  vec3_t invScaledAxis[3];
  vec3_t absmin;
  vec3_t absmax;
};

/* 2660 */
struct __declspec(align(16)) trace_t
{
  hybrid_vector normal;
  float fraction;
  int sflags;
  int cflags;
  TraceHitType hitType;
  unsigned __int16 hitId;
  unsigned __int16 modelIndex;
  unsigned __int16 partName;
  unsigned __int16 boneIndex;
  unsigned __int16 partGroup;
  bool allsolid;
  bool startsolid;
  bool walkable;
  cStaticModel_s *staticModel;
  int hitPartition;
};

/* 2661 */
struct __cppobj bdFileMetaData : bdTaskResult
{
  unsigned __int64 m_fileID;
  unsigned int m_createTime;
  unsigned int m_modifedTime;
  unsigned int m_fileSize;
  unsigned __int64 m_ownerID;
  char m_ownerName[64];
  unsigned __int16 m_fileSlot;
  char m_fileName[128];
  char m_url[384];
  unsigned __int16 m_category;
  unsigned int m_numTags;
  char m_metaData[512];
  unsigned int m_metaDataSize;
  unsigned int m_summaryFileSize;
  bdTag m_tags[60];
  unsigned int m_numCopiesMade;
  unsigned __int64 m_originID;
};

/* 2662 */
struct bdMatchMaking
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2663 */
struct __cppobj bdMatchMakingInfo : bdTaskResult
{
  bdSecurityID m_sessionID;
  char m_hostAddr[255];
  unsigned int m_hostAddrSize;
  unsigned int m_maxPlayers;
  unsigned int m_numPlayers;
  unsigned int m_gameType;
};

/* 2664 */
struct bdSessionParams
{
  bdSessionParamsVtbl *vfptr;
};

/* 2665 */
struct bdSessionParamsVtbl
{
  void *(__thiscall *__vecDelDtor)(bdSessionParams *this, unsigned int);
  void (__thiscall *serialize)(bdSessionParams *this, bdByteBuffer *);
  unsigned int (__thiscall *sizeOf)(bdSessionParams *this);
};

/* 2666 */
struct __cppobj bdPagingToken : bdTaskResultProcessor
{
  bdPagingToken::bdStatus m_status;
  bdSecurityID m_sessionID;
  unsigned int m_numResultsPerPage;
};

/* 2667 */
struct __cppobj bdPerformanceValue : bdTaskResult
{
  unsigned __int64 m_entityID;
  __int64 m_performanceValue;
};

/* 2668 */
struct $BD85036DCC0442AA317E9171D0F2179B
{
  char s_b1;
  char s_b2;
  char s_b3;
  char s_b4;
};

/* 2669 */
struct $CC608A129C88F312E26B04B0A6BA5EDC
{
  unsigned __int16 s_w1;
  unsigned __int16 s_w2;
};

/* 2670 */
union $DD6A359ED4936130A3E41EFCE8345AED
{
  $BD85036DCC0442AA317E9171D0F2179B S_un_b;
  $CC608A129C88F312E26B04B0A6BA5EDC S_un_w;
  unsigned int S_addr;
};

/* 2671 */
struct in_addr
{
  $DD6A359ED4936130A3E41EFCE8345AED S_un;
};

/* 2672 */
struct tagTYPEATTR
{
  _GUID guid;
  unsigned int lcid;
  unsigned int dwReserved;
  int memidConstructor;
  int memidDestructor;
  wchar_t *lpstrSchema;
  unsigned int cbSizeInstance;
  tagTYPEKIND typekind;
  unsigned __int16 cFuncs;
  unsigned __int16 cVars;
  unsigned __int16 cImplTypes;
  unsigned __int16 cbSizeVft;
  unsigned __int16 cbAlignment;
  unsigned __int16 wTypeFlags;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  tagTYPEDESC tdescAlias;
  tagIDLDESC idldescType;
};

/* 2673 */
struct bdMutex
{
  void *m_handle;
};

/* 2674 */
struct __declspec(align(8)) jqAtomicQueue<jqBatch,32>
{
  jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> *FreeListPtr;
  jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> _FreeList;
  jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> Head;
  jqAtomicQueuePtr<jqAtomicQueue<jqBatch,32>::NodeType> Tail;
  jqAtomicQueue<jqBatch,32> *ThisPtr;
};

/* 2675 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_4
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[1];
  _BYTE gap4[1];
};

/* 2676 */
struct __declspec(align(2)) ContentPackMetaData
{
  int contentPack;
  char filename[256];
  char drivename[16];
  unsigned int licenseBits;
  bool mounted;
  bool isAuthorizedToUse;
  bool controllers[1];
};

/* 2677 */
struct bdSemaphore
{
  void *m_handle;
};

/* 2678 */
struct bdFeatureBan
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2679 */
struct __declspec(align(4)) ddlBufferHeader_t
{
  unsigned int checksum;
  int version;
  char flags;
  unsigned __int16 codeVersion;
  unsigned __int16 magicMarker;
  char reservedBuffer[31];
};

/* 2680 */
struct Smp_CriticalSectionBlock
{
  CriticalSection mCS;
};

/* 2681 */
struct __declspec(align(4)) RefString
{
  volatile int data;
  char str[1];
};

/* 2682 */
struct __cppobj __declspec(align(8)) bdFacebookFriend : bdTaskResult
{
  unsigned __int64 m_accountID;
  char m_accountName[128];
  unsigned __int64 m_userID;
  char m_userName[64];
  char m_platformState[64];
  unsigned int m_platformStateLength;
};

/* 2683 */
struct bdBackoffTimer
{
  unsigned int m_timestamp;
  unsigned int m_failures;
  unsigned int m_sizeTimeouts;
  char m_timeouts[16];
};

/* 2684 */
struct __cppobj CD3D11_DEPTH_STENCIL_VIEW_DESC : D3D11_DEPTH_STENCIL_VIEW_DESC
{
};

/* 2685 */
union $A36A0EC2E32F5264FDCA971DADF2C542
{
  float f[4];
  __m128 v;
};

/* 2686 */
struct XMVECTORF32
{
  $A36A0EC2E32F5264FDCA971DADF2C542 ___u0;
};

/* 2687 */
struct tlAtomicMutexLocker
{
  tlAtomicMutex *Mutex;
};

/* 2688 */
struct SmpSpServer_CriticalSectionBlock
{
  CriticalSection mCS;
};

/* 2689 */
struct __cppobj CD3D11_TEXTURE3D_DESC : D3D11_TEXTURE3D_DESC
{
};

/* 2690 */
struct bdProfiles
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2691 */
struct bdMessaging
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2692 */
struct bdStats
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2693 */
struct bdFriends
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2694 */
struct bdTeams
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2695 */
struct bdStorage
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2696 */
struct bdContentUnlock
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2697 */
struct bdKeyArchive
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2698 */
struct bdGroup
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2704 */
struct __cppobj bdSummaryMetaHandler : bdFileMetaData
{
};

/* 2705 */
struct __cppobj bdHTTPWrapperBase : bdRunnable
{
  bool m_threadExiting;
  bdMutex m_threadMutex;
  bdSemaphore *m_httpSema;
  bdThread *m_thread;
  bdHTTPWrapperBase::bdStatus m_status;
  bdHTTPWrapperBase::bdOperation m_operation;
};

/* 2707 */
struct __cppobj __declspec(align(8)) bdHTTPWrapper : bdHTTPWrapperBase
{
  void *m_curl;
  curl_slist *m_headerList;
  unsigned int m_bytesTransfered;
  bdDownloadInterceptor *m_downloadHandler;
  char *m_downloadBuffer;
  unsigned int m_downloadBufferSize;
  bdUploadInterceptor *m_uploadHandler;
  const char *m_uploadBuffer;
  unsigned int m_uploadSize;
  bool m_abortOperation;
  bool m_customVerification;
  float m_dataRate;
  bdStopwatch m_stopwatch;
  char *m_caPath;
  char m_errorBuffer[1024];
  int m_httpErrorCode;
  bool m_verboseOutput;
  bool m_progressMeter;
};

/* 2708 */
struct __cppobj bdHashMD5 : bdHash
{
};

/* 2699 */
struct bdContentStreamingBase
{
  bdContentStreamingBaseVtbl *vfptr;
  __declspec(align(8)) unsigned int m_operation;
  bdContentStreamingBase::bdStatus m_state;
  bdUploadInterceptor *m_uploadHandler;
  bdFileMetaData m_taskData;
  const void *m_uploadData;
  bdFileID *m_uploadFileID;
  bdURL m_URLs[3];
  const void *m_thumbData;
  unsigned int m_thumbDataSize;
  unsigned __int16 m_httpSite;
  bool m_sendChecksum;
  char m_checksum[33];
  char m_clientLocale[16];
  unsigned __int64 m_copySourceFileID;
  bool m_wasCopyingPooledFile;
  bdDownloadInterceptor *m_downloadHandler;
  bdFileMetaData *m_downloadMetaData;
  void *m_downloadData;
  unsigned int m_downloadDataSize;
  unsigned int m_startByte;
  unsigned int m_endByte;
  bdPreCopyResult m_preCopyResults[3];
  bool m_uploadSummary;
  bdSummaryMetaHandler m_summaryMeta;
  bdReference<bdRemoteTask> m_overallTask;
  bdReference<bdRemoteTask> m_remoteTask;
  bdHTTPWrapper m_http;
  bdHashMD5 m_md5Hash;
  bdURL *m_testURLs;
  unsigned int m_testAddressCount;
  bool m_useTestAddresses;
  bool m_finalizeOnComplete;
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2700 */
struct bdContentStreamingBaseVtbl
{
  void *(__thiscall *__vecDelDtor)(bdContentStreamingBase *this, unsigned int);
  void (__thiscall *handlePreHTTPComplete)(bdContentStreamingBase *this);
  bdReference<bdRemoteTask> *(__thiscall *_postUploadFile)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
  bdReference<bdRemoteTask> *(__thiscall *_postUploadSummary)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
  bdReference<bdRemoteTask> *(__thiscall *_postCopy)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
  unsigned int (__thiscall *getMaxMetaDataSize)(bdContentStreamingBase *this);
};

/* 2701 */
struct bdUploadInterceptor
{
  bdUploadInterceptorVtbl *vfptr;
};

/* 2702 */
struct bdUploadInterceptorVtbl
{
  void *(__thiscall *__vecDelDtor)(bdUploadInterceptor *this, unsigned int);
  unsigned int (__thiscall *handleUpload)(bdUploadInterceptor *this, void *, unsigned int, unsigned int);
};

/* 2703 */
struct __cppobj bdFileID : bdTaskResult
{
  unsigned __int64 m_fileID;
};

/* 2706 */
struct curl_slist
{
  char *data;
  curl_slist *next;
};

/* 2709 */
struct __cppobj bdContentStreaming : bdContentStreamingBase
{
};

/* 2710 */
struct __cppobj __declspec(align(8)) bdPooledStorage : bdContentStreamingBase
{
  unsigned __int64 m_pooledStoragefileID;
  bool m_fileIDReady;
};

/* 2711 */
struct bdTags
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2712 */
struct bdVoteRank
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2713 */
struct bdYouTube
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2714 */
struct bdTwitter
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2715 */
struct bdFacebook
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2716 */
struct bdLinkCode
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2717 */
struct bdDML
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2719 */
struct __cppobj bdUCDPublicKeyInfo : bdTaskResult
{
  bdUCD *m_requestingUCDService;
  char m_publicKey[140];
};

/* 2718 */
struct bdUCD
{
  bdRemoteTaskManager *m_remoteTaskManager;
  bdRSAKey m_rsaKey;
  bool m_keySet;
  bdUCDPublicKeyInfo m_initPublicKeyResult;
};

/* 2720 */
struct bdUserGroups
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2721 */
struct bdRichPresenceService
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2722 */
struct bdMarketplace
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2723 */
struct bdCommerce
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2724 */
struct bdSubscription
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2725 */
struct bdTencent
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2726 */
struct bdLeague
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 2727 */
struct bdLobbyEventHandler
{
  bdLobbyEventHandlerVtbl *vfptr;
};

/* 2728 */
const struct __cppobj __declspec(align(8)) bdChannelMember : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
  unsigned int m_subscribedTimestamp;
};

/* 2729 */
const struct __cppobj __declspec(align(8)) bdTencentAASRecord : bdTaskResult
{
  unsigned __int64 m_userID;
  bdTencentAASRecord::bdRecordStatus m_ageStatus;
  unsigned int m_gameplaySeconds;
  unsigned int m_recordAge;
};

/* 2730 */
const struct __cppobj bdYouTubeRegistrationResult : bdTaskResult
{
  bdLobbyErrorCode m_result;
};

/* 2731 */
struct bdLobbyEventHandlerVtbl
{
  void *(__thiscall *__vecDelDtor)(bdLobbyEventHandler *this, unsigned int);
  _BYTE gap4[12];
  void (__thiscall *onChatChannelUpdate)(bdLobbyEventHandler *this, bdChannelInfo *, bdChannelMember *, char);
  void (__thiscall *onChatChannelUpdate)(bdLobbyEventHandler *this, unsigned __int64, unsigned __int64, char *, char);
  void (__thiscall *onChatChannelMessage)(bdLobbyEventHandler *this, unsigned __int64, unsigned __int64, char *, void *, unsigned int);
  void (__thiscall *onChatChannelUserPromoted)(bdLobbyEventHandler *this, bdChannelInfo *, bdChannelMember *, bdChannelMember *);
  void (__thiscall *onChatChannelUserKicked)(bdLobbyEventHandler *this, bdChannelInfo *, bdChannelMember *, bdChannelMember *, unsigned int, bool);
  void (__thiscall *onInstantMessage)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int, unsigned __int64);
  void (__thiscall *onSessionInvite)(bdLobbyEventHandler *this, bdSessionInvite *);
  void (__thiscall *onNotifyLeave)(bdLobbyEventHandler *this, unsigned __int64, bdSessionID);
  void (__thiscall *onFriendshipProposal)(bdLobbyEventHandler *this);
  void (__thiscall *onTeamProposal)(bdLobbyEventHandler *this);
  void (__thiscall *onNewNotification)(bdLobbyEventHandler *this);
  void (__thiscall *onNewMail)(bdLobbyEventHandler *this);
  void (__thiscall *onMultipleLogon)(bdLobbyEventHandler *this, unsigned __int64);
  void (__thiscall *onChallengesReceived)(bdLobbyEventHandler *this, unsigned __int64, bdReference<bdAntiCheatChallenges>);
  void (__thiscall *onPlayerBanned)(bdLobbyEventHandler *this, unsigned __int64, unsigned int);
  void (__thiscall *onNotWhiteListed)(bdLobbyEventHandler *this, unsigned __int64);
  void (__thiscall *onGlobalInstantMessage)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int);
  void (__thiscall *onFeatureBan)(bdLobbyEventHandler *this, bdFeatureBanInfo *);
  void (__thiscall *onGroupMessagingMessage)(bdLobbyEventHandler *this, unsigned __int64, const char *, void *, unsigned int);
  void (__thiscall *onBroadcastMessage)(bdLobbyEventHandler *this, unsigned __int64, const char *, void *, unsigned int);
  void (__thiscall *onTencentAASRecordReceived)(bdLobbyEventHandler *this, bdTencentAASRecord *);
  void (__thiscall *onYouTubeRegistration)(bdLobbyEventHandler *this, bdYouTubeRegistrationResult *);
};

/* 2732 */
struct __cppobj __declspec(align(8)) bdLobbyService : bdLobbyConnectionListener
{
  bdRemoteTaskManager *m_taskManager;
  bdProfiles *m_profiles;
  bdMessaging *m_messaging;
  bdMatchMaking *m_matchMaking;
  bdStats *m_statsManager;
  bdFriends *m_friendsManager;
  bdTeams *m_teamsManager;
  bdStorage *m_storageManager;
  bdContentUnlock *m_contentUnlockManager;
  bdTitleUtilities *m_titleUtilitiesManager;
  bdEventLog *m_eventLogManager;
  bdKeyArchive *m_keyArchive;
  bdCounter *m_counter;
  bdGroup *m_group;
  bdContentStreaming *m_contentStreamingManager;
  bdPooledStorage *m_pooledStorageManager;
  bdTags *m_tags;
  bdVoteRank *m_voteRankManager;
  bdTwitch *m_twitch;
  bdYouTube *m_youTube;
  bdTwitter *m_twitter;
  bdFacebook *m_facebook;
  bdLinkCode *m_linkCode;
  bdAntiCheat *m_antiCheat;
  bdDML *m_DML;
  bdUCD *m_UCD;
  bdUserGroups *m_userGroups;
  bdRichPresenceService *m_richPresence;
  bdMarketplace *m_marketplace;
  bdCommerce *m_commerce;
  bdSubscription *m_subscription;
  bdFeatureBan *m_featureBan;
  bdTencent *m_tencent;
  bdLeague *m_league;
  bdGetHostByName m_LSGLookup;
  char *m_LSGAddress;
  unsigned __int16 m_LSGPort;
  bdAddr m_resolvedLSGAddress;
  bool m_isResolved;
  unsigned int m_titleID;
  bdLobbyEventHandler *m_eventHandler;
  bdReference<bdLobbyConnection> m_lobbyConnection;
  bool m_lobbyConnectionEstablished;
  bdAuthInfo m_authInfo;
  bool m_encryptedConnection;
  unsigned int m_errorCode;
};

/* 2733 */
struct outPacket_t
{
  int p_cmdNumber;
  int p_serverTime;
  int p_realtime;
};

/* 2734 */
struct bdNATTraversalPacket
{
  char m_type;
  unsigned __int16 m_protocolVersion;
  char m_hmac[10];
  unsigned int m_ident;
  bdAddr m_addrSrc;
  bdAddr m_addrDest;
};

/* 2735 */
struct bdNATTravClient::CachedTraversal
{
  unsigned int m_remoteAddressHash;
  bdAddr m_realAddress;
};

/* 2736 */
struct SmpScriptString_CriticalSectionBlock
{
  CriticalSection mCS;
};

/* 2737 */
struct _XMUBYTE4
{
  $307E4550B204E85023DA181BAF74758D ___u0;
};

/* 2738 */
struct WeaponCamoSet
{
  GfxImage *solidCamoImage;
  GfxImage *patternCamoImage;
  vec2_t patternOffset;
  float patternScale;
};

/* 2739 */
struct WeaponCamo
{
  const char *name;
  GfxImage *solidBaseImage;
  GfxImage *patternBaseImage;
  WeaponCamoSet *camoSets;
  unsigned int numCamoSets;
  WeaponCamoMaterialSet *camoMaterials;
  unsigned int numCamoMaterials;
};

/* 2740 */
struct WeaponDef
{
  const char *szOverlayName;
  XModel **gunXModel;
  XModel *handXModel;
  const char *szModeName;
  unsigned __int16 *notetrackSoundMapKeys;
  unsigned __int16 *notetrackSoundMapValues;
  int playerAnimType;
  weapType_t weapType;
  weapClass_t weapClass;
  PenetrateType penetrateType;
  ImpactType impactType;
  weapInventoryType_t inventoryType;
  weapFireType_t fireType;
  weapClipType_t clipType;
  barrelType_t barrelType;
  int itemIndex;
  const char *parentWeaponName;
  int iJamFireTime;
  int overheatWeapon;
  float overheatRate;
  float cooldownRate;
  float overheatEndVal;
  bool coolWhileFiring;
  bool fuelTankWeapon;
  int iTankLifeTime;
  OffhandClass offhandClass;
  OffhandSlot offhandSlot;
  weapStance_t stance;
  FxEffectDef *viewFlashEffect;
  FxEffectDef *worldFlashEffect;
  FxEffectDef *barrelCooldownEffect;
  int barrelCooldownMinCount;
  vec3_t vViewFlashOffset;
  vec3_t vWorldFlashOffset;
  const char *pickupSound;
  const char *pickupSoundPlayer;
  const char *ammoPickupSound;
  const char *ammoPickupSoundPlayer;
  const char *projectileSound;
  const char *pullbackSound;
  const char *pullbackSoundPlayer;
  const char *fireSound;
  const char *fireSoundPlayer;
  const char *fireLoopSound;
  const char *fireLoopSoundPlayer;
  const char *fireLoopEndSound;
  const char *fireLoopEndSoundPlayer;
  const char *fireStartSound;
  const char *fireStopSound;
  const char *fireKillcamSound;
  const char *fireStartSoundPlayer;
  const char *fireStopSoundPlayer;
  const char *fireKillcamSoundPlayer;
  const char *fireLastSound;
  const char *fireLastSoundPlayer;
  const char *emptyFireSound;
  const char *emptyFireSoundPlayer;
  const char *crackSound;
  const char *whizbySound;
  const char *meleeSwipeSound;
  const char *meleeSwipeSoundPlayer;
  const char *meleeHitSound;
  const char *meleeMissSound;
  const char *rechamberSound;
  const char *rechamberSoundPlayer;
  const char *reloadSound;
  const char *reloadSoundPlayer;
  const char *reloadEmptySound;
  const char *reloadEmptySoundPlayer;
  const char *reloadStartSound;
  const char *reloadStartSoundPlayer;
  const char *reloadEndSound;
  const char *reloadEndSoundPlayer;
  const char *rotateLoopSound;
  const char *rotateLoopSoundPlayer;
  const char *rotateStopSound;
  const char *rotateStopSoundPlayer;
  const char *deploySound;
  const char *deploySoundPlayer;
  const char *finishDeploySound;
  const char *finishDeploySoundPlayer;
  const char *breakdownSound;
  const char *breakdownSoundPlayer;
  const char *finishBreakdownSound;
  const char *finishBreakdownSoundPlayer;
  const char *detonateSound;
  const char *detonateSoundPlayer;
  const char *nightVisionWearSound;
  const char *nightVisionWearSoundPlayer;
  const char *nightVisionRemoveSound;
  const char *nightVisionRemoveSoundPlayer;
  const char *altSwitchSound;
  const char *altSwitchSoundPlayer;
  const char *raiseSound;
  const char *raiseSoundPlayer;
  const char *firstRaiseSound;
  const char *firstRaiseSoundPlayer;
  const char *adsRaiseSoundPlayer;
  const char *adsLowerSoundPlayer;
  const char *putawaySound;
  const char *putawaySoundPlayer;
  const char *overheatSound;
  const char *overheatSoundPlayer;
  const char *adsZoomSound;
  const char *shellCasing;
  const char *shellCasingPlayer;
  const char **bounceSound;
  const char *standMountedWeapdef;
  const char *crouchMountedWeapdef;
  const char *proneMountedWeapdef;
  int standMountedIndex;
  int crouchMountedIndex;
  int proneMountedIndex;
  FxEffectDef *viewShellEjectEffect;
  FxEffectDef *worldShellEjectEffect;
  FxEffectDef *viewLastShotEjectEffect;
  FxEffectDef *worldLastShotEjectEffect;
  vec3_t vViewShellEjectOffset;
  vec3_t vWorldShellEjectOffset;
  vec3_t vViewShellEjectRotation;
  vec3_t vWorldShellEjectRotation;
  Material *reticleCenter;
  Material *reticleSide;
  int iReticleCenterSize;
  int iReticleSideSize;
  int iReticleMinOfs;
  activeReticleType_t activeReticleType;
  vec3_t vStandMove;
  vec3_t vStandRot;
  vec3_t vDuckedOfs;
  vec3_t vDuckedMove;
  vec3_t vDuckedSprintOfs;
  vec3_t vDuckedSprintRot;
  vec2_t vDuckedSprintBob;
  float fDuckedSprintCycleScale;
  vec3_t vSprintOfs;
  vec3_t vSprintRot;
  vec2_t vSprintBob;
  float fSprintCycleScale;
  vec3_t vLowReadyOfs;
  vec3_t vLowReadyRot;
  vec3_t vRideOfs;
  vec3_t vRideRot;
  vec3_t vDtpOfs;
  vec3_t vDtpRot;
  vec2_t vDtpBob;
  float fDtpCycleScale;
  vec3_t vMantleOfs;
  vec3_t vMantleRot;
  vec3_t vSlideOfs;
  vec3_t vSlideRot;
  vec3_t vDuckedRot;
  vec3_t vProneOfs;
  vec3_t vProneMove;
  vec3_t vProneRot;
  vec3_t vStrafeMove;
  vec3_t vStrafeRot;
  float fPosMoveRate;
  float fPosProneMoveRate;
  float fStandMoveMinSpeed;
  float fDuckedMoveMinSpeed;
  float fProneMoveMinSpeed;
  float fPosRotRate;
  float fPosProneRotRate;
  float fStandRotMinSpeed;
  float fDuckedRotMinSpeed;
  float fProneRotMinSpeed;
  XModel **worldModel;
  XModel *worldClipModel;
  XModel *rocketModel;
  XModel *mountedModel;
  XModel *additionalMeleeModel;
  Material *fireTypeIcon;
  Material *hudIcon;
  weaponIconRatioType_t hudIconRatio;
  Material *indicatorIcon;
  weaponIconRatioType_t indicatorIconRatio;
  Material *ammoCounterIcon;
  weaponIconRatioType_t ammoCounterIconRatio;
  ammoCounterClipType_t ammoCounterClip;
  int iStartAmmo;
  int iMaxAmmo;
  int shotCount;
  const char *szSharedAmmoCapName;
  int iSharedAmmoCapIndex;
  int iSharedAmmoCap;
  bool unlimitedAmmo;
  bool ammoCountClipRelative;
  int damage[6];
  float damageRange[6];
  int minPlayerDamage;
  float damageDuration;
  float damageInterval;
  int playerDamage;
  int iMeleeDamage;
  int iDamageType;
  unsigned __int16 explosionTag;
  int iFireDelay;
  int iMeleeDelay;
  int meleeChargeDelay;
  int iDetonateDelay;
  int iSpinUpTime;
  int iSpinDownTime;
  float spinRate;
  const char *spinLoopSound;
  const char *spinLoopSoundPlayer;
  const char *startSpinSound;
  const char *startSpinSoundPlayer;
  const char *stopSpinSound;
  const char *stopSpinSoundPlayer;
  bool applySpinPitch;
  int iFireTime;
  int iLastFireTime;
  int iRechamberTime;
  int iRechamberBoltTime;
  int iHoldFireTime;
  int iDetonateTime;
  int iMeleeTime;
  int iBurstDelayTime;
  int meleeChargeTime;
  int iReloadTimeRight;
  int iReloadTimeLeft;
  int reloadShowRocketTime;
  int iReloadEmptyTimeLeft;
  int iReloadAddTime;
  int iReloadEmptyAddTime;
  int iReloadQuickAddTime;
  int iReloadQuickEmptyAddTime;
  int iReloadStartTime;
  int iReloadStartAddTime;
  int iReloadEndTime;
  int iDropTime;
  int iRaiseTime;
  int iAltDropTime;
  int quickDropTime;
  int quickRaiseTime;
  int iFirstRaiseTime;
  int iEmptyRaiseTime;
  int iEmptyDropTime;
  int sprintInTime;
  int sprintLoopTime;
  int sprintOutTime;
  int lowReadyInTime;
  int lowReadyLoopTime;
  int lowReadyOutTime;
  int contFireInTime;
  int contFireLoopTime;
  int contFireOutTime;
  int dtpInTime;
  int dtpLoopTime;
  int dtpOutTime;
  int crawlInTime;
  int crawlForwardTime;
  int crawlBackTime;
  int crawlRightTime;
  int crawlLeftTime;
  int crawlOutFireTime;
  int crawlOutTime;
  int slideInTime;
  int deployTime;
  int breakdownTime;
  int iFlourishTime;
  int nightVisionWearTime;
  int nightVisionWearTimeFadeOutEnd;
  int nightVisionWearTimePowerUp;
  int nightVisionRemoveTime;
  int nightVisionRemoveTimePowerDown;
  int nightVisionRemoveTimeFadeInStart;
  int fuseTime;
  int aiFuseTime;
  int lockOnRadius;
  int lockOnSpeed;
  bool requireLockonToFire;
  bool noAdsWhenMagEmpty;
  bool avoidDropCleanup;
  unsigned int stackFire;
  float stackFireSpread;
  float stackFireAccuracyDecay;
  const char *stackSound;
  float autoAimRange;
  float aimAssistRange;
  bool mountableWeapon;
  float aimPadding;
  float enemyCrosshairRange;
  bool crosshairColorChange;
  float moveSpeedScale;
  float adsMoveSpeedScale;
  float sprintDurationScale;
  weapOverlayReticle_t overlayReticle;
  WeapOverlayInteface_t overlayInterface;
  float overlayWidth;
  float overlayHeight;
  float fAdsBobFactor;
  float fAdsViewBobMult;
  bool bHoldBreathToSteady;
  float fHipSpreadStandMin;
  float fHipSpreadDuckedMin;
  float fHipSpreadProneMin;
  float hipSpreadStandMax;
  float hipSpreadDuckedMax;
  float hipSpreadProneMax;
  float fHipSpreadDecayRate;
  float fHipSpreadFireAdd;
  float fHipSpreadTurnAdd;
  float fHipSpreadMoveAdd;
  float fHipSpreadDuckedDecay;
  float fHipSpreadProneDecay;
  float fHipReticleSidePos;
  float fAdsIdleAmount;
  float fHipIdleAmount;
  float adsIdleSpeed;
  float hipIdleSpeed;
  float fIdleCrouchFactor;
  float fIdleProneFactor;
  float fGunMaxPitch;
  float fGunMaxYaw;
  float swayMaxAngle;
  float swayLerpSpeed;
  float swayPitchScale;
  float swayYawScale;
  float swayHorizScale;
  float swayVertScale;
  float swayShellShockScale;
  float adsSwayMaxAngle;
  float adsSwayLerpSpeed;
  float adsSwayPitchScale;
  float adsSwayYawScale;
  bool sharedAmmo;
  bool bRifleBullet;
  bool armorPiercing;
  bool bAirburstWeapon;
  bool bBoltAction;
  bool bUseAltTagFlash;
  bool bUseAntiLagRewind;
  bool bIsCarriedKillstreakWeapon;
  bool aimDownSight;
  bool bRechamberWhileAds;
  bool bReloadWhileAds;
  float adsViewErrorMin;
  float adsViewErrorMax;
  bool bCookOffHold;
  bool bClipOnly;
  bool bCanUseInVehicle;
  bool bNoDropsOrRaises;
  bool adsFireOnly;
  bool cancelAutoHolsterWhenEmpty;
  bool suppressAmmoReserveDisplay;
  bool laserSight;
  bool laserSightDuringNightvision;
  bool bHideThirdPerson;
  bool bHasBayonet;
  bool bDualWield;
  bool bExplodeOnGround;
  bool bThrowBack;
  bool bRetrievable;
  bool bDieOnRespawn;
  bool bNoThirdPersonDropsOrRaises;
  bool bContinuousFire;
  bool bNoPing;
  bool bForceBounce;
  bool bUseDroppedModelAsStowed;
  bool bNoQuickDropWhenEmpty;
  bool bKeepCrosshairWhenADS;
  bool bUseOnlyAltWeaoponHideTagsInAltMode;
  bool bAltWeaponAdsOnly;
  bool bAltWeaponDisableSwitching;
  Material *killIcon;
  weaponIconRatioType_t killIconRatio;
  bool flipKillIcon;
  bool bNoPartialReload;
  bool bSegmentedReload;
  bool bNoADSAutoReload;
  int iReloadAmmoAdd;
  int iReloadStartAdd;
  const char *szSpawnedGrenadeWeaponName;
  const char *szDualWieldWeaponName;
  unsigned int dualWieldWeaponIndex;
  int iDropAmmoMin;
  int iDropAmmoMax;
  int iDropClipAmmoMin;
  int iDropClipAmmoMax;
  int iShotsBeforeRechamber;
  bool blocksProne;
  bool bShowIndicator;
  int isRollingGrenade;
  int useBallisticPrediction;
  int isValuable;
  int isTacticalInsertion;
  bool isReviveWeapon;
  bool bUseRigidBodyOnVehicle;
  int iExplosionRadius;
  int iExplosionRadiusMin;
  int iIndicatorRadius;
  int iExplosionInnerDamage;
  int iExplosionOuterDamage;
  float damageConeAngle;
  int iProjectileSpeed;
  int iProjectileSpeedUp;
  int iProjectileSpeedRelativeUp;
  int iProjectileSpeedForward;
  float fProjectileTakeParentVelocity;
  int iProjectileActivateDist;
  float projLifetime;
  float timeToAccelerate;
  float projectileCurvature;
  XModel *projectileModel;
  weapProjExposion_t projExplosion;
  FxEffectDef *projExplosionEffect;
  bool projExplosionEffectForceNormalUp;
  FxEffectDef *projExplosionEffect2;
  bool projExplosionEffect2ForceNormalUp;
  FxEffectDef *projExplosionEffect3;
  bool projExplosionEffect3ForceNormalUp;
  FxEffectDef *projExplosionEffect4;
  bool projExplosionEffect4ForceNormalUp;
  FxEffectDef *projExplosionEffect5;
  bool projExplosionEffect5ForceNormalUp;
  FxEffectDef *projDudEffect;
  const char *projExplosionSound;
  const char *projDudSound;
  const char *mortarShellSound;
  const char *tankShellSound;
  bool bProjImpactExplode;
  bool bProjSentientImpactExplode;
  bool bProjExplodeWhenStationary;
  bool bBulletImpactExplode;
  WeapStickinessType stickiness;
  WeapRotateType rotateType;
  bool plantable;
  bool hasDetonator;
  bool timedDetonation;
  bool bNoCrumpleMissile;
  bool rotate;
  bool bKeepRolling;
  bool holdButtonToThrow;
  bool offhandHoldIsCancelable;
  bool freezeMovementWhenFiring;
  float lowAmmoWarningThreshold;
  bool bDisallowAtMatchStart;
  float meleeChargeRange;
  bool bUseAsMelee;
  bool isCameraSensor;
  bool isAcousticSensor;
  bool isLaserSensor;
  bool isHoldUseGrenade;
  float *parallelBounce;
  float *perpendicularBounce;
  FxEffectDef *projTrailEffect;
  vec3_t vProjectileColor;
  guidedMissileType_t guidedMissileType;
  float maxSteeringAccel;
  int projIgnitionDelay;
  FxEffectDef *projIgnitionEffect;
  const char *projIgnitionSound;
  float fAdsAimPitch;
  float fAdsCrosshairInFrac;
  float fAdsCrosshairOutFrac;
  int adsGunKickReducedKickBullets;
  float adsGunKickReducedKickPercent;
  float fAdsGunKickPitchMin;
  float fAdsGunKickPitchMax;
  float fAdsGunKickYawMin;
  float fAdsGunKickYawMax;
  float fAdsGunKickAccel;
  float fAdsGunKickSpeedMax;
  float fAdsGunKickSpeedDecay;
  float fAdsGunKickStaticDecay;
  float fAdsViewKickPitchMin;
  float fAdsViewKickPitchMax;
  float fAdsViewKickMinMagnitude;
  float fAdsViewKickYawMin;
  float fAdsViewKickYawMax;
  float fAdsRecoilReductionRate;
  float fAdsRecoilReductionLimit;
  float fAdsRecoilReturnRate;
  float fAdsViewScatterMin;
  float fAdsViewScatterMax;
  float fAdsSpread;
  int hipGunKickReducedKickBullets;
  float hipGunKickReducedKickPercent;
  float fHipGunKickPitchMin;
  float fHipGunKickPitchMax;
  float fHipGunKickYawMin;
  float fHipGunKickYawMax;
  float fHipGunKickAccel;
  float fHipGunKickSpeedMax;
  float fHipGunKickSpeedDecay;
  float fHipGunKickStaticDecay;
  float fHipViewKickPitchMin;
  float fHipViewKickPitchMax;
  float fHipViewKickMinMagnitude;
  float fHipViewKickYawMin;
  float fHipViewKickYawMax;
  float fHipViewScatterMin;
  float fHipViewScatterMax;
  float fAdsViewKickCenterDuckedScale;
  float fAdsViewKickCenterProneScale;
  float fAntiQuickScopeTime;
  float fAntiQuickScopeScale;
  float fAntiQuickScopeSpreadMultiplier;
  float fAntiQuickScopeSpreadMax;
  float fAntiQuickScopeSwayFactor;
  float fightDist;
  float maxDist;
  const char *accuracyGraphName[2];
  vec2_t *accuracyGraphKnots[2];
  vec2_t *originalAccuracyGraphKnots[2];
  int accuracyGraphKnotCount[2];
  int originalAccuracyGraphKnotCount[2];
  int iPositionReloadTransTime;
  float leftArc;
  float rightArc;
  float topArc;
  float bottomArc;
  float accuracy;
  float aiSpread;
  float playerSpread;
  float minTurnSpeed[2];
  float maxTurnSpeed[2];
  float pitchConvergenceTime;
  float yawConvergenceTime;
  float suppressTime;
  float maxRange;
  float fAnimHorRotateInc;
  float fPlayerPositionDist;
  const char *szUseHintString;
  const char *dropHintString;
  int iUseHintStringIndex;
  int dropHintStringIndex;
  float horizViewJitter;
  float vertViewJitter;
  float cameraShakeScale;
  int cameraShakeDuration;
  int cameraShakeRadius;
  float explosionCameraShakeScale;
  int explosionCameraShakeDuration;
  int explosionCameraShakeRadius;
  const char *szScript;
  float destabilizationRateTime;
  float destabilizationCurvatureMax;
  int destabilizeDistance;
  float *locationDamageMultipliers;
  const char *fireRumble;
  const char *meleeImpactRumble;
  const char *reloadRumble;
  const char *explosionRumble;
  TracerDef *tracerType;
  TracerDef *enemyTracerType;
  float adsDofStart;
  float adsDofEnd;
  float hipDofStart;
  float hipDofEnd;
  float scanSpeed;
  float scanAccel;
  int scanPauseTime;
  const char *flameTableFirstPerson;
  const char *flameTableThirdPerson;
  flameTable *flameTableFirstPersonPtr;
  flameTable *flameTableThirdPersonPtr;
  FxEffectDef *tagFx_preparationEffect;
  FxEffectDef *tagFlash_preparationEffect;
  bool doGibbing;
  float maxGibDistance;
  float altScopeADSTransInTime;
  float altScopeADSTransOutTime;
  int iIntroFireTime;
  int iIntroFireLength;
  FxEffectDef *meleeSwipeEffect;
  FxEffectDef *meleeImpactEffect;
  FxEffectDef *meleeImpactNoBloodEffect;
  const char *throwBackType;
  WeaponCamo *weaponCamo;
  float customFloat0;
  float customFloat1;
  float customFloat2;
  int customBool0;
  int customBool1;
  int customBool2;
};

/* 2741 */
struct WeaponAttachmentUnique
{
  const char *szInternalName;
  eAttachment attachmentType;
  int siblingLink;
  int childLink;
  int combinedAttachmentTypeMask;
  const char *szAltWeaponName;
  unsigned int altWeaponIndex;
  const char *szDualWieldWeaponName;
  unsigned int dualWieldWeaponIndex;
  unsigned __int16 *hideTags;
  XModel *viewModel;
  XModel *viewModelAdditional;
  XModel *viewModelADS;
  XModel *worldModel;
  XModel *worldModelAdditional;
  const char *viewModelTag;
  const char *worldModelTag;
  vec3_t viewModelOffsets;
  vec3_t worldModelOffsets;
  vec3_t viewModelRotations;
  vec3_t worldModelRotations;
  vec3_t viewModelAddOffsets;
  vec3_t worldModelAddOffsets;
  vec3_t viewModelAddRotations;
  vec3_t worldModelAddRotations;
  WeaponCamo *weaponCamo;
  bool disableBaseWeaponAttachment;
  bool disableBaseWeaponClip;
  bool overrideBaseWeaponAttachmentOffsets;
  vec3_t viewModelOffsetBaseAttachment;
  vec3_t worldModelOffsetBaseAttachment;
  Material *overlayMaterial;
  Material *overlayMaterialLowRes;
  weapOverlayReticle_t overlayReticle;
  int iFirstRaiseTime;
  int iAltRaiseTime;
  int iAltDropTime;
  int iReloadAmmoAdd;
  int iReloadStartAdd;
  bool bSegmentedReload;
  const char **szXAnims;
  int animationOverrides[3];
  float *locationDamageMultipliers;
  int soundOverrides;
  const char *fireSound;
  const char *fireSoundPlayer;
  const char *fireLoopSound;
  const char *fireLoopSoundPlayer;
  const char *fireLoopEndSound;
  const char *fireLoopEndSoundPlayer;
  const char *fireStartSound;
  const char *fireStopSound;
  const char *fireStartSoundPlayer;
  const char *fireStopSoundPlayer;
  const char *fireLastSound;
  const char *fireLastSoundPlayer;
  const char *fireKillcamSound;
  const char *fireKillcamSoundPlayer;
  int effectOverrides;
  FxEffectDef *viewFlashEffect;
  FxEffectDef *worldFlashEffect;
  TracerDef *tracerType;
  TracerDef *enemyTracerType;
  float adsDofStart;
  float adsDofEnd;
  int iAmmoIndex;
  int iClipIndex;
  bool bOverrideLeftHandIK;
  bool bOverrideLeftHandProneIK;
  vec3_t ikLeftHandOffset;
  vec3_t ikLeftHandRotation;
  vec3_t ikLeftHandProneOffset;
  vec3_t ikLeftHandProneRotation;
  float customFloat0;
  float customFloat1;
  float customFloat2;
  int customBool0;
  int customBool1;
  int customBool2;
};

/* 2742 */
struct WeaponVariantDef
{
  const char *szInternalName;
  int iVariantCount;
  WeaponDef *weapDef;
  const char *szDisplayName;
  const char *szAltWeaponName;
  const char *szAttachmentUnique;
  WeaponAttachment **attachments;
  WeaponAttachmentUnique **attachmentUniques;
  const char **szXAnims;
  unsigned __int16 *hideTags;
  XModel **attachViewModel;
  XModel **attachWorldModel;
  const char **attachViewModelTag;
  const char **attachWorldModelTag;
  float attachViewModelOffsets[24];
  float attachWorldModelOffsets[24];
  float attachViewModelRotations[24];
  float attachWorldModelRotations[24];
  vec3_t stowedModelOffsets;
  vec3_t stowedModelRotations;
  unsigned int altWeaponIndex;
  int iAttachments;
  bool bIgnoreAttachments;
  int iClipSize;
  int iReloadTime;
  int iReloadEmptyTime;
  int iReloadQuickTime;
  int iReloadQuickEmptyTime;
  int iAdsTransInTime;
  int iAdsTransOutTime;
  int iAltRaiseTime;
  const char *szAmmoDisplayName;
  const char *szAmmoName;
  int iAmmoIndex;
  const char *szClipName;
  int iClipIndex;
  float fAimAssistRangeAds;
  float fAdsSwayHorizScale;
  float fAdsSwayVertScale;
  float fAdsViewKickCenterSpeed;
  float fHipViewKickCenterSpeed;
  float fAdsZoomFov1;
  float fAdsZoomFov2;
  float fAdsZoomFov3;
  float fAdsZoomInFrac;
  float fAdsZoomOutFrac;
  float fOverlayAlphaScale;
  float fOOPosAnimLength[2];
  bool bSilenced;
  bool bDualMag;
  bool bInfraRed;
  bool bTVGuided;
  unsigned int perks[2];
  bool bAntiQuickScope;
  Material *overlayMaterial;
  Material *overlayMaterialLowRes;
  Material *dpadIcon;
  weaponIconRatioType_t dpadIconRatio;
  bool noAmmoOnDpadIcon;
  bool mmsWeapon;
  bool mmsInScope;
  float mmsFOV;
  float mmsAspect;
  float mmsMaxDist;
  vec3_t ikLeftHandIdlePos;
  vec3_t ikLeftHandOffset;
  vec3_t ikLeftHandRotation;
  bool bUsingLeftHandProneIK;
  vec3_t ikLeftHandProneOffset;
  vec3_t ikLeftHandProneRotation;
  vec3_t ikLeftHandUiViewerOffset;
  vec3_t ikLeftHandUiViewerRotation;
};

/* 2743 */
union $F2566BAAE58F6299AEA819FCD6A98CDB
{
  WeaponDef *weapDef;
  WeaponAttachmentUnique *attachment;
};

/* 2744 */
struct WeaponDobjInfo::ModelMask
{
  WeaponDobjInfo::Slot slot;
  bool weapon;
  $F2566BAAE58F6299AEA819FCD6A98CDB ___u2;
  unsigned int dobjModelMask;
};

/* 2745 */
struct WeaponDobjInfo
{
  char numModelMasks;
  WeaponDobjInfo::Slot addingSlot;
  __int16 lastAddedModel;
  WeaponDobjInfo::ModelMask modelMasks[8];
};

/* 2746 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_30
{
  const void *pVFTable;
  void *spare;
  char name[30];
};

/* 2747 */
struct ddlMemberDef_t
{
  const char *name;
  int size;
  int offset;
  int type;
  int externalIndex;
  unsigned int rangeLimit;
  unsigned int serverDelta;
  unsigned int clientDelta;
  int arraySize;
  int enumIndex;
  int permission;
};

/* 2748 */
struct ddlStructDef_t
{
  const char *name;
  int size;
  int memberCount;
  ddlMemberDef_t *members;
  ddlHash_t *hashTable;
};

/* 2749 */
struct ddlDef_t
{
  int version;
  int size;
  ddlStructDef_t *structList;
  int structCount;
  ddlEnumDef_t *enumList;
  int enumCount;
  ddlDef_t *next;
};

/* 2750 */
struct ddlState_t
{
  int absoluteOffset;
  int arrayIndex;
  ddlMemberDef_t *member;
  ddlDef_t *ddl;
  ddlReturnCodes_e returnCode;
};

/* 2751 */
struct __cppobj bdTwitterAccount : bdTaskResult
{
  unsigned __int64 m_accountID;
  char m_accountName[128];
};

/* 2752 */
struct __cppobj bdTwitterSearchResult : bdTaskResult
{
  char m_screenName[1024];
  char m_profileImageURL[560];
  char m_text[560];
  unsigned int m_createdTimestamp;
};

/* 2753 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_19
{
  const void *pVFTable;
  void *spare;
  char name[19];
};

/* 2754 */
struct __cppobj bdSingleton<bdSingletonRegistryImpl>
{
};

/* 2755 */
struct _XMFLOAT2
{
  float x;
  float y;
};

/* 2756 */
struct __cppobj IEnumSTATSTG : IUnknown
{
};

/* 2757 */
struct _XMUHENDN3
{
  $9B0CF740AB04CA62CC4B53184E7737F8 ___u0;
};

/* 2758 */
struct __cppobj ITypeLib : IUnknown
{
};

/* 2759 */
union $325D029584593E7D2025C0E102FBF85D
{
  int i[4];
  __m128 v;
};

/* 2760 */
struct XMVECTORI32
{
  $325D029584593E7D2025C0E102FBF85D ___u0;
};

/* 2761 */
struct __declspec(align(2)) D3D11_SO_DECLARATION_ENTRY
{
  unsigned int Stream;
  const char *SemanticName;
  unsigned int SemanticIndex;
  char StartComponent;
  char ComponentCount;
  char OutputSlot;
};

/* 2762 */
struct bdNATTypeDiscoveryPacket
{
  char m_type;
  unsigned __int16 m_protocolVersion;
  bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest m_request;
};

/* 2763 */
struct D3D11_BUFFER_RTV
{
  $545C80804CFDAA65132ED5A8382CA602 ___u0;
  $44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 2764 */
struct D3D11_TEX2D_RTV
{
  unsigned int MipSlice;
};

/* 2765 */
struct D3D11_TEX2D_ARRAY_RTV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2766 */
struct D3D11_TEX3D_RTV
{
  unsigned int MipSlice;
  unsigned int FirstWSlice;
  unsigned int WSize;
};

/* 2767 */
union $951A34D9B08409FA8BFF766080473CB1
{
  D3D11_BUFFER_RTV Buffer;
  D3D11_TEX1D_RTV Texture1D;
  D3D11_TEX1D_ARRAY_RTV Texture1DArray;
  D3D11_TEX2D_RTV Texture2D;
  D3D11_TEX2D_ARRAY_RTV Texture2DArray;
  D3D11_TEX2DMS_RTV Texture2DMS;
  D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
  D3D11_TEX3D_RTV Texture3D;
};

/* 2768 */
struct D3D11_RENDER_TARGET_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_RTV_DIMENSION ViewDimension;
  $951A34D9B08409FA8BFF766080473CB1 ___u2;
};

/* 2769 */
struct bdNATTypeDiscoveryPacketReply
{
  char m_type;
  unsigned __int16 m_protocolVersion;
  bdAddr m_mappedAddr;
  bdAddr m_secAddr;
};

/* 2770 */
struct __cppobj bdEventInfo : bdTaskResult
{
  bool m_isBinary;
  unsigned int m_category;
  unsigned int m_length;
  char *m_eventDesc;
};

/* 2771 */
struct _XMUSHORTN2
{
  unsigned __int16 x;
  unsigned __int16 y;
};

/* 2772 */
struct _XMHEND3
{
  $3FCD737C0C8238216509528F827B367A ___u0;
};

/* 2773 */
struct $4E9C6EFC8F90FF392DC51DB55A3AF35A
{
  unsigned __int32 xm : 9;
  unsigned __int32 ym : 9;
  unsigned __int32 zm : 9;
  unsigned __int32 e : 5;
};

/* 2774 */
union $43BDE0DE8840733A8F2DCB81B7689506
{
  $4E9C6EFC8F90FF392DC51DB55A3AF35A __s0;
  unsigned int v;
};

/* 2775 */
struct _XMFLOAT3SE
{
  $43BDE0DE8840733A8F2DCB81B7689506 ___u0;
};

/* 2776 */
struct $34E79E47AB5BD06E31D2321EEC6BE448
{
  unsigned __int16 x : 4;
  unsigned __int16 y : 4;
  unsigned __int16 z : 4;
  unsigned __int16 w : 4;
};

/* 2777 */
union $37C70FF6953C5933F3D75951C3807E7B
{
  $34E79E47AB5BD06E31D2321EEC6BE448 __s0;
  unsigned __int16 v;
};

/* 2778 */
struct _XMUNIBBLE4
{
  $37C70FF6953C5933F3D75951C3807E7B ___u0;
};

/* 2779 */
struct DObjSkelMat
{
  vec4_t axis[3];
  vec4_t origin;
};

/* 2780 */
struct _ldiv_t
{
  int quot;
  int rem;
};

/* 2781 */
struct $A8DF805D1CBA1EAEDB3AD4503617926A
{
  float _11;
  float _12;
  float _13;
  float _21;
  float _22;
  float _23;
  float _31;
  float _32;
  float _33;
  float _41;
  float _42;
  float _43;
};

/* 2782 */
union $E37331841AAFA2E69DB0B8218F0E0A74
{
  $A8DF805D1CBA1EAEDB3AD4503617926A __s0;
  float m[4][3];
};

/* 2783 */
struct _XMFLOAT4X3
{
  $E37331841AAFA2E69DB0B8218F0E0A74 ___u0;
};

/* 2784 */
union $A5A483E05FC9B52B872A8DCFA58CFF52
{
  unsigned int Offset;
  void *Pointer;
};

/* 2785 */
struct _OVERLAPPED
{
  unsigned int Internal;
  unsigned int InternalHigh;
  $A5A483E05FC9B52B872A8DCFA58CFF52 ___u2;
  unsigned int OffsetHigh;
  void *hEvent;
};

/* 2786 */
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};

/* 2787 */
struct __cppobj CD3D11_QUERY_DESC : D3D11_QUERY_DESC
{
};

/* 2788 */
struct _XMSHORTN4
{
  __int16 x;
  __int16 y;
  __int16 z;
  __int16 w;
};

/* 2789 */
struct jqQueue
{
  jqQueue *ThisPtr;
  jqAtomicQueue<jqBatch,32> Queue;
  int QueuedBatchCount;
  unsigned int ProcessorsMask;
};

/* 2790 */
struct __declspec(align(8)) jqConditionalQueue
{
  jqQueue Queue;
  jqQueue *DstQueue;
  unsigned int allow;
  int lock;
};

/* 2791 */
struct CmdArgs
{
  int nesting;
  LocalClientNum_t localClientNum[8];
  ControllerIndex_t controllerIndex[8];
  itemDef_s *itemDef[8];
  int argshift[8];
  int argc[8];
  const char **argv[8];
  char textPool[8192];
  const char *argvPool[512];
  int usedTextPool[8];
  int totalUsedArgvPool;
  int totalUsedTextPool;
};

/* 2792 */
struct CACRoot
{
  char *buffer;
  ddlState_t *rootState;
};

/* 2793 */
struct __cppobj CD3D11_VIEWPORT : D3D11_VIEWPORT
{
};

/* 2794 */
struct __cppobj bdQuotaUsage : bdTaskResult
{
  unsigned int m_usedStorageSpace;
  unsigned int m_usedNumFiles;
  unsigned int m_usedDailyUploadBW;
  unsigned int m_usedDailyDownloadBW;
  unsigned int m_maxStorageSpace;
  unsigned int m_maxNumFiles;
  unsigned int m_maxDailyUploadBW;
  unsigned int m_maxDailyDownloadBW;
};

/* 2795 */
struct scrStringDebugGlob_t
{
  volatile int refCount[65536];
  volatile int totalRefCount;
  int ignoreLeaks;
};

/* 2796 */
struct ClientArchiveData
{
  int serverTime;
  vec3_t origin;
  vec3_t velocity;
  int bobCycle;
  int movementDir;
  PlayerVehicleState playerVehStateClientArchive;
};

/* 2797 */
struct clientActive_t
{
  MatchState *parseMatchStatesBuf;
  int numParseMatchStates;
  int maxParseMatchStates;
  entityState_s *parseEntitiesBuf;
  int numParseEntities;
  int maxParseEntities;
  clientState_s *parseClientsBuf;
  int numParseClients;
  int maxParseClients;
  actorState_s *parseActorsBuf;
  int numParseActors;
  int maxParseActors;
  outPacket_t *outPackets;
  clSnapshot_t *snapshots;
  int packetBackupCount;
  int packetBackupMask;
  int gameStateMarker;
  bool usingAds;
  int timeoutcount;
  clSnapshot_t snap;
  int snapServerTime;
  int oldSnapServerTime;
  bool alwaysFalse;
  int serverTime;
  int oldServerTime;
  int oldFrameServerTime;
  int serverTimeDelta;
  int extrapolatedSnapshot;
  int newSnapshots;
  int serverId;
  int forceNewSnapshots;
  int unpausedTimeBehind;
  int serverTimeErrorIndex;
  int serverTimeErrorCount;
  int serverTimeErrorCumul;
  int serverTimeErrorAvg;
  int serverTimeErrorPrev;
  int serverTimeError[20];
  int serverTimeError2[20];
  char mapname[64];
  int parseMatchStateIndex;
  int parseEntitiesIndex;
  int parseClientsIndex;
  int parseActorsIndex;
  bool stanceHeld;
  StanceState stance;
  StanceState stancePosition;
  int stanceTime;
  bool weapNextHeld;
  int weapNextTime;
  bool switchingToInventory;
  Weapon cgameUserCmdWeapon;
  Weapon cgameUserCmdOffHandWeapon;
  Weapon cgameUserCmdLastWeaponForAlt;
  float cgameFOVSensitivityScale;
  float cgameMaxPitchSpeed;
  float cgameMaxYawSpeed;
  vec3_t cgameKickAngles;
  vec3_t cgameOrigin;
  vec3_t cgameVelocity;
  PlayerVehicleState cgamePlayerVehState;
  int cgameBobCycle;
  int cgameMovementDir;
  bitarray<64> cgameExtraButton_bits;
  int cgamePredictedDataServerTime;
  vec3_t viewangles;
  int skelTimeStamp;
  volatile int skelMemPos;
  char skelMemory[262144];
  char *skelMemoryStart;
  bool allowedAllocSkel;
  usercmd_s cmds[128];
  int cmdNumber;
  ClientArchiveData clientArchive[256];
  int clientArchiveIndex;
  entityState_s entityBaselines[1024];
  int corruptedTranslationFile;
  char translationVersion[256];
  int lastFireTime;
  bool useHeld;
  int useTime;
  int useCount;
  int wasInVehicle;
  int serverFrameMS;
  int serverKbps;
  int serverKbpsAvg[2];
  int serverKbpsCount[2];
};

/* 2798 */
struct ip_msfilter
{
  in_addr imsf_multiaddr;
  in_addr imsf_interface;
  MULTICAST_MODE_TYPE imsf_fmode;
  unsigned int imsf_numsrc;
  in_addr imsf_slist[1];
};

/* 2799 */
struct MaterialRaw
{
  MaterialInfoRaw info;
  unsigned int refStateBits[2];
  unsigned __int16 textureCount;
  unsigned __int16 constantCount;
  unsigned int techSetNameOffset;
  unsigned int textureTableOffset;
  unsigned int constantTableOffset;
  unsigned int thermalMaterialNameOffset;
};

/* 2800 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_31
{
  const void *pVFTable;
  void *spare;
  char name[31];
};

/* 2801 */
struct __cppobj CD3D11_DEPTH_STENCIL_DESC : D3D11_DEPTH_STENCIL_DESC
{
};

/* 2802 */
struct tlSharedAtomicMutex
{
  volatile unsigned __int64 ThreadId;
  volatile int LockCount;
  tlSharedAtomicMutex *ThisPtr;
};

/* 2803 */
struct __cppobj bdGroupID : bdTaskResult
{
  unsigned int m_groupID;
};

/* 2804 */
struct __cppobj bdGroupCount : bdTaskResult
{
  unsigned int m_groupID;
  unsigned int m_groupCount;
};

/* 2805 */
struct bdArray<bdKeyValuePair>
{
  bdKeyValuePair *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 2806 */
struct __cppobj bdEntityIDKeyArchiveMap : bdTaskResult
{
  unsigned __int64 m_entityID;
  unsigned __int16 m_numMatchingKeys;
  bdArray<bdKeyValuePair> m_keyValuePairs;
};

/* 2807 */
struct __cppobj MemTrackInst
{
};

/* 2808 */
struct __cppobj bdGenericLeagueID : bdTaskResult
{
  unsigned __int64 m_ID;
};

/* 2809 */
struct __cppobj bdTagsArray : bdTaskResult
{
  unsigned __int64 m_entityID;
  unsigned int m_numTags;
  bdTag m_tags[60];
};

/* 2810 */
struct __cppobj bdDTLSError : bdDTLSHeader
{
  bdDTLSError::bdDTLSErrorType m_etype;
  bdSecurityID m_secID;
};

/* 2811 */
struct __cppobj bdAddrHash
{
};

/* 2812 */
union $A0F5E278CB74448538F70883E3594DB2
{
  unsigned int u[4];
  __m128 v;
};

/* 2813 */
struct XMVECTORU32
{
  $A0F5E278CB74448538F70883E3594DB2 ___u0;
};

/* 2814 */
struct __cppobj bdBitOperations
{
};

/* 2815 */
struct __cppobj __declspec(align(16)) XMFLOAT2A : _XMFLOAT2
{
};

/* 2816 */
struct __cppobj bdCommonAddrHash
{
};

/* 2817 */
struct recentFrame
{
  bool lagged;
};

/* 2818 */
struct server_t
{
  serverState_t state;
  int physicsTime;
  int timeResidual;
  int levelTime;
  bool inFrame;
  bool allowNetPackets;
  int restarting;
  int start_frameTime;
  int checksumFeed;
  cmodel_t *models[512];
  bool wroteConfigStrings;
  unsigned __int16 emptyConfigString;
  unsigned __int16 configstrings[2806];
  svEntity_s svEntities[1024];
  gentity_t *gentities;
  int gentitySize;
  int num_entities;
  playerState_s *gameClients;
  int gameClientSize;
  actor_t *gameActors;
  int gameActorSize;
  int checksum;
  int skelTimeStamp;
  int skelMemPos;
  int bpsWindow[20];
  int bpsWindowSteps;
  int bpsTotalBytes;
  int bpsMaxBytes;
  int ubpsWindow[20];
  int ubpsTotalBytes;
  int ubpsMaxBytes;
  float ucompAve;
  int ucompNum;
  volatile int serverFrameTime;
  volatile int serverFrameTimeMin;
  volatile int serverFrameTimeMax;
  char gametype[64];
  bool killServer;
  const char *killReason;
  recentFrame recentFrameInfo[200];
  int currentFrameNum;
  char xpmods;
  int nextClientsPositionArchive;
  clientsPositionArchive_t clientsPositionArchive[100];
  int securityChecksum[3];
};

/* 2819 */
struct msg_t
{
  int overflowed;
  int readOnly;
  char *data;
  char *splitData;
  int maxsize;
  int cursize;
  int splitSize;
  int readcount;
  int bit;
  int lastEntityRef;
  int flush;
  netsrc_t targetLocalNetID;
};

/* 2820 */
struct $AB1E74D5BEA037416C105EC420DB6EF3
{
  __int64 x : 20;
  __int64 y : 20;
  __int64 z : 20;
  __int64 w : 4;
};

/* 2821 */
union $50E73B6CBA9C38D2139731EE7D225FC6
{
  $AB1E74D5BEA037416C105EC420DB6EF3 __s0;
  unsigned __int64 v;
};

/* 2822 */
struct _XMICON4
{
  $50E73B6CBA9C38D2139731EE7D225FC6 ___u0;
};

/* 2823 */
struct netProfileInfo_t
{
  netProfileStream_t send;
  netProfileStream_t recieve;
};

/* 2824 */
struct _XMSHORT2
{
  __int16 x;
  __int16 y;
};

/* 2825 */
struct __cppobj CD3D11_SAMPLER_DESC : D3D11_SAMPLER_DESC
{
};

/* 2826 */
struct __cppobj bdPlatformSocket
{
};

/* 2827 */
struct short4
{
  __int16 x;
  __int16 y;
  __int16 z;
  __int16 w;
};

/* 2828 */
struct MigrationPers
{
  int time;
  bool stanceHeld;
  StanceState stance;
  StanceState stancePosition;
  int stanceTime;
  Weapon cgameUserCmdWeapon;
  Weapon cgameUserCmdOffHandWeapon;
  Weapon weaponSelect;
  int weaponSelectTime;
  int weaponForcedSelectTime;
  Weapon weaponLatestPrimary;
  Weapon primaryWeaponForAlt[256];
  int holdBreathTime;
  int holdBreathInTime;
  int holdBreathDelay;
  float holdBreathFrac;
};

/* 2829 */
struct clientUIActive_t
{
  int flags;
  int keyCatchers;
  connstate_t connectionState;
  int nextScrollTime;
  clientMigState_t migrationState;
  MigrationPers migrationPers;
  int numVoicePacketsSent;
  int numVoicePacketsSentStart;
};

/* 2830 */
struct D3D10_TEXTURE3D_DESC
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int MipLevels;
  DXGI_FORMAT Format;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2831 */
struct __cppobj CD3D10_TEXTURE3D_DESC : D3D10_TEXTURE3D_DESC
{
};

/* 2832 */
struct _XMUSHORT4
{
  unsigned __int16 x;
  unsigned __int16 y;
  unsigned __int16 z;
  unsigned __int16 w;
};

/* 2833 */
struct __declspec(align(4)) scrVarDebugPub_t
{
  char **objectVarUsage;
  char **childVarUsage;
  unsigned __int16 *extRefCount;
  int *objectLeakCount;
  int *childLeakCount;
  bool dummy;
};

/* 2834 */
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 2835 */
struct __cppobj bdSingletonRegistry : bdSingleton<bdSingletonRegistryImpl>
{
};

/* 2836 */
struct __cppobj bdDMLInfo : bdTaskResult
{
  char m_countryCode[3];
  char m_country[65];
  char m_region[65];
  char m_city[129];
  float m_latitude;
  float m_longitude;
};

/* 2837 */
struct __cppobj bdDMLHierarchicalInfo : bdDMLInfo
{
  unsigned int m_tier0;
  unsigned int m_tier1;
  unsigned int m_tier2;
  unsigned int m_tier3;
};

/* 2838 */
struct _XMUICON4
{
  $B38ACCDA271EC06CC284D2A1B4FA5EEA ___u0;
};

/* 2839 */
struct ReliableCommands
{
  int sequence;
  int acknowledge;
  char *commands[128];
  int commandBufferNext;
  char commandBuffer[16384];
};

/* 2840 */
struct _XMICO4
{
  $50E73B6CBA9C38D2139731EE7D225FC6 ___u0;
};

/* 2841 */
struct D3D10_TEXTURE2D_DESC
{
  unsigned int Width;
  unsigned int Height;
  unsigned int MipLevels;
  unsigned int ArraySize;
  DXGI_FORMAT Format;
  DXGI_SAMPLE_DESC SampleDesc;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2842 */
struct __cppobj CD3D10_TEXTURE2D_DESC : D3D10_TEXTURE2D_DESC
{
};

/* 2843 */
struct $_TypeDescriptor$_extraBytes_20
{
  const void *pVFTable;
  void *spare;
  char name[20];
};

/* 2844 */
struct __cppobj __declspec(align(16)) static_colgeom_visitor_t : colgeom_visitor_t
{
  int ntrees;
  CollisionAabbTree *trees[512];
  int nbrushes;
  cbrush_t *brushes[512];
};

/* 2845 */
struct __cppobj bdCommonAddrInfo
{
};

/* 2846 */
struct FastCriticalSection
{
  volatile int readCount;
  volatile int writeCount;
};

/* 2847 */
struct __cppobj __declspec(align(8)) bdTeamMember : bdTaskResult
{
  unsigned __int64 m_teamID;
  unsigned __int64 m_userID;
  char m_userName[64];
  bool m_isOnline;
  char m_status;
};

/* 2848 */
struct MaterialTextureDefRaw
{
  unsigned int nameOffset;
  char samplerState;
  char semantic;
  unsigned int imageNameOffset;
};

/* 2849 */
struct netchan_t
{
  int outgoingSequence;
  netsrc_t sock;
  int dropped;
  int incomingSequence;
  netadr_t remoteAddress;
  int qport;
  int fragmentSequence;
  int fragmentLength;
  char *fragmentBuffer;
  int fragmentBufferSize;
  int unsentFragments;
  int unsentOnLoan;
  int unsentFragmentStart;
  int unsentLength;
  char *unsentBuffer;
  int unsentBufferSize;
  int reliable_fragments;
  char fragment_send_count[128];
  unsigned int fragment_ack[4];
  int lowest_send_count;
  netProfileInfo_t prof;
};

/* 2850 */
struct D3D10_BUFFER_DESC
{
  unsigned int ByteWidth;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2851 */
struct __declspec(align(8)) clientConnection_t
{
  int qport;
  ClientNum_t clientNum;
  int lastPacketSentTime;
  int lastPacketTime;
  netadr_t serverAddress;
  int connectTime;
  int connectPacketCount;
  char serverMessage[256];
  int challenge;
  int checksumFeed;
  ReliableCommands reliableCommands;
  int serverMessageSequence;
  int serverCommandSequence;
  int lastExecutedServerCommand;
  char serverCommands[128][1024];
  bool isServerRestarting;
  bool areTexturesLoaded;
  bool waitForMovie;
  bool hostCompromised;
  netchan_t netchan;
  char netchanOutgoingBuffer[2048];
  char netchanIncomingBuffer[65536];
  netProfileInfo_t OOBProf;
  __int64 statPacketsToSend;
  int statPacketSendTime[41];
};

/* 2852 */
struct _XMBYTEN4
{
  $307E4550B204E85023DA181BAF74758D ___u0;
};

/* 2853 */
struct __cppobj __declspec(align(8)) bdLeagueSubdivisionInfo : bdTaskResult
{
  unsigned __int64 m_subdivisionID;
  unsigned __int64 m_leagueID;
  unsigned __int64 m_seasonID;
  bool m_isDefault;
  unsigned int m_createdTime;
  char m_metadata[64];
  unsigned int m_metadataLength;
};

/* 2854 */
struct __cppobj __declspec(align(8)) bdFileInfo : bdTaskResult
{
  unsigned __int64 m_fileID;
  unsigned int m_createTime;
  unsigned int m_modifedTime;
  bdFileInfo::bdVisibility m_visibility;
  unsigned __int64 m_ownerID;
  char m_fileName[128];
  unsigned int m_fileSize;
};

/* 2855 */
struct NetField
{
  const char *name;
  int offset;
  int size;
  int bits;
  char changeHints;
  const char *bitsStr;
  const char *changeHintsStr;
};

/* 2856 */
struct __cppobj __declspec(align(8)) bdLeagueUserTeamResult : bdTaskResult
{
  unsigned __int64 m_teamID;
  char m_name[65];
  char m_icon[1024];
  unsigned int m_iconLength;
  unsigned int m_lastLoginTimestamp;
};

/* 2857 */
struct __declspec(align(8)) tlAtomicReadWriteMutex
{
  volatile unsigned __int64 WriteThreadId;
  volatile int ReadLockCount;
  volatile int WriteLockCount;
  tlAtomicReadWriteMutex *ThisPtr;
};

/* 2858 */
struct jqBatchPool
{
  jqBatchPool *ThisPtr;
  jqQueue BaseQueue;
  $E323CA426F0E90DD266E8D23BC5065D0 ___u2;
  jqAtomicHeap BatchDataHeap;
};

/* 2859 */
struct __cppobj CD3D11_RENDER_TARGET_VIEW_DESC : D3D11_RENDER_TARGET_VIEW_DESC
{
};

/* 2860 */
struct __cppobj __declspec(align(8)) bdGetFilesResult : bdTaskResult
{
  unsigned __int64 m_ID;
  bdFileData m_data;
};

/* 2861 */
struct __cppobj __declspec(align(8)) bdFriendProposal : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
  char m_attachment[1024];
  unsigned int m_attachmentSize;
};

/* 2862 */
struct __cppobj __declspec(align(8)) bdFriendInfo : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
  bool m_isOnline;
  char m_groupID;
};

/* 2863 */
struct __cppobj __declspec(align(4)) bdGroupInfo : bdTaskResult
{
  char m_groupID;
  char m_groupName[32];
};

/* 2864 */
struct __cppobj bdFriendAndRichPresence : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
  char m_groupID;
  bool m_isOnline;
  char m_richPresence[255];
  unsigned int m_richPresenceSize;
};

/* 2865 */
struct _XMUSHORTN4
{
  unsigned __int16 x;
  unsigned __int16 y;
  unsigned __int16 z;
  unsigned __int16 w;
};

/* 2866 */
struct _XMUSHORT2
{
  unsigned __int16 x;
  unsigned __int16 y;
};

/* 2867 */
struct bdRandom
{
  unsigned int m_val;
};

/* 2868 */
struct __cppobj bdLeagueTeamMemberInfo : bdTaskResult
{
  unsigned __int64 m_teamID;
  unsigned int m_numMembers;
  unsigned __int64 m_userIDs[16];
  char m_userNames[16][65];
};

/* 2869 */
struct __cppobj XMFLOAT4A : _XMFLOAT4
{
};

/* 2870 */
struct tlThread
{
  tlThreadVtbl *vfptr;
  __declspec(align(8)) const char *Name;
  int Priority;
  unsigned int StackSize;
  unsigned int Flags;
  unsigned __int64 Handle;
  int ExitCode;
};

/* 2871 */
struct tlThreadVtbl
{
  void *(__thiscall *__vecDelDtor)(tlThread *this, unsigned int);
  int (__thiscall *Entry)(tlThread *this);
};

/* 2872 */
struct __cppobj CD3D11_TEXTURE2D_DESC : D3D11_TEXTURE2D_DESC
{
};

/* 2873 */
struct __cppobj bdStatsInfo : bdTaskResult
{
  unsigned int m_leaderboardID;
  unsigned __int64 m_entityID;
  bdStats::bdWriteType m_writeType;
  __int64 m_rating;
  unsigned __int64 m_rank;
  char m_entityName[65];
  unsigned int m_secondsSinceUpdate;
};

/* 2874 */
struct __cppobj bdSessionNonce : bdTaskResult
{
  unsigned __int64 m_nonce;
};

/* 2875 */
struct bdArbitratedStatsInfo
{
  bdArbitratedStatsInfoVtbl *vfptr;
  __declspec(align(8)) unsigned int m_leaderboardID;
  unsigned __int64 m_entityID;
  bdStats::bdWriteType m_writeType;
  __int64 m_rating;
};

/* 2876 */
struct bdArbitratedStatsInfoVtbl
{
  void *(__thiscall *__vecDelDtor)(bdArbitratedStatsInfo *this, unsigned int);
  void (__thiscall *serialize)(bdArbitratedStatsInfo *this, bdByteBuffer *);
  unsigned int (__thiscall *sizeOf)(bdArbitratedStatsInfo *this);
};

/* 2877 */
struct __cppobj __declspec(align(8)) bdStatsInfoEx : bdTaskResult
{
  unsigned int m_leaderboardID;
  unsigned int m_error;
  unsigned __int64 m_entityID;
  bdStatsInfo *m_statsInfo;
};

/* 2878 */
struct $CC5C3905A9A95D8A07775E2461206A04
{
  float _11;
  float _12;
  float _13;
  float _21;
  float _22;
  float _23;
  float _31;
  float _32;
  float _33;
};

/* 2879 */
union $406BFCBBB9DD31AFC86ABB25829278AC
{
  $CC5C3905A9A95D8A07775E2461206A04 __s0;
  float m[3][3];
};

/* 2880 */
struct _XMFLOAT3X3
{
  $406BFCBBB9DD31AFC86ABB25829278AC ___u0;
};

/* 2881 */
struct __cppobj CD3D10_TEXTURE1D_DESC : D3D10_TEXTURE1D_DESC
{
};

/* 2882 */
union __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  char m64_i8[8];
  __int16 m64_i16[4];
  int m64_i32[2];
  __int64 m64_i64;
  char m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned int m64_u32[2];
};

/* 2883 */
struct GfxMarkContext
{
  char lmapIndex;
  char primaryLightIndex;
  char reflectionProbeIndex;
  char modelTypeAndSurf;
  unsigned __int16 modelIndex;
};

/* 2884 */
struct __cppobj XAnimClientNotifyAdder
{
};

/* 2885 */
struct XAnimClientNotifyList
{
  char m_clientNotifyMemory[1280];
  int m_numNotifies;
};

/* 2886 */
struct __cppobj bdEventLogID : bdTaskResult
{
  unsigned __int64 m_eventLogID;
};

/* 2887 */
struct voiceCommunication_t
{
  ClientVoicePacket_s voicePackets[10];
  int voicePacketCount;
  int voicePacketLastTransmit;
};

/* 2888 */
struct __cppobj CD3D11_COUNTER_DESC : D3D11_COUNTER_DESC
{
};

/* 2889 */
struct __cppobj CD3D10_BUFFER_DESC : D3D10_BUFFER_DESC
{
};

/* 2890 */
struct char4
{
  char x;
  char y;
  char z;
  char w;
};

/* 2891 */
struct __cppobj XMFLOAT4X3A : _XMFLOAT4X3
{
};

/* 2892 */
struct __cppobj CD3D11_UNORDERED_ACCESS_VIEW_DESC : D3D11_UNORDERED_ACCESS_VIEW_DESC
{
};

/* 2893 */
struct __cppobj CD3D11_RASTERIZER_DESC : D3D11_RASTERIZER_DESC
{
};

/* 2894 */
struct StringTableCell
{
  const char *string;
  int hash;
};

/* 2895 */
struct StringTable
{
  const char *name;
  int columnCount;
  int rowCount;
  StringTableCell *values;
  __int16 *cellIndex;
};

/* 2896 */
struct __cppobj __declspec(align(8)) MatchMakingQuery : bdSessionParams
{
  QueryId m_queryId;
  unsigned __int64 m_PARAM_GAME_SECURITY_ID;
  int m_PARAM_SHOW_IN_MATCHMAKING;
  int m_PARAM_NETCODE_VERSION;
  int m_PARAM_MAP_PACKS;
  int m_PARAM_PLAYLIST_VERSION;
  int m_PARAM_PLAYLIST_NUMBER;
  int m_PARAM_IS_EMPTY;
  int m_PARAM_TEAM_SIZE;
  float m_PARAM_SKILL;
  float m_PARAM_SKILL_WEIGHT;
  int m_PARAM_GEO_1;
  int m_PARAM_GEO_2;
  int m_PARAM_GEO_3;
  int m_PARAM_GEO_4;
  float m_PARAM_GEO_1_WEIGHT;
  float m_PARAM_GEO_2_WEIGHT;
  float m_PARAM_GEO_3_WEIGHT;
  float m_PARAM_GEO_4_WEIGHT;
};

/* 2898 */
struct phys_inplace_avl_tree_node<generic_avl_map_node_t>
{
  generic_avl_map_node_t *m_left;
  generic_avl_map_node_t *m_right;
  int m_balance;
};

/* 2897 */
struct generic_avl_map_node_t
{
  void *m_data;
  unsigned int m_avl_key;
  phys_inplace_avl_tree_node<generic_avl_map_node_t> m_avl_node_info;
};

/* 2899 */
struct phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t>
{
  generic_avl_map_node_t *m_tree_root;
};

/* 2900 */
struct phys_simple_allocator<mover_info_t>
{
  int m_count;
};

/* 2901 */
struct mover_record_t
{
  vec3_t m_origin;
  vec3_t m_angles;
  int m_time;
};

/* 2902 */
struct mover_info_t
{
  mover_record_t m_records[32];
  int m_last_record;
};

/* 2903 */
struct phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t>::stack_item
{
  generic_avl_map_node_t **m_node;
  int m_child;
};

/* 2904 */
struct __declspec(align(128)) snapshot_s
{
  int snapFlags;
  int ping;
  int serverTime;
  int physicsTime;
  playerState_s ps;
  int numEntities;
  int numClients;
  int numActors;
  entityState_s entities[512];
  clientState_s clients[18];
  actorState_s actors[32];
  __declspec(align(32)) MatchState matchState;
  unsigned __int16 entIndices[512];
  int serverCommandSequence;
};

/* 2905 */
struct GfxSkinCacheEntry
{
  unsigned int frameCount;
  int skinnedCachedOffset;
  unsigned __int16 numSkinnedVerts;
  unsigned __int16 ageCount;
};

/* 2906 */
struct clientControllers_t
{
  vec3_t angles[6];
  vec3_t tag_origin_angles;
  vec3_t tag_origin_offset;
};

/* 2907 */
struct CEntPlayerInfo
{
  clientControllers_t *control;
  char tag[6];
  float waterHeight;
  int nextWaterHeightCheck;
  int nextRippleTime;
};

/* 2908 */
struct CEntTurretAngles
{
  float pitch;
  float yaw;
  float barrelPitch;
};

/* 2909 */
union $78D3E270316A4F7ED051E2DB4AC98EFF
{
  CEntTurretAngles angles;
  vec3_t viewAngles;
};

/* 2910 */
struct __declspec(align(4)) CEntTurretInfo
{
  $78D3E270316A4F7ED051E2DB4AC98EFF ___u0;
  bool playerUsing;
  float minigunRotation;
  float minigunRotationSpeed;
  char tag_aim;
  char tag_aim_animated;
  char tag_flash;
  char tag_spin;
  char tag_turret;
  char tag_barrel;
  float barrelPitch;
  float pivotOffset;
  float firingOffset;
  char tag_aim_pivot;
  char tag_weapon;
};

/* 2911 */
struct CEntVehicleDefGround
{
  float wheelHeight[6];
  float nitrousWheelRotation[6];
  __int16 nitrousWheelYaw[6];
  char tag_extra_tank_wheels[4];
};

/* 2912 */
struct CEntVehicleRotor
{
  float rotation;
  float speed;
  char tag;
  char orientation;
  char armTag;
  float armRotation;
};

/* 2913 */
struct CEntVehicleDefAir
{
  CEntVehicleRotor rotor[4];
};

/* 2914 */
union $0CA06D1CB15EB757BBC076B744D73B9B
{
  CEntVehicleDefGround ground;
  CEntVehicleDefAir air;
};

/* 2915 */
struct CEntVehicleDef
{
  float barrelRecoil;
  __int16 pitch;
  __int16 roll;
  __int16 barrelYaw;
  __int16 barrelPitch;
  __int16 steerYaw;
  __int16 steerPitch;
  __int16 gunnerPitch[4];
  __int16 gunnerYaw[4];
  __int16 minigunRotation;
  __int16 antennaPitch[2];
  __int16 antennaRoll[2];
  char wheelBoneIndex[6];
  char tag_body;
  char tag_turret;
  char tag_barrel;
  char tag_barrel_recoil;
  char tag_gunner_turret[4];
  char tag_gunner_barrel[4];
  char tag_player;
  char tag_minigun_spin;
  char tag_antennas[2];
  $0CA06D1CB15EB757BBC076B744D73B9B ___u22;
};

/* 2916 */
struct CEntFx
{
  int triggerTime;
  unsigned int effect;
};

/* 2917 */
union $B5C6484BFC4A9A509FCDCE318554591E
{
  float height;
  float yaw;
};

/* 2918 */
struct __declspec(align(4)) CEntActorInfo
{
  int proneType;
  float pitch;
  float roll;
  char headBone;
  $B5C6484BFC4A9A509FCDCE318554591E ___u4;
  float waterHeight;
  int nextWaterHeightCheck;
  int nextRippleTime;
  float lookAtBlend;
  char lookAtFlags;
};

/* 2919 */
struct CEntGeneral
{
  int contents;
  bool linked;
  vec3_t mins;
  vec3_t maxs;
};

/* 2920 */
struct ShaderConstantSet
{
  vec4_t value[7];
  char constantSource[7];
  char used;
};

/* 2921 */
union $DBABC91A79CCE7AF69ACD6548728C8FA
{
  CEntPlayerInfo player;
  CEntTurretInfo turret;
  CEntVehicleDef vehicle;
  CEntFx fx;
  CEntActorInfo actor;
  CEntGeneral general;
};

/* 2922 */
struct cpose_t
{
  unsigned __int16 lightingHandle;
  char eType;
  char eTypeUnion;
  char localClientNum;
  char isRagdoll;
  int ragdollHandle;
  int physObjId;
  int physUserBody;
  int killcamRagdollHandle;
  int physUserBodyProneFeet;
  char destructiblePose;
  int startBurnTime;
  float wetness;
  int cullIn;
  vec3_t origin;
  vec3_t angles;
  vec3_t absmin;
  vec3_t absmax;
  GfxSkinCacheEntry skinCacheEntry;
  $DBABC91A79CCE7AF69ACD6548728C8FA ___u19;
  ShaderConstantSet constantSet;
};

/* 2923 */
struct $4E48DA81AE6944637E6E45560C08B001
{
  unsigned __int32 relativeAnglesSet : 1;
  unsigned __int32 identityLinkto : 1;
};

/* 2924 */
union $ACCCDBCDA65D8C275E8736DF866C62A5
{
  unsigned int packed_bits;
  $4E48DA81AE6944637E6E45560C08B001 __s1;
};

/* 2925 */
struct cLinkInfo_s
{
  vec3_t axis[4];
  int linkEnt;
  int linkTag;
  vec3_t relativeAngles;
  $ACCCDBCDA65D8C275E8736DF866C62A5 ___u4;
};

/* 2926 */
struct cgVehicleWheelEffect
{
  int surfaceType;
  int lastSurfaceType;
};

/* 2927 */
struct Engine
{
  float throttle;
  float load;
  int currentGear;
  float rpms;
  float targetDownShiftRPM;
  float inAirTime;
  bool onGround;
  VehicleEngineState state;
};

/* 2928 */
struct cgVehicle_t
{
  int lastGunnerFire[4];
  int wheelSurfType[6];
  int fireTime;
  int flags;
  float materialTime;
  float materialTime2;
  vehicle_cache_t *vehicle_cache;
  cgVehicleWheelEffect wheelEffects[3];
  unsigned int notes[2];
  int driveBySoundIndex[2];
  float driveBySoundDelay[2];
  float driveBySoundTimeout[2];
  float prevTurretPitch;
  float prevTurretYaw;
  float prevGunnerPitch[4];
  float prevGunnerYaw[4];
  float prevAngularVelocity[5];
  Engine engine;
  float minigunRotationSpeed;
  vec3_t gunSoundOrigins[5];
  char wasFiring;
  vec3_t antennaPos[2];
  vec3_t antennaVel[2];
  vec3_t antennaParentBoneWorldAxis[2][3];
  vec3_t antennaRelativePos[2];
  vec3_t poseAxis[4];
};

/* 2929 */
struct cached_client_tag_t
{
  int time;
  vec3_t lastLocalTagOrigin;
  bool visible;
  int predictedTime;
  vec3_t predictedPosition;
  vec3_t predictedAngles;
};

/* 2930 */
struct ClientTagCache
{
  cached_client_tag_t aim_head_tag;
  cached_client_tag_t aim_highest_tag;
  cached_client_tag_t tag_flash;
};

/* 2931 */
struct AimTargetCache
{
  int lastUpdateTime;
  float targetHeight;
};

/* 2932 */
struct cgScriptMover_s
{
  float decelTime;
  float aDecelTime;
  float speed;
  float aSpeed;
  float midTime;
  float aMidTime;
  vec3_t pos1;
  vec3_t pos2;
  vec3_t pos3;
  vec3_t apos1;
  vec3_t apos2;
  vec3_t apos3;
};

/* 2933 */
struct __declspec(align(2)) canimscripted_t
{
  vec3_t axis[4];
  unsigned __int16 anim;
  char bStarted;
};

/* 2941 */
struct $2C268F07489A8B2B324034942807AD28
{
  unsigned __int32 applyLeftHandIK : 1;
  unsigned __int32 nextValid : 1;
  unsigned __int32 bMuzzleFlash : 1;
  unsigned __int32 bMuzzleFlashLeft : 1;
  unsigned __int32 bMuzzleFlashLastShot : 1;
  unsigned __int32 bShellEject : 1;
  unsigned __int32 bShellEjectLeft : 1;
  unsigned __int32 bTrailMade : 1;
  unsigned __int32 isBurning : 1;
  unsigned __int32 skipBloodImpacts : 1;
  unsigned __int32 heroBloodImpact : 1;
  unsigned __int32 scriptThreaded : 1;
  unsigned __int32 clientRumbleLoop : 1;
  unsigned __int32 didOverheatFx : 1;
  unsigned __int32 leftFootstep : 1;
  unsigned __int32 rightFootstep : 1;
  unsigned __int32 leftRearFootstep : 1;
  unsigned __int32 rightRearFootstep : 1;
  unsigned __int32 bIsTrigger : 1;
  unsigned __int32 bIsTriggerRadius : 1;
  unsigned __int32 bIsTriggerBox : 1;
  unsigned __int32 bIsOneShot : 1;
  unsigned __int32 bIsPlaneOnRadar : 1;
  unsigned __int32 bFloatLonger : 1;
  unsigned __int32 bForceBuoyancy : 1;
  unsigned __int32 bIgnoreRagdoll : 1;
  unsigned __int32 bClientFlagsNeedProcessing : 1;
  unsigned __int32 bUpdatedSinceReset : 1;
  unsigned __int32 bUpdateToggle : 1;
  unsigned __int32 bZombieEyeGlowHasBeenTurnedOn : 1;
  unsigned __int32 bFakeEntityMoving : 1;
  unsigned __int32 bFakeEntityTurning : 1;
  unsigned __int32 bFakeEntityRemoved : 1;
  unsigned __int32 originAnglesError : 1;
  unsigned __int32 partOfZBarrier : 1;
  unsigned __int32 linkRelativeAngles : 1;
  unsigned __int32 sndTurretWasFiring : 1;
  unsigned __int32 clientMainThreaded : 1;
  unsigned __int32 renderInThirdPersonSpectate : 1;
  unsigned __int32 overrideLightingOrigin : 1;
  unsigned __int32 forceNotSimple : 1;
};

/* 2942 */
union $BCCF836689843458A9E18E96902FCBED
{
  unsigned int packed_bits[2];
  $2C268F07489A8B2B324034942807AD28 __s1;
};

/* 2934 */
struct centity_t
{
  cpose_t pose;
  LerpEntityState prevState;
  entityState_s nextState;
  __int16 previousEventSequence;
  int miscTime;
  int lastMuzzleFlash;
  int numShotsFiredLast;
  unsigned __int16 attachModelNames[2];
  unsigned __int16 attachTagNames[2];
  XAnimTree_s *tree;
  Destructible *destructible;
  NitrousVehicle *nitrousVeh;
  cLinkInfo_s *linkInfo;
  cgVehicle_t *vehicle;
  ClientTagCache *clientTagCache;
  AimTargetCache *aimTargetInfo;
  cgScriptMover_s *cScriptMover;
  canimscripted_t *scripted;
  cgZBarrier_s *zbarrier;
  DroppedWeaponDobjInfo *droppedWeaponDobjInfo;
  int nextSlideFX;
  unsigned __int16 flagIndex;
  unsigned __int16 flagState;
  Material *compassMaterial;
  int lastTrailTime;
  unsigned int fxTrailHandle;
  unsigned int fxProjExplosion;
  unsigned int fxHeartbeat;
  unsigned int fxLaserSight;
  vec3_t oldLinkOrigin;
  vec3_t originError;
  vec3_t anglesError;
  char tracerDrawRateCounter;
  centity_t *updateDelayedNext;
  unsigned __int16 classname;
  unsigned int stepSound;
  char footstepSurfaceOverride;
  char deployedRiotshieldHits[8];
  $BCCF836689843458A9E18E96902FCBED ___u38;
};

/* 2943 */
struct playerEntity_t
{
  float fLastWeaponPosFrac;
  int bPositionToADS;
  vec3_t vPositionLastOrg;
  float fLastIdleFactor;
  vec3_t baseMoveOrigin;
  vec3_t baseMoveAngles;
};

/* 2944 */
struct GfxFilm
{
  bool enabled;
  vec4_t visColorRangeS;
  vec4_t visColorRangeE;
  vec4_t visColorShadowMatrixR;
  vec4_t visColorShadowMatrixG;
  vec4_t visColorShadowMatrixB;
  vec4_t visColorMidtoneMatrixR;
  vec4_t visColorMidtoneMatrixG;
  vec4_t visColorMidtoneMatrixB;
  vec4_t visColorHilightMatrixR;
  vec4_t visColorHilightMatrixG;
  vec4_t visColorHilightMatrixB;
  vec4_t visColorFinalGamma;
  vec4_t visColorFinalSaturation;
  vec4_t visColorFinalBlend;
  __int16 lutA;
  __int16 lutB;
  __int16 lutC;
  __int16 lutD;
  vec4_t lutBlendWeights;
  float filmLut;
  vec4_t sunFlareTint;
};

/* 2945 */
struct GfxBloom
{
  vec4_t visBloomLevelsRGBYInB;
  vec4_t visBloomLevelsRGBYInG;
  vec4_t visBloomLevelsRGBYInW;
  vec4_t visBloomLevelsRGBYOutB;
  vec4_t visBloomLevelsRGBYOutW;
  vec4_t visBloomRGBHi;
  vec4_t visBloomRGBLo;
  vec4_t visBloomYHi;
  vec4_t visBloomYLo;
};

/* 2946 */
struct GfxReviveFx
{
  bool enabled;
  float reviveEdgeColorTemp;
  float reviveEdgeSaturation;
  vec3_t reviveEdgeScale;
  vec3_t reviveEdgeContrast;
  vec3_t reviveEdgeOffset;
  float reviveEdgeMaskAdjust;
  float reviveEdgeAmount;
};

/* 2947 */
struct GfxLightScale
{
  float diffuseScale;
  float specularScale;
};

/* 2948 */
struct GfxVisionSet
{
  GfxFilm film;
  GfxBloom bloom;
  GfxReviveFx reviveFx;
  GfxLightScale charPrimaryLightScale;
};

/* 2949 */
struct __declspec(align(4)) GfxDepthOfField
{
  float viewModelStart;
  float viewModelEnd;
  float nearStart;
  float nearEnd;
  float farStart;
  float farEnd;
  float nearBlur;
  float farBlur;
  bool useAltMaterial;
};

/* 2950 */
struct GfxDoubleVision
{
  vec3_t direction;
  float motionBlurMagnitude;
  float deltaPerMS;
  float cur;
  float targ;
};

/* 2951 */
struct __declspec(align(4)) GfxCompositeFx
{
  vec2_t distortionScale;
  float blurRadius;
  float distortionMagnitude;
  float frameRate;
  int lastUpdate;
  int frame;
  int startMSec;
  int currentTime;
  int duration;
  bool enabled;
  bool scriptEnabled;
};

/* 2952 */
struct GfxGenericFilter
{
  bool passEnabled[8][4];
  Material *passMaterial[8][4];
  int passTarget[8][4];
  int passSampler0[8][4];
  int passSampler1[8][4];
  float passParam[8][4][16];
  int passQuads[8][4];
  int bitFlag[8];
};

/* 2953 */
struct GfxPoison
{
  float curAmountTarget;
  float curAmount;
};

/* 2954 */
struct __declspec(align(4)) GfxSaveScreenParam
{
  float s0;
  float t0;
  float ds;
  float dt;
  LocalClientNum_t screenTimerId;
  char mode;
};

/* 2955 */
struct __declspec(align(4)) GfxBlendSaveScreenBlurredParam
{
  int fadeMsec;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
  char enabled;
};

/* 2956 */
struct __declspec(align(4)) GfxBlendSaveScreenFlashedParam
{
  float intensityWhiteout;
  float intensityScreengrab;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
  char enabled;
};

/* 2957 */
struct GfxSaveScreenFx
{
  GfxSaveScreenParam saveScreenParam;
  GfxBlendSaveScreenBlurredParam blendBlurredParam;
  GfxBlendSaveScreenFlashedParam blendFlashedParam;
};

/* 2958 */
union $19132E92B196F60E41D16D54F71FC8FB
{
  vec4_t m[4];
  float member[16];
};

/* 2959 */
struct float44
{
  $19132E92B196F60E41D16D54F71FC8FB ___u0;
};

/* 2960 */
struct GfxLight
{
  char type;
  char canUseShadowMap;
  char shadowmapVolume;
  __int16 cullDist;
  vec3_t color;
  vec3_t dir;
  vec3_t origin;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  unsigned int spotShadowIndex;
  float dAttenuation;
  float roundness;
  vec3_t angles;
  float spotShadowHiDistance;
  vec4_t diffuseColor;
  vec4_t shadowColor;
  vec4_t falloff;
  vec4_t aAbB;
  vec4_t cookieControl0;
  vec4_t cookieControl1;
  vec4_t cookieControl2;
  __declspec(align(16)) float44 viewMatrix;
  float44 projMatrix;
  GfxLightDef *def;
};

/* 2961 */
struct GfxViewport
{
  int x;
  int y;
  int width;
  int height;
};

/* 2962 */
struct GfxWorldFog
{
  float baseDist;
  float halfDist;
  float baseHeight;
  float halfHeight;
  float sunFogPitch;
  float sunFogYaw;
  float sunFogInner;
  float sunFogOuter;
  vec3_t fogColor;
  float fogOpacity;
  vec3_t sunFogColor;
  float sunFogOpacity;
};

/* 2963 */
struct WaterFogDef
{
  int startTime;
  int finishTime;
  vec4_t color;
  float fogStart;
  float density;
  float heightDensity;
  float baseHeight;
  vec4_t sunFogColor;
  vec3_t sunFogDir;
  float sunFogStartAng;
  float sunFogEndAng;
};

/* 2964 */
struct ExtraCamLodInfo
{
  vec3_t pos[4];
  unsigned int posValidBits;
};

/* 2965 */
struct GfxRippleWave
{
  vec3_t wavePosition;
  float waveWidth;
  float waveSpeedScale;
  float waveAmplitudeRatio;
  float waveInnerStart;
  float waveInnerEnd;
  float waveOuterStart;
  float waveOuterEnd;
  int waveTimeStamp;
};

/* 2966 */
struct __declspec(align(8)) refdef_t
{
  unsigned int x;
  unsigned int y;
  unsigned int width;
  unsigned int height;
  float sceneViewportX;
  float sceneViewportY;
  float sceneViewportWidth;
  float sceneViewportHeight;
  float tanHalfFovX;
  float tanHalfFovY;
  float maincamTanHalfFovY;
  float extracamTanHalfFovY;
  float fov_x;
  vec3_t vieworg;
  float yaw;
  vec3_t viewaxis[3];
  int frametime;
  int time;
  float zNear;
  float zFar;
  GfxVisionSet visionset;
  float blurRadius;
  GfxDepthOfField dof;
  float rimIntensity;
  vec4_t genericSceneVector0;
  vec4_t genericSceneVector1;
  vec4_t genericSceneVector2;
  vec4_t genericSceneVector3;
  vec4_t cameraVelocity;
  GfxDoubleVision doubleVision;
  GfxCompositeFx flameFx;
  GfxCompositeFx waterSheetingFx;
  GfxGenericFilter genericFilter;
  GfxPoison poisonFx;
  GfxCompositeFx electrifiedFx;
  GfxCompositeFx transportedFx;
  GfxSaveScreenFx saveScreenFx;
  float sunVisibility;
  GfxLight primaryLights[255];
  GfxViewport scissorViewport;
  bool useScissorViewport;
  LocalClientNum_t localClientNum;
  int hideMatureContent;
  int splitscreen;
  int splitscreenBlurEdges;
  int playerTeleported;
  int oldExposureId;
  int newExposureId;
  float lerpcount;
  int lastTime;
  float exposure;
  float linearExposure;
  unsigned __int16 exposureMode;
  unsigned __int16 worldFogMode;
  vec3_t worldFogVolumeEntryPosition;
  __int16 newWorldFogVolumeId;
  __int16 oldWorldFogVolumeId;
  int worldFogVolumeTimeStamp;
  int worldFogFlags;
  bool worldFogSnapTransition;
  bool worldFogUseSystemTime;
  GfxWorldFog worldFogOld;
  GfxWorldFog worldFogNow;
  __int16 worldFogModifierVolumeId;
  int worldFogModifierTimeStamp;
  float worldFogModifierTimeScale;
  float worldFogModifierScaleD;
  float worldFogModifierScaleH;
  vec4_t worldFogModifierColorA;
  float nWorldFogModifierScaleD;
  float nWorldFogModifierScaleH;
  vec4_t nWorldFogModifierColor;
  vec3_t worldFogVolumeLastViewOrg;
  unsigned __int16 lutBankMask;
  __int16 lutScriptIndex;
  __int16 newLutVolumeId;
  __int16 oldLutVolumeId;
  int lutVolumeTimeStamp;
  float lutBlendWeights[32];
  float postEmissiveBrightening;
  bool noLodCullOut;
  float lodScaleRigid;
  float lodScaleSkinned;
  WaterFogDef waterFog;
  float adsZScale;
  ExtraCamLodInfo extraCamLodInfo;
  vec3_t preExtraCamVieworg;
  vec3_t preExtraCamViewaxis[3];
  float preExtraCamTanHalfFovX;
  float preExtraCamTanHalfFovY;
  float weaponTanHalfFovX;
  float weaponTanHalfFovY;
  bool sonarActive;
  bool sonarUseThermalMaterial;
  bool sonarOverrideBlend;
  float sonarTanHalfFovX;
  float sonarTanHalfFovY;
  vec2_t sonarViewScale;
  vec2_t sonarViewOffset;
  float sonarBlur;
  bool drawInfrared;
  float convergence;
  bool drawPostBlur;
  bool drawWaypointsPostBloom;
  bool useColorControl;
  float colorSaturation;
  float colorTemp;
  float colorHue;
  vec3_t colorScale;
  GfxRippleWave rWaves[1];
  bool darknessActive;
};

/* 2967 */
struct ScriptCamera
{
  int flags;
  vec3_t origin;
  vec3_t angles;
  vec3_t lookat;
  int originCent;
  int lookAtCent;
};

/* 2968 */
struct __declspec(align(4)) ScriptExtraCam
{
  vec3_t origin[4];
  vec3_t angles[4];
  int entNum[4];
  float fov[4];
  int curCameraIndex;
  bool multiCamEnabled;
  bool multiCamRequest;
};

/* 2969 */
struct __declspec(align(4)) Camera
{
  vec3_t lastViewOrg;
  vec3_t lastViewAngles;
  float lastFOV;
  int lastViewInputTime;
  float lastSpringOffset;
  float lastViewTraceFraction;
  int lastTime;
  int lastClientNum;
  vec3_t tweenStartOrg;
  vec3_t tweenStartAngles;
  float tweenStartFOV;
  int tweenStartTime;
  float tweenDuration;
  CameraMode lastCamMode;
  int lastVehicleDefIndex;
  int lastVehicleSeatPos;
  vec3_t missileViewAngles;
  bool missileWasKillCam;
  ScriptCamera scriptCam;
  ScriptExtraCam scriptExtraCam;
  bool useTagCamera;
  bool bWasRemoteTurretCam;
};

/* 2970 */
struct __declspec(align(4)) objectiveMapInfo_t
{
  Material *icon;
  float iconSize;
  __int8 ignoreEntity : 1;
  __int8 rotateWithEntity : 1;
  __int8 flipMaterial : 1;
  __int8 clipToMap : 1;
  __int8 colorMaterialInCode : 1;
  __int8 stencilToPartialMap : 1;
};

/* 2971 */
struct viewDirectionalHitIndicator_t
{
  int time;
  vec3_t entOrigin;
};

/* 2972 */
struct viewDamage_t
{
  int time;
  int duration;
  float yaw;
};

/* 2981 */
struct shellshock_t
{
  shellshock_parms_t *parms;
  int startTime;
  int duration;
  int loopEndTime;
  float sensitivity;
  vec2_t viewDelta;
  int hasSavedScreen;
  int visionSetStarted;
};

/* 2982 */
struct $F6DFD6D87F75480A1EF1906639406DF5
{
  int time;
  int duration;
};

/* 3007 */
struct lerpFrame_t
{
  float yawAngle;
  int yawing;
  float pitchAngle;
  int pitching;
  int animationNumber;
  animation_s *animation;
  int animationTime;
  vec3_t oldFramePos;
  float oldFrameYaw;
  float animSpeedScale;
  int oldFrameSnapshotTime;
};

/* 3008 */
struct SonarAttachmentInfo
{
  vec3_t prevOrigin;
  float movementDistance[60];
  int nextMovementDistanceIndex;
};

/* 3009 */
struct clientInfo_t
{
  int infoValid;
  int nextValid;
  ClientNum_t clientNum;
  char name[32];
  team_t team;
  team_t oldteam;
  ffa_team_t ffaTeam;
  int clanAbbrev_IsEliteValidated;
  unsigned __int64 leagueTeamID;
  int leagueDivisionID;
  unsigned __int64 leagueSubdivisionID;
  Material *hLeagueDivisionIcon;
  int leagueSubdivisionRank;
  int rank;
  $137F9095F7597C63EB19E8F61F5887B0 ___u14;
  int needsRevive;
  unsigned int perks[2];
  unsigned __int64 xuid;
  char clanAbbrev[8];
  score_s score;
  Material *hStatusIcon;
  Material *hRankIcon;
  int location;
  int health;
  char model[64];
  char attachModelNames[6][64];
  char attachTagNames[6][64];
  unsigned int modelChecksum;
  unsigned int attachModelChecksums[6];
  unsigned int attachTagChecksums[6];
  lerpFrame_t legs;
  lerpFrame_t torso;
  float lerpMoveDir;
  float lerpLean;
  vec3_t playerAngles;
  int leftHandGun;
  int dobjDirty;
  clientControllers_t control;
  int lastDamageTime;
  int lastStandStartTime;
  int turnedHumanTime;
  __int64 moveType;
  __int64 eventType;
  int beingRevived;
  unsigned int clientConditions[25];
  XAnimTree_s *pXAnimTree;
  Weapon DObjWeapon;
  char weaponModel;
  Weapon DObjOffhandWeapon;
  Weapon DObjMeleeWeapon;
  char meleeWeaponModel;
  int showReloadClipInHand;
  int hideWeaponClipModel;
  int dropWeaponClipTime;
  int stanceTransitionTime;
  int turnAnimEndTime;
  char turnAnimType;
  int attachedVehEntNum;
  int attachedVehSeat;
  bool hideWeapon;
  unsigned int weaponHideBits[5];
  bool usingKnife;
  bool usingGrenade;
  bool usingLaser;
  int nextHideWeaponTime;
  vec3_t vehAnimLastOrg;
  vec3_t vehAnimLastAngle;
  int vehAnimLastBone;
  int vehAnimLastTime;
  int vehAnimLerpStartTime;
  int vehAnimLerpEndTime;
  float weaponSpinLerp;
  float lastWeaponSpinLerp;
  float weaponSpin;
  bool wasFiring[5];
  int laseFXCentNum;
  unsigned int laseFXHandle;
  int clientUIVisibilityFlags;
  int teleportTime;
  bool teleportBit;
  int surfaceType;
  int movementType;
  int footstepEventCount;
  SonarAttachmentInfo sonarAttachmentInfo;
  float infraredFadeOut;
  WeaponDobjInfo weaponDobjInfo;
  int offhandWeaponVisible;
};

/* 3016 */
struct actorLerpFrame_t
{
  int bAnimating;
  int animationState;
};

/* 3017 */
struct animInfo_t
{
  actorLerpFrame_t lerp;
  lerpFrame_t legs;
};

/* 3018 */
struct actorInfo_t
{
  int infoValid;
  int nextValid;
  int actorNum;
  int entityNum;
  char name[32];
  char model[64];
  char attachModelNames[6][64];
  char attachTagNames[6][64];
  unsigned int modelChecksum;
  unsigned int attachModelChecksums[6];
  unsigned int attachTagChecksums[6];
  unsigned int attachIgnoreCollision;
  animInfo_t animInfo;
  int animScriptedAnim;
  int nextAnimScriptedAnim;
  SonarAttachmentInfo sonarAttachmentInfo;
  int dobjDirty;
  XAnimTree_s *pXAnimTree;
};

/* 3019 */
struct bgs_clientfieldapi_t
{
  void (__cdecl *CompareHashToGameState)(unsigned int);
  bool (__cdecl *AllowVersionReRegistration)();
  bool (__cdecl *FieldVersionAllowsRegistration)(clientField_s *, unsigned int);
  bool (__cdecl *ServerVersionAllowsRegistration)(unsigned int);
};

/* 3020 */
struct bgs_t
{
  bgsAnim_s *animData;
  bgsClientFields_s *clientFields;
  scr_animtree_t (*scriptmoveranim_trees)[16];
  unsigned int *scriptmoveranim_tree_count;
  int time;
  int latestSnapshotTime;
  int frametime;
  int anim_user;
  int proneTime[18];
  XModel *(__cdecl *GetXModel)(const char *);
  void (__cdecl *CreateDObj)(DObjModel_s *, unsigned __int16, XAnimTree_s *, int, LocalClientNum_t, clientInfo_t *);
  unsigned __int16 (__cdecl *AttachWeapon)(DObjModel_s *, unsigned __int16, clientInfo_t *, bool);
  unsigned __int16 (__cdecl *AttachStowedWeapon)(DObjModel_s *, unsigned __int16, entityState_s *, WeaponDobjInfo *, Weapon, unsigned __int16 *);
  DObj *(__cdecl *GetDObj)(int, LocalClientNum_t);
  void (__cdecl *SafeDObjFree)(int, LocalClientNum_t);
  void *(__cdecl *AllocXAnim)(int);
  void (__cdecl *AnimCmdRefCount)(__int16, __int16, int);
  void (__cdecl *AnimCmdAddDependent)(__int16, __int16);
  void (__cdecl *SetEntAnimSpeed)(int, float);
  float (__cdecl *GetEntAnimSpeed)(int);
  clientInfo_t clientinfo[18];
  actorInfo_t actorinfo[32];
  void (__cdecl *PlayerDobjChanging)(LocalClientNum_t, clientInfo_t *, Weapon);
  void (__cdecl *Scr_AddInt)(int);
  void (__cdecl *Scr_AddFloat)(float);
  void (__cdecl *Scr_AddString)(const char *);
  void (__cdecl *Scr_AddLocalClientNumber)(LocalClientNum_t);
  void (__cdecl *Scr_ExecEntThreadNum)(LocalClientNum_t, int, int, int);
  bgs_clientfieldapi_t clientFieldAPI;
};

/* 3021 */
struct visionSetVars_t
{
  bool filmEnable;
  vec4_t visBloomLevelsRGBYInB;
  vec4_t visBloomLevelsRGBYInG;
  vec4_t visBloomLevelsRGBYInW;
  vec4_t visBloomLevelsRGBYOutB;
  vec4_t visBloomLevelsRGBYOutW;
  vec4_t visBloomRGBHi;
  vec4_t visBloomRGBLo;
  vec4_t visBloomYHi;
  vec4_t visBloomYLo;
  vec4_t visColorRangeS;
  vec4_t visColorRangeE;
  vec4_t visColorShadowMatrixR;
  vec4_t visColorShadowMatrixG;
  vec4_t visColorShadowMatrixB;
  vec4_t visColorMidtoneMatrixR;
  vec4_t visColorMidtoneMatrixG;
  vec4_t visColorMidtoneMatrixB;
  vec4_t visColorHilightMatrixR;
  vec4_t visColorHilightMatrixG;
  vec4_t visColorHilightMatrixB;
  vec4_t visColorFinalGamma;
  vec4_t visColorFinalSaturation;
  vec4_t visColorFinalBlend;
  float filmLut;
  bool reviveEnable;
  float reviveEdgeColorTemp;
  float reviveEdgeSaturation;
  vec3_t reviveEdgeScale;
  vec3_t reviveEdgeContrast;
  vec3_t reviveEdgeOffset;
  float reviveEdgeMaskAdjust;
  float reviveEdgeAmount;
  bool charPrimaryUseTweaks;
  float charPrimaryDiffuseScale;
  float charPrimarySpecularScale;
  float masterRingmod;
  float reverbRingmod;
  float hiFilter;
  float lowFilter;
  vec4_t sunFlareTint;
  float postEmissiveBrightening;
  char name[64];
};

/* 3022 */
struct visionSetLerpData_t
{
  int timeStart;
  int timeDuration;
  float lerpFraction;
  visionSetLerpStyle_t style;
};

/* 3023 */
struct $BE9F66374A020A9809EEAF403416A176
{
  float aimSpreadScale;
};

/* 3024 */
struct transPlayerState_t
{
  int otherFlags;
  int damageEvent;
  __int16 predictableEventSequence;
  int predictableEvents[4];
  __int16 unpredictableEventSequence;
  int unpredictableEvents[4];
};

/* 3025 */
struct hudElemSoundInfo_t
{
  int lastPlayedTime;
};

/* 3026 */
struct CompassScrambler
{
  vec2_t pos;
  int startTime;
  int handle;
};

/* 3027 */
struct ShieldHitDelayedEvent
{
  unsigned int eventParm;
};

/* 3028 */
struct cg_t::FogSettings
{
  float start;
  float r;
  float g;
  float b;
  float density;
  float heightDensity;
  float baseHeight;
  float fogColorScale;
  float sunFogColorR;
  float sunFogColorG;
  float sunFogColorB;
  float sunFogDirX;
  float sunFogDirY;
  float sunFogDirZ;
  float sunFogStartAng;
  float sunFogEndAng;
  float fogMaxOpacity;
};

/* 2940 */
struct DroppedWeaponDobjInfo
{
  int entnum;
  WeaponDobjInfo weaponDobjInfo;
};

/* 3029 */
struct footstepEvent_t
{
  centity_t *cent;
  unsigned __int16 bone;
  unsigned __int16 notetrack;
  char moveType;
  char surface;
  unsigned __int32 playerView : 1;
  unsigned __int32 quiet : 1;
  unsigned __int32 isLouder : 1;
  unsigned __int32 footprint : 1;
};

/* 3030 */
struct bullet_hit_info_t
{
  vec3_t hitp;
  vec3_t hitn;
  int sflags;
  float depth;
  int hitid;
  float range;
};

/* 3031 */
struct targetInfo_t
{
  int entNum;
  vec3_t offset;
  int materialIndex;
  int offscreenMaterialIndex;
  int flags;
};

/* 3032 */
struct snd_context
{
  unsigned int type;
  unsigned int value;
};

/* 3033 */
struct snd_ambient_script_data
{
  bool isAmbientRoom;
  bool isAmbientPackage;
  bool isDefaultRoom;
  __int16 entnums[16];
  char priorities[16];
  char name[64];
  unsigned int hash;
  int numContexts;
  snd_context contexts[16];
};

/* 3034 */
struct __declspec(align(4)) snd_ambient_collider
{
  int roomTriggerIndex;
  int previousRoomTriggerIndex;
  int packageTriggerIndex;
  int roomPriorityIndex;
  int packagePriorityIndex;
  int entnum;
  unsigned int hash;
  int colliderEntnum;
  bool firstFrame;
  bool inUse;
  unsigned int playerRingoff;
  bool updated;
  bool localPlayer;
};

/* 2935 */
struct __declspec(align(128)) cg_t
{
  ClientNum_t clientNum;
  LocalClientNum_t localClientNum;
  DemoType demoType;
  CubemapShot cubemapShot;
  int cubemapSize;
  int renderScreen;
  int latestSnapshotNum;
  int latestSnapshotTime;
  snapshot_s *snap;
  snapshot_s *nextSnap;
  snapshot_s activeSnapshots[2];
  bool slowMotionModified;
  float frameInterpolation;
  int frametime;
  int time;
  int oldTime;
  int physicsTime;
  int mapRestart;
  bool bThirdPerson;
  thirdPersonType renderingThirdPerson;
  playerState_s predictedPlayerState;
  int lastPlayerStateOverride;
  centity_t predictedPlayerEntity;
  playerEntity_t playerEntity;
  int predictedErrorTime;
  vec3_t predictedError;
  playerState_s lastUIPlayerState;
  float landChange;
  int landTime;
  float heightToCeiling;
  int heightToCeilingTS;
  refdef_t refdef;
  vec3_t refdefViewAngles;
  Camera cameraData;
  float lastPelvisCameraOffset;
  vec3_t baseGunAngles;
  vec3_t swayViewAngles;
  vec3_t swayAngles;
  vec3_t swayOffset;
  vec3_t recoilAngles;
  vec3_t recoilSpeed;
  vec3_t damageKickAngles;
  int previousRecoilTime;
  float previousRecoilRatio;
  vec3_t lastStandSwayAngles;
  vec3_t lastStandSwayAVel;
  vec3_t lastStandSwayTarget;
  vec3_t radiantCameraOrigin;
  vec3_t radiantCameraAngles;
  int radiantCamInUse;
  int iEntityLastType[1792];
  XModel *pEntityLastXModel[1792];
  float zoomSensitivity;
  bool isLoading;
  char objectiveText[1024];
  team_indicator teamIndicator;
  bool colorBlindAssist;
  int teamPlayerMask[10][1];
  int vehicleInitView;
  vec3_t prevVehicleInvAxis[3];
  bool vehicleViewLocked;
  vec3_t vehicleViewLockedAngles;
  int missileInitView;
  vec3_t storedRemoteCameraAngles;
  vec3_t storedRemoteCameraOrigin;
  char scriptMainMenu[256];
  bool initialPlayersConnected;
  bool initialPlayersConnectedRespondedTo;
  int numScores;
  int teamScores[10];
  unsigned int teamHasMeat[10];
  int teamPings[10];
  int teamPlayers[10];
  ClientNum_t scoreOrder[18];
  scoreboardColumnType_t scoreboardColumnTypes[5];
  int matchUIVisibilityFlags;
  unsigned int talkFlags;
  objectiveMapInfo_t objectiveMapInfo[64][2];
  objective_t clientObjectives[32];
  int bombTimer[2];
  int showScores;
  int scoreFadeTime;
  int scoresTop;
  int scoresOffBottom;
  int scoresBottom;
  int selectedGamerIndex;
  int bannerLines[10];
  unsigned __int64 selectedGamerXuid;
  int selectedGamerClientNum;
  int drawHud;
  int timeScaleTimeStart;
  int timeScaleTimeEnd;
  float timeScaleStart;
  float timeScaleEnd;
  ClientNum_t crosshairClientNum;
  int crosshairClientLastTime;
  int crosshairClientStartTime;
  unsigned int crosshairTraceDistance;
  unsigned int airburstMarkDistance;
  int airburstMarkStartTime;
  int airburstMarkEndTime;
  int airburstMarkInProgress;
  int gpsJammerLastInactive;
  int bulletsFiredContinuously;
  int bulletsFiredContinuouslyLeft;
  int bulletsFiredStopTime;
  int cursorHintIcon;
  int cursorHintTime;
  int cursorHintFade;
  int cursorHintString;
  int vehicleHintTime;
  int lastVehicleSeat;
  int driverHintShown;
  int gunnerHintShown;
  int lastClipFlashTime;
  InvalidCmdHintType invalidCmdHintType;
  int invalidCmdHintTime;
  SuccessfulCmdHintType successfulCmdHintType;
  int successfulCmdHintTime;
  int lastHealthPulseTime;
  int lastHealthLerpDelay;
  int lastHealthClient;
  float lastHealth;
  float healthOverlayFromAlpha;
  float healthOverlayToAlpha;
  int healthOverlayPulseTime;
  int healthOverlayPulseDuration;
  int healthOverlayPulsePhase;
  bool healthOverlayHurt;
  int healthOverlayLastHitTime;
  float healthOverlayOldHealth;
  int healthOverlayPulseIndex;
  int proneBlockedEndTime;
  int lastStance;
  int lastStanceChangeTime;
  int lastStanceFlashTime;
  int voiceTime;
  Weapon weaponSelect;
  int weaponSelectTime;
  bool weaponForcedSelect;
  Weapon weaponLatestPrimary;
  Weapon lastWeaponForAlt[15];
  unsigned int viewModelFx;
  Weapon prevViewmodelWeapon;
  bool prevViewmodelWeaponInASD;
  Weapon equippedOffHand;
  viewDirectionalHitIndicator_t directionalHitIndicator[4];
  viewDamage_t viewDamage[8];
  int damageTime;
  float damageX;
  float damageY;
  float damageValue;
  float viewFade;
  int waterDropCount;
  int waterDropStartTime;
  int waterDropStopTime;
  int weaponIdleTime;
  int nomarks;
  int clearMarks;
  int newPlayerViewmodel;
  bool weaponLaserOff;
  int v_dmg_time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float v_dmg_flash;
  float fBobCycle;
  float xyspeed;
  vec3_t kickAVel;
  vec3_t kickAngles;
  vec3_t offsetAngles;
  float gunPitch;
  float gunYaw;
  float gunXOfs;
  float gunYOfs;
  float gunZOfs;
  vec3_t flamethrowerKickOffset;
  float minigunSpinAngle;
  vec3_t viewModelAxis[4];
  float rumbleScale;
  float compassNorthYaw;
  vec2_t compassNorth;
  Material *compassMapMaterial;
  Material *compassMapScrambledMaterial;
  vec2_t compassMapUpperLeft;
  vec2_t compassMapWorldSize;
  int compassLastTime;
  float compassYaw;
  float compassSpeed;
  int compassFadeTime;
  int healthFadeTime;
  int ammoFadeTime;
  int stanceFadeTime;
  int sprintFadeTime;
  int offhandFadeTime;
  int offhandFlashTime;
  int waypointFadeTime;
  int vehicleControlsFadeTime;
  shellshock_t shellshock;
  $F6DFD6D87F75480A1EF1906639406DF5 testShock;
  int shellshockSoundActive;
  int holdBreathTime;
  int holdBreathInTime;
  int holdBreathDelay;
  float holdBreathFrac;
  float radarProgress;
  float satelliteProgress;
  int radarType;
  vec2_t selectedLocation;
  vec2_t selectedYaw;
  int typewriterStartTime;
  vec2_t selectedLocations[3];
  int lastTimeSelected;
  SprintState sprintStates;
  int adsViewErrorDone;
  int inKillCam;
  int wasInKillCam;
  bool killCamFirstFrameRan;
  int killCamEntity;
  int invalidKillCamEntity;
  KillCamEntityType killCamEntityType;
  int killCamLastEntityNum;
  vec3_t killCamLastEntityOrg;
  vec3_t killCamLastEntityAngles;
  KillCamEntityRestState killCamEntityRestState;
  int killCamLookAtEntity;
  vec3_t killCamLookAt;
  vec3_t killCamHelicopterOffset;
  __int16 killCamLastVehicleDefIndex;
  int killCamStoppedTime;
  float killCamStoppedDecelTime;
  vec3_t killCamStoppedPos;
  vec3_t killCamStoppedVel;
  vec3_t killCamPrevBombOrigin;
  int killCamLerpEndTime;
  vec3_t killCamOldViewAngles;
  vec3_t killCamOldViewOrg;
  bgs_t bgs;
  cpose_t viewModelPose;
  visionSetVars_t visionSetPreLoaded[8];
  char visionSetPreLoadedName[8][64];
  visionSetVars_t visionSetFrom[8];
  visionSetVars_t visionSetTo[8];
  visionSetVars_t visionSetCurrent[8];
  visionSetLerpData_t visionSetLerpData[8];
  char visionNameNaked[64];
  char visionNameNight[64];
  char visionNameLastStand[64];
  char visionNameFlare[64];
  char visionNameInfrared[64];
  char visionNameTvguided[64];
  char visionNameExtraCam[64];
  bool drewReticle;
  bitarray<64> extraButton_bits;
  bool breathPressedLastFrame;
  int lastActionSlotTime;
  bool playerTeleported;
  float flareRatioLastFrame;
  int stepViewStart;
  float stepViewChange;
  $BE9F66374A020A9809EEAF403416A176 lastFrame;
  int oldCommandTime;
  vec3_t oldOrigin;
  vec3_t oldViewangles;
  transPlayerState_t oldTransPlayerState;
  hudElemSoundInfo_t hudElemSound[32];
  int nextRippleTime;
  unsigned int impactEffectsNext;
  unsigned int impactEffects[256];
  float warDesiredMomentumProgress;
  float warCurrentMomentumProgress;
  int warMomentumMultiplier;
  int warMomentumBlitzkriegTime;
  int warMomentumFlashTime;
  float gunnerPitchOffset;
  unsigned int centInNextSnapshot[32];
  centity_t *slideFakeEnt;
  int cameraLinkedEntitiesCount;
  int cameraLinkedEntities[4];
  link_type_e cameraLinkedEntitiesType[4];
  vec3_t cameraLinkedEntitiesOffset[4];
  int groundTiltEntNum;
  int poisoned;
  Material *genericMaterialMap[64];
  bool genericFilterPassEnabled[8][4];
  Material *genericFilterPassMaterial[8][4];
  int genericFilterPassTarget[8][4];
  int genericFilterPassSampler0[8][4];
  int genericFilterPassSampler1[8][4];
  float genericFilterPassParam[8][4][16];
  int genericFilterPassQuads[8][4];
  int genericFilterBitFlag[8];
  bool genericOverlayEnabled[3];
  Material *genericOverlayMaterial[3];
  float genericOverlayParam[3][16];
  int genericOverlaySortIndex[3];
  float genericOverlayParamADS[8];
  bool genericOverlayEnableADS;
  int swimming;
  int swimmingStartTime;
  int missileViewWobbleLastTime;
  vec3_t missileViewWobbleFreq;
  vec3_t missileViewWobbleAmp;
  int counterSpinTime;
  float counterSpinTarget;
  float counterSpinAngle;
  int extraCamEntity;
  int extraCamActive;
  int extraCamStatic;
  vec3_t extraCamOrigin;
  vec3_t extraCamAngles;
  int hasLocalRadar;
  vec2_t localRadarPos;
  float localRadarProgress;
  int globalScramblerActive;
  float scramblerEnemyAlpha;
  float scramblerFriendlyAlpha;
  int popUpSwayStartTime;
  float popupRotationAngle;
  float popUpAngleDelta;
  CompassScrambler compassScrambler[16];
  centity_t *closestEnemyScrambler;
  int alliesFlagAway;
  int axisFlagAway;
  int resetWeaponStateFlag;
  int delayedShieldHitEventsCount;
  ShieldHitDelayedEvent delayedShieldHitEvents[2];
  int recentKilledByClientNum;
  int recentKilledByTime;
  int recentVictimClientNums[8];
  int recentVictimTimes[8];
  int recentVictimIndex;
  bool talkingToEnemy;
  cg_t::FogSettings serverFogSettings;
  bool forceInfraredMaterialsStreaming;
  bool sonarAttachmentOn;
  bool hudOutlineOn;
  bool sonarAttachmentFullscreenOn;
  DroppedWeaponDobjInfo droppedWeaponDobjInfo[64];
  vec3_t traceHitPos;
  int traceHitDistance;
  bool traceHitEnemy;
  int rangeFinderStartTime;
  bool rangeFinderTimerActive;
  bool rangeFinderPerformTrace;
  bool rangeFinderPerformFxVisTest;
  int playerVehicleEntity;
  bool clientCollisionLinked;
  float altScopeFrac;
  int lastAltScopeFracUpdateTime;
  bool useAlternateAimAssistParams;
  bool useFlashLight;
  int empStartTime;
  int lastEmpTime;
  footstepEvent_t footstepEvents[16];
  unsigned int numFootstepEvents;
  int movers[64];
  int moversCount;
  bullet_hit_info_t hit_infos[12];
  int num_hit_infos;
  int hit_charge;
  bool hit_possible;
  bool bClientNeedsConnectCallback;
  targetInfo_t targets[32];
  snd_ambient_script_data soundAmbientData[32];
  int numAmbientDataStructs;
  snd_ambient_script_data *defaultAmbientRoom;
  snd_ambient_collider soundAmbientColliderData[64];
  int currentAmbientRoom;
  int currentAmbientPackage;
  unsigned int ambientRoomOverride;
  unsigned int ambientPackageOverride;
  int shoutcastListenInBits;
  Weapon selectedClassWeapon;
  int gumpTransitionState;
  vec3_t gumpTransitionColor;
  float gumpTransitionAlpha;
  int gumpTransitionTime;
  int hudDpadShown;
  int resetLuiNeeded;
  int hostMigrationOccured;
  int safeSpectatorCamTime;
  vec3_t safeSpectatorCamPos;
  vec3_t safeSpectatorCamOffset;
  team_t team;
};

/* 2936 */
struct ZBarrierBoard
{
  XModel *pBoardModel;
  XModel *pAlternateBoardModel;
  XModel *pUpgradedBoardModel;
  const char *pTearAnim;
  const char *pBoardAnim;
  FxEffectDef *repairEffect1;
  FxEffectDef *repairEffect2;
  vec3_t repairEffect1Offset;
  vec3_t repairEffect2Offset;
  unsigned int boardRepairSound;
  unsigned int boardRepairHoverSound;
  unsigned int pauseAndRepeatRepSound;
  float minPause;
  float maxPause;
  unsigned __int16 zombieBoardTearStateName;
  unsigned __int16 zombieBoardTearSubStateName;
  unsigned int numRepsToPullProBoard;
};

/* 2937 */
struct ZBarrierDef
{
  const char *name;
  unsigned int generalRepairSound1;
  unsigned int generalRepairSound2;
  unsigned int upgradedGeneralRepairSound1;
  unsigned int upgradedGeneralRepairSound2;
  unsigned int delayBetweenRepSounds;
  float delayBetweenRepSoundsDuration;
  unsigned int earthquakeOnRepair;
  float earthquakeMinScale;
  float earthquakeMaxScale;
  float earthquakeMinDuration;
  float earthquakeMaxDuration;
  float earthquakeRadius;
  int numBoardsInBarrier;
  unsigned int autoHideOpenPieces;
  unsigned int taunts;
  unsigned int reachThroughAttacks;
  unsigned __int16 zombieTauntAnimState;
  unsigned __int16 zombieReachThroughAnimState;
  int numAttackSlots;
  float attackSpotHorzOffset;
  ZBarrierBoard boards[6];
};

/* 2938 */
struct __declspec(align(4)) _cgZBarrierPiece_t
{
  centity_t *pPiece;
  XModel *curXModel;
  void (__cdecl *pStateLogic)(LocalClientNum_t, cg_t *, centity_t *, ZBarrierDef *, _cgZBarrierPiece_t *, LerpEntityStateZBarrierPiece *, unsigned int);
  int timeVal;
  int intVal;
  char state;
  char prevState;
  char subState;
  char nextSubState;
  char curAnim;
  bool flagsChanged;
};

/* 2939 */
struct cgZBarrier_s
{
  bool forceUpdateForDemoJump;
  _cgZBarrierPiece_t pieces[6];
};

/* 2973 */
struct $28146FA977729471E9CF89336D629787
{
  int blurredFadeTime;
  int blurredEffectTime;
  int flashWhiteFadeTime;
  int flashShotFadeTime;
  ShockViewTypes type;
};

/* 2974 */
struct $B32C35443884083D3CC13DCD5C8D7874
{
  int fadeTime;
  float kickRate;
  float kickRadius;
};

/* 2975 */
struct $16D8FAD28A08B38292F67C768CC14C4C
{
  bool affect;
  char loop[64];
  char loopSilent[64];
  char end[64];
  char endAbort[64];
  int fadeInTime;
  int fadeOutTime;
  float drylevel;
  float wetlevel;
  char roomtype[64];
  int modEndDelay;
  int loopFadeTime;
  int loopEndDelay;
  char snapshot[64];
};

/* 2976 */
struct $52C58A71BD00586BA7DCB8AF66236D72
{
  bool affect;
  int fadeTime;
  float mouseSensitivity;
  float maxPitchSpeed;
  float maxYawSpeed;
};

/* 2977 */
struct $02B41AB872540B0D7FA7A4D4D9EBD97F
{
  float scale;
};

/* 2978 */
struct $1BC6F870A2CCF543567EAA1D445E0BBA
{
  bool affect;
};

/* 2979 */
struct $50D21064AB3C35E3954292D19EEA2E03
{
  char name[32];
  int inTime;
  int outTime;
};

/* 2980 */
const struct shellshock_parms_t
{
  $28146FA977729471E9CF89336D629787 screenBlend;
  $B32C35443884083D3CC13DCD5C8D7874 view;
  $16D8FAD28A08B38292F67C768CC14C4C sound;
  $52C58A71BD00586BA7DCB8AF66236D72 lookControl;
  $02B41AB872540B0D7FA7A4D4D9EBD97F movement;
  $1BC6F870A2CCF543567EAA1D445E0BBA animation;
  $50D21064AB3C35E3954292D19EEA2E03 visionSet;
};

/* 2983 */
struct __declspec(align(8)) animation_s
{
  char name[64];
  int initialLerp;
  int finalLerp;
  float forceAnimRate;
  float moveSpeed;
  float rotSpeed;
  int duration;
  int nameHash;
  int flags;
  __int64 movetype;
  int stance;
  int movestatus;
  int noteType;
};

/* 2984 */
struct animScriptCondition_t
{
  int index;
  unsigned int value;
};

/* 2985 */
struct animScriptCommand_t
{
  __int16 bodyPart[2];
  __int16 animIndex[2];
  unsigned __int16 animDuration[2];
  SndAliasList *soundAlias;
  unsigned __int16 tagName;
  unsigned __int16 flags;
};

/* 2986 */
struct animScriptItem_t
{
  int numConditions;
  animScriptCondition_t conditions[4];
  int numCommands;
  animScriptCommand_t commands[8];
};

/* 2987 */
struct animScript_t
{
  int numItems;
  animScriptItem_t *items[128];
};

/* 2988 */
struct scr_animtree_t
{
  XAnim_s *anims;
};

/* 2989 */
struct animScriptData_t
{
  animation_s animations[1024];
  unsigned int numAnimations;
  animScript_t scriptAnims[1][27];
  animScript_t scriptCannedAnims[1][27];
  animScript_t scriptStateChange[1][1];
  animScript_t scriptEvents[37];
  animScriptItem_t scriptItems[2158];
  int numScriptItems;
  scr_animtree_t animTree;
  unsigned __int16 bodyAnim;
  unsigned __int16 mainAnim;
  unsigned __int16 torsoAnim;
  unsigned __int16 legsAnim;
  unsigned __int16 turningAnim;
  SndAliasList *(__cdecl *soundAlias)(const char *);
  void (__cdecl *playSoundAlias)(ClientNum_t, SndAliasList *);
};

/* 2990 */
struct $6CB7272563F4458FB40A4A5E123C4ABA
{
  unsigned __int16 index;
  unsigned __int16 tree;
};

/* 2991 */
union $C5BF64D4969721156737F8B184BAC90E
{
  $6CB7272563F4458FB40A4A5E123C4ABA __s0;
  const char *linkPointer;
};

/* 2992 */
struct scr_anim_s
{
  $C5BF64D4969721156737F8B184BAC90E ___u0;
};

/* 2993 */
struct $0601EE28C50959B45B3BFBBDE3B3EB73
{
  scr_animtree_t tree;
  scr_anim_s body;
  scr_anim_s main;
  scr_anim_s torso;
  scr_anim_s legs;
};

/* 2994 */
struct $125A08E1BDBF9B362A27C42F4EBDD9A4
{
  scr_animtree_t tree;
  scr_anim_s main;
};

/* 2995 */
struct bgsAnim_s
{
  animScriptData_t animScriptData;
  $0601EE28C50959B45B3BFBBDE3B3EB73 generic_human;
  $125A08E1BDBF9B362A27C42F4EBDD9A4 generic_dog;
  unsigned int done_notify;
};

/* 2996 */
union $72298905A63EC80CD213B773017728ED
{
  void (__cdecl *floatCallbackFunc)(LocalClientNum_t, unsigned int, float, float, bool, bool, const char *, bool);
  void (__cdecl *uintCallbackFunc)(LocalClientNum_t, unsigned int, unsigned int, unsigned int, bool, bool, const char *, bool);
};

/* 2997 */
struct clientFieldCodeCallback_s
{
  unsigned __int32 bHasCodeCallback : 1;
  unsigned __int32 bCodeCallbackIsFloatVal : 1;
  $72298905A63EC80CD213B773017728ED ___u2;
};

/* 2998 */
struct clientField_s
{
  int scriptCallbackFunc;
  clientFieldCodeCallback_s codeCallbackFunc;
  unsigned __int16 nameHash;
  unsigned int fieldOffset;
  unsigned int fieldType;
  float floatMin;
  float floatMax;
  unsigned int accessMask;
  int bSplitscreenHostOnly;
  int bCallbacksFor0WhenNew;
  char bitOffset;
  bool obsolete;
  unsigned int numBits;
  unsigned int version;
};

/* 2999 */
struct clientFieldNetfield_s
{
  int bitsUsed;
  int netFieldOffset;
};

/* 3000 */
struct clientFieldSet_s
{
  int numFields;
  clientField_s *pFields[160];
  int numNetFields;
  clientFieldNetfield_s *pNetFields;
};

/* 3001 */
union $4CACCB39A83665877BF7BAA110BB8661
{
  float oldFloat;
  unsigned int oldInt;
};

/* 3002 */
union $34F79CE00BEDC2B36903F1372ED1DE35
{
  float newFloat;
  unsigned int newInt;
};

/* 3003 */
struct __declspec(align(2)) clientFieldCallback_s
{
  clientField_s *pField;
  $4CACCB39A83665877BF7BAA110BB8661 ___u1;
  $34F79CE00BEDC2B36903F1372ED1DE35 ___u2;
  unsigned int localClientNum;
  unsigned int entNum;
  bool bInitialSnap;
  bool bNewEnt;
  bool bWasDemoJump;
};

/* 3004 */
struct bgsClientFieldCallbacks_s
{
  clientFieldCallback_s clientFieldCallbacks[1][256];
  unsigned int numCallbacks[1];
};

/* 3005 */
struct bgsClientFields_s
{
  int bRegistrationFinished;
  clientFieldSet_s clientFieldSets[12];
  unsigned int fieldHash;
  unsigned int highestVersionUsed;
  bgsClientFieldCallbacks_s *pPendingCallbacks;
};

/* 3006 */
struct DObjModel_s
{
  XModel *model;
  unsigned __int16 boneName;
  unsigned __int16 parentModel;
  bool ignoreCollision;
  vec3_t trans;
  vec3_t rot;
};

/* 3010 */
struct DSkelPartBits
{
  int anim[5];
  int control[5];
  int skel[5];
};

/* 3011 */
union $4E8772D5608B5A2C2CED3B04A8C9EE05
{
  DObjAnimMat *mat;
  DObjAnimMat *localMat;
};

/* 3012 */
struct DSkel
{
  DSkelPartBits partBits;
  int timeStamp;
  $4E8772D5608B5A2C2CED3B04A8C9EE05 ___u2;
};

/* 3013 */
union $DA75C976B97227392249C2A4DA660E4F
{
  XAnimTree_s *localTree;
  XAnimTree_s *tree;
};

/* 3014 */
union $5A4DA13921DFDF7797D003B5C7695731
{
  XModel **localModels;
  XModel **models;
};

/* 3015 */
struct DObj
{
  $DA75C976B97227392249C2A4DA660E4F ___u0;
  unsigned __int16 duplicateParts;
  unsigned __int16 entnum;
  char duplicatePartsSize;
  char numModels;
  char numBones;
  unsigned int ignoreCollision;
  volatile int locked;
  DSkel skel;
  float radius;
  unsigned int hidePartBits[5];
  char localClientIndex;
  char flags;
  char numRootAdjustMats;
  char *ikState;
  $5A4DA13921DFDF7797D003B5C7695731 ___u15;
};

/* 3035 */
struct bot_goal_t
{
  vec3_t position;
  pathnode_t *node;
  float radius;
  int time;
  unsigned __int16 notify;
  BotGoalPriority priority;
};

/* 3036 */
struct bot_aim_t
{
  Weapon grenadeWeapon;
  vec3_t grenadeOrigin;
  int grenadeTime;
};

/* 3037 */
struct bot_steering_t
{
  vec2_t anglesDesired;
  vec2_t anglesAverage;
  vec2_t anglesBase;
  float yawDelta;
  float pitchDelta;
};

/* 3038 */
struct __declspec(align(4)) bot_t
{
  gentity_t *ent;
  bot_goal_t goals[4];
  bot_aim_t aim;
  bot_steering_t steering;
  path_t path;
  vec3_t vLookAt;
  pathnode_t *failsafe;
  Weapon weapon;
  BotStance stance;
  int useButtonEndTime;
  int weaponDelayEndTime;
  int lastMoveTime;
  int grenadeTime;
  vec3_t kickAngles;
  vec3_t kickAVel;
  __int16 flags;
};

/* 3039 */
struct SpawnVar
{
  bool spawnVarsValid;
  int numSpawnVars;
  char *spawnVars[64][2];
  int numSpawnVarChars;
  char spawnVarChars[2048];
};

/* 3040 */
struct cached_tag_mat_t
{
  int time;
  int entnum;
  unsigned __int16 name;
  vec3_t tagMat[4];
};

/* 3041 */
struct trigger_info_t
{
  unsigned __int16 entnum;
  unsigned __int16 otherEntnum;
  int useCount;
  int otherUseCount;
};

/* 3042 */
struct com_parse_mark_t
{
  int lines;
  const char *text;
  int ungetToken;
  int backup_lines;
  const char *backup_text;
};

/* 3043 */
struct sv_FxVisBlock_t
{
  gentity_t *fxEnt;
  float radius;
};

/* 3044 */
struct actorAntilagFrame_t
{
  vec3_t position[32];
  vec3_t angles[32];
  char useCount[32];
  char inUse[32];
  int time;
};

/* 3045 */
struct vehicleAntilagFrame_t
{
  vec3_t position[16];
  vec3_t angles[16];
  char useCount[16];
  char inUse[16];
  int time;
};

/* 3046 */
struct ZBarrierPieceAnims
{
  XAnimTree_s *pAnimTree;
};

/* 3047 */
struct ZBarrierType
{
  char serverIndex;
  char clientIndex;
  ZBarrierDef *zbarrierDef;
  ZBarrierPieceAnims clientAnims[6];
  ZBarrierPieceAnims serverAnims[6];
  int boardModelIndex[6];
  int upgradedBoardModelIndex[6];
  int alternateBoardModelIndex[6];
};

/* 3048 */
struct level_locals_t
{
  gclient_t *clients;
  gentity_t *gentities;
  int gentitySize;
  int num_entities;
  gentity_t *firstFreeEnt;
  gentity_t *lastFreeEnt;
  vehicle_t *vehicles;
  gentity_t *firstFreeActor;
  gentity_t *lastFreeActor;
  int num_actors;
  sentient_t *sentients;
  actor_t *actors;
  int actorCorpseCount;
  bot_t *bots;
  TurretInfo *turrets;
  int logFile;
  int initializing;
  int clientIsSpawning;
  int maxclients;
  int teamSortedClients[18];
  objective_t objectives[32];
  int objectivesClientMask[32][2];
  int framenum;
  int time;
  int previousTime;
  int frametime;
  int startTime;
  SpawnVar spawnVar;
  EntHandle droppedWeaponCue[32];
  int savepersist;
  float fFogOpaqueDist;
  float fFogOpaqueDistSqrd;
  int bPlayerIgnoreRadiusDamage;
  int bPlayerIgnoreRadiusDamageLatched;
  int currentEntityThink;
  int registerWeapons;
  int bRegisterItems;
  int bRegisterLeaderboards;
  cached_tag_mat_t cachedTagMat;
  cached_tag_mat_t cachedEntTargetTagMat;
  trigger_info_t pendingTriggerList[256];
  trigger_info_t currentTriggerList[256];
  int pendingTriggerListSize;
  int currentTriggerListSize;
  int openScriptIOFileHandles[1];
  char *openScriptIOFileBuffers[1];
  com_parse_mark_t currentScriptIOLineMark[1];
  int scriptPrintChannel;
  vec2_t compassMapUpperLeft;
  vec2_t compassMapWorldSize;
  vec2_t compassNorth;
  int finished;
  int manualNameChange;
  unsigned __int16 modelMap[512];
  int disable_grenade_suicide;
  int numConnectedClients;
  ClientNum_t sortedClients[18];
  int bUpdateScoresForIntermission;
  int numVotingClients;
  __declspec(align(32)) MatchState matchState;
  int teamScores[10];
  int lastTeammateHealthTime;
  unsigned int teamHasSpyplane[10];
  unsigned int teamHasSatellite[10];
  unsigned int teamHasMeat[10];
  char voteString[1024];
  char voteDisplayString[1024];
  int voteTime;
  int voteExecuteTime;
  int voteYes;
  int voteNo;
  int currentActorClone;
  int iSearchFrame;
  sv_FxVisBlock_t fxVisibilityEnts[32];
  int currentPlayerClone;
  bool hostMigrationActive;
  int hostMigrationStart;
  actorAntilagFrame_t actorAntilagFrames[20];
  int nextActorAntilagFrame;
  vehicleAntilagFrame_t vehicleAntilagFrames[20];
  int nextVehicleAntilagFrame;
  ZBarrierType *zbarrierTypes[255];
};

/* 3049 */
struct phys_gjk_collision_info
{
  phys_vec3 m_p1;
  phys_vec3 m_p2;
  phys_vec3 m_n;
};

/* 3050 */
struct broad_phase_memory_info
{
  int m_max_num_gjk_ci;
  int m_max_num_sap_active_pairs;
  int m_max_num_surface_types;
};

/* 3051 */
struct __cppobj __declspec(align(8)) gjk_brush_t : gjk_base_t
{
  int nverts;
  vec3_t *verts;
  cbrush_t *brush;
};

/* 3052 */
struct gjk_collision_visitor
{
  gjk_collision_visitorVtbl *vfptr;
};

/* 3053 */
struct gjk_collision_visitorVtbl
{
  void *(__thiscall *allocate)(gjk_collision_visitor *this, const int, const int, const bool);
  bool (__thiscall *is_query)(gjk_collision_visitor *this);
  void (__thiscall *get_local_query_aabb)(gjk_collision_visitor *this, vec3_t *, vec3_t *);
  bool (__thiscall *query_create_prolog)(gjk_collision_visitor *this, const void *);
  void (__thiscall *query_create_epilog)(gjk_collision_visitor *this, gjk_base_t *);
  bool (__thiscall *query_create_prolog_1)(gjk_collision_visitor *this, vec3_t *, vec3_t *, const void *);
  void (__thiscall *query_create_epilog_1)(gjk_collision_visitor *this, gjk_base_t *);
};

/* 3054 */
struct __cppobj I_spuDmaSave
{
};

/* 3055 */
struct __declspec(align(8)) gjk_entity_info_t
{
  phys_mat44 m_mat;
  gjk_entity_info_t::ENTITY_TYPE m_ent_type;
  const void *m_ent;
  int m_query_visitor_count;
};

/* 3056 */
struct __declspec(align(16)) gjk_geom_info_t
{
  phys_vec3 m_aabb_min;
  phys_vec3 m_aabb_max;
  gjk_base_t *m_cg;
  gjk_entity_info_t *m_ent_info;
  int m_query_visitor_count;
  float m_hit_time;
  gjk_geom_info_t *m_next_link;
  gjk_geom_info_t *m_total_next_link;
};

/* 3057 */
struct __declspec(align(16)) gjk_trace_output_t
{
  phys_vec3 m_hit_normal;
  phys_vec3 m_hit_point;
  phys_vec3 m_arm;
  float m_hit_time;
  float m_hit_dist;
  bool m_is_foot;
  gjk_geom_info_t *m_gi;
  gjk_trace_output_t *m_next_link;
};

/* 3058 */
struct $_TypeDescriptor$_extraBytes_28
{
  const void *pVFTable;
  void *spare;
  char name[28];
};

/* 3059 */
struct phys_simple_allocator<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal>
{
  int m_count;
};

/* 3061 */
struct phys_inplace_avl_tree_node<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal>
{
  phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_left;
  phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_right;
  int m_balance;
};

/* 3060 */
struct __cppobj phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal : phys_gjk_cache_info
{
  phys_inplace_avl_tree_node<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal> m_avl_tree_node;
  phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_next_gjk_ci;
};

/* 3062 */
struct SndVolumeGroup
{
  char name[32];
  char parentName[32];
  unsigned int id;
  int parentIndex;
  SndMenuCategory category;
  unsigned __int16 attenuationSp;
  unsigned __int16 attenuationMp;
};

/* 3063 */
struct pulse_sum_constraint_solver::solver_info
{
  int m_max_vel_iters;
  int m_max_vel_pos_iters;
  float m_max_vel_error_sq;
  float m_max_vel_pos_error_sq;
  float m_delta_t;
};

/* 3064 */
struct phys_transient_allocator::block_header
{
  unsigned int m_block_size;
  unsigned int m_block_alignment;
  phys_transient_allocator::block_header *m_next_block;
};

/* 3065 */
struct minspec_read_write_mutex
{
  volatile unsigned int m_count;
};

/* 3066 */
struct phys_transient_allocator
{
  phys_transient_allocator::block_header *m_first_block;
  char *m_cur;
  char *m_end;
  unsigned int m_total_memory_allocated;
  minspec_read_write_mutex m_mutex;
  void *m_slot_pool;
};

/* 3067 */
struct phys_link_list<pulse_sum_node>
{
  pulse_sum_node *m_first;
  pulse_sum_node **m_last_next_ptr;
  int m_alloc_count;
};

/* 3068 */
struct phys_link_list<pulse_sum_normal>
{
  pulse_sum_normal *m_first;
  pulse_sum_normal **m_last_next_ptr;
  int m_alloc_count;
};

/* 3070 */
struct phys_link_list_base<pulse_sum_point>
{
  pulse_sum_point *m_next_link;
};

/* 3069 */
struct __cppobj pulse_sum_point : phys_link_list_base<pulse_sum_point>
{
  __declspec(align(16)) phys_vec3 m_b1_r;
  phys_vec3 m_b2_r;
  phys_vec3 m_b1_apx;
  phys_vec3 m_b2_apx;
  phys_vec3 m_b1_apy;
  phys_vec3 m_b2_apy;
  phys_vec3 m_b1_apz;
  phys_vec3 m_b2_apz;
  phys_vec3 m_pulse_sum;
  phys_vec3 m_right_side;
  phys_vec3 m_big_dirt;
  phys_vec3 m_cr23;
  phys_vec3 m_cr31;
  phys_vec3 m_cr12;
  phys_vec3 m_denom;
  float m_cfm;
  pulse_sum_node *m_b1;
  pulse_sum_node *m_b2;
  pulse_sum_cache *m_pulse_sum_cache;
};

/* 3071 */
struct phys_link_list<pulse_sum_point>
{
  pulse_sum_point *m_first;
  pulse_sum_point **m_last_next_ptr;
  int m_alloc_count;
};

/* 3073 */
struct phys_link_list_base<pulse_sum_angular>
{
  pulse_sum_angular *m_next_link;
};

/* 3072 */
struct __cppobj pulse_sum_angular : phys_link_list_base<pulse_sum_angular>
{
  __declspec(align(16)) phys_vec3 m_ud;
  phys_vec3 m_b1_r;
  phys_vec3 m_b2_r;
  phys_vec3 m_b1_ap;
  phys_vec3 m_b2_ap;
  float m_pulse_sum_min;
  float m_pulse_sum_max;
  float m_pulse_sum;
  float m_right_side;
  float m_big_dirt;
  float m_cfm;
  float m_denom;
  unsigned int m_flags;
  pulse_sum_node *m_b1;
  pulse_sum_node *m_b2;
  pulse_sum_cache *m_pulse_sum_cache;
};

/* 3074 */
struct phys_link_list<pulse_sum_angular>
{
  pulse_sum_angular *m_first;
  pulse_sum_angular **m_last_next_ptr;
  int m_alloc_count;
};

/* 3076 */
struct phys_link_list_base<pulse_sum_wheel>
{
  pulse_sum_wheel *m_next_link;
};

/* 3075 */
struct __cppobj __declspec(align(8)) pulse_sum_wheel : phys_link_list_base<pulse_sum_wheel>
{
  pulse_sum_normal m_suspension;
  pulse_sum_normal *m_side;
  pulse_sum_normal *m_fwd;
  float m_side_fric_max;
};

/* 3077 */
struct phys_link_list<pulse_sum_wheel>
{
  pulse_sum_wheel *m_first;
  pulse_sum_wheel **m_last_next_ptr;
  int m_alloc_count;
};

/* 3079 */
struct phys_link_list_base<pulse_sum_contact>
{
  pulse_sum_contact *m_next_link;
};

/* 3078 */
struct __cppobj pulse_sum_contact : phys_link_list_base<pulse_sum_contact>
{
  __declspec(align(16)) phys_vec3 m_ud_n;
  phys_vec3 m_ud_f1;
  phys_vec3 m_ud_f2;
  float m_fric_coef;
  pulse_sum_node *m_b1;
  pulse_sum_node *m_b2;
  pulse_sum_contact_point *m_list_pscp;
  void *m_pulse_sum_cache_list;
  int m_list_pscp_count;
};

/* 3080 */
struct __declspec(align(16)) pulse_sum_contact_point
{
  phys_vec3 m_b1_r;
  phys_vec3 m_b2_r;
  phys_vec3 m_b1_ap_n;
  phys_vec3 m_b2_ap_n;
  phys_vec3 m_b1_ap_f1;
  phys_vec3 m_b2_ap_f1;
  phys_vec3 m_b1_ap_f2;
  phys_vec3 m_b2_ap_f2;
  phys_vec3 m_pulse_sum;
  phys_vec3 m_right_side;
  float m_big_dirt;
  float m_denom_xx;
  float m_denom_yy;
  float m_denom_zz;
  float m_denom_xy;
  float m_denom_xz;
  float m_inv_yy;
  float m_inv_yz;
  float m_inv_zz;
};

/* 3081 */
struct phys_link_list<pulse_sum_contact>
{
  pulse_sum_contact *m_first;
  pulse_sum_contact **m_last_next_ptr;
  int m_alloc_count;
};

/* 3082 */
struct pulse_sum_constraint_solver
{
  float m_outside_delta_t;
  int m_psys_max_vel_iters;
  int m_psys_max_vel_pos_iters;
  pulse_sum_constraint_solver::solver_info m_si;
  phys_transient_allocator m_solver_memory_allocator;
  phys_link_list<pulse_sum_node> m_list_pulse_sum_node;
  int m_memory_high_water;
  phys_link_list<pulse_sum_normal> m_list_pulse_sum_normal;
  phys_link_list<pulse_sum_point> m_list_pulse_sum_point;
  phys_link_list<pulse_sum_angular> m_list_pulse_sum_angular;
  phys_link_list<pulse_sum_wheel> m_list_pulse_sum_wheel;
  phys_link_list<pulse_sum_contact> m_list_pulse_sum_contact;
};

/* 3083 */
struct __declspec(align(4)) phys_surface_type_info
{
  float m_friction_coef;
  float m_bounce_coef;
  unsigned int m_solver_priority;
  bool m_no_overflow_error;
};

/* 3086 */
struct bpei_database_id
{
  unsigned int m_id1;
  unsigned int m_id2;
};

/* 3084 */
struct broad_phase_environment_info
{
  void *m_data;
  minspec_mutex m_mutex;
  unsigned int m_gjk_geom_id;
  broad_phase_environment_info *m_next_bpei;
  phys_inplace_avl_tree_node<broad_phase_environment_info> m_avl_tree_node;
  bpei_database_id m_database_id;
};

/* 3085 */
struct phys_inplace_avl_tree_node<broad_phase_environment_info>
{
  broad_phase_environment_info *m_left;
  broad_phase_environment_info *m_right;
  int m_balance;
};

/* 3087 */
struct __declspec(align(16)) phys_static_array<rigid_body_constraint_wheel *,4>
{
  char m_buffer[16];
  rigid_body_constraint_wheel **const m_slot_array;
  int m_alloc_count;
};

/* 3088 */
struct rb_vehicle_model
{
  phys_vec3 m_right_dir_loc;
  phys_vec3 m_forward_dir_loc;
  phys_static_array<rigid_body_constraint_wheel *,4> m_wheels;
  float m_desired_speed_factor;
  float m_acceleration_factor;
  float m_power_braking_factor;
  float m_braking_factor;
  float m_coasting_factor;
  float m_reference_wheel_radius;
  float m_steer_factor;
  float m_steer_factor_offset;
  float m_steer_current_angle;
  float m_steer_max_angle;
  float m_steer_speed;
  __declspec(align(8)) phys_vec3 m_steer_front_pt_loc;
  float m_steer_front_back_length;
  unsigned int m_state_flags;
  rigid_body_constraint_upright *m_rbc_upright;
};

/* 3089 */
struct __declspec(align(16)) phys_wheel_collide_info
{
  phys_vec3 m_ray_pos;
  phys_vec3 m_ray_dir;
  phys_vec3 m_hitn;
  float m_hit_t;
  broad_phase_info *m_hit_bpi;
};

/* 3090 */
struct __cppobj broad_phase_group : broad_phase_base
{
  broad_phase_info *m_list_bpi_head;
  int m_bpi_count;
  rb_vehicle_model *m_rbvm;
  phys_wheel_collide_info *m_list_wci;
};

/* 3091 */
struct Phys_UnitQuaternion
{
  float x;
  float y;
  float z;
  float w;
};

/* 3092 */
struct ClientPlayerWeaponInfo
{
  XModel *handModel;
  XModel *gogglesModel;
  XModel *rocketModel;
  char weapModelIdx;
  int registered;
  Weapon weapon;
  const char *translatedDisplayName;
  const char *translatedModename;
  const char *translatedAIOverlayDescription;
};

/* 3093 */
struct __cppobj broad_phase_environment_info::avl_tree_accessor
{
};

/* 3094 */
struct phys_auto_activate_callback
{
  phys_auto_activate_callbackVtbl *vfptr;
};

/* 3095 */
struct phys_auto_activate_callbackVtbl
{
  bool (__thiscall *has_auto_activated)(phys_auto_activate_callback *this);
  void (__thiscall *auto_activate)(phys_auto_activate_callback *this, broad_phase_info *);
  bool (__thiscall *process_collision)(phys_auto_activate_callback *this);
};

/* 3096 */
struct phys_link_list<phys_collision_pair>
{
  phys_collision_pair *m_first;
  phys_collision_pair **m_last_next_ptr;
  int m_alloc_count;
};

/* 3097 */
struct phys_link_list<phys_collision_pair>::iterator
{
  phys_collision_pair *m_ptr;
};

/* 3098 */
struct __declspec(align(16)) cached_query_info_t
{
  phys_vec3 m_query_aabb_min;
  phys_vec3 m_query_aabb_max;
  int m_query_contents;
  unsigned int m_query_flags;
};

/* 3099 */
struct actorGravity_t
{
  centity_t *actor;
  int gravity;
};

/* 3100 */
union $222A11CE4B6EBFDB75E74DF742F9BFF1
{
  unsigned __int16 parent;
  unsigned __int16 nextFree;
};

/* 3101 */
struct CgEntCollTree
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 3102 */
struct __declspec(align(4)) CgEntCollSector
{
  CgEntCollTree tree;
  unsigned __int16 entListHead;
};

/* 3103 */
struct CgEntCollWorld
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 freeHead;
  CgEntCollSector sectors[1024];
};

/* 3104 */
struct __declspec(align(8)) cgs_t
{
  int viewX;
  int viewY;
  int viewWidth;
  int viewHeight;
  float viewAspect;
  float sceneViewportX;
  float sceneViewportY;
  float sceneViewportWidth;
  float sceneViewportHeight;
  int serverCommandSequence;
  int processedSnapshotNum;
  int localServer;
  char gametype[32];
  char szHostName[256];
  int maxclients;
  int privateClients;
  char mappath[64];
  char mapname[32];
  int gameEndTime;
  int voteTime;
  int voteYes;
  int voteNo;
  char voteString[256];
  int redCrosshair;
  XModel *gameModels[512];
  FxEffectDef *fxs[196];
  FxEffectDef *grenadeFx[40];
  int grenadeFxCount;
  FxEffectDef *playerFireFx[3];
  shellshock_parms_t holdBreathParams;
  char teamChatMsgs[8][90];
  int teamChatMsgTimes[8];
  int teamChatPos;
  int teamLastChatPos;
  float compassWidth;
  float compassHeight;
  float compassY;
  clientInfo_t corpseinfo[4];
  actorInfo_t actorCorpseInfo[8];
  bool entUpdateToggleContextKey;
  actorGravity_t actorGravity[32];
};

/* 3105 */
struct __cppobj gjk_cylinder_t : gjk_base_t
{
  int direction;
  float halfHeight;
  float radius;
  float m_geom_radius;
  phys_mat44 xform;
};

/* 3106 */
struct __cppobj create_gjk_geom_collision_visitor : gjk_collision_visitor
{
  gjk_geom_list_t *gjk_geom_list;
};

/* 3107 */
struct GfxPlacement
{
  vec4_t quat;
  vec3_t origin;
};

/* 3108 */
struct XModelPiece
{
  XModel *model;
  vec3_t offset;
};

/* 3109 */
struct XModelPieces
{
  const char *name;
  int numpieces;
  XModelPiece *pieces;
};

/* 3110 */
struct DynEntityDef
{
  DynEntityType type;
  GfxPlacement pose;
  XModel *xModel;
  XModel *destroyedxModel;
  unsigned __int16 brushModel;
  unsigned __int16 physicsBrushModel;
  FxEffectDef *destroyFx;
  unsigned int destroySound;
  XModelPieces *destroyPieces;
  PhysPreset *physPreset;
  __int16 physConstraints[4];
  int health;
  int flags;
  int contents;
  unsigned __int16 targetname;
  unsigned __int16 target;
};

/* 3111 */
struct phys_free_list<broad_phase_collision_pair>::T_internal_base
{
  phys_free_list<broad_phase_collision_pair>::T_internal_base *m_prev_T_internal;
  phys_free_list<broad_phase_collision_pair>::T_internal_base *m_next_T_internal;
};

/* 3112 */
struct broad_phase_collision_pair
{
  broad_phase_info *m_bpi1;
  broad_phase_info *m_bpi2;
  broad_phase_collision_pair *m_next_bpcp;
};

/* 3113 */
struct __cppobj phys_free_list<broad_phase_collision_pair>::T_internal : phys_free_list<broad_phase_collision_pair>::T_internal_base
{
  broad_phase_collision_pair m_data;
  int m_ptr_list_index;
};

/* 3114 */
struct phys_free_list<broad_phase_collision_pair>
{
  phys_free_list<broad_phase_collision_pair>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  broad_phase_collision_pair *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 3115 */
struct phys_free_list<broad_phase_collision_pair>::iterator
{
  phys_free_list<broad_phase_collision_pair>::T_internal_base *m_ptr;
};

/* 3116 */
const struct CollisionPartition
{
  char triCount;
  int firstTri;
  int nuinds;
  int fuind;
};

/* 3117 */
struct __cppobj __declspec(align(16)) gjk_partition_t : gjk_base_t
{
  int ninds;
  vec3_t *verts;
  unsigned __int16 *inds;
  CollisionPartition *partition;
  CollisionAabbTree *tree;
};

/* 3118 */
struct CgEntCollNode
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  vec3_t linkMins;
  vec3_t linkMaxs;
};

/* 3119 */
struct ViewModelHand
{
  int iPrevAnim;
  int iHandAnimIndex;
};

/* 3120 */
struct ViewModelInfo
{
  DObj *viewModelDObj;
  WeaponDobjInfo weaponDobjInfo;
  int hasAnimTree;
  XAnimTree_s *tree;
  XAnim_s *anims;
  unsigned int partBits[5];
  ViewModelHand hand[2];
};

/* 3121 */
struct __cppobj nuge
{
};

/* 3122 */
struct phys_free_list<broad_phase_info>::T_internal_base
{
  phys_free_list<broad_phase_info>::T_internal_base *m_prev_T_internal;
  phys_free_list<broad_phase_info>::T_internal_base *m_next_T_internal;
};

/* 3123 */
struct __cppobj phys_free_list<broad_phase_info>::T_internal : phys_free_list<broad_phase_info>::T_internal_base
{
  __declspec(align(16)) broad_phase_info m_data;
  int m_ptr_list_index;
};

/* 3124 */
struct phys_free_list<broad_phase_info>
{
  phys_free_list<broad_phase_info>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  broad_phase_info *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 3125 */
struct phys_simple_link_list<contact_point_info>::iterator
{
  contact_point_info *m_ptr;
};

/* 3126 */
struct __cppobj gjk_obb_t : gjk_base_t
{
  phys_vec3 m_dims;
  phys_mat44 m_xform;
};

/* 3127 */
struct phys_link_list<gjk_geom_info_t>
{
  gjk_geom_info_t *m_first;
  gjk_geom_info_t **m_last_next_ptr;
  int m_alloc_count;
};

/* 3128 */
const struct __declspec(align(16)) gjk_query_input
{
  phys_vec3 m_cg_aabb_min;
  phys_vec3 m_cg_aabb_max;
  phys_vec3 m_cg_position;
  phys_vec3 m_cg_translation;
  phys_vec3 m_ac_eps_vec;
  int m_contents;
  int m_pass_entity_num;
  int m_pass_owner_num;
  bool m_is_server_thread;
  colgeom_visitor_inlined_t<300> *m_proximity_data;
  int m_proximity_mask;
  unsigned int m_gjk_query_flags;
  phys_link_list<gjk_geom_info_t> m_geom_skip_list;
};

/* 3129 */
struct phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor>
{
  broad_phase_environment_info *m_tree_root;
};

/* 3130 */
struct phys_simple_allocator<broad_phase_environment_info>
{
  int m_count;
};

/* 3131 */
struct bpei_database_t
{
  phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor> m_bpei_map;
  phys_simple_allocator<broad_phase_environment_info> m_bpei_allocator;
  broad_phase_environment_info *m_bpei_list;
  minspec_read_write_mutex m_mutex;
};

/* 3132 */
struct phys_transient_allocator::allocator_state
{
  phys_transient_allocator::block_header *m_first_block;
  char *m_cur;
  char *m_end;
  unsigned int m_total_memory_allocated;
};

/* 3133 */
struct __cppobj gjk_query_output : gjk_collision_visitor
{
  __declspec(align(16)) phys_vec3 m_query_aabb_min;
  phys_vec3 m_query_aabb_max;
  phys_vec3 m_local_query_aabb_min;
  phys_vec3 m_local_query_aabb_max;
  gjk_query_input *m_local_query_input;
  bpei_database_id m_local_database_id;
  broad_phase_environment_info *m_local_bpei;
  gjk_entity_info_t *m_local_ent_info;
  bpei_database_t m_bpei_database;
  phys_transient_allocator m_allocator;
  phys_transient_allocator::allocator_state m_allocator_state;
  int m_ent_count;
  int m_geom_count;
  gjk_geom_info_t *m_total_list_geom_info;
  phys_link_list<gjk_geom_info_t> m_list_geom_info;
  int m_query_visitor_count;
  int m_gent_query_visitor_count;
  int m_cent_query_visitor_count;
  int m_dent_query_visitor_count;
  cached_query_info_t m_cached_query_info;
  phys_vec3 m_accum_start_origin;
  cached_query_info_t m_accum_query_info;
  int m_total_query_count;
  int m_total_cached_query_count;
};

/* 3134 */
struct GlassDef
{
  const char *name;
  int maxHealth;
  float thickness;
  float minShardSize;
  float maxShardSize;
  float shardLifeProbablility;
  int maxShards;
  Material *pristineMaterial;
  Material *crackedMaterial;
  Material *shardMaterial;
  const char *crackSound;
  const char *shatterShound;
  const char *autoShatterShound;
  FxEffectDef *crackEffect;
  FxEffectDef *shatterEffect;
};

/* 3135 */
struct Glass
{
  unsigned int numCellIndices;
  unsigned __int16 cellIndices[6];
  GlassDef *glassDef;
  unsigned int index;
  unsigned int brushModel;
  vec3_t origin;
  vec3_t angles;
  vec3_t absmin;
  vec3_t absmax;
  bool isPlanar;
  char numOutlineVerts;
  char binormalSign;
  vec2_t *outline;
  vec3_t outlineAxis[3];
  vec3_t outlineOrigin;
  float uvScale;
  float thickness;
};

/* 3136 */
struct phys_assert_info
{
  int m_hits_total_count;
  int m_hits_frame_count;
  int m_max_hits_total;
  int m_max_hits_per_frame;
  bool m_use_warnings_only;
  phys_assert_info *m_next;
};

/* 3137 */
struct __cppobj __declspec(align(16)) gjk_aabb_t : gjk_base_t
{
  phys_vec3 m_center_local;
  phys_vec3 m_dims;
  cbrush_t *m_brush;
};

/* 3138 */
const struct __declspec(align(16)) broad_phase_environment_query_input
{
  phys_vec3 trace_aabb_min_wace;
  phys_vec3 trace_aabb_max_wace;
  phys_vec3 trace_translation;
  unsigned int env_collision_flags;
};

/* 3139 */
struct broad_phase_base_list::node
{
  broad_phase_base *m_bpb;
  broad_phase_base_list::node *m_next;
};

/* 3140 */
struct broad_phase_base_list
{
  broad_phase_base_list::node *m_list;
  broad_phase_base_list::node **m_list_cur;
};

/* 3141 */
struct broad_phase_environement_query_results
{
  broad_phase_base_list m_list_bpi_env;
  int m_list_bpi_env_count;
  int m_thread_id;
  unsigned int m_env_collision_flags;
};

/* 3142 */
struct broad_phase_terrain_query_callback
{
  broad_phase_terrain_query_callbackVtbl *vfptr;
};

/* 3143 */
struct broad_phase_terrain_query_callbackVtbl
{
  void (__thiscall *query)(broad_phase_terrain_query_callback *this, broad_phase_environment_query_input *, broad_phase_environement_query_results *);
};

/* 3144 */
struct phys_contact_manifold_process::bridge
{
  phys_vec2 m_intersection_p;
  contact_manifold_mesh_point **m_left_i;
  contact_manifold_mesh_point **m_right_i;
};

/* 3145 */
struct phys_contact_manifold_process::isect_info
{
  phys_contact_manifold *m_cman;
  contact_manifold_mesh_point **m_i;
  contact_manifold_mesh_point **m_next_i;
  contact_manifold_mesh_point **m_last_i;
  phys_vec2 m_edge;
};

/* 3146 */
struct phys_link_list<contact_point_info>
{
  contact_point_info *m_first;
  contact_point_info **m_last_next_ptr;
  int m_alloc_count;
};

/* 3147 */
struct __declspec(align(16)) phys_contact_manifold_process
{
  phys_mat44 contact_mat;
  phys_mat44 cg1_to_rb2_xform;
  phys_transient_allocator *m_cpi_allocator;
  phys_link_list<contact_point_info> m_list_cpi;
  contact_point_info *m_cpi;
  contact_manifold_mesh_point **m_list_isect_point;
  rigid_body_constraint_contact *m_rbc_contact_search_tree_root;
  phys_contact_manifold cman1;
  phys_contact_manifold cman2;
  int m_contact_point_count;
  phys_memory_heap m_allocator;
  char m_allocator_memory[16384];
};

/* 3148 */
struct phys_gjk_info::phys_gjk_set_info
{
  float m_lamda[4];
  int m_candidate;
};

/* 3149 */
struct phys_gjk_info
{
  phys_mat44 cg2_to_cg1_xform;
  phys_vec3 m_cg1_relative_translation_loc;
  float m_continuous_collision_lambda;
  __declspec(align(16)) phys_gjk_collision_info cg1_cinfo_loc;
  phys_vec3 m_gjk_origin;
  phys_vec3 m_w_verts[4];
  phys_vec3 m_a_verts[4];
  phys_vec3 m_b_verts[4];
  phys_vec3 m_a_inds[4];
  phys_vec3 m_b_inds[4];
  phys_vec3 m_support_dir;
  float m_geom_radii_sum;
  int m_cc_reset_iter;
  int m_flags;
  int m_w_set;
  int m_last_w_set;
  int m_gjk_iter;
  float m_gjk_sep_thresh;
  float m_gjk_pen_thresh_sq;
  float m_upper_dist_sq;
  float m_lower_dist_sq;
  float m_dot_ij[4][4];
  phys_gjk_info::phys_gjk_set_info m_set_list[16];
};

/* 3150 */
struct phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor>
{
  phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_tree_root;
};

/* 3151 */
struct phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor>::stack_item
{
  phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal **m_node;
  int m_child;
};

/* 3152 */
struct gjk_unique_id_database_t
{
  unsigned int m_counter;
};

/* 3153 */
struct __cppobj __declspec(align(8)) gjk_polygon_cylinder_t : gjk_base_t
{
  phys_vec3 m_center;
  float m_polygon_cylinder_radius;
  float m_capsule_radius;
  float m_half_height;
  float m_geom_radius;
  float m_head_offset;
  float m_foot_offset;
  int m_mode;
};

/* 3154 */
struct gjk_polygon_cylinder_t::poly_verts
{
  float m_co[4];
  float m_si[4];
};

/* 3155 */
struct phys_inplace_avl_tree<bpei_database_id,broad_phase_environment_info,broad_phase_environment_info::avl_tree_accessor>::stack_item
{
  broad_phase_environment_info **m_node;
  int m_child;
};

/* 3156 */
struct __declspec(align(8)) phys_gjk_input
{
  phys_vec3 m_cg1_translation;
  phys_vec3 m_cg2_translation;
  float m_start_time;
  float m_end_time;
  phys_gjk_geom *gjk_cg1;
  phys_gjk_geom *gjk_cg2;
  phys_mat44 *cg1_to_world_xform;
  phys_mat44 *cg2_to_world_xform;
  phys_gjk_cache_info *gjk_ci;
  float cg1_radius;
  float cg2_radius;
  float m_sep_thresh;
  bool m_intersection_test_only;
  bool m_continuous_collision;
};

/* 3157 */
struct __cppobj gjk_physics_collision_visitor : gjk_collision_visitor
{
  bpei_database_id m_local_database_id;
  broad_phase_environment_info *m_local_bpei;
  const void *m_local_entity;
  __declspec(align(16)) phys_vec3 m_local_query_trace_aabb_min;
  phys_vec3 m_local_query_trace_aabb_max;
  phys_vec3 m_local_query_trace_translation;
  centity_t *cent;
  DynEntityDef *dynEntDef;
  Glass *glass;
  rigid_body *rb;
  phys_mat44 *rb_to_world_xform;
  phys_mat44 *cg_to_world_xform;
  phys_mat44 *cg_to_rb_xform;
  unsigned int env_collision_flags;
  broad_phase_environment_query_input *bpeqi;
  broad_phase_environement_query_results *bpeqr;
  phys_auto_activate_callback *auto_activate_callback;
};

/* 3158 */
struct PathFindInput
{
  path_t *pPath;
  vec3_t *vStartPos;
  vec3_t *vGoalPos;
  pathnode_t *pNodeFrom;
  pathnode_t *pNodeTo;
  int bAllowNegotiationLinks;
  int bAllowNegotiationHints;
  int useChokePoints;
  int bIgnoreBadPlaces;
  int searchEntNum;
  team_t eTeam;
  float physRadius;
  float physHeight;
};

/* 3159 */
struct phys_free_list<broad_phase_group>::T_internal_base
{
  phys_free_list<broad_phase_group>::T_internal_base *m_prev_T_internal;
  phys_free_list<broad_phase_group>::T_internal_base *m_next_T_internal;
};

/* 3160 */
struct __cppobj phys_free_list<broad_phase_group>::T_internal : phys_free_list<broad_phase_group>::T_internal_base
{
  __declspec(align(16)) broad_phase_group m_data;
  int m_ptr_list_index;
};

/* 3161 */
struct phys_free_list<broad_phase_group>
{
  phys_free_list<broad_phase_group>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  broad_phase_group *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 3162 */
struct __declspec(align(4)) clients_rewind_context_t
{
  vec3_t m_client_pos[18];
  bool m_active;
};

/* 3163 */
struct bbLoadoutData
{
  const char *primaryname;
  const char *primary;
  const char *primaryattachment1;
  const char *primaryattachment2;
  const char *primaryattachment3;
  const char *primarycamo;
  const char *primaryreticle;
  const char *primaryreticlecolor;
  const char *primarylens;
  const char *primaryemblem;
  const char *secondaryname;
  const char *secondary;
  const char *secondaryattachment1;
  const char *secondaryattachment2;
  const char *secondaryattachment3;
  const char *secondarycamo;
  const char *secondaryreticle;
  const char *secondaryreticlecolor;
  const char *secondarylens;
  const char *secondaryemblem;
  const char *primarygrenade;
  const char *specialgrenade;
  int primarygrenadecount;
  int specialgrenadecount;
  const char *killstreak1;
  const char *killstreak2;
  const char *killstreak3;
  const char *killstreak4;
  const char *specialty1;
  const char *specialty2;
  const char *specialty3;
  const char *specialty4;
  const char *specialty5;
  const char *specialty6;
};

/* 3164 */
struct $_TypeDescriptor$_extraBytes_40
{
  const void *pVFTable;
  void *spare;
  char name[40];
};

/* 3165 */
struct ProfileLog
{
  bb_profilelog_id local_id;
};

/* 3166 */
struct phys_link_list<gjk_geom_info_t>::iterator
{
  gjk_geom_info_t *m_ptr;
};

/* 3167 */
struct bitarray<768>
{
  int array[24];
};

/* 3168 */
struct sv_rewind_context_t
{
  gentity_t *m_ent_to_link;
  int m_mover_num;
  vec3_t *m_origin;
  vec3_t *m_angles;
  vec3_t m_origin_backup;
  vec3_t m_angles_backup;
};

/* 3169 */
struct __cppobj rigid_body_constraint_contact::avl_tree_accessor
{
};

/* 3170 */
struct __declspec(align(4)) constraint_t
{
  vec3_t p;
  rope_constraint_e type;
  int entity_index;
  int bone_name_hash;
  char pi1;
  char pi2;
};

/* 3171 */
struct phys_heap_gjk_cache_system_avl_tree
{
  phys_simple_allocator<phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal> m_list_phys_gjk_cache_info_internal;
  phys_inplace_avl_tree<phys_gjk_geom_id_pair_key,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal,phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor> m_search_tree;
  int m_max_num_gjk_ci;
  phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal *m_list_head;
};

/* 3172 */
struct broad_phase_memory
{
  tlAtomicMutex g_bp_auto_activate_mutex;
  tlAtomicReadWriteMutex g_bp_gjk_cache_mutex;
  phys_heap_gjk_cache_system_avl_tree g_phys_gjk_cache_system;
  phys_free_list<broad_phase_info> g_list_broad_phase_info;
  phys_free_list<broad_phase_group> g_list_broad_phase_group;
  phys_free_list<broad_phase_collision_pair> g_list_broad_phase_collision_pair;
  bpei_database_t g_bpei_database;
  broad_phase_terrain_query_callback *g_broad_phase_terrain_query_callback;
  broad_phase_base *g_list_bpb;
  int g_list_bpb_count;
  broad_phase_info *m_list_bpi_env;
  int m_bpi_env_count;
  int m_bpg_env_count;
  int m_bpg_env_bpi_count;
  int m_bpi_env_no_database_count;
  int m_memory_high_water;
  phys_link_list<phys_collision_pair> g_list_phys_collide_data;
  phys_transient_allocator g_collision_memory_buffer;
  phys_surface_type_info *g_surface_type_info_database;
  int m_max_num_surface_types;
  int m_max_num_surface_type_infos;
};

/* 3173 */
struct __cppobj phys_heap_gjk_cache_system_avl_tree::phys_gjk_cache_info_internal::avl_tree_accessor
{
};

/* 3174 */
struct __cppobj gjk_double_sphere_t : gjk_base_t
{
  phys_vec3 m_list_center[2];
  phys_vec3 m_center;
  float m_list_radius[2];
  float m_geom_radius;
  int m_count;
};

/* 3175 */
struct __declspec(align(8)) gjk_double_sphere_t::csi
{
  phys_vec3 m_normal;
  int m_indices[3];
};

/* 3176 */
struct __declspec(align(4)) actors_rewind_context_t
{
  vec3_t m_actor_pos[32];
  vec3_t m_actor_angles[32];
  bool m_active;
};

/* 3177 */
struct scr_const_t
{
  unsigned __int16 _;
  unsigned __int16 active;
  unsigned __int16 spawn;
  unsigned __int16 exit;
  unsigned __int16 aim_bone;
  unsigned __int16 aim_highest_bone;
  unsigned __int16 aim_vis_bone;
  unsigned __int16 alert;
  unsigned __int16 all;
  unsigned __int16 allies;
  unsigned __int16 ambush;
  unsigned __int16 ambush_nodes_only;
  unsigned __int16 angles;
  unsigned __int16 any_exposed_nodes_only;
  unsigned __int16 arc_min_pitch;
  unsigned __int16 arc_max_pitch;
  unsigned __int16 arc_min_yaw;
  unsigned __int16 arc_max_yaw;
  unsigned __int16 asleep;
  unsigned __int16 axis;
  unsigned __int16 bad_path;
  unsigned __int16 begin_firing;
  unsigned __int16 unknown_location;
  unsigned __int16 cancel_location;
  unsigned __int16 confirm_location;
  unsigned __int16 deployed_turret;
  unsigned __int16 combat;
  unsigned __int16 cover;
  unsigned __int16 crouch;
  unsigned __int16 current;
  unsigned __int16 damage;
  unsigned __int16 deathshield;
  unsigned __int16 damage_afterdeath;
  unsigned __int16 dead;
  unsigned __int16 death;
  unsigned __int16 disconnect;
  unsigned __int16 death_or_disconnect;
  unsigned __int16 detonate;
  unsigned __int16 direct;
  unsigned __int16 dlight;
  unsigned __int16 done;
  unsigned __int16 dropweapon;
  unsigned __int16 empty;
  unsigned __int16 end_firing;
  unsigned __int16 enter_vehicle;
  unsigned __int16 entity;
  unsigned __int16 exit_vehicle;
  unsigned __int16 exposed_nodes_only;
  unsigned __int16 change_seat;
  unsigned __int16 vehicle_death;
  unsigned __int16 explode;
  unsigned __int16 failed;
  unsigned __int16 free;
  unsigned __int16 fraction;
  unsigned __int16 goal;
  unsigned __int16 goal_changed;
  unsigned __int16 goal_yaw;
  unsigned __int16 grenade;
  unsigned __int16 grenadedanger;
  unsigned __int16 grenade_flee;
  unsigned __int16 grenade_fire;
  unsigned __int16 grenade_launcher_fire;
  unsigned __int16 grenade_pullback;
  unsigned __int16 grenade_throwback;
  unsigned __int16 stationary;
  unsigned __int16 grenade_stuck;
  unsigned __int16 grenade_bounce;
  unsigned __int16 hero;
  unsigned __int16 info_notnull;
  unsigned __int16 invisible;
  unsigned __int16 j_gun;
  unsigned __int16 key1;
  unsigned __int16 key2;
  unsigned __int16 killanimscript;
  unsigned __int16 left;
  unsigned __int16 left_tread;
  unsigned __int16 light;
  unsigned __int16 missile_fire;
  unsigned __int16 missile_boost;
  unsigned __int16 movedone;
  unsigned __int16 multikill;
  unsigned __int16 next_node;
  unsigned __int16 no_cover;
  unsigned __int16 only_cover;
  unsigned __int16 noclass;
  unsigned __int16 node;
  unsigned __int16 noncombat;
  unsigned __int16 none;
  unsigned __int16 normal;
  unsigned __int16 origin;
  unsigned __int16 over;
  unsigned __int16 player;
  unsigned __int16 point_relative;
  unsigned __int16 position;
  unsigned __int16 projectile_impact;
  unsigned __int16 prone;
  unsigned __int16 result;
  unsigned __int16 right;
  unsigned __int16 right_tread;
  unsigned __int16 tank_armor;
  unsigned __int16 reload;
  unsigned __int16 reload_start;
  unsigned __int16 rocket;
  unsigned __int16 rotatedone;
  unsigned __int16 script_brushmodel;
  unsigned __int16 script_model;
  unsigned __int16 script_origin;
  unsigned __int16 snd_enveffectsprio_level;
  unsigned __int16 snd_enveffectsprio_shellshock;
  unsigned __int16 snd_busvolprio_holdbreath;
  unsigned __int16 snd_busvolprio_pain;
  unsigned __int16 snd_busvolprio_shellshock;
  unsigned __int16 stand;
  unsigned __int16 suppression;
  unsigned __int16 suppression_end;
  unsigned __int16 surfacetype;
  unsigned __int16 tag_aim_pitch;
  unsigned __int16 tag_aim;
  unsigned __int16 tag_aim_animated;
  unsigned __int16 tag_brass;
  unsigned __int16 tag_brass1;
  unsigned __int16 tag_brass_2;
  unsigned __int16 tag_butt;
  unsigned __int16 tag_clip;
  unsigned __int16 tag_flash;
  unsigned __int16 tag_explosive;
  unsigned __int16 tag_flash1;
  unsigned __int16 tag_flash2;
  unsigned __int16 tag_flash3;
  unsigned __int16 tag_flash4;
  unsigned __int16 tag_flash_alt;
  unsigned __int16 tag_fx;
  unsigned __int16 tag_inhand;
  unsigned __int16 tag_knife_attach;
  unsigned __int16 tag_knife_fx;
  unsigned __int16 tag_bayonet;
  unsigned __int16 tag_laser;
  unsigned __int16 tag_origin;
  unsigned __int16 tag_weapon;
  unsigned __int16 tag_weapon1;
  unsigned __int16 tag_player;
  unsigned __int16 tag_camera;
  unsigned __int16 tag_weapon_right;
  unsigned __int16 tag_weapon_left;
  unsigned __int16 tag_stowed_back;
  unsigned __int16 tag_weapon_chest;
  unsigned __int16 tag_gasmask;
  unsigned __int16 tag_gasmask2;
  unsigned __int16 tag_sync;
  unsigned __int16 tag_wake;
  unsigned __int16 target_script_trigger;
  unsigned __int16 team3;
  unsigned __int16 team_changed;
  unsigned __int16 tempEntity;
  unsigned __int16 top;
  unsigned __int16 touch;
  unsigned __int16 trigger;
  unsigned __int16 trigger_use;
  unsigned __int16 trigger_use_touch;
  unsigned __int16 trigger_damage;
  unsigned __int16 trigger_lookat;
  unsigned __int16 trigger_radius;
  unsigned __int16 trigger_box;
  unsigned __int16 trigger_box_use;
  unsigned __int16 trigger_radius_use;
  unsigned __int16 truck_cam;
  unsigned __int16 turret_return_default_pos;
  unsigned __int16 turret_scan_start;
  unsigned __int16 turret_scan_stop;
  unsigned __int16 turret_target_aquired;
  unsigned __int16 turret_target_lost;
  unsigned __int16 turret_tow_fire;
  unsigned __int16 turret_tow_unlink;
  unsigned __int16 weapon_change_on_turret;
  unsigned __int16 weapon_change;
  unsigned __int16 weapon_change_complete;
  unsigned __int16 weapon_raising;
  unsigned __int16 weapon_fired;
  unsigned __int16 weapon_melee;
  unsigned __int16 weapon_switch_started;
  unsigned __int16 raise_riotshield;
  unsigned __int16 deploy_riotshield;
  unsigned __int16 pickup_riotshield;
  unsigned __int16 worldspawn;
  unsigned __int16 flashbang;
  unsigned __int16 flash;
  unsigned __int16 smoke;
  unsigned __int16 night_vision_on;
  unsigned __int16 night_vision_off;
  unsigned __int16 back;
  unsigned __int16 back_low;
  unsigned __int16 back_mid;
  unsigned __int16 back_up;
  unsigned __int16 head;
  unsigned __int16 j_mainroot;
  unsigned __int16 neck;
  unsigned __int16 pelvis;
  unsigned __int16 j_head;
  unsigned __int16 purchased;
  unsigned __int16 for_sale;
  unsigned __int16 wrong_era;
  unsigned __int16 blacklisted;
  unsigned __int16 locked;
  unsigned __int16 mod_unknown;
  unsigned __int16 mod_pistol_bullet;
  unsigned __int16 mod_rifle_bullet;
  unsigned __int16 mod_grenade;
  unsigned __int16 mod_grenade_splash;
  unsigned __int16 mod_projectile;
  unsigned __int16 mod_projectile_splash;
  unsigned __int16 mod_melee;
  unsigned __int16 mod_bayonet;
  unsigned __int16 mod_head_shot;
  unsigned __int16 mod_crush;
  unsigned __int16 mod_telefrag;
  unsigned __int16 mod_falling;
  unsigned __int16 mod_suicide;
  unsigned __int16 mod_trigger_hurt;
  unsigned __int16 mod_explosive;
  unsigned __int16 mod_impact;
  unsigned __int16 mod_burned;
  unsigned __int16 mod_hit_by_object;
  unsigned __int16 mod_drown;
  unsigned __int16 mod_gas;
  unsigned __int16 face;
  unsigned __int16 face_casual;
  unsigned __int16 face_alert;
  unsigned __int16 face_cqb;
  unsigned __int16 face_running;
  unsigned __int16 face_shoot_single;
  unsigned __int16 face_shoot_burst;
  unsigned __int16 face_melee;
  unsigned __int16 face_react;
  unsigned __int16 face_talk;
  unsigned __int16 face_talk_long;
  unsigned __int16 face_pain;
  unsigned __int16 face_death;
  unsigned __int16 melee;
  unsigned __int16 script_vehicle;
  unsigned __int16 script_vehicle_collision;
  unsigned __int16 script_vehicle_corpse;
  unsigned __int16 turret_fire;
  unsigned __int16 turret_on_target;
  unsigned __int16 gunner_turret_on_target;
  unsigned __int16 gunner_turret_overheat;
  unsigned __int16 gunner_turret_stop_overheat;
  unsigned __int16 turret_not_on_target;
  unsigned __int16 turret_on_vistarget;
  unsigned __int16 turret_no_vis;
  unsigned __int16 turret_rotate_stopped;
  unsigned __int16 turret_rotate_moving;
  unsigned __int16 turret_deactivate;
  unsigned __int16 turretstatechange;
  unsigned __int16 turretownerchange;
  unsigned __int16 reached_node;
  unsigned __int16 reached_end_node;
  unsigned __int16 reached_wait_node;
  unsigned __int16 reached_wait_speed;
  unsigned __int16 near_goal;
  unsigned __int16 veh_collision;
  unsigned __int16 veh_predictedcollision;
  unsigned __int16 veh_inair;
  unsigned __int16 veh_landed;
  unsigned __int16 veh_suspension_limit_activated;
  unsigned __int16 veh_engine_stutter;
  unsigned __int16 veh_ejectoccupants;
  unsigned __int16 veh_heightmesh_max;
  unsigned __int16 veh_heightmesh_min;
  unsigned __int16 veh_stuck;
  unsigned __int16 script_camera;
  unsigned __int16 begin;
  unsigned __int16 jumpcut;
  unsigned __int16 playerBreathInSound;
  unsigned __int16 playerBreathGaspSound;
  unsigned __int16 playerBreathOutSound;
  unsigned __int16 mantlesoundplayer;
  unsigned __int16 meleeswipesoundplayer;
  unsigned __int16 dtplandsoundplayer;
  unsigned __int16 curve_nodehit;
  unsigned __int16 curve_start;
  unsigned __int16 curve_end;
  unsigned __int16 asphalt;
  unsigned __int16 bark;
  unsigned __int16 brick;
  unsigned __int16 carpet;
  unsigned __int16 ceramic;
  unsigned __int16 cloth;
  unsigned __int16 concrete;
  unsigned __int16 cushion;
  unsigned __int16 dirt;
  unsigned __int16 flesh;
  unsigned __int16 foliage;
  unsigned __int16 fruit;
  unsigned __int16 glass;
  unsigned __int16 grass;
  unsigned __int16 gravel;
  unsigned __int16 ice;
  unsigned __int16 metal;
  unsigned __int16 mud;
  unsigned __int16 paintedmetal;
  unsigned __int16 paper;
  unsigned __int16 plaster;
  unsigned __int16 plastic;
  unsigned __int16 rock;
  unsigned __int16 rubber;
  unsigned __int16 sand;
  unsigned __int16 snow;
  unsigned __int16 water;
  unsigned __int16 wood;
  unsigned __int16 tag_enter_driver;
  unsigned __int16 tag_enter_gunner1;
  unsigned __int16 tag_enter_gunner2;
  unsigned __int16 tag_enter_gunner3;
  unsigned __int16 tag_enter_gunner4;
  unsigned __int16 tag_enter_passenger1;
  unsigned __int16 tag_enter_passenger2;
  unsigned __int16 tag_enter_passenger3;
  unsigned __int16 tag_enter_passenger4;
  unsigned __int16 tag_driver;
  unsigned __int16 tag_passenger1;
  unsigned __int16 tag_passenger2;
  unsigned __int16 tag_passenger3;
  unsigned __int16 tag_passenger4;
  unsigned __int16 tag_passenger5;
  unsigned __int16 tag_passenger6;
  unsigned __int16 tag_gunner1;
  unsigned __int16 tag_gunner2;
  unsigned __int16 tag_gunner3;
  unsigned __int16 tag_gunner4;
  unsigned __int16 tag_gunner_barrel1;
  unsigned __int16 tag_gunner_barrel2;
  unsigned __int16 tag_gunner_barrel3;
  unsigned __int16 tag_gunner_barrel4;
  unsigned __int16 tag_gunner_turret1;
  unsigned __int16 tag_gunner_turret2;
  unsigned __int16 tag_gunner_turret3;
  unsigned __int16 tag_gunner_turret4;
  unsigned __int16 tag_flash_gunner[8];
  unsigned __int16 tag_gunner_brass1;
  unsigned __int16 tag_gunner_brass1a;
  unsigned __int16 tag_gunner_brass2;
  unsigned __int16 tag_gunner_brass2a;
  unsigned __int16 tag_gunner_hands1;
  unsigned __int16 tag_wheel_front_left;
  unsigned __int16 tag_wheel_front_right;
  unsigned __int16 tag_wheel_back_left;
  unsigned __int16 tag_wheel_back_right;
  unsigned __int16 tag_wheel_middle_left;
  unsigned __int16 tag_wheel_middle_right;
  unsigned __int16 tag_wheel_front;
  unsigned __int16 tag_wheel_back;
  unsigned __int16 tag_main_rotor;
  unsigned __int16 tag_tail_rotor;
  unsigned __int16 tag_main_rotor_blur;
  unsigned __int16 tag_main_rotor_static;
  unsigned __int16 tag_tail_rotor_blur;
  unsigned __int16 tag_tail_rotor_static;
  unsigned __int16 tag_rotor_fl_arm;
  unsigned __int16 tag_rotor_fr_arm;
  unsigned __int16 tag_rotor_rl_arm;
  unsigned __int16 tag_rotor_rr_arm;
  unsigned __int16 tag_antenna1;
  unsigned __int16 tag_antenna2;
  unsigned __int16 host_sucks_end_game;
  unsigned __int16 freelook;
  unsigned __int16 localplayers;
  unsigned __int16 tag_enter_right;
  unsigned __int16 tag_enter_left;
  unsigned __int16 tag_enter_back;
  unsigned __int16 tag_popout;
  unsigned __int16 tag_body;
  unsigned __int16 tag_turret;
  unsigned __int16 tag_turret_base;
  unsigned __int16 tag_barrel;
  unsigned __int16 tag_barrel_recoil;
  unsigned __int16 tag_engine_left;
  unsigned __int16 tag_engine_right;
  unsigned __int16 tag_spin;
  unsigned __int16 tag_minigun_right_barrel;
  unsigned __int16 front_left;
  unsigned __int16 front_right;
  unsigned __int16 back_left;
  unsigned __int16 back_right;
  unsigned __int16 middle_left;
  unsigned __int16 middle_right;
  unsigned __int16 stuck_to_player;
  unsigned __int16 stuck_to_shield;
  unsigned __int16 auto_ai;
  unsigned __int16 auto_nonai;
  unsigned __int16 manual;
  unsigned __int16 manual_ai;
  unsigned __int16 scavenger;
  unsigned __int16 neutral;
  unsigned __int16 team4;
  unsigned __int16 team5;
  unsigned __int16 team6;
  unsigned __int16 team7;
  unsigned __int16 team8;
  unsigned __int16 auto_change;
  unsigned __int16 call_vote;
  unsigned __int16 intermission;
  unsigned __int16 manual_change;
  unsigned __int16 menuresponse;
  unsigned __int16 pistol;
  unsigned __int16 plane_waypoint;
  unsigned __int16 playing;
  unsigned __int16 spectator;
  unsigned __int16 spectator_cycle;
  unsigned __int16 vote;
  unsigned __int16 sprint_begin;
  unsigned __int16 sprint_end;
  unsigned __int16 tag_gunner_pov;
  unsigned __int16 tag_flamer_pilot_light;
  unsigned __int16 tag_fx_front;
  unsigned __int16 tag_fx_right;
  unsigned __int16 tag_fx_left;
  unsigned __int16 flared_or_tabuned_death;
  unsigned __int16 destroyed_vehicle;
  unsigned __int16 vehicle_driver;
  unsigned __int16 died_in_turret;
  unsigned __int16 force_crouch;
  unsigned __int16 trigger_use_doubletap;
  unsigned __int16 doubletap_detonate;
  unsigned __int16 dtp_through_glass;
  unsigned __int16 dtp_start;
  unsigned __int16 dtp_end;
  unsigned __int16 mantle_start;
  unsigned __int16 moon_gravity;
  unsigned __int16 draw;
  unsigned __int16 remote_revive;
  unsigned __int16 begin_custom_anim;
  unsigned __int16 deathplant;
  unsigned __int16 zombie;
  unsigned __int16 zombie_dog;
  unsigned __int16 _custom;
  unsigned __int16 angle_deltas;
  unsigned __int16 bigdog;
  unsigned __int16 bulletwhizby;
  unsigned __int16 dog;
  unsigned __int16 enemy;
  unsigned __int16 enemy_visible;
  unsigned __int16 face_angle;
  unsigned __int16 face_current;
  unsigned __int16 face_default;
  unsigned __int16 face_direction;
  unsigned __int16 face_enemy;
  unsigned __int16 face_enemy_or_motion;
  unsigned __int16 face_enemy_or_motion_sidestep;
  unsigned __int16 face_goal;
  unsigned __int16 face_motion;
  unsigned __int16 face_point;
  unsigned __int16 gravity;
  unsigned __int16 groundEntChanged;
  unsigned __int16 gunshot;
  unsigned __int16 obstacle;
  unsigned __int16 movemode;
  unsigned __int16 node_out_of_range;
  unsigned __int16 node_relinquished;
  unsigned __int16 node_taken;
  unsigned __int16 node_not_safe;
  unsigned __int16 noclip;
  unsigned __int16 nogravity;
  unsigned __int16 slide;
  unsigned __int16 nophysics;
  unsigned __int16 pain;
  unsigned __int16 react;
  unsigned __int16 pos_deltas;
  unsigned __int16 run;
  unsigned __int16 runto_arrived;
  unsigned __int16 silenced_shot;
  unsigned __int16 spawned;
  unsigned __int16 start_move;
  unsigned __int16 stop;
  unsigned __int16 stop_soon;
  unsigned __int16 tag_eye;
  unsigned __int16 walk;
  unsigned __int16 world;
  unsigned __int16 zonly_physics;
  unsigned __int16 down;
  unsigned __int16 j_ankle_le;
  unsigned __int16 j_ankle_ri;
  unsigned __int16 j_ball_le;
  unsigned __int16 j_ball_ri;
  unsigned __int16 j_palm_le;
  unsigned __int16 j_palm_ri;
  unsigned __int16 j_elbow_le;
  unsigned __int16 j_wrist_le;
  unsigned __int16 broken;
  unsigned __int16 destructible;
  unsigned __int16 destructible_base_piece_death;
  unsigned __int16 breakafter;
  unsigned __int16 snapacknowledged;
  unsigned __int16 snap_processed;
  unsigned __int16 j_barrel;
  unsigned __int16 j_counter;
  unsigned __int16 j_dial_left;
  unsigned __int16 j_dial_right;
  unsigned __int16 j_spinnerRF;
  unsigned __int16 j_spinnerLF;
  unsigned __int16 j_spinnerR1;
  unsigned __int16 j_spinnerL1;
  unsigned __int16 j_spinnerR2;
  unsigned __int16 j_spinnerL2;
  unsigned __int16 j_spinnerR3;
  unsigned __int16 j_spinnerL3;
  unsigned __int16 ca_disconnected;
  unsigned __int16 ca_cinematic;
  unsigned __int16 ca_uicinematic;
  unsigned __int16 ca_logo;
  unsigned __int16 ca_connecting;
  unsigned __int16 ca_challenging;
  unsigned __int16 ca_connected;
  unsigned __int16 ca_sendingstats;
  unsigned __int16 ca_loading;
  unsigned __int16 ca_primed;
  unsigned __int16 ca_active;
  unsigned __int16 ca_map_restart;
  unsigned __int16 orientdone;
  unsigned __int16 menuchanged;
  unsigned __int16 unlink;
  unsigned __int16 init;
  unsigned __int16 move;
  unsigned __int16 traverse;
  unsigned __int16 idle;
  unsigned __int16 move_run;
  unsigned __int16 move_sprint;
  unsigned __int16 move_stumpy;
  unsigned __int16 move_start;
  unsigned __int16 move_stop;
  unsigned __int16 move_walk;
  unsigned __int16 move_turn_left;
  unsigned __int16 move_turn_right;
  unsigned __int16 move_run_turn_left;
  unsigned __int16 move_run_turn_right;
  unsigned __int16 move_turn_around_left;
  unsigned __int16 move_turn_around_right;
  unsigned __int16 move_run_turn_around_left;
  unsigned __int16 move_run_turn_around_right;
  unsigned __int16 move_attack;
  unsigned __int16 nopatrol;
  unsigned __int16 stop_idle;
  unsigned __int16 stop_attackidle;
  unsigned __int16 stop_attackidle_bark;
  unsigned __int16 stop_attackidle_growl;
  unsigned __int16 pain_main;
  unsigned __int16 pain_front;
  unsigned __int16 pain_back;
  unsigned __int16 pain_left;
  unsigned __int16 pain_right;
  unsigned __int16 pain_run_front;
  unsigned __int16 pain_run_back;
  unsigned __int16 pain_run_left;
  unsigned __int16 pain_run_right;
  unsigned __int16 death_front;
  unsigned __int16 death_back;
  unsigned __int16 death_left;
  unsigned __int16 death_right;
  unsigned __int16 flashed;
  unsigned __int16 combat_attackidle;
  unsigned __int16 combat_attackidle_bark;
  unsigned __int16 combat_attackidle_growl;
  unsigned __int16 combat_attack_run;
  unsigned __int16 combat_attack_player;
  unsigned __int16 combat_attack_player_early;
  unsigned __int16 combat_attack_player_lunge;
  unsigned __int16 combat_attack_player_close_range;
  unsigned __int16 combat_attack_miss;
  unsigned __int16 combat_attack_miss_left;
  unsigned __int16 combat_attack_miss_right;
  unsigned __int16 combat_player_neck_snap;
  unsigned __int16 combat_player_neck_miss;
  unsigned __int16 traverse_jump_up_40;
  unsigned __int16 traverse_jump_up_80;
  unsigned __int16 traverse_jump_down_40;
  unsigned __int16 traverse_jump_down_80;
  unsigned __int16 traverse_wallhop;
  unsigned __int16 traverse_window;
  unsigned __int16 traverse_through_hole_42;
  unsigned __int16 zombie_climb_chain;
  unsigned __int16 zombie_jump_down_40;
  unsigned __int16 zombie_jump_down_48;
  unsigned __int16 zombie_jump_down_72;
  unsigned __int16 zombie_jump_down_96;
  unsigned __int16 zombie_jump_down_120;
  unsigned __int16 zombie_jump_down_127;
  unsigned __int16 zombie_jump_down_184;
  unsigned __int16 zombie_jump_down_190;
  unsigned __int16 zombie_jump_down_222;
  unsigned __int16 zombie_jump_down_240;
  unsigned __int16 zombie_jump_down_286;
  unsigned __int16 zombie_jump_down_386;
  unsigned __int16 zombie_jump_up_222;
  unsigned __int16 zombie_jump_up_to_climb;
  unsigned __int16 zombie_jump_up_to_climb_coast;
  unsigned __int16 zombie_ladder_up;
  unsigned __int16 zombie_lighthouse_crawl_down;
  unsigned __int16 zombie_mantle_over_40;
  unsigned __int16 zombie_quad_vent_jump_down;
  unsigned __int16 zombie_wall_crawl_drop;
  unsigned __int16 zombie_wall_crawl_drop_quick;
  unsigned __int16 zombie_ground_rise;
  unsigned __int16 zombie_ground_rise_death;
  unsigned __int16 zombie_death;
  unsigned __int16 zombie_run_melee;
  unsigned __int16 zombie_walk_melee;
  unsigned __int16 zombie_crawl_melee;
  unsigned __int16 zombie_stumpy_melee;
  unsigned __int16 zombie_window_melee;
  unsigned __int16 zombie_board_tear;
  unsigned __int16 zombie_jump_on_bus;
  unsigned __int16 zombie_board_tear_bus;
  unsigned __int16 zombie_climbin_bus;
  unsigned __int16 zombie_bus_window_idle;
  unsigned __int16 zombie_bus_window_melee;
  unsigned __int16 swimming_begin;
  unsigned __int16 swimming_end;
  unsigned __int16 snd_boat_engine;
  unsigned __int16 snd_boat_bow_l;
  unsigned __int16 snd_boat_bow_r;
  unsigned __int16 gv_event;
  unsigned __int16 gv_action;
  unsigned __int16 gv_target;
  unsigned __int16 gv_parameter;
  unsigned __int16 gv_condlhs;
  unsigned __int16 gv_condop;
  unsigned __int16 gv_condrhs;
  unsigned __int16 basic_score;
  unsigned __int16 perk_score;
  unsigned __int16 challenge_score;
  unsigned __int16 intel_score;
  unsigned __int16 difficulty_score;
  unsigned __int16 total_score;
  unsigned __int16 freeze;
  unsigned __int16 up;
  unsigned __int16 liveupdate;
  unsigned __int16 respawn;
  unsigned __int16 dtp_land;
  unsigned __int16 hidden;
  unsigned __int16 fake_fire;
  unsigned __int16 sprint;
  unsigned __int16 crouchrun;
  unsigned __int16 crouchwalk;
  unsigned __int16 entityshutdown;
  unsigned __int16 guidance_none;
  unsigned __int16 guidance_sidewinder;
  unsigned __int16 guidance_hellfire;
  unsigned __int16 guidance_javelin;
  unsigned __int16 guidance_ballistic;
  unsigned __int16 guidance_wireguided;
  unsigned __int16 guidance_tvguided;
  unsigned __int16 guidance_drone;
  unsigned __int16 guidance_heatseeking;
  unsigned __int16 lightbehavior_firecaster;
  unsigned __int16 lightbehavior_fire_flicker;
  unsigned __int16 lightbehavior_electrical_flicker;
  unsigned __int16 lightbehavior_flicker_then_stop;
  unsigned __int16 lightbehavior_generic_double_strobe;
  unsigned __int16 lightbehavior_generic_strobe;
  unsigned __int16 lightbehavior_light_off;
  unsigned __int16 lightbehavior_light_solid;
  unsigned __int16 lightbehavior_television;
  unsigned __int16 lightbehavior_generic_flickering;
  unsigned __int16 lightbehavior_generic_pulsing;
  unsigned __int16 lightbehavior_explode_then_ficker;
  unsigned __int16 mixerbehavior_robot;
  unsigned __int16 footstep_left_large;
  unsigned __int16 footstep_left_small;
  unsigned __int16 footstep_right_large;
  unsigned __int16 footstep_right_small;
  unsigned __int16 footstep_left;
  unsigned __int16 footstep_right;
  unsigned __int16 footstep_front_left;
  unsigned __int16 footstep_front_right;
  unsigned __int16 footstep_rear_left;
  unsigned __int16 footstep_rear_right;
  unsigned __int16 footstep_front_left_small;
  unsigned __int16 footstep_front_right_small;
  unsigned __int16 footstep_rear_left_small;
  unsigned __int16 footstep_rear_right_small;
  unsigned __int16 footstep_front_left_shuffle;
  unsigned __int16 footstep_front_right_shuffle;
  unsigned __int16 footstep_rear_left_shuffle;
  unsigned __int16 footstep_rear_right_shuffle;
  unsigned __int16 footstep_front_left_scrape;
  unsigned __int16 footstep_front_right_scrape;
  unsigned __int16 footstep_rear_left_scrape;
  unsigned __int16 footstep_rear_right_scrape;
  unsigned __int16 dogstep_lf;
  unsigned __int16 dogstep_rf;
  unsigned __int16 dogstep_lr;
  unsigned __int16 dogstep_rr;
  unsigned __int16 jnt_f_l_ankle;
  unsigned __int16 jnt_f_r_ankle;
  unsigned __int16 jnt_r_l_ankle;
  unsigned __int16 jnt_r_r_ankle;
  unsigned __int16 jnt_f_l_knee_upper_dmg;
  unsigned __int16 jnt_f_r_knee_upper_dmg;
  unsigned __int16 jnt_r_l_knee_upper_dmg;
  unsigned __int16 jnt_r_r_knee_upper_dmg;
  unsigned __int16 open;
  unsigned __int16 closed;
  unsigned __int16 opening;
  unsigned __int16 closing;
  unsigned __int16 targetted_by_zombie;
  unsigned __int16 actor;
  unsigned __int16 actor_spawner;
  unsigned __int16 actor_corpse;
  unsigned __int16 cf_int;
  unsigned __int16 cf_float;
  unsigned __int16 ambient_package;
  unsigned __int16 save_restore;
  unsigned __int16 difficulty_change;
  unsigned __int16 tag_board_1;
  unsigned __int16 tag_board_2;
  unsigned __int16 tag_board_3;
  unsigned __int16 tag_board_4;
  unsigned __int16 tag_board_5;
  unsigned __int16 tag_board_6;
  unsigned __int16 tag_control_dial_1;
  unsigned __int16 tag_control_dial_2;
  unsigned __int16 tag_control_dial_3;
};

/* 3178 */
struct IgnoreEntParams
{
  int baseEntity;
  int parentEntity;
  bool ignoreSelf;
  bool ignoreParent;
  bool ignoreSiblings;
  bool ignoreChildren;
};

/* 3179 */
struct col_context_t
{
  int mask;
  col_prim_t *prims;
  int nprims;
  IgnoreEntParams *ignoreEntParams;
  int passEntityNum0;
  int passEntityNum1;
  int staticmodels;
  int locational;
  char *priorityMap;
  int (__cdecl *collide_entity_func)(int);
};

/* 3180 */
struct pmoveHandler_t
{
  void (__cdecl *trace)(trace_t *, vec3_t *, vec3_t *, vec3_t *, vec3_t *, int, int, col_context_t *);
  void (__cdecl *playerEvent)(int, int);
  bool (__cdecl *getEntityOriginAngles)(LocalClientNum_t, int, vec3_t *, vec3_t *);
  bool (__cdecl *getEntityVelocity)(LocalClientNum_t, int, vec3_t *);
  unsigned __int16 (__cdecl *getVehicleTypeString)(ClientNum_t, int, VehicleDef **);
  void (__cdecl *entityLinkFromPMove)(int, int, const int);
  Weapon (__cdecl *getPlayerWeapon)(playerState_s *, LocalClientNum_t);
  void (__cdecl *setVehDriverInputs)(LocalClientNum_t, playerState_s *, usercmd_s *);
  int (__cdecl *isEntWalkable)(LocalClientNum_t, const int);
};

/* 3181 */
struct HMONITOR__
{
  int unused;
};

/* 3182 */
struct DXGI_RGB
{
  float Red;
  float Green;
  float Blue;
};

/* 3183 */
struct __declspec(align(2)) TaskRecord
{
  TaskRecord *next;
  TaskDefinition *definition;
  TaskState state;
  ControllerIndex_t controllerIndex;
  unsigned int lastPoll;
  unsigned int lastPollMS;
  unsigned int id;
  TaskGroup group;
  int startMS;
  int timeOut;
  int timeIn;
  bdReference<bdRemoteTask> remoteTask;
  TaskRecord *nestedTask;
  void *payload;
  bool isChildTask;
  bool cancelImmediately;
  bool skipAllCallbacksAfterComplete;
};

/* 3184 */
const struct __declspec(align(8)) TaskDefinition
{
  unsigned __int64 category;
  const char *name;
  int payloadSize;
  bool (__cdecl *completed_callback)(TaskRecord *);
  bool (__cdecl *failure_callback)(TaskRecord *);
  LocalTaskState (__cdecl *localTask)(TaskRecord *);
};

/* 3185 */
struct DXGI_MAPPED_RECT
{
  int Pitch;
  char *pBits;
};

/* 3186 */
struct DXGI_OUTPUT_DESC
{
  wchar_t DeviceName[32];
  tagRECT DesktopCoordinates;
  int AttachedToDesktop;
  DXGI_MODE_ROTATION Rotation;
  HMONITOR__ *Monitor;
};

/* 3187 */
struct DXGI_GAMMA_CONTROL
{
  DXGI_RGB Scale;
  DXGI_RGB Offset;
  DXGI_RGB GammaCurve[1025];
};

/* 3188 */
struct GfxCodeImageRenderTargetFields
{
  unsigned __int64 renderTargetId : 8;
  unsigned __int64 enable : 1;
  unsigned __int64 fbufferTexture : 3;
  unsigned __int64 filtering : 20;
};

/* 3189 */
struct DXGI_SURFACE_DESC
{
  unsigned int Width;
  unsigned int Height;
  DXGI_FORMAT Format;
  DXGI_SAMPLE_DESC SampleDesc;
};

/* 3190 */
struct GfxPrimStats
{
  int counters[8];
};

/* 3191 */
struct GfxDebugPoly
{
  vec4_t faceColor;
  bool faceDepthTest;
  vec4_t edgeColor;
  bool edgeDepthTest;
  int firstVert;
  int vertCount;
};

/* 3192 */
struct __cppobj IDXGIObject : IUnknown
{
};

/* 3193 */
struct __cppobj IDXGIDeviceSubObject : IDXGIObject
{
};

/* 3194 */
struct __cppobj IDXGISurface : IDXGIDeviceSubObject
{
};

/* 3195 */
struct DXGI_GAMMA_CONTROL_CAPABILITIES
{
  int ScaleAndOffsetSupported;
  float MaxConvertedValue;
  float MinConvertedValue;
  unsigned int NumGammaControlPoints;
  float ControlPointPositions[1025];
};

/* 3196 */
struct DXGI_RATIONAL
{
  unsigned int Numerator;
  unsigned int Denominator;
};

/* 3197 */
struct __cppobj IDXGIOutput : IDXGIObject
{
};

/* 3198 */
struct DXGI_MODE_DESC
{
  unsigned int Width;
  unsigned int Height;
  DXGI_RATIONAL RefreshRate;
  DXGI_FORMAT Format;
  DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
  DXGI_MODE_SCALING Scaling;
};

/* 3199 */
struct DXGI_FRAME_STATISTICS
{
  unsigned int PresentCount;
  unsigned int PresentRefreshCount;
  unsigned int SyncRefreshCount;
  _LARGE_INTEGER SyncQPCTime;
  _LARGE_INTEGER SyncGPUTime;
};

/* 3200 */
struct HWND__
{
  int unused;
};

/* 3201 */
struct DXGI_SWAP_CHAIN_DESC
{
  DXGI_MODE_DESC BufferDesc;
  DXGI_SAMPLE_DESC SampleDesc;
  unsigned int BufferUsage;
  unsigned int BufferCount;
  HWND__ *OutputWindow;
  int Windowed;
  DXGI_SWAP_EFFECT SwapEffect;
  unsigned int Flags;
};

/* 3202 */
struct GfxSunShadowBoundingPoly
{
  vec2_t snapDelta;
  int pointCount;
  vec2_t points[9];
  int pointIsNear[9];
};

/* 3203 */
struct DxCmdBuf
{
  int isInUse[33];
  ID3D11DeviceContext *context[33];
  ID3D11CommandList *list[33];
};

/* 3204 */
struct TxaaCtxDX
{
  unsigned int pad[256];
};

/* 3205 */
struct GfxLightingInfo
{
  char primaryLightIndex;
  char reflectionProbeIndex;
  unsigned __int16 lightingHandle;
};

/* 3206 */
struct PolySet
{
  vec3_t *verts;
  int vertCount;
  int vertLimit;
  GfxDebugPoly *polys;
  int polyCount;
  int polyLimit;
};

/* 3207 */
struct trDebugSphere_t
{
  vec3_t center;
  float radius;
  int sideCount;
  vec4_t color;
  int depthTest;
};

/* 3208 */
struct GfxStageStats
{
  bool used;
  GfxPrimStats prims[10];
};

/* 3209 */
struct HINSTANCE__
{
  int unused;
};

/* 3210 */
struct GfxRenderTargetSurface
{
  ID3D11RenderTargetView *color;
  ID3D11DepthStencilView *depthStencil;
};

/* 3211 */
struct __declspec(align(4)) GfxRenderTarget
{
  GfxImage *image;
  GfxRenderTargetSurface surface;
  unsigned __int16 width;
  unsigned __int16 height;
  bool cleared;
};

/* 3212 */
struct __cppobj IDXGISwapChain : IDXGIDeviceSubObject
{
};

/* 3213 */
union GfxCodeImageRenderTarget
{
  GfxCodeImageRenderTargetFields fields;
  unsigned int packed;
};

/* 3214 */
struct GfxScaledPlacement
{
  GfxPlacement base;
  float scale;
};

/* 3215 */
struct ScreenPlacement
{
  vec2_t scaleVirtualToReal;
  vec2_t scaleVirtualToFull;
  vec2_t scaleRealToVirtual;
  vec2_t virtualViewableMin;
  vec2_t virtualViewableMax;
  vec2_t virtualTweakableMin;
  vec2_t virtualTweakableMax;
  vec2_t realViewportBase;
  vec2_t realViewportSize;
  vec2_t realViewportMid;
  vec2_t realViewableMin;
  vec2_t realViewableMax;
  vec2_t realTweakableMin;
  vec2_t realTweakableMax;
  vec2_t subScreen;
  float hudSplitscreenScale;
};

/* 3216 */
struct GfxSceneDef
{
  int time;
  float floatTime;
  vec3_t viewOffset;
};

/* 3217 */
struct GfxUI3DBackend
{
  GfxViewport viewport[6];
  vec4_t uvSetup[6];
  int renderCmdCount[6];
  int renderCmdThatDrawsSomethingCount[6];
  int totalRenderCmds;
  int totalRenderCmdsThatDrawsSomething;
  float blurRadius;
};

/* 3218 */
struct FxCodeMeshData
{
  unsigned int triCount;
  unsigned __int16 *indices;
  unsigned __int16 argOffset;
  unsigned __int16 argCount;
  GfxLightingInfo lightingInfo;
};

/* 3219 */
struct WindState
{
  vec3_t windDirection;
  float windSpringAngle[16];
  vec3_t windRustleAngle[16];
  float speed;
};

/* 3220 */
struct GfxCmdHeader
{
  unsigned __int16 byteCount;
  char id;
  char ui3d;
};

/* 3221 */
struct __cppobj __declspec(align(8)) bdRatingInfo : bdTaskResult
{
  unsigned __int64 m_entityID;
  char m_rating;
};

/* 3222 */
struct __cppobj __declspec(align(8)) bdCategorizedRatingInfo : bdRatingInfo
{
  unsigned __int16 m_category;
};

/* 3223 */
struct __cppobj bdVoteRankStatsInfo : bdStatsInfo
{
  unsigned __int64 m_fileOwnerID;
  char m_fileOwnerName[65];
  unsigned int m_totalVotes;
  unsigned int m_avgVoteValue;
  unsigned int m_createTime;
};

/* 3224 */
struct GfxVertexBufferState
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  char *verts;
};

/* 3225 */
struct GfxMatrix
{
  vec4_t m[4];
};

/* 3226 */
struct __declspec(align(16)) GfxViewParms
{
  GfxMatrix viewMatrix;
  GfxMatrix projectionMatrix;
  GfxMatrix viewProjectionMatrix;
  GfxMatrix inverseViewProjectionMatrix;
  vec4_t origin;
  vec3_t axis[3];
  float depthHackNearClip;
  float zNear;
  float zFar;
  int bspCellIndex;
};

/* 3227 */
struct __declspec(align(8)) GfxSunShadowPartition
{
  GfxViewParms shadowViewParms;
  int partitionIndex;
  GfxViewport viewport;
  GfxSunShadowBoundingPoly boundingPoly;
};

/* 3228 */
struct GfxIndexBufferState
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  unsigned __int16 *indices;
};

/* 3229 */
struct GfxAabbTree
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 childCount;
  unsigned __int16 surfaceCount;
  unsigned __int16 startSurfIndex;
  unsigned __int16 smodelIndexCount;
  unsigned __int16 *smodelIndexes;
  int childrenOffset;
};

/* 3230 */
struct GfxDrawPrimArgs
{
  int vertexCount;
  int triCount;
  int baseIndex;
};

/* 3231 */
struct GfxMeshData
{
  GfxMeshData *thisPtr;
  unsigned int indexCount;
  unsigned int totalIndexCount;
  ID3D11Buffer *ib;
  unsigned __int16 *indices;
  GfxVertexBufferState vb;
  unsigned int vertSize;
};

/* 3232 */
struct GfxCodeMatrices
{
  GfxMatrix matrix[32];
};

/* 3233 */
struct GfxEntity
{
  unsigned int renderFxFlags;
  float materialTime;
  float destructibleBurnAmount;
  int textureOverrideIndex;
};

/* 3234 */
struct FxMarkMeshData
{
  unsigned int triCount;
  unsigned __int16 *indices;
  unsigned __int16 modelIndex;
  char modelTypeAndSurf;
  char pad0;
};

/* 3235 */
struct GfxBackEndPrimitiveData
{
  int hasSunDirChanged;
};

/* 3236 */
struct trDebugString_t
{
  vec3_t xyz;
  vec4_t color;
  float scale;
  char text[96];
};

/* 3237 */
struct trDebugLine_t
{
  vec3_t start;
  vec3_t end;
  vec4_t color;
  int depthTest;
};

/* 3238 */
struct GfxDebugPlume
{
  vec3_t origin;
  vec4_t color;
  int score;
  int startTime;
  int duration;
};

/* 3239 */
struct DebugGlobals
{
  PolySet polySet;
  trDebugString_t *strings;
  int stringCount;
  int stringLimit;
  trDebugString_t *externStrings;
  int externStringCount;
  int externMaxStringCount;
  trDebugLine_t *lines;
  int lineCount;
  int lineLimit;
  trDebugLine_t *externLines;
  int externLineCount;
  int externMaxLineCount;
  GfxDebugPlume *plumes;
  int plumeCount;
  int plumeLimit;
  trDebugSphere_t *spheres;
  int sphereCount;
  int sphereLimit;
  trDebugSphere_t *externSpheres;
  int externSphereCount;
  int externMaxSphereCount;
};

/* 3240 */
struct GfxCmdBuf
{
  ID3D11DeviceContext *device;
  ID3D11CommandList **commandList;
  unsigned __int16 viewIndex;
  unsigned __int16 deviceIndex;
};

/* 3241 */
struct GfxWindowTarget
{
  HWND__ *hwnd;
  IDXGISwapChain *swapChain;
  ID3D11RenderTargetView *view;
  int width;
  int height;
};

/* 3242 */
struct $404A44C2BCDFDCCF2DFD8ED09640073D
{
  GfxImage *img1;
  GfxImage *img2;
};

/* 3243 */
struct $0E145F6B819AE20DF4E95B6289AADD77
{
  Material *mat1;
  Material *mat2;
};

/* 3244 */
struct $7BD3819BAEC75E63D064078187541886
{
  unsigned int constIdx;
  vec4_t value;
};

/* 3245 */
union $6B3A3FDD0E8CB8365833391060BF3AC2
{
  $404A44C2BCDFDCCF2DFD8ED09640073D image;
  $0E145F6B819AE20DF4E95B6289AADD77 material;
  $7BD3819BAEC75E63D064078187541886 shaderConst;
};

/* 3246 */
struct GfxTextureOverride
{
  __int16 prev;
  char type;
  unsigned int dobjModelMask;
  Material *mat;
  $6B3A3FDD0E8CB8365833391060BF3AC2 ___u4;
};

/* 3247 */
struct GfxParticleCloud
{
  GfxScaledPlacement placement;
  vec3_t velDirWorld;
  GfxColor color;
  vec2_t radius;
  unsigned __int16 count;
  unsigned __int16 offset;
  char gaussian;
  char pad[3];
};

/* 3248 */
struct GfxFog
{
  int startTime;
  int finishTime;
  vec4_t color;
  float fogStart;
  float density;
  float heightDensity;
  float baseHeight;
  vec4_t sunFogColor;
  vec3_t sunFogDir;
  float sunFogStartAng;
  float sunFogEndAng;
  float maxDensity;
};

/* 3249 */
struct GfxCmdArray
{
  char *cmds;
  int usedTotal;
  int usedCritical;
  GfxCmdHeader *lastCmd;
  int byteSize;
  int warnSize;
  int check;
};

/* 3250 */
struct GfxPostFxInfo
{
  GfxDepthOfField dof;
  GfxFilm film;
  GfxCompositeFx flameFx;
  GfxReviveFx reviveFx;
  GfxCompositeFx waterSheetingFx;
  GfxDoubleVision doubleVision;
  GfxGenericFilter genericFilter;
  GfxPoison poisonFx;
  GfxCompositeFx electrifiedFx;
  GfxCompositeFx transportedFx;
  GfxSaveScreenFx saveScreenFx;
  GfxBloom bloom;
  float bloomExpansionXpos;
  float bloomExpansionYpos;
  float blurRadius;
  float exposureValue;
  float exposureRemap;
  bool useColorControl;
  float colorSaturation;
  float colorTemp;
  float colorHue;
  vec3_t colorScale;
};

/* 3251 */
struct GfxQuadMeshData
{
  float x;
  float y;
  float width;
  float height;
  GfxMeshData meshData;
};

/* 3255 */
struct GfxViewRenderControl
{
  char mainSceneMSAA;
  char mainScene;
  char mainSceneFinal;
  char mainSceneSaved;
  char extraCamSamplerRenderTarget;
  char ui3d;
  unsigned int renderingMode;
  unsigned int additionalPostFX;
};

/* 3256 */
struct GfxQRCodeBackend
{
  vec4_t scale[12];
};

/* 3252 */
struct __declspec(align(16)) GfxViewInfo
{
  GfxViewParms viewParms;
  GfxViewport sceneViewport;
  GfxViewport displayViewport;
  GfxViewport scissorViewport;
  GfxSceneDef sceneDef;
  ShadowType dynamicShadowType;
  LocalClientNum_t localClientNum;
  int viewInfoIndex;
  int isRenderingFullScreen;
  int playerTeleported;
  GfxLight visibleLights[4];
  int visibleLightCount;
  vec4_t frustumPlanes[4];
  GfxLightScale charPrimaryLightScale;
  GfxPostFxInfo *postFxInfo;
  const void *cmds;
  float sunVisibility;
  float adsZScale;
  GfxQuadMeshData *fullSceneViewMesh;
  GfxDrawSurfListInfo *drawList;
  GfxCmdBufInput *input;
  char hdrRenderingMode;
  GfxViewRenderControl sceneComposition;
  GfxUI3DBackend rbUI3D;
  GfxQRCodeBackend rbQRCode;
  bool isExtraCamera;
  int noLodCullOut;
  float lodScaleRigid;
  float lodScaleSkinned;
  float postEmissiveBrightening;
  GfxViewParms weaponViewParms;
  bool sonarRenderTargetInUse;
  float sonarBlur;
  GfxViewParms sonarViewParms;
  bool sonarUseThermalMaterial;
  bool sonarOverrideBlend;
  bool drawInfrared;
  bool drawPostBlur;
  bool drawWaypointsPostBloom;
  int splitscreenBlurEdges;
  bool needResolveOpaque;
  __int16 lutScriptIndex;
  bool drawDarkness;
};

/* 3253 */
struct GfxDrawSurfListInfo
{
  GfxDrawSurf *drawSurfs;
  unsigned int drawSurfCount;
  char baseTechType;
  GfxViewInfo *viewInfo;
  vec4_t viewOrigin;
  OcclusionReportsMode occlusionReportsMode;
  int cameraView;
  int disableAllShadowTech;
  int needResolve;
};

/* 3254 */
struct __declspec(align(16)) GfxCmdBufInput
{
  vec4_t consts[211];
  GfxImage *codeImages[55];
  char codeImageSamplerStates[55];
  GfxBackEndData *data;
};

/* 3257 */
struct GfxWorkerData
{
  int cmdBufValid[33];
  GfxCmdBuf cmdBuf[33];
  jqBatchGroup cmdBufBatchGroup[33];
};

/* 3258 */
struct GfxSunShadowProjection
{
  float viewMatrix[4][4];
  vec4_t switchPartition;
  vec4_t shadowmapScale;
};

/* 3259 */
struct GfxSunShadow
{
  GfxMatrix lookupMatrix;
  GfxSunShadowProjection sunProj;
  int sunShadowCount;
  __declspec(align(16)) GfxSunShadowPartition partition[2];
};

/* 3260 */
struct __declspec(align(16)) GfxSpotShadow
{
  GfxViewParms shadowViewParms;
  GfxMatrix lookupMatrix;
  char shadowableLightIndex;
  char flags;
  char pad[2];
  GfxLight *light;
  float fade;
  GfxCodeImageRenderTarget spotShadowRenderTarget;
  char renderTargetId;
  GfxViewport viewport;
  GfxImage *image;
  vec4_t pixelAdjust;
  int clearScreen;
};

/* 3261 */
struct $3C7A8D38A9BF8FC49B52AABA7396F3B0
{
  int gfxEntCount;
  int geoIndexCount;
  int fxIndexCount;
};

/* 3262 */
struct GfxFrameStats
{
  GfxStageStats stages[16];
  GfxPrimStatsStage currentStage;
  GfxPrimStatsTarget currentTarget;
  $3C7A8D38A9BF8FC49B52AABA7396F3B0 counters;
};

/* 3263 */
const struct GfxBackEndData
{
  char surfsBuffer[1];
  __declspec(align(128)) FxCodeMeshData codeMeshes[1];
  __declspec(align(128)) unsigned int primDrawSurfsBuf[65536];
  char lodData[4][16384];
  GfxViewParms viewParms[9];
  __declspec(align(64)) char primaryLightTechType[16][256];
  vec4_t codeMeshArgs[256];
  GfxParticleCloud clouds[256];
  GfxDrawSurf drawSurfs[1];
  __declspec(align(16)) GfxMeshData *codeMeshPtr;
  __declspec(align(16)) GfxMeshData markMesh;
  __declspec(align(16)) GfxMeshData glassMesh;
  GfxBackEndPrimitiveData prim;
  char shadowableLightHasShadowMap[255];
  unsigned int frameCount;
  int drawSurfCount;
  volatile int surfPos;
  volatile int gfxEntCount;
  GfxEntity gfxEnts[256];
  volatile int shaderConstantSetCount;
  ShaderConstantSet shaderConstantSets[128];
  volatile int textureOverrideCount;
  GfxTextureOverride textureOverrides[1024];
  volatile int cloudCount;
  volatile int codeMeshCount;
  volatile int codeMeshArgsCount;
  volatile int markMeshCount;
  FxMarkMeshData markMeshes[1];
  GfxVertexBufferState *skinnedCacheVb;
  volatile int skinnedCacheVertsAllocated;
  GfxIndexBufferState *dynamicIndexBuffer;
  GfxVertexBufferState *dynamicVertexBuffer;
  ID3D11Query *endFence;
  ID3D11Query *endFrameFence;
  char *tempSkinBuf;
  volatile int tempSkinPos;
  int tempSkinSize;
  int viewParmCount;
  GfxFog fogSettings;
  GfxCmdArray *commands;
  unsigned int viewInfoIndex;
  unsigned int viewInfoCount;
  GfxViewInfo *viewInfo;
  GfxWorkerData workerData[4];
  GfxUI3DBackend rbUI3D;
  GfxQRCodeBackend rbQRCode;
  const void *cmds;
  const void *compositingCmds;
  GfxLight sunLight;
  int hasApproxSunDirChanged;
  volatile int primDrawSurfPos;
  unsigned int streamerExecedFrame;
  unsigned int frameLastTransferId;
  jqBatchGroup glassGenerateVertsBatchGroup;
  DebugGlobals debugGlobals;
  unsigned int dualPlaySplitScreenOn;
  unsigned int drawType;
  float eyeOffset;
  int hideMatureContent;
  int splitscreen;
  GfxLight shadowableLights[255];
  unsigned int shadowableLightCount;
  unsigned int emissiveSpotLightIndex;
  GfxLight emissiveSpotLight;
  unsigned int emissiveSpotLightCount;
  int emissiveSpotLightShadowableLightIndex;
  GfxSunShadow sunShadow;
  unsigned int spotShadowCount;
  GfxSpotShadow spotShadows[4];
  WindState gfxWindState;
  GfxFrameStats frameStats;
};

/* 3264 */
struct GfxCmdBufSourceState
{
  GfxCodeMatrices matrices;
  GfxCmdBufInput input;
  GfxViewParms viewParms;
  GfxMatrix shadowLookupMatrix;
  unsigned __int16 constVersions[243];
  unsigned __int16 matrixVersions[8];
  __declspec(align(16)) vec4_t eyeOffset;
  unsigned int shadowableLightForShadowLookupMatrix;
  GfxScaledPlacement *objectPlacement;
  GfxViewParms *viewParms3D;
  unsigned int depthHackFlags;
  GfxScaledPlacement skinnedPlacement;
  int cameraView;
  GfxViewMode viewMode;
  GfxSceneDef sceneDef;
  GfxViewport sceneViewport;
  GfxViewport scissorViewport;
  float materialTime;
  float destructibleBurnAmount;
  char viewportBehavior;
  int renderTargetWidth;
  int renderTargetHeight;
  bool viewportIsDirty;
  bool scissorEnabled;
  unsigned int shadowableLightIndex;
};

/* 3265 */
struct GfxLightingSH
{
  vec4_t V0;
  vec4_t V1;
  vec4_t V2;
};

/* 3266 */
struct mnode_t
{
  unsigned __int16 cellIndex;
  unsigned __int16 rightChildOffset;
};

/* 3267 */
struct $2C46A308406431F1AF62C936A4C69248
{
  unsigned __int32 dynamicIndexBufferQwordOffset : 17;
  unsigned __int32 triCount : 15;
};

/* 3268 */
union CullInfo
{
  $2C46A308406431F1AF62C936A4C69248 fields;
  unsigned int packed;
};

/* 3269 */
struct __declspec(align(64)) DxGlobals
{
  HINSTANCE__ *hinst;
  ID3D11Device *device;
  ID3D11DeviceContext *context;
  ID3D11Buffer *constBuffer[4];
  unsigned int vendorId;
  bool adapterNativeIsValid;
  int adapterNativeWidth;
  int adapterNativeHeight;
  int adapterFullscreenWidth;
  int adapterFullscreenHeight;
  bool nvInitialized;
  bool nvStereoActivated;
  void *nvStereoHandle;
  __declspec(align(8)) TxaaCtxDX txaaCtx;
  int adapterIndex;
  bool vidRestart;
  bool needResizeBuffers;
  bool doResizeBuffers;
  bool ignoreResize;
  bool needsShaderWarming;
  int lastMaterialWarmed;
  DXGI_FORMAT depthStencilFormat;
  DxCmdBuf cmdBuf[4];
  unsigned int monitorCount;
  unsigned int displayModeCount[8];
  DXGI_MODE_DESC displayModes[8][512];
  const char *resolutionNameTable[513];
  char modeText[10240];
  const char *monitorResolutionNameTable[8][513];
  char monitorModeText[81920];
  ID3D11Query *fencePool[8];
  unsigned int nextFence;
  int gpuCount;
  void (__cdecl *resolutionCallback)(bool);
  unsigned int multiSampleType;
  unsigned int multiSampleQuality;
  unsigned __int16 sunShadowPartition;
  unsigned __int16 spotShadowPartition;
  ID3D11DepthStencilView *singleSampleDepthStencilSurface;
  int targetWindowIndex;
  int windowCount;
  GfxWindowTarget windows[1];
  IDXGISwapChain *swapChain;
  ID3D11Texture2D *backBuffer;
  ID3D11Query *flushGpuQuery;
  int linearMippedAnisotropy;
  int anisotropyFor2x;
  int anisotropyFor4x;
  int mipFilterMode;
  unsigned int mipBias;
};

/* 3270 */
struct GfxLightingSHQuantized
{
  unsigned __int16 V0[4];
  unsigned __int16 V1[4];
  unsigned __int16 V2[4];
};

/* 3271 */
struct __declspec(align(4)) dwFileTask
{
  char *m_filename;
  bdFileData m_fileData;
  bdLobbyErrorCode m_error;
  unsigned __int64 m_fileID;
  unsigned int m_fileSize;
  unsigned int m_bufferSize;
  bdFileInfo m_fileInfo;
  void *m_buffer;
  bool m_optional;
};

/* 3272 */
struct __declspec(align(4)) GfxGlobals
{
  bool startedRenderThread;
  bool isMultiplayer;
  bool isZombie;
  volatile int endFrameFence;
  bool isRenderingRemoteUpdate;
  volatile int screenUpdateNotify;
  volatile int remoteScreenUpdateNesting;
  volatile int remoteScreenUpdateInGame;
  volatile int remoteScreenUpdateLUI;
  char remoteScreenLastSceneResolveTarget;
  int backEndFrameCount;
  char frameBuffer;
};

/* 3273 */
struct $427A3FB8FC4E7A3E4AEEA66974B759B1
{
  unsigned int strides[3];
  ID3D11Buffer *vbs[3];
  unsigned int offsets[3];
};

/* 3274 */
union $0454E3A8B523CBFD50A13F2A8813B3F9
{
  ID3D11DeviceContext *device;
  ID3D11DeviceContext *localDevice;
};

/* 3275 */
struct __declspec(align(16)) GfxCmdBufPrimState
{
  $0454E3A8B523CBFD50A13F2A8813B3F9 ___u0;
  ID3D11Buffer *indexBuffer;
  MaterialVertexDeclType vertDeclType;
  $427A3FB8FC4E7A3E4AEEA66974B759B1 streams;
  ID3D11InputLayout *vertexDecl;
  __m128 constantsBuffer[262];
  char *constants[4];
  bool constantsDirty[4];
  GfxFrameStats frameStats;
};

/* 3276 */
union $6BCCDFC3C21E1BECE5F6F767832D9379
{
  MaterialPass *localPass;
  MaterialPass *pass;
};

/* 3277 */
struct __declspec(align(16)) GfxCmdBufState
{
  char refSamplerState[16];
  unsigned int samplerState[16];
  GfxTexture *samplerTexture[16];
  GfxCmdBufPrimState prim;
  Material *material;
  char techType;
  MaterialTechnique *technique;
  $6BCCDFC3C21E1BECE5F6F767832D9379 ___u7;
  unsigned int passIndex;
  GfxDepthRangeType depthRangeType;
  float depthRangeNear;
  float depthRangeFar;
  unsigned __int64 vertexShaderConstStateBuffer[1048];
  unsigned __int64 *vertexShaderConstState[4];
  unsigned __int64 pixelShaderConstStateBuffer[1048];
  unsigned __int64 *pixelShaderConstState[4];
  char alphaRef;
  ID3D11BlendState *blendState;
  ID3D11DepthStencilState *depthStencilState;
  ID3D11RasterizerState *rasterizerState;
  MaterialPixelShader *pixelShader;
  MaterialVertexShader *vertexShader;
  unsigned int pixPrimarySortKey;
  Material *pixMaterial;
  MaterialTechnique *pixTechnique;
  int pixCombine;
  GfxViewport viewport;
  GfxViewport scissor;
  int scissorEnabled;
  char renderTargetId;
  int stateOverride;
  GfxBackEndData *backEndData;
};

/* 3278 */
struct VariantWind
{
  vec3_t wind_vector;
  vec3_t rustle_angular_frequency;
  vec3_t rustle_amplitude;
  float blade_acceleration;
  float blade_velocity;
  int reset_timer;
  int gust_start;
  int gust_dur;
};

/* 3279 */
struct GrassWind
{
  vec2_t pos;
  vec2_t dir;
  float strength_skew;
  int life_span;
  int start_time;
};

/* 3280 */
struct FX_WindInfo
{
  vec3_t windVector;
  float lowWindAltitude;
  float hiWindAltitude;
  float lowWindStrengthPercent;
  float windVectorMagnitude;
};

/* 3281 */
struct __declspec(align(4)) weaponState_t
{
  playerState_s *ps;
  float xyspeed;
  float frametime;
  float fLastIdleFactor;
  int time;
  int damageTime;
  float v_dmg_pitch;
  float v_dmg_roll;
  int *removeMeUnusedInt;
  vec3_t baseAngles;
  vec3_t baseOrigin;
  vec3_t recoilAngles;
  vec3_t recoilSpeed;
  vec3_t swayAngles;
  vec3_t swayOrigin;
  vec3_t swayViewAngles;
  vec3_t bobAngles;
  int shellShockStart;
  int shellShockDuration;
  int shellShockFadeTime;
  vec3_t damageKickAngles;
  bool isServer;
};

/* 3282 */
struct viewState_t
{
  playerState_s *ps;
  int damageTime;
  int time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float xyspeed;
  float frametime;
  float fLastIdleFactor;
  int *removeMeUnusedInt;
};

/* 3283 */
struct std::_Container_proxy
{
  std::_Container_base12 *_Mycont;
  std::_Iterator_base12 *_Myfirstiter;
};

/* 3284 */
const struct std::_Container_base12
{
  std::_Container_proxy *_Myproxy;
};

/* 3285 */
struct std::_Iterator_base12
{
  std::_Container_proxy *_Myproxy;
  std::_Iterator_base12 *_Mynextiter;
};

/* 3286 */
struct __cppobj std::_Num_base
{
};

/* 3287 */
struct __cppobj std::_Num_int_base : std::_Num_base
{
};

/* 3288 */
struct __cppobj std::numeric_limits<unsigned int> : std::_Num_int_base
{
};

/* 3289 */
struct __cppobj std::allocator<void>
{
};

/* 3290 */
struct __declspec(align(8)) std::fpos<int>
{
  __int64 _Myoff;
  __int64 _Fpos;
  int _Mystate;
};

/* 3291 */
struct __cppobj std::char_traits<wchar_t>
{
};

/* 3292 */
struct __cppobj std::char_traits<char>
{
};

/* 3293 */
struct __cppobj std::_Num_float_base : std::_Num_base
{
};

/* 3294 */
struct __cppobj std::numeric_limits<float> : std::_Num_float_base
{
};

/* 3295 */
struct __cppobj std::numeric_limits<__int64> : std::_Num_int_base
{
};

/* 3296 */
struct __cppobj std::numeric_limits<bool> : std::_Num_int_base
{
};

/* 3297 */
struct __cppobj std::numeric_limits<unsigned short> : std::_Num_int_base
{
};

/* 3298 */
struct __cppobj std::_Container_base0
{
};

/* 3299 */
struct __cppobj std::numeric_limits<unsigned long> : std::_Num_int_base
{
};

/* 3300 */
struct __cppobj std::numeric_limits<int> : std::_Num_int_base
{
};

/* 3301 */
struct __cppobj std::_Iterator_base0
{
};

/* 3302 */
struct __cppobj std::tr1::_Nil
{
};

/* 3303 */
struct __cppobj std::tr1::bad_weak_ptr : std::exception
{
};

/* 3304 */
struct std::tr1::_Ref_count_base
{
  std::tr1::_Ref_count_baseVtbl *vfptr;
  int _Uses;
  int _Weaks;
};

/* 3306 */
struct type_infoVtbl
{
  void *(__thiscall *__vecDelDtor)(#3305 *this, unsigned int);
};

/* 3307 */
union $2F2513452CC59F630EE04DCFD73F26AF
{
  void (__thiscall *~_Ref_count_base)(std::tr1::_Ref_count_base *this);
  void *(__thiscall *__vecDelDtor)(std::tr1::_Ref_count_base *this, unsigned int);
};

/* 3308 */
struct std::tr1::_Ref_count_baseVtbl
{
  void (__thiscall *_Destroy)(std::tr1::_Ref_count_base *this);
  void (__thiscall *_Delete_this)(std::tr1::_Ref_count_base *this);
  $2F2513452CC59F630EE04DCFD73F26AF ___u2;
  void *(__thiscall *_Get_deleter)(std::tr1::_Ref_count_base *this, #3305 *);
};

/* 3309 */
struct __cppobj std::char_traits<unsigned short>
{
};

/* 3310 */
struct __cppobj std::numeric_limits<char> : std::_Num_int_base
{
};

/* 3311 */
struct __cppobj std::numeric_limits<double> : std::_Num_float_base
{
};

/* 3312 */
struct __cppobj std::numeric_limits<long double> : std::_Num_float_base
{
};

/* 3313 */
struct __cppobj std::numeric_limits<long> : std::_Num_int_base
{
};

/* 3314 */
struct __cppobj std::numeric_limits<wchar_t> : std::_Num_int_base
{
};

/* 3315 */
struct __cppobj std::numeric_limits<unsigned char> : std::_Num_int_base
{
};

/* 3316 */
struct __cppobj std::numeric_limits<unsigned __int64> : std::_Num_int_base
{
};

/* 3317 */
struct WeaponComponent
{
  char name[64];
  eWeaponComponentType type;
  eAttachment attachment;
  eAttachmentPoint attachmentPoint;
};

/* 3318 */
struct std::_Pair_base<WeaponComponent *,WeaponComponent *>
{
  WeaponComponent *first;
  WeaponComponent *second;
};

/* 3319 */
struct __cppobj std::pair<WeaponComponent *,WeaponComponent *> : std::_Pair_base<WeaponComponent *,WeaponComponent *>
{
};

/* 3320 */
struct __cppobj std::numeric_limits<short> : std::_Num_int_base
{
};

/* 3321 */
struct __cppobj std::numeric_limits<signed char> : std::_Num_int_base
{
};

/* 3322 */
struct __cppobj std::_Nonscalar_ptr_iterator_tag
{
};

/* 3323 */
struct __type_info_node
{
  void *_MemPtr;
  __type_info_node *_Next;
};

/* 3324 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_27
{
  const void *pVFTable;
  void *spare;
  char name[27];
};

/* 3325 */
union _Dconst
{
  unsigned __int16 _Word[8];
  float _Float;
  long double _Double;
  long double _Long_double;
};

/* 3326 */
struct WeaponAttachmentTableEntry
{
  const char *displayName;
  const char *referenceName;
  const char *pointName;
  const char *imageName;
  const char *description;
  char allocationCost;
  char count;
  char unlockLvl;
  __int8 unlockPLevel : 7;
  __int8 isElite : 1;
  int referenceHash;
};

/* 3327 */
struct WeaponComponentList
{
  int numComponents;
  int numAttachments;
  WeaponComponent components[8];
};

/* 3328 */
struct __cppobj compare_weapon_component_sort
{
};

/* 3329 */
struct __declspec(align(8)) AttachmentTableEntry
{
  eAttachment attachmentIndex;
  eAttachmentPoint attachmentPointIndex;
  WeaponAttachmentTableEntry values;
  unsigned __int64 compatibleAttachments;
  bool isValid;
};

/* 3330 */
struct cspField_t
{
  const char *szName;
  int iOffset;
  int iFieldType;
};

/* 3331 */
struct WeaponFullDef
{
  WeaponVariantDef weapVariantDef;
  WeaponDef weapDef;
  WeaponAttachment *attachments[63];
  WeaponAttachmentUnique *attachmentUniques[95];
  XModel *gunXModel[16];
  const char *szXAnims[88];
  unsigned __int16 hideTags[32];
  unsigned __int16 notetrackSoundMapKeys[20];
  unsigned __int16 notetrackSoundMapValues[20];
  XModel *worldModel[16];
  XModel *attachViewModel[8];
  XModel *attachWorldModel[8];
  const char *attachViewModelTag[8];
  const char *attachWorldModelTag[8];
  float parallelBounce[32];
  float perpendicularBounce[32];
  float locationDamageMultipliers[21];
  char weaponCamo[64];
};

/* 3332 */
struct SurfaceTypeSoundList
{
  char *surfaceSoundBase;
  char **soundAliasList;
};

/* 3333 */
struct FxImpactEntry
{
  FxEffectDef *nonflesh[32];
  FxEffectDef *flesh[4];
};

/* 3334 */
struct __declspec(align(8)) WeaponStatsTable
{
  AttachmentTableEntry specificWeaponAttachments[64];
  AttachmentTableEntry *specificWeaponAttachmentPoints[6][64];
  int numSpecificWeaponAttachmentPoints[6];
  int numSpecificWeaponAttachments;
};

/* 3335 */
struct ddlRoot_t
{
  const char *name;
  ddlDef_t *ddlDef;
};

/* 3336 */
struct FxImpactTable
{
  const char *name;
  FxImpactEntry *table;
};

/* 3337 */
struct SndIndexEntry
{
  unsigned __int16 value;
  unsigned __int16 next;
};

/* 3338 */
struct SndRadverb
{
  char name[32];
  unsigned int id;
  float smoothing;
  float earlyTime;
  float lateTime;
  float earlyGain;
  float lateGain;
  float returnGain;
  float earlyLpf;
  float lateLpf;
  float inputLpf;
  float dampLpf;
  float wallReflect;
  float dryGain;
  float earlySize;
  float lateSize;
  float diffusion;
  float returnHighpass;
};

/* 3339 */
struct SndDuck
{
  char name[32];
  unsigned int id;
  float fadeIn;
  float fadeOut;
  float startDelay;
  float distance;
  float length;
  unsigned int fadeInCurve;
  unsigned int fadeOutCurve;
  float *attenuation;
  float *filter;
  int updateWhilePaused;
};

/* 3340 */
struct SndAssetBankHeader
{
  unsigned int magic;
  unsigned int version;
  unsigned int entrySize;
  unsigned int checksumSize;
  unsigned int dependencySize;
  unsigned int entryCount;
  unsigned int dependencyCount;
  unsigned int pad32;
  __int64 fileSize;
  __int64 entryOffset;
  __int64 checksumOffset;
  char checksumChecksum[16];
  char dependencies[512];
  char padding[1464];
};

/* 3341 */
struct __unaligned __declspec(align(2)) SndRuntimeAssetBank
{
  const char *zone;
  const char *language;
  int fileHandle;
  SndAssetBankHeader header;
  unsigned int entryOffset;
  char linkTimeChecksum[16];
  char filename[256];
  bool indicesLoaded;
  bool indicesAllocated;
};

/* 3342 */
struct SndAssetBankEntry
{
  unsigned int id;
  unsigned int size;
  unsigned int offset;
  unsigned int frameCount;
  char frameRateIndex;
  char channelCount;
  char looping;
  char format;
};

/* 3343 */
struct SndLoadedAssets
{
  const char *zone;
  const char *language;
  unsigned int loadedCount;
  unsigned int entryCount;
  SndAssetBankEntry *entries;
  unsigned int dataSize;
  char *data;
};

/* 3344 */
struct SndDialogScriptIdLookup
{
  unsigned int scriptId;
  unsigned int aliasId;
};

/* 3345 */
struct __declspec(align(2)) SndBank
{
  const char *name;
  unsigned int aliasCount;
  SndAliasList *alias;
  SndIndexEntry *aliasIndex;
  unsigned int radverbCount;
  SndRadverb *radverbs;
  unsigned int duckCount;
  SndDuck *ducks;
  SndRuntimeAssetBank streamAssetBank;
  SndRuntimeAssetBank loadAssetBank;
  SndLoadedAssets loadedAssets;
  unsigned int scriptIdLookupCount;
  SndDialogScriptIdLookup *scriptIdLookups;
  SndBankState state;
  int streamRequestId;
  bool pendingIo;
  bool ioError;
  bool runtimeAssetLoad;
};

/* 3346 */
struct SndPatch
{
  char *name;
  unsigned int elementCount;
  unsigned int *elements;
};

/* 3347 */
struct cNode_t
{
  cplane_s *plane;
  __int16 children[2];
};

/* 3348 */
struct TriggerModel
{
  int contents;
  unsigned __int16 hullCount;
  unsigned __int16 firstHull;
};

/* 3349 */
struct TriggerHull
{
  Bounds bounds;
  int contents;
  unsigned __int16 slabCount;
  unsigned __int16 firstSlab;
};

/* 3350 */
struct TriggerSlab
{
  vec3_t dir;
  float midPoint;
  float halfSize;
};

/* 3351 */
struct MapTriggers
{
  unsigned int count;
  TriggerModel *models;
  unsigned int hullCount;
  TriggerHull *hulls;
  unsigned int slabCount;
  TriggerSlab *slabs;
};

/* 3352 */
struct MapEnts
{
  const char *name;
  char *entityString;
  int numEntityChars;
  MapTriggers trigger;
};

/* 3353 */
struct DynEntityPose
{
  GfxPlacement pose;
  float radius;
};

/* 3354 */
struct DynEntityClient
{
  int physObjId;
  unsigned __int16 flags;
  unsigned __int16 lightingHandle;
  int health;
  unsigned __int16 burnTime;
  unsigned __int16 fadeTime;
  int physicsStartTime;
};

/* 3355 */
struct DynEntityServer
{
  unsigned __int16 flags;
  int health;
};

/* 3356 */
struct DynEntityColl
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  vec3_t linkMins;
  vec3_t linkMaxs;
  int contents;
};

/* 3357 */
struct par_t
{
  vec3_t p;
  vec3_t p0;
  vec3_t p_prev;
  int flags;
};

/* 3358 */
struct rope_frame_verts_t
{
  int num_verts;
  vec3_t v[50];
};

/* 3359 */
struct rope_client_verts_t
{
  rope_frame_verts_t frame_verts[2];
  unsigned int frame_index;
};

/* 3360 */
struct __declspec(align(4)) rope_t
{
  par_t m_particles[25];
  constraint_t m_constraints[30];
  int m_entity_anchors[3];
  int m_num_particles;
  int m_num_constraints;
  int m_num_entity_anchors;
  int m_num_draw_verts;
  rope_client_verts_t m_client_verts;
  vec3_t m_min;
  vec3_t m_max;
  vec3_t m_start;
  vec3_t m_end;
  int m_in_use;
  int m_visible;
  int m_dist_constraint;
  int m_flags;
  Material *m_material;
  float m_seglen;
  float m_length;
  float m_width;
  float m_scale;
  float m_force_scale;
  int m_health;
  int m_frame;
  int m_stable_count;
  int m_static_rope;
  unsigned __int16 m_lightingHandle;
};

/* 3361 */
struct clipMap_t
{
  const char *name;
  int isInUse;
  ClipInfo info;
  ClipInfo *pInfo;
  unsigned int numStaticModels;
  cStaticModel_s *staticModelList;
  unsigned int numNodes;
  cNode_t *nodes;
  unsigned int numLeafs;
  cLeaf_s *leafs;
  unsigned int vertCount;
  vec3_t *verts;
  int triCount;
  unsigned __int16 *triIndices;
  char *triEdgeIsWalkable;
  int partitionCount;
  CollisionPartition *partitions;
  int aabbTreeCount;
  CollisionAabbTree *aabbTrees;
  unsigned int numSubModels;
  cmodel_t *cmodels;
  int numClusters;
  int clusterBytes;
  char *visibility;
  int vised;
  MapEnts *mapEnts;
  cbrush_t *box_brush;
  cmodel_t box_model;
  unsigned __int16 originalDynEntCount;
  unsigned __int16 dynEntCount[4];
  DynEntityDef *dynEntDefList[2];
  DynEntityPose *dynEntPoseList[2];
  DynEntityClient *dynEntClientList[2];
  DynEntityServer *dynEntServerList[2];
  DynEntityColl *dynEntCollList[4];
  int num_constraints;
  PhysConstraint *constraints;
  int max_ropes;
  rope_t *ropes;
  unsigned int checksum;
};

/* 3362 */
struct ComPrimaryLight
{
  char type;
  char canUseShadowMap;
  char exponent;
  char priority;
  __int16 cullDist;
  char useCookie;
  char shadowmapVolume;
  vec3_t color;
  vec3_t dir;
  vec3_t origin;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  float cosHalfFovExpanded;
  float rotationLimit;
  float translationLimit;
  float mipDistance;
  float dAttenuation;
  float roundness;
  vec4_t diffuseColor;
  vec4_t falloff;
  vec4_t angle;
  vec4_t aAbB;
  vec4_t cookieControl0;
  vec4_t cookieControl1;
  vec4_t cookieControl2;
  const char *defName;
};

/* 3363 */
struct ComWorld
{
  const char *name;
  int isInUse;
  unsigned int primaryLightCount;
  ComPrimaryLight *primaryLights;
};

/* 3364 */
struct pathbasenode_t
{
  vec3_t vOrigin;
  unsigned int type;
};

/* 3366 */
struct pathnode_tree_nodes_t
{
  int nodeCount;
  unsigned __int16 *nodes;
};

/* 3367 */
union pathnode_tree_info_t
{
  pathnode_tree_t *child[2];
  pathnode_tree_nodes_t s;
};

/* 3365 */
struct pathnode_tree_t
{
  int axis;
  float dist;
  pathnode_tree_info_t u;
};

/* 3368 */
struct PathData
{
  unsigned int nodeCount;
  unsigned int originalNodeCount;
  pathnode_t *nodes;
  pathbasenode_t *basenodes;
  int visBytes;
  char *pathVis;
  int smoothBytes;
  char *smoothCache;
  int nodeTreeCount;
  pathnode_tree_t *nodeTree;
};

/* 3369 */
struct GameWorldSp
{
  const char *name;
  PathData path;
};

/* 3370 */
struct GameWorldMp
{
  const char *name;
  PathData path;
};

/* 3371 */
struct GfxStreamingAabbTree
{
  vec4_t mins;
  vec4_t maxs;
  float maxStreamingDistance;
  unsigned __int16 firstItem;
  unsigned __int16 itemCount;
  unsigned __int16 firstChild;
  unsigned __int16 childCount;
  unsigned __int16 smodelCount;
  unsigned __int16 surfaceCount;
};

/* 3372 */
struct GfxWorldStreamInfo
{
  int aabbTreeCount;
  GfxStreamingAabbTree *aabbTrees;
  int leafRefCount;
  int *leafRefs;
};

/* 3373 */
struct GfxWorldSun
{
  unsigned int control;
  vec3_t angles;
  vec4_t ambientColor;
  vec4_t sunCd;
  vec4_t sunCs;
  vec4_t skyColor;
  float exposure;
};

/* 3374 */
struct SunLightParseParams
{
  char name[64];
  GfxWorldSun initWorldSun[1];
  float fogTransitionTime;
  GfxWorldFog initWorldFog[1];
};

/* 3375 */
struct GfxLightCorona
{
  vec3_t origin;
  float radius;
  vec3_t color;
  float intensity;
};

/* 3376 */
struct GfxShadowMapVolume
{
  unsigned int control;
  unsigned int padding1;
  unsigned int padding2;
  unsigned int padding3;
};

/* 3377 */
struct GfxVolumePlane
{
  vec4_t plane;
};

/* 3378 */
struct GfxExposureVolume
{
  unsigned int control;
  float exposure;
  float luminanceIncreaseScale;
  float luminanceDecreaseScale;
  float featherRange;
  float featherAdjust;
};

/* 3379 */
struct GfxWorldFogVolume
{
  vec3_t mins;
  unsigned int control;
  vec3_t maxs;
  float fogTransitionTime;
  unsigned int controlEx;
  GfxWorldFog volumeWorldFog[1];
};

/* 3380 */
struct GfxWorldFogModifierVolume
{
  unsigned int control;
  unsigned __int16 minX;
  unsigned __int16 minY;
  unsigned __int16 minZ;
  unsigned __int16 maxX;
  unsigned __int16 maxY;
  unsigned __int16 maxZ;
  unsigned int controlEx;
  float transitionTime;
  float depthScale;
  float heightScale;
  vec4_t colorAdjust;
};

/* 3381 */
struct GfxLutVolume
{
  vec3_t mins;
  unsigned int control;
  vec3_t maxs;
  float lutTransitionTime;
  unsigned int lutIndex;
};

/* 3382 */
struct GfxSkyDynamicIntensity
{
  float angle0;
  float angle1;
  float factor0;
  float factor1;
};

/* 3383 */
struct GfxWorldDpvsPlanes
{
  int cellCount;
  cplane_s *planes;
  unsigned __int16 *nodes;
  unsigned int *sceneEntCellBits;
};

/* 3385 */
struct GfxPortalWritable
{
  bool isQueued;
  bool isAncestor;
  char recursionDepth;
  char hullPointCount;
  vec2_t *hullPoints;
  GfxPortal *queuedParent;
};

/* 3386 */
struct DpvsPlane
{
  vec4_t coeffs;
  char side[3];
  char pad;
};

/* 3384 */
struct GfxPortal
{
  GfxPortalWritable writable;
  DpvsPlane plane;
  GfxCell *cell;
  vec3_t *vertices;
  char vertexCount;
  vec3_t hullAxis[2];
  vec3_t bounds[2];
};

/* 3387 */
struct GfxCell
{
  vec3_t mins;
  vec3_t maxs;
  int aabbTreeCount;
  GfxAabbTree *aabbTree;
  int portalCount;
  GfxPortal *portals;
  char reflectionProbeCount;
  char *reflectionProbes;
};

/* 3388 */
struct GfxReflectionProbeVolumeData
{
  vec4_t volumePlanes[6];
};

/* 3389 */
struct GfxReflectionProbe
{
  vec3_t origin;
  GfxLightingSH lightingSH;
  GfxImage *reflectionImage;
  GfxReflectionProbeVolumeData *probeVolumes;
  unsigned int probeVolumeCount;
  float mipLodBias;
};

/* 3390 */
struct GfxLightmapArray
{
  GfxImage *primary;
  GfxImage *secondary;
};

/* 3391 */
struct GfxWorldVertexData0
{
  char *data;
  ID3D11Buffer *vb;
};

/* 3392 */
struct GfxWorldVertexData1
{
  char *data;
  ID3D11Buffer *vb;
};

/* 3393 */
union $B00C7BA1F6BCB752A625CB21CFCC2148
{
  GfxReflectionProbe *localReflectionProbes;
  GfxReflectionProbe *reflectionProbes;
};

/* 3394 */
union $7D9FC739F331848F7CC74E7177551D3C
{
  GfxTexture *localReflectionProbeTextures;
  GfxTexture *reflectionProbeTextures;
};

/* 3395 */
union $41F5F5419BB7F2DCD0FA52E28CD95050
{
  GfxLightmapArray *localLightmaps;
  GfxLightmapArray *lightmaps;
};

/* 3396 */
union $12270AA54EFF1A06CB812BB3A3A8DF23
{
  GfxTexture *localLightmapPrimaryTextures;
  GfxTexture *lightmapPrimaryTextures;
};

/* 3397 */
union $6FED37B8D7A6034D686926136BEE4544
{
  GfxTexture *localLightmapSecondaryTextures;
  GfxTexture *lightmapSecondaryTextures;
};

/* 3398 */
struct GfxWorldDraw
{
  unsigned int reflectionProbeCount;
  $B00C7BA1F6BCB752A625CB21CFCC2148 ___u1;
  $7D9FC739F331848F7CC74E7177551D3C ___u2;
  int lightmapCount;
  $41F5F5419BB7F2DCD0FA52E28CD95050 ___u4;
  $12270AA54EFF1A06CB812BB3A3A8DF23 ___u5;
  $6FED37B8D7A6034D686926136BEE4544 ___u6;
  unsigned int vertexCount;
  unsigned int vertexDataSize0;
  GfxWorldVertexData0 vd0;
  unsigned int vertexDataSize1;
  GfxWorldVertexData1 vd1;
  int indexCount;
  unsigned __int16 *indices;
  ID3D11Buffer *indexBuffer;
};

/* 3399 */
struct GfxLightGridEntry
{
  unsigned __int16 colorsIndex;
  char primaryLightIndex;
  char visibility;
};

/* 3400 */
struct GfxCompressedLightGridColors
{
  char rgb[56][3];
};

/* 3401 */
struct GfxCompressedLightGridCoeffs
{
  unsigned __int16 coeffs[9][3];
};

/* 3402 */
struct GfxSkyGridVolume
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t lightingOrigin;
  unsigned __int16 colorsIndex;
  char primaryLightIndex;
  char visibility;
};

/* 3403 */
struct GfxLightGrid
{
  unsigned int sunPrimaryLightIndex;
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
  float offset;
  unsigned int rowAxis;
  unsigned int colAxis;
  unsigned __int16 *rowDataStart;
  unsigned int rawRowDataSize;
  char *rawRowData;
  unsigned int entryCount;
  GfxLightGridEntry *entries;
  unsigned int colorCount;
  GfxCompressedLightGridColors *colors;
  unsigned int coeffCount;
  GfxCompressedLightGridCoeffs *coeffs;
  unsigned int skyGridVolumeCount;
  GfxSkyGridVolume *skyGridVolumes;
};

/* 3404 */
struct GfxBrushModelWritable
{
  vec3_t mins;
  float padding1;
  vec3_t maxs;
  float padding2;
};

/* 3405 */
struct GfxBrushModel
{
  GfxBrushModelWritable writable;
  vec3_t bounds[2];
  unsigned int surfaceCount;
  unsigned int startSurfIndex;
};

/* 3406 */
struct MaterialMemory
{
  Material *material;
  int memory;
};

/* 3407 */
struct sunflare_t
{
  bool hasValidData;
  Material *spriteMaterial;
  Material *flareMaterial;
  float spriteSize;
  float flareMinSize;
  float flareMinDot;
  float flareMaxSize;
  float flareMaxDot;
  float flareMaxAlpha;
  int flareFadeInTime;
  int flareFadeOutTime;
  float blindMinDot;
  float blindMaxDot;
  float blindMaxDarken;
  int blindFadeInTime;
  int blindFadeOutTime;
  float glareMinDot;
  float glareMaxDot;
  float glareMaxLighten;
  int glareFadeInTime;
  int glareFadeOutTime;
  vec3_t sunFxPosition;
};

/* 3408 */
struct $D5CE1A3EB2B8FD372BC3B42B9754BDC5
{
  char state;
  char lod;
  unsigned __int16 surfId;
};

/* 3409 */
union XModelDrawInfo
{
  $D5CE1A3EB2B8FD372BC3B42B9754BDC5 __s0;
  unsigned int packed;
};

/* 3410 */
struct GfxSceneDynModel
{
  XModelDrawInfo info;
  unsigned __int16 dynEntId;
  char primaryLightIndex;
  char reflectionProbeIndex;
};

/* 3411 */
struct BModelDrawInfo
{
  unsigned __int16 surfId;
};

/* 3412 */
struct GfxSceneDynBrush
{
  BModelDrawInfo info;
  unsigned __int16 dynEntId;
};

/* 3413 */
struct SSkinShaders
{
  char *pixelShaderAlign;
  char *pixelShader;
  char *vertexShader;
  int pixelShaderSize;
  int vertexShaderSize;
};

/* 3414 */
struct half
{
  unsigned __int16 v;
};

/* 3415 */
struct $C7DF49D1D52C6518D1B6C549A4A2DCEB
{
  half x;
  half y;
  half z;
  half w;
};

/* 3416 */
union $4AB8748621D91C89E79399E6185EE26B
{
  $C7DF49D1D52C6518D1B6C549A4A2DCEB __s0;
  unsigned __int64 v;
};

/* 3417 */
struct half4
{
  $4AB8748621D91C89E79399E6185EE26B ___u0;
};

/* 3418 */
struct $745FEA5EEDBE9E377206CD7843226613
{
  half x;
  half y;
};

/* 3419 */
union $C592A6FAFF0DBB04BEA5BEE4ADCF6364
{
  $745FEA5EEDBE9E377206CD7843226613 __s0;
  unsigned int v;
};

/* 3420 */
struct half2
{
  $C592A6FAFF0DBB04BEA5BEE4ADCF6364 ___u0;
};

/* 3421 */
struct SSkinVert
{
  half4 pos_bone;
  PackedUnitVec normal;
  half2 uv;
};

/* 3422 */
struct SSkinModel
{
  int numVerts;
  int numTris;
  SSkinVert *verts;
  unsigned __int16 *tris;
};

/* 3423 */
struct SSkinAnim
{
  int bones;
  int width;
  int frames;
  float *data;
};

/* 3424 */
union $8CD08E0267F3D6AE565CC925C684CF53
{
  vector4 mat;
  float disk_mat[16];
};

/* 3425 */
struct SSkinInstance
{
  $8CD08E0267F3D6AE565CC925C684CF53 ___u0;
  SSkinShaders *shaders;
  SSkinModel *model;
  SSkinAnim *anim;
  SSkinVert *instVerts;
  float frame;
  int pad1;
  int pad2;
  int pad3;
};

/* 3426 */
struct GfxShadowGeometry
{
  unsigned __int16 surfaceCount;
  unsigned __int16 smodelCount;
  unsigned __int16 *sortedSurfIndex;
  unsigned __int16 *smodelIndex;
};

/* 3427 */
struct GfxLightRegionAxis
{
  vec3_t dir;
  float midPoint;
  float halfSize;
};

/* 3428 */
struct GfxLightRegionHull
{
  float kdopMidPoint[9];
  float kdopHalfSize[9];
  unsigned int axisCount;
  GfxLightRegionAxis *axis;
};

/* 3429 */
struct GfxLightRegion
{
  unsigned int hullCount;
  GfxLightRegionHull *hulls;
};

/* 3430 */
struct GfxStaticModelInst
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t lightingOrigin;
};

/* 3431 */
struct srfTriangles_t
{
  vec3_t mins;
  int vertexDataOffset0;
  vec3_t maxs;
  int vertexDataOffset1;
  int firstVertex;
  float himipRadiusInvSq;
  unsigned __int16 vertexCount;
  unsigned __int16 triCount;
  int baseIndex;
};

/* 3432 */
struct GfxSurface
{
  srfTriangles_t tris;
  Material *material;
  char lightmapIndex;
  char reflectionProbeIndex;
  char primaryLightIndex;
  char flags;
  vec3_t bounds[2];
};

/* 3433 */
struct GfxPackedPlacement
{
  vec3_t origin;
  vec3_t axis[3];
  float scale;
};

/* 3434 */
struct __declspec(align(4)) GfxStaticModelLmapVertexInfo
{
  unsigned int *lmapVertexColors;
  ID3D11Buffer *lmapVertexColorsVB;
  unsigned __int16 numLmapVertexColors;
};

/* 3435 */
struct GfxStaticModelDrawInst
{
  float cullDist;
  GfxPackedPlacement placement;
  XModel *model;
  int flags;
  float invScaleSq;
  unsigned __int16 lightingHandle;
  unsigned __int16 colorsIndex;
  GfxLightingSHQuantized lightingSH;
  char primaryLightIndex;
  char visibility;
  char reflectionProbeIndex;
  unsigned int smid;
  GfxStaticModelLmapVertexInfo lmapVertexInfo[4];
};

/* 3436 */
struct GfxWorldDpvsStatic
{
  unsigned int smodelCount;
  unsigned int staticSurfaceCount;
  unsigned int litSurfsBegin;
  unsigned int litSurfsEnd;
  unsigned int litTransSurfsBegin;
  unsigned int litTransSurfsEnd;
  unsigned int emissiveOpaqueSurfsBegin;
  unsigned int emissiveOpaqueSurfsEnd;
  unsigned int emissiveTransSurfsBegin;
  unsigned int emissiveTransSurfsEnd;
  unsigned int smodelVisDataCount;
  unsigned int surfaceVisDataCount;
  char *smodelVisData[3];
  char *surfaceVisData[3];
  char *smodelVisDataCameraSaved;
  char *surfaceVisDataCameraSaved;
  unsigned __int16 *sortedSurfIndex;
  GfxStaticModelInst *smodelInsts;
  GfxSurface *surfaces;
  GfxStaticModelDrawInst *smodelDrawInsts;
  GfxDrawSurf *surfaceMaterials;
  char *surfaceCastsSunShadow;
  char *surfaceCastsShadow;
  char *smodelCastsShadow;
  volatile int usageCount;
};

/* 3437 */
struct GfxWorldDpvsDynamic
{
  unsigned int dynEntClientWordCount[2];
  unsigned int dynEntClientCount[2];
  unsigned int *dynEntCellBits[2];
  char *dynEntVisData[2][3];
  volatile int usageCount;
};

/* 3438 */
struct GfxWaterBuffer
{
  unsigned int bufferSize;
  vec4_t *buffer;
};

/* 3439 */
struct Occluder
{
  unsigned int flags;
  char name[16];
  vec3_t points[4];
};

/* 3440 */
struct GfxOutdoorBounds
{
  vec3_t bounds[2];
};

/* 3441 */
struct GfxHeroLight
{
  char type;
  char unused[3];
  vec3_t color;
  vec3_t dir;
  vec3_t origin;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
};

/* 3442 */
struct GfxHeroLightTree
{
  vec3_t mins;
  vec3_t maxs;
  int leftNode;
  int rightNode;
};

/* 3443 */
struct GfxWorld
{
  const char *name;
  const char *baseName;
  int planeCount;
  int nodeCount;
  int surfaceCount;
  GfxWorldStreamInfo streamInfo;
  const char *skyBoxModel;
  SunLightParseParams sunParse;
  GfxLight *sunLight;
  unsigned int sunPrimaryLightIndex;
  unsigned int primaryLightCount;
  unsigned int coronaCount;
  GfxLightCorona *coronas;
  unsigned int shadowMapVolumeCount;
  GfxShadowMapVolume *shadowMapVolumes;
  unsigned int shadowMapVolumePlaneCount;
  GfxVolumePlane *shadowMapVolumePlanes;
  unsigned int exposureVolumeCount;
  GfxExposureVolume *exposureVolumes;
  unsigned int exposureVolumePlaneCount;
  GfxVolumePlane *exposureVolumePlanes;
  unsigned int worldFogVolumeCount;
  GfxWorldFogVolume *worldFogVolumes;
  unsigned int worldFogVolumePlaneCount;
  GfxVolumePlane *worldFogVolumePlanes;
  unsigned int worldFogModifierVolumeCount;
  GfxWorldFogModifierVolume *worldFogModifierVolumes;
  unsigned int worldFogModifierVolumePlaneCount;
  GfxVolumePlane *worldFogModifierVolumePlanes;
  unsigned int lutVolumeCount;
  GfxLutVolume *lutVolumes;
  unsigned int lutVolumePlaneCount;
  GfxVolumePlane *lutVolumePlanes;
  GfxSkyDynamicIntensity skyDynIntensity;
  GfxWorldDpvsPlanes dpvsPlanes;
  int cellBitsCount;
  GfxCell *cells;
  GfxWorldDraw draw;
  GfxLightGrid lightGrid;
  int modelCount;
  GfxBrushModel *models;
  vec3_t mins;
  vec3_t maxs;
  unsigned int checksum;
  int materialMemoryCount;
  MaterialMemory *materialMemory;
  sunflare_t sun;
  vec4_t outdoorLookupMatrix[4];
  GfxImage *outdoorImage;
  unsigned int *cellCasterBits;
  GfxSceneDynModel *sceneDynModel;
  GfxSceneDynBrush *sceneDynBrush;
  unsigned int *primaryLightEntityShadowVis;
  unsigned int *primaryLightDynEntShadowVis[2];
  unsigned int numSiegeSkinInsts;
  SSkinInstance *siegeSkinInsts;
  GfxShadowGeometry *shadowGeom;
  GfxLightRegion *lightRegion;
  GfxWorldDpvsStatic dpvs;
  GfxWorldDpvsDynamic dpvsDyn;
  float waterDirection;
  GfxWaterBuffer waterBuffers[2];
  Material *waterMaterial;
  Material *coronaMaterial;
  Material *ropeMaterial;
  Material *lutMaterial;
  unsigned int numOccluders;
  Occluder *occluders;
  unsigned int numOutdoorBounds;
  GfxOutdoorBounds *outdoorBounds;
  unsigned int heroLightCount;
  unsigned int heroLightTreeCount;
  GfxHeroLight *heroLights;
  GfxHeroLightTree *heroLightTree;
  unsigned int lightingFlags;
  int lightingQuality;
};

/* 3444 */
struct FontIconName
{
  const char *string;
  int hash;
};

/* 3445 */
struct FontIconEntry
{
  FontIconName fontIconName;
  Material *fontIconMaterialHandle;
  int fontIconSize;
  float xScale;
  float yScale;
};

/* 3446 */
struct FontIconAlias
{
  int aliasHash;
  int buttonHash;
};

/* 3447 */
struct FontIcon
{
  const char *name;
  int numEntries;
  int numAliasEntries;
  FontIconEntry *fontIconEntry;
  FontIconAlias *fontIconAlias;
};

/* 3448 */
struct MenuList
{
  const char *name;
  int menuCount;
  menuDef_t **menus;
};

/* 3449 */
struct LocalizeEntry
{
  const char *value;
  const char *name;
};

/* 3450 */
struct SndCurve
{
  char name[32];
  unsigned int id;
  vec2_t points[8];
};

/* 3451 */
struct SndPan
{
  char name[32];
  unsigned int id;
  float front;
  float back;
  float center;
  float lfe;
  float left;
  float right;
};

/* 3452 */
struct SndDuckGroup
{
  char name[32];
  unsigned int id;
};

/* 3453 */
struct SndContext
{
  unsigned int type;
  unsigned int values[8];
};

/* 3454 */
struct SndMaster
{
  char name[32];
  unsigned int id;
  int lowE;
  float lowG;
  float lowF;
  float lowQ;
  int peak1E;
  float peak1G;
  float peak1F;
  float peak1Q;
  int peak2E;
  float peak2G;
  float peak2F;
  float peak2Q;
  int hiE;
  float hiG;
  float hiF;
  float hiQ;
  float eqG;
  int compE;
  float compPG;
  float compMG;
  float compT;
  float compR;
  float compTA;
  float compTR;
  int limitE;
  float limitPG;
  float limitMG;
  float limitT;
  float limitR;
  float limitTA;
  float limitTR;
  float busReverbG;
  float busFxG;
  float busVoiceG;
  float busPfutzG;
  float busHdrfxG;
  float busUiG;
  float busMusicG;
  float busMovieG;
  float busVcsG;
  int busReverbE;
  int busFxE;
  int busVoiceE;
  int busPfutzE;
  int busHdrfxE;
  int busUiE;
  int busMusicE;
  int busMovieE;
  int hdrfxCompE;
  int voiceEqE;
  int voiceCompE;
};

/* 3455 */
struct SndSidechainDuck
{
  char name[32];
  unsigned int id;
  float g;
  float f;
  float q;
  float ta;
  float tr;
  float tf;
};

/* 3456 */
struct SndFutz
{
  char name[32];
  unsigned int id;
  float bpfF;
  float bpfQ;
  float lsG;
  float lsF;
  float lsQ;
  float dist;
  float preG;
  float postG;
  float th;
  float tg;
  float clippre;
  float clippost;
  float blend;
  unsigned int startAliasId;
  unsigned int stopAliasId;
  unsigned int loopAliasId;
};

/* 3457 */
struct SndDriverGlobals
{
  const char *name;
  unsigned int groupCount;
  SndVolumeGroup *groups;
  unsigned int curveCount;
  SndCurve *curves;
  unsigned int panCount;
  SndPan *pans;
  unsigned int duckGroupCount;
  SndDuckGroup *duckGroups;
  unsigned int contextCount;
  SndContext *contexts;
  unsigned int masterCount;
  SndMaster *masters;
  unsigned int voiceDuckCount;
  SndSidechainDuck *voiceDucks;
  unsigned int futzCount;
  SndFutz *futzes;
};

/* 3458 */
struct RawFile
{
  const char *name;
  int len;
  const char *buffer;
};

/* 3459 */
struct LbColumnDef
{
  const char *name;
  int colId;
  int dwColIndex;
  bool hidden;
  const char *statName;
  LbColType type;
  int precision;
  LbAggType agg;
  const char *localization;
  int uiCalColX;
  int uiCalColY;
};

/* 3460 */
struct LeaderboardDef
{
  const char *name;
  unsigned int id;
  int columnCount;
  int dwColumnCount;
  int xpColId;
  int prestigeColId;
  LbColumnDef *columns;
  LbUpdateType updateType;
  int trackTypes;
};

/* 3461 */
struct gump_info_t
{
  char *name;
  int size;
};

/* 3462 */
struct overlay_info_t
{
  char *name;
  int size;
};

/* 3463 */
struct XGlobals
{
  const char *name;
  int xanimStreamBufferSize;
  int cinematicMaxWidth;
  int cinematicMaxHeight;
  int extracamResolution;
  vec4_t screenClearColor;
  int bigestGumpSize;
  int gumpsCount;
  gump_info_t gumps[32];
  int bigestOverlaySize;
  int overlayCount;
  overlay_info_t overlays[32];
};

/* 3464 */
struct Glasses
{
  const char *name;
  unsigned int numGlasses;
  Glass *glasses;
  char *workMemory;
  unsigned int workMemorySize;
  unsigned int smallAllocatorBlocks;
  unsigned int maxGroups;
  unsigned int maxShards;
  unsigned int maxPhysics;
  unsigned int shardMemorySize;
  unsigned int maxFreeCmd;
  unsigned int numSlots;
  unsigned int numVerts;
  unsigned int numIndices;
};

/* 3465 */
struct EmblemLayer
{
  int cost;
  int unlockLevel;
  int unlockPLevel;
};

/* 3466 */
struct EmblemCategory
{
  const char *name;
  const char *description;
};

/* 3467 */
struct EmblemIconType
{
  const char *name;
  const char *description;
};

/* 3468 */
struct EmblemBGCategory
{
  const char *name;
  const char *description;
};

/* 3469 */
struct EmblemIcon
{
  GfxImage *image;
  const char *description;
  float outlineSize;
  int cost;
  int unlockLevel;
  int unlockPLevel;
  int unclassifyAt;
  int sortKey;
  unsigned __int16 iconType;
  unsigned __int16 category;
};

/* 3470 */
struct __declspec(align(4)) EmblemBackground
{
  Material *material;
  const char *description;
  int cost;
  int unlockLevel;
  int unlockPLevel;
  int unclassifyAt;
  int sortKey;
  unsigned __int16 bgCategory;
};

/* 3471 */
struct EmblemSet
{
  int colorCount;
  int layerCount;
  EmblemLayer *layers;
  int categoryCount;
  EmblemCategory *categories;
  int iconTypeCount;
  EmblemIconType *iconTypes;
  int bgCategoryCount;
  EmblemBGCategory *bgCategories;
  int iconCount;
  EmblemIcon *icons;
  int backgroundCount;
  EmblemBackground *backgrounds;
  int backgroundLookupCount;
  __int16 *backgroundLookup;
};

/* 3472 */
struct ScriptParseTree
{
  const char *name;
  int len;
  char *buffer;
};

/* 3473 */
struct KeyValuePair
{
  int keyHash;
  int namespaceHash;
  const char *value;
};

/* 3474 */
struct KeyValuePairs
{
  const char *name;
  int numVariables;
  KeyValuePair *keyValuePairs;
};

/* 3475 */
struct MemoryBlock
{
  const char *name;
  bool mainMem;
  bool videoMem;
  bool streamMem;
  unsigned int size;
  unsigned int alignment;
  char *data;
};

/* 3476 */
struct AddonMapEnts
{
  const char *name;
  char *entityString;
  int numEntityChars;
  MapTriggers trigger;
  ClipInfo *info;
  unsigned int numSubModels;
  cmodel_t *cmodels;
  GfxBrushModel *models;
};

/* 3477 */
struct SkinnedVertsDef
{
  const char *name;
  unsigned int maxSkinnedVerts;
};

/* 3478 */
struct Qdb
{
  const char *name;
  int len;
  char *buffer;
};

/* 3479 */
struct Slug
{
  const char *name;
  int len;
  char *buffer;
};

/* 3480 */
struct FootstepTableDef
{
  const char *name;
  unsigned int sndAliasTable[32][7];
};

/* 3481 */
struct FootstepFXTableDef
{
  const char *name;
  FxEffectDef *footstepFX[32];
};

/* 3482 */
union XAssetHeader
{
  XModelPieces *xmodelPieces;
  PhysPreset *physPreset;
  PhysConstraints *physConstraints;
  DestructibleDef *destructibleDef;
  XAnimParts *parts;
  XModel *model;
  Material *material;
  MaterialPixelShader *pixelShader;
  MaterialVertexShader *vertexShader;
  MaterialTechniqueSet *techniqueSet;
  GfxImage *image;
  SndBank *sound;
  SndPatch *soundPatch;
  clipMap_t *clipMap;
  ComWorld *comWorld;
  GameWorldSp *gameWorldSp;
  GameWorldMp *gameWorldMp;
  MapEnts *mapEnts;
  GfxWorld *gfxWorld;
  GfxLightDef *lightDef;
  Font_s *font;
  FontIcon *fontIcon;
  MenuList *menuList;
  menuDef_t *menu;
  LocalizeEntry *localize;
  WeaponVariantDef *weapon;
  WeaponAttachment *attachment;
  WeaponAttachmentUnique *attachmentUnique;
  WeaponCamo *weaponCamo;
  SndDriverGlobals *sndDriverGlobals;
  FxEffectDef *fx;
  FxImpactTable *impactFx;
  RawFile *rawfile;
  StringTable *stringTable;
  LeaderboardDef *leaderboardDef;
  XGlobals *xGlobals;
  ddlRoot_t *ddlRoot;
  Glasses *glasses;
  TextureList *textureList;
  EmblemSet *emblemSet;
  ScriptParseTree *scriptParseTree;
  KeyValuePairs *keyValuePairs;
  VehicleDef *vehicleDef;
  MemoryBlock *memoryBlock;
  AddonMapEnts *addonMapEnts;
  TracerDef *tracerDef;
  SkinnedVertsDef *skinnedVertsDef;
  Qdb *qdb;
  Slug *slug;
  FootstepTableDef *footstepTableDef;
  FootstepFXTableDef *footstepFXTableDef;
  ZBarrierDef *zbarrierDef;
  void *data;
};

/* 3483 */
struct __cppobj compare_attachment_sort
{
};

/* 3484 */
struct WeaponVariantDefHash
{
  int hash;
  int weaponIndex;
};

/* 3485 */
struct __declspec(align(4)) WeaponOptionTableEntry
{
  __int16 weaponOptionIndex;
  __int16 subOtionIndex;
  eWeaponOptionGroup weaponOptionGroup;
  WeaponAttachmentTableEntry values;
  bool isValid;
};

/* 3486 */
struct BulletFireParams
{
  int weaponEntIndex;
  int ignoreEntIndex;
  float damageMultiplier;
  int methodOfDeath;
  vec3_t origStart;
  vec3_t start;
  vec3_t end;
  vec3_t dir;
};

/* 3487 */
struct pml_t
{
  vec3_t forward;
  vec3_t right;
  vec3_t up;
  float frametime;
  int msec;
  int walking;
  int groundPlane;
  int almostGroundPlane;
  trace_t groundTrace;
  float impactSpeed;
  vec3_t previous_origin;
  vec3_t previous_velocity;
  unsigned int holdrand;
};

/* 3488 */
struct __declspec(align(16)) BulletTraceResults
{
  trace_t trace;
  gentity_t *hitEnt;
  vec3_t hitPos;
  bool ignoreHitEnt;
  int depthSurfaceType;
};

/* 3489 */
struct __declspec(align(16)) pmove_t
{
  playerState_s *ps;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int tracemask;
  int numtouch;
  int touchents[32];
  int numGlassTouch;
  int touchGlasses[32];
  vec3_t mins;
  vec3_t maxs;
  float xyspeed;
  float currentPitch;
  float averagePitch;
  int nextPitch;
  float pitchHistory[30];
  int proneChange;
  float maxSprintTimeMultiplier;
  bool mantleStarted;
  vec3_t mantleEndPos;
  int mantleDuration;
  int viewChangeTime;
  float viewChange;
  vec3_t vehicleAngles;
  pmoveVehAnimState_t vehAnimState;
  char handler;
  LocalClientNum_t localClientNum;
  gjkcc_input_t *m_gjkcc_input;
  colgeom_visitor_inlined_t<300> proximity_data;
  bool gravity;
  int gravityOverride;
};

/* 3490 */
struct __cppobj std::_Allocator_base<char>
{
};

/* 3491 */
struct __cppobj std::_Allocator_base<wchar_t>
{
};

/* 3492 */
struct __cppobj std::unary_function<double,unsigned int>
{
};

/* 3493 */
struct __cppobj std::logic_error : std::exception
{
};

/* 3494 */
struct __cppobj std::length_error : std::logic_error
{
};

/* 3495 */
union std::_String_val<char,std::allocator<char> >::_Bxty
{
  char _Buf[16];
  char *_Ptr;
  char _Alias[16];
};

/* 3496 */
struct __cppobj std::allocator<char> : std::_Allocator_base<char>
{
};

/* 3497 */
struct __cppobj __declspec(align(4)) std::_String_val<char,std::allocator<char> > : std::_Container_base0
{
  std::_String_val<char,std::allocator<char> >::_Bxty _Bx;
  unsigned int _Mysize;
  unsigned int _Myres;
  std::allocator<char> _Alval;
};

/* 3498 */
struct __cppobj std::basic_string<char,std::char_traits<char>,std::allocator<char> > : std::_String_val<char,std::allocator<char> >
{
};

/* 3499 */
struct __cppobj std::runtime_error : std::exception
{
};

/* 3500 */
struct __cppobj std::allocator<wchar_t> : std::_Allocator_base<wchar_t>
{
};

/* 3501 */
union std::_String_val<wchar_t,std::allocator<wchar_t> >::_Bxty
{
  wchar_t _Buf[8];
  wchar_t *_Ptr;
  char _Alias[8];
};

/* 3502 */
struct __cppobj __declspec(align(4)) std::_String_val<wchar_t,std::allocator<wchar_t> > : std::_Container_base0
{
  std::_String_val<wchar_t,std::allocator<wchar_t> >::_Bxty _Bx;
  unsigned int _Mysize;
  unsigned int _Myres;
  std::allocator<wchar_t> _Alval;
};

/* 3503 */
struct __cppobj std::allocator<char>::rebind<char>
{
};

/* 3504 */
struct __cppobj std::unary_function<float,unsigned int>
{
};

/* 3505 */
struct __cppobj std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : std::_String_val<wchar_t,std::allocator<wchar_t> >
{
};

/* 3506 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3507 */
struct __cppobj std::_String_const_iterator<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base0>
{
  const wchar_t *_Ptr;
};

/* 3508 */
struct __cppobj std::unary_function<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,unsigned int>
{
};

/* 3509 */
struct __cppobj std::invalid_argument : std::logic_error
{
};

/* 3510 */
struct __cppobj std::unary_function<unsigned __int64,unsigned int>
{
};

/* 3511 */
struct __cppobj std::hash<float> : std::unary_function<float,unsigned int>
{
};

/* 3512 */
struct __cppobj std::unary_function<__int64,unsigned int>
{
};

/* 3513 */
struct __cppobj std::hash<__int64> : std::unary_function<__int64,unsigned int>
{
};

/* 3514 */
struct __cppobj std::underflow_error : std::runtime_error
{
};

/* 3515 */
struct __cppobj std::allocator<wchar_t>::rebind<wchar_t>
{
};

/* 3516 */
struct __cppobj std::unary_function<unsigned long,unsigned int>
{
};

/* 3517 */
struct __cppobj std::unary_function<long double,unsigned int>
{
};

/* 3518 */
struct __cppobj std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>
{
};

/* 3519 */
struct __cppobj std::hash<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : std::unary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,unsigned int>
{
};

/* 3520 */
struct __cppobj std::hash<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > : std::unary_function<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,unsigned int>
{
};

/* 3521 */
struct __cppobj std::domain_error : std::logic_error
{
};

/* 3522 */
struct __cppobj std::hash<unsigned long> : std::unary_function<unsigned long,unsigned int>
{
};

/* 3523 */
struct __cppobj std::hash<double> : std::unary_function<double,unsigned int>
{
};

/* 3524 */
struct __cppobj std::overflow_error : std::runtime_error
{
};

/* 3525 */
struct __cppobj std::range_error : std::runtime_error
{
};

/* 3526 */
struct __cppobj std::hash<unsigned __int64> : std::unary_function<unsigned __int64,unsigned int>
{
};

/* 3527 */
struct __cppobj std::out_of_range : std::logic_error
{
};

/* 3528 */
struct __cppobj std::hash<long double> : std::unary_function<long double,unsigned int>
{
};

/* 3529 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3530 */
struct __cppobj std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > : std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base0>
{
  const char *_Ptr;
};

/* 3531 */
struct __cppobj std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > : std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
{
};

/* 3532 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_26
{
  const void *pVFTable;
  void *spare;
  char name[26];
};

/* 3533 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_22
{
  const void *pVFTable;
  void *spare;
  char name[22];
};

/* 3534 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_23
{
  const void *pVFTable;
  void *spare;
  char name[23];
};

/* 3535 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_12
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[3];
  _BYTE gapC[1];
};

/* 3536 */
struct vehAnimClient_t
{
  bool initialized;
  VehicleSeatPositions curSeat;
  VehicleSeatPositions prevSeat;
  bool moving;
  int animStage;
  int animIndex;
  int tagName;
};

/* 3537 */
struct VehicleHandler
{
  VehicleDef *(__cdecl *vehicle)(LocalClientNum_t, playerState_s *);
  int (__cdecl *wheel)(pmove_t *, int, vec3_t *);
  colgeom_visitor_inlined_t<300> *(__cdecl *proximityCache)(LocalClientNum_t, playerState_s *);
  PhysGeomList *(__cdecl *collmap)(LocalClientNum_t, const int);
};

/* 3538 */
struct VehicleState
{
  int entity;
  vec3_t origin;
  vec3_t angles;
  vec3_t velocity;
  vec3_t angVelocity;
  vec3_t previousOrigin;
  vec3_t previousAngles;
  vec3_t bodyVelocity;
  vec2_t tilt;
  vec2_t tiltVelocity;
  vec3_t mins;
  vec3_t maxs;
  float targetHeightDelta;
  float lastGroundHeight;
  int clipmask;
  vec3_t groundNormal;
};

/* 3539 */
struct __declspec(align(4)) gjk_slide_move_input_t
{
  gjk_slide_move_input_tVtbl *vfptr;
  vec3_t *position;
  vec3_t *velocity;
  int gravity;
  int has_gravity;
  vec3_t *mins;
  vec3_t *maxs;
  int tracemask;
  int clientnum;
  float frametime;
  bool do_step_down;
};

/* 3540 */
struct gjk_slide_move_input_tVtbl
{
  void (__thiscall *custom_process)(gjk_slide_move_input_t *this, gjk_trace_output_t *);
};

/* 3541 */
struct slide_move_params_t
{
  float deltaTime;
  vec3_t *origin;
  vec3_t *velocity;
  vec3_t *mins;
  vec3_t *maxs;
  bool gravity;
  bool hasGround;
  bool zerog;
  bool *inSolid;
  vec3_t *groundNormal;
  int passEntityNum;
  int clipMask;
  int bumpEntityNum;
  bool use_gjk;
  gjkcc_input_t *gjkcc_input;
  gjccc_create_type_e user_data_collision_type;
  unsigned int user_id;
  colgeom_visitor_inlined_t<300> *proximity_data;
  PhysGeomList *collmap;
  void (__cdecl *clipVelocityFunc)(vec3_t *, vec3_t *, vec3_t *);
};

/* 3542 */
struct __cppobj veh_gjk_slide_move_input_t : gjk_slide_move_input_t
{
  slide_move_params_t *m_params;
};

/* 3543 */
struct __declspec(align(4)) gjk_slide_move_output_t
{
  vec3_t new_position;
  vec3_t new_velocity;
  bool expensive_push_out;
  bool expensive_push_out_failed;
};

/* 3544 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_33
{
  const void *pVFTable;
  void *spare;
  char name[33];
};

/* 3545 */
struct __declspec(align(16)) GroundTrace
{
  trace_t trace;
  vec3_t location;
  int onGround;
  int hasGround;
  int validGroundNormal;
};

/* 3546 */
struct __declspec(align(4)) XAnimState
{
  float currentAnimTime;
  float oldTime;
  __int16 cycleCount;
  __int16 oldCycleCount;
  float goalTime;
  float goalWeight;
  float weight;
  float rate;
  bool instantWeightChange;
};

/* 3547 */
struct __declspec(align(4)) XAnimInfo
{
  unsigned __int16 notifyChild;
  __int16 notifyIndex;
  unsigned __int16 notifyName;
  unsigned __int16 notifyType;
  unsigned __int16 prev;
  unsigned __int16 next;
  unsigned __int16 children;
  unsigned __int16 parent;
  unsigned __int16 animIndex;
  unsigned __int16 animToModel;
  $FCE44D6FB94E8BC99BF232AF6561B56E ___u10;
  XAnimState state;
  XAnimParts *streamedParts;
  unsigned __int16 streamedAnimToModel;
};

/* 3548 */
struct __declspec(align(2)) gunLevelRow_t
{
  unsigned __int16 targetXP;
  unsigned __int16 rewardXP;
  char attachment;
  char rankID;
  char itemIndex;
};

/* 3549 */
struct itemInfo_t
{
  __int16 index;
  __int16 dwIndex;
  __int16 dwBaseIndex;
  __int16 row;
  char unlockLevel;
  char unlockPLevel;
  char cost;
  __int8 isNullItem : 1;
  __int8 isPassive : 1;
  __int8 isValid : 1;
  __int8 count : 2;
  char dwCost;
  char allocationCost;
  char dlcIndex;
  char sortKey;
  __int16 momentumCost;
  loadoutSlot_t loadoutSlot;
  itemGroup_t group;
  gunLevelRow_t *firstGunLevelRow;
  int nameHash;
  int refHash;
  int defaultClassBits;
  char numAttachments[6];
  char attachments[30];
  unsigned __int16 gunLevelIndex[30];
};

/* 3550 */
struct specialtyCollection_t
{
  int index;
  unsigned int perks[2];
};

/* 3551 */
struct unlockableItemsData
{
  int maxItem;
  int numItems;
  itemInfo_t itemTable[256];
  __int16 defaultClassLoadouts[15][44];
  itemInfo_t *itemsInSlot[256];
  int numItemsInSlot;
  int numPurchasedItemsInSlot;
  __int16 defaultItems[44];
  __int16 actualDefaultItems[44];
  int clanTagFeatureRows[256];
  int numClanTagFeatures;
  gunLevelRow_t gunLevelRows[512];
  __int16 numGunLevelRows;
  specialtyCollection_t specialtyCollection[32];
  int numSpecialtyCollection;
};

/* 3552 */
struct CACMPSHARED_WeaponData
{
  char *name;
  int numConfigurableAttachments;
};

/* 3553 */
struct __cppobj bdUCDAccountStatus : bdTaskResult
{
  bool m_hasUCDAccount;
  bool m_marketingOptIn;
  bool m_emailVerified;
  bool m_isEliteMember;
  bool m_isEliteFounder;
  int m_isElitePaid;
};

/* 3554 */
struct __cppobj __declspec(align(8)) bdUCDAccountInfo : bdTaskResult
{
  unsigned __int64 m_ucdID;
  char m_accountName[256];
  char m_firstName[256];
  char m_lastName[256];
  char m_emailAddress[128];
  bool m_marketingOptIn;
  char m_dateOfBirth[12];
  char m_countryCode[4];
  char m_zipCode[64];
  char m_aesKey[24];
};

/* 3555 */
struct __cppobj bdUCDAccountID : bdTaskResult
{
  unsigned __int64 m_ucdID;
};

/* 3556 */
struct __declspec(align(2)) jsonWriter
{
  char *buffer;
  int bufferLength;
  char *currentPos;
  char *endPos;
  int objectCounter;
  int matchObjectLevel;
  int categoryObjectLevel;
  bool emptyObject;
  bool writeStatus;
  bool terminateStatus;
};

/* 3557 */
struct segment
{
  char *startPos;
  char *endPos;
  int numItems;
};

/* 3558 */
struct __cppobj bdCypherAES : bdCypher
{
  symmetric_CBC m_cbc;
};

/* 3559 */
struct __declspec(align(8)) eventAccumulator
{
  ControllerIndex_t controllerIndex;
  jsonWriter writer;
  segment category;
  segment match;
  int numMatches;
  unsigned __int64 fileID;
  RecordEventType eventType;
};

/* 3560 */
struct __cppobj __declspec(align(4)) bdSubscriptionInfo : bdTaskResult
{
  unsigned __int64 m_userID;
  unsigned int m_subscriptionType;
  unsigned int m_subscriptionLevel;
  int m_daysToExpiry;
  bool m_canExpire;
};

/* 3561 */
struct queryResults_CACMPShared
{
  int itemIndex;
  loadoutSlot_t loadoutSlot;
};

/* 3562 */
struct __cppobj bdTeamProfile : bdTaskResult
{
  unsigned __int64 m_teamID;
};

/* 3563 */
struct challengeTableRow_t
{
  const char *challengeStatName;
  int statNameHash;
  unsigned int maxVal;
  unsigned __int16 index;
  unsigned __int16 row;
  unsigned __int16 rewardXP;
  char unlockLevel;
  char unlockItem;
  __int8 unlockPLevel : 4;
  __int8 tableNumber : 3;
  char type;
  const char *unlockImageName;
  int unlockImageHash;
  unsigned int xPGroupMask;
  unsigned __int16 prerequisite;
  char group;
  __int8 isLifeTime : 1;
  __int8 isMastery : 1;
  __int8 isMaxLevel : 1;
  __int8 isItemUnlocked : 1;
  __int8 isExpert : 1;
  __int8 resetOnPrestige : 1;
  __int8 setGlobalStat : 1;
  unsigned int excludeItemsMask[8];
};

/* 3564 */
struct param_CACMPShared
{
  cacmpshared_type_e type;
  queryResults_CACMPShared results[256];
  int numItems;
};

/* 3565 */
struct __cppobj __declspec(align(8)) bdTeamInfo : bdTaskResult
{
  unsigned __int64 m_teamID;
  unsigned __int64 m_ownerUserID;
  char m_teamName[64];
  char m_memberStatus;
};

/* 3566 */
struct __cppobj __declspec(align(8)) bdTeamProposal : bdTaskResult
{
  unsigned __int64 m_userID;
  unsigned __int64 m_teamID;
  char m_userName[64];
  char m_teamName[64];
  char m_attachment[1024];
  unsigned int m_attachmentSize;
};

/* 3567 */
struct __cppobj bdProfileInfo : bdTaskResult
{
  unsigned __int64 m_entityID;
};

/* 3568 */
struct __cppobj bdTeamMemberProfile : bdProfileInfo
{
};

/* 3569 */
struct bdTeamProfileSearchParams
{
  bdTeamProfileSearchParamsVtbl *vfptr;
};

/* 3570 */
struct bdTeamProfileSearchParamsVtbl
{
  void *(__thiscall *__vecDelDtor)(bdTeamProfileSearchParams *this, unsigned int);
  bool (__thiscall *serialize)(bdTeamProfileSearchParams *this, bdByteBuffer *);
};

/* 3571 */
struct __declspec(align(2)) defaultClassInfo_t
{
  int defaultAttachmentBits[15];
  char defaultCount[15];
};

/* 3572 */
struct __declspec(align(2)) emblemChallengeLookup_t
{
  __int16 challengeIndex;
  char itemIndex;
};

/* 3573 */
struct __declspec(align(4)) validateCACStatus_s::loadoutSlotStatus_s
{
  int value;
  bool matchSuccess;
  bool validationPerformed;
};

/* 3574 */
struct validateCACStatus_s
{
  validateCACStatus_s::loadoutSlotStatus_s loadoutSlotStatus[44];
  CACRoot cacRoot;
  ControllerIndex_t localControllerIndex;
  loadoutClass_t customClass;
  bool loadoutVersionOK;
  int numAllowed_PrimaryWeaponAttachments;
  int numAllowed_SecondaryWeaponAttachments;
};

/* 3575 */
struct LargeLocal
{
  int startPos;
  int size;
};

/* 3576 */
struct phys_simple_allocator<gjkcc_info>
{
  int m_count;
};

/* 3577 */
struct __declspec(align(16)) gjkcc_info
{
  phys_mat44 m_cg_to_world_xform;
  phys_vec3 m_cg_aabb_min;
  phys_vec3 m_cg_aabb_max;
  vec3_t m_mins;
  vec3_t m_maxs;
  phys_heap_gjk_cache_system_avl_tree m_gjk_cache;
  gjk_query_output m_gjk_query_output;
  int m_active;
  bool m_is_server_thread;
  gjk_base_t *m_cg_;
  vec3_t m_last_origin;
};

/* 3578 */
struct __declspec(align(4)) gjkcc_info_database_t
{
  phys_inplace_avl_tree<unsigned int,generic_avl_map_node_t,generic_avl_map_node_t> m_map;
  int m_token;
  int m_gcci_count;
  bool m_is_server_thread;
};

/* 3579 */
struct $_TypeDescriptor$_extraBytes_36
{
  const void *pVFTable;
  void *spare;
  char name[36];
};

/* 3580 */
struct __declspec(align(2)) geom_plane
{
  phys_vec3 m_normal;
  phys_vec3 m_arm;
  float m_d;
  float m_lambda;
  float m_right_side;
  bool m_active;
  bool m_walkable;
  bool m_no_push_out;
};

/* 3581 */
struct __declspec(align(16)) phys_static_array<geom_plane,128>
{
  char m_buffer[6144];
  geom_plane *const m_slot_array;
  int m_alloc_count;
};

/* 3582 */
struct phys_static_array<geom_plane,128>::iterator
{
  geom_plane *m_ptr;
};

/* 3583 */
struct __declspec(align(16)) gjk_trace_input_t
{
  gjk_base_t *m_cg;
  float m_gjk_ac_eps;
  bool m_keep_all_collisions;
  bool m_exit_on_penetration;
  float m_extra_time;
  float m_skip_sentients;
  phys_heap_gjk_cache_system_avl_tree *m_gjk_cache;
  gjk_query_output *m_query_output;
  gjkcc_info *m_gcci;
  gjk_query_input m_query_input;
  phys_transient_allocator *m_allocator;
};

/* 3584 */
struct phys_link_list<gjk_trace_output_t>
{
  gjk_trace_output_t *m_first;
  gjk_trace_output_t **m_last_next_ptr;
  int m_alloc_count;
};

/* 3585 */
struct list_gjk_trace_output
{
  phys_link_list<gjk_trace_output_t> m_list;
  gjk_trace_output_t *m_first_hit;
};

/* 3586 */
struct __cppobj player_gjk_slide_move_input_t : gjk_slide_move_input_t
{
  pmove_t *pm;
};

/* 3587 */
struct phys_link_list<gjk_trace_output_t>::iterator
{
  gjk_trace_output_t *m_ptr;
};

/* 3588 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_29
{
  const void *pVFTable;
  void *spare;
  char name[29];
};

/* 3589 */
struct __cppobj player_push_slide_move_input_t : gjk_slide_move_input_t
{
  vec3_t velocity_;
};

/* 3590 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_37
{
  const void *pVFTable;
  void *spare;
  char name[37];
};

/* 3591 */
struct viewLerpWaypoint_s
{
  int iFrac;
  float fViewPercent;
};

/* 3592 */
struct TraceExtents
{
  hybrid_vector start;
  hybrid_vector end;
  hybrid_vector invDelta;
};

/* 3593 */
struct moveclip_t
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t outerSize;
  TraceExtents extents;
  int passEntityNum;
  int passOwnerNum;
  int contentmask;
  int (__cdecl *collide_entity_func)(int);
};

/* 3594 */
struct __declspec(align(4)) AntilagClientStore
{
  vec3_t realClientPositions[18];
  vec3_t realClientAngles[18];
  bool clientMoved[18];
};

/* 3595 */
struct MantleAnimTransition
{
  int upAnimIndex;
  int overAnimIndex;
  float height;
};

/* 3596 */
struct MantleResults
{
  vec3_t dir;
  vec3_t startPos;
  vec3_t ledgePos;
  vec3_t endPos;
  int flags;
  int entityNum;
  int duration;
};

/* 3597 */
struct BackgroundPurchasedCount
{
  unsigned int flush;
  int count;
};

/* 3598 */
struct __declspec(align(4)) CompositeEmblemLayer
{
  __int16 icon;
  vec4_t color;
  vec2_t pos;
  vec2_t scale;
  float angle;
  bool outline;
  bool flip;
};

/* 3599 */
struct BGDefaultEmblem
{
  int minlevel;
  int maxlevel;
  CompositeEmblemLayer layers[32];
  int layerCount;
};

/* 3600 */
struct ResultCache
{
  ControllerIndex_t controllerIndex;
  unsigned int flush;
  unsigned int use;
  unsigned __int16 include;
  unsigned __int16 exclude;
  int count;
  __int16 ids[1024];
};

/* 3601 */
struct BackgroundsResultCache
{
  ControllerIndex_t controllerIndex;
  unsigned int flush;
  unsigned int use;
  unsigned __int16 include;
  int count;
  __int16 ids[580];
};

/* 3602 */
struct EmblemChallengeTable
{
  emblemChallengeLookup_t emblemChallengeLookups[1024];
  emblemChallengeLookup_t backingChallengeLookups[574];
};

/* 3603 */
struct animStringItem_t
{
  const char *string;
  int hash;
};

/* 3604 */
struct animVehicleSeats_t
{
  int seats;
};

/* 3605 */
struct animConditionTable_t
{
  animScriptConditionTypes_t type;
  animStringItem_t *values;
  int minValue;
  int maxValue;
};

/* 3606 */
struct loadAnim_t
{
  scr_anim_s anim;
  int iNameHash;
  char szAnimName[64];
};

/* 3607 */
struct controller_info_t
{
  vec3_t angles[6];
  vec3_t tag_origin_angles;
  vec3_t tag_origin_offset;
};

/* 3608 */
struct ai_animation_funcs_t
{
  void (__cdecl *pfnStart)(LocalClientNum_t, entityState_s *, ActorAnimStates);
  void (__cdecl *pfnThink)(LocalClientNum_t, entityState_s *);
  int (__cdecl *pfnLength)(LocalClientNum_t, entityState_s *);
  void (__cdecl *pfnSetAtEnd)(LocalClientNum_t, entityState_s *, actorInfo_t *);
};

/* 3609 */
struct AnimStateName
{
  unsigned __int16 *name;
  int category;
};

/* 3610 */
struct IPakPriority
{
  const char *name;
  int priority;
};

/* 3611 */
struct IPakSection
{
  unsigned int type;
  unsigned int offset;
  unsigned int size;
  unsigned int itemCount;
};

/* 3612 */
struct IPakLoadedPackfile
{
  char name[64];
  IPakSection data;
  IPakSection index;
  int fh;
  int refCount;
  int priority;
};

/* 3613 */
struct IPakHeader
{
  unsigned int magic;
  unsigned int version;
  unsigned int size;
  unsigned int sectionCount;
};

/* 3614 */
struct _WIN32_FILE_ATTRIBUTE_DATA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
};

/* 3615 */
struct IPakIndexEntry
{
  unsigned __int64 key;
  unsigned int offset;
  unsigned int size;
};

/* 3616 */
struct IPakWorkData
{
  IPakLoadedPackfile *pak;
  int indexReadOffset;
  int activeBuffer;
  unsigned int currentEntry;
  unsigned __int16 imageParts[5312];
  IPakIndexEntry indexBuffer[2][4096];
  int indexBufferOffset[2];
  int indexBufferState[2];
};

/* 3617 */
struct stb_memory
{
  char *data;
  unsigned int index;
  unsigned int size;
};

/* 3618 */
struct stbi_loader
{
  int (__cdecl *test_memory)(const char *, int);
  char *(__cdecl *load_from_memory)(const char *, int, int *, int *, int *, int);
  int (__cdecl *test_file)(_iobuf *);
  char *(__cdecl *load_from_file)(_iobuf *, int *, int *, int *, int);
};

/* 3619 */
struct stbi
{
  unsigned int img_x;
  unsigned int img_y;
  int img_n;
  int img_out_n;
  _iobuf *img_file;
  int buflen;
  char buffer_start[128];
  int from_file;
  char *img_buffer;
  char *img_buffer_end;
};

/* 3620 */
struct huffman
{
  char fast[512];
  unsigned __int16 code[256];
  char values[256];
  char size[257];
  unsigned int maxcode[18];
  int delta[17];
};

/* 3621 */
struct $72AA23BA268EB12AC8D96215C9EF282D
{
  int id;
  int h;
  int v;
  int tq;
  int hd;
  int ha;
  int dc_pred;
  int x;
  int y;
  int w2;
  int h2;
  char *data;
  void *raw_data;
  char *linebuf;
};

/* 3622 */
struct jpeg
{
  stbi s;
  huffman huff_dc[4];
  huffman huff_ac[4];
  char dequant[4][64];
  int img_h_max;
  int img_v_max;
  int img_mcu_x;
  int img_mcu_y;
  int img_mcu_w;
  int img_mcu_h;
  $72AA23BA268EB12AC8D96215C9EF282D img_comp[4];
  unsigned int code_buffer;
  int code_bits;
  char marker;
  int nomore;
  int scan_n;
  int order[4];
  int restart_interval;
  int todo;
};

/* 3623 */
struct pic_packet_t
{
  char size;
  char type;
  char channel;
};

/* 3624 */
struct stbi_gif_lzw_struct
{
  __int16 prefix;
  char first;
  char suffix;
};

/* 3625 */
struct chunk
{
  unsigned int length;
  unsigned int type;
};

/* 3626 */
struct stbi_gif_struct
{
  int w;
  int h;
  char *out;
  int flags;
  int bgindex;
  int ratio;
  int transparent;
  int eflags;
  char pal[256][4];
  char lpal[256][4];
  stbi_gif_lzw_struct codes[4096];
  char *color_table;
  int parse;
  int step;
  int lflags;
  int start_x;
  int start_y;
  int max_x;
  int max_y;
  int cur_x;
  int cur_y;
  int line_size;
};

/* 3627 */
struct $BC236CFBD570C18489EB46681F52D83D
{
  char *locale;
  unsigned __int16 *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 3628 */
struct zhuffman
{
  unsigned __int16 fast[512];
  unsigned __int16 firstcode[16];
  int maxcode[17];
  unsigned __int16 firstsymbol[16];
  char size[288];
  unsigned __int16 value[288];
};

/* 3629 */
struct zbuf
{
  char *zbuffer;
  char *zbuffer_end;
  int num_bits;
  unsigned int code_buffer;
  char *zout;
  char *zout_start;
  char *zout_end;
  int z_expandable;
  zhuffman z_length;
  zhuffman z_distance;
};

/* 3630 */
struct stbi_resample
{
  char *(__cdecl *resample)(char *, char *, char *, int, int);
  char *line0;
  char *line1;
  int hs;
  int vs;
  int w_lores;
  int ystep;
  int ypos;
};

/* 3631 */
struct png
{
  stbi s;
  char *idata;
  char *expanded;
  char *out;
};

/* 3632 */
struct BitField
{
  const unsigned int *array;
  unsigned int rowSize;
  unsigned int count;
  unsigned int mbits;
};

/* 3633 */
struct NetFieldList
{
  NetField *array;
  unsigned int count;
  unsigned int bbPrintRandMax;
  unsigned int bbPrintCount;
  unsigned int bbChecksum;
  BitField bitFields;
  const char *fieldArrayName;
};

/* 3634 */
struct demoGameSettings
{
  bool onlinegame;
  bool xblive_privatematch;
  bool xblive_wagermatch;
  bool systemlink;
  bool isClientConsole;
  bool isDedicatedServer;
};

/* 3635 */
struct __declspec(align(4)) demoHeader
{
  int version;
  int maxClients;
  ClientNum_t defaultClient;
  bool isDemoClip;
  bool hasExtraNetworkProfileData;
  bool isZombie;
  demoGameSettings settings;
};

/* 3636 */
struct demoTaggedPlayers
{
  int count;
  int playerIndex[30];
};

/* 3637 */
struct __declspec(align(8)) demoDefaultMetaInfo
{
  demoTaggedPlayers taggedPlayers;
  char gameType[256];
  char mapName[256];
  char zmGameModeGroup[256];
  char zmMapStartLoc[256];
  char authorName[32];
  char name[22];
  bool isModifiedName;
  char description[64];
  bool isModifiedDescription;
  unsigned __int64 originalFileID;
  unsigned int createTime;
};

/* 3638 */
struct demoConnectedPlayers
{
  char playerIndex;
  ClientNum_t clientNum;
  unsigned __int64 xuid;
  int connectTime;
  int disconnectTime;
  team_t assignedTeam;
  ffa_team_t assignedFFATeam;
  unsigned __int64 leagueTeamID;
  unsigned __int64 leagueSubdivisionID;
};

/* 3639 */
struct demoDefaultBookmark
{
  unsigned __int32 type : 7;
  unsigned __int32 entityNumber : 10;
  unsigned __int32 clientNum1 : 5;
  unsigned __int32 clientNum2 : 5;
  unsigned __int32 actorNum : 5;
  unsigned __int32 eType : 5;
  unsigned __int32 roundNumber : 8;
  unsigned __int32 overrideEntityCamera : 1;
  unsigned __int32 scoreEventPriority : 7;
  int time;
  int entBirthTime;
};

/* 3640 */
struct demoHeliPatches
{
  int brushmodel;
  vec3_t origin;
  unsigned __int16 targetname;
  bool excludeFromDemo;
  int enabled;
};

/* 3641 */
struct demoFooter
{
  int version;
  int startTime;
  int endTime;
  demoDefaultMetaInfo info;
  int numConnectedPlayers;
  demoConnectedPlayers connectedPlayers[50];
  int numDefaultBookmarks;
  demoDefaultBookmark defaultBookmarks[2500];
  int numHeliPatches;
  demoHeliPatches heliPatches[32];
};

/* 3642 */
struct __declspec(align(4)) demoKeyboardData
{
  int mode;
  const char *title;
  const char *defaultText;
  int textSize;
  int currentProcessingSegmentIndex;
  bool ignoreProfanityCheck;
};

/* 3643 */
struct demoSnapshotData
{
  int messageNum;
  int serverCommandNum;
  int deltaNum;
  int serverTime;
  int physicsTime;
  int snapFlags;
  __declspec(align(128)) MatchState matchState;
  playerState_s ps[18];
  entityState_s ent[1024];
  int entClientMask[1024][2];
  int prevNumEntities;
  clientState_s client[18];
  int prevNumClients;
  actorState_s actor[32];
  int prevNumActors;
};

/* 3644 */
struct demoMemBlock
{
  int compressedSize;
  int uncompressedSize;
  char compressedMsgBuf[65536];
};

/* 3645 */
struct buttonHoldCmd
{
  bool active;
  int key;
  int activatedTime;
};

/* 3646 */
struct __declspec(align(4)) msg_bookmark_t
{
  int overflowed;
  int cursize;
  int bit;
  int lastEntityRef;
  int readcount;
  char bitByte;
};

/* 3647 */
struct demoKeyFrame
{
  int keyframeBufferStart;
  int demoFileMemoryBlockStart;
  int keyframeSnapshotTime;
  int keyframeClipServerTime;
  int firstCmdSequence;
  int size;
  msg_bookmark_t msgBookmark;
};

/* 3648 */
struct demoDollyCameraMarker
{
  int time;
  char glowFXValue;
  vec3_t origin;
  vec3_t forward;
  demoDollyCameraTimeScaleMode timeScaleMode;
  float timeScaleValue;
  unsigned int cameraHeadFxHandle;
  unsigned int cameraGlowFxHandle;
  demoKeyFrame keyFrame;
};

/* 3649 */
struct clipSegment
{
  char name[48];
  int clipBufferIndex;
  int size;
  demoClipTransition transition;
  int duration;
  int thumbnailImageSize;
  char thumbnailImageBuf[65536];
  int highlightReelPriority;
  unsigned int bookmarks[79];
  demoTaggedPlayers taggedPlayers;
};

/* 3650 */
struct __declspec(align(4)) demoHighlightReelInformationDefine
{
  demoHighlightReelInformationType type;
  demoBookmarkType bookmarkType;
  unsigned __int16 eType;
  int secondsBefore;
  int secondsAfter;
  int thumbnailCaptureTimeDelta;
  int priorityWeightPerEvent;
  int priorityStackFactor;
  bool boostPriorityOnly;
  bool killcamAvailable;
};

/* 3651 */
struct demoHighlightReelStarLevels
{
  float starLevel;
  int minScore;
};

/* 3652 */
struct __declspec(align(4)) demoHighlightReelTimeline
{
  demoHighlightReelInformationType infoType;
  int startTime;
  int endTime;
  int thumbnailCaptureTime;
  int priority;
  unsigned int entityNumber;
  int birthTime;
  int entityLookAt;
  ClientNum_t clientNum;
  demoHighlightReelPlayerPriority playerPriority;
  unsigned int bookmarks[79];
  bool hasGameResult;
};

/* 3653 */
struct demoHighlightReelPreparingInformation
{
  bool pendingUpdate;
  demoHighlightReelTimeline currentEvent;
  int continuousOccurenceCount;
};

/* 3654 */
struct demoHighlightReelSettings
{
  demoHighlightReelPlayerFilter playerFilter;
  demoHighlightReelTransitionFilter transitionFilter;
  demoHighlightReelStylesFilter stylesFilter;
  int numberOfSegments;
  int minimumNumberofStars;
  demoHighlightReelGameResultFilter gameResultFilter;
};

/* 3655 */
struct __declspec(align(128)) demoPlayback
{
  bool overridePause;
  float timeScale;
  float fov;
  int highlightReelPriority;
  bool jumpTimeFlag;
  bool switchedPlayers;
  bool forceKeyframe;
  bool waitingForDownloadData;
  bool requestedForScreenshotCapture;
  demoInformationScreenTypes informationScreenType;
  int informationScreenActivateTime;
  bool informationScreenActive;
  buttonHoldCmd holdCmd;
  int buttonPressTime[10];
  char *screenshotBuf;
  int screenshotSize;
  int thumbnailImageSize;
  char thumbnailImageBuf[65536];
  char thumbnailDecompressionBuffer[262144];
  demoDefaultMetaInfo screenshotInfo;
  demoMemBlock clipRecordMemBlock;
  bool displayPartyScoreboard;
  char *keyframeBuf;
  demoKeyFrame keyFrame[250];
  msg_t keyframeMsg;
  int keyframeIndex;
  int keyframeBufferIndex;
  int lastProcessedCmd;
  bool keyframeGenerated;
  int lastJumpedKeyframe;
  int keyframeJumpCount;
  float actorAnimTimeAtJump[32];
  float actorCorpseAnimTimeAtJump[8];
  int actorCorpseOutOfSyncUseCount[8];
  bool completed;
  bool hideGameHud;
  bool hideDemoHud;
  demoSnapshotData prevSnapshot;
  demoCameraMode cameraMode;
  demoFreeCameraMode freeCameraMode;
  __declspec(align(16)) refdef_t refdef;
  vec3_t freeCameraOrigin;
  vec3_t freeCameraAngles;
  vec3_t freeCameraVelocity;
  int freeCameraOffsetEntity;
  vec3_t freeCameraOffsetAngles;
  vec3_t freeCameraOffsetOrigin;
  bool freeCameraEntityLockOnAllowed;
  int freeCameraLockedEntity;
  bool freeCameraLockedOnEntityActive;
  int freeCameraHighlightedEntityForLockOn;
  vec3_t initialEntityAngles;
  vec3_t dollyCameraVerts[500];
  char *dollyCamKeyframeBuf;
  demoDollyCameraMarker dollyCamMarkers[50];
  unsigned int ghostDollyCameraHeadFxHandle;
  unsigned int ghostDollyCameraGlowFxHandle;
  int dollyCamMarkerCount;
  int dollyCamKeyframeBufferIndex;
  int highlightedDollyCamMarker;
  bool repositioningDollyCamMarker;
  bool cancelRepositioning;
  int gameExtraCamActiveState;
  vec3_t gameExtraCamOrigin;
  vec3_t gameExtraCamAngles;
  vec3_t clipCameraOrigin;
  vec3_t clipCameraAngles;
  vec3_t prevClipCameraOrigin;
  vec3_t prevClipCameraAngles;
  int clipHighlightReelPriority;
  bool clipPausedState;
  int clipCameraOffsetEntity;
  vec3_t clipCameraOffsetAngles;
  vec3_t clipCameraOffsetOrigin;
  vec3_t prevClipCameraOffsetAngles;
  vec3_t prevClipCameraOffsetOrigin;
  msg_t clipRecordingMsg;
  int prevClipRecordBufIndex;
  int clipRecordBufIndex;
  char *mainClipRecordingBuf;
  char *clipMergeBuf;
  char subClipRecordingBuf[65536];
  playerState_s clipRecordPS;
  char clipRecordClient;
  float clipRecordTimescale;
  float clipRecordFov;
  int clipRecordHighlightReelPriority;
  demoCameraMode clipCameraMode;
  bool clipHudHidden;
  demoDefaultMetaInfo clipRecordInfo;
  bool forceWriteClipCommands;
  demoClipState clipState;
  int clipTime;
  int clipServerTime;
  int prevClipTime;
  int originalFilmTime;
  bool clipModified;
  bool pendingSegmentSave;
  bool previewAllSegments;
  bool cancelPreview;
  bool forceTeleportClipCamera;
  clipSegment segments[20];
  int segmentCount;
  int segmentGameStateSize;
  int clipPreviewBufferIndex;
  int clipPreviewSegmentNumber;
  char demoPreviewBuf[2][65536];
  demoKeyFrame demoPreview[2];
  bool demoCompleteStateForRestorationPoint[2];
  bool forceResetTimeValues;
  bool creatingHighlightReel;
  bool cancelHighlightReelCreation;
  bool errorStartingClipRecording;
  bool shownHighlightReelStartScreen;
  demoHighlightReelInformationDefine highlightReelInformationDefines[31];
  int highlightReelInformationDefineCount;
  demoHighlightReelStarLevels highlightReelStarLevels[10];
  int highlightReelNumStarLevels;
  demoHighlightReelTimeline highlightReelTimeline[50];
  demoHighlightReelPreparingInformation highlightReelPreparingInformation[21];
  demoHighlightReelSettings highlightReelSettings;
  bool preparedHighlightReelTimeline;
  int prevHighlightReelTimelineInformationCountBeforeFinalize;
  int highlightReelTimelineInformationCount;
  int highlightReelTimelineInformationAvailableCount;
  int processedHighlightReelTimelineIndex;
  bool creatingHighlightReelKillcam;
  bool setHighlightReelEventTimeScale;
};

/* 3656 */
struct __declspec(align(128)) demoMain
{
  char demoName[128];
  int demoFileHandle;
  demoState state;
  char playbackMode;
  bool renderingAllocated;
  bool renderingAudioPass;
  bool renderingFirstJumpBackDone;
  bool renderingCancelled;
  msg_t msg;
  char msgBuf0[65536];
  char msgBuf1[65536];
  bool msgBufFlag;
  volatile int totalSize;
  int loadedTime;
  demoHeader header;
  demoFooter footer;
  demoKeyboardData keyboard;
  int demoAttachmentNum;
  bool shutdownInProgress;
  int gameStateMessageSequence;
  int lastProcessedTime;
  int lastProcessedMsgNum;
  int lastReliableCommandRecorded[18];
  bool gameStateWritten;
  demoSnapshotData snapshot;
  int prevNumParsedEntities;
  int prevNumParsedClients;
  int prevNumParsedActors;
  int playerSessionState[18];
  vec3_t intermissionPointOrigin;
  vec3_t intermissionPointAngles;
  int svTotalBytesSent;
  int svMaxBytesPerFrame;
  char spawnDebugBuffer[16384];
  int spawnDebugBufferPos;
  demoMemBlock memBlock;
  demoPlayback *playback;
  bool playbackInited;
  demoStreamingThrottleState streamingThrottleState;
  int streamingThrottleTime;
  demoLagFlag_e lagFlag;
  unsigned __int64 renderMatchID;
  int renderSlot;
};

/* 3657 */
struct _BLOB
{
  unsigned int cbSize;
  char *pBlobData;
};

/* 3658 */
struct demoTheaterFileInfo
{
  char name[64];
  char description[64];
  char category[32];
  int duration;
  bool isPooled;
  unsigned __int64 matchID;
  unsigned __int64 fileID;
};

/* 3659 */
struct uiInfo_s
{
  UiContext uiDC;
  int playerRefresh;
  int playerIndex;
  int timeIndex;
  int previousTimes[4];
  uiMenuCommand_t currentMenuType;
  bool allowScriptMenuResponse;
  char toastPopupTitle[256];
  char toastPopupDesc[256];
  char toastPopupIconName[256];
  int toastPopupDuration;
  int toastPopupTimeCounter;
  bool toastPopupOpened;
  int contractIndex;
};

/* 3660 */
struct qtime_s
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 3661 */
struct __declspec(align(8)) jqWorkerCmd
{
  jqModule *module;
  unsigned int dataSize;
  volatile int ppu_fence;
  volatile int spu_fence;
  volatile int *spuThreadLimit;
  jqQueue *queue;
  unsigned int string_table;
};

/* 3662 */
struct PredictedVehicleDef
{
  bool fullPhysics;
  vec3_t origin;
  vec3_t angles;
  vec3_t tVel;
  vec3_t aVel;
  int serverTime;
};

/* 3663 */
struct clientHeader_t
{
  int state;
  int sendAsActive;
  int deltaMessage;
  int rateDelayed;
  int hasAckedBaselineData;
  int hugeSnapshotSent;
  netchan_t netchan;
  vec3_t predictedOrigin;
  int predictedOriginServerTime;
  int migrationState;
  PredictedVehicleDef predictedVehicle;
};

/* 3664 */
struct __declspec(align(4)) SnapshotInfo_s
{
  ClientNum_t clientNum;
  clientHeader_t *client;
  int snapshotDeltaTime;
  bool fromBaseline;
  bool archived;
  bool packetIsDelta;
  bool entJustUnlinked;
  bool entNeverChanges;
  bool demoSnapshot;
  PacketEntityType packetEntityType;
  bool packetEntityTypeArchived;
};

/* 3665 */
struct heli_height_lock_patches_t
{
  int brushmodel;
  vec3_t origin;
  unsigned __int16 targetname;
  bool excludeFromDemo;
  int enabled;
};

/* 3666 */
struct svscmd_info_t
{
  char *cmd;
  int time;
  int type;
};

/* 3667 */
struct clientSnapshot_t
{
  playerState_s ps;
  int entityCount;
  int clientCount;
  int actorCount;
  int matchStateIndex;
  int firstEntityIndex;
  int firstClientIndex;
  int firstActorIndex;
  int messageSent;
  int messageAcked;
  int messageSize;
  int serverTime;
  int physicsTime;
  int timeDelta;
  int baselineSnap;
};

/* 3668 */
struct client_t
{
  clientHeader_t header;
  const char *dropReason;
  char userinfo[1024];
  char reliableCommandBuffer[16384];
  int reliableCommandBufferNext;
  svscmd_info_t reliableCommandInfo[128];
  int reliableSequence;
  int reliableAcknowledge;
  int reliableSent;
  int messageAcknowledge;
  int gamestateMessageNum;
  int challenge;
  usercmd_s lastUsercmd;
  int lastClientCommand;
  char lastClientCommandString[1024];
  gentity_t *gentity;
  char name[32];
  char clanAbbrev[5];
  int clanAbbrev_IsEliteValidated;
  unsigned __int64 xuid;
  unsigned __int64 teamid;
  unsigned int doubleXPGroupMask;
  unsigned int availableMappackFlags;
  int nextReliableTime;
  int nextReliableCount;
  char reservedSlot;
  int lastPacketTime;
  int lastConnectTime;
  int nextSnapshotTime;
  int lastSnapshotTime;
  int timeoutCount;
  clientSnapshot_t frames[16];
  int ping;
  int pingMin;
  int pingMax;
  int unackCount;
  int rate;
  int pureAuthentic;
  int packetUploadCount;
  __declspec(align(128)) char netchanOutgoingBuffer[65536];
  char netchanIncomingBuffer[2048];
  int guid;
  unsigned __int16 scriptId;
  bool bIsSplitscreenClient;
  bool bIsSecondScreenClient;
  int bIsTestClient;
  int serverId;
  int natType;
  char stats[50176];
  char purchasedItems[32];
  int unlockedAttachments[64];
  char bonusCardsActive[10];
  char modifiedStatBytes[6272];
  int statsSentIndex;
  int statsModified;
  __int64 statPacketsReceived;
  int statsValidated;
  bool liveAuthorized;
  int liveAuthFlags;
  char liveAuthFailCount;
  int liveAuthTimestamp;
  unsigned __int64 liveUserID;
  bool tempPacketDebugging;
  int snapshotHistoryTime;
  int snapshotHistoryFrames;
  int messageHistorySize;
  int demoPacketCount;
  int demoPacketSizes[8];
  int demoPacketIsFragment[8];
  int demoReliableCmdSize;
  char demoReliableCmdItemChars[16];
  int demoReliableCmdItemSize[16];
  int demoReliableCmdCount;
  unsigned int lastHashedXP;
  int lastSmallDeltaTime;
  int lastSnapSentTime;
};

/* 3669 */
struct archivedEntityShared_t
{
  int svFlags;
  vec3_t absmin;
  vec3_t absmax;
};

/* 3670 */
struct archivedEntity_s
{
  entityState_s s;
  archivedEntityShared_t r;
};

/* 3671 */
struct cachedClient_s
{
  int playerStateExists;
  clientState_s cs;
  playerState_s ps;
};

/* 3672 */
struct cachedActor_s
{
  actorState_s as;
};

/* 3673 */
struct cachedSnapshot_t
{
  int archivedFrame;
  int time;
  int physicsTime;
  int entityCount;
  int clientCount;
  int actorCount;
  int firstEntityIndex;
  int firstClientIndex;
  int firstActorIndex;
  int matchStateIndex;
  int usesDelta;
};

/* 3674 */
struct serverStaticHeader_t
{
  client_t *clients;
  actor_t *actors;
  int time;
  int physicsTime;
  int snapFlagServerBit;
  int packetBackupCount;
  int packetBackupMask;
  svEntity_s *svEntities;
  int numNoDeltaEntities;
  int nextNoDeltaEntity;
  entityState_s *noDeltaEntities;
  int nextSnapshotEntities;
  int numSnapshotEntities;
  entityState_s *snapshotEntities;
  int nextCachedSnapshotEntities;
  int numCachedSnapshotEntities;
  archivedEntity_s *cachedSnapshotEntities;
  int numSnapshotMatchStates;
  int nextSnapshotMatchStates;
  MatchState *snapshotMatchStates;
  int numCachedSnapshotMatchStates;
  int nextCachedSnapshotMatchStates;
  MatchState *cachedSnapshotMatchStates;
  int numSnapshotClients;
  int nextSnapshotClients;
  clientState_s *snapshotClients;
  int numCachedSnapshotClients;
  int nextCachedSnapshotClients;
  cachedClient_s *cachedSnapshotClients;
  int numSnapshotActors;
  int nextSnapshotActors;
  actorState_s *snapshotActors;
  int numCachedSnapshotActors;
  int nextCachedSnapshotActors;
  cachedActor_s *cachedSnapshotActors;
  vec3_t mapCenter;
  vec3_t mapCenterBoundsMin;
  vec3_t mapCenterBoundsMax;
  char *archivedSnapshotBuffer;
  cachedSnapshot_t *cachedSnapshotFrames;
  int nextCachedSnapshotFrames;
  int nextArchivedSnapshotFrames;
  int archivedEntityCount;
  int num_entities;
  int maxclients;
  int fps;
  int clientArchive;
  gentity_t *gentities;
  int gentitySize;
  clientState_s *firstClientState;
  actorState_s *firstActorState;
  playerState_s *firstPlayerState;
  MatchState *matchState;
  int clientSize;
  int actorSize;
  int serverFrameMS;
  unsigned int pad[2];
};

/* 3675 */
struct serverSnapshot_t
{
  playerState_s *ps[18];
  int entityCount;
  int clientCount;
  int actorCount;
  int firstEntityIndex;
  int firstClientIndex;
  int firstActorIndex;
  int matchStateIndex;
};

/* 3676 */
struct archivedSnapshot_s
{
  int start;
  int size;
};

/* 3677 */
struct challenge_t
{
  netadr_t adr;
  int challenge;
  int time;
  int pingTime;
  int firstTime;
  int firstPing;
  int connected;
  int guid;
};

/* 3678 */
struct tempBanSlot_t
{
  int guid;
  int banTime;
};

/* 3679 */
struct __declspec(align(8)) playerInfo_t
{
  bool synchronize;
  unsigned __int64 xuid;
  PartyMember pm;
  int natType;
  bool unregisterOldClientFromSession;
  netadr_t remoteAddress;
  char name[32];
};

/* 3680 */
struct rateBoostingStats_t
{
  int bytesSent;
  int serverMS;
  int clientPings;
  int clientAckFramesBehind;
  int clientUsercmdTimeDiff;
  int numClientFrames;
  int numFrames;
};

/* 3681 */
struct __declspec(align(64)) serverStatic_t
{
  int clientCount;
  int packetBackupCount;
  int packetBackupMask;
  entityState_s *noDeltaEntities;
  entityState_s *snapshotEntities;
  int numNoDeltaEntities;
  int nextNoDeltaEntity;
  cachedSnapshot_t *cachedSnapshotFrames;
  archivedEntity_s *cachedSnapshotEntities;
  serverSnapshot_t snapshots[16];
  int serverSnapshotTimes[16];
  int nextServerSnapshotIndex;
  int baselineCreated;
  int initialized;
  int time;
  int physicsTime;
  int oldestArchiveTime;
  int snapFlagServerBit;
  client_t *clients;
  int numCachedSnapshotMatchStates;
  int numCachedSnapshotEntities;
  int numCachedSnapshotClients;
  int numCachedSnapshotActors;
  int numSnapshotMatchStates;
  int numSnapshotEntities;
  int numSnapshotClients;
  int numSnapshotActors;
  int nextSnapshotMatchStates;
  int nextSnapshotEntities;
  int nextSnapshotClients;
  int nextSnapshotActors;
  MatchState *snapshotMatchStates;
  clientState_s *snapshotClients;
  actorState_s *snapshotActors;
  int nextArchivedSnapshotFrames;
  archivedSnapshot_s *archivedSnapshotFrames;
  char *archivedSnapshotBuffer;
  int nextArchivedSnapshotBuffer;
  int nextCachedSnapshotMatchStates;
  int nextCachedSnapshotEntities;
  int nextCachedSnapshotClients;
  int nextCachedSnapshotActors;
  int nextCachedSnapshotFrames;
  MatchState *cachedSnapshotMatchStates;
  cachedClient_s *cachedSnapshotClients;
  cachedActor_s *cachedSnapshotActors;
  int nextHeartbeatTime;
  int nextStatusResponseTime;
  challenge_t challenges[1024];
  netadr_t redirectAddress;
  netProfileInfo_t OOBProf;
  tempBanSlot_t tempBans[16];
  unsigned __int64 xuids[18];
  playerInfo_t playerInfos[18];
  vec3_t mapCenter;
  vec3_t mapCenterBoundsMin;
  vec3_t mapCenterBoundsMax;
  int dataSentLastSec;
  int activeEntities;
  int archivedEntityCount;
  int snapshotBoostingSuspendTimeout;
  int badServerFPSCount;
  int badServerFPSLast;
  rateBoostingStats_t rateBoostingStats;
  int rateBoostingEnabled;
};

/* 3682 */
struct WorkerCmdConditional
{
  void *address;
  unsigned int value;
};

/* 3683 */
struct __declspec(align(4)) demoSaveCmd
{
  char *data;
  int size;
  bool writeFooter;
  bool gameState;
};

/* 3684 */
struct demoProfile
{
  int memUsed[8];
  int count[8];
};

/* 3685 */
struct clientLogo_t
{
  int startTime;
  int duration;
  int fadein;
  int fadeout;
  Material *material[2];
};

/* 3686 */
struct serverInfo_t
{
  XNADDR xnaddr;
  bdSecurityKey xnkey;
  bdSecurityID xnkid;
  int publicSlots;
  int publicSlotsUsed;
  int privateSlots;
  int privateSlotsUsed;
  unsigned __int64 nonce;
  netadr_t adr;
  char allowAnonymous;
  char bPassword;
  char pure;
  char consoleDisabled;
  char netType;
  char clients;
  char maxClients;
  char dirty;
  char friendlyfire;
  char killcam;
  char hardcore;
  char hardware;
  char mod;
  char voice;
  char requestCount;
  __int16 minPing;
  __int16 maxPing;
  __int16 ping;
  int pingedTime;
  char hostName[32];
  char mapName[32];
  char game[24];
  char gameType[16];
  char isInGame;
  unsigned __int64 friendsBits;
  unsigned __int64 bdUserID;
  int region;
  int score;
};

/* 3687 */
struct __declspec(align(4)) vidConfig_t
{
  unsigned int sceneWidth;
  unsigned int sceneHeight;
  unsigned int displayWidth;
  unsigned int displayHeight;
  unsigned __int16 outputDisplayWidth;
  unsigned __int16 outputDisplayHeight;
  unsigned int displayFrequency;
  bool isToolMode;
  int isWideScreen;
  int isHiDef;
  int isFullscreen;
  float aspectRatioWindow;
  float aspectRatioScenePixel;
  float aspectRatioDisplayPixel;
  unsigned int maxTextureSize;
  unsigned int maxTextureMaps;
  bool deviceSupportsGamma;
};

/* 3688 */
struct clientDebugStringInfo_t
{
  int max;
  int num;
  trDebugString_t *strings;
  int *durations;
};

/* 3689 */
struct clientDebugLineInfo_t
{
  int max;
  int num;
  trDebugLine_t *lines;
  int *durations;
};

/* 3690 */
struct clientDebugSphereInfo_t
{
  int max;
  int num;
  trDebugSphere_t *spheres;
  int *durations;
};

/* 3691 */
struct clientDebug_t
{
  int prevFromServer;
  int fromServer;
  clientDebugStringInfo_t clStrings;
  clientDebugStringInfo_t svStringsBuffer;
  clientDebugStringInfo_t svStrings;
  clientDebugLineInfo_t clLines;
  clientDebugLineInfo_t svLinesBuffer;
  clientDebugLineInfo_t svLines;
  clientDebugSphereInfo_t clSpheres;
  clientDebugSphereInfo_t svSpheresBuffer;
  clientDebugSphereInfo_t svSpheres;
};

/* 3692 */
struct gameState_t
{
  int stringOffsets[2806];
  unsigned int stringChecksums[2806];
  char stringData[65536];
  int dataCount;
  int stringUpdateFrameNumber;
  int matchUIVisibilityFlags;
  int scr_checksum[3];
  unsigned int clientfield_hash;
  unsigned int server_highest_clientfield_version;
};

/* 3693 */
struct __declspec(align(8)) clientStatic_t
{
  int hunkUsersStarted;
  char servername[256];
  XSESSION_INFO hostInfo;
  int rendererStarted;
  int soundStarted;
  int uiStarted;
  int devGuiStarted;
  int frametime;
  float frametime_base;
  int realtime;
  int realFrametime;
  bool inputUpdatedPrevFrame;
  clientLogo_t logo;
  vec3_t mapCenter;
  int numlocalservers;
  serverInfo_t localServers[128];
  int lastServerPinged;
  int pingedServerCount;
  int totalServersParsed;
  int pingUpdateSource;
  Material *whiteMaterial;
  Material *consoleMaterial;
  Material *spinnerMaterial;
  Material *loaderMaterial;
  Font_s *consoleFont;
  vidConfig_t vidConfig;
  clientDebug_t debug;
  XNADDR xnaddrs[18];
  volatile int scriptError;
  vec3_t debugRenderForward;
  vec3_t debugRenderPos;
  int serverId;
  int forceFullscreen;
  int exitForceFullscreen;
  bool inParty[18];
  clSnapshot_t noDeltaSnapshot;
  int nextNoDeltaEntity;
  entityState_s noDeltaEntities[1024];
  gameState_t gameState;
};

/* 3694 */
struct __declspec(align(4)) TrackType
{
  char *trackType;
  bool prestige;
};

/* 3695 */
struct cscr_mp_data_t
{
  int airsupport;
  int demo_jump;
  int playerSwitch;
  int killcam_begin;
  int killcam_end;
  int activateexploder;
  int deactivateexploder;
  int activatelightexploder;
  int deactivatelightexploder;
  int soundNotifyCallback;
  int chargeshotWeaponSoundNotify;
};

/* 3696 */
struct Destructible_BonePose
{
  int boneid;
  int pieceIndex;
  vec3_t angles_original;
  vec3_t angles_offset;
  vec3_t angles_vel;
};

/* 3697 */
struct DestructiblePose
{
  Destructible_BonePose bones[32];
  __int16 numBones;
  __int16 destructibleID;
};

/* 3698 */
struct WebM_Url
{
  int size;
  UrlMethod *method;
  void *stream;
};

/* 3699 */
struct scr_classStruct_t
{
  unsigned __int16 id;
  unsigned __int16 entArrayId;
  char charId;
  const char *name;
};

/* 3700 */
struct demoFileShareTaskHandler
{
  bool isAbortingFileshareTask;
  ControllerIndex_t fileshareTaskControllerIndex;
  int abortResetTime;
};

/* 3701 */
struct demoFileHandler
{
  char *ptr;
  int size;
  int offset;
};

/* 3702 */
struct uploadSendInfo_t
{
  int ms;
  unsigned int size;
};

/* 3703 */
struct __declspec(align(8)) uploadStreamData_t
{
  ControllerIndex_t controllerIndex;
  char buffer[524288];
  unsigned __int64 fileID;
  volatile int writer;
  volatile int reader;
  volatile bool active;
  volatile int lastWrite;
  int totalBytesUploaded;
  bool overflow;
  bool failure;
  uploadSendInfo_t sendHistory[100];
  int sendHistoryIndex;
};

/* 3704 */
struct uploadStreamDebugData_t
{
  bool isDataAdded;
  int value;
};

/* 3705 */
struct uploadStreamHistory_t
{
  uploadStreamDebugData_t history[60];
  bool changed;
  int highwater;
  int roundNumber;
  unsigned int bytesWrittenThisRound;
  unsigned int timeRoundStarted;
  unsigned int lastIntervalUpdateBytes;
  unsigned int lastIntervalUpdateTime;
};

/* 3706 */
struct __declspec(align(8)) demoRecordedFileUploadInfo
{
  unsigned __int64 fileID;
  char metaData[255];
  bdTag tags[60];
  int numTags;
};

/* 3707 */
struct __declspec(align(4)) streamingState_s
{
  char *buffer;
  int bufferSize;
  demoStreamingState phase;
  int segmentNo;
  int byteOffset;
  int totalDuration;
  bool isEnteringState;
};

/* 3708 */
struct __declspec(align(8)) fileshareUploadInfo_t
{
  char metaData[255];
  bdTag tags[60];
  int numTags;
  char fileName[256];
  char name[22];
  char description[64];
};

/* 3709 */
struct __declspec(align(8)) streamBuffer_t
{
  char *buffer;
  int bufferSize;
  volatile int writer;
  volatile int reader;
  volatile bool active;
  volatile int lastWriteTime;
  volatile int lastReadTime;
  volatile bool taskRequestPending;
  volatile bool taskRequestError;
  volatile unsigned __int64 fileID;
  ControllerIndex_t controllerIndex;
  void *userData;
  int userDataSize;
};

/* 3710 */
struct dwFileShareReadFileTask
{
  fileShareLocation location;
  unsigned __int64 fileID;
  unsigned int fileSize;
  bdFileMetaData descriptor;
  const char *menuDef;
  void *buffer;
  void *cacheBuffer;
  unsigned int bufferSize;
  unsigned int bytesDownloaded;
  bdDownloadInterceptor *downloadHandler;
  bool loadedFromCache;
  unsigned int startByte;
  unsigned int endByte;
  void (__cdecl *dataCallback)(void *, unsigned int, unsigned int, unsigned int);
  void (__cdecl *successCallback)(ControllerIndex_t, dwFileShareReadFileTask *);
  void (__cdecl *failureCallback)(ControllerIndex_t, dwFileShareReadFileTask *);
};

/* 3711 */
struct fileShareReadFileInfo
{
  unsigned __int64 fileID;
  unsigned int fileSize;
  fileShareLocation location;
  char *buffer;
  unsigned int bufferSize;
  bool isStreamed;
  void *cacheBuffer;
  unsigned int cacheBufferSize;
  unsigned int startByte;
  unsigned int endByte;
  void (__cdecl *dataCallback)(void *, unsigned int, unsigned int, unsigned int);
  void (__cdecl *successCallback)(ControllerIndex_t, dwFileShareReadFileTask *);
  void (__cdecl *failureCallback)(ControllerIndex_t, dwFileShareReadFileTask *);
};

/* 3712 */
struct downloadStreamingInformation_t
{
  ControllerIndex_t controllerIndex;
  streamBuffer_t streamBuffer;
  fileShareReadFileInfo fileInfo;
  downloadStreamingState currentPhase;
  bool markedForRetry;
  int downloadFailedTime;
  int retryAttempts;
  char demoMode[32];
  bool readyForPlayback;
  bool active;
  int dataBlockDownloadRequestTime;
};

/* 3713 */
struct __declspec(align(8)) fileShareWriteSummaryInfo
{
  unsigned __int64 fileID;
  fileShareLocation location;
  const void *summaryData;
  unsigned int summaryDataSize;
  const void *metaData;
  unsigned int metaDataSize;
  unsigned int numTags;
  bdTag *tags;
  void (__cdecl *successCallback)(ControllerIndex_t, unsigned __int64);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3714 */
struct fileShareWriteFileInfo
{
  unsigned __int16 fileSlot;
  void *fileData;
  unsigned int fileSize;
  const char *fileName;
  unsigned __int16 category;
  const void *thumbData;
  unsigned int thumbDataSize;
  unsigned int numTags;
  fileShareLocation location;
  bdTag *tags;
  const char *menuDef;
  void (__cdecl *progressCallback)(ControllerIndex_t, unsigned int *, unsigned int *);
  unsigned int (__cdecl *dataCallback)(void *, unsigned int, unsigned int);
  void (__cdecl *successCallback)(ControllerIndex_t, unsigned __int64);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3715 */
struct __cppobj bdYouTubeUploadStats : bdTaskResult
{
  unsigned int m_windowSize;
  unsigned int m_uploadCount;
  unsigned int m_minimumDuration;
  unsigned int m_maximumDuration;
  unsigned int m_averageDuration;
  unsigned int m_age;
};

/* 3716 */
struct __cppobj __declspec(align(4)) bdYouTubeAuthorizationCode : bdTaskResult
{
  char m_userCode[33];
  char m_verificationUrl[513];
};

/* 3717 */
struct __cppobj bdYouTubeUserToken : bdTaskResult
{
  char m_tokenType[129];
  char m_token[4097];
  char m_tokenSecret[1025];
  char m_keyIdentifier[513];
  unsigned int m_tokenTTL;
  unsigned int m_expiryTime;
};

/* 3718 */
struct Demo_SetTag_EmblemInfoParam_s
{
  unsigned __int64 fingerPrint;
  unsigned __int64 beginTimeStamp;
  unsigned __int64 numUploadsSinceTimeStamp;
};

/* 3719 */
struct bdHTTPBuffer
{
  void *m_contentReceiveBuffer;
  unsigned int m_contentReceiveBufferSize;
  const void *m_contentSendBuffer;
  unsigned int m_contentSendBufferSize;
  char m_httpCommonBuffer[1024];
  unsigned int m_httpCommonBufferSize;
  char m_responseStatusBuffer[128];
  unsigned int m_responseStatusBufferSize;
};

/* 3720 */
struct AnimSubState
{
  unsigned __int16 animIndex;
  unsigned __int16 alias;
};

/* 3721 */
struct AnimState
{
  unsigned __int16 name;
  unsigned __int16 notify;
  char flags;
  char size;
  AnimSubState *subStates;
};

/* 3722 */
struct AnimStateDef
{
  scr_animtree_t tree;
  unsigned __int16 name;
  unsigned __int16 size;
  AnimState *states;
};

/* 3723 */
struct AIDemoLockOnView
{
  int heightOffset;
  float pitchMin;
  float pitchMax;
};

/* 3724 */
struct AIDemoLockOnValues
{
  float highlightDistance;
  AIDemoLockOnView views[2];
};

/* 3725 */
struct __declspec(align(4)) AITypeScript
{
  int main;
  int precache;
  int spawner;
  char aiTypeIndex;
  char clientAiTypeIndex;
  int clientMain;
  int clientPrecache;
  FootstepTableDef *footstepTable;
  FootstepFXTableDef *footstepFXTable;
  AnimStateDef *animStateDef;
  AIDemoLockOnValues demoLockOn;
  bool bAITypeGeneratesFootstepCallback;
  bool bClientPrecacheCalled;
};

/* 3726 */
struct cg_level_locals_t
{
  int scriptPrintChannel;
  SpawnVar spawnVar;
  int triggerIndex;
  trigger_info_t pendingTriggerList[256];
  trigger_info_t currentTriggerList[256];
  int pendingTriggerListSize;
  int currentTriggerListSize;
  int entTriggerIndex[1792];
  AITypeScript *aiTypes[255];
  ZBarrierType *zbarrierTypes[255];
  FootstepTableDef *player1stPerson;
  FootstepTableDef *player3rdPerson;
  FootstepTableDef *player1stPersonQuiet;
  FootstepTableDef *player3rdPersonQuiet;
  FootstepTableDef *player3rdPersonLoud;
  FootstepTableDef *defaultAi;
  FootstepTableDef *dogSteps;
  FootstepFXTableDef *defaultFootstepFX;
  vec2_t mapLatLong;
  vec2_t mapLatLongOrigin;
};

/* 3727 */
struct cgMedia_t
{
  Material *whiteMaterial;
  Material *teamStatusBar;
  Material *afkLightbulb;
  Material *connectionMaterial;
  Material *youInKillCamMaterial;
  TracerDef *tracerDefault;
  Material *tracerThermalOverrideMat;
  Material *redTracerMaterial;
  Material *greenTracerMaterial;
  Material *bulletMaterial;
  Material *laserMaterial;
  Material *laserViewmodelMaterial;
  Material *laserLightMaterial;
  Material *lagometerMaterial;
  Material *ropeMaterial;
  Material *fhj18hudBackground;
  Material *rangefinderHudBackground;
  Material *bcpuHudBackground;
  Material *tacticalInsertionBackground;
  Material *briefcaseBombBackground;
  Material *pdaHackerBackground;
  Material *scopeOverlayEmp;
  Material *hintMaterials[264];
  Material *objectiveMaterials[1];
  Material *friendMaterials[3];
  Material *partyMaterials[3];
  Material *damageMaterial;
  Material *mantleHint;
  Material *graphline;
  Font_s *smallDevFont;
  Font_s *bigDevFont;
  Font_s *extraBigDevFont;
  Font_s *inspectorFont;
  unsigned int grenadeExplodeSound[32];
  unsigned int rifleGrenadeSound[32];
  unsigned int rocketExplodeSound[32];
  unsigned int rocketExplodeXtremeSound[32];
  unsigned int mortarShellExplodeSound[32];
  unsigned int tankShellExplodeSound[32];
  unsigned int weaponImpactsTankArmorSound[16];
  unsigned int weaponImpactsTankTreadSound[16];
  unsigned int bulletHitSmallSound[32];
  unsigned int bulletHitLargeSound[32];
  unsigned int bulletHitAPSound[32];
  unsigned int bulletHitXTremeSound[32];
  unsigned int shotgunHitSound[32];
  unsigned int boltHitSound[32];
  unsigned int bladeHitSound[32];
  unsigned int bulletExitSmallSound[32];
  unsigned int bulletExitLargeSound[32];
  unsigned int bulletExitAPSound[32];
  unsigned int bulletExitXTremeSound[32];
  unsigned int shotgunExitSound[32];
  unsigned int boltExitSound[32];
  unsigned int mantleSound;
  unsigned int mantleSoundPlayer;
  unsigned int dtpLaunchSound;
  unsigned int dtpLaunchSoundPlayer;
  unsigned int dtpLandSound[9];
  unsigned int dtpLandSoundPlayer[9];
  char dtpSlideLoopSound[9][64];
  char dtpSlideLoopSoundPlayer[9][64];
  unsigned int dtpSlideStopSound[9];
  unsigned int dtpSlideStopSoundPlayer[9];
  unsigned int dtpCollideSound;
  unsigned int dtpCollideSoundPlayer;
  unsigned int playerSlidingStart_1p[9];
  unsigned int playerSlidingStart_3p[9];
  unsigned int playerSlidingStop_1p[9];
  unsigned int playerSlidingStop_3p[9];
  unsigned int bulletWhizby;
  unsigned int bulletCrack;
  unsigned int underwaterWhizby;
  unsigned int deathGurgle;
  unsigned int meleeHit;
  unsigned int meleeHitOther;
  unsigned int meleeKnifeHit;
  unsigned int meleeKnifeHitOther;
  unsigned int meleeDogHit;
  unsigned int meleeDogHitOther;
  unsigned int meleeKnifeHitShield;
  unsigned int nightVisionOn;
  unsigned int nightVisionOff;
  unsigned int playerSprintGasp;
  unsigned int playerHeartBeatSound;
  unsigned int playerBreathInSound;
  unsigned int playerBreathOutSound;
  unsigned int playerBreathGaspSound;
  unsigned int playerSwapOffhand;
  unsigned int rangeFinderLoopSound;
  unsigned int sensorGrenadeAlert;
  unsigned int sonarAttachmentPingSound;
  unsigned int chargeShotWeaponChargingSound;
  unsigned int chargeShotWeaponDischargeSound;
  unsigned int chargeShotWeaponBulletQueueSound[5];
  unsigned int radarSweepSound;
  unsigned int radarPingSound;
  unsigned int headshotSound;
  Material *compassping_player;
  Material *compassping_player_bracket;
  Material *compassping_playerfiring_shoutcast;
  Material *compassping_friendlyfiring;
  Material *compassping_friendlyyelling;
  Material *compassping_friendlyfakefire;
  Material *compassping_partyfiring;
  Material *compassping_partyyelling;
  Material *compassping_enemy;
  Material *compassping_enemydirectional;
  Material *compassping_enemyfiring;
  Material *compassping_enemyyelling;
  Material *compassping_enemysatellite;
  Material *compassping_grenade;
  Material *compassping_explosion;
  Material *compassping_firstplace;
  Material *compassping_generic_player_shoutcast;
  Material *compassping_generic_playerfiring_shoutcast;
  Material *compassping_generic_playerfiring;
  Material *watch_face;
  Material *watch_hour;
  Material *watch_minute;
  Material *watch_second;
  Material *acoustic_ping;
  Material *acoustic_wedge;
  Material *acoustic_grid;
  Material *compass_scrambler_large;
  Material *compass_mortar_selector;
  Material *compass_acoustic_ping;
  Material *compass_radarline;
  Material *compass_artillery_friendly;
  Material *compass_artillery_enemy;
  Material *compass_mortar_friendly;
  Material *compass_mortar_enemy;
  Material *compass_dogs_enemy;
  Material *compass_incoming_artillery;
  Material *compass_sentry_white;
  Material *compass_microwave_turret_white;
  Material *compass_supplydrop_white;
  Material *compass_supplydrop_green;
  Material *compass_supplydrop_red;
  Material *compass_guided_hellfire_missile;
  Material *compass_guided_drone_missile;
  Material *compass_tank_turret;
  Material *grenadeIconFrag;
  Material *grenadeIconFlash;
  Material *grenadeIconThrowBack;
  Material *grenadePointer;
  Material *offscreenObjectivePointer;
  Material *clientLastStandWaypoint;
  Material *clientAutoReviveWaypoint;
  Material *clientManualReviveWaypoint;
  Material *clientTeamReviveWaypoint[10];
  Material *demoTimelineFaded;
  Material *demoTimelineSolid;
  Material *demoTimelineCursor;
  Material *demoTimelineBookmark;
  Material *demoStatePaused;
  Material *demoStatePlay;
  Material *demoStateStop;
  Material *demoStateJump;
  Material *demoStateForwardFast;
  Material *demoStateForwardSlow;
  Material *demoDollycamTracerMaterial;
  FxImpactTable *fx;
  FxEffectDef *fxNoBloodFleshHit;
  FxEffectDef *fxKnifeBlood;
  FxEffectDef *fxKnifeNoBlood;
  FxEffectDef *fxDogBlood;
  FxEffectDef *fxDogNoBlood;
  FxEffectDef *fxNonFatalHero;
  FxEffectDef *fxSensorGrenadeFriendlyRunner;
  FxEffectDef *fxSensorGrenadeEnemyRunner;
  FxEffectDef *fxSensorGrenadeTargetingBolt;
  FxEffectDef *fxRiotShieldImpact;
  FxEffectDef *fxBloodOnRiotshield;
  FxEffectDef *fxLaserPoint;
  FxEffectDef *fxLaserPointSight;
  FxEffectDef *fxLaserPointSightThermal;
  FxEffectDef *fxLaserPointVehicle;
  FxEffectDef *fxDtpArmSlide1;
  FxEffectDef *fxDtpArmSlide2;
  FxEffectDef *fxPlayerSliding;
  FxEffectDef *fxPuff;
  FxEffectDef *heliDustEffect;
  FxEffectDef *heliWaterEffect;
  FxEffectDef *helicopterLightSmoke;
  FxEffectDef *helicopterHeavySmoke;
  FxEffectDef *helicopterOnFire;
  FxEffectDef *jetAfterburner;
  Material *empFilterOverlay;
  Material *nightVisionOverlay;
  Material *hudIconNVG;
  Material *hudDpadArrow;
  Material *hudDpadCircle;
  Material *hudDpadLeftHighlight;
  Material *ammoCounterBullet;
  Material *ammoCounterBeltBullet;
  Material *ammoCounterRifleBullet;
  Material *ammoCounterRocket;
  Material *ammoCounterShotgunShell;
  Material *ammoCounterSingle;
  Material *lifeCounterAlive;
  Material *lifeCounterDead;
  Material *textDecodeCharacters;
  Material *textDecodeCharactersGlow;
  FxEffectDef *physicsWaterEffects[8];
  FxEffectDef *infraredHeartbeat;
  FxEffectDef *playerLaserSightLight;
};

/* 3728 */
struct FxBeamTracerData
{
  float wiggleDist;
  float textureReps;
  float segLength;
};

/* 3729 */
struct FxBeamDemoLineData
{
  float *segmentVerts;
};

/* 3730 */
struct FxBeamLaserData
{
  float endRadius;
};

/* 3731 */
struct FxBeamFlameData
{
  float endRadius;
  float *segmentVerts;
  Material *material2;
  int perpSegmentCount;
  float animFrac;
};

/* 3732 */
struct FxBeamArcData
{
  float endRadius;
  float textureReps;
  float *segmentVerts;
};

/* 3733 */
union $4B1ED2DA68278BE773CF1104E70E74D4
{
  FxBeamTracerData tracer;
  FxBeamLaserData laser;
  FxBeamFlameData flame;
  FxBeamDemoLineData demoLine;
  FxBeamArcData arc;
};

/* 3734 */
struct FxBeam
{
  char type;
  bool depthHack;
  char drawSurfOverride;
  vec3_t begin;
  vec3_t end;
  GfxColor colors[5];
  float radius;
  Material *material;
  int segmentCount;
  $4B1ED2DA68278BE773CF1104E70E74D4 ___u9;
};

/* 3735 */
struct $01920CFBCEBBC7D8417C03082B059610
{
  unsigned __int32 state : 4;
  unsigned __int32 id : 12;
};

/* 3736 */
union $0A560C8D27F17FBE1475496B4A587FC2
{
  unsigned int i;
  $01920CFBCEBBC7D8417C03082B059610 __s1;
};

/* 3737 */
struct GlassState
{
  $0A560C8D27F17FBE1475496B4A587FC2 val;
};

/* 3738 */
struct GlassClient::Outlines
{
  unsigned int numOutlines;
  char *buffer;
};

/* 3739 */
struct __declspec(align(4)) GlassClient
{
  Glass *glass;
  GlassState state;
  bool shatterDelay;
  GlassClient::Outlines outlines;
  bool preShatterDone;
};

/* 3740 */
struct GlassShardMeshVertex
{
  char pos;
  char norm;
};

/* 3741 */
struct $F31EA7323A3E1591510442F855F54A3C
{
  GlassShardMeshVertex *vertexList[22];
  vec3_t allBBoxMin;
  vec3_t allBBoxMax;
  vec3_t coordScale;
  float worldBottom;
};

/* 3744 */
struct GlassPackedOutline
{
  char numVerts;
  bool onBottomEdge;
  unsigned __int16 sortKey;
  unsigned int edgeFlags;
  float edgeRatio;
  float area;
  GlassPackedOutline::PackedVert *verts;
};

/* 3745 */
struct __declspec(align(4)) GlassShard::Mesh
{
  PackedUnitVec *normArray;
  char *indices;
  char numNorm;
  char numVerts;
  char numVertsLow;
  char numIndices;
  char numIndicesLow;
};

/* 3746 */
struct __declspec(align(4)) $23F11A1182B18E394FCE7957ABE3E901
{
  unsigned int packedPos;
  float timeUntilAction;
  vec3_t axis[3];
  vec3_t origin;
  vec3_t worldBBoxMin;
  vec3_t worldBBoxMax;
  bool inGroupChange;
};

/* 3742 */
struct __declspec(align(4)) GlassShard
{
  GlassShard *groupNext;
  char *memoryPtr;
  unsigned __int16 memorySize;
  unsigned __int16 glassIndex;
  GlassPackedOutline packedOutline;
  float thickness;
  float uvScale;
  vec2_t uvOffset;
  float binormalSign;
  GlassShard::Mesh mesh;
  $23F11A1182B18E394FCE7957ABE3E901 local;
  int physObjId;
  GlassPhysics *glassPhysics;
  ShardGroup *group;
  bool remove;
  bool delayedDrop;
};

/* 3743 */
struct GlassPackedOutline::PackedVert
{
  __int16 x;
  __int16 y;
};

/* 3747 */
struct __declspec(align(16)) GlassPhysics
{
  phys_mat44 m_mat;
  phys_vec3 m_inv_inertia;
  phys_vec3 m_t_vel;
  phys_vec3 m_a_vel;
  phys_vec3 m_force_sum;
  phys_vec3 m_torque_sum;
  float m_inv_mass;
};

/* 3748 */
struct ShardGroup
{
  unsigned int packedPos;
  GlassDef *glassDef;
  GlassShard *head;
  vec3_t worldBBoxMin;
  vec3_t worldBBoxMax;
  vec3_t origin;
  bool inGenVertsJob;
  bool invalidBBox;
  bool visible;
  bool highLod;
  __int16 numShards;
  __int16 numIndices;
  __int16 numVerts;
  unsigned __int16 lightingHandle;
  GfxLightingInfo lightingInfo;
  FxCodeMeshData *codeMesh;
  GfxDrawSurf *drawSurf;
  unsigned __int16 vertsBaseIndex;
  GfxPackedVertex *baseVerts;
  unsigned __int16 *renderIndices;
};

/* 3749 */
struct $2A9E8B34239967D33EAFA0D8D67408AE
{
  int numMovingShards;
  int numVisGroups;
  int numVisShards;
  int numOOMGroups;
};

/* 3750 */
struct GlassLock
{
  volatile int lock;
};

/* 3751 */
struct SmallAllocator
{
  void *memory;
  void *freeHead;
  unsigned int blockSize;
  unsigned int numBlocks;
  unsigned int numUsed;
  unsigned int maxUsed;
};

/* 3752 */
struct Allocator::Memory
{
  Allocator::Memory *next;
  Allocator::Memory *prev;
  void *userData;
  Allocator::Memory *nextFree;
  Allocator::Memory *prevFree;
};

/* 3753 */
struct Allocator
{
  void *buffer;
  Allocator::Memory *head;
  Allocator::Memory *tail;
  Allocator::Memory *freeHead;
  int maxUsed;
};

/* 3754 */
struct FixedSizeAllocator<ShardGroup>::Block
{
  FixedSizeAllocator<ShardGroup>::Block *prev;
  FixedSizeAllocator<ShardGroup>::Block *next;
  unsigned int magic;
  ShardGroup data;
};

/* 3755 */
struct LinkedList<FixedSizeAllocator<ShardGroup>::Block *>
{
  FixedSizeAllocator<ShardGroup>::Block *head;
};

/* 3756 */
struct FixedSizeAllocator<ShardGroup>
{
  void *memory;
  LinkedList<FixedSizeAllocator<ShardGroup>::Block *> freeList;
  LinkedList<FixedSizeAllocator<ShardGroup>::Block *> usedList;
  unsigned int size;
  unsigned int used;
  unsigned int maxUsed;
  unsigned int magic;
};

/* 3757 */
struct FixedSizeAllocator<GlassShard>::Block
{
  FixedSizeAllocator<GlassShard>::Block *prev;
  FixedSizeAllocator<GlassShard>::Block *next;
  unsigned int magic;
  GlassShard data;
};

/* 3758 */
struct LinkedList<FixedSizeAllocator<GlassShard>::Block *>
{
  FixedSizeAllocator<GlassShard>::Block *head;
};

/* 3759 */
struct FixedSizeAllocator<GlassShard>
{
  void *memory;
  LinkedList<FixedSizeAllocator<GlassShard>::Block *> freeList;
  LinkedList<FixedSizeAllocator<GlassShard>::Block *> usedList;
  unsigned int size;
  unsigned int used;
  unsigned int maxUsed;
  unsigned int magic;
};

/* 3760 */
struct FixedSizeAllocator<GlassPhysics>::Block
{
  FixedSizeAllocator<GlassPhysics>::Block *prev;
  FixedSizeAllocator<GlassPhysics>::Block *next;
  unsigned int magic;
  GlassPhysics data;
};

/* 3761 */
struct LinkedList<FixedSizeAllocator<GlassPhysics>::Block *>
{
  FixedSizeAllocator<GlassPhysics>::Block *head;
};

/* 3762 */
struct FixedSizeAllocator<GlassPhysics>
{
  void *memory;
  LinkedList<FixedSizeAllocator<GlassPhysics>::Block *> freeList;
  LinkedList<FixedSizeAllocator<GlassPhysics>::Block *> usedList;
  unsigned int size;
  unsigned int used;
  unsigned int maxUsed;
  unsigned int magic;
};

/* 3763 */
struct FixedSizeAllocator<GlassShard *>::Block
{
  FixedSizeAllocator<GlassShard *>::Block *prev;
  FixedSizeAllocator<GlassShard *>::Block *next;
  unsigned int magic;
  GlassShard *data;
};

/* 3764 */
struct LinkedList<FixedSizeAllocator<GlassShard *>::Block *>
{
  FixedSizeAllocator<GlassShard *>::Block *head;
};

/* 3765 */
struct FixedSizeAllocator<GlassShard *>
{
  void *memory;
  LinkedList<FixedSizeAllocator<GlassShard *>::Block *> freeList;
  LinkedList<FixedSizeAllocator<GlassShard *>::Block *> usedList;
  unsigned int size;
  unsigned int used;
  unsigned int maxUsed;
  unsigned int magic;
};

/* 3766 */
struct std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node
{
  std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *_Next;
  std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *_Prev;
  GlassShard *_Myval;
};

/* 3767 */
struct SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node>
{
  SmallAllocator *alloc;
};

/* 3768 */
struct SmallAllocatorTemplate<GlassShard *>
{
  SmallAllocator *alloc;
};

/* 3769 */
struct __cppobj std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> > : std::_Container_base0
{
  std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *_Myhead;
  unsigned int _Mysize;
  SmallAllocatorTemplate<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node> _Alnod;
  SmallAllocatorTemplate<GlassShard *> _Alval;
};

/* 3770 */
struct __cppobj std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > : std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
{
};

/* 3771 */
struct __cppobj std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> > : std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
{
};

/* 3772 */
struct __cppobj GlassRenderer::SortedShardsList : std::list<GlassShard *,SmallAllocatorTemplate<GlassShard *> >
{
};

/* 3773 */
struct $729888269EC707CF21326610951C00F2
{
  GlassClient *glass;
  bool gameState;
  vec3_t hitPos;
  vec3_t hitDir;
};

/* 3774 */
struct $E43410A051E4063F9EF96BCC9C12B6E4
{
  vec3_t p0;
  vec3_t p1;
};

/* 3775 */
struct $B2A3582670476BA598AD90BC1F58B820
{
  vec3_t origin;
  float damageInner;
  float damageOuter;
  float radius;
  int mod;
};

/* 3776 */
struct $78B94188274654124EC57B3F390DA3FB
{
  vec3_t eyePos;
  vec3_t forward;
  vec3_t right;
  vec3_t up;
  float range;
};

/* 3777 */
union $DF979ACF3202A6FA08A84936F6AF7089
{
  $729888269EC707CF21326610951C00F2 shatter;
  $E43410A051E4063F9EF96BCC9C12B6E4 trace;
  $B2A3582670476BA598AD90BC1F58B820 explosion;
  $78B94188274654124EC57B3F390DA3FB melee;
};

/* 3778 */
struct GlassRenderer::Action
{
  $16C569F95E4341FA9ED77D88E0AE30A9 type;
  $DF979ACF3202A6FA08A84936F6AF7089 ___u1;
};

/* 3779 */
struct GlassRenderer
{
  $F31EA7323A3E1591510442F855F54A3C local;
  GlassShard *groupChanges[2048];
  volatile int numGroupChanges;
  int maxNumGroupChanges;
  dvar_t *cullShards;
  dvar_t *drawDebug;
  dvar_t *drawBBox;
  dvar_t *drawShardOutline;
  dvar_t *pickShards;
  dvar_t *debugSplit;
  dvar_t *freezeShards;
  dvar_t *broom;
  $2A9E8B34239967D33EAFA0D8D67408AE stat;
  $2A9E8B34239967D33EAFA0D8D67408AE prevStat;
  int minFreeVertsMemory;
  int minFreeIndicesMemory;
  int minFreeShardsMemory;
  int maxCrashShards;
  unsigned int numShatters;
  unsigned __int64 shatterTimer;
  unsigned int numSplits;
  unsigned __int64 splitTimer;
  unsigned __int64 triangulateTimer;
  unsigned int genVertsCount;
  unsigned __int64 genVertsTimer;
  dvar_t *maxShardSplit;
  dvar_t *maxSplitSizeRatio;
  dvar_t *defragMemory;
  dvar_t *defragIndices;
  dvar_t *smpGlass;
  dvar_t *doMaintenance;
  unsigned int frame;
  int timeLastUpdate;
  float deltaTime;
  GlassLock rendererLock;
  SmallAllocator smallAllocator;
  Allocator shardMemoryAllocator;
  FixedSizeAllocator<ShardGroup> *groupsAllocator;
  FixedSizeAllocator<GlassShard> *shardsAllocator;
  FixedSizeAllocator<GlassPhysics> *physicsAllocator;
  FixedSizeAllocator<GlassShard *> *delayedPhysicsShardsList;
  GlassRenderer::SortedShardsList *colidingShards;
  GlassRenderer::SortedShardsList *tempShardsList;
  Material *usedMaterials[32];
  unsigned int numUsedMaterials;
  GlassRenderer::Action actions[200];
  volatile int actionInputIndex;
  volatile int actionOutputIndex;
};

/* 3780 */
struct GlassesClient
{
  GlassClient *glasses;
  unsigned int numGlasses;
  GlassRenderer *renderer;
  unsigned int lastPreShatter;
};

/* 3781 */
struct GlassPhysics::StaticLocals
{
  vec3_t gravity_dir;
  float gravity;
  float dragLinear;
  float dragAngular;
};

/* 3782 */
struct GlassStreamOutline
{
  unsigned int numVerts;
  unsigned int edgeFlags;
  GlassPackedOutline::PackedVert verts[1];
};

/* 3783 */
struct ray2_t
{
  vec2_t origin;
  vec2_t dir;
  float len;
};

/* 3784 */
struct __declspec(align(4)) GlassOutline::Vertex
{
  ray2_t edge;
  bool isOriginalEdge;
};

/* 3785 */
const struct __declspec(align(2)) GlassOutline
{
  GlassOutline::Vertex *verts;
  float length;
  float area;
  char maxVerts;
  char numVerts;
  bool isClosed;
};

/* 3786 */
struct GlassShard::Triangles
{
  GlassOutline *outline;
  char triangleIndices[256];
  unsigned int nIndices;
};

/* 3787 */
struct GlassUpdateCmd
{
  GlassRenderer *renderer;
  GlassPhysics::StaticLocals staticLocals;
  float deltaTime;
  GlassShard *shards[32];
  unsigned int numShards;
};

/* 3788 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,GlassShard *,int,GlassShard * const *,GlassShard * const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3789 */
struct __cppobj std::_List_unchecked_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,GlassShard *,int,GlassShard * const *,GlassShard * const &,std::_Iterator_base0>
{
  std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node *_Ptr;
};

/* 3790 */
struct __cppobj std::_List_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > > : std::_List_unchecked_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> >,std::_Iterator_base0>
{
};

/* 3791 */
struct __cppobj std::_List_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > > : std::_List_const_iterator<std::_List_val<GlassShard *,SmallAllocatorTemplate<GlassShard *> > >
{
};

/* 3792 */
struct __declspec(align(8)) GlassTimer
{
  unsigned __int64 start;
  unsigned __int64 *counter;
};

/* 3793 */
struct __cppobj TempOutlineTemplate<64> : GlassOutline
{
  GlassOutline::Vertex v[64];
};

/* 3794 */
struct GlassGenVertsCmd
{
  GlassRenderer *renderer;
  ShardGroup *groups[16];
  unsigned int numGroups;
};

/* 3795 */
struct __cppobj SmallAllocatorTemplate<GlassShard *>::rebind<GlassShard *>
{
};

/* 3796 */
struct __cppobj SmallAllocatorTemplate<GlassShard *>::rebind<std::_List_nod<GlassShard *,SmallAllocatorTemplate<GlassShard *> >::_Node>
{
};

/* 3798 */
struct __cppobj TempPackedOutline : GlassPackedOutline
{
  GlassPackedOutline::PackedVert v[16];
};

/* 3797 */
struct FixedSizeAllocator<TempPackedOutline>::Block
{
  FixedSizeAllocator<TempPackedOutline>::Block *prev;
  FixedSizeAllocator<TempPackedOutline>::Block *next;
  unsigned int magic;
  TempPackedOutline data;
};

/* 3799 */
struct LinkedList<FixedSizeAllocator<TempPackedOutline>::Block *>
{
  FixedSizeAllocator<TempPackedOutline>::Block *head;
};

/* 3800 */
struct GlassOutline::EdgeDistance
{
  unsigned int edgeIndex;
  float edgeParam;
  float dist;
  vec2_t closestPoint;
};

/* 3801 */
struct FixedSizeAllocator<TempPackedOutline>
{
  void *memory;
  LinkedList<FixedSizeAllocator<TempPackedOutline>::Block *> freeList;
  LinkedList<FixedSizeAllocator<TempPackedOutline>::Block *> usedList;
  unsigned int size;
  unsigned int used;
  unsigned int maxUsed;
  unsigned int magic;
};

/* 3802 */
struct pointtrace_t
{
  TraceExtents extents;
  IgnoreEntParams *ignoreEntParams;
  int contentmask;
  int bLocational;
  char *priorityMap;
};

/* 3803 */
struct __cppobj TempOutlineTemplate<16> : GlassOutline
{
  GlassOutline::Vertex v[16];
};

/* 3804 */
struct StackAllocator
{
  char *memory;
  unsigned int size;
  unsigned int pos;
};

/* 3805 */
struct GlassAutoLock
{
  GlassLock *lock;
};

/* 3806 */
struct GlassServer
{
  GlassState state;
  Glass *glass;
  int stateChangeTime;
  float health;
  float crackedDamageRate;
  vec3_t hitPos;
  vec3_t hitDir;
};

/* 3807 */
struct GlassesServer
{
  int nextShatterTime;
  int shatterIntervalsMS;
  bool inited;
  unsigned int numGlasses;
  GlassServer glasses[1000];
  dvar_t *damageMultiplier;
};

/* 3808 */
struct VertUsage
{
  int index;
  VertUsage *next;
};

/* 3809 */
struct MaterialUsage
{
  int memory;
  VertUsage *verts;
  Material *material;
};

/* 3810 */
struct GfxClientFog
{
  GfxFog settings[6];
  int index;
};

/* 3811 */
struct trViewStatistics_t
{
  int c_indexes;
  int c_fxIndexes;
  int c_viewIndexes;
  int c_shadowIndexes;
  int c_vertexes;
  int c_batches;
};

/* 3812 */
struct Image_MemUsage
{
  int total;
  int lightmap;
  int minspec;
};

/* 3813 */
struct trStatistics_t
{
  trViewStatistics_t *views;
  Image_MemUsage c_imageUsage;
};

/* 3814 */
struct GfxLodRamp
{
  float scale;
  float bias;
  float appliedInvScale;
};

/* 3815 */
struct GfxLodParms
{
  vec3_t origin;
  GfxLodRamp ramp[2];
  GfxLodRamp rampExtracam[2];
  bool valid;
  ExtraCamLodInfo extracamLod;
};

/* 3816 */
struct __declspec(align(16)) r_globals_t
{
  GfxViewParms identityViewParms;
  bool inFrame;
  bool registered;
  bool forbidDelayLoadImages;
  bool ignorePrecacheErrors;
  vec3_t viewOrg;
  vec3_t viewDir;
  unsigned int frontEndFrameCount;
  int totalImageMemory;
  Material *materialHashTable[4992];
  MaterialUsage materialUsage[4992];
  GfxClientFog clientFogs[4];
  GfxColor color_axis;
  GfxColor color_allies;
  trStatistics_t *globalstats;
  trViewStatistics_t *stats;
  GfxFrameStats frameStats;
  GfxLodParms lodParms;
  GfxLodParms correctedLodParms[4];
  bool useSunLightOverride;
  bool useSunDirOverride;
  bool useSunDirLerp;
  vec3_t diffuseSunLightOverride;
  vec3_t specularSunLightOverride;
  vec3_t sunDirOverride;
  vec3_t sunDirOverrideTarget;
  int sunDirLerpBeginTime;
  int sunDirLerpEndTime;
  GfxViewParms *debugViewParms;
  int endTime;
  bool distortion;
  bool drawWorld;
  bool drawSModels;
  bool drawXModels;
  bool drawBModels;
  const char *codeImageNames[55];
  unsigned int viewInfoCount;
  int sunShadowFull;
  float sunShadowmapScale;
  float sunShadowmapScaleNum;
  unsigned int sunShadowSize;
  float sunShadowPartitionRatio;
  int drawSunShadow;
  bool isNotRenderingFullScreen;
  bool enablePlayerShadowFlag;
  bool gammaModified;
  float gamma;
  float skinnedVertexCacheUsed[4];
};

/* 3817 */
struct __cppobj std::input_iterator_tag
{
};

/* 3818 */
struct __cppobj std::output_iterator_tag
{
};

/* 3819 */
struct __cppobj std::forward_iterator_tag : std::input_iterator_tag, std::output_iterator_tag
{
  _BYTE gap0[1];
};

/* 3820 */
struct __cppobj std::bidirectional_iterator_tag : std::forward_iterator_tag
{
};

/* 3821 */
struct r_double_index_t
{
  unsigned __int16 value[2];
};

/* 3822 */
struct GlassDefLoad
{
  char name[64];
  char baseMaterial[64];
  char crackedMaterial[64];
  char shardMaterial[64];
  char crackSound[64];
  char shatterShound[64];
  char autoShatterShound[64];
  char worldMtlType[64];
  GlassDef glassDef;
};

/* 3823 */
struct __declspec(align(16)) traceWork_t
{
  hybrid_vector delta;
  hybrid_vector midpoint;
  hybrid_vector halfDelta;
  hybrid_vector halfDeltaAbs;
  hybrid_vector size;
  hybrid_vector bounds[2];
  hybrid_vector radiusOffset;
  TraceExtents extents;
  float deltaLen;
  float deltaLenSq;
  int contents;
  bool isPoint;
  bool axialCullOnly;
  float radius;
  float offsetZ;
  float boundingRadius;
  TraceThreadInfo threadInfo;
};

/* 3824 */
struct $0B3740A62AFD1A9D94A90C4340806082
{
  unsigned int value;
  unsigned int glasses;
};

/* 3825 */
struct GlassConfigFile::Values
{
  const char *name;
  $0B3740A62AFD1A9D94A90C4340806082 valueRange[4];
  unsigned int numRanges;
};

/* 3826 */
struct __declspec(align(4)) GlassConfigFile
{
  GlassConfigFile::Values values[100];
  unsigned int numValues;
  bool verbose;
};

/* 3827 */
struct DiskGfxVertex
{
  vec3_t xyz;
  vec3_t normal;
  char color[4];
  vec2_t texCoord;
  vec2_t lmapCoord;
  vec3_t tangent;
  vec3_t binormal;
};

/* 3828 */
struct SavedScreenParams
{
  float s0;
  float t0;
  float ds;
  float dt;
  int isSet;
};

/* 3829 */
struct r_global_permap_assets_t
{
  Material *flameThrowerFXMaterial;
  Material *electrifiedFXMaterial;
  Material *transportedFXMaterial;
  Material *waterSheetingFXMaterial;
};

/* 3830 */
struct __declspec(align(128)) r_global_permanent_t
{
  Material *sortedMaterials[4992];
  bool needSortMaterials;
  bool postMapFastfileLoadFinished;
  int materialCount;
  GfxImage *whiteImage;
  GfxImage *blackImage;
  GfxImage *blankImage;
  GfxImage *grayImage;
  GfxImage *linearGrayImage;
  GfxImage *lightmapIntensityImages[31];
  GfxImage *identityNormalMapImage;
  GfxImage *whiteTransparentImage;
  GfxImage *blackTransparentImage;
  GfxImage *outdoorImage;
  GfxImage *heatMapImage;
  GfxImage *qrcodeImage[12];
  GfxLightDef *dlightDef;
  GfxLightDef *flashLightDef;
  Material *defaultMaterial;
  Material *whiteMaterial;
  Material *additiveMaterial;
  Material *additiveMaterialNoDepth;
  Material *pointMaterial;
  Material *lineMaterial;
  Material *lineMaterialNoDepth;
  Material *blendMaterial;
  Material *blendMaterialNoDepth;
  Material *whiteDebugExteriorMaterial;
  Material *whiteDepthInteriorMaterial;
  Material *clearAlphaMaterial;
  Material *clearAlphaStencilMaterial;
  Material *setAlphaMaterial;
  Material *shadowClearMaterial;
  Material *shadowCasterMaterial;
  Material *shadowOverlayMaterial;
  Material *depthPrepassMaterial;
  Material *glareBlindMaterial;
  Material *lightCoronaMaterial;
  Material *stencilShadowMaterial;
  Material *stencilDisplayMaterial;
  Material *floatZDisplayMaterial;
  Material *resolveFloatZ1;
  Material *resolveFloatZ2;
  Material *resolveFloatZ4;
  Material *resolveFloatZ8;
  Material *resolveFloatZ16;
  Material *fxaaMaterial;
  Material *ssaoMaterial;
  Material *ssaoApplyMaterial;
  Material *ssaoBlurMaterial;
  Material *ssaoMinifyMaterial;
  Material *ssaoReconstructMaterial;
  Material *colorChannelMixerMaterial;
  Material *frameColorDebugMaterial;
  Material *frameAlphaDebugMaterial;
  GfxImage *rawImage;
  GfxWorld *world;
  Material *feedbackReplaceMaterial;
  Material *feedbackBlendMaterial;
  Material *feedbackFilmBlendMaterial;
  Material *dofDownsampleMaterial;
  Material *dofNearCocMaterial;
  Material *smallBlurMaterial;
  Material *postFxDofMaterial;
  Material *postFxDofMaterial2;
  Material *postFxDofColorMaterial;
  Material *dofHqDownsample;
  Material *dofHqBlurMask;
  Material *dofHqBlur;
  Material *dofHqFinal;
  Material *dofHqFinalExtra;
  Material *zombieDarkness;
  Material *redactMaterial1;
  Material *redactMaterial2;
  Material *redactMaterial3;
  Material *waterDropletMaterial;
  Material *reviveFXMaterial;
  Material *postFxColorMaterial;
  Material *postFxMaterial;
  Material *poisonFXMaterial;
  Material *anaglyphFXMaterial;
  Material *symmetricFilterMaterial[8];
  Material *shellShockBlurredMaterial;
  Material *shellShockFlashedMaterial;
  Material *ropeMaterial;
  Material *logoMaterial;
  int savedScreenTimes[4];
  SavedScreenParams savedScreenParams[4];
  Material *resampleFinal;
  Material *resampleHDR;
  Material *resampleCubicFinal;
  Material *resampleCubicFinalLeft;
  Material *resampleCubicFinalRight;
  Material *resampleShift;
  Material *resampleMatrix;
  Material *bloomDownsample;
  Material *bloomDownsampleHQ;
  Material *bloomDownsampleConvolution;
  Material *bloomDownsampleConvolutionHQ;
  Material *bloomRemap;
  Material *bloomBlurX;
  Material *bloomBlurY;
  Material *bloomCombineHiLo;
  Material *bloomApply;
  Material *bloomApplyHQ;
  Material *bloomApplyNull;
  Material *bloomApplyThermal;
  Material *debugZbuffer;
  Material *createLut2d;
  Material *createLut2dv;
  Material *applyLut3d;
  Material *dummyMaterial;
  Material *compositeResult;
  Material *infraredWhite;
  Material *sonarMaterial;
  Material *sonarAttachmentMaterial;
  Material *hudOutlineMaterial[3];
  Material *predatorMaterial;
  r_global_permap_assets_t permapAssets;
  FontIcon *fontIconHandle[4];
  int fontIconFilesCount;
};

/* 3831 */
struct DpvsGlob_sunShadow
{
  vec3_t viewDir;
  float viewDirDist;
  float sunShadowDrawDist;
  int viewDirSign[3];
};

/* 3832 */
struct PortalHeapNode
{
  GfxPortal *portal;
  float dist;
};

/* 3833 */
union GfxHullPointsPool
{
  GfxHullPointsPool *nextFree;
  vec2_t points[64];
};

/* 3834 */
struct DpvsView
{
  unsigned int renderFxFlagsCull;
  DpvsPlane frustumPlanes[14];
  int frustumPlaneCount;
};

/* 3835 */
struct DpvsCachedCell
{
  unsigned __int32 cellIndex : 10;
  unsigned __int32 planeIndex : 12;
  unsigned __int32 planeCount : 5;
  unsigned __int32 frustumPlaneCount : 5;
};

/* 3836 */
struct DpvsGlob
{
  DpvsPlane nearPlane;
  DpvsPlane farPlane;
  bool farPlaneEnabled;
  bool cacheCells;
  bool cellsCached;
  GfxMatrix *viewProjMtx;
  GfxMatrix *invViewProjMtx;
  GfxMatrix *projMtx;
  vec4_t viewOrg;
  int viewOrgIsDir;
  DpvsGlob_sunShadow sunShadow;
  int queuedCount;
  PortalHeapNode *portalQueue;
  GfxHullPointsPool *nextFreeHullPoints;
  float cullDist;
  DpvsPlane childPlanes[2048];
  DpvsView views[4][3];
  DpvsPlane *sideFrustumPlanes;
  char *entVis[4];
  unsigned int *cellCasterBitsForCell;
  char cellVisible[256];
  char cellForceInvisible[256];
  __declspec(align(16)) vec4_t occluderPlanes[325];
  int numOccluders;
  unsigned int numCachedCells;
  unsigned int numCachedPlanes;
  unsigned int cachedCellCount[3];
  unsigned int cachedCellBase[3];
  DpvsCachedCell cachedCells[512];
  DpvsCachedCell *cellToCachedCellMap[256];
};

/* 3837 */
struct __cppobj StaticFixedSizeAllocator<TempPackedOutline,350> : FixedSizeAllocator<TempPackedOutline>
{
  char buffer[33600];
};

/* 3838 */
struct OutlineEdge
{
  int index;
  ray2_t ray;
};

/* 3839 */
struct bdBandwidthTestResults
{
  unsigned int m_bytesReceived;
  unsigned int m_receivePeriodMs;
  unsigned int m_avgSeqNumber;
  unsigned int m_minSeqNumber;
  unsigned int m_maxSeqNumber;
};

/* 3840 */
struct __declspec(align(8)) bdBandwidthTestClient
{
  bdSocket m_socket;
  bdReference<bdRemoteTask> m_remoteTask;
  unsigned int m_packetSize;
  unsigned int m_numPackets;
  unsigned int m_senderInitialWait;
  unsigned int m_sendDuration;
  unsigned int m_receiverInitialWait;
  unsigned int m_receiveDuration;
  unsigned int m_lingerDuration;
  unsigned __int16 m_lsgPort;
  unsigned int m_lsgAddr;
  char m_cookie[8];
  bdStopwatch m_timer;
  bdStopwatch m_recvTimeoutTimer;
  char *m_packetBuffer;
  unsigned int m_nextPacketNum;
  unsigned int m_actualNumSent;
  unsigned int m_seqNumberTotal;
  bdLobbyService *m_lobbyService;
  bdBandwidthTestInitStatus m_initStatus;
  bdBandwidthTestStatus m_testStatus;
  bdBandwidthTestResults m_uploadResults;
  bdBandwidthTestResults m_downloadResults;
  bdLobbyErrorCode m_error;
  bdBandwidthTestType m_type;
};

/* 3841 */
struct overlappedTask
{
  bdReference<bdRemoteTask> overlappedIO;
  bdRemoteTask::bdStatus finalStatus;
  bdLobbyErrorCode errorCode;
  int type;
  bool active;
  ControllerIndex_t controllerIndex;
  void *data;
  void *miscData;
  float startMS;
};

/* 3842 */
struct gscProfileInfo_t
{
  unsigned int inclusive_time;
  unsigned int exclusive_time;
  unsigned int hit_count;
};

/* 3843 */
struct SCR_PROFILER_DATA
{
  gscProfileInfo_t *profileInfo[8];
  int profileInfoCount;
};

/* 3844 */
struct function_stack_t
{
  char *pos;
  VariableValue *top;
  unsigned int localId;
  unsigned int localVarCount;
  VariableValue *startTop;
  SCR_PROFILER_DATA profileData;
};

/* 3845 */
struct function_frame_t
{
  function_stack_t fs;
  char *creationPos;
};

/* 3846 */
struct __declspec(align(8)) scrVmPub_t
{
  unsigned int *localVars;
  VariableValue *maxstack;
  int function_count;
  function_frame_t *function_frame;
  VariableValue *top;
  bool debugCode;
  bool abort_on_error;
  bool terminal_error;
  bool block_execution;
  unsigned int inparamcount;
  unsigned int outparamcount;
  unsigned int breakpointOutparamcount;
  bool showError;
  function_frame_t function_frame_start[32];
  VariableValue stack[2048];
  void (__cdecl *notifyListeners[1])(unsigned int, unsigned int);
};

/* 3847 */
struct __declspec(align(8)) PlayerInviteRecord
{
  unsigned __int64 playerInvited;
  int timeInvited;
};

/* 3848 */
struct __declspec(align(8)) RecentlyInvitedPlayers
{
  PlayerInviteRecord playerInviteRecord[20];
  int currPlayerInviteRecordListPos;
};

/* 3849 */
struct PC_AgeRestrict
{
  char *titleId;
  int age;
};

/* 3850 */
struct __declspec(align(4)) winUserData_t
{
  winConnectionState_e connectionState;
  bool onConnectCalled;
  int signInState;
  char ticket[4096];
  unsigned int ticketSize;
  bdInetAddr authAddr;
  bdInetAddr lsgAddr;
  int errorCount;
  int backoffRecoverTime;
  bool isContentRestricted;
  bool isChatRestricted;
  char gamertag[32];
  unsigned __int64 xuid;
  char xuidString[21];
  bool isGuest;
  EUserTier tier;
  bool isElite;
};

/* 3851 */
struct bdLinkable
{
  bdLinkableVtbl *vfptr;
  bdLinkable *m_previous;
  bdLinkable *m_next;
  bdLinkable **m_headPtr;
};

/* 3852 */
struct bdLinkableVtbl
{
  void *(__thiscall *__vecDelDtor)(bdLinkable *this, unsigned int);
};

/* 3853 */
struct __cppobj bdLogSubscriber : bdLinkable
{
  const char *m_channels[5];
};

/* 3854 */
struct InviteInfo
{
  XSESSION_INFO sessionInfo;
  bool fromGameInvite;
  bool fromMPInvite;
  char inviteString[32];
  char invitePass[64];
};

/* 3855 */
struct Friend
{
  char nameInd;
  unsigned int level;
  char clanTag[10];
  char colorMods[128];
  netadr_t currentServer;
  unsigned __int64 accountID;
  bool online;
  bool sendInvite;
  bool showInvite;
  int lastInviteTime;
  InviteInfo inviteInfo;
  bool haveInvite;
};

/* 3856 */
struct QoSStatus
{
  int startMS;
  int firstMS;
  int updateMS;
  unsigned int prevNumSuccesses;
};

/* 3857 */
struct __cppobj dwQoSMultiProbeListener : bdQoSProbeListener
{
  bdQoSRemoteAddr m_probeAddrs[50];
  bool m_probeSucceeded[50];
  unsigned int m_numProbes;
  bdQoSProbeInfo m_successes[50];
  bdSecurityID m_successIDs[50];
  unsigned int m_numSuccesses;
  unsigned int m_numFailures;
};

/* 3858 */
struct PartyInfo
{
  int flags;
  XSESSION_INFO info;
  netadr_t serverAddr;
  int occupiedPublicSlots;
  int occupiedPrivateSlots;
  int numPublicSlots;
  int numPrivateSlots;
  float skill;
  int geo1;
  int geo2;
  int geo3;
  int geo4;
  int ping;
  int avgPing;
  unsigned __int64 xuid;
  int upload;
  int mapPacks;
};

/* 3859 */
struct PartyProber
{
  PartyInfo hosts[50];
  int hostCount;
  ProberMode mode;
  ProberState state;
  ControllerIndex_t controllerIndex;
  int partyId;
  PartyData_s *partyToNotify;
  searchSessionMode_t searchMode;
  int minPlayers;
  int mapPacks;
  int requiredFlags;
  int searchStartUTC;
  netadr_t masterAddr;
  int echoChallenge;
  PartyInfo echoHost;
  int echoHostNum;
  int clientDisagreeTime[18];
  int clientAgreeTime[18];
  int clientPacketTime;
  int clientWaitStart;
  int hostIndex;
  netadr_t hostAddr;
  unsigned int hostChallenge;
  int hostNum;
  int nextSearchTime;
  int packetStartTime;
  int packetRecvTime;
  int packetSendTime;
  int retryCount;
  char errorMessage[256];
};

/* 3860 */
struct __cppobj MatchMakingInfo : bdMatchMakingInfo
{
  unsigned __int64 m_GAME_SECURITY_ID;
  char m_GAME_SECURITY_KEY[17];
  int m_SERVER_TYPE;
  int m_SHOW_IN_MATCHMAKING;
  int m_NETCODE_VERSION;
  int m_MAP_PACKS;
  int m_PLAYLIST_VERSION;
  int m_PLAYLIST_NUMBER;
  int m_IS_EMPTY;
  int m_TEAM_SIZE_MAX;
  float m_SKILL;
  int m_GEO_1;
  int m_GEO_2;
  int m_GEO_3;
  int m_GEO_4;
  int m_dirty;
  int m_active;
  int m_timeSinceLastUpdate;
  int m_recreateSession;
};

/* 3861 */
struct __declspec(align(8)) LaunchData
{
  int version;
  char startupText[826];
  ControllerIndex_t activeController;
  unsigned __int64 invitedXUID;
  XSESSION_INFO inviteHostInfo;
  unsigned __int64 inviteFromXUID;
  bool skipMovies;
  bool gameInviteAccepted;
  bool isDedicated;
  bool fromGameInvite;
  bool fromMPInvite;
  bool bootableInvite;
  bool usedControllers[1];
  bool startOtherExecutableAfterInvite;
  bool mpZombieMode;
  unsigned int stackTrace[16];
};

/* 3862 */
struct __cppobj bdMailHeader : bdTaskResult
{
  unsigned __int64 m_senderID;
  char m_senderName[64];
  unsigned __int64 m_mailID;
  unsigned int m_timeStamp;
  unsigned int m_size;
};

/* 3863 */
struct __cppobj bdMailBody : bdTaskResult
{
  void *m_mailBody;
  unsigned int m_size;
  unsigned __int64 m_mailID;
};

/* 3864 */
struct __cppobj bdNotification : bdTaskResult
{
  bdNotificationType m_type;
  unsigned int m_timeStamp;
  unsigned __int64 m_ID;
  unsigned __int64 m_sourceUser;
  char m_sourceUserName[64];
  unsigned __int64 m_affectedUser;
  char m_affectedUserName[64];
  unsigned __int64 m_teamID;
  char m_teamName[64];
};

/* 3865 */
struct qosPayload_t
{
  int protocol;
  int isMP;
  int isMigrating;
  int numAvailableSlots;
  int maxLocalPlayersAllowed;
  int allowGuests;
  int isMatchEnding;
  int isLoading;
  int isDedicated;
  unsigned __int64 xuid;
};

/* 3866 */
struct __cppobj bdMailInboxInfo : bdTaskResult
{
  unsigned int m_priority;
  unsigned int m_count;
};

/* 3867 */
struct __cppobj __declspec(align(8)) bdMailHeaderPriority : bdTaskResult
{
  unsigned __int64 m_senderID;
  char m_senderName[64];
  unsigned __int64 m_mailID;
  unsigned int m_timeStamp;
  unsigned int m_mailPriority;
  unsigned int m_size;
};

/* 3868 */
struct __cppobj bdBlockedUser : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
};

/* 3869 */
struct __cppobj bdMessagingGroup : bdTaskResult
{
  char m_category;
  unsigned __int64 m_groupID;
};

/* 3870 */
struct __cppobj __declspec(align(4)) bdMsgGroupSubscriptionFailure : bdTaskResult
{
  bdLobbyErrorCode m_errorCode;
  char m_category;
};

/* 3871 */
struct __cppobj __declspec(align(8)) bdMessagingGroupInfo : bdTaskResult
{
  char m_category;
  unsigned __int64 m_groupID;
  unsigned int m_estimatedSubscriberCount;
};

/* 3872 */
struct __declspec(align(4)) FriendInfo
{
  int status;
  unsigned __int64 xuid;
  char name[16];
  char presence[128];
  XSESSION_INFO sessionInfo;
  int timeInviteReceived;
  bool hasInvite;
};

/* 3873 */
struct __declspec(align(4)) InviteMessage
{
  XSESSION_INFO sessionInfo;
  int fromMPInvite;
  bool isDedicated;
};

/* 3874 */
struct JoinSessionMessage
{
  IMType mType;
  int inviteID;
  bool isJoinable;
  bool invited;
  int maxLocalPlayersAllowed;
  bool allowGuests;
  e_JoinRejectionReason rejectionReason;
  InviteMessage inviteInfo;
};

/* 3875 */
struct __declspec(align(8)) XuidInfo
{
  unsigned __int64 playerXuids;
  char gamertag[32];
  int systemTime;
};

/* 3876 */
struct s_mutePlayerInfo
{
  unsigned __int64 playerXuid;
  bool muteVoice;
  s_mutePlayerInfo *next;
};

/* 3877 */
struct twitterFeed_t
{
  int nextUpdateTime;
  bdTwitterResultType resultType;
  bdTwitterSearchResult results[1];
  int numResults;
  int totalResults;
  int page;
};

/* 3878 */
struct __declspec(align(8)) twitter_s
{
  unsigned __int64 xuid;
  bdTwitterAccount account;
  twitterStatus_e status;
  int retryCount;
  int nextRetryTime;
};

/* 3879 */
struct dwTwitterGetAccountTask
{
  bdTwitterAccount *account;
};

/* 3880 */
struct dwTwitterRegisterTask
{
  char accountName[1024];
  char password[255];
  bdTwitterAccount *account;
};

/* 3881 */
struct dwTwitterPostTask
{
  char message[560];
};

/* 3882 */
struct dwTwitterInfoTask
{
  unsigned int fields;
  int numAttributes;
  bdTwitterUserAttribute userAttributes[6];
};

/* 3883 */
struct dwTwitterSearchTask
{
  char searchString[129];
  unsigned int page;
  bdTwitterSearchResult *results;
  int maxResults;
  int *numResults;
  int *totalResults;
  bdTwitterResultType resultType;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3884 */
struct playerTwitterOperations
{
  dwTwitterGetAccountTask twGetAccountTask;
  dwTwitterRegisterTask twRegisterTask;
  dwTwitterPostTask twPostTask;
  dwTwitterInfoTask twInfoTask;
  dwTwitterSearchTask twSearchTask;
};

/* 3885 */
struct trackerItem_s
{
  __int16 col;
  unsigned __int64 ent;
  int val;
  trackerColType_e type;
};

/* 3886 */
struct trackerQueue_s
{
  trackerItem_s items[96];
  bool dirty;
  int lastUploadTime;
};

/* 3887 */
struct __cppobj __declspec(align(8)) LeaderboardRow<10> : bdStatsInfo
{
  int m_columns[10];
  unsigned int m_columnsCount;
};

/* 3888 */
struct fileRetryInfo
{
  int lastAttemptTime;
  int lastAttemptInterval;
  int retryCount;
};

/* 3889 */
struct dwFileOperationInfo
{
  dwFileTask fileTask;
  fileRetryInfo retryInfo;
  int taskType;
  bool fetchCompleted;
  bool writeCompleted;
  bool isUserFile;
  bool isCompressedFile;
  const char *menuDef;
  char *fileBuffer;
  int bufferSize;
  int decompressedSize;
  void (__cdecl *fileOperationSucessFunction)(ControllerIndex_t, void *);
  taskCompleteResults (__cdecl *fileNotFoundFunction)(ControllerIndex_t, void *);
  bool *alreadyUploaded;
  char *parityBits;
  void *userData;
};

/* 3890 */
struct __declspec(align(4)) fileFetchData
{
  char *buffer;
  int bufferSize;
  bool fetched;
};

/* 3891 */
struct __declspec(align(8)) dwFileMetadata
{
  char *fileName;
  bdFileInfo fileInfo;
  bool isUserFile;
};

/* 3892 */
struct __declspec(align(4)) FFOTDInfo
{
  char filename[64];
  unsigned int totalSize;
  unsigned int timestamp;
  int chunkCount;
  int chunksDownloaded;
  int bytesDownloaded;
  bool downloadComplete;
};

/* 3893 */
struct WADEntry
{
  char name[32];
  unsigned int compressedSize;
  unsigned int size;
  unsigned int offset;
};

/* 3894 */
struct z_stream_s
{
  char *next_in;
  unsigned int avail_in;
  unsigned int total_in;
  char *next_out;
  unsigned int avail_out;
  unsigned int total_out;
  char *msg;
  internal_state *state;
  char *(__cdecl *zalloc)(char *, unsigned int, unsigned int);
  void (__cdecl *zfree)(char *, char *);
  char *opaque;
  int data_type;
  unsigned int adler;
};

/* 3895 */
struct gz_header_s
{
  int text;
  unsigned int time;
  int xflags;
  int os;
  char *extra;
  unsigned int extra_len;
  unsigned int extra_max;
  char *name;
  unsigned int name_max;
  char *comment;
  unsigned int comm_max;
  int hcrc;
  int done;
};

/* 3896 */
union $3FED14670831426F78C1F126725788C0
{
  unsigned __int16 freq;
  unsigned __int16 code;
};

/* 3897 */
union $2467CA9704E0472D4CCF1296A763D23A
{
  unsigned __int16 dad;
  unsigned __int16 len;
};

/* 3898 */
struct ct_data_s
{
  $3FED14670831426F78C1F126725788C0 fc;
  $2467CA9704E0472D4CCF1296A763D23A dl;
};

/* 3899 */
struct static_tree_desc_s
{
  int dummy;
};

/* 3900 */
struct tree_desc_s
{
  ct_data_s *dyn_tree;
  int max_code;
  static_tree_desc_s *stat_desc;
};

/* 3901 */
struct internal_state
{
  z_stream_s *strm;
  int status;
  char *pending_buf;
  unsigned int pending_buf_size;
  char *pending_out;
  unsigned int pending;
  int wrap;
  gz_header_s *gzhead;
  unsigned int gzindex;
  char method;
  int last_flush;
  unsigned int w_size;
  unsigned int w_bits;
  unsigned int w_mask;
  char *window;
  unsigned int window_size;
  unsigned __int16 *prev;
  unsigned __int16 *head;
  unsigned int ins_h;
  unsigned int hash_size;
  unsigned int hash_bits;
  unsigned int hash_mask;
  unsigned int hash_shift;
  int block_start;
  unsigned int match_length;
  unsigned int prev_match;
  int match_available;
  unsigned int strstart;
  unsigned int match_start;
  unsigned int lookahead;
  unsigned int prev_length;
  unsigned int max_chain_length;
  unsigned int max_lazy_match;
  int level;
  int strategy;
  unsigned int good_match;
  int nice_match;
  ct_data_s dyn_ltree[573];
  ct_data_s dyn_dtree[61];
  ct_data_s bl_tree[39];
  tree_desc_s l_desc;
  tree_desc_s d_desc;
  tree_desc_s bl_desc;
  unsigned __int16 bl_count[16];
  int heap[573];
  int heap_len;
  int heap_max;
  char depth[573];
  char *l_buf;
  unsigned int lit_bufsize;
  unsigned int last_lit;
  unsigned __int16 *d_buf;
  unsigned int opt_len;
  unsigned int static_len;
  unsigned int matches;
  int last_eob_len;
  unsigned __int16 bi_buf;
  int bi_valid;
};

/* 3902 */
struct WADHeader
{
  unsigned int magic;
  unsigned int timestamp;
  unsigned int numEntries;
  unsigned int ffotdVersion;
};

/* 3903 */
struct XZoneInfo
{
  const char *name;
  int allocFlags;
  int freeFlags;
};

/* 3904 */
struct FFOTDChunkFooter
{
  char marker[4];
  unsigned int timestamp;
  unsigned int totalSize;
  unsigned __int16 chunkLength;
  char chunkCount;
  char chunkNumber;
};

/* 3905 */
struct fetchSignedStatsKeyUserData
{
  int keyType;
  bool (__cdecl *initKey)(const void *, int);
  char fetchBuffer[65536];
};

/* 3906 */
struct persistentStats
{
  char statsBuffer[50176];
  bool isChecksumValid;
  bool statsWriteNeeded;
  bool statsValidatedWithDDL;
  bool statsFetched;
  bool disableUpload;
};

/* 3907 */
struct classSets_t
{
  char classSetsBuffer[14336];
  bool classSetsFetched;
  bool classSetsWriteNeeded;
};

/* 3908 */
struct __declspec(align(8)) dwKeyArchiveReadTask
{
  unsigned __int64 entityID;
  bool isDedicated;
  fileShareLocation location;
  bdKeyValuePair values[20];
  int *outRatings;
  int count;
  unsigned __int16 category;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3909 */
struct __declspec(align(8)) dwKeyArchiveWriteTask
{
  unsigned __int64 entityID;
  unsigned __int16 category;
  bdKeyValuePair *values;
  int count;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3910 */
struct dwFileShareListTask
{
  unsigned __int64 *ownerIDs;
  unsigned int numOwners;
  unsigned __int16 offset;
  unsigned __int16 category;
  unsigned __int16 maxNumResults;
  bdFileMetaData *descriptors;
  int *numDescriptors;
  int *totalDescriptors;
  bool isUserFile;
  const char *fileName;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3911 */
struct dwFileShareSearchTask
{
  fileShareLocation location;
  unsigned int startIndex;
  unsigned int maxNumResults;
  unsigned int numTags;
  unsigned int sortOrder;
  bool orderNewestFirst;
  bdTag *tags;
  int *resultFileCount;
  bdFileID *resultFileIDs;
  int *resultRatingCount;
  bdVoteRankStatsInfo *resultRatings;
  int *resultTotalFileCount;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3912 */
struct dwFileShareDescriptorsTask
{
  fileShareLocation location;
  unsigned int numFiles;
  bdFileID *fileIDs;
  int cacheLoadedFileCount;
  bdFileMetaData *descriptors;
  int *descriptorCount;
  bool shouldSort;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3913 */
struct dwFileShareWriteFileTask
{
  fileShareLocation location;
  unsigned __int16 fileSlot;
  const char *menuDef;
  void *fileData;
  bdUploadInterceptor *uploadHandler;
  unsigned int fileSize;
  const char *fileName;
  unsigned __int16 category;
  const void *thumbData;
  unsigned int thumbDataSize;
  unsigned int numTags;
  bdTag *tags;
  bdFileID outFileID;
  void (__cdecl *progressCallback)(ControllerIndex_t, unsigned int *, unsigned int *);
  unsigned int (__cdecl *dataCallback)(void *, unsigned int, unsigned int);
  void (__cdecl *successCallback)(ControllerIndex_t, unsigned __int64);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3914 */
struct dwFileShareTagTask
{
  fileShareLocation location;
  bdTag *tags;
  unsigned int numTags;
  unsigned __int64 entityID;
};

/* 3915 */
struct dwFileShareTransferTask
{
  unsigned __int64 fileID;
  fileShareLocation location;
  unsigned __int16 fileSlot;
  char *fileName;
  unsigned __int16 category;
  char metaData[255];
  unsigned int metaDataSize;
  unsigned int numTags;
  bdTag *tags;
  bdFileID outFileID;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3916 */
struct dwFileShareRemoveTask
{
  unsigned int fileSlot;
  void (__cdecl *successCallback)(ControllerIndex_t, int);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3917 */
struct dwFileShareSummaryTask
{
  unsigned __int64 fileID;
  char *summaryData;
  unsigned int summaryDataSize;
  const void *metaData;
  unsigned int metaDataSize;
  unsigned int numTags;
  bdTag *tags;
  fileShareLocation location;
  bool showSuccess;
  void (__cdecl *successCallback)(ControllerIndex_t, unsigned __int64);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3918 */
struct __declspec(align(8)) dwFileShareGetTopRatedTask
{
  unsigned __int64 startRank;
  int maxFiles;
  unsigned int leaderboardID;
  bdVoteRankStatsInfo statsInfo[10];
  int *outNumFiles;
  int *outTotalNumFiles;
  bdFileID *outFileIDs;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3919 */
struct playerFileOperations
{
  dwFileOperationInfo statsBackupFileInfo;
  dwFileOperationInfo readDWEmailFileInfo;
  dwFileOperationInfo saveDWEmailFileInfo;
  dwFileOperationInfo codtvMenuFileInfo;
  dwFileOperationInfo clanMOTDInfo;
  dwFileOperationInfo corruptedStatsBackupFileInfo;
  dwFileOperationInfo fetchMetPlayerListFileInfo;
  dwFileOperationInfo saveMetPlayerListFileInfo;
  dwFileOperationInfo getOtherPlayerStatsFileInfo;
  dwFileOperationInfo getPlayerStatsFileInfo;
  dwFileOperationInfo saveStatsFileInfo;
  dwFileOperationInfo contractsFileInfo;
  dwFileOperationInfo demoFileInfo;
  dwFileOperationInfo whitelistFileInfo;
  dwKeyArchiveReadTask keyArchiveReadTask;
  dwKeyArchiveWriteTask keyArchiveWriteTask;
  dwFileOperationInfo getClassSetsFileInfo;
  dwFileOperationInfo saveClassSetsFileInfo;
  dwFileShareListTask fileShareListTask;
  dwFileShareSearchTask fileShareSearchTask;
  dwFileShareDescriptorsTask fileShareDescriptorsTask;
  dwFileShareReadFileTask fileShareReadFileTask;
  dwFileShareWriteFileTask fileShareWriteFileTask;
  dwFileShareTagTask fileShareTagTask;
  dwFileShareTransferTask fileShareTransferTask;
  dwFileShareRemoveTask fileShareRemoveTask;
  dwFileShareSummaryTask fileShareSummaryTask;
  dwFileShareGetTopRatedTask fileShareGetTopRatedTask;
};

/* 3920 */
struct playerNetworkData
{
  persistentStats playerStats;
  persistentStats playerStatsBackup;
  persistentStats stableStatsBuffer;
  classSets_t classSets;
  bool fileShareFetched;
  playerFileOperations *fileOps;
  char DWEmailAddress[200];
};

/* 3921 */
struct __declspec(align(8)) dwFileList
{
  unsigned __int64 ownerID;
  unsigned int startDate;
  bdFileInfo fileListInfo[50];
  unsigned int maxNumResults;
  unsigned int offset;
  const char *fileName;
};

/* 3922 */
struct userFileList
{
  bool isListAvailable;
  bool hasBeenfetch;
  dwFileList fileList;
};

/* 3923 */
struct __cppobj fileShareDownloadInterceptor : bdDownloadInterceptor
{
  dwFileShareReadFileTask *task;
  unsigned int (__cdecl *callback)(void *, unsigned int, dwFileShareReadFileTask *);
};

/* 3924 */
struct fileShareSearchInfo_t
{
  bdTag *tags;
  int numTags;
  fileShareLocation location;
  int startIndex;
  int maxFileIDs;
  bdFileID *outFileIDs;
  int *outFileCount;
  bdVoteRankStatsInfo *outRatings;
  int *outRatingCount;
  int *outTotalFileCount;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3925 */
struct __declspec(align(8)) fileshareListingInfo_t
{
  unsigned __int64 xuids[100];
  int numXuids;
  int category;
  unsigned __int16 offset;
  bdFileMetaData *descriptors;
  int *numDescriptors;
  int *totalDescriptors;
  int maxDescriptors;
  bool isUserFile;
  const char *fileName;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 3926 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_35
{
  const void *pVFTable;
  void *spare;
  char name[35];
};

/* 3927 */
struct uJson
{
  const char *data;
};

/* 3928 */
struct __cppobj uJson::array_iter : uJson
{
};

/* 3929 */
struct uJson::object_iter
{
  uJson first;
  uJson second;
};

/* 3930 */
struct ConversionArguments
{
  int argCount;
  const char *args[9];
};

/* 3931 */
struct __cppobj fileShareUploadInterceptor : bdUploadInterceptor
{
  dwFileShareWriteFileTask *task;
  unsigned int (__cdecl *callback)(void *, unsigned int, unsigned int, dwFileShareWriteFileTask *);
};

/* 3932 */
struct CCallbackBase
{
  CCallbackBaseVtbl *vfptr;
  char m_nCallbackFlags;
  int m_iCallback;
};

/* 3933 */
struct CCallbackBaseVtbl
{
  void (__thiscall *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
  void (__thiscall *Run)(CCallbackBase *this, void *);
  int (__thiscall *GetCallbackSizeBytes)(CCallbackBase *this);
};

/* 3936 */
struct __cppobj CCallback<LiveSteamServer,SteamServersConnected_t,1> : CCallbackBase
{
  LiveSteamServer *m_pObj;
  void (__thiscall *m_Func)(LiveSteamServer *this, SteamServersConnected_t *);
};

/* 3938 */
struct __cppobj CCallback<LiveSteamServer,SteamServerConnectFailure_t,1> : CCallbackBase
{
  LiveSteamServer *m_pObj;
  void (__thiscall *m_Func)(LiveSteamServer *this, SteamServerConnectFailure_t *);
};

/* 3940 */
struct __cppobj CCallback<LiveSteamServer,SteamServersDisconnected_t,1> : CCallbackBase
{
  LiveSteamServer *m_pObj;
  void (__thiscall *m_Func)(LiveSteamServer *this, SteamServersDisconnected_t *);
};

/* 3942 */
struct __cppobj CCallback<LiveSteamServer,GSPolicyResponse_t,1> : CCallbackBase
{
  LiveSteamServer *m_pObj;
  void (__thiscall *m_Func)(LiveSteamServer *this, GSPolicyResponse_t *);
};

/* 3947 */
struct __cppobj CCallback<LiveSteamServer,GSClientApprove_t,1> : CCallbackBase
{
  LiveSteamServer *m_pObj;
  void (__thiscall *m_Func)(LiveSteamServer *this, GSClientApprove_t *);
};

/* 3949 */
struct __cppobj CCallback<LiveSteamServer,GSClientDeny_t,1> : CCallbackBase
{
  LiveSteamServer *m_pObj;
  void (__thiscall *m_Func)(LiveSteamServer *this, GSClientDeny_t *);
};

/* 3951 */
struct __cppobj CCallback<LiveSteamServer,GSClientKick_t,1> : CCallbackBase
{
  LiveSteamServer *m_pObj;
  void (__thiscall *m_Func)(LiveSteamServer *this, GSClientKick_t *);
};

/* 3934 */
struct LiveSteamServer
{
  unsigned int currentMapDlcAppID;
  unsigned int serverIP;
  unsigned int lastRunChecksTime;
  SteamServerState state;
  CCallback<LiveSteamServer,SteamServersConnected_t,1> m_CallbackSteamServersConnected;
  CCallback<LiveSteamServer,SteamServerConnectFailure_t,1> m_CallbackSteamServerConnectFailure;
  CCallback<LiveSteamServer,SteamServersDisconnected_t,1> m_CallbackSteamServersDisconnected;
  CCallback<LiveSteamServer,GSPolicyResponse_t,1> m_CallbackPolicyResponse;
  CCallback<LiveSteamServer,GSClientApprove_t,1> m_CallbackGSClientApprove;
  CCallback<LiveSteamServer,GSClientDeny_t,1> m_CallbackGSClientDeny;
  CCallback<LiveSteamServer,GSClientKick_t,1> m_CallbackGSClientKick;
};

/* 3935 */
struct __cppobj SteamServersConnected_t
{
};

/* 3937 */
struct SteamServerConnectFailure_t
{
  EResult m_eResult;
};

/* 3939 */
struct SteamServersDisconnected_t
{
  EResult m_eResult;
};

/* 3941 */
struct GSPolicyResponse_t
{
  char m_bSecure;
};

/* 3943 */
struct CSteamID::SteamID_t::SteamIDComponent_t
{
  unsigned __int32 m_unAccountID : 32;
  unsigned __int32 m_unAccountInstance : 20;
  unsigned __int32 m_EAccountType : 4;
  __int32 m_EUniverse : 8;
};

/* 3944 */
union CSteamID::SteamID_t
{
  CSteamID::SteamID_t::SteamIDComponent_t m_comp;
  unsigned __int64 m_unAll64Bits;
};

/* 3945 */
struct CSteamID
{
  CSteamID::SteamID_t m_steamid;
};

/* 3946 */
struct GSClientApprove_t
{
  CSteamID m_SteamID;
};

/* 3948 */
struct __unaligned __declspec(align(4)) GSClientDeny_t
{
  CSteamID m_SteamID;
  EDenyReason m_eDenyReason;
  char m_rgchOptionalText[128];
};

/* 3950 */
struct __unaligned __declspec(align(4)) GSClientKick_t
{
  CSteamID m_SteamID;
  EDenyReason m_eDenyReason;
};

/* 3952 */
struct _FLOATING_SAVE_AREA
{
  unsigned int ControlWord;
  unsigned int StatusWord;
  unsigned int TagWord;
  unsigned int ErrorOffset;
  unsigned int ErrorSelector;
  unsigned int DataOffset;
  unsigned int DataSelector;
  char RegisterArea[80];
  unsigned int Cr0NpxState;
};

/* 3953 */
struct _EXCEPTION_RECORD
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInformation[15];
};

/* 3954 */
struct _CONTEXT
{
  unsigned int ContextFlags;
  unsigned int Dr0;
  unsigned int Dr1;
  unsigned int Dr2;
  unsigned int Dr3;
  unsigned int Dr6;
  unsigned int Dr7;
  _FLOATING_SAVE_AREA FloatSave;
  unsigned int SegGs;
  unsigned int SegFs;
  unsigned int SegEs;
  unsigned int SegDs;
  unsigned int Edi;
  unsigned int Esi;
  unsigned int Ebx;
  unsigned int Edx;
  unsigned int Ecx;
  unsigned int Eax;
  unsigned int Ebp;
  unsigned int Eip;
  unsigned int SegCs;
  unsigned int EFlags;
  unsigned int Esp;
  unsigned int SegSs;
  char ExtendedRegisters[512];
};

/* 3955 */
struct _EXCEPTION_POINTERS
{
  _EXCEPTION_RECORD *ExceptionRecord;
  _CONTEXT *ContextRecord;
};

/* 3956 */
struct CGameID::GameID_t
{
  unsigned __int32 m_nAppID : 24;
  unsigned __int32 m_nType : 8;
  unsigned __int32 m_nModID : 32;
};

/* 3957 */
union $D3AD3F7E118C26669253C88721CE0723
{
  unsigned __int64 m_ulGameID;
  CGameID::GameID_t m_gameID;
};

/* 3958 */
struct CGameID
{
  $D3AD3F7E118C26669253C88721CE0723 ___u0;
};

/* 3959 */
struct FriendGameInfo_t
{
  CGameID m_gameID;
  unsigned int m_unGameIP;
  unsigned __int16 m_usGamePort;
  unsigned __int16 m_usQueryPort;
  CSteamID m_steamIDLobby;
};

/* 3960 */
struct ISteamGameServer
{
  ISteamGameServerVtbl *vfptr;
};

/* 3961 */
struct ISteamGameServerVtbl
{
  bool (__thiscall *InitGameServer)(ISteamGameServer *this, unsigned int, unsigned __int16, unsigned __int16, unsigned int, unsigned int, const char *);
  _BYTE gap4[20];
  void (__thiscall *LogOnAnonymous)(ISteamGameServer *this);
  void (__thiscall *LogOff)(ISteamGameServer *this);
  bool (__thiscall *BLoggedOn)(ISteamGameServer *this);
  bool (__thiscall *BSecure)(ISteamGameServer *this);
  CSteamID *(__thiscall *GetSteamID)(ISteamGameServer *this, CSteamID *result);
  bool (__thiscall *WasRestartRequested)(ISteamGameServer *this);
  void (__thiscall *SetMaxPlayerCount)(ISteamGameServer *this, int);
  void (__thiscall *SetBotPlayerCount)(ISteamGameServer *this, int);
  void (__thiscall *SetServerName)(ISteamGameServer *this, const char *);
  void (__thiscall *SetMapName)(ISteamGameServer *this, const char *);
  void (__thiscall *SetPasswordProtected)(ISteamGameServer *this, bool);
  void (__thiscall *SetSpectatorPort)(ISteamGameServer *this, unsigned __int16);
  void (__thiscall *SetSpectatorServerName)(ISteamGameServer *this, const char *);
  void (__thiscall *ClearAllKeyValues)(ISteamGameServer *this);
  void (__thiscall *SetKeyValue)(ISteamGameServer *this, const char *, const char *);
  void (__thiscall *SetGameTags)(ISteamGameServer *this, const char *);
  void (__thiscall *SetGameData)(ISteamGameServer *this, const char *);
  void (__thiscall *SetRegion)(ISteamGameServer *this, const char *);
  bool (__thiscall *SendUserConnectAndAuthenticate)(ISteamGameServer *this, unsigned int, const void *, unsigned int, CSteamID *);
  CSteamID *(__thiscall *CreateUnauthenticatedUserConnection)(ISteamGameServer *this, CSteamID *result);
  void (__thiscall *SendUserDisconnect)(ISteamGameServer *this, CSteamID);
  bool (__thiscall *BUpdateUserData)(ISteamGameServer *this, CSteamID, const char *, unsigned int);
  unsigned int (__thiscall *GetAuthSessionTicket)(ISteamGameServer *this, void *, int, unsigned int *);
  EBeginAuthSessionResult (__thiscall *BeginAuthSession)(ISteamGameServer *this, const void *, int, CSteamID);
  void (__thiscall *EndAuthSession)(ISteamGameServer *this, CSteamID);
  void (__thiscall *CancelAuthTicket)(ISteamGameServer *this, unsigned int);
  EUserHasLicenseForAppResult (__thiscall *UserHasLicenseForApp)(ISteamGameServer *this, CSteamID, unsigned int);
  bool (__thiscall *RequestUserGroupStatus)(ISteamGameServer *this, CSteamID, CSteamID);
  void (__thiscall *GetGameplayStats)(ISteamGameServer *this);
  unsigned __int64 (__thiscall *GetServerReputation)(ISteamGameServer *this);
  unsigned int (__thiscall *GetPublicIP)(ISteamGameServer *this);
  bool (__thiscall *HandleIncomingPacket)(ISteamGameServer *this, const void *, int, unsigned int, unsigned __int16);
  int (__thiscall *GetNextOutgoingPacket)(ISteamGameServer *this, void *, int, unsigned int *, unsigned __int16 *);
  void (__thiscall *EnableHeartbeats)(ISteamGameServer *this, bool);
  void (__thiscall *SetHeartbeatInterval)(ISteamGameServer *this, int);
  void (__thiscall *ForceHeartbeat)(ISteamGameServer *this);
  unsigned __int64 (__thiscall *AssociateWithClan)(ISteamGameServer *this, CSteamID);
  unsigned __int64 (__thiscall *ComputeNewPlayerCompatibility)(ISteamGameServer *this, CSteamID);
};

/* 3962 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_69
{
  const void *pVFTable;
  void *spare;
  char name[69];
};

/* 3963 */
struct MatchMakingKeyValuePair_t
{
  char m_szKey[256];
  char m_szValue[256];
};

/* 3964 */
struct $_TypeDescriptor$_extraBytes_60
{
  const void *pVFTable;
  void *spare;
  char name[60];
};

/* 3965 */
struct servernetadr_t
{
  unsigned __int16 m_usConnectionPort;
  unsigned __int16 m_usQueryPort;
  unsigned int m_unIP;
};

/* 3966 */
struct ISteamFriends
{
  ISteamFriendsVtbl *vfptr;
};

/* 3967 */
struct ISteamFriendsVtbl
{
  const char *(__thiscall *GetPersonaName)(ISteamFriends *this);
  _BYTE gap4[28];
  bool (__thiscall *GetFriendGamePlayed)(ISteamFriends *this, CSteamID, FriendGameInfo_t *);
  const char *(__thiscall *GetFriendPersonaNameHistory)(ISteamFriends *this, CSteamID, int);
  bool (__thiscall *HasFriend)(ISteamFriends *this, CSteamID, int);
  int (__thiscall *GetClanCount)(ISteamFriends *this);
  CSteamID *(__thiscall *GetClanByIndex)(ISteamFriends *this, CSteamID *result, int);
  const char *(__thiscall *GetClanName)(ISteamFriends *this, CSteamID);
  const char *(__thiscall *GetClanTag)(ISteamFriends *this, CSteamID);
  bool (__thiscall *GetClanActivityCounts)(ISteamFriends *this, CSteamID, int *, int *, int *);
  unsigned __int64 (__thiscall *DownloadClanActivityCounts)(ISteamFriends *this, CSteamID *, int);
  int (__thiscall *GetFriendCountFromSource)(ISteamFriends *this, CSteamID);
  CSteamID *(__thiscall *GetFriendFromSourceByIndex)(ISteamFriends *this, CSteamID *result, CSteamID, int);
  bool (__thiscall *IsUserInSource)(ISteamFriends *this, CSteamID, CSteamID);
  void (__thiscall *SetInGameVoiceSpeaking)(ISteamFriends *this, CSteamID, bool);
  void (__thiscall *ActivateGameOverlay)(ISteamFriends *this, const char *);
  void (__thiscall *ActivateGameOverlayToUser)(ISteamFriends *this, const char *, CSteamID);
  void (__thiscall *ActivateGameOverlayToWebPage)(ISteamFriends *this, const char *);
  void (__thiscall *ActivateGameOverlayToStore)(ISteamFriends *this, unsigned int, EOverlayToStoreFlag);
  void (__thiscall *SetPlayedWith)(ISteamFriends *this, CSteamID);
  void (__thiscall *ActivateGameOverlayInviteDialog)(ISteamFriends *this, CSteamID);
  int (__thiscall *GetSmallFriendAvatar)(ISteamFriends *this, CSteamID);
  int (__thiscall *GetMediumFriendAvatar)(ISteamFriends *this, CSteamID);
  int (__thiscall *GetLargeFriendAvatar)(ISteamFriends *this, CSteamID);
  bool (__thiscall *RequestUserInformation)(ISteamFriends *this, CSteamID, bool);
  unsigned __int64 (__thiscall *RequestClanOfficerList)(ISteamFriends *this, CSteamID);
  CSteamID *(__thiscall *GetClanOwner)(ISteamFriends *this, CSteamID *result, CSteamID);
  int (__thiscall *GetClanOfficerCount)(ISteamFriends *this, CSteamID);
  CSteamID *(__thiscall *GetClanOfficerByIndex)(ISteamFriends *this, CSteamID *result, CSteamID, int);
  unsigned int (__thiscall *GetUserRestrictions)(ISteamFriends *this);
  bool (__thiscall *SetRichPresence)(ISteamFriends *this, const char *, const char *);
  void (__thiscall *ClearRichPresence)(ISteamFriends *this);
  const char *(__thiscall *GetFriendRichPresence)(ISteamFriends *this, CSteamID, const char *);
  int (__thiscall *GetFriendRichPresenceKeyCount)(ISteamFriends *this, CSteamID);
  const char *(__thiscall *GetFriendRichPresenceKeyByIndex)(ISteamFriends *this, CSteamID, int);
  void (__thiscall *RequestFriendRichPresence)(ISteamFriends *this, CSteamID);
  bool (__thiscall *InviteUserToGame)(ISteamFriends *this, CSteamID, const char *);
  int (__thiscall *GetCoplayFriendCount)(ISteamFriends *this);
  CSteamID *(__thiscall *GetCoplayFriend)(ISteamFriends *this, CSteamID *result, int);
  int (__thiscall *GetFriendCoplayTime)(ISteamFriends *this, CSteamID);
  unsigned int (__thiscall *GetFriendCoplayGame)(ISteamFriends *this, CSteamID);
  unsigned __int64 (__thiscall *JoinClanChatRoom)(ISteamFriends *this, CSteamID);
  bool (__thiscall *LeaveClanChatRoom)(ISteamFriends *this, CSteamID);
  int (__thiscall *GetClanChatMemberCount)(ISteamFriends *this, CSteamID);
  CSteamID *(__thiscall *GetChatMemberByIndex)(ISteamFriends *this, CSteamID *result, CSteamID, int);
  bool (__thiscall *SendClanChatMessage)(ISteamFriends *this, CSteamID, const char *);
  int (__thiscall *GetClanChatMessage)(ISteamFriends *this, CSteamID, int, void *, int, EChatEntryType *, CSteamID *);
  bool (__thiscall *IsClanChatAdmin)(ISteamFriends *this, CSteamID, CSteamID);
  bool (__thiscall *IsClanChatWindowOpenInSteam)(ISteamFriends *this, CSteamID);
  bool (__thiscall *OpenClanChatWindowInSteam)(ISteamFriends *this, CSteamID);
  bool (__thiscall *CloseClanChatWindowInSteam)(ISteamFriends *this, CSteamID);
  bool (__thiscall *SetListenForFriendsMessages)(ISteamFriends *this, bool);
  bool (__thiscall *ReplyToFriendMessage)(ISteamFriends *this, CSteamID, const char *);
  int (__thiscall *GetFriendMessage)(ISteamFriends *this, CSteamID, int, void *, int, EChatEntryType *);
  unsigned __int64 (__thiscall *GetFollowerCount)(ISteamFriends *this, CSteamID);
  unsigned __int64 (__thiscall *IsFollowing)(ISteamFriends *this, CSteamID);
  unsigned __int64 (__thiscall *EnumerateFollowingList)(ISteamFriends *this, unsigned int);
};

/* 3968 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_57
{
  const void *pVFTable;
  void *spare;
  char name[57];
};

/* 3969 */
struct __unaligned __declspec(align(4)) gameserveritem_t
{
  servernetadr_t m_NetAdr;
  int m_nPing;
  bool m_bHadSuccessfulResponse;
  bool m_bDoNotRefresh;
  char m_szGameDir[32];
  char m_szMap[32];
  char m_szGameDescription[64];
  __declspec(align(4)) unsigned int m_nAppID;
  int m_nPlayers;
  int m_nMaxPlayers;
  int m_nBotPlayers;
  bool m_bPassword;
  bool m_bSecure;
  __declspec(align(4)) unsigned int m_ulTimeLastPlayed;
  int m_nServerVersion;
  char m_szServerName[64];
  char m_szGameTags[128];
  CSteamID m_steamID;
};

/* 3970 */
struct ISteamUser
{
  ISteamUserVtbl *vfptr;
};

/* 3971 */
struct ISteamUserVtbl
{
  int (__thiscall *GetHSteamUser)(ISteamUser *this);
  _BYTE gap4[8];
  int (__thiscall *InitiateGameConnection)(ISteamUser *this, void *, int, CSteamID, unsigned int, unsigned __int16, bool);
  void (__thiscall *TerminateGameConnection)(ISteamUser *this, unsigned int, unsigned __int16);
  void (__thiscall *TrackAppUsageEvent)(ISteamUser *this, CGameID, int, const char *);
  bool (__thiscall *GetUserDataFolder)(ISteamUser *this, char *, int);
  void (__thiscall *StartVoiceRecording)(ISteamUser *this);
  void (__thiscall *StopVoiceRecording)(ISteamUser *this);
  EVoiceResult (__thiscall *GetAvailableVoice)(ISteamUser *this, unsigned int *, unsigned int *, unsigned int);
  EVoiceResult (__thiscall *GetVoice)(ISteamUser *this, bool, void *, unsigned int, unsigned int *, bool, void *, unsigned int, unsigned int *, unsigned int);
  EVoiceResult (__thiscall *DecompressVoice)(ISteamUser *this, const void *, unsigned int, void *, unsigned int, unsigned int *, unsigned int);
  unsigned int (__thiscall *GetVoiceOptimalSampleRate)(ISteamUser *this);
  unsigned int (__thiscall *GetAuthSessionTicket)(ISteamUser *this, void *, int, unsigned int *);
  EBeginAuthSessionResult (__thiscall *BeginAuthSession)(ISteamUser *this, const void *, int, CSteamID);
  void (__thiscall *EndAuthSession)(ISteamUser *this, CSteamID);
  void (__thiscall *CancelAuthTicket)(ISteamUser *this, unsigned int);
  EUserHasLicenseForAppResult (__thiscall *UserHasLicenseForApp)(ISteamUser *this, CSteamID, unsigned int);
  bool (__thiscall *BIsBehindNAT)(ISteamUser *this);
  void (__thiscall *AdvertiseGame)(ISteamUser *this, CSteamID, unsigned int, unsigned __int16);
  unsigned __int64 (__thiscall *RequestEncryptedAppTicket)(ISteamUser *this, void *, int);
  bool (__thiscall *GetEncryptedAppTicket)(ISteamUser *this, void *, int, unsigned int *);
};

/* 3972 */
struct __declspec(align(8)) PersonaStateChange_t
{
  unsigned __int64 m_ulSteamID;
  int m_nChangeFlags;
};

/* 3975 */
struct __cppobj CCallResult<LiveSteamClient,EncryptedAppTicketResponse_t> : CCallbackBase
{
  unsigned __int64 m_hAPICall;
  LiveSteamClient *m_pObj;
  void (__thiscall *m_Func)(LiveSteamClient *this, EncryptedAppTicketResponse_t *, bool);
};

/* 3977 */
struct __cppobj CCallback<LiveSteamClient,GameOverlayActivated_t,0> : CCallbackBase
{
  LiveSteamClient *m_pObj;
  void (__thiscall *m_Func)(LiveSteamClient *this, GameOverlayActivated_t *);
};

/* 3979 */
struct __cppobj CCallback<LiveSteamClient,DlcInstalled_t,0> : CCallbackBase
{
  LiveSteamClient *m_pObj;
  void (__thiscall *m_Func)(LiveSteamClient *this, DlcInstalled_t *);
};

/* 3980 */
struct __cppobj CCallback<LiveSteamClient,PersonaStateChange_t,0> : CCallbackBase
{
  LiveSteamClient *m_pObj;
  void (__thiscall *m_Func)(LiveSteamClient *this, PersonaStateChange_t *);
};

/* 3982 */
struct __cppobj CCallback<LiveSteamClient,GameRichPresenceJoinRequested_t,0> : CCallbackBase
{
  LiveSteamClient *m_pObj;
  void (__thiscall *m_Func)(LiveSteamClient *this, GameRichPresenceJoinRequested_t *);
};

/* 3973 */
struct LiveSteamClient
{
  EResult resultOnRequestEncryptedAppTicket;
  int ticketTime;
  int numFriendsNotifications;
  CCallResult<LiveSteamClient,EncryptedAppTicketResponse_t> m_SteamCallResultEncryptedAppTicket;
  CCallback<LiveSteamClient,GameOverlayActivated_t,0> m_CallbackOverlayActivated;
  CCallback<LiveSteamClient,DlcInstalled_t,0> m_CallbackDLCInstalled;
  CCallback<LiveSteamClient,PersonaStateChange_t,0> m_CallbackSteamFreindsStatusChange;
  CCallback<LiveSteamClient,GameRichPresenceJoinRequested_t,0> m_CallbackRichPresenceJoinRequested;
};

/* 3974 */
struct EncryptedAppTicketResponse_t
{
  EResult m_eResult;
};

/* 3976 */
struct GameOverlayActivated_t
{
  char m_bActive;
};

/* 3978 */
struct DlcInstalled_t
{
  unsigned int m_nAppID;
};

/* 3981 */
struct GameRichPresenceJoinRequested_t
{
  CSteamID m_steamIDFriend;
  char m_rgchConnect[256];
};

/* 3983 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_75
{
  const void *pVFTable;
  void *spare;
  char name[75];
};

/* 3984 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_70
{
  const void *pVFTable;
  void *spare;
  char name[70];
};

/* 3985 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_58
{
  const void *pVFTable;
  void *spare;
  char name[58];
};

/* 3986 */
struct $_TypeDescriptor$_extraBytes_64
{
  const void *pVFTable;
  void *spare;
  char name[64];
};

/* 3987 */
struct Achievement_t
{
  int m_eAchievementID;
  const char *m_pchAchievementID;
  char m_rgchName[128];
  char m_rgchDescription[256];
  bool m_bAchieved;
  int m_iIconImage;
};

/* 3990 */
struct __cppobj CCallback<CSteamAchievements,UserStatsReceived_t,0> : CCallbackBase
{
  CSteamAchievements *m_pObj;
  void (__thiscall *m_Func)(CSteamAchievements *this, UserStatsReceived_t *);
};

/* 3992 */
struct __cppobj CCallback<CSteamAchievements,UserStatsStored_t,0> : CCallbackBase
{
  CSteamAchievements *m_pObj;
  void (__thiscall *m_Func)(CSteamAchievements *this, UserStatsStored_t *);
};

/* 3994 */
struct __cppobj CCallback<CSteamAchievements,UserAchievementStored_t,0> : CCallbackBase
{
  CSteamAchievements *m_pObj;
  void (__thiscall *m_Func)(CSteamAchievements *this, UserAchievementStored_t *);
};

/* 3988 */
struct CSteamAchievements
{
  bool m_needStatsStored;
  unsigned __int64 m_iAppID;
  Achievement_t *m_pAchievements;
  int m_iNumAchievements;
  bool m_bInitialized;
  CCallback<CSteamAchievements,UserStatsReceived_t,0> m_CallbackUserStatsReceived;
  CCallback<CSteamAchievements,UserStatsStored_t,0> m_CallbackUserStatsStored;
  CCallback<CSteamAchievements,UserAchievementStored_t,0> m_CallbackAchievementStored;
};

/* 3989 */
struct __declspec(align(8)) UserStatsReceived_t
{
  unsigned __int64 m_nGameID;
  EResult m_eResult;
  __unaligned __declspec(align(1)) CSteamID m_steamIDUser;
};

/* 3991 */
struct __declspec(align(8)) UserStatsStored_t
{
  unsigned __int64 m_nGameID;
  EResult m_eResult;
};

/* 3993 */
struct __declspec(align(8)) UserAchievementStored_t
{
  unsigned __int64 m_nGameID;
  bool m_bGroupAchievement;
  char m_rgchAchievementName[128];
  unsigned int m_nCurProgress;
  unsigned int m_nMaxProgress;
};

/* 3995 */
struct ISteamUtils
{
  ISteamUtilsVtbl *vfptr;
};

/* 3996 */
struct ISteamUtilsVtbl
{
  unsigned int (__thiscall *GetSecondsSinceAppActive)(ISteamUtils *this);
  _BYTE gap4[8];
  unsigned int (__thiscall *GetServerRealTime)(ISteamUtils *this);
  const char *(__thiscall *GetIPCountry)(ISteamUtils *this);
  bool (__thiscall *GetImageSize)(ISteamUtils *this, int, unsigned int *, unsigned int *);
  bool (__thiscall *GetImageRGBA)(ISteamUtils *this, int, char *, int);
  bool (__thiscall *GetCSERIPPort)(ISteamUtils *this, unsigned int *, unsigned __int16 *);
  char (__thiscall *GetCurrentBatteryPower)(ISteamUtils *this);
  unsigned int (__thiscall *GetAppID)(ISteamUtils *this);
  void (__thiscall *SetOverlayNotificationPosition)(ISteamUtils *this, ENotificationPosition);
  bool (__thiscall *IsAPICallCompleted)(ISteamUtils *this, unsigned __int64, bool *);
  ESteamAPICallFailure (__thiscall *GetAPICallFailureReason)(ISteamUtils *this, unsigned __int64);
  bool (__thiscall *GetAPICallResult)(ISteamUtils *this, unsigned __int64, void *, int, int, bool *);
  void (__thiscall *RunFrame)(ISteamUtils *this);
  unsigned int (__thiscall *GetIPCCallCount)(ISteamUtils *this);
  void (__thiscall *SetWarningMessageHook)(ISteamUtils *this, void (__cdecl *)(int, const char *));
  bool (__thiscall *IsOverlayEnabled)(ISteamUtils *this);
  bool (__thiscall *BOverlayNeedsPresent)(ISteamUtils *this);
  unsigned __int64 (__thiscall *CheckFileSignature)(ISteamUtils *this, const char *);
};

/* 3997 */
struct LeaderboardEntry_t
{
  CSteamID m_steamIDUser;
  int m_nGlobalRank;
  int m_nScore;
  int m_cDetails;
  unsigned __int64 m_hUGC;
};

/* 3998 */
struct ISteamUserStats
{
  ISteamUserStatsVtbl *vfptr;
};

/* 3999 */
struct ISteamUserStatsVtbl
{
  bool (__thiscall *RequestCurrentStats)(ISteamUserStats *this);
  _BYTE gap4[20];
  bool (__thiscall *GetAchievement)(ISteamUserStats *this, const char *, bool *);
  bool (__thiscall *SetAchievement)(ISteamUserStats *this, const char *);
  bool (__thiscall *ClearAchievement)(ISteamUserStats *this, const char *);
  bool (__thiscall *GetAchievementAndUnlockTime)(ISteamUserStats *this, const char *, bool *, unsigned int *);
  bool (__thiscall *StoreStats)(ISteamUserStats *this);
  int (__thiscall *GetAchievementIcon)(ISteamUserStats *this, const char *);
  const char *(__thiscall *GetAchievementDisplayAttribute)(ISteamUserStats *this, const char *, const char *);
  bool (__thiscall *IndicateAchievementProgress)(ISteamUserStats *this, const char *, unsigned int, unsigned int);
  unsigned int (__thiscall *GetNumAchievements)(ISteamUserStats *this);
  const char *(__thiscall *GetAchievementName)(ISteamUserStats *this, unsigned int);
  unsigned __int64 (__thiscall *RequestUserStats)(ISteamUserStats *this, CSteamID);
  bool (__thiscall *GetUserStat)(ISteamUserStats *this, CSteamID, const char *, float *);
  bool (__thiscall *GetUserStat)(ISteamUserStats *this, CSteamID, const char *, int *);
  bool (__thiscall *GetUserAchievement)(ISteamUserStats *this, CSteamID, const char *, bool *);
  bool (__thiscall *GetUserAchievementAndUnlockTime)(ISteamUserStats *this, CSteamID, const char *, bool *, unsigned int *);
  bool (__thiscall *ResetAllStats)(ISteamUserStats *this, bool);
  unsigned __int64 (__thiscall *FindOrCreateLeaderboard)(ISteamUserStats *this, const char *, ELeaderboardSortMethod, ELeaderboardDisplayType);
  unsigned __int64 (__thiscall *FindLeaderboard)(ISteamUserStats *this, const char *);
  const char *(__thiscall *GetLeaderboardName)(ISteamUserStats *this, unsigned __int64);
  int (__thiscall *GetLeaderboardEntryCount)(ISteamUserStats *this, unsigned __int64);
  ELeaderboardSortMethod (__thiscall *GetLeaderboardSortMethod)(ISteamUserStats *this, unsigned __int64);
  ELeaderboardDisplayType (__thiscall *GetLeaderboardDisplayType)(ISteamUserStats *this, unsigned __int64);
  unsigned __int64 (__thiscall *DownloadLeaderboardEntries)(ISteamUserStats *this, unsigned __int64, ELeaderboardDataRequest, int, int);
  unsigned __int64 (__thiscall *DownloadLeaderboardEntriesForUsers)(ISteamUserStats *this, unsigned __int64, CSteamID *, int);
  bool (__thiscall *GetDownloadedLeaderboardEntry)(ISteamUserStats *this, unsigned __int64, int, LeaderboardEntry_t *, int *, int);
  unsigned __int64 (__thiscall *UploadLeaderboardScore)(ISteamUserStats *this, unsigned __int64, ELeaderboardUploadScoreMethod, int, const int *, int);
  unsigned __int64 (__thiscall *AttachLeaderboardUGC)(ISteamUserStats *this, unsigned __int64, unsigned __int64);
  unsigned __int64 (__thiscall *GetNumberOfCurrentPlayers)(ISteamUserStats *this);
  unsigned __int64 (__thiscall *RequestGlobalAchievementPercentages)(ISteamUserStats *this);
  int (__thiscall *GetMostAchievedAchievementInfo)(ISteamUserStats *this, char *, unsigned int, float *, bool *);
  int (__thiscall *GetNextMostAchievedAchievementInfo)(ISteamUserStats *this, int, char *, unsigned int, float *, bool *);
  bool (__thiscall *GetAchievementAchievedPercent)(ISteamUserStats *this, const char *, float *);
  unsigned __int64 (__thiscall *RequestGlobalStats)(ISteamUserStats *this, int);
  bool (__thiscall *GetGlobalStat)(ISteamUserStats *this, const char *, long double *);
  bool (__thiscall *GetGlobalStat)(ISteamUserStats *this, const char *, __int64 *);
  int (__thiscall *GetGlobalStatHistory)(ISteamUserStats *this, const char *, long double *, unsigned int);
  int (__thiscall *GetGlobalStatHistory)(ISteamUserStats *this, const char *, __int64 *, unsigned int);
};

/* 4000 */
struct __declspec(align(4)) P2PSessionState_t
{
  char m_bConnectionActive;
  char m_bConnecting;
  char m_eP2PSessionError;
  char m_bUsingRelay;
  int m_nBytesQueuedForSend;
  int m_nPacketsQueuedForSend;
  unsigned int m_nRemoteIP;
  unsigned __int16 m_nRemotePort;
};

/* 4001 */
struct SteamParamStringArray_t
{
  const char **m_ppStrings;
  int m_nNumStrings;
};

/* 4002 */
struct ISteamNetworking
{
  ISteamNetworkingVtbl *vfptr;
};

/* 4003 */
struct ISteamNetworkingVtbl
{
  bool (__thiscall *SendP2PPacket)(ISteamNetworking *this, CSteamID, const void *, unsigned int, EP2PSend, int);
  _BYTE gap4[8];
  bool (__thiscall *AcceptP2PSessionWithUser)(ISteamNetworking *this, CSteamID);
  bool (__thiscall *CloseP2PSessionWithUser)(ISteamNetworking *this, CSteamID);
  bool (__thiscall *CloseP2PChannelWithUser)(ISteamNetworking *this, CSteamID, int);
  bool (__thiscall *GetP2PSessionState)(ISteamNetworking *this, CSteamID, P2PSessionState_t *);
  bool (__thiscall *AllowP2PPacketRelay)(ISteamNetworking *this, bool);
  unsigned int (__thiscall *CreateListenSocket)(ISteamNetworking *this, int, unsigned int, unsigned __int16, bool);
  unsigned int (__thiscall *CreateP2PConnectionSocket)(ISteamNetworking *this, CSteamID, int, int, bool);
  unsigned int (__thiscall *CreateConnectionSocket)(ISteamNetworking *this, unsigned int, unsigned __int16, int);
  bool (__thiscall *DestroySocket)(ISteamNetworking *this, unsigned int, bool);
  bool (__thiscall *DestroyListenSocket)(ISteamNetworking *this, unsigned int, bool);
  bool (__thiscall *SendDataOnSocket)(ISteamNetworking *this, unsigned int, void *, unsigned int, bool);
  bool (__thiscall *IsDataAvailableOnSocket)(ISteamNetworking *this, unsigned int, unsigned int *);
  bool (__thiscall *RetrieveDataFromSocket)(ISteamNetworking *this, unsigned int, void *, unsigned int, unsigned int *);
  bool (__thiscall *IsDataAvailable)(ISteamNetworking *this, unsigned int, unsigned int *, unsigned int *);
  bool (__thiscall *RetrieveData)(ISteamNetworking *this, unsigned int, void *, unsigned int, unsigned int *, unsigned int *);
  bool (__thiscall *GetSocketInfo)(ISteamNetworking *this, unsigned int, CSteamID *, int *, unsigned int *, unsigned __int16 *);
  bool (__thiscall *GetListenSocketInfo)(ISteamNetworking *this, unsigned int, unsigned int *, unsigned __int16 *);
  ESNetSocketConnectionType (__thiscall *GetSocketConnectionType)(ISteamNetworking *this, unsigned int);
  int (__thiscall *GetMaxPacketSize)(ISteamNetworking *this, unsigned int);
};

/* 4004 */
struct ISteamRemoteStorage
{
  ISteamRemoteStorageVtbl *vfptr;
};

/* 4005 */
struct ISteamRemoteStorageVtbl
{
  bool (__thiscall *FileWrite)(ISteamRemoteStorage *this, const char *, const void *, int);
  _BYTE gap4[24];
  bool (__thiscall *FileWriteStreamWriteChunk)(ISteamRemoteStorage *this, unsigned __int64, const void *, int);
  bool (__thiscall *FileWriteStreamClose)(ISteamRemoteStorage *this, unsigned __int64);
  bool (__thiscall *FileWriteStreamCancel)(ISteamRemoteStorage *this, unsigned __int64);
  bool (__thiscall *FileExists)(ISteamRemoteStorage *this, const char *);
  bool (__thiscall *FilePersisted)(ISteamRemoteStorage *this, const char *);
  int (__thiscall *GetFileSize)(ISteamRemoteStorage *this, const char *);
  __int64 (__thiscall *GetFileTimestamp)(ISteamRemoteStorage *this, const char *);
  ERemoteStoragePlatform (__thiscall *GetSyncPlatforms)(ISteamRemoteStorage *this, const char *);
  int (__thiscall *GetFileCount)(ISteamRemoteStorage *this);
  const char *(__thiscall *GetFileNameAndSize)(ISteamRemoteStorage *this, int, int *);
  bool (__thiscall *GetQuota)(ISteamRemoteStorage *this, int *, int *);
  bool (__thiscall *IsCloudEnabledForAccount)(ISteamRemoteStorage *this);
  bool (__thiscall *IsCloudEnabledForApp)(ISteamRemoteStorage *this);
  void (__thiscall *SetCloudEnabledForApp)(ISteamRemoteStorage *this, bool);
  unsigned __int64 (__thiscall *UGCDownload)(ISteamRemoteStorage *this, unsigned __int64);
  bool (__thiscall *GetUGCDownloadProgress)(ISteamRemoteStorage *this, unsigned __int64, int *, int *);
  bool (__thiscall *GetUGCDetails)(ISteamRemoteStorage *this, unsigned __int64, unsigned int *, char **, int *, CSteamID *);
  int (__thiscall *UGCRead)(ISteamRemoteStorage *this, unsigned __int64, void *, int);
  int (__thiscall *GetCachedUGCCount)(ISteamRemoteStorage *this);
  unsigned __int64 (__thiscall *GetCachedUGCHandle)(ISteamRemoteStorage *this, int);
  unsigned __int64 (__thiscall *PublishWorkshopFile)(ISteamRemoteStorage *this, const char *, const char *, unsigned int, const char *, const char *, ERemoteStoragePublishedFileVisibility, SteamParamStringArray_t *, EWorkshopFileType);
  unsigned __int64 (__thiscall *CreatePublishedFileUpdateRequest)(ISteamRemoteStorage *this, unsigned __int64);
  bool (__thiscall *UpdatePublishedFileFile)(ISteamRemoteStorage *this, unsigned __int64, const char *);
  bool (__thiscall *UpdatePublishedFilePreviewFile)(ISteamRemoteStorage *this, unsigned __int64, const char *);
  bool (__thiscall *UpdatePublishedFileTitle)(ISteamRemoteStorage *this, unsigned __int64, const char *);
  bool (__thiscall *UpdatePublishedFileDescription)(ISteamRemoteStorage *this, unsigned __int64, const char *);
  bool (__thiscall *UpdatePublishedFileVisibility)(ISteamRemoteStorage *this, unsigned __int64, ERemoteStoragePublishedFileVisibility);
  bool (__thiscall *UpdatePublishedFileTags)(ISteamRemoteStorage *this, unsigned __int64, SteamParamStringArray_t *);
  unsigned __int64 (__thiscall *CommitPublishedFileUpdate)(ISteamRemoteStorage *this, unsigned __int64);
  unsigned __int64 (__thiscall *GetPublishedFileDetails)(ISteamRemoteStorage *this, unsigned __int64);
  unsigned __int64 (__thiscall *DeletePublishedFile)(ISteamRemoteStorage *this, unsigned __int64);
  unsigned __int64 (__thiscall *EnumerateUserPublishedFiles)(ISteamRemoteStorage *this, unsigned int);
  unsigned __int64 (__thiscall *SubscribePublishedFile)(ISteamRemoteStorage *this, unsigned __int64);
  unsigned __int64 (__thiscall *EnumerateUserSubscribedFiles)(ISteamRemoteStorage *this, unsigned int);
  unsigned __int64 (__thiscall *UnsubscribePublishedFile)(ISteamRemoteStorage *this, unsigned __int64);
  bool (__thiscall *UpdatePublishedFileSetChangeDescription)(ISteamRemoteStorage *this, unsigned __int64, const char *);
  unsigned __int64 (__thiscall *GetPublishedItemVoteDetails)(ISteamRemoteStorage *this, unsigned __int64);
  unsigned __int64 (__thiscall *UpdateUserPublishedItemVote)(ISteamRemoteStorage *this, unsigned __int64, bool);
  unsigned __int64 (__thiscall *GetUserPublishedItemVoteDetails)(ISteamRemoteStorage *this, unsigned __int64);
  unsigned __int64 (__thiscall *EnumerateUserSharedWorkshopFiles)(ISteamRemoteStorage *this, CSteamID, unsigned int, SteamParamStringArray_t *, SteamParamStringArray_t *);
  unsigned __int64 (__thiscall *PublishVideo)(ISteamRemoteStorage *this, EWorkshopVideoProvider, const char *, const char *, const char *, unsigned int, const char *, const char *, ERemoteStoragePublishedFileVisibility, SteamParamStringArray_t *);
  unsigned __int64 (__thiscall *SetUserPublishedFileAction)(ISteamRemoteStorage *this, unsigned __int64, EWorkshopFileAction);
  unsigned __int64 (__thiscall *EnumeratePublishedFilesByUserAction)(ISteamRemoteStorage *this, EWorkshopFileAction, unsigned int);
  unsigned __int64 (__thiscall *EnumeratePublishedWorkshopFiles)(ISteamRemoteStorage *this, EWorkshopEnumerationType, unsigned int, unsigned int, unsigned int, SteamParamStringArray_t *, SteamParamStringArray_t *);
};

/* 4006 */
struct ISteamClient
{
  ISteamClientVtbl *vfptr;
};

/* 4007 */
struct ISteamMatchmaking
{
  ISteamMatchmakingVtbl *vfptr;
};

/* 4008 */
struct ISteamMatchmakingVtbl
{
  int (__thiscall *GetFavoriteGameCount)(ISteamMatchmaking *this);
  _BYTE gap4[16];
  void (__thiscall *AddRequestLobbyListStringFilter)(ISteamMatchmaking *this, const char *, const char *, ELobbyComparison);
  void (__thiscall *AddRequestLobbyListNumericalFilter)(ISteamMatchmaking *this, const char *, int, ELobbyComparison);
  void (__thiscall *AddRequestLobbyListNearValueFilter)(ISteamMatchmaking *this, const char *, int);
  void (__thiscall *AddRequestLobbyListFilterSlotsAvailable)(ISteamMatchmaking *this, int);
  void (__thiscall *AddRequestLobbyListDistanceFilter)(ISteamMatchmaking *this, ELobbyDistanceFilter);
  void (__thiscall *AddRequestLobbyListResultCountFilter)(ISteamMatchmaking *this, int);
  void (__thiscall *AddRequestLobbyListCompatibleMembersFilter)(ISteamMatchmaking *this, CSteamID);
  CSteamID *(__thiscall *GetLobbyByIndex)(ISteamMatchmaking *this, CSteamID *result, int);
  unsigned __int64 (__thiscall *CreateLobby)(ISteamMatchmaking *this, ELobbyType, int);
  unsigned __int64 (__thiscall *JoinLobby)(ISteamMatchmaking *this, CSteamID);
  void (__thiscall *LeaveLobby)(ISteamMatchmaking *this, CSteamID);
  bool (__thiscall *InviteUserToLobby)(ISteamMatchmaking *this, CSteamID, CSteamID);
  int (__thiscall *GetNumLobbyMembers)(ISteamMatchmaking *this, CSteamID);
  CSteamID *(__thiscall *GetLobbyMemberByIndex)(ISteamMatchmaking *this, CSteamID *result, CSteamID, int);
  const char *(__thiscall *GetLobbyData)(ISteamMatchmaking *this, CSteamID, const char *);
  bool (__thiscall *SetLobbyData)(ISteamMatchmaking *this, CSteamID, const char *, const char *);
  int (__thiscall *GetLobbyDataCount)(ISteamMatchmaking *this, CSteamID);
  bool (__thiscall *GetLobbyDataByIndex)(ISteamMatchmaking *this, CSteamID, int, char *, int, char *, int);
  bool (__thiscall *DeleteLobbyData)(ISteamMatchmaking *this, CSteamID, const char *);
  const char *(__thiscall *GetLobbyMemberData)(ISteamMatchmaking *this, CSteamID, CSteamID, const char *);
  void (__thiscall *SetLobbyMemberData)(ISteamMatchmaking *this, CSteamID, const char *, const char *);
  bool (__thiscall *SendLobbyChatMsg)(ISteamMatchmaking *this, CSteamID, const void *, int);
  int (__thiscall *GetLobbyChatEntry)(ISteamMatchmaking *this, CSteamID, int, CSteamID *, void *, int, EChatEntryType *);
  bool (__thiscall *RequestLobbyData)(ISteamMatchmaking *this, CSteamID);
  void (__thiscall *SetLobbyGameServer)(ISteamMatchmaking *this, CSteamID, unsigned int, unsigned __int16, CSteamID);
  bool (__thiscall *GetLobbyGameServer)(ISteamMatchmaking *this, CSteamID, unsigned int *, unsigned __int16 *, CSteamID *);
  bool (__thiscall *SetLobbyMemberLimit)(ISteamMatchmaking *this, CSteamID, int);
  int (__thiscall *GetLobbyMemberLimit)(ISteamMatchmaking *this, CSteamID);
  bool (__thiscall *SetLobbyType)(ISteamMatchmaking *this, CSteamID, ELobbyType);
  bool (__thiscall *SetLobbyJoinable)(ISteamMatchmaking *this, CSteamID, bool);
  CSteamID *(__thiscall *GetLobbyOwner)(ISteamMatchmaking *this, CSteamID *result, CSteamID);
  bool (__thiscall *SetLobbyOwner)(ISteamMatchmaking *this, CSteamID, CSteamID);
  bool (__thiscall *SetLinkedLobby)(ISteamMatchmaking *this, CSteamID, CSteamID);
};

/* 4009 */
struct ISteamMatchmakingServerListResponse
{
  ISteamMatchmakingServerListResponseVtbl *vfptr;
};

/* 4010 */
struct ISteamMatchmakingServerListResponseVtbl
{
  void (__thiscall *ServerResponded)(ISteamMatchmakingServerListResponse *this, void *, int);
  void (__thiscall *ServerFailedToRespond)(ISteamMatchmakingServerListResponse *this, void *, int);
  void (__thiscall *RefreshComplete)(ISteamMatchmakingServerListResponse *this, void *, EMatchMakingServerResponse);
};

/* 4011 */
struct ISteamMatchmakingServers
{
  ISteamMatchmakingServersVtbl *vfptr;
};

/* 4012 */
struct ISteamMatchmakingPingResponse
{
  ISteamMatchmakingPingResponseVtbl *vfptr;
};

/* 4013 */
struct ISteamMatchmakingPingResponseVtbl
{
  void (__thiscall *ServerResponded)(ISteamMatchmakingPingResponse *this, gameserveritem_t *);
  void (__thiscall *ServerFailedToRespond)(ISteamMatchmakingPingResponse *this);
};

/* 4014 */
struct ISteamMatchmakingPlayersResponse
{
  ISteamMatchmakingPlayersResponseVtbl *vfptr;
};

/* 4015 */
struct ISteamMatchmakingPlayersResponseVtbl
{
  void (__thiscall *AddPlayerToList)(ISteamMatchmakingPlayersResponse *this, const char *, int, float);
  void (__thiscall *PlayersFailedToRespond)(ISteamMatchmakingPlayersResponse *this);
  void (__thiscall *PlayersRefreshComplete)(ISteamMatchmakingPlayersResponse *this);
};

/* 4016 */
struct ISteamMatchmakingRulesResponse
{
  ISteamMatchmakingRulesResponseVtbl *vfptr;
};

/* 4017 */
struct ISteamMatchmakingRulesResponseVtbl
{
  void (__thiscall *RulesResponded)(ISteamMatchmakingRulesResponse *this, const char *, const char *);
  void (__thiscall *RulesFailedToRespond)(ISteamMatchmakingRulesResponse *this);
  void (__thiscall *RulesRefreshComplete)(ISteamMatchmakingRulesResponse *this);
};

/* 4018 */
struct ISteamMatchmakingServersVtbl
{
  void *(__thiscall *RequestInternetServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
  _BYTE gap4[8];
  void *(__thiscall *RequestFavoritesServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
  void *(__thiscall *RequestHistoryServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
  void *(__thiscall *RequestSpectatorServerList)(ISteamMatchmakingServers *this, unsigned int, MatchMakingKeyValuePair_t **, unsigned int, ISteamMatchmakingServerListResponse *);
  void (__thiscall *ReleaseRequest)(ISteamMatchmakingServers *this, void *);
  gameserveritem_t *(__thiscall *GetServerDetails)(ISteamMatchmakingServers *this, void *, int);
  void (__thiscall *CancelQuery)(ISteamMatchmakingServers *this, void *);
  void (__thiscall *RefreshQuery)(ISteamMatchmakingServers *this, void *);
  bool (__thiscall *IsRefreshing)(ISteamMatchmakingServers *this, void *);
  int (__thiscall *GetServerCount)(ISteamMatchmakingServers *this, void *);
  void (__thiscall *RefreshServer)(ISteamMatchmakingServers *this, void *, int);
  int (__thiscall *PingServer)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingPingResponse *);
  int (__thiscall *PlayerDetails)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingPlayersResponse *);
  int (__thiscall *ServerRules)(ISteamMatchmakingServers *this, unsigned int, unsigned __int16, ISteamMatchmakingRulesResponse *);
  void (__thiscall *CancelServerQuery)(ISteamMatchmakingServers *this, int);
};

/* 4019 */
struct ISteamApps
{
  ISteamAppsVtbl *vfptr;
};

/* 4020 */
struct ISteamAppsVtbl
{
  bool (__thiscall *BIsSubscribed)(ISteamApps *this);
  _BYTE gap4[4];
  bool (__thiscall *BIsCybercafe)(ISteamApps *this);
  bool (__thiscall *BIsVACBanned)(ISteamApps *this);
  const char *(__thiscall *GetCurrentGameLanguage)(ISteamApps *this);
  const char *(__thiscall *GetAvailableGameLanguages)(ISteamApps *this);
  bool (__thiscall *BIsSubscribedApp)(ISteamApps *this, unsigned int);
  bool (__thiscall *BIsDlcInstalled)(ISteamApps *this, unsigned int);
  unsigned int (__thiscall *GetEarliestPurchaseUnixTime)(ISteamApps *this, unsigned int);
  bool (__thiscall *BIsSubscribedFromFreeWeekend)(ISteamApps *this);
  int (__thiscall *GetDLCCount)(ISteamApps *this);
  bool (__thiscall *BGetDLCDataByIndex)(ISteamApps *this, int, unsigned int *, bool *, char *, int);
  void (__thiscall *InstallDLC)(ISteamApps *this, unsigned int);
  void (__thiscall *UninstallDLC)(ISteamApps *this, unsigned int);
  void (__thiscall *RequestAppProofOfPurchaseKey)(ISteamApps *this, unsigned int);
};

/* 4021 */
struct ISteamScreenshots
{
  ISteamScreenshotsVtbl *vfptr;
};

/* 4022 */
struct ISteamScreenshotsVtbl
{
  unsigned int (__thiscall *WriteScreenshot)(ISteamScreenshots *this, void *, unsigned int, int, int);
  unsigned int (__thiscall *AddScreenshotToLibrary)(ISteamScreenshots *this, const char *, const char *, int, int);
  void (__thiscall *TriggerScreenshot)(ISteamScreenshots *this);
  void (__thiscall *HookScreenshots)(ISteamScreenshots *this, bool);
  bool (__thiscall *SetLocation)(ISteamScreenshots *this, unsigned int, const char *);
  bool (__thiscall *TagUser)(ISteamScreenshots *this, unsigned int, CSteamID);
};

/* 4023 */
struct ISteamHTTP
{
  ISteamHTTPVtbl *vfptr;
};

/* 4024 */
struct ISteamHTTPVtbl
{
  unsigned int (__thiscall *CreateHTTPRequest)(ISteamHTTP *this, EHTTPMethod, const char *);
  _BYTE gap4[4];
  bool (__thiscall *SetHTTPRequestNetworkActivityTimeout)(ISteamHTTP *this, unsigned int, unsigned int);
  bool (__thiscall *SetHTTPRequestHeaderValue)(ISteamHTTP *this, unsigned int, const char *, const char *);
  bool (__thiscall *SetHTTPRequestGetOrPostParameter)(ISteamHTTP *this, unsigned int, const char *, const char *);
  bool (__thiscall *SendHTTPRequest)(ISteamHTTP *this, unsigned int, unsigned __int64 *);
  bool (__thiscall *DeferHTTPRequest)(ISteamHTTP *this, unsigned int);
  bool (__thiscall *PrioritizeHTTPRequest)(ISteamHTTP *this, unsigned int);
  bool (__thiscall *GetHTTPResponseHeaderSize)(ISteamHTTP *this, unsigned int, const char *, unsigned int *);
  bool (__thiscall *GetHTTPResponseHeaderValue)(ISteamHTTP *this, unsigned int, const char *, char *, unsigned int);
  bool (__thiscall *GetHTTPResponseBodySize)(ISteamHTTP *this, unsigned int, unsigned int *);
  bool (__thiscall *GetHTTPResponseBodyData)(ISteamHTTP *this, unsigned int, char *, unsigned int);
  bool (__thiscall *ReleaseHTTPRequest)(ISteamHTTP *this, unsigned int);
  bool (__thiscall *GetHTTPDownloadProgressPct)(ISteamHTTP *this, unsigned int, float *);
  bool (__thiscall *SetHTTPRequestRawPostBody)(ISteamHTTP *this, unsigned int, const char *, char *, unsigned int);
};

/* 4025 */
struct ISteamClientVtbl
{
  int (__thiscall *CreateSteamPipe)(ISteamClient *this);
  _BYTE gap4[8];
  int (__thiscall *CreateLocalUser)(ISteamClient *this, int *, EAccountType);
  void (__thiscall *ReleaseUser)(ISteamClient *this, int, int);
  ISteamUser *(__thiscall *GetISteamUser)(ISteamClient *this, int, int, const char *);
  ISteamGameServer *(__thiscall *GetISteamGameServer)(ISteamClient *this, int, int, const char *);
  void (__thiscall *SetLocalIPBinding)(ISteamClient *this, unsigned int, unsigned __int16);
  ISteamFriends *(__thiscall *GetISteamFriends)(ISteamClient *this, int, int, const char *);
  ISteamUtils *(__thiscall *GetISteamUtils)(ISteamClient *this, int, const char *);
  ISteamMatchmaking *(__thiscall *GetISteamMatchmaking)(ISteamClient *this, int, int, const char *);
  ISteamMatchmakingServers *(__thiscall *GetISteamMatchmakingServers)(ISteamClient *this, int, int, const char *);
  void *(__thiscall *GetISteamGenericInterface)(ISteamClient *this, int, int, const char *);
  ISteamUserStats *(__thiscall *GetISteamUserStats)(ISteamClient *this, int, int, const char *);
  struct ISteamGameServerStats *(__thiscall *GetISteamGameServerStats)(ISteamClient *this, int, int, const char *);
  ISteamApps *(__thiscall *GetISteamApps)(ISteamClient *this, int, int, const char *);
  ISteamNetworking *(__thiscall *GetISteamNetworking)(ISteamClient *this, int, int, const char *);
  ISteamRemoteStorage *(__thiscall *GetISteamRemoteStorage)(ISteamClient *this, int, int, const char *);
  ISteamScreenshots *(__thiscall *GetISteamScreenshots)(ISteamClient *this, int, int, const char *);
  void (__thiscall *RunFrame)(ISteamClient *this);
  unsigned int (__thiscall *GetIPCCallCount)(ISteamClient *this);
  void (__thiscall *SetWarningMessageHook)(ISteamClient *this, void (__cdecl *)(int, const char *));
  bool (__thiscall *BShutdownIfAllPipesClosed)(ISteamClient *this);
  ISteamHTTP *(__thiscall *GetISteamHTTP)(ISteamClient *this, int, int, const char *);
};

/* 4026 */
struct gameTypeRow_t
{
  int refHash;
  int hardcoreRefHash;
  unsigned __int32 hardcoreAllowed : 1;
  unsigned __int32 isValid : 1;
  unsigned __int32 isParty : 1;
  unsigned __int32 row : 7;
};

/* 4027 */
struct gameTypesTable_t
{
  gameTypeRow_t gameTypeRows[32];
  int numGameTypes;
};

/* 4028 */
struct statsDelta_t
{
  int minDelta;
  int maxDelta;
};

/* 4029 */
struct statsDeltaRow_t
{
  ddlState_t searchState;
  int oldValue[1];
  statsDelta_t reportDelta;
  statsDelta_t clampDelta;
  statsDelta_t dropDelta;
  bool isValid;
  bool isValueValid;
  trackerColumn_e clientTrackerCol;
  trackerColumn_e serverTrackerCol;
};

/* 4030 */
struct __declspec(align(8)) unlockedItemsData_t
{
  char numRecentUnlocks[1];
  unsigned __int64 recentlyUnlockedAttachmentsBitMask[1][64];
  char recentlyUnlockedItems[1][256];
  char numRecentlyUnlockedItems[1];
};

/* 4031 */
struct cachedStatsMsg_t
{
  char msgBuf[64];
  int bufLen;
};

/* 4032 */
struct cachedStats_t
{
  cachedStatsMsg_t cachedStatsChanges[64];
  int nextFreeCachedStat;
};

/* 4033 */
struct __declspec(align(4)) SndEntLoop
{
  unsigned int id;
  SndEntHandle handle;
  vec3_t origin;
  __int16 fade;
};

/* 4034 */
struct SndNotifyLength
{
  unsigned int lengthMs;
  unsigned int ent;
};

/* 4035 */
struct SndNotifyEntUpdate
{
  SndEntHandle handle;
};

/* 4036 */
struct SndPlayback
{
  int id;
  float attenuation;
  int lengthMs;
  int playedMs;
  unsigned int aliasId;
  SndEntHandle entHandle;
  SndPlayback *next;
};

/* 4037 */
struct SndNotifyPlaybackUpdate
{
  SndPlayback *playback;
  float attenuation;
  unsigned int lengthMs;
  unsigned int playedMs;
};

/* 4038 */
struct SndCommandSetGameState
{
  int is_paused;
  int is_mature;
  float timescale;
  unsigned int cg_time;
  unsigned int seed;
  float voiceScale;
  float musicScale;
  float sfxScale;
  float masterScale;
  float cinematicScale;
  int masterPatch;
  unsigned int hearingImpaired;
};

/* 4039 */
struct SndCommandSetPlaybackAttenuationRate
{
  int id;
  float rate;
};

/* 4040 */
struct SndCommandStopAlias
{
  SndEntHandle ent;
  unsigned int alias_name;
};

/* 4041 */
struct SndCommandSetLoopState
{
  SndEntHandle handle;
  unsigned int aliasId;
  float attenuation;
  float attenuationRate;
  float pitch;
  float pitchRate;
};

/* 4042 */
struct SndCommandSetDefaultAmbientContext
{
  unsigned int type;
  unsigned int value;
};

/* 4043 */
struct SndCommandStopEnt
{
  SndEntHandle ent;
};

/* 4044 */
struct SndCommandPlayLoops
{
  SndEntLoop loops[5];
  int count;
};

/* 4045 */
struct SndCommandPrimeAlias
{
  unsigned int scriptIdHash;
  int timeTillPlayMs;
};

/* 4046 */
struct SndCommandSetEntState
{
  SndEntHandle handle;
  vec3_t origin;
  vec3_t velocity;
  vec3_t orientation[3];
};

/* 4047 */
struct SndCommandLoopAt
{
  unsigned int id;
  vec3_t origin;
};

/* 4048 */
struct SndCommandSetPlaybackPitchRate
{
  int id;
  float rate;
};

/* 4049 */
struct SndCommandDeactivateEnvironmentEffects
{
  int priority;
  int fademsec;
};

/* 4050 */
struct SndCommandPrefetchLoadedAlias
{
  unsigned int aliasId;
};

/* 4051 */
struct SndCommandSetPlaybackAttenuation
{
  int id;
  float attenuation;
};

/* 4052 */
struct SndCommandLoadBank
{
  SndBank *bank;
};

/* 4053 */
struct SndCommandSetContext
{
  unsigned int type;
  unsigned int value;
};

/* 4054 */
struct SndCommandSetFrontendMusic
{
  unsigned int musicAlias;
};

/* 4055 */
struct SndCommandDuck
{
  SndDuckCategoryType type;
  unsigned int id;
  float amount;
};

/* 4056 */
struct SndNotifyPlaybackFree
{
  SndPlayback *playback;
};

/* 4057 */
struct SndNotifySubtitle
{
  unsigned int lengthMs;
  const char *subtitle;
};

/* 4058 */
union SndNotifyContext
{
  SndNotifyEntUpdate ent_update;
  SndNotifySubtitle subtitle;
  SndNotifyLength length;
  SndNotifyPlaybackFree playback_free;
  SndNotifyPlaybackUpdate playback_update;
};

/* 4059 */
struct SndCommandStopSounds
{
  SndStopSoundFlags flags;
};

/* 4060 */
struct SndCommandCinematicStart
{
  float volume;
};

/* 4061 */
struct SndCommandSetStartPaused
{
  int id;
  int pause;
};

/* 4062 */
struct SndCommandPlay
{
  unsigned int alias;
  int fadeTimeMs;
  float attenuation;
  SndEntHandle entHandle;
  int notify;
  vec3_t position;
  vec3_t direction;
  SndPlayback *playback;
  int startPaused;
  int setEntState;
  vec3_t origin;
  vec3_t velocity;
  vec3_t orientation[3];
  int setScriptValues;
  float scriptPitch;
  float scriptPitchRate;
  float scriptAttenuation;
  float scriptAttenuationRate;
};

/* 4063 */
struct SndCommandSetPlaybackPitch
{
  int id;
  float pitch;
};

/* 4064 */
struct SndCommandLineAt
{
  unsigned int id;
  vec3_t origin[2];
};

/* 4065 */
struct SndSpeakerMap
{
  int inputChannelCount;
  int outputChannelCount;
  float volumes[16];
};

/* 4066 */
struct SndCommandSetGlobalFutz
{
  unsigned int futzId;
  SndCallLocation callLocation;
};

/* 4067 */
struct SndCommandScriptTimescale
{
  float value;
};

/* 4068 */
struct SndCommandDisconnectListener
{
  LocalClientNum_t listener;
};

/* 4069 */
struct SndCommandStopPlayback
{
  int id;
};

/* 4070 */
struct SndCommandLoadGlobals
{
  SndDriverGlobals *globals;
};

/* 4071 */
struct SndLengthNotifyInfo
{
  SndLengthType id[4];
  void *data[4];
  int count;
};

/* 4072 */
struct SndCommandAliasName
{
  char name[48];
  unsigned int id;
};

/* 4073 */
struct SndCommandLoadPatch
{
  SndPatch *patch;
};

/* 4074 */
struct SndCommandSetMusicState
{
  unsigned int stateId;
};

/* 4075 */
struct SndMusicSegment
{
  unsigned int stateId;
  unsigned int segmentId;
  unsigned int aliasId;
  int playOnExit;
  int looping;
  unsigned int bpm;
  unsigned int transitionBeat;
  float fadeInTime;
  float fadeInDelay;
  int doNotFadeOut;
  float fadeOutTime;
  float fadeOutDelay;
  unsigned int stateChangeWhenDone;
  int inhibitStateChange;
};

/* 4076 */
struct SndCommandSetEnvironmentEffects
{
  int priority;
  unsigned int id;
  float drylevel;
  float wetlevel;
  int fademsec;
};

/* 4077 */
struct SndCommandSetListener
{
  LocalClientNum_t listener;
  ClientNum_t clientNum;
  team_t team;
  vec3_t origin;
  vec3_t axis[3];
};

/* 4078 */
struct SndCommandSetEntContext
{
  SndEntHandle handle;
  unsigned int type;
  unsigned int value;
};

/* 4079 */
struct SndGameState
{
  float timescale;
  unsigned int cgTime;
  unsigned int seed;
  int gamePaused;
  int mature;
  float voiceScale;
  float musicScale;
  float sfxScale;
  float masterScale;
  float cinematicScale;
  int masterPatch;
  int hearingImpaired;
};

/* 4080 */
union SndCommandContext
{
  SndCommandAliasName alias_name;
  SndCommandPlay play;
  SndCommandStopAlias stop_alias;
  SndCommandStopEnt stop_ent;
  SndCommandCinematicStart notify_cinematic_start;
  SndCommandDisconnectListener disconnect_listener;
  SndCommandSetListener set_listener;
  SndCommandStopSounds stop_sounds;
  SndCommandSetEnvironmentEffects set_environment_effects;
  SndCommandDeactivateEnvironmentEffects deactivate_environment_effects;
  SndCommandSetPlaybackAttenuation set_playback_attenuation;
  SndCommandSetPlaybackAttenuationRate set_playback_attenuation_rate;
  SndCommandSetPlaybackPitch set_playback_pitch;
  SndCommandSetPlaybackPitchRate set_playback_pitch_rate;
  SndCommandStopPlayback stop_playback;
  SndCommandSetStartPaused set_start_paused;
  SndCommandDuck duck;
  SndCommandSetEntState set_ent_state;
  SndCommandSetGameState set_game_state;
  SndCommandLoopAt loop_at;
  SndCommandLineAt line_at;
  SndCommandSetContext set_context;
  SndCommandSetEntContext set_ent_context;
  SndCommandScriptTimescale script_timescale;
  SndCommandLoadBank load_bank;
  SndCommandLoadPatch load_patch;
  SndCommandLoadGlobals load_globals;
  SndCommandPrimeAlias prime_alias;
  SndCommandSetMusicState setMusicState;
  SndCommandPrefetchLoadedAlias prefetchLoadedAlias;
  SndCommandSetGlobalFutz setGlobalFutz;
  SndCommandSetDefaultAmbientContext setDefaultAmbientContext;
  SndCommandSetFrontendMusic setFrontendMusic;
  SndCommandSetLoopState setLoopState;
  SndCommandPlayLoops playLoops;
};

/* 4081 */
struct SndCommand
{
  SndCommand *next;
  SndCommandType type;
  SndCommandContext context;
};

/* 4082 */
struct orientation_t
{
  vec3_t origin;
  vec3_t axis[3];
};

/* 4083 */
struct SndNotify
{
  SndNotify *next;
  SndNotifyType type;
  SndNotifyContext context;
};

/* 4084 */
struct SndFader
{
  float value;
  float goal;
  float rate;
};

/* 4085 */
struct __declspec(align(4)) SndVoice
{
  SndFileLoadingState loadingState;
  int assetChannelCount;
  int assetFrameRate;
  int assetEndTime;
  int assetTotalMsec;
  SndEntHandle sndEnt;
  SndEntityUpdate entity_update;
  int group;
  int startDelay;
  int startTime;
  unsigned int startFrame;
  int looptime;
  int totalMsec;
  SndPlayback *playback;
  int playbackId;
  int firstPlaybackId;
  int secondaryId;
  SndLengthNotifyInfo lengthNotifyInfo;
  SndAlias *alias;
  vec3_t offset;
  vec3_t position;
  vec3_t velocity;
  vec3_t orientation[3];
  vec3_t direction;
  vec3_t fluxVelocity;
  float baseDistance;
  float distanceAttenuation;
  float reverbAttenuation;
  float volModSeed;
  float volModStart;
  float pitchModSeed;
  float globalPriority;
  float groupScalar;
  SndFader doppler;
  SndFader fade;
  SndFader script_fade;
  SndFader script_pitch;
  SndFader losOcclusion;
  int traceCache[5];
  int needsToStop;
  SndMenuCategory category;
  __int16 localClientGroupMask;
  __int16 localClientGroup;
  int closestListenerIndex;
  int voiceStartTime;
  float dryLevel;
  float wetLevel;
  float futzBlend;
  SndSpeakerMap pan;
  __int64 played;
  SndDuck *duck;
  SndDuckActive *activeDuck;
  bool paused;
  bool startPaused;
  bool timescale;
  bool positionUpdated;
  bool pitchShift;
  bool aliasFadeOut;
};

/* 4086 */
struct SndDuckActive
{
  int inUse;
  SndDuckCategoryType category;
  int startTime;
  int endTime;
  int pingTime;
  vec3_t position;
  unsigned int id;
  SndDuck *duck;
  float amount;
  float effect;
  SndVoice *voice;
  float padding[3];
};

/* 4087 */
struct SndEntState
{
  SndEntHandle handle;
  vec3_t origin;
  vec3_t velocity;
  vec3_t orientation[3];
  unsigned int lastUsed;
  unsigned int hasPosition;
  SndEntState *next;
};

/* 4088 */
struct SndMusicActiveSegment
{
  SndMusicActiveSegmentState state;
  unsigned int stateName;
  SndMusicSegment *segment;
  int playback;
  int startTime;
  int stopTime;
};

/* 4089 */
struct SndEntityContextInfo
{
  unsigned int contexts[16];
};

/* 4090 */
struct SndListener
{
  orientation_t orient;
  ClientNum_t clientNum;
  bool active;
  team_t team;
};

/* 4091 */
struct SndLineEmitter
{
  unsigned int id;
  vec3_t origin[2];
  SndAliasList *alias;
  float aliasDistanceSq;
};

/* 4092 */
struct __declspec(align(4)) SndEnvEffect
{
  unsigned int reverbId;
  float drylevel;
  float drygoal;
  float dryrate;
  float wetlevel;
  float wetgoal;
  float wetrate;
  bool active;
};

/* 4093 */
struct SndLoopEmitter
{
  unsigned int id;
  vec3_t origin;
  SndAliasList *alias;
  float aliasDistanceSq;
};

/* 4094 */
struct SndDspMeters
{
  float p;
  float vu;
  float dyn1Gain;
  float dyn1Level;
  float dyn2Gain;
  float dyn2Level;
  float cf;
  char padding[4];
};

/* 4095 */
struct SndOcclusionTrace
{
  int id;
  int voiceIndex;
  vec3_t listener;
  vec3_t playback;
  int cache[5];
  float occlusion;
  char padding[8];
};

/* 4096 */
struct SndAliasPreload
{
  unsigned int aliasId;
  int playTimeCgMs;
};

/* 4097 */
struct SndLocal
{
  int magic;
  int init;
  int paused;
  float timescale;
  float scriptTimescale;
  int time;
  int looptime;
  int pausetime;
  unsigned int frame;
  SndDriverGlobals *global_constants;
  int cinematicVoicesPlaying;
  int cinematicTimestamp;
  int cinematicUpdate;
  int forcePause;
  int playbackIdCounter;
  SndFader volume;
  unsigned int defaultHash;
  SndCurve *defaultCurve;
  unsigned int defaultPanIndex;
  unsigned int activeListenerCount;
  int curveMagnitudeIsZero[32];
  unsigned int pfutzId;
  float pfutzBlend;
  unsigned int gfutzIds[2];
  int gfutzLoopId;
  SndEnvEffect envEffects[3];
  SndEnvEffect *effect;
  unsigned int listenerSanityCount;
  unsigned int voiceGroup;
  unsigned int announcerGroup;
  __declspec(align(64)) SndListener listeners[4];
  __declspec(align(32)) SndGameState gameState;
  __declspec(align(128)) SndVoice voice[68];
  unsigned int voiceAliasHash[68];
  __declspec(align(128)) vec3_t voicePositionCache[68];
  __declspec(align(128)) SndEntState entState[272];
  __declspec(align(128)) SndEntState *entStateIndex[2048];
  unsigned int currentContexts[16];
  unsigned int currentVoiceDuck;
  SndLineEmitter lineEmitters[128];
  SndLoopEmitter loopEmitters[384];
  int pfutzLoops[8];
  unsigned int lineCount;
  unsigned int loopCount;
  __declspec(align(32)) SndDuckActive duckActive[128];
  unsigned int duckCategoryIndex[12];
  __declspec(align(128)) float duckAttenuationValue[32];
  float duckAttenuationValueLinear[32];
  float duckFilterValue[32];
  float duckAttenuationTarget[32];
  float duckFilterTarget[32];
  float duckTemp[32];
  float duckOne[32];
  float duckRate[32];
  float duckNegRate[32];
  float duckDelta[32];
  SndDspMeters meters[8];
  unsigned int logCommandCount;
  unsigned int logNotifyCount;
  unsigned int frameNotifyCount;
  unsigned int frameCommandCount;
  unsigned int updated;
  SndPlayback playbacks[272];
  SndPlayback *playbackFreeList;
  unsigned int playbacksInUse;
  int command_init;
  SndCommand commands[1024];
  SndCommand *commandFreeList;
  unsigned int commandInUse;
  unsigned int command_id_commit;
  SndCommand *command_q[1024];
  unsigned int command_q_head;
  unsigned int command_q_tail;
  bool command_process_flag;
  bool muteAllSounds;
  SndNotify notifies[512];
  SndNotify *notifyFreeList;
  unsigned int notifyInUse;
  SndNotify *notify_q[512];
  unsigned int notify_q_head;
  unsigned int notify_q_tail;
  int asyncRunning;
  unsigned int musicRequestedState;
  unsigned int musicCurrentState;
  int musicInhibitCount;
  SndMusicActiveSegment musicActiveSegments[32];
  __declspec(align(128)) SndOcclusionTrace occlusionTraces[68];
  int occlusionRunning;
  unsigned int framesSinceLastOcclusionUpdate;
  unsigned int traceSequence;
  unsigned int traceCount;
  unsigned int lastTraceSequence;
  unsigned int occlusionUsec;
  unsigned int occlusionTraceCount;
  unsigned int occlusionVoiceCount;
  unsigned int logTimestamp;
  unsigned int frameUsec;
  unsigned int updateUsec;
  unsigned int duckUsec;
  unsigned int occlusionUpdateUsec;
  unsigned int voiceUpdateUsec;
  unsigned int entStateUsec;
  unsigned int updateVoicePositionUsec;
  unsigned int updateVoiceVoiceUsec;
  unsigned int updateVoiceDriverUsec;
  unsigned int commandPumpUsec;
  unsigned int devhostEndUsec;
  unsigned int devhostBeginUsec;
  unsigned int occlusionCacheMiss;
  unsigned int occlusionCacheTotal;
  unsigned int spuUpdateUsec;
  unsigned int banksLoading;
  unsigned int stressAliasIndex;
  unsigned int stressAliasCount;
  bool bankUpdateStatus;
  unsigned int frontendMusicAlias;
  unsigned int PreviousFrontendMusicAlias;
  SndEntityContextInfo entContexts[1792];
  SndAliasPreload aliasPreload[128];
};

/* 4098 */
struct signedStatsHash_t
{
  char signedHashBuffer[50];
  unsigned int signedHashLen;
};

/* 4099 */
union viewedTime_u
{
  int utctime;
  char time[4];
};

/* 4100 */
struct SndDspBiquadState
{
  float y[4];
  float x[4];
};

/* 4101 */
struct __declspec(align(8)) gameBookmarks_t
{
  unsigned __int64 fildID[16];
  int lastIndex;
};

/* 4102 */
struct PlayerSkill
{
  float skill;
  float variance;
  float score;
  int contrib;
};

/* 4103 */
union ddlValue_t
{
  float fixedPointValue;
  int intValue;
  unsigned int uintValue;
  unsigned __int64 int64Value;
  float floatValue;
  const char *stringPtr;
};

/* 4104 */
struct __declspec(align(8)) SndScopedPerformanceError
{
  long double threshold;
  unsigned __int64 start;
  const char *what;
};

/* 4105 */
struct ThrottleData
{
  int returnTimeMs;
};

/* 4106 */
struct SessionCreateData
{
  bool silentFail;
  bool active;
  SessionData *session;
};

/* 4107 */
struct __cppobj bdSecurityInfo
{
};

/* 4108 */
struct SessionSearchPayloadData
{
  bool (__cdecl *abortCheckfunc)();
  ThrottleData *throttleData;
};

/* 4109 */
struct __declspec(align(8)) SessionJoinData
{
  bool active;
  int privateSlot;
  int slot;
  unsigned __int64 player;
  SessionData *session;
};

/* 4110 */
struct SessionGraveYard
{
  bool active;
  bool deleting;
  SessionData sessionData;
};

/* 4111 */
struct SessionTaskCheckData
{
  TaskDefinition *sessionTaskDef;
  SessionData *session;
  TaskRecord *sessionTask;
};

/* 4112 */
struct MapnameRichPresenceInfo
{
  const char *mapname;
  int context;
  int mapPack;
  const char *locString;
};

/* 4113 */
struct GametypeRichPresenceInfo
{
  char *gametype;
  int context;
  const char *locString;
};

/* 4114 */
struct ZMLocationRichPresenceInfo
{
  char *zmLocation;
  const char *locString;
};

/* 4115 */
struct Ps3PresenceData
{
  char version;
  int presence;
  int map;
  int gametype;
  int zmLocation;
};

/* 4116 */
struct GroupMembership
{
  unsigned int bits[32];
  int dirty;
  int updateTime;
};

/* 4117 */
struct GroupSet
{
  const char *name;
  bool exclusive;
  const char **groupNames;
  int capacity;
  unsigned int start;
};

/* 4118 */
struct __declspec(align(8)) FriendsGlob
{
  FriendInfo xfriends[300];
  int numFriends;
};

/* 4119 */
struct __declspec(align(8)) InvitesGlob
{
  FriendInfo xfriends[10];
  int numInvites;
};

/* 4120 */
struct UnifiedFriend
{
  FriendInfo *console;
};

/* 4121 */
struct __declspec(align(4)) UnifiedFriends
{
  UnifiedFriend friends[300];
  int numFriends;
  char mode;
};

/* 4122 */
struct __declspec(align(8)) PlayerIdentityData
{
  unsigned __int64 xuid;
  const char *gamertag;
  char clantag[32];
};

/* 4123 */
struct __cppobj __declspec(align(8)) LeaderboardFileShareRow : bdStatsInfo
{
  unsigned int m_columns[4];
  unsigned __int64 m_entityID;
  char m_entityName[65];
};

/* 4124 */
struct searchContext_t
{
  fileShareLocation location;
  fileshareCategory_e category;
  filesharePlayerFilter_e playerFilter;
  int startIndex;
  bdTag tags[60];
  int numTags;
  int id;
  unsigned int lbID;
  ControllerIndex_t controllerIndex;
};

/* 4125 */
struct __declspec(align(8)) searchBook_t
{
  bdFileID fileIDs[10];
  unsigned __int64 origFileIDs[10];
  unsigned __int64 views[10];
  unsigned __int64 votes[10];
  int numFiles;
  int totalFiles;
  bool isDone;
};

/* 4126 */
struct __declspec(align(2)) searchPage_t
{
  bdFileMetaData descriptors[10];
  int numDescriptors;
  bool isDone;
  bool statsDone;
  bool resultsReported;
};

/* 4127 */
struct search_t
{
  bool dirty;
  searchContext_t context;
  searchBook_t book;
  searchPage_t page;
};

/* 4128 */
struct fileShareSearchBackoff_t
{
  bool isActive;
  int level;
};

/* 4129 */
struct __declspec(align(8)) fshCacheFileDetails_t
{
  bdFileMetaData descriptor;
  fileShareLocation location;
};

/* 4130 */
struct __declspec(align(8)) fshCacheRatingDetails_t
{
  unsigned __int64 fileID;
  bdVoteRankStatsInfo rating;
  fileShareLocation location;
};

/* 4131 */
struct fileshareSummary_t
{
  unsigned __int64 fileID;
  int size;
  fileShareLocation location;
  ControllerIndex_t controller;
  int nextFetchTime;
  bool isDirty;
  int (__cdecl *dataValidationCallback)(ControllerIndex_t, unsigned __int64, char *, int);
};

/* 4132 */
struct __declspec(align(8)) fileshareStats_t
{
  LeaderboardFileShareRow ustats[800];
  bdStatsInfoEx ustatsInfo[800];
  bdStatsInfoEx *ustatsInfoPtr[800];
  int count;
};

/* 4133 */
struct fileshareData_t
{
  bool isDirty;
  unsigned __int64 xuid;
  int groupRow;
  fileshareState_e state;
  int retryCount;
  int nextFetchTime;
  ControllerIndex_t controller;
  bdFileMetaData descriptors[200];
  int numDescriptors;
  int fetchOffset;
  int totalDescriptors;
  int numManagedDescriptors;
  fileshareStats_t stats[2];
  int viewOffset;
  int voteOffset;
  bdFileMetaData *byTime[200];
  bdFileMetaData *byType[200];
};

/* 4134 */
struct __declspec(align(8)) fileshareCopy_t
{
  bdFileMetaData descriptor;
  int numDescriptors;
  fileShareLocation location;
  int slot;
  char name[22];
  bool isModifiedName;
  char description[64];
  bool isModifiedDescription;
};

/* 4135 */
struct fileshareDescriptorData_t
{
  unsigned __int64 fileID;
  unsigned __int64 originID;
  int fileSize;
  int summarySize;
  bool isSupported;
  bool isPooled;
  bool isBookmarked;
  int slot;
  fileshareCategory_e category;
  int mapID;
  const char *mapString;
  const char *mapName;
  unsigned __int64 matchID;
  int duration;
  char durationString[64];
  int createTime;
  char createTimeString[64];
  int gameType;
  const char *gameTypeString;
  const char *gameTypeName;
  const char *gameTypeImage;
  int zmMapStartLoc;
  const char *zmMapStartLocString;
  const char *zmMapStartLocName;
  unsigned __int64 authorXuid;
  char authorName[64];
  char modifiedName[64];
  char modifiedDescription[64];
  int playlistID;
  filesharePlaylistType_e playlistType;
};

/* 4136 */
struct __cppobj __declspec(align(2)) PublicTeamProfile : bdTeamProfile
{
  unsigned __int64 m_memberTeamID;
  char m_memberemblem[16385];
  int m_membermotto_bg;
  char m_memberclantag[6];
  char m_membermotto[25];
};

/* 4137 */
struct __cppobj PrivateTeamProfile : bdTeamProfile
{
  unsigned __int64 m_memberTeamID;
  char m_membermotd[96];
};

/* 4138 */
struct eliteClanData_t
{
  bdTeamInfo teamInfos[1];
  int numTotalTeams;
  bdTeamMember teamMembers[100];
  int numTotalTeamMembers;
  __declspec(align(8)) PublicTeamProfile teamPublicProfiles[1];
  int numTotalTeamPublicProfiles;
  PrivateTeamProfile teamPrivateProfile;
  bool clanAbbrev_NeedsValidating;
  bool clanAbbrev_Validated;
  int mClanXP;
  int mClanLevel;
};

/* 4139 */
struct eliteSubscriberData_t
{
  eSubLevel_e subscriberInfo;
};

/* 4140 */
struct __declspec(align(4)) eliteUCDData_t
{
  bdUCDAccountStatus eliteAccountStatus;
  bool isValid;
};

/* 4141 */
struct elite_t
{
  eliteClanData_t eliteClanData;
  eliteSubscriberData_t eliteSubscriberData;
  eliteUCDData_t eliteUCDData;
  unsigned __int64 xuid;
  unsigned int progress;
  eliteStatus_e status;
  int retryCount;
  int nextRetryTime;
};

/* 4142 */
struct dwTeamClanCreateTask
{
  char teamName[21];
  bdTeamInfo teamInfo;
};

/* 4143 */
struct dwTeamClanInviteTask
{
  unsigned __int64 teamID;
  unsigned __int64 newUserID;
};

/* 4144 */
struct dwTeamClanLeaveTask
{
  unsigned __int64 teamID;
};

/* 4145 */
struct dwTeamSetPublicProfileTask
{
  unsigned __int64 teamID;
  PublicTeamProfile teamPublicProfile;
};

/* 4146 */
struct dwTeamSetPrivateProfileTask
{
  unsigned __int64 teamID;
  PrivateTeamProfile teamPrivateProfile;
};

/* 4147 */
struct dwTeamGetMembershipsTask
{
  unsigned __int64 userID;
  bdTeamInfo *teamInfos;
  unsigned int maxNumTeams;
};

/* 4148 */
struct dwTeamGetMembersTask
{
  unsigned __int64 teamID;
  bdTeamMember *teamMembers;
  unsigned int maxNumTeamMembers;
};

/* 4149 */
struct dwTeamGetPublicProfileTask
{
  unsigned __int64 teamId[1];
  PublicTeamProfile *teamPublicProfiles;
  unsigned int maxNumTeams;
};

/* 4150 */
struct __declspec(align(8)) dwTeamGetPrivateProfileTask
{
  unsigned __int64 teamId;
  PrivateTeamProfile *teamPrivateProfile;
};

/* 4151 */
struct __declspec(align(8)) dwLobbyGetSubscriptionFromDWTask
{
  unsigned __int64 subscriptionIDs[1];
  bdSubscriptionInfo DWSubscriptionInfo[1];
  int count;
};

/* 4152 */
struct controllerEliteTasks_t
{
  dwTeamClanCreateTask eliteCreateTask;
  dwTeamClanInviteTask eliteClanInviteTask;
  dwTeamClanLeaveTask eliteClanLeaveTask;
  dwTeamSetPublicProfileTask eliteSetPublicProfileTask;
  dwTeamSetPrivateProfileTask eliteSetPrivateProfileTask;
  dwTeamGetMembershipsTask eliteGetMembershipsTask;
  dwTeamGetMembersTask eliteGetMembersTask;
  dwTeamGetPublicProfileTask eliteGetTeamPublicProfileTask;
  dwTeamGetPrivateProfileTask eliteGetTeamPrivateProfileTask;
  dwLobbyGetSubscriptionFromDWTask eliteGetSubscriberInfoFromDWTask;
  dwKeyArchiveReadTask keyArchiveReadTask;
  dwKeyArchiveWriteTask keyArchiveWriteTask;
  bdKeyValuePair keyArchiveWriteValuePair;
};

/* 4153 */
struct __cppobj dwLobbyRefreshDWSubscriptionTask
{
};

/* 4154 */
union __declspec(align(4)) jsmnVal_u
{
  char stringVal[1025];
  int intVal;
  bool boolVal;
};

/* 4155 */
struct jsmn_parser
{
  unsigned int pos;
  int toknext;
  int toksuper;
};

/* 4156 */
struct jsmntok_t
{
  jsmntype_t type;
  int start;
  int end;
  int size;
  jsmnVal_u *val;
  jsmnPrimitiveType_e primType;
};

/* 4157 */
struct sortedItemsData_t
{
  int itemIndex;
  int itemValue;
  int completedChallengeBackgrounds[3];
};

/* 4158 */
struct HashInfo
{
  challengeTest_t type;
  unsigned int start;
  unsigned int length;
  unsigned int position;
  unsigned int blockSize;
  unsigned __int64 state;
};

/* 4159 */
struct __declspec(align(8)) ChallengeProbe
{
  unsigned __int64 key;
  unsigned __int64 result;
  unsigned int index;
  unsigned int startAddress;
  unsigned int blockSize;
  void *hashHandle;
  bool started;
};

/* 4160 */
struct __declspec(align(8)) ChallengeState
{
  void *hashHandle;
  ChallengeProbe probe;
  bool mipsterRunning;
};

/* 4161 */
struct SndSpeakerPair
{
  int leftIndex;
  int rightIndex;
  float xform[4];
};

/* 4162 */
struct SndSpeakerAngle
{
  SndSpeakerFlag speaker;
  float angle;
};

/* 4163 */
struct SndSpeakerConfig
{
  const char *name;
  SndSpeakerFlag outputFormat;
  unsigned int speakerCount;
  unsigned int speakerMapCount;
  unsigned int angleCount;
  SndSpeakerAngle angles[8];
};

/* 4164 */
struct SndRvParams
{
  float frameRate;
  float smoothing;
  float earlyTime;
  float lateTime;
  float earlyGain;
  float lateGain;
  float lateGainProx[4];
  float returnGain;
  float earlyLpf;
  float lateLpf;
  float inputLpf;
  float dampLpf;
  float wallReflect[4];
  float dryGain;
  float earlySize;
  float lateSize;
  float diffusion;
  float angle;
  unsigned int delayMatrix;
  float returnHighpass;
  char padding[8];
};

/* 4165 */
struct SndRvState
{
  __m128 earlyReflectionCoefs[4];
  unsigned int earlyReflectionDelays[4][4];
  __m128 lateReflectionCoefs[4];
  unsigned int lateReflectionDelays[4][4];
  __m128 inputLpfState;
  __m128 earlyLpfState;
  __m128 lateLpfState;
  __m128 dampLpfState;
  __m128 returnHpfState1;
  __m128 returnHpfState2;
  SndRvParams params;
  unsigned int earlyReflectionDelayBase[4][4];
  unsigned int lateReflectionDelayBase[4][4];
  unsigned int delayIndex;
  unsigned int radverbTimeUsec;
  unsigned int spuCacheAccesses;
  unsigned int spuCacheMisses;
};

/* 4166 */
struct snd_occlusion_multiple
{
  SndOcclusionTrace *traces;
  unsigned int traceCount;
  unsigned int traceSequence;
  unsigned int *lastTraceSequence;
  unsigned int *occlusionTraceCount;
  unsigned int *occlusionVoiceCount;
  unsigned int *occlusionUsec;
};

/* 4167 */
struct snd_occlusion_single
{
  vec3_t listener;
  vec3_t playback;
  float *result;
  snd_occlusion_single_state *state;
};

/* 4168 */
union $5C8BF8A3D4F740838F4C2CACC0531F9F
{
  snd_occlusion_multiple multiple;
  snd_occlusion_single single;
};

/* 4169 */
struct snd_occlusion_cmd
{
  snd_occlusion_query_type type;
  $5C8BF8A3D4F740838F4C2CACC0531F9F ___u1;
};

/* 4170 */
struct __declspec(align(4)) SndOcclusionStartCache
{
  vec3_t position;
  float value;
  bool valid;
};

/* 4171 */
struct SndMusicState
{
  unsigned int stateName;
  unsigned int segmentCount;
  SndMusicSegment *segments;
};

/* 4172 */
struct SndDspChamberlinState
{
  float z0;
  float z1;
};

/* 4173 */
struct SndDspSquelchState
{
  float l;
  float g;
};

/* 4174 */
struct SndDspFutzState
{
  SndDspBiquadState bpf;
  SndDspBiquadState ls;
  SndDspSquelchState squelch;
  float padding[2];
};

/* 4175 */
struct SndDspSourceState
{
  float lpfy;
  SndDspFutzState futz;
};

/* 4176 */
struct SndDspChamberlinCoef
{
  float Fc;
  float Fs;
  float Q;
};

/* 4177 */
struct SndDspSquelchParam
{
  float tg;
  float th;
};

/* 4178 */
struct SndDspFutzParam
{
  float blend;
  float bpfF;
  float bpfQ;
  float lsG;
  float lsF;
  float lsQ;
  float distortion;
  float pregain;
  float postgain;
  float preclip;
  float postclip;
  SndDspSquelchParam squelch;
  float padding[3];
};

/* 4179 */
struct SndDspSourceParams
{
  float frameRate;
  float lpfAttenuation;
  float lpfRatio;
  SndDspFutzParam futz;
};

/* 4180 */
struct SndDspVoiceFilterParam
{
  float f;
  float g;
  float q;
  float t;
  float ta;
  float tr;
};

/* 4181 */
struct SndDspDynamoParam
{
  int E;
  float PG;
  float MG;
  float TH;
  float R;
  float TA;
  float TR;
};

/* 4182 */
struct SndDspDynamoState
{
  unsigned int offset;
  float yfilter;
  float gfilter;
  float g;
  float dcx;
  float dcy;
  __declspec(align(128)) float lookahead[512];
};

/* 4183 */
struct SndDspBiQuadCoef
{
  float s[5];
};

/* 4184 */
struct SndDspVoiceFilterState
{
  float f0;
  float q;
  float g;
  float gain;
  float gfilter;
  float fadeTime;
  float f;
  SndDspBiquadState filter;
};

/* 4185 */
struct sd_decoder_pcm16
{
  unsigned int channelCount;
  unsigned int frameOffsetIntoTopBuffer;
  const __int16 *buffers[2];
  unsigned int bufferFrameCount[2];
};

/* 4186 */
struct FLAC__StreamDecoder
{
  struct FLAC__StreamDecoderProtected *protected_;
  struct FLAC__StreamDecoderPrivate *private_;
};

/* 4187 */
struct sd_decoder_flac
{
  unsigned int inputOffsetIntoTopBuffer;
  const char *inputBuffers[2];
  unsigned int inputBufferSize[2];
  __int16 outputBuffer[2048];
  unsigned int outputBufferReadHead;
  unsigned int outputBufferWriteHead;
  unsigned int outputBufferCount;
  unsigned int outputFrameCount;
  unsigned int readRequest;
  unsigned int decoderInitialized;
  bool looping;
  bool resident;
  unsigned int totalFrameCount;
  unsigned int channelCount;
  unsigned int assetSize;
  unsigned int totalBytesRead;
  unsigned int frameBytesRead;
  FLAC__StreamDecoder *flacDecoder;
};

/* 4188 */
union sd_decoder_instance
{
  struct XMAPLAYBACK *xma;
  struct sd_decoder_pc_flac *pc_flac;
  struct sd_decoder_ps3_mp3 *ps3_mp3;
  sd_decoder_pcm16 *pcm16;
  struct sd_decoder_mpc *mpc;
  sd_decoder_flac *flac;
};

/* 4189 */
struct sd_loaded
{
  bool looping;
  unsigned int channelCount;
  unsigned int frameRate;
  unsigned int frameCount;
  unsigned int dataSize;
  const char *data;
};

/* 4190 */
struct sd_stream_buffer
{
  volatile int refCount;
  const char *filename;
  unsigned int filenameHash;
  unsigned int offset;
  unsigned int readSize;
  unsigned int requestLatency;
  unsigned int requestStartTime;
  unsigned int requestEndTime;
  int requestId;
  char *data;
  int valid;
  int error;
  int primed;
  int preloadExpires;
};

/* 4191 */
struct sd_stream
{
  int used;
  const char *filename;
  sd_stream_buffer primeBuffer;
  sd_stream_buffer *ioBuffer;
  sd_stream_buffer *lastBuffer;
  sd_stream_buffer *buffers[2];
  int buffersSubmitted[2];
  unsigned int readOffset;
  const char *primeData;
  unsigned int primeSize;
  SndAssetBankEntry *entry;
  int fileHandle;
};

/* 4192 */
struct sd_source
{
  sd_loaded loaded;
  sd_stream *stream;
  unsigned int assetId;
  int primed;
  int looping;
  int error;
  int eos;
};

/* 4193 */
struct sd_decoder
{
  sd_decoder_state state;
  sd_decoder_instance instance;
  sd_source *source;
  void *lastBuffer;
  unsigned int framesDecoded;
  int eos;
  int error;
  int outputStarving;
  snd_asset_format format;
};

/* 4194 */
struct sd_decoder_interface
{
  void (__cdecl *Init)();
  void (__cdecl *Shutdown)();
  void (__cdecl *Lock)(sd_decoder *);
  void (__cdecl *Unlock)(sd_decoder *);
  unsigned int (__cdecl *QueryAvailableData)(sd_decoder *, unsigned int);
  bool (__cdecl *BufferComplete)(sd_decoder *, const void *);
  bool (__cdecl *BufferReady)(sd_decoder *);
  void (__cdecl *BufferSubmit)(sd_decoder *, const char *, unsigned int, bool);
  void (__cdecl *Consume)(sd_decoder *, unsigned int, unsigned int, __int16 *);
  sd_decoder_state (__cdecl *Free)(sd_decoder *);
  void (__cdecl *Create)(sd_decoder *, SndAssetBankEntry *);
};

/* 4195 */
struct sd_voice_param
{
  sd_voice_param_state state;
  sd_voice_param *next;
  SndBus bus;
  SndDspSourceParams dspParams;
  float dryPan[12];
  float wetPan[12];
  float pitch;
  int paused;
  int startPaused;
  int doPitch;
  char align[56];
};

/* 4196 */
struct sd_decoder_output
{
  __int16 *data;
  unsigned int head;
  unsigned int count;
  unsigned int starving;
  int priming;
};

/* 4197 */
struct sd_voice
{
  sd_voice_state state;
  int done;
  int hasData;
  __int64 position;
  float pitchFraction;
  sd_source source;
  sd_decoder *decoder;
  sd_decoder_output decoderOutput;
  SndDspSourceState dspState[2];
  unsigned int channelCount;
  int shutdownDueToStarvation;
  unsigned int starvedThisFrame;
  float dryPanFilter[12];
  float wetPanFilter[12];
  sd_voice_param *previousParam;
  char align[4];
};

/* 4198 */
struct __declspec(align(128)) sd_mix_master_state
{
  unsigned int reverbOverwriteCheck;
  unsigned int masterTimeUsec;
  unsigned int masterTimeScale;
  unsigned int masterTimePfutz;
  unsigned int masterTimeGfutz;
  unsigned int masterTimeVoice;
  unsigned int masterTimeDyn1;
  unsigned int masterTimeEq;
  unsigned int masterTimeDyn2;
  unsigned int masterTimeMeter;
  unsigned int masterTimeRebuffer;
  SndDspDynamoState dyn1[6];
  SndDspDynamoState dyn2[6];
  SndDspBiquadState eqLow[6];
  SndDspBiquadState eqPeak1[6];
  SndDspBiquadState eqPeak2[6];
  SndDspBiquadState eqHi[6];
  SndDspVoiceFilterState voiceEqFx[6];
  SndDspVoiceFilterState voiceEqHdrfx[6];
  SndDspFutzState gfutzState[6];
  SndDspFutzState pfutzState[6];
};

/* 4199 */
struct sd_mix_bus_param
{
  float reverbG;
  float fxG;
  float voiceG;
  float pfutzG;
  float hdrfxG;
  float uiG;
  float musicG;
  float movieG;
  float vcsG;
  float referenceG;
  int reverbE;
  int fxE;
  int voiceE;
  int pfutzE;
  int hdrfxE;
  int uiE;
  int musicE;
  int movieE;
  int hdrfxCompE;
  int voiceEqE;
  int voiceCompE;
};

/* 4200 */
struct SndDspMasterEqParam
{
  int lowE;
  float lowG;
  float lowF;
  float lowQ;
  int peak1E;
  float peak1G;
  float peak1F;
  float peak1Q;
  int peak2E;
  float peak2G;
  float peak2F;
  float peak2Q;
  int hiE;
  float hiG;
  float hiF;
  float hiQ;
  float eqG;
};

/* 4201 */
struct sd_mix_master_param
{
  SndRvParams radverb;
  sd_mix_param_state state;
  sd_mix_bus_param bus;
  SndDspDynamoParam dyn1;
  SndDspDynamoParam dyn2;
  SndDspMasterEqParam eq;
  SndDspVoiceFilterParam voiceFilter;
  SndDspFutzParam gfutz;
  SndDspFutzParam pfutz;
  char padding[36];
};

/* 4202 */
struct __cppobj IXAudio2 : IUnknown
{
};

/* 4203 */
struct XAUDIO2_VOICE_DETAILS
{
  unsigned int CreationFlags;
  unsigned int InputChannels;
  unsigned int InputSampleRate;
};

/* 4204 */
struct IXAudio2Voice
{
  IXAudio2VoiceVtbl *vfptr;
};

/* 4205 */
struct XAUDIO2_SEND_DESCRIPTOR
{
  unsigned int Flags;
  IXAudio2Voice *pOutputVoice;
};

/* 4206 */
const struct XAUDIO2_VOICE_SENDS
{
  unsigned int SendCount;
  XAUDIO2_SEND_DESCRIPTOR *pSends;
};

/* 4207 */
struct XAUDIO2_EFFECT_DESCRIPTOR
{
  IUnknown *pEffect;
  int InitialState;
  unsigned int OutputChannels;
};

/* 4208 */
const struct XAUDIO2_EFFECT_CHAIN
{
  unsigned int EffectCount;
  XAUDIO2_EFFECT_DESCRIPTOR *pEffectDescriptors;
};

/* 4209 */
const struct XAUDIO2_FILTER_PARAMETERS
{
  XAUDIO2_FILTER_TYPE Type;
  float Frequency;
  float OneOverQ;
};

/* 4210 */
struct IXAudio2VoiceVtbl
{
  void (__stdcall *GetVoiceDetails)(IXAudio2Voice *this, XAUDIO2_VOICE_DETAILS *);
  _BYTE gap4[8];
  HRESULT (__stdcall *EnableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
  HRESULT (__stdcall *DisableEffect)(IXAudio2Voice *this, unsigned int, unsigned int);
  void (__stdcall *GetEffectState)(IXAudio2Voice *this, unsigned int, int *);
  HRESULT (__stdcall *SetEffectParameters)(IXAudio2Voice *this, unsigned int, const void *, unsigned int, unsigned int);
  HRESULT (__stdcall *GetEffectParameters)(IXAudio2Voice *this, unsigned int, void *, unsigned int);
  HRESULT (__stdcall *SetFilterParameters)(IXAudio2Voice *this, XAUDIO2_FILTER_PARAMETERS *, unsigned int);
  void (__stdcall *GetFilterParameters)(IXAudio2Voice *this, XAUDIO2_FILTER_PARAMETERS *);
  HRESULT (__stdcall *SetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, XAUDIO2_FILTER_PARAMETERS *, unsigned int);
  void (__stdcall *GetOutputFilterParameters)(IXAudio2Voice *this, IXAudio2Voice *, XAUDIO2_FILTER_PARAMETERS *);
  HRESULT (__stdcall *SetVolume)(IXAudio2Voice *this, float, unsigned int);
  void (__stdcall *GetVolume)(IXAudio2Voice *this, float *);
  HRESULT (__stdcall *SetChannelVolumes)(IXAudio2Voice *this, unsigned int, const float *, unsigned int);
  void (__stdcall *GetChannelVolumes)(IXAudio2Voice *this, unsigned int, float *);
  HRESULT (__stdcall *SetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, const float *, unsigned int);
  void (__stdcall *GetOutputMatrix)(IXAudio2Voice *this, IXAudio2Voice *, unsigned int, unsigned int, float *);
  void (__stdcall *DestroyVoice)(IXAudio2Voice *this);
};

/* 4211 */
struct __cppobj IXAudio2MasteringVoice : IXAudio2Voice
{
};

/* 4212 */
struct __cppobj IXAudio2SourceVoice : IXAudio2Voice
{
};

/* 4213 */
struct IXAudio2VoiceCallback
{
  IXAudio2VoiceCallbackVtbl *vfptr;
};

/* 4214 */
struct IXAudio2VoiceCallbackVtbl
{
  void (__stdcall *OnVoiceProcessingPassStart)(IXAudio2VoiceCallback *this, unsigned int);
  void (__stdcall *OnVoiceProcessingPassEnd)(IXAudio2VoiceCallback *this);
  void (__stdcall *OnStreamEnd)(IXAudio2VoiceCallback *this);
  void (__stdcall *OnBufferStart)(IXAudio2VoiceCallback *this, void *);
  void (__stdcall *OnBufferEnd)(IXAudio2VoiceCallback *this, void *);
  void (__stdcall *OnLoopEnd)(IXAudio2VoiceCallback *this, void *);
  void (__stdcall *OnVoiceError)(IXAudio2VoiceCallback *this, void *, HRESULT);
};

/* 4215 */
struct __cppobj sd_xa2_callback : IXAudio2VoiceCallback
{
};

/* 4216 */
struct __unaligned __declspec(align(2)) tWAVEFORMATEX
{
  unsigned __int16 wFormatTag;
  unsigned __int16 nChannels;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
  unsigned __int16 wBitsPerSample;
  unsigned __int16 cbSize;
};

/* 4217 */
union $C7B45A521DD9425F10AF23801AD4919D
{
  unsigned __int16 wValidBitsPerSample;
  unsigned __int16 wSamplesPerBlock;
  unsigned __int16 wReserved;
};

/* 4218 */
struct WAVEFORMATEXTENSIBLE
{
  tWAVEFORMATEX Format;
  $C7B45A521DD9425F10AF23801AD4919D Samples;
  unsigned int dwChannelMask;
  _GUID SubFormat;
};

/* 4219 */
struct XAUDIO2_DEVICE_DETAILS
{
  wchar_t DeviceID[256];
  wchar_t DisplayName[256];
  XAUDIO2_DEVICE_ROLE Role;
  WAVEFORMATEXTENSIBLE OutputFormat;
};

/* 4220 */
struct sd_globals
{
  unsigned int testTone;
  unsigned int running;
  unsigned int threadExit;
  unsigned int buffersSubmitted;
  sd_decoder_interface decoderInterfaces[11];
  sd_decoder_pcm16 pcm16InstancePool[100];
  sd_decoder pcm16Pool[100];
  sd_decoder flacPool[100];
  sd_decoder_flac flacInstancePool[100];
  bool decodeThreadActive;
  float decodeWaitTime;
  float decodeProcessTime;
  sd_voice_param *voiceParamFreeList;
  __declspec(align(128)) sd_voice_param voiceParamPool[200];
  sd_voice voicePool[100];
  int voiceYearnsToBeFree[100];
  __declspec(align(128)) sd_voice_param *voiceNewParam[100];
  __declspec(align(128)) sd_voice_param *voiceParam[100];
  __declspec(align(128)) __int16 voiceDecodeBuffer[819200];
  SndRvState radverb;
  __declspec(align(64)) float radverbDelayLine[131072];
  sd_mix_master_state mixMasterState;
  sd_mix_master_param *mixParamNew;
  sd_mix_master_param *mixParam;
  __declspec(align(128)) sd_mix_master_param mixParamPool[4];
  float busBuffers[13824];
  float tempBlockBuffer[1536];
  sd_voice *voices[68];
  __declspec(align(128)) float busScale[9];
  unsigned int decoderMonoInUse;
  unsigned int decoderStereoInUse;
  unsigned int voiceParamInUse;
  unsigned int voiceInUse;
  unsigned int mixParamInUse;
  unsigned int mixParamAllocated;
  float mixTimeUsec;
  float mixWaitTimeUsec;
  float mixVoicesUsec;
  float mixReverbUsec;
  float mixMasterUsec;
  float decodePostTimeUsec;
  float decodePreTimeUsec;
  unsigned int voiceStarvationCount;
  unsigned int masterStarvationCount;
  unsigned int streamStarvationCount;
  unsigned int mixVoiceDmaUsec;
  unsigned int mixVoiceSpuUsec;
  unsigned int mp3DecoderSpuAveUsec;
  bool (__cdecl *auxCallback)(float *, unsigned int, unsigned int);
  bool (__cdecl *vcsCallback)(float *, unsigned int, unsigned int, bool *);
  IXAudio2 *xa2;
  IXAudio2MasteringVoice *xa2MasterVoice;
  IXAudio2SourceVoice *xa2SourceVoice;
  sd_xa2_callback xa2Callback;
  void *bufferReadyEvent;
  unsigned int buffersFlying;
  __declspec(align(128)) float xa2MasterBuffers[9216];
  bool xmpOverride;
  int deviceIndex;
  int deviceGUIDValid;
  _GUID deviceGUID;
  XAUDIO2_DEVICE_DETAILS details;
  void *voiceMixEvent;
  void *radverbEvent;
  void *masteringEvent;
  void *voiceActiveEvent;
  void *voiceFreeEvent;
};

/* 4221 */
struct IXAudio2EngineCallback
{
  IXAudio2EngineCallbackVtbl *vfptr;
};

/* 4222 */
struct IXAudio2EngineCallbackVtbl
{
  void (__stdcall *OnProcessingPassStart)(IXAudio2EngineCallback *this);
  void (__stdcall *OnProcessingPassEnd)(IXAudio2EngineCallback *this);
  void (__stdcall *OnCriticalError)(IXAudio2EngineCallback *this, HRESULT);
};

/* 4223 */
struct __cppobj SD_XAudio2Callbacks : IXAudio2EngineCallback
{
};

/* 4224 */
struct __s_GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 4225 */
struct __cppobj IXAudio2SubmixVoice : IXAudio2Voice
{
};

/* 4226 */
struct XAUDIO2_PERFORMANCE_DATA
{
  unsigned __int64 AudioCyclesSinceLastQuery;
  unsigned __int64 TotalCyclesSinceLastQuery;
  unsigned int MinimumCyclesPerQuantum;
  unsigned int MaximumCyclesPerQuantum;
  unsigned int MemoryUsageInBytes;
  unsigned int CurrentLatencyInSamples;
  unsigned int GlitchesSinceEngineStarted;
  unsigned int ActiveSourceVoiceCount;
  unsigned int TotalSourceVoiceCount;
  unsigned int ActiveSubmixVoiceCount;
  unsigned int ActiveResamplerCount;
  unsigned int ActiveMatrixMixCount;
  unsigned int ActiveXmaSourceVoices;
  unsigned int ActiveXmaStreams;
};

/* 4227 */
struct XAUDIO2_DEBUG_CONFIGURATION
{
  unsigned int TraceMask;
  unsigned int BreakMask;
  int LogThreadID;
  int LogFileline;
  int LogFunctionName;
  int LogTiming;
};

/* 4228 */
struct XMA2WAVEFORMATEX
{
  tWAVEFORMATEX wfx;
  unsigned __int16 NumStreams;
  unsigned int ChannelMask;
  unsigned int SamplesEncoded;
  unsigned int BytesPerBlock;
  unsigned int PlayBegin;
  unsigned int PlayLength;
  unsigned int LoopBegin;
  unsigned int LoopLength;
  char LoopCount;
  char EncoderVersion;
  unsigned __int16 BlockCount;
};

/* 4229 */
struct XAUDIO2_VOICE_STATE
{
  void *pCurrentBufferContext;
  unsigned int BuffersQueued;
  unsigned __int64 SamplesPlayed;
};

/* 4230 */
struct XAUDIO2_BUFFER
{
  unsigned int Flags;
  unsigned int AudioBytes;
  const char *pAudioData;
  unsigned int PlayBegin;
  unsigned int PlayLength;
  unsigned int LoopBegin;
  unsigned int LoopLength;
  unsigned int LoopCount;
  void *pContext;
};

/* 4231 */
struct XAUDIO2_BUFFER_WMA
{
  const unsigned int *pDecodedPacketCumulativeBytes;
  unsigned int PacketCount;
};

/* 4232 */
struct sd_stream_preload
{
  const char *fileName;
  int fileHandle;
  unsigned int offset;
  unsigned int size;
  unsigned int latencyMs;
};

/* 4233 */
struct sd_stream_globals
{
  sd_stream streamPool[20];
  sd_stream_buffer streamBufferPool[20];
  char *streamBlob;
  volatile int streamIoActive;
  unsigned int streamBuffersUsed;
  unsigned int streamBuffersFree;
  unsigned int streamInUse;
  unsigned int streamStarvationCount;
  sd_stream_preload preloads[16];
};

/* 4234 */
struct SndStartAliasInfo
{
  SndAlias *alias;
  SndEntHandle sndEnt;
  vec3_t org;
  vec3_t dir;
  float volModStart;
  int timeshift;
  float fadetime;
  int startDelay;
  SndOcclusionStartCache *ocache;
  SndPlayback *playback;
  int playbackId;
  int secondaryId;
  bool startPaused;
  bool setScriptValues;
  float scriptPitch;
  float scriptPitchRate;
  float scriptAttenuation;
  float scriptAttenuationRate;
};

/* 4235 */
struct SndOverlayInfo
{
  char pszSampleName[128];
  char name[64];
  char spatial[8];
  int channel;
  float fGlobalPriority;
  float fLosOcclusion;
  float fDry;
  float fWet;
  float fDistance;
  float fPitch;
  int iEntity;
  int group;
  int pan;
  __int64 played;
  int bus;
  int duckGroup;
};

/* 4236 */
struct SndCsvParseEntry
{
  const char *name;
  unsigned int offset;
  bool required;
  SndCsvParseEntryType type;
  float minimum;
  float maximum;
  unsigned int length;
  const char **enum_ids;
};

/* 4237 */
struct SndAssetToLoad
{
  int bankFileId;
  int fileOffset;
  int size;
  void *destination;
  unsigned int memoryOffset;
  SndLoadState state;
  unsigned int assetId;
  SndBank *bank;
  int streamRequestId;
  unsigned int loadId;
};

/* 4238 */
struct SndAliasLookupNode
{
  unsigned int id;
  SndAliasList *list;
};

/* 4239 */
struct SndAliasLookupCache
{
  SndAliasLookupNode cache[1024];
};

/* 4240 */
struct __declspec(align(128)) SndBankGlobals
{
  SndAssetBankEntry bankEntries[16487];
  unsigned int bankEntryMagic;
  unsigned int bankCount;
  unsigned int patchCount;
  SndBank *banks[32];
  SndPatch *patches[8];
  void *blockingEvent;
  bool blockingEventInit;
  bool blockingSuccess;
  bool loadGate;
  unsigned int assetLoadIndex;
  unsigned int assetLoadId;
  SndAssetToLoad assetLoadQueue[2048];
  SndAssetToLoad assetLoadActive[16];
  SndBank *sequentialReadInProgress;
  bool bankEntriesInUse;
  __declspec(align(64)) SndAssetBankHeader bankHeader;
  SndAliasLookupCache aliasCache;
  unsigned int missingAliasCache[1024];
  unsigned int aliasCacheHit;
  unsigned int aliasCacheMiss;
  unsigned int aliasCacheCollision;
  float assetLoadPercent;
};

/* 4241 */
struct sentient_fields_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  void (__cdecl *setter)(sentient_t *, sentient_fields_s *);
  void (__cdecl *getter)(sentient_t *, sentient_fields_s *);
};

/* 4242 */
struct SentientGlobals
{
  int lastTime;
  int lastSample;
  vec3_t playerTrail[2];
  int sampleTime[2];
};

/* 4243 */
struct PathBlockPlanes
{
  vec2_t vNormal[5];
  float fDist[5];
  int iPlaneCount;
};

/* 4244 */
struct pathsort_t
{
  pathnode_t *node;
  float metric;
  float distMetric;
};

/* 4245 */
struct node_field_t
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  unsigned int whichbits;
  void (__cdecl *getter)(pathnode_t *, int);
};

/* 4246 */
struct nodespawn_t
{
  char *name;
  nodeType type;
};

/* 4247 */
struct pathstatic_t
{
  pathlink_s *pathLinks;
  unsigned __int16 *indirectNodes;
  char *pathbuf;
};

/* 4248 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_41
{
  const void *pVFTable;
  void *spare;
  char name[41];
};

/* 4249 */
struct NodeNums
{
  int array[2][8192];
};

/* 4250 */
struct sightclip_t
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t outerSize;
  vec3_t start;
  vec3_t end;
  int passEntityNum[2];
  int contentmask;
};

/* 4251 */
struct pathnode_parent_t
{
  vec3_t origin_loc;
  int entnum;
  pathnode_t *m_node;
  pathnode_parent_t *m_next;
};

/* 4252 */
struct PathLinkInfo
{
  unsigned __int16 from;
  unsigned __int16 to;
  unsigned __int16 prev;
  unsigned __int16 next;
};

/* 4253 */
struct $C7267F033D74979AA51019F00E32A0BB
{
  vec3_t origin;
  vec2_t enemyPos;
  int checkEnemyPos;
  float maxDist;
  float maxDistSq;
  float maxHeight;
  float maxHeightSq;
  int typeFlags;
  int spawnFlags;
  pathsort_t *nodes;
  int maxNodes;
  int nodeCount;
};

/* 4254 */
struct __declspec(align(64)) pathlocal_t
{
  PathLinkInfo pathLinkInfoArray[2560];
  int pathLinkInfoArrayInited;
  unsigned int actualNodeCount;
  unsigned int extraNodes;
  unsigned int originErrors;
  $C7267F033D74979AA51019F00E32A0BB circle;
};

/* 4255 */
struct NodeTypeToName
{
  nodeType type;
  const char *name;
};

/* 4256 */
struct phys_simple_allocator<pathnode_resized_links_t>
{
  int m_count;
};

/* 4257 */
struct pathnode_resized_links_t
{
  pathnode_t *m_node;
  pathlink_s *m_original_links;
  int m_original_link_count;
  pathlink_s *m_new_links;
  int m_new_link_count;
};

/* 4258 */
struct phys_simple_allocator<pathnode_parent_t>
{
  int m_count;
};

/* 4259 */
struct badplace_arc_t
{
  vec3_t origin;
  float radius;
  float halfheight;
  float angle0;
  float angle1;
};

/* 4260 */
struct std::_Pair_base<pathsort_t *,pathsort_t *>
{
  pathsort_t *first;
  pathsort_t *second;
};

/* 4261 */
struct __cppobj std::pair<pathsort_t *,pathsort_t *> : std::_Pair_base<pathsort_t *,pathsort_t *>
{
};

/* 4262 */
struct scr_entref_t
{
  unsigned __int16 entnum;
  unsigned __int16 classnum;
  LocalClientNum_t client;
};

/* 4263 */
struct RadiantCommand
{
  RadiantCommandType type;
  int guid;
  char strCommand[512];
};

/* 4264 */
struct threat_bias_t
{
  unsigned __int16 groupName[16];
  int threatTable[16][16];
  int threatGroupCount;
};

/* 4265 */
struct PotentialTargetData
{
  gentity_t *entity;
  int threat;
  float distToEnt;
  vec2_t dirToEnt;
};

/* 4266 */
struct team_move_other_context_t
{
  sentient_t *other;
  vec3_t vOrgOther;
  vec2_t vVelOther;
  vec2_t vDelta;
  vec2_t vPerp;
  float fPosDeltaLengthSqrd;
  float fScale;
};

/* 4267 */
struct team_move_context_t
{
  actor_t *self;
  vec2_t vVelSelf;
  vec3_t vOrgSelf;
  vec2_t vVelDirSelf;
  float fVelSelfSqrd;
  float fDeltaCorrection;
  float fIntervalSqrd;
  float fWalkIntervalSqrd;
  float fMaxIntervalSqrd;
  int bFailedLookahead;
  float fDodgePosDeltaLengthSqrd;
  int dodgeEntities[72];
  int dodgeEntityCount;
  sentient_t *pDodgeOther;
  bool bPileUp;
  float fSlowDownPosDeltaLengthSqrd;
  sentient_t *pSlowDownOther;
  vec2_t vVelSlowDownOther;
};

/* 4268 */
struct ai_funcs_t
{
  bool (__fastcall *pfnStart)(actor_t *, ai_state_t);
  void (__fastcall *pfnFinish)(actor_t *, ai_state_t);
  void (__fastcall *pfnSuspend)(actor_t *, ai_state_t);
  bool (__fastcall *pfnResume)(actor_t *, ai_state_t);
  actor_think_result_t (__fastcall *pfnThink)(actor_t *);
  void (__fastcall *pfnTouch)(actor_t *, gentity_t *);
  void (__fastcall *pfnPain)(actor_t *, gentity_t *, int, vec3_t *, const int, vec3_t *, hitLocation_t);
  void (__fastcall *pfnReact)(actor_t *, gentity_t *, vec3_t *);
};

/* 4269 */
struct __cppobj __declspec(align(16)) colgeom_visitor_inlined_t<200> : colgeom_visitor_t
{
  int nprims;
  bool overflow;
  col_prim_t prims[200];
};

/* 4270 */
struct sentient_sort_t
{
  sentient_t *sentient;
  float fMetric;
  float distSqrd;
};

/* 4271 */
struct BuiltinMethodDef
{
  const char *actionString;
  unsigned int constId;
  int min_args;
  int max_args;
  void (__cdecl *actionFunc)(scr_entref_t);
  int type;
};

/* 4272 */
struct entityHandler_t
{
  void (__cdecl *think)(gentity_t *);
  void (__cdecl *reached)(gentity_t *);
  void (__cdecl *blocked)(gentity_t *, gentity_t *);
  void (__cdecl *touch)(gentity_t *, gentity_t *, int);
  void (__cdecl *use)(gentity_t *, gentity_t *, gentity_t *);
  void (__cdecl *pain)(gentity_t *, gentity_t *, int, vec3_t *, const int, vec3_t *, hitLocation_t, Weapon);
  void (__cdecl *react)(gentity_t *, gentity_t *, vec3_t *);
  void (__cdecl *die)(gentity_t *, gentity_t *, gentity_t *, int, int, Weapon, vec3_t *, hitLocation_t, int);
  void (__cdecl *entinfo)(gentity_t *, vec3_t *);
  void (__cdecl *controller)(gentity_t *, int *);
  int methodOfDeath;
  int splashMethodOfDeath;
};

/* 4273 */
struct __cppobj ActorCmdHelper
{
};

/* 4274 */
struct __declspec(align(16)) actor_physics_local_t
{
  float fFrameTime;
  int bIsWalking;
  int bGroundPlane;
  trace_t groundTrace;
  float fImpactSpeed;
  vec3_t vPrevOrigin;
  vec3_t vPrevVelocity;
  int iTraceMask;
  float stepheight;
};

/* 4275 */
struct __cppobj ai_gjk_slide_move_input_t : gjk_slide_move_input_t
{
  actor_physics_t *m_pPhys;
};

/* 4276 */
struct FaceQuadrantThresholds
{
  float forwardDot;
  float sideDot;
};

/* 4277 */
struct CustomSearchInfo_FindPathWithLOS
{
  pathnode_t *m_pNodeTo;
  float m_fWithinDistSqrd;
  vec3_t startPos;
  float negotiationOverlapCost;
};

/* 4278 */
struct CustomSearchInfo_FindCloseNode
{
  vec3_t goalPos;
  pathnode_t *closestNode;
  float closestDistSq;
};

/* 4279 */
struct CustomSearchInfo_FindPath
{
  pathnode_t *m_pNodeTo;
  vec3_t startPos;
  int randomWeightIndex;
  float randomNodeCosts[4];
  float chokePointWeights[4];
  float negotiationOverlapCost;
};

/* 4280 */
struct CustomSearchInfo_FindPathAway
{
  vec3_t m_vAwayFromPos;
  float m_fDistAway;
  float m_fDistAwaySqrd;
  float m_fInitialDistAwaySq;
  float m_fBestScore;
  pathnode_t *m_pBestNode;
};

/* 4281 */
struct __cppobj CustomSearchInfo_FindPathAwayNotCrossPlanes : CustomSearchInfo_FindPathAway
{
  int m_iPlaneCount;
  vec2_t *m_vNormal;
  float *m_fDist;
};

/* 4282 */
struct CustomSearchInfo_CouldAttack
{
  pathnode_t *m_pNodeTo;
  pathnode_t *attackNode;
};

/* 4283 */
struct __cppobj CustomSearchInfo_FindPathNotCrossPlanes : CustomSearchInfo_FindPath
{
  int m_iPlaneCount;
  vec2_t *m_vNormal;
  float *m_fDist;
};

/* 4284 */
struct __cppobj CustomSearchInfo_FindPathInCylinderWithLOSNotCrossPlanes : CustomSearchInfo_FindPathWithLOS
{
  actor_goal_s *goal;
  int m_iPlaneCount;
  vec2_t *m_vNormal;
  float *m_fDist;
};

/* 4285 */
struct __cppobj CustomSearchInfo_FindPathInCylinderWithLOS : CustomSearchInfo_FindPathWithLOS
{
  actor_goal_s *goal;
};

/* 4286 */
struct CustomSearchInfo_FindPathClosestPossible
{
  float m_fBestScore;
  pathnode_t *m_pBestNode;
  pathnode_t *m_pNodeTo;
  float negotiationOverlapCost;
};

/* 4287 */
struct CustomSearchInfo_FindPathWithWidth
{
  pathnode_t *m_pNodeTo;
  float width;
  vec2_t perp;
};

/* 4288 */
struct BotSearchInfo
{
  pathnode_t *m_pNodeTo;
  team_t m_team;
  int m_owner;
};

/* 4289 */
struct actor_fields_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  void (__cdecl *setter)(actor_t *, actor_fields_s *);
  void (__cdecl *getter)(actor_t *, actor_fields_s *);
};

/* 4290 */
struct AnimScriptList
{
  scr_animscript_t combat;
  scr_animscript_t concealment_crouch;
  scr_animscript_t concealment_prone;
  scr_animscript_t concealment_stand;
  scr_animscript_t cover_arrival;
  scr_animscript_t cover_crouch;
  scr_animscript_t cover_left;
  scr_animscript_t cover_prone;
  scr_animscript_t cover_right;
  scr_animscript_t cover_stand;
  scr_animscript_t death;
  scr_animscript_t grenade_return_throw;
  scr_animscript_t init;
  scr_animscript_t pain;
  scr_animscript_t react;
  scr_animscript_t move;
  scr_animscript_t scripted;
  scr_animscript_t stop;
  scr_animscript_t grenade_cower;
  scr_animscript_t flashed;
  scr_animscript_t jump;
  scr_animscript_t turn;
  scr_animscript_t weapons[256];
};

/* 4291 */
struct $1A6845BF0A9799FDBB067CB1FBAEC06F
{
  const char *name;
  dvar_t **defaultDistDvar;
  float defaultHeight;
};

/* 4292 */
const struct $72D8C24A32B5D45C998C69A1FEEC381B
{
  const char *name;
  dvar_t **defaultDistDvar;
  float defaultHeight;
};

/* 4293 */
struct AIEventListener
{
  int entIndex;
  unsigned int events;
};

/* 4294 */
struct gameTypeScript_t
{
  char pszScript[64];
  char pszName[64];
  int bTeamBased;
};

/* 4295 */
struct $98D7F324300C6CE859AD07EA743EA3F1
{
  int main;
  int startupgametype;
  int playerconnect;
  int playerdisconnect;
  int playerdamage;
  int playerkilled;
  int playermelee;
  int votecalled;
  int playervote;
  int playerrevive;
  int actordamage;
  int actorkilled;
  int vehicledamage;
  int vehicleradiusdamage;
  int playerlaststand;
  int playermigrated;
  int hostmigration;
  int hostmigration_save;
  int prehostmigration_save;
  int iNumGameTypes;
  gameTypeScript_t list[32];
};

/* 4296 */
struct __declspec(align(8)) corpseInfo_t
{
  XAnimTree_s *tree;
  int entnum;
  int time;
  clientInfo_t ci;
  bool falling;
};

/* 4297 */
struct scr_data_t
{
  int level_gamemode_callback_setup;
  int levelscript;
  int scripted_init;
  int gametypescript;
  int allies;
  int axis;
  $98D7F324300C6CE859AD07EA743EA3F1 gametype;
  int delete_;
  int initstructs;
  int createstruct;
  int findstruct;
  AnimScriptList dogAnim;
  AnimScriptList zombieAnim;
  AnimScriptList zombieDogAnim;
  corpseInfo_t playerCorpseInfo[4];
  XAnimTree_s *actorXAnimTrees[32];
  corpseInfo_t actorCorpseInfo[8];
  int destructible_callback;
  int challenge_callback;
  int gunchallenge_callback;
  int rankup_callback;
  int medal_callback;
  int onaddplayerstat_scriptedprocesscontracts_callback;
  int onaddweaponstat_scriptedprocesscontracts_callback;
  int givecontractrewards_callback;
  int updatespawnpoints;
  int glassSmash;
  int finalizeInitialization;
  int menuresponse_callback;
};

/* 4298 */
struct $4BAAEF421A7DA1E87559C5E7C38D0061
{
  unsigned __int32 outOfSkinnedCachedVerts : 1;
  unsigned __int32 almostoutOfSkinnedCachedVerts : 1;
};

/* 4299 */
union $0DD7435D19B06ACCD2620FF8BC015656
{
  $4BAAEF421A7DA1E87559C5E7C38D0061 __s0;
  unsigned int allbits;
};

/* 4300 */
struct r_SkinConditions
{
  $0DD7435D19B06ACCD2620FF8BC015656 ___u0;
};

/* 4301 */
struct badplace_brush_t
{
  gentity_t *volume;
  float radius;
};

/* 4302 */
union badplace_parms_t
{
  badplace_arc_t arc;
  badplace_brush_t brush;
};

/* 4303 */
struct _pendedBadPlace
{
  badplace_parms_t params;
  unsigned int name;
  int duration;
  int teamflags;
  int type;
};

/* 4304 */
struct badplace_t
{
  int endtime;
  int pingTime;
  unsigned __int16 name;
  char type;
  char teamflags;
  int depth;
  badplace_parms_t parms;
};

/* 4305 */
struct weaponParms
{
  vec3_t forward;
  vec3_t right;
  vec3_t up;
  vec3_t muzzleTrace;
  vec3_t gunForward;
  Weapon weapon;
  WeaponVariantDef *weapVariantDef;
  WeaponDef *weapDef;
};

/* 4306 */
struct checkStopParams_t
{
  bool hadPath;
  vec3_t lastPathLookaheadDir;
  vec3_t lastPathGoal;
  pathnode_t *node;
  pathnode_t *prevNode;
};

/* 4307 */
struct PhysicsInputs
{
  vec3_t vVelocity;
  unsigned __int16 groundEntNum;
  int bHasGroundPlane;
  float groundplaneSlope;
  int iFootstepTimer;
};

/* 4308 */
struct ddlStackMember_t
{
  ddlMemberDef_t *ddlMember;
  int arrayIndex;
};

/* 4309 */
struct ddlStack_t
{
  ddlStackMember_t stackMember[16];
  int top;
};

/* 4310 */
struct DdlBinder
{
  const char *m_name;
  const char *m_ddlFile;
  const char *m_ddlPath[6];
  int m_depth;
  int m_value;
  DdlBinder *m_next;
};

/* 4311 */
struct searchState_t
{
  ddlDef_t *ddl;
  int offset;
  char path[256];
  ddlMemberDef_t *member;
};

/* 4312 */
union sval_u
{
  char type;
  unsigned int stringValue;
  unsigned int idValue;
  float floatValue;
  int intValue;
  sval_u *node;
  unsigned int sourcePosValue;
  const char *codePosValue;
  const char *debugString;
  scr_block_s *block;
};

/* 4313 */
struct scr_localVar_t
{
  unsigned int name;
  unsigned int sourcePos;
};

/* 4314 */
struct scr_block_s
{
  int abortLevel;
  int localVarsCreateCount;
  int localVarsPublicCount;
  int localVarsCount;
  char localVarsInitBits[8];
  scr_localVar_t localVars[64];
};

/* 4315 */
struct stype_t
{
  sval_u val;
  unsigned int pos;
};

/* 4316 */
struct scrCompilePub_t
{
  int value_count;
  int far_function_count;
  unsigned int loadedscripts;
  unsigned int scriptsPos;
  unsigned int scriptsCount;
  unsigned int builtinFunc;
  unsigned int builtinMeth;
  const char *in_ptr;
  const char *parseBuf;
  bool script_loading;
  bool allowedBreakpoint;
  int developer_statement;
  char *opcodePos;
  unsigned int programLen;
};

/* 4317 */
struct yy_buffer_state
{
  _iobuf *yy_input_file;
  char *yy_ch_buf;
  char *yy_buf_pos;
  unsigned int yy_buf_size;
  int yy_n_chars;
  int yy_is_our_buffer;
  int yy_is_interactive;
  int yy_at_bol;
  int yy_fill_buffer;
  int yy_buffer_status;
};

/* 4318 */
struct __declspec(align(4)) scrAnimPub_t
{
  unsigned int animtrees;
  unsigned int animtree_node;
  unsigned int animTreeNames;
  scr_animtree_t xanim_lookup[2][128];
  unsigned int xanim_num[2];
  unsigned int animTreeIndex;
  bool animtree_loading;
};

/* 4319 */
struct __declspec(align(2)) GSC_OBJ
{
  char magic[8];
  unsigned int source_crc;
  unsigned int include_offset;
  unsigned int animtree_offset;
  unsigned int cseg_offset;
  unsigned int stringtablefixup_offset;
  unsigned int exports_offset;
  unsigned int imports_offset;
  unsigned int fixup_offset;
  unsigned int profile_offset;
  unsigned int cseg_size;
  unsigned __int16 name;
  unsigned __int16 stringtablefixup_count;
  unsigned __int16 exports_count;
  unsigned __int16 imports_count;
  unsigned __int16 fixup_count;
  unsigned __int16 profile_count;
  char include_count;
  char animtree_count;
  char flags;
};

/* 4320 */
struct GSC_OBJGDB
{
  char magic[8];
  unsigned int version;
  unsigned int source_crc;
  unsigned int lineinfo_count;
};

/* 4321 */
struct debugFileInfo_t
{
  const char *filename;
  void *startAddr;
  void *endAddr;
  char **lineStartAddr;
  int lineStartAddrCount;
  char *source;
  int sourceLen;
  GSC_OBJGDB *gdb;
};

/* 4322 */
struct objFileInfo_t
{
  GSC_OBJ *activeVersion;
  GSC_OBJ *baselineVersion;
  debugFileInfo_t debugInfo;
  gscProfileInfo_t *profileInfo;
  int profileInfoCount;
};

/* 4323 */
struct debugger_sval_s
{
  debugger_sval_s *next;
};

/* 4324 */
struct ScriptExpression_t
{
  sval_u parseData;
  int breakonExpr;
  debugger_sval_s *exprHead;
};

/* 4325 */
struct __declspec(align(8)) breakpointData_t
{
  int type;
  int oldType;
  int id;
  char *pos;
  char op;
  int uniqueId;
  objFileInfo_t *fileInfo;
  int lineNum;
  unsigned int localId;
  const char *watch_expr_text;
  ScriptExpression_t watch_expr;
  const char *cond_expr_text;
  ScriptExpression_t cond_expr;
  unsigned int context;
  VariableValue oldValue;
  unsigned int notifyStringId;
};

/* 4326 */
struct __declspec(align(8)) scrDebuggerGlob_t
{
  breakpointData_t breakpointData[132];
  bool send_file_info;
  breakpointData_t *activeBreakpoint;
  VariableValue *activeBreakpointStack;
  unsigned int activeBreakpointLocalID;
  volatile bool atBreakpoint;
  bool debugger_inited_system;
  volatile bool abort;
  bool forceBreak;
  bool forceJump;
  char *forceJumpPos;
  bool testForDataBreakpoints;
  bool testForNotifyBreakpoints;
  bool reportThreadUsage;
  const char *pendingShellCommand;
};

/* 4327 */
struct CodeBreakpoint
{
  char filename[64];
  int lineNum;
  char *addr;
};

/* 4328 */
struct CodeBreakpoints
{
  CodeBreakpoint breakpoints[128];
  int num;
};

/* 4329 */
struct scrVmGlob_t
{
  VariableValue eval_stack[2];
  const char *dialog_error_message;
  int loading;
  int starttime;
  unsigned int localVarsStack[2048];
  bool recordPlace;
  const char *lastFileName;
  int lastLine;
};

/* 4330 */
struct scrVmDebugPub_t
{
  int dummy;
};

/* 4332 */
union $723F2098A14135B22EFD5C83DDAB9B18
{
  void (__cdecl *func)();
  void (__cdecl *method)(scr_entref_t);
};

/* 4331 */
struct _gscBuiltinProfileInfo_t
{
  $723F2098A14135B22EFD5C83DDAB9B18 ___u0;
  const char *name;
  gscProfileInfo_t profileInfo;
  _gscBuiltinProfileInfo_t *next;
};

/* 4333 */
struct ThreadDebugInfo
{
  char *pos[32];
  int posSize;
  float varUsage;
  float endonUsage;
};

/* 4334 */
struct VariableDebugInfo
{
  char *pos;
  const char *fileName;
  const char *functionName;
  int varUsage;
};

/* 4335 */
struct bitarray<24576>
{
  int array[768];
};

/* 4336 */
union $FA152364550AB5CDF6142CD3B51D5E84
{
  unsigned int prev;
  unsigned int str;
};

/* 4337 */
struct HashEntry
{
  unsigned int status_next;
  $FA152364550AB5CDF6142CD3B51D5E84 u;
};

/* 4338 */
struct __declspec(align(128)) scrStringGlob_t
{
  HashEntry *hashTable;
  bool inited;
  HashEntry *nextFreeEntry;
  int indentLevel;
  int stringsUsed[32];
};

/* 4339 */
struct __declspec(align(4)) SourceBufferInfo
{
  const char *codePos;
  char *buf;
  const char *sourceBuf;
  int len;
  int sortedIndex;
  bool archive;
};

/* 4340 */
struct scrParserPub_t
{
  SourceBufferInfo *sourceBufferLookup;
  unsigned int sourceBufferLookupLen;
  const char *scriptfilename;
  const char *sourceBuf;
};

/* 4341 */
struct SourceLookup
{
  unsigned int sourcePos;
  int type;
};

/* 4342 */
struct SaveSourceBufferInfo
{
  char *sourceBuf;
  int len;
};

/* 4343 */
struct scrParserGlob_t
{
  SourceLookup *sourcePosLookup;
  unsigned int sourcePosLookupMaxLen;
  unsigned int sourcePosLookupLen;
  unsigned int sourceBufferLookupMaxLen;
  const char *currentCodePos;
  unsigned int currentSourcePosCount;
  SaveSourceBufferInfo *saveSourceBufferLookup;
  unsigned int saveSourceBufferLookupLen;
  int delayedSourceIndex;
  int threadStartSourceIndex;
};

/* 4344 */
struct SCRIPT_PENDING_BINUPDATE
{
  bool is_pending;
  GSC_OBJ *obj;
  GSC_OBJGDB *gdb;
  int objLen;
  int gdbLen;
};

/* 4345 */
struct GSC_IMPORT_ITEM
{
  unsigned __int16 name;
  unsigned __int16 name_space;
  unsigned __int16 num_address;
  char param_count;
  char flags;
};

/* 4346 */
struct GSC_ANIMNODE_ITEM
{
  unsigned int name;
  unsigned int address;
};

/* 4347 */
struct GSC_STRINGTABLE_ITEM
{
  unsigned __int16 string;
  char num_address;
  char type;
};

/* 4348 */
struct GSC_ANIMTREE_ITEM
{
  unsigned __int16 name;
  unsigned __int16 num_tree_address;
  unsigned __int16 num_node_address;
  char pad[2];
};

/* 4349 */
struct GSC_PROFILE_ITEM
{
  unsigned int name;
  unsigned int address;
};

/* 4350 */
struct GSC_EXPORT_ITEM
{
  unsigned int checksum;
  unsigned int address;
  unsigned __int16 name;
  char param_count;
  char flags;
};

/* 4351 */
struct GSC_FIXUP_ITEM
{
  unsigned int offset;
  unsigned int address;
};

/* 4352 */
struct MemoryNode
{
  unsigned __int16 prev;
  unsigned __int16 next;
  unsigned int padding[5];
};

/* 4353 */
struct scrMemTreeGlob_t
{
  MemoryNode *nodes;
  __declspec(align(128)) char leftBits[256];
  char numBits[256];
  char logBits[256];
  unsigned __int16 *head;
  int totalAlloc;
  int totalAllocBuckets;
  int avgAlloc;
  int avgAllocBytes;
};

/* 4354 */
struct scrMemTreeDebugGlob_t
{
  char mt_usage[65536];
  char mt_usage_size[65536];
};

/* 4355 */
struct scrEvaluateGlob_t
{
  bool freezeScope;
  bool freezeObjects;
  bool objectChanged;
};

/* 4356 */
struct SortData
{
  scriptInstance_t inst;
  int parentType;
  unsigned int *names;
  unsigned int *localIds;
};

/* 4357 */
struct debuggerVarUsageData_t
{
  const char *filename;
  int funcIndex;
  int lineNum;
  int count;
  int varCount;
  int endonCount;
  unsigned int threadId;
  int index;
};

/* 4358 */
struct ENT_IDS
{
  unsigned int id;
  unsigned __int16 c;
  unsigned __int16 entnum;
};

/* 4359 */
struct _watchNode_t
{
  const char *refText;
  const char *valueText;
  unsigned int objectId;
  char objectType;
  char oldObjectType;
  VariableValue value;
  ScriptExpression_t expr;
  bool is_expand;
  bool is_valid_value;
  bool is_thread_list;
  bool is_endon_list;
};

/* 4360 */
struct __cppobj DebuggerCriticalSection
{
};

/* 4361 */
struct CaseStatementInfo
{
  unsigned int name;
  char *codePos;
  unsigned int sourcePos;
  CaseStatementInfo *next;
};

/* 4362 */
struct BreakStatementInfo
{
  char *codePos;
  char *nextCodePos;
  BreakStatementInfo *next;
};

/* 4363 */
struct ContinueStatementInfo
{
  char *codePos;
  char *nextCodePos;
  ContinueStatementInfo *next;
};

/* 4364 */
struct PrecacheEntry
{
  unsigned __int16 filename;
  bool include;
  unsigned int sourcePos;
};

/* 4365 */
struct __declspec(align(8)) VariableCompileValue
{
  VariableValue value;
  sval_u sourcePos;
};

/* 4366 */
struct scrCompileGlob_t
{
  char *codePos;
  char *prevOpcodePos;
  unsigned int filePosId;
  unsigned int fileCountId;
  int cumulOffset;
  int maxOffset;
  int maxCallOffset;
  bool bConstRefCount;
  bool in_developer_thread;
  unsigned int developer_thread_sourcePos;
  bool firstThread[2];
  CaseStatementInfo *currentCaseStatement;
  bool bCanBreak;
  BreakStatementInfo *currentBreakStatement;
  bool bCanContinue;
  ContinueStatementInfo *currentContinueStatement;
  scr_block_s **breakChildBlocks;
  int *breakChildCount;
  scr_block_s *breakBlock;
  scr_block_s **continueChildBlocks;
  int *continueChildCount;
  bool forceNotCreate;
  PrecacheEntry *precachescriptList;
  VariableCompileValue value_start[32];
};

/* 4367 */
struct scrAnimGlob_t
{
  const char *start;
  const char *pos;
  unsigned __int16 using_xanim_lookup[2][128];
  int bAnimCheck;
};

/* 4368 */
struct TreeNameMap
{
  int animIndex;
  char strName[80];
};

/* 4369 */
struct ClientTreeStorage
{
  char *strName;
  scr_animtree_t animTree;
  int numIndices;
  TreeNameMap *pTreeNameMap;
};

/* 4370 */
struct ScriptTokenizer
{
  scriptInstance_t inst;
  int m_iNumInStack;
  char m_stack[40][256];
};

/* 4371 */
struct ValueEntry
{
  unsigned int valueName;
  unsigned int theValue;
};

/* 4372 */
struct MD5_CTX
{
  unsigned int i[2];
  unsigned int buf[4];
  char in[64];
  char digest[16];
};

/* 4373 */
struct flamePhysics_t
{
  vec3_t origin;
  vec3_t newPos;
  vec3_t velocity;
  float invStartSpeed;
  float gravity;
  float rotation;
  float rotVel;
};

/* 4374 */
struct flameSize_t
{
  float current;
  float rate;
};

/* 4375 */
struct flameAge_t
{
  int lastUpdateTime;
  int startTime;
  int endTime;
};

/* 4377 */
struct flameList_t
{
  flameGeneric_s *prev;
  flameGeneric_s *next;
};

/* 4376 */
struct flameGeneric_s
{
  flamePhysics_t phys;
  flameSize_t size;
  flameAge_t age;
  flameList_t listGlobal;
  flameList_t listLocal;
  flameStream_s *stream;
  unsigned __int32 type : 3;
  unsigned __int32 delete_chunk : 1;
  unsigned __int32 id : 28;
};

/* 4378 */
struct flameStream_s
{
  flameGeneric_s gen;
  flameRenderList_s *renderList;
  flameTable *flameVars;
  flameChunk_s *chunkList;
  int lastSmokeChunkTime;
  int lastDripChunkTime;
  int entityNum;
  int damage;
  float damageDuration;
  float damageInterval;
  int isKillcamFlame;
  int firingThroughGeo;
};

/* 4379 */
struct flameRender_s
{
  char name[128];
  flameGeneric_s *fireList;
  flameGeneric_s *dripsList;
};

/* 4380 */
struct flameRenderList_s
{
  vec3_t fuelVerts[128];
  vec3_t flameVerts[128];
  flameRender_s *flameRend;
};

/* 4381 */
struct flameChunk_s
{
  flameGeneric_s gen;
  int spawnFireInterval;
  int lastSpawnFire;
  int spawnDripsInterval;
  int spawnSmokeInterval;
};

/* 4382 */
struct __declspec(align(4)) flameSource_t
{
  vec3_t origin;
  vec3_t angle;
  vec3_t entityOrigin;
  flameStream_s *currentStream;
  int lastUsedTime;
  int isKillcamFlame;
  int firingThroughGeo;
  int entityNum;
  int firstDobjHandle;
  int thirdDobjHandle;
  int lastSoundTime;
  vec3_t flameSoundPoint;
  bool bIsFiring;
  bool inUse;
  bool is_server_alloc;
  bool wasFiring;
  char firstBoneIndex;
  char thirdBoneIndex;
};

/* 4383 */
struct __declspec(align(16)) phys_static_array<flameGeneric_s *,1000>
{
  char m_buffer[4000];
  flameGeneric_s **const m_slot_array;
  int m_alloc_count;
};

/* 4384 */
struct flameVarDef_t
{
  const char *dvarName;
  const char *name;
  float defaultVal;
  float minVal;
  float maxVal;
  const char *description;
};

/* 4385 */
struct flameDrips_t
{
  flameGeneric_s gen;
  flameRender_s *flameRend;
};

/* 4386 */
struct flameFire_t
{
  flameGeneric_s gen;
  flameRender_s *flameRend;
};

/* 4387 */
struct flameWeaponConfig_t
{
  bool bIsFiring;
  bool bFireWhileIdle;
  vec3_t origin;
  vec3_t angle;
  float strength;
  float thickness;
  float burnRate;
  vec3_t entityOrigin;
  flameTable *fTable;
  int damage;
  float damageDuration;
  float damageInterval;
};

/* 4388 */
struct __declspec(align(8)) renderQuad_t
{
  vec4_t pos;
  float rotation;
  float radius;
  float lifeFrac;
};

/* 4389 */
struct __cppobj __declspec(align(16)) colgeom_visitor_inlined_t<500> : colgeom_visitor_t
{
  int nprims;
  bool overflow;
  col_prim_t prims[500];
};

/* 4390 */
struct cdl_proftimer
{
  unsigned __int64 stamp;
  unsigned __int64 value;
  unsigned __int64 avr;
  unsigned __int64 tot;
  unsigned __int64 capture_count;
  unsigned __int64 calls;
  bool capture;
  unsigned __int64 mx[5];
};

/* 4391 */
struct std::_Pair_base<flameGeneric_s * *,flameGeneric_s * *>
{
  flameGeneric_s **first;
  flameGeneric_s **second;
};

/* 4392 */
struct __cppobj std::pair<flameGeneric_s * *,flameGeneric_s * *> : std::_Pair_base<flameGeneric_s * *,flameGeneric_s * *>
{
};

/* 4393 */
struct __cppobj std::_Scalar_ptr_iterator_tag
{
};

/* 4394 */
struct __cppobj Flame_SortByStream
{
};

/* 4395 */
struct flameChunkSpawnVars_t
{
  int time;
  int duration;
  vec3_t origin;
  vec3_t angle;
  float speed;
  float decel;
  float gravityStart;
  float gravityEnd;
  float sizeMax;
  float sizeStart;
  float sizeEnd;
  float sizeRate;
  float spawnFireIntervalStart;
  float spawnFireIntervalEnd;
};

/* 4396 */
struct __declspec(align(4)) cCurve::nodeData
{
  vec3_t pos;
  vec3_t vel;
  float dist;
  float totalDist;
  bool bReached;
};

/* 4397 */
struct cCurve
{
  cCurve::nodeData mNodes[300];
  int mNotifyEntNum;
  int mCameraEntNum;
  bool mNotifyLevel;
  float mSpeed;
  int mNumNodes;
  bool mActive;
  cCurve::eCurveType mCurveType;
  float mDistance;
  bool mDraw;
  vec4_t mDrawColor;
  bool mUseColor;
  bool mPaused;
  float mCurPos;
  float mCurServerPos;
  int mLastNode;
  int mIndex;
};

/* 4398 */
struct __cppobj cCurveManager
{
};

/* 4399 */
struct flameSmoke_t
{
  flameGeneric_s gen;
  Material *material;
  float smokeFadein;
  float smokeFadeout;
  float smokeMaxAlpha;
  float smokeBrightness;
};

/* 4400 */
struct IKJointBones
{
  IKBoneNames twistBone;
  IKBoneNames childBone;
  IKBoneNames jointBone;
  IKBoneNames parentBone;
  IKBoneNames baseBone;
};

/* 4401 */
union $312060C8DE891AF2FC262850861CF9B5
{
  char *localClipMap;
  char *clipMap;
};

/* 4402 */
struct IKSystem
{
  bool bInitialized;
  char *boneStrings[24];
  IKBoneNames ikBoneParents[24];
  IKJointBones joints[4];
  int systemFrameNumber;
  unsigned __int16 *ikImportBoneStringVars;
  unsigned __int16 *ikImportMiscBoneStringVars;
  $312060C8DE891AF2FC262850861CF9B5 ___u7;
  dvar_t *dvars[33];
  bool inViewer;
  vec3_t leftHandOffset;
  vec3_t leftHandRotation;
  int leftHandEntnum;
  int leftHandSwitchTime;
  int numActorIKEnabled;
  int numActorIKEnabledFrameNumber;
  vec3_t leftHandIdlePos;
  vec3_t leftHandOffsetPos;
  vec3_t leftHandOffsetRot;
  vec3_t leftHandPronePos;
  vec3_t leftHandProneRot;
};

/* 4403 */
struct IKJointVars
{
  bool bValid;
  float UpperLength;
  float UpperIKc;
  float UpperIKInvc;
  float LowerLength;
  float LowerIKc;
  float LowerIKInvc;
};

/* 4404 */
struct __declspec(align(4)) ikLerpInfo_t
{
  int lastUpdateTime;
  float lerp;
  bool goalState;
};

/* 4405 */
struct IKCollisionCache
{
  int hitIndex;
  colgeom_visitor_inlined_t<200> proximity_data;
};

/* 4406 */
union $38B20358CDDA73CF3801FAF357E93DBA
{
  char *model;
  char *localModel;
};

/* 4407 */
union $A2EB323116007963A17C03E972308B06
{
  IKSystem *localIkSystem;
  IKSystem *ikSystem;
};

/* 4408 */
struct IKState
{
  int inUse;
  int entityNum;
  int isServer;
  LocalClientNum_t localClientIndex;
  $38B20358CDDA73CF3801FAF357E93DBA ___u4;
  int isIKModel;
  $A2EB323116007963A17C03E972308B06 ___u6;
  int timeMS;
  int frameUsed;
  char ikBoneToObjBone[24];
  char objBoneToIKBone[160];
  int bJointVarsValid;
  IKJointVars jointVars[4];
  float footHeightFromGround;
  int animatedIKBonesBits[1];
  int objBoneCalcBits[4];
  int modifiedIKBones;
  __declspec(align(8)) vec4_t footMats[2][4];
  vec4_t handMats[2][4];
  vec4_t leftHandFromRightHandMat[4];
  vec4_t entityXform[4];
  vec4_t entityLegsXform[4];
  vec4_t (*matArrayPreIK)[4];
  vec4_t (*matArrayPostIK)[4];
  vec4_t (*matArrayXforms)[4];
  vec4_t (*matArrayCache)[4];
  vec4_t (*matArrayCachePre)[4];
  int cacheActive;
  vec3_t rootOffset;
  vec4_t rootQuat;
  vec3_t origin;
  vec3_t angles;
  float lastTerrainMappingFootOffsetZ[2];
  float lastTerrainMappingPelvisZ;
  vec3_t lastTerrainMappingOrigin;
  float lastTerrainMappingTraceZ[2];
  vec2_t lastTerrainMappingTraceFootPos[2];
  float leftHandLerp;
  float rightHandLerp;
  int terrainDisableTime;
  ikLerpInfo_t lerpInfo[25];
  int lastFrameMS[25];
  bool bHasActiveLayers;
  int lastMovedTime;
  int lastNotMovedTime;
  int lastUpdateLayerLerpsTime;
  int statusFlags;
  int lastUpdateStatusFlags;
  int lastIsIKEntityFrameNum;
  vec3_t controllers[6];
  vec3_t controller_origin_angles;
  bool hasControllers;
  DvarValue dvarValues[33];
  vec3_t velocity;
  float gunnerCrouch;
  IKCollisionCache collisionCache;
  vec3_t leftHandIdlePos;
  vec3_t leftHandOffset;
  vec3_t leftHandRotation;
  vec3_t leftHandOffsetPrev;
  vec3_t leftHandRotationPrev;
  int leftHandChangeTime;
  float leftHandLastProximityLerp;
  IKWeaponOffsetType weaponOffsetType;
  IKWeaponSpecialNames weaponSpecialCurrent;
  vec3_t lastFootTraceNormals[2];
  vec3_t lastFootTraceGoalNormals[2];
  float lastCollisionEntityZ;
  int footTraceCollisionHint[2];
  int actorLookAtIsEntity;
  int actorLookAtIsAiming;
  vec3_t actorLookAtAngles;
  vec3_t actorLookAtAnglesDelayed;
  float actorLookAtScale;
  int actorLookAtLastUpdateTime;
  bool bHasLegSolverLayer;
  bool bHasArmSolverLayer;
  float legSolverFrac;
  float armSolverFrac;
  IKWeaponClass weaponClass;
  int headClipTraceIgnoreTime;
  int nextUpdateDvarTime;
  float maxProneLerp;
};

/* 4410 */
struct TracerInfo
{
  Material *material;
  float clipDist;
  float length;
  float width;
  float screwDist;
  float screwRadius;
  float fadeTime;
  float fadeScale;
  float texRepeatRate;
  char colors[5][4];
  int isClientEmitter;
};

/* 4409 */
struct localEntity_s
{
  localEntity_s *prev;
  localEntity_s *next;
  leType_t leType;
  int endTime;
  trajectory_t pos;
  GfxEntity refEntity;
  TracerInfo tracer;
};

/* 4411 */
struct MD4_CTX
{
  unsigned int state[4];
  unsigned int count[2];
  char buffer[64];
};

/* 4412 */
struct Bone
{
  int parentBone;
  char animBones[2];
  int rigidBody;
  float length;
  vec3_t center;
};

/* 4413 */
struct __declspec(align(4)) LerpBone
{
  int parentBone;
  char animBone;
};

/* 4414 */
struct Joint
{
  int joint;
  int joint2;
};

/* 4415 */
struct BoneOrientation
{
  vec3_t origin;
  int boneFlags;
  vec4_t orientation;
};

/* 4416 */
struct RagdollBody
{
  int references;
  int ragdollDef;
  int dobj;
  DObj *obj;
  cpose_t *pose;
  vec3_t poseOffset;
  LocalClientNum_t localClientNum;
  RagdollBodyState state;
  int stateMsec;
  int stateFrames;
  int velCaptureMsec;
  int stableTime;
  int numBones;
  Bone bones[14];
  int numLerpBones;
  LerpBone lerpBones[9];
  int numJoints;
  Joint joints[28];
  int curOrientationBuffer;
  BoneOrientation boneOrientations[2][23];
  BoneOrientation lerpBoneOffsets[9];
  int flags;
  int storedLaunchCount;
  hitLocation_t storedLaunchHitLoc[2];
  vec3_t storedLaunchForce[2];
  hitLocation_t storedAttachHitLoc;
  int storedAttachEnt;
  int storedPhysObjId;
  rigid_body_constraint_point *debug_hang_point;
  rigid_body_constraint_point *hang_point;
  int start_hang_time;
  broad_phase_group *m_bpg;
  broad_phase_collision_pair *m_list_bpcp;
  int rope_id;
  void *rbc_dist;
  bool gravity_override;
  int gravity;
  vec3_t mover_xform_axis[14][3];
  vec3_t mover_xform_origin[14];
  float waterHeight;
};

/* 4417 */
struct StateEnt
{
  bool (__cdecl *enterFunc)(RagdollBody *, RagdollBodyState, RagdollBodyState);
  bool (__cdecl *exitFunc)(RagdollBody *, RagdollBodyState, RagdollBodyState);
  void (__cdecl *updateFunc)(RagdollBody *, int);
};

/* 4418 */
struct phys_free_list<RagdollBody>::T_internal_base
{
  phys_free_list<RagdollBody>::T_internal_base *m_prev_T_internal;
  phys_free_list<RagdollBody>::T_internal_base *m_next_T_internal;
};

/* 4419 */
struct __cppobj phys_free_list<RagdollBody>::T_internal : phys_free_list<RagdollBody>::T_internal_base
{
  RagdollBody m_data;
  int m_ptr_list_index;
};

/* 4420 */
struct phys_free_list<RagdollBody>
{
  phys_free_list<RagdollBody>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  RagdollBody *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4421 */
struct phys_free_list<RagdollBody>::iterator
{
  phys_free_list<RagdollBody>::T_internal_base *m_ptr;
};

/* 4422 */
struct RagdollSortStruct
{
  float distSq;
  RagdollBody *body;
};

/* 4423 */
struct std::_Pair_base<RagdollSortStruct *,RagdollSortStruct *>
{
  RagdollSortStruct *first;
  RagdollSortStruct *second;
};

/* 4424 */
struct __cppobj std::pair<RagdollSortStruct *,RagdollSortStruct *> : std::_Pair_base<RagdollSortStruct *,RagdollSortStruct *>
{
};

/* 4425 */
struct __cppobj phys_sys
{
};

/* 4426 */
struct __cppobj environment_rigid_body : rigid_body
{
};

/* 4427 */
struct BaseLerpBoneDef
{
  char animBoneTextName[20];
  unsigned int animBoneName;
  unsigned int parentBoneIndex;
  int lerpTime;
};

/* 4428 */
struct BoneDef
{
  char animBoneTextNames[2][20];
  unsigned int animBoneNames[2];
  float radius;
  bool mirror;
  float percent;
  float mass;
  float friction;
  float buoyancy;
  int parentBone;
  PhysicsGeomType geomType;
};

/* 4429 */
struct SelfPairDef
{
  char bones[2];
};

/* 4430 */
struct JointDef
{
  char bone;
  JointType type;
  int numLimitAxes;
  vec3_t limitAxes[3];
  float minAngles[3];
  float maxAngles[3];
  float axisFriction[3];
};

/* 4431 */
struct __declspec(align(4)) RagdollDef
{
  bool inUse;
  bool bound;
  int numBones;
  BoneDef boneDefs[14];
  int numBaseLerpBones;
  BaseLerpBoneDef baseLerpBoneDefs[9];
  int numJoints;
  JointDef jointDefs[28];
  int numSelfPairs;
  SelfPairDef selfPairDefs[33];
};

/* 4432 */
struct $6D7F86D6A92F66762E57F950841AA92C
{
  const char *name;
  vec3_t axis;
};

/* 4433 */
struct XDollBone
{
  char index;
  char flags;
  unsigned int name_hash;
  int rigidBody;
  PhysPreset *physPreset;
};

/* 4434 */
struct XDollBoneOrientation
{
  vec3_t origin;
  int boneFlags;
  vec4_t orientation;
};

/* 4435 */
union $D6D99C12F609E6FFAC2024823E6C2920
{
  rigid_body_constraint *constraint;
  rigid_body_constraint_ragdoll *ragdoll_constraint;
  rigid_body_constraint_point *point_constraint;
  rigid_body_constraint_hinge *hinge_constraint;
  rigid_body_constraint_angular_actuator *actuator_constraint;
};

/* 4436 */
struct XDoll_ConstraintInfo
{
  int type;
  int timer;
  $D6D99C12F609E6FFAC2024823E6C2920 ___u2;
};

/* 4437 */
struct XDollBody
{
  int references;
  int entity_index;
  LocalClientNum_t client_index;
  int piece_index;
  unsigned int attach_bone_hash;
  PhysConstraints *constraintsDef;
  int numBones;
  XDollBone bones[4];
  XDollBoneOrientation boneOrientations[4];
  XDoll_ConstraintInfo constraintInfos[4];
  int userBody;
  unsigned int userBodyBoneHash;
  int stableTime;
};

/* 4438 */
struct contact_t
{
  vec3_t point;
  vec3_t normal;
  int particle_index;
};

/* 4439 */
struct __declspec(align(16)) RopeUpdateCmdData
{
  vec3_t viewOrg;
  int ropeCount;
  vec4_t screenMtx[4];
  rope_t *ropes;
};

/* 4440 */
struct __declspec(align(4)) VisualRope
{
  float beginRadius;
  float endRadius;
  Material *material;
  int segmentCount;
  float *segmentVerts;
  GfxDrawSurf *drawSurf;
  unsigned __int16 *lightingHandle;
  GfxLightingInfo lightingInfo;
  char visibilityFlags;
};

/* 4441 */
struct PhysPresetInfo
{
  float mass;
  float bounce;
  float friction;
  int isFrictionInfinity;
  float bulletForceScale;
  float explosiveForceScale;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  int canFloat;
  float gravityScale;
  vec3_t centerOfMassOffset;
  vec3_t buoyancyBoxMin;
  vec3_t buoyancyBoxMax;
};

/* 4442 */
struct leaves_t
{
  int count;
  int max_count;
  int *list;
};

/* 4443 */
struct leafList_s
{
  int count;
  int maxcount;
  int overflowed;
  unsigned __int16 *list;
  vec3_t bounds[2];
  int lastLeaf;
};

/* 4444 */
struct GfxVertex
{
  vec4_t xyzw;
  GfxColor color;
  vec2_t texCoord;
  PackedUnitVec normal;
};

/* 4445 */
struct materialCommands_t
{
  GfxVertex verts[2];
  unsigned __int16 indices[2];
  MaterialVertexDeclType vertDeclType;
  unsigned int vertexSize;
  int indexCount;
  int vertexCount;
  int firstVertex;
  int lastVertex;
  bool finishedFilling;
  TessPrimType primType;
};

/* 4446 */
struct GjkTraceGeom
{
  cbrush_t *brush;
  __declspec(align(16)) phys_mat44 mat;
};

/* 4447 */
struct debug_brush_t
{
  cbrush_t *brush;
  unsigned int first_vertex_index;
  unsigned int first_winding_index;
  unsigned __int16 num_indices;
  unsigned __int16 num_windings;
};

/* 4448 */
struct debug_brush_info_t
{
  debug_brush_t brushes[5000];
  char windings[50000];
  char indices[360000];
  int num_brushes;
  int num_windings;
  int num_indices;
};

/* 4449 */
struct __declspec(align(4)) debug_patch_t
{
  CollisionAabbTree *tree;
  unsigned int first_vertex_index;
  unsigned __int16 num_indices;
};

/* 4450 */
struct debug_patch_info_t
{
  debug_patch_t patches[5000];
  unsigned int indices[100000];
  unsigned int num_patches;
  unsigned int num_indices;
};

/* 4451 */
struct __cppobj rbcint
{
};

/* 4452 */
struct phys_free_list<user_rigid_body>::T_internal_base
{
  phys_free_list<user_rigid_body>::T_internal_base *m_prev_T_internal;
  phys_free_list<user_rigid_body>::T_internal_base *m_next_T_internal;
};

/* 4453 */
struct __cppobj __declspec(align(16)) phys_free_list<user_rigid_body>::T_internal : phys_free_list<user_rigid_body>::T_internal_base
{
  user_rigid_body m_data;
  int m_ptr_list_index;
};

/* 4454 */
struct phys_free_list<user_rigid_body>
{
  phys_free_list<user_rigid_body>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  user_rigid_body *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4455 */
struct phys_free_list<user_rigid_body>::iterator
{
  phys_free_list<user_rigid_body>::T_internal_base *m_ptr;
};

/* 4456 */
struct __cppobj rbint
{
};

/* 4457 */
struct phys_free_list<rigid_body_constraint_distance>::T_internal_base
{
  phys_free_list<rigid_body_constraint_distance>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_distance>::T_internal_base *m_next_T_internal;
};

/* 4458 */
struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_distance>::T_internal : phys_free_list<rigid_body_constraint_distance>::T_internal_base
{
  rigid_body_constraint_distance m_data;
  int m_ptr_list_index;
};

/* 4459 */
struct phys_free_list<rigid_body_constraint_distance>
{
  phys_free_list<rigid_body_constraint_distance>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_distance *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4460 */
struct phys_free_list<rigid_body_constraint_distance>::iterator
{
  phys_free_list<rigid_body_constraint_distance>::T_internal_base *m_ptr;
};

/* 4461 */
struct __declspec(align(16)) plane_lt
{
  phys_vec3 n;
  float d;
};

/* 4462 */
struct phys_free_list<rigid_body_constraint_wheel>::T_internal_base
{
  phys_free_list<rigid_body_constraint_wheel>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_wheel>::T_internal_base *m_next_T_internal;
};

/* 4463 */
struct __cppobj phys_free_list<rigid_body_constraint_wheel>::T_internal : phys_free_list<rigid_body_constraint_wheel>::T_internal_base
{
  __declspec(align(16)) rigid_body_constraint_wheel m_data;
  int m_ptr_list_index;
};

/* 4464 */
struct phys_free_list<rigid_body_constraint_wheel>
{
  phys_free_list<rigid_body_constraint_wheel>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_wheel *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4465 */
struct phys_free_list<rigid_body_constraint_wheel>::iterator
{
  phys_free_list<rigid_body_constraint_wheel>::T_internal_base *m_ptr;
};

/* 4466 */
struct phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base
{
  phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base *m_next_T_internal;
};

/* 4467 */
struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_angular_actuator>::T_internal : phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base
{
  rigid_body_constraint_angular_actuator m_data;
  int m_ptr_list_index;
};

/* 4468 */
struct phys_free_list<rigid_body_constraint_angular_actuator>
{
  phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_angular_actuator *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4469 */
struct phys_free_list<rigid_body_constraint_angular_actuator>::iterator
{
  phys_free_list<rigid_body_constraint_angular_actuator>::T_internal_base *m_ptr;
};

/* 4471 */
struct phys_link_list_base<pulse_sum_constraint_solver::temp_user_rigid_body>
{
  pulse_sum_constraint_solver::temp_user_rigid_body *m_next_link;
};

/* 4472 */
struct phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body>
{
  pulse_sum_constraint_solver::temp_user_rigid_body *m_left;
  pulse_sum_constraint_solver::temp_user_rigid_body *m_right;
  int m_balance;
};

/* 4470 */
struct __cppobj __declspec(align(16)) pulse_sum_constraint_solver::temp_user_rigid_body : user_rigid_body, phys_link_list_base<pulse_sum_constraint_solver::temp_user_rigid_body>
{
  user_rigid_body *m_avl_key;
  phys_inplace_avl_tree_node<pulse_sum_constraint_solver::temp_user_rigid_body> m_avl_tree_node;
};

/* 4473 */
struct phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base
{
  phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base *m_next_T_internal;
};

/* 4474 */
struct __cppobj phys_free_list<rigid_body_constraint_custom_orientation>::T_internal : phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base
{
  rigid_body_constraint_custom_orientation m_data;
  int m_ptr_list_index;
};

/* 4475 */
struct phys_free_list<rigid_body_constraint_custom_orientation>
{
  phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_custom_orientation *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4476 */
struct phys_free_list<rigid_body_constraint_custom_orientation>::iterator
{
  phys_free_list<rigid_body_constraint_custom_orientation>::T_internal_base *m_ptr;
};

/* 4477 */
struct phys_free_list<rigid_body_constraint_hinge>::T_internal_base
{
  phys_free_list<rigid_body_constraint_hinge>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_hinge>::T_internal_base *m_next_T_internal;
};

/* 4478 */
struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_hinge>::T_internal : phys_free_list<rigid_body_constraint_hinge>::T_internal_base
{
  rigid_body_constraint_hinge m_data;
  int m_ptr_list_index;
};

/* 4479 */
struct phys_free_list<rigid_body_constraint_hinge>
{
  phys_free_list<rigid_body_constraint_hinge>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_hinge *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4480 */
struct phys_free_list<rigid_body_constraint_hinge>::iterator
{
  phys_free_list<rigid_body_constraint_hinge>::T_internal_base *m_ptr;
};

/* 4481 */
struct __declspec(align(8)) phys_convex_hull::ch_triangle
{
  phys_vec3 m_normal;
  phys_vec3 *m_verts[3];
};

/* 4482 */
struct phys_convex_hull::ch_edge
{
  phys_vec3 *m_verts[2];
};

/* 4483 */
struct __declspec(align(16)) phys_static_array<phys_vec3,6144>
{
  char m_buffer[98304];
  phys_vec3 *const m_slot_array;
  int m_alloc_count;
};

/* 4484 */
struct __declspec(align(16)) phys_static_array<phys_vec3 *,6144>
{
  char m_buffer[24576];
  phys_vec3 **const m_slot_array;
  int m_alloc_count;
};

/* 4485 */
struct __declspec(align(16)) phys_static_array<phys_convex_hull::ch_triangle,256>
{
  char m_buffer[8192];
  phys_convex_hull::ch_triangle *const m_slot_array;
  int m_alloc_count;
};

/* 4486 */
struct __declspec(align(16)) phys_static_array<phys_convex_hull::ch_edge,128>
{
  char m_buffer[1024];
  phys_convex_hull::ch_edge *const m_slot_array;
  int m_alloc_count;
};

/* 4487 */
struct __declspec(align(16)) phys_static_array<phys_vec3 *,128>
{
  char m_buffer[512];
  phys_vec3 **const m_slot_array;
  int m_alloc_count;
};

/* 4488 */
struct __declspec(align(16)) phys_static_array<phys_convex_hull::ch_triangle,128>
{
  char m_buffer[4096];
  phys_convex_hull::ch_triangle *const m_slot_array;
  int m_alloc_count;
};

/* 4489 */
struct phys_convex_hull
{
  phys_static_array<phys_vec3,6144> m_vertex_buffer;
  phys_static_array<phys_vec3 *,6144> m_intermediate_vertex_list;
  phys_static_array<phys_convex_hull::ch_triangle,256> m_intermediate_triangle_list;
  phys_static_array<phys_convex_hull::ch_edge,128> m_intermediate_edge_list;
  phys_static_array<phys_vec3 *,128> m_convex_hull_vert_list;
  phys_static_array<phys_convex_hull::ch_triangle,128> m_convex_hull_triangle_list;
};

/* 4490 */
struct phys_link_list<pulse_sum_contact>::iterator
{
  pulse_sum_contact *m_ptr;
};

/* 4491 */
struct phys_link_list<pulse_sum_normal>::iterator
{
  pulse_sum_normal *m_ptr;
};

/* 4492 */
struct phys_free_list<rigid_body_constraint_upright>::T_internal_base
{
  phys_free_list<rigid_body_constraint_upright>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_upright>::T_internal_base *m_next_T_internal;
};

/* 4493 */
struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_upright>::T_internal : phys_free_list<rigid_body_constraint_upright>::T_internal_base
{
  rigid_body_constraint_upright m_data;
  int m_ptr_list_index;
};

/* 4494 */
struct phys_free_list<rigid_body_constraint_upright>
{
  phys_free_list<rigid_body_constraint_upright>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_upright *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4495 */
struct phys_free_list<rigid_body_constraint_upright>::iterator
{
  phys_free_list<rigid_body_constraint_upright>::T_internal_base *m_ptr;
};

/* 4496 */
struct __declspec(align(16)) phys_static_array<plane_lt,512>
{
  char m_buffer[16384];
  plane_lt *const m_slot_array;
  int m_alloc_count;
};

/* 4497 */
struct phys_free_list<rigid_body_constraint_point>::T_internal_base
{
  phys_free_list<rigid_body_constraint_point>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_point>::T_internal_base *m_next_T_internal;
};

/* 4498 */
struct __cppobj phys_free_list<rigid_body_constraint_point>::T_internal : phys_free_list<rigid_body_constraint_point>::T_internal_base
{
  __declspec(align(16)) rigid_body_constraint_point m_data;
  int m_ptr_list_index;
};

/* 4499 */
struct phys_free_list<rigid_body_constraint_point>
{
  phys_free_list<rigid_body_constraint_point>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_point *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4500 */
struct phys_free_list<rigid_body_constraint_point>::iterator
{
  phys_free_list<rigid_body_constraint_point>::T_internal_base *m_ptr;
};

/* 4501 */
struct phys_free_list<rigid_body_constraint_contact>::T_internal_base
{
  phys_free_list<rigid_body_constraint_contact>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_contact>::T_internal_base *m_next_T_internal;
};

/* 4502 */
struct __cppobj phys_free_list<rigid_body_constraint_contact>::T_internal : phys_free_list<rigid_body_constraint_contact>::T_internal_base
{
  rigid_body_constraint_contact m_data;
  int m_ptr_list_index;
};

/* 4503 */
struct phys_free_list<rigid_body_constraint_contact>
{
  phys_free_list<rigid_body_constraint_contact>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_contact *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4504 */
struct phys_free_list<rigid_body_constraint_contact>::iterator
{
  phys_free_list<rigid_body_constraint_contact>::T_internal_base *m_ptr;
};

/* 4505 */
struct phys_link_list<pulse_sum_angular>::iterator
{
  pulse_sum_angular *m_ptr;
};

/* 4506 */
struct phys_static_array<phys_vec3 *,128>::iterator
{
  phys_vec3 **m_ptr;
};

/* 4507 */
struct phys_free_list<rigid_body_constraint_custom_path>::T_internal_base
{
  phys_free_list<rigid_body_constraint_custom_path>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_custom_path>::T_internal_base *m_next_T_internal;
};

/* 4508 */
struct __cppobj phys_free_list<rigid_body_constraint_custom_path>::T_internal : phys_free_list<rigid_body_constraint_custom_path>::T_internal_base
{
  __declspec(align(16)) rigid_body_constraint_custom_path m_data;
  int m_ptr_list_index;
};

/* 4509 */
struct phys_free_list<rigid_body_constraint_custom_path>
{
  phys_free_list<rigid_body_constraint_custom_path>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_custom_path *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4510 */
struct phys_free_list<rigid_body_constraint_custom_path>::iterator
{
  phys_free_list<rigid_body_constraint_custom_path>::T_internal_base *m_ptr;
};

/* 4512 */
struct phys_link_list_base<pulse_sum_constraint_solver::user_rigid_body_restore_info>
{
  pulse_sum_constraint_solver::user_rigid_body_restore_info *m_next_link;
};

/* 4511 */
struct __cppobj pulse_sum_constraint_solver::user_rigid_body_restore_info : phys_link_list_base<pulse_sum_constraint_solver::user_rigid_body_restore_info>
{
  user_rigid_body **m_rbc_urb;
  user_rigid_body *m_original_urb;
};

/* 4513 */
struct phys_link_list<pulse_sum_node>::iterator
{
  pulse_sum_node *m_ptr;
};

/* 4514 */
struct phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor>
{
  rigid_body_constraint_contact *m_tree_root;
};

/* 4515 */
struct phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor>::stack_item
{
  rigid_body_constraint_contact **m_node;
  int m_child;
};

/* 4516 */
struct phys_link_list<pulse_sum_point>::iterator
{
  pulse_sum_point *m_ptr;
};

/* 4517 */
struct phys_static_array<phys_convex_hull::ch_triangle,256>::iterator
{
  phys_convex_hull::ch_triangle *m_ptr;
};

/* 4518 */
struct __declspec(align(16)) phys_static_array<phys_vec3,512>
{
  char m_buffer[8192];
  phys_vec3 *const m_slot_array;
  int m_alloc_count;
};

/* 4519 */
struct phys_inplace_avl_tree<user_rigid_body *,pulse_sum_constraint_solver::temp_user_rigid_body,pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>
{
  pulse_sum_constraint_solver::temp_user_rigid_body *m_tree_root;
};

/* 4520 */
struct phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>
{
  pulse_sum_constraint_solver::temp_user_rigid_body *m_first;
};

/* 4521 */
struct phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>
{
  pulse_sum_constraint_solver::user_rigid_body_restore_info *m_first;
};

/* 4522 */
struct __cppobj pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor
{
};

/* 4523 */
struct phys_free_list<rigid_body>::T_internal_base
{
  phys_free_list<rigid_body>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body>::T_internal_base *m_next_T_internal;
};

/* 4524 */
struct phys_free_list<rigid_body>
{
  phys_free_list<rigid_body>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4525 */
struct phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base
{
  phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base *m_prev_T_internal;
  phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base *m_next_T_internal;
};

/* 4526 */
struct phys_free_list<rigid_body_constraint_ragdoll>
{
  phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  rigid_body_constraint_ragdoll *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4527 */
struct __declspec(align(16)) physics_system
{
  int m_flags;
  float m_outside_sub_delta_t;
  void (__cdecl *m_collision_callback)();
  float m_max_delta_t;
  int m_max_vel_iters;
  int m_max_vel_pos_iters;
  environment_rigid_body m_environment_rigid_body;
  phys_inplace_avl_tree<rigid_body_pair_key,rigid_body_constraint_contact,rigid_body_constraint_contact::avl_tree_accessor> m_search_tree_rbc_contact;
  phys_free_list<user_rigid_body> m_list_user_rigid_body;
  phys_free_list<rigid_body> m_list_rigid_body;
  phys_free_list<rigid_body_constraint_contact> m_list_rbc_contact;
  phys_free_list<rigid_body_constraint_point> m_list_rbc_point;
  phys_free_list<rigid_body_constraint_hinge> m_list_rbc_hinge;
  phys_free_list<rigid_body_constraint_distance> m_list_rbc_dist;
  phys_free_list<rigid_body_constraint_ragdoll> m_list_rbc_ragdoll;
  phys_free_list<rigid_body_constraint_wheel> m_list_rbc_wheel;
  phys_free_list<rigid_body_constraint_custom_orientation> m_list_rbc_custom_orientation;
  phys_free_list<rigid_body_constraint_custom_path> m_list_rbc_custom_path;
  phys_free_list<rigid_body_constraint_angular_actuator> m_list_rbc_angular_actuator;
  phys_free_list<rigid_body_constraint_upright> m_list_rbc_upright;
  phys_transient_allocator m_contact_point_buffer_1;
  phys_transient_allocator m_contact_point_buffer_2;
  rigid_body **m_list_island;
  int m_list_island_count;
  int m_solver_memory_high_water;
  int m_contact_point_buffer_high_water;
};

/* 4528 */
struct __cppobj __declspec(align(16)) phys_free_list<rigid_body>::T_internal : phys_free_list<rigid_body>::T_internal_base
{
  rigid_body m_data;
  int m_ptr_list_index;
};

/* 4529 */
struct phys_free_list<rigid_body>::iterator
{
  phys_free_list<rigid_body>::T_internal_base *m_ptr;
};

/* 4530 */
struct chull_t
{
  unsigned int key;
  int nverts;
  phys_vec3 *verts;
  int ninds;
  unsigned __int16 *inds;
  chull_t *next;
  int touched;
  chull_t *next_list;
};

/* 4531 */
struct phys_link_list<pulse_sum_wheel>::iterator
{
  pulse_sum_wheel *m_ptr;
};

/* 4532 */
struct phys_static_array<phys_vec3 *,6144>::iterator
{
  phys_vec3 **m_ptr;
};

/* 4533 */
struct phys_static_array<phys_convex_hull::ch_triangle,128>::iterator
{
  phys_convex_hull::ch_triangle *m_ptr;
};

/* 4534 */
struct phys_static_array<phys_convex_hull::ch_edge,128>::iterator
{
  phys_convex_hull::ch_edge *m_ptr;
};

/* 4535 */
struct __cppobj __declspec(align(16)) phys_free_list<rigid_body_constraint_ragdoll>::T_internal : phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base
{
  rigid_body_constraint_ragdoll m_data;
  int m_ptr_list_index;
};

/* 4536 */
struct phys_free_list<rigid_body_constraint_ragdoll>::iterator
{
  phys_free_list<rigid_body_constraint_ragdoll>::T_internal_base *m_ptr;
};

/* 4537 */
struct GfxPointVertex
{
  vec3_t xyz;
  char color[4];
};

/* 4538 */
struct __declspec(align(16)) phys_static_array<int,512>
{
  char m_buffer[2048];
  int *const m_slot_array;
  int m_alloc_count;
};

/* 4539 */
struct __declspec(align(16)) phys_static_array<float,512>
{
  char m_buffer[2048];
  float *const m_slot_array;
  int m_alloc_count;
};

/* 4540 */
struct phys_static_array<phys_vec3,6144>::iterator
{
  phys_vec3 *m_ptr;
};

/* 4541 */
struct phys_simple_allocator<gjk_aabb_t>
{
  int m_count;
};

/* 4542 */
struct phys_simple_allocator<gjk_obb_t>
{
  int m_count;
};

/* 4543 */
struct phys_simple_allocator<gjk_brush_t>
{
  int m_count;
};

/* 4544 */
struct phys_simple_allocator<gjk_partition_t>
{
  int m_count;
};

/* 4545 */
struct phys_simple_allocator<gjk_double_sphere_t>
{
  int m_count;
};

/* 4546 */
struct phys_simple_allocator<gjk_cylinder_t>
{
  int m_count;
};

/* 4547 */
struct phys_simple_allocator<gjk_polygon_cylinder_t>
{
  int m_count;
};

/* 4548 */
struct vehicle_avoidnode_t
{
  vec3_t origin;
  float radius;
  float height;
};

/* 4549 */
struct phys_free_list<VehicleParameter>::T_internal_base
{
  phys_free_list<VehicleParameter>::T_internal_base *m_prev_T_internal;
  phys_free_list<VehicleParameter>::T_internal_base *m_next_T_internal;
};

/* 4550 */
struct __cppobj phys_free_list<VehicleParameter>::T_internal : phys_free_list<VehicleParameter>::T_internal_base
{
  VehicleParameter m_data;
  int m_ptr_list_index;
};

/* 4551 */
struct phys_free_list<VehicleParameter>
{
  phys_free_list<VehicleParameter>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  VehicleParameter *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4552 */
struct phys_free_list<NitrousVehicle>::T_internal_base
{
  phys_free_list<NitrousVehicle>::T_internal_base *m_prev_T_internal;
  phys_free_list<NitrousVehicle>::T_internal_base *m_next_T_internal;
};

/* 4553 */
struct __cppobj __declspec(align(16)) phys_free_list<NitrousVehicle>::T_internal : phys_free_list<NitrousVehicle>::T_internal_base
{
  NitrousVehicle m_data;
  int m_ptr_list_index;
};

/* 4554 */
struct phys_free_list<NitrousVehicle>
{
  phys_free_list<NitrousVehicle>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  NitrousVehicle *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4555 */
struct phys_free_list<NitrousVehicle>::iterator
{
  phys_free_list<NitrousVehicle>::T_internal_base *m_ptr;
};

/* 4556 */
struct phys_free_list<PhysObjUserData>::T_internal_base
{
  phys_free_list<PhysObjUserData>::T_internal_base *m_prev_T_internal;
  phys_free_list<PhysObjUserData>::T_internal_base *m_next_T_internal;
};

/* 4557 */
struct phys_free_list<PhysObjUserData>
{
  phys_free_list<PhysObjUserData>::T_internal_base m_dummy_head;
  int m_list_count;
  int m_list_count_high_water;
  PhysObjUserData *m_ptr_list[256];
  int m_ptr_list_count;
};

/* 4558 */
struct PhysGlob
{
  phys_free_list<PhysObjUserData> objects;
  PhysObjUserData *userRigidBodies[16];
  int timeLastSnapshot;
  int timeLastUpdate;
};

/* 4559 */
struct phys_simple_allocator<auto_rigid_body>
{
  int m_count;
};

/* 4560 */
struct auto_rigid_body
{
  user_rigid_body *rb;
  centity_t *cent;
  int frame_count;
  auto_rigid_body *next;
  phys_inplace_avl_tree_node<auto_rigid_body> m_avl_node_info;
};

/* 4561 */
struct phys_inplace_avl_tree_node<auto_rigid_body>
{
  auto_rigid_body *m_left;
  auto_rigid_body *m_right;
  int m_balance;
};

/* 4562 */
struct smodel_debug_info_t
{
  cStaticModel_s *smodel;
  float dist2;
};

/* 4563 */
struct phys_free_list<PhysObjUserData>::iterator
{
  phys_free_list<PhysObjUserData>::T_internal_base *m_ptr;
};

/* 4564 */
struct PhysImpulse
{
  int id;
  vec3_t hitp;
  vec3_t hitd;
};

/* 4565 */
struct BodyState
{
  vec3_t position;
  vec3_t rotation[3];
  vec3_t velocity;
  vec3_t angVelocity;
  vec3_t centerOfMassOffset;
  vec3_t buoyancyBoxMin;
  vec3_t buoyancyBoxMax;
  float mass;
  float friction;
  float bounce;
  int timeLastAsleep;
  int id;
  int buoyancy;
  int underwater;
  int owner;
  PhysicsOwnerType owner_type;
};

/* 4566 */
struct __cppobj __declspec(align(4)) colgeom_debug_renderer_t : colgeom_visitor_t
{
  vec3_t lightPos;
  bool bRenderStaticCollision;
  bool bRenderBrushes;
};

/* 4567 */
struct __cppobj __declspec(align(16)) phys_free_list<PhysObjUserData>::T_internal : phys_free_list<PhysObjUserData>::T_internal_base
{
  PhysObjUserData m_data;
  int m_ptr_list_index;
};

/* 4568 */
struct dent_info_t
{
  unsigned __int16 id;
  float dist2;
};

/* 4569 */
struct DynEntityProps
{
  const char *name;
  bool clientOnly;
  bool clipMove;
  bool usePhysics;
  bool destroyable;
};

/* 4570 */
struct DynEntityAreaParms
{
  vec3_t *mins;
  vec3_t *maxs;
  int contentMask;
  unsigned __int16 *list;
  unsigned __int16 maxCount;
  unsigned __int16 count;
};

/* 4571 */
struct phys_simple_allocator<generic_avl_map_node_t>
{
  int m_count;
};

/* 4572 */
struct dynent_hit
{
  unsigned __int16 absId;
};

/* 4573 */
struct destructible_hit
{
  int entNum;
};

/* 4574 */
struct __cppobj standard_query : broad_phase_terrain_query_callback
{
};

/* 4575 */
struct __cppobj destructible_ent_aa : phys_auto_activate_callback
{
  bool m_has_auto_activated;
  centity_t *m_cent;
};

/* 4576 */
struct entity_bpi_header
{
  phys_mat44 *m_mat;
  phys_auto_activate_callback *m_aac;
};

/* 4577 */
struct __cppobj dynamic_ent_aa : phys_auto_activate_callback
{
  bool m_has_auto_activated;
  DynEntityDef *m_dynEntDef;
};

/* 4578 */
struct __cppobj __declspec(align(16)) query_brush_model_gjk_geom_visitor : colgeom_visitor_t
{
  gjk_collision_visitor *m_allocator;
};

/* 4579 */
struct phys_inplace_avl_tree<centity_t const *,auto_rigid_body,auto_rigid_body>
{
  auto_rigid_body *m_tree_root;
};

/* 4580 */
struct phys_inplace_avl_tree<centity_t const *,auto_rigid_body,auto_rigid_body>::stack_item
{
  auto_rigid_body **m_node;
  int m_child;
};

/* 4581 */
struct $6089F72E563ACB6DA18C5F69A674C395
{
  centity_t *self;
  centity_t *attacker;
  vec3_t dir;
  vec3_t point;
  int damage;
  int mod;
  unsigned int modelIndex;
  unsigned int partName;
};

/* 4582 */
struct $959F8E1A5BE9B3F84DA85778D4B4277E
{
  centity_t *self;
  vec3_t point;
  float damgeInner;
  float damgeOuter;
  float radius;
  int mod;
};

/* 4583 */
struct $35CA25E76E26A1E659149506C9FE6356
{
  LocalClientNum_t localClientNum;
  int event;
  entityState_s *es;
};

/* 4584 */
union $A751551C8DF28BC90E67B8AE2A404F8D
{
  $6089F72E563ACB6DA18C5F69A674C395 ed;
  $959F8E1A5BE9B3F84DA85778D4B4277E erd;
  $35CA25E76E26A1E659149506C9FE6356 ehe;
};

/* 4585 */
struct destructible_event_t
{
  int type;
  $A751551C8DF28BC90E67B8AE2A404F8D ___u1;
};

/* 4586 */
struct destructible_gamestate
{
  char localClientNum;
  char numPieces;
  __int16 entityNum;
  __int16 health[32];
};

/* 4587 */
struct DObjTrace_s
{
  float fraction;
  int sflags;
  vec3_t normal;
  unsigned __int16 modelIndex;
  unsigned __int16 partName;
  unsigned __int16 partGroup;
  int localBoneIndex;
};

/* 4588 */
struct unz_global_info_s
{
  unsigned int number_entry;
  unsigned int size_comment;
};

/* 4589 */
struct tm_unz_s
{
  unsigned int tm_sec;
  unsigned int tm_min;
  unsigned int tm_hour;
  unsigned int tm_mday;
  unsigned int tm_mon;
  unsigned int tm_year;
};

/* 4590 */
struct unz_file_info_s
{
  unsigned int version;
  unsigned int version_needed;
  unsigned int flag;
  unsigned int compression_method;
  unsigned int dosDate;
  unsigned int crc;
  unsigned int compressed_size;
  unsigned int uncompressed_size;
  unsigned int size_filename;
  unsigned int size_file_extra;
  unsigned int size_file_comment;
  unsigned int disk_num_start;
  unsigned int internal_fa;
  unsigned int external_fa;
  tm_unz_s tmu_date;
};

/* 4591 */
struct unz_file_info_internal_s
{
  unsigned int offset_curfile;
};

/* 4592 */
struct file_in_zip_read_info_s
{
  char *read_buffer;
  z_stream_s stream;
  unsigned int pos_in_zipfile;
  unsigned int stream_initialised;
  unsigned int offset_local_extrafield;
  unsigned int size_local_extrafield;
  unsigned int pos_local_extrafield;
  unsigned int rest_read_compressed;
  unsigned int rest_read_uncompressed;
  _iobuf *file;
  unsigned int compression_method;
  unsigned int byte_before_the_zipfile;
};

/* 4593 */
struct unz_s
{
  _iobuf *file;
  unz_global_info_s gi;
  unsigned int byte_before_the_zipfile;
  unsigned int num_file;
  unsigned int pos_in_central_dir;
  unsigned int current_file_ok;
  unsigned int central_pos;
  unsigned int size_central_dir;
  unsigned int offset_central_dir;
  unz_file_info_s cur_file_info;
  unz_file_info_internal_s cur_file_info_internal;
  file_in_zip_read_info_s *pfile_in_zip_read;
};

/* 4594 */
struct code
{
  char op;
  char bits;
  unsigned __int16 val;
};

/* 4595 */
struct inflate_state
{
  inflate_mode mode;
  int last;
  int wrap;
  int havedict;
  int flags;
  unsigned int dmax;
  unsigned int check;
  unsigned int total;
  gz_header_s *head;
  unsigned int wbits;
  unsigned int wsize;
  unsigned int whave;
  unsigned int write;
  char *window;
  unsigned int hold;
  unsigned int bits;
  unsigned int length;
  unsigned int offset;
  unsigned int extra;
  code *lencode;
  code *distcode;
  unsigned int lenbits;
  unsigned int distbits;
  unsigned int ncode;
  unsigned int nlen;
  unsigned int ndist;
  unsigned int have;
  code *next;
  unsigned __int16 lens[320];
  unsigned __int16 work[288];
  code codes[2048];
};

/* 4596 */
struct config_s
{
  unsigned __int16 good_length;
  unsigned __int16 max_lazy;
  unsigned __int16 nice_length;
  unsigned __int16 max_chain;
  block_state (__cdecl *func)(internal_state *, int);
};

/* 4597 */
struct TestLod
{
  bool enabled;
  float dist;
};

/* 4598 */
struct collision_material_t
{
  char name[64];
  int cflags;
  int sflags;
};

/* 4599 */
struct adjacencyWinding_t
{
  int numsides;
  int sides[12];
};

/* 4600 */
struct SimplePlaneIntersection
{
  vec3_t xyz;
  int planeIndex[3];
};

/* 4601 */
struct XVertexInfo_s
{
  vec3_t normal;
  char color[4];
  vec3_t binormal;
  float texCoordX;
  vec3_t tangent;
  float texCoordY;
  vec3_t offset;
  char numWeights;
  char pad;
  __int16 boneOffset;
};

/* 4602 */
struct ExtentBounds
{
  vec3_t mins;
  vec3_t maxs;
};

/* 4603 */
struct XModelConfigEntry
{
  char filename[1024];
  float dist;
  float distMP;
};

/* 4604 */
struct XModelConfig
{
  XModelConfigEntry entries[4];
  float mins[3];
  float maxs[3];
  int collLod;
  unsigned int flags;
  char physicsPresetFilename[1024];
  char physicsConstraintsFilename[1024];
  char collMapFilename[1024];
  float bakeLightmapSampleSize;
  float lightingOriginOffsetX;
  float lightingOriginOffsetY;
  float lightingOriginOffsetZ;
  float lightingOriginRange;
};

/* 4605 */
struct XBlendLoadInfo
{
  unsigned __int16 boneOffset;
  unsigned __int16 boneWeight;
};

/* 4606 */
struct Sphere
{
  vec3_t origin;
  float radius;
  float radiusSq;
};

/* 4607 */
struct XModelSurfs
{
  XSurface *surfs;
  int partBits[5];
};

/* 4608 */
struct BuildBounds
{
  vec3_t mins;
  vec3_t maxs;
};

/* 4609 */
struct XVertexBuffer
{
  XVertexInfo_s v;
  XBlendLoadInfo w[1];
};

/* 4610 */
struct XModelPartsLoad
{
  char numBones;
  char numRootBones;
  unsigned __int16 *boneNames;
  char *parentList;
  __int16 *quats;
  float *trans;
  char *partClassification;
  DObjAnimMat *baseMat;
};

/* 4611 */
struct XModelDefault
{
  unsigned __int16 boneNames[1];
  char parentList[1];
  XModelPartsLoad modelParts;
  XBoneInfo boneInfo;
  char partClassification[1];
  unsigned __int16 surfNames[1];
};

/* 4612 */
struct QueueElement
{
  unsigned int beginIndex;
  unsigned int count;
};

/* 4613 */
struct XSurfaceGetTriCandidatesLocals
{
  int mins[3];
  int maxs[3];
  XSurfaceCollisionTree *tree;
  const unsigned __int16 *inIndices;
  const char *inVertices0;
  const char *inVertices1;
  bool (__cdecl *visitorFunc)(void *, const char **, const char **);
  void *visitorContext;
  unsigned __int16 vertexSize0;
  unsigned __int16 surfaceFlags;
  unsigned int nodeQueueBegin;
  unsigned int nodeQueueEnd;
  unsigned int leafQueueBegin;
  unsigned int leafQueueEnd;
  unsigned int triangleQueueBegin;
  unsigned int triangleQueueEnd;
  unsigned int vertexQueueBegin;
  unsigned int vertexQueueEnd;
  QueueElement nodeQueue[64];
  QueueElement leafQueue[4];
  QueueElement triangleQueue[4];
  unsigned __int16 vertexQueue[4][3];
};

/* 4614 */
union XAnimPartQuatFrames
{
  __int16 (*frames)[4];
  __int16 (*frames2)[2];
};

/* 4615 */
struct __declspec(align(4)) XAnimPartQuatDataFrames
{
  XAnimPartQuatFrames u;
  XAnimDynamicIndices indices;
};

/* 4616 */
union XAnimPartQuatData
{
  XAnimPartQuatDataFrames frames;
  __int16 frame0[4];
  __int16 frame02[2];
};

/* 4617 */
struct XAnimPartQuat
{
  unsigned __int16 size;
  XAnimPartQuatData u;
};

/* 4618 */
struct __declspec(align(4)) XAnimPartQuatPtr
{
  XAnimPartQuat *quat;
  char partIndex;
};

/* 4619 */
struct __declspec(align(4)) XAnimPartTransPtr
{
  XAnimPartTrans *trans;
  char partIndex;
};

/* 4620 */
struct ClientNotifyData
{
  unsigned int notetrackName;
  unsigned int notifyType;
  unsigned int notifyName;
  float timeFrac;
};

/* 4621 */
struct XAnimClientNotify
{
  const char *name;
  unsigned int notetrackName;
  unsigned int notifyType;
  unsigned int notifyName;
  float timeFrac;
};

/* 4622 */
struct XAnimFrameData
{
  void *frames[160];
  __m128 fromVecs[160];
  __m128 toVecs[160];
  float keyFrameLerpFracs[160];
  bool calcParts[160];
};

/* 4623 */
struct XAnimTime
{
  float time;
  float frameFrac;
  int frameIndex;
};

/* 4624 */
struct bitarray<160>
{
  int array[5];
};

/* 4625 */
struct __declspec(align(8)) XAnimCalcAnimInfo
{
  DObjAnimMat rotTransArray[960];
  bitarray<160> animPartBits;
  bitarray<160> ignorePartBits;
  bool bLeftHandGripIKActive;
};

/* 4626 */
struct __declspec(align(4)) XAnimToXModel
{
  bitarray<160> partBits;
  char boneCount;
  char boneIndex[160];
};

/* 4627 */
struct XAnimServerNotify
{
  unsigned __int16 entNum;
  unsigned __int16 notifyName;
  unsigned __int16 notetrackName;
  float fPercentTime;
};

/* 4628 */
struct XAnimServerNotifyList
{
  XAnimServerNotify *pList;
  int iNumElements;
  int iCurrentElement;
};

/* 4629 */
struct XModelNameMap
{
  unsigned __int16 name;
  unsigned __int16 index;
};

/* 4630 */
struct XAnimRotPos
{
  vec4_t rot;
  float posWeight;
  vec3_t pos;
};

/* 4631 */
struct devhostXAnimNode
{
  int depth;
  float goalWeight;
  float weight;
  float rate;
  float time;
};

/* 4632 */
struct XAnimDeltaInfo
{
  bool bClear;
  bool bNormQuat;
  bool bAbs;
  bool bUseGoalWeight;
};

/* 4633 */
struct XAnimRootAdjustMat
{
  unsigned int modelIndex;
  vec4_t quat;
  vec3_t trans;
};

/* 4634 */
struct SavedDObjModel
{
  unsigned __int16 boneName;
};

/* 4635 */
struct SavedDObj
{
  SavedDObjModel dobjModels[32];
  XModel **models;
  unsigned int ignoreCollision;
  unsigned __int16 numModels;
  unsigned __int16 entnum;
  char flags;
  char localClientNum;
  XAnimTree_s *tree;
  unsigned int hidePartBits[5];
  int numRootAdjustMats;
  XAnimRootAdjustMat *rootAdjustMats;
};

/* 4636 */
struct search_node_s
{
  SimplePlaneIntersection *edge;
  int plane;
  int depth;
  search_node_s *prevNode;
};

/* 4637 */
struct physBatch
{
  jqModule *Module;
  void *Input;
  void *Output;
};

/* 4638 */
struct HHOOK__
{
  int unused;
};

/* 4639 */
struct WinVars_t
{
  HINSTANCE__ *reflib_library;
  int reflib_active;
  HWND__ *hWnd;
  HINSTANCE__ *hInstance;
  int activeApp;
  int isMinimized;
  int recenterMouse;
  HHOOK__ *lowLevelKeyboardHook;
  unsigned int sysMsgTime;
};

/* 4640 */
struct tagPOINT
{
  int x;
  int y;
};

/* 4641 */
struct tagMINMAXINFO
{
  tagPOINT ptReserved;
  tagPOINT ptMaxSize;
  tagPOINT ptMaxPosition;
  tagPOINT ptMinTrackSize;
  tagPOINT ptMaxTrackSize;
};

/* 4642 */
struct HICON__
{
  int unused;
};

/* 4643 */
struct tagMONITORINFO
{
  unsigned int cbSize;
  tagRECT rcMonitor;
  tagRECT rcWork;
  unsigned int dwFlags;
};

/* 4644 */
struct __cppobj IDirectSoundCaptureBuffer : IUnknown
{
};

/* 4645 */
struct __cppobj IDirectSoundBuffer : IUnknown
{
};

/* 4646 */
struct __declspec(align(4)) dsound_sample_t
{
  IDirectSoundCaptureBuffer *DSCB;
  IDirectSoundBuffer *DSB;
  unsigned int dwBufferSize;
  unsigned int dwCaptureOffset;
  unsigned int currentOffset;
  unsigned int lastOffset;
  unsigned int currentBufferLength;
  int stopPosition;
  unsigned int lastPlayPos;
  int bytesBuffered;
  int mode;
  int frequency;
  int volume;
  int pan;
  int channels;
  bool playing;
  int channel;
  char playMode;
};

/* 4647 */
struct WaveInLineInfo
{
  int isValid;
  unsigned int mixerID;
  unsigned int dstWaveInLineID;
  int oldRecLevel;
  int oldMuteState;
};

/* 4648 */
struct _DSCCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwFormats;
  unsigned int dwChannels;
};

/* 4649 */
struct _DSCEFFECTDESC
{
  unsigned int dwSize;
  unsigned int dwFlags;
  _GUID guidDSCFXClass;
  _GUID guidDSCFXInstance;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
};

/* 4650 */
struct _DSCBUFFERDESC
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwBufferBytes;
  unsigned int dwReserved;
  tWAVEFORMATEX *lpwfxFormat;
  unsigned int dwFXCount;
  _DSCEFFECTDESC *lpDSCFXDesc;
};

/* 4651 */
struct $0D057425CB83406CCB6CB71DF3FA0A4C
{
  int lMinimum;
  int lMaximum;
};

/* 4652 */
struct $E50C0F09BB6F8C50FF087E1E76EA2CA0
{
  unsigned int dwMinimum;
  unsigned int dwMaximum;
};

/* 4653 */
union $05CEB1C33B9CF19C21BAA409EF700F38
{
  $0D057425CB83406CCB6CB71DF3FA0A4C __s0;
  $E50C0F09BB6F8C50FF087E1E76EA2CA0 __s1;
  unsigned int dwReserved[6];
};

/* 4654 */
union $D57FBB56CFB6CB9AA7C272D88EF9A29F
{
  unsigned int cSteps;
  unsigned int cbCustomData;
  unsigned int dwReserved[6];
};

/* 4655 */
struct tagMIXERCONTROLA
{
  unsigned int cbStruct;
  unsigned int dwControlID;
  unsigned int dwControlType;
  unsigned int fdwControl;
  unsigned int cMultipleItems;
  char szShortName[16];
  char szName[64];
  $05CEB1C33B9CF19C21BAA409EF700F38 Bounds;
  $D57FBB56CFB6CB9AA7C272D88EF9A29F Metrics;
};

/* 4656 */
struct _DSBCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwBufferBytes;
  unsigned int dwUnlockTransferRate;
  unsigned int dwPlayCpuOverhead;
};

/* 4657 */
struct _DSBUFFERDESC
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwBufferBytes;
  unsigned int dwReserved;
  tWAVEFORMATEX *lpwfxFormat;
  _GUID guid3DAlgorithm;
};

/* 4658 */
struct _DSCBCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwBufferBytes;
  unsigned int dwReserved;
};

/* 4659 */
struct $428257C9868A469D077AA3A343E95D70
{
  unsigned int dwType;
  unsigned int dwDeviceID;
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
};

/* 4660 */
struct tagMIXERLINEA
{
  unsigned int cbStruct;
  unsigned int dwDestination;
  unsigned int dwSource;
  unsigned int dwLineID;
  unsigned int fdwLine;
  unsigned int dwUser;
  unsigned int dwComponentType;
  unsigned int cChannels;
  unsigned int cConnections;
  unsigned int cControls;
  char szShortName[16];
  char szName[64];
  $428257C9868A469D077AA3A343E95D70 Target;
};

/* 4661 */
struct tagMIXERCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
};

/* 4662 */
struct __cppobj IDirectSoundCapture : IUnknown
{
};

/* 4663 */
struct HMIXER__
{
  int unused;
};

/* 4664 */
struct tMIXERCONTROLDETAILS_BOOLEAN
{
  int fValue;
};

/* 4665 */
union $476D211351DA30503E50D2F0E6E515B0
{
  unsigned int dwControlID;
  unsigned int dwControlType;
};

/* 4666 */
struct tagMIXERLINECONTROLSA
{
  unsigned int cbStruct;
  unsigned int dwLineID;
  $476D211351DA30503E50D2F0E6E515B0 ___u2;
  unsigned int cControls;
  unsigned int cbmxctrl;
  tagMIXERCONTROLA *pamxctrl;
};

/* 4667 */
union $E7835B37078658F40CAAFFA1377DFC2B
{
  HWND__ *hwndOwner;
  unsigned int cMultipleItems;
};

/* 4668 */
struct tMIXERCONTROLDETAILS
{
  unsigned int cbStruct;
  unsigned int dwControlID;
  unsigned int cChannels;
  $E7835B37078658F40CAAFFA1377DFC2B ___u3;
  unsigned int cbDetails;
  void *paDetails;
};

/* 4669 */
struct _DSCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwMinSecondarySampleRate;
  unsigned int dwMaxSecondarySampleRate;
  unsigned int dwPrimaryBuffers;
  unsigned int dwMaxHwMixingAllBuffers;
  unsigned int dwMaxHwMixingStaticBuffers;
  unsigned int dwMaxHwMixingStreamingBuffers;
  unsigned int dwFreeHwMixingAllBuffers;
  unsigned int dwFreeHwMixingStaticBuffers;
  unsigned int dwFreeHwMixingStreamingBuffers;
  unsigned int dwMaxHw3DAllBuffers;
  unsigned int dwMaxHw3DStaticBuffers;
  unsigned int dwMaxHw3DStreamingBuffers;
  unsigned int dwFreeHw3DAllBuffers;
  unsigned int dwFreeHw3DStaticBuffers;
  unsigned int dwFreeHw3DStreamingBuffers;
  unsigned int dwTotalHwMemBytes;
  unsigned int dwFreeHwMemBytes;
  unsigned int dwMaxContigFreeHwMemBytes;
  unsigned int dwUnlockTransferRateHwBuffers;
  unsigned int dwPlayCpuOverheadSwBuffers;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
};

/* 4670 */
struct __cppobj IDirectSound : IUnknown
{
};

/* 4671 */
struct tMIXERCONTROLDETAILS_UNSIGNED
{
  unsigned int dwValue;
};

/* 4672 */
struct HMIXEROBJ__
{
  int unused;
};

/* 4673 */
struct HFONT__
{
  int unused;
};

/* 4674 */
struct WinConData
{
  HWND__ *hWnd;
  HWND__ *hwndBuffer;
  HWND__ *codLogo;
  HFONT__ *hfBufferFont;
  HWND__ *hwndInputLine;
  char errorString[512];
  char consoleText[512];
  char returnedText[512];
  int windowWidth;
  int windowHeight;
  int (__stdcall *SysInputLineWndProc)(HWND__ *, unsigned int, unsigned int, int);
};

/* 4675 */
struct HBRUSH__
{
  int unused;
};

/* 4676 */
struct HMENU__
{
  int unused;
};

/* 4677 */
struct tagWNDCLASSA
{
  unsigned int style;
  int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const char *lpszMenuName;
  const char *lpszClassName;
};

/* 4678 */
struct HDC__
{
  int unused;
};

/* 4679 */
struct __unaligned __declspec(align(1)) tagICMPHDR
{
  char Type;
  char Code;
  unsigned __int16 Checksum;
  unsigned __int16 ID;
  unsigned __int16 Seq;
  char Data;
};

/* 4680 */
struct fd_set
{
  unsigned int fd_count;
  unsigned int fd_array[64];
};

/* 4681 */
struct tagIPHDR
{
  char VIHL;
  char TOS;
  __int16 TotLen;
  __int16 ID;
  __int16 FlagOff;
  char TTL;
  char Protocol;
  unsigned __int16 Checksum;
  in_addr iaSrc;
  in_addr iaDst;
};

/* 4682 */
struct __unaligned __declspec(align(1)) tagECHOREQUEST
{
  tagICMPHDR icmpHdr;
  unsigned int dwTime;
  char cData[32];
};

/* 4683 */
struct __unaligned __declspec(align(1)) tagECHOREPLY
{
  tagIPHDR ipHdr;
  tagECHOREQUEST echoRequest;
  char cFiller[256];
};

/* 4684 */
struct WSAData
{
  unsigned __int16 wVersion;
  unsigned __int16 wHighVersion;
  char szDescription[257];
  char szSystemStatus[129];
  unsigned __int16 iMaxSockets;
  unsigned __int16 iMaxUdpDg;
  char *lpVendorInfo;
};

/* 4685 */
struct sockaddr_in
{
  __int16 sin_family;
  unsigned __int16 sin_port;
  in_addr sin_addr;
  char sin_zero[8];
};

/* 4686 */
struct WinSplashStartup
{
  bool started;
};

/* 4687 */
struct tagSIZE
{
  int cx;
  int cy;
};

/* 4690 */
struct __cppobj CPing
{
};

/* 4688 */
struct CPingThread
{
  CPingThreadVtbl *vfptr;
  unsigned int m_dwID;
  void *m_hThread;
  void *m_hKillEvent;
  void *m_hSignalEvent;
  CPing m_ping;
  char m_host[256];
  HWND__ *m_hWnd;
  unsigned int m_nRetries;
  void (__cdecl *m_callback)();
};

/* 4689 */
struct CPingThreadVtbl
{
  void *(__thiscall *__vecDelDtor)(CPingThread *this, unsigned int);
};

/* 4691 */
struct hostent
{
  char *h_name;
  char **h_aliases;
  __int16 h_addrtype;
  __int16 h_length;
  char **h_addr_list;
};

/* 4692 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_18
{
  const void *pVFTable;
  void *spare;
  char name[18];
};

/* 4693 */
struct timeval
{
  int tv_sec;
  int tv_usec;
};

/* 4694 */
struct DataNode
{
  DataNode *next;
  DataNodeType type;
  char *data;
  int len;
};

/* 4695 */
struct _DM_CMDCONT
{
  HRESULT (__cdecl *HandlingFunction)(_DM_CMDCONT *, char *, unsigned int);
  unsigned int DataSize;
  void *Buffer;
  unsigned int BufferSize;
  void *CustomData;
  unsigned int BytesRemaining;
};

/* 4696 */
struct socketpool_t
{
  int sendtime;
  unsigned int m_sock;
  int ready;
  int sendcount;
};

/* 4697 */
struct __declspec(align(4)) miniDumper
{
  _EXCEPTION_POINTERS *m_pExceptionInfo;
  char m_szMiniDumpPath[260];
  char m_szMiniDumpDir[260];
  char m_szAppPath[260];
  char m_szAppBaseName[260];
  bool m_bPromptUserForMiniDump;
};

/* 4698 */
struct tagVS_FIXEDFILEINFO
{
  unsigned int dwSignature;
  unsigned int dwStrucVersion;
  unsigned int dwFileVersionMS;
  unsigned int dwFileVersionLS;
  unsigned int dwProductVersionMS;
  unsigned int dwProductVersionLS;
  unsigned int dwFileFlagsMask;
  unsigned int dwFileFlags;
  unsigned int dwFileOS;
  unsigned int dwFileType;
  unsigned int dwFileSubtype;
  unsigned int dwFileDateMS;
  unsigned int dwFileDateLS;
};

/* 4699 */
struct __unaligned __declspec(align(4)) _MINIDUMP_MODULE_CALLBACK
{
  wchar_t *FullPath;
  unsigned __int64 BaseOfImage;
  unsigned int SizeOfImage;
  unsigned int CheckSum;
  unsigned int TimeDateStamp;
  tagVS_FIXEDFILEINFO VersionInfo;
  void *CvRecord;
  unsigned int SizeOfCvRecord;
  void *MiscRecord;
  unsigned int SizeOfMiscRecord;
};

/* 4700 */
struct _INTERNET_BUFFERSA
{
  unsigned int dwStructSize;
  _INTERNET_BUFFERSA *Next;
  const char *lpcszHeader;
  unsigned int dwHeadersLength;
  unsigned int dwHeadersTotal;
  void *lpvBuffer;
  unsigned int dwBufferLength;
  unsigned int dwBufferTotal;
  unsigned int dwOffsetLow;
  unsigned int dwOffsetHigh;
};

/* 4701 */
struct _MINIDUMP_MEMORY_INFO
{
  unsigned __int64 BaseAddress;
  unsigned __int64 AllocationBase;
  unsigned int AllocationProtect;
  unsigned int __alignment1;
  unsigned __int64 RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
  unsigned int __alignment2;
};

/* 4702 */
struct _tagADDRESS64
{
  unsigned __int64 Offset;
  unsigned __int16 Segment;
  ADDRESS_MODE Mode;
};

/* 4703 */
struct _KDHELP
{
  unsigned int Thread;
  unsigned int ThCallbackStack;
  unsigned int NextCallback;
  unsigned int FramePointer;
  unsigned int KiCallUserMode;
  unsigned int KeUserCallbackDispatcher;
  unsigned int SystemRangeStart;
  unsigned int ThCallbackBStore;
  unsigned int KiUserExceptionDispatcher;
  unsigned int StackBase;
  unsigned int StackLimit;
  unsigned int Reserved[5];
};

/* 4704 */
struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
{
  unsigned __int64 Offset;
  unsigned int Bytes;
  HRESULT FailureStatus;
};

/* 4705 */
struct _MINIDUMP_EXCEPTION_INFORMATION
{
  unsigned int ThreadId;
  _EXCEPTION_POINTERS *ExceptionPointers;
  int ClientPointers;
};

/* 4706 */
struct _MINIDUMP_USER_STREAM
{
  unsigned int Type;
  unsigned int BufferSize;
  void *Buffer;
};

/* 4707 */
struct _MINIDUMP_THREAD_CALLBACK
{
  unsigned int ThreadId;
  void *ThreadHandle;
  _CONTEXT Context;
  unsigned int SizeOfContext;
  unsigned __int64 StackBase;
  unsigned __int64 StackEnd;
};

/* 4708 */
struct _MINIDUMP_THREAD_EX_CALLBACK
{
  unsigned int ThreadId;
  void *ThreadHandle;
  _CONTEXT Context;
  unsigned int SizeOfContext;
  unsigned __int64 StackBase;
  unsigned __int64 StackEnd;
  unsigned __int64 BackingStoreBase;
  unsigned __int64 BackingStoreEnd;
};

/* 4709 */
struct _MINIDUMP_INCLUDE_THREAD_CALLBACK
{
  unsigned int ThreadId;
};

/* 4710 */
struct _MINIDUMP_INCLUDE_MODULE_CALLBACK
{
  unsigned __int64 BaseOfImage;
};

/* 4711 */
struct __unaligned __declspec(align(4)) _MINIDUMP_IO_CALLBACK
{
  void *Handle;
  unsigned __int64 Offset;
  void *Buffer;
  unsigned int BufferBytes;
};

/* 4712 */
union $284A403AEA772DEB2FBD3EAFBFC5C8D8
{
  HRESULT Status;
  _MINIDUMP_THREAD_CALLBACK Thread;
  _MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
  _MINIDUMP_MODULE_CALLBACK Module;
  _MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
  _MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
  _MINIDUMP_IO_CALLBACK Io;
  _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
  unsigned int SecondaryFlags;
};

/* 4713 */
struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_INPUT
{
  unsigned int ProcessId;
  void *ProcessHandle;
  unsigned int CallbackType;
  $284A403AEA772DEB2FBD3EAFBFC5C8D8 ___u3;
};

/* 4714 */
struct $C3E071958E7BDFB53859BF79F284BD3C
{
  unsigned int ModuleWriteFlags;
  int Cancel;
  unsigned int MemorySize;
};

/* 4715 */
union $4ECCDF3F93D6EA50B9E133C9FDEE6F62
{
  $C3E071958E7BDFB53859BF79F284BD3C __s0;
  unsigned int ThreadWriteFlags;
  unsigned int SecondaryFlags;
  unsigned __int64 MemoryBase;
  int CheckCancel;
  void *Handle;
  _MINIDUMP_MEMORY_INFO VmRegion;
  HRESULT Status;
};

/* 4716 */
struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_OUTPUT
{
  $4ECCDF3F93D6EA50B9E133C9FDEE6F62 ___u0;
  int Continue;
};

/* 4717 */
struct _MINIDUMP_CALLBACK_INFORMATION
{
  int (__stdcall *CallbackRoutine)(void *, _MINIDUMP_CALLBACK_INPUT *, _MINIDUMP_CALLBACK_OUTPUT *);
  void *CallbackParam;
};

/* 4718 */
struct _KDHELP64
{
  unsigned __int64 Thread;
  unsigned int ThCallbackStack;
  unsigned int ThCallbackBStore;
  unsigned int NextCallback;
  unsigned int FramePointer;
  unsigned __int64 KiCallUserMode;
  unsigned __int64 KeUserCallbackDispatcher;
  unsigned __int64 SystemRangeStart;
  unsigned __int64 KiUserExceptionDispatcher;
  unsigned __int64 StackBase;
  unsigned __int64 StackLimit;
  unsigned __int64 Reserved[5];
};

/* 4719 */
struct _LUID
{
  unsigned int LowPart;
  int HighPart;
};

/* 4720 */
struct _LUID_AND_ATTRIBUTES
{
  _LUID Luid;
  unsigned int Attributes;
};

/* 4721 */
struct _TOKEN_PRIVILEGES
{
  unsigned int PrivilegeCount;
  _LUID_AND_ATTRIBUTES Privileges[1];
};

/* 4722 */
struct _tagADDRESS
{
  unsigned int Offset;
  unsigned __int16 Segment;
  ADDRESS_MODE Mode;
};

/* 4723 */
struct _MINIDUMP_USER_STREAM_INFORMATION
{
  unsigned int UserStreamCount;
  _MINIDUMP_USER_STREAM *UserStreamArray;
};

/* 4724 */
struct __declspec(align(8)) SysInfo
{
  long double cpuGHz;
  long double configureGHz;
  int logicalCpuCount;
  int physicalCpuCount;
  int sysMB;
  char gpuDescription[512];
  char cpuVendor[13];
  char cpuName[49];
};

/* 4725 */
struct sysEvent_t
{
  int evTime;
  sysEventType_t evType;
  int evValue;
  int evValue2;
  int evPtrLength;
  void *evPtr;
};

/* 4726 */
struct cmdlineArg_t
{
  char key[64];
  char val[128];
  bool optional;
  IdentityParam id;
};

/* 4727 */
struct _tagpropertykey
{
  _GUID fmtid;
  unsigned int pid;
};

/* 4728 */
struct _STARTUPINFOA
{
  unsigned int cb;
  char *lpReserved;
  char *lpDesktop;
  char *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  char *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 4729 */
struct tagMSG
{
  HWND__ *hwnd;
  unsigned int message;
  unsigned int wParam;
  int lParam;
  unsigned int time;
  tagPOINT pt;
};

/* 4730 */
struct __unaligned __declspec(align(1)) _SHITEMID
{
  unsigned __int16 cb;
  char abID[1];
};

/* 4731 */
struct _ITEMIDLIST
{
  _SHITEMID mkid;
};

/* 4732 */
struct _OSVERSIONINFOA
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  char szCSDVersion[128];
};

/* 4733 */
struct _PROCESS_INFORMATION
{
  void *hProcess;
  void *hThread;
  unsigned int dwProcessId;
  unsigned int dwThreadId;
};

/* 4734 */
struct $8CB265A9D3778DFC1F2AA7A5F0192391
{
  char *language;
  char *strings;
};

/* 4735 */
struct __declspec(align(4)) WinMouseVars_t
{
  int oldButtonState;
  tagPOINT oldPos;
  bool mouseActive;
  bool mouseInitialized;
};

/* 4736 */
struct ButtonToCodeMap_t
{
  GamePadButton padButton;
  int code;
};

/* 4737 */
struct StickToCodeMap_t
{
  GamePadStick padStick;
  GamePadStickDir padStickDir;
  int code;
};

/* 4738 */
struct __cppobj IDirectInputA : IUnknown
{
};

/* 4739 */
struct _DIOBJECTDATAFORMAT
{
  _GUID *pguid;
  unsigned int dwOfs;
  unsigned int dwType;
  unsigned int dwFlags;
};

/* 4740 */
struct _DIDATAFORMAT
{
  unsigned int dwSize;
  unsigned int dwObjSize;
  unsigned int dwFlags;
  unsigned int dwDataSize;
  unsigned int dwNumObjs;
  _DIOBJECTDATAFORMAT *rgodf;
};

/* 4741 */
struct DIDEVICEINSTANCEA
{
  unsigned int dwSize;
  _GUID guidInstance;
  _GUID guidProduct;
  unsigned int dwDevType;
  char tszInstanceName[260];
  char tszProductName[260];
  _GUID guidFFDriver;
  unsigned __int16 wUsagePage;
  unsigned __int16 wUsage;
};

/* 4742 */
struct DIPROPHEADER
{
  unsigned int dwSize;
  unsigned int dwHeaderSize;
  unsigned int dwObj;
  unsigned int dwHow;
};

/* 4743 */
struct DIDEVCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwDevType;
  unsigned int dwAxes;
  unsigned int dwButtons;
  unsigned int dwPOVs;
  unsigned int dwFFSamplePeriod;
  unsigned int dwFFMinTimeResolution;
  unsigned int dwFirmwareRevision;
  unsigned int dwHardwareRevision;
  unsigned int dwFFDriverVersion;
};

/* 4744 */
struct DIDEVICEOBJECTINSTANCEA
{
  unsigned int dwSize;
  _GUID guidType;
  unsigned int dwOfs;
  unsigned int dwType;
  unsigned int dwFlags;
  char tszName[260];
  unsigned int dwFFMaxForce;
  unsigned int dwFFForceResolution;
  unsigned __int16 wCollectionNumber;
  unsigned __int16 wDesignatorIndex;
  unsigned __int16 wUsagePage;
  unsigned __int16 wUsage;
  unsigned int dwDimension;
  unsigned __int16 wExponent;
  unsigned __int16 wReportId;
};

/* 4745 */
struct __cppobj IDirectInputDeviceA : IUnknown
{
};

/* 4746 */
struct DIDEVICEOBJECTDATA
{
  unsigned int dwOfs;
  unsigned int dwData;
  unsigned int dwTimeStamp;
  unsigned int dwSequence;
  unsigned int uAppData;
};

/* 4747 */
struct _XINPUT_VIBRATION
{
  unsigned __int16 wLeftMotorSpeed;
  unsigned __int16 wRightMotorSpeed;
};

/* 4748 */
struct $919AF53E5A8DC838BCB2887575518041
{
  _XINPUT_VIBRATION Rumble;
};

/* 4749 */
struct _XINPUT_GAMEPAD
{
  unsigned __int16 wButtons;
  char bLeftTrigger;
  char bRightTrigger;
  __int16 sThumbLX;
  __int16 sThumbLY;
  __int16 sThumbRX;
  __int16 sThumbRY;
};

/* 4750 */
struct _XINPUT_CAPABILITIES
{
  char Type;
  char SubType;
  unsigned __int16 Flags;
  _XINPUT_GAMEPAD Gamepad;
  _XINPUT_VIBRATION Vibration;
};

/* 4751 */
struct GamePad
{
  bool enabled;
  bool keyboardEnabled;
  __int16 digitals;
  __int16 lastDigitals;
  float analogs[2];
  float lastAnalogs[2];
  float sticks[4];
  float lastSticks[4];
  bool stickDown[4][2];
  bool stickDownLast[4][2];
  float lowRumble;
  float highRumble;
  $919AF53E5A8DC838BCB2887575518041 feedback;
  _XINPUT_CAPABILITIES caps;
  _XINPUT_CAPABILITIES keyboardCaps;
};

/* 4752 */
struct _XINPUT_STATE
{
  unsigned int dwPacketNumber;
  _XINPUT_GAMEPAD Gamepad;
};

/* 4753 */
struct DXGI_ADAPTER_DESC
{
  wchar_t Description[128];
  unsigned int VendorId;
  unsigned int DeviceId;
  unsigned int SubSysId;
  unsigned int Revision;
  unsigned int DedicatedVideoMemory;
  unsigned int DedicatedSystemMemory;
  unsigned int SharedSystemMemory;
  _LUID AdapterLuid;
};

/* 4754 */
struct __cppobj IDXGIAdapter : IDXGIObject
{
};

/* 4755 */
struct __cppobj IDXGIAdapter1 : IDXGIAdapter
{
};

/* 4756 */
struct DXGI_ADAPTER_DESC1
{
  wchar_t Description[128];
  unsigned int VendorId;
  unsigned int DeviceId;
  unsigned int SubSysId;
  unsigned int Revision;
  unsigned int DedicatedVideoMemory;
  unsigned int DedicatedSystemMemory;
  unsigned int SharedSystemMemory;
  _LUID AdapterLuid;
  unsigned int Flags;
};

/* 4757 */
struct _MEMORYSTATUSEX
{
  unsigned int dwLength;
  unsigned int dwMemoryLoad;
  unsigned __int64 ullTotalPhys;
  unsigned __int64 ullAvailPhys;
  unsigned __int64 ullTotalPageFile;
  unsigned __int64 ullAvailPageFile;
  unsigned __int64 ullTotalVirtual;
  unsigned __int64 ullAvailVirtual;
  unsigned __int64 ullAvailExtendedVirtual;
};

/* 4758 */
struct _MEMORYSTATUS
{
  unsigned int dwLength;
  unsigned int dwMemoryLoad;
  unsigned int dwTotalPhys;
  unsigned int dwAvailPhys;
  unsigned int dwTotalPageFile;
  unsigned int dwAvailPageFile;
  unsigned int dwTotalVirtual;
  unsigned int dwAvailVirtual;
};

/* 4759 */
struct __cppobj IDXGIFactory : IDXGIObject
{
};

/* 4760 */
struct __cppobj IDXGIFactory1 : IDXGIFactory
{
};

/* 4761 */
union $6AD98AF4E394A04DCFC93C709CE6E314
{
  unnamed-630 reg;
  char name[12];
};

/* 4762 */
struct $8B82BF8D68A19282BC6E2911FE3C05C3
{
  unsigned int ebx;
  unsigned int edx;
  unsigned int ecx;
};

/* 4763 */
union $49D0DE2E75D3E451533F075D205C4EB1
{
  unnamed-633 s;
  char string[52];
};

/* 4764 */
struct __declspec(align(16)) $DE62CD838D93AD8C044A74FD13AB82B3
{
  unnamed-635 reg0;
  _BYTE gap0[16];
  unnamed-635 reg1;
  _BYTE gap10[16];
  unnamed-635 reg2;
  _BYTE gap20[16];
};

/* 4765 */
struct $0BE088860890CE3314C51CDC88CB3743
{
  unsigned int eax;
  unsigned int ebx;
  unsigned int ecx;
  unsigned int edx;
};

/* 4766 */
union $1D73FB830CFE1EFA094511F08078F10A
{
  unnamed-638 u32;
  unsigned __int64 u64;
};

/* 4767 */
struct $EA907A75549A86E467966348135D64F4
{
  unsigned int _0;
  unsigned int _1;
};

/* 4768 */
struct CommandHandler
{
  char name[32];
  HRESULT (__cdecl *proc)(const char *, char *, unsigned int, _DM_CMDCONT *);
};

/* 4769 */
struct winDmCommandResponse
{
  unsigned int returnValue;
  unsigned int responseLength;
};

/* 4770 */
struct winDmCommand
{
  unsigned int isBinarySend;
  unsigned int commandStrLength;
  unsigned int maxResponseLength;
};

/* 4771 */
struct MV
{
  __int16 row;
  __int16 col;
};

/* 4772 */
union int_mv
{
  unsigned int as_int;
  MV as_mv;
};

/* 4773 */
struct MB_MODE_INFO
{
  MB_PREDICTION_MODE mode;
  MB_PREDICTION_MODE uv_mode;
  MV_REFERENCE_FRAME ref_frame;
  int_mv mv;
  char partitioning;
  char mb_skip_coeff;
  char need_to_clamp_mvs;
  char segment_id;
};

/* 4774 */
struct YV12_BUFFER_CONFIG
{
  int y_width;
  int y_height;
  int y_stride;
  int uv_width;
  int uv_height;
  int uv_stride;
  char *y_buffer;
  char *u_buffer;
  char *v_buffer;
  char *buffer_alloc;
  int border;
  int frame_size;
  YUV_TYPE clrtype;
  int corrupted;
  int flags;
};

/* 4775 */
struct ENTROPY_CONTEXT_PLANES
{
  char y1[4];
  char u[2];
  char v[2];
  char y2;
};

/* 4776 */
union b_mode_info
{
  B_PREDICTION_MODE as_mode;
  int_mv mv;
};

/* 4777 */
struct BLOCKD
{
  __int16 *qcoeff;
  __int16 *dqcoeff;
  char *predictor;
  __int16 *diff;
  __int16 *dequant;
  char **base_pre;
  int pre;
  int pre_stride;
  char **base_dst;
  int dst;
  int dst_stride;
  int eob;
  b_mode_info bmi;
};

/* 4778 */
struct MODE_INFO
{
  MB_MODE_INFO mbmi;
  b_mode_info bmi[16];
};

/* 4779 */
struct __declspec(align(16)) MacroBlockD
{
  __int16 diff[400];
  char predictor[384];
  __int16 qcoeff[400];
  __int16 dqcoeff[400];
  char eobs[25];
  BLOCKD block[25];
  YV12_BUFFER_CONFIG pre;
  YV12_BUFFER_CONFIG dst;
  MODE_INFO *mode_info_context;
  int mode_info_stride;
  FRAME_TYPE frame_type;
  int up_available;
  int left_available;
  ENTROPY_CONTEXT_PLANES *above_context;
  ENTROPY_CONTEXT_PLANES *left_context;
  char segmentation_enabled;
  char update_mb_segmentation_map;
  char update_mb_segmentation_data;
  char mb_segement_abs_delta;
  char mb_segment_tree_probs[3];
  char segment_feature_data[2][4];
  char mode_ref_lf_delta_enabled;
  char mode_ref_lf_delta_update;
  char last_ref_lf_deltas[4];
  char ref_lf_deltas[4];
  char last_mode_lf_deltas[4];
  char mode_lf_deltas[4];
  int mb_to_left_edge;
  int mb_to_right_edge;
  int mb_to_top_edge;
  int mb_to_bottom_edge;
  int ref_frame_cost[4];
  unsigned int frames_since_golden;
  unsigned int frames_till_alt_ref_frame;
  void (__cdecl *subpixel_predict)(char *, int, int, int, char *, int);
  void (__cdecl *subpixel_predict8x4)(char *, int, int, int, char *, int);
  void (__cdecl *subpixel_predict8x8)(char *, int, int, int, char *, int);
  void (__cdecl *subpixel_predict16x16)(char *, int, int, int, char *, int);
  void *current_bc;
  int corrupted;
};

/* 4780 */
struct CRCscan
{
  unsigned int goal_crc;
  int bytes_left;
  unsigned int crc_so_far;
  int bytes_done;
  unsigned int sample_loc;
};

/* 4781 */
struct stb_vorbis_alloc
{
  char *alloc_buffer;
  int alloc_buffer_length_in_bytes;
};

/* 4782 */
struct __declspec(align(2)) Floor0
{
  char order;
  unsigned __int16 rate;
  unsigned __int16 bark_map_size;
  char amplitude_bits;
  char amplitude_offset;
  char number_of_books;
  char book_list[16];
};

/* 4783 */
struct Floor1
{
  char partitions;
  char partition_class_list[32];
  char class_dimensions[16];
  char class_subclasses[16];
  char class_masterbooks[16];
  __int16 subclass_books[16][8];
  unsigned __int16 Xlist[250];
  char sorted_order[250];
  char neighbors[250][2];
  char floor1_multiplier;
  char rangebits;
  int values;
};

/* 4784 */
union Floor
{
  Floor0 floor0;
  Floor1 floor1;
};

/* 4785 */
struct Mode
{
  char blockflag;
  char mapping;
  unsigned __int16 windowtype;
  unsigned __int16 transformtype;
};

/* 4786 */
struct __declspec(align(4)) stb_vorbis_packet
{
  stb_vorbis_packet *next;
  char *data;
  unsigned int size;
  char flags;
};

/* 4787 */
struct Codebook
{
  int dimensions;
  int entries;
  char *codeword_lengths;
  float minimum_value;
  float delta_value;
  char value_bits;
  char lookup_type;
  char sequence_p;
  char sparse;
  unsigned int lookup_values;
  float *multiplicands;
  unsigned int *codewords;
  __int16 fast_huffman[1024];
  unsigned int *sorted_codewords;
  int *sorted_values;
  int sorted_entries;
};

/* 4788 */
struct ProbedPage
{
  unsigned int page_start;
  unsigned int page_end;
  unsigned int after_previous_page_start;
  unsigned int first_decoded_sample;
  unsigned int last_decoded_sample;
};

/* 4789 */
struct Residue
{
  unsigned int begin;
  unsigned int end;
  unsigned int part_size;
  char classifications;
  char classbook;
  char **classdata;
  __int16 (*residue_books)[8];
};

/* 4790 */
struct MappingChannel
{
  char magnitude;
  char angle;
  char mux;
};

/* 4791 */
struct __declspec(align(2)) Mapping
{
  unsigned __int16 coupling_steps;
  MappingChannel *chan;
  char submaps;
  char submap_floor[15];
  char submap_residue[15];
};

/* 4792 */
struct stb_vorbis
{
  unsigned int sample_rate;
  int channels;
  unsigned int setup_memory_required;
  unsigned int temp_memory_required;
  unsigned int setup_temp_memory_required;
  _iobuf *f;
  unsigned int f_start;
  int close_on_free;
  char *stream;
  char *stream_start;
  char *stream_end;
  unsigned int stream_len;
  char push_mode;
  char packet_mode;
  unsigned int first_audio_page_offset;
  ProbedPage p_first;
  ProbedPage p_last;
  stb_vorbis_alloc alloc;
  int setup_offset;
  int temp_offset;
  int eof;
  STBVorbisError error;
  int blocksize[2];
  int blocksize_0;
  int blocksize_1;
  int codebook_count;
  Codebook *codebooks;
  int floor_count;
  unsigned __int16 floor_types[64];
  Floor *floor_config;
  int residue_count;
  unsigned __int16 residue_types[64];
  Residue *residue_config;
  int mapping_count;
  Mapping *mapping;
  int mode_count;
  Mode mode_config[64];
  unsigned int total_samples;
  float *channel_buffers[16];
  float *outputs[16];
  float *previous_window[16];
  int previous_length;
  __int16 *finalY[16];
  unsigned int current_loc;
  int current_loc_valid;
  float *A[2];
  float *B[2];
  float *C[2];
  float *window[2];
  unsigned __int16 *bit_reverse[2];
  unsigned int serial;
  int last_page;
  int segment_count;
  char segments[255];
  char page_flag;
  char bytes_in_seg;
  char first_decode;
  int next_seg;
  int last_seg;
  int last_seg_which;
  unsigned int acc;
  int valid_bits;
  int packet_bytes;
  int end_seg_with_known_loc;
  unsigned int known_loc_for_packet;
  int discard_samples_deferred;
  unsigned int samples_output;
  int page_crc_tests;
  CRCscan scan[4];
  int channel_buffer_start;
  int channel_buffer_end;
  stb_vorbis_packet *packet;
};

/* 4793 */
struct Point
{
  unsigned __int16 x;
  unsigned __int16 y;
};

/* 4794 */
struct stb_vorbis_info
{
  unsigned int sample_rate;
  int channels;
  unsigned int setup_memory_required;
  unsigned int setup_temp_memory_required;
  unsigned int temp_memory_required;
  int max_frame_size;
};

/* 4795 */
union float_conv
{
  float f;
  int i;
};

/* 4796 */
struct __declspec(align(2)) MOSState
{
  unsigned __int16 PC;
  char SP;
  char X;
  char Y;
  char A;
  char SR;
};

/* 4797 */
struct PIAState
{
  int interval;
  int intervalRemaining;
  char stat;
  char timer;
  char SWCHA;
  char SWCHB;
  char RAM[128];
};

/* 4798 */
struct AudioState
{
  char AUDC;
  char AUDV;
  char AUDF;
  char output;
  int dividerCount;
  int dividerMax;
  unsigned int poly_4;
  unsigned int poly_5;
  unsigned int poly_9;
};

/* 4799 */
struct TIAState
{
  void *pixels;
  int pitch;
  int height;
  int linePosition;
  int lineCount;
  int state;
  bool pendingVSync;
  int posP0;
  int posP1;
  int posM0;
  int posM1;
  int posBL;
  int HMP0;
  int HMP1;
  int HMM0;
  int HMM1;
  int HMBL;
  char GRP0;
  char GRP0D;
  char GRP1;
  char GRP1D;
  char ENABL;
  char ENABLD;
  char GRPCache[4][9];
  char GRPCached[4];
  char CTRLPF;
  char PF0;
  char PF1;
  char PF2;
  char playFieldCache[40];
  bool playFieldDirty;
  char NUSIZ0;
  char REFP0;
  char NUSIZ1;
  char REFP1;
  char xCache[2][160];
  bool xCacheDirty[2];
  AudioState audio[2];
  int audioCycles;
  int audioResampleCount;
  int audioReadSample;
  int audioWriteSample;
  char audioBuffer[4096];
  SndDspBiquadState outputFilter;
  float dcBlockX;
  float dcBlockY;
  char reg[64];
};

/* 4800 */
struct __declspec(align(4)) ROMInfo
{
  const char *name;
  ROMType type;
  void *data;
  unsigned int size;
  bool usesPaddles;
};

/* 4801 */
struct __declspec(align(2)) DPCChannel
{
  unsigned __int16 counter;
  char top;
  char bottom;
  char flag;
  char musicMode;
  char osc;
};

/* 4802 */
struct __declspec(align(2)) DPCState
{
  DPCChannel channel[8];
  char rnd;
};

/* 4803 */
struct Machine
{
  MOSState MOS;
  PIAState PIA;
  TIAState TIA;
  ROMInfo *ROM;
  DPCState DPC;
  int bank;
  int paddle[4];
  unsigned int paddleCycles[4];
  int debug;
  unsigned int MOSCycles;
  unsigned int PIACycles;
  unsigned int TIACycles;
  unsigned int DPCCycles;
};

/* 4804 */
struct _finddata64i32_t
{
  unsigned int attrib;
  __int64 time_create;
  __int64 time_access;
  __int64 time_write;
  unsigned int size;
  char name[260];
};

/* 4805 */
struct NTPMessage
{
  unsigned int header;
  unsigned int root_delay;
  unsigned int root_dispersion;
  unsigned int reference_indentifier;
  unsigned __int64 reference_timestamp;
  unsigned __int64 originate_timestamp;
  unsigned __int64 receive_timestamp;
  unsigned __int64 transmit_timestamp;
};

/* 4806 */
struct infoParm_t
{
  const char *name;
  int clearSolid;
  int surfaceFlags;
  int contents;
  int toolFlags;
};

/* 4807 */
struct reliableMsg
{
  bool active;
  char sequenceNum;
  msg_t msg;
  netsrc_t fromLocalNetID;
};

/* 4808 */
struct reliableClient
{
  netadr_t addr;
  int lastSendTime;
  int firstSendTime;
  char nextSequence;
  int bufferUsed;
  int bytesAckd;
  char reliableBuf[1000];
  reliableMsg msgs[20];
};

/* 4809 */
struct RedBlackTreeNode
{
  unsigned __int64 key;
  unsigned int color;
  RedBlackTreeNode *parent;
  RedBlackTreeNode *child[2];
};

/* 4810 */
struct __declspec(align(8)) RedBlackTree
{
  RedBlackTreeNode null;
  RedBlackTreeNode root;
  RedBlackTreeNode *(__cdecl *AllocNodeCallback)();
};

/* 4811 */
struct __declspec(align(8)) RedBlackCacheNode
{
  RedBlackTreeNode rbNode;
  unsigned int timeStamp;
};

/* 4812 */
struct __declspec(align(8)) RedBlackCache
{
  RedBlackTree rbTree;
  RedBlackCacheNode *firstNode;
  unsigned int sizeofNode;
  unsigned int nodeCount;
  unsigned int minTimeToFree;
  unsigned int allocCount;
  unsigned int freeWalk;
  unsigned int timeStamp;
  bool isNewNode;
  void (__cdecl *FreeCallback)(RedBlackCacheNode *);
};

/* 4813 */
struct RaiiSrvString
{
  unsigned __int16 m_stringHash;
  __int16 m_iInst;
};

/* 4814 */
struct ltc_cipher_descriptor
{
  char *name;
  char ID;
  int min_key_length;
  int max_key_length;
  int block_length;
  int default_rounds;
  int (__cdecl *setup)(const char *, int, int, Symmetric_key *);
  int (__cdecl *ecb_encrypt)(const char *, char *, Symmetric_key *);
  int (__cdecl *ecb_decrypt)(const char *, char *, Symmetric_key *);
  int (__cdecl *test)();
  void (__cdecl *done)(Symmetric_key *);
  int (__cdecl *keysize)(int *);
  int (__cdecl *accel_ecb_encrypt)(const char *, char *, unsigned int, Symmetric_key *);
  int (__cdecl *accel_ecb_decrypt)(const char *, char *, unsigned int, Symmetric_key *);
  int (__cdecl *accel_cbc_encrypt)(const char *, char *, unsigned int, char *, Symmetric_key *);
  int (__cdecl *accel_cbc_decrypt)(const char *, char *, unsigned int, char *, Symmetric_key *);
  int (__cdecl *accel_ctr_encrypt)(const char *, char *, unsigned int, char *, int, Symmetric_key *);
  int (__cdecl *accel_lrw_encrypt)(const char *, char *, unsigned int, char *, const char *, Symmetric_key *);
  int (__cdecl *accel_lrw_decrypt)(const char *, char *, unsigned int, char *, const char *, Symmetric_key *);
  int (__cdecl *accel_ccm_memory)(const char *, unsigned int, Symmetric_key *, const char *, unsigned int, const char *, unsigned int, char *, unsigned int, char *, char *, unsigned int *, int);
  int (__cdecl *accel_gcm_memory)(const char *, unsigned int, const char *, unsigned int, const char *, unsigned int, char *, unsigned int, char *, char *, unsigned int *, int);
  int (__cdecl *omac_memory)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
  int (__cdecl *xcbc_memory)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
  int (__cdecl *f9_memory)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
};

/* 4815 */
struct va_info_t
{
  char va_string[4][1024];
  int index;
};

/* 4816 */
struct parseInfo_t
{
  char token[1024];
  ParseTokenType tokenType;
  int lines;
  bool ungetToken;
  bool spaceDelimited;
  bool keepStringQuotes;
  bool csv;
  bool negativeNumbers;
  bool numbers;
  const char *extraWordCharacters;
  const char *errorPrefix;
  const char *warningPrefix;
  int backup_lines;
  const char *backup_text;
  const char *parseFile;
};

/* 4817 */
struct ParseThreadInfo
{
  parseInfo_t parseInfo[16];
  int parseInfoNum;
  const char *tokenPos;
  const char *prevTokenPos;
  char line[1024];
};

/* 4818 */
struct Q_COLUMN
{
  Q_DATA_TYPE column_type;
  char *column_name;
};

/* 4819 */
struct Q_TABLE
{
  char *name;
  unsigned int column_count;
  unsigned int primary_key_column;
  Q_COLUMN *column;
  unsigned int row_count;
  void *data;
};

/* 4820 */
union $6415E3B5951A22757DFE70645189EBB7
{
  int iVal;
  float fVal;
  const char *strVal;
};

/* 4821 */
struct Q_DATA_ELEMENT
{
  Q_DATA_TYPE type;
  $6415E3B5951A22757DFE70645189EBB7 ___u1;
};

/* 4822 */
struct Q_QUERYDESC
{
  unsigned int column_index;
  Q_OPERATOR op;
  Q_DATA_ELEMENT data;
};

/* 4823 */
struct Q_QUERYSTATE
{
  Q_TABLE *table;
  unsigned int cur_row;
  unsigned int query_size;
  Q_QUERYDESC *query_desc;
};

/* 4824 */
struct Q_FIXUP
{
  unsigned __int16 offset;
  unsigned __int16 value;
};

/* 4825 */
struct Q_DB
{
  char *name;
  unsigned int table_count;
  Q_TABLE *tables;
};

/* 4826 */
struct Q_DB_HEADER
{
  char magic_version[8];
  unsigned int fixup_count;
  unsigned int fixup_offset;
  unsigned int string_count;
  void *strings;
  unsigned int num_db;
  Q_DB *db;
};

/* 4827 */
struct profilemem_t
{
  profilemem_t *child;
  profilemem_t *parent;
  profilemem_t *nextSibling;
  profilemem_t *prevSibling;
  unsigned int startSize;
  unsigned int totalSize;
  unsigned int hits;
  const char *name;
};

/* 4828 */
struct ProfileMemTree
{
  profilemem_t *currentNode;
  profilemem_t nodePool[256];
  unsigned int treeSize;
};

/* 4829 */
struct profMemTreeIter_t
{
  profilemem_t *node;
  int nesting;
};

/* 4830 */
struct pooldata_t
{
  void *firstFree;
  int activeCount;
};

/* 4831 */
struct freenode
{
  freenode *next;
};

/* 4832 */
struct PhysicalMemoryAllocation
{
  const char *name;
  unsigned int pos;
};

/* 4833 */
struct PhysicalMemoryPrim
{
  const char *allocName;
  unsigned int allocListCount;
  unsigned int pos;
  PhysicalMemoryAllocation allocList[80];
  EMemTrack memTrack;
};

/* 4834 */
struct PhysicalMemory
{
  const char *name;
  char *buf;
  PhysicalMemoryPrim prim[2];
  unsigned int size;
};

/* 4835 */
struct tlFixedString
{
  unsigned int hash;
  char str[28];
};

/* 4836 */
struct ALLOCATION_SCHEME_FUNCTIONS
{
  HunkUser *(__cdecl *Init)(void *, int, HU_ALLOCATION_SCHEME, unsigned int, void *, const char *, int);
  void (__cdecl *Reset)(HunkUser *);
  void (__cdecl *Destroy)(HunkUser *);
  void *(__cdecl *Alloc)(HunkUser *, int, int, const char *);
  void (__cdecl *Free)(HunkUser *, void *);
};

/* 4837 */
struct __declspec(align(4)) HunkUserDefault
{
  HunkUser hunkUser;
  HunkUserDefault *current;
  HunkUserDefault *next;
  int maxSize;
  int end;
  int pos;
  int locked;
  char buf[1];
};

/* 4838 */
struct HunkUserNull
{
  HunkUser hunkUser;
  int size;
  int alignment;
};

/* 4839 */
struct HunkUserDebug
{
  HunkUser hunkUser;
  HunkUser *firstFit;
};

/* 4840 */
struct _fixed_heapnode
{
  _fixed_heapnode *next;
};

/* 4841 */
struct FIXED_HUNKUSER
{
  HunkUser hunkUser;
  int base_size;
  int block_size;
  _fixed_heapnode *free_blocks;
  FastCriticalSection criticalSection;
};

/* 4842 */
struct USERHEAP_FIXED_SCHEME_SPECIFIC
{
  int block_size;
};

/* 4843 */
struct _firstfit_heapnode
{
  _firstfit_heapnode *next;
  int size;
};

/* 4844 */
struct FIRSTFIT_HUNKUSER
{
  HunkUser hunkUser;
  int base_size;
  _firstfit_heapnode *free_blocks;
  int watermarkId;
  unsigned int hunkUser_memAllocated;
  FastCriticalSection criticalSection;
};

/* 4845 */
struct complex4_t
{
  vec4_t real;
  vec4_t imag;
};

/* 4846 */
struct complex_s
{
  float real;
  float imag;
};

/* 4847 */
struct _s__CatchableType
{
  unsigned int properties;
  _TypeDescriptor *pType;
  _PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)();
};

/* 4848 */
struct _s__CatchableTypeArray
{
  int nCatchableTypes;
  _s__CatchableType *arrayOfCatchableTypes[];
};

/* 4849 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_5
{
  const void *pVFTable;
  void *spare;
  char name[5];
};

/* 4850 */
struct _s__ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)();
  int (*pForwardCompat)(...);
  _s__CatchableTypeArray *pCatchableTypeArray;
};

/* 4851 */
struct $_s__CatchableTypeArray$_extraBytes_8
{
  int nCatchableTypes;
  _s__CatchableType *arrayOfCatchableTypes[2];
};

/* 4852 */
union $4410DF0FF4BFB3AFD79BC51BC536EF76
{
  long double d;
  int i;
  char *s;
};

/* 4853 */
struct EvalValue
{
  EvalValueType type;
  $4410DF0FF4BFB3AFD79BC51BC536EF76 u;
};

/* 4854 */
struct __declspec(align(4)) Eval
{
  EvalOperatorType opStack[1024];
  EvalValue valStack[1024];
  int opStackPos;
  int valStackPos;
  int parenCount;
  bool pushedOp;
};

/* 4855 */
struct dvarCallBack_t
{
  bool needsCallback;
  void (__cdecl *callback)(dvar_t *);
  dvar_t *dvar;
};

/* 4856 */
struct std::_Pair_base<dvar_t const * *,dvar_t const * *>
{
  dvar_t **first;
  dvar_t **second;
};

/* 4857 */
struct __cppobj std::pair<dvar_t const * *,dvar_t const * *> : std::_Pair_base<dvar_t const * *,dvar_t const * *>
{
};

/* 4858 */
struct CURVESORTARGS
{
  bool increasing_sort_order;
  vec3_t p;
};

/* 4859 */
struct $63EFB6C93DE6955CFE010EC7D10AF514
{
  unsigned __int16 upper;
  char lower;
  char len;
};

/* 4860 */
const struct $2CDDC0727FDD23CCDA4ED1DAE9D19E8C
{
  unsigned __int16 upper;
  char lower;
  char len;
};

/* 4861 */
struct TaskRecordHistory
{
  TaskDefinition *definition;
  unsigned int id;
  int startMS;
};

/* 4862 */
struct coreStringTableAsset_t
{
  int nameHash;
  int hitCount;
};

/* 4863 */
struct stringTableCacheEntry_t
{
  int nameHash;
  char fileName[256];
  StringTable *asset;
  int hitCount;
};

/* 4864 */
struct stringTableCache_t
{
  stringTableCacheEntry_t cacheEntries[16];
  stringTableCacheEntry_t *cacheEntryList[16];
};

/* 4865 */
union PackedLmapCoords
{
  unsigned int packed;
};

/* 4866 */
struct __declspec(align(4)) fileData_s
{
  void *data;
  fileData_s *next;
  char type;
  char name[1];
};

/* 4867 */
struct hunkUsed_t
{
  int permanent;
  int temp;
};

/* 4868 */
struct hunkHeader_t
{
  unsigned int magic;
  int size;
  const char *name;
  int dummy;
};

/* 4869 */
struct mem_track_t
{
  char name[128];
  const char *filename;
  int size[2];
  int pos;
  char type;
  char usageType;
  int count;
};

/* 4870 */
struct mem_track_node_s
{
  mem_track_t data;
  int project;
  mem_track_node_s *prev;
  mem_track_node_s *next;
};

/* 4871 */
struct AssetList
{
  int assetCount;
  int maxCount;
  XAssetHeader *assets;
};

/* 4872 */
union qfile_gus
{
  _iobuf *o;
  char *z;
};

/* 4873 */
struct qfile_us
{
  qfile_gus file;
  int iwdIsClone;
};

/* 4874 */
struct fileInIwd_s
{
  unsigned int pos;
  char *name;
  fileInIwd_s *next;
};

/* 4875 */
struct iwd_t
{
  char iwdFilename[256];
  char iwdBasename[256];
  char iwdGamename[256];
  char *handle;
  int checksum;
  int pure_checksum;
  volatile int hasOpenFile;
  int numFiles;
  char referenced;
  unsigned int hashSize;
  fileInIwd_s **hashTable;
  fileInIwd_s *buildBuffer;
};

/* 4876 */
struct fileHandleData_t
{
  qfile_us handleFiles;
  int handleSync;
  int fileSize;
  int zipFilePos;
  iwd_t *zipFile;
  int streamed;
  char name[256];
};

/* 4877 */
struct AddonMapDef
{
  const char *prefix;
  unsigned int prefixLen;
  int optionalBaseMap;
};

/* 4878 */
struct iwd_pure_check_s
{
  iwd_pure_check_s *next;
  int checksum;
  char iwdBasename[256];
  char iwdGamename[256];
};

/* 4879 */
struct searchpath_s
{
  searchpath_s *next;
  iwd_t *iwd;
  directory_t *dir;
  int bLocalized;
  int ignore;
  int ignorePureCheck;
  int language;
};

/* 4880 */
struct directory_t
{
  char path[256];
  char gamedir[256];
};

/* 4881 */
struct OperandList
{
  Operand operands[10];
  int operandCount;
};

/* 4882 */
struct OperandStack
{
  OperandList stack[60];
  int numOperandLists;
};

/* 4883 */
struct rpnStaticFunction_t
{
  int arguments;
  void (__cdecl *cmd)(LocalClientNum_t, itemDef_s *, OperandStack *);
};

/* 4884 */
union entryInternalData
{
  expOperationEnum op;
  Operand operand;
};

/* 4885 */
struct pc_token_s
{
  int type;
  int subtype;
  int intvalue;
  float floatvalue;
  char string[1024];
};

/* 4886 */
struct expressionEntry
{
  int type;
  entryInternalData data;
  expressionEntry *next;
};

/* 4887 */
struct ExpressionAllocState
{
  int size;
  void *buffer;
};

/* 4888 */
struct bb_msg_t
{
  char *data;
  int maxsize;
  int cursize;
  bool overflow;
  char *pppHashTable;
  char pppBits;
  unsigned int pppHash;
  int pppBitOffset;
  int pppBitCount;
};

/* 4889 */
struct DefinitionMap
{
  unsigned int nameHash;
  unsigned int formatHash;
  int parameterCount;
  int definitionId;
  char parameters[64];
};

/* 4890 */
struct BBMsgHeader
{
  char ident[8];
  int magic;
  unsigned int createTime;
  unsigned int sendTime;
  unsigned int flags;
};

/* 4891 */
struct BBThrottle
{
  unsigned int name;
  int throttleMS;
  int lastMS;
};

/* 4892 */
struct bb_highwater_t
{
  const char *name;
  unsigned int current_value;
  unsigned int sent_value;
};

/* 4893 */
struct AddressInfo_s
{
  unsigned int address;
  char moduleName[64];
  char bestFunction[64];
  char bestFunctionFilename[64];
  unsigned int bestFunctionAddress;
  char bestLineFilename[64];
  unsigned int bestLineAddress;
  unsigned int bestLineNumber;
};

/* 4894 */
struct __declspec(align(4)) _WIN32_FIND_DATAA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  char cFileName[260];
  char cAlternateFileName[14];
};

/* 4895 */
struct _POINTL
{
  int x;
  int y;
};

/* 4896 */
struct $5ACE225D4D14CE0550A9F5A217E306C5
{
  __int16 dmOrientation;
  __int16 dmPaperSize;
  __int16 dmPaperLength;
  __int16 dmPaperWidth;
};

/* 4897 */
union $59369DFAA79A987E54DC1C24804EB24B
{
  $5ACE225D4D14CE0550A9F5A217E306C5 __s0;
  _POINTL dmPosition;
};

/* 4898 */
struct $84BDF2D0EF3E6D92B6C33770B276E406
{
  __int16 dmScale;
  __int16 dmCopies;
};

/* 4899 */
union $AC0DA696F1AC61834C5AECCEE12E7519
{
  $84BDF2D0EF3E6D92B6C33770B276E406 __s0;
  unsigned int dmDisplayOrientation;
};

/* 4900 */
struct $319163E49F0A6F35652FDFBFBA0FF503
{
  __int16 dmDefaultSource;
  __int16 dmPrintQuality;
};

/* 4901 */
union $8A3B07B665CC56068A1926158FA4DFF0
{
  $319163E49F0A6F35652FDFBFBA0FF503 __s0;
  unsigned int dmDisplayFixedOutput;
};

/* 4902 */
union $309666D137CBB19809FA597AD348B415
{
  unsigned int dmDisplayFlags;
  unsigned int dmNup;
};

/* 4903 */
struct _devicemodeA
{
  char dmDeviceName[32];
  unsigned __int16 dmSpecVersion;
  unsigned __int16 dmDriverVersion;
  unsigned __int16 dmSize;
  unsigned __int16 dmDriverExtra;
  unsigned int dmFields;
  $59369DFAA79A987E54DC1C24804EB24B ___u6;
  $AC0DA696F1AC61834C5AECCEE12E7519 ___u7;
  $8A3B07B665CC56068A1926158FA4DFF0 ___u8;
  __int16 dmColor;
  __int16 dmDuplex;
  __int16 dmYResolution;
  __int16 dmTTOption;
  __int16 dmCollate;
  char dmFormName[32];
  unsigned __int16 dmLogPixels;
  unsigned int dmBitsPerPel;
  unsigned int dmPelsWidth;
  unsigned int dmPelsHeight;
  $309666D137CBB19809FA597AD348B415 ___u19;
  unsigned int dmDisplayFrequency;
  unsigned int dmICMMethod;
  unsigned int dmICMIntent;
  unsigned int dmMediaType;
  unsigned int dmDitherType;
  unsigned int dmReserved1;
  unsigned int dmReserved2;
  unsigned int dmPanningWidth;
  unsigned int dmPanningHeight;
};

/* 4904 */
struct GenericAabbTree
{
  int firstItem;
  int itemCount;
  int firstChild;
  int childCount;
};

/* 4905 */
struct GenericAabbTreeOptions
{
  void *items;
  int itemCount;
  int itemSize;
  int maintainValidBounds;
  vec3_t *mins;
  vec3_t *maxs;
  GenericAabbTree *treeNodePool;
  int treeNodeLimit;
  int minItemsPerLeaf;
  int maxItemsPerLeaf;
};

/* 4906 */
struct stringDef_s
{
  stringDef_s *next;
  const char *str;
};

/* 4907 */
struct conditionStackMember_t
{
  ExpressionStatement condition;
  bool fireOnTrue;
  int level;
  int blockID;
  int constructID;
  int type;
};

/* 4908 */
struct conditionStack_t
{
  conditionStackMember_t members[64];
  int size;
};

/* 4909 */
struct nestingCounts_t
{
  int bracketNestingLevel;
  int ifNestingLevel;
};

/* 4910 */
struct loadAssets_t
{
  float fadeClamp;
  int fadeCycle;
  float fadeAmount;
  float fadeInAmount;
};

/* 4911 */
struct $03D404910DA46CE9CAFB1C16876EEB3C
{
  loadAssets_t loadAssets;
  MenuList menuList;
  itemDef_s *items[512];
  animParamsDef_t *animStates[256];
  menuDef_t *menus[512];
};

/* 4912 */
struct KeywordHashEntry<menuDef_t,1024,128>
{
  const char *keyword;
  int (__cdecl *func)(menuDef_t *, int);
};

/* 4913 */
struct KeywordHashEntry<itemDef_s,1024,378>
{
  const char *keyword;
  int (__cdecl *func)(itemDef_s *, int);
};

/* 4914 */
struct commandDef_t
{
  const char *name;
  void (__cdecl *handler)(LocalClientNum_t, UiContext *, itemDef_s *, const char **);
};

/* 4915 */
struct scrollInfo_s
{
  int nextScrollTime;
  int nextAdjustTime;
  int adjustValue;
  int scrollKey;
  float xStart;
  float yStart;
  itemDef_s *item;
  int scrollDir;
};

/* 4916 */
struct MenuNameHash_t
{
  unsigned int hash;
};

/* 4917 */
struct ScreenPlacementStack
{
  ScreenPlacement stack[2];
  int size;
  UIContextIndex_t contextIndex;
};

/* 4918 */
struct ScopedScrPlaceViewStack
{
  ScreenPlacementStack *mStack;
};

/* 4919 */
struct __cppobj std::iterator<std::random_access_iterator_tag,char,int,char *,char &>
{
};

/* 4920 */
struct __cppobj std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > : std::iterator<std::random_access_iterator_tag,char,int,char *,char &>
{
  char *current;
};

/* 4921 */
struct __cppobj std::random_access_iterator_tag : std::bidirectional_iterator_tag
{
};

/* 4922 */
struct __cppobj std::reverse_iterator<char *> : std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
{
};

/* 4923 */
struct __declspec(align(4)) nestingStackElem_t
{
  int constructID;
  int blockID;
  bool outcome;
};

/* 4924 */
struct GfxUI3DStack
{
  int stack[2];
  int size;
};

/* 4925 */
struct ScopedUI3DStack
{
  bool mPopOnDeconstruction;
  GfxUI3DStack *mStack;
};

/* 4926 */
struct nestingStack_t
{
  int top;
  nestingStackElem_t members[64];
};

/* 4927 */
struct GfxQuad
{
  vec3_t xyz[4];
  vec2_t st[4];
  GfxColor color;
};

/* 4928 */
struct playlistEntry
{
  const char *mapname;
  const char *gametype;
  const char *startloc;
  int fullWeight;
  int remainingWeight;
  int ignore;
};

/* 4929 */
struct playlistInfo
{
  const char *name;
  const char *description;
  const char *lockdescription;
  const char *iconName;
  const char *rules;
  int category;
  int baseEntry;
  int numEntries;
  int unlockXp;
  int unlockPLevel;
  int gametypeBan;
  int maxPartySize;
  int minPartySize;
  unsigned int requiredDLCMask;
  bool ranked;
  bool finishedSoloRequired;
  int wagerBet;
  int wagerEntry;
  int maxLocalPlayers;
  bool disableGuests;
  bool hideifmissingdlc;
  bool visible_profilevar;
  profile_setting visProfileVar;
  bool buyable_dvar;
  dvar_t *buyDvar;
  int leagueID;
  int parkingPlaylist;
};

/* 4930 */
struct categoryInfo
{
  const char *internalName;
  const char *filter;
  const char *localizedName;
  const char *description;
  const char *lockdescription;
  const char *iconName;
  const char *dlcRequiredPopupTitle;
  const char *dlcRequiredPopupDesc;
  int unlockXp;
  int unlockPLevel;
  bool finishedSoloRequired;
  int playlistCount;
  const char *rules;
  bool hideifmissingdlc;
  bool directtostoreifmissingdlc;
  bool visible_profilevar;
  profile_setting visProfileVar;
  int supercategory;
  unsigned int requiredDLCMask;
  EUserTier minUserTier;
};

/* 4931 */
struct playlistMapList
{
  const char *name;
  int base;
  int count;
};

/* 4932 */
struct playlistGametype
{
  const char *scriptName;
  const char *internalName;
  const char *localizedName;
  const char *rules;
};

/* 4933 */
struct motdKeyHandler_t
{
  const char *key;
  bool (__cdecl *handler)();
};

/* 4934 */
struct __declspec(align(2)) motd_t
{
  int version;
  bool singleView;
  int expiration;
  unsigned __int16 imageCategory;
  char title[65];
  char message[1025];
  char image[33];
  char action[32];
  char actionContext[65];
  char actionString[65];
  char bannerTitle[65];
  char bannerMessage[129];
  char bannerImage[33];
  char bannerAction[32];
  char bannerActionContext[65];
  char bannerActionString[65];
  char eliteImage[33];
  char founderImage[33];
  bool isValid;
};

/* 4935 */
struct GeoPoint
{
  unsigned __int16 x;
  unsigned __int16 y;
  unsigned __int16 count;
};

/* 4936 */
struct __declspec(align(4)) uiClientState_s
{
  connstate_t connState;
  int connectPacketCount;
  char servername[1024];
  char messageString[1024];
  bool areTexturesLoaded;
  bool waitForMovie;
};

/* 4937 */
struct GfxQuadVertex
{
  vec2_t xy;
  vec2_t st;
  GfxColor color;
};

/* 4938 */
struct EditPlaylistPopulationTexture
{
  ID3D11Resource *resource;
  GfxImage *image;
};

/* 4939 */
struct __declspec(align(4)) keyBoardUtitlity
{
  bool keyboardActive;
  int keyboardType;
  int cursorPos;
  int maxChar;
  bool overstrikeMode;
};

/* 4940 */
struct votingHandler_t
{
  const char *key;
  bool (__cdecl *handler)();
};

/* 4941 */
struct __declspec(align(4)) votingItem_t
{
  int index;
  char imageName[64];
  bool isLocalImage;
  char counterName[64];
  char votingItemPosition[8];
  char votingItemString[256];
};

/* 4942 */
struct __declspec(align(4)) voting_t
{
  int votingVersion;
  int expiration;
  int votingInterval;
  int imageCategory;
  int viewCount;
  char title[256];
  char subtitle[512];
  char voteforstring[256];
  votingItem_t votingItems[4];
  bool isValid;
};

/* 4943 */
struct EmblemFilterState
{
  const char *loc;
  unsigned __int16 include;
  unsigned __int16 exclude;
};

/* 4944 */
struct __declspec(align(8)) emblemDownloadData_t
{
  char buffer[1408];
  unsigned __int64 fileID;
  int timestamp;
};

/* 4945 */
struct codtvDWContent_t
{
  fileShareLocation source;
  fileshareCategory_e category;
  filesharePlayerFilter_e playerFilter;
  fileshareDataFilter_e dataFilter;
};

/* 4946 */
struct codtvVideoContent_t
{
  char url[128];
  char name[64];
};

/* 4947 */
union codtvContent_u
{
  codtvDWContent_t *dwContent;
  codtvVideoContent_t *videoContent;
};

/* 4948 */
struct codtvFolder_t
{
  int index;
  int parentIndex;
  char ref[16];
  char name[64];
  char customAction[32];
  codtvType_e type;
  char imageName[32];
  codtvImageCategory_e imageCategory;
  codtvContent_u content[32];
  int contentCount;
  unsigned __int64 userData;
};

/* 4949 */
struct codtvTypeMapping_t
{
  const char *typeString;
  codtvType_e type;
};

/* 4950 */
struct codtvDWCategoryMapping_t
{
  const char *dwString;
  fileshareCategory_e category;
};

/* 4951 */
struct codtvImageCategoryMapping_t
{
  const char *imageCategoryName;
  codtvImageCategory_e imageCategory;
};

/* 4952 */
struct codtvDWSourceMapping_t
{
  const char *dwString;
  fileShareLocation source;
};

/* 4953 */
struct codtvFilterMapping_t
{
  const char *filterName;
  void (__cdecl *filterCallback)(codtvDWContent_t *);
};

/* 4954 */
struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_16
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[4];
  _BYTE gap10[1];
};

/* 4955 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
{
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl *vfptr;
  std::_Mutex _Mylock;
  wchar_t *_Gfirst;
  wchar_t *_Pfirst;
  wchar_t **_IGfirst;
  wchar_t **_IPfirst;
  wchar_t *_Gnext;
  wchar_t *_Pnext;
  wchar_t **_IGnext;
  wchar_t **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 4956 */
struct __cppobj std::_Locbase<int>
{
};

/* 4957 */
struct std::locale::facet
{
  std::locale::facetVtbl *vfptr;
  unsigned int _Refs;
};

/* 4958 */
struct std::locale::facetVtbl
{
  void *(__thiscall *__vecDelDtor)(std::locale::facet *this, unsigned int);
};

/* 4959 */
struct __declspec(align(4)) std::_Yarn<char>
{
  char *_Myptr;
  char _Nul;
};

/* 4960 */
struct __cppobj std::locale::_Locimp : std::locale::facet
{
  std::locale::facet **_Facetvec;
  unsigned int _Facetcount;
  int _Catmask;
  bool _Xparent;
  std::_Yarn<char> _Name;
};

/* 4961 */
const struct __cppobj std::locale : std::_Locbase<int>
{
  std::locale::_Locimp *_Ptr;
};

/* 4962 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl
{
  void *(__thiscall *__vecDelDtor)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned int);
  _BYTE gap4[4];
  void (__thiscall *_Unlock)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__thiscall *overflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
  unsigned __int16 (__thiscall *pbackfail)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
  __int64 (__thiscall *showmanyc)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__thiscall *underflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__thiscall *uflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  __int64 (__thiscall *xsgetn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, __int64);
  __int64 (__thiscall *xsputn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, const wchar_t *, __int64);
  std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, __int64, int, int);
  std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *(__thiscall *setbuf)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, __int64);
  int (__thiscall *sync)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  void (__thiscall *imbue)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::locale *);
};

/* 4963 */
struct __cppobj std::ctype_base : std::locale::facet
{
};

/* 4964 */
struct _Ctypevec
{
  unsigned int _Hand;
  unsigned int _Page;
  const __int16 *_Table;
  int _Delfl;
};

/* 4965 */
struct __cppobj std::ctype<char> : std::ctype_base
{
  _Ctypevec _Ctype;
};

/* 4966 */
struct std::locale::id
{
  unsigned int _Id;
};

/* 4967 */
struct std::_Lockit
{
  int _Locktype;
};

/* 4968 */
struct std::_Locinfo
{
  std::_Lockit _Lock;
  std::_Yarn<char> _Days;
  std::_Yarn<char> _Months;
  std::_Yarn<char> _Oldlocname;
  std::_Yarn<char> _Newlocname;
};

/* 4969 */
struct __cppobj std::ctype_byname<char> : std::ctype<char>
{
};

/* 4970 */
struct __cppobj std::_Iosb<int>
{
};

/* 4971 */
struct __cppobj std::ios_base : std::_Iosb<int>
{
  std::ios_baseVtbl *vfptr;
  unsigned int _Stdstr;
  int _Mystate;
  int _Except;
  int _Fmtfl;
  __int64 _Prec;
  __int64 _Wide;
  std::ios_base::_Iosarray *_Arr;
  std::ios_base::_Fnarray *_Calls;
  std::locale *_Ploc;
};

/* 4972 */
struct std::ios_baseVtbl
{
  void *(__thiscall *__vecDelDtor)(std::ios_base *this, unsigned int);
};

/* 4973 */
struct std::ios_base::_Iosarray
{
  std::ios_base::_Iosarray *_Next;
  int _Index;
  int _Lo;
  void *_Vp;
};

/* 4974 */
struct std::ios_base::_Fnarray
{
  std::ios_base::_Fnarray *_Next;
  int _Index;
  void (__cdecl *_Pfn)(std::ios_base::event, std::ios_base *, int);
};

/* 4975 */
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >
{
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl *vfptr;
  std::_Mutex _Mylock;
  unsigned __int16 *_Gfirst;
  unsigned __int16 *_Pfirst;
  unsigned __int16 **_IGfirst;
  unsigned __int16 **_IPfirst;
  unsigned __int16 *_Gnext;
  unsigned __int16 *_Pnext;
  unsigned __int16 **_IGnext;
  unsigned __int16 **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 4976 */
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl
{
  void *(__thiscall *__vecDelDtor)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned int);
  _BYTE gap4[4];
  void (__thiscall *_Unlock)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  unsigned __int16 (__thiscall *overflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16);
  unsigned __int16 (__thiscall *pbackfail)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16);
  __int64 (__thiscall *showmanyc)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  unsigned __int16 (__thiscall *underflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  unsigned __int16 (__thiscall *uflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  __int64 (__thiscall *xsgetn)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16 *, __int64);
  __int64 (__thiscall *xsputn)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, const unsigned __int16 *, __int64);
  std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::fpos<int> *result, __int64, int, int);
  std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *(__thiscall *setbuf)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16 *, __int64);
  int (__thiscall *sync)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  void (__thiscall *imbue)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::locale *);
};

/* 4977 */
struct __cppobj std::basic_ostream<unsigned short,std::char_traits<unsigned short> >
{
  _BYTE gap0[80];
};

/* 4978 */
struct __cppobj __declspec(align(8)) std::basic_ios<unsigned short,std::char_traits<unsigned short> > : std::ios_base
{
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *_Mystrbuf;
  std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *_Tiestr;
  unsigned __int16 _Fillch;
};

/* 4979 */
struct __declspec(align(8)) std::basic_istream<unsigned short,std::char_traits<unsigned short> >
{
  _BYTE gap0[8];
  __int64 _Chcount;
  _BYTE gap10[72];
};

/* 4980 */
struct _Cvtvec
{
  unsigned int _Hand;
  unsigned int _Page;
};

/* 4981 */
struct __cppobj std::ctype<unsigned short> : std::ctype_base
{
  _Ctypevec _Ctype;
  _Cvtvec _Cvt;
};

/* 4982 */
struct std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  std::basic_istream<unsigned short,std::char_traits<unsigned short> > *_Myistr;
};

/* 4983 */
struct __cppobj __declspec(align(4)) std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry : std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  bool _Ok;
};

/* 4984 */
struct std::_Bool_struct
{
  int _Member;
};

/* 4985 */
struct __cppobj std::unary_function<std::error_code,unsigned int>
{
};

/* 4986 */
const struct std::error_category
{
  std::error_categoryVtbl *vfptr;
};

/* 4987 */
struct std::error_condition
{
  int _Myval;
  std::error_category *_Mycat;
};

/* 4988 */
struct std::error_code
{
  int _Myval;
  std::error_category *_Mycat;
};

/* 4989 */
struct std::error_categoryVtbl
{
  void *(__thiscall *__vecDelDtor)(std::error_category *this, unsigned int);
  const char *(__thiscall *name)(std::error_category *this);
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__thiscall *message)(std::error_category *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result, int);
  std::error_condition *(__thiscall *default_error_condition)(std::error_category *this, std::error_condition *result, int);
  bool (__thiscall *equivalent)(std::error_category *this, std::error_code *, int);
  bool (__thiscall *equivalent)(std::error_category *this, int, std::error_condition *);
};

/* 4990 */
struct __cppobj std::hash<std::error_code> : std::unary_function<std::error_code,unsigned int>
{
};

/* 4991 */
struct std::basic_streambuf<char,std::char_traits<char> >
{
  std::basic_streambuf<char,std::char_traits<char> >Vtbl *vfptr;
  std::_Mutex _Mylock;
  char *_Gfirst;
  char *_Pfirst;
  char **_IGfirst;
  char **_IPfirst;
  char *_Gnext;
  char *_Pnext;
  char **_IGnext;
  char **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 4992 */
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl
{
  void *(__thiscall *__vecDelDtor)(std::basic_streambuf<char,std::char_traits<char> > *this, unsigned int);
  _BYTE gap4[4];
  void (__thiscall *_Unlock)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__thiscall *overflow)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
  int (__thiscall *pbackfail)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
  __int64 (__thiscall *showmanyc)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__thiscall *underflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__thiscall *uflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
  __int64 (__thiscall *xsgetn)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, __int64);
  __int64 (__thiscall *xsputn)(std::basic_streambuf<char,std::char_traits<char> > *this, const char *, __int64);
  std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, __int64, int, int);
  std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<char,std::char_traits<char> > *(__thiscall *setbuf)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, __int64);
  int (__thiscall *sync)(std::basic_streambuf<char,std::char_traits<char> > *this);
  void (__thiscall *imbue)(std::basic_streambuf<char,std::char_traits<char> > *this, std::locale *);
};

/* 4993 */
struct __cppobj std::basic_ostream<char,std::char_traits<char> >
{
  _BYTE gap0[80];
};

/* 4994 */
struct __cppobj __declspec(align(8)) std::basic_ios<char,std::char_traits<char> > : std::ios_base
{
  std::basic_streambuf<char,std::char_traits<char> > *_Mystrbuf;
  std::basic_ostream<char,std::char_traits<char> > *_Tiestr;
  char _Fillch;
};

/* 4995 */
struct std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  std::basic_ostream<char,std::char_traits<char> > *_Myostr;
};

/* 4996 */
struct __cppobj __declspec(align(4)) std::basic_ostream<char,std::char_traits<char> >::sentry : std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  bool _Ok;
};

/* 4997 */
struct __cppobj std::bad_cast : std::exception
{
};

/* 4998 */
struct __cppobj std::system_error : std::runtime_error
{
  std::error_code _Mycode;
};

/* 4999 */
struct __cppobj std::codecvt_base : std::locale::facet
{
};

/* 5000 */
struct __declspec(align(8)) std::basic_istream<char,std::char_traits<char> >
{
  _BYTE gap0[8];
  __int64 _Chcount;
  _BYTE gap10[72];
};

/* 5001 */
struct std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  std::basic_istream<char,std::char_traits<char> > *_Myistr;
};

/* 5002 */
struct __cppobj __declspec(align(4)) std::basic_istream<char,std::char_traits<char> >::sentry : std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  bool _Ok;
};

/* 5003 */
struct __cppobj std::codecvt<unsigned short,char,int> : std::codecvt_base
{
  _Cvtvec _Cvt;
};

/* 5004 */
struct __cppobj std::ctype<wchar_t> : std::ctype_base
{
  _Ctypevec _Ctype;
  _Cvtvec _Cvt;
};

/* 5005 */
struct __cppobj std::unary_function<std::error_condition,unsigned int>
{
};

/* 5006 */
struct __cppobj std::hash<std::error_condition> : std::unary_function<std::error_condition,unsigned int>
{
};

/* 5007 */
struct __cppobj std::basic_ostream<wchar_t,std::char_traits<wchar_t> >
{
  _BYTE gap0[80];
};

/* 5008 */
struct __cppobj __declspec(align(8)) std::basic_ios<wchar_t,std::char_traits<wchar_t> > : std::ios_base
{
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Mystrbuf;
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Tiestr;
  wchar_t _Fillch;
};

/* 5009 */
struct _Collvec
{
  unsigned int _Hand;
  unsigned int _Page;
};

/* 5010 */
struct std::_Timevec
{
  void *_Timeptr;
};

/* 5011 */
struct __declspec(align(8)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >
{
  _BYTE gap0[8];
  __int64 _Chcount;
  _BYTE gap10[72];
};

/* 5012 */
struct std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  std::basic_istream<wchar_t,std::char_traits<wchar_t> > *_Myistr;
};

/* 5013 */
struct __cppobj __declspec(align(4)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry : std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  bool _Ok;
};

/* 5014 */
struct __cppobj std::codecvt<wchar_t,char,int> : std::codecvt_base
{
  _Cvtvec _Cvt;
};

/* 5015 */
struct std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Myostr;
};

/* 5016 */
struct __cppobj __declspec(align(4)) std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry : std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  bool _Ok;
};

/* 5017 */
struct __cppobj std::ios_base::failure : std::system_error
{
};

/* 5018 */
struct __cppobj std::ios_base::Init
{
};

/* 5019 */
struct std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *_Myostr;
};

/* 5020 */
struct __cppobj __declspec(align(4)) std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry : std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  bool _Ok;
};

/* 5021 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_50
{
  const void *pVFTable;
  void *spare;
  char name[50];
};

/* 5022 */
struct $_TypeDescriptor$_extraBytes_52
{
  const void *pVFTable;
  void *spare;
  char name[52];
};

/* 5023 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_46
{
  const void *pVFTable;
  void *spare;
  char name[46];
};

/* 5024 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_25
{
  const void *pVFTable;
  void *spare;
  char name[25];
};

/* 5025 */
struct __cppobj std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>
{
};

/* 5026 */
struct __cppobj std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : std::binary_function<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool>
{
};

/* 5027 */
struct __cppobj std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> : std::_Container_base0
{
  std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > comp;
};

/* 5028 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node *_Right;
  std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > _Myval;
  char _Color;
  char _Isnil;
};

/* 5029 */
struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
};

/* 5030 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
};

/* 5031 */
struct __cppobj Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t>
{
};

/* 5032 */
struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>
{
};

/* 5033 */
struct __cppobj __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > : std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0>
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node *_Myhead;
  unsigned int _Mysize;
  Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t> _Alnod;
  Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t> _Alval;
};

/* 5034 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > : std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >
{
};

/* 5035 */
struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > : std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >
{
};

/* 5036 */
struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t> > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >
{
};

/* 5037 */
struct CStringEdPackage
{
  int m_bEndMarkerFound_ParseOnly;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strCurrentEntryRef_ParseOnly;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strCurrentEntryEnglish_ParseOnly;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > m_strCurrentFileRef_ParseOnly;
  std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t> > m_StringEntries;
};

/* 5038 */
struct __cppobj LocalizeName
{
};

/* 5039 */
struct __cppobj mapStringEntriesName_t : LocalizeName
{
};

/* 5040 */
struct std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > first;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > second;
};

/* 5041 */
struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : std::_Pair_base<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
{
};

/* 5042 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 5043 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Iterator_base0>
{
  std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node *_Ptr;
};

/* 5044 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >,std::_Iterator_base0>
{
};

/* 5045 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >
{
};

/* 5046 */
struct __declspec(align(4)) std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,bool>
{
  std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > > first;
  bool second;
};

/* 5047 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,bool> : std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> > >,bool>
{
};

/* 5048 */
struct __cppobj LocalizeStringVectorName : LocalizeName
{
};

/* 5049 */
struct __cppobj LocalizeStringName : LocalizeName
{
};

/* 5050 */
struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>::rebind<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
{
};

/* 5051 */
struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,mapStringEntriesName_t>,0> >::_Node>
{
};

/* 5052 */
struct __cppobj mapFlagMasksName_t : LocalizeName
{
};

/* 5053 */
struct __cppobj LocalizeStringSetName : LocalizeName
{
};

/* 5054 */
struct languageInfo_t
{
  const char *pszName;
  const char *pszNameAbbr;
  int bPresent;
};

/* 5055 */
struct EXT_Link<LocalizeEntry>
{
  LocalizeEntry *m_Data;
  EXT_Link<LocalizeEntry> *m_Next;
  EXT_Link<LocalizeEntry> *m_Last;
};

/* 5056 */
struct EXT_List<LocalizeEntry>
{
  unsigned int m_Count;
  EXT_Link<LocalizeEntry> *m_Head;
  EXT_Link<LocalizeEntry> *m_Tail;
};

/* 5057 */
struct sd_voice_mix_temp_state
{
  __int16 pitchSX[512];
  __int16 pitchSY[512];
  __int16 pitchST[512];
  float pitchT[512];
  float pitchU[512];
  float pitchX[512];
  float pitchY[512];
  float decodeBuffer[512];
  float panBuffer[256];
};

/* 5058 */
struct __declspec(align(8)) FLAC__StreamMetadata_SeekPoint
{
  unsigned __int64 sample_number;
  unsigned __int64 stream_offset;
  unsigned int frame_samples;
};

/* 5059 */
struct FLAC__StreamMetadata_SeekTable
{
  unsigned int num_points;
  FLAC__StreamMetadata_SeekPoint *points;
};

/* 5060 */
struct FLAC__StreamMetadata_Padding
{
  int dummy;
};

/* 5061 */
struct FLAC__StreamMetadata_StreamInfo
{
  unsigned int min_blocksize;
  unsigned int max_blocksize;
  unsigned int min_framesize;
  unsigned int max_framesize;
  unsigned int sample_rate;
  unsigned int channels;
  unsigned int bits_per_sample;
  unsigned __int64 total_samples;
  char md5sum[16];
};

/* 5062 */
struct __declspec(align(8)) FLAC__StreamMetadata_CueSheet_Index
{
  unsigned __int64 offset;
  char number;
};

/* 5063 */
struct __declspec(align(8)) FLAC__StreamMetadata_CueSheet_Track
{
  unsigned __int64 offset;
  char number;
  char isrc[13];
  unsigned __int32 type : 1;
  unsigned __int32 pre_emphasis : 1;
  char num_indices;
  FLAC__StreamMetadata_CueSheet_Index *indices;
};

/* 5064 */
const struct FLAC__EntropyCodingMethod_PartitionedRiceContents
{
  unsigned int *parameters;
  unsigned int *raw_bits;
  unsigned int capacity_by_order;
};

/* 5065 */
struct FLAC__EntropyCodingMethod_PartitionedRice
{
  unsigned int order;
  FLAC__EntropyCodingMethod_PartitionedRiceContents *contents;
};

/* 5066 */
union $CA4954645CB431E2FF5CAECD75336583
{
  FLAC__EntropyCodingMethod_PartitionedRice partitioned_rice;
};

/* 5067 */
struct FLAC__EntropyCodingMethod
{
  FLAC__EntropyCodingMethodType type;
  $CA4954645CB431E2FF5CAECD75336583 data;
};

/* 5068 */
struct FLAC__Subframe_LPC
{
  FLAC__EntropyCodingMethod entropy_coding_method;
  unsigned int order;
  unsigned int qlp_coeff_precision;
  int quantization_level;
  int qlp_coeff[32];
  int warmup[32];
  const int *residual;
};

/* 5069 */
struct FLAC__Subframe_Constant
{
  int value;
};

/* 5070 */
struct FLAC__FrameFooter
{
  unsigned __int16 crc;
};

/* 5071 */
union $41C236D6F335E5A96AE0B44645C47824
{
  unsigned int frame_number;
  unsigned __int64 sample_number;
};

/* 5072 */
struct __declspec(align(8)) FLAC__FrameHeader
{
  unsigned int blocksize;
  unsigned int sample_rate;
  unsigned int channels;
  FLAC__ChannelAssignment channel_assignment;
  unsigned int bits_per_sample;
  FLAC__FrameNumberType number_type;
  $41C236D6F335E5A96AE0B44645C47824 number;
  char crc;
};

/* 5073 */
struct FLAC__StreamMetadata_Picture
{
  FLAC__StreamMetadata_Picture_Type type;
  char *mime_type;
  char *description;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int colors;
  unsigned int data_length;
  char *data;
};

/* 5074 */
struct FLAC__StreamMetadata_Application
{
  char id[4];
  char *data;
};

/* 5075 */
struct FLAC__StreamMetadata_VorbisComment_Entry
{
  unsigned int length;
  char *entry;
};

/* 5076 */
struct FLAC__Subframe_Verbatim
{
  const int *data;
};

/* 5077 */
struct __declspec(align(8)) FLAC__StreamMetadata_CueSheet
{
  char media_catalog_number[129];
  unsigned __int64 lead_in;
  int is_cd;
  unsigned int num_tracks;
  FLAC__StreamMetadata_CueSheet_Track *tracks;
};

/* 5078 */
struct FLAC__StreamMetadata_VorbisComment
{
  FLAC__StreamMetadata_VorbisComment_Entry vendor_string;
  unsigned int num_comments;
  FLAC__StreamMetadata_VorbisComment_Entry *comments;
};

/* 5079 */
struct FLAC__StreamMetadata_Unknown
{
  char *data;
};

/* 5080 */
struct FLAC__Subframe_Fixed
{
  FLAC__EntropyCodingMethod entropy_coding_method;
  unsigned int order;
  int warmup[4];
  const int *residual;
};

/* 5081 */
union $068A330AB7652EB1FFEC58C124A5B0D2
{
  FLAC__Subframe_Constant constant;
  FLAC__Subframe_Fixed fixed;
  FLAC__Subframe_LPC lpc;
  FLAC__Subframe_Verbatim verbatim;
};

/* 5082 */
struct FLAC__Subframe
{
  FLAC__SubframeType type;
  $068A330AB7652EB1FFEC58C124A5B0D2 data;
  unsigned int wasted_bits;
};

/* 5083 */
union $D9FC49B6CD0DF622338FA2F6321EA0CC
{
  FLAC__StreamMetadata_StreamInfo stream_info;
  FLAC__StreamMetadata_Padding padding;
  FLAC__StreamMetadata_Application application;
  FLAC__StreamMetadata_SeekTable seek_table;
  FLAC__StreamMetadata_VorbisComment vorbis_comment;
  FLAC__StreamMetadata_CueSheet cue_sheet;
  FLAC__StreamMetadata_Picture picture;
  FLAC__StreamMetadata_Unknown unknown;
};

/* 5084 */
struct FLAC__StreamMetadata
{
  FLAC__MetadataType type;
  int is_last;
  unsigned int length;
  $D9FC49B6CD0DF622338FA2F6321EA0CC data;
};

/* 5085 */
struct __declspec(align(8)) FLAC__Frame
{
  FLAC__FrameHeader header;
  FLAC__Subframe subframes[8];
  FLAC__FrameFooter footer;
};

/* 5086 */
struct sightpointtrace_t
{
  vec3_t start;
  vec3_t end;
  int passEntityNum[2];
  int contentmask;
  int locational;
  char *priorityMap;
};

/* 5087 */
struct ltc_prng_descriptor
{
  char *name;
  int export_size;
  int (__cdecl *start)(Prng_state *);
  int (__cdecl *add_entropy)(const char *, unsigned int, Prng_state *);
  int (__cdecl *ready)(Prng_state *);
  unsigned int (__cdecl *read)(char *, unsigned int, Prng_state *);
  int (__cdecl *done)(Prng_state *);
  int (__cdecl *pexport)(char *, unsigned int *, Prng_state *);
  int (__cdecl *pimport)(const char *, unsigned int, Prng_state *);
  int (__cdecl *test)();
};

/* 5088 */
struct ltc_math_descriptor
{
  char *name;
  int bits_per_digit;
  int (__cdecl *init)(void **);
  int (__cdecl *init_copy)(void **, void *);
  void (__cdecl *deinit)(void *);
  int (__cdecl *neg)(void *, void *);
  int (__cdecl *copy)(void *, void *);
  int (__cdecl *set_int)(void *, unsigned int);
  unsigned int (__cdecl *get_int)(void *);
  unsigned int (__cdecl *get_digit)(void *, int);
  int (__cdecl *get_digit_count)(void *);
  int (__cdecl *compare)(void *, void *);
  int (__cdecl *compare_d)(void *, unsigned int);
  int (__cdecl *count_bits)(void *);
  int (__cdecl *count_lsb_bits)(void *);
  int (__cdecl *twoexpt)(void *, int);
  int (__cdecl *read_radix)(void *, const char *, int);
  int (__cdecl *write_radix)(void *, char *, int);
  unsigned int (__cdecl *unsigned_size)(void *);
  int (__cdecl *unsigned_write)(void *, char *);
  int (__cdecl *unsigned_read)(void *, char *, unsigned int);
  int (__cdecl *add)(void *, void *, void *);
  int (__cdecl *addi)(void *, unsigned int, void *);
  int (__cdecl *sub)(void *, void *, void *);
  int (__cdecl *subi)(void *, unsigned int, void *);
  int (__cdecl *mul)(void *, void *, void *);
  int (__cdecl *muli)(void *, unsigned int, void *);
  int (__cdecl *sqr)(void *, void *);
  int (__cdecl *mpdiv)(void *, void *, void *, void *);
  int (__cdecl *div_2)(void *, void *);
  int (__cdecl *modi)(void *, unsigned int, unsigned int *);
  int (__cdecl *gcd)(void *, void *, void *);
  int (__cdecl *lcm)(void *, void *, void *);
  int (__cdecl *mulmod)(void *, void *, void *, void *);
  int (__cdecl *sqrmod)(void *, void *, void *);
  int (__cdecl *invmod)(void *, void *, void *);
  int (__cdecl *montgomery_setup)(void *, void **);
  int (__cdecl *montgomery_normalization)(void *, void *);
  int (__cdecl *montgomery_reduce)(void *, void *, void *);
  void (__cdecl *montgomery_deinit)(void *);
  int (__cdecl *exptmod)(void *, void *, void *, void *);
  int (__cdecl *isprime)(void *, int *);
  int (__cdecl *ecc_ptmul)(void *, ecc_point *, ecc_point *, void *, int);
  int (__cdecl *ecc_ptadd)(ecc_point *, ecc_point *, ecc_point *, void *, void *);
  int (__cdecl *ecc_ptdbl)(ecc_point *, ecc_point *, void *, void *);
  int (__cdecl *ecc_map)(ecc_point *, void *, void *);
  int (__cdecl *ecc_mul2add)(ecc_point *, void *, ecc_point *, void *, ecc_point *, void *);
  int (__cdecl *rsa_keygen)(Prng_state *, int, int, int, Rsa_key *);
  int (__cdecl *rsa_me)(const char *, unsigned int, char *, unsigned int *, int, Rsa_key *);
};

/* 5089 */
struct ltc_hash_descriptor
{
  char *name;
  char ID;
  unsigned int hashsize;
  unsigned int blocksize;
  unsigned int OID[16];
  unsigned int OIDlen;
  int (__cdecl *init)(Hash_state *);
  int (__cdecl *process)(Hash_state *, const char *, unsigned int);
  int (__cdecl *done)(Hash_state *, char *);
  int (__cdecl *test)();
  int (__cdecl *hmac_block)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
};

/* 5090 */
struct ClientSnapshotData
{
  int snapshotSize[16];
  int compressedSize[16];
  int index;
};

/* 5091 */
struct statmonitor_s
{
  int endtime;
  Material *material;
};

/* 5092 */
struct snapshotEntityNumbers_t
{
  int numSnapshotEntities;
  int snapshotEntities[1024];
};

/* 5093 */
struct MigrationClient
{
  MigrationClientState state;
  int attempts;
  int msgTimeout;
  int rating;
  int nextSendTime;
};

/* 5094 */
struct Block
{
  int num;
  int size;
  int timeout;
};

/* 5095 */
struct MigrationGlobals
{
  MigrationState state;
  MigrationClient clients[18];
  Block window[32];
  ClientNum_t newHost;
  int totalSize;
  int block;
  unsigned int windowIndex;
  bool active;
  int blocksPerFrame;
  int migrationCount;
  int migrationTime;
  char reason[64];
  int giveUpTime;
  int startTime;
};

/* 5096 */
struct MigrationMessage
{
  const char *string;
  void (__cdecl *func)(LocalClientNum_t, netadr_t, msg_t *);
};

/* 5097 */
struct SaveHeader
{
  int saveVersion;
  int gameCheckSum;
  int saveCheckSum;
  int saveId;
  bool demoPlayback;
  bool splitscreen;
  int scrCheckSum[3];
  char mapName[256];
  char buildNumber[128];
  char gametype[256];
  char buildVersionSuffix[16];
  unsigned int networkProtocol;
  char screenShotName[64];
  char description[256];
  char filename[64];
  SaveType saveType;
  qtime_s time;
  int bodySize;
  unsigned int pad[8];
};

/* 5098 */
struct __declspec(align(128)) SaveGame
{
  SaveHeader header;
  MemoryFile memFile;
};

/* 5099 */
struct reservedslot_t
{
  char pass[24];
  bool inUse;
};

/* 5100 */
struct perfVal_t
{
  unsigned int min;
  unsigned int max;
  unsigned int avg;
  unsigned int count;
  unsigned int total;
};

/* 5101 */
struct _WSAPROTOCOLCHAIN
{
  int ChainLen;
  unsigned int ChainEntries[7];
};

/* 5102 */
struct _WSAPROTOCOL_INFOA
{
  unsigned int dwServiceFlags1;
  unsigned int dwServiceFlags2;
  unsigned int dwServiceFlags3;
  unsigned int dwServiceFlags4;
  unsigned int dwProviderFlags;
  _GUID ProviderId;
  unsigned int dwCatalogEntryId;
  _WSAPROTOCOLCHAIN ProtocolChain;
  int iVersion;
  int iAddressFamily;
  int iMaxSockAddr;
  int iMinSockAddr;
  int iSocketType;
  int iProtocol;
  int iProtocolMaxOffset;
  int iNetworkByteOrder;
  int iSecurityScheme;
  unsigned int dwMessageSize;
  unsigned int dwProviderReserved;
  char szProtocol[256];
};

/* 5103 */
struct __declspec(align(8)) ClientRecord
{
  unsigned __int64 xuid;
  unsigned int addr;
};

/* 5104 */
struct Sample
{
  int timestamp;
  unsigned __int16 avgPing;
  unsigned __int16 minPing;
  unsigned __int16 maxPing;
  char unackCount;
  char clientIndex;
};

/* 5105 */
struct ConnectionLog
{
  unsigned __int64 magic;
  unsigned __int64 matchID;
  int numClients;
  int numSamples;
  unsigned int hostAddr;
  ClientRecord clients[128];
  Sample samples[1024];
};

/* 5106 */
struct ucmd_t
{
  char *name;
  void (__cdecl *func)(client_t *);
  int allowFromOldServer;
};

/* 5107 */
struct __cppobj bdBase64
{
};

/* 5108 */
struct _CRYPTOAPI_BLOB
{
  unsigned int cbData;
  char *pbData;
};

/* 5109 */
struct _CRYPT_ATTRIBUTE
{
  char *pszObjId;
  unsigned int cValue;
  _CRYPTOAPI_BLOB *rgValue;
};

/* 5110 */
struct _CRYPT_ALGORITHM_IDENTIFIER
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Parameters;
};

/* 5111 */
struct _CRYPT_ATTRIBUTES
{
  unsigned int cAttr;
  _CRYPT_ATTRIBUTE *rgAttr;
};

/* 5112 */
struct _CMSG_SIGNER_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB Issuer;
  _CRYPTOAPI_BLOB SerialNumber;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedHash;
  _CRYPT_ATTRIBUTES AuthAttrs;
  _CRYPT_ATTRIBUTES UnauthAttrs;
};

/* 5113 */
struct _CTL_ENTRY
{
  _CRYPTOAPI_BLOB SubjectIdentifier;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 5114 */
struct _CTL_USAGE
{
  unsigned int cUsageIdentifier;
  char **rgpszUsageIdentifier;
};

/* 5115 */
struct _CERT_EXTENSION
{
  char *pszObjId;
  int fCritical;
  _CRYPTOAPI_BLOB Value;
};

/* 5116 */
struct _CTL_INFO
{
  unsigned int dwVersion;
  _CTL_USAGE SubjectUsage;
  _CRYPTOAPI_BLOB ListIdentifier;
  _CRYPTOAPI_BLOB SequenceNumber;
  _FILETIME ThisUpdate;
  _FILETIME NextUpdate;
  _CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
  unsigned int cCTLEntry;
  _CTL_ENTRY *rgCTLEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 5117 */
struct _CRYPT_BIT_BLOB
{
  unsigned int cbData;
  char *pbData;
  unsigned int cUnusedBits;
};

/* 5118 */
struct _CERT_PUBLIC_KEY_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
  _CRYPT_BIT_BLOB PublicKey;
};

/* 5119 */
struct _CERT_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB SerialNumber;
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPTOAPI_BLOB Issuer;
  _FILETIME NotBefore;
  _FILETIME NotAfter;
  _CRYPTOAPI_BLOB Subject;
  _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
  _CRYPT_BIT_BLOB IssuerUniqueId;
  _CRYPT_BIT_BLOB SubjectUniqueId;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 5120 */
struct _CTL_CONTEXT
{
  unsigned int dwMsgAndCertEncodingType;
  char *pbCtlEncoded;
  unsigned int cbCtlEncoded;
  _CTL_INFO *pCtlInfo;
  void *hCertStore;
  void *hCryptMsg;
  char *pbCtlContent;
  unsigned int cbCtlContent;
};

/* 5121 */
struct WINTRUST_SGNR_INFO_
{
  unsigned int cbStruct;
  const wchar_t *pcwszDisplayName;
  _CMSG_SIGNER_INFO *psSignerInfo;
  unsigned int chStores;
  void **pahStores;
};

/* 5122 */
struct _CERT_CONTEXT
{
  unsigned int dwCertEncodingType;
  char *pbCertEncoded;
  unsigned int cbCertEncoded;
  _CERT_INFO *pCertInfo;
  void *hCertStore;
};

/* 5123 */
struct WINTRUST_BLOB_INFO_
{
  unsigned int cbStruct;
  _GUID gSubject;
  const wchar_t *pcwszDisplayName;
  unsigned int cbMemObject;
  char *pbMemObject;
  unsigned int cbMemSignedMsg;
  char *pbMemSignedMsg;
};

/* 5124 */
struct WINTRUST_FILE_INFO_
{
  unsigned int cbStruct;
  const wchar_t *pcwszFilePath;
  void *hFile;
  _GUID *pgKnownSubject;
};

/* 5125 */
struct WINTRUST_CATALOG_INFO_
{
  unsigned int cbStruct;
  unsigned int dwCatalogVersion;
  const wchar_t *pcwszCatalogFilePath;
  const wchar_t *pcwszMemberTag;
  const wchar_t *pcwszMemberFilePath;
  void *hMemberFile;
  char *pbCalculatedFileHash;
  unsigned int cbCalculatedFileHash;
  _CTL_CONTEXT *pcCatalogContext;
};

/* 5126 */
struct WINTRUST_CERT_INFO_
{
  unsigned int cbStruct;
  const wchar_t *pcwszDisplayName;
  _CERT_CONTEXT *psCertContext;
  unsigned int chStores;
  void **pahStores;
  unsigned int dwFlags;
  _FILETIME *psftVerifyAsOf;
};

/* 5127 */
union $5401DF2DB582BA1F520C4AEDEBCE2612
{
  WINTRUST_FILE_INFO_ *pFile;
  WINTRUST_CATALOG_INFO_ *pCatalog;
  WINTRUST_BLOB_INFO_ *pBlob;
  WINTRUST_SGNR_INFO_ *pSgnr;
  WINTRUST_CERT_INFO_ *pCert;
};

/* 5128 */
struct _WINTRUST_DATA
{
  unsigned int cbStruct;
  void *pPolicyCallbackData;
  void *pSIPClientData;
  unsigned int dwUIChoice;
  unsigned int fdwRevocationChecks;
  unsigned int dwUnionChoice;
  $5401DF2DB582BA1F520C4AEDEBCE2612 ___u6;
  unsigned int dwStateAction;
  void *hWVTStateData;
  wchar_t *pwszURLReference;
  unsigned int dwProvFlags;
  unsigned int dwUIContext;
};

/* 5129 */
struct tlFileBuf
{
  char *Buf;
  unsigned int Size;
  unsigned int UserData;
};

/* 5130 */
struct tlSystemCallbacks
{
  bool (__cdecl *ReadFile)(const char *, tlFileBuf *, unsigned int, unsigned int);
  void (__cdecl *ReleaseFile)(tlFileBuf *);
  void (__cdecl *CriticalError)(const char *);
  void (__cdecl *Warning)(const char *);
  void (__cdecl *DebugPrint)(const char *);
  void *(__cdecl *MemAlloc)(unsigned int, unsigned int, unsigned int);
  void *(__cdecl *MemRealloc)(void *, unsigned int, unsigned int, unsigned int);
  void (__cdecl *MemFree)(void *);
};

/* 5131 */
struct __declspec(align(4)) _jqWorker
{
  jqWorkerType Type;
  void *Thread;
  unsigned int ThreadId;
  bool Idle;
};

/* 5132 */
struct __cppobj jqWorker : _jqWorker
{
  jqWorker *ThisPtr;
  int Processor;
  int WorkerID;
  int NumQueues;
  jqQueue WorkerSpecific;
  jqQueue *Queues[8];
  unsigned __int64 WorkTime;
};

/* 5133 */
struct BitFieldGenerateRow
{
  unsigned int bits[8];
  int count;
  int timestamp;
};

/* 5134 */
struct BitFieldGenerateTable
{
  int rowCount;
  unsigned int rowSize;
  BitFieldGenerateRow table[4096];
  unsigned int totalUsage;
  unsigned int huffData[256];
};

/* 5135 */
struct nodetype
{
  nodetype *left;
  nodetype *right;
  nodetype *parent;
  int weight;
  int symbol;
};

/* 5136 */
struct huff_t
{
  int blocNode;
  int blocPtrs;
  nodetype *tree;
  nodetype *loc[257];
  nodetype **freelist;
  nodetype nodeList[768];
  nodetype *nodePtrs[768];
};

/* 5137 */
struct huffman_t
{
  huff_t compressDecompress;
};

/* 5139 */
union $DB8FAEDEDA194866E3AD65D498C8DAC8
{
  void (__cdecl *genericCallback)(int, void *, int);
  void (__cdecl *callback)(int, stream_status, unsigned int, void *);
};

/* 5138 */
struct streamInfo
{
  int id;
  int file;
  unsigned int start_offset;
  unsigned int buffer_size;
  unsigned int bytes_read;
  char *destination;
  int estMsToFinish;
  int startDeadline;
  $DB8FAEDEDA194866E3AD65D498C8DAC8 ___u8;
  void *callbackUser;
  stream_status status;
  bool callbackOnly;
  streamInfo *nextInQueue;
  streamInfo *prevInQueue;
};

/* 5140 */
struct ClumpFile
{
  unsigned int name;
  unsigned int fileSectorOffset;
  unsigned __int64 fileSize;
};

/* 5141 */
struct PathItem
{
  char name[64];
  PathItem *parent;
  PathItem *next;
};

/* 5142 */
struct PathRoot
{
  PathItem *rootItem;
  PathItem *leafs;
  PathItem *branches;
};

/* 5143 */
struct stream_fh
{
  char name[256];
  void *h;
  bool inUse;
  bool shouldOpen;
  bool shouldClose;
  bool error;
  int flags;
  int extAsInt;
  unsigned int readOffset;
  unsigned int easyOffset;
  __int64 fileSize;
};

/* 5144 */
struct InternalSync
{
  bool finished;
  stream_status result;
  unsigned int numBytesRead;
};

/* 5145 */
struct callbackInfo
{
  void (__cdecl *callback)(int, stream_status, unsigned int, void *);
  int id;
  stream_status reason;
  unsigned int bytes;
  void *user;
};

/* 5146 */
struct $36E700A3C27252956A520274F722E4DE
{
  int main;
  int startupgametype;
  int precachegametype;
};

/* 5147 */
struct cscr_data_t
{
  int delete_;
  int initstructs;
  int createstruct;
  int findstruct;
  int levelscript;
  int clientsysstatechange;
  int maprestart;
  int localclientconnect;
  int localclientdisconnect;
  int entityspawned;
  int scriptmodelspawned;
  int dogSoundNotify;
  int clientFlagCB;
  int clientFlagAsValCB;
  int corpse_callback;
  int playerJump;
  int playerLand;
  int playerFoliage;
  int playerspawned;
  int airsupport;
  int entityshutdownCB;
  int localClientChangedCB;
  int argusnotify;
  int suimessage;
  int glassSmash;
  int zombieEyes;
  int gibEvent;
  int playAiFootstep;
  int soundsetambientstate;
  int soundsetaiambientstate;
  int soundplayuidecodeloop;
  $36E700A3C27252956A520274F722E4DE gametype;
  int finalizeInitialization;
  int hostMigration;
};

/* 5148 */
struct mapping_data_t
{
  int guid;
  GUIDType type;
  void *data;
};

/* 5149 */
struct RadiantCommandProcessor
{
  void (__cdecl *processorFunc)(RadiantCommand *, SpawnVar *);
  void (__cdecl *clearSelectionFunc)();
  bool (__cdecl *conditionFunc)(SpawnVar *);
  const char *classname;
};

/* 5150 */
struct PacketQueueBlock
{
  PacketQueueBlock *next;
  int readOffset;
  int writeOffset;
  char data[16384];
};

/* 5151 */
struct PacketQueue
{
  PacketQueueBlock *head;
  PacketQueueBlock *tail;
  int queuedPackets;
  int queuedBytes;
  bool packetLost;
  bool packetReordered;
  int bucketBits;
  int bucketUpdateMS;
  const char *name;
  PacketQueue *nextQueue;
  bool emulation;
  int queuedBytesLimit;
  int queuedPacketsLimit;
  int latencyMS;
  int latencyJitterMS;
  int packetLossPercent;
  int packetLossRepeatPercent;
  int packetReorderPercent;
  int packetReorderRepeatPercent;
  int packetDuplicationPercent;
  int bucketBitsPerMS;
  int bucketBitsLimit;
};

/* 5152 */
struct PacketQueueEntry
{
  netsrc_t sock;
  netadr_t addr;
  int length;
  unsigned int flags;
  char *payload;
  int totalSize;
  int dequeueTime;
};

/* 5153 */
struct netFieldOrderInfo_t
{
  int entState[79];
  int arcEnt[10];
  int arcEntState[2];
  int matchState[29];
  int clientState[67];
  int playerState[223];
  int actorState[98];
  int objective[15];
  int hudElem[46];
};

/* 5154 */
struct msg_patch_t
{
  int cursize;
  int bit;
  int patchBits;
};

/* 5155 */
union $DB7D43404702E29D075EC1F807666590
{
  float f;
  int l;
};

/* 5156 */
struct MigrationGlob
{
  char *buffer;
  int size;
};

/* 5157 */
struct meminfo_t
{
  int total[2];
  int nonSwapTotal;
  int nonSwapMinSpecTotal;
  int typeTotal[58][2];
};

/* 5158 */
struct TempMemInfo
{
  int permanent;
  int high;
  int highExtra;
  int hunkSize;
  int low;
  mem_track_t data;
};

/* 5159 */
struct GlobalUsage
{
  int level_fastfile;
  int common_fastfile;
};

/* 5160 */
struct bitarray<58>
{
  int array[2];
};

/* 5161 */
struct __declspec(align(4)) gdt_remote_cmd_handler
{
  const char *assetType;
  bool (__cdecl *action)(const char *);
  bool printSuccessMessage;
};

/* 5162 */
union GfxEntCellRefInfo
{
  float radius;
  GfxBrushModel *bmodel;
};

/* 5163 */
struct GfxSkinnedXModelSurfs
{
  void *firstSurf;
};

/* 5164 */
struct __declspec(align(4)) GfxSceneModel
{
  XModelDrawInfo info;
  XModel *model;
  DObj *obj;
  cpose_t *pose;
  GfxScaledPlacement placement;
  float lightingOriginToleranceSq;
  float invScaleSq;
  float radius;
  vec3_t lightingOrigin;
  unsigned __int16 *cachedLightingHandle;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 entnum;
  char modelShaderConstantSetIndex;
  char primaryLightIndex;
  char reflectionProbeIndex;
  char useHeroLighting;
  char noLodCullOut;
};

/* 5165 */
struct GfxSceneDpvs
{
  LocalClientNum_t localClientNum;
  char *entVisData[7];
  unsigned __int16 *sceneXModelIndex;
  unsigned __int16 *sceneDObjIndex;
  GfxEntCellRefInfo *entInfo[4];
};

/* 5166 */
struct GfxSceneEntityCull
{
  volatile unsigned int state;
  vec3_t mins;
  vec3_t maxs;
  char lods[32];
  GfxSkinnedXModelSurfs skinnedSurfs;
};

/* 5167 */
union GfxSceneEntityInfo
{
  cpose_t *pose;
};

/* 5168 */
struct __declspec(align(2)) GfxSceneEntity
{
  vec3_t lightingOrigin;
  GfxScaledPlacement placement;
  float radius;
  GfxSceneEntityCull cull;
  DObj *obj;
  GfxSceneEntityInfo info;
  float lightingOriginToleranceSq;
  float invScaleSq;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 gfxEntIndex2;
  unsigned __int16 entnum;
  char primaryLightIndex;
  char reflectionProbeIndex;
  char altXModelIndex;
  char entShaderConstantSetIndex;
  char useHeroLighting;
};

/* 5169 */
struct __declspec(align(4)) GfxSceneBrush
{
  BModelDrawInfo info;
  unsigned __int16 entnum;
  GfxBrushModel *bmodel;
  GfxPlacement placement;
  ShaderConstantSet *brushConstantSet;
  char reflectionProbeIndex;
};

/* 5170 */
struct __declspec(align(2)) GfxSceneGlassBrush
{
  GfxPlacement placement;
  GfxBrushModel *bmodel;
  Material *altStreamingMaterial;
  BModelDrawInfo info;
  char reflectionProbeIndex;
};

/* 5171 */
struct SceneModelBatchCmd
{
  int nModels;
  GfxSceneModel *models[8];
};

/* 5172 */
struct __declspec(align(64)) GfxScene
{
  GfxDrawSurf bspDrawSurfs[4608];
  GfxDrawSurf smodelDrawSurfsLight[4608];
  GfxDrawSurf entDrawSurfsLight[4608];
  GfxDrawSurf smodelDrawSurfsLightMapOpaque[3584];
  GfxDrawSurf bspDrawSurfsLightMap[3584];
  GfxDrawSurf entDrawSurfsLightMapOpaque[3584];
  GfxDrawSurf depthHackCameraDrawSurfs[512];
  GfxDrawSurf codemeshDrawSurfsLight[1024];
  GfxDrawSurf entDrawSurfsSonar[512];
  GfxDrawSurf bspDrawSurfsLitTrans[512];
  GfxDrawSurf smodelDrawSurfsLitTrans[512];
  GfxDrawSurf entDrawSurfsLitTrans[1024];
  GfxDrawSurf smodelDrawSurfsLitQuasiOpaque[2048];
  GfxDrawSurf entDrawSurfsLitQuasiOpaque[512];
  GfxDrawSurf bspDrawSurfsEmissiveOpaque[1024];
  GfxDrawSurf smodelDrawSurfsEmissiveOpaque[1024];
  GfxDrawSurf entDrawSurfsEmissiveOpaque[1024];
  GfxDrawSurf bspDrawSurfsEmissiveTrans[1024];
  GfxDrawSurf smodelDrawSurfsEmissiveTrans[1024];
  GfxDrawSurf entDrawSurfsEmissiveTrans[1024];
  GfxDrawSurf fxDrawSurfsEmissive[8192];
  GfxDrawSurf fxDrawSurfsEmissiveAuto[8192];
  GfxDrawSurf fxDrawSurfsEmissiveDecal[8192];
  GfxDrawSurf fxDrawSurfsEmissiveViewmodel[512];
  GfxDrawSurf fxDrawSurfsEmissiveSuperflare[64];
  GfxDrawSurf smodelDrawSurfsEmissiveFX[512];
  GfxDrawSurf entDrawSurfsEmissiveFX[512];
  GfxDrawSurf bspSunShadowDrawSurfs0[4096];
  GfxDrawSurf smodelSunShadowDrawSurfs0[4096];
  GfxDrawSurf entSunShadowDrawSurfs0[4096];
  GfxDrawSurf codemeshSunShadowDrawSurfs0[512];
  GfxDrawSurf bspSunShadowDrawSurfs1[8192];
  GfxDrawSurf smodelSunShadowDrawSurfs1[8192];
  GfxDrawSurf entSunShadowDrawSurfs1[8192];
  GfxDrawSurf codemeshSunShadowDrawSurfs1[512];
  GfxDrawSurf bspSpotShadowDrawSurfs0[1024];
  GfxDrawSurf smodelSpotShadowDrawSurfs0[1024];
  GfxDrawSurf entSpotShadowDrawSurfs0[1024];
  GfxDrawSurf bspSpotShadowDrawSurfs1[1024];
  GfxDrawSurf smodelSpotShadowDrawSurfs1[1024];
  GfxDrawSurf entSpotShadowDrawSurfs1[1024];
  GfxDrawSurf bspSpotShadowDrawSurfs2[1024];
  GfxDrawSurf smodelSpotShadowDrawSurfs2[1024];
  GfxDrawSurf entSpotShadowDrawSurfs2[1024];
  GfxDrawSurf bspSpotShadowDrawSurfs3[1024];
  GfxDrawSurf smodelSpotShadowDrawSurfs3[1024];
  GfxDrawSurf entSpotShadowDrawSurfs3[1024];
  char shadowableLightIsUsed[255];
  __declspec(align(2)) char cachedShadowableLightIsUsed[4][255];
  bool invalidateShadowableLightCache;
  GfxLight cachedVisibleLights[4][4];
  int cachedVisibleLightCounts[4];
  int maxDrawSurfCount[50];
  volatile int drawSurfCount[50];
  GfxDrawSurf *drawSurfs[50];
  GfxDrawSurf fxDrawSurfsLight[8192];
  GfxDrawSurf fxDrawSurfsLightAuto[8192];
  GfxDrawSurf fxDrawSurfsLightDecal[8192];
  GfxSceneDef def;
  volatile int addedLightCount;
  GfxLight addedLight[32];
  bool isAddedLightCulled[32];
  float dynamicSpotLightNearPlaneOffset;
  vec4_t dynamicSpotLightPlanes[6];
  volatile int sceneDObjCount;
  GfxSceneEntity sceneDObj[1024];
  char sceneDObjVisData[7][1024];
  int sceneDObjViewmodelIndex;
  volatile int sceneModelCount;
  GfxSceneModel sceneModel[1024];
  char sceneModelVisData[7][1024];
  volatile int sceneBrushCount;
  GfxSceneBrush sceneBrush[1024];
  char sceneBrushVisData[3][1024];
  volatile int glassBrushCount;
  GfxSceneGlassBrush glassBrush[1024];
  char glassBrushVisData[1024];
  unsigned int sceneDynModelCount;
  unsigned int sceneDynBrushCount;
  DpvsPlane shadowFarPlane[2];
  DpvsPlane shadowNearPlane[2];
  GfxSceneDpvs dpvs;
  SceneModelBatchCmd modelSkelCmd;
};

/* 5173 */
struct DvarDumpInfo
{
  int count;
  int channel;
  const char *match;
};

/* 5174 */
struct DvarSetConfigInfo
{
  int start;
  int max;
  int bit;
};

/* 5175 */
struct __declspec(align(4)) KnownContentPackData
{
  char contentName[128];
  const char *pakName;
  int contentPack;
  int contentMask;
  bool loadFastfileLoaded;
};

/* 5176 */
struct SearchSessionMapPackCombinationData
{
  char contentName[128];
  int contentPackFlags;
};

/* 5177 */
struct MINIZPNGAllocData
{
  char *allocBuffer;
  unsigned int bytesUsed;
  unsigned int maxBytes;
};

/* 5178 */
struct GamePadCheat
{
  GamePadButton codeButtons[10];
  GamePadButton holdButtons[2];
  void (__cdecl *unlockFunc)();
  const char *unlockCmd;
  const char *menu;
  const char *sound;
  int buttonTimer;
  int codeIndex;
};

/* 5179 */
struct SlowMotionCommon
{
  bool enable;
  int type;
  int delayMsec;
  float startTimescale;
  float endTimescale;
  int startMsec;
  int endMsec;
  float viewTimescale;
  bool viewEnable;
  int viewType;
  float viewStartTimescale;
  float viewEndTimescale;
  int viewStartMsec;
  int viewEndMsec;
};

/* 5180 */
struct CIN_CALLBACK_INFO
{
  CIN_CALLBACK_TYPE type;
  void (__cdecl *callback)(int);
  int user;
};

/* 5181 */
struct tdefl_sym_freq
{
  unsigned __int16 m_key;
  unsigned __int16 m_sym_index;
};

/* 5182 */
struct mz_stream_s
{
  const char *next_in;
  unsigned int avail_in;
  unsigned int total_in;
  char *next_out;
  unsigned int avail_out;
  unsigned int total_out;
  char *msg;
  struct mz_internal_state *state;
  void *(__cdecl *zalloc)(void *, unsigned int, unsigned int);
  void (__cdecl *zfree)(void *, void *);
  void *opaque;
  int data_type;
  unsigned int adler;
  unsigned int reserved;
};

/* 5183 */
struct MINIZPNGAllocSegmentHeader
{
  unsigned int safety;
  unsigned int length;
};

/* 5184 */
struct MINIZAllocData
{
  char *allocBuffer;
  unsigned int bytesUsed;
};

/* 5185 */
struct mz_zip_archive_file_stat
{
  unsigned int m_file_index;
  unsigned int m_central_dir_ofs;
  unsigned __int16 m_version_made_by;
  unsigned __int16 m_version_needed;
  unsigned __int16 m_bit_flag;
  unsigned __int16 m_method;
  unsigned int m_crc32;
  unsigned __int64 m_comp_size;
  unsigned __int64 m_uncomp_size;
  unsigned __int16 m_internal_attr;
  unsigned int m_external_attr;
  unsigned __int64 m_local_header_ofs;
  unsigned int m_comment_size;
  char m_filename[260];
  char m_comment[256];
};

/* 5186 */
struct tinfl_huff_table
{
  char m_code_size[288];
  __int16 m_look_up[1024];
  __int16 m_tree[576];
};

/* 5187 */
struct __declspec(align(4)) tinfl_decompressor_tag
{
  unsigned int m_state;
  unsigned int m_num_bits;
  unsigned int m_zhdr0;
  unsigned int m_zhdr1;
  unsigned int m_z_adler32;
  unsigned int m_final;
  unsigned int m_type;
  unsigned int m_check_adler32;
  unsigned int m_dist;
  unsigned int m_counter;
  unsigned int m_num_extra;
  unsigned int m_table_sizes[3];
  unsigned int m_bit_buf;
  unsigned int m_dist_from_out_buf_start;
  tinfl_huff_table m_tables[3];
  char m_raw_header[4];
  char m_len_codes[457];
};

/* 5188 */
struct __declspec(align(4)) tdefl_compressor
{
  int (__cdecl *m_pPut_buf_func)(const void *, int, void *);
  void *m_pPut_buf_user;
  unsigned int m_flags;
  unsigned int m_max_probes[2];
  int m_greedy_parsing;
  unsigned int m_adler32;
  unsigned int m_lookahead_pos;
  unsigned int m_lookahead_size;
  unsigned int m_dict_size;
  char *m_pLZ_code_buf;
  char *m_pLZ_flags;
  char *m_pOutput_buf;
  char *m_pOutput_buf_end;
  unsigned int m_num_flags_left;
  unsigned int m_total_lz_bytes;
  unsigned int m_lz_code_buf_dict_pos;
  unsigned int m_bits_in;
  unsigned int m_bit_buffer;
  unsigned int m_saved_match_dist;
  unsigned int m_saved_match_len;
  unsigned int m_saved_lit;
  unsigned int m_output_flush_ofs;
  unsigned int m_output_flush_remaining;
  unsigned int m_finished;
  unsigned int m_block_index;
  unsigned int m_wants_to_finish;
  tdefl_status m_prev_return_status;
  const void *m_pIn_buf;
  void *m_pOut_buf;
  unsigned int *m_pIn_buf_size;
  unsigned int *m_pOut_buf_size;
  tdefl_flush m_flush;
  const char *m_pSrc;
  unsigned int m_src_buf_left;
  unsigned int m_out_buf_ofs;
  char m_dict[33025];
  unsigned __int16 m_huff_count[3][288];
  unsigned __int16 m_huff_codes[3][288];
  char m_huff_code_sizes[3][288];
  char m_lz_code_buf[65536];
  unsigned __int16 m_next[32768];
  unsigned __int16 m_hash[32768];
  char m_output_buf[85196];
};

/* 5189 */
struct mz_zip_array
{
  void *m_p;
  unsigned int m_size;
  unsigned int m_capacity;
  unsigned int m_element_size;
};

/* 5190 */
struct mz_zip_internal_state_tag
{
  mz_zip_array m_central_dir;
  mz_zip_array m_central_dir_offsets;
  mz_zip_array m_sorted_central_dir_offsets;
  void **m_pFile;
  void *m_pMem;
  unsigned int m_mem_size;
  unsigned int m_mem_capacity;
};

/* 5191 */
struct tdefl_output_buffer
{
  unsigned int m_size;
  unsigned int m_capacity;
  char *m_pBuf;
  int m_expandable;
};

/* 5192 */
struct field_t
{
  int cursor;
  int scroll;
  int drawWidth;
  int widthInPixels;
  float charHeight;
  int fixedSize;
  char buffer[256];
};

/* 5193 */
struct __declspec(align(8)) mz_zip_archive
{
  unsigned __int64 m_archive_size;
  unsigned __int64 m_central_directory_file_ofs;
  unsigned int m_total_files;
  mz_zip_mode m_zip_mode;
  unsigned int m_file_offset_alignment;
  void *(__cdecl *m_pAlloc)(void *, unsigned int, unsigned int);
  void (__cdecl *m_pFree)(void *, void *);
  void *(__cdecl *m_pRealloc)(void *, void *, unsigned int, unsigned int);
  void *m_pAlloc_opaque;
  unsigned int (__cdecl *m_pRead)(void *, unsigned __int64, void *, unsigned int);
  unsigned int (__cdecl *m_pWrite)(void *, unsigned __int64, const void *, unsigned int);
  void *m_pIO_opaque;
  mz_zip_internal_state_tag *m_pState;
};

/* 5194 */
struct MapProfileEntry
{
  const char *label;
  int accessCount;
  unsigned __int64 ticksStart;
  unsigned __int64 ticksTotal;
  unsigned __int64 ticksSelf;
  int indent;
  MapProfileEntry *parent;
  MapProfileElement elements[3];
};

/* 5195 */
struct MapProfileElement
{
  unsigned __int64 ticksStart;
  unsigned __int64 ticksTotal;
  unsigned __int64 ticksSelf;
};

/* 5196 */
struct mapLoadProfile_t
{
  bool isLoading;
  int profileEntryCount;
  MapProfileEntry profileEntries[384];
  MapProfileEntry *currentEntry;
  unsigned __int64 ticksStart;
  unsigned __int64 ticksFinish;
  unsigned __int64 ticksProfiled;
  int elementAccessCount[3];
  MapProfileElement elements[3];
};

/* 5197 */
struct MapProfileHotSpot
{
  const char *label;
  int accessCount;
  __int64 ticksSelf;
  __int64 ticksFile;
};

/* 5198 */
struct std::_Pair_base<MapProfileHotSpot *,MapProfileHotSpot *>
{
  MapProfileHotSpot *first;
  MapProfileHotSpot *second;
};

/* 5199 */
struct __cppobj std::pair<MapProfileHotSpot *,MapProfileHotSpot *> : std::_Pair_base<MapProfileHotSpot *,MapProfileHotSpot *>
{
};

/* 5200 */
struct ClientGameState
{
  int flags;
  LocalClientNum_t localClientNum;
  ControllerIndex_t controllerIndex;
  UIContextIndex_t uiContextIndex;
  netsrc_t networkID;
  LastInput_t lastInput;
};

/* 5201 */
struct BspChunk
{
  LumpType type;
  unsigned int length;
};

/* 5202 */
struct BspHeader
{
  unsigned int ident;
  unsigned int version;
  unsigned int chunkCount;
  BspChunk chunks[100];
};

/* 5203 */
struct $B33EE1025E913E02F35097D17CDDCB50
{
  char name[64];
  BspHeader *header;
  unsigned int fileSize;
  unsigned int checksum;
  LumpType loadedLumpType;
  const void *loadedLumpData;
};

/* 5204 */
struct DiskPrimaryLight_Version55
{
  char type;
  char canUseShadowMap;
  __int16 cullDist;
  char priority;
  char useCookie;
  char shadowmapVolume;
  char _pad[1];
  vec3_t dir;
  vec3_t origin;
  vec3_t color;
  vec3_t specularcolor;
  vec3_t bouncecolor;
  vec3_t angle;
  float intensity;
  float dAttenuation;
  float cutOn;
  float nearEdge;
  float farEdge;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  float rotationLimit;
  float translationLimit;
  float roundness;
  float mipDistance;
  vec4_t aAbB;
  vec4_t cookieControl0;
  vec4_t cookieControl1;
  vec4_t cookieControl2;
  char defName[64];
};

/* 5205 */
struct BspLump
{
  unsigned int length;
  unsigned int offset;
};

/* 5206 */
struct OldBspHeader
{
  unsigned int ident;
  unsigned int version;
  BspLump lumps[47];
};

/* 5207 */
struct DiskPrimaryLight
{
  char type;
  char canUseShadowMap;
  __int16 cullDist;
  char priority;
  char useCookie;
  char shadowmapVolume;
  char _pad;
  vec3_t dir;
  vec3_t origin;
  vec3_t color;
  vec3_t bouncecolor;
  vec3_t angle;
  float intensity;
  float dAttenuation;
  float cutOn;
  float nearEdge;
  float farEdge;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  float rotationLimit;
  float translationLimit;
  float roundness;
  float mipDistance;
  vec4_t aAbB;
  vec4_t cookieControl0;
  vec4_t cookieControl1;
  vec4_t cookieControl2;
  char defName[64];
};

/* 5208 */
struct CmdText
{
  char *data;
  int maxsize;
  int cmdsize;
};

/* 5209 */
struct worldContents_s
{
  int contentsStaticModels;
  int contentsEntities;
  unsigned __int16 entities;
  unsigned __int16 staticModels;
};

/* 5210 */
struct worldTree_s
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 5211 */
struct worldSector_s
{
  worldContents_s contents;
  worldTree_s tree;
};

/* 5212 */
struct cm_world_t
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 freeHead;
  worldSector_s sectors[1024];
};

/* 5213 */
struct __declspec(align(16)) staticmodeltrace_t
{
  TraceExtents extents;
  int contents;
};

/* 5214 */
struct areaParms_t
{
  vec3_t *mins;
  vec3_t *maxs;
  int *list;
  int count;
  int maxcount;
  int contentmask;
};

/* 5215 */
struct locTraceWork_t
{
  int contents;
  TraceExtents extents;
};

/* 5216 */
struct leafList2_t
{
  unsigned int count;
  unsigned int maxcount;
  unsigned __int16 *list;
  vec3_t origin;
  float radius;
};

/* 5217 */
struct winding_t
{
  int numpoints;
  vec3_t p[4];
};

/* 5218 */
struct __declspec(align(4)) ShowCollisionBrushPt
{
  vec3_t xyz;
  __int16 sideIndex[3];
};

/* 5219 */
struct LayeredTechniqueSetName
{
  const char *inputName;
  const char *namePrefixRegister;
  const char *nameChunk;
};

/* 5220 */
struct dbrush_t
{
  __int16 numSides;
  __int16 materialNum;
};

/* 5221 */
struct DiskBrushModel
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 firstTriSoup;
  unsigned __int16 triSoupCount;
  int firstSurface;
  int numSurfaces;
  int firstBrush;
  int numBrushes;
};

/* 5222 */
union $4190DF34CC3BCB8A2A98769B62C4474B
{
  int firstChildIndex;
  int partitionIndex;
};

/* 5223 */
struct DiskCollAabbTree
{
  vec3_t origin;
  vec3_t halfSize;
  unsigned __int16 materialIndex;
  unsigned __int16 childCount;
  $4190DF34CC3BCB8A2A98769B62C4474B u;
};

/* 5224 */
struct dplane_t
{
  float normal[3];
  float dist;
};

/* 5225 */
struct dnode_t
{
  int planeNum;
  int children[2];
  int mins[3];
  int maxs[3];
};

/* 5226 */
struct dmaterial_t
{
  char material[64];
  int surfaceFlags;
  int contentFlags;
};

/* 5227 */
union $86117AB22FFC1A83F3EBD61192F208BB
{
  int planeNum;
  float bound;
};

/* 5228 */
struct dbrushside_t
{
  $86117AB22FFC1A83F3EBD61192F208BB u;
  int materialNum;
};

/* 5229 */
struct DiskLeaf_Version14
{
  int cluster;
  int unused0;
  int firstCollAabbIndex;
  int collAabbCount;
  int firstLeafBrush;
  int numLeafBrushes;
  int cellNum;
  int unused1;
  int unused2;
};

/* 5230 */
struct DiskCollPartition
{
  unsigned __int16 checkStamp;
  char triCount;
  int firstTriIndex;
  int nuinds;
  int fuind;
};

/* 5231 */
struct DiskLeaf
{
  int cluster;
  int firstCollAabbIndex;
  int collAabbCount;
  int firstLeafBrush;
  int numLeafBrushes;
  int cellNum;
};

/* 5232 */
struct EdgeInfo
{
  vec3_t v_v;
  float discNormalDist;
  float discriminant;
  vec3_t discEdgeAxis;
  vec3_t midpoint;
  vec3_t start_v;
  vec3_t discNormalAxis;
};

/* 5233 */
struct __declspec(align(4)) png_unknown_chunk_t
{
  char name[5];
  char *data;
  unsigned int size;
  char location;
};

/* 5234 */
struct png_color_16_struct
{
  char index;
  unsigned __int16 red;
  unsigned __int16 green;
  unsigned __int16 blue;
  unsigned __int16 gray;
};

/* 5238 */
struct png_color_8_struct
{
  char red;
  char green;
  char blue;
  char gray;
  char alpha;
};

/* 5235 */
struct png_struct_def
{
  int longjmp_buffer[16];
  void (__cdecl *longjmp_fn)(int *, int);
  void (__cdecl *error_fn)(png_struct_def *, const char *);
  void (__cdecl *warning_fn)(png_struct_def *, const char *);
  void *error_ptr;
  void (__cdecl *write_data_fn)(png_struct_def *, char *, unsigned int);
  void (__cdecl *read_data_fn)(png_struct_def *, char *, unsigned int);
  void *io_ptr;
  void (__cdecl *read_user_transform_fn)(png_struct_def *, png_row_info_struct *, char *);
  void (__cdecl *write_user_transform_fn)(png_struct_def *, png_row_info_struct *, char *);
  void *user_transform_ptr;
  char user_transform_depth;
  char user_transform_channels;
  unsigned int mode;
  unsigned int flags;
  unsigned int transformations;
  z_stream_s zstream;
  char *zbuf;
  unsigned int zbuf_size;
  unsigned int zlib_state;
  int zlib_level;
  int zlib_method;
  int zlib_window_bits;
  int zlib_mem_level;
  int zlib_strategy;
  int zlib_text_level;
  int zlib_text_method;
  int zlib_text_window_bits;
  int zlib_text_mem_level;
  int zlib_text_strategy;
  unsigned int width;
  unsigned int height;
  unsigned int num_rows;
  unsigned int usr_width;
  unsigned int rowbytes;
  unsigned int iwidth;
  unsigned int row_number;
  unsigned int chunk_name;
  char *prev_row;
  char *row_buf;
  char *sub_row;
  char *up_row;
  char *avg_row;
  char *paeth_row;
  unsigned int info_rowbytes;
  unsigned int idat_size;
  unsigned int crc;
  png_color_struct *palette;
  unsigned __int16 num_palette;
  int num_palette_max;
  unsigned __int16 num_trans;
  char compression;
  char filter;
  char interlaced;
  char pass;
  char do_filter;
  char color_type;
  char bit_depth;
  char usr_bit_depth;
  char pixel_depth;
  char channels;
  char usr_channels;
  char sig_bytes;
  char maximum_pixel_depth;
  char transformed_pixel_depth;
  char io_chunk_string[5];
  unsigned __int16 filler;
  char background_gamma_type;
  int background_gamma;
  png_color_16_struct background;
  png_color_16_struct background_1;
  void (__cdecl *output_flush_fn)(png_struct_def *);
  unsigned int flush_dist;
  unsigned int flush_rows;
  int gamma_shift;
  int gamma;
  int screen_gamma;
  char *gamma_table;
  unsigned __int16 **gamma_16_table;
  char *gamma_from_1;
  char *gamma_to_1;
  unsigned __int16 **gamma_16_from_1;
  unsigned __int16 **gamma_16_to_1;
  png_color_8_struct sig_bit;
  png_color_8_struct shift;
  char *trans_alpha;
  png_color_16_struct trans_color;
  void (__cdecl *read_row_fn)(png_struct_def *, unsigned int, int);
  void (__cdecl *write_row_fn)(png_struct_def *, unsigned int, int);
  void (__cdecl *info_fn)(png_struct_def *, png_info_def *);
  void (__cdecl *row_fn)(png_struct_def *, char *, unsigned int, int);
  void (__cdecl *end_fn)(png_struct_def *, png_info_def *);
  char *save_buffer_ptr;
  char *save_buffer;
  char *current_buffer_ptr;
  char *current_buffer;
  unsigned int push_length;
  unsigned int skip_length;
  unsigned int save_buffer_size;
  unsigned int save_buffer_max;
  unsigned int buffer_size;
  unsigned int current_buffer_size;
  int process_mode;
  int cur_palette;
  char *palette_lookup;
  char *quantize_index;
  unsigned __int16 *hist;
  char heuristic_method;
  char num_prev_filters;
  char *prev_filters;
  unsigned __int16 *filter_weights;
  unsigned __int16 *inv_filter_weights;
  unsigned __int16 *filter_costs;
  unsigned __int16 *inv_filter_costs;
  char time_buffer[29];
  unsigned int free_me;
  void *user_chunk_ptr;
  int (__cdecl *read_user_chunk_fn)(png_struct_def *, png_unknown_chunk_t *);
  int num_chunk_list;
  char *chunk_list;
  char is_sRGB;
  char rgb_to_gray_status;
  char rgb_to_gray_coefficients_set;
  unsigned __int16 rgb_to_gray_red_coeff;
  unsigned __int16 rgb_to_gray_green_coeff;
  unsigned int mng_features_permitted;
  char filter_type;
  void *mem_ptr;
  void *(__cdecl *malloc_fn)(png_struct_def *, unsigned int);
  void (__cdecl *free_fn)(png_struct_def *, void *);
  char *big_row_buf;
  char *quantize_sort;
  char *index_to_palette;
  char *palette_to_index;
  char compression_type;
  unsigned int user_width_max;
  unsigned int user_height_max;
  unsigned int user_chunk_cache_max;
  unsigned int user_chunk_malloc_max;
  png_unknown_chunk_t unknown_chunk;
  unsigned int old_big_row_buf_size;
  char *chunkdata;
  unsigned int io_state;
  char *big_prev_row;
  void (__cdecl *read_filter[4])(png_row_info_struct *, char *, const char *);
};

/* 5236 */
struct png_row_info_struct
{
  unsigned int width;
  unsigned int rowbytes;
  char color_type;
  char bit_depth;
  char channels;
  char pixel_depth;
};

/* 5237 */
struct png_color_struct
{
  char red;
  char green;
  char blue;
};

/* 5239 */
struct png_text_struct
{
  int compression;
  char *key;
  char *text;
  unsigned int text_length;
  unsigned int itxt_length;
  char *lang;
  char *lang_key;
};

/* 5240 */
struct __declspec(align(2)) png_time_struct
{
  unsigned __int16 year;
  char month;
  char day;
  char hour;
  char minute;
  char second;
};

/* 5241 */
struct png_sPLT_entry_struct
{
  unsigned __int16 red;
  unsigned __int16 green;
  unsigned __int16 blue;
  unsigned __int16 alpha;
  unsigned __int16 frequency;
};

/* 5242 */
struct png_sPLT_struct
{
  char *name;
  char depth;
  png_sPLT_entry_struct *entries;
  int nentries;
};

/* 5243 */
struct png_info_def
{
  unsigned int width;
  unsigned int height;
  unsigned int valid;
  unsigned int rowbytes;
  png_color_struct *palette;
  unsigned __int16 num_palette;
  unsigned __int16 num_trans;
  char bit_depth;
  char color_type;
  char compression_type;
  char filter_type;
  char interlace_type;
  char channels;
  char pixel_depth;
  char spare_byte;
  char signature[8];
  int gamma;
  char srgb_intent;
  int num_text;
  int max_text;
  png_text_struct *text;
  png_time_struct mod_time;
  png_color_8_struct sig_bit;
  char *trans_alpha;
  png_color_16_struct trans_color;
  png_color_16_struct background;
  int x_offset;
  int y_offset;
  char offset_unit_type;
  unsigned int x_pixels_per_unit;
  unsigned int y_pixels_per_unit;
  char phys_unit_type;
  unsigned __int16 *hist;
  int x_white;
  int y_white;
  int x_red;
  int y_red;
  int x_green;
  int y_green;
  int x_blue;
  int y_blue;
  char *pcal_purpose;
  int pcal_X0;
  int pcal_X1;
  char *pcal_units;
  char **pcal_params;
  char pcal_type;
  char pcal_nparams;
  unsigned int free_me;
  png_unknown_chunk_t *unknown_chunks;
  int unknown_chunks_num;
  char *iccp_name;
  char *iccp_profile;
  unsigned int iccp_proflen;
  char iccp_compression;
  png_sPLT_struct *splt_palettes;
  unsigned int splt_palettes_num;
  char scal_unit;
  char *scal_s_width;
  char *scal_s_height;
  char **row_pointers;
};

/* 5244 */
struct compression_state
{
  const char *input;
  unsigned int input_len;
  int num_output_ptr;
  int max_output_ptr;
  char **output_ptr;
};

/* 5245 */
struct png_xy
{
  int redx;
  int redy;
  int greenx;
  int greeny;
  int bluex;
  int bluey;
  int whitex;
  int whitey;
};

/* 5246 */
struct png_XYZ
{
  int redX;
  int redY;
  int redZ;
  int greenX;
  int greenY;
  int greenZ;
  int blueX;
  int blueY;
  int blueZ;
};

/* 5247 */
struct __declspec(align(4)) png_dsort_struct
{
  png_dsort_struct *next;
  char left;
  char right;
};

/* 5248 */
struct __declspec(align(8)) dwYouTubeUploadTask_t
{
  unsigned __int64 fileID;
  bool isPrivate;
};

/* 5249 */
struct dwYouTubeIsRegisteredTask_t
{
  bdBoolResult isRegisteredResult;
};

/* 5250 */
struct dwYouTubeRegistrationTask_t
{
  bdYouTubeAuthorizationCode *authCode;
};

/* 5251 */
struct dwYouTubeGetTokenTask_t
{
  bdYouTubeUserToken *userToken;
};

/* 5252 */
struct controllerYouTubeTasks_t
{
  dwYouTubeUploadTask_t ytUploadTask;
  dwYouTubeIsRegisteredTask_t ytIsRegisteredTask;
  dwYouTubeRegistrationTask_t ytRegistrationTask;
  dwYouTubeGetTokenTask_t ytGetTokenTask;
};

/* 5253 */
struct __declspec(align(8)) youTube_t
{
  unsigned __int64 xuid;
  youtubeStatus_e status;
  int authTime;
  int retryCount;
  int nextRetryTime;
  bdYouTubeAuthorizationCode authCode;
  bdYouTubeUserToken userToken;
  bool isRegistered;
};

/* 5254 */
struct ytDWKeys_t
{
  char devKey[257];
  char devSecret[65];
  char consumerKey[257];
  char consumerSecret[65];
};

/* 5255 */
struct liveVote_t
{
  ControllerIndex_t requestController;
  ControllerIndex_t ownerController;
  unsigned __int64 entities[575];
  char votes[575];
  int numVotes;
  unsigned __int64 recentlyLikedEntities[25];
  char recentlyLikedCategories[25];
  int numRecentlyLiked;
  int offset;
  int isReady;
  int lastFullFetchTime;
  int nextPageFetchTime;
};

/* 5256 */
struct __declspec(align(8)) dwVoteSubmitTask_t
{
  dwVoteCategory_e category;
  unsigned __int64 entity;
  dwVote_e vote;
};

/* 5257 */
struct dwVoteHistoryTask_t
{
  int offset;
  int maxResults;
  bdCategorizedRatingInfo *outVotes;
};

/* 5258 */
struct __declspec(align(8)) liveVoteTasks_t
{
  dwVoteSubmitTask_t submitTask;
  dwVoteHistoryTask_t historyTask;
};

/* 5259 */
struct __declspec(align(8)) voteSortItem_t
{
  unsigned __int64 entity;
  char vote;
};

/* 5260 */
struct twitch_s
{
  unsigned __int64 xuid;
  bool isRegistered;
  bdTwitchUserInfo account;
  twitchStatus_e status;
  int retryCount;
  int nextRetryTime;
};

/* 5261 */
struct dwTwitchIsRegisteredTask
{
  bdBoolResult isRegistered;
};

/* 5262 */
struct dwTwitchGetAccountTask
{
  bdTwitchUserInfo *account;
};

/* 5263 */
struct dwTwitchRegisterTask
{
  char accountName[256];
  char authToken[1024];
};

/* 5264 */
struct playerTwitchOperations
{
  dwTwitchIsRegisteredTask twIsRegisteredTask;
  dwTwitchGetAccountTask twGetAccountTask;
  dwTwitchRegisterTask twRegisterTask;
};

/* 5265 */
struct __declspec(align(8)) hostDelegate_t
{
  unsigned __int64 playerXuid;
  netadr_t playerAddr;
};

/* 5266 */
struct hostDelegateDetails_t
{
  int delegateIdx;
  int delegateTime;
  int lastDelegateSendTime;
};

/* 5267 */
struct __declspec(align(8)) MetPlayerInfo
{
  char version;
  XuidInfo playersXuidInfo[50];
  char metPlayerCount;
};

/* 5268 */
struct LeagueFriendInfo
{
  unsigned __int64 xuid;
  char gamertag[32];
};

/* 5269 */
struct LeagueFriendsInfo
{
  int friendCount;
  int lastDownloadTime;
  LeagueFriendInfo friendInfo[50];
};

/* 5270 */
struct LeagueTeamSubdivisionInfo
{
  unsigned __int64 teamID;
  bdLeagueSubdivisionResult subdivisionInfo[8];
  bool isSolo;
  int lastUpdated;
};

/* 5271 */
struct __declspec(align(8)) LeagueTeamsData
{
  bool isUpdating;
  int numResults;
  int numResultsToFetch;
  int currLeagueID;
  int currTeamsListOffset;
  int numResultsToFetchForLeague;
  bdLeagueUserTeamResult teams[12];
  LeagueTeamSubdivisionInfo teamSubdivisionInfos[12];
  bdLeagueTeamMemberInfo teamMemberInfos[12];
  bdLeagueTeamInfo teamInfos[12];
  bdGenericLeagueID soloTeamID;
  unsigned __int64 currPlayerXuid;
  bool fetchAllInfoForTeamInLeague;
};

/* 5272 */
struct TeamLookup
{
  int memberCount;
  int lru;
  unsigned __int64 members[6];
  bdGenericLeagueID teamID;
};

/* 5273 */
struct __cppobj __declspec(align(4)) bdLeagueStatsInfo : bdTaskResult
{
  unsigned __int64 m_teamID;
  unsigned __int64 m_subdivisionID;
  char m_writeType;
  __int64 m_rating;
  int m_integers[8];
  float m_floats[3];
  unsigned int m_rank;
  unsigned int m_secondsSinceUpdate;
  char m_name[65];
};

/* 5274 */
struct __declspec(align(8)) LeagueLbData
{
  bool isUpdating;
  int numResults;
  int totalResults;
  int offset;
  unsigned __int64 currTeamID;
  unsigned __int64 currSubdivisionID;
  unsigned __int64 pivotEntity;
  bdLeagueStatsInfo lbRows[500];
  bdLeagueTeamMemberInfo teamMemberInfo;
  int lastUpdated;
};

/* 5275 */
struct __declspec(align(8)) LeagueSeasonHistory
{
  bdLeagueSubdivisionHistoryResult seasonHistoryInfo[16];
  int numResults;
};

/* 5276 */
struct LeagueHistoryData
{
  LeagueSeasonHistory leagueSeasonHistory[8];
  bdLeagueSubdivisionInfo subdivisionInfos[128];
  int numSubdivisionInfos;
  unsigned __int64 currTeamID;
  __int16 currLeagueIndex;
  int lastUpdated;
};

/* 5277 */
struct __declspec(align(4)) StatsLookup
{
  StatsState state;
  int workCount;
  int workTime;
  int backoffCount;
  unsigned __int64 leagueID;
  int divisionID;
  bool isSolo;
  int nameID;
  unsigned __int64 teamID;
  int memberCount;
  char teamName[65];
  bool isPreSeason;
  bdLeagueSubdivisionResult subdivision;
  bdLeagueStatsInfo stats;
  LeagueTeamsData teamsData;
  LeagueHistoryData historyData;
  bool haveOutcomes;
  LeagueOutcomes outcomes;
  int matchDelta;
  int bonusDelta;
  LeagueOutcome matchOutcome;
  unsigned __int64 previousSubdivisionID;
  int previousDivisionID;
  bool refreshRequested;
};

/* 5278 */
struct LeagueSeason
{
  int id;
  const char *name;
  int startUTC;
  int endUTC;
};

/* 5279 */
struct League
{
  int id;
  const char *name;
  const char *description;
  const char *icon;
  const char *news;
  bool teamsAllowed;
  bool randomsAllowed;
  int teamSize;
  int placementGames;
  float placementWindow;
  int bonusPool;
  int bonusPerWin;
  int bonusTimeUTC;
  int bonusDays;
  bool bonusCumulative;
  float eloMean;
  float eloScale;
  float eloK;
  float eloN;
  int eloAwards[20];
  int numSeasons;
  LeagueSeason seasons[16];
};

/* 5280 */
struct LeagueDivisionIcon
{
  int rankPosition;
  const char *smallIcon;
  const char *largeIcon;
};

/* 5281 */
struct LeagueDivision
{
  int id;
  const char *name;
  const char *description;
  float minSkill;
  float maxSkill;
  float avgSkill;
  int subdivisionSize;
  bool canPlace;
  bool tweakSkill;
  int numIcons;
  LeagueDivisionIcon icons[6];
};

/* 5282 */
struct LeagueTeam
{
  LeagueStats baseStats;
  unsigned __int64 teamID;
  LeagueDivision *division;
  int memberCount;
  int input;
  float workingSkill;
  float workingVariance;
  LeagueStats newStats;
};

/* 5283 */
struct __cppobj bdLeagueAndSubdivisionResult : bdTaskResult
{
  unsigned __int64 m_leagueID;
  unsigned __int64 m_subdivisionID;
};

/* 5284 */
struct Leaderboard
{
  LeaderboardDef *lbDefs[5];
  LeaderboardRow<10> ustats[305];
  LeaderboardRow<10> cstats[1][50];
  int offset;
  int curIdx;
  int numResults;
  int totalResults;
  int filter;
  bool isUpdating;
  bool notSameFilter;
  unsigned __int64 pivotEntity;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 5285 */
struct __declspec(align(8)) LbGlob
{
  LeaderboardDef *writeLeaderboards[32];
  int writeCount;
  Leaderboard leaderboard;
  char feederText[32];
  bool isWritingInUse;
};

/* 5286 */
struct CacheLbTaskData
{
  LeaderboardDef *lbDef[10];
  int trackType[10];
  unsigned int lbReadIDs[10];
  int lbReadCount;
  LeaderboardRow<10> *lbRows[10];
  bdStatsInfoEx *statsInfoPtr[10];
};

/* 5287 */
struct __declspec(align(4)) lbTaskContext_t
{
  ControllerIndex_t controllerIndex;
  int filter;
  int offset;
  int kickoffTime;
  bool needsProcessing;
};

/* 5288 */
struct __declspec(align(8)) clientstats_t
{
  unsigned __int64 clientXUID;
  unsigned int statscolumns[10];
  typeEnumLB type;
};

/* 5289 */
struct lbdef_t
{
  char stat[10][64];
  char gametype[8];
  int lbid_daily;
  int lbid_weekly;
};

/* 5290 */
struct doubleXPRow_t
{
  int row;
  int nameHash;
  int contentMask;
};

/* 5291 */
struct doubleXPData_t
{
  doubleXPRow_t groups[32];
  bool isInitialized;
  StringTable *groupsTable;
  unsigned int controllerGroups[1];
  int controllerValues[1][20];
  bool contentPacksChecked[1];
  unsigned int serverXPGroupMask;
  unsigned int serverGunXPGroupMask;
};

/* 5292 */
struct __declspec(align(8)) dediUserData_t
{
  dediConnectionState_e connectionState;
  bool onConnectCalled;
  int signInState;
  bdInetAddr authAddr;
  bdInetAddr lsgAddr;
  int errorCount;
  int backoffRecoverTime;
  char gamertag[32];
  unsigned __int64 xuid;
  char xuidString[21];
  EUserTier tier;
  bool isReadyToParty;
  bool isPartyInitialized;
  bool isPartyReady;
  bool isInParty;
  bool isInLocalParty;
};

/* 5293 */
struct __cppobj bdAuthUtility
{
};

/* 5294 */
struct __cppobj bdCore
{
};

/* 5295 */
struct audioSample_t
{
  char *buffer;
  int lengthInBytes;
  int lengthInSamples;
  int bytesPerSample;
  int frequency;
  bool stereo;
  int channels;
  int sampleOffset;
};

/* 5296 */
struct __cppobj IDirectSound8 : IDirectSound
{
};

/* 5297 */
struct SpeexMode
{
  const void *mode;
  int (__cdecl *query)(const void *, int, void *);
  const char *modeName;
  int modeID;
  int bitstream_version;
  void *(__cdecl *enc_init)(SpeexMode *);
  void (__cdecl *enc_destroy)(void *);
  int (__cdecl *enc)(void *, void *, SpeexBits *);
  void *(__cdecl *dec_init)(SpeexMode *);
  void (__cdecl *dec_destroy)(void *);
  int (__cdecl *dec)(void *, SpeexBits *, void *);
  int (__cdecl *enc_ctl)(void *, int, void *);
  int (__cdecl *dec_ctl)(void *, int, void *);
};

/* 5298 */
struct SpeexBits
{
  char *chars;
  int nbBits;
  int charPtr;
  int bitPtr;
  int owner;
  int overflow;
  int buf_size;
  int reserved1;
  void *reserved2;
};

/* 5299 */
struct target_t
{
  gentity_t *ent;
  vec3_t offset;
  int materialIndex;
  int offscreenMaterialIndex;
  int flags;
};

/* 5300 */
struct notebonemap_t
{
  unsigned __int16 note;
  unsigned __int16 bone;
};

/* 5301 */
struct SaveMemoryGlob
{
  SaveGame migration;
};

/* 5302 */
struct useList_t
{
  gentity_t *ent;
  float score;
};

/* 5303 */
struct std::_Pair_base<useList_t *,useList_t *>
{
  useList_t *first;
  useList_t *second;
};

/* 5304 */
struct __cppobj std::pair<useList_t *,useList_t *> : std::_Pair_base<useList_t *,useList_t *>
{
};

/* 5305 */
struct __cppobj bdCryptoUtils
{
};

/* 5306 */
struct GamerProfileBuffer
{
  char exeSettings[1000];
  char commonSettings[1000];
  bool isInitialized;
  bool isLoggedIn;
  bool errorOnRead;
};

/* 5307 */
struct __declspec(align(4)) GamerProfileGlobals
{
  GamerProfileBuffer profiles[1];
  ddlDef_t *commonProfileDef;
  ddlState_t commonProfileRootState;
  ddlDef_t *exeProfileDef;
  ddlState_t exeProfileRootState;
  ddlState_t exeProfileCACState;
  bool isMatureContentEnabled;
  bool showBlood;
  int quickLaunchMode;
  int exeSettingsSize;
  int commonSettingsSize;
  bool is3DEnabled;
};

/* 5308 */
union intsAreFloatsHack
{
  int i;
  float f;
};

/* 5309 */
struct antilagActorStore_t
{
  vec3_t position[32];
  vec3_t angles[32];
  char actorMoved[32];
};

/* 5310 */
struct antilagVehicleStore_t
{
  vec3_t position[16];
  vec3_t angles[16];
  char vehicleMoved[16];
};

/* 5311 */
struct __declspec(align(4)) vn_field_t
{
  char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  bool writable;
};

/* 5312 */
struct vehicle_path_node_link_t
{
  __int16 nextIdx;
  float length;
  vec3_t dir;
};

/* 5313 */
struct VP_FindCustomPath::__l4::pathNodeTransientInfo
{
  __int16 fromNode;
  __int16 flags;
  float gCost;
  float fCost;
  float hCost;
};

/* 5314 */
struct __declspec(align(16)) VehicleLocalPhysics
{
  trace_t groundTrace;
  int hasGround;
  int onGround;
};

/* 5315 */
struct VehiclePhysicsBackup
{
  vehicle_pathpos_t pathPos;
  vehicle_physic_t phys;
};

/* 5316 */
struct $12A57F2E90A8B2E51E3C97F1C6BA6D06
{
  target_t targets[32];
  unsigned int targetCount;
};

/* 5317 */
struct ipFilter_s
{
  unsigned int mask;
  unsigned int compare;
};

/* 5318 */
struct SortedPointArray
{
  int spawnPointsByIndex[200];
  int count;
  int sortTime;
};

/* 5319 */
struct SpawnPoint
{
  vec3_t origin;
  float weight[9];
  float baseWeight[9];
  int entNum;
  int teamMask;
  float yaw;
  int id;
  int orderNum;
  int dangerous;
  int dangerTimestamp[9];
  int scoreCullTime[9];
  vec3_t losCheckPos;
};

/* 5320 */
struct SpawnInfluencerPreset
{
  char description[32];
  int index;
  eInfluencerType type;
  eInfluencerShape shape;
  float radius;
  float originalLength;
  float score;
  eInfluencerScoreCurve score_curve;
  int markDangerous;
};

/* 5321 */
struct SpawnInfluencer
{
  bool used;
  bool active;
  bool archived;
  int influencerInstanceId;
  int debugEntityNum;
  int expireTime;
  int disableTime;
  int teamMask;
  EntHandle entity;
  SpawnInfluencerPreset *preset;
  float boundingRadius;
  vec2_t bounds;
  float length;
  vec3_t origin;
  vec3_t forward;
  vec3_t up;
  vec4_t quat;
  vec4_t worldQuat;
  vec3_t midPoint;
  int lastUpdateTime;
  float lastScore;
};

/* 5322 */
struct __declspec(align(4)) SpawnClientData
{
  int lastSpawnInstanceId;
  int lastSpawnId;
  int lastSpawnTime;
  int flags;
  int pointTeam;
  int influencerTeam;
  int numInfluencers;
  int numPresets;
  int numSpawnPoints;
  int numClients;
  bool clientPosDataArchived;
};

/* 5323 */
struct SpawnClientPosData
{
  bool active;
  vec3_t origin;
  float yaw;
  int team;
};

/* 5324 */
struct SpawnSystem_t
{
  SortedPointArray sortedTeamSpawnPoints[9];
  SpawnPoint spawnPoints[200];
  int spawnPointCount;
  bool spawnPointsArchived;
  int influencerPresetCount;
  SpawnInfluencerPreset influencerPresets[256];
  SpawnInfluencer influencers[272];
  SpawnInfluencer *sortedInfluencers[272];
  int sortedInfluencerCount;
  int lastInfluencerSortTime;
  eSpawnSystemDebugMode debugMode;
  int debugHighlightedSpawnPoint;
  int spawnInstanceCount;
  int influencerInstanceCount;
  SpawnClientData clientData[18];
  SpawnClientPosData clientsPosArchive[18][18];
  char demoClientBuffer[18][10000];
  int demoClientBufferPos[18];
  bool demoRecordingEnabled;
  int demoBytesWritten;
  int lastSpawnPointId;
  int spawnPointIdShift;
};

/* 5325 */
struct std::_Pair_base<int *,int *>
{
  int *first;
  int *second;
};

/* 5326 */
struct __cppobj std::pair<int *,int *> : std::_Pair_base<int *,int *>
{
};

/* 5327 */
struct std::_Pair_base<SpawnInfluencer * *,SpawnInfluencer * *>
{
  SpawnInfluencer **first;
  SpawnInfluencer **second;
};

/* 5328 */
struct __cppobj std::pair<SpawnInfluencer * *,SpawnInfluencer * *> : std::_Pair_base<SpawnInfluencer * *,SpawnInfluencer * *>
{
};

/* 5329 */
struct std::_Pair_base<SpawnPoint *,SpawnPoint *>
{
  SpawnPoint *first;
  SpawnPoint *second;
};

/* 5330 */
struct __cppobj std::pair<SpawnPoint *,SpawnPoint *> : std::_Pair_base<SpawnPoint *,SpawnPoint *>
{
};

/* 5331 */
struct DEMO_SpawnInfluencerPreset
{
  unsigned __int16 index;
  char type;
  char shape;
  int radius;
  int originalLength;
  unsigned __int16 scoreCurve;
  int score;
  char description[32];
};

/* 5332 */
struct compare_spawnpoint_score_sort
{
  int m_team;
};

/* 5333 */
struct __declspec(align(2)) DEMO_SpawnPoint
{
  unsigned __int16 index;
  __int16 yaw;
  __int16 origin[3];
  __int16 baseWeight[3];
  __int16 weight;
  __int16 orderNum;
  char dangerous;
};

/* 5334 */
struct DEMO_SpawnInfluencerInstance
{
  unsigned __int16 index;
  unsigned __int16 presetIndex;
  __int16 entityNum;
  __int16 origin[3];
  __int16 angles[3];
  unsigned __int16 length;
  __int16 score;
};

/* 5335 */
struct __cppobj compare_spawnpoint_sort
{
};

/* 5336 */
struct __cppobj compare_spawninfluencer_sort
{
};

/* 5337 */
struct __declspec(align(2)) DEMO_SpawnBadSpawn
{
  __int16 playerEntityNum;
  __int16 enemyEntityNum;
  char playerTeam;
  char pointTeam;
  char influencerTeam;
};

/* 5338 */
struct game_hudelem_s
{
  hudelem_s elem;
  ClientNum_t clientNum;
  int team;
  int archived;
};

/* 5339 */
struct ent_field_t
{
  const char *name;
  int ofs;
  int size[1];
  fieldtype_t type;
  void (__cdecl *callback)(gentity_t *, int);
};

/* 5340 */
struct SpawnFuncEntry
{
  const char *classname;
  void (__cdecl *callback)(gentity_t *, SpawnVar *);
};

/* 5341 */
struct BuiltinFunctionDef
{
  const char *actionString;
  unsigned int constId;
  int min_args;
  int max_args;
  void (__cdecl *actionFunc)();
  int type;
};

/* 5342 */
union statValue_t
{
  int integer;
  unsigned int unsignedInt;
  __int64 integer64;
  unsigned __int64 unsignedInt64;
  float value;
};

/* 5343 */
struct scoreInfo_t
{
  int nameHash;
  float value;
  unsigned __int32 addPlayerStat : 1;
  unsigned __int32 isMedal : 1;
  unsigned __int32 isDoubleXP : 1;
  unsigned __int32 isGunXP : 1;
  unsigned __int32 demoBookmarkPriority : 7;
  unsigned __int32 tableIndex : 9;
};

/* 5344 */
struct scoreInfoTable_t
{
  scoreInfo_t scoreInfos[512];
  int numScoreInfos;
};

/* 5345 */
struct __declspec(align(8)) statAddValue_t
{
  statValue_t originalValue;
  statValue_t currentValue;
  ddlPrimitiveTypes_e varType;
};

/* 5346 */
struct Scr_ArraySortEntity
{
  int entNum;
  float distSq;
};

/* 5347 */
struct saveField_t
{
  int ofs;
  saveFieldtype_t type;
};

/* 5348 */
struct AttractorRepulsor_t
{
  bool inUse;
  bool isAttractor;
  int entnum;
  vec3_t origin;
  float strength;
  float maxDist;
};

/* 5349 */
struct $783FE6A799BE3E83CA042EF3B72B7240
{
  AttractorRepulsor_t attractors[32];
};

/* 5350 */
struct TIMED_RADIUS_DAMAGE
{
  vec3_t pos;
  int life;
  float radius;
  float radiusSqr;
  int damage;
  int rate;
  int mod;
  Weapon weapon;
  int fireStarterClientNum;
};

/* 5351 */
struct game_hudelem_field_t
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size;
  fieldtype_t type;
  int mask;
  int shift;
  void (__cdecl *setter)(game_hudelem_s *, int);
  void (__cdecl *getter)(game_hudelem_s *, int);
};

/* 5352 */
struct DebugDrawBrushInfo
{
  int depthTest;
  int duration;
  vec3_t transform[4];
};

/* 5353 */
struct bot_threat_t
{
  gentity_t *ent;
  float dot;
  float distSq;
};

/* 5354 */
struct client_fields_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  unsigned int whichbits;
  void (__cdecl *setter)(gclient_t *, client_fields_s *);
  void (__cdecl *getter)(gclient_t *, client_fields_s *);
};

/* 5355 */
struct std::_Pair_base<bot_threat_t *,bot_threat_t *>
{
  bot_threat_t *first;
  bot_threat_t *second;
};

/* 5356 */
struct __cppobj std::pair<bot_threat_t *,bot_threat_t *> : std::_Pair_base<bot_threat_t *,bot_threat_t *>
{
};

/* 5357 */
struct vehicle_fields_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  unsigned int whichbits;
  void (__cdecl *setter)(gentity_t *, vehicle_fields_s *);
  void (__cdecl *getter)(gentity_t *, vehicle_fields_s *);
};

/* 5358 */
struct EntHandleInfo
{
  void *handle;
  unsigned __int16 next;
  unsigned __int16 prev;
};

/* 5359 */
struct EntHandleList
{
  unsigned __int16 infoIndex;
};

/* 5360 */
struct __declspec(align(4)) BBBulletInfo
{
  int hitpos[2];
  __int16 hitcount;
};

/* 5361 */
struct Avoid
{
  vec3_t pos;
  float radius;
  float maxSpeed;
  float timeHorizon;
  vec2_t vel;
  vec2_t prefVel;
  int priority;
  int entnum;
  int flags;
};

/* 5362 */
struct OrcaPlane
{
  vec2_t p;
  vec2_t n;
};

/* 5363 */
struct FxCurve
{
  int dimensionCount;
  int keyCount;
  float keys[1];
};

/* 5364 */
struct FxCurveIterator
{
  FxCurve *master;
  int currentKeyIndex;
};

/* 5365 */
struct FxCamera
{
  vec3_t origin;
  volatile int isValid;
  vec4_t frustum[6];
  vec3_t axis[3];
  unsigned int frustumPlaneCount;
  unsigned int pad[2];
};

/* 5366 */
struct FxDrawSurfInfo
{
  r_double_index_t *indices;
  unsigned int indexCount;
  Material *material;
  const char *name;
  bool enableDepthHack;
  bool superflare;
  unsigned int pad[3];
};

/* 5367 */
struct FxSpatialFrame
{
  vec4_t quat;
  vec3_t origin;
};

/* 5368 */
struct $F9B2685F9B0482D71FF488E299B5B86D
{
  unsigned __int32 sortOrder : 8;
  unsigned __int32 type : 2;
  unsigned __int32 dobjHandle : 11;
  unsigned __int32 temporalBits : 1;
  unsigned __int32 boneIndex : 9;
};

/* 5369 */
struct $569DBA5C0C8D57F19E06A53D790E3F4B
{
  unsigned __int32 _sortOrder : 8;
  unsigned __int32 _type : 2;
  unsigned __int32 absDynEntId : 21;
};

/* 5370 */
union FxBoltAndSortOrder
{
  $F9B2685F9B0482D71FF488E299B5B86D __s0;
  $569DBA5C0C8D57F19E06A53D790E3F4B __s1;
};

/* 5371 */
union $F0D1AEBF48A55E0AD7E7FA7D78309411
{
  FxEffectDef *def;
  FxEffectDef *localDef;
};

/* 5372 */
struct FxEffect
{
  orientation_t boneOffset;
  FxSpatialFrame frameAtSpawn;
  FxSpatialFrame frameNow;
  FxSpatialFrame framePrev;
  FxSpatialFrame effectToGroundEntAtSpawn;
  $F0D1AEBF48A55E0AD7E7FA7D78309411 ___u5;
  unsigned __int16 firstElemHandle[3];
  unsigned __int16 firstSortedElemHandle;
  unsigned __int16 firstTrailHandle;
  unsigned __int16 randomSeed;
  unsigned int ownerEffect;
  FxBoltAndSortOrder boltAndSortOrder;
  volatile int frameCount;
  int msecBegin;
  int msecLastUpdate;
  float distanceTraveled;
  volatile int elemCount[3];
  unsigned int uniqueHandle;
  float occlusionVisibility;
  vec4_t lightGridColor;
  float primaryLightFraction;
  int lightingOriginOffset;
  unsigned __int16 occlusionQueryHandle;
  __int16 groundEntityNum;
  __int16 occlusionRefCount;
  char flags;
  char culled;
};

/* 5373 */
struct FxEffectAtomics
{
  volatile int status;
  volatile int status2;
};

/* 5374 */
struct __declspec(align(16)) FxEffectContainer
{
  FxEffect effect;
  FxEffectAtomics atomics;
};

/* 5375 */
struct $1D117C083EDD285D85066FD03908502C
{
  char fadeAlpha;
  char fadeAlphaPerSec;
};

/* 5376 */
struct $06C1F756D99171C711380CEF6EFF0938
{
  unsigned __int16 lightingHandle;
  $1D117C083EDD285D85066FD03908502C fade;
};

/* 5377 */
union $E6A4D1761B62A5B2774CED6A6EC36E5A
{
  float trailTexCoord;
  $06C1F756D99171C711380CEF6EFF0938 s;
};

/* 5378 */
union $87C10A29F85BF204C0DD4F4EBC93F3AD
{
  int physObjId;
  vec3_t origin;
};

/* 5379 */
struct FxElem
{
  char defIndex;
  char sequence;
  char atRestFraction;
  char emitResidual;
  int msecBegin;
  vec3_t baseVel;
  $87C10A29F85BF204C0DD4F4EBC93F3AD ___u6;
  $E6A4D1761B62A5B2774CED6A6EC36E5A u;
  unsigned int attachedEffectHandle;
  char windInterp;
  char elemSpawnVisBits;
  char pad[2];
};

/* 5380 */
struct FxElemShared
{
  unsigned __int16 nextElemHandleInEffect;
  unsigned __int16 prevElemHandleInEffect;
};

/* 5381 */
struct FxElemContainer
{
  FxElem elem;
  FxElemShared shared;
};

/* 5382 */
union $01A19ED9752F55008E25BB4E2B31BA6F
{
  int nextFree;
  FxElemContainer item;
};

/* 5383 */
struct FxPool<FxElem,FxElemContainer>
{
  $01A19ED9752F55008E25BB4E2B31BA6F ___u0;
};

/* 5384 */
struct FxTrail
{
  unsigned __int16 nextTrailHandle;
  unsigned __int16 firstElemHandle;
  unsigned __int16 lastElemHandle;
  char defIndex;
  char sequence;
};

/* 5385 */
union $7B6B91CFF08ADBB7D5E7841E2F54C49F
{
  int nextFree;
  FxTrail item;
};

/* 5386 */
struct FxPool<FxTrail,FxTrail>
{
  $7B6B91CFF08ADBB7D5E7841E2F54C49F ___u0;
};

/* 5387 */
struct FxTrailElem
{
  vec3_t origin;
  float spawnDist;
  int msecBegin;
  unsigned __int16 nextTrailElemHandle;
  __int16 baseVelZ;
  char basis[2][3];
  char sequence;
  char unused;
};

/* 5388 */
union $DE6D71DB89143ADDD8C272715158D524
{
  int nextFree;
  FxTrailElem item;
};

/* 5389 */
struct FxPool<FxTrailElem,FxTrailElem>
{
  $DE6D71DB89143ADDD8C272715158D524 ___u0;
};

/* 5390 */
struct FxVisBlocker
{
  vec3_t origin;
  unsigned __int16 radius;
  unsigned __int16 visibility;
};

/* 5391 */
struct FxVisState
{
  FxVisBlocker blocker[256];
  volatile int blockerCount;
  unsigned int pad[3];
};

/* 5392 */
struct FxUniqueHandleDb::Node
{
  int nextNode;
  unsigned int handle;
  unsigned __int16 effect;
  unsigned __int16 pad[3];
};

/* 5393 */
struct FxUniqueHandleDb
{
  FxUniqueHandleDb::Node nodes[1024];
  int firstFreeNode;
  int numNodesInUse;
  int pad[2];
};

/* 5394 */
struct FxPlaySoundAction
{
  vec3_t spawnOrigin;
  const char *soundName;
};

/* 5395 */
union FxPPUAction
{
  FxPlaySoundAction playSoundAction;
};

/* 5396 */
struct $4BF77BA7ADB30FF217765F1C7AC43745
{
  unsigned __int16 tag;
  __int16 index;
};

/* 5397 */
union TaggedIndex
{
  unsigned int asUInt32;
  $4BF77BA7ADB30FF217765F1C7AC43745 __s1;
};

/* 5398 */
struct FxPriorityInfo
{
  volatile int warningHigh[2];
  volatile int readIndex;
  int pad[1];
};

/* 5399 */
struct __declspec(align(16)) FxSystemShared
{
  TaggedIndex firstFreeElem;
  TaggedIndex firstFreeTrailElem;
  TaggedIndex firstFreeTrail;
  volatile int activeElemCount;
  volatile int activeTrailElemCount;
  volatile int activeTrailCount;
  volatile int firstActiveEffect;
  volatile int firstNewEffect;
  volatile int firstFreeEffect;
  unsigned __int16 activeSpotLightEffectHandle;
  unsigned __int16 activeSpotLightElemHandle;
  volatile int activeSpotLightEffectCount;
  volatile int activeSpotLightElemCount;
  unsigned __int16 allEffectHandles[1024];
  volatile int iteratorCount;
  volatile int firstActiveActionPPU;
  volatile int firstNewActionPPU;
  volatile int firstFreeActionPPU;
  FxPriorityInfo priorityInfo;
  volatile int needsGarbageCollection;
};

/* 5400 */
struct __declspec(align(16)) FxSystem
{
  FxCamera camera;
  FxCamera cameraPrev;
  FxCamera extraCamera;
  FxCamera extraCameraPre;
  FxDrawSurfInfo drawsurfInfo;
  FxEffectContainer *effects;
  FxPool<FxElem,FxElemContainer> *elems;
  FxPool<FxTrail,FxTrail> *trails;
  FxPool<FxTrailElem,FxTrailElem> *trailElems;
  int gfxCloudCount;
  FxVisState *visState;
  FxVisState *visStateBufferRead;
  FxVisState *visStateBufferWrite;
  __int16 activeSpotLightBoltDobj;
  char hideDistortionFX;
  int msecNow;
  int msecDelta;
  volatile int msecDraw;
  int frameCount;
  bool isInitialized;
  bool isArchiving;
  char localClientNum;
  unsigned int restartList[32];
  FxUniqueHandleDb *uniqueHandleDb;
  FxPlayEffectAction *actions;
  char *ppuActionTypes;
  FxPPUAction *ppuActions;
  bool disableOcclusionSprites;
  int fxSpawnWorkersOnHold;
  FxSystemShared *shared;
};

/* 5401 */
struct FXScopedEffectLock
{
  FxEffect *mRemoteEffect;
};

/* 5402 */
struct EffectDefGetter
{
  FxEffectDef *mEffectDef;
};

/* 5403 */
struct FxSystemContainer
{
  FxSystem system;
  FxSystemShared shared;
};

/* 5404 */
struct ElemDefGetter
{
  FxElemDef *mElemDef;
};

/* 5405 */
struct FxMarkPoint
{
  vec3_t xyz;
  vec2_t lmapCoord;
  vec3_t normal;
};

/* 5406 */
struct FxPointGroup
{
  FxMarkPoint points[2];
  int next;
};

/* 5407 */
union FxPointGroupPool
{
  FxPointGroupPool *nextFreePointGroup;
  FxPointGroup pointGroup;
};

/* 5408 */
struct FxMarksGridCell
{
  __int16 x;
  __int16 y;
  __int16 z;
};

/* 5409 */
struct FxMarksHashEntry
{
  FxMarksHashEntry *next;
  FxMarksGridCell cell;
  unsigned __int16 numMarks;
};

/* 5410 */
struct FxMarkAlphaFade
{
  int ageLimitMsec;
  int fadeStartAgeMsec;
};

/* 5411 */
struct __declspec(align(4)) FxMark
{
  unsigned __int16 prevMark;
  unsigned __int16 nextMark;
  int frameCountDrawn;
  int frameCountAlloced;
  int ageMsec;
  vec3_t origin;
  float radius;
  vec3_t texCoordAxis;
  char nativeColor[4];
  Material *material;
  int tris;
  int points;
  FxMarkAlphaFade alphaFade;
  GfxMarkContext context;
  unsigned __int16 pointCount;
  char triCount;
};

/* 5412 */
union FxTriGroupPool
{
  FxTriGroupPool *nextFreeTriGroup;
  FxTriGroup triGroup;
};

/* 5413 */
struct FxTriGroup
{
  unsigned __int16 indices[2][3];
  GfxMarkContext context;
  char triCount;
  char unused[1];
  int next;
};

/* 5414 */
struct FxMarksSystem
{
  FxMarksHashEntry gridHashTableEntries[256];
  FxMarksHashEntry *gridHashTable[256];
  FxMark marks[256];
  FxTriGroupPool triGroups[1024];
  FxPointGroupPool pointGroups[1536];
  unsigned __int16 entFirstMarkHandles[1792];
  int frameCount;
  unsigned __int16 firstFreeMarkHandle;
  unsigned __int16 firstActiveWorldMarkHandle;
  unsigned __int16 firstViewmodelMarkHandle;
  unsigned int numViewmodelMarks;
  FxTriGroupPool *firstFreeTriGroup;
  FxPointGroupPool *firstFreePointGroup;
  bool noMarks;
  bool hasCarryIndex;
  unsigned __int16 carryIndex;
  unsigned int allocedMarkCount;
  unsigned int freedMarkCount;
  int frameTime;
  int gridHashTableNumUsedEntries;
  int timeSinceLastGridUpdate;
};

/* 5415 */
struct FxUpdateElem
{
  FxEffect *effect;
  FxEffectDef *effectDef;
  FxElemDef *elemDef;
  int elemIndex;
  int atRestFraction;
  orientation_t orient;
  int randomSeed;
  int sequence;
  float msecLifeSpan;
  int msecElemBegin;
  int msecElemEnd;
  int msecUpdateBegin;
  int msecUpdateEnd;
  float msecElapsed;
  float normTimeUpdateEnd;
  float *elemOrigin;
  float *elemBaseVel;
  vec3_t posWorld;
  bool onGround;
  int physObjId;
  ElemDefGetter elemDefGetter;
};

/* 5416 */
struct FxCameraUpdate
{
  vec3_t vieworg;
  vec3_t viewaxis[3];
  float tanHalfFovX;
  float tanHalfFovY;
  float zfar;
};

/* 5417 */
struct FxSpawnEffectCmd
{
  vec4_t spawnAxis;
  vec3_t spawnPos;
  unsigned int newEffectUniqueHandle;
  FxEffectDef *effectDef;
  int msecBegin;
  unsigned int ownerEffect;
  int dobjHandle;
  int boneIndex;
  int markEntnum;
  __int16 groundEntityNum;
  char runnerSortOrder;
  char localClientNum;
};

/* 5418 */
struct __declspec(align(4)) FxCmd
{
  FxSystem *system;
  float elemRemoveChance;
  GfxLight *visibleLights;
  int visibleLightCount;
  int updateEffectBegin;
  int updateEffectEnd;
  LocalClientNum_t localClientNum;
  char updateCameraType;
  bool isInfraredDraw;
};

/* 5419 */
struct FxSystemBuffers
{
  FxEffectContainer effects[1024];
  FxPool<FxElem,FxElemContainer> elems[2048];
  FxPool<FxTrail,FxTrail> trails[128];
  FxPool<FxTrailElem,FxTrailElem> trailElems[2048];
  FxVisState visState[2];
  FxUniqueHandleDb uniqueHandleDb;
  char ppuActionTypes[128];
  FxPPUAction ppuActions[128];
  char padBuffer[80];
};

/* 5420 */
struct std::_Pair_base<unsigned int *,unsigned int *>
{
  unsigned int *first;
  unsigned int *second;
};

/* 5421 */
struct __cppobj std::pair<unsigned int *,unsigned int *> : std::_Pair_base<unsigned int *,unsigned int *>
{
};

/* 5422 */
struct FXScopedCooperativeIteration
{
  FxSystem *mSystem;
};

/* 5423 */
struct __cppobj SpuDmaBuffer
{
};

/* 5424 */
struct FxSprite
{
  Material *material;
  vec3_t pos;
  char rgbaColor[4];
  float radius;
  float minScreenRadius;
  int flags;
};

/* 5425 */
struct FxSpriteInfo
{
  int spriteCount;
  int pad[3];
  FxSprite sprites[950];
};

/* 5426 */
struct FxBeamInfo
{
  FxBeam beams[96];
  volatile int beamCount;
};

/* 5427 */
struct FxPostLight
{
  vec3_t begin;
  vec3_t end;
  float radius;
  GfxColor color;
  Material *material;
};

/* 5428 */
struct FxPostLightInfo
{
  FxPostLight postLights[96];
  int postLightCount;
};

/* 5429 */
struct FxElemBits
{
  volatile int bits[64];
};

/* 5430 */
struct EffectElemCountInfo
{
  int effectHandleIndex;
  unsigned int numCloudElemsToDraw;
  unsigned int numSpriteElemsToDraw;
  unsigned int pad;
};

/* 5431 */
struct EffectElementDraw
{
  FxEffect *effect;
  r_double_index_t *firstIndex;
  unsigned __int16 firstParticleCloudIndex;
  unsigned __int16 firstVertex;
  unsigned __int16 numParticleCloudAlloc;
  unsigned __int16 numCodeMeshAlloc;
};

/* 5432 */
struct FxElemPreVisualState
{
  float sampleLerp;
  float sampleLerpInv;
  FxElemVisStateSample *refStateMain;
  FxElemVisStateSample *refState;
  int randomSeed;
  float distanceFade;
  float occlusionFade;
};

/* 5433 */
struct FxElemRenderVisualState
{
  vec2_t size;
};

/* 5434 */
struct FxColor4b
{
  char color[4];
};

/* 5435 */
struct __declspec(align(16)) FxElemRenderState
{
  orientation_t orient;
  FxElemPreVisualState preVisState;
  vec3_t posWorld;
  FxElemRenderVisualState visState;
  int randomSeed;
  float msecLifeSpan;
  float msecElapsed;
  float normTimeUpdateEnd;
  FxColor4b baseColor;
};

/* 5436 */
struct FxDrawTrailResourceRequired
{
  int numCodeMeshVerts;
  int numIndices;
};

/* 5437 */
struct FxDrawTrailResource
{
  r_double_index_t *baseIndices;
  unsigned __int16 baseVertex;
  unsigned __int16 pad;
};

/* 5438 */
struct __declspec(align(4)) FxTrailDrawState
{
  int exactSegmentCount;
  unsigned __int16 lastRandomSeed;
};

/* 5439 */
struct __declspec(align(16)) FxSmpDrawBuffer
{
  FxElemBits elemDrawBits;
  EffectElemCountInfo effectCountInfo[1024];
  EffectElementDraw effectElementDraw[1024];
  FxElemRenderState elemRenderState[2048];
  FxDrawTrailResourceRequired resReqArray[1024];
  FxDrawTrailResource resArray[1024];
  FxTrailDrawState trailDrawState[128];
  unsigned __int16 resReqTrailEffects[1024];
  volatile int effectCountInfoIndex;
  volatile int numTrailEffectsAlloced;
};

/* 5440 */
struct FxGenerateVertsCmd
{
  FxSystem *system;
  FxBeamInfo *beamInfo;
  FxPostLightInfo *postLightInfo;
  FxSpriteInfo *spriteInfo;
  LocalClientNum_t localClientNum;
  vec3_t vieworg;
  vec3_t viewaxis[3];
  char genVertsCameraType;
  int drawTime;
  FxSmpDrawBuffer *smpDrawBuffer;
};

/* 5441 */
struct __declspec(align(4)) FxInsertSortElem
{
  int defSortOrder;
  float distToCamSq;
  int msecBegin;
  int defIndex;
  char elemType;
};

/* 5442 */
struct FxProfileEntry
{
  FxEffectDef *effectDef;
  int effectCount;
  int activeElemCount;
  int pendingElemCount;
  int trailCount;
  int activeTrailElemCount;
  int pendingTrailElemCount;
};

/* 5443 */
struct OccQueryDebugEntry
{
  FxEffectDef *def;
  int count;
};

/* 5444 */
struct PriorityDebugEntry
{
  FxEffectDef *def;
  int count;
};

/* 5445 */
struct GfxConfiguration
{
  unsigned int maxClientViews;
  unsigned int entCount;
  unsigned int entnumNone;
  unsigned int entnumOrdinaryEnd;
  int threadContextCount;
  int critSectCount;
};

/* 5446 */
struct GfxWorldVertex
{
  vec3_t xyz;
  float binormalSign;
  GfxColor color;
  vec2_t texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
  vec2_t lmapCoord;
};

/* 5447 */
struct FxMarkTri
{
  unsigned __int16 indices[3];
  GfxMarkContext context;
};

/* 5448 */
struct std::_Pair_base<FxMarkTri *,FxMarkTri *>
{
  FxMarkTri *first;
  FxMarkTri *second;
};

/* 5449 */
struct __cppobj std::pair<FxMarkTri *,FxMarkTri *> : std::_Pair_base<FxMarkTri *,FxMarkTri *>
{
};

/* 5450 */
struct __declspec(align(4)) MarkInfoCollidedBModel
{
  GfxBrushModel *brushModel;
  cpose_t *pose;
  unsigned __int16 entnum;
};

/* 5451 */
struct FxAddMarkCmd
{
  LocalClientNum_t localClientNum;
  FxElemDef *elemDef;
  FxSpatialFrame spatialFrame;
  int randomSeed;
  unsigned int markEntnum;
  bool markViewmodel;
  vec3_t viewOffset;
};

/* 5452 */
struct __declspec(align(4)) MarkInfoCollidedDObj
{
  DObj *dObj;
  cpose_t *pose;
  unsigned __int16 entnum;
};

/* 5453 */
struct MarkGenContext
{
  LocalClientNum_t localClientNum;
  Material *material;
  float radius;
  const char *nativeColor;
  FxMarkAlphaFade *markAlpha;
};

/* 5454 */
struct MarkClipPlaneSet
{
  vec4_t planes[11];
  int planeCount;
};

/* 5455 */
struct MarkInfo
{
  vec3_t origin;
  vec3_t localOrigin;
  vec3_t localTexCoordAxis;
  vec3_t axis[3];
  float radius;
  Material *material;
  int maxTris;
  FxMarkTri *tris;
  int maxPoints;
  FxMarkPoint *points;
  vec3_t mins;
  vec3_t maxs;
  MarkClipPlaneSet clipPlanes;
  vec3_t viewOffset;
  bool markHasLightmap;
  bool markHasReflection;
  MarkFragmentsAgainstEnum markAgainst;
  unsigned __int16 smodelsCollided[32];
  int smodelCollidedCount;
  MarkInfoCollidedDObj sceneDObjsCollided[32];
  int sceneDObjCollidedCount;
  MarkInfoCollidedBModel sceneBModelsCollided[32];
  int sceneBModelCollidedCount;
  MarkInfoCollidedDObj viewmodelDObjsCollided[1];
  int viewmodelDObjsCollidedCount;
  int usedTriCount;
  int usedPointCount;
  void (__cdecl *callback)(void *, int, FxMarkTri *, int, FxMarkPoint *, vec3_t *, vec3_t *);
  void *callbackContext;
};

/* 5456 */
struct FxActiveMarkSurf
{
  Material *material;
  GfxMarkContext context;
  int indexCount;
  unsigned __int16 *indices;
  unsigned int visLightsMask;
};

/* 5457 */
struct FxMarkDObjUpdateContext
{
  XModel *models[32];
  const char *modelParentBones[32];
  int modelCount;
  bool isBrush;
  unsigned __int16 brushIndex;
};

/* 5458 */
struct FxEditorElemAtlas
{
  int behavior;
  int index;
  int fps;
  int loopCount;
  int indexRange;
  int colIndexBits;
  int rowIndexBits;
  int entryCount;
};

/* 5459 */
struct FxEditorTrailDef
{
  FxTrailVertex verts[64];
  int vertCount;
  unsigned __int16 inds[128];
  int indCount;
};

/* 5460 */
union $9FF2855F56E2C2CA8A89B9D479040FE1
{
  FxElemVisuals visuals[32];
  FxElemMarkVisuals markVisuals[16];
};

/* 5461 */
struct FxEditorElemDef
{
  char name[256];
  int editorFlags;
  int flags;
  FxFloatRange spawnRange;
  FxFloatRange fadeInRange;
  FxFloatRange fadeOutRange;
  float spawnFrustumCullRadius;
  FxSpawnDefLooping spawnLooping;
  FxSpawnDefOneShot spawnOneShot;
  FxIntRange spawnDelayMsec;
  FxIntRange lifeSpanMsec;
  FxFloatRange spawnOrigin[3];
  FxFloatRange spawnOffsetRadius;
  FxFloatRange spawnOffsetHeight;
  FxFloatRange spawnAngles[3];
  FxFloatRange angularVelocity[3];
  FxFloatRange initialRotation;
  vec4_t rotationAxis;
  FxFloatRange gravity;
  FxFloatRange elasticity;
  FxEditorElemAtlas atlas;
  float timeScale;
  float windInfluence;
  vec3_t velScale[2];
  FxCurve *velShape[2][3][2];
  float rotationScale;
  FxCurve *rotationShape[2];
  float sizeScale[2];
  FxCurve *sizeShape[2][2];
  float scaleScale;
  FxCurve *scaleShape[2];
  FxCurve *color[2];
  FxCurve *alpha[2];
  float lightingFrac;
  vec3_t collOffset;
  float collRadius;
  FxEffectDef *effectOnImpact;
  FxEffectDef *effectOnDeath;
  int sortOrder;
  FxEffectDef *emission;
  FxFloatRange emitDist;
  FxFloatRange emitDistVariance;
  FxEffectDef *attachment;
  char elemType;
  int visualCount;
  $9FF2855F56E2C2CA8A89B9D479040FE1 ___u45;
  int trailSplitDist;
  int trailRepeatDist;
  float trailScrollTime;
  FxEditorTrailDef trailDef;
  int alphaFadeTimeMsec;
  int maxWindMagnitude;
  int spawnIntervalAtMaxWind;
  int lifespanAtMaxWind;
  float billboardTopWidth;
  float billboardBottomWidth;
  FxElemSpawnSound spawnSound;
  FxIntRange cloudDensityRange;
  vec2_t billboardPivot;
  float spotLightFovInnerFraction;
  float spotLightStartRadius;
  float spotLightEndRadius;
};

/* 5462 */
struct FxElemField
{
  const char *keyName;
  bool (__cdecl *handler)(const char **, FxEditorElemDef *);
};

/* 5463 */
struct FxFlagDef
{
  const char *name;
  int flagType;
  int mask;
  int value;
};

/* 5464 */
struct FxEditorEffectDef
{
  char name[64];
  int elemCount;
  unsigned __int16 flags;
  char editorFlags;
  char edPriority;
  vec3_t boundMin;
  vec3_t boundMax;
  vec3_t boundCenter;
  vec3_t boundSize;
  float occlusionQueryDepthBias;
  int occlusionQueryFadeIn;
  int occlusionQueryFadeOut;
  FxFloatRange occlusionQueryScaleRange;
  FxEditorElemDef elems[32];
};

/* 5465 */
struct FxEffectField
{
  const char *keyName;
  bool (__cdecl *handler)(const char **, FxEditorEffectDef *);
};

/* 5466 */
struct $FDC387C7EFDCEAC1BF071AA19A189AB4
{
  int effectDefCount;
  FxEffectDef *effectDefs[512];
  char effectStatus[512];
  FxEffectDef *defaultEffect;
};

/* 5467 */
struct FxFlagOutputSet
{
  int *flags[4];
};

/* 5468 */
union $7F1261B1FE79ADA98C071E6B0F2C311B
{
  vec3_t constantValue;
  vec3_t *sampleValue;
};

/* 5469 */
struct FxGraph3D
{
  int intervalCount;
  $7F1261B1FE79ADA98C071E6B0F2C311B u;
};

/* 5470 */
union $67F8806314ED4E1309359B6E5E5D272E
{
  float constantValue;
  float *sampleValue;
};

/* 5471 */
struct FxGraph1D
{
  int intervalCount;
  $67F8806314ED4E1309359B6E5E5D272E u;
};

/* 5472 */
struct __declspec(align(4)) FxSpriteElemDrawResource
{
  r_double_index_t *baseIndices;
  unsigned __int16 baseVertex;
};

/* 5473 */
struct FxCloudElemDrawResource
{
  unsigned int gfxParticleCloudIndex;
};

/* 5474 */
struct FxTrailElemDrawResource
{
  r_double_index_t *baseIndices;
  unsigned __int16 baseVertex;
  unsigned int vertexCapacity;
  unsigned int indicesCapacity;
  unsigned int numUsedVertex;
  unsigned int numUsedIndices;
};

/* 5475 */
union FxElemDrawSource
{
  FxSpriteElemDrawResource sprite;
  FxCloudElemDrawResource cloud;
  FxTrailElemDrawResource trail;
};

/* 5476 */
struct __declspec(align(4)) FxDrawState
{
  vec3_t rotationAxis[3];
  LocalClientNum_t localClientNum;
  FxEffect *effect;
  FxElem *elem;
  FxElemDef *elemDef;
  unsigned int region;
  FxCamera *camera;
  int msecDraw;
  unsigned int superFlareIndex;
  unsigned int usePreAllocatedResource;
  FxElemDrawSource elemResource_u;
  bool isInfraredDraw;
};

/* 5477 */
struct FxElemSetupCmd
{
  FxSystem *system;
  int effectStart;
  int effectLast;
  FxElemBits *elemDrawBits;
  FxElemRenderState *elemRenderStates;
  int drawTime;
  unsigned int cameraType;
  EffectElemCountInfo *effectElemCountInfo;
  volatile int *effectElemCountInfoIndex;
};

/* 5478 */
struct FxDrawSpriteGeoCmd
{
  EffectElementDraw *effectElemDrawFirst;
  EffectElementDraw *effectElemDrawLast;
  FxElemBits *elemDrawBits;
  FxSystem *system;
  int drawTime;
  FxElemRenderState *elemRenderStates;
  int cameraType;
};

/* 5479 */
struct FxDrawTrailGeoCmd
{
  int trailEffectFirst;
  int trailEffectLast;
  const unsigned __int16 *effectHandles;
  FxDrawTrailResourceRequired *resourceRequiredArray;
  FxDrawTrailResource *resourceArray;
  FxSystem *system;
  int drawTime;
  unsigned int cameraType;
};

/* 5480 */
struct FxTrailSegmentDrawState
{
  FxTrailDef *trailDef;
  vec3_t posWorld;
  vec3_t basis[2];
  float rotation;
  float size[2];
  float uCoord;
  char color[4];
};

/* 5481 */
struct __declspec(align(4)) FxMarksCmd
{
  FxSystem *system;
  GfxLight *visibleLights;
  int visibleLightCount;
  LocalClientNum_t localClientNum;
  char updateCameraType;
};

/* 5482 */
struct FxEffectDefTableEntry
{
  unsigned int key;
  FxEffectDef *effectDef;
};

/* 5483 */
struct FxEffectDefTable
{
  int count;
  FxEffectDefTableEntry entries[1024];
};

/* 5484 */
struct __declspec(align(4)) DynEntSortStruct
{
  float distSq;
  unsigned __int16 id;
};

/* 5485 */
struct std::_Pair_base<DynEntSortStruct *,DynEntSortStruct *>
{
  DynEntSortStruct *first;
  DynEntSortStruct *second;
};

/* 5486 */
struct __cppobj std::pair<DynEntSortStruct *,DynEntSortStruct *> : std::_Pair_base<DynEntSortStruct *,DynEntSortStruct *>
{
};

/* 5487 */
struct DynEntityCollTree
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 5488 */
struct __declspec(align(4)) DynEntityCollSector
{
  DynEntityCollTree tree;
  int contents;
  unsigned __int16 entListHead;
};

/* 5489 */
struct __declspec(align(2)) BreakablePiece
{
  XModel *model;
  int physObjId;
  unsigned __int16 lightingHandle;
  bool active;
};

/* 5490 */
struct node_params_t
{
  char classname[64];
  char targetname[64];
  unsigned __int16 targetname_hash;
  char target[64];
  char target2[64];
  vec3_t origin;
  vec3_t angles;
  int used;
};

/* 5491 */
struct __declspec(align(4)) DynEntityCreateParams
{
  char typeName[64];
  char modelName[64];
  char physModelName[64];
  char destroyFxFile[64];
  char destroySound[64];
  char destroyPiecesFile[64];
  char physPresetFile[64];
  char targetname[64];
  char target[64];
  char destroyedModelName[64];
  vec3_t origin;
  vec3_t angles;
  int health;
  float mass;
  float bounce;
  float friction;
  vec3_t centerOfMass;
  bool startInPhysics;
  bool autoActivate;
  bool noBulletDamage;
  bool noExplosiveDamage;
  bool alwaysFloats;
};

/* 5492 */
struct DynEntityConstraintCreateParams
{
  char classname[64];
  char targetname[64];
  char target[64];
  char target2[64];
  vec3_t origin;
  vec3_t origin2;
  vec3_t angles;
  int health;
  float minAngle;
  float maxAngle;
  float damp;
  float distance;
  float scale;
  float force_scale;
  float width;
  int spawnflags;
  float timeout;
  char materialname[64];
};

/* 5493 */
struct DynEntityCollWorld
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 freeHead;
  DynEntityCollSector sectors[1024];
};

/* 5494 */
struct DynEnt_FadeData
{
  unsigned __int16 id;
  int startTime;
};

/* 5495 */
struct DynEnt_BurnData
{
  unsigned __int16 id;
  unsigned int fx;
};

/* 5496 */
struct __cppobj __declspec(align(4)) PublicProfileInfo : bdProfileInfo
{
  int m_memberVERSION;
  char m_memberddl[1025];
};

/* 5497 */
struct matchSummaryWeaponStatHash_t
{
  int statNameHash;
  int limit;
  char statName[16];
};

/* 5498 */
struct zombieWeaponStatHashMap_t
{
  int weaponNameHash;
  int weaponStatIndex;
};

/* 5499 */
struct dwUCDGetUserDetailsTask
{
  bdUCDAccountInfo *ucdAccountInfo;
  const char *accountName;
  const char *password;
};

/* 5500 */
struct dwUCDUpdateUserDetailsTask
{
  bdUCDAccountInfo *ucdAccountInfo;
  const char *password;
  bdBoolResult result;
};

/* 5501 */
struct dwGetUCDRegistrationTask
{
  bdUCDAccountStatus *ucdAccountStatus;
};

/* 5502 */
struct dwUCDUpdateMarketingOptInTask
{
  bool shouldOptIn;
  bdBoolResult result;
};

/* 5503 */
struct dwCreateUCDAccountTask
{
  bdUCDAccountInfo *ucdAccountInfo;
  const char *password;
  bdUCDAccountID ucdAccountID;
};

/* 5504 */
struct dwGetUserInfoTask
{
  unsigned __int64 *userIDs;
  int numUserIDs;
  bdUserInfo *outUserInfos;
  void (__cdecl *successCallback)(ControllerIndex_t);
  void (__cdecl *failureCallback)(ControllerIndex_t);
};

/* 5505 */
struct __declspec(align(8)) PlayerRank
{
  unsigned __int64 xuid;
  int rank;
};

/* 5506 */
struct CommonAddrGroup
{
  bdSecurityID securityID;
  bool active;
  unsigned int useCount;
};

/* 5507 */
struct CommonAddr
{
  int groupIndex;
  unsigned int useCount;
  bdReference<bdCommonAddr> addr;
};

/* 5508 */
struct __cppobj dwLobbyEventHandler : bdLobbyEventHandler
{
  ControllerIndex_t m_controllerIndex;
};

/* 5509 */
struct __cppobj __declspec(align(2)) bdPS3AuthInfo : bdReferencable
{
  char m_region[4];
  char m_domain[4];
  bool m_AVChatAvailability;
  bool m_ContentRatingEnabled;
  char m_age;
};

/* 5510 */
struct DevGuiInput
{
  ControllerIndex_t selectedGamePadIndex;
  ControllerIndex_t gamePadIndex;
  float mousePos[2];
  bool buttonDown[13];
  bool prevButtonDown[13];
  float scrollScale;
  DevGuiInputState digitalStates[2];
  float digitalAxis[2];
  float digitalTimes[2];
  DevGuiInputState analogStates[2];
  float analogAxis[2];
  float analogTimes[2];
  __int16 menuScroll[2];
  float menuScrollTime[2];
  float digitalSliderTime;
  float analogSliderTime;
  float sliderScrollTime;
  float sliderScrollMaxTimeStep;
};

/* 5511 */
union DevMenuChild
{
  const char *command;
  dvar_t *dvar;
  DevGraph *graph;
  unsigned __int16 menu;
};

/* 5512 */
struct DevMenuItem
{
  char label[26];
  char childType;
  char childMenuMemory;
  __int16 sortKey;
  unsigned __int16 nextSibling;
  unsigned __int16 prevSibling;
  unsigned __int16 parent;
  DevMenuChild child;
};

/* 5513 */
struct devguiGlob_t
{
  DevMenuItem menus[2048];
  DevMenuItem *nextFreeMenu;
  DevMenuItem topmostMenu;
  bool bindNextKey;
  bool isActive;
  bool isInitialized;
  bool editingMenuItem;
  unsigned __int16 selectedMenu;
  int selRow;
  bool editingKnot;
  int top;
  int bottom;
  int left;
  int right;
  int sliderWidth;
  int textLabelWidth;
};

/* 5514 */
struct ECRYPT_ctx
{
  unsigned int input[16];
  char output[64];
  unsigned int cont;
};

/* 5515 */
struct ScriptStringList
{
  int count;
  const char **strings;
};

/* 5516 */
struct XAsset
{
  XAssetType type;
  XAssetHeader header;
};

/* 5517 */
struct XAssetList
{
  ScriptStringList stringList;
  int dependCount;
  const char **depends;
  int assetCount;
  XAsset *assets;
};

/* 5518 */
struct StreamDelayInfo
{
  const void *ptr;
  int size;
};

/* 5519 */
struct XBlock
{
  char *data;
  unsigned int size;
};

/* 5520 */
struct StreamPosInfo
{
  char *pos;
  unsigned int index;
};

/* 5521 */
union XAssetPoolEntry<AddonMapEnts>
{
  AddonMapEnts entry;
  XAssetPoolEntry<AddonMapEnts> *next;
};

/* 5522 */
struct XAssetPool<AddonMapEnts,1>
{
  XAssetPoolEntry<AddonMapEnts> *freeHead;
  XAssetPoolEntry<AddonMapEnts> entries[1];
};

/* 5523 */
union XAssetPoolEntry<TracerDef>
{
  TracerDef entry;
  XAssetPoolEntry<TracerDef> *next;
};

/* 5524 */
struct XAssetPool<TracerDef,50>
{
  XAssetPoolEntry<TracerDef> *freeHead;
  XAssetPoolEntry<TracerDef> entries[50];
};

/* 5525 */
struct XAssetEntry
{
  XAsset asset;
  char zoneIndex;
  bool inuse;
  unsigned __int16 nextHash;
  unsigned __int16 nextOverride;
  unsigned __int16 usageFrame;
};

/* 5526 */
union XAssetPoolEntry<SkinnedVertsDef>
{
  SkinnedVertsDef entry;
  XAssetPoolEntry<SkinnedVertsDef> *next;
};

/* 5527 */
struct XAssetPool<SkinnedVertsDef,1>
{
  XAssetPoolEntry<SkinnedVertsDef> *freeHead;
  XAssetPoolEntry<SkinnedVertsDef> entries[1];
};

/* 5528 */
union XAssetPoolEntry<XModelPieces>
{
  XModelPieces entry;
  XAssetPoolEntry<XModelPieces> *next;
};

/* 5529 */
struct XAssetPool<XModelPieces,64>
{
  XAssetPoolEntry<XModelPieces> *freeHead;
  XAssetPoolEntry<XModelPieces> entries[64];
};

/* 5530 */
union XAssetPoolEntry<Qdb>
{
  Qdb entry;
  XAssetPoolEntry<Qdb> *next;
};

/* 5531 */
struct XAssetPool<Qdb,4>
{
  XAssetPoolEntry<Qdb> *freeHead;
  XAssetPoolEntry<Qdb> entries[4];
};

/* 5532 */
union XAssetPoolEntry<PhysPreset>
{
  PhysPreset entry;
  XAssetPoolEntry<PhysPreset> *next;
};

/* 5533 */
struct XAssetPool<PhysPreset,65>
{
  XAssetPoolEntry<PhysPreset> *freeHead;
  XAssetPoolEntry<PhysPreset> entries[65];
};

/* 5534 */
union XAssetPoolEntry<Slug>
{
  Slug entry;
  XAssetPoolEntry<Slug> *next;
};

/* 5535 */
struct XAssetPool<Slug,5>
{
  XAssetPoolEntry<Slug> *freeHead;
  XAssetPoolEntry<Slug> entries[5];
};

/* 5536 */
union XAssetPoolEntry<PhysConstraints>
{
  PhysConstraints entry;
  XAssetPoolEntry<PhysConstraints> *next;
};

/* 5537 */
struct XAssetPool<PhysConstraints,64>
{
  XAssetPoolEntry<PhysConstraints> *freeHead;
  XAssetPoolEntry<PhysConstraints> entries[64];
};

/* 5538 */
union XAssetPoolEntry<FootstepTableDef>
{
  FootstepTableDef entry;
  XAssetPoolEntry<FootstepTableDef> *next;
};

/* 5539 */
struct XAssetPool<FootstepTableDef,32>
{
  XAssetPoolEntry<FootstepTableDef> *freeHead;
  XAssetPoolEntry<FootstepTableDef> entries[32];
};

/* 5540 */
union XAssetPoolEntry<XAnimParts>
{
  XAnimParts entry;
  XAssetPoolEntry<XAnimParts> *next;
};

/* 5541 */
struct XAssetPool<XAnimParts,5200>
{
  XAssetPoolEntry<XAnimParts> *freeHead;
  XAssetPoolEntry<XAnimParts> entries[5200];
};

/* 5542 */
union XAssetPoolEntry<FootstepFXTableDef>
{
  FootstepFXTableDef entry;
  XAssetPoolEntry<FootstepFXTableDef> *next;
};

/* 5543 */
struct XAssetPool<FootstepFXTableDef,4>
{
  XAssetPoolEntry<FootstepFXTableDef> *freeHead;
  XAssetPoolEntry<FootstepFXTableDef> entries[4];
};

/* 5544 */
union XAssetPoolEntry<XModel>
{
  XModel entry;
  XAssetPoolEntry<XModel> *next;
};

/* 5545 */
struct XAssetPool<XModel,1400>
{
  XAssetPoolEntry<XModel> *freeHead;
  XAssetPoolEntry<XModel> entries[1400];
};

/* 5546 */
union XAssetPoolEntry<ZBarrierDef>
{
  ZBarrierDef entry;
  XAssetPoolEntry<ZBarrierDef> *next;
};

/* 5547 */
struct XAssetPool<ZBarrierDef,16>
{
  XAssetPoolEntry<ZBarrierDef> *freeHead;
  XAssetPoolEntry<ZBarrierDef> entries[16];
};

/* 5548 */
union XAssetEntryPoolEntry
{
  XAssetEntry entry;
  XAssetEntryPoolEntry *next;
};

/* 5549 */
struct XZoneName
{
  char name[64];
  int flags;
  int fileSize;
  XZoneState state;
};

/* 5550 */
struct XZone
{
  unsigned __int16 index;
  int flags;
  XBlock blocks[8];
};

/* 5551 */
union XAssetPoolEntry<Material>
{
  Material entry;
  XAssetPoolEntry<Material> *next;
};

/* 5552 */
struct XAssetPool<Material,4992>
{
  XAssetPoolEntry<Material> *freeHead;
  XAssetPoolEntry<Material> entries[4992];
};

/* 5553 */
struct XZoneInfoInternal
{
  char name[64];
  int flags;
};

/* 5554 */
union XAssetPoolEntry<MaterialTechniqueSet>
{
  MaterialTechniqueSet entry;
  XAssetPoolEntry<MaterialTechniqueSet> *next;
};

/* 5555 */
struct XAssetPool<MaterialTechniqueSet,2048>
{
  XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
  XAssetPoolEntry<MaterialTechniqueSet> entries[2048];
};

/* 5556 */
union XAssetPoolEntry<GfxImage>
{
  GfxImage entry;
  XAssetPoolEntry<GfxImage> *next;
};

/* 5557 */
struct XAssetPool<GfxImage,5312>
{
  XAssetPoolEntry<GfxImage> *freeHead;
  XAssetPoolEntry<GfxImage> entries[5312];
};

/* 5558 */
union XAssetPoolEntry<SndBank>
{
  SndBank entry;
  XAssetPoolEntry<SndBank> *next;
};

/* 5559 */
struct XAssetPool<SndBank,32>
{
  XAssetPoolEntry<SndBank> *freeHead;
  XAssetPoolEntry<SndBank> entries[32];
};

/* 5560 */
union XAssetPoolEntry<SndAliasList>
{
  SndAliasList entry;
  XAssetPoolEntry<SndAliasList> *next;
};

/* 5561 */
struct XAssetPool<SndAliasList,16>
{
  XAssetPoolEntry<SndAliasList> *freeHead;
  XAssetPoolEntry<SndAliasList> entries[16];
};

/* 5562 */
union XAssetPoolEntry<MapEnts>
{
  MapEnts entry;
  XAssetPoolEntry<MapEnts> *next;
};

/* 5563 */
struct XAssetPool<MapEnts,2>
{
  XAssetPoolEntry<MapEnts> *freeHead;
  XAssetPoolEntry<MapEnts> entries[2];
};

/* 5564 */
union XAssetPoolEntry<GfxLightDef>
{
  GfxLightDef entry;
  XAssetPoolEntry<GfxLightDef> *next;
};

/* 5565 */
struct XAssetPool<GfxLightDef,32>
{
  XAssetPoolEntry<GfxLightDef> *freeHead;
  XAssetPoolEntry<GfxLightDef> entries[32];
};

/* 5566 */
union XAssetPoolEntry<Font_s>
{
  Font_s entry;
  XAssetPoolEntry<Font_s> *next;
};

/* 5567 */
struct XAssetPool<Font_s,16>
{
  XAssetPoolEntry<Font_s> *freeHead;
  XAssetPoolEntry<Font_s> entries[16];
};

/* 5568 */
union XAssetPoolEntry<MenuList>
{
  MenuList entry;
  XAssetPoolEntry<MenuList> *next;
};

/* 5569 */
struct XAssetPool<MenuList,164>
{
  XAssetPoolEntry<MenuList> *freeHead;
  XAssetPoolEntry<MenuList> entries[164];
};

/* 5570 */
union XAssetPoolEntry<menuDef_t>
{
  menuDef_t entry;
  XAssetPoolEntry<menuDef_t> *next;
};

/* 5571 */
struct XAssetPool<menuDef_t,450>
{
  XAssetPoolEntry<menuDef_t> *freeHead;
  XAssetPoolEntry<menuDef_t> entries[450];
};

/* 5572 */
union XAssetPoolEntry<LocalizeEntry>
{
  LocalizeEntry entry;
  XAssetPoolEntry<LocalizeEntry> *next;
};

/* 5573 */
struct XAssetPool<LocalizeEntry,14336>
{
  XAssetPoolEntry<LocalizeEntry> *freeHead;
  XAssetPoolEntry<LocalizeEntry> entries[14336];
};

/* 5574 */
union XAssetPoolEntry<DestructibleDef>
{
  DestructibleDef entry;
  XAssetPoolEntry<DestructibleDef> *next;
};

/* 5575 */
struct XAssetPool<DestructibleDef,64>
{
  XAssetPoolEntry<DestructibleDef> *freeHead;
  XAssetPoolEntry<DestructibleDef> entries[64];
};

/* 5576 */
union XAssetPoolEntry<WeaponVariantDef>
{
  WeaponVariantDef entry;
  XAssetPoolEntry<WeaponVariantDef> *next;
};

/* 5577 */
struct XAssetPool<WeaponVariantDef,256>
{
  XAssetPoolEntry<WeaponVariantDef> *freeHead;
  XAssetPoolEntry<WeaponVariantDef> entries[256];
};

/* 5578 */
union XAssetPoolEntry<WeaponAttachment>
{
  WeaponAttachment entry;
  XAssetPoolEntry<WeaponAttachment> *next;
};

/* 5579 */
struct XAssetPool<WeaponAttachment,128>
{
  XAssetPoolEntry<WeaponAttachment> *freeHead;
  XAssetPoolEntry<WeaponAttachment> entries[128];
};

/* 5580 */
union XAssetPoolEntry<WeaponAttachmentUnique>
{
  WeaponAttachmentUnique entry;
  XAssetPoolEntry<WeaponAttachmentUnique> *next;
};

/* 5581 */
struct XAssetPool<WeaponAttachmentUnique,2048>
{
  XAssetPoolEntry<WeaponAttachmentUnique> *freeHead;
  XAssetPoolEntry<WeaponAttachmentUnique> entries[2048];
};

/* 5582 */
union XAssetPoolEntry<WeaponCamo>
{
  WeaponCamo entry;
  XAssetPoolEntry<WeaponCamo> *next;
};

/* 5583 */
struct XAssetPool<WeaponCamo,128>
{
  XAssetPoolEntry<WeaponCamo> *freeHead;
  XAssetPoolEntry<WeaponCamo> entries[128];
};

/* 5584 */
union XAssetPoolEntry<SndDriverGlobals>
{
  SndDriverGlobals entry;
  XAssetPoolEntry<SndDriverGlobals> *next;
};

/* 5585 */
struct XAssetPool<SndDriverGlobals,1>
{
  XAssetPoolEntry<SndDriverGlobals> *freeHead;
  XAssetPoolEntry<SndDriverGlobals> entries[1];
};

/* 5586 */
union XAssetPoolEntry<FxEffectDef>
{
  FxEffectDef entry;
  XAssetPoolEntry<FxEffectDef> *next;
};

/* 5587 */
struct XAssetPool<FxEffectDef,600>
{
  XAssetPoolEntry<FxEffectDef> *freeHead;
  XAssetPoolEntry<FxEffectDef> entries[600];
};

/* 5588 */
struct DBReorderAssetEntry
{
  unsigned int sequence;
  int type;
  const char *typeString;
  const char *assetName;
};

/* 5589 */
struct $500AF806CDBAFE31A6FC78AE09B86865
{
  FastCriticalSection critSect;
  char zoneName[256];
  bool alreadyFinished;
  bool loadedSound;
  bool loadedLocalization;
  DBReorderAssetEntry *lastEntry;
  unsigned int sequence;
  unsigned int sequenceForIncludes;
  unsigned int entryCount;
  DBReorderAssetEntry entries[38400];
};

/* 5590 */
union XAssetPoolEntry<FxImpactTable>
{
  FxImpactTable entry;
  XAssetPoolEntry<FxImpactTable> *next;
};

/* 5591 */
struct XAssetPool<FxImpactTable,4>
{
  XAssetPoolEntry<FxImpactTable> *freeHead;
  XAssetPoolEntry<FxImpactTable> entries[4];
};

/* 5592 */
union XAssetPoolEntry<RawFile>
{
  RawFile entry;
  XAssetPoolEntry<RawFile> *next;
};

/* 5593 */
struct XAssetPool<RawFile,1024>
{
  XAssetPoolEntry<RawFile> *freeHead;
  XAssetPoolEntry<RawFile> entries[1024];
};

/* 5594 */
union XAssetPoolEntry<StringTable>
{
  StringTable entry;
  XAssetPoolEntry<StringTable> *next;
};

/* 5595 */
struct XAssetPool<StringTable,96>
{
  XAssetPoolEntry<StringTable> *freeHead;
  XAssetPoolEntry<StringTable> entries[96];
};

/* 5596 */
union XAssetPoolEntry<LeaderboardDef>
{
  LeaderboardDef entry;
  XAssetPoolEntry<LeaderboardDef> *next;
};

/* 5597 */
struct XAssetPool<LeaderboardDef,128>
{
  XAssetPoolEntry<LeaderboardDef> *freeHead;
  XAssetPoolEntry<LeaderboardDef> entries[128];
};

/* 5598 */
union XAssetPoolEntry<XGlobals>
{
  XGlobals entry;
  XAssetPoolEntry<XGlobals> *next;
};

/* 5599 */
struct XAssetPool<XGlobals,1>
{
  XAssetPoolEntry<XGlobals> *freeHead;
  XAssetPoolEntry<XGlobals> entries[1];
};

/* 5600 */
union XAssetPoolEntry<ddlDef_t>
{
  ddlDef_t entry;
  XAssetPoolEntry<ddlDef_t> *next;
};

/* 5601 */
struct XAssetPool<ddlDef_t,24>
{
  XAssetPoolEntry<ddlDef_t> *freeHead;
  XAssetPoolEntry<ddlDef_t> entries[24];
};

/* 5602 */
union XAssetPoolEntry<Glasses>
{
  Glasses entry;
  XAssetPoolEntry<Glasses> *next;
};

/* 5603 */
struct XAssetPool<Glasses,1>
{
  XAssetPoolEntry<Glasses> *freeHead;
  XAssetPoolEntry<Glasses> entries[1];
};

/* 5604 */
union XAssetPoolEntry<EmblemSet>
{
  EmblemSet entry;
  XAssetPoolEntry<EmblemSet> *next;
};

/* 5605 */
struct XAssetPool<EmblemSet,4>
{
  XAssetPoolEntry<EmblemSet> *freeHead;
  XAssetPoolEntry<EmblemSet> entries[4];
};

/* 5606 */
union XAssetPoolEntry<ScriptParseTree>
{
  ScriptParseTree entry;
  XAssetPoolEntry<ScriptParseTree> *next;
};

/* 5607 */
struct XAssetPool<ScriptParseTree,1024>
{
  XAssetPoolEntry<ScriptParseTree> *freeHead;
  XAssetPoolEntry<ScriptParseTree> entries[1024];
};

/* 5608 */
struct ZONE_PATCH_VERSION
{
  const char *name;
  int version;
};

/* 5609 */
union XAssetPoolEntry<KeyValuePairs>
{
  KeyValuePairs entry;
  XAssetPoolEntry<KeyValuePairs> *next;
};

/* 5610 */
struct XAssetPool<KeyValuePairs,64>
{
  XAssetPoolEntry<KeyValuePairs> *freeHead;
  XAssetPoolEntry<KeyValuePairs> entries[64];
};

/* 5611 */
union XAssetPoolEntry<VehicleDef>
{
  VehicleDef entry;
  XAssetPoolEntry<VehicleDef> *next;
};

/* 5612 */
struct XAssetPool<VehicleDef,32>
{
  XAssetPoolEntry<VehicleDef> *freeHead;
  XAssetPoolEntry<VehicleDef> entries[32];
};

/* 5613 */
union XAssetPoolEntry<MemoryBlock>
{
  MemoryBlock entry;
  XAssetPoolEntry<MemoryBlock> *next;
};

/* 5614 */
struct XAssetPool<MemoryBlock,16>
{
  XAssetPoolEntry<MemoryBlock> *freeHead;
  XAssetPoolEntry<MemoryBlock> entries[16];
};

/* 5615 */
struct XAssetPool<menuDef_t,1>
{
  XAssetPoolEntry<menuDef_t> *freeHead;
  XAssetPoolEntry<menuDef_t> entries[1];
};

/* 5616 */
struct XAssetPool<FxEffectDef,1>
{
  XAssetPoolEntry<FxEffectDef> *freeHead;
  XAssetPoolEntry<FxEffectDef> entries[1];
};

/* 5617 */
union XAssetPoolEntry<SndPatch>
{
  SndPatch entry;
  XAssetPoolEntry<SndPatch> *next;
};

/* 5618 */
struct XAssetPool<SndPatch,1>
{
  XAssetPoolEntry<SndPatch> *freeHead;
  XAssetPoolEntry<SndPatch> entries[1];
};

/* 5619 */
struct XAssetPool<DestructibleDef,1>
{
  XAssetPoolEntry<DestructibleDef> *freeHead;
  XAssetPoolEntry<DestructibleDef> entries[1];
};

/* 5620 */
union XAssetPoolEntry<ddlRoot_t>
{
  ddlRoot_t entry;
  XAssetPoolEntry<ddlRoot_t> *next;
};

/* 5621 */
struct std::_Pair_base<XZoneInfo *,XZoneInfo *>
{
  XZoneInfo *first;
  XZoneInfo *second;
};

/* 5622 */
struct std::_Pair_base<DBReorderAssetEntry *,DBReorderAssetEntry *>
{
  DBReorderAssetEntry *first;
  DBReorderAssetEntry *second;
};

/* 5623 */
struct __cppobj std::pair<DBReorderAssetEntry *,DBReorderAssetEntry *> : std::_Pair_base<DBReorderAssetEntry *,DBReorderAssetEntry *>
{
};

/* 5624 */
struct __cppobj std::pair<XZoneInfo *,XZoneInfo *> : std::_Pair_base<XZoneInfo *,XZoneInfo *>
{
};

/* 5625 */
struct XAssetPool<TracerDef,1>
{
  XAssetPoolEntry<TracerDef> *freeHead;
  XAssetPoolEntry<TracerDef> entries[1];
};

/* 5626 */
struct XAssetPool<ddlRoot_t,1>
{
  XAssetPoolEntry<ddlRoot_t> *freeHead;
  XAssetPoolEntry<ddlRoot_t> entries[1];
};

/* 5627 */
struct XAssetPool<FxImpactTable,1>
{
  XAssetPoolEntry<FxImpactTable> *freeHead;
  XAssetPoolEntry<FxImpactTable> entries[1];
};

/* 5628 */
union XAssetPoolEntry<FontIcon>
{
  FontIcon entry;
  XAssetPoolEntry<FontIcon> *next;
};

/* 5629 */
struct XAssetPool<MemoryBlock,1>
{
  XAssetPoolEntry<MemoryBlock> *freeHead;
  XAssetPoolEntry<MemoryBlock> entries[1];
};

/* 5630 */
struct XAssetPool<ddlDef_t,1>
{
  XAssetPoolEntry<ddlDef_t> *freeHead;
  XAssetPoolEntry<ddlDef_t> entries[1];
};

/* 5631 */
struct XAssetPool<XModel,1>
{
  XAssetPoolEntry<XModel> *freeHead;
  XAssetPoolEntry<XModel> entries[1];
};

/* 5632 */
struct XAssetPool<MenuList,1>
{
  XAssetPoolEntry<MenuList> *freeHead;
  XAssetPoolEntry<MenuList> entries[1];
};

/* 5633 */
struct XAssetPool<StringTable,1>
{
  XAssetPoolEntry<StringTable> *freeHead;
  XAssetPoolEntry<StringTable> entries[1];
};

/* 5634 */
struct XAssetPool<PhysConstraints,1>
{
  XAssetPoolEntry<PhysConstraints> *freeHead;
  XAssetPoolEntry<PhysConstraints> entries[1];
};

/* 5635 */
struct XAssetPool<KeyValuePairs,1>
{
  XAssetPoolEntry<KeyValuePairs> *freeHead;
  XAssetPoolEntry<KeyValuePairs> entries[1];
};

/* 5636 */
struct XAssetPool<Font_s,1>
{
  XAssetPoolEntry<Font_s> *freeHead;
  XAssetPoolEntry<Font_s> entries[1];
};

/* 5637 */
struct XAssetPool<FontIcon,1>
{
  XAssetPoolEntry<FontIcon> *freeHead;
  XAssetPoolEntry<FontIcon> entries[1];
};

/* 5638 */
struct XAssetPool<FootstepFXTableDef,1>
{
  XAssetPoolEntry<FootstepFXTableDef> *freeHead;
  XAssetPoolEntry<FootstepFXTableDef> entries[1];
};

/* 5639 */
struct XAssetPool<LocalizeEntry,1>
{
  XAssetPoolEntry<LocalizeEntry> *freeHead;
  XAssetPoolEntry<LocalizeEntry> entries[1];
};

/* 5640 */
struct XAssetPool<SndBank,1>
{
  XAssetPoolEntry<SndBank> *freeHead;
  XAssetPoolEntry<SndBank> entries[1];
};

/* 5641 */
struct XAssetPool<ZBarrierDef,1>
{
  XAssetPoolEntry<ZBarrierDef> *freeHead;
  XAssetPoolEntry<ZBarrierDef> entries[1];
};

/* 5642 */
struct XAssetPool<WeaponAttachmentUnique,1>
{
  XAssetPoolEntry<WeaponAttachmentUnique> *freeHead;
  XAssetPoolEntry<WeaponAttachmentUnique> entries[1];
};

/* 5643 */
struct XAssetPool<MaterialTechniqueSet,1>
{
  XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
  XAssetPoolEntry<MaterialTechniqueSet> entries[1];
};

/* 5644 */
struct XAssetPool<Slug,1>
{
  XAssetPoolEntry<Slug> *freeHead;
  XAssetPoolEntry<Slug> entries[1];
};

/* 5645 */
struct XAssetPool<RawFile,1>
{
  XAssetPoolEntry<RawFile> *freeHead;
  XAssetPoolEntry<RawFile> entries[1];
};

/* 5646 */
struct XAssetPool<WeaponAttachment,1>
{
  XAssetPoolEntry<WeaponAttachment> *freeHead;
  XAssetPoolEntry<WeaponAttachment> entries[1];
};

/* 5647 */
struct XAssetPool<GfxLightDef,1>
{
  XAssetPoolEntry<GfxLightDef> *freeHead;
  XAssetPoolEntry<GfxLightDef> entries[1];
};

/* 5648 */
struct XAssetPool<LeaderboardDef,1>
{
  XAssetPoolEntry<LeaderboardDef> *freeHead;
  XAssetPoolEntry<LeaderboardDef> entries[1];
};

/* 5649 */
struct XAssetPool<VehicleDef,1>
{
  XAssetPoolEntry<VehicleDef> *freeHead;
  XAssetPoolEntry<VehicleDef> entries[1];
};

/* 5650 */
struct XAssetPool<Qdb,1>
{
  XAssetPoolEntry<Qdb> *freeHead;
  XAssetPoolEntry<Qdb> entries[1];
};

/* 5651 */
struct XAssetPool<FootstepTableDef,1>
{
  XAssetPoolEntry<FootstepTableDef> *freeHead;
  XAssetPoolEntry<FootstepTableDef> entries[1];
};

/* 5652 */
struct XAssetPool<WeaponCamo,1>
{
  XAssetPoolEntry<WeaponCamo> *freeHead;
  XAssetPoolEntry<WeaponCamo> entries[1];
};

/* 5653 */
struct XAssetPool<MapEnts,1>
{
  XAssetPoolEntry<MapEnts> *freeHead;
  XAssetPoolEntry<MapEnts> entries[1];
};

/* 5654 */
struct XAssetPool<Material,1>
{
  XAssetPoolEntry<Material> *freeHead;
  XAssetPoolEntry<Material> entries[1];
};

/* 5655 */
struct XAssetPool<XModelPieces,1>
{
  XAssetPoolEntry<XModelPieces> *freeHead;
  XAssetPoolEntry<XModelPieces> entries[1];
};

/* 5656 */
struct XAssetPool<WeaponVariantDef,1>
{
  XAssetPoolEntry<WeaponVariantDef> *freeHead;
  XAssetPoolEntry<WeaponVariantDef> entries[1];
};

/* 5657 */
struct XAssetPool<PhysPreset,1>
{
  XAssetPoolEntry<PhysPreset> *freeHead;
  XAssetPoolEntry<PhysPreset> entries[1];
};

/* 5658 */
struct XAssetPool<XAnimParts,1>
{
  XAssetPoolEntry<XAnimParts> *freeHead;
  XAssetPoolEntry<XAnimParts> entries[1];
};

/* 5659 */
struct XAssetPool<ScriptParseTree,1>
{
  XAssetPoolEntry<ScriptParseTree> *freeHead;
  XAssetPoolEntry<ScriptParseTree> entries[1];
};

/* 5660 */
struct XAssetPool<GfxImage,1>
{
  XAssetPoolEntry<GfxImage> *freeHead;
  XAssetPoolEntry<GfxImage> entries[1];
};

/* 5661 */
struct XAssetPool<EmblemSet,1>
{
  XAssetPoolEntry<EmblemSet> *freeHead;
  XAssetPoolEntry<EmblemSet> entries[1];
};

/* 5662 */
struct ShaderStats
{
  char cost;
  char ALU;
  char vertex;
  char texture;
  char sequencer;
  char interpolator;
  char GPR;
  char threads;
};

/* 5663 */
struct GfxPackedVertexQuant
{
  __int16 xyz[3];
  __int16 binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 5664 */
struct GfxPosColorVertex
{
  vec3_t xyz;
  GfxColor color;
};

/* 5665 */
struct GfxPosFP16TexVertex
{
  vec3_t xyz;
  PackedTexCoords texCoord;
};

/* 5666 */
struct CollisionBorder
{
  vec3_t distEq;
  float zBase;
  float zSlope;
  float start;
  float length;
};

/* 5667 */
struct ClientTriggerAabbNode
{
  Bounds bounds;
  unsigned __int16 firstChild;
  unsigned __int16 childCount;
};

/* 5668 */
struct FxInt16Range
{
  __int16 base;
  __int16 amplitude;
};

/* 5669 */
struct FxInt8Range
{
  char base;
  char amplitude;
};

/* 5670 */
struct ClientTriggers
{
  MapTriggers trigger;
  unsigned __int16 numClientTriggerNodes;
  ClientTriggerAabbNode *clientTriggerAabbTree;
  unsigned int triggerStringLength;
  char *triggerString;
  unsigned __int16 *triggerStringOffsets;
  char *triggerType;
  vec3_t *origins;
  float *scriptDelay;
  __int16 *audioTriggers;
};

/* 5671 */
struct GfxReflectionProbeStreamPart
{
  vec3_t mins;
  float himipRadiusInvSq;
  vec3_t maxs;
};

/* 5672 */
struct ColVert
{
  vec3_t xyz;
  float unused;
};

/* 5673 */
struct XSurfaceSection
{
  unsigned __int16 minVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 triCount;
  unsigned __int16 triCountNoCull;
};

/* 5674 */
struct udec4
{
  $CD165E0682C8F9729DA9385DFBEF1ADF ___u0;
};

/* 5675 */
struct dec4
{
  $BD75FBFB9D003863D55F338AACE375C8 ___u0;
};

/* 5676 */
struct nrm3_10_11_11
{
  $F3803C64C75C952D6DFB80C5E56CD3FA ___u0;
};

/* 5677 */
struct GfxPosTexVertex
{
  vec3_t xyz;
  vec2_t texCoord;
};

/* 5678 */
union PackedLightingCoords
{
  unsigned int packed;
  char array[4];
};

/* 5679 */
struct __declspec(align(128)) DB_LOAD_STREAM
{
  char decompressedData[32768];
  char checksum[32];
  char *compressedData;
  int compressedDataAvail;
  int decompressedDataAvail;
  int decompressedDataOffset;
  bool busy;
};

/* 5680 */
struct DBDecompressCmd_t
{
  int which;
  DB_LOAD_STREAM *stream;
  char *ioBuffer;
  char iv[8];
};

/* 5681 */
struct __declspec(align(128)) DB_LoadData
{
  int f;
  const char *filename;
  XBlock *blocks;
  int flags;
  void (__cdecl *interrupt)();
  int allocType;
  unsigned __int64 readOffset;
  unsigned __int64 endOffset;
  char *ioBuffer;
  int ioBufferOffset;
  char *compressData;
  int tail;
  int head;
  DBDecompressCmd_t cmd[4];
  DB_LOAD_STREAM stream[4];
  int next_buffer;
  int locks[4];
  bool loadPending[4];
  bool abort;
  int requiredVersion;
  int lastError;
  int startTime;
};

/* 5682 */
struct XFile
{
  unsigned int size;
  unsigned int externalSize;
  unsigned int blockSize[8];
};

/* 5683 */
struct SHA1_CTX
{
  unsigned int state[5];
  unsigned int count[2];
  char buffer[64];
};

/* 5684 */
union SHA1_Transform::__l2::CHAR64LONG16
{
  char c[64];
  unsigned int l[16];
};

/* 5685 */
struct __declspec(align(4)) tsVote_t
{
  SubpartyInfo *party;
  int bid;
  bool valid;
};

/* 5686 */
struct tsTeam_t
{
  int id;
  int partyCount;
  float skill;
  SubpartyInfo *parties[18];
  tsVote_t vote;
};

/* 5687 */
struct ErrorMap
{
  const char *partyMessage;
  const char *errorMessage;
};

/* 5688 */
struct std::_Pair_base<PartyInfo *,PartyInfo *>
{
  PartyInfo *first;
  PartyInfo *second;
};

/* 5689 */
struct __cppobj std::pair<PartyInfo *,PartyInfo *> : std::_Pair_base<PartyInfo *,PartyInfo *>
{
};

/* 5690 */
struct ProbeSorter
{
  PartyProber *prober;
};

/* 5691 */
struct __declspec(align(4)) PartyMessages
{
  const char *string;
  void (__cdecl *func)(PartyData_s *, ControllerIndex_t, netadr_t, msg_t *);
  bool verbose;
};

/* 5692 */
struct peerResults_t
{
  unsigned int receivedPacketCount;
  unsigned int totalLatencyMS;
  float m;
  float s;
};

/* 5693 */
struct migrateClientData_t
{
  peerResults_t peerResults[18];
  unsigned __int64 nominees[18];
  migrateClientState_t clientState;
  unsigned int sentPacketCount;
  int lastPacketSendMs;
  int currentNominee;
  int migrateStartMs;
  int lasthostTimeMS;
  int hostStartMS;
  int lastCalcTime;
  int nextTestPacketSendMS;
  unsigned __int64 peerXor;
};

/* 5694 */
struct migrateHostData_t
{
  unsigned __int64 nominees[18];
  peerResults_t peerResults[18];
  ClientNum_t tokenHolder;
  unsigned int missingPeerLimit;
};

/* 5695 */
struct tempHostResults_t
{
  peerResults_t peerResults;
  ClientNum_t clientnum;
  connectionType_e connectionType;
};

/* 5696 */
struct __declspec(align(4)) Assignment
{
  float fitness;
  char team[18];
};

/* 5697 */
struct JoinPartyResponse
{
  const char *failureReason;
  unsigned int challenge;
};

/* 5698 */
struct PotentialTeam
{
  int parties[18];
  int partyCount;
  int playerCount;
  int totalSkill;
};

/* 5699 */
struct s_mutePlyerData
{
  s_mutePlayerInfo player[64];
  int numOfExistingPlayers;
  s_mutePlayerInfo *head;
};

/* 5700 */
struct PartyField
{
  int bits;
  int offset;
  int size;
  const char *name;
};

/* 5701 */
struct PrintChannel
{
  char name[32];
  bool allowScript;
};

/* 5702 */
struct PrintChannelGlob
{
  PrintChannel openChannels[256];
  unsigned int filters[7][8];
};

/* 5703 */
struct R_AddDrawCallsCmd
{
  GfxBackEndData *data;
};

/* 5704 */
struct __declspec(align(4)) rankTierData_t
{
  int tierStep0Limits[8];
  float tierSkillLimits[8][16];
  int topTier;
  int topRank;
  bool isValid;
};

/* 5705 */
struct __declspec(align(4)) rankData_t
{
  int minxp[96];
  int maxxp[96];
  int rankId[96];
  char unlocks[96][20];
  int topRow;
  bool isValid;
};

/* 5706 */
struct hashName_t
{
  int hash;
  const char *name;
};

/* 5707 */
struct challengeHashLookup_t
{
  const char **baseStatNames;
  int baseStatNameCount;
  int *baseStatNameHash;
  const char **challengeStatNames;
  int challengeStatCount;
};

/* 5708 */
struct challengeTableInfo_t
{
  challengeTableRow_t challengeTable[1024];
  __int16 startIndices[5][20];
  __int16 numEntries[5][20];
  __int16 challengeRowIndices[1024];
  __int16 uniqueChallengeIndices[1024];
  unsigned int challengeCount;
  unsigned int uniqueChallengeCount;
  hashName_t itemHashNames[1536];
  hashName_t attachmentHashNames[180];
  hashName_t groupHashNames[120];
  hashName_t gametypeHashNames[640];
  int weaponStatHash[11];
  int gametypeStatHash[18];
  challengeHashLookup_t weaponChallengeHashLookup;
  challengeHashLookup_t gametypeChallengeHashLookup;
};

/* 5709 */
struct ClientPing
{
  bool active;
  int ping;
  int nextPingTime;
};

/* 5710 */
struct serverStatusInfoResponse_t
{
  char string[20480];
  netadr_t address;
  int time;
  int startTime;
  int pending;
  int print;
  int retrieved;
  bdSecurityID secId;
};

/* 5711 */
struct ping_t
{
  netadr_t adr;
  int start;
  int time;
  char info[1024];
};

/* 5712 */
struct csinfo_t
{
  int start;
  int end;
  char *label;
};

/* 5713 */
struct keyNumToNameMapping_t
{
  int keynum;
  const char *buttonName;
};

/* 5714 */
struct KeyState
{
  int down;
  int repeats;
  Bind_t binding[2];
  const char *bindingCheat;
};

/* 5715 */
struct PlayerKeyState
{
  field_t chatField;
  int chat_team;
  int overstrikeMode;
  int anyKeyDown;
  KeyState keys[256];
  LocSelInputState locSelInputState;
};

/* 5716 */
struct BindPair_s
{
  Bind_t vehicle;
  Bind_t primary;
};

/* 5717 */
struct GamepadVirtualAxisMapping
{
  GamepadPhysicalAxis physicalAxis;
  GamepadMapping mapType;
};

/* 5718 */
struct GpadAxesGlob
{
  int axesValues[6];
  GamepadVirtualAxisMapping virtualAxes[6];
};

/* 5719 */
struct StickToCodeMap
{
  GamepadPhysicalAxis physicalAxis;
  int posCode;
  int negCode;
};

/* 5720 */
struct $82A2CE68B3A3EBFCA1090E8811030266
{
  bool inited;
  bool requiresCreation;
  int mapDirCount;
  char mapDirs[8][64];
  const char **mapNames[8];
  dvar_t *mapEnumDvar[8];
};

/* 5721 */
struct ConDrawInputGlob
{
  char autoCompleteChoice[64];
  int matchIndex;
  int matchCount;
  const char *inputText;
  int inputTextLen;
  bool hasExactMatch;
  bool mayAutoComplete;
  float x;
  float y;
  float leftX;
  float fontHeight;
};

/* 5722 */
struct MessageLine
{
  int messageIndex;
  int textBufPos;
  int textBufSize;
  int typingStartTime;
  int lastTypingSoundTime;
  int flags;
};

/* 5723 */
struct Message
{
  int startTime;
  int endTime;
};

/* 5724 */
struct MessageWindow
{
  MessageLine *lines;
  Message *messages;
  char *circularTextBuffer;
  int textBufSize;
  int lineCount;
  int padding;
  int scrollTime;
  int fadeIn;
  int fadeOut;
  int textBufPos;
  int firstLineIndex;
  int activeLineCount;
  int messageIndex;
};

/* 5725 */
struct MessageBuffer
{
  char gamemsgText[4][2048];
  MessageWindow gamemsgWindows[4];
  MessageLine gamemsgLines[4][12];
  Message gamemsgMessages[4][12];
  char miniconText[4096];
  MessageWindow miniconWindow;
  MessageLine miniconLines[100];
  Message miniconMessages[100];
  char errorText[1024];
  MessageWindow errorWindow;
  MessageLine errorLines[5];
  Message errorMessages[5];
};

/* 5726 */
struct Console
{
  int initialized;
  MessageWindow consoleWindow;
  MessageLine consoleLines[1024];
  Message consoleMessages[1024];
  char consoleText[32768];
  char textTempLine[512];
  unsigned int lineOffset;
  int displayLineOffset;
  int prevChannel;
  bool outputVisible;
  int fontHeight;
  int visibleLineCount;
  int visiblePixelWidth;
  vec2_t screenMin;
  vec2_t screenMax;
  MessageBuffer messageBuffer[1];
  vec4_t color;
};

/* 5727 */
struct __declspec(align(4)) CompositeJob
{
  CompositeState state;
  CompositeType type;
  int id;
  int layerCount;
  CompositeEmblemLayer layers[32];
  GfxImage *renderImage;
  GfxImage *resultImage;
  bool cancel;
};

/* 5728 */
struct __declspec(align(4)) TempImage
{
  GfxImage *image;
  bool used;
};

/* 5729 */
struct ClientViewParams
{
  float x;
  float y;
  float width;
  float height;
  ClientViewViewportSize viewportSize;
};

/* 5730 */
struct GfxExtraCamParms
{
  unsigned int multiExtraCamIndex;
  GfxExtraCamParms::eExtraCamRenderMode renderMode;
};

/* 5731 */
struct $CDCBEB1E2743641BF8DA8C41FEC80CFE
{
  char password[24];
  netadr_t host;
};

/* 5732 */
struct clientMouse_t
{
  int mouseDx[2];
  int mouseDy[2];
  int mouseIndex;
};

/* 5733 */
struct kbutton_t
{
  int down[2];
  unsigned int downtime;
  unsigned int msec;
  bool active;
  bool wasPressed;
  float val;
};

/* 5734 */
struct AimInput
{
  float deltaTime;
  float pitch;
  float pitchAxis;
  float pitchMax;
  float yaw;
  float yawAxis;
  float yawMax;
  float forwardAxis;
  float rightAxis;
  bitarray<64> button_bits;
  LocalClientNum_t localClientNum;
  playerState_s *ps;
  float adsFrac;
};

/* 5735 */
struct __declspec(align(2)) AimOutput
{
  float pitch;
  float yaw;
  float meleeChargeYaw;
  unsigned __int16 meleeChargeEnt;
  char meleeChargeDist;
};

/* 5736 */
struct CEntityAreaParms
{
  vec3_t mins;
  vec3_t maxs;
  int contentMask;
  int *list;
  int maxCount;
  int count;
};

/* 5737 */
struct AnimRateOffset
{
  int fromWeaponDef;
  int fromWeaponVariantDef;
  int (__cdecl *animTime)(Weapon);
};

/* 5738 */
struct snd_weapon_shot
{
  LocalClientNum_t localClientNum;
  SndEntHandle shooter;
  Weapon weapon;
  vec3_t origin;
  vec3_t direction;
  unsigned int tagName;
  unsigned int burstCount;
  bool shooterIsPlayer;
  bool shooterIsLocalPlayer;
  bool leftGun;
  bool isLastShotInClip;
  bool isTurret;
  bool doubleTap;
  bool fakeFire;
  bool firstShotOfBurst;
};

/* 5739 */
struct snd_autosim_play
{
  unsigned int frame;
  snd_weapon_shot shot;
};

/* 5740 */
struct snd_autosim
{
  snd_weapon_shot shot;
  unsigned int lastPing;
  unsigned int lastShot;
  unsigned int fireTime;
  unsigned __int16 shotCount;
  unsigned __int16 eventCount;
  int used;
  int isNew;
};

/* 5741 */
struct ClientPlayerAttachmentInfo
{
  const char *translatedDisplayName;
};

/* 5742 */
struct __declspec(align(4)) WeaponOptions::CamoLookup
{
  int index;
  bool isMaterialCamo;
};

/* 5743 */
struct WeaponOptions::Reticle
{
  Material *reticleMaterial;
  Material *lensMaterial;
};

/* 5744 */
struct WeaponOptions
{
  WeaponOptions::CamoLookup camoLookupTable[128];
  WeaponCamo *meleeCamo;
  WeaponOptions::Reticle reticles[7][64];
  GfxImage *emblemClearTexture;
};

/* 5745 */
struct $B3E1F5E8DC0C3EB53CAB008A75B84AC0
{
  WeaponCamoMaterialFlags materialFlag;
  unsigned int weaponSemantic;
  unsigned int camoSemantic;
};

/* 5746 */
struct OverheadFade
{
  int nextCheckTime;
  int lastTime;
  int startTime;
  bool visible;
  float alphaScale;
};

/* 5747 */
struct CG_DrawRangefinderHUD::__l8::Element
{
  vec2_t dst;
  vec2_t dstSize;
  vec2_t src;
  vec2_t srcSize;
  float rotation;
};

/* 5748 */
struct visField_t
{
  const char *name;
  int offset;
  int fieldType;
};

/* 5749 */
struct TestEffect
{
  char name[64];
  vec3_t pos;
  int time;
  int respawnTime;
};

/* 5750 */
struct ExtraCamClientStateRestore
{
  char m_buffer[864];
  vec3_t m_vieworg;
  vec3_t m_refdefViewAngles;
  vec3_t m_viewaxis[3];
  LocalClientNum_t m_localClientNum;
};

/* 5751 */
struct cent_field_t
{
  const char *name;
  int ofs;
  fieldtype_t type;
};

/* 5752 */
struct CgSoundPlaybackTrackingInfo
{
  int entitynum;
  vec3_t origin;
  unsigned int aliasname;
  int wasInKillcam;
};

/* 5753 */
struct snd_fire_manager
{
  int active;
  vec3_t location;
  float level;
  int id;
};

/* 5754 */
struct __declspec(align(4)) $59835072FC2CD3936CE4A4C9F556010B
{
  char name[64];
  int index;
  bool useMouse;
};

/* 5755 */
struct __declspec(align(4)) zombieBoxWeapon_t
{
  unsigned __int16 weaponNameIndex;
  WeaponVariantDef *pWeapDef;
  bool bIsDualWield;
};

/* 5756 */
struct dynent_field_s
{
  const char *name;
  int ofs;
  fieldtype_t type;
  dynEntFieldType_t dynEntStruct;
  void (__cdecl *setter)(unsigned __int16, dynent_field_s *);
  void (__cdecl *getter)(unsigned __int16, dynent_field_s *);
};

/* 5757 */
struct cent_field_s
{
  const char *name;
  unsigned int constId;
  int ofs;
  int size[1];
  fieldtype_t type;
  void (__cdecl *setter)(centity_t *, cent_field_s *);
  void (__cdecl *getter)(centity_t *, cent_field_s *);
};

/* 5758 */
struct soundRandom_t
{
  unsigned int soundAlias;
  const char *soundName;
  vec3_t pos;
  unsigned int minWait;
  unsigned int maxWait;
  int nextPlayTime;
  soundRandom_t *next;
};

/* 5761 */
union _lightLogicParam_t
{
  int i;
  float f;
  unsigned int s;
};

/* 5762 */
struct lightLogicParams_t
{
  _lightLogicParam_t p[16];
  vec4_t v[2];
};

/* 5760 */
struct _lightParams_t
{
  bool bPaused;
  vec4_t color;
  float intensity;
  float radius;
  float fovInner;
  float fovOuter;
  void (__cdecl *pLightLogic)(_mixerLight_t *, _lightParams_t *, cg_t *, bool);
  lightLogicParams_t params;
  __int16 state;
  __int16 nextState;
  _mixerLight_t *pMixer;
};

/* 5763 */
struct _lightModel_t
{
  __int16 state;
  __int16 onModelIndex;
  __int16 offModelIndex;
  unsigned int tagName;
  FxEffectDef *fxDef;
  centity_t *pParentEnt;
  centity_t *modelEntity[1];
  int fxId[1];
};

/* 5759 */
struct _mixerLight_t
{
  centity_t *pLight[1];
  _lightParams_t lightChannel[2];
  float ltrRampTime;
  float rtlRampTime;
  bool bActive;
  int startCrossfadeTime;
  char mixPos;
  float mixVal;
  void (__cdecl *pMixerLogic)(_mixerLight_t *, cg_t *);
  float rotateTime;
  int nextRotateEndTime;
  _lightLogicParam_t p[4];
  __int16 state;
  _lightModel_t spinnerModels;
  _lightModel_t lightModels;
  int exploderID;
  unsigned __int32 bHasExploder : 1;
};

/* 5764 */
struct listColumnInfo_t
{
  listColumnTypes_t type;
  float fWidth;
  const char *pszName;
  int iAlignment;
  scoreboardColumnType_t sbColumnType;
};

/* 5765 */
struct __declspec(align(4)) matchClientScoreData_t
{
  unsigned __int64 xuid;
  unsigned __int64 leagueTeamID;
  int rank;
  int prestige;
  ClientNum_t clientNum;
  Material *hRankIcon;
  char name[32];
  char clanAbbrev[8];
  score_s score;
  team_t team;
  bool isInfoValid;
  bool clanAbbrevEV;
};

/* 5766 */
struct __declspec(align(8)) matchScoreBoardData_t
{
  matchClientScoreData_t matchClientScoreData[18];
  scoreboardColumnType_t scoreboardColumnTypes[5];
  listColumnInfo_t inGameScoreboardColumnInfo[12];
  int numClients;
  int numAllies;
  int numInGameScoreboardColumns;
  unsigned __int64 leagueTeamIDs[10];
  int teamScores[10];
  int sortByNameIndexes[18];
  int sortByClientNumIndexes[18];
  char mapName[64];
  char gameType[32];
  bool isPlayerlistDirty;
  int numTeams;
  float xpScale;
};

/* 5767 */
struct scoreboardSortByClientNum_t
{
  int matchClientScoreDataIndex;
  ClientNum_t clientNum;
};

/* 5768 */
struct __declspec(align(4)) scoreboardSortByName_t
{
  const char *name;
  const char *clanAbbrev;
  int matchClientScoreDataIndex;
  ClientNum_t clientNum;
  bool clanAbbrevEV;
};

/* 5771 */
struct RumbleDevguiGraphInfo
{
  RumbleInfo *rumbleInfo;
  RumbleGraph *rumbleGraph;
};

/* 5769 */
struct RumbleGraph
{
  char graphName[64];
  vec2_t knots[16];
  int knotCount;
  DevGraph devguiGraph;
  RumbleDevguiGraphInfo devguiGraphInfo;
};

/* 5770 */
struct RumbleInfo
{
  int rumbleNameIndex;
  float duration;
  float range;
  RumbleGraph *highRumbleGraph;
  RumbleGraph *lowRumbleGraph;
  int fadeWithDistance;
  int broadcast;
  dvar_t *durationDvar;
  dvar_t *loopDvar;
};

/* 5772 */
union $230CD5808847001B52B331BF7A66332D
{
  int entityNum;
  vec3_t pos;
};

/* 5773 */
struct ActiveRumble
{
  RumbleInfo *rumbleInfo;
  int startTime;
  bool loop;
  RumbleSourceType sourceType;
  $230CD5808847001B52B331BF7A66332D source;
};

/* 5774 */
struct RumbleGlobals
{
  RumbleGraph graphs[96];
  RumbleInfo infos[48];
  ActiveRumble activeRumbles[32];
  vec3_t receiverPos;
  int receiverEntNum;
};

/* 5775 */
struct CG_PerfData
{
  int history[32];
  int count;
  int index;
  int instant;
  int total;
  float average;
  float variance;
  int min;
  int max;
};

/* 5776 */
struct CG_PerfInfo
{
  bool initialized;
  CG_PerfData frame;
  CG_PerfData script;
  CG_PerfData script_devblocks;
  CG_PerfData cscript;
  CG_PerfData server;
  CG_PerfData script_opcodes;
  CG_PerfData script_threads;
  CG_PerfData cscript_opcodes;
  CG_PerfData cscript_threads;
  CG_PerfData renderExec;
  CG_PerfData renderSwap;
};

/* 5777 */
struct TargetHighlightParam
{
  bool rangeFinderEnabled;
  float highlightSize;
  float maxHighlightSize;
  float activeHalfWidth;
  float activeHalfHeight;
};

/* 5778 */
struct BattleChatterParams
{
  char WhichSoundIsPlaying;
  unsigned int SecondAlias;
  int EntityNum;
  LocalClientNum_t LocalClientNum;
  int CurrentPlayingSound;
  vec3_t SndOrigin;
};

/* 5779 */
struct laser_cache_t
{
  int valid;
  int entnum;
  int lastUsed;
  trace_t trace;
};

/* 5780 */
struct __declspec(align(2)) RBWaypoint
{
  vec3_t pos;
  Material *material;
  GfxColor color;
  float radius;
  bool fixedSize;
  bool alignBottom;
  bool forceNear;
};

/* 5781 */
struct cg_hudelem_t
{
  float x;
  float y;
  float rotation;
  float width;
  float height;
  char hudElemLabel[256];
  float labelWidth;
  char hudElemText[256];
  float textWidth;
  Font_s *font;
  float fontScale;
  float fontHeight;
  vec4_t color;
  int timeNow;
};

/* 5782 */
struct DelayListInfo
{
  centity_t *head;
  centity_t *latest;
  int size;
};

/* 5783 */
struct EffectFile
{
  const char *nonflesh[21][32];
  const char *flesh[21][4];
};

/* 5784 */
struct cg_vertex_t
{
  vec2_t position;
  vec4_t color;
  vec2_t texCoord;
};

/* 5785 */
struct lagometer_t
{
  int frameSamples[128];
  int frameCount;
  int snapshotFlags[128];
  int snapshotSamples[128];
  int entitySamples[128];
  int changedEntitySamples[128];
  int archivedEntitySamples[128];
  int serverBandwidth[128];
  int killcamTimes[128];
  int snapshotCount;
};

/* 5786 */
struct PlayerDetails
{
  char fullDisplayName[38];
  char clanDisplayName[7];
  char gamerTag[32];
  unsigned int fullDisplayNameLength;
  unsigned int clanDisplayLength;
  unsigned int gamerTagDisplayLength;
  bool inView;
  int inViewStartTime;
  int inViewLastTime;
};

/* 5787 */
struct DrawNameEntity
{
  int entnum;
  float alpha;
  team_indicator teamIndicator;
  float dist;
};

/* 5788 */
struct CenterPrint
{
  int time;
  char text[1024];
  int priority;
};

/* 5789 */
struct ScreenBlur
{
  BlurPriority priority;
  BlurTime time;
  int timeStart;
  int timeEnd;
  float start;
  float end;
  float radius;
};

/* 5790 */
struct ScreenBurn
{
  int startTime;
  int endTime;
  LocalClientNum_t localClientNum;
};

/* 5791 */
struct RopeRenderInfo
{
  VisualRope ropes[96];
  int ropeCount;
};

/* 5792 */
struct RopeGenerateVertsCmd
{
  RopeRenderInfo *ropeInfo;
  LocalClientNum_t localClientNum;
  vec3_t vieworg;
  vec3_t viewaxis[3];
};

/* 5793 */
struct HudGrenade
{
  vec3_t origin;
  float predicted_dmg_ratio;
  float predicted_time_ratio;
  Material *material;
};

/* 5794 */
struct CompassActor
{
  int lastUpdate;
  vec2_t lastPos;
  vec2_t lastEnemyPos;
  vec2_t satelliteEnemyPos;
  float lastYaw;
  float sattelitePingYaw;
  int pingTime;
  int beginFadeTime;
  int beginShoutCasterFadeTime;
  int beginRadarFadeTime;
  int beginSatelliteFadeTime;
  int beginStaticImageFadeTime;
  int beginVoiceFadeTime;
  unsigned int perks[2];
  __int8 needsRevive : 1;
  __int8 gpsJammerActive : 1;
  __int8 inVehicle : 1;
  __int8 enemy : 1;
  int sensorGrenadePingTime;
  float currentFadeTimeAmount;
};

/* 5795 */
struct __declspec(align(4)) CompassFakeFire
{
  vec2_t pos;
  float yaw;
  int entityNum;
  int beginFadeTime;
  bool enemy;
  bool satellite;
};

/* 5796 */
struct CompassVehicle
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  float turretYaw;
  team_t team;
  int ownerIndex;
};

/* 5797 */
struct __declspec(align(4)) CompassDogs
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  team_t team;
  int ownerIndex;
  bool enemy;
};

/* 5798 */
struct __declspec(align(4)) CompassTurrets
{
  int entityNum;
  int lastUpdate;
  int beginFadeTime;
  vec2_t lastPos;
  float lastYaw;
  team_t team;
  int ownerIndex;
  bool enemy;
  bool firing;
};

/* 5799 */
struct CompassArtillery
{
  vec2_t pos;
  vec2_t realPos;
  int fireTime;
};

/* 5800 */
struct CompassHelicopter
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  team_t team;
  int ownerIndex;
};

/* 5801 */
struct CompassGuidedMissile
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  bool isDrone;
  team_t team;
  int ownerIndex;
};

/* 5802 */
struct CompassObituary
{
  vec2_t pos;
  int updateTime;
};

/* 5803 */
struct __declspec(align(4)) CompassZombie
{
  int entityNum;
  int lastUpdate;
  vec2_t lastPos;
  float lastYaw;
  team_t team;
  int ownerIndex;
  bool enemy;
};

/* 5804 */
struct cgCloudLayer_t
{
  XModel *model;
  float cloudCover;
  float minHeight;
  float maxHeight;
  float minSpeed;
  float maxSpeed;
  float radius;
};

/* 5805 */
struct cgCloud_t
{
  vec3_t pos;
  float speed;
  float qsin;
  float qcos;
  cgCloudLayer_t *layer;
};

/* 5806 */
struct CameraShake
{
  int time;
  float scale;
  float length;
  float radius;
  vec3_t src;
  float size;
  float rumbleScale;
};

/* 5807 */
struct CameraShakeSet
{
  CameraShake shakes[4];
  float phase;
};

/* 5808 */
struct ExtraCamDebugOrientation
{
  vec3_t pos;
  vec3_t viewAngles;
};

/* 5809 */
struct punctuation_s
{
  char *p;
  int n;
  punctuation_s *next;
};

/* 5810 */
struct __declspec(align(8)) token_s
{
  char string[1024];
  int type;
  int subtype;
  unsigned int intvalue;
  long double floatvalue;
  char *whitespace_p;
  char *endwhitespace_p;
  int line;
  int linescrossed;
  token_s *next;
};

/* 5811 */
struct __declspec(align(8)) script_s
{
  char filename[64];
  char *buffer;
  char *script_p;
  char *end_p;
  char *lastscript_p;
  char *whitespace_p;
  char *endwhitespace_p;
  int length;
  int line;
  int lastline;
  int tokenavailable;
  int flags;
  punctuation_s *punctuations;
  punctuation_s **punctuationtable;
  token_s token;
  script_s *next;
};

/* 5812 */
struct define_s
{
  char *name;
  int flags;
  int builtin;
  int numparms;
  token_s *parms;
  token_s *tokens;
  define_s *next;
  define_s *hashnext;
};

/* 5813 */
struct indent_s
{
  int type;
  parseSkip_t skip;
  script_s *script;
  indent_s *next;
};

/* 5814 */
struct source_s
{
  char filename[64];
  char includepath[64];
  punctuation_s *punctuations;
  script_s *scriptstack;
  token_s *tokens;
  define_s *defines;
  define_s **definehash;
  indent_s *indentstack;
  int skip;
  token_s token;
};

/* 5815 */
struct directive_s
{
  char *name;
  int (__cdecl *func)(source_s *);
};

/* 5816 */
struct __declspec(align(8)) value_s
{
  int intvalue;
  long double floatvalue;
  int parentheses;
  value_s *prev;
  value_s *next;
};

/* 5817 */
struct operator_s
{
  int op;
  int priority;
  int parentheses;
  operator_s *prev;
  operator_s *next;
};

/* 5818 */
struct unlockMapping_t
{
  const char *name;
  const char *stringRef;
};

/* 5819 */
struct unlockableItemsDataShared
{
  unlockMapping_t unlockMappings[20];
  int itemGroupToUnlock[20];
  int itemGroupCount[20];
};

/* 5820 */
struct __declspec(align(4)) FactionData
{
  vec3_t factionColor[10];
  bool initialized;
};

/* 5821 */
struct BG_InitClientFields::__l5::clientFieldSystemDef_s
{
  int systemIndex;
  int numNetFields;
  int setNetfieldAddressOffsets[160];
};

/* 5822 */
struct WeaponAttachmentUniqueFull
{
  WeaponAttachmentUnique attachment;
  const char *szXAnims[88];
  unsigned __int16 hideTags[32];
  float locationDamageMultipliers[21];
};

/* 5823 */
struct AnimStateDefProperty
{
  const char *name;
  int flag;
  void (__cdecl *simpleCallback)(AnimState *, int);
  void (__cdecl *tokenizeCallback)(AnimState *, const char **, char *, const char *);
};

/* 5824 */
struct AimTarget
{
  int entIndex;
  float worldDistSqr;
  vec3_t mins;
  vec3_t maxs;
  vec3_t velocity;
};

/* 5825 */
struct AimTargetGlob
{
  AimTarget targets[64];
  int targetCount;
};

/* 5826 */
struct std::_Pair_base<AimTarget *,AimTarget *>
{
  AimTarget *first;
  AimTarget *second;
};

/* 5827 */
struct __cppobj std::pair<AimTarget *,AimTarget *> : std::_Pair_base<AimTarget *,AimTarget *>
{
};

/* 5828 */
struct __declspec(align(8)) AimAssistPlayerState
{
  vec3_t origin;
  vec3_t viewangles;
  vec3_t velocity;
  vec3_t linkAngles;
  int eFlags;
  int linkFlags;
  int pm_flags;
  int pm_type;
  __int64 weapFlags;
  int weaponstate;
  int speed;
  float fWeaponPosFrac;
  float viewHeightCurrent;
  Weapon weapon;
  Weapon meleeWeapon;
  bool hasAmmo;
  bool isDualWielding;
  bool targetAssistDisabled;
  bool onMovingPlatform;
};

/* 5829 */
struct AimTweakables
{
  float slowdownRegionWidth;
  float slowdownRegionHeight;
  float autoAimRegionWidth;
  float autoAimRegionHeight;
  float autoMeleeRegionWidth;
  float autoMeleeRegionHeight;
  float lockOnRegionWidth;
  float lockOnRegionHeight;
};

/* 5830 */
struct __declspec(align(4)) AimScreenTarget
{
  int entIndex;
  vec2_t clipMins;
  vec2_t clipMaxs;
  vec3_t aimPos;
  vec3_t velocity;
  vec3_t origin;
  float distSqr;
  float crosshairDistSqr;
  bool aimPosValid;
};

/* 5831 */
struct AimAssistGlobals
{
  AimAssistPlayerState ps;
  LocalClientNum_t localClientNum;
  bool initialized;
  AimTweakables tweakables;
  vec3_t viewOrigin;
  vec3_t viewAngles;
  vec3_t viewAxis[3];
  float fovTurnRateScale;
  float fovScaleInv;
  float adsLerp;
  float pitchDelta;
  float yawDelta;
  float screenWidth;
  float screenHeight;
  __declspec(align(16)) vec4_t screenMtx[4];
  vec4_t invScreenMtx[4];
  AimScreenTarget screenTargets[64];
  int screenTargetCount;
  int autoAimTargetEnt;
  bool autoAimPressed;
  bool autoAimActive;
  float autoAimPitch;
  float autoAimPitchTarget;
  float autoAimYaw;
  float autoAimYawTarget;
  bool autoAimJustGotTarget;
  bool autoAimHasRealTarget;
  bool aimSlowdownActive;
  int aimSlowdownTargetEnt;
  int autoMeleeTargetEnt;
  eAutoMeleeState autoMeleeState;
  float autoMeleePitch;
  float autoMeleePitchTarget;
  float autoMeleeYaw;
  float autoMeleeYawTarget;
  int lockOnTargetEnt;
  bitarray<64> prev_button_bits;
  bool overrideSnapWidthAndLerp;
  float overrideAutoaimLerpValue;
  float overrideAutoaimWidthValue;
  float inputIdleTime;
};

/* 5832 */
struct _IMAGE_DATA_DIRECTORY
{
  unsigned int VirtualAddress;
  unsigned int Size;
};

/* 5833 */
struct _IMAGE_OPTIONAL_HEADER
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned int BaseOfData;
  unsigned int ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned int SizeOfStackReserve;
  unsigned int SizeOfStackCommit;
  unsigned int SizeOfHeapReserve;
  unsigned int SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 5834 */
struct _IMAGE_FILE_HEADER
{
  unsigned __int16 Machine;
  unsigned __int16 NumberOfSections;
  unsigned int TimeDateStamp;
  unsigned int PointerToSymbolTable;
  unsigned int NumberOfSymbols;
  unsigned __int16 SizeOfOptionalHeader;
  unsigned __int16 Characteristics;
};

/* 5835 */
struct _IMAGE_DOS_HEADER
{
  unsigned __int16 e_magic;
  unsigned __int16 e_cblp;
  unsigned __int16 e_cp;
  unsigned __int16 e_crlc;
  unsigned __int16 e_cparhdr;
  unsigned __int16 e_minalloc;
  unsigned __int16 e_maxalloc;
  unsigned __int16 e_ss;
  unsigned __int16 e_sp;
  unsigned __int16 e_csum;
  unsigned __int16 e_ip;
  unsigned __int16 e_cs;
  unsigned __int16 e_lfarlc;
  unsigned __int16 e_ovno;
  unsigned __int16 e_res[4];
  unsigned __int16 e_oemid;
  unsigned __int16 e_oeminfo;
  unsigned __int16 e_res2[10];
  int e_lfanew;
};

/* 5836 */
struct NvPhysicalGpuHandle__
{
  int unused;
};

/* 5837 */
struct NV_EDID_V3
{
  unsigned int version;
  char EDID_Data[256];
  unsigned int sizeofEDID;
  unsigned int edidId;
  unsigned int offset;
};

/* 5838 */
struct NV_GPU_CONNECTOR_DATA
{
  _NV_GPU_CONNECTOR_TYPE type;
  unsigned int locationIndex;
};

/* 5839 */
struct NV_GPU_CONNECTOR_INFO
{
  unsigned int version;
  _NV_GPU_CONNECTOR_PLATFORM connectorPlatform;
  unsigned int connectorCount;
  NV_GPU_CONNECTOR_DATA connector[4];
};

/* 5840 */
struct NvDisplayHandle__
{
  int unused;
};

/* 5841 */
struct NV_DISPLAY_TV_OUTPUT_INFO
{
  unsigned int version;
  unsigned int supportedFormats;
  _NV_DISPLAY_TV_FORMAT currentFormat;
  _NV_GPU_CONNECTOR_TYPE currentConnector;
};

/* 5842 */
struct NV_VIEWPORTF
{
  float x;
  float y;
  float w;
  float h;
};

/* 5843 */
struct tagNV_TIMINGEXT
{
  unsigned int flag;
  unsigned __int16 rr;
  unsigned int rrx1k;
  unsigned int aspect;
  unsigned __int16 rep;
  unsigned int status;
  char name[40];
};

/* 5844 */
struct tagNV_TIMING
{
  unsigned __int16 HVisible;
  unsigned __int16 HBorder;
  unsigned __int16 HFrontPorch;
  unsigned __int16 HSyncWidth;
  unsigned __int16 HTotal;
  char HSyncPol;
  unsigned __int16 VVisible;
  unsigned __int16 VBorder;
  unsigned __int16 VFrontPorch;
  unsigned __int16 VSyncWidth;
  unsigned __int16 VTotal;
  char VSyncPol;
  unsigned __int16 interlaced;
  unsigned int pclk;
  tagNV_TIMINGEXT etc;
};

/* 5845 */
struct NV_DISP_PATH_V2
{
  unsigned int version;
  unsigned int device;
  _NV_GPU_CONNECTOR_TYPE connector;
  unsigned int srcID;
  unsigned int srcImportance;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  _NV_ROTATE rotation;
  _NV_FORMAT colorFormat;
  NV_VIEWPORTF srcPartition;
  NV_VIEWPORTF viewportIn;
  _NV_SCALING scaling;
  NV_VIEWPORTF viewportOut;
  _NV_TIMING_OVERRIDE timingOverride;
  unsigned int refreshRate;
  unsigned __int32 interlaced : 1;
  unsigned __int32 hwModeSetOnly : 1;
  unsigned __int32 SelectCustomTiming : 1;
  unsigned __int32 needNullModeset : 1;
  unsigned __int32 need6x4Modeset : 1;
  unsigned __int32 forceModeSet : 1;
  unsigned __int32 gpuId : 24;
  unsigned __int32 isSliFocusDisplay : 1;
  unsigned __int32 forceModeEnum : 1;
  _NV_DISPLAY_TV_FORMAT tvFormat;
  tagNV_TIMING timing;
  unsigned int refreshRate1K;
};

/* 5846 */
struct NV_VIEW_TARGET_INFO::__unnamed
{
  unsigned int deviceMask;
  unsigned int sourceId;
  unsigned __int32 bPrimary : 1;
  unsigned __int32 bInterlaced : 1;
  unsigned __int32 bGDIPrimary : 1;
  unsigned __int32 bForceModeSet : 1;
};

/* 5847 */
struct NV_VIEW_TARGET_INFO
{
  unsigned int version;
  unsigned int count;
  NV_VIEW_TARGET_INFO::__unnamed target[2];
};

/* 5848 */
struct NV_DISPLAY_PATH
{
  unsigned int deviceMask;
  unsigned int sourceId;
  unsigned __int32 bPrimary : 1;
  _NV_GPU_CONNECTOR_TYPE connector;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  _NV_FORMAT colorFormat;
  _NV_ROTATE rotation;
  _NV_SCALING scaling;
  unsigned int refreshRate;
  unsigned __int32 interlaced : 1;
  _NV_DISPLAY_TV_FORMAT tvFormat;
  unsigned int posx;
  unsigned int posy;
  unsigned __int32 bGDIPrimary : 1;
  unsigned __int32 bForceModeSet : 1;
  unsigned __int32 bFocusDisplay : 1;
  unsigned __int32 gpuId : 24;
};

/* 5849 */
struct NV_DISPLAY_PATH_INFO
{
  unsigned int version;
  unsigned int count;
  NV_DISPLAY_PATH path[4];
};

/* 5850 */
struct NV_UID::__unnamed::__unnamed
{
  char revMin;
  char revMaj;
  char verMin;
  char verMaj;
};

/* 5851 */
union $9D1AEFB5B4E94468037CB172387434D7
{
  unsigned int data1;
  NV_UID::__unnamed::__unnamed ver;
};

/* 5852 */
struct NV_UID
{
  $9D1AEFB5B4E94468037CB172387434D7 ___u0;
  unsigned __int16 data2;
  unsigned __int16 data3;
  char data4[8];
};

/* 5853 */
struct NV_HDCP_CN
{
  unsigned __int64 uSessionID : 37;
  unsigned __int64 uDisplay : 3;
  unsigned __int64 uReserved : 24;
};

/* 5854 */
struct NV_U40::__unnamed::__unnamed
{
  unsigned __int64 hugePart : 40;
  unsigned __int64 unusedPart : 24;
};

/* 5855 */
union $EE043E630FC08ECE37B371A9BE073FB6
{
  unsigned __int64 quadWord;
  NV_U40::__unnamed::__unnamed parts;
};

/* 5856 */
struct NV_U40
{
  $EE043E630FC08ECE37B371A9BE073FB6 ___u0;
};

/* 5857 */
struct NV_HDCP_BSTATUS
{
  unsigned __int32 ucDeviceCount : 7;
  unsigned __int32 bMaxDevicesExceeded : 1;
  unsigned __int32 bRepeaterDepth : 3;
  unsigned __int32 bMaxCascadeExceeded : 1;
  unsigned __int32 bHDMImode : 1;
  unsigned __int32 bReserved : 19;
};

/* 5858 */
struct __unaligned __declspec(align(4)) NV_HDCP_STATUS
{
  unsigned __int64 bEncrypting : 1;
  unsigned __int64 bRepeater : 1;
  unsigned __int64 bUserAccessible : 1;
  unsigned __int64 bExtUnprotected : 1;
  unsigned __int64 uPortIndex : 4;
  unsigned __int64 uNumPorts : 4;
  unsigned __int64 bInternalPanel : 1;
  unsigned __int64 bWideScope : 1;
  unsigned __int64 bHasCs : 1;
  unsigned __int64 bReadZ : 1;
  unsigned __int64 uReserved : 24;
  unsigned __int64 bDualLinkEven : 1;
  unsigned __int64 bDualLinkOdd : 1;
  unsigned __int64 bDualLinkCapable : 1;
  unsigned __int64 reserved : 21;
  unsigned int DisplayId;
};

/* 5859 */
struct NV_HDCP_CS
{
  unsigned __int64 uAttachPoints : 16;
  unsigned __int64 bNonHDCP : 1;
  unsigned __int64 uHeadIndex : 4;
  unsigned __int64 uRFUPlanes : 8;
  unsigned __int64 uNumberOfActiveHeads : 2;
  unsigned __int64 uReserved2 : 9;
  unsigned __int64 uAttachedPlanes : 8;
  unsigned __int64 bCloneMode : 1;
  unsigned __int64 bSpanMode : 1;
  unsigned __int64 reserved : 14;
};

/* 5860 */
struct NV_U56::__unnamed::__unnamed
{
  unsigned __int64 hugePart : 56;
  unsigned __int64 unusedPart : 8;
};

/* 5861 */
union $0311BCE3CD7BCAB0D933815B518CECDD
{
  unsigned __int64 quadWord;
  NV_U56::__unnamed::__unnamed parts;
};

/* 5862 */
struct NV_U56
{
  $0311BCE3CD7BCAB0D933815B518CECDD ___u0;
};

/* 5863 */
struct NV_HDCP_PACKET
{
  NV_UID uidHDCP;
  unsigned int packetSize;
  unsigned int hDisplayContext;
  NV_HDCP_COMMANDS cmdCommand;
  NV_HDCP_FLAGS flFlags;
  NV_HDCP_RET_STATUS hdcpPacketStatus;
  unsigned int apIndex;
  NV_HDCP_CN cN;
  NV_U40 cKsv;
  NV_HDCP_BSTATUS bStatus[16];
  NV_HDCP_STATUS hdcpStatus[16];
  NV_HDCP_CS cS;
  NV_U56 kP[2];
  NV_U40 aN[2];
  NV_U40 aKsv[2];
  NV_U40 dKsv[2];
  char vP[20];
  __unaligned __declspec(align(1)) unsigned __int64 mP;
  unsigned int numBKSVs;
  NV_U40 bKsvList[127];
};

/* 5864 */
struct __unaligned __declspec(align(4)) NV_HDCP_INFO
{
  unsigned int version;
  NV_HDCP_PACKET nvHdcpPacket;
};

/* 5865 */
struct NV_3D_APP_INFO_V2
{
  unsigned int version;
  unsigned int processId;
  char processName[256];
};

/* 5866 */
struct _NV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1
{
  unsigned int version;
  _NV_ROTATE rotation;
  _NV_SCALING scaling;
  unsigned int refreshRate1K;
  unsigned __int32 interlaced : 1;
  unsigned __int32 primary : 1;
  unsigned __int32 reserved : 30;
  _NV_GPU_CONNECTOR_TYPE connector;
  _NV_DISPLAY_TV_FORMAT tvFormat;
  _NV_TIMING_OVERRIDE timingOverride;
  tagNV_TIMING timing;
};

/* 5867 */
struct _NV_DISPLAYCONFIG_PATH_TARGET_INFO_V2
{
  unsigned int displayId;
  _NV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1 *details;
  unsigned int targetId;
};

/* 5868 */
struct _NV_RESOLUTION
{
  unsigned int width;
  unsigned int height;
  unsigned int colorDepth;
};

/* 5869 */
struct _NV_POSITION
{
  int x;
  int y;
};

/* 5870 */
struct _NV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1
{
  _NV_RESOLUTION resolution;
  _NV_FORMAT colorFormat;
  _NV_POSITION position;
  _NV_DISPLAYCONFIG_SPANNING_ORIENTATION spanningOrientation;
  unsigned __int32 bGDIPrimary : 1;
  unsigned __int32 bSLIFocus : 1;
  unsigned __int32 reserved : 30;
};

/* 5871 */
union $229D68C1EBF1FEF4899E8AEF7CD422F1
{
  unsigned int sourceId;
  unsigned int reserved_sourceId;
};

/* 5872 */
struct _NV_DISPLAYCONFIG_PATH_INFO
{
  unsigned int version;
  $229D68C1EBF1FEF4899E8AEF7CD422F1 ___u1;
  unsigned int targetInfoCount;
  _NV_DISPLAYCONFIG_PATH_TARGET_INFO_V2 *targetInfo;
  _NV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1 *sourceModeInfo;
  unsigned __int32 IsNonNVIDIAAdapter : 1;
  unsigned __int32 reserved : 31;
  void *pOSAdapterID;
};

/* 5873 */
struct NvDRSSessionHandle__
{
  int unused;
};

/* 5874 */
struct NV_DISPLAY_DRIVER_VERSION
{
  unsigned int version;
  unsigned int drvVersion;
  unsigned int bldChangeListNum;
  char szBuildBranchString[64];
  char szAdapterString[64];
};

/* 5875 */
struct NV_DISPLAY_DRIVER_MEMORY_INFO_V2
{
  unsigned int version;
  unsigned int dedicatedVideoMemory;
  unsigned int availableDedicatedVideoMemory;
  unsigned int systemVideoMemory;
  unsigned int sharedSystemMemory;
  unsigned int curAvailableDedicatedVideoMemory;
};

/* 5876 */
struct NV_DRIVER_MEMORY_INFO
{
  unsigned int version;
  unsigned int dedicatedVideoMemory;
  unsigned int systemVideoMemory;
  unsigned int sharedSystemMemory;
};

/* 5877 */
struct NV_3D_SETTING
{
  unsigned int version;
  NV_3D_PROPERTY settingName;
  unsigned int flags;
  unsigned int defaultValue;
  unsigned int currentValue;
};

/* 5878 */
struct NV_3D_SETTING_RANGE
{
  unsigned int version;
  NV_3D_PROPERTY settingName;
  unsigned int value[25];
  unsigned int validRangeCount;
};

/* 5879 */
struct NvLogicalGpuHandle__
{
  int unused;
};

/* 5880 */
struct NvUnAttachedDisplayHandle__
{
  int unused;
};

/* 5881 */
struct _NV_GPU_DISPLAYIDS
{
  unsigned int version;
  NV_MONITOR_CONN_TYPE connectorType;
  unsigned int displayId;
  unsigned __int32 isDynamic : 1;
  unsigned __int32 isMultiStreamRootNode : 1;
  unsigned __int32 isActive : 1;
  unsigned __int32 isCluster : 1;
  unsigned __int32 isOSVisible : 1;
  unsigned __int32 reserved : 27;
};

/* 5882 */
struct NV_GPU_DISPLAY_MODE
{
  unsigned int version;
  unsigned int activeWidth;
  unsigned int activeHeight;
  unsigned int totalWidth;
  unsigned int totalHeight;
  unsigned int depth;
  unsigned int frequency;
};

/* 5883 */
struct NV_GPU_FLAT_PANEL_INFO
{
  unsigned int version;
  _NV_GPU_FLATPANEL_SIGNAL_TYPE signalType;
  _NV_GPU_FLATPANEL_SIGNAL_LINK linkType;
  _NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES displayPortLanes;
  unsigned int colorFlags;
  unsigned __int32 hdmiCapable : 1;
  unsigned __int32 scalerDisabled : 1;
  unsigned __int32 refreshRateLocked : 1;
};

/* 5884 */
struct _NV_BOARD_INFO
{
  unsigned int version;
  char BoardNum[16];
};

/* 5885 */
struct NV_GPU_CLOCK_FREQUENCIES_V2::__unnamed
{
  unsigned __int32 bIsPresent : 1;
  unsigned __int32 reserved : 31;
  unsigned int frequency;
};

/* 5886 */
struct NV_GPU_CLOCK_FREQUENCIES_V2
{
  unsigned int version;
  unsigned __int32 ClockType : 2;
  unsigned __int32 reserved : 22;
  unsigned __int32 reserved1 : 8;
  NV_GPU_CLOCK_FREQUENCIES_V2::__unnamed domain[32];
};

/* 5887 */
struct NV_GPU_PERF_CLOCK_TABLE::__unnamed::__unnamed
{
  _NV_GPU_PUBLIC_CLOCK_ID domainId;
  unsigned int domainFlags;
  unsigned int currentFreq;
  unsigned int defaultFreq;
  unsigned int minFreq;
  unsigned int maxFreq;
  unsigned __int32 bSetClock : 1;
};

/* 5888 */
struct NV_GPU_PERF_CLOCK_TABLE::__unnamed
{
  unsigned int level;
  unsigned int flags;
  NV_GPU_PERF_CLOCK_TABLE::__unnamed::__unnamed domain[32];
};

/* 5889 */
struct NV_GPU_PERF_CLOCK_TABLE
{
  unsigned int version;
  unsigned int levelCount;
  unsigned int gpuPerflevel;
  unsigned int domainCount;
  unsigned int gpuPerfFlags;
  NV_GPU_PERF_CLOCK_TABLE::__unnamed perfLevel[12];
};

/* 5890 */
struct NV_COOLER_TACHOMETER
{
  unsigned int speedRPM;
  char bSupported;
  unsigned int maxSpeedRPM;
  unsigned int minSpeedRPM;
};

/* 5891 */
struct NV_GPU_GETCOOLER_SETTINGS_V3::__unnamed
{
  NV_COOLER_TYPE type;
  NV_COOLER_CONTROLLER controller;
  unsigned int defaultMinLevel;
  unsigned int defaultMaxLevel;
  unsigned int currentMinLevel;
  unsigned int currentMaxLevel;
  unsigned int currentLevel;
  NV_COOLER_POLICY defaultPolicy;
  NV_COOLER_POLICY currentPolicy;
  NV_COOLER_TARGET target;
  NV_COOLER_CONTROL controlType;
  NV_COOLER_ACTIVITY_LEVEL active;
  NV_COOLER_TACHOMETER tachometer;
};

/* 5892 */
struct NV_GPU_GETCOOLER_SETTINGS_V3
{
  unsigned int version;
  unsigned int count;
  NV_GPU_GETCOOLER_SETTINGS_V3::__unnamed cooler[20];
};

/* 5893 */
struct NV_GPU_SETCOOLER_LEVEL_V2::__unnamed
{
  unsigned int currentLevel;
  NV_COOLER_POLICY currentPolicy;
};

/* 5894 */
struct NV_GPU_SETCOOLER_LEVEL_V2
{
  unsigned int version;
  NV_GPU_SETCOOLER_LEVEL_V2::__unnamed cooler[20];
};

/* 5895 */
struct NV_GPU_COOLER_POLICY_TABLE::__unnamed
{
  unsigned int levelId;
  unsigned int currentLevel;
  unsigned int defaultLevel;
};

/* 5896 */
struct NV_GPU_COOLER_POLICY_TABLE
{
  unsigned int version;
  NV_COOLER_POLICY policy;
  NV_GPU_COOLER_POLICY_TABLE::__unnamed policyCoolerLevel[24];
};

/* 5897 */
struct NV_GPU_PERF_PSTATES_INFO_V2::__unnamed::__unnamed
{
  _NV_GPU_PUBLIC_CLOCK_ID domainId;
  unsigned int flags;
  unsigned int freq;
};

/* 5898 */
struct NV_GPU_PERF_PSTATES_INFO_V2::__unnamed
{
  _NV_GPU_PERF_PSTATE_ID pstateId;
  unsigned int flags;
  NV_GPU_PERF_PSTATES_INFO_V2::__unnamed::__unnamed clocks[32];
  NV_GPU_PERF_PSTATES_INFO_V2::__unnamed::__unnamed voltages[16];
};

/* 5899 */
struct NV_GPU_PERF_PSTATES_INFO_V2
{
  unsigned int version;
  unsigned int flags;
  unsigned int numPstates;
  unsigned int numClocks;
  unsigned int numVoltages;
  NV_GPU_PERF_PSTATES_INFO_V2::__unnamed pstates[16];
};

/* 5900 */
struct NV_GPU_PERF_PSTATES20_PARAM_DELTA::__unnamed
{
  int min;
  int max;
};

/* 5901 */
struct NV_GPU_PERF_PSTATES20_PARAM_DELTA
{
  int value;
  NV_GPU_PERF_PSTATES20_PARAM_DELTA::__unnamed valueRange;
};

/* 5902 */
struct NV_GPU_PSTATE20_CLOCK_ENTRY_V1::__unnamed::__unnamed
{
  unsigned int freq_kHz;
};

/* 5903 */
union NV_GPU_PSTATE20_CLOCK_ENTRY_V1::__unnamed
{
  NV_GPU_PSTATE20_CLOCK_ENTRY_V1::__unnamed::__unnamed single;
  _BYTE range[20];
};

/* 5904 */
struct NV_GPU_PSTATE20_CLOCK_ENTRY_V1
{
  _NV_GPU_PUBLIC_CLOCK_ID domainId;
  NV_GPU_PERF_PSTATE20_CLOCK_TYPE_ID typeId;
  unsigned __int32 bIsEditable : 1;
  unsigned __int32 reserved : 31;
  NV_GPU_PERF_PSTATES20_PARAM_DELTA freqDelta_kHz;
  NV_GPU_PSTATE20_CLOCK_ENTRY_V1::__unnamed data;
};

/* 5905 */
struct NV_GPU_PSTATE20_BASE_VOLTAGE_ENTRY_V1
{
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned __int32 bIsEditable : 1;
  unsigned __int32 reserved : 31;
  unsigned int volt_uV;
  NV_GPU_PERF_PSTATES20_PARAM_DELTA voltDelta_uV;
};

/* 5906 */
struct NV_GPU_PERF_PSTATES20_INFO_V1::__unnamed
{
  _NV_GPU_PERF_PSTATE_ID pstateId;
  unsigned __int32 bIsEditable : 1;
  unsigned __int32 reserved : 31;
  NV_GPU_PSTATE20_CLOCK_ENTRY_V1 clocks[8];
  NV_GPU_PSTATE20_BASE_VOLTAGE_ENTRY_V1 baseVoltages[4];
};

/* 5907 */
struct NV_GPU_PERF_PSTATES20_INFO_V1
{
  unsigned int version;
  unsigned __int32 bIsEditable : 1;
  unsigned __int32 reserved : 31;
  unsigned int numPstates;
  unsigned int numClocks;
  unsigned int numBaseVoltages;
  NV_GPU_PERF_PSTATES20_INFO_V1::__unnamed pstates[16];
};

/* 5908 */
struct NV_GPU_DYNAMIC_PSTATES_INFO_EX::__unnamed
{
  unsigned __int32 bIsPresent : 1;
  unsigned int percentage;
};

/* 5909 */
struct NV_GPU_DYNAMIC_PSTATES_INFO_EX
{
  unsigned int version;
  unsigned int flags;
  NV_GPU_DYNAMIC_PSTATES_INFO_EX::__unnamed utilization[8];
};

/* 5910 */
struct NV_GPU_PERF_VOLTAGES::__unnamed::__unnamed
{
  unsigned int flags;
  unsigned int mvolt;
};

/* 5911 */
struct NV_GPU_PERF_VOLTAGES::__unnamed
{
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned int flags;
  unsigned int numVoltages;
  NV_GPU_PERF_VOLTAGES::__unnamed::__unnamed voltages[128];
};

/* 5912 */
struct NV_GPU_PERF_VOLTAGES
{
  unsigned int version;
  unsigned int flags;
  unsigned int numDomains;
  NV_GPU_PERF_VOLTAGES::__unnamed domains[16];
};

/* 5913 */
struct NV_GPU_THERMAL_SETTINGS_V2::__unnamed
{
  NV_THERMAL_CONTROLLER controller;
  int defaultMinTemp;
  int defaultMaxTemp;
  int currentTemp;
  NV_THERMAL_TARGET target;
};

/* 5914 */
struct NV_GPU_THERMAL_SETTINGS_V2
{
  unsigned int version;
  unsigned int count;
  NV_GPU_THERMAL_SETTINGS_V2::__unnamed sensor[3];
};

/* 5915 */
struct _NV_GPU_DITHER_CONTROL_V1
{
  unsigned int version;
  _NVAPI_DITHER_TYPE ditherEnable;
  _NVAPI_DITHER_BITS ditherBitDepth;
  _NVAPI_DITHER_MODE ditherMode;
  unsigned int ditherBitDepths;
  unsigned int ditherModes;
};

/* 5916 */
struct _NVAPI_CSC_MATRIX
{
  unsigned __int32 useCustomMatrix : 1;
  unsigned __int32 reserved : 31;
  float aCSCCoeff[3][4];
};

/* 5917 */
struct _NV_GPU_COLORSPACE_CONVERSION_V1
{
  unsigned int version;
  _NV_STANDARD_COLORSPACE sourceColorSpace;
  _NV_STANDARD_COLORSPACE outputColorSpace;
  unsigned int flags;
  unsigned int clientID;
  _NVAPI_CSC_MATRIX MatrixPre;
  _NVAPI_CSC_MATRIX MatrixPost;
};

/* 5918 */
union $A0A761839A47BD11BF3B303A6C31496D
{
  unsigned int displayOutputTargetMask;
  unsigned int displayId;
};

/* 5919 */
struct NV_GPU_TOPOLOGY_V2
{
  unsigned int version;
  unsigned int gpuCount;
  NvPhysicalGpuHandle__ *hPhysicalGpu[8];
  unsigned int displayGpuIndex;
  $A0A761839A47BD11BF3B303A6C31496D ___u4;
  unsigned int noDisplayGpuMask;
  unsigned int flags;
  unsigned int status;
};

/* 5920 */
struct __declspec(align(8)) NV_SLI_GROUP
{
  unsigned int version;
  unsigned __int64 topologyMask;
  unsigned int flags;
};

/* 5921 */
struct NV_GPU_TOPOLOGIES
{
  unsigned int version;
  unsigned int gpuTopoCount;
  NV_GPU_TOPOLOGY_V2 gpuTopo[256];
  unsigned int sliGroupCount;
  NV_SLI_GROUP sliGroup[256];
};

/* 5922 */
struct NV_I2C_INFO_V3
{
  unsigned int version;
  unsigned int displayMask;
  char bIsDDCPort;
  char i2cDevAddress;
  char *pbI2cRegAddress;
  unsigned int regAddrSize;
  char *pbData;
  unsigned int cbSize;
  unsigned int i2cSpeed;
  NV_I2C_SPEED i2cSpeedKhz;
  char portId;
  unsigned int bIsPortIdSet;
};

/* 5923 */
struct NV_I2C_INFO_EX
{
  unsigned int flags;
  unsigned int encrClientID;
};

/* 5924 */
struct NV_NVAPI_GET_DP_DONGLE_INFO::__unnamed
{
  unsigned int displayMask;
};

/* 5925 */
struct NV_NVAPI_GET_DP_DONGLE_INFO
{
  unsigned int version;
  NV_NVAPI_GET_DP_DONGLE_INFO::__unnamed input;
  NV_NVAPI_GET_DP_DONGLE_INFO::__unnamed output;
};

/* 5926 */
struct NV_GPU_VOLTAGE_DOMAIN_STATUS_V1
{
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned int voltageuV;
};

/* 5927 */
struct NV_GPU_VOLTAGE_DOMAINS_STATUS_V1
{
  unsigned int version;
  unsigned int flags;
  unsigned int numDomains;
  NV_GPU_VOLTAGE_DOMAIN_STATUS_V1 domains[16];
};

/* 5928 */
struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_INFO_V1
{
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
};

/* 5929 */
struct NV_GPU_CLIENT_POWER_TOPOLOGY_INFO_V1
{
  unsigned int version;
  char bSupported;
  char numChannels;
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_INFO_V1 channels[4];
};

/* 5930 */
struct NV_GPU_CLIENT_POWER_READING_V1
{
  unsigned __int32 bMilliWattValid : 1;
  unsigned __int32 reserved : 31;
  unsigned int mp;
  unsigned int mW;
};

/* 5931 */
struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_STATUS_V1
{
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
  NV_GPU_CLIENT_POWER_READING_V1 power;
};

/* 5932 */
struct NV_GPU_CLIENT_POWER_TOPOLOGY_STATUS_V1
{
  unsigned int version;
  char numChannels;
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_STATUS_V1 channels[4];
};

/* 5933 */
struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_INFO_V1
{
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID policyId;
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
  NV_GPU_CLIENT_POWER_READING_V1 powerLimitMin;
  NV_GPU_CLIENT_POWER_READING_V1 powerLimitDefault;
  NV_GPU_CLIENT_POWER_READING_V1 powerLimitMax;
};

/* 5934 */
struct NV_GPU_CLIENT_POWER_POLICIES_INFO_V1
{
  unsigned int version;
  char bSupported;
  char numPolicies;
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_INFO_V1 policies[4];
};

/* 5935 */
struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_STATUS_V1
{
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID policyId;
  NV_GPU_CLIENT_POWER_READING_V1 powerLimit;
};

/* 5936 */
struct NV_GPU_CLIENT_POWER_POLICIES_STATUS_V1
{
  unsigned int version;
  char numPolicies;
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_STATUS_V1 policies[4];
};

/* 5937 */
struct NV_GPU_GPIO_LEGAL_PINS
{
  unsigned int version;
  unsigned int gpioPinCount;
  unsigned int gpioLegalPins[32];
};

/* 5938 */
struct NV_GPU_GPIO_PIN_DATA
{
  unsigned int version;
  unsigned int gpioPinNumber;
  unsigned int gpioDataReadWrite;
  NVAPI_GPIO_DIRECTION gpioDirection;
};

/* 5939 */
struct NV_GPU_GET_HDCP_SUPPORT_STATUS
{
  unsigned int version;
  _NV_GPU_HDCP_FUSE_STATE hdcpFuseState;
  _NV_GPU_HDCP_KEY_SOURCE hdcpKeySource;
  _NV_GPU_HDCP_KEY_SOURCE_STATE hdcpKeySourceState;
};

/* 5940 */
struct _NV_GPS_GET_THERMAL_LIMIT_PARM
{
  unsigned int version;
  NV_GPS_SENSOR_INDEX sensorIndex;
  unsigned int limit;
  unsigned int lowerBound;
  unsigned int upperBound;
  NV_GPS_THERM_LIMIT_SRC limitSource;
};

/* 5941 */
struct _NV_GPS_SET_THERMAL_LIMIT_PARM
{
  unsigned int version;
  NV_GPS_SENSOR_INDEX sensorIndex;
  unsigned int newLimit;
};

/* 5942 */
struct _NV_GPS_GET_PERF_SENSOR_COUNTERS_PARAM_V1
{
  unsigned int version;
  unsigned int objHndl;
  unsigned __int16 blockId;
  unsigned int nextExpectedSampleTime;
  unsigned int countersReq;
  unsigned int countersReturned;
  unsigned int counterBlock[32];
};

/* 5943 */
struct NV_PCLK_RANGE
{
  unsigned int uMaxPixClk;
  unsigned int uMinPixClk;
};

/* 5944 */
struct NV_GET_PCLK
{
  unsigned int uOrgPixelClock;
  unsigned int uCurrPixelClock;
  unsigned int uCurrSpreadSpectrum;
  NV_PCLK_RANGE uFineAdjustBounds;
  NV_PCLK_RANGE uCourseAdjustBounds;
};

/* 5945 */
struct NV_SET_PCLK
{
  NV_PCLK_RANGE uAllowedRanges[10];
  NV_PCLK_RANGE uDisallowedRanges[10];
};

/* 5946 */
struct NV_GPU_ECC_STATUS_INFO
{
  unsigned int version;
  unsigned __int32 isSupported : 1;
  _NV_ECC_CONFIGURATION configurationOptions;
  unsigned __int32 isEnabled : 1;
};

/* 5947 */
struct NV_GPU_ECC_ERROR_INFO::__unnamed
{
  unsigned __int64 singleBitErrors;
  unsigned __int64 doubleBitErrors;
};

/* 5948 */
struct NV_GPU_ECC_ERROR_INFO
{
  unsigned int version;
  NV_GPU_ECC_ERROR_INFO::__unnamed current;
  NV_GPU_ECC_ERROR_INFO::__unnamed aggregate;
};

/* 5949 */
struct NV_GPU_ECC_CONFIGURATION_INFO
{
  unsigned int version;
  unsigned __int32 isEnabled : 1;
  unsigned __int32 isEnabledByDefault : 1;
};

/* 5950 */
union NV_EVENT_REGISTER_CALLBACK::__unnamed
{
  void (__cdecl *nvThermalCallback)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL, void *);
  void (__cdecl *nvFanSpeedCallback)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL, void *);
};

/* 5951 */
struct NV_EVENT_REGISTER_CALLBACK
{
  unsigned int version;
  NV_EVENT_TYPE eventId;
  void *callbackParam;
  NV_EVENT_REGISTER_CALLBACK::__unnamed nvCallBackFunc;
};

/* 5952 */
struct NvEventHandle__
{
  int unused;
};

/* 5953 */
struct NV_SCANOUT_INTENSITY_DATA_V2
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  float *blendingTexture;
  float *offsetTexture;
  unsigned int offsetTexChannels;
};

/* 5954 */
struct NvSBox
{
  int sX;
  int sY;
  int sWidth;
  int sHeight;
};

/* 5955 */
struct NV_SCANOUT_WARPING_DATA
{
  unsigned int version;
  float *vertices;
  NV_GPU_WARPING_VERTICE_FORMAT vertexFormat;
  int numVertices;
  NvSBox *textureRect;
};

/* 5956 */
struct _NV_GPU_QUERY_ILLUMINATION_SUPPORT_PARM_V1
{
  unsigned int version;
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  unsigned int bSupported;
};

/* 5957 */
struct _NV_GPU_GET_ILLUMINATION_PARM_V1
{
  unsigned int version;
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  unsigned int Value;
};

/* 5958 */
struct _NV_GPU_SET_ILLUMINATION_PARM_V1
{
  unsigned int version;
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  unsigned int Value;
};

/* 5959 */
struct NV_DISPLAY_PORT_INFO
{
  unsigned int version;
  unsigned int dpcd_ver;
  NV_DP_LINK_RATE maxLinkRate;
  NV_DP_LANE_COUNT maxLaneCount;
  NV_DP_LINK_RATE curLinkRate;
  NV_DP_LANE_COUNT curLaneCount;
  NV_DP_COLOR_FORMAT colorFormat;
  NV_DP_DYNAMIC_RANGE dynamicRange;
  NV_DP_COLORIMETRY colorimetry;
  NV_DP_BPC bpc;
  unsigned __int32 isDp : 1;
  unsigned __int32 isInternalDp : 1;
  unsigned __int32 isColorCtrlSupported : 1;
  unsigned __int32 is6BPCSupported : 1;
  unsigned __int32 is8BPCSupported : 1;
  unsigned __int32 is10BPCSupported : 1;
  unsigned __int32 is12BPCSupported : 1;
  unsigned __int32 is16BPCSupported : 1;
  unsigned __int32 isYCrCb422Supported : 1;
  unsigned __int32 isYCrCb444Supported : 1;
};

/* 5960 */
struct NV_DISPLAY_PORT_CONFIG
{
  unsigned int version;
  NV_DP_LINK_RATE linkRate;
  NV_DP_LANE_COUNT laneCount;
  NV_DP_COLOR_FORMAT colorFormat;
  NV_DP_DYNAMIC_RANGE dynamicRange;
  NV_DP_COLORIMETRY colorimetry;
  NV_DP_BPC bpc;
  unsigned __int32 isHPD : 1;
  unsigned __int32 isSetDeferred : 1;
  unsigned __int32 isChromaLpfOff : 1;
  unsigned __int32 isDitherOff : 1;
  unsigned __int32 testLinkTrain : 1;
  unsigned __int32 testColorChange : 1;
};

/* 5961 */
struct NV_HDMI_SUPPORT_INFO
{
  unsigned int version;
  unsigned __int32 isGpuHDMICapable : 1;
  unsigned __int32 isMonUnderscanCapable : 1;
  unsigned __int32 isMonBasicAudioCapable : 1;
  unsigned __int32 isMonYCbCr444Capable : 1;
  unsigned __int32 isMonYCbCr422Capable : 1;
  unsigned __int32 isMonxvYCC601Capable : 1;
  unsigned __int32 isMonxvYCC709Capable : 1;
  unsigned __int32 isMonHDMI : 1;
  unsigned int EDID861ExtRev;
};

/* 5962 */
struct NV_HDMI_STEREO_MODE
{
  unsigned __int16 HVisible;
  unsigned __int16 VVisible;
  unsigned __int16 HActive;
  unsigned __int16 VActive;
  unsigned __int16 VActiveSpace[2];
  unsigned __int16 rr;
  NV_HDMI_STEREO_TYPE stereoType;
};

/* 5963 */
struct NV_HDMI_STEREO_MODES_LIST_V1
{
  unsigned int version;
  unsigned int displayId;
  unsigned __int16 enumIndex;
  unsigned __int16 count;
  unsigned int width;
  unsigned int height;
  unsigned int refreshRate;
  unsigned __int32 bMatchDimension : 1;
  unsigned __int32 bMatchRR : 1;
  unsigned __int32 bPassThroughMode : 1;
  unsigned __int32 reserved : 29;
  unsigned __int16 numberOfModes;
  NV_HDMI_STEREO_MODE modeList[256];
};

/* 5964 */
struct NV_INFOFRAME_HEADER
{
  char type;
  char version;
  char length;
};

/* 5965 */
struct NV_AUDIO_INFOFRAME
{
  __int8 channelCount : 3;
  __int8 rsvd_bits_byte1 : 1;
  __int8 codingType : 4;
  __int8 sampleSize : 2;
  __int8 sampleRate : 3;
  __int8 rsvd_bits_byte2 : 3;
  __int8 codingExtensionType : 5;
  __int8 rsvd_bits_byte3 : 3;
  char speakerPlacement;
  __int8 lfePlaybackLevel : 2;
  __int8 rsvd_bits_byte5 : 1;
  __int8 levelShift : 4;
  __int8 downmixInhibit : 1;
  char rsvd_byte6;
  char rsvd_byte7;
  char rsvd_byte8;
  char rsvd_byte9;
  char rsvd_byte10;
};

/* 5966 */
struct NV_VIDEO_INFOFRAME
{
  __int8 scanInfo : 2;
  __int8 barInfo : 2;
  __int8 activeFormatInfoPresent : 1;
  __int8 colorSpace : 2;
  __int8 rsvd_bits_byte1 : 1;
  __int8 activeFormatAspectRatio : 4;
  __int8 picAspectRatio : 2;
  __int8 colorimetry : 2;
  __int8 nonuniformScaling : 2;
  __int8 rgbQuantizationRange : 2;
  __int8 extendedColorimetry : 3;
  __int8 itContent : 1;
  __int8 vic : 7;
  __int8 rsvd_bits_byte4 : 1;
  __int8 pixelRepeat : 4;
  __int8 contentTypes : 2;
  __int8 yccQuantizationRange : 2;
  char topBarLow;
  char topBarHigh;
  char bottomBarLow;
  char bottomBarHigh;
  char leftBarLow;
  char leftBarHigh;
  char rightBarLow;
  char rightBarHigh;
};

/* 5967 */
union NV_INFOFRAME::__unnamed
{
  NV_AUDIO_INFOFRAME audio;
  NV_VIDEO_INFOFRAME video;
};

/* 5968 */
struct NV_INFOFRAME
{
  NV_INFOFRAME_HEADER header;
  NV_INFOFRAME::__unnamed u;
};

/* 5969 */
struct _NV_INFOFRAME_STATE
{
  unsigned __int32 bDisabled : 1;
  unsigned __int32 bDriverCtrl : 1;
  unsigned __int32 reserved : 30;
};

/* 5970 */
struct NV_INFOFRAME_PROPERTY
{
  unsigned __int32 mode : 4;
  unsigned __int32 blackList : 2;
  unsigned __int32 reserved : 10;
  unsigned __int32 version : 8;
  unsigned __int32 length : 8;
};

/* 5971 */
struct NV_INFOFRAME_AUDIO
{
  unsigned __int32 codingType : 5;
  unsigned __int32 codingExtensionType : 6;
  unsigned __int32 sampleSize : 3;
  unsigned __int32 sampleRate : 4;
  unsigned __int32 channelCount : 4;
  unsigned __int32 speakerPlacement : 9;
  unsigned __int32 downmixInhibit : 2;
  unsigned __int32 lfePlaybackLevel : 3;
  unsigned __int32 levelShift : 5;
  unsigned __int32 Future12 : 2;
  unsigned __int32 Future2x : 4;
  unsigned __int32 Future3x : 4;
  unsigned __int32 Future52 : 2;
  unsigned __int32 Future6 : 9;
  unsigned __int32 Future7 : 9;
  unsigned __int32 Future8 : 9;
  unsigned __int32 Future9 : 9;
  unsigned __int32 Future10 : 9;
};

/* 5972 */
struct NV_INFOFRAME_VIDEO
{
  unsigned __int32 vic : 8;
  unsigned __int32 pixelRepeat : 5;
  unsigned __int32 colorSpace : 3;
  unsigned __int32 colorimetry : 3;
  unsigned __int32 extendedColorimetry : 4;
  unsigned __int32 rgbQuantizationRange : 3;
  unsigned __int32 yccQuantizationRange : 3;
  unsigned __int32 itContent : 2;
  unsigned __int32 contentTypes : 3;
  unsigned __int32 scanInfo : 3;
  unsigned __int32 activeFormatInfoPresent : 2;
  unsigned __int32 activeFormatAspectRatio : 5;
  unsigned __int32 picAspectRatio : 3;
  unsigned __int32 nonuniformScaling : 3;
  unsigned __int32 barInfo : 3;
  unsigned __int32 top_bar : 17;
  unsigned __int32 bottom_bar : 17;
  unsigned __int32 left_bar : 17;
  unsigned __int32 right_bar : 17;
  unsigned __int32 Future17 : 2;
  unsigned __int32 Future47 : 2;
};

/* 5973 */
union NV_INFOFRAME_DATA::__unnamed
{
  NV_INFOFRAME_PROPERTY property;
  NV_INFOFRAME_AUDIO audio;
  NV_INFOFRAME_VIDEO video;
};

/* 5974 */
struct NV_INFOFRAME_DATA
{
  unsigned int version;
  unsigned __int16 size;
  char cmd;
  char type;
  NV_INFOFRAME_DATA::__unnamed infoframe;
};

/* 5975 */
struct NV_COLOR_DATA::__unnamed
{
  char colorFormat;
  char colorimetry;
};

/* 5976 */
struct __declspec(align(4)) NV_COLOR_DATA
{
  unsigned int version;
  unsigned __int16 size;
  char cmd;
  NV_COLOR_DATA::__unnamed data;
};

/* 5977 */
struct NV_VIRTUALMODE_INFO
{
  unsigned __int32 isCapableOfVirtualMode : 1;
  unsigned __int32 isInVirtualMode : 1;
  unsigned __int32 reserved : 30;
};

/* 5978 */
union NV_VIRTUALMODE_DATA::__unnamed
{
  NV_VIRTUALMODE_INFO virtualModeInfo;
};

/* 5979 */
struct NV_VIRTUALMODE_DATA
{
  unsigned int version;
  NV_VIRTUALMODE_CMD cmd;
  NV_VIRTUALMODE_DATA::__unnamed data;
};

/* 5980 */
struct _NV_DISPLAY_MODE_INFO
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int refreshRate1K;
  unsigned __int32 preferred : 1;
  unsigned __int32 reserved : 31;
};

/* 5981 */
struct NV_DISPLAY_DVC_INFO
{
  unsigned int version;
  unsigned int currentLevel;
  unsigned int minLevel;
  unsigned int maxLevel;
};

/* 5982 */
struct NV_DISPLAY_DVC_INFO_EX
{
  unsigned int version;
  int currentLevel;
  int minLevel;
  int maxLevel;
  int defaultLevel;
};

/* 5983 */
struct NV_DISPLAY_HUE_INFO
{
  unsigned int version;
  unsigned int currentHueAngle;
  unsigned int defaultHueAngle;
};

/* 5984 */
struct NV_DISPLAY_IMAGE_SHARPENING_INFO
{
  unsigned int version;
  unsigned int currentLevel;
  unsigned int minLevel;
  unsigned int maxLevel;
};

/* 5985 */
struct NV_TV_ENCODER_CONTROLS::__unnamed
{
  unsigned int defaultLevel;
  unsigned int currentLevel;
  unsigned int minLevel;
  unsigned int maxLevel;
};

/* 5986 */
struct NV_TV_ENCODER_CONTROLS
{
  unsigned int version;
  NV_TV_ENCODER_CONTROLS::__unnamed flicker;
  NV_TV_ENCODER_CONTROLS::__unnamed saturation;
};

/* 5987 */
struct $61AFAF7C75EA4367E0DBADF714F35922
{
  unsigned __int32 isInterlaced : 4;
  unsigned __int32 reserved0 : 12;
  unsigned __int32 : 16;
  unsigned __int32 tvFormat : 8;
  unsigned __int32 : 24;
  unsigned __int32 scaling : 8;
};

/* 5988 */
struct $8805127EC27D1E9C17713C1C8B4EB2EE
{
  _BYTE gap0[4];
  unsigned __int32 ceaId : 8;
};

/* 5989 */
struct $DC7A541B450CB0765955C3307DCD7AC9
{
  _BYTE gap0[4];
  unsigned __int32 nvPsfId : 8;
};

/* 5990 */
union $C9D51BD644BCB46FC3896AF87166612E
{
  $61AFAF7C75EA4367E0DBADF714F35922 __s0;
  $8805127EC27D1E9C17713C1C8B4EB2EE __s1;
  $DC7A541B450CB0765955C3307DCD7AC9 __s2;
};

/* 5991 */
struct NV_TIMING_FLAG
{
  $C9D51BD644BCB46FC3896AF87166612E ___u0;
};

/* 5992 */
struct _NV_MONITOR_CAPS_VSDB
{
  __int8 sourcePhysicalAddressB : 4;
  __int8 sourcePhysicalAddressA : 4;
  __int8 sourcePhysicalAddressD : 4;
  __int8 sourcePhysicalAddressC : 4;
  __int8 supportDualDviOperation : 1;
  __int8 reserved6 : 2;
  __int8 supportDeepColorYCbCr444 : 1;
  __int8 supportDeepColor30bits : 1;
  __int8 supportDeepColor36bits : 1;
  __int8 supportDeepColor48bits : 1;
  __int8 supportAI : 1;
  char maxTmdsClock;
  __int8 cnc0SupportGraphicsTextContent : 1;
  __int8 cnc1SupportPhotoContent : 1;
  __int8 cnc2SupportCinemaContent : 1;
  __int8 cnc3SupportGameContent : 1;
  __int8 reserved8 : 1;
  __int8 hasVicEntries : 1;
  __int8 hasInterlacedLatencyField : 1;
  __int8 hasLatencyField : 1;
  char videoLatency;
  char audioLatency;
  char interlacedVideoLatency;
  char interlacedAudioLatency;
  __int8 reserved13 : 7;
  __int8 has3dEntries : 1;
  __int8 hdmi3dLength : 5;
  __int8 hdmiVicLength : 3;
  char hdmi_vic[7];
  char hdmi_3d[31];
};

/* 5993 */
struct _NV_MONITOR_CAPS_VCDB
{
  __int8 quantizationRangeYcc : 1;
  __int8 quantizationRangeRgb : 1;
  __int8 scanInfoPreferredVideoFormat : 2;
  __int8 scanInfoITVideoFormats : 2;
  __int8 scanInfoCEVideoFormats : 2;
};

/* 5994 */
union _NV_MONITOR_CAPABILITIES::__unnamed
{
  _NV_MONITOR_CAPS_VSDB vsdb;
  _NV_MONITOR_CAPS_VCDB vcdb;
};

/* 5995 */
struct __declspec(align(4)) _NV_MONITOR_CAPABILITIES
{
  unsigned int version;
  unsigned __int16 size;
  unsigned int infoType;
  unsigned int connectorType;
  __int8 bIsValidInfo : 1;
  _NV_MONITOR_CAPABILITIES::__unnamed data;
};

/* 5996 */
struct NV_CUSTOM_DISPLAY
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  _NV_FORMAT colorFormat;
  NV_VIEWPORTF srcPartition;
  float xRatio;
  float yRatio;
  tagNV_TIMING timing;
  unsigned __int32 hwModeSetOnly : 1;
};

/* 5997 */
struct NV_UNDERSCAN_CAP
{
  unsigned int version;
  float xRatioMin;
  float xRatioMax;
  float yRatioMin;
  float yRatioMax;
  unsigned __int32 supportSourceUnderscan : 1;
  unsigned __int32 supportScalerUnderscan : 1;
  unsigned __int32 supportMonitorIdMatch : 1;
  unsigned __int32 supportDisplayOutputIdMatch : 1;
  unsigned __int32 supportXYIndependentCtrl : 1;
  unsigned __int32 isSourceUnderscanRecommended : 1;
  unsigned __int32 isScalerUnderscanRecommended : 1;
};

/* 5998 */
struct NV_UNDERSCAN_CONFIG
{
  unsigned int version;
  float xRatio;
  float yRatio;
  unsigned int nativeWidth;
  unsigned int nativeHeight;
  unsigned int nativeRR;
  unsigned __int32 isInterlaced : 1;
  unsigned __int32 isScalerUnderscan : 1;
  unsigned __int32 isOnThisMonitorOnly : 1;
  unsigned __int32 isOnThisDisplayOutputIdOnly : 1;
  unsigned __int32 isEnabled : 1;
  unsigned __int32 reserved : 27;
};

/* 5999 */
struct _NV_DISPLAY_FEATURE
{
  unsigned __int32 enableScalerUnderscan : 1;
  unsigned __int32 enableCEoverHDMI : 1;
  unsigned __int32 reservedOEM : 1;
  unsigned __int32 isDriverCtrlCEoverHDMI : 1;
  unsigned __int32 reserved : 28;
};

/* 6000 */
struct _NV_DPCD_PARAMS_V2
{
  unsigned int version;
  unsigned int displayId;
  _NV_DPCD_CMD cmd;
  unsigned int addr;
  char data[16];
  unsigned int size;
  _NV_DPCD_REPLY_TYPE replyType;
};

/* 6001 */
struct NV_COPROC_FLAGS_EX
{
  unsigned int version;
  unsigned __int32 is_IGPU_MODE_ONLY : 1;
  unsigned __int32 is_DGPU_MODE_ONLY : 1;
  unsigned __int32 reserved : 30;
};

/* 6002 */
struct NV_COPROC_APP_INFO
{
  unsigned int version;
  unsigned int appStatus;
};

/* 6003 */
struct NV_HYBRID_APP_INFO
{
  unsigned int version;
  char appName[256];
  char friendlyName[256];
};

/* 6004 */
struct _NV_DISPLAY_BLANKING_INFO_V1
{
  unsigned int version;
  unsigned __int32 blankingState : 1;
  unsigned __int32 persistBlankingAcrossHotPlugUnplug : 1;
  unsigned __int32 reserved : 30;
};

/* 6005 */
struct NV_DISPLAY_REFRESH_RATE
{
  unsigned int numerator;
  unsigned int denominator;
};

/* 6006 */
struct NV_DISPLAY_SETTING
{
  unsigned int width;
  unsigned int height;
  _NV_FORMAT colorFormat;
  NV_DISPLAY_REFRESH_RATE refreshRate;
  unsigned int reserved;
};

/* 6007 */
union $578DDD834B579922849BDE64D45EDAAA
{
  unsigned int targetId;
  unsigned int displayId;
};

/* 6008 */
struct NV_HCLONE_PATH_V1
{
  unsigned int version;
  unsigned __int32 isNonNVIDIA : 1;
  unsigned __int32 isAttachedToDesktop : 1;
  unsigned __int32 reserved : 30;
  unsigned int sourceId;
  $578DDD834B579922849BDE64D45EDAAA ___u5;
  NV_DISPLAY_SETTING dispSetting;
  unsigned int reserved1;
};

/* 6009 */
struct NV_HCLONE_NODE_V1
{
  unsigned int version;
  unsigned int numPaths;
  NV_HCLONE_PATH_V1 *pHClonePathArray;
  unsigned int reserved1;
};

/* 6010 */
struct NV_HCLONE_TOPOLOGY_V1
{
  unsigned int version;
  unsigned int numHCloneNodes;
  NV_HCLONE_NODE_V1 *pHCloneNodeArray;
  unsigned __int32 isMultiHClonePairsEnabled : 1;
  unsigned __int32 isNWayHCloneNodesEnabled : 1;
  unsigned __int32 reserved1 : 30;
  NV_HCLONE_HOTPLUG_BEHAVIOR HCloneHotPlugBehavior;
};

/* 6011 */
struct NV_MOSAIC_TOPO_BRIEF
{
  unsigned int version;
  NV_MOSAIC_TOPO topo;
  unsigned int enabled;
  unsigned int isPossible;
};

/* 6012 */
struct NV_MOSAIC_DISPLAY_SETTING
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  unsigned int bpp;
  unsigned int freq;
};

/* 6013 */
struct NV_MOSAIC_SUPPORTED_TOPO_INFO
{
  unsigned int version;
  unsigned int topoBriefsCount;
  NV_MOSAIC_TOPO_BRIEF topoBriefs[35];
  unsigned int displaySettingsCount;
  NV_MOSAIC_DISPLAY_SETTING displaySettings[40];
};

/* 6014 */
struct NV_MOSAIC_TOPO_DETAILS::__unnamed
{
  NvPhysicalGpuHandle__ *hPhysicalGPU;
  unsigned int displayOutputId;
  int overlapX;
  int overlapY;
};

/* 6015 */
struct NV_MOSAIC_TOPO_DETAILS
{
  unsigned int version;
  NvLogicalGpuHandle__ *hLogicalGPU;
  unsigned int validityMask;
  unsigned int rowCount;
  unsigned int colCount;
  NV_MOSAIC_TOPO_DETAILS::__unnamed gpuLayout[8][8];
};

/* 6016 */
struct NV_MOSAIC_TOPO_GROUP
{
  unsigned int version;
  NV_MOSAIC_TOPO_BRIEF brief;
  unsigned int count;
  NV_MOSAIC_TOPO_DETAILS topos[2];
};

/* 6017 */
struct NV_MOSAIC_GRID_TOPO_DISPLAY
{
  unsigned int displayId;
  int overlapX;
  int overlapY;
  _NV_ROTATE rotation;
  unsigned int cloneGroup;
};

/* 6018 */
struct NV_MOSAIC_GRID_TOPO
{
  unsigned int version;
  unsigned int rows;
  unsigned int columns;
  unsigned int displayCount;
  unsigned __int32 applyWithBezelCorrect : 1;
  unsigned __int32 immersiveGaming : 1;
  unsigned __int32 baseMosaic : 1;
  unsigned __int32 driverReloadAllowed : 1;
  unsigned __int32 acceleratePrimaryDisplay : 1;
  unsigned __int32 reserved : 27;
  NV_MOSAIC_GRID_TOPO_DISPLAY displays[64];
  NV_MOSAIC_DISPLAY_SETTING displaySettings;
};

/* 6019 */
struct NV_MOSAIC_CAPS_V2
{
  unsigned int version;
  unsigned __int32 bSupportsImmersiveGaming : 1;
  unsigned __int32 bSupportsMosaic : 1;
  unsigned __int32 bSupportsGlobalRotation : 1;
  unsigned __int32 bSupportsPerDisplayRotation : 1;
  unsigned __int32 bSupportsPerDisplaySettings : 1;
  unsigned __int32 bSupportsOverlap : 1;
  unsigned __int32 bSupportsGaps : 1;
  unsigned __int32 bSupportsUnevenGapping : 1;
  unsigned __int32 bSupportsPassiveStereo : 1;
  unsigned __int32 reserved : 23;
};

/* 6020 */
struct NV_MOSAIC_DISPLAY_DETAILS
{
  unsigned int displayId;
  unsigned int problemFlags;
  unsigned __int32 supportsRotation : 1;
  unsigned __int32 reserved : 31;
};

/* 6021 */
struct NV_MOSAIC_DISPLAY_CAPS_V2
{
  unsigned int version;
  unsigned int displayCount;
  NV_MOSAIC_DISPLAY_DETAILS displays[128];
  unsigned int displaySettingsCount;
  NV_MOSAIC_DISPLAY_SETTING displaySettings[1600];
  unsigned int problemFlags;
};

/* 6022 */
struct _NV_RECT
{
  unsigned int left;
  unsigned int top;
  unsigned int right;
  unsigned int bottom;
};

/* 6023 */
struct NV_MOSAIC_DISPLAY_TOPO_STATUS::__unnamed
{
  unsigned int displayId;
  unsigned int errorFlags;
  unsigned int warningFlags;
  unsigned __int32 supportsRotation : 1;
  unsigned __int32 reserved : 31;
};

/* 6024 */
struct NV_MOSAIC_DISPLAY_TOPO_STATUS
{
  unsigned int version;
  unsigned int errorFlags;
  unsigned int warningFlags;
  unsigned int displayCount;
  NV_MOSAIC_DISPLAY_TOPO_STATUS::__unnamed displays[128];
};

/* 6025 */
struct NV_MOSAIC_TOPOLOGY::__unnamed
{
  NvPhysicalGpuHandle__ *hPhysicalGPU;
  unsigned int displayOutputId;
  int overlapX;
  int overlapY;
};

/* 6026 */
struct NV_MOSAIC_TOPOLOGY
{
  unsigned int version;
  unsigned int rowCount;
  unsigned int colCount;
  NV_MOSAIC_TOPOLOGY::__unnamed gpuLayout[8][8];
};

/* 6027 */
struct NV_MOSAIC_SUPPORTED_TOPOLOGIES
{
  unsigned int version;
  unsigned int totalCount;
  NV_MOSAIC_TOPOLOGY topos[16];
};

/* 6028 */
struct NV_GET_CURRENT_SLI_STATE
{
  unsigned int version;
  unsigned int maxNumAFRGroups;
  unsigned int numAFRGroups;
  unsigned int currentAFRIndex;
  unsigned int nextFrameAFRIndex;
  unsigned int previousFrameAFRIndex;
  unsigned int bIsCurAFRGroupNew;
};

/* 6029 */
struct NVDX_ObjectHandle__
{
  int unused;
};

/* 6030 */
struct _NV_OVLY_SURFS_INFO
{
  NVDX_ObjectHandle__ *handle[6];
  unsigned int numSurfs;
};

/* 6031 */
struct NV_DX_CREATE_VIDEO_PARAMS2
{
  unsigned int version;
  unsigned int cvFlags;
  unsigned int flipQueueHint;
  unsigned int maxSrcWidth;
  unsigned int maxSrcHeight;
  unsigned int dwNumOvlSurfs;
  NVDX_ObjectHandle__ *hOvlSurfs[6];
};

/* 6032 */
struct NV_DX_PRESENT_VIDEO_PARAMS1
{
  unsigned int version;
  NVDX_ObjectHandle__ *surfaceHandle;
  unsigned int pvFlags;
  unsigned int colourKey;
  unsigned int timeStampLow;
  unsigned int timeStampHigh;
  unsigned int flipRate;
  NvSBox srcUnclipped;
  NvSBox srcClipped;
  NvSBox dst;
};

/* 6033 */
struct _NV_DX_VIDEO_STEREO_INFO
{
  unsigned int dwVersion;
  NVDX_ObjectHandle__ *hSurface;
  NVDX_ObjectHandle__ *hLinkedSurface;
  _NV_STEREO_VIDEO_FORMAT eFormat;
  int sViewOffset;
  int bStereoEnable;
};

/* 6034 */
struct _NV_GAMUT_METADATA_RANGE
{
  unsigned __int32 GBD_Color_Space : 3;
  unsigned __int32 GBD_Color_Precision : 2;
  unsigned __int32 Rsvd : 2;
  unsigned __int32 Format_Flag : 1;
  unsigned __int32 Min_Red_Data : 12;
  unsigned __int32 Max_Red_Data : 12;
  unsigned __int32 Min_Green_Data : 12;
  unsigned __int32 Max_Green_Data : 12;
  unsigned __int32 Min_Blue_Data : 12;
  unsigned __int32 Max_Blue_Data : 12;
};

/* 6035 */
struct _NV_GAMUT_METADATA_VERTICES
{
  unsigned __int32 GBD_Color_Space : 3;
  unsigned __int32 GBD_Color_Precision : 2;
  unsigned __int32 Rsvd : 1;
  unsigned __int32 Facet_Mode : 1;
  unsigned __int32 Format_Flag : 1;
  unsigned __int32 Number_Vertices_H : 8;
  unsigned __int32 Number_Vertices_L : 8;
  unsigned __int32 Black_Y_R : 12;
  unsigned __int32 Black_Cb_G : 12;
  unsigned __int32 Black_Cr_B : 12;
  unsigned __int32 Red_Y_R : 12;
  unsigned __int32 Red_Cb_G : 12;
  unsigned __int32 Red_Cr_B : 12;
  unsigned __int32 Green_Y_R : 12;
  unsigned __int32 Green_Cb_G : 12;
  unsigned __int32 Green_Cr_B : 12;
  unsigned __int32 Blue_Y_R : 12;
  unsigned __int32 Blue_Cb_G : 12;
  unsigned __int32 Blue_Cr_B : 12;
};

/* 6036 */
union _NV_GAMUT_METADATA::__unnamed
{
  _NV_GAMUT_METADATA_RANGE rangeData;
  _NV_GAMUT_METADATA_VERTICES verticesData;
};

/* 6037 */
struct _NV_GAMUT_METADATA
{
  _NV_GAMUT_METADATA::__unnamed data;
};

/* 6038 */
struct _NVAPI_SURFACE_LAYOUT_STRUCT
{
  int bEnableLayoutOverride;
  _NVAPI_SURFACE_LAYOUT slLayout;
  unsigned int reserved[4];
};

/* 6039 */
struct _NVAPI_VIDEO_SRC_INFO
{
  unsigned int srcWidth;
  unsigned int srcHeight;
  _NV_CODEC codecType;
  unsigned int avgBitrate;
  unsigned __int64 reserved1;
  unsigned __int64 reserved2;
};

/* 6040 */
struct _NVAPI_DESKTOP_RES
{
  unsigned int width;
  unsigned int height;
  unsigned int bitsPerPixel;
  unsigned int refreshRate;
  unsigned __int64 reserved1;
  unsigned __int64 reserved2;
};

/* 6041 */
struct _NVAPI_VIDEO_PROCESSING_CAPS
{
  unsigned __int64 deinterlaceMode;
  unsigned __int64 videoEnhance;
  unsigned __int64 colorControl;
  unsigned __int64 gamma;
  unsigned __int64 miscCaps;
  unsigned __int64 reserved1;
  unsigned __int64 reserved2;
  unsigned __int64 reserved3;
};

/* 6042 */
struct _NVAPI_VIDEO_CAPS
{
  unsigned int maxFlipRate;
  _NV_CODEC hwDecode;
  unsigned __int64 vidFeature;
  unsigned int perfLevel;
  unsigned int numVidProfiles;
  unsigned int maxResPixels;
  unsigned int reserved1;
  _NVAPI_VIDEO_PROCESSING_CAPS vidProcCaps[4];
};

/* 6043 */
struct _NVAPI_VIDEO_CAPS_PACKET
{
  unsigned int packetVer;
  unsigned int numVidStreams;
  _NVAPI_VIDEO_SRC_INFO vidSrcInfo[4];
  _NVAPI_DESKTOP_RES res[4];
  unsigned __int64 renderMode;
  unsigned __int64 totalFB;
  unsigned __int16 NumExtOvlBufNeeded;
  unsigned __int16 reserved1;
  unsigned int reserved2;
  _NVAPI_VIDEO_CAPS videoCaps[4];
};

/* 6044 */
struct _NV_DX_VIDEO_CAPS
{
  unsigned int version;
  _NVAPI_VIDEO_CAPS_PACKET videoCapsPacket;
};

/* 6045 */
struct _NVAPI_QUERY_STEREO_INFO
{
  unsigned int dwFormats;
  unsigned __int32 bIsSupported : 1;
  unsigned __int32 bIsEnabled : 1;
  unsigned __int32 dwReserved1 : 30;
  unsigned int dwReserved2[4];
};

/* 6046 */
struct _NVAPI_QUERY_COLOR_INFO
{
  unsigned int dwColorSpaces;
  unsigned int dwReserved[4];
};

/* 6047 */
union $03DC6AEB97033392CAFA7546B3887273
{
  _NVAPI_QUERY_STEREO_INFO stStereoInfo;
  _NVAPI_QUERY_COLOR_INFO stColorInfo;
};

/* 6048 */
struct _NVAPI_DX_QUERY_VIDEO_INFO
{
  unsigned int dwVersion;
  _NVAPI_D3D9_QUERY_COMMAND eQueryCommand;
  $03DC6AEB97033392CAFA7546B3887273 ___u2;
};

/* 6049 */
struct __declspec(align(8)) _NVAPI_GET_VIDEO_STATE_COMPONENT::__unnamed::__unnamed::__unnamed
{
  unsigned __int64 pData;
  unsigned int dwSize;
};

/* 6050 */
struct _NVAPI_GET_VIDEO_STATE_COMPONENT::__unnamed::__unnamed
{
  unsigned int dwAppKey;
  unsigned __int32 bTopPriority : 1;
  unsigned __int32 bHasCustomAlgo : 1;
  unsigned __int32 bReserved : 30;
  _NVAPI_GET_VIDEO_STATE_COMPONENT::__unnamed::__unnamed::__unnamed customAlgo;
};

/* 6051 */
union $9E12B9107DAB45EC4CE672C0E82AB8E4
{
  unsigned __int64 qwReserved[9];
  _NVAPI_GET_VIDEO_STATE_COMPONENT::__unnamed::__unnamed appInfo;
};

/* 6052 */
struct _NVAPI_GET_VIDEO_STATE_COMPONENT
{
  unsigned int version;
  unsigned int componentID;
  unsigned __int32 bIsSupported : 1;
  unsigned __int32 bIsOverridenByUser : 1;
  unsigned __int32 reserved1 : 30;
  unsigned int isEnabled;
  unsigned int minValue;
  unsigned int maxValue;
  unsigned int totalSteps;
  unsigned int defaultValue;
  unsigned int unityValue;
  unsigned int currentValueActive;
  unsigned __int64 defaultAlgo;
  unsigned __int64 currentAlgoActive;
  $9E12B9107DAB45EC4CE672C0E82AB8E4 ___u14;
};

/* 6053 */
struct __declspec(align(8)) _NVAPI_SET_VIDEO_STATE_COMPONENT::__unnamed::__unnamed::__unnamed
{
  unsigned __int64 pData;
  unsigned int dwSize;
};

/* 6054 */
struct _NVAPI_SET_VIDEO_STATE_COMPONENT::__unnamed::__unnamed
{
  unsigned int dwAppKey;
  unsigned __int32 bTopPriority : 1;
  unsigned __int32 bHasCustomAlgo : 1;
  unsigned __int32 bReserved : 30;
  _NVAPI_SET_VIDEO_STATE_COMPONENT::__unnamed::__unnamed::__unnamed customAlgo;
};

/* 6055 */
union $C314A3750671D9E172BEA991C7DD71A6
{
  unsigned __int64 qwReserved[4];
  _NVAPI_SET_VIDEO_STATE_COMPONENT::__unnamed::__unnamed appInfo;
};

/* 6056 */
struct _NVAPI_SET_VIDEO_STATE_COMPONENT
{
  unsigned int version;
  unsigned int componentID;
  unsigned int enable;
  unsigned int setToValue;
  unsigned __int64 setToAlgo;
  unsigned int retStatus;
  unsigned int reserved;
  $C314A3750671D9E172BEA991C7DD71A6 ___u7;
};

/* 6057 */
struct _NVAPI_VIDEO_FEATURE_DETAILS
{
  _NVAPI_VIDEO_FEATURE eFeature;
  _NVAPI_VIDEO_ENGINES eEngine;
  _NVAPI_VIDEO_DRIVER_ENTRY_POINT eEntryPoint;
  unsigned int dwReserved;
};

/* 6058 */
struct _NVAPI_VIDEO_FEATURE_DESCRIPTOR
{
  unsigned int version;
  _NVAPI_VIDEO_FEATURE_GET_FLAG eVideoFeatureGetID;
  unsigned int dwVFCount;
  unsigned int dwStartVFCount;
  _NVAPI_VIDEO_FEATURE_DETAILS astFeatureDetails[3];
  unsigned int adwReserved[4];
};

/* 6059 */
struct _NVAPI_VID_FEATURE_STRINGS
{
  _NVAPI_VIDEO_FEATURE eFeature;
  char szFeature[64];
  char szEngine[64];
  char szDrvEntryPoint[64];
  char szReserved1[64];
};

/* 6060 */
struct _NVAPI_DX_VIDEO_FEATURE_DETAILS
{
  unsigned int version;
  _NVAPI_VIDEO_FEATURE_DESCRIPTOR videoFeaturesPacket;
  _NVAPI_VID_FEATURE_STRINGS astFeatureDescNames[3];
};

/* 6061 */
struct NV_SLI_INFO
{
  unsigned int version;
  _NV_SLI_MODE mode;
  unsigned int gpus;
};

/* 6062 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUID_COUNT
{
  unsigned int dwGuidCount;
};

/* 6063 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUIDS
{
  _GUID guids[4];
};

/* 6064 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_GUID
{
  _GUID guid;
};

/* 6065 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_ENABLE
{
  unsigned int *pSurface;
  unsigned int bEnable;
};

/* 6066 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_KEY
{
  unsigned int dwEncryptKeyProtectionMode;
  unsigned int dwEncryptKeyProtectionIdentifier;
  unsigned int dwKey[4];
};

/* 6067 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_IV
{
  unsigned int dwEncryptKeyProtectionMode;
  unsigned int dwEncryptKeyProtectionIdentifier;
  unsigned int dwIV[4];
};

/* 6068 */
union $131E7E0754C32908AB6CBD654CFCA5F5
{
  NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUID_COUNT GetGuidCount;
  NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUIDS GetGuids;
  NVAPI_VIDSURF_ENCRYPT_CTRL_SET_GUID SetGuid;
  NVAPI_VIDSURF_ENCRYPT_CTRL_ENABLE Enable;
  NVAPI_VIDSURF_ENCRYPT_CTRL_SET_KEY SetKey;
  NVAPI_VIDSURF_ENCRYPT_CTRL_SET_IV SetIV;
};

/* 6069 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_PARAMS
{
  unsigned int version;
  unsigned int dwCommand;
  $131E7E0754C32908AB6CBD654CFCA5F5 ___u2;
};

/* 6070 */
struct _NVAPI_D3D9_DMA_DESCRIBE_PARAMS
{
  unsigned int dwWidth;
  unsigned int dwHeight;
  unsigned int dwFormat;
  unsigned int dwPitch;
  unsigned int dwSize;
  unsigned int dwAlignment;
};

/* 6071 */
struct _NVAPI_D3D9_DMA_MAP_PARAMS
{
  unsigned int dwWidth;
  unsigned int dwHeight;
  unsigned int dwFormat;
  void *pMemory;
  NVDX_ObjectHandle__ *hSysmemSurface;
};

/* 6072 */
struct _NVAPI_D3D9_DMA_UNMAP_PARAMS
{
  NVDX_ObjectHandle__ *hSysmemSurface;
};

/* 6073 */
struct _NVAPI_D3D9_DMA_EVENT_PARAMS
{
  void *hCompletionEvent;
};

/* 6074 */
struct _NVAPI_D3D9_DMA_TRANSFER_PARAMS
{
  _NVAPI_D3D9_DMA_TRANSFER_DIR direction;
  NVDX_ObjectHandle__ *hSysmemSurface;
  tagRECT *pSysmemSurfaceRect;
  NVDX_ObjectHandle__ *hD3D9Surface;
  tagRECT *pD3D9SurfaceRect;
  void *hCompletionEvent;
  _NVAPI_D3D9_DMA_TRANSFER_TYPE transferType;
  unsigned __int32 floatSrcRectFlag : 1;
  unsigned __int32 smoothingLevel : 2;
  unsigned __int32 reserved : 17;
  unsigned __int32 reservedFlagValid : 12;
};

/* 6075 */
struct _NVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS
{
  unsigned int colorMatrixFlags;
  float *colorMatrix;
};

/* 6076 */
union $8B5DA50996BADE8C362E74502A09FEBE
{
  _NVAPI_D3D9_DMA_DESCRIBE_PARAMS DescribeParams;
  _NVAPI_D3D9_DMA_MAP_PARAMS MapParams;
  _NVAPI_D3D9_DMA_UNMAP_PARAMS UnmapParams;
  _NVAPI_D3D9_DMA_EVENT_PARAMS EventParams;
  _NVAPI_D3D9_DMA_TRANSFER_PARAMS TransferParams;
  _NVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS ColorMatrixParams;
};

/* 6077 */
struct _NVAPI_D3D9_DMA_PARAMS
{
  unsigned int version;
  unsigned int dwCommand;
  $8B5DA50996BADE8C362E74502A09FEBE ___u2;
};

/* 6078 */
struct _NVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS
{
  char challenge[16];
};

/* 6079 */
struct NvGUID
{
  unsigned int data1;
  unsigned __int16 data2;
  unsigned __int16 data3;
  char data4[8];
};

/* 6080 */
struct _NVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS
{
  NvGUID vendorGUID;
  char response[20];
};

/* 6081 */
union $FA0D446C4F1B1DBE629D4B16AB6FA1B7
{
  _NVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS ChallengeParams;
  _NVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS ResponseParams;
};

/* 6082 */
struct _NVAPI_D3D9_ENABLE_STEREO_PARAMS
{
  unsigned int version;
  unsigned int dwCommand;
  $FA0D446C4F1B1DBE629D4B16AB6FA1B7 ___u2;
};

/* 6083 */
struct NVAPI_FLIP_CHAIN_CALLBACK_PARAMS
{
  unsigned int version;
  void (__cdecl *pPrimaryFlipped)(unsigned int);
  void (__cdecl *pPrimaryFlipChainModified)(unsigned int);
  void (__cdecl *pPrimaryAliasInvalid)(unsigned int);
  void (__cdecl *pPrimaryAliasOperationDropped)(unsigned int);
  void (__cdecl *pCursorVisibleUpdated)(unsigned int);
  void (__cdecl *pCursorShapeUpdated)(unsigned int);
};

/* 6084 */
struct tagBITMAP
{
  int bmType;
  int bmWidth;
  int bmHeight;
  int bmWidthBytes;
  unsigned __int16 bmPlanes;
  unsigned __int16 bmBitsPixel;
  void *bmBits;
};

/* 6085 */
struct _NVAPI_RENDERED_CURSOR_BITMAP_DATA
{
  unsigned int version;
  unsigned int headIndex;
  unsigned int bufferSize;
  tagBITMAP *pBitmap;
  unsigned int xHot;
  unsigned int yHot;
  NV_HW_CURSOR_COLOR_FORMAT_FLAGS formatFlag;
  unsigned int bVisible;
};

/* 6086 */
struct _RGNDATAHEADER
{
  unsigned int dwSize;
  unsigned int iType;
  unsigned int nCount;
  unsigned int nRgnSize;
  tagRECT rcBound;
};

/* 6087 */
struct __declspec(align(4)) _RGNDATA
{
  _RGNDATAHEADER rdh;
  char Buffer[1];
};

/* 6088 */
struct NvVioHandle__
{
  int unused;
};

/* 6089 */
struct _NVVIOCAPS::__unnamed
{
  unsigned int majorVersion;
  unsigned int minorVersion;
};

/* 6090 */
struct _NVVIOCAPS
{
  unsigned int version;
  char adapterName[4096];
  unsigned int adapterClass;
  unsigned int adapterCaps;
  unsigned int dipSwitch;
  unsigned int dipSwitchReserved;
  unsigned int boardID;
  _NVVIOCAPS::__unnamed driver;
  _NVVIOCAPS::__unnamed firmWare;
  unsigned int ownerId;
  _NVVIOOWNERTYPE ownerType;
};

/* 6091 */
struct _NVVIOCHANNELSTATUS
{
  unsigned int smpte352;
  _NVVIOSIGNALFORMAT signalFormat;
  _NVVIOBITSPERCOMPONENT bitsPerComponent;
  _NVVIOCOMPONENTSAMPLING samplingFormat;
  _NVVIOCOLORSPACE colorSpace;
  _NVVIOLINKID linkID;
};

/* 6092 */
struct _NVVIOINPUTSTATUS
{
  _NVVIOCHANNELSTATUS vidIn[4][2];
  _NVVIOCAPTURESTATUS captureStatus;
};

/* 6093 */
struct _NVVIOOUTPUTSTATUS
{
  _NVVIOINPUTOUTPUTSTATUS vid1Out;
  _NVVIOINPUTOUTPUTSTATUS vid2Out;
  _NVVIOSYNCSTATUS sdiSyncIn;
  _NVVIOSYNCSTATUS compSyncIn;
  unsigned int syncEnable;
  _NVVIOSYNCSOURCE syncSource;
  _NVVIOSIGNALFORMAT syncFormat;
  unsigned int frameLockEnable;
  unsigned int outputVideoLocked;
  unsigned int dataIntegrityCheckErrorCount;
  unsigned int dataIntegrityCheckEnabled;
  unsigned int dataIntegrityCheckFailed;
  unsigned int uSyncSourceLocked;
  unsigned int uPowerOn;
};

/* 6094 */
union _NVVIOSTATUS::__unnamed
{
  _NVVIOINPUTSTATUS inStatus;
  _NVVIOOUTPUTSTATUS outStatus;
};

/* 6095 */
struct _NVVIOSTATUS
{
  unsigned int version;
  _NVVIOSTATUSTYPE nvvioStatusType;
  _NVVIOSTATUS::__unnamed vioStatus;
};

/* 6096 */
struct _NVVIOSTREAM::__unnamed
{
  unsigned int jack;
  unsigned int channel;
};

/* 6097 */
struct _NVVIOSTREAM
{
  unsigned int bitsPerComponent;
  _NVVIOCOMPONENTSAMPLING sampling;
  unsigned int expansionEnable;
  unsigned int numLinks;
  _NVVIOSTREAM::__unnamed links[2];
};

/* 6098 */
struct _NVVIOINPUTCONFIG
{
  unsigned int numRawCaptureImages;
  _NVVIOSIGNALFORMAT signalFormat;
  unsigned int numStreams;
  _NVVIOSTREAM streams[4];
  unsigned int bTestMode;
};

/* 6099 */
struct _NVVIOOUTPUTREGION
{
  unsigned int x;
  unsigned int y;
  unsigned int width;
  unsigned int height;
};

/* 6100 */
struct _NVVIOCOLORCONVERSION
{
  unsigned int version;
  float colorMatrix[3][3];
  float colorOffset[3];
  float colorScale[3];
  unsigned int compositeSafe;
};

/* 6101 */
struct _NVVIOGAMMARAMP8
{
  unsigned __int16 uRed[256];
  unsigned __int16 uGreen[256];
  unsigned __int16 uBlue[256];
};

/* 6102 */
struct _NVVIOGAMMARAMP10
{
  unsigned __int16 uRed[1024];
  unsigned __int16 uGreen[1024];
  unsigned __int16 uBlue[1024];
};

/* 6103 */
union _NVVIOGAMMACORRECTION::__unnamed
{
  _NVVIOGAMMARAMP8 gammaRamp8;
  _NVVIOGAMMARAMP10 gammaRamp10;
};

/* 6104 */
struct _NVVIOGAMMACORRECTION
{
  unsigned int version;
  unsigned int vioGammaCorrectionType;
  _NVVIOGAMMACORRECTION::__unnamed gammaRamp;
  float fGammaValueR;
  float fGammaValueG;
  float fGammaValueB;
};

/* 6105 */
struct _NVVIOSYNCDELAY
{
  unsigned int version;
  unsigned int horizontalDelay;
  unsigned int verticalDelay;
};

/* 6106 */
struct _NVVIOCOMPOSITERANGE
{
  unsigned int uRange;
  unsigned int uEnabled;
  unsigned int uMin;
  unsigned int uMax;
};

/* 6107 */
struct _NVVIOOUTPUTCONFIG_V3
{
  _NVVIOSIGNALFORMAT signalFormat;
  _NVVIODATAFORMAT dataFormat;
  _NVVIOOUTPUTREGION outputRegion;
  _NVVIOOUTPUTAREA outputArea;
  _NVVIOCOLORCONVERSION colorConversion;
  _NVVIOGAMMACORRECTION gammaCorrection;
  unsigned int syncEnable;
  _NVVIOSYNCSOURCE syncSource;
  _NVVIOSYNCDELAY syncDelay;
  _NVVIOCOMPSYNCTYPE compositeSyncType;
  unsigned int frameLockEnable;
  unsigned int psfSignalFormat;
  unsigned int enable422Filter;
  unsigned int compositeTerminate;
  unsigned int enableDataIntegrityCheck;
  unsigned int cscOverride;
  unsigned int flipQueueLength;
  unsigned int enableANCTimeCodeGeneration;
  unsigned int enableComposite;
  unsigned int enableAlphaKeyComposite;
  _NVVIOCOMPOSITERANGE compRange;
  char reservedData[256];
  unsigned int enableFullColorRange;
  unsigned int enableRGBData;
  _NVVIOANCPARITYCOMPUTATION ancParityComputation;
  unsigned int enableAudioBlanking;
};

/* 6108 */
union _NVVIOCONFIG_V3::__unnamed
{
  _NVVIOINPUTCONFIG inConfig;
  _NVVIOOUTPUTCONFIG_V3 outConfig;
};

/* 6109 */
struct _NVVIOCONFIG_V3
{
  unsigned int version;
  unsigned int fields;
  _NVVIOCONFIGTYPE nvvioConfigType;
  _NVVIOCONFIG_V3::__unnamed vioConfig;
};

/* 6110 */
struct _NVVIOPCIINFO
{
  unsigned int version;
  unsigned int pciDeviceId;
  unsigned int pciSubSystemId;
  unsigned int pciRevisionId;
  unsigned int pciDomain;
  unsigned int pciBus;
  unsigned int pciSlot;
  _NVVIOPCILINKWIDTH pciLinkWidth;
  _NVVIOPCILINKRATE pciLinkRate;
};

/* 6111 */
struct NVVIOTOPOLOGYTARGET
{
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  NvVioHandle__ *hVioHandle;
  unsigned int vioId;
  unsigned int outputId;
};

/* 6112 */
struct _NV_VIO_TOPOLOGY
{
  unsigned int version;
  unsigned int vioTotalDeviceCount;
  NVVIOTOPOLOGYTARGET vioTarget[8];
};

/* 6113 */
struct _NVVIOVIDEOMODE
{
  unsigned int horizontalPixels;
  unsigned int verticalLines;
  float fFrameRate;
  _NVVIOINTERLACEMODE interlaceMode;
  _NVVIOVIDEOSTANDARD videoStandard;
  _NVVIOVIDEOTYPE videoType;
};

/* 6114 */
struct _NVVIOSIGNALFORMATDETAIL
{
  _NVVIOSIGNALFORMAT signalFormat;
  _NVVIOVIDEOMODE videoMode;
};

/* 6115 */
struct _NVVIODATAFORMATDETAIL
{
  _NVVIODATAFORMAT dataFormat;
  unsigned int vioCaps;
};

/* 6116 */
struct _NVAPI_STEREO_CAPS
{
  unsigned int version;
  unsigned __int32 supportsWindowedModeOff : 1;
  unsigned __int32 supportsWindowedModeAutomatic : 1;
  unsigned __int32 supportsWindowedModePersistent : 1;
  unsigned __int32 reserved : 29;
  unsigned int reserved2[3];
};

/* 6117 */
struct NvMonitorHandle__
{
  int unused;
};

/* 6118 */
struct _NVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS
{
  char challenge[16];
};

/* 6119 */
struct _NVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS
{
  NvGUID vendorGUID;
  char response[20];
  unsigned int flags;
};

/* 6120 */
union $21B22FE335912563DF0707B1C8D7572D
{
  _NVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS ChallengeParams;
  _NVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS ResponseParams;
};

/* 6121 */
struct _NVAPI_STEREO_HANDSHAKE_PARAMS
{
  unsigned int version;
  unsigned int dwCommand;
  $21B22FE335912563DF0707B1C8D7572D ___u2;
};

/* 6122 */
struct __declspec(align(8)) _NVAPI_FRAME_RATE_NOTIFY_INFO
{
  unsigned int version;
  unsigned __int64 hWnd;
  unsigned __int32 bEnable : 1;
  unsigned __int32 bReserved : 31;
};

/* 6123 */
struct _NV_VIDEO_STEREO_INFO
{
  unsigned int dwVersion;
  _NV_STEREO_VIDEO_FORMAT eFormat;
  int sViewOffset;
  unsigned __int32 bStereoEnable : 1;
};

/* 6124 */
struct _NVDRS_GPU_SUPPORT
{
  unsigned __int32 geforce : 1;
  unsigned __int32 quadro : 1;
  unsigned __int32 nvs : 1;
  unsigned __int32 reserved4 : 1;
  unsigned __int32 reserved5 : 1;
  unsigned __int32 reserved6 : 1;
  unsigned __int32 reserved7 : 1;
  unsigned __int32 reserved8 : 1;
  unsigned __int32 reserved9 : 1;
  unsigned __int32 reserved10 : 1;
  unsigned __int32 reserved11 : 1;
  unsigned __int32 reserved12 : 1;
  unsigned __int32 reserved13 : 1;
  unsigned __int32 reserved14 : 1;
  unsigned __int32 reserved15 : 1;
  unsigned __int32 reserved16 : 1;
  unsigned __int32 reserved17 : 1;
  unsigned __int32 reserved18 : 1;
  unsigned __int32 reserved19 : 1;
  unsigned __int32 reserved20 : 1;
  unsigned __int32 reserved21 : 1;
  unsigned __int32 reserved22 : 1;
  unsigned __int32 reserved23 : 1;
  unsigned __int32 reserved24 : 1;
  unsigned __int32 reserved25 : 1;
  unsigned __int32 reserved26 : 1;
  unsigned __int32 reserved27 : 1;
  unsigned __int32 reserved28 : 1;
  unsigned __int32 reserved29 : 1;
  unsigned __int32 reserved30 : 1;
  unsigned __int32 reserved31 : 1;
  unsigned __int32 reserved32 : 1;
};

/* 6125 */
struct _NVDRS_PROFILE
{
  unsigned int version;
  unsigned __int16 profileName[2048];
  _NVDRS_GPU_SUPPORT gpuSupport;
  unsigned int isPredefined;
  unsigned int numOfApps;
  unsigned int numOfSettings;
};

/* 6126 */
struct NvDRSProfileHandle__
{
  int unused;
};

/* 6127 */
struct _NVDRS_APPLICATION_V2
{
  unsigned int version;
  unsigned int isPredefined;
  unsigned __int16 appName[2048];
  unsigned __int16 userFriendlyName[2048];
  unsigned __int16 launcher[2048];
  unsigned __int16 fileInFolder[2048];
};

/* 6128 */
struct _NVDRS_BINARY_SETTING
{
  unsigned int valueLength;
  char valueData[4096];
};

/* 6129 */
union $2DE65340C55CD424E63DB5FCA662CFBA
{
  unsigned int u32PredefinedValue;
  _NVDRS_BINARY_SETTING binaryPredefinedValue;
  unsigned __int16 wszPredefinedValue[2048];
};

/* 6130 */
union $A14D7EED78AF6FFB41C53C8B16A6DF6B
{
  unsigned int u32CurrentValue;
  _NVDRS_BINARY_SETTING binaryCurrentValue;
  unsigned __int16 wszCurrentValue[2048];
};

/* 6131 */
struct _NVDRS_SETTING
{
  unsigned int version;
  unsigned __int16 settingName[2048];
  unsigned int settingId;
  _NVDRS_SETTING_TYPE settingType;
  _NVDRS_SETTING_LOCATION settingLocation;
  unsigned int isCurrentPredefined;
  unsigned int isPredefinedValid;
  $2DE65340C55CD424E63DB5FCA662CFBA ___u7;
  $A14D7EED78AF6FFB41C53C8B16A6DF6B ___u8;
};

/* 6132 */
union _NVDRS_SETTING_VALUES::__unnamed
{
  unsigned int u32Value;
  _NVDRS_BINARY_SETTING binaryValue;
  unsigned __int16 wszValue[2048];
};

/* 6133 */
union $9FF11482CF8D8B14E8B819E37D98342C
{
  unsigned int u32DefaultValue;
  _NVDRS_BINARY_SETTING binaryDefaultValue;
  unsigned __int16 wszDefaultValue[2048];
};

/* 6134 */
struct _NVDRS_SETTING_VALUES
{
  unsigned int version;
  unsigned int numSettingValues;
  _NVDRS_SETTING_TYPE settingType;
  $9FF11482CF8D8B14E8B819E37D98342C ___u3;
  _NVDRS_SETTING_VALUES::__unnamed settingValues[100];
};

/* 6135 */
struct NV_CHIPSET_INFO_v4
{
  unsigned int version;
  unsigned int vendorId;
  unsigned int deviceId;
  char szVendorName[64];
  char szChipsetName[64];
  unsigned int flags;
  unsigned int subSysVendorId;
  unsigned int subSysDeviceId;
  char szSubSysVendorName[64];
  unsigned int HBvendorId;
  unsigned int HBdeviceId;
  unsigned int HBsubSysVendorId;
  unsigned int HBsubSysDeviceId;
};

/* 6136 */
struct NV_LID_DOCK_PARAMS
{
  unsigned int version;
  unsigned int currentLidState;
  unsigned int currentDockState;
  unsigned int currentLidPolicy;
  unsigned int currentDockPolicy;
  unsigned int forcedLidMechanismPresent;
  unsigned int forcedDockMechanismPresent;
};

/* 6137 */
struct NVDX_SwapChainHandle__
{
  int unused;
};

/* 6138 */
struct g_MODULE_PRIVATEDATA
{
  unsigned int checksum;
  unsigned int TimeDateStamp;
};

/* 6139 */
struct _LARGE_INTEGER::__unnamed
{
  unsigned int LowPart;
  int HighPart;
};

/* 6140 */
struct _ULARGE_INTEGER::__unnamed
{
  unsigned int LowPart;
  unsigned int HighPart;
};

/* 6141 */
struct D3D10_TEXCUBE_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 6142 */
struct D3D10_TEX1D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 6143 */
struct D3D10_TEX1D_ARRAY_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6144 */
struct D3D10_TEX2D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 6145 */
struct D3D10_TEX1D_RTV
{
  unsigned int MipSlice;
};

/* 6146 */
struct D3D10_BUFFER_SRV
{
  $545C80804CFDAA65132ED5A8382CA602 ___u0;
  $44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 6147 */
struct D3D10_TEX1D_ARRAY_DSV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6148 */
struct D3D10_TEX1D_ARRAY_RTV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6149 */
struct D3D10_TEX2DMS_SRV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 6150 */
struct D3D10_MAPPED_TEXTURE3D
{
  void *pData;
  unsigned int RowPitch;
  unsigned int DepthPitch;
};

/* 6151 */
struct D3D10_BUFFER_RTV
{
  $545C80804CFDAA65132ED5A8382CA602 ___u0;
  $44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 6152 */
struct D3D10_MAPPED_TEXTURE2D
{
  void *pData;
  unsigned int RowPitch;
};

/* 6153 */
struct D3D10_TEX3D_RTV
{
  unsigned int MipSlice;
  unsigned int FirstWSlice;
  unsigned int WSize;
};

/* 6154 */
struct D3D10_TEX2DMS_ARRAY_SRV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6155 */
struct D3D10_TEX2DMS_DSV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 6156 */
struct D3D10_TEX1D_DSV
{
  unsigned int MipSlice;
};

/* 6157 */
struct __cppobj ID3D10DeviceChild : IUnknown
{
};

/* 6158 */
struct __cppobj ID3D10PixelShader : ID3D10DeviceChild
{
};

/* 6159 */
struct D3D10_TEX3D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 6160 */
struct D3D10_TEX2D_RTV
{
  unsigned int MipSlice;
};

/* 6161 */
struct __cppobj ID3D10Resource : ID3D10DeviceChild
{
};

/* 6162 */
struct __cppobj ID3D10Texture3D : ID3D10Resource
{
};

/* 6163 */
struct D3D10_RASTERIZER_DESC
{
  D3D10_FILL_MODE FillMode;
  D3D10_CULL_MODE CullMode;
  int FrontCounterClockwise;
  int DepthBias;
  float DepthBiasClamp;
  float SlopeScaledDepthBias;
  int DepthClipEnable;
  int ScissorEnable;
  int MultisampleEnable;
  int AntialiasedLineEnable;
};

/* 6164 */
struct D3D10_TEX2D_ARRAY_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6165 */
struct __cppobj ID3D10InputLayout : ID3D10DeviceChild
{
};

/* 6166 */
struct D3D10_DEPTH_STENCILOP_DESC
{
  D3D10_STENCIL_OP StencilFailOp;
  D3D10_STENCIL_OP StencilDepthFailOp;
  D3D10_STENCIL_OP StencilPassOp;
  D3D10_COMPARISON_FUNC StencilFunc;
};

/* 6167 */
struct D3D10_TEX2D_ARRAY_RTV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6168 */
struct D3D10_DEPTH_STENCIL_DESC
{
  int DepthEnable;
  D3D10_DEPTH_WRITE_MASK DepthWriteMask;
  D3D10_COMPARISON_FUNC DepthFunc;
  int StencilEnable;
  char StencilReadMask;
  char StencilWriteMask;
  D3D10_DEPTH_STENCILOP_DESC FrontFace;
  D3D10_DEPTH_STENCILOP_DESC BackFace;
};

/* 6169 */
struct D3D10_TEX2DMS_ARRAY_DSV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6170 */
struct __cppobj ID3D10Texture1D : ID3D10Resource
{
};

/* 6171 */
struct __cppobj ID3D10Asynchronous : ID3D10DeviceChild
{
};

/* 6172 */
struct __cppobj ID3D10Query : ID3D10Asynchronous
{
};

/* 6173 */
struct __cppobj ID3D10Predicate : ID3D10Query
{
};

/* 6174 */
struct __declspec(align(4)) D3D10_COUNTER_INFO
{
  D3D10_COUNTER LastDeviceDependentCounter;
  unsigned int NumSimultaneousCounters;
  char NumDetectableParallelUnits;
};

/* 6175 */
union $6EF72EA7FF296147DC342F9BF354369A
{
  D3D10_BUFFER_SRV Buffer;
  D3D10_TEX1D_SRV Texture1D;
  D3D10_TEX1D_ARRAY_SRV Texture1DArray;
  D3D10_TEX2D_SRV Texture2D;
  D3D10_TEX2D_ARRAY_SRV Texture2DArray;
  D3D10_TEX2DMS_SRV Texture2DMS;
  D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
  D3D10_TEX3D_SRV Texture3D;
  D3D10_TEXCUBE_SRV TextureCube;
};

/* 6176 */
struct D3D10_SHADER_RESOURCE_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D_SRV_DIMENSION ViewDimension;
  $6EF72EA7FF296147DC342F9BF354369A ___u2;
};

/* 6177 */
struct __declspec(align(2)) D3D10_SO_DECLARATION_ENTRY
{
  const char *SemanticName;
  unsigned int SemanticIndex;
  char StartComponent;
  char ComponentCount;
  char OutputSlot;
};

/* 6178 */
struct D3D10_TEX2DMS_ARRAY_RTV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6179 */
struct __cppobj ID3D10View : ID3D10DeviceChild
{
};

/* 6180 */
struct __cppobj ID3D10RenderTargetView : ID3D10View
{
};

/* 6181 */
struct D3D10_TEX2DMS_RTV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 6182 */
union $0351704C73B18BF97D34A96A345F8902
{
  D3D10_BUFFER_RTV Buffer;
  D3D10_TEX1D_RTV Texture1D;
  D3D10_TEX1D_ARRAY_RTV Texture1DArray;
  D3D10_TEX2D_RTV Texture2D;
  D3D10_TEX2D_ARRAY_RTV Texture2DArray;
  D3D10_TEX2DMS_RTV Texture2DMS;
  D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
  D3D10_TEX3D_RTV Texture3D;
};

/* 6183 */
struct D3D10_RENDER_TARGET_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D10_RTV_DIMENSION ViewDimension;
  $0351704C73B18BF97D34A96A345F8902 ___u2;
};

/* 6184 */
struct __cppobj ID3D10Buffer : ID3D10Resource
{
};

/* 6185 */
struct __cppobj ID3D10Texture2D : ID3D10Resource
{
};

/* 6186 */
struct D3D10_COUNTER_DESC
{
  D3D10_COUNTER Counter;
  unsigned int MiscFlags;
};

/* 6187 */
struct D3D10_TEX2D_ARRAY_DSV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 6188 */
struct D3D10_VIEWPORT
{
  int TopLeftX;
  int TopLeftY;
  unsigned int Width;
  unsigned int Height;
  float MinDepth;
  float MaxDepth;
};

/* 6189 */
struct D3D10_TEX2D_DSV
{
  unsigned int MipSlice;
};

/* 6190 */
struct D3D10_INPUT_ELEMENT_DESC
{
  const char *SemanticName;
  unsigned int SemanticIndex;
  DXGI_FORMAT Format;
  unsigned int InputSlot;
  unsigned int AlignedByteOffset;
  D3D10_INPUT_CLASSIFICATION InputSlotClass;
  unsigned int InstanceDataStepRate;
};

/* 6191 */
union $448714E0E630E63344091EB12321ECCC
{
  D3D10_TEX1D_DSV Texture1D;
  D3D10_TEX1D_ARRAY_DSV Texture1DArray;
  D3D10_TEX2D_DSV Texture2D;
  D3D10_TEX2D_ARRAY_DSV Texture2DArray;
  D3D10_TEX2DMS_DSV Texture2DMS;
  D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
};

/* 6192 */
struct D3D10_DEPTH_STENCIL_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D10_DSV_DIMENSION ViewDimension;
  $448714E0E630E63344091EB12321ECCC ___u2;
};

/* 6193 */
struct __cppobj ID3D10SamplerState : ID3D10DeviceChild
{
};

/* 6194 */
struct D3D10_SAMPLER_DESC
{
  D3D10_FILTER Filter;
  D3D10_TEXTURE_ADDRESS_MODE AddressU;
  D3D10_TEXTURE_ADDRESS_MODE AddressV;
  D3D10_TEXTURE_ADDRESS_MODE AddressW;
  float MipLODBias;
  unsigned int MaxAnisotropy;
  D3D10_COMPARISON_FUNC ComparisonFunc;
  float BorderColor[4];
  float MinLOD;
  float MaxLOD;
};

/* 6195 */
struct __cppobj ID3D10RasterizerState : ID3D10DeviceChild
{
};

/* 6196 */
struct __cppobj ID3D10DepthStencilState : ID3D10DeviceChild
{
};

/* 6197 */
struct D3D10_QUERY_DESC
{
  D3D10_QUERY Query;
  unsigned int MiscFlags;
};

/* 6198 */
struct D3D10_SUBRESOURCE_DATA
{
  const void *pSysMem;
  unsigned int SysMemPitch;
  unsigned int SysMemSlicePitch;
};

/* 6199 */
struct __cppobj ID3D10Device : IUnknown
{
};

/* 6200 */
struct __cppobj ID3D10VertexShader : ID3D10DeviceChild
{
};

/* 6201 */
struct __cppobj ID3D10DepthStencilView : ID3D10View
{
};

/* 6202 */
struct __cppobj ID3D10Counter : ID3D10Asynchronous
{
};

/* 6203 */
struct D3D10_BLEND_DESC
{
  int AlphaToCoverageEnable;
  int BlendEnable[8];
  D3D10_BLEND SrcBlend;
  D3D10_BLEND DestBlend;
  D3D10_BLEND_OP BlendOp;
  D3D10_BLEND SrcBlendAlpha;
  D3D10_BLEND DestBlendAlpha;
  D3D10_BLEND_OP BlendOpAlpha;
  char RenderTargetWriteMask[8];
};

/* 6204 */
struct __cppobj ID3D10BlendState : ID3D10DeviceChild
{
};

/* 6205 */
struct __cppobj ID3D10GeometryShader : ID3D10DeviceChild
{
};

/* 6206 */
struct D3DXCOLOR
{
  float r;
  float g;
  float b;
  float a;
};

/* 6207 */
struct D3DXFLOAT16
{
  unsigned __int16 value;
};

/* 6208 */
struct _D3DVECTOR
{
  float x;
  float y;
  float z;
};

/* 6209 */
struct __cppobj D3DXVECTOR3 : _D3DVECTOR
{
};

/* 6210 */
struct __cppobj ID3D10ShaderResourceView : ID3D10View
{
};

/* 6211 */
struct D3D10_BOX
{
  unsigned int left;
  unsigned int top;
  unsigned int front;
  unsigned int right;
  unsigned int bottom;
  unsigned int back;
};

/* 6212 */
struct __declspec(align(4)) tagTEXTMETRICA
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  char tmFirstChar;
  char tmLastChar;
  char tmDefaultChar;
  char tmBreakChar;
  char tmItalic;
  char tmUnderlined;
  char tmStruckOut;
  char tmPitchAndFamily;
  char tmCharSet;
};

/* 6213 */
struct _D3DMATRIX
{
  $7D06C17944BEA1209F0A04AD2A850FD9 ___u0;
};

/* 6214 */
struct _D3DX11_TEXTURE_LOAD_INFO
{
  D3D11_BOX *pSrcBox;
  D3D11_BOX *pDstBox;
  unsigned int SrcFirstMip;
  unsigned int DstFirstMip;
  unsigned int NumMips;
  unsigned int SrcFirstElement;
  unsigned int DstFirstElement;
  unsigned int NumElements;
  unsigned int Filter;
  unsigned int MipFilter;
};

/* 6215 */
struct D3DX10_IMAGE_INFO
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int ArraySize;
  unsigned int MipLevels;
  unsigned int MiscFlags;
  DXGI_FORMAT Format;
  D3D10_RESOURCE_DIMENSION ResourceDimension;
  D3DX10_IMAGE_FILE_FORMAT ImageFileFormat;
};

/* 6216 */
struct D3DX10_IMAGE_LOAD_INFO
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int FirstMipLevel;
  unsigned int MipLevels;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CpuAccessFlags;
  unsigned int MiscFlags;
  DXGI_FORMAT Format;
  unsigned int Filter;
  unsigned int MipFilter;
  D3DX10_IMAGE_INFO *pSrcInfo;
};

/* 6217 */
struct _D3DX10_FONT_DESCA
{
  int Height;
  unsigned int Width;
  unsigned int Weight;
  unsigned int MipLevels;
  int Italic;
  char CharSet;
  char OutputPrecision;
  char Quality;
  char PitchAndFamily;
  char FaceName[32];
};

/* 6218 */
struct D3DXVECTOR2
{
  float x;
  float y;
};

/* 6219 */
struct __declspec(align(4)) tagTEXTMETRICW
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  wchar_t tmFirstChar;
  wchar_t tmLastChar;
  wchar_t tmDefaultChar;
  wchar_t tmBreakChar;
  char tmItalic;
  char tmUnderlined;
  char tmStruckOut;
  char tmPitchAndFamily;
  char tmCharSet;
};

/* 6220 */
struct _D3DX10_FONT_DESCW
{
  int Height;
  unsigned int Width;
  unsigned int Weight;
  unsigned int MipLevels;
  int Italic;
  char CharSet;
  char OutputPrecision;
  char Quality;
  char PitchAndFamily;
  wchar_t FaceName[32];
};

/* 6221 */
struct D3DXVECTOR4_16F
{
  D3DXFLOAT16 x;
  D3DXFLOAT16 y;
  D3DXFLOAT16 z;
  D3DXFLOAT16 w;
};

/* 6222 */
struct D3DXVECTOR3_16F
{
  D3DXFLOAT16 x;
  D3DXFLOAT16 y;
  D3DXFLOAT16 z;
};

/* 6223 */
struct D3DXQUATERNION
{
  float x;
  float y;
  float z;
  float w;
};

/* 6224 */
struct __cppobj D3DXMATRIX : _D3DMATRIX
{
};

/* 6225 */
struct _D3DX10_SPRITE
{
  D3DXMATRIX matWorld;
  D3DXVECTOR2 TexCoord;
  D3DXVECTOR2 TexSize;
  D3DXCOLOR ColorModulate;
  ID3D10ShaderResourceView *pTexture;
  unsigned int TextureIndex;
};

/* 6226 */
struct D3DX11_IMAGE_INFO
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int ArraySize;
  unsigned int MipLevels;
  unsigned int MiscFlags;
  DXGI_FORMAT Format;
  D3D11_RESOURCE_DIMENSION ResourceDimension;
  D3DX11_IMAGE_FILE_FORMAT ImageFileFormat;
};

/* 6227 */
struct __cppobj ID3DX10Font : IUnknown
{
};

/* 6228 */
struct __cppobj ID3DX10Sprite : IUnknown
{
};

/* 6229 */
struct _D3DX10_TEXTURE_LOAD_INFO
{
  D3D10_BOX *pSrcBox;
  D3D10_BOX *pDstBox;
  unsigned int SrcFirstMip;
  unsigned int DstFirstMip;
  unsigned int NumMips;
  unsigned int SrcFirstElement;
  unsigned int DstFirstElement;
  unsigned int NumElements;
  unsigned int Filter;
  unsigned int MipFilter;
};

/* 6230 */
struct D3DX11_IMAGE_LOAD_INFO
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int FirstMipLevel;
  unsigned int MipLevels;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CpuAccessFlags;
  unsigned int MiscFlags;
  DXGI_FORMAT Format;
  unsigned int Filter;
  unsigned int MipFilter;
  D3DX11_IMAGE_INFO *pSrcInfo;
};

/* 6231 */
struct __cppobj _D3DXMATRIXA16 : D3DXMATRIX
{
};

/* 6232 */
struct D3DXVECTOR2_16F
{
  D3DXFLOAT16 x;
  D3DXFLOAT16 y;
};

/* 6233 */
struct D3DXVECTOR4
{
  float x;
  float y;
  float z;
  float w;
};

/* 6234 */
struct D3DXPLANE
{
  float a;
  float b;
  float c;
  float d;
};

/* 6235 */
struct DWRITE_FONT_FEATURE
{
  DWRITE_FONT_FEATURE_TAG nameTag;
  unsigned int parameter;
};

/* 6236 */
struct __cppobj IDWriteLocalizedStrings : IUnknown
{
};

/* 6237 */
struct DWRITE_GLYPH_METRICS
{
  int leftSideBearing;
  unsigned int advanceWidth;
  int rightSideBearing;
  int topSideBearing;
  unsigned int advanceHeight;
  int bottomSideBearing;
  int verticalOriginY;
};

/* 6238 */
struct __cppobj IDWriteFontFileStream : IUnknown
{
};

/* 6239 */
struct __cppobj IDWriteFontList : IUnknown
{
};

/* 6240 */
struct __cppobj IDWriteFontCollection : IUnknown
{
};

/* 6241 */
struct __cppobj IDWriteFont : IUnknown
{
};

/* 6242 */
struct DWRITE_UNDERLINE
{
  float width;
  float thickness;
  float offset;
  float runHeight;
  DWRITE_READING_DIRECTION readingDirection;
  DWRITE_FLOW_DIRECTION flowDirection;
  const wchar_t *localeName;
  DWRITE_MEASURING_MODE measuringMode;
};

/* 6243 */
struct __cppobj IDWriteTypography : IUnknown
{
};

/* 6244 */
struct _D3DCOLORVALUE
{
  float r;
  float g;
  float b;
  float a;
};

/* 6245 */
struct _D3DPSHADERCAPS2_0
{
  unsigned int Caps;
  int DynamicFlowControlDepth;
  int NumTemps;
  int StaticFlowControlDepth;
  int NumInstructionSlots;
};

/* 6246 */
struct DWRITE_FONT_METRICS
{
  unsigned __int16 designUnitsPerEm;
  unsigned __int16 ascent;
  unsigned __int16 descent;
  __int16 lineGap;
  unsigned __int16 capHeight;
  unsigned __int16 xHeight;
  __int16 underlinePosition;
  unsigned __int16 underlineThickness;
  __int16 strikethroughPosition;
  unsigned __int16 strikethroughThickness;
};

/* 6247 */
struct __cppobj IDWriteFontFileLoader : IUnknown
{
};

/* 6248 */
struct DWRITE_TEXT_METRICS
{
  float left;
  float top;
  float width;
  float widthIncludingTrailingWhitespace;
  float height;
  float layoutWidth;
  float layoutHeight;
  unsigned int maxBidiReorderingDepth;
  unsigned int lineCount;
};

/* 6249 */
struct DWRITE_LINE_METRICS
{
  unsigned int length;
  unsigned int trailingWhitespaceLength;
  unsigned int newlineLength;
  float height;
  float baseline;
  int isTrimmed;
};

/* 6250 */
struct _D3DVSHADERCAPS2_0
{
  unsigned int Caps;
  int DynamicFlowControlDepth;
  int NumTemps;
  int StaticFlowControlDepth;
};

/* 6251 */
struct DWRITE_GLYPH_OFFSET
{
  float advanceOffset;
  float ascenderOffset;
};

/* 6252 */
struct __cppobj ID2D1SimplifiedGeometrySink : IUnknown
{
};

/* 6253 */
struct D2D_POINT_2F
{
  float x;
  float y;
};

/* 6254 */
struct D2D1_BEZIER_SEGMENT
{
  D2D_POINT_2F point1;
  D2D_POINT_2F point2;
  D2D_POINT_2F point3;
};

/* 6255 */
struct _D3DINDEXBUFFER_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  _D3DPOOL Pool;
  unsigned int Size;
};

/* 6256 */
struct _D3DLOCKED_BOX
{
  int RowPitch;
  int SlicePitch;
  void *pBits;
};

/* 6257 */
struct _D3DRECT
{
  int x1;
  int y1;
  int x2;
  int y2;
};

/* 6258 */
struct _D3DVIEWPORT9
{
  unsigned int X;
  unsigned int Y;
  unsigned int Width;
  unsigned int Height;
  float MinZ;
  float MaxZ;
};

/* 6259 */
struct _D3DBOX
{
  unsigned int Left;
  unsigned int Top;
  unsigned int Right;
  unsigned int Bottom;
  unsigned int Front;
  unsigned int Back;
};

/* 6260 */
struct _D3DLOCKED_RECT
{
  int Pitch;
  void *pBits;
};

/* 6261 */
struct DWRITE_TEXT_RANGE
{
  unsigned int startPosition;
  unsigned int length;
};

/* 6262 */
struct _D3DCLIPSTATUS9
{
  unsigned int ClipUnion;
  unsigned int ClipIntersection;
};

/* 6263 */
struct _D3DTRIPATCH_INFO
{
  unsigned int StartVertexOffset;
  unsigned int NumVertices;
  _D3DBASISTYPE Basis;
  _D3DDEGREETYPE Degree;
};

/* 6264 */
struct _D3DSURFACE_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  _D3DPOOL Pool;
  _D3DMULTISAMPLE_TYPE MultiSampleType;
  unsigned int MultiSampleQuality;
  unsigned int Width;
  unsigned int Height;
};

/* 6265 */
struct __cppobj IDWriteFontFamily : IDWriteFontList
{
};

/* 6266 */
struct __cppobj IDWriteFontFace : IUnknown
{
};

/* 6267 */
struct __cppobj IDWritePixelSnapping : IUnknown
{
};

/* 6268 */
struct DWRITE_MATRIX
{
  float m11;
  float m12;
  float m21;
  float m22;
  float dx;
  float dy;
};

/* 6269 */
struct _D3DVERTEXBUFFER_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  _D3DPOOL Pool;
  unsigned int Size;
  unsigned int FVF;
};

/* 6270 */
struct _D3DDISPLAYMODE
{
  unsigned int Width;
  unsigned int Height;
  unsigned int RefreshRate;
  _D3DFORMAT Format;
};

/* 6271 */
struct __cppobj IDirect3DStateBlock9 : IUnknown
{
};

/* 6272 */
struct __cppobj IDirect3DDevice9 : IUnknown
{
};

/* 6273 */
struct DWRITE_GLYPH_RUN_DESCRIPTION
{
  const wchar_t *localeName;
  const wchar_t *string;
  unsigned int stringLength;
  const unsigned __int16 *clusterMap;
  unsigned int textPosition;
};

/* 6274 */
struct DWRITE_HIT_TEST_METRICS
{
  unsigned int textPosition;
  unsigned int length;
  float left;
  float top;
  float width;
  float height;
  unsigned int bidiLevel;
  int isText;
  int isTrimmed;
};

/* 6275 */
struct _D3DVERTEXELEMENT9
{
  unsigned __int16 Stream;
  unsigned __int16 Offset;
  char Type;
  char Method;
  char Usage;
  char UsageIndex;
};

/* 6276 */
struct _D3DGAMMARAMP
{
  unsigned __int16 red[256];
  unsigned __int16 green[256];
  unsigned __int16 blue[256];
};

/* 6277 */
struct _D3DDEVICE_CREATION_PARAMETERS
{
  unsigned int AdapterOrdinal;
  _D3DDEVTYPE DeviceType;
  HWND__ *hFocusWindow;
  unsigned int BehaviorFlags;
};

/* 6278 */
struct __unaligned __declspec(align(4)) _D3DADAPTER_IDENTIFIER9
{
  char Driver[512];
  char Description[512];
  char DeviceName[32];
  _LARGE_INTEGER DriverVersion;
  unsigned int VendorId;
  unsigned int DeviceId;
  unsigned int SubSysId;
  unsigned int Revision;
  _GUID DeviceIdentifier;
  unsigned int WHQLLevel;
};

/* 6279 */
struct __cppobj IDirect3DSwapChain9 : IUnknown
{
};

/* 6280 */
struct __cppobj IDirect3DResource9 : IUnknown
{
};

/* 6281 */
struct __cppobj IDirect3DSurface9 : IDirect3DResource9
{
};

/* 6282 */
struct _D3DRASTER_STATUS
{
  int InVBlank;
  unsigned int ScanLine;
};

/* 6283 */
struct _D3DPRESENT_PARAMETERS_
{
  unsigned int BackBufferWidth;
  unsigned int BackBufferHeight;
  _D3DFORMAT BackBufferFormat;
  unsigned int BackBufferCount;
  _D3DMULTISAMPLE_TYPE MultiSampleType;
  unsigned int MultiSampleQuality;
  _D3DSWAPEFFECT SwapEffect;
  HWND__ *hDeviceWindow;
  int Windowed;
  int EnableAutoDepthStencil;
  _D3DFORMAT AutoDepthStencilFormat;
  unsigned int Flags;
  unsigned int FullScreen_RefreshRateInHz;
  unsigned int PresentationInterval;
};

/* 6284 */
struct __cppobj ID2D1Resource : IUnknown
{
};

/* 6285 */
struct __cppobj ID2D1RenderTarget : ID2D1Resource
{
};

/* 6286 */
struct __cppobj ID2D1DCRenderTarget : ID2D1RenderTarget
{
};

/* 6287 */
struct D2D_SIZE_F
{
  float width;
  float height;
};

/* 6288 */
struct __cppobj ID2D1Layer : ID2D1Resource
{
};

/* 6289 */
struct D2D_MATRIX_3X2_F
{
  float _11;
  float _12;
  float _21;
  float _22;
  float _31;
  float _32;
};

/* 6290 */
struct D2D1_PIXEL_FORMAT
{
  DXGI_FORMAT format;
  D2D1_ALPHA_MODE alphaMode;
};

/* 6291 */
struct D2D1_BITMAP_PROPERTIES
{
  D2D1_PIXEL_FORMAT pixelFormat;
  float dpiX;
  float dpiY;
};

/* 6292 */
struct _D3DXFONT_DESCA
{
  int Height;
  unsigned int Width;
  unsigned int Weight;
  unsigned int MipLevels;
  int Italic;
  char CharSet;
  char OutputPrecision;
  char Quality;
  char PitchAndFamily;
  char FaceName[32];
};

/* 6293 */
struct __cppobj IDirect3DPixelShader9 : IUnknown
{
};

/* 6294 */
struct D2D_SIZE_U
{
  unsigned int width;
  unsigned int height;
};

/* 6295 */
struct D2D_RECT_F
{
  float left;
  float top;
  float right;
  float bottom;
};

/* 6296 */
struct D2D1_ROUNDED_RECT
{
  D2D_RECT_F rect;
  float radiusX;
  float radiusY;
};

/* 6297 */
struct __cppobj IDWriteFontFile : IUnknown
{
};

/* 6298 */
struct WICRect
{
  int X;
  int Y;
  int Width;
  int Height;
};

/* 6299 */
struct _D3DMATERIAL9
{
  _D3DCOLORVALUE Diffuse;
  _D3DCOLORVALUE Ambient;
  _D3DCOLORVALUE Specular;
  _D3DCOLORVALUE Emissive;
  float Power;
};

/* 6300 */
struct __cppobj D2D1::ColorF : _D3DCOLORVALUE
{
};

/* 6301 */
struct __cppobj D2D1::Matrix3x2F : D2D_MATRIX_3X2_F
{
};

/* 6302 */
struct __cppobj ID2D1DrawingStateBlock : ID2D1Resource
{
};

/* 6303 */
struct D2D1_DRAWING_STATE_DESCRIPTION
{
  D2D1_ANTIALIAS_MODE antialiasMode;
  D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
  unsigned __int64 tag1;
  unsigned __int64 tag2;
  D2D_MATRIX_3X2_F transform;
};

/* 6304 */
struct __cppobj IDWriteRenderingParams : IUnknown
{
};

/* 6305 */
struct D2D1_ELLIPSE
{
  D2D_POINT_2F point;
  float radiusX;
  float radiusY;
};

/* 6306 */
struct D2D_RECT_U
{
  unsigned int left;
  unsigned int top;
  unsigned int right;
  unsigned int bottom;
};

/* 6307 */
struct __cppobj IDirect3DVertexDeclaration9 : IUnknown
{
};

/* 6308 */
struct __cppobj IDirect3D9 : IUnknown
{
};

/* 6309 */
struct _D3DCAPS9
{
  _D3DDEVTYPE DeviceType;
  unsigned int AdapterOrdinal;
  unsigned int Caps;
  unsigned int Caps2;
  unsigned int Caps3;
  unsigned int PresentationIntervals;
  unsigned int CursorCaps;
  unsigned int DevCaps;
  unsigned int PrimitiveMiscCaps;
  unsigned int RasterCaps;
  unsigned int ZCmpCaps;
  unsigned int SrcBlendCaps;
  unsigned int DestBlendCaps;
  unsigned int AlphaCmpCaps;
  unsigned int ShadeCaps;
  unsigned int TextureCaps;
  unsigned int TextureFilterCaps;
  unsigned int CubeTextureFilterCaps;
  unsigned int VolumeTextureFilterCaps;
  unsigned int TextureAddressCaps;
  unsigned int VolumeTextureAddressCaps;
  unsigned int LineCaps;
  unsigned int MaxTextureWidth;
  unsigned int MaxTextureHeight;
  unsigned int MaxVolumeExtent;
  unsigned int MaxTextureRepeat;
  unsigned int MaxTextureAspectRatio;
  unsigned int MaxAnisotropy;
  float MaxVertexW;
  float GuardBandLeft;
  float GuardBandTop;
  float GuardBandRight;
  float GuardBandBottom;
  float ExtentsAdjust;
  unsigned int StencilCaps;
  unsigned int FVFCaps;
  unsigned int TextureOpCaps;
  unsigned int MaxTextureBlendStages;
  unsigned int MaxSimultaneousTextures;
  unsigned int VertexProcessingCaps;
  unsigned int MaxActiveLights;
  unsigned int MaxUserClipPlanes;
  unsigned int MaxVertexBlendMatrices;
  unsigned int MaxVertexBlendMatrixIndex;
  float MaxPointSize;
  unsigned int MaxPrimitiveCount;
  unsigned int MaxVertexIndex;
  unsigned int MaxStreams;
  unsigned int MaxStreamStride;
  unsigned int VertexShaderVersion;
  unsigned int MaxVertexShaderConst;
  unsigned int PixelShaderVersion;
  float PixelShader1xMaxValue;
  unsigned int DevCaps2;
  float MaxNpatchTessellationLevel;
  unsigned int Reserved5;
  unsigned int MasterAdapterOrdinal;
  unsigned int AdapterOrdinalInGroup;
  unsigned int NumberOfAdaptersInGroup;
  unsigned int DeclTypes;
  unsigned int NumSimultaneousRTs;
  unsigned int StretchRectFilterCaps;
  _D3DVSHADERCAPS2_0 VS20Caps;
  _D3DPSHADERCAPS2_0 PS20Caps;
  unsigned int VertexTextureFilterCaps;
  unsigned int MaxVShaderInstructionsExecuted;
  unsigned int MaxPShaderInstructionsExecuted;
  unsigned int MaxVertexShader30InstructionSlots;
  unsigned int MaxPixelShader30InstructionSlots;
};

/* 6310 */
struct __cppobj IDirect3DBaseTexture9 : IDirect3DResource9
{
};

/* 6311 */
struct __cppobj ID2D1StrokeStyle : ID2D1Resource
{
};

/* 6312 */
struct __cppobj ID2D1BitmapRenderTarget : ID2D1RenderTarget
{
};

/* 6313 */
struct __cppobj ID2D1Bitmap : ID2D1Resource
{
};

/* 6314 */
struct _D3DVOLUME_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  _D3DPOOL Pool;
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
};

/* 6315 */
struct __cppobj ID2D1Geometry : ID2D1Resource
{
};

/* 6316 */
struct __cppobj ID2D1PathGeometry : ID2D1Geometry
{
};

/* 6317 */
struct __cppobj ID2D1GeometrySink : ID2D1SimplifiedGeometrySink
{
};

/* 6318 */
struct __cppobj IDWriteTextFormat : IUnknown
{
};

/* 6319 */
struct DWRITE_TRIMMING
{
  DWRITE_TRIMMING_GRANULARITY granularity;
  unsigned int delimiter;
  unsigned int delimiterCount;
};

/* 6320 */
struct __cppobj IDWriteInlineObject : IUnknown
{
};

/* 6321 */
struct DWRITE_STRIKETHROUGH
{
  float width;
  float thickness;
  float offset;
  DWRITE_READING_DIRECTION readingDirection;
  DWRITE_FLOW_DIRECTION flowDirection;
  const wchar_t *localeName;
  DWRITE_MEASURING_MODE measuringMode;
};

/* 6322 */
struct DWRITE_GLYPH_RUN
{
  IDWriteFontFace *fontFace;
  float fontEmSize;
  unsigned int glyphCount;
  const unsigned __int16 *glyphIndices;
  const float *glyphAdvances;
  DWRITE_GLYPH_OFFSET *glyphOffsets;
  int isSideways;
  unsigned int bidiLevel;
};

/* 6323 */
struct __cppobj ID2D1Brush : ID2D1Resource
{
};

/* 6324 */
struct __cppobj ID2D1RadialGradientBrush : ID2D1Brush
{
};

/* 6325 */
struct __cppobj ID2D1GradientStopCollection : ID2D1Resource
{
};

/* 6326 */
struct DWRITE_CLUSTER_METRICS
{
  float width;
  unsigned __int16 length;
  unsigned __int16 canWrapLineAfter : 1;
  unsigned __int16 isWhitespace : 1;
  unsigned __int16 isNewline : 1;
  unsigned __int16 isSoftHyphen : 1;
  unsigned __int16 isRightToLeft : 1;
  unsigned __int16 padding : 11;
};

/* 6327 */
struct _D3DXFONT_DESCW
{
  int Height;
  unsigned int Width;
  unsigned int Weight;
  unsigned int MipLevels;
  int Italic;
  char CharSet;
  char OutputPrecision;
  char Quality;
  char PitchAndFamily;
  wchar_t FaceName[32];
};

/* 6328 */
struct __cppobj IWICPalette : IUnknown
{
};

/* 6329 */
struct __cppobj IWICBitmapSource : IUnknown
{
};

/* 6330 */
struct tagPALETTEENTRY
{
  char peRed;
  char peGreen;
  char peBlue;
  char peFlags;
};

/* 6331 */
struct __cppobj ID2D1HwndRenderTarget : ID2D1RenderTarget
{
};

/* 6332 */
struct __cppobj IDirect3DVolume9 : IUnknown
{
};

/* 6333 */
struct __cppobj IDWriteTextRenderer : IDWritePixelSnapping
{
};

/* 6334 */
struct _D3DLIGHT9
{
  _D3DLIGHTTYPE Type;
  _D3DCOLORVALUE Diffuse;
  _D3DCOLORVALUE Specular;
  _D3DCOLORVALUE Ambient;
  _D3DVECTOR Position;
  _D3DVECTOR Direction;
  float Range;
  float Falloff;
  float Attenuation0;
  float Attenuation1;
  float Attenuation2;
  float Theta;
  float Phi;
};

/* 6335 */
struct __cppobj IDirect3DCubeTexture9 : IDirect3DBaseTexture9
{
};

/* 6336 */
struct __cppobj ID3DXSprite : IUnknown
{
};

/* 6337 */
struct __cppobj ID2D1RectangleGeometry : ID2D1Geometry
{
};

/* 6338 */
struct D2D1_HWND_RENDER_TARGET_PROPERTIES
{
  HWND__ *hwnd;
  D2D_SIZE_U pixelSize;
  D2D1_PRESENT_OPTIONS presentOptions;
};

/* 6339 */
struct __cppobj IDWriteTextLayout : IDWriteTextFormat
{
};

/* 6340 */
struct DWRITE_OVERHANG_METRICS
{
  float left;
  float top;
  float right;
  float bottom;
};

/* 6341 */
struct D2D1_BRUSH_PROPERTIES
{
  float opacity;
  D2D_MATRIX_3X2_F transform;
};

/* 6342 */
struct __cppobj ID2D1Factory : IUnknown
{
};

/* 6343 */
struct __cppobj ID2D1RoundedRectangleGeometry : ID2D1Geometry
{
};

/* 6344 */
struct __cppobj ID2D1EllipseGeometry : ID2D1Geometry
{
};

/* 6345 */
struct __cppobj ID2D1GeometryGroup : ID2D1Geometry
{
};

/* 6346 */
struct __cppobj ID2D1TransformedGeometry : ID2D1Geometry
{
};

/* 6347 */
struct D2D1_STROKE_STYLE_PROPERTIES
{
  D2D1_CAP_STYLE startCap;
  D2D1_CAP_STYLE endCap;
  D2D1_CAP_STYLE dashCap;
  D2D1_LINE_JOIN lineJoin;
  float miterLimit;
  D2D1_DASH_STYLE dashStyle;
  float dashOffset;
};

/* 6348 */
struct __cppobj IWICBitmap : IWICBitmapSource
{
};

/* 6349 */
struct D2D1_RENDER_TARGET_PROPERTIES
{
  D2D1_RENDER_TARGET_TYPE type;
  D2D1_PIXEL_FORMAT pixelFormat;
  float dpiX;
  float dpiY;
  D2D1_RENDER_TARGET_USAGE usage;
  D2D1_FEATURE_LEVEL minLevel;
};

/* 6350 */
struct __cppobj IDirect3DVertexBuffer9 : IDirect3DResource9
{
};

/* 6351 */
struct D2D1_BITMAP_BRUSH_PROPERTIES
{
  D2D1_EXTEND_MODE extendModeX;
  D2D1_EXTEND_MODE extendModeY;
  D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
};

/* 6352 */
struct __cppobj IDirect3DQuery9 : IUnknown
{
};

/* 6353 */
struct __cppobj IWICBitmapLock : IUnknown
{
};

/* 6354 */
struct _D3DRECTPATCH_INFO
{
  unsigned int StartVertexOffsetWidth;
  unsigned int StartVertexOffsetHeight;
  unsigned int Width;
  unsigned int Height;
  unsigned int Stride;
  _D3DBASISTYPE Basis;
  _D3DDEGREETYPE Degree;
};

/* 6355 */
struct D2D1_TRIANGLE
{
  D2D_POINT_2F point1;
  D2D_POINT_2F point2;
  D2D_POINT_2F point3;
};

/* 6356 */
struct __cppobj ID2D1TessellationSink : IUnknown
{
};

/* 6357 */
struct __cppobj IDirect3DTexture9 : IDirect3DBaseTexture9
{
};

/* 6358 */
struct DWRITE_INLINE_OBJECT_METRICS
{
  float width;
  float height;
  float baseline;
  int supportsSideways;
};

/* 6359 */
struct D2D_POINT_2U
{
  unsigned int x;
  unsigned int y;
};

/* 6360 */
struct __cppobj IDirect3DIndexBuffer9 : IDirect3DResource9
{
};

/* 6361 */
struct __cppobj IDirect3DVolumeTexture9 : IDirect3DBaseTexture9
{
};

/* 6362 */
struct __cppobj ID2D1SolidColorBrush : ID2D1Brush
{
};

/* 6363 */
struct D2D1_QUADRATIC_BEZIER_SEGMENT
{
  D2D_POINT_2F point1;
  D2D_POINT_2F point2;
};

/* 6364 */
struct D2D1_ARC_SEGMENT
{
  D2D_POINT_2F point;
  D2D_SIZE_F size;
  float rotationAngle;
  D2D1_SWEEP_DIRECTION sweepDirection;
  D2D1_ARC_SIZE arcSize;
};

/* 6365 */
struct __cppobj ID2D1BitmapBrush : ID2D1Brush
{
};

/* 6366 */
struct D2D1_GRADIENT_STOP
{
  float position;
  _D3DCOLORVALUE color;
};

/* 6367 */
struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
{
  D2D_POINT_2F startPoint;
  D2D_POINT_2F endPoint;
};

/* 6368 */
struct __cppobj ID2D1LinearGradientBrush : ID2D1Brush
{
};

/* 6369 */
struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
{
  D2D_POINT_2F center;
  D2D_POINT_2F gradientOriginOffset;
  float radiusX;
  float radiusY;
};

/* 6370 */
struct __cppobj ID2D1Mesh : ID2D1Resource
{
};

/* 6371 */
struct D2D1_LAYER_PARAMETERS
{
  D2D_RECT_F contentBounds;
  ID2D1Geometry *geometricMask;
  D2D1_ANTIALIAS_MODE maskAntialiasMode;
  D2D_MATRIX_3X2_F maskTransform;
  float opacity;
  ID2D1Brush *opacityBrush;
  D2D1_LAYER_OPTIONS layerOptions;
};

/* 6372 */
struct __cppobj IDirect3DVertexShader9 : IUnknown
{
};

/* 6373 */
struct __cppobj ID3DXFont : IUnknown
{
};

/* 6374 */
struct D2D1_FACTORY_OPTIONS
{
  D2D1_DEBUG_LEVEL debugLevel;
};

/* 6375 */
struct _PROCESS_MEMORY_COUNTERS
{
  unsigned int cb;
  unsigned int PageFaultCount;
  unsigned int PeakWorkingSetSize;
  unsigned int WorkingSetSize;
  unsigned int QuotaPeakPagedPoolUsage;
  unsigned int QuotaPagedPoolUsage;
  unsigned int QuotaPeakNonPagedPoolUsage;
  unsigned int QuotaNonPagedPoolUsage;
  unsigned int PagefileUsage;
  unsigned int PeakPagefileUsage;
};

/* 6376 */
struct __cppobj tlPcQPF
{
};

/* 6377 */
struct jqProfEvent
{
  unsigned __int64 ThreadId;
  unsigned __int64 Tick;
  unsigned int Color;
  unsigned int Pad[3];
  char Description[96];
};

/* 6378 */
struct jqProfThread
{
  unsigned __int64 ThreadId;
  char Name[120];
  int StackLevel;
  jqProfEvent *Stack[31];
};

/* 6379 */
union jqProfEndCaptureWrite::__l4::ProfEventUPtr
{
  jqProfEvent **Ptr;
  unsigned int *PtrAsInt;
};

/* 6380 */
union jqProfEndCaptureWrite::__l4::ProfEventUVal
{
  jqProfEvent *Val;
  unsigned int ValAsInt;
};

/* 6381 */
struct jqProfInfo
{
  jqProfEvent *EventBuffer;
  jqProfEvent **EventCurPtr;
  int BufferSize;
  unsigned int Pad[1];
};

/* 6382 */
struct $409DFF2A380C4FFE2B587D0390AC124E
{
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wReserved;
};

/* 6383 */
union $4FE71575D4EC7593C08EBA657C0CA2CC
{
  unsigned int dwOemId;
  $409DFF2A380C4FFE2B587D0390AC124E __s1;
};

/* 6384 */
struct _SYSTEM_INFO
{
  $4FE71575D4EC7593C08EBA657C0CA2CC ___u0;
  unsigned int dwPageSize;
  void *lpMinimumApplicationAddress;
  void *lpMaximumApplicationAddress;
  unsigned int dwActiveProcessorMask;
  unsigned int dwNumberOfProcessors;
  unsigned int dwProcessorType;
  unsigned int dwAllocationGranularity;
  unsigned __int16 wProcessorLevel;
  unsigned __int16 wProcessorRevision;
};

/* 6386 */
struct $5AC0DE654D77FA3583F5251666EB9345
{
  jqAtomicQueue<jqConditionalQueue *,32>::NodeType *Ptr;
  unsigned int Count;
};

/* 6387 */
union $9DEDDC4AB9F16705E32DF1F18B3FD7CA
{
  $5AC0DE654D77FA3583F5251666EB9345 __s0;
  unsigned __int64 Val64;
};

/* 6388 */
struct jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType>
{
  $9DEDDC4AB9F16705E32DF1F18B3FD7CA ___u0;
};

/* 6385 */
struct __declspec(align(8)) jqAtomicQueue<jqConditionalQueue *,32>::NodeType
{
  jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> Next;
  jqConditionalQueue *Data;
};

/* 6389 */
struct __declspec(align(8)) jqAtomicQueue<jqConditionalQueue *,32>
{
  jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> *FreeListPtr;
  jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> _FreeList;
  jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> Head;
  jqAtomicQueuePtr<jqAtomicQueue<jqConditionalQueue *,32>::NodeType> Tail;
  jqAtomicQueue<jqConditionalQueue *,32> *ThisPtr;
};

/* 6390 */
struct __cppobj jqProfNamedEventMarker
{
};

/* 6391 */
struct phys_list_condition_functor_has_rigid_body_and_user_rigid_body
{
  rigid_body *m_rb;
};

/* 6392 */
struct __cppobj phys_list_condition_functor_has_no_constraints
{
};

/* 6393 */
struct phys_list_condition_functor_has_rigid_body
{
  rigid_body *m_rb;
};

/* 6394 */
struct __cppobj phys_list_condition_functor_has_user_rigid_body
{
};

/* 6395 */
struct bpi_environment_collision_info
{
  broad_phase_base *m_bpb_i_start;
  broad_phase_base *m_bpb_i_end;
  int m_bpb_count;
  int m_bpb_last_count;
};

/* 6396 */
struct broad_phase_prolog_task_input
{
  phys_vec3 *m_aabb_min;
  phys_vec3 *m_aabb_max;
};

/* 6397 */
struct phys_simple_allocator<axis_aligned_sweep_and_prune::sap_node>
{
  int m_count;
};

/* 6398 */
struct axis_aligned_sweep_and_prune::axis_element
{
  axis_aligned_sweep_and_prune::sap_node *m_node;
  int m_min_max;
  float m_val;
  int m_ae_list_index;
  axis_aligned_sweep_and_prune::axis_element *m_next;
};

/* 6399 */
struct axis_aligned_sweep_and_prune::sap_node
{
  broad_phase_base *m_bpb;
  __unaligned __declspec(align(1)) axis_aligned_sweep_and_prune::axis_element m_ae1[3][2];
  int m_updated;
};

/* 6400 */
struct phys_simple_allocator<axis_aligned_sweep_and_prune::active_pair>
{
  int m_count;
};

/* 6401 */
struct axis_aligned_sweep_and_prune::active_pair
{
  axis_aligned_sweep_and_prune::sap_node *m_p1;
  axis_aligned_sweep_and_prune::sap_node *m_p2;
  axis_aligned_sweep_and_prune::active_pair *m_next;
  phys_gjk_cache_info *m_gjk_ci;
};

/* 6402 */
struct axis_aligned_sweep_and_prune
{
  phys_simple_allocator<axis_aligned_sweep_and_prune::sap_node> m_sap_node_allocator;
  axis_aligned_sweep_and_prune::axis_element *m_x_list;
  axis_aligned_sweep_and_prune::axis_element *m_y_list;
  axis_aligned_sweep_and_prune::axis_element *m_z_list;
  bool (__cdecl *m_should_collide_callback)(broad_phase_base *, broad_phase_base *);
  phys_simple_allocator<axis_aligned_sweep_and_prune::active_pair> m_active_pair_allocator;
  int m_max_num_active_pairs;
  axis_aligned_sweep_and_prune::active_pair *m_list_bpi_bpi;
  axis_aligned_sweep_and_prune::active_pair *m_list_bpi_bpg;
  axis_aligned_sweep_and_prune::active_pair *m_list_bpg_bpg;
};

/* 6403 */
struct __cppobj gjk_sep_dir
{
};

/* 6404 */
struct narrow_phase_collision_task_input
{
  contact_point_info **m_list_output_cpi;
  rigid_body_constraint_contact *m_rbc_contact_search_tree_root;
  phys_collision_pair **m_list_pcp_iterator;
};

/* 6405 */
struct phys_simple_link_list<pulse_sum_constraint_solver::user_rigid_body_restore_info>::iterator
{
  pulse_sum_constraint_solver::user_rigid_body_restore_info *m_ptr;
};

/* 6406 */
struct phys_simple_link_list<pulse_sum_constraint_solver::temp_user_rigid_body>::iterator
{
  pulse_sum_constraint_solver::temp_user_rigid_body *m_ptr;
};

/* 6407 */
struct constraint_solver_task_input
{
  rigid_body **m_list_island;
  int m_list_island_count;
  int *m_list_island_cur;
  int m_psys_psc_visit_counter;
  int m_psys_next_psc_visit_counter;
  int m_psys_max_vel_iters;
  int m_psys_max_vel_pos_iters;
  float m_outside_delta_t;
};

/* 6408 */
struct phys_inplace_avl_tree<user_rigid_body *,pulse_sum_constraint_solver::temp_user_rigid_body,pulse_sum_constraint_solver::temp_user_rigid_body::avl_tree_accessor>::stack_item
{
  pulse_sum_constraint_solver::temp_user_rigid_body **m_node;
  int m_child;
};

/* 6409 */
volatile struct tagged_void_pointer_t
{
  void *m_ptr;
  unsigned int m_tag;
};

/* 6410 */
struct phys_slot_pool
{
  tagged_void_pointer_t m_first_free_slot;
  unsigned int m_map_key;
  phys_slot_pool *m_hash_next;
  int m_total_slot_count;
  int m_allocated_slot_count;
};

/* 6411 */
struct minspec_hash_table<phys_slot_pool,64>
{
  phys_slot_pool *m_hash_table[64];
  unsigned int m_mod;
  unsigned int m_highest_collision;
  unsigned int m_total_collisions;
};

/* 6412 */
struct phys_memory_manager
{
  char *m_buffer_start;
  char *m_buffer_end;
  char *m_buffer_cur;
  int m_list_slot_pool_count;
  minspec_read_write_mutex m_slot_pool_map_mutex;
  minspec_hash_table<phys_slot_pool,64> m_slot_pool_map;
  minspec_mutex m_slot_pool_allocate_mutex;
  __declspec(align(8)) phys_slot_pool m_list_preallocated_slot_pools[28];
  int m_list_preallocated_slot_pools_count;
};

/* 6413 */
struct phys_slot_pool::extra_info
{
  phys_slot_pool *m_slot_pool_owner;
  void *m_allocation_owner;
};

/* 6414 */
struct split_cb_params
{
  int subvect_size;
  int nb_subvect;
  const char *shape_cb;
  int shape_bits;
  int have_sign;
};

/* 6415 */
struct CombFilterMem
{
  int last_pitch;
  float last_pitch_gain[3];
  float smooth_gain;
};

/* 6416 */
struct ltp_params
{
  const char *gain_cdbk;
  int gain_bits;
  int pitch_bits;
};

/* 6417 */
struct SpeexSubmode
{
  int lbr_pitch;
  int forced_pitch_gain;
  int have_subframe_gain;
  int double_codebook;
  void (__cdecl *lsp_quant)(float *, float *, int, SpeexBits *);
  void (__cdecl *lsp_unquant)(float *, int, SpeexBits *);
  int (__cdecl *ltp_quant)(float *, float *, float *, float *, float *, float *, const void *, int, int, float, int, int, SpeexBits *, char *, float *, float *, int, int, int);
  void (__cdecl *ltp_unquant)(float *, int, int, float, const void *, int, int *, float *, SpeexBits *, char *, int, int, float, int);
  const void *ltp_params;
  void (__cdecl *innovation_quant)(float *, float *, float *, float *, const void *, int, int, float *, float *, SpeexBits *, char *, int, int);
  void (__cdecl *innovation_unquant)(float *, const void *, int, SpeexBits *, char *);
  const void *innovation_params;
  float lpc_enh_k1;
  float lpc_enh_k2;
  float lpc_enh_k3;
  float comb_gain;
  int bits_per_frame;
};

/* 6418 */
struct SpeexNBMode
{
  int frameSize;
  int subframeSize;
  int lpcSize;
  int pitchStart;
  int pitchEnd;
  float gamma1;
  float gamma2;
  float lag_factor;
  float lpc_floor;
  SpeexSubmode *submodes[16];
  int defaultSubmode;
  int quality_map[11];
};

/* 6419 */
struct SpeexSBMode
{
  SpeexMode *nb_mode;
  int frameSize;
  int subframeSize;
  int lpcSize;
  int bufSize;
  float gamma1;
  float gamma2;
  float lag_factor;
  float lpc_floor;
  float folding_gain;
  SpeexSubmode *submodes[8];
  int defaultSubmode;
  int low_quality_map[11];
  int quality_map[11];
  const float (*vbr_thresh)[11];
  int nb_modes;
};

/* 6420 */
struct SpeexCallback
{
  int callback_id;
  int (__cdecl *func)(SpeexBits *, void *, void *);
  void *data;
  void *reserved1;
  int reserved2;
};

/* 6421 */
struct DecState
{
  SpeexMode *mode;
  int first;
  int count_lost;
  int frameSize;
  int subframeSize;
  int nbSubframes;
  int lpcSize;
  int min_pitch;
  int max_pitch;
  int sampling_rate;
  float last_ol_gain;
  char *stack;
  float *inBuf;
  float *frame;
  float *excBuf;
  float *exc;
  float *innov;
  float *qlsp;
  float *old_qlsp;
  float *interp_qlsp;
  float *interp_qlpc;
  float *mem_sp;
  float *pi_gain;
  int last_pitch;
  float last_pitch_gain;
  float pitch_gain_buf[3];
  int pitch_gain_buf_idx;
  float level;
  float max_level;
  float min_level;
  int encode_submode;
  SpeexSubmode *const *submodes;
  int submodeID;
  int lpc_enh_enabled;
  CombFilterMem *comb_mem;
  SpeexCallback speex_callbacks[16];
  SpeexCallback user_callback;
  float voc_m1;
  float voc_m2;
  float voc_mean;
  int voc_offset;
  int dtx_enabled;
};

/* 6422 */
struct VBRState
{
  float energy_alpha;
  float average_energy;
  float last_energy;
  float last_log_energy[5];
  float accum_sum;
  float last_pitch_coef;
  float soft_pitch;
  float last_quality;
  float noise_level;
  float noise_accum;
  float noise_accum_count;
  int consec_noise;
};

/* 6423 */
struct EncState
{
  SpeexMode *mode;
  int first;
  int frameSize;
  int subframeSize;
  int nbSubframes;
  int windowSize;
  int lpcSize;
  int min_pitch;
  int max_pitch;
  int safe_pitch;
  int bounded_pitch;
  int ol_pitch;
  int ol_voiced;
  int *pitch;
  float gamma1;
  float gamma2;
  float lag_factor;
  float lpc_floor;
  char *stack;
  float *inBuf;
  float *frame;
  float *excBuf;
  float *exc;
  float *swBuf;
  float *sw;
  float *innov;
  float *window;
  float *autocorr;
  float *lagWindow;
  float *lpc;
  float *lsp;
  float *qlsp;
  float *old_lsp;
  float *old_qlsp;
  float *interp_lsp;
  float *interp_qlsp;
  float *interp_lpc;
  float *interp_qlpc;
  float *bw_lpc1;
  float *bw_lpc2;
  float *mem_sp;
  float *mem_sw;
  float *mem_sw_whole;
  float *mem_exc;
  float *pi_gain;
  VBRState *vbr;
  float vbr_quality;
  float relative_quality;
  int vbr_enabled;
  int vad_enabled;
  int dtx_enabled;
  int dtx_count;
  int abr_enabled;
  float abr_drift;
  float abr_drift2;
  float abr_count;
  int complexity;
  int sampling_rate;
  int plc_tuning;
  int encode_submode;
  SpeexSubmode *const *submodes;
  int submodeID;
  int submodeSelect;
};

/* 6424 */
struct SBDecState
{
  SpeexMode *mode;
  void *st_low;
  int full_frame_size;
  int frame_size;
  int subframeSize;
  int nbSubframes;
  int lpcSize;
  int first;
  int sampling_rate;
  int lpc_enh_enabled;
  char *stack;
  float *x0d;
  float *x1d;
  float *high;
  float *y0;
  float *y1;
  float *g0_mem;
  float *g1_mem;
  float *exc;
  float *qlsp;
  float *old_qlsp;
  float *interp_qlsp;
  float *interp_qlpc;
  float *mem_sp;
  float *pi_gain;
  int encode_submode;
  SpeexSubmode *const *submodes;
  int submodeID;
};

/* 6425 */
struct SBEncState
{
  SpeexMode *mode;
  void *st_low;
  int full_frame_size;
  int frame_size;
  int subframeSize;
  int nbSubframes;
  int windowSize;
  int lpcSize;
  int bufSize;
  int first;
  float lag_factor;
  float lpc_floor;
  float gamma1;
  float gamma2;
  char *stack;
  float *x0d;
  float *x1d;
  float *high;
  float *y0;
  float *y1;
  float *h0_mem;
  float *h1_mem;
  float *g0_mem;
  float *g1_mem;
  float *excBuf;
  float *exc;
  float *buf;
  float *res;
  float *sw;
  float *target;
  float *window;
  float *lagWindow;
  float *autocorr;
  float *lpc;
  float *lsp;
  float *qlsp;
  float *old_lsp;
  float *old_qlsp;
  float *interp_lsp;
  float *interp_qlsp;
  float *interp_lpc;
  float *interp_qlpc;
  float *bw_lpc1;
  float *bw_lpc2;
  float *mem_sp;
  float *mem_sp2;
  float *mem_sw;
  float *pi_gain;
  float vbr_quality;
  int vbr_enabled;
  int abr_enabled;
  float abr_drift;
  float abr_drift2;
  float abr_count;
  int vad_enabled;
  float relative_quality;
  int encode_submode;
  SpeexSubmode *const *submodes;
  int submodeID;
  int submodeSelect;
  int complexity;
  int sampling_rate;
};

/* 6426 */
struct _TP_CALLBACK_ENVIRON_V3
{
  unsigned int Version;
  _TP_POOL *Pool;
  _TP_CLEANUP_GROUP *CleanupGroup;
  void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
  void *RaceDll;
  _ACTIVATION_CONTEXT *ActivationContext;
  void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
  $61B67C3BB7C26C1108F2564B3909C1CD u;
  _TP_CALLBACK_PRIORITY CallbackPriority;
  unsigned int Size;
};

/* 6427 */
struct bdChunk::bdChunkData
{
  char m_type;
  char m_flags;
  unsigned __int16 m_length;
};

/* 6428 */
struct __cppobj bdChunk : bdReferencable
{
  bdChunkTypes m_type;
  bdChunk::bdChunkData m_headerData;
};

/* 6429 */
struct __cppobj bdBytePacker
{
};

/* 6430 */
struct __cppobj bdCookie : bdReferencable
{
  unsigned int m_localTag;
  unsigned int m_peerTag;
  unsigned int m_localTieTag;
  unsigned int m_peerTieTag;
};

/* 6431 */
struct __cppobj bdCookieAckChunk : bdChunk
{
  bdCookieAckChunk::bdCookieAckFlags m_flags;
};

/* 6432 */
struct bdReference<bdCookie>
{
  bdCookie *m_ptr;
};

/* 6433 */
struct __cppobj bdCookieEchoChunk : bdChunk
{
  bdCookieEchoChunk::bdCookieEchoFlags m_flags;
  bdReference<bdCookie> m_cookie;
  bdReference<bdByteBuffer> m_cookieBuffer;
};

/* 6434 */
struct __cppobj bdDataChunk : bdChunk
{
  bdReference<bdMessage> m_message;
  char m_flags;
  unsigned __int16 m_seqNum;
};

/* 6435 */
struct __cppobj bdHeartbeatAckChunk : bdChunk
{
  bdHeartbeatAckChunk::bdHeartbeatAckFlags m_flags;
};

/* 6436 */
struct __cppobj bdHeartbeatChunk : bdChunk
{
  bdHeartbeatChunk::bdHeartbeatFlags m_flags;
};

/* 6437 */
struct __cppobj bdInitChunk : bdChunk
{
  unsigned int m_initTag;
  bdInitChunk::bdInitChunkFlags m_flags;
  bdSecurityID m_id;
  bdReference<bdByteBuffer> m_theirKey;
  int m_windowCredit;
};

/* 6438 */
struct __cppobj bdInitAckChunk : bdChunk
{
  unsigned int m_initTag;
  bdInitAckChunk::bdInitAckChunkFlags m_flags;
  bdReference<bdByteBuffer> m_cookieBuffer;
  bdReference<bdCookie> m_cookie;
  int m_windowCredit;
  unsigned int m_peerTag;
};

/* 6439 */
struct __cppobj bdShutdownAckChunk : bdChunk
{
  bdShutdownAckChunk::bdShutdownAckFlags m_flags;
};

/* 6440 */
struct __cppobj bdShutdownCompleteChunk : bdChunk
{
  bdShutdownCompleteChunk::bdShutdownCompleteFlags m_flags;
};

/* 6441 */
struct bdReference<bdDataChunk>
{
  bdDataChunk *m_ptr;
};

/* 6442 */
struct bdReference<bdChunk>
{
  bdChunk *m_ptr;
};

/* 6443 */
struct bdSAckChunk::bdGapAckBlock
{
  unsigned int m_start;
  unsigned int m_end;
};

/* 6444 */
struct bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node
{
  bdSAckChunk::bdGapAckBlock m_data;
  bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node *m_next;
  bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node *m_prev;
};

/* 6445 */
struct bdLinkedList<bdSAckChunk::bdGapAckBlock>
{
  bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node *m_head;
  bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node *m_tail;
  unsigned int m_size;
};

/* 6446 */
struct __cppobj bdSAckChunk : bdChunk
{
  bdSAckChunk::bdSAckFlags m_flags;
  unsigned __int16 m_cumulativeAck;
  bdLinkedList<bdSAckChunk::bdGapAckBlock> m_gaps;
  int m_windowCredit;
};

/* 6450 */
struct bdLinkedList<bdReference<bdChunk> >
{
  bdLinkedList<bdReference<bdChunk> >::Node *m_head;
  bdLinkedList<bdReference<bdChunk> >::Node *m_tail;
  unsigned int m_size;
};

/* 6447 */
struct bdPacket
{
  bdPacketVtbl *vfptr;
  bdLinkedList<bdReference<bdChunk> > m_chunks;
  bdReference<bdCommonAddr> m_me;
  unsigned int m_tag;
  unsigned int m_bufferSize;
  unsigned int m_currentSize;
};

/* 6448 */
struct bdPacketVtbl
{
  void *(__thiscall *__vecDelDtor)(bdPacket *this, unsigned int);
};

/* 6449 */
struct bdLinkedList<bdReference<bdChunk> >::Node
{
  bdReference<bdChunk> m_data;
  bdLinkedList<bdReference<bdChunk> >::Node *m_next;
  bdLinkedList<bdReference<bdChunk> >::Node *m_prev;
};

/* 6451 */
struct __cppobj bdShutdownChunk : bdChunk
{
  bdShutdownChunk::bdShutdownFlags m_flags;
};

/* 6452 */
struct bdReference<bdSAckChunk>
{
  bdSAckChunk *m_ptr;
};

/* 6453 */
struct bdReliableReceiveWindow
{
  bdSequenceNumber m_newest;
  bdSequenceNumber m_lastCumulative;
  bdSequenceNumber m_lastDispatched;
  bdReference<bdDataChunk> m_frame[128];
  bool m_shouldAck;
  int m_recvWindowCredit;
  int m_recvWindowUsedCredit;
  bdReference<bdSAckChunk> m_sack;
};

/* 6454 */
struct __declspec(align(8)) bdReliableSendWindow::bdMessageFrame
{
  bdReference<bdDataChunk> m_chunk;
  bdStopwatch m_timer;
  char m_sendCount;
  char m_missingCount;
  bool m_gapAcked;
};

/* 6455 */
struct bdReliableSendWindow
{
  bdSequenceNumber m_lastAcked;
  bdSequenceNumber m_nextFree;
  float m_timeoutPeriod;
  char m_retransmitCountThreshold;
  bdReliableSendWindow::bdMessageFrame m_frame[128];
  int m_remoteReceiveWindowCredit;
  int m_flightSize;
  int m_partialBytesAcked;
  int m_slowStartThresh;
  int m_congestionWindow;
  bdStopwatch m_lastSent;
};

/* 6459 */
struct bdLinkedList<bdReference<bdDataChunk> >
{
  bdLinkedList<bdReference<bdDataChunk> >::Node *m_head;
  bdLinkedList<bdReference<bdDataChunk> >::Node *m_tail;
  unsigned int m_size;
};

/* 6460 */
struct bdQueue<bdReference<bdDataChunk> >
{
  bdLinkedList<bdReference<bdDataChunk> > m_list;
};

/* 6456 */
struct bdUnreliableReceiveWindow
{
  bdUnreliableReceiveWindowVtbl *vfptr;
  bdSequenceNumber m_seqNumber;
  bdQueue<bdReference<bdDataChunk> > m_recvQueue;
};

/* 6457 */
struct bdUnreliableReceiveWindowVtbl
{
  void *(__thiscall *__vecDelDtor)(bdUnreliableReceiveWindow *this, unsigned int);
};

/* 6458 */
struct bdLinkedList<bdReference<bdDataChunk> >::Node
{
  bdReference<bdDataChunk> m_data;
  bdLinkedList<bdReference<bdDataChunk> >::Node *m_next;
  bdLinkedList<bdReference<bdDataChunk> >::Node *m_prev;
};

/* 6461 */
struct bdUnreliableSendWindow
{
  bdUnreliableSendWindowVtbl *vfptr;
  unsigned __int16 m_seqNumber;
  bdQueue<bdReference<bdDataChunk> > m_sendQueue;
};

/* 6462 */
struct bdUnreliableSendWindowVtbl
{
  void *(__thiscall *__vecDelDtor)(bdUnreliableSendWindow *this, unsigned int);
};

/* 6463 */
struct bdConnectionStatistics
{
  unsigned int m_bytesSent;
  unsigned int m_bytesSentPerSecond;
  unsigned int m_avgBytesSent;
  unsigned int m_lastBytesSent;
  unsigned int m_bytesRecv;
  unsigned int m_avgPacketSentSize;
  unsigned int m_avgPacketRecvSize;
  unsigned int m_maxPacketSizeSent;
  unsigned int m_minPacketSizeSent;
  unsigned int m_maxPacketSizeRecv;
  unsigned int m_minPacketSizeRecv;
  unsigned int m_packetsSent;
  unsigned int m_packetsRecv;
  float m_maxRTT;
  float m_minRTT;
  float m_avgRTT;
};

/* 6464 */
struct bdLinkedList<bdReference<bdMessage> >::Node
{
  bdReference<bdMessage> m_data;
  bdLinkedList<bdReference<bdMessage> >::Node *m_next;
  bdLinkedList<bdReference<bdMessage> >::Node *m_prev;
};

/* 6465 */
struct bdLinkedList<bdReference<bdMessage> >
{
  bdLinkedList<bdReference<bdMessage> >::Node *m_head;
  bdLinkedList<bdReference<bdMessage> >::Node *m_tail;
  unsigned int m_size;
};

/* 6466 */
struct bdQueue<bdReference<bdMessage> >
{
  bdLinkedList<bdReference<bdMessage> > m_list;
};

/* 6467 */
struct __cppobj bdLoopbackConnection : bdConnection
{
  bdQueue<bdReference<bdMessage> > m_messages;
};

/* 6468 */
struct bdArray<bdReference<bdConnection> >
{
  bdReference<bdConnection> *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 6469 */
struct bdReference<bdInitAckChunk>
{
  bdInitAckChunk *m_ptr;
};

/* 6470 */
struct bdLinkedList<bdReference<bdConnection> >::Node
{
  bdReference<bdConnection> m_data;
  bdLinkedList<bdReference<bdConnection> >::Node *m_next;
  bdLinkedList<bdReference<bdConnection> >::Node *m_prev;
};

/* 6471 */
struct bdLinkedList<bdReference<bdConnection> >
{
  bdLinkedList<bdReference<bdConnection> >::Node *m_head;
  bdLinkedList<bdReference<bdConnection> >::Node *m_tail;
  unsigned int m_size;
};

/* 6472 */
struct bdQueue<bdReference<bdConnection> >
{
  bdLinkedList<bdReference<bdConnection> > m_list;
};

/* 6473 */
struct bdReference<bdInitChunk>
{
  bdInitChunk *m_ptr;
};

/* 6474 */
struct __declspec(align(4)) bdUnicastConnection::bdControlChunkStore
{
  bdReference<bdChunk> m_chunk;
  bool m_lone;
};

/* 6475 */
struct bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node
{
  bdUnicastConnection::bdControlChunkStore m_data;
  bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node *m_next;
  bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node *m_prev;
};

/* 6476 */
struct bdLinkedList<bdUnicastConnection::bdControlChunkStore>
{
  bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node *m_head;
  bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node *m_tail;
  unsigned int m_size;
};

/* 6477 */
struct bdQueue<bdUnicastConnection::bdControlChunkStore>
{
  bdLinkedList<bdUnicastConnection::bdControlChunkStore> m_list;
};

/* 6478 */
struct __cppobj bdUnicastConnection : bdConnection
{
  bdConnectionStatistics m_stats;
  bdReliableSendWindow *m_reliableSendWindow;
  bdReliableReceiveWindow *m_reliableRecvWindow;
  bdUnreliableSendWindow m_unreliableSendWindow;
  bdUnreliableReceiveWindow m_unreliableReceiveWindow;
  bdQueue<bdUnicastConnection::bdControlChunkStore> m_outQueue;
  bdStopwatch m_sendTimer;
  bdStopwatch m_receiveTimer;
  bdUnicastConnection::bdUnicastConnectionStatus m_state;
  unsigned int m_localTag;
  unsigned int m_peerTag;
  bdStopwatch m_initTimer;
  char m_initResends;
  bdStopwatch m_cookieTimer;
  char m_cookieResends;
  bdStopwatch m_shutdownTimer;
  char m_shutdownResends;
  bdStopwatch m_shutdownGuard;
  bdReference<bdInitAckChunk> m_initAckChunk;
  float m_smoothedRTT;
  float m_RTTVariation;
  bdAddressMap *m_addrMap;
};

/* 6479 */
struct bdReference<bdCookieAckChunk>
{
  bdCookieAckChunk *m_ptr;
};

/* 6480 */
struct bdReference<bdHeartbeatChunk>
{
  bdHeartbeatChunk *m_ptr;
};

/* 6481 */
struct bdReference<bdCookieEchoChunk>
{
  bdCookieEchoChunk *m_ptr;
};

/* 6482 */
struct bdReference<bdHeartbeatAckChunk>
{
  bdHeartbeatAckChunk *m_ptr;
};

/* 6483 */
struct __cppobj bdHashTiger192 : bdHash
{
};

/* 6484 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_13
{
  const void *pVFTable;
  void *spare;
  char name[13];
};

/* 6485 */
struct bdMallocMemory::bdMemoryChainElement
{
  unsigned __int16 m_magic;
  unsigned int m_size;
  bool m_aligned;
  bdMallocMemory::bdMemoryChainElement *m_prev;
  bdMallocMemory::bdMemoryChainElement *m_next;
};

/* 6486 */
struct __cppobj bdMallocMemory
{
};

/* 6487 */
struct __cppobj bdPlatformStreamSocket
{
};

/* 6488 */
struct __cppobj bdPlatformMutex
{
};

/* 6489 */
struct __cppobj bdPlatformSemaphore
{
};

/* 6490 */
struct __cppobj bdPlatformThread
{
};

/* 6491 */
struct __cppobj bdPlatformTiming
{
};

/* 6492 */
struct __cppobj bdCommerceItem : bdTaskResult
{
  unsigned __int64 m_inventoryItemId;
  unsigned __int64 m_ownerId;
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
  unsigned int m_expiry;
  char m_metaData[255];
  unsigned int m_metaDataSize;
};

/* 6493 */
struct __cppobj __declspec(align(8)) bdCommerceItemQuantity : bdTaskResult
{
  unsigned __int64 m_inventoryItemId;
  unsigned int m_itemQuantity;
};

/* 6494 */
struct __cppobj __declspec(align(8)) bdCommerceGiftItem : bdTaskResult
{
  unsigned int m_giftId;
  unsigned __int64 m_recipientId;
  unsigned __int64 m_ownerId;
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
  unsigned int m_expiry;
  char m_metaData[255];
};

/* 6495 */
struct __cppobj __declspec(align(8)) bdCommerceWriter : bdTaskResult
{
  unsigned __int64 m_writerID;
  unsigned int m_modDateTime;
  char m_writerName[256];
};

/* 6496 */
struct __cppobj bdCommerceCurrency : bdTaskResult
{
  int m_currencyID;
  int m_value;
};

/* 6497 */
struct __cppobj __declspec(align(4)) bdCommerceReceiptStatus : bdTaskResult
{
  bool m_isValid;
};

/* 6498 */
struct sockaddr_storage
{
  unsigned __int16 ss_family;
  char __ss_pad1[6];
  __int64 __ss_align;
  char __ss_pad2[112];
};

/* 6499 */
struct $013671E5920392F7B68C675C97F9F7D8
{
  unsigned __int32 Zone : 28;
  unsigned __int32 Level : 4;
};

/* 6500 */
union $1850F3BD3C50DAFB099B6EA158885C1A
{
  $013671E5920392F7B68C675C97F9F7D8 __s0;
  unsigned int Value;
};

/* 6501 */
struct SCOPE_ID
{
  $1850F3BD3C50DAFB099B6EA158885C1A ___u0;
};

/* 6502 */
union $26CBABCDC21C0FC1C3D1FB53EE06D121
{
  unsigned int sin6_scope_id;
  SCOPE_ID sin6_scope_struct;
};

/* 6503 */
struct sockaddr_in6
{
  unsigned __int16 sin6_family;
  unsigned __int16 sin6_port;
  unsigned int sin6_flowinfo;
  in6_addr sin6_addr;
  $26CBABCDC21C0FC1C3D1FB53EE06D121 ___u4;
};

/* 6504 */
struct $_TypeDescriptor$_extraBytes_12
{
  const void *pVFTable;
  void *spare;
  char name[12];
};

/* 6505 */
struct __cppobj bdTransferrableUnlockedContent : bdTaskResult
{
  unsigned int m_numTransferrableToSharedUnlock;
  unsigned int m_numTransferrableToRegularUnlock;
};

/* 6506 */
struct __cppobj bdUnlockContentInfoWithSubtype : bdTaskResult
{
  unsigned int m_contentKey;
  unsigned int m_contentKeySubtype;
  unsigned __int64 m_hardwareID;
};

/* 6507 */
struct __cppobj bdNumContentUpdated : bdTaskResult
{
  unsigned int m_numUpdated;
};

/* 6508 */
struct __cppobj bdUnlockContentInfo : bdTaskResult
{
  unsigned int m_contentKey;
  unsigned __int64 m_hardwareID;
};

/* 6509 */
struct __cppobj __declspec(align(8)) bdContentStatus : bdTaskResult
{
  unsigned __int64 m_unlockKey;
  bdContentStatusCode m_status;
};

/* 6510 */
struct __cppobj __declspec(align(8)) bdFacebookProfilePicture : bdTaskResult
{
  unsigned __int64 m_accountID;
  unsigned int m_pictureDataLength;
  char m_pictureData[16384];
};

/* 6511 */
struct __cppobj bdFacebookUserAttribute : bdTaskResult
{
  unsigned int m_name;
  char m_value[512];
};

/* 6512 */
struct __cppobj bdFacebookAccount : bdTaskResult
{
  unsigned __int64 m_accountID;
  char m_accountName[128];
};

/* 6513 */
struct __cppobj bdFacebookAttachmentProperty : bdTaskResult
{
  char m_name[50];
  char m_value[70];
  char m_href[1024];
};

/* 6514 */
struct __cppobj __declspec(align(8)) bdFacebookTag : bdTaskResult
{
  unsigned __int64 m_accountID;
  unsigned __int16 m_x;
  unsigned __int16 m_y;
};

/* 6515 */
struct curl_version_info_data
{
  CURLversion age;
  const char *version;
  unsigned int version_num;
  const char *host;
  int features;
  const char *ssl_version;
  int ssl_version_num;
  const char *libz_version;
  const char *const *protocols;
  const char *ares;
  int ares_num;
  const char *libidn;
  int iconv_ver_num;
  const char *libssh_version;
};

/* 6516 */
struct curl_certinfo
{
  int num_of_certs;
  curl_slist **certinfo;
};

/* 6517 */
union $29DC93EB423E7E1A75DEDC0F2B659591
{
  void *whatever;
  CURLcode result;
};

/* 6518 */
struct CURLMsg
{
  CURLMSG msg;
  void *easy_handle;
  $29DC93EB423E7E1A75DEDC0F2B659591 data;
};

/* 6519 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_39
{
  const void *pVFTable;
  void *spare;
  char name[39];
};

/* 6520 */
struct __cppobj __declspec(align(8)) bdLink : bdTaskResult
{
  unsigned __int64 m_entityID;
  unsigned int m_category;
  char m_linkCode[64];
};

/* 6521 */
struct bdAuthMigrateAccountPlainText
{
  unsigned __int64 m_licenseID;
};

/* 6522 */
struct bdAuthChangeUserKeyCypherText
{
  unsigned int m_magicNumber;
  char m_userKey[24];
};

/* 6523 */
struct bdAuthChangeUserKeyPlainText
{
  unsigned __int64 m_userID;
};

/* 6524 */
struct bdAuthHostToServicePlainText
{
  unsigned __int64 m_licenseID;
};

/* 6525 */
struct bdAuthMigrateAccountCypherText
{
  unsigned int m_magicNumber;
  unsigned int m_oldTitleID;
  unsigned __int64 m_oldLicenseID;
};

/* 6526 */
struct bdAuthResetAccountCypherText
{
  unsigned int m_magicNumber;
  char m_userKey[24];
};

/* 6527 */
struct bdAuthCreateAccountCypherText
{
  unsigned int m_magicNumber;
  char m_username[64];
  char m_userKey[24];
};

/* 6528 */
struct bdAuthGetUsernamesForLicensePlainText
{
  unsigned __int64 m_licenseID;
};

/* 6529 */
struct bdAuthResetAccountPlainText
{
  unsigned __int64 m_userID;
};

/* 6530 */
struct bdAuthDeleteAccountCypherText
{
  unsigned int m_magicNumber;
};

/* 6531 */
struct bdAuthUserToServicePlainText
{
  unsigned __int64 m_userID;
};

/* 6532 */
struct bdAuthDeleteAccountPlainText
{
  unsigned __int64 m_userID;
};

/* 6533 */
struct bdAuthUserToHostPlainText
{
  unsigned __int64 m_userID;
  unsigned __int64 m_hostLicenseID;
};

/* 6534 */
struct bdAuthCreateAccountPlainText
{
  unsigned __int64 m_licenseID;
};

/* 6535 */
struct __cppobj bdMarketplaceProductItem : bdTaskResult
{
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
};

/* 6536 */
struct __cppobj bdMarketplaceCurrency : bdTaskResult
{
  char m_currencyId;
  unsigned int m_value;
};

/* 6537 */
struct __cppobj bdMarketplaceSku : bdTaskResult
{
  unsigned int m_skuId;
  unsigned int m_productId;
  char m_isEnabled;
  char m_skuData[64];
  char m_skuDataSize;
  char m_ignoreEntitlements;
  unsigned int m_saleStartDateTime;
  unsigned int m_saleEndDateTime;
  unsigned int m_rentalDuration;
  char m_promotionalText[135];
  char m_promotionalTextSize;
  unsigned int m_origSkuId;
  unsigned __int16 m_collisionField;
  unsigned int m_modDateTime;
  char m_numPrices;
  bdMarketplaceCurrency m_skuPrices[10];
};

/* 6538 */
struct __cppobj bdMarketplaceProduct : bdTaskResult
{
  unsigned int m_productId;
  char m_productName[135];
  char m_productNameSize;
  char m_description[240];
  char m_descriptionSize;
  char m_productData[64];
  char m_productDataSize;
  unsigned __int16 m_collisionField;
  unsigned int m_modDateTime;
  char m_numItems;
  bdMarketplaceProductItem m_productItems[10];
  char m_numEntitlements;
  unsigned int m_productEntitlements[4];
};

/* 6539 */
struct __cppobj bdMarketplaceInventoryItemQuantity : bdTaskResult
{
  unsigned __int64 m_playerId;
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
};

/* 6540 */
struct __cppobj bdMarketplaceInventory : bdTaskResult
{
  unsigned __int64 m_playerId;
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
  unsigned int m_itemXp;
  unsigned int m_expireDateTime;
  unsigned __int16 m_collisionField;
  unsigned int m_modDateTime;
};

/* 6541 */
struct __cppobj __declspec(align(8)) bdMarketplaceEntitlement : bdTaskResult
{
  unsigned __int64 m_playerId;
  unsigned __int16 m_numPlayerEntitlements;
  unsigned int m_playerEntitlements[1000];
};

/* 6542 */
struct __cppobj bdRichPresenceInfo : bdTaskResult
{
  bool m_online;
  char m_richPresence[32];
  unsigned int m_count;
};

/* 6543 */
struct __cppobj bdSanitizedString : bdTaskResult
{
  bool m_sanitized;
  unsigned int m_length;
  char *m_sanitizedBuffer;
};

/* 6544 */
struct __cppobj bdUserGroupNumMembers : bdTaskResult
{
  unsigned __int64 m_numMembers;
};

/* 6545 */
struct __cppobj __declspec(align(8)) bdUserGroupList : bdTaskResult
{
  unsigned __int64 m_userID;
  unsigned __int64 m_groupList[32];
  unsigned int m_groupCount;
};

/* 6546 */
struct __cppobj bdUserGroupInfo : bdTaskResult
{
  unsigned __int64 m_userGroupID;
  char m_userGroupName[64];
};

/* 6547 */
struct __cppobj __declspec(align(8)) bdUserGroupMembershipInfo : bdTaskResult
{
  unsigned __int64 m_userGroupID;
  char m_userGroupName[64];
  unsigned __int64 m_userID;
  __int16 m_userGroupMemberType;
};

/* 6548 */
struct __cppobj bdThreadedSocket : bdSocket
{
  bdThread *m_receiveThread;
  struct bdReceiveThread *m_receiver;
  bdThread *m_sendThread;
  struct bdSendThread *m_sender;
  unsigned int m_incomingBufferSize;
  unsigned int m_threadStackSize;
};

/* 6549 */
struct __cppobj bdDummySocket : bdThreadedSocket
{
};

/* 6550 */
struct __cppobj bdPlatformTrulyRandomInit
{
};

/* 6551 */
struct __cppobj bdDTLSCookieAck : bdDTLSHeader
{
  char m_ECCKey[100];
  bdSecurityID m_secID;
};

/* 6552 */
struct bdIPDiscoveryPacket
{
  char m_type;
  unsigned __int16 m_protocolVersion;
};

/* 6553 */
struct bdIPDiscoveryPacketReply
{
  char m_type;
  unsigned __int16 m_protocolVersion;
  bdAddr m_addr;
};

/* 6554 */
struct bdLinkedList<unsigned int>::Node
{
  unsigned int m_data;
  bdLinkedList<unsigned int>::Node *m_next;
  bdLinkedList<unsigned int>::Node *m_prev;
};

/* 6555 */
struct bdLinkedList<unsigned int>
{
  bdLinkedList<unsigned int>::Node *m_head;
  bdLinkedList<unsigned int>::Node *m_tail;
  unsigned int m_size;
};

/* 6556 */
struct bdQueue<unsigned int>
{
  bdLinkedList<unsigned int> m_list;
};

/* 6557 */
struct bdArray<bdReference<bdCommonAddr> >
{
  bdReference<bdCommonAddr> *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 6558 */
struct bdLinkedList<bdEndpoint>::Node
{
  bdEndpoint m_data;
  bdLinkedList<bdEndpoint>::Node *m_next;
  bdLinkedList<bdEndpoint>::Node *m_prev;
};

/* 6559 */
struct bdLinkedList<bdEndpoint>
{
  bdLinkedList<bdEndpoint>::Node *m_head;
  bdLinkedList<bdEndpoint>::Node *m_tail;
  unsigned int m_size;
};

/* 6560 */
struct bdQueue<bdEndpoint>
{
  bdLinkedList<bdEndpoint> m_list;
};

/* 6561 */
struct $B3E849A013733CD2F26F19D61D675DB2
{
  char key[8];
  char pt[8];
  char ct[8];
};

/* 6562 */
const struct $0E4D9914806FD8F158B03A8207148EA6
{
  char key[8];
  char pt[8];
  char ct[8];
};

/* 6563 */
struct des_test_case
{
  int num;
  int mode;
  char key[8];
  char txt[8];
  char out[8];
};

/* 6564 */
struct $6A05E604FF22133802FABF2F80853DFD
{
  int keylen;
  char key[32];
  char pt[16];
  char ct[16];
};

/* 6565 */
const struct $5255CB5BD987C30E1F30E0456193ED97
{
  int keylen;
  char key[32];
  char pt[16];
  char ct[16];
};

/* 6566 */
struct $5FCDB5C0752A468BB4091F709D999EE9
{
  char *msg;
  char hash[16];
};

/* 6567 */
const struct $31758CEF6C00041BE04732FFB9D51C65
{
  char *msg;
  char hash[16];
};

/* 6568 */
struct $CAC5F78C791513C44D71F6EA4329EEB7
{
  char *msg;
  char hash[20];
};

/* 6569 */
const struct $6B97F97E8A21F946E5F8E1A46D9D7E16
{
  char *msg;
  char hash[20];
};

/* 6570 */
struct $66F1F121EE5E076A3C2FB9A592F87E53
{
  char *msg;
  char hash[24];
};

/* 6571 */
const struct $DA4FE7FDE9F3081D729385A9365F6CFD
{
  char *msg;
  char hash[24];
};

/* 6572 */
struct $0917E213ADAEF1F41C0BC30A91D107CF
{
  char *msg;
  char hash[32];
};

/* 6573 */
const struct $027299C8DC5B623C8716E1F047B3FCD9
{
  char *msg;
  char hash[32];
};

/* 6574 */
struct $544C465746ABD2ED274E8E3554A6B2A0
{
  int mpi_code;
  int ltc_code;
};

/* 6575 */
const struct $106433AFD2FD8B8AFFAADFA20F3E808F
{
  int mpi_code;
  int ltc_code;
};

/* 6576 */
struct mp_int
{
  int used;
  int alloc;
  int sign;
  unsigned int *dp;
};

/* 6577 */
struct ltc_asn1_list_
{
  int type;
  void *data;
  unsigned int size;
  int used;
  ltc_asn1_list_ *prev;
  ltc_asn1_list_ *next;
  ltc_asn1_list_ *child;
  ltc_asn1_list_ *parent;
};

/* 6578 */
struct ltc_utctime
{
  unsigned int YY;
  unsigned int MM;
  unsigned int DD;
  unsigned int hh;
  unsigned int mm;
  unsigned int ss;
  unsigned int off_dir;
  unsigned int off_hh;
  unsigned int off_mm;
};

/* 6579 */
struct $0AF07E63238CFA584ACF93EEEF14C9B0
{
  int code;
  int value;
};

/* 6580 */
const struct $27FA1CBF2E036788A821DBB7539FC087
{
  int code;
  int value;
};

/* 6581 */
struct edge
{
  char *start;
  unsigned int size;
};

/* 6582 */
struct GfxDrawSurfList
{
  GfxDrawSurf *current;
  GfxDrawSurf *end;
};

/* 6583 */
struct GfxDelayedCmdBuf
{
  int primDrawSurfPos;
  unsigned int primDrawSurfSize;
  GfxDrawSurf drawSurfKey;
};

/* 6584 */
struct GfxBspDrawSurfData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurfList;
};

/* 6585 */
struct __declspec(align(4)) BspSurfRegion
{
  unsigned __int16 triSurfList[128];
  GfxBspDrawSurfData surfData;
  unsigned int triSurfCount;
  GfxDrawSurf prevDrawSurf;
  unsigned int sceneDrawSurfStage;
  bool isUsed;
};

/* 6586 */
struct BspSurfRegionSetupInfo
{
  eBspSurfRegionType bspRegionType;
  unsigned int sceneDrawSurfStage;
  unsigned int sceneDrawSurfMaxCount;
};

/* 6587 */
struct BspSurfRegions
{
  BspSurfRegion region[2];
};

/* 6588 */
struct __declspec(align(4)) GfxDrawMethod
{
  GfxDrawSceneMethod drawScene;
  char baseTechType;
  char emissiveTechType;
  char litTechType[16][11];
};

/* 6589 */
struct GfxSModelDrawSurfData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurfList;
};

/* 6590 */
struct GfxSModelDrawSurfLightingData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurf[10];
};

/* 6591 */
struct GfxStaticModelId
{
  unsigned __int16 surfType;
  unsigned __int16 objectId;
};

/* 6592 */
struct GfxDrawConsts
{
  vec4_t outdoorLookupMatrix[4];
  GfxScaledPlacement identityPlacement;
};

/* 6593 */
struct __declspec(align(4)) SunFlareDynamic
{
  float flareIntensity;
  float sunVisibilityAdjust;
  float currentBlind;
  float currentGlare;
  int lastTime;
  float lastVisibility;
  float lastDot;
  unsigned __int16 occlusionQueryHandle;
};

/* 6594 */
struct mnode_load_t
{
  int cellIndex;
  int planeIndex;
  unsigned int children[2];
};

/* 6595 */
struct r_lightmapMerge_t
{
  char index;
  vec2_t shift;
  vec2_t scale;
};

/* 6596 */
struct GfxBspLoad
{
  unsigned int bspVersion;
  dmaterial_t *diskMaterials;
  unsigned int materialCount;
  vec3_t outdoorMins;
  vec3_t outdoorMaxs;
  r_lightmapMerge_t lmapMergeInfo[32];
};

/* 6597 */
struct GfxStaticModelSortModel
{
  XModel *model;
};

/* 6598 */
struct r_globals_load_t
{
  int *cullGroupIndices;
  vec3_t *portalVerts;
  GfxAabbTree *aabbTrees;
  int aabbTreeCount;
  int nodeCount;
  mnode_load_t *nodes;
  int reflectionProbesLoaded;
  int staticModelReflectionProbesLoaded;
  GfxBspLoad load;
  GfxStaticModelSortModel *sortModels;
};

/* 6599 */
struct DiskSmodelLightmapVCInst
{
  int modelId;
  int colIndex;
  int colCount;
  unsigned int smid;
};

/* 6600 */
struct DiskSmodelLightmapVColor
{
  char r;
  char g;
  char b;
  char a;
};

/* 6601 */
struct DiskGfxSkyGridVolume
{
  vec3_t mins;
  vec3_t maxs;
  vec3_t lightingOrigin;
  unsigned __int16 colorsIndex;
  char primaryLightIndex;
  char visibility;
};

/* 6602 */
struct stdext::exception
{
  stdext::exceptionVtbl *vfptr;
  const char *_Ptr;
};

/* 6603 */
struct stdext::exceptionVtbl
{
  void *(__thiscall *__vecDelDtor)(stdext::exception *this, unsigned int);
  const char *(__thiscall *what)(stdext::exception *this);
  void (__thiscall *_Doraise)(stdext::exception *this);
};

/* 6604 */
struct std::_Pair_base<GfxSurface *,GfxSurface *>
{
  GfxSurface *first;
  GfxSurface *second;
};

/* 6605 */
struct __cppobj std::pair<GfxSurface *,GfxSurface *> : std::_Pair_base<GfxSurface *,GfxSurface *>
{
};

/* 6606 */
struct GfxStaticModelCombinedInst
{
  GfxStaticModelDrawInst smodelDrawInst;
  GfxStaticModelInst smodelInst;
};

/* 6607 */
struct std::_Pair_base<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *>
{
  GfxStaticModelCombinedInst *first;
  GfxStaticModelCombinedInst *second;
};

/* 6608 */
struct __cppobj std::pair<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *> : std::_Pair_base<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *>
{
};

/* 6609 */
struct __cppobj std::bad_typeid : std::exception
{
};

/* 6610 */
struct std::_Pair_base<GfxStaticModelSortModel *,GfxStaticModelSortModel *>
{
  GfxStaticModelSortModel *first;
  GfxStaticModelSortModel *second;
};

/* 6611 */
struct __cppobj std::pair<GfxStaticModelSortModel *,GfxStaticModelSortModel *> : std::_Pair_base<GfxStaticModelSortModel *,GfxStaticModelSortModel *>
{
};

/* 6612 */
struct __cppobj std::__non_rtti_object : std::bad_typeid
{
};

/* 6613 */
struct DiskGfxCell_Version21
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 aabbTreeIndex[2];
  int firstPortal;
  int portalCount;
  int firstCullGroup;
  int cullGroupCount;
};

/* 6614 */
struct GfxPackedWorldVertex
{
  vec3_t xyz;
  float binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
  PackedLmapCoords lmapCoord;
};

/* 6615 */
struct __cppobj stdext::bad_exception : stdext::exception
{
};

/* 6616 */
struct __cppobj stdext::bad_alloc : stdext::exception
{
};

/* 6617 */
struct __cppobj stdext::bad_array_new_length : stdext::bad_alloc
{
};

/* 6618 */
struct DiskGfxAabbTree
{
  unsigned int firstSurface;
  unsigned int surfaceCount;
  unsigned int childCount;
};

/* 6619 */
struct DiskGfxDummyReflectionProbe
{
  vec3_t origin;
  char pixels[288];
};

/* 6620 */
struct DiskGfxCell_Version14
{
  vec3_t mins;
  vec3_t maxs;
  int aabbTreeIndex;
  int firstPortal;
  int portalCount;
  int firstCullGroup;
  int cullGroupCount;
  int unused0;
  int unused1;
};

/* 6621 */
struct DiskGfxOutdoorBounds
{
  vec3_t bounds[2];
};

/* 6622 */
struct DiskLightingInfo
{
  unsigned int lightingFlags;
  int lightingQuality;
};

/* 6623 */
struct DiskTriangleSoup_Version8
{
  unsigned __int16 materialIndex;
  char lightmapIndex;
  char reflectionProbeIndex;
  int firstVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 indexCount;
  int firstIndex;
};

/* 6624 */
struct DiskGfxWorldFogVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  float fogTransitionTime;
  float baseDist;
  float halfDist;
  float baseHeight;
  float halfHeight;
  float sunFogPitch;
  float sunFogYaw;
  float sunFogInner;
  float sunFogOuter;
  vec3_t fogColor;
  float fogOpacity;
  vec3_t sunFogColor;
  float sunFogOpacity;
  unsigned int controlEx;
  unsigned int priority;
  vec3_t source;
  float inner;
  vec3_t direction;
  float outer;
  float fovInner;
  float fovOuter;
};

/* 6625 */
struct DiskGfxReflectionProbeVolumeData
{
  vec4_t volumePlanes[6];
};

/* 6626 */
struct DiskGfxReflectionProbe
{
  vec3_t origin;
  char pixels[131232];
  DiskGfxReflectionProbeVolumeData probeVolumes[16];
  unsigned int probeVolumeCount;
  vec3_t lightingSH[9];
  char name[64];
};

/* 6627 */
struct DiskHeroOnlyLight
{
  char type;
  char unused[3];
  vec3_t color;
  vec3_t dir;
  vec3_t origin;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
};

/* 6628 */
struct DiskGfxOccluder
{
  char name[16];
  vec3_t pts[4];
};

/* 6629 */
struct DiskLightRegionHull
{
  float kdopMidPoint[9];
  float kdopHalfSize[9];
  unsigned int axisCount;
};

/* 6630 */
struct DiskTriangleSoup
{
  unsigned __int16 materialIndex;
  char lightmapIndex;
  char reflectionProbeIndex;
  char primaryLightIndex;
  bool hasPrimaryLightConflict;
  bool castsSunShadow;
  __int16 _unused;
  int vertexLayerData;
  unsigned int firstVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 indexCount;
  int firstIndex;
};

/* 6631 */
struct DiskGfxVolumePlane
{
  vec4_t plane;
};

/* 6632 */
struct DiskGfxLightCorona
{
  vec3_t origin;
  float radius;
  vec3_t color;
  float intensity;
};

/* 6633 */
struct DiskGfxWorldFogModifierVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  unsigned int controlEx;
  float transitionTime;
  float depthScale;
  float heightScale;
  vec4_t colorAdjust;
  unsigned int priority;
};

/* 6634 */
struct r_lightmapGroup_t
{
  int wideCount;
  int highCount;
};

/* 6635 */
struct GfxLightGridHeader
{
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
  unsigned int rowAxis;
  unsigned int colAxis;
  unsigned __int16 rowDataStart[8192];
};

/* 6636 */
struct DiskGfxPortal
{
  int planeIndex;
  int cellIndex;
  int firstPortalVertex;
  int portalVertexCount;
};

/* 6637 */
struct DiskGfxExposureVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  float exposure;
  float luminanceIncreaseScale;
  float luminanceDecreaseScale;
  float featherRange;
  float featherAdjust;
  vec4_t boundingSphere;
  unsigned int controlEx;
  unsigned int priority;
  vec3_t source;
  float inner;
  vec3_t direction;
  float outer;
  float fovInner;
  float fovOuter;
};

/* 6638 */
struct DiskLightRegion
{
  char hullCount;
};

/* 6639 */
struct DiskLightRegionAxis
{
  vec3_t dir;
  float midPoint;
  float halfSize;
};

/* 6640 */
struct DiskGfxLutVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  unsigned int controlEx;
  int lutIndex;
  float lutTransitionTime;
  unsigned int priority;
};

/* 6641 */
struct DiskGfxShadowMapVolume
{
  unsigned int control;
  __int16 boundsXmin;
  __int16 boundsYmin;
  __int16 boundsZmin;
  __int16 boundsXmax;
  __int16 boundsYmax;
  __int16 boundsZmax;
  unsigned int controlEx;
  unsigned int primaryLightTarget;
  unsigned int paddingforlater[2];
  unsigned int priority;
};

/* 6642 */
struct DiskTriangleSoup_Version12
{
  unsigned __int16 materialIndex;
  char lightmapIndex;
  char reflectionProbeIndex;
  int vertexLayerData;
  int firstVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 indexCount;
  int firstIndex;
};

/* 6643 */
struct __declspec(align(4)) DiskGfxStaticModelData
{
  unsigned int smid;
  vec3_t lightingOrigin;
  unsigned __int16 colorsIndex;
  char primaryLightIndex;
  char visibility;
  unsigned __int16 lightmapUVIndex;
};

/* 6644 */
struct GfxLightGridRow
{
  unsigned __int16 colStart;
  unsigned __int16 colCount;
  unsigned __int16 zStart;
  unsigned __int16 zCount;
  unsigned int firstEntry;
};

/* 6645 */
struct __declspec(align(4)) DiskGfxCell
{
  vec3_t mins;
  vec3_t maxs;
  unsigned __int16 aabbTreeIndex;
  int firstPortal;
  int portalCount;
  int firstCullGroup;
  int cullGroupCount;
  char reflectionProbeCount;
  char reflectionProbes[64];
};

/* 6646 */
struct GfxBuffers
{
  GfxIndexBufferState dynamicIndexBufferPool[2];
  GfxVertexBufferState skinnedCacheVbPool[2];
  char *skinnedCacheLockAddr;
  GfxVertexBufferState dynamicVertexBufferPool[2];
  ID3D11Buffer *particleCloudVertexBuffer;
  ID3D11Buffer *particleCloudIndexBuffer;
  int dynamicBufferFrame;
};

/* 6647 */
struct GfxParticleCloudVertex
{
  __int16 xyz[3];
  __int16 corner;
};

/* 6648 */
struct GfxDynamicIndices
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  unsigned __int16 *indices;
};

/* 6649 */
struct CinematicFlagsFields
{
  unsigned __int16 initialized : 1;
  unsigned __int16 usingAlpha : 1;
  unsigned __int16 openPending : 1;
  unsigned __int16 opened : 1;
  unsigned __int16 isPreloading : 1;
  unsigned __int16 underrun : 1;
  unsigned __int16 active : 1;
  unsigned __int16 finishedNaturally : 1;
  unsigned __int16 pathInitialized : 1;
  unsigned __int16 padding : 9;
};

/* 6650 */
union CinematicFlags
{
  CinematicFlagsFields fields;
  unsigned __int16 packed;
};

/* 6651 */
struct MoviePlayerFunctions
{
  void (__cdecl *InitMemory)(void *, unsigned int, void *, unsigned int, unsigned int);
  void (__cdecl *UpdateMoviesAndImages)(bool);
  void (__cdecl *ForceRelinquishIO)();
  void (__cdecl *Destroy)();
  void *(__cdecl *OpenPath)(const char *, unsigned int);
  void *(__cdecl *OpenFromFastfile)(const char *, unsigned int);
  void (__cdecl *StartPlayback)(void *, unsigned int);
  void (__cdecl *StopPlayback)(void *);
  void (__cdecl *SetPaused)(void *, bool, bool);
  float (__cdecl *GetTimeRemaining)(void *);
  float (__cdecl *GetTimeElapsed)(void *);
  void (__cdecl *SetMovieClock)(void *, float);
  void (__cdecl *SetVolume)(void *, float);
  bool (__cdecl *IsUnderrun)(void *);
  bool (__cdecl *IsReadyToStart)(void *);
  unsigned int (__cdecl *GetMaxTextureBytesNeeded)();
  unsigned int (__cdecl *GetMainBytesNeeded)(unsigned int);
  const char *(__cdecl *GetLastError)();
};

/* 6652 */
struct CinematicInfo
{
  int id;
  void *movieHandle;
  char name[512];
  float playbackVolume;
  CIN_CALLBACK_INFO callbackInfo;
  unsigned int playbackFlags;
  CinematicFlags commonflags;
  unsigned int currentPaused;
  unsigned int targetPaused;
  int soundId;
  int nextSoundId;
  bool checkForNextSound;
  char soundAlias[256];
  MoviePlayerFunctions *moviePlayer;
  int getPathStreamId;
};

/* 6653 */
struct AsyncOpenData
{
  char localCinematicName[512];
  unsigned int localFlags;
  bool isNextBink;
  void *outMovieHandle;
};

/* 6654 */
struct CinematicGlob
{
  CinematicInfo current;
  CinematicInfo queue[6];
  int numQueued;
  int nextReservedId;
  int nextNormalId;
  int openRequestId;
  int nextOpenRequestId;
  int framesStopped;
  void *memPool;
  void *ds;
  AsyncOpenData asyncOpenData;
  int lastTime;
  int gap[8];
  int gptr;
  int soundEndTimeMs;
  int soundTimeMs;
  int movieTimeMs;
  int timeCalcTimeMs;
  void *masterBufferBase;
  unsigned int bytesAllocated;
  void *activeMovie;
  void *nextSeamlessMovie;
};

/* 6655 */
struct RCinematicsBinkDuck
{
  unsigned int start;
  unsigned int end;
};

/* 6656 */
struct BINKRECT
{
  int Left;
  int Top;
  int Width;
  int Height;
};

/* 6657 */
struct BINKPLANE
{
  int Allocate;
  void *Buffer;
  unsigned int BufferPitch;
};

/* 6658 */
struct BINKFRAMEPLANESET
{
  BINKPLANE YPlane;
  BINKPLANE cRPlane;
  BINKPLANE cBPlane;
  BINKPLANE APlane;
};

/* 6659 */
struct BINKFRAMEBUFFERS
{
  int TotalFrames;
  unsigned int YABufferWidth;
  unsigned int YABufferHeight;
  unsigned int cRcBBufferWidth;
  unsigned int cRcBBufferHeight;
  unsigned int FrameNum;
  BINKFRAMEPLANESET Frames[2];
};

/* 6661 */
struct BUNDLEPOINTERS
{
  void *typeptr;
  void *type16ptr;
  void *colorptr;
  void *bits2ptr;
  void *motionXptr;
  void *motionYptr;
  void *dctptr;
  void *mdctptr;
  void *patptr;
};

/* 6663 */
struct BINKIO
{
  unsigned int (__stdcall *ReadHeader)(BINKIO *, int, void *, unsigned int);
  unsigned int (__stdcall *ReadFrame)(BINKIO *, unsigned int, int, void *, unsigned int);
  unsigned int (__stdcall *GetBufferSize)(BINKIO *, unsigned int);
  void (__stdcall *SetInfo)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);
  unsigned int (__stdcall *Idle)(BINKIO *);
  void (__stdcall *Close)(BINKIO *);
  int (__stdcall *BGControl)(BINKIO *, unsigned int);
  BINK *bink;
  void (__stdcall *suspend_callback)(BINKIO *);
  int (__stdcall *try_suspend_callback)(BINKIO *);
  void (__stdcall *resume_callback)(BINKIO *);
  void (__stdcall *idle_on_callback)(BINKIO *);
  void (__stdcall *simulate_callback)(BINKIO *, unsigned int, unsigned int);
  unsigned int (__stdcall *timer_callback)();
  void (__stdcall *flipendian_callback)(void *, unsigned int);
  unsigned int (__stdcall *lockedadd_callback)(volatile unsigned int *, int);
  volatile unsigned int ReadError;
  volatile unsigned int DoingARead;
  volatile unsigned int BytesRead;
  volatile unsigned int Working;
  volatile unsigned int TotalTime;
  volatile unsigned int ForegroundTime;
  volatile unsigned int IdleTime;
  volatile unsigned int ThreadTime;
  volatile unsigned int BufSize;
  volatile unsigned int BufHighUsed;
  volatile unsigned int CurBufSize;
  volatile unsigned int CurBufUsed;
  volatile unsigned int Suspended;
  unsigned int align[3];
  volatile char iodata[160];
};

/* 6660 */
struct __declspec(align(8)) BINK
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Frames;
  unsigned int FrameNum;
  unsigned int LastFrameNum;
  unsigned int FrameRate;
  unsigned int FrameRateDiv;
  unsigned int ReadError;
  unsigned int OpenFlags;
  unsigned int BinkType;
  unsigned int Size;
  unsigned int FrameSize;
  unsigned int SndSize;
  unsigned int FrameChangePercent;
  int NumTracks;
  int NumRects;
  BINKRECT FrameRects[8];
  unsigned __int64 FileOffset;
  unsigned int Highest1SecRate;
  unsigned int Highest1SecFrame;
  BINKFRAMEBUFFERS *FrameBuffers;
  void *MaskPlane;
  void *AsyncMaskPlane;
  void *InUseMaskPlane;
  void *LastMaskPlane;
  BINK *next_bink;
  void *compframe;
  int *trackindexes;
  unsigned int MaskPitch;
  unsigned int MaskLength;
  unsigned int LargestFrameSize;
  unsigned int InternalFrames;
  int async_in_progress[2];
  int Paused;
  unsigned int skippedlastblit;
  unsigned int soundon;
  unsigned int videoon;
  unsigned int needio;
  unsigned int compframesize;
  unsigned int compframekey;
  unsigned int playingtracks;
  unsigned int changepercent;
  int closing;
  BUNDLEPOINTERS bunp;
  BINKSND *bsnd;
  unsigned int *frameoffsets;
  void *binkaudiomem;
  unsigned int bink_unique;
  int in_bink_list;
  unsigned int decompwidth;
  unsigned int decompheight;
  unsigned int *tracksizes;
  unsigned int *tracktypes;
  int *trackIDs;
  void *preloadptr;
  int simulate;
  int adjustsim;
  unsigned int compframeoffset;
  unsigned int compframenum;
  BINKIO bio;
  char pri_io_mutex[128];
  char io_mutex[128];
  char snd_mutex[128];
  char *ioptr;
  unsigned int *rtframetimes;
  unsigned int *rtadecomptimes;
  unsigned int *rtvdecomptimes;
  unsigned int *rtblittimes;
  unsigned int *rtreadtimes;
  unsigned int *rtidlereadtimes;
  unsigned int *rtthreadreadtimes;
  unsigned int runtimeframes;
  int rtindex;
  unsigned int iosize;
  unsigned int numrects;
  unsigned int playedframes;
  unsigned int firstframetime;
  unsigned int totalmem;
  unsigned int soundskips;
  unsigned int startblittime;
  unsigned int startsynctime;
  unsigned int startsyncframe;
  unsigned int twoframestime;
  unsigned int slowestframetime;
  unsigned int slowestframe;
  unsigned int slowest2frametime;
  unsigned int slowest2frame;
  unsigned int timevdecomp;
  unsigned int timeadecomp;
  unsigned int timeblit;
  unsigned int timeopen;
  unsigned int fileframerate;
  unsigned int fileframeratediv;
  unsigned int lastblitflags;
  unsigned int lastdecompframe;
  unsigned int lastfinisheddoframe;
  unsigned int lastresynctime;
  unsigned int doresync;
  unsigned int skipped_status_this_frame;
  unsigned int very_delayed;
  unsigned int skippedblits;
  unsigned int skipped_in_a_row;
  unsigned int paused_sync_diff;
  unsigned int last_time_almost_empty;
  int allkeys;
  unsigned int lastfileread;
  unsigned int marker;
  void *alloccompframe;
  BINKFRAMEBUFFERS *allocatedframebuffers;
  unsigned int limit_speakers;
};

/* 6662 */
struct BINKSND
{
  char *sndwritepos;
  unsigned int audiodecompsize;
  unsigned int sndbufsize;
  char *sndbuf;
  char *sndend;
  unsigned int sndcomp;
  char *sndreadpos;
  unsigned int orig_freq;
  unsigned int freq;
  int bits;
  int chans;
  int BestSizeIn16;
  unsigned int BestSizeMask;
  int OnOff;
  unsigned int Latency;
  unsigned int VideoScale;
  unsigned int sndendframe;
  unsigned int sndpad;
  int sndprime;
  int ThreadServiceType;
  unsigned int SoundDroppedOut;
  unsigned int sndconvert8;
  char snddata[256];
  unsigned int align;
  int (__stdcall *Ready)(BINKSND *);
  int (__stdcall *Lock)(BINKSND *, char **, unsigned int *);
  int (__stdcall *Unlock)(BINKSND *, unsigned int);
  void (__stdcall *Volume)(BINKSND *, int);
  void (__stdcall *Pan)(BINKSND *, int);
  int (__stdcall *Pause)(BINKSND *, int);
  int (__stdcall *SetOnOff)(BINKSND *, int);
  void (__stdcall *Close)(BINKSND *);
  void (__stdcall *SpeakerVols)(BINKSND *, float *, unsigned int);
};

/* 6664 */
struct __declspec(align(2)) MovieSpecificInfo
{
  BINK *bink;
  unsigned int binkIOSize;
  unsigned int playbackFlags;
  float playbackVolume;
  bool started;
  bool paused;
  bool useAltBinkHunk;
};

/* 6665 */
struct BINKFRAMETEXTURES
{
  unsigned int Ysize;
  unsigned int cRsize;
  unsigned int cBsize;
  unsigned int Asize;
  ID3D11Texture2D *Ytexture;
  ID3D11Texture2D *cRtexture;
  ID3D11Texture2D *cBtexture;
  ID3D11Texture2D *Atexture;
};

/* 6666 */
struct BINKTEXTURESET
{
  BINKFRAMEBUFFERS bink_buffers;
  BINKFRAMETEXTURES textures[2];
  BINKFRAMETEXTURES tex_draw;
  ID3D11Buffer *vert_buf;
  ID3D11Buffer *const_buf;
  ID3D11ShaderResourceView *Yview;
  ID3D11ShaderResourceView *cBview;
  ID3D11ShaderResourceView *cRview;
  ID3D11ShaderResourceView *Aview;
};

/* 6667 */
struct CinematicTextureSet
{
  GfxImage drawImageY;
  GfxImage drawImageCr;
  GfxImage drawImageCb;
  GfxImage drawImageA;
};

/* 6668 */
struct __declspec(align(4)) CinematicHunk
{
  void *base;
  void *atFront;
  void *atBack;
  void *end;
  void *lastAllocPtr;
  bool fragmented;
};

/* 6669 */
struct __declspec(align(16)) CinematicGlob_Bink
{
  int readRequestId;
  MovieSpecificInfo current;
  MovieSpecificInfo next;
  __declspec(align(8)) BINKTEXTURESET binkTextureSet;
  CinematicTextureSet textureSet;
  int activeImageFrame;
  CinematicHunk masterHunk;
  CinematicHunk binkHunk;
  CinematicHunk altBinkHunk;
  bool altBinkHunkAlloced;
  bool nextBinkShouldUseAlt;
  int asyncThreadIndex;
  float framesPerMs;
  float timeInMsec;
  int lastUnpauseMovieTime;
  int lastUnpauseSysTime;
  float lastSeamlessBinkTimeMs;
};

/* 6670 */
struct BINKREALTIME
{
  unsigned int FrameNum;
  unsigned int FrameRate;
  unsigned int FrameRateDiv;
  unsigned int Frames;
  unsigned int FramesTime;
  unsigned int FramesVideoDecompTime;
  unsigned int FramesAudioDecompTime;
  unsigned int FramesReadTime;
  unsigned int FramesIdleReadTime;
  unsigned int FramesThreadReadTime;
  unsigned int FramesBlitTime;
  unsigned int ReadBufferSize;
  unsigned int ReadBufferUsed;
  unsigned int FramesDataRate;
};

/* 6671 */
struct GfxCachedShaderText
{
  const char *name;
  const char *text;
  int textSize;
};

/* 6672 */
struct GfxAssembledShaderTextFile
{
  unsigned int srcLine;
  unsigned int destLine;
  char fileName[256];
};

/* 6673 */
struct GfxAssembledShaderText
{
  char *string;
  unsigned int used;
  unsigned int total;
  unsigned int currentDestLine;
  bool overflowed;
  unsigned int fileCount;
  GfxAssembledShaderTextFile files[192];
};

/* 6674 */
struct std::_Pair_base<GfxCachedShaderText *,GfxCachedShaderText *>
{
  GfxCachedShaderText *first;
  GfxCachedShaderText *second;
};

/* 6675 */
struct __cppobj std::pair<GfxCachedShaderText *,GfxCachedShaderText *> : std::_Pair_base<GfxCachedShaderText *,GfxCachedShaderText *>
{
};

/* 6676 */
struct ID3DInclude
{
  ID3DIncludeVtbl *vfptr;
};

/* 6677 */
struct ID3DIncludeVtbl
{
  HRESULT (__stdcall *Open)(ID3DInclude *this, _D3D_INCLUDE_TYPE, const char *, const void *, const void **, unsigned int *);
  HRESULT (__stdcall *Close)(ID3DInclude *this, const void *);
};

/* 6678 */
struct __cppobj ID3D10Blob : IUnknown
{
};

/* 6679 */
struct _D3D_SHADER_MACRO
{
  const char *Name;
  const char *Definition;
};

/* 6680 */
struct __declspec(align(8)) SkinXModelCmd
{
  void *modelSurfs;
  DObjAnimMat *mat;
  int surfacePartBits[5];
  vec3_t viewoffset;
  unsigned __int16 surfCount;
};

/* 6681 */
struct GfxModelRigidSurfacePiece
{
  GfxScaledPlacement placement;
  unsigned __int16 baseIndex;
  unsigned __int16 vertCount;
  unsigned __int16 triCount;
  unsigned __int16 firstVertex;
};

/* 6682 */
union $C3AC6677964AD5FBED9D43C627DAC162
{
  DObjAnimMat *baseMat;
  DObjAnimMat *baseMat_local;
};

/* 6683 */
struct __declspec(align(2)) GfxModelSurfaceInfo
{
  $C3AC6677964AD5FBED9D43C627DAC162 ___u0;
  char boneIndex;
  char boneCount;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 lightingHandle;
  char dobjModelIndex;
};

/* 6684 */
struct GfxModelSkinnedSurface
{
  int skinnedCachedOffset;
  XSurface *xsurf;
  GfxModelSurfaceInfo info;
  GfxPackedVertex *skinnedVert;
};

/* 6685 */
struct GfxModelRigidSurface
{
  GfxModelSkinnedSurface surf;
  GfxModelRigidSurfacePiece pieces[1];
};

/* 6686 */
struct XModelRigidCullInfoContext
{
  int cullInfoPos;
  unsigned int cullInfoBufSize;
  char cullFlags;
  unsigned int size;
};

/* 6687 */
struct DpvsDynamicCellCmd_Individual
{
  DpvsPlane *planes;
  unsigned int cellIndex;
  unsigned __int16 viewIndex;
  char planeCount;
  char frustumPlaneCount;
};

/* 6688 */
struct DpvsDynamicCellCmd
{
  unsigned int numBatches;
  DpvsDynamicCellCmd_Individual batches[6];
};

/* 6689 */
struct BModelSurface
{
  GfxScaledPlacement *placement;
  GfxSurface *surf;
  ShaderConstantSet *shaderConstSet;
};

/* 6690 */
union $9E09E48C70841DA2C774BD687C62D1AD
{
  GfxCell *cell;
  GfxCell *cell_local;
  unsigned int cellIndex;
};

/* 6691 */
struct DpvsCellCmd
{
  char type;
  char viewIndex;
  char planeCount;
  char frustumPlaneCount;
  DpvsPlane *planes;
  $9E09E48C70841DA2C774BD687C62D1AD ___u5;
  unsigned __int16 cachedCellIndex;
  unsigned __int16 cachedCellCount;
};

/* 6692 */
struct FilterEntInfo
{
  LocalClientNum_t localClientNum;
  unsigned int entnum;
  GfxEntCellRefInfo info;
  unsigned int cellOffset;
};

/* 6693 */
struct __declspec(align(2)) AddSceneEntSurfsCmd
{
  GfxLight *visibleLights;
  int visibleLightCount;
  vec4_t *dynamicSpotLightPlanes;
  GfxViewParms *viewParms;
  GfxDrawSurf **drawSurfs;
  GfxDrawSurf **lastDrawSurfs;
  void *sceneEnts;
  char *sceneEntVisData;
  char *sceneEntVisDataSunShadow0;
  char *sceneEntVisDataSunShadow1;
  unsigned int sceneEntStart;
  unsigned int sceneEntCount;
  bool isExtraCamera;
  bool sonarUseThermalMaterial;
  bool lightmapOnlyEntSurfs;
};

/* 6694 */
struct DpvsPlanes
{
  DpvsPlane *planes;
  int count;
};

/* 6695 */
struct DpvsClipPlanes
{
  DpvsPlane planes[16];
  unsigned int count;
};

/* 6696 */
struct $B788D7C556DF127C18E0C79883A9766C
{
  GfxCmdBufSourceState *source;
  GfxCmdBufState *state;
};

/* 6697 */
union $8587ED45FBCCC105132FE6D5BABCA6AE
{
  $B788D7C556DF127C18E0C79883A9766C __s0;
  $B788D7C556DF127C18E0C79883A9766C local;
};

/* 6698 */
struct GfxCmdBufContext
{
  $8587ED45FBCCC105132FE6D5BABCA6AE ___u0;
};

/* 6699 */
struct BspTriangleBatch_t
{
  unsigned __int16 triCount;
  unsigned __int16 vertexCount;
  int baseIndex;
  int vertexDataOffset0;
};

/* 6700 */
struct GfxTrianglesDrawStream
{
  const unsigned int *primDrawSurfPos;
  unsigned int surfCount;
  const unsigned __int16 *surfList;
  GfxTexture *reflectionProbeTexture;
  GfxTexture *lightmapSecondaryTexture;
  unsigned int customSamplerFlags;
  GfxTexture *whiteTexture;
  GfxCmdBufContext context;
  GfxSurface *surfaces;
};

/* 6701 */
struct DrawLitWorkerCmd
{
  GfxBackEndData *data;
  GfxWorkerData *workerData;
  GfxViewInfo *viewInfo;
  GfxDrawSurfListInfo *drawList;
  char cmdBufPartitionIndex;
  char cmdBufPartitionCount;
  char cmdBufType;
  char drawListType;
};

/* 6702 */
struct GfxStaticModelDrawStream
{
  unsigned int precompiledIndex;
  const unsigned int *primDrawSurfPos;
  unsigned int smodelCount;
  const unsigned __int16 *smodelList;
  GfxTexture *reflectionProbeTexture;
  unsigned int customSamplerFlags;
  vec4_t viewOrigin;
  GfxFrameStats *frameStats;
  GfxPrimStats *primStats;
  unsigned int viewInfoIndex;
  XSurface *localSurf;
};

/* 6703 */
struct SunShadowMapUserData
{
  GfxSunShadowPartition *partition;
  GfxDrawSurfListInfo *drawList;
};

/* 6704 */
struct __cppobj GfxSortDrawSurfsInterface
{
};

/* 6705 */
struct __cppobj GfxReverseSortDrawSurfsInterface
{
};

/* 6706 */
struct __declspec(align(4)) ExtraCamConfig
{
  unsigned int renderTargetWidth;
  unsigned int renderTargetHeight;
  unsigned int multi_renderTargetWidth;
  unsigned int multi_renderTargetHeight;
  bool initialized;
};

/* 6707 */
struct GPUTimeStamp
{
  ID3D11Query *disjoint;
  ID3D11Query *beginQuery;
  ID3D11Query *endQuery;
  GPUTimeStamp *next;
};

/* 6708 */
struct PerfTimerStyle
{
  Font_s *font;
  float fontWidth;
  float fontHeight;
  PerfTimerDisplayMode displayMode;
  PerfTimerDisplayType displayType;
  float (__cdecl *convertTime)(unsigned int);
  unsigned int timerCount;
  unsigned int timerNameCharCount;
  const char **timerNames;
  GfxColor *timerColors;
  float totalBarY;
  float budgetMs;
  float budgetPixels;
  unsigned int bucketCount;
  const char **bucketNames;
};

/* 6709 */
struct PerfTimer
{
  unsigned int beginTime;
  unsigned int totalTime;
  PerfTimer *parent;
  PerfTimer *nextSibling;
  bool hasChild;
  bool isActive;
  bool hide;
  char bucket;
};

/* 6710 */
struct PerfTimerFrame
{
  unsigned int beginTime;
  unsigned int totalTime;
  PerfTimer *timers[80];
};

/* 6711 */
struct PerfTimerFrameHistory
{
  unsigned int currentFrame;
  unsigned int frameCount;
  PerfTimerFrame frames[64];
};

/* 6712 */
struct __cppobj GPUTimer : PerfTimer
{
  GPUTimeStamp *firstTimeStamp;
  GPUTimeStamp *currentTimeStamp;
  int adjustTime;
};

/* 6713 */
struct GPUTimerFrame
{
  unsigned int frameIndex;
  unsigned int beginTime;
  unsigned int totalTime;
  bool isCurrent;
  GPUTimer timers[40];
};

/* 6714 */
struct __declspec(align(8)) D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
{
  unsigned __int64 Frequency;
  int Disjoint;
};

/* 6715 */
struct $0642D8F4F2FB6DE0ED5782C9888072C4
{
  GfxImage *imageHashTable[2048];
  int picmip;
  int picmipBump;
  int picmipSpec;
  CardMemory totalMemory;
};

/* 6716 */
struct std::_Pair_base<GfxImage * *,GfxImage * *>
{
  GfxImage **first;
  GfxImage **second;
};

/* 6717 */
struct __cppobj std::pair<GfxImage * *,GfxImage * *> : std::_Pair_base<GfxImage * *,GfxImage * *>
{
};

/* 6718 */
struct ImageList
{
  unsigned int count;
  GfxImage *image[5312];
};

/* 6719 */
struct BuiltinImageConstructorTable
{
  const char *name;
  void (__cdecl *LoadCallback)(GfxImage *);
};

/* 6720 */
struct GfxImageFileHeader
{
  char tag[3];
  char version;
  char format;
  char flags;
  __int16 dimensions[3];
  float gamma;
  char maxGlossForMip[16];
  int fileSizeForPicmip[8];
};

/* 6721 */
struct WaveletHuffmanDecode
{
  __int16 value;
  __int16 bits;
};

/* 6722 */
struct __declspec(align(4)) WaveletDecode
{
  unsigned __int16 value;
  unsigned __int16 bit;
  const char *data;
  int width;
  int height;
  int channels;
  int bpp;
  int mipLevel;
  bool dataInitialized;
};

/* 6723 */
struct $8DF6ACE4561DB5414D0AC6507CBBACB6
{
  unsigned __int16 b : 5;
  unsigned __int16 g : 6;
  unsigned __int16 r : 5;
};

/* 6724 */
union ddscolor_t
{
  $8DF6ACE4561DB5414D0AC6507CBBACB6 c;
  unsigned __int16 rgb;
};

/* 6725 */
struct DdsBlock_Dxt1_t
{
  ddscolor_t color0;
  ddscolor_t color1;
  char bits[4];
};

/* 6726 */
struct DdsBlock_Dxt3_t
{
  char alpha[8];
  DdsBlock_Dxt1_t color;
};

/* 6727 */
struct GfxRawPixel
{
  char r;
  char g;
  char b;
  char a;
};

/* 6728 */
struct GfxRawImage
{
  char name[64];
  bool hasAlpha;
  int width;
  int height;
  float gamma;
  char flags;
  GfxRawPixel *pixels;
};

/* 6729 */
struct DdsBlock_Dxt5_t
{
  char alpha0;
  char alpha1;
  char alpha[6];
  DdsBlock_Dxt1_t color;
};

/* 6730 */
struct GfxMetrics
{
  unsigned __int16 cubemapShotRes;
  unsigned __int16 cubemapShotPixelBorder;
};

/* 6731 */
struct GfxAssets
{
  ID3D11Query *pixelCountQuery[4];
};

/* 6732 */
struct GfxWindowParms
{
  HWND__ *hwnd;
  int hz;
  bool fullscreen;
  int x;
  int y;
  int sceneWidth;
  int sceneHeight;
  int displayWidth;
  int displayHeight;
};

/* 6733 */
struct __cppobj IDXGIDevice : IDXGIObject
{
};

/* 6734 */
struct DXGI_SHARED_RESOURCE
{
  void *Handle;
};

/* 6735 */
struct __cppobj IDXGIDevice1 : IDXGIDevice
{
};

/* 6736 */
struct GfxGammaRamp
{
  unsigned __int16 entries[256];
};

/* 6745 */
union $985051285AB838B711572F193DE40719
{
  int i[8];
  char s[80];
};

/* 6737 */
struct jpeg_error_mgr
{
  void (__cdecl *error_exit)(jpeg_common_struct *);
  void (__cdecl *emit_message)(jpeg_common_struct *, int);
  void (__cdecl *output_message)(jpeg_common_struct *);
  void (__cdecl *format_message)(jpeg_common_struct *, char *);
  void (__cdecl *reset_error_mgr)(jpeg_common_struct *);
  int msg_code;
  $985051285AB838B711572F193DE40719 msg_parm;
  int trace_level;
  int num_warnings;
  const char *const *jpeg_message_table;
  int last_jpeg_message;
  const char *const *addon_message_table;
  int first_addon_message;
  int last_addon_message;
  void (*exit)(...);
  void (__cdecl *printf)(char *);
};

/* 6742 */
struct jpeg_alloc
{
  void *(__cdecl *malloc)(unsigned int);
  void (__cdecl *free)(void *);
};

/* 6738 */
struct jpeg_common_struct
{
  jpeg_error_mgr *err;
  jpeg_memory_mgr *mem;
  jpeg_progress_mgr *progress;
  void *client_data;
  char is_decompressor;
  int global_state;
  jpeg_alloc alloc;
};

/* 6739 */
struct jvirt_sarray_control
{
  char **mem_buffer;
  unsigned int rows_in_array;
  unsigned int samplesperrow;
  unsigned int maxaccess;
  unsigned int rows_in_mem;
  unsigned int rowsperchunk;
  unsigned int cur_start_row;
  unsigned int first_undef_row;
  char pre_zero;
  char dirty;
  char b_s_open;
  jvirt_sarray_control *next;
  backing_store_struct b_s_info;
};

/* 6740 */
struct backing_store_struct
{
  void (__cdecl *read_backing_store)(jpeg_common_struct *, backing_store_struct *, void *, int, int);
  void (__cdecl *write_backing_store)(jpeg_common_struct *, backing_store_struct *, void *, int, int);
  void (__cdecl *close_backing_store)(jpeg_common_struct *, backing_store_struct *);
  _iobuf *temp_file;
  char temp_name[64];
};

/* 6741 */
struct jvirt_barray_control
{
  __int16 (**mem_buffer)[64];
  unsigned int rows_in_array;
  unsigned int blocksperrow;
  unsigned int maxaccess;
  unsigned int rows_in_mem;
  unsigned int rowsperchunk;
  unsigned int cur_start_row;
  unsigned int first_undef_row;
  char pre_zero;
  char dirty;
  char b_s_open;
  jvirt_barray_control *next;
  backing_store_struct b_s_info;
};

/* 6743 */
struct jpeg_memory_mgr
{
  void *(__cdecl *alloc_small)(jpeg_common_struct *, int, unsigned int);
  void *(__cdecl *alloc_large)(jpeg_common_struct *, int, unsigned int);
  char **(__cdecl *alloc_sarray)(jpeg_common_struct *, int, unsigned int, unsigned int);
  __int16 (**(__cdecl *alloc_barray)(jpeg_common_struct *, int, unsigned int, unsigned int))[64];
  jvirt_sarray_control *(__cdecl *request_virt_sarray)(jpeg_common_struct *, int, char, unsigned int, unsigned int, unsigned int);
  jvirt_barray_control *(__cdecl *request_virt_barray)(jpeg_common_struct *, int, char, unsigned int, unsigned int, unsigned int);
  void (__cdecl *realize_virt_arrays)(jpeg_common_struct *);
  char **(__cdecl *access_virt_sarray)(jpeg_common_struct *, jvirt_sarray_control *, unsigned int, unsigned int, char);
  __int16 (**(__cdecl *access_virt_barray)(jpeg_common_struct *, jvirt_barray_control *, unsigned int, unsigned int, char))[64];
  void (__cdecl *free_pool)(jpeg_common_struct *, int);
  void (__cdecl *self_destruct)(jpeg_common_struct *);
  int max_memory_to_use;
  int max_alloc_chunk;
  jpeg_alloc alloc;
};

/* 6744 */
struct jpeg_progress_mgr
{
  void (__cdecl *progress_monitor)(jpeg_common_struct *);
  int pass_counter;
  int pass_limit;
  int completed_passes;
  int total_passes;
};

/* 6746 */
struct jpeg_source_mgr
{
  const char *next_input_byte;
  unsigned int bytes_in_buffer;
  void (__cdecl *init_source)(jpeg_decompress_struct *);
  char (__cdecl *fill_input_buffer)(jpeg_decompress_struct *);
  void (__cdecl *skip_input_data)(jpeg_decompress_struct *, int);
  char (__cdecl *resync_to_restart)(jpeg_decompress_struct *, int);
  void (__cdecl *term_source)(jpeg_decompress_struct *);
};

/* 6747 */
struct __declspec(align(2)) JQUANT_TBL
{
  unsigned __int16 quantval[64];
  char sent_table;
};

/* 6748 */
struct JHUFF_TBL
{
  char bits[17];
  char huffval[256];
  char sent_table;
};

/* 6749 */
struct jpeg_component_info
{
  int component_id;
  int component_index;
  int h_samp_factor;
  int v_samp_factor;
  int quant_tbl_no;
  int dc_tbl_no;
  int ac_tbl_no;
  unsigned int width_in_blocks;
  unsigned int height_in_blocks;
  int DCT_scaled_size;
  unsigned int downsampled_width;
  unsigned int downsampled_height;
  char component_needed;
  int MCU_width;
  int MCU_height;
  int MCU_blocks;
  int MCU_sample_width;
  int last_col_width;
  int last_row_height;
  JQUANT_TBL *quant_table;
  void *dct_table;
};

/* 6750 */
struct jpeg_marker_struct
{
  jpeg_marker_struct *next;
  char marker;
  unsigned int original_length;
  unsigned int data_length;
  char *data;
};

/* 6751 */
struct __declspec(align(8)) jpeg_decompress_struct
{
  jpeg_error_mgr *err;
  jpeg_memory_mgr *mem;
  jpeg_progress_mgr *progress;
  void *client_data;
  char is_decompressor;
  int global_state;
  jpeg_alloc alloc;
  jpeg_source_mgr *src;
  unsigned int image_width;
  unsigned int image_height;
  int num_components;
  J_COLOR_SPACE jpeg_color_space;
  J_COLOR_SPACE out_color_space;
  unsigned int scale_num;
  unsigned int scale_denom;
  long double output_gamma;
  char buffered_image;
  char raw_data_out;
  J_DCT_METHOD dct_method;
  char do_fancy_upsampling;
  char do_block_smoothing;
  char quantize_colors;
  J_DITHER_MODE dither_mode;
  char two_pass_quantize;
  int desired_number_of_colors;
  char enable_1pass_quant;
  char enable_external_quant;
  char enable_2pass_quant;
  unsigned int output_width;
  unsigned int output_height;
  int out_color_components;
  int output_components;
  int rec_outbuf_height;
  int actual_number_of_colors;
  char **colormap;
  unsigned int output_scanline;
  int input_scan_number;
  unsigned int input_iMCU_row;
  int output_scan_number;
  unsigned int output_iMCU_row;
  int (*coef_bits)[64];
  JQUANT_TBL *quant_tbl_ptrs[4];
  JHUFF_TBL *dc_huff_tbl_ptrs[4];
  JHUFF_TBL *ac_huff_tbl_ptrs[4];
  int data_precision;
  jpeg_component_info *comp_info;
  char progressive_mode;
  char arith_code;
  char arith_dc_L[16];
  char arith_dc_U[16];
  char arith_ac_K[16];
  unsigned int restart_interval;
  char saw_JFIF_marker;
  char JFIF_major_version;
  char JFIF_minor_version;
  char density_unit;
  unsigned __int16 X_density;
  unsigned __int16 Y_density;
  char saw_Adobe_marker;
  char Adobe_transform;
  char CCIR601_sampling;
  jpeg_marker_struct *marker_list;
  int max_h_samp_factor;
  int max_v_samp_factor;
  int min_DCT_scaled_size;
  unsigned int total_iMCU_rows;
  char *sample_range_limit;
  int comps_in_scan;
  jpeg_component_info *cur_comp_info[4];
  unsigned int MCUs_per_row;
  unsigned int MCU_rows_in_scan;
  int blocks_in_MCU;
  int MCU_membership[10];
  int Ss;
  int Se;
  int Ah;
  int Al;
  int unread_marker;
  jpeg_decomp_master *master;
  jpeg_d_main_controller *main;
  jpeg_d_coef_controller *coef;
  jpeg_d_post_controller *post;
  jpeg_input_controller *inputctl;
  jpeg_marker_reader *marker;
  jpeg_entropy_decoder *entropy;
  jpeg_inverse_dct *idct;
  jpeg_upsampler *upsample;
  jpeg_color_deconverter *cconvert;
  jpeg_color_quantizer *cquantize;
};

/* 6752 */
struct __declspec(align(4)) jpeg_decomp_master
{
  void (__cdecl *prepare_for_output_pass)(jpeg_decompress_struct *);
  void (__cdecl *finish_output_pass)(jpeg_decompress_struct *);
  char is_dummy_pass;
};

/* 6753 */
struct jpeg_d_main_controller
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *, J_BUF_MODE);
  void (__cdecl *process_data)(jpeg_decompress_struct *, char **, unsigned int *, unsigned int);
};

/* 6754 */
struct jpeg_d_coef_controller
{
  void (__cdecl *start_input_pass)(jpeg_decompress_struct *);
  int (__cdecl *consume_data)(jpeg_decompress_struct *);
  void (__cdecl *start_output_pass)(jpeg_decompress_struct *);
  int (__cdecl *decompress_data)(jpeg_decompress_struct *, char ***);
  jvirt_barray_control **coef_arrays;
};

/* 6755 */
struct jpeg_d_post_controller
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *, J_BUF_MODE);
  void (__cdecl *post_process_data)(jpeg_decompress_struct *, char ***, unsigned int *, unsigned int, char **, unsigned int *, unsigned int);
};

/* 6756 */
struct __declspec(align(4)) jpeg_input_controller
{
  int (__cdecl *consume_input)(jpeg_decompress_struct *);
  void (__cdecl *reset_input_controller)(jpeg_decompress_struct *);
  void (__cdecl *start_input_pass)(jpeg_decompress_struct *);
  void (__cdecl *finish_input_pass)(jpeg_decompress_struct *);
  char has_multiple_scans;
  char eoi_reached;
};

/* 6757 */
struct jpeg_marker_reader
{
  void (__cdecl *reset_marker_reader)(jpeg_decompress_struct *);
  int (__cdecl *read_markers)(jpeg_decompress_struct *);
  char (__cdecl *read_restart_marker)(jpeg_decompress_struct *);
  char saw_SOI;
  char saw_SOF;
  int next_restart_num;
  unsigned int discarded_bytes;
};

/* 6758 */
struct __declspec(align(4)) jpeg_entropy_decoder
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *);
  char (__cdecl *decode_mcu)(jpeg_decompress_struct *, __int16 (**)[64]);
  char insufficient_data;
};

/* 6759 */
struct jpeg_inverse_dct
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *);
  void (__cdecl *inverse_DCT[10])(jpeg_decompress_struct *, jpeg_component_info *, __int16 *, char **, unsigned int);
};

/* 6760 */
struct __declspec(align(4)) jpeg_upsampler
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *);
  void (__cdecl *upsample)(jpeg_decompress_struct *, char ***, unsigned int *, unsigned int, char **, unsigned int *, unsigned int);
  char need_context_rows;
};

/* 6761 */
struct jpeg_color_deconverter
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *);
  void (__cdecl *color_convert)(jpeg_decompress_struct *, char ***, unsigned int, char **, int);
};

/* 6762 */
struct jpeg_color_quantizer
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *, char);
  void (__cdecl *color_quantize)(jpeg_decompress_struct *, char **, char **, int);
  void (__cdecl *finish_pass)(jpeg_decompress_struct *);
  void (__cdecl *new_color_map)(jpeg_decompress_struct *);
};

/* 6763 */
struct jpeg_compress_struct
{
  jpeg_error_mgr *err;
  jpeg_memory_mgr *mem;
  jpeg_progress_mgr *progress;
  void *client_data;
  char is_decompressor;
  int global_state;
  jpeg_alloc alloc;
  jpeg_destination_mgr *dest;
  unsigned int image_width;
  unsigned int image_height;
  int input_components;
  J_COLOR_SPACE in_color_space;
  long double input_gamma;
  int data_precision;
  int num_components;
  J_COLOR_SPACE jpeg_color_space;
  jpeg_component_info *comp_info;
  JQUANT_TBL *quant_tbl_ptrs[4];
  JHUFF_TBL *dc_huff_tbl_ptrs[4];
  JHUFF_TBL *ac_huff_tbl_ptrs[4];
  char arith_dc_L[16];
  char arith_dc_U[16];
  char arith_ac_K[16];
  int num_scans;
  jpeg_scan_info *scan_info;
  char raw_data_in;
  char arith_code;
  char optimize_coding;
  char CCIR601_sampling;
  int smoothing_factor;
  J_DCT_METHOD dct_method;
  unsigned int restart_interval;
  int restart_in_rows;
  char write_JFIF_header;
  char JFIF_major_version;
  char JFIF_minor_version;
  char density_unit;
  unsigned __int16 X_density;
  unsigned __int16 Y_density;
  char write_Adobe_marker;
  unsigned int next_scanline;
  char progressive_mode;
  int max_h_samp_factor;
  int max_v_samp_factor;
  unsigned int total_iMCU_rows;
  int comps_in_scan;
  jpeg_component_info *cur_comp_info[4];
  unsigned int MCUs_per_row;
  unsigned int MCU_rows_in_scan;
  int blocks_in_MCU;
  int MCU_membership[10];
  int Ss;
  int Se;
  int Ah;
  int Al;
  jpeg_comp_master *master;
  jpeg_c_main_controller *main;
  jpeg_c_prep_controller *prep;
  jpeg_c_coef_controller *coef;
  jpeg_marker_writer *marker;
  jpeg_color_converter *cconvert;
  jpeg_downsampler *downsample;
  jpeg_forward_dct *fdct;
  jpeg_entropy_encoder *entropy;
  jpeg_scan_info *script_space;
  int script_space_size;
};

/* 6764 */
struct jpeg_destination_mgr
{
  char *next_output_byte;
  unsigned int free_in_buffer;
  void (__cdecl *init_destination)(jpeg_compress_struct *);
  char (__cdecl *empty_output_buffer)(jpeg_compress_struct *);
  void (__cdecl *term_destination)(jpeg_compress_struct *);
};

/* 6765 */
const struct jpeg_scan_info
{
  int comps_in_scan;
  int component_index[4];
  int Ss;
  int Se;
  int Ah;
  int Al;
};

/* 6766 */
struct __declspec(align(4)) jpeg_comp_master
{
  void (__cdecl *prepare_for_pass)(jpeg_compress_struct *);
  void (__cdecl *pass_startup)(jpeg_compress_struct *);
  void (__cdecl *finish_pass)(jpeg_compress_struct *);
  char call_pass_startup;
  char is_last_pass;
};

/* 6767 */
struct jpeg_c_main_controller
{
  void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
  void (__cdecl *process_data)(jpeg_compress_struct *, char **, unsigned int *, unsigned int);
};

/* 6768 */
struct jpeg_c_prep_controller
{
  void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
  void (__cdecl *pre_process_data)(jpeg_compress_struct *, char **, unsigned int *, unsigned int, char ***, unsigned int *, unsigned int);
};

/* 6769 */
struct jpeg_c_coef_controller
{
  void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
  char (__cdecl *compress_data)(jpeg_compress_struct *, char ***);
};

/* 6770 */
struct jpeg_marker_writer
{
  void (__cdecl *write_file_header)(jpeg_compress_struct *);
  void (__cdecl *write_frame_header)(jpeg_compress_struct *);
  void (__cdecl *write_scan_header)(jpeg_compress_struct *);
  void (__cdecl *write_file_trailer)(jpeg_compress_struct *);
  void (__cdecl *write_tables_only)(jpeg_compress_struct *);
  void (__cdecl *write_marker_header)(jpeg_compress_struct *, int, unsigned int);
  void (__cdecl *write_marker_byte)(jpeg_compress_struct *, int);
};

/* 6771 */
struct jpeg_color_converter
{
  void (__cdecl *start_pass)(jpeg_compress_struct *);
  void (__cdecl *color_convert)(jpeg_compress_struct *, char **, char ***, unsigned int, int);
};

/* 6772 */
struct __declspec(align(4)) jpeg_downsampler
{
  void (__cdecl *start_pass)(jpeg_compress_struct *);
  void (__cdecl *downsample)(jpeg_compress_struct *, char ***, unsigned int, char ***, unsigned int);
  char need_context_rows;
};

/* 6773 */
struct jpeg_forward_dct
{
  void (__cdecl *start_pass)(jpeg_compress_struct *);
  void (__cdecl *forward_DCT)(jpeg_compress_struct *, jpeg_component_info *, char **, __int16 (*)[64], unsigned int, unsigned int, unsigned int);
};

/* 6774 */
struct jpeg_entropy_encoder
{
  void (__cdecl *start_pass)(jpeg_compress_struct *, char);
  char (__cdecl *encode_mcu)(jpeg_compress_struct *, __int16 (**)[64]);
  void (__cdecl *finish_pass)(jpeg_compress_struct *);
};

/* 6775 */
struct my_destination_mgr
{
  jpeg_destination_mgr pub;
  char *outfile;
  int size;
};

/* 6776 */
struct LightGlobals
{
  int defCount;
  GfxLightDef *defs[64];
};

/* 6777 */
struct std::_Pair_base<GfxSurface * *,GfxSurface * *>
{
  GfxSurface **first;
  GfxSurface **second;
};

/* 6778 */
struct __cppobj std::pair<GfxSurface * *,GfxSurface * *> : std::_Pair_base<GfxSurface * *,GfxSurface * *>
{
};

/* 6779 */
struct LightDefCopyConfig
{
  char *dest;
  unsigned int zoom;
};

/* 6780 */
struct FxWorldMarkPoint
{
  vec3_t xyz;
  vec3_t vertWeights;
};

/* 6781 */
struct MarkModelCoreContext
{
  MarkInfo *markInfo;
  GfxMarkContext *markContext;
  vec3_t markOrigin;
  vec3_t markDir;
  MarkClipPlaneSet *clipPlanes;
  vec3_t *transformMatrix;
  vec3_t *transformNormalMatrix;
};

/* 6782 */
struct FxModelMarkPoint
{
  vec3_t xyz;
  vec3_t vertWeights;
};

/* 6783 */
struct __declspec(align(4)) stream_dest_info_t
{
  const char *Usage;
  char UsageIndex;
};

/* 6784 */
struct BuiltInMaterialTable
{
  const char *name;
  Material **material;
};

/* 6785 */
struct PerMapMaterialTable
{
  const char *name;
  Material **material;
};

/* 6786 */
struct $651B969C8C167A7B2617ABA718AC03F5
{
  int techniqueSetCount;
  MaterialTechniqueSet *techniqueSetHashTable[2048];
};

/* 6787 */
struct stream_source_info_t
{
  char Stream;
  char Offset;
  char Type;
};

/* 6788 */
struct std::_Pair_base<MaterialMemory *,MaterialMemory *>
{
  MaterialMemory *first;
  MaterialMemory *second;
};

/* 6789 */
struct __cppobj std::pair<MaterialMemory *,MaterialMemory *> : std::_Pair_base<MaterialMemory *,MaterialMemory *>
{
};

/* 6790 */
struct MaterialList
{
  unsigned int count;
  MaterialMemory sorted[4992];
};

/* 6791 */
struct GfxShaderConstantBlock
{
  unsigned int count;
  unsigned __int16 dest[32];
  const float *value[32];
};

/* 6792 */
struct CodeSamplerSource
{
  const char *name;
  MaterialTextureSource source;
  CodeSamplerSource *subtable;
  int arrayCount;
  int arrayStride;
};

/* 6793 */
struct CodeConstantSource
{
  const char *name;
  char source;
  CodeConstantSource *subtable;
  int arrayCount;
  int arrayStride;
};

/* 6794 */
struct ScriptableConstant
{
  char source;
  const char *sourceName;
  unsigned int sourceNameHash;
};

/* 6795 */
struct MtlStateMapBitName
{
  const char *name;
  int bits;
};

/* 6796 */
struct MtlStateMapBitGroup
{
  const char *name;
  MtlStateMapBitName *bitNames;
  int stateBitsMask[2];
};

/* 6797 */
struct CustomCodeConstantMapping
{
  unsigned __int16 cbuffer;
  unsigned __int16 dest;
  MaterialArgumentCodeConst codeConst;
};

/* 6798 */
struct MaterialString
{
  const char *string;
  unsigned int hash;
};

/* 6799 */
struct MaterialStateMapRule
{
  unsigned int stateBitsMask[2];
  unsigned int stateBitsValue[2];
  unsigned int stateBitsSet[2];
  unsigned int stateBitsClear[2];
};

/* 6800 */
struct MaterialStateMapRuleSet
{
  int ruleCount;
  MaterialStateMapRule rules[1];
};

/* 6801 */
struct MaterialStateMap
{
  const char *name;
  MaterialStateMapRuleSet *ruleSet[10];
};

/* 6802 */
struct $0AD14BB7CFBBB430B53E8DB82A6C71FF
{
  unsigned int vertexDeclCount;
  MaterialVertexDeclaration vertexDeclHashTable[64];
  unsigned int literalCount;
  vec4_t literalTable[32];
  unsigned int stringCount;
  MaterialString stringHashTable[1024];
  unsigned int vertexShaderCount;
  MaterialVertexShader *vertexShaderHashTable[5120];
  unsigned int pixelShaderCount;
  MaterialPixelShader *pixelShaderHashTable[24576];
  unsigned int stateMapCount;
  MaterialStateMap *stateMapHashTable[64];
  unsigned int techniqueCount;
  MaterialTechnique *techniqueHashTable[16384];
  MaterialRaw *sortMtlRaw;
};

/* 6803 */
struct MaterialTypeInfo
{
  const char *prefix;
  const char *techniqueSetPrefix;
  unsigned int prefixLen;
};

/* 6804 */
struct _D3D11_SHADER_VARIABLE_DESC
{
  const char *Name;
  unsigned int StartOffset;
  unsigned int Size;
  unsigned int uFlags;
  void *DefaultValue;
  unsigned int StartTexture;
  unsigned int TextureSize;
  unsigned int StartSampler;
  unsigned int SamplerSize;
};

/* 6805 */
struct _D3D11_SHADER_TYPE_DESC
{
  _D3D_SHADER_VARIABLE_CLASS Class;
  _D3D_SHADER_VARIABLE_TYPE Type;
  unsigned int Rows;
  unsigned int Columns;
  unsigned int Elements;
  unsigned int Members;
  unsigned int Offset;
  const char *Name;
};

/* 6806 */
struct ID3D11ShaderReflectionType
{
  ID3D11ShaderReflectionTypeVtbl *vfptr;
};

/* 6807 */
struct ID3D11ShaderReflectionTypeVtbl
{
  HRESULT (__stdcall *GetDesc)(ID3D11ShaderReflectionType *this, _D3D11_SHADER_TYPE_DESC *);
  _BYTE gap4[4];
  ID3D11ShaderReflectionType *(__stdcall *GetMemberTypeByName)(ID3D11ShaderReflectionType *this, const char *);
  const char *(__stdcall *GetMemberTypeName)(ID3D11ShaderReflectionType *this, unsigned int);
  HRESULT (__stdcall *IsEqual)(ID3D11ShaderReflectionType *this, ID3D11ShaderReflectionType *);
  ID3D11ShaderReflectionType *(__stdcall *GetSubType)(ID3D11ShaderReflectionType *this);
  ID3D11ShaderReflectionType *(__stdcall *GetBaseClass)(ID3D11ShaderReflectionType *this);
  unsigned int (__stdcall *GetNumInterfaces)(ID3D11ShaderReflectionType *this);
  ID3D11ShaderReflectionType *(__stdcall *GetInterfaceByIndex)(ID3D11ShaderReflectionType *this, unsigned int);
  HRESULT (__stdcall *IsOfType)(ID3D11ShaderReflectionType *this, ID3D11ShaderReflectionType *);
  HRESULT (__stdcall *ImplementsInterface)(ID3D11ShaderReflectionType *this, ID3D11ShaderReflectionType *);
};

/* 6808 */
struct std::_Pair_base<Material * *,Material * *>
{
  Material **first;
  Material **second;
};

/* 6809 */
struct __cppobj std::pair<Material * *,Material * *> : std::_Pair_base<Material * *,Material * *>
{
};

/* 6810 */
struct _D3D11_SHADER_BUFFER_DESC
{
  const char *Name;
  _D3D_CBUFFER_TYPE Type;
  unsigned int Variables;
  unsigned int Size;
  unsigned int uFlags;
};

/* 6811 */
struct ID3D11ShaderReflectionVariable
{
  ID3D11ShaderReflectionVariableVtbl *vfptr;
};

/* 6812 */
struct ID3D11ShaderReflectionConstantBuffer
{
  ID3D11ShaderReflectionConstantBufferVtbl *vfptr;
};

/* 6813 */
struct ID3D11ShaderReflectionConstantBufferVtbl
{
  HRESULT (__stdcall *GetDesc)(ID3D11ShaderReflectionConstantBuffer *this, _D3D11_SHADER_BUFFER_DESC *);
  ID3D11ShaderReflectionVariable *(__stdcall *GetVariableByIndex)(ID3D11ShaderReflectionConstantBuffer *this, unsigned int);
  ID3D11ShaderReflectionVariable *(__stdcall *GetVariableByName)(ID3D11ShaderReflectionConstantBuffer *this, const char *);
};

/* 6814 */
struct ID3D11ShaderReflectionVariableVtbl
{
  HRESULT (__stdcall *GetDesc)(ID3D11ShaderReflectionVariable *this, _D3D11_SHADER_VARIABLE_DESC *);
  ID3D11ShaderReflectionType *(__stdcall *GetType)(ID3D11ShaderReflectionVariable *this);
  ID3D11ShaderReflectionConstantBuffer *(__stdcall *GetBuffer)(ID3D11ShaderReflectionVariable *this);
  unsigned int (__stdcall *GetInterfaceSlot)(ID3D11ShaderReflectionVariable *this, unsigned int);
};

/* 6815 */
union $AEF6B03B189E03B987D1195B3134F046
{
  unsigned __int16 offset;
  $31FD236FB3888DAAD580490E35E6A96F __s1;
};

/* 6816 */
struct __declspec(align(4)) ShaderUniformDef
{
  ShaderParamType type;
  const char *name;
  unsigned __int16 index;
  $AEF6B03B189E03B987D1195B3134F046 resourceLocation;
  unsigned __int16 resourceSize;
  unsigned __int16 resourceBuffer;
  bool isTransposed;
  bool isAssigned;
};

/* 6817 */
struct _D3D11_SHADER_DESC
{
  unsigned int Version;
  const char *Creator;
  unsigned int Flags;
  unsigned int ConstantBuffers;
  unsigned int BoundResources;
  unsigned int InputParameters;
  unsigned int OutputParameters;
  unsigned int InstructionCount;
  unsigned int TempRegisterCount;
  unsigned int TempArrayCount;
  unsigned int DefCount;
  unsigned int DclCount;
  unsigned int TextureNormalInstructions;
  unsigned int TextureLoadInstructions;
  unsigned int TextureCompInstructions;
  unsigned int TextureBiasInstructions;
  unsigned int TextureGradientInstructions;
  unsigned int FloatInstructionCount;
  unsigned int IntInstructionCount;
  unsigned int UintInstructionCount;
  unsigned int StaticFlowControlCount;
  unsigned int DynamicFlowControlCount;
  unsigned int MacroInstructionCount;
  unsigned int ArrayInstructionCount;
  unsigned int CutInstructionCount;
  unsigned int EmitInstructionCount;
  D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
  unsigned int GSMaxOutputVertexCount;
  D3D_PRIMITIVE InputPrimitive;
  unsigned int PatchConstantParameters;
  unsigned int cGSInstanceCount;
  unsigned int cControlPoints;
  D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
  D3D_TESSELLATOR_PARTITIONING HSPartitioning;
  D3D_TESSELLATOR_DOMAIN TessellatorDomain;
  unsigned int cBarrierInstructions;
  unsigned int cInterlockedInstructions;
  unsigned int cTextureStoreInstructions;
};

/* 6818 */
struct _D3D11_SIGNATURE_PARAMETER_DESC
{
  const char *SemanticName;
  unsigned int SemanticIndex;
  unsigned int Register;
  D3D_NAME SystemValueType;
  D3D_REGISTER_COMPONENT_TYPE ComponentType;
  char Mask;
  char ReadWriteMask;
  unsigned int Stream;
};

/* 6819 */
struct __declspec(align(4)) ShaderIndexRange
{
  unsigned int first;
  unsigned int count;
  bool isImplicit;
};

/* 6820 */
struct ShaderArgumentDest
{
  ShaderIndexRange indexRange;
  const char *paramName;
};

/* 6821 */
struct __cppobj ID3D11ShaderReflection : IUnknown
{
};

/* 6822 */
struct _D3D11_SHADER_INPUT_BIND_DESC
{
  const char *Name;
  _D3D_SHADER_INPUT_TYPE Type;
  unsigned int BindPoint;
  unsigned int BindCount;
  unsigned int uFlags;
  D3D_RESOURCE_RETURN_TYPE ReturnType;
  D3D_SRV_DIMENSION Dimension;
  unsigned int NumSamples;
};

/* 6823 */
struct __declspec(align(4)) TechniqueNameControl
{
  const char *name;
  char type;
  bool inUse;
};

/* 6824 */
struct ShaderVaryingDef
{
  const char *name;
  char streamDest;
  char resourceDest;
  bool isAssigned;
  bool isSpecialFragmentRegister;
};

/* 6825 */
struct ShaderParameterSet
{
  ShaderUniformDef uniformInputs[512];
  ShaderVaryingDef varyingInputs[512];
  ShaderVaryingDef outputs[16];
  unsigned int uniformInputCount;
  unsigned int varyingInputCount;
  unsigned int outputCount;
};

/* 6826 */
union $BE8D4BC380D89812AEF7B3507E25C3D2
{
  const float *literalConst;
  unsigned __int16 codeIndex;
  const char *name;
};

/* 6827 */
struct ShaderArgumentSource
{
  ShaderIndexRange indexRange;
  unsigned __int16 type;
  $BE8D4BC380D89812AEF7B3507E25C3D2 u;
};

/* 6828 */
struct VertexConstantMapping
{
  unsigned __int16 type;
  unsigned __int16 dest;
  MaterialArgumentCodeConst codeConst;
};

/* 6829 */
struct VertexConstantMappingEntry
{
  char value;
  char materialType;
  VertexConstantMapping *mappingArray;
  unsigned int mappingCount;
};

/* 6830 */
struct GfxMeshGlobals
{
  GfxQuadMeshData fullSceneViewMesh[4];
};

/* 6831 */
struct std::_Pair_base<XModel * *,XModel * *>
{
  XModel **first;
  XModel **second;
};

/* 6832 */
struct __cppobj std::pair<XModel * *,XModel * *> : std::_Pair_base<XModel * *,XModel * *>
{
};

/* 6833 */
struct ModelList
{
  int count;
  XModel *sorted[2048];
};

/* 6834 */
struct GfxLightingSHAndVis
{
  GfxLightingSH sh;
  float vis;
};

/* 6835 */
struct GfxModelLightGlob
{
  float invImageHeight;
  unsigned int baseIndex;
  unsigned int totalEntryLimit;
  unsigned int entryBitsY;
  unsigned int imageHeight;
  GfxEntity *entities;
  unsigned int modFrameCount;
  GfxImage *image;
  unsigned int xmodelEntryLimit;
  GfxLightingInfo *lightingInfo;
  vec3_t *lightingOrigins;
  GfxLightingSHAndVis *lightingSHAndVis;
  int allocModelFail;
  unsigned int *pixelFreeBits[4];
  unsigned int *prevPrevPixelFreeBits;
  unsigned int *prevPixelFreeBits;
  unsigned int *currPixelFreeBits;
  unsigned int pixelFreeBitsSize;
  unsigned int pixelFreeBitsWordCount;
  unsigned int pixelFreeRover;
  char *buffer;
  int currentImage;
  ID3D11Texture3D *stagingImages[2];
  D3D11_MAPPED_SUBRESOURCE lockedBox;
};

/* 6836 */
struct $EDB5B11BCB5A2B5EAA197621B5604411
{
  unsigned __int16 smodelIndex[7680];
  unsigned int usedFrameCount[7680];
  unsigned int entryLimit;
  unsigned int assignedCount;
  unsigned int freeableCount;
  unsigned int frameCount;
  int anyNewLighting;
  unsigned int pad[27];
};

/* 6837 */
struct GfxSmodelLightGlob
{
  unsigned __int16 freeableHandles[7680];
  unsigned int lightingBits[512];
  $EDB5B11BCB5A2B5EAA197621B5604411 local;
};

/* 6838 */
struct __cppobj Sse_SkinVertex_0
{
};

/* 6839 */
struct SseMatrix
{
  __m128 col0;
  __m128 col1;
  __m128 col2;
  __m128 col3;
};

/* 6840 */
struct __cppobj Sse_SkinVertex_1
{
};

/* 6841 */
struct __cppobj Sse_SkinVertex_2
{
};

/* 6842 */
struct GfxPackedVertexNormal
{
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 6843 */
struct __cppobj Sse_SkinVertex_3
{
};

/* 6844 */
struct OutdoorGlob
{
  vec3_t bbox[2];
  vec3_t scale;
  vec3_t invScale;
  vec3_t add;
  char *pic;
};

/* 6845 */
struct GfxDecodedLightGridColors
{
  vec4_t rgb[56];
};

/* 6846 */
struct GfxShadowedLightEntry
{
  char shadowableLightIndex;
  bool isFadingOut;
  float fade;
};

/* 6847 */
struct GfxShadowedLightHistory
{
  GfxShadowedLightEntry entries[4];
  unsigned int entryCount;
  unsigned int lastUpdateTime;
};

/* 6848 */
struct GfxCandidateShadowedLight
{
  unsigned int shadowableLightIndex;
  float score;
};

/* 6849 */
struct GfxCmdSaveScreen
{
  GfxCmdHeader header;
  int screenTimerId;
};

/* 6850 */
struct GfxCmdStretchPicRotateXY
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w0;
  float w;
  float h;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
  float rotation;
};

/* 6851 */
struct $76D13512A3C274E2FBC44692FF178AA8
{
  __int8 stencilWrite : 1;
  __int8 noclip : 1;
};

/* 6852 */
struct GfxCmdDrawUIQuadsReplaceImage
{
  GfxCmdHeader header;
  Material *material;
  Material *replacement;
  __int16 quadCount;
  char stencilValue;
  $76D13512A3C274E2FBC44692FF178AA8 bits;
};

/* 6853 */
struct GfxCmdSaveScreenSection
{
  GfxCmdHeader header;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
};

/* 6854 */
struct GfxCmdSetViewport
{
  GfxCmdHeader header;
  GfxViewport viewport;
};

/* 6855 */
struct GfxCmdDrawFramed2D
{
  GfxCmdHeader header;
  float x;
  float y;
  float w;
  float h;
  float thicknessW;
  float thicknessH;
  float thicknessTex;
  int sides;
  GfxColor color;
  Material *material;
};

/* 6856 */
struct GfxCmdResolveComposite
{
  GfxCmdHeader header;
  void (__cdecl *callback)(GfxImage *);
};

/* 6857 */
struct GfxCmdDrawText3D
{
  GfxCmdHeader header;
  vec3_t org;
  Font_s *font;
  vec3_t xPixelStep;
  vec3_t yPixelStep;
  GfxColor color;
  char text[4];
};

/* 6858 */
struct __declspec(align(2)) GfxCmdDrawText2D
{
  GfxCmdHeader header;
  int type;
  float x;
  float y;
  float w;
  float h;
  float rotation;
  Font_s *font;
  float xScale;
  float yScale;
  GfxColor color;
  int maxChars;
  int renderFlags;
  int cursorPos;
  char cursorLetter;
  GfxColor glowForceColor;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  int fxRedactDecayStartTime;
  int fxRedactDecayDuration;
  Material *fxMaterial;
  Material *fxMaterialGlow;
  float padding;
  char text[3];
};

/* 6859 */
struct GfxCmdDrawQuadPic
{
  GfxCmdHeader header;
  Material *material;
  vec2_t verts[4];
  float w;
  GfxColor color;
};

/* 6860 */
struct GfxCmdDrawEmblemLayer
{
  GfxCmdHeader header;
  Material *material;
  GfxImage *image;
  float outlineSize;
  float smoothSize;
  char stencilValue;
  $76D13512A3C274E2FBC44692FF178AA8 bits;
  GfxQuad quad;
};

/* 6861 */
struct GfxCmdClearScreen
{
  GfxCmdHeader header;
  char whichToClear;
  char stencil;
  float depth;
  vec4_t color;
};

/* 6862 */
struct GfxCmdDrawPoints
{
  GfxCmdHeader header;
  __int16 pointCount;
  char size;
  char dimensions;
  GfxPointVertex verts[1];
};

/* 6863 */
struct GfxCmdSetMaterialColor
{
  GfxCmdHeader header;
  vec4_t color;
};

/* 6864 */
struct GfxCmdConstantSet
{
  GfxCmdHeader header;
  ShaderConstantSet scs;
};

/* 6865 */
struct __declspec(align(4)) GfxCmdDrawTriangles
{
  GfxCmdHeader header;
  Material *material;
  char techType;
  __int16 indexCount;
  __int16 vertexCount;
};

/* 6866 */
struct GfxCmdSetCustomConstant
{
  GfxCmdHeader header;
  unsigned int type;
  vec4_t vec;
};

/* 6867 */
struct GfxCmdDrawUITriangles
{
  GfxCmdHeader header;
  Material *material;
  __int16 triCount;
  char stencilValue;
  $76D13512A3C274E2FBC44692FF178AA8 bits;
};

/* 6868 */
struct GfxCmdSetScissor
{
  GfxCmdHeader header;
  int enabled;
  GfxViewport scissor;
};

/* 6869 */
struct __declspec(align(4)) GfxCmdStretchComposite
{
  GfxCmdHeader header;
  GfxImage *image;
  GfxQuad quad;
  char stencilValue;
  $76D13512A3C274E2FBC44692FF178AA8 bits;
};

/* 6870 */
struct GfxCmdDrawLines
{
  GfxCmdHeader header;
  __int16 lineCount;
  char width;
  char dimensions;
  GfxPointVertex verts[2];
};

/* 6871 */
struct GfxCmdStretchPic
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w0;
  float w;
  float h;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

/* 6872 */
struct GfxCmdDrawQuadList2D
{
  GfxCmdHeader header;
  Material *material;
  int quadCount;
};

/* 6873 */
struct GfxCmdStretchPicRotateST
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w;
  float h;
  float centerS;
  float centerT;
  float radiusST;
  float scaleFinalS;
  float scaleFinalT;
  GfxColor color;
  float rotation;
};

/* 6874 */
struct GfxCmdBlendSavedScreenFlashed
{
  GfxCmdHeader header;
  float intensityWhiteout;
  float intensityScreengrab;
  float s0;
  float t0;
  float ds;
  float dt;
};

/* 6875 */
struct GfxCmdDrawUIQuads
{
  GfxCmdHeader header;
  Material *material;
  __int16 quadCount;
  char stencilValue;
  $76D13512A3C274E2FBC44692FF178AA8 bits;
};

/* 6876 */
struct GfxCmdPCCopyImageGenMIP
{
  GfxCmdHeader header;
  void (__cdecl *callback)(void *);
  GfxImage *image;
  void *job;
};

/* 6877 */
struct GfxCmdBlendSavedScreenBlurred
{
  GfxCmdHeader header;
  int fadeMsec;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
};

/* 6878 */
struct GfxCmdProjectionSet
{
  GfxCmdHeader header;
  GfxProjectionTypes projection;
};

/* 6879 */
struct GfxCmdDrawFullScreenColoredQuad
{
  GfxCmdHeader header;
  Material *material;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

/* 6880 */
struct GfxCmdBeginView
{
  GfxCmdHeader header;
  GfxSceneDef sceneDef;
  GfxViewParms *viewParms;
};

/* 6881 */
struct ExtraCamSettings
{
  bool enabled;
  int width;
  int height;
  int multiExtraCamWidth;
  int multiExtraCamHeight;
  int location;
};

/* 6882 */
struct __cppobj GfxRenderTargetTexture
{
};

/* 6883 */
struct DrawSurfListInfoSetup
{
  int drawlist;
  int baseTechType;
  int cameraView;
  int depthHackList;
  OcclusionReportsMode occlusionReportsMode;
};

/* 6884 */
struct GfxDrawRecord
{
  GfxViewInfo *viewInfo;
  GfxBackEndData *data;
  unsigned int viewInfoIndex;
};

/* 6885 */
struct GfxDrawRecordGlob
{
  GfxDrawRecord records[4];
  unsigned int count;
  unsigned int frame;
};

/* 6886 */
struct __declspec(align(4)) DrawDepthWorkerCmd
{
  GfxBackEndData *data;
  GfxWorkerData *workerData;
  GfxViewInfo *viewInfo;
  char cmdBufType;
};

/* 6887 */
struct __declspec(align(4)) SceneEntCmd
{
  GfxViewInfo *viewInfo;
  GfxSunShadow *sunShadow;
  int sceneStage;
  bool sceneCalculatedSunShadow;
};

/* 6888 */
struct GfxSceneParms
{
  LocalClientNum_t localClientNum;
  float blurRadius;
  float adsZScale;
  float sunVisibility;
  float rimIntensity;
  vec4_t genericSceneVector0;
  vec4_t genericSceneVector1;
  vec4_t genericSceneVector2;
  vec4_t genericSceneVector3;
  vec4_t cameraVelocity;
  GfxDepthOfField dof;
  GfxLightScale charPrimaryLightScale;
  GfxFilm film;
  GfxBloom bloom;
  GfxCompositeFx flameFx;
  GfxReviveFx reviveFx;
  GfxCompositeFx waterSheetingFx;
  GfxDoubleVision doubleVision;
  GfxGenericFilter genericFilter;
  GfxPoison poisonFx;
  GfxCompositeFx electrifiedFx;
  GfxCompositeFx transportedFx;
  GfxSaveScreenFx saveScreenFx;
  bool isRenderingFullScreen;
  bool playerTeleported;
  GfxViewport sceneViewport;
  GfxViewport displayViewport;
  GfxViewport scissorViewport;
  GfxLight *primaryLights;
  float sceneX;
  float sceneY;
  float sceneW;
  float sceneH;
};

/* 6889 */
struct $BCF767B4A69CFDB42B7F67D794669684
{
  char *pixels[6];
  float *pixelsHDR[6];
  float *pixelsHDRcorrected[6];
};

/* 6890 */
struct $23052A65C2D106E54F13DFBF73D091EA
{
  MaterialArgumentCodeConst codeConst;
  unsigned int version;
};

/* 6891 */
union GfxShaderConstantState
{
  $23052A65C2D106E54F13DFBF73D091EA fields;
  unsigned __int64 packed;
};

/* 6892 */
struct ScopedShaderConstantSetUndo
{
  GfxCmdBufSourceState *m_sourceState;
  ShaderConstantSet m_scs;
};

/* 6893 */
struct __cppobj std::binary_function<unsigned int,unsigned int,bool>
{
};

/* 6894 */
struct __cppobj std::less<unsigned int> : std::binary_function<unsigned int,unsigned int,bool>
{
};

/* 6895 */
struct __cppobj std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> : std::_Container_base0
{
  std::less<unsigned int> comp;
};

/* 6896 */
struct __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node *_Right;
  std::pair<unsigned int const ,ID3D11BlendState *> _Myval;
  char _Color;
  char _Isnil;
};

/* 6897 */
struct std::_Pair_base<unsigned int const ,ID3D11BlendState *>
{
  const unsigned int first;
  ID3D11BlendState *second;
};

/* 6898 */
struct __cppobj std::pair<unsigned int const ,ID3D11BlendState *> : std::_Pair_base<unsigned int const ,ID3D11BlendState *>
{
};

/* 6899 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>
{
};

/* 6900 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>
{
};

/* 6901 */
struct __cppobj std::_Allocator_base<std::pair<unsigned int const ,ID3D11BlendState *> >
{
};

/* 6902 */
struct __cppobj std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> > : std::_Allocator_base<std::pair<unsigned int const ,ID3D11BlendState *> >
{
};

/* 6903 */
struct __cppobj __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > : std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0>
{
  std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
  std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node> _Alnod;
  std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> > _Alval;
};

/* 6904 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > : std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >
{
};

/* 6905 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > : std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >
{
};

/* 6906 */
struct __cppobj std::map<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> > > : std::_Tree<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >
{
};

/* 6907 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,ID3D11BlendState *>,int,std::pair<unsigned int const ,ID3D11BlendState *> const *,std::pair<unsigned int const ,ID3D11BlendState *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 6908 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned int const ,ID3D11BlendState *>,int,std::pair<unsigned int const ,ID3D11BlendState *> const *,std::pair<unsigned int const ,ID3D11BlendState *> const &,std::_Iterator_base0>
{
  std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node *_Ptr;
};

/* 6909 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >,std::_Iterator_base0>
{
};

/* 6910 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >
{
};

/* 6911 */
struct __cppobj std::binary_function<unsigned __int64,unsigned __int64,bool>
{
};

/* 6912 */
struct __cppobj std::less<unsigned __int64> : std::binary_function<unsigned __int64,unsigned __int64,bool>
{
};

/* 6913 */
struct __cppobj std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> : std::_Container_base0
{
  std::less<unsigned __int64> comp;
};

/* 6914 */
struct __declspec(align(8)) std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node
{
  std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node *_Left;
  std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node *_Parent;
  std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node *_Right;
  std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> _Myval;
  char _Color;
  char _Isnil;
};

/* 6915 */
struct __declspec(align(8)) std::_Pair_base<unsigned __int64 const ,ID3D11DepthStencilState *>
{
  const unsigned __int64 first;
  ID3D11DepthStencilState *second;
};

/* 6916 */
struct __cppobj std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> : std::_Pair_base<unsigned __int64 const ,ID3D11DepthStencilState *>
{
};

/* 6917 */
struct __cppobj std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>
{
};

/* 6918 */
struct __cppobj std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node> : std::_Allocator_base<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>
{
};

/* 6919 */
struct __cppobj std::_Allocator_base<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >
{
};

/* 6920 */
struct __cppobj std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> > : std::_Allocator_base<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >
{
};

/* 6921 */
struct __cppobj __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > : std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0>
{
  std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node *_Myhead;
  unsigned int _Mysize;
  std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node> _Alnod;
  std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> > _Alval;
};

/* 6922 */
struct __cppobj std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > : std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >
{
};

/* 6923 */
struct __cppobj std::_Tree<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > : std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >
{
};

/* 6924 */
struct __cppobj std::map<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> > > : std::_Tree<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >
{
};

/* 6925 */
struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *>,int,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> const *,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 6926 */
struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *>,int,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> const *,std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> const &,std::_Iterator_base0>
{
  std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node *_Ptr;
};

/* 6927 */
struct __cppobj std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > : std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >,std::_Iterator_base0>
{
};

/* 6928 */
struct __cppobj std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > : std::_Tree_const_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >
{
};

/* 6929 */
struct __declspec(align(4)) std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,bool>
{
  std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > > first;
  bool second;
};

/* 6930 */
struct __cppobj std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >::rebind<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >
{
};

/* 6931 */
struct __cppobj std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> >::_Node>
{
};

/* 6932 */
struct __declspec(align(4)) std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,bool>
{
  std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > > first;
  bool second;
};

/* 6933 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,bool> : std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned __int64,ID3D11DepthStencilState *,std::less<unsigned __int64>,std::allocator<std::pair<unsigned __int64 const ,ID3D11DepthStencilState *> >,0> > >,bool>
{
};

/* 6934 */
struct __cppobj std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,bool> : std::_Pair_base<std::_Tree_iterator<std::_Tree_val<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> > >,bool>
{
};

/* 6935 */
struct __cppobj std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >::rebind<std::pair<unsigned int const ,ID3D11BlendState *> >
{
};

/* 6936 */
struct __cppobj std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >::rebind<std::_Tree_nod<std::_Tmap_traits<unsigned int,ID3D11BlendState *,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,ID3D11BlendState *> >,0> >::_Node>
{
};

/* 6937 */
struct __unaligned __declspec(align(1)) $553CEEC7AE3919260A7C15AC915774A7
{
  unsigned int stateBits1;
  char mask;
};

/* 6938 */
union DepthStencilBitsMask
{
  $553CEEC7AE3919260A7C15AC915774A7 __s0;
  unsigned __int64 u;
};

/* 6939 */
struct IPakDataChunkHeader
{
  unsigned int countAndOffset;
  unsigned int commands[31];
};

/* 6940 */
struct StreamTempImage
{
  GfxImage *image;
  int allocID;
  int state;
};

/* 6941 */
struct StreamAllocGlob
{
  StreamTempImage tempImages[32];
};

/* 6942 */
struct ShadowGlobals
{
  MaterialTechnique *defaultShadowCasterTechnique;
};

/* 6943 */
struct _DDSCAPS
{
  unsigned int dwCaps;
};

/* 6944 */
union $83FB4F737B5EDC31066F75BACF4F71E0
{
  unsigned int dwCaps4;
  unsigned int dwVolumeDepth;
};

/* 6945 */
struct _DDSCAPS2
{
  unsigned int dwCaps;
  unsigned int dwCaps2;
  unsigned int dwCaps3;
  $83FB4F737B5EDC31066F75BACF4F71E0 ___u3;
};

/* 6946 */
struct _DDCAPS_DX7
{
  unsigned int dwSize;
  unsigned int dwCaps;
  unsigned int dwCaps2;
  unsigned int dwCKeyCaps;
  unsigned int dwFXCaps;
  unsigned int dwFXAlphaCaps;
  unsigned int dwPalCaps;
  unsigned int dwSVCaps;
  unsigned int dwAlphaBltConstBitDepths;
  unsigned int dwAlphaBltPixelBitDepths;
  unsigned int dwAlphaBltSurfaceBitDepths;
  unsigned int dwAlphaOverlayConstBitDepths;
  unsigned int dwAlphaOverlayPixelBitDepths;
  unsigned int dwAlphaOverlaySurfaceBitDepths;
  unsigned int dwZBufferBitDepths;
  unsigned int dwVidMemTotal;
  unsigned int dwVidMemFree;
  unsigned int dwMaxVisibleOverlays;
  unsigned int dwCurrVisibleOverlays;
  unsigned int dwNumFourCCCodes;
  unsigned int dwAlignBoundarySrc;
  unsigned int dwAlignSizeSrc;
  unsigned int dwAlignBoundaryDest;
  unsigned int dwAlignSizeDest;
  unsigned int dwAlignStrideAlign;
  unsigned int dwRops[8];
  _DDSCAPS ddsOldCaps;
  unsigned int dwMinOverlayStretch;
  unsigned int dwMaxOverlayStretch;
  unsigned int dwMinLiveVideoStretch;
  unsigned int dwMaxLiveVideoStretch;
  unsigned int dwMinHwCodecStretch;
  unsigned int dwMaxHwCodecStretch;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
  unsigned int dwReserved3;
  unsigned int dwSVBCaps;
  unsigned int dwSVBCKeyCaps;
  unsigned int dwSVBFXCaps;
  unsigned int dwSVBRops[8];
  unsigned int dwVSBCaps;
  unsigned int dwVSBCKeyCaps;
  unsigned int dwVSBFXCaps;
  unsigned int dwVSBRops[8];
  unsigned int dwSSBCaps;
  unsigned int dwSSBCKeyCaps;
  unsigned int dwSSBFXCaps;
  unsigned int dwSSBRops[8];
  unsigned int dwMaxVideoPorts;
  unsigned int dwCurrVideoPorts;
  unsigned int dwSVBCaps2;
  unsigned int dwNLVBCaps;
  unsigned int dwNLVBCaps2;
  unsigned int dwNLVBCKeyCaps;
  unsigned int dwNLVBFXCaps;
  unsigned int dwNLVBRops[8];
  _DDSCAPS2 ddsCaps;
};

/* 6947 */
struct __declspec(align(8)) tagDDDEVICEIDENTIFIER2
{
  char szDriver[512];
  char szDescription[512];
  _LARGE_INTEGER liDriverVersion;
  unsigned int dwVendorId;
  unsigned int dwDeviceId;
  unsigned int dwSubSysId;
  unsigned int dwRevision;
  _GUID guidDeviceIdentifier;
  unsigned int dwWHQLLevel;
};

/* 6948 */
struct __cppobj IDirectDrawSurface : IUnknown
{
};

/* 6949 */
struct _DDCOLORKEY
{
  unsigned int dwColorSpaceLowValue;
  unsigned int dwColorSpaceHighValue;
};

/* 6950 */
union $66C876EF5E933532F005649ADEA5AEC7
{
  unsigned int dwZDestConst;
  IDirectDrawSurface *lpDDSZBufferDest;
};

/* 6951 */
union $D51A842A1F37E6023F3F53CBFEC725C6
{
  unsigned int dwZSrcConst;
  IDirectDrawSurface *lpDDSZBufferSrc;
};

/* 6952 */
union $B1AD4FA5A2D0AB2590CF4359EDE8676D
{
  unsigned int dwAlphaDestConst;
  IDirectDrawSurface *lpDDSAlphaDest;
};

/* 6953 */
union $23C7B3A39005D9DF2E36EE58AABF0303
{
  unsigned int dwAlphaSrcConst;
  IDirectDrawSurface *lpDDSAlphaSrc;
};

/* 6954 */
union $2B94D593A17C118201F106F2B39967DC
{
  unsigned int dwFillColor;
  unsigned int dwFillDepth;
  unsigned int dwFillPixel;
  IDirectDrawSurface *lpDDSPattern;
};

/* 6955 */
struct _DDBLTFX
{
  unsigned int dwSize;
  unsigned int dwDDFX;
  unsigned int dwROP;
  unsigned int dwDDROP;
  unsigned int dwRotationAngle;
  unsigned int dwZBufferOpCode;
  unsigned int dwZBufferLow;
  unsigned int dwZBufferHigh;
  unsigned int dwZBufferBaseDest;
  unsigned int dwZDestConstBitDepth;
  $66C876EF5E933532F005649ADEA5AEC7 ___u10;
  unsigned int dwZSrcConstBitDepth;
  $D51A842A1F37E6023F3F53CBFEC725C6 ___u12;
  unsigned int dwAlphaEdgeBlendBitDepth;
  unsigned int dwAlphaEdgeBlend;
  unsigned int dwReserved;
  unsigned int dwAlphaDestConstBitDepth;
  $B1AD4FA5A2D0AB2590CF4359EDE8676D ___u17;
  unsigned int dwAlphaSrcConstBitDepth;
  $23C7B3A39005D9DF2E36EE58AABF0303 ___u19;
  $2B94D593A17C118201F106F2B39967DC ___u20;
  _DDCOLORKEY ddckDestColorkey;
  _DDCOLORKEY ddckSrcColorkey;
};

/* 6956 */
struct _DDBLTBATCH
{
  tagRECT *lprDest;
  IDirectDrawSurface *lpDDSSrc;
  tagRECT *lprSrc;
  unsigned int dwFlags;
  _DDBLTFX *lpDDBltFx;
};

/* 6957 */
struct $C25A9065B81808D2E7112BE513398F8C
{
  unsigned __int16 wFlipMSTypes;
  unsigned __int16 wBltMSTypes;
};

/* 6958 */
union $DAED55BFC94E6097478CA68F0B175AFE
{
  unsigned int dwRGBBitCount;
  unsigned int dwYUVBitCount;
  unsigned int dwZBufferBitDepth;
  unsigned int dwAlphaBitDepth;
  unsigned int dwLuminanceBitCount;
  unsigned int dwBumpBitCount;
  unsigned int dwPrivateFormatBitCount;
};

/* 6959 */
union $CF4E6002FA4B19EC2239361E8AC5A039
{
  unsigned int dwRBitMask;
  unsigned int dwYBitMask;
  unsigned int dwStencilBitDepth;
  unsigned int dwLuminanceBitMask;
  unsigned int dwBumpDuBitMask;
  unsigned int dwOperations;
};

/* 6960 */
union $6A3B1BC059AD5A293179233A64E6DD8F
{
  unsigned int dwGBitMask;
  unsigned int dwUBitMask;
  unsigned int dwZBitMask;
  unsigned int dwBumpDvBitMask;
  $C25A9065B81808D2E7112BE513398F8C MultiSampleCaps;
};

/* 6961 */
union $01AE0C4CAA17A9DEB3CF9215716A3B58
{
  unsigned int dwBBitMask;
  unsigned int dwVBitMask;
  unsigned int dwStencilBitMask;
  unsigned int dwBumpLuminanceBitMask;
};

/* 6962 */
union $F006553FDB25FB59A59693178CCFF094
{
  unsigned int dwRGBAlphaBitMask;
  unsigned int dwYUVAlphaBitMask;
  unsigned int dwLuminanceAlphaBitMask;
  unsigned int dwRGBZBitMask;
  unsigned int dwYUVZBitMask;
};

/* 6963 */
struct _DDPIXELFORMAT
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwFourCC;
  $DAED55BFC94E6097478CA68F0B175AFE ___u3;
  $CF4E6002FA4B19EC2239361E8AC5A039 ___u4;
  $6A3B1BC059AD5A293179233A64E6DD8F ___u5;
  $01AE0C4CAA17A9DEB3CF9215716A3B58 ___u6;
  $F006553FDB25FB59A59693178CCFF094 ___u7;
};

/* 6964 */
union $00F4D6FA838FAD5B65924731E0E9CCBC
{
  int lPitch;
  unsigned int dwLinearSize;
};

/* 6965 */
union $DE343801BC75A137C516A9D9B3162490
{
  unsigned int dwBackBufferCount;
  unsigned int dwDepth;
};

/* 6966 */
union $FA885138A45ED3CE38760E5920CA9439
{
  unsigned int dwMipMapCount;
  unsigned int dwRefreshRate;
  unsigned int dwSrcVBHandle;
};

/* 6967 */
union $926406CC91118AD6F7558754442A0A38
{
  _DDCOLORKEY ddckCKDestOverlay;
  unsigned int dwEmptyFaceColor;
};

/* 6968 */
union $4537B4DF02CC0199BE4EB5E3776CEBA6
{
  _DDPIXELFORMAT ddpfPixelFormat;
  unsigned int dwFVF;
};

/* 6969 */
struct _DDSURFACEDESC2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwHeight;
  unsigned int dwWidth;
  $00F4D6FA838FAD5B65924731E0E9CCBC ___u4;
  $DE343801BC75A137C516A9D9B3162490 ___u5;
  $FA885138A45ED3CE38760E5920CA9439 ___u6;
  unsigned int dwAlphaBitDepth;
  unsigned int dwReserved;
  void *lpSurface;
  $926406CC91118AD6F7558754442A0A38 ___u10;
  _DDCOLORKEY ddckCKDestBlt;
  _DDCOLORKEY ddckCKSrcOverlay;
  _DDCOLORKEY ddckCKSrcBlt;
  $4537B4DF02CC0199BE4EB5E3776CEBA6 ___u14;
  _DDSCAPS2 ddsCaps;
  unsigned int dwTextureStage;
};

/* 6970 */
struct __cppobj IDirectDrawSurface7 : IUnknown
{
};

/* 6971 */
struct __cppobj IDirectDrawPalette : IUnknown
{
};

/* 6972 */
struct __cppobj IDirectDraw : IUnknown
{
};

/* 6973 */
union $EF599A003DBF63C31A82D22AC5A5ECD5
{
  unsigned int dwMipMapCount;
  unsigned int dwZBufferBitDepth;
  unsigned int dwRefreshRate;
};

/* 6974 */
struct _DDSURFACEDESC
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwHeight;
  unsigned int dwWidth;
  $00F4D6FA838FAD5B65924731E0E9CCBC ___u4;
  unsigned int dwBackBufferCount;
  $EF599A003DBF63C31A82D22AC5A5ECD5 ___u6;
  unsigned int dwAlphaBitDepth;
  unsigned int dwReserved;
  void *lpSurface;
  _DDCOLORKEY ddckCKDestOverlay;
  _DDCOLORKEY ddckCKDestBlt;
  _DDCOLORKEY ddckCKSrcOverlay;
  _DDCOLORKEY ddckCKSrcBlt;
  _DDPIXELFORMAT ddpfPixelFormat;
  _DDSCAPS ddsCaps;
};

/* 6975 */
struct _DDOVERLAYFX
{
  unsigned int dwSize;
  unsigned int dwAlphaEdgeBlendBitDepth;
  unsigned int dwAlphaEdgeBlend;
  unsigned int dwReserved;
  unsigned int dwAlphaDestConstBitDepth;
  $B1AD4FA5A2D0AB2590CF4359EDE8676D ___u5;
  unsigned int dwAlphaSrcConstBitDepth;
  $23C7B3A39005D9DF2E36EE58AABF0303 ___u7;
  _DDCOLORKEY dckDestColorkey;
  _DDCOLORKEY dckSrcColorkey;
  unsigned int dwDDFX;
  unsigned int dwFlags;
};

/* 6976 */
struct __cppobj IDirectDrawClipper : IUnknown
{
};

/* 6977 */
struct __declspec(align(4)) DDraw
{
  HRESULT (__stdcall *pDirectDrawCreateEx)(_GUID *, void **, _GUID *, IUnknown *);
  HRESULT (__stdcall *pDirectDrawEnumerateEx)(int (__stdcall *)(_GUID *, char *, char *, void *, HMONITOR__ *), void *, unsigned int);
  HINSTANCE__ *hDDraw;
  _GUID *lpGUID;
  bool Initialized;
};

/* 6978 */
struct __cppobj IDirectDraw7 : IUnknown
{
};

/* 6979 */
struct Ui3dStatus
{
  bool initialized;
  bool rendering;
  int width;
  int height;
  int pmemLocation;
  bool hasPingPongBuffer;
  float blurRadius;
};

/* 6980 */
struct Ui3dTextureWindow
{
  GfxViewport vp;
  ScreenPlacement scrPlace;
  float normX;
  float normY;
  float normW;
  float normH;
  int numRenderCmds;
  int numRenderCmdsThatDrawsSomething;
};

/* 6981 */
struct XVertexInfo0
{
  unsigned __int16 boneOffset;
};

/* 6982 */
struct XVertexInfo3
{
  XVertexInfo0 vert0;
  XBlendLoadInfo blend[3];
};

/* 6983 */
struct XVertexInfo2
{
  XVertexInfo0 vert0;
  XBlendLoadInfo blend[2];
};

/* 6984 */
struct XVertexInfo1
{
  XVertexInfo0 vert0;
  XBlendLoadInfo blend[1];
};

/* 6985 */
struct GfxDrawSurfListArgs
{
  GfxCmdBufContext context;
  unsigned int firstDrawSurfIndex;
  GfxDrawSurfListInfo *info;
};

/* 6986 */
struct GfxRenderCommandExecState
{
  const void *cmd;
};

/* 6987 */
struct r_backEndGlobals_t
{
  int glowCount;
  GfxImage *glowImage;
  GfxImage *godRaysImage;
  Font_s *debugFont;
  GfxFrameStats frameStatsMax;
};

/* 6988 */
struct Corona
{
  bool inUse;
  GfxLightCorona *info;
  int timeSinceSpawned;
  float currentVisibility;
  float targetVisibility;
  int hitNum;
  bool wasEverVisible;
  bool queryIssued[5];
  ID3D11Query *query[5];
  ID3D11Query *queryMax[5];
};

/* 6989 */
struct CoronaState
{
  unsigned int numActive;
  unsigned int numPending;
  Corona active[16];
  Corona pending[16];
};

/* 6990 */
struct DrawEmissiveFXCallbacUserData
{
  char targetId;
  unsigned int drawListIndex;
};

/* 6991 */
struct __declspec(align(4)) GfxImageFilterPass
{
  Material *material;
  float srcWidth;
  float srcHeight;
  int dstWidth;
  int dstHeight;
  int tapHalfCount;
  vec4_t tapOffsetsAndWeights[8];
  char src;
  char dst;
};

/* 6992 */
struct __declspec(align(4)) GfxImageFilter
{
  int passCount;
  GfxImageFilterPass passes[32];
  GfxImage *sourceImage;
  char finalTarget;
};

/* 6993 */
struct OcclusionQuery
{
  bool enabled;
  bool error;
  bool isWorldPos;
  bool isValidPos;
  vec3_t position;
  float depthBias;
  float lastVisibility;
  int localClientNum;
  int hitNum;
  bool issued[2];
  ID3D11Query *query[2];
};

/* 6994 */
struct SpotShadowMapUserData
{
  GfxSpotShadow *spotShadow;
  GfxDrawSurfListInfo *drawList;
};

/* 6995 */
struct my_coef_controller
{
  jpeg_c_coef_controller pub;
  unsigned int iMCU_row_num;
  unsigned int mcu_ctr;
  int MCU_vert_offset;
  int MCU_rows_per_iMCU_row;
  __int16 (*MCU_buffer[10])[64];
  jvirt_barray_control *whole_image[10];
};

/* 6996 */
struct my_color_converter
{
  jpeg_color_converter pub;
  int *rgb_ycc_tab;
};

/* 6997 */
struct my_fdct_controller
{
  jpeg_forward_dct pub;
  void (__cdecl *do_dct)(int *);
  int *divisors[4];
  void (__cdecl *do_float_dct)(float *);
  float *float_divisors[4];
};

/* 6998 */
struct savable_state
{
  unsigned int EOBRUN;
  int last_dc_val[4];
};

/* 6999 */
struct working_state
{
  char *next_output_byte;
  unsigned int free_in_buffer;
  savable_state cur;
  _BYTE gap1C[4];
  jpeg_compress_struct *cinfo;
};

/* 7000 */
struct c_derived_tbl
{
  unsigned int ehufco[256];
  char ehufsi[256];
};

/* 7001 */
struct huff_entropy_encoder
{
  jpeg_entropy_encoder pub;
  savable_state saved;
  _BYTE gap20[4];
  unsigned int restarts_to_go;
  int next_restart_num;
  c_derived_tbl *dc_derived_tbls[4];
  c_derived_tbl *ac_derived_tbls[4];
  int *dc_count_ptrs[4];
  int *ac_count_ptrs[4];
};

/* 7002 */
struct my_main_controller
{
  jpeg_c_main_controller pub;
  unsigned int cur_iMCU_row;
  unsigned int rowgroup_ctr;
  char suspended;
  J_BUF_MODE pass_mode;
  char **buffer[10];
};

/* 7003 */
struct my_marker_writer
{
  jpeg_marker_writer pub;
  unsigned int last_restart_interval;
};

/* 7004 */
struct my_comp_master
{
  jpeg_comp_master pub;
  c_pass_type pass_type;
  int pass_number;
  int total_passes;
  int scan_number;
};

/* 7005 */
struct phuff_entropy_encoder
{
  jpeg_entropy_encoder pub;
  char gather_statistics;
  char *next_output_byte;
  unsigned int free_in_buffer;
  int put_buffer;
  int put_bits;
  jpeg_compress_struct *cinfo;
  int last_dc_val[4];
  int ac_tbl_no;
  unsigned int EOBRUN;
  unsigned int BE;
  char *bit_buffer;
  unsigned int restarts_to_go;
  int next_restart_num;
  c_derived_tbl *derived_tbls[4];
  int *count_ptrs[4];
};

/* 7006 */
struct my_prep_controller
{
  jpeg_c_prep_controller pub;
  char **color_buf[10];
  unsigned int rows_to_go;
  int next_buf_row;
  int this_row_group;
  int next_buf_stop;
};

/* 7007 */
struct my_downsampler
{
  jpeg_downsampler pub;
  void (__cdecl *methods[10])(jpeg_compress_struct *, jpeg_component_info *, char **, char **);
};

/* 7008 */
struct __declspec(align(4)) my_source_mgr
{
  jpeg_source_mgr pub;
  char start_of_file;
};

/* 7009 */
struct my_color_deconverter
{
  jpeg_color_deconverter pub;
  int *Cr_r_tab;
  int *Cb_b_tab;
  int *Cr_g_tab;
  int *Cb_g_tab;
};

/* 7010 */
struct my_idct_controller
{
  jpeg_inverse_dct pub;
  int cur_method[10];
};

/* 7011 */
struct bitread_perm_state
{
  int get_buffer;
  int bits_left;
};

/* 7012 */
struct d_derived_tbl
{
  int maxcode[18];
  int valoffset[17];
  JHUFF_TBL *pub;
  int look_nbits[256];
  char look_sym[256];
};

/* 7013 */
struct $16488923742FD3ABC134D2BECC0315DC
{
  _BYTE gap0[16];
  unsigned int restarts_to_go;
};

/* 7014 */
union $BEC0CBF3E9C8D13CA3E3E44C553EBE14
{
  savable_state saved;
  $16488923742FD3ABC134D2BECC0315DC __s1;
};

/* 7015 */
struct huff_entropy_decoder
{
  jpeg_entropy_decoder pub;
  bitread_perm_state bitstate;
  $BEC0CBF3E9C8D13CA3E3E44C553EBE14 ___u2;
  d_derived_tbl *dc_derived_tbls[4];
  d_derived_tbl *ac_derived_tbls[4];
  d_derived_tbl *dc_cur_tbls[10];
  d_derived_tbl *ac_cur_tbls[10];
  char dc_needed[10];
  char ac_needed[10];
};

/* 7016 */
struct bitread_working_state
{
  const char *next_input_byte;
  unsigned int bytes_in_buffer;
  int get_buffer;
  int bits_left;
  jpeg_decompress_struct *cinfo;
};

/* 7017 */
struct __declspec(align(4)) my_input_controller
{
  jpeg_input_controller pub;
  char inheaders;
};

/* 7018 */
struct my_marker_reader
{
  jpeg_marker_reader pub;
  char (__cdecl *process_COM)(jpeg_decompress_struct *);
  char (__cdecl *process_APPn[16])(jpeg_decompress_struct *);
  unsigned int length_limit_COM;
  unsigned int length_limit_APPn[16];
  jpeg_marker_struct *cur_marker;
  unsigned int bytes_read;
};

/* 7019 */
struct my_decomp_master
{
  jpeg_decomp_master pub;
  int pass_number;
  char using_merged_upsample;
  jpeg_color_quantizer *quantizer_1pass;
  jpeg_color_quantizer *quantizer_2pass;
};

/* 7020 */
struct my_upsampler
{
  jpeg_upsampler pub;
  void (__cdecl *upmethod)(jpeg_decompress_struct *, char ***, unsigned int, char **);
  int *Cr_r_tab;
  int *Cb_b_tab;
  int *Cr_g_tab;
  int *Cb_g_tab;
  char *spare_row;
  char spare_full;
  unsigned int out_row_width;
  unsigned int rows_to_go;
};

/* 7021 */
struct phuff_entropy_decoder
{
  jpeg_entropy_decoder pub;
  bitread_perm_state bitstate;
  savable_state saved;
  unsigned int restarts_to_go;
  d_derived_tbl *derived_tbls[4];
  d_derived_tbl *ac_derived_tbl;
};

/* 7022 */
struct my_post_controller
{
  jpeg_d_post_controller pub;
  jvirt_sarray_control *whole_image;
  char **buffer;
  unsigned int strip_height;
  unsigned int starting_row;
  unsigned int next_row;
};

/* 7024 */
struct $B3BFE07AC897D79F5C65000B38C414DF
{
  small_pool_struct *next;
  unsigned int bytes_used;
  unsigned int bytes_left;
};

/* 7023 */
union __declspec(align(8)) small_pool_struct
{
  $B3BFE07AC897D79F5C65000B38C414DF hdr;
  long double dummy;
};

/* 7026 */
struct $0C27D46C02B32AF732A418DAFE540076
{
  large_pool_struct *next;
  unsigned int bytes_used;
  unsigned int bytes_left;
};

/* 7025 */
union __declspec(align(8)) large_pool_struct
{
  $0C27D46C02B32AF732A418DAFE540076 hdr;
  long double dummy;
};

/* 7027 */
struct my_memory_mgr
{
  jpeg_memory_mgr pub;
  small_pool_struct *small_list[2];
  large_pool_struct *large_list[2];
  jvirt_sarray_control *virt_sarray_list;
  jvirt_barray_control *virt_barray_list;
  int total_space_allocated;
  unsigned int last_rowsperchunk;
};

/* 7028 */
struct __declspec(align(4)) my_cquantizer
{
  jpeg_color_quantizer pub;
  char **sv_colormap;
  int sv_actual;
  char **colorindex;
  char is_padded;
  int Ncolors[4];
  int row_index;
  int (*odither[4])[16];
  __int16 *fserrors[4];
  char on_odd_row;
};

/* 7029 */
struct box
{
  int c0min;
  int c0max;
  int c1min;
  int c1max;
  int c2min;
  int c2max;
  int volume;
  int colorcount;
};

/* 7030 */
struct _TEB_ACTIVE_FRAME_CONTEXT
{
  unsigned int Flags;
  const char *FrameName;
};

/* 7031 */
struct _PEB_FREE_BLOCK
{
  _PEB_FREE_BLOCK *Next;
  unsigned int Size;
};

/* 7032 */
struct __declspec(align(4)) _Wx86ThreadState
{
  unsigned int *CallBx86Eip;
  void *DeallocationCpu;
  char UseKnownWx86Dll;
  char OleStubInvoked;
};

/* 7033 */
struct _EXCEPTION_REGISTRATION_RECORD
{
  _EXCEPTION_REGISTRATION_RECORD *Next;
  _EXCEPTION_DISPOSITION (__cdecl *Handler)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
};

/* 7035 */
union $7A727655067EA29DD1B3C3F7D79CBFD1
{
  void *FiberData;
  unsigned int Version;
};

/* 7034 */
struct _NT_TIB
{
  _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
  void *StackBase;
  void *StackLimit;
  void *SubSystemTib;
  $7A727655067EA29DD1B3C3F7D79CBFD1 ___u4;
  void *ArbitraryUserPointer;
  _NT_TIB *Self;
};

/* 7036 */
struct _TEB_ACTIVE_FRAME
{
  unsigned int Flags;
  _TEB_ACTIVE_FRAME *Previous;
  _TEB_ACTIVE_FRAME_CONTEXT *Context;
};

/* 7037 */
struct _UNICODE_STRING
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  unsigned __int16 *Buffer;
};

/* 7038 */
union $230F007F57291FA6539DD91FCBF00ADE
{
  void (__cdecl *HandlerAddress)();
  void (__fastcall *FinallyFunc)();
};

/* 7039 */
struct _EH4_SCOPETABLE_RECORD
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 7040 */
struct _ACTIVATION_CONTEXT_STACK
{
  unsigned int Flags;
  unsigned int NextCookieSequenceNumber;
  _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
  _LIST_ENTRY FrameListCache;
};

/* 7041 */
struct LIST_ENTRY32
{
  unsigned int Flink;
  unsigned int Blink;
};

/* 7042 */
struct _PEB_LDR_DATA
{
  unsigned int Length;
  char Initialized;
  void *SsHandle;
  _LIST_ENTRY InLoadOrderModuleList;
  _LIST_ENTRY InMemoryOrderModuleList;
  _LIST_ENTRY InInitializationOrderModuleList;
  void *EntryInProgress;
};

/* 7043 */
struct _CLIENT_ID
{
  void *UniqueProcess;
  void *UniqueThread;
};

/* 7044 */
struct _EH4_EXCEPTION_REGISTRATION_RECORD
{
  void *SavedESP;
  _EXCEPTION_POINTERS *ExceptionPointers;
  _EXCEPTION_REGISTRATION_RECORD SubRecord;
  unsigned int EncodedScopeTable;
  unsigned int TryLevel;
};

/* 7045 */
struct _KSYSTEM_TIME
{
  unsigned int LowPart;
  int High1Time;
  int High2Time;
};

/* 7046 */
struct _GDI_TEB_BATCH
{
  unsigned int Offset;
  unsigned int HDC;
  unsigned int Buffer[310];
};

/* 7047 */
union __unaligned __declspec(align(4)) $7FF7B16EACA4CD709A7EA414D1AEBA1C
{
  _KSYSTEM_TIME TickCount;
  volatile unsigned __int64 TickCountQuad;
};

/* 7048 */
struct __declspec(align(8)) _KUSER_SHARED_DATA
{
  unsigned int TickCountLowDeprecated;
  unsigned int TickCountMultiplier;
  _KSYSTEM_TIME InterruptTime;
  _KSYSTEM_TIME SystemTime;
  _KSYSTEM_TIME TimeZoneBias;
  unsigned __int16 ImageNumberLow;
  unsigned __int16 ImageNumberHigh;
  wchar_t NtSystemRoot[260];
  unsigned int MaxStackTraceDepth;
  unsigned int CryptoExponent;
  unsigned int TimeZoneId;
  unsigned int LargePageMinimum;
  unsigned int Reserved2[7];
  _NT_PRODUCT_TYPE NtProductType;
  char ProductTypeIsValid;
  unsigned int NtMajorVersion;
  unsigned int NtMinorVersion;
  char ProcessorFeatures[64];
  unsigned int Reserved1;
  unsigned int Reserved3;
  volatile unsigned int TimeSlip;
  _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  _LARGE_INTEGER SystemExpirationDate;
  unsigned int SuiteMask;
  char KdDebuggerEnabled;
  volatile unsigned int ActiveConsoleId;
  volatile unsigned int DismountCount;
  unsigned int ComPlusPackage;
  unsigned int LastSystemRITEventTickCount;
  unsigned int NumberOfPhysicalPages;
  char SafeBootMode;
  unsigned int TraceLogging;
  unsigned __int64 Fill0;
  unsigned __int64 SystemCall[4];
  $7FF7B16EACA4CD709A7EA414D1AEBA1C ___u34;
};

/* 8108 */
typedef unsigned int DWORD;

/* 7049 */
struct _EH4_SCOPETABLE
{
  DWORD GSCookieOffset;
  DWORD GSCookieXOROffset;
  DWORD EHCookieOffset;
  DWORD EHCookieXOROffset;
  struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 7050 */
struct _PEB
{
  char InheritedAddressSpace;
  char ReadImageFileExecOptions;
  char BeingDebugged;
  char SpareBool;
  void *Mutant;
  void *ImageBaseAddress;
  _PEB_LDR_DATA *Ldr;
  _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
  void *SubSystemData;
  void *ProcessHeap;
  _RTL_CRITICAL_SECTION *FastPebLock;
  void *SparePtr1;
  void *SparePtr2;
  unsigned int EnvironmentUpdateCount;
  void *KernelCallbackTable;
  unsigned int SystemReserved[1];
  unsigned __int32 ExecuteOptions : 2;
  unsigned __int32 SpareBits : 30;
  _PEB_FREE_BLOCK *FreeList;
  unsigned int TlsExpansionCounter;
  void *TlsBitmap;
  unsigned int TlsBitmapBits[2];
  void *ReadOnlySharedMemoryBase;
  void *ReadOnlySharedMemoryHeap;
  void **ReadOnlyStaticServerData;
  void *AnsiCodePageData;
  void *OemCodePageData;
  void *UnicodeCaseTableData;
  unsigned int NumberOfProcessors;
  unsigned int NtGlobalFlag;
  _LARGE_INTEGER CriticalSectionTimeout;
  unsigned int HeapSegmentReserve;
  unsigned int HeapSegmentCommit;
  unsigned int HeapDeCommitTotalFreeThreshold;
  unsigned int HeapDeCommitFreeBlockThreshold;
  unsigned int NumberOfHeaps;
  unsigned int MaximumNumberOfHeaps;
  void **ProcessHeaps;
  void *GdiSharedHandleTable;
  void *ProcessStarterHelper;
  unsigned int GdiDCAttributeList;
  _RTL_CRITICAL_SECTION *LoaderLock;
  unsigned int OSMajorVersion;
  unsigned int OSMinorVersion;
  unsigned __int16 OSBuildNumber;
  unsigned __int16 OSCSDVersion;
  unsigned int OSPlatformId;
  unsigned int ImageSubsystem;
  unsigned int ImageSubsystemMajorVersion;
  unsigned int ImageSubsystemMinorVersion;
  unsigned int ImageProcessAffinityMask;
  unsigned int GdiHandleBuffer[34];
  void (__cdecl *PostProcessInitRoutine)();
  void *TlsExpansionBitmap;
  unsigned int TlsExpansionBitmapBits[32];
  unsigned int SessionId;
  _ULARGE_INTEGER AppCompatFlags;
  _ULARGE_INTEGER AppCompatFlagsUser;
  void *pShimData;
  void *AppCompatInfo;
  _UNICODE_STRING CSDVersion;
  _ACTIVATION_CONTEXT_DATA *ActivationContextData;
  _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
  _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
  _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
  unsigned int MinimumStackCommit;
  void **FlsCallback;
  _LIST_ENTRY FlsListHead;
  void *FlsBitmap;
  unsigned int FlsBitmapBits[4];
  unsigned int FlsHighIndex;
};

/* 7051 */
struct LIST_ENTRY64
{
  unsigned __int64 Flink;
  unsigned __int64 Blink;
};

/* 7052 */
struct _TEB
{
  _NT_TIB NtTib;
  void *EnvironmentPointer;
  _CLIENT_ID ClientId;
  void *ActiveRpcHandle;
  void *ThreadLocalStoragePointer;
  _PEB *ProcessEnvironmentBlock;
  unsigned int LastErrorValue;
  unsigned int CountOfOwnedCriticalSections;
  void *CsrClientThread;
  void *Win32ThreadInfo;
  unsigned int User32Reserved[26];
  unsigned int UserReserved[5];
  void *WOW32Reserved;
  unsigned int CurrentLocale;
  unsigned int FpSoftwareStatusRegister;
  void *SystemReserved1[54];
  int ExceptionCode;
  _ACTIVATION_CONTEXT_STACK ActivationContextStack;
  char SpareBytes1[24];
  _GDI_TEB_BATCH GdiTebBatch;
  _CLIENT_ID RealClientId;
  void *GdiCachedProcessHandle;
  unsigned int GdiClientPID;
  unsigned int GdiClientTID;
  void *GdiThreadLocalInfo;
  unsigned int Win32ClientInfo[62];
  void *glDispatchTable[233];
  unsigned int glReserved1[29];
  void *glReserved2;
  void *glSectionInfo;
  void *glSection;
  void *glTable;
  void *glCurrentRC;
  void *glContext;
  unsigned int LastStatusValue;
  _UNICODE_STRING StaticUnicodeString;
  wchar_t StaticUnicodeBuffer[261];
  void *DeallocationStack;
  void *TlsSlots[64];
  _LIST_ENTRY TlsLinks;
  void *Vdm;
  void *ReservedForNtRpc;
  void *DbgSsReserved[2];
  unsigned int HardErrorMode;
  void *Instrumentation[16];
  void *WinSockData;
  unsigned int GdiBatchCount;
  char InDbgPrint;
  char FreeStackOnTermination;
  char HasFiberData;
  char IdealProcessor;
  unsigned int Spare3;
  void *ReservedForPerf;
  void *ReservedForOle;
  unsigned int WaitingOnLoaderLock;
  _Wx86ThreadState Wx86Thread;
  void **TlsExpansionSlots;
  unsigned int ImpersonationLocale;
  unsigned int IsImpersonating;
  void *NlsCache;
  void *pShimData;
  unsigned int HeapVirtualAffinity;
  void *CurrentTransactionHandle;
  _TEB_ACTIVE_FRAME *ActiveFrame;
  void *FlsData;
};

/* 7053 */
struct __declspec(align(32)) _JMP_BUF
{
  unsigned int saved_ebp;
  unsigned int saved_ebx;
  unsigned int saved_edi;
  unsigned int saved_esi;
  unsigned int saved_esp;
  unsigned int saved_return;
  unsigned int saved_xregistration;
  unsigned int saved_trylevel;
  unsigned int version_cookie;
  unsigned int unwind_func;
  unsigned int unwind_data;
};

/* 7054 */
struct _NLG_INFO
{
  unsigned int dwSig;
  unsigned int uoffDestination;
  unsigned int dwCode;
  unsigned int uoffFramePointer;
};

/* 7055 */
struct __declspec(align(16)) _EXCEPTION_RECORD_CRT
{
  unsigned int exception_number;
  unsigned int exception_flags;
  unsigned int exception_record;
  unsigned int exception_address;
  unsigned int number_parameters;
  unsigned int exception_information;
  _BYTE gap18[56];
};

/* 7056 */
struct _EXCEPTION_REGISTRATION_COMMON
{
  _BYTE gap0[8];
  unsigned int scopetable;
  unsigned int trylevel;
};

/* 7057 */
struct _SCOPETABLE_ENTRY
{
  unsigned int enclosing_level;
  unsigned int filter;
  unsigned int specific_handler;
};

/* 7058 */
struct _EXCEPTION_REGISTRATION
{
  unsigned int prev;
  unsigned int handler;
};

/* 7059 */
struct __declspec(align(16)) ExceptionRecordStruct
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  unsigned int ExceptionRecord_;
  unsigned int ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInfo;
  _BYTE gap18[56];
};

/* 7060 */
struct RegistrationNode
{
  unsigned int Next;
  unsigned int Handler;
  unsigned int EH4ScopeTable;
  unsigned int TryLevel;
};

/* 7061 */
union $0E3F8CB7D65B38BD22FD7A6AB8ED9E74
{
  unsigned int HandlerAddress;
  unsigned int FinallyFunc;
};

/* 7062 */
struct ScopeTableRecord
{
  unsigned int EnclosingLevel;
  unsigned int FilterFunc;
  $0E3F8CB7D65B38BD22FD7A6AB8ED9E74 ___u2;
};

/* 7063 */
struct UnwindGuardNode
{
  unsigned int Next;
  unsigned int Handler;
  unsigned int SecurityCookie;
  unsigned int OrigTargetLevel;
  unsigned int OrigEstablisher;
  unsigned int OrigCookiePointer;
  unsigned int FramePointer;
};

/* 7064 */
struct ScopeTable
{
  unsigned int GSCookieOffset;
  unsigned int GSCookieXOROffset;
  unsigned int EHCookieOffset;
  unsigned int EHCookieXOROffset;
  unsigned int ScopeRecord;
};

/* 7065 */
struct _strflt
{
  int sign;
  int decpt;
  int flag;
  char *mantissa;
};

/* 7066 */
struct _SYSTEMTIME
{
  unsigned __int16 wYear;
  unsigned __int16 wMonth;
  unsigned __int16 wDayOfWeek;
  unsigned __int16 wDay;
  unsigned __int16 wHour;
  unsigned __int16 wMinute;
  unsigned __int16 wSecond;
  unsigned __int16 wMilliseconds;
};

/* 7067 */
struct _finddata32_t
{
  unsigned int attrib;
  int time_create;
  int time_access;
  int time_write;
  unsigned int size;
  char name[260];
};

/* 7068 */
struct stat
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 7069 */
struct _stat64i32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 7070 */
struct errentry
{
  unsigned int oscode;
  int errnocode;
};

/* 7071 */
struct _is_ctype_compatible
{
  unsigned int id;
  int is_clike;
};

/* 7072 */
struct setloc_struct
{
  char *pchLanguage;
  char *pchCountry;
  int iLcidState;
  int iPrimaryLen;
  int bAbbrevLanguage;
  int bAbbrevCountry;
  unsigned int lcidLanguage;
  unsigned int lcidCountry;
  tagLC_ID _cacheid;
  unsigned int _cachecp;
  char _cachein[131];
  char _cacheout[131];
  _is_ctype_compatible _Lcid_c[5];
};

/* 7073 */
struct _tiddata
{
  unsigned int _tid;
  unsigned int _thandle;
  int _terrno;
  unsigned int _tdoserrno;
  unsigned int _fpds;
  unsigned int _holdrand;
  char *_token;
  wchar_t *_wtoken;
  char *_mtoken;
  char *_errmsg;
  wchar_t *_werrmsg;
  char *_namebuf0;
  wchar_t *_wnamebuf0;
  char *_namebuf1;
  wchar_t *_wnamebuf1;
  char *_asctimebuf;
  wchar_t *_wasctimebuf;
  void *_gmtimebuf;
  char *_cvtbuf;
  char _con_ch_buf[5];
  unsigned __int16 _ch_buf_used;
  void *_initaddr;
  void *_initarg;
  void *_pxcptacttab;
  void *_tpxcptinfoptrs;
  int _tfpecode;
  threadmbcinfostruct *ptmbcinfo;
  threadlocaleinfostruct *ptlocinfo;
  int _ownlocale;
  unsigned int _NLG_dwCode;
  void *_terminate;
  void *_unexpected;
  void *_translator;
  void *_purecall;
  void *_curexception;
  void *_curcontext;
  int _ProcessingThrow;
  void *_curexcspec;
  void *_pFrameInfoChain;
  setloc_struct _setloc_data;
  void *_reserved1;
  void *_reserved2;
  void *_reserved3;
  void *_reserved4;
  void *_reserved5;
  int _cxxReThrow;
  unsigned int __initDomain;
};

/* 7074 */
struct _stat32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  int st_atime;
  int st_mtime;
  int st_ctime;
};

/* 7075 */
struct _stat64
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  __int64 st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 7076 */
struct __declspec(align(8)) ioinfo
{
  int osfhnd;
  char osfile;
  char pipech;
  int lockinitflag;
  _RTL_CRITICAL_SECTION lock;
  __int8 textmode : 7;
  __int8 unicode : 1;
  char pipech2[2];
  __int64 startpos;
  int utf8translations;
  char dbcsBuffer;
  int dbcsBufferUsed;
};

/* 7077 */
struct _BY_HANDLE_FILE_INFORMATION
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int dwVolumeSerialNumber;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int nNumberOfLinks;
  unsigned int nFileIndexHigh;
  unsigned int nFileIndexLow;
};

/* 7078 */
struct _STARTUPINFOW
{
  unsigned int cb;
  unsigned __int16 *lpReserved;
  unsigned __int16 *lpDesktop;
  unsigned __int16 *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  char *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 7079 */
struct $9EDDA679613D7E4E5E37CB563F432A3F
{
  unsigned int lowerhalf;
  int upperhalf;
};

/* 7080 */
union doubleint
{
  __int64 bigint;
  $9EDDA679613D7E4E5E37CB563F432A3F twoints;
};

/* 7081 */
struct CharPair
{
  char LeadChar;
  char SecondChar;
};

/* 7082 */
struct EnhKeyVals
{
  unsigned __int16 ScanCode;
  CharPair RegChars;
  CharPair ShiftChars;
  CharPair CtrlChars;
  CharPair AltChars;
};

/* 7083 */
struct NormKeyVals
{
  CharPair RegChars;
  CharPair ShiftChars;
  CharPair CtrlChars;
  CharPair AltChars;
};

/* 7084 */
struct _FOCUS_EVENT_RECORD
{
  int bSetFocus;
};

/* 7085 */
struct _COORD
{
  __int16 X;
  __int16 Y;
};

/* 7086 */
struct _MOUSE_EVENT_RECORD
{
  _COORD dwMousePosition;
  unsigned int dwButtonState;
  unsigned int dwControlKeyState;
  unsigned int dwEventFlags;
};

/* 7087 */
union $D73D647711E0D18BB6EFDDF78E7AEEC6
{
  wchar_t UnicodeChar;
  char AsciiChar;
};

/* 7088 */
struct _KEY_EVENT_RECORD
{
  int bKeyDown;
  unsigned __int16 wRepeatCount;
  unsigned __int16 wVirtualKeyCode;
  unsigned __int16 wVirtualScanCode;
  $D73D647711E0D18BB6EFDDF78E7AEEC6 uChar;
  unsigned int dwControlKeyState;
};

/* 7089 */
struct _WINDOW_BUFFER_SIZE_RECORD
{
  _COORD dwSize;
};

/* 7090 */
struct _MENU_EVENT_RECORD
{
  unsigned int dwCommandId;
};

/* 7091 */
union $49555DB42B2733506E382EA585687441
{
  _KEY_EVENT_RECORD KeyEvent;
  _MOUSE_EVENT_RECORD MouseEvent;
  _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
  _MENU_EVENT_RECORD MenuEvent;
  _FOCUS_EVENT_RECORD FocusEvent;
};

/* 7092 */
struct _INPUT_RECORD
{
  unsigned __int16 EventType;
  $49555DB42B2733506E382EA585687441 Event;
};

/* 7093 */
struct tagUSEROBJECTFLAGS
{
  int fInherit;
  int fReserved;
  unsigned int dwFlags;
};

/* 7094 */
struct HWINSTA__
{
  int unused;
};

/* 7095 */
struct tagLC_STRINGS
{
  char szLanguage[64];
  char szCountry[64];
  char szCodePage[16];
};

/* 7096 */
struct tagLOCALETAB
{
  char *szName;
  char chAbbrev[4];
};

/* 7097 */
union FT
{
  unsigned __int64 ft_scalar;
  _FILETIME ft_struct;
};

/* 7098 */
struct __declspec(align(4)) _cpinfo
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
};

/* 7099 */
struct _IMAGE_NT_HEADERS
{
  unsigned int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

/* 7100 */
union $22971E98F1DCAE471B592EC18ECB1551
{
  unsigned int PhysicalAddress;
  unsigned int VirtualSize;
};

/* 7101 */
struct _IMAGE_SECTION_HEADER
{
  char Name[8];
  $22971E98F1DCAE471B592EC18ECB1551 Misc;
  unsigned int VirtualAddress;
  unsigned int SizeOfRawData;
  unsigned int PointerToRawData;
  unsigned int PointerToRelocations;
  unsigned int PointerToLinenumbers;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int Characteristics;
};

/* 7102 */
struct _XCPT_ACTION
{
  unsigned int XcptNum;
  int SigNum;
  void (__cdecl *XcptAction)(int);
};

/* 7103 */
struct _FILEX
{
  _iobuf f;
  _RTL_CRITICAL_SECTION lock;
};

/* 7104 */
struct _TIME_ZONE_INFORMATION
{
  int Bias;
  wchar_t StandardName[32];
  _SYSTEMTIME StandardDate;
  int StandardBias;
  wchar_t DaylightName[32];
  _SYSTEMTIME DaylightDate;
  int DaylightBias;
};

/* 7105 */
struct transitiondate
{
  int yr;
  int yd;
  int ms;
};

/* 7106 */
struct __cppobj <CrtImplementationDetails>::NativeDll
{
};

/* 7107 */
struct __declspec(align(4)) _LocaleUpdate
{
  localeinfo_struct localeinfo;
  _tiddata *ptd;
  bool updated;
};

/* 7108 */
struct _CRT_FLOAT
{
  float f;
};

/* 7109 */
struct _LDOUBLE
{
  char ld[10];
};

/* 7110 */
struct _CRT_DOUBLE
{
  long double x;
};

/* 7111 */
struct _LDBL12
{
  char ld12[12];
};

/* 7112 */
struct _flt
{
  int flags;
  int nbytes;
  int lval;
  long double dval;
};

/* 7113 */
struct code_page_info
{
  int code_page;
  unsigned __int16 mbulinfo[6];
  char rgrange[4][8];
};

/* 7114 */
union $C8014B43F160BFD769FAE3F15553333C
{
  char sz[512];
};

/* 7115 */
union $12F061FBE778B92DEB8200A0ACF7A038
{
  char *sz;
  wchar_t *wz;
};

/* 7116 */
struct _output_l::__l77::_count_string
{
  __int16 Length;
  __int16 MaximumLength;
  char *Buffer;
};

/* 7117 */
struct positional_param
{
  ARG_TYPE arg_type;
  char *arg_ptr;
  char type;
  int flags;
};

/* 7118 */
struct _output_s_l::__l83::_count_string
{
  __int16 Length;
  __int16 MaximumLength;
  char *Buffer;
};

/* 7119 */
struct _IMAGE_TLS_DIRECTORY32
{
  unsigned int StartAddressOfRawData;
  unsigned int EndAddressOfRawData;
  unsigned int AddressOfIndex;
  unsigned int AddressOfCallBacks;
  unsigned int SizeOfZeroFill;
  unsigned int Characteristics;
};

/* 7120 */
struct $D07010382ACA7D10301C30C2C6F001D5
{
  _RTL_CRITICAL_SECTION *lock;
  $1DD7A03358E0D01DD359262876E6A0F0 kind;
};

/* 7121 */
struct rterrmsgs
{
  int rterrno;
  const wchar_t *rterrtxt;
};

/* 7122 */
struct _FloatOutStruct
{
  __int16 exp;
  char sign;
  char ManLen;
  char man[22];
};

/* 7123 */
struct FpFormatDescriptor
{
  int max_exp;
  int min_exp;
  int precision;
  int exp_width;
  int format_width;
  int bias;
};

/* 7124 */
struct $81FF3B5A01E2ACE59F672A6F9CB6F2F8
{
  unsigned __int64 mantissa : 52;
  unsigned __int64 exponent : 11;
  unsigned __int64 sign : 1;
};

/* 7125 */
union _CRT_DOUBLE_COMPONENTS
{
  long double d;
  $81FF3B5A01E2ACE59F672A6F9CB6F2F8 __s1;
};

/* 7126 */
struct __unaligned __declspec(align(2)) DispLocals
{
  unsigned __int16 wUser1;
  unsigned __int16 wUser2;
  unsigned __int16 savCntrl;
  unsigned __int16 setCntrl;
  unsigned __int16 StatusWord;
  _TBYTE Fac;
  unsigned int Function;
  char ErrorType;
  char bUser3;
  unsigned int typ;
  unsigned int nam;
  unsigned __int64 arg1;
  unsigned __int64 arg2;
  unsigned __int64 retval;
  char savebuf;
  _BYTE gap3B[107];
};

/* 7127 */
struct __declspec(align(2)) funtab
{
  char fnamlen;
  char fnam;
  _BYTE gap2[5];
  char fuseval;
  _BYTE gap8[5];
  char fnumarg;
  char fnumber;
};

/* 7128 */
struct _exception
{
  unsigned int typ;
  unsigned int nam;
  unsigned __int64 arg1;
  unsigned __int64 arg2;
  unsigned __int64 retval;
};

/* 7129 */
struct __unaligned __declspec(align(1)) MTStackFrame
{
  unsigned __int64 MTS_LocalFac;
  char MTS_cdispflags;
};

/* 7130 */
struct _U32ARRAY
{
  unsigned int W[4];
};

/* 7131 */
struct _U64
{
  unsigned int W[2];
};

/* 7132 */
struct _FP128
{
  unsigned int W[4];
};

/* 7133 */
struct _FPIEEE_EXCEPTION_FLAGS
{
  unsigned __int32 Inexact : 1;
  unsigned __int32 Underflow : 1;
  unsigned __int32 Overflow : 1;
  unsigned __int32 ZeroDivide : 1;
  unsigned __int32 InvalidOperation : 1;
};

/* 7134 */
struct _FP80
{
  unsigned __int16 W[5];
};

/* 7135 */
struct _I64
{
  unsigned int W[2];
};

/* 7136 */
struct _BCD80
{
  unsigned __int16 W[5];
};

/* 7137 */
struct _FPQ64
{
  __int64 W[2];
};

/* 7138 */
union $B68FF7F8A9018C75E9DCA43F4536C7BE
{
  float Fp32Value;
  long double Fp64Value;
  _FP80 Fp80Value;
  _FP128 Fp128Value;
  __int16 I16Value;
  int I32Value;
  _I64 I64Value;
  unsigned __int16 U16Value;
  unsigned int U32Value;
  _U64 U64Value;
  _BCD80 Bcd80Value;
  char *StringValue;
  int CompareValue;
  _U32ARRAY U32ArrayValue;
  __int64 Q64Value;
  _FPQ64 Fpq64Value;
};

/* 7139 */
struct __declspec(align(16)) _FPIEEE_VALUE
{
  $B68FF7F8A9018C75E9DCA43F4536C7BE Value;
  unsigned __int32 OperandValid : 1;
  unsigned __int32 Format : 4;
};

/* 7140 */
struct _FPIEEE_RECORD
{
  unsigned __int32 RoundingMode : 2;
  unsigned __int32 Precision : 3;
  unsigned __int32 Operation : 12;
  _FPIEEE_EXCEPTION_FLAGS Cause;
  _FPIEEE_EXCEPTION_FLAGS Enable;
  _FPIEEE_EXCEPTION_FLAGS Status;
  _FPIEEE_VALUE Operand1;
  _FPIEEE_VALUE Operand2;
  _FPIEEE_VALUE Result;
};

/* 7141 */
union _dbl
{
  int lng[2];
  long double dbl;
};

/* 7142 */
struct TypeDescriptor
{
  unsigned int hash;
  void *spare;
  char name[];
};

/* 7144 */
struct _s_CatchableType
{
  unsigned int properties;
  TypeDescriptor *pType;
  #7143 thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)();
};

/* 7145 */
struct _s_CatchableTypeArray
{
  int nCatchableTypes;
  _s_CatchableType *arrayOfCatchableTypes[];
};

/* 7146 */
struct _s_HandlerType
{
  unsigned int adjectives;
  TypeDescriptor *pType;
  int dispCatchObj;
  void *addressOfHandler;
};

/* 7147 */
struct _s_ESTypeList
{
  int nCount;
  _s_HandlerType *pTypeArray;
};

/* 7148 */
struct _s_ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)();
  int (*pForwardCompat)(...);
  _s_CatchableTypeArray *pCatchableTypeArray;
};

/* 7149 */
struct _s_UnwindMapEntry
{
  int toState;
  void (__cdecl *action)();
};

/* 7150 */
struct _s_TryBlockMapEntry
{
  int tryLow;
  int tryHigh;
  int catchHigh;
  int nCatches;
  _s_HandlerType *pHandlerArray;
};

/* 7151 */
struct _s_FuncInfo
{
  unsigned __int32 magicNumber : 29;
  unsigned __int32 bbtFlags : 3;
  int maxState;
  _s_UnwindMapEntry *pUnwindMap;
  unsigned int nTryBlocks;
  _s_TryBlockMapEntry *pTryBlockMap;
  unsigned int nIPMapEntries;
  void *pIPtoStateMap;
  _s_ESTypeList *pESTypeList;
  int EHFlags;
};

/* 7152 */
struct EHExceptionRecord::EHParameters
{
  unsigned int magicNumber;
  void *pExceptionObject;
  _s_ThrowInfo *pThrowInfo;
};

/* 7153 */
struct EHExceptionRecord
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  EHExceptionRecord::EHParameters params;
};

/* 7154 */
struct EHRegistrationNode
{
  EHRegistrationNode *pNext;
  void *frameHandler;
  int state;
};

/* 7155 */
struct CatchGuardRN
{
  EHRegistrationNode *pNext;
  void *pFrameHandler;
  unsigned int RandomCookie;
  _s_FuncInfo *pFuncInfo;
  EHRegistrationNode *pRN;
  int CatchDepth;
};

/* 7156 */
struct TranslatorGuardRN
{
  EHRegistrationNode *pNext;
  void *pFrameHandler;
  unsigned int RandomCookie;
  _s_FuncInfo *pFuncInfo;
  EHRegistrationNode *pRN;
  int CatchDepth;
  EHRegistrationNode *pMarkerRN;
  void *ESP;
  void *EBP;
  int DidUnwind;
};

/* 7157 */
struct FrameInfo
{
  void *pExceptionObject;
  FrameInfo *pNext;
};

/* 7158 */
struct __JUMP_BUFFER
{
  unsigned int Ebp;
  unsigned int Ebx;
  unsigned int Edi;
  unsigned int Esi;
  unsigned int Esp;
  unsigned int Eip;
  unsigned int Registration;
  unsigned int TryLevel;
  unsigned int Cookie;
  unsigned int UnwindFunc;
  unsigned int UnwindData[6];
};

/* 7159 */
struct _HeapManager::Block
{
  _HeapManager::Block *next;
  char memBlock[4096];
};

/* 7160 */
struct _HeapManager
{
  void *(__cdecl *pOpNew)(unsigned int);
  void (__cdecl *pOpDelete)(void *);
  _HeapManager::Block *head;
  _HeapManager::Block *tail;
  unsigned int blockLeft;
};

/* 7161 */
struct DNameNode
{
  DNameNodeVtbl *vfptr;
};

/* 7162 */
struct DNameNodeVtbl
{
  int (__thiscall *length)(DNameNode *this);
  char (__thiscall *getLastChar)(DNameNode *this);
  char *(__thiscall *getString)(DNameNode *this, char *, char *);
};

/* 7163 */
struct DName
{
  DNameNode *node;
  __int32 stat : 8;
  unsigned __int32 isIndir : 1;
  unsigned __int32 isAUDC : 1;
  unsigned __int32 isAUDTThunk : 1;
  unsigned __int32 isArrayType : 1;
  unsigned __int32 NoTE : 1;
  unsigned __int32 pinPtr : 1;
  unsigned __int32 comArray : 1;
  unsigned __int32 vcallThunk : 1;
};

/* 7164 */
struct Replicator
{
  int index;
  DName *dNameBuffer[10];
};

/* 7165 */
struct __cppobj __declspec(align(4)) charNode : DNameNode
{
  char me;
};

/* 7166 */
struct __cppobj pcharNode : DNameNode
{
  char *me;
  int myLen;
};

/* 7167 */
struct UnDecorator
{
  Replicator ArgList;
  Replicator ZNameList;
};

/* 7168 */
struct __cppobj pDNameNode : DNameNode
{
  DName *me;
};

/* 7169 */
struct __cppobj pairNode : DNameNode
{
  DNameNode *left;
  DNameNode *right;
  int myLen;
};

/* 7170 */
struct __cppobj DNameStatusNode : DNameNode
{
  DNameStatus me;
  int myLen;
};

/* 7171 */
struct $_s__CatchableTypeArray$_extraBytes_12
{
  int nCatchableTypes;
  _s__CatchableType *arrayOfCatchableTypes[3];
};

/* 7172 */
struct XAssetPool<GfxImage,5376>
{
  XAssetPoolEntry<GfxImage> *freeHead;
  XAssetPoolEntry<GfxImage> entries[5376];
};

/* 7173 */
typedef HDC__ *HDC;

/* 7174 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPHYSICALGPUSFROMDISPLAY)(NvDisplayHandle__ *, NvPhysicalGpuHandle__ **, unsigned int *);

/* 7175 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCOOLERPOLICYTABLE)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_COOLER_POLICY_TABLE *, unsigned int *);

/* 7176 */
typedef _CTL_ENTRY *PCTL_ENTRY;

/* 7177 */
typedef char visdata_t;

/* 7179 */
typedef char *LPBYTE;

/* 7180 */
typedef IUnknown *LPUNKNOWN;

/* 7181 */
typedef ZBarrierDef *ZBarrierDefPtr;

/* 7182 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETBUSTYPE)(NvPhysicalGpuHandle__ *, _NV_GPU_BUS_TYPE *);

/* 7183 */
typedef char statsHash_t[24];

/* 7184 */
typedef char *pchar_t;

/* 7185 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHCLEARDEPTHNV)(unsigned int, float);

/* 7186 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETCOOLERPOLICYTABLE)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_COOLER_POLICY_TABLE *, unsigned int);

/* 7187 */
typedef void (__cdecl *CompositeResolveCallback)(GfxImage *);

/* 7188 */
typedef unsigned __int16 PROPVAR_PAD2;

/* 7189 */
typedef void (__cdecl *png_longjmp_ptr)(int *, int);

/* 7190 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTORINFO)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_CONNECTOR_INFO *);

/* 7191 */
typedef bool (__cdecl *FxElemFieldHandler)(const char **, FxEditorElemDef *);

/* 7192 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_DELETEPATHNV)(unsigned int);

/* 7193 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_GETCUSTOMFORMATGUID)(NvGUID *);

/* 7194 */
typedef vehAnimClient_t SV_VehAnimClients[18];

/* 7195 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDVCLEVELEX)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_DVC_INFO_EX *);

/* 7196 */
typedef my_main_controller *my_main_ptr;

/* 7197 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMLOGICALGPUS)(NvLogicalGpuHandle__ **, unsigned int *);

/* 7198 */
typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(void *, unsigned int, void *);

/* 7199 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETPIXELSHADERCONSTANTF)(void *, unsigned int, float *, float *, float *, unsigned int);

/* 7200 */
typedef HWINSTA__ *HWINSTA;

/* 7201 */
typedef void __cdecl rpnFunction_t(LocalClientNum_t, itemDef_s *, OperandStack *);

/* 7202 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETPIXELSHADERCONSTANTB)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 7203 */
typedef tagMIXERLINEA *LPMIXERLINEA;

/* 7204 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_FORCETOSCREENDEPTH)(void *, char);

/* 7205 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETTVENCODERCONTROLS)(NvDisplayHandle__ *, unsigned int, NV_TV_ENCODER_CONTROLS *);

/* 7206 */
typedef int (__stdcall *FARPROC)();

/* 7207 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMUNDERSCANCONFIG)(NvDisplayHandle__ *, unsigned int, unsigned int, NV_UNDERSCAN_CONFIG *);

/* 7208 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTOTALTPCCOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7209 */
typedef _PEB_LDR_DATA *PPEB_LDR_DATA;

/* 7210 */
typedef _SYSTEM_INFO *LPSYSTEM_INFO;

/* 7211 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETTVENCODERCONTROLS)(NvDisplayHandle__ *, unsigned int, NV_TV_ENCODER_CONTROLS *);

/* 7212 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETDISPLAYVIEWPORTSBYRESOLUTION)(unsigned int, unsigned int, unsigned int, _NV_RECT *, char *);

/* 7213 */
typedef char raw_byte16;

/* 7214 */
typedef void *bdMutexHandle;

/* 7215 */
typedef unsigned int D3DTEXTUREFILTERTYPE;

/* 7216 */
typedef char *voidpf;

/* 7217 */
typedef void (__cdecl *ltp_unquant_func)(float *, int, int, float, const void *, int, int *, float *, SpeexBits *, char *, int, int, float, int);

/* 7218 */
typedef void (__cdecl *ClientFieldCodeCallbackFuncFloatVal)(LocalClientNum_t, unsigned int, float, float, bool, bool, const char *, bool);

/* 7219 */
typedef my_destination_mgr *my_dest_ptr;

/* 7220 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETAPPLICATIONINFO)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned __int16 *, _NVDRS_APPLICATION_V2 *);

/* 7221 */
typedef const char *STRSAFE_PCNZCH;

/* 7222 */
typedef _STARTUPINFOA *LPSTARTUPINFOA;

/* 7223 */
typedef void (__stdcall *BINKMEMFREE)(void *);

/* 7224 */
typedef int (__cdecl *encoder_ctl_func)(void *, int, void *);

/* 7225 */
typedef char GfxRenderTargetId;

/* 7226 */
typedef png_struct_def *png_const_structp;

/* 7227 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETASSOCIATEDNVIDIADISPLAYHANDLE)(const char *, NvDisplayHandle__ **);

/* 7228 */
typedef int (__cdecl *decode_func)(void *, SpeexBits *, void *);

/* 7229 */
typedef void (__stdcall *BINKCBFLIPENDIAN)(void *, unsigned int);

/* 7230 */
typedef int AxialSurfaceFlags[3];

/* 7231 */
typedef GfxLightDef *GfxLightDefPtr;

/* 7232 */
typedef char byte32;

/* 7233 */
typedef unsigned int HAuthTicket;

/* 7234 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETCAPABILITIES)(NvVioHandle__ *, _NVVIOCAPS *);

/* 7235 */
typedef Weapon (__cdecl *pmove_getPlayerWeapon)(playerState_s *, LocalClientNum_t);

/* 7236 */
typedef void (__cdecl *fn_touch)(gentity_t *, gentity_t *, int);

/* 7237 */
typedef unsigned int UINTa;

/* 7238 */
typedef _DDCAPS_DX7 *LPDDCAPS;

/* 7239 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERTOPOLOGYGETINFO)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_TOPOLOGY_INFO_V1 *);

/* 7240 */
typedef char *MemoryBlockData;

/* 7241 */
typedef char byte128;

/* 7242 */
typedef unsigned __int16 DevMenuHandle;

/* 7243 */
typedef __int16 (**JBLOCKARRAY)[64];

/* 7244 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ENUMVIDEOFEATURES)(unsigned int *, _NVAPI_DX_VIDEO_FEATURE_DETAILS *);

/* 7245 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETGDIPRIMARYDISPLAYID)(unsigned int *);

/* 7246 */
typedef unsigned int ScreenshotHandle;

/* 7247 */
typedef char NvU8;

/* 7248 */
typedef HICON__ *HCURSOR;

/* 7249 */
typedef void (__cdecl *fn_die)(gentity_t *, gentity_t *, gentity_t *, int, int, Weapon, vec3_t *, hitLocation_t, int);

/* 7250 */
typedef unsigned int BoltHandle_t;

/* 7251 */
typedef void (__cdecl *lsp_quant_func)(float *, float *, int, SpeexBits *);

/* 7252 */
typedef float FLOAT;

/* 7253 */
typedef bool _Bool;

/* 7254 */
typedef unsigned __int16 XSurfaceFlags;

/* 7255 */
typedef unsigned int ClumpFileHash_t;

/* 7256 */
typedef tagVARIANT *LPVARIANT;

/* 7257 */
typedef char UINT8;

/* 7258 */
typedef char uint8;

/* 7259 */
typedef volatile int volatile_int32;

/* 7260 */
typedef unsigned int UINT4;

/* 7261 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETQUADROSTATUS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7262 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETACTIVEOUTPUTS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7263 */
typedef unsigned int uint;

/* 7264 */
typedef unsigned int UINT;

/* 7265 */
typedef unsigned int uInt;

/* 7266 */
typedef unsigned int *PULONG;

/* 7267 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_CREATEHANDLEFROMIUNKNOWN)(IUnknown *, void **);

/* 7268 */
typedef unsigned __int16 dynEnts_t[2][100];

/* 7269 */
typedef tagLC_STRINGS *LPLC_STRINGS;

/* 7270 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETCONVERGENCE)(void *, float *);

/* 7271 */
typedef textDefData_t *textDefData_ptr;

/* 7272 */
typedef char BD_PLATFORM_CHAR;

/* 7273 */
typedef hostent *LPHOSTENT;

/* 7274 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYCONFIG)(unsigned int *, _NV_DISPLAYCONFIG_PATH_INFO *);

/* 7275 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETHCLONETOPOLOGY)(NV_HCLONE_TOPOLOGY_V1 *);

/* 7276 */
typedef unsigned int EXECUTION_STATE;

/* 7277 */
typedef void *(__cdecl *curl_malloc_callback)(unsigned int);

/* 7278 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETSETTINGIDFROMNAME)(unsigned __int16 *, unsigned int *);

/* 7279 */
typedef int (__cdecl *parseSpecialFieldType_t)(char *, const char *, const int, const int);

/* 7280 */
typedef char max_msg_buf[65536];

/* 7281 */
typedef int stream_id;

/* 7282 */
typedef void *(__cdecl *mz_alloc_func)(void *, unsigned int, unsigned int);

/* 7283 */
typedef HMONITOR__ *HMONITOR;

/* 7284 */
typedef HBRUSH__ *HBRUSH;

/* 7285 */
typedef _TEB_ACTIVE_FRAME *PTEB_ACTIVE_FRAME;

/* 7286 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETCONFIG)(NvVioHandle__ *, _NVVIOCONFIG_V3 *);

/* 7287 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SETCONFIG)(NvVioHandle__ *, _NVVIOCONFIG_V3 *);

/* 7288 */
typedef void (__cdecl *DevGraphEventCallback)(DevGraph *, DevEventType, LocalClientNum_t);

/* 7289 */
typedef gz_header_s *gz_headerp;

/* 7290 */
typedef unsigned int _U32;

/* 7291 */
typedef unsigned __int64 bdUInt64;

/* 7292 */
typedef unsigned __int16 PROPVAR_PAD3;

/* 7293 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETECCERRORINFO)(NvPhysicalGpuHandle__ *, NV_GPU_ECC_ERROR_INFO *);

/* 7294 */
typedef FootstepFXTableDef *FootstepFXTableDefPtr;

/* 7295 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_RESTORECOOLERSETTINGS)(NvPhysicalGpuHandle__ *, unsigned int *, unsigned int);

/* 7296 */
typedef unsigned int mz_ulong;

/* 7297 */
typedef _RGNDATA *LPRGNDATA;

/* 7298 */
typedef AddonMapEnts *AddonMapEntsPtr;

/* 7299 */
typedef backing_store_struct *backing_store_ptr;

/* 7300 */
typedef bool (__cdecl *phys_should_collide_callback_t)(broad_phase_base *, broad_phase_base *);

/* 7301 */
typedef wchar_t *PWCHAR;

/* 7302 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_UNLOAD)();

/* 7303 */
typedef clipMap_t *clipMap_ptr;

/* 7304 */
typedef unsigned int SNetSocket_t;

/* 7305 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETALLDISPLAYIDS)(NvPhysicalGpuHandle__ *, _NV_GPU_DISPLAYIDS *, unsigned int *);

/* 7306 */
typedef IDirect3DDevice9 *LPDIRECT3DDEVICE9;

/* 7307 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETCURRENTMOSAICTOPOLOGY)(NV_MOSAIC_TOPOLOGY *, unsigned int *);

/* 7308 */
typedef unsigned __int16 bdPort;

/* 7309 */
typedef void (__cdecl *NVAPI_PRIMARY_FLIP_CHAIN_CALLBACK)(unsigned int);

/* 7310 */
typedef void (__cdecl *png_progressive_end_ptr)(png_struct_def *, png_info_def *);

/* 7311 */
typedef void (__cdecl *gam_destroy_callback_t)(void *);

/* 7312 */
typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned int);

/* 7313 */
typedef void __cdecl DB_Interrupt();

/* 7314 */
typedef int XPartBits[5];

/* 7315 */
typedef unsigned __int64 _ULonglong;

/* 7316 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETFBWIDTHANDLOCATION)(NvPhysicalGpuHandle__ *, unsigned int *, _NV_GPU_FB_LOCATION *);

/* 7317 */
typedef tagSAFEARRAY *LPSAFEARRAY;

/* 7318 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETCURRENTMOSAICTOPOLOGY)(NV_MOSAIC_TOPOLOGY *);

/* 7319 */
typedef unsigned int TxaaU4;

/* 7320 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPHYSICALFRAMEBUFFERSIZE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7321 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETCHIPSETINFO)(NV_CHIPSET_INFO_v4 *);

/* 7322 */
typedef __int64 bdInt64;

/* 7323 */
typedef BINK *HBINK;

/* 7324 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVIEW)(NvDisplayHandle__ *, NV_VIEW_TARGET_INFO *, unsigned int *, _NV_TARGET_VIEW_MODE *);

/* 7325 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETTVOUTPUTBORDERCOLOR)(NvDisplayHandle__ *, unsigned int, NV_TV_BORDER_COLOR *);

/* 7326 */
typedef int (__cdecl *get_wheel)(pmove_t *, int, vec3_t *);

/* 7327 */
typedef unsigned __int16 OcclusionQueryHandle;

/* 7328 */
typedef void (__cdecl *hostDelegateMessageHandler)(netadr_t, ControllerIndex_t, msg_t *, char);

/* 7329 */
typedef float TxaaF4;

/* 7330 */
typedef unsigned __int64 BD_UINT_64;

/* 7331 */
typedef void __cdecl GfxDrawCallback(const void *, GfxCmdBufContext, GfxViewInfo *);

/* 7332 */
typedef void (__cdecl *FX_DrawElemHandler)(FxDrawState *, FxElemRenderState *);

/* 7333 */
typedef const char *__MIDL_IUri_0002[4];

/* 7334 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_OGL_EXPERTMODEGET)(unsigned int *, unsigned int *, unsigned int *, void (__cdecl **)(unsigned int, unsigned int, unsigned int, int, const char *));

/* 7335 */
typedef int IFAST_MULT_TYPE;

/* 7336 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETVIEW)(NvDisplayHandle__ *, NV_VIEW_TARGET_INFO *, _NV_TARGET_VIEW_MODE);

/* 7337 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETTVOUTPUTBORDERCOLOR)(NvDisplayHandle__ *, unsigned int, NV_TV_BORDER_COLOR);

/* 7338 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_GETCOPROCINFOFLAGSEX)(NV_COPROC_FLAGS_EX *);

/* 7339 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_DESTROYQUERY)(NVDX_ObjectHandle__ *);

/* 7340 */
typedef int cinematic_id;

/* 7341 */
typedef __int16 int16;

/* 7342 */
typedef __int16 INT16;

/* 7343 */
typedef HMIXEROBJ__ *HMIXEROBJ;

/* 7344 */
typedef Weapon (__cdecl *weapon_getweaponforname)(const char *);

/* 7345 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_NEGOTIATEDHEXCHANGE)(const unsigned __int16 *, char *, char *);

/* 7346 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHENABLEDEPTHTESTNV)(unsigned int, bool);

/* 7347 */
typedef const char *XString;

/* 7348 */
typedef void (__cdecl *ScriptCallbackEnt)(gentity_t *, int);

/* 7349 */
typedef int _off_t;

/* 7350 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURASETCOOLINGBUDGET)(unsigned int);

/* 7351 */
typedef void *(__cdecl *Alloc_t)(int);

/* 7352 */
typedef unsigned int WICColor;

/* 7353 */
typedef _INPUT_RECORD *PINPUT_RECORD;

/* 7354 */
typedef void (__cdecl *_inconsistency_function)();

/* 7355 */
typedef _EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

/* 7356 */
typedef unsigned __int16 raw_ushort;

/* 7357 */
typedef void (__cdecl *fn_use)(gentity_t *, gentity_t *, gentity_t *);

/* 7358 */
typedef int LRESULT;

/* 7359 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETASSOCIATEDDISPLAYOUTPUTID)(NvDisplayHandle__ *, unsigned int *);

/* 7360 */
typedef int (__cdecl *R_TimeoutFunction)();

/* 7361 */
typedef FootstepTableDef *FootstepTableDefPtr;

/* 7363 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SAVESETTINGSTOFILE)(NvDRSSessionHandle__ *, unsigned __int16 *);

/* 7364 */
typedef _DIOBJECTDATAFORMAT *LPDIOBJECTDATAFORMAT;

/* 7365 */
typedef png_time_struct *png_const_timep;

/* 7366 */
typedef int bdWord;

/* 7367 */
typedef Slug *SlugPtr;

/* 7368 */
typedef png_sPLT_entry_struct *png_sPLT_entryp;

/* 7369 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETSETTINGNAMEFROMID)(unsigned int, unsigned __int16 (*)[2048]);

/* 7370 */
typedef PhysGeomList *(__cdecl *get_vehicle_collmap)(LocalClientNum_t, const int);

/* 7371 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DESTROYHANDLE)(void *);

/* 7372 */
typedef char vp8_prob;

/* 7373 */
typedef ID3D11Buffer *GfxVertexBufferHandle;

/* 7374 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_STRETCHRECTEX)(unsigned int *, unsigned int *, tagRECT *, unsigned int *, tagRECT *, unsigned int);

/* 7375 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ISFRAMELOCKMODECOMPATIBLE)(NvVioHandle__ *, unsigned int, unsigned int, unsigned int *);

/* 7376 */
typedef unsigned int *PDWORD;

/* 7377 */
typedef LIST_ENTRY32 *PLIST_ENTRY32;

/* 7378 */
typedef NvDRSProfileHandle__ *NvDRSProfileHandle;

/* 7379 */
typedef char FLAC__StreamDecoderMetadataCallback[12];

/* 7380 */
typedef unsigned int LCTYPE;

/* 7381 */
typedef int qhandle_t;

/* 7382 */
typedef void (__cdecl *DrawLitFunction)(GfxViewInfo *, GfxCmdBuf *, LitPhaseID);

/* 7383 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SETSYNCDELAY)(NvVioHandle__ *, _NVVIOSYNCDELAY *);

/* 7384 */
typedef IDirectDraw7 *LPDIRECTDRAW7;

/* 7385 */
typedef unsigned int uintptr_t;

/* 7386 */
typedef unsigned int mp_digit;

/* 7387 */
typedef __int64 LONG64;

/* 7388 */
typedef const char *STRSAFE_LPCSTR;

/* 7389 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_POLLOOSDSTATE)(const unsigned __int16 *);

/* 7390 */
typedef unsigned int tinfl_bit_buf_t;

/* 7391 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETSYNCDELAY)(NvVioHandle__ *, _NVVIOSYNCDELAY *);

/* 7392 */
typedef _tagADDRESS *LPADDRESS;

/* 7393 */
typedef IDirectDraw *LPDIRECTDRAW;

/* 7394 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETHDCPLINKPARAMETERS)(NvDisplayHandle__ *, NV_HDCP_INFO *);

/* 7395 */
typedef void (__cdecl *NotifyListener)(unsigned int, unsigned int);

/* 7396 */
typedef _DDSCAPS2 *LPDDSCAPS2;

/* 7397 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETFRUSTUMADJUSTMODE)(void *, _NV_FrustumAdjustMode *);

/* 7398 */
typedef unsigned int png_alloc_size_t;

/* 7399 */
typedef int expressionEntryType;

/* 7400 */
typedef void (__cdecl *SD_DecoderInterfaceConsume)(sd_decoder *, unsigned int, unsigned int, __int16 *);

/* 7401 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPERFDECREASEINFO)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7402 */
typedef unsigned __int16 DynEntityId;

/* 7403 */
typedef IDirectDrawClipper *LPDIRECTDRAWCLIPPER;

/* 7404 */
typedef char *va_list;

/* 7405 */
typedef _EXCEPTION_POINTERS *LPEXCEPTION_POINTERS;

/* 7406 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETVERTEXSHADERCONSTANTI)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 7407 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_DRAWPATHNV)(unsigned int, _NV_PATH_MODE);

/* 7408 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_SETCURRENTTOPO)(NV_MOSAIC_TOPO_BRIEF *, NV_MOSAIC_DISPLAY_SETTING *, int, int, unsigned int);

/* 7409 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ALIASSURFACEASTEXTURE)(unsigned int *, unsigned int *, unsigned int **, unsigned int);

/* 7410 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETVERTEXSHADERCONSTANTB)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 7411 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETVERTEXSHADERCONSTANTF)(void *, unsigned int, float *, float *, float *, unsigned int);

/* 7412 */
typedef void (__cdecl *PFV)();

/* 7413 */
typedef int lzo_bool;

/* 7414 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_HYBRID_ISAPPMIGRATIONSTATECHANGEABLE)(NV_HYBRID_APP_INFO, unsigned int *);

/* 7415 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETCONFIGURATIONPROFILEVALUE)(_NV_StereoRegistryProfileType, _NV_StereoRegistryID, void *);

/* 7416 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_INCREASESEPARATION)(void *);

/* 7417 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPERFCLOCKS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_PERF_CLOCK_TABLE *);

/* 7418 */
typedef char **JSAMPARRAY;

/* 7419 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_INITINTERFACE)();

/* 7420 */
typedef void *bdThreadHandle;

/* 7421 */
typedef void (__cdecl *png_progressive_row_ptr)(png_struct_def *, char *, unsigned int, int);

/* 7422 */
typedef tagSIZE *LPSIZE;

/* 7423 */
typedef int (__stdcall *LPDIENUMDEVICEOBJECTSCALLBACKA)(DIDEVICEOBJECTINSTANCEA *, void *);

/* 7424 */
typedef char _TCHAR;

/* 7425 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPERFCLOCKS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_PERF_CLOCK_TABLE *);

/* 7426 */
typedef void (__cdecl *R_Cinematic_FinishedCallback)(int);

/* 7427 */
typedef char (__cdecl *jpeg_marker_parser_method)(jpeg_decompress_struct *);

/* 7428 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ISWINDOWEDMODESUPPORTED)(char *);

/* 7429 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_HYBRID_QUERYBLOCKEDMIGRATABLEAPPS)(NV_HYBRID_APP_INFO *, unsigned int *);

/* 7430 */
typedef scrVmDebugPub_t scrVmDebugPubArray_t[2];

/* 7431 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCMAPTEXBUFFER)(unsigned int *, unsigned int *, void *);

/* 7432 */
typedef unsigned __int64 u64;

/* 7433 */
typedef unsigned __int64 U64;

/* 7434 */
typedef unsigned __int16 FxEffectHandle;

/* 7435 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_FREEVIDEO)(unsigned int *);

/* 7436 */
typedef box *boxptr;

/* 7437 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_TRYCUSTOMDISPLAY)(NvDisplayHandle__ *, unsigned int *, NV_CUSTOM_DISPLAY *, unsigned int, unsigned int);

/* 7438 */
typedef int stream_fileid;

/* 7439 */
typedef DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;

/* 7440 */
typedef __int64 i64;

/* 7441 */
typedef int (__stdcall *BINKIOBGCONTROL)(BINKIO *, unsigned int);

/* 7442 */
typedef void (__cdecl *pmove_trace)(trace_t *, vec3_t *, vec3_t *, vec3_t *, vec3_t *, int, int, col_context_t *);

/* 7443 */
typedef int (__cdecl *speex_callback_func)(SpeexBits *, void *, void *);

/* 7444 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETSTEREOSUPPORT)(NvMonitorHandle__ *, _NVAPI_STEREO_CAPS *);

/* 7445 */
typedef my_fdct_controller *my_fdct_ptr;

/* 7446 */
typedef unsigned __int64 mz_uint64;

/* 7447 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DECREASECONVERGENCE)(void *);

/* 7448 */
typedef _GUID *LPCGUID;

/* 7449 */
typedef tagMIXERCONTROLA *LPMIXERCONTROLA;

/* 7450 */
typedef char msg_buf_t[65536];

/* 7451 */
typedef bool __cdecl TriangleVisitorFunc(void *, const char **, const char **);

/* 7452 */
typedef char byte4;

/* 7453 */
typedef small_pool_struct *small_pool_ptr;

/* 7454 */
typedef unsigned int (__stdcall *tlThreadFunction)(void *);

/* 7455 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETFRAMERATENOTIFY)(NvDisplayHandle__ *, _NVAPI_FRAME_RATE_NOTIFY_INFO *);

/* 7456 */
typedef RedBlackTreeNode *(__cdecl *RedBlackTreeAllocCallback)();

/* 7457 */
typedef int DBFile;

/* 7458 */
typedef char byte8;

/* 7459 */
typedef void DispatcherContext;

/* 7460 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTHERMALSETTINGS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_THERMAL_SETTINGS_V2 *);

/* 7461 */
typedef char BYTE;

/* 7462 */
typedef char byte;

/* 7463 */
typedef char Byte;

/* 7464 */
typedef char snd_align_char;

/* 7465 */
typedef void *(__stdcall *PFLS_GETVALUE_FUNCTION)(unsigned int);

/* 7466 */
typedef DestructiblePiece *DestructiblePiecePtr;

/* 7467 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATESWAPCHAIN)(void *, unsigned int *, unsigned int **, _NV_StereoSwapChainMode);

/* 7468 */
typedef void (__cdecl *encoder_destroy_func)(void *);

/* 7469 */
typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;

/* 7470 */
typedef editFieldDef_s *editFieldDef_ptr;

/* 7471 */
typedef void *SndLengthNotifyData;

/* 7472 */
typedef __int16 FSERROR;

/* 7473 */
typedef HMIXER__ **LPHMIXER;

/* 7474 */
typedef int (__cdecl *QsortCallBack)(const void *, const void *);

/* 7475 */
typedef png_struct_def *png_structp;

/* 7476 */
typedef XAnimParts *XAnimPartsPtr;

/* 7477 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSMMASK)(NvPhysicalGpuHandle__ *, unsigned int, unsigned int *);

/* 7478 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETMONITORCAPABILITIES)(unsigned int, _NV_MONITOR_CAPABILITIES *);

/* 7479 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_JOINSWAPGROUP)(IUnknown *, unsigned int *, unsigned int, int);

/* 7480 */
typedef void (__cdecl *ScriptCallbackHudElem)(game_hudelem_s *, int);

/* 7481 */
typedef char byte8192;

/* 7482 */
typedef void *PVOID;

/* 7483 */
typedef ownerDrawDef_s *ownerDrawDef_ptr;

/* 7484 */
typedef focusItemDef_s *focusItemDef_ptr;

/* 7485 */
typedef unsigned int Filter[8];

/* 7486 */
typedef unsigned int uint32;

/* 7487 */
typedef unsigned int UINT32;

/* 7488 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_SETDISPLAYBLANKINGSTATE)(unsigned int, _NV_DISPLAY_BLANKING_INFO_V1 *);

/* 7489 */
typedef MemoryBlock *MemoryBlockPtr;

/* 7490 */
typedef _CERT_EXTENSION *PCERT_EXTENSION;

/* 7491 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_RESTOREPROFILEDEFAULTSETTING)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int);

/* 7492 */
typedef int (__cdecl *mode_query_func)(const void *, int, void *);

/* 7493 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETPITCHSURFACECREATION)(unsigned int *, unsigned int);

/* 7494 */
typedef char Bytef;

/* 7495 */
typedef IDirect3DTexture9 *LPDIRECT3DTEXTURE9;

/* 7496 */
typedef unsigned int GfxPackedColor;

/* 7497 */
typedef actor_t actor_array_t[32];

/* 7498 */
typedef char png_warning_parameters[8][32];

/* 7499 */
typedef __int64 curl_off_t;

/* 7500 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GPIOWRITETOPIN)(NvPhysicalGpuHandle__ *, NV_GPU_GPIO_PIN_DATA *);

/* 7501 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_QUERYTOPOLOGY)(_NV_VIO_TOPOLOGY *);

/* 7502 */
typedef void (__cdecl *upsample1_ptr)(jpeg_decompress_struct *, jpeg_component_info *, char **, char ***);

/* 7503 */
typedef unsigned int AccountID_t;

/* 7504 */
typedef my_prep_controller *my_prep_ptr;

/* 7505 */
typedef SndPatch *SndPatchPtr;

/* 7506 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETNOTIFICATIONMESSAGE)(void *, unsigned __int64, unsigned __int64);

/* 7507 */
typedef XAnimInfo XAnimInfoArray[4096];

/* 7508 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYPORTINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_PORT_INFO *);

/* 7509 */
typedef unsigned __int16 GfxModelLightingHandle;

/* 7510 */
typedef int (__cdecl *INPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

/* 7511 */
typedef void (__cdecl *NVAPI_CALLBACK_THERMALEVENT)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL, void *);

/* 7512 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETGPUTYPE)(NvPhysicalGpuHandle__ *, _NV_GPU_TYPE *);

/* 7513 */
typedef int WeaponAttachmentAnimationOverrideMask[3];

/* 7514 */
typedef char JOCTET;

/* 7515 */
typedef unsigned int COP_POINTER;

/* 7516 */
typedef unsigned __int16 PROPVAR_PAD1;

/* 7517 */
typedef int (__stdcall *BINKSNDPAUSE)(BINKSND *, int);

/* 7518 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTPCMASK)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7519 */
typedef void (__cdecl *DevGraphTextCallback)(DevGraph *, const float, const float, char *, const int);

/* 7520 */
typedef my_coef_controller *my_coef_ptr;

/* 7521 */
typedef int DISPID;

/* 7522 */
typedef unsigned int _Uint32t;

/* 7523 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_REGISTERAPP)(IUnknown *, unsigned int);

/* 7524 */
typedef unsigned __int64 LeagueSubdivisionID;

/* 7525 */
typedef const int *png_const_fixed_point_p;

/* 7526 */
typedef wchar_t *STRSAFE_LPWSTR;

/* 7527 */
typedef ID3D11DepthStencilView *const FLAC__StreamDecoderReadCallback;

/* 7528 */
typedef _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;

/* 7529 */
typedef void (__cdecl *png_rw_ptr)(png_struct_def *, char *, unsigned int);

/* 7530 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPARTITIONCOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7531 */
typedef unsigned __int64 DWORDLONG;

/* 7532 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_CAPTUREJPEGIMAGE)(void *, unsigned int);

/* 7533 */
typedef char GfxViewportBehavior;

/* 7534 */
typedef int (__stdcall *LOCALE_ENUMPROCA)(char *);

/* 7535 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVOLTAGES)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_VOLTAGES *);

/* 7536 */
typedef unsigned __int64 PublishedFileUpdateHandle_t;

/* 7537 */
typedef void (__cdecl *ScriptCallbackActor)(actor_t *, actor_fields_s *);

/* 7538 */
typedef unsigned int (__stdcall *bdThreadProc)(void *);

/* 7539 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETBOARDINFO)(NvPhysicalGpuHandle__ *, _NV_BOARD_INFO *);

/* 7540 */
typedef HRESULT (__stdcall *LPDIRECTDRAWENUMERATEEX)(int (__stdcall *)(_GUID *, char *, char *, void *, HMONITOR__ *), void *, unsigned int);

/* 7541 */
typedef const char *png_const_bytep;

/* 7542 */
typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;

/* 7543 */
typedef int LPARAM;

/* 7544 */
typedef itemDef_s *itemDef_ptr;

/* 7545 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_ENUMDISPLAYMODES)(NV_MOSAIC_GRID_TOPO *, NV_MOSAIC_DISPLAY_SETTING *, unsigned int *);

/* 7546 */
typedef char FxElemType;

/* 7547 */
typedef const void *LPCVOID;

/* 7548 */
typedef _SYSTEMTIME *LPSYSTEMTIME;

/* 7549 */
typedef _DDPIXELFORMAT *LPDDPIXELFORMAT;

/* 7550 */
typedef __int16 *JCOEFPTR;

/* 7551 */
typedef char eCmdBufType;

/* 7552 */
typedef unsigned int WPARAM;

/* 7553 */
typedef unsigned int D3DFORMAT;

/* 7554 */
typedef __int64 _Q64;

/* 7555 */
typedef const wchar_t *STRSAFE_LPCWSTR;

/* 7556 */
typedef unsigned __int16 COP_STRING_OFFSET;

/* 7557 */
typedef _OSVERSIONINFOA *LPOSVERSIONINFOA;

/* 7558 */
typedef void (__cdecl *CommandClearSlectionFunc)();

/* 7559 */
typedef int int32;

/* 7560 */
typedef int INT32;

/* 7561 */
typedef unsigned int (__cdecl *mz_file_read_func)(void *, unsigned __int64, void *, unsigned int);

/* 7562 */
typedef _KDHELP *PKDHELP;

/* 7563 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTPCIEDOWNSTREAMWIDTH)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7564 */
typedef void *(__cdecl *mz_realloc_func)(void *, void *, unsigned int, unsigned int);

/* 7565 */
typedef huff_entropy_encoder *huff_entropy_ptr;

/* 7566 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCMAPSURFACEBUFFER)(unsigned int *, unsigned int *, void *);

/* 7567 */
typedef int Int3[3];

/* 7568 */
typedef void __cdecl XAssetEnum(XAssetHeader, void *);

/* 7569 */
typedef tagMIXERCAPSA *LPMIXERCAPSA;

/* 7570 */
typedef bool (__cdecl *StateTransitionFunc)(RagdollBody *, RagdollBodyState, RagdollBodyState);

/* 7571 */
typedef void (__cdecl *StateUpdateFunc)(RagdollBody *, int);

/* 7572 */
typedef tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;

/* 7573 */
typedef phuff_entropy_encoder *phuff_entropy_ptr;

/* 7574 */
typedef unsigned int MMVERSION;

/* 7575 */
typedef void (__cdecl *ExecHandlerCallback)(LocalClientNum_t, ControllerIndex_t, itemDef_s *, const char *);

/* 7576 */
typedef void (__cdecl *parseStrcpy_t)(char *, const char *);

/* 7577 */
typedef unsigned __int16 bdUInt16;

/* 7578 */
typedef unsigned int D3DPRESENT_PARAMETERS;

/* 7579 */
typedef int NTSTATUS;

/* 7580 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DELETECONFIGURATIONPROFILEVALUE)(_NV_StereoRegistryProfileType, _NV_StereoRegistryID);

/* 7581 */
typedef GfxBackEndData GfxBackEndDataArray[1];

/* 7582 */
typedef unsigned __int16 bdSeqNumber;

/* 7583 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_APPHANDSHAKE)(void *, _NVAPI_STEREO_HANDSHAKE_PARAMS *);

/* 7584 */
typedef ID3D11PixelShader *GfxPixelShader;

/* 7585 */
typedef int qboolean;

/* 7586 */
typedef int HSteamPipe;

/* 7587 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_DMA)(unsigned int *, _NVAPI_D3D9_DMA_PARAMS *);

/* 7588 */
typedef void *(__cdecl *png_malloc_ptr)(png_struct_def *, unsigned int);

/* 7589 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ISENABLED)(char *);

/* 7590 */
typedef char DevMenuChildType;

/* 7591 */
typedef void __cdecl PathNodeCallBack(scriptInstance_t, pathnode_t *);

/* 7592 */
typedef ID3DX10Sprite *LPD3DX10SPRITE;

/* 7593 */
typedef unsigned int phys_gjk_geom_id;

/* 7594 */
typedef void (__cdecl *innovation_unquant_func)(float *, const void *, int, SpeexBits *, char *);

/* 7595 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_OGL_EXPERTMODESET)(unsigned int, unsigned int, unsigned int, void (__cdecl *)(unsigned int, unsigned int, unsigned int, int, const char *));

/* 7596 */
typedef vec4_t ikMat44[4];

/* 7597 */
typedef _DDSCAPS *LPDDSCAPS;

/* 7598 */
typedef int (__stdcall *PFNDACOMPARECONST)(const void *, const void *, int);

/* 7599 */
typedef unsigned __int16 histcell;

/* 7600 */
typedef float spx_mem_t;

/* 7601 */
typedef NvVioHandle__ *NvVioHandle;

/* 7602 */
typedef void (__cdecl *mixerLogicPtr_t)(_mixerLight_t *, cg_t *);

/* 7603 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETCURSORSEPARATION)(void *, float *);

/* 7604 */
typedef __int64 LONGLONG;

/* 7605 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETDRIVERMODE)(_NV_StereoDriverMode);

/* 7606 */
typedef imageDef_s *imageDef_ptr;

/* 7607 */
typedef int yy_state_type;

/* 7608 */
typedef void *bdSemaphoreHandle;

/* 7609 */
typedef char bdByte8;

/* 7610 */
typedef void (__cdecl *AnimStateDefTokenizePropertyCallback)(AnimState *, const char **, char *, const char *);

/* 7611 */
typedef sockaddr *LPSOCKADDR;

/* 7612 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERPOLICIESGETINFO)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_POLICIES_INFO_V1 *);

/* 7613 */
typedef char showCollisionWindingPool_t[12292];

/* 7614 */
typedef unsigned __int16 ADDRESS_FAMILY;

/* 7615 */
typedef png_color_struct *png_colorp;

/* 7616 */
typedef unsigned int QUERY_HANDLE;

/* 7617 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETHDMISUPPORTINFO)(NvDisplayHandle__ *, unsigned int, NV_HDMI_SUPPORT_INFO *);

/* 7618 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEVIDEOEND)(unsigned int *);

/* 7619 */
typedef int (__stdcall *WNDENUMPROC)(HWND__ *, int);

/* 7620 */
typedef char dwInstantMsgType_t;

/* 7621 */
typedef int (__stdcall *PGENRANDOM)(void *, unsigned int);

/* 7622 */
typedef IDirectDrawSurface7 *LPDIRECTDRAWSURFACE7;

/* 7623 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETVIDEOCAPABILITIES)(unsigned int *, _NV_DX_VIDEO_CAPS *);

/* 7624 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_GETSECUREAUDIOAPIREVISION)(unsigned int *);

/* 7625 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETPIXELSHADERCONSTANTB)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 7626 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETPIXELSHADERCONSTANTF)(void *, unsigned int, float *, float *, float *, unsigned int);

/* 7627 */
typedef unsigned int raw_uint;

/* 7628 */
typedef void *bdFileHandle;

/* 7629 */
typedef char stbi_uc;

/* 7630 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETACTIVEEYE)(void *, _NV_StereoActiveEye);

/* 7631 */
typedef _PROCESS_MEMORY_COUNTERS *PPROCESS_MEMORY_COUNTERS;

/* 7632 */
typedef void (__stdcall *BINKCBSUSPEND)(BINKIO *);

/* 7633 */
typedef unsigned __int16 lgrid_coeff_game;

/* 7634 */
typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;

/* 7635 */
typedef void *(__cdecl *curl_realloc_callback)(void *, unsigned int);

/* 7636 */
typedef void (__cdecl *jpeg_external_free_t)(void *);

/* 7637 */
typedef unsigned __int64 ULONGLONG;

/* 7638 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_TRANSFERRENDERTARGETTONV12BLVIDEOSURFACE)(IUnknown *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);

/* 7639 */
typedef tWAVEFORMATEX *LPWAVEFORMATEX;

/* 7640 */
typedef void (__cdecl *_purecall_handler)();

/* 7641 */
typedef float raw_float;

/* 7642 */
typedef __int64 _Longlong;

/* 7643 */
typedef png_info_def **png_infopp;

/* 7644 */
typedef my_post_controller *my_post_ptr;

/* 7645 */
typedef __int64 streamsize;

/* 7646 */
typedef ip_msfilter *PIP_MSFILTER;

/* 7647 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETINDEXBUFFERHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 7648 */
typedef png_info_def *png_infop;

/* 7649 */
typedef scrVarDebugPub_t scrVarDebugPubArray_t[2];

/* 7650 */
typedef int bdInt32;

/* 7651 */
typedef void (__cdecl *ScriptCallbackSentient)(sentient_t *, sentient_fields_s *);

/* 7652 */
typedef png_sPLT_struct *png_sPLT_tp;

/* 7653 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETDISPLAYIDFROMGPUANDOUTPUTID)(NvPhysicalGpuHandle__ *, unsigned int, unsigned int *);

/* 7654 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPSTATESINFOEX)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_PSTATES_INFO_V2 *, unsigned int);

/* 7655 */
typedef _IMAGELIST *HIMAGELIST;

/* 7656 */
typedef char raw_byte128;

/* 7657 */
typedef int png_int_32;

/* 7658 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_I2CREAD)(NvPhysicalGpuHandle__ *, NV_I2C_INFO_V3 *);

/* 7659 */
typedef int (__cdecl *_LIBM_HANDLE_MATHERR_D)(_exception *);

/* 7660 */
typedef void *HGLOBAL;

/* 7661 */
typedef void **LPHANDLE;

/* 7662 */
typedef unsigned __int64 LeagueTeamID;

/* 7663 */
typedef char byte16;

/* 7664 */
typedef NVDX_ObjectHandle__ *NVDX_ObjectHandle;

/* 7665 */
typedef void (__cdecl *innovation_quant_func)(float *, float *, float *, float *, const void *, int, int, float *, float *, SpeexBits *, char *, int, int);

/* 7666 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPSTATECLIENTLIMITS)(NvPhysicalGpuHandle__ *, _NV_PERF_PSTATE_CLIENT_LIMIT_ID, _NV_GPU_PERF_PSTATE_ID);

/* 7667 */
typedef bool (__cdecl *jqDoneAssistingWithBatchesFn)(void *);

/* 7668 */
typedef void *(__stdcall *BINKMEMALLOC)(unsigned int);

/* 7669 */
typedef void *(__cdecl *ActorAnimAlloc)(int);

/* 7670 */
typedef unsigned __int16 wint_t;

/* 7671 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPSTATESINFO)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_PSTATES_INFO_V2 *);

/* 7672 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_CREATEDEVICEANDSWAPCHAIN)(unsigned int *, unsigned int, HINSTANCE__ *, unsigned int, const unsigned int *, unsigned int, unsigned int, const unsigned int *, unsigned int **, unsigned int **, unsigned int *, unsigned int **, NVAPI_DEVICE_FEATURE_LEVEL *);

/* 7673 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_CREATEDEVICEANDSWAPCHAIN)(unsigned int *, unsigned int, HINSTANCE__ *, unsigned int, unsigned int, unsigned int, unsigned int *, unsigned int **, unsigned int **, NVAPI_DEVICE_FEATURE_LEVEL *);

/* 7674 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPSTATECLIENTLIMITS)(NvPhysicalGpuHandle__ *, _NV_PERF_PSTATE_CLIENT_LIMIT_ID, _NV_GPU_PERF_PSTATE_ID *);

/* 7675 */
typedef int utf32_t;

/* 7676 */
typedef int (__cdecl *tdefl_put_buf_func_ptr)(const void *, int, void *);

/* 7677 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETREFRESHRATEOVERRIDE)(NvDisplayHandle__ *, unsigned int, float, unsigned int);

/* 7678 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPSTATESINFO)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_PSTATES_INFO_V2 *);

/* 7679 */
typedef void (__cdecl *NVAPI_OGLEXPERT_CALLBACK)(unsigned int, unsigned int, unsigned int, int, const char *);

/* 7680 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DEBUG_WASLASTDRAWSTEREOIZED)(void *, char *);

/* 7681 */
typedef void (__stdcall *BINKSNDVOLUME)(BINKSND *, int);

/* 7682 */
typedef unsigned int HashIndex;

/* 7683 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DEACTIVATE)(void *);

/* 7684 */
typedef void (__cdecl *fn_controller)(gentity_t *, int *);

/* 7685 */
typedef LIST_ENTRY64 *PLIST_ENTRY64;

/* 7686 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_LOADSETTINGSFROMFILE)(NvDRSSessionHandle__ *, unsigned __int16 *);

/* 7687 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_OPEN)(NvVioHandle__ *, unsigned int, _NVVIOOWNERTYPE);

/* 7688 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_CLOSE)(NvVioHandle__ *, unsigned int);

/* 7689 */
typedef unsigned __int64 D2D1_TAG;

/* 7690 */
typedef int bdDNSHandle;

/* 7691 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_ENUMGRIDTOPOLOGIES)(unsigned int, unsigned int, NV_MOSAIC_GRID_TOPO *, char *);

/* 7692 */
typedef FxEffectDef *FxEffectDefHandle;

/* 7693 */
typedef jpeg_decompress_struct *j_decompress_ptr;

/* 7694 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETALLCLOCKFREQUENCIES)(NvPhysicalGpuHandle__ *, NV_GPU_CLOCK_FREQUENCIES_V2 *);

/* 7695 */
typedef my_marker_writer *my_marker_ptr;

/* 7696 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_GETTHERMALLIMIT)(_NV_GPS_GET_THERMAL_LIMIT_PARM *);

/* 7697 */
typedef float SndFloatAlign16;

/* 7698 */
typedef unsigned __int64 UINT64;

/* 7699 */
typedef unsigned __int64 uint64;

/* 7700 */
typedef jvirt_barray_control *jvirt_barray_ptr;

/* 7701 */
typedef unsigned __int16 LeafBrush;

/* 7702 */
typedef int (__cdecl *R_FrustumSurfacesCallback)(int);

/* 7703 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_QUERYSWAPGROUP)(IUnknown *, unsigned int *, unsigned int *, unsigned int *);

/* 7704 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_SETTHERMALLIMIT)(_NV_GPS_SET_THERMAL_LIMIT_PARM *);

/* 7705 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETCONVERGENCE)(void *, float);

/* 7706 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUBASEDCPUSLEEP)(unsigned int *, unsigned __int64);

/* 7707 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_TRIGGER_ACTIVATION)(void *);

/* 7708 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_SETDISPLAYCONFIG)(unsigned int, _NV_DISPLAYCONFIG_PATH_INFO *, unsigned int);

/* 7709 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_SETHCLONETOPOLOGY)(NV_HCLONE_TOPOLOGY_V1 *);

/* 7710 */
typedef unsigned __int16 ATOM;

/* 7711 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETSURFACEHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 7712 */
typedef char YY_CHAR;

/* 7713 */
typedef _DSBCAPS *LPDSBCAPS;

/* 7714 */
typedef _DSCCAPS *LPDSCCAPS;

/* 7715 */
typedef bool (__cdecl *gdt_remote_action_t)(const char *);

/* 7716 */
typedef void (__cdecl *ScriptCallbackNode)(pathnode_t *, int);

/* 7717 */
typedef z_stream_s *z_streamp;

/* 7718 */
typedef unsigned int NVVIOOWNERID;

/* 7719 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETGAMUTDATA)(unsigned int *, unsigned int, _NV_GAMUT_FORMAT, _NV_GAMUT_METADATA *);

/* 7720 */
typedef int PhysJointId;

/* 7721 */
typedef png_dsort_struct **png_dsortpp;

/* 7722 */
typedef DIPROPHEADER *LPDIPROPHEADER;

/* 7723 */
typedef png_color_struct *png_const_colorp;

/* 7724 */
typedef void (__cdecl *PCCopyImageGenMIPCallback)(void *);

/* 7725 */
typedef tagPALETTEENTRY *LPPALETTEENTRY;

/* 7726 */
typedef setloc_struct *_psetloc_struct;

/* 7727 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETSUPPORTEDMOSAICTOPOLOGIES)(NV_MOSAIC_SUPPORTED_TOPOLOGIES *);

/* 7728 */
typedef contact_manifold_mesh_point **poly_vert_id;

/* 7729 */
typedef ddlRoot_t *ddlRoot_ptr;

/* 7730 */
typedef __int16 *FSERRPTR;

/* 7731 */
typedef long double FLAC__double;

/* 7732 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYFEATURECONFIGDEFAULTS)(NvDisplayHandle__ *, _NV_DISPLAY_FEATURE *);

/* 7733 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATERENDERTARGET)(unsigned int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, int, unsigned int **, NVDX_ObjectHandle__ **);

/* 7734 */
typedef unsigned __int16 FxElemHandle;

/* 7735 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_QUERYACTIVEAPPS)(NvPhysicalGpuHandle__ *, NV_3D_APP_INFO_V2 *, unsigned int *);

/* 7736 */
typedef void *StereoHandle;

/* 7737 */
typedef loadAnim_t playerAnims_t[1024];

/* 7738 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDOUTPUTS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7739 */
typedef png_dsort_struct *png_dsortp;

/* 7740 */
typedef unsigned __int16 u16;

/* 7741 */
typedef unsigned __int16 WORD;

/* 7742 */
typedef unsigned __int16 Word;

/* 7743 */
typedef unsigned __int16 ushort;

/* 7744 */
typedef unsigned __int16 USHORT;

/* 7745 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETINTERFACEVERSIONSTRING)(char *);

/* 7746 */
typedef int (*ODITHER_MATRIX_PTR)[16];

/* 7747 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DELETEPROFILESETTING)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int);

/* 7748 */
typedef WeaponAttachmentUnique *WeaponAttachmentUniqueList[3];

/* 7749 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETHUEANGLE)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 7750 */
typedef const char *png_const_charp;

/* 7751 */
typedef __int16 i16;

/* 7752 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMNVIDIADISPLAYHANDLE)(unsigned int, NvDisplayHandle__ **);

/* 7753 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYSETTINGS)(NvDisplayHandle__ *, NV_DISP_PATH_V2 *, unsigned int *);

/* 7754 */
typedef void (__cdecl *SD_DecoderInterfaceUnlock)(sd_decoder *);

/* 7755 */
typedef unsigned __int16 _U16;

/* 7756 */
typedef my_downsampler *my_downsample_ptr;

/* 7757 */
typedef void (__cdecl *R_ResolutionChangeCallback)(bool);

/* 7758 */
typedef __int16 _Null_type;

/* 7759 */
typedef __m128 *CXMVECTOR;

/* 7760 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 7761 */
typedef unsigned __int16 mz_uint16;

/* 7762 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_INITACTIVATION)(void *, _NVAPI_STEREO_INIT_ACTIVATION_FLAGS);

/* 7763 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENABLECURRENTMOSAICTOPOLOGY)(unsigned int);

/* 7764 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDISPLAYSETTINGS)(NvDisplayHandle__ *, NV_DISP_PATH_V2 *, unsigned int);

/* 7765 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVALIDGPUTOPOLOGIES)(NV_GPU_TOPOLOGIES *, unsigned int *);

/* 7766 */
typedef NvLogicalGpuHandle__ *NvLogicalGpuHandle;

/* 7767 */
typedef _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;

/* 7768 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_SETCOPROCINFOFLAGSEX)(NV_COPROC_FLAGS_EX *);

/* 7769 */
typedef void *(__stdcall *PFNDPAMERGE)(unsigned int, void *, void *, int);

/* 7770 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_SETVERTICALSYNCMODE)(IUnknown *, NVAPI_VSYNC_MODE);

/* 7771 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHVERTICESNV)(unsigned int, const void *);

/* 7772 */
typedef void **PPVOID;

/* 7773 */
typedef char TextureSemantic;

/* 7774 */
typedef void (__cdecl *ScriptCallbackVehicle)(gentity_t *, vehicle_fields_s *);

/* 7775 */
typedef const unsigned __int16 *NvAPI_LPCWSTR;

/* 7776 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURAGETCOOLINGBUDGET)(unsigned int *);

/* 7777 */
typedef int MEMBERID;

/* 7778 */
typedef char gametypesettings_t[3072];

/* 7779 */
typedef GfxWorld *GfxWorldPtr;

/* 7780 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_PRESENT)(IUnknown *, unsigned int *, unsigned int, unsigned int);

/* 7781 */
typedef __int16 nullptr_t;

/* 7782 */
typedef void *LPVOID;

/* 7783 */
typedef WSAData *LPWSADATA;

/* 7784 */
typedef bool (__cdecl *SD_AuxCallback)(float *, unsigned int, unsigned int);

/* 7785 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_NVFBC_GETSTATUS)(void *);

/* 7786 */
typedef int off_t;

/* 7787 */
typedef _cpinfo *LPCPINFO;

/* 7788 */
typedef SndBank *SndBankPtr;

/* 7789 */
typedef unsigned __int16 *LPWORD;

/* 7790 */
typedef void (__stdcall *BINKCBIDLE)(BINKIO *);

/* 7791 */
typedef GameWorldMp *GameWorldMpPtr;

/* 7792 */
typedef unsigned int acc_uintptr_t;

/* 7793 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_GETVPSTATECAP)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7794 */
typedef int HServerQuery;

/* 7795 */
typedef HFONT__ *HFONT;

/* 7796 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_SETVPSTATECAP)(NvPhysicalGpuHandle__ *, unsigned int);

/* 7797 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETPVEXTNAME)(NvDisplayHandle__ *, const char *);

/* 7798 */
typedef void (__cdecl *AnimStateDefSimplePropertyCallback)(AnimState *, int);

/* 7799 */
typedef int LONG;

/* 7800 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTFANSPEEDLEVEL)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL *);

/* 7801 */
typedef int *LPLONG;

/* 7802 */
typedef int (__cdecl *R_BoxSurfacesCallback)(int, void *);

/* 7803 */
typedef int (__cdecl *_PNH)(unsigned int);

/* 7804 */
typedef WeaponAttachment *WeaponAttachmentList[3];

/* 7805 */
typedef unsigned int (__stdcall *BINKIOGETBUFFERSIZE)(BINKIO *, unsigned int);

/* 7806 */
typedef sd_decoder_state (__cdecl *SD_DecoderInterfaceFree)(sd_decoder *);

/* 7807 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPVEXTNAME)(NvDisplayHandle__ *, char *);

/* 7808 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_PROCESSCALLBACKS)(unsigned int *, unsigned int);

/* 7809 */
typedef int FxElemDefFlags;

/* 7810 */
typedef __int64 time_t;

/* 7811 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETFRUSTUMADJUSTMODE)(void *, _NV_FrustumAdjustMode);

/* 7812 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_HANDSHAKE_TRIGGER_ACTIVATION)(void *);

/* 7813 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETERRORMESSAGE)(_NvAPI_Status, char *);

/* 7814 */
typedef float spx_coef_t;

/* 7815 */
typedef unsigned int SndAliasId;

/* 7816 */
typedef unsigned int THREAD_ID;

/* 7817 */
typedef const char *_tagPSUACTION[5];

/* 7818 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_GETCOPROCSTATUS)(unsigned int *, NV_COPROC_STATE *);

/* 7819 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETVERTEXSHADERCONSTANTI)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 7820 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETCURRENTTOPO)(NV_MOSAIC_TOPO_BRIEF *, NV_MOSAIC_DISPLAY_SETTING *, int *, int *);

/* 7821 */
typedef NvUnAttachedDisplayHandle__ *NvUnAttachedDisplayHandle;

/* 7822 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETVERTEXSHADERCONSTANTB)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 7823 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_I2CWRITE)(NvPhysicalGpuHandle__ *, NV_I2C_INFO_V3 *);

/* 7824 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETVERTEXSHADERCONSTANTF)(void *, unsigned int, float *, float *, float *, unsigned int);

/* 7825 */
typedef _FILETIME *LPFILETIME;

/* 7826 */
typedef char CHAR;

/* 7827 */
typedef float vec_t;

/* 7828 */
typedef NV_EVENT_REGISTER_CALLBACK *PNV_EVENT_REGISTER_CALLBACK;

/* 7829 */
typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK7)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *);

/* 7830 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETAGPAPERTURE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7831 */
typedef int PhysObjId;

/* 7832 */
typedef _RTL_CRITICAL_SECTION *PCRITICAL_SECTION;

/* 7833 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_VALIDATEDISPLAYGRIDSWITHSLI)(NV_GPU_TOPOLOGIES *, NV_MOSAIC_GRID_TOPO *, NV_MOSAIC_DISPLAY_TOPO_STATUS *, unsigned int);

/* 7834 */
typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK)(IDirectDrawSurface *, _DDSURFACEDESC *, void *);

/* 7835 */
typedef unsigned int raw_uint128;

/* 7836 */
typedef void (__cdecl *_se_translator_function)(unsigned int, _EXCEPTION_POINTERS *);

/* 7837 */
typedef my_comp_master *my_master_ptr;

/* 7838 */
typedef void **PHANDLE;

/* 7839 */
typedef IDirectSoundCapture *LPDIRECTSOUNDCAPTURE;

/* 7840 */
typedef MapEnts *MapEntsPtr;

/* 7841 */
typedef float spx_lsp_t;

/* 7842 */
typedef char *(__cdecl *GetParameter_t)(int);

/* 7843 */
typedef DIDEVICEINSTANCEA *LPDIDEVICEINSTANCEA;

/* 7844 */
typedef unsigned int ub4;

/* 7845 */
typedef char ub1;

/* 7846 */
typedef void (__cdecl *MigrationMessageHandler)(ClientNum_t, msg_t *);

/* 7847 */
typedef void *(__cdecl *SND_FindRow)(unsigned int);

/* 7848 */
typedef int FxTriGroupHandle;

/* 7849 */
typedef int (__cdecl *R_BoxStaticModelsCallback)(int);

/* 7850 */
typedef int (__stdcall *BINKSNDLOCK)(BINKSND *, char **, unsigned int *);

/* 7851 */
typedef int (__stdcall *MINIDUMP_CALLBACK_ROUTINE)(void *, _MINIDUMP_CALLBACK_INPUT *, _MINIDUMP_CALLBACK_OUTPUT *);

/* 7852 */
typedef void (__stdcall *BINKCBSIMULATE)(BINKIO *, unsigned int, unsigned int);

/* 7853 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_SETUPTARGETBUFFERTOSYS)(unsigned int *, NVFBC_BUFFER_FORMAT, unsigned int, char **);

/* 7854 */
typedef char charf;

/* 7855 */
typedef __int16 bdInt16;

/* 7856 */
typedef char *voidp;

/* 7857 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_INFOFRAMECONTROL)(unsigned int, NV_INFOFRAME_DATA *);

/* 7858 */
typedef _STARTUPINFOW *LPSTARTUPINFOW;

/* 7859 */
typedef char raw_byte;

/* 7860 */
typedef int (__stdcall *PFNDACOMPARE)(void *, void *, int);

/* 7861 */
typedef void *(__cdecl *AnimStateDefAlloc)(int);

/* 7862 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_RESETFRAMECOUNT)(unsigned int *);

/* 7863 */
typedef _MINIDUMP_CALLBACK_INFORMATION *PMINIDUMP_CALLBACK_INFORMATION;

/* 7864 */
typedef void (__cdecl *curl_free_callback)(void *);

/* 7865 */
typedef char byte64;

/* 7866 */
typedef char MemoryBlockByte;

/* 7867 */
typedef __int64 INT64;

/* 7868 */
typedef __int64 int64;

/* 7869 */
typedef void (__cdecl *png_write_status_ptr)(png_struct_def *, unsigned int, int);

/* 7870 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETDRIVERANDBRANCHVERSION)(unsigned int *, char *);

/* 7871 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVIRTUALFRAMEBUFFERSIZE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7872 */
typedef int intf;

/* 7873 */
typedef int (__stdcall *PFLS_SETVALUE_FUNCTION)(unsigned int, void *);

/* 7874 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_CREATECONFIGURATIONPROFILEREGISTRYKEY)(_NV_StereoRegistryProfileType);

/* 7875 */
typedef unsigned __int64 TaskCategory;

/* 7876 */
typedef WeaponAttachment *WeaponAttachmentPtr;

/* 7877 */
typedef my_color_converter *my_cconvert_ptr;

/* 7878 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SETPROFILEINFO)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_PROFILE *);

/* 7879 */
typedef int FxPointGroupHandle;

/* 7880 */
typedef GfxHullPointsPool GfxHullPointsPoolArray[256];

/* 7881 */
typedef MaterialPixelShader *MaterialPixelShaderPtr;

/* 7882 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_SETRESOURCEHINT)(IUnknown *, NVDX_ObjectHandle__ *, _NVAPI_D3D_SETRESOURCEHINT_CATEGORY, unsigned int, unsigned int *);

/* 7883 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETTEXTUREHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 7884 */
typedef XModel *XModelPtr;

/* 7885 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETPROFILEINFO)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_PROFILE *);

/* 7886 */
typedef _PROCESS_INFORMATION *LPPROCESS_INFORMATION;

/* 7887 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_3D_GETPROPERTYRANGE)(char *, NV_3D_SETTING_RANGE *);

/* 7888 */
typedef unsigned int DXGI_USAGE;

/* 7889 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYBLANKINGSTATE)(unsigned int, _NV_DISPLAY_BLANKING_INFO_V1 *);

/* 7890 */
typedef unsigned __int16 uint16;

/* 7891 */
typedef unsigned __int16 UINT16;

/* 7892 */
typedef char *STRSAFE_LPSTR;

/* 7893 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SETSETTING)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_SETTING *);

/* 7894 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_QUERYUNDERSCANCAP)(NvDisplayHandle__ *, unsigned int, NV_UNDERSCAN_CAP *);

/* 7895 */
typedef void (__cdecl *fn_reached)(gentity_t *);

/* 7896 */
typedef unsigned int TP_VERSION;

/* 7897 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETSETTING)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int, _NVDRS_SETTING *);

/* 7898 */
typedef void (__cdecl *SD_DecoderInterfaceInit)();

/* 7899 */
typedef char ***JSAMPIMAGE;

/* 7900 */
typedef unsigned __int16 ChildVarIndex;

/* 7901 */
typedef unsigned __int16 FxTrailHandle;

/* 7902 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_GETPERFSENSORS)(_NV_GPS_GET_PERF_SENSOR_COUNTERS_PARAM_V1 *);

/* 7903 */
typedef unsigned int (__cdecl *mz_file_write_func)(void *, unsigned __int64, const void *, unsigned int);

/* 7904 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDISPLAYFEATURECONFIG)(NvDisplayHandle__ *, _NV_DISPLAY_FEATURE);

/* 7905 */
typedef unsigned __int64 UGCHandle_t;

/* 7906 */
typedef _DSCBUFFERDESC *LPCDSCBUFFERDESC;

/* 7907 */
typedef sockaddr_in *LPSOCKADDR_IN;

/* 7908 */
typedef unsigned int objBufEntryArray[2048][31];

/* 7909 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYFEATURECONFIG)(NvDisplayHandle__ *, _NV_DISPLAY_FEATURE *);

/* 7910 */
typedef long double DOUBLE;

/* 7911 */
typedef unsigned __int16 XBlendInfo;

/* 7912 */
typedef jvirt_sarray_control *jvirt_sarray_ptr;

/* 7913 */
typedef png_sPLT_struct *png_const_sPLT_tp;

/* 7914 */
typedef _DDSURFACEDESC2 *LPDDSURFACEDESC2;

/* 7915 */
typedef bool (__cdecl *pmove_getEntityVelocity)(LocalClientNum_t, int, vec3_t *);

/* 7916 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_GETCURRENTSLISTATE)(IUnknown *, NV_GET_CURRENT_SLI_STATE *);

/* 7917 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETHUEINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_HUE_INFO *);

/* 7918 */
typedef unsigned __int64 bdUserGroupID;

/* 7919 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETHDCPSUPPORTSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_GET_HDCP_SUPPORT_STATUS *);

/* 7920 */
typedef void (__stdcall *BINKSNDPAN)(BINKSND *, int);

/* 7921 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETTOPOGROUP)(NV_MOSAIC_TOPO_BRIEF *, NV_MOSAIC_TOPO_GROUP *);

/* 7922 */
typedef unsigned int JDIMENSION;

/* 7923 */
typedef textExp_s *textExp_ptr;

/* 7924 */
typedef _MINIDUMP_EXCEPTION_INFORMATION *PMINIDUMP_EXCEPTION_INFORMATION;

/* 7925 */
typedef char uch;

/* 7926 */
typedef unsigned __int16 ush;

/* 7927 */
typedef _CTL_INFO *PCTL_INFO;

/* 7928 */
typedef IDirectSound *LPDIRECTSOUND;

/* 7929 */
typedef void (__cdecl *Stream_FileReadCallback)(int, stream_status, unsigned int, void *);

/* 7930 */
typedef unsigned int size_t;

/* 7931 */
typedef unsigned int SIZE_T;

/* 7932 */
typedef unsigned int clipHandle_t;

/* 7933 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_SETPRIMARYFLIPCHAINCALLBACKS)(unsigned int *, NVAPI_FLIP_CHAIN_CALLBACK_PARAMS *);

/* 7934 */
typedef void CURLM;

/* 7935 */
typedef DestructibleDef *DestructibleDefPtr;

/* 7936 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDOUTPUTSWITHLIDSTATE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7937 */
typedef char *list_t[65536];

/* 7938 */
typedef int (__stdcall *BINKCBTRYSUSPEND)(BINKIO *);

/* 7939 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ISRUNNING)(NvVioHandle__ *);

/* 7940 */
typedef void (__cdecl *ScriptCallback)(centity_t *, cent_field_s *);

/* 7941 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSYSTEMTYPE)(NvPhysicalGpuHandle__ *, NV_SYSTEM_TYPE *);

/* 7942 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETBASEPROFILE)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ **);

/* 7943 */
typedef int FLAC__bool;

/* 7944 */
typedef __int16 VARIANT_BOOL;

/* 7945 */
typedef NvDRSSessionHandle__ *NvDRSSessionHandle;

/* 7946 */
typedef void (__cdecl *unexpected_function)();

/* 7947 */
typedef int S32;

/* 7948 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETINFOFRAMESTATE)(NvDisplayHandle__ *, unsigned int, _NV_INFOFRAME_TYPE, _NV_INFOFRAME_STATE *);

/* 7949 */
typedef unsigned int u32;

/* 7950 */
typedef unsigned int U32;

/* 7951 */
typedef char TracerColor[4];

/* 7952 */
typedef int (__cdecl *R_FrustumStaticModelsCallback)(int);

/* 7953 */
typedef XModelPieces *XModelPiecesPtr;

/* 7954 */
typedef unsigned int checksum_t;

/* 7955 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETINFOFRAMESTATE)(NvDisplayHandle__ *, unsigned int, _NV_INFOFRAME_TYPE, _NV_INFOFRAME_STATE *);

/* 7956 */
typedef void CURL;

/* 7957 */
typedef _INTERNET_BUFFERSA *LPINTERNET_BUFFERSA;

/* 7958 */
typedef void __cdecl MarkFragmentCallback(void *, int, FxMarkTri *, int, FxMarkPoint *, vec3_t *, vec3_t *);

/* 7959 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETTVOUTPUTINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_TV_OUTPUT_INFO *);

/* 7960 */
typedef float F32;

/* 7961 */
typedef int i32;

/* 7962 */
typedef enumDvarDef_s *enumDvarDef_ptr;

/* 7963 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETFULLNAME)(NvPhysicalGpuHandle__ *, char *);

/* 7964 */
typedef int _TINT;

/* 7965 */
typedef unsigned __int16 hist1d[32];

/* 7966 */
typedef unsigned __int16 Posf;

/* 7967 */
typedef unsigned __int16 (*hist2d)[32];

/* 7968 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETSTEREOCAPS)(_NVAPI_STEREO_CAPS *);

/* 7969 */
typedef unsigned __int16 (**hist3d)[32];

/* 7970 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_BINDSWAPBARRIER)(IUnknown *, unsigned int, unsigned int);

/* 7971 */
typedef void (__cdecl *lsp_unquant_func)(float *, int, SpeexBits *);

/* 7972 */
typedef bool __thiscall FLAC__StreamDecoderProtected(bdFastArray<__int64> *this, const unsigned int, const __int64 *);

/* 7973 */
typedef unsigned int *PUINT_PTR;

/* 7974 */
typedef char *WICInProcPointer;

/* 7975 */
typedef unsigned __int16 *histptr;

/* 7976 */
typedef unsigned int mz_uint32;

/* 7977 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETSURFACECREATIONLAYOUT)(unsigned int *, _NVAPI_SURFACE_LAYOUT_STRUCT *);

/* 7978 */
typedef _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE;

/* 7979 */
typedef int bdInt;

/* 7980 */
typedef colgeom_visitor_inlined_t<300> *(__cdecl *get_vehicle_proximity_cache)(LocalClientNum_t, playerState_s *);

/* 7981 */
typedef unsigned int bdUInt32;

/* 7982 */
typedef unsigned __int16 DB_InuseCacheData[16384];

/* 7983 */
typedef DIDEVICEOBJECTINSTANCEA *LPDIDEVICEOBJECTINSTANCEA;

/* 7984 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_OVERRIDEDISPLAYMODELIST)(unsigned int, unsigned int, _NV_DISPLAY_MODE_INFO *, unsigned int);

/* 7985 */
typedef char ByteVec[3];

/* 7986 */
typedef tagLC_ID *LPLC_ID;

/* 7987 */
typedef int (__stdcall *BINKSNDONOFF)(BINKSND *, int);

/* 7988 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISABLEHWCURSOR)(NvDisplayHandle__ *);

/* 7989 */
typedef char byte256;

/* 7990 */
typedef _DSCAPS *LPDSCAPS;

/* 7991 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCINIT)(unsigned int *, void *);

/* 7992 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTOTALSMCOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 7993 */
typedef scr_animtree_t scriptmoveranim_trees_t[16];

/* 7994 */
typedef void (__stdcall *BINKIOCLOSE)(BINKIO *);

/* 7995 */
typedef unsigned __int64 PublishedFileId_t;

/* 7996 */
typedef __int16 SHORT;

/* 7997 */
typedef png_text_struct *png_textp;

/* 7998 */
typedef unsigned int HUNKUSER_FLAGS;

/* 7999 */
typedef unsigned int brword;

/* 8000 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ENABLE)();

/* 8001 */
typedef EmblemSet *EmblemSetPtr;

/* 8002 */
typedef void (__cdecl *GamePadCallback)(ControllerIndex_t);

/* 8003 */
typedef _DSCBCAPS *LPDSCBCAPS;

/* 8004 */
typedef char byte4096;

/* 8005 */
typedef int (__stdcall *PHANDLER_ROUTINE)(unsigned int);

/* 8006 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_SETUPTARGETBUFFERTONV12BLVIDEOSURFACE)(unsigned int *, unsigned int, void **, unsigned int, unsigned int);

/* 8007 */
typedef int (__cdecl *ltp_quant_func)(float *, float *, float *, float *, float *, float *, const void *, int, int, float, int, int, SpeexBits *, char *, float *, float *, int, int, int);

/* 8008 */
typedef int fileHandle_t;

/* 8009 */
typedef SkinnedVertsDef *SkinnedVertsDefPtr;

/* 8010 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_SETUPTARGETBUFFERTONV12BLVIDEOSURFACE)(IUnknown *, unsigned int, void **, unsigned int, unsigned int);

/* 8011 */
typedef unsigned int SndStringHash;

/* 8012 */
typedef _tagADDRESS64 *LPADDRESS64;

/* 8013 */
typedef void (__cdecl *phys_debug_callback_t)(void *);

/* 8014 */
typedef my_input_controller *my_inputctl_ptr;

/* 8015 */
typedef void (__cdecl *SpawnFuncCallback)(gentity_t *, SpawnVar *);

/* 8016 */
typedef _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;

/* 8017 */
typedef PhysPreset *PhysPresetPtr;

/* 8018 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_LOADSETTINGS)(NvDRSSessionHandle__ *);

/* 8019 */
typedef int (__cdecl *weapon_anim_time)(Weapon);

/* 8020 */
typedef _CTL_CONTEXT *PCCTL_CONTEXT;

/* 8021 */
typedef large_pool_struct *large_pool_ptr;

/* 8022 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETLOGICALGPUFROMDISPLAY)(NvDisplayHandle__ *, NvLogicalGpuHandle__ **);

/* 8023 */
typedef void (__cdecl *ClipVelocityFunc)(vec3_t *, vec3_t *, vec3_t *);

/* 8024 */
typedef bool (__cdecl *FX_DrawElemCullHandler)(FxDrawState *, FxElemRenderState *);

/* 8025 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMAVAILABLESETTINGVALUES)(unsigned int, unsigned int *, _NVDRS_SETTING_VALUES *);

/* 8026 */
typedef unsigned int bdUInt;

/* 8027 */
typedef unsigned __int64 tlThreadId;

/* 8028 */
typedef _WSAPROTOCOL_INFOA *LPWSAPROTOCOL_INFOA;

/* 8029 */
typedef void *(__cdecl *decoder_init_func)(SpeexMode *);

/* 8030 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETCURSORSEPARATION)(void *, float);

/* 8031 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_BEGINSHARERESOURCE)(unsigned int *, void **);

/* 8032 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_BEGINSHARERESOURCE)(unsigned int *, unsigned int, void **);

/* 8033 */
typedef _strflt *STRFLT;

/* 8034 */
typedef unsigned int AppId_t;

/* 8035 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_ENUMHDMISTEREOMODES)(NV_HDMI_STEREO_MODES_LIST_V1 *);

/* 8036 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_QUERYNONMIGRATABLEAPPS)(NV_3D_APP_INFO_V2 *, unsigned int *);

/* 8037 */
typedef bool (__cdecl *SD_DecoderInterfaceBufferComplete)(sd_decoder *, const void *);

/* 8038 */
typedef _flt *FLT;

/* 8039 */
typedef unsigned int ulg;

/* 8040 */
typedef char uchf;

/* 8041 */
typedef png_time_struct *png_timep;

/* 8042 */
typedef void (__cdecl *CS_Free_t)(void *, int);

/* 8043 */
typedef unsigned __int16 ushf;

/* 8044 */
typedef unsigned int yy_size_t;

/* 8045 */
typedef void (__cdecl *png_read_status_ptr)(png_struct_def *, unsigned int, int);

/* 8046 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHDEPTHNV)(unsigned int, float);

/* 8047 */
typedef int (__cdecl *pmove_isEntWalkable)(LocalClientNum_t, const int);

/* 8048 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ALIASPRIMARYFROMDEVICE)(unsigned int *, unsigned int *, unsigned int, unsigned int **, NVDX_ObjectHandle__ **);

/* 8049 */
typedef char FLAC__byte;

/* 8050 */
typedef unsigned int *png_uint_32p;

/* 8051 */
typedef _iobuf *png_FILE_p;

/* 8052 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_DPAUXCHANNELCONTROL)(NvDisplayHandle__ *, _NV_DPCD_PARAMS_V2 *, unsigned int);

/* 8053 */
typedef png_color_8_struct *png_color_8p;

/* 8054 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_CHOOSEGPUTOPOLOGIES)(NV_MOSAIC_GRID_TOPO *, unsigned int, unsigned int, NV_GPU_TOPOLOGIES *);

/* 8055 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DELETECONFIGURATIONPROFILEREGISTRYKEY)(_NV_StereoRegistryProfileType);

/* 8056 */
typedef char MaterialStreamDest;

/* 8057 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETSURFACECREATIONMODE)(void *, _NVAPI_STEREO_SURFACECREATEMODE *);

/* 8058 */
typedef void (__cdecl *_Prhand)(stdext::exception *);

/* 8059 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETILLUMINATION)(_NV_GPU_SET_ILLUMINATION_PARM_V1 *);

/* 8060 */
typedef const wchar_t *LPCOLESTR;

/* 8061 */
typedef _DDBLTFX *LPDDBLTFX;

/* 8062 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_ENABLECURRENTTOPO)(unsigned int);

/* 8063 */
typedef flameTable *flameTablePtr;

/* 8064 */
typedef _DDOVERLAYFX *LPDDOVERLAYFX;

/* 8065 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_WORKSTATIONFEATUREQUERY)(NvPhysicalGpuHandle__ *, unsigned int *, unsigned int *);

/* 8066 */
typedef tagDDDEVICEIDENTIFIER2 *LPDDDEVICEIDENTIFIER2;

/* 8067 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETLIDANDDOCKINFO)(NV_LID_DOCK_PARAMS *);

/* 8068 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETMOSAICVIEWPORTS)(NV_MOSAIC_GRID_TOPO *, unsigned int, unsigned int, char, unsigned int *, unsigned int *, _NV_RECT *);

/* 8069 */
typedef __int64 bdChallengeResponse;

/* 8070 */
typedef unsigned int UINT_PTR;

/* 8071 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_CREATEAPPLICATION)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_APPLICATION_V2 *);

/* 8072 */
typedef int FLAC__int32;

/* 8073 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETILLUMINATION)(_NV_GPU_GET_ILLUMINATION_PARM_V1 *);

/* 8074 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_OGL_EXPERTMODEDEFAULTSGET)(unsigned int *, unsigned int *, unsigned int *);

/* 8075 */
typedef unsigned int *PDWORD_PTR;

/* 8076 */
typedef int (__stdcall *PFNDAENUMCALLBACK)(void *, void *);

/* 8077 */
typedef IDirectDrawPalette *LPDIRECTDRAWPALETTE;

/* 8078 */
typedef sockaddr_in6_w2ksp1 *PSOCKADDR_IN6;

/* 8079 */
typedef unsigned __int64 bdEntityID;

/* 8080 */
typedef group_filter *PGROUP_FILTER;

/* 8081 */
typedef unsigned __int16 png_uint_16;

/* 8082 */
typedef void (__cdecl *DrawMiscFunction)(GfxViewInfo *, GfxCmdBuf *);

/* 8083 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ENUMDEVICES)(NvVioHandle__ **, unsigned int *);

/* 8084 */
typedef unsigned __int16 UnsignedShort;

/* 8085 */
typedef void (__cdecl *terminate_function)();

/* 8086 */
typedef const unsigned int *png_const_uint_32p;

/* 8087 */
typedef unsigned __int16 ModelLightingDest;

/* 8088 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_SETDISPLAYGRIDS)(NV_MOSAIC_GRID_TOPO *, unsigned int, unsigned int);

/* 8089 */
typedef char _TSCHAR;

/* 8090 */
typedef _DDBLTBATCH *LPDDBLTBATCH;

/* 8091 */
typedef _MINIDUMP_USER_STREAM_INFORMATION *PMINIDUMP_USER_STREAM_INFORMATION;

/* 8092 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_ENABLEDYNAMICPSTATES)(NvPhysicalGpuHandle__ *, char);

/* 8093 */
typedef void (__cdecl *_PVFI)(int);

/* 8094 */
typedef ID3D11Query *GfxOcclusionQuery;

/* 8095 */
typedef float __cdecl PerfTimerConvertFunc(unsigned int);

/* 8096 */
typedef int (__cdecl *parseMergeSpecialCase_t)(const char *, char **, char *, int);

/* 8097 */
typedef void (__cdecl *fn_entinfo)(gentity_t *, vec3_t *);

/* 8098 */
typedef char int8;

/* 8099 */
typedef char INT8;

/* 8100 */
typedef FxImpactTable *FxImpactTablePtr;

/* 8101 */
typedef unsigned int D3D10_DRIVER_TYPE;

/* 8102 */
typedef void (__cdecl *_PVFV)();

/* 8103 */
typedef png_struct_def **png_structpp;

/* 8104 */
typedef int mp_err;

/* 8105 */
typedef unsigned int (__stdcall *BINKIOIDLE)(BINKIO *);

/* 8106 */
typedef unsigned __int64 SteamLeaderboardEntries_t;

/* 8107 */
typedef tagMONITORINFO *LPMONITORINFO;

/* 8109 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS;

/* 8110 */
typedef int (__stdcall *PFNDAENUMCALLBACKCONST)(const void *, void *);

/* 8111 */
typedef float FLOAT_MULT_TYPE;

/* 8112 */
typedef unsigned __int16 StaticModelIndex;

/* 8113 */
typedef unsigned int bdULong;

/* 8114 */
typedef __int16 SWord;

/* 8115 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPHYSICALGPUFROMUNATTACHEDDISPLAY)(NvUnAttachedDisplayHandle__ *, NvPhysicalGpuHandle__ **);

/* 8116 */
typedef char _TUCHAR;

/* 8117 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_VALIDATEHCLONETOPOLOGY)(NV_HCLONE_TOPOLOGY_V1 *, unsigned int *);

/* 8118 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GPIOREADFROMPIN)(NvPhysicalGpuHandle__ *, NV_GPU_GPIO_PIN_DATA *);

/* 8119 */
typedef const char *TempString;

/* 8120 */
typedef bot_t bot_array_t[18];

/* 8121 */
typedef int AttachmentMask;

/* 8122 */
typedef textDef_s *textDef_ptr;

/* 8123 */
typedef unsigned int bdGiftID;

/* 8124 */
typedef void (__stdcall *PFN_EXIT_PROCESS)(unsigned int);

/* 8125 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETDITHERCONTROL)(unsigned int, _NV_GPU_DITHER_CONTROL_V1 *);

/* 8126 */
typedef int spx_int32_t;

/* 8127 */
typedef bool __thiscall FLAC__StreamDecoderPrivate(bdFastArray<__int64> *this, const unsigned int);

/* 8128 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_FINDAPPLICATIONBYNAME)(NvDRSSessionHandle__ *, unsigned __int16 *, NvDRSProfileHandle__ **, _NVDRS_APPLICATION_V2 *);

/* 8129 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETDITHERCONTROL)(NvPhysicalGpuHandle__ *, unsigned int, _NVAPI_DITHER_TYPE, _NVAPI_DITHER_BITS, _NVAPI_DITHER_MODE);

/* 8130 */
typedef unsigned int GfxRawStateBits[2];

/* 8131 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETALLOUTPUTS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8132 */
typedef void (__cdecl *PartyMessageHandler)(PartyData_s *, ControllerIndex_t, netadr_t, msg_t *);

/* 8133 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYVIDEOINFO)(unsigned int *, _NVAPI_DX_QUERY_VIDEO_INFO *);

/* 8134 */
typedef float spx_word16_t;

/* 8135 */
typedef unsigned int (__stdcall *BINKCBLOCKEDADD)(volatile unsigned int *, int);

/* 8136 */
typedef XAssetEntryPoolEntry XAssetEntryPool[38400];

/* 8137 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DESTROYSESSION)(NvDRSSessionHandle__ *);

/* 8138 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_RESETFRAMECOUNT)(IUnknown *);

/* 8139 */
typedef char *(__cdecl *resample_row_func)(char *, char *, char *, int, int);

/* 8140 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PRESENT)(unsigned int *, unsigned int *, tagRECT *, tagRECT *, HWND__ *, _RGNDATA *);

/* 8141 */
typedef int mz_bool;

/* 8142 */
typedef void (__cdecl *fn_pain)(gentity_t *, gentity_t *, int, vec3_t *, const int, vec3_t *, hitLocation_t, Weapon);

/* 8143 */
typedef GfxImage *GfxImagePtr;

/* 8144 */
typedef int (__cdecl *tinfl_put_buf_func_ptr)(const void *, int, void *);

/* 8145 */
typedef HINSTANCE__ *HMODULE;

/* 8146 */
typedef my_cquantizer *my_cquantize_ptr;

/* 8147 */
typedef void *stream_platform_handle;

/* 8148 */
typedef void (__cdecl *png_flush_ptr)(png_struct_def *);

/* 8149 */
typedef unsigned int (__stdcall *LPTHREAD_START_ROUTINE)(void *);

/* 8150 */
typedef int jmp_buf[16];

/* 8151 */
typedef profileMultiDef_s *profileMultiDef_ptr;

/* 8152 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETGPUANDOUTPUTIDFROMDISPLAYID)(unsigned int, NvPhysicalGpuHandle__ **, unsigned int *);

/* 8153 */
typedef int CompositeJobID;

/* 8154 */
typedef StringTable *StringTablePtr;

/* 8155 */
typedef void (__stdcall *BINKIOSETINFO)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);

/* 8156 */
typedef char snapshot_key_t[8192];

/* 8157 */
typedef NvDisplayHandle__ *NvDisplayHandle;

/* 8158 */
typedef int (__cdecl *collide_entity_func_ptr)(int);

/* 8159 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_BINDSWAPBARRIER)(unsigned int *, unsigned int, unsigned int);

/* 8160 */
typedef char cachedStatsMsgBuf_t[64];

/* 8161 */
typedef int *_Bool_type;

/* 8162 */
typedef unsigned int *PULONG_PTR;

/* 8163 */
typedef const char *PCSTR;

/* 8164 */
typedef char *POINTER;

/* 8165 */
typedef unsigned int (__stdcall *BINKIOREADHEADER)(BINKIO *, int, void *, unsigned int);

/* 8166 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETFLATPANELINFO)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_FLAT_PANEL_INFO *);

/* 8167 */
typedef volatile int FxVolatileInt;

/* 8168 */
typedef char u_char;

/* 8169 */
typedef ID3D11Buffer *GfxVertexBuffer;

/* 8170 */
typedef long double bdFloat64;

/* 8171 */
typedef DIDEVCAPS *LPDIDEVCAPS;

/* 8172 */
typedef void *(__cdecl *LPNVAPIQUERYINTERFACE)(unsigned int);

/* 8173 */
typedef void (__cdecl *free_func)(char *, char *);

/* 8174 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATETEXTURE)(unsigned int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int **, NVDX_ObjectHandle__ **);

/* 8175 */
typedef int (__cdecl *OUTPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

/* 8176 */
typedef unsigned int SNetListenSocket_t;

/* 8177 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_I2CREADEX)(NvPhysicalGpuHandle__ *, NV_I2C_INFO_V3 *, NV_I2C_INFO_EX *);

/* 8178 */
typedef HRESULT (__stdcall *LPDIRECTDRAWENUMERATEEXA)(int (__stdcall *)(_GUID *, char *, char *, void *, HMONITOR__ *), void *, unsigned int);

/* 8179 */
typedef unsigned int PhysicalItemId_t;

/* 8180 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_TRANSFERRENDERTARGET)(IUnknown *, void **, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);

/* 8181 */
typedef void (__cdecl *SD_DecoderInterfaceShutdown)();

/* 8182 */
typedef __int16 _I16;

/* 8183 */
typedef int gjk_contents_t;

/* 8184 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SYNCFORMATDETECT)(NvVioHandle__ *, unsigned int *);

/* 8185 */
typedef char SByte;

/* 8186 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSCANOUTCONFIGURATION)(unsigned int, NvSBox *, NvSBox *);

/* 8187 */
typedef char *PBYTE;

/* 8188 */
typedef _GUID *LPCLSID;

/* 8189 */
typedef char GfxSamplerState;

/* 8190 */
typedef unsigned int spx_uint32_t;

/* 8191 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_HYBRID_QUERYUNBLOCKEDNONMIGRATABLEAPPS)(NV_HYBRID_APP_INFO *, unsigned int *);

/* 8192 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETECCCONFIGURATIONINFO)(NvPhysicalGpuHandle__ *, NV_GPU_ECC_CONFIGURATION_INFO *);

/* 8193 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_STATUS)(NvVioHandle__ *, _NVVIOSTATUS *);

/* 8194 */
typedef unsigned __int16 uint16_t;

/* 8195 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMPROFILES)(NvDRSSessionHandle__ *, unsigned int, NvDRSProfileHandle__ **);

/* 8196 */
typedef _EH4_EXCEPTION_REGISTRATION_RECORD *PEH4_EXCEPTION_REGISTRATION_RECORD;

/* 8197 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ACTIVATE)(void *);

/* 8198 */
typedef jpeg_compress_struct *j_compress_ptr;

/* 8199 */
typedef unsigned __int64 AssetClassId_t;

/* 8200 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETVIDEOSTATE)(unsigned int *, _NVAPI_SET_VIDEO_STATE_COMPONENT *);

/* 8201 */
typedef unsigned int *LPDWORD;

/* 8202 */
typedef bool (__cdecl *SD_VcsCallback)(float *, unsigned int, unsigned int, bool *);

/* 8203 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETBUSSLOTID)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8204 */
typedef int SndPlaybackId;

/* 8205 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPVEXTPROFILE)(NvDisplayHandle__ *, unsigned int *);

/* 8206 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETSUPPORTEDTOPOINFO)(NV_MOSAIC_SUPPORTED_TOPO_INFO *, NV_MOSAIC_TOPO_TYPE);

/* 8207 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETPVEXTPROFILE)(NvDisplayHandle__ *, unsigned int);

/* 8208 */
typedef char bdNChar8;

/* 8209 */
typedef DIPROPHEADER *LPCDIPROPHEADER;

/* 8210 */
typedef unsigned __int16 NvU16;

/* 8211 */
typedef void (__cdecl *decoder_destroy_func)(void *);

/* 8212 */
typedef unsigned __int64 ULONG64;

/* 8213 */
typedef unsigned __int64 ulong64;

/* 8214 */
typedef unsigned int DWORD_PTR;

/* 8215 */
typedef unsigned int *intrnman;

/* 8216 */
typedef char FxPPUActionType;

/* 8217 */
typedef unsigned int uLongf;

/* 8218 */
typedef char NvAPI_ShortString[64];

/* 8219 */
typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;

/* 8220 */
typedef png_unknown_chunk_t *png_unknown_chunkp;

/* 8221 */
typedef gentity_t g_entities_array_t[1024];

/* 8222 */
typedef void (__cdecl *modifiedCallback)(dvar_t *);

/* 8223 */
typedef void (__cdecl *SD_DecoderInterfaceLock)(sd_decoder *);

/* 8224 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCGETHANDLESIZE)(unsigned int *, unsigned int *, unsigned int *);

/* 8225 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYIDBYDISPLAYNAME)(const char *, unsigned int *);

/* 8226 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_LOCK)(unsigned int *, NVDX_ObjectHandle__ *, unsigned int, void **, unsigned int *);

/* 8227 */
typedef void (__cdecl *PPS_POST_PROCESS_INIT_ROUTINE)();

/* 8228 */
typedef char char_align128;

/* 8229 */
typedef int ISLOW_MULT_TYPE;

/* 8230 */
typedef __int64 int64_t;

/* 8231 */
typedef int scr_func_t;

/* 8232 */
typedef unsigned int sndAliasTableForMove[7];

/* 8233 */
typedef void __cdecl copy_rgb_to_output(char *, char, char, char);

/* 8234 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_TRANSFERRENDERTARGETTONV12BLVIDEOSURFACE)(unsigned int *, unsigned int, unsigned int, unsigned int);

/* 8235 */
typedef gameMsgDef_s *gameMsgDef_ptr;

/* 8236 */
typedef int __time32_t;

/* 8237 */
typedef char char_align4;

/* 8238 */
typedef png_unknown_chunk_t **png_unknown_chunkpp;

/* 8239 */
typedef float FLAC__float;

/* 8240 */
typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;

/* 8241 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETCOOLERLEVELS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_SETCOOLER_LEVEL_V2 *);

/* 8242 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_STRETCHRECT)(unsigned int *, NVDX_ObjectHandle__ *, tagRECT *, NVDX_ObjectHandle__ *, tagRECT *, unsigned int);

/* 8243 */
typedef int (__cdecl *png_user_chunk_ptr)(png_struct_def *, png_unknown_chunk_t *);

/* 8244 */
typedef _MINIDUMP_CALLBACK_INPUT *PMINIDUMP_CALLBACK_INPUT;

/* 8245 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_QUERYMAXSWAPGROUP)(IUnknown *, unsigned int *, unsigned int *);

/* 8246 */
typedef VehicleDef *VehicleDefPtr;

/* 8247 */
typedef unsigned __int16 ScriptString;

/* 8248 */
typedef png_color_8_struct *png_const_color_8p;

/* 8249 */
typedef NvMonitorHandle__ *NvMonitorHandle;

/* 8250 */
typedef void (__cdecl *com_devhost_callback)(ComDevhostSystem, unsigned int, unsigned int, unsigned int, char *);

/* 8251 */
typedef Qdb *QdbPtr;

/* 8252 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTPSTATE)(NvPhysicalGpuHandle__ *, _NV_GPU_PERF_PSTATE_ID *);

/* 8253 */
typedef XGlobals *XGlobalsPtr;

/* 8254 */
typedef int INT;

/* 8255 */
typedef _MINIDUMP_CALLBACK_OUTPUT *PMINIDUMP_CALLBACK_OUTPUT;

/* 8256 */
typedef wchar_t **SNB;

/* 8257 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVBIOSREVISION)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8258 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURAGETSTATE)(_NVAPI_VENTURA_STATE *);

/* 8259 */
typedef char *(__cdecl *curl_strdup_callback)(const char *);

/* 8260 */
typedef char min_msg_buf[2048];

/* 8261 */
typedef void (__stdcall *BINKSNDCLOSE)(BINKSND *);

/* 8262 */
typedef _MINIDUMP_USER_STREAM *PMINIDUMP_USER_STREAM;

/* 8263 */
typedef unsigned int LCID;

/* 8264 */
typedef HICON__ *HICON;

/* 8265 */
typedef TracerDef *TracerDefPtr;

/* 8266 */
typedef char primaryLightTechType_t[256];

/* 8267 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDSLIOUTPUTSWITHLIDSTATE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8268 */
typedef vehAnimClient_t CL_VehAnimClients[1];

/* 8269 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETSUPPORTEDVIEWS)(NvDisplayHandle__ *, _NV_TARGET_VIEW_MODE *, unsigned int *);

/* 8270 */
typedef char *LPSTR;

/* 8271 */
typedef unsigned __int16 *const *png_const_uint_16pp;

/* 8272 */
typedef tagBITMAP *PBITMAP;

/* 8273 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEVIDEO)(unsigned int *, NV_DX_CREATE_VIDEO_PARAMS2 *);

/* 8274 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SAVESETTINGS)(NvDRSSessionHandle__ *);

/* 8275 */
typedef unsigned __int64 tlThreadHandle;

/* 8276 */
typedef bool (__cdecl *task_callback)(TaskRecord *);

/* 8277 */
typedef unsigned __int64 SteamLeaderboard_t;

/* 8278 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_EVENT_UNREGISTERCALLBACK)(NvEventHandle__ *);

/* 8279 */
typedef void (__cdecl *pmove_entityLinkFromPMove)(int, int, const int);

/* 8280 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYSWAPGROUP)(unsigned int *, unsigned int *, unsigned int *, unsigned int *);

/* 8281 */
typedef __int16 FLAC__int16;

/* 8282 */
typedef yy_buffer_state *YY_BUFFER_STATE;

/* 8283 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_SETDEPTHBOUNDSTEST)(unsigned int *, unsigned int, float, float);

/* 8284 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_SETDEPTHBOUNDSTEST)(unsigned int *, unsigned int, float, float);

/* 8285 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETDEFAULTPROFILE)(const char *);

/* 8286 */
typedef unsigned int png_uint_32;

/* 8287 */
typedef unsigned __int64 ClanID;

/* 8288 */
typedef _RTL_CRITICAL_SECTION *LPCRITICAL_SECTION;

/* 8289 */
typedef int LOCFSERROR;

/* 8290 */
typedef HMIXER__ *HMIXER;

/* 8291 */
typedef char com_devhost_byte;

/* 8292 */
typedef wchar_t *LPOLESTR;

/* 8293 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMNVIDIAUNATTACHEDDISPLAYHANDLE)(unsigned int, NvUnAttachedDisplayHandle__ **);

/* 8294 */
typedef char ddlUserFlags_e;

/* 8295 */
typedef const unsigned __int16 *png_const_uint_16p;

/* 8296 */
typedef my_upsampler *my_upsample_ptr;

/* 8297 */
typedef int (__stdcall *LPDIENUMDEVICESCALLBACKA)(DIDEVICEINSTANCEA *, void *);

/* 8298 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DELETEAPPLICATION)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned __int16 *);

/* 8299 */
typedef const char ConstChar;

/* 8300 */
typedef unsigned __int16 HALF;

/* 8301 */
typedef void (__cdecl *FxProfileDrawFunc)(const char *, vec2_t *);

/* 8302 */
typedef void (__cdecl *SteamAPIWarningMessageHook_t)(int, const char *);

/* 8303 */
typedef const char *pcchar_t;

/* 8304 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCACQUIRE)(unsigned int *, void *);

/* 8305 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYMAXSWAPGROUP)(unsigned int *, unsigned int *, unsigned int *);

/* 8306 */
typedef long double DATE;

/* 8307 */
typedef unsigned int (__stdcall *PTHREAD_START_ROUTINE)(void *);

/* 8308 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER;

/* 8309 */
typedef unsigned __int16 UShortVec[3];

/* 8310 */
typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(void *);

/* 8311 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTOTALSPCOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8312 */
typedef void (__cdecl *jqWorkerInitFnType)(int);

/* 8313 */
typedef void *HCRYPTMSG;

/* 8314 */
typedef int (__cdecl *PEXCEPTION_FILTER)();

/* 8315 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_3D_GETPROPERTY)(char *, NV_3D_SETTING *);

/* 8316 */
typedef HHOOK__ *HHOOK;

/* 8317 */
typedef unsigned __int16 *png_uint_16p;

/* 8318 */
typedef __int16 BGEmblemBackgroundID;

/* 8319 */
typedef void (__cdecl *float_DCT_method_ptr)(float *);

/* 8320 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCEND)(unsigned int *, void *);

/* 8321 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GET_DISPLAYPORT_DONGLEINFO)(NvPhysicalGpuHandle__ *, NV_NVAPI_GET_DP_DONGLE_INFO *);

/* 8322 */
typedef unsigned int GROUP;

/* 8323 */
typedef int SCODE;

/* 8324 */
typedef unsigned __int16 *PUWSTR;

/* 8325 */
typedef __int64 fpos_t;

/* 8326 */
typedef unsigned __int64 UGCFileWriteStreamHandle_t;

/* 8327 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_OGL_EXPERTMODEDEFAULTSSET)(unsigned int, unsigned int, unsigned int);

/* 8328 */
typedef _CERT_INFO *PCERT_INFO;

/* 8329 */
typedef _DSCEFFECTDESC *LPDSCEFFECTDESC;

/* 8330 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSHADERPIPECOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8331 */
typedef unsigned int DepotId_t;

/* 8332 */
typedef unsigned __int16 GfxCompressedLightGridCoeff[3];

/* 8333 */
typedef unsigned __int64 GID_t;

/* 8334 */
typedef __int16 spx_int16_t;

/* 8335 */
typedef int s_long;

/* 8336 */
typedef unsigned int u_long;

/* 8337 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_CREATESWAPCHAIN)(void *, unsigned int *, unsigned int **, _NV_StereoSwapChainMode);

/* 8338 */
typedef void (__cdecl *png_free_ptr)(png_struct_def *, void *);

/* 8339 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYHANDLEFROMDISPLAYID)(unsigned int, NvDisplayHandle__ **);

/* 8340 */
typedef unsigned __int16 NvAPI_UnicodeString[2048];

/* 8341 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_GETRENDEREDCURSORASBITMAP)(unsigned int *, _NVAPI_RENDERED_CURSOR_BITMAP_DATA *);

/* 8342 */
typedef _EH4_SCOPETABLE *PEH4_SCOPETABLE;

/* 8343 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;

/* 8344 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMPHYSICALGPUS)(NvPhysicalGpuHandle__ **, unsigned int *);

/* 8345 */
typedef unsigned __int16 FxEffectDefFlags;

/* 8346 */
typedef unsigned int _dev_t;

/* 8347 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_RESTOREPROFILEDEFAULT)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *);

/* 8348 */
typedef float spx_word64_t;

/* 8349 */
typedef unsigned __int64 mp_word;

/* 8350 */
typedef int (__stdcall *BINKSNDUNLOCK)(BINKSND *, unsigned int);

/* 8351 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_CREATEQUERY)(IUnknown *, _NVAPI_D3D_QUERY_TYPE, NVDX_ObjectHandle__ **);

/* 8352 */
typedef NvEventHandle__ *NvEventHandle;

/* 8353 */
typedef unsigned __int16 **png_uint_16pp;

/* 8354 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETRESOURCEHINT)(unsigned int *, NVDX_ObjectHandle__ *, _NVAPI_SETRESOURCEHINT_CATEGORY, unsigned int, unsigned int *);

/* 8355 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIDEOGETSTEREOINFO)(NvDisplayHandle__ *, _NV_VIDEO_STEREO_INFO *);

/* 8356 */
typedef bool bdBool;

/* 8357 */
typedef menuDef_t *menuDef_ptr;

/* 8358 */
typedef char MapType;

/* 8359 */
typedef unsigned __int16 Pos;

/* 8360 */
typedef int (__cdecl *_onexit_t)();

/* 8361 */
typedef ID3D11Buffer *GfxVertexBuffer0Union;

/* 8362 */
typedef __int64 BD_INT_64;

/* 8363 */
typedef windowDef_t *windowDef_ptr;

/* 8364 */
typedef float _FP32;

/* 8365 */
typedef _DPA *HDPA;

/* 8366 */
typedef ScriptParseTree *ScriptParseTreePtr;

/* 8367 */
typedef unsigned int rsize_t;

/* 8368 */
typedef void (__stdcall *BINKCBRESUME)(BINKIO *);

/* 8369 */
typedef unsigned int *PSIZE_T;

/* 8370 */
typedef LocalizeEntry *LocalizeEntryPtr;

/* 8371 */
typedef unsigned __int16 (__cdecl *pmove_getVehicleTypeString)(ClientNum_t, int, VehicleDef **);

/* 8372 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETOVERLAPLIMITS)(NV_MOSAIC_TOPO_BRIEF *, NV_MOSAIC_DISPLAY_SETTING *, int *, int *, int *, int *);

/* 8373 */
typedef const wchar_t *STRSAFE_PCNZWCH;

/* 8374 */
typedef char *png_bytep;

/* 8375 */
typedef char MsgCompressedBuf[65536];

/* 8376 */
typedef int *png_fixed_point_p;

/* 8377 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_REVERSESTEREOBLITCONTROL)(void *, char);

/* 8378 */
typedef void (__cdecl *downsample1_ptr)(jpeg_compress_struct *, jpeg_component_info *, char **, char **);

/* 8379 */
typedef char **png_bytepp;

/* 8380 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETPIXELSHADERCONSTANTI)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 8381 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDISPLAYPORT)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_PORT_CONFIG *);

/* 8382 */
typedef void *EVENT_HANDLE;

/* 8383 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERTOPOLOGYGETSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_TOPOLOGY_STATUS_V1 *);

/* 8384 */
typedef const char **XStringPtr;

/* 8385 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_GETTYPE)(NVDX_ObjectHandle__ *, _NVAPI_D3D_QUERY_TYPE *);

/* 8386 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYAAOVERRIDEMODE)(unsigned int *, unsigned int *, unsigned int *, unsigned int *);

/* 8387 */
typedef char *unzFile;

/* 8388 */
typedef void (__cdecl *DynEntFieldCustomCallback)(unsigned __int16, dynent_field_s *);

/* 8389 */
typedef unsigned int (__stdcall *BINKCBTIMER)();

/* 8390 */
typedef unsigned __int16 VARTYPE;

/* 8391 */
typedef jpeg_marker_struct *jpeg_saved_marker_ptr;

/* 8392 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETVIRTUALMODEDATA)(unsigned int, NV_VIRTUALMODE_DATA *);

/* 8393 */
typedef bool (__cdecl *CommandCondition)(SpawnVar *);

/* 8394 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTTHERMALLEVEL)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL *);

/* 8395 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_VIDEOSETSTEREOINFO)(unsigned int *, _NV_DX_VIDEO_STEREO_INFO *);

/* 8396 */
typedef char png_byte;

/* 8397 */
typedef void (__cdecl *xcommand_t)();

/* 8398 */
typedef int (__cdecl *_PIFV)();

/* 8399 */
typedef int AxialContentFlags[3];

/* 8400 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMCUSTOMDISPLAY)(NvDisplayHandle__ *, unsigned int, unsigned int, NV_CUSTOM_DISPLAY *);

/* 8401 */
typedef __int16 YTYPE;

/* 8402 */
typedef _EH4_SCOPETABLE_RECORD *PEH4_SCOPETABLE_RECORD;

/* 8403 */
typedef int NvS32;

/* 8404 */
typedef unsigned int D3DCOLOR;

/* 8405 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETSEPARATION)(void *, float);

/* 8406 */
typedef png_unknown_chunk_t *png_const_unknown_chunkp;

/* 8407 */
typedef ID3DXSprite *LPD3DXSPRITE;

/* 8408 */
typedef void (__cdecl *png_user_transform_ptr)(png_struct_def *, png_row_info_struct *, char *);

/* 8409 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_GETOBJECTHANDLEFORRESOURCE)(IUnknown *, IUnknown *, NVDX_ObjectHandle__ **);

/* 8410 */
typedef __int16 s_short;

/* 8411 */
typedef unsigned __int64 SteamAPICall_t;

/* 8412 */
typedef unsigned __int16 u_short;

/* 8413 */
typedef int (__cdecl *decoder_ctl_func)(void *, int, void *);

/* 8414 */
typedef unsigned __int64 uint64_t;

/* 8415 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETUNDERSCANCONFIG)(NvDisplayHandle__ *, unsigned int, NV_UNDERSCAN_CONFIG *, unsigned int);

/* 8416 */
typedef _DSA *HDSA;

/* 8417 */
typedef int (__cdecl *encode_func)(void *, void *, SpeexBits *);

/* 8418 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCMAPINDEXBUFFER)(unsigned int *, unsigned int *, void *);

/* 8419 */
typedef unsigned int (__cdecl *SD_DecoderInterfaceQueryAvailableData)(sd_decoder *, unsigned int);

/* 8420 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETHYBRIDMODE)(_NV_HYBRID_MODE);

/* 8421 */
typedef unsigned int _fsize_t;

/* 8422 */
typedef int mbstate_t;

/* 8423 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETSCANOUTWARPING)(unsigned int, NV_SCANOUT_WARPING_DATA *, int *, int *);

/* 8424 */
typedef IDirectDrawSurface *LPDIRECTDRAWSURFACE;

/* 8425 */
typedef const char ConstChar16;

/* 8426 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_QUERYILLUMINATIONSUPPORT)(_NV_GPU_QUERY_ILLUMINATION_SUPPORT_PARM_V1 *);

/* 8427 */
typedef tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;

/* 8428 */
typedef tagVersionedStream *LPVERSIONEDSTREAM;

/* 8429 */
typedef int INT_PTR;

/* 8430 */
typedef char MaterialTechniqueType;

/* 8431 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETHYBRIDMODE)(_NV_HYBRID_MODE *);

/* 8432 */
typedef unsigned int NvU32;

/* 8433 */
typedef __int16 JCOEF;

/* 8434 */
typedef animParamsDef_t *animParamsDef_ptr;

/* 8435 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDISPLAYPOSITION)(NvDisplayHandle__ *, unsigned int, unsigned int, unsigned int);

/* 8436 */
typedef GameWorldSp *GameWorldSpPtr;

/* 8437 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPOWERMIZERINFO)(NvPhysicalGpuHandle__ *, _NV_PWR_SOURCE_INFO, _NV_SELECT_INFO, _NV_LEVEL_INFO *);

/* 8438 */
typedef char BD_CHAR8;

/* 8439 */
typedef void __cdecl TaskFunc(TaskRecord *, void *);

/* 8440 */
typedef FontIcon *FontIconHandle;

/* 8441 */
typedef _DDCOLORKEY *LPDDCOLORKEY;

/* 8442 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYPOSITION)(NvDisplayHandle__ *, unsigned int, unsigned int *, unsigned int *);

/* 8443 */
typedef void (__cdecl *terminate_handler)();

/* 8444 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPOWERMIZERINFO)(NvPhysicalGpuHandle__ *, _NV_PWR_SOURCE_INFO, _NV_SELECT_INFO, _NV_LEVEL_INFO);

/* 8445 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERPOLICIESSETSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_POLICIES_STATUS_V1 *);

/* 8446 */
typedef void (__cdecl *BuiltinMethod)(scr_entref_t);

/* 8447 */
typedef HRESULT (__cdecl *PDM_CMDCONTPROC)(_DM_CMDCONT *, char *, unsigned int);

/* 8448 */
typedef unsigned int FLAC__uint32;

/* 8449 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_HYBRID_SETAPPMIGRATIONSTATE)(NV_HYBRID_APP_INFO, unsigned int);

/* 8450 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;

/* 8451 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETEDID)(NvPhysicalGpuHandle__ *, unsigned int, NV_EDID_V3 *);

/* 8452 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETECCSTATUSINFO)(NvPhysicalGpuHandle__ *, NV_GPU_ECC_STATUS_INFO *);

/* 8453 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEPATHCONTEXTNV)(unsigned int *, unsigned int *);

/* 8454 */
typedef __int16 JBLOCK[64];

/* 8455 */
typedef void (__cdecl *BG_RegisterWeapon)(unsigned int);

/* 8456 */
typedef char FLAC__uint8;

/* 8457 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETTOPOLOGYFOCUSDISPLAYANDVIEW)(NvLogicalGpuHandle__ *, unsigned int, NV_DISPLAY_PATH_INFO *, _NV_TARGET_VIEW_MODE);

/* 8458 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETEDID)(NvPhysicalGpuHandle__ *, unsigned int, NV_EDID_V3 *);

/* 8459 */
typedef void (__cdecl *fn_blocked)(gentity_t *, gentity_t *);

/* 8460 */
typedef int (__stdcall *BINKSNDREADY)(BINKSND *);

/* 8461 */
typedef void (__cdecl *ScriptCallbackClient)(gclient_t *, client_fields_s *);

/* 8462 */
typedef void (__cdecl *NVAPI_CALLBACK_FANSPEEDEVENT)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL, void *);

/* 8463 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_REGISTERRESOURCE)(unsigned int *);

/* 8464 */
typedef _LUID *PLUID;

/* 8465 */
typedef int socklen_t;

/* 8466 */
typedef char OP_TYPE;

/* 8467 */
typedef void (__cdecl *threadFunction_t)(unsigned int);

/* 8468 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETSCANOUTINTENSITY)(unsigned int, NV_SCANOUT_INTENSITY_DATA_V2 *, int *);

/* 8469 */
typedef unsigned int HTTPRequestHandle;

/* 8470 */
typedef char MaterialStreamSource;

/* 8471 */
typedef void (__cdecl *png_error_ptr)(png_struct_def *, const char *);

/* 8472 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETBUSID)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8473 */
typedef void (__cdecl *_PMFN)();

/* 8474 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_VALIDATEDISPLAYGRIDS)(unsigned int, NV_MOSAIC_GRID_TOPO *, NV_MOSAIC_DISPLAY_TOPO_STATUS *, unsigned int);

/* 8475 */
typedef _OVERLAPPED *LPWSAOVERLAPPED;

/* 8476 */
typedef char bdUByte8;

/* 8477 */
typedef float float_align128;

/* 8478 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTACHREADING)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8479 */
typedef _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB;

/* 8480 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SAVECUSTOMDISPLAY)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 8481 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_COLORCONTROL)(unsigned int, NV_COLOR_DATA *);

/* 8482 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETTIMING)(NvDisplayHandle__ *, unsigned int, unsigned int, float, NV_TIMING_FLAG, unsigned int, _NV_TIMING_OVERRIDE, tagNV_TIMING *);

/* 8483 */
typedef HRESULT (__cdecl *PDM_CMDPROC)(const char *, char *, unsigned int, _DM_CMDCONT *);

/* 8484 */
typedef void (__cdecl *turret_trace_func)(trace_t *, vec3_t *, vec3_t *, vec3_t *, vec3_t *, int, int, col_context_t *);

/* 8485 */
typedef block_state (__cdecl *compress_func)(internal_state *, int);

/* 8486 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PRESENTVIDEO)(unsigned int *, NV_DX_PRESENT_VIDEO_PARAMS1 *);

/* 8487 */
typedef bool (__cdecl *LiveStats_SignedStatsKeyInitKeyCallback)(const void *, int);

/* 8488 */
typedef char DefineStrings[10000];

/* 8489 */
typedef unsigned __int64 XUID;

/* 8490 */
typedef MaterialVertexShader *MaterialVertexShaderPtr;

/* 8491 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETSURFACECREATIONMODE)(void *, _NVAPI_STEREO_SURFACECREATEMODE);

/* 8492 */
typedef unsigned int lzo_uint;

/* 8493 */
typedef unsigned int SOCKET;

/* 8494 */
typedef int psize_int;

/* 8495 */
typedef float bdFloat32;

/* 8496 */
typedef unsigned int raw_DWORD;

/* 8497 */
typedef char i8;

/* 8498 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHPARAMETERFNV)(unsigned int, _NV_PATH_PARAMTYPE, float);

/* 8499 */
typedef png_color_16_struct *png_const_color_16p;

/* 8500 */
typedef char MaterialConstantSource;

/* 8501 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PRESENTSURFACETODESKTOP)(unsigned int *, NVDX_ObjectHandle__ *, unsigned int, unsigned int);

/* 8502 */
typedef char u8;

/* 8503 */
typedef char U8;

/* 8504 */
typedef int bit_buf_type;

/* 8505 */
typedef HINSTANCE__ *HINSTANCE;

/* 8506 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_GETDATA)(NVDX_ObjectHandle__ *, void *, unsigned int, unsigned int);

/* 8507 */
typedef unsigned int (__stdcall *BINKIOREADFRAME)(BINKIO *, unsigned int, int, void *, unsigned int);

/* 8508 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SETCURRENTGLOBALPROFILE)(NvDRSSessionHandle__ *, unsigned __int16 *);

/* 8509 */
typedef const char *LPCTSTR;

/* 8510 */
typedef char mz_uint8;

/* 8511 */
typedef bool SessionHandle;

/* 8512 */
typedef unsigned __int16 r_index16_t;

/* 8513 */
typedef void (__cdecl *RedBlackCacheFreeNodeCallback)(RedBlackCacheNode *);

/* 8514 */
typedef int (__cdecl *WOUTPUTFN)(_iobuf *, const wchar_t *, localeinfo_struct *, char *);

/* 8515 */
typedef unsigned int u_int;

/* 8516 */
typedef tWAVEFORMATEX *LPCWAVEFORMATEX;

/* 8517 */
typedef char aligned_byte_pointer;

/* 8518 */
typedef void (__cdecl *CommandProcessorFunc)(RadiantCommand *, SpawnVar *);

/* 8519 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_GETDATASIZE)(NVDX_ObjectHandle__ *, unsigned int *);

/* 8520 */
typedef char ENTROPY_CONTEXT;

/* 8521 */
typedef MaterialTechnique *MaterialTechniquePtr;

/* 8522 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYFRAMECOUNT)(unsigned int *, unsigned int *);

/* 8523 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_START)(NvVioHandle__ *);

/* 8524 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETCURRENTGLOBALPROFILE)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ **);

/* 8525 */
typedef ID3D11Query *GfxFence;

/* 8526 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_SETFPSINDICATORSTATE)(IUnknown *, char);

/* 8527 */
typedef ID3D11VertexShader *GfxVertexShader;

/* 8528 */
typedef __int16 mz_int16;

/* 8529 */
typedef char NvAPI_String[4096];

/* 8530 */
typedef int _Mbstatet;

/* 8531 */
typedef unsigned __int16 INTERNET_PORT;

/* 8532 */
typedef int __ehstate_t;

/* 8533 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETLOGICALGPUFROMPHYSICALGPU)(NvPhysicalGpuHandle__ *, NvLogicalGpuHandle__ **);

/* 8534 */
typedef GfxPackedVertex *GfxPackedVertex0Union;

/* 8535 */
typedef void *THREAD_START_ROUTINE_PARAM;

/* 8536 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETOUTPUTTYPE)(NvPhysicalGpuHandle__ *, unsigned int, _NV_GPU_OUTPUT_TYPE *);

/* 8537 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYIDFROMDISPLAYHANDLE)(NvDisplayHandle__ *, unsigned int *);

/* 8538 */
typedef char *bdVaList;

/* 8539 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CLEARRT)(unsigned int *, unsigned int, tagRECT *, float, float, float, float);

/* 8540 */
typedef unsigned int ulong32;

/* 8541 */
typedef unsigned int ULONG32;

/* 8542 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_UNLOCK)(unsigned int *, NVDX_ObjectHandle__ *);

/* 8543 */
typedef void (__cdecl *pmove_PlayerEvent)(int, int);

/* 8544 */
typedef _DIDATAFORMAT *LPCDIDATAFORMAT;

/* 8545 */
typedef png_text_struct *png_const_textp;

/* 8546 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETUNATTACHEDASSOCIATEDDISPLAYNAME)(NvUnAttachedDisplayHandle__ *, char *);

/* 8547 */
typedef void (__cdecl *SD_DecoderInterfaceCreate)(sd_decoder *, SndAssetBankEntry *);

/* 8548 */
typedef int (__cdecl *jqModuleCallback)(jqBatch *);

/* 8549 */
typedef listBoxDef_s *listBoxDef_ptr;

/* 8550 */
typedef char int8_t;

/* 8551 */
typedef char BD_UCHAR8;

/* 8552 */
typedef char SndChar2048;

/* 8553 */
typedef unsigned int psize_uint;

/* 8554 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDSLIOUTPUTS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8555 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTAGPRATE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8556 */
typedef vec4_t ikAnimMat[4];

/* 8557 */
typedef int int32_t;

/* 8558 */
typedef void *vtbl_ptr;

/* 8559 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENABLEHWCURSOR)(NvDisplayHandle__ *);

/* 8560 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEPATHNV)(unsigned int, _NV_PATH_DATATYPE, unsigned int, const char *, unsigned int *);

/* 8561 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDVCLEVEL)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 8562 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETPCIINFO)(NvVioHandle__ *, _NVVIOPCIINFO *);

/* 8563 */
typedef void (__cdecl *phys_collision_callback_t)();

/* 8564 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETSLIMODE)(unsigned int *, _NV_SLI_MODE);

/* 8565 */
typedef float spx_word32_t;

/* 8566 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPIXELCLOCKRANGE)(NvPhysicalGpuHandle__ *, unsigned int, NV_GET_PCLK *);

/* 8567 */
typedef void (__cdecl *unexpected_handler)();

/* 8568 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETASSOCIATEDUNATTACHEDNVIDIADISPLAYHANDLE)(const char *, NvUnAttachedDisplayHandle__ **);

/* 8569 */
typedef IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;

/* 8570 */
typedef void *(__cdecl *encoder_init_func)(SpeexMode *);

/* 8571 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPIXELCLOCKRANGE)(NvPhysicalGpuHandle__ *, unsigned int, NV_SET_PCLK *);

/* 8572 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_ALIASPRIMARYASTEXTURE)(unsigned int *, unsigned int, unsigned int **);

/* 8573 */
typedef __int16 XQuat2[2];

/* 8574 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_VALIDATEOUTPUTCOMBINATION)(NvPhysicalGpuHandle__ *, unsigned int);

/* 8575 */
typedef mz_stream_s *mz_streamp;

/* 8576 */
typedef void (__cdecl *lightLogicPtr_t)(_mixerLight_t *, _lightParams_t *, cg_t *, bool);

/* 8577 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDVCINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_DVC_INFO *);

/* 8578 */
typedef char NvAPI_LongString[256];

/* 8579 */
typedef void (__fastcall *PTERMINATION_HANDLER)();

/* 8580 */
typedef void (__cdecl *ConfigStringStoreHandler)(int, const char *);

/* 8581 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_SETUPTARGETBUFFERTOSYS)(IUnknown *, NVFBC_BUFFER_FORMAT, unsigned int, void **);

/* 8582 */
typedef unsigned __int64 FLAC__uint64;

/* 8583 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETMEMPARTITIONMASK)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8584 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_UNREGISTERRESOURCE)(unsigned int *);

/* 8585 */
typedef int _I32;

/* 8586 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMAVAILABLESETTINGIDS)(unsigned int *, unsigned int *);

/* 8587 */
typedef unsigned __int16 *PWSTR;

/* 8588 */
typedef const char *LPCSTR;

/* 8589 */
typedef _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;

/* 8590 */
typedef void (__cdecl *pmove_setVehDriverInput)(LocalClientNum_t, playerState_s *, usercmd_s *);

/* 8591 */
typedef KeyValuePairs *KeyValuePairsPtr;

/* 8592 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_ENDSHARERESOURCE)(unsigned int *);

/* 8593 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_ENDSHARERESOURCE)(unsigned int *);

/* 8594 */
typedef ID3D11Buffer *GfxIndexBuffer;

/* 8595 */
typedef int errno_t;

/* 8596 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMSETTINGS)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int, unsigned int *, _NVDRS_SETTING *);

/* 8597 */
typedef unsigned __int64 bitfield_t;

/* 8598 */
typedef int LONG_PTR;

/* 8599 */
typedef __int64 FLAC__int64;

/* 8600 */
typedef _DDSURFACEDESC *LPDDSURFACEDESC;

/* 8601 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_TRANSFERRENDERTARGET)(unsigned int *, void **, unsigned int, unsigned int, unsigned int);

/* 8602 */
typedef WeaponVariantDef *WeaponVariantDefPtr;

/* 8603 */
typedef my_idct_controller *my_idct_ptr;

/* 8604 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DELETEPROFILE)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *);

/* 8605 */
typedef unsigned __int16 r_index_t;

/* 8606 */
typedef long double TxaaF8;

/* 8607 */
typedef int intptr_t;

/* 8608 */
typedef unsigned int uint32_t;

/* 8609 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ENUMDATAFORMATS)(NvVioHandle__ *, unsigned int, _NVVIODATAFORMATDETAIL *);

/* 8610 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETASSOCIATEDNVIDIADISPLAYNAME)(NvDisplayHandle__ *, char *);

/* 8611 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPCIIDENTIFIERS)(NvPhysicalGpuHandle__ *, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

/* 8612 */
typedef void *HANDLE;

/* 8613 */
typedef void (__cdecl *png_progressive_info_ptr)(png_struct_def *, png_info_def *);

/* 8614 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETVIDEOSTATE)(unsigned int *, _NVAPI_GET_VIDEO_STATE_COMPONENT *);

/* 8615 */
typedef int (__stdcall *WNDPROC)(HWND__ *, unsigned int, unsigned int, int);

/* 8616 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_RESETECCERRORINFO)(NvPhysicalGpuHandle__ *, char, char);

/* 8617 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_BEGIN)(NVDX_ObjectHandle__ *);

/* 8618 */
typedef int DCTELEM;

/* 8619 */
typedef unsigned int GDI_HANDLE_BUFFER[34];

/* 8620 */
typedef tagPARAMDESCEX *LPPARAMDESCEX;

/* 8621 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDDISPLAYIDS)(NvPhysicalGpuHandle__ *, _NV_GPU_DISPLAYIDS *, unsigned int *, unsigned int);

/* 8622 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHPARAMETERINV)(unsigned int, _NV_PATH_PARAMTYPE, int);

/* 8623 */
typedef void (__cdecl *SD_DecoderInterfaceBufferSubmit)(sd_decoder *, const char *, unsigned int, bool);

/* 8624 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ISACTIVATED)(void *, char *);

/* 8625 */
typedef unsigned __int16 *LPWCH;

/* 8626 */
typedef int (__stdcall *MINIDUMPWRITEDUMP)(void *, unsigned int, void *, _MINIDUMP_TYPE, _MINIDUMP_EXCEPTION_INFORMATION *const , _MINIDUMP_USER_STREAM_INFORMATION *const , _MINIDUMP_CALLBACK_INFORMATION *const );

/* 8627 */
typedef IDirectInputA *LPDIRECTINPUT;

/* 8628 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_BEGINRESOURCERENDERING)(IUnknown *, NVDX_ObjectHandle__ *, unsigned int);

/* 8629 */
typedef void *(__cdecl *MantleAnimAlloc)(int);

/* 8630 */
typedef void (__cdecl *zbarrierPieceLogicPtr_t)(LocalClientNum_t, cg_t *, centity_t *, ZBarrierDef *, _cgZBarrierPiece_t *, LerpEntityStateZBarrierPiece *, unsigned int);

/* 8631 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPHYSICALGPUSFROMLOGICALGPU)(NvLogicalGpuHandle__ *, NvPhysicalGpuHandle__ **, unsigned int *);

/* 8632 */
typedef char stbi_dequantize_t;

/* 8633 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SETCSC)(NvVioHandle__ *, _NVVIOCOLORCONVERSION *);

/* 8634 */
typedef int (__stdcall *PFLS_FREE_FUNCTION)(unsigned int);

/* 8635 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_SETGRIDTOPOLOGY)(NV_MOSAIC_GRID_TOPO *, unsigned int);

/* 8636 */
typedef void (__cdecl *inverse_DCT_method_ptr)(jpeg_decompress_struct *, jpeg_component_info *, __int16 *, char **, unsigned int);

/* 8637 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DELETEUNDERSCANCONFIG)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 8638 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETCSC)(NvVioHandle__ *, _NVVIOCOLORCONVERSION *);

/* 8639 */
typedef unsigned int GfxDecodedSamplerState;

/* 8640 */
typedef _OVERLAPPED *LPOVERLAPPED;

/* 8641 */
typedef bool (__cdecl *SD_DecoderInterfaceBufferReady)(sd_decoder *);

/* 8642 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDVCINFOEX)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_DVC_INFO_EX *);

/* 8643 */
typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK)(_DDSURFACEDESC *, void *);

/* 8644 */
typedef __int64 streamoff;

/* 8645 */
typedef unsigned __int16 scr_string_t;

/* 8646 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_IS3DCURSORSUPPORTED)(void *, char *);

/* 8647 */
typedef int clock_t;

/* 8648 */
typedef char sd_byte;

/* 8649 */
typedef ID3D11Buffer *GfxIndexBufferHandle;

/* 8650 */
typedef IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;

/* 8651 */
typedef unsigned int bdLeaderBoardID;

/* 8652 */
typedef jpeg_common_struct *j_common_ptr;

/* 8653 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSHADERSUBPIPECOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8654 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETRAMTYPE)(NvPhysicalGpuHandle__ *, NV_GPU_RAM_TYPE *);

/* 8655 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_HANDSHAKE_MESSAGE_CONTROL)(void *, char);

/* 8656 */
typedef char statsString_t[64];

/* 8657 */
typedef unsigned __int16 AbsDynEntityId;

/* 8658 */
typedef void (__stdcall *BINKSNDSPKOUTVOLS)(BINKSND *, float *, unsigned int);

/* 8659 */
typedef long double _FP64;

/* 8660 */
typedef Glasses *GlassesPtr;

/* 8661 */
typedef unsigned int HCRYPTPROV;

/* 8662 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURASETSTATE)(_NVAPI_VENTURA_STATE);

/* 8663 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_QUERYFRAMECOUNT)(IUnknown *, unsigned int *);

/* 8664 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHMATRIXNV)(unsigned int, _NV_PATH_TARGETTYPE, const float *);

/* 8665 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_CREATEDISPLAYFROMUNATTACHEDDISPLAY)(NvUnAttachedDisplayHandle__ *, NvDisplayHandle__ **);

/* 8666 */
typedef ComWorld *ComWorldPtr;

/* 8667 */
typedef Material *MaterialHandle;

/* 8668 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_CREATESESSION)(NvDRSSessionHandle__ **);

/* 8669 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCRELEASE)(unsigned int *, void *);

/* 8670 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GPIOQUERYLEGALPINS)(NvPhysicalGpuHandle__ *, NV_GPU_GPIO_LEGAL_PINS *);

/* 8671 */
typedef unsigned int lzo_uint32;

/* 8672 */
typedef _DM_CMDCONT *PDM_CMDCONT;

/* 8673 */
typedef char tempStatsBuffer_t[65536];

/* 8674 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_ENUMDISPLAYGRIDS)(NV_MOSAIC_GRID_TOPO *, unsigned int *);

/* 8675 */
typedef char JSAMPLE;

/* 8676 */
typedef char GfxImageCategory;

/* 8677 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDRIVERMEMORYINFO)(NvDisplayHandle__ *, NV_DRIVER_MEMORY_INFO *);

/* 8678 */
typedef void (__cdecl *CheckPointActionCallBackFn)();

/* 8679 */
typedef void (__cdecl *fn_think)(gentity_t *);

/* 8680 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_I2CWRITEEX)(NvPhysicalGpuHandle__ *, NV_I2C_INFO_V3 *, NV_I2C_INFO_EX *);

/* 8681 */
typedef char sv_skel_memory_array_t[262144];

/* 8682 */
typedef SndDriverGlobals *SndDriverGlobalsPtr;

/* 8683 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_ENABLEOVERCLOCKEDPSTATES)(NvPhysicalGpuHandle__ *, char);

/* 8684 */
typedef DIDEVICEOBJECTDATA *LPDIDEVICEOBJECTDATA;

/* 8685 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_RESTORECOOLERPOLICYTABLE)(NvPhysicalGpuHandle__ *, unsigned int *, unsigned int, NV_COOLER_POLICY);

/* 8686 */
typedef void *HINTERNET;

/* 8687 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETDEFAULTPROFILE)(unsigned int, char *, unsigned int *);

/* 8688 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETCURRENTZBUFFERHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 8689 */
typedef __int64 mz_int64;

/* 8690 */
typedef const long double *png_const_doublep;

/* 8691 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETNUMPROFILES)(NvDRSSessionHandle__ *, unsigned int *);

/* 8692 */
typedef unsigned int bdTitleID;

/* 8693 */
typedef png_sPLT_struct **png_sPLT_tpp;

/* 8694 */
typedef int FLOATING_SAVE_AREA[4];

/* 8695 */
typedef int HSteamUser;

/* 8696 */
typedef unsigned __int16 wctype_t;

/* 8697 */
typedef void (__cdecl *Stream_GenericCallback)(int, void *, int);

/* 8698 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETDEVICEDISPLAYMODE)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_DISPLAY_MODE *);

/* 8699 */
typedef _ITEMIDLIST *LPITEMIDLIST;

/* 8700 */
typedef void *(__cdecl *jpeg_external_malloc_t)(unsigned int);

/* 8701 */
typedef void *HCERTSTORE;

/* 8702 */
typedef void *THREAD_HANDLE;

/* 8703 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_FINDPROFILEBYNAME)(NvDRSSessionHandle__ *, unsigned __int16 *, NvDRSProfileHandle__ **);

/* 8704 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DELETECUSTOMDISPLAY)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 8705 */
typedef __int16 (*JBLOCKROW)[64];

/* 8706 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEVIDEOBEGIN)(unsigned int *);

/* 8707 */
typedef DIDEVICEOBJECTINSTANCEA *LPCDIDEVICEOBJECTINSTANCEA;

/* 8708 */
typedef void *volatile volatile_ptr;

/* 8709 */
typedef png_row_info_struct *png_row_infop;

/* 8710 */
typedef void (__cdecl *mz_free_func)(void *, void *);

/* 8711 */
typedef _DSBUFFERDESC *LPCDSBUFFERDESC;

/* 8712 */
typedef unsigned __int16 modelNameIndex_t;

/* 8713 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYDRIVERMEMORYINFO)(NvDisplayHandle__ *, NV_DISPLAY_DRIVER_MEMORY_INFO_V2 *);

/* 8714 */
typedef void (__cdecl *fn_react)(gentity_t *, gentity_t *, vec3_t *);

/* 8715 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_3D_SETPROPERTY)(char *, NV_3D_SETTING *);

/* 8716 */
typedef multiDef_s *multiDef_ptr;

/* 8717 */
typedef unsigned __int64 NvU64;

/* 8718 */
typedef unsigned int HREFTYPE;

/* 8719 */
typedef float spx_sig_t;

/* 8720 */
typedef const void *(__stdcall *PFNDPAMERGECONST)(unsigned int, const void *, const void *, int);

/* 8721 */
typedef LeaderboardDef *LeaderboardDefPtr;

/* 8722 */
typedef void *HLOCAL;

/* 8723 */
typedef MenuList *MenuListPtr;

/* 8724 */
typedef _PEB *PPEB;

/* 8725 */
typedef _EXCEPTION_DISPOSITION (__cdecl *PEXCEPTION_ROUTINE)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

/* 8726 */
typedef unsigned int *png_size_tp;

/* 8727 */
typedef unsigned __int64 DWORD64;

/* 8728 */
typedef unsigned int ULONG_PTR;

/* 8729 */
typedef unsigned int MMRESULT;

/* 8730 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETGPUCORECOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8731 */
typedef HWND__ *HWND;

/* 8732 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETVIEWEX)(NvDisplayHandle__ *, NV_DISPLAY_PATH_INFO *, _NV_TARGET_VIEW_MODE);

/* 8733 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_VIDEOSURFACEENCRYPTIONCONTROL)(unsigned int *, NVAPI_VIDSURF_ENCRYPT_CTRL_PARAMS *);

/* 8734 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_REVERTCUSTOMDISPLAYTRIAL)(NvDisplayHandle__ *);

/* 8735 */
typedef UiContext UiContextArray[1];

/* 8736 */
typedef dvar_t *CONTEXT;

/* 8737 */
typedef bool (__cdecl *pmove_getEntityOriginAngles)(LocalClientNum_t, int, vec3_t *, vec3_t *);

/* 8738 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_CAPTUREPNGIMAGE)(void *);

/* 8739 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETGPUTOPOLOGIES)(NV_GPU_TOPOLOGIES *, unsigned int);

/* 8740 */
typedef char *JSAMPROW;

/* 8741 */
typedef unsigned int EventParm;

/* 8742 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVIEWEX)(NvDisplayHandle__ *, NV_DISPLAY_PATH_INFO *, unsigned int *, _NV_TARGET_VIEW_MODE *);

/* 8743 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVBIOSVERSIONSTRING)(NvPhysicalGpuHandle__ *, char *);

/* 8744 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETMOSAICCAPABILITIES)(NV_GPU_TOPOLOGIES *, NV_MOSAIC_CAPS_V2 *);

/* 8745 */
typedef __int16 int16_t;

/* 8746 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETSLIINFO)(unsigned int *, NV_SLI_INFO *);

/* 8747 */
typedef bool (__cdecl *FxEffectFieldHandler)(const char **, FxEditorEffectDef *);

/* 8748 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPSTATES20)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_PSTATES20_INFO_V1 *);

/* 8749 */
typedef unsigned int IPos;

/* 8750 */
typedef tagMSG *LPMSG;

/* 8751 */
typedef unsigned int mz_uint;

/* 8752 */
typedef unsigned int png_size_t;

/* 8753 */
typedef int png_fixed_point;

/* 8754 */
typedef int BOOL;

/* 8755 */
typedef void *(__cdecl *curl_calloc_callback)(unsigned int, unsigned int);

/* 8756 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPSTATES20)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_PSTATES20_INFO_V1 *);

/* 8757 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ENUMSIGNALFORMATS)(NvVioHandle__ *, unsigned int, _NVVIOSIGNALFORMATDETAIL *);

/* 8758 */
typedef PhysConstraints *PhysConstraintsPtr;

/* 8759 */
typedef void *HashHandle;

/* 8760 */
typedef unsigned __int16 scr_thread_t;

/* 8761 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETIMAGESHARPENINGLEVEL)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 8762 */
typedef __int16 XQuat[4];

/* 8763 */
typedef int BD_WORD;

/* 8764 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYDRIVERVERSION)(NvDisplayHandle__ *, NV_DISPLAY_DRIVER_VERSION *);

/* 8765 */
typedef pathnode_tree_t *pathnode_tree_ptr;

/* 8766 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIDEOSETSTEREOINFO)(NvDisplayHandle__ *, _NV_VIDEO_STEREO_INFO *);

/* 8767 */
typedef int *LPBOOL;

/* 8768 */
typedef void (__cdecl *_PHNDLR)(int);

/* 8769 */
typedef tagPOINT *LPPOINT;

/* 8770 */
typedef char *(__cdecl *alloc_func)(char *, unsigned int, unsigned int);

/* 8771 */
typedef _TEB_ACTIVE_FRAME_CONTEXT *PCTEB_ACTIVE_FRAME_CONTEXT;

/* 8772 */
typedef RawFile *RawFilePtr;

/* 8773 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVBLANKCOUNTER)(NvDisplayHandle__ *, unsigned int *);

/* 8774 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETIMAGESHARPENINGINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_IMAGE_SHARPENING_INFO *);

/* 8775 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DECREASESEPARATION)(void *);

/* 8776 */
typedef tagRECT *LPRECT;

/* 8777 */
typedef WeaponCamo *WeaponCamoPtr;

/* 8778 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_WORKSTATIONFEATURESETUP)(NvPhysicalGpuHandle__ *, unsigned int, unsigned int);

/* 8779 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ENABLESTEREO)(unsigned int *, _NVAPI_D3D9_ENABLE_STEREO_PARAMS *);

/* 8780 */
typedef IDirectSound8 *LPDIRECTSOUND8;

/* 8781 */
typedef png_info_def *png_const_infop;

/* 8782 */
typedef char snapshot_value_t[8192];

/* 8783 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_EVENT_REGISTERCALLBACK)(NV_EVENT_REGISTER_CALLBACK *, NvEventHandle__ **);

/* 8784 */
typedef in6_addr *PIN6_ADDR;

/* 8785 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETDISPLAYCAPABILITIES)(NV_MOSAIC_DISPLAY_CAPS_V2 *);

/* 8786 */
typedef float FLAC__real;

/* 8787 */
typedef void __thiscall FLAC__MD5Context(bdFastArray<unsigned int> *this, bdFastArray<unsigned int> *);

/* 8788 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETINFOFRAME)(NvDisplayHandle__ *, unsigned int, _NV_INFOFRAME_TYPE, NV_INFOFRAME *);

/* 8789 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_END)(NVDX_ObjectHandle__ *);

/* 8790 */
typedef unsigned int __cdecl swizzle_coord(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);

/* 8791 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETGAMMA)(NvVioHandle__ *, _NVVIOGAMMACORRECTION *);

/* 8792 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DELETEAPPLICATIONEX)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_APPLICATION_V2 *);

/* 8793 */
typedef unsigned __int16 FxMarkHandle;

/* 8794 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETINFOFRAME)(NvDisplayHandle__ *, unsigned int, _NV_INFOFRAME_TYPE, NV_INFOFRAME *);

/* 8795 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_RESTOREALLDEFAULTS)(NvDRSSessionHandle__ *);

/* 8796 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETPIXELSHADERCONSTANTI)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 8797 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SETGAMMA)(NvVioHandle__ *, _NVVIOGAMMACORRECTION *);

/* 8798 */
typedef unsigned int BD_ULONG;

/* 8799 */
typedef png_color_16_struct *png_color_16p;

/* 8800 */
typedef my_source_mgr *my_src_ptr;

/* 8801 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETOVERLAYSURFACEHANDLES)(unsigned int *, _NV_OVLY_SURFS_INFO *);

/* 8802 */
typedef MaterialTechniqueSet *MaterialTechniqueSetPtr;

/* 8803 */
typedef Font_s *FontHandle;

/* 8804 */
typedef char *PCHAR;

/* 8805 */
typedef __int64 __time64_t;

/* 8806 */
typedef char TCHAR;

/* 8807 */
typedef char UCHAR;

/* 8808 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_CREATEDEVICE)(unsigned int *, unsigned int, HINSTANCE__ *, unsigned int, unsigned int, unsigned int, unsigned int **, NVAPI_DEVICE_FEATURE_LEVEL *);

/* 8809 */
typedef unsigned int D3DMULTISAMPLE_TYPE;

/* 8810 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_CREATEDEVICE)(unsigned int *, unsigned int, HINSTANCE__ *, unsigned int, const unsigned int *, unsigned int, unsigned int, unsigned int **, unsigned int *, unsigned int **, NVAPI_DEVICE_FEATURE_LEVEL *);

/* 8811 */
typedef my_memory_mgr *my_mem_ptr;

/* 8812 */
typedef char qosPayloadBuffer_t[16];

/* 8813 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_CREATEPROFILE)(NvDRSSessionHandle__ *, _NVDRS_PROFILE *, NvDRSProfileHandle__ **);

/* 8814 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ALIASPRIMARYASTEXTURE)(unsigned int *, unsigned int, unsigned int **, NVDX_ObjectHandle__ **);

/* 8815 */
typedef const wchar_t *LPCWSTR;

/* 8816 */
typedef rectData_s *rectData_ptr;

/* 8817 */
typedef char downloadFileBuffer_t[131072];

/* 8818 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETSEPARATION)(void *, float *);

/* 8819 */
typedef DpvsPlane *DpvsPlanePtr;

/* 8820 */
typedef void (__cdecl *forward_DCT_method_ptr)(int *);

/* 8821 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_NOTIFYCOPROCPOWERSTATE)(unsigned int, unsigned __int64, unsigned int *);

/* 8822 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCOOLERSETTINGS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_GETCOOLER_SETTINGS_V3 *);

/* 8823 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_INCREASECONVERGENCE)(void *);

/* 8824 */
typedef unsigned int CellID_t;

/* 8825 */
typedef _iobuf *assertiveFile_t;

/* 8826 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVOLTAGEDOMAINSSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_VOLTAGE_DOMAINS_STATUS_V1 *);

/* 8827 */
typedef _MEMORYSTATUSEX *LPMEMORYSTATUSEX;

/* 8828 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_JOINSWAPGROUP)(unsigned int *, unsigned int *, unsigned int, int);

/* 8829 */
typedef unsigned __int16 FxTrailElemHandle;

/* 8830 */
typedef unsigned int ID3D10Device1;

/* 8831 */
typedef unsigned __int16 LANGID;

/* 8832 */
typedef unsigned __int16 _ino_t;

/* 8833 */
typedef char *png_charp;

/* 8834 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCMAPVERTEXBUFFER)(unsigned int *, unsigned int *, void *);

/* 8835 */
typedef unsigned int (__stdcall *PFLS_ALLOC_FUNCTION)(void (__stdcall *)(void *));

/* 8836 */
typedef void (__cdecl *BuiltinFunction)();

/* 8837 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETEYESEPARATION)(void *, float *);

/* 8838 */
typedef unsigned int FxUniqueHandle;

/* 8839 */
typedef char **png_charpp;

/* 8840 */
typedef void (__cdecl *ClientFieldCodeCallbackFuncUintVal)(LocalClientNum_t, unsigned int, unsigned int, unsigned int, bool, bool, const char *, bool);

/* 8841 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETIRQ)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8842 */
typedef _MEMORYSTATUS *LPMEMORYSTATUS;

/* 8843 */
typedef void (__stdcall *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *, unsigned int);

/* 8844 */
typedef wchar_t *BSTR;

/* 8845 */
typedef int (__stdcall *LPDDENUMCALLBACKEX)(_GUID *, char *, char *, void *, HMONITOR__ *);

/* 8846 */
typedef void *png_voidp;

/* 8847 */
typedef _KDHELP64 *PKDHELP64;

/* 8848 */
typedef void *HServerListRequest;

/* 8849 */
typedef char uint8_t;

/* 8850 */
typedef void (__cdecl *PEXCEPTION_HANDLER)();

/* 8851 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVIDEOSTATE)(NvDisplayHandle__ *, _NVAPI_GET_VIDEO_STATE_COMPONENT *);

/* 8852 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_GETPOWERSTEERINGSTATUS)(NV_GPS_PS_STATUS *);

/* 8853 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETECCCONFIGURATION)(NvPhysicalGpuHandle__ *, char, char);

/* 8854 */
typedef _XMMATRIX *CXMMATRIX;

/* 8855 */
typedef wchar_t *LPWSTR;

/* 8856 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVBIOSOEMREVISION)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8857 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_DESTROYPATHCONTEXTNV)(unsigned int);

/* 8858 */
typedef __int16 BGEmblemIconID;

/* 8859 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_GETAPPLICATIONCOPROCINFO)(NV_COPROC_APP_INFO *);

/* 8860 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETDYNAMICPSTATESINFOEX)(NvPhysicalGpuHandle__ *, NV_GPU_DYNAMIC_PSTATES_INFO_EX *);

/* 8861 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETCOLORSPACECONVERSION)(unsigned int, _NV_GPU_COLORSPACE_CONVERSION_V1 *);

/* 8862 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETINVALIDGPUTOPOLOGIES)(NV_GPU_TOPOLOGIES *);

/* 8863 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_BEGINSHARERESOURCEEX)(unsigned int *, unsigned int, void **);

/* 8864 */
typedef VehicleDef *(__cdecl *vehicle_def)(LocalClientNum_t, playerState_s *);

/* 8865 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPERGPUTOPOLOGYSTATUS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8866 */
typedef _PEB_FREE_BLOCK *PPEB_FREE_BLOCK;

/* 8867 */
typedef unsigned int bdUWord;

/* 8868 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETVIDEOSTATE)(NvDisplayHandle__ *, _NVAPI_SET_VIDEO_STATE_COMPONENT *);

/* 8869 */
typedef IDirectSoundCaptureBuffer *LPDIRECTSOUNDCAPTUREBUFFER;

/* 8870 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_SETPOWERSTEERINGSTATUS)(NV_GPS_PS_STATUS);

/* 8871 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERPOLICIESGETSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_POLICIES_STATUS_V1 *);

/* 8872 */
typedef int *PLONG;

/* 8873 */
typedef unsigned int BD_UWORD;

/* 8874 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCOLORSPACECONVERSION)(unsigned int, _NV_GPU_COLORSPACE_CONVERSION_V1 *);

/* 8875 */
typedef unsigned int ULONG;

/* 8876 */
typedef unsigned int uLong;

/* 8877 */
typedef unsigned __int64 bdTeamID;

/* 8878 */
typedef LocalTaskState (__cdecl *localTaskfunc)(TaskRecord *);

/* 8879 */
typedef WeaponAttachmentUnique *WeaponAttachmentUniquePtr;

/* 8880 */
typedef char *LPTSTR;

/* 8881 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DISABLE)();

/* 8882 */
typedef HRESULT (__stdcall *LPDIRECTDRAWCREATEEX)(_GUID *, void **, _GUID *, IUnknown *);

/* 8883 */
typedef unsigned int PackageId_t;

/* 8884 */
typedef char lgrid_color_game;

/* 8885 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETCHIPSETTOPOLOGYSTATUS)(unsigned int *);

/* 8886 */
typedef char min_msg_buf_char[2048];

/* 8887 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMAPPLICATIONS)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int, unsigned int *, _NVDRS_APPLICATION_V2 *);

/* 8888 */
typedef void (__cdecl *PMFN)();

/* 8889 */
typedef int ptrdiff_t;

/* 8890 */
typedef bool (__cdecl *queryPacketHandler)(netadr_t, msg_t *);

/* 8891 */
typedef int (__stdcall *LPDDENUMCALLBACKEXA)(_GUID *, char *, char *, void *, HMONITOR__ *);

/* 8892 */
typedef unsigned __int64 bdOnlineUserID;

/* 8893 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_ENDRESOURCERENDERING)(IUnknown *, NVDX_ObjectHandle__ *, unsigned int);

/* 8894 */
typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK2)(_DDSURFACEDESC2 *, void *);

/* 8895 */
typedef char bdMessageType;

/* 8896 */
typedef char largeLocalBufArray[524288];

/* 8897 */
typedef float SndRvDelayType;

/* 8898 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_STOP)(NvVioHandle__ *);

/* 8899 */
typedef char statsParityBuffer_t[4096];

/* 8900 */
typedef char BOOLEAN;

/* 8901 */
typedef char boolean;

/* 8902 */
typedef _tiddata *_ptiddata;

/* 8903 */
typedef char minizAllocBuffer_t[131072];

/* 8904 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURAGETPOWERREADING)(_NVAPI_VENTURA_DEVICE, unsigned int *);

/* 8905 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETCURRENTRENDERTARGETHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 8906 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETVERTEXBUFFERHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 8907 */
typedef unsigned int objBufEntry[31];

/* 8908 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHENABLECOLORWRITENV)(unsigned int, bool);

/* 8909 */
typedef void (__cdecl *Free_t)(void *);

/* 8910 */
typedef NvPhysicalGpuHandle__ *NvPhysicalGpuHandle;

/* 8911 */
typedef HMENU__ *HMENU;

/* 8912 */
typedef unsigned __int16 FLAC__uint16;

/* 8913 */
typedef void (__cdecl *vp8_subpix_fn_t)(char *, int, int, int, char *, int);

/* 8914 */
typedef NVDX_SwapChainHandle__ *NVDX_SwapChainHandle;

/* 8915 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 8916 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 8917 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 8918 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 8919 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 8920 */
#pragma pack(push, 1)
struct type_info
{
  void *vftable;
  int _m_data;
  char _m_d_name[];
};
#pragma pack(pop)

/* 8921 */
#pragma pack(push, 1)
struct PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};
#pragma pack(pop)

/* 8922 */
#pragma pack(push, 1)
struct RTTIBaseClassDescriptor
{
  void *pTypeDescriptor;
  int numContainedBases;
  PMD pmd;
  int attributes;
};
#pragma pack(pop)

/* 8923 */
#pragma pack(push, 1)
struct RTTIClassHierarchyDescriptor
{
  int signature;
  int attributes;
  int numBaseClasses;
  void *pBaseClassArray;
};
#pragma pack(pop)

/* 8924 */
#pragma pack(push, 1)
struct RTTICompleteObjectLocator
{
  int signature;
  int offset;
  int cdOffset;
  void *pTypeDescriptor;
  void *pClassDescriptor;
};
#pragma pack(pop)

/* 8925 */
#pragma pack(push, 1)
struct RTCI
{
  void *m_lpszClassName;
  int m_nObjectSize;
  int m_wSchema;
  void *m_pfnCreateObject;
  void *m_pfnGetBaseClass;
  int m_pNextClass;
  int m_pClassInit;
};
#pragma pack(pop)

