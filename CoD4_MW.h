/*
   This file has been generated by IDA Pro.
   It contains local type definitions from
   COD4A_PDBLoaded.idb
*/

/*    1 */
enum _D3DSAMPLERSTATETYPE
{
  D3DSAMP_ADDRESSU = 0x0,
  D3DSAMP_ADDRESSV = 0x4,
  D3DSAMP_ADDRESSW = 0x8,
  D3DSAMP_BORDERCOLOR = 0xC,
  D3DSAMP_MAGFILTER = 0x10,
  D3DSAMP_MINFILTER = 0x14,
  D3DSAMP_MIPFILTER = 0x18,
  D3DSAMP_MIPMAPLODBIAS = 0x1C,
  D3DSAMP_MAXMIPLEVEL = 0x20,
  D3DSAMP_MAXANISOTROPY = 0x24,
  D3DSAMP_MAGFILTERZ = 0x28,
  D3DSAMP_MINFILTERZ = 0x2C,
  D3DSAMP_SEPARATEZFILTERENABLE = 0x30,
  D3DSAMP_MINMIPLEVEL = 0x34,
  D3DSAMP_TRILINEARTHRESHOLD = 0x38,
  D3DSAMP_ANISOTROPYBIAS = 0x3C,
  D3DSAMP_HGRADIENTEXPBIAS = 0x40,
  D3DSAMP_VGRADIENTEXPBIAS = 0x44,
  D3DSAMP_WHITEBORDERCOLORW = 0x48,
  D3DSAMP_POINTBORDERENABLE = 0x4C,
  D3DSAMP_MAX = 0x50,
  D3DSAMP_FORCE_DWORD = 0x7FFFFFFF,
};

/*    2 */
enum DCPERFEVENT
{
  GPUPE_DMIF_PER_DCREQ_EVENT = 0x0,
  GPUPE_DMIF_PER_DCGRPH_REQ_EVENT = 0x1,
  GPUPE_DMIF_PER_DCOVL_REQ_EVENT = 0x2,
  GPUPE_DMIF_PER_DCREQ_SIZE_EVENT = 0x3,
  GPUPE_DMIF_PER_DCGRPH_REQ_SIZE_EVENT = 0x4,
  GPUPE_DMIF_PER_DCOVL_REQ_SIZE_EVENT = 0x5,
  GPUPE_DMIF_PER_DCSURFACE_UPDATE_EVENT = 0x6,
  GPUPE_DMIF_PER_DC_MH_REQ_EVENT = 0x7,
  GPUPE_DMIF_PER_DC_MH_D1GRPH_REQ_EVENT = 0x8,
  GPUPE_DMIF_PER_DC_MH_D1OVL_REQ_EVENT = 0x9,
  GPUPE_DMIF_PER_DC_MH_REQ_SIZE_EVENT = 0xA,
  GPUPE_DMIF_PER_DC_MH_D1GRPH_REQ_SIZE_EVENT = 0xB,
  GPUPE_DMIF_PER_DC_MH_D1OVL_REQ_SIZE_EVENT = 0xC,
  GPUPE_DMIF_PER_DC_MH_SURFACE_UPDATE_EVENT = 0xD,
  GPUPE_DMIF_PER_MH_DC_RTR_EVENT = 0xE,
  GPUPE_DMIF_PER_CMD_PROC_WAIT_RTR_STATE_EVENT = 0xF,
  GPUPE_DMIF_PER_CMD_PROC_IDLE_STATE_EVENT = 0x10,
  GPUPE_DMIF_PER_DC_MH_URGENT_EVENT = 0x11,
  GPUPE_DMIF_PER_MH_DC_SEND_EVENT = 0x12,
  GPUPE_DMIF_PER_MH_DC_SEND_D1GRPH_EVENT = 0x13,
  GPUPE_DMIF_PER_MH_DC_SEND_D1OVL_EVENT = 0x14,
  GPUPE_DMIF_PER_DC_MH_RTR_EVENT = 0x15,
  GPUPE_DMIF_PER_DMIF_BUSY_EVENT = 0x16,
  GPUPE_DMIF_PER_DMIF_BUSY_MH_DC_SEND_EVENT = 0x17,
  GPUPE_DMIF_PER_DMIF_BUSY_DC_MH_RTR_EVENT = 0x18,
  GPUPE_DMIF_PER_DMIF_DCSEND_EVENT = 0x19,
  GPUPE_DMIF_PER_DMIF_DCNOT_RTS_EVENT = 0x1A,
  GPUPE_DMIF_PER_DCDMIF_NOT_RTR_EVENT = 0x1B,
  GPUPE_DCP_PER_LUT_HOST_RW_EVENT = 0x1C,
  GPUPE_DCP_PER_LUT_RW_BY_HOST_EVENT = 0x1D,
  GPUPE_DCP_PER_RTR_LOW_BY_LUT_HOST_RW_EVENT = 0x1E,
  GPUPE_DCCG_PER_SCLK_R_RBBMIF_CLOCK_ON_EVENT = 0x1F,
  GPUPE_DCCG_PER_SCLK_R_DISCLOCK_ON_EVENT = 0x20,
  GPUPE_DCCG_PER_SCLK_G_SCL_CLOCK_ON_EVENT = 0x21,
  GPUPE_DCCG_PER_SCLK_G_DCCLOCK_ON_EVENT = 0x22,
  GPUPE_DCCG_PER_PCLK_CRTC_CLOCK_ON_EVENT = 0x23,
  GPUPE_DCCG_PER_DVOACLK_C_CLOCK_ON_EVENT = 0x24,
  GPUPE_DCCG_PER_DVOACLK_D_CLOCK_ON_EVENT = 0x25,
  GPUPE_CRTC1_PER_START_LINE_EVENT = 0x26,
  GPUPE_CRTC1_PER_HSYNC_A_EVENT = 0x27,
  GPUPE_CRTC1_PER_VSYNC_A_EVENT = 0x28,
  GPUPE_CRTC1_PER_H_DATA_ACTIVE_EVENT = 0x29,
  GPUPE_CRTC1_PER_V_DATA_ACTIVE_EVENT = 0x2A,
  GPUPE_CRTC1_PER_DATA_ACTIVE_EVENT = 0x2B,
  GPUPE_CRTC1_PER_H_BLANK_EVENT = 0x2C,
  GPUPE_CRTC1_PER_V_BLANK_EVENT = 0x2D,
  GPUPE_CRTC1_PER_BLANK_EVENT = 0x2E,
  GPUPE_CRTC1_PER_INTERLACE_SELECT_EVENT = 0x2F,
  GPUPE_CRTC1_PER_STEREO_SELECT_EVENT = 0x30,
  GPUPE_SCL1_PER_HOST_CONFLICT_EVENT = 0x31,
  GPUPE_SCL1_PER_ADVANCE_FILTER_POS_EVENT = 0x32,
  GPUPE_SCL1_PER_TAINC_EVENT = 0x33,
  GPUPE_SCL1_PER_REQUEST_EOL_EVENT = 0x34,
  GPUPE_SCL1_PER_V_COEF_PRELOAD_EVENT = 0x35,
  GPUPE_SCL1_PER_EOL_EVENT = 0x36,
  GPUPE_SCL1_PER_SOF_EVENT = 0x37,
  GPUPE_LB_PER_DISP1_RESET_REQ_EVENT = 0x38,
  GPUPE_LB_PER_DISP1_REQ_SEND_EVENT = 0x39,
  GPUPE_LB_PER_DISP1_REQ_UNDERFLOW_EVENT = 0x3A,
  GPUPE_LB_PER_DISP1_DATA_UNDERFLOW_EVENT = 0x3B,
  GPUPE_LB_PER_DISP1_URGENT_EVENT = 0x3C,
  GPUPE_LB_PER_DISP1_VBLANK_STAT_EVENT = 0x3D,
  GPUPE_LB_PER_DISP1_VLINE_STAT_EVENT = 0x3E,
  GPUPE_DOUT_PER_SCL_DISP1_MODE_CHANGE_INTERRUPT_EVENT = 0x3F,
  GPUPE_DOUT_PER_LB_D1_VLINE_INTERRUPT_EVENT = 0x40,
  GPUPE_DOUT_PER_LB_D1_VBLANK_INTERRUPT_EVENT = 0x41,
  GPUPE_DOUT_PER_DISTIMER_INTERRUPT_EVENT = 0x42,
  GPUPE_LOGIC1_EVENT = 0x100,
};

/*    3 */
enum GPUPERFEVENT_SQ
{
  GPUPE_SQ_PIXEL_VECTORS_SUB = 0x0,
  GPUPE_SQ_VERTEX_VECTORS_SUB = 0x1,
  GPUPE_SQ_ALU0_ACTIVE_VTX_SIMD0 = 0x2,
  GPUPE_SQ_ALU1_ACTIVE_VTX_SIMD0 = 0x3,
  GPUPE_SQ_ALU0_ACTIVE_PIX_SIMD0 = 0x4,
  GPUPE_SQ_ALU1_ACTIVE_PIX_SIMD0 = 0x5,
  GPUPE_SQ_ALU0_ACTIVE_VTX_SIMD1 = 0x6,
  GPUPE_SQ_ALU1_ACTIVE_VTX_SIMD1 = 0x7,
  GPUPE_SQ_ALU0_ACTIVE_PIX_SIMD1 = 0x8,
  GPUPE_SQ_ALU1_ACTIVE_PIX_SIMD1 = 0x9,
  GPUPE_SQ_EXPORT_CYCLES = 0xA,
  GPUPE_SQ_ALU_CST_WRITTEN = 0xB,
  GPUPE_SQ_TEX_CST_WRITTEN = 0xC,
  GPUPE_SQ_ALU_CST_STALL = 0xD,
  GPUPE_SQ_ALU_TEX_STALL = 0xE,
  GPUPE_SQ_INST_WRITTEN = 0xF,
  GPUPE_SQ_BOOLEAN_WRITTEN = 0x10,
  GPUPE_SQ_LOOPS_WRITTEN = 0x11,
  GPUPE_SQ_PIXEL_SWAP_IN = 0x12,
  GPUPE_SQ_PIXEL_SWAP_OUT = 0x13,
  GPUPE_SQ_VERTEX_SWAP_IN = 0x14,
  GPUPE_SQ_VERTEX_SWAP_OUT = 0x15,
  GPUPE_SQ_ALU_VTX_INST_ISSUED = 0x16,
  GPUPE_SQ_TEX_VTX_INST_ISSUED = 0x17,
  GPUPE_SQ_VC_VTX_INST_ISSUED = 0x18,
  GPUPE_SQ_CF_VTX_INST_ISSUED = 0x19,
  GPUPE_SQ_ALU_PIX_INST_ISSUED = 0x1A,
  GPUPE_SQ_TEX_PIX_INST_ISSUED = 0x1B,
  GPUPE_SQ_VC_PIX_INST_ISSUED = 0x1C,
  GPUPE_SQ_CF_PIX_INST_ISSUED = 0x1D,
  GPUPE_SQ_ALU0_FIFO_EMPTY_SIMD0 = 0x1E,
  GPUPE_SQ_ALU1_FIFO_EMPTY_SIMD0 = 0x1F,
  GPUPE_SQ_ALU0_FIFO_EMPTY_SIMD1 = 0x20,
  GPUPE_SQ_ALU1_FIFO_EMPTY_SIMD1 = 0x21,
  GPUPE_SQ_ALU_NOPS = 0x22,
  GPUPE_SQ_PRED_SKIP = 0x23,
  GPUPE_SQ_SYNC_ALU_STALL_SIMD0_VTX = 0x24,
  GPUPE_SQ_SYNC_ALU_STALL_SIMD1_VTX = 0x25,
  GPUPE_SQ_SYNC_TEX_STALL_VTX = 0x26,
  GPUPE_SQ_SYNC_VC_STALL_VTX = 0x27,
  GPUPE_SQ_CONSTANTS_USED_SIMD0 = 0x28,
  GPUPE_SQ_CONSTANTS_SENT_SP_SIMD0 = 0x29,
  GPUPE_SQ_GPR_STALL_VTX = 0x2A,
  GPUPE_SQ_GPR_STALL_PIX = 0x2B,
  GPUPE_SQ_VTX_RS_STALL = 0x2C,
  GPUPE_SQ_PIX_RS_STALL = 0x2D,
  GPUPE_SQ_SX_PC_FULL = 0x2E,
  GPUPE_SQ_SX_EXP_BUFF_FULL = 0x2F,
  GPUPE_SQ_SX_POS_BUFF_FULL = 0x30,
  GPUPE_SQ_INTERP_QUADS = 0x31,
  GPUPE_SQ_INTERP_ACTIVE = 0x32,
  GPUPE_SQ_IN_PIXEL_STALL = 0x33,
  GPUPE_SQ_IN_VTX_STALL = 0x34,
  GPUPE_SQ_VTX_CNT = 0x35,
  GPUPE_SQ_VTX_16_VECTOR = 0x36,
  GPUPE_SQ_VTX_32_VECTOR = 0x37,
  GPUPE_SQ_VTX_48_VECTOR = 0x38,
  GPUPE_SQ_PIXEL_16_VECTOR = 0x39,
  GPUPE_SQ_PIXEL_32_VECTOR = 0x3A,
  GPUPE_SQ_PIXEL_48_VECTOR = 0x3B,
  GPUPE_SQ_CONSTANTS_USED_SIMD1 = 0x3C,
  GPUPE_SQ_CONSTANTS_SENT_SP_SIMD1 = 0x3D,
  GPUPE_SQ_SX_MEM_EXP_FULL = 0x3E,
  GPUPE_SQ_ALU0_ACTIVE_VTX_SIMD2 = 0x3F,
  GPUPE_SQ_ALU1_ACTIVE_VTX_SIMD2 = 0x40,
  GPUPE_SQ_ALU0_ACTIVE_PIX_SIMD2 = 0x41,
  GPUPE_SQ_ALU1_ACTIVE_PIX_SIMD2 = 0x42,
  GPUPE_SQ_ALU0_ACTIVE_VTX_SIMD3 = 0x43,
  GPUPE_SQ_ALU1_ACTIVE_VTX_SIMD3 = 0x44,
  GPUPE_SQ_ALU0_ACTIVE_PIX_SIMD3 = 0x45,
  GPUPE_SQ_ALU1_ACTIVE_PIX_SIMD3 = 0x46,
  GPUPE_SQ_ALU0_FIFO_EMPTY_SIMD2 = 0x47,
  GPUPE_SQ_ALU1_FIFO_EMPTY_SIMD2 = 0x48,
  GPUPE_SQ_ALU0_FIFO_EMPTY_SIMD3 = 0x49,
  GPUPE_SQ_ALU1_FIFO_EMPTY_SIMD3 = 0x4A,
  GPUPE_SQ_SYNC_ALU_STALL_SIMD2_VTX = 0x4B,
  GPUPE_SQ_SYNC_ALU_STALL_SIMD3_VTX = 0x4C,
  GPUPE_SQ_SYNC_ALU_STALL_SIMD0_PIX = 0x4D,
  GPUPE_SQ_SYNC_ALU_STALL_SIMD1_PIX = 0x4E,
  GPUPE_SQ_SYNC_ALU_STALL_SIMD2_PIX = 0x4F,
  GPUPE_SQ_SYNC_ALU_STALL_SIMD3_PIX = 0x50,
  GPUPE_SQ_SYNC_TEX_STALL_PIX = 0x51,
  GPUPE_SQ_SYNC_VC_STALL_PIX = 0x52,
  GPUPE_SQ_CONSTANTS_USED_SIMD2 = 0x53,
  GPUPE_SQ_CONSTANTS_SENT_SP_SIMD2 = 0x54,
  GPUPE_SQ_CONSTANTS_USED_SIMD3 = 0x55,
  GPUPE_SQ_CONSTANTS_SENT_SP_SIMD3 = 0x56,
  GPUPE_SQ_ALU0_FIFO_FULL_SIMD0 = 0x57,
  GPUPE_SQ_ALU1_FIFO_FULL_SIMD0 = 0x58,
  GPUPE_SQ_ALU0_FIFO_FULL_SIMD1 = 0x59,
  GPUPE_SQ_ALU1_FIFO_FULL_SIMD1 = 0x5A,
  GPUPE_SQ_ALU0_FIFO_FULL_SIMD2 = 0x5B,
  GPUPE_SQ_ALU1_FIFO_FULL_SIMD2 = 0x5C,
  GPUPE_SQ_ALU0_FIFO_FULL_SIMD3 = 0x5D,
  GPUPE_SQ_ALU1_FIFO_FULL_SIMD3 = 0x5E,
  GPUPE_VC_PERF_STATIC = 0x5F,
  GPUPE_VC_PERF_STALLED = 0x60,
  GPUPE_VC_PERF_STARVED = 0x61,
  GPUPE_VC_PERF_SEND = 0x62,
  GPUPE_VC_PERF_ACTUAL_STARVED = 0x63,
  GPUPE_PIXEL_THREAD_0_ACTIVE = 0x64,
  GPUPE_VERTEX_THREAD_0_ACTIVE = 0x65,
  GPUPE_PIXEL_THREAD_0_NUMBER = 0x66,
  GPUPE_VERTEX_THREAD_0_NUMBER = 0x67,
  GPUPE_VERTEX_EVENT_NUMBER = 0x68,
  GPUPE_PIXEL_EVENT_NUMBER = 0x69,
};

/*    4 */
enum _D3DTEXTUREFILTERTYPE
{
  D3DTEXF_NONE = 0x2,
  D3DTEXF_POINT = 0x0,
  D3DTEXF_LINEAR = 0x1,
  D3DTEXF_ANISOTROPIC = 0x4,
  D3DTEXF_FORCE_DWORD = 0x7FFFFFFF,
};

/*    5 */
enum _D3DTRILINEARTHRESHOLD
{
  D3DTRILINEAR_IMMEDIATE = 0x0,
  D3DTRILINEAR_ONESIXTH = 0x1,
  D3DTRILINEAR_ONEFOURTH = 0x2,
  D3DTRILINEAR_THREEEIGHTHS = 0x3,
  D3DTRILINEAR_FORCE_DWORD = 0x7FFFFFFF,
};

/*    6 */
enum _D3DTAG
{
  D3DTAG_VERTEXSHADERCONSTANTS = 0x4000,
  D3DTAG_PIXELSHADERCONSTANTS = 0x14000,
  D3DTAG_FETCHCONSTANTS = 0x32020,
  D3DTAG_VERTEXFETCHCONSTANTS = 0x3063A,
  D3DTAG_TEXTUREFETCHCONSTANTS = 0x31A20,
  D3DTAG_SHADERFLAGS = 0x2042B,
  D3DTAG_PIXELSHADER = 0x2012B,
  D3DTAG_VERTEXSHADER = 0x2012C,
  D3DTAG_ZPASSEDRAMMODE = 0x2012D,
  D3DTAG_HIZENABLE = 0x2012E,
  D3DTAG_MISCCONSTANTS = 0x40207,
  D3DTAG_FLOWCONSTANTS = 0x40107,
  D3DTAG_RESERVED0 = 0x40108,
  D3DTAG_DESTINATIONPACKET = 0x21006,
  D3DTAG_SURFACEINFO = 0x20106,
  D3DTAG_COLOR0INFO = 0x20107,
  D3DTAG_DEPTHINFO = 0x20108,
  D3DTAG_COLOR1INFO = 0x20109,
  D3DTAG_COLOR2INFO = 0x2010A,
  D3DTAG_COLOR3INFO = 0x2010B,
  D3DTAG_COHERDESTBASE0 = 0x2010C,
  D3DTAG_COHERDESTBASE1 = 0x2010D,
  D3DTAG_COHERDESTBASE2 = 0x2010E,
  D3DTAG_COHERDESTBASE3 = 0x2010F,
  D3DTAG_COHERDESTBASE4 = 0x20110,
  D3DTAG_COHERDESTBASE5 = 0x20111,
  D3DTAG_COHERDESTBASE6 = 0x20112,
  D3DTAG_COHERDESTBASE7 = 0x20113,
  D3DTAG_SCREENSCISSORTL = 0x20114,
  D3DTAG_SCREENSCISSORBR = 0x20115,
  D3DTAG_WINDOWPACKET = 0x4030F,
  D3DTAG_WINDOWOFFSET = 0x4010F,
  D3DTAG_WINDOWSCISSORTL = 0x40110,
  D3DTAG_WINDOWSCISSORBR = 0x40111,
  D3DTAG_VALUESPACKET = 0x21516,
  D3DTAG_MAXVTXINDX = 0x20116,
  D3DTAG_MINVTXINDX = 0x20117,
  D3DTAG_INDXOFFSET = 0x20118,
  D3DTAG_MULTIPRIMIBRESETINDX = 0x20119,
  D3DTAG_COLORMASK = 0x2011A,
  D3DTAG_BLENDRED = 0x2011B,
  D3DTAG_BLENDGREEN = 0x2011C,
  D3DTAG_BLENDBLUE = 0x2011D,
  D3DTAG_BLENDALPHA = 0x2011E,
  D3DTAG_UNUSED_VALUES0 = 0x2011F,
  D3DTAG_UNUSED_VALUES1 = 0x20120,
  D3DTAG_UNUSED_VALUES2 = 0x20121,
  D3DTAG_STENCILREFMASKBF = 0x20122,
  D3DTAG_STENCILREFMASK = 0x20123,
  D3DTAG_ALPHAREF = 0x20124,
  D3DTAG_VPORTXSCALE = 0x20125,
  D3DTAG_VPORTXOFFSET = 0x20126,
  D3DTAG_VPORTYSCALE = 0x20127,
  D3DTAG_VPORTYOFFSET = 0x20128,
  D3DTAG_VPORTZSCALE = 0x20129,
  D3DTAG_VPORTZOFFSET = 0x2012A,
  D3DTAG_PROGRAMPACKET = 0x2052F,
  D3DTAG_PROGRAMCONTROL = 0x2012F,
  D3DTAG_CONTEXTMISC = 0x20130,
  D3DTAG_INTERPOLATORCONTROL = 0x20131,
  D3DTAG_WRAPPING0 = 0x20132,
  D3DTAG_WRAPPING1 = 0x20133,
  D3DTAG_CONTROLPACKET = 0x20C34,
  D3DTAG_DEPTHCONTROL = 0x20134,
  D3DTAG_BLENDCONTROL0 = 0x20135,
  D3DTAG_COLORCONTROL = 0x20136,
  D3DTAG_HICONTROL = 0x20137,
  D3DTAG_CLIPCONTROL = 0x20138,
  D3DTAG_MODECONTROL = 0x20139,
  D3DTAG_VTECONTROL = 0x2013A,
  D3DTAG_UNUSED_CONTROL0 = 0x2013B,
  D3DTAG_EDRAMMODECONTROL = 0x2013C,
  D3DTAG_BLENDCONTROL1 = 0x2013D,
  D3DTAG_BLENDCONTROL2 = 0x2013E,
  D3DTAG_BLENDCONTROL3 = 0x2013F,
  D3DTAG_TESSELLATORPACKET = 0x31509,
  D3DTAG_POINTSIZE = 0x30109,
  D3DTAG_POINTMINMAX = 0x3010A,
  D3DTAG_LINECONTROL = 0x3010B,
  D3DTAG_LINESTIPPLE = 0x3010C,
  D3DTAG_OUTPUTPATHCONTROL = 0x3010D,
  D3DTAG_HOSCONTROL = 0x3010E,
  D3DTAG_HOSMAXTESSLEVEL = 0x3010F,
  D3DTAG_HOSMINTESSLEVEL = 0x30110,
  D3DTAG_HOSREUSEDEPTH = 0x30111,
  D3DTAG_GROUPPRIMTYPE = 0x30112,
  D3DTAG_GROUPFIRSTDECR = 0x30113,
  D3DTAG_GROUPDECR = 0x30114,
  D3DTAG_GROUPVECT0CONTROL = 0x30115,
  D3DTAG_GROUPVECT1CONTROL = 0x30116,
  D3DTAG_GROUPVECT0FMTCONTROL = 0x30117,
  D3DTAG_GROUPVECT1FMTCONTROL = 0x30118,
  D3DTAG_UNUSED_TESSELLATOR0 = 0x30119,
  D3DTAG_UNUSED_TESSELLATOR1 = 0x3011A,
  D3DTAG_MPASSPSCONTROL = 0x3011B,
  D3DTAG_VIZQUERY = 0x3011C,
  D3DTAG_ENHANCE = 0x3011D,
  D3DTAG_MISCPACKET = 0x4261A,
  D3DTAG_SCLINECONTROL = 0x4011A,
  D3DTAG_AACONFIG = 0x4011B,
  D3DTAG_VTXCONTROL = 0x4011C,
  D3DTAG_GBVERTCLIPADJ = 0x4011D,
  D3DTAG_GBVERTDISCADJ = 0x4011E,
  D3DTAG_GBHORZCLIPADJ = 0x4011F,
  D3DTAG_GBHORZDISCADJ = 0x40120,
  D3DTAG_VSCONST = 0x40121,
  D3DTAG_PSCONST = 0x40122,
  D3DTAG_DEBUGMISC0 = 0x40123,
  D3DTAG_DEBUGMISC1 = 0x40124,
  D3DTAG_UNUSED_MISC0 = 0x40125,
  D3DTAG_UNUSED_MISC1 = 0x40126,
  D3DTAG_UNUSED_MISC2 = 0x40127,
  D3DTAG_UNUSED_MISC3 = 0x40128,
  D3DTAG_UNUSED_MISC4 = 0x40129,
  D3DTAG_UNUSED_MISC5 = 0x4012A,
  D3DTAG_UNUSED_MISC6 = 0x4012B,
  D3DTAG_AAMASK = 0x4012C,
  D3DTAG_UNUSED_MISC7 = 0x4012D,
  D3DTAG_UNUSED_MISC8 = 0x4012E,
  D3DTAG_UNUSED_MISC9 = 0x4012F,
  D3DTAG_VERTEXREUSEBLOCKCONTROL = 0x40130,
  D3DTAG_OUTDEALLOCCONTROL = 0x40131,
  D3DTAG_COPYCONTROL = 0x40132,
  D3DTAG_COPYDESTBASE = 0x40133,
  D3DTAG_COPYDESTPITCH = 0x40134,
  D3DTAG_COPYDESTINFO = 0x40135,
  D3DTAG_HICLEAR = 0x40136,
  D3DTAG_DEPTHCLEAR = 0x40137,
  D3DTAG_COLORCLEAR = 0x40138,
  D3DTAG_COLORCLEARLO = 0x40139,
  D3DTAG_COPYFUNC = 0x4013A,
  D3DTAG_COPYREF = 0x4013B,
  D3DTAG_COPYMASK = 0x4013C,
  D3DTAG_COPYSURFACESLICE = 0x4013D,
  D3DTAG_SAMPLECOUNTCONTROL = 0x4013E,
  D3DTAG_SAMPLECOUNTADDRESS = 0x4013F,
  D3DTAG_POINTPACKET = 0x40812,
  D3DTAG_POLYOFFSETFRONTSCALE = 0x40112,
  D3DTAG_POLYOFFSETFRONTOFFSET = 0x40113,
  D3DTAG_POLYOFFSETBACKSCALE = 0x40114,
  D3DTAG_POLYOFFSETBACKOFFSET = 0x40115,
  D3DTAG_POINTXRAD = 0x40116,
  D3DTAG_POINTYRAD = 0x40117,
  D3DTAG_POINTCONSTANTSIZE = 0x40118,
  D3DTAG_POINTCULLRAD = 0x40119,
  D3DTAG_CLIPPLANES = 0x40609,
  D3DTAG_CLIPPLANE0 = 0x40109,
  D3DTAG_CLIPPLANE1 = 0x4010A,
  D3DTAG_CLIPPLANE2 = 0x4010B,
  D3DTAG_CLIPPLANE3 = 0x4010C,
  D3DTAG_CLIPPLANE4 = 0x4010D,
  D3DTAG_CLIPPLANE5 = 0x4010E,
  D3DTAG_TERMINATOR = 0x4010F,
};

/*    7 */
enum _D3DDECLUSAGE
{
  D3DDECLUSAGE_POSITION = 0x0,
  D3DDECLUSAGE_BLENDWEIGHT = 0x1,
  D3DDECLUSAGE_BLENDINDICES = 0x2,
  D3DDECLUSAGE_NORMAL = 0x3,
  D3DDECLUSAGE_PSIZE = 0x4,
  D3DDECLUSAGE_TEXCOORD = 0x5,
  D3DDECLUSAGE_TANGENT = 0x6,
  D3DDECLUSAGE_BINORMAL = 0x7,
  D3DDECLUSAGE_TESSFACTOR = 0x8,
  D3DDECLUSAGE_COLOR = 0xA,
  D3DDECLUSAGE_FOG = 0xB,
  D3DDECLUSAGE_DEPTH = 0xC,
  D3DDECLUSAGE_SAMPLE = 0xD,
};

/*    8 */
enum _D3DXMESHDATATYPE
{
  D3DXMESHTYPE_MESH = 0x1,
  D3DXMESHTYPE_PMESH = 0x2,
  D3DXMESHTYPE_PATCHMESH = 0x3,
  D3DXMESHTYPE_FORCE_DWORD = 0x7FFFFFFF,
};

/*    9 */
enum BIUPERFEVENT
{
  BIUPE_RECV_REQUESTS = 0x0,
  BIUPE_RECV_RESPONSES = 0x1,
  BIUPE_IOC_READS = 0x2,
  BIUPE_IOC_WRITES = 0x3,
  BIUPE_MEM_READS = 0x4,
  BIUPE_MEM_WRITES = 0x5,
  BIUPE_FSB_SYNCS = 0x6,
  BIUPE_EIEIOS = 0x7,
  BIUPE_EOIS = 0x8,
  BIUPE_FLUSH_ACKS = 0x9,
  BIUPE_REQUEST_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER = 0xA,
  BIUPE_REQUEST_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER = 0xB,
  BIUPE_REQUEST_WRITE_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER = 0xC,
  BIUPE_REQUEST_WRITE_DATA_BYTES_16_BYTE_AND_MORE_TRANSFER_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER = 0xD,
  BIUPE_RESERVED0 = 0xE,
  BIUPE_XMIT_REQUESTS = 0xF,
  BIUPE_XMIT_RESPONSES = 0x10,
  BIUPE_READ128S = 0x11,
  BIUPE_FLUSH_REQ_READS = 0x12,
  BIUPE_FLUSH_REQ_WRITES = 0x13,
  BIUPE_CPUWB = 0x14,
  BIUPE_INTERRUPTS = 0x15,
  BIUPE_RESPONSES_MC0 = 0x16,
  BIUPE_RESPONSES_MC1 = 0x17,
  BIUPE_RESPONSES_IOC_MST = 0x18,
  BIUPE_MC0_RESPONSE_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_ = 0x19,
  BIUPE_MC0_RESPONSE_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_ = 0x1A,
  BIUPE_MC1_RESPONSE_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_ = 0x1B,
  BIUPE_MC1_RESPONSE_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_ = 0x1C,
  BIUPE_IOC_MST_RESPONSE_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_ = 0x1D,
  BIUPE_IOC_MST_RESPONSE_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_ = 0x1E,
  BIUPE_RESERVED1A = 0x1F,
  BIUPE_RESERVED2A = 0x20,
  BIUPE_RESERVED3A = 0x21,
  BIUPE_RESERVED4A = 0x22,
  BIUPE_RESERVED5A = 0x23,
  BIUPE_RESERVED6A = 0x24,
  BIUPE_RESERVED7A = 0x25,
  BIUPE_RESERVED8A = 0x26,
  BIUPE_RESERVED9A = 0x27,
  BIUPE_REQUESTS = 0x28,
  BIUPE_IOC_MAST_READS = 0x29,
  BIUPE_IOC_MAST_WRITES = 0x2A,
  BIUPE_IOC_MAST_EOIS = 0x2B,
  BIUPE_IOC_MAST_REQUEST_READ_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER = 0x2C,
  BIUPE_IOC_MAST_REQUEST_READ_DATA_BYTES_16_BYTE_AND_MORE_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER = 0x2D,
  BIUPE_IOC_MAST_REQUEST_WRITE_DATA_BYTES_8_BYTE_AND_LESS_TRANSFERS_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER = 0x2E,
  BIUPE_IOC_MAST_REQUEST_WRITE_DATA_BYTES_16_BYTE_AND_MORE_TRANSFER_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER = 0x2F,
  BIUPE_RESERVED10 = 0x30,
  BIUPE_RESERVED11 = 0x31,
  BIUPE_IOC_SLV_REQUESTS = 0x32,
  BIUPE_IOC_SLV_SNOOP_READS = 0x33,
  BIUPE_IOC_SLV_SNOOP_WRITES = 0x34,
  BIUPE_IOC_SLV_INTERRUPTS = 0x35,
  BIUPE_IOC_SLV_SYNCS = 0x36,
  BIUPE_IOC_SLV_SNOOP_READS_NS = 0x37,
  BIUPE_IOC_SLV_SNOOP_WRITES_NS = 0x38,
  BIUPE_IOC_SLV_CPUWBS = 0x39,
  BIUPE_IOC_SLV_REQUEST_READ_DATA_BYTES_DIVIDED_BY_4_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_ = 0x3A,
  BIUPE_IOC_SLV_REQUEST_WRITE_DATA_BYTES_DIVIDED_BY_4_DEPENDENT_ON_SECONDARY_CONTROL_REGISTER_ = 0x3B,
  BIUPE_IOC_SLV_RESPONSES_BEATS_ = 0x3C,
  BIUPE_IOC_SLV_RESP_READ_DATA_BYTES_DIVIDED_BY_4_ = 0x3D,
  BIUPE_IOC_SLV_SYNCCLEANS = 0x3E,
  BIUPE_RESERVED12 = 0x3F,
  BIUPE_RESERVED13 = 0x40,
  BIUPE_RESERVED14 = 0x41,
  BIUPE_RESERVED15 = 0x42,
  BIUPE_RESERVED16 = 0x43,
  BIUPE_RESERVED17 = 0x44,
  BIUPE_RESERVED18 = 0x45,
  BIUPE_MC_0_FAST_PATH_CPU_READS = 0x46,
  BIUPE_MC_0_ORDERED_CPU_PATH_READS = 0x47,
  BIUPE_MC_0_ORDERED_CPU_PATH_WRITES = 0x48,
  BIUPE_MC_0_ORDERED_IOC_PATH_READS = 0x49,
  BIUPE_MC_0_ORDERED_IOC_PATH_WRITES = 0x4A,
  BIUPE_MC_0_SYNC_A = 0x4B,
  BIUPE_MC_0_SYNC_B = 0x4C,
  BIUPE_RESERVED19 = 0x4D,
  BIUPE_RESERVED20 = 0x4E,
  BIUPE_RESERVED21 = 0x4F,
  BIUPE_MC_1_FAST_PATH_CPU_READS = 0x50,
  BIUPE_MC_1_ORDERED_CPU_PATH_READS = 0x51,
  BIUPE_MC_1_ORDERED_CPU_PATH_WRITES = 0x52,
  BIUPE_MC_1_ORDERED_IOC_PATH_READS = 0x53,
  BIUPE_MC_1_ORDERED_IOC_PATH_WRITES = 0x54,
  BIUPE_MC_1_SYNC_A = 0x55,
  BIUPE_MC_1_SYNC_B = 0x56,
  BIUPE_MCQF_NEARFULL = 0x64,
  BIUPE_MCQDF_NEARFULL = 0x65,
  BIUPE_IMQF_NEARFULL = 0x66,
  BIUPE_PSF_NEARFULL = 0x67,
  BIUPE_M0SF_NEARFULL = 0x68,
  BIUPE_M1SF_NEARFULL = 0x69,
  BIUPE_IMSF_NEARFULL = 0x6A,
  BIUPE_IMSDF_NEARFULL = 0x6B,
  BIUPE_ISQF_NEARFULL = 0x6C,
  BIUPE_ISSF_NEARFULL = 0x6D,
  BIUPE_ISYF_NEARFULL = 0x6E,
  BIUPE_CPYF_NEARFULL = 0x6F,
  BIUPE_PQF_NEARFULL = 0x70,
  BIUPE_TOTAL_MEMORY_LATENCY_FAST_READS_MUST_BE_DIVIDED_BY_MEM_READ_REQUESTS_FOR_AVERAGE_LATENCY = 0x8C,
  BIUPE_TOTAL_MEMORY_LATENCY_ORDERED_CPU_READS_MUST_BE_DIVIDED_BY_MEM_READ_REQUESTS_FOR_AVERAGE_LATENCY = 0x8D,
  BIUPE_TOTAL_MEMORY_LATENCY_ORDERED_IOC_READS_MUST_BE_DIVIDED_BY_MEM_READ_REQUESTS_FOR_AVERAGE_LATENCY = 0x8E,
  BIUPE_TOTAL_FLUSH_LATENCY_FOR_SNOOP_READS_MUST_BE_DIVIED_BY_FLUSH_REQUESTS_FOR_AVERAGE_LATENCY = 0x8F,
  BIUPE_TOTAL_FLUSH_LATENCY_FOR_SNOOP_WRITES_MUST_BE_DIVIED_BY_FLUSH_REQUESTS_FOR_AVERAGE_LATENCY = 0x90,
  BIUPE_SNOOP_COMPLETION_BUFFER_FULL = 0x91,
  BIUPE_RESERVED62 = 0x92,
  BIUPE_RESERVED63 = 0x93,
  BIUPE_RESERVED64 = 0x94,
  BIUPE_RESERVED65 = 0x95,
  BIUPE_MC0_SLOW_CREDIT_COUNT_IS_ZERO = 0x96,
  BIUPE_MC1_SLOW_CREDIT_COUNT_IS_ZERO = 0x97,
  BIUPE_MC0_FAST_CREDIT_COUNT_IS_ZERO = 0x98,
  BIUPE_MC1_FAST_CREDIT_COUNT_IS_ZERO = 0x99,
  BIUPE_RESERVED66 = 0x9A,
  BIUPE_RESERVED67 = 0x9B,
  BIUPE_FSB_SLV_REQ_STALL_FOR_COMMAND_CREDITS = 0x9C,
  BIUPE_FSB_SLV_REQ_STALL_FOR_DATA_CREDITS = 0x9D,
  BIUPE_FSB_PG_REQ_STALL_FOR_CMD_CREDITS = 0x9E,
  BIUPE_SCLK_COUNTS_SCLKS_IN_THE_MCLK_DOMAIN_ = 0xC8,
  BIUPE_IOC_MASTER_REQ_STALL_BIU_HAS_DATA_BUT_IOC_NOT_READY_SCLK_DOMAIN_ = 0xC9,
  BIUPE_IOC_SLAVE_RSP_STALL_SCLK_DOMAIN_ = 0xCA,
  BIUPE_INCREMENT_BY_0_DISABLE_COUNT = 0xFC,
  BIUPE_INCREMENT_BY_1_USED_TO_COUNT_CLOCKS = 0xFD,
  BIUPE_INCREMENT_BY_63_USED_FOR_SIMULATION_TO_RAPIDLY_INCREMENT_COUNTER = 0xFE,
  BIUPE_OTHERS = 0xFF,
};

/*   10 */
enum _D3DDECLMETHOD
{
  D3DDECLMETHOD_DEFAULT = 0x0,
  D3DDECLMETHOD_PARTIALU = 0x1,
  D3DDECLMETHOD_PARTIALV = 0x2,
  D3DDECLMETHOD_CROSSUV = 0x3,
  D3DDECLMETHOD_UV = 0x4,
  D3DDECLMETHOD_LOOKUP = 0x5,
  D3DDECLMETHOD_LOOKUPPRESAMPLED = 0x6,
};

/*   11 */
enum _SID_NAME_USE
{
  SidTypeUser = 0x1,
  SidTypeGroup = 0x2,
  SidTypeDomain = 0x3,
  SidTypeAlias = 0x4,
  SidTypeWellKnownGroup = 0x5,
  SidTypeDeletedAccount = 0x6,
  SidTypeInvalid = 0x7,
  SidTypeUnknown = 0x8,
  SidTypeComputer = 0x9,
};

/*   12 */
enum _D3DDECLTYPE
{
  D3DDECLTYPE_FLOAT1 = 0x2C83A4,
  D3DDECLTYPE_FLOAT2 = 0x2C23A5,
  D3DDECLTYPE_FLOAT3 = 0x2A23B9,
  D3DDECLTYPE_FLOAT4 = 0x1A23A6,
  D3DDECLTYPE_INT1 = 0x2C83A1,
  D3DDECLTYPE_INT2 = 0x2C23A2,
  D3DDECLTYPE_INT4 = 0x1A23A3,
  D3DDECLTYPE_UINT1 = 0x2C82A1,
  D3DDECLTYPE_UINT2 = 0x2C22A2,
  D3DDECLTYPE_UINT4 = 0x1A22A3,
  D3DDECLTYPE_INT1N = 0x2C81A1,
  D3DDECLTYPE_INT2N = 0x2C21A2,
  D3DDECLTYPE_INT4N = 0x1A21A3,
  D3DDECLTYPE_UINT1N = 0x2C80A1,
  D3DDECLTYPE_UINT2N = 0x2C20A2,
  D3DDECLTYPE_UINT4N = 0x1A20A3,
  D3DDECLTYPE_D3DCOLOR = 0x182886,
  D3DDECLTYPE_UBYTE4 = 0x1A2286,
  D3DDECLTYPE_BYTE4 = 0x1A2386,
  D3DDECLTYPE_UBYTE4N = 0x1A2086,
  D3DDECLTYPE_BYTE4N = 0x1A2186,
  D3DDECLTYPE_SHORT2 = 0x2C2359,
  D3DDECLTYPE_SHORT4 = 0x1A235A,
  D3DDECLTYPE_USHORT2 = 0x2C2259,
  D3DDECLTYPE_USHORT4 = 0x1A225A,
  D3DDECLTYPE_SHORT2N = 0x2C2159,
  D3DDECLTYPE_SHORT4N = 0x1A215A,
  D3DDECLTYPE_USHORT2N = 0x2C2059,
  D3DDECLTYPE_USHORT4N = 0x1A205A,
  D3DDECLTYPE_UDEC3 = 0x2A2287,
  D3DDECLTYPE_DEC3 = 0x2A2387,
  D3DDECLTYPE_UDEC3N = 0x2A2087,
  D3DDECLTYPE_DEC3N = 0x2A2187,
  D3DDECLTYPE_UDEC4 = 0x1A2287,
  D3DDECLTYPE_DEC4 = 0x1A2387,
  D3DDECLTYPE_UDEC4N = 0x1A2087,
  D3DDECLTYPE_DEC4N = 0x1A2187,
  D3DDECLTYPE_UHEND3 = 0x2A2290,
  D3DDECLTYPE_HEND3 = 0x2A2390,
  D3DDECLTYPE_UHEND3N = 0x2A2090,
  D3DDECLTYPE_HEND3N = 0x2A2190,
  D3DDECLTYPE_UDHEN3 = 0x2A2291,
  D3DDECLTYPE_DHEN3 = 0x2A2391,
  D3DDECLTYPE_UDHEN3N = 0x2A2091,
  D3DDECLTYPE_DHEN3N = 0x2A2191,
  D3DDECLTYPE_FLOAT16_2 = 0x2C235F,
  D3DDECLTYPE_FLOAT16_4 = 0x1A2360,
  D3DDECLTYPE_UNUSED = 0xFFFFFFFF,
};

/*   13 */
enum GPUPERFEVENT_VGT
{
  GPUPE_VGT_SQ_EVENT_WINDOW_ACTIVE = 0x0,
  GPUPE_VGT_SQ_SEND = 0x1,
  GPUPE_VGT_SQ_STALLED = 0x2,
  GPUPE_VGT_SQ_STARVED_BUSY = 0x3,
  GPUPE_VGT_SQ_STARVED_IDLE = 0x4,
  GPUPE_VGT_SQ_STATIC = 0x5,
  GPUPE_VGT_PA_EVENT_WINDOW_ACTIVE = 0x6,
  GPUPE_VGT_PA_CLIP_V_SEND = 0x7,
  GPUPE_VGT_PA_CLIP_V_STALLED = 0x8,
  GPUPE_VGT_PA_CLIP_V_STARVED_BUSY = 0x9,
  GPUPE_VGT_PA_CLIP_V_STARVED_IDLE = 0xA,
  GPUPE_VGT_PA_CLIP_V_STATIC = 0xB,
  GPUPE_VGT_PA_CLIP_P_SEND = 0xC,
  GPUPE_VGT_PA_CLIP_P_STALLED = 0xD,
  GPUPE_VGT_PA_CLIP_P_STARVED_BUSY = 0xE,
  GPUPE_VGT_PA_CLIP_P_STARVED_IDLE = 0xF,
  GPUPE_VGT_PA_CLIP_P_STATIC = 0x10,
  GPUPE_VGT_PA_CLIP_S_SEND = 0x11,
  GPUPE_VGT_PA_CLIP_S_STALLED = 0x12,
  GPUPE_VGT_PA_CLIP_S_STARVED_BUSY = 0x13,
  GPUPE_VGT_PA_CLIP_S_STARVED_IDLE = 0x14,
  GPUPE_VGT_PA_CLIP_S_STATIC = 0x15,
  GPUPE_RBIU_FIFOS_EVENT_WINDOW_ACTIVE = 0x16,
  GPUPE_RBIU_IMMED_DATA_FIFO_STARVED = 0x17,
  GPUPE_RBIU_IMMED_DATA_FIFO_STALLED = 0x18,
  GPUPE_RBIU_DMA_REQUEST_FIFO_STARVED = 0x19,
  GPUPE_RBIU_DMA_REQUEST_FIFO_STALLED = 0x1A,
  GPUPE_RBIU_DRAW_INITIATOR_FIFO_STARVED = 0x1B,
  GPUPE_RBIU_DRAW_INITIATOR_FIFO_STALLED = 0x1C,
  GPUPE_SPARE29 = 0x1D,
  GPUPE_SPARE30 = 0x1E,
  GPUPE_SPARE31 = 0x1F,
  GPUPE_SPARE32 = 0x20,
  GPUPE_SPARE33 = 0x21,
  GPUPE_SPARE34 = 0x22,
  GPUPE_SPARE35 = 0x23,
  GPUPE_SPARE36 = 0x24,
  GPUPE_SPARE37 = 0x25,
  GPUPE_SPARE38 = 0x26,
  GPUPE_SPARE39 = 0x27,
  GPUPE_TE_SU_IN_VALID = 0x28,
  GPUPE_TE_SU_IN_READ = 0x29,
  GPUPE_TE_SU_IN_PRIM = 0x2A,
  GPUPE_TE_SU_IN_EOP = 0x2B,
  GPUPE_TE_SU_IN_NULL_PRIM = 0x2C,
  GPUPE_TE_WK_IN_VALID = 0x2D,
  GPUPE_TE_WK_IN_READ = 0x2E,
  GPUPE_TE_OUT_PRIM_VALID = 0x2F,
  GPUPE_TE_OUT_PRIM_READ = 0x30,
};

/*   14 */
enum _D3DSHADER_INSTRUCTION_OPCODE_TYPE
{
  D3DSIO_NOP = 0x0,
  D3DSIO_MOV = 0x1,
  D3DSIO_ADD = 0x2,
  D3DSIO_SUB = 0x3,
  D3DSIO_MAD = 0x4,
  D3DSIO_MUL = 0x5,
  D3DSIO_RCP = 0x6,
  D3DSIO_RSQ = 0x7,
  D3DSIO_DP3 = 0x8,
  D3DSIO_DP4 = 0x9,
  D3DSIO_MIN = 0xA,
  D3DSIO_MAX = 0xB,
  D3DSIO_SLT = 0xC,
  D3DSIO_SGE = 0xD,
  D3DSIO_EXP = 0xE,
  D3DSIO_LOG = 0xF,
  D3DSIO_LIT = 0x10,
  D3DSIO_DST = 0x11,
  D3DSIO_LRP = 0x12,
  D3DSIO_FRC = 0x13,
  D3DSIO_M4x4 = 0x14,
  D3DSIO_M4x3 = 0x15,
  D3DSIO_M3x4 = 0x16,
  D3DSIO_M3x3 = 0x17,
  D3DSIO_M3x2 = 0x18,
  D3DSIO_CALL = 0x19,
  D3DSIO_CALLNZ = 0x1A,
  D3DSIO_LOOP = 0x1B,
  D3DSIO_RET = 0x1C,
  D3DSIO_ENDLOOP = 0x1D,
  D3DSIO_LABEL = 0x1E,
  D3DSIO_DCL = 0x1F,
  D3DSIO_POW = 0x20,
  D3DSIO_CRS = 0x21,
  D3DSIO_SGN = 0x22,
  D3DSIO_ABS = 0x23,
  D3DSIO_NRM = 0x24,
  D3DSIO_SINCOS = 0x25,
  D3DSIO_REP = 0x26,
  D3DSIO_ENDREP = 0x27,
  D3DSIO_IF = 0x28,
  D3DSIO_IFC = 0x29,
  D3DSIO_ELSE = 0x2A,
  D3DSIO_ENDIF = 0x2B,
  D3DSIO_BREAK = 0x2C,
  D3DSIO_BREAKC = 0x2D,
  D3DSIO_MOVA = 0x2E,
  D3DSIO_DEFB = 0x2F,
  D3DSIO_DEFI = 0x30,
  D3DSIO_TEXCOORD = 0x40,
  D3DSIO_TEXKILL = 0x41,
  D3DSIO_TEX = 0x42,
  D3DSIO_TEXBEM = 0x43,
  D3DSIO_TEXBEML = 0x44,
  D3DSIO_TEXREG2AR = 0x45,
  D3DSIO_TEXREG2GB = 0x46,
  D3DSIO_TEXM3x2PAD = 0x47,
  D3DSIO_TEXM3x2TEX = 0x48,
  D3DSIO_TEXM3x3PAD = 0x49,
  D3DSIO_TEXM3x3TEX = 0x4A,
  D3DSIO_RESERVED0 = 0x4B,
  D3DSIO_TEXM3x3SPEC = 0x4C,
  D3DSIO_TEXM3x3VSPEC = 0x4D,
  D3DSIO_EXPP = 0x4E,
  D3DSIO_LOGP = 0x4F,
  D3DSIO_CND = 0x50,
  D3DSIO_DEF = 0x51,
  D3DSIO_TEXREG2RGB = 0x52,
  D3DSIO_TEXDP3TEX = 0x53,
  D3DSIO_TEXM3x2DEPTH = 0x54,
  D3DSIO_TEXDP3 = 0x55,
  D3DSIO_TEXM3x3 = 0x56,
  D3DSIO_TEXDEPTH = 0x57,
  D3DSIO_CMP = 0x58,
  D3DSIO_BEM = 0x59,
  D3DSIO_DP2ADD = 0x5A,
  D3DSIO_DSX = 0x5B,
  D3DSIO_DSY = 0x5C,
  D3DSIO_TEXLDD = 0x5D,
  D3DSIO_SETP = 0x5E,
  D3DSIO_TEXLDL = 0x5F,
  D3DSIO_BREAKP = 0x60,
  D3DSIO_PHASE = 0xFFFD,
  D3DSIO_COMMENT = 0xFFFE,
  D3DSIO_END = 0xFFFF,
  D3DSIO_FORCE_DWORD = 0x7FFFFFFF,
};

/*   15 */
enum _XAMUSER_SIGNIN_STATE
{
  eXamUserSigninState_NotSignedIn = 0x0,
  eXamUserSigninState_SignedInLocally = 0x1,
  eXamUserSigninState_SignedInToLive = 0x2,
};

/*   16 */
enum GPUENDIAN
{
  GPUENDIAN_NONE = 0x0,
  GPUENDIAN_8IN16 = 0x1,
  GPUENDIAN_8IN32 = 0x2,
  GPUENDIAN_16IN32 = 0x3,
};

/*   17 */
enum GPUPERFEVENT_VC
{
  GPUPE_RG_VERTICES = 0x0,
  GPUPE_RG_CLAMPED = 0x1,
  GPUPE_RG_L2_REQUEST = 0x2,
  GPUPE_RG_L1_REQUEST = 0x3,
  GPUPE_RG_MEGAFETCH = 0x4,
  GPUPE_RG_END_OF_GROUP = 0x5,
  GPUPE_RG_CONFLICT = 0x6,
  GPUPE_RG_DWORDS_REQUESTED = 0x7,
  GPUPE_RG_SPARE0 = 0x8,
  GPUPE_RG_SPARE1 = 0x9,
  GPUPE_CC_STALLS = 0xA,
  GPUPE_CC_HITS = 0xB,
  GPUPE_CC_MISSES = 0xC,
  GPUPE_CC_SECTOR_MISSES = 0xD,
  GPUPE_CC_L2B_STALLS = 0xE,
  GPUPE_CC_MI_STALLS = 0xF,
  GPUPE_CC_MULTICYCLE_STALLS = 0x10,
  GPUPE_CC_EVEN_ALLOC_STALLS = 0x11,
  GPUPE_CC_ODD_ALLOC_STALLS = 0x12,
  GPUPE_CC_EVEN_BUSY_STALLS = 0x13,
  GPUPE_CC_ODD_BUSY_STALLS = 0x14,
  GPUPE_CC_IN_FIFO_EMPTY = 0x15,
  GPUPE_CC_IN_FIFO_FULL = 0x16,
  GPUPE_CC_FREEZE = 0x17,
  GPUPE_CC_SPARE0 = 0x18,
  GPUPE_CC_SPARE1 = 0x19,
  GPUPE_CC_SPARE2 = 0x1A,
  GPUPE_CC_SPARE3 = 0x1B,
  GPUPE_CC_SPARE4 = 0x1C,
  GPUPE_CC_SPARE5 = 0x1D,
  GPUPE_MI_REQUESTS_TO_MH = 0x1E,
  GPUPE_MI_AGP_REQUESTS = 0x1F,
  GPUPE_MI_LATENCY_BITS_4_0 = 0x20,
  GPUPE_MI_LATENCY_BITS_9_5 = 0x21,
  GPUPE_MI_LATENCY_BITS_14_10 = 0x22,
  GPUPE_MI_LATENCY_BITS_17_15 = 0x23,
  GPUPE_MI_INPUT_FIFOS_FULL = 0x24,
  GPUPE_MI_INPUT_FIFOS_0_FULL = 0x25,
  GPUPE_MI_INPUT_FIFOS_1_FULL = 0x26,
  GPUPE_MI_SPARE1 = 0x27,
  GPUPE_RP_SP_DATA_VALID = 0x28,
  GPUPE_RP_STALLED = 0x29,
  GPUPE_RP_SPARE0 = 0x2A,
  GPUPE_RP_SPARE1 = 0x2B,
  GPUPE_RP_SPARE2 = 0x2C,
  GPUPE_RP_SPARE3 = 0x2D,
  GPUPE_RP_SPARE4 = 0x2E,
  GPUPE_RP_SPARE5 = 0x2F,
  GPUPE_RP_SPARE6 = 0x30,
  GPUPE_RP_SPARE7 = 0x31,
  GPUPE_DC_NUM_VALIDS = 0x32,
  GPUPE_DC_SPARE0 = 0x33,
  GPUPE_DC_SPARE1 = 0x34,
  GPUPE_DC_SPARE2 = 0x35,
  GPUPE_DC_SPARE3 = 0x36,
  GPUPE_DC_SPARE4 = 0x37,
  GPUPE_DC_SPARE5 = 0x38,
  GPUPE_DC_SPARE6 = 0x39,
  GPUPE_DC_SPARE7 = 0x3A,
  GPUPE_DC_SPARE8 = 0x3B,
  GPUPE_SQ_VC_SEND = 0x3C,
  GPUPE_VC_STARVED_IDLE = 0x3D,
  GPUPE_VC_BUSY = 0x3E,
  GPUPE_VC_IDLE = 0x3F,
  GPUPE_VC_SPARE0 = 0x40,
  GPUPE_VC_SPARE1 = 0x41,
  GPUPE_VC_SPARE2 = 0x42,
  GPUPE_VC_SPARE3 = 0x43,
  GPUPE_VC_SPARE4 = 0x44,
  GPUPE_VC_SPARE5 = 0x45,
};

/*   18 */
enum GPUENDIAN128
{
  GPUENDIAN128_NONE = 0x0,
  GPUENDIAN128_8IN16 = 0x1,
  GPUENDIAN128_8IN32 = 0x2,
  GPUENDIAN128_16IN32 = 0x3,
  GPUENDIAN128_8IN64 = 0x4,
  GPUENDIAN128_8IN128 = 0x5,
};

/*   19 */
enum GPUCOLORARRAY
{
  GPUCOLORARRAY_2D_COLOR = 0x0,
  GPUCOLORARRAY_3D_SLICE_COLOR = 0x1,
};

/*   20 */
enum GPUDEPTHARRAY
{
  GPUDEPTHARRAY_2D_ALT_DEPTH = 0x0,
  GPUDEPTHARRAY_2D_DEPTH = 0x1,
};

/*   21 */
enum GPUCOLORFORMAT
{
  GPUCOLORFORMAT_8 = 0x2,
  GPUCOLORFORMAT_1_5_5_5 = 0x3,
  GPUCOLORFORMAT_5_6_5 = 0x4,
  GPUCOLORFORMAT_6_5_5 = 0x5,
  GPUCOLORFORMAT_8_8_8_8 = 0x6,
  GPUCOLORFORMAT_2_10_10_10 = 0x7,
  GPUCOLORFORMAT_8_A = 0x8,
  GPUCOLORFORMAT_8_B = 0x9,
  GPUCOLORFORMAT_8_8 = 0xA,
  GPUCOLORFORMAT_8_8_8_8_A = 0xE,
  GPUCOLORFORMAT_4_4_4_4 = 0xF,
  GPUCOLORFORMAT_10_11_11 = 0x10,
  GPUCOLORFORMAT_11_11_10 = 0x11,
  GPUCOLORFORMAT_16 = 0x18,
  GPUCOLORFORMAT_16_16 = 0x19,
  GPUCOLORFORMAT_16_16_16_16 = 0x1A,
  GPUCOLORFORMAT_16_FLOAT = 0x1E,
  GPUCOLORFORMAT_16_16_FLOAT = 0x1F,
  GPUCOLORFORMAT_16_16_16_16_FLOAT = 0x20,
  GPUCOLORFORMAT_32_FLOAT = 0x24,
  GPUCOLORFORMAT_32_32_FLOAT = 0x25,
  GPUCOLORFORMAT_32_32_32_32_FLOAT = 0x26,
  GPUCOLORFORMAT_2_10_10_10_FLOAT = 0x3E,
};

/*   22 */
enum IOCPERFEVENT
{
  IOCPE_PERF_CYCLES_WAITING_FOR_REGISTER_BUS = 0x0,
  IOCPE_PERF_CYCLES_WAITING_FOR_BIU_SLV_REQ = 0x1,
  IOCPE_PERF_CYCLES_WAITING_FOR_BIU_MST_CPL = 0x2,
  IOCPE_PERF_CYCLES_WAITING_FOR_BSB_MST_REQ = 0x3,
  IOCPE_PERF_CYCLES_WAITING_FOR_MH_SLV_REQ = 0x4,
  IOCPE_PERF_BSB_SLV_REQ_TOTAL_REQUESTS = 0x5,
  IOCPE_PERF_BSB_SLV_REQ_TOTAL_READS = 0x6,
  IOCPE_PERF_BSB_SLV_REQ_TOTAL_WRITES = 0x7,
  IOCPE_PERF_BSB_SLV_REQ_SNOOPED_READS = 0x8,
  IOCPE_PERF_BSB_SLV_REQ_SNOOPED_WRITES = 0x9,
  IOCPE_PERF_BSB_SLV_REQ_NON_SNOOPED_READS = 0xA,
  IOCPE_PERF_BSB_SLV_REQ_NON_SNOOPED_WRITES = 0xB,
  IOCPE_PERF_BSB_SLV_REQ_INTERRUPTS = 0xC,
  IOCPE_PERF_BSB_SLV_REQ_TOTAL_REQUESTS_DWORDS = 0xD,
  IOCPE_PERF_BSB_SLV_REQ_TOTAL_READS_DWORDS = 0xE,
  IOCPE_PERF_BSB_SLV_REQ_TOTAL_WRITES_DWORDS = 0xF,
  IOCPE_PERF_BSB_SLV_REQ_SNOOPED_READS_DWORDS = 0x10,
  IOCPE_PERF_BSB_SLV_REQ_SNOOPED_WRITES_DWORDS = 0x11,
  IOCPE_PERF_BSB_SLV_REQ_NON_SNOOPED_READS_DWORDS = 0x12,
  IOCPE_PERF_BSB_SLV_REQ_NON_SNOOPED_WRITES_DWORDS = 0x13,
  IOCPE_PERF_BSB_SLV_READ_LATENCY_CYCLES = 0x14,
  IOCPE_PERF_BSB_SLV_CPL_TOTAL_READ_COMPLETIONS = 0x15,
  IOCPE_PERF_BSB_SLV_CPL_SNOOPED_READ_COMPLETIONS = 0x16,
  IOCPE_PERF_BSB_SLV_CPL_NON_SNOOPED_READ_COMPLETIONS = 0x17,
  IOCPE_PERF_BSB_SLV_CPL_TOTAL_READ_COMPLETIONS_DWORDS = 0x18,
  IOCPE_PERF_BSB_SLV_CPL_SNOOPED_READ_COMPLETIONS_DWORDS = 0x19,
  IOCPE_PERF_BSB_SLV_CPL_NON_SNOOPED_READ_COMPLETIONS_DWORDS = 0x1A,
  IOCPE_PERF_BSB_SLV_CPL_URS = 0x1B,
  IOCPE_PERF_BIF_SLV_REQ_TOTAL_REQUESTS = 0x1C,
  IOCPE_PERF_BIF_SLV_REQ_TOTAL_CP_WRITEBACKS = 0x1D,
  IOCPE_PERF_BIF_SLV_REQ_TOTAL_SNOOPED_WRITES = 0x1E,
  IOCPE_PERF_BSB_MST_REQ_TOTAL_REQUESTS = 0x1F,
  IOCPE_PERF_BSB_MST_REQ_TOTAL_READS = 0x20,
  IOCPE_PERF_BSB_MST_REQ_TOTAL_WRITES = 0x21,
  IOCPE_PERF_BSB_MST_REQ_TOTAL_REQUESTS_DWORDS = 0x22,
  IOCPE_PERF_BSB_MST_REQ_TOTAL_READS_DWORDS = 0x23,
  IOCPE_PERF_BSB_MST_REQ_TOTAL_WRITES_DWORDS = 0x24,
  IOCPE_PERF_BSB_MST_CPL_TOTAL_COMPLETIONS = 0x25,
  IOCPE_PERF_BSB_MST_CPL_TOTAL_COMPLETIONS_DWORDS = 0x26,
  IOCPE_PERF_REG_BUS_REQ_TOTAL_REQUESTS = 0x27,
  IOCPE_PERF_REG_BUS_REQ_TOTAL_READS = 0x28,
  IOCPE_PERF_REG_BUS_REQ_TOTAL_WRITES = 0x29,
  IOCPE_PERF_REG_BUS_CPL_READ_COMPLETIONS = 0x2A,
  IOCPE_PERF_TOTAL_SYNCS_ISSUED = 0x2B,
  IOCPE_PERF_BIU_SYNCS_ISSUED = 0x2C,
  IOCPE_PERF_MH_SYNCS_ISSUED = 0x2D,
  IOCPE_PERF_TOTAL_SYNCS_RECEIVED = 0x2E,
  IOCPE_PERF_BIU_SYNCS_RECEIVED = 0x2F,
  IOCPE_PERF_MH_SYNCS_RECEIVED = 0x30,
  IOCPE_PERF_FIFO_BSB_MST_REQ_FULL = 0x31,
  IOCPE_PERF_FIFO_BSB_MST_REQ_EMPTY = 0x32,
  IOCPE_PERF_FIFO_SYNC_FULL = 0x33,
  IOCPE_PERF_FIFO_SYNC_EMPTY = 0x34,
  IOCPE_PERF_FIFO_INTERRUPT_FULL = 0x35,
  IOCPE_PERF_FIFO_INTERRUPT_EMPTY = 0x36,
  IOCPE_PERF_FIFO_REG_FULL = 0x37,
  IOCPE_PERF_FIFO_REG_EMPTY = 0x38,
  IOCPE_PERF_FIFO_BIU_SLV_CPL_NEARFULL = 0x39,
  IOCPE_PERF_FIFO_BIU_SLV_CPL_EMPTY = 0x3A,
  IOCPE_PERF_FIFO_MH_SLV_CPL_FULL = 0x3B,
  IOCPE_PERF_FIFO_MH_SLV_CPL_EMPTY = 0x3C,
  IOCPE_PERF_FIFO_BSB_SLV_REQ_NEARFULL = 0x3D,
  IOCPE_PERF_FIFO_BSB_SLV_REQ_EMPTY = 0x3E,
  IOCPE_PERF_FIFO_BSB_MST_CPL_NEARFULL = 0x3F,
  IOCPE_PERF_FIFO_BSB_MST_CPL_EMPTY = 0x40,
  IOCPE_PERF_FIFO_BIU_MST_REQ_NEARFULL = 0x41,
  IOCPE_PERF_FIFO_BIU_MST_REQ_EMPTY = 0x42,
  IOCPE_PERF_FIFO_BIF_SLV_REQ_NEARFULL = 0x43,
  IOCPE_PERF_FIFO_BIF_SLV_REQ_EMPTY = 0x44,
  IOCPE_PERF_FIFO_READ_LATENCY_FULL = 0x45,
  IOCPE_PERF_FIFO_READ_LATENCY_EMPTY = 0x46,
  IOCPE_PERF_NUMBER_OF_SYSTEM_CLOCKS = 0x47,
  IOCPE_PERF_ZERO_COUNT = 0x48,
  IOCPE_PERF_SIXTY_THREE_COUNT = 0x49,
  IOCPE_PERF_BIU_SPARE = 0x4A,
  IOCPE_PERF_BSB_SLV_REQ_MESSAGES = 0x4B,
  IOCPE_PERF_BSB_MST_REQ_CONFIG_READS = 0x4C,
  IOCPE_PERF_BSB_MST_REQ_CONFIG_WRITES = 0x4D,
  IOCPE_PERF_BSB_MST_REQ_POSTED_WRITES = 0x4E,
  IOCPE_PERF_BSB_MST_REQ_POSTED_WRITES_DWORDS = 0x4F,
  IOCPE_PERF_BSB_MST_CPL_NON_POSTED_WRITES = 0x50,
  IOCPE_PERF_CYCLES_WAITING_FOR_INT_SYNC = 0x51,
  IOCPE_PERF_CYCLES_WAITING_FOR_INT_SYNC_SNOOP_PATH = 0x52,
  IOCPE_PERF_CYCLES_WAITING_FOR_INT_SYNC_NON_SNOOP_PATH = 0x53,
  IOCPE_PERF_CYCLES_WAITING_FOR_INT_SYNC_BOTH_PATHS = 0x54,
  IOCPE_PERF_CYCLES_WAITING_FOR_MST_RD_CPL_SYNC = 0x55,
  IOCPE_PERF_CYCLES_WAITING_FOR_MST_RD_CPL_SYNC_SNOOP_PATH = 0x56,
  IOCPE_PERF_CYCLES_WAITING_FOR_MST_RD_CPL_SYNC_NON_SNOOP_PATH = 0x57,
  IOCPE_PERF_CYCLES_WAITING_FOR_MST_RD_CPL_SYNC_BOTH_PATHS = 0x58,
  IOCPE_PERF_CYCLES_WAITING_FOR_NSR_PASS_SW = 0x59,
  IOCPE_PERF_CYCLES_WAITING_FOR_SR_PASS_NSW = 0x5A,
  IOCPE_PERF_CYCLES_WAITING_FOR_NSW_PASS_SW = 0x5B,
  IOCPE_PERF_CYCLES_WAITING_FOR_SW_PASS_NSW = 0x5C,
  IOCPE_PERF_FIFO_MST_CPL_SYNC_TYPE_FIFO_FULL = 0x5D,
  IOCPE_PERF_FIFO_MST_CPL_SYNC_TYPE_FIFO_EMPTY = 0x5E,
  IOCPE_PERF_FIFO_BSB_SNOOP_SLV_REQ_FULL = 0x5F,
  IOCPE_PERF_FIFO_BSB_SNOOP_SLV_REQ_EMPTY = 0x60,
  IOCPE_PERF_FIFO_BSB_SNOOP_SLV_REQ_DATA_FULL = 0x61,
  IOCPE_PERF_FIFO_BSB_SNOOP_SLV_REQ_DATA_EMPTY = 0x62,
  IOCPE_PERF_FIFO_READ_LATENCY_BAD_REQ_FULL = 0x63,
  IOCPE_PERF_FIFO_READ_LATENCY_BAD_REQ_EMPTY = 0x64,
  IOCPE_PERF_FIFO_READ_LATENCY_NON_SNOOP_CAM_ADDRESS_FULL = 0x65,
  IOCPE_PERF_FIFO_READ_LATENCY_NON_SNOOP_CAM_ADDRESS_EMPTY = 0x66,
};

/*   23 */
enum _D3DXCALLBACK_SEARCH_FLAGS
{
  D3DXCALLBACK_SEARCH_EXCLUDING_INITIAL_POSITION = 0x1,
  D3DXCALLBACK_SEARCH_BEHIND_INITIAL_POSITION = 0x2,
  D3DXCALLBACK_SEARCH_FORCE_DWORD = 0x7FFFFFFF,
};

/*   24 */
enum _D3DFHZS_FLUSHTYPE
{
  D3DFHZS_ASYNCHRONOUS = 0x0,
  D3DFHZS_SYNCHRONOUS = 0x1,
};

/*   25 */
enum GPUTEXTUREFORMAT
{
  GPUTEXTUREFORMAT_1_REVERSE = 0x0,
  GPUTEXTUREFORMAT_1 = 0x1,
  GPUTEXTUREFORMAT_8 = 0x2,
  GPUTEXTUREFORMAT_1_5_5_5 = 0x3,
  GPUTEXTUREFORMAT_5_6_5 = 0x4,
  GPUTEXTUREFORMAT_6_5_5 = 0x5,
  GPUTEXTUREFORMAT_8_8_8_8 = 0x6,
  GPUTEXTUREFORMAT_2_10_10_10 = 0x7,
  GPUTEXTUREFORMAT_8_A = 0x8,
  GPUTEXTUREFORMAT_8_B = 0x9,
  GPUTEXTUREFORMAT_8_8 = 0xA,
  GPUTEXTUREFORMAT_Cr_Y1_Cb_Y0_REP = 0xB,
  GPUTEXTUREFORMAT_Y1_Cr_Y0_Cb_REP = 0xC,
  GPUTEXTUREFORMAT_16_16_EDRAM = 0xD,
  GPUTEXTUREFORMAT_8_8_8_8_A = 0xE,
  GPUTEXTUREFORMAT_4_4_4_4 = 0xF,
  GPUTEXTUREFORMAT_10_11_11 = 0x10,
  GPUTEXTUREFORMAT_11_11_10 = 0x11,
  GPUTEXTUREFORMAT_DXT1 = 0x12,
  GPUTEXTUREFORMAT_DXT2_3 = 0x13,
  GPUTEXTUREFORMAT_DXT4_5 = 0x14,
  GPUTEXTUREFORMAT_16_16_16_16_EDRAM = 0x15,
  GPUTEXTUREFORMAT_24_8 = 0x16,
  GPUTEXTUREFORMAT_24_8_FLOAT = 0x17,
  GPUTEXTUREFORMAT_16 = 0x18,
  GPUTEXTUREFORMAT_16_16 = 0x19,
  GPUTEXTUREFORMAT_16_16_16_16 = 0x1A,
  GPUTEXTUREFORMAT_16_EXPAND = 0x1B,
  GPUTEXTUREFORMAT_16_16_EXPAND = 0x1C,
  GPUTEXTUREFORMAT_16_16_16_16_EXPAND = 0x1D,
  GPUTEXTUREFORMAT_16_FLOAT = 0x1E,
  GPUTEXTUREFORMAT_16_16_FLOAT = 0x1F,
  GPUTEXTUREFORMAT_16_16_16_16_FLOAT = 0x20,
  GPUTEXTUREFORMAT_32 = 0x21,
  GPUTEXTUREFORMAT_32_32 = 0x22,
  GPUTEXTUREFORMAT_32_32_32_32 = 0x23,
  GPUTEXTUREFORMAT_32_FLOAT = 0x24,
  GPUTEXTUREFORMAT_32_32_FLOAT = 0x25,
  GPUTEXTUREFORMAT_32_32_32_32_FLOAT = 0x26,
  GPUTEXTUREFORMAT_32_AS_8 = 0x27,
  GPUTEXTUREFORMAT_32_AS_8_8 = 0x28,
  GPUTEXTUREFORMAT_16_MPEG = 0x29,
  GPUTEXTUREFORMAT_16_16_MPEG = 0x2A,
  GPUTEXTUREFORMAT_8_INTERLACED = 0x2B,
  GPUTEXTUREFORMAT_32_AS_8_INTERLACED = 0x2C,
  GPUTEXTUREFORMAT_32_AS_8_8_INTERLACED = 0x2D,
  GPUTEXTUREFORMAT_16_INTERLACED = 0x2E,
  GPUTEXTUREFORMAT_16_MPEG_INTERLACED = 0x2F,
  GPUTEXTUREFORMAT_16_16_MPEG_INTERLACED = 0x30,
  GPUTEXTUREFORMAT_DXN = 0x31,
  GPUTEXTUREFORMAT_8_8_8_8_AS_16_16_16_16 = 0x32,
  GPUTEXTUREFORMAT_DXT1_AS_16_16_16_16 = 0x33,
  GPUTEXTUREFORMAT_DXT2_3_AS_16_16_16_16 = 0x34,
  GPUTEXTUREFORMAT_DXT4_5_AS_16_16_16_16 = 0x35,
  GPUTEXTUREFORMAT_2_10_10_10_AS_16_16_16_16 = 0x36,
  GPUTEXTUREFORMAT_10_11_11_AS_16_16_16_16 = 0x37,
  GPUTEXTUREFORMAT_11_11_10_AS_16_16_16_16 = 0x38,
  GPUTEXTUREFORMAT_32_32_32_FLOAT = 0x39,
  GPUTEXTUREFORMAT_DXT3A = 0x3A,
  GPUTEXTUREFORMAT_DXT5A = 0x3B,
  GPUTEXTUREFORMAT_CTX1 = 0x3C,
  GPUTEXTUREFORMAT_DXT3A_AS_1_1_1_1 = 0x3D,
  GPUTEXTUREFORMAT_8_8_8_8_GAMMA_EDRAM = 0x3E,
  GPUTEXTUREFORMAT_2_10_10_10_FLOAT_EDRAM = 0x3F,
};

/*   26 */
enum _D3DXMESHOPT
{
  D3DXMESHOPT_COMPACT = 0x1000000,
  D3DXMESHOPT_ATTRSORT = 0x2000000,
  D3DXMESHOPT_VERTEXCACHE = 0x4000000,
  D3DXMESHOPT_STRIPREORDER = 0x8000000,
  D3DXMESHOPT_IGNOREVERTS = 0x10000000,
  D3DXMESHOPT_DONOTSPLIT = 0x20000000,
  D3DXMESHOPT_DEVICEINDEPENDENT = 0x400000,
  D3DXMESHOPT_VALIDBITS = 0x3F401000,
  D3DXMESHOPTINT_ALREADYATTRSORTED = 0x40000000,
  D3DXMESHOPTINT_INVERTFACEREMAP = 0x80000000,
  D3DXMESHOPTINT_PMESHSAVE = 0x800000,
  D3DXMESHOPTINT_VALIDBITS = 0xFFC01000,
};

/*   27 */
enum _ACL_INFORMATION_CLASS
{
  AclRevisionInformation = 0x1,
  AclSizeInformation = 0x2,
};

/*   28 */
enum _D3DSHADER_COMPARISON
{
  D3DSPC_RESERVED0 = 0x0,
  D3DSPC_GT = 0x1,
  D3DSPC_EQ = 0x2,
  D3DSPC_GE = 0x3,
  D3DSPC_LT = 0x4,
  D3DSPC_NE = 0x5,
  D3DSPC_LE = 0x6,
  D3DSPC_RESERVED1 = 0x7,
};

/*   29 */
enum _D3DXPLAYBACK_TYPE
{
  D3DXPLAY_LOOP = 0x0,
  D3DXPLAY_ONCE = 0x1,
  D3DXPLAY_PINGPONG = 0x2,
  D3DXPLAY_FORCE_DWORD = 0x7FFFFFFF,
};

/*   30 */
enum _D3DSAMPLER_TEXTURE_TYPE
{
  D3DSTT_UNKNOWN = 0x0,
  D3DSTT_2D = 0x10000000,
  D3DSTT_CUBE = 0x18000000,
  D3DSTT_VOLUME = 0x20000000,
  D3DSTT_FORCE_DWORD = 0x7FFFFFFF,
};

/*   31 */
enum GPUPERFEVENT_PA_SU
{
  GPUPE_PERF_PAPC_PASX_REQ = 0x0,
  GPUPE_PERF_PAPC_PASX_DISABLE_PIPE = 0x1,
  GPUPE_PERF_PAPC_PASX_FIRST_VECTOR = 0x2,
  GPUPE_PERF_PAPC_PASX_SECOND_VECTOR = 0x3,
  GPUPE_PERF_PAPC_PASX_FIRST_DEAD = 0x4,
  GPUPE_PERF_PAPC_PASX_SECOND_DEAD = 0x5,
  GPUPE_PERF_PAPC_PASX_VTX_KILL_DISCARD = 0x6,
  GPUPE_PERF_PAPC_PASX_VTX_NAN_DISCARD = 0x7,
  GPUPE_PERF_PAPC_PA_INPUT_PRIM = 0x8,
  GPUPE_PERF_PAPC_PA_INPUT_NULL_PRIM = 0x9,
  GPUPE_PERF_PAPC_PA_INPUT_EVENT_FLAG = 0xA,
  GPUPE_PERF_PAPC_PA_INPUT_FIRST_PRIM_SLOT = 0xB,
  GPUPE_PERF_PAPC_PA_INPUT_END_OF_PACKET = 0xC,
  GPUPE_PERF_PAPC_CLPR_CULL_PRIM = 0xD,
  GPUPE_PERF_PAPC_CLPR_VVUCP_CULL_PRIM = 0xE,
  GPUPE_PERF_PAPC_CLPR_VV_CULL_PRIM = 0xF,
  GPUPE_PERF_PAPC_CLPR_UCP_CULL_PRIM = 0x10,
  GPUPE_PERF_PAPC_CLPR_VTX_KILL_CULL_PRIM = 0x11,
  GPUPE_PERF_PAPC_CLPR_VTX_NAN_CULL_PRIM = 0x12,
  GPUPE_PERF_PAPC_CLPR_CULL_TO_NULL_PRIM = 0x13,
  GPUPE_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM = 0x14,
  GPUPE_PERF_PAPC_CLPR_VV_CLIP_PRIM = 0x15,
  GPUPE_PERF_PAPC_CLPR_UCP_CLIP_PRIM = 0x16,
  GPUPE_PERF_PAPC_CLPR_POINT_CLIP_CANDIDATE = 0x17,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_1 = 0x18,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_2 = 0x19,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_3 = 0x1A,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_4 = 0x1B,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_5_8 = 0x1C,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_CNT_9_12 = 0x1D,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_NEAR = 0x1E,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_FAR = 0x1F,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_LEFT = 0x20,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_RIGHT = 0x21,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_TOP = 0x22,
  GPUPE_PERF_PAPC_CLPR_CLIP_PLANE_BOTTOM = 0x23,
  GPUPE_PERF_PAPC_CLSM_NULL_PRIM = 0x24,
  GPUPE_PERF_PAPC_CLSM_TOTALLY_VISIBLE_PRIM = 0x25,
  GPUPE_PERF_PAPC_CLSM_CLIP_PRIM = 0x26,
  GPUPE_PERF_PAPC_CLSM_CULL_TO_NULL_PRIM = 0x27,
  GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_1 = 0x28,
  GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_2 = 0x29,
  GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_3 = 0x2A,
  GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_4 = 0x2B,
  GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_5_8 = 0x2C,
  GPUPE_PERF_PAPC_CLSM_OUT_PRIM_CNT_9_13 = 0x2D,
  GPUPE_PERF_PAPC_CLSM_NON_TRIVIAL_CULL = 0x2E,
  GPUPE_PERF_PAPC_SU_INPUT_PRIM = 0x2F,
  GPUPE_PERF_PAPC_SU_INPUT_CLIP_PRIM = 0x30,
  GPUPE_PERF_PAPC_SU_INPUT_NULL_PRIM = 0x31,
  GPUPE_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM = 0x32,
  GPUPE_PERF_PAPC_SU_BACK_FACE_CULL_PRIM = 0x33,
  GPUPE_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM = 0x34,
  GPUPE_PERF_PAPC_SU_POLYMODE_FACE_CULL = 0x35,
  GPUPE_PERF_PAPC_SU_POLYMODE_BACK_CULL = 0x36,
  GPUPE_PERF_PAPC_SU_POLYMODE_FRONT_CULL = 0x37,
  GPUPE_PERF_PAPC_SU_POLYMODE_INVALID_FILL = 0x38,
  GPUPE_PERF_PAPC_SU_OUTPUT_PRIM = 0x39,
  GPUPE_PERF_PAPC_SU_OUTPUT_CLIP_PRIM = 0x3A,
  GPUPE_PERF_PAPC_SU_OUTPUT_NULL_PRIM = 0x3B,
  GPUPE_PERF_PAPC_SU_OUTPUT_EVENT_FLAG = 0x3C,
  GPUPE_PERF_PAPC_SU_OUTPUT_FIRST_PRIM_SLOT = 0x3D,
  GPUPE_PERF_PAPC_SU_OUTPUT_END_OF_PACKET = 0x3E,
  GPUPE_PERF_PAPC_SU_OUTPUT_POLYMODE_FACE = 0x3F,
  GPUPE_PERF_PAPC_SU_OUTPUT_POLYMODE_BACK = 0x40,
  GPUPE_PERF_PAPC_SU_OUTPUT_POLYMODE_FRONT = 0x41,
  GPUPE_PERF_PAPC_SU_OUT_CLIP_POLYMODE_FACE = 0x42,
  GPUPE_PERF_PAPC_SU_OUT_CLIP_POLYMODE_BACK = 0x43,
  GPUPE_PERF_PAPC_SU_OUT_CLIP_POLYMODE_FRONT = 0x44,
  GPUPE_PERF_PAPC_PASX_REQ_IDLE = 0x45,
  GPUPE_PERF_PAPC_PASX_REQ_BUSY = 0x46,
  GPUPE_PERF_PAPC_PASX_REQ_STALLED = 0x47,
  GPUPE_PERF_PAPC_PASX_REC_IDLE = 0x48,
  GPUPE_PERF_PAPC_PASX_REC_BUSY = 0x49,
  GPUPE_PERF_PAPC_PASX_REC_STARVED_SX = 0x4A,
  GPUPE_PERF_PAPC_PASX_REC_STALLED = 0x4B,
  GPUPE_PERF_PAPC_PASX_REC_STALLED_POS_MEM = 0x4C,
  GPUPE_PERF_PAPC_PASX_REC_STALLED_CCGSM_IN = 0x4D,
  GPUPE_PERF_PAPC_CCGSM_IDLE = 0x4E,
  GPUPE_PERF_PAPC_CCGSM_BUSY = 0x4F,
  GPUPE_PERF_PAPC_CCGSM_STALLED = 0x50,
  GPUPE_PERF_PAPC_CLPRIM_IDLE = 0x51,
  GPUPE_PERF_PAPC_CLPRIM_BUSY = 0x52,
  GPUPE_PERF_PAPC_CLPRIM_STALLED = 0x53,
  GPUPE_PERF_PAPC_CLPRIM_STARVED_CCGSM = 0x54,
  GPUPE_PERF_PAPC_CLIPSM_IDLE = 0x55,
  GPUPE_PERF_PAPC_CLIPSM_BUSY = 0x56,
  GPUPE_PERF_PAPC_CLIPSM_WAIT_CLIP_VERT_ENGH = 0x57,
  GPUPE_PERF_PAPC_CLIPSM_WAIT_HIGH_PRI_SEQ = 0x58,
  GPUPE_PERF_PAPC_CLIPSM_WAIT_CLIPGA = 0x59,
  GPUPE_PERF_PAPC_CLIPSM_WAIT_AVAIL_VTE_CLIP = 0x5A,
  GPUPE_PERF_PAPC_CLIPSM_WAIT_CLIP_OUTSM = 0x5B,
  GPUPE_PERF_PAPC_CLIPGA_IDLE = 0x5C,
  GPUPE_PERF_PAPC_CLIPGA_BUSY = 0x5D,
  GPUPE_PERF_PAPC_CLIPGA_STARVED_VTE_CLIP = 0x5E,
  GPUPE_PERF_PAPC_CLIPGA_STALLED = 0x5F,
  GPUPE_PERF_PAPC_CLIP_IDLE = 0x60,
  GPUPE_PERF_PAPC_CLIP_BUSY = 0x61,
  GPUPE_PERF_PAPC_SU_IDLE = 0x62,
  GPUPE_PERF_PAPC_SU_BUSY = 0x63,
  GPUPE_PERF_PAPC_SU_STARVED_CLIP = 0x64,
  GPUPE_PERF_PAPC_SU_STALLED_SC = 0x65,
};

/*   32 */
enum D3DXShader::_D3DXTOKEN_TYPE
{
  D3DXTT_VERSION = 0x0,
  D3DXTT_OP = 0x1,
  D3DXTT_UINT = 0x2,
  D3DXTT_INT32 = 0x3,
  D3DXTT_UINT32 = 0x4,
  D3DXTT_FLOAT = 0x5,
  D3DXTT_FLOAT16 = 0x6,
  D3DXTT_FLOAT32 = 0x7,
  D3DXTT_FLOAT64 = 0x8,
  D3DXTT_ID = 0x9,
  D3DXTT_STRING = 0xA,
  D3DXTT_STRING_SYS = 0xB,
  D3DXTT_EOL = 0xC,
  D3DXTT_EOF = 0xD,
};

/*   33 */
enum _D3DSHADER_PARAM_REGISTER_TYPE
{
  D3DSPR_TEMP = 0x0,
  D3DSPR_INPUT = 0x1,
  D3DSPR_CONST = 0x2,
  D3DSPR_ADDR = 0x3,
  D3DSPR_TEXTURE = 0x3,
  D3DSPR_RASTOUT = 0x4,
  D3DSPR_ATTROUT = 0x5,
  D3DSPR_TEXCRDOUT = 0x6,
  D3DSPR_OUTPUT = 0x6,
  D3DSPR_CONSTINT = 0x7,
  D3DSPR_COLOROUT = 0x8,
  D3DSPR_DEPTHOUT = 0x9,
  D3DSPR_SAMPLER = 0xA,
  D3DSPR_CONST2 = 0xB,
  D3DSPR_CONST3 = 0xC,
  D3DSPR_CONST4 = 0xD,
  D3DSPR_CONSTBOOL = 0xE,
  D3DSPR_LOOP = 0xF,
  D3DSPR_TEMPFLOAT16 = 0x10,
  D3DSPR_MISCTYPE = 0x11,
  D3DSPR_LABEL = 0x12,
  D3DSPR_PREDICATE = 0x13,
  D3DSPR_FORCE_DWORD = 0x7FFFFFFF,
};

/*   34 */
enum _XALLOC_ALLOCATOR_IDS
{
  eXALLOCAllocatorId_GameMin = 0x0,
  eXALLOCAllocatorId_GameMax = 0x7F,
  eXALLOCAllocatorId_MsReservedMin = 0x80,
  eXALLOCAllocatorId_D3D = 0x80,
  eXALLOCAllocatorId_D3DX = 0x81,
  eXALLOCAllocatorId_XAUDIO = 0x82,
  eXALLOCAllocatorId_XAPI = 0x83,
  eXALLOCAllocatorId_XACT = 0x84,
  eXALLOCAllocatorId_XBOXKERNEL = 0x85,
  eXALLOCAllocatorId_XBDM = 0x86,
  eXALLOCAllocatorId_XGRAPHICS = 0x87,
  eXALLOCAllocatorId_XONLINE = 0x88,
  eXALLOCAllocatorId_XVOICE = 0x89,
  eXALLOCAllocatorId_XHV = 0x8A,
  eXALLOCAllocatorId_USB = 0x8B,
  eXALLOCAllocatorId_XMV = 0x8C,
  eXALLOCAllocatorId_SHADERCOMPILER = 0x8D,
  eXALLOCAllocatorId_XUI = 0x8E,
  eXALLOCAllocatorId_XASYNC = 0x8F,
  eXALLOCAllocatorId_XCAM = 0x90,
  eXALLOCAllocatorId_XVIS = 0x91,
  eXALLOCAllocatorId_XIME = 0x92,
  eXALLOCAllocatorId_MsReservedMax = 0xBF,
  eXALLOCAllocatorId_MiddlewareReservedMin = 0xC0,
  eXALLOCAllocatorId_MiddlewareReservedMax = 0xFF,
};

/*   35 */
enum GPUREGISTER
{
  GPUREG_WAITUNTIL = 0x5C8,
  GPUREG_COHERSIZEHOST = 0xA2F,
  GPUREG_COHERBASEHOST = 0xA30,
  GPUREG_COHERSTATUSHOST = 0xA31,
  GPUREG_CPUINTERRUPTACK = 0x45E,
  GPUREG_GPRMANAGEMENT = 0xD00,
  GPUREG_INSTSTOREMANAGEMENT = 0xD02,
  GPUREG_INVALIDATECONSTANTS = 0xD04,
  GPUREG_BCCONTROL = 0xF01,
  GPUREG_DESTINATIONPACKET = 0x2000,
  GPUREG_PACKET0 = 0x2000,
  GPUREG_SURFACEINFO = 0x2000,
  GPUREG_COLOR0INFO = 0x2001,
  GPUREG_DEPTHINFO = 0x2002,
  GPUREG_COLOR1INFO = 0x2003,
  GPUREG_COLOR2INFO = 0x2004,
  GPUREG_COLOR3INFO = 0x2005,
  GPUREG_COHERDESTBASE0 = 0x2006,
  GPUREG_COHERDESTBASE1 = 0x2007,
  GPUREG_COHERDESTBASE2 = 0x2008,
  GPUREG_COHERDESTBASE3 = 0x2009,
  GPUREG_COHERDESTBASE4 = 0x200A,
  GPUREG_COHERDESTBASE5 = 0x200B,
  GPUREG_COHERDESTBASE6 = 0x200C,
  GPUREG_COHERDESTBASE7 = 0x200D,
  GPUREG_SCREENSCISSORTL = 0x200E,
  GPUREG_SCREENSCISSORBR = 0x200F,
  GPUREG_WINDOWPACKET = 0x2080,
  GPUREG_PACKET1 = 0x2080,
  GPUREG_WINDOWOFFSET = 0x2080,
  GPUREG_WINDOWSCISSORTL = 0x2081,
  GPUREG_WINDOWSCISSORBR = 0x2082,
  GPUREG_VALUESPACKET = 0x2100,
  GPUREG_PACKET2 = 0x2100,
  GPUREG_MAXVTXINDX = 0x2100,
  GPUREG_MINVTXINDX = 0x2101,
  GPUREG_INDXOFFSET = 0x2102,
  GPUREG_MULTIPRIMIBRESETINDX = 0x2103,
  GPUREG_COLORMASK = 0x2104,
  GPUREG_BLENDRED = 0x2105,
  GPUREG_BLENDGREEN = 0x2106,
  GPUREG_BLENDBLUE = 0x2107,
  GPUREG_BLENDALPHA = 0x2108,
  GPUREG_UNUSED0 = 0x2109,
  GPUREG_UNUSED1 = 0x210A,
  GPUREG_UNUSED2 = 0x210B,
  GPUREG_STENCILREFMASKBF = 0x210C,
  GPUREG_STENCILREFMASK = 0x210D,
  GPUREG_ALPHAREF = 0x210E,
  GPUREG_VPORTXSCALE = 0x210F,
  GPUREG_VPORTXOFFSET = 0x2110,
  GPUREG_VPORTYSCALE = 0x2111,
  GPUREG_VPORTYOFFSET = 0x2112,
  GPUREG_VPORTZSCALE = 0x2113,
  GPUREG_VPORTZOFFSET = 0x2114,
  GPUREG_PROGRAMPACKET = 0x2180,
  GPUREG_PACKET3 = 0x2180,
  GPUREG_PROGRAMCONTROL = 0x2180,
  GPUREG_CONTEXTMISC = 0x2181,
  GPUREG_INTERPOLATORCONTROL = 0x2182,
  GPUREG_WRAPPING0 = 0x2183,
  GPUREG_WRAPPING1 = 0x2184,
  GPUREG_CONTROLPACKET = 0x2200,
  GPUREG_PACKET4 = 0x2200,
  GPUREG_DEPTHCONTROL = 0x2200,
  GPUREG_BLENDCONTROL0 = 0x2201,
  GPUREG_COLORCONTROL = 0x2202,
  GPUREG_HICONTROL = 0x2203,
  GPUREG_CLIPCONTROL = 0x2204,
  GPUREG_MODECONTROL = 0x2205,
  GPUREG_VTECONTROL = 0x2206,
  GPUREG_UNUSED3 = 0x2207,
  GPUREG_EDRAMMODECONTROL = 0x2208,
  GPUREG_BLENDCONTROL1 = 0x2209,
  GPUREG_BLENDCONTROL2 = 0x220A,
  GPUREG_BLENDCONTROL3 = 0x220B,
  GPUREG_TESSELLATORPACKET = 0x2280,
  GPUREG_PACKET5 = 0x2280,
  GPUREG_POINTSIZE = 0x2280,
  GPUREG_POINTMINMAX = 0x2281,
  GPUREG_LINECONTROL = 0x2282,
  GPUREG_UNUSED4 = 0x2283,
  GPUREG_OUTPUTPATHCONTROL = 0x2284,
  GPUREG_HOSCONTROL = 0x2285,
  GPUREG_HOSMAXTESSLEVEL = 0x2286,
  GPUREG_HOSMINTESSLEVEL = 0x2287,
  GPUREG_HOSREUSEDEPTH = 0x2288,
  GPUREG_GROUPPRIMTYPE = 0x2289,
  GPUREG_GROUPFIRSTDECR = 0x228A,
  GPUREG_GROUPDECR = 0x228B,
  GPUREG_GROUPVECT0CONTROL = 0x228C,
  GPUREG_GROUPVECT1CONTROL = 0x228D,
  GPUREG_GROUPVECT0FMTCONTROL = 0x228E,
  GPUREG_GROUPVECT1FMTCONTROL = 0x228F,
  GPUREG_UNUSED5 = 0x2290,
  GPUREG_UNUSED6 = 0x2291,
  GPUREG_MPASSPSCONTROL = 0x2292,
  GPUREG_VIZQUERY = 0x2293,
  GPUREG_ENHANCE = 0x2294,
  GPUREG_MISCPACKET = 0x2300,
  GPUREG_PACKET6 = 0x2300,
  GPUREG_SCLINECONTROL = 0x2300,
  GPUREG_AACONFIG = 0x2301,
  GPUREG_VTXCONTROL = 0x2302,
  GPUREG_GBVERTCLIPADJ = 0x2303,
  GPUREG_GBVERTDISCADJ = 0x2304,
  GPUREG_GBHORZCLIPADJ = 0x2305,
  GPUREG_GBHORZDISCADJ = 0x2306,
  GPUREG_VSCONST = 0x2307,
  GPUREG_PSCONST = 0x2308,
  GPUREG_DEBUGMISC0 = 0x2309,
  GPUREG_DEBUGMISC1 = 0x230A,
  GPUREG_UNUSED7 = 0x230B,
  GPUREG_UNUSED8 = 0x230C,
  GPUREG_UNUSED9 = 0x230D,
  GPUREG_UNUSED10 = 0x230E,
  GPUREG_UNUSED11 = 0x230F,
  GPUREG_UNUSED12 = 0x2310,
  GPUREG_UNUSED13 = 0x2311,
  GPUREG_AAMASK = 0x2312,
  GPUREG_UNUSED14 = 0x2313,
  GPUREG_UNUSED15 = 0x2314,
  GPUREG_UNUSED16 = 0x2315,
  GPUREG_VERTEXREUSEBLOCKCONTROL = 0x2316,
  GPUREG_OUTDEALLOCCONTROL = 0x2317,
  GPUREG_COPYCONTROL = 0x2318,
  GPUREG_COPYDESTBASE = 0x2319,
  GPUREG_COPYDESTPITCH = 0x231A,
  GPUREG_COPYDESTINFO = 0x231B,
  GPUREG_HICLEAR = 0x231C,
  GPUREG_DEPTHCLEAR = 0x231D,
  GPUREG_COLORCLEAR = 0x231E,
  GPUREG_COLORCLEARLO = 0x231F,
  GPUREG_COPYFUNC = 0x2320,
  GPUREG_COPYREF = 0x2321,
  GPUREG_COPYMASK = 0x2322,
  GPUREG_COPYSURFACESLICE = 0x2323,
  GPUREG_SAMPLECOUNTCONTROL = 0x2324,
  GPUREG_SAMPLECOUNTADDRESS = 0x2325,
  GPUREG_POINTPACKET = 0x2380,
  GPUREG_PACKET7 = 0x2380,
  GPUREG_POLYOFFSETFRONTSCALE = 0x2380,
  GPUREG_POLYOFFSETFRONTOFFSET = 0x2381,
  GPUREG_POLYOFFSETBACKSCALE = 0x2382,
  GPUREG_POLYOFFSETBACKOFFSET = 0x2383,
  GPUREG_POINTXRAD = 0x2384,
  GPUREG_POINTYRAD = 0x2385,
  GPUREG_POINTCONSTANTSIZE = 0x2386,
  GPUREG_POINTCULLRAD = 0x2387,
  GPUREG_CLIPPLANE0 = 0x2388,
  GPUREG_CLIPPLANE1 = 0x238C,
  GPUREG_CLIPPLANE2 = 0x2390,
  GPUREG_CLIPPLANE3 = 0x2394,
  GPUREG_CLIPPLANE4 = 0x2398,
  GPUREG_CLIPPLANE5 = 0x239C,
  GPUREG_ALUCONSTANTS = 0x4000,
  GPUREG_FETCHCONSTANTS = 0x4800,
  GPUREG_FLOWCONSTANTS = 0x4900,
  GPUREG_BOOLEANCONSTANTS = 0x4900,
  GPUREG_INTEGERCONSTANTS = 0x4908,
  GPUREG_FLUSHFETCHCONSTANTS = 0x5000,
};

/*   36 */
enum _D3DSHADER_MISCTYPE_OFFSETS
{
  D3DSMO_POSITION = 0x0,
  D3DSMO_FACE = 0x1,
};

/*   37 */
enum _D3DVS_RASTOUT_OFFSETS
{
  D3DSRO_POSITION = 0x0,
  D3DSRO_FOG = 0x1,
  D3DSRO_POINT_SIZE = 0x2,
  D3DSRO_FORCE_DWORD = 0x7FFFFFFF,
};

/*   38 */
enum _D3DXCOMPRESSION_FLAGS
{
  D3DXCOMPRESS_DEFAULT = 0x0,
  D3DXCOMPRESS_FORCE_DWORD = 0x7FFFFFFF,
};

/*   39 */
enum GPUVERTEXFORMAT
{
  GPUVERTEXFORMAT_8_8_8_8 = 0x6,
  GPUVERTEXFORMAT_2_10_10_10 = 0x7,
  GPUVERTEXFORMAT_10_11_11 = 0x10,
  GPUVERTEXFORMAT_11_11_10 = 0x11,
  GPUVERTEXFORMAT_16_16 = 0x19,
  GPUVERTEXFORMAT_16_16_16_16 = 0x1A,
  GPUVERTEXFORMAT_16_16_FLOAT = 0x1F,
  GPUVERTEXFORMAT_16_16_16_16_FLOAT = 0x20,
  GPUVERTEXFORMAT_32 = 0x21,
  GPUVERTEXFORMAT_32_32 = 0x22,
  GPUVERTEXFORMAT_32_32_32_32 = 0x23,
  GPUVERTEXFORMAT_32_FLOAT = 0x24,
  GPUVERTEXFORMAT_32_32_FLOAT = 0x25,
  GPUVERTEXFORMAT_32_32_32_32_FLOAT = 0x26,
  GPUVERTEXFORMAT_32_32_32_FLOAT = 0x39,
};

/*   40 */
enum _D3DVS_ADDRESSMODE_TYPE
{
  D3DVS_ADDRMODE_ABSOLUTE = 0x0,
  D3DVS_ADDRMODE_RELATIVE = 0x2000,
  D3DVS_ADDRMODE_FORCE_DWORD = 0x7FFFFFFF,
};

/*   41 */
enum _D3DSHADER_ADDRESSMODE_TYPE
{
  D3DSHADER_ADDRMODE_ABSOLUTE = 0x0,
  D3DSHADER_ADDRMODE_RELATIVE = 0x2000,
  D3DSHADER_ADDRMODE_FORCE_DWORD = 0x7FFFFFFF,
};

/*   42 */
enum _D3DSHADER_PARAM_SRCMOD_TYPE
{
  D3DSPSM_NONE = 0x0,
  D3DSPSM_NEG = 0x1000000,
  D3DSPSM_BIAS = 0x2000000,
  D3DSPSM_BIASNEG = 0x3000000,
  D3DSPSM_SIGN = 0x4000000,
  D3DSPSM_SIGNNEG = 0x5000000,
  D3DSPSM_COMP = 0x6000000,
  D3DSPSM_X2 = 0x7000000,
  D3DSPSM_X2NEG = 0x8000000,
  D3DSPSM_DZ = 0x9000000,
  D3DSPSM_DW = 0xA000000,
  D3DSPSM_ABS = 0xB000000,
  D3DSPSM_ABSNEG = 0xC000000,
  D3DSPSM_NOT = 0xD000000,
  D3DSPSM_FORCE_DWORD = 0x7FFFFFFF,
};

/*   43 */
enum GPUEDRAMCOLORFORMAT
{
  GPUEDRAMCOLORFORMAT_8_8_8_8 = 0x0,
  GPUEDRAMCOLORFORMAT_8_8_8_8_GAMMA = 0x1,
  GPUEDRAMCOLORFORMAT_2_10_10_10 = 0x2,
  GPUEDRAMCOLORFORMAT_2_10_10_10_FLOAT = 0x3,
  GPUEDRAMCOLORFORMAT_16_16 = 0x4,
  GPUEDRAMCOLORFORMAT_16_16_16_16 = 0x5,
  GPUEDRAMCOLORFORMAT_16_16_FLOAT = 0x6,
  GPUEDRAMCOLORFORMAT_16_16_16_16_FLOAT = 0x7,
  GPUEDRAMCOLORFORMAT_2_10_10_10_AS_10_10_10_10 = 0xA,
  GPUEDRAMCOLORFORMAT_2_10_10_10_FLOAT_AS_16_16_16_16 = 0xC,
  GPUEDRAMCOLORFORMAT_32_FLOAT = 0xE,
  GPUEDRAMCOLORFORMAT_32_32_FLOAT = 0xF,
};

/*   44 */
enum GPUPERFREGISTER
{
  GPUPERFREG_PA_SU_PERFCOUNTER0_SELECT = 0xC88,
  GPUPERFREG_PA_SU_PERFCOUNTER1_SELECT = 0xC89,
  GPUPERFREG_PA_SU_PERFCOUNTER2_SELECT = 0xC8A,
  GPUPERFREG_PA_SU_PERFCOUNTER3_SELECT = 0xC8B,
  GPUPERFREG_PA_SC_PERFCOUNTER0_SELECT = 0xC98,
  GPUPERFREG_PA_SC_PERFCOUNTER1_SELECT = 0xC99,
  GPUPERFREG_PA_SC_PERFCOUNTER2_SELECT = 0xC9A,
  GPUPERFREG_PA_SC_PERFCOUNTER3_SELECT = 0xC9B,
  GPUPERFREG_VGT_PERFCOUNTER0_SELECT = 0xC48,
  GPUPERFREG_VGT_PERFCOUNTER1_SELECT = 0xC49,
  GPUPERFREG_VGT_PERFCOUNTER2_SELECT = 0xC4A,
  GPUPERFREG_VGT_PERFCOUNTER3_SELECT = 0xC4B,
  GPUPERFREG_TCR_PERFCOUNTER0_SELECT = 0xE05,
  GPUPERFREG_TCR_PERFCOUNTER1_SELECT = 0xE08,
  GPUPERFREG_TP0_PERFCOUNTER0_SELECT = 0xE1F,
  GPUPERFREG_TP0_PERFCOUNTER1_SELECT = 0xE22,
  GPUPERFREG_TP1_PERFCOUNTER0_SELECT = 0xE28,
  GPUPERFREG_TP1_PERFCOUNTER1_SELECT = 0xE2B,
  GPUPERFREG_TP2_PERFCOUNTER0_SELECT = 0xE31,
  GPUPERFREG_TP2_PERFCOUNTER1_SELECT = 0xE34,
  GPUPERFREG_TP3_PERFCOUNTER0_SELECT = 0xE3A,
  GPUPERFREG_TP3_PERFCOUNTER1_SELECT = 0xE3D,
  GPUPERFREG_TCM_PERFCOUNTER0_SELECT = 0xE54,
  GPUPERFREG_TCM_PERFCOUNTER1_SELECT = 0xE57,
  GPUPERFREG_TCF_PERFCOUNTER0_SELECT = 0xE5A,
  GPUPERFREG_TCF_PERFCOUNTER1_SELECT = 0xE5D,
  GPUPERFREG_TCF_PERFCOUNTER2_SELECT = 0xE60,
  GPUPERFREG_TCF_PERFCOUNTER3_SELECT = 0xE63,
  GPUPERFREG_TCF_PERFCOUNTER4_SELECT = 0xE66,
  GPUPERFREG_TCF_PERFCOUNTER5_SELECT = 0xE69,
  GPUPERFREG_TCF_PERFCOUNTER6_SELECT = 0xE6C,
  GPUPERFREG_TCF_PERFCOUNTER7_SELECT = 0xE6F,
  GPUPERFREG_TCF_PERFCOUNTER8_SELECT = 0xE72,
  GPUPERFREG_TCF_PERFCOUNTER9_SELECT = 0xE75,
  GPUPERFREG_TCF_PERFCOUNTER10_SELECT = 0xE78,
  GPUPERFREG_TCF_PERFCOUNTER11_SELECT = 0xE7B,
  GPUPERFREG_VC_PERFCOUNTER0_SELECT = 0xE48,
  GPUPERFREG_VC_PERFCOUNTER1_SELECT = 0xE4B,
  GPUPERFREG_VC_PERFCOUNTER2_SELECT = 0xE4E,
  GPUPERFREG_VC_PERFCOUNTER3_SELECT = 0xE51,
  GPUPERFREG_SQ_PERFCOUNTER0_SELECT = 0xDC8,
  GPUPERFREG_SQ_PERFCOUNTER1_SELECT = 0xDC9,
  GPUPERFREG_SQ_PERFCOUNTER2_SELECT = 0xDCA,
  GPUPERFREG_SQ_PERFCOUNTER3_SELECT = 0xDCB,
  GPUPERFREG_SX_PERFCOUNTER0_SELECT = 0xDD4,
  GPUPERFREG_MC0_PERFCOUNTER0_SELECT = 0x815,
  GPUPERFREG_MC1_PERFCOUNTER0_SELECT = 0x855,
  GPUPERFREG_MH_PERFCOUNTER0_SELECT = 0xA18,
  GPUPERFREG_MH_PERFCOUNTER1_SELECT = 0xA1B,
  GPUPERFREG_MH_PERFCOUNTER2_SELECT = 0xA1E,
  GPUPERFREG_BIF_PERFCOUNTER0_SELECT = 0x48,
  GPUPERFREG_HZ_PERFCOUNTER0_SELECT = 0x1004,
  GPUPERFREG_HZ_PERFCOUNTER1_SELECT = 0x1007,
  GPUPERFREG_BC_PERFCOUNTER0_SELECT = 0xF04,
  GPUPERFREG_BC_PERFCOUNTER1_SELECT = 0xF05,
  GPUPERFREG_BC_PERFCOUNTER2_SELECT = 0xF06,
  GPUPERFREG_BC_PERFCOUNTER3_SELECT = 0xF07,
  GPUPERFREG_RBBM_PERFCOUNTER0_SELECT = 0x395,
  GPUPERFREG_RBBM_PERFCOUNTER1_SELECT = 0x396,
  GPUPERFREG_CP_PERFCOUNTER0_SELECT = 0x1E6,
  GPUPERFREG_PA_SU_PERFCOUNTER0_LOW = 0xC8C,
  GPUPERFREG_PA_SU_PERFCOUNTER0_HI = 0xC8D,
  GPUPERFREG_PA_SU_PERFCOUNTER1_LOW = 0xC8E,
  GPUPERFREG_PA_SU_PERFCOUNTER1_HI = 0xC8F,
  GPUPERFREG_PA_SU_PERFCOUNTER2_LOW = 0xC90,
  GPUPERFREG_PA_SU_PERFCOUNTER2_HI = 0xC91,
  GPUPERFREG_PA_SU_PERFCOUNTER3_LOW = 0xC92,
  GPUPERFREG_PA_SU_PERFCOUNTER3_HI = 0xC93,
  GPUPERFREG_PA_SC_PERFCOUNTER0_LOW = 0xC9C,
  GPUPERFREG_PA_SC_PERFCOUNTER0_HI = 0xC9D,
  GPUPERFREG_PA_SC_PERFCOUNTER1_LOW = 0xC9E,
  GPUPERFREG_PA_SC_PERFCOUNTER1_HI = 0xC9F,
  GPUPERFREG_PA_SC_PERFCOUNTER2_LOW = 0xCA0,
  GPUPERFREG_PA_SC_PERFCOUNTER2_HI = 0xCA1,
  GPUPERFREG_PA_SC_PERFCOUNTER3_LOW = 0xCA2,
  GPUPERFREG_PA_SC_PERFCOUNTER3_HI = 0xCA3,
  GPUPERFREG_VGT_PERFCOUNTER0_LOW = 0xC4C,
  GPUPERFREG_VGT_PERFCOUNTER0_HI = 0xC4D,
  GPUPERFREG_VGT_PERFCOUNTER1_LOW = 0xC4E,
  GPUPERFREG_VGT_PERFCOUNTER1_HI = 0xC4F,
  GPUPERFREG_VGT_PERFCOUNTER2_LOW = 0xC50,
  GPUPERFREG_VGT_PERFCOUNTER2_HI = 0xC51,
  GPUPERFREG_VGT_PERFCOUNTER3_LOW = 0xC52,
  GPUPERFREG_VGT_PERFCOUNTER3_HI = 0xC53,
  GPUPERFREG_TCR_PERFCOUNTER0_LOW = 0xE07,
  GPUPERFREG_TCR_PERFCOUNTER0_HI = 0xE06,
  GPUPERFREG_TCR_PERFCOUNTER1_LOW = 0xE0A,
  GPUPERFREG_TCR_PERFCOUNTER1_HI = 0xE09,
  GPUPERFREG_TP0_PERFCOUNTER0_LOW = 0xE21,
  GPUPERFREG_TP0_PERFCOUNTER0_HI = 0xE20,
  GPUPERFREG_TP0_PERFCOUNTER1_LOW = 0xE24,
  GPUPERFREG_TP0_PERFCOUNTER1_HI = 0xE23,
  GPUPERFREG_TP1_PERFCOUNTER0_LOW = 0xE2A,
  GPUPERFREG_TP1_PERFCOUNTER0_HI = 0xE29,
  GPUPERFREG_TP1_PERFCOUNTER1_LOW = 0xE2D,
  GPUPERFREG_TP1_PERFCOUNTER1_HI = 0xE2C,
  GPUPERFREG_TP2_PERFCOUNTER0_LOW = 0xE33,
  GPUPERFREG_TP2_PERFCOUNTER0_HI = 0xE32,
  GPUPERFREG_TP2_PERFCOUNTER1_LOW = 0xE36,
  GPUPERFREG_TP2_PERFCOUNTER1_HI = 0xE35,
  GPUPERFREG_TP3_PERFCOUNTER0_LOW = 0xE3C,
  GPUPERFREG_TP3_PERFCOUNTER0_HI = 0xE3B,
  GPUPERFREG_TP3_PERFCOUNTER1_LOW = 0xE3F,
  GPUPERFREG_TP3_PERFCOUNTER1_HI = 0xE3E,
  GPUPERFREG_TCM_PERFCOUNTER0_LOW = 0xE56,
  GPUPERFREG_TCM_PERFCOUNTER0_HI = 0xE55,
  GPUPERFREG_TCM_PERFCOUNTER1_LOW = 0xE59,
  GPUPERFREG_TCM_PERFCOUNTER1_HI = 0xE58,
  GPUPERFREG_TCF_PERFCOUNTER0_LOW = 0xE5C,
  GPUPERFREG_TCF_PERFCOUNTER0_HI = 0xE5B,
  GPUPERFREG_TCF_PERFCOUNTER1_LOW = 0xE5F,
  GPUPERFREG_TCF_PERFCOUNTER1_HI = 0xE5E,
  GPUPERFREG_TCF_PERFCOUNTER2_LOW = 0xE62,
  GPUPERFREG_TCF_PERFCOUNTER2_HI = 0xE61,
  GPUPERFREG_TCF_PERFCOUNTER3_LOW = 0xE65,
  GPUPERFREG_TCF_PERFCOUNTER3_HI = 0xE64,
  GPUPERFREG_TCF_PERFCOUNTER4_LOW = 0xE68,
  GPUPERFREG_TCF_PERFCOUNTER4_HI = 0xE67,
  GPUPERFREG_TCF_PERFCOUNTER5_LOW = 0xE6B,
  GPUPERFREG_TCF_PERFCOUNTER5_HI = 0xE6A,
  GPUPERFREG_TCF_PERFCOUNTER6_LOW = 0xE6E,
  GPUPERFREG_TCF_PERFCOUNTER6_HI = 0xE6D,
  GPUPERFREG_TCF_PERFCOUNTER7_LOW = 0xE71,
  GPUPERFREG_TCF_PERFCOUNTER7_HI = 0xE70,
  GPUPERFREG_TCF_PERFCOUNTER8_LOW = 0xE74,
  GPUPERFREG_TCF_PERFCOUNTER8_HI = 0xE73,
  GPUPERFREG_TCF_PERFCOUNTER9_LOW = 0xE77,
  GPUPERFREG_TCF_PERFCOUNTER9_HI = 0xE76,
  GPUPERFREG_TCF_PERFCOUNTER10_LOW = 0xE7A,
  GPUPERFREG_TCF_PERFCOUNTER10_HI = 0xE79,
  GPUPERFREG_TCF_PERFCOUNTER11_LOW = 0xE7D,
  GPUPERFREG_TCF_PERFCOUNTER11_HI = 0xE7C,
  GPUPERFREG_VC_PERFCOUNTER0_LOW = 0xE4A,
  GPUPERFREG_VC_PERFCOUNTER0_HI = 0xE49,
  GPUPERFREG_VC_PERFCOUNTER1_LOW = 0xE4D,
  GPUPERFREG_VC_PERFCOUNTER1_HI = 0xE4C,
  GPUPERFREG_VC_PERFCOUNTER2_LOW = 0xE50,
  GPUPERFREG_VC_PERFCOUNTER2_HI = 0xE4F,
  GPUPERFREG_VC_PERFCOUNTER3_LOW = 0xE53,
  GPUPERFREG_VC_PERFCOUNTER3_HI = 0xE52,
  GPUPERFREG_SQ_PERFCOUNTER0_LOW = 0xDCC,
  GPUPERFREG_SQ_PERFCOUNTER0_HI = 0xDCD,
  GPUPERFREG_SQ_PERFCOUNTER1_LOW = 0xDCE,
  GPUPERFREG_SQ_PERFCOUNTER1_HI = 0xDCF,
  GPUPERFREG_SQ_PERFCOUNTER2_LOW = 0xDD0,
  GPUPERFREG_SQ_PERFCOUNTER2_HI = 0xDD1,
  GPUPERFREG_SQ_PERFCOUNTER3_LOW = 0xDD2,
  GPUPERFREG_SQ_PERFCOUNTER3_HI = 0xDD3,
  GPUPERFREG_SX_PERFCOUNTER0_LOW = 0xDD8,
  GPUPERFREG_SX_PERFCOUNTER0_HI = 0xDD9,
  GPUPERFREG_MC0_PERFCOUNTER0_LOW = 0x817,
  GPUPERFREG_MC0_PERFCOUNTER0_HI = 0x816,
  GPUPERFREG_MC1_PERFCOUNTER0_LOW = 0x857,
  GPUPERFREG_MC1_PERFCOUNTER0_HI = 0x856,
  GPUPERFREG_MH_PERFCOUNTER0_LOW = 0xA1A,
  GPUPERFREG_MH_PERFCOUNTER0_HI = 0xA19,
  GPUPERFREG_MH_PERFCOUNTER1_LOW = 0xA1D,
  GPUPERFREG_MH_PERFCOUNTER1_HI = 0xA1C,
  GPUPERFREG_MH_PERFCOUNTER2_LOW = 0xA20,
  GPUPERFREG_MH_PERFCOUNTER2_HI = 0xA1F,
  GPUPERFREG_BIF_PERFCOUNTER0_LOW = 0x4A,
  GPUPERFREG_BIF_PERFCOUNTER0_HI = 0x49,
  GPUPERFREG_HZ_PERFCOUNTER0_LOW = 0x1006,
  GPUPERFREG_HZ_PERFCOUNTER0_HI = 0x1005,
  GPUPERFREG_HZ_PERFCOUNTER1_LOW = 0x1009,
  GPUPERFREG_HZ_PERFCOUNTER1_HI = 0x1008,
  GPUPERFREG_BC_PERFCOUNTER0_LOW = 0xF08,
  GPUPERFREG_BC_PERFCOUNTER0_HI = 0xF09,
  GPUPERFREG_BC_PERFCOUNTER1_LOW = 0xF0A,
  GPUPERFREG_BC_PERFCOUNTER1_HI = 0xF0B,
  GPUPERFREG_BC_PERFCOUNTER2_LOW = 0xF0C,
  GPUPERFREG_BC_PERFCOUNTER2_HI = 0xF0D,
  GPUPERFREG_BC_PERFCOUNTER3_LOW = 0xF0E,
  GPUPERFREG_BC_PERFCOUNTER3_HI = 0xF0F,
  GPUPERFREG_RBBM_PERFCOUNTER0_LOW = 0x397,
  GPUPERFREG_RBBM_PERFCOUNTER0_HI = 0x398,
  GPUPERFREG_RBBM_PERFCOUNTER1_LOW = 0x399,
  GPUPERFREG_RBBM_PERFCOUNTER1_HI = 0x39A,
  GPUPERFREG_CP_PERFCOUNTER0_LOW = 0x1E7,
  GPUPERFREG_CP_PERFCOUNTER0_HI = 0x1E8,
  GPUPERFREG_CP_PERFMON_CNTL = 0x1F5,
  GPUPERFREG_VGT_EVENT_INITIATOR = 0x21F9,
};

/*   45 */
enum _AUDIT_EVENT_TYPE
{
  AuditEventObjectAccess = 0x0,
  AuditEventDirectoryServiceAccess = 0x1,
};

/*   46 */
enum _D3DSVERROR_TYPE
{
  D3DSVE_GENERIC_ERROR = 0x0,
  D3DSVE_INSTRUCTION_WARNING = 0x1,
  D3DSVE_INSTRUCTION_ERROR = 0x2,
  D3DSVE_ELEMENT_WARNING = 0x3,
  D3DSVE_ELEMENT_ERROR = 0x4,
  D3DSVE_GLOBAL_WARNING = 0x5,
  D3DSVE_GLOBAL_ERROR = 0x6,
  D3DSVE_GENERIC_WARNING = 0x7,
};

/*   47 */
enum GPUEDRAMDEPTHFORMAT
{
  GPUEDRAMDEPTHFORMAT_24_8 = 0x0,
  GPUEDRAMDEPTHFORMAT_24_8_FLOAT = 0x1,
};

/*   48 */
enum GPUSIGN
{
  GPUSIGN_UNSIGNED = 0x0,
  GPUSIGN_SIGNED = 0x1,
  GPUSIGN_BIAS = 0x2,
  GPUSIGN_GAMMA = 0x3,
};

/*   49 */
enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0x0,
  SecurityIdentification = 0x1,
  SecurityImpersonation = 0x2,
  SecurityDelegation = 0x3,
};

/*   50 */
enum _D3DBASISTYPE
{
  D3DBASIS_BEZIER = 0x0,
  D3DBASIS_BSPLINE = 0x1,
  D3DBASIS_CATMULL_ROM = 0x2,
  D3DBASIS_FORCE_DWORD = 0x7FFFFFFF,
};

/*   51 */
enum GPUSWIZZLE
{
  GPUSWIZZLE_X = 0x0,
  GPUSWIZZLE_Y = 0x1,
  GPUSWIZZLE_Z = 0x2,
  GPUSWIZZLE_W = 0x3,
  GPUSWIZZLE_0 = 0x4,
  GPUSWIZZLE_1 = 0x5,
  GPUSWIZZLE_KEEP = 0x7,
};

/*   52 */
enum _TOKEN_TYPE
{
  TokenPrimary = 0x1,
  TokenImpersonation = 0x2,
};

/*   53 */
enum _D3DDEGREETYPE
{
  D3DDEGREE_LINEAR = 0x1,
  D3DDEGREE_QUADRATIC = 0x2,
  D3DDEGREE_CUBIC = 0x3,
  D3DDEGREE_QUINTIC = 0x5,
  D3DDEGREE_FORCE_DWORD = 0x7FFFFFFF,
};

/*   54 */
enum GPUNUMFORMAT
{
  GPUNUMFORMAT_FRACTION = 0x0,
  GPUNUMFORMAT_INTEGER = 0x1,
};

/*   55 */
enum _TOKEN_INFORMATION_CLASS
{
  TokenUser = 0x1,
  TokenGroups = 0x2,
  TokenPrivileges = 0x3,
  TokenOwner = 0x4,
  TokenPrimaryGroup = 0x5,
  TokenDefaultDacl = 0x6,
  TokenSource = 0x7,
  TokenType = 0x8,
  TokenImpersonationLevel = 0x9,
  TokenStatistics = 0xA,
  TokenRestrictedSids = 0xB,
  TokenSessionId = 0xC,
};

/*   56 */
enum _D3DPATCHEDGESTYLE
{
  D3DPATCHEDGE_DISCRETE = 0x0,
  D3DPATCHEDGE_CONTINUOUS = 0x1,
  D3DPATCHEDGE_FORCE_DWORD = 0x7FFFFFFF,
};

/*   57 */
enum GPUCONSTANTTYPE
{
  GPUCONSTANTTYPE_INVALID_TEXTURE = 0x0,
  GPUCONSTANTTYPE_INVALID_VERTEX = 0x1,
  GPUCONSTANTTYPE_TEXTURE = 0x2,
  GPUCONSTANTTYPE_VERTEX = 0x3,
};

/*   58 */
enum _D3DSTATEBLOCKTYPE
{
  D3DSBT_ALL = 0x1,
  D3DSBT_PIXELSTATE = 0x2,
  D3DSBT_VERTEXSTATE = 0x3,
  D3DSBT_FORCE_DWORD = 0x7FFFFFFF,
};

/*   59 */
enum GPUCLAMP
{
  GPUCLAMP_WRAP = 0x0,
  GPUCLAMP_MIRROR = 0x1,
  GPUCLAMP_CLAMP_TO_LAST = 0x2,
  GPUCLAMP_MIRROR_ONCE_TO_LAST = 0x3,
  GPUCLAMP_CLAMP_HALFWAY = 0x4,
  GPUCLAMP_MIRROR_ONCE_HALFWAY = 0x5,
  GPUCLAMP_CLAMP_TO_BORDER = 0x6,
  GPUCLAMP_MIRROR_TO_BORDER = 0x7,
};

/*   60 */
enum _D3DDEVTYPE
{
  D3DDEVTYPE_HAL = 0x1,
  D3DDEVTYPE_COMMAND_BUFFER = 0x2,
  D3DDEVTYPE_FORCE_DWORD = 0x7FFFFFFF,
};

/*   61 */
enum GPUPERFEVENT_PA_SC
{
  GPUPE_SC_SR_WINDOW_VALID = 0x0,
  GPUPE_SC_CW_WINDOW_VALID = 0x1,
  GPUPE_SC_QM_WINDOW_VALID = 0x2,
  GPUPE_SC_QPP_WINDOW_VALID = 0x3,
  GPUPE_SC_ITER_WINDOW_VALID = 0x4,
  GPUPE_SC_STARVED_BY_PA = 0x5,
  GPUPE_SC_STARVED_BY_RCC = 0x6,
  GPUPE_SC_STALLED_BY_PRIM_FF = 0x7,
  GPUPE_SC_STALLED_BY_RCC = 0x8,
  GPUPE_SC_STALLED_BY_BC = 0x9,
  GPUPE_SC_STALLED_BY_SX = 0xA,
  GPUPE_SC_STALLED_BY_SX0 = 0xB,
  GPUPE_SC_STALLED_BY_SX1 = 0xC,
  GPUPE_SC_STALLED_BY_SQ = 0xD,
  GPUPE_SC_STALLED_BY_SP = 0xE,
  GPUPE_SC_WAIT_FOR_R1 = 0xF,
  GPUPE_SC_SCISSOR_DISCARD = 0x10,
  GPUPE_SC_BB_DISCARD = 0x11,
  GPUPE_SC_SUPERT_PRIM_DISCARD = 0x12,
  GPUPE_SC_RT_PRIM = 0x13,
  GPUPE_SC_TILE_VALID = 0x14,
  GPUPE_SC_TILE_PER_PRIM_H0 = 0x15,
  GPUPE_SC_TILE_PER_PRIM_H1 = 0x16,
  GPUPE_SC_TILE_PER_PRIM_H2 = 0x17,
  GPUPE_SC_TILE_PER_PRIM_H3 = 0x18,
  GPUPE_SC_TILE_PER_PRIM_H4 = 0x19,
  GPUPE_SC_TILE_PER_PRIM_H5 = 0x1A,
  GPUPE_SC_TILE_PER_PRIM_H6 = 0x1B,
  GPUPE_SC_TILE_PER_PRIM_H7 = 0x1C,
  GPUPE_SC_TILE_PER_PRIM_H8 = 0x1D,
  GPUPE_SC_TILE_PER_PRIM_H9 = 0x1E,
  GPUPE_SC_TILE_PER_PRIM_H10 = 0x1F,
  GPUPE_SC_TILE_PER_PRIM_H11 = 0x20,
  GPUPE_SC_TILE_PER_PRIM_H12 = 0x21,
  GPUPE_SC_TILE_PER_PRIM_H13 = 0x22,
  GPUPE_SC_TILE_PER_PRIM_H14 = 0x23,
  GPUPE_SC_TILE_PER_PRIM_H15 = 0x24,
  GPUPE_SC_TILE_PER_PRIM_H16 = 0x25,
  GPUPE_SC_SUPERT_TILE_DISCARD = 0x26,
  GPUPE_SC_QM_NUM_QUADS = 0x27,
  GPUPE_SC_QM_MASK_H0 = 0x28,
  GPUPE_SC_QM_MASK_H1 = 0x29,
  GPUPE_SC_QM_MASK_H2 = 0x2A,
  GPUPE_SC_QM_MASK_H3 = 0x2B,
  GPUPE_SC_QM_MASK_H4 = 0x2C,
  GPUPE_SC_QM_MASK_H5 = 0x2D,
  GPUPE_SC_QM_MASK_H6 = 0x2E,
  GPUPE_SC_QM_MASK_H7 = 0x2F,
  GPUPE_SC_QM_MASK_H8 = 0x30,
  GPUPE_SC_QM_MASK_H9 = 0x31,
  GPUPE_SC_QM_MASK_H10 = 0x32,
  GPUPE_SC_QM_MASK_H11 = 0x33,
  GPUPE_SC_QM_MASK_H12 = 0x34,
  GPUPE_SC_QM_MASK_H13 = 0x35,
  GPUPE_SC_QM_MASK_H14 = 0x36,
  GPUPE_SC_QM_MASK_H15 = 0x37,
  GPUPE_SC_QM_MASK_H16 = 0x38,
  GPUPE_SC_QM_COVERED_H0 = 0x39,
  GPUPE_SC_QM_COVERED_H1 = 0x3A,
  GPUPE_SC_QM_COVERED_H2 = 0x3B,
  GPUPE_SC_QM_COVERED_H3 = 0x3C,
  GPUPE_SC_QM_COVERED_H4 = 0x3D,
  GPUPE_SC_QM_COVERED_H5 = 0x3E,
  GPUPE_SC_QM_COVERED_H6 = 0x3F,
  GPUPE_SC_QM_COVERED_H7 = 0x40,
  GPUPE_SC_QM_COVERED_H8 = 0x41,
  GPUPE_SC_QM_COVERED_H9 = 0x42,
  GPUPE_SC_QM_COVERED_H10 = 0x43,
  GPUPE_SC_QM_COVERED_H11 = 0x44,
  GPUPE_SC_QM_COVERED_H12 = 0x45,
  GPUPE_SC_QM_COVERED_H13 = 0x46,
  GPUPE_SC_QM_COVERED_H14 = 0x47,
  GPUPE_SC_QM_COVERED_H15 = 0x48,
  GPUPE_SC_QM_COVERED_H16 = 0x49,
  GPUPE_SC_HIER_NUM_QUADS = 0x4A,
  GPUPE_SC_HIER_MASK_H0 = 0x4B,
  GPUPE_SC_HIER_MASK_H1 = 0x4C,
  GPUPE_SC_HIER_MASK_H2 = 0x4D,
  GPUPE_SC_HIER_MASK_H3 = 0x4E,
  GPUPE_SC_HIER_MASK_H4 = 0x4F,
  GPUPE_SC_HIER_MASK_H5 = 0x50,
  GPUPE_SC_HIER_MASK_H6 = 0x51,
  GPUPE_SC_HIER_MASK_H7 = 0x52,
  GPUPE_SC_HIER_MASK_H8 = 0x53,
  GPUPE_SC_HIER_MASK_H9 = 0x54,
  GPUPE_SC_HIER_MASK_H10 = 0x55,
  GPUPE_SC_HIER_MASK_H11 = 0x56,
  GPUPE_SC_HIER_MASK_H12 = 0x57,
  GPUPE_SC_HIER_MASK_H13 = 0x58,
  GPUPE_SC_HIER_MASK_H14 = 0x59,
  GPUPE_SC_HIER_MASK_H15 = 0x5A,
  GPUPE_SC_HIER_MASK_H16 = 0x5B,
  GPUPE_SC_DET_NUM_QUADS = 0x5C,
  GPUPE_SC_PKR_QD_PER_ROW_H1 = 0x5D,
  GPUPE_SC_PKR_QD_PER_ROW_H2 = 0x5E,
  GPUPE_SC_PKR_QD_PER_ROW_H3 = 0x5F,
  GPUPE_SC_PKR_QD_PER_ROW_H4 = 0x60,
  GPUPE_SC_PKR_END_OF_VECTOR = 0x61,
  GPUPE_SC_PKR_ONE_CLK = 0x62,
  GPUPE_SC_QD_WITH_1_PIX = 0x63,
  GPUPE_SC_QD_WITH_2_PIX = 0x64,
  GPUPE_SC_QD_WITH_3_PIX = 0x65,
  GPUPE_SC_QD_WITH_4_PIX = 0x66,
  GPUPE_SC_SR_WINDOW_VALID_BUSY = 0x67,
  GPUPE_SC_CW_WINDOW_VALID_BUSY = 0x68,
  GPUPE_SC_QM_WINDOW_VALID_BUSY = 0x69,
  GPUPE_SC_QPP_WINDOW_VALID_BUSY = 0x6A,
  GPUPE_SC_ITER_WINDOW_VALID_BUSY = 0x6B,
};

/*   62 */
enum _D3DMULTISAMPLE_TYPE
{
  D3DMULTISAMPLE_NONE = 0x0,
  D3DMULTISAMPLE_2_SAMPLES = 0x1,
  D3DMULTISAMPLE_4_SAMPLES = 0x2,
  D3DMULTISAMPLE_FORCE_DWORD = 0x7FFFFFFF,
};

/*   63 */
enum GPUDIMENSION
{
  GPUDIMENSION_1D = 0x0,
  GPUDIMENSION_2D = 0x1,
  GPUDIMENSION_3D = 0x2,
  GPUDIMENSION_CUBEMAP = 0x3,
};

/*   64 */
enum __VECTOR_PACK_TYPES
{
  VPACK_D3DCOLOR = 0x0,
  VPACK_NORMSHORT2 = 0x1,
  VPACK_NORMPACKED32 = 0x2,
  VPACK_FLOAT16_2 = 0x3,
  VPACK_NORMSHORT4 = 0x4,
  VPACK_FLOAT16_4 = 0x5,
  VPACK_NORMPACKED64 = 0x6,
};

/*   65 */
enum _D3DFORMAT
{
  D3DFMT_DXT1 = 0x1A200152,
  D3DFMT_LIN_DXT1 = 0x1A200052,
  D3DFMT_DXT2 = 0x1A200153,
  D3DFMT_LIN_DXT2 = 0x1A200053,
  D3DFMT_DXT3 = 0x1A200153,
  D3DFMT_LIN_DXT3 = 0x1A200053,
  D3DFMT_DXT3A = 0x1A20017A,
  D3DFMT_LIN_DXT3A = 0x1A20007A,
  D3DFMT_DXT3A_1111 = 0x1A20017D,
  D3DFMT_LIN_DXT3A_1111 = 0x1A20007D,
  D3DFMT_DXT4 = 0x1A200154,
  D3DFMT_LIN_DXT4 = 0x1A200054,
  D3DFMT_DXT5 = 0x1A200154,
  D3DFMT_LIN_DXT5 = 0x1A200054,
  D3DFMT_DXT5A = 0x1A20017B,
  D3DFMT_LIN_DXT5A = 0x1A20007B,
  D3DFMT_DXN = 0x1A200171,
  D3DFMT_LIN_DXN = 0x1A200071,
  D3DFMT_CTX1 = 0x1A20017C,
  D3DFMT_LIN_CTX1 = 0x1A20007C,
  D3DFMT_A8 = 0x4900102,
  D3DFMT_LIN_A8 = 0x4900002,
  D3DFMT_L8 = 0x28000102,
  D3DFMT_LIN_L8 = 0x28000002,
  D3DFMT_R5G6B5 = 0x28280144,
  D3DFMT_LIN_R5G6B5 = 0x28280044,
  D3DFMT_R6G5B5 = 0x28280145,
  D3DFMT_LIN_R6G5B5 = 0x28280045,
  D3DFMT_L6V5U5 = 0x2A200B45,
  D3DFMT_LIN_L6V5U5 = 0x2A200A45,
  D3DFMT_X1R5G5B5 = 0x28280143,
  D3DFMT_LIN_X1R5G5B5 = 0x28280043,
  D3DFMT_A1R5G5B5 = 0x18280143,
  D3DFMT_LIN_A1R5G5B5 = 0x18280043,
  D3DFMT_A4R4G4B4 = 0x1828014F,
  D3DFMT_LIN_A4R4G4B4 = 0x1828004F,
  D3DFMT_X4R4G4B4 = 0x2828014F,
  D3DFMT_LIN_X4R4G4B4 = 0x2828004F,
  D3DFMT_Q4W4V4U4 = 0x1A20AB4F,
  D3DFMT_LIN_Q4W4V4U4 = 0x1A20AA4F,
  D3DFMT_A8L8 = 0x800014A,
  D3DFMT_LIN_A8L8 = 0x800004A,
  D3DFMT_G8R8 = 0x2D20014A,
  D3DFMT_LIN_G8R8 = 0x2D20004A,
  D3DFMT_V8U8 = 0x2D20AB4A,
  D3DFMT_LIN_V8U8 = 0x2D20AA4A,
  D3DFMT_D16 = 0x1A220158,
  D3DFMT_LIN_D16 = 0x1A220058,
  D3DFMT_L16 = 0x28000158,
  D3DFMT_LIN_L16 = 0x28000058,
  D3DFMT_R16F = 0x2DA2AB5E,
  D3DFMT_LIN_R16F = 0x2DA2AA5E,
  D3DFMT_R16F_EXPAND = 0x2DA2AB5B,
  D3DFMT_LIN_R16F_EXPAND = 0x2DA2AA5B,
  D3DFMT_UYVY = 0x1A20014C,
  D3DFMT_LIN_UYVY = 0x1A20004C,
  D3DFMT_LE_UYVY = 0x1A20010C,
  D3DFMT_LE_LIN_UYVY = 0x1A20000C,
  D3DFMT_G8R8_G8B8 = 0x1828014C,
  D3DFMT_LIN_G8R8_G8B8 = 0x1828004C,
  D3DFMT_R8G8_B8G8 = 0x1828014B,
  D3DFMT_LIN_R8G8_B8G8 = 0x1828004B,
  D3DFMT_YUY2 = 0x1A20014B,
  D3DFMT_LIN_YUY2 = 0x1A20004B,
  D3DFMT_LE_YUY2 = 0x1A20010B,
  D3DFMT_LE_LIN_YUY2 = 0x1A20000B,
  D3DFMT_A8R8G8B8 = 0x18280186,
  D3DFMT_LIN_A8R8G8B8 = 0x18280086,
  D3DFMT_X8R8G8B8 = 0x28280186,
  D3DFMT_LIN_X8R8G8B8 = 0x28280086,
  D3DFMT_A8B8G8R8 = 0x1A200186,
  D3DFMT_LIN_A8B8G8R8 = 0x1A200086,
  D3DFMT_X8B8G8R8 = 0x2A200186,
  D3DFMT_LIN_X8B8G8R8 = 0x2A200086,
  D3DFMT_X8L8V8U8 = 0x2A200B86,
  D3DFMT_LIN_X8L8V8U8 = 0x2A200A86,
  D3DFMT_Q8W8V8U8 = 0x1A20AB86,
  D3DFMT_LIN_Q8W8V8U8 = 0x1A20AA86,
  D3DFMT_A2R10G10B10 = 0x182801B6,
  D3DFMT_LIN_A2R10G10B10 = 0x182800B6,
  D3DFMT_X2R10G10B10 = 0x282801B6,
  D3DFMT_LIN_X2R10G10B10 = 0x282800B6,
  D3DFMT_A2B10G10R10 = 0x1A2001B6,
  D3DFMT_LIN_A2B10G10R10 = 0x1A2000B6,
  D3DFMT_A2W10V10U10 = 0x1A202BB6,
  D3DFMT_LIN_A2W10V10U10 = 0x1A202AB6,
  D3DFMT_A16L16 = 0x8000199,
  D3DFMT_LIN_A16L16 = 0x8000099,
  D3DFMT_G16R16 = 0x2D200199,
  D3DFMT_LIN_G16R16 = 0x2D200099,
  D3DFMT_V16U16 = 0x2D20AB99,
  D3DFMT_LIN_V16U16 = 0x2D20AA99,
  D3DFMT_R10G11B11 = 0x282801B7,
  D3DFMT_LIN_R10G11B11 = 0x282800B7,
  D3DFMT_R11G11B10 = 0x282801B8,
  D3DFMT_LIN_R11G11B10 = 0x282800B8,
  D3DFMT_W10V11U11 = 0x2A20ABB7,
  D3DFMT_LIN_W10V11U11 = 0x2A20AAB7,
  D3DFMT_W11V11U10 = 0x2A20ABB8,
  D3DFMT_LIN_W11V11U10 = 0x2A20AAB8,
  D3DFMT_G16R16F = 0x2D22AB9F,
  D3DFMT_LIN_G16R16F = 0x2D22AA9F,
  D3DFMT_G16R16F_EXPAND = 0x2D22AB9C,
  D3DFMT_LIN_G16R16F_EXPAND = 0x2D22AA9C,
  D3DFMT_L32 = 0x280001A1,
  D3DFMT_LIN_L32 = 0x280000A1,
  D3DFMT_R32F = 0x2DA2ABA4,
  D3DFMT_LIN_R32F = 0x2DA2AAA4,
  D3DFMT_D24S8 = 0x2D200196,
  D3DFMT_LIN_D24S8 = 0x2D200096,
  D3DFMT_D24X8 = 0x2DA00196,
  D3DFMT_LIN_D24X8 = 0x2DA00096,
  D3DFMT_D24FS8 = 0x1A220197,
  D3DFMT_LIN_D24FS8 = 0x1A220097,
  D3DFMT_D32 = 0x1A2201A1,
  D3DFMT_LIN_D32 = 0x1A2200A1,
  D3DFMT_A16B16G16R16 = 0x1A20015A,
  D3DFMT_LIN_A16B16G16R16 = 0x1A20005A,
  D3DFMT_Q16W16V16U16 = 0x1A20AB5A,
  D3DFMT_LIN_Q16W16V16U16 = 0x1A20AA5A,
  D3DFMT_A16B16G16R16F = 0x1A22AB60,
  D3DFMT_LIN_A16B16G16R16F = 0x1A22AA60,
  D3DFMT_A16B16G16R16F_EXPAND = 0x1A22AB5D,
  D3DFMT_LIN_A16B16G16R16F_EXPAND = 0x1A22AA5D,
  D3DFMT_A32L32 = 0x80001A2,
  D3DFMT_LIN_A32L32 = 0x80000A2,
  D3DFMT_G32R32 = 0x2D2001A2,
  D3DFMT_LIN_G32R32 = 0x2D2000A2,
  D3DFMT_V32U32 = 0x2D20ABA2,
  D3DFMT_LIN_V32U32 = 0x2D20AAA2,
  D3DFMT_G32R32F = 0x2D22ABA5,
  D3DFMT_LIN_G32R32F = 0x2D22AAA5,
  D3DFMT_A32B32G32R32 = 0x1A2001A3,
  D3DFMT_LIN_A32B32G32R32 = 0x1A2000A3,
  D3DFMT_Q32W32V32U32 = 0x1A20ABA3,
  D3DFMT_LIN_Q32W32V32U32 = 0x1A20AAA3,
  D3DFMT_A32B32G32R32F = 0x1A22ABA6,
  D3DFMT_LIN_A32B32G32R32F = 0x1A22AAA6,
  D3DFMT_A2B10G10R10F_EDRAM = 0x1A2201BF,
  D3DFMT_G16R16_EDRAM = 0x2D20AB8D,
  D3DFMT_A16B16G16R16_EDRAM = 0x1A20AB55,
  D3DFMT_LE_X8R8G8B8 = 0x28280106,
  D3DFMT_LE_A8R8G8B8 = 0x18280106,
  D3DFMT_LE_X2R10G10B10 = 0x28280136,
  D3DFMT_LE_A2R10G10B10 = 0x18280136,
  D3DFMT_INDEX16 = 0x1,
  D3DFMT_INDEX32 = 0x6,
  D3DFMT_LE_INDEX16 = 0x0,
  D3DFMT_LE_INDEX32 = 0x4,
  D3DFMT_VERTEXDATA = 0x8,
  D3DFMT_UNKNOWN = 0xFFFFFFFF,
  D3DFMT_FORCE_DWORD = 0x7FFFFFFF,
};

/*   66 */
enum GPUREQUESTSIZE
{
  GPUREQUESTSIZE_256BIT = 0x0,
  GPUREQUESTSIZE_512BIT = 0x1,
};

/*   67 */
enum __VECTOR_PACK_MASK
{
  VPACK_32 = 0x1,
  VPACK_64LO = 0x2,
  VPACK_64HI = 0x3,
};

/*   68 */
enum GPUCLAMPPOLICY
{
  GPUCLAMPPOLICY_D3D = 0x0,
  GPUCLAMPPOLICY_OGL = 0x1,
};

/*   69 */
enum GPUMINMAGFILTER
{
  GPUMINMAGFILTER_POINT = 0x0,
  GPUMINMAGFILTER_LINEAR = 0x1,
  GPUMINMAGFILTER_KEEP = 0x3,
};

/*   70 */
enum _D3DLIGHTTYPE
{
  D3DLIGHT_POINT = 0x1,
  D3DLIGHT_SPOT = 0x2,
  D3DLIGHT_DIRECTIONAL = 0x3,
  D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF,
};

/*   71 */
enum GPUMIPFILTER
{
  GPUMIPFILTER_POINT = 0x0,
  GPUMIPFILTER_LINEAR = 0x1,
  GPUMIPFILTER_BASEMAP = 0x2,
  GPUMIPFILTER_KEEP = 0x3,
};

/*   72 */
enum GPUANISOFILTER
{
  GPUANISOFILTER_DISABLED = 0x0,
  GPUANISOFILTER_MAX1TO1 = 0x1,
  GPUANISOFILTER_MAX2TO1 = 0x2,
  GPUANISOFILTER_MAX4TO1 = 0x3,
  GPUANISOFILTER_MAX8TO1 = 0x4,
  GPUANISOFILTER_MAX16TO1 = 0x5,
  GPUANISOFILTER_KEEP = 0x7,
};

/*   73 */
enum GPUBORDERCOLOR
{
  GPUBORDERCOLOR_ABGR_BLACK = 0x0,
  GPUBORDERCOLOR_ABGR_WHITE = 0x1,
  GPUBORDERCOLOR_ACBYCR_BLACK = 0x2,
  GPUBORDERCOLOR_ACBCRY_BLACK = 0x3,
};

/*   74 */
enum GPUTRICLAMP
{
  GPUTRICLAMP_NORMAL = 0x0,
  GPUTRICLAMP_ONE_SIXTH = 0x1,
  GPUTRICLAMP_ONE_FOURTH = 0x2,
  GPUTRICLAMP_THREE_EIGHTHS = 0x3,
};

/*   75 */
enum GPUADDRESSCLAMP
{
  GPUADDRESSCLAMP_CLAMP_TO_LAST = 0x0,
  GPUADDRESSCLAMP_CLAMP_TO_CONSTANT = 0x1,
};

/*   76 */
enum _D3DFOGMODE
{
  D3DFOG_NONE = 0x0,
  D3DFOG_EXP = 0x1,
  D3DFOG_EXP2 = 0x2,
  D3DFOG_LINEAR = 0x3,
  D3DFOG_FORCE_DWORD = 0x7FFFFFFF,
};

/*   77 */
enum GPUSURFACENUMBER
{
  GPUSURFACENUMBER_UREPEAT = 0x0,
  GPUSURFACENUMBER_SREPEAT = 0x1,
  GPUSURFACENUMBER_UINTEGER = 0x2,
  GPUSURFACENUMBER_SINTEGER = 0x3,
  GPUSURFACENUMBER_FLOAT = 0x7,
};

/*   78 */
enum D3DXShader::_D3DXNODE_TYPE
{
  D3DXNT_VOID = 0x0,
  D3DXNT_LIST = 0x1,
  D3DXNT_TREE = 0x2,
  D3DXNT_TOKEN = 0x3,
  D3DXNT_PROGRAM = 0x4,
  D3DXNT_SCOPE = 0x5,
  D3DXNT_DECL = 0x6,
  D3DXNT_USAGE = 0x7,
  D3DXNT_ARRAY = 0x8,
  D3DXNT_TYPE = 0x9,
  D3DXNT_FUNCTION = 0xA,
  D3DXNT_VARIABLE = 0xB,
  D3DXNT_STATEMENT = 0xC,
  D3DXNT_EXPRESSION = 0xD,
  D3DXNT_VALUE = 0xE,
  D3DXNT_BUFFER = 0xF,
  D3DXNT_STATE = 0x10,
  D3DXNT_REGISTER = 0x11,
  D3DXNT_FORMAT = 0x12,
  D3DXNT_ATTRIBUTE = 0x13,
  D3DXNT_CBUFFER = 0x14,
  D3DXNT_ASM_INSTRUCTION = 0x15,
  D3DXNT_ASM_REGISTER = 0x16,
  D3DXNT_UASM_INSTRUCTION = 0x17,
  D3DXNT_UASM_REGISTER = 0x18,
  D3DXNT_UASM_BLOCK = 0x19,
};

/*   79 */
enum _D3DTRANSFORMSTATETYPE
{
  D3DTS_WORLD = 0x0,
  D3DTS_VIEW = 0x1,
  D3DTS_PROJECTION = 0x2,
  D3DTS_TEXTURE0 = 0x3,
  D3DTS_TEXTURE1 = 0x4,
  D3DTS_TEXTURE2 = 0x5,
  D3DTS_TEXTURE3 = 0x6,
  D3DTS_TEXTURE4 = 0x7,
  D3DTS_TEXTURE5 = 0x8,
  D3DTS_TEXTURE6 = 0x9,
  D3DTS_TEXTURE7 = 0xA,
  D3DTS_MAX = 0xB,
  D3DTS_FORCE_DWORD = 0x7FFFFFFF,
};

/*   80 */
enum GPUSURFACESWAP
{
  SURFACESWAP_LOW_RED = 0x0,
  SURFACESWAP_LOW_BLUE = 0x1,
};

/*   81 */
enum GPUPRIMTYPE
{
  GPUPRIMTYPE_NONE = 0x0,
  GPUPRIMTYPE_POINTLIST = 0x1,
  GPUPRIMTYPE_LINELIST = 0x2,
  GPUPRIMTYPE_LINESTRIP = 0x3,
  GPUPRIMTYPE_TRILIST = 0x4,
  GPUPRIMTYPE_TRIFAN = 0x5,
  GPUPRIMTYPE_TRISTRIP = 0x6,
  GPUPRIMTYPE_TRI_WITH_WFLAGS = 0x7,
  GPUPRIMTYPE_RECTLIST = 0x8,
  GPUPRIMTYPE_LINELOOP = 0xC,
  GPUPRIMTYPE_QUADLIST = 0xD,
  GPUPRIMTYPE_QUADSTRIP = 0xE,
  GPUPRIMTYPE_POLYGON = 0xF,
  GPUPRIMTYPE_2D_COPY_RECT_LIST_V0 = 0x10,
  GPUPRIMTYPE_2D_COPY_RECT_LIST_V1 = 0x11,
  GPUPRIMTYPE_2D_COPY_RECT_LIST_V2 = 0x12,
  GPUPRIMTYPE_2D_COPY_RECT_LIST_V3 = 0x13,
  GPUPRIMTYPE_2D_FILL_RECT_LIST = 0x14,
  GPUPRIMTYPE_2D_LINE_STRIP = 0x15,
  GPUPRIMTYPE_2D_TRI_STRIP = 0x16,
};

/*   82 */
enum _D3DXPRIORITY_TYPE
{
  D3DXPRIORITY_LOW = 0x0,
  D3DXPRIORITY_HIGH = 0x1,
  D3DXPRIORITY_FORCE_DWORD = 0x7FFFFFFF,
};

/*   83 */
enum _D3DMATERIALCOLORSOURCE
{
  D3DMCS_MATERIAL = 0x0,
  D3DMCS_COLOR1 = 0x1,
  D3DMCS_COLOR2 = 0x2,
  D3DMCS_FORCE_DWORD = 0x7FFFFFFF,
};

/*   84 */
enum _D3DTEXTURESTAGESTATETYPE
{
  D3DTSS_COLOROP = 0x1,
  D3DTSS_COLORARG1 = 0x2,
  D3DTSS_COLORARG2 = 0x3,
  D3DTSS_ALPHAOP = 0x4,
  D3DTSS_ALPHAARG1 = 0x5,
  D3DTSS_ALPHAARG2 = 0x6,
  D3DTSS_BUMPENVMAT00 = 0x7,
  D3DTSS_BUMPENVMAT01 = 0x8,
  D3DTSS_BUMPENVMAT10 = 0x9,
  D3DTSS_BUMPENVMAT11 = 0xA,
  D3DTSS_TEXCOORDINDEX = 0xB,
  D3DTSS_BUMPENVLSCALE = 0x16,
  D3DTSS_BUMPENVLOFFSET = 0x17,
  D3DTSS_TEXTURETRANSFORMFLAGS = 0x18,
  D3DTSS_COLORARG0 = 0x1A,
  D3DTSS_ALPHAARG0 = 0x1B,
  D3DTSS_RESULTARG = 0x1C,
  D3DTSS_CONSTANT = 0x20,
  D3DTSS_MAX = 0x21,
  D3DTSS_FORCE_DWORD = 0x7FFFFFFF,
};

/*   85 */
enum D3DXShader::_D3DXVALUE_TYPE
{
  D3DXVT_BOOL = 0x0,
  D3DXVT_INT = 0x1,
  D3DXVT_UINT = 0x2,
  D3DXVT_FLOAT = 0x3,
  D3DXVT_NODE = 0x4,
  D3DXVT_BUFFER = 0x5,
  D3DXVT_VARIABLE = 0x6,
};

/*   86 */
enum GPUGROUPPRIMTYPE
{
  GPUGROUPPRIMTYPE_3D_POINT = 0x0,
  GPUGROUPPRIMTYPE_3D_LINE = 0x1,
  GPUGROUPPRIMTYPE_3D_TRI = 0x2,
  GPUGROUPPRIMTYPE_3D_RECT = 0x3,
  GPUGROUPPRIMTYPE_3D_QUAD = 0x4,
  GPUGROUPPRIMTYPE_2D_COPY_RECT_V0 = 0x5,
  GPUGROUPPRIMTYPE_2D_COPY_RECT_V1 = 0x6,
  GPUGROUPPRIMTYPE_2D_COPY_RECT_V2 = 0x7,
  GPUGROUPPRIMTYPE_2D_COPY_RECT_V3 = 0x8,
  GPUGROUPPRIMTYPE_2D_FILL_RECT = 0x9,
  GPUGROUPPRIMTYPE_2D_LINE = 0xA,
  GPUGROUPPRIMTYPE_2D_TRI = 0xB,
  GPUGROUPPRIMTYPE_PRIM_INDEX_LINE = 0xC,
  GPUGROUPPRIMTYPE_PRIM_INDEX_TRI = 0xD,
  GPUGROUPPRIMTYPE_PRIM_INDEX_QUAD = 0xE,
};

/*   87 */
enum _D3DXEVENT_TYPE
{
  D3DXEVENT_TRACKSPEED = 0x0,
  D3DXEVENT_TRACKWEIGHT = 0x1,
  D3DXEVENT_TRACKPOSITION = 0x2,
  D3DXEVENT_TRACKENABLE = 0x3,
  D3DXEVENT_PRIORITYBLEND = 0x4,
  D3DXEVENT_FORCE_DWORD = 0x7FFFFFFF,
};

/*   88 */
enum _D3DXTRANSITION_TYPE
{
  D3DXTRANSITION_LINEAR = 0x0,
  D3DXTRANSITION_EASEINEASEOUT = 0x1,
  D3DXTRANSITION_FORCE_DWORD = 0x7FFFFFFF,
};

/*   89 */
enum _D3DTEXTUREOP
{
  D3DTOP_DISABLE = 0x1,
  D3DTOP_SELECTARG1 = 0x2,
  D3DTOP_SELECTARG2 = 0x3,
  D3DTOP_MODULATE = 0x4,
  D3DTOP_MODULATE2X = 0x5,
  D3DTOP_MODULATE4X = 0x6,
  D3DTOP_ADD = 0x7,
  D3DTOP_ADDSIGNED = 0x8,
  D3DTOP_ADDSIGNED2X = 0x9,
  D3DTOP_SUBTRACT = 0xA,
  D3DTOP_ADDSMOOTH = 0xB,
  D3DTOP_BLENDDIFFUSEALPHA = 0xC,
  D3DTOP_BLENDTEXTUREALPHA = 0xD,
  D3DTOP_BLENDFACTORALPHA = 0xE,
  D3DTOP_BLENDTEXTUREALPHAPM = 0xF,
  D3DTOP_BLENDCURRENTALPHA = 0x10,
  D3DTOP_PREMODULATE = 0x11,
  D3DTOP_MODULATEALPHA_ADDCOLOR = 0x12,
  D3DTOP_MODULATECOLOR_ADDALPHA = 0x13,
  D3DTOP_MODULATEINVALPHA_ADDCOLOR = 0x14,
  D3DTOP_MODULATEINVCOLOR_ADDALPHA = 0x15,
  D3DTOP_BUMPENVMAP = 0x16,
  D3DTOP_BUMPENVMAPLUMINANCE = 0x17,
  D3DTOP_DOTPRODUCT3 = 0x18,
  D3DTOP_MULTIPLYADD = 0x19,
  D3DTOP_LERP = 0x1A,
  D3DTOP_MAX = 0x1B,
  D3DTOP_FORCE_DWORD = 0x7FFFFFFF,
};

/*   90 */
enum GPUGROUPPRIMORDER
{
  GPUGROUPPRIMORDER_LIST = 0x0,
  GPUGROUPPRIMORDER_STRIP = 0x1,
  GPUGROUPPRIMORDER_FAN = 0x2,
  GPUGROUPPRIMORDER_LOOP = 0x3,
  GPUGROUPPRIMORDER_POLYGON = 0x4,
};

/*   91 */
enum GPUPERFEVENT_HZ
{
  GPUPE_WRC_1VAL_QUADS = 0x0,
  GPUPE_WRC_2VAL_QUADS = 0x1,
  GPUPE_WRC_3VAL_QUADS = 0x2,
  GPUPE_WRC_4VAL_QUADS = 0x3,
  GPUPE_HZ_WR_BUSY = 0x4,
  GPUPE_HZ_SPARE0 = 0x5,
  GPUPE_RDC_TILE_HIT = 0x6,
  GPUPE_RDC_STAGE3_STALL = 0x7,
  GPUPE_HZ_SPARE1 = 0x8,
  GPUPE_HZ_SPARE2 = 0x9,
  GPUPE_QUADS_KEPT = 0xA,
  GPUPE_QUADS_ZCULL = 0xB,
  GPUPE_QUADS_SCULL = 0xC,
  GPUPE_QUADS_SZCULL = 0xD,
  GPUPE_HZ_RE_BUSY = 0xE,
  GPUPE_BC_SCLK_COUNT = 0xF,
  GPUPE_BC_HZ_VALID0 = 0x10,
  GPUPE_BC_HZ_VALID1 = 0x11,
  GPUPE_BC_HZ_VALID2 = 0x12,
  GPUPE_BC_HZ_VALID3 = 0x13,
  GPUPE_SC_SCLK_COUNT = 0x14,
  GPUPE_SC_HZ_COARSE_SND = 0x15,
  GPUPE_HZ_SC_COARSE_HLD = 0x16,
  GPUPE_HZ_SC_HIER_SND = 0x17,
  GPUPE_SC_HZ_HIER_HLD = 0x18,
  GPUPE_HZ_BC_TILE_SND = 0x19,
  GPUPE_BC_HZ_TILE_HLD = 0x1A,
  GPUPE_SC_STALL_HZ = 0x1B,
  GPUPE_BC_STALL_HZ = 0x1C,
  GPUPE_EVENT_STALL = 0x1D,
  GPUPE_SC_STARVE_HZ_BUSY = 0x1E,
  GPUPE_SC_STARVE_HZ_IDLE = 0x1F,
};

/*   92 */
enum GPUGROUPCONV
{
  GPUGROUPCONV_INDEX_16 = 0x0,
  GPUGROUPCONV_INDEX_32 = 0x1,
  GPUGROUPCONV_UINT_16 = 0x2,
  GPUGROUPCONV_UINT_32 = 0x3,
  GPUGROUPCONV_SINT_16 = 0x4,
  GPUGROUPCONV_SINT_32 = 0x5,
  GPUGROUPCONV_FLOAT_32 = 0x6,
  GPUGROUPCONV_AUTO_PRIM = 0x7,
  GPUGROUPCONV_FIX_1_23_TO_FLOAT = 0x8,
};

/*   93 */
enum GPUCMPFUNC
{
  GPUCMP_NEVER = 0x0,
  GPUCMP_LESS = 0x1,
  GPUCMP_EQUAL = 0x2,
  GPUCMP_LESS_EQUAL = 0x3,
  GPUCMP_GREATER = 0x4,
  GPUCMP_NOT_EQUAL = 0x5,
  GPUCMP_GREATER_EQUAL = 0x6,
  GPUCMP_ALWAYS = 0x7,
};

/*   94 */
enum _D3DXREGISTER_SET
{
  D3DXRS_BOOL = 0x0,
  D3DXRS_INT4 = 0x1,
  D3DXRS_FLOAT4 = 0x2,
  D3DXRS_SAMPLER = 0x3,
  D3DXRS_FORCE_DWORD = 0x7FFFFFFF,
};

/*   95 */
enum _D3DVERTEXBLENDFLAGS
{
  D3DVBF_DISABLE = 0x0,
  D3DVBF_1WEIGHTS = 0x1,
  D3DVBF_2WEIGHTS = 0x2,
  D3DVBF_3WEIGHTS = 0x3,
  D3DVBF_TWEENING = 0xFF,
  D3DVBF_0WEIGHTS = 0x100,
  D3DVBF_FORCE_DWORD = 0x7FFFFFFF,
};

/*   96 */
enum GPUSTENCILOP
{
  GPUSTENCILOP_KEEP = 0x0,
  GPUSTENCILOP_ZERO = 0x1,
  GPUSTENCILOP_REPLACE = 0x2,
  GPUSTENCILOP_INCRSAT = 0x3,
  GPUSTENCILOP_DECRSAT = 0x4,
  GPUSTENCILOP_INVERT = 0x5,
  GPUSTENCILOP_INCR = 0x6,
  GPUSTENCILOP_DECR = 0x7,
};

/*   97 */
enum D3DXShader::_D3DXDECL_TYPE
{
  D3DXDT_TYPE = 0x0,
  D3DXDT_VARIABLE = 0x1,
  D3DXDT_FUNCTION = 0x2,
  D3DXDT_TECHNIQUE = 0x3,
  D3DXDT_PASS = 0x4,
};

/*   98 */
enum BIUPERFREGISTER
{
  BIUPERFREG_BIU_PERFCOUNTER0_SELECT = 0x408041,
  BIUPERFREG_BIU_PERFCOUNTER1_SELECT = 0x408044,
  BIUPERFREG_BIU_PERFCOUNTER2_SELECT = 0x408047,
  BIUPERFREG_BIU_PERFCOUNTER3_SELECT = 0x40804A,
  BIUPERFREG_BIU_PERFCOUNTER0_LOW = 0x408043,
  BIUPERFREG_BIU_PERFCOUNTER0_HI = 0x408042,
  BIUPERFREG_BIU_PERFCOUNTER1_LOW = 0x408046,
  BIUPERFREG_BIU_PERFCOUNTER1_HI = 0x408045,
  BIUPERFREG_BIU_PERFCOUNTER2_LOW = 0x408049,
  BIUPERFREG_BIU_PERFCOUNTER2_HI = 0x408048,
  BIUPERFREG_BIU_PERFCOUNTER3_LOW = 0x40804C,
  BIUPERFREG_BIU_PERFCOUNTER3_HI = 0x40804B,
  BIUPERFREG_BIU_PERFMON_CNTL = 0x408040,
};

/*   99 */
enum _D3DXPARAMETER_CLASS
{
  D3DXPC_SCALAR = 0x0,
  D3DXPC_VECTOR = 0x1,
  D3DXPC_MATRIX_ROWS = 0x2,
  D3DXPC_MATRIX_COLUMNS = 0x3,
  D3DXPC_OBJECT = 0x4,
  D3DXPC_STRUCT = 0x5,
  D3DXPC_FORCE_DWORD = 0x7FFFFFFF,
};

/*  100 */
enum _D3DTEXTURETRANSFORMFLAGS
{
  D3DTTFF_DISABLE = 0x0,
  D3DTTFF_COUNT1 = 0x1,
  D3DTTFF_COUNT2 = 0x2,
  D3DTTFF_COUNT3 = 0x3,
  D3DTTFF_COUNT4 = 0x4,
  D3DTTFF_PROJECTED = 0x100,
  D3DTTFF_FORCE_DWORD = 0x7FFFFFFF,
};

/*  101 */
enum GPUBLEND
{
  GPUBLEND_ZERO = 0x0,
  GPUBLEND_ONE = 0x1,
  GPUBLEND_SRCCOLOR = 0x4,
  GPUBLEND_INVSRCCOLOR = 0x5,
  GPUBLEND_SRCALPHA = 0x6,
  GPUBLEND_INVSRCALPHA = 0x7,
  GPUBLEND_DESTCOLOR = 0x8,
  GPUBLEND_INVDESTCOLOR = 0x9,
  GPUBLEND_DESTALPHA = 0xA,
  GPUBLEND_INVDESTALPHA = 0xB,
  GPUBLEND_BLENDFACTOR = 0xC,
  GPUBLEND_INVBLENDFACTOR = 0xD,
  GPUBLEND_CONSTANTALPHA = 0xE,
  GPUBLEND_INVCONSTANTALPHA = 0xF,
  GPUBLEND_SRCALPHASAT = 0x10,
};

/*  102 */
enum D3DXShader::OPCODE_CLASS
{
  OPC_FETCH_T = 0x0,
  OPC_FETCH_V = 0x1,
  OPC_ALU_V = 0x2,
  OPC_ALU_S = 0x3,
  OPC_ALU_VS = 0x4,
  OPC_FLOW = 0x5,
  OPC_CONFIG = 0x6,
  OPC_NA = 0x7,
  OPC_ZPASS = 0x8,
};

/*  103 */
enum D3DXShader::_D3DXSCOPE_TYPE
{
  D3DXST_GLOBAL = 0x0,
  D3DXST_STRUCT = 0x1,
  D3DXST_PARAM_LIST = 0x2,
  D3DXST_STMT_BLOCK = 0x3,
  D3DXST_FOR_LOOP = 0x4,
  D3DXST_ANNOTATION = 0x5,
  D3DXST_TECHNIQUE = 0x6,
  D3DXST_STATE_BLOCK = 0x7,
};

/*  104 */
enum GPUPERFEVENT_TCR
{
  GPUPE_DGMMPD_IPMUX0_STALL = 0x0,
  GPUPE_DGMMPD_IPMUX1_STALL = 0x1,
  GPUPE_DGMMPD_IPMUX2_STALL = 0x2,
  GPUPE_DGMMPD_IPMUX3_STALL = 0x3,
  GPUPE_DGMMPD_IPMUX_ALL_STALL = 0x4,
  GPUPE_OPMUX0_L2_WRITES = 0x5,
  GPUPE_OPMUX1_L2_WRITES = 0x6,
  GPUPE_OPMUX2_L2_WRITES = 0x7,
  GPUPE_OPMUX3_L2_WRITES = 0x8,
};

/*  105 */
enum _D3DXPARAMETER_TYPE
{
  D3DXPT_VOID = 0x0,
  D3DXPT_BOOL = 0x1,
  D3DXPT_INT = 0x2,
  D3DXPT_FLOAT = 0x3,
  D3DXPT_STRING = 0x4,
  D3DXPT_TEXTURE = 0x5,
  D3DXPT_TEXTURE1D = 0x6,
  D3DXPT_TEXTURE2D = 0x7,
  D3DXPT_TEXTURE3D = 0x8,
  D3DXPT_TEXTURECUBE = 0x9,
  D3DXPT_SAMPLER = 0xA,
  D3DXPT_SAMPLER1D = 0xB,
  D3DXPT_SAMPLER2D = 0xC,
  D3DXPT_SAMPLER3D = 0xD,
  D3DXPT_SAMPLERCUBE = 0xE,
  D3DXPT_PIXELSHADER = 0xF,
  D3DXPT_VERTEXSHADER = 0x10,
  D3DXPT_PIXELFRAGMENT = 0x11,
  D3DXPT_VERTEXFRAGMENT = 0x12,
  D3DXPT_FORCE_DWORD = 0x7FFFFFFF,
};

/*  106 */
enum DCPERFREGISTER
{
  DCPERFREG_DC_PERFCOUNTER0_SELECT = 0x1FC8,
  DCPERFREG_DC_PERFCOUNTER1_SELECT = 0x1FCB,
  DCPERFREG_DC_PERFCOUNTER0_LOW = 0x1FCA,
  DCPERFREG_DC_PERFCOUNTER0_HI = 0x1FC9,
  DCPERFREG_DC_PERFCOUNTER1_LOW = 0x1FCD,
  DCPERFREG_DC_PERFCOUNTER1_HI = 0x1FCC,
};

/*  107 */
enum D3DXShader::_D3DXCOMPONENT_TYPE
{
  D3DXCT_BOOL = 0x0,
  D3DXCT_INT = 0x1,
  D3DXCT_INT8 = 0x2,
  D3DXCT_INT16 = 0x3,
  D3DXCT_INT32 = 0x4,
  D3DXCT_UINT = 0x5,
  D3DXCT_UINT8 = 0x6,
  D3DXCT_UINT16 = 0x7,
  D3DXCT_UINT32 = 0x8,
  D3DXCT_FLOAT = 0x9,
  D3DXCT_FLOAT16 = 0xA,
  D3DXCT_FLOAT32 = 0xB,
  D3DXCT_FLOAT64 = 0xC,
  D3DXCT_NULL = 0xD,
  D3DXCT_STRING = 0xE,
  D3DXCT_TEXTURE = 0xF,
  D3DXCT_TEXTURE1D = 0x10,
  D3DXCT_TEXTURE2D = 0x11,
  D3DXCT_TEXTURE3D = 0x12,
  D3DXCT_TEXTURECUBE = 0x13,
  D3DXCT_SAMPLER = 0x14,
  D3DXCT_SAMPLER1D = 0x15,
  D3DXCT_SAMPLER2D = 0x16,
  D3DXCT_SAMPLER3D = 0x17,
  D3DXCT_SAMPLERCUBE = 0x18,
  D3DXCT_PIXELSHADER = 0x19,
  D3DXCT_VERTEXSHADER = 0x1A,
  D3DXCT_PIXELFRAGMENT = 0x1B,
  D3DXCT_VERTEXFRAGMENT = 0x1C,
  D3DXCT_STATEBLOCK = 0x1D,
  D3DXCT_UNKNOWN = 0x1E,
};

/*  108 */
enum GPUPERFEVENT_TCM
{
  GPUPE_QUAD0_RD_LAT_FIFO_EMPTY = 0x0,
  GPUPE_QUAD0_RD_LAT_FIFO_16TH_FULL = 0x1,
  GPUPE_QUAD0_RD_LAT_FIFO_8TH_FULL = 0x2,
  GPUPE_QUAD0_RD_LAT_FIFO_4TH_FULL = 0x3,
  GPUPE_QUAD0_RD_LAT_FIFO_HALF_FULL = 0x4,
  GPUPE_QUAD0_RD_LAT_FIFO_FULL = 0x5,
  GPUPE_QUAD0_RD_LAT_FIFO_LT_16TH_FULL = 0x6,
  GPUPE_QUAD1_RD_LAT_FIFO_EMPTY = 0x7,
  GPUPE_QUAD1_RD_LAT_FIFO_16TH_FULL = 0x8,
  GPUPE_QUAD1_RD_LAT_FIFO_8TH_FULL = 0x9,
  GPUPE_QUAD1_RD_LAT_FIFO_4TH_FULL = 0xA,
  GPUPE_QUAD1_RD_LAT_FIFO_HALF_FULL = 0xB,
  GPUPE_QUAD1_RD_LAT_FIFO_FULL = 0xC,
  GPUPE_QUAD1_RD_LAT_FIFO_LT_16TH_FULL = 0xD,
  GPUPE_QUAD2_RD_LAT_FIFO_EMPTY = 0xE,
  GPUPE_QUAD2_RD_LAT_FIFO_16TH_FULL = 0xF,
  GPUPE_QUAD2_RD_LAT_FIFO_8TH_FULL = 0x10,
  GPUPE_QUAD2_RD_LAT_FIFO_4TH_FULL = 0x11,
  GPUPE_QUAD2_RD_LAT_FIFO_HALF_FULL = 0x12,
  GPUPE_QUAD2_RD_LAT_FIFO_FULL = 0x13,
  GPUPE_QUAD2_RD_LAT_FIFO_LT_16TH_FULL = 0x14,
  GPUPE_QUAD3_RD_LAT_FIFO_EMPTY = 0x15,
  GPUPE_QUAD3_RD_LAT_FIFO_16TH_FULL = 0x16,
  GPUPE_QUAD3_RD_LAT_FIFO_8TH_FULL = 0x17,
  GPUPE_QUAD3_RD_LAT_FIFO_4TH_FULL = 0x18,
  GPUPE_QUAD3_RD_LAT_FIFO_HALF_FULL = 0x19,
  GPUPE_QUAD3_RD_LAT_FIFO_FULL = 0x1A,
  GPUPE_QUAD3_RD_LAT_FIFO_LT_16TH_FULL = 0x1B,
  GPUPE_READ_STARVED_QUAD0 = 0x1C,
  GPUPE_READ_STARVED_QUAD1 = 0x1D,
  GPUPE_READ_STARVED_QUAD2 = 0x1E,
  GPUPE_READ_STARVED_QUAD3 = 0x1F,
  GPUPE_READ_STARVED = 0x20,
  GPUPE_READ_STALLED_QUAD0 = 0x21,
  GPUPE_READ_STALLED_QUAD1 = 0x22,
  GPUPE_READ_STALLED_QUAD2 = 0x23,
  GPUPE_READ_STALLED_QUAD3 = 0x24,
  GPUPE_READ_STALLED = 0x25,
  GPUPE_VALID_READ_QUAD0 = 0x26,
  GPUPE_VALID_READ_QUAD1 = 0x27,
  GPUPE_VALID_READ_QUAD2 = 0x28,
  GPUPE_VALID_READ_QUAD3 = 0x29,
  GPUPE_TC_TP_STARVED_QUAD0 = 0x2A,
  GPUPE_TC_TP_STARVED_QUAD1 = 0x2B,
  GPUPE_TC_TP_STARVED_QUAD2 = 0x2C,
  GPUPE_TC_TP_STARVED_QUAD3 = 0x2D,
  GPUPE_TC_TP_STARVED = 0x2E,
};

/*  109 */
enum GPUBLENDOP
{
  GPUBLENDOP_ADD = 0x0,
  GPUBLENDOP_SUBTRACT = 0x1,
  GPUBLENDOP_MIN = 0x2,
  GPUBLENDOP_MAX = 0x3,
  GPUBLENDOP_REVSUBTRACT = 0x4,
};

/*  110 */
enum IOCPERFREGISTER
{
  IOCPERFREG_IOC_PERFCOUNTER0_SELECT = 0x410081,
  IOCPERFREG_IOC_PERFCOUNTER1_SELECT = 0x410084,
  IOCPERFREG_IOC_PERFCOUNTER2_SELECT = 0x410087,
  IOCPERFREG_IOC_PERFCOUNTER3_SELECT = 0x41008A,
  IOCPERFREG_IOC_PERFCOUNTER0_LOW = 0x410083,
  IOCPERFREG_IOC_PERFCOUNTER0_HI = 0x410082,
  IOCPERFREG_IOC_PERFCOUNTER1_LOW = 0x410086,
  IOCPERFREG_IOC_PERFCOUNTER1_HI = 0x410085,
  IOCPERFREG_IOC_PERFCOUNTER2_LOW = 0x410089,
  IOCPERFREG_IOC_PERFCOUNTER2_HI = 0x410088,
  IOCPERFREG_IOC_PERFCOUNTER3_LOW = 0x41008C,
  IOCPERFREG_IOC_PERFCOUNTER3_HI = 0x41008B,
  IOCPERFREG_IOC_PERFMON_CNTL = 0x410080,
};

/*  111 */
enum GPUCULL
{
  GPUCULL_NONE_FRONTFACE_CCW = 0x0,
  GPUCULL_FRONT_FRONTFACE_CCW = 0x1,
  GPUCULL_BACK_FRONTFACE_CCW = 0x2,
  GPUCULL_NONE_FRONTFACE_CW = 0x4,
  GPUCULL_FRONT_FRONTFACE_CW = 0x5,
  GPUCULL_BACK_FRONTFACE_CW = 0x6,
};

/*  112 */
enum GPUFILLMODE
{
  GPUFILL_POINT = 0x0,
  GPUFILL_WIREFRAME = 0x1,
  GPUFILL_SOLID = 0x2,
};

/*  113 */
enum _XUSER_SIGNIN_STATE
{
  eXUserSigninState_NotSignedIn = 0x0,
  eXUserSigninState_SignedInLocally = 0x1,
  eXUserSigninState_SignedInToLive = 0x2,
};

/*  114 */
enum GPUVERTEXSIGN
{
  GPUVERTEXSIGN_UNSIGNED = 0x0,
  GPUVERTEXSIGN_SIGNED = 0x1,
};

/*  115 */
enum GPUVERTEXFETCHOP
{
  GPUVERTEXFETCHOP_FETCH_VERTEX = 0x0,
};

/*  116 */
enum D3DXShader::_D3DXTYPE_TEMPLATE
{
  D3DXTT_SCALAR = 0x0,
  D3DXTT_VECTOR = 0x1,
  D3DXTT_MATRIX = 0x2,
  D3DXTT_OBJECT = 0x3,
  D3DXTT_STRUCT = 0x4,
  D3DXTT_UNKNOWN = 0x5,
};

/*  117 */
enum GPUTEXTUREFETCHOP
{
  GPUTEXTUREFETCHOP_FETCH_TEXTURE_MAP = 0x1,
  GPUTEXTUREFETCHOP_GET_BORDER_COLOR_FRACTION = 0x10,
  GPUTEXTUREFETCHOP_GET_COMPUTED_TEX_LOD = 0x11,
  GPUTEXTUREFETCHOP_GET_GRADIENTS = 0x12,
  GPUTEXTUREFETCHOP_GET_WEIGHTS = 0x13,
  GPUTEXTUREFETCHOP_SET_TEX_LOD = 0x18,
  GPUTEXTUREFETCHOP_SET_GRADIENTS_H = 0x19,
  GPUTEXTUREFETCHOP_SET_GRADIENTS_V = 0x1A,
};

/*  118 */
enum _D3DSWAPEFFECT
{
  D3DSWAPEFFECT_DISCARD = 0x1,
  D3DSWAPEFFECT_FLIP = 0x2,
  D3DSWAPEFFECT_COPY = 0x3,
  D3DSWAPEFFECT_FORCE_DWORD = 0x7FFFFFFF,
};

/*  119 */
enum _XPRIVILEGE_TYPE
{
  XPRIVILEGE_MULTIPLAYER_SESSIONS = 0xFE,
  XPRIVILEGE_COMMUNICATIONS = 0xFC,
  XPRIVILEGE_COMMUNICATIONS_FRIENDS_ONLY = 0xFB,
  XPRIVILEGE_PROFILE_VIEWING = 0xF9,
  XPRIVILEGE_PROFILE_VIEWING_FRIENDS_ONLY = 0xF8,
  XPRIVILEGE_USER_CREATED_CONTENT = 0xF7,
  XPRIVILEGE_USER_CREATED_CONTENT_FRIENDS_ONLY = 0xF6,
  XPRIVILEGE_PURCHASE_CONTENT = 0xF5,
  XPRIVILEGE_PRESENCE = 0xF4,
  XPRIVILEGE_PRESENCE_FRIENDS_ONLY = 0xF3,
  XPRIVILEGE_TRADE_CONTENT = 0xEE,
};

/*  120 */
enum D3DXShader::_D3DXEXPR_OP
{
  D3DXEOP_CAST = 0x0,
  D3DXEOP_SEQ = 0x1,
  D3DXEOP_INC = 0x2,
  D3DXEOP_DEC = 0x3,
  D3DXEOP_NOT = 0x4,
  D3DXEOP_NEG = 0x5,
  D3DXEOP_POS = 0x6,
  D3DXEOP_MOD = 0x7,
  D3DXEOP_DIV = 0x8,
  D3DXEOP_REM = 0x9,
  D3DXEOP_ADD = 0xA,
  D3DXEOP_SUB = 0xB,
  D3DXEOP_LT = 0xC,
  D3DXEOP_GT = 0xD,
  D3DXEOP_LE = 0xE,
  D3DXEOP_GE = 0xF,
  D3DXEOP_EQ = 0x10,
  D3DXEOP_NE = 0x11,
  D3DXEOP_AND = 0x12,
  D3DXEOP_OR = 0x13,
  D3DXEOP_INIT = 0x14,
  D3DXEOP_ASN = 0x15,
  D3DXEOP_ARY = 0x16,
  D3DXEOP_OFS = 0x17,
  D3DXEOP_IFTE = 0x18,
  D3DXEOP_CALL = 0x19,
  D3DXEOP_INTRINSIC = 0x1A,
  D3DXEOP_COMPILE = 0x1B,
  D3DXEOP_ME = 0x1C,
  D3DXEOP_DE = 0x1D,
  D3DXEOP_RE = 0x1E,
  D3DXEOP_AE = 0x1F,
  D3DXEOP_SE = 0x20,
  D3DXEOP_POSTINC = 0x21,
  D3DXEOP_POSTDEC = 0x22,
};

/*  121 */
enum GPUFLOWOP
{
  GPUFLOWOP_NOP = 0x0,
  GPUFLOWOP_EXEC = 0x1,
  GPUFLOWOP_EXEC_END = 0x2,
  GPUFLOWOP_COND_EXEC = 0x3,
  GPUFLOWOP_COND_EXEC_END = 0x4,
  GPUFLOWOP_COND_EXEC_PRED = 0x5,
  GPUFLOWOP_COND_EXEC_PRED_END = 0x6,
  GPUFLOWOP_LOOP_START = 0x7,
  GPUFLOWOP_LOOP_END = 0x8,
  GPUFLOWOP_COND_CALL = 0x9,
  GPUFLOWOP_RETURN = 0xA,
  GPUFLOWOP_COND_JUMP = 0xB,
  GPUFLOWOP_ALLOC = 0xC,
  GPUFLOWOP_COND_EXEC_PRED_CLEAN = 0xD,
  GPUFLOWOP_COND_EXEC_PRED_CLEAN_END = 0xE,
  GPUFLOWOP_VFETCH_END = 0xF,
};

/*  122 */
enum GPUPERFEVENT_TCF
{
  GPUPE_VALID_CYCLES = 0x0,
  GPUPE_SINGLE_PHASES = 0x1,
  GPUPE_ANISO_PHASES = 0x2,
  GPUPE_MIP_PHASES = 0x3,
  GPUPE_VOL_PHASES = 0x4,
  GPUPE_MIP_VOL_PHASES = 0x5,
  GPUPE_MIP_ANISO_PHASES = 0x6,
  GPUPE_VOL_ANISO_PHASES = 0x7,
  GPUPE_ANISO_2_1_PHASES = 0x8,
  GPUPE_ANISO_4_1_PHASES = 0x9,
  GPUPE_ANISO_6_1_PHASES = 0xA,
  GPUPE_ANISO_8_1_PHASES = 0xB,
  GPUPE_ANISO_10_1_PHASES = 0xC,
  GPUPE_ANISO_12_1_PHASES = 0xD,
  GPUPE_ANISO_14_1_PHASES = 0xE,
  GPUPE_ANISO_16_1_PHASES = 0xF,
  GPUPE_MIP_VOL_ANISO_PHASES = 0x10,
  GPUPE_ALIGN_2_PHASES = 0x11,
  GPUPE_ALIGN_4_PHASES = 0x12,
  GPUPE_TPC_BUSY = 0x13,
  GPUPE_TPC_STALLED = 0x14,
  GPUPE_TPC_STARVED = 0x15,
  GPUPE_TPC_WORKING = 0x16,
  GPUPE_TPC_WALKER_BUSY = 0x17,
  GPUPE_TPC_WALKER_STALLED = 0x18,
  GPUPE_TPC_WALKER_WORKING = 0x19,
  GPUPE_TPC_ALIGNER_BUSY = 0x1A,
  GPUPE_TPC_ALIGNER_STALLED = 0x1B,
  GPUPE_TPC_ALIGNER_STALLED_BY_BLEND = 0x1C,
  GPUPE_TPC_ALIGNER_STALLED_BY_CACHE = 0x1D,
  GPUPE_TPC_ALIGNER_WORKING = 0x1E,
  GPUPE_TPC_BLEND_BUSY = 0x1F,
  GPUPE_TPC_BLEND_SYNC = 0x20,
  GPUPE_TPC_BLEND_STARVED = 0x21,
  GPUPE_TPC_BLEND_WORKING = 0x22,
  GPUPE_OPCODE_0X00 = 0x23,
  GPUPE_OPCODE_0X01 = 0x24,
  GPUPE_OPCODE_0X04 = 0x25,
  GPUPE_OPCODE_0X10 = 0x26,
  GPUPE_OPCODE_0X11 = 0x27,
  GPUPE_OPCODE_0X12 = 0x28,
  GPUPE_OPCODE_0X13 = 0x29,
  GPUPE_OPCODE_0X18 = 0x2A,
  GPUPE_OPCODE_0X19 = 0x2B,
  GPUPE_OPCODE_0X1A = 0x2C,
  GPUPE_OPCODE_OTHER = 0x2D,
  GPUPE_RESERVED_46 = 0x2E,
  GPUPE_RESERVED_47 = 0x2F,
  GPUPE_RESERVED_48 = 0x30,
  GPUPE_RESERVED_49 = 0x31,
  GPUPE_RESERVED_50 = 0x32,
  GPUPE_RESERVED_51 = 0x33,
  GPUPE_RESERVED_52 = 0x34,
  GPUPE_RESERVED_53 = 0x35,
  GPUPE_RESERVED_54 = 0x36,
  GPUPE_RESERVED_55 = 0x37,
  GPUPE_IN_FIFO_0_EMPTY = 0x38,
  GPUPE_IN_FIFO_0_LT_HALF_FULL = 0x39,
  GPUPE_IN_FIFO_0_HALF_FULL = 0x3A,
  GPUPE_IN_FIFO_0_FULL = 0x3B,
  GPUPE_IN_FIFO_1_EMPTY = 0x3C,
  GPUPE_IN_FIFO_1_LT_HALF_FULL = 0x3D,
  GPUPE_IN_FIFO_1_HALF_FULL = 0x3E,
  GPUPE_IN_FIFO_1_FULL = 0x3F,
  GPUPE_IN_FIFO_2_EMPTY = 0x40,
  GPUPE_IN_FIFO_2_LT_HALF_FULL = 0x41,
  GPUPE_IN_FIFO_2_HALF_FULL = 0x42,
  GPUPE_IN_FIFO_2_FULL = 0x43,
  GPUPE_IN_FIFO_3_EMPTY = 0x44,
  GPUPE_IN_FIFO_3_LT_HALF_FULL = 0x45,
  GPUPE_IN_FIFO_3_HALF_FULL = 0x46,
  GPUPE_IN_FIFO_3_FULL = 0x47,
  GPUPE_IN_FIFO_TPC_EMPTY = 0x48,
  GPUPE_IN_FIFO_TPC_LT_HALF_FULL = 0x49,
  GPUPE_IN_FIFO_TPC_HALF_FULL = 0x4A,
  GPUPE_IN_FIFO_TPC_FULL = 0x4B,
  GPUPE_TPC_TC_XFC = 0x4C,
  GPUPE_TPC_TC_STATE = 0x4D,
  GPUPE_TC_STALL = 0x4E,
  GPUPE_QUAD0_TAPS = 0x4F,
  GPUPE_QUAD1_TAPS = 0x50,
  GPUPE_QUAD2_TAPS = 0x51,
  GPUPE_QUAD3_TAPS = 0x52,
  GPUPE_QUADS = 0x53,
  GPUPE_TCA_SYNC_STALL = 0x54,
  GPUPE_TAG_STALL = 0x55,
  GPUPE_SLICE_STALL = 0x56,
  GPUPE_SKEW_STALL = 0x57,
  GPUPE_TCB_SYNC_STALL = 0x58,
  GPUPE_TCA_VALID = 0x59,
  GPUPE_PROBES_VALID = 0x5A,
  GPUPE_MISS_STALL = 0x5B,
  GPUPE_FETCH_FIFO_STALL = 0x5C,
  GPUPE_TCO_STALL = 0x5D,
  GPUPE_ANY_STALL = 0x5E,
  GPUPE_TAG_MISSES = 0x5F,
  GPUPE_TAG_HITS = 0x60,
  GPUPE_SUB_TAG_MISSES = 0x61,
  GPUPE_SET0_INVALIDATES = 0x62,
  GPUPE_SET1_INVALIDATES = 0x63,
  GPUPE_SET2_INVALIDATES = 0x64,
  GPUPE_SET3_INVALIDATES = 0x65,
  GPUPE_SET0_TAG_MISSES = 0x66,
  GPUPE_SET1_TAG_MISSES = 0x67,
  GPUPE_SET2_TAG_MISSES = 0x68,
  GPUPE_SET3_TAG_MISSES = 0x69,
  GPUPE_SET0_TAG_HITS = 0x6A,
  GPUPE_SET1_TAG_HITS = 0x6B,
  GPUPE_SET2_TAG_HITS = 0x6C,
  GPUPE_SET3_TAG_HITS = 0x6D,
  GPUPE_SET0_SUB_TAG_MISSES = 0x6E,
  GPUPE_SET1_SUB_TAG_MISSES = 0x6F,
  GPUPE_SET2_SUB_TAG_MISSES = 0x70,
  GPUPE_SET3_SUB_TAG_MISSES = 0x71,
  GPUPE_SET0_EVICT1 = 0x72,
  GPUPE_SET0_EVICT2 = 0x73,
  GPUPE_SET0_EVICT3 = 0x74,
  GPUPE_SET0_EVICT4 = 0x75,
  GPUPE_SET0_EVICT5 = 0x76,
  GPUPE_SET0_EVICT6 = 0x77,
  GPUPE_SET0_EVICT7 = 0x78,
  GPUPE_SET0_EVICT8 = 0x79,
  GPUPE_SET0_EVICT9 = 0x7A,
  GPUPE_SET0_EVICT10 = 0x7B,
  GPUPE_SET0_EVICT11 = 0x7C,
  GPUPE_SET0_EVICT12 = 0x7D,
  GPUPE_SET0_EVICT13 = 0x7E,
  GPUPE_SET0_EVICT14 = 0x7F,
  GPUPE_SET0_EVICT15 = 0x80,
  GPUPE_SET0_EVICT16 = 0x81,
  GPUPE_SET1_EVICT1 = 0x82,
  GPUPE_SET1_EVICT2 = 0x83,
  GPUPE_SET1_EVICT3 = 0x84,
  GPUPE_SET1_EVICT4 = 0x85,
  GPUPE_SET1_EVICT5 = 0x86,
  GPUPE_SET1_EVICT6 = 0x87,
  GPUPE_SET1_EVICT7 = 0x88,
  GPUPE_SET1_EVICT8 = 0x89,
  GPUPE_SET1_EVICT9 = 0x8A,
  GPUPE_SET1_EVICT10 = 0x8B,
  GPUPE_SET1_EVICT11 = 0x8C,
  GPUPE_SET1_EVICT12 = 0x8D,
  GPUPE_SET1_EVICT13 = 0x8E,
  GPUPE_SET1_EVICT14 = 0x8F,
  GPUPE_SET1_EVICT15 = 0x90,
  GPUPE_SET1_EVICT16 = 0x91,
  GPUPE_SET2_EVICT1 = 0x92,
  GPUPE_SET2_EVICT2 = 0x93,
  GPUPE_SET2_EVICT3 = 0x94,
  GPUPE_SET2_EVICT4 = 0x95,
  GPUPE_SET2_EVICT5 = 0x96,
  GPUPE_SET2_EVICT6 = 0x97,
  GPUPE_SET2_EVICT7 = 0x98,
  GPUPE_SET2_EVICT8 = 0x99,
  GPUPE_SET2_EVICT9 = 0x9A,
  GPUPE_SET2_EVICT10 = 0x9B,
  GPUPE_SET2_EVICT11 = 0x9C,
  GPUPE_SET2_EVICT12 = 0x9D,
  GPUPE_SET2_EVICT13 = 0x9E,
  GPUPE_SET2_EVICT14 = 0x9F,
  GPUPE_SET2_EVICT15 = 0xA0,
  GPUPE_SET2_EVICT16 = 0xA1,
  GPUPE_SET3_EVICT1 = 0xA2,
  GPUPE_SET3_EVICT2 = 0xA3,
  GPUPE_SET3_EVICT3 = 0xA4,
  GPUPE_SET3_EVICT4 = 0xA5,
  GPUPE_SET3_EVICT5 = 0xA6,
  GPUPE_SET3_EVICT6 = 0xA7,
  GPUPE_SET3_EVICT7 = 0xA8,
  GPUPE_SET3_EVICT8 = 0xA9,
  GPUPE_SET3_EVICT9 = 0xAA,
  GPUPE_SET3_EVICT10 = 0xAB,
  GPUPE_SET3_EVICT11 = 0xAC,
  GPUPE_SET3_EVICT12 = 0xAD,
  GPUPE_SET3_EVICT13 = 0xAE,
  GPUPE_SET3_EVICT14 = 0xAF,
  GPUPE_SET3_EVICT15 = 0xB0,
  GPUPE_SET3_EVICT16 = 0xB1,
  GPUPE_FF_EMPTY = 0xB2,
  GPUPE_FF_LT_HALF_FULL = 0xB3,
  GPUPE_FF_HALF_FULL = 0xB4,
  GPUPE_FF_FULL = 0xB5,
  GPUPE_FF_XFC = 0xB6,
  GPUPE_FF_STALLED = 0xB7,
  GPUPE_FG_MASKS = 0xB8,
  GPUPE_FG_LEFT_MASKS = 0xB9,
  GPUPE_FG_LEFT_MASK_STALLED = 0xBA,
  GPUPE_FG_LEFT_NOT_DONE_STALL = 0xBB,
  GPUPE_FG_LEFT_FG_STALL = 0xBC,
  GPUPE_FG_LEFT_SECTORS = 0xBD,
  GPUPE_FG_RIGHT_MASKS = 0xBE,
  GPUPE_FG_RIGHT_MASK_STALLED = 0xBF,
  GPUPE_FG_RIGHT_NOT_DONE_STALL = 0xC0,
  GPUPE_FG_RIGHT_FG_STALL = 0xC1,
  GPUPE_FG_RIGHT_SECTORS = 0xC2,
  GPUPE_FG0_REQUESTS = 0xC3,
  GPUPE_FG0_STALLED = 0xC4,
  GPUPE_FG1_REQUESTS = 0xC5,
  GPUPE_FG1_STALLED = 0xC6,
  GPUPE_MEM_REQ512 = 0xC7,
  GPUPE_MEM_REQ_SENT = 0xC8,
  GPUPE_MEM_AGP_READ_REQ = 0xC9,
  GPUPE_MEM_LOCAL_READ_REQ = 0xCA,
  GPUPE_TC0_MH_STALLED = 0xCB,
  GPUPE_TC1_MH_STALLED = 0xCC,
};

/*  123 */
enum GPUALUSCALAROP
{
  GPUALUSCALAROP_ADD = 0x0,
  GPUALUSCALAROP_ADDPREV = 0x1,
  GPUALUSCALAROP_MUL = 0x2,
  GPUALUSCALAROP_MULPREV = 0x3,
  GPUALUSCALAROP_MULPREV2 = 0x4,
  GPUALUSCALAROP_MAX = 0x5,
  GPUALUSCALAROP_MIN = 0x6,
  GPUALUSCALAROP_SEQ = 0x7,
  GPUALUSCALAROP_SGT = 0x8,
  GPUALUSCALAROP_SGE = 0x9,
  GPUALUSCALAROP_SNE = 0xA,
  GPUALUSCALAROP_FRC = 0xB,
  GPUALUSCALAROP_TRUNC = 0xC,
  GPUALUSCALAROP_FLOOR = 0xD,
  GPUALUSCALAROP_EXP = 0xE,
  GPUALUSCALAROP_LOGC = 0xF,
  GPUALUSCALAROP_LOG = 0x10,
  GPUALUSCALAROP_RCPC = 0x11,
  GPUALUSCALAROP_RCPF = 0x12,
  GPUALUSCALAROP_RCP = 0x13,
  GPUALUSCALAROP_RSQC = 0x14,
  GPUALUSCALAROP_RSQF = 0x15,
  GPUALUSCALAROP_RSQ = 0x16,
  GPUALUSCALAROP_MAXA = 0x17,
  GPUALUSCALAROP_MAXAF = 0x18,
  GPUALUSCALAROP_SUB = 0x19,
  GPUALUSCALAROP_SUBPREV = 0x1A,
  GPUALUSCALAROP_SETPEQ = 0x1B,
  GPUALUSCALAROP_SETPNE = 0x1C,
  GPUALUSCALAROP_SETPGT = 0x1D,
  GPUALUSCALAROP_SETPGE = 0x1E,
  GPUALUSCALAROP_SETPINV = 0x1F,
  GPUALUSCALAROP_SETPPOP = 0x20,
  GPUALUSCALAROP_SETPCLR = 0x21,
  GPUALUSCALAROP_SETPRSTR = 0x22,
  GPUALUSCALAROP_KILLEQ = 0x23,
  GPUALUSCALAROP_KILLGT = 0x24,
  GPUALUSCALAROP_KILLGE = 0x25,
  GPUALUSCALAROP_KILLNE = 0x26,
  GPUALUSCALAROP_KILLONE = 0x27,
  GPUALUSCALAROP_SQRT = 0x28,
  GPUALUSCALAROP_MULC0 = 0x2A,
  GPUALUSCALAROP_MULC1 = 0x2B,
  GPUALUSCALAROP_ADDC0 = 0x2C,
  GPUALUSCALAROP_ADDC1 = 0x2D,
  GPUALUSCALAROP_SUBC0 = 0x2E,
  GPUALUSCALAROP_SUBC1 = 0x2F,
  GPUALUSCALAROP_SIN = 0x30,
  GPUALUSCALAROP_COS = 0x31,
  GPUALUSCALAROP_RETAINPREV = 0x32,
};

/*  124 */
enum _D3DGPUMAJORVERSION
{
  D3DGPUMAJORVERSION_BETAPREVIEW = 0x2,
  D3DGPUMAJORVERSION_FINAL = 0x3,
};

/*  125 */
enum D3DXShader::_D3DXINTRINSIC_OP
{
  D3DXIOP_ABS = 0x0,
  D3DXIOP_ACOS = 0x1,
  D3DXIOP_ALL = 0x2,
  D3DXIOP_ANY = 0x3,
  D3DXIOP_ASIN = 0x4,
  D3DXIOP_ATAN = 0x5,
  D3DXIOP_ATAN2 = 0x6,
  D3DXIOP_CEIL = 0x7,
  D3DXIOP_CLAMP = 0x8,
  D3DXIOP_CLIP = 0x9,
  D3DXIOP_COS = 0xA,
  D3DXIOP_COSH = 0xB,
  D3DXIOP_CROSS = 0xC,
  D3DXIOP_DDX = 0xD,
  D3DXIOP_DDY = 0xE,
  D3DXIOP_DEGREES = 0xF,
  D3DXIOP_DETERMINANT = 0x10,
  D3DXIOP_DISTANCE = 0x11,
  D3DXIOP_DOT = 0x12,
  D3DXIOP_DST = 0x13,
  D3DXIOP_EXP = 0x14,
  D3DXIOP_EXP2 = 0x15,
  D3DXIOP_FACEFORWARD = 0x16,
  D3DXIOP_FLOOR = 0x17,
  D3DXIOP_FMOD = 0x18,
  D3DXIOP_FRAC = 0x19,
  D3DXIOP_FREXP = 0x1A,
  D3DXIOP_FWIDTH = 0x1B,
  D3DXIOP_ISFINITE = 0x1C,
  D3DXIOP_ISINF = 0x1D,
  D3DXIOP_ISNAN = 0x1E,
  D3DXIOP_LDEXP = 0x1F,
  D3DXIOP_LENGTH = 0x20,
  D3DXIOP_LERP = 0x21,
  D3DXIOP_LIT = 0x22,
  D3DXIOP_LOG = 0x23,
  D3DXIOP_LOG10 = 0x24,
  D3DXIOP_LOG2 = 0x25,
  D3DXIOP_MAX = 0x26,
  D3DXIOP_MIN = 0x27,
  D3DXIOP_MODF = 0x28,
  D3DXIOP_MUL_SS = 0x29,
  D3DXIOP_MUL_SV = 0x2A,
  D3DXIOP_MUL_SM = 0x2B,
  D3DXIOP_MUL_VS = 0x2C,
  D3DXIOP_MUL_VV = 0x2D,
  D3DXIOP_MUL_VM = 0x2E,
  D3DXIOP_MUL_MS = 0x2F,
  D3DXIOP_MUL_MV = 0x30,
  D3DXIOP_MUL_MM = 0x31,
  D3DXIOP_NOISE = 0x32,
  D3DXIOP_NORMALIZE = 0x33,
  D3DXIOP_POW = 0x34,
  D3DXIOP_RADIANS = 0x35,
  D3DXIOP_REFLECT = 0x36,
  D3DXIOP_REFRACT = 0x37,
  D3DXIOP_ROUND = 0x38,
  D3DXIOP_RSQRT = 0x39,
  D3DXIOP_SATURATE = 0x3A,
  D3DXIOP_SIGN = 0x3B,
  D3DXIOP_SIN = 0x3C,
  D3DXIOP_SINCOS = 0x3D,
  D3DXIOP_SINH = 0x3E,
  D3DXIOP_SMOOTHSTEP = 0x3F,
  D3DXIOP_SQRT = 0x40,
  D3DXIOP_STEP = 0x41,
  D3DXIOP_TAN = 0x42,
  D3DXIOP_TANH = 0x43,
  D3DXIOP_TEX1D = 0x44,
  D3DXIOP_TEX1D_DD = 0x45,
  D3DXIOP_TEX1D_PROJ = 0x46,
  D3DXIOP_TEX1D_BIAS = 0x47,
  D3DXIOP_TEX1D_LOD = 0x48,
  D3DXIOP_TEX2D = 0x49,
  D3DXIOP_TEX2D_DD = 0x4A,
  D3DXIOP_TEX2D_PROJ = 0x4B,
  D3DXIOP_TEX2D_BIAS = 0x4C,
  D3DXIOP_TEX2D_LOD = 0x4D,
  D3DXIOP_TEX3D = 0x4E,
  D3DXIOP_TEX3D_DD = 0x4F,
  D3DXIOP_TEX3D_PROJ = 0x50,
  D3DXIOP_TEX3D_BIAS = 0x51,
  D3DXIOP_TEX3D_LOD = 0x52,
  D3DXIOP_TEXCUBE = 0x53,
  D3DXIOP_TEXCUBE_DD = 0x54,
  D3DXIOP_TEXCUBE_PROJ = 0x55,
  D3DXIOP_TEXCUBE_BIAS = 0x56,
  D3DXIOP_TEXCUBE_LOD = 0x57,
  D3DXIOP_TRANSPOSE = 0x58,
  D3DXIOP_D3DCOLORTOUBYTE4 = 0x59,
};

/*  126 */
enum _XSTORAGE_FACILITY
{
  XSTORAGE_FACILITY_GAME_CLIP = 0x1,
  XSTORAGE_FACILITY_PER_TITLE = 0x2,
  XSTORAGE_FACILITY_PER_USER_TITLE = 0x3,
};

/*  127 */
enum _XPROFILE_GAMERCARD_ZONE_OPTIONS
{
  XPROFILE_GAMERCARD_ZONE_XBOX_1 = 0x0,
  XPROFILE_GAMERCARD_ZONE_RR = 0x1,
  XPROFILE_GAMERCARD_ZONE_PRO = 0x2,
  XPROFILE_GAMERCARD_ZONE_FAMILY = 0x3,
  XPROFILE_GAMERCARD_ZONE_UNDERGROUND = 0x4,
};

/*  128 */
enum _D3DCOLORSPACE
{
  D3DCOLORSPACE_RGB = 0x0,
  D3DCOLORSPACE_YCbCr601 = 0x1,
  D3DCOLORSPACE_YCbCr709 = 0x2,
  D3DCOLORSPACE_FORCE_DWORD = 0x7FFFFFFF,
};

/*  129 */
enum _XPROFILE_GAMER_DIFFICULTY_OPTIONS
{
  XPROFILE_GAMER_DIFFICULTY_NORMAL = 0x0,
  XPROFILE_GAMER_DIFFICULTY_EASY = 0x1,
  XPROFILE_GAMER_DIFFICULTY_HARD = 0x2,
};

/*  130 */
enum IMPORT_OBJECT_TYPE
{
  IMPORT_OBJECT_CODE = 0x0,
  IMPORT_OBJECT_DATA = 0x1,
  IMPORT_OBJECT_CONST = 0x2,
};

/*  131 */
enum _XPROFILE_CONTROL_SENSITIVITY_OPTIONS
{
  XPROFILE_CONTROL_SENSITIVITY_MEDIUM = 0x0,
  XPROFILE_CONTROL_SENSITIVITY_LOW = 0x1,
  XPROFILE_CONTROL_SENSITIVITY_HIGH = 0x2,
};

/*  132 */
enum IMPORT_OBJECT_NAME_TYPE
{
  IMPORT_OBJECT_ORDINAL = 0x0,
  IMPORT_OBJECT_NAME = 0x1,
  IMPORT_OBJECT_NAME_NO_PREFIX = 0x2,
  IMPORT_OBJECT_NAME_UNDECORATE = 0x3,
};

/*  133 */
enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0x0,
  ExceptionContinueSearch = 0x1,
  ExceptionNestedException = 0x2,
  ExceptionCollidedUnwind = 0x3,
};

/*  134 */
enum _XPROFILE_PREFERRED_COLOR_OPTIONS
{
  XPROFILE_PREFERRED_COLOR_NONE = 0x0,
  XPROFILE_PREFERRED_COLOR_BLACK = 0x1,
  XPROFILE_PREFERRED_COLOR_WHITE = 0x2,
  XPROFILE_PREFERRED_COLOR_YELLOW = 0x3,
  XPROFILE_PREFERRED_COLOR_ORANGE = 0x4,
  XPROFILE_PREFERRED_COLOR_PINK = 0x5,
  XPROFILE_PREFERRED_COLOR_RED = 0x6,
  XPROFILE_PREFERRED_COLOR_PURPLE = 0x7,
  XPROFILE_PREFERRED_COLOR_BLUE = 0x8,
  XPROFILE_PREFERRED_COLOR_GREEN = 0x9,
  XPROFILE_PREFERRED_COLOR_BROWN = 0xA,
  XPROFILE_PREFERRED_COLOR_SILVER = 0xB,
};

/*  135 */
enum GPUALUVECTOROP
{
  GPUALUVECTOROP_ADD = 0x0,
  GPUALUVECTOROP_MUL = 0x1,
  GPUALUVECTOROP_MAX = 0x2,
  GPUALUVECTOROP_MIN = 0x3,
  GPUALUVECTOROP_SEQ = 0x4,
  GPUALUVECTOROP_SGT = 0x5,
  GPUALUVECTOROP_SGE = 0x6,
  GPUALUVECTOROP_SNE = 0x7,
  GPUALUVECTOROP_FRC = 0x8,
  GPUALUVECTOROP_TRUNC = 0x9,
  GPUALUVECTOROP_FLOOR = 0xA,
  GPUALUVECTOROP_MAD = 0xB,
  GPUALUVECTOROP_CNDEQ = 0xC,
  GPUALUVECTOROP_CNDGE = 0xD,
  GPUALUVECTOROP_CNDGT = 0xE,
  GPUALUVECTOROP_DP4 = 0xF,
  GPUALUVECTOROP_DP3 = 0x10,
  GPUALUVECTOROP_DP2ADD = 0x11,
  GPUALUVECTOROP_CUBE = 0x12,
  GPUALUVECTOROP_MAX4 = 0x13,
  GPUALUVECTOROP_SETPEQP = 0x14,
  GPUALUVECTOROP_SETPNEP = 0x15,
  GPUALUVECTOROP_SETPGTP = 0x16,
  GPUALUVECTOROP_SETPGEP = 0x17,
  GPUALUVECTOROP_KILLEQ = 0x18,
  GPUALUVECTOROP_KILLGT = 0x19,
  GPUALUVECTOROP_KILLGE = 0x1A,
  GPUALUVECTOROP_KILLNE = 0x1B,
  GPUALUVECTOROP_DST = 0x1C,
  GPUALUVECTOROP_MAXA = 0x1D,
};

/*  136 */
enum _XPROFILE_ACTION_AUTO_AIM_OPTIONS
{
  XPROFILE_ACTION_AUTO_AIM_OFF = 0x0,
  XPROFILE_ACTION_AUTO_AIM_ON = 0x1,
};

/*  137 */
enum _XPROFILE_ACTION_AUTO_CENTER_OPTIONS
{
  XPROFILE_ACTION_AUTO_CENTER_OFF = 0x0,
  XPROFILE_ACTION_AUTO_CENTER_ON = 0x1,
};

/*  138 */
enum _XPROFILE_ACTION_MOVEMENT_CONTROL_OPTIONS
{
  XPROFILE_ACTION_MOVEMENT_CONTROL_L_THUMBSTICK = 0x0,
  XPROFILE_ACTION_MOVEMENT_CONTROL_R_THUMBSTICK = 0x1,
};

/*  139 */
enum _XPROFILE_RACE_TRANSMISSION_OPTIONS
{
  XPROFILE_RACE_TRANSMISSION_AUTO = 0x0,
  XPROFILE_RACE_TRANSMISSION_MANUAL = 0x1,
};

/*  140 */
enum _XPROFILE_RACE_CAMERA_LOCATION_OPTIONS
{
  XPROFILE_RACE_CAMERA_LOCATION_BEHIND = 0x0,
  XPROFILE_RACE_CAMERA_LOCATION_IN_FRONT = 0x1,
  XPROFILE_RACE_CAMERA_LOCATION_INSIDE = 0x2,
};

/*  141 */
enum GPUALUSRCSELECT
{
  GPUALUSRCSELECT_C = 0x0,
  GPUALUSRCSELECT_R = 0x1,
};

/*  142 */
enum _XPROFILE_RACE_BRAKE_CONTROL_OPTIONS
{
  XPROFILE_RACE_BRAKE_CONTROL_TRIGGER = 0x0,
  XPROFILE_RACE_BRAKE_CONTROL_BUTTON = 0x1,
};

/*  143 */
enum _XPROFILE_RACE_ACCELERATOR_CONTROL_OPTIONS
{
  XPROFILE_RACE_ACCELERATOR_CONTROL_TRIGGER = 0x0,
  XPROFILE_RACE_ACCELERATOR_CONTROL_BUTTON = 0x1,
};

/*  144 */
enum GPUEXPORTREGISTER_PS
{
  GPUEXPORTREGISTER_PS_COLOR_0 = 0x0,
  GPUEXPORTREGISTER_PS_COLOR_1 = 0x1,
  GPUEXPORTREGISTER_PS_COLOR_2 = 0x2,
  GPUEXPORTREGISTER_PS_COLOR_3 = 0x3,
  GPUEXPORTREGISTER_PS_EXPORT_ADDRESS = 0x20,
  GPUEXPORTREGISTER_PS_EXPORT_DATA_0 = 0x21,
  GPUEXPORTREGISTER_PS_EXPORT_DATA_1 = 0x22,
  GPUEXPORTREGISTER_PS_EXPORT_DATA_2 = 0x23,
  GPUEXPORTREGISTER_PS_EXPORT_DATA_3 = 0x24,
  GPUEXPORTREGISTER_PS_EXPORT_DATA_4 = 0x25,
  GPUEXPORTREGISTER_PS_DEPTH = 0x3D,
};

/*  145 */
enum _XPROFILE_GAMER_YAXIS_INVERSION_OPTIONS
{
  XPROFILE_YAXIS_INVERSION_OFF = 0x0,
  XPROFILE_YAXIS_INVERSION_ON = 0x1,
};

/*  146 */
enum _XPROFILE_CONTROLLER_VIBRATION_OPTIONS
{
  XPROFILE_CONTROLLER_VIBRATION_OFF = 0x0,
  XPROFILE_CONTROLLER_VIBRATION_ON = 0x3,
};

/*  147 */
enum D3DXShader::SegmentType
{
  CBST_DWORDARRAY = 0x0,
  CBST_STRING = 0x1,
  CBST_SHADER_CONSTANTINFO = 0x2,
  CBST_SHADER_CONSTANTTABLE = 0x3,
  CBST_SHADER_TYPEINFO = 0x4,
  CBST_SHADER_INSTRUCTIONINFO = 0x5,
  CBST_SHADER_STRUCTMEMBERINFO = 0x6,
  CBST_SHADER_VARIABLEINFO = 0x7,
  CBST_SHADER_WRITEINFO = 0x8,
  CBST_SHADER_DEBUGINFO = 0x9,
  CBST_SHADER_FILEINFO = 0xA,
};

/*  148 */
enum _XPROFILE_VOICE_THRU_SPEAKERS_OPTIONS
{
  XPROFILE_VOICE_THRU_SPEAKERS_OFF = 0x0,
  XPROFILE_VOICE_THRU_SPEAKERS_ON = 0x1,
  XPROFILE_VOICE_THRU_SPEAKERS_BOTH = 0x2,
};

/*  149 */
enum GPUEXPORTREGISTER_VS
{
  GPUEXPORTREGISTER_VS_INTERPOLATOR_0 = 0x0,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_1 = 0x1,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_2 = 0x2,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_3 = 0x3,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_4 = 0x4,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_5 = 0x5,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_6 = 0x6,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_7 = 0x7,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_8 = 0x8,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_9 = 0x9,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_10 = 0xA,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_11 = 0xB,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_12 = 0xC,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_13 = 0xD,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_14 = 0xE,
  GPUEXPORTREGISTER_VS_INTERPOLATOR_15 = 0xF,
  GPUEXPORTREGISTER_VS_EXPORT_ADDRESS = 0x20,
  GPUEXPORTREGISTER_VS_EXPORT_DATA_0 = 0x21,
  GPUEXPORTREGISTER_VS_EXPORT_DATA_1 = 0x22,
  GPUEXPORTREGISTER_VS_EXPORT_DATA_2 = 0x23,
  GPUEXPORTREGISTER_VS_EXPORT_DATA_3 = 0x24,
  GPUEXPORTREGISTER_VS_EXPORT_DATA_4 = 0x25,
  GPUEXPORTREGISTER_VS_POSITION = 0x3E,
  GPUEXPORTREGISTER_VS_SPRITE_EDGE_KILL = 0x3F,
};

/*  150 */
enum _XUSER_PROFILE_SOURCE
{
  XSOURCE_NO_VALUE = 0x0,
  XSOURCE_DEFAULT = 0x1,
  XSOURCE_TITLE = 0x2,
  XSOURCE_PERMISSION_DENIED = 0x3,
};

/*  151 */
enum D3DXShader::_D3DXSTMT_TYPE
{
  D3DXST_EXPRESSION = 0x0,
  D3DXST_RETURN = 0x1,
  D3DXST_IF = 0x2,
  D3DXST_FOR = 0x3,
  D3DXST_WHILE = 0x4,
  D3DXST_DOWHILE = 0x5,
  D3DXST_DISCARD = 0x6,
};

/*  152 */
enum _D3DBACKBUFFER_TYPE
{
  D3DBACKBUFFER_TYPE_MONO = 0x0,
  D3DBACKBUFFER_TYPE_LEFT = 0x1,
  D3DBACKBUFFER_TYPE_RIGHT = 0x2,
  D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7FFFFFFF,
};

/*  153 */
enum GPUCOMMANDOP
{
  GPUCOMMANDOP_NOP = 0x10,
  GPUCOMMANDOP_REG_RMW = 0x21,
  GPUCOMMANDOP_DRAW = 0x22,
  GPUCOMMANDOP_VIZ_QUERY = 0x23,
  GPUCOMMANDOP_SET_STATE = 0x25,
  GPUCOMMANDOP_WAIT_FOR_IDLE = 0x26,
  GPUCOMMANDOP_LOAD_SHADER = 0x27,
  GPUCOMMANDOP_LOAD_SHADER_IMMEDIATE = 0x2B,
  GPUCOMMANDOP_SET_CONSTANT = 0x2D,
  GPUCOMMANDOP_LOAD_ALU_CONSTANT = 0x2F,
  GPUCOMMANDOP_DRAW_IMMEDIATE = 0x36,
  GPUCOMMANDOP_MPEG_INDEX = 0x3A,
  GPUCOMMANDOP_INVALIDATE_STATE = 0x3B,
  GPUCOMMANDOP_WAIT_REG_MEM = 0x3C,
  GPUCOMMANDOP_MEM_WRITE = 0x3D,
  GPUCOMMANDOP_REG_TO_MEM = 0x3E,
  GPUCOMMANDOP_INDIRECT_BUFFER = 0x3F,
  GPUCOMMANDOP_COND_WRITE = 0x45,
  GPUCOMMANDOP_EVENT_WRITE = 0x46,
  GPUCOMMANDOP_ME_INIT = 0x48,
  GPUCOMMANDOP_FIX_2_FLT_REG = 0x4D,
  GPUCOMMANDOP_MEM_WRITE_COUNTER = 0x4F,
  GPUCOMMANDOP_WAIT_REG_EQ = 0x52,
  GPUCOMMANDOP_WAIT_REG_GTE = 0x53,
  GPUCOMMANDOP_CPU_INTERRUPT = 0x54,
  GPUCOMMANDOP_EVENT_WRITE_SHADER = 0x58,
  GPUCOMMANDOP_EVENT_WRITE_CACHE_FLUSH = 0x59,
  GPUCOMMANDOP_EVENT_WRITE_SCREEN_EXTENT = 0x5A,
  GPUCOMMANDOP_EVENT_WRITE_ZPASS_DONE = 0x5B,
  GPUCOMMANDOP_CONTEXT_UPDATE = 0x5E,
  GPUCOMMANDOP_SET_BIN_MASK_LO = 0x60,
  GPUCOMMANDOP_SET_BIN_MASK_HI = 0x61,
  GPUCOMMANDOP_SET_BIN_SELECT_LO = 0x62,
  GPUCOMMANDOP_SET_BIN_SELECT_HI = 0x63,
};

/*  154 */
enum _D3DRESOURCETYPE
{
  D3DRTYPE_NONE = 0x0,
  D3DRTYPE_VERTEXBUFFER = 0x1,
  D3DRTYPE_INDEXBUFFER = 0x2,
  D3DRTYPE_TEXTURE = 0x3,
  D3DRTYPE_SURFACE = 0x4,
  D3DRTYPE_VERTEXDECLARATION = 0x5,
  D3DRTYPE_VERTEXSHADER = 0x6,
  D3DRTYPE_PIXELSHADER = 0x7,
  D3DRTYPE_CONSTANTBUFFER = 0x8,
  D3DRTYPE_COMMANDBUFFER = 0x9,
  D3DRTYPE_VOLUME = 0x10,
  D3DRTYPE_VOLUMETEXTURE = 0x11,
  D3DRTYPE_CUBETEXTURE = 0x12,
  D3DRTYPE_ARRAYTEXTURE = 0x13,
  D3DRTYPE_LINETEXTURE = 0x14,
  D3DRTYPE_FORCE_DWORD = 0x7FFFFFFF,
};

/*  155 */
enum _D3DCUBEMAP_FACES
{
  D3DCUBEMAP_FACE_POSITIVE_X = 0x0,
  D3DCUBEMAP_FACE_NEGATIVE_X = 0x1,
  D3DCUBEMAP_FACE_POSITIVE_Y = 0x2,
  D3DCUBEMAP_FACE_NEGATIVE_Y = 0x3,
  D3DCUBEMAP_FACE_POSITIVE_Z = 0x4,
  D3DCUBEMAP_FACE_NEGATIVE_Z = 0x5,
  D3DCUBEMAP_FACE_FORCE_DWORD = 0x7FFFFFFF,
};

/*  156 */
enum _D3DXINCLUDE_TYPE
{
  D3DXINC_LOCAL = 0x0,
  D3DXINC_SYSTEM = 0x1,
  D3DXINC_FORCE_DWORD = 0x7FFFFFFF,
};

/*  157 */
enum GPULOADTYPE
{
  GPULOADTYPE_VERTEX = 0x0,
  GPULOADTYPE_PIXEL = 0x1,
  GPULOADTYPE_SHARED = 0x2,
};

/*  158 */
enum GPUHIZFUNC
{
  GPUHIZFUNC_LESS_EQUAL = 0x0,
  GPUHIZFUNC_GREATER_EQUAL = 0x1,
};

/*  159 */
enum GPUHISTENCILFUNC
{
  GPUHISTENCILFUNC_EQUAL = 0x0,
  GPUHISTENCILFUNC_NOT_EQUAL = 0x1,
};

/*  160 */
enum GPUEDRAMMODE
{
  GPUEDRAMMODE_NOP = 0x0,
  GPUEDRAMMODE_COLOR_DEPTH = 0x4,
  GPUEDRAMMODE_DOUBLE_DEPTH = 0x5,
  GPUEDRAMMODE_COPY = 0x6,
};

/*  161 */
enum GPUCLIPPLANEMODE
{
  GPUCLIPPLANEMODE_CULL_CENTER_NO_BIAS = 0x0,
  GPUCLIPPLANEMODE_CULL_CENTER_RADIUS_BIAS = 0x1,
  GPUCLIPPLANEMODE_CULL_CENTER_RADIUS_BIAS_EXPAND = 0x2,
  GPUCLIPPLANEMODE_ALWAYS_EXPAND = 0x3,
};

/*  162 */
enum _D3DXPATCHMESHTYPE
{
  D3DXPATCHMESH_RECT = 0x1,
  D3DXPATCHMESH_TRI = 0x2,
  D3DXPATCHMESH_NPATCH = 0x3,
  D3DXPATCHMESH_FORCE_DWORD = 0x7FFFFFFF,
};

/*  163 */
enum GPUSAMPLECONTROL
{
  GPUSAMPLECONTROL_CENTROIDS_ONLY = 0x0,
  GPUSAMPLECONTROL_CENTERS_ONLY = 0x1,
  GPUSAMPLECONTROL_CENTROIDS_AND_CENTERS = 0x2,
};

/*  164 */
enum _D3DXMESH
{
  D3DXMESH_32BIT = 0x1,
  D3DXMESH_DONOTCLIP = 0x2,
  D3DXMESH_POINTS = 0x4,
  D3DXMESH_RTPATCHES = 0x8,
  D3DXMESH_NPATCHES = 0x4000,
  D3DXMESH_VB_SYSTEMMEM = 0x10,
  D3DXMESH_VB_MANAGED = 0x20,
  D3DXMESH_VB_WRITEONLY = 0x40,
  D3DXMESH_VB_DYNAMIC = 0x80,
  D3DXMESH_VB_SOFTWAREPROCESSING = 0x8000,
  D3DXMESH_IB_SYSTEMMEM = 0x100,
  D3DXMESH_IB_MANAGED = 0x200,
  D3DXMESH_IB_WRITEONLY = 0x400,
  D3DXMESH_IB_DYNAMIC = 0x800,
  D3DXMESH_IB_SOFTWAREPROCESSING = 0x10000,
  D3DXMESH_VB_SHARE = 0x1000,
  D3DXMESH_USEHWONLY = 0x2000,
  D3DXMESH_SYSTEMMEM = 0x110,
  D3DXMESH_MANAGED = 0x220,
  D3DXMESH_WRITEONLY = 0x440,
  D3DXMESH_DYNAMIC = 0x880,
  D3DXMESH_SOFTWAREPROCESSING = 0x18000,
  D3DXMESH_VALIDBITS = 0x1CFFF,
  D3DXMESH_VALIDCLONEBITS = 0x1DFFF,
  D3DXMESH_VALIDBLENDEDBITS = 0x1EFFF,
};

/*  165 */
enum GPUPATHSELECT
{
  GPUPATHSELECT_VERTEX_REUSE = 0x0,
  GPUPATHSELECT_TESS_ENABLE = 0x1,
  GPUPATHSELECT_PASSTHRU = 0x2,
};

/*  166 */
enum GPUTESSMODE
{
  GPUTESSMODE_DISCRETE = 0x0,
  GPUTESSMODE_CONTINUOUS = 0x1,
  GPUTESSMODE_ADAPTIVE = 0x2,
};

/*  167 */
enum GPUPERFEVENT_TP
{
  GPUPE_POINT_QUADS = 0x0,
  GPUPE_BILIN_QUADS = 0x1,
  GPUPE_ANISO_QUADS = 0x2,
  GPUPE_MIP_QUADS = 0x3,
  GPUPE_VOL_QUADS = 0x4,
  GPUPE_MIP_VOL_QUADS = 0x5,
  GPUPE_MIP_ANISO_QUADS = 0x6,
  GPUPE_VOL_ANISO_QUADS = 0x7,
  GPUPE_ANISO_2_1_QUADS = 0x8,
  GPUPE_ANISO_4_1_QUADS = 0x9,
  GPUPE_ANISO_6_1_QUADS = 0xA,
  GPUPE_ANISO_8_1_QUADS = 0xB,
  GPUPE_ANISO_10_1_QUADS = 0xC,
  GPUPE_ANISO_12_1_QUADS = 0xD,
  GPUPE_ANISO_14_1_QUADS = 0xE,
  GPUPE_MIP_VOL_ANISO_QUADS = 0xF,
  GPUPE_ALIGN_2_QUADS = 0x10,
  GPUPE_ALIGN_4_QUADS = 0x11,
  GPUPE_PIX_0_QUAD = 0x12,
  GPUPE_PIX_1_QUAD = 0x13,
  GPUPE_PIX_2_QUAD = 0x14,
  GPUPE_PIX_3_QUAD = 0x15,
  GPUPE_PIX_4_QUAD = 0x16,
  GPUPE_TP_MIPMAP_LOD0 = 0x17,
  GPUPE_TP_MIPMAP_LOD1 = 0x18,
  GPUPE_TP_MIPMAP_LOD2 = 0x19,
  GPUPE_TP_MIPMAP_LOD3 = 0x1A,
  GPUPE_TP_MIPMAP_LOD4 = 0x1B,
  GPUPE_TP_MIPMAP_LOD5 = 0x1C,
  GPUPE_TP_MIPMAP_LOD6 = 0x1D,
  GPUPE_TP_MIPMAP_LOD7 = 0x1E,
  GPUPE_TP_MIPMAP_LOD8 = 0x1F,
  GPUPE_TP_MIPMAP_LOD9 = 0x20,
  GPUPE_TP_MIPMAP_LOD10 = 0x21,
  GPUPE_TP_MIPMAP_LOD11 = 0x22,
  GPUPE_TP_MIPMAP_LOD12 = 0x23,
  GPUPE_TP_MIPMAP_LOD13 = 0x24,
  GPUPE_TP_MIPMAP_LOD14 = 0x25,
};

/*  168 */
enum _D3DXSHCOMPRESSQUALITYTYPE
{
  D3DXSHCQUAL_FASTLOWQUALITY = 0x1,
  D3DXSHCQUAL_SLOWHIGHQUALITY = 0x2,
  D3DXSHCQUAL_FORCE_DWORD = 0x7FFFFFFF,
};

/*  169 */
enum GPUPIXCENTER
{
  GPUPIXCENTER_ZERO = 0x0,
  GPUPIXCENTER_HALF = 0x1,
};

/*  170 */
enum GPUROUNDMODE
{
  GPUROUNDMODE_TRUNCATE = 0x0,
  GPUROUNDMODE_ROUND = 0x1,
  GPUROUNDMODE_ROUND_TO_EVEN = 0x2,
  GPUROUNDMODE_ROUND_TO_ODD = 0x3,
};

/*  171 */
enum GPUQUANTMODE
{
  GPUQUANTMODE_16TH = 0x0,
  GPUQUANTMODE_8TH = 0x1,
  GPUQUANTMODE_4TH = 0x2,
  GPUQUANTMODE_HALF = 0x3,
  GPUQUANTMODE_ONE = 0x4,
};

/*  172 */
enum _D3DXPATCHMESH
{
  D3DXPATCHMESH_DEFAULT = 0x0,
};

/*  173 */
enum _D3DXMESHSIMP
{
  D3DXMESHSIMP_VERTEX = 0x1,
  D3DXMESHSIMP_FACE = 0x2,
  D3DXMESHSIMP_VALIDBITS = 0x3,
};

/*  174 */
enum _XSESSION_STATE
{
  XSESSION_STATE_LOBBY = 0x0,
  XSESSION_STATE_REGISTRATION = 0x1,
  XSESSION_STATE_INGAME = 0x2,
  XSESSION_STATE_REPORTING = 0x3,
  XSESSION_STATE_DELETED = 0x4,
};

/*  175 */
enum GPUCOPYSRCSELECT
{
  GPUCOPYSRCSELECT_RENDER_TARGET_0 = 0x0,
  GPUCOPYSRCSELECT_RENDER_TARGET_1 = 0x1,
  GPUCOPYSRCSELECT_RENDER_TARGET_2 = 0x2,
  GPUCOPYSRCSELECT_RENDER_TARGET_3 = 0x3,
  GPUCOPYSRCSELECT_DEPTH_STENCIL = 0x4,
};

/*  176 */
enum _MAX_FVF_DECL_SIZE
{
  MAX_FVF_DECL_SIZE = 0x41,
};

/*  177 */
enum GPUCOPYSAMPLESELECT
{
  GPUCOPYSAMPLESELECT_SAMPLE_0 = 0x0,
  GPUCOPYSAMPLESELECT_SAMPLE_1 = 0x1,
  GPUCOPYSAMPLESELECT_SAMPLE_2 = 0x2,
  GPUCOPYSAMPLESELECT_SAMPLE_3 = 0x3,
  GPUCOPYSAMPLESELECT_SAMPLES_0_1 = 0x4,
  GPUCOPYSAMPLESELECT_SAMPLES_2_3 = 0x5,
  GPUCOPYSAMPLESELECT_SAMPLES_0_1_2_3 = 0x6,
};

/*  178 */
enum GPUCOPYCOMMAND
{
  GPUCOPYCOMMAND_RAW = 0x0,
  GPUCOPYCOMMAND_CONVERT = 0x1,
  GPUCOPYCOMMAND_1_1_1_1 = 0x2,
  GPUCOPYCOMMAND_NULL = 0x3,
};

/*  179 */
enum GPUPERFEVENT_SX
{
  GPUPE_SX_SC_QUADS = 0x0,
  GPUPE_SX_SC_QUAD_FIFO_FULL = 0x1,
  GPUPE_SX_EXPORT_VECTORS = 0x2,
  GPUPE_SX_DUMMY_QUADS = 0x3,
  GPUPE_SX_ALPHA_FAIL = 0x4,
  GPUPE_SX_RB_QUAD_BUSY = 0x5,
  GPUPE_SX_RB_COLOR_BUSY = 0x6,
  GPUPE_SX_RB_QUAD_STALL = 0x7,
  GPUPE_SX_RB_COLOR_STALL = 0x8,
};

/*  180 */
enum GPUVSEXPORTMODE
{
  GPUVSEXPORTMODE_POSITION_ONLY = 0x0,
  GPUVSEXPORTMODE_SPRITE = 0x2,
  GPUVSEXPORTMODE_EDGE = 0x3,
  GPUVSEXPORTMODE_KILL = 0x4,
  GPUVSEXPORTMODE_SPRITE_KILL = 0x5,
  GPUVSEXPORTMODE_EDGE_KILL = 0x6,
  GPUVSEXPORTMODE_MULTIPASS = 0x7,
};

/*  181 */
enum GPUPERFEVENT_BC
{
  GPUPE_BC_CNTX0_BUSY = 0x0,
  GPUPE_BC_CNTX17_BUSY = 0x1,
  GPUPE_BC_RQ_STALLED = 0x2,
  GPUPE_BC_AZ_STALLED = 0x3,
  GPUPE_BC_MH_CPY_STALLED = 0x4,
  GPUPE_BC_MH_EXP_STALLED = 0x5,
  GPUPE_BC_SC_STARVED = 0x6,
  GPUPE_BC_SX_STARVED = 0x7,
  GPUPE_BC_ACC_COUNT = 0x8,
  GPUPE_BC_DRAW_COUNT = 0x9,
  GPUPE_BC_ACC2_COUNT = 0xA,
  GPUPE_BC_DRAW2_COUNT = 0xB,
  GPUPE_BC_SETZ_COUNT = 0xC,
  GPUPE_BC_READ_COUNT = 0xD,
  GPUPE_BC_READ_ACC_COUNT = 0xE,
  GPUPE_BC_STATE_COUNT = 0xF,
  GPUPE_BC_STATE2_COUNT = 0x10,
  GPUPE_BC_COPY_WRITE_COUNT = 0x11,
  GPUPE_BC_EXPORT_COUNT = 0x12,
};

/*  182 */
enum GPUSAMPLES
{
  GPUSAMPLES_1X = 0x0,
  GPUSAMPLES_2X = 0x1,
  GPUSAMPLES_4X = 0x2,
};

/*  183 */
enum _D3DFILLMODE
{
  D3DFILL_POINT = 0x1,
  D3DFILL_WIREFRAME = 0x25,
  D3DFILL_SOLID = 0x0,
  D3DFILL_FORCE_DWORD = 0x7FFFFFFF,
};

/*  184 */
enum GPUEXECINSTRUCTIONTYPE
{
  GPUEXECINSTRUCTIONTYPE_ALU = 0x0,
  GPUEXECINSTRUCTIONTYPE_FETCH = 0x1,
};

/*  185 */
enum UCODESHADERMAGIC
{
  UCODESHADERMAGIC_CURRENT = 0x102A11,
};

/*  186 */
enum _D3DXEFFECTDEFAULTTYPE
{
  D3DXEDT_STRING = 0x1,
  D3DXEDT_FLOATS = 0x2,
  D3DXEDT_DWORD = 0x3,
  D3DXEDT_FORCEDWORD = 0x7FFFFFFF,
};

/*  187 */
enum GPUEXECSERIALIZEMODE
{
  GPUEXECSERIALIZEMODE_UNSERIALIZED = 0x0,
  GPUEXECSERIALIZEMODE_SERIALIZED = 0x1,
};

/*  188 */
enum UCODESHADERTYPE
{
  UCODESHADERTYPE_PIXEL = 0x0,
  UCODESHADERTYPE_VERTEX = 0x1,
};

/*  189 */
enum _D3DBLEND
{
  D3DBLEND_ZERO = 0x0,
  D3DBLEND_ONE = 0x1,
  D3DBLEND_SRCCOLOR = 0x4,
  D3DBLEND_INVSRCCOLOR = 0x5,
  D3DBLEND_SRCALPHA = 0x6,
  D3DBLEND_INVSRCALPHA = 0x7,
  D3DBLEND_DESTCOLOR = 0x8,
  D3DBLEND_INVDESTCOLOR = 0x9,
  D3DBLEND_DESTALPHA = 0xA,
  D3DBLEND_INVDESTALPHA = 0xB,
  D3DBLEND_BLENDFACTOR = 0xC,
  D3DBLEND_INVBLENDFACTOR = 0xD,
  D3DBLEND_CONSTANTALPHA = 0xE,
  D3DBLEND_INVCONSTANTALPHA = 0xF,
  D3DBLEND_SRCALPHASAT = 0x10,
  D3DBLEND_FORCE_DWORD = 0x7FFFFFFF,
};

/*  190 */
enum GPUEXECFETCHCACHETYPE
{
  GPUEXECFETCHCACHETYPE_TEXTURE = 0x0,
  GPUEXECFETCHCACHETYPE_VERTEX = 0x1,
};

/*  191 */
enum GPUALLOCBUFFERSELECT
{
  GPUALLOCBUFFERSELECT_POSITION = 0x1,
  GPUALLOCBUFFERSELECT_INTERPOLATORS = 0x2,
  GPUALLOCBUFFERSELECT_COLORS = 0x2,
  GPUALLOCBUFFERSELECT_EXPORT = 0x3,
};

/*  192 */
enum GPUPERFEVENT_MC
{
  GPUPE_RANK_BANK0_ACCESSES = 0x0,
  GPUPE_RANK_BANK1_ACCESSES = 0x1,
  GPUPE_RANK_BANK2_ACCESSES = 0x2,
  GPUPE_RANK_BANK3_ACCESSES = 0x3,
  GPUPE_RANK_BANK4_ACCESSES = 0x4,
  GPUPE_RANK_BANK5_ACCESSES = 0x5,
  GPUPE_RANK_BANK6_ACCESSES = 0x6,
  GPUPE_RANK_BANK7_ACCESSES = 0x7,
  GPUPE_RANK_BANK8_ACCESSES = 0x8,
  GPUPE_RANK_BANK9_ACCESSES = 0x9,
  GPUPE_RANK_BANK10_ACCESSES = 0xA,
  GPUPE_RANK_BANK11_ACCESSES = 0xB,
  GPUPE_RANK_BANK12_ACCESSES = 0xC,
  GPUPE_RANK_BANK13_ACCESSES = 0xD,
  GPUPE_RANK_BANK14_ACCESSES = 0xE,
  GPUPE_RANK_BANK15_ACCESSES = 0xF,
  GPUPE_READ_2_WRITE = 0x10,
  GPUPE_WRITE_2_READ = 0x11,
  GPUPE_NEW_PAGE_ACCESSES = 0x12,
  GPUPE_TOTAL_ACCESSES = 0x13,
  GPUPE_READ_ACCESSES = 0x14,
  GPUPE_ACCESS_PRESENT_NO_ISSUE_CLKS = 0x15,
  GPUPE_CMD_PRESENT_NO_XFER_CLKS = 0x16,
  GPUPE_URGENT_DC_ACCESSES = 0x17,
  GPUPE_URGENT_SB_ACCESSES = 0x18,
  GPUPE_URGENT_BIU_ACCESSES = 0x19,
  GPUPE_NEW_BIUF_ACCESSES = 0x1A,
  GPUPE_NEW_CP_ACCESSES = 0x1B,
  GPUPE_NEW_TC_ACCESSES = 0x1C,
  GPUPE_NEW_VC_ACCESSES = 0x1D,
  GPUPE_NEW_BC_CP_ACCESSES = 0x1E,
  GPUPE_NEW_BC_EX_ACCESSES = 0x1F,
  GPUPE_NEW_VGT_ACCESSES = 0x20,
  GPUPE_NEW_DC_ACCESSES = 0x21,
  GPUPE_NEW_SB_ACCESSES = 0x22,
  GPUPE_NEW_BIUS_ACCESSES = 0x23,
  GPUPE_BIUS_READ_ACCESSES = 0x24,
  GPUPE_SB_READ_ACCESSES = 0x25,
  GPUPE_CP_READ_ACCESSES = 0x26,
  GPUPE_NTH_SMPG_ACCESS_IS_BIUF = 0x27,
  GPUPE_NTH_SMPG_ACCESS_IS_CP = 0x28,
  GPUPE_NTH_SMPG_ACCESS_IS_TC = 0x29,
  GPUPE_NTH_SMPG_ACCESS_IS_VC = 0x2A,
  GPUPE_NTH_SMPG_ACCESS_IS_BC_CP = 0x2B,
  GPUPE_NTH_SMPG_ACCESS_IS_BC_EX = 0x2C,
  GPUPE_NTH_SMPG_ACCESS_IS_VGT = 0x2D,
  GPUPE_NTH_SMPG_ACCESS_IS_DC = 0x2E,
  GPUPE_NTH_SMPG_ACCESS_IS_SB = 0x2F,
  GPUPE_NTH_SMPG_ACCESS_IS_BIUS = 0x30,
  GPUPE_N_VALID_ENTRY_IN_TEXTURE_CAM_CLKS = 0x31,
  GPUPE_N_VALID_ENTRY_IN_VC_CAM_CLKS = 0x32,
  GPUPE_N_VALID_ENTRY_IN_BIUS_CAM_CLKS = 0x33,
  GPUPE_N_SB_BUF_USED_CLKS = 0x34,
  GPUPE_N_TC_BUF_USED_CLKS = 0x35,
  GPUPE_N_VC_BUF_USED_CLKS = 0x36,
  GPUPE_N_DC_BUF_USED_CLKS = 0x37,
  GPUPE_N_VGT_BUF_USED_CLK = 0x38,
  GPUPE_N_CP_BUF_USED_CLKS = 0x39,
};

/*  193 */
enum XMARKETPLACE_OFFERING_TYPE
{
  XMARKETPLACE_OFFERING_TYPE_CONTENT = 0x2,
  XMARKETPLACE_OFFERING_TYPE_GAME_DEMO = 0x20,
  XMARKETPLACE_OFFERING_TYPE_GAME_TRAILER = 0x40,
  XMARKETPLACE_OFFERING_TYPE_THEME = 0x80,
  XMARKETPLACE_OFFERING_TYPE_TILE = 0x800,
  XMARKETPLACE_OFFERING_TYPE_ARCADE = 0x2000,
  XMARKETPLACE_OFFERING_TYPE_VIDEO = 0x4000,
  XMARKETPLACE_OFFERING_TYPE_CONSUMABLE = 0x10000,
};

/*  194 */
enum GPUSCREENEXTENTS
{
  GPUSCREENEXTENTS_NONCULLED = 0x0,
  GPUSCREENEXTENTS_ALLTILES = 0x1,
  GPUSCREENEXTENTS_PRIMEXTENTS = 0x2,
};

/*  195 */
enum XMSG_FLAGS
{
  XMSG_FLAG_DISABLE_EDIT_RECIPIENTS = 0x1,
};

/*  196 */
enum GPUINITIATOR
{
  GPUINITIATOR_VS_DEALLOC = 0x0,
  GPUINITIATOR_PS_DEALLOC = 0x1,
  GPUINITIATOR_VS_DONE_WRITE_BACK = 0x2,
  GPUINITIATOR_PS_DONE_WRITE_BACK = 0x3,
  GPUINITIATOR_CACHE_FLUSH_WRITE_BACK = 0x4,
  GPUINITIATOR_CONTEXT_DONE = 0x5,
  GPUINITIATOR_CACHE_FLUSH = 0x6,
  GPUINITIATOR_VIZQUERY_START = 0x7,
  GPUINITIATOR_VIZQUERY_END = 0x8,
  GPUINITIATOR_SC_WAIT_WC = 0x9,
  GPUINITIATOR_MPASS_PS_CP_REFETCH = 0xA,
  GPUINITIATOR_MPASS_PS_RST_START = 0xB,
  GPUINITIATOR_MPASS_PS_INCR_START = 0xC,
  GPUINITIATOR_RST_PIX_CNT = 0xD,
  GPUINITIATOR_RST_VTX_CNT = 0xE,
  GPUINITIATOR_TILE_FLUSH = 0xF,
  GPUINITIATOR_CACHE_FLUSH_AND_INV_WRITE_BACK_EVENT = 0x14,
  GPUINITIATOR_ZPASS_DONE = 0x15,
  GPUINITIATOR_CACHE_FLUSH_AND_INV_EVENT = 0x16,
  GPUINITIATOR_PERFCOUNTER_START = 0x17,
  GPUINITIATOR_PERFCOUNTER_STOP = 0x18,
  GPUINITIATOR_SCREEN_EXT_INIT = 0x19,
  GPUINITIATOR_SCREEN_EXT_RPT = 0x1A,
  GPUINITIATOR_VS_FETCH_DONE_WRITE_BACK = 0x1B,
};

/*  197 */
enum _D3DBLENDOP
{
  D3DBLENDOP_ADD = 0x0,
  D3DBLENDOP_SUBTRACT = 0x1,
  D3DBLENDOP_MIN = 0x2,
  D3DBLENDOP_MAX = 0x3,
  D3DBLENDOP_REVSUBTRACT = 0x4,
  D3DBLENDOP_FORCE_DWORD = 0x7FFFFFFF,
};

/*  198 */
enum XCUSTOMACTION_FLAGS
{
  XCUSTOMACTION_FLAG_CLOSES_GUIDE = 0x1,
  XCUSTOMACTION_FLAG_DELETES_MESSAGE = 0x2,
};

/*  199 */
enum _D3DTEXTUREADDRESS
{
  D3DTADDRESS_WRAP = 0x0,
  D3DTADDRESS_MIRROR = 0x1,
  D3DTADDRESS_CLAMP = 0x2,
  D3DTADDRESS_MIRRORONCE = 0x3,
  D3DTADDRESS_BORDER_HALF = 0x4,
  D3DTADDRESS_MIRRORONCE_BORDER_HALF = 0x5,
  D3DTADDRESS_BORDER = 0x6,
  D3DTADDRESS_MIRRORONCE_BORDER = 0x7,
  D3DTADDRESS_FORCE_DWORD = 0x7FFFFFFF,
};

/*  200 */
enum _D3DCULL
{
  D3DCULL_NONE = 0x0,
  D3DCULL_CW = 0x2,
  D3DCULL_CCW = 0x6,
  D3DCULL_FORCE_DWORD = 0x7FFFFFFF,
};

/*  201 */
enum _D3DCMPFUNC
{
  D3DCMP_NEVER = 0x0,
  D3DCMP_LESS = 0x1,
  D3DCMP_EQUAL = 0x2,
  D3DCMP_LESSEQUAL = 0x3,
  D3DCMP_GREATER = 0x4,
  D3DCMP_NOTEQUAL = 0x5,
  D3DCMP_GREATEREQUAL = 0x6,
  D3DCMP_ALWAYS = 0x7,
  D3DCMP_FORCE_DWORD = 0x7FFFFFFF,
};

/*  202 */
enum GPUSYNCFUNCTION
{
  GPUSYNCFUNCTION_NEVER = 0x0,
  GPUSYNCFUNCTION_LESS = 0x1,
  GPUSYNCFUNCTION_LEQUAL = 0x2,
  GPUSYNCFUNCTION_EQUAL = 0x3,
  GPUSYNCFUNCTION_NOTEQUAL = 0x4,
  GPUSYNCFUNCTION_GEQUAL = 0x5,
  GPUSYNCFUNCTION_GREATER = 0x6,
  GPUSYNCFUNCTION_ALWAYS = 0x7,
};

/*  203 */
enum _D3DXWELDEPSILONSFLAGS
{
  D3DXWELDEPSILONS_WELDALL = 0x1,
  D3DXWELDEPSILONS_WELDPARTIALMATCHES = 0x2,
  D3DXWELDEPSILONS_DONOTREMOVEVERTICES = 0x4,
  D3DXWELDEPSILONS_DONOTSPLIT = 0x8,
  D3DXWELDEPSILONS_VALIDBITS = 0xF,
};

/*  204 */
enum GPUSYNCSPACE
{
  GPUSYNCSPACE_REGISTER = 0x0,
  GPUSYNCSPACE_MEMORY = 0x1,
};

/*  205 */
enum _GET_FILEEX_INFO_LEVELS
{
  GetFileExInfoStandard = 0x0,
  GetFileExMaxInfoLevel = 0x1,
};

/*  206 */
enum _D3DSTENCILOP
{
  D3DSTENCILOP_KEEP = 0x0,
  D3DSTENCILOP_ZERO = 0x1,
  D3DSTENCILOP_REPLACE = 0x2,
  D3DSTENCILOP_INCRSAT = 0x3,
  D3DSTENCILOP_DECRSAT = 0x4,
  D3DSTENCILOP_INVERT = 0x5,
  D3DSTENCILOP_INCR = 0x6,
  D3DSTENCILOP_DECR = 0x7,
  D3DSTENCILOP_FORCE_DWORD = 0x7FFFFFFF,
};

/*  207 */
enum GPUCONSTANTID
{
  GPUCONSTANTID_ALU = 0x0,
  GPUCONSTANTID_FETCH = 0x1,
  GPUCONSTANTID_BOOLEAN = 0x2,
  GPUCONSTANTID_INTEGER = 0x3,
  GPUCONSTANTID_REGISTER = 0x4,
};

/*  208 */
enum GPUINDEXSELECT
{
  GPUINDEXSELECT_DMA = 0x0,
  GPUINDEXSELECT_IMMEDIATE = 0x1,
  GPUINDEXSELECT_AUTO = 0x2,
};

/*  209 */
enum _D3DZBUFFERTYPE
{
  D3DZB_FALSE = 0x0,
  D3DZB_TRUE = 0x1,
  D3DZB_FORCE_DWORD = 0x7FFFFFFF,
};

/*  210 */
enum _D3DXERR
{
  D3DXERR_CANNOTMODIFYINDEXBUFFER = 0x88760B54,
  D3DXERR_INVALIDMESH = 0x88760B55,
  D3DXERR_CANNOTATTRSORT = 0x88760B56,
  D3DXERR_SKINNINGNOTSUPPORTED = 0x88760B57,
  D3DXERR_TOOMANYINFLUENCES = 0x88760B58,
  D3DXERR_INVALIDDATA = 0x88760B59,
  D3DXERR_LOADEDMESHASNODATA = 0x88760B5A,
  D3DXERR_DUPLICATENAMEDFRAGMENT = 0x88760B5B,
  D3DXERR_MICROCODEEMPTY = 0x88760B68,
  D3DXERR_MICROCODETOOBIG = 0x88760B69,
  D3DXERR_MICROCODEUNSUPPORTEDTARGET = 0x88760B6A,
  D3DXERR_MICROCODEOPTIMIZERFAILED = 0x88760B6B,
  D3DXERR_MICROCODETOOMANYLEVELS = 0x88760B6C,
  D3DXERR_MICROCODETOOMANYREGS = 0x88760B6D,
  D3DXERR_MICROCODETOOMANYCONSTS = 0x88760B6E,
  D3DXERR_MICROCODETOOMANYRSINSTS = 0x88760B6F,
  D3DXERR_MICROCODETOOMANYTEXINSTS = 0x88760B70,
  D3DXERR_MICROCODETOOMANYALUINSTS = 0x88760B71,
  D3DXERR_MICROCODETOOMANYCFINSTS = 0x88760B72,
  D3DXERR_MICROCODETOOMANYTOTALINSTS = 0x88760B73,
  D3DXERR_MICROCODETOOMANYCOMPILERLITERALS = 0x88760B74,
  D3DXERR_MICROCODE_DEFB_CONSTANT_OUT_OF_RANGE = 0x88760B75,
  D3DXERR_MICROCODE_DEFI_CONSTANT_OUT_OF_RANGE = 0x88760B76,
  D3DXERR_MICROCODE_DEF_CONSTANT_OUT_OF_RANGE = 0x88760B77,
  D3DXERR_MICROCODE_DEFB_CONSTANT_OUT_OF_ALPHA_PIXEL_SHADER_RANGE = 0x88760B78,
  D3DXERR_MICROCODE_DEFI_CONSTANT_OUT_OF_ALPHA_PIXEL_SHADER_RANGE = 0x88760B79,
  D3DXERR_MICROCODE_DEF_CONSTANT_OUT_OF_ALPHA_PIXEL_SHADER_RANGE = 0x88760B7A,
  D3DXERR_MICROCODE_DEFB_CONSTANT_OUT_OF_ALPHA_VERTEX_SHADER_RANGE = 0x88760B7B,
  D3DXERR_MICROCODE_DEFI_CONSTANT_OUT_OF_ALPHA_VERTEX_SHADER_RANGE = 0x88760B7C,
  D3DXERR_MICROCODE_DEF_CONSTANT_OUT_OF_ALPHA_VERTEX_SHADER_RANGE = 0x88760B7D,
  D3DXERR_MICROCODE_DUPLICATE_DEFB_CONSTANT = 0x88760B7E,
  D3DXERR_MICROCODE_DUPLICATE_DEFI_CONSTANT = 0x88760B7F,
  D3DXERR_MICROCODE_DUPLICATE_DEF_CONSTANT = 0x88760B80,
};

/*  211 */
enum GPUPERFEVENT_MH
{
  GPUPE_CP_READ_MEMORY = 0x0,
  GPUPE_CP_READ_PGLB = 0x1,
  GPUPE_CP_WRITE_MEMORY = 0x2,
  GPUPE_CP_WRITE_SNOOPED = 0x3,
  GPUPE_CP_WRITE_WRITEBACK = 0x4,
  GPUPE_MH_CP_RTR = 0x5,
  GPUPE_VGT_READ_MEMORY = 0x6,
  GPUPE_VGT_READ_PGLB = 0x7,
  GPUPE_MH_VGT_RTR = 0x8,
  GPUPE_IOC_READ = 0x9,
  GPUPE_IOC_WRITE = 0xA,
  GPUPE_IOC_READ_BYTE_COUNT = 0xB,
  GPUPE_IOC_WRITE_BYTE_COUNT = 0xC,
  GPUPE_IOC_URGENT = 0xD,
  GPUPE_MH_IOC_RTR = 0xE,
  GPUPE_TC0_READ = 0xF,
  GPUPE_MH_TC0_RTR = 0x10,
  GPUPE_TC1_READ = 0x11,
  GPUPE_MH_TC1_RTR = 0x12,
  GPUPE_VC0_READ_MEMORY = 0x13,
  GPUPE_VC0_READ_PGLB = 0x14,
  GPUPE_MH_VC0_RTR = 0x15,
  GPUPE_VC1_READ_MEMORY = 0x16,
  GPUPE_VC1_READ_PGLB = 0x17,
  GPUPE_MH_VC1_RTR = 0x18,
  GPUPE_BC0_CP_WRITE = 0x19,
  GPUPE_BC0_EX_WRITE = 0x1A,
  GPUPE_MH_BC0_RTR = 0x1B,
  GPUPE_BC1_CP_WRITE = 0x1C,
  GPUPE_BC1_EX_WRITE = 0x1D,
  GPUPE_MH_BC1_RTR = 0x1E,
  GPUPE_DC_GRAPHICS_REQ = 0x1F,
  GPUPE_DC_OVERLAY_REQ = 0x20,
  GPUPE_DC_URGENT = 0x21,
  GPUPE_PGLB_BIU_REQ = 0x22,
  GPUPE_BIU_PGL_READ_DATA = 0x23,
  GPUPE_PGL_MHS_READ_DATA = 0x24,
  GPUPE_MH_MC0_READ_REQS = 0x25,
  GPUPE_MH_MC0_WRITE_REQS = 0x26,
  GPUPE_MH_MC1_READ_REQS = 0x27,
  GPUPE_MH_MC1_WRITE_REQS = 0x28,
  GPUPE_MC0_MH_READ_DATA = 0x29,
  GPUPE_MC1_MH_READ_DATA = 0x2A,
  GPUPE_MH_CP_SEND = 0x2B,
  GPUPE_MH_VGT_SEND = 0x2C,
  GPUPE_MH_IOC_SEND = 0x2D,
  GPUPE_MH_TC0_SEND = 0x2E,
  GPUPE_MH_TC1_SEND = 0x2F,
  GPUPE_MH_VC0_SEND = 0x30,
  GPUPE_MH_VC1_SEND = 0x31,
  GPUPE_MH_DC_SEND = 0x32,
  GPUPE_DC0_INFLIGHT_FULL = 0x33,
  GPUPE_DC1_INFLIGHT_FULL = 0x34,
  GPUPE_VC0_INFLIGHT_FULL = 0x35,
  GPUPE_VC1_INFLIGHT_FULL = 0x36,
  GPUPE_TC0_INFLIGHT_FULL = 0x37,
  GPUPE_TC1_INFLIGHT_FULL = 0x38,
  GPUPE_CP0_INFLIGHT_FULL = 0x39,
  GPUPE_CP1_INFLIGHT_FULL = 0x3A,
  GPUPE_VGT0_INFLIGHT_FULL = 0x3B,
  GPUPE_VGT1_INFLIGHT_FULL = 0x3C,
  GPUPE_SB0_INFLIGHT_FULL = 0x3D,
  GPUPE_SB1_INFLIGHT_FULL = 0x3E,
  GPUPE_VCPGL_INFLIGHT_FULL = 0x3F,
  GPUPE_CPPGL_INFLIGHT_FULL = 0x40,
  GPUPE_VGTPGL_INFLIGHT_FULL = 0x41,
  GPUPE_MC0_DC_Q_FULL = 0x42,
  GPUPE_MC0_VC_Q_FULL = 0x43,
  GPUPE_MC0_TC_Q_FULL = 0x44,
  GPUPE_MC0_CP_Q_FULL = 0x45,
  GPUPE_MC0_SB_Q_FULL = 0x46,
  GPUPE_MC0_VGT_Q_FULL = 0x47,
  GPUPE_MC0_BCCP_Q_FULL = 0x48,
  GPUPE_MC0_BCEX_Q_FULL = 0x49,
  GPUPE_MC1_DC_Q_FULL = 0x4A,
  GPUPE_MC1_VC_Q_FULL = 0x4B,
  GPUPE_MC1_TC_Q_FULL = 0x4C,
  GPUPE_MC1_CP_Q_FULL = 0x4D,
  GPUPE_MC1_SB_Q_FULL = 0x4E,
  GPUPE_MC1_VGT_Q_FULL = 0x4F,
  GPUPE_MC1_BCCP_Q_FULL = 0x50,
  GPUPE_MC1_BCEX_Q_FULL = 0x51,
  GPUPE_CP_PGL_CACHE_HIT = 0x52,
  GPUPE_VGT_PGL_CACHE_HIT = 0x53,
  GPUPE_VC_PGL_CACHE_HIT = 0x54,
  GPUPE_CP_PGL_FULL = 0x55,
  GPUPE_VGT_PGL_FULL = 0x56,
  GPUPE_VC0_PGL_FULL = 0x57,
  GPUPE_VC1_PGL_FULL = 0x58,
  GPUPE_MC0_WDB_FULL = 0x59,
  GPUPE_MC0_TAGBUF_FULL = 0x5A,
  GPUPE_MC1_WDB_FULL = 0x5B,
  GPUPE_MC1_TAGBUF_FULL = 0x5C,
  GPUPE_PGL_TAGBUF_FULL = 0x5D,
  GPUPE_CP_WRITENOTIFY = 0x5E,
  GPUPE_BC_WRITENOTIFY = 0x5F,
  GPUPE_IOC_SYNC = 0x60,
  GPUPE_PGL_BIU_LATENCY = 0x61,
  GPUPE_MH_MC0_LATENCY = 0x62,
  GPUPE_MH_MC0_DC_LATENCY = 0x63,
  GPUPE_MH_MC0_VC_LATENCY = 0x64,
  GPUPE_MH_MC0_TC_LATENCY = 0x65,
  GPUPE_MH_MC0_CP_LATENCY = 0x66,
  GPUPE_MH_MC0_SB_LATENCY = 0x67,
  GPUPE_MH_MC0_VGT_LATENCY = 0x68,
  GPUPE_MH_MC1_LATENCY = 0x69,
  GPUPE_MH_MC1_DC_LATENCY = 0x6A,
  GPUPE_MH_MC1_VC_LATENCY = 0x6B,
  GPUPE_MH_MC1_TC_LATENCY = 0x6C,
  GPUPE_MH_MC1_CP_LATENCY = 0x6D,
  GPUPE_MH_MC1_SB_LATENCY = 0x6E,
  GPUPE_MH_MC1_VGT_LATENCY = 0x6F,
  GPUPE_MH_PGL_LATENCY = 0x70,
  GPUPE_MH_PGL_CP_LATENCY = 0x71,
  GPUPE_MH_PGL_VC_LATENCY = 0x72,
  GPUPE_MH_PGL_VGT_LATENCY = 0x73,
  GPUPE_TC0_RDY_AND_NOROOM = 0x74,
  GPUPE_TC1_RDY_AND_NOROOM = 0x75,
  GPUPE_IOC_RDY_AND_NOROOM = 0x76,
};

/*  212 */
enum GPUINDEXTYPE
{
  GPUINDEXTYPE_16BIT = 0x0,
  GPUINDEXTYPE_32BIT = 0x1,
};

/*  213 */
enum _D3DTESSELLATIONMODE
{
  D3DTM_DISCRETE = 0x0,
  D3DTM_CONTINUOUS = 0x1,
  D3DTM_PEREDGE = 0x2,
  D3DTM_FORCE_DWORD = 0x7FFFFFFF,
};

/*  214 */
enum GPUDESTBASE7
{
  GPUDESTBASE7_CLIPPLANE_DISABLED = 0x0,
  GPUDESTBASE7_CLIPPLANE_ENABLED = 0x1000,
};

/*  215 */
enum _D3DPRIMITIVETYPE
{
  D3DPT_POINTLIST = 0x1,
  D3DPT_LINELIST = 0x2,
  D3DPT_LINESTRIP = 0x3,
  D3DPT_TRIANGLELIST = 0x4,
  D3DPT_TRIANGLEFAN = 0x5,
  D3DPT_TRIANGLESTRIP = 0x6,
  D3DPT_RECTLIST = 0x8,
  D3DPT_QUADLIST = 0xD,
  D3DPT_FORCE_DWORD = 0x7FFFFFFF,
};

/*  216 */
enum _D3DTESSPRIMITIVETYPE
{
  D3DTPT_LINELIST = 0x2,
  D3DTPT_LINESTRIP = 0x3,
  D3DTPT_TRIANGLELIST = 0x4,
  D3DTPT_TRIANGLEFAN = 0x5,
  D3DTPT_TRIANGLESTRIP = 0x6,
  D3DTPT_QUADLIST = 0xD,
  D3DTPT_LINEPATCH = 0x10,
  D3DTPT_TRIPATCH = 0x11,
  D3DTPT_QUADPATCH = 0x12,
  D3DTPT_FORCE_DWORD = 0x7FFFFFFF,
};

/*  217 */
enum XPLAYERLIST_BUTTON_TYPE
{
  XPLAYERLIST_BUTTON_TYPE_TITLECUSTOM = 0x0,
  XPLAYERLIST_BUTTON_TYPE_PLAYERREVIEW = 0x1,
  XPLAYERLIST_BUTTON_TYPE_GAMEINVITE = 0x2,
  XPLAYERLIST_BUTTON_TYPE_MESSAGE = 0x3,
  XPLAYERLIST_BUTTON_TYPE_FRIENDREQUEST = 0x4,
};

/*  218 */
enum _D3DQUERYTYPE
{
  D3DQUERYTYPE_VCACHE = 0x4,
  D3DQUERYTYPE_RESOURCEMANAGER = 0x5,
  D3DQUERYTYPE_VERTEXSTATS = 0x6,
  D3DQUERYTYPE_EVENT = 0x8,
  D3DQUERYTYPE_OCCLUSION = 0x9,
  D3DQUERYTYPE_SCREENEXTENT = 0xA,
};

/*  219 */
enum XPLAYERLIST_FLAGS
{
  XPLAYERLIST_FLAG_CUSTOMTEXT = 0x1,
};

/*  220 */
enum _D3DHISTENCILCMPFUNC
{
  D3DHSCMP_EQUAL = 0x0,
  D3DHSCMP_NOTEQUAL = 0x1,
  D3DHSCMP_FORCE_DWORD = 0x7FFFFFFF,
};

/*  221 */
enum tagSTGTY
{
  STGTY_STORAGE = 0x1,
  STGTY_STREAM = 0x2,
  STGTY_LOCKBYTES = 0x3,
  STGTY_PROPERTY = 0x4,
};

/*  222 */
enum _D3DHIZENABLEMODE
{
  D3DHIZ_DISABLE = 0x0,
  D3DHIZ_ENABLE = 0x1,
  D3DHIZ_AUTOMATIC = 0x2,
  D3DHIZ_FORCE_DWORD = 0x7FFFFFFF,
};

/*  223 */
enum GPUPERFEVENT_CP
{
  GPUPE_CP_COUNT = 0x0,
  GPUPE_CP_RBIU_STALL = 0x1,
  GPUPE_CP_RBIU_TAF = 0x2,
  GPUPE_CP_PFP_STALL = 0x3,
  GPUPE_CP_RESERVED0 = 0x4,
  GPUPE_CP_RESERVED1 = 0x5,
  GPUPE_CP_NRT_RCIU_STALL = 0x6,
  GPUPE_CP_Reserved2 = 0x7,
  GPUPE_CP_NRT_MIU_STALL = 0x8,
  GPUPE_CP_CSF_PFP_I1_FULL = 0x9,
  GPUPE_CP_CSF_PFP_I2_FULL = 0xA,
  GPUPE_CP_CSF_PFP_REQ_FULL = 0xB,
  GPUPE_CP_RESERVED3 = 0xC,
  GPUPE_CP_RING_ROQ_FULL = 0xD,
  GPUPE_CP_I1_ROQ_FULL = 0xE,
  GPUPE_CP_I2_ROQ_FULL = 0xF,
  GPUPE_CP_ST_ROQ_FULL = 0x10,
  GPUPE_CP_RTST_ROQ_FULL = 0x11,
  GPUPE_CP_MIU_TAG_MEM_FULL = 0x12,
  GPUPE_CP_MIU_WRITECLEAN = 0x13,
  GPUPE_CP_RESERVED4 = 0x14,
  GPUPE_CP_RESERVED5 = 0x15,
  GPUPE_CP_NRT_WRITE_STALL = 0x16,
  GPUPE_CP_NRT_READ_STALL = 0x17,
  GPUPE_CP_WC_FIFO_FULL = 0x18,
  GPUPE_CP_VTX_DEALLOC_FIFO_FULL = 0x19,
  GPUPE_CP_PIX_DEALLOC_FIFO_FULL = 0x1A,
  GPUPE_CP_VTX_EVENT_FIFO_FULL = 0x1B,
  GPUPE_CP_PIX_EVENT_FIFO_FULL = 0x1C,
  GPUPE_CP_CF_EVENT_FIFO_FULL = 0x1D,
  GPUPE_CP_ME_RB_STARVED = 0x1E,
  GPUPE_CP_ME_I1_STARVED = 0x1F,
  GPUPE_CP_ME_I2_STARVED = 0x20,
  GPUPE_CP_ME_ST_STARVED = 0x21,
  GPUPE_CP_RESERVED6 = 0x22,
  GPUPE_CP_RESERVED7 = 0x23,
  GPUPE_CP_RESERVED8 = 0x24,
  GPUPE_CP_RESERVED9 = 0x25,
  GPUPE_CP_RESERVED10 = 0x26,
  GPUPE_CP_RESERVED11 = 0x27,
  GPUPE_RCIU_RBBM_DWORD_SENT = 0x28,
  GPUPE_ME_PARSER_BUSY_CLOCKS = 0x29,
  GPUPE_ME_WAIT_CONTEXT_AVAIL = 0x2A,
  GPUPE_PFP_TYPE0_PACKET = 0x2B,
  GPUPE_PFP_TYPE3_PACKET = 0x2C,
  GPUPE_CSF_RB_WPTR_NEQ_RPTR = 0x2D,
  GPUPE_CSF_I1_SIZE_NEQ_ZERO = 0x2E,
  GPUPE_CSF_I2_SIZE_NEQ_ZERO = 0x2F,
  GPUPE_CSF_RB_I1_I2_FETCHING = 0x30,
  GPUPE_CP_RESERVED12 = 0x31,
  GPUPE_CP_RESERVED13 = 0x32,
  GPUPE_CP_RESERVED14 = 0x33,
  GPUPE_CP_RESERVED15 = 0x34,
  GPUPE_CP_RESERVED16 = 0x35,
  GPUPE_CP_RESERVED17 = 0x36,
  GPUPE_CP_RESERVED18 = 0x37,
  GPUPE_CP_RESERVED19 = 0x38,
  GPUPE_CP_RESERVED20 = 0x39,
  GPUPE_CP_RESERVED21 = 0x3A,
  GPUPE_CP_RESERVED22 = 0x3B,
  GPUPE_CP_RESERVED23 = 0x3C,
  GPUPE_CP_RESERVED24 = 0x3D,
  GPUPE_CP_RESERVED25 = 0x3E,
  GPUPE_CP_RESERVED26 = 0x3F,
};

/*  224 */
enum tagSTREAM_SEEK
{
  STREAM_SEEK_SET = 0x0,
  STREAM_SEEK_CUR = 0x1,
  STREAM_SEEK_END = 0x2,
};

/*  225 */
enum _D3DRENDERSTATETYPE
{
  D3DRS_ZENABLE = 0x28,
  D3DRS_ZFUNC = 0x2C,
  D3DRS_ZWRITEENABLE = 0x30,
  D3DRS_FILLMODE = 0x34,
  D3DRS_CULLMODE = 0x38,
  D3DRS_ALPHABLENDENABLE = 0x3C,
  D3DRS_SEPARATEALPHABLENDENABLE = 0x40,
  D3DRS_BLENDFACTOR = 0x44,
  D3DRS_SRCBLEND = 0x48,
  D3DRS_DESTBLEND = 0x4C,
  D3DRS_BLENDOP = 0x50,
  D3DRS_SRCBLENDALPHA = 0x54,
  D3DRS_DESTBLENDALPHA = 0x58,
  D3DRS_BLENDOPALPHA = 0x5C,
  D3DRS_ALPHATESTENABLE = 0x60,
  D3DRS_ALPHAREF = 0x64,
  D3DRS_ALPHAFUNC = 0x68,
  D3DRS_STENCILENABLE = 0x6C,
  D3DRS_TWOSIDEDSTENCILMODE = 0x70,
  D3DRS_STENCILFAIL = 0x74,
  D3DRS_STENCILZFAIL = 0x78,
  D3DRS_STENCILPASS = 0x7C,
  D3DRS_STENCILFUNC = 0x80,
  D3DRS_STENCILREF = 0x84,
  D3DRS_STENCILMASK = 0x88,
  D3DRS_STENCILWRITEMASK = 0x8C,
  D3DRS_CCW_STENCILFAIL = 0x90,
  D3DRS_CCW_STENCILZFAIL = 0x94,
  D3DRS_CCW_STENCILPASS = 0x98,
  D3DRS_CCW_STENCILFUNC = 0x9C,
  D3DRS_CCW_STENCILREF = 0xA0,
  D3DRS_CCW_STENCILMASK = 0xA4,
  D3DRS_CCW_STENCILWRITEMASK = 0xA8,
  D3DRS_CLIPPLANEENABLE = 0xAC,
  D3DRS_POINTSIZE = 0xB0,
  D3DRS_POINTSIZE_MIN = 0xB4,
  D3DRS_POINTSPRITEENABLE = 0xB8,
  D3DRS_POINTSIZE_MAX = 0xBC,
  D3DRS_MULTISAMPLEANTIALIAS = 0xC0,
  D3DRS_MULTISAMPLEMASK = 0xC4,
  D3DRS_SCISSORTESTENABLE = 0xC8,
  D3DRS_SLOPESCALEDEPTHBIAS = 0xCC,
  D3DRS_DEPTHBIAS = 0xD0,
  D3DRS_COLORWRITEENABLE = 0xD4,
  D3DRS_COLORWRITEENABLE1 = 0xD8,
  D3DRS_COLORWRITEENABLE2 = 0xDC,
  D3DRS_COLORWRITEENABLE3 = 0xE0,
  D3DRS_TESSELLATIONMODE = 0xE4,
  D3DRS_MINTESSELLATIONLEVEL = 0xE8,
  D3DRS_MAXTESSELLATIONLEVEL = 0xEC,
  D3DRS_WRAP0 = 0xF0,
  D3DRS_WRAP1 = 0xF4,
  D3DRS_WRAP2 = 0xF8,
  D3DRS_WRAP3 = 0xFC,
  D3DRS_WRAP4 = 0x100,
  D3DRS_WRAP5 = 0x104,
  D3DRS_WRAP6 = 0x108,
  D3DRS_WRAP7 = 0x10C,
  D3DRS_WRAP8 = 0x110,
  D3DRS_WRAP9 = 0x114,
  D3DRS_WRAP10 = 0x118,
  D3DRS_WRAP11 = 0x11C,
  D3DRS_WRAP12 = 0x120,
  D3DRS_WRAP13 = 0x124,
  D3DRS_WRAP14 = 0x128,
  D3DRS_WRAP15 = 0x12C,
  D3DRS_VIEWPORTENABLE = 0x130,
  D3DRS_HIGHPRECISIONBLENDENABLE = 0x134,
  D3DRS_HIGHPRECISIONBLENDENABLE1 = 0x138,
  D3DRS_HIGHPRECISIONBLENDENABLE2 = 0x13C,
  D3DRS_HIGHPRECISIONBLENDENABLE3 = 0x140,
  D3DRS_HALFPIXELOFFSET = 0x144,
  D3DRS_PRIMITIVERESETENABLE = 0x148,
  D3DRS_PRIMITIVERESETINDEX = 0x14C,
  D3DRS_ALPHATOMASKENABLE = 0x150,
  D3DRS_ALPHATOMASKOFFSETS = 0x154,
  D3DRS_GUARDBAND_X = 0x158,
  D3DRS_GUARDBAND_Y = 0x15C,
  D3DRS_DISCARDBAND_X = 0x160,
  D3DRS_DISCARDBAND_Y = 0x164,
  D3DRS_HISTENCILENABLE = 0x168,
  D3DRS_HISTENCILWRITEENABLE = 0x16C,
  D3DRS_HISTENCILFUNC = 0x170,
  D3DRS_HISTENCILREF = 0x174,
  D3DRS_PRESENTINTERVAL = 0x178,
  D3DRS_PRESENTIMMEDIATETHRESHOLD = 0x17C,
  D3DRS_HIZENABLE = 0x180,
  D3DRS_HIZWRITEENABLE = 0x184,
  D3DRS_LASTPIXEL = 0x188,
  D3DRS_LINEWIDTH = 0x18C,
  D3DRS_MAX = 0x190,
  D3DRS_FORCE_DWORD = 0x7FFFFFFF,
};

/*  226 */
enum tagLOCKTYPE
{
  LOCK_WRITE = 0x1,
  LOCK_EXCLUSIVE = 0x2,
  LOCK_ONLYONCE = 0x4,
};

/*  227 */
enum std::_Uninitialized
{
  _Noinit = 0x0,
};

/*  228 */
enum _XSHOWMARKETPLACEUI_ENTRYPOINTS
{
  XSHOWMARKETPLACEUI_ENTRYPOINT_CONTENTLIST = 0x0,
  XSHOWMARKETPLACEUI_ENTRYPOINT_CONTENTITEM = 0x1,
  XSHOWMARKETPLACEUI_ENTRYPOINT_MEMBERSHIPLIST = 0x2,
  XSHOWMARKETPLACEUI_ENTRYPOINT_MEMBERSHIPITEM = 0x3,
  XSHOWMARKETPLACEUI_ENTRYPOINT_MAX = 0x4,
};

/*  229 */
enum _D3DSCREENEXTENTQUERYMODE
{
  D3DSEQM_NONCULLED = 0x0,
  D3DSEQM_CULLED = 0x1,
  D3DSEQM_PRECLIP = 0x2,
};

/*  230 */
enum _D3DXIMAGE_FILEFORMAT
{
  D3DXIFF_BMP = 0x0,
  D3DXIFF_JPG = 0x1,
  D3DXIFF_TGA = 0x2,
  D3DXIFF_PNG = 0x3,
  D3DXIFF_DDS = 0x4,
  D3DXIFF_PPM = 0x5,
  D3DXIFF_DIB = 0x6,
  D3DXIFF_HDR = 0x7,
  D3DXIFF_PFM = 0x8,
  D3DXIFF_FORCE_DWORD = 0x7FFFFFFF,
};

/*  231 */
enum _D3DBLOCKTYPE
{
  D3DBLOCKTYPE_NONE = 0x0,
  D3DBLOCKTYPE_PRIMARY_OVERRUN = 0x1,
  D3DBLOCKTYPE_SECONDARY_OVERRUN = 0x2,
  D3DBLOCKTYPE_SWAP_THROTTLE = 0x3,
  D3DBLOCKTYPE_BLOCK_UNTIL_IDLE = 0x4,
  D3DBLOCKTYPE_BLOCK_UNTIL_NOT_BUSY = 0x5,
  D3DBLOCKTYPE_BLOCK_ON_FENCE = 0x6,
  D3DBLOCKTYPE_VERTEX_SHADER_RELEASE = 0x7,
  D3DBLOCKTYPE_PIXEL_SHADER_RELEASE = 0x8,
  D3DBLOCKTYPE_VERTEX_BUFFER_RELEASE = 0x9,
  D3DBLOCKTYPE_VERTEX_BUFFER_LOCK = 0xA,
  D3DBLOCKTYPE_INDEX_BUFFER_RELEASE = 0xB,
  D3DBLOCKTYPE_INDEX_BUFFER_LOCK = 0xC,
  D3DBLOCKTYPE_TEXTURE_RELEASE = 0xD,
  D3DBLOCKTYPE_TEXTURE_LOCK = 0xE,
  D3DBLOCKTYPE_COMMAND_BUFFER_RELEASE = 0xF,
  D3DBLOCKTYPE_COMMAND_BUFFER_LOCK = 0x10,
  D3DBLOCKTYPE_CONSTANT_BUFFER_RELEASE = 0x11,
  D3DBLOCKTYPE_CONSTANT_BUFFER_LOCK = 0x12,
  D3DBLOCKTYPE_MAX = 0x13,
};

/*  232 */
enum _XSHOWMARKETPLACEDOWNLOADITEMSUI_ENTRYPOINTS
{
  XSHOWMARKETPLACEDOWNLOADITEMS_ENTRYPOINT_FREEITEMS = 0x3E8,
  XSHOWMARKETPLACEDOWNLOADITEMS_ENTRYPOINT_PAIDITEMS = 0x3E9,
  XSHOWMARKETPLACEDOWNLOADITEMS_ENTRYPOINT_MAX = 0x3EA,
};

/*  233 */
enum _D3DCOUNTER
{
  D3DCOUNTER_FRAMETIME = 0x0,
  D3DCOUNTER_FRAMESPERSECOND = 0x1,
  D3DCOUNTER_FRAMECOUNT = 0x2,
  D3DCOUNTER_FRAME_BLOCKED_PERCENT = 0x3,
  D3DCOUNTER_FRAME_THROTTLED_PERCENT = 0x4,
  D3DCOUNTER_FRAME_ACTIVE_PERCENT = 0x5,
  D3DCOUNTER_XAM_GPU_PERCENT = 0x6,
  D3DCOUNTER_FRAME_GPU_IDLE_PERCENT = 0x7,
  D3DCOUNTER_PRIMITIVES_CULLED_PERCENT = 0x8,
  D3DCOUNTER_PRIMITIVES_CLIPPED_PERCENT = 0x9,
  D3DCOUNTER_PRIMITIVES_VISIBLE_PERCENT = 0xA,
  D3DCOUNTER_BANDWIDTH_SYSTEM = 0xB,
  D3DCOUNTER_BANDWIDTH_INDICES = 0xC,
  D3DCOUNTER_BANDWIDTH_TEXTURE = 0xD,
  D3DCOUNTER_BANDWIDTH_VERTEX = 0xE,
  D3DCOUNTER_BANDWIDTH_RESOLVE = 0xF,
  D3DCOUNTER_BANDWIDTH_MEMEXPORT = 0x10,
  D3DCOUNTER_XAM_COMMAND_BUFFER_SIZE = 0x11,
  D3DCOUNTER_FRAME_GPU_WASTED_PERCENT = 0x12,
  D3DCOUNTER_MAX = 0x13,
};

/*  234 */
enum GPUPERFEVENT_RBBM
{
  GPUPE_RBBM_COUNT = 0x0,
  GPUPE_RBBM_NRT_BUSY = 0x1,
  GPUPE_RBBM_BC_CNTX0_BUSY = 0x2,
  GPUPE_RBBM_BC_CNTX17_BUSY = 0x3,
  GPUPE_RBBM_SQ_CNTX0_BUSY = 0x4,
  GPUPE_RBBM_SQ_CNTX17_BUSY = 0x5,
  GPUPE_RBBM_VGT_BUSY = 0x6,
  GPUPE_RBBM_VGT_NODMA_BUSY = 0x7,
  GPUPE_RBBM_PA_BUSY = 0x8,
  GPUPE_RBBM_SC_CNTX0_BUSY = 0x9,
  GPUPE_RBBM_SC_CNTX17_BUSY = 0xA,
  GPUPE_RBBM_TPC_BUSY = 0xB,
  GPUPE_RBBM_TC_BUSY = 0xC,
  GPUPE_RBBM_SX_BUSY = 0xD,
  GPUPE_RESERVED1 = 0xE,
  GPUPE_RBBM_CP_COHER_BUSY = 0xF,
  GPUPE_RBBM_CP_NRT_BUSY = 0x10,
  GPUPE_RESERVED2 = 0x11,
  GPUPE_RBBM_CP_DMA_BUSY = 0x12,
  GPUPE_RESERVED3 = 0x13,
  GPUPE_RESERVED4 = 0x14,
  GPUPE_RESERVED5 = 0x15,
  GPUPE_RBBM_DMA_IDLE_STALL = 0x16,
  GPUPE_RESERVED6 = 0x17,
  GPUPE_RESERVED7 = 0x18,
  GPUPE_RBBM_GFX_IDLE_STALL = 0x19,
  GPUPE_RBBM_GFX_IDLEC_STALL = 0x1A,
  GPUPE_RBBM_INTERRUPT = 0x1B,
};

/*  235 */
enum GPUPERFEVENT_BIF
{
  GPUPE_0 = 0x0,
  GPUPE_1 = 0x1,
  GPUPE_2 = 0x2,
  GPUPE_3 = 0x3,
  GPUPE_4 = 0x4,
  GPUPE_5 = 0x5,
};

/*  236 */
enum XONLINE_NAT_TYPE
{
  XONLINE_NAT_OPEN = 0x1,
  XONLINE_NAT_MODERATE = 0x2,
  XONLINE_NAT_STRICT = 0x3,
};

/*  237 */
enum <vc_attributes>::pointer_defaultAttribute::type_e
{
  ptr = 0x0,
  ref = 0x1,
  unique = 0x2,
};

/*  238 */
enum <vc_attributes>::threadingAttribute::threading_e
{
  apartment = 0x1,
  single = 0x2,
  free = 0x3,
  neutral = 0x4,
  both = 0x5,
};

/*  239 */
enum <vc_attributes>::event_receiverAttribute::type_e
{
  native = 0x0,
  com = 0x1,
  managed = 0x2,
};

/*  240 */
enum <vc_attributes>::aggregatableAttribute::type_e
{
  never = 0x0,
  allowed = 0x1,
  always = 0x2,
};

/*  241 */
typedef <vc_attributes>::event_receiverAttribute::type_e <vc_attributes>::event_sourceAttribute::type_e;

/*  242 */
enum <vc_attributes>::event_sourceAttribute::optimize_e
{
  speed = 0x0,
  size = 0x1,
};

/*  243 */
enum <vc_attributes>::moduleAttribute::type_e
{
  dll = 0x1,
  exe = 0x2,
  service = 0x3,
  unspecified = 0x4,
  EXE = 0x2,
  SERVICE = 0x3,
};

/*  244 */
enum <vc_attributes>::helper_attributes::usageAttribute::usage_e
{
  eAnyUsage = 0x0,
  eCoClassUsage = 0x1,
  eCOMInterfaceUsage = 0x2,
  eInterfaceUsage = 0x6,
  eMemberUsage = 0x8,
  eMethodUsage = 0x10,
  eInterfaceMethodUsage = 0x20,
  eInterfaceMemberUsage = 0x40,
  eCoClassMemberUsage = 0x80,
  eCoClassMethodUsage = 0x100,
  eGlobalMethodUsage = 0x300,
  eGlobalDataUsage = 0x400,
  eClassUsage = 0x800,
  eInterfaceParameterUsage = 0x1000,
  eMethodParameterUsage = 0x3000,
  eIDLModuleUsage = 0x4000,
  eAnonymousUsage = 0x8000,
  eTypedefUsage = 0x10000,
  eUnionUsage = 0x20000,
  eEnumUsage = 0x40000,
  eDefineTagUsage = 0x80000,
  eStructUsage = 0x100000,
  eLocalUsage = 0x200000,
  ePropertyUsage = 0x400000,
  eEventUsage = 0x800000,
  eTemplateUsage = 0x1000000,
  eModuleUsage = 0x1000000,
  eIllegalUsage = 0x2000000,
  eAsynchronousUsage = 0x4000000,
  eAnyIDLUsage = 0x3F7FFF,
};

/*  245 */
enum <vc_attributes>::helper_attributes::v1_alttypeAttribute::type_e
{
  eBoolean = 0x0,
  eInteger = 0x1,
  eFloat = 0x2,
  eDouble = 0x3,
};

/*  246 */
enum D3DXShader::BranchType
{
  BRANCH_IFBOOL = 0x0,
  BRANCH_IFCOMP = 0x1,
  BRANCH_REPEAT = 0x2,
  BRANCH_LOOP = 0x3,
  BRANCH_CALLBOOL = 0x4,
  BRANCH_CALLPRED = 0x5,
};

/*  247 */
enum XGENDIANTYPE
{
  XGENDIAN_NONE = 0x0,
  XGENDIAN_8IN16 = 0x20001,
  XGENDIAN_8IN32 = 0x40001,
  XGENDIAN_16IN32 = 0x40002,
  XGENDIAN_8IN64 = 0x80001,
  XGENDIAN_16IN64 = 0x80002,
  XGENDIAN_32IN64 = 0x80004,
  XGENDIAN_8IN128 = 0x100001,
  XGENDIAN_16IN128 = 0x100002,
  XGENDIAN_32IN128 = 0x100004,
  XGENDIAN_64IN128 = 0x100008,
};

/*  248 */
enum XGUCODESHADERVERSION
{
  XGUCODESHADERVERSION_PIXEL = 0x0,
  XGUCODESHADERVERSION_VERTEX = 0x1,
};

/*  249 */
enum XGRAPHICS::VerRegisterEnum
{
  REG_R0 = 0x0,
  REG_RLAST = 0xFF,
  REG_V0 = 0x100,
  REG_VLAST = 0x13F,
  REG_P = 0x140,
  REG_aL = 0x144,
  REG_a0 = 0x145,
  REG_LS = 0x149,
  REG_LV = 0x14A,
  REG_GRADXH = 0x14E,
  REG_GRADYH = 0x14F,
  REG_GRADZH = 0x150,
  REG_GRADXV = 0x151,
  REG_GRADYV = 0x152,
  REG_GRADZV = 0x153,
  REG_LOD = 0x154,
  REG_EXPORTALLOC0 = 0x155,
  REG_EXPORTALLOC4 = 0x159,
  REG_EAONEBATCHHELPER = 0x15A,
  REG_EANOTWRITTENHELPERX = 0x15B,
  REG_EANOTWRITTENHELPERW = 0x15E,
  REG_EMSTATE = 0x15F,
  REG_EMSTATELAST = 0x172,
  REG_DONECOLORS = 0x173,
  REG_DONEVFETCHE = 0x174,
  REG_VF_SRC = 0x175,
  REG_VF_STRIDE = 0x176,
  REG_VF_OFFSET = 0x177,
  REG_VF_RANGE = 0x178,
  REG_VF_CONST = 0x179,
  REG_VF_MEGA_OP = 0x17A,
  REG_VFINPUT_NEEDS_SERIALIZE_0 = 0x17B,
  REG_VFINPUT_NEEDS_SERIALIZE_LAST = 0x27B,
  REG_TFINPUT_NEEDS_SERIALIZE_0 = 0x27C,
  REG_TFINPUT_NEEDS_SERIALIZE_LAST = 0x37C,
  REG_INTERP_WRITTEN = 0x37D,
  REG_PRED_DIRTY = 0x37E,
  REG_LAST_NON_CHECKED = 0x37F,
  REG_KILL = 0x37F,
  REG_O0 = 0x380,
  REG_OLAST = 0x47F,
  REG_ALLOC_POS = 0x480,
  REG_ALLOC_INTERP = 0x481,
  REG_ALLOC_EXPORT = 0x482,
  REG_ALLOC_POS_INTF = 0x483,
  REG_ALLOC_INTERP_INTF = 0x484,
  REG_ALLOC_EXPORT_INTF = 0x485,
  REG_R0TFINTF = 0x486,
  REG_RLASTTFINTF = 0x585,
  REG_R0VFINTF = 0x586,
  REG_RLASTVFINTF = 0x685,
  REG_EAEVERUNALLOCATEDX = 0x686,
  REG_EAEVERUNALLOCATEDW = 0x689,
  REG_EAEVERWRITTENTWICE = 0x68A,
  REG_EANOTWRITTENX = 0x68B,
  REG_EANOTWRITTENW = 0x68E,
  REG_EAUNINITX = 0x68F,
  REG_EAUNINITW = 0x692,
  REG_EMWITHOUTALLOCOREA = 0x693,
  REG_EMWITHOUTALLOCOREALAST = 0x6A6,
  REG_EMUNINIT = 0x6A7,
  REG_EMUNINITLAST = 0x6BA,
  REG_EXPORTAFTERCOLORS = 0x6BB,
  REG_OREGEVERUNALLOCATED = 0x6BC,
  REG_VFETCHAFTERVFETCHE = 0x6BD,
  REG_VFETCHEAFTERVFETCHE = 0x6BE,
  REG_VFMINI_OUT_OF_RANGE = 0x6BF,
  REG_FETCHINPUT_NEEDS_SERIALIZE = 0x6C0,
  REG_POSITION_MUST_BE_FIRST = 0x6C1,
  REG_LOOP5DEEP = 0x6C2,
  REG_CALL5DEEP = 0x6C3,
  REG_KILL_MUST_BE_FOLLOWED_BY_ODEPTH = 0x6C4,
  REG_KILL_MUST_BE_FOLLOWED_BY_OREG = 0x6C5,
  REG_PRED_MOVA_ON_CLAUSE = 0x6C6,
  REG_PS_MUST_END_WITH_ALU = 0x6C7,
  VER_NUM_TABLE_REGS = 0x6C8,
  REG_C0 = 0x6C8,
  REG_CLAST = 0xAC7,
  REG_I0 = 0xAC8,
  REG_ILAST = 0xB47,
  REG_B0 = 0xB48,
  REG_BLAST = 0xC47,
  REG_COUNT = 0xC48,
  REG_S1D0 = 0xC49,
  REG_S1DLAST = 0xCC8,
  REG_S2D0 = 0xCC9,
  REG_S2DLAST = 0xD48,
  REG_SC0 = 0xD49,
  REG_SCLAST = 0xDC8,
  REG_S3D0 = 0xDC9,
  REG_S3DLAST = 0xE48,
  REG_INVALID = 0xE49,
  REG_FIRST_WITH_OTHER = 0xE4A,
  REG_VSH_INDEX = 0xE4A,
  REG_VSH_INDEX_LAST = 0xE89,
  REG_BARY = 0xE8A,
  REG_BARY_LAST = 0xEC9,
  REG_QUADID = 0xECA,
  REG_QUADID_LAST = 0xF09,
  REG_MULTIPASS_COUNT = 0xF0A,
  REG_PIX_INDEX = 0xF0B,
  REG_R500SCREENX = 0xF0C,
  REG_R500SCREENY = 0xF0D,
  REG_R500SCREENZ = 0xF0E,
  REG_R500SCREENW = 0xF0F,
  REG_SCREENX = 0xF10,
  REG_SCREENY = 0xF11,
  REG_PIXS = 0xF12,
  REG_PIXT = 0xF13,
  REG_ISBACKFACING = 0xF14,
  REG_ISPOINT = 0xF15,
  REG_ISLINE = 0xF16,
  REG_INP_00X = 0xF17,
  REG_INP_LAST = 0x1316,
  REG_LAST_WITH_OTHER = 0x1316,
  REG_VFETCHC_0_0 = 0x1317,
  REG_VFETCHC_LAST = 0x1376,
  REG_OUT_00X = 0x1377,
  REG_OUT_LAST = 0x1776,
  REG_OUT_OC0 = 0x1777,
  REG_OUT_OCLAST = 0x1786,
  REG_OUT_ODEPTH = 0x1787,
  REG_FMT_0 = 0x1788,
  REG_FMT_LAST = 0x17C7,
  REG_SIGNED_FMT_0 = 0x17C8,
  REG_SIGNED_FMT_LAST = 0x1807,
  REG_FIRST_OTHER_VAL = 0x1808,
  REG_OTHER_VSH_INDEX = 0x1808,
  REG_OTHER_VSH_INDEX_LAST = 0x1847,
  REG_OTHER_BARY = 0x1848,
  REG_OTHER_BARY_LAST = 0x1887,
  REG_OTHER_QUADID = 0x1888,
  REG_OTHER_QUADID_LAST = 0x18C7,
  REG_OTHER_MULTIPASS_COUNT = 0x18C8,
  REG_OTHER_PIX_INDEX = 0x18C9,
  REG_OTHER_R500SCREENX = 0x18CA,
  REG_OTHER_R500SCREENY = 0x18CB,
  REG_OTHER_R500SCREENZ = 0x18CC,
  REG_OTHER_R500SCREENW = 0x18CD,
  REG_OTHER_SCREENX = 0x18CE,
  REG_OTHER_SCREENY = 0x18CF,
  REG_OTHER_PIXS = 0x18D0,
  REG_OTHER_PIXT = 0x18D1,
  REG_OTHER_ISBACKFACING = 0x18D2,
  REG_OTHER_ISPOINT = 0x18D3,
  REG_OTHER_ISLINE = 0x18D4,
  REG_OTHER_INP_00X = 0x18D5,
  REG_OTHER_INP_LAST = 0x1CD4,
  REG_LAST_OTHER_VAL = 0x1CD4,
  MAX_REG = 0x1CD5,
};

/*  250 */
enum XGRAPHICS::R500VerTableBuilder::INSTPIPE
{
  ALUPIPE = 0x0,
  TCPIPE = 0x1,
  VCPIPE = 0x2,
};

/*  251 */
enum XGRAPHICS::_E_AS_OBSOLETE_STATE
{
  AS_ALPHA_BLEND_COLOR_SRC_FACTOR_0 = 0x3,
  AS_ALPHA_BLEND_COLOR_OP_0 = 0x4,
  AS_ALPHA_BLEND_COLOR_DST_FACTOR_0 = 0x5,
  AS_ALPHA_BLEND_ALPHA_SRC_FACTOR_0 = 0x6,
  AS_ALPHA_BLEND_ALPHA_OP_0 = 0x7,
  AS_ALPHA_BLEND_ALPHA_DST_FACTOR_0 = 0x8,
  AS_ALPHA_BLEND_COLOR_SRC_FACTOR_1 = 0x9,
  AS_ALPHA_BLEND_COLOR_OP_1 = 0xA,
  AS_ALPHA_BLEND_COLOR_DST_FACTOR_1 = 0xB,
  AS_ALPHA_BLEND_ALPHA_SRC_FACTOR_1 = 0xC,
  AS_ALPHA_BLEND_ALPHA_OP_1 = 0xD,
  AS_ALPHA_BLEND_ALPHA_DST_FACTOR_1 = 0xE,
  AS_ALPHA_BLEND_COLOR_SRC_FACTOR_2 = 0xF,
  AS_ALPHA_BLEND_COLOR_OP_2 = 0x10,
  AS_ALPHA_BLEND_COLOR_DST_FACTOR_2 = 0x11,
  AS_ALPHA_BLEND_ALPHA_SRC_FACTOR_2 = 0x12,
  AS_ALPHA_BLEND_ALPHA_OP_2 = 0x13,
  AS_ALPHA_BLEND_ALPHA_DST_FACTOR_2 = 0x14,
  AS_ALPHA_BLEND_COLOR_SRC_FACTOR_3 = 0x15,
  AS_ALPHA_BLEND_COLOR_OP_3 = 0x16,
  AS_ALPHA_BLEND_COLOR_DST_FACTOR_3 = 0x17,
  AS_ALPHA_BLEND_ALPHA_SRC_FACTOR_3 = 0x18,
  AS_ALPHA_BLEND_ALPHA_OP_3 = 0x19,
  AS_ALPHA_BLEND_ALPHA_DST_FACTOR_3 = 0x1A,
  AS_ALPHA_TO_MASK_OFFSET_0 = 0x1E,
  AS_ALPHA_TO_MASK_OFFSET_1 = 0x1F,
  AS_ALPHA_TO_MASK_OFFSET_2 = 0x20,
  AS_ALPHA_TO_MASK_OFFSET_3 = 0x21,
  AS_CLIPPLANE_ENABLE_0 = 0x60,
  AS_CLIPPLANE_X_0 = 0x61,
  AS_CLIPPLANE_Y_0 = 0x62,
  AS_CLIPPLANE_Z_0 = 0x63,
  AS_CLIPPLANE_W_0 = 0x64,
  AS_CLIPPLANE_ENABLE_1 = 0x65,
  AS_CLIPPLANE_X_1 = 0x66,
  AS_CLIPPLANE_Y_1 = 0x67,
  AS_CLIPPLANE_Z_1 = 0x68,
  AS_CLIPPLANE_W_1 = 0x69,
  AS_CLIPPLANE_ENABLE_2 = 0x6A,
  AS_CLIPPLANE_X_2 = 0x6B,
  AS_CLIPPLANE_Y_2 = 0x6C,
  AS_CLIPPLANE_Z_2 = 0x6D,
  AS_CLIPPLANE_W_2 = 0x6E,
  AS_CLIPPLANE_ENABLE_3 = 0x6F,
  AS_CLIPPLANE_X_3 = 0x70,
  AS_CLIPPLANE_Y_3 = 0x71,
  AS_CLIPPLANE_Z_3 = 0x72,
  AS_CLIPPLANE_W_3 = 0x73,
  AS_CLIPPLANE_ENABLE_4 = 0x74,
  AS_CLIPPLANE_X_4 = 0x75,
  AS_CLIPPLANE_Y_4 = 0x76,
  AS_CLIPPLANE_Z_4 = 0x77,
  AS_CLIPPLANE_W_4 = 0x78,
  AS_CLIPPLANE_ENABLE_5 = 0x79,
  AS_CLIPPLANE_X_5 = 0x7A,
  AS_CLIPPLANE_Y_5 = 0x7B,
  AS_CLIPPLANE_Z_5 = 0x7C,
  AS_CLIPPLANE_W_5 = 0x7D,
  AS_POINTSPRITE_REPLACE_ENABLE_0 = 0x88,
  AS_POINTSPRITE_REPLACE_ENABLE_1 = 0x89,
  AS_POINTSPRITE_REPLACE_ENABLE_2 = 0x8A,
  AS_POINTSPRITE_REPLACE_ENABLE_3 = 0x8B,
  AS_POINTSPRITE_REPLACE_ENABLE_4 = 0x8C,
  AS_POINTSPRITE_REPLACE_ENABLE_5 = 0x8D,
  AS_POINTSPRITE_REPLACE_ENABLE_6 = 0x8E,
  AS_POINTSPRITE_REPLACE_ENABLE_7 = 0x8F,
  AS_POINTSPRITE_REPLACE_ENABLE_8 = 0x90,
  AS_POINTSPRITE_REPLACE_ENABLE_9 = 0x91,
  AS_POINTSPRITE_REPLACE_ENABLE_10 = 0x92,
  AS_POINTSPRITE_REPLACE_ENABLE_11 = 0x93,
  AS_POINTSPRITE_REPLACE_ENABLE_12 = 0x94,
  AS_POINTSPRITE_REPLACE_ENABLE_13 = 0x95,
  AS_POINTSPRITE_REPLACE_ENABLE_14 = 0x96,
  AS_POINTSPRITE_REPLACE_ENABLE_15 = 0x97,
  AS_TEXCOORD_CYLINDRICAL_WRAP_0 = 0xAC,
  AS_TEXCOORD_CYLINDRICAL_WRAP_1 = 0xAD,
  AS_TEXCOORD_CYLINDRICAL_WRAP_2 = 0xAE,
  AS_TEXCOORD_CYLINDRICAL_WRAP_3 = 0xAF,
  AS_TEXCOORD_CYLINDRICAL_WRAP_4 = 0xB0,
  AS_TEXCOORD_CYLINDRICAL_WRAP_5 = 0xB1,
  AS_TEXCOORD_CYLINDRICAL_WRAP_6 = 0xB2,
  AS_TEXCOORD_CYLINDRICAL_WRAP_7 = 0xB3,
  AS_TEXCOORD_CYLINDRICAL_WRAP_8 = 0xB4,
  AS_TEXCOORD_CYLINDRICAL_WRAP_9 = 0xB5,
  AS_TEXCOORD_CYLINDRICAL_WRAP_10 = 0xB6,
  AS_TEXCOORD_CYLINDRICAL_WRAP_11 = 0xB7,
  AS_TEXCOORD_CYLINDRICAL_WRAP_12 = 0xB8,
  AS_TEXCOORD_CYLINDRICAL_WRAP_13 = 0xB9,
  AS_TEXCOORD_CYLINDRICAL_WRAP_14 = 0xBA,
  AS_TEXCOORD_CYLINDRICAL_WRAP_15 = 0xBB,
  AS_TEX_PROJECTED_0 = 0xBC,
  AS_TEX_DENORM_0 = 0xBD,
  AS_TEX_BORDER_COLOR_RED_0 = 0xBE,
  AS_TEX_BORDER_COLOR_GREEN_0 = 0xBF,
  AS_TEX_BORDER_COLOR_BLUE_0 = 0xC0,
  AS_TEX_BORDER_COLOR_ALPHA_0 = 0xC1,
  AS_TEX_SHADOW_ENABLE_0 = 0xC2,
  AS_TEX_SHADOW_FILTER_0 = 0xC3,
  AS_TEX_SHADOW_USAGE_0 = 0xC4,
  AS_TEX_SHADOW_COMPARE_FUNC_0 = 0xC5,
  AS_TEX_LODCLAMP_ENABLE_0 = 0xC6,
  AS_TEX_LODCLAMP_MIN_0 = 0xC7,
  AS_TEX_LODCLAMP_MAX_0 = 0xC8,
  AS_INTERNAL_TEX_TYPE_0 = 0xC9,
  AS_INTERNAL_TEX_FORMAT_0 = 0xCA,
  AS_INTERNAL_TEX_CLAMP_X_0 = 0xCB,
  AS_INTERNAL_TEX_CLAMP_Y_0 = 0xCC,
  AS_INTERNAL_TEX_CLAMP_Z_0 = 0xCD,
  AS_TEX_PROJECTED_1 = 0xCE,
  AS_TEX_DENORM_1 = 0xCF,
  AS_TEX_BORDER_COLOR_RED_1 = 0xD0,
  AS_TEX_BORDER_COLOR_GREEN_1 = 0xD1,
  AS_TEX_BORDER_COLOR_BLUE_1 = 0xD2,
  AS_TEX_BORDER_COLOR_ALPHA_1 = 0xD3,
  AS_TEX_SHADOW_ENABLE_1 = 0xD4,
  AS_TEX_SHADOW_FILTER_1 = 0xD5,
  AS_TEX_SHADOW_USAGE_1 = 0xD6,
  AS_TEX_SHADOW_COMPARE_FUNC_1 = 0xD7,
  AS_TEX_LODCLAMP_ENABLE_1 = 0xD8,
  AS_TEX_LODCLAMP_MIN_1 = 0xD9,
  AS_TEX_LODCLAMP_MAX_1 = 0xDA,
  AS_INTERNAL_TEX_TYPE_1 = 0xDB,
  AS_INTERNAL_TEX_FORMAT_1 = 0xDC,
  AS_INTERNAL_TEX_CLAMP_X_1 = 0xDD,
  AS_INTERNAL_TEX_CLAMP_Y_1 = 0xDE,
  AS_INTERNAL_TEX_CLAMP_Z_1 = 0xDF,
  AS_TEX_PROJECTED_2 = 0xE0,
  AS_TEX_DENORM_2 = 0xE1,
  AS_TEX_BORDER_COLOR_RED_2 = 0xE2,
  AS_TEX_BORDER_COLOR_GREEN_2 = 0xE3,
  AS_TEX_BORDER_COLOR_BLUE_2 = 0xE4,
  AS_TEX_BORDER_COLOR_ALPHA_2 = 0xE5,
  AS_TEX_SHADOW_ENABLE_2 = 0xE6,
  AS_TEX_SHADOW_FILTER_2 = 0xE7,
  AS_TEX_SHADOW_USAGE_2 = 0xE8,
  AS_TEX_SHADOW_COMPARE_FUNC_2 = 0xE9,
  AS_TEX_LODCLAMP_ENABLE_2 = 0xEA,
  AS_TEX_LODCLAMP_MIN_2 = 0xEB,
  AS_TEX_LODCLAMP_MAX_2 = 0xEC,
  AS_INTERNAL_TEX_TYPE_2 = 0xED,
  AS_INTERNAL_TEX_FORMAT_2 = 0xEE,
  AS_INTERNAL_TEX_CLAMP_X_2 = 0xEF,
  AS_INTERNAL_TEX_CLAMP_Y_2 = 0xF0,
  AS_INTERNAL_TEX_CLAMP_Z_2 = 0xF1,
  AS_TEX_PROJECTED_3 = 0xF2,
  AS_TEX_DENORM_3 = 0xF3,
  AS_TEX_BORDER_COLOR_RED_3 = 0xF4,
  AS_TEX_BORDER_COLOR_GREEN_3 = 0xF5,
  AS_TEX_BORDER_COLOR_BLUE_3 = 0xF6,
  AS_TEX_BORDER_COLOR_ALPHA_3 = 0xF7,
  AS_TEX_SHADOW_ENABLE_3 = 0xF8,
  AS_TEX_SHADOW_FILTER_3 = 0xF9,
  AS_TEX_SHADOW_USAGE_3 = 0xFA,
  AS_TEX_SHADOW_COMPARE_FUNC_3 = 0xFB,
  AS_TEX_LODCLAMP_ENABLE_3 = 0xFC,
  AS_TEX_LODCLAMP_MIN_3 = 0xFD,
  AS_TEX_LODCLAMP_MAX_3 = 0xFE,
  AS_INTERNAL_TEX_TYPE_3 = 0xFF,
  AS_INTERNAL_TEX_FORMAT_3 = 0x100,
  AS_INTERNAL_TEX_CLAMP_X_3 = 0x101,
  AS_INTERNAL_TEX_CLAMP_Y_3 = 0x102,
  AS_INTERNAL_TEX_CLAMP_Z_3 = 0x103,
  AS_TEX_PROJECTED_4 = 0x104,
  AS_TEX_DENORM_4 = 0x105,
  AS_TEX_BORDER_COLOR_RED_4 = 0x106,
  AS_TEX_BORDER_COLOR_GREEN_4 = 0x107,
  AS_TEX_BORDER_COLOR_BLUE_4 = 0x108,
  AS_TEX_BORDER_COLOR_ALPHA_4 = 0x109,
  AS_TEX_SHADOW_ENABLE_4 = 0x10A,
  AS_TEX_SHADOW_FILTER_4 = 0x10B,
  AS_TEX_SHADOW_USAGE_4 = 0x10C,
  AS_TEX_SHADOW_COMPARE_FUNC_4 = 0x10D,
  AS_TEX_LODCLAMP_ENABLE_4 = 0x10E,
  AS_TEX_LODCLAMP_MIN_4 = 0x10F,
  AS_TEX_LODCLAMP_MAX_4 = 0x110,
  AS_INTERNAL_TEX_TYPE_4 = 0x111,
  AS_INTERNAL_TEX_FORMAT_4 = 0x112,
  AS_INTERNAL_TEX_CLAMP_X_4 = 0x113,
  AS_INTERNAL_TEX_CLAMP_Y_4 = 0x114,
  AS_INTERNAL_TEX_CLAMP_Z_4 = 0x115,
  AS_TEX_PROJECTED_5 = 0x116,
  AS_TEX_DENORM_5 = 0x117,
  AS_TEX_BORDER_COLOR_RED_5 = 0x118,
  AS_TEX_BORDER_COLOR_GREEN_5 = 0x119,
  AS_TEX_BORDER_COLOR_BLUE_5 = 0x11A,
  AS_TEX_BORDER_COLOR_ALPHA_5 = 0x11B,
  AS_TEX_SHADOW_ENABLE_5 = 0x11C,
  AS_TEX_SHADOW_FILTER_5 = 0x11D,
  AS_TEX_SHADOW_USAGE_5 = 0x11E,
  AS_TEX_SHADOW_COMPARE_FUNC_5 = 0x11F,
  AS_TEX_LODCLAMP_ENABLE_5 = 0x120,
  AS_TEX_LODCLAMP_MIN_5 = 0x121,
  AS_TEX_LODCLAMP_MAX_5 = 0x122,
  AS_INTERNAL_TEX_TYPE_5 = 0x123,
  AS_INTERNAL_TEX_FORMAT_5 = 0x124,
  AS_INTERNAL_TEX_CLAMP_X_5 = 0x125,
  AS_INTERNAL_TEX_CLAMP_Y_5 = 0x126,
  AS_INTERNAL_TEX_CLAMP_Z_5 = 0x127,
  AS_TEX_PROJECTED_6 = 0x128,
  AS_TEX_DENORM_6 = 0x129,
  AS_TEX_BORDER_COLOR_RED_6 = 0x12A,
  AS_TEX_BORDER_COLOR_GREEN_6 = 0x12B,
  AS_TEX_BORDER_COLOR_BLUE_6 = 0x12C,
  AS_TEX_BORDER_COLOR_ALPHA_6 = 0x12D,
  AS_TEX_SHADOW_ENABLE_6 = 0x12E,
  AS_TEX_SHADOW_FILTER_6 = 0x12F,
  AS_TEX_SHADOW_USAGE_6 = 0x130,
  AS_TEX_SHADOW_COMPARE_FUNC_6 = 0x131,
  AS_TEX_LODCLAMP_ENABLE_6 = 0x132,
  AS_TEX_LODCLAMP_MIN_6 = 0x133,
  AS_TEX_LODCLAMP_MAX_6 = 0x134,
  AS_INTERNAL_TEX_TYPE_6 = 0x135,
  AS_INTERNAL_TEX_FORMAT_6 = 0x136,
  AS_INTERNAL_TEX_CLAMP_X_6 = 0x137,
  AS_INTERNAL_TEX_CLAMP_Y_6 = 0x138,
  AS_INTERNAL_TEX_CLAMP_Z_6 = 0x139,
  AS_TEX_PROJECTED_7 = 0x13A,
  AS_TEX_DENORM_7 = 0x13B,
  AS_TEX_BORDER_COLOR_RED_7 = 0x13C,
  AS_TEX_BORDER_COLOR_GREEN_7 = 0x13D,
  AS_TEX_BORDER_COLOR_BLUE_7 = 0x13E,
  AS_TEX_BORDER_COLOR_ALPHA_7 = 0x13F,
  AS_TEX_SHADOW_ENABLE_7 = 0x140,
  AS_TEX_SHADOW_FILTER_7 = 0x141,
  AS_TEX_SHADOW_USAGE_7 = 0x142,
  AS_TEX_SHADOW_COMPARE_FUNC_7 = 0x143,
  AS_TEX_LODCLAMP_ENABLE_7 = 0x144,
  AS_TEX_LODCLAMP_MIN_7 = 0x145,
  AS_TEX_LODCLAMP_MAX_7 = 0x146,
  AS_INTERNAL_TEX_TYPE_7 = 0x147,
  AS_INTERNAL_TEX_FORMAT_7 = 0x148,
  AS_INTERNAL_TEX_CLAMP_X_7 = 0x149,
  AS_INTERNAL_TEX_CLAMP_Y_7 = 0x14A,
  AS_INTERNAL_TEX_CLAMP_Z_7 = 0x14B,
  AS_TEX_PROJECTED_8 = 0x14C,
  AS_TEX_DENORM_8 = 0x14D,
  AS_TEX_BORDER_COLOR_RED_8 = 0x14E,
  AS_TEX_BORDER_COLOR_GREEN_8 = 0x14F,
  AS_TEX_BORDER_COLOR_BLUE_8 = 0x150,
  AS_TEX_BORDER_COLOR_ALPHA_8 = 0x151,
  AS_TEX_SHADOW_ENABLE_8 = 0x152,
  AS_TEX_SHADOW_FILTER_8 = 0x153,
  AS_TEX_SHADOW_USAGE_8 = 0x154,
  AS_TEX_SHADOW_COMPARE_FUNC_8 = 0x155,
  AS_TEX_LODCLAMP_ENABLE_8 = 0x156,
  AS_TEX_LODCLAMP_MIN_8 = 0x157,
  AS_TEX_LODCLAMP_MAX_8 = 0x158,
  AS_INTERNAL_TEX_TYPE_8 = 0x159,
  AS_INTERNAL_TEX_FORMAT_8 = 0x15A,
  AS_INTERNAL_TEX_CLAMP_X_8 = 0x15B,
  AS_INTERNAL_TEX_CLAMP_Y_8 = 0x15C,
  AS_INTERNAL_TEX_CLAMP_Z_8 = 0x15D,
  AS_TEX_PROJECTED_9 = 0x15E,
  AS_TEX_DENORM_9 = 0x15F,
  AS_TEX_BORDER_COLOR_RED_9 = 0x160,
  AS_TEX_BORDER_COLOR_GREEN_9 = 0x161,
  AS_TEX_BORDER_COLOR_BLUE_9 = 0x162,
  AS_TEX_BORDER_COLOR_ALPHA_9 = 0x163,
  AS_TEX_SHADOW_ENABLE_9 = 0x164,
  AS_TEX_SHADOW_FILTER_9 = 0x165,
  AS_TEX_SHADOW_USAGE_9 = 0x166,
  AS_TEX_SHADOW_COMPARE_FUNC_9 = 0x167,
  AS_TEX_LODCLAMP_ENABLE_9 = 0x168,
  AS_TEX_LODCLAMP_MIN_9 = 0x169,
  AS_TEX_LODCLAMP_MAX_9 = 0x16A,
  AS_INTERNAL_TEX_TYPE_9 = 0x16B,
  AS_INTERNAL_TEX_FORMAT_9 = 0x16C,
  AS_INTERNAL_TEX_CLAMP_X_9 = 0x16D,
  AS_INTERNAL_TEX_CLAMP_Y_9 = 0x16E,
  AS_INTERNAL_TEX_CLAMP_Z_9 = 0x16F,
  AS_TEX_PROJECTED_10 = 0x170,
  AS_TEX_DENORM_10 = 0x171,
  AS_TEX_BORDER_COLOR_RED_10 = 0x172,
  AS_TEX_BORDER_COLOR_GREEN_10 = 0x173,
  AS_TEX_BORDER_COLOR_BLUE_10 = 0x174,
  AS_TEX_BORDER_COLOR_ALPHA_10 = 0x175,
  AS_TEX_SHADOW_ENABLE_10 = 0x176,
  AS_TEX_SHADOW_FILTER_10 = 0x177,
  AS_TEX_SHADOW_USAGE_10 = 0x178,
  AS_TEX_SHADOW_COMPARE_FUNC_10 = 0x179,
  AS_TEX_LODCLAMP_ENABLE_10 = 0x17A,
  AS_TEX_LODCLAMP_MIN_10 = 0x17B,
  AS_TEX_LODCLAMP_MAX_10 = 0x17C,
  AS_INTERNAL_TEX_TYPE_10 = 0x17D,
  AS_INTERNAL_TEX_FORMAT_10 = 0x17E,
  AS_INTERNAL_TEX_CLAMP_X_10 = 0x17F,
  AS_INTERNAL_TEX_CLAMP_Y_10 = 0x180,
  AS_INTERNAL_TEX_CLAMP_Z_10 = 0x181,
  AS_TEX_PROJECTED_11 = 0x182,
  AS_TEX_DENORM_11 = 0x183,
  AS_TEX_BORDER_COLOR_RED_11 = 0x184,
  AS_TEX_BORDER_COLOR_GREEN_11 = 0x185,
  AS_TEX_BORDER_COLOR_BLUE_11 = 0x186,
  AS_TEX_BORDER_COLOR_ALPHA_11 = 0x187,
  AS_TEX_SHADOW_ENABLE_11 = 0x188,
  AS_TEX_SHADOW_FILTER_11 = 0x189,
  AS_TEX_SHADOW_USAGE_11 = 0x18A,
  AS_TEX_SHADOW_COMPARE_FUNC_11 = 0x18B,
  AS_TEX_LODCLAMP_ENABLE_11 = 0x18C,
  AS_TEX_LODCLAMP_MIN_11 = 0x18D,
  AS_TEX_LODCLAMP_MAX_11 = 0x18E,
  AS_INTERNAL_TEX_TYPE_11 = 0x18F,
  AS_INTERNAL_TEX_FORMAT_11 = 0x190,
  AS_INTERNAL_TEX_CLAMP_X_11 = 0x191,
  AS_INTERNAL_TEX_CLAMP_Y_11 = 0x192,
  AS_INTERNAL_TEX_CLAMP_Z_11 = 0x193,
  AS_TEX_PROJECTED_12 = 0x194,
  AS_TEX_DENORM_12 = 0x195,
  AS_TEX_BORDER_COLOR_RED_12 = 0x196,
  AS_TEX_BORDER_COLOR_GREEN_12 = 0x197,
  AS_TEX_BORDER_COLOR_BLUE_12 = 0x198,
  AS_TEX_BORDER_COLOR_ALPHA_12 = 0x199,
  AS_TEX_SHADOW_ENABLE_12 = 0x19A,
  AS_TEX_SHADOW_FILTER_12 = 0x19B,
  AS_TEX_SHADOW_USAGE_12 = 0x19C,
  AS_TEX_SHADOW_COMPARE_FUNC_12 = 0x19D,
  AS_TEX_LODCLAMP_ENABLE_12 = 0x19E,
  AS_TEX_LODCLAMP_MIN_12 = 0x19F,
  AS_TEX_LODCLAMP_MAX_12 = 0x1A0,
  AS_INTERNAL_TEX_TYPE_12 = 0x1A1,
  AS_INTERNAL_TEX_FORMAT_12 = 0x1A2,
  AS_INTERNAL_TEX_CLAMP_X_12 = 0x1A3,
  AS_INTERNAL_TEX_CLAMP_Y_12 = 0x1A4,
  AS_INTERNAL_TEX_CLAMP_Z_12 = 0x1A5,
  AS_TEX_PROJECTED_13 = 0x1A6,
  AS_TEX_DENORM_13 = 0x1A7,
  AS_TEX_BORDER_COLOR_RED_13 = 0x1A8,
  AS_TEX_BORDER_COLOR_GREEN_13 = 0x1A9,
  AS_TEX_BORDER_COLOR_BLUE_13 = 0x1AA,
  AS_TEX_BORDER_COLOR_ALPHA_13 = 0x1AB,
  AS_TEX_SHADOW_ENABLE_13 = 0x1AC,
  AS_TEX_SHADOW_FILTER_13 = 0x1AD,
  AS_TEX_SHADOW_USAGE_13 = 0x1AE,
  AS_TEX_SHADOW_COMPARE_FUNC_13 = 0x1AF,
  AS_TEX_LODCLAMP_ENABLE_13 = 0x1B0,
  AS_TEX_LODCLAMP_MIN_13 = 0x1B1,
  AS_TEX_LODCLAMP_MAX_13 = 0x1B2,
  AS_INTERNAL_TEX_TYPE_13 = 0x1B3,
  AS_INTERNAL_TEX_FORMAT_13 = 0x1B4,
  AS_INTERNAL_TEX_CLAMP_X_13 = 0x1B5,
  AS_INTERNAL_TEX_CLAMP_Y_13 = 0x1B6,
  AS_INTERNAL_TEX_CLAMP_Z_13 = 0x1B7,
  AS_TEX_PROJECTED_14 = 0x1B8,
  AS_TEX_DENORM_14 = 0x1B9,
  AS_TEX_BORDER_COLOR_RED_14 = 0x1BA,
  AS_TEX_BORDER_COLOR_GREEN_14 = 0x1BB,
  AS_TEX_BORDER_COLOR_BLUE_14 = 0x1BC,
  AS_TEX_BORDER_COLOR_ALPHA_14 = 0x1BD,
  AS_TEX_SHADOW_ENABLE_14 = 0x1BE,
  AS_TEX_SHADOW_FILTER_14 = 0x1BF,
  AS_TEX_SHADOW_USAGE_14 = 0x1C0,
  AS_TEX_SHADOW_COMPARE_FUNC_14 = 0x1C1,
  AS_TEX_LODCLAMP_ENABLE_14 = 0x1C2,
  AS_TEX_LODCLAMP_MIN_14 = 0x1C3,
  AS_TEX_LODCLAMP_MAX_14 = 0x1C4,
  AS_INTERNAL_TEX_TYPE_14 = 0x1C5,
  AS_INTERNAL_TEX_FORMAT_14 = 0x1C6,
  AS_INTERNAL_TEX_CLAMP_X_14 = 0x1C7,
  AS_INTERNAL_TEX_CLAMP_Y_14 = 0x1C8,
  AS_INTERNAL_TEX_CLAMP_Z_14 = 0x1C9,
  AS_TEX_PROJECTED_15 = 0x1CA,
  AS_TEX_DENORM_15 = 0x1CB,
  AS_TEX_BORDER_COLOR_RED_15 = 0x1CC,
  AS_TEX_BORDER_COLOR_GREEN_15 = 0x1CD,
  AS_TEX_BORDER_COLOR_BLUE_15 = 0x1CE,
  AS_TEX_BORDER_COLOR_ALPHA_15 = 0x1CF,
  AS_TEX_SHADOW_ENABLE_15 = 0x1D0,
  AS_TEX_SHADOW_FILTER_15 = 0x1D1,
  AS_TEX_SHADOW_USAGE_15 = 0x1D2,
  AS_TEX_SHADOW_COMPARE_FUNC_15 = 0x1D3,
  AS_TEX_LODCLAMP_ENABLE_15 = 0x1D4,
  AS_TEX_LODCLAMP_MIN_15 = 0x1D5,
  AS_TEX_LODCLAMP_MAX_15 = 0x1D6,
  AS_INTERNAL_TEX_TYPE_15 = 0x1D7,
  AS_INTERNAL_TEX_FORMAT_15 = 0x1D8,
  AS_INTERNAL_TEX_CLAMP_X_15 = 0x1D9,
  AS_INTERNAL_TEX_CLAMP_Y_15 = 0x1DA,
  AS_INTERNAL_TEX_CLAMP_Z_15 = 0x1DB,
  AS_TEX_PROJECTED_16 = 0x1DC,
  AS_TEX_DENORM_16 = 0x1DD,
  AS_TEX_BORDER_COLOR_RED_16 = 0x1DE,
  AS_TEX_BORDER_COLOR_GREEN_16 = 0x1DF,
  AS_TEX_BORDER_COLOR_BLUE_16 = 0x1E0,
  AS_TEX_BORDER_COLOR_ALPHA_16 = 0x1E1,
  AS_TEX_SHADOW_ENABLE_16 = 0x1E2,
  AS_TEX_SHADOW_FILTER_16 = 0x1E3,
  AS_TEX_SHADOW_USAGE_16 = 0x1E4,
  AS_TEX_SHADOW_COMPARE_FUNC_16 = 0x1E5,
  AS_TEX_LODCLAMP_ENABLE_16 = 0x1E6,
  AS_TEX_LODCLAMP_MIN_16 = 0x1E7,
  AS_TEX_LODCLAMP_MAX_16 = 0x1E8,
  AS_INTERNAL_TEX_TYPE_16 = 0x1E9,
  AS_INTERNAL_TEX_FORMAT_16 = 0x1EA,
  AS_INTERNAL_TEX_CLAMP_X_16 = 0x1EB,
  AS_INTERNAL_TEX_CLAMP_Y_16 = 0x1EC,
  AS_INTERNAL_TEX_CLAMP_Z_16 = 0x1ED,
  AS_TEX_PROJECTED_17 = 0x1EE,
  AS_TEX_DENORM_17 = 0x1EF,
  AS_TEX_BORDER_COLOR_RED_17 = 0x1F0,
  AS_TEX_BORDER_COLOR_GREEN_17 = 0x1F1,
  AS_TEX_BORDER_COLOR_BLUE_17 = 0x1F2,
  AS_TEX_BORDER_COLOR_ALPHA_17 = 0x1F3,
  AS_TEX_SHADOW_ENABLE_17 = 0x1F4,
  AS_TEX_SHADOW_FILTER_17 = 0x1F5,
  AS_TEX_SHADOW_USAGE_17 = 0x1F6,
  AS_TEX_SHADOW_COMPARE_FUNC_17 = 0x1F7,
  AS_TEX_LODCLAMP_ENABLE_17 = 0x1F8,
  AS_TEX_LODCLAMP_MIN_17 = 0x1F9,
  AS_TEX_LODCLAMP_MAX_17 = 0x1FA,
  AS_INTERNAL_TEX_TYPE_17 = 0x1FB,
  AS_INTERNAL_TEX_FORMAT_17 = 0x1FC,
  AS_INTERNAL_TEX_CLAMP_X_17 = 0x1FD,
  AS_INTERNAL_TEX_CLAMP_Y_17 = 0x1FE,
  AS_INTERNAL_TEX_CLAMP_Z_17 = 0x1FF,
  AS_TEX_PROJECTED_18 = 0x200,
  AS_TEX_DENORM_18 = 0x201,
  AS_TEX_BORDER_COLOR_RED_18 = 0x202,
  AS_TEX_BORDER_COLOR_GREEN_18 = 0x203,
  AS_TEX_BORDER_COLOR_BLUE_18 = 0x204,
  AS_TEX_BORDER_COLOR_ALPHA_18 = 0x205,
  AS_TEX_SHADOW_ENABLE_18 = 0x206,
  AS_TEX_SHADOW_FILTER_18 = 0x207,
  AS_TEX_SHADOW_USAGE_18 = 0x208,
  AS_TEX_SHADOW_COMPARE_FUNC_18 = 0x209,
  AS_TEX_LODCLAMP_ENABLE_18 = 0x20A,
  AS_TEX_LODCLAMP_MIN_18 = 0x20B,
  AS_TEX_LODCLAMP_MAX_18 = 0x20C,
  AS_INTERNAL_TEX_TYPE_18 = 0x20D,
  AS_INTERNAL_TEX_FORMAT_18 = 0x20E,
  AS_INTERNAL_TEX_CLAMP_X_18 = 0x20F,
  AS_INTERNAL_TEX_CLAMP_Y_18 = 0x210,
  AS_INTERNAL_TEX_CLAMP_Z_18 = 0x211,
  AS_TEX_PROJECTED_19 = 0x212,
  AS_TEX_DENORM_19 = 0x213,
  AS_TEX_BORDER_COLOR_RED_19 = 0x214,
  AS_TEX_BORDER_COLOR_GREEN_19 = 0x215,
  AS_TEX_BORDER_COLOR_BLUE_19 = 0x216,
  AS_TEX_BORDER_COLOR_ALPHA_19 = 0x217,
  AS_TEX_SHADOW_ENABLE_19 = 0x218,
  AS_TEX_SHADOW_FILTER_19 = 0x219,
  AS_TEX_SHADOW_USAGE_19 = 0x21A,
  AS_TEX_SHADOW_COMPARE_FUNC_19 = 0x21B,
  AS_TEX_LODCLAMP_ENABLE_19 = 0x21C,
  AS_TEX_LODCLAMP_MIN_19 = 0x21D,
  AS_TEX_LODCLAMP_MAX_19 = 0x21E,
  AS_INTERNAL_TEX_TYPE_19 = 0x21F,
  AS_INTERNAL_TEX_FORMAT_19 = 0x220,
  AS_INTERNAL_TEX_CLAMP_X_19 = 0x221,
  AS_INTERNAL_TEX_CLAMP_Y_19 = 0x222,
  AS_INTERNAL_TEX_CLAMP_Z_19 = 0x223,
  AS_TEX_PROJECTED_20 = 0x224,
  AS_TEX_DENORM_20 = 0x225,
  AS_TEX_BORDER_COLOR_RED_20 = 0x226,
  AS_TEX_BORDER_COLOR_GREEN_20 = 0x227,
  AS_TEX_BORDER_COLOR_BLUE_20 = 0x228,
  AS_TEX_BORDER_COLOR_ALPHA_20 = 0x229,
  AS_TEX_SHADOW_ENABLE_20 = 0x22A,
  AS_TEX_SHADOW_FILTER_20 = 0x22B,
  AS_TEX_SHADOW_USAGE_20 = 0x22C,
  AS_TEX_SHADOW_COMPARE_FUNC_20 = 0x22D,
  AS_TEX_LODCLAMP_ENABLE_20 = 0x22E,
  AS_TEX_LODCLAMP_MIN_20 = 0x22F,
  AS_TEX_LODCLAMP_MAX_20 = 0x230,
  AS_INTERNAL_TEX_TYPE_20 = 0x231,
  AS_INTERNAL_TEX_FORMAT_20 = 0x232,
  AS_INTERNAL_TEX_CLAMP_X_20 = 0x233,
  AS_INTERNAL_TEX_CLAMP_Y_20 = 0x234,
  AS_INTERNAL_TEX_CLAMP_Z_20 = 0x235,
  AS_POLY_STIPPLE_PATTERN_0 = 0x247,
  AS_POLY_STIPPLE_PATTERN_1 = 0x248,
  AS_POLY_STIPPLE_PATTERN_2 = 0x249,
  AS_POLY_STIPPLE_PATTERN_3 = 0x24A,
  AS_POLY_STIPPLE_PATTERN_4 = 0x24B,
  AS_POLY_STIPPLE_PATTERN_5 = 0x24C,
  AS_POLY_STIPPLE_PATTERN_6 = 0x24D,
  AS_POLY_STIPPLE_PATTERN_7 = 0x24E,
  AS_POLY_STIPPLE_PATTERN_8 = 0x24F,
  AS_POLY_STIPPLE_PATTERN_9 = 0x250,
  AS_POLY_STIPPLE_PATTERN_10 = 0x251,
  AS_POLY_STIPPLE_PATTERN_11 = 0x252,
  AS_POLY_STIPPLE_PATTERN_12 = 0x253,
  AS_POLY_STIPPLE_PATTERN_13 = 0x254,
  AS_POLY_STIPPLE_PATTERN_14 = 0x255,
  AS_POLY_STIPPLE_PATTERN_15 = 0x256,
  AS_POLY_STIPPLE_PATTERN_16 = 0x257,
  AS_POLY_STIPPLE_PATTERN_17 = 0x258,
  AS_POLY_STIPPLE_PATTERN_18 = 0x259,
  AS_POLY_STIPPLE_PATTERN_19 = 0x25A,
  AS_POLY_STIPPLE_PATTERN_20 = 0x25B,
  AS_POLY_STIPPLE_PATTERN_21 = 0x25C,
  AS_POLY_STIPPLE_PATTERN_22 = 0x25D,
  AS_POLY_STIPPLE_PATTERN_23 = 0x25E,
  AS_POLY_STIPPLE_PATTERN_24 = 0x25F,
  AS_POLY_STIPPLE_PATTERN_25 = 0x260,
  AS_POLY_STIPPLE_PATTERN_26 = 0x261,
  AS_POLY_STIPPLE_PATTERN_27 = 0x262,
  AS_POLY_STIPPLE_PATTERN_28 = 0x263,
  AS_POLY_STIPPLE_PATTERN_29 = 0x264,
  AS_POLY_STIPPLE_PATTERN_30 = 0x265,
  AS_POLY_STIPPLE_PATTERN_31 = 0x266,
  AS_CB_BASEADDRESS_0 = 0x274,
  AS_CB_SURFACE_FMT_0 = 0x275,
  AS_CB_SURFACE_NUMERIC_PACKED_0 = 0x276,
  AS_CB_SURFACE_SWIZZLE_PACKED_0 = 0x277,
  AS_CB_CLAMP_MODE_0 = 0x278,
  AS_CB_EXP_BIAS_0 = 0x279,
  AS_CB_BASEADDRESS_1 = 0x27A,
  AS_CB_SURFACE_FMT_1 = 0x27B,
  AS_CB_SURFACE_NUMERIC_PACKED_1 = 0x27C,
  AS_CB_SURFACE_SWIZZLE_PACKED_1 = 0x27D,
  AS_CB_CLAMP_MODE_1 = 0x27E,
  AS_CB_EXP_BIAS_1 = 0x27F,
  AS_CB_BASEADDRESS_2 = 0x280,
  AS_CB_SURFACE_FMT_2 = 0x281,
  AS_CB_SURFACE_NUMERIC_PACKED_2 = 0x282,
  AS_CB_SURFACE_SWIZZLE_PACKED_2 = 0x283,
  AS_CB_CLAMP_MODE_2 = 0x284,
  AS_CB_EXP_BIAS_2 = 0x285,
  AS_CB_BASEADDRESS_3 = 0x286,
  AS_CB_SURFACE_FMT_3 = 0x287,
  AS_CB_SURFACE_NUMERIC_PACKED_3 = 0x288,
  AS_CB_SURFACE_SWIZZLE_PACKED_3 = 0x289,
  AS_CB_CLAMP_MODE_3 = 0x28A,
  AS_CB_EXP_BIAS_3 = 0x28B,
  AS_VS_DECL_ENABLE_0 = 0x2AE,
  AS_VS_DECL_STREAM_NUM_0 = 0x2AF,
  AS_VS_DECL_OFFSET_0 = 0x2B0,
  AS_VS_DECL_STRIDE_0 = 0x2B1,
  AS_VS_DECL_TYPE_FORMAT_0 = 0x2B2,
  AS_VS_DECL_TYPE_DIMENSION_0 = 0x2B3,
  AS_VS_DECL_TYPE_SIGNED_0 = 0x2B4,
  AS_VS_DECL_TYPE_NORMALIZE_0 = 0x2B5,
  AS_VS_DECL_USAGE_0 = 0x2B6,
  AS_VS_DECL_STREAM_FREQ_0 = 0x2B7,
  AS_VS_DECL_ENABLE_1 = 0x2B8,
  AS_VS_DECL_STREAM_NUM_1 = 0x2B9,
  AS_VS_DECL_OFFSET_1 = 0x2BA,
  AS_VS_DECL_STRIDE_1 = 0x2BB,
  AS_VS_DECL_TYPE_FORMAT_1 = 0x2BC,
  AS_VS_DECL_TYPE_DIMENSION_1 = 0x2BD,
  AS_VS_DECL_TYPE_SIGNED_1 = 0x2BE,
  AS_VS_DECL_TYPE_NORMALIZE_1 = 0x2BF,
  AS_VS_DECL_USAGE_1 = 0x2C0,
  AS_VS_DECL_STREAM_FREQ_1 = 0x2C1,
  AS_VS_DECL_ENABLE_2 = 0x2C2,
  AS_VS_DECL_STREAM_NUM_2 = 0x2C3,
  AS_VS_DECL_OFFSET_2 = 0x2C4,
  AS_VS_DECL_STRIDE_2 = 0x2C5,
  AS_VS_DECL_TYPE_FORMAT_2 = 0x2C6,
  AS_VS_DECL_TYPE_DIMENSION_2 = 0x2C7,
  AS_VS_DECL_TYPE_SIGNED_2 = 0x2C8,
  AS_VS_DECL_TYPE_NORMALIZE_2 = 0x2C9,
  AS_VS_DECL_USAGE_2 = 0x2CA,
  AS_VS_DECL_STREAM_FREQ_2 = 0x2CB,
  AS_VS_DECL_ENABLE_3 = 0x2CC,
  AS_VS_DECL_STREAM_NUM_3 = 0x2CD,
  AS_VS_DECL_OFFSET_3 = 0x2CE,
  AS_VS_DECL_STRIDE_3 = 0x2CF,
  AS_VS_DECL_TYPE_FORMAT_3 = 0x2D0,
  AS_VS_DECL_TYPE_DIMENSION_3 = 0x2D1,
  AS_VS_DECL_TYPE_SIGNED_3 = 0x2D2,
  AS_VS_DECL_TYPE_NORMALIZE_3 = 0x2D3,
  AS_VS_DECL_USAGE_3 = 0x2D4,
  AS_VS_DECL_STREAM_FREQ_3 = 0x2D5,
  AS_VS_DECL_ENABLE_4 = 0x2D6,
  AS_VS_DECL_STREAM_NUM_4 = 0x2D7,
  AS_VS_DECL_OFFSET_4 = 0x2D8,
  AS_VS_DECL_STRIDE_4 = 0x2D9,
  AS_VS_DECL_TYPE_FORMAT_4 = 0x2DA,
  AS_VS_DECL_TYPE_DIMENSION_4 = 0x2DB,
  AS_VS_DECL_TYPE_SIGNED_4 = 0x2DC,
  AS_VS_DECL_TYPE_NORMALIZE_4 = 0x2DD,
  AS_VS_DECL_USAGE_4 = 0x2DE,
  AS_VS_DECL_STREAM_FREQ_4 = 0x2DF,
  AS_VS_DECL_ENABLE_5 = 0x2E0,
  AS_VS_DECL_STREAM_NUM_5 = 0x2E1,
  AS_VS_DECL_OFFSET_5 = 0x2E2,
  AS_VS_DECL_STRIDE_5 = 0x2E3,
  AS_VS_DECL_TYPE_FORMAT_5 = 0x2E4,
  AS_VS_DECL_TYPE_DIMENSION_5 = 0x2E5,
  AS_VS_DECL_TYPE_SIGNED_5 = 0x2E6,
  AS_VS_DECL_TYPE_NORMALIZE_5 = 0x2E7,
  AS_VS_DECL_USAGE_5 = 0x2E8,
  AS_VS_DECL_STREAM_FREQ_5 = 0x2E9,
  AS_VS_DECL_ENABLE_6 = 0x2EA,
  AS_VS_DECL_STREAM_NUM_6 = 0x2EB,
  AS_VS_DECL_OFFSET_6 = 0x2EC,
  AS_VS_DECL_STRIDE_6 = 0x2ED,
  AS_VS_DECL_TYPE_FORMAT_6 = 0x2EE,
  AS_VS_DECL_TYPE_DIMENSION_6 = 0x2EF,
  AS_VS_DECL_TYPE_SIGNED_6 = 0x2F0,
  AS_VS_DECL_TYPE_NORMALIZE_6 = 0x2F1,
  AS_VS_DECL_USAGE_6 = 0x2F2,
  AS_VS_DECL_STREAM_FREQ_6 = 0x2F3,
  AS_VS_DECL_ENABLE_7 = 0x2F4,
  AS_VS_DECL_STREAM_NUM_7 = 0x2F5,
  AS_VS_DECL_OFFSET_7 = 0x2F6,
  AS_VS_DECL_STRIDE_7 = 0x2F7,
  AS_VS_DECL_TYPE_FORMAT_7 = 0x2F8,
  AS_VS_DECL_TYPE_DIMENSION_7 = 0x2F9,
  AS_VS_DECL_TYPE_SIGNED_7 = 0x2FA,
  AS_VS_DECL_TYPE_NORMALIZE_7 = 0x2FB,
  AS_VS_DECL_USAGE_7 = 0x2FC,
  AS_VS_DECL_STREAM_FREQ_7 = 0x2FD,
  AS_VS_DECL_ENABLE_8 = 0x2FE,
  AS_VS_DECL_STREAM_NUM_8 = 0x2FF,
  AS_VS_DECL_OFFSET_8 = 0x300,
  AS_VS_DECL_STRIDE_8 = 0x301,
  AS_VS_DECL_TYPE_FORMAT_8 = 0x302,
  AS_VS_DECL_TYPE_DIMENSION_8 = 0x303,
  AS_VS_DECL_TYPE_SIGNED_8 = 0x304,
  AS_VS_DECL_TYPE_NORMALIZE_8 = 0x305,
  AS_VS_DECL_USAGE_8 = 0x306,
  AS_VS_DECL_STREAM_FREQ_8 = 0x307,
  AS_VS_DECL_ENABLE_9 = 0x308,
  AS_VS_DECL_STREAM_NUM_9 = 0x309,
  AS_VS_DECL_OFFSET_9 = 0x30A,
  AS_VS_DECL_STRIDE_9 = 0x30B,
  AS_VS_DECL_TYPE_FORMAT_9 = 0x30C,
  AS_VS_DECL_TYPE_DIMENSION_9 = 0x30D,
  AS_VS_DECL_TYPE_SIGNED_9 = 0x30E,
  AS_VS_DECL_TYPE_NORMALIZE_9 = 0x30F,
  AS_VS_DECL_USAGE_9 = 0x310,
  AS_VS_DECL_STREAM_FREQ_9 = 0x311,
  AS_VS_DECL_ENABLE_10 = 0x312,
  AS_VS_DECL_STREAM_NUM_10 = 0x313,
  AS_VS_DECL_OFFSET_10 = 0x314,
  AS_VS_DECL_STRIDE_10 = 0x315,
  AS_VS_DECL_TYPE_FORMAT_10 = 0x316,
  AS_VS_DECL_TYPE_DIMENSION_10 = 0x317,
  AS_VS_DECL_TYPE_SIGNED_10 = 0x318,
  AS_VS_DECL_TYPE_NORMALIZE_10 = 0x319,
  AS_VS_DECL_USAGE_10 = 0x31A,
  AS_VS_DECL_STREAM_FREQ_10 = 0x31B,
  AS_VS_DECL_ENABLE_11 = 0x31C,
  AS_VS_DECL_STREAM_NUM_11 = 0x31D,
  AS_VS_DECL_OFFSET_11 = 0x31E,
  AS_VS_DECL_STRIDE_11 = 0x31F,
  AS_VS_DECL_TYPE_FORMAT_11 = 0x320,
  AS_VS_DECL_TYPE_DIMENSION_11 = 0x321,
  AS_VS_DECL_TYPE_SIGNED_11 = 0x322,
  AS_VS_DECL_TYPE_NORMALIZE_11 = 0x323,
  AS_VS_DECL_USAGE_11 = 0x324,
  AS_VS_DECL_STREAM_FREQ_11 = 0x325,
  AS_VS_DECL_ENABLE_12 = 0x326,
  AS_VS_DECL_STREAM_NUM_12 = 0x327,
  AS_VS_DECL_OFFSET_12 = 0x328,
  AS_VS_DECL_STRIDE_12 = 0x329,
  AS_VS_DECL_TYPE_FORMAT_12 = 0x32A,
  AS_VS_DECL_TYPE_DIMENSION_12 = 0x32B,
  AS_VS_DECL_TYPE_SIGNED_12 = 0x32C,
  AS_VS_DECL_TYPE_NORMALIZE_12 = 0x32D,
  AS_VS_DECL_USAGE_12 = 0x32E,
  AS_VS_DECL_STREAM_FREQ_12 = 0x32F,
  AS_VS_DECL_ENABLE_13 = 0x330,
  AS_VS_DECL_STREAM_NUM_13 = 0x331,
  AS_VS_DECL_OFFSET_13 = 0x332,
  AS_VS_DECL_STRIDE_13 = 0x333,
  AS_VS_DECL_TYPE_FORMAT_13 = 0x334,
  AS_VS_DECL_TYPE_DIMENSION_13 = 0x335,
  AS_VS_DECL_TYPE_SIGNED_13 = 0x336,
  AS_VS_DECL_TYPE_NORMALIZE_13 = 0x337,
  AS_VS_DECL_USAGE_13 = 0x338,
  AS_VS_DECL_STREAM_FREQ_13 = 0x339,
  AS_VS_DECL_ENABLE_14 = 0x33A,
  AS_VS_DECL_STREAM_NUM_14 = 0x33B,
  AS_VS_DECL_OFFSET_14 = 0x33C,
  AS_VS_DECL_STRIDE_14 = 0x33D,
  AS_VS_DECL_TYPE_FORMAT_14 = 0x33E,
  AS_VS_DECL_TYPE_DIMENSION_14 = 0x33F,
  AS_VS_DECL_TYPE_SIGNED_14 = 0x340,
  AS_VS_DECL_TYPE_NORMALIZE_14 = 0x341,
  AS_VS_DECL_USAGE_14 = 0x342,
  AS_VS_DECL_STREAM_FREQ_14 = 0x343,
  AS_VS_DECL_ENABLE_15 = 0x344,
  AS_VS_DECL_STREAM_NUM_15 = 0x345,
  AS_VS_DECL_OFFSET_15 = 0x346,
  AS_VS_DECL_STRIDE_15 = 0x347,
  AS_VS_DECL_TYPE_FORMAT_15 = 0x348,
  AS_VS_DECL_TYPE_DIMENSION_15 = 0x349,
  AS_VS_DECL_TYPE_SIGNED_15 = 0x34A,
  AS_VS_DECL_TYPE_NORMALIZE_15 = 0x34B,
  AS_VS_DECL_USAGE_15 = 0x34C,
  AS_VS_DECL_STREAM_FREQ_15 = 0x34D,
  AS_VS_DECL_ENABLE_16 = 0x34E,
  AS_VS_DECL_STREAM_NUM_16 = 0x34F,
  AS_VS_DECL_OFFSET_16 = 0x350,
  AS_VS_DECL_STRIDE_16 = 0x351,
  AS_VS_DECL_TYPE_FORMAT_16 = 0x352,
  AS_VS_DECL_TYPE_DIMENSION_16 = 0x353,
  AS_VS_DECL_TYPE_SIGNED_16 = 0x354,
  AS_VS_DECL_TYPE_NORMALIZE_16 = 0x355,
  AS_VS_DECL_USAGE_16 = 0x356,
  AS_VS_DECL_STREAM_FREQ_16 = 0x357,
  AS_VS_DECL_ENABLE_17 = 0x358,
  AS_VS_DECL_STREAM_NUM_17 = 0x359,
  AS_VS_DECL_OFFSET_17 = 0x35A,
  AS_VS_DECL_STRIDE_17 = 0x35B,
  AS_VS_DECL_TYPE_FORMAT_17 = 0x35C,
  AS_VS_DECL_TYPE_DIMENSION_17 = 0x35D,
  AS_VS_DECL_TYPE_SIGNED_17 = 0x35E,
  AS_VS_DECL_TYPE_NORMALIZE_17 = 0x35F,
  AS_VS_DECL_USAGE_17 = 0x360,
  AS_VS_DECL_STREAM_FREQ_17 = 0x361,
  AS_VS_DECL_ENABLE_18 = 0x362,
  AS_VS_DECL_STREAM_NUM_18 = 0x363,
  AS_VS_DECL_OFFSET_18 = 0x364,
  AS_VS_DECL_STRIDE_18 = 0x365,
  AS_VS_DECL_TYPE_FORMAT_18 = 0x366,
  AS_VS_DECL_TYPE_DIMENSION_18 = 0x367,
  AS_VS_DECL_TYPE_SIGNED_18 = 0x368,
  AS_VS_DECL_TYPE_NORMALIZE_18 = 0x369,
  AS_VS_DECL_USAGE_18 = 0x36A,
  AS_VS_DECL_STREAM_FREQ_18 = 0x36B,
  AS_VS_DECL_ENABLE_19 = 0x36C,
  AS_VS_DECL_STREAM_NUM_19 = 0x36D,
  AS_VS_DECL_OFFSET_19 = 0x36E,
  AS_VS_DECL_STRIDE_19 = 0x36F,
  AS_VS_DECL_TYPE_FORMAT_19 = 0x370,
  AS_VS_DECL_TYPE_DIMENSION_19 = 0x371,
  AS_VS_DECL_TYPE_SIGNED_19 = 0x372,
  AS_VS_DECL_TYPE_NORMALIZE_19 = 0x373,
  AS_VS_DECL_USAGE_19 = 0x374,
  AS_VS_DECL_STREAM_FREQ_19 = 0x375,
  AS_VS_DECL_ENABLE_20 = 0x376,
  AS_VS_DECL_STREAM_NUM_20 = 0x377,
  AS_VS_DECL_OFFSET_20 = 0x378,
  AS_VS_DECL_STRIDE_20 = 0x379,
  AS_VS_DECL_TYPE_FORMAT_20 = 0x37A,
  AS_VS_DECL_TYPE_DIMENSION_20 = 0x37B,
  AS_VS_DECL_TYPE_SIGNED_20 = 0x37C,
  AS_VS_DECL_TYPE_NORMALIZE_20 = 0x37D,
  AS_VS_DECL_USAGE_20 = 0x37E,
  AS_VS_DECL_STREAM_FREQ_20 = 0x37F,
  AS_VS_DECL_ENABLE_21 = 0x380,
  AS_VS_DECL_STREAM_NUM_21 = 0x381,
  AS_VS_DECL_OFFSET_21 = 0x382,
  AS_VS_DECL_STRIDE_21 = 0x383,
  AS_VS_DECL_TYPE_FORMAT_21 = 0x384,
  AS_VS_DECL_TYPE_DIMENSION_21 = 0x385,
  AS_VS_DECL_TYPE_SIGNED_21 = 0x386,
  AS_VS_DECL_TYPE_NORMALIZE_21 = 0x387,
  AS_VS_DECL_USAGE_21 = 0x388,
  AS_VS_DECL_STREAM_FREQ_21 = 0x389,
  AS_VS_DECL_ENABLE_22 = 0x38A,
  AS_VS_DECL_STREAM_NUM_22 = 0x38B,
  AS_VS_DECL_OFFSET_22 = 0x38C,
  AS_VS_DECL_STRIDE_22 = 0x38D,
  AS_VS_DECL_TYPE_FORMAT_22 = 0x38E,
  AS_VS_DECL_TYPE_DIMENSION_22 = 0x38F,
  AS_VS_DECL_TYPE_SIGNED_22 = 0x390,
  AS_VS_DECL_TYPE_NORMALIZE_22 = 0x391,
  AS_VS_DECL_USAGE_22 = 0x392,
  AS_VS_DECL_STREAM_FREQ_22 = 0x393,
  AS_VS_DECL_ENABLE_23 = 0x394,
  AS_VS_DECL_STREAM_NUM_23 = 0x395,
  AS_VS_DECL_OFFSET_23 = 0x396,
  AS_VS_DECL_STRIDE_23 = 0x397,
  AS_VS_DECL_TYPE_FORMAT_23 = 0x398,
  AS_VS_DECL_TYPE_DIMENSION_23 = 0x399,
  AS_VS_DECL_TYPE_SIGNED_23 = 0x39A,
  AS_VS_DECL_TYPE_NORMALIZE_23 = 0x39B,
  AS_VS_DECL_USAGE_23 = 0x39C,
  AS_VS_DECL_STREAM_FREQ_23 = 0x39D,
  AS_AA_REND_SAMPLE_TABLE_INDEX_0 = 0x3AB,
  AS_AA_REND_SAMPLE_TABLE_INDEX_1 = 0x3AC,
  AS_AA_REND_SAMPLE_TABLE_INDEX_2 = 0x3AD,
  AS_AA_REND_SAMPLE_TABLE_INDEX_3 = 0x3AE,
  AS_AA_REND_SAMPLE_TABLE_INDEX_4 = 0x3AF,
  AS_AA_REND_SAMPLE_TABLE_INDEX_5 = 0x3B0,
  AS_AA_REND_SAMPLE_TABLE_INDEX_6 = 0x3B1,
  AS_AA_REND_SAMPLE_TABLE_INDEX_7 = 0x3B2,
  AS_AA_REND_SAMPLE_TABLE_INDEX_8 = 0x3B3,
  AS_AA_REND_SAMPLE_TABLE_INDEX_9 = 0x3B4,
  AS_AA_REND_SAMPLE_TABLE_INDEX_10 = 0x3B5,
  AS_AA_REND_SAMPLE_TABLE_INDEX_11 = 0x3B6,
  AS_AA_REND_SAMPLE_TABLE_INDEX_12 = 0x3B7,
  AS_AA_REND_SAMPLE_TABLE_INDEX_13 = 0x3B8,
  AS_AA_REND_SAMPLE_TABLE_INDEX_14 = 0x3B9,
  AS_AA_REND_SAMPLE_TABLE_INDEX_15 = 0x3BA,
  AS_CB_WRITEMASK_RED_0 = 0x3EE,
  AS_CB_WRITEMASK_GREEN_0 = 0x3EF,
  AS_CB_WRITEMASK_BLUE_0 = 0x3F0,
  AS_CB_WRITEMASK_ALPHA_0 = 0x3F1,
  AS_CB_WRITEMASK_RED_1 = 0x3F2,
  AS_CB_WRITEMASK_GREEN_1 = 0x3F3,
  AS_CB_WRITEMASK_BLUE_1 = 0x3F4,
  AS_CB_WRITEMASK_ALPHA_1 = 0x3F5,
  AS_CB_WRITEMASK_RED_2 = 0x3F6,
  AS_CB_WRITEMASK_GREEN_2 = 0x3F7,
  AS_CB_WRITEMASK_BLUE_2 = 0x3F8,
  AS_CB_WRITEMASK_ALPHA_2 = 0x3F9,
  AS_CB_WRITEMASK_RED_3 = 0x3FA,
  AS_CB_WRITEMASK_GREEN_3 = 0x3FB,
  AS_CB_WRITEMASK_BLUE_3 = 0x3FC,
  AS_CB_WRITEMASK_ALPHA_3 = 0x3FD,
  AS_VS_STREAM_BASE_0 = 0x3FE,
  AS_VS_STREAM_LIMIT_0 = 0x3FF,
  AS_VS_STREAM_BASE_1 = 0x400,
  AS_VS_STREAM_LIMIT_1 = 0x401,
  AS_VS_STREAM_BASE_2 = 0x402,
  AS_VS_STREAM_LIMIT_2 = 0x403,
  AS_VS_STREAM_BASE_3 = 0x404,
  AS_VS_STREAM_LIMIT_3 = 0x405,
  AS_VS_STREAM_BASE_4 = 0x406,
  AS_VS_STREAM_LIMIT_4 = 0x407,
  AS_VS_STREAM_BASE_5 = 0x408,
  AS_VS_STREAM_LIMIT_5 = 0x409,
  AS_VS_STREAM_BASE_6 = 0x40A,
  AS_VS_STREAM_LIMIT_6 = 0x40B,
  AS_VS_STREAM_BASE_7 = 0x40C,
  AS_VS_STREAM_LIMIT_7 = 0x40D,
  AS_VS_STREAM_BASE_8 = 0x40E,
  AS_VS_STREAM_LIMIT_8 = 0x40F,
  AS_VS_STREAM_BASE_9 = 0x410,
  AS_VS_STREAM_LIMIT_9 = 0x411,
  AS_VS_STREAM_BASE_10 = 0x412,
  AS_VS_STREAM_LIMIT_10 = 0x413,
  AS_VS_STREAM_BASE_11 = 0x414,
  AS_VS_STREAM_LIMIT_11 = 0x415,
  AS_VS_STREAM_BASE_12 = 0x416,
  AS_VS_STREAM_LIMIT_12 = 0x417,
  AS_VS_STREAM_BASE_13 = 0x418,
  AS_VS_STREAM_LIMIT_13 = 0x419,
  AS_VS_STREAM_BASE_14 = 0x41A,
  AS_VS_STREAM_LIMIT_14 = 0x41B,
  AS_VS_STREAM_BASE_15 = 0x41C,
  AS_VS_STREAM_LIMIT_15 = 0x41D,
  AS_VS_STREAM_BASE_16 = 0x41E,
  AS_VS_STREAM_LIMIT_16 = 0x41F,
  AS_VS_STREAM_BASE_17 = 0x420,
  AS_VS_STREAM_LIMIT_17 = 0x421,
  AS_VS_STREAM_BASE_18 = 0x422,
  AS_VS_STREAM_LIMIT_18 = 0x423,
  AS_VS_STREAM_BASE_19 = 0x424,
  AS_VS_STREAM_LIMIT_19 = 0x425,
  AS_VS_STREAM_BASE_20 = 0x426,
  AS_VS_STREAM_LIMIT_20 = 0x427,
  AS_VS_STREAM_BASE_21 = 0x428,
  AS_VS_STREAM_LIMIT_21 = 0x429,
  AS_VS_STREAM_BASE_22 = 0x42A,
  AS_VS_STREAM_LIMIT_22 = 0x42B,
  AS_VS_STREAM_BASE_23 = 0x42C,
  AS_VS_STREAM_LIMIT_23 = 0x42D,
  AS_TEX_ENABLE_0 = 0x42E,
  AS_TEX_BASEADDRESS_0 = 0x42F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_0 = 0x430,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_0 = 0x431,
  AS_TEX_MAG_FILTER_0 = 0x432,
  AS_TEX_MIN_FILTER_0 = 0x433,
  AS_TEX_MIP_FILTER_0 = 0x434,
  AS_TEX_ANISO_FILTER_0 = 0x435,
  AS_TEX_VOL_MAG_FILTER_0 = 0x436,
  AS_TEX_VOL_MIN_FILTER_0 = 0x437,
  AS_TEX_MAX_MIP_LEVEL_0 = 0x438,
  AS_TEX_MIN_MIP_LEVEL_0 = 0x439,
  AS_TEX_LODBIAS_0 = 0x43A,
  AS_TEX_BORDER_SIZE_0 = 0x43B,
  AS_TEX_FORMAT_0 = 0x43C,
  AS_TEX_SURFACE_FMT_0 = 0x43D,
  AS_TEX_SURFACE_NUMERIC_PACKED_0 = 0x43E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_0 = 0x43F,
  AS_TEX_HEAP_0 = 0x440,
  AS_TEX_MIP_CHAIN_ADDRESS_0 = 0x441,
  AS_TEX_SURFACE_WIDTH_0 = 0x442,
  AS_TEX_SURFACE_HEIGHT_0 = 0x443,
  AS_TEX_SURFACE_DEPTH_0 = 0x444,
  AS_TEX_TYPE_0 = 0x445,
  AS_TEX_TILING_ENABLE_0 = 0x446,
  AS_TEX_TRI_JUICE_0 = 0x447,
  AS_TEX_CLAMP_X_0 = 0x448,
  AS_TEX_CLAMP_Y_0 = 0x449,
  AS_TEX_CLAMP_Z_0 = 0x44A,
  AS_TEX_VALUE_NORMALIZATION_0 = 0x44B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_0 = 0x44C,
  AS_TEX_EXP_ADJUST_0 = 0x44D,
  AS_TEX_ENABLE_1 = 0x44E,
  AS_TEX_BASEADDRESS_1 = 0x44F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_1 = 0x450,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_1 = 0x451,
  AS_TEX_MAG_FILTER_1 = 0x452,
  AS_TEX_MIN_FILTER_1 = 0x453,
  AS_TEX_MIP_FILTER_1 = 0x454,
  AS_TEX_ANISO_FILTER_1 = 0x455,
  AS_TEX_VOL_MAG_FILTER_1 = 0x456,
  AS_TEX_VOL_MIN_FILTER_1 = 0x457,
  AS_TEX_MAX_MIP_LEVEL_1 = 0x458,
  AS_TEX_MIN_MIP_LEVEL_1 = 0x459,
  AS_TEX_LODBIAS_1 = 0x45A,
  AS_TEX_BORDER_SIZE_1 = 0x45B,
  AS_TEX_FORMAT_1 = 0x45C,
  AS_TEX_SURFACE_FMT_1 = 0x45D,
  AS_TEX_SURFACE_NUMERIC_PACKED_1 = 0x45E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_1 = 0x45F,
  AS_TEX_HEAP_1 = 0x460,
  AS_TEX_MIP_CHAIN_ADDRESS_1 = 0x461,
  AS_TEX_SURFACE_WIDTH_1 = 0x462,
  AS_TEX_SURFACE_HEIGHT_1 = 0x463,
  AS_TEX_SURFACE_DEPTH_1 = 0x464,
  AS_TEX_TYPE_1 = 0x465,
  AS_TEX_TILING_ENABLE_1 = 0x466,
  AS_TEX_TRI_JUICE_1 = 0x467,
  AS_TEX_CLAMP_X_1 = 0x468,
  AS_TEX_CLAMP_Y_1 = 0x469,
  AS_TEX_CLAMP_Z_1 = 0x46A,
  AS_TEX_VALUE_NORMALIZATION_1 = 0x46B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_1 = 0x46C,
  AS_TEX_EXP_ADJUST_1 = 0x46D,
  AS_TEX_ENABLE_2 = 0x46E,
  AS_TEX_BASEADDRESS_2 = 0x46F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_2 = 0x470,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_2 = 0x471,
  AS_TEX_MAG_FILTER_2 = 0x472,
  AS_TEX_MIN_FILTER_2 = 0x473,
  AS_TEX_MIP_FILTER_2 = 0x474,
  AS_TEX_ANISO_FILTER_2 = 0x475,
  AS_TEX_VOL_MAG_FILTER_2 = 0x476,
  AS_TEX_VOL_MIN_FILTER_2 = 0x477,
  AS_TEX_MAX_MIP_LEVEL_2 = 0x478,
  AS_TEX_MIN_MIP_LEVEL_2 = 0x479,
  AS_TEX_LODBIAS_2 = 0x47A,
  AS_TEX_BORDER_SIZE_2 = 0x47B,
  AS_TEX_FORMAT_2 = 0x47C,
  AS_TEX_SURFACE_FMT_2 = 0x47D,
  AS_TEX_SURFACE_NUMERIC_PACKED_2 = 0x47E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_2 = 0x47F,
  AS_TEX_HEAP_2 = 0x480,
  AS_TEX_MIP_CHAIN_ADDRESS_2 = 0x481,
  AS_TEX_SURFACE_WIDTH_2 = 0x482,
  AS_TEX_SURFACE_HEIGHT_2 = 0x483,
  AS_TEX_SURFACE_DEPTH_2 = 0x484,
  AS_TEX_TYPE_2 = 0x485,
  AS_TEX_TILING_ENABLE_2 = 0x486,
  AS_TEX_TRI_JUICE_2 = 0x487,
  AS_TEX_CLAMP_X_2 = 0x488,
  AS_TEX_CLAMP_Y_2 = 0x489,
  AS_TEX_CLAMP_Z_2 = 0x48A,
  AS_TEX_VALUE_NORMALIZATION_2 = 0x48B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_2 = 0x48C,
  AS_TEX_EXP_ADJUST_2 = 0x48D,
  AS_TEX_ENABLE_3 = 0x48E,
  AS_TEX_BASEADDRESS_3 = 0x48F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_3 = 0x490,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_3 = 0x491,
  AS_TEX_MAG_FILTER_3 = 0x492,
  AS_TEX_MIN_FILTER_3 = 0x493,
  AS_TEX_MIP_FILTER_3 = 0x494,
  AS_TEX_ANISO_FILTER_3 = 0x495,
  AS_TEX_VOL_MAG_FILTER_3 = 0x496,
  AS_TEX_VOL_MIN_FILTER_3 = 0x497,
  AS_TEX_MAX_MIP_LEVEL_3 = 0x498,
  AS_TEX_MIN_MIP_LEVEL_3 = 0x499,
  AS_TEX_LODBIAS_3 = 0x49A,
  AS_TEX_BORDER_SIZE_3 = 0x49B,
  AS_TEX_FORMAT_3 = 0x49C,
  AS_TEX_SURFACE_FMT_3 = 0x49D,
  AS_TEX_SURFACE_NUMERIC_PACKED_3 = 0x49E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_3 = 0x49F,
  AS_TEX_HEAP_3 = 0x4A0,
  AS_TEX_MIP_CHAIN_ADDRESS_3 = 0x4A1,
  AS_TEX_SURFACE_WIDTH_3 = 0x4A2,
  AS_TEX_SURFACE_HEIGHT_3 = 0x4A3,
  AS_TEX_SURFACE_DEPTH_3 = 0x4A4,
  AS_TEX_TYPE_3 = 0x4A5,
  AS_TEX_TILING_ENABLE_3 = 0x4A6,
  AS_TEX_TRI_JUICE_3 = 0x4A7,
  AS_TEX_CLAMP_X_3 = 0x4A8,
  AS_TEX_CLAMP_Y_3 = 0x4A9,
  AS_TEX_CLAMP_Z_3 = 0x4AA,
  AS_TEX_VALUE_NORMALIZATION_3 = 0x4AB,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_3 = 0x4AC,
  AS_TEX_EXP_ADJUST_3 = 0x4AD,
  AS_TEX_ENABLE_4 = 0x4AE,
  AS_TEX_BASEADDRESS_4 = 0x4AF,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_4 = 0x4B0,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_4 = 0x4B1,
  AS_TEX_MAG_FILTER_4 = 0x4B2,
  AS_TEX_MIN_FILTER_4 = 0x4B3,
  AS_TEX_MIP_FILTER_4 = 0x4B4,
  AS_TEX_ANISO_FILTER_4 = 0x4B5,
  AS_TEX_VOL_MAG_FILTER_4 = 0x4B6,
  AS_TEX_VOL_MIN_FILTER_4 = 0x4B7,
  AS_TEX_MAX_MIP_LEVEL_4 = 0x4B8,
  AS_TEX_MIN_MIP_LEVEL_4 = 0x4B9,
  AS_TEX_LODBIAS_4 = 0x4BA,
  AS_TEX_BORDER_SIZE_4 = 0x4BB,
  AS_TEX_FORMAT_4 = 0x4BC,
  AS_TEX_SURFACE_FMT_4 = 0x4BD,
  AS_TEX_SURFACE_NUMERIC_PACKED_4 = 0x4BE,
  AS_TEX_SURFACE_SWIZZLE_PACKED_4 = 0x4BF,
  AS_TEX_HEAP_4 = 0x4C0,
  AS_TEX_MIP_CHAIN_ADDRESS_4 = 0x4C1,
  AS_TEX_SURFACE_WIDTH_4 = 0x4C2,
  AS_TEX_SURFACE_HEIGHT_4 = 0x4C3,
  AS_TEX_SURFACE_DEPTH_4 = 0x4C4,
  AS_TEX_TYPE_4 = 0x4C5,
  AS_TEX_TILING_ENABLE_4 = 0x4C6,
  AS_TEX_TRI_JUICE_4 = 0x4C7,
  AS_TEX_CLAMP_X_4 = 0x4C8,
  AS_TEX_CLAMP_Y_4 = 0x4C9,
  AS_TEX_CLAMP_Z_4 = 0x4CA,
  AS_TEX_VALUE_NORMALIZATION_4 = 0x4CB,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_4 = 0x4CC,
  AS_TEX_EXP_ADJUST_4 = 0x4CD,
  AS_TEX_ENABLE_5 = 0x4CE,
  AS_TEX_BASEADDRESS_5 = 0x4CF,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_5 = 0x4D0,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_5 = 0x4D1,
  AS_TEX_MAG_FILTER_5 = 0x4D2,
  AS_TEX_MIN_FILTER_5 = 0x4D3,
  AS_TEX_MIP_FILTER_5 = 0x4D4,
  AS_TEX_ANISO_FILTER_5 = 0x4D5,
  AS_TEX_VOL_MAG_FILTER_5 = 0x4D6,
  AS_TEX_VOL_MIN_FILTER_5 = 0x4D7,
  AS_TEX_MAX_MIP_LEVEL_5 = 0x4D8,
  AS_TEX_MIN_MIP_LEVEL_5 = 0x4D9,
  AS_TEX_LODBIAS_5 = 0x4DA,
  AS_TEX_BORDER_SIZE_5 = 0x4DB,
  AS_TEX_FORMAT_5 = 0x4DC,
  AS_TEX_SURFACE_FMT_5 = 0x4DD,
  AS_TEX_SURFACE_NUMERIC_PACKED_5 = 0x4DE,
  AS_TEX_SURFACE_SWIZZLE_PACKED_5 = 0x4DF,
  AS_TEX_HEAP_5 = 0x4E0,
  AS_TEX_MIP_CHAIN_ADDRESS_5 = 0x4E1,
  AS_TEX_SURFACE_WIDTH_5 = 0x4E2,
  AS_TEX_SURFACE_HEIGHT_5 = 0x4E3,
  AS_TEX_SURFACE_DEPTH_5 = 0x4E4,
  AS_TEX_TYPE_5 = 0x4E5,
  AS_TEX_TILING_ENABLE_5 = 0x4E6,
  AS_TEX_TRI_JUICE_5 = 0x4E7,
  AS_TEX_CLAMP_X_5 = 0x4E8,
  AS_TEX_CLAMP_Y_5 = 0x4E9,
  AS_TEX_CLAMP_Z_5 = 0x4EA,
  AS_TEX_VALUE_NORMALIZATION_5 = 0x4EB,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_5 = 0x4EC,
  AS_TEX_EXP_ADJUST_5 = 0x4ED,
  AS_TEX_ENABLE_6 = 0x4EE,
  AS_TEX_BASEADDRESS_6 = 0x4EF,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_6 = 0x4F0,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_6 = 0x4F1,
  AS_TEX_MAG_FILTER_6 = 0x4F2,
  AS_TEX_MIN_FILTER_6 = 0x4F3,
  AS_TEX_MIP_FILTER_6 = 0x4F4,
  AS_TEX_ANISO_FILTER_6 = 0x4F5,
  AS_TEX_VOL_MAG_FILTER_6 = 0x4F6,
  AS_TEX_VOL_MIN_FILTER_6 = 0x4F7,
  AS_TEX_MAX_MIP_LEVEL_6 = 0x4F8,
  AS_TEX_MIN_MIP_LEVEL_6 = 0x4F9,
  AS_TEX_LODBIAS_6 = 0x4FA,
  AS_TEX_BORDER_SIZE_6 = 0x4FB,
  AS_TEX_FORMAT_6 = 0x4FC,
  AS_TEX_SURFACE_FMT_6 = 0x4FD,
  AS_TEX_SURFACE_NUMERIC_PACKED_6 = 0x4FE,
  AS_TEX_SURFACE_SWIZZLE_PACKED_6 = 0x4FF,
  AS_TEX_HEAP_6 = 0x500,
  AS_TEX_MIP_CHAIN_ADDRESS_6 = 0x501,
  AS_TEX_SURFACE_WIDTH_6 = 0x502,
  AS_TEX_SURFACE_HEIGHT_6 = 0x503,
  AS_TEX_SURFACE_DEPTH_6 = 0x504,
  AS_TEX_TYPE_6 = 0x505,
  AS_TEX_TILING_ENABLE_6 = 0x506,
  AS_TEX_TRI_JUICE_6 = 0x507,
  AS_TEX_CLAMP_X_6 = 0x508,
  AS_TEX_CLAMP_Y_6 = 0x509,
  AS_TEX_CLAMP_Z_6 = 0x50A,
  AS_TEX_VALUE_NORMALIZATION_6 = 0x50B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_6 = 0x50C,
  AS_TEX_EXP_ADJUST_6 = 0x50D,
  AS_TEX_ENABLE_7 = 0x50E,
  AS_TEX_BASEADDRESS_7 = 0x50F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_7 = 0x510,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_7 = 0x511,
  AS_TEX_MAG_FILTER_7 = 0x512,
  AS_TEX_MIN_FILTER_7 = 0x513,
  AS_TEX_MIP_FILTER_7 = 0x514,
  AS_TEX_ANISO_FILTER_7 = 0x515,
  AS_TEX_VOL_MAG_FILTER_7 = 0x516,
  AS_TEX_VOL_MIN_FILTER_7 = 0x517,
  AS_TEX_MAX_MIP_LEVEL_7 = 0x518,
  AS_TEX_MIN_MIP_LEVEL_7 = 0x519,
  AS_TEX_LODBIAS_7 = 0x51A,
  AS_TEX_BORDER_SIZE_7 = 0x51B,
  AS_TEX_FORMAT_7 = 0x51C,
  AS_TEX_SURFACE_FMT_7 = 0x51D,
  AS_TEX_SURFACE_NUMERIC_PACKED_7 = 0x51E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_7 = 0x51F,
  AS_TEX_HEAP_7 = 0x520,
  AS_TEX_MIP_CHAIN_ADDRESS_7 = 0x521,
  AS_TEX_SURFACE_WIDTH_7 = 0x522,
  AS_TEX_SURFACE_HEIGHT_7 = 0x523,
  AS_TEX_SURFACE_DEPTH_7 = 0x524,
  AS_TEX_TYPE_7 = 0x525,
  AS_TEX_TILING_ENABLE_7 = 0x526,
  AS_TEX_TRI_JUICE_7 = 0x527,
  AS_TEX_CLAMP_X_7 = 0x528,
  AS_TEX_CLAMP_Y_7 = 0x529,
  AS_TEX_CLAMP_Z_7 = 0x52A,
  AS_TEX_VALUE_NORMALIZATION_7 = 0x52B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_7 = 0x52C,
  AS_TEX_EXP_ADJUST_7 = 0x52D,
  AS_TEX_ENABLE_8 = 0x52E,
  AS_TEX_BASEADDRESS_8 = 0x52F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_8 = 0x530,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_8 = 0x531,
  AS_TEX_MAG_FILTER_8 = 0x532,
  AS_TEX_MIN_FILTER_8 = 0x533,
  AS_TEX_MIP_FILTER_8 = 0x534,
  AS_TEX_ANISO_FILTER_8 = 0x535,
  AS_TEX_VOL_MAG_FILTER_8 = 0x536,
  AS_TEX_VOL_MIN_FILTER_8 = 0x537,
  AS_TEX_MAX_MIP_LEVEL_8 = 0x538,
  AS_TEX_MIN_MIP_LEVEL_8 = 0x539,
  AS_TEX_LODBIAS_8 = 0x53A,
  AS_TEX_BORDER_SIZE_8 = 0x53B,
  AS_TEX_FORMAT_8 = 0x53C,
  AS_TEX_SURFACE_FMT_8 = 0x53D,
  AS_TEX_SURFACE_NUMERIC_PACKED_8 = 0x53E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_8 = 0x53F,
  AS_TEX_HEAP_8 = 0x540,
  AS_TEX_MIP_CHAIN_ADDRESS_8 = 0x541,
  AS_TEX_SURFACE_WIDTH_8 = 0x542,
  AS_TEX_SURFACE_HEIGHT_8 = 0x543,
  AS_TEX_SURFACE_DEPTH_8 = 0x544,
  AS_TEX_TYPE_8 = 0x545,
  AS_TEX_TILING_ENABLE_8 = 0x546,
  AS_TEX_TRI_JUICE_8 = 0x547,
  AS_TEX_CLAMP_X_8 = 0x548,
  AS_TEX_CLAMP_Y_8 = 0x549,
  AS_TEX_CLAMP_Z_8 = 0x54A,
  AS_TEX_VALUE_NORMALIZATION_8 = 0x54B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_8 = 0x54C,
  AS_TEX_EXP_ADJUST_8 = 0x54D,
  AS_TEX_ENABLE_9 = 0x54E,
  AS_TEX_BASEADDRESS_9 = 0x54F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_9 = 0x550,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_9 = 0x551,
  AS_TEX_MAG_FILTER_9 = 0x552,
  AS_TEX_MIN_FILTER_9 = 0x553,
  AS_TEX_MIP_FILTER_9 = 0x554,
  AS_TEX_ANISO_FILTER_9 = 0x555,
  AS_TEX_VOL_MAG_FILTER_9 = 0x556,
  AS_TEX_VOL_MIN_FILTER_9 = 0x557,
  AS_TEX_MAX_MIP_LEVEL_9 = 0x558,
  AS_TEX_MIN_MIP_LEVEL_9 = 0x559,
  AS_TEX_LODBIAS_9 = 0x55A,
  AS_TEX_BORDER_SIZE_9 = 0x55B,
  AS_TEX_FORMAT_9 = 0x55C,
  AS_TEX_SURFACE_FMT_9 = 0x55D,
  AS_TEX_SURFACE_NUMERIC_PACKED_9 = 0x55E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_9 = 0x55F,
  AS_TEX_HEAP_9 = 0x560,
  AS_TEX_MIP_CHAIN_ADDRESS_9 = 0x561,
  AS_TEX_SURFACE_WIDTH_9 = 0x562,
  AS_TEX_SURFACE_HEIGHT_9 = 0x563,
  AS_TEX_SURFACE_DEPTH_9 = 0x564,
  AS_TEX_TYPE_9 = 0x565,
  AS_TEX_TILING_ENABLE_9 = 0x566,
  AS_TEX_TRI_JUICE_9 = 0x567,
  AS_TEX_CLAMP_X_9 = 0x568,
  AS_TEX_CLAMP_Y_9 = 0x569,
  AS_TEX_CLAMP_Z_9 = 0x56A,
  AS_TEX_VALUE_NORMALIZATION_9 = 0x56B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_9 = 0x56C,
  AS_TEX_EXP_ADJUST_9 = 0x56D,
  AS_TEX_ENABLE_10 = 0x56E,
  AS_TEX_BASEADDRESS_10 = 0x56F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_10 = 0x570,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_10 = 0x571,
  AS_TEX_MAG_FILTER_10 = 0x572,
  AS_TEX_MIN_FILTER_10 = 0x573,
  AS_TEX_MIP_FILTER_10 = 0x574,
  AS_TEX_ANISO_FILTER_10 = 0x575,
  AS_TEX_VOL_MAG_FILTER_10 = 0x576,
  AS_TEX_VOL_MIN_FILTER_10 = 0x577,
  AS_TEX_MAX_MIP_LEVEL_10 = 0x578,
  AS_TEX_MIN_MIP_LEVEL_10 = 0x579,
  AS_TEX_LODBIAS_10 = 0x57A,
  AS_TEX_BORDER_SIZE_10 = 0x57B,
  AS_TEX_FORMAT_10 = 0x57C,
  AS_TEX_SURFACE_FMT_10 = 0x57D,
  AS_TEX_SURFACE_NUMERIC_PACKED_10 = 0x57E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_10 = 0x57F,
  AS_TEX_HEAP_10 = 0x580,
  AS_TEX_MIP_CHAIN_ADDRESS_10 = 0x581,
  AS_TEX_SURFACE_WIDTH_10 = 0x582,
  AS_TEX_SURFACE_HEIGHT_10 = 0x583,
  AS_TEX_SURFACE_DEPTH_10 = 0x584,
  AS_TEX_TYPE_10 = 0x585,
  AS_TEX_TILING_ENABLE_10 = 0x586,
  AS_TEX_TRI_JUICE_10 = 0x587,
  AS_TEX_CLAMP_X_10 = 0x588,
  AS_TEX_CLAMP_Y_10 = 0x589,
  AS_TEX_CLAMP_Z_10 = 0x58A,
  AS_TEX_VALUE_NORMALIZATION_10 = 0x58B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_10 = 0x58C,
  AS_TEX_EXP_ADJUST_10 = 0x58D,
  AS_TEX_ENABLE_11 = 0x58E,
  AS_TEX_BASEADDRESS_11 = 0x58F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_11 = 0x590,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_11 = 0x591,
  AS_TEX_MAG_FILTER_11 = 0x592,
  AS_TEX_MIN_FILTER_11 = 0x593,
  AS_TEX_MIP_FILTER_11 = 0x594,
  AS_TEX_ANISO_FILTER_11 = 0x595,
  AS_TEX_VOL_MAG_FILTER_11 = 0x596,
  AS_TEX_VOL_MIN_FILTER_11 = 0x597,
  AS_TEX_MAX_MIP_LEVEL_11 = 0x598,
  AS_TEX_MIN_MIP_LEVEL_11 = 0x599,
  AS_TEX_LODBIAS_11 = 0x59A,
  AS_TEX_BORDER_SIZE_11 = 0x59B,
  AS_TEX_FORMAT_11 = 0x59C,
  AS_TEX_SURFACE_FMT_11 = 0x59D,
  AS_TEX_SURFACE_NUMERIC_PACKED_11 = 0x59E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_11 = 0x59F,
  AS_TEX_HEAP_11 = 0x5A0,
  AS_TEX_MIP_CHAIN_ADDRESS_11 = 0x5A1,
  AS_TEX_SURFACE_WIDTH_11 = 0x5A2,
  AS_TEX_SURFACE_HEIGHT_11 = 0x5A3,
  AS_TEX_SURFACE_DEPTH_11 = 0x5A4,
  AS_TEX_TYPE_11 = 0x5A5,
  AS_TEX_TILING_ENABLE_11 = 0x5A6,
  AS_TEX_TRI_JUICE_11 = 0x5A7,
  AS_TEX_CLAMP_X_11 = 0x5A8,
  AS_TEX_CLAMP_Y_11 = 0x5A9,
  AS_TEX_CLAMP_Z_11 = 0x5AA,
  AS_TEX_VALUE_NORMALIZATION_11 = 0x5AB,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_11 = 0x5AC,
  AS_TEX_EXP_ADJUST_11 = 0x5AD,
  AS_TEX_ENABLE_12 = 0x5AE,
  AS_TEX_BASEADDRESS_12 = 0x5AF,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_12 = 0x5B0,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_12 = 0x5B1,
  AS_TEX_MAG_FILTER_12 = 0x5B2,
  AS_TEX_MIN_FILTER_12 = 0x5B3,
  AS_TEX_MIP_FILTER_12 = 0x5B4,
  AS_TEX_ANISO_FILTER_12 = 0x5B5,
  AS_TEX_VOL_MAG_FILTER_12 = 0x5B6,
  AS_TEX_VOL_MIN_FILTER_12 = 0x5B7,
  AS_TEX_MAX_MIP_LEVEL_12 = 0x5B8,
  AS_TEX_MIN_MIP_LEVEL_12 = 0x5B9,
  AS_TEX_LODBIAS_12 = 0x5BA,
  AS_TEX_BORDER_SIZE_12 = 0x5BB,
  AS_TEX_FORMAT_12 = 0x5BC,
  AS_TEX_SURFACE_FMT_12 = 0x5BD,
  AS_TEX_SURFACE_NUMERIC_PACKED_12 = 0x5BE,
  AS_TEX_SURFACE_SWIZZLE_PACKED_12 = 0x5BF,
  AS_TEX_HEAP_12 = 0x5C0,
  AS_TEX_MIP_CHAIN_ADDRESS_12 = 0x5C1,
  AS_TEX_SURFACE_WIDTH_12 = 0x5C2,
  AS_TEX_SURFACE_HEIGHT_12 = 0x5C3,
  AS_TEX_SURFACE_DEPTH_12 = 0x5C4,
  AS_TEX_TYPE_12 = 0x5C5,
  AS_TEX_TILING_ENABLE_12 = 0x5C6,
  AS_TEX_TRI_JUICE_12 = 0x5C7,
  AS_TEX_CLAMP_X_12 = 0x5C8,
  AS_TEX_CLAMP_Y_12 = 0x5C9,
  AS_TEX_CLAMP_Z_12 = 0x5CA,
  AS_TEX_VALUE_NORMALIZATION_12 = 0x5CB,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_12 = 0x5CC,
  AS_TEX_EXP_ADJUST_12 = 0x5CD,
  AS_TEX_ENABLE_13 = 0x5CE,
  AS_TEX_BASEADDRESS_13 = 0x5CF,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_13 = 0x5D0,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_13 = 0x5D1,
  AS_TEX_MAG_FILTER_13 = 0x5D2,
  AS_TEX_MIN_FILTER_13 = 0x5D3,
  AS_TEX_MIP_FILTER_13 = 0x5D4,
  AS_TEX_ANISO_FILTER_13 = 0x5D5,
  AS_TEX_VOL_MAG_FILTER_13 = 0x5D6,
  AS_TEX_VOL_MIN_FILTER_13 = 0x5D7,
  AS_TEX_MAX_MIP_LEVEL_13 = 0x5D8,
  AS_TEX_MIN_MIP_LEVEL_13 = 0x5D9,
  AS_TEX_LODBIAS_13 = 0x5DA,
  AS_TEX_BORDER_SIZE_13 = 0x5DB,
  AS_TEX_FORMAT_13 = 0x5DC,
  AS_TEX_SURFACE_FMT_13 = 0x5DD,
  AS_TEX_SURFACE_NUMERIC_PACKED_13 = 0x5DE,
  AS_TEX_SURFACE_SWIZZLE_PACKED_13 = 0x5DF,
  AS_TEX_HEAP_13 = 0x5E0,
  AS_TEX_MIP_CHAIN_ADDRESS_13 = 0x5E1,
  AS_TEX_SURFACE_WIDTH_13 = 0x5E2,
  AS_TEX_SURFACE_HEIGHT_13 = 0x5E3,
  AS_TEX_SURFACE_DEPTH_13 = 0x5E4,
  AS_TEX_TYPE_13 = 0x5E5,
  AS_TEX_TILING_ENABLE_13 = 0x5E6,
  AS_TEX_TRI_JUICE_13 = 0x5E7,
  AS_TEX_CLAMP_X_13 = 0x5E8,
  AS_TEX_CLAMP_Y_13 = 0x5E9,
  AS_TEX_CLAMP_Z_13 = 0x5EA,
  AS_TEX_VALUE_NORMALIZATION_13 = 0x5EB,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_13 = 0x5EC,
  AS_TEX_EXP_ADJUST_13 = 0x5ED,
  AS_TEX_ENABLE_14 = 0x5EE,
  AS_TEX_BASEADDRESS_14 = 0x5EF,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_14 = 0x5F0,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_14 = 0x5F1,
  AS_TEX_MAG_FILTER_14 = 0x5F2,
  AS_TEX_MIN_FILTER_14 = 0x5F3,
  AS_TEX_MIP_FILTER_14 = 0x5F4,
  AS_TEX_ANISO_FILTER_14 = 0x5F5,
  AS_TEX_VOL_MAG_FILTER_14 = 0x5F6,
  AS_TEX_VOL_MIN_FILTER_14 = 0x5F7,
  AS_TEX_MAX_MIP_LEVEL_14 = 0x5F8,
  AS_TEX_MIN_MIP_LEVEL_14 = 0x5F9,
  AS_TEX_LODBIAS_14 = 0x5FA,
  AS_TEX_BORDER_SIZE_14 = 0x5FB,
  AS_TEX_FORMAT_14 = 0x5FC,
  AS_TEX_SURFACE_FMT_14 = 0x5FD,
  AS_TEX_SURFACE_NUMERIC_PACKED_14 = 0x5FE,
  AS_TEX_SURFACE_SWIZZLE_PACKED_14 = 0x5FF,
  AS_TEX_HEAP_14 = 0x600,
  AS_TEX_MIP_CHAIN_ADDRESS_14 = 0x601,
  AS_TEX_SURFACE_WIDTH_14 = 0x602,
  AS_TEX_SURFACE_HEIGHT_14 = 0x603,
  AS_TEX_SURFACE_DEPTH_14 = 0x604,
  AS_TEX_TYPE_14 = 0x605,
  AS_TEX_TILING_ENABLE_14 = 0x606,
  AS_TEX_TRI_JUICE_14 = 0x607,
  AS_TEX_CLAMP_X_14 = 0x608,
  AS_TEX_CLAMP_Y_14 = 0x609,
  AS_TEX_CLAMP_Z_14 = 0x60A,
  AS_TEX_VALUE_NORMALIZATION_14 = 0x60B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_14 = 0x60C,
  AS_TEX_EXP_ADJUST_14 = 0x60D,
  AS_TEX_ENABLE_15 = 0x60E,
  AS_TEX_BASEADDRESS_15 = 0x60F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_15 = 0x610,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_15 = 0x611,
  AS_TEX_MAG_FILTER_15 = 0x612,
  AS_TEX_MIN_FILTER_15 = 0x613,
  AS_TEX_MIP_FILTER_15 = 0x614,
  AS_TEX_ANISO_FILTER_15 = 0x615,
  AS_TEX_VOL_MAG_FILTER_15 = 0x616,
  AS_TEX_VOL_MIN_FILTER_15 = 0x617,
  AS_TEX_MAX_MIP_LEVEL_15 = 0x618,
  AS_TEX_MIN_MIP_LEVEL_15 = 0x619,
  AS_TEX_LODBIAS_15 = 0x61A,
  AS_TEX_BORDER_SIZE_15 = 0x61B,
  AS_TEX_FORMAT_15 = 0x61C,
  AS_TEX_SURFACE_FMT_15 = 0x61D,
  AS_TEX_SURFACE_NUMERIC_PACKED_15 = 0x61E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_15 = 0x61F,
  AS_TEX_HEAP_15 = 0x620,
  AS_TEX_MIP_CHAIN_ADDRESS_15 = 0x621,
  AS_TEX_SURFACE_WIDTH_15 = 0x622,
  AS_TEX_SURFACE_HEIGHT_15 = 0x623,
  AS_TEX_SURFACE_DEPTH_15 = 0x624,
  AS_TEX_TYPE_15 = 0x625,
  AS_TEX_TILING_ENABLE_15 = 0x626,
  AS_TEX_TRI_JUICE_15 = 0x627,
  AS_TEX_CLAMP_X_15 = 0x628,
  AS_TEX_CLAMP_Y_15 = 0x629,
  AS_TEX_CLAMP_Z_15 = 0x62A,
  AS_TEX_VALUE_NORMALIZATION_15 = 0x62B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_15 = 0x62C,
  AS_TEX_EXP_ADJUST_15 = 0x62D,
  AS_TEX_ENABLE_16 = 0x62E,
  AS_TEX_BASEADDRESS_16 = 0x62F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_16 = 0x630,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_16 = 0x631,
  AS_TEX_MAG_FILTER_16 = 0x632,
  AS_TEX_MIN_FILTER_16 = 0x633,
  AS_TEX_MIP_FILTER_16 = 0x634,
  AS_TEX_ANISO_FILTER_16 = 0x635,
  AS_TEX_VOL_MAG_FILTER_16 = 0x636,
  AS_TEX_VOL_MIN_FILTER_16 = 0x637,
  AS_TEX_MAX_MIP_LEVEL_16 = 0x638,
  AS_TEX_MIN_MIP_LEVEL_16 = 0x639,
  AS_TEX_LODBIAS_16 = 0x63A,
  AS_TEX_BORDER_SIZE_16 = 0x63B,
  AS_TEX_FORMAT_16 = 0x63C,
  AS_TEX_SURFACE_FMT_16 = 0x63D,
  AS_TEX_SURFACE_NUMERIC_PACKED_16 = 0x63E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_16 = 0x63F,
  AS_TEX_HEAP_16 = 0x640,
  AS_TEX_MIP_CHAIN_ADDRESS_16 = 0x641,
  AS_TEX_SURFACE_WIDTH_16 = 0x642,
  AS_TEX_SURFACE_HEIGHT_16 = 0x643,
  AS_TEX_SURFACE_DEPTH_16 = 0x644,
  AS_TEX_TYPE_16 = 0x645,
  AS_TEX_TILING_ENABLE_16 = 0x646,
  AS_TEX_TRI_JUICE_16 = 0x647,
  AS_TEX_CLAMP_X_16 = 0x648,
  AS_TEX_CLAMP_Y_16 = 0x649,
  AS_TEX_CLAMP_Z_16 = 0x64A,
  AS_TEX_VALUE_NORMALIZATION_16 = 0x64B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_16 = 0x64C,
  AS_TEX_EXP_ADJUST_16 = 0x64D,
  AS_TEX_ENABLE_17 = 0x64E,
  AS_TEX_BASEADDRESS_17 = 0x64F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_17 = 0x650,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_17 = 0x651,
  AS_TEX_MAG_FILTER_17 = 0x652,
  AS_TEX_MIN_FILTER_17 = 0x653,
  AS_TEX_MIP_FILTER_17 = 0x654,
  AS_TEX_ANISO_FILTER_17 = 0x655,
  AS_TEX_VOL_MAG_FILTER_17 = 0x656,
  AS_TEX_VOL_MIN_FILTER_17 = 0x657,
  AS_TEX_MAX_MIP_LEVEL_17 = 0x658,
  AS_TEX_MIN_MIP_LEVEL_17 = 0x659,
  AS_TEX_LODBIAS_17 = 0x65A,
  AS_TEX_BORDER_SIZE_17 = 0x65B,
  AS_TEX_FORMAT_17 = 0x65C,
  AS_TEX_SURFACE_FMT_17 = 0x65D,
  AS_TEX_SURFACE_NUMERIC_PACKED_17 = 0x65E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_17 = 0x65F,
  AS_TEX_HEAP_17 = 0x660,
  AS_TEX_MIP_CHAIN_ADDRESS_17 = 0x661,
  AS_TEX_SURFACE_WIDTH_17 = 0x662,
  AS_TEX_SURFACE_HEIGHT_17 = 0x663,
  AS_TEX_SURFACE_DEPTH_17 = 0x664,
  AS_TEX_TYPE_17 = 0x665,
  AS_TEX_TILING_ENABLE_17 = 0x666,
  AS_TEX_TRI_JUICE_17 = 0x667,
  AS_TEX_CLAMP_X_17 = 0x668,
  AS_TEX_CLAMP_Y_17 = 0x669,
  AS_TEX_CLAMP_Z_17 = 0x66A,
  AS_TEX_VALUE_NORMALIZATION_17 = 0x66B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_17 = 0x66C,
  AS_TEX_EXP_ADJUST_17 = 0x66D,
  AS_TEX_ENABLE_18 = 0x66E,
  AS_TEX_BASEADDRESS_18 = 0x66F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_18 = 0x670,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_18 = 0x671,
  AS_TEX_MAG_FILTER_18 = 0x672,
  AS_TEX_MIN_FILTER_18 = 0x673,
  AS_TEX_MIP_FILTER_18 = 0x674,
  AS_TEX_ANISO_FILTER_18 = 0x675,
  AS_TEX_VOL_MAG_FILTER_18 = 0x676,
  AS_TEX_VOL_MIN_FILTER_18 = 0x677,
  AS_TEX_MAX_MIP_LEVEL_18 = 0x678,
  AS_TEX_MIN_MIP_LEVEL_18 = 0x679,
  AS_TEX_LODBIAS_18 = 0x67A,
  AS_TEX_BORDER_SIZE_18 = 0x67B,
  AS_TEX_FORMAT_18 = 0x67C,
  AS_TEX_SURFACE_FMT_18 = 0x67D,
  AS_TEX_SURFACE_NUMERIC_PACKED_18 = 0x67E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_18 = 0x67F,
  AS_TEX_HEAP_18 = 0x680,
  AS_TEX_MIP_CHAIN_ADDRESS_18 = 0x681,
  AS_TEX_SURFACE_WIDTH_18 = 0x682,
  AS_TEX_SURFACE_HEIGHT_18 = 0x683,
  AS_TEX_SURFACE_DEPTH_18 = 0x684,
  AS_TEX_TYPE_18 = 0x685,
  AS_TEX_TILING_ENABLE_18 = 0x686,
  AS_TEX_TRI_JUICE_18 = 0x687,
  AS_TEX_CLAMP_X_18 = 0x688,
  AS_TEX_CLAMP_Y_18 = 0x689,
  AS_TEX_CLAMP_Z_18 = 0x68A,
  AS_TEX_VALUE_NORMALIZATION_18 = 0x68B,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_18 = 0x68C,
  AS_TEX_EXP_ADJUST_18 = 0x68D,
  AS_TEX_ENABLE_19 = 0x68E,
  AS_TEX_BASEADDRESS_19 = 0x68F,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_19 = 0x690,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_19 = 0x691,
  AS_TEX_MAG_FILTER_19 = 0x692,
  AS_TEX_MIN_FILTER_19 = 0x693,
  AS_TEX_MIP_FILTER_19 = 0x694,
  AS_TEX_ANISO_FILTER_19 = 0x695,
  AS_TEX_VOL_MAG_FILTER_19 = 0x696,
  AS_TEX_VOL_MIN_FILTER_19 = 0x697,
  AS_TEX_MAX_MIP_LEVEL_19 = 0x698,
  AS_TEX_MIN_MIP_LEVEL_19 = 0x699,
  AS_TEX_LODBIAS_19 = 0x69A,
  AS_TEX_BORDER_SIZE_19 = 0x69B,
  AS_TEX_FORMAT_19 = 0x69C,
  AS_TEX_SURFACE_FMT_19 = 0x69D,
  AS_TEX_SURFACE_NUMERIC_PACKED_19 = 0x69E,
  AS_TEX_SURFACE_SWIZZLE_PACKED_19 = 0x69F,
  AS_TEX_HEAP_19 = 0x6A0,
  AS_TEX_MIP_CHAIN_ADDRESS_19 = 0x6A1,
  AS_TEX_SURFACE_WIDTH_19 = 0x6A2,
  AS_TEX_SURFACE_HEIGHT_19 = 0x6A3,
  AS_TEX_SURFACE_DEPTH_19 = 0x6A4,
  AS_TEX_TYPE_19 = 0x6A5,
  AS_TEX_TILING_ENABLE_19 = 0x6A6,
  AS_TEX_TRI_JUICE_19 = 0x6A7,
  AS_TEX_CLAMP_X_19 = 0x6A8,
  AS_TEX_CLAMP_Y_19 = 0x6A9,
  AS_TEX_CLAMP_Z_19 = 0x6AA,
  AS_TEX_VALUE_NORMALIZATION_19 = 0x6AB,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_19 = 0x6AC,
  AS_TEX_EXP_ADJUST_19 = 0x6AD,
  AS_TEX_ENABLE_20 = 0x6AE,
  AS_TEX_BASEADDRESS_20 = 0x6AF,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_20 = 0x6B0,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_20 = 0x6B1,
  AS_TEX_MAG_FILTER_20 = 0x6B2,
  AS_TEX_MIN_FILTER_20 = 0x6B3,
  AS_TEX_MIP_FILTER_20 = 0x6B4,
  AS_TEX_ANISO_FILTER_20 = 0x6B5,
  AS_TEX_VOL_MAG_FILTER_20 = 0x6B6,
  AS_TEX_VOL_MIN_FILTER_20 = 0x6B7,
  AS_TEX_MAX_MIP_LEVEL_20 = 0x6B8,
  AS_TEX_MIN_MIP_LEVEL_20 = 0x6B9,
  AS_TEX_LODBIAS_20 = 0x6BA,
  AS_TEX_BORDER_SIZE_20 = 0x6BB,
  AS_TEX_FORMAT_20 = 0x6BC,
  AS_TEX_SURFACE_FMT_20 = 0x6BD,
  AS_TEX_SURFACE_NUMERIC_PACKED_20 = 0x6BE,
  AS_TEX_SURFACE_SWIZZLE_PACKED_20 = 0x6BF,
  AS_TEX_HEAP_20 = 0x6C0,
  AS_TEX_MIP_CHAIN_ADDRESS_20 = 0x6C1,
  AS_TEX_SURFACE_WIDTH_20 = 0x6C2,
  AS_TEX_SURFACE_HEIGHT_20 = 0x6C3,
  AS_TEX_SURFACE_DEPTH_20 = 0x6C4,
  AS_TEX_TYPE_20 = 0x6C5,
  AS_TEX_TILING_ENABLE_20 = 0x6C6,
  AS_TEX_TRI_JUICE_20 = 0x6C7,
  AS_TEX_CLAMP_X_20 = 0x6C8,
  AS_TEX_CLAMP_Y_20 = 0x6C9,
  AS_TEX_CLAMP_Z_20 = 0x6CA,
  AS_TEX_VALUE_NORMALIZATION_20 = 0x6CB,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_20 = 0x6CC,
  AS_TEX_EXP_ADJUST_20 = 0x6CD,
  AS_VS_EXPORT_STREAM_ENABLE_0 = 0x6CE,
  AS_VS_EXPORT_STREAM_BASE_0 = 0x6CF,
  AS_VS_EXPORT_STREAM_MAX_INDEX_0 = 0x6D0,
  AS_VS_EXPORT_STREAM_FORMAT_0 = 0x6D1,
  AS_VS_EXPORT_STREAM_DIMENSION_0 = 0x6D2,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_0 = 0x6D3,
  AS_VS_EXPORT_STREAM_STRIDE_0 = 0x6D4,
  AS_VS_EXPORT_STREAM_ENABLE_1 = 0x6D5,
  AS_VS_EXPORT_STREAM_BASE_1 = 0x6D6,
  AS_VS_EXPORT_STREAM_MAX_INDEX_1 = 0x6D7,
  AS_VS_EXPORT_STREAM_FORMAT_1 = 0x6D8,
  AS_VS_EXPORT_STREAM_DIMENSION_1 = 0x6D9,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_1 = 0x6DA,
  AS_VS_EXPORT_STREAM_STRIDE_1 = 0x6DB,
  AS_VS_EXPORT_STREAM_ENABLE_2 = 0x6DC,
  AS_VS_EXPORT_STREAM_BASE_2 = 0x6DD,
  AS_VS_EXPORT_STREAM_MAX_INDEX_2 = 0x6DE,
  AS_VS_EXPORT_STREAM_FORMAT_2 = 0x6DF,
  AS_VS_EXPORT_STREAM_DIMENSION_2 = 0x6E0,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_2 = 0x6E1,
  AS_VS_EXPORT_STREAM_STRIDE_2 = 0x6E2,
  AS_VS_EXPORT_STREAM_ENABLE_3 = 0x6E3,
  AS_VS_EXPORT_STREAM_BASE_3 = 0x6E4,
  AS_VS_EXPORT_STREAM_MAX_INDEX_3 = 0x6E5,
  AS_VS_EXPORT_STREAM_FORMAT_3 = 0x6E6,
  AS_VS_EXPORT_STREAM_DIMENSION_3 = 0x6E7,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_3 = 0x6E8,
  AS_VS_EXPORT_STREAM_STRIDE_3 = 0x6E9,
  AS_VS_EXPORT_STREAM_ENABLE_4 = 0x6EA,
  AS_VS_EXPORT_STREAM_BASE_4 = 0x6EB,
  AS_VS_EXPORT_STREAM_MAX_INDEX_4 = 0x6EC,
  AS_VS_EXPORT_STREAM_FORMAT_4 = 0x6ED,
  AS_VS_EXPORT_STREAM_DIMENSION_4 = 0x6EE,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_4 = 0x6EF,
  AS_VS_EXPORT_STREAM_STRIDE_4 = 0x6F0,
  AS_VS_EXPORT_STREAM_ENABLE_5 = 0x6F1,
  AS_VS_EXPORT_STREAM_BASE_5 = 0x6F2,
  AS_VS_EXPORT_STREAM_MAX_INDEX_5 = 0x6F3,
  AS_VS_EXPORT_STREAM_FORMAT_5 = 0x6F4,
  AS_VS_EXPORT_STREAM_DIMENSION_5 = 0x6F5,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_5 = 0x6F6,
  AS_VS_EXPORT_STREAM_STRIDE_5 = 0x6F7,
  AS_VS_EXPORT_STREAM_ENABLE_6 = 0x6F8,
  AS_VS_EXPORT_STREAM_BASE_6 = 0x6F9,
  AS_VS_EXPORT_STREAM_MAX_INDEX_6 = 0x6FA,
  AS_VS_EXPORT_STREAM_FORMAT_6 = 0x6FB,
  AS_VS_EXPORT_STREAM_DIMENSION_6 = 0x6FC,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_6 = 0x6FD,
  AS_VS_EXPORT_STREAM_STRIDE_6 = 0x6FE,
  AS_VS_EXPORT_STREAM_ENABLE_7 = 0x6FF,
  AS_VS_EXPORT_STREAM_BASE_7 = 0x700,
  AS_VS_EXPORT_STREAM_MAX_INDEX_7 = 0x701,
  AS_VS_EXPORT_STREAM_FORMAT_7 = 0x702,
  AS_VS_EXPORT_STREAM_DIMENSION_7 = 0x703,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_7 = 0x704,
  AS_VS_EXPORT_STREAM_STRIDE_7 = 0x705,
  AS_VS_EXPORT_STREAM_ENABLE_8 = 0x706,
  AS_VS_EXPORT_STREAM_BASE_8 = 0x707,
  AS_VS_EXPORT_STREAM_MAX_INDEX_8 = 0x708,
  AS_VS_EXPORT_STREAM_FORMAT_8 = 0x709,
  AS_VS_EXPORT_STREAM_DIMENSION_8 = 0x70A,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_8 = 0x70B,
  AS_VS_EXPORT_STREAM_STRIDE_8 = 0x70C,
  AS_VS_EXPORT_STREAM_ENABLE_9 = 0x70D,
  AS_VS_EXPORT_STREAM_BASE_9 = 0x70E,
  AS_VS_EXPORT_STREAM_MAX_INDEX_9 = 0x70F,
  AS_VS_EXPORT_STREAM_FORMAT_9 = 0x710,
  AS_VS_EXPORT_STREAM_DIMENSION_9 = 0x711,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_9 = 0x712,
  AS_VS_EXPORT_STREAM_STRIDE_9 = 0x713,
  AS_VS_EXPORT_STREAM_ENABLE_10 = 0x714,
  AS_VS_EXPORT_STREAM_BASE_10 = 0x715,
  AS_VS_EXPORT_STREAM_MAX_INDEX_10 = 0x716,
  AS_VS_EXPORT_STREAM_FORMAT_10 = 0x717,
  AS_VS_EXPORT_STREAM_DIMENSION_10 = 0x718,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_10 = 0x719,
  AS_VS_EXPORT_STREAM_STRIDE_10 = 0x71A,
  AS_VS_EXPORT_STREAM_ENABLE_11 = 0x71B,
  AS_VS_EXPORT_STREAM_BASE_11 = 0x71C,
  AS_VS_EXPORT_STREAM_MAX_INDEX_11 = 0x71D,
  AS_VS_EXPORT_STREAM_FORMAT_11 = 0x71E,
  AS_VS_EXPORT_STREAM_DIMENSION_11 = 0x71F,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_11 = 0x720,
  AS_VS_EXPORT_STREAM_STRIDE_11 = 0x721,
  AS_VS_EXPORT_STREAM_ENABLE_12 = 0x722,
  AS_VS_EXPORT_STREAM_BASE_12 = 0x723,
  AS_VS_EXPORT_STREAM_MAX_INDEX_12 = 0x724,
  AS_VS_EXPORT_STREAM_FORMAT_12 = 0x725,
  AS_VS_EXPORT_STREAM_DIMENSION_12 = 0x726,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_12 = 0x727,
  AS_VS_EXPORT_STREAM_STRIDE_12 = 0x728,
  AS_VS_EXPORT_STREAM_ENABLE_13 = 0x729,
  AS_VS_EXPORT_STREAM_BASE_13 = 0x72A,
  AS_VS_EXPORT_STREAM_MAX_INDEX_13 = 0x72B,
  AS_VS_EXPORT_STREAM_FORMAT_13 = 0x72C,
  AS_VS_EXPORT_STREAM_DIMENSION_13 = 0x72D,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_13 = 0x72E,
  AS_VS_EXPORT_STREAM_STRIDE_13 = 0x72F,
  AS_VS_EXPORT_STREAM_ENABLE_14 = 0x730,
  AS_VS_EXPORT_STREAM_BASE_14 = 0x731,
  AS_VS_EXPORT_STREAM_MAX_INDEX_14 = 0x732,
  AS_VS_EXPORT_STREAM_FORMAT_14 = 0x733,
  AS_VS_EXPORT_STREAM_DIMENSION_14 = 0x734,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_14 = 0x735,
  AS_VS_EXPORT_STREAM_STRIDE_14 = 0x736,
  AS_VS_EXPORT_STREAM_ENABLE_15 = 0x737,
  AS_VS_EXPORT_STREAM_BASE_15 = 0x738,
  AS_VS_EXPORT_STREAM_MAX_INDEX_15 = 0x739,
  AS_VS_EXPORT_STREAM_FORMAT_15 = 0x73A,
  AS_VS_EXPORT_STREAM_DIMENSION_15 = 0x73B,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_15 = 0x73C,
  AS_VS_EXPORT_STREAM_STRIDE_15 = 0x73D,
  AS_PS_EXPORT_STREAM_ENABLE_0 = 0x73E,
  AS_PS_EXPORT_STREAM_BASE_0 = 0x73F,
  AS_PS_EXPORT_STREAM_MAX_INDEX_0 = 0x740,
  AS_PS_EXPORT_STREAM_FORMAT_0 = 0x741,
  AS_PS_EXPORT_STREAM_DIMENSION_0 = 0x742,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_0 = 0x743,
  AS_PS_EXPORT_STREAM_STRIDE_0 = 0x744,
  AS_PS_EXPORT_STREAM_ENABLE_1 = 0x745,
  AS_PS_EXPORT_STREAM_BASE_1 = 0x746,
  AS_PS_EXPORT_STREAM_MAX_INDEX_1 = 0x747,
  AS_PS_EXPORT_STREAM_FORMAT_1 = 0x748,
  AS_PS_EXPORT_STREAM_DIMENSION_1 = 0x749,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_1 = 0x74A,
  AS_PS_EXPORT_STREAM_STRIDE_1 = 0x74B,
  AS_PS_EXPORT_STREAM_ENABLE_2 = 0x74C,
  AS_PS_EXPORT_STREAM_BASE_2 = 0x74D,
  AS_PS_EXPORT_STREAM_MAX_INDEX_2 = 0x74E,
  AS_PS_EXPORT_STREAM_FORMAT_2 = 0x74F,
  AS_PS_EXPORT_STREAM_DIMENSION_2 = 0x750,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_2 = 0x751,
  AS_PS_EXPORT_STREAM_STRIDE_2 = 0x752,
  AS_PS_EXPORT_STREAM_ENABLE_3 = 0x753,
  AS_PS_EXPORT_STREAM_BASE_3 = 0x754,
  AS_PS_EXPORT_STREAM_MAX_INDEX_3 = 0x755,
  AS_PS_EXPORT_STREAM_FORMAT_3 = 0x756,
  AS_PS_EXPORT_STREAM_DIMENSION_3 = 0x757,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_3 = 0x758,
  AS_PS_EXPORT_STREAM_STRIDE_3 = 0x759,
  AS_PS_EXPORT_STREAM_ENABLE_4 = 0x75A,
  AS_PS_EXPORT_STREAM_BASE_4 = 0x75B,
  AS_PS_EXPORT_STREAM_MAX_INDEX_4 = 0x75C,
  AS_PS_EXPORT_STREAM_FORMAT_4 = 0x75D,
  AS_PS_EXPORT_STREAM_DIMENSION_4 = 0x75E,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_4 = 0x75F,
  AS_PS_EXPORT_STREAM_STRIDE_4 = 0x760,
  AS_PS_EXPORT_STREAM_ENABLE_5 = 0x761,
  AS_PS_EXPORT_STREAM_BASE_5 = 0x762,
  AS_PS_EXPORT_STREAM_MAX_INDEX_5 = 0x763,
  AS_PS_EXPORT_STREAM_FORMAT_5 = 0x764,
  AS_PS_EXPORT_STREAM_DIMENSION_5 = 0x765,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_5 = 0x766,
  AS_PS_EXPORT_STREAM_STRIDE_5 = 0x767,
  AS_PS_EXPORT_STREAM_ENABLE_6 = 0x768,
  AS_PS_EXPORT_STREAM_BASE_6 = 0x769,
  AS_PS_EXPORT_STREAM_MAX_INDEX_6 = 0x76A,
  AS_PS_EXPORT_STREAM_FORMAT_6 = 0x76B,
  AS_PS_EXPORT_STREAM_DIMENSION_6 = 0x76C,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_6 = 0x76D,
  AS_PS_EXPORT_STREAM_STRIDE_6 = 0x76E,
  AS_PS_EXPORT_STREAM_ENABLE_7 = 0x76F,
  AS_PS_EXPORT_STREAM_BASE_7 = 0x770,
  AS_PS_EXPORT_STREAM_MAX_INDEX_7 = 0x771,
  AS_PS_EXPORT_STREAM_FORMAT_7 = 0x772,
  AS_PS_EXPORT_STREAM_DIMENSION_7 = 0x773,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_7 = 0x774,
  AS_PS_EXPORT_STREAM_STRIDE_7 = 0x775,
  AS_PS_EXPORT_STREAM_ENABLE_8 = 0x776,
  AS_PS_EXPORT_STREAM_BASE_8 = 0x777,
  AS_PS_EXPORT_STREAM_MAX_INDEX_8 = 0x778,
  AS_PS_EXPORT_STREAM_FORMAT_8 = 0x779,
  AS_PS_EXPORT_STREAM_DIMENSION_8 = 0x77A,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_8 = 0x77B,
  AS_PS_EXPORT_STREAM_STRIDE_8 = 0x77C,
  AS_PS_EXPORT_STREAM_ENABLE_9 = 0x77D,
  AS_PS_EXPORT_STREAM_BASE_9 = 0x77E,
  AS_PS_EXPORT_STREAM_MAX_INDEX_9 = 0x77F,
  AS_PS_EXPORT_STREAM_FORMAT_9 = 0x780,
  AS_PS_EXPORT_STREAM_DIMENSION_9 = 0x781,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_9 = 0x782,
  AS_PS_EXPORT_STREAM_STRIDE_9 = 0x783,
  AS_PS_EXPORT_STREAM_ENABLE_10 = 0x784,
  AS_PS_EXPORT_STREAM_BASE_10 = 0x785,
  AS_PS_EXPORT_STREAM_MAX_INDEX_10 = 0x786,
  AS_PS_EXPORT_STREAM_FORMAT_10 = 0x787,
  AS_PS_EXPORT_STREAM_DIMENSION_10 = 0x788,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_10 = 0x789,
  AS_PS_EXPORT_STREAM_STRIDE_10 = 0x78A,
  AS_PS_EXPORT_STREAM_ENABLE_11 = 0x78B,
  AS_PS_EXPORT_STREAM_BASE_11 = 0x78C,
  AS_PS_EXPORT_STREAM_MAX_INDEX_11 = 0x78D,
  AS_PS_EXPORT_STREAM_FORMAT_11 = 0x78E,
  AS_PS_EXPORT_STREAM_DIMENSION_11 = 0x78F,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_11 = 0x790,
  AS_PS_EXPORT_STREAM_STRIDE_11 = 0x791,
  AS_PS_EXPORT_STREAM_ENABLE_12 = 0x792,
  AS_PS_EXPORT_STREAM_BASE_12 = 0x793,
  AS_PS_EXPORT_STREAM_MAX_INDEX_12 = 0x794,
  AS_PS_EXPORT_STREAM_FORMAT_12 = 0x795,
  AS_PS_EXPORT_STREAM_DIMENSION_12 = 0x796,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_12 = 0x797,
  AS_PS_EXPORT_STREAM_STRIDE_12 = 0x798,
  AS_PS_EXPORT_STREAM_ENABLE_13 = 0x799,
  AS_PS_EXPORT_STREAM_BASE_13 = 0x79A,
  AS_PS_EXPORT_STREAM_MAX_INDEX_13 = 0x79B,
  AS_PS_EXPORT_STREAM_FORMAT_13 = 0x79C,
  AS_PS_EXPORT_STREAM_DIMENSION_13 = 0x79D,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_13 = 0x79E,
  AS_PS_EXPORT_STREAM_STRIDE_13 = 0x79F,
  AS_PS_EXPORT_STREAM_ENABLE_14 = 0x7A0,
  AS_PS_EXPORT_STREAM_BASE_14 = 0x7A1,
  AS_PS_EXPORT_STREAM_MAX_INDEX_14 = 0x7A2,
  AS_PS_EXPORT_STREAM_FORMAT_14 = 0x7A3,
  AS_PS_EXPORT_STREAM_DIMENSION_14 = 0x7A4,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_14 = 0x7A5,
  AS_PS_EXPORT_STREAM_STRIDE_14 = 0x7A6,
  AS_PS_EXPORT_STREAM_ENABLE_15 = 0x7A7,
  AS_PS_EXPORT_STREAM_BASE_15 = 0x7A8,
  AS_PS_EXPORT_STREAM_MAX_INDEX_15 = 0x7A9,
  AS_PS_EXPORT_STREAM_FORMAT_15 = 0x7AA,
  AS_PS_EXPORT_STREAM_DIMENSION_15 = 0x7AB,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_15 = 0x7AC,
  AS_PS_EXPORT_STREAM_STRIDE_15 = 0x7AD,
};

/*  252 */
enum XGRAPHICS::_E_AS_ARRAY_STATE
{
  AS_ALPHA_BLEND_COLOR_SRC_FACTOR_N = 0x0,
  AS_ALPHA_BLEND_COLOR_OP_N = 0x1,
  AS_ALPHA_BLEND_COLOR_DST_FACTOR_N = 0x2,
  AS_ALPHA_BLEND_ALPHA_SRC_FACTOR_N = 0x3,
  AS_ALPHA_BLEND_ALPHA_OP_N = 0x4,
  AS_ALPHA_BLEND_ALPHA_DST_FACTOR_N = 0x5,
  AS_ALPHA_TO_MASK_OFFSET_N = 0x6,
  AS_CLIPPLANE_ENABLE_N = 0x7,
  AS_CLIPPLANE_X_N = 0x8,
  AS_CLIPPLANE_Y_N = 0x9,
  AS_CLIPPLANE_Z_N = 0xA,
  AS_CLIPPLANE_W_N = 0xB,
  AS_POINTSPRITE_REPLACE_ENABLE_N = 0xC,
  AS_TEXCOORD_CYLINDRICAL_WRAP_N = 0xD,
  AS_TEX_PROJECTED_N = 0xE,
  AS_TEX_DENORM_N = 0xF,
  AS_TEX_BORDER_COLOR_RED_N = 0x10,
  AS_TEX_BORDER_COLOR_GREEN_N = 0x11,
  AS_TEX_BORDER_COLOR_BLUE_N = 0x12,
  AS_TEX_BORDER_COLOR_ALPHA_N = 0x13,
  AS_TEX_SHADOW_ENABLE_N = 0x14,
  AS_TEX_SHADOW_FILTER_N = 0x15,
  AS_TEX_SHADOW_USAGE_N = 0x16,
  AS_TEX_SHADOW_COMPARE_FUNC_N = 0x17,
  AS_TEX_LODCLAMP_ENABLE_N = 0x18,
  AS_TEX_LODCLAMP_MIN_N = 0x19,
  AS_TEX_LODCLAMP_MAX_N = 0x1A,
  AS_INTERNAL_TEX_TYPE_N = 0x1B,
  AS_INTERNAL_TEX_FORMAT_N = 0x1C,
  AS_INTERNAL_TEX_CLAMP_X_N = 0x1D,
  AS_INTERNAL_TEX_CLAMP_Y_N = 0x1E,
  AS_INTERNAL_TEX_CLAMP_Z_N = 0x1F,
  AS_POLY_STIPPLE_PATTERN_N = 0x20,
  AS_CB_BASEADDRESS_N = 0x21,
  AS_CB_SURFACE_FMT_N = 0x22,
  AS_CB_SURFACE_NUMERIC_PACKED_N = 0x23,
  AS_CB_SURFACE_SWIZZLE_PACKED_N = 0x24,
  AS_CB_CLAMP_MODE_N = 0x25,
  AS_CB_EXP_BIAS_N = 0x26,
  AS_VS_DECL_ENABLE_N = 0x27,
  AS_VS_DECL_STREAM_NUM_N = 0x28,
  AS_VS_DECL_OFFSET_N = 0x29,
  AS_VS_DECL_STRIDE_N = 0x2A,
  AS_VS_DECL_TYPE_FORMAT_N = 0x2B,
  AS_VS_DECL_TYPE_DIMENSION_N = 0x2C,
  AS_VS_DECL_TYPE_SIGNED_N = 0x2D,
  AS_VS_DECL_TYPE_NORMALIZE_N = 0x2E,
  AS_VS_DECL_USAGE_N = 0x2F,
  AS_VS_DECL_STREAM_FREQ_N = 0x30,
  AS_AA_REND_SAMPLE_TABLE_INDEX_N = 0x31,
  AS_CB_WRITEMASK_RED_N = 0x32,
  AS_CB_WRITEMASK_GREEN_N = 0x33,
  AS_CB_WRITEMASK_BLUE_N = 0x34,
  AS_CB_WRITEMASK_ALPHA_N = 0x35,
  AS_VS_STREAM_BASE_N = 0x36,
  AS_VS_STREAM_LIMIT_N = 0x37,
  AS_TEX_ENABLE_N = 0x38,
  AS_TEX_BASEADDRESS_N = 0x39,
  AS_TEX_SURFACE_PITCH_IN_TEXELS_N = 0x3A,
  AS_TEX_SURFACE_SLICE_STRIDE_IN_TEXELS_N = 0x3B,
  AS_TEX_MAG_FILTER_N = 0x3C,
  AS_TEX_MIN_FILTER_N = 0x3D,
  AS_TEX_MIP_FILTER_N = 0x3E,
  AS_TEX_ANISO_FILTER_N = 0x3F,
  AS_TEX_VOL_MAG_FILTER_N = 0x40,
  AS_TEX_VOL_MIN_FILTER_N = 0x41,
  AS_TEX_MAX_MIP_LEVEL_N = 0x42,
  AS_TEX_MIN_MIP_LEVEL_N = 0x43,
  AS_TEX_LODBIAS_N = 0x44,
  AS_TEX_BORDER_SIZE_N = 0x45,
  AS_TEX_FORMAT_N = 0x46,
  AS_TEX_SURFACE_FMT_N = 0x47,
  AS_TEX_SURFACE_NUMERIC_PACKED_N = 0x48,
  AS_TEX_SURFACE_SWIZZLE_PACKED_N = 0x49,
  AS_TEX_HEAP_N = 0x4A,
  AS_TEX_MIP_CHAIN_ADDRESS_N = 0x4B,
  AS_TEX_SURFACE_WIDTH_N = 0x4C,
  AS_TEX_SURFACE_HEIGHT_N = 0x4D,
  AS_TEX_SURFACE_DEPTH_N = 0x4E,
  AS_TEX_TYPE_N = 0x4F,
  AS_TEX_TILING_ENABLE_N = 0x50,
  AS_TEX_TRI_JUICE_N = 0x51,
  AS_TEX_CLAMP_X_N = 0x52,
  AS_TEX_CLAMP_Y_N = 0x53,
  AS_TEX_CLAMP_Z_N = 0x54,
  AS_TEX_VALUE_NORMALIZATION_N = 0x55,
  AS_TEX_SHADOW_COMPARE_FAIL_VALUE_N = 0x56,
  AS_TEX_EXP_ADJUST_N = 0x57,
  AS_VS_EXPORT_STREAM_ENABLE_N = 0x58,
  AS_VS_EXPORT_STREAM_BASE_N = 0x59,
  AS_VS_EXPORT_STREAM_MAX_INDEX_N = 0x5A,
  AS_VS_EXPORT_STREAM_FORMAT_N = 0x5B,
  AS_VS_EXPORT_STREAM_DIMENSION_N = 0x5C,
  AS_VS_EXPORT_STREAM_ELEM_STRIDE_N = 0x5D,
  AS_VS_EXPORT_STREAM_STRIDE_N = 0x5E,
  AS_PS_EXPORT_STREAM_ENABLE_N = 0x5F,
  AS_PS_EXPORT_STREAM_BASE_N = 0x60,
  AS_PS_EXPORT_STREAM_MAX_INDEX_N = 0x61,
  AS_PS_EXPORT_STREAM_FORMAT_N = 0x62,
  AS_PS_EXPORT_STREAM_DIMENSION_N = 0x63,
  AS_PS_EXPORT_STREAM_ELEM_STRIDE_N = 0x64,
  AS_PS_EXPORT_STREAM_STRIDE_N = 0x65,
};

/*  253 */
enum XGRAPHICS::NODE_TYPE
{
  E_LO_CHILD = 0x0,
  E_EQ_CHILD = 0x1,
  E_HI_CHILD = 0x2,
};

/*  254 */
enum XGRAPHICS::IL_Shader_Type
{
  IL_SHADER_VERTEX = 0x0,
  IL_SHADER_PIXEL = 0x1,
  IL_SHADER_LAST = 0x2,
};

/*  255 */
enum XGRAPHICS::IL_Language_Type
{
  IL_LANG_GENERIC = 0x0,
  IL_LANG_OPENGL = 0x1,
  IL_LANG_DX8_PS = 0x2,
  IL_LANG_DX8_VS = 0x3,
  IL_LANG_LAST = 0x4,
};

/*  256 */
enum XGRAPHICS::ILOpCode
{
  IL_OP_UNKNOWN = 0x0,
  IL_OP_ABS = 0x1,
  IL_OP_ACOS = 0x2,
  IL_OP_ADD = 0x3,
  IL_OP_ASIN = 0x4,
  IL_OP_ATAN = 0x5,
  IL_OP_BREAK = 0x6,
  IL_OP_BREAKC = 0x7,
  IL_OP_CALL = 0x8,
  IL_OP_CALLNZ = 0x9,
  IL_OP_CLAMP = 0xA,
  IL_OP_CLG = 0xB,
  IL_OP_CMOV = 0xC,
  IL_OP_CMP = 0xD,
  IL_OP_COLORCLAMP = 0xE,
  IL_OP_COMMENT = 0xF,
  IL_OP_CONTINUE = 0x10,
  IL_OP_CONTINUEC = 0x11,
  IL_OP_COS = 0x12,
  IL_OP_CRS = 0x13,
  IL_OP_DCLARRAY = 0x14,
  IL_OP_DCLDEF = 0x15,
  IL_OP_DCLPI = 0x16,
  IL_OP_DCLPIN = 0x17,
  IL_OP_DCLPP = 0x18,
  IL_OP_DCLPT = 0x19,
  IL_OP_DCLV = 0x1A,
  IL_OP_DCLVOUT = 0x1B,
  IL_OP_DEF = 0x1C,
  IL_OP_DEFB = 0x1D,
  IL_OP_DET = 0x1E,
  IL_OP_DIST = 0x1F,
  IL_OP_DIV = 0x20,
  IL_OP_DP2ADD = 0x21,
  IL_OP_DP3 = 0x22,
  IL_OP_DP4 = 0x23,
  IL_OP_DST = 0x24,
  IL_OP_DSX = 0x25,
  IL_OP_DSY = 0x26,
  IL_OP_ELSE = 0x27,
  IL_OP_END = 0x28,
  IL_OP_ENDIF = 0x29,
  IL_OP_ENDLOOP = 0x2A,
  IL_OP_ENDMAIN = 0x2B,
  IL_OP_EXN = 0x2C,
  IL_OP_EXP = 0x2D,
  IL_OP_EXPP = 0x2E,
  IL_OP_FACEFORWARD = 0x2F,
  IL_OP_FLR = 0x30,
  IL_OP_FRC = 0x31,
  IL_OP_FUNC = 0x32,
  IL_OP_FWIDTH = 0x33,
  IL_OP_IFC = 0x34,
  IL_OP_IFNZ = 0x35,
  IL_OP_INITV = 0x36,
  IL_OP_KILL = 0x37,
  IL_OP_LEN = 0x38,
  IL_OP_LIT = 0x39,
  IL_OP_LN = 0x3A,
  IL_OP_LOD = 0x3B,
  IL_OP_LOG = 0x3C,
  IL_OP_LOGP = 0x3D,
  IL_OP_LOOP = 0x3E,
  IL_OP_LRP = 0x3F,
  IL_OP_MAD = 0x40,
  IL_OP_MAX = 0x41,
  IL_OP_MEMEXPORT = 0x42,
  IL_OP_MEMIMPORT = 0x43,
  IL_OP_MIN = 0x44,
  IL_OP_MMUL = 0x45,
  IL_OP_MOD = 0x46,
  IL_OP_MOV = 0x47,
  IL_OP_MOVA = 0x48,
  IL_OP_MUL = 0x49,
  IL_OP_NOISE = 0x4A,
  IL_OP_NOP = 0x4B,
  IL_OP_NRM = 0x4C,
  IL_OP_PIREDUCE = 0x4D,
  IL_OP_POW = 0x4E,
  IL_OP_PRECOMP = 0x4F,
  IL_OP_PROJECT = 0x50,
  IL_OP_RCP = 0x51,
  IL_OP_REFLECT = 0x52,
  IL_OP_RET = 0x53,
  IL_OP_RND = 0x54,
  IL_OP_RSQ = 0x55,
  IL_OP_SET = 0x56,
  IL_OP_SGN = 0x57,
  IL_OP_SIN = 0x58,
  IL_OP_SINCOS = 0x59,
  IL_OP_SQRT = 0x5A,
  IL_OP_SUB = 0x5B,
  IL_OP_TAN = 0x5C,
  IL_OP_TEXLD = 0x5D,
  IL_OP_TEXLDB = 0x5E,
  IL_OP_TEXLDD = 0x5F,
  IL_OP_TEXLDMS = 0x60,
  IL_OP_TEXWEIGHT = 0x61,
  IL_OP_TRANSPOSE = 0x62,
  IL_OP_TRC = 0x63,
  IL_OP_LAST = 0x64,
};

/*  257 */
enum XGRAPHICS::E_SSM_DEBUG_DEST
{
  E_NO_OUTPUT = 0x0,
  E_TO_SCREEN = 0x1,
  E_TO_FILE = 0x2,
};

/*  258 */
enum XGRAPHICS::_E_SSM_DEBUGLEVEL
{
  E_SSM_ASSERTION = 0x0,
  E_SSM_GENERAL_ENTRY_EXIT = 0x1,
  E_SSM_INFO_MESSAGE = 0x2,
  E_SSM_ERROR_MESSAGE = 0x3,
  E_SSM_DEBUG1 = 0x4,
  E_SSM_DEBUG2 = 0x5,
  E_SSM_STATE_DATA = 0x6,
  E_SSM_PIXELSHADER_IL = 0x7,
  E_SSM_VERTEXSHADER_IL = 0x8,
  E_SSM_XLT_DATA = 0x9,
  E_SSM_POSTPROCESSOR_DATA = 0xA,
  E_SSM_MEMTRACK = 0xB,
  E_SSM_SHADER_RECYCLER = 0xC,
  E_SSM_STATE_CACHE = 0xD,
  E_SSM_COMPILER_DATA = 0xE,
  E_SSM_DEBUGLEVEL_TOO_BIG = 0xF,
};

/*  259 */
enum XGRAPHICS::ILRegType
{
  IL_REGTYPE_CONST_BOOL = 0x0,
  IL_REGTYPE_CONST_FLOAT = 0x1,
  IL_REGTYPE_CONST_INT = 0x2,
  IL_REGTYPE_ADDR = 0x3,
  IL_REGTYPE_TEMP = 0x4,
  IL_REGTYPE_VERTEX = 0x5,
  IL_REGTYPE_INDEX = 0x6,
  IL_REGTYPE_OBJECT_INDEX = 0x7,
  IL_REGTYPE_BARYCENTRIC_COORD = 0x8,
  IL_REGTYPE_PRIMITIVE_INDEX = 0x9,
  IL_REGTYPE_QUAD_INDEX = 0xA,
  IL_REGTYPE_VOUTPUT = 0xB,
  IL_REGTYPE_PINPUT = 0xC,
  IL_REGTYPE_SPRITE = 0xD,
  IL_REGTYPE_POS = 0xE,
  IL_REGTYPE_INTERP = 0xF,
  IL_REGTYPE_FOG = 0x10,
  IL_REGTYPE_TEXCOORD = 0x11,
  IL_REGTYPE_PRICOLOR = 0x12,
  IL_REGTYPE_SECCOLOR = 0x13,
  IL_REGTYPE_SPRITECOORD = 0x14,
  IL_REGTYPE_FACE = 0x15,
  IL_REGTYPE_WINCOORD = 0x16,
  IL_REGTYPE_PCOLOR = 0x17,
  IL_REGTYPE_DEPTH = 0x18,
  IL_REGTYPE_LAST = 0x19,
};

/*  260 */
enum XGRAPHICS::ILMatrix
{
  IL_MATRIX_4X4 = 0x0,
  IL_MATRIX_4X3 = 0x1,
  IL_MATRIX_3X4 = 0x2,
  IL_MATRIX_3X3 = 0x3,
  IL_MATRIX_3X2 = 0x4,
  IL_MATRIX_LAST = 0x5,
};

/*  261 */
enum XGRAPHICS::ILDivComp
{
  IL_DIVCOMP_NONE = 0x0,
  IL_DIVCOMP_Y = 0x1,
  IL_DIVCOMP_Z = 0x2,
  IL_DIVCOMP_W = 0x3,
  IL_DIVCOMP_UNKNOWN = 0x4,
  IL_DIVCOMP_LAST = 0x5,
};

/*  262 */
enum XGRAPHICS::ILZeroOp
{
  IL_ZEROOP_FLTMAX = 0x0,
  IL_ZEROOP_0 = 0x1,
  IL_ZEROOP_INFINITY = 0x2,
  IL_ZEROOP_INF_ELSE_MAX = 0x3,
  IL_ZEROOP_LAST = 0x4,
};

/*  263 */
enum XGRAPHICS::ILModDstComponent
{
  IL_MODCOMP_NOWRITE = 0x0,
  IL_MODCOMP_WRITE = 0x1,
  IL_MODCOMP_0 = 0x2,
  IL_MODCOMP_1 = 0x3,
  IL_MODCOMP_LAST = 0x4,
};

/*  264 */
enum XGRAPHICS::ILComponentSelect
{
  IL_COMPSEL_X_R = 0x0,
  IL_COMPSEL_Y_G = 0x1,
  IL_COMPSEL_Z_B = 0x2,
  IL_COMPSEL_W_A = 0x3,
  IL_COMPSEL_0 = 0x4,
  IL_COMPSEL_1 = 0x5,
  IL_COMPSEL_LAST = 0x6,
};

/*  265 */
enum XGRAPHICS::ILShiftScale
{
  IL_SHIFT_NONE = 0x0,
  IL_SHIFT_X2 = 0x1,
  IL_SHIFT_X4 = 0x2,
  IL_SHIFT_X8 = 0x3,
  IL_SHIFT_D2 = 0x4,
  IL_SHIFT_D4 = 0x5,
  IL_SHIFT_D8 = 0x6,
  IL_SHIFT_LAST = 0x7,
};

/*  266 */
enum XGRAPHICS::ILRelOp
{
  IL_RELOP_NE = 0x0,
  IL_RELOP_EQ = 0x1,
  IL_RELOP_GE = 0x2,
  IL_RELOP_GT = 0x3,
  IL_RELOP_LE = 0x4,
  IL_RELOP_LT = 0x5,
  IL_RELOP_LAST = 0x6,
};

/*  267 */
enum XGRAPHICS::ILDefaultVal
{
  IL_DEFVAL_NONE = 0x0,
  IL_DEFVAL_0 = 0x1,
  IL_DEFVAL_1 = 0x2,
  IL_DEFVAL_LAST = 0x3,
};

/*  268 */
enum XGRAPHICS::ILImportComponent
{
  IL_IMPORTSEL_UNUSED = 0x0,
  IL_IMPORTSEL_DEFAULT0 = 0x1,
  IL_IMPORTSEL_DEFAULT1 = 0x2,
  IL_IMPORTSEL_UNDEFINED = 0x3,
  IL_IMPORTSEL_LAST = 0x4,
};

/*  269 */
enum XGRAPHICS::ILImportUsage
{
  IL_IMPORTUSAGE_POS = 0x0,
  IL_IMPORTUSAGE_POINTSIZE = 0x1,
  IL_IMPORTUSAGE_COLOR = 0x2,
  IL_IMPORTUSAGE_BACKCOLOR = 0x3,
  IL_IMPORTUSAGE_FOG = 0x4,
  IL_IMPORTUSAGE_GENERIC = 0x5,
  IL_IMPORTUSAGE_LAST = 0x6,
};

/*  270 */
enum XGRAPHICS::ILCmpVal
{
  IL_CMPVAL_0_0 = 0x0,
  IL_CMPVAL_0_5 = 0x1,
  IL_CMPVAL_1_0 = 0x2,
  IL_CMPVAL_NEG_0_5 = 0x3,
  IL_CMPVAL_NEG_1_0 = 0x4,
  IL_CMPVAL_LAST = 0x5,
};

/*  271 */
enum XGRAPHICS::ILPixTexUsage
{
  IL_USAGE_PIXTEX_UNKNOWN = 0x0,
  IL_USAGE_PIXTEX_1D = 0x1,
  IL_USAGE_PIXTEX_2D = 0x2,
  IL_USAGE_PIXTEX_3D = 0x3,
  IL_USAGE_PIXTEX_CUBEMAP = 0x4,
  IL_USAGE_PIXTEX_2DMSAA = 0x5,
  IL_USAGE_PIXTEX_LAST = 0x6,
};

/*  272 */
enum XGRAPHICS::ILTexCoordMode
{
  IL_TEXCOORDMODE_UNKNOWN = 0x0,
  IL_TEXCOORDMODE_NORMALIZED = 0x1,
  IL_TEXCOORDMODE_UNNORMALIZED = 0x2,
  IL_TEXCOORDMODE_LAST = 0x3,
};

/*  273 */
enum XGRAPHICS::ILTexShadowMode
{
  IL_TEXSHADOWMODE_NEVER = 0x0,
  IL_TEXSHADOWMODE_Z = 0x1,
  IL_TEXSHADOWMODE_UNKNOWN = 0x2,
  IL_TEXSHADOWMODE_LAST = 0x3,
};

/*  274 */
enum XGRAPHICS::ILTexFilterMode
{
  IL_TEXFILTER_UNKNOWN = 0x0,
  IL_TEXFILTER_POINT = 0x1,
  IL_TEXFILTER_LINEAR = 0x2,
  IL_TEXFILTER_ANISO = 0x3,
  IL_TEXFILTER_LAST = 0x4,
};

/*  275 */
enum XGRAPHICS::ILMipFilterMode
{
  IL_MIPFILTER_UNKNOWN = 0x0,
  IL_MIPFILTER_POINT = 0x1,
  IL_MIPFILTER_LINEAR = 0x2,
  IL_MIPFILTER_BASE = 0x3,
  IL_MIPFILTER_LAST = 0x4,
};

/*  276 */
enum XGRAPHICS::ILAnisoFilterMode
{
  IL_ANISOFILTER_UNKNOWN = 0x0,
  IL_ANISOFILTER_DISABLED = 0x1,
  IL_ANISOFILTER_MAX_1_TO_1 = 0x2,
  IL_ANISOFILTER_MAX_2_TO_1 = 0x3,
  IL_ANISOFILTER_MAX_4_TO_1 = 0x4,
  IL_ANISOFILTER_MAX_8_TO_1 = 0x5,
  IL_ANISOFILTER_MAX_16_TO_1 = 0x6,
  IL_ANISOFILTER_LAST = 0x7,
};

/*  277 */
enum XGRAPHICS::ILNoiseType
{
  IL_NOISETYPE_PERLIN1D = 0x0,
  IL_NOISETYPE_PERLIN2D = 0x1,
  IL_NOISETYPE_PERLIN3D = 0x2,
  IL_NOISETYPE_PERLIN4D = 0x3,
  IL_NOISETYPE_LAST = 0x4,
};

/*  278 */
enum XGRAPHICS::_E_LCC_CTYPE
{
  E_LCC_ALUCONST = 0x0,
  E_LCC_FETCHCONST = 0x1,
  E_LCC_BOOLCONST = 0x2,
  E_LCC_INTCONST = 0x3,
  E_LCC_REGCONST = 0x4,
  E_LCC_NUM_CTYPES = 0x5,
};

/*  279 */
enum XGRAPHICS::_E_SSM_RETURNCODE
{
  E_SSM_OK = 0x0,
  E_SSM_ERROR = 0x1,
  E_SSM_OUTOFMEMORY = 0x10,
  E_SSM_FREEMEM_FAILED = 0x11,
  E_SSM_STATEHANDLE_INVALID = 0x12,
  E_SSM_SHADERHANDLE_INVALID = 0x13,
  E_SSM_ABSTRACTSTATE_INVALID = 0x14,
  E_SSM_IL_INVALID = 0x15,
  E_SSM_OBJHANDLE_INVALID = 0x16,
  E_SSM_CMDBUF_OUTOFRANGE = 0x17,
  E_SSM_QUERYREG_FAILED = 0x18,
  E_SSM_INVALIDPARAMS = 0x19,
  E_SSM_TOOMANYSTATES = 0x1A,
  E_SSM_TEMP_REG_EXCEEDED = 0x1B,
  E_SSM_FETCH_REG_EXCEEDED = 0x1C,
  E_SSM_EXPORT_REG_EXCEEDED = 0x1D,
  E_SSM_INTERP_EXCEEDED = 0x1E,
  E_SSM_BOOL_CONST_EXCEEDED = 0x1F,
  E_SSM_ALU_CONST_EXCEEDED = 0x20,
  E_SSM_INT_TFETCH_INST_EXCEEDED = 0x21,
  E_SSM_INT_ALU_CONST_EXCEEDED = 0x22,
  E_SSM_LOOP_NEST_DEPTH_EXCEEDED = 0x23,
  E_SSM_CANNOTLINK_BAD_INPUTS = 0x24,
  E_SSM_CANNOTLINK_ALU_CONST_EXCEEDED = 0x25,
  E_SSM_CANNOTLINK_FETCH_REG_EXCEEDED = 0x26,
  E_SSM_NOTSUPPORTED = 0x100,
};

/*  280 */
enum XGRAPHICS::_E_SSM_CLIENTTYPE
{
  E_SSM_KERNEL_DD_D3D = 0x1,
  E_SSM_KERNEL_DVD = 0x2,
  E_SSM_KERNEL_OVERLAY = 0x3,
  E_SSM_KERNEL_2D = 0x4,
  E_SSM_KERNEL_OTHERS = 0x5,
  E_SSM_USER_OPENGL = 0x6,
  E_SSM_USER_OTHERS = 0x7,
};

/*  281 */
enum XGRAPHICS::_E_SSM_COMPILEMODE
{
  E_SSM_COMPILE_JIT = 0x1,
  E_SSM_COMPILE_ONLINE = 0x2,
  E_SSM_COMPILE_OFFLINE = 0x3,
};

/*  282 */
enum XGRAPHICS::_E_SSM_VIDMEMHEAP
{
  E_SSM_VIDMEMHEAP_LOCAL = 0x1,
  E_SSM_VIDMEMHEAP_NONLOCAL = 0x2,
};

/*  283 */
enum XGRAPHICS::_E_SSM_TS_STATUS
{
  E_SSM_TS_RETIRED = 0x1,
  E_SSM_TS_IS_BUSY = 0x2,
  E_SSM_TS_NO_TS = 0x3,
};

/*  284 */
enum XGRAPHICS::_E_AS_CTYPE
{
  E_AS_VFCONST = 0x0,
  E_AS_VICONST = 0x1,
  E_AS_VBCONST = 0x2,
  E_AS_PFCONST = 0x3,
  E_AS_PICONST = 0x4,
  E_AS_PBCONST = 0x5,
  E_AS_NUM_CONST_TYPES = 0x6,
};

/*  285 */
enum XGRAPHICS::_E_AS_STATE
{
  AS_VS_HANDLE = 0x0,
  AS_PS_HANDLE = 0x1,
  AS_ALPHA_BLEND_ENABLE = 0x2,
  AS_ALPHA_TEST_ENABLE = 0x1B,
  AS_ALPHA_TEST_FUNC = 0x1C,
  AS_ALPHA_TO_MASK_ENABLE = 0x1D,
  AS_ROP3 = 0x22,
  AS_Z_ENABLE = 0x23,
  AS_Z_WRITE_ENABLE = 0x24,
  AS_Z_FUNC = 0x25,
  AS_POLYOFFSET_ENABLE_FRONT = 0x26,
  AS_POLYOFFSET_BIAS_FRONT = 0x27,
  AS_POLYOFFSET_SCALE_FRONT = 0x28,
  AS_POLYOFFSET_ENABLE_BACK = 0x29,
  AS_POLYOFFSET_BIAS_BACK = 0x2A,
  AS_POLYOFFSET_SCALE_BACK = 0x2B,
  AS_POLYOFFSET_ENABLE_NON_TRI = 0x2C,
  AS_Z_HIZENABLE = 0x2D,
  AS_Z_BASEADDRESS = 0x2E,
  AS_Z_HEAP = 0x2F,
  AS_Z_FORMAT = 0x30,
  AS_Z_SURFACE_FMT = 0x31,
  AS_Z_SURFACE_NUMERIC = 0x32,
  AS_Z_ENDIAN = 0x33,
  AS_Z_MASKENABLE = 0x34,
  AS_Z_CLEARVALUE = 0x35,
  AS_Z_RANGEENABLE = 0x36,
  AS_Z_FAST_CLEAR_ENABLE = 0x37,
  AS_Z_FAST_EXPAND_ENABLE = 0x38,
  AS_ZPASS_COUNT_ENABLE = 0x39,
  AS_ZPASS_COUNT_TYPE = 0x3A,
  AS_ZPASS_COUNT_ADDRESS = 0x3B,
  AS_TILE_Z_WRITE_ENABLE = 0x3C,
  AS_TILE_Z_ENABLE = 0x3D,
  AS_TILE_STENCIL_WRITE_ENABLE = 0x3E,
  AS_TILE_STENCIL_ENABLE = 0x3F,
  AS_TILE_ZFUNC = 0x40,
  AS_TILE_STENCILFUNC = 0x41,
  AS_TILE_STENCILREF = 0x42,
  AS_TILE_BASE_ADDR = 0x43,
  AS_TILE_CLEAR = 0x44,
  AS_COPY_SURFACE_SLICE = 0x45,
  AS_STENCIL_ENABLE = 0x46,
  AS_STENCIL_FRONT_FAIL = 0x47,
  AS_STENCIL_FRONT_Z_FAIL = 0x48,
  AS_STENCIL_FRONT_Z_PASS = 0x49,
  AS_STENCIL_FRONT_FUNC = 0x4A,
  AS_STENCIL_TWO_SIDED_ENABLE = 0x4B,
  AS_STENCIL_BACK_FAIL = 0x4C,
  AS_STENCIL_BACK_Z_FAIL = 0x4D,
  AS_STENCIL_BACK_Z_PASS = 0x4E,
  AS_STENCIL_BACK_FUNC = 0x4F,
  AS_STENCIL_MASKENABLE = 0x50,
  AS_STENCIL_CLEARVALUE = 0x51,
  AS_STENCIL_COMPAREVALUE = 0x52,
  AS_STENCIL_MINVALUE = 0x53,
  AS_STENCIL_FAST_CLEAR_ENABLE = 0x54,
  AS_STENCIL_FAST_EXPAND_ENABLE = 0x55,
  AS_STENCIL_HISTENCIL_ENABLE = 0x56,
  AS_SCISSOR_ENABLE = 0x57,
  AS_SCISSOR_TOPLEFT_X = 0x58,
  AS_SCISSOR_TOPLEFT_Y = 0x59,
  AS_SCISSOR_BOTTOMRIGHT_X = 0x5A,
  AS_SCISSOR_BOTTOMRIGHT_Y = 0x5B,
  AS_CULL_FRONT = 0x5C,
  AS_CULL_BACK = 0x5D,
  AS_CULL_FACE = 0x5E,
  AS_CLIP_ENABLE = 0x5F,
  AS_CLIP_SPACE_DEF = 0x7E,
  AS_POINTSPRITE_ENABLE = 0x7F,
  AS_POINTSPRITE_SIZE = 0x80,
  AS_POINTSPRITE_MINSIZE = 0x81,
  AS_POINTSPRITE_MAXSIZE = 0x82,
  AS_POINTSPRITE_X_RAD = 0x83,
  AS_POINTSPRITE_Y_RAD = 0x84,
  AS_POINTSPRITE_CULL_RAD = 0x85,
  AS_POINTSPRITE_CLIPPLANE_MODE = 0x86,
  AS_POINTSPRITE_REPLACE_MODE = 0x87,
  AS_WFAR = 0x98,
  AS_WNEAR = 0x99,
  AS_VP_ENABLES_PACKED = 0x9A,
  AS_VTX_XYFMT = 0x9B,
  AS_VTX_ZFMT = 0x9C,
  AS_VTX_WFMT = 0x9D,
  AS_VP_SERIALPROC_ENABLE = 0x9E,
  AS_GB_VERT_CLIP_ADJ = 0x9F,
  AS_GB_VERT_DISC_ADJ = 0xA0,
  AS_GB_HORZ_CLIP_ADJ = 0xA1,
  AS_GB_HORZ_DISC_ADJ = 0xA2,
  AS_FOG_ENABLE = 0xA3,
  AS_RANGE_FOG_ENABLE = 0xA4,
  AS_FOG_TABLE_MODE = 0xA5,
  AS_FOG_START = 0xA6,
  AS_FOG_END = 0xA7,
  AS_FOG_DENSITY = 0xA8,
  AS_FOG_VERTEX_MODE = 0xA9,
  AS_TABLE_FOG_INDEX = 0xAA,
  AS_FOG_TABLE_METHOD = 0xAB,
  AS_PRIM_ENABLE = 0x236,
  AS_PRIM_TYPE = 0x237,
  AS_PRIM_ORDER = 0x238,
  AS_PRIM_INDEX_SIZE = 0x239,
  AS_FILL_MODE_FRONT = 0x23A,
  AS_FILL_MODE_BACK = 0x23B,
  AS_SHADE_MODE = 0x23C,
  AS_LINE_WIDTH = 0x23D,
  AS_LINE_STIPPLE_ENABLE = 0x23E,
  AS_LINE_STIPPLE_PATTERN = 0x23F,
  AS_LINE_STIPPLE_REPEAT_COUNT = 0x240,
  AS_LINE_STIPPLE_AUTO_RESET = 0x241,
  AS_LINE_DRAW_LAST_PIXEL = 0x242,
  AS_PROVOKING_VERTEX = 0x243,
  AS_REND_WINDOW_HEIGHT = 0x244,
  AS_REND_INVERTED_ENABLE = 0x245,
  AS_POLY_STIPPLE_ENABLE = 0x246,
  AS_LIGHT_TWO_SIDED_ENABLE = 0x267,
  AS_COLOR_DITHER = 0x268,
  AS_ALPHA_DITHER = 0x269,
  AS_CB_FAST_CLEAR_ENABLE = 0x26A,
  AS_CB_FAST_EXPAND_ENABLE = 0x26B,
  AS_REND_TILE_ENABLE = 0x26C,
  AS_REND_SLICE = 0x26D,
  AS_REND_ARRAY = 0x26E,
  AS_CB_MASKENABLE = 0x26F,
  AS_CB_CLEARCOLOR_RED = 0x270,
  AS_CB_CLEARCOLOR_GREEN = 0x271,
  AS_CB_CLEARCOLOR_BLUE = 0x272,
  AS_CB_CLEARCOLOR_ALPHA = 0x273,
  AS_REND_PITCH = 0x28C,
  AS_REND_MSAA_SAMPLES = 0x28D,
  AS_MSAA_SAMPLE_MODE = 0x28E,
  AS_TILEDATA_BASEADDRESS = 0x28F,
  AS_COLORKEY_ENABLE = 0x290,
  AS_COLORKEY_SRC_CLRCMP_MODE = 0x291,
  AS_COLORKEY_DST_CLRCMP_MODE = 0x292,
  AS_COLORKEY_SRC_RED = 0x293,
  AS_COLORKEY_SRC_GREEN = 0x294,
  AS_COLORKEY_SRC_BLUE = 0x295,
  AS_COLORKEY_SRC_ALPHA = 0x296,
  AS_COLORKEY_DST_RED = 0x297,
  AS_COLORKEY_DST_GREEN = 0x298,
  AS_COLORKEY_DST_BLUE = 0x299,
  AS_COLORKEY_DST_ALPHA = 0x29A,
  AS_PIXEL_CENTER = 0x29B,
  AS_ROUND_MODE = 0x29C,
  AS_CB_REPLICATE_OUTPUT = 0x29D,
  AS_COPY_DEST_FORMAT = 0x29E,
  AS_EDRAM_MODE = 0x29F,
  AS_EDRAM_RT_SRC_SEL = 0x2A0,
  AS_EDRAM_SAMP_SEL = 0x2A1,
  AS_EDRAM_COPY_COMMAND = 0x2A2,
  AS_EDRAM_COPY_DST_BASE = 0x2A3,
  AS_EDRAM_COPY_ENDIAN = 0x2A4,
  AS_EDRAM_COPY_NUMBER = 0x2A5,
  AS_EDRAM_COPY_EXP_BIAS = 0x2A6,
  AS_EDRAM_COPY_DST_SWAP = 0x2A7,
  AS_EDRAM_COPY_DST_PITCH = 0x2A8,
  AS_EDRAM_COPY_DST_HEIGHT = 0x2A9,
  AS_EDRAM_COPY_FUNC_RED = 0x2AA,
  AS_EDRAM_COPY_FUNC_BLUE = 0x2AB,
  AS_EDRAM_COPY_FUNC_GREEN = 0x2AC,
  AS_EDRAM_COPY_FUNC_ALPHA = 0x2AD,
  AS_EDGEFLAG_DECL_ENABLE = 0x39E,
  AS_EDGEFLAG_DECL_OFFSET = 0x39F,
  AS_EDGEFLAG_DECL_STRIDE = 0x3A0,
  AS_EDGEFLAG_DECL_TYPE_FORMAT = 0x3A1,
  AS_EDGEFLAG_DECL_TYPE_DIMENSION = 0x3A2,
  AS_EDGEFLAG_DECL_TYPE_SIGNED = 0x3A3,
  AS_EDGEFLAG_DECL_TYPE_NORMALIZE = 0x3A4,
  AS_EDGEFLAG_DECL_USAGE = 0x3A5,
  AS_AA_REND_POINT_ENABLE = 0x3A6,
  AS_AA_REND_LINE_ENABLE = 0x3A7,
  AS_AA_REND_SAMPLE_TABLE_ENABLE = 0x3A8,
  AS_AA_REND_SAMPLE_TABLE_X_DIMENSION = 0x3A9,
  AS_AA_REND_SAMPLE_TABLE_Y_DIMENSION = 0x3AA,
  AS_AA_REND_MASK = 0x3BB,
  AS_MSAA_REND_ENABLE = 0x3BC,
  AS_MSAA_REND_NUM_SAMPLES = 0x3BD,
  AS_MSAA_TEX_NUM_SAMPLES = 0x3BE,
  AS_MSAA_TEX_RESULT_FORMAT = 0x3BF,
  AS_MSAA_TEX_SURFACE_FMT = 0x3C0,
  AS_MSAA_TEX_SURFACE_PACKED_NUMERIC = 0x3C1,
  AS_MSAA_TEX_FILTER_FUNCTION = 0x3C2,
  AS_MSAA_TEX_TILEDATA_BASEADDRESS = 0x3C3,
  AS_MSAA_TEX_CLEARCOLOR_RED = 0x3C4,
  AS_MSAA_TEX_CLEARCOLOR_GREEN = 0x3C5,
  AS_MSAA_TEX_CLEARCOLOR_BLUE = 0x3C6,
  AS_MSAA_TEX_CLEARCOLOR_ALPHA = 0x3C7,
  AS_MSAA_TEX_BASEADDRESS = 0x3C8,
  AS_MSAA_TEX_PITCH_IN_TEXELS = 0x3C9,
  AS_MSAA_TEX_SLICE_STRIDE_IN_TEXELS = 0x3CA,
  AS_HOS_ENABLE = 0x3CB,
  AS_HOS_MIN_TESS_LEVEL = 0x3CC,
  AS_HOS_MAX_TESS_LEVEL = 0x3CD,
  AS_HOS_TESS_MODE = 0x3CE,
  AS_VIZ_QUERY_ENABLE = 0x3CF,
  AS_VIZ_QUERY_ID = 0x3D0,
  AS_VIZ_QUERY_KILL_PIX_POST_HI_Z_ENABLE = 0x3D1,
  AS_VIZ_QUERY_KILL_PIX_POST_DETAIL_MASK = 0x3D2,
  AS_ALPHA_BLEND_CONST_RED = 0x3D3,
  AS_ALPHA_BLEND_CONST_GREEN = 0x3D4,
  AS_ALPHA_BLEND_CONST_BLUE = 0x3D5,
  AS_ALPHA_BLEND_CONST_ALPHA = 0x3D6,
  AS_ALPHA_TEST_REF = 0x3D7,
  AS_MIP_PACKING_ENABLE = 0x3D8,
  AS_NEAREST_CLAMP_POLICY = 0x3D9,
  AS_EDGEFLAG_STREAM_BASE = 0x3DA,
  AS_EDGEFLAG_STREAM_LIMIT = 0x3DB,
  AS_STENCIL_FRONT_REF = 0x3DC,
  AS_STENCIL_FRONT_MASK = 0x3DD,
  AS_STENCIL_FRONT_WRITEMASK = 0x3DE,
  AS_STENCIL_BACK_REF = 0x3DF,
  AS_STENCIL_BACK_MASK = 0x3E0,
  AS_STENCIL_BACK_WRITEMASK = 0x3E1,
  AS_VP_XSCALE = 0x3E2,
  AS_VP_XOFFSET = 0x3E3,
  AS_VP_YSCALE = 0x3E4,
  AS_VP_YOFFSET = 0x3E5,
  AS_VP_ZSCALE = 0x3E6,
  AS_VP_ZOFFSET = 0x3E7,
  AS_FOGCOLOR_RED = 0x3E8,
  AS_FOGCOLOR_GREEN = 0x3E9,
  AS_FOGCOLOR_BLUE = 0x3EA,
  AS_MIN_VTX_INDEX = 0x3EB,
  AS_MAX_VTX_INDEX = 0x3EC,
  AS_BASE_VERTEX_INDEX = 0x3ED,
};

/*  286 */
enum TCF_PERFCOUNT_SELECT
{
  VALID_CYCLES = 0x0,
  SINGLE_PHASES = 0x1,
  ANISO_PHASES = 0x2,
  MIP_PHASES = 0x3,
  VOL_PHASES = 0x4,
  MIP_VOL_PHASES = 0x5,
  MIP_ANISO_PHASES = 0x6,
  VOL_ANISO_PHASES = 0x7,
  ANISO_2_1_PHASES = 0x8,
  ANISO_4_1_PHASES = 0x9,
  ANISO_6_1_PHASES = 0xA,
  ANISO_8_1_PHASES = 0xB,
  ANISO_10_1_PHASES = 0xC,
  ANISO_12_1_PHASES = 0xD,
  ANISO_14_1_PHASES = 0xE,
  ANISO_16_1_PHASES = 0xF,
  MIP_VOL_ANISO_PHASES = 0x10,
  ALIGN_2_PHASES = 0x11,
  ALIGN_4_PHASES = 0x12,
  TPC_BUSY = 0x13,
  TPC_STALLED = 0x14,
  TPC_STARVED = 0x15,
  TPC_WORKING = 0x16,
  TPC_WALKER_BUSY = 0x17,
  TPC_WALKER_STALLED = 0x18,
  TPC_WALKER_WORKING = 0x19,
  TPC_ALIGNER_BUSY = 0x1A,
  TPC_ALIGNER_STALLED = 0x1B,
  TPC_ALIGNER_STALLED_BY_BLEND = 0x1C,
  TPC_ALIGNER_STALLED_BY_CACHE = 0x1D,
  TPC_ALIGNER_WORKING = 0x1E,
  TPC_BLEND_BUSY = 0x1F,
  TPC_BLEND_SYNC = 0x20,
  TPC_BLEND_STARVED = 0x21,
  TPC_BLEND_WORKING = 0x22,
  OPCODE_0x00 = 0x23,
  OPCODE_0x01 = 0x24,
  OPCODE_0x04 = 0x25,
  OPCODE_0x10 = 0x26,
  OPCODE_0x11 = 0x27,
  OPCODE_0x12 = 0x28,
  OPCODE_0x13 = 0x29,
  OPCODE_0x18 = 0x2A,
  OPCODE_0x19 = 0x2B,
  OPCODE_0x1A = 0x2C,
  OPCODE_OTHER = 0x2D,
  IN_FIFO_0_EMPTY = 0x38,
  IN_FIFO_0_LT_HALF_FULL = 0x39,
  IN_FIFO_0_HALF_FULL = 0x3A,
  IN_FIFO_0_FULL = 0x3B,
  IN_FIFO_1_EMPTY = 0x3C,
  IN_FIFO_1_LT_HALF_FULL = 0x3D,
  IN_FIFO_1_HALF_FULL = 0x3E,
  IN_FIFO_1_FULL = 0x3F,
  IN_FIFO_2_EMPTY = 0x40,
  IN_FIFO_2_LT_HALF_FULL = 0x41,
  IN_FIFO_2_HALF_FULL = 0x42,
  IN_FIFO_2_FULL = 0x43,
  IN_FIFO_3_EMPTY = 0x44,
  IN_FIFO_3_LT_HALF_FULL = 0x45,
  IN_FIFO_3_HALF_FULL = 0x46,
  IN_FIFO_3_FULL = 0x47,
  IN_FIFO_TPC_EMPTY = 0x48,
  IN_FIFO_TPC_LT_HALF_FULL = 0x49,
  IN_FIFO_TPC_HALF_FULL = 0x4A,
  IN_FIFO_TPC_FULL = 0x4B,
  TPC_TC_XFC = 0x4C,
  TPC_TC_STATE = 0x4D,
  TC_STALL = 0x4E,
  QUAD0_TAPS = 0x4F,
  QUAD1_TAPS = 0x50,
  QUAD2_TAPS = 0x51,
  QUAD3_TAPS = 0x52,
  QUADS = 0x53,
  TCA_SYNC_STALL = 0x54,
  TAG_STALL = 0x55,
  SLICE_STALL = 0x56,
  SKEW_STALL = 0x57,
  TCB_SYNC_STALL = 0x58,
  TCA_VALID = 0x59,
  PROBES_VALID = 0x5A,
  MISS_STALL = 0x5B,
  FETCH_FIFO_STALL = 0x5C,
  TCO_STALL = 0x5D,
  ANY_STALL = 0x5E,
  TAG_MISSES = 0x5F,
  TAG_HITS = 0x60,
  SUB_TAG_MISSES = 0x61,
  SET0_INVALIDATES = 0x62,
  SET1_INVALIDATES = 0x63,
  SET2_INVALIDATES = 0x64,
  SET3_INVALIDATES = 0x65,
  SET0_TAG_MISSES = 0x66,
  SET1_TAG_MISSES = 0x67,
  SET2_TAG_MISSES = 0x68,
  SET3_TAG_MISSES = 0x69,
  SET0_TAG_HITS = 0x6A,
  SET1_TAG_HITS = 0x6B,
  SET2_TAG_HITS = 0x6C,
  SET3_TAG_HITS = 0x6D,
  SET0_SUB_TAG_MISSES = 0x6E,
  SET1_SUB_TAG_MISSES = 0x6F,
  SET2_SUB_TAG_MISSES = 0x70,
  SET3_SUB_TAG_MISSES = 0x71,
  SET0_EVICT1 = 0x72,
  SET0_EVICT2 = 0x73,
  SET0_EVICT3 = 0x74,
  SET0_EVICT4 = 0x75,
  SET0_EVICT5 = 0x76,
  SET0_EVICT6 = 0x77,
  SET0_EVICT7 = 0x78,
  SET0_EVICT8 = 0x79,
  SET0_EVICT9 = 0x7A,
  SET0_EVICT10 = 0x7B,
  SET0_EVICT11 = 0x7C,
  SET0_EVICT12 = 0x7D,
  SET0_EVICT13 = 0x7E,
  SET0_EVICT14 = 0x7F,
  SET0_EVICT15 = 0x80,
  SET0_EVICT16 = 0x81,
  SET1_EVICT1 = 0x82,
  SET1_EVICT2 = 0x83,
  SET1_EVICT3 = 0x84,
  SET1_EVICT4 = 0x85,
  SET1_EVICT5 = 0x86,
  SET1_EVICT6 = 0x87,
  SET1_EVICT7 = 0x88,
  SET1_EVICT8 = 0x89,
  SET1_EVICT9 = 0x8A,
  SET1_EVICT10 = 0x8B,
  SET1_EVICT11 = 0x8C,
  SET1_EVICT12 = 0x8D,
  SET1_EVICT13 = 0x8E,
  SET1_EVICT14 = 0x8F,
  SET1_EVICT15 = 0x90,
  SET1_EVICT16 = 0x91,
  SET2_EVICT1 = 0x92,
  SET2_EVICT2 = 0x93,
  SET2_EVICT3 = 0x94,
  SET2_EVICT4 = 0x95,
  SET2_EVICT5 = 0x96,
  SET2_EVICT6 = 0x97,
  SET2_EVICT7 = 0x98,
  SET2_EVICT8 = 0x99,
  SET2_EVICT9 = 0x9A,
  SET2_EVICT10 = 0x9B,
  SET2_EVICT11 = 0x9C,
  SET2_EVICT12 = 0x9D,
  SET2_EVICT13 = 0x9E,
  SET2_EVICT14 = 0x9F,
  SET2_EVICT15 = 0xA0,
  SET2_EVICT16 = 0xA1,
  SET3_EVICT1 = 0xA2,
  SET3_EVICT2 = 0xA3,
  SET3_EVICT3 = 0xA4,
  SET3_EVICT4 = 0xA5,
  SET3_EVICT5 = 0xA6,
  SET3_EVICT6 = 0xA7,
  SET3_EVICT7 = 0xA8,
  SET3_EVICT8 = 0xA9,
  SET3_EVICT9 = 0xAA,
  SET3_EVICT10 = 0xAB,
  SET3_EVICT11 = 0xAC,
  SET3_EVICT12 = 0xAD,
  SET3_EVICT13 = 0xAE,
  SET3_EVICT14 = 0xAF,
  SET3_EVICT15 = 0xB0,
  SET3_EVICT16 = 0xB1,
  FF_EMPTY = 0xB2,
  FF_LT_HALF_FULL = 0xB3,
  FF_HALF_FULL = 0xB4,
  FF_FULL = 0xB5,
  FF_XFC = 0xB6,
  FF_STALLED = 0xB7,
  FG_MASKS = 0xB8,
  FG_LEFT_MASKS = 0xB9,
  FG_LEFT_MASK_STALLED = 0xBA,
  FG_LEFT_NOT_DONE_STALL = 0xBB,
  FG_LEFT_FG_STALL = 0xBC,
  FG_LEFT_SECTORS = 0xBD,
  FG_RIGHT_MASKS = 0xBE,
  FG_RIGHT_MASK_STALLED = 0xBF,
  FG_RIGHT_NOT_DONE_STALL = 0xC0,
  FG_RIGHT_FG_STALL = 0xC1,
  FG_RIGHT_SECTORS = 0xC2,
  FG0_REQUESTS = 0xC3,
  FG0_STALLED = 0xC4,
  FG1_REQUESTS = 0xC5,
  FG1_STALLED = 0xC6,
  MEM_REQ512 = 0xC7,
  MEM_REQ_SENT = 0xC8,
  MEM_AGP_READ_REQ = 0xC9,
  MEM_LOCAL_READ_REQ = 0xCA,
  TC0_MH_STALLED = 0xCB,
  TC1_MH_STALLED = 0xCC,
};

/*  287 */
enum ColorformatX
{
  COLORX_8_8_8_8 = 0x0,
  COLORX_8_8_8_8_GAMMA = 0x1,
  COLORX_2_10_10_10 = 0x2,
  COLORX_2_10_10_10_FLOAT = 0x3,
  COLORX_16_16 = 0x4,
  COLORX_16_16_16_16 = 0x5,
  COLORX_16_16_FLOAT = 0x6,
  COLORX_16_16_16_16_FLOAT = 0x7,
  COLORX_2_10_10_10_AS_10_10_10_10 = 0xA,
  COLORX_2_10_10_10_FLOAT_AS_16_16_16_16 = 0xC,
  COLORX_32_FLOAT = 0xE,
  COLORX_32_32_FLOAT = 0xF,
};

/*  288 */
enum XGRAPHICS::E_SSM_COMPILEWITH_QUERY
{
  E_COMPILEWITHPOINTSPRITEREPLACEMODENONE = 0x0,
  E_COMPILEWITHPOINTSPRITEREPLACEMODEZERO = 0x1,
  E_COMPILEWITHPOINTSPRITEREPLACEMODES = 0x2,
  E_COMPILEWITHPOINTSPRITEREPLACEMODER = 0x3,
  E_COMPILEWITHPOINTSPRITES = 0x4,
  E_COMPILEWITHVERTEXFOG = 0x5,
  E_COMPILEWITHFOGBLENDINRB = 0x6,
  E_COMPILEWITHBORDERCOLOR = 0x7,
  E_COMPILEWITHTEXTUREDIMENSIONCUBE = 0x8,
  E_COMPILEWITHPIXELFOG = 0x9,
  E_COMPILEWITHPOINTAA = 0xA,
  E_COMPILEWITHLINEAA = 0xB,
  E_COMPILEWITHFOGINDEXOFOG = 0xC,
  E_COMPILEWITHFOGINDEXZ = 0xD,
  E_COMPILEWITHFOGINDEXW = 0xE,
  E_COMPILEWITHTABLEFOGLINEAR = 0xF,
  E_COMPILEWITHTABLEFOGEXP = 0x10,
  E_COMPILEWITHTABLEFOGEXP2 = 0x11,
  E_COMPILEWITHTWOSIDEDLIGHTING = 0x12,
  E_COMPILEWITHTEXPROJECTEDY = 0x13,
  E_COMPILEWITHTEXPROJECTEDZ = 0x14,
  E_COMPILEWITHTEXPROJECTEDW = 0x15,
  E_COMPILEWITHEDGEFLAG = 0x16,
  E_COMPILEWITHPOLYSTIPPLE = 0x17,
  E_COMPILEWITHYUVCONVERSION = 0x18,
  E_COMPILEWITHPOINTMODESHADOWBUFFERING = 0x19,
  E_COMPILEWITHBILINEARMODESHADOWBUFFERING = 0x1A,
  E_COMPILEWITHSHADOWGEQUALCOMPAREFUNC = 0x1B,
  E_COMPILEWITHSHADOWLEQUALCOMPAREFUNC = 0x1C,
  E_COMPILEWITHSHADOWUSAGELUMINANCE = 0x1D,
  E_COMPILEWITHSHADOWUSAGEINTENSITY = 0x1E,
  E_COMPILEWITHSHADOWUSAGEALPHA = 0x1F,
  E_COMPILEWITHCXVUTEXTUREFORMAT = 0x20,
  E_COMPILEWITHVERTEXSTREAMFREQUENCYDIVIDE = 0x21,
  E_COMPILEWITHCOLORCLAMPNONE = 0x22,
  E_COMPILEWITHCOLORCLAMP01 = 0x23,
  E_COMPILEWITHCOLORCLAMPNEG11 = 0x24,
  E_COMPILEWITHHOSMODE = 0x25,
  E_COMPILEWITHLODCLAMPENABLE = 0x26,
  E_COMPILEWITHTRANSFORMEDVERTICES = 0x27,
  E_COMPILEWITHTABLEFOGALU = 0x28,
  E_COMPILEWITHSHADOWBUFFERING = 0x29,
  E_COMPILEWITHMSAAFILTERFUNCTIONPOINT = 0x2A,
  E_COMPILEWITHPOINTSIZECLAMP = 0x2B,
  E_COMPILEWITH_LAST = 0x2C,
};

/*  289 */
enum DepthformatX
{
  DEPTHX_24_8 = 0x0,
  DEPTHX_24_8_FLOAT = 0x1,
};

/*  290 */
enum CompareFrag
{
  FRAG_NEVER = 0x0,
  FRAG_LESS = 0x1,
  FRAG_EQUAL = 0x2,
  FRAG_LEQUAL = 0x3,
  FRAG_GREATER = 0x4,
  FRAG_NOTEQUAL = 0x5,
  FRAG_GEQUAL = 0x6,
  FRAG_ALWAYS = 0x7,
};

/*  291 */
enum CompareRef
{
  REF_NEVER = 0x0,
  REF_LESS = 0x1,
  REF_EQUAL = 0x2,
  REF_LEQUAL = 0x3,
  REF_GREATER = 0x4,
  REF_NOTEQUAL = 0x5,
  REF_GEQUAL = 0x6,
  REF_ALWAYS = 0x7,
};

/*  292 */
enum StencilOp
{
  STENCIL_KEEP = 0x0,
  STENCIL_ZERO = 0x1,
  STENCIL_REPLACE = 0x2,
  STENCIL_INCR_CLAMP = 0x3,
  STENCIL_DECR_CLAMP = 0x4,
  STENCIL_INVERT = 0x5,
  STENCIL_INCR_WRAP = 0x6,
  STENCIL_DECR_WRAP = 0x7,
};

/*  293 */
enum BlendOpX
{
  BLENDX_ZERO = 0x0,
  BLENDX_ONE = 0x1,
  BLENDX_SRC_COLOR = 0x4,
  BLENDX_ONE_MINUS_SRC_COLOR = 0x5,
  BLENDX_SRC_ALPHA = 0x6,
  BLENDX_ONE_MINUS_SRC_ALPHA = 0x7,
  BLENDX_DST_COLOR = 0x8,
  BLENDX_ONE_MINUS_DST_COLOR = 0x9,
  BLENDX_DST_ALPHA = 0xA,
  BLENDX_ONE_MINUS_DST_ALPHA = 0xB,
  BLENDX_CONSTANT_COLOR = 0xC,
  BLENDX_ONE_MINUS_CONSTANT_COLOR = 0xD,
  BLENDX_CONSTANT_ALPHA = 0xE,
  BLENDX_ONE_MINUS_CONSTANT_ALPHA = 0xF,
  BLENDX_SRC_ALPHA_SATURATE = 0x10,
};

/*  294 */
enum CombFuncX
{
  COMB_DST_PLUS_SRC = 0x0,
  COMB_SRC_MINUS_DST = 0x1,
  COMB_MIN_DST_SRC = 0x2,
  COMB_MAX_DST_SRC = 0x3,
  COMB_DST_MINUS_SRC = 0x4,
  COMB_DST_PLUS_SRC_BIAS = 0x5,
};

/*  295 */
enum XGRAPHICS::E_SSM_COMPILEGET_QUERY
{
  E_COMPILEGETWINCOORDOFFSETSFORPOLYSTIPPLEX = 0x0,
  E_COMPILEGETWINCOORDOFFSETSFORWINCOORDX = 0x1,
  E_COMPILEGETFOGCOLORR = 0x2,
  E_COMPILEGETBORDERCOLORR = 0x3,
  E_COMPILEGETFOGSTART = 0x4,
  E_COMPILEGETFOGDENSITY = 0x5,
  E_COMPILEGETFOGBIAS = 0x6,
  E_COMPILEGETFOGSCALE = 0x7,
  E_COMPILEGETYUVCONSTANTSC00 = 0x8,
  E_COMPILEGETYUVCONSTANTSC10 = 0x9,
  E_COMPILEGETYUVCONSTANTSC20 = 0xA,
  E_COMPILEGETYUVCONSTANTSC30 = 0xB,
  E_COMPILEGETSHADOWFAILTHRESHOLD = 0xC,
  E_COMPILEGETVERTEXSTREAMFREQUENCYDIVIDEINTERVAL = 0xD,
  E_COMPILEGETMEMEXPORTCONSTANT0 = 0xE,
  E_COMPILEGETLODBIAS = 0xF,
  E_COMPILEGETLODCLAMPMAX = 0x10,
  E_COMPILEGETLODCLAMPMIN = 0x11,
  E_COMPILEGETWINCOORDOFFSETSFORPOLYSTIPPLEY = 0x12,
  E_COMPILEGETWINCOORDOFFSETSFORWINCOORDY = 0x13,
  E_COMPILEGETFOGCOLORG = 0x14,
  E_COMPILEGETFOGCOLORB = 0x15,
  E_COMPILEGETFOGCOLORA = 0x16,
  E_COMPILEGETBORDERCOLORG = 0x17,
  E_COMPILEGETBORDERCOLORB = 0x18,
  E_COMPILEGETBORDERCOLORA = 0x19,
  E_COMPILEGETFOGEND = 0x1A,
  E_COMPILEGETYUVCONSTANTSC01 = 0x1B,
  E_COMPILEGETYUVCONSTANTSC11 = 0x1C,
  E_COMPILEGETYUVCONSTANTSC21 = 0x1D,
  E_COMPILEGETYUVCONSTANTSC31 = 0x1E,
  E_COMPILEGETYUVCONSTANTSC02 = 0x1F,
  E_COMPILEGETYUVCONSTANTSC12 = 0x20,
  E_COMPILEGETYUVCONSTANTSC22 = 0x21,
  E_COMPILEGETYUVCONSTANTSC32 = 0x22,
  E_COMPILEGETYUVCONSTANTSC03 = 0x23,
  E_COMPILEGETYUVCONSTANTSC13 = 0x24,
  E_COMPILEGETYUVCONSTANTSC23 = 0x25,
  E_COMPILEGETYUVCONSTANTSC33 = 0x26,
  E_COMPILEGETMEMEXPORTCONSTANT1 = 0x27,
  E_COMPILEGETMEMEXPORTCONSTANT2 = 0x28,
  E_COMPILEGETMEMEXPORTCONSTANT3 = 0x29,
  E_COMPILEGETPOINTSIZEMAX = 0x2A,
  E_COMPILEGETPOINTSIZEMIN = 0x2B,
  E_COMPILEGET_LAST = 0x2C,
};

/*  296 */
enum TileDepthFunc
{
  TILE_LTE = 0x0,
  TILE_GTE = 0x1,
};

/*  297 */
enum TileStencilFunc
{
  TILE_EQ = 0x0,
  TILE_NEQ = 0x1,
};

/*  298 */
enum EdramMode
{
  EDRAM_NOP = 0x0,
  COLOR_DEPTH = 0x4,
  DOUBLE_DEPTH = 0x5,
  EDRAM_COPY = 0x6,
};

/*  299 */
enum CopySrcSelect
{
  SRC_CRT0 = 0x0,
  SRC_CRT1 = 0x1,
  SRC_CRT2 = 0x2,
  SRC_CRT3 = 0x3,
  SRC_Z = 0x4,
};

/*  300 */
enum VC_PERFCOUNT_SELECT
{
  RG_VERTICES = 0x0,
  RG_CLAMPED = 0x1,
  RG_L2_REQUEST = 0x2,
  RG_L1_REQUEST = 0x3,
  RG_MEGAFETCH = 0x4,
  RG_END_OF_GROUP = 0x5,
  RG_CONFLICT = 0x6,
  RG_DWORDS_REQUESTED = 0x7,
  RG_SPARE0 = 0x8,
  RG_SPARE1 = 0x9,
  CC_STALLS = 0xA,
  CC_HITS = 0xB,
  CC_MISSES = 0xC,
  CC_SECTOR_MISSES = 0xD,
  CC_L2B_STALLS = 0xE,
  CC_MI_STALLS = 0xF,
  CC_MULTICYCLE_STALLS = 0x10,
  CC_EVEN_ALLOC_STALLS = 0x11,
  CC_ODD_ALLOC_STALLS = 0x12,
  CC_EVEN_BUSY_STALLS = 0x13,
  CC_ODD_BUSY_STALLS = 0x14,
  CC_IN_FIFO_EMPTY = 0x15,
  CC_IN_FIFO_FULL = 0x16,
  CC_FREEZE = 0x17,
  CC_SPARE0 = 0x18,
  CC_SPARE1 = 0x19,
  CC_SPARE2 = 0x1A,
  CC_SPARE3 = 0x1B,
  CC_SPARE4 = 0x1C,
  CC_SPARE5 = 0x1D,
  MI_REQUESTS_TO_MH = 0x1E,
  MI_AGP_REQUESTS = 0x1F,
  MI_LATENCY_BITS_4_0 = 0x20,
  MI_LATENCY_BITS_9_5 = 0x21,
  MI_LATENCY_BITS_14_10 = 0x22,
  MI_LATENCY_BITS_17_15 = 0x23,
  MI_INPUT_FIFOS_FULL = 0x24,
  MI_INPUT_FIFOS_0_FULL = 0x25,
  MI_INPUT_FIFOS_1_FULL = 0x26,
  MI_SPARE1 = 0x27,
  RP_SP_DATA_VALID = 0x28,
  RP_STALLED = 0x29,
  RP_SPARE0 = 0x2A,
  RP_SPARE1 = 0x2B,
  RP_SPARE2 = 0x2C,
  RP_SPARE3 = 0x2D,
  RP_SPARE4 = 0x2E,
  RP_SPARE5 = 0x2F,
  RP_SPARE6 = 0x30,
  RP_SPARE7 = 0x31,
  DC_NUM_VALIDS = 0x32,
  DC_SPARE0 = 0x33,
  DC_SPARE1 = 0x34,
  DC_SPARE2 = 0x35,
  DC_SPARE3 = 0x36,
  DC_SPARE4 = 0x37,
  DC_SPARE5 = 0x38,
  DC_SPARE6 = 0x39,
  DC_SPARE7 = 0x3A,
  DC_SPARE8 = 0x3B,
  SQ_VC_SEND = 0x3C,
  VC_STARVED_IDLE = 0x3D,
  VC_BUSY = 0x3E,
  VC_IDLE = 0x3F,
  VC_SPARE0 = 0x40,
  VC_SPARE1 = 0x41,
  VC_SPARE2 = 0x42,
  VC_SPARE3 = 0x43,
  VC_SPARE4 = 0x44,
  VC_SPARE5 = 0x45,
};

/*  301 */
enum CopyFmtCommand
{
  RAW = 0x0,
  CONV_FORMAT = 0x1,
  U1U1U1U1 = 0x2,
  NULL_COPY = 0x3,
};

/*  302 */
enum SurfaceEndian
{
  ENDIAN_NONE = 0x0,
  ENDIAN_8IN16 = 0x1,
  ENDIAN_8IN32 = 0x2,
  ENDIAN_16IN32 = 0x3,
  ENDIAN_8IN64 = 0x4,
  ENDIAN_8IN128 = 0x5,
};

/*  303 */
enum ColorArrayX
{
  ARRAYX_2D_COLOR = 0x0,
  ARRAYX_3D_SLICE_COLOR = 0x1,
};

/*  304 */
enum XGRAPHICS::_E_CP_CONSTCTRL_TYPE
{
  E_CP_CONSTCTRL_VALUE = 0x0,
  E_CP_CONSTCTRL_NAME = 0x1,
};

/*  305 */
enum ColorFormat
{
  COLOR_8 = 0x2,
  COLOR_1_5_5_5 = 0x3,
  COLOR_5_6_5 = 0x4,
  COLOR_6_5_5 = 0x5,
  COLOR_8_8_8_8 = 0x6,
  COLOR_2_10_10_10 = 0x7,
  COLOR_8_A = 0x8,
  COLOR_8_B = 0x9,
  COLOR_8_8 = 0xA,
  COLOR_8_8_8_8_A = 0xE,
  COLOR_4_4_4_4 = 0xF,
  COLOR_10_11_11 = 0x10,
  COLOR_11_11_10 = 0x11,
  COLOR_16 = 0x18,
  COLOR_16_16 = 0x19,
  COLOR_16_16_16_16 = 0x1A,
  COLOR_16_FLOAT = 0x1E,
  COLOR_16_16_FLOAT = 0x1F,
  COLOR_16_16_16_16_FLOAT = 0x20,
  COLOR_32_FLOAT = 0x24,
  COLOR_32_32_FLOAT = 0x25,
  COLOR_32_32_32_32_FLOAT = 0x26,
};

/*  306 */
enum XGRAPHICS::_E_CP_CONSTCTRL_OP
{
  E_CP_CONSTCTRL_OP_COPY = 0x0,
  E_CP_CONSTCTRL_OP_TOO_BIG = 0x1,
};

/*  307 */
enum SurfaceNumberX
{
  NUMBERX_UREPEAT = 0x0,
  NUMBERX_SREPEAT = 0x1,
  NUMBERX_UINTEGER = 0x2,
  NUMBERX_SINTEGER = 0x3,
  NUMBERX_FLOAT = 0x7,
};

/*  308 */
enum XGRAPHICS::E_IA_FLOAT_CHANNEL
{
  E_IA_FLOAT_CHANNEL_X = 0x0,
  E_IA_FLOAT_CHANNEL_Y = 0x1,
  E_IA_FLOAT_CHANNEL_Z = 0x2,
  E_IA_FLOAT_CHANNEL_W = 0x3,
};

/*  309 */
enum SurfaceSwap
{
  SWAP_LOWRED = 0x0,
  SWAP_LOWBLUE = 0x1,
};

/*  310 */
enum XGRAPHICS::E_IA_CONSTUSAGE_TYPE
{
  E_EXPLICIT_SCALAR = 0x0,
  E_QUERY_LOOKUP = 0x1,
  E_MEM_EXPORT = 0x2,
  E_IMPLIED = 0x3,
};

/*  311 */
enum RB_PERFCNT_SELECT
{
  BC_CNTX0_BUSY = 0x0,
  BC_CNTX17_BUSY = 0x1,
  BC_RQ_STALLED = 0x2,
  BC_AZ_STALLED = 0x3,
  BC_MH_CPY_STALLED = 0x4,
  BC_MH_EXP_STALLED = 0x5,
  BC_SC_STARVED = 0x6,
  BC_SX_STARVED = 0x7,
  BC_ACC_COUNT = 0x8,
  BC_DRAW_COUNT = 0x9,
  BC_ACC2_COUNT = 0xA,
  BC_DRAW2_COUNT = 0xB,
  BC_SETZ_COUNT = 0xC,
  BC_READ_COUNT = 0xD,
  BC_READ_ACC_COUNT = 0xE,
  BC_STATE_COUNT = 0xF,
  BC_STATE2_COUNT = 0x10,
  BC_COPY_WRITE_COUNT = 0x11,
  BC_EXPORT_COUNT = 0x12,
};

/*  312 */
enum DepthFormat
{
  DEPTH_24_8 = 0x16,
  DEPTH_24_8_FLOAT = 0x17,
  DEPTH_16 = 0x18,
};

/*  313 */
enum SQ_PERFCNT_SELECT
{
  SQ_PIXEL_VECTORS_SUB = 0x0,
  SQ_VERTEX_VECTORS_SUB = 0x1,
  SQ_ALU0_ACTIVE_VTX_SIMD0 = 0x2,
  SQ_ALU1_ACTIVE_VTX_SIMD0 = 0x3,
  SQ_ALU0_ACTIVE_PIX_SIMD0 = 0x4,
  SQ_ALU1_ACTIVE_PIX_SIMD0 = 0x5,
  SQ_ALU0_ACTIVE_VTX_SIMD1 = 0x6,
  SQ_ALU1_ACTIVE_VTX_SIMD1 = 0x7,
  SQ_ALU0_ACTIVE_PIX_SIMD1 = 0x8,
  SQ_ALU1_ACTIVE_PIX_SIMD1 = 0x9,
  SQ_EXPORT_CYCLES = 0xA,
  SQ_ALU_CST_WRITTEN = 0xB,
  SQ_TEX_CST_WRITTEN = 0xC,
  SQ_ALU_CST_STALL = 0xD,
  SQ_ALU_TEX_STALL = 0xE,
  SQ_INST_WRITTEN = 0xF,
  SQ_BOOLEAN_WRITTEN = 0x10,
  SQ_LOOPS_WRITTEN = 0x11,
  SQ_PIXEL_SWAP_IN = 0x12,
  SQ_PIXEL_SWAP_OUT = 0x13,
  SQ_VERTEX_SWAP_IN = 0x14,
  SQ_VERTEX_SWAP_OUT = 0x15,
  SQ_ALU_VTX_INST_ISSUED = 0x16,
  SQ_TEX_VTX_INST_ISSUED = 0x17,
  SQ_VC_VTX_INST_ISSUED = 0x18,
  SQ_CF_VTX_INST_ISSUED = 0x19,
  SQ_ALU_PIX_INST_ISSUED = 0x1A,
  SQ_TEX_PIX_INST_ISSUED = 0x1B,
  SQ_VC_PIX_INST_ISSUED = 0x1C,
  SQ_CF_PIX_INST_ISSUED = 0x1D,
  SQ_ALU0_FIFO_EMPTY_SIMD0 = 0x1E,
  SQ_ALU1_FIFO_EMPTY_SIMD0 = 0x1F,
  SQ_ALU0_FIFO_EMPTY_SIMD1 = 0x20,
  SQ_ALU1_FIFO_EMPTY_SIMD1 = 0x21,
  SQ_ALU_NOPS = 0x22,
  SQ_PRED_SKIP = 0x23,
  SQ_SYNC_ALU_STALL_SIMD0_VTX = 0x24,
  SQ_SYNC_ALU_STALL_SIMD1_VTX = 0x25,
  SQ_SYNC_TEX_STALL_VTX = 0x26,
  SQ_SYNC_VC_STALL_VTX = 0x27,
  SQ_CONSTANTS_USED_SIMD0 = 0x28,
  SQ_CONSTANTS_SENT_SP_SIMD0 = 0x29,
  SQ_GPR_STALL_VTX = 0x2A,
  SQ_GPR_STALL_PIX = 0x2B,
  SQ_VTX_RS_STALL = 0x2C,
  SQ_PIX_RS_STALL = 0x2D,
  SQ_SX_PC_FULL = 0x2E,
  SQ_SX_EXP_BUFF_FULL = 0x2F,
  SQ_SX_POS_BUFF_FULL = 0x30,
  SQ_INTERP_QUADS = 0x31,
  SQ_INTERP_ACTIVE = 0x32,
  SQ_IN_PIXEL_STALL = 0x33,
  SQ_IN_VTX_STALL = 0x34,
  SQ_VTX_CNT = 0x35,
  SQ_VTX_16_VECTOR = 0x36,
  SQ_VTX_32_VECTOR = 0x37,
  SQ_VTX_48_VECTOR = 0x38,
  SQ_PIXEL_16_VECTOR = 0x39,
  SQ_PIXEL_32_VECTOR = 0x3A,
  SQ_PIXEL_48_VECTOR = 0x3B,
  SQ_CONSTANTS_USED_SIMD1 = 0x3C,
  SQ_CONSTANTS_SENT_SP_SIMD1 = 0x3D,
  SQ_SX_MEM_EXP_FULL = 0x3E,
  SQ_ALU0_ACTIVE_VTX_SIMD2 = 0x3F,
  SQ_ALU1_ACTIVE_VTX_SIMD2 = 0x40,
  SQ_ALU0_ACTIVE_PIX_SIMD2 = 0x41,
  SQ_ALU1_ACTIVE_PIX_SIMD2 = 0x42,
  SQ_ALU0_ACTIVE_VTX_SIMD3 = 0x43,
  SQ_ALU1_ACTIVE_VTX_SIMD3 = 0x44,
  SQ_ALU0_ACTIVE_PIX_SIMD3 = 0x45,
  SQ_ALU1_ACTIVE_PIX_SIMD3 = 0x46,
  SQ_ALU0_FIFO_EMPTY_SIMD2 = 0x47,
  SQ_ALU1_FIFO_EMPTY_SIMD2 = 0x48,
  SQ_ALU0_FIFO_EMPTY_SIMD3 = 0x49,
  SQ_ALU1_FIFO_EMPTY_SIMD3 = 0x4A,
  SQ_SYNC_ALU_STALL_SIMD2_VTX = 0x4B,
  SQ_SYNC_ALU_STALL_SIMD3_VTX = 0x4C,
  SQ_SYNC_ALU_STALL_SIMD0_PIX = 0x4D,
  SQ_SYNC_ALU_STALL_SIMD1_PIX = 0x4E,
  SQ_SYNC_ALU_STALL_SIMD2_PIX = 0x4F,
  SQ_SYNC_ALU_STALL_SIMD3_PIX = 0x50,
  SQ_SYNC_TEX_STALL_PIX = 0x51,
  SQ_SYNC_VC_STALL_PIX = 0x52,
  SQ_CONSTANTS_USED_SIMD2 = 0x53,
  SQ_CONSTANTS_SENT_SP_SIMD2 = 0x54,
  SQ_CONSTANTS_USED_SIMD3 = 0x55,
  SQ_CONSTANTS_SENT_SP_SIMD3 = 0x56,
  SQ_ALU0_FIFO_FULL_SIMD0 = 0x57,
  SQ_ALU1_FIFO_FULL_SIMD0 = 0x58,
  SQ_ALU0_FIFO_FULL_SIMD1 = 0x59,
  SQ_ALU1_FIFO_FULL_SIMD1 = 0x5A,
  SQ_ALU0_FIFO_FULL_SIMD2 = 0x5B,
  SQ_ALU1_FIFO_FULL_SIMD2 = 0x5C,
  SQ_ALU0_FIFO_FULL_SIMD3 = 0x5D,
  SQ_ALU1_FIFO_FULL_SIMD3 = 0x5E,
  VC_PERF_STATIC = 0x5F,
  VC_PERF_STALLED = 0x60,
  VC_PERF_STARVED = 0x61,
  VC_PERF_SEND = 0x62,
  VC_PERF_ACTUAL_STARVED = 0x63,
  PIXEL_THREAD_0_ACTIVE = 0x64,
  VERTEX_THREAD_0_ACTIVE = 0x65,
  PIXEL_THREAD_0_NUMBER = 0x66,
  VERTEX_THREAD_0_NUMBER = 0x67,
  VERTEX_EVENT_NUMBER = 0x68,
  PIXEL_EVENT_NUMBER = 0x69,
};

/*  314 */
enum DepthArray
{
  ARRAY_2D_ALT_DEPTH = 0x0,
  ARRAY_2D_DEPTH = 0x1,
};

/*  315 */
enum ColorArray
{
  ARRAY_2D_ALT_COLOR = 0x0,
  ARRAY_2D_COLOR = 0x1,
  ARRAY_3D_SLICE_COLOR = 0x3,
};

/*  316 */
enum SurfaceNumber
{
  NUMBER_UREPEAT = 0x0,
  NUMBER_SREPEAT = 0x1,
  NUMBER_UINTEGER = 0x2,
  NUMBER_SINTEGER = 0x3,
  NUMBER_GAMMA = 0x4,
  NUMBER_FIXED = 0x5,
  NUMBER_FLOAT = 0x7,
};

/*  317 */
enum SurfaceFormat
{
  FMT_1_REVERSE = 0x0,
  FMT_1 = 0x1,
  FMT_8 = 0x2,
  FMT_1_5_5_5 = 0x3,
  FMT_5_6_5 = 0x4,
  FMT_6_5_5 = 0x5,
  FMT_8_8_8_8 = 0x6,
  FMT_2_10_10_10 = 0x7,
  FMT_8_A = 0x8,
  FMT_8_B = 0x9,
  FMT_8_8 = 0xA,
  FMT_Cr_Y1_Cb_Y0 = 0xB,
  FMT_Y1_Cr_Y0_Cb = 0xC,
  FMT_8_8_8_8_A = 0xE,
  FMT_4_4_4_4 = 0xF,
  FMT_10_11_11 = 0x10,
  FMT_11_11_10 = 0x11,
  FMT_DXT1 = 0x12,
  FMT_DXT2_3 = 0x13,
  FMT_DXT4_5 = 0x14,
  FMT_24_8 = 0x16,
  FMT_24_8_FLOAT = 0x17,
  FMT_16 = 0x18,
  FMT_16_16 = 0x19,
  FMT_16_16_16_16 = 0x1A,
  FMT_16_EXPAND = 0x1B,
  FMT_16_16_EXPAND = 0x1C,
  FMT_16_16_16_16_EXPAND = 0x1D,
  FMT_16_FLOAT = 0x1E,
  FMT_16_16_FLOAT = 0x1F,
  FMT_16_16_16_16_FLOAT = 0x20,
  FMT_32 = 0x21,
  FMT_32_32 = 0x22,
  FMT_32_32_32_32 = 0x23,
  FMT_32_FLOAT = 0x24,
  FMT_32_32_FLOAT = 0x25,
  FMT_32_32_32_32_FLOAT = 0x26,
  FMT_32_AS_8 = 0x27,
  FMT_32_AS_8_8 = 0x28,
  FMT_16_MPEG = 0x29,
  FMT_16_16_MPEG = 0x2A,
  FMT_8_INTERLACED = 0x2B,
  FMT_32_AS_8_INTERLACED = 0x2C,
  FMT_32_AS_8_8_INTERLACED = 0x2D,
  FMT_16_INTERLACED = 0x2E,
  FMT_16_MPEG_INTERLACED = 0x2F,
  FMT_16_16_MPEG_INTERLACED = 0x30,
  FMT_DXN = 0x31,
  FMT_8_8_8_8_AS_16_16_16_16 = 0x32,
  FMT_DXT1_AS_16_16_16_16 = 0x33,
  FMT_DXT2_3_AS_16_16_16_16 = 0x34,
  FMT_DXT4_5_AS_16_16_16_16 = 0x35,
  FMT_2_10_10_10_AS_16_16_16_16 = 0x36,
  FMT_10_11_11_AS_16_16_16_16 = 0x37,
  FMT_11_11_10_AS_16_16_16_16 = 0x38,
  FMT_32_32_32_FLOAT = 0x39,
  FMT_DXT3A = 0x3A,
  FMT_DXT5A = 0x3B,
  FMT_CTX1 = 0x3C,
  FMT_DXT3A_AS_1_1_1_1 = 0x3D,
};

/*  318 */
enum XGRAPHICS::SSM_COMPILEWITH_FUNCTION
{
  CWF_COMPILEWITHPOINTSPRITEREPLACEMODENONE = 0x0,
  CWF_COMPILEWITHPOINTSPRITEREPLACEMODEZERO = 0x1,
  CWF_COMPILEWITHPOINTSPRITEREPLACEMODES = 0x2,
  CWF_COMPILEWITHPOINTSPRITEREPLACEMODER = 0x3,
  CWF_COMPILEWITHPOINTSPRITES = 0x4,
  CWF_COMPILEGETWINCOORDOFFSETSFORPOLYSTIPPLEX = 0x5,
  CWF_COMPILEGETWINCOORDOFFSETSFORWINCOORDX = 0x6,
  CWF_COMPILEWITHVERTEXFOG = 0x7,
  CWF_COMPILEWITHFOGBLENDINRB = 0x8,
  CWF_COMPILEGETFOGCOLORR = 0x9,
  CWF_COMPILEWITHBORDERCOLOR = 0xA,
  CWF_COMPILEGETBORDERCOLORR = 0xB,
  CWF_COMPILEGETTEXCLAMPMODE = 0xC,
  CWF_COMPILEGETTEXTYPE = 0xD,
  CWF_COMPILEWITHTEXTUREDIMENSIONCUBE = 0xE,
  CWF_COMPILEWITHPIXELFOG = 0xF,
  CWF_COMPILEWITHPOINTAA = 0x10,
  CWF_COMPILEWITHLINEAA = 0x11,
  CWF_COMPILEWITHFOGINDEXOFOG = 0x12,
  CWF_COMPILEWITHFOGINDEXZ = 0x13,
  CWF_COMPILEWITHFOGINDEXW = 0x14,
  CWF_COMPILEWITHTABLEFOGLINEAR = 0x15,
  CWF_COMPILEWITHTABLEFOGEXP = 0x16,
  CWF_COMPILEWITHTABLEFOGEXP2 = 0x17,
  CWF_COMPILEGETFOGSTART = 0x18,
  CWF_COMPILEGETFOGDENSITY = 0x19,
  CWF_COMPILEGETFOGBIAS = 0x1A,
  CWF_COMPILEGETFOGSCALE = 0x1B,
  CWF_COMPILEGETVERTEXNUMFETCHES = 0x1C,
  CWF_COMPILEGETVERTEXFETCHMASK = 0x1D,
  CWF_COMPILEGETVERTEXFORMATDATA = 0x1E,
  CWF_COMPILEGETTEXTUREFORMATDATA = 0x1F,
  CWF_COMPILEWITHTWOSIDEDLIGHTING = 0x20,
  CWF_COMPILEWITHTEXPROJECTEDY = 0x21,
  CWF_COMPILEWITHTEXPROJECTEDZ = 0x22,
  CWF_COMPILEWITHTEXPROJECTEDW = 0x23,
  CWF_COMPILEWITHEDGEFLAG = 0x24,
  CWF_COMPILEGETEDGESTREAM = 0x25,
  CWF_COMPILEWITHPOLYSTIPPLE = 0x26,
  CWF_COMPILEWITHYUVCONVERSION = 0x27,
  CWF_COMPILEGETYUVCONSTANTSC00 = 0x28,
  CWF_COMPILEGETYUVCONSTANTSC10 = 0x29,
  CWF_COMPILEGETYUVCONSTANTSC20 = 0x2A,
  CWF_COMPILEGETYUVCONSTANTSC30 = 0x2B,
  CWF_COMPILEWITHPOINTMODESHADOWBUFFERING = 0x2C,
  CWF_COMPILEWITHBILINEARMODESHADOWBUFFERING = 0x2D,
  CWF_COMPILEWITHSHADOWGEQUALCOMPAREFUNC = 0x2E,
  CWF_COMPILEWITHSHADOWLEQUALCOMPAREFUNC = 0x2F,
  CWF_COMPILEWITHSHADOWUSAGELUMINANCE = 0x30,
  CWF_COMPILEWITHSHADOWUSAGEINTENSITY = 0x31,
  CWF_COMPILEWITHSHADOWUSAGEALPHA = 0x32,
  CWF_COMPILEGETSHADOWFAILTHRESHOLD = 0x33,
  CWF_COMPILEWITHCXVUTEXTUREFORMAT = 0x34,
  CWF_COMPILEWITHVERTEXSTREAMFREQUENCYDIVIDE = 0x35,
  CWF_COMPILEGETVERTEXSTREAMFREQUENCYDIVIDEINTERVAL = 0x36,
  CWF_COMPILEGETINTEGERCONSTREGISTER = 0x37,
  CWF_COMPILEGETBOOLEANCONSTREGISTER = 0x38,
  CWF_COMPILEWITHCOLORCLAMPNONE = 0x39,
  CWF_COMPILEWITHCOLORCLAMP01 = 0x3A,
  CWF_COMPILEWITHCOLORCLAMPNEG11 = 0x3B,
  CWF_COMPILEWITHHOSMODE = 0x3C,
  CWF_COMPILEGETHOSMODE = 0x3D,
  CWF_COMPILEGETMEMEXPORTCONSTANT0 = 0x3E,
  CWF_COMPILEWITHLODCLAMPENABLE = 0x3F,
  CWF_COMPILEGETLODBIAS = 0x40,
  CWF_COMPILEGETLODCLAMPMAX = 0x41,
  CWF_COMPILEGETLODCLAMPMIN = 0x42,
  CWF_COMPILEGETWINCOORDOFFSETSFORPOLYSTIPPLEY = 0x43,
  CWF_COMPILEGETWINCOORDOFFSETSFORWINCOORDY = 0x44,
  CWF_COMPILEGETFOGCOLORG = 0x45,
  CWF_COMPILEGETFOGCOLORB = 0x46,
  CWF_COMPILEGETFOGCOLORA = 0x47,
  CWF_COMPILEGETBORDERCOLORG = 0x48,
  CWF_COMPILEGETBORDERCOLORB = 0x49,
  CWF_COMPILEGETBORDERCOLORA = 0x4A,
  CWF_COMPILEGETFOGEND = 0x4B,
  CWF_COMPILEGETYUVCONSTANTSC01 = 0x4C,
  CWF_COMPILEGETYUVCONSTANTSC11 = 0x4D,
  CWF_COMPILEGETYUVCONSTANTSC21 = 0x4E,
  CWF_COMPILEGETYUVCONSTANTSC31 = 0x4F,
  CWF_COMPILEGETYUVCONSTANTSC02 = 0x50,
  CWF_COMPILEGETYUVCONSTANTSC12 = 0x51,
  CWF_COMPILEGETYUVCONSTANTSC22 = 0x52,
  CWF_COMPILEGETYUVCONSTANTSC32 = 0x53,
  CWF_COMPILEGETYUVCONSTANTSC03 = 0x54,
  CWF_COMPILEGETYUVCONSTANTSC13 = 0x55,
  CWF_COMPILEGETYUVCONSTANTSC23 = 0x56,
  CWF_COMPILEGETYUVCONSTANTSC33 = 0x57,
  CWF_COMPILEGETMEMEXPORTCONSTANT1 = 0x58,
  CWF_COMPILEGETMEMEXPORTCONSTANT2 = 0x59,
  CWF_COMPILEGETMEMEXPORTCONSTANT3 = 0x5A,
  CWF_COMPILEWITHTRANSFORMEDVERTICES = 0x5B,
  CWF_COMPILEWITHTABLEFOGALU = 0x5C,
  CWF_COMPILEGETZSCALE = 0x5D,
  CWF_COMPILEGETZOFFSET = 0x5E,
  CWF_COMPILEGETMEMEXPORTCONSTANT0PIX = 0x5F,
  CWF_COMPILEGETMEMEXPORTCONSTANT1PIX = 0x60,
  CWF_COMPILEGETMEMEXPORTCONSTANT2PIX = 0x61,
  CWF_COMPILEGETMEMEXPORTCONSTANT3PIX = 0x62,
  CWF_COMPILEWITHMAXSIZEVFETCHES = 0x63,
  CWF_COMPILEGETVERTEXDWORDSFETCHED = 0x64,
  CWF_COMPILEWITHSHADOWBUFFERING = 0x65,
  CWF_COMPILEWIHTMSAAFILTERFUNCTIONPOINT = 0x66,
  CWF_COMPILEGETPOINTSIZEMAX = 0x67,
  CWF_COMPILEGETPOINTSIZEMIN = 0x68,
  CWF_COMPILEWITHPOINTSIZECLAMP = 0x69,
  CWF_COMPILEWITH_LAST = 0x6A,
};

/*  319 */
enum SurfaceTiling
{
  ARRAY_LINEAR = 0x0,
  ARRAY_TILED = 0x1,
};

/*  320 */
enum SurfaceArray
{
  ARRAY_1D = 0x0,
  ARRAY_2D = 0x1,
  ARRAY_3D = 0x2,
  ARRAY_3D_SLICE = 0x3,
};

/*  321 */
enum XGRAPHICS::_E_FETCH_CONSTSEL
{
  E_FETCH_CONSTSEL_LOW = 0x0,
  E_FETCH_CONSTSEL_MIDDLE = 0x1,
  E_FETCH_CONSTSEL_HIGH = 0x2,
  E_FETCH_CONSTSEL_NONE = 0x3,
};

/*  322 */
enum SX_PERFCNT_SELECT
{
  SX_SC_QUADS = 0x0,
  SX_SC_QUAD_FIFO_FULL = 0x1,
  SX_EXPORT_VECTORS = 0x2,
  SX_DUMMY_QUADS = 0x3,
  SX_ALPHA_FAIL = 0x4,
  SX_RB_QUAD_BUSY = 0x5,
  SX_RB_COLOR_BUSY = 0x6,
  SX_RB_QUAD_STALL = 0x7,
  SX_RB_COLOR_STALL = 0x8,
};

/*  323 */
enum Abs_modifier
{
  NO_ABS_MOD = 0x0,
  ABS_MOD = 0x1,
};

/*  324 */
enum Exporting
{
  NOT_EXPORTING = 0x0,
  EXPORTING = 0x1,
};

/*  325 */
enum ScalarOpcode
{
  ADDs = 0x0,
  ADD_PREVs = 0x1,
  MULs = 0x2,
  MUL_PREVs = 0x3,
  MUL_PREV2s = 0x4,
  MAXs = 0x5,
  MINs = 0x6,
  SETEs = 0x7,
  SETGTs = 0x8,
  SETGTEs = 0x9,
  SETNEs = 0xA,
  FRACs = 0xB,
  TRUNCs = 0xC,
  FLOORs = 0xD,
  EXP_IEEE = 0xE,
  LOG_CLAMP = 0xF,
  LOG_IEEE = 0x10,
  RECIP_CLAMP = 0x11,
  RECIP_FF = 0x12,
  RECIP_IEEE = 0x13,
  RECIPSQ_CLAMP = 0x14,
  RECIPSQ_FF = 0x15,
  RECIPSQ_IEEE = 0x16,
  MOVAs = 0x17,
  MOVA_FLOORs = 0x18,
  SUBs = 0x19,
  SUB_PREVs = 0x1A,
  PRED_SETEs = 0x1B,
  PRED_SETNEs = 0x1C,
  PRED_SETGTs = 0x1D,
  PRED_SETGTEs = 0x1E,
  PRED_SET_INVs = 0x1F,
  PRED_SET_POPs = 0x20,
  PRED_SET_CLRs = 0x21,
  PRED_SET_RESTOREs = 0x22,
  KILLEs = 0x23,
  KILLGTs = 0x24,
  KILLGTEs = 0x25,
  KILLNEs = 0x26,
  KILLONEs = 0x27,
  SQRT_IEEE = 0x28,
  MUL_CONST_0 = 0x2A,
  MUL_CONST_1 = 0x2B,
  ADD_CONST_0 = 0x2C,
  ADD_CONST_1 = 0x2D,
  SUB_CONST_0 = 0x2E,
  SUB_CONST_1 = 0x2F,
  SIN = 0x30,
  COS = 0x31,
  RETAIN_PREV = 0x32,
};

/*  326 */
enum XGRAPHICS::_SSM_COMPILEWITH_RESULT
{
  SSM_CWR_FALSE = 0x0,
  SSM_CWR_TRUE = 0x1,
  SSM_CWR_UNSUPPORTED = 0x2,
  SSM_CWR_WILDCARD = 0x3,
  SSM_CWR_LAST = 0x4,
};

/*  327 */
enum XGRAPHICS::_SSM_HOS_MODE
{
  SSM_HOSSMODE_1 = 0x1,
  SSM_HOSSMODE_2 = 0x2,
  SSM_HOSSMODE_3 = 0x3,
  SSM_HOSSMODE_4 = 0x4,
  SSM_HOSSMODE_5 = 0x5,
  SSM_HOSSMODE_6 = 0x6,
  SSM_HOSSMODE_7 = 0x7,
  SSM_HOSSMODE_8 = 0x8,
  SSM_HOSSMODE_9 = 0x9,
  SSM_HOSSMODE_10 = 0xA,
  SSM_HOSSMODE_11 = 0xB,
  SSM_HOSSMODE_12 = 0xC,
  SSM_HOSSMODE_13 = 0xD,
  SSM_HOSSMODE_14 = 0xE,
  SSM_HOSSMODE_15 = 0xF,
  SSM_HOSSMODE_16 = 0x10,
  SSM_HOSSMODE_17 = 0x11,
  SSM_HOSSMODE_18 = 0x12,
  SSM_HOSSMODE_LAST = 0x13,
};

/*  328 */
enum XGRAPHICS::_E_COMPILED_PROGRAM_TYPE
{
  E_CP_NON_REALTIME = 0x0,
  E_CP_NON_REALTIME_HOS = 0x1,
  E_CP_REALTIME = 0x2,
};

/*  329 */
enum SwizzleType
{
  NO_SWIZZLE = 0x0,
  SHIFT_RIGHT_1 = 0x1,
  SHIFT_RIGHT_2 = 0x2,
  SHIFT_RIGHT_3 = 0x3,
};

/*  330 */
enum XGRAPHICS::_SSM_COMPILEWITH_CONST
{
  SSM_CWC_XBIASCENTER = 0x0,
  SSM_CWC_XBIASLEFT = 0x1,
  SSM_CWC_YBIASCENTER = 0x2,
  SSM_CWC_YBIASLEFT = 0x3,
};

/*  331 */
enum InputModifier
{
  NIL = 0x0,
  NEGATE = 0x1,
};

/*  332 */
enum OperandSelect1
{
  ABSOLUTE_REG = 0x0,
  RELATIVE_REG = 0x1,
};

/*  333 */
enum XGRAPHICS::_SSM_COMPILEWITH_SHADER_TYPE
{
  SSM_CWC_SHADER_TYPE_VERTEX = 0x0,
  SSM_CWC_SHADER_TYPE_PIXEL = 0x1,
};

/*  334 */
enum VectorOpcode
{
  ADDv = 0x0,
  MULv = 0x1,
  MAXv = 0x2,
  MINv = 0x3,
  SETEv = 0x4,
  SETGTv = 0x5,
  SETGTEv = 0x6,
  SETNEv = 0x7,
  FRACv = 0x8,
  TRUNCv = 0x9,
  FLOORv = 0xA,
  MULADDv = 0xB,
  CNDEv = 0xC,
  CNDGTEv = 0xD,
  CNDGTv = 0xE,
  DOT4v = 0xF,
  DOT3v = 0x10,
  DOT2ADDv = 0x11,
  CUBEv = 0x12,
  MAX4v = 0x13,
  PRED_SETE_PUSHv = 0x14,
  PRED_SETNE_PUSHv = 0x15,
  PRED_SETGT_PUSHv = 0x16,
  PRED_SETGTE_PUSHv = 0x17,
  KILLEv = 0x18,
  KILLGTv = 0x19,
  KILLGTEv = 0x1A,
  KILLNEv = 0x1B,
  DSTv = 0x1C,
  MOVAv = 0x1D,
};

/*  335 */
enum XGRAPHICS::_E_AS_BLOCK_NAME
{
  AS_SHADER_HANDLES = 0x0,
  AS_ALPHA_BLEND = 0x1,
  AS_ALPHA_TEST = 0x2,
  AS_Z = 0x3,
  AS_STENCIL = 0x4,
  AS_SCISSOR = 0x5,
  AS_CLIPPING = 0x6,
  AS_POINT_SPRITE = 0x7,
  AS_VIEW_PORT = 0x8,
  AS_VIEW_PORT_TRANSFORM = 0x9,
  AS_GUARD_BAND = 0xA,
  AS_FOG = 0xB,
  AS_TEXCOORD = 0xC,
  AS_TEX_0 = 0xD,
  AS_TEX_1 = 0xE,
  AS_TEX_2 = 0xF,
  AS_TEX_3 = 0x10,
  AS_TEX_4 = 0x11,
  AS_TEX_5 = 0x12,
  AS_TEX_6 = 0x13,
  AS_TEX_7 = 0x14,
  AS_TEX_8 = 0x15,
  AS_TEX_9 = 0x16,
  AS_TEX_10 = 0x17,
  AS_TEX_11 = 0x18,
  AS_TEX_12 = 0x19,
  AS_TEX_13 = 0x1A,
  AS_TEX_14 = 0x1B,
  AS_TEX_15 = 0x1C,
  AS_TEX_16 = 0x1D,
  AS_TEX_17 = 0x1E,
  AS_TEX_18 = 0x1F,
  AS_TEX_19 = 0x20,
  AS_TEX_20 = 0x21,
  AS_DRAWING = 0x22,
  AS_COLOR_BUFFER = 0x23,
  AS_RENDER_TARGET = 0x24,
  AS_VS_DECL_0 = 0x25,
  AS_VS_DECL_1 = 0x26,
  AS_VS_DECL_2 = 0x27,
  AS_VS_DECL_3 = 0x28,
  AS_VS_DECL_4 = 0x29,
  AS_VS_DECL_5 = 0x2A,
  AS_VS_DECL_6 = 0x2B,
  AS_VS_DECL_7 = 0x2C,
  AS_VS_DECL_8 = 0x2D,
  AS_VS_DECL_9 = 0x2E,
  AS_VS_DECL_10 = 0x2F,
  AS_VS_DECL_11 = 0x30,
  AS_VS_DECL_12 = 0x31,
  AS_VS_DECL_13 = 0x32,
  AS_VS_DECL_14 = 0x33,
  AS_VS_DECL_15 = 0x34,
  AS_VS_DECL_16 = 0x35,
  AS_VS_DECL_17 = 0x36,
  AS_VS_DECL_18 = 0x37,
  AS_VS_DECL_19 = 0x38,
  AS_VS_DECL_20 = 0x39,
  AS_VS_DECL_21 = 0x3A,
  AS_VS_DECL_22 = 0x3B,
  AS_VS_DECL_23 = 0x3C,
  AS_EDGEFLAG = 0x3D,
  AS_AA = 0x3E,
  AS_HOS = 0x3F,
  AS_VIZ_QUERY = 0x40,
  AS_ALPHA_BLEND_CONST_COLORS = 0x41,
  AS_MISC_DRAWING = 0x42,
  AS_STENCIL_MASKS = 0x43,
  AS_VIEW_PORT_SCALES_OFFSETS = 0x44,
  AS_FOG_COLORS = 0x45,
  AS_VERTEX_INDICIES = 0x46,
  AS_COLORBUFFER_WRITE_MASKS = 0x47,
  AS_VS_STREAM_0 = 0x48,
  AS_VS_STREAM_1 = 0x49,
  AS_VS_STREAM_2 = 0x4A,
  AS_VS_STREAM_3 = 0x4B,
  AS_VS_STREAM_4 = 0x4C,
  AS_VS_STREAM_5 = 0x4D,
  AS_VS_STREAM_6 = 0x4E,
  AS_VS_STREAM_7 = 0x4F,
  AS_VS_STREAM_8 = 0x50,
  AS_VS_STREAM_9 = 0x51,
  AS_VS_STREAM_10 = 0x52,
  AS_VS_STREAM_11 = 0x53,
  AS_VS_STREAM_12 = 0x54,
  AS_VS_STREAM_13 = 0x55,
  AS_VS_STREAM_14 = 0x56,
  AS_VS_STREAM_15 = 0x57,
  AS_VS_STREAM_16 = 0x58,
  AS_VS_STREAM_17 = 0x59,
  AS_VS_STREAM_18 = 0x5A,
  AS_VS_STREAM_19 = 0x5B,
  AS_VS_STREAM_20 = 0x5C,
  AS_VS_STREAM_21 = 0x5D,
  AS_VS_STREAM_22 = 0x5E,
  AS_VS_STREAM_23 = 0x5F,
  AS_TEX_ATTRIB_0 = 0x60,
  AS_TEX_ATTRIB_1 = 0x61,
  AS_TEX_ATTRIB_2 = 0x62,
  AS_TEX_ATTRIB_3 = 0x63,
  AS_TEX_ATTRIB_4 = 0x64,
  AS_TEX_ATTRIB_5 = 0x65,
  AS_TEX_ATTRIB_6 = 0x66,
  AS_TEX_ATTRIB_7 = 0x67,
  AS_TEX_ATTRIB_8 = 0x68,
  AS_TEX_ATTRIB_9 = 0x69,
  AS_TEX_ATTRIB_10 = 0x6A,
  AS_TEX_ATTRIB_11 = 0x6B,
  AS_TEX_ATTRIB_12 = 0x6C,
  AS_TEX_ATTRIB_13 = 0x6D,
  AS_TEX_ATTRIB_14 = 0x6E,
  AS_TEX_ATTRIB_15 = 0x6F,
  AS_TEX_ATTRIB_16 = 0x70,
  AS_TEX_ATTRIB_17 = 0x71,
  AS_TEX_ATTRIB_18 = 0x72,
  AS_TEX_ATTRIB_19 = 0x73,
  AS_TEX_ATTRIB_20 = 0x74,
  AS_VS_EXPORT_STREAM_0 = 0x75,
  AS_VS_EXPORT_STREAM_1 = 0x76,
  AS_VS_EXPORT_STREAM_2 = 0x77,
  AS_VS_EXPORT_STREAM_3 = 0x78,
  AS_VS_EXPORT_STREAM_4 = 0x79,
  AS_VS_EXPORT_STREAM_5 = 0x7A,
  AS_VS_EXPORT_STREAM_6 = 0x7B,
  AS_VS_EXPORT_STREAM_7 = 0x7C,
  AS_VS_EXPORT_STREAM_8 = 0x7D,
  AS_VS_EXPORT_STREAM_9 = 0x7E,
  AS_VS_EXPORT_STREAM_10 = 0x7F,
  AS_VS_EXPORT_STREAM_11 = 0x80,
  AS_VS_EXPORT_STREAM_12 = 0x81,
  AS_VS_EXPORT_STREAM_13 = 0x82,
  AS_VS_EXPORT_STREAM_14 = 0x83,
  AS_VS_EXPORT_STREAM_15 = 0x84,
  AS_PS_EXPORT_STREAM_0 = 0x85,
  AS_PS_EXPORT_STREAM_1 = 0x86,
  AS_PS_EXPORT_STREAM_2 = 0x87,
  AS_PS_EXPORT_STREAM_3 = 0x88,
  AS_PS_EXPORT_STREAM_4 = 0x89,
  AS_PS_EXPORT_STREAM_5 = 0x8A,
  AS_PS_EXPORT_STREAM_6 = 0x8B,
  AS_PS_EXPORT_STREAM_7 = 0x8C,
  AS_PS_EXPORT_STREAM_8 = 0x8D,
  AS_PS_EXPORT_STREAM_9 = 0x8E,
  AS_PS_EXPORT_STREAM_10 = 0x8F,
  AS_PS_EXPORT_STREAM_11 = 0x90,
  AS_PS_EXPORT_STREAM_12 = 0x91,
  AS_PS_EXPORT_STREAM_13 = 0x92,
  AS_PS_EXPORT_STREAM_14 = 0x93,
  AS_PS_EXPORT_STREAM_15 = 0x94,
};

/*  336 */
enum OperandSelect0
{
  CONSTANT = 0x0,
  NON_CONSTANT = 0x1,
};

/*  337 */
enum Ressource_type
{
  ALU = 0x0,
  TEXTURE = 0x1,
};

/*  338 */
enum Instruction_serial
{
  NOT_SERIAL = 0x0,
  SERIAL = 0x1,
};

/*  339 */
enum VC_type
{
  ALU_TP_REQUEST = 0x0,
  VC_REQUEST = 0x1,
};

/*  340 */
enum Addressing
{
  RELATIVE_ADDR = 0x0,
  ABSOLUTE_ADDR = 0x1,
};

/*  341 */
enum CFOpcode
{
  NOP = 0x0,
  EXECUTE = 0x1,
  EXECUTE_END = 0x2,
  COND_EXECUTE = 0x3,
  COND_EXECUTE_END = 0x4,
  COND_PRED_EXECUTE = 0x5,
  COND_PRED_EXECUTE_END = 0x6,
  LOOP_START = 0x7,
  LOOP_END = 0x8,
  COND_CALL = 0x9,
  RETURN = 0xA,
  COND_JMP = 0xB,
  ALLOCATE = 0xC,
  COND_EXECUTE_PRED_CLEAN = 0xD,
  COND_EXECUTE_PRED_CLEAN_END = 0xE,
  MARK_VS_FETCH_DONE = 0xF,
};

/*  342 */
enum Allocation_type
{
  SQ_NO_ALLOC = 0x0,
  SQ_POSITION = 0x1,
  SQ_PARAMETER_PIXEL = 0x2,
  SQ_MEMORY = 0x3,
};

/*  343 */
enum VertexMode
{
  POSITION_1_VECTOR = 0x0,
  POSITION_2_VECTORS_UNUSED = 0x1,
  POSITION_2_VECTORS_SPRITE = 0x2,
  POSITION_2_VECTORS_EDGE = 0x3,
  POSITION_2_VECTORS_KILL = 0x4,
  POSITION_2_VECTORS_SPRITE_KILL = 0x5,
  POSITION_2_VECTORS_EDGE_KILL = 0x6,
  MULTIPASS = 0x7,
};

/*  344 */
enum Sample_Cntl
{
  CENTROIDS_ONLY = 0x0,
  CENTERS_ONLY = 0x1,
  CENTROIDS_AND_CENTERS = 0x2,
  UNDEF = 0x3,
};

/*  345 */
enum MC_PERFCNT_SELECT
{
  RANK_BANK0_ACCESSES = 0x0,
  RANK_BANK1_ACCESSES = 0x1,
  RANK_BANK2_ACCESSES = 0x2,
  RANK_BANK3_ACCESSES = 0x3,
  RANK_BANK4_ACCESSES = 0x4,
  RANK_BANK5_ACCESSES = 0x5,
  RANK_BANK6_ACCESSES = 0x6,
  RANK_BANK7_ACCESSES = 0x7,
  RANK_BANK8_ACCESSES = 0x8,
  RANK_BANK9_ACCESSES = 0x9,
  RANK_BANK10_ACCESSES = 0xA,
  RANK_BANK11_ACCESSES = 0xB,
  RANK_BANK12_ACCESSES = 0xC,
  RANK_BANK13_ACCESSES = 0xD,
  RANK_BANK14_ACCESSES = 0xE,
  RANK_BANK15_ACCESSES = 0xF,
  READ_2_WRITE = 0x10,
  WRITE_2_READ = 0x11,
  NEW_PAGE_ACCESSES = 0x12,
  TOTAL_ACCESSES = 0x13,
  READ_ACCESSES = 0x14,
  ACCESS_PRESENT_NO_ISSUE_CLKS = 0x15,
  CMD_PRESENT_NO_XFER_CLKS = 0x16,
  URGENT_DC_ACCESSES = 0x17,
  URGENT_SB_ACCESSES = 0x18,
  URGENT_BIU_ACCESSES = 0x19,
  NEW_BIUF_ACCESSES = 0x1A,
  NEW_CP_ACCESSES = 0x1B,
  NEW_TC_ACCESSES = 0x1C,
  NEW_VC_ACCESSES = 0x1D,
  NEW_BC_CP_ACCESSES = 0x1E,
  NEW_BC_EX_ACCESSES = 0x1F,
  NEW_VGT_ACCESSES = 0x20,
  NEW_DC_ACCESSES = 0x21,
  NEW_SB_ACCESSES = 0x22,
  NEW_BIUS_ACCESSES = 0x23,
  BIUS_READ_ACCESSES = 0x24,
  SB_READ_ACCESSES = 0x25,
  CP_READ_ACCESSES = 0x26,
  NTH_SMPG_ACCESS_IS_BIUF = 0x27,
  NTH_SMPG_ACCESS_IS_CP = 0x28,
  NTH_SMPG_ACCESS_IS_TC = 0x29,
  NTH_SMPG_ACCESS_IS_VC = 0x2A,
  NTH_SMPG_ACCESS_IS_BC_CP = 0x2B,
  NTH_SMPG_ACCESS_IS_BC_EX = 0x2C,
  NTH_SMPG_ACCESS_IS_VGT = 0x2D,
  NTH_SMPG_ACCESS_IS_DC = 0x2E,
  NTH_SMPG_ACCESS_IS_SB = 0x2F,
  NTH_SMPG_ACCESS_IS_BIUS = 0x30,
  N_VALID_ENTRY_IN_TEXTURE_CAM_CLKS = 0x31,
  N_VALID_ENTRY_IN_VC_CAM_CLKS = 0x32,
  N_VALID_ENTRY_IN_BIUS_CAM_CLKS = 0x33,
  N_SB_BUF_USED_CLKS = 0x34,
  N_TC_BUF_USED_CLKS = 0x35,
  N_VC_BUF_USED_CLKS = 0x36,
  N_DC_BUF_USED_CLKS = 0x37,
  N_VGT_BUF_USED_CLKS = 0x38,
  N_CP_BUF_USED_CLKS = 0x39,
};

/*  346 */
enum SU_PERFCNT_SELECT
{
  PERF_PAPC_PASX_REQ = 0x0,
  PERF_PAPC_PASX_DISABLE_PIPE = 0x1,
  PERF_PAPC_PASX_FIRST_VECTOR = 0x2,
  PERF_PAPC_PASX_SECOND_VECTOR = 0x3,
  PERF_PAPC_PASX_FIRST_DEAD = 0x4,
  PERF_PAPC_PASX_SECOND_DEAD = 0x5,
  PERF_PAPC_PASX_VTX_KILL_DISCARD = 0x6,
  PERF_PAPC_PASX_VTX_NAN_DISCARD = 0x7,
  PERF_PAPC_PA_INPUT_PRIM = 0x8,
  PERF_PAPC_PA_INPUT_NULL_PRIM = 0x9,
  PERF_PAPC_PA_INPUT_EVENT_FLAG = 0xA,
  PERF_PAPC_PA_INPUT_FIRST_PRIM_SLOT = 0xB,
  PERF_PAPC_PA_INPUT_END_OF_PACKET = 0xC,
  PERF_PAPC_CLPR_CULL_PRIM = 0xD,
  PERF_PAPC_CLPR_VVUCP_CULL_PRIM = 0xE,
  PERF_PAPC_CLPR_VV_CULL_PRIM = 0xF,
  PERF_PAPC_CLPR_UCP_CULL_PRIM = 0x10,
  PERF_PAPC_CLPR_VTX_KILL_CULL_PRIM = 0x11,
  PERF_PAPC_CLPR_VTX_NAN_CULL_PRIM = 0x12,
  PERF_PAPC_CLPR_CULL_TO_NULL_PRIM = 0x13,
  PERF_PAPC_CLPR_VVUCP_CLIP_PRIM = 0x14,
  PERF_PAPC_CLPR_VV_CLIP_PRIM = 0x15,
  PERF_PAPC_CLPR_UCP_CLIP_PRIM = 0x16,
  PERF_PAPC_CLPR_POINT_CLIP_CANDIDATE = 0x17,
  PERF_PAPC_CLPR_CLIP_PLANE_CNT_1 = 0x18,
  PERF_PAPC_CLPR_CLIP_PLANE_CNT_2 = 0x19,
  PERF_PAPC_CLPR_CLIP_PLANE_CNT_3 = 0x1A,
  PERF_PAPC_CLPR_CLIP_PLANE_CNT_4 = 0x1B,
  PERF_PAPC_CLPR_CLIP_PLANE_CNT_5_8 = 0x1C,
  PERF_PAPC_CLPR_CLIP_PLANE_CNT_9_12 = 0x1D,
  PERF_PAPC_CLPR_CLIP_PLANE_NEAR = 0x1E,
  PERF_PAPC_CLPR_CLIP_PLANE_FAR = 0x1F,
  PERF_PAPC_CLPR_CLIP_PLANE_LEFT = 0x20,
  PERF_PAPC_CLPR_CLIP_PLANE_RIGHT = 0x21,
  PERF_PAPC_CLPR_CLIP_PLANE_TOP = 0x22,
  PERF_PAPC_CLPR_CLIP_PLANE_BOTTOM = 0x23,
  PERF_PAPC_CLSM_NULL_PRIM = 0x24,
  PERF_PAPC_CLSM_TOTALLY_VISIBLE_PRIM = 0x25,
  PERF_PAPC_CLSM_CLIP_PRIM = 0x26,
  PERF_PAPC_CLSM_CULL_TO_NULL_PRIM = 0x27,
  PERF_PAPC_CLSM_OUT_PRIM_CNT_1 = 0x28,
  PERF_PAPC_CLSM_OUT_PRIM_CNT_2 = 0x29,
  PERF_PAPC_CLSM_OUT_PRIM_CNT_3 = 0x2A,
  PERF_PAPC_CLSM_OUT_PRIM_CNT_4 = 0x2B,
  PERF_PAPC_CLSM_OUT_PRIM_CNT_5_8 = 0x2C,
  PERF_PAPC_CLSM_OUT_PRIM_CNT_9_13 = 0x2D,
  PERF_PAPC_CLSM_NON_TRIVIAL_CULL = 0x2E,
  PERF_PAPC_SU_INPUT_PRIM = 0x2F,
  PERF_PAPC_SU_INPUT_CLIP_PRIM = 0x30,
  PERF_PAPC_SU_INPUT_NULL_PRIM = 0x31,
  PERF_PAPC_SU_ZERO_AREA_CULL_PRIM = 0x32,
  PERF_PAPC_SU_BACK_FACE_CULL_PRIM = 0x33,
  PERF_PAPC_SU_FRONT_FACE_CULL_PRIM = 0x34,
  PERF_PAPC_SU_POLYMODE_FACE_CULL = 0x35,
  PERF_PAPC_SU_POLYMODE_BACK_CULL = 0x36,
  PERF_PAPC_SU_POLYMODE_FRONT_CULL = 0x37,
  PERF_PAPC_SU_POLYMODE_INVALID_FILL = 0x38,
  PERF_PAPC_SU_OUTPUT_PRIM = 0x39,
  PERF_PAPC_SU_OUTPUT_CLIP_PRIM = 0x3A,
  PERF_PAPC_SU_OUTPUT_NULL_PRIM = 0x3B,
  PERF_PAPC_SU_OUTPUT_EVENT_FLAG = 0x3C,
  PERF_PAPC_SU_OUTPUT_FIRST_PRIM_SLOT = 0x3D,
  PERF_PAPC_SU_OUTPUT_END_OF_PACKET = 0x3E,
  PERF_PAPC_SU_OUTPUT_POLYMODE_FACE = 0x3F,
  PERF_PAPC_SU_OUTPUT_POLYMODE_BACK = 0x40,
  PERF_PAPC_SU_OUTPUT_POLYMODE_FRONT = 0x41,
  PERF_PAPC_SU_OUT_CLIP_POLYMODE_FACE = 0x42,
  PERF_PAPC_SU_OUT_CLIP_POLYMODE_BACK = 0x43,
  PERF_PAPC_SU_OUT_CLIP_POLYMODE_FRONT = 0x44,
  PERF_PAPC_PASX_REQ_IDLE = 0x45,
  PERF_PAPC_PASX_REQ_BUSY = 0x46,
  PERF_PAPC_PASX_REQ_STALLED = 0x47,
  PERF_PAPC_PASX_REC_IDLE = 0x48,
  PERF_PAPC_PASX_REC_BUSY = 0x49,
  PERF_PAPC_PASX_REC_STARVED_SX = 0x4A,
  PERF_PAPC_PASX_REC_STALLED = 0x4B,
  PERF_PAPC_PASX_REC_STALLED_POS_MEM = 0x4C,
  PERF_PAPC_PASX_REC_STALLED_CCGSM_IN = 0x4D,
  PERF_PAPC_CCGSM_IDLE = 0x4E,
  PERF_PAPC_CCGSM_BUSY = 0x4F,
  PERF_PAPC_CCGSM_STALLED = 0x50,
  PERF_PAPC_CLPRIM_IDLE = 0x51,
  PERF_PAPC_CLPRIM_BUSY = 0x52,
  PERF_PAPC_CLPRIM_STALLED = 0x53,
  PERF_PAPC_CLPRIM_STARVED_CCGSM = 0x54,
  PERF_PAPC_CLIPSM_IDLE = 0x55,
  PERF_PAPC_CLIPSM_BUSY = 0x56,
  PERF_PAPC_CLIPSM_WAIT_CLIP_VERT_ENGH = 0x57,
  PERF_PAPC_CLIPSM_WAIT_HIGH_PRI_SEQ = 0x58,
  PERF_PAPC_CLIPSM_WAIT_CLIPGA = 0x59,
  PERF_PAPC_CLIPSM_WAIT_AVAIL_VTE_CLIP = 0x5A,
  PERF_PAPC_CLIPSM_WAIT_CLIP_OUTSM = 0x5B,
  PERF_PAPC_CLIPGA_IDLE = 0x5C,
  PERF_PAPC_CLIPGA_BUSY = 0x5D,
  PERF_PAPC_CLIPGA_STARVED_VTE_CLIP = 0x5E,
  PERF_PAPC_CLIPGA_STALLED = 0x5F,
  PERF_PAPC_CLIP_IDLE = 0x60,
  PERF_PAPC_CLIP_BUSY = 0x61,
  PERF_PAPC_SU_IDLE = 0x62,
  PERF_PAPC_SU_BUSY = 0x63,
  PERF_PAPC_SU_STARVED_CLIP = 0x64,
  PERF_PAPC_SU_STALLED_SC = 0x65,
};

/*  347 */
enum PerfEncode
{
  cp_read_memory = 0x0,
  cp_read_pglb = 0x1,
  cp_write_memory = 0x2,
  cp_write_snooped = 0x3,
  cp_write_writeback = 0x4,
  mh_cp_rtr = 0x5,
  vgt_read_memory = 0x6,
  vgt_read_pglb = 0x7,
  mh_vgt_rtr = 0x8,
  ioc_read = 0x9,
  ioc_write = 0xA,
  ioc_read_byte_count = 0xB,
  ioc_write_byte_count = 0xC,
  ioc_urgent = 0xD,
  mh_ioc_rtr = 0xE,
  tc0_read = 0xF,
  mh_tc0_rtr = 0x10,
  tc1_read = 0x11,
  mh_tc1_rtr = 0x12,
  vc0_read_memory = 0x13,
  vc0_read_pglb = 0x14,
  mh_vc0_rtr = 0x15,
  vc1_read_memory = 0x16,
  vc1_read_pglb = 0x17,
  mh_vc1_rtr = 0x18,
  bc0_cp_write = 0x19,
  bc0_ex_write = 0x1A,
  mh_bc0_rtr = 0x1B,
  bc1_cp_write = 0x1C,
  bc1_ex_write = 0x1D,
  mh_bc1_rtr = 0x1E,
  dc_graphics_req = 0x1F,
  dc_overlay_req = 0x20,
  dc_urgent = 0x21,
  pglb_biu_req = 0x22,
  biu_pgl_read_data = 0x23,
  pgl_mhs_read_data = 0x24,
  mh_mc0_read_reqs = 0x25,
  mh_mc0_write_reqs = 0x26,
  mh_mc1_read_reqs = 0x27,
  mh_mc1_write_reqs = 0x28,
  mc0_mh_read_data = 0x29,
  mc1_mh_read_data = 0x2A,
  mh_cp_send = 0x2B,
  mh_vgt_send = 0x2C,
  mh_ioc_send = 0x2D,
  mh_tc0_send = 0x2E,
  mh_tc1_send = 0x2F,
  mh_vc0_send = 0x30,
  mh_vc1_send = 0x31,
  mh_dc_send = 0x32,
  dc0_inflight_full = 0x33,
  dc1_inflight_full = 0x34,
  vc0_inflight_full = 0x35,
  vc1_inflight_full = 0x36,
  tc0_inflight_full = 0x37,
  tc1_inflight_full = 0x38,
  cp0_inflight_full = 0x39,
  cp1_inflight_full = 0x3A,
  vgt0_inflight_full = 0x3B,
  vgt1_inflight_full = 0x3C,
  sb0_inflight_full = 0x3D,
  sb1_inflight_full = 0x3E,
  vcpgl_inflight_full = 0x3F,
  cppgl_inflight_full = 0x40,
  vgtpgl_inflight_full = 0x41,
  mc0_dc_q_full = 0x42,
  mc0_vc_q_full = 0x43,
  mc0_tc_q_full = 0x44,
  mc0_cp_q_full = 0x45,
  mc0_sb_q_full = 0x46,
  mc0_vgt_q_full = 0x47,
  mc0_bccp_q_full = 0x48,
  mc0_bcex_q_full = 0x49,
  mc1_dc_q_full = 0x4A,
  mc1_vc_q_full = 0x4B,
  mc1_tc_q_full = 0x4C,
  mc1_cp_q_full = 0x4D,
  mc1_sb_q_full = 0x4E,
  mc1_vgt_q_full = 0x4F,
  mc1_bccp_q_full = 0x50,
  mc1_bcex_q_full = 0x51,
  cp_pgl_cache_hit = 0x52,
  vgt_pgl_cache_hit = 0x53,
  vc_pgl_cache_hit = 0x54,
  cp_pgl_full = 0x55,
  vgt_pgl_full = 0x56,
  vc0_pgl_full = 0x57,
  vc1_pgl_full = 0x58,
  mc0_wdb_full = 0x59,
  mc0_tagbuf_full = 0x5A,
  mc1_wdb_full = 0x5B,
  mc1_tagbuf_full = 0x5C,
  pgl_tagbuf_full = 0x5D,
  cp_writenotify = 0x5E,
  bc_writenotify = 0x5F,
  ioc_sync = 0x60,
  pgl_biu_latency = 0x61,
  mh_mc0_latency = 0x62,
  mh_mc0_dc_latency = 0x63,
  mh_mc0_vc_latency = 0x64,
  mh_mc0_tc_latency = 0x65,
  mh_mc0_cp_latency = 0x66,
  mh_mc0_sb_latency = 0x67,
  mh_mc0_vgt_latency = 0x68,
  mh_mc1_latency = 0x69,
  mh_mc1_dc_latency = 0x6A,
  mh_mc1_vc_latency = 0x6B,
  mh_mc1_tc_latency = 0x6C,
  mh_mc1_cp_latency = 0x6D,
  mh_mc1_sb_latency = 0x6E,
  mh_mc1_vgt_latency = 0x6F,
  mh_pgl_latency = 0x70,
  mh_pgl_cp_latency = 0x71,
  mh_pgl_vc_latency = 0x72,
  mh_pgl_vgt_latency = 0x73,
  tc0_rdy_and_noroom = 0x74,
  tc1_rdy_and_noroom = 0x75,
  ioc_rdy_and_noroom = 0x76,
};

/*  348 */
enum XGRAPHICS::_E_AS_DBGPRINT_TYPE
{
  E_AS_DBGPRINT_STATE = 0x0,
  E_AS_DBGPRINT_GROUP = 0x1,
  E_AS_DBGPRINT_SUBBLK = 0x2,
  E_AS_DBGPRINT_DTSTATE = 0x3,
  E_AS_DBGPRINT_ALL = 0x4,
};

/*  349 */
enum XGRAPHICS::_E_INTERP_USAGE
{
  INTERP_USAGE_NOT_USED = 0x0,
  INTERP_USAGE_GENERIC = 0x1,
  INTERP_USAGE_TEXCOORD = 0x2,
  INTERP_USAGE_PRICOLOR = 0x3,
  INTERP_USAGE_SECCOLOR = 0x4,
  INTERP_USAGE_FOG = 0x5,
  INTERP_USAGE_SCALAR = 0x6,
  INTERP_USAGE_VERTEX = 0x7,
  INTERP_USAGE_PARAM = 0x8,
  INTERP_USAGE_FACE = 0x9,
  INTERP_USAGE_SPRITECOORD = 0xA,
  INTERP_USAGE_NTUPLE = 0xB,
  INTERP_USAGE_WINCOORD = 0xC,
  INTERP_USAGE_LAST = 0xD,
};

/*  350 */
enum XGRAPHICS::_E_INTERP_CHANNEL
{
  E_INTERP_CHANNEL_X = 0x0,
  E_INTERP_CHANNEL_Y = 0x1,
  E_INTERP_CHANNEL_Z = 0x2,
  E_INTERP_CHANNEL_W = 0x3,
  E_NUM_INTERP_CHANNELS = 0x4,
};

/*  351 */
enum SC_PERFCNT_SELECT
{
  SC_SR_WINDOW_VALID = 0x0,
  SC_CW_WINDOW_VALID = 0x1,
  SC_QM_WINDOW_VALID = 0x2,
  SC_QPP_WINDOW_VALID = 0x3,
  SC_ITER_WINDOW_VALID = 0x4,
  SC_STARVED_BY_PA = 0x5,
  SC_STARVED_BY_RCC = 0x6,
  SC_STALLED_BY_PRIM_FF = 0x7,
  SC_STALLED_BY_RCC = 0x8,
  SC_STALLED_BY_BC = 0x9,
  SC_STALLED_BY_SX = 0xA,
  SC_STALLED_BY_SX0 = 0xB,
  SC_STALLED_BY_SX1 = 0xC,
  SC_STALLED_BY_SQ = 0xD,
  SC_STALLED_BY_SP = 0xE,
  SC_WAIT_FOR_R1 = 0xF,
  SC_SCISSOR_DISCARD = 0x10,
  SC_BB_DISCARD = 0x11,
  SC_SUPERT_PRIM_DISCARD = 0x12,
  SC_RT_PRIM = 0x13,
  SC_TILE_VALID = 0x14,
  SC_TILE_PER_PRIM_H0 = 0x15,
  SC_TILE_PER_PRIM_H1 = 0x16,
  SC_TILE_PER_PRIM_H2 = 0x17,
  SC_TILE_PER_PRIM_H3 = 0x18,
  SC_TILE_PER_PRIM_H4 = 0x19,
  SC_TILE_PER_PRIM_H5 = 0x1A,
  SC_TILE_PER_PRIM_H6 = 0x1B,
  SC_TILE_PER_PRIM_H7 = 0x1C,
  SC_TILE_PER_PRIM_H8 = 0x1D,
  SC_TILE_PER_PRIM_H9 = 0x1E,
  SC_TILE_PER_PRIM_H10 = 0x1F,
  SC_TILE_PER_PRIM_H11 = 0x20,
  SC_TILE_PER_PRIM_H12 = 0x21,
  SC_TILE_PER_PRIM_H13 = 0x22,
  SC_TILE_PER_PRIM_H14 = 0x23,
  SC_TILE_PER_PRIM_H15 = 0x24,
  SC_TILE_PER_PRIM_H16 = 0x25,
  SC_SUPERT_TILE_DISCARD = 0x26,
  SC_QM_NUM_QUADS = 0x27,
  SC_QM_MASK_H0 = 0x28,
  SC_QM_MASK_H1 = 0x29,
  SC_QM_MASK_H2 = 0x2A,
  SC_QM_MASK_H3 = 0x2B,
  SC_QM_MASK_H4 = 0x2C,
  SC_QM_MASK_H5 = 0x2D,
  SC_QM_MASK_H6 = 0x2E,
  SC_QM_MASK_H7 = 0x2F,
  SC_QM_MASK_H8 = 0x30,
  SC_QM_MASK_H9 = 0x31,
  SC_QM_MASK_H10 = 0x32,
  SC_QM_MASK_H11 = 0x33,
  SC_QM_MASK_H12 = 0x34,
  SC_QM_MASK_H13 = 0x35,
  SC_QM_MASK_H14 = 0x36,
  SC_QM_MASK_H15 = 0x37,
  SC_QM_MASK_H16 = 0x38,
  SC_QM_COVERED_H0 = 0x39,
  SC_QM_COVERED_H1 = 0x3A,
  SC_QM_COVERED_H2 = 0x3B,
  SC_QM_COVERED_H3 = 0x3C,
  SC_QM_COVERED_H4 = 0x3D,
  SC_QM_COVERED_H5 = 0x3E,
  SC_QM_COVERED_H6 = 0x3F,
  SC_QM_COVERED_H7 = 0x40,
  SC_QM_COVERED_H8 = 0x41,
  SC_QM_COVERED_H9 = 0x42,
  SC_QM_COVERED_H10 = 0x43,
  SC_QM_COVERED_H11 = 0x44,
  SC_QM_COVERED_H12 = 0x45,
  SC_QM_COVERED_H13 = 0x46,
  SC_QM_COVERED_H14 = 0x47,
  SC_QM_COVERED_H15 = 0x48,
  SC_QM_COVERED_H16 = 0x49,
  SC_HIER_NUM_QUADS = 0x4A,
  SC_HIER_MASK_H0 = 0x4B,
  SC_HIER_MASK_H1 = 0x4C,
  SC_HIER_MASK_H2 = 0x4D,
  SC_HIER_MASK_H3 = 0x4E,
  SC_HIER_MASK_H4 = 0x4F,
  SC_HIER_MASK_H5 = 0x50,
  SC_HIER_MASK_H6 = 0x51,
  SC_HIER_MASK_H7 = 0x52,
  SC_HIER_MASK_H8 = 0x53,
  SC_HIER_MASK_H9 = 0x54,
  SC_HIER_MASK_H10 = 0x55,
  SC_HIER_MASK_H11 = 0x56,
  SC_HIER_MASK_H12 = 0x57,
  SC_HIER_MASK_H13 = 0x58,
  SC_HIER_MASK_H14 = 0x59,
  SC_HIER_MASK_H15 = 0x5A,
  SC_HIER_MASK_H16 = 0x5B,
  SC_DET_NUM_QUADS = 0x5C,
  SC_PKR_QD_PER_ROW_H1 = 0x5D,
  SC_PKR_QD_PER_ROW_H2 = 0x5E,
  SC_PKR_QD_PER_ROW_H3 = 0x5F,
  SC_PKR_QD_PER_ROW_H4 = 0x60,
  SC_PKR_END_OF_VECTOR = 0x61,
  SC_PKR_ONE_CLK = 0x62,
  SC_QD_WITH_1_PIX = 0x63,
  SC_QD_WITH_2_PIX = 0x64,
  SC_QD_WITH_3_PIX = 0x65,
  SC_QD_WITH_4_PIX = 0x66,
  SC_SR_WINDOW_VALID_BUSY = 0x67,
  SC_CW_WINDOW_VALID_BUSY = 0x68,
  SC_QM_WINDOW_VALID_BUSY = 0x69,
  SC_QPP_WINDOW_VALID_BUSY = 0x6A,
  SC_ITER_WINDOW_VALID_BUSY = 0x6B,
};

/*  352 */
enum XGRAPHICS::_E_INTERP_SAMPLING
{
  INTERP_SAMPLING_CENTER = 0x0,
  INTERP_SAMPLING_CENTROID = 0x1,
  INTERP_SAMPLING_LAST = 0x2,
};

/*  353 */
enum RBBM_PERFCOUNT1_SEL
{
  RBBM1_COUNT = 0x0,
  RBBM1_NRT_BUSY = 0x1,
  RBBM1_BC_CNTX0_BUSY = 0x2,
  RBBM1_BC_CNTX17_BUSY = 0x3,
  RBBM1_SQ_CNTX0_BUSY = 0x4,
  RBBM1_SQ_CNTX17_BUSY = 0x5,
  RBBM1_VGT_BUSY = 0x6,
  RBBM1_VGT_NODMA_BUSY = 0x7,
  RBBM1_PA_BUSY = 0x8,
  RBBM1_SC_CNTX0_BUSY = 0x9,
  RBBM1_SC_CNTX17_BUSY = 0xA,
  RBBM1_TPC_BUSY = 0xB,
  RBBM1_TC_BUSY = 0xC,
  RBBM1_SX_BUSY = 0xD,
  Reserved1 = 0xE,
  RBBM1_CP_COHER_BUSY = 0xF,
  RBBM1_CP_NRT_BUSY = 0x10,
  Reserved2 = 0x11,
  RBBM1_CP_DMA_BUSY = 0x12,
  Reserved3 = 0x13,
  Reserved4 = 0x14,
  Reserved5 = 0x15,
  RBBM1_DMA_IDLE_STALL = 0x16,
  Reserved6 = 0x17,
  Reserved7 = 0x18,
  RBBM1_GFX_IDLE_STALL = 0x19,
  RBBM1_GFX_IDLEC_STALL = 0x1A,
  RBBM1_INTERRUPT = 0x1B,
};

/*  354 */
enum XGRAPHICS::E_PATCH_TYPE
{
  E_VERTEX_INPUT_PATCH = 0x0,
};

/*  355 */
enum XGRAPHICS::E_VERTEX_SWIZZLE
{
  E_VERTEX_SWIZZLE_X = 0x0,
  E_VERTEX_SWIZZLE_Y = 0x1,
  E_VERTEX_SWIZZLE_Z = 0x2,
  E_VERTEX_SWIZZLE_W = 0x3,
  E_VERTEX_SWIZZLE_0 = 0x4,
  E_VERTEX_SWIZZLE_1 = 0x5,
  E_VERTEX_SWIZZLE_NONE = 0x6,
};

/*  356 */
enum RBBM_PERFCOUNT2_SEL
{
  RBBM2_COUNT = 0x0,
  RBBM2_NRT_BUSY = 0x1,
  RBBM2_RC_CNTX0_BUSY = 0x2,
  RBBM2_RC_CNTX17_BUSY = 0x3,
  RBBM2_SQ_CNTX0_BUSY = 0x4,
  RBBM2_SQ_CNTX17_BUSY = 0x5,
  RBBM2_VGT_BUSY = 0x6,
  RBBM2_VGT_NODMA_BUSY = 0x7,
  RBBM2_PA_BUSY = 0x8,
  RBBM2_SC_CNTX0_BUSY = 0x9,
  RBBM2_SC_CNTX17_BUSY = 0xA,
  RBBM2_TPC_BUSY = 0xB,
  RBBM2_TC_BUSY = 0xC,
  RBBM2_SX_BUSY = 0xD,
  Reserved8 = 0xE,
  RBBM2_CP_COHER_BUSY = 0xF,
  RBBM2_CP_NRT_BUSY = 0x10,
  Reserved9 = 0x11,
  RBBM2_CP_DMA_BUSY = 0x12,
  Reserved10 = 0x13,
  Reserved11 = 0x14,
  Reserved12 = 0x15,
  RBBM2_DMA_IDLE_STALL = 0x16,
  Reserved13 = 0x17,
  Reserved14 = 0x18,
  RBBM2_GFX_IDLE_STALL = 0x19,
  RBBM2_GFX_IDLEC_STALL = 0x1A,
  RBBM2_INTERRUPT = 0x1B,
};

/*  357 */
enum CP_PERFCOUNT_SEL
{
  CP_COUNT = 0x0,
  CP_RBIU_STALL = 0x1,
  CP_RBIU_TAF = 0x2,
  CP_PFP_STALL = 0x3,
  CP_Reserved0 = 0x4,
  CP_Reserved1 = 0x5,
  CP_NRT_RCIU_STALL = 0x6,
  CP_Reserved2 = 0x7,
  CP_NRT_MIU_STALL = 0x8,
  CP_CSF_PFP_I1_FULL = 0x9,
  CP_CSF_PFP_I2_FULL = 0xA,
  CP_CSF_PFP_REQ_FULL = 0xB,
  CP_Reserved3 = 0xC,
  CP_RING_ROQ_FULL = 0xD,
  CP_I1_ROQ_FULL = 0xE,
  CP_I2_ROQ_FULL = 0xF,
  CP_ST_ROQ_FULL = 0x10,
  CP_RTST_ROQ_FULL = 0x11,
  CP_MIU_TAG_MEM_FULL = 0x12,
  CP_MIU_WRITECLEAN = 0x13,
  CP_Reserved4 = 0x14,
  CP_Reserved5 = 0x15,
  CP_NRT_WRITE_STALL = 0x16,
  CP_NRT_READ_STALL = 0x17,
  CP_WC_FIFO_FULL = 0x18,
  CP_VTX_DEALLOC_FIFO_FULL = 0x19,
  CP_PIX_DEALLOC_FIFO_FULL = 0x1A,
  CP_VTX_EVENT_FIFO_FULL = 0x1B,
  CP_PIX_EVENT_FIFO_FULL = 0x1C,
  CP_CF_EVENT_FIFO_FULL = 0x1D,
  CP_ME_RB_STARVED = 0x1E,
  CP_ME_I1_STARVED = 0x1F,
  CP_ME_I2_STARVED = 0x20,
  CP_ME_ST_STARVED = 0x21,
  CP_Reserved6 = 0x22,
  CP_Reserved7 = 0x23,
  CP_Reserved8 = 0x24,
  CP_Reserved9 = 0x25,
  CP_Reserved10 = 0x26,
  CP_Reserved11 = 0x27,
  RCIU_RBBM_DWORD_SENT = 0x28,
  ME_PARSER_BUSY_CLOCKS = 0x29,
  ME_WAIT_CONTEXT_AVAIL = 0x2A,
  PFP_TYPE0_PACKET = 0x2B,
  PFP_TYPE3_PACKET = 0x2C,
  CSF_RB_WPTR_NEQ_RPTR = 0x2D,
  CSF_I1_SIZE_NEQ_ZERO = 0x2E,
  CSF_I2_SIZE_NEQ_ZERO = 0x2F,
  CSF_RB_I1_I2_FETCHING = 0x30,
  CP_Reserved12 = 0x31,
  CP_Reserved13 = 0x32,
  CP_Reserved14 = 0x33,
  CP_Reserved15 = 0x34,
  CP_Reserved16 = 0x35,
  CP_Reserved17 = 0x36,
  CP_Reserved18 = 0x37,
  CP_Reserved19 = 0x38,
  CP_Reserved20 = 0x39,
  CP_Reserved21 = 0x3A,
  CP_Reserved22 = 0x3B,
  CP_Reserved23 = 0x3C,
  CP_Reserved24 = 0x3D,
  CP_Reserved25 = 0x3E,
  CP_Reserved26 = 0x3F,
};

/*  358 */
enum VGT_DI_PRIM_TYPE
{
  DI_PT_NONE = 0x0,
  DI_PT_POINTLIST = 0x1,
  DI_PT_LINELIST = 0x2,
  DI_PT_LINESTRIP = 0x3,
  DI_PT_TRILIST = 0x4,
  DI_PT_TRIFAN = 0x5,
  DI_PT_TRISTRIP = 0x6,
  DI_PT_TRI_WITH_WFLAGS = 0x7,
  DI_PT_RECTLIST = 0x8,
  DI_PT_UNUSED_1 = 0x9,
  DI_PT_UNUSED_2 = 0xA,
  DI_PT_UNUSED_3 = 0xB,
  DI_PT_LINELOOP = 0xC,
  DI_PT_QUADLIST = 0xD,
  DI_PT_QUADSTRIP = 0xE,
  DI_PT_POLYGON = 0xF,
  DI_PT_2D_COPY_RECT_LIST_V0 = 0x10,
  DI_PT_2D_COPY_RECT_LIST_V1 = 0x11,
  DI_PT_2D_COPY_RECT_LIST_V2 = 0x12,
  DI_PT_2D_COPY_RECT_LIST_V3 = 0x13,
  DI_PT_2D_FILL_RECT_LIST = 0x14,
  DI_PT_2D_LINE_STRIP = 0x15,
  DI_PT_2D_TRI_STRIP = 0x16,
};

/*  359 */
enum XGRAPHICS::E_REQUIRED_RS_TYPE
{
  E_REQUIRED_RS_QUERY = 0x0,
  E_REQUIRED_RS_AS = 0x1,
  E_REQUIRED_RS_AS_ARRAY = 0x2,
};

/*  360 */
enum VGT_DI_SOURCE_SELECT
{
  DI_SRC_SEL_DMA = 0x0,
  DI_SRC_SEL_IMMEDIATE = 0x1,
  DI_SRC_SEL_AUTO_INDEX = 0x2,
  DI_SRC_SEL_RESERVED = 0x3,
};

/*  361 */
enum VGT_DI_MAJOR_MODE_SELECT
{
  DI_MAJOR_MODE_0 = 0x0,
  DI_MAJOR_MODE_1 = 0x1,
};

/*  362 */
enum VGT_DI_INDEX_SIZE
{
  DI_INDEX_SIZE_16_BIT = 0x0,
  DI_INDEX_SIZE_32_BIT = 0x1,
};

/*  363 */
enum VGT_EVENT_TYPE
{
  VS_DEALLOC = 0x0,
  PS_DEALLOC = 0x1,
  VS_DONE_TS = 0x2,
  PS_DONE_TS = 0x3,
  CACHE_FLUSH_TS = 0x4,
  CONTEXT_DONE = 0x5,
  CACHE_FLUSH = 0x6,
  VIZQUERY_START = 0x7,
  VIZQUERY_END = 0x8,
  SC_WAIT_WC = 0x9,
  MPASS_PS_CP_REFETCH = 0xA,
  MPASS_PS_RST_START = 0xB,
  MPASS_PS_INCR_START = 0xC,
  RST_PIX_CNT = 0xD,
  RST_VTX_CNT = 0xE,
  TILE_FLUSH = 0xF,
  CACHE_FLUSH_AND_INV_TS_EVENT = 0x14,
  ZPASS_DONE = 0x15,
  CACHE_FLUSH_AND_INV_EVENT = 0x16,
  PERFCOUNTER_START = 0x17,
  PERFCOUNTER_STOP = 0x18,
  SCREEN_EXT_INIT = 0x19,
  SCREEN_EXT_RPT = 0x1A,
  VS_FETCH_DONE_TS = 0x1B,
};

/*  364 */
enum XGRAPHICS::_E_R400_STATE
{
  R400_COLOR_FORMAT_0 = 0x7AE,
  R400_COLOR_FORMAT_1 = 0x7AF,
  R400_COLOR_FORMAT_2 = 0x7B0,
  R400_COLOR_FORMAT_3 = 0x7B1,
  R400_DEST_BASE_0 = 0x7B2,
  R400_DEST_BASE_1 = 0x7B3,
  R400_DEST_BASE_2 = 0x7B4,
  R400_DEST_BASE_3 = 0x7B5,
  R400_DEST_BASE_4 = 0x7B6,
  R400_DEST_BASE_5 = 0x7B7,
  R400_DEST_BASE_6 = 0x7B8,
  R400_DEST_BASE_7 = 0x7B9,
  R400_AS_NUM_VS_REGS = 0x7BA,
  R400_AS_NUM_PS_REGS = 0x7BB,
  R400_AS_1ST_VS_RESRC = 0x7BC,
  R400_AS_1ST_PS_RESRC = 0x7BD,
  R400_AS_PARAM_GEN_XYST = 0x7BE,
  R400_AS_AUTOGEN_INDEX_PS = 0x7BF,
  R400_AS_VS_EXPORT_COUNT = 0x7C0,
  R400_AS_VS_EXPORT_MODE = 0x7C1,
  R400_AS_PS_EXPORT_MODE = 0x7C2,
  R400_AS_AUTOGEN_INDEX_VS = 0x7C3,
  R400_AS_INST_PRED_OPTIMIZE = 0x7C4,
  R400_AS_SC_OUTPUT_SCREEN_XY = 0x7C5,
  R400_AS_SC_SAMPLE_CNTL = 0x7C6,
  R400_AS_PARAM_GEN_POS = 0x7C7,
  R400_AS_GOURAUD_PARAM_SHADE = 0x7C8,
  R400_AS_SAMPLING_PATTERN = 0x7C9,
  R400_UCP_CULL_ONLY_ENA = 0x7CA,
  R400_AS_DIS_CLIP_ERR_DETECT = 0x7CB,
  R400_AS_VTX_KILL_OR = 0x7CC,
  R400_AS_XY_NAN_RETAIN = 0x7CD,
  R400_AS_Z_NAN_RETAIN = 0x7CE,
  R400_AS_W_NAN_RETAIN = 0x7CF,
  R400_AS_VTX_WINDOW_OFFSET_ENABLE = 0x7D0,
  R400_AS_CLIPRECT_ENABLE = 0x7D1,
  R400_AS_LINE_STIPPLE_ENABLE = 0x7D2,
  R400_AS_PERSP_CORR_DIS = 0x7D3,
  R400_AS_MULTI_PRIM_IB_ENA = 0x7D4,
  R400_AS_QUAD_ORDER_ENABLE = 0x7D5,
  R400_AS_ONE_QUAD_PER_CLOCK_ENABLE = 0x7D6,
  R400_AS_VP_XSCALE_ENABLE = 0x7D7,
  R400_AS_VP_XOFFSET_ENABLE = 0x7D8,
  R400_AS_VP_YSCALE_ENABLE = 0x7D9,
  R400_AS_VP_YOFFSET_ENABLE = 0x7DA,
  R400_AS_VP_ZSCALE_ENABLE = 0x7DB,
  R400_AS_VP_ZOFFSET_ENABLE = 0x7DC,
  R400_AS_POINT_HEIGHT = 0x7DD,
  R400_AS_POINT_WIDTH = 0x7DE,
  R400_AS_LINE_STIPPLE_PATTERN_BIT_ORDER = 0x7DF,
  R400_AS_VGT_OPATH_SELECT = 0x7E0,
  R400_AS_HOS_TESS_MODE = 0x7E1,
  R400_AS_HOS_MAX_TESS = 0x7E2,
  R400_AS_HOS_MIN_TESS = 0x7E3,
  R400_AS_HOS_REUSE_DEPTH = 0x7E4,
  R400_AS_VGT_GRP_PRIM_TYPE = 0x7E5,
  R400_AS_VGT_GRP_RETAIN_ORDER = 0x7E6,
  R400_AS_VGT_GRP_RETAIN_QUADS = 0x7E7,
  R400_AS_VGT_GRP_PRIM_ORDER = 0x7E8,
  R400_AS_VGT_GRP_DECR_1ST_DECR = 0x7E9,
  R400_AS_VGT_GRP_DECR_DECR = 0x7EA,
  R400_AS_VGT_GRP_VECT_0_COMP_X_EN = 0x7EB,
  R400_AS_VGT_GRP_VECT_0_COMP_Y_EN = 0x7EC,
  R400_AS_VGT_GRP_VECT_0_COMP_Z_EN = 0x7ED,
  R400_AS_VGT_GRP_VECT_0_COMP_W_EN = 0x7EE,
  R400_AS_VGT_GRP_VECT_0_STRIDE = 0x7EF,
  R400_AS_VGT_GRP_VECT_0_SHIFT = 0x7F0,
  R400_AS_VGT_GRP_VECT_1_COMP_X_EN = 0x7F1,
  R400_AS_VGT_GRP_VECT_1_COMP_Y_EN = 0x7F2,
  R400_AS_VGT_GRP_VECT_1_COMP_Z_EN = 0x7F3,
  R400_AS_VGT_GRP_VECT_1_COMP_W_EN = 0x7F4,
  R400_AS_VGT_GRP_VECT_1_STRIDE = 0x7F5,
  R400_AS_VGT_GRP_VECT_1_SHIFT = 0x7F6,
  R400_AS_VGT_GRP_VECT_0_FMT_X_CONV = 0x7F7,
  R400_AS_VGT_GRP_VECT_0_FMT_X_OFFSET = 0x7F8,
  R400_AS_VGT_GRP_VECT_0_FMT_Y_CONV = 0x7F9,
  R400_AS_VGT_GRP_VECT_0_FMT_Y_OFFSET = 0x7FA,
  R400_AS_VGT_GRP_VECT_0_FMT_Z_CONV = 0x7FB,
  R400_AS_VGT_GRP_VECT_0_FMT_Z_OFFSET = 0x7FC,
  R400_AS_VGT_GRP_VECT_0_FMT_W_CONV = 0x7FD,
  R400_AS_VGT_GRP_VECT_0_FMT_W_OFFSET = 0x7FE,
  R400_AS_VGT_GRP_VECT_1_FMT_X_CONV = 0x7FF,
  R400_AS_VGT_GRP_VECT_1_FMT_X_OFFSET = 0x800,
  R400_AS_VGT_GRP_VECT_1_FMT_Y_CONV = 0x801,
  R400_AS_VGT_GRP_VECT_1_FMT_Y_OFFSET = 0x802,
  R400_AS_VGT_GRP_VECT_1_FMT_Z_CONV = 0x803,
  R400_AS_VGT_GRP_VECT_1_FMT_Z_OFFSET = 0x804,
  R400_AS_VGT_GRP_VECT_1_FMT_W_CONV = 0x805,
  R400_AS_VGT_GRP_VECT_1_FMT_W_OFFSET = 0x806,
  R400_AS_MPASS_PIX_VEC_PER_PASS = 0x807,
  R400_AS_MPASS_PS_ENA = 0x808,
  R400_AS_BRES_CNTL = 0x809,
  R400_AS_USE_BRES_CNTL = 0x80A,
  R400_AS_EXPAND_LINE_WIDTH = 0x80B,
  R400_AS_LINE_WIDTH = 0x80C,
  R400_AS_QUANT_MODE = 0x80D,
  R400_AS_MAX_SAMPLE_DIST = 0x80E,
  R400_VS_CONST_BASE = 0x80F,
  R400_VS_CONST_SIZE = 0x810,
  R400_PS_CONST_BASE = 0x811,
  R400_PS_CONST_SIZE = 0x812,
  R400_AS_VS_CF_SIZE = 0x813,
  R400_AS_PS_CF_SIZE = 0x814,
  R400_AS_VTX_REUSE_DEPTH = 0x815,
  R400_AS_VGT_OUT_DEALLOC_DIST = 0x816,
  R400_DEPTH_CLEAR = 0x817,
  R400_COPY_REF_RED = 0x818,
  R400_COPY_REF_GREEN = 0x819,
  R400_COPY_REF_BLUE = 0x81A,
  R400_COPY_REF_ALPHA = 0x81B,
  R400_COPY_MASK_RED = 0x81C,
  R400_COPY_MASK_GREEN = 0x81D,
  R400_COPY_MASK_BLUE = 0x81E,
  R400_COPY_MASK_ALPHA = 0x81F,
  R400_RESET_SAMPLE_COUNT = 0x820,
  R400_COPY_SAMPLE_COUNT = 0x821,
  R400_SAMPLE_COUNT_ADDR = 0x822,
  R400_AS_COLOR_CLEAR = 0x823,
  R400_AS_COLOR_CLEAR_LO = 0x824,
  R400_AS_POINTSPRITE_CONST_SIZE = 0x825,
};

/*  365 */
enum VGT_DMA_SWAP_MODE
{
  VGT_DMA_SWAP_NONE = 0x0,
  VGT_DMA_SWAP_16_BIT = 0x1,
  VGT_DMA_SWAP_32_BIT = 0x2,
  VGT_DMA_SWAP_WORD = 0x3,
};

/*  366 */
enum BIU_PERFCOUNT_SELECT
{
  recv_requests = 0x0,
  recv_responses = 0x1,
  ioc_reads = 0x2,
  ioc_writes = 0x3,
  mem_reads = 0x4,
  mem_writes = 0x5,
  fsb_syncs = 0x6,
  EIEIOs = 0x7,
  EOIs = 0x8,
  Flush_Acks = 0x9,
  request_read_data_bytes_8_byte_and_less_transfers____dependent_on_secondary_control_register = 0xA,
  request_read_data_bytes_16_byte_and_more_transfers___dependent_on_secondary_control_register = 0xB,
  request_write_data_bytes_8_byte_and_less_transfers___dependent_on_secondary_control_register = 0xC,
  request_write_data_bytes_16_byte_and_more_transfer___dependent_on_secondary_control_register = 0xD,
  reserved0 = 0xE,
  xmit_requests = 0xF,
  xmit_responses = 0x10,
  read128s = 0x11,
  flush_req_reads = 0x12,
  flush_req_writes = 0x13,
  cpuwb = 0x14,
  interrupts = 0x15,
  responses_mc0 = 0x16,
  responses_mc1 = 0x17,
  responses_ioc_mst = 0x18,
  mc0_response_read_data_bytes_8_byte_and_less_transfers____dependent_on_secondary_control_register_ = 0x19,
  mc0_response_read_data_bytes_16_byte_and_more_transfers___dependent_on__secondary_control_register_ = 0x1A,
  mc1_response_read_data_bytes_8_byte_and_less_transfers____dependent_on_secondary_control_register_ = 0x1B,
  mc1_response_read_data_bytes_16_byte_and_more_transfers___dependent_on__secondary_control_register_ = 0x1C,
  ioc_mst_response_read_data_bytes_8_byte_and_less_transfers____dependent_on_secondary_control_register_ = 0x1D,
  ioc_mst_response_read_data_bytes_16_byte_and_more_transfers___dependent_on__secondary_control_register_ = 0x1E,
  reserved1 = 0x1F,
  reserved2 = 0x20,
  reserved3 = 0x21,
  reserved4 = 0x22,
  reserved5 = 0x23,
  reserved6 = 0x24,
  reserved7 = 0x25,
  reserved8 = 0x26,
  reserved9 = 0x27,
  requests = 0x28,
  ioc_mast_reads = 0x29,
  ioc_mast_writes = 0x2A,
  ioc_mast_eois = 0x2B,
  ioc_mast_request_read_data_bytes__8_byte_and_less_transfers____dependent_on_secondary_control_register = 0x2C,
  ioc_mast_request_read_data_bytes__16_byte_and_more_transfers___dependent_on_secondary_control_register = 0x2D,
  ioc_mast_request_write_data_bytes__8_byte_and_less_transfers___dependent_on_secondary_control_register = 0x2E,
  ioc_mast_request_write_data_bytes__16_byte_and_more_transfer___dependent_on_secondary_control_register = 0x2F,
  reserved10 = 0x30,
  reserved11 = 0x31,
  ioc_slv_requests = 0x32,
  ioc_slv_snoop_reads = 0x33,
  ioc_slv_snoop_writes = 0x34,
  ioc_slv_interrupts = 0x35,
  ioc_slv_syncs = 0x36,
  ioc_slv_snoop_reads_ns = 0x37,
  ioc_slv_snoop_writes_ns = 0x38,
  ioc_slv_cpuwbs = 0x39,
  ioc_slv_request_read_data_bytes__divided_by_4____dependent_on_secondary_control_register_ = 0x3A,
  ioc_slv_request_write_data_bytes__divided_by_4____dependent_on_secondary_control_register_ = 0x3B,
  ioc_slv_responses__beats_ = 0x3C,
  ioc_slv_resp_read_data_bytes__divided_by_4_ = 0x3D,
  ioc_slv_synccleans = 0x3E,
  reserved12 = 0x3F,
  reserved13 = 0x40,
  reserved14 = 0x41,
  reserved15 = 0x42,
  reserved16 = 0x43,
  reserved17 = 0x44,
  reserved18 = 0x45,
  mc_0_fast_path_CPU_reads = 0x46,
  mc_0_ordered_CPU_path_reads = 0x47,
  mc_0_ordered_CPU_path_writes = 0x48,
  mc_0_ordered_IOC_path_reads = 0x49,
  mc_0_ordered_IOC_path_writes = 0x4A,
  mc_0_sync_a = 0x4B,
  mc_0_sync_b = 0x4C,
  reserved19 = 0x4D,
  reserved20 = 0x4E,
  reserved21 = 0x4F,
  mc_1_fast_path_CPU_reads = 0x50,
  mc_1_ordered_CPU_path_reads = 0x51,
  mc_1_ordered_CPU_path_writes = 0x52,
  mc_1_ordered_IOC_path_reads = 0x53,
  mc_1_ordered_IOC_path_writes = 0x54,
  mc_1_sync_a = 0x55,
  mc_1_sync_b = 0x56,
  reserved22 = 0x57,
  reserved23 = 0x58,
  reserved24 = 0x59,
  reserved25 = 0x5A,
  reserved26 = 0x5B,
  reserved27 = 0x5C,
  reserved28 = 0x5D,
  reserved29 = 0x5E,
  reserved30 = 0x5F,
  reserved31 = 0x60,
  reserved32 = 0x61,
  reserved33 = 0x62,
  reserved34 = 0x63,
  MCQF_nearfull = 0x64,
  MCQDF_nearfull = 0x65,
  IMQF_nearfull = 0x66,
  PSF_nearfull = 0x67,
  M0SF_nearfull = 0x68,
  M1SF_nearfull = 0x69,
  IMSF_nearfull = 0x6A,
  IMSDF_nearfull = 0x6B,
  ISQF__nearfull = 0x6C,
  ISSF_nearfull = 0x6D,
  ISYF_nearfull = 0x6E,
  CPYF_nearfull = 0x6F,
  PQF_nearfull = 0x70,
  reserved35 = 0x71,
  reserved36 = 0x72,
  reserved37 = 0x73,
  reserved38 = 0x74,
  reserved39 = 0x75,
  reserved40 = 0x76,
  reserved41 = 0x77,
  reserved42 = 0x78,
  reserved43 = 0x79,
  reserved44 = 0x7A,
  reserved45 = 0x7B,
  reserved46 = 0x7C,
  reserved47 = 0x7D,
  reserved48 = 0x7E,
  reserved49 = 0x7F,
  reserved50 = 0x80,
  reserved51 = 0x81,
  reserved52 = 0x82,
  reserved53 = 0x83,
  reserved54 = 0x84,
  reserved55 = 0x85,
  reserved56 = 0x86,
  reserved57 = 0x87,
  reserved58 = 0x88,
  reserved59 = 0x89,
  reserved60 = 0x8A,
  reserved61 = 0x8B,
  total_memory_latency_fast_reads__must_be_divided_by_mem_read_requests_for_average_latency_ = 0x8C,
  total_memory_latency_ordered_CPU_reads__must_be_divided_by = 0x8D,
  total_memory_latency_ordered_IOC_reads__must_be_divided_by = 0x8E,
  total_flush_latency_for_snoop_reads___must_be_divied = 0x8F,
  total_flush_latency_for_snoop_writes___must_be_divied = 0x90,
  snoop_completion_buffer_full = 0x91,
  reserved62 = 0x92,
  reserved63 = 0x93,
  reserved64 = 0x94,
  reserved65 = 0x95,
  MC0_slow_credit_count_is_zero = 0x96,
  MC1_slow_credit_count_is_zero = 0x97,
  MC0_fast_credit_count_is_zero = 0x98,
  MC1_fast_credit_count_is_zero = 0x99,
  reserved66 = 0x9A,
  reserved67 = 0x9B,
  FSB_slv_req_stall_for_command_credits = 0x9C,
  FSB_slv_req_stall_for_data_credits = 0x9D,
  FSB_PG_req_stall_for_cmd_credits = 0x9E,
  reserved68 = 0x9F,
  reserved69 = 0xA0,
  reserved70 = 0xA1,
  reserved71 = 0xA2,
  reserved72 = 0xA3,
  reserved73 = 0xA4,
  reserved74 = 0xA5,
  reserved75 = 0xA6,
  reserved76 = 0xA7,
  reserved77 = 0xA8,
  reserved78 = 0xA9,
  reserved79 = 0xAA,
  reserved80 = 0xAB,
  reserved81 = 0xAC,
  reserved82 = 0xAD,
  reserved83 = 0xAE,
  reserved84 = 0xAF,
  reserved85 = 0xB0,
  reserved86 = 0xB1,
  reserved87 = 0xB2,
  reserved88 = 0xB3,
  reserved89 = 0xB4,
  reserved90 = 0xB5,
  reserved91 = 0xB6,
  reserved92 = 0xB7,
  reserved93 = 0xB8,
  reserved94 = 0xB9,
  reserved95 = 0xBA,
  reserved96 = 0xBB,
  reserved97 = 0xBC,
  reserved98 = 0xBD,
  reserved99 = 0xBE,
  reserved100 = 0xBF,
  reserved101 = 0xC0,
  reserved102 = 0xC1,
  reserved103 = 0xC2,
  reserved104 = 0xC3,
  reserved105 = 0xC4,
  reserved106 = 0xC5,
  reserved107 = 0xC6,
  reserved108 = 0xC7,
  SCLK__counts_sclks_in_the_mclk_domain_ = 0xC8,
  IOC_MASTER_REQ_STALL__BIU_has_data_but_IOC_not_ready____sclk_domain_ = 0xC9,
  IOC_SLAVE_RSP__STALL___sclk_domain_ = 0xCA,
  reserved109 = 0xCB,
  reserved110 = 0xCC,
  reserved111 = 0xCD,
  reserved112 = 0xCE,
  reserved113 = 0xCF,
  reserved114 = 0xD0,
  reserved115 = 0xD1,
  reserved116 = 0xD2,
  reserved117 = 0xD3,
  reserved118 = 0xD4,
  reserved119 = 0xD5,
  reserved120 = 0xD6,
  reserved121 = 0xD7,
  reserved122 = 0xD8,
  reserved123 = 0xD9,
  reserved124 = 0xDA,
  reserved125 = 0xDB,
  reserved126 = 0xDC,
  reserved127 = 0xDD,
  reserved128 = 0xDE,
  reserved129 = 0xDF,
  reserved130 = 0xE0,
  reserved131 = 0xE1,
  reserved132 = 0xE2,
  reserved133 = 0xE3,
  reserved134 = 0xE4,
  reserved135 = 0xE5,
  reserved136 = 0xE6,
  reserved137 = 0xE7,
  reserved138 = 0xE8,
  reserved139 = 0xE9,
  reserved140 = 0xEA,
  reserved141 = 0xEB,
  reserved142 = 0xEC,
  reserved143 = 0xED,
  reserved144 = 0xEE,
  reserved145 = 0xEF,
  reserved146 = 0xF0,
  reserved147 = 0xF1,
  reserved148 = 0xF2,
  reserved149 = 0xF3,
  reserved150 = 0xF4,
  reserved151 = 0xF5,
  reserved152 = 0xF6,
  reserved153 = 0xF7,
  reserved154 = 0xF8,
  reserved155 = 0xF9,
  reserved156 = 0xFA,
  reserved157 = 0xFB,
  Increment_by__0__disable_count = 0xFC,
  Increment_by__1__used_to_count_clocks = 0xFD,
  Increment_by__63_used_for_simulation_to_rapidly_increment_counter = 0xFE,
  OTHERS = 0xFF,
};

/*  367 */
enum VGT_OUTPATH_SELECT
{
  VGT_OUTPATH_VTX_REUSE = 0x0,
  VGT_OUTPATH_TESS_EN = 0x1,
  VGT_OUTPATH_PASSTHRU = 0x2,
};

/*  368 */
enum VGT_GRP_PRIM_TYPE
{
  VGT_GRP_3D_POINT = 0x0,
  VGT_GRP_3D_LINE = 0x1,
  VGT_GRP_3D_TRI = 0x2,
  VGT_GRP_3D_RECT = 0x3,
  VGT_GRP_3D_QUAD = 0x4,
  VGT_GRP_2D_COPY_RECT_V0 = 0x5,
  VGT_GRP_2D_COPY_RECT_V1 = 0x6,
  VGT_GRP_2D_COPY_RECT_V2 = 0x7,
  VGT_GRP_2D_COPY_RECT_V3 = 0x8,
  VGT_GRP_2D_FILL_RECT = 0x9,
  VGT_GRP_2D_LINE = 0xA,
  VGT_GRP_2D_TRI = 0xB,
  VGT_GRP_PRIM_INDEX_LINE = 0xC,
  VGT_GRP_PRIM_INDEX_TRI = 0xD,
  VGT_GRP_PRIM_INDEX_QUAD = 0xE,
};

/*  369 */
enum VGT_GRP_PRIM_ORDER
{
  VGT_GRP_LIST = 0x0,
  VGT_GRP_STRIP = 0x1,
  VGT_GRP_FAN = 0x2,
  VGT_GRP_LOOP = 0x3,
  VGT_GRP_POLYGON = 0x4,
};

/*  370 */
enum VGT_GROUP_CONV_SEL
{
  VGT_GRP_INDEX_16 = 0x0,
  VGT_GRP_INDEX_32 = 0x1,
  VGT_GRP_UINT_16 = 0x2,
  VGT_GRP_UINT_32 = 0x3,
  VGT_GRP_SINT_16 = 0x4,
  VGT_GRP_SINT_32 = 0x5,
  VGT_GRP_FLOAT_32 = 0x6,
  VGT_GRP_AUTO_PRIM = 0x7,
  VGT_GRP_FIX_1_23_TO_FLOAT = 0x8,
};

/*  371 */
enum VGT_PERFCOUNT_SELECT
{
  vgt_sq_event_window_active = 0x0,
  vgt_sq_send = 0x1,
  vgt_sq_stalled = 0x2,
  vgt_sq_starved_busy = 0x3,
  vgt_sq_starved_idle = 0x4,
  vgt_sq_static = 0x5,
  vgt_pa_event_window_active = 0x6,
  vgt_pa_clip_v_send = 0x7,
  vgt_pa_clip_v_stalled = 0x8,
  vgt_pa_clip_v_starved_busy = 0x9,
  vgt_pa_clip_v_starved_idle = 0xA,
  vgt_pa_clip_v_static = 0xB,
  vgt_pa_clip_p_send = 0xC,
  vgt_pa_clip_p_stalled = 0xD,
  vgt_pa_clip_p_starved_busy = 0xE,
  vgt_pa_clip_p_starved_idle = 0xF,
  vgt_pa_clip_p_static = 0x10,
  vgt_pa_clip_s_send = 0x11,
  vgt_pa_clip_s_stalled = 0x12,
  vgt_pa_clip_s_starved_busy = 0x13,
  vgt_pa_clip_s_starved_idle = 0x14,
  vgt_pa_clip_s_static = 0x15,
  rbiu_fifos_event_window_active = 0x16,
  rbiu_immed_data_fifo_starved = 0x17,
  rbiu_immed_data_fifo_stalled = 0x18,
  rbiu_dma_request_fifo_starved = 0x19,
  rbiu_dma_request_fifo_stalled = 0x1A,
  rbiu_draw_initiator_fifo_starved = 0x1B,
  rbiu_draw_initiator_fifo_stalled = 0x1C,
  spare29 = 0x1D,
  spare30 = 0x1E,
  spare31 = 0x1F,
  spare32 = 0x20,
  spare33 = 0x21,
  spare34 = 0x22,
  spare35 = 0x23,
  spare36 = 0x24,
  spare37 = 0x25,
  spare38 = 0x26,
  spare39 = 0x27,
  te_su_in_valid = 0x28,
  te_su_in_read = 0x29,
  te_su_in_prim = 0x2A,
  te_su_in_eop = 0x2B,
  te_su_in_null_prim = 0x2C,
  te_wk_in_valid = 0x2D,
  te_wk_in_read = 0x2E,
  te_out_prim_valid = 0x2F,
  te_out_prim_read = 0x30,
};

/*  372 */
enum TCR_PERFCOUNT_SELECT
{
  DGMMPD_IPMUX0_STALL = 0x0,
  DGMMPD_IPMUX1_STALL = 0x1,
  DGMMPD_IPMUX2_STALL = 0x2,
  DGMMPD_IPMUX3_STALL = 0x3,
  DGMMPD_IPMUX_ALL_STALL = 0x4,
  OPMUX0_L2_WRITES = 0x5,
  OPMUX1_L2_WRITES = 0x6,
  OPMUX2_L2_WRITES = 0x7,
  OPMUX3_L2_WRITES = 0x8,
};

/*  373 */
enum TP_PERFCOUNT_SELECT
{
  POINT_QUADS = 0x0,
  BILIN_QUADS = 0x1,
  ANISO_QUADS = 0x2,
  MIP_QUADS = 0x3,
  VOL_QUADS = 0x4,
  MIP_VOL_QUADS = 0x5,
  MIP_ANISO_QUADS = 0x6,
  VOL_ANISO_QUADS = 0x7,
  ANISO_2_1_QUADS = 0x8,
  ANISO_4_1_QUADS = 0x9,
  ANISO_6_1_QUADS = 0xA,
  ANISO_8_1_QUADS = 0xB,
  ANISO_10_1_QUADS = 0xC,
  ANISO_12_1_QUADS = 0xD,
  ANISO_14_1_QUADS = 0xE,
  MIP_VOL_ANISO_QUADS = 0xF,
  ALIGN_2_QUADS = 0x10,
  ALIGN_4_QUADS = 0x11,
  PIX_0_QUAD = 0x12,
  PIX_1_QUAD = 0x13,
  PIX_2_QUAD = 0x14,
  PIX_3_QUAD = 0x15,
  PIX_4_QUAD = 0x16,
  TP_MIPMAP_LOD0 = 0x17,
  TP_MIPMAP_LOD1 = 0x18,
  TP_MIPMAP_LOD2 = 0x19,
  TP_MIPMAP_LOD3 = 0x1A,
  TP_MIPMAP_LOD4 = 0x1B,
  TP_MIPMAP_LOD5 = 0x1C,
  TP_MIPMAP_LOD6 = 0x1D,
  TP_MIPMAP_LOD7 = 0x1E,
  TP_MIPMAP_LOD8 = 0x1F,
  TP_MIPMAP_LOD9 = 0x20,
  TP_MIPMAP_LOD10 = 0x21,
  TP_MIPMAP_LOD11 = 0x22,
  TP_MIPMAP_LOD12 = 0x23,
  TP_MIPMAP_LOD13 = 0x24,
  TP_MIPMAP_LOD14 = 0x25,
};

/*  374 */
enum XGRAPHICS::_E_SSM_SETTING
{
  E_SSMS_IMMEDIATE_PACKET_FLAGS = 0x0,
  E_SSMS_USE_TRANSLATOR = 0x1,
  E_SSMS_MAX_RS_VIDMEM = 0x2,
  E_SSMS_MAX_VS_VIDMEM = 0x3,
  E_SSMS_MAX_PS_VIDMEM = 0x4,
  E_SSMS_MAX_VS_SIZE = 0x5,
  E_SSMS_MAX_PS_SIZE = 0x6,
  E_SSMS_STATECACHE_BYPASS = 0x7,
  E_SSMS_COMPILER_VFETCH_MAXSIZE = 0x8,
  E_SSMS_PRECOMPILE_ENABLE = 0x9,
  E_SSMS_SHADER_RECYCLING_ENABLE = 0xA,
  E_SSMS_VERIFY_BLEND_ENABLE_STATE = 0xB,
  E_SSMS_NUM_SETTINGS = 0xC,
};

/*  375 */
enum XGRAPHICS::E_FA_FETCH_ALLOCATOR_MODE
{
  E_FA_INCREMENTAL = 0x0,
  E_FA_DECREMENTAL = 0x1,
  E_FA_READONLY = 0x2,
};

/*  376 */
enum XGRAPHICS::E_FETCH_TYPE
{
  E_FETCH_TYPE_TEXTURE = 0x0,
  E_FETCH_TYPE_VERTEX = 0x1,
  E_FETCH_TYPE_TEXTURE_INTERNAL = 0x2,
  E_FETCH_TYPE_VERTEX_INTERNAL = 0x3,
};

/*  377 */
enum TCM_PERFCOUNT_SELECT
{
  QUAD0_RD_LAT_FIFO_EMPTY = 0x0,
  QUAD0_RD_LAT_FIFO_16TH_FULL = 0x1,
  QUAD0_RD_LAT_FIFO_8TH_FULL = 0x2,
  QUAD0_RD_LAT_FIFO_4TH_FULL = 0x3,
  QUAD0_RD_LAT_FIFO_HALF_FULL = 0x4,
  QUAD0_RD_LAT_FIFO_FULL = 0x5,
  QUAD0_RD_LAT_FIFO_LT_16TH_FULL = 0x6,
  QUAD1_RD_LAT_FIFO_EMPTY = 0x7,
  QUAD1_RD_LAT_FIFO_16TH_FULL = 0x8,
  QUAD1_RD_LAT_FIFO_8TH_FULL = 0x9,
  QUAD1_RD_LAT_FIFO_4TH_FULL = 0xA,
  QUAD1_RD_LAT_FIFO_HALF_FULL = 0xB,
  QUAD1_RD_LAT_FIFO_FULL = 0xC,
  QUAD1_RD_LAT_FIFO_LT_16TH_FULL = 0xD,
  QUAD2_RD_LAT_FIFO_EMPTY = 0xE,
  QUAD2_RD_LAT_FIFO_16TH_FULL = 0xF,
  QUAD2_RD_LAT_FIFO_8TH_FULL = 0x10,
  QUAD2_RD_LAT_FIFO_4TH_FULL = 0x11,
  QUAD2_RD_LAT_FIFO_HALF_FULL = 0x12,
  QUAD2_RD_LAT_FIFO_FULL = 0x13,
  QUAD2_RD_LAT_FIFO_LT_16TH_FULL = 0x14,
  QUAD3_RD_LAT_FIFO_EMPTY = 0x15,
  QUAD3_RD_LAT_FIFO_16TH_FULL = 0x16,
  QUAD3_RD_LAT_FIFO_8TH_FULL = 0x17,
  QUAD3_RD_LAT_FIFO_4TH_FULL = 0x18,
  QUAD3_RD_LAT_FIFO_HALF_FULL = 0x19,
  QUAD3_RD_LAT_FIFO_FULL = 0x1A,
  QUAD3_RD_LAT_FIFO_LT_16TH_FULL = 0x1B,
  READ_STARVED_QUAD0 = 0x1C,
  READ_STARVED_QUAD1 = 0x1D,
  READ_STARVED_QUAD2 = 0x1E,
  READ_STARVED_QUAD3 = 0x1F,
  READ_STARVED = 0x20,
  READ_STALLED_QUAD0 = 0x21,
  READ_STALLED_QUAD1 = 0x22,
  READ_STALLED_QUAD2 = 0x23,
  READ_STALLED_QUAD3 = 0x24,
  READ_STALLED = 0x25,
  VALID_READ_QUAD0 = 0x26,
  VALID_READ_QUAD1 = 0x27,
  VALID_READ_QUAD2 = 0x28,
  VALID_READ_QUAD3 = 0x29,
  TC_TP_STARVED_QUAD0 = 0x2A,
  TC_TP_STARVED_QUAD1 = 0x2B,
  TC_TP_STARVED_QUAD2 = 0x2C,
  TC_TP_STARVED_QUAD3 = 0x2D,
  TC_TP_STARVED = 0x2E,
};

/*  378 */
enum IOC_PERFCOUNT_SELECT
{
  IOC_PERF_SEL_00 = 0x0,
  IOC_PERF_SEL_01 = 0x1,
  IOC_PERF_SEL_02 = 0x2,
  IOC_PERF_SEL_03 = 0x3,
  IOC_PERF_SEL_04 = 0x4,
  IOC_PERF_SEL_05 = 0x5,
  IOC_PERF_SEL_06 = 0x6,
  IOC_PERF_SEL_07 = 0x7,
  IOC_PERF_SEL_08 = 0x8,
  IOC_PERF_SEL_09 = 0x9,
  IOC_SPARES = 0xA,
};

/*  379 */
enum HZ_PERFCOUNT_SELECT
{
  WRC_1VAL_QUADS = 0x0,
  WRC_2VAL_QUADS = 0x1,
  WRC_3VAL_QUADS = 0x2,
  WRC_4VAL_QUADS = 0x3,
  HZ_WR_BUSY = 0x4,
  HZ_SPARE0 = 0x5,
  RDC_TILE_HIT = 0x6,
  RDC_STAGE3_STALL = 0x7,
  HZ_SPARE1 = 0x8,
  HZ_SPARE2 = 0x9,
  QUADS_KEPT = 0xA,
  QUADS_ZCULL = 0xB,
  QUADS_SCULL = 0xC,
  QUADS_SZCULL = 0xD,
  HZ_RE_BUSY = 0xE,
  BC_SCLK_COUNT = 0xF,
  BC_HZ_VALID0 = 0x10,
  BC_HZ_VALID1 = 0x11,
  BC_HZ_VALID2 = 0x12,
  BC_HZ_VALID3 = 0x13,
  SC_SCLK_COUNT = 0x14,
  SC_HZ_COARSE_SND = 0x15,
  HZ_SC_COARSE_HLD = 0x16,
  HZ_SC_HIER_SND = 0x17,
  SC_HZ_HIER_HLD = 0x18,
  HZ_BC_TILE_SND = 0x19,
  BC_HZ_TILE_HLD = 0x1A,
  SC_STALL_HZ = 0x1B,
  BC_STALL_HZ = 0x1C,
  EVENT_STALL = 0x1D,
  SC_STARVE_HZ_BUSY = 0x1E,
  SC_STARVE_HZ_IDLE = 0x1F,
};

/*  380 */
enum XGRAPHICS::AddrArray
{
  ADDR_INVALID = 0x0,
  ADDR_1D_LINEAR = 0x1,
  ADDR_2D_LINEAR = 0x2,
  ADDR_2D_TILED0 = 0x4,
  ADDR_2D_TILED1 = 0x5,
  ADDR_2D_TILED2 = 0x6,
  ADDR_2D_TILED3 = 0x7,
  ADDR_2D_COLOR0 = 0x8,
  ADDR_2D_COLOR1 = 0x9,
  ADDR_2D_COLOR2 = 0xA,
  ADDR_2D_COLOR3 = 0xB,
  ADDR_2D_DEPTH0 = 0xC,
  ADDR_2D_DEPTH1 = 0xD,
  ADDR_2D_DEPTH2 = 0xE,
  ADDR_2D_DEPTH3 = 0xF,
  ADDR_2D_MASKS0 = 0x10,
  ADDR_2D_MASKS1 = 0x11,
  ADDR_2D_MASKS2 = 0x12,
  ADDR_2D_MASKS3 = 0x13,
  ADDR_2D_EDRAMC = 0x14,
  ADDR_2D_EDRAMZ = 0x15,
  ADDR_3D_LINEAR = 0x16,
  ADDR_3D_TILED = 0x17,
  ADDR_3D_SLICE0 = 0x18,
  ADDR_3D_SLICE1 = 0x19,
  ADDR_3D_SLICE2 = 0x1A,
  ADDR_3D_SLICE3 = 0x1B,
  ADDR_3D_SLICE4 = 0x1C,
  ADDR_3D_SLICE5 = 0x1D,
  ADDR_3D_SLICE6 = 0x1E,
  ADDR_3D_SLICE7 = 0x1F,
  ADDR_3D_STACK0 = 0x20,
  ADDR_3D_STACK1 = 0x21,
  ADDR_3D_STACK2 = 0x22,
  ADDR_3D_STACK3 = 0x23,
};

/*  381 */
enum XGRAPHICS::ExportFormat
{
  EXPORT_8 = 0x0,
  EXPORT_16 = 0x1,
  EXPORT_8_8 = 0x2,
  EXPORT_5_6_5 = 0x3,
  EXPORT_6_5_5 = 0x4,
  EXPORT_4_4_4_4 = 0x5,
  EXPORT_1_5_5_5 = 0x6,
  EXPORT_32 = 0x7,
  EXPORT_16_16 = 0x8,
  EXPORT_10_11_11 = 0x9,
  EXPORT_11_11_10 = 0xA,
  EXPORT_8_8_8_8 = 0xB,
  EXPORT_2_10_10_10 = 0xC,
  EXPORT_32_32 = 0xD,
  EXPORT_16_16_16_16 = 0xE,
  EXPORT_32_32_32_32 = 0xF,
};

/*  382 */
enum XGRAPHICS::_VERTEX_INSTR_DESTSEL
{
  VERTEX_INSTR_SRC_X = 0x0,
  VERTEX_INSTR_SRC_Y = 0x1,
  VERTEX_INSTR_SRC_Z = 0x2,
  VERTEX_INSTR_SRC_W = 0x3,
  VERTEX_INSTR_ZERO = 0x4,
  VERTEX_INSTR_ONE = 0x5,
  VERTEX_INSTR_MASK = 0x7,
};

/*  383 */
enum XGRAPHICS::AddrDepthStates
{
  ADDR_DEPTH_ALL = 0x0,
  ADDR_DEPTH_24 = 0x1,
  ADDR_STENCIL_8 = 0x2,
  ADDR_STENCIL_4 = 0x3,
  ADDR_PMASK_4 = 0x4,
  ADDR_PMASK_2 = 0x5,
  ADDR_PMASK_1 = 0x6,
};

/*  384 */
enum XGRAPHICS::_E_PS_BLOCK_TYPE
{
  E_PS_BLOCK_RS0 = 0x0,
  E_PS_BLOCK_RS1 = 0x1,
  E_PS_BLOCK_RS2 = 0x2,
  E_PS_BLOCK_RS3 = 0x3,
  E_PS_BLOCK_RS4 = 0x4,
  E_PS_BLOCK_RS5 = 0x5,
  E_PS_BLOCK_PS = 0x6,
  E_PS_BLOCK_VS = 0x7,
  E_NUM_BLOCKS_IN_PS = 0x8,
};

/*  385 */
enum XGRAPHICS::PS_VIDMEM_UPDATE_TYPE
{
  PS_UPDATE_RS0 = 0x1,
  PS_UPDATE_RS1 = 0x2,
  PS_UPDATE_RS2 = 0x4,
  PS_UPDATE_RS3 = 0x8,
  PS_UPDATE_RS4 = 0x10,
  PS_UPDATE_RS5 = 0x20,
  PS_UPDATE_RS6 = 0x40,
  PS_UPDATE_RS7 = 0x80,
  PS_UPDATE_VS = 0x100,
  PS_UPDATE_PS = 0x200,
};

/*  386 */
enum DPFLVL
{
  DPFLVL_ASSERTION = 0x0,
  DPFLVL_ASSERTION_SECONDARY = 0x1,
  DPFLVL_ERROR_MESSAGE = 0x2,
  DPFLVL_HAL_ENTRY_EXIT = 0x3,
  DPFLVL_GENERAL_ENTRY_EXIT = 0x4,
  DPFLVL_HWL_ENTRY_EXIT = 0x5,
  DPFLVL_INFO_MESSAGE = 0x6,
  DPFLVL_DEBUG_1 = 0x7,
  DPFLVL_DEBUG_2 = 0x8,
  DPFLVL_DATA_DUMP = 0x9,
  DPFLVL_PIXELSHADER_DATA = 0xA,
  DPFLVL_VERTEXSHADER_DATA = 0xB,
  DPFLVL_CMDBUF_DUMP = 0xC,
  DPFLVL_VERTEXSHADER_DUMP = 0xD,
  DPFLVL_PIXELSHADER_DUMP = 0xE,
  DPFLVL_APP_DETECT = 0xF,
  DPFLVL_HWL_SPECIFIC_1 = 0x10,
  DPFLVL_HWL_SPECIFIC_2 = 0x11,
  DPFLVL_HWL_SPECIFIC_3 = 0x12,
  DPFLVL_HWL_SPECIFIC_4 = 0x13,
  DPFLVL_TOO_BIG = 0x14,
};

/*  387 */
enum XGRAPHICS::_R400_IL_PARAM_DSTSSMOD_TYPE
{
  R400_IL_DM_SS_NONE = 0x0,
  R400_IL_DM_SS_X2 = 0x200,
  R400_IL_DM_SS_X4 = 0x400,
  R400_IL_DM_SS_X8 = 0x600,
  R400_IL_DM_SS_D2 = 0x800,
  R400_IL_DM_SS_D4 = 0xA00,
  R400_IL_DM_SS_D8 = 0xC00,
  R400_IL_DM_SS_FORCE_DWORD = 0x7FFFFFFF,
};

/*  388 */
enum ATIPRIMTYPE
{
  ATI_PRIM_INDX_TRILIST = 0x0,
  ATI_PRIM_INDX_TRILIST_EF = 0x1,
  ATI_PRIM_TRILIST = 0x2,
  ATI_PRIM_INDX_TRISTRIP = 0x3,
  ATI_PRIM_TRISTRIP = 0x4,
  ATI_PRIM_INDX_TRIFAN = 0x5,
  ATI_PRIM_TRIFAN = 0x6,
  ATI_PRIM_INDX_LINELIST = 0x7,
  ATI_PRIM_LINELIST = 0x8,
  ATI_PRIM_INDX_LINESTRIP = 0x9,
  ATI_PRIM_LINESTRIP = 0xA,
  ATI_PRIM_POINTLIST = 0xB,
  ATI_PRIM_TOO_BIG = 0xC,
};

/*  389 */
typedef CFOpcode R400Tables::Op;

/*  390 */
enum XGRAPHICS::_R400_IL_RELADDRCOMP_TYPE
{
  R400_IL_RELADDRCOMP_X = 0x0,
  R400_IL_RELADDRCOMP_Y = 0x20000,
  R400_IL_RELADDRCOMP_Z = 0x40000,
  R400_IL_RELADDRCOMP_W = 0x60000,
  R400_IL_RELADDRCOMP_0 = 0x80000,
  R400_IL_RELADDRCOMP_1 = 0xA0000,
  R400_IL_RELADDRCOMP_FORCE_DWORD = 0x7FFFFFFF,
};

/*  391 */
enum R400Tables::Channel
{
  X = 0x0,
  Y = 0x1,
  Z = 0x2,
  W = 0x3,
  LAST_CHANNEL = 0x4,
};

/*  392 */
enum R400Tables::RegType
{
  REGTYPE_TEMP = 0x0,
  REGTYPE_CONST = 0x1,
  REGTYPE_CONST_BOOL = 0x2,
  REGTYPE_CONST_INT = 0x3,
  REGTYPE_EXPORT_INTERP = 0x4,
  REGTYPE_EXPORT_POS = 0x5,
  REGTYPE_EXPORT_SPRITE = 0x6,
  REGTYPE_EXPORT_Z = 0x7,
  REGTYPE_EXPORT_COLOR = 0x8,
  REGTYPE_EXPORT_MULTIPASS = 0x9,
  REGTYPE_FETCH_CONST = 0xA,
  REGTYPE_CONST_INTERNAL = 0xB,
  REGTYPE_BARYCENTRIC_COORD = 0xC,
  REGTYPE_PRIMITIVE_INDEX = 0xD,
  REGTYPE_QUAD_INDEX = 0xE,
  REGTYPE_PHYSICAL = 0xF,
  REGTYPE_PSEUDO_AUTOGEN_INDEX_PS = 0x10,
  REGTYPE_PSEUDO_AUTOGEN_INDEX_VS = 0x11,
  REGTYPE_PSEUDO_PARAM = 0x12,
  REGTYPE_PSEUDO_INTERP = 0x13,
  REGTYPE_PSEUDO_TEXCOORD = 0x14,
  REGTYPE_PSEUDO_COLOR0 = 0x15,
  REGTYPE_PSEUDO_COLOR1 = 0x16,
  REGTYPE_PSEUDO_FOG = 0x17,
  REGTYPE_PSEUDO_SINTERP = 0x18,
  REGTYPE_PSEUDO_VERTEX = 0x19,
  REGTYPE_PSEUDO_FACE = 0x1A,
  REGTYPE_PSEUDO_SPRITECOORD = 0x1B,
  REGTYPE_PSEUDO_LOD = 0x1C,
  REGTYPE_PSEUDO_GRADIENT = 0x1D,
  REGTYPE_VERTEX_INDEX = 0x1E,
  REGTYPE_PSEUDO_NTUPLE = 0x1F,
  REGTYPE_PSEUDO_WINCOORD = 0x20,
  REGTYPE_PSIN_VSOUT = 0x21,
  REGTYPE_ADDR = 0x22,
  REGTYPE_CONST_INDEX_X = 0x23,
  REGTYPE_CONST_INDEX_Y = 0x24,
  REGTYPE_CONST_INDEX_Z = 0x25,
  REGTYPE_CONST_INDEX_W = 0x26,
  REGTYPE_LOOP_CONTROL = 0x27,
  REGTYPE_CONST_LOOP_INDEX = 0x28,
  REGTYPE_INPUT_LOOP_INDEX = 0x29,
  REGTYPE_OUTPUT_LOOP_INDEX = 0x2A,
  REGTYPE_MEMEXPORT_ADDRESS = 0x2B,
  REGTYPE_MEMEXPORT_SLOT = 0x2C,
  REGTYPE_YIELD_IC_RESOURCE = 0x2D,
  REGTYPE_YIELD_P_RESOURCE = 0x2E,
  REGTYPE_YIELD_M_RESOURCE = 0x2F,
  LAST_REGTYPE = 0x30,
};

/*  393 */
enum R400Tables::ShaderType
{
  VERTEX_TYPE = 0x0,
  PIXEL = 0x1,
  LAST_SHADER_TYPE = 0x2,
};

/*  394 */
enum R400Tables::Predicate
{
  NO_PREDICATE = 0x0,
  PREDICATE_ONE_ZERO = 0x2,
  PREDICATE_ZERO_ONE = 0x3,
};

/*  395 */
enum R400Tables::ModDestChannel
{
  DEST_CHANNEL_NOMASK = 0x0,
  DEST_CHANNEL_MASK = 0x1,
  DEST_CHANNEL_ZERO = 0x2,
  DEST_CHANNEL_ONE = 0x3,
  DEST_CHANNEL_X = 0x4,
  DEST_CHANNEL_Y = 0x5,
  DEST_CHANNEL_Z = 0x6,
  DEST_CHANNEL_W = 0x7,
  LAST_DEST_CHANNEL = 0x8,
};

/*  396 */
enum XGRAPHICS::_FFPS_CONSTANT_OFFSET
{
  FFPSCO_CNST0 = 0x0,
  FFPSCO_CNST1 = 0x1,
  FFPSCO_CNST2 = 0x2,
  FFPSCO_CNST3 = 0x3,
  FFPSCO_CNST4 = 0x4,
  FFPSCO_CNST5 = 0x5,
  FFPSCO_CNST6 = 0x6,
  FFPSCO_CNST7 = 0x7,
  FFPSCO_BUMPMAT0 = 0x8,
  FFPSCO_BUMPMAT1 = 0x9,
  FFPSCO_BUMPMAT2 = 0xA,
  FFPSCO_BUMPMAT3 = 0xB,
  FFPSCO_BUMPMAT4 = 0xC,
  FFPSCO_BUMPMAT5 = 0xD,
  FFPSCO_BUMPMAT6 = 0xE,
  FFPSCO_BUMPMAT7 = 0xF,
  FFPSCO_BUMPLSLO0 = 0x10,
  FFPSCO_BUMPLSLO1 = 0x11,
  FFPSCO_BUMPLSLO2 = 0x12,
  FFPSCO_BUMPLSLO3 = 0x13,
  FFPSCO_BUMPLSLO4 = 0x14,
  FFPSCO_BUMPLSLO5 = 0x15,
  FFPSCO_BUMPLSLO6 = 0x16,
  FFPSCO_BUMPLSLO7 = 0x17,
  FFPSCO_CNSTTFACT = 0x18,
  FFPSCO_CNSTZERO = 0x19,
  FFPSCO_NCONSTANTS = 0x1A,
};

/*  397 */
enum R400Tables::ModSrcChannel
{
  SRC_CHANNEL_X = 0x0,
  SRC_CHANNEL_Y = 0x1,
  SRC_CHANNEL_Z = 0x2,
  SRC_CHANNEL_W = 0x3,
  SRC_CHANNEL_ZERO = 0x4,
  SRC_CHANNEL_ONE = 0x5,
  LAST_SRC_CHANNEL = 0x6,
};

/*  398 */
enum R400Tables::RelOp
{
  EQ = 0x0,
  NE = 0x1,
  GT = 0x2,
  GE = 0x3,
  LT = 0x4,
  LE = 0x5,
  LAST_REL_OP = 0x6,
};

/*  399 */
enum R400Tables::TexCoordMode
{
  TEXCOORDMODE_NORMALIZED = 0x0,
  TEXCOORDMODE_UNNORMALIZED = 0x1,
  TEXCOORDMODE_UNKNOWN = 0x2,
  TEXCOORDMODE_LAST = 0x3,
};

/*  400 */
enum XGRAPHICS::_R400_CTX_FLAGS
{
  R400CTXF_PNTSPRITE_ENA = 0x1,
  R400CTXF_FFPSSTATECHG = 0x2,
  R400CTXF_FFPSCNSTCHG = 0x4,
  R400CTXF_DIRTY_HIZ = 0x8,
};

/*  401 */
enum XGRAPHICS::_E_SURFACE_SYNC_MODE
{
  E_SYNC_SURFACE_MODE_NORMAL = 0x0,
  E_SYNC_SURFACE_MODE_ALWAYS = 0x1,
  E_SYNC_SURFACE_MODE_NEVER = 0x2,
};

/*  402 */
enum XGRAPHICS::_E_CENTER_CENTROID
{
  E_USE_DEFAULTS = 0x0,
  E_FORCE_CENTERS = 0x1,
  E_FORCE_CENTROIDS = 0x2,
};

/*  403 */
enum XGRAPHICS::_E_CLEAR_TYPE
{
  E_SLOW_CLEAR = 0x0,
  E_FAST_CLEAR = 0x1,
  E_FAST_EXPAND = 0x2,
};

/*  404 */
enum XGRAPHICS::R400_E_VB_HOSTBLT_PATH
{
  E_VB_HOSTBLT_PATH_SW = 0x0,
  E_VB_HOSTBLT_PATH_COPYBLT = 0x3,
  E_VB_HOSTBLT_PATH_FORCE_DWORD = 0x7FFFFFFF,
};

/*  405 */
enum _ATICACHESIZELOG2
{
  ATICACHESIZELOG2_TOO_SMALL = 0x8,
  ATICACHESIZELOG2_512 = 0x9,
  ATICACHESIZELOG2_1024 = 0xA,
  ATICACHESIZELOG2_2048 = 0xB,
  ATICACHESIZELOG2_4096 = 0xC,
  ATICACHESIZELOG2_8192 = 0xD,
  ATICACHESIZELOG2_TOO_BIG = 0xE,
  ATICACHESIZELOG2_FORCE_DWORD = 0x7FFFFFFF,
};

/*  406 */
enum _ATICACHEALG
{
  ATICACHEALG_NOCACHE = 0x0,
  ATICACHEALG_DEFAULT = 0x1,
  ATICACHEALG_JENKINS = 0x2,
  ATICACHEALG_PEARSON = 0x3,
  ATICACHEALG_ONEATATIME = 0x4,
  ATICACHEALG_SIMPLEMASK = 0x5,
  ATICACHEALG_FORCE_DWORD = 0x7FFFFFFF,
};

/*  407 */
enum $2E5E413DDAA694DB7384FD4B60FF3D46
{
  PERF_INITIAL_INPUT = 0x0,
  PERF_IL2IR = 0x1,
  PERF_CONVERT = 0x2,
  PERF_EXPAND = 0x3,
  PERF_BUILD_SSA = 0x4,
  PERF_PEEPHOLE = 0x5,
  PERF_BALANCE = 0x6,
  PERF_LINKAGE = 0x7,
  PERF_SCHED = 0x8,
  PERF_REPLACE_PHI = 0x9,
  PERF_GLOBAL_ALLOC = 0xA,
  PERF_ASSEMBLY = 0xB,
  PERF_ASM1 = 0xC,
  PERF_FINISHUP = 0xD,
  PERF_ASM3 = 0xE,
  PERF_ASM4 = 0xF,
  NUM_PERF_COUNTERS = 0x10,
};

/*  408 */
enum $C4996549AAF52AB46D0FD30475F5DA1D
{
  MEM_INITIAL_INPUT = 0x0,
  MEM_BUILD_SSA = 0x1,
  MEM_PEEPHOLE = 0x2,
  MEM_BALANCE = 0x3,
  MEM_LINKAGE = 0x4,
  MEM_SCHED = 0x5,
  MEM_REPLACE_PHI = 0x6,
  MEM_GLOBAL_ALLOC = 0x7,
  MEM_ASSEMBLY = 0x8,
  NUM_MEM_STATS = 0x9,
};

/*  409 */
enum XGRAPHICS::inst_ctors_idx
{
  NULL_NEWINST = 0x0,
  IRNOP_NEWINST = 0x1,
  IRUNARY_NEWINST = 0x2,
  IRMOV_NEWINST = 0x3,
  IRMOVBASE_NEWINST = 0x4,
  IRBINARY_NEWINST = 0x5,
  IRTRINARY_NEWINST = 0x6,
  IRZEROARY_NEWINST = 0x7,
  IRKILL_NEWINST = 0x8,
  IRKILL2_NEWINST = 0x9,
  IRCMP2_NEWINST = 0xA,
  IRCMP1S_NEWINST = 0xB,
  IRCMP1D_NEWINST = 0xC,
  IRTEXTUREFETCH_NEWINST = 0xD,
  IRPROJECTION_NEWINST = 0xE,
  IRLOOPSTART_NEWINST = 0xF,
  IRLOOPINDEX_NEWINST = 0x10,
  IRALLOCPOS_NEWINST = 0x11,
  IRALLOCMEM_NEWINST = 0x12,
  IRALLOCCOLOR_NEWINST = 0x13,
  IRALLOCINTERP_NEWINST = 0x14,
  IRLAST_NEWINST = 0x15,
};

/*  410 */
enum XGRAPHICS::OptFlags
{
  OPT_NOTHING = 0x0,
  OPT_COPY_FOLD = 0x1,
  OPT_VALUE_NUMBER = 0x2,
  OPT_CONST_PROP = 0x3,
  OPT_DEAD_CODE = 0x4,
  OPT_PEEPHOLE = 0x5,
  OPT_COLLAPSE_ALGEBRAIC = 0x6,
  OPT_COLLAPSE_SIMILAR = 0x7,
  OPT_BALANCE = 0x8,
  OPT_SCHEDULER_REORDER = 0x9,
  OPT_SCHEDULER_ALLOC_REG = 0xA,
  OPT_REGALLOC_ZERO_VIRTUALS = 0xB,
  OPT_COMPRESS = 0xC,
  OPT_PACK_CONSTANTS = 0xD,
  OPT_RECYCLE_MEM = 0xE,
  OPT_USE_VERTEX_CACHE = 0xF,
};

/*  411 */
enum $86E96F51E81A78BE16EB66EF6F73BF30
{
  INFINITY = 0x7FFFFFFF,
};

/*  412 */
enum $C94E4A91EDBEBD319F59C2FB7604C8B2
{
  error_none = 0x0,
  error_out_of_space = 0x10,
  error_null_shader = 0x15,
  error_program_out_of_registers = 0x16,
  error_program_over_size_limit = 0x17,
  error_interpolators_cannot_match = 0x18,
  error_over_max_texture_stages = 0x19,
  error_over_max_nested_loops = 0x1A,
  error_over_max_nested_calls = 0x1B,
  error_over_max_bool_constants = 0x1C,
  error_over_max_float_constants = 0x1D,
  error_over_max_int_constants = 0x1E,
  error_over_internal_const_regs = 0x1F,
};

/*  413 */
enum $047324CF14C4305A0CDC855795998DB7
{
  MAX_NUM_PROGS = 0x14,
};

/*  414 */
enum $D9682CA3054822DB86BE64B4F39DE090
{
  max_interpolators = 0x10,
};

/*  415 */
enum $C53F532C198B0FA3117C50C65A873A3C
{
  MultiPass_flag = 0x1,
  Vertex_flag = 0x2,
  Pixel_flag = 0x4,
  Pair_flag = 0x8,
};

/*  416 */
enum XGRAPHICS::ILRegTypeExt
{
  IL_REGTYPE_MULTIPASS = 0x19,
  IL_REGTYPE_CONST_INDEX_X = 0x1A,
  IL_REGTYPE_CONST_INDEX_Y = 0x1B,
  IL_REGTYPE_CONST_INDEX_Z = 0x1C,
  IL_REGTYPE_CONST_INDEX_W = 0x1D,
  IL_REGTYPE_CONST_LOOP_INDEX = 0x1E,
  IL_REGTYPE_INPUT_LOOP_INDEX = 0x1F,
  IL_REGTYPE_OUTPUT_LOOP_INDEX = 0x20,
  IL_REGTYPE_EXT_LAST = 0x21,
};

/*  417 */
enum XGRAPHICS::ILOpCodeExt
{
  IL_OP_EXT_BIAS = 0x64,
  IL_OP_EXT_CMPE = 0x65,
  IL_OP_EXT_CMPGE = 0x66,
  IL_OP_EXT_CMPLT = 0x67,
  IL_OP_EXT_CMPNE = 0x68,
  IL_OP_EXT_CND = 0x69,
  IL_OP_EXT_CNDE = 0x6A,
  IL_OP_EXT_CNDGE = 0x6B,
  IL_OP_EXT_CNDLT = 0x6C,
  IL_OP_EXT_EXP2 = 0x6D,
  IL_OP_EXT_EXPORT = 0x6E,
  IL_OP_EXT_FLOOR = 0x6F,
  IL_OP_EXT_INVERT = 0x70,
  IL_OP_EXT_JMP = 0x71,
  IL_OP_EXT_JNZ = 0x72,
  IL_OP_EXT_LOG2 = 0x73,
  IL_OP_EXT_M4X4 = 0x74,
  IL_OP_EXT_M4X3 = 0x75,
  IL_OP_EXT_M3X4 = 0x76,
  IL_OP_EXT_M3X3 = 0x77,
  IL_OP_EXT_M3X2 = 0x78,
  IL_OP_EXT_MASK = 0x79,
  IL_OP_EXT_NEGATE = 0x7A,
  IL_OP_EXT_PAIR = 0x7B,
  IL_OP_EXT_PHASE = 0x7C,
  IL_OP_EXT_SCALE = 0x7D,
  IL_OP_EXT_SETE = 0x7E,
  IL_OP_EXT_SETGE = 0x7F,
  IL_OP_EXT_SETLT = 0x80,
  IL_OP_EXT_SETNE = 0x81,
  IL_OP_EXT_SIGN = 0x82,
  IL_OP_EXT_SWIZZLE = 0x83,
  IL_OP_EXT_TARGET = 0x84,
  IL_OP_EXT_TEXCOORD = 0x85,
  IL_OP_EXT_TEXCRD = 0x86,
  IL_OP_EXT_VER = 0x87,
  IL_OP_EXT_LAST = 0x88,
};

/*  418 */
enum XGRAPHICS::DepType
{
  FLOW_DEP = 0x0,
  OUTP_DEP = 0x1,
  ANTI_DEP = 0x2,
  ANTI_YIELD_DEP = 0x3,
  ANTI_PROJ_DEP = 0x4,
  LAST_DEP = 0x5,
};

/*  419 */
enum XGRAPHICS::IDX_MODE
{
  IDX_NONE = 0x0,
  IDX_LOOP = 0x1,
  IDX_ADDR = 0x2,
};

/*  420 */
enum XGRAPHICS::DefinesAGpr
{
  IS_GPR = 0x1,
};

/*  421 */
enum XGRAPHICS::DefIsExport
{
  IS_EXPORT = 0x1,
};

/*  422 */
enum XGRAPHICS::ConstType
{
  CONST_REGULAR = 0x1,
  CONST_GENERATED = 0x2,
  CONST_LOOPS = 0x3,
  CONST_INDEXING = 0x4,
};

/*  423 */
enum XGRAPHICS::IndexMode
{
  INDEX_BASE = 0x1,
  INDEX_LOOP = 0x2,
};

/*  424 */
enum $B0AD74E37BC3853F761F3502165B1F49
{
  max_physical_index = 0x10,
};

/*  425 */
enum XGRAPHICS::R400ConstantModel::R400ConstantState
{
  NO_CONST = 0x0,
  C_LOG = 0x1,
  K_ABS = 0x2,
  CLI = 0x3,
  CAR = 0x4,
  C_C = 0x5,
  CLI_C = 0x6,
  C_CLI = 0x7,
  CLI_CLI = 0x8,
  CAR_C = 0x9,
  C_CAR = 0xA,
  CAR_CAR = 0xB,
};

/*  426 */
enum $B3E9D0B8EA9A93101E2EE06DE9FAA360
{
  inst_is_live = 0x1,
  inst_is_export = 0x2,
  inst_is_coissue = 0x4,
  inst_is_pinned = 0x8,
  inst_is_required = 0x10,
  output_is_global_reg = 0x20,
  output_is_physical_reg = 0x40,
  output_is_virtual_reg = 0x80,
  inst_ends_exec_group = 0x100,
  has_partial_write_input = 0x200,
  inst_is_killed_in_ssa = 0x400,
  do_not_coalesce = 0x800,
  yield_is_needed = 0x1000,
  fetch_or_used_by_fetch = 0x2000,
};

/*  427 */
enum XGRAPHICS::R400SlotModel::R400SlotState
{
  A0_V = 0x1,
  A0_S = 0x2,
  D0_D = 0x3,
};

/*  428 */
enum $CD5FCE6A659E0CE83569857A8B0BB0C6
{
  has_fetch = 0x1,
  has_memexport = 0x2,
  has_pixkill = 0x4,
  dominated_by_IC_alloc = 0x8,
};

/*  429 */
enum XGRAPHICS::ProcessingDirective
{
  PROCESS_UNDETERMINED = 0x0,
  PROCESS_SPECIAL = 0x1,
  PROCESS_ERROR = 0x2,
  PROCESS_PREPROCESSED = 0x3,
  PROCESS_CONVERSION = 0x4,
  PROCESS_EXPANSION = 0x5,
  PRE_PROCESS_EXPANSION = 0x6,
  LAST_PROCESSING_DIRECTIVE = 0x7,
};

/*  430 */
enum XGRAPHICS::ActionRules
{
  OO = 0x0,
  ACTION_NOT_READY = 0x1,
  A1 = 0x2,
  A1p1 = 0x3,
  A1p2 = 0x4,
  A1p3 = 0x5,
  A2 = 0x6,
  A2nc = 0x7,
  A2p1 = 0x8,
  A2p2 = 0x9,
  A2p3 = 0xA,
  A3 = 0xB,
  A3p1 = 0xC,
  A3p2 = 0xD,
  A3p3 = 0xE,
  A4 = 0xF,
  AS1 = 0x10,
  ABS = 0x11,
  ASIN_EX = 0x12,
  BEGIN_EXPANSION = 0x13,
  BOUNDARY_LOG = 0x14,
  BOUNDARY_LOGP = 0x15,
  BOUNDARY_LN = 0x16,
  BREAK_EX = 0x17,
  BREAKC_EX = 0x18,
  BUMPENVMAT00 = 0x19,
  BUMPENVMAT01 = 0x1A,
  BUMPENVMAT10 = 0x1B,
  BUMPENVMAT11 = 0x1C,
  BUMPENVLSCALE = 0x1D,
  BUMPENVLOFFSET = 0x1E,
  CHAN = 0x1F,
  CMASK = 0x20,
  CMP_EX = 0x21,
  CMP_INSERT = 0x22,
  CONTINUE_EX = 0x23,
  CONTINUEC_EX = 0x24,
  ELSE = 0x25,
  ELSE_EX = 0x26,
  ENDIF = 0x27,
  ENDIF_EX = 0x28,
  END_EXPANSION = 0x29,
  EXPAND_LABEL = 0x2A,
  EXPAND_TEX = 0x2B,
  FOUR_CHANNEL_CONST = 0x2C,
  IF = 0x2D,
  IFC_EX = 0x2E,
  JNZ_EX = 0x2F,
  KILL_NTUPLE = 0x30,
  LOOPEND_EX = 0x31,
  LOOP_EX = 0x32,
  MAKE = 0x33,
  MASK_PRIORITY_EXTERNAL = 0x34,
  MBIAS = 0x35,
  MCLAMP = 0x36,
  MINVERT = 0x37,
  MMUL_EX = 0x38,
  MNEG = 0x39,
  MOVA_EX = 0x3A,
  MSCALE = 0x3B,
  PROJECT_EX = 0x3C,
  P_REG = 0x3D,
  ONE_CHANNEL_CONST = 0x3E,
  RECIP_EXXX = 0x3F,
  RECIP_EXYY = 0x40,
  RECIP_EXZZ = 0x41,
  RECIP_EXWW = 0x42,
  RECIP_EXWX = 0x43,
  RECIPSQRT_A2_TO_A1_EX = 0x44,
  RECIPSQRT_T0_TO_T0_EX = 0x45,
  REFLECT_EX = 0x46,
  ROUND = 0x47,
  SET_CENTROID = 0x48,
  SET_EX = 0x49,
  SET_OFFSETX = 0x4A,
  SET_OFFSETY = 0x4B,
  SET_STAGE = 0x4C,
  SET_STAGE_FROM_KILL = 0x4D,
  SINCOS_EX = 0x4E,
  T0 = 0x4F,
  T1 = 0x50,
  T2 = 0x51,
  T3 = 0x52,
  T4 = 0x53,
  T5 = 0x54,
  T6 = 0x55,
  TARGET_EX = 0x56,
  TEXKILL = 0x57,
  THEN = 0x58,
  THEN_EX = 0x59,
  USE_CMP_ALWAYS_TRUE = 0x5A,
  USE_CMP_ON_BOOL = 0x5B,
  USE_CMP_ON_FLOATS = 0x5C,
  NOCLAMP = 0x5D,
  CLAMP01 = 0x5E,
  CLAMPNEG11 = 0x5F,
  LAST_ACTION_RULE = 0x60,
};

/*  431 */
enum XGRAPHICS::ILBranchDirection
{
  DynamicBranch = 0x0,
  BranchToThen = 0x1,
  BranchToElse = 0x2,
};

/*  432 */
enum XGRAPHICS::ILInstIterator::BOOL_VAL
{
  BOOL_UNDEFINED = 0xFFFFFFFF,
  BOOL_FALSE = 0x0,
  BOOL_TRUE = 0x1,
};

/*  433 */
enum XGRAPHICS::CurrentValue::KnownValues
{
  VALUE_NUMBER_ONE = 0x1,
  VALUE_NUMBER_ZERO = 0x2,
  VALUE_NUMBER_UNDEFINED = 0x3,
};

/*  434 */
enum D3D::MIPPACKINGTYPE
{
  MIPPACKING_DISABLED = 0x0,
  MIPPACKING_ENABLED = 0x1,
  MIPPACKING_DEFAULT = 0x2,
};

/*  435 */
enum _KDRIVER_NOTIFICATION_TYPE
{
  DriverQuiesceRundown = 0x0,
  DriverQuiesceStartup = 0x1,
  DriverShutdown = 0x2,
};

/*  436 */
enum _KPOWER_MODE
{
  PowerModeQuiet = 0x0,
  PowerModeFull = 0x1,
};

/*  437 */
enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 0x1,
  FileFullDirectoryInformation = 0x2,
  FileBothDirectoryInformation = 0x3,
  FileBasicInformation = 0x4,
  FileStandardInformation = 0x5,
  FileInternalInformation = 0x6,
  FileEaInformation = 0x7,
  FileAccessInformation = 0x8,
  FileNameInformation = 0x9,
  FileRenameInformation = 0xA,
  FileLinkInformation = 0xB,
  FileNamesInformation = 0xC,
  FileDispositionInformation = 0xD,
  FilePositionInformation = 0xE,
  FileFullEaInformation = 0xF,
  FileModeInformation = 0x10,
  FileAlignmentInformation = 0x11,
  FileAllInformation = 0x12,
  FileAllocationInformation = 0x13,
  FileEndOfFileInformation = 0x14,
  FileAlternateNameInformation = 0x15,
  FileStreamInformation = 0x16,
  FilePipeInformation = 0x17,
  FilePipeLocalInformation = 0x18,
  FilePipeRemoteInformation = 0x19,
  FileMailslotQueryInformation = 0x1A,
  FileMailslotSetInformation = 0x1B,
  FileCompressionInformation = 0x1C,
  FileObjectIdInformation = 0x1D,
  FileCompletionInformation = 0x1E,
  FileMoveClusterInformation = 0x1F,
  FileQuotaInformation = 0x20,
  FileReparsePointInformation = 0x21,
  FileNetworkOpenInformation = 0x22,
  FileAttributeTagInformation = 0x23,
  FileTrackingInformation = 0x24,
  FileMaximumInformation = 0x25,
};

/*  438 */
enum _PROXY_CLASS
{
  ProxyFull = 0x0,
  ProxyService = 0x1,
  ProxyTree = 0x2,
  ProxyDirectory = 0x3,
};

/*  439 */
enum $D1500855AC9ABE02F9E25341F44073CC
{
  HvpExp_HvpAcquireSpinLock = 0x0,
  HvpExp_HvpReleaseSpinLock = 0x1,
  HvpExp_HvpPhysicalToReal = 0x2,
  HvpExp_HvpRelocateCacheLines = 0x3,
  HvpExp_HvpRelocatePhysicalToEncrypted = 0x4,
  HvpExp_HvpRelocateEncryptedToPhysical = 0x5,
  HvpExp_HvpRelocatePhysicalToProtected = 0x6,
  HvpExp_HvpRelocateProtectedToPhysical = 0x7,
  HvpExp_HvpFlagsUpdate = 0x8,
  HvpExp_HvpPkcs1Verify = 0x9,
  HvpExp_memcmp = 0xA,
  HvpExp_memcpy = 0xB,
  HvpExp_memset = 0xC,
  HvpExp_XeCryptAesCbc = 0xD,
  HvpExp_XeCryptAesEcb = 0xE,
  HvpExp_XeCryptAesKey = 0xF,
  HvpExp_XeCryptBnDwLePkcs1Format = 0x10,
  HvpExp_XeCryptBnDwLePkcs1Verify = 0x11,
  HvpExp_XeCryptBnDw_Copy = 0x12,
  HvpExp_XeCryptBnDw_SwapLeBe = 0x13,
  HvpExp_XeCryptBnQwBeSigFormat = 0x14,
  HvpExp_XeCryptBnQwBeSigVerify = 0x15,
  HvpExp_XeCryptBnQwNeModExp = 0x16,
  HvpExp_XeCryptBnQwNeModInv = 0x17,
  HvpExp_XeCryptBnQwNeModMul = 0x18,
  HvpExp_XeCryptBnQwNeRsaPrvCrypt = 0x19,
  HvpExp_XeCryptBnQwNeRsaPubCrypt = 0x1A,
  HvpExp_XeCryptBnQw_Zero = 0x1B,
  HvpExp_XeCryptBnQw_Copy = 0x1C,
  HvpExp_XeCryptBnQw_SwapDwQwLeBe = 0x1D,
  HvpExp_XeCryptDes3Cbc = 0x1E,
  HvpExp_XeCryptDes3Ecb = 0x1F,
  HvpExp_XeCryptDes3Key = 0x20,
  HvpExp_XeCryptDesEcb = 0x21,
  HvpExp_XeCryptDesCbc = 0x22,
  HvpExp_XeCryptDesKey = 0x23,
  HvpExp_XeCryptDesParity = 0x24,
  HvpExp_XeCryptHammingWeight = 0x25,
  HvpExp_XeCryptHmacSha = 0x26,
  HvpExp_XeCryptHmacShaFinal = 0x27,
  HvpExp_XeCryptHmacShaInit = 0x28,
  HvpExp_XeCryptHmacShaUpdate = 0x29,
  HvpExp_XeCryptMemAlloc = 0x2A,
  HvpExp_XeCryptMemFree = 0x2B,
  HvpExp_XeCryptRandom = 0x2C,
  HvpExp_XeCryptRc4 = 0x2D,
  HvpExp_XeCryptRc4Ecb = 0x2E,
  HvpExp_XeCryptRc4Key = 0x2F,
  HvpExp_XeCryptRotSum = 0x30,
  HvpExp_XeCryptRotSum4 = 0x31,
  HvpExp_XeCryptRotSumSha = 0x32,
  HvpExp_XeCryptSha = 0x33,
  HvpExp_XeCryptShaFinal = 0x34,
  HvpExp_XeCryptShaInit = 0x35,
  HvpExp_XeCryptShaUpdate = 0x36,
  HvpExp_XeCryptSwizzle = 0x37,
  HvpExp_XeCryptUidEccEncode = 0x38,
  HvpExp_XeCryptUidEccDecode = 0x39,
  HvpExp_HvpGetDataEx = 0x3A,
  HvpExp_Count = 0x3B,
};

/*  440 */
enum _KOBJECTS
{
  EventNotificationObject = 0x0,
  EventSynchronizationObject = 0x1,
  MutantObject = 0x2,
  ProcessObject = 0x3,
  QueueObject = 0x4,
  SemaphoreObject = 0x5,
  ThreadObject = 0x6,
  Spare1Object = 0x7,
  TimerNotificationObject = 0x8,
  TimerSynchronizationObject = 0x9,
  Spare2Object = 0xA,
  Spare3Object = 0xB,
  Spare4Object = 0xC,
  Spare5Object = 0xD,
  Spare6Object = 0xE,
  Spare7Object = 0xF,
  Spare8Object = 0x10,
  Spare9Object = 0x11,
  ApcObject = 0x12,
  DpcObject = 0x13,
  DeviceQueueObject = 0x14,
  EventPairObject = 0x15,
  InterruptObject = 0x16,
  ProfileObject = 0x17,
};

/*  441 */
enum $7D60B6E76FE9F2580EFDCC38554D1214
{
  Hvt1_HvxCreateUserMode = 0x0,
  Hvt1_HvxDeleteUserMode = 0x1,
  Hvt1_HvxKeysSaveBootLoader = 0x2,
  Hvt1_HvxKeysSaveSystemUpdate = 0x3,
  Hvt1_HvxSecurityInitialize = 0x4,
  Hvt1_HvxSecurityLoadSettings = 0x5,
  Hvt1_HvxSecuritySaveSettings = 0x6,
  Hvt1_XeCryptAesCbc = 0x7,
  Hvt1_XeCryptAesEcb = 0x8,
  Hvt1_XeCryptAesKey = 0x9,
  Hvt1_XeCryptBnDwLePkcs1Format = 0xA,
  Hvt1_XeCryptBnDwLePkcs1Verify = 0xB,
  Hvt1_XeCryptBnDw_Copy = 0xC,
  Hvt1_XeCryptBnDw_SwapLeBe = 0xD,
  Hvt1_XeCryptBnQwBeSigFormat = 0xE,
  Hvt1_XeCryptBnQwBeSigVerify = 0xF,
  Hvt1_XeCryptBnQwNeModExp = 0x10,
  Hvt1_XeCryptBnQwNeModInv = 0x11,
  Hvt1_XeCryptBnQwNeModMul = 0x12,
  Hvt1_XeCryptBnQwNeRsaPrvCrypt = 0x13,
  Hvt1_XeCryptBnQwNeRsaPubCrypt = 0x14,
  Hvt1_XeCryptBnQw_Zero = 0x15,
  Hvt1_XeCryptBnQw_Copy = 0x16,
  Hvt1_XeCryptBnQw_SwapDwQwLeBe = 0x17,
  Hvt1_XeCryptDes3Cbc = 0x18,
  Hvt1_XeCryptDes3Ecb = 0x19,
  Hvt1_XeCryptDes3Key = 0x1A,
  Hvt1_XeCryptDesEcb = 0x1B,
  Hvt1_XeCryptDesCbc = 0x1C,
  Hvt1_XeCryptDesKey = 0x1D,
  Hvt1_XeCryptDesParity = 0x1E,
  Hvt1_XeCryptHammingWeight = 0x1F,
  Hvt1_XeCryptHmacSha = 0x20,
  Hvt1_XeCryptHmacShaFinal = 0x21,
  Hvt1_XeCryptHmacShaInit = 0x22,
  Hvt1_XeCryptHmacShaUpdate = 0x23,
  Hvt1_XeCryptMemAlloc = 0x24,
  Hvt1_XeCryptMemFree = 0x25,
  Hvt1_XeCryptRandom = 0x26,
  Hvt1_XeCryptRc4 = 0x27,
  Hvt1_XeCryptRc4Ecb = 0x28,
  Hvt1_XeCryptRc4Key = 0x29,
  Hvt1_XeCryptRotSum = 0x2A,
  Hvt1_XeCryptRotSum4 = 0x2B,
  Hvt1_XeCryptRotSumSha = 0x2C,
  Hvt1_XeCryptSha = 0x2D,
  Hvt1_XeCryptShaFinal = 0x2E,
  Hvt1_XeCryptShaInit = 0x2F,
  Hvt1_XeCryptShaUpdate = 0x30,
  Hvt1_XeCryptSwizzle = 0x31,
  Hvt1_XeCryptUidEccEncode = 0x32,
  Hvt1_XeCryptUidEccDecode = 0x33,
  Hvt1_XeCryptHdcpCalculateMi = 0x34,
  Hvt1_XeCryptHdcpCalculateAKsvSignature = 0x35,
  Hvt1_XeCryptHdcpCalculateBKsvSignature = 0x36,
  Hvt1_Count = 0x37,
};

/*  442 */
enum _KINTERRUPT_MODE
{
  LevelSensitive = 0x0,
  Latched = 0x1,
};

/*  443 */
enum _FSCACHE_PROCESS_TYPE
{
  FsCacheProcessTypeThread = 0x0,
  FsCacheProcessTypeTitle = 0x1,
  FsCacheProcessTypeSystem = 0x2,
};

/*  444 */
enum _POOL_TYPE
{
  PoolTypeThread = 0x0,
  PoolTypeTitle = 0x1,
  PoolTypeSystem = 0x2,
};

/*  445 */
enum _KPROCESS_TYPE
{
  ProcessTypeNone = 0x0,
  ProcessTypeIdle = 0x0,
  ProcessTypeTitle = 0x1,
  ProcessTypeSystem = 0x2,
};

/*  446 */
enum _KTHREAD_STATE
{
  Initialized = 0x0,
  Ready = 0x1,
  Running = 0x2,
  Standby = 0x3,
  Terminated = 0x4,
  Waiting = 0x5,
  DeferredReady = 0x6,
};

/*  447 */
enum _KWAIT_REASON
{
  Executive = 0x0,
  DelayExecution = 0x1,
  Suspended = 0x2,
  UserRequest = 0x3,
  WrQueue = 0x4,
  WrFsCacheIn = 0x5,
  WrFsCacheOut = 0x6,
  WrReadWriteLock = 0x7,
  WrCriticalSection = 0x8,
  MaximumWaitReason = 0x9,
};

/*  448 */
enum $960149983C21DF2994B149CAFF8B2A06
{
  Hvt2_memcmp = 0x0,
  Hvt2_memcpy = 0x1,
  Hvt2_memset = 0x2,
  Hvt2_HvpFatal = 0x3,
  Hvt2_HvpCopyQwVec = 0x4,
  Hvt2_HvpAcquireSpinLock = 0x5,
  Hvt2_HvpReleaseSpinLock = 0x6,
  Hvt2_HvpGetFlashBaseAddress = 0x7,
  Hvt2_HvpGetSocMmioRegs = 0x8,
  Hvt2_HvpSetRMCI = 0x9,
  Hvt2_HvpZeroCacheLines = 0xA,
  Hvt2_HvpGetUserModeSlb = 0xB,
  Hvt2_HvpGetUserModeTlb = 0xC,
  Hvt2_HvpPhysicalToReal = 0xD,
  Hvt2_HvpRelocatePhysicalToEncrypted = 0xE,
  Hvt2_HvpRelocateEncryptedToPhysical = 0xF,
  Hvt2_HvpRelocatePhysicalToProtected = 0x10,
  Hvt2_HvpRelocateProtectedToPhysical = 0x11,
  Hvt2_HvpBldrFlashRange = 0x12,
  Hvt2_HvpIsBufferZeroed = 0x13,
  Hvt2_Count = 0x14,
};

/*  449 */
enum KCONTINUE_STATUS
{
  ContinueError = 0x0,
  ContinueSuccess = 0x1,
  ContinueProcessorReselected = 0x2,
  ContinueNextProcessor = 0x3,
};

/*  450 */
enum _KUSER_MODE_TYPE
{
  UserModeTitle = 0x0,
  UserModeSystem = 0x1,
};

/*  451 */
enum _HAL_GPIO_ACTION
{
  HalGpioOutputEnable = 0x0,
  HalGpioOutputType = 0x1,
  HalGpioAlternateFunction = 0x2,
  HalGpioOutputData = 0x3,
  HalGpioOutputDataSet = 0x4,
  HalGpioOutputDataClear = 0x5,
  HalGpioInputData = 0x6,
  HalGpioInputInverting = 0x7,
  HalGpioNoiseCancelWidth = 0x8,
};

/*  452 */
enum _FSINFOCLASS
{
  FileFsVolumeInformation = 0x1,
  FileFsLabelInformation = 0x2,
  FileFsSizeInformation = 0x3,
  FileFsDeviceInformation = 0x4,
  FileFsAttributeInformation = 0x5,
  FileFsControlInformation = 0x6,
  FileFsFullSizeInformation = 0x7,
  FileFsObjectIdInformation = 0x8,
  FileFsMaximumInformation = 0x9,
};

/*  453 */
enum _RUNTIME_FUNCTION_TYPE
{
  FunctionTypeSaveMillicode = 0x0,
  FunctionTypeNoHandler = 0x1,
  FunctionTypeRestoreMillicode = 0x2,
  FunctionTypeHandler = 0x3,
};

/*  454 */
enum $8BD23EF9FC88B01D7E752B5FF3A10F4B
{
  HvImp_KiProcessorStartup = 0x0,
  HvImp_KiCommonInterruptHandler = 0x1,
  HvImp_KiHandleExternalInterrupt = 0x2,
  HvImp_KiHandleAlignmentInterrupt = 0x3,
  HvImp_KiHandleProgramInterrupt = 0x4,
  HvImp_KiHandleFpuUnavailableInterrupt = 0x5,
  HvImp_KiHandleDecrementerInterrupt = 0x6,
  HvImp_KiHandleSystemCall = 0x7,
  HvImp_KiHandleTraceInterrupt = 0x8,
  HvImp_KiHandleVpuUnavailableInterrupt = 0x9,
  HvImp_KiHandleDataBreakpointInterrupt = 0xA,
  HvImp_KiHandleStackOverflow = 0xB,
  HvImp_KiHandleStorageViolationInterrupt = 0xC,
  HvImp_KiHandleVMXAssistInterrupt = 0xD,
  HvImp_KiPcrPageArray = 0xE,
  HvImp_HvStats = 0xF,
  HvImp_XeCryptRandomState = 0x10,
  HvImp_Count = 0x11,
};

/*  455 */
enum $8119AE9440E5AE259D0D5D462F64C42F
{
  HvExp_HvxGetVersions = 0x0,
  HvExp_HvxStartupProcessors = 0x1,
  HvExp_HvxQuiesceProcessor = 0x2,
  HvExp_HvxFlushEntireTb = 0x3,
  HvExp_HvxFlushSingleTb = 0x4,
  HvExp_HvxRelocateAndFlush = 0x5,
  HvExp_HvxGetSpecialPurposeRegister = 0x6,
  HvExp_HvxSetSpecialPurposeRegister = 0x7,
  HvExp_HvxGetSocRegister = 0x8,
  HvExp_HvxSetSocRegister = 0x9,
  HvExp_HvxSetTimeBaseToZero = 0xA,
  HvExp_HvxZeroPage = 0xB,
  HvExp_HvxFlushDcacheRange = 0xC,
  HvExp_HvxPostOutput = 0xD,
  HvExp_HvxEnablePerformanceMonitor = 0xE,
  HvExp_HvxGetImagePageTableEntry = 0xF,
  HvExp_HvxSetImagePageTableEntry = 0x10,
  HvExp_HvxCreateImageMapping = 0x11,
  HvExp_HvxMapImagePage = 0x12,
  HvExp_HvxCompleteImageMapping = 0x13,
  HvExp_HvxLoadImageData = 0x14,
  HvExp_HvxFinishImageDataLoad = 0x15,
  HvExp_HvxStartResolveImports = 0x16,
  HvExp_HvxResolveImports = 0x17,
  HvExp_HvxFinishImageLoad = 0x18,
  HvExp_HvxAbandonImageLoad = 0x19,
  HvExp_HvxUnmapImagePages = 0x1A,
  HvExp_HvxUnmapImage = 0x1B,
  HvExp_HvxUnmapImageRange = 0x1C,
  HvExp_HvxCreateUserMode = 0x1D,
  HvExp_HvxDeleteUserMode = 0x1E,
  HvExp_HvxFlushUserModeTb = 0x1F,
  HvExp_HvxSetPowerMode = 0x20,
  HvExp_HvxShadowBoot = 0x21,
  HvExp_HvxBlowFuses = 0x22,
  HvExp_HvxFsbInterrupt = 0x23,
  HvExp_HvxLockL2 = 0x24,
  HvExp_HvxDvdAuthBuildNVPage = 0x25,
  HvExp_HvxDvdAuthVerifyNVPage = 0x26,
  HvExp_HvxDvdAuthRecordAuthenticationPage = 0x27,
  HvExp_HvxDvdAuthRecordXControl = 0x28,
  HvExp_HvxDvdAuthGetAuthPage = 0x29,
  HvExp_HvxDvdAuthVerifyAuthPage = 0x2A,
  HvExp_HvxDvdAuthGetNextLBAIndex = 0x2B,
  HvExp_HvxDvdAuthVerifyLBA = 0x2C,
  HvExp_HvxDvdAuthClearDiscAuthInfo = 0x2D,
  HvExp_HvxKeysInitialize = 0x2E,
  HvExp_HvxKeysGetKeyProperties = 0x2F,
  HvExp_HvxKeysGetStatus = 0x30,
  HvExp_HvxKeysGenerateRandomKey = 0x31,
  HvExp_HvxKeysGetFactoryChallenge = 0x32,
  HvExp_HvxKeysSetFactoryResponse = 0x33,
  HvExp_HvxKeysSaveBootLoader = 0x34,
  HvExp_HvxKeysSaveKeyVault = 0x35,
  HvExp_HvxKeysSetKey = 0x36,
  HvExp_HvxKeysGetKey = 0x37,
  HvExp_HvxKeysGetDigest = 0x38,
  HvExp_HvxKeysRsaPrvCrypt = 0x39,
  HvExp_HvxKeysHmacSha = 0x3A,
  HvExp_HvxKeysAesCbc = 0x3B,
  HvExp_HvxKeysDes2Cbc = 0x3C,
  HvExp_HvxKeysDesCbc = 0x3D,
  HvExp_HvxKeysObscureKey = 0x3E,
  HvExp_HvxKeysSaveSystemUpdate = 0x3F,
  HvExp_HvxKeysExecute = 0x40,
  HvExp_HvxDvdAuthTestMode = 0x41,
  HvExp_HvxEnableTimebase = 0x42,
  HvExp_HvxHdcpCalculateMi = 0x43,
  HvExp_HvxHdcpCalculateAKsvSignature = 0x44,
  HvExp_HvxHdcpCalculateBKsvSignature = 0x45,
  HvExp_HvxSetRevocationList = 0x46,
  HvExp_HvxEncryptedReserveAllocation = 0x47,
  HvExp_HvxEncryptedReleaseAllocation = 0x48,
  HvExp_HvxEncryptedEncryptAllocation = 0x49,
  HvExp_HvxEncryptedSweepAddressRange = 0x4A,
  HvExp_HvxKeysExCreateKeyVault = 0x4B,
  HvExp_HvxKeysExLoadKeyVault = 0x4C,
  HvExp_HvxKeysExSaveKeyVault = 0x4D,
  HvExp_HvxKeysExSetKey = 0x4E,
  HvExp_HvxKeysExGetKey = 0x4F,
  HvExp_HvxSecurityInitialize = 0x50,
  HvExp_HvxSecurityLoadSettings = 0x51,
  HvExp_HvxSecuritySaveSettings = 0x52,
  HvExp_HvxSecuritySetDetected = 0x53,
  HvExp_HvxSecurityGetDetected = 0x54,
  HvExp_HvxSecuritySetActivated = 0x55,
  HvExp_HvxSecurityGetActivated = 0x56,
  HvExp_HvxGetProtectedFlags = 0x57,
  HvExp_HvxSetProtectedFlag = 0x58,
  HvExp_HvxDvdAuthAP25InstallTable = 0x59,
  HvExp_HvxDvdAuthAP25RefreshTable = 0x5A,
  HvExp_HvxDvdAuthAP25GetTableVersion = 0x5B,
  HvExp_HvxDvdAuthAP25LoadChallengeSet = 0x5C,
  HvExp_HvxDvdAuthAP25GetNextChallenge = 0x5D,
  HvExp_HvxDvdAuthAP25VerifyAnswer = 0x5E,
  HvExp_Count = 0x5F,
};

/*  456 */
enum _MEMORY_REGION_TYPE
{
  MemoryRegionThread = 0x0,
  MemoryRegionTitle = 0x1,
  MemoryRegionSystem = 0x2,
};

/*  457 */
enum _STF_CONTROL_CODE
{
  StfLockVolume = 0x0,
  StfUnlockVolume = 0x1,
  StfFlushDirtyBuffers = 0x2,
  StfBuildVolumeDescriptor = 0x3,
  StfResetWriteState = 0x4,
};

/*  458 */
enum _FP_IEEE_COMPARE_RESULT
{
  FpCompareEqual = 0x0,
  FpCompareGreater = 0x1,
  FpCompareLess = 0x2,
  FpCompareUnordered = 0x3,
};

/*  459 */
enum _FP__IEEE_FORMAT
{
  FpFormatFp32 = 0x0,
  FpFormatFp64 = 0x1,
  FpFormatFp80 = 0x2,
  FpFormatFp128 = 0x3,
  FpFormatI16 = 0x4,
  FpFormatI32 = 0x5,
  FpFormatI64 = 0x6,
  FpFormatU16 = 0x7,
  FpFormatU32 = 0x8,
  FpFormatU64 = 0x9,
  FpFormatCompare = 0xA,
  FpFormatString = 0xB,
};

/*  460 */
enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 0x1,
  NtProductLanManNt = 0x2,
  NtProductServer = 0x3,
};

/*  461 */
enum _SUITE_TYPE
{
  SmallBusiness = 0x0,
  Enterprise = 0x1,
  BackOffice = 0x2,
  CommunicationServer = 0x3,
  TerminalServer = 0x4,
  SmallBusinessRestricted = 0x5,
  EmbeddedNT = 0x6,
  DataCenter = 0x7,
  SingleUserTS = 0x8,
  MaxSuiteType = 0x9,
};

/*  462 */
enum _FP_IEEE_OPERATION_CODE
{
  FpCodeUnspecified = 0x0,
  FpCodeAdd = 0x1,
  FpCodeSubtract = 0x2,
  FpCodeMultiply = 0x3,
  FpCodeDivide = 0x4,
  FpCodeSquareRoot = 0x5,
  FpCodeRemainder = 0x6,
  FpCodeCompare = 0x7,
  FpCodeConvert = 0x8,
  FpCodeRound = 0x9,
  FpCodeTruncate = 0xA,
  FpCodeFloor = 0xB,
  FpCodeCeil = 0xC,
  FpCodeAcos = 0xD,
  FpCodeAsin = 0xE,
  FpCodeAtan = 0xF,
  FpCodeAtan2 = 0x10,
  FpCodeCabs = 0x11,
  FpCodeCos = 0x12,
  FpCodeCosh = 0x13,
  FpCodeExp = 0x14,
  FpCodeFabs = 0x15,
  FpCodeFmod = 0x16,
  FpCodeFrexp = 0x17,
  FpCodeHypot = 0x18,
  FpCodeLdexp = 0x19,
  FpCodeLog = 0x1A,
  FpCodeLog10 = 0x1B,
  FpCodeModf = 0x1C,
  FpCodePow = 0x1D,
  FpCodeSin = 0x1E,
  FpCodeSinh = 0x1F,
  FpCodeTan = 0x20,
  FpCodeTanh = 0x21,
  FpCodeY0 = 0x22,
  FpCodeY1 = 0x23,
  FpCodeYn = 0x24,
};

/*  463 */
enum $2250080F1676B41EF0325F39EBACDFD7
{
  SPR_XER = 0x1,
};

/*  464 */
enum _FP__IEEE_ROUNDING_MODE
{
  FpRoundNearest = 0x0,
  FpRoundMinusInfinity = 0x1,
  FpRoundPlusInfinity = 0x2,
  FpRoundChopped = 0x3,
};

/*  465 */
enum $D8ADA0CAD5B40F821CB4CD2B320BCBEE
{
  SPR_LR = 0x8,
};

/*  466 */
enum $FBE03D018AA518154D0196FCC812B948
{
  SPR_CTR = 0x9,
};

/*  467 */
enum $67FDA9B61D417ED7FC0956CCA991A8B2
{
  SPR_DSISR = 0x12,
};

/*  468 */
enum $9115228B236DDC056C5F9F86516FD463
{
  SPR_DAR = 0x13,
};

/*  469 */
enum $EFE32A12905460E51ED9F98E4CF02E45
{
  SPR_DEC = 0x16,
};

/*  470 */
enum $CE7D218045F54E4B78CDF57417AB8B56
{
  SPR_SDR1 = 0x19,
};

/*  471 */
enum $A8F39B8196AB7035AFBAC747F7BDF4D8
{
  SPR_SRR0 = 0x1A,
};

/*  472 */
enum $9FD93310E3A285B448E5D1A4CF625801
{
  SPR_SRR1 = 0x1B,
};

/*  473 */
enum $DB0096C8434ABE4B240D09892DC94170
{
  SPR_ACCR = 0x1D,
};

/*  474 */
enum $621ABCB26B1FD1C5FC259E1B3EFFAE35
{
  SPR_CTRL_R = 0x88,
};

/*  475 */
enum $21939D7AB98615478EAA9EE4087F5179
{
  SPR_CTRL_W = 0x98,
};

/*  476 */
enum $1FEC46B60CC76055692A419F76377DA0
{
  SPR_VRSAVE = 0x100,
};

/*  477 */
enum $12504E5B39C3CBF4F43A6FA408286A0C
{
  SPR_SPRG3_R = 0x103,
};

/*  478 */
enum $5BAC3BC45CFE6350AFF73F447932E9DD
{
  SPR_TB_R = 0x10C,
};

/*  479 */
enum $257D112C598474FA8B42399B001E6D50
{
  SPR_TBU_R = 0x10D,
};

/*  480 */
enum $E00822507C2DF0A5C732B6677BDC78AE
{
  SPR_SPRG0 = 0x110,
};

/*  481 */
enum $45D719078FEEE62F73C6A3EBE8242627
{
  SPR_SPRG1 = 0x111,
};

/*  482 */
enum $BC449284E990DF395D4EBFA01558BBF2
{
  SPR_SPRG2 = 0x112,
};

/*  483 */
enum $39C0F39BA9261E8421C333FD6AEE4EA1
{
  SPR_SPRG3 = 0x113,
};

/*  484 */
enum $5B30484D8264C861B8E9A9223524A677
{
  SPR_TBL_W = 0x11C,
};

/*  485 */
enum $818D03ADE81405E0ED5B78EB98EB51FF
{
  SPR_TBU_W = 0x11D,
};

/*  486 */
enum $49ADB769676577375E08622B6B93801C
{
  SPR_PVR = 0x11F,
};

/*  487 */
enum $EEB78449CF7DAB6F90215BEFADEE9BE2
{
  SPR_HSPRG0 = 0x130,
};

/*  488 */
enum $A35E0418366147AD0CEC4ED4F2040207
{
  SPR_HSPRG1 = 0x131,
};

/*  489 */
enum $C08C16F0D4F7E357E25F96CE6DE2FC2C
{
  SPR_HDEC = 0x136,
};

/*  490 */
enum $16AB627CC2572CA0E4BE8879B2CF5555
{
  SPR_HIOR = 0x137,
};

/*  491 */
enum $BAE19BAE68507C342C0F1D254B79EF5C
{
  SPR_RMOR = 0x138,
};

/*  492 */
enum $E355B4B7EC8C6F55FE97A6DD80FF1C44
{
  SPR_HRMOR = 0x139,
};

/*  493 */
enum $B9C2554585EA85BE716042C979C5AC00
{
  SPR_HSRR0 = 0x13A,
};

/*  494 */
enum $6002BA5F630603092F6A93FE11B31241
{
  SPR_HSRR1 = 0x13B,
};

/*  495 */
enum $8DC78B40D55437B456AE27A8B1CB109F
{
  SPR_LPCR = 0x13E,
};

/*  496 */
enum $8B45B719AA6E728D74C81C367B645A5D
{
  SPR_LPIDR = 0x13F,
};

/*  497 */
enum $69D87F1ABA54E563F461D2DC9AA9CE75
{
  SPR_TSRL = 0x380,
};

/*  498 */
enum _FIRMWARE_REENTRY
{
  HalHaltRoutine = 0x0,
  HalRebootRoutine = 0x1,
  HalKdRebootRoutine = 0x2,
  HalFatalErrorRebootRoutine = 0x3,
  HalResetSMCRoutine = 0x4,
  HalPowerDownRoutine = 0x5,
  HalRebootQuiesceRoutine = 0x6,
  HalMaximumRoutine = 0x7,
};

/*  499 */
enum $49771439FC760A39032E32CB565AE854
{
  SPR_TSRR = 0x381,
};

/*  500 */
enum $FF8DF105CBD7B6D02D0D5171176535B7
{
  SPR_TSCR = 0x399,
};

/*  501 */
enum $192B90CD531E530B62300DC61A74811B
{
  SPR_TTR = 0x39A,
};

/*  502 */
enum $C9CE0E668952415F1062FAA0C2F73862
{
  SPR_TLB_HINT = 0x3B2,
};

/*  503 */
enum $0BB57BB1A5D0C4FE13E2087945D33CEF
{
  SPR_TLB_INDEX = 0x3B3,
};

/*  504 */
enum $8C30028A1CF676892BECFBAA0EC484D4
{
  SPR_TLB_VPN = 0x3B4,
};

/*  505 */
enum $141AEBAF85E2B7B9F8F5571E04F9BC68
{
  SPR_TLB_RPN = 0x3B5,
};

/*  506 */
enum $83ED1248B5FC87E6F4DEDDEDE2284F4C
{
  SPR_TLB_RMT = 0x3B7,
};

/*  507 */
enum $9C31AB3392907EB4506B77AB1FD2B6BC
{
  SPR_DRSR0 = 0x3B8,
};

/*  508 */
enum $0973D36D7CE7B0ADB253351AE61DCFF9
{
  SPR_DRMR0 = 0x3B9,
};

/*  509 */
enum $03AE077DCD44B20F339F74D393E6C6B8
{
  SPR_DCIDR0 = 0x3BA,
};

/*  510 */
enum $ACD4109A20C6650D20BBC35717D0502F
{
  SPR_DRSR1 = 0x3BB,
};

/*  511 */
enum $6E93C358633DB5E524489BCB86F45DAC
{
  SPR_DRMR1 = 0x3BC,
};

/*  512 */
enum $ABCC7BAD0DEF374D2552F0CC077003CC
{
  SPR_DCIDR1 = 0x3BD,
};

/*  513 */
enum $6DA16B0D8039370C43C1CA2D731568F6
{
  SPR_IRSR0 = 0x3D0,
};

/*  514 */
enum $6D04EF4AB5FFC7DC17F5615B3AAF491C
{
  SPR_IRMR0 = 0x3D1,
};

/*  515 */
enum $4C8930EFFE35A0007678F8962D9E298E
{
  SPR_ICIDR0 = 0x3D2,
};

/*  516 */
enum _EVENT_TYPE
{
  NotificationEvent = 0x0,
  SynchronizationEvent = 0x1,
};

/*  517 */
enum $C0F0080D9F1C412D6557CD8DD65AFD43
{
  SPR_IRSR1 = 0x3D3,
};

/*  518 */
enum _TIMER_TYPE
{
  NotificationTimer = 0x0,
  SynchronizationTimer = 0x1,
};

/*  519 */
enum $66817A4EEB8294B633CF8AAF91BF4493
{
  SPR_IRMR1 = 0x3D4,
};

/*  520 */
enum $923E9E4F30AC6BBB491FC35623C667E6
{
  SPR_ICIDR1 = 0x3D5,
};

/*  521 */
enum _WAIT_TYPE
{
  WaitAll = 0x0,
  WaitAny = 0x1,
};

/*  522 */
enum $7DEF063A5C7BBA19B7AB73DF9ADC5A23
{
  SPR_HID0 = 0x3F0,
};

/*  523 */
enum $AF2874CF6ABA05C269146AD4EAA078E8
{
  SPR_HID1 = 0x3F1,
};

/*  524 */
enum $B01A1B45A37AF41D962A4F43D45F1CDE
{
  SPR_IABR = 0x3F2,
};

/*  525 */
enum _MODE
{
  KernelMode = 0x0,
  UserMode = 0x1,
  MaximumMode = 0x2,
};

/*  526 */
enum $D12683B3E789AA1FFEB419004ED75446
{
  SPR_HID4 = 0x3F4,
};

/*  527 */
enum $5209ED92B028466E24FC570AE4C7C562
{
  SPR_DABR = 0x3F5,
};

/*  528 */
enum $C785793662972D2EF2889DD7A3E3441C
{
  SPR_HID5 = 0x3F6,
};

/*  529 */
enum $206F9E68231DC93408EED9B5BE0359A8
{
  SPR_DABRX = 0x3F7,
};

/*  530 */
enum $1DC4E02B41F8D20D69CB6D56C64683EB
{
  SPR_TDABRX = 0x3F8,
};

/*  531 */
enum $95C58BE019F0D6FC9167FE5550E05DD0
{
  SPR_HID6 = 0x3F9,
};

/*  532 */
enum $432D5DA3F963AC5BD0C542CBB1C35934
{
  SPR_HID7 = 0x3FA,
};

/*  533 */
enum $8AB39F97F28A10334AB70C4D33832CE4
{
  SPR_TIABR = 0x3FB,
};

/*  534 */
enum _MM_KERNEL_STACK_TYPE
{
  MmDefaultStackType = 0x0,
  MmTitleStackType = 0x1,
  MmSystemStackType = 0x2,
};

/*  535 */
enum $56A2E54E331E53E0C307F32224811220
{
  SPR_BKMK = 0x3FC,
};

/*  536 */
enum $4CBCA779875BB55C270F67096FDE71D3
{
  SPR_TDABR = 0x3FD,
};

/*  537 */
enum $60DF8D500D6560BED15895853EC24C99
{
  SPR_PIR = 0x3FF,
};

/*  538 */
enum XONLINE_CONTENT_ENUMERATE_FLAGS
{
  XONLINE_CONTENT_ENUMERATE_USER_PLAYED_GAME_FILTER = 0x1,
  XONLINE_CONTENT_ENUMERATE_USER_HAS_PURCHASED_FILTER = 0x2,
  XONLINE_CONTENT_ENUMERATE_NEW_CONTENT_ONLY_FILTER = 0x4,
};

/*  539 */
enum XONLINE_BASIC_CONTENT_INFO_FLAGS
{
  XONLINE_BASIC_CONTENT_INFO_USER_HAS_PURCHASED = 0x1,
  XONLINE_BASIC_CONTENT_INFO_USER_HAS_VIEWED = 0x2,
  XONLINE_BASIC_CONTENT_INFO_IS_UNRESTRICTED = 0x4,
};

/*  540 */
enum XONLINE_SUBSCRIPTION_ENUMERATE_FLAGS
{
  XONLINE_SUBSCRIPTION_QUERY_FOR_NEW = 0x1,
  XONLINE_SUBSCRIPTION_QUERY_FOR_RENEWALS = 0x2,
  XONLINE_SUBSCRIPTION_QUERY_FOR_CURRENT = 0x4,
  XONLINE_SUBSCRIPTION_QUERY_FOR_EXPIRED = 0x8,
};

/*  541 */
enum XONLINE_BASIC_SUBSCRIPTION_INFO_FLAGS
{
  XONLINE_BASIC_CONTENT_INFO_USER_IS_SUBSCRIBED = 0x1,
};

/*  542 */
enum XONLINE_SUBSCRIPTION_CONVERT_MODE
{
  XONLINE_SUBSCRIPTION_CONVERT_MODE_CONVERT = 0x0,
  XONLINE_SUBSCRIPTION_CONVERT_MODE_RENEW = 0x1,
  XONLINE_SUBSCRIPTION_CONVERT_MODE_INVALID = 0x2,
};

/*  543 */
enum XONLINE_TITLE_ENUMERATE_FLAGS
{
  XONLINE_TITLE_QUERY_FOR_NEW = 0x1,
  XONLINE_TITLE_QUERY_FOR_PLAYED = 0x2,
};

/*  544 */
enum XONLINE_VIDEO_TYPE
{
  XONLINE_VIDEO_TYPE_MOVIE = 0x1,
  XONLINE_VIDEO_TYPE_TVSHOW = 0x2,
  XONLINE_VIDEO_TYPE_MUSICVIDEO = 0x4,
  XONLINE_VIDEO_TYPE_VIRALCLIP = 0x20,
  XONLINE_VIDEO_TYPE_TVEPISODE = 0x40,
};

/*  545 */
enum DEVICESTATE
{
  DEVICESTATE_NONE = 0x0,
  DEVICESTATE_ADD = 0x1,
  DEVICESTATE_REMOVE = 0x2,
  DEVICESTATE_IDLE = 0x3,
  DEVICESTATE_UNFORMATTED = 0x4,
  DEVICESTATE_IGNORE = 0x5,
  DEVICESTATE_FORCE_DWORD = 0xFFFFFFFF,
};

/*  546 */
enum XONLINE_VIDEO_QUALITY
{
  XONLINE_VIDEO_QUALITY_HD = 0x1,
  XONLINE_VIDEO_QUALITY_SD = 0x2,
};

/*  547 */
enum XONLINE_CONTENT_HISTORY_ENUMERATE_FLAGS
{
  XONLINE_CHE_FLAG_CONTENT_IS_ACQUIRABLE_FILTER = 0x1,
};

/*  548 */
enum XONLINE_CONTENT_HISTORY_INFO_FLAGS
{
  XONLINE_CONTENT_HISTORY_FLAG_IS_ACQUIRABLE = 0x1,
  XONLINE_CONTENT_HISTORY_FLAG_IS_UNRESTRICTED = 0x2,
};

/*  549 */
enum XCODEC_TYPE
{
  XCODEC_TYPE_AAC = 0x0,
  XCODEC_TYPE_COUNT = 0x1,
};

/*  550 */
enum _XAM_BOOT_REASON
{
  XAM_BOOT_SYSTEM_START = 0x0,
  XAM_BOOT_LAUNCH_MEDIA = 0x1,
  XAM_BOOT_LAUNCH_NEW_IMAGE = 0x2,
  XAM_BOOT_USER_REQUEST = 0x3,
  XAM_BOOT_DEBUG_REQUEST = 0x4,
  XAM_BOOT_RECOVERY = 0x5,
  XAM_BOOT_MFG_LOADER = 0x6,
  XAM_BOOT_DUMP = 0x7,
  XAM_BOOT_LAUNCH_DASHBOARD = 0x8,
  XAM_BOOT_LAUNCH_ANY_DASHBOARD = 0x9,
};

/*  551 */
enum XMSG_INVITE_ANSWER_TYPE
{
  XMSG_INVITE_ANSWER_NO = 0x0,
  XMSG_INVITE_ANSWER_YES = 0x1,
  XMSG_INVITE_ANSWER_NEVER = 0x2,
  XMSG_INVITE_ANSWER_INVALID = 0x3,
};

/*  552 */
enum HUDSCENE
{
  HUDSCENE_MAIN = 0x0,
  HUDSCENE_PERSONALIZATION = 0x1,
  HUDSCENE_MESSAGEBOX = 0x2,
  HUDSCENE_LIVEUPSELL = 0x3,
  HUDSCENE_VOICESETTINGS = 0x4,
  HUDSCENE_COUNT = 0x5,
};

/*  553 */
enum XTILETYPE
{
  XTILETYPE_ACHIEVEMENT = 0x0,
  XTILETYPE_GAME_ICON = 0x1,
  XTILETYPE_GAMER_TILE = 0x2,
  XTILETYPE_GAMER_TILE_SMALL = 0x3,
  XTILETYPE_LOCAL_GAMER_TILE = 0x4,
  XTILETYPE_LOCAL_GAMER_TILE_SMALL = 0x5,
  XTILETYPE_BKGND = 0x6,
  XTILETYPE_AWARDED_GAMER_TILE = 0x7,
  XTILETYPE_AWARDED_GAMER_TILE_SMALL = 0x8,
  XTILETYPE_GAMER_TILE_BY_IMAGE_ID = 0x9,
  XTILETYPE_PERSONAL_GAMER_TILE = 0xA,
  XTILETYPE_PERSONAL_GAMER_TILE_SMALL = 0xB,
  XTILETYPE_GAMER_TILE_BY_KEY = 0xC,
};

/*  554 */
enum _XEKEY_INDEX
{
  XEKEY_MANUFACTURING_MODE = 0x0,
  XEKEY_ALTERNATE_KEY_VAULT = 0x1,
  XEKEY_RESERVED_BYTE2 = 0x2,
  XEKEY_RESERVED_BYTE3 = 0x3,
  XEKEY_RESERVED_WORD1 = 0x4,
  XEKEY_RESERVED_WORD2 = 0x5,
  XEKEY_RESERVED_DWORD1 = 0x6,
  XEKEY_RESERVED_DWORD2 = 0x7,
  XEKEY_RESERVED_DWORD3 = 0x8,
  XEKEY_RESERVED_DWORD4 = 0x9,
  XEKEY_RESERVED_QWORD1 = 0xA,
  XEKEY_RESERVED_QWORD2 = 0xB,
  XEKEY_RESERVED_QWORD3 = 0xC,
  XEKEY_RESERVED_QWORD4 = 0xD,
  XEKEY_RESERVED_KEY1 = 0xE,
  XEKEY_RESERVED_KEY2 = 0xF,
  XEKEY_RESERVED_KEY3 = 0x10,
  XEKEY_RESERVED_KEY4 = 0x11,
  XEKEY_RESERVED_RANDOM_KEY1 = 0x12,
  XEKEY_RESERVED_RANDOM_KEY2 = 0x13,
  XEKEY_CONSOLE_SERIAL_NUMBER = 0x14,
  XEKEY_MOBO_SERIAL_NUMBER = 0x15,
  XEKEY_GAME_REGION = 0x16,
  XEKEY_CONSOLE_OBFUSCATION_KEY = 0x17,
  XEKEY_KEY_OBFUSCATION_KEY = 0x18,
  XEKEY_ROAMABLE_OBFUSCATION_KEY = 0x19,
  XEKEY_DVD_KEY = 0x1A,
  XEKEY_PRIMARY_ACTIVATION_KEY = 0x1B,
  XEKEY_SECONDARY_ACTIVATION_KEY = 0x1C,
  XEKEY_GLOBAL_DEVICE_2DES_KEY1 = 0x1D,
  XEKEY_GLOBAL_DEVICE_2DES_KEY2 = 0x1E,
  XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY1 = 0x1F,
  XEKEY_WIRELESS_CONTROLLER_MS_2DES_KEY2 = 0x20,
  XEKEY_WIRED_WEBCAM_MS_2DES_KEY1 = 0x21,
  XEKEY_WIRED_WEBCAM_MS_2DES_KEY2 = 0x22,
  XEKEY_WIRED_CONTROLLER_MS_2DES_KEY1 = 0x23,
  XEKEY_WIRED_CONTROLLER_MS_2DES_KEY2 = 0x24,
  XEKEY_MEMORY_UNIT_MS_2DES_KEY1 = 0x25,
  XEKEY_MEMORY_UNIT_MS_2DES_KEY2 = 0x26,
  XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY1 = 0x27,
  XEKEY_OTHER_XSM3_DEVICE_MS_2DES_KEY2 = 0x28,
  XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY1 = 0x29,
  XEKEY_WIRELESS_CONTROLLER_3P_2DES_KEY2 = 0x2A,
  XEKEY_WIRED_WEBCAM_3P_2DES_KEY1 = 0x2B,
  XEKEY_WIRED_WEBCAM_3P_2DES_KEY2 = 0x2C,
  XEKEY_WIRED_CONTROLLER_3P_2DES_KEY1 = 0x2D,
  XEKEY_WIRED_CONTROLLER_3P_2DES_KEY2 = 0x2E,
  XEKEY_MEMORY_UNIT_3P_2DES_KEY1 = 0x2F,
  XEKEY_MEMORY_UNIT_3P_2DES_KEY2 = 0x30,
  XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY1 = 0x31,
  XEKEY_OTHER_XSM3_DEVICE_3P_2DES_KEY2 = 0x32,
  XEKEY_CONSOLE_PRIVATE_KEY = 0x33,
  XEKEY_XEIKA_PRIVATE_KEY = 0x34,
  XEKEY_CARDEA_PRIVATE_KEY = 0x35,
  XEKEY_CONSOLE_CERTIFICATE = 0x36,
  XEKEY_XEIKA_CERTIFICATE = 0x37,
  XEKEY_CARDEA_CERTIFICATE = 0x38,
  XEKEY_MAX_KEY_INDEX = 0x39,
  XEKEY_CONSTANT_PIRS_KEY = 0x39,
  XEKEY_CONSTANT_ALT_MASTER_KEY = 0x3A,
  XEKEY_CONSTANT_ALT_LIVE_KEY = 0x3B,
  XEKEY_CONSTANT_MASTER_KEY = 0x3C,
  XEKEY_CONSTANT_LIVE_KEY = 0x3D,
  XEKEY_CONSTANT_XB1_GREEN_KEY = 0x3E,
  XEKEY_CONSTANT_SATA_DISK_SECURITY_KEY = 0x3F,
  XEKEY_CONSTANT_DEVICE_REVOCATION_KEY = 0x40,
  XEKEY_CONSTANT_XMACS_KEY = 0x41,
  XEKEY_CONSTANT_REVOCATION_LIST_NONCE = 0x42,
  XEKEY_CONSTANT_CROSS_PLATFORM_SYSLINK_KEY = 0x43,
};

/*  555 */
enum _TRACK_MODE_TYPE
{
  YellowMode2 = 0x0,
  XAForm2 = 0x1,
  CDDA = 0x2,
};

/*  556 */
enum _XEKEYEX_INDEX
{
  XEKEYEX_START = 0xFF,
  XEKEYEX_VIDEO_DEVICE_PUBLIC_KEY = 0x100,
  XEKEYEX_VIDEO_DEVICE_PRIVATE_KEY = 0x101,
  XEKEYEX_VIDEO_DEVICE_CERTIFICATE = 0x102,
  XEKEYEX_MAX_KEY_INDEX = 0x103,
};

/*  557 */
enum _XE_RSA_KEY_TYPE
{
  XE_PIRS_RSA_KEY = 0x0,
  XE_LIVEDRM_RSA_KEY = 0x1,
  XE_MAX_RSA_KEY = 0x2,
};

/*  558 */
enum _XAMPOWERMODE
{
  XAMPOWERMODE_QUIET = 0x0,
  XAMPOWERMODE_FULL = 0x1,
};

/*  559 */
enum _XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE
{
  XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE_ONLINE = 0x0,
  XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE_AWAY = 0x1,
  XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE_BUSY = 0x2,
  XPROFILE_GAMER_PRESENCE_USER_STATE_VALUE_APPEAROFFLINE = 0x3,
};

/*  560 */
enum _XGI_STATS_ENUMERATOR_TYPE
{
  XGI_STATS_ENUM_BY_XUID = 0x0,
  XGI_STATS_ENUM_BY_RANK = 0x1,
  XGI_STATS_ENUM_BY_RANK_PER_SPEC = 0x2,
  XGI_STATS_ENUM_BY_RATING = 0x3,
};

/*  561 */
enum _XNET_LOGON_NAT_TYPE
{
  XNET_LOGON_NAT_TYPE_OPEN = 0x1,
  XNET_LOGON_NAT_TYPE_MODERATE = 0x2,
  XNET_LOGON_NAT_TYPE_STRICT = 0x3,
};

/*  562 */
enum DM_FILEEVENT_API
{
  Dm_FileEvent_NtCreateFile = 0x0,
  Dm_FileEvent_NtOpenFile = 0x1,
  Dm_FileEvent_NtDeleteFile = 0x2,
  Dm_FileEvent_NtReadFile = 0x3,
  Dm_FileEvent_NtWriteFile = 0x4,
  Dm_FileEvent_NtReadFileScatter = 0x5,
  Dm_FileEvent_NtWriteFileGather = 0x6,
  Dm_FileEvent_NtFlushBuffersFile = 0x7,
  Dm_FileEvent_NtClose = 0x8,
  Dm_FileEvent_FscSetCacheElementCount = 0x9,
};

/*  563 */
enum _XNET_LOGON_DNS_TYPE
{
  XNET_LOGON_DNS_MACS = 0x0,
  XNET_LOGON_DNS_AS = 0x1,
  XNET_LOGON_DNS_TGS = 0x2,
  XNET_LOGON_DNS_XDS = 0x3,
  XNET_LOGON_DNS_MAINTENANCE = 0x4,
  NUM_XNET_LOGON_DNS_TYPES = 0x5,
};

/*  564 */
enum _XONLINECONTENT_RESUME_STATE
{
  XONLINECONTENT_RESUME_STATE_FILE_HEADERS_NOT_READY = 0x46494C48,
  XONLINECONTENT_RESUME_STATE_NEW_FOLDER = 0x666F6C64,
  XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_2 = 0x666F6C32,
  XONLINECONTENT_RESUME_STATE_NEW_FOLDER_RESUME_ATTEMPT_3 = 0x666F6C33,
  XONLINECONTENT_RESUME_STATE_LEGACY_NEW_FOLDER = 0x464F4C44,
  XONLINECONTENT_RESUME_STATE_LEGACY_NEW_FOLDER_ATTEMPT_2 = 0x464F4C32,
  XONLINECONTENT_RESUME_STATE_LEGACY_NEW_FOLDER_ATTEMPT_3 = 0x464F4C33,
};

/*  565 */
enum _XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINTS
{
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_ADDPOINTS = 0x4,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_PREPAIDCODE = 0x5,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_FNC = 0x6,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_GAMERTAGPURCHASE = 0x7,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_SIGNUP_CREDITCARD = 0x8,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_SIGNUP_PARENTCREDITCARD = 0x9,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_VIEWQUEUE = 0xA,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_VIEWDOWNLOADDETAILS = 0xB,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_MEDIAITEM = 0xC,
  XSHOWMARKETPLACEUI_PRIVATE_ENTRYPOINT_MAX = 0xD,
};

/*  566 */
enum _XCONTENT_SIGNATURE_TYPE
{
  CONSOLE_SIGNED = 0x434F4E20,
  LIVE_SIGNED = 0x4C495645,
  PIRS_SIGNED = 0x50495253,
};

/*  567 */
enum $343BE72B814626B4AAEF81848D7E20CF
{
  FLAG_BIT_SSB_FAILED_AP25_CHALLENGE = 0x0,
  FLAG_BIT_SSB_TAMPERED_AP25_TABLE = 0x1,
  FLAG_BIT_SSB_INVALID_DVD_GEOMETRY = 0x2,
  FLAG_BIT_SSB_INVALID_DVD_DMI = 0x3,
  FLAG_BIT_SSB_MAXIMUM = 0x4,
  FLAG_SSB_FAILED_AP25_CHALLENGE = 0x1,
  FLAG_SSB_TAMPERED_AP25_TABLE = 0x2,
  FLAG_SSB_INVALID_DVD_GEOMETRY = 0x4,
  FLAG_SSB_INVALID_DVD_DMI = 0x8,
};

/*  568 */
enum XONLINE_TEAM_LIVE_PERMISSIONS
{
  XONLINE_TEAM_DELETE = 0x1,
  XONLINE_TEAM_MODIFY_DATA = 0x2,
  XONLINE_TEAM_MODIFY_MEMBER_PERMISSIONS = 0x4,
  XONLINE_TEAM_DELETE_MEMBER = 0x8,
  XONLINE_TEAM_RECRUIT_MEMBERS = 0x10,
  XONLINE_TEAM_LIVE_PERMISSIONS_ALL = 0xFFFFFFFF,
};

/*  569 */
enum $8F8B05E2E85BE9553895E4AF16DA86B9
{
  FLAG_BIT_SV_PROTECTED_NO_EJECT_REBOOT = 0x0,
  FLAG_BIT_SV_PROTECTED_ODD_AUTHENTICATED = 0x1,
  FLAG_BIT_SV_PROTECTED_DISC_AUTHENTICATED = 0x2,
  FLAG_BIT_SV_PROTECTED_ODD_IS_AP25_CAPABLE = 0x3,
  FLAG_BIT_SV_PROTECTED_MAXIMUM = 0x4,
};

/*  570 */
enum _XCONFIG_CATEGORY_TYPES
{
  XCONFIG_STATIC_CATEGORY = 0x0,
  XCONFIG_STATISTIC_CATEGORY = 0x1,
  XCONFIG_SECURED_CATEGORY = 0x2,
  XCONFIG_USER_CATEGORY = 0x3,
  XCONFIG_XNET_MACHINE_ACCOUNT_CATEGORY = 0x4,
  XCONFIG_XNET_PARAMETERS_CATEGORY = 0x5,
  XCONFIG_MEDIA_CENTER_CATEGORY = 0x6,
  XCONFIG_CONSOLE_CATEGORY = 0x7,
  XCONFIG_DVD_CATEGORY = 0x8,
  XCONFIG_CATEGORY_MAX = 0x9,
};

/*  571 */
enum _INSTALLER_METADATA_TYPE
{
  INSTALLER_METADATA_TYPE_SYSTEM_UPDATE = 0x53555044,
  INSTALLER_METADATA_TYPE_TITLE_UPDATE = 0x54555044,
  INSTALLER_METADATA_TYPE_PROGRESS_CACHE_SYSTEM_UPDATE = 0x50245355,
  INSTALLER_METADATA_TYPE_PROGRESS_CACHE_TITLE_UPDATE = 0x50245455,
  INSTALLER_METADATA_TYPE_PROGRESS_CACHE_TITLE_CONTENT = 0x50245443,
};

/*  572 */
enum _XAM_CACHE_FILE_TYPE
{
  XAM_CACHE_ALL = 0x0,
  XAM_CACHE_GAME_TILE = 0x1,
  XAM_CACHE_ACHIEVEMENT_TILE = 0x2,
  XAM_CACHE_GAMER_TILE = 0x3,
  XAM_CACHE_GAMER_TILE_SMALL = 0x4,
  XAM_CACHE_CUSTOM_GAMER_TILE = 0x5,
  XAM_CACHE_CUSTOM_GAMER_TILE_SMALL = 0x6,
  XAM_CACHE_FRIEND_MUTE_LIST = 0x7,
  XAM_CACHE_TICKETS = 0x8,
  XAM_CACHE_TITLE_NAMES = 0x9,
  XAM_CACHE_RECENT_PLAYERS = 0xA,
  XAM_CACHE_TITLE_UPDATE = 0xB,
  XAM_CACHE_SYSTEM_UPDATE = 0xC,
  XAM_CACHE_DASHBOARD_APP = 0xD,
  XAM_CACHE_SPA_FILE = 0xE,
  XAM_CACHE_GAME_INVITE = 0xF,
  XAM_CACHE_GAMER_TAG = 0x10,
};

/*  573 */
enum MATCH_OP
{
  MATCH_OP_CREATE = 0x0,
  MATCH_OP_SEARCH = 0x1,
  MATCH_OP_INVALID = 0x2,
  MATCH_OP_SPLIT = 0x3,
};

/*  574 */
enum _XCONFIG_STATIC_ENTRIES
{
  XCONFIG_STATIC_DATA = 0x0,
  XCONFIG_STATIC_FIRST_POWER_ON_DATE = 0x1,
  XCONFIG_STATIC_SMC_CONFIG = 0x2,
};

/*  575 */
enum _XCONFIG_SECURED_ENTRIES
{
  XCONFIG_SECURED_DATA = 0x0,
  XCONFIG_SECURED_MAC_ADDRESS = 0x1,
  XCONFIG_SECURED_AV_REGION = 0x2,
  XCONFIG_SECURED_GAME_REGION = 0x3,
  XCONFIG_SECURED_DVD_REGION = 0x4,
  XCONFIG_SECURED_RESET_KEY = 0x5,
  XCONFIG_SECURED_SYSTEM_FLAGS = 0x6,
  XCONFIG_SECURED_POWER_MODE = 0x7,
  XCONFIG_SECURED_ONLINE_NETWORK_ID = 0x8,
};

/*  576 */
enum P_MSG_TYPES
{
  PMSG_MIN_REQ_TYPE = 0x3E8,
  PMSG_HELLO = 0x3E8,
  PMSG_ALIVE = 0x3E9,
  PMSG_SYNC = 0x3EA,
  PMSG_REFRESH = 0x3EB,
  PMSG_ADD = 0x3EC,
  PMSG_DELETE = 0x3ED,
  PMSG_ACCEPT = 0x3EE,
  PMSG_REJECT = 0x3EF,
  PMSG_BLOCK = 0x3F0,
  PMSG_UNBLOCK = 0x3F1,
  PMSG_INVITE = 0x3F2,
  PMSG_CANCEL = 0x3F3,
  PMSG_INVITE_ANSWER = 0x3F4,
  PMSG_NICKNAME = 0x3F5,
  PMSG_STATE = 0x3F6,
  PMSG_DEAD_XBOX = 0x3F7,
  PMSG_DEAD_SG = 0x3F8,
  PMSG_ANNOUNCE = 0x3F9,
  PMSG_SUBSCRIBED = 0x3FA,
  PMSG_UNSUBSCRIBE = 0x3FB,
  PMSG_ADDED = 0x3FC,
  PMSG_ACCEPTED = 0x3FD,
  PMSG_REMOVED = 0x3FE,
  PMSG_KICK = 0x3FF,
  PMSG_DEAD_USER = 0x400,
  PMSG_ALIVE_2 = 0x401,
  PMSG_WEB_FRIENDS = 0x402,
  PMSG_WEB_ALIVE = 0x403,
  PMSG_WEB_ANNOUNCE = 0x404,
  PMSG_WEB_SUBSCRIBED = 0x405,
  PMSG_WEB_UNSUBSCRIBE = 0x406,
  PMSG_PEER_SESSION = 0x407,
  PMSG_TEAM_LIST_TEAMS = 0x408,
  PMSG_TEAM_LIST_MEMBERS = 0x409,
  PMSG_TEAM_CREATE = 0x40A,
  PMSG_TEAM_DELETE = 0x40B,
  PMSG_TEAM_REMOVE = 0x40C,
  PMSG_TEAM_MANAGE_TEAM = 0x40D,
  PMSG_TEAM_MANAGE_MEMBER = 0x40E,
  PMSG_TEAM_RECRUIT = 0x40F,
  PMSG_TEAM_JOIN = 0x410,
  PMSG_TEAM_GET_TICKET = 0x411,
  PMSG_PEER_SUBSCRIBE = 0x412,
  PMSG_PEER_UNSUBSCRIBE = 0x413,
  PMSG_WATCH_START = 0x414,
  PMSG_WATCH_STOP = 0x415,
  PMSG_ADD_2 = 0x416,
  PMSG_INVITE_2 = 0x417,
  PMSG_ALIVE_INTERNAL = 0x418,
  PMSG_STATE_2 = 0x419,
  PMSG_GET_STATE = 0x41A,
  PMSG_TEAM_CREATE_XE = 0x41B,
  PMSG_TEAM_MANAGE_TEAM_XE = 0x41C,
  PMSG_ADD_AFFILIATES = 0x41D,
  PMSG_IS_AFFILIATE = 0x41E,
  PMSG_QUERY_AFFILIATES = 0x41F,
  PMSG_GET_PRESENCE_INFO = 0x420,
  PMSG_PRESENCE_INFO_REPLY = 0x421,
  PMSG_INVALIDATE_USER = 0x422,
  PMSG_FIND_USER = 0x423,
  PMSG_CHECK_TITLE_MESSAGES = 0x424,
  PMSG_TEAM_LIST_USER_TEAMS = 0x425,
  PMSG_USER_PRE_MIGRATION = 0x426,
  PMSG_USER_FULL_MIGRATION = 0x427,
  PMSG_LOGON_CHECK = 0x428,
  PMSG_FIND_USERS = 0x429,
  PMSG_MAX_REQ_TYPE = 0x429,
  PMSG_MIN_REPLY_TYPE = 0x44D,
  PMSG_ALIVE_REPLY = 0x44D,
  PMSG_SYNC_REPLY = 0x44E,
  PMSG_WEB_FRIENDS_REPLY = 0x44F,
  PMSG_WEB_ALIVE_REPLY = 0x450,
  PMSG_PEER_SESSION_REPLY = 0x451,
  PMSG_INVITE_REPLY = 0x452,
  PMSG_TEAM_LIST_TEAMS_REPLY = 0x453,
  PMSG_TEAM_LIST_MEMBERS_REPLY = 0x454,
  PMSG_TEAM_CREATE_REPLY = 0x455,
  PMSG_TEAM_DELETE_REPLY = 0x456,
  PMSG_TEAM_REMOVE_REPLY = 0x457,
  PMSG_TEAM_MANAGE_TEAM_REPLY = 0x458,
  PMSG_TEAM_MANAGE_MEMBER_REPLY = 0x459,
  PMSG_TEAM_RECRUIT_REPLY = 0x45A,
  PMSG_TEAM_JOIN_REPLY = 0x45B,
  PMSG_TEAM_GET_TICKET_REPLY = 0x45C,
  PMSG_PEER_SUBSCRIBE_REPLY = 0x45D,
  PMSG_PEER_UNSUBSCRIBE_REPLY = 0x45E,
  PMSG_GET_STATE_REPLY = 0x45F,
  PMSG_IS_AFFILIATE_REPLY = 0x460,
  PMSG_QUERY_AFFILIATES_REPLY = 0x461,
  PMSG_FIND_USER_REPLY = 0x462,
  PMSG_CHECK_TITLE_MESSAGES_REPLY = 0x463,
  PMSG_TEAM_LIST_USER_TEAMS_REPLY = 0x464,
  PMSG_LOGON_CHECK_REPLY = 0x465,
  PMSG_FIND_USERS_REPLY = 0x466,
  PMSG_MAX_REPLY_TYPE = 0x466,
};

/*  577 */
enum _XCONFIG_USER_ENTRIES
{
  XCONFIG_USER_DATA = 0x0,
  XCONFIG_USER_TIME_ZONE_BIAS = 0x1,
  XCONFIG_USER_TIME_ZONE_STD_NAME = 0x2,
  XCONFIG_USER_TIME_ZONE_DLT_NAME = 0x3,
  XCONFIG_USER_TIME_ZONE_STD_DATE = 0x4,
  XCONFIG_USER_TIME_ZONE_DLT_DATE = 0x5,
  XCONFIG_USER_TIME_ZONE_STD_BIAS = 0x6,
  XCONFIG_USER_TIME_ZONE_DLT_BIAS = 0x7,
  XCONFIG_USER_DEFAULT_PROFILE = 0x8,
  XCONFIG_USER_LANGUAGE = 0x9,
  XCONFIG_USER_VIDEO_FLAGS = 0xA,
  XCONFIG_USER_AUDIO_FLAGS = 0xB,
  XCONFIG_USER_RETAIL_FLAGS = 0xC,
  XCONFIG_USER_DEVKIT_FLAGS = 0xD,
  XCONFIG_USER_COUNTRY = 0xE,
  XCONFIG_USER_PC_FLAGS = 0xF,
  XCONFIG_USER_SMB_CONFIG = 0x10,
  XCONFIG_USER_LIVE_PUID = 0x11,
  XCONFIG_USER_LIVE_CREDENTIALS = 0x12,
  XCONFIG_USER_AV_COMPOSITE_SCREENSZ = 0x13,
  XCONFIG_USER_AV_COMPONENT_SCREENSZ = 0x14,
  XCONFIG_USER_AV_VGA_SCREENSZ = 0x15,
  XCONFIG_USER_PC_GAME = 0x16,
  XCONFIG_USER_PC_PASSWORD = 0x17,
  XCONFIG_USER_PC_MOVIE = 0x18,
  XCONFIG_USER_PC_GAME_RATING = 0x19,
  XCONFIG_USER_PC_MOVIE_RATING = 0x1A,
  XCONFIG_USER_PC_HINT = 0x1B,
  XCONFIG_USER_PC_HINT_ANSWER = 0x1C,
  XCONFIG_USER_PC_OVERRIDE = 0x1D,
  XCONFIG_USER_MUSIC_PLAYBACK_MODE = 0x1E,
  XCONFIG_USER_MUSIC_VOLUME = 0x1F,
  XCONFIG_USER_MUSIC_FLAGS = 0x20,
  XCONFIG_USER_ARCADE_FLAGS = 0x21,
  XCONFIG_USER_PC_VERSION = 0x22,
  XCONFIG_USER_PC_TV = 0x23,
  XCONFIG_USER_PC_TV_RATING = 0x24,
  XCONFIG_USER_PC_EXPLICIT_VIDEO = 0x25,
  XCONFIG_USER_PC_EXPLICIT_VIDEO_RATING = 0x26,
  XCONFIG_USER_PC_UNRATED_VIDEO = 0x27,
  XCONFIG_USER_PC_UNRATED_VIDEO_RATING = 0x28,
};

/*  578 */
enum XAM_DEFAULT_IMAGE_ID
{
  XAM_DEFAULT_IMAGE_SYSTEM = 0x0,
  XAM_DEFAULT_IMAGE_DASHICON = 0x1,
  XAM_DEFAULT_IMAGE_ID_COUNT = 0x2,
};

/*  579 */
enum _XCONFIG_CONSOLE_ENTRIES
{
  XCONFIG_CONSOLE_DATA = 0x0,
  XCONFIG_CONSOLE_SCREEN_SAVER = 0x1,
  XCONFIG_CONSOLE_AUTO_SHUT_OFF = 0x2,
  XCONFIG_CONSOLE_WIRELESS_SETTINGS = 0x3,
  XCONFIG_CONSOLE_CAMERA_SETTINGS = 0x4,
};

/*  580 */
enum XAMDATEFORMAT
{
  XAMDATEFORMAT_dMyyyy = 0x0,
  XAMDATEFORMAT_dMMyyyy = 0x1,
  XAMDATEFORMAT_ddMMyyyy = 0x2,
  XAMDATEFORMAT_Mdyyyy = 0x3,
  XAMDATEFORMAT_yyyyMd = 0x4,
  XAMDATEFORMAT_yyyyMMdd = 0x5,
  XAMDATEFORMAT_MMyy = 0x6,
};

/*  581 */
enum _XCONFIG_MEDIA_CENTER_ENTRIES
{
  XCONFIG_MEDIA_CENTER_DATA = 0x0,
  XCONFIG_MEDIA_CENTER_MEDIA_PLAYER = 0x1,
  XCONFIG_MEDIA_CENTER_XESLED_VERSION = 0x2,
  XCONFIG_MEDIA_CENTER_XESLED_TRUST_SECRET = 0x3,
  XCONFIG_MEDIA_CENTER_XESLED_TRUST_CODE = 0x4,
  XCONFIG_MEDIA_CENTER_XESLED_HOST_ID = 0x5,
  XCONFIG_MEDIA_CENTER_XESLED_KEY = 0x6,
  XCONFIG_MEDIA_CENTER_XESLED_HOST_MAC_ADDRESS = 0x7,
  XCONFIG_MEDIA_CENTER_SERVER_UUID = 0x8,
  XCONFIG_MEDIA_CENTER_SERVER_NAME = 0x9,
  XCONFIG_MEDIA_CENTER_SERVER_FLAG = 0xA,
};

/*  582 */
enum P_INVITE_REPLIES
{
  PINVITE_REPLY_NO = 0x0,
  PINVITE_REPLY_YES = 0x1,
  PINVITE_REPLY_NEVER = 0x2,
};

/*  583 */
enum Q_MSG_TYPES
{
  QMSG_MIN_REQ_TYPE = 0x0,
  QMSG_HELLO = 0x0,
  QMSG_USER_INFO = 0x1,
  QMSG_ADD = 0x2,
  QMSG_DELETE = 0x3,
  QMSG_DELETE_MATCHES = 0x4,
  QMSG_DEAD_XBOX = 0x5,
  QMSG_DEAD_SG = 0x6,
  QMSG_LIST = 0x7,
  QMSG_DEQUEUE = 0x8,
  QMSG_DEAD_USER = 0x9,
  QMSG_WEB_USER_INFO = 0xA,
  QMSG_WEB_PRESENCE = 0xB,
  QMSG_WEB_LIST = 0xC,
  QMSG_ENUM_MESSAGES = 0xD,
  QMSG_MESSAGE_SUMMARY = 0xE,
  QMSG_MESSAGE_DETAILS = 0xF,
  QMSG_DELETE_MESSAGE = 0x10,
  QMSG_SEND_MESSAGE = 0x11,
  QMSG_REVOKE_MESSAGE = 0x12,
  QMSG_DELETE_TITLE = 0x13,
  QMSG_ENUM_TITLES = 0x14,
  QMSG_MESSAGE_FLAGS = 0x15,
  QMSG_ENUM_SYSTEM_MESSAGES = 0x16,
  QMSG_SYSTEM_MESSAGE_DETAILS = 0x17,
  QMSG_DELETE_SYSTEM_MESSAGE = 0x18,
  QMSG_SEND_SYSTEM_MESSAGE = 0x19,
  QMSG_REVOKE_MESSAGE_EX = 0x1A,
  QMSG_ENUM_MESSAGES_2 = 0x1B,
  QMSG_MESSAGE_SUMMARY_2 = 0x1C,
  QMSG_MAX_REQ_TYPE = 0x1C,
  QMSG_MIN_REPLY_TYPE = 0x64,
  QMSG_LIST_REPLY = 0x64,
  QMSG_WEB_LIST_REPLY = 0x65,
  QMSG_ENUM_MESSAGES_REPLY = 0x66,
  QMSG_MESSAGE_SUMMARY_REPLY = 0x67,
  QMSG_MESSAGE_DETAILS_REPLY = 0x68,
  QMSG_DELETE_MESSAGE_REPLY = 0x69,
  QMSG_SEND_MESSAGE_REPLY = 0x6A,
  QMSG_REVOKE_MESSAGE_REPLY = 0x6B,
  QMSG_DELETE_TITLE_REPLY = 0x6C,
  QMSG_ENUM_TITLES_REPLY = 0x6D,
  QMSG_MESSAGE_FLAGS_REPLY = 0x6E,
  QMSG_ENUM_SYSTEM_MESSAGES_REPLY = 0x6F,
  QMSG_SYSTEM_MESSAGE_DETAILS_REPLY = 0x70,
  QMSG_DELETE_SYSTEM_MESSAGE_REPLY = 0x71,
  QMSG_SEND_SYSTEM_MESSAGE_REPLY = 0x72,
  QMSG_ENUM_MESSAGES_2_REPLY = 0x73,
  QMSG_MESSAGE_SUMMARY_2_REPLY = 0x74,
  QMSG_MAX_REPLY_TYPE = 0x74,
};

/*  584 */
enum _XCONFIG_STATISTIC_ENTRIES
{
  XCONFIG_STATISTICS_DATA = 0x0,
  XCONFIG_STATISTICS_XUID_MAC_ADDRESS = 0x1,
  XCONFIG_STATISTICS_XUID_COUNT = 0x2,
  XCONFIG_STATISTICS_ODD_FAILURES = 0x3,
  XCONFIG_STATISTICS_HDD_SMART_DATA = 0x4,
  XCONFIG_STATISTICS_UEM_ERRORS = 0x5,
};

/*  585 */
enum _XCONFIG_XNET_ENTRIES
{
  XCONFIG_XNET_ALL = 0x0,
  XCONFIG_XNET_DATA = 0x1,
};

/*  586 */
enum XHUDOPENSTATE
{
  XHUDOPENSTATE_NONE = 0x0,
  XHUDOPENSTATE_HALF = 0x1,
  XHUDOPENSTATE_FULL = 0x2,
  XHUDOPENSTATE_ERROR = 0x3,
  XHUDOPENSTATE_COUNT = 0x4,
};

/*  587 */
enum _XCONFIG_DVD_ENTRIES
{
  XCONFIG_DVD_ALL = 0x0,
  XCONFIG_DVD_VOLUME_ID = 0x1,
  XCONFIG_DVD_BOOKMARK = 0x2,
};

/*  588 */
enum XONLINE_PASSCODE_TYPE
{
  XONLINE_PASSCODE_DPAD_UP = 0x1,
  XONLINE_PASSCODE_DPAD_DOWN = 0x2,
  XONLINE_PASSCODE_DPAD_LEFT = 0x3,
  XONLINE_PASSCODE_DPAD_RIGHT = 0x4,
  XONLINE_PASSCODE_GAMEPAD_X = 0x5,
  XONLINE_PASSCODE_GAMEPAD_Y = 0x6,
  XONLINE_PASSCODE_GAMEPAD_LEFT_TRIGGER = 0x9,
  XONLINE_PASSCODE_GAMEPAD_RIGHT_TRIGGER = 0xA,
  XONLINE_PASSCODE_GAMEPAD_LEFT_SHOULDER = 0xB,
  XONLINE_PASSCODE_GAMEPAD_RIGHT_SHOULDER = 0xC,
};

/*  589 */
enum XONLINE_PARENTAL_CONTROL_GROUP_TYPE
{
  XONLINE_PARENTAL_CONTROL_GROUP_OPEN = 0x0,
  XONLINE_PARENTAL_CONTROL_GROUP_MEDIUM = 0x1,
  XONLINE_PARENTAL_CONTROL_GROUP_RESTRICTED = 0x2,
};

/*  590 */
enum XONLINE_PAYMENT_INSTRUMENT_TYPE
{
  XONLINE_PAYMENT_INSTRUMENT_NONE = 0x0,
  XONLINE_PAYMENT_INSTRUMENT_CREDIT_CARD = 0x1,
  XONLINE_PAYMENT_INSTRUMENT_DIRECT_DEBIT = 0x2,
};

/*  591 */
enum XONLINE_CREDIT_CARD_TYPE
{
  XONLINE_CREDIT_CARD_VISA = 0x0,
  XONLINE_CREDIT_CARD_MASTER_CARD = 0x1,
  XONLINE_CREDIT_CARD_AMEX = 0x2,
  XONLINE_CREDIT_CARD_DISCOVER = 0x3,
  XONLINE_CREDIT_CARD_JCB = 0x4,
  XONLINE_CREDIT_CARD_DINERS = 0x5,
  XONLINE_CREDIT_CARD_KLCC = 0x6,
};

/*  592 */
enum XONLINE_TIER_TYPE
{
  XONLINE_TIER_INVALID = 0x0,
  XONLINE_TIER_LOWEST = 0x3,
  XONLINE_TIER_BRONZE = 0x3,
  XONLINE_TIER_SILVER = 0x6,
};

/*  593 */
enum _XC_PASSKEY
{
  XC_PASSKEY_NONE = 0x0,
  XC_PASSKEY_CODE_X = 0x1,
  XC_PASSKEY_CODE_Y = 0x2,
  XC_PASSKEY_CODE_DPAD_LEFT = 0x3,
  XC_PASSKEY_CODE_DPAD_RIGHT = 0x4,
  XC_PASSKEY_CODE_DPAD_UP = 0x5,
  XC_PASSKEY_CODE_DPAD_DOWN = 0x6,
  XC_PASSKEY_CODE_LTRIGGER = 0x9,
  XC_PASSKEY_CODE_RTRIGGER = 0xA,
  XC_PASSKEY_CODE_LSHOULDER = 0xB,
  XC_PASSKEY_CODE_RSHOULDER = 0xC,
  XC_PASSKEY_CODE_UNKNOWN = 0xFF,
};

/*  594 */
enum XONLINE_SUBSCRIPTION_STATUS_TYPE
{
  XONLINE_SUBSCRIPTION_PENDING = 0x0,
  XONLINE_SUBSCRIPTION_ENABLED = 0x1,
  XONLINE_SUBSCRIPTION_SUSPENDED = 0x2,
  XONLINE_SUBSCRIPTION_EXPIRED = 0x3,
  XONLINE_SUBSCRIPTION_CANCELED = 0x4,
  XONLINE_SUBSCRIPTION_EXPIRED_NO_VIOLATIONS = 0x80,
};

/*  595 */
enum XONLINE_GENRE_TYPE
{
  XONLINE_GENRE_BASE = 0x0,
  XONLINE_GENRE_XARCADE = 0x6EA0500,
};

/*  596 */
enum XONLINE_DMP_STATUS_TYPE
{
  XONLINE_DMP_STATUS_ACTIVE = 0x0,
  XONLINE_DMP_STATUS_DISABLED = 0x1,
  XONLINE_DMP_STATUS_CLOSED = 0x2,
};

/*  597 */
enum XONLINE_GET_POINTS_BALANCE_RESPONSE_FLAGS
{
  XONLINE_GET_POINTS_BALANCE_RESPONSE_ABOVE_LOW_BALANCE = 0x1,
};

/*  598 */
enum XONLINE_GET_POINTS_BALANCE_DETAILS_RESPONSE_FLAGS
{
  XONLINE_GET_POINTS_BALANCE_DETAILS_RESPONSE_ABOVE_LOW_BALANCE = 0x1,
};

/*  599 */
enum XONLINE_OFFERING_TYPE
{
  XONLINE_OFFERING_TYPE_SUBSCRIPTION = 0x1,
  XONLINE_OFFERING_TYPE_CONTENT = 0x2,
  XONLINE_OFFERING_TYPE_RENEWAL = 0x4,
  XONLINE_OFFERING_TYPE_POINTS_BUNDLE = 0x8,
  XONLINE_OFFERING_TYPE_GAMERTAG_CHANGE = 0x10,
  XONLINE_OFFERING_TYPE_GAME_DEMO = 0x20,
  XONLINE_OFFERING_TYPE_GAME_TRAILER = 0x40,
  XONLINE_OFFERING_TYPE_THEME = 0x80,
  XONLINE_OFFERING_TYPE_GAMEPLAY = 0x100,
  XONLINE_OFFERING_TYPE_FULL_GAME = 0x200,
  XONLINE_OFFERING_TYPE_PROMO_POINTS = 0x400,
  XONLINE_OFFERING_TYPE_TILE = 0x800,
  XONLINE_OFFERING_TYPE_ARCADE = 0x2000,
  XONLINE_OFFERING_TYPE_VIDEO = 0x4000,
  XONLINE_OFFERING_TYPE_MUSICNETMTV = 0x8000,
  XONLINE_OFFERING_TYPE_CONSUMABLE = 0x10000,
  XONLINE_OFFERING_TYPE_SYNCCASTWMIS = 0x20000,
};

/*  600 */
enum XONLINE_TAX_TYPE
{
  XONLINE_TAX_TYPE_NO_TAX = 0x0,
  XONLINE_TAX_TYPE_DEFAULT = 0x1,
  XONLINE_TAX_TYPE_GST = 0x2,
  XONLINE_TAX_TYPE_VAT = 0x3,
  XONLINE_TAX_TYPE_NOT_APPLICABLE = 0x4,
};

/*  601 */
enum XMEDIAFORMAT
{
  XMEDIAFORMAT_PCM = 0x0,
  XMEDIAFORMAT_G726 = 0x1,
  XMEDIAFORMAT_ULAW = 0x2,
  XMEDIAFORMAT_FORCEDWORD = 0xFFFFFF,
};

/*  602 */
enum XONLINE_OFFERING_FREQUENCY
{
  XONLINE_OFFERING_FREQUENCY_ONE_TIME_CHARGE = 0x0,
  XONLINE_OFFERING_FREQUENCY_MONTHLY = 0x1,
  XONLINE_OFFERING_FREQUENCY_QUARTERLY = 0x2,
  XONLINE_OFFERING_FREQUENCY_BIANNUALLY = 0x3,
  XONLINE_OFFERING_FREQUENCY_ANNUALLY = 0x4,
};

/*  603 */
enum XONLINE_OFFERING_RELATION
{
  XONLINE_OFFERING_RELATION_NONE = 0x1,
  XONLINE_OFFERING_RELATION_BASE = 0x0,
  XONLINE_OFFERING_RELATION_RENEWAL = 0x3,
};

/*  604 */
enum XONLINE_PAYMENT_TYPE
{
  XONLINE_PAYMENT_TYPE_CREDIT_CARD = 0x1,
  XONLINE_PAYMENT_TYPE_TOKEN = 0x2,
  XONLINE_PAYMENT_TYPE_POINTS = 0x4,
};

/*  605 */
enum XMSG_OP_TYPE
{
  xmotInvalid = 0x0,
  xmotGetSummary = 0x1,
  xmotEnumerate = 0x2,
  xmotWrongUser = 0x3,
};

/*  606 */
enum XUI_CONTENT_TYPE
{
  XUI_CONTENT_NONE = 0x0,
  XUI_CONTENT_OBJ = 0x1,
  XUI_CONTENT_BRUSH = 0x2,
};

/*  607 */
enum XUI_BLEND_MODE
{
  XUI_BLEND_DEFAULT = 0x0,
  XUI_BLEND_NORMAL = 0x1,
  XUI_BLEND_MULTIPLY = 0x2,
  XUI_BLEND_DARKEN = 0x3,
  XUI_BLEND_LIGHTEN = 0x4,
  XUI_BLEND_ADD = 0x5,
  XUI_BLEND_SUBTRACT = 0x6,
};

/*  608 */
enum XNOTIFICATION_DEQUEUE_STATE
{
  Dequeue_ProcessReply = 0x0,
  Dequeue_TaskDone = 0x1,
};

/*  609 */
enum _XDIRCRAWL_STATE
{
  XDIRCRAWL_STATE_INVALID = 0x0,
  XDIRCRAWL_STATE_CALLER_HANDLING_FILE = 0x1,
  XDIRCRAWL_STATE_RUNNING = 0x2,
  XDIRCRAWL_STATE_DONE = 0x3,
};

/*  610 */
enum XUI_ITEMCOUNT
{
  XUI_ITEMCOUNT_ALL = 0x0,
  XUI_ITEMCOUNT_VISIBLE = 0x1,
  XUI_ITEMCOUNT_CHECKED = 0x2,
  XUI_ITEMCOUNT_MAX_VISIBLE = 0x3,
  XUI_ITEMCOUNT_MAX_LINES = 0x4,
  XUI_ITEMCOUNT_MAX_PER_LINE = 0x5,
};

/*  611 */
enum XRL_TRANSACTION_STATE
{
  XRL_TRANSACTION_STATE_INVALID = 0x0,
  XRL_TRANSACTION_STATE_SENDING_REQUEST = 0x1,
  XRL_TRANSACTION_STATE_WAITING_FOR_SEND_DATA = 0x2,
  XRL_TRANSACTION_STATE_RECEIVING_HEADERS = 0x3,
  XRL_TRANSACTION_STATE_PROCESSING_HEADERS = 0x4,
  XRL_TRANSACTION_STATE_RECEIVING_BODY = 0x5,
  XRL_TRANSACTION_STATE_PROCESSING_BODY = 0x6,
  XRL_TRANSACTION_STATE_DONE = 0x7,
};

/*  612 */
enum XUI_CONTROL_NAVIGATE
{
  XUI_CONTROL_NAVIGATE_UP = 0x0,
  XUI_CONTROL_NAVIGATE_DOWN = 0x1,
  XUI_CONTROL_NAVIGATE_LEFT = 0x2,
  XUI_CONTROL_NAVIGATE_RIGHT = 0x3,
};

/*  613 */
enum lzx_block_type
{
  BLOCKTYPE_INVALID = 0x0,
  BLOCKTYPE_VERBATIM = 0x1,
  BLOCKTYPE_ALIGNED = 0x2,
  BLOCKTYPE_UNCOMPRESSED = 0x3,
};

/*  614 */
enum XUI_CONTROL_LINK
{
  XUI_CONTROL_LINK_NEXT = 0x0,
  XUI_CONTROL_LINK_PREV = 0x1,
  XUI_CONTROL_LINK_FIRST_CHILD = 0x2,
  XUI_CONTROL_LINK_LAST_CHILD = 0x3,
};

/*  615 */
enum decoder_state
{
  DEC_STATE_UNKNOWN = 0x0,
  DEC_STATE_START_NEW_BLOCK = 0x1,
  DEC_STATE_DECODING_DATA = 0x2,
};

/*  616 */
enum XUI_SCROLLEND_STATE
{
  XUI_SCROLLEND_STATE_NOMORE = 0x0,
  XUI_SCROLLEND_STATE_MORE = 0x1,
  XUI_SCROLLEND_STATE_SCROLLING = 0x2,
};

/*  617 */
enum _XNCALLER_TYPE
{
  XNCALLER_INVALID = 0x0,
  XNCALLER_TITLE = 0x1,
  XNCALLER_SYSAPP = 0x2,
  XNCALLER_XBDM = 0x3,
  XNCALLER_PERSISTING = 0x3,
  XNCALLER_TEST = 0x4,
  NUM_XNCALLER_TYPES = 0x4,
};

/*  618 */
enum PKCS1PADERR
{
  PKCS1PADERR_SUCCEEDED = 0x0,
  PKCS1PADERR_MESSAGE_TOO_LONG = 0x1,
  PKCS1PADERR_ENCODED_MESSAGE_TOO_SMALL = 0x2,
  PKCS1PADERR_INVALID_PARAMETER = 0x3,
  PKCS1PADERR_INVALID_PADDING = 0x4,
  PKCS1PADERR_BUFFER_TOO_SMALL = 0x5,
  PKCS1PADERR_INVALID_HASH_TYPE = 0x6,
};

/*  619 */
enum PKCS1PADHASH
{
  PKCS1PADHASH_SHA1 = 0x1,
};

/*  620 */
enum _XCAB_STREAM_UNPACK_STATE
{
  XCAB_STREAM_UNPACK_STATE_INVALID = 0x0,
  XCAB_STREAM_UNPACK_STATE_CONTENT_HEADER = 0x1,
  XCAB_STREAM_UNPACK_STATE_CALLER_VERIFYING_HEADER = 0x2,
  XCAB_STREAM_UNPACK_STATE_FOLDERS = 0x3,
  XCAB_STREAM_UNPACK_STATE_CALLER_WRITING_INITIAL_CACHE = 0x4,
  XCAB_STREAM_UNPACK_STATE_FILE_HEADER = 0x5,
  XCAB_STREAM_UNPACK_STATE_FILE_NAME = 0x6,
  XCAB_STREAM_UNPACK_STATE_CALLER_WRITING_FILE_CACHE_BLOCK = 0x7,
  XCAB_STREAM_UNPACK_STATE_CALLER_HANDLING_NEW_FILE = 0x8,
  XCAB_STREAM_UNPACK_STATE_CALLER_READING_CACHE_BLOCK = 0x9,
  XCAB_STREAM_UNPACK_STATE_PRE_DATA_PADDING = 0xA,
  XCAB_STREAM_UNPACK_STATE_CALLER_HANDLING_FILE_DATA_BEGIN = 0xB,
  XCAB_STREAM_UNPACK_STATE_DATA_HEADER = 0xC,
  XCAB_STREAM_UNPACK_STATE_DATA_BLOCK = 0xD,
  XCAB_STREAM_UNPACK_STATE_CALLER_HANDLING_FILE_DATA = 0xE,
  XCAB_STREAM_UNPACK_STATE_CALLER_HANDLING_FILE_DATA_END = 0xF,
  XCAB_STREAM_UNPACK_STATE_DONE = 0x10,
};

/*  621 */
enum XUI_LINECOUNT
{
  XUI_LINECOUNT_ALL = 0x0,
  XUI_LINECOUNT_VISIBLE = 0x1,
  XUI_LINECOUNT_MAX_VISIBLE = 0x2,
};

/*  622 */
enum XUI_LISTITEM_LAYOUT
{
  XUI_LISTITEM_LAYOUT_MULTI_VERTICAL = 0x0,
  XUI_LISTITEM_LAYOUT_MULTI_HORIZONTAL = 0x1,
  XUI_LISTITEM_LAYOUT_SINGLE_VERTICAL = 0x2,
  XUI_LISTITEM_LAYOUT_SINGLE_HORIZONTAL = 0x3,
  XUI_LISTITEM_LAYOUT_GRID_VERTICAL = 0x4,
  XUI_LISTITEM_LAYOUT_GRID_HORIZONTAL = 0x5,
};

/*  623 */
enum XUI_SMOOTHSCROLL_ORIENTATION
{
  XUI_SMOOTHSCROLL_VERTICAL = 0x0,
  XUI_SMOOTHSCROLL_HORIZONTAL = 0x1,
};

/*  624 */
enum XUI_SEEK_OPTIONS
{
  XUI_SEEK_FROM_START = 0x1,
  XUI_SEEK_FROM_CURRENT = 0x2,
  XUI_SEEK_FROM_END = 0x4,
};

/*  625 */
enum XUI_SCROLLEND_DIRECTION
{
  XUI_SCROLLEND_DIRECTION_UP = 0x0,
  XUI_SCROLLEND_DIRECTION_DOWN = 0x1,
  XUI_SCROLLEND_DIRECTION_LEFT = 0x2,
  XUI_SCROLLEND_DIRECTION_RIGHT = 0x3,
};

/*  626 */
enum XUI_NAMEDFRAME_COMMAND
{
  XUI_COMMAND_PLAY = 0x0,
  XUI_COMMAND_STOP = 0x1,
  XUI_COMMAND_GOTO = 0x2,
  XUI_COMMAND_GOTOANDPLAY = 0x3,
  XUI_COMMAND_GOTOANDSTOP = 0x4,
};

/*  627 */
enum XUI_INTERPOLATE
{
  XUI_INTERPOLATE_LINEAR = 0x0,
  XUI_INTERPOLATE_NONE = 0x1,
  XUI_INTERPOLATE_EASE = 0x2,
};

/*  628 */
enum ASYNC_TASK_STATE
{
  TASK_STATE_INITIALIZED = 0x0,
  TASK_STATE_SERIALIZE = 0x1,
  TASK_STATE_THROTTLE = 0x2,
  TASK_STATE_PREPARE_REQUEST = 0x3,
  TASK_STATE_BUILD_REQUEST = 0x4,
  TASK_STATE_SUBMIT_REQUEST = 0x5,
  TASK_STATE_PROCESS_HTTP_HEADERS = 0x6,
  TASK_STATE_PROCESS_RESPONSE_HEADER = 0x7,
  TASK_STATE_PROCESS_RESPONSE_HEADER_THROTTLED = 0x8,
  TASK_STATE_PROCESS_RESPONSE_DATA = 0x9,
  TASK_STATE_PROCESS_RESPONSE_DATA_THROTTLED = 0xA,
  TASK_STATE_CLEANUP = 0xB,
  TASK_STATE_INVALID = 0xC,
};

/*  629 */
enum XUI_ELEMENT_PROPERTY_TYPE
{
  XUI_EPT_EMPTY = 0x0,
  XUI_EPT_BOOL = 0x1,
  XUI_EPT_INTEGER = 0x2,
  XUI_EPT_UNSIGNED = 0x3,
  XUI_EPT_FLOAT = 0x4,
  XUI_EPT_STRING = 0x5,
  XUI_EPT_COLOR = 0x6,
  XUI_EPT_VECTOR = 0x7,
  XUI_EPT_QUATERNION = 0x8,
  XUI_EPT_OBJECT = 0x9,
  XUI_EPT_CUSTOM = 0xA,
};

/*  630 */
enum XUI_FILL_TYPE
{
  XUI_FILL_NONE = 0x0,
  XUI_FILL_SOLID = 0x1,
  XUI_FILL_LINEAR_GRADIENT = 0x2,
  XUI_FILL_RADIAL_GRADIENT = 0x3,
  XUI_FILL_TEXTURE = 0x4,
};

/*  631 */
enum $ADC3116C8D37CCAEC38C96B43F6D9D99
{
  Measurement_Interval = 0x64,
  Min_Samples_Per_Measurement = 0x3,
  Alpha_Percent = 0x14,
};

/*  632 */
enum $FD54BB9D13320D3BDD5FF446A1AE121B
{
  e_MaxMediaFiles = 0x1000,
  e_MinMediaFileSize = 0xA00000,
};

/*  633 */
enum PROCMODE_ID
{
  INVALID_MODE = 0x0,
  LOOPBACK_MODE = 0x1,
  VOICECHAT_MODE = 0x2,
  PROCMODE_ID_MAX = 0x3,
  PROCMODE_ID_FORCE_DWORD = 0xFFFFFFFF,
};

/*  634 */
enum $BC578A3DA0AB59E274770492BD011136
{
  XHVMISC_TAG = 0x608A2002,
  PACKET_CONTEXT_TAG = 0x618A0003,
  PACKET_QUEUE_TAG = 0x618A8004,
  PACKET_PROCESSOR_TAG = 0x618A8005,
  PACKET_BUFFER_TAG = 0x618A8006,
  CODEC_TYPE_TAG = 0x648A8007,
  CODEC_PROCESSOR_TAG = 0x648A0008,
  MPPACKET_TAG = 0x618A0009,
  PROCMODE_TAG = 0x618A800A,
  LOCALTALKER_TAG = 0x618A800B,
  XHVENGINE_TAG = 0x618A800C,
  MICPROXY_TAG = 0x618A800D,
  LOOPBACK_EXTENSION_TAG = 0x618A800E,
  FILEOUT_EXTENSION_TAG = 0x618A800F,
  REMOTETALKER_TAG = 0x618A8010,
  VOICECHAT_EXTENSION_TAG = 0x618A8011,
  XHVBATCHALLOCATOR_TAG = 0x618A8012,
  JITTERBUF_TAG = 0x618A8013,
  XSVENGINE_TAG = 0x618A8014,
  XSVRTCACHE_TAG = 0x618A8015,
  XSVSESSION_TAG = 0x618A8016,
  XSVLTCACHE_TAG = 0x618A8017,
  NCI_CODEC_TAG = 0x648A0018,
  RTV_CODEC_TAG = 0x648A0019,
};

/*  635 */
enum $EB386416A4DBB27A8DE8A61B0C7E4B60
{
  XAUDIODRIVERPERF_SASE_ENCODER = 0x0,
  XAUDIODRIVERPERF_SASE_DECODER = 0x1,
};

/*  636 */
enum XHVACTIVATIONOP
{
  XHV_NOOP = 0x0,
  XHV_DESTROY_OP = 0x3,
};

/*  637 */
enum PACKETSTATE
{
  PACKETSTATE_ONTIME = 0x0,
  PACKETSTATE_LATE = 0x1,
  PACKETSTATE_OUTOFSYNC = 0x2,
  PACKETSTATE_MAX = 0x3,
};

/*  638 */
enum VOICECHATSTATUS
{
  VOICECHATSTATUS_INVITE_SENT = 0x0,
  VOICECHATSTATUS_INVITE_SENT_ACTIVE = 0x1,
  VOICECHATSTATUS_JOINING = 0x2,
  VOICECHATSTATUS_JOINING_ACTIVE = 0x3,
  VOICECHATSTATUS_NONE_ACTIVE = 0x4,
  VOICECHATSTATUS_LOCAL_ACTIVE = 0x5,
  VOICECHATSTATUS_REMOTE_ACTIVE = 0x6,
  VOICECHATSTATUS_BOTH_ACTIVE = 0x7,
  VOICECHATSTATUS_TERMINATED = 0x8,
};

/*  639 */
enum UVCHANNELSTATUS
{
  UVCHANNELSTATUS_UNUSED = 0x0,
  UVCHANNELSTATUS_VOICECHAT = 0x1,
  UVCHANNELSTATUS_VOICEMAIL = 0x2,
};

/*  640 */
enum _D3DFILTER_TYPE
{
  D3DFILTER_DEFAULT = 0x0,
  D3DFILTER_CATMULL = 0x1,
  D3DFILTER_KAISER = 0x2,
  D3DFILTER_GAUSSIAN = 0x3,
  D3DFILTER_MITCHELL = 0x4,
  D3DFILTER_LANCZOS = 0x5,
  D3DFILTER_BILINEAR = 0x6,
  D3DFILTER_POINT = 0x7,
  D3DFILTER_FORCE_DWORD = 0x7FFFFFF,
};

/*  641 */
enum _CertEvents
{
  CE_D3DSwap = 0x0,
  CE_D3DResume = 0x1,
  CE_D3DSuspend = 0x2,
};

/*  642 */
enum D3D::LazyState
{
  Lazy_VertexShaderConstants = 0x4000,
  Lazy_PixelShaderConstants = 0x14000,
  Lazy_FetchConstants = 0x32020,
  Lazy_VertexFetchConstants = 0x3063A,
  Lazy_TextureFetchConstants = 0x31A20,
  Lazy_MiscConstants = 0x40207,
  Lazy_FlowConstants = 0x40107,
  Lazy_Reserved0 = 0x40108,
  Lazy_LoadShaders = 0x2042B,
  Lazy_LoadPixelShader = 0x2012B,
  Lazy_LoadVertexShader = 0x2012C,
  Lazy_ZPassEdramMode = 0x2012D,
  Lazy_HiZEnable = 0x2012E,
  Lazy_DestinationPacket = 0x21006,
  Lazy_SurfaceInfo = 0x20106,
  Lazy_Color0Info = 0x20107,
  Lazy_DepthInfo = 0x20108,
  Lazy_Color1Info = 0x20109,
  Lazy_Color2Info = 0x2010A,
  Lazy_Color3Info = 0x2010B,
  Lazy_CoherDestBase0 = 0x2010C,
  Lazy_CoherDestBase1 = 0x2010D,
  Lazy_CoherDestBase2 = 0x2010E,
  Lazy_CoherDestBase3 = 0x2010F,
  Lazy_CoherDestBase4 = 0x20110,
  Lazy_CoherDestBase5 = 0x20111,
  Lazy_CoherDestBase6 = 0x20112,
  Lazy_CoherDestBase7 = 0x20113,
  Lazy_ScreenScissorTL = 0x20114,
  Lazy_ScreenScissorBR = 0x20115,
  Lazy_ValuesPacket = 0x21516,
  Lazy_MaxVtxIndx = 0x20116,
  Lazy_MinVtxIndx = 0x20117,
  Lazy_IndxOffset = 0x20118,
  Lazy_MultiPrimIbResetIndx = 0x20119,
  Lazy_ColorMask = 0x2011A,
  Lazy_BlendRed = 0x2011B,
  Lazy_BlendGreen = 0x2011C,
  Lazy_BlendBlue = 0x2011D,
  Lazy_BlendAlpha = 0x2011E,
  Lazy_Unused_Values0 = 0x2011F,
  Lazy_Unused_Values1 = 0x20120,
  Lazy_Unused_Values2 = 0x20121,
  Lazy_StencilRefMaskBF = 0x20122,
  Lazy_StencilRefMask = 0x20123,
  Lazy_AlphaRef = 0x20124,
  Lazy_VportXScale = 0x20125,
  Lazy_VportXOffset = 0x20126,
  Lazy_VportYScale = 0x20127,
  Lazy_VportYOffset = 0x20128,
  Lazy_VportZScale = 0x20129,
  Lazy_VportZOffset = 0x2012A,
  Lazy_ProgramPacket = 0x2052F,
  Lazy_ProgramControl = 0x2012F,
  Lazy_ContextMisc = 0x20130,
  Lazy_InterpolatorControl = 0x20131,
  Lazy_Wrapping0 = 0x20132,
  Lazy_Wrapping1 = 0x20133,
  Lazy_ControlPacket = 0x20C34,
  Lazy_DepthControl = 0x20134,
  Lazy_BlendControl0 = 0x20135,
  Lazy_ColorControl = 0x20136,
  Lazy_HiControl = 0x20137,
  Lazy_ClipControl = 0x20138,
  Lazy_ModeControl = 0x20139,
  Lazy_VteControl = 0x2013A,
  Lazy_Unused_Control0 = 0x2013B,
  Lazy_EdramModeControl = 0x2013C,
  Lazy_BlendControl1 = 0x2013D,
  Lazy_BlendControl2 = 0x2013E,
  Lazy_BlendControl3 = 0x2013F,
  Lazy_PointPacket = 0x40812,
  Lazy_PolyOffsetFrontScale = 0x40112,
  Lazy_PolyOffsetFrontOffset = 0x40113,
  Lazy_PolyOffsetBackScale = 0x40114,
  Lazy_PolyOffsetBackOffset = 0x40115,
  Lazy_PointXRad = 0x40116,
  Lazy_PointYRad = 0x40117,
  Lazy_PointConstantSize = 0x40118,
  Lazy_PointCullRad = 0x40119,
  Lazy_TessellatorPacket = 0x31509,
  Lazy_PointSize = 0x30109,
  Lazy_PointMinMax = 0x3010A,
  Lazy_LineControl = 0x3010B,
  Lazy_LineStipple = 0x3010C,
  Lazy_OutputPathControl = 0x3010D,
  Lazy_HosControl = 0x3010E,
  Lazy_HosMaxTessLevel = 0x3010F,
  Lazy_HosMinTessLevel = 0x30110,
  Lazy_HosReuseDepth = 0x30111,
  Lazy_GroupPrimType = 0x30112,
  Lazy_GroupFirstDecr = 0x30113,
  Lazy_GroupDecr = 0x30114,
  Lazy_GroupVect0Control = 0x30115,
  Lazy_GroupVect1Control = 0x30116,
  Lazy_GroupVect0FmtControl = 0x30117,
  Lazy_GroupVect1FmtControl = 0x30118,
  Lazy_Unused_Tessellator0 = 0x30119,
  Lazy_Unused_Tessellator1 = 0x3011A,
  Lazy_MPassPsControl = 0x3011B,
  Lazy_VizQuery = 0x3011C,
  Lazy_Enhance = 0x3011D,
  Lazy_MiscPacket = 0x4261A,
  Lazy_ScLineControl = 0x4011A,
  Lazy_AaConfig = 0x4011B,
  Lazy_VtxControl = 0x4011C,
  Lazy_GbVertClipAdj = 0x4011D,
  Lazy_GbVertDiscAdj = 0x4011E,
  Lazy_GbHorzClipAdj = 0x4011F,
  Lazy_GbHorzDiscAdj = 0x40120,
  Lazy_VsConst = 0x40121,
  Lazy_PsConst = 0x40122,
  Lazy_DebugMisc0 = 0x40123,
  Lazy_DebugMisc1 = 0x40124,
  Lazy_Unused_Misc0 = 0x40125,
  Lazy_Unused_Misc1 = 0x40126,
  Lazy_Unused_Misc2 = 0x40127,
  Lazy_Unused_Misc3 = 0x40128,
  Lazy_Unused_Misc4 = 0x40129,
  Lazy_Unused_Misc5 = 0x4012A,
  Lazy_Unused_Misc6 = 0x4012B,
  Lazy_AaMask = 0x4012C,
  Lazy_Unused_Misc7 = 0x4012D,
  Lazy_Unused_Misc8 = 0x4012E,
  Lazy_Unused_Misc9 = 0x4012F,
  Lazy_VertexReuseBlockControl = 0x40130,
  Lazy_OutDeallocControl = 0x40131,
  Lazy_CopyControl = 0x40132,
  Lazy_CopyDestBase = 0x40133,
  Lazy_CopyDestPitch = 0x40134,
  Lazy_CopyDestInfo = 0x40135,
  Lazy_HiClear = 0x40136,
  Lazy_DepthClear = 0x40137,
  Lazy_ColorClear = 0x40138,
  Lazy_ColorClearLo = 0x40139,
  Lazy_CopyFunc = 0x4013A,
  Lazy_CopyRef = 0x4013B,
  Lazy_CopyMask = 0x4013C,
  Lazy_CopySurfaceSlice = 0x4013D,
  Lazy_SampleCountControl = 0x4013E,
  Lazy_SampleCountAddress = 0x4013F,
  Lazy_ClipPlanes = 0x40609,
  Lazy_ClipPlane0 = 0x40109,
  Lazy_ClipPlane1 = 0x4010A,
  Lazy_ClipPlane2 = 0x4010B,
  Lazy_ClipPlane3 = 0x4010C,
  Lazy_ClipPlane4 = 0x4010D,
  Lazy_ClipPlane5 = 0x4010E,
  Lazy_Terminator = 0x4010F,
};

/*  643 */
enum D3D::BracketType
{
  BracketType_None = 0x0,
  BracketType_BeginVertices = 0x1,
  BracketType_BeginIndexedVertices = 0x2,
  BracketType_BeginShaderConstantF1 = 0x3,
  BracketType_BeginShaderConstantF4 = 0x4,
  BracketType_GpuBeginShaderConstantF4 = 0x5,
};

/*  644 */
enum PIXMeta
{
  PIXMeta_SetResolveDestTexture = 0x10000,
  PIXMeta_ClearResolveDestTexture = 0x10001,
  PIXMeta_Clear = 0x10002,
  PIXMeta_DrawPrimitiveUP = 0x10003,
  PIXMeta_DrawIndexedPrimitiveUP = 0x10004,
  PIXMeta_BeginVertices = 0x10005,
  PIXMeta_BeginIndexedVertices = 0x10006,
  PIXMeta_GameCertEdramClear = 0x10007,
  PIXMeta_Unused4 = 0x10008,
  PIXMeta_OobComment = 0x10009,
  PIXMeta_OobMetaData = 0x1000A,
  PIXMeta_SecondaryRingBuffer = 0x1000B,
  PIXMeta_BeginIndirectBuffer = 0x1000C,
  PIXMeta_EndIndirectBuffer = 0x1000D,
  PIXMeta_PatchVertexShaderToMatchPixelShader = 0x1000E,
  PIXMeta_PatchVertexShaderToMatchVertexDeclarationFast = 0x1000F,
  PIXMeta_PatchVertexShaderToMatchVertexDeclarationSlow = 0x10010,
  PIXMeta_VertexShaderDebuggerHint = 0x10011,
  PIXMeta_PixelShaderDebuggerHint = 0x10012,
  PIXMeta_VertexShaderDebuggerHintShort = 0x10013,
  PIXMeta_PixelShaderDebuggerHintShort = 0x10014,
  PIXMeta_UserBeginEvent = 0x10015,
  PIXMeta_UserEndEvent = 0x10016,
  PIXMeta_SetRenderTarget = 0x10017,
  PIXMeta_PatchVertexShaderToMatchPixelShader_Undo = 0x10018,
  PIXMeta_SetShaderGPRAllocationBegin = 0x10019,
  PIXMeta_SetShaderGPRAllocationEnd = 0x1001A,
  PIXMeta_BeginTiling = 0x1001B,
  PIXMeta_EndTiling = 0x1001C,
  PIXMeta_UserMarkerEvent = 0x1001D,
  PIXMeta_BeginZPass = 0x1001E,
  PIXMeta_EndZPass = 0x1001F,
  PIXMeta_XpsBegin = 0x10020,
  PIXMeta_XpsEnd = 0x10021,
  PIXMeta_BeginRunCommandBuffer = 0x10022,
  PIXMeta_EndRunCommandBuffer = 0x10023,
  PIXMeta_FXLiteDependency = 0x10024,
  PIXMeta_IndirectLoadShader = 0x10025,
  PIXMeta_IndirectLoadAluConstant = 0x10026,
  PIXMeta_IndirectReserved = 0x10027,
  PIXMeta_BeginClear = 0x10028,
  PIXMeta_EndClear = 0x10029,
};

/*  645 */
enum D3D::MEMORYREGION
{
  MEMREGION_SYSTEM = 0x0,
  MEMREGION_TITLE = 0x1,
  MEMREGION_XAM_FRONT_BUFFER = 0x2,
};

/*  646 */
enum RecordResourceType
{
  Resource_VertexBuffer = 0x0,
  Resource_IndexBuffer = 0x1,
  Resource_Texture = 0x2,
  Resource_Context = 0x3,
  Resource_Shader = 0x4,
  Resource_Export = 0x5,
  Resource_AluConstants = 0x6,
  Resource_MAX = 0x7,
};

/*  647 */
enum RecordType
{
  Record_End = 0x0,
  Record_Version = 0x1,
  Record_RestoreRanges = 0x2,
  Record_RangeError = 0x3,
  Record_FrontBuffer = 0x4,
  Record_InitialMemory = 0x5,
  Record_CpuModifiedMemory = 0x6,
  Record_CommandBuffer = 0x7,
  Record_XpsMemory = 0x8,
  Record_MAX = 0x9,
};

/*  648 */
enum D3D::BufferState
{
  BufferState_Uninitialized = 0x0,
  BufferState_Runnable = 0x1,
  BufferState_CommandBufferBracket = 0x2,
  BufferState_FixupCreationBracket = 0x3,
  BufferState_ReconstructionBracket = 0x4,
  BufferState_DynamicFixupBracket = 0x5,
  BufferState_Deconstructed = 0x6,
  BufferState_OutOfMemory = 0x7,
};

/*  649 */
enum D3D::FixupType
{
  Fixup_SetSurfaces = 0x1,
  Fixup_SetClipRect = 0x2,
  Fixup_SetViewport = 0x3,
  Fixup_SetShaderConstant = 0x4,
  Fixup_SetVertexShader = 0x5,
  Fixup_SetPixelShader = 0x6,
  Fixup_SetTexture = 0x7,
  Fixup_SetIndexBuffer = 0x8,
  Fixup_SetVertexBuffer = 0x9,
  Fixup_SetConstantBuffer = 0xA,
  Fixup_SetCommandBuffer = 0xB,
};

/*  650 */
enum D3D::Queue_Commands
{
  Queue_CommandFlag = 0x80000000,
  Queue_NextChunkFlags = 0xC0000000,
  Queue_CommandMask = 0xFF000000,
  Queue_NullNextChunk = 0xC0000000,
  Queue_Initialize = 0x80000000,
  Queue_XpsSetCallback = 0x81000000,
  Queue_PrbCall = 0x82000000,
  Queue_Invalidate = 0x83000000,
  Queue_BeginZPass = 0x84000000,
  Queue_EndZPass = 0x85000000,
  Queue_InvokeRenderPass = 0x86000000,
  Queue_BeginTiling = 0x87000000,
  Queue_EndTiling = 0x88000000,
  Queue_BeginXps = 0x89000000,
  Queue_EndXps = 0x8A000000,
  Queue_TilingPatch = 0x8B000000,
  Queue_WorkerInterrupt = 0x8C000000,
  Queue_LastCommandMarker = 0x8C000001,
};

/*  651 */
enum $30D1720AA0E748552B1AAE0A4FB5A77B
{
  DEFAULT_ACCESS = 0xC0000000,
  DEFAULT_SHARE_MODE = 0x0,
  DEFAULT_CREATION_DISTRIBUTION = 0x2,
  DEFAULT_FLAGS_AND_ATTRIBUTES = 0x8000000,
};

/*  652 */
enum $436AEC9A0387302844708851D4F85A60
{
  TARGET_LEVEL = 0x2,
};

/*  653 */
enum $8D329940B12F343C09A4E15DE0BF73F8
{
  XAUDIOVOICETYPE_THIS = 0x0,
};

/*  654 */
enum $C3B9F7083319F4D615914DBD25CE1FF8
{
  SUBMITTING_UNINITIALIZED = 0x0,
  SUBMITTING_PACKETS = 0x1,
  SUBMITTING_SOURCEBUFFERS = 0x2,
};

/*  655 */
enum $248C1B3E95D800417BDF52ADBBBF4250
{
  BUFFER_ALIGNMENT = 0x80,
};

/*  656 */
enum $B1CF14AC60C2CECA57172B19617893CB
{
  SHARED_FRAMEBUF_0 = 0x0,
  SHARED_FRAMEBUF_1 = 0x1,
  SHARED_FRAMEBUF_COUNT = 0x2,
};

/*  657 */
enum $AF9225859D04F391BAE8A286D3789F6A
{
  THREAD_UNUSED = 0x0,
  THREAD_SUPERVISOR = 0x1,
  THREAD_PEON = 0x2,
  THREAD_RESERVED_PARKING = 0x4,
  THREAD_WORKER_MASK = 0x3,
};

/*  658 */
typedef $8D329940B12F343C09A4E15DE0BF73F8 $DA54DFE809B6001C7E57177C90772680;

/*  659 */
enum DSPROPERTY_I3DL2_LISTENERPROPERTY
{
  DSPROPERTY_I3DL2LISTENER_ALL = 0x0,
  DSPROPERTY_I3DL2LISTENER_ROOM = 0x1,
  DSPROPERTY_I3DL2LISTENER_ROOMHF = 0x2,
  DSPROPERTY_I3DL2LISTENER_ROOMROLLOFFFACTOR = 0x3,
  DSPROPERTY_I3DL2LISTENER_DECAYTIME = 0x4,
  DSPROPERTY_I3DL2LISTENER_DECAYHFRATIO = 0x5,
  DSPROPERTY_I3DL2LISTENER_REFLECTIONS = 0x6,
  DSPROPERTY_I3DL2LISTENER_REFLECTIONSDELAY = 0x7,
  DSPROPERTY_I3DL2LISTENER_REVERB = 0x8,
  DSPROPERTY_I3DL2LISTENER_REVERBDELAY = 0x9,
  DSPROPERTY_I3DL2LISTENER_DIFFUSION = 0xA,
  DSPROPERTY_I3DL2LISTENER_DENSITY = 0xB,
  DSPROPERTY_I3DL2LISTENER_HFREFERENCE = 0xC,
};

/*  660 */
enum princeton_digital::stereo_room_t<float>::input_mode_t
{
  STEREO = 0x0,
  CH1 = 0x1,
  CH2 = 0x2,
  CH1_CH2 = 0x3,
};

/*  661 */
enum CP_OP
{
  CP_OP_NOP = 0x10,
  CP_OP_PAINT = 0x91,
  CP_OP_SMALL_TEXT = 0x93,
  CP_OP_BITBLT = 0x92,
  CP_OP_HOSTDATA_BLT = 0x94,
  CP_OP_POLYLINE = 0x95,
  CP_OP_POLYSCANLINES = 0x98,
  CP_OP_NEXTCHAR = 0x19,
  CP_OP_PLY_NEXTSCAN = 0x1D,
  CP_OP_SET_SCISSORS = 0x1E,
  CP_OP_REG_RMW = 0x21,
  CP_OP_PAINT_MULTI = 0x9A,
  CP_OP_BITBLT_MULTI = 0x9B,
  CP_OP_TRANS_BITBLT = 0x9C,
  CP_OP_WAIT_FOR_IDLE = 0x26,
  CP_OP_LOAD_PALETTE = 0x2C,
  CP_OP_3D_DRAW_INDX_2 = 0x36,
  CP_OP_MPEG_INDEX = 0x3A,
  CP_OP_DRAW_INDX = 0x22,
  CP_OP_VIZ_QUERY = 0x23,
  CP_OP_LOAD_EXECUTE = 0x24,
  CP_OP_SET_STATE = 0x25,
  CP_OP_IM_LOAD = 0x27,
  CP_OP_IM_LOAD_IMMEDIATE = 0x2B,
  CP_OP_SET_CONSTANT = 0x2D,
  CP_OP_CONST_PREFETCH = 0x49,
  CP_OP_LOAD_ALU_CONSTANT = 0x2F,
  CP_OP_INVALIDATE_STATE = 0x3B,
  CP_OP_WAIT_REG_MEM = 0x3C,
  CP_OP_WAIT_REG_EQ = 0x52,
  CP_OP_WAIT_REG_GTE = 0x53,
  CP_OP_MEM_WRITE = 0x3D,
  CP_OP_COND_WRITE = 0x45,
  CP_OP_EVENT_WRITE = 0x46,
  CP_OP_EVENT_WRITE_SHD = 0x58,
  CP_OP_EVENT_WRITE_CFL = 0x59,
  CP_OP_EVENT_WRITE_SER = 0x5A,
  CP_OP_EVENT_WRITE_ZPD = 0x5B,
  CP_OP_REG_TO_MEM = 0x3E,
  CP_OP_INDIRECT_BUFFER = 0x3F,
  CP_OP_INDIRECT_BUFFER_PFD = 0x37,
  CP_OP_CP_INTERRUPT = 0x40,
  CP_OP_CPU_INTERRUPT = 0x54,
  CP_OP_HOSTDATA_BLT2 = 0xC1,
  CP_OP_HOSTDATA_BLT_PNTR = 0xC2,
  CP_OP_IB_PREAMBLE = 0x43,
  CP_OP_IB_PREFETCH_START = 0x16,
  CP_OP_IB_PREFETCH_END = 0x17,
  CP_OP_SUBLK_PREFETCH = 0x1F,
  CP_OP_INSTR_PREFETCH = 0x20,
  CP_OP_INSTR_MATCH = 0x47,
  CP_OP_MICRO_PREFETCH = 0x44,
  CP_OP_INCR_UPDATE_STATE = 0x55,
  CP_OP_INCR_UPDATE_CONST = 0x56,
  CP_OP_INCR_UPDATE_INSTR = 0x57,
  CP_OP_ME_INIT = 0x48,
  CP_OP_GRADFILL_3D = 0xCA,
  CP_OP_ALPHABLEND_3D = 0xCB,
  CP_OP_AAFONT = 0xCD,
  CP_OP_MEM_WRITE_CNTR = 0x4F,
  CP_OP_OLD_SET_BIN_MASK = 0x50,
  CP_OP_OLD_SET_BIN_SELECT = 0x51,
  CP_OP_TYPE0 = 0x7D,
  CP_OP_TYPE2 = 0x7E,
  CP_OP_CONTEXT_UPDATE = 0x5E,
  CP_OP_SET_BIN_MASK_LO = 0x60,
  CP_OP_SET_BIN_MASK_HI = 0x61,
  CP_OP_SET_BIN_SELECT_LO = 0x62,
  CP_OP_SET_BIN_SELECT_HI = 0x63,
};

/*  662 */
enum _PixDataOpcodesType
{
  PIXOP_Clear = 0x0,
  PIXOP_DrawVert = 0x100001,
  PIXOP_DrawVertUP = 0x2,
  PIXOP_DrawIVert = 0x100003,
  PIXOP_DrawIVertUP = 0x4,
  PIXOP_Swap = 0x5,
  PIXOP_VBlank = 0x6,
  PIXOP_VBlankMissed = 0x7,
  PIXOP_VBlankSwap = 0x8,
  PIXOP_ActiveResourceLock = 0x9,
  PIXOP_ResourceLock = 0xA,
  PIXOP_PrimaryOverrun = 0xB,
  PIXOP_SecondaryOverrun = 0xC,
  PIXOP_BlockOnTime = 0xD,
  PIXOP_BlockUntilIdle = 0xE,
  PIXOP_SwapThrottle = 0xF,
  PIXOP_LockVertex = 0x10,
  PIXOP_LockIndex = 0x11,
  PIXOP_LockTexture = 0x12,
  PIXOP_LockSurface = 0x13,
  PIXOP_UserEvent = 0x14,
  PIXOP_UserMarker = 0x15,
  PIXOP_UserString = 0x16,
  PIXOP_Resolve = 0x100017,
  PIXOP_Last = 0x18,
  PIXOP_QPCFreq = 0x19,
  PIXOP_SingleR300 = 0x1A,
  PIXOP_CModel = 0x1B,
  PIXOP_CModelFrame = 0x1C,
  PIXOP_CModelStatsColumn = 0x1D,
  PIXOP_CModelImage = 0x1E,
  PIXOP_CModelCompressedImage = 0x1F,
  PIXOP_CModelData = 0x20,
  PIXOP_ClearF = 0x100021,
  PIXOP_CModelRenderData = 0x22,
  PIXOP_EmulatorImageNative = 0x23,
  PIXOP_EmulatorCompressedImageNative = 0x24,
  PIXOP_XPS = 0x25,
  PIXOP_BlockOnResourceRelease = 0x26,
  PIXOP_BlockOnVertexBufferRelease = 0x27,
  PIXOP_BlockOnIndexBufferRelease = 0x28,
  PIXOP_BlockOnTextureRelease = 0x29,
  PIXOP_BlockOnSurfaceRelease = 0x2A,
  PIXOP_BlockOnVertexShaderRelease = 0x2B,
  PIXOP_BlockOnPixelShaderRelease = 0x2C,
  PIXOP_BlockOnResourceLock = 0x2D,
  PIXOP_BlockOnVertexBufferLock = 0x2E,
  PIXOP_BlockOnIndexBufferLock = 0x2F,
  PIXOP_BlockOnTextureLock = 0x30,
  PIXOP_BlockOnResourceBusy = 0x31,
  PIXOP_SysMon = 0x32,
  PIXOP_LockVolume = 0x33,
  PIXOP_GPU = 0x34,
  PIXOP_DrawTessVertices = 0x100035,
  PIXOP_DrawITessVertices = 0x100036,
  PIXOP_GPUSync = 0x100037,
  PIXOP_Kickoff = 0x38,
  PIXOP_Synchronize = 0x39,
  PIXOP_BeginVertices = 0x10003A,
  PIXOP_SyncToVBlank = 0x10003B,
  PIXOP_GPUBegin = 0x10003C,
  PIXOP_PIXOverhead = 0x3D,
  PIXOP_PIXThreadPage0 = 0x3E,
  PIXOP_PIXThreadPage1 = 0x3F,
  PIXOP_PIXThreadPage2 = 0x40,
  PIXOP_PIXThreadPage3 = 0x41,
  PIXOP_PIXThreadPage4 = 0x42,
  PIXOP_PIXThreadPage5 = 0x43,
  PIXOP_PIXThreadedTiming = 0x44,
  PIXOP_ContextSwap = 0x45,
  PIXOP_InitialThreads = 0x46,
  PIXOP_XAMCommandBuffer = 0x100047,
  PIXOP_Truncated = 0x48,
  PIXOP_BeginIVertices = 0x100049,
  PIXOP_ThreadName = 0x4A,
  PIXOP_BatchCommands = 0x4B,
  PIXOP_TimeStamp = 0x4C,
  PIXOP_ImageBufferHeader = 0x4D,
  PIXOP_ImageHeaderName = 0x4E,
  PIXOP_EDRAMClear = 0x4F,
  PIXOP_InsertCallback = 0x100050,
  PIXOP_SetRenderTarget = 0x51,
  PIXOP_BeginTiling = 0x52,
  PIXOP_EndTiling = 0x53,
  PIXOP_BeginZPass = 0x54,
  PIXOP_EndZPass = 0x55,
  PIXOP_TileCount = 0x56,
  PIXOP_BlockOnCommandBufferRelease = 0x57,
  PIXOP_BlockOnCommandBufferLock = 0x58,
  PIXOP_BlockOnConstantBufferRelease = 0x59,
  PIXOP_BlockOnConstantBufferLock = 0x5A,
  PIXOP_LockConstantBuffer = 0x5B,
  PIXOP_OnePassTileCount = 0x5C,
};

/*  663 */
enum _PixGroupsType
{
  PIXGROUP_GraphicsTiming = 0x1,
  PIXGROUP_GraphicsCModel = 0x2,
  PIXGROUP_UserTiming = 0x4,
  PIXGROUP_UserOther = 0x8,
  PIXGROUP_XAudioTiming = 0x10,
};

/*  664 */
enum CP_FUNCTION
{
  CP_FUNCTION_NEVER = 0x0,
  CP_FUNCTION_LESS = 0x1,
  CP_FUNCTION_LEQUAL = 0x2,
  CP_FUNCTION_EQUAL = 0x3,
  CP_FUNCTION_NOTEQUAL = 0x4,
  CP_FUNCTION_GEQUAL = 0x5,
  CP_FUNCTION_GREATER = 0x6,
  CP_FUNCTION_ALWAYS = 0x7,
};

/*  665 */
enum $64712BCEC4A29B820D99E18BD91F781D
{
  WAVELDR_FILETYPE_WAVE = 0x0,
  WAVELDR_FILETYPE_AIFF = 0x1,
  WAVELDR_FILETYPE_COUNT = 0x2,
};

/*  666 */
enum _XAUDIOPIXCOUNTER
{
  XAUDIOPIXCOUNTER_ACTIVEVOICES_TOTAL = 0x0,
  XAUDIOPIXCOUNTER_ACTIVEVOICES_SUBMIX = 0x1,
  XAUDIOPIXCOUNTER_ACTIVEVOICES_SOURCE = 0x2,
  XAUDIOPIXCOUNTER_XMA_ACTIVEVOICES = 0x3,
  XAUDIOPIXCOUNTER_XMA_SAMPLESREADY = 0x4,
  XAUDIOPIXCOUNTER_XMA_SAMPLESUSED = 0x5,
  XAUDIOPIXCOUNTER_PCM_ACTIVEVOICES = 0x6,
  XAUDIOPIXCOUNTER_COUNT = 0x7,
};

/*  667 */
enum _XAUDIOPIXEVENT
{
  XAUDIOPIXEVENT_ENGINE_PROCESS = 0x0,
  XAUDIOPIXEVENT_VOICE_START = 0x1,
  XAUDIOPIXEVENT_VOICE_STOP = 0x2,
  XAUDIOPIXEVENT_VOICE_PROCESS = 0x3,
};

/*  668 */
enum CP_CONST_ID
{
  CP_CONST_ID_ALU = 0x0,
  CP_CONST_ID_FETCH = 0x1,
  CP_CONST_ID_BOOLEAN = 0x2,
  CP_CONST_ID_LOOP = 0x3,
  CP_CONST_ID_REGISTER = 0x4,
};

/*  669 */
enum CP_CODE_ID
{
  CP_CODE_ID_VERTEX = 0x0,
  CP_CODE_ID_PIXEL = 0x1,
  CP_CODE_ID_SHARED = 0x2,
};

/*  670 */
enum D3D::LoopPart
{
  eLoopCount = 0x0,
  eLoopStart = 0x1,
  eLoopIncrement = 0x2,
};

/*  671 */
enum XAUDIOSRCALGORITHM
{
  XAUDIOSRCALGORITHM_LINEAR = 0x0,
  XAUDIOSRCALGORITHM_NATIVE = 0x1,
  XAUDIOSRCALGORITHM_DOUBLE = 0x2,
  XAUDIOSRCALGORITHM_LINEARVECTOR = 0x3,
  XAUDIOSRCALGORITHM_NATIVEVECTOR = 0x4,
  XAUDIOSRCALGORITHM_DOUBLEVECTOR = 0x5,
  XAUDIOSRCALGORITHM_COUNT = 0x6,
};

/*  672 */
enum XAUDIOSRCCHANNELCOUNT
{
  XAUDIOSRCCHANNELCOUNT_N = 0x0,
  XAUDIOSRCCHANNELCOUNT_1 = 0x1,
  XAUDIOSRCCHANNELCOUNT_2 = 0x2,
  XAUDIOSRCCHANNELCOUNT_4 = 0x3,
  XAUDIOSRCCHANNELCOUNT_6 = 0x4,
  XAUDIOSRCCHANNELCOUNT_COUNT = 0x5,
};

/*  673 */
enum _PixFacility
{
  PIXFAC_Default = 0x0,
  PIXFAC_Audio = 0x1,
};

/*  674 */
enum D3D::TFetchField
{
  eTFUnnormalizedTextureCoords = 0x0,
  eTFFetchValidOnly = 0x1,
  eTFMagFilter = 0x2,
  eTFMinFilter = 0x3,
  eTFMipFilter = 0x4,
  eTFAnisoFilter = 0x5,
  eTFVolMagFilter = 0x6,
  eTFVolMinFilter = 0x7,
  eTFUseComputedLOD = 0x8,
  eTFUseRegisterLOD = 0x9,
  eTFUseRegisterGradients = 0xA,
  eTFLODBias = 0xB,
  eTFOffsetX = 0xC,
  eTFOffsetY = 0xD,
  eTFOffsetZ = 0xE,
};

/*  675 */
enum XAUDIO::XMA_PLAYBACK_CREATE
{
  XMA_PLAYBACK_CREATE_DEFER_CONTEXT_ALLOCATION = 0x1,
};

/*  676 */
enum XAUDIO::XMA_PLAYBACK_ERROR
{
  XMA_PLAYBACK_ERROR_NONE = 0x0,
  XMA_PLAYBACK_ERROR_WRITE_BUFFER_INVALID = 0x1,
  XMA_PLAYBACK_ERROR_INSUFFICIENT_WRITE_BUFFER_SPACE = 0x2,
  XMA_PLAYBACK_ERROR_READ_BUFFER_INVALID = 0x4,
  XMA_PLAYBACK_ERROR_FRAME_CROSSES_BOUNDARY_INTO_INVALID_READ_BUFFER = 0x8,
  XMA_PLAYBACK_ERROR_FRAME_CROSSES_BOTH_READ_BUFFER_BOUNDARIES = 0x10,
};

/*  677 */
enum $1A87D74BFE662B047D94CF001D085B2D
{
  SetSurfaces_SurfaceInfo = 0x0,
  SetSurfaces_DepthInfo = 0x1,
  SetSurfaces_Color0Info = 0x2,
  SetSurfaces_Color1Info = 0x3,
  SetSurfaces_Color2Info = 0x4,
  SetSurfaces_Color3Info = 0x5,
  SetSurfaces_AaConfig = 0x6,
  SetSurfaces_HiControl = 0x7,
  SetSurfaces_PixMetaData = 0x8,
};

/*  678 */
enum $1A13C4D8976CE27F5E9D4C7F8CC5AEE8
{
  SetViewport_XScale = 0x0,
  SetViewport_XOffset = 0x1,
  SetViewport_YScale = 0x2,
  SetViewport_YOffset = 0x3,
  SetViewport_ZScale = 0x4,
  SetViewport_ZOffset = 0x5,
};

/*  679 */
enum $C5724F5309C0FFFCCDF3CA0429972DCB
{
  SetShader_LoadShader = 0x0,
  SetShader_LoadAluConstant = 0x1,
};

/*  680 */
enum $822260D53B6865C5E1D2FA1924B26CDA
{
  SetClipRect_WindowScissorTL = 0x0,
  SetClipRect_WindowScissorBR = 0x1,
};

/*  681 */
enum XAUDIO::XMA_PLAYBACK_STATUS
{
  XMA_PLAYBACK_STATUS_LOCK_REQUESTED = 0x10000,
  XMA_PLAYBACK_STATUS_LOCK_OBTAINED = 0x20000,
  XMA_PLAYBACK_STATUS_HW_ALLOCATED = 0x40000,
};

/*  682 */
enum D3D::D3DQUERYSTATE
{
  QUERY_READYFORBEGIN = 0x1,
  QUERY_READYFOREND = 0x2,
};

/*  683 */
enum XAUDIO_POOL_TAG
{
  XAUDIO_POOL_TAG_OBJECT = 0x626F4158,
  XAUDIO_POOL_TAG_DATA = 0x61644158,
};

/*  684 */
enum SND_EQTYPE
{
  SND_EQTYPE_FIRST = 0x0,
  SND_EQTYPE_LOWPASS = 0x0,
  SND_EQTYPE_HIGHPASS = 0x1,
  SND_EQTYPE_LOWSHELF = 0x2,
  SND_EQTYPE_HIGHSHELF = 0x3,
  SND_EQTYPE_BELL = 0x4,
  SND_EQTYPE_LAST = 0x4,
  SND_EQTYPE_COUNT = 0x5,
  SND_EQTYPE_INVALID = 0x5,
};

/*  685 */
enum snd_stopsounds_arg_t
{
  SND_STOP_ALL = 0x0,
  SND_KEEP_REVERB = 0x1,
  SND_KEEP_MUSIC = 0x2,
  SND_KEEP_AMBIENT = 0x4,
  SND_KEEP_MUSIC_AND_AMBIENT = 0x6,
  SND_STOP_STREAMED = 0x8,
  SND_KEEP_CHANNEL_VOLUMES = 0x10,
};

/*  686 */
enum vehicleRideSlots_t
{
  VEHICLE_RIDESLOT_DRIVER = 0x0,
  VEHICLE_RIDESLOT_PASSENGER = 0x1,
  VEHICLE_RIDESLOT_GUNNER = 0x2,
  VEHICLE_RIDESLOTS_COUNT = 0x3,
};

/*  687 */
enum statIndex_t
{
  STAT_HEALTH = 0x0,
  STAT_DEAD_YAW = 0x1,
  STAT_MAX_HEALTH = 0x2,
  STAT_IDENT_CLIENT_NUM = 0x3,
  STAT_SPAWN_COUNT = 0x4,
  MAX_STATS = 0x5,
};

/*  688 */
enum $B87C0110D100A68234FECCEB9075A41E
{
  CON_CHANNEL_DONT_FILTER = 0x0,
  CON_CHANNEL_ERROR = 0x1,
  CON_CHANNEL_GAMENOTIFY = 0x2,
  CON_CHANNEL_BOLDGAME = 0x3,
  CON_CHANNEL_SUBTITLE = 0x4,
  CON_CHANNEL_OBITUARY = 0x5,
  CON_CHANNEL_LOGFILEONLY = 0x6,
  CON_CHANNEL_CONSOLEONLY = 0x7,
  CON_CHANNEL_GFX = 0x8,
  CON_CHANNEL_SOUND = 0x9,
  CON_CHANNEL_FILES = 0xA,
  CON_CHANNEL_DEVGUI = 0xB,
  CON_CHANNEL_PROFILE = 0xC,
  CON_CHANNEL_UI = 0xD,
  CON_CHANNEL_CLIENT = 0xE,
  CON_CHANNEL_SERVER = 0xF,
  CON_CHANNEL_SYSTEM = 0x10,
  CON_CHANNEL_PLAYERWEAP = 0x11,
  CON_CHANNEL_AI = 0x12,
  CON_CHANNEL_ANIM = 0x13,
  CON_CHANNEL_PHYS = 0x14,
  CON_CHANNEL_FX = 0x15,
  CON_CHANNEL_LEADERBOARDS = 0x16,
  CON_CHANNEL_PARSERSCRIPT = 0x17,
  CON_CHANNEL_SCRIPT = 0x18,
  CON_BUILTIN_CHANNEL_COUNT = 0x19,
};

/*  689 */
enum HELICOPTER_STAGES
{
  HELICOPTER_ONFIRE = 0x0,
  HELICOPTER_HEAVYSMOKE = 0x1,
  HELICOPTER_SMOKING = 0x2,
  HELICOPTER_FULLHEALTH = 0x3,
  NUM_HELICOPTERSTAGES = 0x4,
};

/*  690 */
enum OffhandSecondaryClass
{
  PLAYER_OFFHAND_SECONDARY_SMOKE = 0x0,
  PLAYER_OFFHAND_SECONDARY_FLASH = 0x1,
  PLAYER_OFFHAND_SECONDARIES_TOTAL = 0x2,
};

/*  691 */
enum ViewLockTypes
{
  PLAYERVIEWLOCK_NONE = 0x0,
  PLAYERVIEWLOCK_FULL = 0x1,
  PLAYERVIEWLOCK_WEAPONJITTER = 0x2,
  PLAYERVIEWLOCKCOUNT = 0x3,
};

/*  692 */
enum ActionSlotType
{
  ACTIONSLOTTYPE_DONOTHING = 0x0,
  ACTIONSLOTTYPE_SPECIFYWEAPON = 0x1,
  ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 0x2,
  ACTIONSLOTTYPE_NIGHTVISION = 0x3,
  ACTIONSLOTTYPECOUNT = 0x4,
};

/*  693 */
enum SND_CHANNELVOLPRIO
{
  SND_CHANNELVOLPRIO_NONE = 0x0,
  SND_CHANNELVOLPRIO_HOLDBREATH = 0x1,
  SND_CHANNELVOLPRIO_PAIN = 0x2,
  SND_CHANNELVOLPRIO_SHELLSHOCK = 0x3,
  SND_CHANNELVOLPRIO_COUNT = 0x4,
};

/*  694 */
enum $F30A3BC6F884ECE8219A5DF69053362A
{
  SND_TRACK_MUSIC = 0x0,
  SND_TRACK_AMBIENT_PRIMARY_0 = 0x1,
  SND_TRACK_AMBIENT_SECONDARY_0 = 0x2,
  SND_TRACK_AMBIENT_PRIMARY_1 = 0x3,
  SND_TRACK_AMBIENT_SECONDARY_1 = 0x4,
  SND_TRACK_COUNT = 0x5,
};

/*  695 */
enum $A78330E2A7CC42FFC027915DC51B9C84
{
  XASOURCE_MONO = 0x0,
  XASOURCE_STEREO = 0x1,
  XASOURCE_COUNT = 0x2,
};

/*  696 */
enum $D36A810CB4318BC18E5CAF7F82EC0FF8
{
  XAOUTPUT_STEREO = 0x0,
  XAOUTPUT_51 = 0x1,
  XAOUTPUT_COUNT = 0x2,
};

/*  697 */
enum SND_ENVEFFECTPRIO
{
  SND_ENVEFFECTPRIO_NONE = 0x0,
  SND_ENVEFFECTPRIO_LEVEL = 0x1,
  SND_ENVEFFECTPRIO_SHELLSHOCK = 0x2,
  SND_ENVEFFECTPRIO_COUNT = 0x3,
};

/*  698 */
enum SndFileLoadingState
{
  SFLS_UNLOADED = 0x0,
  SFLS_LOADING = 0x1,
  SFLS_LOADED = 0x2,
};

/*  699 */
enum snd_alias_system_t
{
  SASYS_UI = 0x0,
  SASYS_CGAME = 0x1,
  SASYS_GAME = 0x2,
  SASYS_COUNT = 0x3,
};

/*  700 */
enum snd_overlay_type_t
{
  SND_OVERLAY_NONE = 0x0,
  SND_OVERLAY_3D = 0x1,
  SND_OVERLAY_STREAM = 0x2,
  SND_OVERLAY_2D = 0x3,
};

/*  701 */
enum weaponAltModel_t
{
  WEAP_ALT_MODEL0 = 0x0,
  WEAP_ALT_MODEL1 = 0x1,
  WEAP_ALT_MODEL2 = 0x2,
  WEAP_ALT_MODEL3 = 0x3,
  WEAP_ALT_MODEL4 = 0x4,
  WEAP_ALT_MODEL5 = 0x5,
  WEAP_ALT_MODEL6 = 0x6,
  WEAP_ALT_MODEL7 = 0x7,
  WEAP_ALT_MODEL8 = 0x8,
  WEAP_ALT_MODEL9 = 0x9,
  WEAP_ALT_MODEL10 = 0xA,
  WEAP_ALT_MODEL11 = 0xB,
  WEAP_ALT_MODEL12 = 0xC,
  WEAP_ALT_MODEL13 = 0xD,
  WEAP_ALT_MODEL14 = 0xE,
  WEAP_ALT_MODEL15 = 0xF,
  NUM_WEAP_ALTMODELS = 0x10,
};

/*  702 */
enum $8E5D40D8F7B875829CEEA3035BFC2B09
{
  MAX_WEAP_NOTETRACK_TO_SOUND_MAPPINGS = 0x10,
};

/*  703 */
enum GamePadStick
{
  GPAD_INVALID = 0x0,
  GPAD_LX = 0x40000000,
  GPAD_LY = 0x40000001,
  GPAD_RX = 0x40000002,
  GPAD_RY = 0x40000003,
};

/*  704 */
enum hintType_t
{
  HINT_NONE = 0x0,
  HINT_NOICON = 0x1,
  HINT_ACTIVATE = 0x2,
  HINT_HEALTH = 0x3,
  HINT_FRIENDLY = 0x4,
  FIRST_WEAPON_HINT = 0x5,
  LAST_WEAPON_HINT = 0x84,
  HINT_NUM_HINTS = 0x85,
};

/*  705 */
enum netsrc_t
{
  NS_CLIENT1 = 0x0,
  NS_CLIENT2 = 0x1,
  NS_CLIENT3 = 0x2,
  NS_CLIENT4 = 0x3,
  NS_SERVER = 0x4,
  NS_MAXCLIENTS = 0x4,
  NS_PACKET = 0x5,
};

/*  706 */
enum hitLocation_t
{
  HITLOC_NONE = 0x0,
  HITLOC_HELMET = 0x1,
  HITLOC_HEAD = 0x2,
  HITLOC_NECK = 0x3,
  HITLOC_TORSO_UPR = 0x4,
  HITLOC_TORSO_LWR = 0x5,
  HITLOC_R_ARM_UPR = 0x6,
  HITLOC_L_ARM_UPR = 0x7,
  HITLOC_R_ARM_LWR = 0x8,
  HITLOC_L_ARM_LWR = 0x9,
  HITLOC_R_HAND = 0xA,
  HITLOC_L_HAND = 0xB,
  HITLOC_R_LEG_UPR = 0xC,
  HITLOC_L_LEG_UPR = 0xD,
  HITLOC_R_LEG_LWR = 0xE,
  HITLOC_L_LEG_LWR = 0xF,
  HITLOC_R_FOOT = 0x10,
  HITLOC_L_FOOT = 0x11,
  HITLOC_GUN = 0x12,
  HITLOC_NUM = 0x13,
};

/*  707 */
enum $EEFB6B9224E02F3F92C050B1A347CB32
{
  IMGF_MIPMAPS = 0x1,
  IMGF_ALLOWPICMIP = 0x2,
  IMGF_CHARACTERMIP = 0x4,
  IMGF_LIGHTMAP = 0x8,
  IMGF_CLAMP_S = 0x10,
  IMGF_CLAMP_T = 0x20,
  IMGF_HEIGHTMAP = 0x40,
  IMGF_DELAYLOAD = 0x80,
  IMGF_NOOPT = 0x100,
  IMGF_SCREENDEPTH = 0x200,
  IMGF_TEXTURENAME = 0x400,
  IMGF_SHEET_KEEP_FLAGS = 0x1,
};

/*  708 */
enum aistateEnum_t
{
  AISTATE_COMBAT = 0x0,
  MAX_AISTATES = 0x1,
};

/*  709 */
enum MaterialTechniqueType
{
  TECHNIQUE_DEPTH_PREPASS = 0x0,
  TECHNIQUE_BUILD_FLOAT_Z = 0x1,
  TECHNIQUE_BUILD_SHADOWMAP_DEPTH = 0x2,
  TECHNIQUE_BUILD_SHADOWMAP_COLOR = 0x3,
  TECHNIQUE_UNLIT = 0x4,
  TECHNIQUE_EMISSIVE = 0x5,
  TECHNIQUE_EMISSIVE_SHADOW = 0x6,
  TECHNIQUE_LIT_BEGIN = 0x7,
  TECHNIQUE_LIT = 0x7,
  TECHNIQUE_LIT_SUN = 0x8,
  TECHNIQUE_LIT_SUN_SHADOW = 0x9,
  TECHNIQUE_LIT_SPOT = 0xA,
  TECHNIQUE_LIT_SPOT_SHADOW = 0xB,
  TECHNIQUE_LIT_OMNI = 0xC,
  TECHNIQUE_LIT_OMNI_SHADOW = 0xD,
  TECHNIQUE_LIT_END = 0xE,
  TECHNIQUE_LIGHT_SPOT = 0xE,
  TECHNIQUE_LIGHT_OMNI = 0xF,
  TECHNIQUE_LIGHT_SPOT_SHADOW = 0x10,
  TECHNIQUE_FAKELIGHT_NORMAL = 0x11,
  TECHNIQUE_FAKELIGHT_VIEW = 0x12,
  TECHNIQUE_SUNLIGHT_PREVIEW = 0x13,
  TECHNIQUE_CASE_TEXTURE = 0x14,
  TECHNIQUE_WIREFRAME_SOLID = 0x15,
  TECHNIQUE_WIREFRAME_SHADED = 0x16,
  TECHNIQUE_SHADOWCOOKIE_CASTER = 0x17,
  TECHNIQUE_SHADOWCOOKIE_RECEIVER = 0x18,
  TECHNIQUE_DEBUG_BUMPMAP = 0x19,
  TECHNIQUE_COUNT = 0x1A,
  TECHNIQUE_TOTAL_COUNT = 0x1B,
  TECHNIQUE_NONE = 0x1C,
};

/*  710 */
enum scriptAnimMoveTypes_t
{
  ANIM_MT_UNUSED = 0x0,
  ANIM_MT_IDLE = 0x1,
  ANIM_MT_IDLECR = 0x2,
  ANIM_MT_IDLEPRONE = 0x3,
  ANIM_MT_WALK = 0x4,
  ANIM_MT_WALKBK = 0x5,
  ANIM_MT_WALKCR = 0x6,
  ANIM_MT_WALKCRBK = 0x7,
  ANIM_MT_WALKPRONE = 0x8,
  ANIM_MT_WALKPRONEBK = 0x9,
  ANIM_MT_RUN = 0xA,
  ANIM_MT_RUNBK = 0xB,
  ANIM_MT_RUNCR = 0xC,
  ANIM_MT_RUNCRBK = 0xD,
  ANIM_MT_TURNRIGHT = 0xE,
  ANIM_MT_TURNLEFT = 0xF,
  ANIM_MT_TURNRIGHTCR = 0x10,
  ANIM_MT_TURNLEFTCR = 0x11,
  ANIM_MT_CLIMBUP = 0x12,
  ANIM_MT_CLIMBDOWN = 0x13,
  ANIM_MT_SPRINT = 0x14,
  ANIM_MT_MANTLE_ROOT = 0x15,
  ANIM_MT_MANTLE_UP_57 = 0x16,
  ANIM_MT_MANTLE_UP_51 = 0x17,
  ANIM_MT_MANTLE_UP_45 = 0x18,
  ANIM_MT_MANTLE_UP_39 = 0x19,
  ANIM_MT_MANTLE_UP_33 = 0x1A,
  ANIM_MT_MANTLE_UP_27 = 0x1B,
  ANIM_MT_MANTLE_UP_21 = 0x1C,
  ANIM_MT_MANTLE_OVER_HIGH = 0x1D,
  ANIM_MT_MANTLE_OVER_MID = 0x1E,
  ANIM_MT_MANTLE_OVER_LOW = 0x1F,
  ANIM_MT_FLINCH_FORWARD = 0x20,
  ANIM_MT_FLINCH_BACKWARD = 0x21,
  ANIM_MT_FLINCH_LEFT = 0x22,
  ANIM_MT_FLINCH_RIGHT = 0x23,
  ANIM_MT_STUMBLE_FORWARD = 0x24,
  ANIM_MT_STUMBLE_BACKWARD = 0x25,
  ANIM_MT_STUMBLE_WALK_FORWARD = 0x26,
  ANIM_MT_STUMBLE_WALK_BACKWARD = 0x27,
  ANIM_MT_STUMBLE_CROUCH_FORWARD = 0x28,
  ANIM_MT_STUMBLE_CROUCH_BACKWARD = 0x29,
  ANIM_MT_STUMBLE_SPRINT_FORWARD = 0x2A,
  NUM_ANIM_MOVETYPES = 0x2B,
};

/*  711 */
enum scriptAnimEventTypes_t
{
  ANIM_ET_PAIN = 0x0,
  ANIM_ET_DEATH = 0x1,
  ANIM_ET_FIREWEAPON = 0x2,
  ANIM_ET_JUMP = 0x3,
  ANIM_ET_JUMPBK = 0x4,
  ANIM_ET_LAND = 0x5,
  ANIM_ET_DROPWEAPON = 0x6,
  ANIM_ET_RAISEWEAPON = 0x7,
  ANIM_ET_CLIMB_MOUNT = 0x8,
  ANIM_ET_CLIMB_DISMOUNT = 0x9,
  ANIM_ET_RELOAD = 0xA,
  ANIM_ET_CROUCH_TO_PRONE = 0xB,
  ANIM_ET_PRONE_TO_CROUCH = 0xC,
  ANIM_ET_STAND_TO_CROUCH = 0xD,
  ANIM_ET_CROUCH_TO_STAND = 0xE,
  ANIM_ET_STAND_TO_PRONE = 0xF,
  ANIM_ET_PRONE_TO_STAND = 0x10,
  ANIM_ET_MELEEATTACK = 0x11,
  ANIM_ET_KNIFE_MELEE = 0x12,
  ANIM_ET_KNIFE_MELEE_CHARGE = 0x13,
  ANIM_ET_SHELLSHOCK = 0x14,
  NUM_ANIM_EVENTTYPES = 0x15,
};

/*  712 */
enum $6BF759869E8734A4AFD4E30B8A93307D
{
  VAR_UNDEFINED = 0x0,
  VAR_BEGIN_REF = 0x1,
  VAR_POINTER = 0x1,
  VAR_STRING = 0x2,
  VAR_ISTRING = 0x3,
  VAR_VECTOR = 0x4,
  VAR_END_REF = 0x5,
  VAR_FLOAT = 0x5,
  VAR_INTEGER = 0x6,
  VAR_CODEPOS = 0x7,
  VAR_PRECODEPOS = 0x8,
  VAR_FUNCTION = 0x9,
  VAR_STACK = 0xA,
  VAR_ANIMATION = 0xB,
  VAR_DEVELOPER_CODEPOS = 0xC,
  VAR_INCLUDE_CODEPOS = 0xD,
  VAR_THREAD = 0xE,
  VAR_NOTIFY_THREAD = 0xF,
  VAR_TIME_THREAD = 0x10,
  VAR_CHILD_THREAD = 0x11,
  VAR_OBJECT = 0x12,
  VAR_DEAD_ENTITY = 0x13,
  VAR_ENTITY = 0x14,
  VAR_ARRAY = 0x15,
  VAR_DEAD_THREAD = 0x16,
  VAR_COUNT = 0x17,
  VAR_THREAD_LIST = 0x18,
  VAR_ENDON_LIST = 0x19,
};

/*  713 */
enum $45D1A2ED01BA9DAF9AFAE6399ED18ED1
{
  SAVE_SEGMENT_START = 0x0,
  SAVE_SEGMENT_WEAPONS = 0x1,
  SAVE_SEGMENT_MAIN = 0x2,
  SAVE_SEGMENT_NORMAL = 0x3,
  SAVE_SEGMENT_SCRIPT = 0x4,
  SAVE_SEGMENT_ANIMTREE = 0x5,
  SAVE_SEGMENT_SOUND = 0x6,
  SAVE_SEGMENT_POST_SOUND = 0x7,
  SAVE_SEGMENT_COUNT = 0x8,
  SAVE_SEGMENT_NONE = 0xFFFFFFFF,
};

/*  714 */
enum scriptAnimConditions_t
{
  ANIM_COND_PLAYERANIMTYPE = 0x0,
  ANIM_COND_WEAPONCLASS = 0x1,
  ANIM_COND_MOUNTED = 0x2,
  ANIM_COND_MOVETYPE = 0x3,
  ANIM_COND_UNDERHAND = 0x4,
  ANIM_COND_CROUCHING = 0x5,
  ANIM_COND_FIRING = 0x6,
  ANIM_COND_WEAPON_POSITION = 0x7,
  ANIM_COND_STRAFING = 0x8,
  ANIM_COND_PERK = 0x9,
  NUM_ANIM_CONDITIONS = 0xA,
};

/*  715 */
enum $15454EDC65404665873E2A95C6F44F70
{
  FIRST_OBJECT = 0xE,
  FIRST_CLEARABLE_OBJECT = 0x12,
  LAST_NONENTITY_OBJECT = 0x12,
  FIRST_ENTITY_OBJECT = 0x14,
  FIRST_NONFIELD_OBJECT = 0x15,
  FIRST_DEAD_OBJECT = 0x16,
};

/*  716 */
enum $311C2E81E808B4767FB41A9C011CB4D0
{
  MARK_MODEL_TYPE_WORLD_BRUSH = 0x0,
  MARK_MODEL_TYPE_WORLD_MODEL = 0x40,
  MARK_MODEL_TYPE_ENT_BRUSH = 0x80,
  MARK_MODEL_TYPE_ENT_MODEL = 0xC0,
  MARK_MODEL_TYPE_MASK = 0xC0,
  MARK_MODEL_SURF_MASK = 0x3F,
};

/*  717 */
enum $48CB5FF48600BABB00A6CDA6817AC61F
{
  FS_LOOK_IN_MAIN = 0x1,
  FS_LOOK_IN_DEV = 0x2,
  FS_LOOK_IN_TEMP = 0x4,
  FS_LOOK_IN_RAW = 0x8,
  FS_LOOK_IN_RAWSHARED = 0x10,
  FS_LOOK_IN_DEVRAW = 0x20,
  FS_LOOK_IN_ALL = 0x3F,
};

/*  718 */
enum $600C5C55DA623EC1BA27D4F06AFBFC7E
{
  CONTROL_ANGLES_BACK_LOW = 0x0,
  CONTROL_ANGLES_BACK_MID = 0x1,
  CONTROL_ANGLES_BACK_UP = 0x2,
  CONTROL_ANGLES_NECK = 0x3,
  CONTROL_ANGLES_HEAD = 0x4,
  CONTROL_ANGLES_PELVIS = 0x5,
  CONTROL_ANGLES_COUNT = 0x6,
};

/*  719 */
enum GfxLightType
{
  GFX_LIGHT_TYPE_NONE = 0x0,
  GFX_LIGHT_TYPE_DIR = 0x1,
  GFX_LIGHT_TYPE_SPOT = 0x2,
  GFX_LIGHT_TYPE_OMNI = 0x3,
  GFX_LIGHT_TYPE_COUNT = 0x4,
  GFX_LIGHT_TYPE_DIR_SHADOWMAP = 0x4,
  GFX_LIGHT_TYPE_SPOT_SHADOWMAP = 0x5,
  GFX_LIGHT_TYPE_OMNI_SHADOWMAP = 0x6,
  GFX_LIGHT_TYPE_COUNT_WITH_SHADOWMAP_VERSIONS = 0x7,
};

/*  720 */
enum snd_alias_type_t
{
  SAT_UNKNOWN = 0x0,
  SAT_LOADED = 0x1,
  SAT_STREAMED = 0x2,
  SAT_PRIMED = 0x3,
  SAT_COUNT = 0x4,
};

/*  721 */
enum $281899ECFC445037A6FDF23043927723
{
  qfalse = 0x0,
  qtrue = 0x1,
};

/*  722 */
enum $8CDC5D218EB02082E5C3D8DB6F595260
{
  CS_GAME_VERSION = 0x2,
  CS_MESSAGE = 0x3,
  CS_SCORES1 = 0x4,
  CS_SCORES2 = 0x5,
  CS_CULLDIST = 0x6,
  CS_SUNLIGHT = 0x7,
  CS_SUNDIR = 0x8,
  CS_CLANINFO = 0x9,
  CS_CLANINFO_LAST = 0x21,
  CS_FOGVARS = 0x22,
  CS_MOTD = 0x23,
  CS_GAMEENDTIME = 0x24,
  CS_MAPCENTER = 0x25,
  CS_VOTE_TIME = 0x26,
  CS_VOTE_STRING = 0x27,
  CS_VOTE_YES = 0x28,
  CS_VOTE_NO = 0x29,
  CS_VOTE_MAPNAME = 0x2A,
  CS_VOTE_GAMETYPE = 0x2B,
  CS_MULTI_MAPWINNER = 0x2C,
  CS_CODINFO = 0x2D,
  CS_CODINFO_LAST = 0xAC,
  CS_CODINFO_VALUE = 0xAD,
  CS_CODINFO_VALUE_LAST = 0x12C,
  CS_ENEMY_CROSSHAIR = 0x12D,
  CS_XNADDRS = 0x12E,
  CS_XNADDRS_LAST = 0x145,
  CS_NATTYPES = 0x146,
  CS_NATTYPES_LAST = 0x15D,
  CS_XUIDS = 0x15E,
  CS_XUIDS_LAST = 0x175,
  CS_SESSIONNONCE = 0x176,
  CS_USE_TRIG_STRINGS = 0x177,
  CS_USE_TRIG_STRINGS_LAST = 0x196,
  CS_LOCALIZED_STRINGS = 0x197,
  CS_LOCALIZED_STRINGS_LAST = 0x296,
  CS_CASE_INSENSITIVE_BEGIN = 0x297,
  CS_AMBIENT = 0x297,
  CS_RUMBLES = 0x298,
  CS_RUMBLE_LAST = 0x2B7,
  CS_NORTHYAW = 0x2B8,
  CS_MINIMAP = 0x2B9,
  CS_VISIONSET_NAKED = 0x2BA,
  CS_VISIONSET_NIGHT = 0x2BB,
  CS_LOC_SEL_MTLS = 0x2BC,
  CS_LOC_SEL_MTLS_LAST = 0x2BE,
  CS_MODELS = 0x2BF,
  CS_MODELS_LAST = 0x4BE,
  CS_SOUNDALIASES = 0x4BF,
  CS_SOUNDALIASES_LAST = 0x5BE,
  CS_EFFECT_NAMES = 0x5BF,
  CS_EFFECT_NAMES_LAST = 0x622,
  CS_EFFECT_TAGS = 0x623,
  CS_EFFECT_TAGS_LAST = 0x722,
  CS_SHELLSHOCKS = 0x723,
  CS_SHELLSHOCKS_LAST = 0x732,
  CS_SCRIPT_MENUS = 0x733,
  CS_SCRIPT_MENUS_LAST = 0x752,
  CS_SERVER_MATERIALS = 0x753,
  CS_SERVER_MATERIALS_LAST = 0x852,
  CS_WEAPONFILES = 0x853,
  CS_STATUS_ICONS = 0x854,
  CS_STATUS_ICONS_LAST = 0x85B,
  CS_HEAD_ICONS = 0x85C,
  CS_HEAD_ICONS_LAST = 0x86A,
  CS_TAGS = 0x86B,
  CS_TAGS_LAST = 0x88A,
  CS_ITEMS = 0x88B,
  CS_MAX = 0x88C,
};

/*  723 */
enum errorParm_t
{
  ERR_FATAL = 0x0,
  ERR_DROP = 0x1,
  ERR_SERVERDISCONNECT = 0x2,
  ERR_DISCONNECT = 0x3,
  ERR_SCRIPT = 0x4,
  ERR_SCRIPT_DROP = 0x5,
  ERR_LOCALIZATION = 0x6,
  ERR_MAPLOADERRORSUMMARY = 0x7,
};

/*  724 */
enum TrisType
{
  TRIS_TYPE_LAYERED = 0x0,
  TRIS_TYPE_SIMPLE = 0x1,
  TRIS_TYPE_COUNT = 0x2,
};

/*  725 */
enum perksEnum
{
  PERK_JAMRADAR = 0x0,
  PERK_ACCURACY = 0x1,
  PERK_FASTRELOAD = 0x2,
  PERK_RATEOFFIRE = 0x3,
  PERK_EXTRABREATH = 0x4,
  PERK_EXTRABP = 0x5,
  PERK_GRENADEDEATH = 0x6,
  PERK_PISTOLDEATH = 0x7,
  PERK_QUIETMOVE = 0x8,
  PERK_PARABOLIC = 0x9,
  PERK_LONGERSPRINT = 0xA,
  PERK_DETECTEXPLOSIVE = 0xB,
  PERK_EXPLOSIVEDMG = 0xC,
  PERK_EXPOSEENEMY = 0xD,
  PERK_BULLETDMG = 0xE,
  PERK_EXTRAAMMO = 0xF,
  PERK_TWOPRIMARIES = 0x10,
  PERK_ARMORVEST = 0x11,
  PERK_FRAGGRENADE = 0x12,
  PERK_SPECIALGRENADE = 0x13,
  PERK_COUNT = 0x14,
  PERK_UNKNOWN = 0x14,
};

/*  726 */
enum $B50D99F124CB73833B440B95295B0D23
{
  DOBJ_MAX_PARTS = 0x80,
  DOBJ_MAX_PART_BITS = 0x4,
  MAX_LODS = 0x4,
};

/*  727 */
enum keyNum_t
{
  K_NONE = 0x0,
  K_FIRSTGAMEPADBUTTON_RANGE_1 = 0x1,
  K_BUTTON_A = 0x1,
  K_BUTTON_B = 0x2,
  K_BUTTON_X = 0x3,
  K_BUTTON_Y = 0x4,
  K_BUTTON_LSHLDR = 0x5,
  K_BUTTON_RSHLDR = 0x6,
  K_LASTGAMEPADBUTTON_RANGE_1 = 0x6,
  K_TAB = 0x9,
  K_ENTER = 0xD,
  K_FIRSTGAMEPADBUTTON_RANGE_2 = 0xE,
  K_BUTTON_START = 0xE,
  K_BUTTON_BACK = 0xF,
  K_BUTTON_LSTICK = 0x10,
  K_BUTTON_RSTICK = 0x11,
  K_BUTTON_LTRIG = 0x12,
  K_BUTTON_RTRIG = 0x13,
  K_DPAD_UP = 0x14,
  K_FIRSTDPAD = 0x14,
  K_DPAD_DOWN = 0x15,
  K_DPAD_LEFT = 0x16,
  K_DPAD_RIGHT = 0x17,
  K_LASTDPAD = 0x17,
  K_LASTGAMEPADBUTTON_RANGE_2 = 0x17,
  K_ESCAPE = 0x1B,
  K_FIRSTGAMEPADBUTTON_RANGE_3 = 0x1C,
  K_APAD_UP = 0x1C,
  K_FIRSTAPAD = 0x1C,
  K_APAD_DOWN = 0x1D,
  K_APAD_LEFT = 0x1E,
  K_APAD_RIGHT = 0x1F,
  K_LASTAPAD = 0x1F,
  K_LASTGAMEPADBUTTON_RANGE_3 = 0x1F,
  K_SPACE = 0x20,
  K_BACKSPACE = 0x7F,
  K_ASCII_FIRST = 0x80,
  K_ASCII_181 = 0x80,
  K_ASCII_191 = 0x81,
  K_ASCII_223 = 0x82,
  K_ASCII_224 = 0x83,
  K_ASCII_225 = 0x84,
  K_ASCII_228 = 0x85,
  K_ASCII_229 = 0x86,
  K_ASCII_230 = 0x87,
  K_ASCII_231 = 0x88,
  K_ASCII_232 = 0x89,
  K_ASCII_233 = 0x8A,
  K_ASCII_236 = 0x8B,
  K_ASCII_241 = 0x8C,
  K_ASCII_242 = 0x8D,
  K_ASCII_243 = 0x8E,
  K_ASCII_246 = 0x8F,
  K_ASCII_248 = 0x90,
  K_ASCII_249 = 0x91,
  K_ASCII_250 = 0x92,
  K_ASCII_252 = 0x93,
  K_END_ASCII_CHARS = 0x94,
  K_COMMAND = 0x96,
  K_CAPSLOCK = 0x97,
  K_POWER = 0x98,
  K_PAUSE = 0x99,
  K_UPARROW = 0x9A,
  K_DOWNARROW = 0x9B,
  K_LEFTARROW = 0x9C,
  K_RIGHTARROW = 0x9D,
  K_ALT = 0x9E,
  K_CTRL = 0x9F,
  K_SHIFT = 0xA0,
  K_INS = 0xA1,
  K_DEL = 0xA2,
  K_PGDN = 0xA3,
  K_PGUP = 0xA4,
  K_HOME = 0xA5,
  K_END = 0xA6,
  K_F1 = 0xA7,
  K_F2 = 0xA8,
  K_F3 = 0xA9,
  K_F4 = 0xAA,
  K_F5 = 0xAB,
  K_F6 = 0xAC,
  K_F7 = 0xAD,
  K_F8 = 0xAE,
  K_F9 = 0xAF,
  K_F10 = 0xB0,
  K_F11 = 0xB1,
  K_F12 = 0xB2,
  K_F13 = 0xB3,
  K_F14 = 0xB4,
  K_F15 = 0xB5,
  K_KP_HOME = 0xB6,
  K_KP_UPARROW = 0xB7,
  K_KP_PGUP = 0xB8,
  K_KP_LEFTARROW = 0xB9,
  K_KP_5 = 0xBA,
  K_KP_RIGHTARROW = 0xBB,
  K_KP_END = 0xBC,
  K_KP_DOWNARROW = 0xBD,
  K_KP_PGDN = 0xBE,
  K_KP_ENTER = 0xBF,
  K_KP_INS = 0xC0,
  K_KP_DEL = 0xC1,
  K_KP_SLASH = 0xC2,
  K_KP_MINUS = 0xC3,
  K_KP_PLUS = 0xC4,
  K_KP_NUMLOCK = 0xC5,
  K_KP_STAR = 0xC6,
  K_KP_EQUALS = 0xC7,
  K_MOUSE1 = 0xC8,
  K_MOUSE2 = 0xC9,
  K_MOUSE3 = 0xCA,
  K_MOUSE4 = 0xCB,
  K_MOUSE5 = 0xCC,
  K_MWHEELDOWN = 0xCD,
  K_MWHEELUP = 0xCE,
  K_AUX1 = 0xCF,
  K_AUX2 = 0xD0,
  K_AUX3 = 0xD1,
  K_AUX4 = 0xD2,
  K_AUX5 = 0xD3,
  K_AUX6 = 0xD4,
  K_AUX7 = 0xD5,
  K_AUX8 = 0xD6,
  K_AUX9 = 0xD7,
  K_AUX10 = 0xD8,
  K_AUX11 = 0xD9,
  K_AUX12 = 0xDA,
  K_AUX13 = 0xDB,
  K_AUX14 = 0xDC,
  K_AUX15 = 0xDD,
  K_AUX16 = 0xDE,
  K_LAST_KEY = 0xDF,
};

/*  728 */
enum $3A28824DCC635DED3FE44AEE09BF0D54
{
  FX_FLESHTYPE_BODY_NONFATAL = 0x0,
  FX_FLESHTYPE_BODY_FATAL = 0x1,
  FX_FLESHTYPE_HEAD_NONFATAL = 0x2,
  FX_FLESHTYPE_HEAD_FATAL = 0x3,
  FX_FLESHTYPE_COUNT = 0x4,
};

/*  729 */
enum XAssetType
{
  ASSET_TYPE_XMODELPIECES = 0x0,
  ASSET_TYPE_PHYSPRESET = 0x1,
  ASSET_TYPE_XANIMPARTS = 0x2,
  ASSET_TYPE_XMODEL = 0x3,
  ASSET_TYPE_MATERIAL = 0x4,
  ASSET_TYPE_PIXELSHADER = 0x5,
  ASSET_TYPE_TECHNIQUE_SET = 0x6,
  ASSET_TYPE_IMAGE = 0x7,
  ASSET_TYPE_SOUND = 0x8,
  ASSET_TYPE_SOUND_CURVE = 0x9,
  ASSET_TYPE_CLIPMAP = 0xA,
  ASSET_TYPE_CLIPMAP_PVS = 0xB,
  ASSET_TYPE_COMWORLD = 0xC,
  ASSET_TYPE_GAMEWORLD_SP = 0xD,
  ASSET_TYPE_GAMEWORLD_MP = 0xE,
  ASSET_TYPE_MAP_ENTS = 0xF,
  ASSET_TYPE_GFXWORLD = 0x10,
  ASSET_TYPE_LIGHT_DEF = 0x11,
  ASSET_TYPE_UI_MAP = 0x12,
  ASSET_TYPE_FONT = 0x13,
  ASSET_TYPE_MENULIST = 0x14,
  ASSET_TYPE_MENU = 0x15,
  ASSET_TYPE_LOCALIZE_ENTRY = 0x16,
  ASSET_TYPE_WEAPON = 0x17,
  ASSET_TYPE_SNDDRIVER_GLOBALS = 0x18,
  ASSET_TYPE_FX = 0x19,
  ASSET_TYPE_IMPACT_FX = 0x1A,
  ASSET_TYPE_AITYPE = 0x1B,
  ASSET_TYPE_MPTYPE = 0x1C,
  ASSET_TYPE_CHARACTER = 0x1D,
  ASSET_TYPE_XMODELALIAS = 0x1E,
  ASSET_TYPE_RAWFILE = 0x1F,
  ASSET_TYPE_STRINGTABLE = 0x20,
  ASSET_TYPE_COUNT = 0x21,
  ASSET_TYPE_STRING = 0x21,
  ASSET_TYPE_ASSETLIST = 0x22,
};

/*  730 */
enum CriticalSection
{
  CRITSECT_CONSOLE = 0x0,
  CRITSECT_DEBUG_SOCKET = 0x1,
  CRITSECT_COM_ERROR = 0x2,
  CRITSECT_STATMON = 0x3,
  CRITSECT_DVAR = 0x4,
  CRITSECT_SOUND_ALLOC = 0x5,
  CRITSECT_MEM_ALLOC0 = 0x6,
  CRITSECT_MEM_ALLOC1 = 0x7,
  CRITSECT_ALLOC_MARK = 0x8,
  CRITSECT_STREAMED_SOUND = 0x9,
  CRITSECT_FAKELAG = 0xA,
  CRITSECT_CLIENT_MESSAGE = 0xB,
  CRITSECT_CLIENT_CMD = 0xC,
  CRITSECT_DOBJ_ALLOC = 0xD,
  CRITSECT_START_SERVER = 0xE,
  CRITSECT_XANIM_ALLOC = 0xF,
  CRITSECT_KEY_BINDINGS = 0x10,
  CRITSECT_FX_VIS = 0x11,
  CRITSECT_SERVER_MESSAGE = 0x12,
  CRITSECT_SCRIPT_STRING = 0x13,
  CRITSECT_PHYSICS = 0x14,
  CRITSECT_LIVE = 0x15,
  CRITSECT_AUDIO_PHYSICS = 0x16,
  CRITSECT_CINEMATIC = 0x17,
  CRITSECT_FX_ALLOC = 0x18,
  CRITSECT_COUNT = 0x19,
};

/*  731 */
enum weapAnimFiles_t
{
  WEAP_ANIM_ROOT = 0x0,
  WEAP_ANIM_IDLE = 0x1,
  WEAP_ANIM_EMPTY_IDLE = 0x2,
  WEAP_ANIM_FIRE = 0x3,
  WEAP_ANIM_HOLD_FIRE = 0x4,
  WEAP_ANIM_LASTSHOT = 0x5,
  WEAP_ANIM_RECHAMBER = 0x6,
  WEAP_ANIM_MELEE = 0x7,
  WEAP_ANIM_MELEE_CHARGE = 0x8,
  WEAP_ANIM_RELOAD = 0x9,
  WEAP_ANIM_RELOAD_EMPTY = 0xA,
  WEAP_ANIM_RELOAD_START = 0xB,
  WEAP_ANIM_RELOAD_END = 0xC,
  WEAP_ANIM_RAISE = 0xD,
  WEAP_ANIM_FIRST_RAISE = 0xE,
  WEAP_ANIM_DROP = 0xF,
  WEAP_ANIM_ALT_RAISE = 0x10,
  WEAP_ANIM_ALT_DROP = 0x11,
  WEAP_ANIM_QUICK_RAISE = 0x12,
  WEAP_ANIM_QUICK_DROP = 0x13,
  WEAP_ANIM_EMPTY_RAISE = 0x14,
  WEAP_ANIM_EMPTY_DROP = 0x15,
  WEAP_ANIM_SPRINT_IN = 0x16,
  WEAP_ANIM_SPRINT_LOOP = 0x17,
  WEAP_ANIM_SPRINT_OUT = 0x18,
  WEAP_ANIM_DETONATE = 0x19,
  WEAP_ANIM_NIGHTVISION_WEAR = 0x1A,
  WEAP_ANIM_NIGHTVISION_REMOVE = 0x1B,
  WEAP_ANIM_ADS_FIRE = 0x1C,
  WEAP_ANIM_ADS_LASTSHOT = 0x1D,
  WEAP_ANIM_ADS_RECHAMBER = 0x1E,
  WEAP_ANIM_ADS_UP = 0x1F,
  WEAP_ANIM_ADS_DOWN = 0x20,
  NUM_WEAP_ANIMS = 0x21,
};

/*  732 */
enum $74EAE330A6976F9098913848AC507000
{
  DRAW_SURF_CAMERA_LIT_BEGIN = 0x0,
  DRAW_SURF_BSP_CAMERA_LIT = 0x0,
  DRAW_SURF_SMODEL_CAMERA_LIT = 0x1,
  DRAW_SURF_ENT_CAMERA_LIT = 0x2,
  DRAW_SURF_CAMERA_LIT_END = 0x3,
  DRAW_SURF_CAMERA_DECAL_BEGIN = 0x3,
  DRAW_SURF_BSP_CAMERA_DECAL = 0x3,
  DRAW_SURF_SMODEL_CAMERA_DECAL = 0x4,
  DRAW_SURF_ENT_CAMERA_DECAL = 0x5,
  DRAW_SURF_FX_CAMERA_LIT = 0x6,
  DRAW_SURF_FX_CAMERA_LIT_AUTO = 0x7,
  DRAW_SURF_FX_CAMERA_LIT_DECAL = 0x8,
  DRAW_SURF_CAMERA_DECAL_END = 0x9,
  DRAW_SURF_CAMERA_EMISSIVE_BEGIN = 0x9,
  DRAW_SURF_BSP_CAMERA_EMISSIVE = 0x9,
  DRAW_SURF_SMODEL_CAMERA_EMISSIVE = 0xA,
  DRAW_SURF_ENT_CAMERA_EMISSIVE = 0xB,
  DRAW_SURF_FX_CAMERA_EMISSIVE = 0xC,
  DRAW_SURF_FX_CAMERA_EMISSIVE_AUTO = 0xD,
  DRAW_SURF_FX_CAMERA_EMISSIVE_DECAL = 0xE,
  DRAW_SURF_CAMERA_EMISSIVE_END = 0xF,
  DRAW_SURF_SUNSHADOW_0_BEGIN = 0xF,
  DRAW_SURF_BSP_SUNSHADOW_0 = 0xF,
  DRAW_SURF_SMODEL_SUNSHADOW_0 = 0x10,
  DRAW_SURF_ENT_SUNSHADOW_0 = 0x11,
  DRAW_SURF_SUNSHADOW_1_BEGIN = 0x12,
  DRAW_SURF_BSP_SUNSHADOW_1 = 0x12,
  DRAW_SURF_SMODEL_SUNSHADOW_1 = 0x13,
  DRAW_SURF_ENT_SUNSHADOW_1 = 0x14,
  DRAW_SURF_SPOTSHADOW_0_BEGIN = 0x15,
  DRAW_SURF_BSP_SPOTSHADOW_0 = 0x15,
  DRAW_SURF_SMODEL_SPOTSHADOW_0 = 0x16,
  DRAW_SURF_ENT_SPOTSHADOW_0 = 0x17,
  DRAW_SURF_SPOTSHADOW_1_BEGIN = 0x18,
  DRAW_SURF_BSP_SPOTSHADOW_1 = 0x18,
  DRAW_SURF_SMODEL_SPOTSHADOW_1 = 0x19,
  DRAW_SURF_ENT_SPOTSHADOW_1 = 0x1A,
  DRAW_SURF_SPOTSHADOW_2_BEGIN = 0x1B,
  DRAW_SURF_BSP_SPOTSHADOW_2 = 0x1B,
  DRAW_SURF_SMODEL_SPOTSHADOW_2 = 0x1C,
  DRAW_SURF_ENT_SPOTSHADOW_2 = 0x1D,
  DRAW_SURF_SPOTSHADOW_3_BEGIN = 0x1E,
  DRAW_SURF_BSP_SPOTSHADOW_3 = 0x1E,
  DRAW_SURF_SMODEL_SPOTSHADOW_3 = 0x1F,
  DRAW_SURF_ENT_SPOTSHADOW_3 = 0x20,
  DRAW_SURF_SHADOW_COOKIE = 0x21,
  DRAW_SURF_TYPE_COUNT = 0x22,
};

/*  733 */
enum entity_event_t
{
  EV_NONE = 0x0,
  EV_FOLIAGE_SOUND = 0x1,
  EV_STOP_WEAPON_SOUND = 0x2,
  EV_SOUND_ALIAS = 0x3,
  EV_SOUND_ALIAS_AS_MASTER = 0x4,
  EV_STOPSOUNDS = 0x5,
  EV_STANCE_FORCE_STAND = 0x6,
  EV_STANCE_FORCE_CROUCH = 0x7,
  EV_STANCE_FORCE_PRONE = 0x8,
  EV_ITEM_PICKUP = 0x9,
  EV_AMMO_PICKUP = 0xA,
  EV_NOAMMO = 0xB,
  EV_EMPTYCLIP = 0xC,
  EV_EMPTY_OFFHAND = 0xD,
  EV_RESET_ADS = 0xE,
  EV_RELOAD = 0xF,
  EV_RELOAD_FROM_EMPTY = 0x10,
  EV_RELOAD_START = 0x11,
  EV_RELOAD_END = 0x12,
  EV_RELOAD_START_NOTIFY = 0x13,
  EV_RELOAD_ADDAMMO = 0x14,
  EV_RAISE_WEAPON = 0x15,
  EV_FIRST_RAISE_WEAPON = 0x16,
  EV_PUTAWAY_WEAPON = 0x17,
  EV_WEAPON_ALT = 0x18,
  EV_PULLBACK_WEAPON = 0x19,
  EV_FIRE_WEAPON = 0x1A,
  EV_FIRE_WEAPON_LASTSHOT = 0x1B,
  EV_RECHAMBER_WEAPON = 0x1C,
  EV_EJECT_BRASS = 0x1D,
  EV_MELEE_SWIPE = 0x1E,
  EV_FIRE_MELEE = 0x1F,
  EV_PREP_OFFHAND = 0x20,
  EV_USE_OFFHAND = 0x21,
  EV_SWITCH_OFFHAND = 0x22,
  EV_MELEE_HIT = 0x23,
  EV_MELEE_MISS = 0x24,
  EV_MELEE_BLOOD = 0x25,
  EV_FIRE_WEAPON_MG42 = 0x26,
  EV_FIRE_QUADBARREL_1 = 0x27,
  EV_FIRE_QUADBARREL_2 = 0x28,
  EV_BULLET_HIT = 0x29,
  EV_BULLET_HIT_CLIENT_SMALL = 0x2A,
  EV_BULLET_HIT_CLIENT_LARGE = 0x2B,
  EV_GRENADE_BOUNCE = 0x2C,
  EV_GRENADE_EXPLODE = 0x2D,
  EV_ROCKET_EXPLODE = 0x2E,
  EV_ROCKET_EXPLODE_NOMARKS = 0x2F,
  EV_FLASHBANG_EXPLODE = 0x30,
  EV_CUSTOM_EXPLODE = 0x31,
  EV_CUSTOM_EXPLODE_NOMARKS = 0x32,
  EV_CHANGE_TO_DUD = 0x33,
  EV_DUD_EXPLODE = 0x34,
  EV_DUD_IMPACT = 0x35,
  EV_BULLET = 0x36,
  EV_PLAY_FX = 0x37,
  EV_PLAY_FX_ON_TAG = 0x38,
  EV_PHYS_EXPLOSION_SPHERE = 0x39,
  EV_PHYS_EXPLOSION_CYLINDER = 0x3A,
  EV_PHYS_EXPLOSION_JOLT = 0x3B,
  EV_PHYS_JITTER = 0x3C,
  EV_EARTHQUAKE = 0x3D,
  EV_GRENADE_SUICIDE = 0x3E,
  EV_DETONATE = 0x3F,
  EV_NIGHTVISION_WEAR = 0x40,
  EV_NIGHTVISION_REMOVE = 0x41,
  EV_PLAY_RUMBLE_ON_ENT = 0x42,
  EV_PLAY_RUMBLE_ON_POS = 0x43,
  EV_PLAY_RUMBLELOOP_ON_ENT = 0x44,
  EV_PLAY_RUMBLELOOP_ON_POS = 0x45,
  EV_STOP_RUMBLE = 0x46,
  EV_STOP_ALL_RUMBLES = 0x47,
  EV_OBITUARY = 0x48,
  EV_FOOTSTEP_SPRINT = 0x49,
  EV_FOOTSTEP_RUN = 0x4A,
  EV_FOOTSTEP_WALK = 0x4B,
  EV_FOOTSTEP_PRONE = 0x4C,
  EV_JUMP = 0x4D,
  EV_LANDING_FIRST = 0x4E,
  EV_LANDING_LAST = 0x6A,
  EV_LANDING_PAIN_FIRST = 0x6B,
  EV_LANDING_PAIN_LAST = 0x87,
  EV_MAX_EVENTS = 0x88,
};

/*  734 */
enum $92B73D884407279708436C3299392994
{
  STATMON_FPS = 0x0,
  STATMON_FILEACCESS = 0x1,
  STATMON_SOUNDCPU = 0x2,
  STATMON_MAXEFFECTS = 0x3,
  STATMON_SNAPSHOTENTS = 0x4,
  STATMON_TRIS = 0x5,
  STATMON_SERVERFPS = 0x6,
  STATMON_COUNT = 0x7,
};

/*  735 */
enum $BAE4F9C2C15BE31554776E17A667731C
{
  CAMERA_REGION_LIT = 0x0,
  CAMERA_REGION_DECAL = 0x1,
  CAMERA_REGION_EMISSIVE = 0x2,
  CAMERA_REGION_COUNT = 0x3,
  CAMERA_REGION_NONE = 0x3,
};

/*  736 */
enum $CD431739C99DBA52A835C79D542FF174
{
  THREAD_CONTEXT_MAIN = 0x0,
  THREAD_CONTEXT_BACKEND = 0x1,
  THREAD_CONTEXT_WORKER0 = 0x2,
  THREAD_CONTEXT_WORKER1 = 0x3,
  THREAD_CONTEXT_WORKER2 = 0x4,
  THREAD_CONTEXT_SERVER = 0x5,
  THREAD_CONTEXT_TRACE_COUNT = 0x6,
  THREAD_CONTEXT_TRACE_LAST = 0x5,
  THREAD_CONTEXT_DATABASE = 0x6,
  THREAD_CONTEXT_STREAM = 0x7,
  THREAD_CONTEXT_SNDSTREAMPACKETCALLBACK = 0x8,
  THREAD_CONTEXT_COUNT = 0x9,
};

/*  737 */
enum weapPositionAnimNum_t
{
  WEAPPOS_HIP_TO_ADS = 0x0,
  WEAPPOS_ADS_TO_HIP = 0x1,
  NUM_WEAPPOS_ANIMS = 0x2,
};

/*  738 */
enum WeapAccuracyType
{
  WEAP_ACCURACY_AI_VS_AI = 0x0,
  WEAP_ACCURACY_AI_VS_PLAYER = 0x1,
  WEAP_ACCURACY_COUNT = 0x2,
};

/*  739 */
enum meansOfDeath_t
{
  MOD_UNKNOWN = 0x0,
  MOD_PISTOL_BULLET = 0x1,
  MOD_RIFLE_BULLET = 0x2,
  MOD_GRENADE = 0x3,
  MOD_GRENADE_SPLASH = 0x4,
  MOD_PROJECTILE = 0x5,
  MOD_PROJECTILE_SPLASH = 0x6,
  MOD_MELEE = 0x7,
  MOD_HEAD_SHOT = 0x8,
  MOD_CRUSH = 0x9,
  MOD_TELEFRAG = 0xA,
  MOD_FALLING = 0xB,
  MOD_SUICIDE = 0xC,
  MOD_TRIGGER_HURT = 0xD,
  MOD_EXPLOSIVE = 0xE,
  MOD_IMPACT = 0xF,
  MOD_NUM = 0x10,
};

/*  740 */
enum trType_t
{
  TR_STATIONARY = 0x0,
  TR_INTERPOLATE = 0x1,
  TR_LINEAR = 0x2,
  TR_LINEAR_STOP = 0x3,
  TR_SINE = 0x4,
  TR_GRAVITY = 0x5,
  TR_ACCELERATE = 0x6,
  TR_DECELERATE = 0x7,
  TR_PHYSICS = 0x8,
  TR_RAGDOLL = 0x9,
};

/*  741 */
enum team_t
{
  TEAM_FREE = 0x0,
  TEAM_AXIS = 0x1,
  TEAM_ALLIES = 0x2,
  TEAM_SPECTATOR = 0x3,
  TEAM_NUM_TEAMS = 0x4,
};

/*  742 */
enum StanceState
{
  CL_STANCE_STAND = 0x0,
  CL_STANCE_CROUCH = 0x1,
  CL_STANCE_PRONE = 0x2,
};

/*  743 */
enum guidedMissileType_t
{
  MISSILE_GUIDANCE_NONE = 0x0,
  MISSILE_GUIDANCE_SIDEWINDER = 0x1,
  MISSILE_GUIDANCE_HELLFIRE = 0x2,
  MISSILE_GUIDANCE_JAVELIN = 0x3,
  MISSILE_GUIDANCE_COUNT = 0x4,
};

/*  744 */
enum OffhandClass
{
  OFFHAND_CLASS_NONE = 0x0,
  OFFHAND_CLASS_FRAG_GRENADE = 0x1,
  OFFHAND_CLASS_SMOKE_GRENADE = 0x2,
  OFFHAND_CLASS_FLASH_GRENADE = 0x3,
  OFFHAND_CLASS_COUNT = 0x4,
};

/*  745 */
enum weapProjExposion_t
{
  WEAPPROJEXP_GRENADE = 0x0,
  WEAPPROJEXP_ROCKET = 0x1,
  WEAPPROJEXP_FLASHBANG = 0x2,
  WEAPPROJEXP_NONE = 0x3,
  WEAPPROJEXP_DUD = 0x4,
  WEAPPROJEXP_SMOKE = 0x5,
  WEAPPROJEXP_HEAVY = 0x6,
  WEAPPROJEXP_NUM = 0x7,
};

/*  746 */
enum activeReticleType_t
{
  VEH_ACTIVE_RETICLE_NONE = 0x0,
  VEH_ACTIVE_RETICLE_PIP_ON_A_STICK = 0x1,
  VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND = 0x2,
  VEH_ACTIVE_RETICLE_COUNT = 0x3,
};

/*  747 */
enum connstate_t
{
  CA_DISCONNECTED = 0x0,
  CA_CINEMATIC = 0x1,
  CA_LOGO = 0x2,
  CA_CONNECTING = 0x3,
  CA_CHALLENGING = 0x4,
  CA_CONNECTED = 0x5,
  CA_SENDINGSTATS = 0x6,
  CA_LOADING = 0x7,
  CA_PRIMED = 0x8,
  CA_ACTIVE = 0x9,
};

/*  748 */
enum ammoCounterClipType_t
{
  AMMO_COUNTER_CLIP_NONE = 0x0,
  AMMO_COUNTER_CLIP_MAGAZINE = 0x1,
  AMMO_COUNTER_CLIP_SHORTMAGAZINE = 0x2,
  AMMO_COUNTER_CLIP_SHOTGUN = 0x3,
  AMMO_COUNTER_CLIP_ROCKET = 0x4,
  AMMO_COUNTER_CLIP_BELTFED = 0x5,
  AMMO_COUNTER_CLIP_ALTWEAPON = 0x6,
  AMMO_COUNTER_CLIP_COUNT = 0x7,
};

/*  749 */
enum PenetrateType
{
  PENETRATE_TYPE_NONE = 0x0,
  PENETRATE_TYPE_SMALL = 0x1,
  PENETRATE_TYPE_MEDIUM = 0x2,
  PENETRATE_TYPE_LARGE = 0x3,
  PENETRATE_TYPE_COUNT = 0x4,
};

/*  750 */
enum ImpactType
{
  IMPACT_TYPE_NONE = 0x0,
  IMPACT_TYPE_BULLET_SMALL = 0x1,
  IMPACT_TYPE_BULLET_LARGE = 0x2,
  IMPACT_TYPE_BULLET_AP = 0x3,
  IMPACT_TYPE_SHOTGUN = 0x4,
  IMPACT_TYPE_GRENADE_BOUNCE = 0x5,
  IMPACT_TYPE_GRENADE_EXPLODE = 0x6,
  IMPACT_TYPE_ROCKET_EXPLODE = 0x7,
  IMPACT_TYPE_PROJECTILE_DUD = 0x8,
  IMPACT_TYPE_COUNT = 0x9,
};

/*  751 */
enum netadrtype_t
{
  NA_BOT = 0x0,
  NA_BAD = 0x1,
  NA_LOOPBACK = 0x2,
  NA_BROADCAST = 0x3,
  NA_IP = 0x4,
};

/*  752 */
enum objectiveState_t
{
  OBJST_EMPTY = 0x0,
  OBJST_ACTIVE = 0x1,
  OBJST_INVISIBLE = 0x2,
  OBJST_DONE = 0x3,
  OBJST_CURRENT = 0x4,
  OBJST_FAILED = 0x5,
  OBJST_NUMSTATES = 0x6,
};

/*  753 */
enum weapInventoryType_t
{
  WEAPINVENTORY_PRIMARY = 0x0,
  WEAPINVENTORY_OFFHAND = 0x1,
  WEAPINVENTORY_ITEM = 0x2,
  WEAPINVENTORY_ALTMODE = 0x3,
  WEAPINVENTORYCOUNT = 0x4,
};

/*  754 */
enum weapType_t
{
  WEAPTYPE_BULLET = 0x0,
  WEAPTYPE_GRENADE = 0x1,
  WEAPTYPE_PROJECTILE = 0x2,
  WEAPTYPE_BINOCULARS = 0x3,
  WEAPTYPE_NUM = 0x4,
};

/*  755 */
enum WeapOverlayInteface_t
{
  WEAPOVERLAYINTERFACE_NONE = 0x0,
  WEAPOVERLAYINTERFACE_JAVELIN = 0x1,
  WEAPOVERLAYINTERFACE_TURRETSCOPE = 0x2,
  WEAPOVERLAYINTERFACECOUNT = 0x3,
};

/*  756 */
enum weapFireType_t
{
  WEAPON_FIRETYPE_FULLAUTO = 0x0,
  WEAPON_FIRETYPE_SINGLESHOT = 0x1,
  WEAPON_FIRETYPE_BURSTFIRE2 = 0x2,
  WEAPON_FIRETYPE_BURSTFIRE3 = 0x3,
  WEAPON_FIRETYPE_BURSTFIRE4 = 0x4,
  WEAPON_FIRETYPECOUNT = 0x5,
};

/*  757 */
enum he_type_t
{
  HE_TYPE_FREE = 0x0,
  HE_TYPE_TEXT = 0x1,
  HE_TYPE_VALUE = 0x2,
  HE_TYPE_PLAYERNAME = 0x3,
  HE_TYPE_MAPNAME = 0x4,
  HE_TYPE_GAMETYPE = 0x5,
  HE_TYPE_MATERIAL = 0x6,
  HE_TYPE_TIMER_DOWN = 0x7,
  HE_TYPE_TIMER_UP = 0x8,
  HE_TYPE_TENTHS_TIMER_DOWN = 0x9,
  HE_TYPE_TENTHS_TIMER_UP = 0xA,
  HE_TYPE_CLOCK_DOWN = 0xB,
  HE_TYPE_CLOCK_UP = 0xC,
  HE_TYPE_WAYPOINT = 0xD,
  HE_TYPE_COUNT = 0xE,
};

/*  758 */
enum WeapStickinessType
{
  WEAPSTICKINESS_NONE = 0x0,
  WEAPSTICKINESS_ALL = 0x1,
  WEAPSTICKINESS_GROUND = 0x2,
  WEAPSTICKINESS_GROUND_WITH_YAW = 0x3,
  WEAPSTICKINESS_COUNT = 0x4,
};

/*  759 */
enum weapClass_t
{
  WEAPCLASS_RIFLE = 0x0,
  WEAPCLASS_MG = 0x1,
  WEAPCLASS_SMG = 0x2,
  WEAPCLASS_SPREAD = 0x3,
  WEAPCLASS_PISTOL = 0x4,
  WEAPCLASS_GRENADE = 0x5,
  WEAPCLASS_ROCKETLAUNCHER = 0x6,
  WEAPCLASS_TURRET = 0x7,
  WEAPCLASS_NON_PLAYER = 0x8,
  WEAPCLASS_ITEM = 0x9,
  WEAPCLASS_NUM = 0xA,
};

/*  760 */
enum TraceHitType
{
  TRACE_HITTYPE_NONE = 0x0,
  TRACE_HITTYPE_ENTITY = 0x1,
  TRACE_HITTYPE_DYNENT_MODEL = 0x2,
  TRACE_HITTYPE_DYNENT_BRUSH = 0x3,
};

/*  761 */
enum weapOverlayReticle_t
{
  WEAPOVERLAYRETICLE_NONE = 0x0,
  WEAPOVERLAYRETICLE_CROSSHAIR = 0x1,
  WEAPOVERLAYRETICLE_NUM = 0x2,
};

/*  762 */
enum weapStance_t
{
  WEAPSTANCE_STAND = 0x0,
  WEAPSTANCE_DUCK = 0x1,
  WEAPSTANCE_PRONE = 0x2,
  WEAPSTANCE_NUM = 0x3,
};

/*  763 */
enum weaponIconRatioType_t
{
  WEAPON_ICON_RATIO_1TO1 = 0x0,
  WEAPON_ICON_RATIO_2TO1 = 0x1,
  WEAPON_ICON_RATIO_4TO1 = 0x2,
  WEAPON_ICON_RATIO_COUNT = 0x3,
};

/*  764 */
enum print_msg_dest_t
{
  CON_DEST_CONSOLE = 0x0,
  CON_DEST_MINICON = 0x1,
  CON_DEST_ERROR = 0x2,
  CON_DEST_GAME_FIRST = 0x3,
  CON_DEST_GAME1 = 0x3,
  CON_DEST_GAME2 = 0x4,
  CON_DEST_GAME3 = 0x5,
  CON_DEST_GAME4 = 0x6,
  CON_DEST_GAME_LAST = 0x6,
  CON_DEST_COUNT = 0x7,
};

/*  765 */
enum BodyState
{
  BS_DEAD = 0x0,
  BS_DOBJ_WAIT = 0x1,
  BS_VELOCITY_CAPTURE = 0x2,
  BS_TUNNEL_TEST = 0x3,
  BS_RUNNING = 0x4,
  BS_IDLE = 0x5,
  RAGDOLL_NUM_STATES = 0x6,
};

/*  766 */
enum PhysicsGeomType
{
  PHYS_GEOM_NONE = 0x0,
  PHYS_GEOM_BOX = 0x1,
  PHYS_GEOM_BRUSHMODEL = 0x2,
  PHYS_GEOM_BRUSH = 0x3,
  PHYS_GEOM_CYLINDER = 0x4,
  PHYS_GEOM_CAPSULE = 0x5,
  PHYS_GEOM_COUNT = 0x6,
};

/*  767 */
enum PhysWorld
{
  PHYS_WORLD_DYNENT = 0x0,
  PHYS_WORLD_FX = 0x1,
  PHYS_WORLD_RAGDOLL = 0x2,
  PHYS_WORLD_COUNT = 0x3,
};

/*  768 */
enum $6C9BFD317D127A29D3473B6C91CDCB7E
{
  MT_NODE_SIZE = 0x8,
};

/*  769 */
enum $2A76464B005670687E7C1CD2CA291F25
{
  MEMORY_NODE_BITS = 0x10,
  MEMORY_NODE_COUNT = 0x10000,
  MT_SIZE = 0x80000,
  REFSTRING_STRING_OFFSET = 0x4,
};

/*  770 */
enum $56445C427093D770B5D4AA1D7698CB1C
{
  STRINGLIST_SIZE = 0x4E20,
};

/*  771 */
enum JointType
{
  RAGDOLL_JOINT_NONE = 0x0,
  RAGDOLL_JOINT_HINGE = 0x1,
  RAGDOLL_JOINT_SWIVEL = 0x2,
};

/*  772 */
enum $55ED8AC5998C2D3DA8CF1B852A88E74D
{
  HUD_STANCE_STAND = 0x0,
  HUD_STANCE_CROUCH = 0x1,
  HUD_STANCE_PRONE = 0x2,
  HUD_STANCE_FLASH = 0x3,
  HUD_STANCE_NUM = 0x4,
};

/*  773 */
enum $9F542375BBDEAA431522D680B21CEDC0
{
  HUD_OBJ_SAME = 0x0,
  HUD_OBJ_NUM = 0x1,
};

/*  774 */
enum $A2DB58E5FE2ADE05F1A508C13866ADC2
{
  FRIEND_ICON = 0x0,
  FRIEND_CHAT_ICON = 0x1,
  FRIEND_ICON_NUM = 0x2,
};

/*  775 */
enum DemoType
{
  DEMO_TYPE_NONE = 0x0,
  DEMO_TYPE_CLIENT = 0x1,
  DEMO_TYPE_SERVER = 0x2,
};

/*  776 */
enum CubemapShot
{
  CUBEMAPSHOT_NONE = 0x0,
  CUBEMAPSHOT_RIGHT = 0x1,
  CUBEMAPSHOT_LEFT = 0x2,
  CUBEMAPSHOT_BACK = 0x3,
  CUBEMAPSHOT_FRONT = 0x4,
  CUBEMAPSHOT_UP = 0x5,
  CUBEMAPSHOT_DOWN = 0x6,
  CUBEMAPSHOT_COUNT = 0x7,
};

/*  777 */
enum ShockViewTypes
{
  SHELLSHOCK_VIEWTYPE_BLURRED = 0x0,
  SHELLSHOCK_VIEWTYPE_FLASHED = 0x1,
};

/*  778 */
enum itemType_t
{
  IT_BAD = 0x0,
  IT_WEAPON = 0x1,
};

/*  779 */
enum visionSetLerpStyle_t
{
  VISIONSETLERP_UNDEFINED = 0x0,
  VISIONSETLERP_NONE = 0x1,
  VISIONSETLERP_TO_LINEAR = 0x2,
  VISIONSETLERP_TO_SMOOTH = 0x3,
  VISIONSETLERP_BACKFORTH_LINEAR = 0x4,
  VISIONSETLERP_BACKFORTH_SMOOTH = 0x5,
};

/*  780 */
enum visionSetMode_t
{
  VISIONSETMODE_NAKED = 0x0,
  VISIONSETMODE_NIGHT = 0x1,
  VISIONSETMODECOUNT = 0x2,
};

/*  781 */
enum $15F7927B8F72CB40F6F99FAEBB69AFC2
{
  dxBodyFlagFiniteRotation = 0x1,
  dxBodyFlagFiniteRotationAxis = 0x2,
  dxBodyDisabled = 0x4,
  dxBodyNoGravity = 0x8,
  dxBodyAutoDisable = 0x10,
};

/*  782 */
enum $C8DC82A51A0B3C62546850887B6B5847
{
  dMaxUserClasses = 0x5,
};

/*  783 */
enum $4EB26F68A8E6E4927E38756AC12526DB
{
  dSphereClass = 0x0,
  dBoxClass = 0x1,
  dCCylinderClass = 0x2,
  dCylinderClass = 0x3,
  dPlaneClass = 0x4,
  dRayClass = 0x5,
  dGeomTransformClass = 0x6,
  dTriMeshClass = 0x7,
  dFirstSpaceClass = 0x8,
  dSimpleSpaceClass = 0x8,
  dHashSpaceClass = 0x9,
  dQuadTreeSpaceClass = 0xA,
  dLastSpaceClass = 0xA,
  dFirstUserClass = 0xB,
  dLastUserClass = 0xF,
  dGeomNumClasses = 0x10,
};

/*  784 */
enum $E326B487732BE8EB5AB27BA7C6F13BDF
{
  d_ERR_UNKNOWN = 0x0,
  d_ERR_IASSERT = 0x1,
  d_ERR_UASSERT = 0x2,
  d_ERR_LCP = 0x3,
};

/*  785 */
enum $E5F85BF791F996AC98973C7104606E90
{
  GEOM_DIRTY = 0x1,
  GEOM_AABB_BAD = 0x2,
  GEOM_PLACEABLE = 0x4,
  GEOM_ENABLED = 0x8,
  RAY_FIRSTCONTACT = 0x10000,
  RAY_BACKFACECULL = 0x20000,
  RAY_CLOSEST_HIT = 0x40000,
};

/*  786 */
enum $2993F0254A782AC689F523594890AFB9
{
  dJOINT_INGROUP = 0x1,
  dJOINT_REVERSE = 0x2,
  dJOINT_TWOBODIES = 0x4,
};

/*  787 */
enum $5329DA05E5A8A23583D87AAA256E5376
{
  dContactMu2 = 0x1,
  dContactFDir1 = 0x2,
  dContactBounce = 0x4,
  dContactSoftERP = 0x8,
  dContactSoftCFM = 0x10,
  dContactMotion1 = 0x20,
  dContactMotion2 = 0x40,
  dContactSlip1 = 0x80,
  dContactSlip2 = 0x100,
  dContactApprox0 = 0x0,
  dContactApprox1_1 = 0x1000,
  dContactApprox1_2 = 0x2000,
  dContactApprox1 = 0x3000,
};

/*  788 */
enum $28A33868B9AACC691D18577108CB8C93
{
  dJointTypeNone = 0x0,
  dJointTypeBall = 0x1,
  dJointTypeHinge = 0x2,
  dJointTypeSlider = 0x3,
  dJointTypeContact = 0x4,
  dJointTypeUniversal = 0x5,
  dJointTypeHinge2 = 0x6,
  dJointTypeFixed = 0x7,
  dJointTypeNull = 0x8,
  dJointTypeAMotor = 0x9,
};

/*  789 */
enum $4060660F9B75441D92F9B01F0EB251E9
{
  dParamLoStop = 0x0,
  dParamHiStop = 0x1,
  dParamVel = 0x2,
  dParamFMax = 0x3,
  dParamFudgeFactor = 0x4,
  dParamBounce = 0x5,
  dParamCFM = 0x6,
  dParamStopERP = 0x7,
  dParamStopCFM = 0x8,
  dParamSuspensionERP = 0x9,
  dParamSuspensionCFM = 0xA,
  dParamLoStop2 = 0x100,
  dParamHiStop2 = 0x101,
  dParamVel2 = 0x102,
  dParamFMax2 = 0x103,
  dParamFudgeFactor2 = 0x104,
  dParamBounce2 = 0x105,
  dParamCFM2 = 0x106,
  dParamStopERP2 = 0x107,
  dParamStopCFM2 = 0x108,
  dParamSuspensionERP2 = 0x109,
  dParamSuspensionCFM2 = 0x10A,
  dParamLoStop3 = 0x200,
  dParamHiStop3 = 0x201,
  dParamVel3 = 0x202,
  dParamFMax3 = 0x203,
  dParamFudgeFactor3 = 0x204,
  dParamBounce3 = 0x205,
  dParamCFM3 = 0x206,
  dParamStopERP3 = 0x207,
  dParamStopCFM3 = 0x208,
  dParamSuspensionERP3 = 0x209,
  dParamSuspensionCFM3 = 0x20A,
  dParamGroup = 0x100,
};

/*  790 */
enum $E9C5450848AF5B0E1ED3AF9C7EAA722B
{
  dAMotorUser = 0x0,
  dAMotorEuler = 0x1,
};

/*  791 */
enum physStuckState_t
{
  PHYS_OBJ_STATE_POSSIBLY_STUCK = 0x0,
  PHYS_OBJ_STATE_STUCK = 0x1,
  PHYS_OBJ_STATE_FREE = 0x2,
};

/*  792 */
enum $39C31954953DC0780268E0DB23FBED98
{
  FX_MARK_VISUALS_CLASS_MODEL_INDEX = 0x0,
  FX_MARK_VISUALS_CLASS_WORLD_INDEX = 0x1,
  FX_MARK_VISUALS_CLASS_COUNT = 0x2,
};

/*  793 */
enum $7C8B8C292E4C5EC841521618A6E64E01
{
  FX_ELEM_SPAWN_RELATIVE_TO_EFFECT = 0x2,
  FX_ELEM_SPAWN_FRUSTUM_CULL = 0x4,
  FX_ELEM_RUNNER_USES_RAND_ROT = 0x8,
  FX_ELEM_SPAWN_OFFSET_NONE = 0x0,
  FX_ELEM_SPAWN_OFFSET_SPHERE = 0x10,
  FX_ELEM_SPAWN_OFFSET_CYLINDER = 0x20,
  FX_ELEM_SPAWN_OFFSET_MASK = 0x30,
  FX_ELEM_RUN_RELATIVE_TO_WORLD = 0x0,
  FX_ELEM_RUN_RELATIVE_TO_SPAWN = 0x40,
  FX_ELEM_RUN_RELATIVE_TO_EFFECT = 0x80,
  FX_ELEM_RUN_RELATIVE_TO_OFFSET = 0xC0,
  FX_ELEM_RUN_MASK = 0xC0,
  FX_ELEM_USE_COLLISION = 0x100,
  FX_ELEM_DIE_ON_TOUCH = 0x200,
  FX_ELEM_DRAW_PAST_FOG = 0x400,
  FX_ELEM_DRAW_WITH_VIEWMODEL = 0x800,
  FX_ELEM_BLOCK_SIGHT = 0x1000,
  FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL = 0x1000000,
  FX_ELEM_HAS_VELOCITY_GRAPH_WORLD = 0x2000000,
  FX_ELEM_HAS_GRAVITY = 0x4000000,
  FX_ELEM_USE_MODEL_PHYSICS = 0x8000000,
  FX_ELEM_NONUNIFORM_SCALE = 0x10000000,
};

/*  794 */
enum $39199BFA0D60C62DCFD9209B26DED22C
{
  FX_ELEM_TYPE_SPRITE_BILLBOARD = 0x0,
  FX_ELEM_TYPE_SPRITE_ORIENTED = 0x1,
  FX_ELEM_TYPE_TAIL = 0x2,
  FX_ELEM_TYPE_TRAIL = 0x3,
  FX_ELEM_TYPE_CLOUD = 0x4,
  FX_ELEM_TYPE_MODEL = 0x5,
  FX_ELEM_TYPE_OMNI_LIGHT = 0x6,
  FX_ELEM_TYPE_SPOT_LIGHT = 0x7,
  FX_ELEM_TYPE_SOUND = 0x8,
  FX_ELEM_TYPE_DECAL = 0x9,
  FX_ELEM_TYPE_RUNNER = 0xA,
  FX_ELEM_TYPE_COUNT = 0xB,
  FX_ELEM_TYPE_LAST_SPRITE = 0x3,
  FX_ELEM_TYPE_LAST_DRAWN = 0x7,
};

/*  795 */
enum DynEntityDrawType
{
  DYNENT_DRAW_MODEL = 0x0,
  DYNENT_DRAW_BRUSH = 0x1,
  DYNENT_DRAW_COUNT = 0x2,
};

/*  796 */
enum $A408456487E1E37CB28D5FB8181927C5
{
  FX_ATLAS_START_FIXED = 0x0,
  FX_ATLAS_START_RANDOM = 0x1,
  FX_ATLAS_START_INDEXED = 0x2,
  FX_ATLAS_START_MASK = 0x3,
  FX_ATLAS_PLAY_OVER_LIFE = 0x4,
  FX_ATLAS_LOOP_ONLY_N_TIMES = 0x8,
};

/*  797 */
enum $5C7603243A829E5BC6BA7F928C72347C
{
  THREAD_VALUE_PROF_STACK = 0x0,
  THREAD_VALUE_VA = 0x1,
  THREAD_VALUE_COM_ERROR = 0x2,
  THREAD_VALUE_TRACE = 0x3,
  THREAD_VALUE_COUNT = 0x4,
};

/*  798 */
enum hudelem_update_t
{
  HUDELEM_UPDATE_ARCHIVAL = 0x1,
  HUDELEM_UPDATE_CURRENT = 0x2,
  HUDELEM_UPDATE_ARCHIVAL_AND_CURRENT = 0x3,
};

/*  799 */
enum DynEntityCollType
{
  DYNENT_COLL_CLIENT_FIRST = 0x0,
  DYNENT_COLL_CLIENT_MODEL = 0x0,
  DYNENT_COLL_CLIENT_BRUSH = 0x1,
  DYNENT_COLL_COUNT = 0x2,
};

/*  800 */
enum $3E40264DEA36A90C0882F99B0BCF0AEC
{
  GEOM_CLASS_BRUSHMODEL = 0xB,
  GEOM_CLASS_BRUSH = 0xC,
  GEOM_CLASS_CYLINDER = 0xD,
  GEOM_CLASS_CAPSULE = 0xE,
  GEOM_CLASS_WORLD = 0xF,
};

/*  801 */
enum clientConnected_t
{
  CON_DISCONNECTED = 0x0,
  CON_CONNECTING = 0x1,
  CON_CONNECTED = 0x2,
};

/*  802 */
enum sessionState_t
{
  SESS_STATE_PLAYING = 0x0,
  SESS_STATE_DEAD = 0x1,
  SESS_STATE_SPECTATOR = 0x2,
  SESS_STATE_INTERMISSION = 0x3,
};

/*  803 */
enum DynEntityType
{
  DYNENT_TYPE_INVALID = 0x0,
  DYNENT_TYPE_CLUTTER = 0x1,
  DYNENT_TYPE_DESTRUCT = 0x2,
  DYNENT_TYPE_COUNT = 0x3,
};

/*  804 */
enum MissileStage
{
  MISSILESTAGE_SOFTLAUNCH = 0x0,
  MISSILESTAGE_ASCENT = 0x1,
  MISSILESTAGE_DESCENT = 0x2,
};

/*  805 */
enum MissileFlightMode
{
  MISSILEFLIGHTMODE_TOP = 0x0,
  MISSILEFLIGHTMODE_DIRECT = 0x1,
};

/*  806 */
enum PolyOrientation
{
  POLY_COUNTERCLOCKWISE = 0x0,
  POLY_CLOCKWISE = 0x1,
  POLY_ERROR = 0x2,
};

/*  807 */
enum inflate_block_mode
{
  TYPE = 0x0,
  LENS = 0x1,
  STORED = 0x2,
  TABLE = 0x3,
  BTREE = 0x4,
  DTREE = 0x5,
  CODES = 0x6,
  DRY = 0x7,
  DONE = 0x8,
  BAD = 0x9,
};

/*  808 */
typedef inflate_block_mode inflate_mode;

/*  809 */
enum inflate_codes_mode
{
  START = 0x0,
  LEN = 0x1,
  LENEXT = 0x2,
  DIST = 0x3,
  DISTEXT = 0x4,
  COPY = 0x5,
  LIT = 0x6,
  WASH = 0x7,
  END = 0x8,
  BADCODE = 0x9,
};

/*  810 */
enum block_state
{
  need_more = 0x0,
  block_done = 0x1,
  finish_started = 0x2,
  finish_done = 0x3,
};

/*  811 */
enum clc_ops_e
{
  clc_move = 0x0,
  clc_moveNoDelta = 0x1,
  clc_clientCommand = 0x2,
  clc_EOF = 0x3,
};

/*  812 */
enum $8E94F5188F6AA384114B5456B3C8B3B5
{
  TEAM_TITLE_MEMBER = 0x0,
  TEAM_TITLE_ADMIN = 0x1,
  TEAM_TITLE_OWNER = 0x2,
  NUM_TEAM_TITLES = 0x3,
};

/*  813 */
enum $CAE44CAF372E5672080930BE8F394808
{
  LSP_UNKNOWNCOMMAND = 0x0,
  LSP_HELLO = 0x1,
  LSP_GETTEAMINFO = 0x2,
  LSP_CREATETEAM = 0x3,
  LSP_UPDATETEAM = 0x4,
  LSP_SEARCHFORTEAM = 0x5,
  LSP_TEAMPERMISSIONQUERY = 0x6,
  LSP_GETTEAMMEMBERS = 0x7,
  LSP_ADDTEAMMEMBER = 0x8,
  LSP_KICKTEAMMEMBER = 0x9,
  LSP_LEAVETEAM = 0xA,
  LSP_PROMOTEMEMBER = 0xB,
  LSP_DEMOTEMEMBER = 0xC,
  LSP_ASKTOJOINTEAM = 0xD,
  NUM_LSP_COMMANDS = 0xE,
};

/*  814 */
enum $B18BD998CA56E0ED7417ED5E171DE7B8
{
  TASK_GETTINGTEAMMEMBERSHIP = 0x1,
  TASK_GETTINGPLAYERPERMISSIONS = 0x2,
  TASK_GETTINGTEAMINFO = 0x3,
  NUM_TEAM_TASKS = 0x4,
};

/*  815 */
enum $85AF80701BA2D3112FA1DB3FAB5BE1F0
{
  STREAM_INDEX_SOUND_BEGIN = 0x0,
  STREAM_INDEX_SOUND_END = 0xD,
  STREAM_INDEX_HIGH_MIP = 0xD,
  STREAM_INDEX_END = 0xE,
};

/*  816 */
enum taskCompleteResults
{
  TASK_NOTCOMPLETE = 0x0,
  TASK_COMPLETE = 0x1,
  TASK_ERROR = 0x2,
};

/*  817 */
enum $AAD89BE9591609BD638DD0DE0E2C3C98
{
  TASK_GETTINGMOTD = 0x1,
  TASK_GETTINGPLAYLISTS = 0x2,
  TASK_READINGSTATS = 0x3,
  TASK_WRITINGSTATS = 0x4,
  NUM_SESSION_TASKS = 0x5,
};

/*  818 */
enum profileWriteState_t
{
  PROFILE_NO_WRITE = 0x0,
  PROFILE_WRITE_IF_CHANGED = 0x1,
};

/*  819 */
enum LbUICol
{
  LB_UICOL_RANK = 0x0,
  LB_UICOL_RANKICON = 0x1,
  LB_UICOL_RANKLEVEL = 0x2,
  LB_UICOL_GAMERTAG = 0x3,
  LB_UICOL_KILLS = 0x4,
  LB_UICOL_DEATHS = 0x5,
  LB_UICOL_KDRATIO = 0x6,
  LB_UICOL_KILLSTREAK = 0x7,
  LB_UICOL_WINS = 0x4,
  LB_UICOL_LOSSES = 0x5,
  LB_UICOL_WLRATIO = 0x6,
  LB_UICOL_WINSTREAK = 0x7,
  LB_UICOL_TOTALXP = 0x4,
  LB_UICOL_TIMEPLAYED = 0x5,
  LB_UICOL_ACCURACY = 0x4,
  LB_UICOL_HITS = 0x5,
  LB_UICOL_MISSES = 0x6,
};

/*  820 */
typedef $AAD89BE9591609BD638DD0DE0E2C3C98 $2AB31B93A7A837674E8A15891A63D0D0;

/*  821 */
enum LbType
{
  LB_KILLS = 0x0,
  LB_WINS = 0x1,
  LB_TOTALXP = 0x2,
  LB_ACCURACY = 0x3,
  LB_COUNT = 0x4,
  LB_WRITECOUNT = 0x4,
};

/*  822 */
enum LbStatEnum
{
  LB_STAT_KILLS = 0x0,
  LB_STAT_DEATHS = 0x1,
  LB_STAT_KILLSTREAK = 0x2,
  LB_STAT_KDRATIO = 0x3,
  LB_STAT_KILLSXP = 0x4,
  LB_STAT_WINS = 0x5,
  LB_STAT_LOSSES = 0x6,
  LB_STAT_WINSTREAK = 0x7,
  LB_STAT_WLRATIO = 0x8,
  LB_STAT_WINSXP = 0x9,
  LB_STAT_TOTALXP = 0xA,
  LB_STAT_TIMEPLAYED = 0xB,
  LB_STAT_HITS = 0xC,
  LB_STAT_MISSES = 0xD,
  LB_STAT_ACCURACY = 0xE,
  LB_STAT_ACCURACYXP = 0xF,
  LB_STAT_COUNT = 0x10,
};

/*  823 */
enum rankTableColumns_t
{
  MP_RANKTABLE_RANKID = 0x0,
  MP_RANKTABLE_RANK = 0x1,
  MP_RANKTABLE_MINXP = 0x2,
  MP_RANKTABLE_XPTONEXT = 0x3,
  MP_RANKTABLE_SHORTRANK = 0x4,
  MP_RANKTABLE_FULLRANK = 0x5,
  MP_RANKTABLE_ICON = 0x6,
  MP_RANKTABLE_MAXXP = 0x7,
  MP_RANKTABLE_WEAPUNLOCK = 0x8,
  MP_RANKTABLE_PERKUNLOCK = 0x9,
  MP_RANKTABLE_CHALLENGE = 0xA,
  MP_RANKTABLE_CAMO = 0xB,
  MP_RANKTABLE_ATTACHMENT = 0xC,
  MP_RANKTABLE_LEVEL = 0xD,
  MP_RANKTABLE_COUNT = 0xE,
};

/*  824 */
enum $A6342FAB94B84E94672868514A3886A9
{
  LOBBYSTAT_KILLS = 0x0,
  LOBBYSTAT_DIVIDER = 0x1,
  LOBBYSTAT_DEATHS = 0x2,
  LOBBYSTAT_COUNT = 0x3,
};

/*  825 */
enum DvarSetSource
{
  DVAR_SOURCE_INTERNAL = 0x0,
  DVAR_SOURCE_EXTERNAL = 0x1,
  DVAR_SOURCE_SCRIPT = 0x2,
};

/*  826 */
enum uiMenuCommand_t
{
  UIMENU_NONE = 0x0,
  UIMENU_MAIN = 0x1,
  UIMENU_INGAME = 0x2,
  UIMENU_PREGAME = 0x3,
  UIMENU_POSTGAME = 0x4,
  UIMENU_WM_QUICKMESSAGE = 0x5,
  UIMENU_SCRIPT_POPUP = 0x6,
  UIMENU_SCOREBOARD = 0x7,
  UIMENU_SPLITSCREENGAMESETUP = 0x8,
  UIMENU_SYSTEMLINKJOINGAME = 0x9,
  UIMENU_PARTY = 0xA,
  UIMENU_GAMELOBBY = 0xB,
  UIMENU_PRIVATELOBBY = 0xC,
};

/*  827 */
enum $1149248F0940ABA43439084777E4DFED
{
  PARTYSTATUS_EMPTY = 0x0,
  PARTYSTATUS_ZOMBIE = 0x1,
  PARTYSTATUS_ANONYMOUS = 0x2,
  PARTYSTATUS_PRESENT = 0x3,
  PARTYSTATUS_READY = 0x4,
};

/*  828 */
enum operationEnum
{
  OP_NOOP = 0x0,
  OP_RIGHTPAREN = 0x1,
  OP_MULTIPLY = 0x2,
  OP_DIVIDE = 0x3,
  OP_MODULUS = 0x4,
  OP_ADD = 0x5,
  OP_SUBTRACT = 0x6,
  OP_NOT = 0x7,
  OP_LESSTHAN = 0x8,
  OP_LESSTHANEQUALTO = 0x9,
  OP_GREATERTHAN = 0xA,
  OP_GREATERTHANEQUALTO = 0xB,
  OP_EQUALS = 0xC,
  OP_NOTEQUAL = 0xD,
  OP_AND = 0xE,
  OP_OR = 0xF,
  OP_LEFTPAREN = 0x10,
  OP_COMMA = 0x11,
  OP_BITWISEAND = 0x12,
  OP_BITWISEOR = 0x13,
  OP_BITWISENOT = 0x14,
  OP_BITSHIFTLEFT = 0x15,
  OP_BITSHIFTRIGHT = 0x16,
  OP_SIN = 0x17,
  OP_FIRSTFUNCTIONCALL = 0x17,
  OP_COS = 0x18,
  OP_MIN = 0x19,
  OP_MAX = 0x1A,
  OP_MILLISECONDS = 0x1B,
  OP_DVARINT = 0x1C,
  OP_DVARBOOL = 0x1D,
  OP_DVARFLOAT = 0x1E,
  OP_DVARSTRING = 0x1F,
  OP_STAT = 0x20,
  OP_UIACTIVE = 0x21,
  OP_FLASHBANGED = 0x22,
  OP_SCOPED = 0x23,
  OP_SCOREBOARDVISIBLE = 0x24,
  OP_INKILLCAM = 0x25,
  OP_PLAYERFIELD = 0x26,
  OP_SELECTINGLOCATION = 0x27,
  OP_TEAMFIELD = 0x28,
  OP_OTHERTEAMFIELD = 0x29,
  OP_MARINESFIELD = 0x2A,
  OP_OPFORFIELD = 0x2B,
  OP_MENUISOPEN = 0x2C,
  OP_WRITINGDATA = 0x2D,
  OP_INLOBBY = 0x2E,
  OP_INPRIVATEPARTY = 0x2F,
  OP_PRIVATEPARTYHOST = 0x30,
  OP_PRIVATEPARTYHOSTINLOBBY = 0x31,
  OP_ALONEINPARTY = 0x32,
  OP_ADSJAVELIN = 0x33,
  OP_WEAPLOCKBLINK = 0x34,
  OP_WEAPATTACKTOP = 0x35,
  OP_WEAPATTACKDIRECT = 0x36,
  OP_SECONDSASTIME = 0x37,
  OP_TABLELOOKUP = 0x38,
  OP_LOCALIZESTRING = 0x39,
  OP_LOCALVARINT = 0x3A,
  OP_LOCALVARBOOL = 0x3B,
  OP_LOCALVARFLOAT = 0x3C,
  OP_LOCALVARSTRING = 0x3D,
  OP_TIMELEFT = 0x3E,
  OP_SECONDSASCOUNTDOWN = 0x3F,
  OP_TOINT = 0x40,
  OP_TOSTRING = 0x41,
  OP_TOFLOAT = 0x42,
  OP_GAMETYPENAME = 0x43,
  OP_GAMETYPE = 0x44,
  OP_GAMETYPEDESCRIPTION = 0x45,
  OP_SCORE = 0x46,
  OP_FRIENDSONLINE = 0x47,
  OP_FOLLOWING = 0x48,
  OP_STATRANGEBITSSET = 0x49,
  NUM_OPERATORS = 0x4A,
};

/*  829 */
enum MemcardOperation
{
  MEMCARD_READ = 0x0,
  MEMCARD_WRITE = 0x1,
};

/*  830 */
enum $EDD38D6A57EF43793B1F773859FC039A
{
  FS_SEEK_CUR = 0x0,
  FS_SEEK_END = 0x1,
  FS_SEEK_SET = 0x2,
};

/*  831 */
enum $A31A830FF0232D5D84C3DC77469F0D70
{
  TASK_MEM_CARD_AVAILABLE = 0x1,
};

/*  832 */
enum msgLocErrType_t
{
  LOCMSG_SAFE = 0x0,
  LOCMSG_NOERR = 0x1,
};

/*  833 */
enum fsMode_t
{
  FS_READ = 0x0,
  FS_WRITE = 0x1,
  FS_APPEND = 0x2,
  FS_APPEND_SYNC = 0x3,
};

/*  834 */
enum sysEventType_t
{
  SE_NONE = 0x0,
  SE_KEY = 0x1,
  SE_CHAR = 0x2,
  SE_GAMEPAD_AXIS = 0x3,
  SE_CONSOLE = 0x4,
};

/*  835 */
enum $D558E26DCBB8F93B1745F38142012E4A
{
  TASK_FINDTITLESERVERS = 0x1,
  NUM_LSP_TASKS = 0x2,
};

/*  836 */
enum $B9E23A56E13B6CDB9B21E5BC61104BF3
{
  LSP_SUCCESS = 0x0,
  LSP_BADPROTOCOL = 0x1,
  LSP_ERR_AUTHFAILED = 0x2,
  LSP_ERR_TEAM_PERMISSIONFAILED = 0x3,
  LSP_ERR_TEAM_NAMETAKEN = 0x4,
  LSP_ERR_INVALIDPARAM = 0x5,
};

/*  837 */
enum playerStatsTableColumns_t
{
  MP_PLAYERSTATSTABLE_INDEX = 0x0,
  MP_PLAYERSTATSTABLE_NAME = 0x1,
  MP_PLAYERSTATSTABLE_COUNT = 0x2,
};

/*  838 */
enum $45E9EA399B36814E1398F4B80A5932AF
{
  TASK_QOSPROBE = 0x1,
  TASK_WRITESTATS = 0x2,
  TASK_WRITEACHIVEMENT = 0x3,
  TASK_BANDWIDTHTEST = 0x4,
  TASK_READSTATS = 0x5,
  TASK_STARTTEAMMATCH = 0x6,
  NUM_LIVE_TASKS = 0x7,
};

/*  839 */
enum LbFilter
{
  LB_FILTER_NONE = 0x0,
  LB_FILTER_FRIENDS = 0x1,
  LB_FILTER_COUNT = 0x2,
};

/*  840 */
enum $065B9D63BC3BA62D67B7891BC006BC0F
{
  IMAGE_TRACK_MISC = 0x0,
  IMAGE_TRACK_DEBUG = 0x1,
  IMAGE_TRACK_TEXTURENAME = 0x2,
  IMAGE_TRACK_UI = 0x3,
  IMAGE_TRACK_LIGHTMAP = 0x4,
  IMAGE_TRACK_LIGHT = 0x5,
  IMAGE_TRACK_FX = 0x6,
  IMAGE_TRACK_HUD = 0x7,
  IMAGE_TRACK_MODEL = 0x8,
  IMAGE_TRACK_WORLD = 0x9,
  IMAGE_TRACK_COUNT = 0xA,
};

/*  841 */
enum LbTaskEnum
{
  LB_TASK_UPLOADSTATS = 0x0,
  LB_TASK_READLB = 0x1,
  LB_TASK_GETFRIENDS = 0x2,
  LB_TASK_COUNT = 0x3,
};

/*  842 */
enum GamePadButton
{
  GPAD_NONE = 0x0,
  GPAD_UP = 0x10000001,
  GPAD_DOWN = 0x10000002,
  GPAD_LEFT = 0x10000004,
  GPAD_RIGHT = 0x10000008,
  GPAD_START = 0x10000010,
  GPAD_BACK = 0x10000020,
  GPAD_L3 = 0x10000040,
  GPAD_R3 = 0x10000080,
  GPAD_A = 0x10001000,
  GPAD_B = 0x10002000,
  GPAD_X = 0x10004000,
  GPAD_Y = 0x10008000,
  GPAD_L_SHLDR = 0x10000100,
  GPAD_R_SHLDR = 0x10000200,
  GPAD_L_TRIG = 0x20000000,
  GPAD_R_TRIG = 0x20000001,
};

/*  843 */
enum GamepadPhysicalAxis
{
  GPAD_PHYSAXIS_RSTICK_X = 0x0,
  GPAD_PHYSAXIS_RSTICK_Y = 0x1,
  GPAD_PHYSAXIS_LSTICK_X = 0x2,
  GPAD_PHYSAXIS_LSTICK_Y = 0x3,
  GPAD_PHYSAXIS_RTRIGGER = 0x4,
  GPAD_PHYSAXIS_LTRIGGER = 0x5,
  GPAD_PHYSAXIS_COUNT = 0x6,
  GPAD_PHYSAXIS_NONE = 0xFFFFFFFF,
};

/*  844 */
enum gamerProfileSettings
{
  invertPitch = 0x0,
  viewSensitivity = 0x1,
  autoAim = 0x2,
  rumble = 0x3,
  thumbstickHandedness = 0x4,
  cod2ExeSettings = 0x5,
  cod2CommonSettings = 0x6,
  READ_SETTINGS_TOTAL_COUNT = 0x7,
};

/*  845 */
enum GamePadStickDir
{
  GPAD_STICK_POS = 0x0,
  GPAD_STICK_NEG = 0x1,
  GPAD_STICK_DIRCOUNT = 0x2,
};

/*  846 */
enum $BA901A123A7949D71CD7DA341DCBE8ED
{
  DB_ZONE_COMMON = 0x1,
  DB_ZONE_GAME = 0x2,
  DB_ZONE_LOAD = 0x4,
  DB_ZONE_DEV = 0x8,
};

/*  847 */
enum CXMAFile::StreamingState
{
  STREAMED = 0x0,
  UNSTREAMED = 0x1,
};

/*  848 */
enum $938699F29A6665EF52530DBDE25EEE7A
{
  PHYS_ALLOC_LOW = 0x0,
  PHYS_ALLOC_HIGH = 0x1,
  PHYS_ALLOC_COUNT = 0x2,
};

/*  849 */
enum XaVoiceOutputIndex
{
  XA_MASTERINGVOICEOUTPUTINDEX = 0x0,
  XA_REVERBVOICEOUTPUTINDEX = 0x1,
  XA_VOICEOUTPUTCOUNT = 0x2,
};

/*  850 */
enum FS_ErrorCodes
{
  FS_OPEN_FAILURE = 0xFFFFFFFF,
  FS_OPEN_NOT_IN_IWD_OR_LOCALIZED_DIR = 0xFFFFFFFE,
};

/*  851 */
enum $489AEAA4B3097347ED2FC122416DFFA6
{
  XANIM_SIZE = 0x10,
  DOBJ_CREATE_SIZE = 0x64,
  XSURFACE_SIZE = 0x74,
};

/*  852 */
enum $97D54CC66FD088246E1F91237E234C87
{
  STREAM_DST_POSITION = 0x0,
  STREAM_DST_NORMAL = 0x1,
  STREAM_DST_COLOR_0 = 0x2,
  STREAM_DST_COLOR_1 = 0x3,
  STREAM_DST_TEXCOORD_0 = 0x4,
  STREAM_DST_TEXCOORD_1 = 0x5,
  STREAM_DST_TEXCOORD_2 = 0x6,
  STREAM_DST_TEXCOORD_3 = 0x7,
  STREAM_DST_TEXCOORD_4 = 0x8,
  STREAM_DST_TEXCOORD_5 = 0x9,
  STREAM_DST_TEXCOORD_6 = 0xA,
  STREAM_DST_TEXCOORD_7 = 0xB,
  STREAM_DST_COUNT = 0xC,
};

/*  853 */
enum $4B9E0CA1D4CB2853FB9099B8EAF4FF57
{
  MTL_ARG_MATERIAL_VERTEX_CONST = 0x0,
  MTL_ARG_LITERAL_VERTEX_CONST = 0x1,
  MTL_ARG_MATERIAL_PIXEL_SAMPLER = 0x2,
  MTL_ARG_CODE_PRIM_BEGIN = 0x3,
  MTL_ARG_CODE_VERTEX_CONST = 0x3,
  MTL_ARG_CODE_PIXEL_SAMPLER = 0x4,
  MTL_ARG_CODE_PIXEL_CONST = 0x5,
  MTL_ARG_CODE_PRIM_END = 0x6,
  MTL_ARG_MATERIAL_PIXEL_CONST = 0x6,
  MTL_ARG_LITERAL_PIXEL_CONST = 0x7,
  MLT_ARG_COUNT = 0x8,
};

/*  854 */
enum $B2FD3713A7CE728D7D4B9B08B4C380D8
{
  IMG_CATEGORY_UNKNOWN = 0x0,
  IMG_CATEGORY_AUTO_GENERATED = 0x1,
  IMG_CATEGORY_LIGHTMAP = 0x2,
  IMG_CATEGORY_LOAD_FROM_FILE = 0x3,
  IMG_CATEGORY_RAW = 0x4,
  IMG_CATEGORY_FIRST_UNMANAGED = 0x5,
  IMG_CATEGORY_WATER = 0x5,
  IMG_CATEGORY_RENDERTARGET = 0x6,
  IMG_CATEGORY_TEMP = 0x7,
};

/*  855 */
enum $C08ADCF4FB47B308F7F27FE8A0F5E0A6
{
  PICMIP_PLATFORM_USED = 0x0,
  PICMIP_PLATFORM_COUNT = 0x1,
};

/*  856 */
enum $76B0BB9CEAB66D3FCAC714600EFB4A3C
{
  FOG_NONE = 0x0,
  FOG_SERVER = 0x1,
  FOG_CURRENT = 0x2,
  FOG_LAST = 0x3,
  FOG_TARGET = 0x4,
  FOG_COUNT = 0x5,
};

/*  857 */
enum MaterialTextureSource
{
  TEXTURE_SRC_CODE_BLACK = 0x0,
  TEXTURE_SRC_CODE_WHITE = 0x1,
  TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP = 0x2,
  TEXTURE_SRC_CODE_MODEL_LIGHTING = 0x3,
  TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY = 0x4,
  TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY = 0x5,
  TEXTURE_SRC_CODE_SHADOWCOOKIE = 0x6,
  TEXTURE_SRC_CODE_SHADOWMAP_SUN = 0x7,
  TEXTURE_SRC_CODE_SHADOWMAP_SPOT = 0x8,
  TEXTURE_SRC_CODE_FEEDBACK = 0x9,
  TEXTURE_SRC_CODE_RESOLVED_POST_SUN = 0xA,
  TEXTURE_SRC_CODE_RESOLVED_SCENE = 0xB,
  TEXTURE_SRC_CODE_POST_EFFECT_0 = 0xC,
  TEXTURE_SRC_CODE_POST_EFFECT_1 = 0xD,
  TEXTURE_SRC_CODE_SKY = 0xE,
  TEXTURE_SRC_CODE_LIGHT_ATTENUATION = 0xF,
  TEXTURE_SRC_CODE_DYNAMIC_SHADOWS = 0x10,
  TEXTURE_SRC_CODE_OUTDOOR = 0x11,
  TEXTURE_SRC_CODE_FLOATZ = 0x12,
  TEXTURE_SRC_CODE_PROCESSED_FLOATZ = 0x13,
  TEXTURE_SRC_CODE_RAW_FLOATZ = 0x14,
  TEXTURE_SRC_CODE_CASE_TEXTURE = 0x15,
  TEXTURE_SRC_CODE_CINEMATIC_Y = 0x16,
  TEXTURE_SRC_CODE_CINEMATIC_CR = 0x17,
  TEXTURE_SRC_CODE_CINEMATIC_CB = 0x18,
  TEXTURE_SRC_CODE_CINEMATIC_A = 0x19,
  TEXTURE_SRC_CODE_REFLECTION_PROBE = 0x1A,
  TEXTURE_SRC_CODE_COUNT = 0x1B,
};

/*  858 */
enum $59767B55E475954E114113A811572D0A
{
  TEXTURE_FILTER_DISABLED = 0x0,
  TEXTURE_FILTER_NEAREST = 0x1,
  TEXTURE_FILTER_LINEAR = 0x2,
  TEXTURE_FILTER_ANISO2X = 0x3,
  TEXTURE_FILTER_ANISO4X = 0x4,
  TEXTURE_FILTER_COUNT = 0x5,
};

/*  859 */
enum $6961E030A9677F7C86FC6FF9B5901495
{
  SAMPLER_FILTER_SHIFT = 0x0,
  SAMPLER_FILTER_NEAREST = 0x1,
  SAMPLER_FILTER_LINEAR = 0x2,
  SAMPLER_FILTER_ANISO2X = 0x3,
  SAMPLER_FILTER_ANISO4X = 0x4,
  SAMPLER_FILTER_MASK = 0x7,
  SAMPLER_MIPMAP_SHIFT = 0x3,
  SAMPLER_MIPMAP_DISABLED = 0x0,
  SAMPLER_MIPMAP_NEAREST = 0x8,
  SAMPLER_MIPMAP_LINEAR = 0x10,
  SAMPLER_MIPMAP_COUNT = 0x3,
  SAMPLER_MIPMAP_MASK = 0x18,
  SAMPLER_CLAMP_U_SHIFT = 0x5,
  SAMPLER_CLAMP_V_SHIFT = 0x6,
  SAMPLER_CLAMP_W_SHIFT = 0x7,
  SAMPLER_CLAMP_U = 0x20,
  SAMPLER_CLAMP_V = 0x40,
  SAMPLER_CLAMP_W = 0x80,
  SAMPLER_CLAMP_MASK = 0xE0,
};

/*  860 */
enum $509225601A54D63487B53D22FDE9E9D4
{
  STATE_FLAG_CULL_BACK = 0x1,
  STATE_FLAG_CULL_FRONT = 0x2,
  STATE_FLAG_DECAL = 0x4,
  STATE_FLAG_WRITES_DEPTH = 0x8,
  STATE_FLAG_USES_DEPTH_BUFFER = 0x10,
  STATE_FLAG_USES_STENCIL_BUFFER = 0x20,
};

/*  861 */
enum GfxBlend
{
  GFXS_BLEND_DISABLED = 0x0,
  GFXS_BLEND_ZERO = 0x1,
  GFXS_BLEND_ONE = 0x2,
  GFXS_BLEND_SRCCOLOR = 0x3,
  GFXS_BLEND_INVSRCCOLOR = 0x4,
  GFXS_BLEND_SRCALPHA = 0x5,
  GFXS_BLEND_INVSRCALPHA = 0x6,
  GFXS_BLEND_DESTALPHA = 0x7,
  GFXS_BLEND_INVDESTALPHA = 0x8,
  GFXS_BLEND_DESTCOLOR = 0x9,
  GFXS_BLEND_INVDESTCOLOR = 0xA,
  GFXS_BLEND_MASK = 0xF,
};

/*  862 */
enum GfxBlendOp
{
  GFXS_BLENDOP_DISABLED = 0x0,
  GFXS_BLENDOP_ADD = 0x1,
  GFXS_BLENDOP_SUBTRACT = 0x2,
  GFXS_BLENDOP_REVSUBTRACT = 0x3,
  GFXS_BLENDOP_MIN = 0x4,
  GFXS_BLENDOP_MAX = 0x5,
  GFXS_BLENDOP_MASK = 0x7,
};

/*  863 */
enum GfxRenderTargetId
{
  R_RENDERTARGET_SAVED_SCREEN = 0x0,
  R_RENDERTARGET_FRAME_BUFFER = 0x1,
  R_RENDERTARGET_SCENE = 0x2,
  R_RENDERTARGET_RESOLVED_POST_SUN = 0x3,
  R_RENDERTARGET_RESOLVED_SCENE = 0x4,
  R_RENDERTARGET_FLOAT_Z = 0x5,
  R_RENDERTARGET_DYNAMICSHADOWS = 0x6,
  R_RENDERTARGET_SHADOWCOOKIE = 0x7,
  R_RENDERTARGET_POST_EFFECT_0 = 0x8,
  R_RENDERTARGET_POST_EFFECT_1 = 0x9,
  R_RENDERTARGET_SHADOWMAP_SUN = 0xA,
  R_RENDERTARGET_SHADOWMAP_SPOT = 0xB,
  R_RENDERTARGET_HALF_RESAMPLED_SCENE = 0xC,
  R_RENDERTARGET_COUNT = 0xD,
  R_RENDERTARGET_NONE = 0xE,
};

/*  864 */
enum $2A7384FF3B7B49BCF10F5460BE171B70
{
  GFXS0_SRCBLEND_RGB_SHIFT = 0x0,
  GFXS0_SRCBLEND_RGB_MASK = 0xF,
  GFXS0_DSTBLEND_RGB_SHIFT = 0x4,
  GFXS0_DSTBLEND_RGB_MASK = 0xF0,
  GFXS0_BLENDOP_RGB_SHIFT = 0x8,
  GFXS0_BLENDOP_RGB_MASK = 0x700,
  GFXS0_BLEND_RGB_MASK = 0x7FF,
  GFXS0_ATEST_DISABLE = 0x800,
  GFXS0_ATEST_GT_0 = 0x1000,
  GFXS0_ATEST_LT_128 = 0x2000,
  GFXS0_ATEST_GE_128 = 0x3000,
  GFXS0_ATEST_MASK = 0x3000,
  GFXS0_CULL_SHIFT = 0xE,
  GFXS0_CULL_NONE = 0x4000,
  GFXS0_CULL_BACK = 0x8000,
  GFXS0_CULL_FRONT = 0xC000,
  GFXS0_CULL_MASK = 0xC000,
  GFXS0_SRCBLEND_ALPHA_SHIFT = 0x10,
  GFXS0_SRCBLEND_ALPHA_MASK = 0xF0000,
  GFXS0_DSTBLEND_ALPHA_SHIFT = 0x14,
  GFXS0_DSTBLEND_ALPHA_MASK = 0xF00000,
  GFXS0_BLENDOP_ALPHA_SHIFT = 0x18,
  GFXS0_BLENDOP_ALPHA_MASK = 0x7000000,
  GFXS0_BLEND_ALPHA_MASK = 0x7FF0000,
  GFXS0_COLORWRITE_RGB = 0x8000000,
  GFXS0_COLORWRITE_ALPHA = 0x10000000,
  GFXS0_COLORWRITE_MASK = 0x18000000,
  GFXS0_POLYMODE_LINE = 0x80000000,
  GFXS1_DEPTHWRITE = 0x1,
  GFXS1_DEPTHTEST_DISABLE = 0x2,
  GFXS1_DEPTHTEST_SHIFT = 0x2,
  GFXS1_DEPTHTEST_ALWAYS = 0x0,
  GFXS1_DEPTHTEST_LESS = 0x4,
  GFXS1_DEPTHTEST_EQUAL = 0x8,
  GFXS1_DEPTHTEST_LESSEQUAL = 0xC,
  GFXS1_DEPTHTEST_MASK = 0xC,
  GFXS1_POLYGON_OFFSET_SHIFT = 0x4,
  GFXS1_POLYGON_OFFSET_0 = 0x0,
  GFXS1_POLYGON_OFFSET_1 = 0x10,
  GFXS1_POLYGON_OFFSET_2 = 0x20,
  GFXS1_POLYGON_OFFSET_SHADOWMAP = 0x30,
  GFXS1_POLYGON_OFFSET_MASK = 0x30,
  GFXS1_STENCIL_FRONT_ENABLE = 0x40,
  GFXS1_STENCIL_BACK_ENABLE = 0x80,
  GFXS1_STENCIL_MASK = 0xC0,
  GFXS1_STENCIL_FRONT_PASS_SHIFT = 0x8,
  GFXS1_STENCIL_FRONT_FAIL_SHIFT = 0xB,
  GFXS1_STENCIL_FRONT_ZFAIL_SHIFT = 0xE,
  GFXS1_STENCIL_FRONT_FUNC_SHIFT = 0x11,
  GFXS1_STENCIL_FRONT_MASK = 0xFFF00,
  GFXS1_STENCIL_BACK_PASS_SHIFT = 0x14,
  GFXS1_STENCIL_BACK_FAIL_SHIFT = 0x17,
  GFXS1_STENCIL_BACK_ZFAIL_SHIFT = 0x1A,
  GFXS1_STENCIL_BACK_FUNC_SHIFT = 0x1D,
  GFXS1_STENCIL_BACK_MASK = 0xFFF00000,
  GFXS1_STENCILFUNC_FRONTBACK_MASK = 0xE00E0000,
  GFXS1_STENCILOP_FRONTBACK_MASK = 0x1FF1FF00,
};

/*  865 */
enum GfxTextureOp
{
  GFXS_TEXOP_DISABLE = 0x0,
  GFXS_TEXOP_SELECTARG1 = 0x1,
  GFXS_TEXOP_SELECTARG2 = 0x2,
  GFXS_TEXOP_MODULATE = 0x3,
  GFXS_TEXOP_MODULATE2X = 0x4,
  GFXS_TEXOP_MODULATE4X = 0x5,
  GFXS_TEXOP_ADD = 0x6,
  GFXS_TEXOP_ADDSIGNED = 0x7,
  GFXS_TEXOP_ADDSIGNED2X = 0x8,
  GFXS_TEXOP_SUBTRACT = 0x9,
  GFXS_TEXOP_ADDSMOOTH = 0xA,
  GFXS_TEXOP_BLENDDIFFUSEALPHA = 0xB,
  GFXS_TEXOP_BLENDTEXTUREALPHA = 0xC,
  GFXS_TEXOP_BLENDFACTORALPHA = 0xD,
  GFXS_TEXOP_BLENDTEXTUREALPHAPM = 0xE,
  GFXS_TEXOP_BLENDCURRENTALPHA = 0xF,
  GFXS_TEXOP_MODULATEALPHA_ADDCOLOR = 0x10,
  GFXS_TEXOP_MODULATECOLOR_ADDALPHA = 0x11,
  GFXS_TEXOP_MODULATEINVALPHA_ADDCOLOR = 0x12,
  GFXS_TEXOP_MODULATEINVCOLOR_ADDALPHA = 0x13,
  GFXS_TEXOP_DOTPRODUCT3 = 0x14,
  GFXS_TEXOP_MULTIPLYADD = 0x15,
  GFXS_TEXOP_LERP = 0x16,
  GFXS_TEXOP_COUNT = 0x17,
  GFXS_TEXOP_BITS = 0x5,
  GFXS_TEXOP_MASK = 0x1F,
};

/*  866 */
enum GfxTextureArg
{
  GFXS_TEXARG_CONSTANT = 0x0,
  GFXS_TEXARG_CURRENT = 0x1,
  GFXS_TEXARG_COLOR_0 = 0x2,
  GFXS_TEXARG_COLOR_1 = 0x3,
  GFXS_TEXARG_TEMP = 0x4,
  GFXS_TEXARG_TEXTURE = 0x5,
  GFXS_TEXARG_TFACTOR = 0x6,
  GFXS_TEXARG_COUNT = 0x7,
  GFXS_TEXARG_BASE_BITS = 0x3,
  GFXS_TEXARG_BASE_MASK = 0x7,
  GFXS_TEXARG_COMPLEMENT = 0x8,
  GFXS_TEXARG_ALPHA_REPLICATE = 0x10,
  GFXS_TEXARG_BITS = 0x5,
  GFXS_TEXARG_MASK = 0x1F,
};

/*  867 */
enum GfxTextureFunc
{
  GFXS_TEXFUNC_OP_SHIFT = 0x0,
  GFXS_TEXFUNC_DEST_SHIFT = 0x5,
  GFXS_TEXFUNC_ARG1_SHIFT = 0xA,
  GFXS_TEXFUNC_ARG2_SHIFT = 0xF,
  GFXS_TEXFUNC_ARG0_SHIFT = 0x14,
};

/*  868 */
enum $83363154E125A81D850DFA8F4CF53BBD
{
  CONST_SRC_CODE_MAYBE_DIRTY_PS_BEGIN = 0x0,
  CONST_SRC_CODE_LIGHT_POSITION = 0x0,
  CONST_SRC_CODE_LIGHT_DIFFUSE = 0x1,
  CONST_SRC_CODE_LIGHT_SPECULAR = 0x2,
  CONST_SRC_CODE_LIGHT_SPOTDIR = 0x3,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS = 0x4,
  CONST_SRC_CODE_NEARPLANE_ORG = 0x5,
  CONST_SRC_CODE_NEARPLANE_DX = 0x6,
  CONST_SRC_CODE_NEARPLANE_DY = 0x7,
  CONST_SRC_CODE_SHADOW_PARMS = 0x8,
  CONST_SRC_CODE_SHADOWMAP_POLYGON_OFFSET = 0x9,
  CONST_SRC_CODE_RENDER_TARGET_SIZE = 0xA,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT = 0xB,
  CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR = 0xC,
  CONST_SRC_CODE_DOF_EQUATION_SCENE = 0xD,
  CONST_SRC_CODE_DOF_LERP_SCALE = 0xE,
  CONST_SRC_CODE_DOF_LERP_BIAS = 0xF,
  CONST_SRC_CODE_DOF_ROW_DELTA = 0x10,
  CONST_SRC_CODE_PARTICLE_CLOUD_COLOR = 0x11,
  CONST_SRC_CODE_GAMETIME = 0x12,
  CONST_SRC_CODE_MAYBE_DIRTY_PS_END = 0x13,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_BEGIN = 0x13,
  CONST_SRC_CODE_PIXEL_COST_FRACS = 0x13,
  CONST_SRC_CODE_PIXEL_COST_DECODE = 0x14,
  CONST_SRC_CODE_FILTER_TAP_0 = 0x15,
  CONST_SRC_CODE_FILTER_TAP_1 = 0x16,
  CONST_SRC_CODE_FILTER_TAP_2 = 0x17,
  CONST_SRC_CODE_FILTER_TAP_3 = 0x18,
  CONST_SRC_CODE_FILTER_TAP_4 = 0x19,
  CONST_SRC_CODE_FILTER_TAP_5 = 0x1A,
  CONST_SRC_CODE_FILTER_TAP_6 = 0x1B,
  CONST_SRC_CODE_FILTER_TAP_7 = 0x1C,
  CONST_SRC_CODE_COLOR_MATRIX_R = 0x1D,
  CONST_SRC_CODE_COLOR_MATRIX_G = 0x1E,
  CONST_SRC_CODE_COLOR_MATRIX_B = 0x1F,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_END = 0x20,
  CONST_SRC_CODE_NEVER_DIRTY_PS_BEGIN = 0x20,
  CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION = 0x20,
  CONST_SRC_CODE_SHADOWMAP_SIZE = 0x21,
  CONST_SRC_CODE_SUN_POSITION = 0x22,
  CONST_SRC_CODE_SUN_DIFFUSE = 0x23,
  CONST_SRC_CODE_SUN_SPECULAR = 0x24,
  CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE = 0x25,
  CONST_SRC_CODE_DEBUG_BUMPMAP = 0x26,
  CONST_SRC_CODE_MATERIAL_COLOR = 0x27,
  CONST_SRC_CODE_FOG = 0x28,
  CONST_SRC_CODE_FOG_COLOR = 0x29,
  CONST_SRC_CODE_GLOW_SETUP = 0x2A,
  CONST_SRC_CODE_GLOW_APPLY = 0x2B,
  CONST_SRC_CODE_COLOR_BIAS = 0x2C,
  CONST_SRC_CODE_COLOR_TINT_BASE = 0x2D,
  CONST_SRC_CODE_COLOR_TINT_DELTA = 0x2E,
  CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS = 0x2F,
  CONST_SRC_CODE_ENVMAP_PARMS = 0x30,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE = 0x31,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET = 0x32,
  CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX = 0x33,
  CONST_SRC_CODE_DEPTH_FROM_CLIP = 0x34,
  CONST_SRC_CODE_CODE_MESH_ARG_0 = 0x35,
  CONST_SRC_CODE_CODE_MESH_ARG_1 = 0x36,
  CONST_SRC_CODE_CODE_MESH_ARG_LAST = 0x36,
  CONST_SRC_CODE_BASE_LIGHTING_COORDS = 0x37,
  CONST_SRC_CODE_NEVER_DIRTY_PS_END = 0x38,
  CONST_SRC_CODE_COUNT_FLOAT4 = 0x38,
  CONST_SRC_FIRST_CODE_MATRIX = 0x38,
  CONST_SRC_CODE_WORLD_MATRIX = 0x38,
  CONST_SRC_CODE_INVERSE_WORLD_MATRIX = 0x39,
  CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX = 0x3A,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX = 0x3B,
  CONST_SRC_CODE_VIEW_MATRIX = 0x3C,
  CONST_SRC_CODE_INVERSE_VIEW_MATRIX = 0x3D,
  CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX = 0x3E,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX = 0x3F,
  CONST_SRC_CODE_PROJECTION_MATRIX = 0x40,
  CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX = 0x41,
  CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX = 0x42,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX = 0x43,
  CONST_SRC_CODE_WORLD_VIEW_MATRIX = 0x44,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX = 0x45,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX = 0x46,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX = 0x47,
  CONST_SRC_CODE_VIEW_PROJECTION_MATRIX = 0x48,
  CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX = 0x49,
  CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0x4A,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0x4B,
  CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX = 0x4C,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX = 0x4D,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0x4E,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0x4F,
  CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX = 0x50,
  CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX = 0x51,
  CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0x52,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0x53,
  CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x54,
  CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x55,
  CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x56,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x57,
  CONST_SRC_TOTAL_COUNT = 0x58,
  CONST_SRC_NONE = 0x59,
};

/*  869 */
enum GfxRenderer
{
  GFX_RENDERER_SHADER_3 = 0x0,
  GFX_RENDERER_COUNT = 0x1,
  GFX_RENDERER_UNSPECIFIED = 0x1,
};

/*  870 */
enum $BBA3098F62A091CA0E0EE5EF0264C478
{
  GFX_SYM_FILTER_1 = 0x0,
  GFX_SYM_FILTER_2 = 0x1,
  GFX_SYM_FILTER_3 = 0x2,
  GFX_SYM_FILTER_4 = 0x3,
  GFX_SYM_FILTER_5 = 0x4,
  GFX_SYM_FILTER_6 = 0x5,
  GFX_SYM_FILTER_7 = 0x6,
  GFX_SYM_FILTER_8 = 0x7,
  GFX_SYM_FILTER_COUNT = 0x8,
};

/*  871 */
enum $AD163D05F246FDE0E0BF3D17157B38BB
{
  STREAM_SRC_POSITION = 0x0,
  STREAM_SRC_COLOR = 0x1,
  STREAM_SRC_TEXCOORD_0 = 0x2,
  STREAM_SRC_NORMAL = 0x3,
  STREAM_SRC_TANGENT = 0x4,
  STREAM_SRC_OPTIONAL_BEGIN = 0x5,
  STREAM_SRC_PRE_OPTIONAL_BEGIN = 0x4,
  STREAM_SRC_TEXCOORD_1 = 0x5,
  STREAM_SRC_TEXCOORD_2 = 0x6,
  STREAM_SRC_NORMAL_TRANSFORM_0 = 0x7,
  STREAM_SRC_NORMAL_TRANSFORM_1 = 0x8,
  STREAM_SRC_COUNT = 0x9,
};

/*  872 */
enum MapType
{
  MAPTYPE_NONE = 0x0,
  MAPTYPE_INVALID1 = 0x1,
  MAPTYPE_INVALID2 = 0x2,
  MAPTYPE_2D = 0x3,
  MAPTYPE_3D = 0x4,
  MAPTYPE_CUBE = 0x5,
  MAPTYPE_COUNT = 0x6,
};

/*  873 */
enum GfxStencilOp
{
  GFXS_STENCILOP_KEEP = 0x0,
  GFXS_STENCILOP_ZERO = 0x1,
  GFXS_STENCILOP_REPLACE = 0x2,
  GFXS_STENCILOP_INCRSAT = 0x3,
  GFXS_STENCILOP_DECRSAT = 0x4,
  GFXS_STENCILOP_INVERT = 0x5,
  GFXS_STENCILOP_INCR = 0x6,
  GFXS_STENCILOP_DECR = 0x7,
  GFXS_STENCILOP_COUNT = 0x8,
};

/*  874 */
enum MaterialVertexDeclType
{
  VERTDECL_GENERIC = 0x0,
  VERTDECL_PACKED = 0x1,
  VERTDECL_WORLD = 0x2,
  VERTDECL_WORLD_T1N0 = 0x3,
  VERTDECL_WORLD_T1N1 = 0x4,
  VERTDECL_WORLD_T2N0 = 0x5,
  VERTDECL_WORLD_T2N1 = 0x6,
  VERTDECL_WORLD_T2N2 = 0x7,
  VERTDECL_WORLD_T3N0 = 0x8,
  VERTDECL_WORLD_T3N1 = 0x9,
  VERTDECL_WORLD_T3N2 = 0xA,
  VERTDECL_WORLD_T4N0 = 0xB,
  VERTDECL_WORLD_T4N1 = 0xC,
  VERTDECL_WORLD_T4N2 = 0xD,
  VERTDECL_POS_TEX = 0xE,
  VERTDECL_COUNT = 0xF,
};

/*  875 */
enum GfxStencilFunc
{
  GFXS_STENCILFUNC_NEVER = 0x0,
  GFXS_STENCILFUNC_LESS = 0x1,
  GFXS_STENCILFUNC_EQUAL = 0x2,
  GFXS_STENCILFUNC_LESSEQUAL = 0x3,
  GFXS_STENCILFUNC_GREATER = 0x4,
  GFXS_STENCILFUNC_NOTEQUAL = 0x5,
  GFXS_STENCILFUNC_GREATEREQUAL = 0x6,
  GFXS_STENCILFUNC_ALWAYS = 0x7,
  GFXS_STENCILFUNC_COUNT = 0x8,
};

/*  876 */
enum $0E2DAAA54FECE08CCA73CE8967B59418
{
  PART_TYPE_NO_QUAT = 0x0,
  PART_TYPE_SIMPLE_QUAT = 0x1,
  PART_TYPE_NORMAL_QUAT = 0x2,
  PART_TYPE_PRECISION_QUAT = 0x3,
  PART_TYPE_SIMPLE_QUAT_NO_SIZE = 0x4,
  PART_TYPE_NORMAL_QUAT_NO_SIZE = 0x5,
  PART_TYPE_PRECISION_QUAT_NO_SIZE = 0x6,
  PART_TYPE_SMALL_TRANS = 0x7,
  PART_TYPE_TRANS = 0x8,
  PART_TYPE_TRANS_NO_SIZE = 0x9,
  PART_TYPE_NO_TRANS = 0xA,
  PART_TYPE_ALL = 0xB,
  PART_TYPE_COUNT = 0xC,
};

/*  877 */
enum $F54CAB3E37A84FA16AFBEBB248D4A126
{
  XANIM_LOOP_SYNC_TIME = 0x1,
  XANIM_NONLOOP_SYNC_TIME = 0x2,
  XANIM_SYNC_ROOT = 0x4,
  XANIM_COMPLETE = 0x8,
  XANIM_ADDITIVE = 0x10,
};

/*  878 */
enum $63E345E7C5842EB1B1B10E4A21F9BB4C
{
  BITS_PER_WORD = 0x20,
  WORD_COUNT = 0x4,
};

/*  879 */
enum $673D3D32AD1EBCE7A4DFDC45146E2679
{
  XANIM_ERROR_NONE = 0x0,
  XANIM_ERROR_BAD_ROOT_ANIM = 0x1,
  XANIM_ERROR_BAD_NOTIFY = 0x2,
};

/*  880 */
enum $56EADB788E9A8C5332FF02A19D1398B0
{
  CLASS_NUM_ENTITY = 0x0,
  CLASS_NUM_HUDELEM = 0x1,
  CLASS_NUM_PATHNODE = 0x2,
  CLASS_NUM_VEHICLENODE = 0x3,
  CLASS_NUM_COUNT = 0x4,
};

/*  881 */
enum $EFBFA2092A69B720574534E604BF050B
{
  MT_TYPE_EMPTY = 0x0,
  MT_TYPE_THREAD = 0x1,
  MT_TYPE_VECTOR = 0x2,
  MT_TYPE_ANIM_NOTETRACK = 0x3,
  MT_TYPE_ANIM_TREE = 0x4,
  MT_TYPE_SMALL_ANIM_TREE = 0x5,
  MT_TYPE_EXTERNAL = 0x6,
  MT_TYPE_TEMP = 0x7,
  MT_TYPE_SURFACE = 0x8,
  MT_TYPE_ANIM_PART = 0x9,
  MT_TYPE_MODEL_PART = 0xA,
  MT_TYPE_MODEL_PART_MAP = 0xB,
  MT_TYPE_MODEL_DUPLICATE_PARTS = 0xC,
  MT_TYPE_MODEL_LIST = 0xD,
  MT_TYPE_SCRIPT_PARSE = 0xE,
  MT_TYPE_SCRIPT_STRING = 0xF,
  MT_TYPE_CLASS = 0x10,
  MT_TYPE_TAG_INFO = 0x11,
  MT_TYPE_ANIMSCRIPTED = 0x12,
  MT_TYPE_CONFIG_STRING = 0x13,
  MT_TYPE_DEBUGGER_STRING = 0x14,
  MT_TYPE_GENERIC = 0x15,
  MT_TYPE_COUNT = 0x16,
};

/*  882 */
enum $887D29DBD6D3FDEB8D6D793E1BC180A4
{
  FILEDATA_AITYPE = 0x0,
  FILEDATA_ANIMSCRIPTS_TRAVERSE = 0x1,
  FILEDATA_XANIMLIST = 0x2,
};

/*  883 */
enum $0067B3625803BF20F1C14D2DD0AB38A5
{
  DSKEL_CREATE_INC = 0x20,
};

/*  884 */
enum $B8B020795EE7B60F2562A4AAB6C6F743
{
  LEFT = 0x0,
  RIGHT = 0x1,
};

/*  885 */
enum $F405DBE12AC9DCDAC57F7AFCE3D12168
{
  RED = 0x0,
  BLACK = 0x1,
};

/*  886 */
enum csParseFieldType_t
{
  CSPFT_STRING = 0x0,
  CSPFT_STRING_MAX_STRING_CHARS = 0x1,
  CSPFT_STRING_MAX_QPATH = 0x2,
  CSPFT_STRING_MAX_OSPATH = 0x3,
  CSPFT_INT = 0x4,
  CSPFT_QBOOLEAN = 0x5,
  CSPFT_FLOAT = 0x6,
  CSPFT_MILLISECONDS = 0x7,
  CSPFT_FX = 0x8,
  CSPFT_XMODEL = 0x9,
  CSPFT_MATERIAL = 0xA,
  CSPFT_SOUND = 0xB,
  CSPFT_NUM_BASE_FIELD_TYPES = 0xC,
};

/*  887 */
enum MemFileThread
{
  MEM_FILE_THREAD_UNKNOWN = 0x0,
  MEM_FILE_THREAD_MAIN = 0x1,
  MEM_FILE_THREAD_DEBUG_SERVICE = 0x2,
  MEM_FILE_THREAD_SERVER = 0x3,
  MEM_FILE_THREAD_BACKEND = 0x4,
  MEM_FILE_THREAD_DATABASE = 0x5,
  MEM_FILE_THREAD_STREAM = 0x6,
  MEM_FILE_THREAD_SNDSTREAMPACKETCALLBACK = 0x7,
  MEM_FILE_THREADNUM = 0x8,
};

/*  888 */
enum MemFileMode
{
  MEM_FILE_MODE_DEFAULT = 0x0,
  MEM_FILE_MODE_INFLATE = 0x1,
  MEM_FILE_MODE_DEFLATE = 0x2,
  MEM_FILE_MODENUM = 0x3,
};

/*  889 */
enum $64EC7BB2831DA848E43D94D5276F3434
{
  CODE_SHIFT_BITS = 0x6,
  CODE_TYPE_MASK = 0xC0,
  CODE_LEN_MASK = 0x3F,
};

/*  890 */
enum EvalOperatorType
{
  EVAL_OP_LPAREN = 0x0,
  EVAL_OP_RPAREN = 0x1,
  EVAL_OP_COLON = 0x2,
  EVAL_OP_QUESTION = 0x3,
  EVAL_OP_PLUS = 0x4,
  EVAL_OP_MINUS = 0x5,
  EVAL_OP_UNARY_PLUS = 0x6,
  EVAL_OP_UNARY_MINUS = 0x7,
  EVAL_OP_MULTIPLY = 0x8,
  EVAL_OP_DIVIDE = 0x9,
  EVAL_OP_MODULUS = 0xA,
  EVAL_OP_LSHIFT = 0xB,
  EVAL_OP_RSHIFT = 0xC,
  EVAL_OP_BITWISE_NOT = 0xD,
  EVAL_OP_BITWISE_AND = 0xE,
  EVAL_OP_BITWISE_OR = 0xF,
  EVAL_OP_BITWISE_XOR = 0x10,
  EVAL_OP_LOGICAL_NOT = 0x11,
  EVAL_OP_LOGICAL_AND = 0x12,
  EVAL_OP_LOGICAL_OR = 0x13,
  EVAL_OP_EQUALS = 0x14,
  EVAL_OP_NOT_EQUAL = 0x15,
  EVAL_OP_LESS = 0x16,
  EVAL_OP_LESS_EQUAL = 0x17,
  EVAL_OP_GREATER = 0x18,
  EVAL_OP_GREATER_EQUAL = 0x19,
  EVAL_OP_COUNT = 0x1A,
};

/*  891 */
enum EvalValueType
{
  EVAL_VALUE_DOUBLE = 0x0,
  EVAL_VALUE_INT = 0x1,
  EVAL_VALUE_STRING = 0x2,
};

/*  892 */
enum printParm_t
{
  PRINT_ALL = 0x0,
  PRINT_DEVELOPER = 0x1,
  PRINT_WARNING = 0x2,
  PRINT_ERROR = 0x3,
};

/*  893 */
enum $EF380DB90391286258DD7FA4BDEED426
{
  DVAR_TYPE_BOOL = 0x0,
  DVAR_TYPE_FLOAT = 0x1,
  DVAR_TYPE_FLOAT_2 = 0x2,
  DVAR_TYPE_FLOAT_3 = 0x3,
  DVAR_TYPE_FLOAT_4 = 0x4,
  DVAR_TYPE_INT = 0x5,
  DVAR_TYPE_ENUM = 0x6,
  DVAR_TYPE_STRING = 0x7,
  DVAR_TYPE_COLOR = 0x8,
  DVAR_TYPE_COUNT = 0x9,
};

/*  894 */
enum $D8002F0A51E864B30875F61E0FB2CD5E
{
  TRACK_DEBUG = 0x0,
  TRACK_FREE = 0x1,
  TRACK_BINARIES = 0x2,
  TRACK_MISC_SWAP = 0x3,
  TRACK_DELIMITER1 = 0x4,
  TRACK_AI = 0x5,
  TRACK_AI_NODES = 0x6,
  TRACK_SCRIPT = 0x7,
  TRACK_FX = 0x8,
  TRACK_NETWORK_ENTITY = 0x9,
  TRACK_MISC = 0xA,
  TRACK_ANIMATION = 0xB,
  TRACK_WORLD_GLOBALS = 0xC,
  TRACK_SOUND_GLOBALS = 0xD,
  TRACK_XENON_SOUND_GLOBALS = 0xE,
  TRACK_SOUND = 0xF,
  TRACK_XENON_SOUND = 0x10,
  TRACK_DELIMITER2 = 0x11,
  TRACK_RENDERER_GLOBALS = 0x12,
  TRACK_RENDERER_IMAGES = 0x13,
  TRACK_RENDERER_WORLD = 0x14,
  TRACK_RENDERER_MODELS = 0x15,
  TRACK_RENDERER_MISC = 0x16,
  TRACK_RENDERER_TOTAL = 0x17,
  TRACK_DELIMITER3 = 0x18,
  TRACK_COLLISION_MISC = 0x19,
  TRACK_COLLISION_BRUSH = 0x1A,
  TRACK_COLLISION_MODEL_TRI = 0x1B,
  TRACK_COLLISION_TERRAIN = 0x1C,
  TRACK_COLLISION_TOTAL = 0x1D,
  TRACK_MAP_ENTS = 0x1E,
  TRACK_TEMP = 0x1F,
  TRACK_DELIMITER4 = 0x20,
  TRACK_LOCALIZATION = 0x21,
  TRACK_UI = 0x22,
  TRACK_CONSOLE_IMAGES = 0x23,
  TRACK_DELIMITER5 = 0x24,
  TRACK_COUNT = 0x25,
};

/*  895 */
enum FsThread
{
  FS_THREAD_MAIN = 0x0,
  FS_THREAD_STREAM = 0x1,
  FS_THREAD_DATABASE = 0x2,
  FS_THREAD_BACKEND = 0x3,
};

/*  896 */
enum expDataType
{
  VAL_INT = 0x0,
  VAL_FLOAT = 0x1,
  VAL_STRING = 0x2,
};

/*  897 */
enum msgwnd_mode_t
{
  MWM_BOTTOMUP_ALIGN_TOP = 0x0,
  MWM_BOTTOMUP_ALIGN_BOTTOM = 0x1,
  MWM_TOPDOWN_ALIGN_TOP = 0x2,
  MWM_TOPDOWN_ALIGN_BOTTOM = 0x3,
};

/*  898 */
enum UILocalVarType
{
  UILOCALVAR_INT = 0x0,
  UILOCALVAR_FLOAT = 0x1,
  UILOCALVAR_STRING = 0x2,
};

/*  899 */
enum parseBlockTypes
{
  PARSE_UNKNOWN = 0x0,
  PARSE_GAMETYPE = 0x1,
  PARSE_PLAYLIST = 0x2,
};

/*  900 */
enum $6353DA2755805C4B6A241A1D7D258410
{
  OPERATOR = 0x0,
  OPERAND = 0x1,
};

/*  901 */
enum $C7A66656BD20095141AF9DA597C58E36
{
  ok = 0x0,
  partial = 0x1,
  error = 0x2,
  noconv = 0x3,
};

/*  902 */
enum std::_Iosb<int>::_Dummy_enum
{
  _Dummy_enum_val = 0x1,
};

/*  903 */
enum std::_Iosb<int>::_Fmtflags
{
  _Fmtmask = 0xFFFF,
  _Fmtzero = 0x0,
};

/*  904 */
enum std::_Iosb<int>::_Iostate
{
  _Statmask = 0x17,
};

/*  905 */
enum std::_Iosb<int>::_Openmode
{
  _Openmask = 0xFF,
};

/*  906 */
enum std::_Iosb<int>::_Seekdir
{
  _Seekmask = 0x3,
};

/*  907 */
enum $0AE1ED1D395576D0F5C137E464D7BFE0
{
  _Openprot = 0x40,
};

/*  908 */
enum $4DECDA45625DB2763FC46D6F5CBF863C
{
  _BUF_SIZE = 0x10,
};

/*  909 */
enum $401D18D8561079E483BCFCFD960618EB
{
  _ALLOC_MASK = 0xF,
};

/*  910 */
enum $3065823E5191D2C998FA93C46B23A3F9
{
  alnum = 0x107,
  alpha = 0x103,
  cntrl = 0x20,
  digit = 0x4,
  graph = 0x117,
  lower = 0x2,
  print = 0x1D7,
  punct = 0x10,
  space = 0x48,
  upper = 0x1,
  xdigit = 0x80,
};

/*  911 */
enum std::ios_base::event
{
  erase_event = 0x0,
  imbue_event = 0x1,
  copyfmt_event = 0x2,
};

/*  912 */
enum language_t
{
  LANGUAGE_ENGLISH = 0x0,
  LANGUAGE_FRENCH = 0x1,
  LANGUAGE_GERMAN = 0x2,
  LANGUAGE_ITALIAN = 0x3,
  LANGUAGE_SPANISH = 0x4,
  LANGUAGE_BRITISH = 0x5,
  LANGUAGE_RUSSIAN = 0x6,
  LANGUAGE_POLISH = 0x7,
  LANGUAGE_KOREAN = 0x8,
  LANGUAGE_TAIWANESE = 0x9,
  LANGUAGE_JAPANESE = 0xA,
  LANGUAGE_CHINESE = 0xB,
  LANGUAGE_THAI = 0xC,
  LANGUAGE_LEET = 0xD,
  LANGUAGE_CZECH = 0xE,
  MAX_LANGUAGES = 0xF,
};

/*  913 */
enum serverState_t
{
  SS_DEAD = 0x0,
  SS_LOADING = 0x1,
  SS_GAME = 0x2,
};

/*  914 */
enum entityType_t
{
  ET_GENERAL = 0x0,
  ET_PLAYER = 0x1,
  ET_PLAYER_CORPSE = 0x2,
  ET_ITEM = 0x3,
  ET_MISSILE = 0x4,
  ET_INVISIBLE = 0x5,
  ET_SCRIPTMOVER = 0x6,
  ET_SOUND_BLEND = 0x7,
  ET_FX = 0x8,
  ET_LOOP_FX = 0x9,
  ET_PRIMARY_LIGHT = 0xA,
  ET_MG42 = 0xB,
  ET_HELICOPTER = 0xC,
  ET_PLANE = 0xD,
  ET_VEHICLE = 0xE,
  ET_VEHICLE_COLLMAP = 0xF,
  ET_VEHICLE_CORPSE = 0x10,
  ET_EVENTS = 0x11,
};

/*  915 */
enum svc_ops_e
{
  svc_nop = 0x0,
  svc_gamestate = 0x1,
  svc_configstring = 0x2,
  svc_baseline = 0x3,
  svc_serverCommand = 0x4,
  svc_snapshot = 0x5,
  svc_EOF = 0x6,
};

/*  916 */
enum $E0823365732D3FE7A50ACE20644A58D7
{
  CS_FREE = 0x0,
  CS_ZOMBIE = 0x1,
  CS_CONNECTED = 0x2,
  CS_CLIENTLOADING = 0x3,
  CS_ACTIVE = 0x4,
};

/*  917 */
enum svscmd_type
{
  SV_CMD_CAN_IGNORE = 0x0,
  SV_CMD_RELIABLE = 0x1,
};

/*  918 */
enum WorkerCmdType
{
  WRKCMD_UPLOAD_WATER = 0x0,
  WRKCMD_FIRST_FRONTEND = 0x1,
  WRKCMD_UPDATE_FX_SPOT_LIGHT = 0x1,
  WRKCMD_UPDATE_FX_NON_DEPENDENT = 0x2,
  WRKCMD_UPDATE_FX_REMAINING = 0x3,
  WRKCMD_ADD_STATICMODEL = 0x4,
  WRKCMD_DPVS_CELL_STATIC = 0x5,
  WRKCMD_DPVS_CELL_SCENE_ENT = 0x6,
  WRKCMD_DPVS_CELL_DYN_MODEL = 0x7,
  WRKCMD_DPVS_CELL_DYN_BRUSH = 0x8,
  WRKCMD_DPVS_ENTITY = 0x9,
  WRKCMD_ADD_SCENE_ENT = 0xA,
  WRKCMD_SPOT_SHADOW_ENT = 0xB,
  WRKCMD_SHADOW_COOKIE = 0xC,
  WRKCMD_BOUNDS_ENT_DELAYED = 0xD,
  WRKCMD_SKIN_ENT_DELAYED = 0xE,
  WRKCMD_GENERATE_FX_VERTS = 0xF,
  WRKCMD_GENERATE_MARK_VERTS = 0x10,
  WRKCMD_SKIN_XMODEL = 0x11,
  WRKCMD_COUNT = 0x12,
};

/*  919 */
enum server_hardware_types
{
  SERVERHARDWARE_UNKNOWN = 0x0,
  SERVERHARDWARE_LINUXDEDICATED = 0x1,
  SERVERHARDWARE_WINDEDICATED = 0x2,
  SERVERHARDWARE_MACDEDICATED = 0x3,
  SERVERHARDWARE_XENONDEDICATED = 0x4,
  SERVERHARDWARE_PS3DEDICATED = 0x5,
  SERVERHARDWARE_WINLISTEN = 0x6,
  SERVERHARDWARE_MACLISTEN = 0x7,
  SERVERHARDWARE_XENONLISTEN = 0x8,
  SERVERHARDWARE_PS3LISTEN = 0x9,
  MAX_SERVERHARDWARE = 0xA,
};

/*  920 */
enum $F1EC995512C3A3AC740705E060E5B3C5
{
  PA_UNVALIDATED = 0x0,
  PA_VALID = 0x1,
  PA_INVALID = 0x2,
};

/*  921 */
enum $34C2CE88BAF47EE561C6D42F9BB5C6A7
{
  ENUM_NOP = 0x0,
  ENUM_program = 0x1,
  ENUM_assignment = 0x2,
  ENUM_unknown_variable = 0x3,
  ENUM_local_variable = 0x4,
  ENUM_local_variable_frozen = 0x5,
  ENUM_primitive_expression = 0x6,
  ENUM_integer = 0x7,
  ENUM_float = 0x8,
  ENUM_minus_integer = 0x9,
  ENUM_minus_float = 0xA,
  ENUM_string = 0xB,
  ENUM_istring = 0xC,
  ENUM_array_variable = 0xD,
  ENUM_unknown_field = 0xE,
  ENUM_field_variable = 0xF,
  ENUM_field_variable_frozen = 0x10,
  ENUM_variable = 0x11,
  ENUM_function = 0x12,
  ENUM_call_expression = 0x13,
  ENUM_local_function = 0x14,
  ENUM_far_function = 0x15,
  ENUM_function_pointer = 0x16,
  ENUM_call = 0x17,
  ENUM_method = 0x18,
  ENUM_call_expression_statement = 0x19,
  ENUM_script_call = 0x1A,
  ENUM_return = 0x1B,
  ENUM_return2 = 0x1C,
  ENUM_wait = 0x1D,
  ENUM_script_thread_call = 0x1E,
  ENUM_undefined = 0x1F,
  ENUM_self = 0x20,
  ENUM_self_frozen = 0x21,
  ENUM_level = 0x22,
  ENUM_game = 0x23,
  ENUM_anim = 0x24,
  ENUM_if = 0x25,
  ENUM_if_else = 0x26,
  ENUM_while = 0x27,
  ENUM_for = 0x28,
  ENUM_inc = 0x29,
  ENUM_dec = 0x2A,
  ENUM_binary_equals = 0x2B,
  ENUM_statement_list = 0x2C,
  ENUM_developer_statement_list = 0x2D,
  ENUM_expression_list = 0x2E,
  ENUM_bool_or = 0x2F,
  ENUM_bool_and = 0x30,
  ENUM_binary = 0x31,
  ENUM_bool_not = 0x32,
  ENUM_bool_complement = 0x33,
  ENUM_size_field = 0x34,
  ENUM_self_field = 0x35,
  ENUM_precachetree = 0x36,
  ENUM_waittill = 0x37,
  ENUM_waittillmatch = 0x38,
  ENUM_waittillFrameEnd = 0x39,
  ENUM_notify = 0x3A,
  ENUM_endon = 0x3B,
  ENUM_switch = 0x3C,
  ENUM_case = 0x3D,
  ENUM_default = 0x3E,
  ENUM_break = 0x3F,
  ENUM_continue = 0x40,
  ENUM_expression = 0x41,
  ENUM_empty_array = 0x42,
  ENUM_animation = 0x43,
  ENUM_thread = 0x44,
  ENUM_begin_developer_thread = 0x45,
  ENUM_end_developer_thread = 0x46,
  ENUM_usingtree = 0x47,
  ENUM_false = 0x48,
  ENUM_true = 0x49,
  ENUM_animtree = 0x4A,
  ENUM_breakon = 0x4B,
  ENUM_breakpoint = 0x4C,
  ENUM_prof_begin = 0x4D,
  ENUM_prof_end = 0x4E,
  ENUM_vector = 0x4F,
  ENUM_object = 0x50,
  ENUM_thread_object = 0x51,
  ENUM_local = 0x52,
  ENUM_statement = 0x53,
  ENUM_bad_expression = 0x54,
  ENUM_bad_statement = 0x55,
  ENUM_include = 0x56,
  ENUM_argument = 0x57,
};

/*  922 */
enum $F4BE35BEA44C8A3231432DCF643A8B37
{
  OP_End = 0x0,
  OP_Return = 0x1,
  OP_GetUndefined = 0x2,
  OP_GetZero = 0x3,
  OP_GetByte = 0x4,
  OP_GetNegByte = 0x5,
  OP_GetUnsignedShort = 0x6,
  OP_GetNegUnsignedShort = 0x7,
  OP_GetInteger = 0x8,
  OP_GetFloat = 0x9,
  OP_GetString = 0xA,
  OP_GetIString = 0xB,
  OP_GetVector = 0xC,
  OP_GetLevelObject = 0xD,
  OP_GetAnimObject = 0xE,
  OP_GetSelf = 0xF,
  OP_GetLevel = 0x10,
  OP_GetGame = 0x11,
  OP_GetAnim = 0x12,
  OP_GetAnimation = 0x13,
  OP_GetGameRef = 0x14,
  OP_GetFunction = 0x15,
  OP_CreateLocalVariable = 0x16,
  OP_RemoveLocalVariables = 0x17,
  OP_EvalLocalVariableCached0 = 0x18,
  OP_EvalLocalVariableCached1 = 0x19,
  OP_EvalLocalVariableCached2 = 0x1A,
  OP_EvalLocalVariableCached3 = 0x1B,
  OP_EvalLocalVariableCached4 = 0x1C,
  OP_EvalLocalVariableCached5 = 0x1D,
  OP_EvalLocalVariableCached = 0x1E,
  OP_EvalLocalArrayCached = 0x1F,
  OP_EvalArray = 0x20,
  OP_EvalLocalArrayRefCached0 = 0x21,
  OP_EvalLocalArrayRefCached = 0x22,
  OP_EvalArrayRef = 0x23,
  OP_ClearArray = 0x24,
  OP_EmptyArray = 0x25,
  OP_GetSelfObject = 0x26,
  OP_EvalLevelFieldVariable = 0x27,
  OP_EvalAnimFieldVariable = 0x28,
  OP_EvalSelfFieldVariable = 0x29,
  OP_EvalFieldVariable = 0x2A,
  OP_EvalLevelFieldVariableRef = 0x2B,
  OP_EvalAnimFieldVariableRef = 0x2C,
  OP_EvalSelfFieldVariableRef = 0x2D,
  OP_EvalFieldVariableRef = 0x2E,
  OP_ClearFieldVariable = 0x2F,
  OP_SafeCreateVariableFieldCached = 0x30,
  OP_SafeSetVariableFieldCached0 = 0x31,
  OP_SafeSetVariableFieldCached = 0x32,
  OP_SafeSetWaittillVariableFieldCached = 0x33,
  OP_clearparams = 0x34,
  OP_checkclearparams = 0x35,
  OP_EvalLocalVariableRefCached0 = 0x36,
  OP_EvalLocalVariableRefCached = 0x37,
  OP_SetLevelFieldVariableField = 0x38,
  OP_SetVariableField = 0x39,
  OP_SetAnimFieldVariableField = 0x3A,
  OP_SetSelfFieldVariableField = 0x3B,
  OP_SetLocalVariableFieldCached0 = 0x3C,
  OP_SetLocalVariableFieldCached = 0x3D,
  OP_CallBuiltin0 = 0x3E,
  OP_CallBuiltin1 = 0x3F,
  OP_CallBuiltin2 = 0x40,
  OP_CallBuiltin3 = 0x41,
  OP_CallBuiltin4 = 0x42,
  OP_CallBuiltin5 = 0x43,
  OP_CallBuiltin = 0x44,
  OP_CallBuiltinMethod0 = 0x45,
  OP_CallBuiltinMethod1 = 0x46,
  OP_CallBuiltinMethod2 = 0x47,
  OP_CallBuiltinMethod3 = 0x48,
  OP_CallBuiltinMethod4 = 0x49,
  OP_CallBuiltinMethod5 = 0x4A,
  OP_CallBuiltinMethod = 0x4B,
  OP_wait = 0x4C,
  OP_waittillFrameEnd = 0x4D,
  OP_PreScriptCall = 0x4E,
  OP_ScriptFunctionCall2 = 0x4F,
  OP_ScriptFunctionCall = 0x50,
  OP_ScriptFunctionCallPointer = 0x51,
  OP_ScriptMethodCall = 0x52,
  OP_ScriptMethodCallPointer = 0x53,
  OP_ScriptThreadCall = 0x54,
  OP_ScriptThreadCallPointer = 0x55,
  OP_ScriptMethodThreadCall = 0x56,
  OP_ScriptMethodThreadCallPointer = 0x57,
  OP_DecTop = 0x58,
  OP_CastFieldObject = 0x59,
  OP_EvalLocalVariableObjectCached = 0x5A,
  OP_CastBool = 0x5B,
  OP_BoolNot = 0x5C,
  OP_BoolComplement = 0x5D,
  OP_JumpOnFalse = 0x5E,
  OP_JumpOnTrue = 0x5F,
  OP_JumpOnFalseExpr = 0x60,
  OP_JumpOnTrueExpr = 0x61,
  OP_jump = 0x62,
  OP_jumpback = 0x63,
  OP_inc = 0x64,
  OP_dec = 0x65,
  OP_bit_or = 0x66,
  OP_bit_ex_or = 0x67,
  OP_bit_and = 0x68,
  OP_equality = 0x69,
  OP_inequality = 0x6A,
  OP_less = 0x6B,
  OP_greater = 0x6C,
  OP_less_equal = 0x6D,
  OP_greater_equal = 0x6E,
  OP_shift_left = 0x6F,
  OP_shift_right = 0x70,
  OP_plus = 0x71,
  OP_minus = 0x72,
  OP_multiply = 0x73,
  OP_divide = 0x74,
  OP_mod = 0x75,
  OP_size = 0x76,
  OP_waittillmatch = 0x77,
  OP_waittill = 0x78,
  OP_notify = 0x79,
  OP_endon = 0x7A,
  OP_voidCodepos = 0x7B,
  OP_switch = 0x7C,
  OP_endswitch = 0x7D,
  OP_vector = 0x7E,
  OP_NOP = 0x7F,
  OP_abort = 0x80,
  OP_object = 0x81,
  OP_thread_object = 0x82,
  OP_EvalLocalVariable = 0x83,
  OP_EvalLocalVariableRef = 0x84,
  OP_prof_begin = 0x85,
  OP_prof_end = 0x86,
  OP_count = 0x87,
};

/*  923 */
enum $03867A11B1B3B42489FB24988FB94119
{
  STEP_CONTINUE = 0x0,
  STEP_OVER = 0x1,
  STEP_INTO = 0x2,
  STEP_OUT = 0x3,
  STEP_AUTO = 0x4,
};

/*  924 */
enum $E2769CD71BD3F06007FE83C4AAFE9C31
{
  MAX_VM_STACK_DEPTH = 0x20,
  MAX_VM_OPERAND_STACK = 0x800,
};

/*  925 */
enum $6ECA3333CAC1FE160D67FB682515BFE1
{
  LOCAL_VAR_STACK_SIZE = 0x40,
};

/*  926 */
enum $BA9F847B460546ED7BFFDBCD5B0768E1
{
  SCR_XANIM_CLIENT = 0x0,
  SCR_XANIM_SERVER = 0x1,
  SCR_XANIM_COUNT = 0x2,
};

/*  927 */
enum $87873CC668AE3C568467CB8CCACAC9A2
{
  VARIABLELIST_PARENT_SIZE = 0x5FFE,
  VARIABLELIST_PARENT_BEGIN = 0x1,
  VARIABLELIST_PARENT_END = 0x5FFF,
  VARIABLELIST_CHILD_SIZE = 0xFFFE,
  VARIABLELIST_CHILD_BEGIN = 0x6000,
  VARIABLELIST_CHILD_END = 0x15FFE,
  VARIABLELIST_PARENT_DEV_SIZE = 0x537E,
  VARIABLELIST_CHILD_DEV_SIZE = 0xF37E,
  VARIABLELIST_SIZE = 0x15FFE,
};

/*  928 */
enum $4EF2ED37309DF94BFB70F58A8A7316D8
{
  VAR_NAME_BITS = 0x8,
  VAR_NAME_LOW_MASK = 0xFFFFFF,
  VAR_NAME_HIGH_MASK = 0xFFFFFF00,
  VAR_MIN_INT = 0xFF800000,
  VAR_MAX_INT = 0x7FFFFF,
};

/*  929 */
enum $7D2241D8F7DA70849E93F03608CA5CCA
{
  VAR_MASK = 0x1F,
};

/*  930 */
enum $C1C80C5EEA031C460D44D213AE519951
{
  VAR_STAT_FREE = 0x0,
  VAR_STAT_MOVABLE = 0x20,
  VAR_STAT_HEAD = 0x40,
  VAR_STAT_EXTERNAL = 0x60,
  VAR_STAT_MASK = 0x60,
};

/*  931 */
enum $61F28D565F73FF5CB9C3C2AD2980FCA7
{
  HASH_STAT_FREE = 0x0,
  HASH_STAT_MOVABLE = 0x10000,
  HASH_STAT_HEAD = 0x20000,
  HASH_STAT_MASK = 0x30000,
};

/*  932 */
enum $31BE3B436F7CBB6536CC8909FBBBCE99
{
  HASH_NEXT_MASK = 0xFFFF,
};

/*  933 */
enum $BC6EBFA47C948483B9F0EC28F1994011
{
  SL_USER_GAME = 0x1,
  SL_USER_TEMP = 0x2,
  SL_USER_XZONE = 0x4,
  SL_USER_XZONE_TEMP = 0x8,
};

/*  934 */
enum $0165C9C3AE30200D0358F933217A4F54
{
  SOURCE_TYPE_BREAKPOINT = 0x1,
  SOURCE_TYPE_CALL = 0x2,
  SOURCE_TYPE_THREAD_START = 0x4,
  SOURCE_TYPE_BUILTIN_CALL = 0x8,
  SOURCE_TYPE_NOTIFY = 0x10,
};

/*  935 */
enum $D4BA2E19BD8FBA9AFF9F255A70CE1A8E
{
  INITIAL_OPCODE_LOOKUP_LEN = 0x40000,
  INITIAL_SOURCEPOS_LOOKUP_LEN = 0x40000,
};

/*  936 */
enum $C7885C42D96151CB6A26D4883EEBB0A2
{
  INITIAL_SOURCEBUFFER_LOOKUP_LEN = 0x100,
};

/*  937 */
enum $A09314214A03CF53E3B725A0C5A8C948
{
  SCR_DEV_NO = 0x0,
  SCR_DEV_YES = 0x1,
  SCR_DEV_IGNORE = 0x2,
};

/*  938 */
enum $6B96E6C8B9AE7918824611CC4DF03D76
{
  THREAD_COUNT = 0x0,
  THREAD_POS = 0x1,
  THREAD_INDICES = 0x2,
};

/*  939 */
enum $9C122730CDD5B3A26E00534D33DB1490
{
  BUILTIN_ANY = 0x0,
  BUILTIN_DEVELOPER_ONLY = 0x1,
};

/*  940 */
enum $E5CB004E2A30A05BB958A67A0E28C4D0
{
  FUNC_SCOPE_LOCAL = 0x0,
  FUNC_SCOPE_FAR = 0x1,
};

/*  941 */
enum $C9B837D32D3B67A796093F5BAFC05F1F
{
  SCR_ABORT_NONE = 0x0,
  SCR_ABORT_CONTINUE = 0x1,
  SCR_ABORT_BREAK = 0x2,
  SCR_ABORT_RETURN = 0x3,
  SCR_ABORT_MAX = 0x3,
};

/*  942 */
enum $9B142580F131EE6645CE9FDFAAC456D5
{
  CALL_NONE = 0x0,
  CALL_BUILTIN = 0x1,
  CALL_THREAD = 0x2,
  CALL_FUNCTION = 0x3,
};

/*  943 */
enum $27ADEAEF7BB6C93A4813D4AB6AC88913
{
  ANIMPROP_LOOPSYNC = 0x0,
  ANIMPROP_NONLOOPSYNC = 0x1,
  ANIMPROP_COMPLETE = 0x2,
  ANIMPROP_ADDITIVE = 0x3,
  ANIMPROP_COUNT = 0x4,
};

/*  944 */
enum $C096FBC08B2001022F577565A6E1DD48
{
  ANIMTREE_NAMES = 0x0,
  ANIMTREE_XANIM = 0x1,
};

/*  945 */
enum $6760350A3E11919D25BD877F859BD6F6
{
  ANIMTREE_PROPERTIES = 0x0,
};

/*  946 */
enum $B2778AB4851445F9DD200ECE4C4FB15A
{
  BACKEND_EVENT_WORKER_CMD = 0x0,
  BACKEND_EVENT_GENERIC = 0x1,
  BACKEND_EVENT_COUNT = 0x2,
};

/*  947 */
enum $C6599BE10F4D9A191AF9FEC104E334DC
{
  HUDELEMFLAG_FOREGROUND = 0x1,
  HUDELEMFLAG_HIDEWHENDEAD = 0x2,
  HUDELEMFLAG_HIDEWHENINMENU = 0x4,
  HUDELEMFLAGBITS = 0x3,
};

/*  948 */
enum pmtype_t
{
  PM_NORMAL = 0x0,
  PM_NORMAL_LINKED = 0x1,
  PM_NOCLIP = 0x2,
  PM_UFO = 0x3,
  PM_SPECTATOR = 0x4,
  PM_INTERMISSION = 0x5,
  PM_LASTSTAND = 0x6,
  PM_DEAD = 0x7,
  PM_DEAD_LINKED = 0x8,
};

/*  949 */
enum SphereEdgeTraceResult
{
  SPHERE_HITS_EDGE = 0x0,
  SPHERE_MISSES_EDGE = 0x1,
  SPHERE_MAY_HIT_V0 = 0x2,
  SPHERE_MAY_HIT_V1 = 0x3,
};

/*  950 */
enum $9B94FB67DFE5FD8D5F4161BFB17650A5
{
  SCR_SYS_GAME = 0x1,
};

/*  951 */
enum $E7B1D95E0381D419A2E31D1BE14AA034
{
  ACTIVE_STATE_INACTIVE = 0x0,
  ACTIVE_STATE_ACTIVE = 0x1,
  ACTIVE_STATE_WANTS_TURRET_DISMOUNT = 0x2,
};

/*  952 */
enum VehicleSound
{
  VEH_LOW_IDLE_SND = 0x0,
  VEH_HIGH_IDLE_SND = 0x1,
  VEH_LOW_ENGINE_SND = 0x2,
  VEH_HIGH_ENGINE_SND = 0x3,
  VEH_TURRET_SPIN_SND = 0x4,
  VEH_TURRET_STOP_SND = 0x5,
  NUM_VEHICLE_SNDS = 0x6,
};

/*  953 */
enum $3795D074AAAAB5968479B7527F325087
{
  FL_GODMODE = 0x1,
  FL_DEMI_GODMODE = 0x2,
  FL_NOTARGET = 0x4,
  FL_NO_KNOCKBACK = 0x8,
  FL_DROPPED_ITEM = 0x10,
  FL_NO_BOTS = 0x20,
  FL_NO_HUMANS = 0x40,
  FL_TOGGLE = 0x80,
  FL_SOFTACTIVATE = 0x100,
  FL_PARACHUTE = 0x200,
  FL_NO_HEADCHECK = 0x400,
  FL_SUPPORTS_LINKTO = 0x1000,
  FL_NO_AUTO_ANIM_UPDATE = 0x2000,
  FL_GRENADE_TOUCH_DAMAGE = 0x4000,
  FL_MISSILE_DESTABILIZED = 0x10000,
  FL_STABLE_MISSILES = 0x20000,
  FL_REPEAT_ANIM_UPDATE = 0x40000,
};

/*  954 */
enum $3888634A9E39D1289F3B7D5706B52E7A
{
  VFT_TYPE = 0xC,
  VFT_NUM = 0xD,
};

/*  955 */
enum $D5CAB2FB40E114F6B88AA1C7C8E9C5E9
{
  ENT_HANDLER_NULL = 0x0,
  ENT_HANDLER_TRIGGER_MULTIPLE = 0x1,
  ENT_HANDLER_TRIGGER_HURT = 0x2,
  ENT_HANDLER_TRIGGER_HURT_TOUCH = 0x3,
  ENT_HANDLER_TRIGGER_DAMAGE = 0x4,
  ENT_HANDLER_SCRIPT_MOVER = 0x5,
  ENT_HANDLER_SCRIPT_MODEL = 0x6,
  ENT_HANDLER_GRENADE = 0x7,
  ENT_HANDLER_TIMED_OBJECT = 0x8,
  ENT_HANDLER_ROCKET = 0x9,
  ENT_HANDLER_CLIENT = 0xA,
  ENT_HANDLER_CLIENT_SPECTATOR = 0xB,
  ENT_HANDLER_CLIENT_DEAD = 0xC,
  ENT_HANDLER_PLAYER_CLONE = 0xD,
  ENT_HANDLER_TURRET_INIT = 0xE,
  ENT_HANDLER_TURRET = 0xF,
  ENT_HANDLER_DROPPED_ITEM = 0x10,
  ENT_HANDLER_ITEM_INIT = 0x11,
  ENT_HANDLER_ITEM = 0x12,
  ENT_HANDLER_TRIGGER_USE = 0x13,
  ENT_HANDLER_PRIMARY_LIGHT = 0x14,
  ENT_HANDLER_PLAYER_BLOCK = 0x15,
  ENT_HANDLER_VEHICLE = 0x16,
  ENT_HANDLER_HELICOPTER = 0x17,
  ENT_HANDLER_COUNT = 0x18,
};

/*  956 */
enum VehicleMoveState
{
  VEH_MOVESTATE_STOP = 0x0,
  VEH_MOVESTATE_MOVE = 0x1,
  VEH_MOVESTATE_HOVER = 0x2,
};

/*  957 */
enum $920D92BA9911A3EA803542816B8A1B50
{
  FL_WHEEL = 0x0,
  FR_WHEEL = 0x1,
  BL_WHEEL = 0x2,
  BR_WHEEL = 0x3,
};

/*  958 */
enum DAMAGE_FLAGS
{
  DAMAGE_NOFLAG = 0x0,
  DAMAGE_RADIUS = 0x1,
  DAMAGE_NO_ARMOR = 0x2,
  DAMAGE_NO_KNOCKBACK = 0x4,
  DAMAGE_PENETRATION = 0x8,
};

/*  959 */
enum VehicleTypes
{
  VEH_WHEELS_4 = 0x0,
  VEH_TANK = 0x1,
  VEH_PLANE = 0x2,
  VEH_BOAT = 0x3,
  VEH_ARTILLERY = 0x4,
  VEH_HELICOPTER = 0x5,
  NUM_VEHICLE_TYPES = 0x6,
};

/*  960 */
enum VehicleTurretState
{
  VEH_TURRET_STOPPED = 0x0,
  VEH_TURRET_STOPPING = 0x1,
  VEH_TURRET_MOVING = 0x2,
};

/*  961 */
enum VehicleManualMode
{
  VEH_MANUAL_OFF = 0x0,
  VEH_MANUAL_ON = 0x1,
  VEH_MANUAL_TRANS = 0x2,
};

/*  962 */
enum $2C1387FB21D01FF73DDC78B93669782B
{
  FIXED_LINK_ANGLES = 0x0,
  FIXED_LINK_ANGLES_YAW_ONLY = 0x1,
  FIXED_LINK_ANGLES_NONE = 0x2,
};

/*  963 */
enum fieldtype_t
{
  F_INT = 0x0,
  F_FLOAT = 0x1,
  F_LSTRING = 0x2,
  F_STRING = 0x3,
  F_VECTOR = 0x4,
  F_ENTITY = 0x5,
  F_VECTORHACK = 0x6,
  F_OBJECT = 0x7,
  F_MODEL = 0x8,
};

/*  964 */
enum $65DA056E4313365ED2E8562D62B2A14E
{
  ENTFIELD_ENTITY = 0x0,
  ENTFIELD_SENTIENT = 0x4000,
  ENTFIELD_ACTOR = 0x8000,
  ENTFIELD_CLIENT = 0xC000,
  ENTFIELD_MASK = 0xC000,
};

/*  965 */
enum $056D4A366440905B6547B35DB90BAB80
{
  LF_NONE = 0x0,
  LF_MAP_RESTART = 0x1,
  LF_MAP_CHANGE = 0x2,
  LF_EXITLEVEL = 0x3,
};

/*  966 */
enum AntiBurnHudMenus
{
  HUD_MENU_HEALTH = 0x0,
  HUD_MENU_AMMO = 0x1,
  HUD_MENU_COMPASS = 0x2,
  HUD_MENU_STANCE = 0x3,
  HUD_MENU_OFFHAND = 0x4,
  HUD_MENU_OBJECTIVES = 0x5,
  HUD_MENU_SPRINT = 0x6,
};

/*  967 */
enum $C472F369C8B5BE7E06A4108581EA0444
{
  TURRET_REQUIRES_AI = 0x1,
  TURRET_AUTO = 0x2,
  TURRET_FIRING = 0x4,
  TURRET_HAS_MISS_TARGET = 0x8,
  TURRET_TAKEN_PAIN = 0x10,
  TURRET_ERROR_INITED = 0x20,
  TURRET_HAS_TARGET = 0x40,
  TURRET_BAD_TARGET = 0x80,
  TURRET_FIRST_PITCH_CAP = 0x100,
  TURRET_PITCH_CAP = 0x200,
  TURRET_PITCH_MIN = 0x400,
  TURRET_INIT_VIEW = 0x800,
};

/*  968 */
enum $15ECC96D9C0E42899A1476BDB4AB35E1
{
  PMOVE_HANDLER_CLIENT = 0x0,
  PMOVE_HANDLER_SERVER = 0x1,
  PMOVE_HANDLER_COUNT = 0x2,
};

/*  969 */
enum weaponstate_t
{
  WEAPON_READY = 0x0,
  WEAPON_RAISING = 0x1,
  WEAPON_RAISING_ALTSWITCH = 0x2,
  WEAPON_DROPPING = 0x3,
  WEAPON_DROPPING_QUICK = 0x4,
  WEAPON_FIRING = 0x5,
  WEAPON_RECHAMBERING = 0x6,
  WEAPON_RELOADING = 0x7,
  WEAPON_RELOADING_INTERUPT = 0x8,
  WEAPON_RELOAD_START = 0x9,
  WEAPON_RELOAD_START_INTERUPT = 0xA,
  WEAPON_RELOAD_END = 0xB,
  WEAPON_MELEE_INIT = 0xC,
  WEAPON_MELEE_FIRE = 0xD,
  WEAPON_MELEE_END = 0xE,
  WEAPON_OFFHAND_INIT = 0xF,
  WEAPON_OFFHAND_PREPARE = 0x10,
  WEAPON_OFFHAND_HOLD = 0x11,
  WEAPON_OFFHAND_START = 0x12,
  WEAPON_OFFHAND = 0x13,
  WEAPON_OFFHAND_END = 0x14,
  WEAPON_DETONATING = 0x15,
  WEAPON_SPRINT_RAISE = 0x16,
  WEAPON_SPRINT_LOOP = 0x17,
  WEAPON_SPRINT_DROP = 0x18,
  WEAPON_NIGHTVISION_WEAR = 0x19,
  WEAPON_NIGHTVISION_REMOVE = 0x1A,
};

/*  970 */
enum $B87808D01B3ED274F4CD2213A2E20C5F
{
  HE_FONT_DEFAULT = 0x0,
  HE_FONT_BIGFIXED = 0x1,
  HE_FONT_SMALLFIXED = 0x2,
  HE_FONT_OBJECTIVE = 0x3,
  HE_FONT_COUNT = 0x4,
};

/*  971 */
enum scriptAnimPerkStates_t
{
  ANIM_PERK_UNUSED = 0x0,
  ANIM_PERK_LASTSTAND = 0x1,
  ANIM_PERK_GRENADEDEATH = 0x2,
  NUM_ANIM_PERKSTATES = 0x3,
};

/*  972 */
enum PlayerSpreadOverrideState
{
  PSOS_DISABLED = 0x0,
  PSOS_RESETTING = 0x1,
  PSOS_ENABLED = 0x2,
};

/*  973 */
enum $EA4FF8530FEA0AC9E1589137BC90F99F
{
  IMPACTEFFECT_HEADSHOT = 0x1,
  IMPACTEFFECT_FATAL = 0x2,
  IMPACTEFFECT_EXIT = 0x4,
};

/*  974 */
enum $D91DF7250D497AE680597430665E65B1
{
  FX_STATUS_REF_COUNT_MASK = 0xFFFF,
  FX_STATUS_HAS_PENDING_LOOP_ELEMS = 0x10000,
  FX_STATUS_OWNED_EFFECTS_SHIFT = 0x11,
  FX_STATUS_OWNED_EFFECTS_MASK = 0x7FE0000,
  FX_STATUS_DEFER_UPDATE = 0x8000000,
  FX_STATUS_SELF_OWNED = 0x10000000,
  FX_STATUS_IS_LOCKED = 0x20000000,
  FX_STATUS_IS_LOCKED_MASK = 0x60000000,
};

/*  975 */
enum $7E23918555002659587F63136D232798
{
  FX_ELEM_CLASS_SPRITE = 0x0,
  FX_ELEM_CLASS_NONSPRITE = 0x1,
  FX_ELEM_CLASS_CLOUD = 0x2,
  FX_ELEM_CLASS_COUNT = 0x3,
};

/*  976 */
enum FxRandKey
{
  FXRAND_VELOCITY_X = 0x0,
  FXRAND_VELOCITY_Y = 0x1,
  FXRAND_VELOCITY_Z = 0x2,
  FXRAND_ANGULAR_VELOCITY_PITCH = 0x3,
  FXRAND_ANGULAR_VELOCITY_YAW = 0x4,
  FXRAND_ANGULAR_VELOCITY_ROLL = 0x5,
  FXRAND_ORIGIN_X = 0x6,
  FXRAND_ORIGIN_Y = 0x7,
  FXRAND_ORIGIN_Z = 0x8,
  FXRAND_OFFSET_YAW = 0x9,
  FXRAND_OFFSET_HEIGHT = 0xA,
  FXRAND_OFFSET_RADIUS = 0xB,
  FXRAND_ANGLES_PITCH = 0xC,
  FXRAND_ANGLES_YAW = 0xD,
  FXRAND_ANGLES_ROLL = 0xE,
  FXRAND_GRAVITY = 0xF,
  FXRAND_REFLECTION_FACTOR = 0x10,
  FXRAND_LIFE_SPAN = 0x11,
  FXRAND_SPAWN_DELAY = 0x12,
  FXRAND_SPAWN_COUNT = 0x13,
  FXRAND_EMIT_DIST = 0x14,
  FXRAND_VISUAL = 0x15,
  FXRAND_TILE_START = 0x16,
  FXRAND_COLOR = 0x17,
  FXRAND_ROTATION = 0x18,
  FXRAND_ROTATION_DELTA = 0x19,
  FXRAND_SIZE_0 = 0x1A,
  FXRAND_SIZE_1 = 0x1B,
  FXRAND_SCALE = 0x1C,
  FXRAND_COUNT = 0x1D,
};

/*  977 */
enum FxUpdateResult
{
  FX_UPDATE_REMOVE = 0x0,
  FX_UPDATE_KEEP = 0x1,
};

/*  978 */
enum $C064551EB4F71D3D0B50FB4B1C9BB704
{
  FX_EFFECT_NEEDS_LIGHTING = 0x1,
};

/*  979 */
enum GfxWarningType
{
  R_WARN_FRONTEND_ENT_LIMIT = 0x0,
  R_WARN_KNOWN_MODELS = 0x1,
  R_WARN_KNOWN_SPECIAL_MODELS = 0x2,
  R_WARN_MODEL_LIGHT_CACHE = 0x3,
  R_WARN_SCENE_ENTITIES = 0x4,
  R_WARN_TEMP_SKIN_BUF_SIZE = 0x5,
  R_WARN_MAX_SKINNED_CACHE_VERTICES = 0x6,
  R_WARN_MAX_SCENE_SURFS_SIZE = 0x7,
  R_WARN_PORTAL_PLANES = 0x8,
  R_WARN_MAX_CLOUDS = 0x9,
  R_WARN_MAX_DLIGHTS = 0xA,
  R_WARN_SMODEL_LIGHTING = 0xB,
  R_WARN_MAX_DRAWSURFS = 0xC,
  R_WARN_GFX_CODE_MESH_LIMIT = 0xD,
  R_WARN_GFX_MARK_MESH_LIMIT = 0xE,
  R_WARN_MAX_SCENE_DRAWSURFS = 0xF,
  R_WARN_MAX_FX_DRAWSURFS = 0x10,
  R_WARN_NONEMISSIVE_FX_MATERIAL = 0x11,
  R_WARN_NONLIGHTMAP_MARK_MATERIAL = 0x12,
  R_WARN_PRIM_DRAW_SURF_BUFFER_SIZE = 0x13,
  R_WARN_CMDBUF_OVERFLOW = 0x14,
  R_WARN_MISSING_DECL_NONDEBUG = 0x15,
  R_WARN_MAX_DYNENT_REFS = 0x16,
  R_WARN_MAX_SCENE_DOBJ_REFS = 0x17,
  R_WARN_MAX_SCENE_MODEL_REFS = 0x18,
  R_WARN_MAX_SCENE_BRUSH_REFS = 0x19,
  R_WARN_MAX_CODE_INDS = 0x1A,
  R_WARN_MAX_CODE_VERTS = 0x1B,
  R_WARN_MAX_CODE_ARGS = 0x1C,
  R_WARN_DEBUG_ALLOC = 0x1D,
  R_WARN_SPOT_LIGHT_LIMIT = 0x1E,
  R_WARN_WORKER_CMD_SIZE = 0x1F,
  R_WARN_UNKNOWN_STATICMODEL_SHADER = 0x20,
  R_WARN_UNKNOWN_XMODEL_SHADER = 0x21,
  R_WARN_DYNAMIC_INDEX_BUFFER_SIZE = 0x22,
  R_WARN_TOO_MANY_LIGHT_GRID_POINTS = 0x23,
  R_WARN_COUNT = 0x24,
};

/*  980 */
enum GfxDepthRangeType
{
  GFX_DEPTH_RANGE_SCENE = 0x0,
  GFX_DEPTH_RANGE_VIEWMODEL = 0x2,
  GFX_DEPTH_RANGE_FULL = 0xFFFFFFFF,
};

/*  981 */
enum $26A775274E1959BFAEBEFAA49DDF73CF
{
  SCENE_VIEW_CAMERA = 0x0,
  SCENE_VIEW_SUNSHADOW_0 = 0x1,
  SCENE_VIEW_SUNSHADOW_1 = 0x2,
  SCENE_VIEW_COUNT = 0x3,
  SCENE_VIEW_SPOTSHADOW_0 = 0x3,
  SCENE_VIEW_SPOTSHADOW_1 = 0x4,
  SCENE_VIEW_SPOTSHADOW_2 = 0x5,
  SCENE_VIEW_SPOTSHADOW_3 = 0x6,
  SCENE_VIEW_COUNT_ENTVIS = 0x7,
};

/*  982 */
enum surfaceType_t
{
  SF_TRIANGLES = 0x0,
  SF_BEGIN_STATICMODEL = 0x1,
  SF_STATICMODEL_RIGID = 0x1,
  SF_END_STATICMODEL = 0x2,
  SF_BMODEL = 0x2,
  SF_BEGIN_XMODEL = 0x3,
  SF_XMODEL_RIGID = 0x3,
  SF_XMODEL_SKINNED = 0x4,
  SF_END_XMODEL = 0x5,
  SF_BEGIN_FX = 0x5,
  SF_CODE_MESH = 0x5,
  SF_MARK_MESH = 0x6,
  SF_PARTICLE_CLOUD = 0x7,
  SF_END_FX = 0x8,
  SF_NUM_SURFACE_TYPES = 0x8,
  SF_FORCE_32_BITS = 0xFFFFFFFF,
};

/*  983 */
enum GfxRenderCommand
{
  RC_END_OF_LIST = 0x0,
  RC_SET_MATERIAL_COLOR = 0x1,
  RC_SAVE_SCREEN = 0x2,
  RC_SAVE_SCREEN_SECTION = 0x3,
  RC_CLEAR_SCREEN = 0x4,
  RC_SET_VIEWPORT = 0x5,
  RC_FIRST_NONCRITICAL = 0x6,
  RC_STRETCH_PIC = 0x6,
  RC_STRETCH_PIC_FLIP_ST = 0x7,
  RC_STRETCH_PIC_ROTATE_XY = 0x8,
  RC_STRETCH_PIC_ROTATE_ST = 0x9,
  RC_STRETCH_RAW = 0xA,
  RC_DRAW_QUAD_PIC = 0xB,
  RC_DRAW_FULL_SCREEN_COLORED_QUAD = 0xC,
  RC_DRAW_TEXT_2D = 0xD,
  RC_DRAW_TEXT_3D = 0xE,
  RC_BLEND_SAVED_SCREEN_BLURRED = 0xF,
  RC_BLEND_SAVED_SCREEN_FLASHED = 0x10,
  RC_DRAW_POINTS = 0x11,
  RC_DRAW_LINES = 0x12,
  RC_DRAW_TRIANGLES = 0x13,
  RC_PROJECTION_SET = 0x14,
  RC_COUNT = 0x15,
};

/*  984 */
enum GfxViewMode
{
  VIEW_MODE_NONE = 0x0,
  VIEW_MODE_3D = 0x1,
  VIEW_MODE_2D = 0x2,
  VIEW_MODE_IDENTITY = 0x3,
};

/*  985 */
enum GfxViewportBehavior
{
  GFX_USE_VIEWPORT_FOR_VIEW = 0x0,
  GFX_USE_VIEWPORT_FULL = 0x1,
};

/*  986 */
enum ShadowType
{
  SHADOW_NONE = 0x0,
  SHADOW_COOKIE = 0x1,
  SHADOW_MAP = 0x2,
};

/*  987 */
enum MarkFragmentsAgainstEnum
{
  MARK_FRAGMENTS_AGAINST_BRUSHES = 0x0,
  MARK_FRAGMENTS_AGAINST_MODELS = 0x1,
};

/*  988 */
enum FX_DrawElement_Setup_Handle_Overtime_Enum
{
  FX_DRAWELEMENT_SETUP_DO_NOT_HANDLE_OVERTIME = 0x0,
  FX_DRAWELEMENT_SETUP_CLAMP_OVERTIME = 0x1,
};

/*  989 */
enum $860984AE526833AB3F2FDC74356D6122
{
  PHYS_OBJ_ID_NULL = 0x0,
  PHYS_OBJ_ID_DEAD = 0xFFFFFFFF,
};

/*  990 */
enum $99E71282218846B33557A2E237F2C5C3
{
  FX_TYPE_BULLET_HIT_SMALL_NORMAL = 0x0,
  FX_TYPE_BULLET_HIT_SMALL_EXIT = 0x1,
  FX_TYPE_BULLET_HIT_LARGE_NORMAL = 0x2,
  FX_TYPE_BULLET_HIT_LARGE_EXIT = 0x3,
  FX_TYPE_SHOTGUN_HIT_NORMAL = 0x4,
  FX_TYPE_SHOTGUN_HIT_EXIT = 0x5,
  FX_TYPE_BULLET_HIT_AP_NORMAL = 0x6,
  FX_TYPE_BULLET_HIT_AP_EXIT = 0x7,
  FX_TYPE_GRENADE_BOUNCE = 0x8,
  FX_TYPE_GRENADE_EXPLODE = 0x9,
  FX_TYPE_ROCKET_EXPLODE = 0xA,
  FX_TYPE_PROJECTILE_DUD = 0xB,
  FX_TYPE_COUNT = 0xC,
};

/*  991 */
enum $E68061CEF6E9722374EDCC45A665E6F1
{
  XFILE_BLOCK_TEMP = 0x0,
  XFILE_BLOCK_RUNTIME = 0x1,
  XFILE_BLOCK_VIRTUAL = 0x2,
  XFILE_BLOCK_LARGE = 0x3,
  XFILE_BLOCK_PHYSICAL = 0x4,
  MAX_XFILE_COUNT = 0x5,
};

/*  992 */
enum $6762D7C58768FEDA0A55F8B69B3A92F9
{
  DM_MEMORY_TEMP = 0x0,
  DM_MEMORY_VIRTUAL = 0x1,
  DM_MEMORY_PHYSICAL = 0x2,
};

/*  993 */
enum MaterialWorldVertexFormat
{
  MTL_WORLDVERT_TEX_1_NRM_1 = 0x0,
  MTL_WORLDVERT_TEX_2_NRM_1 = 0x1,
  MTL_WORLDVERT_TEX_2_NRM_2 = 0x2,
  MTL_WORLDVERT_TEX_3_NRM_1 = 0x3,
  MTL_WORLDVERT_TEX_3_NRM_2 = 0x4,
  MTL_WORLDVERT_TEX_3_NRM_3 = 0x5,
  MTL_WORLDVERT_TEX_4_NRM_1 = 0x6,
  MTL_WORLDVERT_TEX_4_NRM_2 = 0x7,
  MTL_WORLDVERT_TEX_4_NRM_3 = 0x8,
  MTL_WORLDVERT_TEX_5_NRM_1 = 0x9,
  MTL_WORLDVERT_TEX_5_NRM_2 = 0xA,
  MTL_WORLDVERT_TEX_5_NRM_3 = 0xB,
};

/*  994 */
enum nodeType
{
  NODE_BADNODE = 0x0,
  NODE_PATHNODE = 0x1,
  NODE_COVER_STAND = 0x2,
  NODE_COVER_CROUCH = 0x3,
  NODE_COVER_CROUCH_WINDOW = 0x4,
  NODE_COVER_PRONE = 0x5,
  NODE_COVER_RIGHT = 0x6,
  NODE_COVER_LEFT = 0x7,
  NODE_COVER_WIDE_RIGHT = 0x8,
  NODE_COVER_WIDE_LEFT = 0x9,
  NODE_CONCEALMENT_STAND = 0xA,
  NODE_CONCEALMENT_CROUCH = 0xB,
  NODE_CONCEALMENT_PRONE = 0xC,
  NODE_REACQUIRE = 0xD,
  NODE_BALCONY = 0xE,
  NODE_SCRIPTED = 0xF,
  NODE_NEGOTIATION_BEGIN = 0x10,
  NODE_NEGOTIATION_END = 0x11,
  NODE_TURRET = 0x12,
  NODE_GUARD = 0x13,
  NODE_NUMTYPES = 0x14,
};

/*  995 */
enum file_image_flags_t
{
  IMG_FLAG_NOPICMIP = 0x1,
  IMG_FLAG_NOMIPMAPS = 0x2,
  IMG_FLAG_CUBEMAP = 0x4,
  IMG_FLAG_VOLMAP = 0x8,
  IMG_FLAG_STREAMING = 0x10,
  IMG_FLAG_LEGACY_NORMALS = 0x20,
  IMG_FLAG_CLAMP_U = 0x40,
  IMG_FLAG_CLAMP_V = 0x80,
  IMG_FLAG_DYNAMIC = 0x10000,
  IMG_FLAG_RENDER_TARGET = 0x20000,
};

/*  996 */
enum $B33BEB1F98BDE6F788ADDDE529F5A0BA
{
  TS_2D = 0x0,
  TS_FUNCTION = 0x1,
  TS_COLOR_MAP = 0x2,
  TS_UNUSED_1 = 0x3,
  TS_UNUSED_2 = 0x4,
  TS_NORMAL_MAP = 0x5,
  TS_UNUSED_3 = 0x6,
  TS_UNUSED_4 = 0x7,
  TS_SPECULAR_MAP = 0x8,
  TS_UNUSED_5 = 0x9,
  TS_UNUSED_6 = 0xA,
  TS_WATER_MAP = 0xB,
};

/*  997 */
enum $68BA7050023167B143590A548296522E
{
  ENT_DRAW_DOBJ = 0x0,
  ENT_DRAW_BRUSH = 0x1,
  ENT_DRAW_COUNT = 0x2,
};

/*  998 */
enum $C72B7C9F3CCD9DAC8AA46776495D5444
{
  CRYPT_OK = 0x0,
  CRYPT_ERROR = 0x1,
  CRYPT_NOP = 0x2,
  CRYPT_INVALID_KEYSIZE = 0x3,
  CRYPT_INVALID_ROUNDS = 0x4,
  CRYPT_FAIL_TESTVECTOR = 0x5,
  CRYPT_BUFFER_OVERFLOW = 0x6,
  CRYPT_INVALID_PACKET = 0x7,
  CRYPT_INVALID_PRNGSIZE = 0x8,
  CRYPT_ERROR_READPRNG = 0x9,
  CRYPT_INVALID_CIPHER = 0xA,
  CRYPT_INVALID_HASH = 0xB,
  CRYPT_INVALID_PRNG = 0xC,
  CRYPT_MEM = 0xD,
  CRYPT_PK_TYPE_MISMATCH = 0xE,
  CRYPT_PK_NOT_PRIVATE = 0xF,
  CRYPT_INVALID_ARG = 0x10,
  CRYPT_FILE_NOTFOUND = 0x11,
  CRYPT_PK_INVALID_TYPE = 0x12,
  CRYPT_PK_INVALID_SYSTEM = 0x13,
  CRYPT_PK_DUP = 0x14,
  CRYPT_PK_NOT_FOUND = 0x15,
  CRYPT_PK_INVALID_SIZE = 0x16,
  CRYPT_INVALID_PRIME_SIZE = 0x17,
  CRYPT_PK_INVALID_PADDING = 0x18,
};

/*  999 */
enum ltc_pkcs_1_paddings
{
  LTC_LTC_PKCS_1_V1_5 = 0x1,
  LTC_LTC_PKCS_1_OAEP = 0x2,
  LTC_LTC_PKCS_1_PSS = 0x3,
};

/* 1000 */
enum $2523EA9E50F3CCC4A9D1C992144AFF84
{
  RENDERCMD_BEGINFRAME = 0x1,
  RENDERCMD_ENDFRAME = 0x2,
};

/* 1001 */
enum $F26A47F4FC659BD9174B0378003EAEFE
{
  KEYS_ALL = 0x0,
  KEYS_GAMEPAD_ONLY = 0x1,
};

/* 1002 */
enum LocSelInputState
{
  LOC_SEL_INPUT_NONE = 0x0,
  LOC_SEL_INPUT_CONFIRM = 0x1,
  LOC_SEL_INPUT_CANCEL = 0x2,
};

/* 1003 */
enum $DD04B9AEC9065A2DCF256B7AB469366F
{
  KB_LEFT = 0x0,
  KB_RIGHT = 0x1,
  KB_FORWARD = 0x2,
  KB_BACK = 0x3,
  KB_LOOKUP = 0x4,
  KB_LOOKDOWN = 0x5,
  KB_MOVELEFT = 0x6,
  KB_MOVERIGHT = 0x7,
  KB_STRAFE = 0x8,
  KB_SPEED = 0x9,
  KB_UP = 0xA,
  KB_DOWN = 0xB,
  KB_ANYUP = 0xC,
  KB_MLOOK = 0xD,
  KB_SPECTATE = 0xE,
  KB_SPECNEXT = 0xF,
  KB_ATTACK = 0x10,
  KB_BREATH = 0x11,
  KB_FRAG = 0x12,
  KB_OFFHANDSECONDARY = 0x13,
  KB_MELEE = 0x14,
  KB_ACTIVATE = 0x15,
  KB_RELOAD = 0x16,
  KB_USE_RELOAD = 0x17,
  KB_LEANLEFT = 0x18,
  KB_LEANRIGHT = 0x19,
  KB_PRONE = 0x1A,
  KB_CROUCH = 0x1B,
  KB_THROW = 0x1C,
  KB_SPRINT = 0x1D,
  KB_NIGHTVISION = 0x1E,
  NUM_BUTTONS = 0x1F,
};

/* 1004 */
enum GamepadVirtualAxis
{
  GPAD_VIRTAXIS_SIDE = 0x0,
  GPAD_VIRTAXIS_FORWARD = 0x1,
  GPAD_VIRTAXIS_UP = 0x2,
  GPAD_VIRTAXIS_YAW = 0x3,
  GPAD_VIRTAXIS_PITCH = 0x4,
  GPAD_VIRTAXIS_ATTACK = 0x5,
  GPAD_VIRTAXIS_COUNT = 0x6,
  GPAD_VIRTAXIS_NONE = 0xFFFFFFFF,
};

/* 1005 */
enum GamepadMapping
{
  GPAD_MAP_LINEAR = 0x0,
  GPAD_MAP_SQUARED = 0x1,
  GPAD_MAP_COUNT = 0x2,
  GPAD_MAP_NONE = 0xFFFFFFFF,
};

/* 1006 */
enum weapAnimNumber_t
{
  WEAP_IDLE = 0x0,
  WEAP_FORCE_IDLE = 0x1,
  WEAP_ATTACK = 0x2,
  WEAP_ATTACK_LASTSHOT = 0x3,
  WEAP_RECHAMBER = 0x4,
  WEAP_ADS_ATTACK = 0x5,
  WEAP_ADS_ATTACK_LASTSHOT = 0x6,
  WEAP_ADS_RECHAMBER = 0x7,
  WEAP_MELEE_ATTACK = 0x8,
  WEAP_MELEE_CHARGE = 0x9,
  WEAP_DROP = 0xA,
  WEAP_RAISE = 0xB,
  WEAP_FIRST_RAISE = 0xC,
  WEAP_RELOAD = 0xD,
  WEAP_RELOAD_EMPTY = 0xE,
  WEAP_RELOAD_START = 0xF,
  WEAP_RELOAD_END = 0x10,
  WEAP_ALTSWITCHFROM = 0x11,
  WEAP_ALTSWITCHTO = 0x12,
  WEAP_QUICK_DROP = 0x13,
  WEAP_QUICK_RAISE = 0x14,
  WEAP_EMPTY_DROP = 0x15,
  WEAP_EMPTY_RAISE = 0x16,
  WEAP_SPRINT_IN = 0x17,
  WEAP_SPRINT_LOOP = 0x18,
  WEAP_SPRINT_OUT = 0x19,
  WEAP_HOLD_FIRE = 0x1A,
  WEAP_DETONATE = 0x1B,
  WEAP_NIGHTVISION_WEAR = 0x1C,
  WEAP_NIGHTVISION_REMOVE = 0x1D,
  MAX_WP_ANIMATIONS = 0x1E,
};

/* 1007 */
enum $EF3112AD559D028CA4BA2BF80BA90ED3
{
  WEAP_ANIM_VIEWMODEL_START = 0x0,
  WEAP_ANIM_VIEWMODEL_END = 0x1F,
};

/* 1008 */
enum LaserOwnerEnum
{
  LASER_OWNER_NON_PLAYER = 0x0,
  LASER_OWNER_PLAYER = 0x1,
};

/* 1009 */
enum leType_t
{
  LE_MOVING_TRACER = 0x0,
};

/* 1010 */
enum $551F59549617BEB68828B62FDC20CD24
{
  DTYPE_BOOL = 0x0,
  DTYPE_FLOAT = 0x1,
  DTYPE_VEC3 = 0x2,
};

/* 1011 */
enum $752FF802448D94C5F325EFB753F2B23C
{
  CULL_OUT = 0x0,
  CULL_CALC_POSE = 0x1,
  CULL_CALC_SKIN = 0x2,
};

/* 1012 */
enum SCOREBOARD_FIELDS
{
  SCOREBOARD_CLIENT = 0x0,
  SCOREBOARD_SCORE = 0x1,
  SCOREBOARD_PING = 0x2,
  SCOREBOARD_DEATHS = 0x3,
  SCOREBOARD_STATUSICON = 0x4,
  SCOREBOARD_RANKKILLS = 0x5,
  SCOREBOARD_RANK = 0x6,
  SCOREBOARD_ASSISTS = 0x7,
  SCOREBOARD_NUMFIELDS = 0x8,
};

/* 1013 */
enum SCOREBOARD_HEADER
{
  SCOREBOARD_SVCMD = 0x0,
  SCOREBOARD_NUMSCORES = 0x1,
  SCOREBOARD_ALLYSCORE = 0x2,
  SCOREBOARD_AXISSCORE = 0x3,
  SCOREBOARD_SCORELIMIT = 0x4,
  SCOREBOARD_HEADERSIZE = 0x5,
};

/* 1014 */
enum listColumnTypes_t
{
  LCT_NAME = 0x0,
  LCT_CLAN = 0x1,
  LCT_SCORE = 0x2,
  LCT_DEATHS = 0x3,
  LCT_PING = 0x4,
  LCT_STATUS_ICON = 0x5,
  LCT_TALKING_ICON = 0x6,
  LCT_KILLS = 0x7,
  LCT_RANK_ICON = 0x8,
  LCT_ASSISTS = 0x9,
  LCT_NUM = 0xA,
};

/* 1015 */
enum RumbleSourceType
{
  RUMBLESOURCE_INVALID = 0x0,
  RUMBLESOURCE_ENTITY = 0x1,
  RUMBLESOURCE_POS = 0x2,
};

/* 1016 */
enum CompassType
{
  COMPASS_TYPE_PARTIAL = 0x0,
  COMPASS_TYPE_FULL = 0x1,
};

/* 1017 */
enum EquipmentSound_t
{
  EQS_WALKING = 0x0,
  EQS_RUNNING = 0x1,
  EQS_SPRINTING = 0x2,
  EQS_QWALKING = 0x3,
  EQS_QRUNNING = 0x4,
  EQS_QSPRINTING = 0x5,
};

/* 1018 */
enum scriptAnimNoteType_t
{
  ANIM_NOTE_NONE = 0x0,
  ANIM_NOTE_RELOAD = 0x1,
  NUM_ANIM_NOTES = 0x2,
};

/* 1019 */
enum mg42anims_t
{
  MG42ANIM_ROOT = 0x0,
  MG42ANIM_IDLE = 0x1,
  MG42ANIM_FIRE = 0x2,
  MG42ANIM_NUM = 0x3,
};

/* 1020 */
enum helicopteranims_t
{
  HELICOPTER_ROOT = 0x0,
  HELICOPTER_ROTORS_ROTATE = 0x1,
  HELICOPTER_NUM = 0x2,
};

/* 1021 */
enum scriptAnimWeaponPositions_t
{
  ANIM_WP_HIP = 0x0,
  ANIM_WP_ADS = 0x1,
  NUM_ANIM_WEAPONPOSITIONS = 0x2,
};

/* 1022 */
enum proneCheckType_t
{
  PCT_CLIENT = 0x0,
  PCT_ACTOR = 0x1,
};

/* 1023 */
enum PmStanceFrontBack
{
  PM_STANCE_STAND = 0x0,
  PM_STANCE_PRONE = 0x1,
  PM_STANCE_CROUCH = 0x2,
  PM_STANCE_BACKWARD_FIRST = 0x3,
  PM_STANCE_BACKWARD_RUN = 0x3,
  PM_STANCE_BACKWARD_PRONE = 0x4,
  PM_STANCE_BACKWARD_CROUCH = 0x5,
  NUM_PM_STANCE_FRONTBACK = 0x6,
};

/* 1024 */
enum animBodyPart_t
{
  ANIM_BP_UNUSED = 0x0,
  ANIM_BP_LEGS = 0x1,
  ANIM_BP_TORSO = 0x2,
  ANIM_BP_BOTH = 0x3,
  NUM_ANIM_BODYPARTS = 0x4,
};

/* 1025 */
enum scriptAnimStrafeStates_t
{
  ANIM_STRAFE_NOT = 0x0,
  ANIM_STRAFE_LEFT = 0x1,
  ANIM_STRAFE_RIGHT = 0x2,
  NUM_ANIM_STRAFESTATES = 0x3,
};

/* 1026 */
enum invalid_cmd_hint_t
{
  INVALID_CMD_NO_HINT = 0x0,
  INVALID_CMD_STAND_HINT = 0x1,
  INVALID_CMD_CROUCH_HINT = 0x2,
};

/* 1027 */
enum MantleAnims
{
  MANTLE_ROOT = 0x0,
  MANTLE_UP_57 = 0x1,
  MANTLE_UP_51 = 0x2,
  MANTLE_UP_45 = 0x3,
  MANTLE_UP_39 = 0x4,
  MANTLE_UP_33 = 0x5,
  MANTLE_UP_27 = 0x6,
  MANTLE_UP_21 = 0x7,
  MANTLE_OVER_HIGH = 0x8,
  MANTLE_OVER_MID = 0x9,
  MANTLE_OVER_LOW = 0xA,
  MANTLE_ANIM_COUNT = 0xB,
  MANTLE_UP_FIRST = 0x1,
  MANTLE_UP_LAST = 0x7,
  MANTLE_UP_COUNT = 0x7,
  MANTLE_OVER_FIRST = 0x8,
  MANTLE_OVER_LAST = 0xA,
  MANTLE_OVER_COUNT = 0x3,
};

/* 1028 */
enum animScriptParseMode_t
{
  PARSEMODE_DEFINES = 0x0,
  PARSEMODE_ANIMATION = 0x1,
  PARSEMODE_CANNED_ANIMATIONS = 0x2,
  PARSEMODE_STATECHANGES = 0x3,
  PARSEMODE_EVENTS = 0x4,
  NUM_PARSEMODES = 0x5,
};

/* 1029 */
enum animScriptConditionTypes_t
{
  ANIM_CONDTYPE_BITFLAGS = 0x0,
  ANIM_CONDTYPE_VALUE = 0x1,
  NUM_ANIM_CONDTYPES = 0x2,
};

/* 1030 */
enum animScriptMounted_t
{
  MOUNTED_UNUSED = 0x0,
  MOUNTED_MG42 = 0x1,
  NUM_ANIM_COND_MOUNTED = 0x2,
};

/* 1031 */
enum D3DXShader::FloatFieldFormat
{
  FIXED_3_4 = 0x0,
  FIXED_4_1 = 0x1,
};

/* 1032 */
enum D3DXShader::FType
{
  eFFT_ID = 0x0,
  eFFT_Bool = 0x1,
  eFFT_UInt = 0x2,
  eFFT_Int = 0x3,
  eFFT_Fixed = 0x4,
};

/* 1033 */
enum D3DXShader::VFetchFields
{
  eVFPrefetchCount = 0x0,
  eVFSigned = 0x1,
  eVFNumFormat = 0x2,
  eVFRoundIndex = 0x3,
  eVFDataFormat = 0x4,
  eVFExpAdjust = 0x5,
  eVFMiniFetch = 0x6,
  eVFStride = 0x7,
  eVFOffset = 0x8,
  eVFSemantic = 0x9,
  eVFUseTextureCache = 0xA,
};

/* 1034 */
typedef D3D::TFetchField D3DXShader::TFetchField;

/* 1035 */
enum D3DXShader::DEFCONST_PARSE_TYPE
{
  DEFCONST_PARSE_TYPE_BASIC = 0x0,
  DEFCONST_PARSE_TYPE_STRUCT_MEMBER = 0x1,
  DEFCONST_PARSE_TYPE_ARRAY_ELEMENT = 0x2,
};

/* 1036 */
enum D3DXShader::ConfigFields
{
  eVsMaxReg = 0x0,
  ePsMaxReg = 0x1,
  eVsResource = 0x2,
  ePsResource = 0x3,
  eParamGen = 0x4,
  eGenIndexPix = 0x5,
  eVsExportCount = 0x6,
  eVsExportMode = 0x7,
  ePsExportZ = 0x8,
  ePsExportColorCount = 0x9,
  eGenIndexVtx = 0xA,
  eInstPredOptimize = 0xB,
  eOutputScreenXY = 0xC,
  eParamGenPos = 0xD,
  ePerfCounterRef = 0xE,
  eYieldOptimize = 0xF,
  eTxCacheSelect = 0x10,
  eCustomInterpOrder = 0x11,
  eAutoSerialize = 0x12,
  eAutoExec = 0x13,
  eAutoZ = 0x14,
  eAutoResource = 0x15,
};

/* 1037 */
enum D3DXShader::CRFType
{
  eCRFT_ID = 0x0,
  eCRFT_Bool = 0x1,
  eCRFT_UInt = 0x2,
};

/* 1038 */
enum D3DXShader::eTokenizerState
{
  eNormal = 0x0,
  eLookingForPeriod = 0x1,
  eLookingForMask = 0x2,
};

/* 1039 */
enum D3DXShader::PROD
{
  P_SHADER_0 = 0x0,
  P_SHADER_1 = 0x1,
  P_STATEMENTS_0 = 0x2,
  P_STATEMENTS_1 = 0x3,
  P_DIRSTATEMENT_0 = 0x4,
  P_DIRSTATEMENT_1 = 0x5,
  P_DIRSTATEMENT_2 = 0x6,
  P_DIRSTATEMENT_3 = 0x7,
  P_DIRECTIVE_0 = 0x8,
  P_SERSTATEMENT_0 = 0x9,
  P_SERSTATEMENT_1 = 0xA,
  P_COSTATEMENT_0 = 0xB,
  P_COSTATEMENT_1 = 0xC,
  P_PREDSTATEMENT_0 = 0xD,
  P_PREDSTATEMENT_1 = 0xE,
  P_STATEMENT_0 = 0xF,
  P_STATEMENT_1 = 0x10,
  P_STATEMENT_2 = 0x11,
  P_STATEMENT_3 = 0x12,
  P_STATEMENT_4 = 0x13,
  P_STATEMENT_5 = 0x14,
  P_STATEMENT_6 = 0x15,
  P_STATEMENT_7 = 0x16,
  P_STATEMENT_8 = 0x17,
  P_STATEMENT_9 = 0x18,
  P_STATEMENT_10 = 0x19,
  P_STATEMENT_11 = 0x1A,
  P_STATEMENT_12 = 0x1B,
  P_STATEMENT_12_B = 0x1C,
  P_STATEMENT_13 = 0x1D,
  P_STATEMENT_13_B = 0x1E,
  P_STATEMENT_14 = 0x1F,
  P_STATEMENT_15 = 0x20,
  P_STATEMENT_16 = 0x21,
  P_STATEMENT_17 = 0x22,
  P_STATEMENT_18 = 0x23,
  P_STATEMENT_19 = 0x24,
  P_STATEMENT_20 = 0x25,
  P_STATEMENT_21 = 0x26,
  P_STATEMENT_22 = 0x27,
  P_STATEMENT_23 = 0x28,
  P_OPTIONS_0 = 0x29,
  P_OPTIONSR_0 = 0x2A,
  P_OPTIONSR_1 = 0x2B,
  P_OPTION_0 = 0x2C,
  P_OPTION_1 = 0x2D,
  P_NAME_0 = 0x2E,
  P_VALUE_0 = 0x2F,
  P_VALUE_1 = 0x30,
  P_VALUE_2 = 0x31,
  P_DST_0 = 0x32,
  P_DST_1 = 0x33,
  P_SRC_0 = 0x34,
  P_SRC_1 = 0x35,
  P_SRC_2 = 0x36,
  P_SRC_3 = 0x37,
  P_SRC2_0 = 0x38,
  P_SRC2_1 = 0x39,
  P_SRC3_0 = 0x3A,
  P_SRC3_1 = 0x3B,
  P_REG_0 = 0x3C,
  P_REG_1 = 0x3D,
  P_REL_0 = 0x3E,
  P_REL_1 = 0x3F,
  P_REL2_0 = 0x40,
  P_REL2_1 = 0x41,
  P_BOOL_0 = 0x42,
  P_BOOL_1 = 0x43,
  P_INT_0 = 0x44,
  P_INT_1 = 0x45,
  P_INT_2 = 0x46,
  P_NUM_0 = 0x47,
  P_NUM_1 = 0x48,
  P_NUM_2 = 0x49,
  P_NUM_3 = 0x4A,
  P_NUM_4 = 0x4B,
  P_NUM_5 = 0x4C,
  P_OP0_0 = 0x4D,
  P_OP1_0 = 0x4E,
  P_OP2_0 = 0x4F,
  P_OP3_0 = 0x50,
  P_OP4_0 = 0x51,
  P_OP5_0 = 0x52,
  P_DEFF_0 = 0x53,
  P_DEFI_0 = 0x54,
  P_DEFB_0 = 0x55,
  P_FLO0_OPTLIST_0 = 0x56,
  P_FLO1_0 = 0x57,
  P_FLO1_OPTLIST_0 = 0x58,
  P_FLO2_0 = 0x59,
  P_FLO2_OPTLIST_0 = 0x5A,
  P_OPTLIST_0 = 0x5B,
  P_FETCH1_0 = 0x5C,
  P_FETCH1B_0 = 0x5D,
  P_FETCH2_0 = 0x5E,
  P_FETCH3_0 = 0x5F,
  P_ID_0 = 0x60,
  P_UINT_0 = 0x61,
  P_FLOAT_0 = 0x62,
  P_CONSTANTTABLE_0 = 0x63,
};

/* 1040 */
enum $E94182B8A3A4AF935484C57FCB0CA1ED
{
  SWIZZLE = 0x0,
  SIGN = 0x1,
};

/* 1041 */
enum $D064C42DA0A5F9421F883776B4804EAA
{
  ARG_VOID = 0x0,
  ARG_LITERAL = 0x1,
  ARG_CONSTANT = 0x2,
  ARG_INPUT = 0x3,
  ARG_OUTPUTF = 0x4,
  ARG_OUTPUTB = 0x5,
  ARG_OUTPUTI = 0x6,
  ARG_RESULT = 0x7,
  ARG_ADDRESS = 0x8,
  ARG_INPOINTER = 0x9,
};

/* 1042 */
enum $5BB838DDDC07720FE7B1AF7A32E6C13A
{
  _11 = 0x0,
  _12 = 0x1,
  _13 = 0x2,
  _14 = 0x3,
  _21 = 0x4,
  _22 = 0x5,
  _23 = 0x6,
  _24 = 0x7,
  _31 = 0x8,
  _32 = 0x9,
  _33 = 0xA,
  _34 = 0xB,
  _41 = 0xC,
  _42 = 0xD,
  _43 = 0xE,
  _44 = 0xF,
};

/* 1043 */
enum D3DXShader::_D3DXSHADER_TYPE
{
  D3DXST_VS = 0x0,
  D3DXST_PS = 0x1,
  D3DXST_BUFFER = 0x2,
};

/* 1044 */
enum D3DXShader::_SHADER_VERSION
{
  VS_1_1 = 0x0,
  VS_2_0 = 0x1,
  VS_2_X = 0x2,
  VS_2_SW = 0x3,
  VS_3_0 = 0x4,
  VS_3_SW = 0x5,
  PS_1_1 = 0x6,
  PS_1_2 = 0x7,
  PS_1_3 = 0x8,
  PS_1_4 = 0x9,
  PS_2_0 = 0xA,
  PS_2_ALPHA2 = 0xB,
  PS_2_X = 0xC,
  PS_2_SW = 0xD,
  PS_3_0 = 0xE,
  PS_3_SW = 0xF,
  NUM_SHADER_VERSIONS = 0x10,
};

/* 1045 */
enum XGRAPHICS::ShaderPDBBuilder::State
{
  eNotInitialized = 0x0,
  eInitialized = 0x1,
  eInShader = 0x2,
  eDoneShader = 0x3,
};

/* 1046 */
enum XGRAPHICS::SHADER_RS_STATUS
{
  E_UNCHECKED = 0x0,
  E_COMPATIBLE = 0x1,
  E_NOT_COMPATIBLE = 0x2,
};

/* 1047 */
enum XGRAPHICS::_E_PP_SHADER_TYPE
{
  E_PP_VERTEX_SHADER = 0x0,
  E_PP_PIXEL_SHADER = 0x1,
  E_PP_REALTIME_SHADER = 0x2,
};

/* 1048 */
enum D3DXShader::AbsOperandDisposition
{
  ABS_CANT = 0x1,
  ABS_CAN = 0x2,
  ABS_MUST = 0x4,
};

/* 1049 */
enum D3DXShader::DebugOption
{
  DB__RANGE_GENERAL_START = 0x1,
  DB_GRAPH_BETWEEN_PHASES = 0x1,
  DB_INSTR_LIST_OPERATIONS = 0x2,
  DB_PERF_DATA = 0x3,
  DB_FINAL_PERF_DATA = 0x4,
  DB_SILENT_ASSERT = 0x5,
  DB_DISABLE_VALIDATION = 0x6,
  DB_INSTR_MARKS = 0x7,
  DB_INSTR_WORK_LIST = 0x8,
  DB_DUMP_GRAPH_ON_FAILURE = 0x9,
  DB_PARANOID_VALIDATION = 0xA,
  DB_BLOCK_VISIT = 0xB,
  DB_PRINT_ALL_FUNCTION_NAMES = 0xC,
  DB_BREAK_ON_ASSERT = 0xD,
  DB_BREAK_ON_FATAL_ERROR = 0xE,
  DB_INSTR_REG_ASSIGN = 0xF,
  DB_DONT_PRINT_ENABLED_DEBUG_OPTIONS = 0x10,
  DB_PREPHASE_VALIDATION = 0x11,
  DB_INCLUDE_DEBUG_INFO_IN_SPEW = 0x12,
  DB_PRINT_CONTEXT_INFO_CHANGE = 0x13,
  DB_FORCE_XOd = 0x14,
  DB_FORCE_XOautoz = 0x15,
  DB_PRINT_DEFS_LIVE_OUT_SETS = 0x16,
  DB__RANGE_IMPORT_START = 0x64,
  DB_PARSE_TREE = 0x64,
  DB_IMPORT_PARSE_STACK = 0x65,
  DB_IMPORT_RESULT_STACK = 0x66,
  DB_IMPORT_RESULT_STACK_CONTENTS = 0x67,
  DB_IMPORT_FUNCTION_DECLS = 0x68,
  DB_IMPORT_PRINT_BLOCK_AFTER_REDUCE = 0x69,
  DB_IMPORT_VARIABLE_LAYOUT = 0x6A,
  DB_IMPORT_VARIABLE_ASSIGNMENTS = 0x6B,
  DB_IMPORT_STMTS = 0x6C,
  DB_IMPORT_PERMIT_A0_IN_INLINE_UCODE = 0x6D,
  DB_IMPORT_USE_DOT_INSTRUCTIONS = 0x6E,
  DB_IMPORT_FORCE_BRANCH = 0x6F,
  DB_IMPORT_FORCE_FLATTEN = 0x70,
  DB_IMPORT_FORCE_PREDICATE = 0x71,
  DB_IMPORT_FORCE_PREDICATE_BLOCK = 0x72,
  DB_IMPORT_FORCE_ISOLATE_POSITION = 0x73,
  DB_IMPORT_FORCE_ISOLATE_ALL_OUTPUTS = 0x74,
  DB_IMPORT_FORCE_ISOLATE_STATEMENTS = 0x75,
  DB_IMPORT_XOd_FORCE_INLINING = 0x76,
  DB_IMPORT_FORCE_PREDICATE_ALL = 0x77,
  DB_IMPORT_FORCE_PREDICATE_ANY = 0x78,
  DB__RANGE_CFG_START = 0x96,
  DB_CFG_PARENTS = 0x96,
  DB_CFG_DOMINATORS = 0x98,
  DB_CFG_DOM_FRONTIER = 0x99,
  DB_CFG_DOM_FRONTIER_VERBOSE = 0x9A,
  DB__RANGE_SSA_START = 0xC8,
  DB_SSA = 0xC8,
  DB_SSA_VERBOSE = 0xC9,
  DB_SSA_NO_DEBUG_INFO_COPIES = 0xCA,
  DB__RANGE_OPT_START = 0xFA,
  DB_OPT = 0xFA,
  DB_OPT_INLINE_EACH_GRAPH = 0xFB,
  DB_OPT_INLINE_VERBOSE = 0xFC,
  DB_OPT_CONST_PROP = 0xFD,
  DB_OPT_CONST_PROP_REMOVE_PREDS = 0xFE,
  DB_OPT_CONST_PROP_VERBOSE = 0xFF,
  DB_OPT_DEAD_CODE = 0x100,
  DB_OPT_SIMPLIFY = 0x101,
  DB_OPT_SIMPLIFY_VERBOSE = 0x102,
  DB_OPT_SIMPLIFY_QUEUE = 0x103,
  DB_OPT_PREDICATION = 0x104,
  DB_OPT_PREDICATION_EACH_GRAPH = 0x105,
  DB_OPT_PREDICATION_EACH_CND_GRAPH = 0x106,
  DB_OPT_LOOPS = 0x107,
  DB_OPT_LOOP_INVARIANT = 0x108,
  DB_OPT_LOOP_TEST_DUP = 0x109,
  DB_OPT_LOOP_UNROLL = 0x10A,
  DB_OPT_LOOP_INT_REG_GRAPH = 0x10B,
  DB_OPT_LOOP_REMAINING_USES = 0x10C,
  DB_OPT_LOOP_DUMP_GRAPH_BEFORE_IND_VARS = 0x10D,
  DB_OPT_DFO = 0x10E,
  DB_OPT_DFO_VERBOSE = 0x10F,
  DB_OPT_REORDER = 0x110,
  DB_OPT_REORDER_VERBOSE = 0x111,
  DB_OPT_SUM_OF_PRODUCTS = 0x112,
  DB_OPT_LOOP_USE_INDEX_REGISTER = 0x113,
  DB_OPT_PREPARE_INLINE_ASM = 0x114,
  DB_OPT_CONST_PROP_FINAL_GRAPH = 0x115,
  DB_OPT_ISOLATE_OUTPUTS = 0x116,
  DB_OPT_ISOLATE_OUTPUTS_VERBOSE = 0x117,
  DB_OPT_INLINE_VERBOSE_2 = 0x118,
  DB_OPT_INLINING_PATCH_ENTRY_BLOCK_DEPENDENCIES = 0x119,
  DB_OPT_PERMIT_PROBE_REDIRECTION = 0x11A,
  DB_OPT_PREDICATION_STACK_SUMMARY = 0x11B,
  DB_OPT_PREDICATION_STACK_CHANGES = 0x11C,
  DB_OPT_INLINE_REQUIREMENTS = 0x11D,
  DB_OPT_REDUNDANT_NORMALIZE = 0x11E,
  DB_OPT_INLINE_GRAPH_AFTER_PATCHING_PARAM_PHIS = 0x11F,
  DB_OPT_INLINE_PATCHING_PARAM_PHIS_EACH_GRAPH = 0x120,
  DB__RANGE_NO_OPT_START = 0x12C,
  DB_OPT_NO_NORMALIZE_IMPORTED_MICROCODE = 0x12C,
  DB_OPT_NO_INLINING = 0x12D,
  DB_OPT_NO_CONSTANT_PROPAGATION = 0x12E,
  DB_OPT_NO_DEAD_CODE_REMOVAL = 0x12F,
  DB_OPT_NO_MERGE_BLOCKS = 0x130,
  DB_OPT_NO_SIMPLIFY = 0x131,
  DB_OPT_NO_CANONICALIZE = 0x132,
  DB_OPT_NO_CANONICALIZE_SHIFT_LEFT = 0x133,
  DB_OPT_NO_CANONICALIZE_SORT = 0x134,
  DB_OPT_NO_CSE = 0x135,
  DB_OPT_NO_SIMPLIFY_CONSTANT_PROP = 0x136,
  DB_OPT_NO_SIMPLIFY_MUL = 0x137,
  DB_OPT_NO_SIMPLIFY_PER_COMPONENT = 0x138,
  DB_OPT_NO_SIMPLIFY_NOT_PER_COMPONENT = 0x139,
  DB_OPT_NO_SIMPLIFY_SUM_OF_PRODUCTS = 0x13A,
  DB_OPT_NO_SIMPLIFY_FACTORING = 0x13B,
  DB_OPT_NO_SIMPLIFY_MUL_2_TO_ADD = 0x13C,
  DB_OPT_NO_SIMPLIFY_BETTER_EXPRESSION_OPTS = 0x13D,
  DB_OPT_NO_SIMPLIFY_HOISTING = 0x13E,
  DB_OPT_NO_SIMPLIFY_SIN_COS_NORMALIZATION_WITH_FRACT = 0x13F,
  DB_OPT_NO_SIMPLIFY_SIN_COS_NORMALIZATION_WITHOUT_FRACT = 0x140,
  DB_OPT_NO_SIMPLIFY_FRACT_OUTPUT_BOUNDS = 0x141,
  DB_OPT_NO_SIMPLIFY_TRUNC_VFETCH = 0x142,
  DB_OPT_NO_SIMPLIFY_SATURATED_INPUTS = 0x143,
  DB_OPT_NO_FETCH_CONSTANTS = 0x144,
  DB_OPT_NO_LOOP_OPTS = 0x145,
  DB_OPT_NO_LOOP_CONSTANT_PROP = 0x146,
  DB_OPT_NO_LOOP_DEAD_CODE_REMOVAL = 0x147,
  DB_OPT_NO_LOOP_SIMPLIFY = 0x148,
  DB_OPT_LOOP_DONT_USE_INDEX_REGISTER = 0x149,
  DB_OPT_NO_DFO = 0x14A,
  DB_OPT_NO_PREDICATION = 0x14B,
  DB_OPT_NO_VECTORIZE = 0x14C,
  DB_OPT_NO_VECTORIZE_REDUCE_PREDS = 0x14D,
  DB_OPT_NO_VECTORIZE_COMBINE_LOW_COST = 0x14E,
  DB_OPT_NO_VECTORIZE_ADD_CHAIN_TO_DOT_PRODUCT = 0x14F,
  DB_OPT_NO_VECTORIZE_DOT2ADD = 0x150,
  DB_OPT_NO_VECTORIZE_CANONICALIZE_DOT_ADD_CHAIN = 0x151,
  DB_OPT_NO_VECTORIZE_DOT_PRODUCTS = 0x152,
  DB_OPT_NO_VECTORIZE_COMBINE_ONE_MERGE = 0x153,
  DB_OPT_NO_VECTORIZE_LOW_COST_REPLACEMENT = 0x154,
  DB_OPT_NO_VECTORIZE_MERGE_ADD_MUL_COPIES = 0x155,
  DB_OPT_NO_VECTORIZE_COMBINE_GET_GRADIENTS = 0x156,
  DB_OPT_NO_LATE_PEEPS = 0x157,
  DB_OPT_NO_CONDITION_REGISTERS = 0x158,
  DB_OPT_NO_SCHEDULING = 0x159,
  DB_OPT_NO_COISSUE = 0x15A,
  DB_OPT_NO_SMASHING = 0x15B,
  DB_OPT_NO_SMASH_TWO_OPERAND_SCALAR_CONFLICTS = 0x15C,
  DB_OPT_NO_EARLY_SMASHING = 0x15D,
  DB_OPT_NO_EARLY_COISSUE = 0x15E,
  DB_OPT_NO_CONDITIONAL_EXECUTE = 0x15F,
  DB_OPT_NO_REG_COPY_COMBINING = 0x160,
  DB_OPT_NO_PREDICATION_OPTIMIZATION = 0x161,
  DB_OPT_NO_FINAL_COISSUE = 0x162,
  DB_OPT_NO_FINAL_SMASHING = 0x163,
  DB_OPT_NO_EXECE_NOP = 0x164,
  DB_OPT_NO_EXEC_EXIT_MERGING = 0x165,
  DB_OPT_NO_PRED_CEXEC = 0x166,
  DB_OPT_NO_A0_COND_EXEC_CONSISTENCY = 0x167,
  DB__RANGE_CLEAN_START = 0x17C,
  DB_CLEAN = 0x17C,
  DB_CLEAN_MERGE = 0x17D,
  DB_CLEAN_CLAMPED = 0x17E,
  DB_CLEAN_VERBOSE = 0x17F,
  DB_CLEAN_BREAK_DEPS = 0x180,
  DB_CLEAN_PATHLEN = 0x181,
  DB_CLEAN_GLOBREGS = 0x182,
  DB_CLEAN_EXPAND_MERGE = 0x183,
  DB_CLEAN_REDUCE_MERGE = 0x184,
  DB_CLEAN_INSERT_ALLOCS = 0x185,
  DB__RANGE_VECTORIZE_START = 0x190,
  DB_VECTORIZE = 0x190,
  DB_VECTORIZE_VERBOSE = 0x191,
  DB_VECTORIZE_EACH_DEPENDENCY_GRAPH = 0x192,
  DB_VECTORIZE_UNRELATED_CONFLICTS = 0x193,
  DB_VECTORIZE_GROUPS_BEFORE_COMBINING = 0x195,
  DB_VECTORIZE_EXISTING_MERGE_NO_COST = 0x196,
  DB_VECTORIZE_MERGE_SUM_OF_SCALARS = 0x197,
  DB_VECTORIZE_DUMP_ENTIRE_GRAPH = 0x198,
  DB__RANGE_LATE_PEEPS_START = 0x1C2,
  DB_LATE_PEEPS = 0x1C2,
  DB__RANGE_SCHEDULER_START = 0x1F4,
  DB_SCHED_QUEUE = 0x1F4,
  DB_SCHED_PATHLEN = 0x1F5,
  DB_SCHED_SMASH = 0x1F6,
  DB_SCHED_SIMULATOR = 0x1F7,
  DB_SCHED_BLOCK_OUTPUTS = 0x1F8,
  DB_SCHED_QUEUE_VERBOSE = 0x1F9,
  DB_SCHED_COISSUE_VERBOSE = 0x1FA,
  DB_SCHED_QUEUE_PRED_INSTRS_FIRST = 0x1FB,
  DB_SCHED_SIMULATOR_STATE = 0x1FC,
  DB_SCHED_HAZARDS = 0x1FD,
  DB_SCHED_GRAPH_AFTER_FETCHVALIDONLY = 0x1FE,
  DB_SCHED_MOVEMENT_RANGES = 0x1FF,
  DB_SCHED_MOVEMENT_CANDIDATES = 0x200,
  DB_SCHED_MOVEMENT = 0x201,
  DB__RANGE_CONSTREG_START = 0x226,
  DB_CONSTREG = 0x226,
  DB_CONSTREG_SETS = 0x227,
  DB_CONSTREG_REWRITE = 0x228,
  DB__RANGE_GLOBALREG_START = 0x258,
  DB_GLOBALREG = 0x258,
  DB_GLOBALREG_DEF_USE_SETS = 0x259,
  DB_GLOBALREG_DEAD_DEFS = 0x25A,
  DB_GLOBALREG_LIVENESS = 0x25B,
  DB_GLOBALREG_LIVENESS_VERBOSE = 0x25C,
  DB_GLOBALREG_INTF = 0x25D,
  DB_GLOBALREG_DUMP_INTF = 0x25E,
  DB_GLOBALREG_COALESCE_PHIS = 0x25F,
  DB_GLOBALREG_REGISTER_GROUPS = 0x260,
  DB_GLOBALREG_REG_GROUPS_VERBOSE = 0x261,
  DB_GLOBALREG_GROUP_INTF = 0x262,
  DB_GLOBALREG_GROUP_REGASSIGN = 0x263,
  DB_GLOBALREG_REWRITE = 0x264,
  DB_GLOBALREG_PARANOID_VALIDATION = 0x265,
  DB_GLOBALREG_COMP_INTF_CHECK = 0x266,
  DB_GLOBALREG_GRAPH_BEFORE_GROUPS = 0x267,
  DB_GLOBALREG_GRAPH_BEFORE_COPY = 0x268,
  DB_GLOBALREG_COALESCE_PHIS_DUMP_GRAPH = 0x269,
  DB_GLOBALREG_FORCE_EVERYTHING_GLOBAL = 0x26A,
  DB_GLOBALREG_GRAPH_AFTER_LIVENESS = 0x26B,
  DB_GLOBALREG_DUMP_GROUPS_AFTER_EACH_REGASSIGN = 0x26C,
  DB_GLOBALREG_PICK_GROUP_REG_VERBOSE = 0x26D,
  DB_GLOBALREG_FINAL_REGISTER_GROUPS = 0x26E,
  DB_GLOBALREG_COMBINE_GROUP_OPERATIONS = 0x26F,
  DB_GLOBALREG_JUSTIFY_COPIES = 0x270,
  DB_GLOBALREG_FINAL_LIVENESS = 0x271,
  DB_GLOBALREG_FINAL_REGISTER_GROUP_MEMBERS = 0x272,
  DB_GLOBALREG_SORT_PROLOGUES = 0x273,
  DB_GLOBALREG_DUMP_MAPPINGS = 0x274,
  DB__RANGE_LOCALREG_START = 0x28A,
  DB_LOCALREG_INSTR = 0x28A,
  DB_LOCALREG_SETS = 0x28B,
  DB_LOCALREG_GLOBAL_INTF = 0x28C,
  DB_LOCALREG_USAGE = 0x28D,
  DB_LOCALREG_FORCE_OPT = 0x28E,
  DB_LOCALREG_REPLACE_LAST_ITERATION = 0x28F,
  DB_LOCALREG_PEAK_INSTRS = 0x290,
  DB_LOCALREG_CROSS_PEAK_INSTRS = 0x291,
  DB_LOCALREG_PENDING_RELOCATE = 0x292,
  DB_LOCALREG_SOLUTIONS = 0x293,
  DB_LOCALREG_SOLUTION_EACH_GRAPH = 0x294,
  DB_LOCALREG_BLOCK_EACH_ITERATION = 0x295,
  DB_LOCALREG_BLOCK_BEFORE_COMMIT = 0x296,
  DB_LOCALREG_SIMULATOR_STATE = 0x297,
  DB_LOCALREG_SOLUTION_ROLLBACK = 0x298,
  DB_LOCALREG_SOLUTION_ROLLBACK_GRAPH = 0x299,
  DB_LOCALREG_FAILED_SOLUTIONS = 0x29A,
  DB_LOCALREG_LONGEST_SOLUTION_PROGRESS = 0x29B,
  DB_LOCALREG_SOLUTION_EACH_INSTR = 0x29C,
  DB_LOCALREG_PRINT_HAZARDS = 0x29D,
  DB_LOCALREG_REASSIGN_CONFLICTS_PRINT_BLOCK_BEFORE_AFTER = 0x29E,
  DB_LOCALREG_DEBUG_REASSIGN = 0x29F,
  DB_LOCALREG_ONE_INSTR_PER_GROUP = 0x2A0,
  DB_LOCALREG_BREAK_CROSS_GROUP_CRITICAL_REG_DEPS = 0x2A1,
  DB_LOCALREG_DISABLE_TIMEOUT = 0x2A2,
  DB__RANGE_EMIT_START = 0x2BC,
  DB_EMIT_DISASM = 0x2BC,
  DB_EMIT_VALIDATE = 0x2BD,
  DB_EMIT_DUMP_BEFORE_GetMicrocode = 0x2BE,
  DB_EMIT_DUMP_VARIABLE_LIFETIMES = 0x2BF,
  DB_EMIT_DUMP_VARIABLE_LIFETIMES_VERBOSE = 0x2C0,
  DB_EMIT_SUPPRESS_UNUSED_PS_INPUT_WARNING = 0x2C1,
  DB_EMIT_DUMP_GRAPH_AFTER_ENCODING = 0x2C2,
  DB__RANGE_LAST_START = 0x2EE,
  DB_LAST = 0x2EE,
};

/* 1050 */
enum D3DXShader::ErrorContextType
{
  ERRCTX_PARSE_NODE = 0x0,
  ERRCTX_INSTR = 0x1,
  ERRCTX_BLOCK = 0x2,
};

/* 1051 */
enum D3DXShader::ErrorCode
{
  ERRBEFORESECTION_PARSE = 0x0,
  ERRSECTION_PARSE = 0xBC9,
  ERR_SUBSCRIPT__1 = 0xBCA,
  ERR_SUBSCRIPT = 0xBCA,
  ERRBEFORESECTION_MICROCODE = 0xBCB,
  ERRSECTION_MICROCODE = 0xDAB,
  ERR_NOT_YET_IMPLEMENTED__1 = 0xDAC,
  ERR_NOT_YET_IMPLEMENTED = 0xDAC,
  ERR_ENTRYPOINT_NOT_FOUND__1 = 0xDAD,
  ERR_ENTRYPOINT_NOT_FOUND = 0xDAD,
  ERR_MISSING_INPUT_SEMANTICS__2 = 0xDAE,
  ERR_MISSING_INPUT_SEMANTICS = 0xDAE,
  ERR_MISSING_OUTPUT_SEMANTICS__2 = 0xDAF,
  ERR_MISSING_OUTPUT_SEMANTICS = 0xDAF,
  ERR_ARRAY_INDEX_OUT_OF_BOUNDS__0 = 0xDB0,
  ERR_ARRAY_INDEX_OUT_OF_BOUNDS = 0xDB0,
  ERR_OLD_VERSION__2 = 0xDB1,
  ERR_OLD_VERSION = 0xDB1,
  ERR_UNRECOGNIZED_VERSION__1 = 0xDB2,
  ERR_UNRECOGNIZED_VERSION = 0xDB2,
  ERR_RETURN__1 = 0xDB3,
  ERR_RETURN = 0xDB3,
  ERR_OUT_UNINITIALIZED__2 = 0xDB4,
  ERR_OUT_UNINITIALIZED = 0xDB4,
  ERR_DEPENDENT_TEX1D__0 = 0xDB5,
  ERR_DEPENDENT_TEX1D = 0xDB5,
  ERR_FUNCTION_MISSING_BODY__1 = 0xDB6,
  ERR_FUNCTION_MISSING_BODY = 0xDB6,
  ERR_CANT_UNROLL__0 = 0xDB7,
  ERR_CANT_UNROLL = 0xDB7,
  ERR_ARRAY_INDEX_MUST_BE_LITERAL__0 = 0xDB8,
  ERR_ARRAY_INDEX_MUST_BE_LITERAL = 0xDB8,
  ERR_LVAL_EXPECTED__0 = 0xDB9,
  ERR_LVAL_EXPECTED = 0xDB9,
  ERR_LVAL_NOT_EXPECTED__0 = 0xDBA,
  ERR_LVAL_NOT_EXPECTED = 0xDBA,
  ERR_ARRAY_LVAL_NOT_SUPPORTED__0 = 0xDBB,
  ERR_ARRAY_LVAL_NOT_SUPPORTED = 0xDBB,
  ERR_OUT_OF_MEMORY__0 = 0xDBC,
  ERR_OUT_OF_MEMORY = 0xDBC,
  ERR_OUT_OF_TEMP_REGISTERS__0 = 0xDBD,
  ERR_OUT_OF_TEMP_REGISTERS = 0xDBD,
  ERR_TOO_MANY_VARIABLES__0 = 0xDBE,
  ERR_TOO_MANY_VARIABLES = 0xDBE,
  ERR_VARIABLE_REDECLARED__1 = 0xDBF,
  ERR_VARIABLE_REDECLARED = 0xDBF,
  ERR_MISSING_VARIABLE_DECLARATION__1 = 0xDC0,
  ERR_MISSING_VARIABLE_DECLARATION = 0xDC0,
  ERR_INVALID_REGISTER__1 = 0xDC1,
  ERR_INVALID_REGISTER = 0xDC1,
  ERR_INVALID_EXPORT_SEMANTIC__1 = 0xDC2,
  ERR_INVALID_EXPORT_SEMANTIC = 0xDC2,
  ERR_INVALID_VERTEX_FETCH_SEMANTIC__1 = 0xDC3,
  ERR_INVALID_VERTEX_FETCH_SEMANTIC = 0xDC3,
  ERR_EXTERNAL__1 = 0xDC4,
  ERR_EXTERNAL = 0xDC4,
  ERR_REG_IN_USE__1 = 0xDC5,
  ERR_REG_IN_USE = 0xDC5,
  ERR_MISSING_VARIABLE_INITIALIZATION__1 = 0xDC6,
  ERR_MISSING_VARIABLE_INITIALIZATION = 0xDC6,
  ERR_TOO_MANY_GLOBAL_DEPENDENCIES__0 = 0xDC7,
  ERR_TOO_MANY_GLOBAL_DEPENDENCIES = 0xDC7,
  ERR_TOO_MANY_BLOCKS__0 = 0xDC8,
  ERR_TOO_MANY_BLOCKS = 0xDC8,
  ERR_TOO_MANY_PS_INPUTS__0 = 0xDC9,
  ERR_TOO_MANY_PS_INPUTS = 0xDC9,
  ERR_INVALID_PIXEL_SHADER_IMPORT_SEMANTIC__1 = 0xDCA,
  ERR_INVALID_PIXEL_SHADER_IMPORT_SEMANTIC = 0xDCA,
  ERR_TOO_MANY_INSTRUCTIONS__0 = 0xDCB,
  ERR_TOO_MANY_INSTRUCTIONS = 0xDCB,
  ERR_MIXED_SAMPLER_CONSTANT_TYPES__0 = 0xDCC,
  ERR_MIXED_SAMPLER_CONSTANT_TYPES = 0xDCC,
  ERR_TOO_MANY_LOOPS__0 = 0xDCD,
  ERR_TOO_MANY_LOOPS = 0xDCD,
  ERR_COMPLEX_DATA_DEPENDENT_BRANCHING__0 = 0xDCE,
  ERR_COMPLEX_DATA_DEPENDENT_BRANCHING = 0xDCE,
  ERR_EXPECTED_4D_TEXTURE_COORDINATE__0 = 0xDCF,
  ERR_EXPECTED_4D_TEXTURE_COORDINATE = 0xDCF,
  ERR_UNRELIABLE_OUTPUT__0 = 0xDD0,
  ERR_UNRELIABLE_OUTPUT = 0xDD0,
  ERR_SQ_INSTR_NOT_SUPPORTED_INLINE_MICROCODE__0 = 0xDD1,
  ERR_SQ_INSTR_NOT_SUPPORTED_INLINE_MICROCODE = 0xDD1,
  ERR_PREDICATION_NOT_SUPPORTED_INLINE_MICROCODE__0 = 0xDD2,
  ERR_PREDICATION_NOT_SUPPORTED_INLINE_MICROCODE = 0xDD2,
  ERR_EXPORT_NOT_SUPPORTED__0 = 0xDD3,
  ERR_EXPORT_NOT_SUPPORTED = 0xDD3,
  ERR_CANNOT_PREDICATE_INLINE_MICROCODE__0 = 0xDD4,
  ERR_CANNOT_PREDICATE_INLINE_MICROCODE = 0xDD4,
  ERR_INVALID_INLINE_MICROCODE__1 = 0xDD5,
  ERR_INVALID_INLINE_MICROCODE = 0xDD5,
  ERR_INVALID_VS_INPUT_SEMANTIC__0 = 0xDD6,
  ERR_INVALID_VS_INPUT_SEMANTIC = 0xDD6,
  ERR_OPTION_NOT_CONSTANT__0 = 0xDD7,
  ERR_OPTION_NOT_CONSTANT = 0xDD7,
  ERR_COISSUE_NOT_SUPPORTED__0 = 0xDD8,
  ERR_COISSUE_NOT_SUPPORTED = 0xDD8,
  ERR_INVALID_VS_INSTRUCTION__1 = 0xDD9,
  ERR_INVALID_VS_INSTRUCTION = 0xDD9,
  ERR_MISSING_POSITION_EXPORT__0 = 0xDDA,
  ERR_MISSING_POSITION_EXPORT = 0xDDA,
  ERR_MISUSED_INTEGER_VARIABLE__0 = 0xDDB,
  ERR_MISUSED_INTEGER_VARIABLE = 0xDDB,
  ERR_POSITION0_INPUT_INVALID_IN_PS__0 = 0xDDC,
  ERR_POSITION0_INPUT_INVALID_IN_PS = 0xDDC,
  ERR_PSIZE0_INPUT_INVALID_IN_PS__0 = 0xDDD,
  ERR_PSIZE0_INPUT_INVALID_IN_PS = 0xDDD,
  ERR_VALIDATION_FAILED__0 = 0xDDE,
  ERR_VALIDATION_FAILED = 0xDDE,
  ERR_VS_DATA_DEPENDENT_GRADIENTS__0 = 0xDDF,
  ERR_VS_DATA_DEPENDENT_GRADIENTS = 0xDDF,
  ERR_MUST_WRITE_EXPORT_ADDRESS_USING_MAD__0 = 0xDE0,
  ERR_MUST_WRITE_EXPORT_ADDRESS_USING_MAD = 0xDE0,
  ERR_UNSUPPORTED_REGISTER_REFERENCE__0 = 0xDE1,
  ERR_UNSUPPORTED_REGISTER_REFERENCE = 0xDE1,
  ERR_MISSING_EXPORT_ADDRESS_CONSTANT1__0 = 0xDE2,
  ERR_MISSING_EXPORT_ADDRESS_CONSTANT1 = 0xDE2,
  ERR_MISSING_EXPORT_ADDRESS_CONSTANT2__0 = 0xDE3,
  ERR_MISSING_EXPORT_ADDRESS_CONSTANT2 = 0xDE3,
  ERR_BAD_TFETCH_OPTIONS_IN_VERTEX_SHADER__0 = 0xDE4,
  ERR_BAD_TFETCH_OPTIONS_IN_VERTEX_SHADER = 0xDE4,
  ERR_INVALID_VS_OPCODE_GETCOMPTEXLOD__0 = 0xDE5,
  ERR_INVALID_VS_OPCODE_GETCOMPTEXLOD = 0xDE5,
  ERR_INVALID_VS_OPCODE_GETGRADIENTS__0 = 0xDE6,
  ERR_INVALID_VS_OPCODE_GETGRADIENTS = 0xDE6,
  ERR_MISSING_A0_DEFINITION__0 = 0xDE7,
  ERR_MISSING_A0_DEFINITION = 0xDE7,
  ERR_MISSING_PREV_SCALAR__0 = 0xDE8,
  ERR_MISSING_PREV_SCALAR = 0xDE8,
  ERR_TOO_MANY_GLOBAL_REGISTERS__0 = 0xDE9,
  ERR_TOO_MANY_GLOBAL_REGISTERS = 0xDE9,
  ERR_INVALID_REGISTER_SEMANTIC_SPECIFIC__5 = 0xDEA,
  ERR_INVALID_REGISTER_SEMANTIC_SPECIFIC = 0xDEA,
  ERR_TOO_MANY_INPUTS__0 = 0xDEB,
  ERR_TOO_MANY_INPUTS = 0xDEB,
  ERR_OUT_OF_TEMP_REGISTERS_NO_MAXTEMPREG__0 = 0xDEC,
  ERR_OUT_OF_TEMP_REGISTERS_NO_MAXTEMPREG = 0xDEC,
  ERR_OUT_OF_CONSTANT_REGISTERS__0 = 0xDED,
  ERR_OUT_OF_CONSTANT_REGISTERS = 0xDED,
  ERR_OUT_OF_SAMPLER_REGISTERS__1 = 0xDEE,
  ERR_OUT_OF_SAMPLER_REGISTERS = 0xDEE,
  ERR_OUT_OF_SAMPLER_REGISTERS_NO_SAMPREG__1 = 0xDEF,
  ERR_OUT_OF_SAMPLER_REGISTERS_NO_SAMPREG = 0xDEF,
  ERR_OUT_OF_BOOLEAN_REGISTERS__0 = 0xDF0,
  ERR_OUT_OF_BOOLEAN_REGISTERS = 0xDF0,
  ERR_OUT_OF_INTEGER_REGISTERS__0 = 0xDF1,
  ERR_OUT_OF_INTEGER_REGISTERS = 0xDF1,
  ERR_POTENTIAL_COMMA_MISUSE__0 = 0xDF2,
  ERR_POTENTIAL_COMMA_MISUSE = 0xDF2,
  ERR_INVALID_DESTINATION_MODIFIER__0 = 0xDF3,
  ERR_INVALID_DESTINATION_MODIFIER = 0xDF3,
  ERR_NONCONSTANT_TFETCH_OPTION__1 = 0xDF4,
  ERR_NONCONSTANT_TFETCH_OPTION = 0xDF4,
  ERR_MISSING_LOD__0 = 0xDF5,
  ERR_MISSING_LOD = 0xDF5,
  ERR_MISSING_GRADIENTX__0 = 0xDF6,
  ERR_MISSING_GRADIENTX = 0xDF6,
  ERR_MISSING_GRADIENTY__0 = 0xDF7,
  ERR_MISSING_GRADIENTY = 0xDF7,
  ERR_REDUNDANT_ATTRIBUTE__0 = 0xDF8,
  ERR_REDUNDANT_ATTRIBUTE = 0xDF8,
  ERR_NOEXPROPTS_IMPLIES_ISOLATE__0 = 0xDF9,
  ERR_NOEXPROPTS_IMPLIES_ISOLATE = 0xDF9,
  ERR_ATTRIBUTE_CONFLICT__2 = 0xDFA,
  ERR_ATTRIBUTE_CONFLICT = 0xDFA,
  ERR_INVALID_ATTRIBUTE__1 = 0xDFB,
  ERR_INVALID_ATTRIBUTE = 0xDFB,
  ERR_REDUNDANT_MAXTEMPREG__0 = 0xDFC,
  ERR_REDUNDANT_MAXTEMPREG = 0xDFC,
  ERR_REDUNDANT_SAMPREG__0 = 0xDFD,
  ERR_REDUNDANT_SAMPREG = 0xDFD,
  ERR_INVALID_INTEGER_ARGUMENT__0 = 0xDFE,
  ERR_INVALID_INTEGER_ARGUMENT = 0xDFE,
  ERR_ATTRIBUTES_ON_INFINITE_LOOP__0 = 0xDFF,
  ERR_ATTRIBUTES_ON_INFINITE_LOOP = 0xDFF,
  ERR_FORCED_INLINING__0 = 0xE00,
  ERR_FORCED_INLINING = 0xE00,
  ERR_BOGUS_UNROLL_ARGUMENT__0 = 0xE01,
  ERR_BOGUS_UNROLL_ARGUMENT = 0xE01,
  ERR_MAXEXPORTS_EXCEEDED__0 = 0xE02,
  ERR_MAXEXPORTS_EXCEEDED = 0xE02,
  ERR_CANT_FLATTEN__0 = 0xE03,
  ERR_CANT_FLATTEN = 0xE03,
  ERR_INVALID_MAXTEMPREG_COUNT__2 = 0xE04,
  ERR_INVALID_MAXTEMPREG_COUNT = 0xE04,
  ERR_INVALID_SAMPREG_COUNT__3 = 0xE05,
  ERR_INVALID_SAMPREG_COUNT = 0xE05,
  ERR_WONT_UNROLL__0 = 0xE06,
  ERR_WONT_UNROLL = 0xE06,
  ERR_WONT_USE_LOOP_INSTRUCTIONS__0 = 0xE07,
  ERR_WONT_USE_LOOP_INSTRUCTIONS = 0xE07,
  ERR_WONT_PREDICATE__0 = 0xE08,
  ERR_WONT_PREDICATE = 0xE08,
  ERR_WONT_USE_LOOP_INSTRUCTIONS_CANT_UNROLL__0 = 0xE09,
  ERR_WONT_USE_LOOP_INSTRUCTIONS_CANT_UNROLL = 0xE09,
  ERR_WONT_UNROLL_CANT_USE_LOOP_INSTRUCTIONS__0 = 0xE0A,
  ERR_WONT_UNROLL_CANT_USE_LOOP_INSTRUCTIONS = 0xE0A,
  ERR_UNUSED_PIXEL_SHADER_INPUT__1 = 0xE0B,
  ERR_UNUSED_PIXEL_SHADER_INPUT = 0xE0B,
  ERR_MISSING_VFETCH_FULL__0 = 0xE0C,
  ERR_MISSING_VFETCH_FULL = 0xE0C,
  ERR_MISUSED_VERTEX_FETCH_SAMPLER__0 = 0xE0D,
  ERR_MISUSED_VERTEX_FETCH_SAMPLER = 0xE0D,
  ERR_MISSING_VERTEX_FETCH_CONSTANT__0 = 0xE0E,
  ERR_MISSING_VERTEX_FETCH_CONSTANT = 0xE0E,
  ERR_GET_GRADIENTS_REQUIRES_NONCUBEMAP__0 = 0xE0F,
  ERR_GET_GRADIENTS_REQUIRES_NONCUBEMAP = 0xE0F,
  ERR_GET_GRADIENTS_REQUIRES_NONCUBEMAP_S0__0 = 0xE10,
  ERR_GET_GRADIENTS_REQUIRES_NONCUBEMAP_S0 = 0xE10,
  ERR_GET_GRADIENTS_REQUIRES_NONCUBEMAP_S0_2__0 = 0xE11,
  ERR_GET_GRADIENTS_REQUIRES_NONCUBEMAP_S0_2 = 0xE11,
  ERR_INVALID_REDUCETEMPREGUSAGE_COUNT__2 = 0xE12,
  ERR_INVALID_REDUCETEMPREGUSAGE_COUNT = 0xE12,
  ERR_CANT_REDUCETEMPREGUSAGE__2 = 0xE13,
  ERR_CANT_REDUCETEMPREGUSAGE = 0xE13,
  ERR_MUST_USE_EXPRESSION_OPTIMIZATIONS__0 = 0xE14,
  ERR_MUST_USE_EXPRESSION_OPTIMIZATIONS = 0xE14,
  ERR_UNRECOGNIZED_ATTRIBUTE__1 = 0xE15,
  ERR_UNRECOGNIZED_ATTRIBUTE = 0xE15,
  ERR_CANT_USE_DYNAMIC_JMP__0 = 0xE16,
  ERR_CANT_USE_DYNAMIC_JMP = 0xE16,
  ERR_OVERRIDE_NO_AUTOZ__0 = 0xE17,
  ERR_OVERRIDE_NO_AUTOZ = 0xE17,
  ERR_INVALID_BOOLEAN_ARGUMENT__0 = 0xE18,
  ERR_INVALID_BOOLEAN_ARGUMENT = 0xE18,
  ERR_DUPLICATE_CBUFFER_NAME__3 = 0xE19,
  ERR_DUPLICATE_CBUFFER_NAME = 0xE19,
  ERR_INVALID_REGISTER_GROUP_VALUE__1 = 0xE1A,
  ERR_INVALID_REGISTER_GROUP_VALUE = 0xE1A,
  ERR_INVALID_CBUFFER_VARIABLE__0 = 0xE1B,
  ERR_INVALID_CBUFFER_VARIABLE = 0xE1B,
  ERR_REGISTER_USED_BY_ANOTHER_CBUFFER__0 = 0xE1C,
  ERR_REGISTER_USED_BY_ANOTHER_CBUFFER = 0xE1C,
  ERR_RECURSION_NOT_YET_IMPLEMENTED__1 = 0xE1D,
  ERR_RECURSION_NOT_YET_IMPLEMENTED = 0xE1D,
  ERR_INVALID_MAXINSTRUCTIONCOUNT__2 = 0xE1E,
  ERR_INVALID_MAXINSTRUCTIONCOUNT = 0xE1E,
  ERR_REDUNDANT_MAXINSTRUCTIONCOUNT__0 = 0xE1F,
  ERR_REDUNDANT_MAXINSTRUCTIONCOUNT = 0xE1F,
  ERR_TOO_MANY_INSTRUCTIONS_MAXINSTR__2 = 0xE20,
  ERR_TOO_MANY_INSTRUCTIONS_MAXINSTR = 0xE20,
  ERRBEFORESECTION_SHADER0 = 0xE21,
  ERRSECTION_SHADER0 = 0xF9F,
  ERR_READ_BEFORE_WRITE__1 = 0xFA0,
  ERR_READ_BEFORE_WRITE = 0xFA0,
  ERR_DIVISION_BY_ZERO__0 = 0xFA1,
  ERR_DIVISION_BY_ZERO = 0xFA1,
  ERR_INDEFINITE_LOG__0 = 0xFA2,
  ERR_INDEFINITE_LOG = 0xFA2,
  ERR_IMAGINARY_SQUARE_ROOT__0 = 0xFA3,
  ERR_IMAGINARY_SQUARE_ROOT = 0xFA3,
  ERR_TOO_COMPLEX__0 = 0xFA4,
  ERR_TOO_COMPLEX = 0xFA4,
  ERR_INDEFINITE_ASIN__0 = 0xFA5,
  ERR_INDEFINITE_ASIN = 0xFA5,
  ERR_INDEFINITE_ACOS__0 = 0xFA6,
  ERR_INDEFINITE_ACOS = 0xFA6,
  ERRBEFORESECTION_SHADER5 = 0xFA7,
  ERRSECTION_SHADER5 = 0x1195,
  ERR_INVALID_INPUT_SEMANTIC__1 = 0x1196,
  ERR_INVALID_INPUT_SEMANTIC = 0x1196,
  ERR_INVALID_OUTPUT_SEMANTIC__1 = 0x1197,
  ERR_INVALID_OUTPUT_SEMANTIC = 0x1197,
  ERRBEFORESECTION_SHADER4 = 0x1198,
  ERRSECTION_SHADER4 = 0x119C,
  ERR_INVALID_REGISTER_SEMANTIC__1 = 0x119D,
  ERR_INVALID_REGISTER_SEMANTIC = 0x119D,
  ERRBEFORESECTION_SHADER1 = 0x119E,
  ERRSECTION_SHADER1 = 0x11B3,
  ERR_NO_MATCH__1 = 0x11B4,
  ERR_NO_MATCH = 0x11B4,
  ERRBEFORESECTION_SHADER3 = 0x11B5,
  ERRSECTION_SHADER3 = 0x11BA,
  ERR_SAMPLER_MISMATCH__0 = 0x11BB,
  ERR_SAMPLER_MISMATCH = 0x11BB,
  ERRBEFORESECTION_SHADER2 = 0x11BC,
  ERRSECTION_SHADER2 = 0x11C3,
  ERR_CONSTANTTABLE_SIZE__0 = 0x11C4,
  ERR_CONSTANTTABLE_SIZE = 0x11C4,
  ERRBEFORESECTION_SHADER6 = 0x11C5,
  ERRSECTION_SHADER6 = 0x11CB,
  ERR_INVALID_POOL_NAME__1 = 0x11CC,
  ERR_INVALID_POOL_NAME = 0x11CC,
  ERRBEFORESECTION_INTERNAL = 0x11CD,
  ERRSECTION_INTERNAL = 0x12BF,
  ERR_INTERNAL__0 = 0x12C0,
  ERR_INTERNAL = 0x12C0,
  ERR_INVALID_PARSE_TREE__0 = 0x12C1,
  ERR_INVALID_PARSE_TREE = 0x12C1,
  ERR_LAST = 0x12C2,
};

/* 1052 */
enum D3DXShader::CompilerOptions
{
  COMP_FL_EXPLICIT_INT_REGISTER = 0x1,
  COMP_FL_NO_INLINING = 0x2,
  COMP_FL_ATTRIBUTES = 0x4,
  COMP_FL_IN_SUBROUTINE = 0x8,
  COMP_FL_LOOPS_MARKED = 0x8,
  COMP_FL_NO_OPTS = 0x10,
  COMP_FL_STATIC_DEFAULT_VALS = 0x20,
  COMP_FL_GLOBAL_STMTS = 0x40,
  COMP_FL_INLINE_SAMPLER_PARAM = 0x80,
  COMP_FL_DATA_DEPENDENT_BRANCHING = 0x100,
  COMP_FL_LOOP_INSTRUCTION = 0x200,
  COMP_FL_HAS_SUBROUTINES = 0x400,
  COMP_FL_EFFECT = 0x800,
  COMP_FL_MARK_DEAD_CODE = 0x1000,
  COMP_FL_ARRAYS = 0x2000,
  COMP_FL_CLEANED = 0x4000,
  COMP_FL_ISOLATED_OUTPUTS = 0x8000,
  COMP_FL_IMPORTED_UASM = 0x10000,
  COMP_FL_EXPLICIT_BOOL_REGISTER = 0x20000,
  COMP_FL_IMPORTED_INLINE_UASM = 0x40000,
  COMP_FL_SCHEDULED = 0x80000,
  COMP_FL_UNRESOLVED_UASM_OPTIONS = 0x100000,
  COMP_FL_MEM_EXPORT = 0x200000,
  COMP_FL_SET_GRADIENTS = 0x400000,
  COMP_FL_LOD_COMPUTATIONS = 0x800000,
  COMP_FL_HAS_KILL = 0x1000000,
  COMP_FL_QUEUE_LOW_COST_VECTORIZING = 0x2000000,
  COMP_FL_NO_VECTORIZE_DOT_PRODUCTS = 0x8000000,
  COMP_FL_RESTARTED = 0x10000000,
  COMP_FL_NO_EXPRESSION_OPTIMIZATIONS = 0x20000000,
  COMP_FL_DEFAULTS = 0x0,
};

/* 1053 */
enum D3DXShader::AttributeType
{
  ATTR_INVALID = 0x0,
  ATTR_NO_EXPRESSION_OPTIMIZATIONS = 0x1,
  ATTR_ISOLATE = 0x2,
  ATTR_BRANCH = 0x3,
  ATTR_FLATTEN = 0x4,
  ATTR_PREDICATE = 0x5,
  ATTR_PREDICATE_BLOCK = 0x6,
  ATTR_PREDICATE_ALL = 0x7,
  ATTR_PREDICATE_ANY = 0x8,
  ATTR_LOOP = 0x9,
  ATTR_UNROLL = 0xA,
  ATTR_NOINLINE = 0xB,
  ATTR_UNUSED = 0xC,
  ATTR_MAXEXPORTS = 0xD,
  ATTR_MAXTEMPREG = 0xE,
  ATTR_SAMPREG = 0xF,
  ATTR_REDUCE_TEMP_REG_USAGE = 0x10,
  ATTR_OPTIMIZE_AUTOZ = 0x11,
  ATTR_REGISTER_GROUP = 0x12,
  ATTR_REMOVE_UNUSED_INPUTS = 0x13,
  ATTR_MAX_INSTRUCTION_COUNT = 0x14,
  ATTR_LAST = 0x15,
};

/* 1054 */
enum D3DXShader::CompilerOptions2
{
  COMP_FL2_ISOLATE_VARIABLES = 0x2,
  COMP_FL2_ISOLATED_VARIABLES = 0x4,
  COMP_FL2_GET_GRADIENTS = 0x8,
  COMP_FL2_ZPASS_SHADER = 0x10,
  COMP_FL2_ALREADY_ZPASS_SHADER = 0x20,
  COMP_FL2_REMOVE_UNUSED_PS_INPUTS = 0x40,
  COMP_FL2_REGISTERS_ASSIGNED = 0x80,
};

/* 1055 */
enum D3DXShader::Opcode
{
  OP_INVALID = 0x0,
  OP_FIRST_V = 0x1,
  ___OP_FIRST_V = 0x0,
  OP_V_ADD = 0x1,
  OP_V_MUL = 0x2,
  OP_V_MAX = 0x3,
  OP_V_MIN = 0x4,
  OP_V_SETE = 0x5,
  OP_V_SETGT = 0x6,
  OP_V_SETGE = 0x7,
  OP_V_SETNE = 0x8,
  OP_V_FRACT = 0x9,
  OP_V_TRUNC = 0xA,
  OP_V_FLOOR = 0xB,
  OP_V_MULADD = 0xC,
  OP_V_CNDE = 0xD,
  OP_V_CNDGE = 0xE,
  OP_V_CNDGT = 0xF,
  OP_V_DOT4 = 0x10,
  OP_V_DOT3 = 0x11,
  OP_V_DOT2ADD = 0x12,
  OP_V_CUBE = 0x13,
  OP_V_MAX4 = 0x14,
  OP_V_PRED_SETE_PUSH = 0x15,
  OP_V_PRED_SETNE_PUSH = 0x16,
  OP_V_PRED_SETGT_PUSH = 0x17,
  OP_V_PRED_SETGE_PUSH = 0x18,
  OP_V_KILLE = 0x19,
  OP_V_KILLGT = 0x1A,
  OP_V_KILLGE = 0x1B,
  OP_V_KILLNE = 0x1C,
  OP_V_DST = 0x1D,
  OP_V_MAXA = 0x1E,
  ___OP_LAST_V = 0x1F,
  OP_LAST_V = 0x1E,
  OP_FIRST_S = 0x1F,
  ___OP_FIRST_S = 0x1E,
  OP_S_ADD = 0x1F,
  OP_S_ADD_PREV = 0x20,
  OP_S_MUL = 0x21,
  OP_S_MUL_PREV = 0x22,
  OP_S_MUL_PREV2 = 0x23,
  OP_S_MAX = 0x24,
  OP_S_MIN = 0x25,
  OP_S_SETE = 0x26,
  OP_S_SETGT = 0x27,
  OP_S_SETGE = 0x28,
  OP_S_SETNE = 0x29,
  OP_S_FRACT = 0x2A,
  OP_S_TRUNC = 0x2B,
  OP_S_FLOOR = 0x2C,
  OP_S_EXP_IEEE = 0x2D,
  OP_S_LOG_CLAMPED = 0x2E,
  OP_S_LOG_IEEE = 0x2F,
  OP_S_RECIP_CLAMPED = 0x30,
  OP_S_RECIP_FF = 0x31,
  OP_S_RECIP_IEEE = 0x32,
  OP_S_RECIPSQRT_CLAMPED = 0x33,
  OP_S_RECIPSQRT_FF = 0x34,
  OP_S_RECIPSQRT_IEEE = 0x35,
  OP_S_MAXA = 0x36,
  OP_S_MAXA_FLOOR = 0x37,
  OP_S_SUB = 0x38,
  OP_S_SUB_PREV = 0x39,
  OP_S_PRED_SETE = 0x3A,
  OP_S_PRED_SETNE = 0x3B,
  OP_S_PRED_SETGT = 0x3C,
  OP_S_PRED_SETGE = 0x3D,
  OP_S_PRED_SET_INV = 0x3E,
  OP_S_PRED_SET_POP = 0x3F,
  OP_S_PRED_SET_CLR = 0x40,
  OP_S_PRED_SET_RESTORE = 0x41,
  OP_S_KILLE = 0x42,
  OP_S_KILLGT = 0x43,
  OP_S_KILLGE = 0x44,
  OP_S_KILLNE = 0x45,
  OP_S_KILLONE = 0x46,
  OP_S_SQRT_IEEE = 0x47,
  OP_S_UNUSED = 0x48,
  OP_S_MUL_CONST_0 = 0x49,
  OP_S_MUL_CONST_1 = 0x4A,
  OP_S_ADD_CONST_0 = 0x4B,
  OP_S_ADD_CONST_1 = 0x4C,
  OP_S_SUB_CONST_0 = 0x4D,
  OP_S_SUB_CONST_1 = 0x4E,
  OP_S_SIN = 0x4F,
  OP_S_COS = 0x50,
  OP_S_RETAIN_PREV = 0x51,
  ___OP_LAST_S = 0x52,
  OP_LAST_S = 0x51,
  OP_FIRST_Q = 0x52,
  ___OP_FIRST_Q = 0x51,
  OP_Q_EXIT = 0x52,
  OP_Q_LOOPSTART = 0x53,
  OP_Q_LOOPEND = 0x54,
  OP_Q_CALL = 0x55,
  OP_Q_COND_CALL = 0x56,
  OP_Q_RETURN = 0x57,
  OP_Q_JUMP = 0x58,
  OP_Q_COND_JUMP = 0x59,
  OP_Q_ALLOC_POSITION = 0x5A,
  OP_Q_ALLOC_INTERPOLATORS = 0x5B,
  OP_Q_ALLOC_COLORS = 0x5C,
  OP_Q_ALLOC_EXPORT = 0x5D,
  OP_Q_MARK_VS_FETCH_DONE = 0x5E,
  ___OP_LAST_Q = 0x5F,
  OP_LAST_Q = 0x5E,
  OP_FIRST_T = 0x5F,
  ___OP_FIRST_T = 0x5E,
  OP_T_VFETCH = 0x5F,
  OP_T_TFETCH = 0x60,
  OP_T_SET_TEX_LOD = 0x61,
  OP_T_TEXOP = 0x62,
  OP_T_GET_GRADIENTS = 0x63,
  OP_T_SET_GRADIENTS_H = 0x64,
  OP_T_SET_GRADIENTS_V = 0x65,
  ___OP_LAST_T = 0x66,
  OP_LAST_T = 0x65,
  OP_FIRST_I = 0x66,
  ___OP_FIRST_I = 0x65,
  OP_ISOLATED_VARIABLE = 0x66,
  OP_EXPORT_ADDRESS = 0x67,
  OP_CONVERT_BOOLEAN = 0x68,
  OP_MERGE = 0x69,
  OP_PHI = 0x6A,
  OP_INPUT = 0x6B,
  OP_NEVER_ISSUE = 0x6C,
  OP_DEAD = 0x6D,
  OP_MISSING_DEF = 0x6E,
  OP_SIDE_EFFECT = 0x6F,
  OP_RELATIVE = 0x70,
  OP_ARRAY = 0x71,
  OP_UNUSED_OPERAND = 0x72,
  OP_EXPORT_0 = 0x73,
  OP_EXPORT_1 = 0x74,
  OP_SERIALIZE = 0x75,
  OP_VARIABLE = 0x76,
  OP_CONSTANT = 0x77,
  OP_LABEL = 0x78,
  ___OP_LAST_I = 0x79,
  OP_LAST_I = 0x78,
  OP_LAST = 0x79,
};

/* 1056 */
enum D3DXShader::SideEffect
{
  SIDEEFFECT_KILL = 0x0,
  SIDEEFFECT_PREDICATE = 0x1,
  SIDEEFFECT_EXPORT = 0x2,
  SIDEEFFECT_VFETCH = 0x3,
  MAX_SIDEEFFECT = 0x3,
};

/* 1057 */
enum D3DXShader::Block::UnionState
{
  STATE_UNUSED = 0x0,
  STATE_DEAD = 0x1,
  STATE_SSA = 0x2,
  STATE_LOOPS = 0x3,
  STATE_REGALLOC = 0x4,
};

/* 1058 */
enum D3DXShader::CompilerHeapStructTypes
{
  STRUCT_UNKNOWN = 0x0,
  STRUCT_ArrayElementLoad = 0x1,
  STRUCT_ArrayLoad = 0x2,
  STRUCT_AttributeStateArrayList = 0x3,
  STRUCT_AttributeStateStack = 0x4,
  STRUCT_Block = 0x5,
  STRUCT_BlockStack = 0x6,
  STRUCT_CBufferNameList = 0x7,
  STRUCT_CNDOperationList = 0x8,
  STRUCT_CNodeDecl = 0x9,
  STRUCT_CNodeExpression = 0xA,
  STRUCT_CNodeFunction = 0xB,
  STRUCT_CNodeList = 0xC,
  STRUCT_CNodeProgram = 0xD,
  STRUCT_CNodeRegister = 0xE,
  STRUCT_CNodeStack = 0xF,
  STRUCT_CNodeStatement = 0x10,
  STRUCT_CNodeToken = 0x11,
  STRUCT_CNodeType = 0x12,
  STRUCT_CNodeValue = 0x13,
  STRUCT_CNodeVariable = 0x14,
  STRUCT_ComponentTypeEnumerator = 0x15,
  STRUCT_Constraint_ArrayLength = 0x16,
  STRUCT_Constraint_ResultBounds = 0x17,
  STRUCT_ControlFlowEdge = 0x18,
  STRUCT_ConvertBooleanExecBlockList = 0x19,
  STRUCT_Dependency = 0x1A,
  STRUCT_DependencyArrayList = 0x1B,
  STRUCT_DependencyStack = 0x1C,
  STRUCT_FunctionStack = 0x1D,
  STRUCT_IndexedResult = 0x1E,
  STRUCT_InfiniteLocalRegisterSet = 0x1F,
  STRUCT_InfiniteTempRegisterSet = 0x20,
  STRUCT_Instruction = 0x21,
  STRUCT_InstructionArrayList = 0x22,
  STRUCT_InstructionQueue = 0x23,
  STRUCT_InstructionStack = 0x24,
  STRUCT_IsolateScopeStack = 0x25,
  STRUCT_LexicalScopeNestingInfoList = 0x26,
  STRUCT_ParseStack = 0x27,
  STRUCT_PATHLENStack = 0x28,
  STRUCT_PendingVectorizeStack = 0x29,
  STRUCT_PointerArrayList = 0x2A,
  STRUCT_ProductTermList = 0x2B,
  STRUCT_RegGroupInfo = 0x2C,
  STRUCT_RegOptSolutionStack = 0x2D,
  STRUCT_RegOptSolutionStep = 0x2E,
  STRUCT_ResultStack = 0x2F,
  STRUCT_SubReturnBlockList = 0x30,
  STRUCT_SumTermList = 0x31,
  STRUCT_UniqueProductTermList = 0x32,
  STRUCT_VariableDebugInfoPtrList = 0x33,
  STRUCT_LAST = 0x34,
};

/* 1059 */
enum D3DXShader::InlineMicrocodeVariableOffsets
{
  UCODEVAR_eA = 0x0,
  UCODEVAR_eM0 = 0x1,
  UCODEVAR_eM1 = 0x2,
  UCODEVAR_eM2 = 0x3,
  UCODEVAR_eM3 = 0x4,
  UCODEVAR_eM4 = 0x5,
  UCODEVAR_a0 = 0x6,
  UCODEVAR_prev_scalar = 0x7,
  UCODEVAR_lod = 0x8,
  UCODEVAR_gradientX = 0x9,
  UCODEVAR_gradientY = 0xA,
  UCODEVAR_fetch = 0xB,
  UCODEVAR_LAST = 0xC,
};

/* 1060 */
enum D3DXShader::Compiler::MicrocodeRegisterRanges
{
  UASMVARSTART_TEMP = 0x0,
  UASMVARCOUNT_TEMP = 0x40,
  UASMVAREND_TEMP = 0x3F,
  UASMVARSTART_CONST = 0x40,
  UASMVARCOUNT_CONST = 0x100,
  UASMVAREND_CONST = 0x13F,
  UASMVARSTART_INTEGER = 0x140,
  UASMVARCOUNT_INTEGER = 0x20,
  UASMVAREND_INTEGER = 0x15F,
  UASMVARSTART_BOOLEAN = 0x160,
  UASMVARCOUNT_BOOLEAN = 0x100,
  UASMVAREND_BOOLEAN = 0x25F,
  UASMVARSTART_INPUT = 0x260,
  UASMVARCOUNT_INPUT = 0x10,
  UASMVAREND_INPUT = 0x26F,
  UASMVARSTART_EXPORT = 0x270,
  UASMVARCOUNT_EXPORT = 0x40,
  UASMVAREND_EXPORT = 0x2AF,
  UASMVARSTART_SAMPLER = 0x2B0,
  UASMVARCOUNT_SAMPLER = 0x20,
  UASMVAREND_SAMPLER = 0x2CF,
  UASMVARSTART_ADDRESS = 0x2D0,
  UASMVARCOUNT_ADDRESS = 0x1,
  UASMVAREND_ADDRESS = 0x2D0,
  UASMVARSTART_PREDICATE = 0x2D1,
  UASMVARCOUNT_PREDICATE = 0x1,
  UASMVAREND_PREDICATE = 0x2D1,
  UASMVARSTART_LOD = 0x2D2,
  UASMVARCOUNT_LOD = 0x1,
  UASMVAREND_LOD = 0x2D2,
  UASMVARSTART_PREVSCALAR = 0x2D3,
  UASMVARCOUNT_PREVSCALAR = 0x1,
  UASMVAREND_PREVSCALAR = 0x2D3,
  UASMVARCOUNT_TOTAL = 0x2D4,
};

/* 1061 */
enum D3DXShader::Component
{
  COMP_X = 0x0,
  COMP_Y = 0x1,
  COMP_Z = 0x2,
  COMP_W = 0x3,
  COMP_R = 0x0,
  COMP_G = 0x1,
  COMP_B = 0x2,
  COMP_A = 0x3,
  COMP_INVALID = 0x4,
};

/* 1062 */
enum D3DXShader::TessellatorMode
{
  TESS_UNTESSELLATED = 0x0,
  TESS_LINE_LIST = 0x1,
  TESS_TRIANGLE_LIST = 0x2,
  TESS_QUAD_LIST = 0x3,
  TESS_LINE_PATCH = 0x4,
  TESS_TRIANGLE_PATCH = 0x5,
  TESS_QUAD_PATCH = 0x6,
};

/* 1063 */
enum D3DXShader::ConstraintFlags
{
  CONSTRAINT_FL_LE_ZERO = 0x1,
  CONSTRAINT_FL_GE_ZERO = 0x2,
  CONSTRAINT_FL_INTEGER = 0x4,
  CONSTRAINT_FL_ALL = 0x7,
  CONSTRAINT_FL_SIGN_MASK = 0x3,
};

/* 1064 */
enum D3DXShader::InstructionUnitType
{
  UNIT_NONE = 0x0,
  UNIT_ALU = 0x1,
  UNIT_TEXTURE = 0x2,
  UNIT_VERTEX = 0x3,
  UNIT_SEQUENCER = 0x4,
};

/* 1065 */
enum D3DXShader::SpecialRegister
{
  SPECIALREG_ADDRESS = 0x0,
  SPECIALREG_LOD = 0x1,
  SPECIALREG_GRADIENT_X = 0x2,
  SPECIALREG_GRADIENT_Y = 0x3,
  SPECIALREG_FETCH = 0x4,
  SPECIALREG_ALLOC = 0x5,
  SPECIALREG_PREV_SCALAR = 0x6,
  SPECIALREG_PREDICATE = 0x7,
  SPECIALREG_LAST = 0x8,
  SPECIALREG_FIRST_CRITICAL = 0x0,
  SPECIALREG_LAST_CRITICAL = 0x6,
};

/* 1066 */
enum D3DXShader::ControlFlowPreference
{
  CFP_NONE = 0x0,
  CFP_STATIC_BRANCH = 0x1,
  CFP_CND = 0x2,
  CFP_PREDICATE = 0x3,
  CFP_PREDICATE_BLOCK = 0x4,
  CFP_NOINLINE = 0x5,
  CFP_MUST_INLINE = 0x6,
  CFP_UNROLL = 0x7,
  CFP_PREDICATE_ALL = 0x8,
  CFP_PREDICATE_ANY = 0x9,
};

/* 1067 */
enum D3DXShader::Compiler::PlacementMethod
{
  INSERT_BEFORE = 0x0,
  INSERT_AFTER = 0x1,
};

/* 1068 */
enum D3DXShader::Compiler::InstructionPlacementPointType
{
  PLACE_BEFORE_INSTR = 0x0,
  PLACE_AFTER_INSTR = 0x1,
  PLACE_LIST_HEAD = 0x2,
  PLACE_LIST_TAIL = 0x3,
};

/* 1069 */
enum D3DXShader::DependencyModifierFlags
{
  DEP_FL_CLAMPED = 0x1,
  DEP_FL_ABS = 0x2,
  DEP_FL_NEGATE = 0x4,
  DEP_FL_ADDBASEADDRESS = 0x8,
  DEP_FL_ADDLOOPINDEX = 0x10,
  DEP_FL_RELATIVE_MODIFIERS = 0x18,
  DEP_FL_INPUT_MODIFIERS = 0x1E,
  DEP_FL_OUTPUT_MODIFIERS = 0x1,
  DEP_FL_ALL_MODIFIERS = 0x1F,
};

/* 1070 */
enum D3DXShader::OptimizationPhases
{
  D3DXShader::OptimizationPhases_dummy = 0x0,
};

/* 1071 */
enum D3DXShader::VariableKind
{
  VARKIND_UNKNOWN = 0x0,
  VARKIND_UNIFORM = 0x1,
  VARKIND_LOCAL = 0x2,
  VARKIND_INPUT = 0x3,
  VARKIND_EXPORT = 0x4,
  VARKIND_REGISTER = 0x5,
};

/* 1072 */
enum D3DXShader::PARAMGEN
{
  PARAMGEN_NONE = 0x0,
  PARAMGEN_VPOS = 0x1,
  PARAMGEN_SPRITETEXCOORD = 0x2,
  PARAMGEN_VFACE = 0x3,
};

/* 1073 */
enum D3DXShader::TextureLookupSuffix
{
  TEXSUF_NONE = 0x0,
  TEXSUF_DD = 0x1,
  TEXSUF_PROJ = 0x2,
  TEXSUF_BIAS = 0x3,
  TEXSUF_LOD = 0x4,
};

/* 1074 */
enum D3DXShader::Compiler::ExpressionUseType
{
  EXPRUSE_NONE = 0x0,
  EXPRUSE_EXPORT = 0x1,
  EXPRUSE_CONDITIONAL = 0x2,
  EXPRUSE_RETURN_VALUE = 0x3,
  EXPRUSE_VARINIT = 0x4,
  EXPRUSE_UNROLL_COUNT = 0x5,
};

/* 1075 */
enum D3DXShader::Compiler::ControlStructureType
{
  CONTROL_UNKNOWN = 0x0,
  CONTROL_LOOP_START = 0x1,
  CONTROL_LOOP_END = 0x2,
  CONTROL_IF = 0x3,
  CONTROL_IF_ELSE = 0x4,
  CONTROL_BACK_EDGE = 0x5,
};

/* 1076 */
enum D3DXShader::ConstraintType
{
  CONSTRAINT_ARRAY_LENGTH = 0x0,
  CONSTRAINT_RESULT_BOUNDS = 0x1,
  CONSTRAINT_LAST = 0x2,
};

/* 1077 */
enum D3DXShader::RegOptSolutionStepState
{
  REGOPTSTATE_INITIAL = 0x0,
  REGOPTSTATE_MINIMAL_IMPACT = 0x1,
  REGOPTSTATE_RELOCATE = 0x2,
  REGOPTSTATE_BREAK_CLAUSE = 0x3,
  REGOPTSTATE_BREAK_BUNDLE = 0x4,
  REGOPTSTATE_UNDO_CSE = 0x5,
};

/* 1078 */
enum D3DXShader::Compiler::CheckGlobalConflictsResults
{
  REASSIGN_GLOBAL = 0x1,
  REASSIGN_LOCAL = 0x2,
};

/* 1079 */
enum D3DXShader::RegOptSimulator::SkipInstructionDisposition
{
  SKIP_SUCCESS = 0x0,
  SKIP_RESOURCE_CONFLICT = 0x1,
  SKIP_EXCEEDS_REGISTER_LIMIT = 0x2,
};

/* 1080 */
enum D3DXShader::Result::DataTypes
{
  VARIABLE = 0x0,
  INSTRUCTION = 0x1,
  DEPENDENCY = 0x2,
  RESULT = 0x3,
};

/* 1081 */
enum D3DXShader::Compiler::ResolveArrayReferencesStage
{
  ARRAYS_BEFORE_INLINING = 0x0,
  ARRAYS_AFTER_INLINING = 0x1,
  ARRAYS_FINAL = 0x2,
};

/* 1082 */
enum D3DXShader::TessellatorModeBits
{
  TESSBIT_UNTESSELLATED = 0x1,
  TESSBIT_LINE_LIST = 0x2,
  TESSBIT_TRIANGLE_LIST = 0x4,
  TESSBIT_QUAD_LIST = 0x8,
  TESSBIT_LINE_PATCH = 0x10,
  TESSBIT_TRIANGLE_PATCH = 0x20,
  TESSBIT_QUAD_PATCH = 0x40,
};

/* 1083 */
enum D3DXShader::ParseStack::Flags
{
  REDUCTION = 0x1,
  LVAL = 0x2,
};

/* 1084 */
typedef D3DXShader::ConfigFields XGRAPHICS::ProgramControlFields;

/* 1085 */
typedef <vc_attributes>::event_sourceAttribute::optimize_e $F3D26A294CABF92166B822AF4009A032;

/* 1086 */
enum XGRAPHICS::R400ThreadModel::R400ThreadState
{
  TP_NORMAL = 0x0,
  SP_NORMAL = 0x1,
  TP_NOYIELD = 0x2,
  SP_NOYIELD = 0x3,
};

/* 1087 */
enum $B714C6F62B541E39B6770ED8D57BB7A8
{
  ASIZE = 0x7,
};

/* 1088 */
typedef $86E96F51E81A78BE16EB66EF6F73BF30 $A6E2D688E25538147C1564DAC000D80C;

/* 1089 */
enum $964B1E287A32DBF5291EF8404508894E
{
  NONE = 0x0,
  RESERVED = 0x1,
  SUBROUTINE = 0x2,
  CALL = 0x3,
};

/* 1090 */
enum AISpecies
{
  AI_SPECIES_HUMAN = 0x0,
  AI_SPECIES_DOG = 0x1,
  MAX_AI_SPECIES = 0x2,
  AI_SPECIES_ALL = 0x2,
};

/* 1091 */
enum $BECB2ECE747BD1567E4D7355284E70E0
{
  DOBJ_MAX_SURFS = 0x40,
  XMODEL_MAX_MERGED_SURFS = 0x20,
  XMODEL_MAX_SURFS = 0x30,
};

/* 1092 */
enum StaticModelFlag
{
  STATIC_MODEL_FLAG_NO_SHADOW = 0x1,
};

/* 1093 */
enum CinematicEnum
{
  CINEMATIC_NOT_PAUSED = 0x0,
  CINEMATIC_PAUSED = 0x1,
};

/* 1094 */
enum XMEDIA_CALLBACK_TYPE
{
  XMEDIA_NOTIFY_END_OF_FRAME = 0x1,
  XMEDIA_NOTIFY_STATE_CHANGE = 0x2,
  XMEDIA_NOTIFY_BEGIN_SCENE = 0x3,
  XMEDIA_NOTIFY_END_SCENE = 0x4,
};

/* 1095 */
enum XMEDIA_PLAYER_STATUS
{
  XMEDIA_PLAYER_IDLE = 0x1,
  XMEDIA_PLAYER_BUFFERING = 0x2,
  XMEDIA_PLAYER_PLAYING = 0x3,
  XMEDIA_PLAYER_PAUSING = 0x4,
  XMEDIA_PLAYER_PAUSED = 0x5,
  XMEDIA_PLAYER_STOPPING = 0x6,
  XMEDIA_PLAYER_STOPPED = 0x7,
  XMEDIA_PLAYER_TERMINATING = 0x8,
};

/* 1096 */
enum XMEDIA_VIDEO_FORMAT
{
  XMEDIA_VIDEO_FORMAT_I420 = 0x1,
};

/* 1097 */
enum $B4B8BED61B7FCB74F140B41556B61C01
{
  CULL_STATE_OUT = 0x0,
  CULL_STATE_BOUNDED_PENDING = 0x1,
  CULL_STATE_BOUNDED = 0x2,
  CULL_STATE_SKINNED_PENDING = 0x3,
  CULL_STATE_DONE = 0x4,
};

/* 1098 */
enum DpvsClipChildren
{
  DPVS_DONT_CLIP_CHILDREN = 0x0,
  DPVS_CLIP_CHILDREN = 0x1,
};

/* 1099 */
enum DpvsForceBevels
{
  DPVS_DONT_FORCE_BEVELS = 0x0,
  DPVS_FORCE_BEVELS = 0x1,
};

/* 1100 */
enum $90FA71C6F3B68008C0E17C722E207571
{
  VISDATA_VISIBLE = 0x1,
  VISDATA_CULL_OUT = 0x2,
};

/* 1101 */
enum $0E9EE34A21A8F04CA050E8897323EB2F
{
  CUSTOM_SAMPLER_REFLECTION_PROBE = 0x0,
  CUSTOM_SAMPLER_LIGHTMAP_PRIMARY = 0x1,
  CUSTOM_SAMPLER_LIGHTMAP_SECONDARY = 0x2,
  CUSTOM_SAMPLER_COUNT = 0x3,
};

/* 1102 */
enum $05D27AAD7CF475B5F81DFCBDF13BE035
{
  R_COLOR_OVERRIDE_BLACK = 0x0,
  R_COLOR_OVERRIDE_NONE = 0x1,
  R_COLOR_OVERRIDE_WHITE = 0x2,
  R_COLOR_OVERRIDE_GRAY = 0x3,
  R_COLOR_OVERRIDE_COUNT = 0x4,
};

/* 1103 */
enum $938A21E6D5D3D51FE0250D204EE4F6D4
{
  MTL_PREPASS_STANDARD = 0x0,
  MTL_PREPASS_ALPHA = 0x1,
  MTL_PREPASS_FLOATZ = 0x2,
  MTL_PREPASS_NONE = 0x3,
  MTL_PREPASS_TYPECOUNT = 0x4,
};

/* 1104 */
enum GfxDrawSceneMethod
{
  GFX_DRAW_SCENE_NONE = 0x0,
  GFX_DRAW_SCENE_FULLBRIGHT = 0x1,
  GFX_DRAW_SCENE_DEBUGSHADER = 0x2,
  GFX_DRAW_SCENE_STANDARD = 0x3,
};

/* 1105 */
enum LightHasShadowMap
{
  LIGHT_HAS_SHADOWMAP = 0x0,
  LIGHT_HAS_NO_SHADOWMAP = 0x1,
};

/* 1106 */
enum $89738957627DB6EDF3B799DCFEC42288
{
  VERTEX_SHADER_NONE = 0x0,
  VERTEX_SHADER_MODEL_LIT = 0x1,
  VERTEX_SHADER_MODEL_UNLIT = 0x2,
};

/* 1107 */
enum $03F452D8EA8227B36C03DF43B8E7FCA2
{
  R_NORMAL_OVERRIDE_FLAT = 0x0,
  R_NORMAL_OVERRIDE_NONE = 0x1,
  R_NORMAL_OVERRIDE_COUNT = 0x2,
};

/* 1108 */
enum $D6D873938D2EAC70BBDCF93D3349E4FB
{
  R_FB_COLOR_DEBUG_NONE = 0x0,
  R_FB_COLOR_DEBUG_SCREEN = 0x1,
  R_FB_COLOR_DEBUG_FEEDBACK = 0x2,
  R_FB_COLOR_DEBUG_COUNT = 0x3,
};

/* 1109 */
enum $23D517BB04FF1ECE86BBD4613ED23F49
{
  R_DEBUGSHADER_NONE = 0x0,
  R_DEBUGSHADER_TEXTURE = 0x1,
  R_DEBUGSHADER_TANGENT = 0x2,
  R_DEBUGSHADER_BINORMAL = 0x3,
  R_DEBUGSHADER_NORMAL = 0x4,
  R_DEBUGSHADER_COUNT = 0x5,
};

/* 1110 */
enum $6A53BE389BFA9EA2ED0639833923F323
{
  R_GPU_SYNC_OFF = 0x0,
  R_GPU_SYNC_BEGINNING = 0x1,
  R_GPU_SYNC_BEFORE_PRESENT = 0x2,
  R_GPU_SYNC_ADAPTIVE = 0x3,
  R_GPU_SYNC_COUNT = 0x4,
};

/* 1111 */
enum $A9C5BD9C84CD6680CDF0F8E5D4D1C1A0
{
  GFX_SM_OVERLAY_OFF = 0x0,
  GFX_SM_OVERLAY_SUN = 0x1,
  GFX_SM_OVERLAY_SPOT = 0x2,
  GFX_SM_OVERLAY_COUNT = 0x3,
};

/* 1112 */
enum $C4F1D8FBC7EC9F7DCCC89AC339B4DBFB
{
  R_CLEAR_NEVER = 0x0,
  R_CLEAR_DEV_ONLY_BLINK = 0x1,
  R_CLEAR_BLINK = 0x2,
  R_CLEAR_STEADY = 0x3,
  R_CLEAR_FOG_COLOR = 0x4,
  R_CLEAR_COUNT = 0x5,
};

/* 1113 */
enum $ED818697C874626D3A86CCCEEA86772C
{
  GFX_SHOW_PIXEL_COST_OFF = 0x0,
  GFX_SHOW_PIXEL_COST_TIMING_ONLY = 0x1,
  GFX_SHOW_PIXEL_COST_USE_DEPTH = 0x2,
  GFX_SHOW_PIXEL_COST_IGNORE_DEPTH = 0x3,
  GFX_SHOW_PIXEL_COST_COUNT = 0x4,
};

/* 1114 */
enum $BAB9ACD025604F7E057259C62F656B8A
{
  R_MIP_FILTER_UNCHANGED = 0x0,
  R_MIP_FILTER_FORCE_LINEAR = 0x1,
  R_MIP_FILTER_FORCE_NEAREST = 0x2,
  R_MIP_FILTER_FORCE_NO_MIPS = 0x3,
  R_MIP_FILTER_COUNT = 0x4,
};

/* 1115 */
enum $86D6598AAF9F0060ED92DFAB004DD5D9
{
  IMAGE_PROG_SHADOW_COOKIE = 0x0,
  IMAGE_PROG_SHADOWMAP_SUN = 0x1,
  IMAGE_PROG_SHADOWMAP_SPOT = 0x2,
  IMAGE_PROG_FLOATZ = 0x3,
  IMAGE_PROG_POST_EFFECT_0 = 0x4,
  IMAGE_PROG_POST_EFFECT_1 = 0x5,
  IMAGE_PROG_RESOLVED_POST_SUN = 0x6,
  IMAGE_PROG_RESOLVED_SCENE = 0x7,
  IMAGE_PROG_HALF_RESAMPLED_SCENE = 0x8,
  IMAGE_PROG_SAVEDSCREEN = 0x9,
  IMAGE_PROG_MODEL_LIGHTING = 0xA,
  IMAGE_PROG_COUNT = 0xB,
};

/* 1116 */
enum StreamStatMetrics
{
  STREAMSTATMETRIC_NUMBER = 0x0,
  STREAMSTATMETRIC_SIZE = 0x1,
  STREAMSTATMETRIC_COUNT = 0x2,
};

/* 1117 */
enum StreamStatElements
{
  STREAMSTATITEM_RESIDENT_BEGIN = 0x0,
  STREAMSTATITEM_RESIDENT_ZERO = 0x0,
  STREAMSTATITEM_RESIDENT_LOW = 0x1,
  STREAMSTATITEM_RESIDENT_MEDIUM = 0x2,
  STREAMSTATITEM_RESIDENT_HIGH = 0x3,
  STREAMSTATITEM_RESIDENT_FALLING_FROM_USE = 0x4,
  STREAMSTATITEM_RESIDENT_IN_USE = 0x5,
  STREAMSTATITEM_RESIDENT_END = 0x6,
  STREAMSTATITEM_LOADED_CHANGE = 0x6,
  STREAMSTATITEM_DISCARDED_CHANGE = 0x7,
  STREAMSTATITEM_RELOADED_CHANGE = 0x8,
  STREAMSTATITEM_FAILED_INACTIVE_CHANGE = 0x9,
  STREAMSTATITEM_FAILED_ACTIVE_CHANGE = 0xA,
  STREAMSTATITEM_LOADED_TOTAL = 0xB,
  STREAMSTATITEM_RELOADED_TOTAL = 0xC,
  STREAMSTATITEM_DISCARDED_TOTAL = 0xD,
  STREAMSTATITEM_VISIBLE_HIMIP_SURFS = 0xE,
  STREAMSTATITEM_VISIBLE_LOADED_HIMIP_SURFS = 0xF,
  STREAMSTATITEM_VISIBLE_UNLOADED_HIMIP_SURFS = 0x10,
  STREAMSTATITEM_VISIBLE_HIMIP_IMGS = 0x11,
  STREAMSTATITEM_VISIBLE_LOADED_HIMIP_IMGS = 0x12,
  STREAMSTATITEM_VISIBLE_UNLOADED_HIMIP_IMGS = 0x13,
  STREAMSTATITEM_COUNT = 0x14,
};

/* 1118 */
enum MaterialUpdateFrequency
{
  MTL_UPDATE_PER_PRIM = 0x0,
  MTL_UPDATE_PER_OBJECT = 0x1,
  MTL_UPDATE_RARELY = 0x2,
  MTL_UPDATE_CUSTOM = 0x3,
};

/* 1119 */
enum $E02171E3F54CA17A10D7B3B92E69FA00
{
  MTL_FEATURE_TWEAK = 0x20,
};

/* 1120 */
enum GfxModelLightExtrapolation
{
  GFX_MODELLIGHT_EXTRAPOLATE = 0x0,
  GFX_MODELLIGHT_SHOW_MISSING = 0x1,
};

/* 1121 */
enum GfxProjectionTypes
{
  GFX_PROJECTION_2D = 0x0,
  GFX_PROJECTION_3D = 0x1,
};

/* 1122 */
enum $E3E5A78664A1E46C395BBEC3D9B50925
{
  TEXT_RENDERFLAG_FORCEMONOSPACE = 0x1,
  TEXT_RENDERFLAG_CURSOR = 0x2,
  TEXT_RENDERFLAG_DROPSHADOW = 0x4,
  TEXT_RENDERFLAG_DROPSHADOW_EXTRA = 0x8,
  TEXT_RENDERFLAG_GLOW = 0x10,
  TEXT_RENDERFLAG_GLOW_FORCE_COLOR = 0x20,
  TEXT_RENDERFLAG_FX_DECODE = 0x40,
  TEXT_RENDERFLAG_PADDING = 0x80,
};

/* 1123 */
enum FullscreenType
{
  FULLSCREEN_DISPLAY = 0x0,
  FULLSCREEN_MIXED = 0x1,
  FULLSCREEN_SCENE = 0x2,
};

/* 1124 */
enum RenderTargetUsage
{
  RENDERTARGET_USAGE_DEPTH = 0x0,
  RENDERTARGET_USAGE_RENDER = 0x1,
  RENDERTARGET_USAGE_RENDER_SHARE_SCENE = 0x2,
  RENDERTARGET_USAGE_TEXTURE = 0x3,
};

/* 1125 */
enum $A1E4769FC457566E4100BC46C0B299CF
{
  DISTANCE_CHECK_PERFORM = 0x0,
  DISTANCE_CHECK_SKIP = 0x1,
};

/* 1126 */
enum $2932F5BE864D00D815B82B3B666A7E30
{
  STREAM_PRIORITY_ZERO = 0x0,
  STREAM_PRIORITY_LOW = 0x1,
  STREAM_PRIORITY_MEDIUM = 0x2,
  STREAM_PRIORITY_HIGH = 0x3,
  STREAM_PRIORITY_FALLING_FROM_USE = 0x4,
  STREAM_PRIORITY_IN_USE = 0x5,
  STREAM_PRIORITY_COUNT = 0x6,
  STREAM_PRIORITY_INVALID = 0xFF,
};

/* 1127 */
enum GfxPrimStatsTarget
{
  GFX_PRIM_STATS_WORLD = 0x0,
  GFX_PRIM_STATS_SMODELCACHED = 0x1,
  GFX_PRIM_STATS_SMODELRIGID = 0x2,
  GFX_PRIM_STATS_XMODELRIGID = 0x3,
  GFX_PRIM_STATS_XMODELSKINNED = 0x4,
  GFX_PRIM_STATS_BMODEL = 0x5,
  GFX_PRIM_STATS_FX = 0x6,
  GFX_PRIM_STATS_HUD = 0x7,
  GFX_PRIM_STATS_DEBUG = 0x8,
  GFX_PRIM_STATS_CODE = 0x9,
  GFX_PRIM_STATS_COUNT = 0xA,
};

/* 1128 */
enum GfxSortedHistoryAdd
{
  SH_ADD_NEVER = 0x0,
  SH_ADD_IF_NEW = 0x1,
};

/* 1129 */
enum $BC28FBB7508368454ABA82CD59C5529D
{
  STREAMSHOWSTATS_NONE = 0x0,
  STREAMSHOWSTATS_LIST = 0x1,
  STREAMSHOWSTATS_STATS = 0x2,
};

/* 1130 */
enum INTRNCVT_STATUS
{
  INTRNCVT_OK = 0x0,
  INTRNCVT_OVERFLOW = 0x1,
  INTRNCVT_UNDERFLOW = 0x2,
};

/* 1131 */
enum STATE
{
  ST_NORMAL = 0x0,
  ST_PERCENT = 0x1,
  ST_FLAG = 0x2,
  ST_WIDTH = 0x3,
  ST_DOT = 0x4,
  ST_PRECIS = 0x5,
  ST_SIZE = 0x6,
  ST_TYPE = 0x7,
};

/* 1132 */
enum CHARTYPE
{
  CH_OTHER = 0x0,
  CH_PERCENT = 0x1,
  CH_DOT = 0x2,
  CH_STAR = 0x3,
  CH_ZERO = 0x4,
  CH_DIGIT = 0x5,
  CH_FLAG = 0x6,
  CH_SIZE = 0x7,
  CH_TYPE = 0x8,
};

/* 1133 */
enum ARG_TYPE
{
  eblank = 0x0,
  e_int_arg = 0x1,
  e_short_arg = 0x2,
  e_ptr_arg = 0x3,
  e_int64_arg = 0x4,
  e_long_long_arg = 0x5,
  e_long_arg = 0x6,
  e_longdouble_arg = 0x7,
  e_double_arg = 0x8,
};

/* 1134 */
enum Tokens
{
  TOK_basedLp = 0x0,
  TOK_cdecl = 0x1,
  TOK_pascal = 0x2,
  TOK_stdcall = 0x3,
  TOK_thiscall = 0x4,
  TOK_fastcall = 0x5,
  TOK_cocall = 0x6,
  TOK_ptr64 = 0x7,
  TOK_restrict = 0x8,
  TOK_unaligned = 0x9,
  TOK__last = 0xA,
};

/* 1135 */
enum DNameStatus
{
  DN_valid = 0x0,
  DN_invalid = 0x1,
  DN_truncated = 0x2,
  DN_error = 0x3,
};

/* 1136 */
enum _FP_OPERATION_CODE
{
  _FpCodeUnspecified = 0x0,
  _FpCodeAdd = 0x1,
  _FpCodeSubtract = 0x2,
  _FpCodeMultiply = 0x3,
  _FpCodeDivide = 0x4,
  _FpCodeSquareRoot = 0x5,
  _FpCodeRemainder = 0x6,
  _FpCodeCompare = 0x7,
  _FpCodeConvert = 0x8,
  _FpCodeRound = 0x9,
  _FpCodeTruncate = 0xA,
  _FpCodeFloor = 0xB,
  _FpCodeCeil = 0xC,
  _FpCodeAcos = 0xD,
  _FpCodeAsin = 0xE,
  _FpCodeAtan = 0xF,
  _FpCodeAtan2 = 0x10,
  _FpCodeCabs = 0x11,
  _FpCodeCos = 0x12,
  _FpCodeCosh = 0x13,
  _FpCodeExp = 0x14,
  _FpCodeFabs = 0x15,
  _FpCodeFmod = 0x16,
  _FpCodeFrexp = 0x17,
  _FpCodeHypot = 0x18,
  _FpCodeLdexp = 0x19,
  _FpCodeLog = 0x1A,
  _FpCodeLog10 = 0x1B,
  _FpCodeModf = 0x1C,
  _FpCodePow = 0x1D,
  _FpCodeSin = 0x1E,
  _FpCodeSinh = 0x1F,
  _FpCodeTan = 0x20,
  _FpCodeTanh = 0x21,
  _FpCodeY0 = 0x22,
  _FpCodeY1 = 0x23,
  _FpCodeYn = 0x24,
  _FpCodeLogb = 0x25,
  _FpCodeNextafter = 0x26,
  _FpCodeNegate = 0x27,
  _FpCodeFmin = 0x28,
  _FpCodeFmax = 0x29,
  _FpCodeConvertTrunc = 0x2A,
  _XMMIAddps = 0x2B,
  _XMMIAddss = 0x2C,
  _XMMISubps = 0x2D,
  _XMMISubss = 0x2E,
  _XMMIMulps = 0x2F,
  _XMMIMulss = 0x30,
  _XMMIDivps = 0x31,
  _XMMIDivss = 0x32,
  _XMMISqrtps = 0x33,
  _XMMISqrtss = 0x34,
  _XMMIMaxps = 0x35,
  _XMMIMaxss = 0x36,
  _XMMIMinps = 0x37,
  _XMMIMinss = 0x38,
  _XMMICmpps = 0x39,
  _XMMICmpss = 0x3A,
  _XMMIComiss = 0x3B,
  _XMMIUComiss = 0x3C,
  _XMMICvtpi2ps = 0x3D,
  _XMMICvtsi2ss = 0x3E,
  _XMMICvtps2pi = 0x3F,
  _XMMICvtss2si = 0x40,
  _XMMICvttps2pi = 0x41,
  _XMMICvttss2si = 0x42,
  _XMMIAddsubps = 0x43,
  _XMMIHaddps = 0x44,
  _XMMIHsubps = 0x45,
  _XMMI2Addpd = 0x46,
  _XMMI2Addsd = 0x47,
  _XMMI2Subpd = 0x48,
  _XMMI2Subsd = 0x49,
  _XMMI2Mulpd = 0x4A,
  _XMMI2Mulsd = 0x4B,
  _XMMI2Divpd = 0x4C,
  _XMMI2Divsd = 0x4D,
  _XMMI2Sqrtpd = 0x4E,
  _XMMI2Sqrtsd = 0x4F,
  _XMMI2Maxpd = 0x50,
  _XMMI2Maxsd = 0x51,
  _XMMI2Minpd = 0x52,
  _XMMI2Minsd = 0x53,
  _XMMI2Cmppd = 0x54,
  _XMMI2Cmpsd = 0x55,
  _XMMI2Comisd = 0x56,
  _XMMI2UComisd = 0x57,
  _XMMI2Cvtpd2pi = 0x58,
  _XMMI2Cvtsd2si = 0x59,
  _XMMI2Cvttpd2pi = 0x5A,
  _XMMI2Cvttsd2si = 0x5B,
  _XMMI2Cvtps2pd = 0x5C,
  _XMMI2Cvtss2sd = 0x5D,
  _XMMI2Cvtpd2ps = 0x5E,
  _XMMI2Cvtsd2ss = 0x5F,
  _XMMI2Cvtdq2ps = 0x60,
  _XMMI2Cvttps2dq = 0x61,
  _XMMI2Cvtps2dq = 0x62,
  _XMMI2Cvttpd2dq = 0x63,
  _XMMI2Cvtpd2dq = 0x64,
  _XMMI2Addsubpd = 0x65,
  _XMMI2Haddpd = 0x66,
  _XMMI2Hsubpd = 0x67,
};

/* 1137 */
enum _FPIEEE_FORMAT
{
  _FpFormatFp32 = 0x0,
  _FpFormatFp64 = 0x1,
  _FpFormatFp80 = 0x2,
  _FpFormatFp128 = 0x3,
  _FpFormatI16 = 0x4,
  _FpFormatI32 = 0x5,
  _FpFormatI64 = 0x6,
  _FpFormatU16 = 0x7,
  _FpFormatU32 = 0x8,
  _FpFormatU64 = 0x9,
  _FpFormatBcd80 = 0xA,
  _FpFormatCompare = 0xB,
  _FpFormatString = 0xC,
};

/* 1138 */
enum _FPIEEE_ROUNDING_MODE
{
  _FpRoundNearest = 0x0,
  _FpRoundMinusInfinity = 0x1,
  _FpRoundPlusInfinity = 0x2,
  _FpRoundChopped = 0x3,
};

/* 1139 */
enum _FPIEEE_PRECISION
{
  _FpPrecisionFull = 0x0,
  _FpPrecision53 = 0x1,
  _FpPrecision24 = 0x2,
};

/* 1140 */
enum state_t
{
  S_INIT = 0x0,
  S_EAT0L = 0x1,
  S_SIGNM = 0x2,
  S_GETL = 0x3,
  S_GETR = 0x4,
  S_POINT = 0x5,
  S_E = 0x6,
  S_SIGNE = 0x7,
  S_EAT0E = 0x8,
  S_GETE = 0x9,
  S_END = 0xA,
  S_E_IMPLICIT = 0xB,
};

/* 1141 */
enum $1DD7A03358E0D01DD359262876E6A0F0
{
  lkNormal = 0x0,
  lkPrealloc = 0x1,
  lkDeleted = 0x2,
};

/* 1142 */
union GPUCOMMAND_CONTEXT_UPDATE
{
  unsigned int Unused;
  unsigned int dword[1];
};

/* 1143 */
struct _TOKEN_PRIMARY_GROUP
{
  void *PrimaryGroup;
};

/* 1144 */
struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY
{
  unsigned int BeginAddress;
  unsigned int EndAddress;
  unsigned int UnwindInfoAddress;
};

/* 1145 */
struct $2ACC251678A70CC660B42C50BE23747A
{
  void *hMem;
  unsigned int dwReserved[3];
};

/* 1146 */
struct $03A236B16FC15461493BD6ADF5082600
{
  unsigned int dwCommittedSize;
  unsigned int dwUnCommittedSize;
  void *lpFirstBlock;
  void *lpLastBlock;
};

/* 1147 */
union $0D060F406CD325B8685DD5E51A40B77A
{
  $2ACC251678A70CC660B42C50BE23747A Block;
  $03A236B16FC15461493BD6ADF5082600 Region;
};

/* 1148 */
struct _PROCESS_HEAP_ENTRY
{
  void *lpData;
  unsigned int cbData;
  char cbOverhead;
  char iRegionIndex;
  unsigned __int16 wFlags;
  $0D060F406CD325B8685DD5E51A40B77A Region;
};

/* 1149 */
struct D3DXCOLOR
{
  float r;
  float g;
  float b;
  float a;
};

/* 1150 */
struct _D3DCOLORVALUE
{
  float r;
  float g;
  float b;
  float a;
};

/* 1151 */
struct D3DXFLOAT16
{
  unsigned __int16 value;
};

/* 1152 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 1153 */
struct _SID_AND_ATTRIBUTES
{
  void *Sid;
  unsigned int Attributes;
};

/* 1154 */
struct sockaddr
{
  unsigned __int16 sa_family;
  char sa_data[14];
};

/* 1155 */
struct _D3DXSHADER_WRITEINFO
{
  unsigned int Instruction;
  unsigned __int16 Component[4];
};

/* 1156 */
struct _EXCEPTION_RECORD
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInformation[15];
};

/* 1157 */
struct _FILETIME
{
  unsigned int dwHighDateTime;
  unsigned int dwLowDateTime;
};

/* 1158 */
struct _XMARKETPLACE_ASSET
{
  unsigned int dwAssetID;
  unsigned int dwQuantity;
};

/* 1159 */
struct _XMARKETPLACE_ASSET_PACKAGE
{
  _FILETIME ftEnumerate;
  unsigned int cAssets;
  unsigned int cTotalAssets;
  _XMARKETPLACE_ASSET aAssets[1];
};

/* 1160 */
struct _XMARKETPLACE_ASSET_ENUMERATE_REPLY
{
  char signature[256];
  _XMARKETPLACE_ASSET_PACKAGE assetPackage;
};

/* 1161 */
struct D3DResource
{
  unsigned int Common;
  unsigned int ReferenceCount;
  unsigned int Fence;
  unsigned int ReadFence;
  unsigned int Identifier;
  unsigned int BaseFlush;
};

/* 1162 */
struct GPUTEXTURESIZE_1D
{
  int _bf0;
};

/* 1163 */
struct GPUTEXTURESIZE_2D
{
  int _bf0;
};

/* 1164 */
struct GPUTEXTURESIZE_3D
{
  int _bf0;
};

/* 1165 */
struct GPUTEXTURESIZE_STACK
{
  int _bf0;
};

/* 1166 */
union $C243C4D674053518C29CA6FB76C53DA7
{
  GPUTEXTURESIZE_1D OneD;
  GPUTEXTURESIZE_2D TwoD;
  GPUTEXTURESIZE_3D ThreeD;
  GPUTEXTURESIZE_STACK Stack;
};

/* 1167 */
struct $203442968A7C58FC8B11ECBFF1D33929
{
  _BYTE gap0[4];
  int _bf4;
  $C243C4D674053518C29CA6FB76C53DA7 Size;
  _BYTE gapc[8];
  int _bf20;
};

/* 1168 */
union GPUTEXTURE_FETCH_CONSTANT
{
  unsigned int dword[6];
  $203442968A7C58FC8B11ECBFF1D33929 _s1;
};

/* 1169 */
struct D3DBaseTexture
{
  D3DResource baseclass_0;
  unsigned int MipFlush;
  GPUTEXTURE_FETCH_CONSTANT Format;
};

/* 1170 */
struct D3DCubeTexture
{
  D3DBaseTexture baseclass_0;
};

/* 1171 */
struct $F40CD173CB8661182889563E6E319598
{
  _BYTE gap0[8];
  int _bf8;
};

/* 1172 */
union GPUALU_INSTRUCTION
{
  unsigned int dword[3];
  $F40CD173CB8661182889563E6E319598 _s1;
};

/* 1173 */
struct tagPALETTEENTRY
{
  char peRed;
  char peGreen;
  char peBlue;
  char peFlags;
};

/* 1174 */
struct _SID_IDENTIFIER_AUTHORITY
{
  char Value[6];
};

/* 1175 */
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
  unsigned int TimeDateStamp;
  unsigned __int16 OffsetModuleName;
  unsigned __int16 NumberOfModuleForwarderRefs;
};

/* 1176 */
struct $9816E157869CE4BAAC72C5D665B03343
{
  char x;
  char y;
  char z;
  char w;
};

/* 1177 */
union $F8266EFF78560B6C69ACEB8D6761AA64
{
  $9816E157869CE4BAAC72C5D665B03343 _s0;
  unsigned int v;
};

/* 1178 */
struct _XMBYTE4
{
  $F8266EFF78560B6C69ACEB8D6761AA64 ___u0;
};

/* 1179 */
struct _LUID
{
  unsigned int LowPart;
  int HighPart;
};

/* 1180 */
struct _LUID_AND_ATTRIBUTES
{
  _LUID Luid;
  unsigned int Attributes;
};

/* 1181 */
struct XNKID
{
  char ab[8];
};

/* 1182 */
struct $BD85036DCC0442AA317E9171D0F2179B
{
  char s_b1;
  char s_b2;
  char s_b3;
  char s_b4;
};

/* 1183 */
struct $CC608A129C88F312E26B04B0A6BA5EDC
{
  unsigned __int16 s_w1;
  unsigned __int16 s_w2;
};

/* 1184 */
union $E803DB5A59094B6D79A3A9D971104D0D
{
  $BD85036DCC0442AA317E9171D0F2179B S_un_b;
  $CC608A129C88F312E26B04B0A6BA5EDC S_un_w;
  unsigned int S_addr;
};

/* 1185 */
struct in_addr
{
  $E803DB5A59094B6D79A3A9D971104D0D S_un;
};

/* 1186 */
struct XNADDR
{
  in_addr ina;
  in_addr inaOnline;
  unsigned __int16 wPortOnline;
  char abEnet[6];
  char abOnline[20];
};

/* 1187 */
struct XNKEY
{
  char ab[16];
};

/* 1188 */
struct _XSESSION_INFO
{
  XNKID sessionID;
  XNADDR hostAddress;
  XNKEY keyExchangeKey;
};

/* 1189 */
struct $AC3F9663210E9A86DE72F141A5807F14
{
  unsigned int cbData;
  wchar_t *pwszData;
};

/* 1190 */
struct $E43B8D81F014116F1520DF8F8A2D4BDC
{
  unsigned int cbData;
  char *pbData;
};

/* 1191 */
union $EC4E5848B8A1A255FDA03FB53076266C
{
  int nData;
  __int64 i64Data;
  double dblData;
  $AC3F9663210E9A86DE72F141A5807F14 string;
  float fData;
  $E43B8D81F014116F1520DF8F8A2D4BDC binary;
  _FILETIME ftData;
};

/* 1192 */
struct _XUSER_DATA
{
  char type;
  __declspec(align(8)) $EC4E5848B8A1A255FDA03FB53076266C binary;
};

/* 1193 */
struct _XUSER_PROPERTY
{
  unsigned int dwPropertyId;
  __declspec(align(8)) _XUSER_DATA value;
};

/* 1194 */
struct _XUSER_CONTEXT
{
  unsigned int dwContextId;
  unsigned int dwValue;
};

/* 1195 */
struct _XSESSION_SEARCHRESULT
{
  _XSESSION_INFO info;
  unsigned int dwOpenPublicSlots;
  unsigned int dwOpenPrivateSlots;
  unsigned int dwFilledPublicSlots;
  unsigned int dwFilledPrivateSlots;
  unsigned int cProperties;
  unsigned int cContexts;
  _XUSER_PROPERTY *pProperties;
  _XUSER_CONTEXT *pContexts;
};

/* 1196 */
struct _IMAGE_BOUND_FORWARDER_REF
{
  unsigned int TimeDateStamp;
  unsigned __int16 OffsetModuleName;
  unsigned __int16 Reserved;
};

/* 1197 */
struct D3DVertexDeclaration
{
  D3DResource baseclass_0;
};

/* 1198 */
#pragma pack(push, 2)
struct _D3DVERTEXELEMENT9
{
  unsigned __int16 Stream;
  unsigned __int16 Offset;
  unsigned int Type;
  char Method;
  char Usage;
  char UsageIndex;
};
#pragma pack(pop)

/* 1199 */
struct IUnknown
{
  IUnknownVtbl *vfptr;
};

/* 1200 */
struct $9B7AFD9785AAA8D1B4554A789A28E284
{
  _BYTE gap0[4];
  unsigned int (__cdecl *AddRef)(IUnknown *this);
  unsigned int (__cdecl *Release)(IUnknown *this);
};

/* 1201 */
union $3B62748DD21B07F6F6A06A981A352B8D
{
  HRESULT (__cdecl *QueryInterface)(IUnknown *this, _GUID *, void **);
  $9B7AFD9785AAA8D1B4554A789A28E284 _s1;
};

/* 1202 */
struct IUnknownVtbl
{
  $3B62748DD21B07F6F6A06A981A352B8D ___u0;
};

/* 1203 */
struct IDirectXFile
{
  IUnknown baseclass_0;
};

/* 1204 */
struct XTITLE_SERVER_INFO
{
  in_addr inaServer;
  unsigned int dwFlags;
  char szServerInfo[200];
};

/* 1205 */
struct _D3DVECTOR
{
  float x;
  float y;
  float z;
};

/* 1206 */
struct D3DXVECTOR3
{
  _D3DVECTOR baseclass_0;
};

/* 1207 */
struct _TOKEN_SOURCE
{
  char SourceName[8];
  _LUID SourceIdentifier;
};

/* 1208 */
struct _TOKEN_CONTROL
{
  _LUID TokenId;
  _LUID AuthenticationId;
  _LUID ModifiedId;
  _TOKEN_SOURCE TokenSource;
};

/* 1209 */
struct ID3DXBuffer
{
  IUnknown baseclass_0;
};

/* 1210 */
struct D3DXCore::CBuffer
{
  ID3DXBuffer baseclass_0;
  unsigned int m_cRef;
  unsigned int m_dwSize;
  char *m_pbBuffer;
};

/* 1211 */
struct D3DXCore::CBufferA16
{
  D3DXCore::CBuffer baseclass_0;
};

/* 1212 */
struct D3DXCore::CStringStack
{
  char **m_ppsz;
  unsigned int m_cpsz;
  unsigned int m_cpszLim;
  unsigned int m_cbsz;
};

/* 1213 */
struct D3DXCore::CFile
{
  void *m_hFile;
  const void *m_pvData;
  unsigned int m_cbData;
};

/* 1214 */
struct D3DXCore::CAlloc
{
  char *m_pbRegion;
  unsigned int m_cbPage;
  unsigned int m_cbAlloc;
  unsigned int m_cbCommit;
  unsigned int m_cbReserve;
  unsigned int m_cbReserveMin;
};

/* 1215 */
struct D3DXCore::CStringBuffer
{
  D3DXCore::CBuffer baseclass_0;
  char **m_pStringLow;
  char *m_pStringHigh;
};

/* 1216 */
struct _TypeDescriptor
{
  const void *pVFTable;
  void *spare;
  char name[];
};

/* 1217 */
struct _PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 1218 */
struct _s__CatchableType
{
  unsigned int properties;
  _TypeDescriptor *pType;
  _PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)();
};

/* 1219 */
struct _s__CatchableTypeArray
{
  int nCatchableTypes;
  _s__CatchableType *arrayOfCatchableTypes[];
};

/* 1220 */
struct _D3DSURFACE_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  unsigned int Pool;
  _D3DMULTISAMPLE_TYPE MultiSampleType;
  unsigned int MultiSampleQuality;
  unsigned int Width;
  unsigned int Height;
};

/* 1221 */
struct _RECTL
{
  int left;
  int top;
  int right;
  int bottom;
};

/* 1222 */
struct D3DQuery
{
  char dummy[1];
};

/* 1223 */
struct tagPOINT
{
  int x;
  int y;
};

/* 1224 */
struct $91D1B2149FAC90180ECB9AC277F76009
{
  float x;
  float y;
  float z;
  float w;
};

/* 1225 */
union $596237644BA87A0635E31D8CC8D6B911
{
  $91D1B2149FAC90180ECB9AC277F76009 _s0;
  float v[4];
  unsigned int u[4];
};

/* 1226 */
struct __vector4
{
  $596237644BA87A0635E31D8CC8D6B911 ___u0;
};

/* 1227 */
struct _D3DLOCKED_RECT
{
  int Pitch;
  void *pBits;
};

/* 1228 */
struct _ACE_HEADER
{
  char AceType;
  char AceFlags;
  unsigned __int16 AceSize;
};

/* 1229 */
struct HGLRC__
{
  int unused;
};

/* 1230 */
struct fd_set
{
  unsigned int fd_count;
  unsigned int fd_array[64];
};

/* 1231 */
union GPU_WRAPPING1
{
  unsigned int dword;
};

/* 1232 */
struct _XMHALF4
{
  unsigned __int16 x;
  unsigned __int16 y;
  unsigned __int16 z;
  unsigned __int16 w;
};

/* 1233 */
struct HRGN__
{
  int unused;
};

/* 1234 */
struct _D3DMIPTAIL_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  unsigned int Pool;
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int BaseLevel;
  unsigned int Size;
};

/* 1235 */
struct _D3DLOCKED_TAIL
{
  int RowPitch;
  int SlicePitch;
  void *pBits;
};

/* 1236 */
struct _XMUDHEN3
{
  unsigned int v;
};

/* 1237 */
struct _D3DXSHADER_TYPEINFO
{
  unsigned __int16 Class;
  unsigned __int16 Type;
  unsigned __int16 Rows;
  unsigned __int16 Columns;
  unsigned __int16 Elements;
  unsigned __int16 StructMembers;
  unsigned int StructMemberInfo;
};

/* 1238 */
union _UCODE_VSINPUTDECLARATION
{
  unsigned int dword;
};

/* 1239 */
struct D3DLineTexture
{
  D3DBaseTexture baseclass_0;
};

/* 1240 */
struct _XMDHEN3
{
  unsigned int v;
};

/* 1241 */
struct _XMUDEC4
{
  unsigned int v;
};

/* 1242 */
struct _XSTORAGE_FILE_INFO
{
  unsigned int dwTitleID;
  unsigned int dwTitleVersion;
  unsigned __int64 qwOwnerPUID;
  char bCountryID;
  unsigned __int64 qwReserved;
  unsigned int dwContentType;
  unsigned int dwStorageSize;
  unsigned int dwInstalledSize;
  _FILETIME ftCreated;
  _FILETIME ftLastModified;
  unsigned __int16 wAttributesSize;
  unsigned __int16 cchPathName;
  wchar_t *pwszPathName;
  char *pbAttributes;
};

/* 1243 */
struct _XSTORAGE_ENUMERATE_RESULTS
{
  unsigned int dwTotalNumItems;
  unsigned int dwNumItemsReturned;
  _XSTORAGE_FILE_INFO *pItems;
};

/* 1244 */
#pragma pack(push, 8)
struct _D3DXTRACK_DESC
{
  _D3DXPRIORITY_TYPE Priority;
  float Weight;
  float Speed;
  double Position;
  int Enable;
};
#pragma pack(pop)

/* 1245 */
struct $BD17ED5EF6FA8CE7398C97BF41535960
{
  int HighPart;
  unsigned int LowPart;
};

/* 1246 */
union _LARGE_INTEGER
{
  $BD17ED5EF6FA8CE7398C97BF41535960 _s0;
  $BD17ED5EF6FA8CE7398C97BF41535960 u;
  __int64 QuadPart;
};

/* 1247 */
struct IDirectXFileObject
{
  IUnknown baseclass_0;
};

/* 1248 */
struct IDirectXFileBinary
{
  IDirectXFileObject baseclass_0;
};

/* 1249 */
struct _D3DXMACRO
{
  const char *Name;
  const char *Definition;
};

/* 1250 */
struct _D3DXFRAGMENT_DESC
{
  const char *Name;
  unsigned int Target;
};

/* 1251 */
struct _FLOAT128
{
  __int64 LowPart;
  __int64 HighPart;
};

/* 1252 */
struct HKL__
{
  int unused;
};

/* 1253 */
struct _XSTORAGE_FACILITY_INFO_GAME_CLIP
{
  unsigned int dwLeaderboardID;
};

/* 1254 */
struct _XMUDHENN3
{
  unsigned int v;
};

/* 1255 */
struct HWND__
{
  int unused;
};

/* 1256 */
struct _D3DRING_BUFFER_PARAMETERS
{
  unsigned int Flags;
  unsigned int PrimarySize;
  void *pPrimary;
  unsigned int SecondarySize;
  void *pSecondary;
  unsigned int SegmentCount;
};

/* 1257 */
struct _D3DRECT
{
  int x1;
  int y1;
  int x2;
  int y2;
};

/* 1258 */
struct _D3DVIDEO_SCALER_PARAMETERS
{
  _D3DRECT ScalerSourceRect;
  unsigned int ScaledOutputWidth;
  unsigned int ScaledOutputHeight;
  unsigned int FilterProfile;
};

/* 1259 */
struct _D3DPRESENT_PARAMETERS_
{
  unsigned int BackBufferWidth;
  unsigned int BackBufferHeight;
  _D3DFORMAT BackBufferFormat;
  unsigned int BackBufferCount;
  _D3DMULTISAMPLE_TYPE MultiSampleType;
  unsigned int MultiSampleQuality;
  _D3DSWAPEFFECT SwapEffect;
  HWND__ *hDeviceWindow;
  int Windowed;
  int EnableAutoDepthStencil;
  _D3DFORMAT AutoDepthStencilFormat;
  unsigned int Flags;
  unsigned int FullScreen_RefreshRateInHz;
  unsigned int PresentationInterval;
  int DisableAutoBackBuffer;
  int DisableAutoFrontBuffer;
  _D3DFORMAT FrontBufferFormat;
  _D3DCOLORSPACE FrontBufferColorSpace;
  _D3DRING_BUFFER_PARAMETERS RingBufferParameters;
  _D3DVIDEO_SCALER_PARAMETERS VideoScalerParameters;
};

/* 1260 */
struct D3DPixelShader
{
  D3DResource baseclass_0;
};

/* 1261 */
struct HWINSTA__
{
  int unused;
};

/* 1262 */
struct _POINTL
{
  int x;
  int y;
};

/* 1263 */
struct _D3DXSHADER_STRUCTMEMBERINFO
{
  unsigned int Name;
  unsigned int TypeInfo;
};

/* 1264 */
struct _IMAGE_DATA_DIRECTORY
{
  unsigned int VirtualAddress;
  unsigned int Size;
};

/* 1265 */
struct _IMAGE_OPTIONAL_HEADER64
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned __int64 ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned __int64 SizeOfStackReserve;
  unsigned __int64 SizeOfStackCommit;
  unsigned __int64 SizeOfHeapReserve;
  unsigned __int64 SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 1266 */
union GPUPERFCOUNTER_CNTL
{
  unsigned int dword;
};

/* 1267 */
struct _D3DXEFFECT_DESC
{
  const char *Creator;
  unsigned int Parameters;
  unsigned int Techniques;
  unsigned int Functions;
};

/* 1268 */
struct _s__RTTIClassHierarchyDescriptor
{
  unsigned int signature;
  unsigned int attributes;
  unsigned int numBaseClasses;
  _s__RTTIBaseClassArray *pBaseClassArray;
};

/* 1269 */
const struct _s__RTTIBaseClassDescriptor2
{
  _TypeDescriptor *pTypeDescriptor;
  unsigned int numContainedBases;
  _PMD where;
  unsigned int attributes;
  _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 1270 */
const struct _s__RTTIBaseClassArray
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[];
  _BYTE gap0[4];
};

/* 1271 */
struct _s__RTTICompleteObjectLocator
{
  unsigned int signature;
  unsigned int offset;
  unsigned int cdOffset;
  _TypeDescriptor *pTypeDescriptor;
  _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 1272 */
struct $9F5F1B3B62BF9BBBAE65D06E22EF4EC0
{
  unsigned __int16 Linenumber;
  unsigned __int16 Size;
};

/* 1273 */
union $468C5177E72E71242EC1C70494A78C92
{
  $9F5F1B3B62BF9BBBAE65D06E22EF4EC0 LnSz;
  unsigned int TotalSize;
};

/* 1274 */
struct $0267EABC91DDCC621C08D74192F36445
{
  unsigned int PointerToLinenumber;
  unsigned int PointerToNextFunction;
};

/* 1275 */
struct $72A87AE534D1DC1A4B7CCA877B33F564
{
  unsigned __int16 Dimension[4];
};

/* 1276 */
union $0EA1F65F396D49F1BA302024AE2893E2
{
  $0267EABC91DDCC621C08D74192F36445 Function;
  $72A87AE534D1DC1A4B7CCA877B33F564 Array;
};

/* 1277 */
struct $176445E46CFADD0863079D02093542AF
{
  unsigned int TagIndex;
  $468C5177E72E71242EC1C70494A78C92 Misc;
  $0EA1F65F396D49F1BA302024AE2893E2 FcnAry;
  unsigned __int16 TvIndex;
};

/* 1278 */
struct $66EA94121FC5BA9E8F572A953AB6FE87
{
  char Name[18];
};

/* 1279 */
#pragma pack(push, 2)
struct $664A7652F9F2414B624295F35F6D4893
{
  unsigned int Length;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int CheckSum;
  __int16 Number;
  char Selection;
};
#pragma pack(pop)

/* 1280 */
union _IMAGE_AUX_SYMBOL
{
  $176445E46CFADD0863079D02093542AF Sym;
  $66EA94121FC5BA9E8F572A953AB6FE87 File;
  $664A7652F9F2414B624295F35F6D4893 Section;
};

/* 1281 */
struct _BY_HANDLE_FILE_INFORMATION
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int dwVolumeSerialNumber;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int nNumberOfLinks;
  unsigned int nFileIndexHigh;
  unsigned int nFileIndexLow;
};

/* 1282 */
struct _XMSHORT4
{
  __int16 x;
  __int16 y;
  __int16 z;
  __int16 w;
};

/* 1283 */
struct ID3DXAnimationCallbackHandler
{
  ID3DXAnimationCallbackHandlerVtbl *vfptr;
};

/* 1284 */
struct ID3DXAnimationCallbackHandlerVtbl
{
  HRESULT (__cdecl *HandleCallback)(ID3DXAnimationCallbackHandler *this, unsigned int, void *);
};

/* 1285 */
struct _XMHENDN3
{
  unsigned int v;
};

/* 1286 */
struct D3DConstantBuffer
{
  D3DResource baseclass_0;
  unsigned int Address;
  unsigned int Size;
};

/* 1287 */
struct HMONITOR__
{
  int unused;
};

/* 1288 */
struct _XMXICO4
{
  unsigned __int64 v;
};

/* 1289 */
struct _D3DTAGCOLLECTION
{
  unsigned __int64 m_Mask[5];
};

/* 1290 */
struct __declspec(align(32)) D3DDevice
{
  _D3DTAGCOLLECTION m_Pending;
  unsigned __int64 m_Predicated_PendingMask2;
  unsigned int *m_pRing;
  unsigned int *m_pRingLimit;
  unsigned int *m_pRingGuarantee;
  unsigned int m_ReferenceCount;
  void (__cdecl *m_SetRenderStateCall[100])(D3DDevice *m_SetSamplerStateCall, unsigned int m_GetRenderStateCall);
  void (__cdecl *m_GetSamplerStateCall[20])(D3DDevice *m_Constants, unsigned int m_ClipPlanes, unsigned int m_DestinationPacket);
  unsigned int (__cdecl *m_WindowPacket[100])(D3DDevice *m_ValuesPacket);
  unsigned int (__cdecl *m_ProgramPacket[20])(D3DDevice *m_ControlPacket, unsigned int m_TessellatorPacket);
  _D3DConstants m_MiscPacket;
  float m_PointPacket[6][4];
  GPU_DESTINATIONPACKET;
  GPU_WINDOWPACKET;
  GPU_VALUESPACKET;
  GPU_PROGRAMPACKET;
  GPU_CONTROLPACKET;
  GPU_TESSELLATORPACKET;
  GPU_MISCPACKET;
  GPU_POINTPACKET;
};

/* 1291 */
struct $38DAE03C5F32738BE3C3EF16C20C38D7
{
  _BYTE gap0[4];
  int _bf4;
};

/* 1292 */
union GPUVERTEX_FETCH_CONSTANT
{
  unsigned int dword[2];
  $38DAE03C5F32738BE3C3EF16C20C38D7 _s1;
};

/* 1293 */
union GPUFETCH_CONSTANT
{
  GPUTEXTURE_FETCH_CONSTANT Texture;
  GPUVERTEX_FETCH_CONSTANT Vertex[3];
};

/* 1294 */
struct $0D7785D5B36AED84571A6A7427599A35
{
  GPUTEXTURE_FETCH_CONSTANT TextureFetch[26];
  GPUVERTEX_FETCH_CONSTANT VertexFetch[18];
};

/* 1295 */
union $95F53E504139B78A85099E7B2311627B
{
  GPUFETCH_CONSTANT Fetch[32];
  $0D7785D5B36AED84571A6A7427599A35 _s1;
};

/* 1296 */
struct $B0B669470E4239ED32D2DC8E46F7C782
{
  __vector4 VertexShaderF[256];
  __vector4 PixelShaderF[256];
};

/* 1297 */
union $57934270AE8C6703A7B1C8FBE61600A2
{
  __vector4 Alu[512];
  $B0B669470E4239ED32D2DC8E46F7C782 _s1;
};

/* 1298 */
struct $081ACE603348AB52C46A69069B2E95D0
{
  unsigned int VertexShaderB[4];
  unsigned int PixelShaderB[4];
  unsigned int VertexShaderI[16];
  unsigned int PixelShaderI[16];
};

/* 1299 */
union $FE4D5AFD3E541B640AB53A58A15A9117
{
  unsigned int Flow[40];
  $081ACE603348AB52C46A69069B2E95D0 _s1;
};

/* 1300 */
struct _D3DConstants
{
  $95F53E504139B78A85099E7B2311627B ___u0;
  $57934270AE8C6703A7B1C8FBE61600A2 ___u1;
  $FE4D5AFD3E541B640AB53A58A15A9117 ___u2;
};

/* 1301 */
union GPU_SURFACEINFO
{
  unsigned int dword;
};

/* 1302 */
union GPU_COLORINFO
{
  unsigned int dword;
};

/* 1303 */
union GPU_DEPTHINFO
{
  unsigned int dword;
};

/* 1304 */
union GPU_POINT
{
  unsigned int dword;
};

/* 1305 */
struct GPU_DESTINATIONPACKET
{
  GPU_SURFACEINFO SurfaceInfo;
  GPU_COLORINFO Color0Info;
  GPU_DEPTHINFO DepthInfo;
  GPU_COLORINFO Color1Info;
  GPU_COLORINFO Color2Info;
  GPU_COLORINFO Color3Info;
  unsigned int CoherDestBase0;
  unsigned int CoherDestBase1;
  unsigned int CoherDestBase2;
  unsigned int CoherDestBase3;
  unsigned int CoherDestBase4;
  unsigned int CoherDestBase5;
  unsigned int CoherDestBase6;
  unsigned int CoherDestBase7;
  GPU_POINT ScreenScissorTL;
  GPU_POINT ScreenScissorBR;
};

/* 1306 */
struct GPU_WINDOWPACKET
{
  GPU_POINT WindowOffset;
  GPU_POINT WindowScissorTL;
  GPU_POINT WindowScissorBR;
};

/* 1307 */
union GPU_COLORMASK
{
  unsigned int dword;
};

/* 1308 */
union GPU_STENCILREFMASK
{
  unsigned int dword;
};

/* 1309 */
struct GPU_VALUESPACKET
{
  unsigned int MaxVtxIndx;
  unsigned int MinVtxIndx;
  unsigned int IndxOffset;
  unsigned int MultiPrimIbResetIndx;
  GPU_COLORMASK ColorMask;
  float BlendRed;
  float BlendGreen;
  float BlendBlue;
  float BlendAlpha;
  unsigned int Unused[3];
  GPU_STENCILREFMASK StencilRefMaskBF;
  GPU_STENCILREFMASK StencilRefMask;
  float AlphaRef;
  float VportXScale;
  float VportXOffset;
  float VportYScale;
  float VportYOffset;
  float VportZScale;
  float VportZOffset;
};

/* 1310 */
union GPU_PROGRAMCONTROL
{
  unsigned int dword;
};

/* 1311 */
union GPU_CONTEXTMISC
{
  unsigned int dword;
};

/* 1312 */
union GPU_INTERPOLATORCONTROL
{
  unsigned int dword;
};

/* 1313 */
union GPU_WRAPPING0
{
  unsigned int dword;
};

/* 1314 */
struct GPU_PROGRAMPACKET
{
  GPU_PROGRAMCONTROL ProgramControl;
  GPU_CONTEXTMISC ContextMisc;
  GPU_INTERPOLATORCONTROL InterpolatorControl;
  GPU_WRAPPING0 Wrapping0;
  GPU_WRAPPING1 Wrapping1;
};

/* 1315 */
union GPU_DEPTHCONTROL
{
  unsigned int dword;
};

/* 1316 */
union GPU_BLENDCONTROL
{
  unsigned int dword;
};

/* 1317 */
union GPU_COLORCONTROL
{
  unsigned int dword;
};

/* 1318 */
union GPU_HICONTROL
{
  unsigned int dword;
};

/* 1319 */
union GPU_CLIPCONTROL
{
  unsigned int dword;
};

/* 1320 */
union GPU_MODECONTROL
{
  unsigned int dword;
};

/* 1321 */
union GPU_VTECONTROL
{
  unsigned int dword;
};

/* 1322 */
union GPU_EDRAMMODECONTROL
{
  unsigned int dword;
};

/* 1323 */
struct GPU_CONTROLPACKET
{
  GPU_DEPTHCONTROL DepthControl;
  GPU_BLENDCONTROL BlendControl0;
  GPU_COLORCONTROL ColorControl;
  GPU_HICONTROL HiControl;
  GPU_CLIPCONTROL ClipControl;
  GPU_MODECONTROL ModeControl;
  GPU_VTECONTROL VteControl;
  unsigned int Unused;
  GPU_EDRAMMODECONTROL EdramModeControl;
  GPU_BLENDCONTROL BlendControl1;
  GPU_BLENDCONTROL BlendControl2;
  GPU_BLENDCONTROL BlendControl3;
};

/* 1324 */
union GPU_POINTSIZE
{
  unsigned int dword;
};

/* 1325 */
union GPU_POINTMINMAX
{
  unsigned int dword;
};

/* 1326 */
union GPU_LINECONTROL
{
  unsigned int dword;
};

/* 1327 */
union GPU_OUTPUTPATHCONTROL
{
  unsigned int dword;
};

/* 1328 */
union GPU_HOSCONTROL
{
  unsigned int dword;
};

/* 1329 */
union GPU_GROUPPRIMTYPE
{
  unsigned int dword;
};

/* 1330 */
union GPU_GROUPVECTCONTROL
{
  unsigned int dword;
};

/* 1331 */
union GPU_GROUPVECTFMTCONTROL
{
  unsigned int dword;
};

/* 1332 */
union GPU_MPASSPSCONTROL
{
  unsigned int dword;
};

/* 1333 */
union GPU_VIZQUERY
{
  unsigned int dword;
};

/* 1334 */
union GPU_ENHANCE
{
  unsigned int dword;
};

/* 1335 */
struct GPU_TESSELLATORPACKET
{
  GPU_POINTSIZE PointSize;
  GPU_POINTMINMAX PointMinMax;
  GPU_LINECONTROL LineControl;
  unsigned int Unused1;
  GPU_OUTPUTPATHCONTROL OutputPathControl;
  GPU_HOSCONTROL HosControl;
  float HosMaxTessLevel;
  float HosMinTessLevel;
  unsigned int HosReuseDepth;
  GPU_GROUPPRIMTYPE GroupPrimType;
  unsigned int GroupFirstDecr;
  unsigned int GroupDecr;
  GPU_GROUPVECTCONTROL GroupVect0Control;
  GPU_GROUPVECTCONTROL GroupVect1Control;
  GPU_GROUPVECTFMTCONTROL GroupVect0FmtControl;
  GPU_GROUPVECTFMTCONTROL GroupVect1FmtControl;
  unsigned int Unused2[2];
  GPU_MPASSPSCONTROL MPassPsControl;
  GPU_VIZQUERY VizQuery;
  GPU_ENHANCE Enhance;
};

/* 1336 */
union GPU_SCLINECONTROL
{
  unsigned int dword;
};

/* 1337 */
union GPU_AACONFIG
{
  unsigned int dword;
};

/* 1338 */
union GPU_VTXCONTROL
{
  unsigned int dword;
};

/* 1339 */
union GPU_CONST
{
  unsigned int dword;
};

/* 1340 */
union GPU_DEBUGMISC0
{
  unsigned int dword;
};

/* 1341 */
union GPU_DEBUGMISC1
{
  unsigned int dword;
};

/* 1342 */
union GPU_VERTEXREUSEBLOCKCONTROL
{
  unsigned int dword;
};

/* 1343 */
union GPU_OUTDEALLOCCONTROL
{
  unsigned int dword;
};

/* 1344 */
union GPU_COPYCONTROL
{
  unsigned int dword;
};

/* 1345 */
union GPU_COPYDESTPITCH
{
  unsigned int dword;
};

/* 1346 */
union GPU_COPYDESTINFO
{
  unsigned int dword;
};

/* 1347 */
union GPU_COPYFUNC
{
  unsigned int dword;
};

/* 1348 */
union GPU_COPYREF
{
  unsigned int dword;
};

/* 1349 */
union GPU_COPYMASK
{
  unsigned int dword;
};

/* 1350 */
union GPU_SAMPLECOUNTCONTROL
{
  unsigned int dword;
};

/* 1351 */
struct GPU_MISCPACKET
{
  GPU_SCLINECONTROL ScLineControl;
  GPU_AACONFIG AaConfig;
  GPU_VTXCONTROL VtxControl;
  float GbVertClipAdj;
  float GbVertDiscAdj;
  float GbHorzClipAdj;
  float GbHorzDiscAdj;
  GPU_CONST VsConst;
  GPU_CONST PsConst;
  GPU_DEBUGMISC0 DebugMisc0;
  GPU_DEBUGMISC1 DebugMisc1;
  unsigned int Unused1[5];
  unsigned int Unused2[2];
  unsigned int AaMask;
  unsigned int Unused3[3];
  GPU_VERTEXREUSEBLOCKCONTROL VertexReuseBlockControl;
  GPU_OUTDEALLOCCONTROL OutDeallocControl;
  GPU_COPYCONTROL CopyControl;
  unsigned int CopyDestBase;
  GPU_COPYDESTPITCH CopyDestPitch;
  GPU_COPYDESTINFO CopyDestInfo;
  unsigned int HiClear;
  unsigned int DepthClear;
  unsigned int ColorClear;
  unsigned int ColorClearLo;
  GPU_COPYFUNC CopyFunc;
  GPU_COPYREF CopyRef;
  GPU_COPYMASK CopyMask;
  unsigned int CopySurfaceSlice;
  GPU_SAMPLECOUNTCONTROL SampleCountControl;
  unsigned int SampleCountAddress;
};

/* 1352 */
struct GPU_POINTPACKET
{
  float PolyOffsetFrontScale;
  float PolyOffsetFrontOffset;
  float PolyOffsetBackScale;
  float PolyOffsetBackOffset;
  float PointXRad;
  float PointYRad;
  float PointConstantSize;
  float PointCullRad;
};

/* 1353 */
struct tagLC_ID
{
  unsigned __int16 wLanguage;
  unsigned __int16 wCountry;
  unsigned __int16 wCodePage;
};

/* 1354 */
struct $BC236CFBD570C18489EB46681F52D83D
{
  char *locale;
  unsigned __int16 *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 1355 */
struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
};

/* 1356 */
struct __lc_time_data
{
  char *wday_abbr[7];
  char *wday[7];
  char *month_abbr[12];
  char *month[12];
  char *ampm[2];
  char *ww_sdatefmt;
  char *ww_ldatefmt;
  char *ww_timefmt;
  unsigned int ww_lcid;
  int ww_caltype;
  int refcount;
};

/* 1357 */
struct threadlocaleinfostruct
{
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned int lc_handle[6];
  tagLC_ID lc_id[6];
  $BC236CFBD570C18489EB46681F52D83D lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  lconv *lconv;
  int *ctype1_refcount;
  unsigned __int16 *ctype1;
  const unsigned __int16 *pctype;
  const char *pclmap;
  const char *pcumap;
  __lc_time_data *lc_time_curr;
};

/* 1358 */
#pragma pack(push, 4)
struct threadmbcinfostruct
{
  int refcount;
  int mbcodepage;
  int ismbcodepage;
  int mblcid;
  unsigned __int16 mbulinfo[6];
  char mbctype[257];
  char mbcasemap[256];
};
#pragma pack(pop)

/* 1359 */
struct localeinfo_struct
{
  threadlocaleinfostruct *locinfo;
  threadmbcinfostruct *mbcinfo;
};

/* 1360 */
struct _ACL
{
  char AclRevision;
  char Sbz1;
  unsigned __int16 AclSize;
  unsigned __int16 AceCount;
  unsigned __int16 Sbz2;
};

/* 1361 */
struct _TOKEN_DEFAULT_DACL
{
  _ACL *DefaultDacl;
};

/* 1362 */
union $18D88968084CBEE834030F63CA1057E2
{
  unsigned int Name;
  unsigned __int16 Id;
};

/* 1363 */
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
  $18D88968084CBEE834030F63CA1057E2 ___u0;
  unsigned int OffsetToData;
};

/* 1364 */
struct _XMFLOAT4
{
  float x;
  float y;
  float z;
  float w;
};

/* 1365 */
struct _IMAGE_FILE_HEADER
{
  unsigned __int16 Machine;
  unsigned __int16 NumberOfSections;
  unsigned int TimeDateStamp;
  unsigned int PointerToSymbolTable;
  unsigned int NumberOfSymbols;
  unsigned __int16 SizeOfOptionalHeader;
  unsigned __int16 Characteristics;
};

/* 1366 */
struct _IMAGE_OPTIONAL_HEADER
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned int BaseOfData;
  unsigned int ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned int SizeOfStackReserve;
  unsigned int SizeOfStackCommit;
  unsigned int SizeOfHeapReserve;
  unsigned int SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 1367 */
struct _IMAGE_NT_HEADERS
{
  unsigned int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

/* 1368 */
struct ID3DXAnimationSet
{
  IUnknown baseclass_0;
};

/* 1369 */
struct ID3DXCompressedAnimationSet
{
  ID3DXAnimationSet baseclass_0;
};

/* 1370 */
struct XNQOSLISTENSTATS
{
  unsigned int dwSizeOfStruct;
  unsigned int dwNumDataRequestsReceived;
  unsigned int dwNumProbesReceived;
  unsigned int dwNumSlotsFullDiscards;
  unsigned int dwNumDataRepliesSent;
  unsigned int dwNumDataReplyBytesSent;
  unsigned int dwNumProbeRepliesSent;
};

/* 1371 */
struct _D3DXEFFECTDEFAULT
{
  char *pParamName;
  _D3DXEFFECTDEFAULTTYPE Type;
  unsigned int NumBytes;
  void *pValue;
};

/* 1372 */
struct $40942CBCB8F0A1CDBC81269929B28324
{
  float _11;
  float _12;
  float _13;
  float _14;
  float _21;
  float _22;
  float _23;
  float _24;
  float _31;
  float _32;
  float _33;
  float _34;
  float _41;
  float _42;
  float _43;
  float _44;
};

/* 1373 */
union $D281246B115216C003B12D69387A8B0F
{
  __vector4 r[4];
  $40942CBCB8F0A1CDBC81269929B28324 _s1;
  float m[4][4];
};

/* 1374 */
struct _XMMATRIX
{
  $D281246B115216C003B12D69387A8B0F ___u0;
};

/* 1375 */
union _UCODE_CONTROLFLOWCONSTANTSMASK
{
  unsigned int dword;
};

/* 1376 */
struct _D3DXCONSTANT_DESC
{
  const char *Name;
  _D3DXREGISTER_SET RegisterSet;
  unsigned int RegisterIndex;
  unsigned int RegisterCount;
  _D3DXPARAMETER_CLASS Class;
  _D3DXPARAMETER_TYPE Type;
  unsigned int Rows;
  unsigned int Columns;
  unsigned int Elements;
  unsigned int StructMembers;
  unsigned int Bytes;
  const void *DefaultValue;
};

/* 1377 */
struct D3DVertexShader
{
  D3DResource baseclass_0;
};

/* 1378 */
union UCODE_SHADER_COOKIE
{
  unsigned int dword;
};

/* 1379 */
struct _UCODE_PASS_HEADER
{
  unsigned int definitionTableOffset;
  unsigned int microcodeOffset;
};

/* 1380 */
struct _UCODE_HEADER
{
  UCODE_SHADER_COOKIE Cookie;
  unsigned int CachedSize;
  unsigned int PhysicalSize;
  unsigned int DebuggerHintOffset;
  unsigned int constantTableOffset;
  _UCODE_PASS_HEADER Pass[2];
};

/* 1381 */
union $4EB5B986E90E64384170ABFE8BFA2AFA
{
  $40942CBCB8F0A1CDBC81269929B28324 _s0;
  float m[4][4];
};

/* 1382 */
struct _D3DMATRIX
{
  $4EB5B986E90E64384170ABFE8BFA2AFA ___u0;
};

/* 1383 */
struct HKEY__
{
  int unused;
};

/* 1384 */
struct _CONTEXT
{
  unsigned int ContextFlags;
  unsigned int Msr;
  unsigned int Iar;
  unsigned int Lr;
  unsigned __int64 Ctr;
  unsigned __int64 Gpr0;
  unsigned __int64 Gpr1;
  unsigned __int64 Gpr2;
  unsigned __int64 Gpr3;
  unsigned __int64 Gpr4;
  unsigned __int64 Gpr5;
  unsigned __int64 Gpr6;
  unsigned __int64 Gpr7;
  unsigned __int64 Gpr8;
  unsigned __int64 Gpr9;
  unsigned __int64 Gpr10;
  unsigned __int64 Gpr11;
  unsigned __int64 Gpr12;
  unsigned __int64 Gpr13;
  unsigned __int64 Gpr14;
  unsigned __int64 Gpr15;
  unsigned __int64 Gpr16;
  unsigned __int64 Gpr17;
  unsigned __int64 Gpr18;
  unsigned __int64 Gpr19;
  unsigned __int64 Gpr20;
  unsigned __int64 Gpr21;
  unsigned __int64 Gpr22;
  unsigned __int64 Gpr23;
  unsigned __int64 Gpr24;
  unsigned __int64 Gpr25;
  unsigned __int64 Gpr26;
  unsigned __int64 Gpr27;
  unsigned __int64 Gpr28;
  unsigned __int64 Gpr29;
  unsigned __int64 Gpr30;
  unsigned __int64 Gpr31;
  unsigned int Cr;
  unsigned int Xer;
  double Fpscr;
  double Fpr0;
  double Fpr1;
  double Fpr2;
  double Fpr3;
  double Fpr4;
  double Fpr5;
  double Fpr6;
  double Fpr7;
  double Fpr8;
  double Fpr9;
  double Fpr10;
  double Fpr11;
  double Fpr12;
  double Fpr13;
  double Fpr14;
  double Fpr15;
  double Fpr16;
  double Fpr17;
  double Fpr18;
  double Fpr19;
  double Fpr20;
  double Fpr21;
  double Fpr22;
  double Fpr23;
  double Fpr24;
  double Fpr25;
  double Fpr26;
  double Fpr27;
  double Fpr28;
  double Fpr29;
  double Fpr30;
  double Fpr31;
  unsigned int UserModeControl;
  unsigned int Fill;
  float Vscr[4];
  float Vr0[4];
  float Vr1[4];
  float Vr2[4];
  float Vr3[4];
  float Vr4[4];
  float Vr5[4];
  float Vr6[4];
  float Vr7[4];
  float Vr8[4];
  float Vr9[4];
  float Vr10[4];
  float Vr11[4];
  float Vr12[4];
  float Vr13[4];
  float Vr14[4];
  float Vr15[4];
  float Vr16[4];
  float Vr17[4];
  float Vr18[4];
  float Vr19[4];
  float Vr20[4];
  float Vr21[4];
  float Vr22[4];
  float Vr23[4];
  float Vr24[4];
  float Vr25[4];
  float Vr26[4];
  float Vr27[4];
  float Vr28[4];
  float Vr29[4];
  float Vr30[4];
  float Vr31[4];
  float Vr32[4];
  float Vr33[4];
  float Vr34[4];
  float Vr35[4];
  float Vr36[4];
  float Vr37[4];
  float Vr38[4];
  float Vr39[4];
  float Vr40[4];
  float Vr41[4];
  float Vr42[4];
  float Vr43[4];
  float Vr44[4];
  float Vr45[4];
  float Vr46[4];
  float Vr47[4];
  float Vr48[4];
  float Vr49[4];
  float Vr50[4];
  float Vr51[4];
  float Vr52[4];
  float Vr53[4];
  float Vr54[4];
  float Vr55[4];
  float Vr56[4];
  float Vr57[4];
  float Vr58[4];
  float Vr59[4];
  float Vr60[4];
  float Vr61[4];
  float Vr62[4];
  float Vr63[4];
  float Vr64[4];
  float Vr65[4];
  float Vr66[4];
  float Vr67[4];
  float Vr68[4];
  float Vr69[4];
  float Vr70[4];
  float Vr71[4];
  float Vr72[4];
  float Vr73[4];
  float Vr74[4];
  float Vr75[4];
  float Vr76[4];
  float Vr77[4];
  float Vr78[4];
  float Vr79[4];
  float Vr80[4];
  float Vr81[4];
  float Vr82[4];
  float Vr83[4];
  float Vr84[4];
  float Vr85[4];
  float Vr86[4];
  float Vr87[4];
  float Vr88[4];
  float Vr89[4];
  float Vr90[4];
  float Vr91[4];
  float Vr92[4];
  float Vr93[4];
  float Vr94[4];
  float Vr95[4];
  float Vr96[4];
  float Vr97[4];
  float Vr98[4];
  float Vr99[4];
  float Vr100[4];
  float Vr101[4];
  float Vr102[4];
  float Vr103[4];
  float Vr104[4];
  float Vr105[4];
  float Vr106[4];
  float Vr107[4];
  float Vr108[4];
  float Vr109[4];
  float Vr110[4];
  float Vr111[4];
  float Vr112[4];
  float Vr113[4];
  float Vr114[4];
  float Vr115[4];
  float Vr116[4];
  float Vr117[4];
  float Vr118[4];
  float Vr119[4];
  float Vr120[4];
  float Vr121[4];
  float Vr122[4];
  float Vr123[4];
  float Vr124[4];
  float Vr125[4];
  float Vr126[4];
  float Vr127[4];
};

/* 1385 */
struct _XUSER_ESTIMATE_RANK_RESULTS
{
  unsigned int dwNumRanks;
  unsigned int *pdwRanks;
};

/* 1386 */
struct __declspec(align(8)) _D3DADAPTER_IDENTIFIER9
{
  char Driver[512];
  char Description[512];
  char DeviceName[32];
  _LARGE_INTEGER DriverVersion;
  unsigned int VendorId;
  unsigned int DeviceId;
  unsigned int SubSysId;
  unsigned int Revision;
  _GUID DeviceIdentifier;
  unsigned int WHQLLevel;
};

/* 1387 */
struct _STRING_DATA
{
  unsigned __int16 wStringSize;
  wchar_t *pszString;
};

/* 1388 */
struct _IMAGE_FUNCTION_ENTRY
{
  unsigned int StartingAddress;
  unsigned int EndingAddress;
  unsigned int EndOfPrologue;
};

/* 1389 */
struct _IMAGE_OS2_HEADER
{
  unsigned __int16 ne_magic;
  char ne_ver;
  char ne_rev;
  unsigned __int16 ne_enttab;
  unsigned __int16 ne_cbenttab;
  int ne_crc;
  unsigned __int16 ne_flags;
  unsigned __int16 ne_autodata;
  unsigned __int16 ne_heap;
  unsigned __int16 ne_stack;
  int ne_csip;
  int ne_sssp;
  unsigned __int16 ne_cseg;
  unsigned __int16 ne_cmod;
  unsigned __int16 ne_cbnrestab;
  unsigned __int16 ne_segtab;
  unsigned __int16 ne_rsrctab;
  unsigned __int16 ne_restab;
  unsigned __int16 ne_modtab;
  unsigned __int16 ne_imptab;
  int ne_nrestab;
  unsigned __int16 ne_cmovent;
  unsigned __int16 ne_align;
  unsigned __int16 ne_cres;
  char ne_exetyp;
  char ne_flagsothers;
  unsigned __int16 ne_pretthunks;
  unsigned __int16 ne_psegrefbytes;
  unsigned __int16 ne_swaparea;
  unsigned __int16 ne_expver;
};

/* 1390 */
struct _MESSAGE_RESOURCE_BLOCK
{
  unsigned int LowId;
  unsigned int HighId;
  unsigned int OffsetToEntries;
};

/* 1391 */
struct _XUSER_STATS_COLUMN
{
  unsigned __int16 wColumnId;
  __declspec(align(8)) _XUSER_DATA Value;
};

/* 1392 */
#pragma pack(push, 8)
struct _XUSER_STATS_ROW
{
  unsigned __int64 xuid;
  unsigned int dwRank;
  __int64 i64Rating;
  char szGamertag[16];
  unsigned int dwNumColumns;
  _XUSER_STATS_COLUMN *pColumns;
};
#pragma pack(pop)

/* 1393 */
struct D3DXQUATERNION
{
  float x;
  float y;
  float z;
  float w;
};

/* 1394 */
struct _D3DXKEY_QUATERNION
{
  float Time;
  D3DXQUATERNION Value;
};

/* 1395 */
struct _D3DXKEY_CALLBACK
{
  float Time;
  void *pCallbackData;
};

/* 1396 */
struct _D3DXCONSTANTTABLE_DESC
{
  const char *Creator;
  unsigned int Version;
  unsigned int Constants;
};

/* 1397 */
struct _ACCESS_ALLOWED_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 1398 */
struct std::_Init_locks
{
  char dummy[1];
};

/* 1399 */
struct std::exception
{
  std::exceptionVtbl *vfptr;
  const char *_m_what;
  int _m_doFree;
};

/* 1400 */
struct std::exceptionVtbl
{
  void *(__cdecl *__vecDelDtor)(std::exception *this, unsigned int);
  const char *(__cdecl *what)(std::exception *this);
};

/* 1401 */
struct std::bad_exception
{
  std::exception baseclass_0;
};

/* 1402 */
struct std::nothrow_t
{
  char dummy[1];
};

/* 1403 */
struct std::_Lockit
{
  int _Locktype;
};

/* 1404 */
struct std::_Mutex
{
  void *_Mtx;
};

/* 1405 */
struct std::bad_alloc
{
  std::exception baseclass_0;
};

/* 1406 */
struct _D3DLOCKED_BOX
{
  int RowPitch;
  int SlicePitch;
  void *pBits;
};

/* 1407 */
struct _D3DXSHADER_COMPILE_PARAMETERSW
{
  unsigned int Flags;
  unsigned int UPDBTimestamp;
  wchar_t *UPDBPath;
  ID3DXBuffer *pUPDBBuffer;
  unsigned int TempRegisterLimit;
  void *pUPDBB;
  const char *CpuFunctionName;
  int bXbox360ExtensionUsed;
  unsigned int PixelShaderSamplerRegisterBase;
  unsigned int PixelShaderSamplerRegisterCount;
  unsigned int VertexShaderSamplerRegisterBase;
  unsigned int VertexShaderSamplerRegisterCount;
  unsigned int PixelShaderInstructionCount;
  unsigned int VertexShaderInstructionCount;
};

/* 1408 */
struct LIST_ENTRY32
{
  unsigned int Flink;
  unsigned int Blink;
};

/* 1409 */
union $E0927F6BE2F1645595F211B37EFD8766
{
  unsigned __int64 EndOfPrologue;
  unsigned __int64 UnwindInfoAddress;
};

/* 1410 */
struct _IMAGE_FUNCTION_ENTRY64
{
  unsigned __int64 StartingAddress;
  unsigned __int64 EndingAddress;
  $E0927F6BE2F1645595F211B37EFD8766 ___u2;
};

/* 1411 */
struct D3DVolumeTexture
{
  D3DBaseTexture baseclass_0;
};

/* 1412 */
struct ID3DXConstantTable
{
  ID3DXBuffer baseclass_0;
};

/* 1413 */
struct _QUOTA_LIMITS
{
  unsigned int PagedPoolLimit;
  unsigned int NonPagedPoolLimit;
  unsigned int MinimumWorkingSetSize;
  unsigned int MaximumWorkingSetSize;
  unsigned int PagefileLimit;
  __declspec(align(8)) _LARGE_INTEGER TimeLimit;
};

/* 1414 */
struct IDirectXFileData
{
  IDirectXFileObject baseclass_0;
};

/* 1415 */
union GPUCOMMAND_VIZ_QUERY
{
  unsigned int dword[1];
};

/* 1416 */
struct _XMDEC4
{
  unsigned int v;
};

/* 1417 */
struct $507ECED6EFA5CFD5AC2C04C0BCDE222D
{
  unsigned int Short;
  unsigned int Long;
};

/* 1418 */
union $2468AC9165022F1C7A04320D6365589F
{
  char ShortName[8];
  $507ECED6EFA5CFD5AC2C04C0BCDE222D Name;
  unsigned int LongName[2];
};

/* 1419 */
struct _IMAGE_SYMBOL
{
  $2468AC9165022F1C7A04320D6365589F N;
  unsigned int Value;
  __int16 SectionNumber;
  unsigned __int16 Type;
  char StorageClass;
  char NumberOfAuxSymbols;
};

/* 1420 */
struct _XMARKETPLACE_CONTENTOFFER_INFO
{
  unsigned __int64 qwOfferID;
  unsigned __int64 qwPreviewOfferID;
  unsigned int dwOfferNameLength;
  wchar_t *wszOfferName;
  unsigned int dwOfferType;
  char contentId[20];
  int fIsUnrestrictedLicense;
  unsigned int dwLicenseMask;
  unsigned int dwTitleID;
  unsigned int dwContentCategory;
  unsigned int dwTitleNameLength;
  wchar_t *wszTitleName;
  int fUserHasPurchased;
  unsigned int dwPackageSize;
  unsigned int dwInstallSize;
  unsigned int dwSellTextLength;
  wchar_t *wszSellText;
  unsigned int dwAssetID;
  unsigned int dwPurchaseQuantity;
  unsigned int dwPointsPrice;
};

/* 1421 */
struct _D3DXPATCHINFO
{
  _D3DXPATCHMESHTYPE PatchType;
  _D3DDEGREETYPE Degree;
  _D3DBASISTYPE Basis;
};

/* 1422 */
struct _XMXDEC4
{
  unsigned int v;
};

/* 1423 */
struct _XOFFERING_CONTENTAVAILABLE_RESULT
{
  unsigned int dwNewOffers;
  unsigned int dwTotalOffers;
};

/* 1424 */
struct ID3DXBaseMesh
{
  IUnknown baseclass_0;
};

/* 1425 */
struct ID3DXMesh
{
  ID3DXBaseMesh baseclass_0;
};

/* 1426 */
struct ID3DXPMesh
{
  ID3DXBaseMesh baseclass_0;
};

/* 1427 */
struct ID3DXPatchMesh
{
  IUnknown baseclass_0;
};

/* 1428 */
union $8CC3A53E44B035FB2DF2E6C699B60490
{
  ID3DXMesh *pMesh;
  ID3DXPMesh *pPMesh;
  ID3DXPatchMesh *pPatchMesh;
};

/* 1429 */
struct _D3DXMESHDATA
{
  _D3DXMESHDATATYPE Type;
  $8CC3A53E44B035FB2DF2E6C699B60490 ___u1;
};

/* 1430 */
struct _WIN32_FIND_DATAW
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  unsigned __int16 cFileName[260];
  unsigned __int16 cAlternateFileName[14];
};

/* 1431 */
#pragma pack(push, 4)
struct _WIN32_FIND_DATAA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  char cFileName[260];
  char cAlternateFileName[14];
};
#pragma pack(pop)

/* 1432 */
struct IMAGE_LOAD_CONFIG_DIRECTORY32
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned int LockPrefixTable;
  unsigned int MaximumAllocationSize;
  unsigned int VirtualMemoryThreshold;
  unsigned int ProcessHeapFlags;
  unsigned int ProcessAffinityMask;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned int EditList;
  unsigned int Reserved[1];
};

/* 1433 */
struct _XALLOC_ATTRIBUTES
{
  int _bf0;
};

/* 1434 */
struct _ACCESS_DENIED_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 1435 */
struct _MEMORY_BASIC_INFORMATION
{
  void *BaseAddress;
  void *AllocationBase;
  unsigned int AllocationProtect;
  unsigned int RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
};

/* 1436 */
struct sockaddr_in
{
  __int16 sin_family;
  unsigned __int16 sin_port;
  in_addr sin_addr;
  char sin_zero[8];
};

/* 1437 */
struct D3DVertexBuffer
{
  D3DResource baseclass_0;
  GPUVERTEX_FETCH_CONSTANT Format;
};

/* 1438 */
struct D3DIndexBuffer
{
  D3DResource baseclass_0;
  unsigned int Address;
  unsigned int Size;
};

/* 1439 */
struct _D3DXATTRIBUTERANGE
{
  unsigned int AttribId;
  unsigned int FaceStart;
  unsigned int FaceCount;
  unsigned int VertexStart;
  unsigned int VertexCount;
};

/* 1440 */
struct _D3DMATERIAL9
{
  _D3DCOLORVALUE Diffuse;
  _D3DCOLORVALUE Ambient;
  _D3DCOLORVALUE Specular;
  _D3DCOLORVALUE Emissive;
  float Power;
};

/* 1441 */
struct tagPOINTS
{
  __int16 x;
  __int16 y;
};

/* 1442 */
struct _D3DVERTEXBUFFER_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  unsigned int Pool;
  unsigned int Size;
  unsigned int FVF;
};

/* 1443 */
struct D3DXVECTOR2
{
  float x;
  float y;
};

/* 1444 */
struct _XINPUT_GAMEPAD
{
  unsigned __int16 wButtons;
  char bLeftTrigger;
  char bRightTrigger;
  __int16 sThumbLX;
  __int16 sThumbLY;
  __int16 sThumbRX;
  __int16 sThumbRY;
};

/* 1445 */
struct _XINPUT_STATE
{
  unsigned int dwPacketNumber;
  _XINPUT_GAMEPAD Gamepad;
};

/* 1446 */
struct _XMUBYTEN4
{
  $F8266EFF78560B6C69ACEB8D6761AA64 ___u0;
};

/* 1447 */
struct D3DXMATRIX
{
  _D3DMATRIX baseclass_0;
};

/* 1448 */
struct _D3DXMATERIAL
{
  _D3DMATERIAL9 MatD3D;
  char *pTextureFilename;
};

/* 1449 */
struct _D3DXEFFECTINSTANCE
{
  char *pEffectFilename;
  unsigned int NumDefaults;
  _D3DXEFFECTDEFAULT *pDefaults;
};

/* 1450 */
struct ID3DXSkinInfo
{
  IUnknown baseclass_0;
};

/* 1451 */
struct _D3DXMESHCONTAINER
{
  char *Name;
  _D3DXMESHDATA MeshData;
  _D3DXMATERIAL *pMaterials;
  _D3DXEFFECTINSTANCE *pEffects;
  unsigned int NumMaterials;
  unsigned int *pAdjacency;
  ID3DXSkinInfo *pSkinInfo;
  _D3DXMESHCONTAINER *pNextMeshContainer;
};

/* 1452 */
const struct _D3DXFRAME
{
  char *Name;
  D3DXMATRIX TransformationMatrix;
  _D3DXMESHCONTAINER *pMeshContainer;
  _D3DXFRAME *pFrameSibling;
  _D3DXFRAME *pFrameFirstChild;
};

/* 1453 */
struct IDirectXFileSaveObject
{
  IUnknown baseclass_0;
};

/* 1454 */
struct ID3DXSaveUserData
{
  ID3DXSaveUserDataVtbl *vfptr;
};

/* 1455 */
struct $F98112BCC140A2F15B60E591E29BAA0E
{
  _BYTE gap0[4];
  HRESULT (__cdecl *AddMeshChildData)(ID3DXSaveUserData *this, _D3DXMESHCONTAINER *, IDirectXFileSaveObject *, IDirectXFileData *);
};

/* 1456 */
struct $6AC5FC77E7B14365A6855DA0ED86D2C5
{
  _BYTE gap0[8];
  HRESULT (__cdecl *AddTopLevelDataObjectsPre)(ID3DXSaveUserData *this, IDirectXFileSaveObject *);
};

/* 1457 */
struct $0341AED4D3F9B7DB019C96145A93741B
{
  _BYTE gap0[12];
  HRESULT (__cdecl *AddTopLevelDataObjectsPost)(ID3DXSaveUserData *this, IDirectXFileSaveObject *);
};

/* 1458 */
struct $9CDDFE64112093F7F81762A68A059901
{
  _BYTE gap0[16];
  HRESULT (__cdecl *RegisterTemplates)(ID3DXSaveUserData *this, IDirectXFile *);
};

/* 1459 */
struct $D60E1D67AE079EE2646ED4A70184BD0A
{
  _BYTE gap0[20];
  HRESULT (__cdecl *SaveTemplates)(ID3DXSaveUserData *this, IDirectXFileSaveObject *);
};

/* 1460 */
union $0C3D2DFE5E92ED6A42C8EDD55132B677
{
  HRESULT (__cdecl *AddFrameChildData)(ID3DXSaveUserData *this, _D3DXFRAME *, IDirectXFileSaveObject *, IDirectXFileData *);
  $F98112BCC140A2F15B60E591E29BAA0E _s1;
  $6AC5FC77E7B14365A6855DA0ED86D2C5 _s2;
  $0341AED4D3F9B7DB019C96145A93741B _s3;
  $9CDDFE64112093F7F81762A68A059901 _s4;
  $D60E1D67AE079EE2646ED4A70184BD0A _s5;
};

/* 1461 */
struct ID3DXSaveUserDataVtbl
{
  $0C3D2DFE5E92ED6A42C8EDD55132B677 ___u0;
};

/* 1462 */
struct HPALETTE__
{
  int unused;
};

/* 1463 */
struct ID3DXKeyframedAnimationSet
{
  ID3DXAnimationSet baseclass_0;
};

/* 1464 */
struct _SINGLE_LIST_ENTRY
{
  _SINGLE_LIST_ENTRY *Next;
};

/* 1465 */
struct _SYSTEM_ALARM_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 1466 */
union _UCODE_VSOUTPUTPATCH
{
  unsigned int dword;
};

/* 1467 */
struct _D3DRESOLVE_PARAMETERS
{
  _D3DFORMAT ColorFormat;
  int ColorExpBias;
  _D3DFORMAT DepthFormat;
};

/* 1468 */
struct _XMUICO4
{
  unsigned __int64 v;
};

/* 1469 */
union $3F5BD159CB39977520C06306145A6051
{
  unsigned int RawEvent[4];
};

/* 1470 */
struct _RTL_CRITICAL_SECTION
{
  $3F5BD159CB39977520C06306145A6051 Synchronization;
  int LockCount;
  int RecursionCount;
  void *OwningThread;
};

/* 1471 */
#pragma pack(push, 4)
struct _XDEVICE_DATA
{
  unsigned int DeviceID;
  unsigned int DeviceType;
  unsigned __int64 ulDeviceBytes;
  unsigned __int64 ulDeviceFreeBytes;
  wchar_t wszFriendlyName[27];
};
#pragma pack(pop)

/* 1472 */
struct _IMAGE_ROM_OPTIONAL_HEADER
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned int BaseOfData;
  unsigned int BaseOfBss;
  unsigned int GprMask;
  unsigned int CprMask[4];
  unsigned int GpValue;
};

/* 1473 */
struct _IMAGE_ROM_HEADERS
{
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
};

/* 1474 */
struct _IMAGE_DEBUG_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int Type;
  unsigned int SizeOfData;
  unsigned int AddressOfRawData;
  unsigned int PointerToRawData;
};

/* 1475 */
struct _TOKEN_USER
{
  _SID_AND_ATTRIBUTES User;
};

/* 1476 */
struct _D3DINDEXBUFFER_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  unsigned int Pool;
  unsigned int Size;
};

/* 1477 */
struct ID3DXBaseEffect
{
  IUnknown baseclass_0;
};

/* 1478 */
struct ID3DXEffectCompiler
{
  ID3DXBaseEffect baseclass_0;
};

/* 1479 */
struct _D3DXPARAMETER_DESC
{
  const char *Name;
  const char *Semantic;
  _D3DXPARAMETER_CLASS Class;
  _D3DXPARAMETER_TYPE Type;
  unsigned int Rows;
  unsigned int Columns;
  unsigned int Elements;
  unsigned int Annotations;
  unsigned int StructMembers;
  unsigned int Flags;
  unsigned int Bytes;
};

/* 1480 */
struct _D3DXTECHNIQUE_DESC
{
  const char *Name;
  unsigned int Passes;
  unsigned int Annotations;
};

/* 1481 */
struct _D3DXPASS_DESC
{
  const char *Name;
  unsigned int Annotations;
  const unsigned int *pVertexShaderFunction;
  const unsigned int *pPixelShaderFunction;
};

/* 1482 */
struct _D3DXFUNCTION_DESC
{
  const char *Name;
  unsigned int Annotations;
};

/* 1483 */
struct D3DXVECTOR4
{
  float x;
  float y;
  float z;
  float w;
};

/* 1484 */
struct _D3DXSHPRTSPLITMESHCLUSTERDATA
{
  unsigned int uVertStart;
  unsigned int uVertLength;
  unsigned int uFaceStart;
  unsigned int uFaceLength;
  unsigned int uClusterStart;
  unsigned int uClusterLength;
};

/* 1485 */
union $2ECCCDA3D744D68F74660C95AE95CFC9
{
  float Weight;
  float Speed;
  double Position;
  int Enable;
};

/* 1486 */
struct _D3DXEVENT_DESC
{
  _D3DXEVENT_TYPE Type;
  unsigned int Track;
  double StartTime;
  double Duration;
  _D3DXTRANSITION_TYPE Transition;
  __declspec(align(8)) $2ECCCDA3D744D68F74660C95AE95CFC9 ___u5;
};

/* 1487 */
union $024A9AD87DA22F97CCD4130050D7BF17
{
  unsigned int SymbolTableIndex;
  unsigned int VirtualAddress;
};

/* 1488 */
struct _IMAGE_LINENUMBER
{
  $024A9AD87DA22F97CCD4130050D7BF17 Type;
  unsigned __int16 Linenumber;
};

/* 1489 */
struct XACHIEVEMENT_DETAILS
{
  unsigned int dwId;
  wchar_t *pwszLabel;
  wchar_t *pwszDescription;
  wchar_t *pwszUnachieved;
  unsigned int dwImageId;
  unsigned int dwCred;
  _FILETIME ftAchieved;
  unsigned int dwFlags;
};

/* 1490 */
#pragma pack(push, 4)
struct _IMAGE_DEBUG_MISC
{
  unsigned int DataType;
  unsigned int Length;
  char Unicode;
  char Reserved[3];
  char Data[1];
};
#pragma pack(pop)

/* 1491 */
struct HENHMETAFILE__
{
  int unused;
};

/* 1492 */
union _UCODE_VSINDEXDECLARATION
{
  unsigned int dword;
};

/* 1493 */
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
  unsigned int BeginAddress;
  unsigned int EndAddress;
  unsigned int ExceptionHandler;
  unsigned int HandlerData;
  unsigned int PrologEndAddress;
};

/* 1494 */
struct _XINPUT_KEYSTROKE
{
  unsigned __int16 VirtualKey;
  wchar_t Unicode;
  unsigned __int16 Flags;
  char UserIndex;
  char HidCode;
};

/* 1495 */
struct _XSWAPDISC_ERROR_TEXT
{
  const wchar_t *wszTitle;
  const wchar_t *wszText;
  const wchar_t *wszButton;
};

/* 1496 */
struct _XONLINE_SERVICE_INFO
{
  unsigned int dwServiceID;
  in_addr serviceIP;
  unsigned __int16 wServicePort;
  unsigned __int16 wReserved;
};

/* 1497 */
struct _XMFLOAT2
{
  float x;
  float y;
};

/* 1498 */
struct _D3DXIMAGE_INFO
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int MipLevels;
  _D3DFORMAT Format;
  _D3DRESOURCETYPE ResourceType;
  _D3DXIMAGE_FILEFORMAT ImageFileFormat;
};

/* 1499 */
struct _EXCEPTION_RECORD32
{
  int ExceptionCode;
  unsigned int ExceptionFlags;
  unsigned int ExceptionRecord;
  unsigned int ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInformation[15];
};

/* 1500 */
struct _XOVERLAPPED
{
  unsigned int InternalLow;
  unsigned int InternalHigh;
  unsigned int InternalContext;
  void *hEvent;
  void (__cdecl *pCompletionRoutine)(unsigned int, unsigned int, _XOVERLAPPED *);
  unsigned int dwCompletionContext;
  unsigned int dwExtendedError;
};

/* 1501 */
struct _EXCEPTION_POINTERS
{
  _EXCEPTION_RECORD *ExceptionRecord;
  _CONTEXT *ContextRecord;
};

/* 1502 */
#pragma pack(push, 8)
struct _XSESSION_REGISTRANT
{
  unsigned __int64 qwMachineID;
  unsigned int bTrustworthiness;
  unsigned int bNumUsers;
  unsigned __int64 *rgUsers;
};
#pragma pack(pop)

/* 1503 */
struct _XSESSION_REGISTRATION_RESULTS
{
  unsigned int wNumRegistrants;
  _XSESSION_REGISTRANT *rgRegistrants;
};

/* 1504 */
union $8678CB4034817A08239F9A0D685E5FD8
{
  GPU_SURFACEINFO SurfaceInfo;
  D3DBaseTexture *Parent;
};

/* 1505 */
union $AA0EBD2AC3CD9E90EA27A204FC6745EF
{
  GPU_DEPTHINFO DepthInfo;
  GPU_COLORINFO ColorInfo;
};

/* 1506 */
struct D3DSurface
{
  D3DResource baseclass_0;
  $8678CB4034817A08239F9A0D685E5FD8 ___u1;
  $AA0EBD2AC3CD9E90EA27A204FC6745EF ___u2;
  GPU_HICONTROL HiControl;
  int _bf36;
  _D3DFORMAT Format;
  unsigned int Size;
};

/* 1507 */
struct HICON__
{
  int unused;
};

/* 1508 */
struct _D3DTRIPATCH_INFO
{
  unsigned int StartVertexOffset;
  unsigned int NumVertices;
  _D3DBASISTYPE Basis;
  _D3DDEGREETYPE Degree;
};

/* 1509 */
struct _XMFLOAT4X4
{
  $4EB5B986E90E64384170ABFE8BFA2AFA ___u0;
};

/* 1510 */
struct _XHASH_STATE
{
  char Internal[88];
};

/* 1511 */
struct _XSESSION_MEMBER
{
  unsigned __int64 xuidOnline;
  unsigned int dwUserIndex;
  unsigned int dwFlags;
};

/* 1512 */
#pragma pack(push, 8)
struct _XSESSION_LOCAL_DETAILS
{
  unsigned int dwUserIndexHost;
  unsigned int dwGameType;
  unsigned int dwGameMode;
  unsigned int dwFlags;
  unsigned int dwMaxPublicSlots;
  unsigned int dwMaxPrivateSlots;
  unsigned int dwAvailablePublicSlots;
  unsigned int dwAvailablePrivateSlots;
  unsigned int dwActualMemberCount;
  unsigned int dwReturnedMemberCount;
  _XSESSION_STATE eState;
  unsigned __int64 qwNonce;
  _XSESSION_INFO sessionInfo;
  XNKID xnkidArbitration;
  _XSESSION_MEMBER *pSessionMembers;
};
#pragma pack(pop)

/* 1513 */
struct _XMCOLOR
{
  unsigned int c;
};

/* 1514 */
struct ID3DXFileData
{
  IUnknown baseclass_0;
};

/* 1515 */
struct ID3DXFileEnumObject
{
  IUnknown baseclass_0;
};

/* 1516 */
struct HACCEL__
{
  int unused;
};

/* 1517 */
union $E6E24A7F5B6F8B597C18331DB62781EC
{
  unsigned int ForwarderString;
  unsigned int Function;
  unsigned int Ordinal;
  unsigned int AddressOfData;
};

/* 1518 */
struct _IMAGE_THUNK_DATA32
{
  $E6E24A7F5B6F8B597C18331DB62781EC u1;
};

/* 1519 */
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
  unsigned int FuncStart;
  int _bf4;
};

/* 1520 */
union GPUFLOW_COND_EXEC_PREDS
{
  int _bf4;
};

/* 1521 */
struct _ADDRESS_INFO
{
  unsigned __int16 wStreet1Length;
  wchar_t *wszStreet1;
  unsigned __int16 wStreet2Length;
  wchar_t *wszStreet2;
  unsigned __int16 wCityLength;
  wchar_t *wszCity;
  unsigned __int16 wDistrictLength;
  wchar_t *wszDistrict;
  unsigned __int16 wStateLength;
  wchar_t *wszState;
  unsigned __int16 wPostalCodeLength;
  wchar_t *wszPostalCode;
};

/* 1522 */
struct _GET_USER_INFO_RESPONSE
{
  unsigned __int16 wFirstNameLength;
  wchar_t *wszFirstName;
  unsigned __int16 wLastNameLength;
  wchar_t *wszLastName;
  _ADDRESS_INFO addressInfo;
  unsigned __int16 wEmailLength;
  wchar_t *wszEmail;
  unsigned __int16 wLanguageId;
  char bCountryId;
  char bMsftOptIn;
  char bParterOptIn;
  char bAge;
};

/* 1523 */
struct D3DTexture
{
  D3DBaseTexture baseclass_0;
};

/* 1524 */
struct ANON_OBJECT_HEADER
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  _GUID ClassID;
  unsigned int SizeOfData;
};

/* 1525 */
struct _XMXICON4
{
  unsigned __int64 v;
};

/* 1526 */
struct _D3DXSHADER_INSTRUCTIONINFO
{
  unsigned __int16 Line;
  unsigned __int16 File;
  unsigned int Offset;
};

/* 1527 */
struct _UCODE_FLOAT16
{
  float f[16];
};

/* 1528 */
struct _IMAGE_VXD_HEADER
{
  unsigned __int16 e32_magic;
  char e32_border;
  char e32_worder;
  unsigned int e32_level;
  unsigned __int16 e32_cpu;
  unsigned __int16 e32_os;
  unsigned int e32_ver;
  unsigned int e32_mflags;
  unsigned int e32_mpages;
  unsigned int e32_startobj;
  unsigned int e32_eip;
  unsigned int e32_stackobj;
  unsigned int e32_esp;
  unsigned int e32_pagesize;
  unsigned int e32_lastpagesize;
  unsigned int e32_fixupsize;
  unsigned int e32_fixupsum;
  unsigned int e32_ldrsize;
  unsigned int e32_ldrsum;
  unsigned int e32_objtab;
  unsigned int e32_objcnt;
  unsigned int e32_objmap;
  unsigned int e32_itermap;
  unsigned int e32_rsrctab;
  unsigned int e32_rsrccnt;
  unsigned int e32_restab;
  unsigned int e32_enttab;
  unsigned int e32_dirtab;
  unsigned int e32_dircnt;
  unsigned int e32_fpagetab;
  unsigned int e32_frectab;
  unsigned int e32_impmod;
  unsigned int e32_impmodcnt;
  unsigned int e32_impproc;
  unsigned int e32_pagesum;
  unsigned int e32_datapage;
  unsigned int e32_preload;
  unsigned int e32_nrestab;
  unsigned int e32_cbnrestab;
  unsigned int e32_nressum;
  unsigned int e32_autodata;
  unsigned int e32_debuginfo;
  unsigned int e32_debuglen;
  unsigned int e32_instpreload;
  unsigned int e32_instdemand;
  unsigned int e32_heapsize;
  char e32_res3[12];
  unsigned int e32_winresoff;
  unsigned int e32_winreslen;
  unsigned __int16 e32_devid;
  unsigned __int16 e32_ddkver;
};

/* 1529 */
struct D3DVolume
{
  D3DResource baseclass_0;
  D3DBaseTexture *Parent;
  int _bf28;
};

/* 1530 */
struct _D3DVOLUME_DESC
{
  _D3DFORMAT Format;
  _D3DRESOURCETYPE Type;
  unsigned int Usage;
  unsigned int Pool;
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
};

/* 1531 */
struct _D3DBOX
{
  unsigned int Left;
  unsigned int Top;
  unsigned int Right;
  unsigned int Bottom;
  unsigned int Front;
  unsigned int Back;
};

/* 1532 */
union GPUCOMMAND_LOAD_ALU_CONSTANT
{
  unsigned int dword[3];
  $F40CD173CB8661182889563E6E319598 _s1;
};

/* 1533 */
struct _D3DXSHPRTBUFFER_DESC
{
  unsigned int NumSamples;
  unsigned int Order;
  unsigned int NumChannels;
  unsigned int Width;
  unsigned int Height;
};

/* 1534 */
struct _WIN32_FILE_ATTRIBUTE_DATA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
};

/* 1535 */
#pragma pack(push, 4)
struct XPLAYERLIST_BUTTON
{
  unsigned int dwType;
  wchar_t wszCustomText[23];
};
#pragma pack(pop)

/* 1536 */
struct _IMAGE_COFF_SYMBOLS_HEADER
{
  unsigned int NumberOfSymbols;
  unsigned int LvaToFirstSymbol;
  unsigned int NumberOfLinenumbers;
  unsigned int LvaToFirstLinenumber;
  unsigned int RvaToFirstByteOfCode;
  unsigned int RvaToLastByteOfCode;
  unsigned int RvaToFirstByteOfData;
  unsigned int RvaToLastByteOfData;
};

/* 1537 */
struct _ImageArchitectureHeader
{
  int _bf0;
  unsigned int FirstEntryRVA;
};

/* 1538 */
struct _D3DXWELDEPSILONS
{
  float Position;
  float BlendWeights;
  float Normal;
  float PSize;
  float Specular;
  float Diffuse;
  float Texcoord[8];
  float Tangent;
  float Binormal;
  float TessFactor;
};

/* 1539 */
struct Xps
{
  unsigned int m_Reserved[100];
};

/* 1540 */
struct XpsThread
{
  XpsGlobal *pGlobal;
  unsigned int Thread;
  unsigned int EndPosition;
  unsigned int Wrap;
  unsigned int *pRingStart;
  unsigned int *pRingLimit;
  unsigned int WriteBackAddress;
  volatile unsigned int *pTail;
};

/* 1541 */
struct XpsGlobal
{
  volatile int Cookie;
  unsigned int *pPrimaryRingBuffer;
  unsigned int PrimaryRingBufferIndex;
  unsigned int PrimaryRingBufferIndexMask;
  void (__cdecl *pCallback)(XpsThread *, void *, const void *, unsigned int);
  void *pCallbackContext;
  unsigned int SubmitInstanceIndex;
  unsigned int SubmitInstanceCount;
  void *pSubmitData;
  unsigned int *pNextCommand;
};

/* 1542 */
struct _D3DXMATRIXA16
{
  D3DXMATRIX baseclass_0;
};

/* 1543 */
union _UCODE_INTERPOLATOR_HEADER
{
  unsigned int dword;
};

/* 1544 */
struct _UCODE_R500UCODE_COMMON
{
  unsigned int PhysicalMicrocodeOffset;
  unsigned int PhysicalMicrocodeSize;
  GPU_PROGRAMCONTROL ProgramControl;
  GPU_CONTEXTMISC ContextMisc;
  _UCODE_CONTROLFLOWCONSTANTSMASK ControlFlowConstantMask;
  _UCODE_INTERPOLATOR_HEADER interpolatorHeader;
};

/* 1545 */
struct _UCODE_R500VSUCODE
{
  _UCODE_R500UCODE_COMMON common;
  unsigned int dwVSIndexDeclarationCount;
  unsigned int dwVSInputDeclarationCount;
  unsigned int dwVSOutputPatchCount;
};

/* 1546 */
struct _WSABUF
{
  unsigned int len;
  char *buf;
};

/* 1547 */
struct _D3DPWLGAMMAENTRY
{
  unsigned __int16 Base;
  unsigned __int16 Delta;
};

/* 1548 */
struct _D3DPWLGAMMA
{
  _D3DPWLGAMMAENTRY red[128];
  _D3DPWLGAMMAENTRY green[128];
  _D3DPWLGAMMAENTRY blue[128];
};

/* 1549 */
struct _XMDECN4
{
  unsigned int v;
};

/* 1550 */
union $BEF32C08A961B0DAF1FF18CE42F4855E
{
  unsigned int dwUserIndex;
  unsigned __int64 xuid;
};

/* 1551 */
struct _XUSER_PROFILE_SETTING
{
  _XUSER_PROFILE_SOURCE source;
  __declspec(align(8)) $BEF32C08A961B0DAF1FF18CE42F4855E user;
  unsigned int dwSettingId;
  __declspec(align(8)) _XUSER_DATA data;
};

/* 1552 */
struct _XUSER_READ_PROFILE_SETTING_RESULT
{
  unsigned int dwSettingsLen;
  _XUSER_PROFILE_SETTING *pSettings;
};

/* 1553 */
struct HBRUSH__
{
  int unused;
};

/* 1554 */
struct _XINPUT_VIBRATION
{
  unsigned __int16 wLeftMotorSpeed;
  unsigned __int16 wRightMotorSpeed;
};

/* 1555 */
struct _ACCESS_ALLOWED_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 1556 */
struct _XINVITE_INFO
{
  unsigned __int64 xuidInvitee;
  unsigned __int64 xuidInviter;
  unsigned int dwTitleID;
  _XSESSION_INFO hostInfo;
  int fFromGameInvite;
};

/* 1557 */
struct IDirectXFileEnumObject
{
  IUnknown baseclass_0;
};

/* 1558 */
struct $59ECC881033F6C068A75F4A0CB9CF12C
{
  int _bf0;
  unsigned int Reference;
  unsigned int Mask;
  int _bf12;
};

/* 1559 */
union GPUCOMMAND_WAIT_REG_EQ
{
  $59ECC881033F6C068A75F4A0CB9CF12C _s0;
  unsigned int dword[4];
};

/* 1560 */
struct HFONT__
{
  int unused;
};

/* 1561 */
struct _D3DXSHADER_FILEINFO
{
  unsigned int Name;
};

/* 1562 */
struct _D3DCLIPSTATUS9
{
  unsigned int ClipUnion;
  unsigned int ClipIntersection;
};

/* 1563 */
struct $57773494B792E94BF2C8C41923ACD6BF
{
  int _bf0;
  int _bf4;
};

/* 1564 */
union GPUCOMMAND_REG_TO_MEM
{
  $57773494B792E94BF2C8C41923ACD6BF _s0;
  unsigned int dword[2];
};

/* 1565 */
struct ID3DXEffect
{
  ID3DXBaseEffect baseclass_0;
};

/* 1566 */
struct ID3DXEffectPool
{
  IUnknown baseclass_0;
};

/* 1567 */
struct ID3DXEffectStateManager
{
  IUnknown baseclass_0;
};

/* 1568 */
struct _IMAGE_BASE_RELOCATION
{
  unsigned int VirtualAddress;
  unsigned int SizeOfBlock;
};

/* 1569 */
#pragma pack(push, 4)
struct WSAData
{
  unsigned __int16 wVersion;
  unsigned __int16 wHighVersion;
  char szDescription[257];
  char szSystemStatus[129];
  unsigned __int16 iMaxSockets;
  unsigned __int16 iMaxUdpDg;
  char *lpVendorInfo;
};
#pragma pack(pop)

/* 1570 */
union GPU_BCCONTROL
{
  unsigned int dword;
};

/* 1571 */
struct tagSIZE
{
  int cx;
  int cy;
};

/* 1572 */
struct $A7B573CBEDEB8EA5FC3C0DECBBBDD940
{
  unsigned int dword[2];
  unsigned int Index32[];
};

/* 1573 */
union GPUCOMMAND_MPEG_INDEX
{
  $A7B573CBEDEB8EA5FC3C0DECBBBDD940 _s0;
  $38DAE03C5F32738BE3C3EF16C20C38D7 _s1;
};

/* 1574 */
struct HWINEVENTHOOK__
{
  int unused;
};

/* 1575 */
struct _XUSER_STATS_VIEW
{
  unsigned int dwViewId;
  unsigned int dwTotalViewRows;
  unsigned int dwNumRows;
  _XUSER_STATS_ROW *pRows;
};

/* 1576 */
struct _XUSER_STATS_READ_RESULTS
{
  unsigned int dwNumViews;
  _XUSER_STATS_VIEW *pViews;
};

/* 1577 */
struct $F0551D0CB09E7A078CAEF7CAC43D74C7
{
  char *locale;
  wchar_t *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 1578 */
#pragma pack(push, 2)
struct _MESSAGE_RESOURCE_ENTRY
{
  unsigned __int16 Length;
  unsigned __int16 Flags;
  char Text[1];
};
#pragma pack(pop)

/* 1579 */
struct ID3DXAllocateHierarchy
{
  ID3DXAllocateHierarchyVtbl *vfptr;
};

/* 1580 */
struct $D38DAC9490ED6371569718E24C6DF04F
{
  _BYTE gap0[4];
  HRESULT (__cdecl *CreateMeshContainer)(ID3DXAllocateHierarchy *this, const char *, _D3DXMESHDATA *, _D3DXMATERIAL *, _D3DXEFFECTINSTANCE *, unsigned int, const unsigned int *, ID3DXSkinInfo *, _D3DXMESHCONTAINER **);
};

/* 1581 */
struct $6FB2BC63C15052685283FE0323BD327C
{
  _BYTE gap0[8];
  HRESULT (__cdecl *DestroyFrame)(ID3DXAllocateHierarchy *this, _D3DXFRAME *);
};

/* 1582 */
struct $8843E0F9B066433AE8D7535E12EE2CB3
{
  _BYTE gap0[12];
  HRESULT (__cdecl *DestroyMeshContainer)(ID3DXAllocateHierarchy *this, _D3DXMESHCONTAINER *);
};

/* 1583 */
union $47BE820CB296EC7C6FC6DD19F6C6905D
{
  HRESULT (__cdecl *CreateFrame)(ID3DXAllocateHierarchy *this, const char *, _D3DXFRAME **);
  $D38DAC9490ED6371569718E24C6DF04F _s1;
  $6FB2BC63C15052685283FE0323BD327C _s2;
  $8843E0F9B066433AE8D7535E12EE2CB3 _s3;
};

/* 1584 */
struct ID3DXAllocateHierarchyVtbl
{
  $47BE820CB296EC7C6FC6DD19F6C6905D ___u0;
};

/* 1585 */
union $22971E98F1DCAE471B592EC18ECB1551
{
  unsigned int PhysicalAddress;
  unsigned int VirtualSize;
};

/* 1586 */
struct _IMAGE_SECTION_HEADER
{
  char Name[8];
  $22971E98F1DCAE471B592EC18ECB1551 Misc;
  unsigned int VirtualAddress;
  unsigned int SizeOfRawData;
  unsigned int PointerToRawData;
  unsigned int PointerToRelocations;
  unsigned int PointerToLinenumbers;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int Characteristics;
};

/* 1587 */
struct IDirect3DShaderValidator9
{
  IDirect3DShaderValidator9Vtbl *vfptr;
};

/* 1588 */
struct $2851E478DBEA93F445EC2EB34C3C6152
{
  _BYTE gap0[4];
  HRESULT (__cdecl *Instruction)(IDirect3DShaderValidator9 *this, const char *, unsigned int, const unsigned int *, unsigned int);
};

/* 1589 */
struct $4F92C224A565BD36EC8332466F824325
{
  _BYTE gap0[8];
  HRESULT (__cdecl *End)(IDirect3DShaderValidator9 *this);
};

/* 1590 */
union $977916E76D5A668F2B16480A43F9FA13
{
  HRESULT (__cdecl *Begin)(IDirect3DShaderValidator9 *this, HRESULT (__cdecl *)(const char *, unsigned int, unsigned int, unsigned int, const char *, void *), void *, unsigned int);
  $2851E478DBEA93F445EC2EB34C3C6152 _s1;
  $4F92C224A565BD36EC8332466F824325 _s2;
};

/* 1591 */
struct IDirect3DShaderValidator9Vtbl
{
  unsigned int (__cdecl *AddRef)(IDirect3DShaderValidator9 *this);
  unsigned int (__cdecl *Release)(IDirect3DShaderValidator9 *this);
  $977916E76D5A668F2B16480A43F9FA13 ___u2;
};

/* 1592 */
struct _LONGDOUBLE
{
  double x;
};

/* 1593 */
struct _D3DPOINT
{
  int x;
  int y;
};

/* 1594 */
struct _XMHALF2
{
  unsigned __int16 x;
  unsigned __int16 y;
};

/* 1595 */
struct _XVIDEO_MODE
{
  unsigned int dwDisplayWidth;
  unsigned int dwDisplayHeight;
  int fIsInterlaced;
  int fIsWideScreen;
  int fIsHiDef;
  float RefreshRate;
  unsigned int VideoStandard;
  unsigned int Reserved[5];
};

/* 1596 */
struct _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS
{
  unsigned int dwBytesTotal;
  unsigned __int64 xuidOwner;
  _FILETIME ftCreated;
};

/* 1597 */
struct IDirectXFileDataReference
{
  IDirectXFileObject baseclass_0;
};

/* 1598 */
struct _XMFLOAT3
{
  float x;
  float y;
  float z;
};

/* 1599 */
union GPUTEXTURE_FETCH_INSTRUCTION
{
  unsigned int dword[3];
  $F40CD173CB8661182889563E6E319598 _s1;
};

/* 1600 */
union GPUVERTEX_FETCH_INSTRUCTION
{
  unsigned int dword[3];
  $F40CD173CB8661182889563E6E319598 _s1;
};

/* 1601 */
union GPUFLOW_EXEC
{
  int _bf4;
};

/* 1602 */
union GPUFLOW_COND_EXEC
{
  int _bf4;
};

/* 1603 */
union GPUFLOW_LOOP_START
{
  int _bf4;
};

/* 1604 */
union GPUFLOW_LOOP_END
{
  int _bf4;
};

/* 1605 */
union GPUFLOW_COND_CALL
{
  int _bf4;
};

/* 1606 */
union GPUFLOW_RETURN
{
  int _bf4;
};

/* 1607 */
union GPUFLOW_COND_JUMP
{
  int _bf4;
};

/* 1608 */
union GPUFLOW_ALLOC
{
  int _bf4;
};

/* 1609 */
union GPUFLOW_INSTRUCTION
{
  GPUFLOW_EXEC Exec;
  GPUFLOW_COND_EXEC CondExec;
  GPUFLOW_COND_EXEC_PREDS CondExecPreds;
  GPUFLOW_LOOP_START LoopStart;
  GPUFLOW_LOOP_END LoopEnd;
  GPUFLOW_COND_CALL CondCall;
  GPUFLOW_RETURN Return;
  GPUFLOW_COND_JUMP CondJump;
  GPUFLOW_ALLOC Alloc;
  unsigned int dword[2];
  $38DAE03C5F32738BE3C3EF16C20C38D7 _s10;
};

/* 1610 */
struct GPUFLOW_INSTRUCTION_PAIR
{
  unsigned int dword[3];
};

/* 1611 */
union GPUSHADER_INSTRUCTION
{
  GPUTEXTURE_FETCH_INSTRUCTION TextureFetch;
  GPUVERTEX_FETCH_INSTRUCTION VertexFetch;
  GPUFLOW_INSTRUCTION Flow0;
  GPUFLOW_INSTRUCTION_PAIR FlowPair;
  GPUALU_INSTRUCTION Alu;
};

/* 1612 */
struct _IMAGE_RESOURCE_DATA_ENTRY
{
  unsigned int OffsetToData;
  unsigned int Size;
  unsigned int CodePage;
  unsigned int Reserved;
};

/* 1613 */
struct _ImageArchitectureEntry
{
  unsigned int FixupInstRVA;
  unsigned int NewInst;
};

/* 1614 */
union $4CFA15F5CE489CDF0BD78DFB308FEF36
{
  unsigned __int16 Ordinal;
  unsigned __int16 Hint;
};

/* 1615 */
struct IMPORT_OBJECT_HEADER
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  unsigned int SizeOfData;
  $4CFA15F5CE489CDF0BD78DFB308FEF36 ___u6;
  __int16 _bf18;
};

/* 1616 */
struct _XMUHEND3
{
  unsigned int v;
};

/* 1617 */
union GPU_COHERSTATUS
{
  unsigned int dword;
};

/* 1618 */
struct _D3DXSHPRTCOMPBUFFER_DESC
{
  unsigned int SampleSize;
  unsigned int NumSamples;
  unsigned int NumClusters;
  unsigned int NumPCA;
  unsigned int Order;
  unsigned int NumChannels;
};

/* 1619 */
struct _D3DDISPLAYMODE
{
  unsigned int Width;
  unsigned int Height;
  unsigned int RefreshRate;
  _D3DFORMAT Format;
};

/* 1620 */
struct _NT_TIB
{
  struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
  void *StackBase;
  void *StackLimit;
  void *SubSystemTib;
  $7A727655067EA29DD1B3C3F7D79CBFD1 ___u4;
  void *ArbitraryUserPointer;
  _NT_TIB *Self;
};

/* 1621 */
union $7A727655067EA29DD1B3C3F7D79CBFD1
{
  void *FiberData;
  unsigned int Version;
};

/* 1622 */
struct D3DXVECTOR4_16F
{
  D3DXFLOAT16 x;
  D3DXFLOAT16 y;
  D3DXFLOAT16 z;
  D3DXFLOAT16 w;
};

/* 1623 */
struct _UCODE_DEBUGGER_PARAMETERS
{
  unsigned int Timestamp;
  const char *pPath;
  void *pBufferAllocContext;
  HRESULT (__cdecl *pBufferAllocCallback)(void *, unsigned int, void **);
  void *pUPDBBuffer;
};

/* 1624 */
struct HTASK__
{
  int unused;
};

/* 1625 */
struct _XONLINE_FRIEND
{
  unsigned __int64 xuid;
  char szGamertag[16];
  unsigned int dwFriendState;
  XNKID sessionID;
  unsigned int dwTitleID;
  _FILETIME ftUserTime;
  XNKID xnkidInvite;
  _FILETIME gameinviteTime;
  unsigned int cchRichPresence;
  wchar_t wszRichPresence[64];
};

/* 1626 */
struct $7E2F1C0A3A2428D2F41C759E0DF18E2B
{
  int _bf0;
  unsigned int AndMask;
  unsigned int OrMask;
};

/* 1627 */
union GPUCOMMAND_REG_RMW
{
  unsigned int dword[3];
  $7E2F1C0A3A2428D2F41C759E0DF18E2B _s1;
};

/* 1628 */
struct _GENERIC_MAPPING
{
  unsigned int GenericRead;
  unsigned int GenericWrite;
  unsigned int GenericExecute;
  unsigned int GenericAll;
};

/* 1629 */
struct _XINPUT_CAPABILITIES
{
  char Type;
  char SubType;
  unsigned __int16 Flags;
  _XINPUT_GAMEPAD Gamepad;
  _XINPUT_VIBRATION Vibration;
};

/* 1630 */
struct _heapinfo
{
  int *_pentry;
  unsigned int _size;
  int _useflag;
};

/* 1631 */
union _UCODE_PSINPUTDECLARATION
{
  unsigned int dword;
};

/* 1632 */
struct HMENU__
{
  int unused;
};

/* 1633 */
union DCPERFCOUNTER_CNTL
{
  unsigned int dword;
};

/* 1634 */
struct D3DXPLANE
{
  float a;
  float b;
  float c;
  float d;
};

/* 1635 */
struct ID3DXLoadUserData
{
  ID3DXLoadUserDataVtbl *vfptr;
};

/* 1636 */
struct $37C59BA3AA7BC0334400BE7A8C475827
{
  _BYTE gap0[4];
  HRESULT (__cdecl *LoadFrameChildData)(ID3DXLoadUserData *this, _D3DXFRAME *, IDirectXFileData *);
};

/* 1637 */
struct $9B37109F0AFEE1725A2DCDF2798FBEF0
{
  _BYTE gap0[8];
  HRESULT (__cdecl *LoadMeshChildData)(ID3DXLoadUserData *this, _D3DXMESHCONTAINER *, IDirectXFileData *);
};

/* 1638 */
union $FFB7AB422BF159F2FB990EFB4550434B
{
  HRESULT (__cdecl *LoadTopLevelData)(ID3DXLoadUserData *this, IDirectXFileData *);
  $37C59BA3AA7BC0334400BE7A8C475827 _s1;
  $9B37109F0AFEE1725A2DCDF2798FBEF0 _s2;
};

/* 1639 */
struct ID3DXLoadUserDataVtbl
{
  $FFB7AB422BF159F2FB990EFB4550434B ___u0;
};

/* 1640 */
union $66A2FC5ED47CB5912809650DAB14E256
{
  unsigned int VirtualAddress;
  unsigned int RelocCount;
};

/* 1641 */
struct _IMAGE_RELOCATION
{
  $66A2FC5ED47CB5912809650DAB14E256 ___u0;
  unsigned int SymbolTableIndex;
  unsigned __int16 Type;
};

/* 1642 */
struct Direct3D
{
  char dummy[1];
};

/* 1643 */
struct ID3DXSPMesh
{
  IUnknown baseclass_0;
};

/* 1644 */
struct _D3DXATTRIBUTEWEIGHTS
{
  float Position;
  float Boundary;
  float Normal;
  float Diffuse;
  float Specular;
  float Texcoord[8];
  float Tangent;
  float Binormal;
};

/* 1645 */
#pragma pack(push, 4)
struct _D3DXSHPRTSPLITMESHVERTDATA
{
  unsigned int uVertRemap;
  unsigned int uSubCluster;
  char ucVertStatus;
};
#pragma pack(pop)

/* 1646 */
struct _D3DXSHADER_VARIABLEINFO
{
  unsigned int Scope;
  unsigned int Name;
  unsigned int TypeInfo;
  unsigned int Writes;
  unsigned int WriteInfo;
};

/* 1647 */
struct XUSER_ACHIEVEMENT
{
  unsigned int dwUserIndex;
  unsigned int dwAchievementId;
};

/* 1648 */
union IOCPERFCOUNTER_CNTL
{
  unsigned int dword;
};

/* 1649 */
struct D3DArrayTexture
{
  D3DBaseTexture baseclass_0;
};

/* 1650 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 1651 */
struct ID3DXFile
{
  IUnknown baseclass_0;
};

/* 1652 */
struct ID3DXFileSaveObject
{
  IUnknown baseclass_0;
};

/* 1653 */
struct $E93AFDE0AC8E87DF6B598FAA5DCC9D71
{
  int _bf0;
  unsigned int _4B000000;
  _BYTE gap8[4];
  int _bf12;
};

/* 1654 */
union GPU_MEMEXPORT_STREAM_CONSTANT
{
  unsigned int dword[4];
  float c[4];
  $E93AFDE0AC8E87DF6B598FAA5DCC9D71 _s2;
};

/* 1655 */
struct $79758D353058F01D1FA59ABFFCC65E6C
{
  _BYTE gap0[4];
  int _bf4;
  unsigned int Data;
};

/* 1656 */
union GPUCOMMAND_EVENT_WRITE_CACHE_FLUSH
{
  unsigned int dword[3];
  $79758D353058F01D1FA59ABFFCC65E6C _s1;
};

/* 1657 */
struct tagRECT
{
  int left;
  int top;
  int right;
  int bottom;
};

/* 1658 */
struct _IMAGE_SEPARATE_DEBUG_HEADER
{
  unsigned __int16 Signature;
  unsigned __int16 Flags;
  unsigned __int16 Machine;
  unsigned __int16 Characteristics;
  unsigned int TimeDateStamp;
  unsigned int CheckSum;
  unsigned int ImageBase;
  unsigned int SizeOfImage;
  unsigned int NumberOfSections;
  unsigned int ExportedNamesSize;
  unsigned int DebugDirectorySize;
  unsigned int SectionAlignment;
  unsigned int Reserved[2];
};

/* 1659 */
struct IClassFactory
{
  IClassFactoryVtbl *lpVtbl;
};

/* 1660 */
struct IClassFactoryVtbl
{
  HRESULT (__cdecl *QueryInterface)(IClassFactory *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IClassFactory *);
  unsigned int (__cdecl *Release)(IClassFactory *);
  HRESULT (__cdecl *CreateInstance)(IClassFactory *, IUnknown *, _GUID *const , void **);
  HRESULT (__cdecl *LockServer)(IClassFactory *, int);
};

/* 1661 */
struct _MESSAGE_RESOURCE_DATA
{
  unsigned int NumberOfBlocks;
  _MESSAGE_RESOURCE_BLOCK Blocks[1];
};

/* 1662 */
struct $7796010880C1C807FA4302577826A06F
{
  _SINGLE_LIST_ENTRY Next;
  unsigned __int16 Depth;
  unsigned __int16 Sequence;
};

/* 1663 */
union _SLIST_HEADER
{
  unsigned __int64 Alignment;
  $7796010880C1C807FA4302577826A06F _s1;
};

/* 1664 */
struct _SYSTEMTIME
{
  unsigned __int16 wYear;
  unsigned __int16 wMonth;
  unsigned __int16 wDayOfWeek;
  unsigned __int16 wDay;
  unsigned __int16 wHour;
  unsigned __int16 wMinute;
  unsigned __int16 wSecond;
  unsigned __int16 wMilliseconds;
};

/* 1665 */
struct _D3DSURFACE_PARAMETERS
{
  unsigned int Base;
  unsigned int HierarchicalZBase;
  int ColorExpBias;
};

/* 1666 */
struct _XMXDECN4
{
  unsigned int v;
};

/* 1667 */
struct _XUSER_RANK_REQUEST
{
  unsigned int dwViewId;
  __int64 i64Rating;
};

/* 1668 */
struct _XMUDECN4
{
  unsigned int v;
};

/* 1669 */
struct _MEMORYSTATUS
{
  unsigned int dwLength;
  unsigned int dwMemoryLoad;
  unsigned int dwTotalPhys;
  unsigned int dwAvailPhys;
  unsigned int dwTotalPageFile;
  unsigned int dwAvailPageFile;
  unsigned int dwTotalVirtual;
  unsigned int dwAvailVirtual;
};

/* 1670 */
struct XNQOSINFO
{
  char bFlags;
  char bReserved;
  unsigned __int16 cProbesXmit;
  unsigned __int16 cProbesRecv;
  unsigned __int16 cbData;
  char *pbData;
  unsigned __int16 wRttMinInMsecs;
  unsigned __int16 wRttMedInMsecs;
  unsigned int dwUpBitsPerSec;
  unsigned int dwDnBitsPerSec;
};

/* 1671 */
#pragma pack(push, 4)
struct _XCONTENT_DATA
{
  unsigned int DeviceID;
  unsigned int dwContentType;
  wchar_t szDisplayName[128];
  char szFileName[42];
};
#pragma pack(pop)

/* 1672 */
struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
  char Name[16];
  char Date[12];
  char UserID[6];
  char GroupID[6];
  char Mode[8];
  char Size[10];
  char EndHeader[2];
};

/* 1673 */
struct _XTHREAD_NOTIFICATION
{
  _LIST_ENTRY ListEntry;
  void (__cdecl *pfnNotifyRoutine)(int);
};

/* 1674 */
struct _XMSHORTN2
{
  __int16 x;
  __int16 y;
};

/* 1675 */
struct _D3DXSHADER_DEBUGINFO
{
  unsigned int Size;
  unsigned int Creator;
  unsigned int SourceCode;
  unsigned int Files;
  unsigned int FileInfo;
  unsigned int Instructions;
  unsigned int InstructionInfo;
  unsigned int Variables;
  unsigned int VariableInfo;
  unsigned int EntrypointName;
};

/* 1676 */
struct _LD_DEMO
{
  unsigned int dwID;
  unsigned int dwRunmode;
  unsigned int dwTimeout;
  char szLauncherXEX[128];
  char szLaunchedXEX[128];
};

/* 1677 */
struct _IMAGE_EXPORT_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int Name;
  unsigned int Base;
  unsigned int NumberOfFunctions;
  unsigned int NumberOfNames;
  unsigned int AddressOfFunctions;
  unsigned int AddressOfNames;
  unsigned int AddressOfNameOrdinals;
};

/* 1678 */
#pragma pack(push, 4)
struct _D3DGPUVERSION
{
  _D3DGPUMAJORVERSION MajorVersion;
  unsigned __int16 MinorVersion;
};
#pragma pack(pop)

/* 1679 */
struct $8A08A6AF59552F05469687720A1A9136
{
  unsigned int HighPart;
  unsigned int LowPart;
};

/* 1680 */
union _ULARGE_INTEGER
{
  $8A08A6AF59552F05469687720A1A9136 _s0;
  $8A08A6AF59552F05469687720A1A9136 u;
  unsigned __int64 QuadPart;
};

/* 1681 */
struct $D1AA4CC39BA31B41FCEC61B229E939FB
{
  unsigned int Low;
  int _bf4;
};

/* 1682 */
union GPUPERFCOUNTER_VALUE
{
  $D1AA4CC39BA31B41FCEC61B229E939FB _s0;
  _ULARGE_INTEGER qword;
};

/* 1683 */
struct _D3DXKEY_VECTOR3
{
  float Time;
  D3DXVECTOR3 Value;
};

/* 1684 */
struct _D3DXSHMATERIAL
{
  _D3DCOLORVALUE Diffuse;
  int bMirror;
  int bSubSurf;
  float RelativeIndexOfRefraction;
  _D3DCOLORVALUE Absorption;
  _D3DCOLORVALUE ReducedScattering;
};

/* 1685 */
struct _XMDHENN3
{
  unsigned int v;
};

/* 1686 */
union _FILE_SEGMENT_ELEMENT
{
  void *Buffer;
  unsigned int Alignment;
};

/* 1687 */
struct _div_t
{
  int quot;
  int rem;
};

/* 1688 */
struct _D3DSWAPDATA
{
  unsigned int Flags;
  unsigned int Swap;
  unsigned int LastVBlank;
  unsigned int LastSwapVBlank;
  unsigned int PercentScanned;
  unsigned int SwapVBlank;
};

/* 1689 */
struct HBITMAP__
{
  int unused;
};

/* 1690 */
struct _SECURITY_DESCRIPTOR_RELATIVE
{
  char Revision;
  char Sbz1;
  unsigned __int16 Control;
  unsigned int Owner;
  unsigned int Group;
  unsigned int Sacl;
  unsigned int Dacl;
};

/* 1691 */
struct D3DPerfCounters
{
  char dummy[1];
};

/* 1692 */
struct _TOKEN_STATISTICS
{
  _LUID TokenId;
  _LUID AuthenticationId;
  _LARGE_INTEGER ExpirationTime;
  _TOKEN_TYPE TokenType;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  unsigned int DynamicCharged;
  unsigned int DynamicAvailable;
  unsigned int GroupCount;
  unsigned int PrivilegeCount;
  _LUID ModifiedId;
};

/* 1693 */
struct _PRIVILEGE_SET
{
  unsigned int PrivilegeCount;
  unsigned int Control;
  _LUID_AND_ATTRIBUTES Privilege[1];
};

/* 1694 */
struct _OVERLAPPED
{
  unsigned int Internal;
  unsigned int InternalHigh;
  unsigned int Offset;
  unsigned int OffsetHigh;
  void *hEvent;
};

/* 1695 */
struct _D3DDEVICE_CREATION_PARAMETERS
{
  unsigned int AdapterOrdinal;
  _D3DDEVTYPE DeviceType;
  HWND__ *hFocusWindow;
  unsigned int BehaviorFlags;
};

/* 1696 */
union DCPERFCOUNTER_VALUE
{
  $D1AA4CC39BA31B41FCEC61B229E939FB _s0;
  _ULARGE_INTEGER qword;
};

/* 1697 */
union BIUPERFCOUNTER_CNTL
{
  unsigned int dword;
};

/* 1698 */
struct ID3DXMatrixStack
{
  IUnknown baseclass_0;
};

/* 1699 */
struct _IMAGE_TLS_DIRECTORY32
{
  unsigned int StartAddressOfRawData;
  unsigned int EndAddressOfRawData;
  unsigned int AddressOfIndex;
  unsigned int AddressOfCallBacks;
  unsigned int SizeOfZeroFill;
  unsigned int Characteristics;
};

/* 1700 */
struct XNetStartupParams
{
  char cfgSizeOfStruct;
  char cfgFlags;
  char cfgSockMaxDgramSockets;
  char cfgSockMaxStreamSockets;
  char cfgSockDefaultRecvBufsizeInK;
  char cfgSockDefaultSendBufsizeInK;
  char cfgKeyRegMax;
  char cfgSecRegMax;
  char cfgQosDataLimitDiv4;
  char cfgQosProbeTimeoutInSeconds;
  char cfgQosProbeRetries;
  char cfgQosSrvMaxSimultaneousResponses;
  char cfgQosPairWaitTimeInSeconds;
};

/* 1701 */
struct XMicrocodeBuilder
{
  char dummy[1];
};

/* 1702 */
struct XShaderPDBHint
{
  unsigned int Hint[3];
};

/* 1703 */
struct IShaderPDBBuilder
{
  IShaderPDBBuilderVtbl *vfptr;
};

/* 1704 */
struct IShaderPDBBuilderVtbl
{
  unsigned int (__cdecl *AddRef)(IShaderPDBBuilder *this);
  unsigned int (__cdecl *Release)(IShaderPDBBuilder *this);
  void (__cdecl *BeginPass)(IShaderPDBBuilder *this, int);
  void (__cdecl *EndPass)(IShaderPDBBuilder *this, unsigned int);
  void (__cdecl *RemapVariableRegisters)(IShaderPDBBuilder *this, unsigned int *);
  void (__cdecl *AddVfetch)(IShaderPDBBuilder *this, unsigned int, unsigned int, unsigned int, unsigned int, int);
  void (__cdecl *AddInterpolator)(IShaderPDBBuilder *this, unsigned int, unsigned int, unsigned int);
};

/* 1705 */
struct HRSRC__
{
  int unused;
};

/* 1706 */
struct _ACL_SIZE_INFORMATION
{
  unsigned int AceCount;
  unsigned int AclBytesInUse;
  unsigned int AclBytesFree;
};

/* 1707 */
struct ID3DXLine
{
  IUnknown baseclass_0;
};

/* 1708 */
union GPUCOMMAND_EVENT_WRITE_ZPASS_DONE
{
  unsigned int dword[1];
};

/* 1709 */
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
  unsigned __int64 BeginAddress;
  unsigned __int64 EndAddress;
  unsigned __int64 ExceptionHandler;
  unsigned __int64 HandlerData;
  unsigned __int64 PrologEndAddress;
};

/* 1710 */
union GPUPERFCOUNTER_SELECT
{
  unsigned int dword;
};

/* 1711 */
union $85E3DB0AE782B0314B343BB09609F631
{
  unsigned int dwButtonPressed;
  unsigned __int16 rgwPasscode[4];
};

/* 1712 */
struct _MESSAGEBOX_RESULT
{
  $85E3DB0AE782B0314B343BB09609F631 ___u0;
};

/* 1713 */
struct ISequentialStream
{
  ISequentialStreamVtbl *lpVtbl;
};

/* 1714 */
struct ISequentialStreamVtbl
{
  HRESULT (__cdecl *QueryInterface)(ISequentialStream *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ISequentialStream *);
  unsigned int (__cdecl *Release)(ISequentialStream *);
  HRESULT (__cdecl *Read)(ISequentialStream *, void *, unsigned int, unsigned int *);
  HRESULT (__cdecl *Write)(ISequentialStream *, const void *, unsigned int, unsigned int *);
};

/* 1715 */
struct _D3DVSHADERCAPS2_0
{
  unsigned int Caps;
  int DynamicFlowControlDepth;
  int NumTemps;
  int StaticFlowControlDepth;
};

/* 1716 */
struct _D3DPSHADERCAPS2_0
{
  unsigned int Caps;
  int DynamicFlowControlDepth;
  int NumTemps;
  int StaticFlowControlDepth;
  int NumInstructionSlots;
};

/* 1717 */
struct _D3DCAPS9
{
  _D3DDEVTYPE DeviceType;
  unsigned int AdapterOrdinal;
  unsigned int Caps;
  unsigned int Caps2;
  unsigned int Caps3;
  unsigned int PresentationIntervals;
  unsigned int CursorCaps;
  unsigned int DevCaps;
  unsigned int PrimitiveMiscCaps;
  unsigned int RasterCaps;
  unsigned int ZCmpCaps;
  unsigned int SrcBlendCaps;
  unsigned int DestBlendCaps;
  unsigned int AlphaCmpCaps;
  unsigned int ShadeCaps;
  unsigned int TextureCaps;
  unsigned int TextureFilterCaps;
  unsigned int CubeTextureFilterCaps;
  unsigned int VolumeTextureFilterCaps;
  unsigned int TextureAddressCaps;
  unsigned int VolumeTextureAddressCaps;
  unsigned int LineCaps;
  unsigned int MaxTextureWidth;
  unsigned int MaxTextureHeight;
  unsigned int MaxVolumeExtent;
  unsigned int MaxTextureRepeat;
  unsigned int MaxTextureAspectRatio;
  unsigned int MaxAnisotropy;
  float MaxVertexW;
  float GuardBandLeft;
  float GuardBandTop;
  float GuardBandRight;
  float GuardBandBottom;
  float ExtentsAdjust;
  unsigned int StencilCaps;
  unsigned int FVFCaps;
  unsigned int TextureOpCaps;
  unsigned int MaxTextureBlendStages;
  unsigned int MaxSimultaneousTextures;
  unsigned int VertexProcessingCaps;
  unsigned int MaxActiveLights;
  unsigned int MaxUserClipPlanes;
  unsigned int MaxVertexBlendMatrices;
  unsigned int MaxVertexBlendMatrixIndex;
  float MaxPointSize;
  unsigned int MaxPrimitiveCount;
  unsigned int MaxVertexIndex;
  unsigned int MaxStreams;
  unsigned int MaxStreamStride;
  unsigned int VertexShaderVersion;
  unsigned int MaxVertexShaderConst;
  unsigned int PixelShaderVersion;
  float PixelShader1xMaxValue;
  unsigned int DevCaps2;
  float MaxNpatchTessellationLevel;
  unsigned int Reserved5;
  unsigned int MasterAdapterOrdinal;
  unsigned int AdapterOrdinalInGroup;
  unsigned int NumberOfAdaptersInGroup;
  unsigned int DeclTypes;
  unsigned int NumSimultaneousRTs;
  unsigned int StretchRectFilterCaps;
  _D3DVSHADERCAPS2_0 VS20Caps;
  _D3DPSHADERCAPS2_0 PS20Caps;
  unsigned int VertexTextureFilterCaps;
  unsigned int MaxVShaderInstructionsExecuted;
  unsigned int MaxPShaderInstructionsExecuted;
  unsigned int MaxVertexShader30InstructionSlots;
  unsigned int MaxPixelShader30InstructionSlots;
};

/* 1718 */
struct _SYSTEM_ALARM_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 1719 */
struct IMAGE_LOAD_CONFIG_DIRECTORY64
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned __int64 LockPrefixTable;
  unsigned int MaximumAllocationSize;
  unsigned int VirtualMemoryThreshold;
  unsigned int ProcessHeapFlags;
  unsigned int ProcessAffinityMask;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned __int64 EditList;
  unsigned int Reserved[1];
};

/* 1720 */
struct linger
{
  unsigned __int16 l_onoff;
  unsigned __int16 l_linger;
};

/* 1721 */
struct _D3DSCREENEXTENTSTATS
{
  unsigned int MinX;
  unsigned int MaxX;
  unsigned int MinY;
  unsigned int MaxY;
  float MinZ;
  float MaxZ;
};

/* 1722 */
struct XNDNS
{
  int iStatus;
  unsigned int cina;
  in_addr aina[8];
};

/* 1723 */
struct _UCODE_DEFINITION_TABLE_ALU_CONSTANT_RECORD
{
  unsigned __int16 index;
  unsigned __int16 dwordCount;
  unsigned int physicalMemoryOffset;
};

/* 1724 */
struct timeval
{
  int tv_sec;
  int tv_usec;
};

/* 1725 */
union GPUCOMMAND_DRAW_AUTO
{
  unsigned int dword[2];
  $38DAE03C5F32738BE3C3EF16C20C38D7 _s1;
};

/* 1726 */
struct HMETAFILE__
{
  int unused;
};

/* 1727 */
struct _TOKEN_OWNER
{
  void *Owner;
};

/* 1728 */
#pragma pack(push, 2)
struct _IMAGE_RESOURCE_DIRECTORY_STRING
{
  unsigned __int16 Length;
  char NameString[1];
};
#pragma pack(pop)

/* 1729 */
struct _ACCESS_DENIED_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 1730 */
struct _IMAGE_DOS_HEADER
{
  unsigned __int16 e_magic;
  unsigned __int16 e_cblp;
  unsigned __int16 e_cp;
  unsigned __int16 e_crlc;
  unsigned __int16 e_cparhdr;
  unsigned __int16 e_minalloc;
  unsigned __int16 e_maxalloc;
  unsigned __int16 e_ss;
  unsigned __int16 e_sp;
  unsigned __int16 e_csum;
  unsigned __int16 e_ip;
  unsigned __int16 e_cs;
  unsigned __int16 e_lfarlc;
  unsigned __int16 e_ovno;
  unsigned __int16 e_res[4];
  unsigned __int16 e_oemid;
  unsigned __int16 e_oeminfo;
  unsigned __int16 e_res2[10];
  int e_lfanew;
};

/* 1731 */
struct _UCODE_R500_DEBUGGER_HINT_HEADER
{
  unsigned int Timestamp;
  unsigned int HintSize;
  unsigned int HintData[];
};

/* 1732 */
struct _D3DVIEWPORTF9
{
  float X;
  float Y;
  float Width;
  float Height;
  float MinZ;
  float MaxZ;
  unsigned int Flags;
};

/* 1733 */
struct IPersist
{
  IPersistVtbl *lpVtbl;
};

/* 1734 */
struct IPersistVtbl
{
  HRESULT (__cdecl *QueryInterface)(IPersist *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IPersist *);
  unsigned int (__cdecl *Release)(IPersist *);
  HRESULT (__cdecl *GetClassID)(IPersist *, _GUID *);
};

/* 1735 */
struct _XONLINE_PRESENCE
{
  unsigned __int64 xuid;
  unsigned int dwState;
  XNKID sessionID;
  unsigned int dwTitleID;
  _FILETIME ftUserTime;
  unsigned int cchRichPresence;
  wchar_t wszRichPresence[64];
};

/* 1736 */
struct _XMUBYTE4
{
  $F8266EFF78560B6C69ACEB8D6761AA64 ___u0;
};

/* 1737 */
struct HINSTANCE__
{
  int unused;
};

/* 1738 */
struct _DXFILELOADRESOURCE
{
  HINSTANCE__ *hModule;
  const char *lpName;
  const char *lpType;
};

/* 1739 */
struct _FPO_DATA
{
  unsigned int ulOffStart;
  unsigned int cbProcSize;
  unsigned int cdwLocals;
  unsigned __int16 cdwParams;
  __int16 _bf14;
};

/* 1740 */
struct _XINPUT_KEYBOARDSTATE
{
  char bModifiers;
  char bReserved;
  char HidCodes[6];
  unsigned __int16 VKCodes[6];
};

/* 1741 */
struct _D3DGAMMARAMP
{
  unsigned __int16 red[256];
  unsigned __int16 green[256];
  unsigned __int16 blue[256];
};

/* 1742 */
struct ID3DXAnimationController
{
  IUnknown baseclass_0;
};

/* 1743 */
struct _XSESSION_VIEW_PROPERTIES
{
  unsigned int dwViewId;
  unsigned int dwNumProperties;
  _XUSER_PROPERTY *pProperties;
};

/* 1744 */
struct _D3DLIGHT9
{
  _D3DLIGHTTYPE Type;
  _D3DCOLORVALUE Diffuse;
  _D3DCOLORVALUE Specular;
  _D3DCOLORVALUE Ambient;
  _D3DVECTOR Position;
  _D3DVECTOR Direction;
  float Range;
  float Falloff;
  float Attenuation0;
  float Attenuation1;
  float Attenuation2;
  float Theta;
  float Phi;
};

/* 1745 */
struct $54966C968E9AC31B06CBCA2CF7F8F9AF
{
  unsigned int Address;
  int _bf4;
};

/* 1746 */
union GPUCOMMAND_INDIRECT_BUFFER
{
  $54966C968E9AC31B06CBCA2CF7F8F9AF _s0;
  unsigned int dword[2];
};

/* 1747 */
struct _XUSER_STATS_SPEC
{
  unsigned int dwViewId;
  unsigned int dwNumColumnIds;
  unsigned __int16 rgwColumnIds[64];
};

/* 1748 */
struct SETJMP_VECTOR4
{
  float floats[4];
};

/* 1749 */
struct _s__ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)();
  int (__cdecl *pForwardCompat)();
  _s__CatchableTypeArray *pCatchableTypeArray;
};

/* 1750 */
struct ID3DXSprite
{
  IUnknown baseclass_0;
};

/* 1751 */
struct _UCODE_DEFINITION_TABLE_SIMPLESTATEDELTA
{
  unsigned __int16 byteOffset;
  unsigned __int16 dwordCount;
  unsigned int data[];
};

/* 1752 */
struct <vc_attributes>::immediatebindAttribute
{
  char dummy[1];
};

/* 1753 */
struct <vc_attributes>::inAttribute
{
  char dummy[1];
};

/* 1754 */
struct <vc_attributes>::publicAttribute
{
  char dummy[1];
};

/* 1755 */
struct <vc_attributes>::size_isAttribute
{
  const char *expression;
};

/* 1756 */
struct <vc_attributes>::exportAttribute
{
  char dummy[1];
};

/* 1757 */
struct <vc_attributes>::controlAttribute
{
  char dummy[1];
};

/* 1758 */
struct <vc_attributes>::helpstringcontextAttribute
{
  int contextid;
};

/* 1759 */
struct <vc_attributes>::rangeAttribute
{
  int low_val;
  int high_val;
};

/* 1760 */
struct <vc_attributes>::displaybindAttribute
{
  char dummy[1];
};

/* 1761 */
struct <vc_attributes>::hookAttribute
{
  const char *event;
  const char *source;
  const char *handler;
  const char *receiver;
};

/* 1762 */
struct <vc_attributes>::uidefaultAttribute
{
  char dummy[1];
};

/* 1763 */
struct <vc_attributes>::defaultbindAttribute
{
  char dummy[1];
};

/* 1764 */
struct <vc_attributes>::outAttribute
{
  char dummy[1];
};

/* 1765 */
struct <vc_attributes>::defaultvalueAttribute
{
  const char *value;
};

/* 1766 */
struct <vc_attributes>::pointer_defaultAttribute
{
  <vc_attributes>::pointer_defaultAttribute::type_e type;
};

/* 1767 */
struct <vc_attributes>::uuidAttribute
{
  const char *value;
};

/* 1768 */
struct <vc_attributes>::threadingAttribute
{
  <vc_attributes>::threadingAttribute::threading_e value;
};

/* 1769 */
struct <vc_attributes>::localAttribute
{
  char dummy[1];
};

/* 1770 */
struct <vc_attributes>::idAttribute
{
  int id_num;
};

/* 1771 */
struct <vc_attributes>::nonbrowsableAttribute
{
  char dummy[1];
};

/* 1772 */
struct <vc_attributes>::importlibAttribute
{
  const char *tlb_file;
};

/* 1773 */
struct <vc_attributes>::call_asAttribute
{
  void *local_proc;
};

/* 1774 */
struct <vc_attributes>::dispinterfaceAttribute
{
  char dummy[1];
};

/* 1775 */
struct <vc_attributes>::dualAttribute
{
  char dummy[1];
};

/* 1776 */
struct <vc_attributes>::switch_typeAttribute
{
  const char *switch_type_specifier;
};

/* 1777 */
#pragma pack(push, 4)
struct <vc_attributes>::idl_moduleAttribute
{
  const char *name;
  const char *dllname;
  const char *version;
  const char *uuid;
  const char *helpstring;
  int helpstringcontext;
  int helpcontext;
  bool hidden;
  bool restricted;
};
#pragma pack(pop)

/* 1778 */
struct <vc_attributes>::coclassAttribute
{
  char dummy[1];
};

/* 1779 */
struct <vc_attributes>::defaultAttribute
{
  const char *value;
};

/* 1780 */
struct <vc_attributes>::requesteditAttribute
{
  char dummy[1];
};

/* 1781 */
struct <vc_attributes>::providerAttribute
{
  const char *name;
  const char *uuid;
  int cookies;
};

/* 1782 */
struct <vc_attributes>::max_isAttribute
{
  const char *expression;
};

/* 1783 */
struct <vc_attributes>::importAttribute
{
  const char *idl_file;
};

/* 1784 */
struct <vc_attributes>::satypeAttribute
{
  const char *type;
};

/* 1785 */
struct <vc_attributes>::propgetAttribute
{
  char dummy[1];
};

/* 1786 */
struct <vc_attributes>::propputAttribute
{
  char dummy[1];
};

/* 1787 */
#pragma pack(push, 4)
struct <vc_attributes>::event_receiverAttribute
{
  <vc_attributes>::event_receiverAttribute::type_e type;
  bool layout_dependent;
};
#pragma pack(pop)

/* 1788 */
struct <vc_attributes>::async_uuidAttribute
{
  const char *uuid;
};

/* 1789 */
struct <vc_attributes>::idl_quoteAttribute
{
  const char *text;
};

/* 1790 */
struct <vc_attributes>::usesgetlasterrorAttribute
{
  char dummy[1];
};

/* 1791 */
struct <vc_attributes>::unhookAttribute
{
  const char *event;
  const char *source;
  const char *handler;
  const char *receiver;
};

/* 1792 */
struct <vc_attributes>::nonextensibleAttribute
{
  char dummy[1];
};

/* 1793 */
struct <vc_attributes>::objectAttribute
{
  char dummy[1];
};

/* 1794 */
struct <vc_attributes>::aggregatableAttribute
{
  <vc_attributes>::aggregatableAttribute::type_e type;
};

/* 1795 */
struct <vc_attributes>::iid_isAttribute
{
  const char *limited_expression;
};

/* 1796 */
struct <vc_attributes>::progidAttribute
{
  const char *name;
};

/* 1797 */
struct <vc_attributes>::readonlyAttribute
{
  char dummy[1];
};

/* 1798 */
struct <vc_attributes>::wire_marshalAttribute
{
  const char *wire_type;
};

/* 1799 */
struct <vc_attributes>::pragmaAttribute
{
  const char *token_sequence;
};

/* 1800 */
struct <vc_attributes>::propputrefAttribute
{
  char dummy[1];
};

/* 1801 */
struct <vc_attributes>::vi_progidAttribute
{
  const char *value;
};

/* 1802 */
struct <vc_attributes>::odlAttribute
{
  char dummy[1];
};

/* 1803 */
struct <vc_attributes>::bindableAttribute
{
  char dummy[1];
};

/* 1804 */
struct <vc_attributes>::oleautomationAttribute
{
  char dummy[1];
};

/* 1805 */
struct <vc_attributes>::helpstringdllAttribute
{
  const char *dllname;
};

/* 1806 */
struct <vc_attributes>::defaultcollelemAttribute
{
  char dummy[1];
};

/* 1807 */
struct <vc_attributes>::retvalAttribute
{
  char dummy[1];
};

/* 1808 */
struct <vc_attributes>::length_isAttribute
{
  const char *expression;
};

/* 1809 */
struct <vc_attributes>::atl::db_commandAttribute
{
  const char *command;
  const char *name;
  const char *source_name;
  const char *hresult;
  const char *bindings;
  const char *bulk_fetch;
};

/* 1810 */
struct <vc_attributes>::atl::db_sourceAttribute
{
  const char *source;
  const char *name;
  const char *hresult;
};

/* 1811 */
struct <vc_attributes>::atl::db_columnAttribute
{
  const char *ordinal;
  const char *dbtype;
  const char *precision;
  const char *scale;
  const char *status;
  const char *length;
};

/* 1812 */
struct <vc_attributes>::atl::soap_namespaceAttribute
{
  const char *value;
};

/* 1813 */
struct <vc_attributes>::atl::db_tableAttribute
{
  const char *table;
  const char *name;
  const char *source_name;
  const char *hresult;
  const char *bulk_fetch;
};

/* 1814 */
struct <vc_attributes>::atl::implements_categoryAttribute
{
  const char *value;
};

/* 1815 */
struct <vc_attributes>::atl::aggregatesAttribute
{
  const char *clsid;
};

/* 1816 */
#pragma pack(push, 2)
struct <vc_attributes>::atl::soap_headerAttribute
{
  const char *value;
  bool required;
  bool in;
  bool out;
};
#pragma pack(pop)

/* 1817 */
struct <vc_attributes>::atl::requires_categoryAttribute
{
  const char *value;
};

/* 1818 */
#pragma pack(push, 4)
struct <vc_attributes>::atl::perf_objectAttribute
{
  int name_res;
  int help_res;
  const char *namestring;
  const char *helpstring;
  int detail;
  bool no_instances;
  const char *class_;
  int maxinstnamelen;
};
#pragma pack(pop)

/* 1819 */
struct <vc_attributes>::atl::rdxAttribute
{
  const char *key;
  const char *valuename;
  const char *regtype;
};

/* 1820 */
#pragma pack(push, 4)
struct <vc_attributes>::atl::perfmonAttribute
{
  const char *name;
  bool register;
};
#pragma pack(pop)

/* 1821 */
#pragma pack(push, 4)
struct <vc_attributes>::atl::db_accessorAttribute
{
  int id;
  bool auto_;
};
#pragma pack(pop)

/* 1822 */
struct <vc_attributes>::atl::soap_handlerAttribute
{
  const char *name;
  const char *namespace;
  const char *protocol;
  const char *style;
  const char *use;
};

/* 1823 */
struct <vc_attributes>::atl::support_error_infoAttribute
{
  const char *error_interface;
};

/* 1824 */
struct <vc_attributes>::atl::tag_nameAttribute
{
  const char *name;
  const char *parse_func;
};

/* 1825 */
struct <vc_attributes>::atl::com_interface_entryAttribute
{
  const char *value;
};

/* 1826 */
struct <vc_attributes>::atl::db_paramAttribute
{
  const char *ordinal;
  const char *paramtype;
  const char *dbtype;
  const char *precision;
  const char *scale;
  const char *status;
  const char *length;
};

/* 1827 */
#pragma pack(push, 4)
struct <vc_attributes>::atl::perf_counterAttribute
{
  const char *namestring;
  const char *helpstring;
  int name_res;
  int help_res;
  int countertype;
  int defscale;
  bool default_counter;
  int detail;
  int max_counter_size;
  const char *countertype_string;
};
#pragma pack(pop)

/* 1828 */
struct <vc_attributes>::atl::soap_methodAttribute
{
  const char *name;
};

/* 1829 */
struct <vc_attributes>::atl::request_handlerAttribute
{
  const char *name;
  const char *sdl;
};

/* 1830 */
struct <vc_attributes>::atl::synchronizeAttribute
{
  char dummy[1];
};

/* 1831 */
struct <vc_attributes>::atl::registration_scriptAttribute
{
  const char *script;
};

/* 1832 */
struct <vc_attributes>::no_injected_textAttribute
{
  bool value;
};

/* 1833 */
struct <vc_attributes>::caseAttribute
{
  int value;
};

/* 1834 */
struct <vc_attributes>::helpstringAttribute
{
  const char *help_text_string;
};

/* 1835 */
struct <vc_attributes>::entryAttribute
{
  const char *entry_id;
};

/* 1836 */
struct <vc_attributes>::defaultvtableAttribute
{
  const char *value;
};

/* 1837 */
#pragma pack(push, 4)
struct <vc_attributes>::emitidlAttribute
{
  int value;
  bool defaultimports;
};
#pragma pack(pop)

/* 1838 */
struct <vc_attributes>::stringAttribute
{
  char dummy[1];
};

/* 1839 */
struct <vc_attributes>::varargAttribute
{
  char dummy[1];
};

/* 1840 */
#pragma pack(push, 4)
struct <vc_attributes>::event_sourceAttribute
{
  <vc_attributes>::event_sourceAttribute::type_e type;
  <vc_attributes>::event_sourceAttribute::optimize_e optimize;
  bool decorate;
};
#pragma pack(pop)

/* 1841 */
struct <vc_attributes>::includeAttribute
{
  const char *include_file;
};

/* 1842 */
struct <vc_attributes>::implementsAttribute
{
  const char *interfaces;
  const char *dispinterfaces;
};

/* 1843 */
#pragma pack(push, 4)
struct <vc_attributes>::moduleAttribute
{
  <vc_attributes>::moduleAttribute::type_e type;
  const char *name;
  const char *version;
  const char *uuid;
  int lcid;
  bool control;
  const char *helpstring;
  int helpstringcontext;
  const char *helpstringdll;
  const char *helpfile;
  int helpcontext;
  bool hidden;
  bool restricted;
  const char *custom;
  const char *resource_name;
};
#pragma pack(pop)

/* 1844 */
struct <vc_attributes>::last_isAttribute
{
  const char *expression;
};

/* 1845 */
struct <vc_attributes>::ptrAttribute
{
  char dummy[1];
};

/* 1846 */
struct <vc_attributes>::helper_attributes::v1_earlyAttribute
{
  char dummy[1];
};

/* 1847 */
#pragma pack(push, 4)
struct <vc_attributes>::helper_attributes::source_annotation_attributeAttribute
{
  int ValidOn;
  bool AllowMultiple;
};
#pragma pack(pop)

/* 1848 */
struct <vc_attributes>::helper_attributes::requires_valueAttribute
{
  char dummy[1];
};

/* 1849 */
struct <vc_attributes>::helper_attributes::as_stringAttribute
{
  char dummy[1];
};

/* 1850 */
struct <vc_attributes>::helper_attributes::usageAttribute
{
  unsigned int value;
};

/* 1851 */
struct <vc_attributes>::helper_attributes::multi_valueAttribute
{
  char dummy[1];
};

/* 1852 */
struct <vc_attributes>::helper_attributes::repeatableAttribute
{
  char dummy[1];
};

/* 1853 */
struct <vc_attributes>::helper_attributes::notify_atlprovAttribute
{
  char dummy[1];
};

/* 1854 */
#pragma pack(push, 4)
struct <vc_attributes>::helper_attributes::attributeAttribute
{
  int ValidOn;
  bool AllowMultiple;
  bool Inherited;
};
#pragma pack(pop)

/* 1855 */
struct <vc_attributes>::helper_attributes::v1_alttypeAttribute
{
  <vc_attributes>::helper_attributes::v1_alttypeAttribute::type_e type;
};

/* 1856 */
struct <vc_attributes>::helper_attributes::process_earlyAttribute
{
  char dummy[1];
};

/* 1857 */
struct <vc_attributes>::helper_attributes::help_stringAttribute
{
  const char *value;
};

/* 1858 */
struct <vc_attributes>::helper_attributes::v1_nameAttribute
{
  const char *name;
};

/* 1859 */
struct <vc_attributes>::helper_attributes::default_valueAttribute
{
  void *value;
};

/* 1860 */
struct <vc_attributes>::first_isAttribute
{
  const char *value;
};

/* 1861 */
struct <vc_attributes>::noncreatableAttribute
{
  char dummy[1];
};

/* 1862 */
struct <vc_attributes>::appobjectAttribute
{
  char dummy[1];
};

/* 1863 */
struct <vc_attributes>::restrictedAttribute
{
  const char *value;
};

/* 1864 */
struct <vc_attributes>::importidlAttribute
{
  const char *value;
};

/* 1865 */
struct <vc_attributes>::cpp_quoteAttribute
{
  const char *string;
};

/* 1866 */
struct <vc_attributes>::v1_enumAttribute
{
  char dummy[1];
};

/* 1867 */
struct <vc_attributes>::refAttribute
{
  char dummy[1];
};

/* 1868 */
struct <vc_attributes>::licensedAttribute
{
  char dummy[1];
};

/* 1869 */
struct <vc_attributes>::lcidAttribute
{
  char dummy[1];
};

/* 1870 */
struct <vc_attributes>::versionAttribute
{
  const char *value;
};

/* 1871 */
struct <vc_attributes>::helpcontextAttribute
{
  const char *helpcontext_value;
};

/* 1872 */
struct <vc_attributes>::helpfileAttribute
{
  const char *filename;
};

/* 1873 */
struct <vc_attributes>::sourceAttribute
{
  const char *value;
};

/* 1874 */
struct <vc_attributes>::transmit_asAttribute
{
  const char *xmit_type;
};

/* 1875 */
struct <vc_attributes>::hiddenAttribute
{
  char dummy[1];
};

/* 1876 */
struct <vc_attributes>::library_blockAttribute
{
  char dummy[1];
};

/* 1877 */
struct <vc_attributes>::customAttribute
{
  char *value;
};

/* 1878 */
struct <vc_attributes>::switch_isAttribute
{
  const char *limited_expression;
};

/* 1879 */
struct <vc_attributes>::ms_unionAttribute
{
  char dummy[1];
};

/* 1880 */
struct <vc_attributes>::uniqueAttribute
{
  char dummy[1];
};

/* 1881 */
struct <vc_attributes>::includelibAttribute
{
  const char *value;
};

/* 1882 */
struct <vc_attributes>::optionalAttribute
{
  char dummy[1];
};

/* 1883 */
struct _IMAGE_RESOURCE_DIR_STRING_U
{
  unsigned __int16 Length;
  unsigned __int16 NameString[1];
};

/* 1884 */
struct _complex
{
  double x;
  double y;
};

/* 1885 */
struct _SYSTEM_AUDIT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 1886 */
union GPUCOMMAND_WAIT_FOR_IDLE
{
  unsigned int Unused;
  unsigned int dword[1];
};

/* 1887 */
struct _D3DVBLANKDATA
{
  unsigned int VBlank;
  unsigned int Swap;
  unsigned int Flags;
};

/* 1888 */
struct _XMUHENDN3
{
  unsigned int v;
};

/* 1889 */
struct _exception
{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
};

/* 1890 */
struct $7E1B59CF72C37EB6B74663F572A4C408
{
  unsigned int BooleanConstant[8];
  unsigned int IntegerConstant[32];
};

/* 1891 */
union $4514A5549CC08B0F1C157D879A9D538E
{
  unsigned int FlowConstant[40];
  $7E1B59CF72C37EB6B74663F572A4C408 _s1;
};

/* 1892 */
struct GPUFLOW_CONSTANTS
{
  $4514A5549CC08B0F1C157D879A9D538E ___u0;
};

/* 1893 */
struct _D3DXTARGET_DESC
{
  const char *Name;
  unsigned int Version;
  unsigned int API;
};

/* 1894 */
struct _UCODE_CONSTANT_TABLE
{
  unsigned int cbTableSize;
};

/* 1895 */
struct _SYSTEM_AUDIT_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 1896 */
struct _D3DRASTER_STATUS
{
  int InVBlank;
  unsigned int ScanLine;
};

/* 1897 */
struct HCOLORSPACE__
{
  int unused;
};

/* 1898 */
struct _D3DSURFACES
{
  D3DSurface *pDepthStencilSurface;
  D3DSurface *pRenderTarget[4];
};

/* 1899 */
struct $0F8D41D22491875769FFC714A23400C4
{
  unsigned int dwLanguageId;
  wchar_t wszActionText[23];
  unsigned __int16 wReserved;
};

/* 1900 */
struct XMSG_CUSTOMACTION
{
  unsigned int dwActionId;
  wchar_t wszEnActionText[23];
  unsigned __int16 wReserved;
  unsigned int dwFlags;
  $0F8D41D22491875769FFC714A23400C4 rgTranslations[11];
};

/* 1901 */
struct _D3DXSHADER_COMPILE_PARAMETERSA
{
  unsigned int Flags;
  unsigned int UPDBTimestamp;
  const char *UPDBPath;
  ID3DXBuffer *pUPDBBuffer;
  unsigned int TempRegisterLimit;
  void *pUPDBB;
  const char *CpuFunctionName;
  int bXbox360ExtensionUsed;
  unsigned int PixelShaderSamplerRegisterBase;
  unsigned int PixelShaderSamplerRegisterCount;
  unsigned int VertexShaderSamplerRegisterBase;
  unsigned int VertexShaderSamplerRegisterCount;
  unsigned int PixelShaderInstructionCount;
  unsigned int VertexShaderInstructionCount;
};

/* 1902 */
union _UCODE_PSOUTPUTMASK
{
  unsigned int dword;
};

/* 1903 */
struct _UCODE_R500PSUCODE
{
  _UCODE_R500UCODE_COMMON common;
  GPU_INTERPOLATORCONTROL interpolatorControl;
  _UCODE_PSOUTPUTMASK outputMask;
};

/* 1904 */
struct _D3DXSHADER_CONSTANTINFO
{
  unsigned int Name;
  unsigned __int16 RegisterSet;
  unsigned __int16 RegisterIndex;
  unsigned __int16 RegisterCount;
  unsigned __int16 Flags;
  unsigned int TypeInfo;
  unsigned int DefaultValue;
};

/* 1905 */
struct _XSESSION_SEARCHRESULT_HEADER
{
  unsigned int dwSearchResults;
  _XSESSION_SEARCHRESULT *pResults;
};

/* 1906 */
struct ID3DXFileSaveData
{
  IUnknown baseclass_0;
};

/* 1907 */
struct _XMUSHORTN2
{
  unsigned __int16 x;
  unsigned __int16 y;
};

/* 1908 */
struct _XMHEND3
{
  unsigned int v;
};

/* 1909 */
struct _D3DXINTERSECTINFO
{
  unsigned int FaceIndex;
  float U;
  float V;
  float Dist;
};

/* 1910 */
union GPUCOMMAND_CPU_INTERRUPT
{
  unsigned int dword[1];
};

/* 1911 */
struct _TOKEN_GROUPS
{
  unsigned int GroupCount;
  _SID_AND_ATTRIBUTES Groups[1];
};

/* 1912 */
#pragma pack(push, 4)
struct type_info
{
  type_infoVtbl *vfptr;
  void *_m_data;
  char _m_d_name[1];
};
#pragma pack(pop)

/* 1913 */
struct type_infoVtbl
{
  void *(__cdecl *__vecDelDtor)(type_info *this, unsigned int);
};

/* 1914 */
struct ID3DXFragmentLinker
{
  IUnknown baseclass_0;
};

/* 1915 */
union _UCODE_VSOUTPUTDECLARATION
{
  unsigned int dword;
};

/* 1916 */
struct _IMAGE_RESOURCE_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned __int16 NumberOfNamedEntries;
  unsigned __int16 NumberOfIdEntries;
};

/* 1917 */
struct _D3DSWAP_STATUS
{
  unsigned int Flags;
  unsigned int Swap;
  unsigned int EnqueuedCount;
};

/* 1918 */
struct _STACK_FRAME_HEADER
{
  unsigned int BackChain;
  unsigned int CompilerReserved;
  unsigned int CalleeOwned1;
  unsigned int CalleeOwned2;
  unsigned __int64 Parameter0;
  unsigned __int64 Parameter1;
  unsigned __int64 Parameter2;
  unsigned __int64 Parameter3;
  unsigned __int64 Parameter4;
  unsigned __int64 Parameter5;
  unsigned __int64 Parameter6;
  unsigned __int64 Parameter7;
};

/* 1919 */
union GPU_GPRMANAGEMENT
{
  unsigned int dword;
};

/* 1920 */
struct _ldiv_t
{
  int quot;
  int rem;
};

/* 1921 */
struct $A8DF805D1CBA1EAEDB3AD4503617926A
{
  float _11;
  float _12;
  float _13;
  float _21;
  float _22;
  float _23;
  float _31;
  float _32;
  float _33;
  float _41;
  float _42;
  float _43;
};

/* 1922 */
union $89ED09FAC3FA025762ED9185372AFB66
{
  $A8DF805D1CBA1EAEDB3AD4503617926A _s0;
  float m[4][3];
};

/* 1923 */
struct _XMFLOAT4X3
{
  $89ED09FAC3FA025762ED9185372AFB66 ___u0;
};

/* 1924 */
struct _D3DXF_FILELOADRESOURCE
{
  HINSTANCE__ *hModule;
  const char *lpName;
  const char *lpType;
};

/* 1925 */
struct _IMAGE_NT_HEADERS64
{
  unsigned int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

/* 1926 */
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};

/* 1927 */
struct _IMAGE_TLS_DIRECTORY64
{
  unsigned __int64 StartAddressOfRawData;
  unsigned __int64 EndAddressOfRawData;
  unsigned __int64 AddressOfIndex;
  unsigned __int64 AddressOfCallBacks;
  unsigned int SizeOfZeroFill;
  unsigned int Characteristics;
};

/* 1928 */
union GPUCOMMAND_NOP
{
  unsigned int Unused;
  unsigned int dword[1];
};

/* 1929 */
#pragma pack(push, 4)
struct _SE_IMPERSONATION_STATE
{
  void *Token;
  char CopyOnOpen;
  char EffectiveOnly;
  _SECURITY_IMPERSONATION_LEVEL Level;
};
#pragma pack(pop)

/* 1930 */
struct IStream
{
  IStreamVtbl *lpVtbl;
};

/* 1931 */
struct tagSTATSTG
{
  unsigned __int16 *pwcsName;
  unsigned int type;
  _ULARGE_INTEGER cbSize;
  _FILETIME mtime;
  _FILETIME ctime;
  _FILETIME atime;
  unsigned int grfMode;
  unsigned int grfLocksSupported;
  _GUID clsid;
  unsigned int grfStateBits;
  unsigned int reserved;
};

/* 1932 */
struct IStreamVtbl
{
  HRESULT (__cdecl *QueryInterface)(IStream *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IStream *);
  unsigned int (__cdecl *Release)(IStream *);
  HRESULT (__cdecl *Read)(IStream *, void *, unsigned int, unsigned int *);
  HRESULT (__cdecl *Write)(IStream *, const void *, unsigned int, unsigned int *);
  HRESULT (__cdecl *Seek)(IStream *, _LARGE_INTEGER, unsigned int, _ULARGE_INTEGER *);
  HRESULT (__cdecl *SetSize)(IStream *, _ULARGE_INTEGER);
  HRESULT (__cdecl *CopyTo)(IStream *, IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER *, _ULARGE_INTEGER *);
  HRESULT (__cdecl *Commit)(IStream *, unsigned int);
  HRESULT (__cdecl *Revert)(IStream *);
  HRESULT (__cdecl *LockRegion)(IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
  HRESULT (__cdecl *UnlockRegion)(IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
  HRESULT (__cdecl *Stat)(IStream *, tagSTATSTG *, unsigned int);
  HRESULT (__cdecl *Clone)(IStream *, IStream **);
};

/* 1933 */
union GPUCOMMAND_MEM_WRITE_COUNTER
{
  unsigned int dword[1];
};

/* 1934 */
struct _XMSHORTN4
{
  __int16 x;
  __int16 y;
  __int16 z;
  __int16 w;
};

/* 1935 */
struct HHOOK__
{
  int unused;
};

/* 1936 */
struct _SECURITY_DESCRIPTOR
{
  char Revision;
  char Sbz1;
  unsigned __int16 Control;
  void *Owner;
  void *Group;
  _ACL *Sacl;
  _ACL *Dacl;
};

/* 1937 */
struct _D3DXSHADER_CONSTANTTABLE
{
  unsigned int Size;
  unsigned int Creator;
  unsigned int Version;
  unsigned int Constants;
  unsigned int ConstantInfo;
  unsigned int Flags;
  unsigned int Target;
};

/* 1938 */
union GPUCOMMAND_INVALIDATE_STATE
{
  unsigned int dword[1];
};

/* 1939 */
union GPUCOMMAND_SET_BIN_MASK_LO
{
  unsigned int Low;
  unsigned int dword[1];
};

/* 1940 */
struct LIST_ENTRY64
{
  unsigned __int64 Flink;
  unsigned __int64 Blink;
};

/* 1941 */
struct HPEN__
{
  int unused;
};

/* 1942 */
#pragma pack(push, 4)
struct _SECURITY_QUALITY_OF_SERVICE
{
  unsigned int Length;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  char ContextTrackingMode;
  char EffectiveOnly;
};
#pragma pack(pop)

/* 1943 */
struct D3DStateBlock
{
  char dummy[1];
};

/* 1944 */
struct _D3DXBONECOMBINATION
{
  unsigned int AttribId;
  unsigned int FaceStart;
  unsigned int FaceCount;
  unsigned int VertexStart;
  unsigned int VertexCount;
  unsigned int *BoneId;
};

/* 1945 */
struct D3DXVECTOR2_16F
{
  D3DXFLOAT16 x;
  D3DXFLOAT16 y;
};

/* 1946 */
struct XCUSTOMACTION
{
  unsigned __int16 wActionId;
  wchar_t wszActionText[23];
  unsigned int dwFlags;
};

/* 1947 */
struct _UCODE_DEFINITION_TABLE
{
  unsigned __int64 u64BitAluDirtyFlags;
  unsigned __int64 u64BitFlowDirtyFlags;
  unsigned int cbTableSize;
  unsigned int data[1];
};

/* 1948 */
struct _D3DRECTPATCH_INFO
{
  unsigned int StartVertexOffsetWidth;
  unsigned int StartVertexOffsetHeight;
  unsigned int Width;
  unsigned int Height;
  unsigned int Stride;
  _D3DBASISTYPE Basis;
  _D3DDEGREETYPE Degree;
};

/* 1949 */
struct _D3DPERFCOUNTER_VALUES
{
  _ULARGE_INTEGER CP[1];
  _ULARGE_INTEGER RBBM[2];
  _ULARGE_INTEGER SQ[4];
  _ULARGE_INTEGER VGT[4];
  _ULARGE_INTEGER VC[4];
  _ULARGE_INTEGER PA_SU[4];
  _ULARGE_INTEGER PA_SC[4];
  _ULARGE_INTEGER HZ[2];
  _ULARGE_INTEGER TCR[2];
  _ULARGE_INTEGER TCM[2];
  _ULARGE_INTEGER TCF[12];
  _ULARGE_INTEGER TP0[2];
  _ULARGE_INTEGER TP1[2];
  _ULARGE_INTEGER TP2[2];
  _ULARGE_INTEGER TP3[2];
  _ULARGE_INTEGER SX[1];
  _ULARGE_INTEGER BC[4];
  _ULARGE_INTEGER MC0[1];
  _ULARGE_INTEGER MC1[1];
  _ULARGE_INTEGER MH[3];
  _ULARGE_INTEGER BIF[1];
};

/* 1950 */
struct _TOKEN_PRIVILEGES
{
  unsigned int PrivilegeCount;
  _LUID_AND_ATTRIBUTES Privileges[1];
};

/* 1951 */
struct _STRING_VERIFY_RESPONSE
{
  unsigned __int16 wNumStrings;
  HRESULT *pStringResult;
};

/* 1952 */
struct __JUMP_BUFFER
{
  double Fpr14;
  double Fpr15;
  double Fpr16;
  double Fpr17;
  double Fpr18;
  double Fpr19;
  double Fpr20;
  double Fpr21;
  double Fpr22;
  double Fpr23;
  double Fpr24;
  double Fpr25;
  double Fpr26;
  double Fpr27;
  double Fpr28;
  double Fpr29;
  double Fpr30;
  double Fpr31;
  unsigned __int64 Gpr1;
  unsigned __int64 Gpr13;
  unsigned __int64 Gpr14;
  unsigned __int64 Gpr15;
  unsigned __int64 Gpr16;
  unsigned __int64 Gpr17;
  unsigned __int64 Gpr18;
  unsigned __int64 Gpr19;
  unsigned __int64 Gpr20;
  unsigned __int64 Gpr21;
  unsigned __int64 Gpr22;
  unsigned __int64 Gpr23;
  unsigned __int64 Gpr24;
  unsigned __int64 Gpr25;
  unsigned __int64 Gpr26;
  unsigned __int64 Gpr27;
  unsigned __int64 Gpr28;
  unsigned __int64 Gpr29;
  unsigned __int64 Gpr30;
  unsigned __int64 Gpr31;
  unsigned int Cr;
  unsigned int Iar;
  unsigned int Type;
  unsigned int Reserved;
};

/* 1953 */
union $980F6A28C67C8F3640106D01D4C85A6A
{
  unsigned int Characteristics;
  unsigned int OriginalFirstThunk;
};

/* 1954 */
struct _IMAGE_IMPORT_DESCRIPTOR
{
  $980F6A28C67C8F3640106D01D4C85A6A ___u0;
  unsigned int TimeDateStamp;
  unsigned int ForwarderChain;
  unsigned int Name;
  unsigned int FirstThunk;
};

/* 1955 */
struct _D3DDEVINFO_VCACHE
{
  unsigned int Pattern;
  unsigned int OptMethod;
  unsigned int CacheSize;
  unsigned int MagicNumber;
};

/* 1956 */
union BIUPERFCOUNTER_VALUE
{
  $D1AA4CC39BA31B41FCEC61B229E939FB _s0;
  _ULARGE_INTEGER qword;
};

/* 1957 */
struct _D3DPERFCOUNTER_EVENTS
{
  GPUPERFEVENT_CP CP[1];
  GPUPERFEVENT_RBBM RBBM[2];
  GPUPERFEVENT_SQ SQ[4];
  GPUPERFEVENT_VGT VGT[4];
  GPUPERFEVENT_VC VC[4];
  GPUPERFEVENT_PA_SU PA_SU[4];
  GPUPERFEVENT_PA_SC PA_SC[4];
  GPUPERFEVENT_HZ HZ[2];
  GPUPERFEVENT_TCR TCR[2];
  GPUPERFEVENT_TCM TCM[2];
  GPUPERFEVENT_TCF TCF[12];
  GPUPERFEVENT_TP TP0[2];
  GPUPERFEVENT_TP TP1[2];
  GPUPERFEVENT_TP TP2[2];
  GPUPERFEVENT_TP TP3[2];
  GPUPERFEVENT_SX SX[1];
  GPUPERFEVENT_BC BC[4];
  GPUPERFEVENT_MC MC0[1];
  GPUPERFEVENT_MC MC1[1];
  GPUPERFEVENT_MH MH[3];
  GPUPERFEVENT_BIF BIF[1];
};

/* 1958 */
struct _SID
{
  char Revision;
  char SubAuthorityCount;
  _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  unsigned int SubAuthority[1];
};

/* 1959 */
struct _CRT_FLOAT
{
  float f;
};

/* 1960 */
struct _LDOUBLE
{
  char ld[10];
};

/* 1961 */
struct $4489D28D763C86ABC141B57BFD18735F
{
  unsigned int dword[1];
  unsigned __int16 Index16[];
  unsigned int Index32[];
};

/* 1962 */
union GPUCOMMAND_DRAW_IMMEDIATE
{
  $4489D28D763C86ABC141B57BFD18735F _s0;
};

/* 1963 */
struct _XMICON4
{
  unsigned __int64 v;
};

/* 1964 */
struct ip_mreq
{
  in_addr imr_multiaddr;
  in_addr imr_interface;
};

/* 1965 */
union GPU_WAITUNTIL
{
  unsigned int dword;
};

/* 1966 */
struct _XMSHORT2
{
  __int16 x;
  __int16 y;
};

/* 1967 */
struct _EXCEPTION_RECORD64
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  unsigned __int64 ExceptionRecord;
  unsigned __int64 ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int __unusedAlignment;
  unsigned __int64 ExceptionInformation[15];
};

/* 1968 */
struct $5D5780CD6331F79295F93D52FDE65BCA
{
  _BYTE gap0[4];
  int _bf4;
  unsigned int Reference;
  unsigned int Mask;
  int _bf16;
};

/* 1969 */
union GPUCOMMAND_WAIT_REG_MEM
{
  unsigned int dword[5];
  $5D5780CD6331F79295F93D52FDE65BCA _s1;
};

/* 1970 */
union GPUCOMMAND_LOAD_SHADER
{
  unsigned int dword[2];
  $38DAE03C5F32738BE3C3EF16C20C38D7 _s1;
};

/* 1971 */
struct _OBJECT_TYPE_LIST
{
  unsigned __int16 Level;
  unsigned __int16 Sbz;
  _GUID *ObjectType;
};

/* 1972 */
struct _TIME_ZONE_INFORMATION
{
  int Bias;
  wchar_t StandardName[32];
  _SYSTEMTIME StandardDate;
  int StandardBias;
  wchar_t DaylightName[32];
  _SYSTEMTIME DaylightDate;
  int DaylightBias;
};

/* 1973 */
struct _IO_COUNTERS
{
  unsigned __int64 ReadOperationCount;
  unsigned __int64 WriteOperationCount;
  unsigned __int64 OtherOperationCount;
  unsigned __int64 ReadTransferCount;
  unsigned __int64 WriteTransferCount;
  unsigned __int64 OtherTransferCount;
};

/* 1974 */
union GPU_CPUINTERRUPTACK
{
  unsigned int dword;
};

/* 1975 */
struct $9BA883DE8AAB2ADB33558BBF4F3883F9
{
  unsigned int andMask;
  unsigned int orMask;
};

/* 1976 */
struct _UCODE_DEFINITION_TABLE_MASKEDSTATEDELTA
{
  unsigned __int16 byteOffset;
  unsigned __int16 dwordCount;
  $9BA883DE8AAB2ADB33558BBF4F3883F9 data[];
};

/* 1977 */
struct _D3DVIEWPORT9
{
  unsigned int X;
  unsigned int Y;
  unsigned int Width;
  unsigned int Height;
  float MinZ;
  float MaxZ;
};

/* 1978 */
struct _D3DBLENDSTATE
{
  int _bf0;
};

/* 1979 */
struct D3DCommandBuffer
{
  D3DResource baseclass_0;
  _D3DTAGCOLLECTION m_Inherited;
  _D3DTAGCOLLECTION m_Persisted;
};

/* 1980 */
struct _XMUSHORT4
{
  unsigned __int16 x;
  unsigned __int16 y;
  unsigned __int16 z;
  unsigned __int16 w;
};

/* 1981 */
struct _CRT_DOUBLE
{
  double x;
};

/* 1982 */
union GPUCOMMAND_EVENT_WRITE
{
  unsigned int dword[3];
  $79758D353058F01D1FA59ABFFCC65E6C _s1;
};

/* 1983 */
union GPU_INSTSTOREMANAGEMENT
{
  unsigned int dword;
};

/* 1984 */
struct $73004CE335501BFF6DB7D2B9961B7722
{
  unsigned int Flags;
  unsigned int Reserved1;
  unsigned int Reserved2;
  unsigned int Reserved3;
  unsigned int Reserved4;
  unsigned int Reserved5;
  unsigned int Reserved6;
  unsigned int Reserved7;
  unsigned int Reserved8;
  unsigned int Reserved9;
  unsigned int Reserved10;
  GPU_INSTSTOREMANAGEMENT InstructionStore;
  unsigned int MaxContext;
  unsigned int Reserved13;
  unsigned int Reserved14;
  unsigned int Reserved15;
  unsigned int Reserved16;
  unsigned int Reserved17;
};

/* 1985 */
struct $D52B4C0E812F2B0F5674338567D99B12
{
  _BYTE gap0[12];
  unsigned int Reserved3To10[8];
};

/* 1986 */
union GPU_MEINIT
{
  $73004CE335501BFF6DB7D2B9961B7722 _s0;
  unsigned int dword[18];
  $D52B4C0E812F2B0F5674338567D99B12 _s2;
};

/* 1987 */
struct _XMUICON4
{
  unsigned __int64 v;
};

/* 1988 */
struct _D3DXF_FILELOADMEMORY
{
  const void *lpMemory;
  unsigned int dSize;
};

/* 1989 */
union $0055FF1BE34206123B9C488F0A43FAA0
{
  unsigned __int64 ForwarderString;
  unsigned __int64 Function;
  unsigned __int64 Ordinal;
  unsigned __int64 AddressOfData;
};

/* 1990 */
struct _IMAGE_THUNK_DATA64
{
  $0055FF1BE34206123B9C488F0A43FAA0 u1;
};

/* 1991 */
struct _XMICO4
{
  unsigned __int64 v;
};

/* 1992 */
struct $07D068524F8F0DAE8F680D91466CE90D
{
  int _bf0;
  unsigned int Data;
};

/* 1993 */
union GPUCOMMAND_MEM_WRITE
{
  unsigned int dword[2];
  $07D068524F8F0DAE8F680D91466CE90D _s1;
};

/* 1994 */
struct HDESK__
{
  int unused;
};

/* 1995 */
struct $4C1278A65443FBDE589A4DBE6AB14695
{
  unsigned int dword[1];
  unsigned int Data[];
};

/* 1996 */
union GPUCOMMAND_SET_CONSTANT
{
  $4C1278A65443FBDE589A4DBE6AB14695 _s0;
};

/* 1997 */
struct ID3DXInclude
{
  ID3DXIncludeVtbl *vfptr;
};

/* 1998 */
struct $6EEA089E949662B34D6DE8DB2979857F
{
  _BYTE gap0[4];
  HRESULT (__cdecl *Close)(ID3DXInclude *this, const void *);
};

/* 1999 */
union $2CF873AE37EA574C6E3BB6E9A17BDB42
{
  HRESULT (__cdecl *Open)(ID3DXInclude *this, _D3DXINCLUDE_TYPE, const char *, const void *, const void **, unsigned int *, char *, unsigned int);
  $6EEA089E949662B34D6DE8DB2979857F _s1;
};

/* 2000 */
struct ID3DXIncludeVtbl
{
  $2CF873AE37EA574C6E3BB6E9A17BDB42 ___u0;
};

/* 2001 */
struct D3DXVECTOR3_16F
{
  D3DXFLOAT16 x;
  D3DXFLOAT16 y;
  D3DXFLOAT16 z;
};

/* 2002 */
struct XNQOS
{
  unsigned int cxnqos;
  unsigned int cxnqosPending;
  XNQOSINFO axnqosinfo[1];
};

/* 2003 */
union GPUCOMMAND_EVENT_WRITE_SCREEN_EXTENT
{
  $57773494B792E94BF2C8C41923ACD6BF _s0;
  unsigned int dword[2];
};

/* 2004 */
#pragma pack(push, 2)
struct _IMAGE_IMPORT_BY_NAME
{
  unsigned __int16 Hint;
  char Name[1];
};
#pragma pack(pop)

/* 2005 */
struct $8A0339985D6E8EEEADA8FC1242272B5B
{
  _BYTE gap0[4];
  int _bf4;
  unsigned int Reference;
  unsigned int Mask;
  int _bf16;
  unsigned int Data;
};

/* 2006 */
union GPUCOMMAND_COND_WRITE
{
  unsigned int dword[6];
  $8A0339985D6E8EEEADA8FC1242272B5B _s1;
};

/* 2007 */
struct _D3DXSEMANTIC
{
  unsigned int Usage;
  unsigned int UsageIndex;
};

/* 2008 */
union GPUCOMMAND_EVENT_WRITE_SHADER
{
  unsigned int dword[3];
  $79758D353058F01D1FA59ABFFCC65E6C _s1;
};

/* 2009 */
#pragma pack(push, 4)
struct XPLAYERLIST_USER
{
  unsigned __int64 xuid;
  wchar_t wszCustomText[31];
};
#pragma pack(pop)

/* 2010 */
#pragma pack(push, 8)
struct XPLAYERLIST_RESULT
{
  unsigned __int64 xuidSelected;
  unsigned int dwKeyCode;
};
#pragma pack(pop)

/* 2011 */
struct _LDBL12
{
  char ld12[12];
};

/* 2012 */
struct GPU_SAMPLECOUNT
{
  unsigned int Total[2];
  unsigned int ZFail[2];
  unsigned int ZPass[2];
  unsigned int StencilFail[2];
};

/* 2013 */
struct GPU_SCREENEXTENT
{
  unsigned __int16 MinX;
  unsigned __int16 MaxX;
  unsigned __int16 MinY;
  unsigned __int16 MaxY;
  unsigned __int16 MinZ;
  unsigned __int16 MaxZ;
};

/* 2014 */
struct $907E2CF9237002DEC5F22D60FD148E45
{
  _BYTE gap0[4];
  int _bf4;
  unsigned int IndexBase;
  int _bf12;
};

/* 2015 */
union GPUCOMMAND_DRAW_INDEX
{
  unsigned int dword[4];
  $907E2CF9237002DEC5F22D60FD148E45 _s1;
};

/* 2016 */
struct $A44E3584D8DAB6BE9E625429AC13006A
{
  unsigned int dword[10];
  _BYTE gap28[4];
  int _bf44;
};

/* 2017 */
union GPUCOMMAND_SET_STATE
{
  $A44E3584D8DAB6BE9E625429AC13006A _s0;
};

/* 2018 */
union GPUCOMMAND_WAIT_REG_GTE
{
  $59ECC881033F6C068A75F4A0CB9CF12C _s0;
  unsigned int dword[4];
};

/* 2019 */
union GPUCOMMAND_FIX_2_FLT_REG
{
  $57773494B792E94BF2C8C41923ACD6BF _s0;
  unsigned int dword[2];
};

/* 2020 */
union GPUCOMMAND_SET_BIN_MASK_HI
{
  unsigned int High;
  unsigned int dword[1];
};

/* 2021 */
union GPUCOMMAND_SET_BIN_SELECT_LO
{
  unsigned int Low;
  unsigned int dword[1];
};

/* 2022 */
union GPUCOMMAND_SET_BIN_SELECT_HI
{
  unsigned int High;
  unsigned int dword[1];
};

/* 2023 */
union IOCPERFCOUNTER_VALUE
{
  $D1AA4CC39BA31B41FCEC61B229E939FB _s0;
  _ULARGE_INTEGER qword;
};

/* 2024 */
struct HDC__
{
  int unused;
};

/* 2025 */
struct _XMBYTEN4
{
  $F8266EFF78560B6C69ACEB8D6761AA64 ___u0;
};

/* 2026 */
struct D3DXShader::CTErrors
{
  void *m_pErrors;
  unsigned int m_cbErrors;
  unsigned int m_uErrorCount;
  unsigned int m_uWarningCount;
  unsigned int m_uWarningLevel;
  unsigned int m_uPragmaCount;
  unsigned int *m_pErrorNums;
  unsigned int *m_pSpecifiers;
};

/* 2027 */
#pragma pack(push, 8)
struct D3DXShader::CPPPragmaDef
{
  const char *m_pTarget;
  const char *m_pRegister;
  double m_fValue[4];
  D3DXShader::CPPPragmaDef *m_pNext;
};
#pragma pack(pop)

/* 2028 */
struct D3DXShader::CNode
{
  D3DXShader::CNodeVtbl *vfptr;
  D3DXShader::_D3DXNODE_TYPE m_Type;
  D3DXShader::CNode *m_pCar;
  D3DXShader::CNode *m_pCdr;
};

/* 2029 */
struct D3DXShader::CNodeVtbl
{
  int (__cdecl *IsEqual)(D3DXShader::CNode *this, D3DXShader::CNode *);
  D3DXShader::CNode *(__cdecl *Copy)(D3DXShader::CNode *this);
  void (__cdecl *Print)(D3DXShader::CNode *this);
};

/* 2030 */
struct D3DXShader::CPPBlock
{
  unsigned int m_TokenSet;
  D3DXShader::CPPBlock *m_pNext;
  unsigned int m_uDepth;
};

/* 2031 */
struct D3DXShader::CPPDefine
{
  const char *m_pId;
  D3DXShader::CNode *m_pParams;
  D3DXShader::CNode *m_pTokens;
  D3DXShader::CPPDefine *m_pNext;
  int m_bSeen;
};

/* 2032 */
union $03133DC8853A5177F13713110799988E
{
  unsigned int Version;
  char Op[4];
  unsigned int Uint;
  double Float;
  const char *Id;
  const char *String;
};

/* 2033 */
struct D3DXShader::D3DXTOKEN
{
  D3DXShader::_D3DXTOKEN_TYPE Type;
  __declspec(align(8)) $03133DC8853A5177F13713110799988E ___u1;
  const char *File;
  unsigned int Line;
  const char *Token;
  unsigned int Length;
};

/* 2034 */
struct D3DXShader::CTokenize
{
  const char *m_pch;
  const char *m_pchLim;
  D3DXShader::D3DXTOKEN m_Token;
  unsigned int m_TokenSet;
  D3DXCore::CAlloc *m_pAlloc;
  D3DXShader::CTErrors *m_pErrors;
  int m_bTreatDigitsAsLetters;
};

/* 2035 */
struct D3DXShader::CPPConditional
{
  int m_bCondition;
  int m_bConditionLast;
  int m_bSeenElse;
  D3DXShader::CPPConditional *m_pNext;
};

/* 2036 */
struct D3DXShader::CPPInclude
{
  D3DXShader::CTokenize m_Tokenize;
  D3DXShader::CPPConditional *m_pConditional;
  D3DXCore::CFile m_File;
  ID3DXInclude *m_pIncludeCB;
  char *m_pFile;
  char *m_pPath;
  const void *m_pvData;
  unsigned int m_cbData;
  D3DXShader::CPPInclude *m_pNext;
};

/* 2037 */
struct D3DXShader::CPreProcessor
{
  D3DXCore::CAlloc m_Alloc;
  D3DXShader::CTErrors m_Errors;
  unsigned int m_PackMatrix;
  D3DXShader::CPPPragmaDef *m_pPragmaDef;
  int m_bEOL;
  int m_bFail;
  int m_bFatal;
  int m_bCommand;
  int m_bCondition;
  int m_bNewCondition;
  int m_bPreProcessorConditional;
  D3DXShader::CNode *m_pStack;
  D3DXShader::CNode *m_pStackFree;
  D3DXShader::CNode *m_pTokens;
  D3DXShader::CPPBlock *m_pBlock;
  D3DXShader::CPPDefine *m_pDefine[127];
  D3DXShader::CPPInclude *m_pInclude;
  D3DXShader::CTokenize *m_pTokenize;
  ID3DXInclude *m_pIncludeCB;
  __declspec(align(8)) D3DXShader::D3DXTOKEN m_Token;
  unsigned int m_TokenSet;
  char *m_pLocale;
  HRESULT m_TLSAllocResult;
  int m_bInsideCriticalSection;
  D3DXCore::CAlloc *m_pSavedAlloc;
  _D3DXSHADER_COMPILE_PARAMETERSA *m_pCompileParameters;
};

/* 2038 */
struct D3DXShader::CUAssembler::BitVector<256>
{
  unsigned int Data[8];
};

/* 2039 */
struct D3DXShader::CUAssembler::BitVector<32>
{
  unsigned int Data[1];
};

/* 2040 */
struct XShaderPDBBuilder
{
  char dummy[1];
};

/* 2041 */
struct D3DXShader::CNodeUAsmLabel
{
  D3DXShader::CNode baseclass_0;
  unsigned int m_Address;
  unsigned int m_Label;
};

/* 2042 */
struct __declspec(align(8)) D3DXShader::CUAssembler
{
  D3DXShader::CTErrors *m_pErrors;
  D3DXShader::CPreProcessor *m_pPreProcessor;
  char m_TokenizerState;
  __declspec(align(8)) D3DXShader::D3DXTOKEN m_Token;
  D3DXShader::CNode *m_pStack;
  int m_bFail;
  int m_bFatal;
  unsigned int m_Error;
  int m_Version;
  int m_bIsPixelShader;
  int m_bIsInline;
  void *m_pFindDeclContext;
  HRESULT (__cdecl *m_pFindDeclCallback)(void *, D3DXShader::D3DXTOKEN *, unsigned int, D3DXShader::CNode **);
  int m_bMicrocodeBuilderInitialized;
  int m_PassState;
  int m_bSeenConstantTable;
  unsigned int m_MicrocodeBuilderFlags;
  unsigned int m_Flags;
  unsigned int m_OpClass;
  unsigned int m_Opcode;
  unsigned int m_Dimension;
  unsigned int m_ShiftSat;
  unsigned int m_UsageIndex;
  int m_bGetToken;
  ID3DXConstantTable *m_pConstantTable;
  D3DXShader::CUAssembler::BitVector<256> m_DeclaredInterpolatorSemantics;
  char m_DeclaredInterpolatorChannels[16];
  D3DXShader::CUAssembler::BitVector<256> m_DeclaredIndexSemantics;
  char m_DeclaredIndexChannels[2];
  __declspec(align(4)) D3DXShader::CUAssembler::BitVector<256> m_DefinedFloatConsts;
  D3DXShader::CUAssembler::BitVector<32> m_DefinedIntConsts;
  D3DXShader::CUAssembler::BitVector<256> m_DefinedBoolConsts;
  const char *m_pName;
  GPU_PROGRAMCONTROL m_ProgramControl;
  GPU_CONTEXTMISC m_ContextMisc;
  unsigned int m_ConfigSetMask;
  int m_ConfigAllowed;
  int m_bSeenAnExecEnd;
  int m_bSeenAZPass;
  XMicrocodeBuilder *m_pMicrocodeBuilder;
  XShaderPDBBuilder *m_pPDBBuilder;
  int m_bPDBBuilderInitialized;
  int m_bBuildPDB;
  D3DXShader::CNodeUAsmLabel *m_pLabels;
};

/* 2043 */
struct D3DXShader::CNodeUAsmInstruction
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::D3DXTOKEN m_Token;
  unsigned int m_OpClass;
  unsigned int m_Opcode[2];
  unsigned int m_Dimension[2];
  unsigned int m_ShiftSat[2];
  unsigned int m_UsageIndex;
  int m_bIsSerialized;
  D3DXShader::CNode *m_pDst[2];
  D3DXShader::CNode *m_pPred;
  D3DXShader::CNode *m_pSrc[4];
  D3DXShader::CNode *m_pOptions;
  unsigned int m_Offset;
};

/* 2044 */
struct D3DXShader::DEFCONST_DESC
{
  _D3DXCONSTANT_DESC Desc;
  D3DXShader::DEFCONST_PARSE_TYPE ParseType;
  unsigned int ArrayIndex;
  unsigned int NumChildren;
  D3DXShader::DEFCONST_DESC *Children[256];
};

/* 2045 */
struct D3DXShader::CNodeUAsmRegister
{
  D3DXShader::CNode baseclass_0;
  unsigned int m_Register;
  unsigned int m_Bias;
  unsigned int m_Index;
  int m_Scalar;
  unsigned int m_Mask;
  unsigned int m_Swizzle;
  D3DXShader::CNode *m_pRelative;
  D3DXShader::CNode *m_Variable;
};

/* 2046 */
struct D3DXShader::SConstantRegisterTypeInfo
{
  _D3DXSHADER_CONSTANTINFO *m_rgConstantInfos;
  unsigned int m_iRegister;
};

/* 2047 */
struct D3DXShader::CNodeRegister
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::CNode *m_pTarget;
  D3DXShader::CNode *m_pRegister;
};

/* 2048 */
struct D3DXShader::CNodeUAsmBlock
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::CNode *m_pStack;
};

/* 2049 */
struct D3DXShader::SConstantRegister
{
  const char *m_szName;
  unsigned int m_iRegister;
  unsigned int m_cRegisters;
  unsigned int m_iUserOffset;
};

/* 2050 */
struct D3DXShader::CNodeToken
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::D3DXTOKEN m_Token;
};

/* 2051 */
struct D3DXShader::CNodeFormat
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::CNode *m_pFormat;
  D3DXShader::CNode *m_pStream;
  D3DXShader::CNode *m_pOffset;
};

/* 2052 */
#pragma pack(push, 4)
struct D3DXShader::_SHADER_REGISTER
{
  const char *pName;
  unsigned int Register;
  unsigned __int16 Size[3];
  int Scalar;
  int RelativeIndexing;
};
#pragma pack(pop)

/* 2053 */
struct D3DXShader::CNodeBuffer
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::D3DXTOKEN m_Token;
  char *m_pbData;
  unsigned int m_cbData;
};

/* 2054 */
struct D3DXShader::CNodeStatement
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::_D3DXSTMT_TYPE m_StmtType;
  D3DXShader::CNode *m_pInit;
  D3DXShader::CNode *m_pCond;
  D3DXShader::CNode *m_pThen;
  D3DXShader::CNode *m_pElse;
};

/* 2055 */
struct $6BB240A13E3D318B5FC83030BC80A7CC
{
  char *pbData;
  unsigned int cbData;
};

/* 2056 */
struct $C13109540C8B4BEFFBD90FC2ACCA09B7
{
  unsigned int Index;
  unsigned int Size;
};

/* 2057 */
union $EDB8A389C3A0DB4777FB99711DDCEDBE
{
  int Bool;
  int Int;
  unsigned int Uint;
  double Float;
  D3DXShader::CNode *pNode;
  $6BB240A13E3D318B5FC83030BC80A7CC Buffer;
  $C13109540C8B4BEFFBD90FC2ACCA09B7 Variable;
};

/* 2058 */
struct D3DXShader::_D3DXVALUE
{
  D3DXShader::_D3DXVALUE_TYPE Type;
  __declspec(align(8)) $EDB8A389C3A0DB4777FB99711DDCEDBE Variable;
};

/* 2059 */
struct D3DXShader::CNodeValue
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::_D3DXVALUE m_Value;
  D3DXShader::D3DXTOKEN m_Token;
};

/* 2060 */
struct D3DXShader::SStaticBranchState
{
  const char **m_rgszTempRegistersToLock;
  unsigned int m_cszTempRegistersToLock;
  const char **m_rgszTempRegistersToNotLock;
  char *m_rgbTempRegistersToNotLockMask;
  unsigned int m_cszTempRegistersToNotLock;
  const char **m_rgszTempRegistersReadInLoop;
  char *m_rgbTempRegistersReadInLoopMask;
  unsigned int m_cszTempRegistersReadInLoop;
};

/* 2061 */
struct D3DXShader::CConstantTable
{
  ID3DXConstantTable baseclass_0;
  unsigned int m_cRef;
  char *m_pbData;
  unsigned int m_cbData;
  _D3DXSHADER_CONSTANTTABLE *m_pSCT;
  D3DXShader::CConstant **m_ppConstants;
  unsigned int m_uConstants;
  unsigned int *m_pScratch;
};

/* 2062 */
struct D3DXShader::CConstant
{
  D3DXShader::CConstantTable *m_pCT;
  _D3DXSHADER_CONSTANTINFO m_SCI;
  _D3DXSHADER_TYPEINFO *m_pSTI;
  HRESULT (__cdecl *m_pSSC)(const void *, unsigned int, const void *, unsigned int *, unsigned int);
  unsigned int *m_pScratch;
  D3DXShader::CConstant *m_pNext;
  unsigned int m_uRegisters;
  unsigned int m_uRegistersPerElement;
  unsigned int m_uComponents;
  unsigned int m_uComponentsPerElement;
  D3DXShader::CConstant **m_ppMembers;
  D3DXShader::CConstant **m_ppElements;
  _D3DXSHADER_TYPEINFO *m_pElementSTI;
};

/* 2063 */
#pragma pack(push, 4)
struct D3DXShader::_UCODE_OPCODE
{
  const char *pName;
  int _bf4;
  unsigned __int16 Args[3];
};
#pragma pack(pop)

/* 2064 */
struct D3DXShader::CNodeTree
{
  D3DXShader::CNode baseclass_0;
  const char *m_pName;
  D3DXShader::CNode *m_pValue;
};

/* 2065 */
struct D3DXShader::CNodeScope
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::_D3DXSCOPE_TYPE m_ScopeType;
  const char *m_pName;
  D3DXShader::CNode *m_pDecls;
  D3DXShader::CNodeTree *m_pTree;
  D3DXShader::CNodeScope *m_pScope;
};

/* 2066 */
struct D3DXShader::CNodeExpression
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::CNode *m_pType;
  unsigned int m_Rows;
  unsigned int m_Cols;
  D3DXShader::_D3DXEXPR_OP m_Op;
  D3DXShader::CNode *m_pLeft;
  D3DXShader::CNode *m_pRight;
  int m_LeftToRight;
  __declspec(align(8)) D3DXShader::D3DXTOKEN m_Token;
};

/* 2067 */
struct D3DXShader::SWriteInfo
{
  unsigned int m_iInst;
  unsigned __int16 m_rgiComponents[4];
};

/* 2068 */
struct D3DXShader::D3DXCB_SEGMENT
{
  const void *pv;
  unsigned int cb;
  unsigned int Flags;
  unsigned int Offset;
  D3DXShader::D3DXCB_SEGMENT *pNext;
  D3DXShader::SegmentType Type;
};

/* 2069 */
struct D3DXShader::CCommentBlock
{
  unsigned int m_dwFourCC;
  unsigned int m_cbSegments;
  D3DXShader::D3DXCB_SEGMENT *m_pSegment;
  D3DXShader::D3DXCB_SEGMENT **m_ppSegment;
};

/* 2070 */
struct D3DXShader::CNodeFunction
{
  D3DXShader::CNode baseclass_0;
  unsigned int m_Index;
  unsigned int m_Size;
  unsigned int m_Usage;
  D3DXShader::CNode *m_pTarget;
  D3DXShader::CNode *m_pType;
  D3DXShader::CNode *m_pArgs;
  D3DXShader::CNode *m_pBody;
  D3DXShader::CNode *m_pValue;
  D3DXShader::CNode *m_pSemantic;
  D3DXShader::CNode *m_pRegister;
  D3DXShader::CNode *m_pAttributes;
  int m_Active;
  int m_Defined;
};

/* 2071 */
struct D3DXShader::CNodeVariable
{
  D3DXShader::CNode baseclass_0;
  unsigned int m_Index;
  unsigned int m_Size;
  D3DXShader::_D3DXSCOPE_TYPE m_ScopeType;
  unsigned int m_Usage;
  D3DXShader::CNode *m_pType;
  D3DXShader::CNode *m_pValue;
  D3DXShader::CNode *m_pUniform;
  D3DXShader::CNode *m_pSemantic;
  D3DXShader::CNode *m_pRegister;
  D3DXShader::CNode *m_pAttributes;
  unsigned int m_Defaults;
  D3DXShader::_D3DXVALUE **m_ppDefaults;
  D3DXShader::_D3DXVALUE **m_ppDefaultsLinear;
};

/* 2072 */
#pragma pack(push, 2)
struct D3DXShader::SBranchState
{
  char m_rgbTempRegistersLocked[32];
  char m_rgbTempRegisters[32];
  const char *m_rgszTempRegisterName[32];
  char m_bAddressRead;
  char m_rgbRastOutputRegsWritten[3];
  char m_rgbTexcrdOutputRegsWritten[8];
  char m_rgbAttrOutputRegsWritten[2];
  char m_rgbColorOutputRegsWritten[16];
  char m_rgbDepthOutputRegsWritten[1];
  D3DXShader::SStaticBranchState *m_pStaticState;
  D3DXShader::SBranchState *m_pbsNext;
};
#pragma pack(pop)

/* 2073 */
struct D3DXShader::SConstantOffsetRemap
{
  unsigned __int16 m_iRegister;
  unsigned __int16 m_iOffset;
};

/* 2074 */
struct D3DXShader::SVariableInfo
{
  D3DXShader::SWriteInfo *m_pWriteInfo;
  unsigned int m_cWrites;
};

/* 2075 */
struct D3DXShader::CInstructionInfo
{
  unsigned int *m_rgdwShader;
  unsigned int *m_rgiInstructionOffsets;
  unsigned int m_cInstructions;
};

/* 2076 */
struct D3DXShader::CFragment
{
  unsigned int m_iIndex;
  const char *m_szName;
  unsigned int *m_rgdwShader;
  unsigned int m_cdwShader;
  unsigned int m_cdwDebugInfo;
  unsigned int m_dwTarget;
  _D3DXSHADER_DEBUGINFO *m_pDebugInfo;
  _D3DXSHADER_CONSTANTTABLE *m_pConstantTable;
  unsigned int m_cInputRegisters;
  unsigned int m_cOutputRegisters;
  unsigned int m_cConstantRegisters;
  unsigned int m_cConstBoolRegisters;
  unsigned int m_cConstIntRegisters;
  unsigned int m_cTempRegisters;
  unsigned int m_iInputInfoRegistersOffset;
  unsigned int m_cInputInfoRegisters;
  unsigned int m_cMaxConstantOffset;
  unsigned int m_rgcMaxConstantOffset[4];
  unsigned int m_rgcMaxUserConstantOffset[4];
  char *m_rgInputUsage;
  char *m_rgInputIndex;
  char *m_rgOutputUsage;
  char *m_rgOutputIndex;
  D3DXShader::SConstantRegister *m_rgConstantRegisters;
  D3DXShader::SConstantRegister *m_rgTempRegisters;
  D3DXShader::SConstantOffsetRemap *m_rgConstantOffsetRemaps;
  _D3DXSHADER_CONSTANTINFO **m_rgConstantSearchInfos;
  D3DXShader::SVariableInfo *m_rgDebugVariableInfo;
  D3DXShader::SWriteInfo *m_rgDebugWriteInfo;
  _D3DXSHADER_CONSTANTINFO *m_rgConstantInfos;
  unsigned int m_cConstantInfos;
  D3DXShader::CInstructionInfo m_InstructionInfo;
  D3DXShader::SStaticBranchState *m_rgStaticBranchStates;
  unsigned int m_cStaticBranchStates;
  D3DXShader::CFragment *m_pFragmentNext;
};

/* 2077 */
struct D3DXShader::CFragmentHashTable
{
  unsigned int m_cFragments;
  D3DXShader::CFragment *m_rgpFragments[19];
};

/* 2078 */
struct D3DXShader::CFragmentLinker
{
  ID3DXFragmentLinker baseclass_0;
  D3DXShader::CFragmentHashTable m_pFragments;
  D3DXShader::CTErrors *m_pErrors;
  D3DXShader::CFragment ***m_rgppVShaderDefinition;
  unsigned int *m_rgcVShaderDefinition;
  unsigned int *m_rgiVShaderHash;
  D3DVertexShader **m_rgpVShaderCache;
  unsigned int m_iVShaderNextEntry;
  D3DXShader::CFragment ***m_rgppPShaderDefinition;
  unsigned int *m_rgcPShaderDefinition;
  unsigned int *m_rgiPShaderHash;
  D3DPixelShader **m_rgpPShaderCache;
  unsigned int m_iPShaderNextEntry;
  unsigned int m_cCacheEntries;
  D3DDevice *m_pDevice;
  unsigned int m_cRef;
  int m_bFail;
};

/* 2079 */
struct D3DXShader::CNodeArray
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::CNode *m_pType;
  unsigned int m_Dim;
};

/* 2080 */
struct D3DXShader::CNodeAttribute
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::CNode *m_pId;
  D3DXShader::CNode *m_pArgs;
};

/* 2081 */
struct D3DXShader::CNodeState
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::CNode *m_pId;
  D3DXShader::CNode *m_pIndex;
  D3DXShader::CNode *m_pValue;
};

/* 2082 */
#pragma pack(push, 4)
struct D3DXShader::SInstruction
{
  unsigned int dwOpcodeDWord;
  unsigned int dwOpcode;
  unsigned int dwDestReg;
  unsigned int rgdwSrcRegs[7];
  unsigned int iDestRegType;
  unsigned int iDestReg;
  char dwWriteMask;
  unsigned int rgiSrcRegTypes[7];
  unsigned int rgiSrcRegs[7];
  unsigned int cSrcRegs;
  int bDestReg;
  int bPredicated;
  unsigned int cDWords;
};
#pragma pack(pop)

/* 2083 */
struct D3DXShader::CNodeUsage
{
  D3DXShader::CNode baseclass_0;
  unsigned int m_Usage;
  D3DXShader::CNode *m_pTarget;
  D3DXShader::CNode *m_pNode;
  D3DXShader::CNode *m_pAttributes;
};

/* 2084 */
struct D3DXShader::CNodeList
{
  D3DXShader::CNode baseclass_0;
  const char *m_pName;
};

/* 2085 */
struct D3DXShader::CNodeType
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::_D3DXTYPE_TEMPLATE m_Template;
  D3DXShader::_D3DXCOMPONENT_TYPE m_ComponentType;
  unsigned int m_Rows;
  unsigned int m_Cols;
  unsigned int m_Usage;
};

/* 2086 */
struct D3DXShader::CNodeDecl
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::_D3DXDECL_TYPE m_DeclType;
  D3DXShader::CNode *m_pId;
  D3DXShader::CNode *m_pDecl;
  D3DXShader::CNode *m_pAnnotation;
  const char *m_pScopeName;
  unsigned int m_Index;
  int m_Error;
  int m_ForLoop;
};

/* 2087 */
struct D3DXShader::CPPToken
{
  D3DXShader::D3DXTOKEN m_Token;
  D3DXShader::CPPToken *m_pChild;
  D3DXShader::CPPToken *m_pNext;
};

/* 2088 */
struct D3DXShader::CNodeProgram
{
  D3DXShader::CNode baseclass_0;
  unsigned int m_Techniques;
  unsigned int m_Functions;
  unsigned int m_Variables;
  D3DXShader::CNode *m_pDecls;
};

/* 2089 */
struct D3DXShader::CNodeCBuffer
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::CNode *m_pId;
  D3DXShader::CNode *m_pAttributes;
  D3DXShader::CNode *m_pVariables;
};

/* 2090 */
struct __declspec(align(8)) D3DXShader::CParse
{
  unsigned int m_Flags;
  D3DXShader::CPreProcessor *m_pPreProcessor;
  D3DXShader::CNode *m_pStack;
  D3DXShader::CNode *m_pStackFree;
  D3DXShader::CNodeScope *m_pScope;
  D3DXShader::CNode *m_pUsageType;
  D3DXShader::CNodeFunction *m_pFunction;
  const char *m_pLastId;
  D3DXShader::D3DXTOKEN m_Token;
  int m_bFail;
  int m_bFatal;
  int m_bEffectKeywords;
  unsigned int m_NumDeclarations;
  unsigned int m_NumTechniques;
  unsigned int m_NumFunctions;
  unsigned int m_NumVariables;
  ID3DXBuffer *m_pAsm;
  _D3DXSHADER_COMPILE_PARAMETERSA *m_pCompileParameters;
};

/* 2091 */
struct _DXFILELOADMEMORY
{
  void *lpMemory;
  unsigned int dSize;
};

/* 2092 */
struct __s_GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 2093 */
struct IPersistStream
{
  IPersistStreamVtbl *lpVtbl;
};

/* 2094 */
struct IPersistStreamVtbl
{
  HRESULT (__cdecl *QueryInterface)(IPersistStream *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IPersistStream *);
  unsigned int (__cdecl *Release)(IPersistStream *);
  HRESULT (__cdecl *GetClassID)(IPersistStream *, _GUID *);
  HRESULT (__cdecl *IsDirty)(IPersistStream *);
  HRESULT (__cdecl *Load)(IPersistStream *, IStream *);
  HRESULT (__cdecl *Save)(IPersistStream *, IStream *, int);
  HRESULT (__cdecl *GetSizeMax)(IPersistStream *, _ULARGE_INTEGER *);
};

/* 2095 */
struct _D3DOCCLUSIONSTATS
{
  unsigned int ZPass;
  unsigned int ZFail;
  unsigned int StencilFail;
  unsigned int Total;
};

/* 2096 */
struct _XMUSHORTN4
{
  unsigned __int16 x;
  unsigned __int16 y;
  unsigned __int16 z;
  unsigned __int16 w;
};

/* 2097 */
struct _XMUSHORT2
{
  unsigned __int16 x;
  unsigned __int16 y;
};

/* 2098 */
struct $CC5C3905A9A95D8A07775E2461206A04
{
  float _11;
  float _12;
  float _13;
  float _21;
  float _22;
  float _23;
  float _31;
  float _32;
  float _33;
};

/* 2099 */
union $0A057B4003DEA800E355538D6FB02350
{
  $CC5C3905A9A95D8A07775E2461206A04 _s0;
  float m[3][3];
};

/* 2100 */
struct _XMFLOAT3X3
{
  $0A057B4003DEA800E355538D6FB02350 ___u0;
};

/* 2101 */
struct HSTR__
{
  int unused;
};

/* 2102 */
struct _ACL_REVISION_INFORMATION
{
  unsigned int AclRevision;
};

/* 2103 */
struct D3DXShader::ThreadLocalData::_CNode
{
  D3DXCore::CAlloc *m_pAlloc;
};

/* 2104 */
#pragma pack(push, 8)
struct D3DXShader::CArgument
{
  unsigned int m_dwFlags;
  unsigned int m_uPool;
  unsigned int m_uAddress;
  unsigned int m_uRegister;
  unsigned int m_uComponent;
  unsigned int m_uPredicate;
  int m_bPredicate;
  double m_fValue;
  double m_fValueMax;
  unsigned int m_uRemap;
  unsigned int m_uAlias;
  unsigned int m_uOrigin;
  unsigned int m_uModifier;
  unsigned int m_uPhase;
  unsigned int m_uLink;
  unsigned int m_uWrite;
  unsigned int m_uWriteMin;
  unsigned int m_uWriteLim;
  unsigned int m_uRead;
  unsigned int m_uReadMax;
  unsigned int m_uReadCount;
  D3DXShader::CNode *m_pVariable;
  unsigned int m_uVariableIndex;
  D3DXShader::CNode *m_pSemantic;
  unsigned int m_uSemantic;
  unsigned int m_uSemanticIndex;
  unsigned int m_uInstruction;
  D3DXShader::CArgument *m_pFree;
};
#pragma pack(pop)

/* 2105 */
struct D3DXShader::ThreadLocalData::_CArgument
{
  D3DXShader::CArgument *s_pFree;
  D3DXCore::CAlloc *s_pAlloc;
};

/* 2106 */
struct D3DXShader::CInstruction
{
  unsigned int m_Opcode;
  unsigned int m_uInputs;
  unsigned int *m_pInputs;
  unsigned int m_uOutputs;
  unsigned int *m_pOutputs;
  unsigned int m_uParents;
  unsigned int *m_pParents;
  unsigned int m_uChildren;
  unsigned int *m_pChildren;
  unsigned int m_uMark;
  unsigned int m_uMark2;
  unsigned int m_uPhase;
  unsigned int m_uRemap;
  unsigned int m_uBlock;
  unsigned int m_uNesting;
  D3DXShader::CNode *m_pExpression;
  unsigned int m_pInputsDefault[8];
  unsigned int m_pOutputsDefault[4];
  D3DXShader::CInstruction *m_pFree;
};

/* 2107 */
struct D3DXShader::ThreadLocalData::_CInstruction
{
  D3DXShader::CInstruction *s_pFree;
  D3DXCore::CAlloc *s_pAlloc;
};

/* 2108 */
struct D3DXShader::ThreadLocalData
{
  D3DXShader::ThreadLocalData::_CNode CNode;
  D3DXShader::ThreadLocalData::_CArgument CArgument;
  D3DXShader::ThreadLocalData::_CInstruction CInstruction;
  unsigned int m_NestingLevel;
};

/* 2109 */
struct D3DXShader::_D3DXCP_READ
{
  unsigned int iInst;
  unsigned int uPredicate;
  int bPredicate;
};

/* 2110 */
struct D3DXShader::_D3DXCP_DATA
{
  unsigned int uPool;
  unsigned int uSize;
  unsigned int *pSize;
  unsigned int *pCopy;
  unsigned int *pRemap;
  unsigned int *pSwizzle;
  unsigned int *pArguments;
  unsigned int *pRegisters;
  unsigned int *pLRU;
  unsigned int uLRU;
  unsigned int uRegisters;
  unsigned int uRegisterLim;
  unsigned int *pLinkCount;
  unsigned int *pLinkOffset;
  unsigned int *pLink;
  unsigned int *pExcludeCount;
  unsigned int *pExcludeOffset;
  unsigned int *pExclude;
  unsigned int uArguments;
  unsigned int *pReadCount;
  unsigned int *pReadOffset;
  unsigned int *pReadIndex;
  D3DXShader::_D3DXCP_READ *pRead;
  D3DXShader::CInstruction *pInst;
  int _bf96;
};

/* 2111 */
struct D3DXShader::CBaseProgram
{
  D3DXShader::CBaseProgramVtbl *vfptr;
  unsigned int m_uPools;
  unsigned int m_uArgs;
  unsigned int m_uInsts;
  D3DXShader::CPool **m_ppPools;
  D3DXShader::CArgument **m_ppArgs;
  D3DXShader::CInstruction **m_ppInsts;
  unsigned int m_uPoolsAlloc;
  unsigned int m_uArgsAlloc;
  unsigned int m_uInstsAlloc;
};

/* 2112 */
struct D3DXShader::CBaseProgramVtbl
{
  void *(__cdecl *__vecDelDtor)(D3DXShader::CBaseProgram *this, unsigned int);
};

/* 2113 */
struct D3DXShader::CPool
{
  const char *m_pName;
  unsigned int m_dwFlags;
  unsigned int m_uRegisterLim;
  unsigned int m_uComponentLim;
  unsigned int m_uRegister;
  unsigned int m_uComponent;
  unsigned int m_uRemap;
  unsigned int *m_pMap;
  unsigned int *m_pRWMap;
  unsigned int m_uWrite;
  unsigned int m_uRead;
  unsigned int m_uReadMax;
  unsigned int m_uReadCount;
};

/* 2114 */
struct D3DXShader::_D3DXPROGRAM_CAPS
{
  unsigned int InputRegs;
  unsigned int ResultRegs;
  unsigned int AddressRegs;
  unsigned int PredicateRegs;
  unsigned int ConstantRegs;
  unsigned int TextureRegs;
  unsigned int LoopRegs;
  unsigned int TotalInputs;
  unsigned int OutColRegs;
  unsigned int Samplers;
  unsigned int TexRemap;
  unsigned int StaticFlowControlDepth;
  unsigned int DynamicFlowControlDepth;
  unsigned int LoopCallFlowControlDepth;
  unsigned int BoolRegs;
  unsigned int CostLOG;
  unsigned int MaxLoop;
  __declspec(align(8)) int _bf72;
};

/* 2116 */
#pragma pack(push, 4)
struct D3DXShader::D3DX_SEMANTIC
{
  const char *SemanticName;
  unsigned __int16 ValidLevel;
  int _bf8;
  const char *DepricateName;
  unsigned int uType;
  unsigned int uMinIndex;
  unsigned int uMaxIndex;
  unsigned int uIndexOffset;
  unsigned int uMaxComponent;
};
#pragma pack(pop)

/* 2117 */
struct D3DXShader::_D3DXSP_DEBUG
{
  D3DXShader::D3DXTOKEN *pToken;
  unsigned int Offset;
  unsigned int uOutput[4];
};

/* 2118 */
struct D3DXShader::CRegisterEntryNode
{
  const char *m_szName;
  unsigned int m_iRegister;
  unsigned int m_cRegisters;
  int m_bDefaultValue;
  D3DXVECTOR4 m_vDefaultValue;
  D3DXShader::CRegisterEntryNode *m_pNext;
};

/* 2119 */
struct D3DXShader::CFragmentRegisterAllocator
{
  D3DXShader::CRegisterEntryNode *m_rgpEntries[7];
};

/* 2120 */
struct D3DXShader::CShaderProgram
{
  _BYTE gap0[228];
  unsigned int m_cSemanticTypeMask;
  unsigned int m_cSemanticIndexMask;
  unsigned int m_cSemanticIndexShift;
  D3DXShader::D3DX_SEMANTIC *m_pVSInputTable;
  D3DXShader::D3DX_SEMANTIC *m_pVSOutputTable;
  D3DXShader::D3DX_SEMANTIC *m_pPSOutputTable;
  unsigned int m_iInst;
  D3DXShader::CInstruction *m_pInst;
  D3DXShader::D3DXTOKEN *m_pToken;
  unsigned int m_dwOrigVersion;
  unsigned int *m_pdw;
  unsigned int m_cdw;
  unsigned int m_cdwLim;
  unsigned int m_cdwInst;
  unsigned int m_cdwValidated;
  unsigned int m_cdwComments;
  D3DXShader::_D3DXSP_DEBUG *m_pDebug;
  unsigned int m_cDebug;
  unsigned int m_cDebugLim;
  const char *m_pchSource;
  unsigned int m_cchSource;
  unsigned int m_uAddress;
  unsigned int m_uTemp[4];
  unsigned int m_uTempWriteLim;
  unsigned int m_uTempRegister;
  int m_bRelAddress;
  int m_bFragment;
  unsigned int m_uCompleteLevel;
  unsigned int m_uTwo;
  unsigned int m_uSpare[3];
  unsigned int m_uSparePool;
  unsigned int m_uPredicateStack[3];
  unsigned int m_uStackPlace;
  unsigned int m_uLoopLiteral;
  unsigned int m_uZeroReg;
  int m_bSinCos;
  unsigned int m_uSinCos[8];
  IDirect3DShaderValidator9 *m_pValidator;
  D3DXShader::CFragmentRegisterAllocator m_FragmentRegisters;
  unsigned int m_iNextFragmentRegister;
  D3DXShader::CFragmentRegisterAllocator m_FragmentInputs;
  unsigned int m_iNextFragmentInput;
  unsigned int m_cDefConstants;
};

/* 2121 */
struct D3DXShader::D3DX_MATCHENTRY
{
  unsigned int uTableId;
  unsigned int Opcode;
  unsigned int cArgs;
  unsigned int Arg[3];
  unsigned int uAlias;
  unsigned int uSwap;
};

/* 2122 */
struct D3DXShader::CFragmentInfo
{
  D3DXShader::CFragmentRegisterAllocator m_Constants;
  D3DXShader::CFragmentRegisterAllocator m_SemanticInputs;
  D3DXShader::CFragmentRegisterAllocator m_SemanticOutputs;
  D3DXShader::CFragmentRegisterAllocator m_RegisterInputs;
  D3DXShader::CFragmentRegisterAllocator m_Samplers;
  unsigned int m_rgiNextConstant[4];
  unsigned int m_iNextInput;
  unsigned int m_iNextOutput;
  unsigned int m_iNextRegister;
  unsigned int m_iNextSampler;
  unsigned int m_cConstantRegisters;
  int m_bAllowOutputSemantics;
  int m_Version;
};

/* 2123 */
struct D3DXShader::CFragmentConstants
{
  D3DXShader::CParse *m_pParse;
  D3DXShader::CNodeScope *m_pScope;
};

/* 2124 */
struct D3DXShader::CAssembler
{
  D3DXShader::CTErrors *m_pErrors;
  D3DXShader::CPreProcessor *m_pPreProcessor;
  IDirect3DShaderValidator9 *m_pValidator;
  __declspec(align(8)) D3DXShader::D3DXTOKEN m_Token;
  D3DXShader::D3DXTOKEN *m_pTokenValidate;
  D3DXShader::CNode *m_pStack;
  int m_Version;
  unsigned int m_Flags;
  unsigned int m_Opcode;
  unsigned int m_ShiftSat;
  unsigned int m_UsageIndex;
  int m_bFail;
  int m_bFatal;
  unsigned int m_Error;
  unsigned int *m_pdw;
  unsigned int m_cdw;
  unsigned int m_cdwLim;
  unsigned int m_cdwValidated;
  unsigned int m_cdwComments;
  const char *m_pchSource;
  unsigned int m_cchSource;
  const char *m_pName;
  D3DXShader::CFragmentInfo *m_pFragmentInfo;
  D3DXShader::CFragmentConstants *m_pFragmentConstants;
};

/* 2125 */
struct D3DXShader::CTransform
{
  D3DXShader::CTransformVtbl *vfptr;
  #2115 *m_pProgram;
};

/* 2126 */
struct D3DXShader::CTransformVtbl
{
  void *(__cdecl *__vecDelDtor)(D3DXShader::CTransform *this, unsigned int);
  HRESULT (__cdecl *Apply)(D3DXShader::CTransform *this);
};

/* 2127 */
struct D3DXShader::CTReorderInstructions
{
  D3DXShader::CTransform baseclass_0;
  unsigned int *m_pInputsCount;
  unsigned int *m_pInputsOffset;
  unsigned int *m_pInputs;
  unsigned int *m_pInputsA;
  unsigned int *m_pInputsB;
  unsigned int *m_pOutputsCount;
  unsigned int *m_pOutputsOffset;
  unsigned int *m_pOutputs;
  int *m_pBouyancy;
  unsigned int *m_pLoad;
  unsigned int *m_pPriority;
  int *m_pFlowControl;
  unsigned int m_uInsts;
  unsigned int *m_pInsts;
  unsigned int *m_pInstsOld;
  D3DXShader::CInstruction **m_ppInsts;
  unsigned int m_uMark;
  unsigned int m_uMaxLoad;
  unsigned int m_uTotalLoad;
};

/* 2128 */
struct D3DXShader::CVSProgram
{
  D3DXShader::CShaderProgram baseclass_0;
};

/* 2129 */
struct D3DXShader::CFXLProgram
{
  D3DXShader::CShaderProgram baseclass_0;
  unsigned int m_uSemantic;
};

/* 2130 */
struct D3DXShader::C30Program
{
  D3DXShader::CShaderProgram baseclass_0;
};

/* 2131 */
struct $F920718CF14E7F43F0F3D8B8AAC16EC5
{
  unsigned int Index;
  unsigned int Semantic;
};

/* 2132 */
struct D3DXShader::C30SWProgram
{
  D3DXShader::C30Program baseclass_0;
  char m_FunctionName[1024];
  char *m_pSWCode;
  unsigned int m_cSWCodeSize;
  unsigned int m_cSWCodeLim;
  unsigned int m_Scope;
  $F920718CF14E7F43F0F3D8B8AAC16EC5 m_InputElement[16];
  unsigned int m_InputElementCount;
  D3DXShader::BranchType m_BranchStack[32];
  unsigned int m_BranchStackIndex;
  unsigned int m_BranchDepth;
  unsigned int m_ThreadCount;
  unsigned int m_MaskSrc;
};

/* 2133 */
struct D3DXShader::C30SWProgramML
{
  D3DXShader::C30SWProgram baseclass_0;
};

/* 2134 */
struct D3DXShader::CPSLegacyProgram
{
  D3DXShader::CShaderProgram baseclass_0;
  unsigned int m_TexMax[8];
  unsigned int m_InMax[2];
  unsigned int m_cPhase1;
  unsigned int m_cPhase2;
  unsigned int m_cTokens;
  D3DXShader::CInstruction **m_ppPhase1;
  D3DXShader::CInstruction **m_ppPhase2;
  D3DXShader::CNodeToken *m_pTokens[32];
  D3DXShader::CInstruction **m_ppOldInsts;
  D3DXShader::CArgument **m_ppOldArgs;
  unsigned int m_uOldArgs;
  unsigned int m_uOldInsts;
  D3DXShader::CInstruction *m_pTempMovs[16];
  unsigned int m_pTempArgs[64];
  unsigned int m_cTempMovs;
  unsigned int m_cTempArgs;
  unsigned int m_SamplerPools[6];
  unsigned int m_SamplerArgs[6];
  unsigned int m_uSpecialPool;
  unsigned int m_uZero;
  unsigned int m_uOne;
  int m_bGlobFail;
  int m_bUsedCND;
  unsigned int m_uComboInst[12];
  unsigned int m_uComboCount;
};

/* 2135 */
struct D3DXShader::C30SWProgramCI
{
  D3DXShader::C30SWProgram baseclass_0;
};

/* 2136 */
struct D3DXShader::CPSProgram
{
  D3DXShader::CShaderProgram baseclass_0;
  unsigned int m_TexMax[8];
  unsigned int m_InMax[2];
  unsigned int m_uZero;
  unsigned int m_uOne;
  int m_bGlobFail;
};

/* 2137 */
struct _XGUCODE_PASS_DESCRIPTION
{
  GPU_PROGRAMCONTROL ProgramControl;
  GPU_CONTEXTMISC ContextMisc;
};

/* 2138 */
#pragma pack(push, 4)
struct _XGCPUSHADERVERTEXSTREAM
{
  unsigned int BaseAddress;
  unsigned __int16 VertexStride;
};
#pragma pack(pop)

/* 2139 */
#pragma pack(push, 8)
struct _XGCPUSHADERCONTEXT
{
  __vector4 v[16][14];
  __vector4 o[16][14];
  __vector4 r[32][14];
  __vector4 c[256];
  __vector4 p[14];
  __vector4 xBranchMask;
  __vector4 xBreakMask;
  __vector4 xUR0;
  __vector4 xUR1;
  __vector4 xUR2;
  __vector4 xUR3;
  __vector4 xSR0[14];
  __vector4 xSR1[14];
  __vector4 xSR2[14];
  __vector4 xSR3[14];
  __vector4 xCR0;
  __vector4 xCR1;
  __vector4 xBranchMaskStack[32];
  int i[32][4];
  __int16 a[14][4];
  int xLoopCounterStack[32];
  int xLoopRepeatStack[32];
  unsigned int xBranchMaskStackIndex;
  unsigned int xLoopCounterStackIndex;
  unsigned int xLoopRepeatStackIndex;
  int l;
  int xLoopRepeat;
  unsigned int xCondition;
  unsigned __int64 b;
  unsigned int VertexCount;
  unsigned int PrefetchCount;
  int InvalidateCache;
  _XGCPUSHADERVERTEXSTREAM PrefetchStream[8];
  _XGCPUSHADERVERTEXSTREAM InputStream[16][14];
  _XGCPUSHADERVERTEXSTREAM OutputStream[16][14];
};
#pragma pack(pop)

/* 2140 */
struct _XGMIPTAIL_DESC
{
  _D3DRESOURCETYPE ResourceType;
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  _D3DFORMAT Format;
  unsigned int RowPitch;
  unsigned int SlicePitch;
  unsigned int BitsPerPixel;
  unsigned int WidthInBlocks;
  unsigned int HeightInBlocks;
  unsigned int DepthInBlocks;
  unsigned int BytesPerBlock;
  int ExpBias;
  unsigned int Flags;
  unsigned int BaseLevel;
  unsigned int Size;
};

/* 2141 */
struct XGCpuShaderDevice
{
  _XGCPUSHADERCONTEXT ShaderContext;
};

/* 2142 */
struct XGCpuVertexShader
{
  void (__cdecl **pShaderFunction)(_XGCPUSHADERCONTEXT *);
};

/* 2143 */
struct _XGUCODE_DESCRIPTION
{
  int IsPixelShader;
  unsigned int PassCount;
  _XGUCODE_PASS_DESCRIPTION Pass[2];
};

/* 2144 */
struct _XGMICROCODESHADERPARTS
{
  void *pCachedPart;
  unsigned int cbCachedPartSize;
  void *pPhysicalPart;
  unsigned int cbPhysicalPartSize;
};

/* 2145 */
struct _XGSHADER_FETCHCONSTANT_MASKS
{
  unsigned int u32TextureFetchConstants;
  unsigned int u32VertexFetchConstants[3];
};

/* 2146 */
struct _XGLAYOUT_REGION
{
  unsigned int StartOffset;
  unsigned int EndOffset;
};

/* 2147 */
struct _XGIDEALSHADERCOST
{
  float MinAlu;
  float MaxAlu;
  float Interpolator;
  float MinTexture;
  float MaxTexture;
  float MinVertex;
  float MaxVertex;
  float Sequencer;
  float MinOverall;
  float MaxOverall;
  int bHasHitUnknownControlFlow;
  int bHasHitChangeableControlFlow;
  int bHasHitPredicatedJump;
  int bHasHitPredicatedEndloop;
  int bHasHitUnknownFetchConstant;
  int bHasHitUnpatchedVfetch;
  int MaxTempReg;
};

/* 2148 */
struct _XGPOINT3D
{
  int x;
  int y;
  int z;
};

/* 2149 */
struct _XGPTC_COMPRESSION_PARAMS
{
  int Qs;
  int Qa;
  int ColorSpace;
  int OneBitAlpha;
  int Ec;
  int Eca;
  int ChunkWidth;
  int Bd;
  int Npp;
  const char *pMeta;
  const char *pFrameMeta;
};

/* 2150 */
struct _XGSHADER_CONSTANT_MASKS
{
  unsigned __int64 u64BitAluConstants;
  unsigned __int64 u64BitFlowConstants;
};

/* 2151 */
struct D3DXShader::_D3DXRANGE
{
  double fMin;
  double fMax;
};

/* 2152 */
#pragma pack(push, 8)
struct D3DXShader::CCompiler
{
  D3DXShader::CPreProcessor *m_pPreProcessor;
  D3DXShader::CNode *m_pNode;
  #2115 *m_pProgram;
  const char *m_pTarget;
  unsigned int m_Version;
  unsigned int m_Flags;
  unsigned int *m_pRemap;
  unsigned int *m_pIntrinsic;
  unsigned int m_uOne;
  unsigned int m_uZero;
  unsigned int m_uMinusOne;
  unsigned int m_uCondition;
  unsigned int m_uPredicate;
  unsigned int m_bPredicate;
  unsigned int m_uNesting;
  unsigned int m_uStaticIfs;
  unsigned int m_uDynamicIfs;
  unsigned int m_uLoops;
  unsigned int m_uPoolComponent;
  int m_bFail;
  int m_bReturn;
  int m_bDiscard;
  int m_bSilent;
  int m_bOutOfBounds;
  int m_bTryUnrolled;
  int m_dwDefaultType;
  int m_bDoNotResolve;
  unsigned int m_uAddressMin;
  unsigned int m_uAddressLim;
  unsigned int m_uInputs;
  unsigned int m_uOutputs;
  unsigned int m_uConstants;
  unsigned int m_uObjects;
  unsigned int m_uUserPool;
  int m_bFragment;
  unsigned int *m_pStack;
  unsigned int m_uStack;
  unsigned int *m_pScratch;
  unsigned int m_uScratch;
  unsigned int *m_pCasts;
  unsigned int m_uCasts;
  double m_fInf;
  double m_fMinusInf;
  double m_fEpsilon;
};
#pragma pack(pop)

/* 2153 */
struct _XGTEXTURE_DESC
{
  _D3DRESOURCETYPE ResourceType;
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  _D3DFORMAT Format;
  unsigned int RowPitch;
  unsigned int SlicePitch;
  unsigned int BitsPerPixel;
  unsigned int WidthInBlocks;
  unsigned int HeightInBlocks;
  unsigned int DepthInBlocks;
  unsigned int BytesPerBlock;
  int ExpBias;
  unsigned int Flags;
  _D3DMULTISAMPLE_TYPE MultiSampleType;
};

/* 2154 */
struct D3DXShader::CNodeAsmRegister
{
  D3DXShader::CNode baseclass_0;
  unsigned int m_Register;
  unsigned int m_Bias;
  unsigned int m_Index;
  int m_Scalar;
  unsigned int m_Mask;
  unsigned int m_Swizzle;
  D3DXShader::CNode *m_pRelative;
};

/* 2155 */
struct __declspec(align(8)) D3DXShader::CNodeAsmInstruction
{
  D3DXShader::CNode baseclass_0;
  D3DXShader::D3DXTOKEN m_Token;
  unsigned int m_Opcode;
  unsigned int m_ShiftSat;
  unsigned int m_UsageIndex;
  D3DXShader::CNode *m_pDst;
  D3DXShader::CNode *m_pPred;
  D3DXShader::CNode *m_pSrc[4];
  int m_Coissue;
  unsigned int m_Offset;
};

/* 2156 */
struct D3DXCore::SPRITE_VERTEX
{
  D3DXVECTOR3 m_Pos;
  unsigned int m_Color;
  D3DXVECTOR2 m_Tex;
};

/* 2157 */
#pragma pack(push, 4)
struct D3DXCore::CLine
{
  ID3DXLine baseclass_0;
  unsigned int m_uRef;
  D3DDevice *m_pDevice;
  void *m_Mutex;
  D3DTexture *m_pTexture;
  unsigned int m_dwTexturePattern;
  bool m_bTextureAA;
  float m_fTextureWidth;
  D3DIndexBuffer *m_pOldIndexBuffer;
  D3DStateBlock *m_pState;
  D3DStateBlock *m_pDrawState;
  D3DVertexBuffer *m_pVertexBuffer;
  unsigned int m_dwVertexBufferSize;
  D3DIndexBuffer *m_pIndexBuffer;
  unsigned int m_dwIndexBufferSize;
  bool m_bBegin;
  int m_bUseTLVerts;
  int m_bCapsAlphaBlend;
  int m_bCapsLineAntialias;
  unsigned int m_dwPattern;
  float m_fPatternScale;
  float m_fDistFactor;
  float m_fWidth;
  bool m_bAlphaBlend;
  bool m_bAA;
  bool m_bGLLines;
  bool m_bDrawHW;
};
#pragma pack(pop)

/* 2158 */
struct __declspec(align(16)) D3DXCore::CSprite
{
  ID3DXSprite baseclass_0;
  unsigned int m_uRef;
  Direct3D *m_pD3D;
  D3DDevice *m_pDevice;
  D3DVertexDeclaration *m_pDecl;
  D3DIndexBuffer *m_pIB;
  D3DVertexBuffer *m_pVB;
  unsigned int m_iIB;
  unsigned int m_iVB;
  D3DStateBlock *m_pOldState;
  D3DStateBlock *m_pNewState;
  D3DStateBlock *m_pOldBlendState;
  D3DStateBlock *m_pNewBlendState;
  D3DStateBlock *m_pOldMatrixState;
  D3DStateBlock *m_pNewMatrixState;
  D3DIndexBuffer *m_pOldIndexBuffer;
  void *m_Mutex;
  _D3DDEVTYPE m_DeviceType;
  unsigned int m_uAdapterOrdinal;
  unsigned int m_Pool;
  unsigned int m_dwMagFilter;
  unsigned int m_dwMinFilter;
  unsigned int m_dwMipFilter;
  unsigned int m_dwMaxAnisotropy;
  int m_bAlphaCmp;
  int m_bAlphaBlend;
  int m_bIdentity;
  int m_bBillboard;
  _D3DXMATRIXA16 *m_pTransform;
  __declspec(align(16)) _D3DXMATRIXA16 *m_pWorldView;
  __declspec(align(16)) _D3DXMATRIXA16 *m_pBillboard;
  D3DXVECTOR3 m_ViewDirection;
  D3DXVECTOR3 m_Scale;
  int m_bBegin;
  unsigned int m_dwFlags;
  unsigned int *m_pFaceIndex;
  D3DTexture **m_pFaceTexture;
  float *m_pFaceDepth;
  D3DXCore::SPRITE_VERTEX *m_pVertices;
  unsigned int m_cFaces;
  unsigned int m_cFacesAlloc;
  unsigned int m_cFacesTransformed;
  int m_cTextureChanges;
  D3DTexture *m_pTexture;
  unsigned int m_uWidth;
  unsigned int m_uHeight;
  float m_fWidthInv;
  float m_fHeightInv;
};

/* 2159 */
#pragma pack(push, 4)
struct XGRAPHICS::InstructionUsage
{
  unsigned int InstCount;
  char Usage[1];
};
#pragma pack(pop)

/* 2160 */
struct $E5DC0BCF8C2CE7F614A700D155DA9F3E
{
  _UCODE_PSINPUTDECLARATION *pPSInputDecl;
};

/* 2161 */
struct $730B0BF32CA172743919AFA492ECC98B
{
  _UCODE_VSINDEXDECLARATION *pVSIndexDecl;
  _UCODE_VSINPUTDECLARATION *pVSInputDecl;
  _UCODE_VSOUTPUTDECLARATION *pVSOutputDecl;
};

/* 2162 */
union $4E0F1B5AA9C04F19D21CDAC7F781C096
{
  _UCODE_R500VSUCODE *pR500VSUCode;
  _UCODE_R500PSUCODE *pR500PSUCode;
};

/* 2163 */
union $2BA5BC5E5321C74AE68657C7969D4B4F
{
  $E5DC0BCF8C2CE7F614A700D155DA9F3E PS;
  $730B0BF32CA172743919AFA492ECC98B VS;
};

/* 2164 */
#pragma pack(push, 2)
struct XGRAPHICS::R500Stuff
{
  $4E0F1B5AA9C04F19D21CDAC7F781C096 ___u0;
  GPUFLOW_INSTRUCTION *pu;
  _UCODE_DEFINITION_TABLE *pDefs;
  const float *pCConsts;
  const char *pIConsts;
  const unsigned int *pBConsts;
  GPUFETCH_CONSTANT *pFetchConsts;
  $2BA5BC5E5321C74AE68657C7969D4B4F VS;
  _UCODE_INTERPOLATOR_HEADER InterpHeader;
  unsigned int MaxReg;
  unsigned int size;
  bool bIsPixelShader;
  bool bIgnoreUnpatchedVfetches;
  bool bIsAutoZ;
  _UCODE_CONSTANT_TABLE *pConstTable;
  XGRAPHICS::InstructionUsage *pUsage;
  GPU_PROGRAMCONTROL ProgramControl;
  GPU_CONTEXTMISC ContextMisc;
  unsigned int Version;
  const void *pFunction;
};
#pragma pack(pop)

/* 2165 */
struct XGRAPHICS::VerNode
{
  int _bf0;
  $57539729F76DFC9319178704BBDE374E ___u1;
  $EA4CD64E47BCAC565A1BDB4A5CA2F478 ___u2;
  double mfRangeMin;
  double mfRangeMax;
};

/* 2166 */
struct XGRAPHICS::VerTable
{
  XGRAPHICS::VerNode *mpNodes;
  int mNodeCount;
  int mRefCount;
};

/* 2167 */
#pragma pack(push, 4)
struct XGRAPHICS::VerOp
{
  char mRefCount;
  int _bf4;
  XGRAPHICS::VerNode *mpParams;
  XGRAPHICS::VerOpList *mpSame;
};
#pragma pack(pop)

/* 2168 */
struct XGRAPHICS::VerOpList
{
  XGRAPHICS::VerOp *mpData;
  XGRAPHICS::VerOpList *mpNext;
};

/* 2169 */
union $57539729F76DFC9319178704BBDE374E
{
  unsigned int mReg;
  XGRAPHICS::VerTable *mpTable;
};

/* 2170 */
struct $74972E863199C6498782E6D617D4A189
{
  XGRAPHICS::VerOp *mpOp;
  XGRAPHICS::VerNode *mpArl;
};

/* 2171 */
union $EA4CD64E47BCAC565A1BDB4A5CA2F478
{
  $74972E863199C6498782E6D617D4A189 _s0;
  const char *mpName;
  double mfVal;
};

/* 2172 */
struct $06E54D9387743C31AF798BF59E36F663
{
  unsigned __int16 bIsLoop;
  unsigned __int16 unused;
  XGRAPHICS::VerNode *BreakCondition;
  int InstructionIndex;
  int IndexReg;
};

/* 2173 */
struct $BC2131C1FB3EF148583A76C336E9FD1E
{
  unsigned __int16 bIsLoop;
  unsigned __int16 bConditionIsTrue;
  XGRAPHICS::VerNode *Condition;
  int InstructionIndex;
  int GoodTrueOrFalse;
};

/* 2174 */
union $93F473682A27384EDFE44FA6BF5B5640
{
  unsigned __int16 bIsLoop;
  $06E54D9387743C31AF798BF59E36F663 Lp;
  $BC2131C1FB3EF148583A76C336E9FD1E Cond;
};

/* 2175 */
#pragma pack(push, 4)
struct XGRAPHICS::VerTableBuilder
{
  XGRAPHICS::VerTable *mpt;
  $93F473682A27384EDFE44FA6BF5B5640 mCFStack[52];
  int mStackIndex;
  bool mbIsInLoop;
};
#pragma pack(pop)

/* 2176 */
#pragma pack(push, 8)
struct XGRAPHICS::R500VerTableBuilder
{
  XGRAPHICS::VerTableBuilder baseclass_0;
  float *mCConsts;
  int *mIConsts;
  unsigned int *mBConsts;
  unsigned int *mSConsts;
  char *mCArrayBase;
  char *mIArrayBase;
  char *mBArrayBase;
  char *mSArrayBase;
  unsigned __int64 mbCConstHasVal[4];
  unsigned __int64 mbIConstHasVal[1];
  unsigned __int64 mbBConstHasVal[4];
  char mSamplerType[32];
  bool mbIsPixelShader;
  _UCODE_VSINPUTDECLARATION *mpVSInputDecl;
  _UCODE_VSOUTPUTDECLARATION *mpVSOutputDecl;
  XGRAPHICS::R500Stuff *mpR500Stuff;
  unsigned __int64 mRegTFHasFetched;
  unsigned __int64 mRegVFHasFetched;
  unsigned __int64 mRegTfetchSource;
  unsigned __int64 mRegVfetchSource;
  int LoopLevel;
  int CallLevel;
  int LoopStack[5];
  int CallBaseStack[5];
  int CallDestStack[5];
};
#pragma pack(pop)

/* 2177 */
struct XGRAPHICS::OutStream
{
  HRESULT (__cdecl *m_pCallback)(void *, const char *, unsigned int);
  void *m_pCallbackContext;
  HRESULT m_hr;
  int m_bRTF;
  int m_bLastOutputWasRTFCommand;
};

/* 2178 */
struct XGRAPHICS::VerTableBuilder::PATCHLOOPU2STRUCT
{
  XGRAPHICS::VerNode *BreakCondition;
  XGRAPHICS::VerTableBuilder *table;
  int ii;
  int ir;
  int startval;
};

/* 2179 */
struct XGRAPHICS::VerConstTableList
{
  XGRAPHICS::VerTable *mpData;
  XGRAPHICS::VerConstTableList *mpNext;
};

/* 2180 */
struct XGRAPHICS::ms
{
  $A70717FFDE4887FB98200608A0E9CC40 ___u0;
};

/* 2181 */
union $8B597BF3C08CD2955C8BA13F58562555
{
  unsigned __int64 ui64[128];
  __int64 i64[128];
  int i[256];
  unsigned int u[256];
  void *p[256];
  unsigned __int16 w[512];
  __int16 s[512];
  char b[1024];
  char c[1024];
};

/* 2182 */
struct $529DEE5685066E1DBF880B9660C5502A
{
  XGRAPHICS::ms *mpPrev;
  XGRAPHICS::ms *mpNext;
  void *mpAllocLoc;
  unsigned int ID;
  unsigned __int64 SizeFree[8];
  unsigned __int64 Used[64];
};

/* 2183 */
union $A70717FFDE4887FB98200608A0E9CC40
{
  $529DEE5685066E1DBF880B9660C5502A _s0;
  $8B597BF3C08CD2955C8BA13F58562555 mData[63];
};

/* 2184 */
#pragma pack(push, 8)
struct XGRAPHICS::DXTokenVerTableBuilder
{
  XGRAPHICS::VerTableBuilder baseclass_0;
  float *mCConsts;
  int *mIConsts;
  unsigned int *mBConsts;
  unsigned int *mSConsts;
  char *mCArrayBase;
  char *mIArrayBase;
  char *mBArrayBase;
  char *mSArrayBase;
  unsigned __int64 mbCConstHasVal[4];
  unsigned __int64 mbIConstHasVal[1];
  unsigned __int64 mbBConstHasVal[4];
  char mSamplerType[32];
  bool mbIsPixelShader;
};
#pragma pack(pop)

/* 2185 */
struct XGRAPHICS::CArena
{
  void *m_Root;
  void *m_Current;
  unsigned int m_Space;
};

/* 2186 */
struct XGRAPHICS::FlowNode
{
  XGRAPHICS::FlowNode *m_Next;
  GPUFLOW_INSTRUCTION instruction;
  XGRAPHICS::FlowNode *m_Destination;
  XGRAPHICS::ALUNode *m_Child;
  int _bf20;
};

/* 2187 */
struct XGRAPHICS::ALUNode
{
  XGRAPHICS::ALUNode *m_Next;
  GPUSHADER_INSTRUCTION instruction;
  int _bf16;
};

/* 2188 */
struct XGRAPHICS::GraphMicrocodeBuilder
{
  XGRAPHICS::CArena m_Arena;
  XGRAPHICS::FlowNode *m_pShader;
  XGRAPHICS::FlowNode *m_pShaderEnd;
};

/* 2189 */
struct XGRAPHICS::FastVectorBase
{
  char dummy[1];
};

/* 2190 */
struct XGRAPHICS::_AS_ICONST
{
  char count;
  char start;
  char step;
  char reserved;
};

/* 2191 */
struct XGRAPHICS::_SSM_REGISTRY
{
  void *hClientDevHandle;
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  unsigned int Params[12];
};

/* 2192 */
struct XGRAPHICS::_SSM_VIDMEM
{
  unsigned int uptrLinearAddr;
  unsigned int uptrLinAddrAligned;
  unsigned int u32Offset;
  unsigned int u32OffsetAligned;
  void *hSurface;
};

/* 2193 */
struct XGRAPHICS::_LCC_INFO
{
  unsigned int constID;
  unsigned int constDWStart;
  unsigned int constDWCount;
  XGRAPHICS::_SSM_VIDMEM constVidMem;
};

/* 2194 */
struct XGRAPHICS::__AS_ARRAY_STATE_MAP_ENTRY
{
  unsigned int uBaseIndex;
  unsigned int uStride;
  unsigned int uMaxCount;
};

/* 2195 */
struct $54EFCC50AAD43EA9AF18F67ACEC01CFC
{
  int _bf0;
};

/* 2196 */
union XGRAPHICS::IL_SecondaryTEXLD_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2197 */
union XGRAPHICS::IL_Comment_Descriptor
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2198 */
struct XGRAPHICS::SSM_DEBUGENTRY
{
  XGRAPHICS::_E_SSM_DEBUGLEVEL eLevel;
  char *String;
  XGRAPHICS::E_SSM_DEBUG_DEST dwEnable;
};

/* 2199 */
union XGRAPHICS::IL_DCLVOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2200 */
struct XGRAPHICS::_MEM_NODE
{
  XGRAPHICS::_MEM_NODE *Next;
};

/* 2201 */
struct XGRAPHICS::_MEM_HEAD
{
  void *(__cdecl *ClientAlloc)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *ClientFree)(void *, void *);
  void *ClientAllocContext;
  XGRAPHICS::_MEM_NODE *FreeList;
  unsigned int ChunkSize;
  unsigned int NumberOfObjectsPerPool;
  unsigned int CurrentNumberOfAvailableNodes;
  XGRAPHICS::_MEM_HEAD *NextHead;
};

/* 2202 */
struct XGRAPHICS::_LIST_PRIM_ITEM
{
  XGRAPHICS::_MEM_HEAD *pMemoryMgr;
  XGRAPHICS::_LIST_PRIM_ITEM *pPrev;
  XGRAPHICS::_LIST_PRIM_ITEM *pNext;
};

/* 2203 */
struct XGRAPHICS::_KEY_LIST_ITEM
{
  XGRAPHICS::_LIST_PRIM_ITEM listPrimItem;
  unsigned int key;
  void *data;
};

/* 2204 */
struct XGRAPHICS::_KEY_LIST
{
  XGRAPHICS::_MEM_HEAD *pMemoryMgr;
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_KEY_LIST_ITEM *pSentinel;
  unsigned int size;
  XGRAPHICS::_KEY_LIST_ITEM *pLastSearchedItem;
  unsigned int bPreCreated;
};

/* 2205 */
struct XGRAPHICS::_ORDERED_LIST_FACTORY
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  unsigned int numAcquiredLists;
  XGRAPHICS::_MEM_HEAD *pListMemMgr;
  XGRAPHICS::_MEM_HEAD *pItemMemMgr;
};

/* 2206 */
struct XGRAPHICS::_HASH_TABLE
{
  XGRAPHICS::_KEY_LIST **pHashTable;
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_ORDERED_LIST_FACTORY *pOListFactory;
  unsigned int size;
};

/* 2207 */
union XGRAPHICS::IL_Dst
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2208 */
struct XGRAPHICS::__AS_STATE_MAP_ENTRY
{
  unsigned int uBlockNum;
  unsigned int uOffsetInDW;
};

/* 2209 */
struct XGRAPHICS::__AS_STATE_MAP_INFO
{
  unsigned int uNumStates;
  unsigned int uNumArrayStates;
  unsigned int uNumStateBlks;
  XGRAPHICS::__AS_STATE_MAP_ENTRY *pStateMap;
  XGRAPHICS::__AS_ARRAY_STATE_MAP_ENTRY *pArrayStateMap;
  const unsigned int *pBlockSize;
};

/* 2210 */
union XGRAPHICS::__AS_STATEVALUE
{
  unsigned int uValue;
  float fValue;
};

/* 2211 */
struct XGRAPHICS::_ID_GENERATOR
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  unsigned int minValue;
  unsigned int maxValue;
  unsigned int *idStack;
  unsigned int stackSize;
  unsigned int topOfStack;
};

/* 2212 */
struct XGRAPHICS::_READONLY_LIST
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_KEY_LIST_ITEM *pHead;
  XGRAPHICS::_KEY_LIST_ITEM *pTail;
  unsigned int size;
  XGRAPHICS::_KEY_LIST_ITEM *pLastSearchedItem;
  unsigned int numLastSearchedItem;
};

/* 2213 */
struct XGRAPHICS::_TERNARY_TREE_STATS
{
  unsigned int TreeSize;
  unsigned int TreeHeight;
  unsigned int NumNodes;
  unsigned int NumInputChars;
  unsigned int NumStrings;
  unsigned int NumStringsRemoved;
  unsigned int StrFound_NumSearches;
  unsigned int StrFound_TotalNodesSearched;
  unsigned int StrFound_LongestDepthSearched;
  unsigned int StrFound_AvgNumNodesSearched;
  unsigned int StrNotFound_NumSearches;
  unsigned int StrNotFound_TotalNodesSearched;
  unsigned int StrNotFound_LongestDepthSearched;
  unsigned int StrNotFound_AvgNumNodesSearched;
};

/* 2214 */
const struct XGRAPHICS::__HW_STATE_MAP_ENTRY
{
  unsigned int uBlockNum;
  unsigned int uOffsetInDW;
  unsigned int uStateMask;
  unsigned int uStateShift;
};

/* 2215 */
struct XGRAPHICS::__HW_STATE_MAP_INFO
{
  unsigned int uNumStates;
  unsigned int uNumStateBlks;
  XGRAPHICS::__HW_STATE_MAP_ENTRY *pStateMap;
  const unsigned int *pBlockSize;
};

/* 2216 */
union XGRAPHICS::IL_DCLDEFOpCode
{
  $38DAE03C5F32738BE3C3EF16C20C38D7 bits;
  $38DAE03C5F32738BE3C3EF16C20C38D7 bitfield;
  unsigned int u32All;
};

/* 2217 */
struct XGRAPHICS::_TERNARY_NODE
{
  unsigned int value;
  XGRAPHICS::_TERNARY_NODE *pLoChild;
  XGRAPHICS::_TERNARY_NODE *pHiChild;
  XGRAPHICS::_TERNARY_NODE *pEqChild;
  XGRAPHICS::_TERNARY_NODE *pParent;
};

/* 2218 */
struct XGRAPHICS::_TERNARY_SEARCH_TREE
{
  XGRAPHICS::_TERNARY_NODE *pTernaryTree;
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_MEM_HEAD *pMemoryMgr;
  unsigned int ulNumNodes;
  unsigned int ulTreeHeight;
};

/* 2219 */
struct XGRAPHICS::_AS_CONST_INFO
{
  unsigned int uNumCnst[6];
  unsigned int uDBCnstGrnl[6];
  unsigned int nCnstDtBits[6];
};

/* 2220 */
union XGRAPHICS::IL_PrimaryTEXLD_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2221 */
struct XGRAPHICS::_SSM_SSMDEVICE2CLIENT_INTERFACE
{
  unsigned int u32ChipFamily;
  unsigned int u32ChipRevision;
  unsigned int u32Flags;
  XGRAPHICS::_E_SSM_CLIENTTYPE eClientType;
  void *hClientDeviceHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *AllocateVidMem)(void *, unsigned int, XGRAPHICS::_E_SSM_VIDMEMHEAP, XGRAPHICS::_SSM_VIDMEM *);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeVidMem)(void *, XGRAPHICS::_SSM_VIDMEM *);
  unsigned int (__cdecl *QueryRegistryValue)(void *, char *, unsigned int *);
  void (__cdecl *OutputDebugString)(void *, char *, char *, char *);
  void (__cdecl *DebugPrintToFile)(void *, char *, char *, char *);
  void *(__cdecl *OpenFile)(void *, char *, unsigned int);
  unsigned int (__cdecl *CloseFile)(void *, void *);
  unsigned int (__cdecl *WriteFile)(void *, void *, char *, unsigned int, unsigned int *);
  unsigned int (__cdecl *ReadFile)(void *, void *, char *, unsigned int, unsigned int *);
  void (__cdecl *Assert)(void *);
  void (__cdecl *ErrorMessage)(void *, unsigned int, unsigned int, char *);
};

/* 2222 */
union XGRAPHICS::IL_NOISEOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2223 */
struct XGRAPHICS::_CP_RENDERSTATE_BLOCK
{
  unsigned int dwDataSizeInDwords;
  unsigned int dwDataSizeInBlocks;
  unsigned int Data[38];
};

/* 2224 */
union XGRAPHICS::IL_REFLECTOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2225 */
union XGRAPHICS::IL_TEXLDMSOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2226 */
union XGRAPHICS::IL_OpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2227 */
struct XGRAPHICS::_INTEGER_LIST_FACTORY
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  unsigned int numAcquiredLists;
  XGRAPHICS::_MEM_HEAD *pListMemMgr;
  XGRAPHICS::_MEM_HEAD *pItemMemMgr;
};

/* 2228 */
struct XGRAPHICS::_TS_TXCREATE_INFO
{
  unsigned int TileEnable;
  unsigned int PitchScaleShft;
  unsigned int WidthAlign;
  unsigned int HeightAlign;
  unsigned int OffsetAlign;
  unsigned int FogTxSize;
  unsigned int PointAATxSize;
  unsigned int LineAATxSize;
};

/* 2229 */
struct $2F1C849E303AA1D06405DFAB45DF7AEB
{
  _BYTE gap0[4];
  int _bf4;
  unsigned int SIZE;
  _BYTE gapc[8];
  int _bf20;
};

/* 2230 */
struct $44EFE10AA3DC13CC6A7E6B576A4090AD
{
  _BYTE gap0[4];
  int _bf4;
  unsigned int SIZE;
  int _bf12;
  unsigned int MSAA_CLEAR_LO;
  int _bf20;
};

/* 2231 */
union XGRAPHICS::_CP_FETCHCONST_BLOCK::_CP_TEXTURE_FETCH
{
  $2F1C849E303AA1D06405DFAB45DF7AEB texturefetch;
  $44EFE10AA3DC13CC6A7E6B576A4090AD texturefetch_multisample;
  $38DAE03C5F32738BE3C3EF16C20C38D7 vertexfetch[3];
  unsigned int u32All[6];
};

/* 2232 */
struct XGRAPHICS::_CP_FETCHCONST_BLOCK
{
  unsigned int bHWUpdateNeeded;
  XGRAPHICS::_CP_FETCHCONST_BLOCK::_CP_TEXTURE_FETCH FC_UNION;
};

/* 2233 */
struct XGRAPHICS::_TS_TEXTURE
{
  unsigned int Width;
  unsigned int Height;
  unsigned int AlignedWidth;
  unsigned int AlignedHeight;
  unsigned int BytesPerPixel;
  XGRAPHICS::_SSM_VIDMEM VidMem;
  char *pSysMem;
};

/* 2234 */
struct XGRAPHICS::_TS_TEXTURE_SERVER
{
  unsigned int FogTxFormula;
  float FogTxDensity;
  unsigned int FogTxIndex;
  float FogTxStart;
  float FogTxEnd;
  float LineAATxWidth;
  unsigned int PolyStippleTx[32];
  XGRAPHICS::_TS_TXCREATE_INFO TxCreateInfo;
  XGRAPHICS::_CP_FETCHCONST_BLOCK FetchCnst[4];
  XGRAPHICS::_TS_TEXTURE Textures[4];
  XGRAPHICS::_SSM_SSMDEVICE2CLIENT_INTERFACE DevClientInterface;
};

/* 2235 */
struct XGRAPHICS::_OBJECT_LIST_FACTORY
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  unsigned int numAcquiredLists;
  XGRAPHICS::_MEM_HEAD *pListMemMgr;
  XGRAPHICS::_MEM_HEAD *pItemMemMgr;
};

/* 2236 */
#pragma pack(push, 4)
struct XGRAPHICS::_CP_SHADERPROGRAM_BLOCK
{
  unsigned int dwCodeSizeInDwords;
  unsigned int dwCodeSizeInBlocks;
  char code[1];
};
#pragma pack(pop)

/* 2237 */
struct $50DBB7DCBF71C80505FF0C1AA3E31B34
{
  float fValue;
};

/* 2238 */
struct $4AC9A06B0FA5F03825E245AF5415E428
{
  XGRAPHICS::E_SSM_COMPILEGET_QUERY eQuery;
  int param;
};

/* 2239 */
struct $B80CF4DCF28EBC1A26AAD445C42A9294
{
  unsigned int stream;
};

/* 2240 */
union $0AEAC77E7371781C062F96C3145DC939
{
  $50DBB7DCBF71C80505FF0C1AA3E31B34 scalar;
  $4AC9A06B0FA5F03825E245AF5415E428 query;
  $B80CF4DCF28EBC1A26AAD445C42A9294 Export;
};

/* 2241 */
struct XGRAPHICS::_IA_FLOATUSAGE_BLOCK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC header;
  $0AEAC77E7371781C062F96C3145DC939 blockInfo[4];
};

/* 2242 */
struct XGRAPHICS::_IA_BOOLUSAGE_BLOCK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC header;
  XGRAPHICS::E_SSM_COMPILEWITH_QUERY eQuery;
  unsigned int param;
};

/* 2243 */
struct XGRAPHICS::_IA_INTERNALCONST_ALLOCATOR
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_IA_FLOATUSAGE_BLOCK floatUsageTable[32];
  XGRAPHICS::_IA_BOOLUSAGE_BLOCK boolUsageTable[128];
};

/* 2244 */
struct XGRAPHICS::_IA_INTERNALCONST_BLOCK_HEADER
{
  void *hClientDevHandle;
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  unsigned int floatConstCount;
  unsigned int boolConstCount;
};

/* 2245 */
struct $0A985514FAC1B0A627DB5BBB29B53652
{
  unsigned int TexSampler;
};

/* 2246 */
struct $04EF74CCB787D2BD99EF835E88A83203
{
  unsigned int numVFetches;
  XGRAPHICS::E_FETCH_TYPE eVFType[3];
  unsigned int VSDecl[3];
};

/* 2247 */
union $C25BD3D988D726D1C52E66AC76C08D10
{
  $0A985514FAC1B0A627DB5BBB29B53652 tfetch;
  $04EF74CCB787D2BD99EF835E88A83203 vfetch;
};

/* 2248 */
struct XGRAPHICS::_FA_FETCHUSAGE_BLOCK
{
  unsigned int bIsUsed;
  XGRAPHICS::E_FETCH_TYPE eType;
  $C25BD3D988D726D1C52E66AC76C08D10 constInfo;
};

/* 2249 */
struct XGRAPHICS::_FA_FETCHCONST_ALLOC
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::E_FA_FETCH_ALLOCATOR_MODE eMode;
  unsigned int bReuseVFBasedOnStream;
  XGRAPHICS::_FA_FETCHUSAGE_BLOCK fetchUsageTable[32];
  int currConstant;
  int currVFConstant;
  int currVFSlot;
  int numAllocated;
};

/* 2250 */
struct XGRAPHICS::_CS_INTERP_USAGE
{
  unsigned int bIsUsed;
  XGRAPHICS::_E_INTERP_USAGE eType[4];
  unsigned int typeIndex[4];
  unsigned int interp_usage[4];
  unsigned int usage[4];
  unsigned int usageIndex[4];
  unsigned int usageComponents[4];
  XGRAPHICS::_E_INTERP_CHANNEL typeChannel[4];
  unsigned int typeModifiers[4];
  XGRAPHICS::_E_INTERP_SAMPLING eSamplingType;
  unsigned int bIsInterpColor;
  unsigned int bIsInterpTexCoord;
  unsigned int bIsInterpData;
};

/* 2251 */
struct XGRAPHICS::_OBJECT_LIST_ITEM
{
  XGRAPHICS::_LIST_PRIM_ITEM listPrimItem;
  void *pObj;
};

/* 2252 */
struct XGRAPHICS::_OBJECT_LIST
{
  XGRAPHICS::_MEM_HEAD *pMemoryMgr;
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_OBJECT_LIST_ITEM *pSentinel;
  unsigned int size;
  unsigned int bPreCreated;
};

/* 2253 */
struct XGRAPHICS::_INTEGER_LIST_ITEM
{
  XGRAPHICS::_LIST_PRIM_ITEM listPrimItem;
  unsigned int value;
};

/* 2254 */
struct XGRAPHICS::_INTEGER_LIST
{
  XGRAPHICS::_MEM_HEAD *pMemoryMgr;
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_INTEGER_LIST_ITEM *pSentinel;
  unsigned int size;
  unsigned int bPreCreated;
};

/* 2255 */
struct XGRAPHICS::_CS_COMPILED_SHADER
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_ORDERED_LIST_FACTORY *pOListFactory;
  XGRAPHICS::_INTEGER_LIST_FACTORY *pIntListFactory;
  XGRAPHICS::_OBJECT_LIST_FACTORY *pObjListFactory;
  unsigned int bTypeAssigned;
  XGRAPHICS::IL_Shader_Type eShaderType;
  unsigned int bPrecompiled;
  unsigned int hShaderHandle;
  XGRAPHICS::_CP_SHADERPROGRAM_BLOCK *pCode;
  XGRAPHICS::_IA_INTERNALCONST_ALLOCATOR *pICA;
  XGRAPHICS::_IA_INTERNALCONST_BLOCK_HEADER *pICB;
  XGRAPHICS::_FA_FETCHCONST_ALLOC *pFCA;
  XGRAPHICS::_CS_INTERP_USAGE interpUsageTable[16];
  XGRAPHICS::_OBJECT_LIST *pPatchList;
  XGRAPHICS::_KEY_LIST *pGroupedFetchPatchList;
  XGRAPHICS::_OBJECT_LIST *pRequiredRSList;
  XGRAPHICS::_OBJECT_LIST *pR400StateList;
  XGRAPHICS::_INTEGER_LIST *pWildcardMetadataList;
  unsigned int refCount;
};

/* 2256 */
struct XGRAPHICS::_CP_COMPILED_PROGRAM
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_TS_TEXTURE_SERVER *pTexServer;
  XGRAPHICS::_E_COMPILED_PROGRAM_TYPE eCPType;
  XGRAPHICS::_CP_RENDERSTATE_BLOCK *rs[6];
  XGRAPHICS::_CS_COMPILED_SHADER *pCS_ps;
  XGRAPHICS::_CS_COMPILED_SHADER *pCS_vs;
  XGRAPHICS::_CP_SHADERPROGRAM_BLOCK *pPatchedCode_ps;
  XGRAPHICS::_CP_SHADERPROGRAM_BLOCK *pPatchedCode_vs;
  unsigned int isExecutable;
  unsigned int isReadOnly;
  unsigned int refCount;
};

/* 2257 */
struct XGRAPHICS::_HASH32_RESULT
{
  unsigned int a;
  unsigned int b;
  unsigned int c;
};

/* 2258 */
union XGRAPHICS::IL_DCLPIOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2259 */
union XGRAPHICS::IL_PrimaryDCLPIN_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2260 */
union XGRAPHICS::IL_PrimaryTEXLDB_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2261 */
struct XGRAPHICS::_PS_PROGRAM_STORE
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *AllocateVidMem)(void *, unsigned int, XGRAPHICS::_E_SSM_VIDMEMHEAP, XGRAPHICS::_SSM_VIDMEM *);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeVidMem)(void *, XGRAPHICS::_SSM_VIDMEM *);
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_TS_TEXTURE_SERVER *pTexServer;
  XGRAPHICS::_HASH_TABLE *pStore[8];
  XGRAPHICS::_OBJECT_LIST *pVidMemLists[8];
  XGRAPHICS::_SSM_VIDMEM pPreAllocVidMem[8];
  unsigned int bIsPreAllocAvail[8];
  unsigned int pVidMemBytes[8];
  XGRAPHICS::_MEM_HEAD *pProgramKeyMemMgr;
  XGRAPHICS::_ORDERED_LIST_FACTORY *pOListFactory;
  XGRAPHICS::_INTEGER_LIST_FACTORY *pIntListFactory;
  XGRAPHICS::_OBJECT_LIST_FACTORY *pObjListFactory;
};

/* 2262 */
struct XGRAPHICS::_SS_SHADER_STORE
{
  XGRAPHICS::_MEM_HEAD *pHandleMemoryMgr;
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  unsigned int handleGenerator;
  XGRAPHICS::_HASH_TABLE *handleTable;
  XGRAPHICS::_HASH_TABLE *ILTable;
};

/* 2263 */
struct XGRAPHICS::_SR_SHADER_RECYCLER
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SS_SHADER_STORE *pShaderStore;
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_TERNARY_SEARCH_TREE *pTSTShaderPairs;
  XGRAPHICS::_OBJECT_LIST *pShaderLists;
  XGRAPHICS::_MEM_HEAD *pShaderPairMemMgr;
};

/* 2264 */
struct XGRAPHICS::_XLT_STATE_TRANSLATOR
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_TS_TEXTURE_SERVER *pTexServer;
  XGRAPHICS::_SS_SHADER_STORE *pShaderStore;
};

/* 2265 */
struct XGRAPHICS::HwLimits
{
  XGRAPHICS::HwLimitsVtbl *vfptr;
  int max_regs;
  int max_exports;
  int max_instructions;
  int max_nested_calls;
  int max_nested_ifs;
  int max_texture_stages;
  int max_nested_loops;
  int max_reg_bool;
  int max_reg_int;
  int max_reg_float;
  int min_kreg;
  int max_kreg;
};

/* 2266 */
struct XGRAPHICS::HwLimitsVtbl
{
  void (__cdecl *AdjustForPixelShader)(XGRAPHICS::HwLimits *this);
  void (__cdecl *AdjustForVertexShader)(XGRAPHICS::HwLimits *this);
};

/* 2267 */
struct XGRAPHICS::DListNode
{
  XGRAPHICS::DListNodeVtbl *vfptr;
  XGRAPHICS::DListNode *prev;
  XGRAPHICS::DListNode *next;
};

/* 2268 */
struct XGRAPHICS::DListNodeVtbl
{
  void *(__cdecl *__vecDelDtor)(XGRAPHICS::DListNode *this, unsigned int);
};

/* 2269 */
struct __declspec(align(16)) XGRAPHICS::Compiler
{
  XGRAPHICS::_SS_SHADER_STORE *pShaderStore;
  __declspec(align(16)) SETJMP_VECTOR4 jump_buffer[20];
  XGRAPHICS::HwLimits *hardware;
  int error_code;
  bool first_time_for_output;
  __declspec(align(4)) void *compiler_debug_file;
  int inst_ct;
  bool in_vertex_shader;
  __declspec(align(4)) XGRAPHICS::_SSM_REGISTRY *registry;
  int block_ct;
  bool konsts_are_packed;
  bool in_ssa_form;
  bool symbol_table_invalid;
  bool phi_nodes_folded;
  bool phi_nodes_replaced;
  __declspec(align(4)) XGRAPHICS::LabelInfo *first_label;
  int iNumEPosRegs;
  int iNumMPassRegs;
  int iNumTempRegs;
  int iNumFixedRegs;
  int iNumLoopConstSets;
  int iNumLoopInputSets;
  int iNumLoopOutputSets;
  int iNumVRegs;
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *free)(void *, void *);
  void *(__cdecl *malloc)(void *, unsigned int);
  void *handle;
  XGRAPHICS::Arena *aps[10];
  XGRAPHICS::SSMHandle *external_stream;
  int debug_order;
  char *rslog_buffer;
  int rslog_cnt;
  int num_rslog_lines;
  int next_temp;
  int next_loop_const_set;
  int next_loop_input_set;
  int next_loop_output_set;
  int next_global_num;
  int next_value_number;
  int next_call_block;
  XGRAPHICS::_ABSTRACT_STATE *current_abstract_state;
  unsigned int code_size_in_words[20];
  char *code_buffer[20];
  int num_temps[20];
  int num_interps[20];
  int last_color_export[20];
  int first_instruction_is_fetch[20];
  XGRAPHICS::LinkageInfo *required_linkage;
  bool enable_z_export;
  bool enable_sprite_export;
  bool enable_kill_export;
  bool enable_edgeflag_export;
  bool enable_multipass_export;
  bool enable_parameter_generation;
  bool enable_screen_xy_faceness;
  __declspec(align(2)) int parameter_generation_position;
  int current_shader_index;
  char *base_name;
  char *ext_base_name[20];
  char *dbg_file_name;
  bool debug_print_il;
  bool debug_print_disassembly;
  bool out_dbg;
  bool out_SP;
  bool out_fast;
  bool out_quiet;
  __declspec(align(4)) unsigned int opt_flags;
  __declspec(align(8)) XGRAPHICS::Compiler::PerfCounter perf_counters[16];
  XGRAPHICS::Compiler::MemStat mem_stats[9];
  int num_il_insts;
  int max_coalesce_loops;
  int max_val_num_kills;
  int max_copy_folds;
  int max_balance_conversions;
  int slackness_threshold;
  XGRAPHICS::ILProgram *pILP;
  XGRAPHICS::CFG *cfg;
};

/* 2270 */
struct XGRAPHICS::call_info
{
  char *first_exec_slot;
  char *control_info;
};

/* 2271 */
struct $CE0E2472100DF1B2E3786D374A4A9719
{
  char X;
  char Y;
  char Z;
  char W;
};

/* 2272 */
union XGRAPHICS::SwizzleOrMaskInfo
{
  $CE0E2472100DF1B2E3786D374A4A9719 bits;
  $CE0E2472100DF1B2E3786D374A4A9719 bitfield;
  unsigned int _u32All;
  char u8[4];
};

/* 2273 */
#pragma pack(push, 4)
struct XGRAPHICS::VRegInfo
{
  XGRAPHICS::VRegInfoVtbl *vfptr;
  bool bGlobal;
  bool bPhysical;
  int iId;
  int iUsage;
  int iIndex;
  int iNumUses;
  int iNumDefs;
  bool hasLoad;
  bool hasInit;
  R400Tables::RegType type;
  XGRAPHICS::Vector<XGRAPHICS::IRInst *> *Uses;
  XGRAPHICS::Vector<XGRAPHICS::IRInst *> *Defs;
  XGRAPHICS::DefStack *defStack;
};
#pragma pack(pop)

/* 2274 */
struct XGRAPHICS::CFG
{
  bool tried_compression;
  __declspec(align(4)) int code_size_in_bytes;
  XGRAPHICS::call_info *call_table;
  XGRAPHICS::Compiler *context;
  struct XGRAPHICS::CompAState *current_abstract_state;
  bool vertex_fog_exported;
  __declspec(align(4)) XGRAPHICS::IRInst *physical_index[16];
  XGRAPHICS::stage_info_type *stage_info;
  R400Tables::ILRegTypeMap *il_reg_mapping;
  XGRAPHICS::Vector<XGRAPHICS::IRInst *> *ICExportInstructions;
  XGRAPHICS::IRAlloc *ICAlloc;
  XGRAPHICS::IRAlloc *LastMemAlloc;
  XGRAPHICS::IRExport *color_export_instruction;
  XGRAPHICS::IRExport *depth_export_instruction;
  XGRAPHICS::IRExport *position_export;
  XGRAPHICS::IRExport *position_export_2;
  bool export_edgeflag;
  bool export_kill;
  bool export_sprite;
  __declspec(align(2)) XGRAPHICS::DList placementOrder;
  XGRAPHICS::Block **dfOrder;
  XGRAPHICS::Block **dfPOrder;
  XGRAPHICS::Block **execOrder;
  XGRAPHICS::EntryBlock *entryBlock;
  XGRAPHICS::ExitBlock *exitBlock;
  XGRAPHICS::VRegTable *vRegList;
  XGRAPHICS::LiveSet *nonLocalSet;
  XGRAPHICS::LiveSet *isPWInput;
  XGRAPHICS::LinkageInfo linkage;
  XGRAPHICS::Interference *ig;
  XGRAPHICS::Vector<XGRAPHICS::IRInst *> *root_set;
  bool enable_parameter_generation;
  bool enable_screen_xy_faceness;
  __declspec(align(4)) int parameter_generation_position;
  int max_temp;
  int num_interps;
  int num_pos_exp;
  int first_inst_is_fetch;
  int last_color_export;
  bool has_vertex_array;
  __declspec(align(4)) int vertex_array_lb;
  int vertex_array_ub;
  int vertex_array_base_delta;
  bool has_interp_array;
  __declspec(align(4)) R400Tables::RegType interp_array_type;
  int interp_array_lb;
  int interp_array_ub;
  int interp_array_base_delta;
  XGRAPHICS::bitset *availableRegs;
  XGRAPHICS::bitset *allocatableRegs;
  bool inVertexShader;
  __declspec(align(4)) int visited_index;
  int base_num_references;
  int num_normalized;
  int num_pw_mov;
  int num_pw_copies;
  int num_redundant_skip;
  int num_redundant_emit;
};

/* 2275 */
struct XGRAPHICS::VRegInfoVtbl
{
  void *(__cdecl *__vecDelDtor)(XGRAPHICS::VRegInfo *this, unsigned int);
  void (__cdecl *SetGlobal)(XGRAPHICS::VRegInfo *this, bool);
  bool (__cdecl *IsInterpolator)(XGRAPHICS::VRegInfo *this);
  bool (__cdecl *IsFixed)(XGRAPHICS::VRegInfo *this);
  bool (__cdecl *IsTemp)(XGRAPHICS::VRegInfo *this);
  bool (__cdecl *IsLoopIndexedSet)(XGRAPHICS::VRegInfo *this);
  bool (__cdecl *IsResource)(XGRAPHICS::VRegInfo *this);
  XGRAPHICS::VRegInfo *(__cdecl *CreateReplacingTempIfNecessary)(XGRAPHICS::VRegInfo *this, XGRAPHICS::SwizzleOrMaskInfo, XGRAPHICS::CFG *, XGRAPHICS::Compiler *);
  XGRAPHICS::VRegInfo *(__cdecl *GetReplacingTempIfNecessary)(XGRAPHICS::VRegInfo *this, XGRAPHICS::SwizzleOrMaskInfo, XGRAPHICS::CFG *);
};

/* 2276 */
#pragma pack(push, 4)
struct XGRAPHICS::Chunk
{
  XGRAPHICS::Chunk *next;
  int len;
  char bin[1];
};
#pragma pack(pop)

/* 2277 */
#pragma pack(push, 4)
const struct XGRAPHICS::Arena
{
  XGRAPHICS::Compiler *context;
  XGRAPHICS::Chunk *chunk;
  char *hwm;
  char *hwm_max;
  char *amax;
  char *old;
  int reclaimed;
  int reused;
  unsigned int reclaimed_bytes;
  unsigned int reused_bytes;
  bool recycle;
};
#pragma pack(pop)

/* 2278 */
struct XGRAPHICS::InternalVector
{
  unsigned int max;
  unsigned int count;
  char *data;
  XGRAPHICS::Arena *ap;
};

/* 2279 */
struct XGRAPHICS::Vector<XGRAPHICS::IRInst *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 2280 */
struct XGRAPHICS::IRInst
{
  XGRAPHICS::DListNode baseclass_0;
  XGRAPHICS::SwizzleOrMaskInfo RequiredChannels;
  int num_outputs;
  int num_inputs;
  R400Tables::Op eOp;
  XGRAPHICS::VRegInfo *aRegs[6];
  R400Tables::Predicate iPredicate;
  int aOperand[6];
  R400Tables::RegType aOperandType[6];
  int aOperandAddrMode[6];
  XGRAPHICS::SwizzleOrMaskInfo aModifiers[6];
  bool aArgNegate[6];
  bool aArgAbsVal[6];
  bool aResultClamp;
  __declspec(align(4)) XGRAPHICS::Extra extras[8];
  int aRelAddrOffset[6];
  int iId;
  int flags;
  XGRAPHICS::IRInst *parms[33];
  int vn[33][4];
  int visited;
  XGRAPHICS::konst value[4];
  unsigned int defined[4];
  XGRAPHICS::SwizzleOrMaskInfo konstant_korection;
  XGRAPHICS::Block *owningBlock;
  XGRAPHICS::Compiler *context;
  int num_references;
};

/* 2281 */
union XGRAPHICS::Extra
{
  float as_float;
  int as_int;
  void *as_ptr;
  bool as_bool;
  unsigned int as_unsigned;
  R400Tables::RelOp as_REL_OP;
  R400Tables::Op as_OP;
};

/* 2282 */
#pragma pack(push, 4)
struct XGRAPHICS::RHS
{
  unsigned int op;
  unsigned int mod_inst[1];
  unsigned int mod_arg[6][2];
  unsigned int mode[6];
  unsigned int vn[6][4];
  XGRAPHICS::Extra extras[8];
  char misc[30];
};
#pragma pack(pop)

/* 2283 */
#pragma pack(push, 4)
struct XGRAPHICS::CurrentValue
{
  int value[4];
  XGRAPHICS::IRInst *inst;
  XGRAPHICS::RHS rhs;
  XGRAPHICS::Compiler *context;
  bool has_encoding;
};
#pragma pack(pop)

/* 2284 */
struct XGRAPHICS::DefStack::DefInst
{
  XGRAPHICS::CurrentValue *curDef;
  int def_blk_id;
  XGRAPHICS::DefStack::DefInst *next;
};

/* 2285 */
struct XGRAPHICS::DefStack
{
  XGRAPHICS::Compiler *context;
  XGRAPHICS::DefStack::DefInst *head;
};

/* 2286 */
struct XGRAPHICS::named_value
{
  __int16 name;
  __int16 id;
};

/* 2287 */
union $A8DA6A051F01AF69137307B6E699887B
{
  unsigned int u;
  XGRAPHICS::named_value named;
  float numeric;
};

/* 2288 */
struct XGRAPHICS::konst
{
  unsigned int by_name;
  $A8DA6A051F01AF69137307B6E699887B val;
};

/* 2289 */
#pragma pack(push, 4)
struct XGRAPHICS::Block
{
  XGRAPHICS::DListNode baseclass_0;
  XGRAPHICS::Compiler *context;
  XGRAPHICS::CFG *owningCFG;
  XGRAPHICS::DList instList;
  XGRAPHICS::stack<XGRAPHICS::VRegInfo *> *defNodes;
  int iId;
  int loop_depth;
  XGRAPHICS::Vector<XGRAPHICS::Block *> *successorBlocks;
  XGRAPHICS::Vector<XGRAPHICS::Block *> *predecessorBlocks;
  int numCfInsts;
  bool processed;
  unsigned int DFS_name;
  unsigned int old_DFS_name;
  XGRAPHICS::Block *pPostDom;
  XGRAPHICS::Block *pDomParent;
  XGRAPHICS::Vector<XGRAPHICS::Block *> *domChildren;
  XGRAPHICS::Vector<XGRAPHICS::Block *> *domFrontier;
  XGRAPHICS::Block *pDFSParent;
  XGRAPHICS::LiveSet *liveIn;
  XGRAPHICS::LiveSet *liveOut;
  XGRAPHICS::LiveSet *defSet;
  XGRAPHICS::IREntry *entryInst;
  XGRAPHICS::IRExit *exitInst;
  XGRAPHICS::IRCJmp *branch_inst;
  bool yield_first;
  int visited;
  unsigned int flags;
};
#pragma pack(pop)

/* 2290 */
struct XGRAPHICS::stage_info_type
{
  XGRAPHICS::ILTexCoordMode mode;
  XGRAPHICS::ILPixTexUsage type;
};

/* 2291 */
const struct R400Tables::ILRegTypeMap
{
  int id;
  R400Tables::RegType ir_type;
};

/* 2292 */
struct XGRAPHICS::IRPseudo
{
  XGRAPHICS::IRInst baseclass_0;
};

/* 2293 */
struct XGRAPHICS::IRAlloc
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 2294 */
struct XGRAPHICS::IRAlu
{
  XGRAPHICS::IRInst baseclass_0;
};

/* 2295 */
struct XGRAPHICS::IRExport
{
  XGRAPHICS::IRAlu baseclass_0;
};

/* 2296 */
struct XGRAPHICS::DList
{
  XGRAPHICS::DListNode head_node;
  XGRAPHICS::DListNode tail_node;
};

/* 2297 */
struct XGRAPHICS::EntryBlock
{
  XGRAPHICS::Block baseclass_0;
  XGRAPHICS::IRInst *last_load;
};

/* 2298 */
struct XGRAPHICS::ExitBlock
{
  XGRAPHICS::Block baseclass_0;
};

/* 2299 */
struct XGRAPHICS::InternalHashTable
{
  unsigned int size;
  unsigned int count;
  void **buckets;
  int (__cdecl *cmpf)(void *, void *);
  int (__cdecl *hashf)(void *);
  XGRAPHICS::Arena *ap;
};

/* 2300 */
struct XGRAPHICS::HashTable<XGRAPHICS::VRegInfo *>
{
  XGRAPHICS::InternalHashTable baseclass_0;
};

/* 2301 */
struct XGRAPHICS::HashTable<XGRAPHICS::IRInst *>
{
  XGRAPHICS::InternalHashTable baseclass_0;
};

/* 2302 */
#pragma pack(push, 4)
struct XGRAPHICS::VRegTable
{
  XGRAPHICS::Compiler *context;
  XGRAPHICS::HashTable<XGRAPHICS::VRegInfo *> *symbols;
  XGRAPHICS::HashTable<XGRAPHICS::IRInst *> *constants_1;
  XGRAPHICS::HashTable<XGRAPHICS::IRInst *> *constants_2;
  XGRAPHICS::HashTable<XGRAPHICS::IRInst *> *constants_3;
  XGRAPHICS::HashTable<XGRAPHICS::IRInst *> *constants_4;
  XGRAPHICS::VRegInfo *cmp;
  XGRAPHICS::IRInst *lc;
  bool inVertexShader;
  int last_konst_used;
  int last_konst_reg_used;
};
#pragma pack(pop)

/* 2303 */
struct XGRAPHICS::bitset
{
  unsigned int len_in_uints;
  unsigned int len_in_bits;
  unsigned int bitArray[1];
};

/* 2304 */
struct XGRAPHICS::LiveSet
{
  XGRAPHICS::bitset baseclass_0;
};

/* 2305 */
struct XGRAPHICS::Interpolator
{
  XGRAPHICS::VRegInfo baseclass_0;
  int center;
  int origin;
  XGRAPHICS::IRExport *export_inst;
  XGRAPHICS::VRegInfo *vRegTemp;
};

/* 2306 */
#pragma pack(push, 4)
struct XGRAPHICS::LinkageInfo
{
  R400Tables::RegType required_interpolators_type[16];
  int required_interpolators_index[16];
  int required_interpolators_component[16][4];
  R400Tables::RegType required_interpolators_usage[16][4];
  int required_interpolators_usage_index[16][4];
  bool interpolator_is_pinned[16];
  XGRAPHICS::Interpolator *symbol[16];
  R400Tables::RegType actual_interpolators_type[16];
  int actual_interpolators_index[16];
  int actual_interpolators_component[16][4];
  R400Tables::RegType actual_interpolators_usage[16][4];
  int actual_interpolators_usage_index[16][4];
  bool has_required_assignments;
  bool in_realtime_mode;
  XGRAPHICS::Compiler *context;
};
#pragma pack(pop)

/* 2307 */
struct XGRAPHICS::Vector<XGRAPHICS::Range *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 2308 */
struct XGRAPHICS::Interference
{
  XGRAPHICS::bitset *adjMatrix;
  XGRAPHICS::Vector<XGRAPHICS::Range *> *ranges;
  XGRAPHICS::Compiler *context;
  int ct_physicals;
  int node_count;
};

/* 2309 */
struct XGRAPHICS::stack<XGRAPHICS::VRegInfo *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 2310 */
struct XGRAPHICS::Vector<XGRAPHICS::Block *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 2311 */
struct XGRAPHICS::IREntry
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 2312 */
struct XGRAPHICS::IRExit
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 2313 */
struct XGRAPHICS::IRCJmp
{
  XGRAPHICS::IRInst baseclass_0;
};

/* 2314 */
const struct XGRAPHICS::ScopedLabel
{
  int label_id;
  int times_called;
  int routine;
};

/* 2315 */
struct XGRAPHICS::LabelInfo
{
  XGRAPHICS::Block *pDefinition;
  XGRAPHICS::ScopedLabel *cLabel;
  XGRAPHICS::LabelInfo *pNext;
  XGRAPHICS::DList fixups;
};

/* 2316 */
struct XGRAPHICS::SSMHandle
{
  XGRAPHICS::SSMHandleVtbl *vfptr;
  void *structure1;
  void *structure2;
  int flags;
  XGRAPHICS::Compiler *context;
};

/* 2317 */
struct XGRAPHICS::SSMHandleVtbl
{
  void (__cdecl *SetConstByValue)(XGRAPHICS::SSMHandle *this, int, int, float);
  void (__cdecl *SetConstByName)(XGRAPHICS::SSMHandle *this, int, int, int, int);
  void (__cdecl *SetInterpUsage)(XGRAPHICS::SSMHandle *this, int, int, int, int, int *, int *, int *);
  void (__cdecl *AllocFetchConst)(XGRAPHICS::SSMHandle *this, XGRAPHICS::IL_Shader_Type, XGRAPHICS::E_FETCH_TYPE, unsigned int, unsigned int *, unsigned int *);
  void (__cdecl *AllocTextureFetchConst)(XGRAPHICS::SSMHandle *this, int, bool, unsigned int *, unsigned int *);
  void (__cdecl *AllocVertexFetchConst)(XGRAPHICS::SSMHandle *this, int, bool, unsigned int *, unsigned int *);
  void (__cdecl *OutputVertexPatch)(XGRAPHICS::SSMHandle *this, int, int, XGRAPHICS::Compiler *, int);
  XGRAPHICS::_CS_COMPILED_SHADER *(__cdecl *GetPCS)(XGRAPHICS::SSMHandle *this);
};

/* 2318 */
struct XGRAPHICS::_SSM_SSMOBJECT2CLIENT_INTERFACE
{
  XGRAPHICS::_E_SSM_CLIENTTYPE eClientType;
  void *hClientObjectHandle;
  unsigned int *(__fastcall *GetCmdBuffSpace)(void *, unsigned int);
  unsigned int *(__fastcall *GetEmptyCmdBuffSpace)(void *, unsigned int);
  unsigned int (__fastcall *GetMaxEmptyCmdBuffSize)(void *);
  unsigned int (__fastcall *UpdateCmdBuffSpace)(void *, unsigned int, unsigned __int64 *);
  unsigned int (__fastcall *CheckTSRetired)(void *, unsigned __int64 *, unsigned int);
  void (__fastcall *ConvertToUASValues)(void *, void *, void *);
};

/* 2319 */
struct XGRAPHICS::_SC_STATE_CACHE
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_CC_STATE_COMPILER *pCompiler;
  XGRAPHICS::_PS_PROGRAM_STORE *pProgramStore;
  XGRAPHICS::_PP_STATE_POSTPROCESSOR *pPostProcessor;
  XGRAPHICS::_HASH_TABLE *cache;
};

/* 2320 */
struct XGRAPHICS::_PS_INTERNAL_INFO
{
  int refCount;
  XGRAPHICS::_SSM_VIDMEM sVidMem;
  XGRAPHICS::_OBJECT_LIST_ITEM *pVidMemListItem;
  unsigned __int64 *lpTSSignature;
};

/* 2321 */
struct XGRAPHICS::_PS_EXTERNAL_BLOCK
{
  unsigned int dataSizeInDwords;
  unsigned int dataSizeInBlocks;
  unsigned int data[1];
};

/* 2322 */
struct XGRAPHICS::_PS_INTERNAL_BLOCK
{
  XGRAPHICS::_PS_INTERNAL_INFO info;
  XGRAPHICS::_PS_EXTERNAL_BLOCK *pBlock;
};

/* 2323 */
struct XGRAPHICS::_PS_PROGRAM_KEY
{
  XGRAPHICS::_CP_COMPILED_PROGRAM *pCP;
  XGRAPHICS::_PS_INTERNAL_BLOCK *rs[6];
  XGRAPHICS::_PS_INTERNAL_BLOCK *ps;
  XGRAPHICS::_PS_INTERNAL_BLOCK *vs;
};

/* 2324 */
struct XGRAPHICS::_ABSTRACT_STATE
{
  void *hSSMObject;
  unsigned int ASObjFlags;
  XGRAPHICS::__AS_STATEVALUE *pStateValues;
  unsigned int *pStateBlkDtBits;
  unsigned int dwMasterDirtyFlags;
  float *VFConstants;
  float *PFConstants;
  XGRAPHICS::_AS_ICONST *VIConstants;
  XGRAPHICS::_AS_ICONST *PIConstants;
  unsigned int *VBConstants;
  unsigned int *PBConstants;
  unsigned int *CnstDtBits[6];
  XGRAPHICS::__AS_STATE_MAP_INFO ASMapInfo;
  XGRAPHICS::_AS_CONST_INFO ASConstInfo;
  XGRAPHICS::_SSM_SSMDEVICE2CLIENT_INTERFACE DeviceCI;
  XGRAPHICS::_SSM_SSMOBJECT2CLIENT_INTERFACE ObjectCI;
  XGRAPHICS::_SC_STATE_CACHE *pStateCache;
  void *hSCIndex;
  void *hCPTranslateBuffers;
  XGRAPHICS::_PS_PROGRAM_KEY *pCurrProgKey;
  XGRAPHICS::_LCC_INFO LccInfo[5];
};

/* 2325 */
#pragma pack(push, 8)
struct XGRAPHICS::Compiler::PerfCounter
{
  unsigned __int64 total_cycles;
  int count;
  char *name;
  bool active;
};
#pragma pack(pop)

/* 2326 */
#pragma pack(push, 4)
struct XGRAPHICS::Compiler::MemStat
{
  char *name;
  int phase;
  int shader;
  int app;
  bool active;
};
#pragma pack(pop)

/* 2327 */
struct XGRAPHICS::ILProgram
{
  XGRAPHICS::Compiler *context;
  unsigned int flags;
  int num_input_shaders;
  unsigned int *shaders[2];
  unsigned int **vector_of_shaders;
};

/* 2328 */
struct XGRAPHICS::_CC_STATE_COMPILER
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_PS_PROGRAM_STORE *pPS;
  XGRAPHICS::_SS_SHADER_STORE *pSS;
  XGRAPHICS::_SR_SHADER_RECYCLER *pSR;
  XGRAPHICS::_XLT_STATE_TRANSLATOR *pXLT;
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::Compiler *pShaderCompiler;
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *pfCompileProgram)(XGRAPHICS::_CC_STATE_COMPILER *, XGRAPHICS::_ABSTRACT_STATE *, XGRAPHICS::_CP_COMPILED_PROGRAM **);
  XGRAPHICS::_IA_INTERNALCONST_ALLOCATOR *pICA_vs;
  XGRAPHICS::_IA_INTERNALCONST_ALLOCATOR *pICA_ps;
};

/* 2329 */
struct XGRAPHICS::_PP_STATE_POSTPROCESSOR
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_PS_PROGRAM_STORE *pProgramStore;
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *pfnProcCmdBufState)(XGRAPHICS::_PP_STATE_POSTPROCESSOR *, XGRAPHICS::_PS_PROGRAM_KEY *, XGRAPHICS::_ABSTRACT_STATE *, unsigned int);
  unsigned int (__cdecl *pfnGetMaxStateSize)(XGRAPHICS::_PS_PROGRAM_KEY *);
};

/* 2330 */
union XGRAPHICS::IL_Src_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2331 */
union XGRAPHICS::IL_RELOPOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2332 */
union XGRAPHICS::IL_USAGEUSAGEINDEXOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2333 */
union XGRAPHICS::IL_MATRIXOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2334 */
union XGRAPHICS::IL_STAGEOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2335 */
union XGRAPHICS::IL_SecondaryTEXLDMS_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2336 */
union XGRAPHICS::IL_TEXLDOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2337 */
union XGRAPHICS::IL_MEMEXPORTOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2338 */
union XGRAPHICS::IL_Dst_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2339 */
union XGRAPHICS::IL_Src
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2340 */
union XGRAPHICS::IL_CMPOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2341 */
union XGRAPHICS::IL_MOVAOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2342 */
union XGRAPHICS::IL_Version
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2343 */
union XGRAPHICS::IL_PrimaryDCLVOUT_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2344 */
union XGRAPHICS::IL_CENTROIDOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2345 */
union XGRAPHICS::IL_Label
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2346 */
union XGRAPHICS::IL_Rel_Addr
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2347 */
union XGRAPHICS::IL_PrimaryDCLV_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2348 */
union XGRAPHICS::IL_DCLPTOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2349 */
union XGRAPHICS::IL_Precomp_Descriptor
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2350 */
union XGRAPHICS::IL_ELEMENTOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2351 */
union XGRAPHICS::IL_KILLOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2352 */
union XGRAPHICS::IL_TEXLDBOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2353 */
union XGRAPHICS::IL_PrimaryTEXLDMS_Mod
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2354 */
union XGRAPHICS::IL_DCLPPOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2355 */
union XGRAPHICS::IL_ZEROOPOpCode
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2356 */
union XGRAPHICS::IL_Lang
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfield;
  unsigned int u32All;
};

/* 2357 */
union PA_SC_DEBUG_CW_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2358 */
union CG_INT_MASK_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2359 */
struct $E8B706E90EBA5D1D283B17B52E9426BF
{
  unsigned int F00_TERSTM;
};

/* 2360 */
union FSB_TX_TERSTM_AND
{
  $E8B706E90EBA5D1D283B17B52E9426BF bitfields;
  $E8B706E90EBA5D1D283B17B52E9426BF bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2361 */
union GC_DEVICE_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2362 */
struct $097BF9BFD75B0497D8EC042B842AD7AB
{
  unsigned int DCP_CRC_P0_LAST;
};

/* 2363 */
union DCP_CRC_P0_LAST
{
  $097BF9BFD75B0497D8EC042B842AD7AB bitfields;
  $097BF9BFD75B0497D8EC042B842AD7AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2364 */
union EP_UNUSED_BAR_4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2365 */
union VGT_GROUP_VECT_1_FMT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2366 */
struct $F83D1B2D94D0030D653AB16B8AF85245
{
  unsigned int CRC_DATA;
};

/* 2367 */
union RB_BC_AZ1_CRC
{
  $F83D1B2D94D0030D653AB16B8AF85245 bitfields;
  $F83D1B2D94D0030D653AB16B8AF85245 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2368 */
struct $DDC751B6659AE6263CEC9214904ED794
{
  unsigned int DATA_REGISTER;
};

/* 2369 */
union PA_CL_UCP_2_W
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2370 */
union PCIE_VC0_RESOURCE_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2371 */
struct $324348DE8F9963EC8C1D407440705BD1
{
  unsigned int DCP_DEBUG;
};

/* 2372 */
union DCP_DEBUG
{
  $324348DE8F9963EC8C1D407440705BD1 bitfields;
  $324348DE8F9963EC8C1D407440705BD1 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2373 */
union CONFIG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2374 */
struct $3DFBE25ECCF239684927ED8DF1EFACB3
{
  unsigned int COUNTER0;
};

/* 2375 */
union PCIE_PERF_COUNT0_SLV_S_C_CLK
{
  $3DFBE25ECCF239684927ED8DF1EFACB3 bitfields;
  $3DFBE25ECCF239684927ED8DF1EFACB3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2376 */
union PA_SU_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2377 */
struct $70BBC63B5A2B1E85531DE7E1CDA03186
{
  unsigned int BIOS_SCRATCH;
};

/* 2378 */
union BIOS_9_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2379 */
union FSB_TLA_COUNT5_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2380 */
union D1CRTC_OVERSCAN_LEFT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2381 */
struct $B57532793320E0809910C133A9BB0FC8
{
  unsigned int VALUE;
};

/* 2382 */
union RTS_J_W_REF
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2383 */
union BIOS_13_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2384 */
union D1SCL_COEF_RAM_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2385 */
struct $B63D6A45185C53A778ABDDC3E2C3799F
{
  unsigned int DMIF_DEBUG_ID;
};

/* 2386 */
union DMIF_DEBUG_ID
{
  $B63D6A45185C53A778ABDDC3E2C3799F bitfields;
  $B63D6A45185C53A778ABDDC3E2C3799F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2387 */
struct $E4FA5B1F16754C9FD3F9ED1E344058AB
{
  unsigned int DWORD1;
};

/* 2388 */
union AZ1_SECONDARY_STATE_DWORD1
{
  $E4FA5B1F16754C9FD3F9ED1E344058AB bitfields;
  $E4FA5B1F16754C9FD3F9ED1E344058AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2389 */
union RTS_INV_W_DX
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2390 */
union PCIE_LC_LINK_WIDTH_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2391 */
union VC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2392 */
union RBBM_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2393 */
union CP_RT11_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2394 */
union BIOS_5_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2395 */
union FSB_TR_CTRL_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2396 */
union MC0_STATUS_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2397 */
union CP_2D_PALETTE_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2398 */
union CP_RT10_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2399 */
union DCCG_CLK_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2400 */
struct $6307C4AB00671288B63E8CEC6B503191
{
  unsigned int PERF_COUNT;
};

/* 2401 */
union PA_SU_PERFCOUNTER0_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2402 */
struct $1BB39DFEEBD8081F885AF5D9FC571465
{
  unsigned int PERFCOUNTER_LOW;
};

/* 2403 */
union TP1_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2404 */
union MC1_BSB_SNOOPED_TIMER_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2405 */
struct $E046E2F1DBD10CD43E4A96E8F28E6489
{
  unsigned int OFFSET;
};

/* 2406 */
union PA_SU_POLY_OFFSET_FRONT_OFFSET
{
  $E046E2F1DBD10CD43E4A96E8F28E6489 bitfields;
  $E046E2F1DBD10CD43E4A96E8F28E6489 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2407 */
struct $4519BB88727B067C6A4CBE6450201155
{
  unsigned int F00_Event_Counter;
};

/* 2408 */
union FSB_TX_PMC2_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2409 */
union IRQ_BRIDGE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2410 */
union TP2_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2411 */
union MC0_TIMING_CNTL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2412 */
union DC_SURFACE_2_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2413 */
union MH_PERFMON_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2414 */
union FSB_TX_PMC4
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2415 */
union TP0_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2416 */
union RBBM_INT_ACK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2417 */
union D1MODE_PRIORITY_A_CNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2418 */
union BC_DUMMY_CRAYRB_ENUMS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2419 */
union PA_CL_UCP_1_X
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2420 */
union D1OVL_ALPHA_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2421 */
struct $2190A196DAF5E43A121BA6296F07AF1E
{
  unsigned int PCIEP_SCRATCH;
};

/* 2422 */
union PCIEP_SCRATCH
{
  $2190A196DAF5E43A121BA6296F07AF1E bitfields;
  $2190A196DAF5E43A121BA6296F07AF1E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2423 */
struct $6A9D0CB0DD98F54C5F43204F3D25F360
{
  unsigned int MASK;
};

/* 2424 */
union CP_RT1_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2425 */
union FSB_LX_VCARB_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2426 */
union AZ1_MRU_BANK19_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2427 */
struct $8100885E69B0106485EB71E39A9E3FE0
{
  unsigned int STATUS_BITS;
};

/* 2428 */
union PA_SC_VIZ_QUERY_STATUS_1
{
  $8100885E69B0106485EB71E39A9E3FE0 bitfields;
  $8100885E69B0106485EB71E39A9E3FE0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2429 */
union CP_RT3_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2430 */
union TCD_DXTC_ARB_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2431 */
union MC1_RD_STR_DLY_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2432 */
union CP_STATE_DEBUG_INDEX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2433 */
struct $456D821D968D6650962725F540BD23A5
{
  unsigned int SIZE;
};

/* 2434 */
union COHER_SIZE_PM4
{
  $456D821D968D6650962725F540BD23A5 bitfields;
  $456D821D968D6650962725F540BD23A5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2435 */
union PCIE_PERF_COUNT0_MST_R_CLK
{
  $3DFBE25ECCF239684927ED8DF1EFACB3 bitfields;
  $3DFBE25ECCF239684927ED8DF1EFACB3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2436 */
union D1CRTC_OVERSCAN_COLOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2437 */
struct $A2AE5A4BD1B1E0B2C6BBBF2BA4AD588E
{
  unsigned int SCRATCH_REG0;
};

/* 2438 */
union SCRATCH_REG0
{
  $A2AE5A4BD1B1E0B2C6BBBF2BA4AD588E bitfields;
  $A2AE5A4BD1B1E0B2C6BBBF2BA4AD588E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2439 */
union BIOS_15_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2440 */
union PCIE_LC_STATE0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2441 */
union RB_BLENDCONTROL0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2442 */
union TP0_CHECKSUM_PIXEL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2443 */
struct $69E9E4C8448566B5238923C810DC54F7
{
  unsigned int VPORT_YOFFSET;
};

/* 2444 */
union PA_CL_VPORT_YOFFSET
{
  $69E9E4C8448566B5238923C810DC54F7 bitfields;
  $69E9E4C8448566B5238923C810DC54F7 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2445 */
union CRTC1_DEBUG_04
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2446 */
union XDVO_DEBUG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2447 */
struct $FC77CAFA2D1A30AE8523CE3B131B1CA6
{
  unsigned int F00_Physical_Layer_MMIO_Command;
};

/* 2448 */
union FSB_LX_PHYCMD_AND
{
  $FC77CAFA2D1A30AE8523CE3B131B1CA6 bitfields;
  $FC77CAFA2D1A30AE8523CE3B131B1CA6 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2449 */
union SCL1_READBBUF_IO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2450 */
union D1MODE_INT_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2451 */
struct $1A85827550E5BEDC52855A27F6ADB24A
{
  unsigned int DWORD0;
};

/* 2452 */
union AZ0_MRT_STATE_DWORD0
{
  $1A85827550E5BEDC52855A27F6ADB24A bitfields;
  $1A85827550E5BEDC52855A27F6ADB24A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2453 */
union ED_CG_CLK_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2454 */
struct $D5C44A37155EFBBAF9FA18072EB44935
{
  unsigned int BASE_ADDR;
};

/* 2455 */
union VGT_DMA_BASE
{
  $D5C44A37155EFBBAF9FA18072EB44935 bitfields;
  $D5C44A37155EFBBAF9FA18072EB44935 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2456 */
union TP2_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2457 */
union PCIE_RX_CREDITS_RECEIVED_CPLD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2458 */
union MC1_TUNING_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2459 */
union AZ1_LOOPBACK_PATTERN2PHS3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2460 */
union SQ_FETCH_4
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2461 */
union CP_RT7_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2462 */
union D1SCL_ONE_SHOT_WATERMARK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2463 */
struct $3D4580FF535196A6092852216473F755
{
  unsigned int COLOR_CLEAR_LO;
};

/* 2464 */
union RB_COLOR_CLEAR_LO
{
  $3D4580FF535196A6092852216473F755 bitfields;
  $3D4580FF535196A6092852216473F755 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2465 */
union ID07_DCP_LB_DATA_RETURN2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2466 */
union DMIF_DEBUG05
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2467 */
union VGT_DMA_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2468 */
union FSB_TLA_COUNT1_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2469 */
union RB_BLENDCONTROL2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2470 */
union CP_RT3_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2471 */
union VGT_DMA_REQ_FIFO_DEPTH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2472 */
union FSB_TX_DEBUG_AUX_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2473 */
union TCF_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2474 */
union MC1_PAD_IF_CNTL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2475 */
union CP_RT12_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2476 */
union D1GRPH_COLOR_MATRIX_COEF_1_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2477 */
union MC1_PAD_CAL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2478 */
union D1CRTC_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2479 */
union TCF_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2480 */
union CP_RT_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2481 */
union D1GRPH_FLIP_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2482 */
union HZ_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2483 */
struct $EACE6C2AA81A22FF5AA56EA0F0022C81
{
  unsigned int DWORD2;
};

/* 2484 */
union AZ1_PRIMARY_STATE_DWORD2
{
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bitfields;
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2485 */
union TP0_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2486 */
union IOC_REG_BUS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2487 */
union RBBM_SKEW_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2488 */
struct $19CC4DC896F4DCC4A69DEE0B8343B227
{
  unsigned int REG_DATA;
};

/* 2489 */
union REG_MACRO_DATA_2
{
  $19CC4DC896F4DCC4A69DEE0B8343B227 bitfields;
  $19CC4DC896F4DCC4A69DEE0B8343B227 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2490 */
struct $C29F659763396CBCF1F5325B097176D2
{
  unsigned int IOC_BSB_MST_REQ_CRC_2;
};

/* 2491 */
union IOC_BSB_MST_REQ_CRC_2
{
  $C29F659763396CBCF1F5325B097176D2 bitfields;
  $C29F659763396CBCF1F5325B097176D2 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2492 */
union TP3_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2493 */
union FSB_TLA_CONDITION2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2494 */
union AZ1_MRU_BANK9_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2495 */
union CP_RT7_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2496 */
union XDVO_CRC_EN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2497 */
union IOC_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2498 */
union SB_VENDOR_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2499 */
union TST_EDGE_DETECT_DATA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2500 */
union HSIO_CALIBRATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2501 */
union REG_MACRO_ADDR_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2502 */
union SB_DEVICE_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2503 */
union LB_SCL1_READ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2504 */
union PCIE_TX_CREDITS_CONSUMED_D
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2505 */
struct $24C4B9F5249837A75554F697B54DD06B
{
  unsigned int DC_TEST_DEBUG_OUT_PIN_MASK;
};

/* 2506 */
union DC_TEST_DEBUG_OUT_PIN_MASK
{
  $24C4B9F5249837A75554F697B54DD06B bitfields;
  $24C4B9F5249837A75554F697B54DD06B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2507 */
union MC1_RD_STR_DLY_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2508 */
union SCL1_V_COUNTERS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2509 */
union DO_TEST_DEBUG_OUT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2510 */
union RTS_I_W_DX
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2511 */
union XDVO_DEBUG6
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2512 */
union RB_COPY_REF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2513 */
union PCIE_ROOT_ERR_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2514 */
union RB_BC_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2515 */
union AZ0_MRU_BANK1_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2516 */
union RTS_Z_MAX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2517 */
struct $186B2936788B72FD0DD5821940E18FE8
{
  unsigned int F00_compression;
};

/* 2518 */
union FSB_TLA_COMPR_CARE_MASK0
{
  $186B2936788B72FD0DD5821940E18FE8 bitfields;
  $186B2936788B72FD0DD5821940E18FE8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2519 */
union AZ0_MRU_BANK0_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2520 */
union PA_CL_UCP_0_Y
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2521 */
union TCF_PERFCOUNTER6_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2522 */
union MC1_TIMING_CNTL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2523 */
struct $15DB5634CB6A8B826254D4E66831D245
{
  unsigned int PRBS23_ERRCNT;
};

/* 2524 */
union BSB_WRAPPER_PRBS23_ERRCNT0
{
  $15DB5634CB6A8B826254D4E66831D245 bitfields;
  $15DB5634CB6A8B826254D4E66831D245 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2525 */
union CLIPPER_DEBUG_REG12
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2526 */
union PA_SC_DEBUG_CW_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2527 */
union RTS_Z_MIN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2528 */
union RCLK_PWRMGT_CNTL_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2529 */
union FSB_LX_DEBUG_AUX_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2530 */
union BIU_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2531 */
union XDVO_FORCE_OUTPUT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2532 */
union SQ_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2533 */
union D1CRTC_V_SYNC_A_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2534 */
struct $180AC2BFF5BCFACE07B70DFC7CF81F16
{
  unsigned int DCP_CRC_P0_CURRENT;
};

/* 2535 */
union DCP_CRC_P0_CURRENT
{
  $180AC2BFF5BCFACE07B70DFC7CF81F16 bitfields;
  $180AC2BFF5BCFACE07B70DFC7CF81F16 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2536 */
union ID06_DCP_LB_DATA_RETURN1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2537 */
union CP_RT11_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2538 */
union D1MODE_LB_PITCH_IN_WORDS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2539 */
union FSB_LX_VCARB
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2540 */
union PCIE_LC_STATE2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2541 */
union CLIPPER_DEBUG_REG00
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2542 */
union SQ_FETCH_RT_1
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2543 */
union PCIE_VC0_RESOURCE_CAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2544 */
union VGT_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2545 */
union XDVO_2ND_CRC_EN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2546 */
struct $D51F26E3B94D08C268351660768A4A74
{
  unsigned int RX_DLLP1;
};

/* 2547 */
union PCIE_RX_DLLP1
{
  $D51F26E3B94D08C268351660768A4A74 bitfields;
  $D51F26E3B94D08C268351660768A4A74 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2548 */
union D1MODE_VBLANK_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2549 */
union PA_SC_AA_CONFIG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2550 */
union TCM_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2551 */
union PA_SC_WINDOW_OFFSET
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2552 */
union BIU_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2553 */
union BIF_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2554 */
union TP0_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2555 */
union CP_2D_BOOLEANS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2556 */
struct $DED3FFC5DDBBE7A9170C4A4B9F51719B
{
  unsigned int SCRATCH_REG2;
};

/* 2557 */
union SCRATCH_REG2
{
  $DED3FFC5DDBBE7A9170C4A4B9F51719B bitfields;
  $DED3FFC5DDBBE7A9170C4A4B9F51719B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2558 */
union FSB_LX_ERRINJ0_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2559 */
union PA_CL_UCP_3_W
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2560 */
union PA_SC_WINDOW_SCISSOR_BR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2561 */
union REG_MACRO_ADDR_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2562 */
union D1CRTC_STEREO_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2563 */
struct $F08EBCE85B570F8FEB61E847F92C00EA
{
  unsigned int REFERENCE;
};

/* 2564 */
union CP_RT9_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2565 */
struct $CF9095479ED9F6816C6743B76BC7F848
{
  unsigned int COPY_DEST_BASE;
};

/* 2566 */
union RB_COPY_DEST_BASE
{
  $CF9095479ED9F6816C6743B76BC7F848 bitfields;
  $CF9095479ED9F6816C6743B76BC7F848 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2567 */
union PCIE_P_PORT_LANE_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2568 */
union AZ1_MRU_BANK15_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2569 */
union FSB_TR_DEBUG_AUX_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2570 */
union CGM_MC1_IO_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2571 */
struct $4145E717CD00F5D2AB4049DD09B916A1
{
  unsigned int PREF_LIMIT_UPPER;
};

/* 2572 */
union PREF_LIMIT_UPPER
{
  $4145E717CD00F5D2AB4049DD09B916A1 bitfields;
  $4145E717CD00F5D2AB4049DD09B916A1 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2573 */
union DCCG_ONE_SHOT_STOP_CLOCKS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2574 */
union AZ1_MRU_BANK2_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2575 */
union FSB_LX_PMC4
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2576 */
union IOC_INVALID_AP_BSB
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2577 */
union TP1_CHECKSUM_PIXEL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2578 */
union D1GRPH_COLOR_MATRIX_COEF_1_4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2579 */
union D1GRPH_COLOR_MATRIX_COEF_2_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2580 */
union BIU_PERFCOUNTER2_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2581 */
struct $67D6671016B8FCE0C30C03366012046C
{
  unsigned int COUNTER1;
};

/* 2582 */
union PCIE_PERF_COUNT1_SLV_R_CLK
{
  $67D6671016B8FCE0C30C03366012046C bitfields;
  $67D6671016B8FCE0C30C03366012046C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2583 */
union PCIE_TX_REPLAY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2584 */
union D1GRPH_X_START
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2585 */
union TP0_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2586 */
struct $1521FBB18268D809C0554AC94905058C
{
  unsigned int MC_PERFCOUNTER0_LOW;
};

/* 2587 */
union MC0_PERFCOUNTER0_LOW
{
  $1521FBB18268D809C0554AC94905058C bitfields;
  $1521FBB18268D809C0554AC94905058C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2588 */
union FSB_TX_CTRL_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2589 */
union SB_ADAPTER_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2590 */
union FSB_TR_DEBUG_LO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2591 */
struct $B1F84801885D0AAAD30E728E1555F596
{
  unsigned int DST_ADDR;
};

/* 2592 */
union CP_DMA_DST_ADDR
{
  $B1F84801885D0AAAD30E728E1555F596 bitfields;
  $B1F84801885D0AAAD30E728E1555F596 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2593 */
union NB_REGPROG_INF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2594 */
union VGT_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2595 */
union TCF_PERFCOUNTER4_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2596 */
union PCIE_ORDER_COMPLIANCE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2597 */
union TCF_PERFCOUNTER9_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2598 */
union CP_RT6_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2599 */
union FSB_TX_PMC2_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2600 */
union LB_DISP1_SPLIT_REQ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2601 */
union RB_SURFACE_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2602 */
struct $573F11ACA6B3B45C2091E84F5449881C
{
  unsigned int BIN_MASK_LO;
};

/* 2603 */
union CP_BIN_MASK_LO
{
  $573F11ACA6B3B45C2091E84F5449881C bitfields;
  $573F11ACA6B3B45C2091E84F5449881C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2604 */
union PCIEP_PORT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2605 */
union LINK_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2606 */
union BIU_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2607 */
union DC_HSYNC_DEBUG_TEST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2608 */
union PA_SU_PERFCOUNTER1_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2609 */
union IOC_INT_ACK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2610 */
union MC0_INTERRUPT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2611 */
union CLIPPER_DEBUG_REG15
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2612 */
union VC_DEBUG_REG9
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2613 */
struct $7B6B297C9FA746FF966A726DF7022A79
{
  unsigned int F00_TERST_XSTP;
};

/* 2614 */
union FSB_TX_TERST_XSTP
{
  $7B6B297C9FA746FF966A726DF7022A79 bitfields;
  $7B6B297C9FA746FF966A726DF7022A79 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2615 */
union LB_DISP1_PARAM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2616 */
union RTS_BARYC_REF_VTX_Y
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2617 */
union COHER_DEST_BASE_6
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2618 */
union AZ0_LOOPBACK_TX_CRC_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2619 */
union IOC_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2620 */
union SQ_INSTRUCTION_CF_JMP_CALL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2621 */
union PA_SC_PERFCOUNTER3_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2622 */
union FSB_TLA_PATTERN_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2623 */
union SSID_CAP_LIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2624 */
union AZ0_PRIMARY_STATE_DWORD1
{
  $E4FA5B1F16754C9FD3F9ED1E344058AB bitfields;
  $E4FA5B1F16754C9FD3F9ED1E344058AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2625 */
union TCF_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2626 */
union AZ0_COPY_STATE_DWORD1
{
  $E4FA5B1F16754C9FD3F9ED1E344058AB bitfields;
  $E4FA5B1F16754C9FD3F9ED1E344058AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2627 */
union VC_DEBUG_REG6
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2628 */
union FSB_LR_DEBUG_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2629 */
union AZ0_MRU_BANK17_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2630 */
union CP_RT15_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2631 */
union ROM_CLK_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2632 */
union TCF_PERFCOUNTER2_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2633 */
union CP_RT1_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2634 */
struct $8C73C7457AC982BE9C676ACCA1560461
{
  unsigned int F00_pattern;
};

/* 2635 */
union FSB_TLA_PATTERN2
{
  $8C73C7457AC982BE9C676ACCA1560461 bitfields;
  $8C73C7457AC982BE9C676ACCA1560461 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2636 */
struct $9B229A4A9C711FE5F0F2D90ABACEBE9A
{
  unsigned int RESET;
};

/* 2637 */
union AZ1_RESET_CRC_COUNTERS
{
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bitfields;
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2638 */
union AZ0_PRIMARY_STATE_DWORD0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2639 */
union VGT_DEBUG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2640 */
struct $08BE24B24428CE8CF07D534598556659
{
  unsigned int SPARE;
};

/* 2641 */
union TCR_CHICKEN
{
  $08BE24B24428CE8CF07D534598556659 bitfields;
  $08BE24B24428CE8CF07D534598556659 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2642 */
union SQ_CF_RD_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2643 */
union SQ_INSTRUCTION_ALU_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2644 */
union COHER_SIZE_HOST
{
  $456D821D968D6650962725F540BD23A5 bitfields;
  $456D821D968D6650962725F540BD23A5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2645 */
union D1MODE_URGENCY_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2646 */
union D1SCL_SCALER_ENABLE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2647 */
union PCIE_FC_CPL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2648 */
struct $29A338244AEDC09013B23563CDB39239
{
  unsigned int DO_TEST_DEBUG_EDGE_TRIGGER_MASK;
};

/* 2649 */
union DO_TEST_DEBUG_EDGE_TRIGGER_MASK
{
  $29A338244AEDC09013B23563CDB39239 bitfields;
  $29A338244AEDC09013B23563CDB39239 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2650 */
union PCIE_PERF_LATENCY_REQ_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2651 */
union CP_RT9_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2652 */
union D1MODE_MAX_CHUNK_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2653 */
union FSB_TX_DEBUG_HI_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2654 */
union SCLK_G_DCP_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2655 */
union FSB_LX_PMC1
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2656 */
union BIU_TOP_OF_MEM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2657 */
union PA_SC_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2658 */
union PA_SU_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2659 */
union RB_TILE_CLEAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2660 */
union MC0_PAD_IF_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2661 */
union PA_SC_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2662 */
struct $65FCA93EA0DF635F734C67FDB6EB4292
{
  unsigned int BASE;
};

/* 2663 */
union COHER_BASE_HOST
{
  $65FCA93EA0DF635F734C67FDB6EB4292 bitfields;
  $65FCA93EA0DF635F734C67FDB6EB4292 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2664 */
union PA_CL_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2665 */
union MC0_TUNING_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2666 */
union TPC_CHICKEN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2667 */
union CP_RT14_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2668 */
union TCA_TPC_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2669 */
union MH_INT_CLEAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2670 */
union CP_INT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2671 */
union D1MODE_VBLANK_VLINE_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2672 */
union CP_RT_POLL_INTERVAL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2673 */
union FSB_TX_PMC2
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2674 */
union FSB_LX_PMC4_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2675 */
union SCL1_VFILT_IO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2676 */
union RB_HSIO_CALIBRATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2677 */
union SCL1_CRTC_INTERFACE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2678 */
union ID11_LUT_DATA_B
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2679 */
union MC0_PAD_CAL_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2680 */
struct $055626D602F51B8A2E3B53AECB313A2E
{
  unsigned int CMD_DATA;
};

/* 2681 */
union CP_CMD_DATA
{
  $055626D602F51B8A2E3B53AECB313A2E bitfields;
  $055626D602F51B8A2E3B53AECB313A2E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2682 */
struct $C20470E517CC3CADA9BC69410296E4A9
{
  unsigned int F00_LERST_Mask;
};

/* 2683 */
union FSB_LX_LERSTM_AND
{
  $C20470E517CC3CADA9BC69410296E4A9 bitfields;
  $C20470E517CC3CADA9BC69410296E4A9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2684 */
union PA_SC_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2685 */
struct $F8BC2DDBACD83541BFBFC60FA177CF57
{
  unsigned int DO_TEST_DEBUG_EDGE_TRIGGER_PATTERN;
};

/* 2686 */
union DO_TEST_DEBUG_EDGE_TRIGGER_PATTERN
{
  $F8BC2DDBACD83541BFBFC60FA177CF57 bitfields;
  $F8BC2DDBACD83541BFBFC60FA177CF57 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2687 */
union AZ0_LOOPBACK_PATTERN_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2688 */
union PCIE_LC_STATE5
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2689 */
struct $E4550A2A31A04A204E42CFF1CB02227C
{
  unsigned int PRBS23_BITCNT;
};

/* 2690 */
union BSB_WRAPPER_PRBS23_BITCNT0
{
  $E4550A2A31A04A204E42CFF1CB02227C bitfields;
  $E4550A2A31A04A204E42CFF1CB02227C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2691 */
struct $0ACD61990CF8DB7C440DA37795F293EF
{
  unsigned int DC_TEST_DEBUG_EDGE_TRIGGER_MASK;
};

/* 2692 */
union DC_TEST_DEBUG_EDGE_TRIGGER_MASK
{
  $0ACD61990CF8DB7C440DA37795F293EF bitfields;
  $0ACD61990CF8DB7C440DA37795F293EF bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2693 */
struct $EE778C00167A6CCD960A60DC015CAE7D
{
  unsigned int D1GRPH_PRIMARY_SURFACE_ADDRESS;
};

/* 2694 */
union D1GRPH_PRIMARY_SURFACE_ADDRESS
{
  $EE778C00167A6CCD960A60DC015CAE7D bitfields;
  $EE778C00167A6CCD960A60DC015CAE7D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2695 */
union RBBM_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2696 */
union D1OVL_UPDATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2697 */
union PA_SC_DEBUG_Z_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2698 */
union RB_COPY_DEST_PITCH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2699 */
union AZ1_LOOPBACK_RX_CRC_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2700 */
union TCF_PERFCOUNTER9_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2701 */
union SQ_PERFCOUNTER3_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2702 */
union FSB_TLA_CONDITION4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2703 */
union CP0_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2704 */
union MC1_WR_STR_DLL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2705 */
struct $AEB89AC22B6D28240DA7DC97754831F3
{
  unsigned int PERF_COUNT2_LO;
};

/* 2706 */
union RBBM_PERFCOUNTER2_LO
{
  $AEB89AC22B6D28240DA7DC97754831F3 bitfields;
  $AEB89AC22B6D28240DA7DC97754831F3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2707 */
union MC1_SECURE_MEMORY_APERTURE_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2708 */
union D1MODE_VLINE_START_END
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2709 */
union AZ0_MRU_BANK11_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2710 */
union BIOS_10_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2711 */
union AZ1_MRT_STATE_DWORD2
{
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bitfields;
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2712 */
union MC0_CRC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2713 */
union CP_RT12_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2714 */
union CP_ME_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2715 */
struct $723D53CFBC172A16AC612C575701E1D7
{
  unsigned int TIMER_LO;
};

/* 2716 */
union PCIE_PERF_LATENCY_TIMER_LO
{
  $723D53CFBC172A16AC612C575701E1D7 bitfields;
  $723D53CFBC172A16AC612C575701E1D7 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2717 */
struct $8F4B5E8C279CD206308231C7980371B3
{
  unsigned int DC_TEST_DEBUG_DATA_TRIGGER_MASK;
};

/* 2718 */
union DC_TEST_DEBUG_DATA_TRIGGER_MASK
{
  $8F4B5E8C279CD206308231C7980371B3 bitfields;
  $8F4B5E8C279CD206308231C7980371B3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2719 */
union CP_RT9_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2720 */
union RB_HSIO_PHASE_CAPTURE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2721 */
union TCD_INPUT2_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2722 */
struct $7E5A9628849CF3DCA17924C7A48F5AB8
{
  unsigned int RED;
};

/* 2723 */
union SQ_CONSTANT_0
{
  $7E5A9628849CF3DCA17924C7A48F5AB8 bitfields;
  $7E5A9628849CF3DCA17924C7A48F5AB8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2724 */
struct $816B3348B3C418EE1045AA9A763ABB00
{
  unsigned int F00_trace;
};

/* 2725 */
union FSB_TLA_TRACE_ARRAY_DATA0
{
  $816B3348B3C418EE1045AA9A763ABB00 bitfields;
  $816B3348B3C418EE1045AA9A763ABB00 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2726 */
union PA_SC_DEBUG_SPARE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2727 */
union TCO_QUAD0_DEBUG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2728 */
union VC_DEBUG_REG5
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2729 */
union SCL1_COEFRAM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2730 */
union PCIE_RX_CREDITS_RECEIVED
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2731 */
union ID00_DCP_DMIF_DATA_REQUEST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2732 */
struct $0804D404337EFE7B221C3E13733BD12C
{
  unsigned int CRC_MASK;
};

/* 2733 */
union RB_AZ_BC_CRC_MASK
{
  $0804D404337EFE7B221C3E13733BD12C bitfields;
  $0804D404337EFE7B221C3E13733BD12C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2734 */
union RTS_INV_W_REF
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2735 */
union TP1_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2736 */
union RB_DEBUG_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2737 */
union CP_RT5_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2738 */
union ROM_BAD_PIPE_FUSE_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2739 */
union SQ_INSTRUCTION_CF_EXEC_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2740 */
union MC0_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2741 */
union RTS_J_W_DY
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2742 */
union CP_ME_PS_EVENT_ADDR_SWM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2743 */
struct $F1ED2125DECBBC2E91113070A33B2405
{
  unsigned int RX_TLP_HDR0;
};

/* 2744 */
union PCIE_RX_TLP_HDR0
{
  $F1ED2125DECBBC2E91113070A33B2405 bitfields;
  $F1ED2125DECBBC2E91113070A33B2405 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2745 */
union IO_BASE_LIMIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2746 */
union SQ_INPUT_ARB_PRIORITY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2747 */
union CP_RT5_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2748 */
union EP_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2749 */
union RB_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2750 */
union PA_SC_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2751 */
union AZ1_MRU_BANK16_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2752 */
union PCIE_PERF_COUNT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2753 */
union TP_TC_CLKGATE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2754 */
union PA_CL_UCP_5_Z
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2755 */
union CP_RT10_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2756 */
union EP_CAPABILITIES_PTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2757 */
union D1GRPH_COLOR_MATRIX_COEF_2_4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2758 */
union AZ0_RESET_LOOPBACK_TRANSMIT_LFSR
{
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bitfields;
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2759 */
union FSB_TX_TERST_XSTP_OR
{
  $7B6B297C9FA746FF966A726DF7022A79 bitfields;
  $7B6B297C9FA746FF966A726DF7022A79 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2760 */
union PCIE_UNCORR_ERR_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2761 */
union CLIPPER_DEBUG_REG14
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2762 */
union CACHE_NON_MAIN_MEM_BAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2763 */
union FSB_TX_DEBUG_HI_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2764 */
union IOC_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2765 */
union AZ0_MRU_BANK4_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2766 */
union EP_CACHE_LINE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2767 */
struct $246A70AA5D96468E21DD75AFFF3B15D0
{
  unsigned int DO_TEST_DEBUG_DATA_TRIGGER_MASK;
};

/* 2768 */
union DO_TEST_DEBUG_DATA_TRIGGER_MASK
{
  $246A70AA5D96468E21DD75AFFF3B15D0 bitfields;
  $246A70AA5D96468E21DD75AFFF3B15D0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2769 */
union VGT_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2770 */
union TCO_QUAD1_DEBUG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2771 */
union AZ1_LOOPBACK_AZID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2772 */
union CP_RT6_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2773 */
union TCD_DXTMUX_SCTARB_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2774 */
union EP_NB_MMR_BAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2775 */
union DC_TEST_DEBUG_OUT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2776 */
union SQ_GPR_MANAGEMENT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2777 */
union CP_RT8_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2778 */
union SETUP_DEBUG_REG5
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2779 */
struct $86335DF66BDED45D176AD2C50B318A49
{
  unsigned int DO_TEST_DEBUG_OUT_TEST_DATA;
};

/* 2780 */
union DO_TEST_DEBUG_OUT_TEST_DATA
{
  $86335DF66BDED45D176AD2C50B318A49 bitfields;
  $86335DF66BDED45D176AD2C50B318A49 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2781 */
union TP1_CHICKEN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2782 */
union XDVO_BIT_DEPTH_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2783 */
union RBBM_INT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2784 */
union SB_CAPABILITIES_PTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2785 */
union PA_SU_POINT_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2786 */
union COHER_DEST_BASE_4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2787 */
struct $CF5104BEF8C6A99EA99F909C75C41804
{
  unsigned int DCP_DEBUG_ID;
};

/* 2788 */
union DCP_DEBUG_ID
{
  $CF5104BEF8C6A99EA99F909C75C41804 bitfields;
  $CF5104BEF8C6A99EA99F909C75C41804 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2789 */
union D1CRTC_H_BLANK_START_END
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2790 */
union TEST_COUNT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2791 */
union RTS_EDGE_1_DX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2792 */
union VC_DEBUG_REG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2793 */
union SX_PERFCOUNTER0_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2794 */
union CP_MEQ_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2795 */
struct $5F0D4B18DA8D64DB43E8BEDDAD92E27F
{
  unsigned int DATA;
};

/* 2796 */
union IOC_INVALID_AP_DATA
{
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bitfields;
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2797 */
union D1CRTC_STATUS_HV_COUNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2798 */
union TCF_PERFCOUNTER4_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2799 */
union PCIE_RX_CREDITS_ALLOCATED_CPLD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2800 */
union CP_STQ_RT_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2801 */
struct $945A3D7226DDC25EFF60E731DA2AD0AD
{
  unsigned int NUM_REQ;
};

/* 2802 */
union PCIE_PERF_LATENCY_COUNTER0
{
  $945A3D7226DDC25EFF60E731DA2AD0AD bitfields;
  $945A3D7226DDC25EFF60E731DA2AD0AD bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2803 */
union CP_RT15_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2804 */
union DMIF_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2805 */
union SQ_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2806 */
union FSB_LX_DEBUG_AUX_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2807 */
union BIOS_0_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2808 */
union FSB_LX_PMC5
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2809 */
struct $8F7A110607EC9C0F0DCF19B4A1ED317C
{
  unsigned int BAD_IOC_WRITE_ADDR;
};

/* 2810 */
union BIU_INT_BAD_IOC_WRITE_ADDR
{
  $8F7A110607EC9C0F0DCF19B4A1ED317C bitfields;
  $8F7A110607EC9C0F0DCF19B4A1ED317C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2811 */
struct $65F054612D61BCDBDE3C36F34C6490E3
{
  unsigned int DCP_CRC_MASK;
};

/* 2812 */
union DCP_CRC_MASK
{
  $65F054612D61BCDBDE3C36F34C6490E3 bitfields;
  $65F054612D61BCDBDE3C36F34C6490E3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2813 */
union CP_RT12_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2814 */
struct $56CA10FD1B895C4754704F59B7B1E4BB
{
  unsigned int F00_Spare;
};

/* 2815 */
union FSB_LX_LSPARE
{
  $56CA10FD1B895C4754704F59B7B1E4BB bitfields;
  $56CA10FD1B895C4754704F59B7B1E4BB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2816 */
union DC_LB_MEM_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2817 */
struct $9EB016E58ABDCA134AA3BC7E1E125DC9
{
  unsigned int IOC_HARD_RESET;
};

/* 2818 */
union EP_IOC_HARD_RESET
{
  $9EB016E58ABDCA134AA3BC7E1E125DC9 bitfields;
  $9EB016E58ABDCA134AA3BC7E1E125DC9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2819 */
union BSB_WRAPPER_PHY90_BACKUP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2820 */
struct $AD1100F3D1031E4DBACF76A066D429C1
{
  unsigned int SRC_ADDR;
};

/* 2821 */
union CP_RT_DMA_SRC_ADDR
{
  $AD1100F3D1031E4DBACF76A066D429C1 bitfields;
  $AD1100F3D1031E4DBACF76A066D429C1 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2822 */
struct $DCAD6AD47495E36B4BD04AC1696CC67D
{
  unsigned int DRAM_DATA;
};

/* 2823 */
union MC0_DRAM_DATA
{
  $DCAD6AD47495E36B4BD04AC1696CC67D bitfields;
  $DCAD6AD47495E36B4BD04AC1696CC67D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2824 */
union FSB_TX_TERSTM_OR
{
  $E8B706E90EBA5D1D283B17B52E9426BF bitfields;
  $E8B706E90EBA5D1D283B17B52E9426BF bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2825 */
union D1GRPH_COLOR_MATRIX_COEF_1_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2826 */
struct $837527F5D891273C43F5D3F87A22F8DF
{
  unsigned int BLEND_BLUE;
};

/* 2827 */
union RB_BLEND_BLUE
{
  $837527F5D891273C43F5D3F87A22F8DF bitfields;
  $837527F5D891273C43F5D3F87A22F8DF bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2828 */
union TCR_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2829 */
union SQ_PS_PROGRAM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2830 */
union TCF_PERFCOUNTER11_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2831 */
union SX_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2832 */
union BIU_FSB_FLUSH_ACK_TIMEOUT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2833 */
union SECONDARY_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2834 */
union AZ0_MRU_BANK13_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2835 */
union AZ1_PRIMARY_STATE_DWORD1
{
  $E4FA5B1F16754C9FD3F9ED1E344058AB bitfields;
  $E4FA5B1F16754C9FD3F9ED1E344058AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2836 */
union D1OVL_END
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2837 */
union SXIFCCG_DEBUG_REG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2838 */
union CG_SCRATCH1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2839 */
union FSB_LX_ERRCAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2840 */
union AZ1_LOOPBACK_PATTERN0PHS2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2841 */
union SQ_FETCH_3
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2842 */
struct $813F0DD8285373710AC385A67EB282ED
{
  unsigned int RT_BIN_MASK_LO;
};

/* 2843 */
union CP_RT_BIN_MASK_LO
{
  $813F0DD8285373710AC385A67EB282ED bitfields;
  $813F0DD8285373710AC385A67EB282ED bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2844 */
union BIOS_3_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2845 */
union PCIE_LC_TRAINING_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2846 */
union PA_SC_LINE_STIPPLE_STATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2847 */
union CP_RT10_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2848 */
struct $1B02271CFB9D4CF1137C29DE5604F99E
{
  unsigned int IOC_BSB_MST_REQ_CRC_0;
};

/* 2849 */
union IOC_BSB_MST_REQ_CRC_0
{
  $1B02271CFB9D4CF1137C29DE5604F99E bitfields;
  $1B02271CFB9D4CF1137C29DE5604F99E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2850 */
struct $3F00653A6F2838AAA9979293CA1609EB
{
  unsigned int F00_TFIRST;
};

/* 2851 */
union FSB_TX_TFIRST
{
  $3F00653A6F2838AAA9979293CA1609EB bitfields;
  $3F00653A6F2838AAA9979293CA1609EB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2852 */
union SB_EOIBAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2853 */
union LB_DISP1_ALU_PARAM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2854 */
union VC_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2855 */
union CP_RT9_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2856 */
union FSB_TX_PMC1_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2857 */
union LB_DISP1_ALU
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2858 */
union AZ0_LOOPBACK_TRANSMIT_COUNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2859 */
struct $00D388E3F314B93BD261F46D44BFC6D9
{
  unsigned int SNOOP_TIMEOUT_ADDR;
};

/* 2860 */
union BIU_INT_SNOOP_TIMEOUT_ADDR
{
  $00D388E3F314B93BD261F46D44BFC6D9 bitfields;
  $00D388E3F314B93BD261F46D44BFC6D9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2861 */
struct $8F7EC8B81CDD3DC245B9C6B4AAFBA618
{
  unsigned int BIN_MASK_HI;
};

/* 2862 */
union CP_BIN_MASK_HI
{
  $8F7EC8B81CDD3DC245B9C6B4AAFBA618 bitfields;
  $8F7EC8B81CDD3DC245B9C6B4AAFBA618 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2863 */
union D1GRPH_COLOR_MATRIX_COEF_3_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2864 */
union CP_IB1_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2865 */
union FSB_TX_DEBUG_AUX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2866 */
union YCLK_CNTL1_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2867 */
union AZ1_COPY_STATE_DWORD1
{
  $E4FA5B1F16754C9FD3F9ED1E344058AB bitfields;
  $E4FA5B1F16754C9FD3F9ED1E344058AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2868 */
union FSB_TX_ERRCAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2869 */
union COHER_STATUS_PM4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2870 */
union FSB_TR_DEBUG_HI_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2871 */
union PCIE_LC_STATE3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2872 */
union XDVO_CRC_MASK_SIG_RGB
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2873 */
union RB_HSIO_DLL_ADJ2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2874 */
union AZ0_LOOPBACK_PATTERN2PHS2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2875 */
union MC1_DRAM_DATA
{
  $DCAD6AD47495E36B4BD04AC1696CC67D bitfields;
  $DCAD6AD47495E36B4BD04AC1696CC67D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2876 */
union REVISION_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2877 */
struct $5D2689069F0D5789F3550DB739293D5C
{
  unsigned int RT_BIN_MASK_HI;
};

/* 2878 */
union CP_RT_BIN_MASK_HI
{
  $5D2689069F0D5789F3550DB739293D5C bitfields;
  $5D2689069F0D5789F3550DB739293D5C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2879 */
union FSB_TX_PMC5_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2880 */
union DC_GPIO_XDVODATA_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2881 */
union RB_COLOR_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2882 */
union CP_RT_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2883 */
union CP_CPU_INT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2884 */
union TP2_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2885 */
union CP_RT_ST_BUFSZ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2886 */
struct $194485D67899467926627C751ADB7196
{
  unsigned int F00_Physical_layer_MMIO_write_data;
};

/* 2887 */
union FSB_LX_PHYDATA_AND
{
  $194485D67899467926627C751ADB7196 bitfields;
  $194485D67899467926627C751ADB7196 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2888 */
union AZ0_SECONDARY_STATE_DWORD2
{
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bitfields;
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2889 */
union RTS_EDGE_DIST_MSBS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2890 */
union VGT_HOS_REUSE_DEPTH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2891 */
union DCCG_ONE_SHOT_RUN_CLOCKS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2892 */
union PA_SU_SC_MODE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2893 */
union VGT_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2894 */
struct $34692B0B970D9F8643448B91C72DAB44
{
  unsigned int DIST_BITS_31_0;
};

/* 2895 */
union RTS_WD_EDGE_0_DIST_LSBS
{
  $34692B0B970D9F8643448B91C72DAB44 bitfields;
  $34692B0B970D9F8643448B91C72DAB44 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2896 */
union TCF_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2897 */
struct $9DF4F6E5215C531AE3FF853A3F7D9057
{
  unsigned int MH_PERFCOUNTER_LOW;
};

/* 2898 */
union MH_PERFMON_PERFCOUNTER1_LOW
{
  $9DF4F6E5215C531AE3FF853A3F7D9057 bitfields;
  $9DF4F6E5215C531AE3FF853A3F7D9057 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2899 */
union FSB_LX_CTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2900 */
union EP_SUB_CLASS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2901 */
union XDVO_ENABLE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2902 */
union PCIE_CI_FLUSH_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2903 */
union SQ_RESOURCE_MANAGMENT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2904 */
union CP_RT14_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2905 */
union FSB_LX_PMCTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2906 */
union SQ_CONSTANT_RT_0
{
  $7E5A9628849CF3DCA17924C7A48F5AB8 bitfields;
  $7E5A9628849CF3DCA17924C7A48F5AB8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2907 */
union PERF_MAX_BSB_READ_LATENCY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2908 */
union D1SCL_COEF_RAM_CONFLICT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2909 */
union RB_HSIO_DLL_ADJ3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2910 */
struct $6ABA54006FD7FA99E4F8F74E69AC37F9
{
  unsigned int VPORT_ZSCALE;
};

/* 2911 */
union PA_CL_VPORT_ZSCALE
{
  $6ABA54006FD7FA99E4F8F74E69AC37F9 bitfields;
  $6ABA54006FD7FA99E4F8F74E69AC37F9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2912 */
struct $926CDB7DE0FFC34BAE40EDC0970FFB9D
{
  unsigned int IOC_CPU_SLV_REQ_ARB;
};

/* 2913 */
union IOC_CPU_SLV_REQ_ARB
{
  $926CDB7DE0FFC34BAE40EDC0970FFB9D bitfields;
  $926CDB7DE0FFC34BAE40EDC0970FFB9D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2914 */
union D1CRTC_V_TOTAL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2915 */
struct $6494E477ADFEFFB3369BF21AB06340E0
{
  unsigned int SCRATCH_REG5;
};

/* 2916 */
union SCRATCH_REG5
{
  $6494E477ADFEFFB3369BF21AB06340E0 bitfields;
  $6494E477ADFEFFB3369BF21AB06340E0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2917 */
union VGT_DEBUG_REG9
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2918 */
union NB_SUB_CLASS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2919 */
union RB_PERFCOUNTER1_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2920 */
struct $CE481B05A4FA577EEC8E61925CF262C0
{
  unsigned int PERF_COUNT1_LO;
};

/* 2921 */
union RBBM_PERFCOUNTER1_LO
{
  $CE481B05A4FA577EEC8E61925CF262C0 bitfields;
  $CE481B05A4FA577EEC8E61925CF262C0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2922 */
union PA_CL_UCP_5_Y
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2923 */
union TP1_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2924 */
union RB_HSIO_INTERFACE_ALIGNER_VALUE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2925 */
union FSB_TX_PMC0_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2926 */
union RB_AZ0_BC_CRC
{
  $F83D1B2D94D0030D653AB16B8AF85245 bitfields;
  $F83D1B2D94D0030D653AB16B8AF85245 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2927 */
struct $17C0AC354BE3FB0A9D6CE80422135ABB
{
  unsigned int MIN_TESS;
};

/* 2928 */
union VGT_HOS_MIN_TESS_LEVEL
{
  $17C0AC354BE3FB0A9D6CE80422135ABB bitfields;
  $17C0AC354BE3FB0A9D6CE80422135ABB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2929 */
union DMIF_DEBUG04
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2930 */
union AZ0_LOOPBACK_PATTERN1PHS3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2931 */
union FSB_LX_PMC3_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2932 */
struct $2324AE49580748DA3216E90C1146D386
{
  unsigned int PCIE_SCRATCH;
};

/* 2933 */
union PCIE_SCRATCH
{
  $2324AE49580748DA3216E90C1146D386 bitfields;
  $2324AE49580748DA3216E90C1146D386 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2934 */
union HSIO_PHASE_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2935 */
union FSB_LX_DEBUG_LO_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2936 */
union VGT_GROUP_DECR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2937 */
union PCIE_PERF_COUNT0_TXCLK
{
  $3DFBE25ECCF239684927ED8DF1EFACB3 bitfields;
  $3DFBE25ECCF239684927ED8DF1EFACB3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2938 */
struct $98F040E806C5555E188F48403982982D
{
  unsigned int DOUT_DEBUG_ID;
};

/* 2939 */
union DOUT_DEBUG_ID
{
  $98F040E806C5555E188F48403982982D bitfields;
  $98F040E806C5555E188F48403982982D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2940 */
union TP2_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2941 */
union RBBM_WAIT_IDLE_CLOCKS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2942 */
struct $900106D6D23EC3730EB053E752B454DE
{
  unsigned int ADAPTER_ID;
};

/* 2943 */
union GC_ADAPTER_ID
{
  $900106D6D23EC3730EB053E752B454DE bitfields;
  $900106D6D23EC3730EB053E752B454DE bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2944 */
union D1CRTC_STATUS_FRAME_COUNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2945 */
union DC_PERFMON_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2946 */
union VGT_OUTPUT_PATH_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2947 */
union RBBM_ISYNC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2948 */
union PCIE_LC_STATE1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2949 */
struct $05CE56F31EF8A248ECB68D5721A9D8EC
{
  unsigned int SFAIL_SAMPLES;
};

/* 2950 */
union AZ1_SFAIL_SAMPLES
{
  $05CE56F31EF8A248ECB68D5721A9D8EC bitfields;
  $05CE56F31EF8A248ECB68D5721A9D8EC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2951 */
union FSB_LX_SC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2952 */
union MH_INT_SIGNAL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2953 */
union FSB_LX_LERST_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2954 */
struct $DE519316DD217D416475D09AA858A0FC
{
  unsigned int F00_Variable;
};

/* 2955 */
union FSB_TLA_STATUS_CONTROL
{
  $DE519316DD217D416475D09AA858A0FC bitfields;
  $DE519316DD217D416475D09AA858A0FC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2956 */
struct $1E70AE1ACA5CD32BEC8EAF38FA50AB7E
{
  unsigned int D1SCL_CRC_MASK;
};

/* 2957 */
union D1SCL_CRC_MASK
{
  $1E70AE1ACA5CD32BEC8EAF38FA50AB7E bitfields;
  $1E70AE1ACA5CD32BEC8EAF38FA50AB7E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2958 */
struct $7B27CC41F704822835C54C8B995766B5
{
  unsigned int GREEN;
};

/* 2959 */
union SQ_CONSTANT_RT_1
{
  $7B27CC41F704822835C54C8B995766B5 bitfields;
  $7B27CC41F704822835C54C8B995766B5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2960 */
union SCL1_CONTROL1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2961 */
union D1OVL_SURFACE_OFFSET_X
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2962 */
union DC_LUT_SEQ_COLOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2963 */
union TCD_STALLS_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2964 */
union CP_ME_CF_EVENT_SRC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2965 */
union CLIPPER_DEBUG_REG10
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2966 */
union FSB_LR_DEBUG_LO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2967 */
union TCF_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2968 */
union PCIE_PERF_COUNT1_SLV_S_C_CLK
{
  $67D6671016B8FCE0C30C03366012046C bitfields;
  $67D6671016B8FCE0C30C03366012046C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2969 */
union AZ1_LOOPBACK_PATTERN1PHS2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2970 */
union MC0_TERM_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2971 */
union CP_RT8_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2972 */
union FSB_TLA_ACTION_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2973 */
union AZ1_LOOPBACK_TX_CRC_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2974 */
union DC_GPIO_XDVODATA_EN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2975 */
union CP_STQ_ST_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2976 */
union PCIE_LC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2977 */
union PCIE_VC0_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2978 */
union XDVO_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2979 */
union CP_DMA_ACT_DSCR_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2980 */
union BIOS_11_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2981 */
union CP_RT1_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2982 */
union BIU_PERFCOUNTER3_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2983 */
union AZ1_LOOPBACK_PATTERN0PHS1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2984 */
union RB_SIDEBAND_RD_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2985 */
union CP3_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2986 */
union MC1_PERFCOUNTER0_LOW
{
  $1521FBB18268D809C0554AC94905058C bitfields;
  $1521FBB18268D809C0554AC94905058C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2987 */
union CP_RT6_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2988 */
union CRTC_SCL_INTERFACE_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2989 */
struct $C6C3E65772D995BF3754BADB52E86109
{
  unsigned int F00_Display_Data;
};

/* 2990 */
union FSB_LX_DDAT2
{
  $C6C3E65772D995BF3754BADB52E86109 bitfields;
  $C6C3E65772D995BF3754BADB52E86109 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2991 */
struct $A3747E611C5AF42A077E516ACA09089B
{
  unsigned int DWORD4;
};

/* 2992 */
union AZ0_SECONDARY_STATE_DWORD4
{
  $A3747E611C5AF42A077E516ACA09089B bitfields;
  $A3747E611C5AF42A077E516ACA09089B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2993 */
union SB_SUB_CLASS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2994 */
union TCB_CORE_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2995 */
union SX_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2996 */
union COHER_DEST_BASE_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2997 */
union GC_BASE_CODE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2998 */
union CAP_PTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 2999 */
union TCF_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3000 */
union BIF_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3001 */
union REG_MACRO_DATA_3
{
  $19CC4DC896F4DCC4A69DEE0B8343B227 bitfields;
  $19CC4DC896F4DCC4A69DEE0B8343B227 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3002 */
union PA_CL_GB_HORZ_CLIP_ADJ
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3003 */
union COHER_DEST_BASE_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3004 */
union GC_LATENCY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3005 */
union D1CRTC_H_TOTAL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3006 */
union MSI_MSG_DATA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3007 */
union AZ1_COPY_STATE_DWORD0
{
  $1A85827550E5BEDC52855A27F6ADB24A bitfields;
  $1A85827550E5BEDC52855A27F6ADB24A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3008 */
struct $C26759A39D75BE2FE9AACA083203705E
{
  unsigned int CP_RBBM_CRC32;
};

/* 3009 */
union RBBM_CRC32
{
  $C26759A39D75BE2FE9AACA083203705E bitfields;
  $C26759A39D75BE2FE9AACA083203705E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3010 */
union TP0_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3011 */
union CP_RT3_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3012 */
union AZ0_LOOPBACK_PATTERN0PHS1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3013 */
union PA_CL_UCP_0_X
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3014 */
union AZ0_MRU_BANK7_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3015 */
union BIU_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3016 */
union REG_MACRO_DATA_6
{
  $19CC4DC896F4DCC4A69DEE0B8343B227 bitfields;
  $19CC4DC896F4DCC4A69DEE0B8343B227 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3017 */
union CLIPPER_DEBUG_REG02
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3018 */
union TCF_PERFCOUNTER8_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3019 */
union TP3_CHECKSUM_PIXEL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3020 */
union CP_RB_WPTR_DELAY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3021 */
union NB_ADAPTER_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3022 */
union ID02_DMIF_DCP_DATA_RETURN2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3023 */
union TCD_INPUT1_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3024 */
union MC0_PERFCOUNTER0_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3025 */
union MC1_INTERRUPT_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3026 */
struct $FA471FA30AEEFF17D6830876900B1DDE
{
  unsigned int SCRATCH_REG1;
};

/* 3027 */
union SCRATCH_REG1
{
  $FA471FA30AEEFF17D6830876900B1DDE bitfields;
  $FA471FA30AEEFF17D6830876900B1DDE bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3028 */
union SQ_ACTIVITY_METER_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3029 */
union MC1_INTERRUPT_ACK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3030 */
union FSB_TX_PMCTRL_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3031 */
union PCIE_TX_CREDITS_CONSUMED_CPLD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3032 */
union FB_SIZE
{
  $456D821D968D6650962725F540BD23A5 bitfields;
  $456D821D968D6650962725F540BD23A5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3033 */
union FSB_LX_PMC4_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3034 */
union CRTC_DOUT_INTERFACE_02_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3035 */
union DC_LUTA_WHITE_OFFSET_RED
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3036 */
union IOC_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3037 */
union FSB_LX_PMCTRL_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3038 */
struct $F02F2B8F83EECAD70F9DC9E1A71CF83B
{
  unsigned int SCRATCH;
};

/* 3039 */
union PCIE_CFG_SCRATCH1
{
  $F02F2B8F83EECAD70F9DC9E1A71CF83B bitfields;
  $F02F2B8F83EECAD70F9DC9E1A71CF83B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3040 */
union SQ_INSTRUCTION_CF_ALLOC_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3041 */
union IOC_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3042 */
union CP_PFP_UCODE_DATA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3043 */
union FSB_TX_TERST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3044 */
struct $E07C69D1C72ECB5319959202ECFEABE7
{
  unsigned int CP_NV_FLAGS;
};

/* 3045 */
union CP_NV_FLAGS_3
{
  $E07C69D1C72ECB5319959202ECFEABE7 bitfields;
  $E07C69D1C72ECB5319959202ECFEABE7 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3046 */
union CP_RT4_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3047 */
struct $A4F009701EE0D7664BF5B13FAEAC641E
{
  unsigned int TLP_HDR;
};

/* 3048 */
union PCIE_HDR_LOG0
{
  $A4F009701EE0D7664BF5B13FAEAC641E bitfields;
  $A4F009701EE0D7664BF5B13FAEAC641E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3049 */
union D1CRTC_H_SYNC_A_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3050 */
union VGT_INDX_OFFSET
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3051 */
union D1MODE_DATA_FORMAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3052 */
union CP_ST_BUFSZ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3053 */
union SQ_FETCH_RT_2
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3054 */
union MH_INT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3055 */
union XDVO_DATA_STRENGTH_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3056 */
union RB_AZ1_BC_CRC
{
  $F83D1B2D94D0030D653AB16B8AF85245 bitfields;
  $F83D1B2D94D0030D653AB16B8AF85245 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3057 */
union RBBM_INT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3058 */
union PCIE_PERF_CNTL_EVENT1_PORT_SEL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3059 */
union TCB_FETCH_GEN_SECTOR_WALKER1_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3060 */
union PCIE_HDR_LOG3
{
  $A4F009701EE0D7664BF5B13FAEAC641E bitfields;
  $A4F009701EE0D7664BF5B13FAEAC641E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3061 */
union PA_CL_UCP_2_Z
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3062 */
union TP0_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3063 */
union SQ_INSTRUCTION_CF_LOOP_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3064 */
union AZ1_MRU_BANK4_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3065 */
union VGT_HOS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3066 */
union VC_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3067 */
union MC1_INTERRUPT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3068 */
union HZ_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3069 */
union CP_IB2D_BUFSZ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3070 */
union CP_RT14_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3071 */
union MC0_TIMING_CNTL_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3072 */
union RTS_Z_REF
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3073 */
union XDVO_DEBUG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3074 */
union PA_SU_DEBUG_DATA
{
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bitfields;
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3075 */
union NB_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3076 */
union PCIE_CAP_LIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3077 */
union BSB_WRAPPER_PRBS23_ERRCNT1
{
  $15DB5634CB6A8B826254D4E66831D245 bitfields;
  $15DB5634CB6A8B826254D4E66831D245 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3078 */
union AZ1_MRT_STATE_DWORD1
{
  $E4FA5B1F16754C9FD3F9ED1E344058AB bitfields;
  $E4FA5B1F16754C9FD3F9ED1E344058AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3079 */
union HSIO_PHASE_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3080 */
union BIU_INT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3081 */
union XDVO_DEBUG4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3082 */
union AZ1_MRU_BANK8_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3083 */
union RTS_WD_EDGE_2_DIST_LSBS
{
  $34692B0B970D9F8643448B91C72DAB44 bitfields;
  $34692B0B970D9F8643448B91C72DAB44 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3084 */
union AZ0_COPY_STATE_DWORD0
{
  $1A85827550E5BEDC52855A27F6ADB24A bitfields;
  $1A85827550E5BEDC52855A27F6ADB24A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3085 */
union SQ_EO_RT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3086 */
union FSB_TX_PMC3
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3087 */
union D1GRPH_PITCH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3088 */
union COHER_BASE_RT
{
  $65FCA93EA0DF635F734C67FDB6EB4292 bitfields;
  $65FCA93EA0DF635F734C67FDB6EB4292 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3089 */
union CP_D2_EOL_SOF_COUNTER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3090 */
union D1CRTC_V_BLANK_START_END
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3091 */
union CRTC1_DEBUG_02
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3092 */
union ROM_SIMD_PIPE_DISABLE_REGISTER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3093 */
union PA_SC_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3094 */
union VGT_MULTI_PRIM_IB_RESET_INDX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3095 */
union MC0_RD_BUFFER_CNTL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3096 */
struct $961906EDFD3CC694D67C09C3A3FF5007
{
  unsigned int RX_TLP_HDR3;
};

/* 3097 */
union PCIE_RX_TLP_HDR3
{
  $961906EDFD3CC694D67C09C3A3FF5007 bitfields;
  $961906EDFD3CC694D67C09C3A3FF5007 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3098 */
union SQ_2D_PIXEL_CONSTANT_2
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3099 */
union D1CRTC_INTERLACE_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3100 */
union VGT_DEBUG_REG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3101 */
union TP3_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3102 */
union INTERRUPT_PIN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3103 */
union FSB_LX_DEBUG_HI_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3104 */
union MC1_ARBITRATION_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3105 */
union FSB_LR_CTRL_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3106 */
union TCB_TAG2_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3107 */
union PCIE_PORT_INDEX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3108 */
union D1CRTC_OVERSCAN_RIGHT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3109 */
union DO_TEST_DEBUG_INDEX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3110 */
union TCF_PERFCOUNTER3_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3111 */
union PCIE_PERF_CNTL_SLV_NS_C_CLK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3112 */
struct $7D6D3BA3484323EE6A5FF95E56B0E1C2
{
  unsigned int STATE_DEBUG_DATA;
};

/* 3113 */
union CP_STATE_DEBUG_DATA
{
  $7D6D3BA3484323EE6A5FF95E56B0E1C2 bitfields;
  $7D6D3BA3484323EE6A5FF95E56B0E1C2 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3114 */
union DMIF_DEBUG02
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3115 */
union TP0_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3116 */
union DEVICE_CAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3117 */
union TCO_QUAD3_DEBUG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3118 */
union VGT_PERFCOUNTER2_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3119 */
union VC_DEBUG_REG7
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3120 */
union PA_SC_LINE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3121 */
union PA_SC_DEBUG_ITER_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3122 */
union TP2_CHECKSUM_PIXEL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3123 */
union FSB_LR_CTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3124 */
union PCIE_HW_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3125 */
struct $2F261BB8DEC69E871062A24ECEC7A42B
{
  unsigned int ME_RDADDR;
};

/* 3126 */
union CP_ME_RDADDR
{
  $2F261BB8DEC69E871062A24ECEC7A42B bitfields;
  $2F261BB8DEC69E871062A24ECEC7A42B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3127 */
union REG_MACRO_ADDR_7
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3128 */
union DC_LUT_PWL_DATA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3129 */
union PCIE_ROOT_ERR_CMD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3130 */
union MC0_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3131 */
union CP_RT_BUFSZ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3132 */
union RB_HSIO_PHASE_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3133 */
union VGT_PERFCOUNTER3_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3134 */
union SQ_THREAD_ARB_PRIORITY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3135 */
union FSB_TR_DEBUG_LO_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3136 */
union RB_BLENDCONTROL1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3137 */
union AZ0_LOOPBACK_PATTERN0PHS3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3138 */
union IOC_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3139 */
union DC_LUTA_BLACK_OFFSET_BLUE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3140 */
union SQ_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3141 */
union CP_RT8_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3142 */
union DC_LUTA_BLACK_OFFSET_RED
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3143 */
union TST_EDGE_DETECT_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3144 */
union PA_SC_PERFCOUNTER1_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3145 */
union SQ_INSTRUCTION_VFETCH_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3146 */
union CP_STQ_RT_ST_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3147 */
union PA_SC_DEBUG_SR_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3148 */
union CP_RT1_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3149 */
struct $A3493925C78D876838AACA6FA96A3BD4
{
  unsigned int DC_TEST_DEBUG_BUS_CLK1_SEL;
};

/* 3150 */
union DC_TEST_DEBUG_BUS_CLK1_SEL
{
  $A3493925C78D876838AACA6FA96A3BD4 bitfields;
  $A3493925C78D876838AACA6FA96A3BD4 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3151 */
union CP_CPU_INT_ACK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3152 */
union TCD_INPUT0_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3153 */
union TP0_CHECKSUM_PIXEL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3154 */
union SQ_INSTRUCTION_VFETCH_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3155 */
struct $0A3D1D3EDC348373DF7C11B6E5EB8CDC
{
  unsigned int VPORT_XSCALE;
};

/* 3156 */
union PA_CL_VPORT_XSCALE
{
  $0A3D1D3EDC348373DF7C11B6E5EB8CDC bitfields;
  $0A3D1D3EDC348373DF7C11B6E5EB8CDC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3157 */
union CP_DMA_SRC_ADDR_STAT
{
  $AD1100F3D1031E4DBACF76A066D429C1 bitfields;
  $AD1100F3D1031E4DBACF76A066D429C1 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3158 */
union EP_MEM_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3159 */
union EP_GC_MMR_BAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3160 */
struct $2937DDE0A767A90A745540A2F29D13FF
{
  unsigned int ID03_DMIF_DCP_OVL_DATA;
};

/* 3161 */
union ID03_DMIF_DCP_DATA_RETURN3
{
  $2937DDE0A767A90A745540A2F29D13FF bitfields;
  $2937DDE0A767A90A745540A2F29D13FF bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3162 */
union RB_HSIO_PHASE_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3163 */
union FSB_TLA_COUNT0_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3164 */
union PGL_CTL0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3165 */
struct $3DF03C48C7757848CFC786EC0E6B2BB1
{
  unsigned int SCRATCH_CMP_HIGH;
};

/* 3166 */
union SCRATCH_CMP_HI
{
  $3DF03C48C7757848CFC786EC0E6B2BB1 bitfields;
  $3DF03C48C7757848CFC786EC0E6B2BB1 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3167 */
union PCIE_PERF_COUNT1_MST_C_CLK
{
  $67D6671016B8FCE0C30C03366012046C bitfields;
  $67D6671016B8FCE0C30C03366012046C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3168 */
union EP_LATENCY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3169 */
union MC0_TIMING_CNTL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3170 */
union D1SCL_UNDERFLOW_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3171 */
struct $99208605618886FDEB433873F92EB4A7
{
  unsigned int BIN_SELECT_HI;
};

/* 3172 */
union CP_BIN_SELECT_HI
{
  $99208605618886FDEB433873F92EB4A7 bitfields;
  $99208605618886FDEB433873F92EB4A7 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3173 */
union BIU_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3174 */
union MC0_SECURE_MEMORY_APERTURE_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3175 */
union CGM_DRAM_CNTL_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3176 */
struct $43D7F06A21300A8CDBE12F4EAC66494A
{
  unsigned int VS_DONE_DATA;
};

/* 3177 */
union CP_ME_VS_EVENT_DATA
{
  $43D7F06A21300A8CDBE12F4EAC66494A bitfields;
  $43D7F06A21300A8CDBE12F4EAC66494A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3178 */
union MC0_DRAM_CMD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3179 */
union CP_RT5_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3180 */
union D1MODE_VIEWPORT_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3181 */
union CP_RT4_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3182 */
union RB_DEPTH_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3183 */
union CP_RT13_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3184 */
union FSB_LX_ERRINJ0_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3185 */
union PCIE_PERF_CNTL_TXCLK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3186 */
union IOC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3187 */
union AZ0_RESET_SAMPLE_COUNTERS
{
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bitfields;
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3188 */
struct $7DF0D2B6B75A70F4B4A90C3399035EB4
{
  unsigned int RX_TLP_HDR1;
};

/* 3189 */
union PCIE_RX_TLP_HDR1
{
  $7DF0D2B6B75A70F4B4A90C3399035EB4 bitfields;
  $7DF0D2B6B75A70F4B4A90C3399035EB4 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3190 */
union TPC_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3191 */
union PCIE_CFG_SCRATCH2
{
  $F02F2B8F83EECAD70F9DC9E1A71CF83B bitfields;
  $F02F2B8F83EECAD70F9DC9E1A71CF83B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3192 */
union PCIE_HDR_LOG2
{
  $A4F009701EE0D7664BF5B13FAEAC641E bitfields;
  $A4F009701EE0D7664BF5B13FAEAC641E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3193 */
union FSB_LR_DEBUG_HI_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3194 */
union BSB_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3195 */
union BSB_WRAPPER_PRBS_CTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3196 */
union CRS_TIMER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3197 */
union VGT_MIN_VTX_INDX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3198 */
union FSB_LX_DEBUG_HI_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3199 */
union REG_MACRO_DATA_5
{
  $19CC4DC896F4DCC4A69DEE0B8343B227 bitfields;
  $19CC4DC896F4DCC4A69DEE0B8343B227 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3200 */
union PA_CL_UCP_0_Z
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3201 */
union VGT_DMA_DATA_FIFO_DEPTH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3202 */
union CP_RT7_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3203 */
union REG_MACRO_DATA_0
{
  $19CC4DC896F4DCC4A69DEE0B8343B227 bitfields;
  $19CC4DC896F4DCC4A69DEE0B8343B227 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3204 */
union SQ_CONTEXT_MISC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3205 */
union MC1_STATUS_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3206 */
union TP0_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3207 */
union PA_CL_UCP_1_Y
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3208 */
union CP_RB_RPTR_WR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3209 */
struct $A4F10595F8C9B3F564EF36555E93B7DD
{
  unsigned int PERFCOUNTER0_LOW;
};

/* 3210 */
union BIF_PERFCOUNTER0_LOW
{
  $A4F10595F8C9B3F564EF36555E93B7DD bitfields;
  $A4F10595F8C9B3F564EF36555E93B7DD bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3211 */
union D1OVL_CONTROL1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3212 */
union VGT_DRAW_INIT_FIFO_DEPTH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3213 */
union FSB_LX_PMCTRL_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3214 */
union PA_SU_PERFCOUNTER2_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3215 */
union SQ_FETCH_5
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3216 */
union FSB_LR_ERRCAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3217 */
union FSB_TX_DEBUG_LO_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3218 */
union VGT_VTX_VECT_EJECT_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3219 */
union CP_RT_ME_RAM_WADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3220 */
union D1CRTC_BLANK_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3221 */
union FSB_LR_DEBUG_LO_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3222 */
union TPC_DEBUG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3223 */
union TCF_PERFCOUNTER5_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3224 */
union FSB_LX_VCARB_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3225 */
union RB_HSIO_ROUNDTRIP_LATENCY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3226 */
union AZ0_RESET_CRC_COUNTERS
{
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bitfields;
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3227 */
union SQ_ACTIVITY_METER_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3228 */
union FSB_TR_CTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3229 */
union FSB_TLA_COMPR_CARE_MASK2
{
  $186B2936788B72FD0DD5821940E18FE8 bitfields;
  $186B2936788B72FD0DD5821940E18FE8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3230 */
union TCF_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3231 */
union FSB_LX_LERST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3232 */
struct $88B19AC095FEBFE9F461024495DCF80E
{
  unsigned int SCRATCH_REG4;
};

/* 3233 */
union SCRATCH_REG4
{
  $88B19AC095FEBFE9F461024495DCF80E bitfields;
  $88B19AC095FEBFE9F461024495DCF80E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3234 */
struct $BAFBABD929A58BFE874C95C0D64ECFD2
{
  unsigned int F00_Idle_Pattern;
};

/* 3235 */
union FSB_LX_IDLE_PATT_AND
{
  $BAFBABD929A58BFE874C95C0D64ECFD2 bitfields;
  $BAFBABD929A58BFE874C95C0D64ECFD2 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3236 */
union FSB_LX_PHYDATA_OR
{
  $194485D67899467926627C751ADB7196 bitfields;
  $194485D67899467926627C751ADB7196 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3237 */
union VGT_LAST_COPY_STATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3238 */
union PCIE_PERF_COUNT0_SLV_R_CLK
{
  $3DFBE25ECCF239684927ED8DF1EFACB3 bitfields;
  $3DFBE25ECCF239684927ED8DF1EFACB3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3239 */
union AZ0_SECONDARY_STATE_DWORD0
{
  $1A85827550E5BEDC52855A27F6ADB24A bitfields;
  $1A85827550E5BEDC52855A27F6ADB24A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3240 */
union AZ0_LOOPBACK_PATTERN2PHS3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3241 */
union AZ1_LOOPBACK_PATTERN2PHS2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3242 */
union D1CRTC_FRAME_COUNT_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3243 */
union MC1_RD_STR_DLY_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3244 */
union FSB_TLA_PATT_CARE_MASK1
{
  $8C73C7457AC982BE9C676ACCA1560461 bitfields;
  $8C73C7457AC982BE9C676ACCA1560461 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3245 */
union BSB_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3246 */
union RB_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3247 */
union AZ0_MRU_BANK2_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3248 */
union TCF_PERFCOUNTER5_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3249 */
union SQ_FLOW_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3250 */
struct $18429E51BFAEA5E4C77F89CD1958A222
{
  unsigned int SCRATCH_REG3;
};

/* 3251 */
union SCRATCH_REG3
{
  $18429E51BFAEA5E4C77F89CD1958A222 bitfields;
  $18429E51BFAEA5E4C77F89CD1958A222 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3252 */
union D1CRTC_OVERSCAN_TOP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3253 */
union PA_SC_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3254 */
union MC1_TIMING_CNTL_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3255 */
union PMI_STATUS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3256 */
struct $26B4462F33C3C0DDCB59B0E02FD73F62
{
  unsigned int DC_PERFCOUNTER1_LOW;
};

/* 3257 */
union DC_PERFCOUNTER1_LOW
{
  $26B4462F33C3C0DDCB59B0E02FD73F62 bitfields;
  $26B4462F33C3C0DDCB59B0E02FD73F62 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3258 */
union CP_RT0_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3259 */
union PA_CL_UCP_1_Z
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3260 */
struct $878286932965F660F01221A1E0A76026
{
  unsigned int F00_LFIRST;
};

/* 3261 */
union FSB_LX_LFIRST
{
  $878286932965F660F01221A1E0A76026 bitfields;
  $878286932965F660F01221A1E0A76026 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3262 */
union D1GRPH_X_END
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3263 */
union PCIE_VC0_RESOURCE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3264 */
union D1CRTC_DOUBLE_BUFFER_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3265 */
union DCCG_ONE_SHOT_CLOCKING_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3266 */
union TP1_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3267 */
union GC_PM_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3268 */
union DC_LUTA_WHITE_OFFSET_GREEN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3269 */
union MPLL_CNTL_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3270 */
union FSB_LX_CTRL_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3271 */
union SOFT_STRAP_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3272 */
union D1GRPH_COLOR_MATRIX_COEF_3_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3273 */
union RB_HSIO_PHASE_OUT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3274 */
union CP_RT1_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3275 */
union PCIE_TX_CREDITS_LIMIT_CPLD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3276 */
union MC0_POINTER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3277 */
union D1GRPH_COLOR_MATRIX_COEF_3_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3278 */
union DVOACLK_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3279 */
union RB_COLOR2_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3280 */
union PA_SC_VIZ_QUERY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3281 */
union AZ1_RESET_LOOPBACK_TRANSMIT_LFSR
{
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bitfields;
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3282 */
union TCM_CHICKEN
{
  $08BE24B24428CE8CF07D534598556659 bitfields;
  $08BE24B24428CE8CF07D534598556659 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3283 */
union FSB_TX_CMDMM0_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3284 */
union PA_SC_DEBUG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3285 */
union MC0_PAD_IF_CNTL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3286 */
union CP_PERFMON_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3287 */
union DISP_INTERRUPT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3288 */
union CP_RB_RPTR_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3289 */
union PA_CL_UCP_4_W
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3290 */
union CP_RT6_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3291 */
union D1GRPH_COLOR_MATRIX_COEF_3_4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3292 */
union DMIF_DEBUG00
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3293 */
union RB_BC_AZ_CRC_MASK
{
  $0804D404337EFE7B221C3E13733BD12C bitfields;
  $0804D404337EFE7B221C3E13733BD12C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3294 */
struct $3DB9CE66BDE78DF4840D0EA12F0AF31B
{
  unsigned int DOUT_DEBUG;
};

/* 3295 */
union DOUT_DEBUG
{
  $3DB9CE66BDE78DF4840D0EA12F0AF31B bitfields;
  $3DB9CE66BDE78DF4840D0EA12F0AF31B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3296 */
union TCF_PERFCOUNTER10_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3297 */
union CP_PFP_RT_UCODE_DATA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3298 */
union CP_RT9_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3299 */
union VC_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3300 */
union VGT_GROUP_VECT_0_FMT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3301 */
union MH_PERFMON_PERFCOUNTER2_LOW
{
  $9DF4F6E5215C531AE3FF853A3F7D9057 bitfields;
  $9DF4F6E5215C531AE3FF853A3F7D9057 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3302 */
union SQ_2D_PIXEL_CONSTANT_0
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3303 */
union AZ1_LOOPBACK_PATTERN1PHS1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3304 */
struct $72985E6ACDCA747809BF69A3B3AC79A1
{
  unsigned int NB_ADAPTER_ID_W;
};

/* 3305 */
union NB_ADAPTER_ID_W
{
  $72985E6ACDCA747809BF69A3B3AC79A1 bitfields;
  $72985E6ACDCA747809BF69A3B3AC79A1 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3306 */
union FSB_TLA_PATTERN3
{
  $8C73C7457AC982BE9C676ACCA1560461 bitfields;
  $8C73C7457AC982BE9C676ACCA1560461 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3307 */
union RTS_Z_DX_MSBS
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3308 */
struct $53206EF834BD89CD4384E41FBE459D48
{
  unsigned int ID01_DMIF_DCP_GRPH_DATA_LOW;
};

/* 3309 */
union ID01_DMIF_DCP_DATA_RETURN1
{
  $53206EF834BD89CD4384E41FBE459D48 bitfields;
  $53206EF834BD89CD4384E41FBE459D48 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3310 */
struct $F031981E5CE8CF5AF5DBCB0A439EDDB6
{
  unsigned int DWORD3;
};

/* 3311 */
union AZ0_SECONDARY_STATE_DWORD3
{
  $F031981E5CE8CF5AF5DBCB0A439EDDB6 bitfields;
  $F031981E5CE8CF5AF5DBCB0A439EDDB6 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3312 */
union CLIPPER_DEBUG_REG08
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3313 */
union FSB_TX_CMDMM1_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3314 */
union PA_CL_VTE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3315 */
union MC0_INTERRUPT_ACK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3316 */
union FSB_LX_CTRL_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3317 */
union SCLK_SOFT_RESET
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3318 */
union MDLL_CNTL1_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3319 */
struct $56D03D4156B25155A4B25219E6F9AF10
{
  unsigned int MRU_DEPTH_MASK;
};

/* 3320 */
union AZ0_MRU_DEPTH_MASK
{
  $56D03D4156B25155A4B25219E6F9AF10 bitfields;
  $56D03D4156B25155A4B25219E6F9AF10 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3321 */
union TCB_FETCH_GEN_PIPE0_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3322 */
union CP_2D_BRUSH_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3323 */
union PMI_CAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3324 */
union FSB_TLA_PATTERN0
{
  $8C73C7457AC982BE9C676ACCA1560461 bitfields;
  $8C73C7457AC982BE9C676ACCA1560461 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3325 */
union SQ_INST_STORE_MANAGMENT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3326 */
union RB_COLOR0_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3327 */
union RB_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3328 */
union VC_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3329 */
struct $3B1BAC4C79C72D8166A76FC312C1FAF5
{
  unsigned int IOC_BSB_SLV_REQ_CRC_1;
};

/* 3330 */
union IOC_BSB_SLV_REQ_CRC_1
{
  $3B1BAC4C79C72D8166A76FC312C1FAF5 bitfields;
  $3B1BAC4C79C72D8166A76FC312C1FAF5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3331 */
union CP_RT4_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3332 */
union RBBM_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3333 */
union BIF_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3334 */
union TP2_CHECKSUM_PIXEL_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3335 */
union IOC_INVALID_AP_COMMON
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3336 */
union FSB_LX_LERST_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3337 */
union NB_REVISION_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3338 */
union TCO_QUAD0_DEBUG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3339 */
union CP_RT6_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3340 */
union IOC_HARD_RESET
{
  $9EB016E58ABDCA134AA3BC7E1E125DC9 bitfields;
  $9EB016E58ABDCA134AA3BC7E1E125DC9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3341 */
union EP_HEADER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3342 */
union INTERRUPT_LINE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3343 */
union SQ_INSTRUCTION_CF_EXEC_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3344 */
union PCIE_RX_CREDITS_ALLOCATED
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3345 */
union FSB_LX_ERRINJ0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3346 */
union TP3_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3347 */
union MC1_DLL_MASTER_ADJ_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3348 */
union PCIE_HDR_LOG1
{
  $A4F009701EE0D7664BF5B13FAEAC641E bitfields;
  $A4F009701EE0D7664BF5B13FAEAC641E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3349 */
union RTS_Z_DY_MSBS
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3350 */
union VC_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3351 */
union IOC_PERFCOUNTER2_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3352 */
union AZ0_MRU_BANK14_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3353 */
struct $D75080A3FAFC1480FD86BFF82AD212D4
{
  unsigned int START;
};

/* 3354 */
union WRITEBACK_START
{
  $D75080A3FAFC1480FD86BFF82AD212D4 bitfields;
  $D75080A3FAFC1480FD86BFF82AD212D4 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3355 */
union FSB_TLA_PATTERN1
{
  $8C73C7457AC982BE9C676ACCA1560461 bitfields;
  $8C73C7457AC982BE9C676ACCA1560461 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3356 */
union BIU_PERFMON_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3357 */
union EP_UNUSED_BAR_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3358 */
union SQ_WRAPPING_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3359 */
union CG_INT_ACK_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3360 */
union D1SCL_VERT_FILTER_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3361 */
union TCR_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3362 */
union CP_MEQ_AVAIL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3363 */
union MEM_BASE_LIMIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3364 */
struct $3B9A8E5E77C0DC2C04B9749E825AD80D
{
  unsigned int PREF_BASE_UPPER;
};

/* 3365 */
union PREF_BASE_UPPER
{
  $3B9A8E5E77C0DC2C04B9749E825AD80D bitfields;
  $3B9A8E5E77C0DC2C04B9749E825AD80D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3366 */
union PCIE_TX_CREDITS_LIMIT_D
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3367 */
union DC_DOUT_DEBUG_MUX_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3368 */
union AZ1_SECONDARY_STATE_DWORD0
{
  $1A85827550E5BEDC52855A27F6ADB24A bitfields;
  $1A85827550E5BEDC52855A27F6ADB24A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3369 */
union FSB_TR_DEBUG_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3370 */
union PCIE_PERF_COUNT0_MST_C_CLK
{
  $3DFBE25ECCF239684927ED8DF1EFACB3 bitfields;
  $3DFBE25ECCF239684927ED8DF1EFACB3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3371 */
union FSB_LX_PMC1_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3372 */
union STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3373 */
union IOC_TST_MODE_ENABLE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3374 */
union PCIE_VC0_ENH_CAP_HEADER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3375 */
union AZ1_MRU_BANK18_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3376 */
union VC_DEBUG_REG2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3377 */
struct $2FF162FEB01F8F25CEF3D5BAB92EFEF5
{
  unsigned int DC_PERFCOUNTER0_LOW;
};

/* 3378 */
union DC_PERFCOUNTER0_LOW
{
  $2FF162FEB01F8F25CEF3D5BAB92EFEF5 bitfields;
  $2FF162FEB01F8F25CEF3D5BAB92EFEF5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3379 */
union D1OVL_ENABLE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3380 */
struct $344FFF22A404647F93E655E31EE460AE
{
  unsigned int RX_DLLP0;
};

/* 3381 */
union PCIE_RX_DLLP0
{
  $344FFF22A404647F93E655E31EE460AE bitfields;
  $344FFF22A404647F93E655E31EE460AE bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3382 */
union D1SCL_UPDATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3383 */
union DMIF_DEBUG01
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3384 */
struct $1CFC7AF0E7E48E6230936C78C558E6A0
{
  unsigned int CRTC_DEBUG_ID;
};

/* 3385 */
union CRTC_DEBUG_ID
{
  $1CFC7AF0E7E48E6230936C78C558E6A0 bitfields;
  $1CFC7AF0E7E48E6230936C78C558E6A0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3386 */
struct $B8814EF39F9C78C5BFF0F289E7D48081
{
  unsigned int DC_TEST_DEBUG_DATA;
};

/* 3387 */
union DC_TEST_DEBUG_DATA
{
  $B8814EF39F9C78C5BFF0F289E7D48081 bitfields;
  $B8814EF39F9C78C5BFF0F289E7D48081 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3388 */
union PA_SU_LINE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3389 */
union TCF_PERFCOUNTER10_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3390 */
union SQ_INSTRUCTION_CF_JMP_CALL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3391 */
union FSB_LX_DEBUG_LO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3392 */
union AZ0_LOOPBACK_PATTERN1PHS0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3393 */
union CP_DMA_COMMAND_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3394 */
union PCIE_TX_SEQ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3395 */
union PA_SU_DEBUG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3396 */
union COHER_SIZE_RT
{
  $456D821D968D6650962725F540BD23A5 bitfields;
  $456D821D968D6650962725F540BD23A5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3397 */
union VGT_GROUP_FIRST_DECR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3398 */
union ID09_LUT_DATA_R
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3399 */
union HEADER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3400 */
union TCR_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3401 */
union SQ_INSTRUCTION_ALU_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3402 */
union VC_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3403 */
struct $91C6EFD23245348926D1911CFE67FFDC
{
  unsigned int PS_DONE_DATA;
};

/* 3404 */
union CP_ME_PS_EVENT_DATA
{
  $91C6EFD23245348926D1911CFE67FFDC bitfields;
  $91C6EFD23245348926D1911CFE67FFDC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3405 */
union BIOS_2_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3406 */
union CFG_MMR_BAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3407 */
struct $50382D1AA37BC9A1BC553D479FE5BEFE
{
  unsigned int CF_DONE_DATA;
};

/* 3408 */
union CP_ME_CF_EVENT_DATA
{
  $50382D1AA37BC9A1BC553D479FE5BEFE bitfields;
  $50382D1AA37BC9A1BC553D479FE5BEFE bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3409 */
union PA_CL_GB_VERT_CLIP_ADJ
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3410 */
union SQ_FETCH_RT_5
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3411 */
struct $893C46B77E951A51E650E543109F5959
{
  unsigned int IOC_BSB_SLV_REQ_ARB;
};

/* 3412 */
union IOC_BSB_SLV_CPL_ARB
{
  $893C46B77E951A51E650E543109F5959 bitfields;
  $893C46B77E951A51E650E543109F5959 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3413 */
struct $FE675BEDABF2E4BFA4E16F7D7A89CD44
{
  unsigned int CRTC_DEBUG;
};

/* 3414 */
union CRTC_DEBUG
{
  $FE675BEDABF2E4BFA4E16F7D7A89CD44 bitfields;
  $FE675BEDABF2E4BFA4E16F7D7A89CD44 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3415 */
union D1OVL_PITCH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3416 */
union CP4_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3417 */
union D1GRPH_SURFACE_OFFSET_X
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3418 */
union ROM_PAR_ADDR_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3419 */
union CP_RT0_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3420 */
union SB_INTBAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3421 */
union HZ_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3422 */
union TCR_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3423 */
union SB_REGPROG_INF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3424 */
union CP_ME_VS_EVENT_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3425 */
union VGT_DEBUG_REG8
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3426 */
union BIOS_8_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3427 */
union RB_COLORCONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3428 */
union MC0_WR_STR_DLL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3429 */
union FSB_TX_PMC4_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3430 */
struct $BB13BB35D7C37BF0F5AF26231F080C1C
{
  unsigned int ZFAIL_SAMPLES;
};

/* 3431 */
union AZ0_ZFAIL_SAMPLES
{
  $BB13BB35D7C37BF0F5AF26231F080C1C bitfields;
  $BB13BB35D7C37BF0F5AF26231F080C1C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3432 */
union PCLK_SOFT_RESET
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3433 */
union PCIE_PERF_CNTL_MST_R_CLK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3434 */
union MSI_MSG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3435 */
union SQ_FETCH_2
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3436 */
union CP_ME_SCREEN_EXT_RPT_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3437 */
union CP_RT_ME_RAM_RADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3438 */
union FSB_TLA_TRACE_ARRAY_DATA1
{
  $816B3348B3C418EE1045AA9A763ABB00 bitfields;
  $816B3348B3C418EE1045AA9A763ABB00 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3439 */
union GC_BIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3440 */
union HSIO_DLL_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3441 */
union SQ_PS_CONST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3442 */
union MC1_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3443 */
struct $67A88092CF4E9096EAB9D707FD357B46
{
  unsigned int DO_TEST_DEBUG_DATA_TRIGGER_PATTERN;
};

/* 3444 */
union DO_TEST_DEBUG_DATA_TRIGGER_PATTERN
{
  $67A88092CF4E9096EAB9D707FD357B46 bitfields;
  $67A88092CF4E9096EAB9D707FD357B46 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3445 */
union PCIE_P_STR_CNTL_UPDATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3446 */
union RBBM_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3447 */
union SQ_INSTRUCTION_CF_ALLOC_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3448 */
union RBBM_SOFT_RESET
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3449 */
struct $7DD495B6F4BF46F940D656DE342BF8B4
{
  unsigned int BAD_IOC_FLUSH_ACK_TAG;
};

/* 3450 */
union BIU_INT_BAD_FLUSH_ACK_TAG
{
  $7DD495B6F4BF46F940D656DE342BF8B4 bitfields;
  $7DD495B6F4BF46F940D656DE342BF8B4 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3451 */
union DC_TEST_DEBUG_TRIGGER_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3452 */
union SQ_WRAPPING_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3453 */
union FSB_TLA_COMPR_CARE_MASK1
{
  $186B2936788B72FD0DD5821940E18FE8 bitfields;
  $186B2936788B72FD0DD5821940E18FE8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3454 */
union RB_HSIO_DLL_ADJ6
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3455 */
union MC1_DRAM_CMD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3456 */
union TCF_PERFCOUNTER11_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3457 */
union AZ0_MRU_BANK15_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3458 */
union TP2_CHECKSUM_PIXEL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3459 */
union MC1_DLL_MASTER_ADJ_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3460 */
union AZ1_COPY_STATE_DWORD2
{
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bitfields;
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3461 */
union AZ1_MRU_DEPTH_MASK
{
  $56D03D4156B25155A4B25219E6F9AF10 bitfields;
  $56D03D4156B25155A4B25219E6F9AF10 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3462 */
union RTS_I_W_REF
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3463 */
union CP_ST_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3464 */
union AZ1_MRU_BANK5_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3465 */
union RTS_MISC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3466 */
union TCF_CHICKEN
{
  $08BE24B24428CE8CF07D534598556659 bitfields;
  $08BE24B24428CE8CF07D534598556659 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3467 */
union FSB_TX_DEBUG_AUX_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3468 */
struct $0DE236D524AA70F1BF5FF63CE981BCB5
{
  unsigned int COMMAND;
};

/* 3469 */
union CP_RT_DMA_COMMAND
{
  $0DE236D524AA70F1BF5FF63CE981BCB5 bitfields;
  $0DE236D524AA70F1BF5FF63CE981BCB5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3470 */
struct $9741F46BFE1FCF98AA8D092A43B211CA
{
  unsigned int IOC_BSB_SLV_REQ_CRC_0;
};

/* 3471 */
union IOC_BSB_SLV_REQ_CRC_0
{
  $9741F46BFE1FCF98AA8D092A43B211CA bitfields;
  $9741F46BFE1FCF98AA8D092A43B211CA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3472 */
union RB_HSIO_DLL_ADJ0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3473 */
union SQ_VS_PROGRAM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3474 */
union DC_SURFACE_0_EXTENT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3475 */
union D1SCL_COEF_RAM_TAP_DATA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3476 */
union RTS_EDGE_0_DIST_LSBS
{
  $34692B0B970D9F8643448B91C72DAB44 bitfields;
  $34692B0B970D9F8643448B91C72DAB44 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3477 */
union CP_RT_ST_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3478 */
union PA_SC_DEBUG_DATA
{
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bitfields;
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3479 */
union MC1_DRAM_CONFIG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3480 */
union TP2_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3481 */
union SQ_INSTRUCTION_CF_JMP_CALL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3482 */
union TCD_DEGAMMA_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3483 */
union SQ_2D_PIXEL_CONSTANT_1
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3484 */
union FSB_TLA_COUNT4_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3485 */
union D1SCL_HORZ_FILTER_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3486 */
struct $631360E153DBFD54F50D91416E65E698
{
  unsigned int SIDEBAND_DATA;
};

/* 3487 */
union RB_SIDEBAND_DATA
{
  $631360E153DBFD54F50D91416E65E698 bitfields;
  $631360E153DBFD54F50D91416E65E698 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3488 */
union FSB_TX_PMC3_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3489 */
union D1COLOR_SUBSAMPLE_CRCB_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3490 */
union SETUP_DEBUG_REG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3491 */
union DC_SURFACE_2_EXTENT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3492 */
union VGT_GROUP_PRIM_TYPE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3493 */
union PCIE_PERF_CNTL_SLV_S_C_CLK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3494 */
union DCCG_DEBUG_01
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3495 */
struct $F8423EDFAEBAFA0149608CE6A40E6919
{
  unsigned int RDBUF_DATA;
};

/* 3496 */
union MC1_RDBUF_DATA
{
  $F8423EDFAEBAFA0149608CE6A40E6919 bitfields;
  $F8423EDFAEBAFA0149608CE6A40E6919 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3497 */
struct $42B9787B08847E59ED01A22DEE155CDA
{
  unsigned int NRT_WRITE_DATA;
};

/* 3498 */
union CP_ME_NRT_DATA
{
  $42B9787B08847E59ED01A22DEE155CDA bitfields;
  $42B9787B08847E59ED01A22DEE155CDA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3499 */
union VC_DEBUG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3500 */
union TP3_CHECKSUM_PIXEL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3501 */
union TP1_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3502 */
struct $B112D6EA0AB9AB01D41EEE260CEC7A83
{
  unsigned int BLEND_ALPHA;
};

/* 3503 */
union RB_BLEND_ALPHA
{
  $B112D6EA0AB9AB01D41EEE260CEC7A83 bitfields;
  $B112D6EA0AB9AB01D41EEE260CEC7A83 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3504 */
union MC0_SECURE_MEMORY_APERTURE_LOG_MH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3505 */
union CP_ME_PS_EVENT_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3506 */
union CP_RB_WPTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3507 */
struct $1228860D65434DE9C13AB57EC89980D9
{
  unsigned int PERFCOUNT_LO;
};

/* 3508 */
union CP_PERFCOUNTER_LO
{
  $1228860D65434DE9C13AB57EC89980D9 bitfields;
  $1228860D65434DE9C13AB57EC89980D9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3509 */
union FSB_LR_DEBUG_LO_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3510 */
union TCA_PROBE_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3511 */
union FSB_TLA_TRACEN_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3512 */
union NB_BIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3513 */
union SCLK_PWRMGT_CNTL1_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3514 */
union PCIE_PERF_COUNT0_SLV_NS_C_CLK
{
  $3DFBE25ECCF239684927ED8DF1EFACB3 bitfields;
  $3DFBE25ECCF239684927ED8DF1EFACB3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3515 */
union AZ1_MRU_BANK11_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3516 */
union DC_SURFACE_0_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3517 */
union FSB_LX_DADD_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3518 */
union PCIE_TX_CREDITS_LIMIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3519 */
union D1SCL_HORZ_FILTER_SCALE_RATIO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3520 */
union SQ_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3521 */
union D1SCL_VERT_FILTER_SCALE_RATIO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3522 */
union CP_QUEUE_THRESHOLDS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3523 */
union CP_RT7_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3524 */
union MC0_DLL_MASTER_ADJ_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3525 */
union CP_ME_NRT_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3526 */
union DCCG_DEBUG_03
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3527 */
union FSB_LR_DEBUG_HI_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3528 */
struct $E1678F28DA3E842E6DC3A1EBF5A1EAA9
{
  unsigned int DBG_DATA;
};

/* 3529 */
union DBG_READ_REG
{
  $E1678F28DA3E842E6DC3A1EBF5A1EAA9 bitfields;
  $E1678F28DA3E842E6DC3A1EBF5A1EAA9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3530 */
union FSB_TR_DEBUG_LO_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3531 */
union AZ0_EDRAM_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3532 */
union D1CRTC_V_SYNC_A
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3533 */
union FSB_TX_CMDMM0_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3534 */
union FB_START
{
  $D75080A3FAFC1480FD86BFF82AD212D4 bitfields;
  $D75080A3FAFC1480FD86BFF82AD212D4 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3535 */
union PG_SIZE
{
  $456D821D968D6650962725F540BD23A5 bitfields;
  $456D821D968D6650962725F540BD23A5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3536 */
struct $501BC1CAE2FFEAC26376932FBCE69127
{
  unsigned int CRC;
};

/* 3537 */
union VGT_CRC_SQ_DATA
{
  $501BC1CAE2FFEAC26376932FBCE69127 bitfields;
  $501BC1CAE2FFEAC26376932FBCE69127 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3538 */
union MC0_RD_STR_DLY_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3539 */
union GC_PMI_NXT_CAP_PTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3540 */
union RB_BLENDCONTROL3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3541 */
struct $9978CCBBDDEED2AA2ECBDF44ECC5037D
{
  unsigned int LFSR;
};

/* 3542 */
union AZ1_LOOPBACK_LFSR
{
  $9978CCBBDDEED2AA2ECBDF44ECC5037D bitfields;
  $9978CCBBDDEED2AA2ECBDF44ECC5037D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3543 */
union AZ1_LOOPBACK_PATTERN0PHS3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3544 */
struct $9671DB64547B7626A0DCAFE402C17DFD
{
  unsigned int ALPHA;
};

/* 3545 */
union SQ_CONSTANT_3
{
  $9671DB64547B7626A0DCAFE402C17DFD bitfields;
  $9671DB64547B7626A0DCAFE402C17DFD bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3546 */
union RB_HSIO_DLL_ADJ1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3547 */
union AZ0_COPY_STATE_DWORD2
{
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bitfields;
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3548 */
union AZ1_ZFAIL_SAMPLES
{
  $BB13BB35D7C37BF0F5AF26231F080C1C bitfields;
  $BB13BB35D7C37BF0F5AF26231F080C1C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3549 */
union RTS_WD_EDGE_1_DIST_LSBS
{
  $34692B0B970D9F8643448B91C72DAB44 bitfields;
  $34692B0B970D9F8643448B91C72DAB44 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3550 */
union CRTC1_DEBUG_01
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3551 */
union HSIO_DLL_ADJ3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3552 */
union SQ_PROGRAM_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3553 */
struct $88E5344864962FDC9880E43561EDE06B
{
  unsigned int PCIE_DATA;
};

/* 3554 */
union PCIE_DATA
{
  $88E5344864962FDC9880E43561EDE06B bitfields;
  $88E5344864962FDC9880E43561EDE06B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3555 */
union ID15_BLEND_DATA_B
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3556 */
union VGT_CRC_SQ_CTRL
{
  $501BC1CAE2FFEAC26376932FBCE69127 bitfields;
  $501BC1CAE2FFEAC26376932FBCE69127 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3557 */
union SB_HEADER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3558 */
union FSB_TX_PMCTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3559 */
union SQ_FETCH_1
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3560 */
union PCIE_RX_DLLP_CRC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3561 */
union PA_SC_MPASS_PS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3562 */
union PCIE_ERR_SRC_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3563 */
union DO_TEST_DEBUG_TRIGGER_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3564 */
union MC0_RD_BUFFER_CNTL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3565 */
union IOC_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3566 */
union SUB_BUS_NUMBER_LATENCY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3567 */
union CP_STQ_AVAIL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3568 */
union IOC_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3569 */
union REG_MACRO_DATA_1
{
  $19CC4DC896F4DCC4A69DEE0B8343B227 bitfields;
  $19CC4DC896F4DCC4A69DEE0B8343B227 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3570 */
union PCIE_ENH_ADV_ERR_RPT_CAP_HDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3571 */
struct $7A587EDBB3925DD89D960C3A03E640E4
{
  unsigned int IOC_BSB_SLV_CPL_CRC_0;
};

/* 3572 */
union IOC_BSB_SLV_CPL_CRC_0
{
  $7A587EDBB3925DD89D960C3A03E640E4 bitfields;
  $7A587EDBB3925DD89D960C3A03E640E4 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3573 */
union RB_SIDEBAND_BUSY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3574 */
union TCA_FIFO_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3575 */
union EP_VENDOR_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3576 */
union FPLL_CNTL_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3577 */
union CP_MIU_TAG_STAT0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3578 */
union FSB_TX_TERST_XSTP_AND
{
  $7B6B297C9FA746FF966A726DF7022A79 bitfields;
  $7B6B297C9FA746FF966A726DF7022A79 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3579 */
union DO_TEST_DEBUG_TRIGGER_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3580 */
union IOC_PERFCOUNTER3_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3581 */
union VGT_PERFCOUNTER0_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3582 */
union DC_LUTA_BLACK_OFFSET_GREEN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3583 */
union AZ1_EDRAM_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3584 */
union CP_IB2_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3585 */
union SQ_CF_RT_BOOLEANS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3586 */
union TCF_PERFCOUNTER7_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3587 */
struct $C3BDC9A4C165B95822193BE03C5BF9AF
{
  unsigned int BLEND_RED;
};

/* 3588 */
union RB_BLEND_RED
{
  $C3BDC9A4C165B95822193BE03C5BF9AF bitfields;
  $C3BDC9A4C165B95822193BE03C5BF9AF bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3589 */
union VGT_DEBUG_DATA
{
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bitfields;
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3590 */
union SQ_FETCH_RT_0
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3591 */
union CP_ME_RT_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3592 */
struct $51ACFD1C40A70F691E97306478CD7D59
{
  unsigned int BIN_SELECT_LO;
};

/* 3593 */
union CP_BIN_SELECT_LO
{
  $51ACFD1C40A70F691E97306478CD7D59 bitfields;
  $51ACFD1C40A70F691E97306478CD7D59 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3594 */
union DCCG_DEBUG_02
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3595 */
union FSB_LX_PMC5_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3596 */
union GC_REGPROG_INF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3597 */
union RTS_EDGE_0_DY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3598 */
union MH_PERFMON_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3599 */
union FSB_LX_PHYDATA
{
  $194485D67899467926627C751ADB7196 bitfields;
  $194485D67899467926627C751ADB7196 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3600 */
union FSB_TLA_TRACE_ARRAY_COUNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3601 */
struct $C8A8F1857A786A767933346E698910FF
{
  unsigned int DO_TEST_DEBUG_OUT_PIN_MASK;
};

/* 3602 */
union DO_TEST_DEBUG_OUT_PIN_MASK
{
  $C8A8F1857A786A767933346E698910FF bitfields;
  $C8A8F1857A786A767933346E698910FF bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3603 */
union MC0_RD_STR_DLY_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3604 */
union RTS_EDGE_0_DX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3605 */
union CGM_MC0_IO_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3606 */
union FSB_TLA_PATT_CARE_MASK3
{
  $8C73C7457AC982BE9C676ACCA1560461 bitfields;
  $8C73C7457AC982BE9C676ACCA1560461 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3607 */
union PA_CL_UCP_4_Z
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3608 */
union PCIE_P_IMP_CNTL_STRENGTH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3609 */
union RB_HSIO_DLL_ADJ7
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3610 */
union PCIE_TXRX_DEBUG_SEQNUM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3611 */
struct $CC965864E5B073E5B029CF69026074E0
{
  unsigned int ADAPTER_ID_W;
};

/* 3612 */
union EP_ADAPTER_ID_W
{
  $CC965864E5B073E5B029CF69026074E0 bitfields;
  $CC965864E5B073E5B029CF69026074E0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3613 */
union DC_GPIO_XDVODATA_Y
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3614 */
union RB_SIDEBAND_WR_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3615 */
union FSB_LX_DEBUG_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3616 */
union MSI_MSG_DATA_64
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3617 */
union TP1_CHECKSUM_PIXEL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3618 */
union WRITEBACK_SIZE
{
  $456D821D968D6650962725F540BD23A5 bitfields;
  $456D821D968D6650962725F540BD23A5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3619 */
union COHER_DEST_BASE_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3620 */
union DCCG_DEBUG_00
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3621 */
union AZ0_MRU_BANK19_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3622 */
union AZ1_MRU_BANK17_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3623 */
union FSB_TX_PMC0
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3624 */
struct $5B82758D7CB13EA832D8AFF80DB5116B
{
  unsigned int TOTAL_SAMPLES;
};

/* 3625 */
union AZ1_TOTAL_SAMPLES
{
  $5B82758D7CB13EA832D8AFF80DB5116B bitfields;
  $5B82758D7CB13EA832D8AFF80DB5116B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3626 */
union MC1_POINTER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3627 */
union MC0_DRAM_DQ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3628 */
union VGT_DEBUG_REG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3629 */
union SQ_PERFCOUNTER1_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3630 */
union MH_PERFMON_PERFCOUNTER0_LOW
{
  $9DF4F6E5215C531AE3FF853A3F7D9057 bitfields;
  $9DF4F6E5215C531AE3FF853A3F7D9057 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3631 */
union PCIE_VC0_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3632 */
union SQ_CONSTANT_1
{
  $7B27CC41F704822835C54C8B995766B5 bitfields;
  $7B27CC41F704822835C54C8B995766B5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3633 */
union NB_BASE_CODE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3634 */
union MH_INT_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3635 */
union CP_RT10_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3636 */
union SB_CACHE_LINE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3637 */
union SB_BIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3638 */
union CRTC1_DEBUG_06
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3639 */
union PCIE_VC0_CAP_REG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3640 */
union D1OVL_ALPHA_OUTSIDE_OVL_WINDOW
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3641 */
union RB_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3642 */
union FSB_LR_DEBUG_AUX_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3643 */
union PA_CL_UCP_3_Z
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3644 */
struct $EAC2BC57F44997F7036A02175C94CF57
{
  unsigned int XDVO_REGISTER_DATA;
};

/* 3645 */
union XDVO_REGISTER_DATA
{
  $EAC2BC57F44997F7036A02175C94CF57 bitfields;
  $EAC2BC57F44997F7036A02175C94CF57 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3646 */
union SB_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3647 */
union CLIPPER_DEBUG_REG03
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3648 */
union CP_INT_ACK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3649 */
union FSB_LX_DADD_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3650 */
union D1CRTC_FRAME_RESET_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3651 */
union PCIE_PERF_LATENCY_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3652 */
union AZ1_SECONDARY_STATE_DWORD3
{
  $F031981E5CE8CF5AF5DBCB0A439EDDB6 bitfields;
  $F031981E5CE8CF5AF5DBCB0A439EDDB6 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3653 */
union PA_SU_PERFCOUNTER3_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3654 */
union CP_RT2_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3655 */
union PCIE_P_PLL_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3656 */
union SQ_CONSTANT_RT_3
{
  $9671DB64547B7626A0DCAFE402C17DFD bitfields;
  $9671DB64547B7626A0DCAFE402C17DFD bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3657 */
union RB_HSIO_OE_OVERRIDE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3658 */
union MC1_CRC_READ
{
  $F83D1B2D94D0030D653AB16B8AF85245 bitfields;
  $F83D1B2D94D0030D653AB16B8AF85245 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3659 */
union XDVO_FORCE_DATA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3660 */
struct $FDE0CC4B3C43A269D2FB001360E877D0
{
  unsigned int RX_TLP_CRC;
};

/* 3661 */
union PCIE_RX_TLP_CRC
{
  $FDE0CC4B3C43A269D2FB001360E877D0 bitfields;
  $FDE0CC4B3C43A269D2FB001360E877D0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3662 */
union VGT_GROUP_VECT_0_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3663 */
union HSIO_DLL_ADJ6
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3664 */
union TP2_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3665 */
union SB_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3666 */
union ROOT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3667 */
union CP_MIU_TAG_STAT1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3668 */
union SQ_PERFCOUNTER0_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3669 */
union PCIE_PORT_DATA
{
  $88E5344864962FDC9880E43561EDE06B bitfields;
  $88E5344864962FDC9880E43561EDE06B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3670 */
union FSB_TR_DEBUG_AUX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3671 */
union BSB_WRAPPER_CNTL0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3672 */
union PCIE_P_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3673 */
union PA_SU_POLY_OFFSET_BACK_OFFSET
{
  $E046E2F1DBD10CD43E4A96E8F28E6489 bitfields;
  $E046E2F1DBD10CD43E4A96E8F28E6489 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3674 */
union PCIE_UNCORR_ERR_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3675 */
union AZ0_MRU_BANK16_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3676 */
union RTS_BOUNDBOX_END
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3677 */
union HSIO_DLL_ADJ4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3678 */
union PCIE_PERF_LATENCY_THRESHOLD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3679 */
union PA_SC_DEBUG_CW_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3680 */
union MC1_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3681 */
union CP_RT8_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3682 */
union CP_PERFCOUNTER_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3683 */
union EP_REVISION_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3684 */
struct $1F81DC620CFFC36082AAD1E058BA7610
{
  unsigned int DC_TEST_DEBUG_EDGE_TRIGGER_PATTERN;
};

/* 3685 */
union DC_TEST_DEBUG_EDGE_TRIGGER_PATTERN
{
  $1F81DC620CFFC36082AAD1E058BA7610 bitfields;
  $1F81DC620CFFC36082AAD1E058BA7610 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3686 */
union REG_MACRO_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3687 */
union PCIE_PERF_CNTL_EVENT0_PORT_SEL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3688 */
union RB_HSIO_DLL_ADJ8
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3689 */
union SCL1_LB_INTERFACE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3690 */
struct $C27635D62FB53C332CF8B59C8F32556F
{
  unsigned int VPORT_YSCALE;
};

/* 3691 */
union PA_CL_VPORT_YSCALE
{
  $C27635D62FB53C332CF8B59C8F32556F bitfields;
  $C27635D62FB53C332CF8B59C8F32556F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3692 */
union FSB_TX_PMCTRL_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3693 */
union FSB_LX_DEBUG_LO_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3694 */
union CLIPPER_DEBUG_REG16
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3695 */
union PA_SC_DEBUG_ITER_4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3696 */
union FSB_LX_PMC2_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3697 */
union PCIEP_HW_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3698 */
union TCM_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3699 */
union CP_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3700 */
union PCIE_RX_CREDITS_RECEIVED_D
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3701 */
union REG_MACRO_ADDR_5
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3702 */
union PA_SC_PERFCOUNTER2_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3703 */
union FSB_TLA_PATT_CARE_MASK2
{
  $8C73C7457AC982BE9C676ACCA1560461 bitfields;
  $8C73C7457AC982BE9C676ACCA1560461 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3704 */
union REG_MACRO_ADDR_6
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3705 */
union SXIFCCG_DEBUG_REG2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3706 */
union RTS_EDGE_2_DIST_LSBS
{
  $34692B0B970D9F8643448B91C72DAB44 bitfields;
  $34692B0B970D9F8643448B91C72DAB44 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3707 */
union SCRATCH_CMP_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3708 */
union REG_MACRO_DATA_4
{
  $19CC4DC896F4DCC4A69DEE0B8343B227 bitfields;
  $19CC4DC896F4DCC4A69DEE0B8343B227 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3709 */
struct $9B748C7DA6743103CC66FFCDF234F085
{
  unsigned int NUM_EXCEED;
};

/* 3710 */
union PCIE_PERF_LATENCY_COUNTER1
{
  $9B748C7DA6743103CC66FFCDF234F085 bitfields;
  $9B748C7DA6743103CC66FFCDF234F085 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3711 */
union RTS_WD_EDGE_DIST_MSBS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3712 */
union CP_RT14_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3713 */
union D1CRTC_BLACK_COLOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3714 */
union D1MODE_VIEWPORT_START
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3715 */
union VC_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3716 */
union CP_IB2D_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3717 */
union CLIPPER_DEBUG_REG13
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3718 */
union VGT_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3719 */
union FSB_TLA_DEBUG_BUS_CTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3720 */
union MH_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3721 */
union MH_PERFMON_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3722 */
union CP_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3723 */
union D1CRTC_STATUS_VF_COUNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3724 */
union PA_SC_WINDOW_SCISSOR_TL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3725 */
union PA_SC_AA_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3726 */
union PSRO_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3727 */
struct $E63A994FF22D31695B0E6673EA2F5671
{
  unsigned int VS_DONE_DATA_SWM;
};

/* 3728 */
union CP_ME_VS_EVENT_DATA_SWM
{
  $E63A994FF22D31695B0E6673EA2F5671 bitfields;
  $E63A994FF22D31695B0E6673EA2F5671 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3729 */
union D1MODE_MASTER_UPDATE_MODE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3730 */
union D1SCL_HORZ_FILTER_INIT_CHROMA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3731 */
union TCM_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3732 */
struct $229190EE07355714FE24F5AEEB92AE91
{
  unsigned int ME_RAM_DATA;
};

/* 3733 */
union CP_ME_RAM_DATA
{
  $229190EE07355714FE24F5AEEB92AE91 bitfields;
  $229190EE07355714FE24F5AEEB92AE91 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3734 */
union D1GRPH_ENABLE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3735 */
union FSB_LX_DDAT3
{
  $C6C3E65772D995BF3754BADB52E86109 bitfields;
  $C6C3E65772D995BF3754BADB52E86109 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3736 */
union DC_LUT_RW_INDEX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3737 */
union CP_RT5_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3738 */
union PREF_BASE_LIMIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3739 */
union ED_CHIP_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3740 */
union MC0_ARBITRATION_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3741 */
struct $EA05334A715E0F48EAFF6DB58A269549
{
  unsigned int DWORD5;
};

/* 3742 */
union AZ1_SECONDARY_STATE_DWORD5
{
  $EA05334A715E0F48EAFF6DB58A269549 bitfields;
  $EA05334A715E0F48EAFF6DB58A269549 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3743 */
union VGT_VERTEX_REUSE_BLOCK_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3744 */
union MC0_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3745 */
union PA_SC_DEBUG_SR_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3746 */
union PA_SC_DEBUG_QPP_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3747 */
union FSB_LX_DEBUG_AUX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3748 */
union MC0_INTERRUPT_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3749 */
union PA_SU_VTX_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3750 */
union TCO_QUAD1_DEBUG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3751 */
union RBBM_READ_ERROR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3752 */
union AZ0_LOOPBACK_PATTERN1PHS2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3753 */
union CP_RT15_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3754 */
union VGT_PERFCOUNTER1_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3755 */
union MH_PERFMON_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3756 */
union PCIE_CORR_ERR_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3757 */
union D1GRPH_Y_START
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3758 */
union TCF_PERFCOUNTER7_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3759 */
union COHER_DEST_BASE_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3760 */
union XDVO_2ND_CRC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3761 */
union SQ_DEBUG_MISC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3762 */
union ROOT_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3763 */
union D1SCL_HORZ_FILTER_INIT_RGB_LUMA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3764 */
union MH_PERFMON_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3765 */
union AZ0_LOOPBACK_PATTERN0PHS2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3766 */
union VGT_DEBUG_REG7
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3767 */
struct $11FD5F420A3DAAE9C4D9D1D130DE35CA
{
  unsigned int VS_FETCH_DONE_DATA;
};

/* 3768 */
union CP_ME_VS_FETCH_DONE_DATA
{
  $11FD5F420A3DAAE9C4D9D1D130DE35CA bitfields;
  $11FD5F420A3DAAE9C4D9D1D130DE35CA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3769 */
union COHER_STATUS_HOST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3770 */
union PCIE_TX_CREDITS_CONSUMED
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3771 */
union CP_CPU_INT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3772 */
union BIOS_6_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3773 */
union BIU_INT_ACK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3774 */
union IO_BASE_LIMIT_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3775 */
union CP_NON_PREFETCH_CNTRS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3776 */
union CP_RT0_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3777 */
union PA_SU_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3778 */
union GFX_COPY_STATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3779 */
struct $4423EC2FA434480D54E422ED298162B0
{
  unsigned int PCIE_RESERVED;
};

/* 3780 */
union PCIE_RESERVED
{
  $4423EC2FA434480D54E422ED298162B0 bitfields;
  $4423EC2FA434480D54E422ED298162B0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3781 */
union FSB_LR_CTRL_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3782 */
union PA_CL_UCP_4_Y
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3783 */
union CLIPPER_DEBUG_REG04
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3784 */
union RB_PERFCOUNTER3_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3785 */
union MSI_MSG_ADDR_LO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3786 */
union FSB_LX_PMC2
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3787 */
union CP_RT10_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3788 */
union AZ0_MRT_STATE_DWORD2
{
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bitfields;
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3789 */
union FSB_LX_DDAT1
{
  $C6C3E65772D995BF3754BADB52E86109 bitfields;
  $C6C3E65772D995BF3754BADB52E86109 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3790 */
union CLIPPER_DEBUG_REG07
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3791 */
union WAIT_UNTIL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3792 */
union TP2_CHICKEN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3793 */
union FSB_LX_PMC5_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3794 */
union CP1_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3795 */
union AZ0_LOOPBACK_RX_CRC_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3796 */
union TCB_FETCH_GEN_SECTOR_WALKER0_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3797 */
union AZ1_LOOPBACK_PATTERN_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3798 */
union VGT_GROUP_VECT_1_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3799 */
union RTS_EDGE_2_DX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3800 */
union FSB_TX_CTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3801 */
union CP_ME_VS_FETCH_DONE_SRC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3802 */
struct $EBAEE044B7420189F199A379C6721BB5
{
  unsigned int F00_LERST_XSTP;
};

/* 3803 */
union FSB_LX_LERST_XSTP_AND
{
  $EBAEE044B7420189F199A379C6721BB5 bitfields;
  $EBAEE044B7420189F199A379C6721BB5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3804 */
union AZ1_MRU_BANK6_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3805 */
struct $A119E0484D66213B970FD4E2F7049BBE
{
  unsigned int RT_BIN_SELECT_HI;
};

/* 3806 */
union CP_RT_BIN_SELECT_HI
{
  $A119E0484D66213B970FD4E2F7049BBE bitfields;
  $A119E0484D66213B970FD4E2F7049BBE bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3807 */
union CP_RT14_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3808 */
union PA_CL_POINT_X_RAD
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3809 */
struct $3B7B710D2663EFE497E0610A4503DB18
{
  unsigned int BLEND_GREEN;
};

/* 3810 */
union RB_BLEND_GREEN
{
  $3B7B710D2663EFE497E0610A4503DB18 bitfields;
  $3B7B710D2663EFE497E0610A4503DB18 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3811 */
union VGT_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3812 */
union PCIE_UNCORR_ERR_SEVERITY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3813 */
struct $9C3239E4CCA3FE09972D88E4D8377A72
{
  unsigned int ID90_LB_DEBUG_BLOCK_ID;
};

/* 3814 */
union LB_DEBUG_BLOCK_ID
{
  $9C3239E4CCA3FE09972D88E4D8377A72 bitfields;
  $9C3239E4CCA3FE09972D88E4D8377A72 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3815 */
struct $B47C3BF3A4B9521E40F2BF5F8624B0C8
{
  unsigned int DC_TEST_DEBUG_DATA_TRIGGER_PATTERN;
};

/* 3816 */
union DC_TEST_DEBUG_DATA_TRIGGER_PATTERN
{
  $B47C3BF3A4B9521E40F2BF5F8624B0C8 bitfields;
  $B47C3BF3A4B9521E40F2BF5F8624B0C8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3817 */
union XDVO_REGISTER_INDEX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3818 */
union D1MODE_CHUNK_SIZE_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3819 */
union FSB_TX_PMC3_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3820 */
union IOC_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3821 */
union DC_GPIO_XDVODATA_A
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3822 */
union AZ0_SECONDARY_STATE_DWORD1
{
  $E4FA5B1F16754C9FD3F9ED1E344058AB bitfields;
  $E4FA5B1F16754C9FD3F9ED1E344058AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3823 */
union AZ1_MRU_BANK0_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3824 */
union CACHE_LINE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3825 */
union CP_RT0_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3826 */
union D1GRPH_COLOR_MATRIX_COEF_2_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3827 */
union PCIE_LC_STATE4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3828 */
union RB_SAMPLE_COUNT_CTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3829 */
union VGT_DEBUG_REG6
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3830 */
union AZ0_MRU_BANK18_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3831 */
struct $5714760F7AAB444C76E59B1E845F4F2A
{
  unsigned int VPORT_ZOFFSET;
};

/* 3832 */
union PA_CL_VPORT_ZOFFSET
{
  $5714760F7AAB444C76E59B1E845F4F2A bitfields;
  $5714760F7AAB444C76E59B1E845F4F2A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3833 */
union MC1_TUNING_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3834 */
union CP_RT6_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3835 */
union XDVO_2ND_CRC_MASK_SIG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3836 */
union SETUP_DEBUG_REG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3837 */
union FSB_LX_LSPARE_AND
{
  $56CA10FD1B895C4754704F59B7B1E4BB bitfields;
  $56CA10FD1B895C4754704F59B7B1E4BB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3838 */
union FSB_LX_PMC0_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3839 */
union CP_RT12_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3840 */
union FSB_TX_CTRL_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3841 */
union PA_CL_UCP_2_X
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3842 */
union CP_NV_FLAGS_1
{
  $E07C69D1C72ECB5319959202ECFEABE7 bitfields;
  $E07C69D1C72ECB5319959202ECFEABE7 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3843 */
union CP_RT12_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3844 */
union VGT_DRAW_INITIATOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3845 */
union FSB_TLA_TRACE_ARRAY_DATA2
{
  $816B3348B3C418EE1045AA9A763ABB00 bitfields;
  $816B3348B3C418EE1045AA9A763ABB00 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3846 */
union AZ0_MRU_BANK5_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3847 */
struct $97DE5D6135C6DDF784BFAF5AA1D32025
{
  unsigned int RT_BIN_SELECT_LO;
};

/* 3848 */
union CP_RT_BIN_SELECT_LO
{
  $97DE5D6135C6DDF784BFAF5AA1D32025 bitfields;
  $97DE5D6135C6DDF784BFAF5AA1D32025 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3849 */
union SXIFCCG_DEBUG_REG3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3850 */
union FSB_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3851 */
union GC_CACHE_LINE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3852 */
union TCM_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3853 */
union CP_RT15_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3854 */
union MC0_STATUS_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3855 */
union RTS_J_W_DX
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3856 */
union SQ_CF_BOOLEANS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3857 */
union PCIE_FC_NP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3858 */
struct $1A992020148A107210E48B35B6C1A8C5
{
  unsigned int COLOR_CLEAR;
};

/* 3859 */
union RB_COLOR_CLEAR
{
  $1A992020148A107210E48B35B6C1A8C5 bitfields;
  $1A992020148A107210E48B35B6C1A8C5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3860 */
union MASTER_INT_SIGNAL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3861 */
union CP_RT15_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3862 */
struct $9F93F2CDFACCEC887A75A069A97B3FFB
{
  unsigned int F00_Physical_layer_MMIO_read_data;
};

/* 3863 */
union FSB_LX_PHYREAD
{
  $9F93F2CDFACCEC887A75A069A97B3FFB bitfields;
  $9F93F2CDFACCEC887A75A069A97B3FFB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3864 */
union DC_SURFACE_2_BASE
{
  $65FCA93EA0DF635F734C67FDB6EB4292 bitfields;
  $65FCA93EA0DF635F734C67FDB6EB4292 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3865 */
union RB_COPY_SURFACE_SLICE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3866 */
union BIOS_7_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3867 */
union FSB_LX_PHYCMD_OR
{
  $FC77CAFA2D1A30AE8523CE3B131B1CA6 bitfields;
  $FC77CAFA2D1A30AE8523CE3B131B1CA6 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3868 */
union DCCG_TEST_CLK_SEL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3869 */
union TCR_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3870 */
union TCF_PERFCOUNTER5_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3871 */
union RB_PERFCOUNTER2_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3872 */
union TCO_QUAD2_DEBUG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3873 */
union CP_RT5_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3874 */
union DC_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3875 */
union RB_COLOR1_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3876 */
union FSB_TLA_CONDITION3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3877 */
struct $4CBE9073E37DDE7A380FC1FB9104EA34
{
  unsigned int UNKNOWN_CMD_VALUE;
};

/* 3878 */
union BIU_INT_UNKNOWN_CMD_VALUE
{
  $4CBE9073E37DDE7A380FC1FB9104EA34 bitfields;
  $4CBE9073E37DDE7A380FC1FB9104EA34 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3879 */
union BIU_INT_BAD_REG_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3880 */
union D1CRTC_FRAME_COUNT_START
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3881 */
union VGT_DEBUG_REG10
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3882 */
union CP_RT4_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3883 */
union DC_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3884 */
union FSB_TLA_STATE_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3885 */
union PCIE_P_PAD_FORCE_DIS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3886 */
union BIU_IOC_SLV_ORDER_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3887 */
union TP3_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3888 */
union CP_ME_VS_EVENT_ADDR_SWM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3889 */
union CP_RT12_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3890 */
union PA_CL_CLIP_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3891 */
union VC_DEBUG_DATA
{
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bitfields;
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3892 */
union FSB_TR_ERRCAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3893 */
union CP_NV_FLAGS_0
{
  $E07C69D1C72ECB5319959202ECFEABE7 bitfields;
  $E07C69D1C72ECB5319959202ECFEABE7 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3894 */
union FSB_TR_CTRL_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3895 */
union TCM_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3896 */
union TP3_CHICKEN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3897 */
union CLIPPER_DEBUG_REG01
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3898 */
union D1CRTC_STEREO_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3899 */
union AZ0_MRU_BANK12_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3900 */
union BIU_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3901 */
union SCL1_VFILT_COEF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3902 */
union PCIE_LC_N_FTS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3903 */
struct $884169DBACCA8D5CD6B4E7CA686CC469
{
  unsigned int D1SCL_CRC_CURRENT;
};

/* 3904 */
union D1SCL_CRC_CURRENT
{
  $884169DBACCA8D5CD6B4E7CA686CC469 bitfields;
  $884169DBACCA8D5CD6B4E7CA686CC469 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3905 */
union RB_COPY_DEST_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3906 */
union CP_RT2_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3907 */
union SETUP_DEBUG_REG3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3908 */
union COHER_DEST_BASE_5
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3909 */
struct $34CBC8244A164BAD87F5E0335D21989E
{
  unsigned int DO_TEST_DEBUG_DATA;
};

/* 3910 */
union DO_TEST_DEBUG_DATA
{
  $34CBC8244A164BAD87F5E0335D21989E bitfields;
  $34CBC8244A164BAD87F5E0335D21989E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3911 */
union CP_RT11_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3912 */
union FSB_LX_IDLE_PATT
{
  $BAFBABD929A58BFE874C95C0D64ECFD2 bitfields;
  $BAFBABD929A58BFE874C95C0D64ECFD2 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3913 */
union PCIE_INDEX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3914 */
union PA_CL_UCP_2_Y
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3915 */
union BIU_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3916 */
union IOC_FUSE_OVERRIDE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3917 */
union SQ_INSTRUCTION_ALU_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3918 */
union D1CRTC_COUNT_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3919 */
union DC_LUT_AUTOFILL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3920 */
union EP_BASE_CODE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3921 */
struct $172F657775F0448C150A0F658BBB3576
{
  unsigned int SAMPLE_COUNT_ADDR;
};

/* 3922 */
union RB_SAMPLE_COUNT_ADDR
{
  $172F657775F0448C150A0F658BBB3576 bitfields;
  $172F657775F0448C150A0F658BBB3576 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3923 */
union MC1_TIMING_CNTL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3924 */
union SQ_CF_PROGRAM_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3925 */
union ID13_BLEND_DATA_R
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3926 */
union VGT_EVENT_INITIATOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3927 */
union MC1_SECURE_MEMORY_APERTURE_LOG_MH
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3928 */
union PA_SU_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3929 */
union ED_CG_CLK_OVERRIDE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3930 */
union HSIO_DLL_ADJ5
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3931 */
union CRTC_DOUT_INTERFACE_01_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3932 */
union ID05_DCP_LB_CHUNK_REQUEST2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3933 */
union CP_ME_VS_FETCH_DONE_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3934 */
union CP_RT13_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3935 */
union SQ_INSTRUCTION_CF_ALLOC_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3936 */
union MC0_BSB_SNOOPED_TIMER_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3937 */
union AZ0_TOTAL_SAMPLES
{
  $5B82758D7CB13EA832D8AFF80DB5116B bitfields;
  $5B82758D7CB13EA832D8AFF80DB5116B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3938 */
union D1CRTC_H_SYNC_A
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3939 */
union SCL1_HFILT_COEF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3940 */
union CP_MEQ_THRESHOLDS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3941 */
union AZ1_MRT_STATE_DWORD0
{
  $1A85827550E5BEDC52855A27F6ADB24A bitfields;
  $1A85827550E5BEDC52855A27F6ADB24A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3942 */
union GC_PMI_CAP_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3943 */
union CAPTURE_START_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3944 */
union PA_SU_POINT_MINMAX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3945 */
union IOC_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3946 */
union GC_PMI_DATA
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3947 */
union ID10_LUT_DATA_G
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3948 */
struct $23D33974621FD19DB8C4FDC6D0D9C722
{
  unsigned int DCCG_DEBUG;
};

/* 3949 */
union DCCG_DEBUG
{
  $23D33974621FD19DB8C4FDC6D0D9C722 bitfields;
  $23D33974621FD19DB8C4FDC6D0D9C722 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3950 */
union D1MODE_VLINE_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3951 */
union MC1_WR_STR_DLL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3952 */
union DCCG_ONE_SHOT_RUN_CLOCKS_COUNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3953 */
union SQ_INSTRUCTION_VFETCH_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3954 */
union MC1_STATUS_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3955 */
struct $364E9B09D3214809402A5C1496B31D84
{
  unsigned int IOC_BSB_SLV_CPL_CRC_1;
};

/* 3956 */
union IOC_BSB_SLV_CPL_CRC_1
{
  $364E9B09D3214809402A5C1496B31D84 bitfields;
  $364E9B09D3214809402A5C1496B31D84 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3957 */
union D1SCL_CRC_ENABLE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3958 */
union AZ1_LOOPBACK_PATTERN1PHS3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3959 */
union MC1_PERFCOUNTER0_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3960 */
union AZ1_MRU_BANK13_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3961 */
union MC1_SECURE_MEMORY_APERTURE_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3962 */
struct $BF78EC4B1D5FEB6267C97082D82DB519
{
  unsigned int IOC_BSB_MST_REQ_CRC_1;
};

/* 3963 */
union IOC_BSB_MST_REQ_CRC_1
{
  $BF78EC4B1D5FEB6267C97082D82DB519 bitfields;
  $BF78EC4B1D5FEB6267C97082D82DB519 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3964 */
union PCIE_PERF_LATENCY_TAG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3965 */
union ROM_STATUS_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3966 */
union AZ1_RESET_SAMPLE_COUNTERS
{
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bitfields;
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3967 */
union CP_CMD_INDEX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3968 */
union CP_RT11_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3969 */
union PA_SU_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3970 */
union PCIE_P_DECODER_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3971 */
union RB_HSIO_DLL_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3972 */
union RB_HSIO_DLL_ADJ9
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3973 */
union D1SCL_VERT_FILTER_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3974 */
struct $B8E2C3FFCF41EA4DE862CBF88DDBBC21
{
  unsigned int IOC_BSB_MST_CPL_CRC_1;
};

/* 3975 */
union IOC_BSB_MST_CPL_CRC_1
{
  $B8E2C3FFCF41EA4DE862CBF88DDBBC21 bitfields;
  $B8E2C3FFCF41EA4DE862CBF88DDBBC21 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3976 */
union TCF_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3977 */
union D1GRPH_LUT_AFTER_CSC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3978 */
union D1CRTC_OVERSCAN_BOTTOM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3979 */
union MC1_CRC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3980 */
struct $95284154D0A634D9B097121AFDFD800B
{
  unsigned int TIMER_HI;
};

/* 3981 */
union PCIE_PERF_LATENCY_TIMER_HI
{
  $95284154D0A634D9B097121AFDFD800B bitfields;
  $95284154D0A634D9B097121AFDFD800B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3982 */
union TP1_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3983 */
union D1CRTC_INTERLACE_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3984 */
union TP0_CHICKEN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3985 */
union FSB_TLA_TRACE_ARRAY_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3986 */
union D1GRPH_COLOR_MATRIX_COEF_2_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3987 */
union XDVO_CRC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3988 */
union FSB_TX_TERST_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3989 */
union PA_SC_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3990 */
union RTS_BOUNDBOX_START
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3991 */
union MH_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3992 */
union D1CRTC_STATUS_POSITION
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3993 */
union RB_STENCILREFMASK_BF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3994 */
union TCM_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3995 */
union CP_DMA_SRC_ADDR
{
  $AD1100F3D1031E4DBACF76A066D429C1 bitfields;
  $AD1100F3D1031E4DBACF76A066D429C1 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3996 */
union LB_DISP1_REQ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3997 */
union CP_RT3_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3998 */
union REG_MACRO_ADDR_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 3999 */
union BIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4000 */
union SQ_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4001 */
union CP_RT0_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4002 */
union FSB_LR_DEBUG_AUX_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4003 */
union DC_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4004 */
union SB_BASE_CODE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4005 */
union AZ1_LOOPBACK_PATTERN1PHS0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4006 */
union VGT_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4007 */
union SQ_CONSTANT_T2
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4008 */
union CP_RT_DMA_DST_ADDR
{
  $B1F84801885D0AAAD30E728E1555F596 bitfields;
  $B1F84801885D0AAAD30E728E1555F596 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4009 */
union FSB_LX_PHYCMD
{
  $FC77CAFA2D1A30AE8523CE3B131B1CA6 bitfields;
  $FC77CAFA2D1A30AE8523CE3B131B1CA6 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4010 */
union CONFIG_XSTRAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4011 */
union VGT_MAX_VTX_INDX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4012 */
union DISP_RBBMIF_RDWR_TIMEOUT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4013 */
struct $C6D0C042652F1B1BE69C6AB797CFD143
{
  unsigned int SCRATCH_REG6;
};

/* 4014 */
union SCRATCH_REG6
{
  $C6D0C042652F1B1BE69C6AB797CFD143 bitfields;
  $C6D0C042652F1B1BE69C6AB797CFD143 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4015 */
union PCIE_P_PAD_FORCE_EN
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4016 */
union PA_SU_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4017 */
union PA_SC_SCREEN_SCISSOR_BR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4018 */
union TP1_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4019 */
union CP_RT13_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4020 */
union RPLL_CNTL_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4021 */
union XDVO_DEBUG2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4022 */
union TP3_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4023 */
union D1OVL_START
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4024 */
union CLIPPER_DEBUG_REG09
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4025 */
union CP_NV_FLAGS_2
{
  $E07C69D1C72ECB5319959202ECFEABE7 bitfields;
  $E07C69D1C72ECB5319959202ECFEABE7 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4026 */
struct $B052D0B366140BED0376EED9A7470B0D
{
  unsigned int MAX_TESS;
};

/* 4027 */
union VGT_HOS_MAX_TESS_LEVEL
{
  $B052D0B366140BED0376EED9A7470B0D bitfields;
  $B052D0B366140BED0376EED9A7470B0D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4028 */
union DEVICE_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4029 */
union SBI_SOFT_RESET
{
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bitfields;
  $9B229A4A9C711FE5F0F2D90ABACEBE9A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4030 */
union AZ1_PRIMARY_STATE_DWORD0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4031 */
struct $32B67C444E00794622E796CA8E7B8039
{
  unsigned int ZPASS_SAMPLES;
};

/* 4032 */
union AZ1_ZPASS_SAMPLES
{
  $32B67C444E00794622E796CA8E7B8039 bitfields;
  $32B67C444E00794622E796CA8E7B8039 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4033 */
struct $188DA7570388E57F1790D564FD9F78B9
{
  unsigned int CRC0_TO_3;
};

/* 4034 */
union AZ0_AZ2BC_CRC_READ
{
  $188DA7570388E57F1790D564FD9F78B9 bitfields;
  $188DA7570388E57F1790D564FD9F78B9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4035 */
union MC0_DRAM_CONFIG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4036 */
union RBBM_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4037 */
union RTS_Z_DX_DY_LSBS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4038 */
union TCF_PERFCOUNTER9_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4039 */
struct $475F1C14696CBDFE6BB8125DE838217A
{
  unsigned int SCALE;
};

/* 4040 */
union PA_SU_POLY_OFFSET_BACK_SCALE
{
  $475F1C14696CBDFE6BB8125DE838217A bitfields;
  $475F1C14696CBDFE6BB8125DE838217A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4041 */
union VC_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4042 */
union NB_MMR_BAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4043 */
union XDVO_CRC_MASK_SIG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4044 */
union MSI_MAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4045 */
union REG_MACRO_DATA_7
{
  $19CC4DC896F4DCC4A69DEE0B8343B227 bitfields;
  $19CC4DC896F4DCC4A69DEE0B8343B227 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4046 */
union NB_CAPABILITIES_PTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4047 */
union SQ_INTERPOLATOR_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4048 */
union RB_HSIO_DLL_ADJ4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4049 */
union AZ0_LOOPBACK_AZID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4050 */
union CP_RT7_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4051 */
union REGPROG_INF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4052 */
union AZ0_SECONDARY_STATE_DWORD5
{
  $EA05334A715E0F48EAFF6DB58A269549 bitfields;
  $EA05334A715E0F48EAFF6DB58A269549 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4053 */
union TPC_DEBUG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4054 */
union VGT_IMMED_DATA
{
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bitfields;
  $5F0D4B18DA8D64DB43E8BEDDAD92E27F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4055 */
union LATENCY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4056 */
union PA_CL_UCP_5_W
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4057 */
union PA_SC_ENHANCE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4058 */
union TCF_PERFCOUNTER6_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4059 */
union SQ_CF_RT_LOOP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4060 */
union SLOT_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4061 */
struct $E28B444096D8ED9C21B512542A39B879
{
  unsigned int PS_DONE_DATA_SWM;
};

/* 4062 */
union CP_ME_PS_EVENT_DATA_SWM
{
  $E28B444096D8ED9C21B512542A39B879 bitfields;
  $E28B444096D8ED9C21B512542A39B879 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4063 */
union CP_D1_EOL_SOF_COUNTER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4064 */
union NB_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4065 */
struct $AA5B665D1564B9FA43363D30569C263C
{
  unsigned int DEPTH_CLEAR;
};

/* 4066 */
union RB_DEPTH_CLEAR
{
  $AA5B665D1564B9FA43363D30569C263C bitfields;
  $AA5B665D1564B9FA43363D30569C263C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4067 */
union D1MODE_DESKTOP_HEIGHT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4068 */
union AZ1_MRU_BANK12_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4069 */
union SQ_FETCH_RT_4
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4070 */
union PA_SC_SCREEN_SCISSOR_TL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4071 */
union FSB_TR_DEBUG_HI_OR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4072 */
union MC0_WR_STR_DLL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4073 */
union TP3_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4074 */
union XDVO_CRC_SIG_RGB
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4075 */
union FSB_TLA_TRACE_ARRAY_AUX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4076 */
union NB_DEVICE_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4077 */
union DC_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4078 */
union PCIE_RX_LASTACK_SEQNUM
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4079 */
union XDVO_CLOCK_INV
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4080 */
union ROM_BAD_PIPE_DISABLE_REGISTER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4081 */
union BIU_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4082 */
union DEVICE_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4083 */
union DBG_CNTL1_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4084 */
union CP_ME_RAM_RADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4085 */
union CRTC1_DEBUG_03
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4086 */
struct $CEFF2245AE646B0BD5E92C8BE07F069B
{
  unsigned int BLUE;
};

/* 4087 */
union SQ_CONSTANT_RT_2
{
  $CEFF2245AE646B0BD5E92C8BE07F069B bitfields;
  $CEFF2245AE646B0BD5E92C8BE07F069B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4088 */
union PA_SC_DEBUG_PKR_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4089 */
union EXTERN_TRIG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4090 */
union PCIE_P_PAD_MISC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4091 */
union PA_CL_ENHANCE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4092 */
union DC_TEST_DEBUG_TRIGGER_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4093 */
union AZ1_MRU_BANK1_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4094 */
union AZ1_SECONDARY_STATE_DWORD4
{
  $A3747E611C5AF42A077E516ACA09089B bitfields;
  $A3747E611C5AF42A077E516ACA09089B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4095 */
union SPLL_CNTL_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4096 */
union RTS_BARYC_REF_VTX_X
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4097 */
union FSB_TX_PMC5_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4098 */
union AZ0_MRU_BANK9_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4099 */
union XDVO_DEBUG3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4100 */
union PA_CL_GB_HORZ_DISC_ADJ
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4101 */
union AZ0_LOOPBACK_PATTERN1PHS1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4102 */
union PA_SC_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4103 */
union D1CRTC_PIXEL_DATA_READBACK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4104 */
union GC_MMR_BAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4105 */
union PCIE_CAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4106 */
union D1CRTC_FORCE_COUNT_NOW_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4107 */
union PCIE_BUS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4108 */
union PCIE_PERF_COUNT1_MST_R_CLK
{
  $67D6671016B8FCE0C30C03366012046C bitfields;
  $67D6671016B8FCE0C30C03366012046C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4109 */
union FSB_LX_DADD
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4110 */
union SQ_CF_LOOP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4111 */
struct $F337DD44F6BF18629642115965E90D30
{
  unsigned int DEFAULT_PITCH_OFFSET;
};

/* 4112 */
union CP_DEFAULT_PITCH_OFFSET
{
  $F337DD44F6BF18629642115965E90D30 bitfields;
  $F337DD44F6BF18629642115965E90D30 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4113 */
union SQ_INSTRUCTION_CF_LOOP_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4114 */
struct $FF6068C5D84058680DC3377C32A71E30
{
  unsigned int DC_TEST_DEBUG_OUT_TEST_DATA;
};

/* 4115 */
union DC_TEST_DEBUG_OUT_TEST_DATA
{
  $FF6068C5D84058680DC3377C32A71E30 bitfields;
  $FF6068C5D84058680DC3377C32A71E30 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4116 */
union XDVO_2ND_CRC_SIG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4117 */
union DC_SURFACE_0_BASE
{
  $65FCA93EA0DF635F734C67FDB6EB4292 bitfields;
  $65FCA93EA0DF635F734C67FDB6EB4292 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4118 */
union CP_RT14_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4119 */
union FSB_TLA_COMPR_CARE_MASK3
{
  $186B2936788B72FD0DD5821940E18FE8 bitfields;
  $186B2936788B72FD0DD5821940E18FE8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4120 */
union GPU_INTBAR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4121 */
union SSID_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4122 */
union PA_CL_POINT_SIZE
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4123 */
union CP_RB_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4124 */
union IOC_INT_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4125 */
union MC0_WR_STR_DLY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4126 */
union CRTC1_DEBUG_07
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4127 */
union CP_RT4_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4128 */
union COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4129 */
struct $5953C171C4B8EA9A0098D6C6F29577C7
{
  unsigned int RT_WRITE_DATA;
};

/* 4130 */
union CP_ME_RT_DATA
{
  $5953C171C4B8EA9A0098D6C6F29577C7 bitfields;
  $5953C171C4B8EA9A0098D6C6F29577C7 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4131 */
struct $2ADB24E2178FFB37862B4FF1ADF767FD
{
  unsigned int BAD_IOC_READ_ADDR;
};

/* 4132 */
union BIU_INT_BAD_IOC_READ_ADDR
{
  $2ADB24E2178FFB37862B4FF1ADF767FD bitfields;
  $2ADB24E2178FFB37862B4FF1ADF767FD bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4133 */
union D1MODE_MASTER_UPDATE_LOCK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4134 */
union D1MODE_V_COUNTER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4135 */
union SCRATCH_UMSK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4136 */
union CP_RT15_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4137 */
union MH_PERFMON_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4138 */
union AZ0_PRIMARY_STATE_DWORD2
{
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bitfields;
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4139 */
union CP_RT13_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4140 */
union CP5_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4141 */
union DC_LUT_RW_MODE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4142 */
struct $2FE52AD88742ECCF62DDA2126E62428E
{
  unsigned int ALPHA_REF;
};

/* 4143 */
union RB_ALPHA_REF
{
  $2FE52AD88742ECCF62DDA2126E62428E bitfields;
  $2FE52AD88742ECCF62DDA2126E62428E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4144 */
union SQ_DEBUG_MISC_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4145 */
union CP_RT5_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4146 */
union PCIE_P_BUF_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4147 */
union CP_RT0_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4148 */
union PCIE_ADV_ERR_CAP_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4149 */
union GC_SUB_CLASS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4150 */
union PA_SC_DEBUG_QPP_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4151 */
union DC_LUTA_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4152 */
union PCIE_CI_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4153 */
union HZ_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4154 */
union PA_SC_DEBUG_ITER_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4155 */
union CG_INT_STAT_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4156 */
union FSB_LX_PMC3_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4157 */
union VC_PERFCOUNTER2_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4158 */
union CP_RT3_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4159 */
union REG_MACRO_ADDR_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4160 */
union HSIO_DLL_ADJ8
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4161 */
union CP_ME_VS_EVENT_SRC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4162 */
union PCIE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4163 */
union ID14_BLEND_DATA_G
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4164 */
union RTS_EDGE_1_DIST_LSBS
{
  $34692B0B970D9F8643448B91C72DAB44 bitfields;
  $34692B0B970D9F8643448B91C72DAB44 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4165 */
union IOC_PERFMON_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4166 */
union FSB_TLA_COUNT3_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4167 */
union RTS_I_W_DY
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4168 */
union RB_COLOR3_INFO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4169 */
union FSB_LX_PMC0_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4170 */
union NB_CACHE_LINE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4171 */
union D1SCL_VERT_FILTER_INIT_BOT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4172 */
union SQ_VS_CONST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4173 */
union FSB_TX_PMC1_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4174 */
union TP1_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4175 */
union RB_DEBUG_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4176 */
union TCB_TAG3_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4177 */
union FSB_TLA_CONDITION1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4178 */
union D1MODE_UNDERFLOW_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4179 */
struct $9DB0439DA3BCB83BD37152152E6249C8
{
  unsigned int ID0C_SCL1_DEBUG_BLOCK_ID;
};

/* 4180 */
union SCL1_DEBUG_BLOCK_ID
{
  $9DB0439DA3BCB83BD37152152E6249C8 bitfields;
  $9DB0439DA3BCB83BD37152152E6249C8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4181 */
union D1SCL_MANUAL_REPLICATE_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4182 */
union CP_RT3_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4183 */
union PA_CL_GB_VERT_DISC_ADJ
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4184 */
union FSB_LX_PMC2_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4185 */
union CP_ME_PS_EVENT_SRC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4186 */
union MC0_SECURE_MEMORY_APERTURE_LOG_BIU
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4187 */
union XDVO_CRC_SIG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4188 */
union HSIO_PHASE_CAPTURE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4189 */
union MC0_RD_STR_DLY_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4190 */
union CP_PFP_UCODE_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4191 */
union SQ_CONSTANT_2
{
  $CEFF2245AE646B0BD5E92C8BE07F069B bitfields;
  $CEFF2245AE646B0BD5E92C8BE07F069B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4192 */
union SQ_CONSTANT_VFETCH_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4193 */
union MC1_DRAM_DQ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4194 */
union SCLK_PWRMGT_CNTL3_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4195 */
struct $CD09DD788DAD7D0D7E72656283448D96
{
  unsigned int PCIEP_RESERVED;
};

/* 4196 */
union PCIEP_RESERVED
{
  $CD09DD788DAD7D0D7E72656283448D96 bitfields;
  $CD09DD788DAD7D0D7E72656283448D96 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4197 */
union CLIPPER_DEBUG_REG11
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4198 */
union FSB_TX_PMC0_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4199 */
union HSIO_PHASE_OUT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4200 */
union AZ1_AZ2BC_CRC_READ
{
  $188DA7570388E57F1790D564FD9F78B9 bitfields;
  $188DA7570388E57F1790D564FD9F78B9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4201 */
union VGT_ENHANCE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4202 */
union TC_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4203 */
union CP_RT2_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4204 */
union FSB_TX_PMC5
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4205 */
union RB_COPY_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4206 */
union BIOS_1_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4207 */
union DEVICE_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4208 */
union STOP_SCLK_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4209 */
union RB_STENCILREFMASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4210 */
union FSB_TLA_FREEZE_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4211 */
union RTS_EDGE_2_DY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4212 */
union CP_RT1_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4213 */
union EP_BIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4214 */
union SETUP_DEBUG_REG4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4215 */
union DCCG_SCLK_R_DISP_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4216 */
union SB_REVISION_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4217 */
union D1GRPH_COLOR_MATRIX_COEF_1_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4218 */
union PA_SU_CNTL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4219 */
union MC1_RD_BUFFER_CNTL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4220 */
union MC0_TIMING_CNTL_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4221 */
union AZ0_ACC_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4222 */
union FSB_TLA_CONDITION0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4223 */
union TP2_CHECKSUM_PIXEL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4224 */
union MC0_SECURE_MEMORY_APERTURE_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4225 */
union D1SCL_TAP_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4226 */
union SCL1_H_COUNTERS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4227 */
union AZ0_SFAIL_SAMPLES
{
  $05CE56F31EF8A248ECB68D5721A9D8EC bitfields;
  $05CE56F31EF8A248ECB68D5721A9D8EC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4228 */
union PCIE_CORR_ERR_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4229 */
union PA_SC_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4230 */
union PA_SU_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4231 */
union TCR_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4232 */
union AZ1_LOOPBACK_PATTERN0PHS0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4233 */
struct $105CC8FB6E7BECBF94CAB4C1E343A3F4
{
  unsigned int B_PHY_DEBUG;
};

/* 4234 */
union PCIE_P_PHY_DEBUG
{
  $105CC8FB6E7BECBF94CAB4C1E343A3F4 bitfields;
  $105CC8FB6E7BECBF94CAB4C1E343A3F4 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4235 */
union CP_RT7_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4236 */
union EP_ADAPTER_ID
{
  $900106D6D23EC3730EB053E752B454DE bitfields;
  $900106D6D23EC3730EB053E752B454DE bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4237 */
struct $F8F769AB0BCD8D72A3B31B6484B75232
{
  unsigned int CNTL;
};

/* 4238 */
union BIU_FSB_XMIT_ARB_CNTL
{
  $F8F769AB0BCD8D72A3B31B6484B75232 bitfields;
  $F8F769AB0BCD8D72A3B31B6484B75232 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4239 */
struct $A24B6B929E2D296755BA0125A986BA28
{
  unsigned int DEFAULT2_SC_BOTTOM_RIGHT;
};

/* 4240 */
union CP_DEFAULT2_SC_BOTTOM_RIGHT
{
  $A24B6B929E2D296755BA0125A986BA28 bitfields;
  $A24B6B929E2D296755BA0125A986BA28 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4241 */
union SLOT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4242 */
union GC_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4243 */
union RB_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4244 */
union IOC_INT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4245 */
union AZ0_MRU_BANK6_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4246 */
union NQWAIT_UNTIL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4247 */
union ID04_DCP_LB_DATA_REQUEST1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4248 */
union D1GRPH_COLOR_MATRIX_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4249 */
union BIU_INT_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4250 */
union DCP_CRC_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4251 */
union PCIE_TX_REQUEST_NUM_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4252 */
union D1CRTC_UPDATE_LOCK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4253 */
union PCIE_TX_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4254 */
union XDVO_STRENGTH_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4255 */
union PCIE_RX_CREDITS_ALLOCATED_D
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4256 */
union XDVO_DEBUG5
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4257 */
union DC_TEST_DEBUG_INDEX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4258 */
union CP_DMA_COMMAND
{
  $0DE236D524AA70F1BF5FF63CE981BCB5 bitfields;
  $0DE236D524AA70F1BF5FF63CE981BCB5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4259 */
union COHER_DEST_BASE_7
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4260 */
union SUB_CLASS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4261 */
union CP_INT_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4262 */
union TP2_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4263 */
struct $53C7801CF02F05F59977569710507BDA
{
  unsigned int RT_ME_RDADDR;
};

/* 4264 */
union CP_RT_ME_RDADDR
{
  $53C7801CF02F05F59977569710507BDA bitfields;
  $53C7801CF02F05F59977569710507BDA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4265 */
union NB_LATENCY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4266 */
union NB_HEADER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4267 */
union CP_RB_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4268 */
union PCIE_P_MISC_DEBUG_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4269 */
union FSB_TLA_TRACE_ARRAY_DATA3
{
  $816B3348B3C418EE1045AA9A763ABB00 bitfields;
  $816B3348B3C418EE1045AA9A763ABB00 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4270 */
union ROM_PADS_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4271 */
union PA_SU_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4272 */
union PCIE_CFG_SCRATCH0
{
  $F02F2B8F83EECAD70F9DC9E1A71CF83B bitfields;
  $F02F2B8F83EECAD70F9DC9E1A71CF83B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4273 */
union CP_RT13_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4274 */
union CP_RT10_POLL_ADDRESS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4275 */
union FSB_TX_DEBUG_LO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4276 */
union RB_PERFCOUNTER2_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4277 */
union FSB_TX_TERST_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4278 */
union RB_DEPTHCONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4279 */
union TOP_OF_MEMORY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4280 */
union CP_DMA_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4281 */
union FSB_TX_CMDMM1_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4282 */
union FSB_TX_PMC1
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4283 */
union EP_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4284 */
union EP_UNUSED_BAR_5
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4285 */
union AZ0_MRU_BANK3_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4286 */
union MC1_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4287 */
union CP_CSQ_IB2_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4288 */
union PCIE_PERF_CNTL_MST_C_CLK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4289 */
union AZ1_ACC_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4290 */
union CP_SNOOP_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4291 */
union REG_MACRO_ADDR_4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4292 */
union DMIF_DEBUG03
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4293 */
union DC_LUTA_WHITE_OFFSET_BLUE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4294 */
union FSB_LX_LERSTM_OR
{
  $C20470E517CC3CADA9BC69410296E4A9 bitfields;
  $C20470E517CC3CADA9BC69410296E4A9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4295 */
union PA_SC_DEBUG_CW_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4296 */
union BIOS_4_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4297 */
union PA_SC_DEBUG_ITER_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4298 */
union CP_IB1_BUFSZ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4299 */
union TP0_CHECKSUM_PIXEL_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4300 */
union FSB_TX_DEBUG_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4301 */
struct $55286AF3A8D72C9D4F54DC0F85A1D32E
{
  unsigned int D1GRPH_SECONDARY_SURFACE_ADDRESS;
};

/* 4302 */
union D1GRPH_SECONDARY_SURFACE_ADDRESS
{
  $55286AF3A8D72C9D4F54DC0F85A1D32E bitfields;
  $55286AF3A8D72C9D4F54DC0F85A1D32E bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4303 */
union D1OVL_SURFACE_OFFSET_Y
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4304 */
union VGT_DEBUG_REG2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4305 */
union MC1_WR_STR_DLY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4306 */
union TCO_QUAD2_DEBUG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4307 */
union MC0_CRC_READ
{
  $F83D1B2D94D0030D653AB16B8AF85245 bitfields;
  $F83D1B2D94D0030D653AB16B8AF85245 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4308 */
union TCD_INPUT3_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4309 */
union GC_VENDOR_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4310 */
union SQ_DEBUG_MISC_1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4311 */
union D1GRPH_Y_END
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4312 */
union TP3_CHECKSUM_PIXEL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4313 */
union CRTC1_DEBUG_05
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4314 */
union ROM_PORT_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4315 */
union CONFIG_XSTRAP2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4316 */
union CONFIG_XSTRAP3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4317 */
union HZ_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4318 */
union FSB_LX_LERST_XSTP_OR
{
  $EBAEE044B7420189F199A379C6721BB5 bitfields;
  $EBAEE044B7420189F199A379C6721BB5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4319 */
union SQ_FETCH_0
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4320 */
union CP_PFP_RT_UCODE_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4321 */
union RB_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4322 */
union TCB_TAG1_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4323 */
struct $349DDFFFE18385E0E670E63576C482A5
{
  unsigned int VPORT_XOFFSET;
};

/* 4324 */
union PA_CL_VPORT_XOFFSET
{
  $349DDFFFE18385E0E670E63576C482A5 bitfields;
  $349DDFFFE18385E0E670E63576C482A5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4325 */
union PA_CL_UCP_3_Y
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4326 */
struct $429C6E464AA18C2D3F0DBD79DB04185C
{
  unsigned int IOC_BSB_MST_CPL_CRC_0;
};

/* 4327 */
union IOC_BSB_MST_CPL_CRC_0
{
  $429C6E464AA18C2D3F0DBD79DB04185C bitfields;
  $429C6E464AA18C2D3F0DBD79DB04185C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4328 */
union ROM_PAR_DATA_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4329 */
union AZ0_ZPASS_SAMPLES
{
  $32B67C444E00794622E796CA8E7B8039 bitfields;
  $32B67C444E00794622E796CA8E7B8039 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4330 */
union TCO_STALLS_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4331 */
union FSB_LX_PMC0
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4332 */
union BSB_WRAPPER_PRBS23_BITCNT1
{
  $E4550A2A31A04A204E42CFF1CB02227C bitfields;
  $E4550A2A31A04A204E42CFF1CB02227C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4333 */
union AZ1_LOOPBACK_PATTERN2PHS0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4334 */
union HSIO_OVERRIDE_OE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4335 */
union GC_ADAPTER_ID_W
{
  $CC965864E5B073E5B029CF69026074E0 bitfields;
  $CC965864E5B073E5B029CF69026074E0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4336 */
union RTS_INITIATOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4337 */
union NB_VENDOR_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4338 */
union PG_START
{
  $D75080A3FAFC1480FD86BFF82AD212D4 bitfields;
  $D75080A3FAFC1480FD86BFF82AD212D4 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4339 */
union SQ_INSTRUCTION_CF_LOOP_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4340 */
union VC_FIFO_DEPTHS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4341 */
union TCF_PERFCOUNTER10_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4342 */
union RBBM_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4343 */
struct $18760F117BB9078E45C7CEF0968F6158
{
  unsigned int DEFAULT_SC_BOTTOM_RIGHT;
};

/* 4344 */
union CP_DEFAULT_SC_BOTTOM_RIGHT
{
  $18760F117BB9078E45C7CEF0968F6158 bitfields;
  $18760F117BB9078E45C7CEF0968F6158 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4345 */
union FSB_TX_TERSTM
{
  $E8B706E90EBA5D1D283B17B52E9426BF bitfields;
  $E8B706E90EBA5D1D283B17B52E9426BF bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4346 */
union RB_EDRAM_TIMING
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4347 */
union PA_SC_VIZ_QUERY_STATUS_0
{
  $8100885E69B0106485EB71E39A9E3FE0 bitfields;
  $8100885E69B0106485EB71E39A9E3FE0 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4348 */
union PCIE_RX_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4349 */
union RB_COPY_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4350 */
union DCP_LB_DATA_GAP_BETWEEN_CHUNK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4351 */
union TP3_CHECKSUM_PIXEL_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4352 */
union D1OVL_ALPHA_INSIDE_OVL_WINDOW
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4353 */
union VGT_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4354 */
union BIU_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4355 */
union VGT_OUT_DEALLOC_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4356 */
union GC_PMI_PMC_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4357 */
union BIOS_12_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4358 */
struct $AB55520AD4618807ED660E85B4427E9A
{
  unsigned int RX_TLP_HDR2;
};

/* 4359 */
union PCIE_RX_TLP_HDR2
{
  $AB55520AD4618807ED660E85B4427E9A bitfields;
  $AB55520AD4618807ED660E85B4427E9A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4360 */
union CP_ME_CF_EVENT_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4361 */
union PA_CL_POINT_Y_RAD
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4362 */
union TCB_TAG0_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4363 */
union RB_TILECONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4364 */
union FSB_LX_PMC3
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4365 */
union TCF_PERFCOUNTER6_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4366 */
union PCIE_CRS_COUNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4367 */
union GC_CAPABILITIES_PTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4368 */
union AZ0_MRT_STATE_DWORD1
{
  $E4FA5B1F16754C9FD3F9ED1E344058AB bitfields;
  $E4FA5B1F16754C9FD3F9ED1E344058AB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4369 */
union FSB_LX_DDAT0
{
  $C6C3E65772D995BF3754BADB52E86109 bitfields;
  $C6C3E65772D995BF3754BADB52E86109 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4370 */
union MSI_CAP_LIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4371 */
struct $50575661C46817F72116A37B85DC2A79
{
  unsigned int D1OVL_SURFACE_ADDRESS;
};

/* 4372 */
union D1OVL_SURFACE_ADDRESS
{
  $50575661C46817F72116A37B85DC2A79 bitfields;
  $50575661C46817F72116A37B85DC2A79 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4373 */
struct $248E316062256531F1DD9A13346CF14D
{
  unsigned int DO_TEST_DEBUG_BUS_CLK1_SEL;
};

/* 4374 */
union DO_TEST_DEBUG_BUS_CLK1_SEL
{
  $248E316062256531F1DD9A13346CF14D bitfields;
  $248E316062256531F1DD9A13346CF14D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4375 */
union SQ_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4376 */
struct $5A1FE7028B181D5809FF42CEE56BDE75
{
  unsigned int MSI_MSG_ADDR_HI;
};

/* 4377 */
union MSI_MSG_ADDR_HI
{
  $5A1FE7028B181D5809FF42CEE56BDE75 bitfields;
  $5A1FE7028B181D5809FF42CEE56BDE75 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4378 */
union TCB_FETCH_GEN_PIPE1_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4379 */
union PA_CL_UCP_4_X
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4380 */
union MC1_RD_BUFFER_CNTL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4381 */
union RBBM_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4382 */
union BIU_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4383 */
union DC_LUT_30_COLOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4384 */
union CP_RT8_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4385 */
union TCF_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4386 */
union CP_CSQ_IB1_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4387 */
union CP_RT2_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4388 */
union TP3_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4389 */
union D1CRTC_BLANK_DATA_COLOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4390 */
union AZ0_LOOPBACK_PATTERN2PHS0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4391 */
union VC_DEBUG_REG8
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4392 */
union VGT_DEBUG_REG3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4393 */
struct $D50CAC1FD7C453526CBB83FAF7E3D6F3
{
  unsigned int D1SCL_CRC_LAST;
};

/* 4394 */
union D1SCL_CRC_LAST
{
  $D50CAC1FD7C453526CBB83FAF7E3D6F3 bitfields;
  $D50CAC1FD7C453526CBB83FAF7E3D6F3 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4395 */
union D1GRPH_LUT_10BIT_BYPASS_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4396 */
union PCIE_PERF_COUNT1_TXCLK
{
  $67D6671016B8FCE0C30C03366012046C bitfields;
  $67D6671016B8FCE0C30C03366012046C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4397 */
union RTS_EDGE_1_DY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4398 */
union CP_RT2_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4399 */
union FSB_TLA_PATT_CARE_MASK0
{
  $8C73C7457AC982BE9C676ACCA1560461 bitfields;
  $8C73C7457AC982BE9C676ACCA1560461 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4400 */
union PCIE_VC0_CAP_REG2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4401 */
union BASE_CODE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4402 */
union CP_DMA_DST_ADDR_STAT
{
  $B1F84801885D0AAAD30E728E1555F596 bitfields;
  $B1F84801885D0AAAD30E728E1555F596 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4403 */
union CP_RT9_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4404 */
union D1CRTC_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4405 */
union PCIE_FC_P
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4406 */
union VGT_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4407 */
union CP_IB2_BUFSZ
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4408 */
union FSB_LX_LERSTM
{
  $C20470E517CC3CADA9BC69410296E4A9 bitfields;
  $C20470E517CC3CADA9BC69410296E4A9 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4409 */
union CP_CSQ_AVAIL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4410 */
union GC_REVISION_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4411 */
union RTS_INV_W_DY
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4412 */
struct $92B25E3576CB975A90B5CBF9A43A0E13
{
  unsigned int CRC0_TO_7;
};

/* 4413 */
union AZ1_BC2AZ_CRC_READ
{
  $92B25E3576CB975A90B5CBF9A43A0E13 bitfields;
  $92B25E3576CB975A90B5CBF9A43A0E13 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4414 */
union TP3_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4415 */
union CP_CSQ_RB_STAT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4416 */
union BIOS_14_SCRATCH
{
  $70BBC63B5A2B1E85531DE7E1CDA03186 bitfields;
  $70BBC63B5A2B1E85531DE7E1CDA03186 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4417 */
union FSB_LX_IDLE_PATT_OR
{
  $BAFBABD929A58BFE874C95C0D64ECFD2 bitfields;
  $BAFBABD929A58BFE874C95C0D64ECFD2 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4418 */
union MC1_PAD_CAL_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4419 */
union VENDOR_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4420 */
union SQ_PERFCOUNTER2_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4421 */
union VC_PERFCOUNTER0_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4422 */
union CP_RB_RPTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4423 */
union FSB_LX_PMC1_OR
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4424 */
union AZ1_SECONDARY_STATE_DWORD2
{
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bitfields;
  $EACE6C2AA81A22FF5AA56EA0F0022C81 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4425 */
union MC0_PAD_CAL_STATUS
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4426 */
union ID12_OVL_DATA_A
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4427 */
union CLIPPER_DEBUG_REG06
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4428 */
union LINK_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4429 */
union LB_DCP_WRITE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4430 */
union RB_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4431 */
union SCLK_PWRMGT_CNTL2_REG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4432 */
union AZ0_MRU_BANK8_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4433 */
union VC_DEBUG_REG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4434 */
union SQ_CONSTANT_T3
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4435 */
union CPU_MST_REQ_ATTR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4436 */
union SLOT_CAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4437 */
union PCIE_P_IMP_CNTL_UPDATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4438 */
union SCLK_G_SCL1_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4439 */
union BSB_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4440 */
union TCO_QUAD3_DEBUG1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4441 */
union MC0_DLL_MASTER_ADJ_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4442 */
union FSB_TR_DEBUG_AUX_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4443 */
union RB_COPY_FUNC
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4444 */
struct $E17F72243A724A5CC84BC1981F2234FE
{
  unsigned int SCRATCH_CMP_LOW;
};

/* 4445 */
union SCRATCH_CMP_LO
{
  $E17F72243A724A5CC84BC1981F2234FE bitfields;
  $E17F72243A724A5CC84BC1981F2234FE bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4446 */
union TCF_PERFCOUNTER8_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4447 */
union FSB_TX_CMDMM0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4448 */
union PA_CL_UCP_3_X
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4449 */
struct XGRAPHICS::_FORMAT_DATA
{
  char *mask;
  unsigned __int16 num_fetches_needed;
  unsigned __int16 num_dwords_fetched;
  int data_format;
  int num_format_all;
  int format_comp_all;
  const int *expanded_formats_table;
};

/* 4450 */
struct XGRAPHICS::r400_alu_dump_instr
{
  _BYTE gap0[8];
  int _bf8;
};

/* 4451 */
struct XGRAPHICS::r400_alu_instr
{
  _BYTE gap0[8];
  int _bf8;
};

/* 4452 */
struct XGRAPHICS::r400_vfetch_instr
{
  _BYTE gap0[8];
  int _bf8;
};

/* 4453 */
struct XGRAPHICS::r400_tfetch_instr
{
  _BYTE gap0[8];
  int _bf8;
};

/* 4454 */
union XGRAPHICS::r400_instr
{
  XGRAPHICS::r400_alu_dump_instr aluDump;
  XGRAPHICS::r400_alu_instr alu;
  XGRAPHICS::r400_vfetch_instr vfetch;
  XGRAPHICS::r400_tfetch_instr tfetch;
};

/* 4455 */
struct XGRAPHICS::r400_exec_instr
{
  _BYTE gap0[2];
  int _bf2;
};

/* 4456 */
struct XGRAPHICS::r400_alloc_instr
{
  _BYTE gap0[2];
  int _bf2;
};

/* 4457 */
struct XGRAPHICS::r400_jump_instr
{
  _BYTE gap0[2];
  int _bf2;
};

/* 4458 */
struct XGRAPHICS::r400_call_instr
{
  _BYTE gap0[2];
  int _bf2;
};

/* 4459 */
struct XGRAPHICS::r400_ret_instr
{
  unsigned __int16 reserved0;
  int _bf2;
};

/* 4460 */
struct XGRAPHICS::r400_loop_instr
{
  _BYTE gap0[2];
  int _bf2;
};

/* 4461 */
struct XGRAPHICS::r400_loopend_instr
{
  _BYTE gap0[2];
  int _bf2;
};

/* 4462 */
struct XGRAPHICS::r400_nop_instr
{
  unsigned __int16 reserved0;
  int _bf2;
};

/* 4463 */
union XGRAPHICS::r400_flowctrl_instr
{
  XGRAPHICS::r400_exec_instr exec;
  XGRAPHICS::r400_alloc_instr alloc;
  XGRAPHICS::r400_jump_instr jump;
  XGRAPHICS::r400_call_instr call;
  XGRAPHICS::r400_ret_instr ret;
  XGRAPHICS::r400_loop_instr loop;
  XGRAPHICS::r400_loopend_instr loopEnd;
  XGRAPHICS::r400_nop_instr nop;
};

/* 4464 */
union XGRAPHICS::IL_Token
{
  XGRAPHICS::IL_Lang il_language_token;
  XGRAPHICS::IL_Version il_version_token;
  XGRAPHICS::IL_OpCode il_opcode_token;
  XGRAPHICS::IL_Dst il_destination_token;
  XGRAPHICS::IL_Dst_Mod il_destination_modifier_token;
  XGRAPHICS::IL_Src il_source_token;
  XGRAPHICS::IL_Src_Mod il_source_modifier_token;
  XGRAPHICS::IL_Label il_label_token;
  XGRAPHICS::IL_Precomp_Descriptor il_precomp_descriptor_token;
  XGRAPHICS::IL_Comment_Descriptor il_comment_descriptor_token;
};

/* 4465 */
struct XGRAPHICS::_XLT_DECL_INFO
{
  unsigned int regType;
  unsigned int xImport;
  unsigned int yImport;
  unsigned int zImport;
  unsigned int wImport;
  unsigned int center;
  unsigned int origin;
};

/* 4466 */
struct XGRAPHICS::_XLT_RENDERSTATES
{
  unsigned int numInputRegs;
  unsigned int numOutputRegs;
  unsigned int firstResource;
  unsigned int paramGen;
  unsigned int genIdxPix;
  unsigned int genIdxVtx;
  unsigned int vsExportCnt;
  unsigned int vsExportMode;
  unsigned int psExportMode;
  unsigned int paramShade;
  unsigned int samplingPattern;
  unsigned int predOptimize;
  unsigned int outScreenXY;
  unsigned int sampleCntl;
  unsigned int paramGenPos;
  unsigned int cylinWrapMask[16];
};

/* 4467 */
struct XGRAPHICS::_SSM_TEXTUREFORMAT_DATA
{
  int fetch_valid_only;
  int tx_coord_norm;
  int mag_filter;
  int min_filter;
  int mip_filter;
  int aniso_filter;
  int arbitrary_filter;
  int vol_mag_filter;
  int vol_min_filter;
  int sample_location;
};

/* 4468 */
struct XGRAPHICS::_CP_TRANSLATED_BOOL_CONSTANTS
{
  unsigned int PackedValues[4];
  unsigned int bUsed[4];
};

/* 4469 */
struct XGRAPHICS::_CS_VERTEX_INPUT_PATCH
{
  XGRAPHICS::E_PATCH_TYPE ePatchType;
  unsigned int streamNumber;
  unsigned int byteOffset;
  unsigned int dword_position;
  XGRAPHICS::E_VERTEX_SWIZZLE eSwizzelMask[4];
};

/* 4470 */
struct XGRAPHICS::_XLT_EXEC_INFO_ALLOC_DATA
{
  unsigned int bufSel;
  unsigned int numBufAlloc;
  unsigned int reserved1;
};

/* 4471 */
struct XGRAPHICS::_XLT_EXEC_INFO_FETCH_DATA
{
  unsigned int insertFetchInst;
  unsigned int numFetchInst;
  unsigned int lastALUInst;
};

/* 4472 */
struct XGRAPHICS::_XLT_EXEC_INFO_MEMEXPORT_DATA
{
  unsigned int numAluInst;
  unsigned int reserved1;
  unsigned int reserved2;
};

/* 4473 */
struct XGRAPHICS::_XLT_EXEC_INFO_FC_DATA
{
  unsigned int constID;
  unsigned int label;
  unsigned int reserved1;
};

/* 4474 */
union XGRAPHICS::_XLT_EXEC_INFO_DATA
{
  XGRAPHICS::_XLT_EXEC_INFO_ALLOC_DATA alloc;
  XGRAPHICS::_XLT_EXEC_INFO_FETCH_DATA fetch;
  XGRAPHICS::_XLT_EXEC_INFO_MEMEXPORT_DATA memexport;
  XGRAPHICS::_XLT_EXEC_INFO_FC_DATA fc;
};

/* 4475 */
struct XGRAPHICS::_XLT_EXEC_INFO_NODE
{
  unsigned int flags;
  unsigned int aluInstruction;
  XGRAPHICS::_XLT_EXEC_INFO_DATA data;
  XGRAPHICS::_XLT_EXEC_INFO_NODE *next;
};

/* 4476 */
struct XGRAPHICS::_XLT_EXEC_INFO
{
  XGRAPHICS::_XLT_EXEC_INFO_NODE *head;
  XGRAPHICS::_XLT_EXEC_INFO_NODE *tail;
  unsigned int numExecInfo;
};

/* 4477 */
struct XGRAPHICS::_HWINFO_LCC
{
  unsigned int constID;
  unsigned int minConstDWStart;
  unsigned int maxConstDWCount;
  unsigned int vidmemAlign;
  unsigned int vidmemSize;
};

/* 4478 */
union XGRAPHICS::_CP_CONSTCTRL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  char u8all;
};

/* 4479 */
struct XGRAPHICS::_CS_R400_RENDERSTATE_VALUES
{
  XGRAPHICS::_E_R400_STATE eState;
  XGRAPHICS::__AS_STATEVALUE value;
};

/* 4480 */
union XGRAPHICS::_CS_COMPONENT_SEL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC components;
  unsigned int allComponents;
};

/* 4481 */
struct XGRAPHICS::_XLT_DECLTEX_INFO
{
  unsigned int texUsage;
  unsigned int texCoordMode;
};

/* 4482 */
struct XGRAPHICS::_XLT_EXPORT_CACHE_NODE
{
  unsigned int expTempNum;
  unsigned int expDstNum;
  unsigned int expDstType;
  XGRAPHICS::_XLT_EXPORT_CACHE_NODE *next;
};

/* 4483 */
struct XGRAPHICS::_XLT_EXPORT_CACHE
{
  XGRAPHICS::_XLT_EXPORT_CACHE_NODE *head;
  XGRAPHICS::_XLT_EXPORT_CACHE_NODE *tail;
  unsigned int numExports;
};

/* 4484 */
struct XGRAPHICS::_XLT_CONTEXT_ASSM_INFO
{
  unsigned int shader_type;
  unsigned int shader_lang;
  unsigned int multipassMode;
  unsigned int numAssmInstr;
  XGRAPHICS::r400_instr assmInstrCache[900];
  XGRAPHICS::r400_instr *curAssmInstr;
  unsigned int numFetchInstr;
  XGRAPHICS::r400_instr fetchInstrCache[100];
  XGRAPHICS::r400_instr *curFetchInstr;
  unsigned int numFCInstr;
  unsigned int cfInstrIndex;
  XGRAPHICS::r400_flowctrl_instr cfInstrCache[64];
  XGRAPHICS::r400_flowctrl_instr *curCFInstr;
  XGRAPHICS::r400_instr *outputCache;
  unsigned int outputCacheSize;
  XGRAPHICS::_XLT_DECL_INFO dclInfo[20];
  XGRAPHICS::_XLT_DECLTEX_INFO dclTexInfo[20];
  XGRAPHICS::_XLT_EXEC_INFO execInfo;
  unsigned int numAllocInstr;
  unsigned int ilInfo[900];
  XGRAPHICS::_XLT_EXPORT_CACHE exportCache;
  unsigned int firstAvailableTemp;
  unsigned int allocIssued[4];
  unsigned int symTable[25][64];
  unsigned int numSymbolsGPR;
  unsigned int numSymbolsExp;
  unsigned int numScratchConst;
  unsigned int srcModTemp[3];
  XGRAPHICS::IL_Token ilRelAddrBuffer[32];
  unsigned int relAddrTemp;
  unsigned int relAddrRoundMode;
  unsigned int predStackTemp;
  unsigned int predStackReserveTemp;
  unsigned int posExists;
  unsigned int paramExists;
  unsigned int error;
};

/* 4485 */
struct XGRAPHICS::_XLT_CONTEXT
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_CP_COMPILED_PROGRAM *pCP;
  XGRAPHICS::_ABSTRACT_STATE *pAS;
  XGRAPHICS::IL_Token *il;
  XGRAPHICS::_XLT_CONTEXT_ASSM_INFO *pCtxAssm;
  unsigned int vsToPsMap[25][16];
  unsigned int numVsVectorsExported;
  XGRAPHICS::_XLT_RENDERSTATES xltRS;
};

/* 4486 */
struct XGRAPHICS::_XLT_IL_INSTRUCTION
{
  XGRAPHICS::IL_OpCode op;
  XGRAPHICS::IL_Dst dst;
  XGRAPHICS::IL_Dst_Mod dstMod;
  XGRAPHICS::IL_Rel_Addr dstRelAddr;
  XGRAPHICS::IL_Src src[3];
  XGRAPHICS::IL_Src_Mod srcMod[3];
  XGRAPHICS::IL_Rel_Addr srcRelAddr[3];
};

/* 4487 */
struct $CAF0313639E8CEB9F17D8F1959E0D056
{
  XGRAPHICS::E_SSM_COMPILEWITH_QUERY eQuery;
  unsigned int param;
  XGRAPHICS::_SSM_COMPILEWITH_RESULT eRequiredResult;
};

/* 4488 */
struct $FB3A810270EA5B8F531845B4640C74D4
{
  XGRAPHICS::_E_AS_STATE eState;
  unsigned int uValue;
};

/* 4489 */
struct $2E53F40CB181EB555EDD5F7DF071222B
{
  XGRAPHICS::_E_AS_ARRAY_STATE eArrayState;
  unsigned int uIndex;
  unsigned int uValue;
};

/* 4490 */
union $30A76D68D4E6AC5F2BCEBB90DC6EBCBD
{
  $CAF0313639E8CEB9F17D8F1959E0D056 query;
  $FB3A810270EA5B8F531845B4640C74D4 as;
  $2E53F40CB181EB555EDD5F7DF071222B as_array;
};

/* 4491 */
struct XGRAPHICS::_CS_REQUIRED_RENDERSTATE
{
  XGRAPHICS::E_REQUIRED_RS_TYPE eType;
  $30A76D68D4E6AC5F2BCEBB90DC6EBCBD info;
};

/* 4492 */
struct XGRAPHICS::_SSM_VERTEXFORMAT_DATA
{
  int fetch_valid_only;
  int format_comp_all;
  int num_format_all;
  int signed_rf_mode_all;
  int index_round;
  int data_format;
  int exp_adjust_all;
  int stride;
  int offset_x;
  int stream_num;
};

/* 4493 */
struct XGRAPHICS::_SSM_HWINFO
{
  XGRAPHICS::_HWINFO_LCC HwInfoLcc[5];
};

/* 4494 */
struct XGRAPHICS::_CP_TRANSLATED_ALU_CONSTANTS
{
  float fValues[32][4];
  unsigned int bUsed[32];
};

/* 4495 */
struct XGRAPHICS::_XLT_TEXTURE_INFO
{
  XGRAPHICS::_SSM_TEXTUREFORMAT_DATA txtFmtData;
  int clampX;
  int clampY;
  int clampZ;
  float borderRed;
  float borderGreen;
  float borderBlue;
  float borderAlpha;
  unsigned int texType;
  unsigned int texFormat;
  unsigned int cubeMapTemp;
  unsigned int bdrClrFrcTemp;
  unsigned int useCompLOD;
  unsigned int useRegLOD;
};

/* 4496 */
struct XGRAPHICS::_R400_RS_BLK_C
{
  VGT_MAX_VTX_INDX vgt_max_vtx_indx;
  VGT_MIN_VTX_INDX vgt_min_vtx_indx;
  VGT_INDX_OFFSET vgt_indx_offset;
  VGT_MULTI_PRIM_IB_RESET_INDX vgt_multi_prim_ib_reset_indx;
  RB_COLOR_MASK rb_color_mask;
  RB_BLEND_RED rb_blend_red;
  RB_BLEND_GREEN rb_blend_green;
  RB_BLEND_BLUE rb_blend_blue;
  RB_BLEND_ALPHA rb_blend_alpha;
  unsigned int reserved_0;
  unsigned int reserved_1;
  unsigned int reserved_2;
  RB_STENCILREFMASK_BF rb_stencilrefmask_bf;
  RB_STENCILREFMASK rb_stencilrefmask;
  RB_ALPHA_REF rb_alpha_ref;
  PA_CL_VPORT_XSCALE pa_cl_vport_xscale;
  PA_CL_VPORT_XOFFSET pa_cl_vport_xoffset;
  PA_CL_VPORT_YSCALE pa_cl_vport_yscale;
  PA_CL_VPORT_YOFFSET pa_cl_vport_yoffset;
  PA_CL_VPORT_ZSCALE pa_cl_vport_zscale;
  PA_CL_VPORT_ZOFFSET pa_cl_vport_zoffset;
};

/* 4497 */
struct XGRAPHICS::_CS_GENERIC_PATCH_DESCRIPTION
{
  XGRAPHICS::E_PATCH_TYPE ePatchType;
  unsigned int pPatchData[1];
};

/* 4498 */
union TP2_PERFCOUNTER1_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4499 */
struct $2B0E1A757F1107933B5B59050AA7C73C
{
  unsigned int DEFAULT2_PITCH_OFFSET;
};

/* 4500 */
union CP_DEFAULT2_PITCH_OFFSET
{
  $2B0E1A757F1107933B5B59050AA7C73C bitfields;
  $2B0E1A757F1107933B5B59050AA7C73C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4501 */
union LINK_CAP
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4502 */
union SETUP_DEBUG_REG2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4503 */
union PGL_CTL1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4504 */
union BSB_DEBUG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4505 */
union MC1_SECURE_MEMORY_APERTURE_LOG_BIU
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4506 */
union RB_PERFCOUNTER0_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4507 */
union SQ_CONSTANT_VFETCH_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4508 */
union PCIE_TX_REQUESTER_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4509 */
union TCF_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4510 */
struct $1395AA64A76932E68B06E8E7E61FA48F
{
  unsigned int COUNTER;
};

/* 4511 */
union CP_PROG_COUNTER
{
  $1395AA64A76932E68B06E8E7E61FA48F bitfields;
  $1395AA64A76932E68B06E8E7E61FA48F bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4512 */
union FSB_LR_DEBUG_AUX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4513 */
union CP_RT11_BADR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4514 */
struct $2480ACDE0FB77F6C6292424E13850A88
{
  unsigned int SCRATCH_REG7;
};

/* 4515 */
union SCRATCH_REG7
{
  $2480ACDE0FB77F6C6292424E13850A88 bitfields;
  $2480ACDE0FB77F6C6292424E13850A88 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4516 */
union EP_REGPROG_INF
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4517 */
union IOC_PERFCOUNTER1_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4518 */
union D1GRPH_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4519 */
union PA_CL_UCP_1_W
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4520 */
union CP_RT2_MASK
{
  $6A9D0CB0DD98F54C5F43204F3D25F360 bitfields;
  $6A9D0CB0DD98F54C5F43204F3D25F360 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4521 */
struct $D5B2E3AD612DC1420DDA3558074A482B
{
  unsigned int ME_DEBUG_DATA;
};

/* 4522 */
union CP_ME_STATUS
{
  $D5B2E3AD612DC1420DDA3558074A482B bitfields;
  $D5B2E3AD612DC1420DDA3558074A482B bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4523 */
union SXIFCCG_DEBUG_REG0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4524 */
union HSIO_DLL_ADJ1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4525 */
union PA_SC_FIFO_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4526 */
union BIU_PERFCOUNTER1_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4527 */
union SCL1_HFILT_IO
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4528 */
union AZ1_MRU_BANK10_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4529 */
union CP2_INT_VECTOR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4530 */
union GC_COMMAND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4531 */
union PCIE_CONFIG_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4532 */
union FSB_TLA_COUNT2_INIT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4533 */
union PMI_CAP_LIST
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4534 */
union CP_PERFCOUNTER_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4535 */
union VC_PERFCOUNTER3_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4536 */
union PCIE_PERF_COUNT1_SLV_NS_C_CLK
{
  $67D6671016B8FCE0C30C03366012046C bitfields;
  $67D6671016B8FCE0C30C03366012046C bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4537 */
struct $9F76C8D9E0401A38216FEF39C68D4612
{
  unsigned int IOC_BSB_SLV_REQ_CRC_2;
};

/* 4538 */
union IOC_BSB_SLV_REQ_CRC_2
{
  $9F76C8D9E0401A38216FEF39C68D4612 bitfields;
  $9F76C8D9E0401A38216FEF39C68D4612 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4539 */
union PA_SC_PERFCOUNTER0_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4540 */
union PA_SC_DEBUG_ITER_2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4541 */
union SQ_PERFCOUNTER2_LOW
{
  $6307C4AB00671288B63E8CEC6B503191 bitfields;
  $6307C4AB00671288B63E8CEC6B503191 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4542 */
union MC0_TUNING_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4543 */
union FSB_TX_CMDMM1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4544 */
union CP_ME_RAM_WADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4545 */
union TCF_PERFCOUNTER8_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4546 */
union MC1_TIMING_CNTL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4547 */
union MC1_PAD_IF_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4548 */
union HZ_PERFCOUNTER0_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4549 */
union FSB_LX_LSPARE_OR
{
  $56CA10FD1B895C4754704F59B7B1E4BB bitfields;
  $56CA10FD1B895C4754704F59B7B1E4BB bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4550 */
union AZ0_LOOPBACK_PATTERN2PHS1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4551 */
union CP_2D_IMMD_BASE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4552 */
union CP_DMA_TABLE_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4553 */
union PA_CL_POINT_CULL_RAD
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4554 */
struct $13BD7CEF83C6CFF4255EDB36BDAE46AD
{
  unsigned int DCCG_DEBUG_BUS_ID;
};

/* 4555 */
union DCCG_BUS_ID
{
  $13BD7CEF83C6CFF4255EDB36BDAE46AD bitfields;
  $13BD7CEF83C6CFF4255EDB36BDAE46AD bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4556 */
union AZ0_LOOPBACK_LFSR
{
  $9978CCBBDDEED2AA2ECBDF44ECC5037D bitfields;
  $9978CCBBDDEED2AA2ECBDF44ECC5037D bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4557 */
union AZ0_LOOPBACK_PATTERN0PHS0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4558 */
union AZ0_MRU_BANK10_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4559 */
union TCB_FETCH_GEN_WALKER_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4560 */
union VC_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4561 */
union RB_MODECONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4562 */
union RB_BC_AZ0_CRC
{
  $F83D1B2D94D0030D653AB16B8AF85245 bitfields;
  $F83D1B2D94D0030D653AB16B8AF85245 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4563 */
union VC_DEBUG_REG3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4564 */
union FSB_TX_PMC4_AND
{
  $4519BB88727B067C6A4CBE6450201155 bitfields;
  $4519BB88727B067C6A4CBE6450201155 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4565 */
union PCIE_PERF_CNTL_SLV_R_CLK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4566 */
union COHER_BASE_PM4
{
  $65FCA93EA0DF635F734C67FDB6EB4292 bitfields;
  $65FCA93EA0DF635F734C67FDB6EB4292 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4567 */
union EP_DEVICE_ID
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4568 */
struct $B94DB2941066711771D8EBE874CEC283
{
  unsigned int RT_ME_RAM_DATA;
};

/* 4569 */
union CP_RT_ME_RAM_DATA
{
  $B94DB2941066711771D8EBE874CEC283 bitfields;
  $B94DB2941066711771D8EBE874CEC283 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4570 */
union CP_VIP_EOL_EOF_COUNTER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4571 */
union GC_HEADER
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4572 */
union D1SCL_CRC_SOURCE_SEL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4573 */
union MC0_RDBUF_DATA
{
  $F8423EDFAEBAFA0149608CE6A40E6919 bitfields;
  $F8423EDFAEBAFA0149608CE6A40E6919 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4574 */
union MC1_TERM_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4575 */
union RBBM_STATUS2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4576 */
union FSB_LX_LERST_XSTP
{
  $EBAEE044B7420189F199A379C6721BB5 bitfields;
  $EBAEE044B7420189F199A379C6721BB5 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4577 */
union D1GRPH_SURFACE_OFFSET_Y
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4578 */
union TCF_PERFCOUNTER4_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4579 */
union CP_RT11_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4580 */
union AZ1_MRU_BANK7_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4581 */
union AZ1_LOOPBACK_TRANSMIT_COUNT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4582 */
union VC_PERFCOUNTER3_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4583 */
union TP0_CHECKSUM_PIXEL_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4584 */
union TP1_CHECKSUM_PIXEL_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4585 */
union CP_RT8_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4586 */
union PA_CL_UCP_0_W
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4587 */
union SCRATCH_ADDR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4588 */
union AZ1_MRU_BANK3_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4589 */
union ID08_LUT_CONTROL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4590 */
union VC_DEBUG_REG4
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4591 */
union SQ_FETCH_RT_3
{
  $B57532793320E0809910C133A9BB0FC8 bitfields;
  $B57532793320E0809910C133A9BB0FC8 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4592 */
union SB_LATENCY
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4593 */
union TP1_CHECKSUM_PIXEL_3
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4594 */
union DC_LUT_WRITE_EN_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4595 */
union SCL1_CONTROL2
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4596 */
union PA_SU_POLY_OFFSET_FRONT_SCALE
{
  $475F1C14696CBDFE6BB8125DE838217A bitfields;
  $475F1C14696CBDFE6BB8125DE838217A bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4597 */
union COHER_STATUS_RT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4598 */
union TCF_DEBUG
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4599 */
union VC_ENHANCE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4600 */
union TCF_PERFCOUNTER11_LOW
{
  $1BB39DFEEBD8081F885AF5D9FC571465 bitfields;
  $1BB39DFEEBD8081F885AF5D9FC571465 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4601 */
union CLIPPER_DEBUG_REG05
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4602 */
union PA_CL_UCP_5_X
{
  $DDC751B6659AE6263CEC9214904ED794 bitfields;
  $DDC751B6659AE6263CEC9214904ED794 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4603 */
union AZ1_MRU_BANK14_DEPTH_MASK
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4604 */
union SQ_PERFCOUNTER3_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4605 */
union TCF_PERFCOUNTER7_HI
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4606 */
union BIU_PERFCOUNTER0_SELECT
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4607 */
union FSB_TX_DEBUG_LO_AND
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4608 */
union SQ_INSTRUCTION_CF_EXEC_0
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4609 */
union CP_RT13_SIZE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4610 */
union PCIE_PERF_LATENCY_MAX
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4611 */
union CP_RT4_REFERENCE
{
  $F08EBCE85B570F8FEB61E847F92C00EA bitfields;
  $F08EBCE85B570F8FEB61E847F92C00EA bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4612 */
union AZ0_BC2AZ_CRC_READ
{
  $92B25E3576CB975A90B5CBF9A43A0E13 bitfields;
  $92B25E3576CB975A90B5CBF9A43A0E13 bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4613 */
union AZ1_LOOPBACK_PATTERN2PHS1
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4614 */
union D1GRPH_UPDATE
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4615 */
union PCIE_ERR_CNTL
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bitfields;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int u32All;
  int i32All;
  float f32All;
};

/* 4616 */
struct XGRAPHICS::_R400_TEXTURE_ELEMENT_FMT
{
  unsigned int bpp;
  unsigned int fmtX;
  unsigned int fmtY;
  unsigned int fmtZ;
  unsigned int fmtW;
  unsigned int eFmt;
  unsigned int endian;
  unsigned int fmtAll;
  unsigned int RFMode;
  unsigned int SwizzleX;
  unsigned int SwizzleY;
  unsigned int SwizzleZ;
  unsigned int SwizzleW;
};

/* 4617 */
struct XGRAPHICS::_CP_TRANSLATION_BUFFERS
{
  void *hClientDevHandle;
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_CS_COMPILED_SHADER *pPrevCS_ps;
  XGRAPHICS::_CS_COMPILED_SHADER *pPrevCS_vs;
  XGRAPHICS::_CP_TRANSLATED_ALU_CONSTANTS translatedALU;
  XGRAPHICS::_CP_TRANSLATED_BOOL_CONSTANTS translatedBOOL;
  XGRAPHICS::_R400_RS_BLK_C translatedRegConsts;
  XGRAPHICS::_CP_FETCHCONST_BLOCK translatedFetch[32];
};

/* 4618 */
struct XGRAPHICS::_R400_ADDR_STATE
{
  int Pipes;
  int GroupSize;
  int BitScale;
  int PixelSize;
  int DataSize;
  int TileSize;
  int TileBase;
  unsigned int SurfaceBase;
  int Pitch;
  int Height;
  int Extent;
  int Fragments;
  int Slices;
  int Tiling;
  XGRAPHICS::AddrArray Array;
  int SliceSize;
};

/* 4619 */
struct XGRAPHICS::_R400_COLOR_ELEMENT_FMT
{
  unsigned int channelSwap;
  unsigned int fmt;
  unsigned int normalization;
};

/* 4620 */
struct XGRAPHICS::_XENOS_COLOR_ELEMENT_FMT
{
  unsigned int fmt;
};

/* 4621 */
#pragma pack(push, 8)
struct XGRAPHICS::_R400_ZPLANE_STATE
{
  __int64 SlopeX;
  __int64 SlopeY;
  __int64 Center;
  int Multi;
  int ShiftXY;
  int ShiftZ;
};
#pragma pack(pop)

/* 4622 */
struct XGRAPHICS::_vertexFetchFormat
{
  _BYTE gap0[8];
  int _bf8;
};

/* 4623 */
struct XGRAPHICS::_PM4CMDIMLOAD
{
  unsigned int header;
  unsigned int instBase;
  unsigned int instInfo;
};

/* 4624 */
struct XGRAPHICS::_PM4CMDSETSTATE
{
  unsigned int header;
  unsigned int data[12];
};

/* 4625 */
struct XGRAPHICS::_PM4CMDINVALIDATESTATE
{
  unsigned int header;
  unsigned int invalidateCntl;
};

/* 4626 */
struct XGRAPHICS::_PM4CMDSETCONST
{
  unsigned int header;
  unsigned int constCtrl;
};

/* 4627 */
struct XGRAPHICS::_PM4CMDLCC
{
  unsigned int header;
  unsigned int baseAddr;
  unsigned int constCtrl;
  unsigned int numDwords;
};

/* 4628 */
struct XGRAPHICS::_SP_STATE_PREPROCESSOR
{
  void *hClientDevHandle;
  void *(__cdecl *AllocateSysMem)(void *, unsigned int);
  XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *FreeSysMem)(void *, void *);
  XGRAPHICS::_SC_STATE_CACHE *pStateCache;
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
};

/* 4629 */
struct XGRAPHICS::_SSM_ABSTRACTSTATE_FACTORY
{
  XGRAPHICS::__AS_STATE_MAP_INFO *pASMapInfo;
  XGRAPHICS::_AS_CONST_INFO ASConstInfo;
};

/* 4630 */
struct XGRAPHICS::_SSM_DEVINFO
{
  XGRAPHICS::_SSM_SSMDEVICE2CLIENT_INTERFACE DevClientInterface;
  XGRAPHICS::_KEY_LIST *SSMObjList;
  unsigned int CurrentKey;
  XGRAPHICS::_PS_PROGRAM_STORE *pProgramStore;
  XGRAPHICS::_SS_SHADER_STORE *pShaderStore;
  XGRAPHICS::_PP_STATE_POSTPROCESSOR *pPostProcessor;
  XGRAPHICS::_SSM_REGISTRY *pRegistry;
  XGRAPHICS::_CC_STATE_COMPILER *pCompiler;
  XGRAPHICS::_SC_STATE_CACHE *pStateCache;
  XGRAPHICS::_SR_SHADER_RECYCLER *pShaderRecycler;
  XGRAPHICS::_SP_STATE_PREPROCESSOR *pPreprocessor;
  XGRAPHICS::_ORDERED_LIST_FACTORY *pOListFactory;
  XGRAPHICS::_INTEGER_LIST_FACTORY *pIntListFactory;
  XGRAPHICS::_OBJECT_LIST_FACTORY *pObjListFactory;
  XGRAPHICS::_SSM_ABSTRACTSTATE_FACTORY AS_Factory;
  XGRAPHICS::_TS_TEXTURE_SERVER *pTxServer;
  XGRAPHICS::_SSM_HWINFO HwInfo;
  unsigned int PSInitSize;
  unsigned int SSInitSize;
};

/* 4631 */
struct XGRAPHICS::_PM4CMDIMLOADIMMEDIATE
{
  unsigned int header;
  unsigned int codeId;
  unsigned int instInfo;
};

/* 4632 */
struct XGRAPHICS::_SSM_OBJINFO
{
  XGRAPHICS::_SSM_SSMOBJECT2CLIENT_INTERFACE ObjClientInterface;
  void *hDev;
  XGRAPHICS::_KEY_LIST *ASObjList;
  unsigned int CurrentASKey;
  XGRAPHICS::_ABSTRACT_STATE *UASObj;
};

/* 4633 */
struct _ATID3DSTATEDATA
{
  _ATIVECTOR *pVSConstFloat;
  _ATIVECTOR *pVSConstInt;
  int *pVSConstBool;
};

/* 4634 */
struct _ATICACHEENTRY
{
  void *pObj;
};

/* 4635 */
struct _ATIDXDEVICE
{
  struct _R300DXSETTINGS *pSettings;
};

/* 4636 */
union $C5219E639D60D1C576279D2A45C0DD57
{
  unsigned int dwCurrVtxShader;
  unsigned int currVSFunc;
};

/* 4637 */
struct _ATID3DCTX
{
  unsigned int dwCntxFlags;
  _ATIDXDEVICE *dxDev;
  _ATIVSDECL *pCurrVSDecl;
  $C5219E639D60D1C576279D2A45C0DD57 ___u3;
  void *hwlCtxData;
  unsigned int maxVSConstStored;
  unsigned int maxVSConstIntStored;
  unsigned int maxVSConstBoolStored;
  unsigned int numVSConstFloat;
  unsigned int numVSConstInt;
  unsigned int numVSConstBool;
  unsigned int dwDxVtxSize;
  unsigned int dwHwVtxSize;
  _ATID3DSTATEDATA d3dState;
};

/* 4638 */
struct _ATIPIXELSHADER
{
  unsigned int dwDummy;
};

/* 4639 */
struct _ATICACHESTATENTRY
{
  unsigned int depth;
  unsigned int accesses;
  unsigned int compares;
  unsigned int misses;
  unsigned int additions;
  unsigned int removals;
};

/* 4640 */
struct _D3DHAL_DP2CREATEVERTEXSHADERFUNC
{
  unsigned int dwHandle;
  unsigned int dwSize;
};

/* 4641 */
#pragma pack(push, 4)
struct _ATID3DSHADERCONSTTABLE
{
  char enable;
  unsigned int *pDefInst;
};
#pragma pack(pop)

/* 4642 */
struct _ATILIST
{
  void *pvArray;
  unsigned int dwEntrySize;
  unsigned int dwNumEntries;
};

/* 4643 */
struct _DLinkList
{
  unsigned int dwNodeSize;
  void **pvHead;
  void **pvTail;
  unsigned int dwTotalNodes;
  unsigned int dwMinHeadNodeIndex;
  unsigned int dwMaxHeadNodeIndex;
  unsigned int dwNumHeadNodesInUse;
  unsigned int dwNodesPerHeadNode;
  unsigned int dwFreeNodes;
  unsigned int dwNodesInList;
  void **pvFreeHead;
  _ATILIST alHeadNodes;
};

/* 4644 */
struct _ATICACHECREATE
{
  unsigned int flags;
  _ATICACHEALG hashAlg;
  unsigned int keyLenDw;
  unsigned int maxEntries;
  _ATICACHESIZELOG2 cacheSizeLog2;
  void (__cdecl *pObjDestroyFunc)(_ATIDXDEVICE *, void *, void *);
  void *pObjCtx;
};

/* 4645 */
struct _ATICACHE
{
  unsigned int flags;
  unsigned int size;
  unsigned int keyLenDw;
  unsigned int maxEntries;
  unsigned int numEntries;
  _ATICACHEALG hashAlg;
  _DLinkList *entryList;
  _ATICACHESTATENTRY *statList;
  char hashDesc[80];
  unsigned int (__cdecl *hashFunc)(char *, unsigned int);
  void (__cdecl *ObjDestroy)(_ATIDXDEVICE *, void *, void *);
  void *pObjCtx;
};

/* 4646 */
struct _ATIMATRIX
{
  float _11;
  float _21;
  float _31;
  float _41;
  float _12;
  float _22;
  float _32;
  float _42;
  float _13;
  float _23;
  float _33;
  float _43;
  float _14;
  float _24;
  float _34;
  float _44;
  unsigned int dwFlags;
};

/* 4647 */
struct _D3DHAL_DP2CREATEVERTEXSHADERDECL
{
  unsigned int dwHandle;
  unsigned int dwNumVertexElements;
};

/* 4648 */
struct _ATISHADERCONST
{
  unsigned int constType;
  int _bf4;
  char *pConstData;
};

/* 4649 */
#pragma pack(push, 4)
struct R400Tables::R400_INST
{
  unsigned int flags;
  R400Tables::Op equiv;
  R400Tables::Op ir_opcode;
  unsigned int r400_opcode;
  char name[30];
  int ctor_table_idx;
};
#pragma pack(pop)

/* 4650 */
struct XGRAPHICS::_ATIVSMEMALLOC
{
  unsigned int dwFlags;
  void *pVectors;
  unsigned int dwVectorsDevAddr;
  unsigned int dwSize;
};

/* 4651 */
struct XGRAPHICS::_ATIVSUSEMAP
{
  int _bf0;
};

/* 4652 */
struct XGRAPHICS::_ATIVSINPUTREG
{
  unsigned int dwStream;
  unsigned int dwReg;
  unsigned int dwDataType;
  unsigned int dwOffset;
  unsigned int dwSize;
  unsigned int dwStride;
};

/* 4653 */
struct XGRAPHICS::_ATIVSOUTPUT
{
  int _bf0;
};

/* 4654 */
struct XGRAPHICS::_R400FFVSTEX
{
  int _bf0;
};

/* 4655 */
struct XGRAPHICS::_R400FFVSMTRLSRC
{
  char _bf0;
};

/* 4656 */
union $445F049D43B7A8CC3FD486A5273E54D7
{
  unsigned int dxHandle;
  unsigned int dxFvf;
};

/* 4657 */
struct XGRAPHICS::_R400FFVSSTATE
{
  unsigned int flags;
  $445F049D43B7A8CC3FD486A5273E54D7 ___u1;
  XGRAPHICS::_R400FFVSTEX texAttribs[8];
  char litFlags[8];
  char vtxFogMode;
  char numXfrms;
  char numMVXfrms;
  XGRAPHICS::_R400FFVSMTRLSRC mtrlSrc;
};

/* 4658 */
struct XGRAPHICS::_R400FFVSVECTYPE
{
  int _bf0;
};

/* 4659 */
struct XGRAPHICS::_R400FFVSIN
{
  unsigned int vtxType;
  XGRAPHICS::_R400FFVSVECTYPE ivPos;
  XGRAPHICS::_R400FFVSVECTYPE ivBldWt;
  XGRAPHICS::_R400FFVSVECTYPE ivBldIdx;
  XGRAPHICS::_R400FFVSVECTYPE ivNorm;
  XGRAPHICS::_R400FFVSVECTYPE ivPSize;
  XGRAPHICS::_R400FFVSVECTYPE ivDiff;
  XGRAPHICS::_R400FFVSVECTYPE ivSpec;
  XGRAPHICS::_R400FFVSVECTYPE ivFog;
  XGRAPHICS::_R400FFVSVECTYPE ivPos2;
  XGRAPHICS::_R400FFVSVECTYPE ivNorm2;
  XGRAPHICS::_R400FFVSVECTYPE ivTex[8];
};

/* 4660 */
struct XGRAPHICS::_R400FFVSGEN
{
  XGRAPHICS::_R400FFVSSTATE state;
  XGRAPHICS::_R400FFVSIN in;
  unsigned int *pFirstInst;
  unsigned int *pCurrInst;
  unsigned int currStateLen;
  XGRAPHICS::_R400FFVSVECTYPE ovCurr;
  XGRAPHICS::_R400FFVSVECTYPE tvPosEye;
  XGRAPHICS::_R400FFVSVECTYPE tvNormEye;
  XGRAPHICS::_R400FFVSVECTYPE tvL;
  XGRAPHICS::_R400FFVSVECTYPE tvF;
  XGRAPHICS::_R400FFVSVECTYPE tvD;
  XGRAPHICS::_R400FFVSVECTYPE tvV;
  XGRAPHICS::_R400FFVSVECTYPE tvDiff;
  XGRAPHICS::_R400FFVSVECTYPE tvSpec;
  XGRAPHICS::_R400FFVSVECTYPE tvWork0;
  XGRAPHICS::_R400FFVSVECTYPE tvWork1;
  XGRAPHICS::_R400FFVSVECTYPE tvWork2;
  XGRAPHICS::_R400FFVSVECTYPE tvWork3;
  XGRAPHICS::_R400FFVSVECTYPE tvWork4;
  XGRAPHICS::_R400FFVSVECTYPE tvWork5;
  XGRAPHICS::_R400FFVSVECTYPE tvWork6;
  XGRAPHICS::_R400FFVSVECTYPE tvWork7;
  XGRAPHICS::_R400FFVSVECTYPE tvWork8;
  XGRAPHICS::_R400FFVSVECTYPE vClrAmb;
  XGRAPHICS::_R400FFVSVECTYPE vClrDiff;
  XGRAPHICS::_R400FFVSVECTYPE vClrSpec;
  XGRAPHICS::_R400FFVSVECTYPE vClrEmis;
  XGRAPHICS::_R400FFVSVECTYPE vFog;
  XGRAPHICS::_R400FFVSVECTYPE vHalfway;
  XGRAPHICS::_R400FFVSVECTYPE vWorkAmb;
  XGRAPHICS::_R400FFVSVECTYPE vWorkDiff;
  XGRAPHICS::_R400FFVSVECTYPE vWorkSpec;
  XGRAPHICS::_R400FFVSVECTYPE *pvTex[8];
  XGRAPHICS::_R400FFVSVECTYPE cvMVP;
  XGRAPHICS::_R400FFVSVECTYPE cvP;
  XGRAPHICS::_R400FFVSVECTYPE cvMV;
  XGRAPHICS::_R400FFVSVECTYPE cvInvtMV;
  XGRAPHICS::_R400FFVSVECTYPE cvTexM[8];
  XGRAPHICS::_R400FFVSVECTYPE cvVtxTween;
  XGRAPHICS::_R400FFVSVECTYPE cvFogAttrib;
  XGRAPHICS::_R400FFVSVECTYPE cvPntScale;
  XGRAPHICS::_R400FFVSVECTYPE cvGlobIllum;
  XGRAPHICS::_R400FFVSVECTYPE cvMatAmb;
  XGRAPHICS::_R400FFVSVECTYPE cvMatDiff;
  XGRAPHICS::_R400FFVSVECTYPE cvMatSpec;
  XGRAPHICS::_R400FFVSVECTYPE cvMatEmis;
  XGRAPHICS::_R400FFVSVECTYPE cvLitInfDir[8];
  XGRAPHICS::_R400FFVSVECTYPE cvLitInfHalfway[8];
  XGRAPHICS::_R400FFVSVECTYPE cvLitLclPos[8];
  XGRAPHICS::_R400FFVSVECTYPE cvLitLclSpotDir[8];
  XGRAPHICS::_R400FFVSVECTYPE cvLitRngAtten[8];
  XGRAPHICS::_R400FFVSVECTYPE cvLitSpotAttrib[8];
  XGRAPHICS::_R400FFVSVECTYPE cvLitClrAmb[8];
  XGRAPHICS::_R400FFVSVECTYPE cvLitClrDiff[8];
  XGRAPHICS::_R400FFVSVECTYPE cvLitClrSpec[8];
  XGRAPHICS::_R400FFVSVECTYPE cvPntClamp;
  XGRAPHICS::_R400FFVSVECTYPE cvTLVertClip0;
  XGRAPHICS::_R400FFVSVECTYPE cvTLVertClip1;
};

/* 4661 */
struct XGRAPHICS::_ATIVSVTXELEM
{
  int _bf0;
};

/* 4662 */
struct XGRAPHICS::_ATIVSELEMREG
{
  _BYTE gap0[4];
  int _bf4;
};

/* 4663 */
struct XGRAPHICS::_R400VSDECL
{
  unsigned int dwHandle;
  unsigned int dwFlags;
  unsigned int dwPendingCbID;
  unsigned int numElems;
  _D3DVERTEXELEMENT9 DxElem[64];
  XGRAPHICS::_ATIVSVTXELEM Elem[64];
  XGRAPHICS::_ATIVSELEMREG ElemReg[64];
  XGRAPHICS::_R400FFVSSTATE ffVsState;
  XGRAPHICS::_R400FFVSIN ffVsIn;
  _DLinkList ffVsStateList;
};

/* 4664 */
struct XGRAPHICS::_R400HOSCNTL
{
  unsigned int hosMode;
  unsigned int posDegree;
  unsigned int normDegree;
  int adaptiveEnabled;
  int dmapEnabled;
  unsigned int patchEdgeStyle;
  float patchSegments;
  unsigned int shader[27];
  XGRAPHICS::_R400VSDECL *pTessFactorDecl;
  HRESULT (__cdecl **pOrigPrimFunc)(_ATID3DCTX *, ATIPRIMTYPE, unsigned int, unsigned int);
};

/* 4665 */
struct XGRAPHICS::_R400VSFLOWCNTLENTRY
{
  int bNot;
  unsigned int dxSrcToken;
};

/* 4666 */
struct XGRAPHICS::_R400VSFLOWCNTL
{
  unsigned int currLevel;
  XGRAPHICS::_R400VSFLOWCNTLENTRY entry[32];
};

/* 4667 */
struct XGRAPHICS::_R400VSOUTPUT
{
  int _bf0;
};

/* 4668 */
struct XGRAPHICS::_R400VSFUNC
{
  unsigned int dwHandle;
  unsigned int dwFlags;
  unsigned int dwPendingCbID;
  unsigned int dwFVFCode;
  unsigned int version;
  unsigned int dwDxCodeSize;
  void *pDxCode;
  _ATIVECTOR *pCode;
  unsigned int dwCodeLen;
  XGRAPHICS::_ATIVSMEMALLOC CodeMem;
  XGRAPHICS::_ATIVSUSEMAP Usage[64];
  unsigned int numUsage;
  unsigned int dwNumStreams;
  XGRAPHICS::_ATIVSINPUTREG InputReg[17];
  XGRAPHICS::_ATIVSOUTPUT OutputReg[21];
  _ATISHADERCONST *pConstUpdates;
  unsigned int dwNumConstUpdates;
  char *pConstStore;
  unsigned int dwNumFltConsts;
  unsigned int dwNumIntConsts;
  unsigned int dwNumBoolConsts;
  unsigned int dwStateLen;
  unsigned int dwPosReg;
  unsigned int dwNumTemps;
  XGRAPHICS::_SWVTXSHADER *pSWShader;
  unsigned int dwVtxSampMask;
  unsigned int SSMHandle;
  unsigned int dwDxVtxSize;
  XGRAPHICS::_R400FFVSGEN ffVsGen;
  _DLinkList ffAppVsStateList;
  XGRAPHICS::_R400HOSCNTL *pHosCntl;
  XGRAPHICS::_R400VSFLOWCNTL *pFlowCntl;
  unsigned int posVec;
  unsigned int normVec;
  unsigned int sampleVec;
  unsigned int tfactorVec;
  unsigned int outputTexSets;
  XGRAPHICS::_R400VSOUTPUT outputReg[64];
};

/* 4669 */
struct XGRAPHICS::_R400DXSETTINGS
{
  unsigned int dwR400FFVSCache;
  unsigned int dwR400FFVSCacheSizeLog2;
  unsigned int dwR400PVSCache;
  unsigned int dwR400PVSCacheSizeLog2;
  unsigned int crtcVSyncEnabled;
  int bIntIB;
  unsigned int dwMinIntIBVerts;
  int bUse2DforOverlappingBlts;
  int bR400ForceSoftwareCopyBlt;
  int bR400ForceSoftwareClear;
  int bR400ForceIntFmtOnClear;
  unsigned int dwSyncWaitInterval;
  XGRAPHICS::_E_SURFACE_SYNC_MODE eSurfaceSyncMode;
  int bR400ForceDetileOnLock;
  int bR400SMaskEnable;
  int bR400FastStencilClearEnable;
  int bR400HiStencilEnable;
  int bR400ZRangeEnable;
  unsigned int dwMaxNumRenderTargets;
  int bR400ForceSoftwareHostBlt;
  XGRAPHICS::R400_E_VB_HOSTBLT_PATH r400VBHostBltPath;
  int bR400DumpShaderInOneFileEnable;
  int bR400DisableLineAA;
  XGRAPHICS::_E_CENTER_CENTROID eR400MSAACenterCentroid;
  int bR400ShaderPrecompileEnable;
  int bR400UseDedicatedPrecompASObj;
};

/* 4670 */
struct XGRAPHICS::_R400VSMGMT
{
  unsigned int flags;
  _ATISHADERCONST constDirtyVecs0[32];
  unsigned int constNumUpdates0;
  unsigned int numConstRangesToUpdate;
  _ATISHADERCONST dirtyRanges[64];
};

/* 4671 */
struct XGRAPHICS::_R400FFVSCNTL
{
  unsigned int uniqId;
  _ATIVECTOR *pConst;
  _ATICACHE *pCache;
  _DLinkList list;
  _ATIMATRIX mProj;
  unsigned int numConstUpdates;
  _ATISHADERCONST constUpdates[32];
};

/* 4672 */
struct XGRAPHICS::_R400IL_PS_INPUTREG
{
  unsigned int ILRegNum;
  unsigned int ILRegType;
};

/* 4673 */
struct XGRAPHICS::_R400IL_PS1X_COISSUE
{
  unsigned int *pPrevInst;
  unsigned int *pNextInst;
};

/* 4674 */
struct XGRAPHICS::_R400IL_RECORDED_INFO
{
  unsigned int d3dShaderVersion;
  XGRAPHICS::_E_CENTER_CENTROID eCenterCentroid;
  int bPS3_DetectFirstRET;
  _ATILIST listPS30NotOnBoolReg;
  unsigned int dwPS30_IfCurrLevel;
  XGRAPHICS::_R400IL_PS_INPUTREG PSInputRegInfo[16];
  int bPS_DepthOut;
  unsigned int PS20_2XColorOutputRegMask;
  unsigned int DstTexRegNeedTemp[8];
  unsigned int TexCoordRegMask;
  XGRAPHICS::_R400IL_PS1X_COISSUE coissued[28];
  unsigned int numCoissued;
  unsigned int numProcCoissue;
  unsigned int *pPreviousInst;
};

/* 4675 */
struct XGRAPHICS::_R400PSIL
{
  unsigned int hSSMShaderHandle;
  unsigned int MaxTexCoordNum;
  unsigned int MaxActiveTexSampler;
  unsigned int ActiveTexSamplerMask;
  XGRAPHICS::_R400IL_RECORDED_INFO *pILNeededInfo;
};

/* 4676 */
struct XGRAPHICS::_R400PIXELSHADER
{
  unsigned int dwDummy;
  unsigned int dwFlags;
  XGRAPHICS::_R400PSIL psIL;
};

/* 4677 */
struct XGRAPHICS::_R400ILSTORE
{
  unsigned int *pAllocILStart;
  unsigned int *pAllocILEnd;
  unsigned int dwILUsedDWSize;
  XGRAPHICS::_R400IL_RECORDED_INFO ILNeededInfo;
};

/* 4678 */
struct XGRAPHICS::_R400CTXDATA
{
  unsigned int flags;
  XGRAPHICS::_R400VSFUNC *pCurrVSFunc;
  XGRAPHICS::_R400VSMGMT *pVSMgmt;
  _ATIVECTOR *VSTmpILStore;
  XGRAPHICS::_R400FFVSCNTL ffVsCntl;
  XGRAPHICS::_R400PIXELSHADER *pCurrPS;
  XGRAPHICS::_R400ILSTORE PSTmpILStore;
  void *SSMObjHandle;
  void *ASObjHandle;
  XGRAPHICS::_R400FFPXSHADER_HANDLER *FFPxShaderHnd;
  XGRAPHICS::_R400PIXELSHADER FFPxShader;
  unsigned int NullVSHandle;
  float fVPXScale;
  float fVPYScale;
};

/* 4679 */
struct XGRAPHICS::_R400DX_TO_IL
{
  XGRAPHICS::ILOpCode eILOpCode;
  void (__cdecl *convertToILFunc)(unsigned int **, unsigned int, XGRAPHICS::ILOpCode, XGRAPHICS::_R400IL_RECORDED_INFO *, unsigned int **);
};

/* 4680 */
struct XGRAPHICS::_ATIVSDECL
{
  unsigned int dwHandle;
  unsigned int dwFlags;
  unsigned int dwPendingCbID;
  unsigned int numElems;
  _D3DVERTEXELEMENT9 DxElem[64];
  XGRAPHICS::_ATIVSVTXELEM Elem[64];
  XGRAPHICS::_ATIVSELEMREG ElemReg[64];
};

/* 4681 */
struct XGRAPHICS::_R400VSDECLTYPE
{
  char Format;
  char Dimension;
  char Signed;
  char Normalize;
};

/* 4682 */
struct XGRAPHICS::_ATIVSFUNC
{
  unsigned int dwHandle;
  unsigned int dwFlags;
  unsigned int dwPendingCbID;
  unsigned int dwFVFCode;
  unsigned int version;
  unsigned int dwDxCodeSize;
  void *pDxCode;
  _ATIVECTOR *pCode;
  unsigned int dwCodeLen;
  XGRAPHICS::_ATIVSMEMALLOC CodeMem;
  XGRAPHICS::_ATIVSUSEMAP Usage[64];
  unsigned int numUsage;
  unsigned int dwNumStreams;
  XGRAPHICS::_ATIVSINPUTREG InputReg[17];
  XGRAPHICS::_ATIVSOUTPUT OutputReg[21];
  _ATISHADERCONST *pConstUpdates;
  unsigned int dwNumConstUpdates;
  char *pConstStore;
  unsigned int dwNumFltConsts;
  unsigned int dwNumIntConsts;
  unsigned int dwNumBoolConsts;
  unsigned int dwStateLen;
  unsigned int dwPosReg;
  unsigned int dwNumTemps;
  XGRAPHICS::_SWVTXSHADER *pSWShader;
  unsigned int dwVtxSampMask;
};

/* 4683 */
union $B83979F57A06BBC801A9E509BC5E6216
{
  int x;
  int red;
};

/* 4684 */
union $C7E20BAD0AC27A5DBA2D94F3C2FCA0A3
{
  int y;
  int green;
};

/* 4685 */
union $B47645FEDACF6555687F39AB971CD121
{
  int z;
  int blue;
};

/* 4686 */
union $D2A77277C8693A6D987813B61743ADDF
{
  int w;
  int alpha;
};

/* 4687 */
struct XGRAPHICS::_R400SHADER_CONSTANT_INT
{
  $B83979F57A06BBC801A9E509BC5E6216 ___u0;
  $C7E20BAD0AC27A5DBA2D94F3C2FCA0A3 ___u1;
  $B47645FEDACF6555687F39AB971CD121 ___u2;
  $D2A77277C8693A6D987813B61743ADDF ___u3;
};

/* 4688 */
struct XGRAPHICS::_R400IL_PS30_IF
{
  int bNotOnBoolReg;
  unsigned int dwBoolRegNum;
};

/* 4689 */
struct XGRAPHICS::aluFormat
{
  _BYTE gap0[8];
  int _bf8;
};

/* 4690 */
struct XGRAPHICS::cfReturnFormat
{
  char bits[6];
};

/* 4691 */
struct XGRAPHICS::cfLoopEndFormat
{
  char bits[6];
};

/* 4692 */
struct XGRAPHICS::cfCJmpFormat
{
  char bits[6];
};

/* 4693 */
struct XGRAPHICS::_R400DXDEVICEDATA
{
  void *SSMDevHandle;
  void *SSMObjHandle;
  void *currAsObjHandle;
  void *bltASObjHandle;
  unsigned int bltPixelShaderHandle[10];
  void *clearASObjHandle;
  void *flatFillASObjHandle;
  void *precompileASObjHandle;
  void *edramResolveASObjHandle;
  unsigned int dwPerfMonState;
};

/* 4694 */
struct XGRAPHICS::cfAllocFormat
{
  char bits[6];
};

/* 4695 */
struct XGRAPHICS::_ATIVSCOMMON
{
  unsigned int dwHandle;
  unsigned int dwFlags;
  unsigned int dwPendingCbID;
};

/* 4696 */
union $06330044D392A1BD6C15493567858126
{
  float x;
  float red;
};

/* 4697 */
union $352FC2A05186438311B4BC8462ECC54A
{
  float y;
  float green;
};

/* 4698 */
union $CC96F46862C47E0995FEFB58751B9798
{
  float z;
  float blue;
};

/* 4699 */
union $9042A7F22957994064B3F44CCC059ECB
{
  float w;
  float alpha;
};

/* 4700 */
struct XGRAPHICS::_R400SHADER_CONSTANT
{
  $06330044D392A1BD6C15493567858126 ___u0;
  $352FC2A05186438311B4BC8462ECC54A ___u1;
  $CC96F46862C47E0995FEFB58751B9798 ___u2;
  $9042A7F22957994064B3F44CCC059ECB ___u3;
};

/* 4701 */
struct XGRAPHICS::_ATIVSCONSTTBL
{
  _ATID3DSHADERCONSTTABLE fltConst[256];
  _ATID3DSHADERCONSTTABLE intConst[16];
  _ATID3DSHADERCONSTTABLE boolConst[16];
};

/* 4702 */
struct XGRAPHICS::cfCExecFormat
{
  char bits[6];
};

/* 4703 */
struct XGRAPHICS::cfLoopStartFormat
{
  char bits[6];
};

/* 4704 */
struct XGRAPHICS::cfExecFormat
{
  char bits[6];
};

/* 4705 */
struct XGRAPHICS::cfCExecPFormat
{
  char bits[6];
};

/* 4706 */
struct XGRAPHICS::cfNopFormat
{
  char bits[6];
};

/* 4707 */
struct XGRAPHICS::vertexFetchFormat
{
  _BYTE gap0[8];
  int _bf8;
};

/* 4708 */
struct XGRAPHICS::textureFetchFormat
{
  _BYTE gap0[8];
  int _bf8;
};

/* 4709 */
struct XGRAPHICS::cfCCallFormat
{
  char bits[6];
};

/* 4710 */
struct __declspec(align(8)) _wfinddata64i32_t
{
  unsigned int attrib;
  __declspec(align(8)) __int64 time_create;
  __int64 time_access;
  __int64 time_write;
  unsigned int size;
  wchar_t name[260];
};

/* 4711 */
struct std::allocator<void>
{
  char dummy[1];
};

/* 4712 */
struct std::_Unsecure_char_traits_tag
{
  char dummy[1];
};

/* 4713 */
struct std::_Char_traits_base
{
  char dummy[1];
};

/* 4714 */
#pragma pack(push, 8)
struct std::fpos<int>
{
  int _Myoff;
  __int64 _Fpos;
  int _Mystate;
};
#pragma pack(pop)

/* 4715 */
struct std::char_traits<wchar_t>
{
  std::_Char_traits_base baseclass_0;
};

/* 4716 */
struct std::_Scalar_ptr_iterator_tag
{
  char dummy[1];
};

/* 4717 */
struct std::_Ptr_cat_helper<long *,long *>
{
  char dummy[1];
};

/* 4718 */
struct std::_Ptr_cat_helper<unsigned long const *,unsigned long *>
{
  char dummy[1];
};

/* 4719 */
struct std::_Iosb<int>
{
  char dummy[1];
};

/* 4720 */
struct std::ios_base
{
  std::ios_baseVtbl *vfptr;
  $8A4F576297DE7944472F559E4FE58FF5 ___u1;
  int _Mystate;
  int _Except;
  int _Fmtfl;
  int _Prec;
  int _Wide;
  std::ios_base::_Iosarray *_Arr;
  std::ios_base::_Fnarray *_Calls;
  std::locale *_Ploc;
};

/* 4721 */
struct std::ios_baseVtbl
{
  void *(__cdecl *__vecDelDtor)(std::ios_base *this, unsigned int);
};

/* 4722 */
struct std::ios_base::_Iosarray
{
  std::ios_base::_Iosarray *_Next;
  int _Index;
  int _Lo;
  void *_Vp;
};

/* 4723 */
struct std::ios_base::_Fnarray
{
  std::ios_base::_Fnarray *_Next;
  int _Index;
  void (__cdecl *_Pfn)(std::ios_base::event, std::ios_base *, int);
};

/* 4724 */
struct std::_Locbase<int>
{
  char dummy[1];
};

/* 4725 */
struct std::locale::facet
{
  std::locale::facetVtbl *vfptr;
  unsigned int _Refs;
};

/* 4726 */
struct std::locale::facetVtbl
{
  void *(__cdecl *__vecDelDtor)(std::locale::facet *this, unsigned int);
};

/* 4727 */
struct std::_Container_base
{
  char dummy[1];
};

/* 4728 */
struct std::_String_base
{
  std::_Container_base baseclass_0;
};

/* 4729 */
struct std::_Allocator_base<char>
{
  char dummy[1];
};

/* 4730 */
struct std::allocator<char>
{
  std::_Allocator_base<char> baseclass_0;
};

/* 4731 */
union $BF352321CD20D518C9CD4A9C17EBF074
{
  std::_String_base baseclass_0;
  std::allocator<char> _Alval;
};

/* 4732 */
struct std::_String_val<char,std::allocator<char> >
{
  $BF352321CD20D518C9CD4A9C17EBF074 ___u0;
};

/* 4733 */
union std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Bxty
{
  char _Buf[16];
  char *_Ptr;
};

/* 4734 */
struct std::basic_string<char,std::char_traits<char>,std::allocator<char> >
{
  std::_String_val<char,std::allocator<char> > baseclass_0;
  __declspec(align(4)) std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Bxty _Bx;
  unsigned int _Mysize;
  unsigned int _Myres;
};

/* 4735 */
struct std::locale::_Locimp
{
  std::locale::facet baseclass_0;
  std::locale::facet **_Facetvec;
  unsigned int _Facetcount;
  int _Catmask;
  bool _Xparent;
  __declspec(align(4)) std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Name;
};

/* 4736 */
union $B6E29F3FB3941779C4908332D152AA3A
{
  std::_Locbase<int> baseclass_0;
  std::locale::_Locimp *_Ptr;
};

/* 4737 */
struct std::locale
{
  $B6E29F3FB3941779C4908332D152AA3A ___u0;
};

/* 4738 */
union $8A4F576297DE7944472F559E4FE58FF5
{
  std::_Iosb<int> baseclass_4;
  unsigned int _Stdstr;
};

/* 4739 */
struct std::basic_streambuf<char,std::char_traits<char> >
{
  std::basic_streambuf<char,std::char_traits<char> >Vtbl *vfptr;
  std::_Mutex _Mylock;
  char *_Gfirst;
  char *_Pfirst;
  char **_IGfirst;
  char **_IPfirst;
  char *_Gnext;
  char *_Pnext;
  char **_IGnext;
  char **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 4740 */
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl
{
  void *(__cdecl *__vecDelDtor)(std::basic_streambuf<char,std::char_traits<char> > *this, unsigned int);
  int (__cdecl *overflow)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
  int (__cdecl *pbackfail)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
  int (__cdecl *showmanyc)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__cdecl *underflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__cdecl *uflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__cdecl *xsgetn)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, int);
  int (__cdecl *_Xsgetn_s)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, unsigned int, int);
  int (__cdecl *xsputn)(std::basic_streambuf<char,std::char_traits<char> > *this, const char *, int);
  std::fpos<int> *(__cdecl *seekoff)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, int, int, int);
  std::fpos<int> *(__cdecl *seekpos)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<char,std::char_traits<char> > *(__cdecl *setbuf)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, int);
  int (__cdecl *sync)(std::basic_streambuf<char,std::char_traits<char> > *this);
  void (__cdecl *imbue)(std::basic_streambuf<char,std::char_traits<char> > *this, std::locale *);
};

/* 4741 */
struct std::basic_ostream<char,std::char_traits<char> >
{
  char dummy[56];
};

/* 4742 */
#pragma pack(push, 4)
struct std::basic_ios<char,std::char_traits<char> >
{
  std::ios_base baseclass_0;
  std::basic_streambuf<char,std::char_traits<char> > *_Mystrbuf;
  std::basic_ostream<char,std::char_traits<char> > *_Tiestr;
  char _Fillch;
};
#pragma pack(pop)

/* 4743 */
struct std::_Int_iterator_tag
{
  char dummy[1];
};

/* 4744 */
struct std::iterator_traits<unsigned short>
{
  char dummy[1];
};

/* 4745 */
struct std::char_traits<char>
{
  std::_Char_traits_base baseclass_0;
};

/* 4746 */
struct std::output_iterator_tag
{
  char dummy[1];
};

/* 4747 */
struct std::_Unchanged_checked_iterator_base_type_tag
{
  char dummy[1];
};

/* 4748 */
struct std::_Ptr_cat_helper<float *,float *>
{
  char dummy[1];
};

/* 4749 */
struct std::_Swap_move_tag
{
  char dummy[1];
};

/* 4750 */
struct std::_Ptr_cat_helper<bool *,bool *>
{
  char dummy[1];
};

/* 4751 */
struct std::basic_istream<wchar_t,std::char_traits<wchar_t> >
{
  _BYTE gap0[4];
  int _Chcount;
  _BYTE gap8[52];
};

/* 4752 */
struct std::_Iterator_base
{
  std::_Container_base *_Mycont;
};

/* 4753 */
struct std::iterator<std::output_iterator_tag,void,void,void,void>
{
  std::_Iterator_base baseclass_0;
};

/* 4754 */
struct std::_Outit
{
  std::iterator<std::output_iterator_tag,void,void,void,void> baseclass_0;
};

/* 4755 */
struct std::_Ptr_cat_helper<wchar_t const *,wchar_t *>
{
  char dummy[1];
};

/* 4756 */
struct std::iterator_traits<unsigned long>
{
  char dummy[1];
};

/* 4757 */
struct std::_Ptr_cat_helper<signed char *,signed char *>
{
  char dummy[1];
};

/* 4758 */
struct std::_Ptr_cat_helper<int const *,int *>
{
  char dummy[1];
};

/* 4759 */
struct std::_Ptr_cat_helper<__int64 *,__int64 *>
{
  char dummy[1];
};

/* 4760 */
struct std::_Ptr_cat_helper<unsigned char *,unsigned char *>
{
  char dummy[1];
};

/* 4761 */
struct std::_Range_checked_iterator_tag
{
  char dummy[1];
};

/* 4762 */
struct std::_Secure_validation_helper<1>
{
  char dummy[1];
};

/* 4763 */
struct std::_Ptr_cat_helper<signed char const *,signed char *>
{
  char dummy[1];
};

/* 4764 */
struct std::_Ptr_cat_helper<bool const *,bool *>
{
  char dummy[1];
};

/* 4765 */
struct std::_Float_iterator_tag
{
  char dummy[1];
};

/* 4766 */
struct std::iterator_traits<double>
{
  char dummy[1];
};

/* 4767 */
struct std::_Ptr_cat_helper<unsigned int const *,unsigned int *>
{
  char dummy[1];
};

/* 4768 */
struct std::_Ptr_cat_helper<double const *,double *>
{
  char dummy[1];
};

/* 4769 */
struct std::_Ptr_cat_helper<__int64 const *,__int64 *>
{
  char dummy[1];
};

/* 4770 */
struct std::iterator_traits<short>
{
  char dummy[1];
};

/* 4771 */
struct std::_Ptr_cat_helper<long const *,long *>
{
  char dummy[1];
};

/* 4772 */
struct std::_Iterator_with_base<std::output_iterator_tag,void,void,void,void,std::_Iterator_base>
{
  std::_Iterator_base baseclass_0;
};

/* 4773 */
struct std::_Undefined_move_tag
{
  char dummy[1];
};

/* 4774 */
struct std::_Ptr_cat_helper<long double *,long double *>
{
  char dummy[1];
};

/* 4775 */
struct std::_Ptr_cat_helper<unsigned short const *,unsigned short *>
{
  char dummy[1];
};

/* 4776 */
struct std::_Ptr_cat_helper<unsigned __int64 const *,unsigned __int64 *>
{
  char dummy[1];
};

/* 4777 */
struct std::_Ptr_cat_helper<wchar_t *,wchar_t *>
{
  char dummy[1];
};

/* 4778 */
struct std::iterator_traits<unsigned __int64>
{
  char dummy[1];
};

/* 4779 */
struct std::input_iterator_tag
{
  char dummy[1];
};

/* 4780 */
struct std::forward_iterator_tag
{
  std::input_iterator_tag baseclass_0;
};

/* 4781 */
struct std::bidirectional_iterator_tag
{
  std::forward_iterator_tag baseclass_0;
};

/* 4782 */
struct std::random_access_iterator_tag
{
  std::bidirectional_iterator_tag baseclass_0;
};

/* 4783 */
struct std::_Iter_random_helper3<std::random_access_iterator_tag,std::random_access_iterator_tag,std::random_access_iterator_tag>
{
  char dummy[1];
};

/* 4784 */
struct std::iterator_traits<signed char>
{
  char dummy[1];
};

/* 4785 */
struct std::_Ptr_cat_helper<unsigned __int64 *,unsigned __int64 *>
{
  char dummy[1];
};

/* 4786 */
struct std::_Ptr_cat_helper<long double const *,long double *>
{
  char dummy[1];
};

/* 4787 */
struct std::_Nonscalar_ptr_iterator_tag
{
  char dummy[1];
};

/* 4788 */
struct std::_Ptr_cat_helper<std::_Undefined_inner_type_tag,std::_Undefined_inner_type_tag>
{
  char dummy[1];
};

/* 4789 */
struct std::_Ptr_cat_helper<float const *,float *>
{
  char dummy[1];
};

/* 4790 */
struct std::iterator_traits<__int64>
{
  char dummy[1];
};

/* 4791 */
struct std::_Unchecked_iterator_tag
{
  char dummy[1];
};

/* 4792 */
struct std::_Undefined_inner_type_tag
{
  char dummy[1];
};

/* 4793 */
struct std::_Ptr_cat_helper<int *,int *>
{
  char dummy[1];
};

/* 4794 */
struct std::iterator_traits<unsigned int>
{
  char dummy[1];
};

/* 4795 */
struct std::basic_istream<char,std::char_traits<char> >
{
  _BYTE gap0[4];
  int _Chcount;
  _BYTE gap8[52];
};

/* 4796 */
struct std::_Iter_random_helper<std::random_access_iterator_tag,std::random_access_iterator_tag>
{
  char dummy[1];
};

/* 4797 */
struct std::_Ptr_cat_helper<unsigned short *,unsigned short *>
{
  char dummy[1];
};

/* 4798 */
struct std::_Ptr_cat_helper<short const *,short *>
{
  char dummy[1];
};

/* 4799 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
{
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl *vfptr;
  std::_Mutex _Mylock;
  wchar_t *_Gfirst;
  wchar_t *_Pfirst;
  wchar_t **_IGfirst;
  wchar_t **_IPfirst;
  wchar_t *_Gnext;
  wchar_t *_Pnext;
  wchar_t **_IGnext;
  wchar_t **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 4800 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl
{
  void *(__cdecl *__vecDelDtor)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned int);
  unsigned __int16 (__cdecl *overflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
  unsigned __int16 (__cdecl *pbackfail)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
  int (__cdecl *showmanyc)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__cdecl *underflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__cdecl *uflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  int (__cdecl *xsgetn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, int);
  int (__cdecl *_Xsgetn_s)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, unsigned int, int);
  int (__cdecl *xsputn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, const wchar_t *, int);
  std::fpos<int> *(__cdecl *seekoff)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, int, int, int);
  std::fpos<int> *(__cdecl *seekpos)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *(__cdecl *setbuf)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, int);
  int (__cdecl *sync)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  void (__cdecl *imbue)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::locale *);
};

/* 4801 */
struct std::basic_ostream<wchar_t,std::char_traits<wchar_t> >
{
  char dummy[56];
};

/* 4802 */
#pragma pack(push, 4)
struct std::basic_ios<wchar_t,std::char_traits<wchar_t> >
{
  std::ios_base baseclass_0;
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Mystrbuf;
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Tiestr;
  wchar_t _Fillch;
};
#pragma pack(pop)

/* 4803 */
struct std::iterator_traits<char>
{
  char dummy[1];
};

/* 4804 */
struct std::_Ptr_cat_helper<char const *,char *>
{
  char dummy[1];
};

/* 4805 */
struct std::iterator_traits<unsigned char>
{
  char dummy[1];
};

/* 4806 */
struct std::_Ptr_cat_helper<unsigned long *,unsigned long *>
{
  char dummy[1];
};

/* 4807 */
struct std::iterator_traits<int>
{
  char dummy[1];
};

/* 4808 */
struct std::_Outit_with_base<std::_Iterator_base>
{
  std::_Iterator_with_base<std::output_iterator_tag,void,void,void,void,std::_Iterator_base> baseclass_0;
};

/* 4809 */
struct std::_Ptr_cat_helper<double *,double *>
{
  char dummy[1];
};

/* 4810 */
struct std::iterator_traits<bool>
{
  char dummy[1];
};

/* 4811 */
struct std::iterator_traits<wchar_t>
{
  char dummy[1];
};

/* 4812 */
struct std::_Ptr_cat_helper<char *,char *>
{
  char dummy[1];
};

/* 4813 */
struct std::iterator_traits<long>
{
  char dummy[1];
};

/* 4814 */
struct std::iterator_traits<float>
{
  char dummy[1];
};

/* 4815 */
struct std::_Ptr_cat_helper<unsigned int *,unsigned int *>
{
  char dummy[1];
};

/* 4816 */
struct std::_Different_checked_iterator_base_type_tag
{
  char dummy[1];
};

/* 4817 */
struct std::_Ptr_cat_helper<unsigned char const *,unsigned char *>
{
  char dummy[1];
};

/* 4818 */
struct std::_Secure_char_traits_tag
{
  char dummy[1];
};

/* 4819 */
struct std::_Ptr_cat_helper<short *,short *>
{
  char dummy[1];
};

/* 4820 */
#pragma pack(push, 8)
struct _stat64
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  __int64 st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};
#pragma pack(pop)

/* 4821 */
#pragma pack(push, 8)
struct _stat32i64
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  __int64 st_size;
  int st_atime;
  int st_mtime;
  int st_ctime;
};
#pragma pack(pop)

/* 4822 */
#pragma pack(push, 8)
struct _wfinddata64_t
{
  unsigned int attrib;
  __int64 time_create;
  __int64 time_access;
  __int64 time_write;
  __int64 size;
  wchar_t name[260];
};
#pragma pack(pop)

/* 4823 */
#pragma pack(push, 4)
struct stat
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};
#pragma pack(pop)

/* 4824 */
struct _CrtMemState
{
  _CrtMemBlockHeader *pBlockHeader;
  unsigned int lCounts[5];
  unsigned int lSizes[5];
  unsigned int lHighWaterCount;
  unsigned int lTotalCount;
};

/* 4825 */
struct _wfinddata32_t
{
  unsigned int attrib;
  int time_create;
  int time_access;
  int time_write;
  unsigned int size;
  wchar_t name[260];
};

/* 4826 */
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 4827 */
struct XGRAPHICS::PrintTools
{
  char dummy[1];
};

/* 4828 */
struct XGRAPHICS::CTBitSet<8192,unsigned long>
{
  unsigned int m_Data[2048];
};

/* 4829 */
struct XGRAPHICS::COMPILED_SHADER
{
  char dummy[1];
};

/* 4830 */
struct XGRAPHICS::InternalHashTableIterator
{
  XGRAPHICS::InternalHashTable *table;
  unsigned int i;
  void *p;
  int bucket_count;
  void *current;
};

/* 4831 */
struct XGRAPHICS::KeyValuePair
{
  void *key;
  void *value;
};

/* 4832 */
#pragma pack(push, 4)
struct XGRAPHICS::Disassembler
{
  XGRAPHICS::DisassemblerVtbl *vfptr;
  bool fAtStartOfLine;
  unsigned int dis_mode;
  char *ptr_beyond_last_inst;
  XGRAPHICS::CTBitSet<8192,unsigned long> branchTarget;
};
#pragma pack(pop)

/* 4833 */
struct XGRAPHICS::DisassemblerVtbl
{
  void (__cdecl *DoPrint)(XGRAPHICS::Disassembler *this, char *, char *);
};

/* 4834 */
struct XGRAPHICS::InternalAssociatedList
{
  unsigned int size;
  unsigned int count;
  void **buckets;
  int (__cdecl *cmpkeyf)(void *, void *);
  int (__cdecl *hashkeyf)(void *);
  XGRAPHICS::Arena *ap;
};

/* 4835 */
struct XGRAPHICS::CompilerDisassem
{
  XGRAPHICS::Disassembler baseclass_0;
  XGRAPHICS::Compiler *context;
};

/* 4836 */
struct XGRAPHICS::Set<int>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4837 */
struct XGRAPHICS::ShaderPairOutput
{
  XGRAPHICS::SSMHandle baseclass_0;
};

/* 4838 */
struct XGRAPHICS::ShaderOutput
{
  XGRAPHICS::SSMHandle baseclass_0;
};

/* 4839 */
struct XGRAPHICS::Vector<bool>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4840 */
struct XGRAPHICS::Vector<int>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4841 */
struct XGRAPHICS::Crayola
{
  XGRAPHICS::HwLimits baseclass_0;
};

/* 4842 */
struct XGRAPHICS::string
{
  char *s;
  unsigned int len;
};

/* 4843 */
struct XGRAPHICS::SparseIntSet
{
  XGRAPHICS::Set<int> baseclass_0;
  XGRAPHICS::bitset *val_in_set;
};

/* 4844 */
#pragma pack(push, 4)
struct _stat32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  int st_atime;
  int st_mtime;
  int st_ctime;
};
#pragma pack(pop)

/* 4845 */
struct _wfinddata32i64_t
{
  unsigned int attrib;
  int time_create;
  int time_access;
  int time_write;
  __int64 size;
  wchar_t name[260];
};

/* 4846 */
#pragma pack(push, 4)
struct _stat64i32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};
#pragma pack(pop)

/* 4847 */
struct XGRAPHICS::ILFormatEncode
{
  char dummy[1];
};

/* 4848 */
struct XGRAPHICS::ILFormatDecode
{
  char dummy[1];
};

/* 4849 */
struct XGRAPHICS::IRJmp
{
  XGRAPHICS::IRCJmp baseclass_0;
};

/* 4850 */
struct XGRAPHICS::Vector<XGRAPHICS::Patch *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4851 */
struct XGRAPHICS::Vector<XGRAPHICS::Fragment *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4852 */
struct XGRAPHICS::stack<enum R400Tables::Predicate>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4853 */
struct XGRAPHICS::stack<XGRAPHICS::IRInst *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4854 */
struct XGRAPHICS::stack<XGRAPHICS::cfLoopStartFormat *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4855 */
struct XGRAPHICS::stack<int>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4856 */
struct XGRAPHICS::stack<XGRAPHICS::cfCJmpFormat *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4857 */
struct XGRAPHICS::IRLoadTemp
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4858 */
#pragma pack(push, 4)
struct XGRAPHICS::Assembler
{
  XGRAPHICS::Compiler *context;
  char *execute_code_buffer;
  char *control_code_buffer;
  char *next_control_slot_ptr;
  char *next_execute_slot_ptr;
  char *call_buffer;
  char *next_call_ptr;
  char *saved_next_execute_slot_ptr;
  char *saved_next_call_ptr;
  char *saved_next_control_slot_ptr;
  int saved_number_sp_inst;
  int saved_number_cf_inst;
  bool call_active;
  bool need_empty_exec_end;
  XGRAPHICS::IRInst **back_ptr;
  int num_cf_inst;
  int num_sp_inst;
  int num_fetch_inst;
  int num_packed_inst;
  int num_packed_candidates;
  int num_pw_mov;
  int num_pw_copies;
  int num_redundant_skip;
  int num_redundant_emit;
  XGRAPHICS::Vector<XGRAPHICS::Patch *> *patches;
  XGRAPHICS::Vector<XGRAPHICS::Fragment *> *fragments;
  XGRAPHICS::stack<enum R400Tables::Predicate> *prd_stack;
  XGRAPHICS::stack<XGRAPHICS::IRInst *> *prd_save_op_stk;
  XGRAPHICS::cfExecFormat *lastExec;
  XGRAPHICS::stack<XGRAPHICS::cfLoopStartFormat *> *loop_start_stk;
  XGRAPHICS::stack<int> *beg_addr_stk;
  XGRAPHICS::stack<XGRAPHICS::cfCJmpFormat *> *cf_jmp_stk;
  bool interps_allocated;
  bool posexp_allocated;
  XGRAPHICS::IRLoadTemp *prd_reg_ld;
  int pw_reg;
  int cmp_reg;
  XGRAPHICS::CFG *cfg;
};
#pragma pack(pop)

/* 4859 */
struct XGRAPHICS::IRLoopIndex
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4860 */
struct XGRAPHICS::TempValue
{
  XGRAPHICS::VRegInfo baseclass_0;
  int temp_id;
};

/* 4861 */
struct XGRAPHICS::BaseAddr
{
  XGRAPHICS::TempValue baseclass_0;
};

/* 4862 */
#pragma pack(push, 4)
struct XGRAPHICS::LoopHeader
{
  XGRAPHICS::Block baseclass_0;
  int loop_id;
  bool has_break;
  bool has_continue;
  XGRAPHICS::IRInst *loop_start;
  XGRAPHICS::LoopHeader *enclosing_loop;
  XGRAPHICS::LoopFooter *footer;
  XGRAPHICS::PostLoopFooter *post_footer;
};
#pragma pack(pop)

/* 4863 */
struct XGRAPHICS::LoopFooter
{
  XGRAPHICS::Block baseclass_0;
  XGRAPHICS::LoopHeader *header;
};

/* 4864 */
struct XGRAPHICS::PostLoopFooter
{
  XGRAPHICS::Block baseclass_0;
  XGRAPHICS::LoopHeader *header;
};

/* 4865 */
struct XGRAPHICS::LoopIndexedSet
{
  XGRAPHICS::VRegInfo baseclass_0;
  XGRAPHICS::LoopHeader *loop_header;
};

/* 4866 */
struct XGRAPHICS::LoopIndexedOutputSet
{
  XGRAPHICS::LoopIndexedSet baseclass_0;
};

/* 4867 */
#pragma pack(push, 4)
struct XGRAPHICS::ILInstIterator::BOOL
{
  int bool_num;
  bool value;
  XGRAPHICS::ILInstIterator::BOOL *next;
};
#pragma pack(pop)

/* 4868 */
struct XGRAPHICS::stack<unsigned int *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4869 */
struct XGRAPHICS::stack<enum XGRAPHICS::ILBranchDirection>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4870 */
struct XGRAPHICS::ILInstIterator
{
  XGRAPHICS::Compiler *context;
  XGRAPHICS::IL_Lang *lang_token;
  XGRAPHICS::IL_Version *version_token;
  XGRAPHICS::ILInstIterator::BOOL *bool_list;
  XGRAPHICS::ILInstIterator::BOOL *bool_list_tail;
  unsigned int *pCur;
  unsigned int *pHead;
  unsigned int *pCode;
  unsigned int *tokenArray;
  int numTokens;
  int numInstructions;
  int numOps;
  int numPseudoOps;
  int ct_il_insts;
  int call_depth;
  XGRAPHICS::stack<unsigned int *> *stkOfIters;
  XGRAPHICS::stack<unsigned int *> *stkOfGarbage;
  XGRAPHICS::stack<enum XGRAPHICS::ILBranchDirection> *stkOfBranchDirection;
};

/* 4871 */
struct XGRAPHICS::stack<XGRAPHICS::LoopHeader *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4872 */
union XGRAPHICS::expansion_token
{
  unsigned int i;
  float f;
};

/* 4873 */
struct XGRAPHICS::stack<XGRAPHICS::EXP_DIR *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4874 */
struct XGRAPHICS::IRAllocInterp
{
  XGRAPHICS::IRAlloc baseclass_0;
};

/* 4875 */
struct XGRAPHICS::RegTypeProps
{
  char *print_name;
  bool defines_a_gpr;
  bool def_is_export;
  char const_type;
  char index_mode;
  XGRAPHICS::VRegInfo *(__cdecl *constructor)(int, R400Tables::RegType, XGRAPHICS::Compiler *);
};

/* 4876 */
struct XGRAPHICS::Patch
{
  XGRAPHICS::PatchVtbl *vfptr;
};

/* 4877 */
struct XGRAPHICS::PatchVtbl
{
  void (__cdecl *OutputPatch)(XGRAPHICS::Patch *this, int, XGRAPHICS::Compiler *);
};

/* 4878 */
struct XGRAPHICS::VertexPatch
{
  XGRAPHICS::Patch baseclass_0;
  int stream_id;
  int offset_in_bytes;
  int dword_position;
};

/* 4879 */
struct XGRAPHICS::ResourceModel
{
  XGRAPHICS::ResourceModelVtbl *vfptr;
  int cur_state;
};

/* 4880 */
struct XGRAPHICS::ResourceModelVtbl
{
  void (__cdecl *Reset)(XGRAPHICS::ResourceModel *this);
  bool (__cdecl *Check)(XGRAPHICS::ResourceModel *this, XGRAPHICS::IRInst *);
  void (__cdecl *Apply)(XGRAPHICS::ResourceModel *this, XGRAPHICS::IRInst *);
  void (__cdecl *AdvanceCycle)(XGRAPHICS::ResourceModel *this);
  bool (__cdecl *FullState)(XGRAPHICS::ResourceModel *this);
  bool (__cdecl *ZeroState)(XGRAPHICS::ResourceModel *this);
  bool (__cdecl *HasRoomForScalar)(XGRAPHICS::ResourceModel *this);
  bool (__cdecl *HasRoomForVector)(XGRAPHICS::ResourceModel *this);
};

/* 4881 */
struct __declspec(align(4)) XGRAPHICS::R400ConstantModel
{
  XGRAPHICS::ResourceModel baseclass_0;
  bool has_const_with_absval;
};

/* 4882 */
struct XGRAPHICS::IRPLFetch
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4883 */
struct XGRAPHICS::IRFetch
{
  XGRAPHICS::IRInst baseclass_0;
};

/* 4884 */
struct XGRAPHICS::IRTextureFetch
{
  XGRAPHICS::IRFetch baseclass_0;
};

/* 4885 */
struct XGRAPHICS::texld_fields
{
  unsigned __int16 mag_filter;
  unsigned __int16 min_filter;
  unsigned __int16 mip_filter;
  unsigned __int16 aniso_filter;
  unsigned __int16 arbitrary_filter;
  unsigned __int16 vol_mag_filter;
  unsigned __int16 vol_min_filter;
  unsigned __int16 use_comp_lod;
  unsigned __int16 use_reg_lod;
  unsigned __int16 sample_location;
  unsigned __int16 use_reg_gradients;
  unsigned __int16 lod_bias;
  unsigned __int16 offset_x;
  unsigned __int16 offset_y;
  unsigned __int16 offset_z;
};

/* 4886 */
struct XGRAPHICS::IRUnary
{
  XGRAPHICS::IRAlu baseclass_0;
};

/* 4887 */
struct XGRAPHICS::IRMov
{
  XGRAPHICS::IRUnary baseclass_0;
};

/* 4888 */
struct XGRAPHICS::IRCopy
{
  XGRAPHICS::IRMov baseclass_0;
};

/* 4889 */
struct XGRAPHICS::IREndMakeCall
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4890 */
struct XGRAPHICS::hos_mode_split_item
{
  int std_split_index;
  int quad_split_index;
  int bary_split_index;
  int prim_split_index;
};

/* 4891 */
struct XGRAPHICS::R400SchedModel
{
  XGRAPHICS::ResourceModel baseclass_0;
  XGRAPHICS::ResourceModel *submodels[2];
  int num_vectors;
  int num_scalars;
  int num_doubles;
};

/* 4892 */
struct XGRAPHICS::SchedPriority
{
  int epoch_number;
  float reg_freedom;
  int dep_height;
  int res_height;
};

/* 4893 */
struct XGRAPHICS::Vector<XGRAPHICS::DepEdge *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4894 */
#pragma pack(push, 4)
struct XGRAPHICS::SchedNode
{
  XGRAPHICS::DListNode baseclass_0;
  XGRAPHICS::SchedPriority priority;
  int issue_cycle;
  int ready_cycle;
  int topdown_count;
  XGRAPHICS::IRInst *const inst;
  const int sn_index;
  XGRAPHICS::Vector<XGRAPHICS::DepEdge *> *dep_succs;
  XGRAPHICS::Vector<XGRAPHICS::DepEdge *> *dep_preds;
  bool is_local_temp;
  int use_ref_count;
  XGRAPHICS::SchedNode *sibling;
};
#pragma pack(pop)

/* 4895 */
struct XGRAPHICS::R400ThreadModel
{
  XGRAPHICS::SchedNode *yield_disabler;
  XGRAPHICS::R400ThreadModel::R400ThreadState cur_state;
  int yield_cycle;
  int fetch_cycle;
};

/* 4896 */
struct XGRAPHICS::Vector<XGRAPHICS::SchedNode *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 4897 */
struct XGRAPHICS::ParallelGroup
{
  XGRAPHICS::SchedNode *slots[2];
  XGRAPHICS::DList pseudo_list;
};

/* 4898 */
struct XGRAPHICS::Scheduler
{
  XGRAPHICS::Compiler *context;
  XGRAPHICS::CFG *the_cfg;
  XGRAPHICS::R400SchedModel *sched_model;
  XGRAPHICS::R400ThreadModel *thread_model;
  XGRAPHICS::Block *cur_block;
  XGRAPHICS::Vector<XGRAPHICS::SchedNode *> *input_defs;
  XGRAPHICS::Vector<XGRAPHICS::SchedNode *> *local_nodes;
  int cur_cycle;
  XGRAPHICS::ParallelGroup *cur_par_group;
  XGRAPHICS::DList ready_list;
  XGRAPHICS::DList hold_list;
  XGRAPHICS::DList tried_list;
  int cur_dep_height;
  int cur_epoch;
  XGRAPHICS::LiveSet *active_regs;
  XGRAPHICS::SchedNode *latest_mova;
  int total_cycles;
  int max_local_reg;
  int total_partial_writes;
  int fixed_partial_writes;
  int bad_const_combinations;
  int num_c2t_moves;
};

/* 4899 */
struct XGRAPHICS::IRAllocMem
{
  XGRAPHICS::IRAlloc baseclass_0;
};

/* 4900 */
struct XGRAPHICS::IRMerge
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4901 */
struct XGRAPHICS::StandardIndex
{
  XGRAPHICS::TempValue baseclass_0;
};

/* 4902 */
struct XGRAPHICS::IRZeroary
{
  XGRAPHICS::IRAlu baseclass_0;
};

/* 4903 */
struct XGRAPHICS::IRNop
{
  XGRAPHICS::IRZeroary baseclass_0;
};

/* 4904 */
struct XGRAPHICS::index_mapping_item
{
  int physical_reg;
  char *channels;
};

/* 4905 */
struct XGRAPHICS::IRVertexFetch
{
  XGRAPHICS::IRFetch baseclass_0;
};

/* 4906 */
struct XGRAPHICS::IRProjection
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4907 */
struct XGRAPHICS::IRLoadInterp
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4908 */
struct XGRAPHICS::ExportValue
{
  XGRAPHICS::VRegInfo baseclass_0;
  XGRAPHICS::IRExport *export_inst;
  XGRAPHICS::VRegInfo *vRegTemp;
};

/* 4909 */
struct XGRAPHICS::IRTextureFetchRegLOD
{
  XGRAPHICS::IRTextureFetch baseclass_0;
};

/* 4910 */
struct XGRAPHICS::AutoIndexVtx
{
  XGRAPHICS::TempValue baseclass_0;
};

/* 4911 */
struct XGRAPHICS::Resource
{
  XGRAPHICS::VRegInfo baseclass_0;
};

/* 4912 */
struct XGRAPHICS::IRCmp1S
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4913 */
struct XGRAPHICS::ContinueBlock
{
  XGRAPHICS::Block baseclass_0;
  XGRAPHICS::LoopFooter *footer;
};

/* 4914 */
struct XGRAPHICS::IRVLFetch
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4915 */
struct XGRAPHICS::IRPhiNode
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4916 */
struct XGRAPHICS::IRLoopStart
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4917 */
#pragma pack(push, 4)
struct XGRAPHICS::IfHeader
{
  XGRAPHICS::Block baseclass_0;
  XGRAPHICS::IRInst *cmp_inst;
  bool is_inner;
  XGRAPHICS::Block *then_block;
  XGRAPHICS::Block *else_block;
  XGRAPHICS::IfFooter *footer;
  XGRAPHICS::IfHeader *enclosing_if;
};
#pragma pack(pop)

/* 4918 */
struct XGRAPHICS::IfFooter
{
  XGRAPHICS::Block baseclass_0;
  XGRAPHICS::IfHeader *header;
};

/* 4919 */
struct XGRAPHICS::IRTrinary
{
  XGRAPHICS::IRAlu baseclass_0;
};

/* 4920 */
struct XGRAPHICS::LoopIndexedConstSet
{
  XGRAPHICS::LoopIndexedSet baseclass_0;
};

/* 4921 */
struct XGRAPHICS::IREndCallRoutine
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4922 */
struct XGRAPHICS::EXP_DIR
{
  XGRAPHICS::expansion_token *exp_vector;
  int instruction_cursor;
  XGRAPHICS::Block *cur_block;
};

/* 4923 */
struct XGRAPHICS::hos_split_item
{
  int mapping_0;
  XGRAPHICS::SwizzleOrMaskInfo swizzle_0;
  int mapping_1;
  XGRAPHICS::SwizzleOrMaskInfo swizzle_1;
};

/* 4924 */
struct XGRAPHICS::R400SlotModel
{
  XGRAPHICS::ResourceModel baseclass_0;
};

/* 4925 */
struct XGRAPHICS::IRBinary
{
  XGRAPHICS::IRAlu baseclass_0;
};

/* 4926 */
struct XGRAPHICS::IRKill2
{
  XGRAPHICS::IRBinary baseclass_0;
};

/* 4927 */
struct XGRAPHICS::IfHeaderStatic
{
  XGRAPHICS::IfHeader baseclass_0;
};

/* 4928 */
struct XGRAPHICS::AddrIndexedSet
{
  XGRAPHICS::VRegInfo baseclass_0;
};

/* 4929 */
struct XGRAPHICS::IRHeader
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4930 */
struct XGRAPHICS::inst_ctor_st
{
  XGRAPHICS::IRInst *(__cdecl *ctor)(R400Tables::Op, XGRAPHICS::Compiler *);
  int which;
};

/* 4931 */
struct XGRAPHICS::IRAllocColor
{
  XGRAPHICS::IRAlloc baseclass_0;
};

/* 4932 */
struct XGRAPHICS::IRAllocPos
{
  XGRAPHICS::IRAlloc baseclass_0;
};

/* 4933 */
struct XGRAPHICS::HosCoord
{
  XGRAPHICS::TempValue baseclass_0;
};

/* 4934 */
struct XGRAPHICS::LoopRegister
{
  XGRAPHICS::VRegInfo baseclass_0;
};

/* 4935 */
struct XGRAPHICS::BreakBlock
{
  XGRAPHICS::Block baseclass_0;
  XGRAPHICS::PostLoopFooter *post_footer;
};

/* 4936 */
struct XGRAPHICS::IRLoadConst
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4937 */
struct XGRAPHICS::LoopIndexedInputSet
{
  XGRAPHICS::LoopIndexedSet baseclass_0;
};

/* 4938 */
struct XGRAPHICS::FixedValue
{
  XGRAPHICS::VRegInfo baseclass_0;
};

/* 4939 */
struct XGRAPHICS::IRMovBase
{
  XGRAPHICS::IRUnary baseclass_0;
};

/* 4940 */
struct XGRAPHICS::IRCmp1D
{
  XGRAPHICS::IRUnary baseclass_0;
};

/* 4941 */
struct XGRAPHICS::ExportSlot
{
  XGRAPHICS::VRegInfo baseclass_0;
};

/* 4942 */
struct XGRAPHICS::IRExportColorAndFog
{
  XGRAPHICS::IRExport baseclass_0;
};

/* 4943 */
struct XGRAPHICS::hos_mode_index_item
{
  int std_mapping;
  XGRAPHICS::SwizzleOrMaskInfo std_swizzle;
  int quad_mapping;
  XGRAPHICS::SwizzleOrMaskInfo quad_swizzle;
  int bary_mapping;
  XGRAPHICS::SwizzleOrMaskInfo bary_swizzle;
  int prim_mapping;
  XGRAPHICS::SwizzleOrMaskInfo prim_swizzle;
};

/* 4944 */
struct XGRAPHICS::IRStartCallRoutine
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4945 */
struct XGRAPHICS::Fragment
{
  int length;
  XGRAPHICS::Vector<int> *start_pos;
};

/* 4946 */
struct XGRAPHICS::IRCmp2
{
  XGRAPHICS::IRBinary baseclass_0;
};

/* 4947 */
struct XGRAPHICS::IRStartMakeCall
{
  XGRAPHICS::IRPseudo baseclass_0;
};

/* 4948 */
struct XGRAPHICS::IRKill
{
  XGRAPHICS::IRUnary baseclass_0;
};

/* 4949 */
struct XGRAPHICS::ExportAddress
{
  XGRAPHICS::VRegInfo baseclass_0;
};

/* 4950 */
struct XGRAPHICS::IRExportZeroOne
{
  XGRAPHICS::IRExport baseclass_0;
};

/* 4951 */
struct XGRAPHICS::IfFooterStatic
{
  XGRAPHICS::IfFooter baseclass_0;
};

/* 4952 */
struct XGRAPHICS::Physical
{
  XGRAPHICS::VRegInfo baseclass_0;
};

/* 4953 */
struct XGRAPHICS::operands_per_token
{
  char a[4];
};

/* 4954 */
struct XGRAPHICS::IL2IR_INST
{
  R400Tables::Op IR_OP_CODE;
  int NUM_SOURCE_REGISTERS;
  int NUM_DESTINATION_REGISTERS;
  int NUM_ADDITIONAL;
  int PROCESSING;
  XGRAPHICS::IRInst *(__cdecl *fpCtor)(R400Tables::Op, XGRAPHICS::Compiler *);
  XGRAPHICS::expansion_token *EXPANSION;
  XGRAPHICS::operands_per_token OPS_PER_TOKEN;
  int ilOp;
};

/* 4955 */
struct XGRAPHICS::LL_Node
{
  unsigned int block_num;
  XGRAPHICS::LL_Node *next;
};

/* 4956 */
struct XGRAPHICS::Dominator
{
  unsigned int *DFS_tree_parents;
  unsigned int *semidominator;
  unsigned int *dominator;
  unsigned int *ancestor;
  unsigned int *path_minimums;
  XGRAPHICS::LL_Node **not_yet_done;
  XGRAPHICS::Block **DFS_block_list;
  unsigned int blk_ct;
  XGRAPHICS::CFG *pCFG;
  XGRAPHICS::Compiler *context;
};

/* 4957 */
struct __declspec(align(4)) XGRAPHICS::ArgInfo
{
  _BYTE gap0[8];
  int _bf8;
  char my_name;
};

/* 4958 */
union _KUSER_MODE_PTE
{
  unsigned int AsULONG;
};

/* 4959 */
struct _EX_THREAD_REGISTRATION
{
  void (__cdecl *NotificationRoutine)(_EX_THREAD_REGISTRATION *, _KTHREAD *, unsigned int);
  int Priority;
  _LIST_ENTRY ListEntry;
};

/* 4960 */
struct _DISPATCHER_HEADER
{
  char Type;
  char Absolute;
  char ProcessType;
  char Inserted;
  int SignalState;
  _LIST_ENTRY WaitListHead;
};

/* 4961 */
struct _KDPC
{
  __int16 Type;
  char InsertedNumber;
  char TargetNumber;
  _LIST_ENTRY DpcListEntry;
  void (__cdecl *DeferredRoutine)(_KDPC *, void *, void *, void *);
  void *DeferredContext;
  void *SystemArgument1;
  void *SystemArgument2;
};

/* 4962 */
struct _KTIMER
{
  _DISPATCHER_HEADER Header;
  _ULARGE_INTEGER DueTime;
  _LIST_ENTRY TimerListEntry;
  _KDPC *Dpc;
  int Period;
};

/* 4963 */
struct _KTHREAD
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY MutantListHead;
  _KTIMER Timer;
  _KWAIT_BLOCK TimerWaitBlock;
  unsigned int KernelTime;
  void *StackBase;
  void *StackLimit;
  void *KernelStack;
  void *TlsData;
  char State;
  char Alerted[2];
  char Alertable;
  char Priority;
  char FpuExceptionEnable;
  char CreateProcessType;
  char CurrentProcessType;
  _LIST_ENTRY ApcListHead[2];
  _KPROCESS *Process;
  char KernelApcInProgress;
  char KernelApcPending;
  char UserApcPending;
  char ApcQueueable;
  unsigned int ApcQueueLock;
  unsigned int ContextSwitches;
  _LIST_ENTRY ReadyListEntry;
  $7DB508EE1BBE60DD638398102B844AF7 ___u25;
  int WaitStatus;
  char WaitIrql;
  char WaitMode;
  char WaitNext;
  char WaitReason;
  _KWAIT_BLOCK *WaitBlockList;
  unsigned int Padding1;
  unsigned int KernelApcDisable;
  int Quantum;
  char Saturation;
  char BasePriority;
  char PriorityDecrement;
  char DisableBoost;
  char SuspendCount;
  char Preempted;
  char HasTerminated;
  char CurrentProcessor;
  _KPRCB *CurrentPrcb;
  _KPRCB *AffinityPrcb;
  char IdlePriorityClass;
  char NormalPriorityClass;
  char TimeCriticalPriorityClass;
  char HasAsyncTerminated;
  unsigned int ActiveTimerListLock;
  void *StackAllocatedBase;
  _KAPC SuspendApc;
  _KSEMAPHORE SuspendSemaphore;
  _LIST_ENTRY ThreadListEntry;
  _KQUEUE *Queue;
  _LIST_ENTRY QueueListEntry;
  void (__cdecl *UserModeDispatcher)(_EXCEPTION_RECORD *, _KTRAP_FRAME *);
  _KTRAP_FRAME *UserModeTrapFrame;
  __declspec(align(8)) _LARGE_INTEGER CreateTime;
  _LARGE_INTEGER ExitTime;
  int ExitStatus;
  _LIST_ENTRY ActiveTimerListHead;
  void *ThreadId;
  void (__cdecl *StartAddress)(void *);
  _LIST_ENTRY IrpList;
  void *DebugMonitorData;
  unsigned int LastWin32ErrorCode;
  void *Win32CurrentFiber;
  unsigned int Padding2;
  unsigned int CreateOptions;
  float Vscr[4];
  float Vr[128][4];
  double Fpscr;
  double Fpr[32];
  _KAPC TerminateApc;
};

/* 4964 */
struct _KWAIT_BLOCK
{
  _LIST_ENTRY WaitListEntry;
  _KTHREAD *Thread;
  void *Object;
  _KWAIT_BLOCK *NextWaitBlock;
  unsigned __int16 WaitKey;
  unsigned __int16 WaitType;
};

/* 4965 */
struct _KPROCESS
{
  unsigned int ThreadListLock;
  _LIST_ENTRY ThreadListHead;
  int ThreadQuantum;
  unsigned int DirectoryTableBase;
  unsigned int ThreadCount;
  char IdlePriorityClass;
  char NormalPriorityClass;
  char TimeCriticalPriorityClass;
  char DisableQuantum;
  unsigned int DefaultKernelStackSize;
  void *TlsStaticDataImage;
  unsigned int SizeOfTlsStaticData;
  unsigned int SizeOfTlsStaticDataImage;
  unsigned __int16 SizeOfTlsSlots;
  char Terminating;
  char ProcessType;
  unsigned int TlsSlotBitmap[8];
  unsigned int FileObjectListLock;
  _LIST_ENTRY FileObjectListHead;
  void *Win32DefaultHeapHandle;
};

/* 4966 */
#pragma pack(push, 4)
struct _KPRCB
{
  _KTHREAD *CurrentThread;
  _KTHREAD *NextThread;
  _KTHREAD *IdleThread;
  char Number;
  unsigned int SetMember;
  unsigned int DpcTime;
  unsigned int InterruptTime;
  unsigned int InterruptCount;
  volatile unsigned int IpiFrozen;
  void *volatile CurrentPacket[3];
  volatile unsigned int TargetSet;
  void (__cdecl *volatile WorkerRoutine)(void *, void *, void *, void *);
  _KPRCB *SignalDone;
  volatile unsigned int RequestSummary;
  unsigned int DpcInterruptRequested;
  unsigned int DpcLock;
  _LIST_ENTRY DpcListHead;
  unsigned int DpcRoutineActive;
  unsigned int ReadyListLock;
  unsigned int IdleThreadActive;
  _SINGLE_LIST_ENTRY DeferredReadyListHead;
  unsigned int ReadySummary;
  unsigned int ReadySummaryMask;
  _LIST_ENTRY DispatcherReadyListHead[32];
  _KDPC ThreadReaperDpc;
  _LIST_ENTRY ThreadReaperListHead;
  _KDPC SwitchProcessorThreadDpc;
};
#pragma pack(pop)

/* 4967 */
struct _KAPC
{
  __int16 Type;
  char ApcMode;
  char Inserted;
  _KTHREAD *Thread;
  _LIST_ENTRY ApcListEntry;
  void (__cdecl *KernelRoutine)(_KAPC *, void (__cdecl **)(void *, void *, void *), void **, void **, void **);
  void (__cdecl *RundownRoutine)(_KAPC *);
  void (__cdecl *NormalRoutine)(void *, void *, void *);
  void *NormalContext;
  void *SystemArgument1;
  void *SystemArgument2;
};

/* 4968 */
struct _KSEMAPHORE
{
  _DISPATCHER_HEADER Header;
  int Limit;
};

/* 4969 */
struct _KQUEUE
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY EntryListHead;
  unsigned int CurrentCount;
  unsigned int MaximumCount;
  _LIST_ENTRY ThreadListHead;
};

/* 4970 */
struct _KINTERRUPT
{
  void (__cdecl *ServiceRoutine)(_KINTERRUPT *, void *);
  void *ServiceContext;
  unsigned int SpinLock;
  unsigned int ServiceCount;
  char BusIrql;
  char Irql;
  char _bf18;
  char TargetNumber;
};

/* 4971 */
#pragma pack(push, 4)
struct $3F253E1E2C26325DDC0AB58ECE9FE3AB
{
  char OldIrql;
  _KINTERRUPT *InterruptObject;
  char InterruptIrql;
};
#pragma pack(pop)

/* 4972 */
union $B96E9AF5BB336D7CE3E3932B4322DE6B
{
  char ExceptionRecord[80];
  $3F253E1E2C26325DDC0AB58ECE9FE3AB _s1;
};

/* 4973 */
struct _KTRAP_FRAME
{
  _STACK_FRAME_HEADER Header;
  unsigned __int64 Gpr0;
  unsigned __int64 Gpr1;
  unsigned __int64 Gpr2;
  unsigned __int64 Gpr3;
  unsigned __int64 Gpr4;
  unsigned __int64 Gpr5;
  unsigned __int64 Gpr6;
  unsigned __int64 Gpr7;
  unsigned __int64 Gpr8;
  unsigned __int64 Gpr9;
  unsigned __int64 Gpr10;
  unsigned __int64 Gpr11;
  unsigned __int64 Gpr12;
  unsigned __int64 Gpr13;
  unsigned __int64 Gpr14;
  unsigned __int64 Gpr15;
  unsigned __int64 Gpr16;
  unsigned __int64 Gpr17;
  unsigned __int64 Gpr18;
  unsigned __int64 Gpr19;
  unsigned __int64 Gpr20;
  unsigned __int64 Gpr21;
  unsigned __int64 Gpr22;
  unsigned __int64 Gpr23;
  unsigned __int64 Gpr24;
  unsigned __int64 Gpr25;
  unsigned __int64 Gpr26;
  unsigned __int64 Gpr27;
  unsigned __int64 Gpr28;
  unsigned __int64 Gpr29;
  unsigned __int64 Gpr30;
  unsigned __int64 Gpr31;
  $B96E9AF5BB336D7CE3E3932B4322DE6B ___u33;
  unsigned __int64 Ctr;
  unsigned int Lr;
  unsigned int Iar;
  unsigned int Cr;
  unsigned int Msr;
  unsigned int Xer;
  unsigned int UserModeControl;
};

/* 4974 */
struct $C7437433174C1DD94C8402997E0D28AF
{
  unsigned __int16 MsrEnableMaskHigh;
  unsigned __int16 MsrEnableMaskLow;
};

/* 4975 */
union $7DB508EE1BBE60DD638398102B844AF7
{
  $C7437433174C1DD94C8402997E0D28AF _s0;
  unsigned int MsrEnableMask;
};

/* 4976 */
union $250F5FE22B4503EFD7D48C86CC7F2167
{
  int Status;
  void *Pointer;
};

/* 4977 */
struct _IO_STATUS_BLOCK
{
  $250F5FE22B4503EFD7D48C86CC7F2167 ___u0;
  unsigned int Information;
};

/* 4978 */
union $03930FC78EE34148A48479E486356453
{
  void *ImageFileHandle;
  char *Data;
};

/* 4979 */
struct _LDRX_SOURCE
{
  void *XexHeaders;
  unsigned int ImageSize;
  int (__cdecl *ImageFileRead)(void *, unsigned int, void *, unsigned int, _IO_STATUS_BLOCK *, void *);
  $03930FC78EE34148A48479E486356453 ___u3;
  unsigned int SizeOfData;
  unsigned int ImageMediaTypes;
};

/* 4980 */
struct _LDRX_PLUGIN
{
  unsigned int Format;
  int (__cdecl *LoadFunction)(char *, _LDRX_SOURCE *, _LDRX_SOURCE *);
};

/* 4981 */
struct _UNICODE_STRING
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  wchar_t *Buffer;
};

/* 4982 */
#pragma pack(push, 4)
struct _DUMP_FRAME_BUFFER_INFO
{
  void *FrameBuffer;
  unsigned int Pitch;
  unsigned int Height;
  unsigned int Width;
  unsigned int Format;
  unsigned int Size;
  char ReadOnly;
};
#pragma pack(pop)

/* 4983 */
struct _DUMP_BASIC_SERVICES
{
  unsigned int (__cdecl *GetHardwareThreadContext)(unsigned int, _CONTEXT *);
  void (__cdecl *ResetGetHardwareThreadContext)();
  unsigned int (__cdecl *GetImagePageTableEntry)(unsigned int);
  void (__cdecl *CollectBucketData)(char *, _EXCEPTION_RECORD *, _CONTEXT *, unsigned int);
  void (__cdecl *InitProgressBar)(unsigned int);
  void (__cdecl *IncrementProgressBar)();
  void (__cdecl *DbgPrintf)(char *);
};

/* 4984 */
struct __declspec(align(8)) _FILE_FS_VOLUME_INFORMATION
{
  _LARGE_INTEGER VolumeCreationTime;
  unsigned int VolumeSerialNumber;
  unsigned int VolumeLabelLength;
  char SupportsObjects;
  char VolumeLabel[1];
};

/* 4985 */
struct _OSVERSIONINFOEXW
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  unsigned __int16 szCSDVersion[128];
  unsigned __int16 wServicePackMajor;
  unsigned __int16 wServicePackMinor;
  unsigned __int16 wSuiteMask;
  char wProductType;
  char wReserved;
};

/* 4986 */
struct _KUSER_MODE_PDE
{
  unsigned __int16 PteBlockNumber;
};

/* 4987 */
union _KUSER_MODE_SLB
{
  char AsUCHAR;
};

/* 4988 */
struct $9B5257DA1E22A915F6BFE24ABA0808F6
{
  unsigned int FlushArray64[383];
  _KUSER_MODE_PTE PteArray16MB64[32];
};

/* 4989 */
union $DC6564BA9019ACC355471B0585EF8883
{
  unsigned int FlushArray[415];
  $9B5257DA1E22A915F6BFE24ABA0808F6 _s1;
};

/* 4990 */
struct _KUSER_MODE_PAGE
{
  _KUSER_MODE_PDE PdeArray4KB[512];
  _KUSER_MODE_PTE PteArray16MB[256];
  _KUSER_MODE_PDE PdeArray64KB[32];
  _KUSER_MODE_SLB SlbArray[16];
  _KUSER_MODE_SLB SlbArray64[2];
  unsigned __int16 Reserved0;
  unsigned int Flags;
  unsigned int Reserved1[10];
  unsigned int FlushCount;
  $DC6564BA9019ACC355471B0585EF8883 ___u9;
  unsigned __int64 LookupsPerSegment[16];
  unsigned __int64 MissesPerSegment[16];
};

/* 4991 */
struct _HAL_SMC_REGISTRATION
{
  void (__cdecl *NotificationRoutine)(_HAL_SMC_REGISTRATION *, union _SMC_MAILBOX_MESSAGE *);
  int Priority;
  _LIST_ENTRY ListEntry;
};

/* 4992 */
struct _STRING
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  char *Buffer;
};

/* 4993 */
struct $8A26E66A939B75F0D5596A57AD7924FB
{
  unsigned int DesiredAccess;
  unsigned int Options;
  unsigned __int16 FileAttributes;
  unsigned __int16 ShareAccess;
  _STRING *RemainingName;
};

/* 4994 */
union $32434CE98C9C06DFE8454758A1839F6E
{
  unsigned int BufferOffset;
  void *CacheBuffer;
};

/* 4995 */
struct $AE7F2051A794C445F59891AAC8AD679E
{
  unsigned int Length;
  $32434CE98C9C06DFE8454758A1839F6E ___u1;
  _LARGE_INTEGER ByteOffset;
};

/* 4996 */
struct $5947E75D0505FD30AE7F2DDA5F518DA2
{
  unsigned int Length;
  _STRING *FileName;
};

/* 4997 */
struct $63ED425211A2DFD6E36F04131078EB56
{
  unsigned int Length;
  _FILE_INFORMATION_CLASS FileInformationClass;
};

/* 4998 */
struct _DEVICE_OBJECT
{
  __int16 Type;
  unsigned __int16 Size;
  int ReferenceCount;
  _DRIVER_OBJECT *DriverObject;
  _DEVICE_OBJECT *MountedOrSelfDevice;
  _IRP *CurrentIrp;
  unsigned int Flags;
  void *DeviceExtension;
  char DeviceType;
  char StartIoFlags;
  char StackSize;
  char DeletePending;
  unsigned int SectorSize;
  unsigned int AlignmentRequirement;
  _KDEVICE_QUEUE DeviceQueue;
  _KEVENT DeviceLock;
  unsigned int StartIoCount;
  unsigned int StartIoKey;
};

/* 4999 */
struct _KEVENT
{
  _DISPATCHER_HEADER Header;
};

/* 5000 */
struct $B3ED1CF933A686B6CA3B17C520FE965E
{
  void (__cdecl *UserApcRoutine)(void *, _IO_STATUS_BLOCK *, unsigned int);
  void *UserApcContext;
};

/* 5001 */
union $5C223E204F794932223323B1A805CDA2
{
  $B3ED1CF933A686B6CA3B17C520FE965E AsynchronousParameters;
  _LARGE_INTEGER AllocationSize;
};

/* 5002 */
#pragma pack(push, 4)
struct _KDEVICE_QUEUE_ENTRY
{
  _LIST_ENTRY DeviceListEntry;
  unsigned int SortKey;
  char Inserted;
};
#pragma pack(pop)

/* 5003 */
struct _IO_STACK_LOCATION
{
  char MajorFunction;
  char MinorFunction;
  char Flags;
  char Control;
  $A6747673F9A10989DA6453054A8C0B4F Parameters;
  _DEVICE_OBJECT *DeviceObject;
  _FILE_OBJECT *FileObject;
  int (__cdecl *CompletionRoutine)(_DEVICE_OBJECT *, _IRP *, void *);
  void *Context;
};

/* 5004 */
struct _FILE_OBJECT
{
  __int16 Type;
  char Flags;
  char Flags2;
  _DEVICE_OBJECT *DeviceObject;
  void *FsContext;
  void *FsContext2;
  int FinalStatus;
  _LARGE_INTEGER CurrentByteOffset;
  _FILE_OBJECT *RelatedFileObject;
  _IO_COMPLETION_CONTEXT *CompletionContext;
  int LockCount;
  _KEVENT Lock;
  _KEVENT Event;
  _LIST_ENTRY ProcessListEntry;
  _LIST_ENTRY FileSystemListEntry;
};

/* 5005 */
union $441CF0DA1A197C4E9671D5BB6F1DBBDC
{
  _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
  void *DriverContext[4];
};

/* 5006 */
union $CA3A14B9719017E32334B36E5A448384
{
  _IO_STACK_LOCATION *CurrentStackLocation;
  unsigned int PacketType;
};

/* 5007 */
struct $A7A613DAE5E306B2AB6D52CCCD236602
{
  $441CF0DA1A197C4E9671D5BB6F1DBBDC ___u0;
  unsigned int LockedBufferLength;
  _KTHREAD *Thread;
  _LIST_ENTRY ListEntry;
  $CA3A14B9719017E32334B36E5A448384 ___u4;
  _FILE_OBJECT *OriginalFileObject;
};

/* 5008 */
union $11CCF654597F0ADFFF3FCBDF08950624
{
  $A7A613DAE5E306B2AB6D52CCCD236602 Overlay;
  _KAPC Apc;
  void *CompletionKey;
};

/* 5009 */
struct _IRP
{
  __int16 Type;
  unsigned __int16 Size;
  unsigned int Flags;
  _LIST_ENTRY ThreadListEntry;
  _IO_STATUS_BLOCK IoStatus;
  char StackCount;
  char CurrentLocation;
  char PendingReturned;
  char Cancel;
  void *UserBuffer;
  _IO_STATUS_BLOCK *UserIosb;
  _KEVENT *UserEvent;
  $5C223E204F794932223323B1A805CDA2 Overlay;
  $11CCF654597F0ADFFF3FCBDF08950624 Tail;
};

/* 5010 */
struct _DRIVER_OBJECT
{
  void (__cdecl *DriverStartIo)(_DEVICE_OBJECT *, _IRP *);
  void (__cdecl *DriverDeleteDevice)(_DEVICE_OBJECT *);
  int (__cdecl *DriverDismountVolume)(_DEVICE_OBJECT *);
  int (__cdecl *MajorFunction[11])(_DEVICE_OBJECT *, _IRP *);
};

/* 5011 */
struct _KDEVICE_QUEUE
{
  __int16 Type;
  char Padding;
  char Busy;
  unsigned int Lock;
  _LIST_ENTRY DeviceListHead;
};

/* 5012 */
struct _IO_COMPLETION_CONTEXT
{
  void *Port;
  void *Key;
};

/* 5013 */
struct $707F8F1EEA956340F73D1F58BCC87D98
{
  unsigned int Length;
  _FILE_INFORMATION_CLASS FileInformationClass;
  _FILE_OBJECT *FileObject;
};

/* 5014 */
struct $79720594B3D97CA7D0B92C66AB2D4E90
{
  unsigned int Length;
  _FSINFOCLASS FsInformationClass;
};

/* 5015 */
struct $381D735A009C5CEF0E52CCA972036CA8
{
  unsigned int OutputBufferLength;
  void *InputBuffer;
  unsigned int InputBufferLength;
  unsigned int IoControlCode;
};

/* 5016 */
struct $58CC461A1FF7E8F10B1DF25559BAA192
{
  unsigned int Length;
  char *Buffer;
  unsigned int SectorNumber;
  unsigned int BufferOffset;
};

/* 5017 */
struct $228F32E73A128818A25FF1959272C294
{
  void *Argument1;
  void *Argument2;
  void *Argument3;
  void *Argument4;
};

/* 5018 */
union $A6747673F9A10989DA6453054A8C0B4F
{
  $8A26E66A939B75F0D5596A57AD7924FB Create;
  $AE7F2051A794C445F59891AAC8AD679E Read;
  $AE7F2051A794C445F59891AAC8AD679E Write;
  $5947E75D0505FD30AE7F2DDA5F518DA2 QueryDirectory;
  $63ED425211A2DFD6E36F04131078EB56 QueryFile;
  $707F8F1EEA956340F73D1F58BCC87D98 SetFile;
  $79720594B3D97CA7D0B92C66AB2D4E90 QueryVolume;
  $79720594B3D97CA7D0B92C66AB2D4E90 SetVolume;
  $381D735A009C5CEF0E52CCA972036CA8 DeviceIoControl;
  $58CC461A1FF7E8F10B1DF25559BAA192 SectorIo;
  $228F32E73A128818A25FF1959272C294 Others;
};

/* 5019 */
struct _HVSTATS_TLB
{
  unsigned int LoadsPerRow[256];
  unsigned int LoadsPerSegment[16];
  unsigned int InvalPerSegment[16];
};

/* 5020 */
struct _HVSTATS_CORE
{
  _HVSTATS_TLB TlbKm;
  _HVSTATS_TLB TlbUm;
  unsigned int TlbFlush;
  unsigned int TlbStwcxBug;
};

/* 5021 */
struct _HVSTATS
{
  _HVSTATS_CORE Core[3];
};

/* 5022 */
#pragma pack(push, 8)
struct _STRING64
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  unsigned __int64 Buffer;
};
#pragma pack(pop)

/* 5023 */
struct _XBOX_HARDWARE_INFO
{
  unsigned int Flags;
  char NumberOfProcessors;
  char PCIBridgeRevisionID;
  char Reserved[6];
  unsigned __int16 BldrMagic;
  unsigned __int16 BldrFlags;
};

/* 5024 */
struct _SECURITY_TOKEN_PROXY_DATA
{
  unsigned int Length;
  _PROXY_CLASS ProxyClass;
  _UNICODE_STRING PathInfo;
  unsigned int ContainerMask;
  unsigned int ObjectMask;
};

/* 5025 */
#pragma pack(push, 4)
struct _KMUTANT
{
  _DISPATCHER_HEADER Header;
  _LIST_ENTRY MutantListEntry;
  _KTHREAD *OwnerThread;
  char Abandoned;
};
#pragma pack(pop)

/* 5026 */
#pragma pack(push, 4)
struct _DUMP_MEDIA_SERVICES
{
  int (__cdecl *OpenMedia)();
  int (__cdecl *WriteMedia)(unsigned int, char *, unsigned int, unsigned int);
  int (__cdecl *ReadMedia)(unsigned int, char *, unsigned int, unsigned int);
  int (__cdecl *WriteMediaPhysical)(unsigned int, unsigned int, unsigned int);
  int (__cdecl *CloseMedia)();
  unsigned int MediaSize;
  char Location;
};
#pragma pack(pop)

/* 5027 */
struct _FILE_MODE_INFORMATION
{
  unsigned int Mode;
};

/* 5028 */
struct _STRING32
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  unsigned int Buffer;
};

/* 5029 */
struct _OBJECT_DIRECTORY_INFORMATION
{
  _STRING Name;
  unsigned int Type;
};

/* 5030 */
struct _KUSER_MODE_PTE_BLOCK
{
  _KUSER_MODE_PTE PteArray[2048];
};

/* 5031 */
struct _OBJECT_HEADER_NAME_INFO
{
  _OBJECT_HEADER_NAME_INFO *ChainLink;
  _OBJECT_DIRECTORY *Directory;
  _STRING Name;
};

/* 5032 */
struct _OBJECT_DIRECTORY
{
  _OBJECT_HEADER_NAME_INFO *HashBuckets[13];
};

/* 5033 */
struct _RUNTIME_FUNCTION
{
  unsigned int BeginAddress;
  int _bf4;
};

/* 5034 */
struct __declspec(align(8)) _FILE_FS_CONTROL_INFORMATION
{
  _LARGE_INTEGER FreeSpaceStartFiltering;
  _LARGE_INTEGER FreeSpaceThreshold;
  _LARGE_INTEGER FreeSpaceStopFiltering;
  _LARGE_INTEGER DefaultQuotaThreshold;
  _LARGE_INTEGER DefaultQuotaLimit;
  unsigned int FileSystemControlFlags;
};

/* 5035 */
struct $1E19EC20DD677952AB25C120C290CAF3
{
  char DispatchInterrupt;
  char ApcInterrupt;
};

/* 5036 */
union $B24344F6FFB5BF955939EDC8342E31D0
{
  unsigned __int16 SoftwareInterrupt;
  $1E19EC20DD677952AB25C120C290CAF3 _s1;
};

/* 5037 */
struct $BD8DC8F5757D161BEF29221FF31806DC
{
  char DpcFpuStateSaved;
  char DpcVpuStateSaved;
};

/* 5038 */
union $960590EE20764D07897C50E95AB487F4
{
  unsigned __int16 DpcFpuVpuStateSaved;
  $BD8DC8F5757D161BEF29221FF31806DC _s1;
};

/* 5039 */
struct $D37928B2710E42F3FBBC9F8C461773E8
{
  char StartBackgroundScheduling;
  char StopBackgroundScheduling;
};

/* 5040 */
union $266B45DF6B1DFAEA71AE372F932C29F2
{
  unsigned __int16 StartStopBackgroundScheduling;
  $D37928B2710E42F3FBBC9F8C461773E8 _s1;
};

/* 5041 */
struct $76A08B48F3ED356B4D8B9C14BE803610
{
  unsigned int Gpr1Restore;
  unsigned int IarRestore;
};

/* 5042 */
union $97CDA0F74608CC63966BCCB606159C26
{
  unsigned __int64 LrIarSave;
  $76A08B48F3ED356B4D8B9C14BE803610 _s1;
};

/* 5043 */
struct $678EF07AF0CB2D09989151C5E719E57F
{
  unsigned int CrRestore;
  unsigned int MsrRestore;
};

/* 5044 */
union $5DF3E9CD280B3641E870A4BE7072F003
{
  unsigned __int64 CrMsrSave;
  $678EF07AF0CB2D09989151C5E719E57F _s1;
};

/* 5045 */
struct _KPCR
{
  void *TlsData;
  $7DB508EE1BBE60DD638398102B844AF7 ___u1;
  $B24344F6FFB5BF955939EDC8342E31D0 ___u2;
  $960590EE20764D07897C50E95AB487F4 ___u3;
  char DpcCurrentProcessType;
  char QuantumEnd;
  char TimerRequest;
  char HvCr0Save;
  _KTHREAD *FpuOwnerThread;
  _KTHREAD *VpuOwnerThread;
  char CurrentIrql;
  char BackgroundSchedulingActive;
  $266B45DF6B1DFAEA71AE372F932C29F2 ___u12;
  unsigned int TimerHand;
  $97CDA0F74608CC63966BCCB606159C26 ___u14;
  $5DF3E9CD280B3641E870A4BE7072F003 ___u15;
  unsigned __int64 Gpr13Save;
  unsigned __int64 HvGpr1Save;
  unsigned __int64 HvGpr3Save;
  unsigned __int64 HvGpr4Save;
  unsigned __int64 HvGpr5Save;
  unsigned int UserModeControl;
  void *PanicStack;
  unsigned __int64 DarSave;
  unsigned int DsisrSave;
  unsigned int OnInterruptStack;
  void *StackBase;
  void *StackLimit;
  void *InterruptStackBase;
  void *InterruptStackLimit;
  void *InterruptRoutine[32];
  _KPRCB PrcbData;
  _KPRCB *Prcb;
  void *DbgLastDpcRoutine;
};

/* 5046 */
struct _FP_32
{
  unsigned int W[1];
};

/* 5047 */
struct _FP_64
{
  unsigned int W[2];
};

/* 5048 */
struct _FP_80
{
  unsigned int W[3];
};

/* 5049 */
struct _FP_128
{
  unsigned int W[4];
};

/* 5050 */
union $D246DF27A234A885FA19E3ADE157695B
{
  __int16 I16Value;
  unsigned __int16 U16Value;
  int I32Value;
  unsigned int U32Value;
  void *StringValue;
  unsigned int CompareValue;
  _FP_32 Fp32Value;
  _LARGE_INTEGER I64Value;
  _ULARGE_INTEGER U64Value;
  _FP_64 Fp64Value;
  _FP_80 Fp80Value;
  _FP_128 Fp128Value;
};

/* 5051 */
struct __declspec(align(8)) _FP_IEEE_VALUE
{
  $D246DF27A234A885FA19E3ADE157695B Value;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC Control;
};

/* 5052 */
struct _FP_IEEE_RECORD
{
  _FP_IEEE_VALUE Operand1;
  _FP_IEEE_VALUE Operand2;
  _FP_IEEE_VALUE Result;
};

/* 5053 */
struct _IO_COMPLETION_BASIC_INFORMATION
{
  int Depth;
};

/* 5054 */
struct _COMPOUND_ACCESS_ALLOWED_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned __int16 CompoundAceType;
  unsigned __int16 Reserved;
  unsigned int SidStart;
};

/* 5055 */
struct _LDRX_PATCH_DESCRIPTOR
{
  _LIST_ENTRY ListEntry;
  _STRING PathName;
  _STRING Prefix;
  _STRING Suffix;
};

/* 5056 */
struct _HAL_HDDVD_ROM_REGISTRATION
{
  void (__cdecl *NotificationRoutine)(_HAL_HDDVD_ROM_REGISTRATION *, struct _SPIF_NOTIFICATION *);
  _LIST_ENTRY ListEntry;
};

/* 5057 */
struct _FILE_ALIGNMENT_INFORMATION
{
  unsigned int AlignmentRequirement;
};

/* 5058 */
struct _FSCACHE_EXTENSION
{
  _DEVICE_OBJECT *TargetDeviceObject;
  unsigned int SectorSize;
  _LARGE_INTEGER PartitionLength;
};

/* 5059 */
struct _FSCACHE_ELEMENT
{
  unsigned int BlockNumber;
  _FSCACHE_EXTENSION *CacheExtension;
  char *CacheBuffer;
  _LIST_ENTRY LruListEntry;
};

/* 5060 */
struct _KD_SYMBOLS_INFO
{
  void *BaseOfDll;
  unsigned int ProcessId;
  unsigned int CheckSum;
  unsigned int SizeOfImage;
};

/* 5061 */
struct _RUNTIME_FUNCTION_INDIRECT
{
  _EXCEPTION_DISPOSITION (__cdecl *ExceptionHandler)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
  void *HandlerData;
};

/* 5062 */
struct _KSPECIAL_REGISTERS
{
  unsigned int KernelDr0;
  unsigned int KernelDr1;
  unsigned int KernelDr2;
  unsigned int KernelDr3;
  unsigned int KernelDr4;
  unsigned int KernelDr5;
  unsigned int KernelDr6;
  unsigned int KernelDr7;
};

/* 5063 */
struct _KPROCESSOR_STATE
{
  _CONTEXT ContextFrame;
  _KSPECIAL_REGISTERS SpecialRegisters;
};

/* 5064 */
struct _FIBER
{
  void *FiberData;
  void *StackAllocatedBase;
  void *StackBase;
  void *StackLimit;
  _CONTEXT Context;
};

/* 5065 */
struct _FILE_COMPLETION_INFORMATION
{
  void *Port;
  void *Key;
};

/* 5066 */
struct _SHARE_ACCESS
{
  char OpenCount;
  char Readers;
  char Writers;
  char Deleters;
  char SharedRead;
  char SharedWrite;
  char SharedDelete;
};

/* 5067 */
struct _FILE_ACCESS_INFORMATION
{
  unsigned int AccessFlags;
};

/* 5068 */
struct _DUMP_SYSTEM_GLOBALS
{
  unsigned int Size;
  unsigned int KeNumberProcessors;
  void *KeSystemProcessVA;
  void *KeTitleProcessVA;
  void *KeDebugMonitorDataVA;
  void *PsLoadedModuleListVA;
  void *MmPdeDatabaseVA;
  void *MmPhysical64KBMappingTableVA;
  unsigned int MmHighestPhysicalPage;
  void *XexpKernelDataTableEntryVA;
};

/* 5069 */
struct _DUMP_COLLECTION_HELP
{
  unsigned int Size;
  _DUMP_BASIC_SERVICES *BasicServices;
  _DUMP_MEDIA_SERVICES *MediaServices;
  _DUMP_FRAME_BUFFER_INFO *FrameBufferInfo;
  _DUMP_SYSTEM_GLOBALS *SystemGlobals;
};

/* 5070 */
#pragma pack(push, 8)
struct _KTIME_STAMP_BUNDLE
{
  unsigned __int64 InterruptTime;
  unsigned __int64 SystemTime;
  unsigned int TickCount;
};
#pragma pack(pop)

/* 5071 */
struct _OBJECT_TYPE
{
  void *(__cdecl *AllocateProcedure)(unsigned int, unsigned int, _POOL_TYPE);
  void (__cdecl *FreeProcedure)(void *);
  void (__cdecl *CloseProcedure)(void *, unsigned int);
  void (__cdecl *DeleteProcedure)(void *);
  int (__cdecl *ParseProcedure)(void *, _OBJECT_TYPE *, unsigned int, _STRING *, _STRING *, void *, void **);
  void *DefaultObject;
  unsigned int PoolTag;
};

/* 5072 */
struct _OBJECT_SYMBOLIC_LINK
{
  void *LinkTargetObject;
  _STRING LinkTarget;
};

/* 5073 */
struct $98DC74700006FF6C48411D0D6D66C036
{
  __int16 DataLength;
  __int16 TotalLength;
};

/* 5074 */
union $04EB2C3887A58B657A1E500794529034
{
  $98DC74700006FF6C48411D0D6D66C036 s1;
  unsigned int Length;
};

/* 5075 */
struct $3C08E6DE03C606518A54683476EDD482
{
  __int16 Type;
  __int16 DataInfoOffset;
};

/* 5076 */
union $32DD0FBA616DF6797985D077C440A28F
{
  $3C08E6DE03C606518A54683476EDD482 s2;
  unsigned int ZeroInit;
};

/* 5077 */
struct _CLIENT_ID
{
  void *UniqueProcess;
  void *UniqueThread;
};

/* 5078 */
union $D97BB7E959D3BBD7A9BD9702D0E3DA02
{
  _CLIENT_ID ClientId;
  double DoNotUseThisField;
};

/* 5079 */
union $DFDBDD63C2587FA282FAD6CEC707ED02
{
  unsigned int ClientViewSize;
  unsigned int CallbackId;
};

/* 5080 */
struct _PORT_MESSAGE
{
  $04EB2C3887A58B657A1E500794529034 u1;
  $32DD0FBA616DF6797985D077C440A28F u2;
  $D97BB7E959D3BBD7A9BD9702D0E3DA02 u2;
  unsigned int MessageId;
  $DFDBDD63C2587FA282FAD6CEC707ED02 u1;
};

/* 5081 */
struct _RTL_PROCESS_LOCK_INFORMATION
{
  void *Address;
  unsigned __int16 Type;
  unsigned __int16 CreatorBackTraceIndex;
  void *OwningThread;
  int LockCount;
  unsigned int ContentionCount;
  unsigned int EntryCount;
  int RecursionCount;
  unsigned int NumberOfWaitingShared;
  unsigned int NumberOfWaitingExclusive;
};

/* 5082 */
#pragma pack(push, 2)
struct _OBJECT_HANDLE_TABLE
{
  int HandleCount;
  unsigned int FirstFreeTableOffset;
  unsigned int TableAllocation;
  void ***RootTable;
  void **BuiltinRootTable[8];
  unsigned int SpinLock;
  char PoolType;
  char Discriminant;
  char Terminating;
};
#pragma pack(pop)

/* 5083 */
struct $0C2FFF853753AF47D3E2EB2FEEFA0C96
{
  unsigned int BeginAddress;
  unsigned int EndAddress;
  unsigned int HandlerAddress;
  unsigned int JumpTarget;
};

/* 5084 */
struct _SCOPE_TABLE
{
  unsigned int Count;
  $0C2FFF853753AF47D3E2EB2FEEFA0C96 ScopeRecord[1];
};

/* 5085 */
union _PPC_INSTRUCTION
{
  unsigned int Long;
  char Byte[4];
  $54EFCC50AAD43EA9AF18F67ACEC01CFC i_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC b_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC sc_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC d_f1;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC d_f2;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC ds_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC x_f1;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC x_f2;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC x_f3;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC xl_f1;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC xl_f2;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC xfx_f1;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC xfx_f2;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC xfl_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC xs_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC xo_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC a_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC m_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC md_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC mds_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC va_f1;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC va_f2;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC vx_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC vxr_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC x2_f;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC vx2_f1;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC vx2_f2;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC vx2_f3;
  $54EFCC50AAD43EA9AF18F67ACEC01CFC vx2_f4;
};

/* 5086 */
struct _OSVERSIONINFOW
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  wchar_t szCSDVersion[128];
};

/* 5087 */
struct __declspec(align(8)) _FILE_NETWORK_OPEN_INFORMATION
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  unsigned int FileAttributes;
};

/* 5088 */
struct _QUAD
{
  double DoNotUseThisField;
};

/* 5089 */
struct _OBJECT_HEADER
{
  int PointerCount;
  int HandleCount;
  _OBJECT_TYPE *Type;
  unsigned __int16 Flags;
  char HashIndex;
  char Padding;
  _QUAD Body;
};

/* 5090 */
struct _DIRECTORY_ENUM_CONTEXT
{
  unsigned int QueryOffset;
  _UNICODE_STRING TemplateFileName;
};

/* 5091 */
struct _CondR
{
  int _bf0;
};

/* 5092 */
struct _SECURITY_SEED_AND_LENGTH
{
  char Length;
  char Seed;
};

/* 5093 */
struct __declspec(align(8)) _FILE_DIRECTORY_INFORMATION
{
  unsigned int NextEntryOffset;
  unsigned int FileIndex;
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  _LARGE_INTEGER EndOfFile;
  _LARGE_INTEGER AllocationSize;
  unsigned int FileAttributes;
  unsigned int FileNameLength;
  char FileName[1];
};

/* 5094 */
struct _FILE_FS_FULL_SIZE_INFORMATION
{
  _LARGE_INTEGER TotalAllocationUnits;
  _LARGE_INTEGER CallerAvailableAllocationUnits;
  _LARGE_INTEGER ActualAvailableAllocationUnits;
  unsigned int SectorsPerAllocationUnit;
  unsigned int BytesPerSector;
};

/* 5095 */
struct _HAL_POWER_DOWN_REGISTRATION
{
  void (__cdecl *NotificationRoutine)(_HAL_POWER_DOWN_REGISTRATION *);
  int Priority;
  _LIST_ENTRY ListEntry;
};

/* 5096 */
struct _OSVERSIONINFOEXA
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  char szCSDVersion[128];
  unsigned __int16 wServicePackMajor;
  unsigned __int16 wServicePackMinor;
  unsigned __int16 wSuiteMask;
  char wProductType;
  char wReserved;
};

/* 5097 */
struct _OBJECT_ATTRIBUTES
{
  void *RootDirectory;
  _STRING *ObjectName;
  unsigned int Attributes;
};

/* 5098 */
#pragma pack(push, 4)
struct _FILE_FS_LABEL_INFORMATION
{
  unsigned int VolumeLabelLength;
  char VolumeLabel[1];
};
#pragma pack(pop)

/* 5099 */
struct _FILE_FS_OBJECTID_INFORMATION
{
  char ObjectId[16];
  char ExtendedInfo[48];
};

/* 5100 */
struct _KIPI_COUNTS
{
  unsigned int Freeze;
  unsigned int Packet;
  unsigned int DPC;
  unsigned int APC;
  unsigned int FlushSingleTb;
  unsigned int FlushMultipleTb;
  unsigned int FlushEntireTb;
  unsigned int GenericCall;
  unsigned int ChangeColor;
  unsigned int SweepDcache;
  unsigned int SweepIcache;
  unsigned int SweepIcacheRange;
  unsigned int FlushIoBuffers;
  unsigned int GratuitousDPC;
};

/* 5101 */
struct _LDR_DATA_TABLE_ENTRY
{
  _LIST_ENTRY InLoadOrderLinks;
  _LIST_ENTRY InClosureOrderLinks;
  _LIST_ENTRY InInitializationOrderLinks;
  void *NtHeadersBase;
  void *ImageBase;
  unsigned int SizeOfNtImage;
  _UNICODE_STRING FullDllName;
  _UNICODE_STRING BaseDllName;
  unsigned int Flags;
  unsigned int SizeOfFullImage;
  void *EntryPoint;
  unsigned __int16 LoadCount;
  unsigned __int16 ModuleIndex;
  void *DllBaseOriginal;
  unsigned int CheckSum;
  unsigned int ModuleLoadFlags;
  unsigned int TimeDateStamp;
  void *LoadedImports;
  void *XexHeaderBase;
  $BDBFC171E204A95EDC2562424E51BD4F ___u19;
};

/* 5102 */
struct $A08BF274BC83B9E67BA2CE44638C8783
{
  _LDR_DATA_TABLE_ENTRY *ClosureRoot;
  _LDR_DATA_TABLE_ENTRY *TraversalParent;
};

/* 5103 */
union $BDBFC171E204A95EDC2562424E51BD4F
{
  _STRING LoadFileName;
  $A08BF274BC83B9E67BA2CE44638C8783 _s1;
};

/* 5104 */
struct _OSVERSIONINFOA
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  char szCSDVersion[128];
};

/* 5105 */
struct _DUMP_STANDARD_BUCKET_DATA
{
  char BucketDataVersion;
  char _bf1;
  _GUID Module;
  unsigned int ModuleOffset;
  unsigned int TitleID;
  unsigned int MediaID;
  unsigned int Code;
  unsigned int Parameters[4];
};

/* 5106 */
struct _RAW_DUMP_INFO
{
  unsigned int Signature;
  _BYTE gap4[1];
  char _bf5;
  char BucketData[64];
};

/* 5107 */
struct _SEMAPHORE_BASIC_INFORMATION
{
  int CurrentCount;
  int MaximumCount;
};

/* 5108 */
#pragma pack(push, 4)
struct _FILE_MOVE_CLUSTER_INFORMATION
{
  unsigned int ClusterCount;
  void *RootDirectory;
  unsigned int FileNameLength;
  char FileName[1];
};
#pragma pack(pop)

/* 5109 */
struct _PVR
{
  int _bf0;
};

/* 5110 */
#pragma pack(push, 4)
struct _FILE_LINK_INFORMATION
{
  char ReplaceIfExists;
  void *RootDirectory;
  unsigned int FileNameLength;
  char FileName[1];
};
#pragma pack(pop)

/* 5111 */
union _FPSCR
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC bits;
  unsigned int AsULONG;
};

/* 5112 */
struct _FILE_ATTRIBUTE_TAG_INFORMATION
{
  unsigned int FileAttributes;
  unsigned int ReparseTag;
};

/* 5113 */
struct _FILE_ALLOCATION_INFORMATION
{
  _LARGE_INTEGER AllocationSize;
};

/* 5114 */
struct _HCR
{
  unsigned __int64 TlbLock[16];
  char Number;
  volatile char QuiescePhase;
  volatile char QuiesceReason;
  char QuiesceWakeup;
  unsigned int Reserved1;
  unsigned int QuiesceDecrementer;
  unsigned int QuiesceHypervisorDecrementer;
  unsigned __int64 QuiesceGpr3Save;
  unsigned __int64 HvStatsCore;
  char Stack[8032];
};

/* 5115 */
struct _OBJECT_NAME_INFORMATION
{
  _STRING Name;
};

/* 5116 */
struct _EVENT_BASIC_INFORMATION
{
  _EVENT_TYPE EventType;
  int EventState;
};

/* 5117 */
struct _XBOX_KRNL_VERSION
{
  unsigned __int16 Major;
  unsigned __int16 Minor;
  unsigned __int16 Build;
  unsigned __int16 Qfe;
};

/* 5118 */
struct _MM_STATISTICS
{
  unsigned int Length;
  unsigned int TotalPhysicalPages;
  unsigned int KernelPages;
  unsigned int TitleAvailablePages;
  unsigned int TitleTotalVirtualMemoryBytes;
  unsigned int TitleReservedVirtualMemoryBytes;
  unsigned int TitlePhysicalPages;
  unsigned int TitlePoolPages;
  unsigned int TitleStackPages;
  unsigned int TitleImagePages;
  unsigned int TitleHeapPages;
  unsigned int TitleVirtualPages;
  unsigned int TitlePageTablePages;
  unsigned int TitleCachePages;
  unsigned int SystemAvailablePages;
  unsigned int SystemTotalVirtualMemoryBytes;
  unsigned int SystemReservedVirtualMemoryBytes;
  unsigned int SystemPhysicalPages;
  unsigned int SystemPoolPages;
  unsigned int SystemStackPages;
  unsigned int SystemImagePages;
  unsigned int SystemHeapPages;
  unsigned int SystemVirtualPages;
  unsigned int SystemPageTablePages;
  unsigned int SystemCachePages;
  unsigned int HighestPhysicalPage;
};

/* 5119 */
struct _FILE_END_OF_FILE_INFORMATION
{
  _LARGE_INTEGER EndOfFile;
};

/* 5120 */
struct _HARDWARE_PTE
{
  int _bf0;
};

/* 5121 */
struct _KDRIVER_NOTIFICATION_REGISTRATION
{
  void (__cdecl *NotificationRoutine)(_KDRIVER_NOTIFICATION_REGISTRATION *, _KDRIVER_NOTIFICATION_TYPE);
  int Priority;
  _LIST_ENTRY ListEntry;
};

/* 5122 */
struct __declspec(align(8)) _STF_CREATE_PACKET
{
  _STRING DeviceName;
  _ULARGE_INTEGER BackingFileOffset;
  _ULARGE_INTEGER BackingMaximumVolumeSize;
  void *BackingFileHandle;
  char VolumeDescriptor[36];
  void *BlockArray;
  unsigned int DeviceExtensionSize;
  _DEVICE_OBJECT *DeviceObject;
  void *DeviceExtension;
  char BlockCacheElementCount;
  char TitleOwned;
  char BackingFilePresized;
  char DeviceCharacteristics;
};

/* 5123 */
struct _PHYSICAL_MEMORY_RUN
{
  unsigned int BasePage;
  unsigned int PageCount;
};

/* 5124 */
struct _TIME_FIELDS
{
  __int16 Year;
  __int16 Month;
  __int16 Day;
  __int16 Hour;
  __int16 Minute;
  __int16 Second;
  __int16 Milliseconds;
  __int16 Weekday;
};

/* 5125 */
#pragma pack(push, 4)
struct _FILE_RENAME_INFORMATION
{
  char ReplaceIfExists;
  void *RootDirectory;
  _STRING FileName;
};
#pragma pack(pop)

/* 5126 */
union _IMAGE_PTE
{
  unsigned int AsULONG;
};

/* 5127 */
struct _MSR
{
  int _bf0;
};

/* 5128 */
struct _SECURITY_TOKEN_AUDIT_DATA
{
  unsigned int Length;
  unsigned int GrantMask;
  unsigned int DenyMask;
};

/* 5129 */
#pragma pack(push, 4)
struct _FSCACHE_PROCESS
{
  unsigned int GeneralSpinLock;
  unsigned int ElementArraySpinLock;
  _KPRCB *SpinLockOwner;
  _LIST_ENTRY LruListHead;
  unsigned int ElementCount;
  _FSCACHE_ELEMENT *ElementArray;
  _RTL_CRITICAL_SECTION SetCacheSizeLock;
  _KEVENT CollidedMapBufferEvent;
  _KEVENT WaitingForElementEvent;
  unsigned int WaitingForElementWaiters;
  _FSCACHE_PROCESS *OtherCacheProcess;
  char MemoryRegionType;
  char PoolType;
};
#pragma pack(pop)

/* 5130 */
struct _KSWAP_FRAME
{
  _STACK_FRAME_HEADER Header;
  unsigned __int64 Gpr14;
  unsigned __int64 Gpr15;
  unsigned __int64 Gpr16;
  unsigned __int64 Gpr17;
  unsigned __int64 Gpr18;
  unsigned __int64 Gpr19;
  unsigned __int64 Gpr20;
  unsigned __int64 Gpr21;
  unsigned __int64 Gpr22;
  unsigned __int64 Gpr23;
  unsigned __int64 Gpr24;
  unsigned __int64 Gpr25;
  unsigned __int64 Gpr26;
  unsigned __int64 Gpr27;
  unsigned __int64 Gpr28;
  unsigned __int64 Gpr29;
  unsigned __int64 Gpr30;
  unsigned __int64 Gpr31;
  unsigned int Cr;
  unsigned int Lr;
  unsigned int CallersLr;
  unsigned int Fill[1];
};

/* 5131 */
struct _DISPATCHER_CONTEXT
{
  unsigned int ControlPc;
  _RUNTIME_FUNCTION *FunctionEntry;
  unsigned int EstablisherFrame;
  _CONTEXT *ContextRecord;
};

/* 5132 */
struct _DUMP_COLLECTION_FACILITY
{
  int (__cdecl *CollectDump)(_DUMP_COLLECTION_HELP *, _EXCEPTION_RECORD *, _CONTEXT *, unsigned int);
};

/* 5133 */
struct __declspec(align(8)) _LAST_EXCEPTION_LOG
{
  _EXCEPTION_RECORD ExceptionRecord;
  _CONTEXT ContextRecord;
  unsigned int ControlPc;
  _EXCEPTION_DISPOSITION Disposition;
  unsigned int HandlerData[5];
};

/* 5134 */
struct _CSTRING
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  const char *Buffer;
};

/* 5135 */
struct __declspec(align(8)) _FILE_BASIC_INFORMATION
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  unsigned int FileAttributes;
};

/* 5136 */
struct _HV_IMAGE_INFO
{
  char Signature[256];
  unsigned int InfoSize;
  unsigned int ImageFlags;
  unsigned int LoadAddress;
  char ImageHash[20];
  unsigned int ImportTableCount;
  char ImportDigest[20];
  char MediaID[16];
  char ImageKey[16];
  unsigned int ExportTableAddress;
  char HeaderHash[20];
  unsigned int GameRegion;
};

/* 5137 */
#pragma pack(push, 4)
struct _FILE_TRACKING_INFORMATION
{
  void *DestinationFile;
  unsigned int ObjectInformationLength;
  char ObjectInformation[1];
};
#pragma pack(pop)

/* 5138 */
struct $0246C38BEB7844B343CAB2E66255E0E1
{
  char Type;
  char SpinCount;
  char Size;
  char Inserted;
  int SignalState;
  _LIST_ENTRY WaitListHead;
};

/* 5139 */
union $66FDB9E1EF9D01C63AAEBC87C2498271
{
  $0246C38BEB7844B343CAB2E66255E0E1 Event;
  unsigned int RawEvent[4];
};

/* 5140 */
#pragma pack(push, 4)
struct _FILE_STANDARD_INFORMATION
{
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  unsigned int NumberOfLinks;
  char DeletePending;
  char Directory;
};
#pragma pack(pop)

/* 5141 */
struct _EX_TITLE_TERMINATE_REGISTRATION
{
  void (__cdecl *NotificationRoutine)(_EX_TITLE_TERMINATE_REGISTRATION *);
  int Priority;
  _LIST_ENTRY ListEntry;
};

/* 5142 */
struct _RTL_PROCESS_LOCKS
{
  unsigned int NumberOfLocks;
  _RTL_PROCESS_LOCK_INFORMATION Locks[1];
};

/* 5143 */
struct _RTL_TIME_ZONE_INFORMATION
{
  int Bias;
  wchar_t StandardName[32];
  _TIME_FIELDS StandardStart;
  int StandardBias;
  wchar_t DaylightName[32];
  _TIME_FIELDS DaylightStart;
  int DaylightBias;
};

/* 5144 */
struct _FILE_FS_SIZE_INFORMATION
{
  _LARGE_INTEGER TotalAllocationUnits;
  _LARGE_INTEGER AvailableAllocationUnits;
  unsigned int SectorsPerAllocationUnit;
  unsigned int BytesPerSector;
};

/* 5145 */
struct _PHYSICAL_MEMORY_DESCRIPTOR
{
  unsigned int NumberOfRuns;
  unsigned int NumberOfPages;
  _PHYSICAL_MEMORY_RUN Run[1];
};

/* 5146 */
struct _KEXCEPTION_STACK_FRAME
{
  _KTRAP_FRAME TrapFrame;
  char SlackSpace[1344];
};

/* 5147 */
struct $0569A9D4D5811F4F6100C5652F338DAF
{
  _KPCR Pcr;
  __declspec(align(128)) unsigned __int64 IdleThreadData[];
};

/* 5148 */
union _KPCR_PAGE
{
  $0569A9D4D5811F4F6100C5652F338DAF _s0;
  char PcrAsUCHARs[4096];
};

/* 5149 */
#pragma pack(push, 4)
struct _SECURITY_ADVANCED_QUALITY_OF_SERVICE
{
  unsigned int Length;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  char ContextTrackingMode;
  char EffectiveOnly;
  _SECURITY_TOKEN_PROXY_DATA *ProxyData;
  _SECURITY_TOKEN_AUDIT_DATA *AuditData;
};
#pragma pack(pop)

/* 5150 */
struct _KD_GLOBAL_DATA_BLOCK
{
  void *MmTitlePfnRegion;
  void *MmSystemPfnRegion;
  void *ExTitlePoolDescriptor;
  void *ExSystemPoolDescriptor;
  void *KeTitleProcess;
  void *KeSystemProcess;
  void *ObTitleObjectHandleTable;
  void *ObSystemObjectHandleTable;
  void *MmAllocatedPagesByUsage;
  void *MmNumberOfPhysicalPages;
  void *ObpRootDirectoryObject;
  void *HvStats;
};

/* 5151 */
#pragma pack(push, 4)
struct _FILE_NOTIFY_INFORMATION
{
  unsigned int NextEntryOffset;
  unsigned int Action;
  unsigned int FileNameLength;
  char FileName[1];
};
#pragma pack(pop)

/* 5152 */
struct __declspec(align(8)) _TIMER_BASIC_INFORMATION
{
  _LARGE_INTEGER RemainingTime;
  char TimerState;
};

/* 5153 */
#pragma pack(push, 4)
struct _FILE_NAME_INFORMATION
{
  unsigned int FileNameLength;
  char FileName[1];
};
#pragma pack(pop)

/* 5154 */
struct _FILE_COMPRESSION_INFORMATION
{
  _LARGE_INTEGER CompressedFileSize;
  unsigned __int16 CompressionFormat;
  char CompressionUnitShift;
  char ChunkShift;
  char ClusterShift;
  char Reserved[3];
};

/* 5155 */
struct _FILE_POSITION_INFORMATION
{
  _LARGE_INTEGER CurrentByteOffset;
};

/* 5156 */
union _KUSER_MODE_CONTROL
{
  unsigned int AsULONG;
};

/* 5157 */
struct _ERWLOCK
{
  int LockCount;
  unsigned int WritersWaitingCount;
  unsigned int ReadersWaitingCount;
  unsigned int ReadersEntryCount;
  _KEVENT WriterEvent;
  _KSEMAPHORE ReaderSemaphore;
  unsigned int SpinLock;
};

/* 5158 */
#pragma pack(push, 4)
struct _FILE_FS_ATTRIBUTE_INFORMATION
{
  unsigned int FileSystemAttributes;
  int MaximumComponentNameLength;
  unsigned int FileSystemNameLength;
  char FileSystemName[1];
};
#pragma pack(pop)

/* 5159 */
#pragma pack(push, 4)
struct _MUTANT_BASIC_INFORMATION
{
  int CurrentCount;
  char OwnedByCaller;
  char AbandonedState;
};
#pragma pack(pop)

/* 5160 */
struct _FILE_FS_DEVICE_INFORMATION
{
  unsigned int DeviceType;
  unsigned int Characteristics;
};

/* 5161 */
struct _HV_IMAGE_IMPORT_TABLE
{
  char NextImportDigest[20];
  unsigned int ModuleNumber;
  unsigned int Version[2];
  char Unused;
  char ModuleIndex;
  unsigned __int16 ImportCount;
};

/* 5162 */
struct _XER
{
  int _bf0;
};

/* 5163 */
struct __declspec(align(8)) _FILE_STREAM_INFORMATION
{
  unsigned int NextEntryOffset;
  unsigned int StreamNameLength;
  _LARGE_INTEGER StreamSize;
  _LARGE_INTEGER StreamAllocationSize;
  char StreamName[1];
};

/* 5164 */
struct _KD_PHYSICAL_PORT
{
  unsigned int (__cdecl *Initialize)(unsigned int);
  unsigned int (__cdecl *ReceivePacket)(unsigned int, _STRING *, _STRING *, unsigned int *);
  void (__cdecl *SendPacket)(unsigned int, _STRING *, _STRING *);
};

/* 5165 */
struct _HV_IMAGE_EXPORT_TABLE
{
  unsigned int Magic[3];
  unsigned int ModuleNumber[2];
  unsigned int Version[3];
  unsigned int ImageBaseAddress;
  unsigned int Count;
  unsigned int Base;
};

/* 5166 */
struct _HV_PAGE_INFO
{
  unsigned int PageDescription;
  char DataDigest[20];
};

/* 5167 */
struct _FILE_INTERNAL_INFORMATION
{
  _LARGE_INTEGER IndexNumber;
};

/* 5168 */
struct _FILE_DISPOSITION_INFORMATION
{
  char DeleteFile;
};

/* 5169 */
struct _AP25_AUTHENTICATION_OUTPUT
{
  unsigned int Result;
};

/* 5170 */
struct IDirectXFileObjectVtbl
{
  HRESULT (__cdecl *QueryInterface)(IDirectXFileObject *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IDirectXFileObject *);
  unsigned int (__cdecl *Release)(IDirectXFileObject *);
  HRESULT (__cdecl *GetName)(IDirectXFileObject *, char *, unsigned int *);
  HRESULT (__cdecl *GetId)(IDirectXFileObject *, _GUID *);
};

/* 5171 */
struct _SGADDR
{
  in_addr inaSg;
  unsigned int dwSpiSg;
  unsigned __int64 qwXboxID;
  char abReserved[4];
};

/* 5172 */
struct _XENUMERATEPARAM
{
  unsigned int dwUserIndex;
  unsigned int dwFlags;
  void *pvPrivateEnumStructure;
  void *pvBuffer;
  unsigned int cbBuffer;
  unsigned int cItemsRequested;
  unsigned int *pcItemsReturned;
  _XOVERLAPPED *pxoverlapped;
};

/* 5173 */
struct _BANNER_LIST_ENTRY
{
  char bBannerType;
  char isMyGame;
  unsigned __int16 wWidth;
  unsigned __int16 wHeight;
  unsigned __int16 cbPath;
  unsigned __int16 *wszPath;
};

/* 5174 */
struct _BANNER_LIST_RESULT
{
  _FILETIME ftExpiry;
  unsigned int dwCultureId;
  unsigned __int16 wBannerCountTotal;
  unsigned __int16 wCount;
  _BANNER_LIST_ENTRY *bannerList;
};

/* 5175 */
struct _FB_SUBMIT_COMPAINT_REQUEST
{
  unsigned __int64 qwSenderID;
  unsigned __int64 qwTargetID;
  unsigned int dwTitleID;
  unsigned int dwType;
  unsigned __int64 qwContext;
};

/* 5176 */
struct _PASSPORT_SECRET_QUESTION
{
  unsigned __int16 wSecretQuestionLength;
  unsigned __int16 *szSecretQuestion;
};

/* 5177 */
struct _PASSPORT_GET_SECRET_QUESTION_RESPONSE
{
  unsigned __int16 wSecretQuestionsCount;
  _PASSPORT_SECRET_QUESTION *pSecretQuestions;
};

/* 5178 */
struct XGI_SESSIONSEARCHBYID_MSG
{
  unsigned int dwUserIndex;
  XNKID sessionID;
  unsigned int cbResultsBuffer;
  _XSESSION_SEARCHRESULT_HEADER *pSearchResults;
};

/* 5179 */
struct _XMSG_SUMMARY
{
  unsigned __int64 qwSenderID;
  unsigned __int64 qwMessageContext;
  _FILETIME ftSentTime;
  unsigned int dwMessageID;
  unsigned int dwMessageFlags;
  unsigned int dwSenderTitleID;
  unsigned __int16 wExpireMinutes;
  unsigned __int16 cbDetails;
  char bMsgType;
  char szSenderName[15];
  unsigned __int16 szSubject[20];
};

/* 5180 */
struct _XMSG_SUMMARY_REQUEST
{
  unsigned __int64 XuidUser;
  unsigned int dwMessageID;
  _XMSG_SUMMARY pMsgSummary[1];
};

/* 5181 */
struct _currencyfmtA
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  char *lpDecimalSep;
  char *lpThousandSep;
  unsigned int NegativeOrder;
  unsigned int PositiveOrder;
  char *lpCurrencySymbol;
};

/* 5182 */
struct _PHONE_INFO
{
  unsigned __int16 wPhonePrefixLength;
  unsigned __int16 *wszPhonePrefix;
  unsigned __int16 wPhoneNumberLength;
  unsigned __int16 *wszPhoneNumber;
  unsigned __int16 wPhoneExtensionLength;
  unsigned __int16 *wszPhoneExtension;
};

/* 5183 */
struct _CREDIT_CARD_INFO
{
  char bCardTypeId;
  unsigned __int16 wAccountHolderNameLength;
  unsigned __int16 *wszAccountHolderName;
  unsigned __int16 wAccountNumberLength;
  unsigned __int16 *wszAccountNumber;
  unsigned __int16 wCCVNumberLength;
  unsigned __int16 *wszCCVNumber;
  _FILETIME ftExpirationDate;
};

/* 5184 */
struct _DIRECT_DEBIT_INFO
{
  unsigned __int16 wAccountHolderNameLength;
  unsigned __int16 *wszAccountHolderName;
  unsigned __int16 wAccountNumberLength;
  unsigned __int16 *wszAccountNumber;
  unsigned __int16 wBankCodeLength;
  unsigned __int16 *wszBankCode;
  unsigned __int16 wBranchCodeLength;
  unsigned __int16 *wszBranchCode;
  unsigned __int16 wCheckDigitsLength;
  unsigned __int16 *wszCheckDigits;
};

/* 5185 */
struct _CREATE_LIVE_ACCOUNT_RESPONSE
{
  unsigned __int64 qwUserId;
  char abXboxKey[16];
  char abXenonKey[16];
};

/* 5186 */
struct _CREATE_LIVE_ACCOUNT_REQUEST
{
  unsigned __int64 qwMachineId;
  unsigned __int64 qwOfflineXuid;
  unsigned int dwTitleId;
  unsigned __int16 wFirstNameLength;
  unsigned __int16 *wszFirstName;
  unsigned __int16 wLastNameLength;
  unsigned __int16 *wszLastName;
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  char abSignedUserPassportPuid[28];
  char abSignedOwnerPassportPuid[28];
  unsigned __int64 qwOfferId;
  unsigned __int16 wBillingTokenLength;
  unsigned __int16 *wszBillingToken;
  _FILETIME ftBirthdate;
  unsigned __int16 wEmailLength;
  unsigned __int16 *wszEmail;
  unsigned __int16 wLanguageId;
  char bCountryId;
  unsigned int dwParentalControlGroupId;
  char bMsftOptIn;
  char bPartnerOptIn;
  _ADDRESS_INFO address;
  _PHONE_INFO phone;
  char bPaymentTypeId;
  _CREDIT_CARD_INFO creditCard;
  _DIRECT_DEBIT_INFO directDebit;
  unsigned __int16 wReservedBytesLength;
  char *pbReservedBytes;
  _CREATE_LIVE_ACCOUNT_RESPONSE *pResponse;
};

/* 5187 */
struct _BASIC_GENRE_INFO
{
  unsigned int dwGenreId;
  unsigned __int16 wGenreNameLength;
  unsigned __int16 *wszGenreName;
};

/* 5188 */
struct _ENUMERATE_GENRES_RESPONSE
{
  unsigned __int16 wGenresReturned;
  _BASIC_GENRE_INFO *pInfos;
  unsigned int dwTotalGenreCount;
};

/* 5189 */
struct _XONLINE_TEAM
{
  unsigned __int64 qwTeamID;
  unsigned int dwNumMembers;
  unsigned __int16 cbTeamName;
  unsigned __int16 cbTeamDescription;
  unsigned __int16 cbTeamMotto;
  unsigned __int16 cbTeamURL;
  unsigned __int16 cbTeamData;
  unsigned __int64 ftCreated;
  unsigned __int16 *wszTeamName;
  unsigned __int16 *wszTeamDescription;
  unsigned __int16 *wszTeamMotto;
  unsigned __int16 *wszTeamURL;
  char *pbTeamData;
};

/* 5190 */
struct _TEAM_ENUM_RESULTS
{
  unsigned int cTeams;
  _XONLINE_TEAM *rgsTeams;
};

/* 5191 */
struct _P_TEAM_LIST_TEAMS_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned int dwTeamCount;
  unsigned __int64 *rgqwTeamIDs;
  _TEAM_ENUM_RESULTS *pvResults;
};

/* 5192 */
struct LIVEBASE_CONTENTAVAILABLE_MSG
{
  unsigned int dwUserIndex;
  unsigned int dwTitleId;
  unsigned int dwContentCategories;
  _XOFFERING_CONTENTAVAILABLE_RESULT *pResults;
};

/* 5193 */
struct _XSTORAGE_ENDPOINT
{
  in_addr inaPrimaryAddress;
  unsigned __int16 wPrimaryPort;
  in_addr inaAlternateAddress;
  unsigned __int16 wAlternatePort;
};

/* 5194 */
struct _XRESOLVE_DOMAIN_STRING
{
  unsigned __int16 wNumStringChars;
  wchar_t *pwszString;
};

/* 5195 */
struct _XRESOLVE_NAME_RESPONSE
{
  _XSTORAGE_ENDPOINT StorageEndpoint;
  _FILETIME ftExpiration;
  _XRESOLVE_DOMAIN_STRING ResolveDomainStringRule;
};

/* 5196 */
struct _XONLINE_REQUEST_THROTTLE_SETTINGS
{
  unsigned int dwThrottleDelayMs;
  unsigned int dwThrottleFlags;
};

/* 5197 */
struct _OFFER_PRICE
{
  unsigned int dwPaymentType;
  char bTaxType;
  unsigned int dwWholePrice;
  unsigned int dwFractionalPrice;
  unsigned __int16 wPriceTextLength;
  unsigned __int16 *wszPriceText;
};

/* 5198 */
struct _BANNER_HOTLIST_ENTRY
{
  char bBannerType;
  char isMyGame;
  unsigned __int16 wWidth;
  unsigned __int16 wHeight;
  unsigned __int16 cbPath;
  unsigned __int16 *wszPath;
  unsigned int dwTitleId;
  unsigned __int16 cbTitleName;
  unsigned __int16 *wszTitleName;
  unsigned __int64 qwOfferId;
  unsigned __int16 cbOfferName;
  unsigned __int16 *wszOfferName;
  _OFFER_PRICE offerPrice;
  _FILETIME ftDateApproved;
};

/* 5199 */
struct _BANNER_HOTLIST_RESULT
{
  _FILETIME ftExpiry;
  unsigned int dwCultureId;
  unsigned __int16 wBannerCountTotal;
  unsigned __int16 wCount;
  _BANNER_HOTLIST_ENTRY *bannerList;
};

/* 5200 */
struct _BANNER_GET_HOTLIST_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned int dwLangId;
  char bLevel;
  unsigned int dwStartingIndex;
  unsigned int dwMaxResults;
  _BANNER_HOTLIST_RESULT *pResult;
};

/* 5201 */
#pragma pack(push, 8)
struct _XCONTENT_DATA_INTERNAL
{
  unsigned int DeviceID;
  unsigned int dwContentType;
  unsigned __int16 szDisplayName[128];
  char szFileName[42];
  unsigned __int64 xuid;
  unsigned int dwTitleId;
  unsigned __int64 ullContentSize;
};
#pragma pack(pop)

/* 5202 */
struct XCONTSIG_LIVE_SIGNATURE_INFO
{
  unsigned int SignatureFlags;
  char LiveSignature[100];
};

/* 5203 */
struct _DISK_GEOMETRY
{
  unsigned int Sectors;
  unsigned int BytesPerSector;
};

/* 5204 */
struct CREATE_OWNER_ACCT_RESPONSE
{
  unsigned __int64 qwUserID;
  char rgbKey[16];
  char szDomain[20];
  char szRealm[24];
};

/* 5205 */
struct _BASIC_CONTENT_INFO
{
  unsigned __int64 qwOfferID;
  unsigned __int64 qwPreviewOfferID;
  unsigned __int16 wOfferNameLength;
  unsigned __int16 *wszOfferName;
  unsigned int dwOfferType;
  char contentId[20];
  unsigned int dwLicenseMask;
  unsigned int dwTitleID;
  unsigned int dwTitleCategory;
  unsigned __int16 wTitleNameLength;
  unsigned __int16 *wszTitleName;
  char bTierRequired;
  unsigned __int16 wGameRating;
  unsigned __int16 wResponseFlags;
  unsigned int dwPackageSize;
  unsigned int dwInstallSize;
  unsigned int dwSellTextLength;
  unsigned __int16 *wszSellText;
  unsigned int dwAssetID;
  unsigned int dwPurchaseQuantity;
  char bPricesLength;
  _OFFER_PRICE *pPrices;
};

/* 5206 */
struct _CONTENT_DETAILS_RESPONSE
{
  unsigned __int16 wOffersTotal;
  _BASIC_CONTENT_INFO *pInfos;
};

/* 5207 */
struct _CONTENT_DETAILS_REQUEST
{
  unsigned __int64 qwUserId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned __int16 cOfferIDs;
  unsigned __int64 *pOfferIDs;
  unsigned int dwPaymentType;
  char bTierRequired;
  char bRatingSystem;
  _CONTENT_DETAILS_RESPONSE *pResults;
};

/* 5208 */
struct _XSHOWQUICKCHATUI_PARAMS
{
  unsigned int dwUserIndex;
};

/* 5209 */
struct _P_TEAM_REMOVE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned __int64 qwTeamID;
  unsigned __int64 qwMemberID;
};

/* 5210 */
struct XECRYPT_DES_STATE
{
  unsigned int keytab[16][2];
};

/* 5211 */
struct XECRYPT_DES3_STATE
{
  XECRYPT_DES_STATE aDesState[3];
};

/* 5212 */
struct _XMSG_DETAILS_BLOB
{
  char rgbDetailsBlob[4096];
};

/* 5213 */
struct _XMSG_DETAILS_GET_SUMMARY
{
  _XMSG_DETAILS_BLOB pDetails[1];
  _XMSG_SUMMARY pMsgSummary[1];
  unsigned int pcProperties[1];
  unsigned __int64 pqwAttachmentsSize[1];
};

/* 5214 */
struct _STRING_WITH_HRESULT
{
  unsigned int dwStringId;
  HRESULT hr;
  unsigned int cch;
  unsigned __int16 *pwsz;
};

/* 5215 */
struct XGI_READSTRINGS_MSG
{
  unsigned int dwTitleId;
  unsigned int dwUserIndex;
  unsigned int dwNumStrings;
  _STRING_WITH_HRESULT *pStrings;
  unsigned int cchStringBuffer;
  unsigned __int16 *pwszStringBuffer;
};

/* 5216 */
struct _DVD_AP25_CHALLENGE_SET_HEADER
{
  char MediaID[16];
  unsigned int Index;
  unsigned __int16 Flags;
  char CountOfEntries;
  char Reserved[9];
};

/* 5217 */
struct _PAYMENT_INSTRUMENT_INFO
{
  unsigned __int16 wPaymentInstrumentIdLength;
  unsigned __int16 *wszPaymentInstrumentId;
  char bPaymentTypeId;
  _ADDRESS_INFO address;
  _PHONE_INFO phone;
  _CREDIT_CARD_INFO creditCard;
  _DIRECT_DEBIT_INFO directDebit;
};

/* 5218 */
struct _GET_PAYMENT_INSTRUMENTS_RESPONSE
{
  unsigned __int16 wCount;
  _PAYMENT_INSTRUMENT_INFO *pPaymentInstruments;
};

/* 5219 */
struct _P_FIND_USER_REPLY_MSG
{
  unsigned __int64 qwFoundID;
  char szGamerTag[16];
};

/* 5220 */
struct _P_FIND_USER_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwFindID;
  char szSenderName[16];
  _P_FIND_USER_REPLY_MSG *pResults;
};

/* 5221 */
struct ID3DXBufferVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXBuffer *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXBuffer *);
  unsigned int (__cdecl *Release)(ID3DXBuffer *);
  void *(__cdecl *GetBufferPointer)(ID3DXBuffer *);
  unsigned int (__cdecl *GetBufferSize)(ID3DXBuffer *);
};

/* 5222 */
struct _XMATCH_SEARCH
{
  unsigned int dwMessageLength;
  unsigned int dwTitleID;
  unsigned int dwProcedureIndex;
  XNADDR ClientAddress;
  unsigned __int16 wNumUsers;
  unsigned __int16 wFlags;
  unsigned int dwNumParameters;
};

/* 5223 */
struct _XSTORAGE_ACCESS_TOKEN
{
  unsigned __int16 wOperation;
  unsigned __int16 wAccessTokenVersion;
  unsigned int dwServiceId;
  unsigned int dwFlags;
  unsigned __int64 qwUserId;
  unsigned __int64 qwXboxId;
};

/* 5224 */
struct _XSTORAGE_PATH_STRING
{
  unsigned __int16 wNumPathChars;
  unsigned __int16 *pwszPath;
};

/* 5225 */
struct _XSTORAGE_ACCESS_TOKEN_READ
{
  _FILETIME ftTokenExpirationDate;
  unsigned __int16 wSignatureSize;
  char *prgbSignature;
};

/* 5226 */
struct _XSTORAGE_DOWNLOAD_RESPONSE
{
  unsigned int dwTitleId;
  unsigned int dwTitleVersion;
  unsigned __int64 qwOwnerId;
  char bCountryId;
  unsigned __int64 qwXboxId;
  char bCompressionType;
  unsigned int dwContentType;
  char rgbLiveSignature[100];
  unsigned int dwInstallSize;
  _FILETIME ftCreated;
  unsigned __int16 wAttributesSize;
  unsigned int dwPackageSize;
  char *prgbAttributes;
};

/* 5227 */
struct _XSTORAGE_DOWNLOAD_REQUEST
{
  _XSTORAGE_ACCESS_TOKEN pStorageAccessToken[1];
  _XSTORAGE_PATH_STRING pStoragePathString[1];
  _XSTORAGE_ACCESS_TOKEN_READ pStorageAccessTokenRead[1];
  unsigned int dwTitleId;
  unsigned int dwTitleVersion;
  char bCountryId;
  unsigned int dwRangeStart;
  unsigned int dwRangeEnd;
  _FILETIME pftLastModified[1];
  _XSTORAGE_DOWNLOAD_RESPONSE *pResponse;
};

/* 5228 */
struct _XINPUT_POLLING_PARAMETERS
{
  char _bf0;
  char bInputInterval;
  char bOutputInterval;
  char ReservedMBZ2;
};

/* 5229 */
struct _CDROM_SEEK_AUDIO_MSF
{
  char M;
  char S;
  char F;
};

/* 5230 */
struct _XFRIENDS_REQUEST_BY_NAME_PARAMS
{
  unsigned __int64 XuidFromUser;
  unsigned __int64 qwBuddyID;
  unsigned int dwUserNameSize;
  char *szUserName;
  void *hMsg;
};

/* 5231 */
struct _ACCOUNT_VERIFY_BILLING_INFO_RESPONSE
{
  unsigned __int64 qwUserPuid;
  unsigned __int16 wFirstNameLength;
  unsigned __int16 *wszFirstName;
  unsigned __int16 wLastNameLength;
  unsigned __int16 *wszLastName;
  _FILETIME ftBirthdate;
  unsigned __int16 wEmailLength;
  unsigned __int16 *wszEmail;
  _ADDRESS_INFO addressInfo;
  _PHONE_INFO phoneInfo;
  unsigned __int16 wLanguageId;
  char bCountryId;
  char bMsftOptIn;
  char bParterOptIn;
};

/* 5232 */
struct _ACCOUNT_VERIFY_BILLING_INFO_REQUEST
{
  unsigned __int64 qwMachineId;
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  _PHONE_INFO phone;
  unsigned __int16 wPostalCodeLength;
  unsigned __int16 *wszPostalCode;
  unsigned __int16 wAccountHolderNameLength;
  unsigned __int16 *wszAccountHolderName;
  unsigned __int16 wAccountNumberLength;
  unsigned __int16 *wszAccountNumber;
  _ACCOUNT_VERIFY_BILLING_INFO_RESPONSE *pResponse;
};

/* 5233 */
struct _XONLINE_QUERY_ATTRIBUTE_BLOB
{
  unsigned int Length;
  char *pbValue;
};

/* 5234 */
struct _XPROFILE_TITLE
{
  unsigned int dwTitleId;
  unsigned __int16 cbTitleName;
  unsigned __int16 *pszTitleName;
  _FILETIME ftLastPlayed;
  unsigned int dwCredEarned;
  unsigned __int16 wAchievementsEarned;
  unsigned __int16 wAchievementsPossible;
  unsigned int dwCredPossible;
  unsigned int dwSequence;
  unsigned int dwMinutesPlayedOnline;
};

/* 5235 */
struct _XPROFILE_SYNC_TITLES_RESULT
{
  _FILETIME ftVersion;
  unsigned __int16 wTotalTitles;
  unsigned __int16 wNumTitles;
  _XPROFILE_TITLE *pTitles;
};

/* 5236 */
struct _XPROFILE_SYNC_TITLES_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int16 wLocaleId;
  unsigned __int16 wStartingIndex;
  _FILETIME ftLastSync;
  unsigned __int16 wNumTitles;
  _XPROFILE_TITLE *pTitles;
  _XPROFILE_SYNC_TITLES_RESULT *pResults;
};

/* 5237 */
struct _CONTENT_AVAILABLE_RESPONSE
{
  char bNewOffersLength;
  unsigned int *pdwNewOffers;
  char bTotalOffersLength;
  unsigned int *pdwTotalOffers;
};

/* 5238 */
struct _P_QUERY_AFFILIATES_REPLY_DATA_MSG
{
  unsigned __int64 qwAffiliateID;
  unsigned int dwListFlags;
  unsigned int dwTitleID;
  unsigned __int64 qwSessionID;
  unsigned int mtDateUpdated;
  char szGamerTag[16];
};

/* 5239 */
struct _P_QUERY_AFFILIATES_REPLY_MSG
{
  HRESULT hr;
  unsigned int cdwResults;
  _P_QUERY_AFFILIATES_REPLY_DATA_MSG *rgResults;
};

/* 5240 */
struct _P_QUERY_AFFILIATES_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwListFlags;
  unsigned int cdwLimit;
  unsigned int dwOnlineTitleID;
  _P_QUERY_AFFILIATES_REPLY_MSG *pReply;
};

/* 5241 */
struct _XPROFILE_ACHIEVEMENT
{
  unsigned int dwAchievementId;
  _FILETIME ftAchieved;
  unsigned int dwSequence;
  unsigned int dwFlags;
  char bType;
  unsigned int dwCred;
  unsigned int dwImageId;
  char cbTitleLen;
  unsigned __int16 *pszTitle;
  char cbDescriptionLen;
  unsigned __int16 *pszDescription;
  char cbHowToLen;
  unsigned __int16 *pszHowTo;
  char bNextIdsLen;
  unsigned int *pdwNextIds;
  char bReplaceIdsLen;
  unsigned int *pdwReplaceIds;
};

/* 5242 */
struct _XPROFILE_ENUM_ACHIEVEMENTS_RESULT
{
  unsigned __int16 wAchievementsCount;
  _XPROFILE_ACHIEVEMENT *pAchievements;
};

/* 5243 */
struct _XPROFILE_ENUM_ACHIEVEMENTS_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned __int64 qwForPuid;
  unsigned __int16 wLocaleId;
  unsigned __int16 wStartingIndex;
  unsigned __int16 wMaxAchievements;
  _XPROFILE_ENUM_ACHIEVEMENTS_RESULT *pResult;
};

/* 5244 */
struct $D36DC4A6F97BC7AD51E066F89FAF2AB2
{
  unsigned int Settable;
  unsigned int Tag;
};

/* 5245 */
struct $A1BAA8A612415EB7313C4A3F2614A99E
{
  unsigned int CommittedSize;
  void *FirstBlock;
};

/* 5246 */
union $1443FEAC7EE542362AC7D32AE125ED87
{
  $D36DC4A6F97BC7AD51E066F89FAF2AB2 s1;
  $A1BAA8A612415EB7313C4A3F2614A99E s2;
};

/* 5247 */
struct _RTL_HEAP_ENTRY
{
  unsigned int Size;
  unsigned __int16 Flags;
  unsigned __int16 AllocatorBackTraceIndex;
  $1443FEAC7EE542362AC7D32AE125ED87 u;
};

/* 5248 */
struct _FB_AGGREGATE_REVIEW
{
  unsigned __int64 qwTargetID;
  unsigned int dwCount;
  unsigned int dwType;
};

/* 5249 */
struct _FB_GET_AGG_REVIEWS_RESPONSE
{
  unsigned int hr;
  unsigned int cAggReviews;
  _FB_AGGREGATE_REVIEW *pAggReviews;
};

/* 5250 */
struct _XCONFIG_POWER_MODE
{
  char VIDDeltaFull;
  char VIDDeltaQuiet;
};

/* 5251 */
struct _XCONFIG_SECURED_SETTINGS
{
  unsigned int CheckSum;
  unsigned int Version;
  char OnlineNetworkID[4];
  char Reserved1[8];
  char Reserved2[12];
  char MACAddress[6];
  char Reserved3[2];
  unsigned int AVRegion;
  unsigned __int16 GameRegion;
  char Reserved4[6];
  unsigned int DVDRegion;
  unsigned int ResetKey;
  unsigned int SystemFlags;
  _XCONFIG_POWER_MODE PowerMode;
  char ReservedRegion[446];
};

/* 5252 */
struct _CONTENT_ENUMERATE_RESPONSE
{
  unsigned __int16 wOffersReturned;
  _BASIC_CONTENT_INFO *pInfos;
  unsigned int dwOffersTotal;
};

/* 5253 */
union _XMSG_PROPERTY_DATA
{
  unsigned __int16 wPropOffset;
  unsigned __int16 wData;
  char bData;
};

/* 5254 */
struct _SUB_Q_HEADER
{
  char Reserved;
  char AudioStatus;
  char DataLength[2];
};

/* 5255 */
struct _DMGD
{
  unsigned int Size;
  unsigned int *pdwProfileFlags;
  unsigned int *pdwLastProfileResult;
  void *pfnStartProfiling;
  void *pfnStopProfiling;
  volatile unsigned int *pdwOpcode;
  unsigned int *FrameCounter;
  unsigned int *FrameTicks;
};

/* 5256 */
struct ID3DXFileSaveDataVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXFileSaveData *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXFileSaveData *);
  unsigned int (__cdecl *Release)(ID3DXFileSaveData *);
  HRESULT (__cdecl *GetSave)(ID3DXFileSaveData *, ID3DXFileSaveObject **);
  HRESULT (__cdecl *GetName)(ID3DXFileSaveData *, char *, unsigned int *);
  HRESULT (__cdecl *GetId)(ID3DXFileSaveData *, _GUID *);
  HRESULT (__cdecl *GetType)(ID3DXFileSaveData *, _GUID *);
  HRESULT (__cdecl *AddDataObject)(ID3DXFileSaveData *, _GUID *const , const char *, _GUID *, unsigned int, const void *, ID3DXFileSaveData **);
  HRESULT (__cdecl *AddDataReference)(ID3DXFileSaveData *, const char *, _GUID *);
};

/* 5257 */
struct _P_ALIVE_2_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int16 cbAcctName;
  XNADDR xnaddr;
  XNKID xnkid;
  XNKEY xnkey;
  unsigned int dwBuddyListVersion;
  unsigned int dwBlockListVersion;
  unsigned __int16 wMajorVersion;
  unsigned __int16 wMinorVersion;
  unsigned __int16 wBuildNumber;
  unsigned __int16 wQFENumber;
  unsigned int dwTitleID;
  unsigned int dwTitleVersion;
  unsigned int dwTitleRegion;
  unsigned __int16 ipportI;
  in_addr ipaI;
  unsigned __int64 liNonce;
  unsigned __int64 liTimeInit;
};

/* 5258 */
struct _XRESOLVE_NAME_REQUEST
{
  _XRESOLVE_DOMAIN_STRING pResolveString[1];
  _XRESOLVE_NAME_RESPONSE *pResponse;
};

/* 5259 */
struct _XCONFIG_TIMEZONE_DATE
{
  char Month;
  char Day;
  char DayOfWeek;
  char Hour;
};

/* 5260 */
#pragma pack(push, 4)
struct _XGAMEINFO
{
  unsigned int dwTitleId;
  unsigned __int16 wszTitleName[23];
};
#pragma pack(pop)

/* 5261 */
struct _XEX_SECURITY_INFO
{
  unsigned int Size;
  unsigned int ImageSize;
  _HV_IMAGE_INFO ImageInfo;
  unsigned int AllowedMediaTypes;
  unsigned int PageDescriptorCount;
};

/* 5262 */
struct _XCONTENT_FIND_DATA
{
  _WIN32_FIND_DATAA wfd;
  unsigned __int64 qwOfferingId;
  unsigned int dwFlags;
  char szContentDirectory[260];
  unsigned __int16 szDisplayName[128];
};

/* 5263 */
struct _cpinfoexA
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
  unsigned __int16 UnicodeDefaultChar;
  unsigned int CodePage;
  char CodePageName[260];
};

/* 5264 */
struct _XMSG_PROPERTY
{
  unsigned __int16 wPropTag;
  _XMSG_PROPERTY_DATA Data;
};

/* 5265 */
struct _XMSG_DETAILS
{
  unsigned __int16 wPropCount;
  unsigned __int16 cbData;
  _XMSG_PROPERTY *rgProperties;
  char *rgbData;
};

/* 5266 */
struct _FB_PLAYER_REVIEW
{
  unsigned __int64 qwSenderID;
  unsigned __int64 qwTargetID;
  unsigned int dwTitleID;
  unsigned int dwType;
  unsigned __int64 qwContext;
  unsigned __int64 ftSubmitted;
};

/* 5267 */
struct _DMDRIVE
{
  char Drive[32];
  char *Path;
};

/* 5268 */
struct _XVIRTUALKBDUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int cchResultText;
  unsigned int dwFlags;
  const unsigned __int16 *pDefaultText;
  const unsigned __int16 *pTitleText;
  const unsigned __int16 *pDescriptionText;
  unsigned __int16 *pResultText;
  _XOVERLAPPED *pOverlapped;
};

/* 5269 */
struct _XWMDRM_CERTIFICATE_PUBLIC_KEY
{
  char abCert[40];
};

/* 5270 */
struct _XWMDRM_CERTIFICATE_BLOCK
{
  unsigned __int16 wBlockSize;
  char *pbBlock;
};

/* 5271 */
struct _XWMDRM_CREATE_CERTIFICATE_REPLY
{
  unsigned __int16 wBlockCount;
  _XWMDRM_CERTIFICATE_BLOCK *pBlocks;
};

/* 5272 */
struct _XWMDRM_CREATE_CERTIFICATE_REQUEST
{
  unsigned int dwFlags;
  _XWMDRM_CERTIFICATE_PUBLIC_KEY pPubKey[1];
  _XWMDRM_CREATE_CERTIFICATE_REPLY *pResponse;
};

/* 5273 */
struct _P_PRESENCE_ITEM
{
  unsigned __int64 qwBuddyID;
  unsigned int dwTitleID;
  unsigned int dwState;
  XNKID MatchSessionID;
  unsigned __int16 cbNickname;
  unsigned __int16 cbTitleStuff;
  char *rgbNickName;
  char *rgbTitleStuff;
};

/* 5274 */
#pragma pack(push, 8)
struct _XUSER_PLAYERLIST_ITEM
{
  unsigned __int64 xuidUser;
  unsigned int dwFlags;
  unsigned int dwTitleID;
  unsigned int dwRating;
  char szGamertag[16];
};
#pragma pack(pop)

/* 5275 */
struct _OFFER_PURCHASE_GAMERTAG_RESPONSE
{
  char bNewKeyLength;
  char *pbNewKey;
};

/* 5276 */
struct _DMTD
{
  unsigned int Reserved;
  void *WinSockData;
  _EXCEPTION_RECORD *ExceptionRecord;
  _CONTEXT *ExceptionContext;
  unsigned int DebugFlags;
  void *FuncCallData;
  unsigned int UserData;
  _KEVENT *DebugEvent;
  char *ThreadName;
  _KEVENT DebugEventData;
  unsigned int Frozen;
};

/* 5277 */
struct _currencyfmtW
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  unsigned __int16 *lpDecimalSep;
  unsigned __int16 *lpThousandSep;
  unsigned int NegativeOrder;
  unsigned int PositiveOrder;
  unsigned __int16 *lpCurrencySymbol;
};

/* 5278 */
struct _BASIC_SUBSCRIPTION_INFO
{
  unsigned __int64 qwOfferID;
  unsigned __int16 wOfferNameLength;
  unsigned __int16 *wszOfferName;
  unsigned int dwOfferType;
  char bRelationType;
  char bConvertMode;
  unsigned __int16 wInstanceIdLength;
  unsigned __int16 *wszInstanceId;
  unsigned int dwTitleID;
  unsigned int dwTitleCategories;
  unsigned __int16 wTitleNameLength;
  unsigned __int16 *wszTitleName;
  unsigned __int16 wGameRating;
  char bDuration;
  char bFrequency;
  char bTierProvided;
  char bTierRequired;
  unsigned int dwSellTextLength;
  unsigned __int16 *wszSellText;
  unsigned __int64 qwRelatedOfferID;
  unsigned __int16 wResponseFlags;
  char bPricesLength;
  _OFFER_PRICE *pPrices;
};

/* 5279 */
struct _SUBSCRIPTION_ENUMERATE_RESPONSE
{
  unsigned __int16 wOffersReturned;
  _BASIC_SUBSCRIPTION_INFO *pInfos;
  unsigned int dwOffersTotal;
};

/* 5280 */
struct _SUBSCRIPTION_ENUMERATE_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  char bUserTier;
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned __int16 wGameRating;
  unsigned int dwOfferType;
  unsigned int dwPaymentType;
  unsigned int dwTitleId;
  unsigned int dwTitleCategories;
  unsigned __int16 wRequestFlags;
  unsigned int dwStartingIndex;
  unsigned int dwMaxResults;
  _SUBSCRIPTION_ENUMERATE_RESPONSE *pResults;
};

/* 5281 */
struct _TESTXEXMESSAGE
{
  void *hxamapp;
  unsigned int dwMessage;
  unsigned int pParam1;
  unsigned int pParam2;
  HRESULT hr;
};

/* 5282 */
struct _XAMACCOUNTINFO
{
  unsigned int dwReserved;
  unsigned int dwLiveFlags;
  wchar_t szGamerTag[16];
  unsigned __int64 xuidOnline;
  unsigned int dwCachedUserFlags;
  unsigned int dwOnlineServiceNetworkID;
  char rgbPasscode[4];
  char szOnlineDomain[20];
  char szOnlineKerberosRealm[24];
  char rgbOnlineKey[16];
  char szUserPassportMembername[114];
  char rgcUserPassportPassword[32];
  char szOwnerPassportMembername[114];
};

/* 5283 */
struct _PROFILEENUMRESULT
{
  unsigned __int64 xuidOffline;
  _XAMACCOUNTINFO xai;
  unsigned int DeviceID;
};

/* 5284 */
struct _BASE_MSG_HEADER
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
};

/* 5285 */
struct _Q_DEQUEUE_MSG
{
  _BASE_MSG_HEADER MsgHeader;
  unsigned __int64 qwUserID;
  unsigned __int16 wQType;
  unsigned int dwStartItemID;
  unsigned __int16 wMaxItems;
  unsigned int dwMaxTotalItemDataSize;
};

/* 5286 */
#pragma pack(push, 4)
struct _DMXAPI
{
  char XapiStarted;
  unsigned int LastErrorTlsOff;
  unsigned int CurrentFiberTlsOff;
};
#pragma pack(pop)

/* 5287 */
struct _XUSER_ONLINE_PROFILE_SETTING
{
  unsigned int source;
  unsigned __int64 qwUserId;
  unsigned int dwSettingId;
  unsigned __int16 cbSize;
  char *pbValue;
};

/* 5288 */
struct _XPROFILE_SETTING_READ_RESULT
{
  unsigned __int16 wSettingsLen;
  _XUSER_ONLINE_PROFILE_SETTING *pSettings;
};

/* 5289 */
struct _XPROFILE_SETTING_READ_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned __int16 wForUserIdsLen;
  unsigned __int64 *pqwUserIds;
  unsigned __int16 wSettingIdsLen;
  unsigned int *pdwSettingIds;
  _XPROFILE_SETTING_READ_RESULT *pResults;
};

/* 5290 */
struct _XCHALRESP_STATS_NODE
{
  unsigned __int16 wChalId;
  unsigned __int16 wChalVer;
  unsigned int dwReceived;
  unsigned int dwValid;
  unsigned int dwSucceeded;
  unsigned int dwFailed;
  _XCHALRESP_STATS_NODE *pNext;
};

/* 5291 */
struct _UPDATE_PAYMENT_INSTRUMENT_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned __int16 wPaymentInstrumentIdLength;
  unsigned __int16 *wszPaymentInstrumentId;
  _ADDRESS_INFO addressInfo;
  _PHONE_INFO phoneInfo;
  _CREDIT_CARD_INFO creditCardInfo;
  _DIRECT_DEBIT_INFO directDebitInfo;
};

/* 5292 */
struct _XCONTENT_TRANSFERFLAGS
{
  char _bf0;
};

/* 5293 */
struct tagXUSER_TITLE_PLAYED
{
  unsigned int dwTitleId;
  unsigned int dwAchievementsPossible;
  unsigned int dwAchievementsEarned;
  unsigned int dwCredPossible;
  unsigned int dwCredEarned;
  unsigned int dwUnused1;
  unsigned int dwUnused2;
  unsigned int dwReserved;
  _FILETIME ftLastLoaded;
  unsigned __int16 wszTitleName[64];
};

/* 5294 */
struct _P_REPLY_BUDDY
{
  unsigned __int64 qwBuddyID;
  unsigned __int16 cbAcctName;
  char bStatus;
  char *szAcctName;
};

/* 5295 */
struct _P_REPLY_BLOCK
{
  unsigned __int64 qwBlockID;
};

/* 5296 */
struct _P_ALIVE_REPLY_MSG
{
  _BASE_MSG_HEADER MsgHeader;
  HRESULT hr;
  unsigned int dwBuddyListVersion;
  unsigned __int16 cBuddiesSent;
  unsigned int dwBlockListVersion;
  unsigned __int16 cBlocksSent;
  _P_REPLY_BUDDY *pBuddies;
  _P_REPLY_BLOCK *pBlocks;
};

/* 5297 */
struct _XEX_VITAL_STATS
{
  unsigned int CheckSum;
  unsigned int TimeDateStamp;
};

/* 5298 */
struct XECRYPT_RC4_STATE
{
  char S[256];
  char i;
  char j;
};

/* 5299 */
struct _XASYNCMESSAGE
{
  void *hxamapp;
  unsigned int dwMessage;
  _XOVERLAPPED *pOverlapped;
  void *pBuffer;
  void *UserEvent;
  void *Apc;
  void *hXamTask;
};

/* 5300 */
struct _XSHOWSIGNINUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int cPanes;
  unsigned int dwFlags;
  _XOVERLAPPED *pOverlapped;
};

/* 5301 */
struct _P_INVITATION_ANSWER_ITEM
{
  unsigned __int64 qwInviteeID;
  XNKID MatchSessionID;
  unsigned __int64 ftSent;
  unsigned __int16 wAnswer;
};

/* 5302 */
struct _GET_POINTS_BALANCE_RESPONSE
{
  unsigned int dwPointsBalance;
  char bDMPAccountStatus;
  char bResponseFlags;
};

/* 5303 */
struct _Q_MESSAGE_SUMMARY_2
{
  unsigned __int64 qwSenderID;
  unsigned __int64 qwSenderContext;
  unsigned int mtSentTime;
  unsigned int dwMessageID;
  unsigned int dwMessageFlags;
  unsigned int dwSenderTitleID;
  unsigned __int16 wExpireMinutes;
  unsigned __int16 cbDetails;
  char bMessageType;
  char szSenderName[15];
  wchar_t szSubject[20];
};

/* 5304 */
struct _XMSG_ENUM_RESULTS
{
  unsigned __int16 cMessages;
  _Q_MESSAGE_SUMMARY_2 *pMessages;
};

/* 5305 */
struct _Q_MESSAGE_SUMMARY_REPLY_MSG
{
  _Q_MESSAGE_SUMMARY_2 summary;
};

/* 5306 */
struct _Q_MESSAGE_SUMMARY_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwMessageID;
  _Q_MESSAGE_SUMMARY_REPLY_MSG *pResults;
};

/* 5307 */
struct _XSHOWDEVICESELECTORUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwContentType;
  unsigned int dwContentFlags;
  __declspec(align(8)) _ULARGE_INTEGER uliBytesRequested;
  unsigned int *pDeviceID;
  _XOVERLAPPED *pOverlapped;
};

/* 5308 */
struct _XMSG_GET_PROP_REQUEST
{
  void *hMsg;
  unsigned __int16 wPropTag;
  unsigned int dwPropValueBufferSize;
  char pbPropValue[1];
  unsigned int pcbPropValue[1];
  unsigned int pdwAttachmentFlags[1];
};

/* 5309 */
struct _XGAMERPROFILE_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwMode;
  unsigned __int64 xuidTarget;
  unsigned int dwTitleId;
  unsigned int dwAchievementId;
  _XCONTENT_DATA_INTERNAL xcdiDisplayFirst;
};

/* 5310 */
#pragma pack(push, 2)
struct _MP_BILLING_ACCOUNT_INFO
{
  int fEditMode;
  char bPaymentTypeId;
  unsigned __int16 wszPaymentInstrumentId[17];
  unsigned __int16 wszStreet1[128];
  unsigned __int16 wszStreet2[128];
  unsigned __int16 wszCity[64];
  unsigned __int16 wszDistrict[64];
  unsigned __int16 wszState[64];
  unsigned __int16 wszPostalCode[16];
  unsigned __int16 wszPhonePrefix[12];
  unsigned __int16 wszPhoneNumber[12];
  unsigned __int16 wszPhoneExtension[12];
  char bCardTypeId;
  unsigned __int16 wszCreditAccountHolderName[64];
  unsigned __int16 wszCreditAccountNumber[24];
  unsigned __int16 wszCreditCCVNumber[5];
  _FILETIME ftExpirationDate;
  unsigned __int16 wszDebitAccountHolderName[64];
  unsigned __int16 wszDebitAccountNumber[24];
  unsigned __int16 wszDebitBankCode[64];
  unsigned __int16 wszDebitBranchCode[64];
  unsigned __int16 wszDebitCheckDigits[64];
};
#pragma pack(pop)

/* 5311 */
struct _XUSER_PLAYER_ENUM
{
  unsigned int dwUserIndex;
  unsigned int dwStartingIndex;
  unsigned int cItem;
};

/* 5312 */
struct _XARB_REPORT_SUSPICIOUS_INFO
{
  char bMessageLength;
  char *pszMessage;
  char bNumRelatedMachineIDs;
  unsigned __int64 *pRelatedMachineIDs;
  char bNumRelatedUsers;
  unsigned __int64 *pRelatedUsers;
};

/* 5313 */
struct CREATE_OWNER_ACCT_REQUEST
{
  unsigned __int64 qwMachinePuid;
  unsigned int dwTitleId;
  _FILETIME ftBirthdate;
  char bMSSpam;
  char bPartnerSpam;
  char bCountryId;
  unsigned __int16 wLanguageId;
  char bCardTypeId;
  _FILETIME ftCardExpiration;
  char rgbData[3237];
};

/* 5314 */
struct IDirectXFileSaveObjectVtbl
{
  HRESULT (__cdecl *QueryInterface)(IDirectXFileSaveObject *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IDirectXFileSaveObject *);
  unsigned int (__cdecl *Release)(IDirectXFileSaveObject *);
  HRESULT (__cdecl *SaveTemplates)(IDirectXFileSaveObject *, unsigned int, _GUID **);
  HRESULT (__cdecl *CreateDataObject)(IDirectXFileSaveObject *, _GUID *const , const char *, _GUID *, unsigned int, void *, IDirectXFileData **);
  HRESULT (__cdecl *SaveData)(IDirectXFileSaveObject *, IDirectXFileData *);
};

/* 5315 */
struct _XCONTENT_DOWNLOADMEDIA_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwContentType;
  char *pbContentId;
  unsigned int cchTargetDirectory;
  char *pszTargetDirectory;
  unsigned int dwFlags;
};

/* 5316 */
struct _DMDVD
{
  _ULARGE_INTEGER Timestamp;
  unsigned int Parameters;
  unsigned int ResponseTime;
};

/* 5317 */
struct _XPROFILE_SETTING_SYNC_RESULT
{
  _FILETIME ftVersion;
  unsigned __int16 wTotalSettings;
  unsigned __int16 wSettingsLen;
  _XUSER_ONLINE_PROFILE_SETTING *pSettings;
};

/* 5318 */
struct _XPROFILE_SETTING_SYNC_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  _FILETIME ftVersion;
  unsigned __int16 wStartingIndex;
  unsigned __int16 wSettingsLen;
  _XUSER_ONLINE_PROFILE_SETTING *pSettings;
  _XPROFILE_SETTING_SYNC_RESULT *pResults;
};

/* 5319 */
struct _XSTORAGE_DOWNLOAD_TO_DIRECTORY_RESULTS_INTERNAL
{
  _XCONTENT_DATA ContentData;
};

/* 5320 */
struct _XGI_STATSREAD_MSG
{
  unsigned int dwTitleId;
  unsigned int dwNumXuids;
  const unsigned __int64 *pXuids;
  unsigned int dwNumStatsSpecs;
  _XUSER_STATS_SPEC *pSpecs;
  unsigned int cbResults;
  _XUSER_STATS_READ_RESULTS *pResults;
};

/* 5321 */
struct _POSTAL_CODE_MATCH
{
  unsigned __int16 wPostalCodeLength;
  unsigned __int16 *wszPostalCode;
  unsigned __int16 wStateLength;
  unsigned __int16 *wszState;
  unsigned __int16 wCityLength;
  unsigned __int16 *wszCity;
  unsigned __int16 wStreetLength;
  unsigned __int16 *wszStreet;
};

/* 5322 */
struct _GET_POSTAL_CODE_RESPONSE
{
  char bCount;
  _POSTAL_CODE_MATCH *pMatches;
};

/* 5323 */
struct _XGAME_FIND_DATA
{
  _WIN32_FIND_DATAA wfd;
  char szSaveGameDirectory[260];
  unsigned __int16 szSaveGameName[128];
};

/* 5324 */
struct _XBOX_LIBRARY_VERSION
{
  unsigned __int16 wMajorVersion;
  unsigned __int16 wMinorVersion;
  unsigned __int16 wBuildNumber;
  unsigned __int16 wQFENumber;
};

/* 5325 */
struct _P_ALIVE_2_MSG
{
  _BASE_MSG_HEADER MsgHeader;
  unsigned __int64 qwUserID;
  unsigned __int16 cbAcctName;
  XNADDR xnaddr;
  XNKID xnkid;
  XNKEY xnkey;
  unsigned int dwBuddyListVersion;
  unsigned int dwBlockListVersion;
  _XBOX_LIBRARY_VERSION clientVersion;
  unsigned int dwTitleID;
  unsigned int dwTitleVersion;
  unsigned int dwTitleRegion;
  unsigned __int16 ipportI;
  in_addr ipaI;
  unsigned __int64 liNonce;
  unsigned __int64 liTimeInit;
  char *szAcctName;
};

/* 5326 */
struct _XPRESENCE_ALIVE_REPLY
{
  _P_ALIVE_REPLY_MSG *pAliveReplies;
};

/* 5327 */
struct _XPRESENCE_SEND_ALIVE
{
  _P_ALIVE_2_MSG *pAlives;
  _XPRESENCE_ALIVE_REPLY *pAliveReply;
};

/* 5328 */
struct _XASSET_ENUMERATE_RESPONSE
{
  char signature[256];
  _FILETIME ftEnumerate;
  unsigned int dwResults;
  unsigned int dwResultsTotal;
  _XMARKETPLACE_ASSET *pResults;
};

/* 5329 */
struct _XASSET_ENUMERATE_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned int dwTitleId;
  unsigned int dwFlags;
  unsigned __int16 wStartingIndex;
  unsigned __int16 wMaxResults;
  _XASSET_ENUMERATE_RESPONSE *pResults;
};

/* 5330 */
struct _WMID
{
  unsigned __int16 wWmidLength;
  wchar_t *wszWmid;
  unsigned int dwVideoType;
};

/* 5331 */
struct _PURCHASE_VIDEO_RESPONSE
{
  unsigned __int16 wWmidCount;
  _WMID *pWmids;
};

/* 5332 */
struct _CDROM_PLAY_AUDIO_MSF
{
  char StartingM;
  char StartingS;
  char StartingF;
  char EndingM;
  char EndingS;
  char EndingF;
};

/* 5333 */
struct _XONLINE_ATTRIBUTE_BLOB
{
  unsigned __int16 Length;
  char *pbValue;
};

/* 5334 */
struct _P_PRESENCE_INITIALIZE_MSG
{
  unsigned int cPeerSubscriptions;
};

/* 5335 */
#pragma pack(push, 4)
struct _XMSG_PROPERTY_ATTACHMENT
{
  unsigned int cbAttach;
  unsigned int dwAttachFlags;
  unsigned int cbAttachUrl;
  char szAttachUrl;
};
#pragma pack(pop)

/* 5336 */
struct _XONLINE_QUERY_ATTRIBUTE_INTEGER
{
  unsigned int Length;
  unsigned __int64 qwValue;
};

/* 5337 */
struct _XONLINE_QUERY_ATTRIBUTE_STRING
{
  unsigned int Length;
  unsigned __int16 *lpValue;
};

/* 5338 */
union _XONLINE_QUERY_ATTRIBUTE_DATA
{
  _XONLINE_QUERY_ATTRIBUTE_INTEGER integer;
  _XONLINE_QUERY_ATTRIBUTE_STRING string;
  _XONLINE_QUERY_ATTRIBUTE_BLOB blob;
};

/* 5339 */
struct _XONLINE_QUERY_ATTRIBUTE
{
  unsigned int dwAttributeID;
  _XONLINE_QUERY_ATTRIBUTE_DATA info;
};

/* 5340 */
struct _QUERY_REMOVE_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned __int64 qwTeamId;
  unsigned int dwDatasetId;
  unsigned int dwProcIndex;
  unsigned int dwNumAttributes;
  _XONLINE_QUERY_ATTRIBUTE *pAttributes;
};

/* 5341 */
struct _ACCOUNT_SUGGESTED_GAMERTAG
{
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
};

/* 5342 */
struct _QUERY_FINDFROMIDS_RESULT
{
  unsigned int dwReturnedResults;
  unsigned int dwNumResultAttributes;
  _XONLINE_QUERY_ATTRIBUTE *pAttributes;
};

/* 5343 */
struct ID3DXBaseMeshVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXBaseMesh *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXBaseMesh *);
  unsigned int (__cdecl *Release)(ID3DXBaseMesh *);
  HRESULT (__cdecl *DrawSubset)(ID3DXBaseMesh *, unsigned int);
  unsigned int (__cdecl *GetNumFaces)(ID3DXBaseMesh *);
  unsigned int (__cdecl *GetNumVertices)(ID3DXBaseMesh *);
  unsigned int (__cdecl *GetFVF)(ID3DXBaseMesh *);
  HRESULT (__cdecl *GetDeclaration)(ID3DXBaseMesh *, _D3DVERTEXELEMENT9 *);
  unsigned int (__cdecl *GetNumBytesPerVertex)(ID3DXBaseMesh *);
  unsigned int (__cdecl *GetOptions)(ID3DXBaseMesh *);
  HRESULT (__cdecl *GetDevice)(ID3DXBaseMesh *, D3DDevice **);
  HRESULT (__cdecl *CloneMeshFVF)(ID3DXBaseMesh *, unsigned int, unsigned int, D3DDevice *, ID3DXMesh **);
  HRESULT (__cdecl *CloneMesh)(ID3DXBaseMesh *, unsigned int, _D3DVERTEXELEMENT9 *, D3DDevice *, ID3DXMesh **);
  HRESULT (__cdecl *GetVertexBuffer)(ID3DXBaseMesh *, D3DVertexBuffer **);
  HRESULT (__cdecl *GetIndexBuffer)(ID3DXBaseMesh *, D3DIndexBuffer **);
  HRESULT (__cdecl *LockVertexBuffer)(ID3DXBaseMesh *, unsigned int, void **);
  HRESULT (__cdecl *UnlockVertexBuffer)(ID3DXBaseMesh *);
  HRESULT (__cdecl *LockIndexBuffer)(ID3DXBaseMesh *, unsigned int, void **);
  HRESULT (__cdecl *UnlockIndexBuffer)(ID3DXBaseMesh *);
  HRESULT (__cdecl *GetAttributeTable)(ID3DXBaseMesh *, _D3DXATTRIBUTERANGE *, unsigned int *);
  HRESULT (__cdecl *ConvertPointRepsToAdjacency)(ID3DXBaseMesh *, const unsigned int *, unsigned int *);
  HRESULT (__cdecl *ConvertAdjacencyToPointReps)(ID3DXBaseMesh *, const unsigned int *, unsigned int *);
  HRESULT (__cdecl *GenerateAdjacency)(ID3DXBaseMesh *, float, unsigned int *);
  HRESULT (__cdecl *UpdateSemantics)(ID3DXBaseMesh *, _D3DVERTEXELEMENT9 *);
};

/* 5344 */
struct _XCONTSIG_SECTION
{
  unsigned int Offset;
  unsigned int Size;
  char Digest[20];
};

/* 5345 */
#pragma pack(push, 2)
struct _USER_PAYMENT_INFO
{
  unsigned __int16 wszFirstName[64];
  unsigned __int16 wszLastName[64];
  unsigned __int16 wszStreet1[128];
  unsigned __int16 wszStreet2[128];
  unsigned __int16 wszDistrict[128];
  unsigned __int16 wszCity[64];
  unsigned __int16 wszState[64];
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned __int16 wszPostalCode[16];
  unsigned __int16 wszPhonePrefix[12];
  unsigned __int16 wszPhoneNumber[12];
  unsigned __int16 wszPhoneExtension[12];
  char bPaymentTypeId;
  unsigned __int16 wszCardHolder[64];
  char bCardTypeId;
  unsigned __int16 wszCardNumber[24];
  _FILETIME ftCardExpiration;
  unsigned __int16 wszEmail[129];
  unsigned __int16 wszBankCode[64];
  unsigned __int16 wszBranchCode[64];
  unsigned __int16 wszCheckDigits[64];
  unsigned __int16 wszVoucher[26];
  char bMsftOptIn;
  char bPartnerOptIn;
  unsigned __int64 qwOfferId;
  _FILETIME ftBirthdate;
};
#pragma pack(pop)

/* 5346 */
struct _SUB_Q_TRACK_ISRC
{
  _SUB_Q_HEADER Header;
  char FormatCode;
  char Reserved0;
  char Track;
  char Reserved1;
  char _bf8;
  char TrackIsrc[15];
};

/* 5347 */
struct XECRYPT_RSA
{
  unsigned int cqw;
  unsigned int dwPubExp;
  unsigned __int64 qwReserved;
};

/* 5348 */
struct XECRYPT_RSAPUB_2048
{
  XECRYPT_RSA Rsa;
  unsigned __int64 aqwM[32];
};

/* 5349 */
struct __declspec(align(8)) _XEIKA_CERT_OVERLAY_ELEMENTS
{
  XECRYPT_RSAPUB_2048 XeikaPublicKey;
  char OverlaySignature[4];
  unsigned __int16 OverlayVersion;
  char ODDDataVersion;
  char ODDDrivePhaseLevel;
  char ODDQueryData[36];
};

/* 5350 */
struct _XEIKA_CERT_OVERLAY
{
  _XEIKA_CERT_OVERLAY_ELEMENTS elements;
  char filler[4680];
};

/* 5351 */
struct _XMSG_FLAGS_REQUEST
{
  unsigned __int64 XuidUser;
  unsigned int dwMessageID;
  unsigned int dwFlagsToSet;
  unsigned int dwFlagsToClear;
  _XOVERLAPPED pXOverlapped[1];
};

/* 5352 */
struct _XPERSISTENTMEMBUFFER
{
  void *pvBuffer;
  unsigned int dwBufferSize;
};

/* 5353 */
struct _XPERSISTENTMEMPARAMS
{
  unsigned int dwSize;
  _XPERSISTENTMEMBUFFER *pMemBuffers;
  unsigned int dwNumMemBuffers;
  unsigned int *pSockets;
  unsigned int dwNumSockets;
};

/* 5354 */
struct ID3DXCompressedAnimationSetVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXCompressedAnimationSet *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXCompressedAnimationSet *);
  unsigned int (__cdecl *Release)(ID3DXCompressedAnimationSet *);
  const char *(__cdecl *GetName)(ID3DXCompressedAnimationSet *);
  double (__cdecl *GetPeriod)(ID3DXCompressedAnimationSet *);
  double (__cdecl *GetPeriodicPosition)(ID3DXCompressedAnimationSet *, double);
  unsigned int (__cdecl *GetNumAnimations)(ID3DXCompressedAnimationSet *);
  HRESULT (__cdecl *GetAnimationNameByIndex)(ID3DXCompressedAnimationSet *, unsigned int, const char **);
  HRESULT (__cdecl *GetAnimationIndexByName)(ID3DXCompressedAnimationSet *, const char *, unsigned int *);
  HRESULT (__cdecl *GetSRT)(ID3DXCompressedAnimationSet *, double, unsigned int, _D3DVECTOR *, D3DXQUATERNION *, _D3DVECTOR *);
  HRESULT (__cdecl *GetCallback)(ID3DXCompressedAnimationSet *, double, unsigned int, double *, void **);
  _D3DXPLAYBACK_TYPE (__cdecl *GetPlaybackType)(ID3DXCompressedAnimationSet *);
  double (__cdecl *GetSourceTicksPerSecond)(ID3DXCompressedAnimationSet *);
  HRESULT (__cdecl *GetCompressedData)(ID3DXCompressedAnimationSet *, ID3DXBuffer **);
  unsigned int (__cdecl *GetNumCallbackKeys)(ID3DXCompressedAnimationSet *);
  HRESULT (__cdecl *GetCallbackKeys)(ID3DXCompressedAnimationSet *, _D3DXKEY_CALLBACK *);
};

/* 5355 */
struct _DM_ODD_READ_REQUEST_DATA
{
  unsigned int StartSector;
  unsigned int SectorCount;
};

/* 5356 */
union _XSTAT_PROC_DATA
{
  char bNull;
  char bData;
  __int16 sData;
  int nData;
  __int64 i64Data;
  double dblData;
  unsigned __int64 qwPuid;
};

/* 5357 */
struct _XONLINE_STATS_COLUMN
{
  unsigned __int16 wColumnId;
  char bType;
  _XSTAT_PROC_DATA Value;
};

/* 5358 */
struct _XONLINE_STATS_ROW
{
  unsigned __int64 xuid;
  unsigned int dwRank;
  __int64 i64Rating;
  unsigned int cbGamerTag;
  char *pszGamerTag;
  unsigned int dwNumColumns;
  _XONLINE_STATS_COLUMN *pColumns;
};

/* 5359 */
struct _XONLINE_STATS_VIEW
{
  unsigned __int64 qwViewId;
  unsigned int dwViewSize;
  unsigned int dwRowCount;
  _XONLINE_STATS_ROW *pRows;
};

/* 5360 */
struct _XONLINE_STATS_READ_RESULTS
{
  unsigned int dwNumViews;
  _XONLINE_STATS_VIEW *pViews;
};

/* 5361 */
struct _Q_ENUM_MESSAGES_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  _XMSG_ENUM_RESULTS *pResults;
};

/* 5362 */
struct _XONLINE_QUERY_ATTRIBUTE_SPEC
{
  unsigned int dwType;
  unsigned int dwLength;
};

/* 5363 */
struct _QUERY_FINDFROMIDS_REQUEST
{
  unsigned int dwTitleId;
  unsigned int dwDatasetId;
  unsigned int dwProcIndex;
  unsigned int dwNumResultSpecs;
  unsigned int dwNumIds;
  _XONLINE_QUERY_ATTRIBUTE_SPEC *pSpecs;
  unsigned __int64 *pqwEntityIds;
  _QUERY_FINDFROMIDS_RESULT *pResults;
};

/* 5364 */
struct _XPROFILE_CLEAR_ACHIEVEMENTS_RESULT
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
};

/* 5365 */
struct _XPROFILE_CLEAR_ACHIEVEMENTS_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  _XPROFILE_CLEAR_ACHIEVEMENTS_RESULT *pResult;
};

/* 5366 */
struct _XONLINE_STATS_SPEC
{
  unsigned int dwViewId;
  unsigned int dwNumColumnIds;
  unsigned __int16 *pAttrId;
};

/* 5367 */
struct _P_REJECT_REQUEST_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwSenderID;
  unsigned __int64 qwBuddyID;
  int Block;
};

/* 5368 */
#pragma pack(push, 4)
struct _DM_SWAPDISC_START
{
  char DiscNum;
  char DiscsInSet;
  _XSWAPDISC_ERROR_TEXT *ErrorText;
  unsigned int TitleID;
  char MediaID[16];
};
#pragma pack(pop)

/* 5369 */
struct _WMDRM_CHALLENGE_BLOCK
{
  unsigned __int16 wChallengeBlockLength;
  char *pChallengeBlock;
};

/* 5370 */
struct _WMDRM_LICENSE_BLOCK
{
  unsigned __int16 wLicenseBlockLength;
  char *pLicenseBlock;
};

/* 5371 */
struct _ACQUIRE_VIDEO_LICENSE_RESPONSE
{
  unsigned __int16 wLicenseBlockCount;
  _WMDRM_LICENSE_BLOCK *pLicenseBlocks;
  unsigned __int16 wContentUrlLength;
  unsigned __int16 *wszContentUrl;
};

/* 5372 */
struct _ACQUIRE_VIDEO_LICENSE_REQUEST
{
  unsigned __int64 UserXuid;
  char bCountryId;
  unsigned __int16 wLanguageId;
  char bTier;
  unsigned __int64 qwMachineId;
  _WMID pWmid[1];
  unsigned __int16 wChallengeBlockCount;
  _WMDRM_CHALLENGE_BLOCK *pChallengeBlocks;
  _ACQUIRE_VIDEO_LICENSE_RESPONSE *pResults;
};

/* 5373 */
struct _ACCOUNT_TROUBLESHOOT_RESPONSE
{
  int fNewTOS;
  int fNameChangeRequired;
  int fDowngraded;
  _FILETIME suspendedUntil;
  unsigned __int16 wTotalDaysSuspended;
  _FILETIME voiceBannedUntil;
  unsigned __int16 wTotalDaysVoiceBanned;
  unsigned int dwBillingHr;
  unsigned __int16 wReservedBytesLength;
  char *pbReservedBytes;
};

/* 5374 */
struct _ACCOUNT_TROUBLESHOOT_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned __int16 wReservedBytesLength;
  char *pbReservedBytes;
  _ACCOUNT_TROUBLESHOOT_RESPONSE *pResponse;
};

/* 5375 */
struct _TRACK_DATA
{
  char Reserved;
  char _bf1;
  char TrackNumber;
  char Reserved1;
  char Address[4];
};

/* 5376 */
struct _CDROM_TOC
{
  char Length[2];
  char FirstTrack;
  char LastTrack;
  _TRACK_DATA TrackData[100];
};

/* 5377 */
struct _PASSPORT_SESSION_TOKEN
{
  char abSessionToken[28];
};

/* 5378 */
struct _PASSPORT_CHANGE_PASSWORD_REQUEST
{
  _PASSPORT_SESSION_TOKEN pSessionToken[1];
  unsigned __int16 wPassportMemberNameLength;
  char *szPassportMemberName;
  unsigned __int16 wEncryptedPasswordLength;
  char *pbEncryptedPassword;
};

/* 5379 */
struct ID3DXMeshVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXMesh *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXMesh *);
  unsigned int (__cdecl *Release)(ID3DXMesh *);
  HRESULT (__cdecl *DrawSubset)(ID3DXMesh *, unsigned int);
  unsigned int (__cdecl *GetNumFaces)(ID3DXMesh *);
  unsigned int (__cdecl *GetNumVertices)(ID3DXMesh *);
  unsigned int (__cdecl *GetFVF)(ID3DXMesh *);
  HRESULT (__cdecl *GetDeclaration)(ID3DXMesh *, _D3DVERTEXELEMENT9 *);
  unsigned int (__cdecl *GetNumBytesPerVertex)(ID3DXMesh *);
  unsigned int (__cdecl *GetOptions)(ID3DXMesh *);
  HRESULT (__cdecl *GetDevice)(ID3DXMesh *, D3DDevice **);
  HRESULT (__cdecl *CloneMeshFVF)(ID3DXMesh *, unsigned int, unsigned int, D3DDevice *, ID3DXMesh **);
  HRESULT (__cdecl *CloneMesh)(ID3DXMesh *, unsigned int, _D3DVERTEXELEMENT9 *, D3DDevice *, ID3DXMesh **);
  HRESULT (__cdecl *GetVertexBuffer)(ID3DXMesh *, D3DVertexBuffer **);
  HRESULT (__cdecl *GetIndexBuffer)(ID3DXMesh *, D3DIndexBuffer **);
  HRESULT (__cdecl *LockVertexBuffer)(ID3DXMesh *, unsigned int, void **);
  HRESULT (__cdecl *UnlockVertexBuffer)(ID3DXMesh *);
  HRESULT (__cdecl *LockIndexBuffer)(ID3DXMesh *, unsigned int, void **);
  HRESULT (__cdecl *UnlockIndexBuffer)(ID3DXMesh *);
  HRESULT (__cdecl *GetAttributeTable)(ID3DXMesh *, _D3DXATTRIBUTERANGE *, unsigned int *);
  HRESULT (__cdecl *ConvertPointRepsToAdjacency)(ID3DXMesh *, const unsigned int *, unsigned int *);
  HRESULT (__cdecl *ConvertAdjacencyToPointReps)(ID3DXMesh *, const unsigned int *, unsigned int *);
  HRESULT (__cdecl *GenerateAdjacency)(ID3DXMesh *, float, unsigned int *);
  HRESULT (__cdecl *UpdateSemantics)(ID3DXMesh *, _D3DVERTEXELEMENT9 *);
  HRESULT (__cdecl *LockAttributeBuffer)(ID3DXMesh *, unsigned int, unsigned int **);
  HRESULT (__cdecl *UnlockAttributeBuffer)(ID3DXMesh *);
  HRESULT (__cdecl *Optimize)(ID3DXMesh *, unsigned int, const unsigned int *, unsigned int *, unsigned int *, ID3DXBuffer **, ID3DXMesh **);
  HRESULT (__cdecl *OptimizeInplace)(ID3DXMesh *, unsigned int, const unsigned int *, unsigned int *, unsigned int *, ID3DXBuffer **);
  HRESULT (__cdecl *SetAttributeTable)(ID3DXMesh *, _D3DXATTRIBUTERANGE *, unsigned int);
};

/* 5380 */
struct XECRYPT_DH
{
  unsigned int cqw;
  unsigned int dwReserved;
};

/* 5381 */
struct XECRYPT_DH_1024
{
  XECRYPT_DH Dh;
  unsigned __int64 aqwM[16];
  unsigned __int64 aqwB[16];
};

/* 5382 */
struct _P_PEER_PRESENCE_ITEM
{
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned int dwState;
  XNKID MatchSessionID;
  unsigned __int16 cbTitleStuff;
  char *rgbTitleStuff;
};

/* 5383 */
struct _XCONTENT_REFRESH_LICENSE_RESPONSE
{
  unsigned __int16 wContentHeaderLength;
  char *pbContentHeader;
};

/* 5384 */
struct _XEX_IMPORT_TABLE
{
  unsigned int TableSize;
  _HV_IMAGE_IMPORT_TABLE ImportTable;
};

/* 5385 */
#pragma pack(push, 8)
struct XGI_USERSETPROPERTY_MSG
{
  unsigned int dwUserIndex;
  unsigned __int64 xuid;
  unsigned int dwPropertyId;
  unsigned int cbValue;
  const void *pvValue;
};
#pragma pack(pop)

/* 5386 */
struct _CDROM_DISK_DATA
{
  unsigned int DiskData;
};

/* 5387 */
struct _XMSG_DETAILS_INTERNAL
{
  unsigned __int16 wPropCount;
  unsigned __int16 cbData;
};

/* 5388 */
struct XGI_RECOVERTITLE_MSG
{
  unsigned int dwUserIndex;
  tagXUSER_TITLE_PLAYED *pTitleToRecover;
};

/* 5389 */
struct _XSTAT_PROC_PARAM
{
  char bType;
  _XSTAT_PROC_DATA Value;
};

/* 5390 */
struct _XSTAT_PROC
{
  unsigned __int16 wProcId;
  unsigned __int16 wParamCount;
  _XSTAT_PROC_PARAM *pParams;
};

/* 5391 */
struct _XSTATS_POST_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int16 wNumProcs;
  _XSTAT_PROC *pProcs;
};

/* 5392 */
struct _IMAGE_XEX_DIRECTORY_ENTRY
{
  unsigned int Key;
  unsigned int Value;
};

/* 5393 */
struct _PARTITION_INFORMATION
{
  _LARGE_INTEGER StartingOffset;
  _LARGE_INTEGER PartitionLength;
};

/* 5394 */
struct _DVD_AP25_CHALLENGE_ENTRY
{
  unsigned int SourceSector;
  unsigned int TargetSector;
  unsigned __int16 ReferenceAngle;
  char Reserved[6];
};

/* 5395 */
struct _XONLINE_ATTRIBUTE_STRING
{
  unsigned __int16 Length;
  unsigned __int16 *lpValue;
};

/* 5396 */
union _XONLINE_ATTRIBUTE_DATA
{
  unsigned __int64 integer;
  _XONLINE_ATTRIBUTE_STRING string;
  _XONLINE_ATTRIBUTE_BLOB blob;
};

/* 5397 */
struct _XONLINE_ATTRIBUTE
{
  unsigned int dwAttributeID;
  _XONLINE_ATTRIBUTE_DATA info;
};

/* 5398 */
struct _XONLINE_MATCH_SPLITRESULT
{
  unsigned int dwReserved;
  XNKID SessionID;
  XNADDR HostAddress;
  XNKEY KeyExchangeKey;
  unsigned int dwPublicOpen;
  unsigned int dwPrivateOpen;
  unsigned int dwPublicFilled;
  unsigned int dwPrivateFilled;
  unsigned int dwNumAttributes;
  unsigned int *pAttributeOffsets;
  _XONLINE_ATTRIBUTE *pAttributes;
};

/* 5399 */
struct _XMATCH_SESSION_SPLIT_REQUEST
{
  unsigned int dwMessageLength;
  XNKID SessionID;
  XNKID OldSessionID;
  unsigned int dwTitleID;
  XNADDR HostAddress;
  unsigned int dwNumAttributes;
  unsigned int *pAttributeOffsets;
  _XONLINE_ATTRIBUTE *pAttributes;
  _XONLINE_MATCH_SPLITRESULT *pSplitResult;
};

/* 5400 */
struct _RTL_HEAP_USAGE_ENTRY
{
  _RTL_HEAP_USAGE_ENTRY *Next;
  void *Address;
  unsigned int Size;
  unsigned __int16 AllocatorBackTraceIndex;
  unsigned __int16 TagIndex;
};

/* 5401 */
struct _XNET_LOGON_SERVICE_INFO
{
  unsigned int dwServiceID;
  in_addr inaService;
  unsigned __int16 wServicePort;
  unsigned __int16 wFlags;
};

/* 5402 */
struct XPROFILE_ENUM_TITLES_RESULT
{
  unsigned __int16 wNumTitles;
  _XPROFILE_TITLE *pTitles;
};

/* 5403 */
struct _XPROFILE_ENUM_TITLES_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwForUserId;
  unsigned __int16 wLocaleId;
  unsigned __int16 wStartingIndex;
  unsigned __int16 wMaxTitles;
  XPROFILE_ENUM_TITLES_RESULT *pResults;
};

/* 5404 */
struct _P_IS_AFFILIATE_REPLY_MSG
{
  HRESULT hr;
  unsigned __int64 qwAffiliateID;
  unsigned int dwListFlags;
};

/* 5405 */
struct _XSTORAGE_DELETE_REQUEST
{
  _XSTORAGE_ACCESS_TOKEN pStorageAccessToken[1];
  _XSTORAGE_PATH_STRING pStoragePathString[1];
  _XSTORAGE_ACCESS_TOKEN_READ pStorageAccessTokenRead[1];
  unsigned int dwTitleId;
  unsigned int dwTitleVersion;
};

/* 5406 */
struct _PERSONALIZATION_PARAMS
{
  unsigned int dwUserIndex;
  HUDSCENE eHudType;
  _XCONTENT_DATA_INTERNAL cdiInitialSelection;
};

/* 5407 */
#pragma pack(push, 8)
struct XGI_READSTRING_MSG
{
  unsigned int dwTitleId;
  unsigned __int64 qwId;
  unsigned int dwUserIndex;
  unsigned __int16 *pwsz;
  unsigned int *pcch;
};
#pragma pack(pop)

/* 5408 */
struct _PRESENCE_SET_GAME_SESSION
{
  unsigned __int64 UserXuid;
  XNKID sessionID;
};

/* 5409 */
struct _QUERY_SEARCH_RESULT
{
  unsigned int dwTotalResults;
  unsigned int dwReturnedResults;
  unsigned int dwNumResultAttributes;
  _XONLINE_QUERY_ATTRIBUTE *pAttributes;
};

/* 5410 */
struct _XSIGNATURE_CHECK_REVOCATION_RESPONSE
{
  unsigned int dwNumHrs;
  HRESULT *pHrs;
};

/* 5411 */
struct _FB_ENUM_REVIEWS_RESPONSE
{
  unsigned int hr;
  unsigned int cReviews;
  _FB_PLAYER_REVIEW *pReviews;
};

/* 5412 */
struct _FB_ENUM_SENT_REVIEWS_REQUEST
{
  unsigned __int64 qwSenderID;
  unsigned int dwPageID;
  unsigned int dwResultsPerPage;
  _FB_ENUM_REVIEWS_RESPONSE *pResults;
};

/* 5413 */
struct _XCREATEPROFILEUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwMode;
  unsigned __int64 xuid;
};

/* 5414 */
struct _XEX_DATA_DESCRIPTOR
{
  unsigned int Size;
  char DataDigest[20];
};

/* 5415 */
struct _XEX_COMPRESSED_DATA_DESCRIPTOR
{
  unsigned int WindowSize;
  _XEX_DATA_DESCRIPTOR FirstDescriptor;
};

/* 5416 */
struct _XMATCH_SESSION_DELETE
{
  unsigned int dwMessageLength;
  XNKID SessionID;
  unsigned int dwTitleID;
};

/* 5417 */
struct ID3DXEffectCompilerVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXEffectCompiler *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXEffectCompiler *);
  unsigned int (__cdecl *Release)(ID3DXEffectCompiler *);
  HRESULT (__cdecl *GetDesc)(ID3DXEffectCompiler *, _D3DXEFFECT_DESC *);
  HRESULT (__cdecl *GetParameterDesc)(ID3DXEffectCompiler *, unsigned int, _D3DXPARAMETER_DESC *);
  HRESULT (__cdecl *GetTechniqueDesc)(ID3DXEffectCompiler *, unsigned int, _D3DXTECHNIQUE_DESC *);
  HRESULT (__cdecl *GetPassDesc)(ID3DXEffectCompiler *, unsigned int, _D3DXPASS_DESC *);
  HRESULT (__cdecl *GetFunctionDesc)(ID3DXEffectCompiler *, unsigned int, _D3DXFUNCTION_DESC *);
  unsigned int (__cdecl *GetParameter)(ID3DXEffectCompiler *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetParameterByName)(ID3DXEffectCompiler *, unsigned int, const char *);
  unsigned int (__cdecl *GetParameterBySemantic)(ID3DXEffectCompiler *, unsigned int, const char *);
  unsigned int (__cdecl *GetParameterElement)(ID3DXEffectCompiler *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetTechnique)(ID3DXEffectCompiler *, unsigned int);
  unsigned int (__cdecl *GetTechniqueByName)(ID3DXEffectCompiler *, const char *);
  unsigned int (__cdecl *GetPass)(ID3DXEffectCompiler *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetPassByName)(ID3DXEffectCompiler *, unsigned int, const char *);
  unsigned int (__cdecl *GetFunction)(ID3DXEffectCompiler *, unsigned int);
  unsigned int (__cdecl *GetFunctionByName)(ID3DXEffectCompiler *, const char *);
  unsigned int (__cdecl *GetAnnotation)(ID3DXEffectCompiler *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetAnnotationByName)(ID3DXEffectCompiler *, unsigned int, const char *);
  HRESULT (__cdecl *SetValue)(ID3DXEffectCompiler *, unsigned int, const void *, unsigned int);
  HRESULT (__cdecl *GetValue)(ID3DXEffectCompiler *, unsigned int, void *, unsigned int);
  HRESULT (__cdecl *SetBool)(ID3DXEffectCompiler *, unsigned int, int);
  HRESULT (__cdecl *GetBool)(ID3DXEffectCompiler *, unsigned int, int *);
  HRESULT (__cdecl *SetBoolArray)(ID3DXEffectCompiler *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *GetBoolArray)(ID3DXEffectCompiler *, unsigned int, int *, unsigned int);
  HRESULT (__cdecl *SetInt)(ID3DXEffectCompiler *, unsigned int, int);
  HRESULT (__cdecl *GetInt)(ID3DXEffectCompiler *, unsigned int, int *);
  HRESULT (__cdecl *SetIntArray)(ID3DXEffectCompiler *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *GetIntArray)(ID3DXEffectCompiler *, unsigned int, int *, unsigned int);
  HRESULT (__cdecl *SetFloat)(ID3DXEffectCompiler *, unsigned int, float);
  HRESULT (__cdecl *GetFloat)(ID3DXEffectCompiler *, unsigned int, float *);
  HRESULT (__cdecl *SetFloatArray)(ID3DXEffectCompiler *, unsigned int, const float *, unsigned int);
  HRESULT (__cdecl *GetFloatArray)(ID3DXEffectCompiler *, unsigned int, float *, unsigned int);
  HRESULT (__cdecl *SetVector)(ID3DXEffectCompiler *, unsigned int, D3DXVECTOR4 *);
  HRESULT (__cdecl *GetVector)(ID3DXEffectCompiler *, unsigned int, D3DXVECTOR4 *);
  HRESULT (__cdecl *SetVectorArray)(ID3DXEffectCompiler *, unsigned int, D3DXVECTOR4 *, unsigned int);
  HRESULT (__cdecl *GetVectorArray)(ID3DXEffectCompiler *, unsigned int, D3DXVECTOR4 *, unsigned int);
  HRESULT (__cdecl *SetMatrix)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *GetMatrix)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *SetMatrixArray)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *GetMatrixArray)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetMatrixPointerArray)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *GetMatrixPointerArray)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *SetMatrixTranspose)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *GetMatrixTranspose)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *SetMatrixTransposeArray)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *GetMatrixTransposeArray)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetMatrixTransposePointerArray)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *GetMatrixTransposePointerArray)(ID3DXEffectCompiler *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *SetString)(ID3DXEffectCompiler *, unsigned int, const char *);
  HRESULT (__cdecl *GetString)(ID3DXEffectCompiler *, unsigned int, const char **);
  HRESULT (__cdecl *SetTexture)(ID3DXEffectCompiler *, unsigned int, D3DBaseTexture *);
  HRESULT (__cdecl *GetTexture)(ID3DXEffectCompiler *, unsigned int, D3DBaseTexture **);
  HRESULT (__cdecl *SetPixelShader)(ID3DXEffectCompiler *, unsigned int, D3DPixelShader *);
  HRESULT (__cdecl *GetPixelShader)(ID3DXEffectCompiler *, unsigned int, D3DPixelShader **);
  HRESULT (__cdecl *SetVertexShader)(ID3DXEffectCompiler *, unsigned int, D3DVertexShader *);
  HRESULT (__cdecl *GetVertexShader)(ID3DXEffectCompiler *, unsigned int, D3DVertexShader **);
  HRESULT (__cdecl *SetArrayRange)(ID3DXEffectCompiler *, unsigned int, unsigned int, unsigned int);
  HRESULT (__cdecl *SetLiteral)(ID3DXEffectCompiler *, unsigned int, int);
  HRESULT (__cdecl *GetLiteral)(ID3DXEffectCompiler *, unsigned int, int *);
  HRESULT (__cdecl *CompileEffect)(ID3DXEffectCompiler *, unsigned int, ID3DXBuffer **, ID3DXBuffer **);
  HRESULT (__cdecl *CompileShader)(ID3DXEffectCompiler *, unsigned int, const char *, unsigned int, ID3DXBuffer **, ID3DXBuffer **, ID3DXConstantTable **);
};

/* 5418 */
struct _XUSER_ESTIMATE_RANK_REQUEST
{
  unsigned int dwTitleID;
  unsigned int dwNumRequests;
  _XUSER_RANK_REQUEST *pRankRequests;
  _XUSER_ESTIMATE_RANK_RESULTS *pResults;
};

/* 5419 */
struct _P_DEAD_USER_MSG
{
  _BASE_MSG_HEADER MsgHeader;
  unsigned __int64 qwUserID;
};

/* 5420 */
struct _numberfmtW
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  unsigned __int16 *lpDecimalSep;
  unsigned __int16 *lpThousandSep;
  unsigned int NegativeOrder;
};

/* 5421 */
struct $AF915A2BAF664A3506658FA415D9F82C
{
  char _bf0;
};

/* 5422 */
struct $336B4771B666DDC59A0690FE930420C2
{
  $AF915A2BAF664A3506658FA415D9F82C Cpu;
  $AF915A2BAF664A3506658FA415D9F82C Gpu;
};

/* 5423 */
struct $2CF5F4EFDFAA1D878C2E2BE814FFC1BC
{
  unsigned __int16 Gain;
  unsigned __int16 Offset;
};

/* 5424 */
struct $9BF99D142F418397417F554BB192AC17
{
  $2CF5F4EFDFAA1D878C2E2BE814FFC1BC Cpu;
  $2CF5F4EFDFAA1D878C2E2BE814FFC1BC Gpu;
  $2CF5F4EFDFAA1D878C2E2BE814FFC1BC Edram;
  $2CF5F4EFDFAA1D878C2E2BE814FFC1BC Board;
};

/* 5425 */
union $87B67BBCD9E73F1A638E2AC1923A70AB
{
  unsigned __int16 TempCalData[8];
  $9BF99D142F418397417F554BB192AC17 Constant;
};

/* 5426 */
struct $1D3D608ABC8DA736BFBEBEA2FA57E8FE
{
  char Cpu;
  char Gpu;
  char Edram;
};

/* 5427 */
struct $C9712C1456F96C53500D3545F5522294
{
  $1D3D608ABC8DA736BFBEBEA2FA57E8FE SetPoint;
  $1D3D608ABC8DA736BFBEBEA2FA57E8FE Overload;
};

/* 5428 */
union $23CB3C813D0016ACBB3B1F54A3E360AC
{
  char AsUCHAR;
  $AF915A2BAF664A3506658FA415D9F82C AsFlags;
};

/* 5429 */
struct $CF50E4676BDE4450AF36FF1BF8BA6D8A
{
  $23CB3C813D0016ACBB3B1F54A3E360AC Flags;
  char GpuTarget;
  char MemoryTarget;
  char CheckSum;
};

/* 5430 */
struct $CBD37270090C99683C4E0C25AC11CF48
{
  char StructureVersion;
  char ConfigSource;
  char ClockSelect;
  $336B4771B666DDC59A0690FE930420C2 FanOverride;
  char pad1[1];
  char _bf6;
  char pad2[3];
  $87B67BBCD9E73F1A638E2AC1923A70AB Temperature;
  char AnaFuseValue;
  $C9712C1456F96C53500D3545F5522294 Thermal;
  char pad3[1];
  $CF50E4676BDE4450AF36FF1BF8BA6D8A Viper;
};

/* 5431 */
union $C6096E9146D4DC4B89D5199BF3E0BCCE
{
  char SMCConfig[256];
  $CBD37270090C99683C4E0C25AC11CF48 Fields;
};

/* 5432 */
struct _XCONFIG_STATIC_SETTINGS
{
  unsigned int CheckSum;
  unsigned int Version;
  char FirstPowerOnDate[5];
  char Reserved;
  $C6096E9146D4DC4B89D5199BF3E0BCCE SMCBlock;
};

/* 5433 */
struct _XVOICEMAILUI_RESULTS
{
  unsigned int dwResults;
  unsigned int cbRecordedBufferSize;
};

/* 5434 */
struct _VOLUME_CONTROL
{
  char PortVolume[4];
};

/* 5435 */
struct XGI_SESSIONSEARCHEX_MSG
{
  unsigned int dwProcedureIndex;
  unsigned int dwUserIndex;
  unsigned int dwNumResults;
  unsigned __int16 wNumProperties;
  unsigned __int16 wNumContexts;
  _XUSER_PROPERTY *pSearchProperties;
  _XUSER_CONTEXT *pSearchContexts;
  unsigned int cbResultsBuffer;
  _XSESSION_SEARCHRESULT_HEADER *pSearchResults;
  unsigned int dwNumUsers;
};

/* 5436 */
struct _XMSG_SET_PROP_REQUEST
{
  void *hMsg;
  unsigned __int16 wPropTag;
  unsigned int dwPropValueSize;
  char pbPropValue[1];
  unsigned int dwAttachmentFlags;
};

/* 5437 */
struct $AE891440D35CB99C987B329B07337DC1
{
  unsigned __int16 PublisherID;
  unsigned __int16 GameID;
};

/* 5438 */
union $11B9A860489F6F4DA1C2AD251BCC0E35
{
  $AE891440D35CB99C987B329B07337DC1 _s0;
  unsigned int TitleID;
};

/* 5439 */
struct _XEX_EXECUTION_ID
{
  unsigned int MediaID;
  unsigned int Version;
  unsigned int BaseVersion;
  $11B9A860489F6F4DA1C2AD251BCC0E35 ___u3;
  char Platform;
  char ExecutableType;
  char DiscNum;
  char DiscsInSet;
  unsigned int SaveGameID;
};

/* 5440 */
union $97D014836ABA89E0C74762BF460A30DD
{
  _XCONTENT_TRANSFERFLAGS Bits;
  char FlagsAsBYTE;
};

/* 5441 */
struct _XCONTENT_METADATA
{
  unsigned int ContentType;
  unsigned int Reserved1;
  _LARGE_INTEGER ContentSize;
  _XEX_EXECUTION_ID ExecutionId;
  char ConsoleId[5];
  unsigned __int64 Creator;
  char StfsVolumeDescriptor[36];
  unsigned int DataFiles;
  unsigned __int64 DataFilesSize;
  char Reserved2[84];
  char DeviceId[20];
  unsigned __int16 DisplayName[9][128];
  unsigned __int16 Description[9][128];
  unsigned __int16 Publisher[64];
  unsigned __int16 TitleName[64];
  $97D014836ABA89E0C74762BF460A30DD Flags;
  unsigned int ThumbnailSize;
  unsigned int TitleThumbnailSize;
  char Thumbnail[16384];
  char TitleThumbnail[16384];
};

/* 5442 */
struct _P_ACCEPT_REQUEST_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwSenderID;
  unsigned __int64 qwBuddyID;
};

/* 5443 */
struct tagSESSION_STRUCT
{
  void *pSessionTracker;
};

/* 5444 */
struct XGI_SESSIONCREATE_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  unsigned int dwFlags;
  unsigned int dwMaxPublicSlots;
  unsigned int dwMaxPrivateSlots;
  unsigned int dwUserIndex;
  _XSESSION_INFO *pSessionInfo;
  unsigned __int64 *pqwSessionNonce;
};

/* 5445 */
struct _XONLINE_STATS_ENUM_RESULTS
{
  unsigned __int16 wNumViews;
  _XONLINE_STATS_VIEW *pViews;
};

/* 5446 */
struct _XONLINE_STATS_ENUM_BY_RANK_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwRank;
  unsigned int dwPageSize;
  unsigned int dwNumSpecs;
  _XONLINE_STATS_SPEC *pSpecs;
  _XONLINE_STATS_ENUM_RESULTS *pResults;
};

/* 5447 */
struct ID3DXSPMeshVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXSPMesh *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXSPMesh *);
  unsigned int (__cdecl *Release)(ID3DXSPMesh *);
  unsigned int (__cdecl *GetNumFaces)(ID3DXSPMesh *);
  unsigned int (__cdecl *GetNumVertices)(ID3DXSPMesh *);
  unsigned int (__cdecl *GetFVF)(ID3DXSPMesh *);
  HRESULT (__cdecl *GetDeclaration)(ID3DXSPMesh *, _D3DVERTEXELEMENT9 *);
  unsigned int (__cdecl *GetOptions)(ID3DXSPMesh *);
  HRESULT (__cdecl *GetDevice)(ID3DXSPMesh *, D3DDevice **);
  HRESULT (__cdecl *CloneMeshFVF)(ID3DXSPMesh *, unsigned int, unsigned int, D3DDevice *, unsigned int *, unsigned int *, ID3DXMesh **);
  HRESULT (__cdecl *CloneMesh)(ID3DXSPMesh *, unsigned int, _D3DVERTEXELEMENT9 *, D3DDevice *, unsigned int *, unsigned int *, ID3DXMesh **);
  HRESULT (__cdecl *ClonePMeshFVF)(ID3DXSPMesh *, unsigned int, unsigned int, D3DDevice *, unsigned int *, float *, ID3DXPMesh **);
  HRESULT (__cdecl *ClonePMesh)(ID3DXSPMesh *, unsigned int, _D3DVERTEXELEMENT9 *, D3DDevice *, unsigned int *, float *, ID3DXPMesh **);
  HRESULT (__cdecl *ReduceFaces)(ID3DXSPMesh *, unsigned int);
  HRESULT (__cdecl *ReduceVertices)(ID3DXSPMesh *, unsigned int);
  unsigned int (__cdecl *GetMaxFaces)(ID3DXSPMesh *);
  unsigned int (__cdecl *GetMaxVertices)(ID3DXSPMesh *);
  HRESULT (__cdecl *GetVertexAttributeWeights)(ID3DXSPMesh *, _D3DXATTRIBUTEWEIGHTS *);
  HRESULT (__cdecl *GetVertexWeights)(ID3DXSPMesh *, float *);
};

/* 5448 */
struct _P_INVITE_2_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwSenderContext;
  unsigned int dwTitleID;
  unsigned int dwMessageFlags;
  unsigned __int16 cInvitees;
  unsigned __int16 cbDetails;
};

/* 5449 */
struct __declspec(align(8)) _BACKGROUND_DOWNLOAD_ITEM
{
  unsigned int dwContentType;
  unsigned int dwTitleId;
  unsigned __int64 xuid;
  char consoleId[5];
  char contentId[20];
  __declspec(align(8)) unsigned __int64 qwOfferID;
  unsigned __int16 wszOfferName[128];
  char szPath[260];
  __declspec(align(8)) _LARGE_INTEGER liInstallSize;
  unsigned int dwPercentCompleted;
};

/* 5450 */
struct _XMATCH_SEARCHRESULT
{
  unsigned int dwResultLength;
  XNKID SessionID;
  XNADDR HostAddress;
  XNKEY KeyExchangeKey;
  unsigned int dwPublicOpen;
  unsigned int dwPrivateOpen;
  unsigned int dwPublicFilled;
  unsigned int dwPrivateFilled;
  unsigned int dwNumAttributes;
};

/* 5451 */
struct _XUID_AND_FLAGS
{
  unsigned __int64 xuid;
  unsigned int dwUserFlags;
};

/* 5452 */
struct _XARB_REGISTRANT
{
  unsigned __int64 qwMachineID;
  char bTrustworthiness;
  char bNumUsers;
  _XUID_AND_FLAGS *rgUsers;
};

/* 5453 */
struct _XARB_REGISTER_REPLY
{
  unsigned __int16 wNumRegistrants;
  _XARB_REGISTRANT *rgRegistrants;
};

/* 5454 */
struct _XARB_REGISTER_REQUEST
{
  unsigned __int16 wProtocolVersion;
  unsigned __int16 wFlags;
  unsigned int dwTitleId;
  unsigned __int64 qwSessionId;
  unsigned __int64 qwSessionNonce;
  unsigned __int16 wMaxSessionSeconds;
  _XARB_REGISTER_REPLY *pReply;
};

/* 5455 */
struct _P_TEAM_JOIN_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned __int64 qwTeamID;
  unsigned int dwRecruitMsgID;
  char bAnswer;
};

/* 5456 */
struct _GET_USER_SUBSCRIPTION_DETAILS_DATA
{
  unsigned int dwWholePart;
  char bFractionalPart;
  char bCurrencyFormat;
  unsigned __int16 wISOCodeLength;
  unsigned __int16 *wszISOCode;
  unsigned __int16 wFormattedPriceLength;
  unsigned __int16 *wszFormattedPrice;
  unsigned int dwOfferingDetails;
};

/* 5457 */
struct _GET_USER_SUBSCRIPTION_DETAILS_RESPONSE
{
  unsigned __int16 wSubscriptionIdLength;
  unsigned __int16 *wszSubscriptionId;
  unsigned __int16 wDescriptionLength;
  unsigned __int16 *wszDescription;
  char bCurrentOfferStatus;
  unsigned __int16 wFriendlyNameLength;
  unsigned __int16 *wszFriendlyName;
  char bAnniversaryDate;
  _FILETIME ftPurchaseDate;
  _FILETIME ftActivationDate;
  _FILETIME ftEndDate;
  char bHasViolations;
  unsigned int dwRenewalGracePeriod;
  char bRenewalOfferStatus;
  unsigned __int64 qwRenewalOfferId;
  _GET_USER_SUBSCRIPTION_DETAILS_DATA currentOfferDetails;
  _GET_USER_SUBSCRIPTION_DETAILS_DATA renewalOfferDetails;
  _PAYMENT_INSTRUMENT_INFO paymentInstrument;
};

/* 5458 */
struct _GET_USER_SUBSCRIPTION_DETAILS_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned __int64 qwOfferId;
  unsigned __int16 wInstanceIdLength;
  unsigned __int16 *wszInstanceId;
  _GET_USER_SUBSCRIPTION_DETAILS_RESPONSE *pResponse;
};

/* 5459 */
struct _CONSOLE_PUBLIC_KEY
{
  char PublicExponent[4];
  char Modulus[128];
};

/* 5460 */
struct _XCONFIG_STATISTIC_SETTINGS
{
  unsigned int CheckSum;
  unsigned int Version;
  char XUIDMACAddress[6];
  char Reserved[2];
  unsigned int XUIDCount;
  char ODDFailures[800];
  char HDDSmartData[512];
  char UEMErrors[100];
};

/* 5461 */
struct _PASSPORT_GET_USER_DATA_RESPONSE
{
  unsigned __int16 wFirstNameLength;
  unsigned __int16 *wszFirstName;
  unsigned __int16 wLastNameLength;
  unsigned __int16 *wszLastName;
  _FILETIME ftBirthdate;
  _ADDRESS_INFO address;
  _PHONE_INFO phone;
  char bCountryId;
  unsigned __int16 wEmailLength;
  unsigned __int16 *wszEmail;
};

/* 5462 */
#pragma pack(push, 8)
struct _XENUMERATOR_STATS
{
  unsigned int dwTitleId;
  _XGI_STATS_ENUMERATOR_TYPE enumType;
  unsigned __int64 qwPivot;
  unsigned int *pStaringRanks;
  unsigned int dwNumStatsSpecs;
  _XUSER_STATS_SPEC *pSpecs;
};
#pragma pack(pop)

/* 5463 */
struct _XMSG_CREATE_REQUEST
{
  unsigned int dwMsgType;
  unsigned int cProperties;
  unsigned __int64 qwMessageContext;
  unsigned int dwMessageFlags;
  unsigned int dwExpireMinutes;
  void *phMsg[1];
};

/* 5464 */
struct _XINPUT_LIGHTGUN_CALIBRATION_OFFSETS
{
  unsigned __int16 wCenterX;
  unsigned __int16 wCenterY;
  unsigned __int16 wUpperLeftX;
  unsigned __int16 wUpperLeftY;
};

/* 5465 */
struct _XSHOWUPDATERUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwUpdateFlags;
  char szUpdatePath[260];
  _XEX_EXECUTION_ID ExecutionId;
  char szTitleToLaunchWhenDone[256];
  char szTitleToLaunchDDrive[256];
};

/* 5466 */
struct ID3DXFileDataVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXFileData *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXFileData *);
  unsigned int (__cdecl *Release)(ID3DXFileData *);
  HRESULT (__cdecl *GetEnum)(ID3DXFileData *, ID3DXFileEnumObject **);
  HRESULT (__cdecl *GetName)(ID3DXFileData *, char *, unsigned int *);
  HRESULT (__cdecl *GetId)(ID3DXFileData *, _GUID *);
  HRESULT (__cdecl *Lock)(ID3DXFileData *, unsigned int *, const void **);
  HRESULT (__cdecl *Unlock)(ID3DXFileData *);
  HRESULT (__cdecl *GetType)(ID3DXFileData *, _GUID *);
  HRESULT (__cdecl *IsReference)(ID3DXFileData *);
  HRESULT (__cdecl *GetChildren)(ID3DXFileData *, unsigned int *);
  HRESULT (__cdecl *GetChild)(ID3DXFileData *, unsigned int, ID3DXFileData **);
};

/* 5467 */
struct __RAW_READ_INFO
{
  _LARGE_INTEGER DiskOffset;
  unsigned int SectorCount;
  _TRACK_MODE_TYPE TrackMode;
};

/* 5468 */
struct _XCHALRESP_STATS
{
  unsigned int dwReceived;
  unsigned int dwValid;
  unsigned int dwSucceeded;
  unsigned int dwFailed;
  _XCHALRESP_STATS_NODE *pRootNode;
};

/* 5469 */
struct _PASSPORT_LOGIN_REQUEST
{
  unsigned __int16 wPassportMemberNameLength;
  char *szPassportMemberName;
  unsigned __int16 wEncryptedSessionKeyLength;
  char *pbencryptedSessionKey;
  unsigned __int16 wEncryptedPasswordLength;
  char *pbEncryptedPassword;
  unsigned __int16 wEncryptedTokenRequestLength;
  char *pbEncryptedTokenRequest;
  _PASSPORT_SESSION_TOKEN *pSessionToken;
};

/* 5470 */
struct _CONTENT_HISTORY_INFO
{
  unsigned __int64 qwOfferID;
  unsigned __int16 wOfferNameLength;
  unsigned __int16 *wszOfferName;
  unsigned int dwOfferType;
  unsigned int dwTitleID;
  unsigned __int16 wTitleNameLength;
  unsigned __int16 *wszTitleName;
  unsigned __int16 wResponseFlags;
  _WMID wmid;
};

/* 5471 */
struct _XONLINE_TEAM_MEMBER
{
  unsigned __int64 qwMemberID;
  char cbMemberName;
  int fMember;
  unsigned int dwMemberPriv;
  unsigned __int16 cbMemberData;
  unsigned __int64 ftJoined;
  char *szMemberName;
  char *pbMemberData;
};

/* 5472 */
struct _TEAM_MEM_ENUM_RESULTS
{
  unsigned __int64 qwTeamID;
  unsigned __int16 cMembers;
  _XONLINE_TEAM_MEMBER *rgsMembers;
};

/* 5473 */
struct _GET_ACCOUNT_INFO_RESPONSE
{
  unsigned __int16 wFirstNameLength;
  unsigned __int16 *wszFirstName;
  unsigned __int16 wLastNameLength;
  unsigned __int16 *wszLastName;
  _FILETIME ftBirthdate;
  unsigned __int16 wEmailLength;
  unsigned __int16 *wszEmail;
  _ADDRESS_INFO addressInfo;
  _PHONE_INFO phoneInfo;
  unsigned __int16 wLanguageId;
  char bCountryId;
  char bMsftOptIn;
  char bParterOptIn;
};

/* 5474 */
struct _GET_ACCOUNT_INFO_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned int dwTitleId;
  _GET_ACCOUNT_INFO_RESPONSE *pResponse;
};

/* 5475 */
struct _XMSG_SEND_RECIPIENT_RESULT
{
  unsigned __int64 qwUserID;
  unsigned int dwResult;
};

/* 5476 */
struct _ADD_PAYMENT_INSTRUMENT_RESPONSE
{
  unsigned __int16 wPaymentInstrumentIdLength;
  unsigned __int16 *wszPaymentInstrumentId;
};

/* 5477 */
struct _CONTENT_HISTORY_ENUMERATE_RESPONSE
{
  unsigned __int16 wOffersReturned;
  _CONTENT_HISTORY_INFO *pInfos;
  unsigned int dwOffersTotal;
};

/* 5478 */
struct _CONTENT_HISTORY_ENUMERATE_REQUEST
{
  unsigned __int64 qwUserId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned int dwOfferType;
  char bRequestFlags;
  unsigned int dwStartingIndex;
  unsigned int dwMaxResults;
  _CONTENT_HISTORY_ENUMERATE_RESPONSE *pResults;
};

/* 5479 */
struct XECRYPT_MD5_STATE
{
  unsigned int count;
  unsigned int buf[4];
  char in[64];
};

/* 5480 */
struct XECRYPT_HMACMD5_STATE
{
  XECRYPT_MD5_STATE Md5State[2];
};

/* 5481 */
struct _Q_REVOKE_MESSAGE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwSenderContext;
  unsigned __int16 cRecipients;
  char bMessageType;
  _XMSG_SEND_RECIPIENT_RESULT *pRecipients;
};

/* 5482 */
struct _XENUMERATORHEADER
{
  void *hxamapp;
  unsigned int dwMsgIDEnum;
  unsigned int dwMsgIDCloseEnum;
  unsigned int dwUserIndex;
  unsigned int cItemsRequested;
  unsigned int dwEnumFlags;
};

/* 5483 */
struct _ACCOUNT_LINK_XBOX1_ACCOUNT_REQUEST
{
  unsigned __int64 qwMachineId;
  unsigned int dwTitleId;
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  _PASSPORT_SESSION_TOKEN pUserSessionToken[1];
  _PASSPORT_SESSION_TOKEN pParentSessionToken[1];
  _PHONE_INFO phoneInfo;
  unsigned __int16 wPostalCodeLength;
  unsigned __int16 *wszPostalCode;
  unsigned __int16 wAccountHolderNameLength;
  unsigned __int16 *wszAccountHolderName;
  unsigned __int16 wAccountNumberLength;
  unsigned __int16 *wszAccountNumber;
};

/* 5484 */
struct $5B4CA4EE56F494707B22DB56E570A630
{
  unsigned int cbData;
  unsigned __int16 *pwszData;
};

/* 5485 */
struct _XMSG_GAME_INVITE_GET_ACCEPTED
{
  unsigned int dwUserIndex;
  _XINVITE_INFO pInfo[1];
};

/* 5486 */
struct _XSIGNATURE_TO_VERIFY
{
  char rgbDigest[20];
  char rgbOnlineSignature[100];
};

/* 5487 */
struct _XSIGNATURE_VERIFY_RESPONSE
{
  HRESULT hrResult;
};

/* 5488 */
struct _XSIGNATURE_VERIFY_REQUEST
{
  _XSIGNATURE_TO_VERIFY *pSignaturesToVerify;
  _XSIGNATURE_VERIFY_RESPONSE *pResponse;
};

/* 5489 */
struct _P_PEER_SUBSCRIBE_REPLY_MSG
{
  char pbInternal[32];
  HRESULT hr;
};

/* 5490 */
struct _XONLINE_MATCH_SESSION_INFO
{
  XNKID SessionID;
  XNKEY KeyExchangeKey;
};

/* 5491 */
struct _XMATCH_SESSION_CREATE_REQUEST
{
  unsigned int dwMessageLength;
  XNKID SessionID;
  unsigned int dwTitleID;
  XNADDR HostAddress;
  unsigned int dwPublicOpen;
  unsigned int dwPrivateOpen;
  unsigned int dwPublicFilled;
  unsigned int dwPrivateFilled;
  unsigned int dwNumAttributes;
  unsigned int *pAttributeOffsets;
  _XONLINE_ATTRIBUTE *pAttributes;
  _XONLINE_MATCH_SESSION_INFO *pSessionInfo;
};

/* 5492 */
struct _FB_ENUM_RECD_REVIEWS_REQUEST
{
  unsigned __int64 qwTargetID;
  unsigned int dwPageID;
  unsigned int dwResultsPerPage;
  _FB_ENUM_REVIEWS_RESPONSE *pResults;
};

/* 5493 */
struct BSAFE_PUB_KEY
{
  unsigned int magic;
  unsigned int keylen;
  unsigned int bitlen;
  unsigned int datalen;
  unsigned int pubexp;
};

/* 5494 */
struct ID3DXFragmentLinkerVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXFragmentLinker *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXFragmentLinker *);
  unsigned int (__cdecl *Release)(ID3DXFragmentLinker *);
  HRESULT (__cdecl *GetDevice)(ID3DXFragmentLinker *, D3DDevice **);
  unsigned int (__cdecl *GetNumberOfFragments)(ID3DXFragmentLinker *);
  unsigned int (__cdecl *GetFragmentHandleByIndex)(ID3DXFragmentLinker *, unsigned int);
  unsigned int (__cdecl *GetFragmentHandleByName)(ID3DXFragmentLinker *, const char *);
  HRESULT (__cdecl *GetFragmentDesc)(ID3DXFragmentLinker *, unsigned int, _D3DXFRAGMENT_DESC *);
  HRESULT (__cdecl *AddFragments)(ID3DXFragmentLinker *, const unsigned int *);
  HRESULT (__cdecl *GetAllFragments)(ID3DXFragmentLinker *, ID3DXBuffer **);
  HRESULT (__cdecl *GetFragment)(ID3DXFragmentLinker *, unsigned int, ID3DXBuffer **);
  HRESULT (__cdecl *LinkShader)(ID3DXFragmentLinker *, const char *, unsigned int, const unsigned int *, unsigned int, ID3DXBuffer **, ID3DXBuffer **);
  HRESULT (__cdecl *LinkVertexShader)(ID3DXFragmentLinker *, const char *, unsigned int, const unsigned int *, unsigned int, D3DVertexShader **, ID3DXBuffer **);
  HRESULT (__cdecl *LinkPixelShader)(ID3DXFragmentLinker *, const char *, unsigned int, const unsigned int *, unsigned int, D3DPixelShader **, ID3DXBuffer **);
  HRESULT (__cdecl *ClearCache)(ID3DXFragmentLinker *);
};

/* 5495 */
struct _XEX_SERVICE_ID_LIST
{
  unsigned int Size;
  unsigned int CustomServiceIDs[4];
};

/* 5496 */
struct _XPROFILE_CLEAR_TITLE_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned int dwTitleId;
};

/* 5497 */
struct CFHEADER
{
  int sig;
  unsigned int csumHeader;
  int cbCabinet;
  unsigned int csumFolders;
  unsigned int coffFiles;
  unsigned int csumFiles;
  unsigned __int16 version;
  unsigned __int16 cFolders;
  unsigned __int16 cFiles;
  unsigned __int16 flags;
  unsigned __int16 setID;
  unsigned __int16 iCabinet;
};

/* 5498 */
struct _FIND_USER_INFO
{
  unsigned __int64 qwUserId;
  char szGamerTag[16];
};

/* 5499 */
struct IDirectXFileEnumObjectVtbl
{
  HRESULT (__cdecl *QueryInterface)(IDirectXFileEnumObject *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IDirectXFileEnumObject *);
  unsigned int (__cdecl *Release)(IDirectXFileEnumObject *);
  HRESULT (__cdecl *GetNextDataObject)(IDirectXFileEnumObject *, IDirectXFileData **);
  HRESULT (__cdecl *GetDataObjectById)(IDirectXFileEnumObject *, _GUID *const , IDirectXFileData **);
  HRESULT (__cdecl *GetDataObjectByName)(IDirectXFileEnumObject *, const char *, IDirectXFileData **);
};

/* 5500 */
struct DM_XAM_SERVICES
{
  unsigned int Size;
  void (__cdecl *RebootTitle)(unsigned int);
  unsigned int Version;
};

/* 5501 */
struct _XCONTSIG_SIGNATURES
{
  unsigned int AutoSignatureCount;
  unsigned int LiteralSignatureCount;
  unsigned int SizeOfSignatures;
};

/* 5502 */
struct _XINPUT_DEVICE_DESCRIPTION
{
  unsigned __int16 wVendorID;
  unsigned __int16 wProductID;
  unsigned __int16 wVersion;
};

/* 5503 */
struct _XARB_REPORT_LOST_MACHINES
{
  char bNumLostConnectivityMachineIDs;
  unsigned __int64 *pLostConnectivityMachineIDs;
};

/* 5504 */
struct IDirectXFileVtbl
{
  HRESULT (__cdecl *QueryInterface)(IDirectXFile *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IDirectXFile *);
  unsigned int (__cdecl *Release)(IDirectXFile *);
  HRESULT (__cdecl *CreateEnumObject)(IDirectXFile *, void *, unsigned int, IDirectXFileEnumObject **);
  HRESULT (__cdecl *CreateSaveObject)(IDirectXFile *, const char *, unsigned int, IDirectXFileSaveObject **);
  HRESULT (__cdecl *RegisterTemplates)(IDirectXFile *, void *, unsigned int);
};

/* 5505 */
struct $398DC9F65C7B7DFAE7C808D304889BC3
{
  unsigned int dwChannel;
};

/* 5506 */
struct $2656E5E7CCE6FC17C886F3CF8FE2048F
{
  unsigned __int64 rgXuidRecipients[100];
  unsigned int cRecipients;
  unsigned __int16 szText[256];
  unsigned __int16 szTitle[31];
  unsigned __int16 szGameMessage[97];
  const char *pbImage;
  unsigned int cbImage;
  XMSG_CUSTOMACTION *pCustomActions;
  unsigned int cCustomActions;
  const char *pbCustomPayload;
  unsigned int cbCustomPayload;
  unsigned int dwExpireMinutes;
};

/* 5507 */
#pragma pack(push, 4)
struct $64AEFDA63383650CE935CBB3739FBC3D
{
  unsigned __int16 szTitle[36];
  unsigned __int16 szDescription[83];
  const char *pbImage;
  unsigned int cbImage;
  XPLAYERLIST_USER *pPlayers;
  unsigned int cPlayers;
  XPLAYERLIST_BUTTON xButton;
  XPLAYERLIST_BUTTON yButton;
  XPLAYERLIST_RESULT *pResults;
};
#pragma pack(pop)

/* 5508 */
union $656650F1987E0373177F58475EB4384C
{
  $398DC9F65C7B7DFAE7C808D304889BC3 chat;
  $2656E5E7CCE6FC17C886F3CF8FE2048F msg;
  $64AEFDA63383650CE935CBB3739FBC3D playerList;
};

/* 5509 */
struct _XSHOWFRIENDSUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwFlags;
  unsigned __int64 qwParam;
  _XOVERLAPPED *pOverlapped;
  __declspec(align(8)) $656650F1987E0373177F58475EB4384C playerList;
  _BYTE gap17[1601];
};

/* 5510 */
struct _RC4_SHA_HEADER
{
  char Checksum[20];
  char Confounder[8];
};

/* 5511 */
#pragma pack(push, 8)
struct _XAM_CACHE_OPEN_FILE
{
  unsigned int Flags;
  _XAM_CACHE_FILE_TYPE FileType;
  unsigned int dwIdentifier;
  unsigned __int64 qwIdentifier;
  unsigned __int64 qwVersion;
  unsigned int cbSize;
  void *hFile;
  char FilePath[260];
  void (__cdecl *OnCacheDeviceRemoved)(_XAM_CACHE_OPEN_FILE *);
  unsigned int Context;
  unsigned int Reserved[2];
  void *pvMountedPackage;
  char PackageFilePath[260];
};
#pragma pack(pop)

/* 5512 */
struct _RTL_HEAP_TAG
{
  unsigned int NumberOfAllocations;
  unsigned int NumberOfFrees;
  unsigned int BytesAllocated;
  unsigned __int16 TagIndex;
  unsigned __int16 CreatorBackTraceIndex;
  unsigned __int16 TagName[24];
};

/* 5513 */
struct _P_INVITE_ANSWER_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwHostID;
  XNKID MatchSessionID;
  unsigned __int16 wAnswer;
};

/* 5514 */
struct _XCONTENT_REFRESH_LICENSE_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned __int16 wContentHeaderLength;
  char *pbContentHeader;
  _XCONTENT_REFRESH_LICENSE_RESPONSE *pResults;
};

/* 5515 */
#pragma pack(push, 4)
struct _XEX_HEADER_STRING
{
  unsigned int Size;
  char Data[1];
};
#pragma pack(pop)

/* 5516 */
struct _XCONFIG_DVD_SETTINGS
{
  unsigned int Version;
  char VolumeId[20];
  char Data[640];
};

/* 5517 */
struct ID3DXEffectVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXEffect *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXEffect *);
  unsigned int (__cdecl *Release)(ID3DXEffect *);
  HRESULT (__cdecl *GetDesc)(ID3DXEffect *, _D3DXEFFECT_DESC *);
  HRESULT (__cdecl *GetParameterDesc)(ID3DXEffect *, unsigned int, _D3DXPARAMETER_DESC *);
  HRESULT (__cdecl *GetTechniqueDesc)(ID3DXEffect *, unsigned int, _D3DXTECHNIQUE_DESC *);
  HRESULT (__cdecl *GetPassDesc)(ID3DXEffect *, unsigned int, _D3DXPASS_DESC *);
  HRESULT (__cdecl *GetFunctionDesc)(ID3DXEffect *, unsigned int, _D3DXFUNCTION_DESC *);
  unsigned int (__cdecl *GetParameter)(ID3DXEffect *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetParameterByName)(ID3DXEffect *, unsigned int, const char *);
  unsigned int (__cdecl *GetParameterBySemantic)(ID3DXEffect *, unsigned int, const char *);
  unsigned int (__cdecl *GetParameterElement)(ID3DXEffect *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetTechnique)(ID3DXEffect *, unsigned int);
  unsigned int (__cdecl *GetTechniqueByName)(ID3DXEffect *, const char *);
  unsigned int (__cdecl *GetPass)(ID3DXEffect *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetPassByName)(ID3DXEffect *, unsigned int, const char *);
  unsigned int (__cdecl *GetFunction)(ID3DXEffect *, unsigned int);
  unsigned int (__cdecl *GetFunctionByName)(ID3DXEffect *, const char *);
  unsigned int (__cdecl *GetAnnotation)(ID3DXEffect *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetAnnotationByName)(ID3DXEffect *, unsigned int, const char *);
  HRESULT (__cdecl *SetValue)(ID3DXEffect *, unsigned int, const void *, unsigned int);
  HRESULT (__cdecl *GetValue)(ID3DXEffect *, unsigned int, void *, unsigned int);
  HRESULT (__cdecl *SetBool)(ID3DXEffect *, unsigned int, int);
  HRESULT (__cdecl *GetBool)(ID3DXEffect *, unsigned int, int *);
  HRESULT (__cdecl *SetBoolArray)(ID3DXEffect *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *GetBoolArray)(ID3DXEffect *, unsigned int, int *, unsigned int);
  HRESULT (__cdecl *SetInt)(ID3DXEffect *, unsigned int, int);
  HRESULT (__cdecl *GetInt)(ID3DXEffect *, unsigned int, int *);
  HRESULT (__cdecl *SetIntArray)(ID3DXEffect *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *GetIntArray)(ID3DXEffect *, unsigned int, int *, unsigned int);
  HRESULT (__cdecl *SetFloat)(ID3DXEffect *, unsigned int, float);
  HRESULT (__cdecl *GetFloat)(ID3DXEffect *, unsigned int, float *);
  HRESULT (__cdecl *SetFloatArray)(ID3DXEffect *, unsigned int, const float *, unsigned int);
  HRESULT (__cdecl *GetFloatArray)(ID3DXEffect *, unsigned int, float *, unsigned int);
  HRESULT (__cdecl *SetVector)(ID3DXEffect *, unsigned int, D3DXVECTOR4 *);
  HRESULT (__cdecl *GetVector)(ID3DXEffect *, unsigned int, D3DXVECTOR4 *);
  HRESULT (__cdecl *SetVectorArray)(ID3DXEffect *, unsigned int, D3DXVECTOR4 *, unsigned int);
  HRESULT (__cdecl *GetVectorArray)(ID3DXEffect *, unsigned int, D3DXVECTOR4 *, unsigned int);
  HRESULT (__cdecl *SetMatrix)(ID3DXEffect *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *GetMatrix)(ID3DXEffect *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *SetMatrixArray)(ID3DXEffect *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *GetMatrixArray)(ID3DXEffect *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetMatrixPointerArray)(ID3DXEffect *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *GetMatrixPointerArray)(ID3DXEffect *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *SetMatrixTranspose)(ID3DXEffect *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *GetMatrixTranspose)(ID3DXEffect *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *SetMatrixTransposeArray)(ID3DXEffect *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *GetMatrixTransposeArray)(ID3DXEffect *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetMatrixTransposePointerArray)(ID3DXEffect *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *GetMatrixTransposePointerArray)(ID3DXEffect *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *SetString)(ID3DXEffect *, unsigned int, const char *);
  HRESULT (__cdecl *GetString)(ID3DXEffect *, unsigned int, const char **);
  HRESULT (__cdecl *SetTexture)(ID3DXEffect *, unsigned int, D3DBaseTexture *);
  HRESULT (__cdecl *GetTexture)(ID3DXEffect *, unsigned int, D3DBaseTexture **);
  HRESULT (__cdecl *SetPixelShader)(ID3DXEffect *, unsigned int, D3DPixelShader *);
  HRESULT (__cdecl *GetPixelShader)(ID3DXEffect *, unsigned int, D3DPixelShader **);
  HRESULT (__cdecl *SetVertexShader)(ID3DXEffect *, unsigned int, D3DVertexShader *);
  HRESULT (__cdecl *GetVertexShader)(ID3DXEffect *, unsigned int, D3DVertexShader **);
  HRESULT (__cdecl *SetArrayRange)(ID3DXEffect *, unsigned int, unsigned int, unsigned int);
  HRESULT (__cdecl *GetPool)(ID3DXEffect *, ID3DXEffectPool **);
  HRESULT (__cdecl *SetTechnique)(ID3DXEffect *, unsigned int);
  unsigned int (__cdecl *GetCurrentTechnique)(ID3DXEffect *);
  HRESULT (__cdecl *ValidateTechnique)(ID3DXEffect *, unsigned int);
  HRESULT (__cdecl *FindNextValidTechnique)(ID3DXEffect *, unsigned int, unsigned int *);
  int (__cdecl *IsParameterUsed)(ID3DXEffect *, unsigned int, unsigned int);
  HRESULT (__cdecl *Begin)(ID3DXEffect *, unsigned int *, unsigned int);
  HRESULT (__cdecl *BeginPass)(ID3DXEffect *, unsigned int);
  HRESULT (__cdecl *CommitChanges)(ID3DXEffect *);
  HRESULT (__cdecl *EndPass)(ID3DXEffect *);
  HRESULT (__cdecl *End)(ID3DXEffect *);
  HRESULT (__cdecl *GetDevice)(ID3DXEffect *, D3DDevice **);
  HRESULT (__cdecl *OnLostDevice)(ID3DXEffect *);
  HRESULT (__cdecl *OnResetDevice)(ID3DXEffect *);
  HRESULT (__cdecl *SetStateManager)(ID3DXEffect *, ID3DXEffectStateManager *);
  HRESULT (__cdecl *GetStateManager)(ID3DXEffect *, ID3DXEffectStateManager **);
  HRESULT (__cdecl *BeginParameterBlock)(ID3DXEffect *);
  unsigned int (__cdecl *EndParameterBlock)(ID3DXEffect *);
  HRESULT (__cdecl *ApplyParameterBlock)(ID3DXEffect *, unsigned int);
  HRESULT (__cdecl *CloneEffect)(ID3DXEffect *, D3DDevice *, ID3DXEffect **);
};

/* 5518 */
struct _XCONTENT_LICENSE
{
  unsigned __int64 LicenseeId;
  unsigned int LicenseBits;
  unsigned int LicenseFlags;
};

/* 5519 */
struct _XEKEYS_SET_REVOCATION_LIST
{
  unsigned int Flags;
  char Signature[256];
  char NonceRemote[16];
  unsigned int Size;
  unsigned int PhysAddr[18];
  unsigned int PhysSize[18];
};

/* 5520 */
union $5D88AAE1EF2CEC898527EDDBCD4CDF65
{
  unsigned __int16 wPropOffset;
  unsigned __int16 wData;
  char bData;
};

/* 5521 */
struct _XMSG_PROPERTY_INTERNAL
{
  unsigned __int16 wPropTag;
  $5D88AAE1EF2CEC898527EDDBCD4CDF65 ___u1;
};

/* 5522 */
struct _XE_CONSOLE_CERTIFICATE
{
  unsigned __int16 CertSize;
  char ConsoleId[5];
  char ConsolePartNumber[11];
  char Reserved[6];
  unsigned int ConsoleType;
  unsigned __int64 ManufacturingDate;
  _CONSOLE_PUBLIC_KEY ConsolePublicKey;
  char Signature[256];
};

/* 5523 */
struct _XE_CONSOLE_SIGNATURE
{
  _XE_CONSOLE_CERTIFICATE Cert;
  char Signature[128];
};

/* 5524 */
struct _XCONTENT_SIGNATURE
{
  char Signature[256];
  char Reserved[296];
};

/* 5525 */
union $88727160CEEF431A558F646A0F5BF74A
{
  _XE_CONSOLE_SIGNATURE ConsoleSignature;
  _XCONTENT_SIGNATURE ContentSignature;
};

/* 5526 */
struct _XCONTENT_HEADER
{
  _XCONTENT_SIGNATURE_TYPE SignatureType;
  $88727160CEEF431A558F646A0F5BF74A Signature;
  _XCONTENT_LICENSE LicenseDescriptors[16];
  char ContentId[20];
  unsigned int SizeOfHeaders;
};

/* 5527 */
struct _PRESENCE_GET_STATE
{
  unsigned __int64 UserXuid;
  unsigned int pdwStateFlags[1];
  XNKID pSessionID[1];
};

/* 5528 */
struct ID3DXKeyframedAnimationSetVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXKeyframedAnimationSet *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXKeyframedAnimationSet *);
  unsigned int (__cdecl *Release)(ID3DXKeyframedAnimationSet *);
  const char *(__cdecl *GetName)(ID3DXKeyframedAnimationSet *);
  double (__cdecl *GetPeriod)(ID3DXKeyframedAnimationSet *);
  double (__cdecl *GetPeriodicPosition)(ID3DXKeyframedAnimationSet *, double);
  unsigned int (__cdecl *GetNumAnimations)(ID3DXKeyframedAnimationSet *);
  HRESULT (__cdecl *GetAnimationNameByIndex)(ID3DXKeyframedAnimationSet *, unsigned int, const char **);
  HRESULT (__cdecl *GetAnimationIndexByName)(ID3DXKeyframedAnimationSet *, const char *, unsigned int *);
  HRESULT (__cdecl *GetSRT)(ID3DXKeyframedAnimationSet *, double, unsigned int, _D3DVECTOR *, D3DXQUATERNION *, _D3DVECTOR *);
  HRESULT (__cdecl *GetCallback)(ID3DXKeyframedAnimationSet *, double, unsigned int, double *, void **);
  _D3DXPLAYBACK_TYPE (__cdecl *GetPlaybackType)(ID3DXKeyframedAnimationSet *);
  double (__cdecl *GetSourceTicksPerSecond)(ID3DXKeyframedAnimationSet *);
  unsigned int (__cdecl *GetNumScaleKeys)(ID3DXKeyframedAnimationSet *, unsigned int);
  HRESULT (__cdecl *GetScaleKeys)(ID3DXKeyframedAnimationSet *, unsigned int, _D3DXKEY_VECTOR3 *);
  unsigned int (__cdecl *GetNumRotationKeys)(ID3DXKeyframedAnimationSet *, unsigned int);
  HRESULT (__cdecl *GetRotationKeys)(ID3DXKeyframedAnimationSet *, unsigned int, _D3DXKEY_QUATERNION *);
  unsigned int (__cdecl *GetNumTranslationKeys)(ID3DXKeyframedAnimationSet *, unsigned int);
  HRESULT (__cdecl *GetTranslationKeys)(ID3DXKeyframedAnimationSet *, unsigned int, _D3DXKEY_VECTOR3 *);
  unsigned int (__cdecl *GetNumCallbackKeys)(ID3DXKeyframedAnimationSet *);
  HRESULT (__cdecl *GetCallbackKeys)(ID3DXKeyframedAnimationSet *, _D3DXKEY_CALLBACK *);
  HRESULT (__cdecl *RegisterAnimationSRTKeys)(ID3DXKeyframedAnimationSet *, const char *, unsigned int, unsigned int, unsigned int, _D3DXKEY_VECTOR3 *, _D3DXKEY_QUATERNION *, _D3DXKEY_VECTOR3 *);
  HRESULT (__cdecl *Compress)(ID3DXKeyframedAnimationSet *, unsigned int, float, _D3DXFRAME *, ID3DXBuffer **);
};

/* 5529 */
struct _RECOVER_ACCOUNT_RESPONSE
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwOfflineXuid;
  char pKey[16];
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  unsigned __int16 wDomainLength;
  unsigned __int16 *wszDomain;
  unsigned __int16 wRealmLength;
  unsigned __int16 *wszRealm;
};

/* 5530 */
struct _RECOVER_ACCOUNT_REQUEST
{
  unsigned __int64 qwMachineId;
  char pSignedPuid[28];
  _RECOVER_ACCOUNT_RESPONSE *pResponse;
};

/* 5531 */
union $A012029DA52A43651A4E5FA88616A353
{
  unsigned __int16 AsUSHORT;
};

/* 5532 */
struct _IDE_IDENTIFY_DATA
{
  unsigned __int16 GeneralConfiguration;
  unsigned __int16 NumberOfCylinders;
  unsigned __int16 Reserved1;
  unsigned __int16 NumberOfHeads;
  unsigned __int16 Reserved2[2];
  unsigned __int16 NumberOfSectorsPerTrack;
  unsigned __int16 Reserved3[3];
  char SerialNumber[20];
  unsigned __int16 Reserved4[3];
  char FirmwareRevision[8];
  char ModelNumber[40];
  __int16 _bf94;
  unsigned __int16 Reserved6;
  unsigned __int16 Capabilities;
  unsigned __int16 Reserved7;
  __int16 _bf102;
  unsigned __int16 Reserved9;
  __int16 _bf106;
  unsigned __int16 NumberOfCurrentCylinders;
  unsigned __int16 NumberOfCurrentHeads;
  unsigned __int16 CurrentSectorsPerTrack;
  unsigned int CurrentSectorCapacity;
  unsigned __int16 CurrentMultiSectorSetting;
  unsigned int UserAddressableSectors;
  __declspec(align(8)) __int16 _bf128;
  unsigned __int16 MinimumMWXferCycleTime;
  unsigned __int16 RecommendedMWXferCycleTime;
  unsigned __int16 MinimumPIOCycleTime;
  unsigned __int16 MinimumPIOCycleTimeIORDY;
  unsigned __int16 Reserved12[11];
  unsigned __int16 MajorRevision;
  unsigned __int16 MinorRevision;
  $A012029DA52A43651A4E5FA88616A353 Support1;
  $A012029DA52A43651A4E5FA88616A353 Support2;
  $A012029DA52A43651A4E5FA88616A353 Support3;
  $A012029DA52A43651A4E5FA88616A353 Enabled1;
  $A012029DA52A43651A4E5FA88616A353 Enabled2;
  $A012029DA52A43651A4E5FA88616A353 Enabled3;
  __int16 _bf176;
  unsigned __int16 Reserved19[11];
  unsigned int UserAddressableSectors48Bit[2];
  unsigned __int16 Reserved20[23];
  __declspec(align(4)) __int16 _bf256;
  unsigned __int16 Reserved25[127];
};

/* 5533 */
struct XMEDIAPACKET
{
  int Status;
  unsigned int Offset;
  char *Buffer;
  unsigned int Length;
  unsigned int Resrvd;
  XMEDIAFORMAT Format;
};

/* 5534 */
struct XVOICE_PACKET_CONTEXT
{
  XMEDIAPACKET *Packet;
  _KEVENT *Event;
  XVOICE_OBJECT *VoiceObject;
  XVOICE_PACKET_CONTEXT *Next;
};

/* 5535 */
struct XVOICE_PACKET_QUEUE
{
  XVOICE_PACKET_CONTEXT *Head;
  XVOICE_PACKET_CONTEXT *Tail;
};

/* 5536 */
struct XVOICE_OBJECT
{
  unsigned int DeviceContext;
  unsigned int MaxPackets;
  XVOICE_PACKET_CONTEXT *PacketContextAllocation;
  XVOICE_PACKET_QUEUE FreePacketContexts;
  _KEVENT DpcComplete;
};

/* 5537 */
struct _XENUMERATORASSET
{
  unsigned __int64 qwUserId;
  unsigned int dwFlags;
  unsigned int dwCurrentIndex;
  unsigned int cbResults;
  _XASSET_ENUMERATE_RESPONSE *pResults;
};

/* 5538 */
struct _XONLINE_STATS_ENUM_BY_RATING_REQUEST
{
  unsigned int dwTitleId;
  __int64 i64Rating;
  unsigned int dwPageSize;
  unsigned int dwNumSpecs;
  _XONLINE_STATS_SPEC *pSpecs;
  _XONLINE_STATS_ENUM_RESULTS *pResults;
};

/* 5539 */
struct _IDEREGS
{
  char bFeaturesReg;
  char bSectorCountReg;
  char bSectorNumberReg;
  char bCylLowReg;
  char bCylHighReg;
  char bDriveHeadReg;
  char bCommandReg;
  char bHostSendsData;
};

/* 5540 */
struct _ATA_PASS_THROUGH
{
  _IDEREGS IdeReg;
  unsigned int DataBufferSize;
  void *DataBuffer;
};

/* 5541 */
struct _VERIFY_BILLING_TOKEN_RESPONSE
{
  unsigned __int64 qwOfferId;
  unsigned int dwOfferTypeId;
};

/* 5542 */
struct _SET_ACCOUNT_INFO_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned __int16 wFirstNameLength;
  unsigned __int16 *wszFirstName;
  unsigned __int16 wLastNameLength;
  unsigned __int16 *wszLastName;
  _FILETIME ftBirthdate;
  unsigned __int16 wEmailLength;
  unsigned __int16 *wszEmail;
  _ADDRESS_INFO address;
  _PHONE_INFO phone;
  unsigned __int16 wLanguageId;
  char bMsftOptIn;
  char bParterOptIn;
};

/* 5543 */
struct _XGI_STATSENUM_MSG
{
  unsigned int dwTitleId;
  unsigned int dwRankStart;
  unsigned int dwNumRows;
  unsigned int dwNumStatsSpecs;
  _XUSER_STATS_SPEC *pSpecs;
  unsigned int cbBuffer;
  void **ph;
};

/* 5544 */
struct _XMATCH_DEAD_XBOX
{
  unsigned int dwMessageLength;
  _SGADDR sgaddr;
  unsigned int dwTitleID;
  unsigned int dwTitleRegion;
  unsigned __int64 aqwUserID[4];
};

/* 5545 */
struct _RTL_HEAP_TAG_INFO
{
  unsigned int NumberOfAllocations;
  unsigned int NumberOfFrees;
  unsigned int BytesAllocated;
};

/* 5546 */
struct CFFILE
{
  int cbFile;
  unsigned int uoffFolderStart;
  unsigned __int16 iFolder;
  unsigned __int16 date;
  unsigned __int16 time;
  unsigned __int16 attribs;
};

/* 5547 */
struct _ACCOUNT_QUERY_RESPONSE
{
  unsigned __int16 wResponseBytesLength;
  char *pbResponseBytes;
};

/* 5548 */
struct _ACCOUNT_QUERY_REQUEST
{
  unsigned int dwRequestType;
  unsigned __int16 wRequestBytesLength;
  char *pbRequestBytes;
  _ACCOUNT_QUERY_RESPONSE *pResults;
};

/* 5549 */
struct _numberfmtA
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  char *lpDecimalSep;
  char *lpThousandSep;
  unsigned int NegativeOrder;
};

/* 5550 */
struct XGI_WRITESETTINGS_MSG
{
  _XOVERLAPPED *pXOverlapped;
  unsigned int dwTitleId;
  unsigned int dwUserIndex;
  unsigned int dwNumSettings;
  _XUSER_PROFILE_SETTING *pSettings;
};

/* 5551 */
struct _ACQUIRE_VIDEO_CONTENT_URL_RESPONSE
{
  unsigned __int16 wContentUrlLength;
  wchar_t *wszContentUrl;
};

/* 5552 */
struct _ACQUIRE_VIDEO_CONTENT_URL_REQUEST
{
  unsigned __int64 UserXuid;
  char bCountryId;
  unsigned __int16 wLanguageId;
  char bTier;
  unsigned __int64 qwMachineId;
  _WMID pWmid[1];
  _ACQUIRE_VIDEO_CONTENT_URL_RESPONSE *pResults;
};

/* 5553 */
struct _XSTORAGE_ENUMERATE_REQUEST
{
  _XSTORAGE_ACCESS_TOKEN pStorageAccessToken[1];
  _XSTORAGE_PATH_STRING pStoragePathString[1];
  _XSTORAGE_ACCESS_TOKEN_READ pStorageAccessTokenRead[1];
  unsigned int dwTitleId;
  unsigned int dwTitleVersion;
  char bCountryId;
  unsigned int dwStartingIndex;
  unsigned int dwEndingIndex;
  _FILETIME ftLastModified;
  _XSTORAGE_ENUMERATE_RESULTS *pResults;
};

/* 5554 */
struct _XEX_DELTA_PATCH_DESCRIPTOR
{
  unsigned int Size;
  unsigned int TargetVersion;
  unsigned int SourceVersion;
  char DigestSource[20];
  char ImageKeySource[16];
  unsigned int SizeOfTargetHeaders;
  unsigned int DeltaHeadersSourceOffset;
  unsigned int DeltaHeadersSourceSize;
  unsigned int DeltaHeadersTargetOffset;
  unsigned int DeltaImageSourceOffset;
  unsigned int DeltaImageSourceSize;
  unsigned int DeltaImageTargetOffset;
};

/* 5555 */
struct _P_LIST_CHANGE_ITEM
{
  unsigned int dwListVersion;
  unsigned __int64 qwTargetID;
  unsigned __int16 wOperationID;
  HRESULT hr;
  unsigned __int16 cbTargetAcctName;
  char *szTargetAcctName;
};

/* 5556 */
struct _P_INVITATION_ITEM
{
  unsigned __int64 qwHostID;
  XNKID MatchSessionID;
  unsigned int dwTitleID;
  _FILETIME ftSent;
};

/* 5557 */
struct _P_PRESENCE_2_ITEM
{
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned int dwState;
  XNKID MatchSessionID;
  unsigned int mtUserTime;
  unsigned __int16 cbRichPresence;
  unsigned __int16 cbData;
  wchar_t *wszRichPresence;
  char *rgbData;
};

/* 5558 */
struct _P_INVITE_ACTION_ITEM
{
  unsigned __int64 qwTargetID;
  unsigned int dwContext;
  XNKID SessionID;
};

/* 5559 */
union _Q_REPLY_ITEM
{
  _P_LIST_CHANGE_ITEM ChangeItem;
  _P_PRESENCE_ITEM PresenceItem;
  _P_INVITATION_ITEM InvitationItem;
  _P_INVITATION_ANSWER_ITEM AnswerItem;
  _P_PEER_PRESENCE_ITEM PeerPresenceItem;
  _P_PRESENCE_2_ITEM RichPresenceItem;
  _P_INVITE_ACTION_ITEM InviteActionItem;
};

/* 5560 */
struct _Q_LIST_ITEM
{
  unsigned int dwItemID;
  unsigned __int16 wItemLen;
  _Q_REPLY_ITEM ReplyItem;
};

/* 5561 */
struct _SUB_Q_CURRENT_POSITION
{
  _SUB_Q_HEADER Header;
  char FormatCode;
  char _bf5;
  char TrackNumber;
  char IndexNumber;
  char AbsoluteAddress[4];
  char TrackRelativeAddress[4];
};

/* 5562 */
struct _IDE_SECURITY_DATA
{
  __int16 _bf0;
  char Password[32];
  unsigned __int16 Reserved3[239];
};

/* 5563 */
struct _XMSG_INVITE_SEND_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwNumInvitees;
  unsigned __int64 *pXuidInvitees;
  unsigned int cchText;
  unsigned __int16 *pszText;
  void *hMsg;
};

/* 5564 */
#pragma pack(push, 4)
struct _XMSG_PROPERTY_BINARY
{
  unsigned __int16 cbData;
  char *rgbData;
};
#pragma pack(pop)

/* 5565 */
struct _QUERY_ADD_RESULT
{
  unsigned __int64 entityId;
};

/* 5566 */
#pragma pack(push, 4)
struct _XMSG_PROPERTY_STRING
{
  unsigned __int16 cbString;
  unsigned __int16 *szString;
};
#pragma pack(pop)

/* 5567 */
struct _XUIDWITHFLAGS
{
  unsigned __int64 qwUserID;
  unsigned int dwUserFlags;
};

/* 5568 */
struct _XNET_LOGON_USER
{
  _XUIDWITHFLAGS xuid;
  unsigned int dwServiceNetworkID;
  char szGamertag[16];
  unsigned int dwUserOptions;
  char passcode[4];
  char domain[20];
  char kerberosRealm[24];
  char key[16];
  HRESULT hr;
};

/* 5569 */
struct Q_MESSAGE_NOTIFICATION
{
  unsigned int dwTypeAndFlags;
};

/* 5570 */
struct ID3DXPatchMeshVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXPatchMesh *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXPatchMesh *);
  unsigned int (__cdecl *Release)(ID3DXPatchMesh *);
  unsigned int (__cdecl *GetNumPatches)(ID3DXPatchMesh *);
  unsigned int (__cdecl *GetNumVertices)(ID3DXPatchMesh *);
  HRESULT (__cdecl *GetDeclaration)(ID3DXPatchMesh *, _D3DVERTEXELEMENT9 *);
  unsigned int (__cdecl *GetControlVerticesPerPatch)(ID3DXPatchMesh *);
  unsigned int (__cdecl *GetOptions)(ID3DXPatchMesh *);
  HRESULT (__cdecl *GetDevice)(ID3DXPatchMesh *, D3DDevice **);
  HRESULT (__cdecl *GetPatchInfo)(ID3DXPatchMesh *, _D3DXPATCHINFO *);
  HRESULT (__cdecl *GetVertexBuffer)(ID3DXPatchMesh *, D3DVertexBuffer **);
  HRESULT (__cdecl *GetIndexBuffer)(ID3DXPatchMesh *, D3DIndexBuffer **);
  HRESULT (__cdecl *LockVertexBuffer)(ID3DXPatchMesh *, unsigned int, void **);
  HRESULT (__cdecl *UnlockVertexBuffer)(ID3DXPatchMesh *);
  HRESULT (__cdecl *LockIndexBuffer)(ID3DXPatchMesh *, unsigned int, void **);
  HRESULT (__cdecl *UnlockIndexBuffer)(ID3DXPatchMesh *);
  HRESULT (__cdecl *LockAttributeBuffer)(ID3DXPatchMesh *, unsigned int, unsigned int **);
  HRESULT (__cdecl *UnlockAttributeBuffer)(ID3DXPatchMesh *);
  HRESULT (__cdecl *GetTessSize)(ID3DXPatchMesh *, float, unsigned int, unsigned int *, unsigned int *);
  HRESULT (__cdecl *GenerateAdjacency)(ID3DXPatchMesh *, float);
  HRESULT (__cdecl *CloneMesh)(ID3DXPatchMesh *, unsigned int, _D3DVERTEXELEMENT9 *, ID3DXPatchMesh **);
  HRESULT (__cdecl *Optimize)(ID3DXPatchMesh *, unsigned int);
  HRESULT (__cdecl *SetDisplaceParam)(ID3DXPatchMesh *, D3DBaseTexture *, _D3DTEXTUREFILTERTYPE, _D3DTEXTUREFILTERTYPE, _D3DTEXTUREFILTERTYPE, _D3DTEXTUREADDRESS, unsigned int);
  HRESULT (__cdecl *GetDisplaceParam)(ID3DXPatchMesh *, D3DBaseTexture **, _D3DTEXTUREFILTERTYPE *, _D3DTEXTUREFILTERTYPE *, _D3DTEXTUREFILTERTYPE *, _D3DTEXTUREADDRESS *, unsigned int *);
  HRESULT (__cdecl *Tessellate)(ID3DXPatchMesh *, float, ID3DXMesh *);
  HRESULT (__cdecl *TessellateAdaptive)(ID3DXPatchMesh *, D3DXVECTOR4 *, unsigned int, unsigned int, ID3DXMesh *);
};

/* 5571 */
struct _XEXIMAGE_LIBRARY_VERSION
{
  char LibraryName[8];
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned __int16 BuildVersion;
  __int16 _bf14;
};

/* 5572 */
struct _USER_XNAME
{
  unsigned __int16 wszGamerTag[16];
};

/* 5573 */
struct _MIGRATE_XBOX1_USER_RESPONSE
{
  unsigned __int64 qwUserId;
  char abXenonKey[16];
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  unsigned __int16 wDomainLength;
  unsigned __int16 *wszDomain;
  unsigned __int16 wRealmLength;
  unsigned __int16 *wszRealm;
  unsigned int dwParentalControlGroupId;
  unsigned int dwCultureId;
};

/* 5574 */
struct _MIGRATE_XBOX1_USER_REQUEST
{
  _PASSPORT_SESSION_TOKEN pUserSessionToken[1];
  _PASSPORT_SESSION_TOKEN pParentSessionToken[1];
  unsigned __int64 qwOfflineXuid;
  unsigned __int16 wUserPassportMemberNameLength;
  char *szUserPassportMemberName;
  unsigned int dwTitleId;
  unsigned __int64 qwMachineId;
  unsigned __int16 wLanguageId;
  unsigned __int16 wReservedBytesLength;
  char *pbReservedBytes;
  _MIGRATE_XBOX1_USER_RESPONSE *pResponse;
};

/* 5575 */
union $737E215D9153334632B0A0F238BC8D60
{
  unsigned int dwPeriod;
  void *pvWaitable;
  void *hWaitable;
  void *hxamtaskqueue;
};

/* 5576 */
struct _XAMTASKATTRIBUTES
{
  unsigned int dwProperties;
  $737E215D9153334632B0A0F238BC8D60 ___u1;
};

/* 5577 */
struct _ACCOUNT_ACCEPT_TOU_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
};

/* 5578 */
struct _XMATCH_SESSION_UPDATE_REQUEST
{
  unsigned int dwMessageLength;
  XNKID SessionID;
  unsigned int dwTitleID;
  XNADDR HostAddress;
  unsigned int dwPublicOpen;
  unsigned int dwPrivateOpen;
  unsigned int dwPublicFilled;
  unsigned int dwPrivateFilled;
  unsigned int dwNumAttributes;
  unsigned int *pAttributeOffsets;
  _XONLINE_ATTRIBUTE *pAttributes;
};

/* 5579 */
struct _GET_SESSION_RESULTS
{
  unsigned __int64 qwHostUserID;
  unsigned int dwTitleID;
  unsigned int dwTitleVersion;
  unsigned int dwTitleRegion;
  XNADDR xnaddr;
  XNKID xkid;
  XNKEY xnkey;
};

/* 5580 */
struct _P_GET_PEER_SESSION
{
  _GET_SESSION_RESULTS *pResults;
};

/* 5581 */
struct _P_BLOCK_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwBlockID;
};

/* 5582 */
struct _LOGON_CHECK_RESPONSE
{
  HRESULT hr;
};

/* 5583 */
struct _LOGON_CHECK_REQUEST
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserId;
  _LOGON_CHECK_RESPONSE *pResults;
};

/* 5584 */
struct _XONLINECONTENT_RESUME_HEADER
{
  _XONLINECONTENT_RESUME_STATE ResumeState;
  unsigned int dwCurrentFileIndex;
  _LARGE_INTEGER liCurrentFileOffset;
  _LARGE_INTEGER liBytesProcessed;
  _LARGE_INTEGER liLastModified;
};

/* 5585 */
struct _XCONTENT_METADATA_INSTALLER_PROGRESS_CACHE
{
  _XONLINECONTENT_RESUME_HEADER ResumeHeader;
  char CabResumeData[5584];
};

/* 5586 */
struct _RTL_HEAP_INFORMATION
{
  void *BaseAddress;
  unsigned int Flags;
  unsigned __int16 EntryOverhead;
  unsigned __int16 CreatorBackTraceIndex;
  unsigned int BytesAllocated;
  unsigned int BytesCommitted;
  unsigned int NumberOfTags;
  unsigned int NumberOfEntries;
  unsigned int NumberOfPseudoTags;
  unsigned int PseudoTagGranularity;
  unsigned int Reserved[5];
  _RTL_HEAP_TAG *Tags;
  _RTL_HEAP_ENTRY *Entries;
};

/* 5587 */
struct _RTL_PROCESS_HEAPS
{
  unsigned int NumberOfHeaps;
  _RTL_HEAP_INFORMATION Heaps[1];
};

/* 5588 */
struct _XCONTENT_METADATA_INSTALLER_SYSTEM_UPDATE
{
  unsigned int CurrentVersion;
  unsigned int NewVersion;
  char Reserved[5608];
};

/* 5589 */
union $BA896757CEF3DA134FDB7E2375FDF150
{
  _XCONTENT_DATA cd;
  _XCONTENT_DATA_INTERNAL cdi;
};

/* 5590 */
struct $9E31C3066A1D29749B26F8F44A888E73
{
  _BYTE gap0[336];
  unsigned int dwContentFlags;
  unsigned int *pdwDisposition;
  unsigned int *pdwLicenseMask;
  unsigned int dwFileCacheSize;
  _ULARGE_INTEGER uliContentSize;
  _XOVERLAPPED *pOverlapped;
  unsigned int cbContentData;
};

/* 5591 */
union $C35F289C4DA7865CB8B95A42971A962C
{
  $BA896757CEF3DA134FDB7E2375FDF150 ___u2;
  $9E31C3066A1D29749B26F8F44A888E73 _s1;
};

/* 5592 */
struct _XCREATECONTENTPARAM
{
  unsigned int dwUserIndex;
  char szRootName[64];
  __declspec(align(8)) $C35F289C4DA7865CB8B95A42971A962C ___u2;
  _BYTE gap47[369];
};

/* 5593 */
struct _XONLINE_USER_TEAM
{
  unsigned __int64 qwTeamID;
  int fMember;
  unsigned __int16 cbTeamName;
  unsigned __int16 *wszTeamName;
};

/* 5594 */
union $3AF138B59BE3297C07D3C6C6B54F0B40
{
  void *FileHandle;
  void *Buffer;
};

/* 5595 */
#pragma pack(push, 4)
struct _DMALTINI
{
  $3AF138B59BE3297C07D3C6C6B54F0B40 ___u0;
  unsigned int FileSize;
  char AlignedWrites;
};
#pragma pack(pop)

/* 5596 */
struct _P_FRIENDS_ENUM_CREATE_MSG
{
  unsigned int dwUserIndex;
  unsigned int dwStartingIndex;
  unsigned int dwFriendsToReturn;
  unsigned int pcbBuffer[1];
  void *ph[1];
};

/* 5597 */
struct _P_PRESENCE_ENUM_CREATE_MSG
{
  unsigned int dwUserIndex;
  unsigned int cPeers;
  unsigned __int64 *pPeers;
  unsigned int dwStartingIndex;
  unsigned int dwPeersToReturn;
  unsigned int pcbBuffer[1];
  void *ph[1];
};

/* 5598 */
struct _XREFERRAL_LOCATION
{
  unsigned __int16 wRank;
  unsigned __int16 wUrlSize;
  char *pszUrl;
};

/* 5599 */
struct _XCONTENT_DOWNLOAD_PARAMS
{
  unsigned int dwUserIndex;
  char *pbContentId;
  unsigned int dwTargetDirectoryLength;
  char *szTargetDirectory;
  unsigned int dwFlags;
};

/* 5600 */
struct _FB_PLAYER_REVIEW_REQUEST
{
  unsigned __int64 qwSenderID;
  unsigned __int64 qwTargetID;
  unsigned int dwTitleID;
  unsigned int dwType;
  unsigned __int64 qwContext;
};

/* 5601 */
struct _XPROFILE_ACHIEVEMENT_SYNC_REQUEST
{
  unsigned int dwAchievementId;
  _FILETIME ftAchieved;
  unsigned int dwSequence;
  unsigned int dwFlags;
  char bType;
  unsigned int dwCred;
  unsigned int dwImageId;
  char cbTitleLen;
  unsigned __int16 *pszTitle;
  char cbDescriptionLen;
  unsigned __int16 *pszDescription;
  char cbHowToLen;
  unsigned __int16 *pszHowTo;
  char bNextIdsLen;
  unsigned int *pdwNextIds;
  char bReplaceIdsLen;
  unsigned int *pdwReplaceIds;
};

/* 5602 */
struct _Q_MESSAGE_SUMMARY
{
  unsigned __int64 qwSenderID;
  unsigned __int64 qwSenderContext;
  unsigned int mtSentTime;
  unsigned int dwMessageID;
  unsigned int dwMessageFlags;
  unsigned int dwSenderTitleID;
  unsigned __int16 wExpireMinutes;
  unsigned __int16 cbDetails;
  char bMessageType;
  char szSenderName[15];
};

/* 5603 */
struct _XONLINE_MATCH_SEARCHRESULT
{
  unsigned int dwReserved;
  XNKID SessionID;
  XNADDR HostAddress;
  XNKEY KeyExchangeKey;
  unsigned int dwPublicOpen;
  unsigned int dwPrivateOpen;
  unsigned int dwPublicFilled;
  unsigned int dwPrivateFilled;
  unsigned int dwNumAttributes;
  unsigned int *pAttributeOffsets;
  _XONLINE_ATTRIBUTE *pAttributes;
};

/* 5604 */
struct _XONLINE_MATCH_SEARCHRESULT_HEADER
{
  unsigned int dwReserved;
  unsigned __int16 NumSearchResults;
  unsigned __int16 Flags;
  unsigned int LoggingThreshold;
  _XONLINE_MATCH_SEARCHRESULT *pResults;
};

/* 5605 */
struct _XMATCH_SEARCH_REQUEST
{
  unsigned int dwMessageLength;
  unsigned int dwTitleID;
  unsigned int dwProcedureIndex;
  XNADDR HostAddress;
  unsigned __int16 wNumUsers;
  unsigned __int16 wFlags;
  unsigned int dwNumAttributes;
  unsigned int *pAttributeOffsets;
  _XONLINE_ATTRIBUTE *pAttributes;
  _XONLINE_MATCH_SEARCHRESULT_HEADER *pSearchResults;
};

/* 5606 */
struct _GET_LINKED_GAMERTAG_RESPONSE
{
  unsigned __int64 qwUserPuid;
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
};

/* 5607 */
struct PRESENCE_CONTEXT
{
  unsigned int dwContextId;
  unsigned int dwContextValue;
};

/* 5608 */
#pragma pack(push, 8)
struct _XENUMERATOR_XGI
{
  unsigned int dwTitleId;
  unsigned __int64 xuid;
  unsigned int dwUserIndex;
  unsigned int dwDetailFlags;
  unsigned int dwCurrentOffset;
  int fServer;
};
#pragma pack(pop)

/* 5609 */
#pragma pack(push, 8)
struct _XGI_CREATEENUM_MSG
{
  unsigned int dwTitleId;
  unsigned int dwUserIndex;
  unsigned __int64 xuid;
  unsigned int dwDetailFlags;
  unsigned int dwStartingIndex;
  _XENUMERATOR_XGI *pxenum;
};
#pragma pack(pop)

/* 5610 */
struct _P_TEAM_RECRUIT_MSG_NAME
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned __int64 qwTeamID;
  unsigned __int64 qwMemberID;
  char szMemberName[16];
  unsigned int dwMemberPriv;
  unsigned int dwMessageFlags;
  unsigned __int16 cbMemberData;
  unsigned __int16 cbDetails;
  char *pbMemberData;
};

/* 5611 */
struct _XPNGENCODE_PARAMS
{
  char *pbInputBuffer;
  unsigned int dwInputBufferWidth;
  unsigned int dwInputBufferHeight;
  unsigned int dwInputBufferPitch;
  char *pbOutBuffer;
  unsigned int *pdwOutBufferLen;
  _XOVERLAPPED *pOverlapped;
};

/* 5612 */
struct _P_TEAM_DELETE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned __int64 qwTeamID;
};

/* 5613 */
struct _XMSG_GAME_INVITE_CANCEL
{
  unsigned __int64 XuidUser;
  unsigned __int16 cInvitees;
  unsigned __int64 *pXuidInvitees;
  XNKID SessionID;
  _XOVERLAPPED pXOverlapped[1];
};

/* 5614 */
struct ID3DXFileVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXFile *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXFile *);
  unsigned int (__cdecl *Release)(ID3DXFile *);
  HRESULT (__cdecl *CreateEnumObject)(ID3DXFile *, const void *, unsigned int, ID3DXFileEnumObject **);
  HRESULT (__cdecl *CreateSaveObject)(ID3DXFile *, const void *, unsigned int, unsigned int, ID3DXFileSaveObject **);
  HRESULT (__cdecl *RegisterTemplates)(ID3DXFile *, const void *, unsigned int);
  HRESULT (__cdecl *RegisterEnumTemplates)(ID3DXFile *, ID3DXFileEnumObject *);
};

/* 5615 */
struct _SGADDR2
{
  in_addr inaSg;
  unsigned int dwSpiSg;
  unsigned __int64 qwXboxID;
  char bPlatform;
  char abReserved[3];
};

/* 5616 */
struct _XONLINE_STATS_ENUM_BY_USER_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 Xuid;
  unsigned int dwPageSize;
  unsigned int dwNumSpecs;
  _XONLINE_STATS_SPEC *pSpecs;
  _XONLINE_STATS_ENUM_RESULTS *pResults;
};

/* 5617 */
struct _cpinfoexW
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
  unsigned __int16 UnicodeDefaultChar;
  unsigned int CodePage;
  unsigned __int16 CodePageName[260];
};

/* 5618 */
struct _XMATCH_SESSION
{
  unsigned int dwMessageLength;
  XNKID SessionID;
  unsigned int dwTitleID;
  XNADDR HostAddress;
  unsigned int dwPublicOpen;
  unsigned int dwPrivateOpen;
  unsigned int dwPublicFilled;
  unsigned int dwPrivateFilled;
  unsigned int dwNumAttributes;
};

/* 5619 */
struct _XENUMERATORTITLESERVER
{
  char szServerInfo[200];
  unsigned int dwCurrentIndex;
  unsigned int cbReplyBuffer;
  char *pbReplyBuffer;
};

/* 5620 */
struct ID3DXAnimationControllerVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXAnimationController *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXAnimationController *);
  unsigned int (__cdecl *Release)(ID3DXAnimationController *);
  unsigned int (__cdecl *GetMaxNumAnimationOutputs)(ID3DXAnimationController *);
  unsigned int (__cdecl *GetMaxNumAnimationSets)(ID3DXAnimationController *);
  unsigned int (__cdecl *GetMaxNumTracks)(ID3DXAnimationController *);
  unsigned int (__cdecl *GetMaxNumEvents)(ID3DXAnimationController *);
  HRESULT (__cdecl *RegisterAnimationOutput)(ID3DXAnimationController *, const char *, _D3DMATRIX *, _D3DVECTOR *, D3DXQUATERNION *, _D3DVECTOR *);
  HRESULT (__cdecl *RegisterAnimationSet)(ID3DXAnimationController *, ID3DXAnimationSet *);
  HRESULT (__cdecl *UnregisterAnimationSet)(ID3DXAnimationController *, ID3DXAnimationSet *);
  unsigned int (__cdecl *GetNumAnimationSets)(ID3DXAnimationController *);
  HRESULT (__cdecl *GetAnimationSet)(ID3DXAnimationController *, unsigned int, ID3DXAnimationSet **);
  HRESULT (__cdecl *AdvanceTime)(ID3DXAnimationController *, double, ID3DXAnimationCallbackHandler *);
  HRESULT (__cdecl *ResetTime)(ID3DXAnimationController *);
  double (__cdecl *GetTime)(ID3DXAnimationController *);
  HRESULT (__cdecl *SetTrackAnimationSet)(ID3DXAnimationController *, unsigned int, ID3DXAnimationSet *);
  HRESULT (__cdecl *GetTrackAnimationSet)(ID3DXAnimationController *, unsigned int, ID3DXAnimationSet **);
  HRESULT (__cdecl *SetTrackPriority)(ID3DXAnimationController *, unsigned int, _D3DXPRIORITY_TYPE);
  HRESULT (__cdecl *SetTrackSpeed)(ID3DXAnimationController *, unsigned int, float);
  HRESULT (__cdecl *SetTrackWeight)(ID3DXAnimationController *, unsigned int, float);
  HRESULT (__cdecl *SetTrackPosition)(ID3DXAnimationController *, unsigned int, double);
  HRESULT (__cdecl *SetTrackEnable)(ID3DXAnimationController *, unsigned int, int);
  HRESULT (__cdecl *SetTrackDesc)(ID3DXAnimationController *, unsigned int, _D3DXTRACK_DESC *);
  HRESULT (__cdecl *GetTrackDesc)(ID3DXAnimationController *, unsigned int, _D3DXTRACK_DESC *);
  HRESULT (__cdecl *SetPriorityBlend)(ID3DXAnimationController *, float);
  float (__cdecl *GetPriorityBlend)(ID3DXAnimationController *);
  unsigned int (__cdecl *KeyTrackSpeed)(ID3DXAnimationController *, unsigned int, float, double, double, _D3DXTRANSITION_TYPE);
  unsigned int (__cdecl *KeyTrackWeight)(ID3DXAnimationController *, unsigned int, float, double, double, _D3DXTRANSITION_TYPE);
  unsigned int (__cdecl *KeyTrackPosition)(ID3DXAnimationController *, unsigned int, double, double);
  unsigned int (__cdecl *KeyTrackEnable)(ID3DXAnimationController *, unsigned int, int, double);
  unsigned int (__cdecl *KeyPriorityBlend)(ID3DXAnimationController *, float, double, double, _D3DXTRANSITION_TYPE);
  HRESULT (__cdecl *UnkeyEvent)(ID3DXAnimationController *, unsigned int);
  HRESULT (__cdecl *UnkeyAllTrackEvents)(ID3DXAnimationController *, unsigned int);
  HRESULT (__cdecl *UnkeyAllPriorityBlends)(ID3DXAnimationController *);
  unsigned int (__cdecl *GetCurrentTrackEvent)(ID3DXAnimationController *, unsigned int, _D3DXEVENT_TYPE);
  unsigned int (__cdecl *GetCurrentPriorityBlend)(ID3DXAnimationController *);
  unsigned int (__cdecl *GetUpcomingTrackEvent)(ID3DXAnimationController *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetUpcomingPriorityBlend)(ID3DXAnimationController *, unsigned int);
  HRESULT (__cdecl *ValidateEvent)(ID3DXAnimationController *, unsigned int);
  HRESULT (__cdecl *GetEventDesc)(ID3DXAnimationController *, unsigned int, _D3DXEVENT_DESC *);
  HRESULT (__cdecl *CloneAnimationController)(ID3DXAnimationController *, unsigned int, unsigned int, unsigned int, unsigned int, ID3DXAnimationController **);
};

/* 5621 */
struct _CDROM_SUB_Q_DATA_FORMAT
{
  char Format;
  char Track;
};

/* 5622 */
struct _NOTIFICATION_UPDATE_STATE_FLAGS
{
  unsigned __int64 UserXuid;
  unsigned int dwStateFlagsSet;
  unsigned int dwStateFlagsClear;
};

/* 5623 */
struct _SET_USER_SETTINGS2_REQUEST_STRUCT
{
  unsigned __int64 qwUserId;
  unsigned __int16 bTier;
  unsigned __int16 dwUserFlags;
  unsigned int rgPrivileges[8];
};

/* 5624 */
struct _XINPUT_DEVICE_STATS
{
  unsigned int ulBatteryLevel;
  unsigned int ulBatteryType;
  unsigned int ulSignalStrength;
  unsigned int ulDeviceType;
  unsigned int ulDevicePort;
  unsigned int ulDeviceVersion;
  int fJumped;
};

/* 5625 */
struct XGI_SESSIONSTATE_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  unsigned int dwFlags;
  unsigned __int64 qwSessionNonce;
};

/* 5626 */
struct _P_DELETE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwSenderID;
  unsigned __int64 qwBuddyID;
};

/* 5627 */
struct _REVOCATION_LIST_ENTRY
{
  char abDigest[20];
};

/* 5628 */
struct _XGET_REVOCATION_LIST_REPLY
{
  char abSignature[256];
  char abServerNonce[16];
  unsigned int dwNumListEntries;
  _REVOCATION_LIST_ENTRY *pEntries;
};

/* 5629 */
struct _XGET_REVOCATION_LIST_REQUEST
{
  char abClientNonce[16];
  _XGET_REVOCATION_LIST_REPLY *pResults;
};

/* 5630 */
struct _BASIC_TITLE_INFO
{
  unsigned __int16 wTitleLength;
  unsigned __int16 *wszTitle;
  unsigned int dwTitleId;
  char bPlayed;
  unsigned int dwPurchasedContentCount;
  unsigned int dwTotalContentCount;
  char bNewContentExists;
};

/* 5631 */
struct _ENUMERATE_TITLES_BY_FILTER_RESPONSE
{
  unsigned int dwTitlesReturned;
  _BASIC_TITLE_INFO *pInfos;
  unsigned int dwTotalTitleCount;
};

/* 5632 */
struct _ACCOUNT_ACKNOWLEDGE_DOWNGRADE_REQUEST
{
  unsigned __int64 qwUserId;
};

/* 5633 */
struct _XSTORAGE_DOWNLOAD_TO_DIRECTORY_PARAMS_INTERNAL
{
  unsigned int dwUserIndex;
  unsigned int dwServerPathLength;
  unsigned __int16 *wszServerPath;
  unsigned int dwDisplayNameLength;
  unsigned __int16 *wszDisplayName;
  unsigned int DeviceID;
  _XSTORAGE_DOWNLOAD_TO_DIRECTORY_RESULTS_INTERNAL *pResults;
};

/* 5634 */
struct XGI_SESSIONMODIFY_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  unsigned int dwFlags;
  unsigned int dwMaxPublicSlots;
  unsigned int dwMaxPrivateSlots;
};

/* 5635 */
struct _XMATCH_DEAD_SG
{
  unsigned int dwMessageLength;
  _SGADDR sgaddr;
};

/* 5636 */
struct _P_PEER_UNSUBSCRIBE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
};

/* 5637 */
struct _IMAGE_XEX_HEADER
{
  unsigned int Magic;
  unsigned int ModuleFlags;
  unsigned int SizeOfHeaders;
  unsigned int SizeOfDiscardableHeaders;
  _XEX_SECURITY_INFO *SecurityInfo;
  unsigned int HeaderDirectoryEntryCount;
};

/* 5638 */
struct IDirectXFileDataVtbl
{
  HRESULT (__cdecl *QueryInterface)(IDirectXFileData *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IDirectXFileData *);
  unsigned int (__cdecl *Release)(IDirectXFileData *);
  HRESULT (__cdecl *GetName)(IDirectXFileData *, char *, unsigned int *);
  HRESULT (__cdecl *GetId)(IDirectXFileData *, _GUID *);
  HRESULT (__cdecl *GetData)(IDirectXFileData *, const char *, unsigned int *, void **);
  HRESULT (__cdecl *GetType)(IDirectXFileData *, _GUID **);
  HRESULT (__cdecl *GetNextObject)(IDirectXFileData *, IDirectXFileObject **);
  HRESULT (__cdecl *AddDataObject)(IDirectXFileData *, IDirectXFileData *);
  HRESULT (__cdecl *AddDataReference)(IDirectXFileData *, const char *, _GUID *);
  HRESULT (__cdecl *AddBinaryObject)(IDirectXFileData *, const char *, _GUID *, const char *, void *, unsigned int);
};

/* 5639 */
struct XECRYPT_SHA_STATE
{
  unsigned int count;
  unsigned int state[5];
  char buffer[64];
};

/* 5640 */
struct _CONTENT_ENUMERATE_REQUEST
{
  unsigned __int64 qwUserId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned __int16 wGameRating;
  unsigned int dwOfferType;
  unsigned int dwPaymentType;
  char bTier;
  unsigned int dwTitleId;
  unsigned int dwTitleCategories;
  char bRequestFlags;
  unsigned int dwStartingIndex;
  unsigned int dwMaxResults;
  unsigned int dwGenreId;
  _CONTENT_ENUMERATE_RESPONSE *pResults;
};

/* 5641 */
struct _MIGRATE_XBOX_COM_USER_RESPONSE
{
  unsigned __int64 qwUserId;
  char abXenonKey[16];
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  unsigned __int16 wDomainLength;
  unsigned __int16 *wszDomain;
  unsigned __int16 wRealmLength;
  unsigned __int16 *wszRealm;
  unsigned int dwParentalControlGroupId;
  unsigned int dwCultureId;
};

/* 5642 */
struct _MIGRATE_XBOX_COM_USER_REQUEST
{
  _PASSPORT_SESSION_TOKEN pUserSessionToken[1];
  unsigned __int64 qwOfflineXuid;
  unsigned int dwTitleId;
  unsigned __int64 qwMachineId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned __int64 qwOfferId;
  unsigned __int16 wBillingTokenLength;
  unsigned __int16 *wszBillingToken;
  unsigned __int16 wFirstNameLength;
  unsigned __int16 *wszFirstName;
  unsigned __int16 wLastNameLength;
  unsigned __int16 *wszLastName;
  unsigned __int16 wEmailLength;
  unsigned __int16 *wszEmail;
  _ADDRESS_INFO address;
  _PHONE_INFO phone;
  char bPaymentTypeId;
  _CREDIT_CARD_INFO creditCard;
  _DIRECT_DEBIT_INFO directDebit;
  _MIGRATE_XBOX_COM_USER_RESPONSE *pResponse;
};

/* 5643 */
struct _XONLINE_THROUGHPUT_STATS
{
  unsigned int dwSizeOfStruct;
  unsigned int dwAverageXmitBps1;
  unsigned int dwAverageRecvBps1;
  unsigned int dwAverageXmitBps10;
  unsigned int dwAverageRecvBps10;
  unsigned int dwAverageXmitBps30;
  unsigned int dwAverageRecvBps30;
  unsigned int dwPeakXmitBps10;
  unsigned int dwPeakRecvBps10;
  unsigned int dwPeakXmitBps30;
  unsigned int dwPeakRecvBps30;
  unsigned int dwPeakXmitBps60;
  unsigned int dwPeakRecvBps60;
  unsigned int dwMinXmitBps10;
  unsigned int dwMinRecvBps10;
  unsigned int dwMinXmitBps60;
  unsigned int dwMinRecvBps60;
};

/* 5644 */
struct _P_INVITE_2_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwSenderContext;
  unsigned int dwTitleID;
  unsigned int dwMessageFlags;
  unsigned __int16 cInvitees;
  unsigned __int16 cbDetails;
  unsigned __int64 *pqwInviteeIDs;
  _XMSG_DETAILS *pDetails;
};

/* 5645 */
#pragma pack(push, 4)
struct _XVOICEMAILUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwFlags;
  char *pbVoiceBuffer;
  unsigned int cbVoiceBufferSize;
  unsigned int cbVoiceRecordedBufferSize;
  unsigned __int16 wVoiceCodec;
  char *pbPhotoBuffer;
  unsigned int cbPhotoBufferSize;
  unsigned int cbPhotoRecordedBufferSize;
  unsigned __int16 wPhotoWidth;
  unsigned __int16 wPhotoHeight;
  unsigned __int16 wPhotoCodec;
  _XVOICEMAILUI_RESULTS *pResults;
};
#pragma pack(pop)

/* 5646 */
struct _XSIGNATURE_CONTENT_TUPLE
{
  unsigned int dwTitleId;
  unsigned int dwTitleVersion;
  unsigned __int64 qwConsolePuid;
  char pConsoleId[5];
  unsigned __int64 pUserPuids[4];
  char pDigest[20];
};

/* 5647 */
struct _XSIGNATURE_CHECK_REVOCATION_REQUEST
{
  unsigned int dwNumContentTuples;
  _XSIGNATURE_CONTENT_TUPLE *pTuples;
  _XSIGNATURE_CHECK_REVOCATION_RESPONSE *pResponse;
};

/* 5648 */
union XCALCSIG_SIGNATURE
{
  char Signature[20];
  char LiveSignature[100];
};

/* 5649 */
struct _Q_MESSAGE_DETAILS_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwMessageID;
  unsigned int dwFlagsToSet;
  unsigned int dwFlagsToClear;
  _XMSG_DETAILS_BLOB *pResults;
};

/* 5650 */
struct _UPDATE_PARENTAL_CONTROLS_STRUCT
{
  unsigned __int64 qwUserId;
  unsigned int rgGrantPrivileges[8];
  unsigned int rgRestrictPrivileges[8];
  unsigned __int16 wSourceLength;
  unsigned __int16 *wszSource;
};

/* 5651 */
struct _FIND_USERS_RESPONSE
{
  unsigned int dwResults;
  _FIND_USER_INFO *pUsers;
};

/* 5652 */
struct _FIND_USERS_REQUEST
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserId;
  unsigned int dwUsers;
  _FIND_USER_INFO *pUsers;
  _FIND_USERS_RESPONSE *pResults;
};

/* 5653 */
#pragma pack(push, 8)
struct _XENUMERATORCONTENTOFFER
{
  unsigned __int64 qwUserId;
  unsigned int dwCountryId;
  unsigned int dwLanguageId;
  unsigned int dwGameRating;
  unsigned int dwOfferType;
  unsigned int dwPaymentType;
  unsigned int dwTier;
  unsigned int dwTitleId;
  unsigned int dwTitleCategories;
  unsigned int dwRequestFlags;
  unsigned int dwCurrentIndex;
  unsigned int dwGenreId;
  unsigned int cbResults;
  _CONTENT_ENUMERATE_RESPONSE *pResults;
};
#pragma pack(pop)

/* 5654 */
struct _P_FIND_USER_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwFindID;
  char szSenderName[16];
};

/* 5655 */
struct XECRYPT_RSAPRV_2048
{
  XECRYPT_RSA Rsa;
  unsigned __int64 aqwM[32];
  unsigned __int64 aqwP[16];
  unsigned __int64 aqwQ[16];
  unsigned __int64 aqwDP[16];
  unsigned __int64 aqwDQ[16];
  unsigned __int64 aqwCR[16];
};

/* 5656 */
struct _XONLINE_STATS_READ_REQUEST
{
  unsigned int dwTitleId;
  unsigned int dwNumXuids;
  unsigned __int64 *pXuids;
  unsigned int dwNumSpecs;
  _XONLINE_STATS_SPEC *pSpecs;
  _XONLINE_STATS_READ_RESULTS *pResults;
};

/* 5657 */
struct _XEX_CALLCAP_IMPORTS
{
  unsigned int BeginFunctionThunkAddress;
  unsigned int EndFunctionThunkAddress;
};

/* 5658 */
struct _XUSER_ADDPLAYER_MSG
{
  unsigned int dwUserIndex;
  unsigned int dwResult;
  _XUSER_PLAYERLIST_ITEM item;
};

/* 5659 */
struct _TESTXEXSYSINFO
{
  unsigned int dwBuildVer;
  unsigned int dwBuildFlags;
  unsigned int dwHardwareVer;
};

/* 5660 */
struct _XUPDATE_REFERRAL_RESPONSE
{
  unsigned __int16 wFlags;
  unsigned __int16 wNumLocations;
  unsigned int dwPackageSize;
  unsigned int dwInstallSize;
  unsigned int dwVersion;
  char rgbSymKey[16];
  char rgbPubKey[284];
  _XREFERRAL_LOCATION *pReferralLocations;
};

/* 5661 */
struct ID3DXMatrixStackVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXMatrixStack *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXMatrixStack *);
  unsigned int (__cdecl *Release)(ID3DXMatrixStack *);
  HRESULT (__cdecl *Pop)(ID3DXMatrixStack *);
  HRESULT (__cdecl *Push)(ID3DXMatrixStack *);
  HRESULT (__cdecl *LoadIdentity)(ID3DXMatrixStack *);
  HRESULT (__cdecl *LoadMatrix)(ID3DXMatrixStack *, _D3DMATRIX *);
  HRESULT (__cdecl *MultMatrix)(ID3DXMatrixStack *, _D3DMATRIX *);
  HRESULT (__cdecl *MultMatrixLocal)(ID3DXMatrixStack *, _D3DMATRIX *);
  HRESULT (__cdecl *RotateAxis)(ID3DXMatrixStack *, _D3DVECTOR *, float);
  HRESULT (__cdecl *RotateAxisLocal)(ID3DXMatrixStack *, _D3DVECTOR *, float);
  HRESULT (__cdecl *RotateYawPitchRoll)(ID3DXMatrixStack *, float, float, float);
  HRESULT (__cdecl *RotateYawPitchRollLocal)(ID3DXMatrixStack *, float, float, float);
  HRESULT (__cdecl *Scale)(ID3DXMatrixStack *, float, float, float);
  HRESULT (__cdecl *ScaleLocal)(ID3DXMatrixStack *, float, float, float);
  HRESULT (__cdecl *Translate)(ID3DXMatrixStack *, float, float, float);
  HRESULT (__cdecl *TranslateLocal)(ID3DXMatrixStack *, float, float, float);
  _D3DMATRIX *(__cdecl *GetTop)(ID3DXMatrixStack *);
};

/* 5662 */
struct _XEX_SECTION_HEADER
{
  char SectionName[8];
  unsigned int VirtualAddress;
  unsigned int VirtualSize;
};

/* 5663 */
struct XECRYPT_SIG
{
  unsigned __int64 aqwPad[28];
  char bOne;
  char abSalt[10];
  char abHash[20];
  char bEnd;
};

/* 5664 */
struct __declspec(align(8)) _VERIFY_INFORMATION
{
  _LARGE_INTEGER StartingOffset;
  unsigned int Length;
};

/* 5665 */
struct _XUPDATE_REFERRAL_REQUEST
{
  unsigned __int64 qwMachineId;
  unsigned int dwTitleId;
  unsigned int dwVersion;
  _XUPDATE_REFERRAL_RESPONSE *pResults;
};

/* 5666 */
struct XGI_WRITEGAMERTILE2_MSG
{
  int fForEnumerate;
  unsigned int dwUserIndex;
  unsigned int dwTitleId;
  unsigned int dwImageId;
  unsigned int dwImageIdSmall;
  int fUpdateSetting;
  unsigned int dwFlags;
  char *pbImageBig;
  unsigned int cbImageBig;
  char *pbImageSmall;
  unsigned int cbImageSmall;
  unsigned int dwUnused;
};

/* 5667 */
#pragma pack(push, 8)
struct _XUSER_PRIVILEGE_MSG
{
  unsigned __int64 xuidUser;
  unsigned __int64 *pXuids;
  unsigned int dwXuidCount;
  int fResult;
  unsigned int dwPrivilege;
  _XOVERLAPPED *pOverlapped;
};
#pragma pack(pop)

/* 5668 */
struct _TESTXEXXUILOCK
{
  int fWait;
  unsigned int dwTime;
};

/* 5669 */
struct _SUBSCRIPTION_DETAILS_RESPONSE
{
  _BASIC_SUBSCRIPTION_INFO basicInfo;
};

/* 5670 */
struct _SUBSCRIPTION_DETAILS_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned __int64 qwOfferID;
  unsigned int dwPaymentType;
  char bUserTier;
  char bRatingSystem;
  _SUBSCRIPTION_DETAILS_RESPONSE *pResults;
};

/* 5671 */
struct _XMSG_DELETE_REQUEST
{
  unsigned __int64 XuidUser;
  unsigned int dwMessageID;
  int fBlockSender;
  _XOVERLAPPED pXOverlapped[1];
};

/* 5672 */
struct _Q_DELETE_MESSAGE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwMessageID;
  unsigned int dwFlags;
};

/* 5673 */
struct _XCONTSIG_HEADER
{
  char HeaderSignature[20];
  unsigned int MagicNumber;
  unsigned int SizeOfHeader;
  unsigned int FormatVersion;
  unsigned int SignatureFlags;
  unsigned int TitleID;
  unsigned __int64 OfferingID;
  unsigned int ContentFlags;
  _XCONTSIG_SECTION Metadata;
  _XCONTSIG_SECTION ContentSignatures;
  _XCONTSIG_SECTION LiveSignature;
};

/* 5674 */
struct _XSYSLOADINPUT
{
  unsigned int dwFlags;
  void *pvParam;
  HINSTANCE__ *hInstance;
  unsigned int dwUserIndex;
};

/* 5675 */
struct _PASSPORT_ENCRYPTED_PROXY_PARAMETERS
{
  unsigned __int16 wLoginTokenRequestLength;
  char *pbLoginTokenRequest;
  unsigned int dwPublicKeyPublicExponent;
  unsigned __int16 wPublicKeyModulusLength;
  char *pbPublicKeyModulus;
  char abPublicKeyDigest[20];
};

/* 5676 */
struct _QUERY_SELECT_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned __int64 qwTeamId;
  unsigned int dwDatasetId;
  unsigned __int64 qwEntityId;
  unsigned int dwActionId;
  unsigned int dwNumAttributes;
  _XONLINE_QUERY_ATTRIBUTE *pAttributes;
};

/* 5677 */
struct _XCONTSIG_LIVE_SIGNATURE
{
  unsigned __int16 DataSize;
  unsigned __int16 FormatVersion;
  unsigned int SignatureFlags;
  unsigned int Reserved;
  char Signature[100];
};

/* 5678 */
struct _XDASHLAUNCHDATA
{
  unsigned int dwVersion;
  unsigned int dwCommand;
  unsigned int dwUserIndex;
  char Reserved[1008];
};

/* 5679 */
struct _DMREGISTERPERFCOUNTERPARAMBLOCK
{
  const char *szName;
  unsigned int dwType;
  void *pvArg;
};

/* 5680 */
struct _TEAM_ENUM_BY_XUID_RESULTS
{
  unsigned int cTeams;
  _XONLINE_USER_TEAM *rgsTeams;
};

/* 5681 */
struct _P_TEAM_LIST_TEAMS_MSG_XUID
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  _TEAM_ENUM_BY_XUID_RESULTS *pvResults;
};

/* 5682 */
struct _XCONTSIG_FILELIST_ENTRY
{
  unsigned __int16 LeftIndex;
  unsigned __int16 RightIndex;
  unsigned __int16 SignatureCount;
  unsigned __int16 FileNameLength;
  unsigned int FileSize;
};

/* 5683 */
struct ID3DXFileEnumObjectVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXFileEnumObject *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXFileEnumObject *);
  unsigned int (__cdecl *Release)(ID3DXFileEnumObject *);
  HRESULT (__cdecl *GetFile)(ID3DXFileEnumObject *, ID3DXFile **);
  HRESULT (__cdecl *GetChildren)(ID3DXFileEnumObject *, unsigned int *);
  HRESULT (__cdecl *GetChild)(ID3DXFileEnumObject *, unsigned int, ID3DXFileData **);
  HRESULT (__cdecl *GetDataObjectById)(ID3DXFileEnumObject *, _GUID *const , ID3DXFileData **);
  HRESULT (__cdecl *GetDataObjectByName)(ID3DXFileEnumObject *, const char *, ID3DXFileData **);
};

/* 5684 */
struct _EX_XCONFIG_REGISTRATION
{
  void (__cdecl *NotificationRoutine)(__int16, __int16);
  _LIST_ENTRY ListEntry;
};

/* 5685 */
struct _XUSER_ENUMPLAYER_MSG
{
  unsigned int dwUserIndex;
  unsigned int dwStartingIndex;
  unsigned int cItem;
  _XUSER_PLAYER_ENUM *pxenum;
};

/* 5686 */
struct _XREVOCATION_VERIFY_PARAMS
{
  unsigned int dwFlags;
};

/* 5687 */
struct _RTL_HEAP_PARAMETERS
{
  unsigned int Length;
  unsigned int SegmentReserve;
  unsigned int SegmentCommit;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned int MaximumAllocationSize;
  unsigned int VirtualMemoryThreshold;
  unsigned int InitialCommit;
  unsigned int InitialReserve;
  int (__cdecl *CommitRoutine)(void *, void **, unsigned int *);
  unsigned int Reserved[2];
};

/* 5688 */
struct _Q_DEQUEUE_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int16 wQType;
  unsigned int dwStartItemID;
  unsigned __int16 wMaxItems;
  unsigned int dwMaxTotalItemDataSize;
};

/* 5689 */
struct _X_CACHE_DB_ENTRY
{
  unsigned int dwTitleId;
  unsigned int nCacheIndex;
  int fUsed;
};

/* 5690 */
struct _XBOX_CACHE_DB_SECTOR
{
  unsigned int SectorBeginSignature;
  unsigned int Version;
  char Data[496];
  unsigned int SectorEndSignature;
};

/* 5691 */
struct _STRING_LOOKUP_RESPONSE
{
  unsigned __int16 wNumStrings;
  _STRING_DATA *pStringData;
};

/* 5692 */
struct _STRING_V1_TITLE_ID_REQUEST
{
  unsigned __int16 wType;
  unsigned __int16 wLanguage;
  unsigned __int16 wNumTitles;
  unsigned int *pTitleIDs;
  _STRING_LOOKUP_RESPONSE *pResults;
};

/* 5693 */
#pragma pack(push, 8)
struct _XSHOWMARKETPLACEUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned __int64 UserXuid;
  unsigned int dwEntryPoint;
  unsigned __int64 qwOfferID;
  unsigned int dwOfferType;
  unsigned int dwContentCategories;
  char bRequestFlags;
  unsigned __int64 qwSourceId;
  unsigned int dwTitleId;
  char bOnlineCountry;
  _MP_BILLING_ACCOUNT_INFO *pBillingInfo;
  _XOVERLAPPED *pOverlapped;
  const unsigned __int64 *pOfferIDs;
  unsigned int dwOfferIdCount;
  HRESULT *phrResult;
  void *pVoid;
};
#pragma pack(pop)

/* 5694 */
struct _XGD2_GET_TEST_INFO
{
  unsigned int HashTableIndexLBA;
  char BCADescriptor;
  char Reserved[3];
};

/* 5695 */
struct _XMATCH_SESSION_DELETE_REQUEST
{
  unsigned int dwMessageLength;
  XNKID SessionID;
  unsigned int dwTitleID;
};

/* 5696 */
struct TEST_CHANGEXEXINFO_MSG
{
  unsigned int dwTitleID;
  char szSpaFilename[64];
};

/* 5697 */
struct _DM_FILEEVENT_DATA
{
  unsigned int dwID;
  DM_FILEEVENT_API FileEventType;
  void *FileHandle;
  _OBJECT_ATTRIBUTES *ObjectAttributes;
  int ResultStatus;
  unsigned int Length;
  _LARGE_INTEGER *ByteOffset;
  _IO_STATUS_BLOCK *IoStatusBlock;
  void *ApcContext;
  unsigned int Flags;
};

/* 5698 */
struct _VERIFY_BILLING_TOKEN_REQUEST
{
  char bCountryId;
  unsigned __int16 wBillingTokenLength;
  unsigned __int16 *wszBillingToken;
  _VERIFY_BILLING_TOKEN_RESPONSE *pResponse;
};

/* 5699 */
struct _P_TEAM_RECRUIT_MSG_XUID
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned __int64 qwTeamID;
  unsigned __int64 qwMemberID;
  char szMemberName[16];
  unsigned int dwMemberPriv;
  unsigned int dwMessageFlags;
  unsigned __int16 cbMemberData;
  unsigned __int16 cbDetails;
  char *pbMemberData;
};

/* 5700 */
struct ID3DXEffectPoolVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXEffectPool *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXEffectPool *);
  unsigned int (__cdecl *Release)(ID3DXEffectPool *);
};

/* 5701 */
struct _XCONFIG_XNET_SETTINGS
{
  unsigned int Version;
  char Data[492];
};

/* 5702 */
struct XSTORAGEDEVICECHANGE_PARAMS
{
  char szDevicePath[260];
  int fRemoved;
  unsigned int deviceType;
  unsigned int deviceId;
  DEVICESTATE eState;
};

/* 5703 */
struct _P_ADD_2_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwSenderID;
  unsigned __int64 qwBuddyID;
  unsigned int dwMessageFlags;
  unsigned __int16 cbDetails;
  char szBuddyAcctName[16];
};

/* 5704 */
struct _VERIFY_PARENT_CREDIT_CARD_REQUEST
{
  unsigned __int64 qwMachineId;
  unsigned int dwTitleId;
  _PASSPORT_SESSION_TOKEN pParentSessionToken[1];
  unsigned __int16 wParentPassportMemberNameLength;
  char *szParentPassportMemberName;
  unsigned __int16 wLanguageId;
  char bCountryId;
  unsigned __int16 wFirstNameLength;
  unsigned __int16 *wszFirstName;
  unsigned __int16 wLastNameLength;
  unsigned __int16 *wszLastName;
  unsigned __int16 wEmailLength;
  unsigned __int16 *wszEmail;
  _ADDRESS_INFO address;
  _PHONE_INFO phone;
  _CREDIT_CARD_INFO creditCardInfo;
};

/* 5705 */
struct _XCONTENT_DOWNLOAD_GET_INPROGRESS_METADATA
{
  unsigned int dwUserIndex;
  char *pbContentId;
  unsigned int dwTargetDirectoryLength;
  char *szTargetDirectory;
  char pContentHeader[1];
  char pContentMetaData[1];
  char pbOtherMetaData[1];
  unsigned int pdwOtherMetaDataSize[1];
};

/* 5706 */
struct _XPNGDECODE_PARAMS
{
  char *pbInputBuffer;
  unsigned int dwInputBufferLen;
  char *pbOutputTextureBits;
  unsigned int cbOutputTextureBits;
  D3DTexture *pOutputTexture;
  struct _XUIBRUSH **phOutputTextureBrush;
  _XOVERLAPPED *pOverlapped;
};

/* 5707 */
#pragma pack(push, 8)
struct XGI_USERSETCONTEXT_MSG
{
  unsigned int dwUserIndex;
  unsigned __int64 xuid;
  unsigned int dwContextId;
  unsigned int dwContextValue;
};
#pragma pack(pop)

/* 5708 */
struct _Q_LIST_REPLY_MSG
{
  _BASE_MSG_HEADER MsgHeader;
  unsigned __int64 qwUserID;
  unsigned __int16 wQType;
  HRESULT hr;
  unsigned int dwNextItemID;
  unsigned __int16 wQLeft;
  unsigned __int16 wNumItems;
  unsigned int dwTotalItemDataSize;
  unsigned int cdwQVals;
  unsigned int *rgdwQVals;
  _Q_LIST_ITEM *rgItems;
};

/* 5709 */
struct _XNOTIFICATION_SEND_DEQUEUE
{
  _Q_DEQUEUE_MSG pDequeueMsg[1];
  _Q_LIST_REPLY_MSG *pReply;
};

/* 5710 */
struct _XCONFIG_MEDIA_CENTER_SETTINGS
{
  unsigned int CheckSum;
  unsigned int Version;
  char MediaPlayer[20];
  char XeSledVersion[10];
  char XeSledTrustSecret[20];
  char XeSledTrustCode[8];
  char XeSledHostID[20];
  char XeSledKey[1628];
  char XeSledHostMACAddress[6];
  char ServerUUID[16];
  char ServerName[128];
  char ServerFlag[4];
};

/* 5711 */
struct _BANNER_GET_LIST_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned int dwLangId;
  char bLevel;
  unsigned int dwStartingIndex;
  unsigned int dwMaxResults;
  _BANNER_LIST_RESULT *pResult;
};

/* 5712 */
struct $410D9883537241CF15ED774E1E5362B1
{
  unsigned int Settable;
  unsigned __int16 TagIndex;
  unsigned __int16 AllocatorBackTraceIndex;
  unsigned int Reserved[2];
};

/* 5713 */
struct $9982DB339D027BF9D9C73E7D57B25DEC
{
  unsigned int CommittedSize;
  unsigned int UnCommittedSize;
  void *FirstEntry;
  void *LastEntry;
};

/* 5714 */
union $D91C590F801CB1EFF0434EEA0F3F6D27
{
  $410D9883537241CF15ED774E1E5362B1 Block;
  $9982DB339D027BF9D9C73E7D57B25DEC Segment;
};

/* 5715 */
struct _RTL_HEAP_WALK_ENTRY
{
  void *DataAddress;
  unsigned int DataSize;
  char OverheadBytes;
  char SegmentIndex;
  unsigned __int16 Flags;
  $D91C590F801CB1EFF0434EEA0F3F6D27 Segment;
};

/* 5716 */
struct _XMSG_DESTROY
{
  void *hMsg;
};

/* 5717 */
struct _XARB_REPORT_STATS_BUNDLE
{
  unsigned int cbStats;
  _XSTATS_POST_REQUEST Stats;
};

/* 5718 */
struct _XARB_REPORT_BYTE_BUNDLE
{
  unsigned int cbBundle;
  char *pBundle;
};

/* 5719 */
struct _XARB_REPORT_REQUEST
{
  unsigned __int16 wProtocolVersion;
  unsigned __int16 wFlags;
  unsigned int dwTitleID;
  unsigned __int64 qwSessionID;
  unsigned __int64 qwSessionNonce;
  _XARB_REPORT_LOST_MACHINES *pLostMachines;
  _XARB_REPORT_SUSPICIOUS_INFO *pSuspiciousInfo;
  _XARB_REPORT_STATS_BUNDLE *pStatsBundle;
  _XARB_REPORT_BYTE_BUNDLE *pCompsBundle;
};

/* 5720 */
struct _P_DEAD_USER_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
};

/* 5721 */
struct DM_XAM_SERVICES_1888
{
  unsigned int Size;
  void (__cdecl *RebootTitle)(unsigned int);
};

/* 5722 */
struct _AP21_MEASUREMENT_INPUT
{
  unsigned int LogicalBlockAddress[2];
};

/* 5723 */
struct _XSYSLOADOUTPUT
{
  unsigned int cbPersist;
};

/* 5724 */
struct _STRING_VERIFY_2_REQUEST
{
  unsigned int dwTitleID;
  unsigned int dwFlags;
  unsigned __int16 wLocaleLen;
  unsigned __int16 wNumStrings;
  char *szLocale;
  _STRING_DATA *pStringData;
  _STRING_VERIFY_RESPONSE *pResults;
};

/* 5725 */
struct _PASSPORT_GET_MEMBER_NAME_RESPONSE
{
  unsigned __int16 wUserPmnLength;
  unsigned __int16 *wszUserPmn;
  unsigned __int16 wParentPmnLength;
  unsigned __int16 *wszParentPmn;
};

/* 5726 */
struct _XEX_TLS_DATA
{
  unsigned int TlsSlotCount;
  void *AddressOfRawData;
  unsigned int SizeOfRawData;
  unsigned int SizeOfTlsData;
};

/* 5727 */
struct _XPRESENCE_SEND_DEAD_USER
{
  _P_DEAD_USER_MSG *pDeadUsers;
};

/* 5728 */
struct XECRYPT_HMACSHA_STATE
{
  XECRYPT_SHA_STATE ShaState[2];
};

/* 5729 */
struct _P_PEER_SUBSCRIBE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int16 cSrcUserIDs;
  unsigned __int64 *rgqwSrcUserIDs;
  _P_PEER_SUBSCRIBE_REPLY_MSG *pResults;
};

/* 5730 */
struct _XMSG_INVITE_SEND_MESSAGE_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwNumInvitees;
  unsigned __int64 *pXuidInvitees;
  unsigned int cchText;
  unsigned __int16 *pszText;
  void *hMsg;
};

/* 5731 */
struct _P_TEAM_MANAGE_MEMBER_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned __int64 qwTeamID;
  unsigned __int64 qwMemberID;
  unsigned int dwMemberPriv;
  unsigned __int16 cbMemberData;
  char *pbMemberData;
};

/* 5732 */
struct _STRING_LOOKUP_2_REQUEST
{
  unsigned int dwTitleID;
  unsigned __int16 wNumStrings;
  unsigned __int16 wLocaleLen;
  char *szLocale;
  unsigned int *pStringIDs;
  _STRING_LOOKUP_RESPONSE *pResults;
};

/* 5733 */
#pragma pack(push, 8)
struct _XSHOWFEEDBACKUI_PARAMS
{
  unsigned int dwUserIndex;
  unsigned __int64 _xuidFeedbackTarget;
  unsigned int _dEntryPoint;
};
#pragma pack(pop)

/* 5734 */
struct _INSTRUMENTATION_UPLOAD_REQUEST
{
  unsigned __int16 wLogLinesLen;
  char *szLogLines;
};

/* 5735 */
struct XECRYPT_RSAPRV_1536
{
  XECRYPT_RSA Rsa;
  unsigned __int64 aqwM[24];
  unsigned __int64 aqwP[12];
  unsigned __int64 aqwQ[12];
  unsigned __int64 aqwDP[12];
  unsigned __int64 aqwDQ[12];
  unsigned __int64 aqwCR[12];
};

/* 5736 */
struct _XPROFILE_SYNC_ACHIEVEMENTS_RESULT
{
  _FILETIME ftVersion;
  unsigned __int16 wTotalAchievements;
  unsigned __int16 wAchievementCount;
  _XPROFILE_ACHIEVEMENT *pAchievements;
};

/* 5737 */
struct _DM_ODD_MOUNT_DATA
{
  unsigned int RootDirStartSector;
  unsigned int RootDirSize;
};

/* 5738 */
#pragma pack(push, 4)
struct _cpinfo
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
};
#pragma pack(pop)

/* 5739 */
struct _USER_ACCOUNT_INFO
{
  _USER_XNAME xname;
  char rgbPasscode[4];
  _FILETIME ftBirthdate;
};

/* 5740 */
struct _PASSPORT_GET_SECRET_QUESTIONS_REQUEST
{
  unsigned __int16 wCountryId;
  unsigned __int16 wLanguageId;
  _PASSPORT_GET_SECRET_QUESTION_RESPONSE *pResult;
};

/* 5741 */
struct _RC4_HMAC_HEADER
{
  char Checksum[16];
  char Confounder[8];
};

/* 5742 */
struct _LSP_ENUMERATE_SERVER_INFO
{
  unsigned int dwIpSgLsp;
  unsigned int dwFlags;
  unsigned int dwServerInfoLength;
  char *szServerInfo;
};

/* 5743 */
struct _GET_PAYMENT_INSTRUMENTS_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned __int16 wMaxResults;
  _GET_PAYMENT_INSTRUMENTS_RESPONSE *pResponse;
};

/* 5744 */
struct _PASSPORT_GET_ENCRYPTED_PROXY_PARAMETERS_REQUEST
{
  unsigned int dwDummy;
  _PASSPORT_ENCRYPTED_PROXY_PARAMETERS *pResponse;
};

/* 5745 */
struct _XEX_IMPORT_DESCRIPTOR
{
  unsigned int Size;
  unsigned int NameTableSize;
  unsigned int ModuleCount;
};

/* 5746 */
struct _P_IS_AFFILIATE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwAffiliateID;
  _P_IS_AFFILIATE_REPLY_MSG *pReply;
};

/* 5747 */
struct _XMSG_SEND_RESULT
{
  unsigned __int16 cRecipients;
  _XMSG_SEND_RECIPIENT_RESULT *pRecipients;
};

/* 5748 */
struct _XMSG_SEND_PARAMS
{
  unsigned __int64 XuidSender;
  void *hMsg;
  unsigned int cRecipients;
  unsigned __int64 *pXuidRecipients;
  _XMSG_SEND_RESULT *pResults;
};

/* 5749 */
struct _XSTORAGE_DOWNLOAD_TO_MEMORY_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwServerPathLength;
  unsigned __int16 *wszServerPath;
  unsigned int dwBufferSize;
  unsigned int dwBufferPointer;
  _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS *pResults;
};

/* 5750 */
struct _XARB_TIMEEXTEND_REQUEST
{
  unsigned __int16 wProtocolVersion;
  unsigned __int16 wRequestFlags;
  unsigned int dwTitleID;
  unsigned __int64 qwSessionID;
  unsigned __int64 qwSessionNonce;
  unsigned __int16 wMaxSessionSecondsFromNow;
};

/* 5751 */
struct _DM_SWAPDISC_COMPLETE
{
  unsigned int Code;
};

/* 5752 */
struct _REMOVE_PAYMENT_INSTRUMENT_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned __int16 wPaymentInstrumentIdLength;
  unsigned __int16 *wszPaymentInstrumentId;
};

/* 5753 */
struct $B44AB9F5080CE8F7E902ADBC5B9BF4A7
{
  unsigned int dwLanguageId;
  unsigned __int16 wszActionText[23];
  unsigned __int16 wReserved;
};

/* 5754 */
struct XECRYPT_DH_768
{
  XECRYPT_DH Dh;
  unsigned __int64 aqwM[12];
  unsigned __int64 aqwG[12];
};

/* 5755 */
#pragma pack(push, 4)
struct _XINPUT_RAW
{
  char Buffer[32];
  char Length;
  unsigned int dwPacketNumber;
};
#pragma pack(pop)

/* 5756 */
struct _QUERY_UPDATEID_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned __int64 qwTeamId;
  unsigned int dwDatasetId;
  unsigned int dwProcIndex;
  unsigned __int64 qwEntityId;
  unsigned int dwNumAttributes;
  _XONLINE_QUERY_ATTRIBUTE *pAttributes;
};

/* 5757 */
struct _SUB_Q_MEDIA_CATALOG_NUMBER
{
  _SUB_Q_HEADER Header;
  char FormatCode;
  char Reserved[3];
  char _bf8;
  char MediaCatalog[15];
};

/* 5758 */
union _SUB_Q_CHANNEL_DATA
{
  _SUB_Q_CURRENT_POSITION CurrentPosition;
  _SUB_Q_MEDIA_CATALOG_NUMBER MediaCatalog;
  _SUB_Q_TRACK_ISRC TrackIsrc;
};

/* 5759 */
struct _XMATCH_SEARCHRESULT_HEADER
{
  unsigned int dwMessageLength;
  unsigned __int16 nNumSearchResults;
  unsigned __int16 fFlags;
  unsigned int dwLoggingThreshold;
};

/* 5760 */
struct _GET_ACCOUNT_INFO_FROM_PASSPORT_REQUEST
{
  _PASSPORT_SESSION_TOKEN pSessionToken[1];
  unsigned __int64 qwMachineId;
  unsigned int dwTitleId;
  _GET_ACCOUNT_INFO_RESPONSE *pResponse;
};

/* 5761 */
struct _XCONTENT_MEDIA_RESUME_DATA
{
  unsigned int m_dwVersion;
  _LARGE_INTEGER m_liFileSize;
  _LARGE_INTEGER m_liBytesStored;
  _FILETIME m_ftLastModified;
  unsigned int m_dwFileChunkSize;
};

/* 5762 */
struct XECRYPT_ECPUB
{
  unsigned int cqw;
  char cbitR;
  char cbitS;
  char cbitA;
  char cbitN;
};

/* 5763 */
struct _ACCOUNT_RESERVE_GAMERTAG_RESPONSE
{
  unsigned int dwHresult;
  unsigned __int16 wGamertagCount;
  _ACCOUNT_SUGGESTED_GAMERTAG *pGamertags;
};

/* 5764 */
struct _P_TEAM_MANAGE_TEAM_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned __int64 qwTeamID;
  unsigned __int16 cbTeamName;
  unsigned __int16 cbTeamDescription;
  unsigned __int16 cbTeamMotto;
  unsigned __int16 cbTeamURL;
  unsigned __int16 cbTeamData;
  unsigned __int16 *wszTeamName;
  unsigned __int16 *wszTeamDescription;
  unsigned __int16 *wszTeamMotto;
  unsigned __int16 *wszTeamURL;
  char *pbTeamData;
};

/* 5765 */
struct _TEAM_CREATE_RESULTS
{
  unsigned __int64 qwTeamID;
  unsigned __int64 ftCreated;
};

/* 5766 */
struct _P_TEAM_CREATE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned int dwMaxMembers;
  unsigned __int16 cbTeamName;
  unsigned __int16 cbTeamDescription;
  unsigned __int16 cbTeamMotto;
  unsigned __int16 cbTeamURL;
  unsigned __int16 cbTeamData;
  unsigned __int16 cbCreatorData;
  unsigned __int16 *wszTeamName;
  unsigned __int16 *wszTeamDescription;
  unsigned __int16 *wszTeamMotto;
  unsigned __int16 *wszTeamURL;
  char *pbTeamData;
  char *pbCreatorData;
  _TEAM_CREATE_RESULTS *pvResults;
};

/* 5767 */
struct _XMSG_GAMEINVITE_ANSWER_INFO
{
  unsigned __int64 xuidInvitingUser;
  unsigned int dwTitleID;
  XNKID sessionID;
  XNADDR xnaddrHost;
  XNKEY xnkeyHost;
};

/* 5768 */
struct _XEX_FILE_DATA_DESCRIPTOR
{
  unsigned int Size;
  unsigned __int16 Flags;
  unsigned __int16 Format;
};

/* 5769 */
struct _ACCOUNT_GET_USER_TYPE_RESPONSE
{
  char bUserType;
};

/* 5770 */
struct _ACCOUNT_GET_USER_TYPE_REQUEST
{
  unsigned __int64 qwMachineId;
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  _ACCOUNT_GET_USER_TYPE_RESPONSE *pResponse;
};

/* 5771 */
struct _XPROFILE_SYNC_ACHIEVEMENTS_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  _FILETIME ftVersion;
  unsigned __int16 wLocaleId;
  unsigned __int16 wStartingIndex;
  unsigned __int16 wAchievementCount;
  _XPROFILE_ACHIEVEMENT_SYNC_REQUEST *pAchievements;
  _XPROFILE_SYNC_ACHIEVEMENTS_RESULT *pResult;
};

/* 5772 */
struct _GET_POSTAL_CODE_REQUEST
{
  char bCountryId;
  unsigned __int16 wPostalCodeLength;
  unsigned __int16 *wszPostalCode;
  _GET_POSTAL_CODE_RESPONSE *pResponse;
};

/* 5773 */
struct _DMINIT
{
  char (__cdecl **DebugRoutine)(_KTRAP_FRAME *, _EXCEPTION_RECORD *, _CONTEXT *, char);
  _LIST_ENTRY *LoadedModuleList;
  unsigned int *LoadedModuleListLock;
  unsigned int Flags;
  void **ClockIntRoutine;
  void **ProfIntRoutine;
  unsigned int (__cdecl *TellRoutine)(unsigned int, void *);
  void **CtxSwapNotifyRoutine;
  _DMGD *D3DDriverData;
  _DMXAPI *XapiData;
  char *DisallowXbdm;
  void (__cdecl *HalStartProfileRoutine)(unsigned int);
  void (__cdecl *HalStopProfileRoutine)(unsigned int);
  void (__cdecl *HalProfileIntervalRoutine)(unsigned int);
  void **DpcDispatchNotifyRoutine;
  _DMDVD *NextDVDSample;
  void *XnetData;
  void *DebugHaltThread;
  void *FcuData;
  unsigned int NumberOfProcessors;
  _KPROCESS *SystemProcess;
  _KPROCESS *TitleProcess;
  void **StackOverflowNotifyRoutine;
  _KPRCB **ProcessorControlBlocks;
  unsigned int MmHighestPhysicalPage;
};

/* 5774 */
struct _XMSG_PROPERTY_ATTACHMENT_INTERNAL
{
  unsigned int cbAttach;
  unsigned int dwAttachFlags;
  unsigned int cbAttachUrl;
};

/* 5775 */
struct _LSP_ENUMERATE_REPLY
{
  unsigned int dwLspInfoCount;
  _LSP_ENUMERATE_SERVER_INFO *pLspInfo;
};

/* 5776 */
struct _XCONTENT_METADATA_INSTALLER_TITLE_UPDATE
{
  unsigned int SystemVersion;
  unsigned int NewVersion;
  char Reserved[5608];
};

/* 5777 */
union $3AB8AC7346588EEE010B55D77C8DFA28
{
  _XCONTENT_METADATA_INSTALLER_SYSTEM_UPDATE SystemUpdate;
  _XCONTENT_METADATA_INSTALLER_TITLE_UPDATE TitleUpdate;
  _XCONTENT_METADATA_INSTALLER_PROGRESS_CACHE InstallProgressCache;
};

/* 5778 */
struct _XCONTENT_METADATA_INSTALLER
{
  _INSTALLER_METADATA_TYPE MetaDataType;
  $3AB8AC7346588EEE010B55D77C8DFA28 MetaData;
};

/* 5779 */
struct _XMSG_DOWNLOAD_ATTACH_TO_MEM_PARAMS
{
  unsigned __int64 XuidUser;
  unsigned int dwDetailsBlobsPointer;
  unsigned int dwPropTag;
  unsigned int dwBufferSize;
  unsigned int dwBufferPointer;
};

/* 5780 */
struct _MESSAGEBOX_PARAMS
{
  unsigned int dwUserIndex;
  HUDSCENE eHudType;
  unsigned __int16 szTitle[32];
  unsigned __int16 szText[256];
  unsigned int cButtons;
  unsigned __int16 rgButtons[3][32];
  unsigned int dwFocusButton;
  unsigned int dwFlags;
  _MESSAGEBOX_RESULT *pResult;
  _XOVERLAPPED *pOverlapped;
};

/* 5781 */
struct ID3DXPMeshVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXPMesh *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXPMesh *);
  unsigned int (__cdecl *Release)(ID3DXPMesh *);
  HRESULT (__cdecl *DrawSubset)(ID3DXPMesh *, unsigned int);
  unsigned int (__cdecl *GetNumFaces)(ID3DXPMesh *);
  unsigned int (__cdecl *GetNumVertices)(ID3DXPMesh *);
  unsigned int (__cdecl *GetFVF)(ID3DXPMesh *);
  HRESULT (__cdecl *GetDeclaration)(ID3DXPMesh *, _D3DVERTEXELEMENT9 *);
  unsigned int (__cdecl *GetNumBytesPerVertex)(ID3DXPMesh *);
  unsigned int (__cdecl *GetOptions)(ID3DXPMesh *);
  HRESULT (__cdecl *GetDevice)(ID3DXPMesh *, D3DDevice **);
  HRESULT (__cdecl *CloneMeshFVF)(ID3DXPMesh *, unsigned int, unsigned int, D3DDevice *, ID3DXMesh **);
  HRESULT (__cdecl *CloneMesh)(ID3DXPMesh *, unsigned int, _D3DVERTEXELEMENT9 *, D3DDevice *, ID3DXMesh **);
  HRESULT (__cdecl *GetVertexBuffer)(ID3DXPMesh *, D3DVertexBuffer **);
  HRESULT (__cdecl *GetIndexBuffer)(ID3DXPMesh *, D3DIndexBuffer **);
  HRESULT (__cdecl *LockVertexBuffer)(ID3DXPMesh *, unsigned int, void **);
  HRESULT (__cdecl *UnlockVertexBuffer)(ID3DXPMesh *);
  HRESULT (__cdecl *LockIndexBuffer)(ID3DXPMesh *, unsigned int, void **);
  HRESULT (__cdecl *UnlockIndexBuffer)(ID3DXPMesh *);
  HRESULT (__cdecl *GetAttributeTable)(ID3DXPMesh *, _D3DXATTRIBUTERANGE *, unsigned int *);
  HRESULT (__cdecl *ConvertPointRepsToAdjacency)(ID3DXPMesh *, const unsigned int *, unsigned int *);
  HRESULT (__cdecl *ConvertAdjacencyToPointReps)(ID3DXPMesh *, const unsigned int *, unsigned int *);
  HRESULT (__cdecl *GenerateAdjacency)(ID3DXPMesh *, float, unsigned int *);
  HRESULT (__cdecl *UpdateSemantics)(ID3DXPMesh *, _D3DVERTEXELEMENT9 *);
  HRESULT (__cdecl *ClonePMeshFVF)(ID3DXPMesh *, unsigned int, unsigned int, D3DDevice *, ID3DXPMesh **);
  HRESULT (__cdecl *ClonePMesh)(ID3DXPMesh *, unsigned int, _D3DVERTEXELEMENT9 *, D3DDevice *, ID3DXPMesh **);
  HRESULT (__cdecl *SetNumFaces)(ID3DXPMesh *, unsigned int);
  HRESULT (__cdecl *SetNumVertices)(ID3DXPMesh *, unsigned int);
  unsigned int (__cdecl *GetMaxFaces)(ID3DXPMesh *);
  unsigned int (__cdecl *GetMinFaces)(ID3DXPMesh *);
  unsigned int (__cdecl *GetMaxVertices)(ID3DXPMesh *);
  unsigned int (__cdecl *GetMinVertices)(ID3DXPMesh *);
  HRESULT (__cdecl *Save)(ID3DXPMesh *, IStream *, _D3DXMATERIAL *, _D3DXEFFECTINSTANCE *, unsigned int);
  HRESULT (__cdecl *Optimize)(ID3DXPMesh *, unsigned int, unsigned int *, unsigned int *, ID3DXBuffer **, ID3DXMesh **);
  HRESULT (__cdecl *OptimizeBaseLOD)(ID3DXPMesh *, unsigned int, unsigned int *);
  HRESULT (__cdecl *TrimByFaces)(ID3DXPMesh *, unsigned int, unsigned int, unsigned int *, unsigned int *);
  HRESULT (__cdecl *TrimByVertices)(ID3DXPMesh *, unsigned int, unsigned int, unsigned int *, unsigned int *);
  HRESULT (__cdecl *GetAdjacency)(ID3DXPMesh *, unsigned int *);
  HRESULT (__cdecl *GenerateVertexHistory)(ID3DXPMesh *, unsigned int *);
};

/* 5782 */
struct XECRYPT_RSAPUB_1536
{
  XECRYPT_RSA Rsa;
  unsigned __int64 aqwM[24];
};

/* 5783 */
struct _HUD_PARAMS
{
  unsigned int dwUserIndex;
  HUDSCENE eHudType;
};

/* 5784 */
struct PRESENCE_PROPERTY
{
  unsigned int dwPropertyId;
  unsigned int cbData;
};

/* 5785 */
struct _P_UNBLOCK_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwBlockID;
};

/* 5786 */
struct _XMSG_DETAILS_GET_PROPERTY
{
  _XMSG_DETAILS_BLOB pDetails[1];
  unsigned __int16 wPropTag;
  unsigned int cbPropValueBuffer;
  char pbPropValue[1];
  unsigned int pcbPropValue[1];
  unsigned int pdwAttachmentFlags[1];
};

/* 5787 */
struct XECRYPT_RSAPUB_4096
{
  XECRYPT_RSA Rsa;
  unsigned __int64 aqwM[64];
};

/* 5788 */
struct XGI_SESSIONINVITE_MSG
{
  unsigned int dwUserIndex;
  _XSESSION_INFO *pSessionInfo;
};

/* 5789 */
struct _OFFER_PURCHASE_GAMERTAG_REQUEST
{
  unsigned __int64 qwUserId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  char bUserTier;
  unsigned __int64 qwMachineId;
  unsigned __int64 qwOfferID;
  unsigned int dwPaymentType;
  unsigned __int16 wTokenLength;
  unsigned __int16 *wszToken;
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  _OFFER_PURCHASE_GAMERTAG_RESPONSE *pResults;
};

/* 5790 */
struct _DM_SWAPDISC_STATUS
{
  unsigned int Code;
};

/* 5791 */
struct _XAPI_CONTSIG_HANDLE
{
  unsigned int dwSignature;
  _XCONTSIG_FILELIST_ENTRY *FileEntry;
  _XCONTSIG_FILELIST_ENTRY *LastFileEntry;
  _XCONTSIG_SIGNATURES *pxsig;
  _XCONTSIG_LIVE_SIGNATURE *pxsigls;
  char rgbLiveDigest[20];
};

/* 5792 */
struct _XCONFIG_USER_SETTINGS
{
  unsigned int CheckSum;
  unsigned int Version;
  unsigned int TimeZoneBias;
  char TimeZoneStdName[4];
  char TimeZoneDltName[4];
  _XCONFIG_TIMEZONE_DATE TimeZoneStdDate;
  _XCONFIG_TIMEZONE_DATE TimeZoneDltDate;
  unsigned int TimeZoneStdBias;
  unsigned int TimeZoneDltBias;
  unsigned __int64 DefaultProfile;
  unsigned int Language;
  unsigned int VideoFlags;
  unsigned int AudioFlags;
  unsigned int RetailFlags;
  unsigned int DevkitFlags;
  char Country;
  char ParentalControlFlags;
  char ReservedFlag[2];
  char SMBConfig[256];
  unsigned __int64 LivePUID;
  char LiveCredentials[16];
  __int16 AVPackHDMIScreenSz[2];
  __int16 AVPackComponentScreenSz[2];
  __int16 AVPackVGAScreenSz[2];
  unsigned int ParentalControlGame;
  unsigned int ParentalControlPassword;
  unsigned int ParentalControlMovie;
  unsigned int ParentalControlGameRating;
  unsigned int ParentalControlMovieRating;
  char ParentalControlHint;
  char ParentalControlHintAnswer[32];
  char ParentalControlOverride[32];
  unsigned int MusicPlaybackMode;
  float MusicVolume;
  unsigned int MusicFlags;
  unsigned int ArcadeFlags;
  unsigned int ParentalControlVersion;
  unsigned int ParentalControlTV;
  unsigned int ParentalControlTVRating;
  unsigned int ParentalControlExplicitVideo;
  unsigned int ParentalControlExplicitVideoRating;
  unsigned int ParentalControlUnratedVideo;
  unsigned int ParentalControlUnratedVideoRating;
};

/* 5793 */
#pragma pack(push, 8)
struct _XUSER_MUTELIST_REQUEST
{
  unsigned int dwUserIndex;
  unsigned __int64 Xuid;
  unsigned int dwResult;
};
#pragma pack(pop)

/* 5794 */
struct _XGI_CREATESTATSENUM_MSG
{
  unsigned int dwTitleId;
  _XENUMERATOR_STATS *pStatsEnum;
};

/* 5795 */
struct _CHANGE_SUBSCRIPTION_PAYMENT_INSTRUMENT_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned __int16 wInstanceIdLength;
  unsigned __int16 *wszInstanceId;
  unsigned __int16 wPaymentInstrumentIdLength;
  unsigned __int16 *wszPaymentInstrumentId;
};

/* 5796 */
struct _GET_USER_INFO_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned int dwTitleId;
  _GET_USER_INFO_RESPONSE *pResponse;
};

/* 5797 */
struct _XSTORAGE_ACCESS_TOKEN_WRITE
{
  _FILETIME ftTokenExpirationDate;
  _FILETIME ftFileExpirationDate;
  unsigned int dwMaxFileSize;
  unsigned __int16 wSignatureSize;
  char *prgbSignature;
};

/* 5798 */
struct _DVD_AP25_CHALLENGE_TABLE_HEADER
{
  _RC4_HMAC_HEADER Header;
  unsigned int Size;
  unsigned int Version;
  unsigned __int16 Flags;
  char CountOfSets;
  char UpdateSequence;
  unsigned __int16 ResponseTolerance;
  char Reserved[10];
};

/* 5799 */
struct _XMSG_ENUMERATE_REQUEST
{
  unsigned __int64 XuidUser;
  unsigned int pcMsgSummaries[1];
  _XMSG_SUMMARY pMsgSummaries[1];
};

/* 5800 */
struct _PASSPORT_GET_USER_DATA_REQUEST
{
  _PASSPORT_SESSION_TOKEN pSessionToken[1];
  _PASSPORT_GET_USER_DATA_RESPONSE *pResult;
};

/* 5801 */
struct _XFRIENDS_REQUEST_PARAMS
{
  unsigned __int64 XuidFromUser;
  unsigned __int64 qwBuddyID;
  unsigned int dwUserNameSize;
  void *hMsg;
};

/* 5802 */
struct XECRYPT_RSAPUB_1024
{
  XECRYPT_RSA Rsa;
  unsigned __int64 aqwM[16];
};

/* 5803 */
struct _FB_GET_AGG_REVIEWS_REQUEST
{
  unsigned __int64 qwTargetID;
  _FB_GET_AGG_REVIEWS_RESPONSE *pResults;
};

/* 5804 */
struct _XSTORAGE_DELETE_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwServerPathLength;
  unsigned __int16 *wszServerPath;
};

/* 5805 */
struct _XAMGETPERSISTMEMFUNCS
{
  unsigned int (__cdecl *pfnXamSetPersistentMemory)(_XPERSISTENTMEMPARAMS *);
  unsigned int (__cdecl *pfnXamGetPersistentMemory)(_XPERSISTENTMEMPARAMS *);
  unsigned int (__cdecl *pfnXamGetPersistentMemorySizes)(_XPERSISTENTMEMPARAMS *, unsigned int *);
  int bDontTrackPersistentSockets;
};

/* 5806 */
struct _Q_MESSAGE_FLAGS_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwMessageID;
  unsigned int dwSetFlags;
  unsigned int dwUnsetFlags;
};

/* 5807 */
struct _XCONTENT_METADATA_TITLE_CONTENT
{
  char Reserved[5620];
};

/* 5808 */
struct _RTL_HEAP_USAGE
{
  unsigned int Length;
  unsigned int BytesAllocated;
  unsigned int BytesCommitted;
  unsigned int BytesReserved;
  unsigned int BytesReservedMaximum;
  _RTL_HEAP_USAGE_ENTRY *Entries;
  _RTL_HEAP_USAGE_ENTRY *AddedEntries;
  _RTL_HEAP_USAGE_ENTRY *RemovedEntries;
  unsigned int Reserved[8];
};

/* 5809 */
struct CFDATA
{
  unsigned int csum;
  unsigned __int16 cbData;
  unsigned __int16 cbUncomp;
};

/* 5810 */
struct _QUERY_UPDATE_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned __int64 qwTeamId;
  unsigned int dwDatasetId;
  unsigned int dwProcIndex;
  unsigned int dwNumAttributes;
  _XONLINE_QUERY_ATTRIBUTE *pAttributes;
};

/* 5811 */
struct _TITLE_DETAILS_RESPONSE
{
  unsigned __int16 wGameRating;
  unsigned __int16 wTitleLength;
  unsigned __int16 *wszTitle;
  unsigned __int16 wSellTextLength;
  unsigned __int16 *wszSellText;
  unsigned __int16 wDeveloperLength;
  unsigned __int16 *wszDeveloper;
  unsigned __int16 wPublisherLength;
  unsigned __int16 *wszPublisher;
  unsigned __int16 wGenreLength;
  unsigned __int16 *wszGenre;
  char bSubscriptionContent;
  char bThemeContent;
  char bDemoContent;
  char bTrailerContent;
  char bPlayed;
};

/* 5812 */
struct _XUPDATE_DOWNLOAD_RESULTS
{
  char szPackagePath[260];
};

/* 5813 */
struct ID3DXSkinInfoVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXSkinInfo *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXSkinInfo *);
  unsigned int (__cdecl *Release)(ID3DXSkinInfo *);
  HRESULT (__cdecl *SetBoneInfluence)(ID3DXSkinInfo *, unsigned int, unsigned int, const unsigned int *, const float *);
  unsigned int (__cdecl *GetNumBoneInfluences)(ID3DXSkinInfo *, unsigned int);
  HRESULT (__cdecl *GetBoneInfluence)(ID3DXSkinInfo *, unsigned int, unsigned int *, float *);
  HRESULT (__cdecl *GetMaxVertexInfluences)(ID3DXSkinInfo *, unsigned int *);
  unsigned int (__cdecl *GetNumBones)(ID3DXSkinInfo *);
  HRESULT (__cdecl *GetMaxFaceInfluences)(ID3DXSkinInfo *, D3DIndexBuffer *, unsigned int, unsigned int *);
  HRESULT (__cdecl *SetMinBoneInfluence)(ID3DXSkinInfo *, float);
  float (__cdecl *GetMinBoneInfluence)(ID3DXSkinInfo *);
  HRESULT (__cdecl *SetBoneName)(ID3DXSkinInfo *, unsigned int, const char *);
  const char *(__cdecl *GetBoneName)(ID3DXSkinInfo *, unsigned int);
  HRESULT (__cdecl *SetBoneOffsetMatrix)(ID3DXSkinInfo *, unsigned int, _D3DMATRIX *);
  _D3DMATRIX *(__cdecl *GetBoneOffsetMatrix)(ID3DXSkinInfo *, unsigned int);
  HRESULT (__cdecl *Clone)(ID3DXSkinInfo *, ID3DXSkinInfo **);
  HRESULT (__cdecl *Remap)(ID3DXSkinInfo *, unsigned int, unsigned int *);
  HRESULT (__cdecl *SetFVF)(ID3DXSkinInfo *, unsigned int);
  HRESULT (__cdecl *SetDeclaration)(ID3DXSkinInfo *, _D3DVERTEXELEMENT9 *);
  unsigned int (__cdecl *GetFVF)(ID3DXSkinInfo *);
  HRESULT (__cdecl *GetDeclaration)(ID3DXSkinInfo *, _D3DVERTEXELEMENT9 *);
  HRESULT (__cdecl *UpdateSkinnedMesh)(ID3DXSkinInfo *, _D3DMATRIX *, _D3DMATRIX *, const void *, void *);
  HRESULT (__cdecl *ConvertToBlendedMesh)(ID3DXSkinInfo *, ID3DXMesh *, unsigned int, const unsigned int *, unsigned int *, unsigned int *, ID3DXBuffer **, unsigned int *, unsigned int *, ID3DXBuffer **, ID3DXMesh **);
  HRESULT (__cdecl *ConvertToIndexedBlendedMesh)(ID3DXSkinInfo *, ID3DXMesh *, unsigned int, unsigned int, const unsigned int *, unsigned int *, unsigned int *, ID3DXBuffer **, unsigned int *, unsigned int *, ID3DXBuffer **, ID3DXMesh **);
};

/* 5814 */
struct _XUPDATE_DOWNLOAD_PARAMS
{
  unsigned int dwTitleId;
  unsigned int dwVersion;
  _XUPDATE_DOWNLOAD_RESULTS *pResults;
};

/* 5815 */
struct _XSTORAGE_UPLOAD_FROM_MEMORY_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwServerPathLength;
  unsigned __int16 *wszServerPath;
  unsigned int dwBufferSize;
  unsigned int dwBufferPointer;
};

/* 5816 */
struct CFFOLDER
{
  unsigned int coffCabStart;
  unsigned __int16 cCFData;
  __int16 typeCompress;
};

/* 5817 */
struct CFFOLDER_HMAC
{
  CFFOLDER cffolder;
  _RC4_SHA_HEADER hmac;
};

/* 5818 */
struct CFRESERVE
{
  unsigned __int16 cbCFHeader;
  char cbCFFolder;
  char cbCFData;
};

/* 5819 */
struct XONLINECONTENT_HEADER
{
  CFHEADER cfheader;
  CFRESERVE cfreserve;
  _RC4_SHA_HEADER digestFolders;
  _RC4_SHA_HEADER digestFiles;
};

/* 5820 */
struct _XCONTENT_REFERRAL_RESPONSE
{
  unsigned int dwPackageSize;
  unsigned int dwInstallSize;
  char rgbSymKey[16];
  char rgbPubKey[284];
  unsigned __int16 wNumLocations;
  _XREFERRAL_LOCATION *pReferralLocations;
};

/* 5821 */
struct _QUERY_ADD_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned __int64 qwTeamId;
  unsigned int dwDatasetId;
  unsigned int dwNumAttributes;
  _XONLINE_QUERY_ATTRIBUTE *pAttributes;
  _QUERY_ADD_RESULT *pEntityId;
};

/* 5822 */
struct _XSTORAGE_ENUMERATE_PARAMS
{
  unsigned int dwUserIndex;
  unsigned int dwServerPathLength;
  unsigned __int16 *wszServerPath;
  unsigned int dwStartingIndex;
  unsigned int dwMaxResultsToReturn;
  _XSTORAGE_ENUMERATE_RESULTS *pResults;
};

/* 5823 */
struct _XMSG_GAME_INVITE_ANSWER
{
  unsigned __int64 XuidUser;
  _XMSG_GAMEINVITE_ANSWER_INFO pAnswerInfo[1];
  XMSG_INVITE_ANSWER_TYPE Answer;
  int fFromGameInvite;
  _XOVERLAPPED pXOverlapped[1];
};

/* 5824 */
struct _CONTENT_AVAILABLE_REQUEST
{
  unsigned __int64 qwUserId;
  char bCountryId;
  char bTier;
  unsigned int dwTitleId;
  _CONTENT_AVAILABLE_RESPONSE *pResults;
};

/* 5825 */
struct _XGI_VIEWRESET_MSG
{
  unsigned int dwUserIndex;
  unsigned int dwViewId;
};

/* 5826 */
struct _UPDATE_ACCESS_TIMES_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned int dwTitleId;
  unsigned int dwTitleCategories;
};

/* 5827 */
struct ID3DXLineVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXLine *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXLine *);
  unsigned int (__cdecl *Release)(ID3DXLine *);
  HRESULT (__cdecl *GetDevice)(ID3DXLine *, D3DDevice **);
  HRESULT (__cdecl *Begin)(ID3DXLine *);
  HRESULT (__cdecl *Draw)(ID3DXLine *, D3DXVECTOR2 *, unsigned int, unsigned int);
  HRESULT (__cdecl *DrawTransform)(ID3DXLine *, _D3DVECTOR *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetPattern)(ID3DXLine *, unsigned int);
  unsigned int (__cdecl *GetPattern)(ID3DXLine *);
  HRESULT (__cdecl *SetPatternScale)(ID3DXLine *, float);
  float (__cdecl *GetPatternScale)(ID3DXLine *);
  HRESULT (__cdecl *SetWidth)(ID3DXLine *, float);
  float (__cdecl *GetWidth)(ID3DXLine *);
  HRESULT (__cdecl *SetAntialias)(ID3DXLine *, int);
  int (__cdecl *GetAntialias)(ID3DXLine *);
  HRESULT (__cdecl *SetGLLines)(ID3DXLine *, int);
  int (__cdecl *GetGLLines)(ID3DXLine *);
  HRESULT (__cdecl *End)(ID3DXLine *);
  HRESULT (__cdecl *OnLostDevice)(ID3DXLine *);
  HRESULT (__cdecl *OnResetDevice)(ID3DXLine *);
};

/* 5828 */
struct _P_PRESENCE_SUBSCRIBE_MSG
{
  unsigned int dwUserIndex;
  unsigned int cPeers;
  unsigned __int64 *pPeers;
};

/* 5829 */
struct ID3DXConstantTableVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXConstantTable *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXConstantTable *);
  unsigned int (__cdecl *Release)(ID3DXConstantTable *);
  void *(__cdecl *GetBufferPointer)(ID3DXConstantTable *);
  unsigned int (__cdecl *GetBufferSize)(ID3DXConstantTable *);
  HRESULT (__cdecl *GetDesc)(ID3DXConstantTable *, _D3DXCONSTANTTABLE_DESC *);
  HRESULT (__cdecl *GetConstantDesc)(ID3DXConstantTable *, unsigned int, _D3DXCONSTANT_DESC *, unsigned int *);
  unsigned int (__cdecl *GetSamplerIndex)(ID3DXConstantTable *, unsigned int);
  unsigned int (__cdecl *GetConstant)(ID3DXConstantTable *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetConstantByName)(ID3DXConstantTable *, unsigned int, const char *);
  unsigned int (__cdecl *GetConstantElement)(ID3DXConstantTable *, unsigned int, unsigned int);
  HRESULT (__cdecl *SetDefaults)(ID3DXConstantTable *, D3DDevice *);
  HRESULT (__cdecl *SetValue)(ID3DXConstantTable *, D3DDevice *, unsigned int, const void *, unsigned int);
  HRESULT (__cdecl *SetBool)(ID3DXConstantTable *, D3DDevice *, unsigned int, int);
  HRESULT (__cdecl *SetBoolArray)(ID3DXConstantTable *, D3DDevice *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *SetInt)(ID3DXConstantTable *, D3DDevice *, unsigned int, int);
  HRESULT (__cdecl *SetIntArray)(ID3DXConstantTable *, D3DDevice *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *SetFloat)(ID3DXConstantTable *, D3DDevice *, unsigned int, float);
  HRESULT (__cdecl *SetFloatArray)(ID3DXConstantTable *, D3DDevice *, unsigned int, const float *, unsigned int);
  HRESULT (__cdecl *SetVector)(ID3DXConstantTable *, D3DDevice *, unsigned int, D3DXVECTOR4 *);
  HRESULT (__cdecl *SetVectorArray)(ID3DXConstantTable *, D3DDevice *, unsigned int, D3DXVECTOR4 *, unsigned int);
  HRESULT (__cdecl *SetMatrix)(ID3DXConstantTable *, D3DDevice *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *SetMatrixArray)(ID3DXConstantTable *, D3DDevice *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetMatrixPointerArray)(ID3DXConstantTable *, D3DDevice *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *SetMatrixTranspose)(ID3DXConstantTable *, D3DDevice *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *SetMatrixTransposeArray)(ID3DXConstantTable *, D3DDevice *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetMatrixTransposePointerArray)(ID3DXConstantTable *, D3DDevice *, unsigned int, _D3DMATRIX **, unsigned int);
};

/* 5830 */
struct ID3DXEffectStateManagerVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXEffectStateManager *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXEffectStateManager *);
  unsigned int (__cdecl *Release)(ID3DXEffectStateManager *);
  HRESULT (__cdecl *SetTransform)(ID3DXEffectStateManager *, _D3DTRANSFORMSTATETYPE, _D3DMATRIX *);
  HRESULT (__cdecl *SetMaterial)(ID3DXEffectStateManager *, _D3DMATERIAL9 *);
  HRESULT (__cdecl *SetLight)(ID3DXEffectStateManager *, unsigned int, _D3DLIGHT9 *);
  HRESULT (__cdecl *LightEnable)(ID3DXEffectStateManager *, unsigned int, int);
  HRESULT (__cdecl *SetRenderState)(ID3DXEffectStateManager *, _D3DRENDERSTATETYPE, unsigned int);
  HRESULT (__cdecl *SetTexture)(ID3DXEffectStateManager *, unsigned int, D3DBaseTexture *);
  HRESULT (__cdecl *Do_Not_Use_SetTextureStageState)(ID3DXEffectStateManager *, unsigned int, unsigned int, unsigned int);
  HRESULT (__cdecl *SetSamplerState)(ID3DXEffectStateManager *, unsigned int, _D3DSAMPLERSTATETYPE, unsigned int);
  HRESULT (__cdecl *SetFVF)(ID3DXEffectStateManager *, unsigned int);
  HRESULT (__cdecl *SetVertexShader)(ID3DXEffectStateManager *, D3DVertexShader *);
  HRESULT (__cdecl *SetVertexShaderConstantF)(ID3DXEffectStateManager *, unsigned int, const float *, unsigned int);
  HRESULT (__cdecl *SetVertexShaderConstantI)(ID3DXEffectStateManager *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *SetVertexShaderConstantB)(ID3DXEffectStateManager *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *SetPixelShader)(ID3DXEffectStateManager *, D3DPixelShader *);
  HRESULT (__cdecl *SetPixelShaderConstantF)(ID3DXEffectStateManager *, unsigned int, const float *, unsigned int);
  HRESULT (__cdecl *SetPixelShaderConstantI)(ID3DXEffectStateManager *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *SetPixelShaderConstantB)(ID3DXEffectStateManager *, unsigned int, const int *, unsigned int);
};

/* 5831 */
struct _P_INVITE_ANSWER_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwHostID;
  XNKID MatchSessionID;
  unsigned __int16 wAnswer;
};

/* 5832 */
struct XGI_SESSIONMANAGE_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  unsigned int dwUsers;
  const unsigned __int64 *pXuids;
  const unsigned int *pdwUserIndexes;
  const int *pfPrivateSlots;
};

/* 5833 */
struct _QUERY_SEARCH_REQUEST
{
  unsigned int dwTitleId;
  unsigned int dwDatasetId;
  unsigned int dwProcIndex;
  unsigned int dwPage;
  unsigned int dwResultsPerPage;
  unsigned int dwNumResultSpecs;
  unsigned int dwNumAttributes;
  _XONLINE_QUERY_ATTRIBUTE_SPEC *pSpecs;
  _XONLINE_QUERY_ATTRIBUTE *pAttributes;
  _QUERY_SEARCH_RESULT *pResults;
};

/* 5834 */
struct _XDEVICERENAMEPARAM
{
  unsigned int DeviceID;
  const unsigned __int16 *pwszName;
  unsigned int cchName;
};

/* 5835 */
struct _P_ADD_AFFILIATES_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwListFlags;
  unsigned int dwTitleID;
  unsigned __int16 cwAffiliates;
  unsigned __int64 *pqwAfilliateIDs;
};

/* 5836 */
#pragma pack(push, 2)
struct _CDROM_AUDIO_CONTROL
{
  char LbaFormat;
  unsigned __int16 LogicalBlocksPerSecond;
};
#pragma pack(pop)

/* 5837 */
struct IDirectXFileDataReferenceVtbl
{
  HRESULT (__cdecl *QueryInterface)(IDirectXFileDataReference *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IDirectXFileDataReference *);
  unsigned int (__cdecl *Release)(IDirectXFileDataReference *);
  HRESULT (__cdecl *GetName)(IDirectXFileDataReference *, char *, unsigned int *);
  HRESULT (__cdecl *GetId)(IDirectXFileDataReference *, _GUID *);
  HRESULT (__cdecl *Resolve)(IDirectXFileDataReference *, IDirectXFileData **);
};

/* 5838 */
struct _XMSG_DETAILS_RESULTS
{
  _Q_MESSAGE_SUMMARY summary;
  _XMSG_DETAILS details;
};

/* 5839 */
struct _XSTORAGE_UPLOAD_FROM_DIRECTORY_PARAMS_INTERNAL
{
  unsigned int dwUserIndex;
  unsigned int dwServerPathLength;
  unsigned __int16 *wszServerPath;
  unsigned int dwLocalPathLength;
  char *szLocalPath;
};

/* 5840 */
struct XGI_SESSIONSEARCH_MSG
{
  unsigned int dwProcedureIndex;
  unsigned int dwUserIndex;
  unsigned int dwNumResults;
  unsigned __int16 wNumProperties;
  unsigned __int16 wNumContexts;
  _XUSER_PROPERTY *pSearchProperties;
  _XUSER_CONTEXT *pSearchContexts;
  unsigned int cbResultsBuffer;
  _XSESSION_SEARCHRESULT_HEADER *pSearchResults;
};

/* 5841 */
struct _ACCOUNT_SET_STATUS_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned int dwNewTermsOfService;
  unsigned int dwForceNameChangeRequired;
  _FILETIME ftSuspendedUntil;
  unsigned __int16 wTotalDaysSuspended;
  _FILETIME ftVoiceBannedUntil;
  unsigned __int16 wTotalDaysVoiceBanned;
  unsigned int dwBillingHr;
  unsigned int dwResetPassword;
};

/* 5842 */
struct _LSP_ENUMERATE_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int16 wServerInfoLength;
  char *szServerInfo;
  unsigned int dwResultIndex;
  unsigned int dwResultCount;
  _LSP_ENUMERATE_REPLY *pResponse;
};

/* 5843 */
struct XGI_PREPAREGAMERTILES_MSG
{
  unsigned int dwUserIndex;
  unsigned int dwNumXuids;
  const unsigned __int64 *rgXuids;
};

/* 5844 */
struct ID3DXAnimationSetVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXAnimationSet *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXAnimationSet *);
  unsigned int (__cdecl *Release)(ID3DXAnimationSet *);
  const char *(__cdecl *GetName)(ID3DXAnimationSet *);
  double (__cdecl *GetPeriod)(ID3DXAnimationSet *);
  double (__cdecl *GetPeriodicPosition)(ID3DXAnimationSet *, double);
  unsigned int (__cdecl *GetNumAnimations)(ID3DXAnimationSet *);
  HRESULT (__cdecl *GetAnimationNameByIndex)(ID3DXAnimationSet *, unsigned int, const char **);
  HRESULT (__cdecl *GetAnimationIndexByName)(ID3DXAnimationSet *, const char *, unsigned int *);
  HRESULT (__cdecl *GetSRT)(ID3DXAnimationSet *, double, unsigned int, _D3DVECTOR *, D3DXQUATERNION *, _D3DVECTOR *);
  HRESULT (__cdecl *GetCallback)(ID3DXAnimationSet *, double, unsigned int, double *, void **);
};

/* 5845 */
struct _DM_SETTINGS
{
  unsigned int StructureSize;
  unsigned int SettingFlags;
  unsigned int VideoStandard;
};

/* 5846 */
#pragma pack(push, 8)
struct LIVEBASE_SETPRESENCE_MSG
{
  unsigned __int64 xuidUser;
  unsigned int dwPresenceMode;
  unsigned int dwNumContexts;
  unsigned int dwNumProperties;
  char rgbPayload[256];
};
#pragma pack(pop)

/* 5847 */
struct XGI_WRITEGAMERTILE_MSG
{
  int fForEnumerate;
  unsigned int dwUserIndex;
  unsigned int dwTitleId;
  unsigned int dwImageId;
  unsigned int dwImageIdSmall;
  int fUpdateSetting;
};

/* 5848 */
#pragma pack(push, 4)
struct _XCONTENT_MOUNTED_PACKAGE
{
  void *pvFsDeviceObject;
  void *pvFsBlockCache;
  _LIST_ENTRY leMountedPackages;
  unsigned int dwFlags;
  void *hPackageFile;
  unsigned int dwOpenRefCount;
  _RTL_CRITICAL_SECTION csHeaderLock;
  _XCONTENT_HEADER ContentHeader;
  _XCONTENT_METADATA ContentMetaData;
  char *pbOtherMetaData;
  unsigned int dwOtherMetaDataSize;
  unsigned int DeviceIDLocked;
  char szFsDeviceName[64];
  char szPackageFilePath[260];
};
#pragma pack(pop)

/* 5849 */
struct _P_PEER_SESSION_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwHostUserID;
  _GET_SESSION_RESULTS *pResults;
};

/* 5850 */
struct _P_TEAM_LIST_MEMBERS_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned int dwTitleID;
  unsigned __int64 qwTeamID;
  int fShowRecruits;
  _TEAM_MEM_ENUM_RESULTS *pvResults;
};

/* 5851 */
struct _XCONTENT_REFERRAL_REQUEST
{
  unsigned __int64 qwUserId;
  char abContentId[20];
  _XCONTENT_REFERRAL_RESPONSE *pResults;
};

/* 5852 */
struct XGI_SESSIONMODIFYSKILL_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  unsigned int dwNumXuids;
  const unsigned __int64 *rgXuid;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
  unsigned int dwReserved3;
};

/* 5853 */
struct _P_CANCEL_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  XNKID SessionID;
  unsigned __int16 cInvitees;
};

/* 5854 */
struct _XAM_BOOT_DATA_BLOCK
{
  _XAM_BOOT_REASON Reason;
  unsigned int Flags;
  void *ImagePhysicalBase;
  unsigned int ImageSize;
  char ImageName[256];
  char DDrive[256];
  char CommandLine[256];
  unsigned int MinVersion;
};

/* 5855 */
struct _XMSG_DETAILS_REQUEST
{
  unsigned __int64 XuidUser;
  unsigned int dwMessageID;
  unsigned int dwFlagsToSet;
  unsigned int dwFlagsToClear;
  unsigned int cbResults;
  _XMSG_DETAILS_BLOB pResults[1];
  _XOVERLAPPED pXOverlapped[1];
};

/* 5856 */
struct IDirectXFileBinaryVtbl
{
  HRESULT (__cdecl *QueryInterface)(IDirectXFileBinary *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(IDirectXFileBinary *);
  unsigned int (__cdecl *Release)(IDirectXFileBinary *);
  HRESULT (__cdecl *GetName)(IDirectXFileBinary *, char *, unsigned int *);
  HRESULT (__cdecl *GetId)(IDirectXFileBinary *, _GUID *);
  HRESULT (__cdecl *GetSize)(IDirectXFileBinary *, unsigned int *);
  HRESULT (__cdecl *GetMimeType)(IDirectXFileBinary *, const char **);
  HRESULT (__cdecl *Read)(IDirectXFileBinary *, void *, unsigned int, unsigned int *);
};

/* 5857 */
#pragma pack(push, 2)
struct XAMINSTRUMENTATION_FORMAT
{
  const unsigned __int16 *wszSourceId;
  int fTimestamp;
  int fSeqNum;
  char cFields;
  char rgFieldTypes[10];
};
#pragma pack(pop)

/* 5858 */
#pragma pack(push, 8)
struct _XUSER_PLAYERLIST_USER
{
  unsigned __int64 qwPlayerID;
  unsigned int dwFlags;
  unsigned int dwTitleID;
  unsigned int mtUpdated;
  unsigned int dwRating;
  char szGamertag[16];
  char fPendingAdd;
  unsigned __int16 wNextPending;
};
#pragma pack(pop)

/* 5859 */
struct _GET_LINKED_GAMERTAG_REQUEST
{
  char pSignedPuid[28];
  _GET_LINKED_GAMERTAG_RESPONSE *pResponse;
};

/* 5860 */
struct _XSTATS_RESET_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned int dwLeaderBoardId;
};

/* 5861 */
struct _TITLE_DETAILS_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned int dwTitleId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  char bTierRequired;
  _TITLE_DETAILS_RESPONSE *pResults;
};

/* 5862 */
struct ID3DXBaseEffectVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXBaseEffect *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXBaseEffect *);
  unsigned int (__cdecl *Release)(ID3DXBaseEffect *);
  HRESULT (__cdecl *GetDesc)(ID3DXBaseEffect *, _D3DXEFFECT_DESC *);
  HRESULT (__cdecl *GetParameterDesc)(ID3DXBaseEffect *, unsigned int, _D3DXPARAMETER_DESC *);
  HRESULT (__cdecl *GetTechniqueDesc)(ID3DXBaseEffect *, unsigned int, _D3DXTECHNIQUE_DESC *);
  HRESULT (__cdecl *GetPassDesc)(ID3DXBaseEffect *, unsigned int, _D3DXPASS_DESC *);
  HRESULT (__cdecl *GetFunctionDesc)(ID3DXBaseEffect *, unsigned int, _D3DXFUNCTION_DESC *);
  unsigned int (__cdecl *GetParameter)(ID3DXBaseEffect *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetParameterByName)(ID3DXBaseEffect *, unsigned int, const char *);
  unsigned int (__cdecl *GetParameterBySemantic)(ID3DXBaseEffect *, unsigned int, const char *);
  unsigned int (__cdecl *GetParameterElement)(ID3DXBaseEffect *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetTechnique)(ID3DXBaseEffect *, unsigned int);
  unsigned int (__cdecl *GetTechniqueByName)(ID3DXBaseEffect *, const char *);
  unsigned int (__cdecl *GetPass)(ID3DXBaseEffect *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetPassByName)(ID3DXBaseEffect *, unsigned int, const char *);
  unsigned int (__cdecl *GetFunction)(ID3DXBaseEffect *, unsigned int);
  unsigned int (__cdecl *GetFunctionByName)(ID3DXBaseEffect *, const char *);
  unsigned int (__cdecl *GetAnnotation)(ID3DXBaseEffect *, unsigned int, unsigned int);
  unsigned int (__cdecl *GetAnnotationByName)(ID3DXBaseEffect *, unsigned int, const char *);
  HRESULT (__cdecl *SetValue)(ID3DXBaseEffect *, unsigned int, const void *, unsigned int);
  HRESULT (__cdecl *GetValue)(ID3DXBaseEffect *, unsigned int, void *, unsigned int);
  HRESULT (__cdecl *SetBool)(ID3DXBaseEffect *, unsigned int, int);
  HRESULT (__cdecl *GetBool)(ID3DXBaseEffect *, unsigned int, int *);
  HRESULT (__cdecl *SetBoolArray)(ID3DXBaseEffect *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *GetBoolArray)(ID3DXBaseEffect *, unsigned int, int *, unsigned int);
  HRESULT (__cdecl *SetInt)(ID3DXBaseEffect *, unsigned int, int);
  HRESULT (__cdecl *GetInt)(ID3DXBaseEffect *, unsigned int, int *);
  HRESULT (__cdecl *SetIntArray)(ID3DXBaseEffect *, unsigned int, const int *, unsigned int);
  HRESULT (__cdecl *GetIntArray)(ID3DXBaseEffect *, unsigned int, int *, unsigned int);
  HRESULT (__cdecl *SetFloat)(ID3DXBaseEffect *, unsigned int, float);
  HRESULT (__cdecl *GetFloat)(ID3DXBaseEffect *, unsigned int, float *);
  HRESULT (__cdecl *SetFloatArray)(ID3DXBaseEffect *, unsigned int, const float *, unsigned int);
  HRESULT (__cdecl *GetFloatArray)(ID3DXBaseEffect *, unsigned int, float *, unsigned int);
  HRESULT (__cdecl *SetVector)(ID3DXBaseEffect *, unsigned int, D3DXVECTOR4 *);
  HRESULT (__cdecl *GetVector)(ID3DXBaseEffect *, unsigned int, D3DXVECTOR4 *);
  HRESULT (__cdecl *SetVectorArray)(ID3DXBaseEffect *, unsigned int, D3DXVECTOR4 *, unsigned int);
  HRESULT (__cdecl *GetVectorArray)(ID3DXBaseEffect *, unsigned int, D3DXVECTOR4 *, unsigned int);
  HRESULT (__cdecl *SetMatrix)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *GetMatrix)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *SetMatrixArray)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *GetMatrixArray)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetMatrixPointerArray)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *GetMatrixPointerArray)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *SetMatrixTranspose)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *GetMatrixTranspose)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX *);
  HRESULT (__cdecl *SetMatrixTransposeArray)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *GetMatrixTransposeArray)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX *, unsigned int);
  HRESULT (__cdecl *SetMatrixTransposePointerArray)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *GetMatrixTransposePointerArray)(ID3DXBaseEffect *, unsigned int, _D3DMATRIX **, unsigned int);
  HRESULT (__cdecl *SetString)(ID3DXBaseEffect *, unsigned int, const char *);
  HRESULT (__cdecl *GetString)(ID3DXBaseEffect *, unsigned int, const char **);
  HRESULT (__cdecl *SetTexture)(ID3DXBaseEffect *, unsigned int, D3DBaseTexture *);
  HRESULT (__cdecl *GetTexture)(ID3DXBaseEffect *, unsigned int, D3DBaseTexture **);
  HRESULT (__cdecl *SetPixelShader)(ID3DXBaseEffect *, unsigned int, D3DPixelShader *);
  HRESULT (__cdecl *GetPixelShader)(ID3DXBaseEffect *, unsigned int, D3DPixelShader **);
  HRESULT (__cdecl *SetVertexShader)(ID3DXBaseEffect *, unsigned int, D3DVertexShader *);
  HRESULT (__cdecl *GetVertexShader)(ID3DXBaseEffect *, unsigned int, D3DVertexShader **);
  HRESULT (__cdecl *SetArrayRange)(ID3DXBaseEffect *, unsigned int, unsigned int, unsigned int);
};

/* 5863 */
struct XGI_READSETTINGS_MSG
{
  _XOVERLAPPED *pXOverlapped;
  unsigned int dwTitleId;
  unsigned int dwUserIndex;
  unsigned int dwNumFor;
  const unsigned __int64 *pxuidFor;
  unsigned int dwNumSettingIds;
  const unsigned int *pSettingIds;
  unsigned int cbResults;
  _XUSER_READ_PROFILE_SETTING_RESULT *pResults;
};

/* 5864 */
struct _ACCOUNT_CHANGE_GAMERTAG_RESPONSE
{
  char abKey[16];
};

/* 5865 */
struct _XSTORAGE_UPLOAD_REQUEST
{
  _XSTORAGE_ACCESS_TOKEN pStorageAccessToken[1];
  _XSTORAGE_PATH_STRING pStoragePathString[1];
  _XSTORAGE_ACCESS_TOKEN_WRITE pStorageAccessTokenWrite[1];
  unsigned int dwTitleId;
  unsigned int dwTitleVersion;
  char bCountryId;
  char bCompressionType;
  unsigned int dwContentType;
  char *prgbDigest;
  char *prgbLiveSignature;
  unsigned int dwInstallSize;
  unsigned __int16 wAttributesSize;
  unsigned int dwPackageSize;
  char *prgbAttributes;
};

/* 5866 */
struct XGI_READWRITETILE_MSG
{
  XTILETYPE eTileType;
  unsigned int dwTitleId;
  unsigned __int64 qwImageId;
  unsigned int dwUserIndex;
  char *pbImage;
  unsigned int *pcbBuffer;
  unsigned int cbBuffer;
  unsigned int dwPitch;
  unsigned int dwHeight;
};

/* 5867 */
struct _P_CANCEL_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  XNKID SessionID;
  unsigned __int16 cInvitees;
  unsigned __int64 *pqwInviteeIDs;
};

/* 5868 */
struct _OFFER_PURCHASE_REQUEST
{
  unsigned __int64 qwUserId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  char bUserTier;
  unsigned __int64 qwMachineId;
  unsigned int cOfferIDs;
  unsigned __int64 *pOfferIDs;
  unsigned int dwPaymentType;
  unsigned __int16 wPaymentInstrumentId;
  unsigned __int16 *wszPaymentInstrumentId;
  unsigned __int16 wTokenLength;
  unsigned __int16 *wszToken;
};

/* 5869 */
struct _PURCHASE_VIDEO_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  _WMID pWmid[1];
  unsigned int dwExpectedPrice;
  unsigned int dwPaymentType;
  unsigned __int16 wPaymentInstrumentId;
  unsigned __int16 *wszPaymentInstrumentId;
  unsigned __int16 wTokenLength;
  unsigned __int16 *wszToken;
  _PURCHASE_VIDEO_RESPONSE *pResults;
};

/* 5870 */
struct _PRESENCE_SET_STATE
{
  unsigned __int64 UserXuid;
  unsigned int dwStateFlags;
  XNKID sessionID;
  unsigned int cbState;
  char *pbState;
};

/* 5871 */
struct _QUERY_REMOVEID_REQUEST
{
  unsigned int dwTitleId;
  unsigned __int64 qwUserId;
  unsigned __int64 qwTeamId;
  unsigned int dwDatasetId;
  unsigned __int64 qwEntityId;
};

/* 5872 */
struct _DM_SATA_CHANNEL_DATA
{
  unsigned int Size;
  unsigned int Version;
  _SATA_CHANNEL_EXTENSION *ChannelExtension;
  void (__cdecl *StartPacketRoutine)(_SATA_CHANNEL_EXTENSION *, _IRP *);
  void (__cdecl *StartNextPacketRoutine)(_SATA_CHANNEL_EXTENSION *);
  void (__cdecl *AbortPacketRoutine)(_SATA_CHANNEL_EXTENSION *);
  void (__cdecl *RetryPacketRoutine)(_SATA_CHANNEL_EXTENSION *);
  void (__cdecl *ResetDeviceRoutine)(_SATA_CHANNEL_EXTENSION *);
};

/* 5873 */
struct _ENUMERATE_GENRES_REQUEST
{
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned int dwStartingIndex;
  unsigned int dwMaxResults;
  unsigned __int16 wGameRating;
  char bTierRequired;
  unsigned int dwOfferType;
  unsigned int dwParentGenreId;
  _ENUMERATE_GENRES_RESPONSE *pResults;
};

/* 5874 */
struct _P_ADD_2_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwSenderID;
  unsigned __int64 qwBuddyID;
  unsigned int dwMessageFlags;
  unsigned __int16 cbDetails;
  char *szBuddyAcctName;
  _XMSG_DETAILS *pDetails;
};

/* 5875 */
struct _USER_ACCOUNT_STATUS_INFO
{
  int bNewTermsOfService;
  int bForcedNameChangeRequired;
  _FILETIME ftSuspendedUntil;
  unsigned __int16 wTotalDaysSuspended;
  _FILETIME ftVoiceBannedUntil;
  unsigned __int16 wTotalDaysVoiceBanned;
  HRESULT hrBillingAccountStatus;
};

/* 5876 */
struct XECRYPT_AES_STATE
{
  char keytabenc[11][4][4];
  char keytabdec[11][4][4];
};

/* 5877 */
struct XECRYPT_RSAPRV_1024
{
  XECRYPT_RSA Rsa;
  unsigned __int64 aqwM[16];
  unsigned __int64 aqwP[8];
  unsigned __int64 aqwQ[8];
  unsigned __int64 aqwDP[8];
  unsigned __int64 aqwDQ[8];
  unsigned __int64 aqwCR[8];
};

/* 5878 */
struct XECRYPT_RSAPRV_4096
{
  XECRYPT_RSA Rsa;
  unsigned __int64 aqwM[64];
  unsigned __int64 aqwP[32];
  unsigned __int64 aqwQ[32];
  unsigned __int64 aqwDP[32];
  unsigned __int64 aqwDQ[32];
  unsigned __int64 aqwCR[32];
};

/* 5879 */
struct XECRYPT_ECPUB_512
{
  XECRYPT_ECPUB EcPub;
  unsigned __int64 aqwM[8];
  unsigned __int64 aqwC[16];
  unsigned __int64 aqwG[16];
  unsigned __int64 aqwGP[16];
};

/* 5880 */
#pragma pack(push, 8)
struct XGI_USERGETPROPERTY_MSG
{
  unsigned int dwUserIndex;
  unsigned __int64 xuid;
  unsigned int *pcbActual;
  _XUSER_CONTEXT *pContext;
  _XUSER_PROPERTY *pProperty;
};
#pragma pack(pop)

/* 5881 */
struct XGI_WRITEACHIEVEMENT_MSG
{
  unsigned int dwNumAchievements;
  XUSER_ACHIEVEMENT *pAchievements;
};

/* 5882 */
struct XGI_CLEARTITLE_MSG
{
  unsigned int dwTitleId;
  unsigned int dwUserIndex;
  unsigned int dwFlags;
};

/* 5883 */
#pragma pack(push, 8)
struct XGI_SESSIONREGISTER_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  unsigned int dwFlags;
  unsigned __int64 qwSessionNonce;
  unsigned int dwSessionDurationSec;
  unsigned int cbResultsBuffer;
  _XSESSION_REGISTRATION_RESULTS *pResults;
};
#pragma pack(pop)

/* 5884 */
struct XGI_SESSIONDETAILS_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  unsigned int *pcbResultsBuffer;
  _XSESSION_LOCAL_DETAILS *pSessionDetails;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
  unsigned int dwReserved3;
};

/* 5885 */
struct XGI_SESSIONSPLIT_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  _XSESSION_INFO *pSessionInfo;
  unsigned int dwUserIndex;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
  unsigned int dwReserved3;
};

/* 5886 */
#pragma pack(push, 8)
struct XGI_STATSWRITE_MSG
{
  tagSESSION_STRUCT *pSessionStruct;
  unsigned __int64 xuid;
  unsigned int dwNumViews;
  _XSESSION_VIEW_PROPERTIES *pViews;
};
#pragma pack(pop)

/* 5887 */
#pragma pack(push, 8)
struct XGI_READWRITETILE2_MSG
{
  XTILETYPE eTileType;
  unsigned int dwTitleId;
  unsigned __int64 qwImageId;
  unsigned int dwUserIndex;
  char *pbImage;
  unsigned int *pcbBuffer;
  unsigned int cbBuffer;
  unsigned int dwPitch;
  unsigned int dwHeight;
  int fSmall;
  _XUSER_DATA *pKey;
  unsigned int dwInternalFlags;
};
#pragma pack(pop)

/* 5888 */
struct XGI_SYNC_MSG
{
  unsigned int dwUserIndexMask;
};

/* 5889 */
struct ID3DXFileSaveObjectVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXFileSaveObject *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXFileSaveObject *);
  unsigned int (__cdecl *Release)(ID3DXFileSaveObject *);
  HRESULT (__cdecl *GetFile)(ID3DXFileSaveObject *, ID3DXFile **);
  HRESULT (__cdecl *AddDataObject)(ID3DXFileSaveObject *, _GUID *const , const char *, _GUID *, unsigned int, const void *, ID3DXFileSaveData **);
  HRESULT (__cdecl *Save)(ID3DXFileSaveObject *);
};

/* 5890 */
struct _ENUMERATE_TITLES_BY_FILTER_REQUEST
{
  unsigned __int64 qwUserId;
  char bCountryId;
  unsigned __int16 wLanguageId;
  unsigned int dwStartingIndex;
  unsigned int dwMaxResults;
  unsigned __int16 wGameRating;
  char bTierRequired;
  unsigned int dwGenreId;
  unsigned int dwOfferType;
  unsigned __int16 wRequestFlags;
  _ENUMERATE_TITLES_BY_FILTER_RESPONSE *pResults;
};

/* 5891 */
struct ID3DXSpriteVtbl
{
  HRESULT (__cdecl *QueryInterface)(ID3DXSprite *, _GUID *const , void **);
  unsigned int (__cdecl *AddRef)(ID3DXSprite *);
  unsigned int (__cdecl *Release)(ID3DXSprite *);
  HRESULT (__cdecl *GetDevice)(ID3DXSprite *, D3DDevice **);
  HRESULT (__cdecl *GetTransform)(ID3DXSprite *, _D3DMATRIX *);
  HRESULT (__cdecl *SetTransform)(ID3DXSprite *, _D3DMATRIX *);
  HRESULT (__cdecl *SetWorldViewRH)(ID3DXSprite *, _D3DMATRIX *, _D3DMATRIX *);
  HRESULT (__cdecl *SetWorldViewLH)(ID3DXSprite *, _D3DMATRIX *, _D3DMATRIX *);
  HRESULT (__cdecl *Begin)(ID3DXSprite *, unsigned int);
  HRESULT (__cdecl *Draw)(ID3DXSprite *, D3DTexture *, tagRECT *, _D3DVECTOR *, _D3DVECTOR *, unsigned int);
  HRESULT (__cdecl *Flush)(ID3DXSprite *);
  HRESULT (__cdecl *End)(ID3DXSprite *);
  HRESULT (__cdecl *OnLostDevice)(ID3DXSprite *);
  HRESULT (__cdecl *OnResetDevice)(ID3DXSprite *);
};

/* 5892 */
struct _SCSI_PASS_THROUGH_DIRECT
{
  unsigned __int16 Length;
  char ScsiStatus;
  char PathId;
  char TargetId;
  char Lun;
  char CdbLength;
  char DataIn;
  unsigned int DataTransferLength;
  unsigned int TimeOutValue;
  void *DataBuffer;
  char Cdb[16];
};

/* 5893 */
struct _AP21_MEASUREMENT_OUTPUT
{
  char *Buffer[2];
  unsigned int TimeReadComplete[2];
};

/* 5894 */
struct _Q_SEND_MESSAGE_MSG
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwSenderContext;
  unsigned int dwMessageFlags;
  unsigned int dwSenderTitleID;
  unsigned __int16 wExpireMinutes;
  unsigned __int16 cbDetails;
  unsigned __int16 cRecipients;
  char bMessageType;
  char szSenderName[15];
  unsigned __int64 *qwRecipientIDs;
  _XMSG_DETAILS *pDetails;
  _XMSG_SEND_RESULT *pResults;
};

/* 5895 */
struct XUIQuaternion
{
  float x;
  float y;
  float z;
  float w;
};

/* 5896 */
struct XUIElementPropVal
{
  XUI_ELEMENT_PROPERTY_TYPE type;
  $A25D11E961EEE03507D34FBF4C9B8B51 CustomVal;
};

/* 5897 */
struct XUIMemoryBuffer
{
  char *m_pb;
  unsigned int m_cbUsed;
  unsigned int m_cbTotal;
};

/* 5898 */
struct IXUIPropObj
{
  IXUIPropObjVtbl *vfptr;
};

/* 5899 */
struct XUICustomPropHandler
{
  HRESULT (__cdecl *Set)(void *, void *, void *);
  HRESULT (__cdecl *Get)(void *, void *, void *);
  HRESULT (__cdecl *ToString)(void *, wchar_t **, void *);
  HRESULT (__cdecl *FromString)(void *, const wchar_t *, void *);
  HRESULT (__cdecl *ToBinary)(void *, XUIMemoryBuffer *, void *);
  HRESULT (__cdecl *FromBinary)(void *, const char *, unsigned int, void *);
  int (__cdecl *IsEqual)(void *, void *, void *);
  HRESULT (__cdecl *ShowUI)(void *, IXUIPropObj *, HWND__ *);
};

/* 5900 */
const struct XUIElementPropDef
{
  unsigned int dwFlags;
  unsigned int dwId;
  unsigned int dwOffset;
  unsigned int dwExtra;
  const wchar_t *szPropName;
  XUI_ELEMENT_PROPERTY_TYPE Type;
  XUIElementPropVal *pDefaultVal;
  XUICustomPropHandler *pCustomHandler;
  HRESULT (__cdecl *pfnGetProp)(unsigned int, void *, XUIElementPropVal *);
  HRESULT (__cdecl *pfnSetProp)(unsigned int, void *, XUIElementPropVal *);
  XUIElementPropDef *(__cdecl *pfnGetPropDef)(unsigned int *);
  HRESULT (__cdecl *pfnGetCount)(void *, unsigned int *);
};

/* 5901 */
struct $82DFC7E15BFFC2C82DD37B50DE426C3D
{
  _BYTE gap0[4];
  HRESULT (__cdecl *GetPropertyDef)(IXUIPropObj *this, const wchar_t *, XUIElementPropDef **);
};

/* 5902 */
struct $AC9C26B516E47C62000CA00E37FD2579
{
  _BYTE gap0[8];
  HRESULT (__cdecl *GetPropertyRef)(IXUIPropObj *this, unsigned int, void **);
};

/* 5903 */
struct $D36E4CA48CA3782D77A32F78BBA439D2
{
  _BYTE gap0[12];
  HRESULT (__cdecl *GetProperty)(IXUIPropObj *this, unsigned int, unsigned int, XUIElementPropVal *);
};

/* 5904 */
struct $1D7E9C6A2B5F4E1B21C8BE8DD216DC98
{
  _BYTE gap0[16];
  HRESULT (__cdecl *SetProperty)(IXUIPropObj *this, unsigned int, unsigned int, XUIElementPropVal *);
};

/* 5905 */
struct $94282E54546B578A7241ADD03E494E05
{
  _BYTE gap0[20];
  HRESULT (__cdecl *GetPropertyCount)(IXUIPropObj *this, unsigned int, unsigned int *);
};

/* 5906 */
union $F69144F63BB3E753D8BE1750BA70CD70
{
  HRESULT (__cdecl *GetPropertyId)(IXUIPropObj *this, const wchar_t *, unsigned int *);
  $82DFC7E15BFFC2C82DD37B50DE426C3D _s1;
  $AC9C26B516E47C62000CA00E37FD2579 _s2;
  $D36E4CA48CA3782D77A32F78BBA439D2 _s3;
  $1D7E9C6A2B5F4E1B21C8BE8DD216DC98 _s4;
  $94282E54546B578A7241ADD03E494E05 _s5;
};

/* 5907 */
struct IXUIPropObjVtbl
{
  XUIElementPropDef *(__cdecl *GetPropDef)(IXUIPropObj *this, unsigned int *);
  $F69144F63BB3E753D8BE1750BA70CD70 ___u1;
};

/* 5908 */
struct $B5D3B8566BFDCFD97DA44021785374FC
{
  void *pvCustomData;
  XUICustomPropHandler *pHandler;
};

/* 5909 */
union $A25D11E961EEE03507D34FBF4C9B8B51
{
  int bVal;
  int nVal;
  unsigned int uVal;
  float fVal;
  wchar_t *szVal;
  _D3DVECTOR vecVal;
  XUIQuaternion quatVal;
  IXUIPropObj *pObj;
  $B5D3B8566BFDCFD97DA44021785374FC CustomVal;
};

/* 5910 */
struct _PASSPORT_GET_MEMBER_NAME_REQUEST
{
  unsigned __int64 qwUserId;
  _PASSPORT_GET_MEMBER_NAME_RESPONSE *pResult;
};

/* 5911 */
struct _ADD_PAYMENT_INSTRUMENT_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  _ADDRESS_INFO addressInfo;
  _PHONE_INFO phoneInfo;
  char bPaymentTypeId;
  _CREDIT_CARD_INFO creditCardInfo;
  _DIRECT_DEBIT_INFO directDebitInfo;
  _ADD_PAYMENT_INSTRUMENT_RESPONSE *pResponse;
};

/* 5912 */
struct _CONSUME_ASSETS_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  unsigned int dwTitleId;
  unsigned int cAssets;
  _XMARKETPLACE_ASSET *pAssets;
};

/* 5913 */
struct _XCONFIG_CONSOLE_SETTINGS
{
  unsigned int CheckSum;
  unsigned int Version;
  __int16 ScreenSaver;
  __int16 AutoShutOff;
  char WirelessSettings[256];
  unsigned int CameraSettings;
  char CameraSettingsReserved[28];
};

/* 5914 */
struct _ACCOUNT_RESERVE_GAMERTAG_REQUEST
{
  unsigned __int64 qwMachineId;
  char bCountryId;
  unsigned __int16 wMaxSuggestedNames;
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  _ACCOUNT_RESERVE_GAMERTAG_RESPONSE *pResponse;
};

/* 5915 */
struct _Q_SEND_MESSAGE_MSG_INTERNAL
{
  unsigned int dwMsgType;
  unsigned int dwMsgLen;
  unsigned int dwSeqNum;
  _SGADDR sgaddr;
  unsigned __int64 qwUserID;
  unsigned __int64 qwSenderContext;
  unsigned int dwMessageFlags;
  unsigned int dwSenderTitleID;
  unsigned __int16 wExpireMinutes;
  unsigned __int16 cbDetails;
  unsigned __int16 cRecipients;
  char bMessageType;
  char szSenderName[15];
};

/* 5916 */
struct _ACCOUNT_CHANGE_GAMERTAG_REQUEST
{
  unsigned __int64 qwMachineId;
  unsigned __int64 qwUserId;
  unsigned __int16 wGamertagLength;
  unsigned __int16 *wszGamertag;
  _ACCOUNT_CHANGE_GAMERTAG_RESPONSE *pResponse;
};

/* 5917 */
struct _GET_POINTS_BALANCE_REQUEST
{
  unsigned __int64 qwUserId;
  unsigned __int64 qwMachineId;
  _GET_POINTS_BALANCE_RESPONSE *pResults;
};

/* 5918 */
struct _PASSPORT_CREATE_REQUEST
{
  unsigned __int16 wPassportMemberNameLength;
  char *szPassportMemberName;
  unsigned __int16 wSecretQuestionLength;
  unsigned __int16 *szSecretQuestion;
  unsigned __int16 wEncryptedPasswordLength;
  char *pbEncryptedPassword;
  _PASSPORT_SESSION_TOKEN *pSessionToken;
};

/* 5919 */
struct _HEAP_FREE_ENTRY_EXTRA
{
  unsigned __int16 TagIndex;
  unsigned __int16 FreeBackTraceIndex;
};

/* 5920 */
union $F802198C68EAE673EA77FFFEE1EC7362
{
  _RTL_CRITICAL_SECTION CriticalSection;
};

/* 5921 */
struct _HEAP_LOCK
{
  $F802198C68EAE673EA77FFFEE1EC7362 Lock;
};

/* 5922 */
struct $B0C7228810FFA281E36A0BBA481AA7B8
{
  unsigned __int16 TagIndex;
  unsigned __int16 HeapIndex;
};

/* 5923 */
union $821753D56F0B71294AD8EFCFEB88D9DB
{
  unsigned int HeapAndTagIndex;
  $B0C7228810FFA281E36A0BBA481AA7B8 _s1;
};

/* 5924 */
struct _HEAP_STOP_ON_TAG
{
  $821753D56F0B71294AD8EFCFEB88D9DB ___u0;
};

/* 5925 */
union $657FA192464553DFC4933AE298DA6142
{
  unsigned __int64 Reserved1;
  unsigned int AllocAttributes;
};

/* 5926 */
struct _HEAP_ENTRY
{
  unsigned __int16 Size;
  unsigned __int16 PreviousSize;
  char SegmentIndex;
  char Flags;
  char UnusedBytes;
  char SmallTagIndex;
  $657FA192464553DFC4933AE298DA6142 ___u6;
};

/* 5927 */
struct _HEAP_TAG_ENTRY
{
  unsigned int Allocs;
  unsigned int Frees;
  unsigned int Size;
  unsigned __int16 TagIndex;
  unsigned __int16 CreatorBackTraceIndex;
  unsigned __int16 TagName[24];
};

/* 5928 */
struct _HEAP_UCR_SEGMENT
{
  _HEAP_UCR_SEGMENT *Next;
  unsigned int ReservedSize;
  unsigned int CommittedSize;
  unsigned int filler;
};

/* 5929 */
struct _HEAP_UNCOMMMTTED_RANGE
{
  _HEAP_UNCOMMMTTED_RANGE *Next;
  unsigned int Address;
  unsigned int Size;
  unsigned int filler;
};

/* 5930 */
struct __declspec(align(8)) _HEAP_SEGMENT
{
  _HEAP_ENTRY Entry;
  unsigned int Signature;
  unsigned int Flags;
  _HEAP *Heap;
  unsigned int LargestUnCommittedRange;
  void *BaseAddress;
  unsigned int NumberOfPages;
  _HEAP_ENTRY *FirstEntry;
  _HEAP_ENTRY *LastValidEntry;
  unsigned int NumberOfUnCommittedPages;
  unsigned int NumberOfUnCommittedRanges;
  _HEAP_UNCOMMMTTED_RANGE *UnCommittedRanges;
  unsigned __int16 AllocatorBackTraceIndex;
  unsigned __int16 Reserved;
  _HEAP_ENTRY *LastEntryInSegment;
};

/* 5931 */
struct _HEAP_PSEUDO_TAG_ENTRY
{
  unsigned int Allocs;
  unsigned int Frees;
  unsigned int Size;
};

/* 5932 */
struct _HEAP
{
  _HEAP_ENTRY Entry;
  unsigned int Signature;
  unsigned int Flags;
  unsigned int ForceFlags;
  unsigned int VirtualMemoryThreshold;
  unsigned int SegmentReserve;
  unsigned int SegmentCommit;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned int TotalFreeSize;
  unsigned int MaximumAllocationSize;
  unsigned __int16 ProcessHeapsListIndex;
  unsigned __int16 HeaderValidateLength;
  void *HeaderValidateCopy;
  unsigned __int16 NextAvailableTagIndex;
  unsigned __int16 MaximumTagIndex;
  _HEAP_TAG_ENTRY *TagEntries;
  _HEAP_UCR_SEGMENT *UCRSegments;
  _HEAP_UNCOMMMTTED_RANGE *UnusedUnCommittedRanges;
  unsigned int AlignRound;
  unsigned int AlignMask;
  _LIST_ENTRY VirtualAllocdBlocks;
  _HEAP_SEGMENT *Segments[64];
  unsigned int FreeListsInUseUlong[4];
  unsigned __int16 FreeListsInUseTerminate;
  unsigned __int16 AllocatorBackTraceIndex;
  char Reserved1[7];
  char ProcessType;
  _HEAP_PSEUDO_TAG_ENTRY *PseudoTagEntries;
  _LIST_ENTRY FreeLists[128];
  _HEAP_LOCK *LockVariable;
  int (__cdecl *CommitRoutine)(void *, void **, unsigned int *);
  void *Lookaside;
  unsigned int LookasideLockCount;
};

/* 5933 */
struct $2D5184E9B969D2673E61420A64C87FC9
{
  unsigned __int16 AllocatorBackTraceIndex;
  unsigned __int16 TagIndex;
  unsigned int Settable;
};

/* 5934 */
union $D99CDE564C06D2148F0DC184C2EA3833
{
  $2D5184E9B969D2673E61420A64C87FC9 _s0;
  unsigned __int64 ZeroInit;
};

/* 5935 */
struct _HEAP_ENTRY_EXTRA
{
  $D99CDE564C06D2148F0DC184C2EA3833 ___u0;
  unsigned __int64 ZeroInit1;
};

/* 5936 */
struct _HEAP_VIRTUAL_ALLOC_ENTRY
{
  _LIST_ENTRY Entry;
  _HEAP_ENTRY_EXTRA ExtraStuff;
  unsigned int CommitSize;
  unsigned int ReserveSize;
  _HEAP_ENTRY BusyBlock;
};

/* 5937 */
struct _HEAP_STOP_ON_VALUES
{
  unsigned int AllocAddress;
  _HEAP_STOP_ON_TAG AllocTag;
  unsigned int ReAllocAddress;
  _HEAP_STOP_ON_TAG ReAllocTag;
  unsigned int FreeAddress;
  _HEAP_STOP_ON_TAG FreeTag;
};

/* 5938 */
struct _HEAP_FREE_ENTRY
{
  unsigned __int16 Size;
  unsigned __int16 PreviousSize;
  char SegmentIndex;
  char Flags;
  char Index_UNUSED;
  char Mask_UNUSED;
  _LIST_ENTRY FreeList;
  unsigned __int64 Reserved1;
};

/* 5939 */
struct XUIMessageSoundVolume
{
  float fVolume;
};

/* 5940 */
struct CXLivePresenceList
{
  _RTL_CRITICAL_SECTION m_csLock;
  unsigned int m_cPresence;
  _XONLINE_PRESENCE m_rgPresence[500];
};

/* 5941 */
struct XUIMessage
{
  unsigned int cbSize;
  unsigned int dwMessage;
  int bHandled;
  unsigned int cbData;
  void *pvData;
};

/* 5942 */
struct CXuiElementImplBase
{
  CXuiElementImplBaseVtbl *vfptr;
};

/* 5943 */
struct $5121B3A154076411E7CE0FFEC1137674
{
  _BYTE gap0[4];
  HRESULT (__cdecl *DispatchMessageMap)(CXuiElementImplBase *this, XUIMessage *);
};

/* 5944 */
union $4A1083F203A3DCEC42260820CE15AE5C
{
  HRESULT (__cdecl *ObjectProc)(CXuiElementImplBase *this, XUIMessage *);
  $5121B3A154076411E7CE0FFEC1137674 _s1;
};

/* 5945 */
struct CXuiElementImplBaseVtbl
{
  $4A1083F203A3DCEC42260820CE15AE5C ___u0;
};

/* 5946 */
struct XUIMessageCaretPosition
{
  unsigned int nPosition;
};

/* 5947 */
struct _XNPXMITRECVSTATS
{
  unsigned __int64 qwNumXmitBytes;
  unsigned __int64 qwNumRecvBytes;
  unsigned int dwNumXmitFrames;
  unsigned int dwNumRecvFrames;
};

/* 5948 */
struct XUICharMetrics
{
  float fMinX;
  float fMinY;
  float fMaxX;
  float fMaxY;
  float fAdvance;
};

/* 5949 */
struct LIVEBASE_EXPIREMARKETPLACECOUNTSCACHE_MSG
{
  unsigned int dwUserIndex;
};

/* 5950 */
struct CXuiBase
{
  _XUIOBJ *m_hObj;
};

/* 5951 */
struct CXuiElement
{
  CXuiBase baseclass_0;
};

/* 5952 */
struct CXuiControl
{
  CXuiElement baseclass_0;
};

/* 5953 */
struct CXuiEdit
{
  CXuiControl baseclass_0;
};

/* 5954 */
struct XUITextFormatInfo
{
  int nStart;
  int nEnd;
  struct _XUIBRUSH *hBrush;
  unsigned int dwTextColor;
};

/* 5955 */
struct XUIMessageTopLine
{
  unsigned int nLineIndex;
  int bSmoothScroll;
};

/* 5956 */
struct XUIMessageTransition
{
  unsigned int dwTransType;
  int bStartedSelfTransition;
  unsigned int dwTransAction;
};

/* 5957 */
struct XUIMessageItemEnable
{
  int iItem;
  int bEnabled;
};

/* 5958 */
struct CXuiVideo
{
  CXuiElement baseclass_0;
};

/* 5959 */
struct IXMediaXmvPlayer
{
  char dummy[1];
};

/* 5960 */
struct CXuiStringTable
{
  struct _XUISTRINGTABLE *m_hStringTable;
};

/* 5961 */
struct XUIMessageGetSoundState
{
  unsigned int dwState;
};

/* 5962 */
struct XUIMessageItemCount
{
  XUI_ITEMCOUNT nType;
  int cItems;
};

/* 5963 */
struct XPRESENCE_ENUM_CONTEXT
{
  unsigned int dwUserIndex;
  unsigned int cPeers;
  unsigned __int64 rgPeers[100];
  unsigned int dwStartingIndex;
  unsigned int dwPeersToReturn;
};

/* 5964 */
struct IXuiResourceManager
{
  IXuiResourceManagerVtbl *vfptr;
};

/* 5965 */
struct IXuiResourceReader
{
  IXuiResourceReaderVtbl *vfptr;
};

/* 5966 */
struct $990D300A2191C850C0D735AE57FD8AD3
{
  _BYTE gap0[4];
  unsigned int (__cdecl *GetTotalSize)(IXuiResourceReader *this);
  unsigned int (__cdecl *GetRemainingBytes)(IXuiResourceReader *this);
  HRESULT (__cdecl *Read)(IXuiResourceReader *this, char *, unsigned int, unsigned int *);
};

/* 5967 */
struct $4A3A23F762A5015B1143096B5FD74144
{
  _BYTE gap0[16];
  HRESULT (__cdecl *Seek)(IXuiResourceReader *this, unsigned int, int);
};

/* 5968 */
struct $A917E08895F1B09F9665F37CD84A46F0
{
  _BYTE gap0[20];
  HRESULT (__cdecl *GetBuffer)(IXuiResourceReader *this, const char **);
};

/* 5969 */
struct $0C4B580444998CCDC3B4828D3400E87B
{
  _BYTE gap0[24];
  HRESULT (__cdecl *ReleaseBuffer)(IXuiResourceReader *this);
};

/* 5970 */
union $E4EBECAB226C5C7CB1F4082A8F61E140
{
  HRESULT (__cdecl *SetManager)(IXuiResourceReader *this, IXuiResourceManager *);
  $990D300A2191C850C0D735AE57FD8AD3 _s1;
  $4A3A23F762A5015B1143096B5FD74144 _s2;
  $A917E08895F1B09F9665F37CD84A46F0 _s3;
  $0C4B580444998CCDC3B4828D3400E87B _s4;
};

/* 5971 */
struct IXuiResourceReaderVtbl
{
  void (__cdecl *AddRef)(IXuiResourceReader *this);
  unsigned int (__cdecl *Release)(IXuiResourceReader *this);
  IXuiResourceManager *(__cdecl *GetManager)(IXuiResourceReader *this);
  $E4EBECAB226C5C7CB1F4082A8F61E140 ___u3;
};

/* 5972 */
struct $EB7455A147559AFA53BF1D5B419FC05F
{
  _BYTE gap0[4];
  HRESULT (__cdecl *Open)(IXuiResourceManager *this, const wchar_t *, IXuiResourceReader **);
};

/* 5973 */
struct $92B8F98E117D23F665D823B6F51E92C6
{
  _BYTE gap0[8];
  HRESULT (__cdecl *GetFileAttributesA)(IXuiResourceManager *this, const wchar_t *, _WIN32_FILE_ATTRIBUTE_DATA *);
};

/* 5974 */
union $C019CF5E93A91A6135CF6C9E59114C6F
{
  HRESULT (__cdecl *Init)(IXuiResourceManager *this, IXuiResourceReader *);
  $EB7455A147559AFA53BF1D5B419FC05F _s1;
  $92B8F98E117D23F665D823B6F51E92C6 _s2;
};

/* 5975 */
struct IXuiResourceManagerVtbl
{
  void (__cdecl *AddRef)(IXuiResourceManager *this);
  unsigned int (__cdecl *Release)(IXuiResourceManager *this);
  const wchar_t *(__cdecl *GetName)(IXuiResourceManager *this);
  int (__cdecl *IsTransport)(IXuiResourceManager *this);
  $C019CF5E93A91A6135CF6C9E59114C6F ___u4;
};

/* 5976 */
struct _XLIVEBASE_GET_TASK_PROGRESS
{
  _XOVERLAPPED *pXOverlapped;
  unsigned int *pdwPercentComplete;
  unsigned __int64 *pqwNumerator;
  unsigned __int64 *pqwDenominator;
};

/* 5977 */
struct __declspec(align(8)) CXLiveAsyncTaskInternal
{
  CXLiveAsyncTaskInternalVtbl *vfptr;
  __declspec(align(8)) CXLiveAsyncTask *m_pExternal;
  _XLIVEBASE_ASYNC_MESSAGE *m_pXLiveBaseAsyncMessage;
  ASYNC_TASK_STATE m_State;
  _LIST_ENTRY m_leTasks;
  _LIST_ENTRY m_leThrottle;
  CSchemaData *m_pCurrentSchema;
  unsigned int m_dwSchemaIndex;
  unsigned int m_HttpStatus;
  HRESULT m_hrFinal;
  HRESULT m_hrXErr;
  CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA *m_pReceiveRateLimitData;
  CXrlConnection m_XrlConnection;
  CXrlTransaction m_XrlTransaction;
  CUnmarshaller m_Unmarshaller;
  char m_abTaskObjectPadding[12];
};

/* 5978 */
struct CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA
{
  unsigned int dwRefCount;
  unsigned int dwActiveCount;
  unsigned int dwReceiveByteLimitPerPeriod;
  unsigned int dwReceivePeriodStartTick;
  unsigned int dwReceivePeriodBytes;
  CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA *pParentData;
};

/* 5979 */
struct $24937483C50241EFF7FE894BA36D323E
{
  _BYTE gap0[4];
  void (__cdecl *CustomCleanup)(CXLiveAsyncTaskInternal *this);
  unsigned int (__cdecl *CustomGetObjectSize)(CXLiveAsyncTaskInternal *this);
  CXLiveAsyncTaskInternal::RECEIVERATELIMITDATA *(__cdecl *CustomSelectReceiveRateLimitData)(CXLiveAsyncTaskInternal *this);
  HRESULT (__cdecl *CustomPrepareRequest)(CXLiveAsyncTaskInternal *this);
};

/* 5980 */
struct $169BDE52FCDF2EACF503A735999619B4
{
  _BYTE gap0[20];
  HRESULT (__cdecl *CustomContinueBuildRequest)(CXLiveAsyncTaskInternal *this);
};

/* 5981 */
struct $DF1FE5A1D1938385CE2F9A82273DA7BA
{
  _BYTE gap0[24];
  HRESULT (__cdecl *CustomContinueSubmitRequest)(CXLiveAsyncTaskInternal *this);
};

/* 5982 */
struct $889B522CE0D0C439B13714623B0366AB
{
  _BYTE gap0[28];
  HRESULT (__cdecl *CustomContinueProcessHttpHeaders)(CXLiveAsyncTaskInternal *this);
};

/* 5983 */
struct $BAD57C42DA3FAD7D4A6289B99C9714A3
{
  _BYTE gap0[32];
  HRESULT (__cdecl *CustomHandleHttpHeadersComplete)(CXLiveAsyncTaskInternal *this);
};

/* 5984 */
struct $1793754248422DBF5723A499812B53F8
{
  _BYTE gap0[36];
  HRESULT (__cdecl *CustomContinueProcessResponseHeader)(CXLiveAsyncTaskInternal *this);
};

/* 5985 */
struct $795674DA52462427E7BD90A4B4D64D85
{
  _BYTE gap0[40];
  HRESULT (__cdecl *CustomHandleResponseHeaderComplete)(CXLiveAsyncTaskInternal *this, HRESULT);
};

/* 5986 */
struct $6E5080282A0832B0B4DCD757739DE271
{
  _BYTE gap0[44];
  HRESULT (__cdecl *CustomContinueResponseData)(CXLiveAsyncTaskInternal *this);
};

/* 5987 */
struct $DEB3905222FD72FF45159F150E95F73F
{
  _BYTE gap0[48];
  unsigned int (__cdecl *CustomGetMaxReceiveChunkSize)(CXLiveAsyncTaskInternal *this);
};

/* 5988 */
union $FD0A4BE9750BBE0C3723C88F0AD00AAE
{
  HRESULT (__cdecl *CustomInitialize)(CXLiveAsyncTaskInternal *this);
  $24937483C50241EFF7FE894BA36D323E _s1;
  $169BDE52FCDF2EACF503A735999619B4 _s2;
  $DF1FE5A1D1938385CE2F9A82273DA7BA _s3;
  $889B522CE0D0C439B13714623B0366AB _s4;
  $BAD57C42DA3FAD7D4A6289B99C9714A3 _s5;
  $1793754248422DBF5723A499812B53F8 _s6;
  $795674DA52462427E7BD90A4B4D64D85 _s7;
  $6E5080282A0832B0B4DCD757739DE271 _s8;
  $DEB3905222FD72FF45159F150E95F73F _s9;
};

/* 5989 */
struct CXLiveAsyncTaskInternalVtbl
{
  $FD0A4BE9750BBE0C3723C88F0AD00AAE ___u0;
};

/* 5990 */
struct SCHEMA_HEADER
{
  unsigned __int16 SchemaVersionMajor;
  unsigned __int16 SchemaVersionMinor;
  unsigned int ToolVersion;
  unsigned int Flags;
  unsigned int CompressedSize;
  unsigned int UncompressedSize;
  unsigned int ConstantsTableOffset;
  unsigned __int16 ConstantsTableSize;
  unsigned __int16 ConstantSize;
  unsigned int UrlTableOffset;
  unsigned __int16 UrlTableSize;
  unsigned __int16 UrlTableDataSize;
  unsigned __int16 HeaderSize;
  unsigned __int16 ExtensionDataSize;
  unsigned __int16 SchemaTableEntries;
  unsigned __int16 SchemaTableEntrySize;
};

/* 5991 */
struct ORDINAL_TO_INDEX
{
  unsigned __int16 wOrdinal;
  unsigned __int16 wIndex;
};

/* 5992 */
struct SCHEMA_TABLE_ENTRY
{
  unsigned __int16 RequestSchemaSize;
  unsigned __int16 ResponseSchemaSize;
  unsigned int RequestSchemaOffset;
  unsigned int ResponseSchemaOffset;
  unsigned int MaxRequestAggregateSize;
  unsigned int MaxResponseAggregateSize;
  unsigned __int16 ServiceIDIndex;
  unsigned __int16 RequestUrlIndex;
};

/* 5993 */
struct CSchemaData
{
  SCHEMA_HEADER m_Header;
  ORDINAL_TO_INDEX *m_lpOrdinalToIndex;
  SCHEMA_TABLE_ENTRY *m_lpTableEntries;
  char *m_lpSchemaData;
  unsigned int m_SchemaDataSize;
  char *m_pbExtensionData;
  unsigned int *m_lpConstantList;
  unsigned __int16 *m_lpUrlOffsets;
  char *m_lpUrlData;
};

/* 5994 */
struct CBaseEndianBuffer
{
  char *m_pbBuffer;
  unsigned int m_cbBuffer;
  unsigned int m_cbAvailable;
  unsigned int m_cbConsumed;
  int m_fReverseEndian;
};

/* 5995 */
struct CLittleEndianBuffer
{
  CBaseEndianBuffer baseclass_0;
};

/* 5996 */
struct CXLiveAsyncTask
{
  unsigned int m_dwOrdinal;
  CSchemaData *m_pXDKSchema;
  unsigned int m_dwXDKSchemaIndex;
  unsigned int m_dwFlags;
  CXLiveAsyncTaskInternal *m_pInternal;
  unsigned int m_dwInternalTaskSize;
  char *m_pbMarshalledRequest;
  unsigned int m_cbMarshalledRequest;
  unsigned int m_cbTotalRequestBuffer;
  unsigned int m_dwCounter;
  unsigned int m_dwLogonID;
  char *m_pbResults;
  unsigned int m_cbResults;
  CLittleEndianBuffer m_WireBuffer;
  _XOVERLAPPED *m_pxov;
};

/* 5997 */
#pragma pack(push, 8)
struct _XLIVEBASE_ASYNC_MESSAGE
{
  CXLiveAsyncTask *pAsyncTask;
  unsigned __int64 qwCurrentNumerator;
  unsigned __int64 qwCurrentDenominator;
  unsigned __int64 qwLastNumerator;
  unsigned __int64 qwLastDenominator;
};
#pragma pack(pop)

/* 5998 */
struct CXrlConnection
{
  void *m_hSession;
  void *m_hConnect;
  unsigned int m_dwServiceID;
  CXrlTransaction *m_pTransaction;
};

/* 5999 */
struct CXrlTransaction
{
  XRL_TRANSACTION_STATE m_State;
  CXrlConnection *m_pConnection;
  void *m_hRequest;
  unsigned int m_dwRequestDataRemaining;
  char *m_pbResponseBuffer;
  unsigned int m_dwResponseBufferSize;
  unsigned __int64 m_qwContentLengthRemaining;
  HRESULT m_hrResult;
  char *m_pbCurrentRead;
  unsigned int m_dwBytesReceived;
  char m_abRequestHandleBuffer[3072];
};

/* 6000 */
struct CSchemaAccess
{
  CLittleEndianBuffer baseclass_0;
  CSchemaData *m_pSchemaData;
};

/* 6001 */
struct COutputBuffer
{
  char *m_pbBuffer;
  unsigned int m_cbBuffer;
  unsigned int m_cbWritten;
};

/* 6002 */
struct CConformanceInfo
{
  int _bf0;
  char *m_pbWrittenLocation;
  unsigned __int64 m_Conformance;
};

/* 6003 */
struct CConformanceList
{
  CConformanceInfo m_rgConformanceInfo[64];
};

/* 6004 */
struct SCHEMA_DESCRIPTOR
{
  char _bf0;
};

/* 6005 */
struct SCHEMA_EXTENDED_ATTRIBUTES
{
  char _bf0;
};

/* 6006 */
struct SCHEMA_CONFORMANCE_INFO
{
  _BYTE gap0[1];
  char _bf1;
  unsigned __int16 ConformanceMaxIndex;
};

/* 6007 */
struct SCHEMA_CONFORMING_INFO
{
  char _bf0;
  char Reserved;
};

/* 6008 */
struct SCHEMA_UNION_INFO
{
  char _bf0;
  char NumSwitchArms;
};

/* 6009 */
#pragma pack(push, 4)
struct CScopeItem
{
  int InRecursion;
  unsigned int Checkpoint;
  unsigned int cbFlatSize;
  unsigned int dwIterator1;
  unsigned int dwIterator2;
  unsigned int dwIteratorCounter1;
  unsigned int dwIteratorCounter2;
  unsigned int dwSchemaScopeRepeatPoint;
  unsigned int dwUnionSelectionValue;
  unsigned int dwCurrentScopeBegin;
  unsigned __int16 CurrentSwitchArm;
  unsigned __int16 PropIDIndex;
  unsigned __int16 SelectorMask;
  int _bf48;
  char *pbEndOfUnion;
  COutputBuffer OutputBuffer;
  COutputBuffer *pOutputBuffer;
  SCHEMA_DESCRIPTOR rsd;
  SCHEMA_DESCRIPTOR rsdMember;
  SCHEMA_EXTENDED_ATTRIBUTES ExtAttributes;
  SCHEMA_CONFORMANCE_INFO ConformanceInfo;
  SCHEMA_CONFORMING_INFO ConformingInfo;
  SCHEMA_UNION_INFO UnionInfo;
};
#pragma pack(pop)

/* 6010 */
struct __declspec(align(8)) CUnmarshaller
{
  CSchemaData *m_pSchemaData;
  CSchemaData *m_pXDKSchema;
  unsigned int m_dwXDKSchemaIndex;
  CLittleEndianBuffer *m_pWireBuffer;
  CSchemaAccess m_SchemaBuffer;
  COutputBuffer m_OutputBuffer;
  __declspec(align(8)) CConformanceList m_ConformanceList;
  unsigned int m_CurrentScope;
  CScopeItem m_rgScopeStack[16];
  unsigned int m_SchemaCheckpoint;
  unsigned int m_OutputCheckpoint;
  unsigned int m_WireCheckpoint;
  unsigned int m_BaseOutputBufferCheckpoint;
  unsigned int m_dwCounter;
  HRESULT m_hrSecondary;
  wchar_t m_TempBuffer[1024];
};

/* 6011 */
struct CXStorageDownloadParent
{
  CXLiveAsyncTaskInternal baseclass_0;
};

/* 6012 */
struct CXLiveSubTask
{
  CXLiveAsyncTaskInternal baseclass_0;
  CXLiveAsyncTask m_AsyncTask;
  CXLiveAsyncTaskInternal *m_pParentTask;
};

/* 6013 */
struct CXStorageTask
{
  CXLiveSubTask baseclass_0;
};

/* 6014 */
struct CXStorageDownloadWorker::RESOLVE_NAME_RESPONSE_BUFFER
{
  _XRESOLVE_NAME_RESPONSE Response;
  wchar_t awcStringBuffer[63];
};

/* 6015 */
union $E8BE0DCE93B8E8B8B8114ECAC1090EF3
{
  CXStorageDownloadWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;
  _XSIGNATURE_VERIFY_RESPONSE m_SignatureVerifyResponse;
};

/* 6016 */
struct CXStorageDownloadWorker
{
  CXStorageTask baseclass_0;
  CXLiveSubTask *m_pSubTask;
  int m_fHaveData;
  $E8BE0DCE93B8E8B8B8114ECAC1090EF3 ___u3;
  _BYTE gap1e77[153];
};

/* 6017 */
struct _STORAGE_DL_RESPONSE_BUFFER
{
  _XSTORAGE_DOWNLOAD_RESPONSE StorageDownloadResponse;
  char abAttributes[256];
};

/* 6018 */
#pragma pack(push, 8)
struct CXStorageDownloadToMemory
{
  CXStorageDownloadParent baseclass_0;
  unsigned __int64 m_xuidUser;
  unsigned int m_dwServerPathLength;
  wchar_t *m_pwszServerPath;
  char *m_pbBuffer;
  unsigned int m_dwBufferSize;
  CXStorageDownloadWorker *m_pDownloadSubTask;
  _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;
};
#pragma pack(pop)

/* 6019 */
#pragma pack(push, 8)
struct _XSTORAGE_BUILD_SERVER_PATH
{
  unsigned int dwUserIndex;
  unsigned __int64 xuidUser;
  _XSTORAGE_FACILITY StorageFacility;
  const void *pvStorageFacilityInfo;
  unsigned int dwStorageFacilityInfoSize;
  const wchar_t *pwszItemName;
  wchar_t *pwszServerPath;
  unsigned int *pdwServerPathLength;
};
#pragma pack(pop)

/* 6020 */
struct IXuiResourceReaderVTBL
{
  void (__cdecl *AddRef)(IXuiResourceReader *);
  unsigned int (__cdecl *Release)(IXuiResourceReader *);
  IXuiResourceManager *(__cdecl *GetManager)(IXuiResourceReader *);
  HRESULT (__cdecl *SetManager)(IXuiResourceReader *, IXuiResourceManager *);
  unsigned int (__cdecl *GetTotalSize)(IXuiResourceReader *);
  unsigned int (__cdecl *GetRemainingBytes)(IXuiResourceReader *);
  HRESULT (__cdecl *Read)(IXuiResourceReader *, char *, unsigned int, unsigned int *);
  HRESULT (__cdecl *Seek)(IXuiResourceReader *, unsigned int, int);
  HRESULT (__cdecl *GetBuffer)(IXuiResourceReader *, const char **);
  HRESULT (__cdecl *ReleaseBuffer)(IXuiResourceReader *);
};

/* 6021 */
#pragma pack(push, 8)
struct _XUSER_PLAYERLIST_USER_INTERNAL
{
  unsigned __int64 qwPlayerID;
  unsigned int dwFlags;
  unsigned int dwTitleID;
  unsigned int mtUpdated;
  unsigned int dwRating;
  char szGamertag[16];
  char fPendingAdd;
  unsigned __int16 wNextPending;
};
#pragma pack(pop)

/* 6022 */
#pragma pack(push, 8)
struct _XUSER_PLAYERLIST_INTERNAL
{
  unsigned __int64 qwUserID;
  unsigned __int16 cNum;
  unsigned __int16 wPendingHead;
  unsigned __int16 cPending;
  int _bf16;
  _XOVERLAPPED Overlapped;
  _P_QUERY_AFFILIATES_REPLY_MSG *pBuffer;
  _XUSER_PLAYERLIST_USER_INTERNAL PlayerList[50];
};
#pragma pack(pop)

/* 6023 */
struct XUIMessageRender
{
  struct _XUIDC *hDC;
  unsigned int dwColorFactor;
  XUI_BLEND_MODE nBlendMode;
  unsigned int dwColorWriteFlags;
};

/* 6024 */
struct XUIRenderStruct
{
  unsigned int dwOrigColorFactor;
  XUI_BLEND_MODE nOrigBlendMode;
  unsigned int dwOrigColorWriteFlags;
};

/* 6025 */
struct XUITimelineCtl
{
  unsigned int m_nState;
  int m_nRangeStart;
  int m_nRangeEnd;
  int m_bLoop;
  int m_nNotifyStart;
  int m_nNotifyEnd;
};

/* 6026 */
struct XUIKeyFrame
{
  unsigned int m_dwFrame;
  XUI_INTERPOLATE m_nInterpolationType;
  D3DXVECTOR2 m_vEaseIn;
  D3DXVECTOR2 m_vEaseOut;
  XUIElementPropVal *m_pPropVals;
};

/* 6027 */
struct XUISubtimelineProp
{
  IXUIPropObj *m_pObj;
  XUIElementPropDef *m_pPropDef;
  int m_nIndex;
};

/* 6028 */
struct XUIAllocatedArray
{
  int m_nCount;
  unsigned int m_dwElemSize;
};

/* 6029 */
struct XUINamedframeData
{
  const wchar_t *m_szName;
  unsigned int m_dwFrame;
  XUI_NAMEDFRAME_COMMAND m_nCommand;
  const wchar_t *m_szCommandParams;
};

/* 6030 */
struct XUINamedFrame
{
  const wchar_t *m_szName;
  unsigned int m_dwFrame;
  XUI_NAMEDFRAME_COMMAND m_nCommand;
  int m_nTargetFrame;
};

/* 6031 */
struct XUITimelinePropPath
{
  unsigned int m_dwFlags;
  int m_nPathDepth;
  XUIElementPropDef **m_ppPropDefs;
};

/* 6032 */
struct XUIKeyframeData
{
  int m_nTime;
  char m_bFlags;
  char m_nEaseIn;
  char m_nEaseOut;
  char m_nEaseScale;
  int m_nNumPropVals;
  XUIElementPropVal *m_pPropVals;
};

/* 6033 */
struct XUISubtimelineData
{
  unsigned int m_dwFlags;
  const wchar_t *m_szId;
  int m_nNumProps;
  XUITimelinePropPath *m_pPropPaths;
  int *m_pnIndices;
  int m_nNumKeyFrames;
  XUIKeyframeData *m_pKeyFrames;
  XUIKeyFrame *m_pRuntimeKeyFrames;
};

/* 6034 */
struct XUIObjectData
{
  const wchar_t *m_szClassName;
  XUIAllocatedArray *m_pPropArray;
  XUIAllocatedArray *m_pChildArray;
  XUINamedframeData *m_pNamedFrames;
  int m_nNumNamedFrames;
  XUINamedFrame *m_pRuntimeNamedFrames;
  unsigned int m_dwRefs;
  int m_nNumTimelines;
  XUISubtimelineData *m_pTimelines;
  unsigned int m_dwFlags;
  void *m_pLoadData;
};

/* 6035 */
struct XUISubtimeline
{
  XUITimelineCtl m_state;
  _XUIOBJ *m_hObj;
  int m_nNumKeyFrames;
  XUIKeyFrame *m_pKeyFrames;
  int m_nAnimLength;
  unsigned int m_dwFlags;
  int m_nInitialFrameOffset;
  float m_fCurrTime;
  int m_nNumProps;
  XUISubtimelineProp *m_pProps;
  int m_bSharedKeyFrames;
  XUIObjectData *m_pKeyFrameOwner;
};

/* 6036 */
struct XUITimeline
{
  _XUIOBJ *m_hObj;
  XUITimelineCtl m_state;
  int m_nNumTimelines;
  XUISubtimeline *m_pTimelines;
  XUINamedFrame *m_pNamedFrames;
  int m_nNumNamedFrames;
  int m_bSharedNamedFrames;
  XUIObjectData *m_pNamedFrameOwner;
  int m_nAnimLength;
  unsigned int m_dwFlags;
  int m_nInitialFrameOffset;
  int m_nCurrNamedFrame;
  int m_bStopOnNext;
  int m_bPlayOnNext;
  float m_fCurrTime;
};

/* 6037 */
#pragma pack(push, 4)
struct XUIMessageChar
{
  wchar_t wch;
  unsigned int dwFlags;
  char UserIndex;
};
#pragma pack(pop)

/* 6038 */
struct XPRESENCE_SUBSCRIBE
{
  int fInProgress;
  unsigned int dwUserIndex;
  _P_PEER_SUBSCRIBE_REPLY_MSG reply;
  _XOVERLAPPED xov;
};

/* 6039 */
struct XUIGradientStop
{
  unsigned int dwColor;
  float fPos;
};

/* 6040 */
struct XUIMessageChecked
{
  _XUIOBJ *hChecked;
};

/* 6041 */
struct XUIMessageItemHandle
{
  int iItem;
  _XUIOBJ *hItem;
};

/* 6042 */
union $E94AD4B0A0DB0E90365DB8AA5645CDFF
{
  const void *pvMemory;
  char szDirPath[260];
};

/* 6043 */
struct XMESSAGING_LARGEPROP
{
  unsigned __int16 wPropIndex;
  __declspec(align(4)) $E94AD4B0A0DB0E90365DB8AA5645CDFF ___u1;
};

/* 6044 */
struct XUIMessageSourceImage
{
  int iItem;
  int iData;
  int bItemData;
  int bDirty;
  const wchar_t *szPath;
  struct _XUIBRUSH *hBrush;
  _XUIOBJ *hObj;
};

/* 6045 */
#pragma pack(push, 4)
struct XONLINE_FRIEND_INTERNAL
{
  _XONLINE_FRIEND baseclass_0;
  char bReserved;
  unsigned int dwReserved[4];
  unsigned int dwChangeVer;
};
#pragma pack(pop)

/* 6046 */
#pragma pack(push, 4)
struct XONLINE_FRIEND_LIST_INTERNAL
{
  unsigned __int64 qwUserID;
  unsigned int dwVersion;
  unsigned __int16 cNum;
  unsigned int dwReserved[8];
  XONLINE_FRIEND_INTERNAL Friendlist[100];
};
#pragma pack(pop)

/* 6047 */
struct IXUIRuntimeHooks
{
  IXUIRuntimeHooksVtbl *vfptr;
};

/* 6048 */
struct $5534E97ED913A70CE208A9AF75F4DEE4
{
  _BYTE gap0[4];
  HRESULT (__cdecl *FindClassByName)(IXUIRuntimeHooks *this, const wchar_t *, _XUICLASS **);
};

/* 6049 */
struct $24F9704781108C844EBE17FD6D52654D
{
  _BYTE gap0[8];
  HRESULT (__cdecl *GetTextPresenterText)(IXUIRuntimeHooks *this, _XUIOBJ *, const wchar_t **);
};

/* 6050 */
struct $E1F75CC13F0D1A9A0EBAF24A9E2837AE
{
  _BYTE gap0[12];
  HRESULT (__cdecl *LogMessage)(IXUIRuntimeHooks *this, HRESULT, const wchar_t *);
};

/* 6051 */
union $E29DD14ABB2229A11C1062887F8A374B
{
  HRESULT (__cdecl *RewriteResourceLocator)(IXUIRuntimeHooks *this, const wchar_t *, wchar_t **);
  $5534E97ED913A70CE208A9AF75F4DEE4 _s1;
  $24F9704781108C844EBE17FD6D52654D _s2;
  $E1F75CC13F0D1A9A0EBAF24A9E2837AE _s3;
};

/* 6052 */
struct IXUIRuntimeHooksVtbl
{
  $E29DD14ABB2229A11C1062887F8A374B ___u0;
};

/* 6053 */
struct XUIInitParams
{
  unsigned int cbSize;
  unsigned int dwFlags;
  IXUIRuntimeHooks *pHooks;
};

/* 6054 */
#pragma pack(push, 4)
struct XUIMessageFocus
{
  _XUIOBJ *hOther;
  char UserIndex;
};
#pragma pack(pop)

/* 6055 */
struct XUIMessageSetBackScene
{
  _XUIOBJ *hBackScene;
  _XUIOBJ *hOldBackScene;
};

/* 6056 */
struct XUIMessageEnableState
{
  int bEnabled;
};

/* 6057 */
struct XUIMessageCheckState
{
  int bChecked;
};

/* 6058 */
struct XnSockInfo
{
  unsigned int Socket;
  _XNCALLER_TYPE CallerType;
  unsigned int dwInfoFlags;
  int iAddressFamily;
  int iSocketType;
  int iProtocol;
  in_addr inaddrLocal;
  in_addr inaddrRemote;
  unsigned __int16 wLocalPort;
  unsigned __int16 wRemotePort;
  char bTcpState;
  char bReserved1;
  char bReserved2;
  char bReserved3;
};

/* 6059 */
struct XUIMessageSourceHtml
{
  unsigned int dwUnique;
  int iItem;
  int iData;
  int bItemData;
  const wchar_t *szHtml;
};

/* 6060 */
struct XUIMessageLineCount
{
  XUI_LINECOUNT nType;
  unsigned int nCount;
  int bSmoothScroll;
};

/* 6061 */
struct XUIMessageNavReturn
{
  _XUIOBJ *hScene;
};

/* 6062 */
struct CXStorageUploadParent
{
  CXLiveAsyncTaskInternal baseclass_0;
};

/* 6063 */
struct XUIMessageNavInfo
{
  int iItem;
  const wchar_t *szNavPath;
  int bStayVisible;
  unsigned int nSrcTransIndex;
  unsigned int nDestTransIndex;
};

/* 6064 */
struct XUIMessageMessageBoxReturn
{
  int nButton;
};

/* 6065 */
struct _XNPSOCKETSECURITY
{
  unsigned int Socket;
  unsigned int dwFlags;
  unsigned int dwNumKeys;
  XNKID *pxnkids;
};

/* 6066 */
struct _XONLINE_CACHE_CFFILE
{
  CFFILE cffile;
  char szFileName[260];
};

/* 6067 */
union $6DF588A672A68E3AFAD998B8401C477E
{
  CFFILE cffileNext;
  _XONLINE_CACHE_CFFILE PreviousCached;
};

/* 6068 */
union $7B9803D0C861A42EFBD7C79A0CD1C9D4
{
  XECRYPT_HMACSHA_STATE HmacShaState;
  XECRYPT_SHA_STATE ShaState;
};

/* 6069 */
#pragma pack(push, 4)
struct CXCabCryptHelper
{
  unsigned int m_dwTotalSize;
  unsigned int m_dwSizeProcessed;
  int m_fEncrypted;
  char m_abOriginalChecksum[20];
  $7B9803D0C861A42EFBD7C79A0CD1C9D4 m_State;
  XECRYPT_RC4_STATE m_Rc4State;
};
#pragma pack(pop)

/* 6070 */
#pragma pack(push, 4)
struct t_decoder_context
{
  char *dec_mem_window;
  unsigned int dec_window_size;
  unsigned int dec_window_mask;
  unsigned int dec_last_matchpos_offset[3];
  __int16 dec_main_tree_table[1024];
  __int16 dec_secondary_length_tree_table[256];
  char dec_main_tree_len[2584];
  char dec_secondary_length_tree_len[249];
  char pad1[3];
  char dec_aligned_table[128];
  char dec_aligned_len[8];
  __int16 dec_main_tree_left_right[10336];
  __int16 dec_secondary_length_tree_left_right[996];
  char *dec_input_curpos;
  char *dec_end_input_pos;
  char *dec_output_buffer;
  int dec_position_at_start;
  char dec_main_tree_prev_len[2584];
  char dec_secondary_length_tree_prev_len[249];
  unsigned int dec_bitbuf;
  char dec_bitcount;
  unsigned int dec_num_position_slots;
  bool dec_first_time_this_group;
  bool dec_error_condition;
  int dec_bufpos;
  unsigned int dec_current_file_size;
  unsigned int dec_instr_pos;
  unsigned int dec_num_cfdata_frames;
  int dec_original_block_size;
  int dec_block_size;
  lzx_block_type dec_block_type;
  decoder_state dec_decoder_state;
  bool dec_extra_long_matches;
};
#pragma pack(pop)

/* 6071 */
struct __declspec(align(8)) CXCabStreamUnpacker
{
  _XCAB_STREAM_UNPACK_STATE m_State;
  int _bf4;
  CLittleEndianBuffer *m_pSourceBuffer;
  __declspec(align(8)) _LARGE_INTEGER m_liBytesProcessed;
  XONLINECONTENT_HEADER m_ContentHeader;
  _XSIGNATURE_TO_VERIFY m_ContentHeaderSignature;
  CFFOLDER_HMAC m_aCfFolderHmac[100];
  unsigned int m_dwCurrentFolder;
  unsigned int m_dwCurrentFileIndex;
  _XONLINE_CACHE_CFFILE m_CurrentFile;
  unsigned int m_dwFileNameReceived;
  $6DF588A672A68E3AFAD998B8401C477E m_SavedFileInfo;
  __declspec(align(8)) _LARGE_INTEGER m_liTotalFileSize;
  _LARGE_INTEGER m_liCurrentFileOffset;
  CFDATA m_CurrentCfData;
  unsigned int m_dwCurrentFileDataOffset;
  unsigned int m_dwResumeFileIndex;
  _LARGE_INTEGER m_liResumeFileOffset;
  _LARGE_INTEGER m_liResumeProcessedOffset;
  CXCabCryptHelper m_CabCryptHelper;
  const char *m_pbSymmetricKey;
  unsigned int m_dwSymmetricKeySize;
  const char *m_pbPublicKey;
  unsigned int m_dwPublicKeySize;
  t_decoder_context m_LzxDecoderContext;
  char m_abDecompressed[32768];
  unsigned int m_dwDecompressedSize;
};

/* 6072 */
struct CContentAndUpdateBase
{
  CXLiveAsyncTaskInternal baseclass_0;
  int _bf7712;
  unsigned int m_dwNumLocations;
  _LARGE_INTEGER m_liInstallSize;
  _XREFERRAL_LOCATION *m_paReferralLocations;
  _XREFERRAL_LOCATION *m_pNextReferralLocation;
  _XCONTENT_MOUNTED_PACKAGE *m_pMountedPackage;
  __declspec(align(8)) CXCabStreamUnpacker m_CabStreamUnpacker;
  _LARGE_INTEGER m_liCurrentOffset;
  _FILETIME m_ftLastModified;
  _LARGE_INTEGER m_liResumeOffset;
  _LARGE_INTEGER m_liLastBytesProcessed;
  XECRYPT_SHA_STATE m_ShaStateFinalHeader;
  char m_abSymmetricKey[16];
  char m_abPublicKey[284];
  char m_abRecvBuffer[65535];
  char m_abLzxBuffer[33029];
};

/* 6073 */
struct CXContentDownload::REFERRAL_RESPONSE_BUFFER
{
  _XCONTENT_REFERRAL_RESPONSE Response;
  _XREFERRAL_LOCATION ReferralLocationsBuffer[10];
  char acUrlsBuffer[5000];
};

/* 6074 */
struct CXContentDownload::REFRESH_LICENSE_RESPONSE_BUFFER
{
  _XCONTENT_REFRESH_LICENSE_RESPONSE Response;
  char abContentHeaderBuffer[2048];
};

/* 6075 */
union $AD7EE6A7CD99D5E0483BA195F6E9F048
{
  CXContentDownload::REFERRAL_RESPONSE_BUFFER m_ReferralResponseBuffer;
  CXContentDownload::REFRESH_LICENSE_RESPONSE_BUFFER m_RefreshLicenseResponseBuffer;
  _XCONTENT_METADATA m_ContentMetaData;
};

/* 6076 */
#pragma pack(push, 4)
struct CXContentDownload
{
  CContentAndUpdateBase baseclass_0;
  $AD7EE6A7CD99D5E0483BA195F6E9F048 ___u1;
  unsigned __int64 m_qwUserId;
  char m_abContentId[20];
  unsigned int m_dwTargetDirectoryLength;
  char *m_pszTargetDirectoryPath;
  unsigned int m_dwFlags;
  CXLiveSubTask *m_pSubTask;
  _XCONTENT_HEADER *m_pContentHeader;
};
#pragma pack(pop)

/* 6077 */
#pragma pack(push, 8)
struct CArgument
{
  unsigned int m_NativeSize;
  unsigned __int64 m_ArgumentValue;
};
#pragma pack(pop)

/* 6078 */
#pragma pack(push, 8)
struct CArgumentList
{
  CArgument m_rgArguments[32];
  unsigned int m_Arguments;
};
#pragma pack(pop)

/* 6079 */
struct XUIFigurePoint
{
  D3DXVECTOR2 point;
  D3DXVECTOR2 ptCtl1;
  D3DXVECTOR2 ptCtl2;
  int bSmooth;
};

/* 6080 */
struct XUIMessageFigureGetCount
{
  int nCount;
};

/* 6081 */
struct XUINotifyValueChanging
{
  int nOldValue;
  int nNewValue;
};

/* 6082 */
struct $0D2E07ACA13234B23444D0659A709CB6
{
  unsigned __int64 rgXuidRecipients[100];
  unsigned int cRecipients;
  wchar_t szText[256];
  wchar_t szTitle[31];
  wchar_t szGameMessage[97];
  const char *pbImage;
  unsigned int cbImage;
  XMSG_CUSTOMACTION *pCustomActions;
  unsigned int cCustomActions;
  const char *pbCustomPayload;
  unsigned int cbCustomPayload;
  unsigned int dwExpireMinutes;
};

/* 6083 */
#pragma pack(push, 4)
struct $871E707E47F7CFD8EBC5582552B3EFF5
{
  wchar_t szTitle[36];
  wchar_t szDescription[83];
  const char *pbImage;
  unsigned int cbImage;
  XPLAYERLIST_USER *pPlayers;
  unsigned int cPlayers;
  XPLAYERLIST_BUTTON xButton;
  XPLAYERLIST_BUTTON yButton;
  XPLAYERLIST_RESULT *pResults;
};
#pragma pack(pop)

/* 6084 */
struct XUIMessageFigureVertexPoint
{
  D3DXVECTOR2 point;
  int nVertex;
};

/* 6085 */
struct XUIMessageFigurePointIndex
{
  int nPointIndex;
  int nOtherIndex;
};

/* 6086 */
struct $331C95FC1036A8D30EEF9C51804C42A2
{
  char *_pb;
};

/* 6087 */
union $F67711DC673759F53497995B2669531A
{
  const wchar_t *m_szCustomValString;
  $331C95FC1036A8D30EEF9C51804C42A2 m_CustomValBin;
  XUIAllocatedArray *m_pCompoundPropArray;
  unsigned int m_dwVal;
  float m_fVal;
  unsigned int m_dwIndexIntoTable;
  XUIElementPropVal *m_pVal;
};

/* 6088 */
struct XUIPropertyData
{
  unsigned __int16 m_uFlags;
  unsigned __int16 m_uIndex;
  XUIElementPropDef *m_pDef;
  $F67711DC673759F53497995B2669531A m_CustomValBin;
  void *m_pLoadData;
};

/* 6089 */
struct XMESSAGING_MSG
{
  _XOVERLAPPED *pXOverlapped;
  unsigned int dwMessageType;
  unsigned int dwMessageFlags;
  unsigned int dwMaxNumProperties;
  unsigned int dwExpireMinutes;
  unsigned int dwNumLargeProps;
  unsigned int cbPropValues;
  unsigned __int64 qwSenderContext;
  unsigned __int64 qwLargePropsUploaded;
  _XOVERLAPPED xovLargeProp;
  XMESSAGING_LARGEPROP LargeProps[16];
  _XMSG_DETAILS Details;
};

/* 6090 */
#pragma pack(push, 4)
struct CXMsgSendBase
{
  CXStorageUploadParent baseclass_0;
  unsigned __int64 m_xuidSender;
  XMESSAGING_MSG *m_pMessage;
  char *m_pbBuffer;
  unsigned int m_dwBufferSize;
  CXLiveSubTask *m_pMsgSubTask;
  wchar_t m_wszCurrentStorageFileName[255];
};
#pragma pack(pop)

/* 6091 */
struct XUIMessageGetSetVisualPrefix
{
  const wchar_t *szPrefix;
};

/* 6092 */
struct CXStorageMiscWorker::RESOLVE_NAME_RESPONSE_BUFFER
{
  _XRESOLVE_NAME_RESPONSE Response;
  wchar_t awcStringBuffer[63];
};

/* 6093 */
struct __declspec(align(8)) CXStorageMiscWorker
{
  CXStorageTask baseclass_0;
  CXLiveSubTask *m_pSubTask;
  CXStorageMiscWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;
};

/* 6094 */
struct _XMSG_USER_INFO
{
  int _bf0;
  XMSG_OP_TYPE OpType;
  _XOVERLAPPED xov;
  void *pvOpResults;
  char cNewMessages;
  char cDeletedMessages;
  unsigned __int16 cMessages;
  unsigned int dwNewMessageSeqNum;
  unsigned int dwDeletedMessageSeqNum;
  unsigned int rgdwNewMessageIDs[3];
  unsigned int rgdwNewMessageTypeAndFlags[3];
  unsigned int rgdwDeletedMessageIDs[3];
  _Q_MESSAGE_SUMMARY_2 Messagelist[125];
};

/* 6095 */
#pragma pack(push, 8)
struct _MARKETPLACE_COUNTS_USER_CACHE
{
  unsigned __int64 qwUserId;
  unsigned int dwTitleId;
  unsigned __int64 ftLastServerCall;
  unsigned int rgCachedNewOffers[32];
  unsigned int rgCachedTotalOffers[32];
};
#pragma pack(pop)

/* 6096 */
struct XUIMessageGetLineIndex
{
  unsigned int nLine;
  unsigned int nIndex;
};

/* 6097 */
struct TypefaceDescriptor
{
  const wchar_t *szTypeface;
  const wchar_t *szLocator;
  const wchar_t *szReserved1;
  float fBaselineAdjust;
  const wchar_t *szFallbackTypeface;
};

/* 6098 */
struct CXuiList
{
  CXuiControl baseclass_0;
};

/* 6099 */
struct CXuiListImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiList baseclass_4;
};

/* 6100 */
struct XUIMessageInit
{
  void *pvInitData;
};

/* 6101 */
union $88742ADA92637F8D5161EFD05AAF8A42
{
  unsigned __int16 wAge;
  unsigned __int16 wNextPending;
};

/* 6102 */
#pragma pack(push, 8)
struct XONLINE_MUTELIST_USER_INTERNAL
{
  unsigned __int64 qwUserID;
  char fPendingAdd;
  char fPendingRemove;
  $88742ADA92637F8D5161EFD05AAF8A42 ___u3;
};
#pragma pack(pop)

/* 6103 */
#pragma pack(push, 8)
struct _XONLINE_MUTELIST_INTERNAL
{
  unsigned __int64 qwUserID;
  unsigned int dwVersion;
  unsigned __int16 cNum;
  unsigned __int16 wPendingHead;
  unsigned __int16 cPending;
  unsigned __int16 wNextAge;
  int _bf20;
  _XOVERLAPPED Overlapped;
  XONLINE_MUTELIST_USER_INTERNAL MuteList[250];
};
#pragma pack(pop)

/* 6104 */
struct CXLiveNotification
{
  int _bf0;
  _XOVERLAPPED m_xov;
  unsigned int m_dwAliveRepliesExpected;
  _XPRESENCE_ALIVE_REPLY *m_pAliveReply;
  unsigned int m_iCurrentUser;
  XNKID m_xnkidPeer;
  XNKEY m_xnkeyPeer;
  _XNET_LOGON_USER m_LogonUsers[4];
  CXLivePresence *m_pPresence;
  CXLiveFriends *m_pFriends;
  CXLivePlayerList *m_pPlayerList;
  CXLiveMessaging *m_pMessaging;
  XINVITE_INFO_INTERNAL m_GameInviteInfo;
  unsigned int m_spinLock;
  XNOTIFICATION_USER m_NotifUsers[4];
  unsigned int m_dwPresenceTitleId;
  XNOTIFICATION_DEQUEUE m_SendDequeue;
  XPRESENCE_SUBSCRIBE m_SendSubscribe;
};

/* 6105 */
struct CXLiveSubscriptionList
{
  _RTL_CRITICAL_SECTION m_csLock;
  int m_fDirty;
  int m_fLoggedOn;
  unsigned int m_cSubscriptions;
  unsigned int m_cTitleSubscriptions;
  unsigned int m_cSystemSubscriptions;
  unsigned __int64 m_rgSubscriptions[500];
};

/* 6106 */
struct CXLivePresence
{
  unsigned int m_dwTitleSubscriptions;
  void *m_pTitleBuffer;
  CXLiveNotification *m_pNotification;
  CXLivePresenceList m_PresenceList;
  __declspec(align(8)) CXLiveSubscriptionList m_SubscriptionListBuffers[4];
  CXLiveSubscriptionList *m_SubscriptionLists[4];
};

/* 6107 */
#pragma pack(push, 8)
struct CXLiveFriends
{
  CXLiveNotification *m_pNotification;
  XONLINE_FRIEND_LIST_INTERNAL m_FriendListBuffers[4];
  XONLINE_FRIEND_LIST_INTERNAL *m_FriendLists[4];
  CXLiveMuteList m_MuteList;
};
#pragma pack(pop)

/* 6108 */
#pragma pack(push, 8)
struct CXLivePlayerList
{
  int m_fCanSubscribe;
  CXLiveNotification *m_pNotification;
  _XUSER_PLAYERLIST_INTERNAL m_PlayerListBuffers[4];
  _XUSER_PLAYERLIST_INTERNAL *m_PlayerLists[4];
  _RTL_CRITICAL_SECTION m_csLock;
};
#pragma pack(pop)

/* 6109 */
struct CXLiveMessaging
{
  CXLiveNotification *m_pNotification;
  _RTL_CRITICAL_SECTION m_csMessaging;
  _XMSG_USER_INFO m_aMsgUserInfoBuffers[4];
  _XMSG_USER_INFO *m_apMsgUserInfos[4];
};

/* 6110 */
struct XINVITE_INFO_INTERNAL
{
  _XINVITE_INFO baseclass_0;
  _FILETIME ftAccepted;
  int fReadByTitle;
};

/* 6111 */
#pragma pack(push, 8)
struct XNOTIFICATION_USER
{
  unsigned __int64 qwUserID;
  unsigned int dwSeqNum;
  int _bf12;
  unsigned int dwStateFlags;
  XNKID xnkidSessionID;
  XNKID xnkidInviteSessionID;
  unsigned int dwSeqNewInvite;
  unsigned int cbState;
  char rgbState[256];
};
#pragma pack(pop)

/* 6112 */
struct XNOTIFICATION_DEQUEUE
{
  int fInProgress;
  HRESULT hr;
  XNOTIFICATION_DEQUEUE_STATE DequeueState;
  _Q_DEQUEUE_MSG DequeueMsg;
  unsigned int dwUserIndex;
  _Q_LIST_REPLY_MSG *pReply;
  _XOVERLAPPED xov;
};

/* 6113 */
struct CXLiveMuteList
{
  _XONLINE_MUTELIST_INTERNAL m_MuteListBuffers[4];
  _XONLINE_MUTELIST_INTERNAL *m_MuteLists[4];
  _RTL_CRITICAL_SECTION m_csLock;
  CXLiveFriends *m_pFriends;
};

/* 6114 */
struct XUINotifyPress
{
  char UserIndex;
};

/* 6115 */
#pragma pack(push, 8)
struct CXMessageSend
{
  CXMsgSendBase baseclass_0;
  unsigned __int64 m_aqwPuidRecipients[100];
  unsigned int m_dwNumRecipients;
};
#pragma pack(pop)

/* 6116 */
struct XUIMessageDiscardResources
{
  unsigned int dwFlags;
};

/* 6117 */
struct XUIHtmlScrollInfo
{
  int bScrolling;
  int nPos;
  int nTarget;
  int nStep;
  int nMax;
};

/* 6118 */
struct _XNPLISTCHANGES
{
  unsigned int dwActiveSocketChangeNum;
  unsigned int dwSecAssocChangeNum;
  unsigned int dwKeyChangeNum;
  unsigned int dwQosLookupChangeNum;
};

/* 6119 */
struct XUIMessageInsDelItems
{
  int iAtItem;
  int cItems;
};

/* 6120 */
struct XUIMessageNavForward
{
  _XUIOBJ *hScene;
};

/* 6121 */
struct XUIMessageChildAdded
{
  _XUIOBJ *hChild;
};

/* 6122 */
struct XUIMessageItemCheck
{
  int iItem;
  int bChecked;
};

/* 6123 */
struct CCritSect
{
  _RTL_CRITICAL_SECTION m_cs;
};

/* 6124 */
struct CNativeEndianBuffer
{
  CBaseEndianBuffer baseclass_0;
};

/* 6125 */
struct XNetCapFrame
{
  unsigned int cbSize;
  unsigned int dwTick;
};

/* 6126 */
struct XUIMessageWantFocus
{
  int bWantFocus;
};

/* 6127 */
#pragma pack(push, 8)
struct CXFriendsRequest
{
  CXMsgSendBase baseclass_0;
  void *m_hMsgCreated;
  unsigned __int64 m_qwBuddyID;
  char m_szUserName[16];
};
#pragma pack(pop)

/* 6128 */
struct XUIMessageGetBounds
{
  float fWidth;
  float fHeight;
};

/* 6129 */
struct IXoCallback
{
  IXoCallbackVtbl *vfptr;
};

/* 6130 */
struct IXoCallbackVtbl
{
  int (__cdecl *XoKerbBuildApReq)(IXoCallback *this, unsigned int, _LARGE_INTEGER *, char *, unsigned int, char *, unsigned int *);
  int (__cdecl *XoKerbCrackApRep)(IXoCallback *this, unsigned int, _LARGE_INTEGER *, unsigned int, char *, unsigned int, char *, unsigned int);
  struct _XOKERBINFO *(__cdecl *XoKerbGetInfo)(IXoCallback *this, unsigned int);
  unsigned int (__cdecl *XoGetServiceIpa)(IXoCallback *this, unsigned int);
  int (__cdecl *XoKerbCrackApReq)(IXoCallback *this, char *, unsigned int, char *, _LARGE_INTEGER *, unsigned int *, struct _XOTSKERBINFO *);
  int (__cdecl *XoKerbBuildApRep)(IXoCallback *this, char *, _LARGE_INTEGER, unsigned int, struct _XOTSKERBINFO *, char *, unsigned int *);
};

/* 6131 */
struct SCHEMA_ARGUMENT_INFO
{
  char _bf0;
};

/* 6132 */
struct CXUpdateDownload::REFERRAL_RESPONSE_BUFFER
{
  _XUPDATE_REFERRAL_RESPONSE Response;
  _XREFERRAL_LOCATION ReferralLocationsBuffer[10];
  char acUrlsBuffer[5000];
};

/* 6133 */
struct CXUpdateDownload::REFRESH_LICENSE_RESPONSE_BUFFER
{
  _XCONTENT_REFRESH_LICENSE_RESPONSE Response;
  char abContentHeaderBuffer[2048];
};

/* 6134 */
union $2EEBE27F14A883B6125811EDED45E122
{
  CXUpdateDownload::REFERRAL_RESPONSE_BUFFER m_ReferralResponseBuffer;
  CXUpdateDownload::REFRESH_LICENSE_RESPONSE_BUFFER m_RefreshLicenseResponseBuffer;
  _XCONTENT_METADATA m_ContentMetaData;
};

/* 6135 */
#pragma pack(push, 8)
struct CXUpdateDownload
{
  CContentAndUpdateBase baseclass_0;
  $2EEBE27F14A883B6125811EDED45E122 ___u1;
  unsigned int m_dwTitleId;
  unsigned int m_dwVersion;
  CXLiveSubTask *m_pSubTask;
  _XAM_CACHE_OPEN_FILE m_CacheOpenFile;
  _XCONTENT_HEADER *m_pContentHeader;
};
#pragma pack(pop)

/* 6136 */
struct XUIImageInfo
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int MipLevels;
  _D3DFORMAT Format;
  _D3DRESOURCETYPE ResourceType;
  unsigned int ImageFileFormat;
};

/* 6137 */
union $95EDC17B9037028A0D0ACE767AE425CA
{
  _XUIOBJ *hObj;
  struct _XUIBRUSH *hBrush;
};

/* 6138 */
struct XUIContentInfo
{
  unsigned int cbSize;
  XUI_CONTENT_TYPE nType;
  $95EDC17B9037028A0D0ACE767AE425CA ___u2;
};

/* 6139 */
struct CXuiListItem
{
  CXuiControl baseclass_0;
};

/* 6140 */
struct CXuiListItemImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiListItem baseclass_4;
};

/* 6141 */
struct XUIMessageTopItem
{
  int iTopItem;
};

/* 6142 */
struct IXuiDevice
{
  IXuiDeviceVtbl *vfptr;
};

/* 6143 */
struct $C4CBA2B151135F58F653E2704F846CE5
{
  _BYTE gap0[4];
  HRESULT (__cdecl *EndScene)(IXuiDevice *this);
};

/* 6144 */
struct $D0B49CBBE5A3C00C8EDA757BF35E877B
{
  _BYTE gap0[8];
  HRESULT (__cdecl *CreateTexture)(IXuiDevice *this, unsigned int, unsigned int, unsigned int, unsigned int, _D3DFORMAT, unsigned int, D3DTexture **, void **);
};

/* 6145 */
struct $68BDEF9C51CDBF2A1E9F96248C8939BD
{
  _BYTE gap0[12];
  HRESULT (__cdecl *SetTexture)(IXuiDevice *this, unsigned int, D3DBaseTexture *);
};

/* 6146 */
struct $1F90F7A63C2ADD3B1EC69438706016AA
{
  _BYTE gap0[16];
  HRESULT (__cdecl *SetVertexShaderConstantF)(IXuiDevice *this, unsigned int, const float *, unsigned int);
};

/* 6147 */
struct $F158A2D586F0D721CC4D801EC80078DA
{
  _BYTE gap0[20];
  HRESULT (__cdecl *SetPixelShaderConstantF)(IXuiDevice *this, unsigned int, const float *, unsigned int);
};

/* 6148 */
struct $7FF5F3076BCDAEABD770FC5E16A401FB
{
  _BYTE gap0[24];
  HRESULT (__cdecl *Clear)(IXuiDevice *this, unsigned int, _D3DRECT *, unsigned int, unsigned int, float, unsigned int);
};

/* 6149 */
struct $DC1F7E6DD6DCAD253258B3D7F1F4423B
{
  _BYTE gap0[28];
  HRESULT (__cdecl *SetRenderState)(IXuiDevice *this, _D3DRENDERSTATETYPE, unsigned int);
};

/* 6150 */
struct $72FAC1926ABEDD715D6A2BDA24D3047E
{
  _BYTE gap0[32];
  HRESULT (__cdecl *SetSamplerState)(IXuiDevice *this, unsigned int, _D3DSAMPLERSTATETYPE, unsigned int);
};

/* 6151 */
struct $D57FE9978217313AA6D46F57C052CC55
{
  _BYTE gap0[36];
  HRESULT (__cdecl *SetVertexDeclaration)(IXuiDevice *this, D3DVertexDeclaration *);
};

/* 6152 */
struct $E2F357DEAEFD9A3FD66B3D9D2452E45F
{
  _BYTE gap0[40];
  HRESULT (__cdecl *SetVertexShader)(IXuiDevice *this, D3DVertexShader *);
};

/* 6153 */
struct $2FDB052E8FB5137C08CBFEF2DB80B20D
{
  _BYTE gap0[44];
  HRESULT (__cdecl *SetPixelShader)(IXuiDevice *this, D3DPixelShader *);
};

/* 6154 */
struct $E2540494307410497D9B9B5E4E768470
{
  _BYTE gap0[48];
  HRESULT (__cdecl *Present)(IXuiDevice *this, tagRECT *, tagRECT *, HWND__ *, void *);
};

/* 6155 */
struct $9BF0BDE41BD01D2317549608BE3319ED
{
  _BYTE gap0[52];
  HRESULT (__cdecl *CreateVertexShader)(IXuiDevice *this, const unsigned int *, D3DVertexShader **);
};

/* 6156 */
struct $0CFD92D29113E6E62DBB39B6337F975C
{
  _BYTE gap0[56];
  HRESULT (__cdecl *CreatePixelShader)(IXuiDevice *this, const unsigned int *, D3DPixelShader **);
};

/* 6157 */
struct $CADE94CEAFDC71B7B42EFDB480D4A910
{
  _BYTE gap0[60];
  HRESULT (__cdecl *CreateVertexDeclaration)(IXuiDevice *this, _D3DVERTEXELEMENT9 *, D3DVertexDeclaration **);
};

/* 6158 */
struct $89D191B17CC4465E9D9DA7C4EE43A0A7
{
  _BYTE gap0[64];
  HRESULT (__cdecl *GetViewport)(IXuiDevice *this, _D3DVIEWPORT9 *);
};

/* 6159 */
struct $FCAA4EF9EA408911138C829470DB7041
{
  _BYTE gap0[68];
  HRESULT (__cdecl *DrawPrimitiveUP)(IXuiDevice *this, _D3DPRIMITIVETYPE, unsigned int, const void *, unsigned int);
};

/* 6160 */
struct $22DE15BCD3C17F0DD1ED2E71ACA9DC94
{
  _BYTE gap0[72];
  HRESULT (__cdecl *DrawIndexedPrimitiveUP)(IXuiDevice *this, _D3DPRIMITIVETYPE, unsigned int, unsigned int, unsigned int, const void *, _D3DFORMAT, const void *, unsigned int);
};

/* 6161 */
struct $44C228C96E3F7A06C557C609C913A9BB
{
  _BYTE gap0[76];
  HRESULT (__cdecl *BeginVertices)(IXuiDevice *this, _D3DPRIMITIVETYPE, unsigned int, unsigned int, void **);
};

/* 6162 */
struct $25B419E91188D9154E8F0F3955DE275F
{
  _BYTE gap0[80];
  HRESULT (__cdecl *EndVertices)(IXuiDevice *this);
};

/* 6163 */
struct $C503D29CDCE6D6AC4084DBD0071ECA69
{
  _BYTE gap0[84];
  HRESULT (__cdecl *LockTextureRect)(IXuiDevice *this, D3DTexture *, unsigned int, _D3DLOCKED_RECT *, tagRECT *, unsigned int);
};

/* 6164 */
struct $BD24091A62E07AFA8BFD15AA4DF1707B
{
  _BYTE gap0[88];
  HRESULT (__cdecl *UnlockTextureRect)(IXuiDevice *this, D3DTexture *, unsigned int);
};

/* 6165 */
union $F7D93D7727BCEEC2FD1105EF64930F8A
{
  HRESULT (__cdecl *BeginScene)(IXuiDevice *this);
  $C4CBA2B151135F58F653E2704F846CE5 _s1;
  $D0B49CBBE5A3C00C8EDA757BF35E877B _s2;
  $68BDEF9C51CDBF2A1E9F96248C8939BD _s3;
  $1F90F7A63C2ADD3B1EC69438706016AA _s4;
  $F158A2D586F0D721CC4D801EC80078DA _s5;
  $7FF5F3076BCDAEABD770FC5E16A401FB _s6;
  $DC1F7E6DD6DCAD253258B3D7F1F4423B _s7;
  $72FAC1926ABEDD715D6A2BDA24D3047E _s8;
  $D57FE9978217313AA6D46F57C052CC55 _s9;
  $E2F357DEAEFD9A3FD66B3D9D2452E45F _s10;
  $2FDB052E8FB5137C08CBFEF2DB80B20D _s11;
  $E2540494307410497D9B9B5E4E768470 _s12;
  $9BF0BDE41BD01D2317549608BE3319ED _s13;
  $0CFD92D29113E6E62DBB39B6337F975C _s14;
  $CADE94CEAFDC71B7B42EFDB480D4A910 _s15;
  $89D191B17CC4465E9D9DA7C4EE43A0A7 _s16;
  $FCAA4EF9EA408911138C829470DB7041 _s17;
  $22DE15BCD3C17F0DD1ED2E71ACA9DC94 _s18;
  $44C228C96E3F7A06C557C609C913A9BB _s19;
  $25B419E91188D9154E8F0F3955DE275F _s20;
  $C503D29CDCE6D6AC4084DBD0071ECA69 _s21;
  $BD24091A62E07AFA8BFD15AA4DF1707B _s22;
};

/* 6166 */
struct IXuiDeviceVtbl
{
  unsigned int (__cdecl *AddRef)(IXuiDevice *this);
  unsigned int (__cdecl *Release)(IXuiDevice *this);
  D3DDevice *(__cdecl *GetD3DDevice)(IXuiDevice *this);
  struct IXuiTextureCache *(__cdecl *GetTextureCache)(IXuiDevice *this);
  _D3DPRESENT_PARAMETERS_ *(__cdecl *GetPresentParams)(IXuiDevice *this);
  $F7D93D7727BCEEC2FD1105EF64930F8A ___u5;
};

/* 6167 */
struct XUIRenderInitParams
{
  unsigned int cbSize;
  unsigned int dwFlags;
  D3DDevice *pDevice;
  IXuiDevice *pXuiDevice;
  HRESULT (__cdecl *pfnTextureLoader)(IXuiDevice *, const wchar_t *, XUIImageInfo *, D3DTexture **);
  _D3DPRESENT_PARAMETERS_ *pPresentParams;
};

/* 6168 */
struct IXuiFontRenderer
{
  IXuiFontRendererVtbl *vfptr;
};

/* 6169 */
struct XUIFontMetrics
{
  float fLineHeight;
  float fMaxAscent;
  float fMaxDescent;
  float fMaxWidth;
  float fMaxHeight;
  float fMaxAdvance;
};

/* 6170 */
#pragma pack(push, 4)
struct CharData
{
  wchar_t wch;
  unsigned int dwStyle;
  unsigned int dwColor;
  float x;
  float y;
};
#pragma pack(pop)

/* 6171 */
struct $FC81034D6612BB18693FC69DE60E175D
{
  _BYTE gap0[4];
  void (__cdecl *Term)(IXuiFontRenderer *this);
  HRESULT (__cdecl *GetCaps)(IXuiFontRenderer *this, unsigned int *);
};

/* 6172 */
struct $364B0585D65B8056CBDC403E70AF381A
{
  _BYTE gap0[12];
  HRESULT (__cdecl *CreateFont)(IXuiFontRenderer *this, TypefaceDescriptor *, float, unsigned int, unsigned int, void **);
};

/* 6173 */
struct $7D7CB3DAF1002DE74F02A2C2AC6FD96E
{
  _BYTE gap0[16];
  void (__cdecl *ReleaseFont)(IXuiFontRenderer *this, void *);
  HRESULT (__cdecl *GetFontMetrics)(IXuiFontRenderer *this, void *, XUIFontMetrics *);
};

/* 6174 */
struct $944AD37DA2A2DA12A2B770392A08E7A4
{
  _BYTE gap0[24];
  HRESULT (__cdecl *GetCharMetrics)(IXuiFontRenderer *this, void *, wchar_t, XUICharMetrics *);
};

/* 6175 */
struct $C6DD2859D99E83FC9DBAEDCAA7B0A28C
{
  _BYTE gap0[28];
  HRESULT (__cdecl *DrawCharToTexture)(IXuiFontRenderer *this, void *, wchar_t, IXuiDevice *, D3DTexture *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
};

/* 6176 */
struct $105F043CE3EC1F299A0B2D292F0F516D
{
  _BYTE gap0[32];
  HRESULT (__cdecl *DrawCharsToDevice)(IXuiFontRenderer *this, void *, CharData *, unsigned int, tagRECT *, IXuiDevice *, D3DXMATRIX *);
};

/* 6177 */
union $753DADE283236044F1CB2024FDEAB8B2
{
  HRESULT (__cdecl *Init)(IXuiFontRenderer *this, float);
  $FC81034D6612BB18693FC69DE60E175D _s1;
  $364B0585D65B8056CBDC403E70AF381A _s2;
  $7D7CB3DAF1002DE74F02A2C2AC6FD96E _s3;
  $944AD37DA2A2DA12A2B770392A08E7A4 _s4;
  $C6DD2859D99E83FC9DBAEDCAA7B0A28C _s5;
  $105F043CE3EC1F299A0B2D292F0F516D _s6;
};

/* 6178 */
struct IXuiFontRendererVtbl
{
  $753DADE283236044F1CB2024FDEAB8B2 ___u0;
};

/* 6179 */
struct XNetConfigSectorHeader
{
  char abHash[20];
  char abConfounder[8];
};

/* 6180 */
struct CXDirectoryCrawler::FILE_DIRECTORY_INFO_BUFFER
{
  _FILE_DIRECTORY_INFORMATION FileDirectoryInfo;
  char ocFileName[256];
};

/* 6181 */
struct CXDirectoryCrawler
{
  _XDIRCRAWL_STATE m_State;
  char m_szPath[260];
  unsigned int m_dwPathPrefixLength;
  void *m_hFind;
  CXDirectoryCrawler::FILE_DIRECTORY_INFO_BUFFER m_FileDirectoryInfoBuffer;
};

/* 6182 */
struct CXuiNavButton
{
  CXuiControl baseclass_0;
};

/* 6183 */
struct CXuiNavButtonImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiNavButton baseclass_4;
};

/* 6184 */
struct CXLiveOffering
{
  _MARKETPLACE_COUNTS_USER_CACHE m_rgUserCache[4];
};

/* 6185 */
struct LIVEBASE_UPDATEACCESSTIMES_MSG
{
  unsigned int dwUserIndex;
  unsigned int dwTitleId;
  unsigned int dwContentCategories;
};

/* 6186 */
struct CXuiScene
{
  CXuiControl baseclass_0;
};

/* 6187 */
struct CXuiTabScene
{
  CXuiScene baseclass_0;
};

/* 6188 */
struct CXuiTabSceneImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiTabScene baseclass_4;
};

/* 6189 */
struct CXuiModule
{
  CXuiModuleVtbl *vfptr;
  __declspec(align(8)) _XUIOBJ *m_hObjRoot;
  struct _XUIDC *m_hDC;
  int m_bXuiInited;
  int m_bInitRuntime;
  int m_bQuit;
  __declspec(align(8)) CXuiAnimRunner m_animRunner;
  int m_bSkinLoaded;
  int m_bDefaultTypefaceRegistered;
};

/* 6190 */
struct $CB5EC46FC877685CFF88BF5AC284B456
{
  _BYTE gap0[4];
  HRESULT (__cdecl *Render)(CXuiModule *this);
};

/* 6191 */
struct $21870BDC14F50886B6B5CE660054CDDA
{
  _BYTE gap0[8];
  HRESULT (__cdecl *RegisterXuiClasses)(CXuiModule *this);
};

/* 6192 */
struct $0D9A07638118C2D4F646377F654DCF84
{
  _BYTE gap0[12];
  HRESULT (__cdecl *UnregisterXuiClasses)(CXuiModule *this);
};

/* 6193 */
struct $D8620E10A305CDA7DFB8DF9BF5DA4CD7
{
  _BYTE gap0[16];
  HRESULT (__cdecl *CreateMainCanvas)(CXuiModule *this);
};

/* 6194 */
union $47800E212BC8D1CDA255BEABD95034D0
{
  HRESULT (__cdecl *ProcessInput)(CXuiModule *this);
  $CB5EC46FC877685CFF88BF5AC284B456 _s1;
  $21870BDC14F50886B6B5CE660054CDDA _s2;
  $0D9A07638118C2D4F646377F654DCF84 _s3;
  $D8620E10A305CDA7DFB8DF9BF5DA4CD7 _s4;
};

/* 6195 */
struct CXuiModuleVtbl
{
  void *(__cdecl *__vecDelDtor)(CXuiModule *this, unsigned int);
  void (__cdecl *Uninit)(CXuiModule *this);
  void (__cdecl *RunFrame)(CXuiModule *this, float);
  void (__cdecl *RunFrame)(CXuiModule *this);
  $47800E212BC8D1CDA255BEABD95034D0 ___u4;
};

/* 6196 */
struct CXuiAnimRunner
{
  _LARGE_INTEGER m_liTicksPerSecond;
  _LARGE_INTEGER m_liLastFrameTime;
};

/* 6197 */
struct CXuiMultiApp
{
  CXuiModule baseclass_0;
};

/* 6198 */
struct XUIMessageSizeChanging
{
  float fCurrWidth;
  float fCurrHeight;
  float fNewWidth;
  float fNewHeight;
};

/* 6199 */
struct XUIMessageSoundMute
{
  int bMute;
};

/* 6200 */
struct CXuiHtmlElement
{
  CXuiElement baseclass_0;
};

/* 6201 */
struct XUIContentDims
{
  int nContentWidth;
  int nContentHeight;
  int nPageWidth;
  int nPageHeight;
};

/* 6202 */
struct SYSUIINIT
{
  _XUIOBJ *hAppCanvas;
};

/* 6203 */
struct CXStorageUploadWorker::RESOLVE_NAME_RESPONSE_BUFFER
{
  _XRESOLVE_NAME_RESPONSE Response;
  wchar_t awcStringBuffer[63];
};

/* 6204 */
struct __declspec(align(8)) CXStorageUploadWorker
{
  CXStorageTask baseclass_0;
  CXLiveSubTask *m_pSubTask;
  CXStorageUploadWorker::RESOLVE_NAME_RESPONSE_BUFFER m_ResolveNameResponseBuffer;
};

/* 6205 */
struct CListEntry
{
  _LIST_ENTRY baseclass_0;
};

/* 6206 */
#pragma pack(push, 8)
struct CXStorageUploadFromMemory
{
  CXStorageUploadParent baseclass_0;
  unsigned __int64 m_xuidUser;
  unsigned int m_dwServerPathLength;
  wchar_t *m_pwszServerPath;
  char *m_pbBuffer;
  unsigned int m_dwBufferSize;
  CXStorageUploadWorker *m_pUploadSubTask;
};
#pragma pack(pop)

/* 6207 */
struct XnTitleState
{
  char *pbBuffer;
  unsigned int dwBufferSize;
  unsigned int *paSockets;
  unsigned int dwNumSockets;
  in_addr *painaddrs;
  unsigned int dwNumInAddrs;
  XNKID *paxnkids;
  unsigned int dwNumXnkids;
};

/* 6208 */
struct XNetConfigPppoe
{
  char achServer[40];
  unsigned int cpchService;
  char *apchService[8];
  char achBuffer[320];
};

/* 6209 */
struct XUIMessageSmoothScroll
{
  XUI_SMOOTHSCROLL_ORIENTATION orientation;
  int bEnabled;
  float fBaseSpeed;
  float fAccel;
  float fMaxSpeed;
};

/* 6210 */
struct CSchemaInMemory
{
  CSchemaData baseclass_0;
};

/* 6211 */
struct XUIMessageGetSetBasePath
{
  const wchar_t *szPath;
};

/* 6212 */
struct XUIMessageContentDims
{
  XUIContentDims contentDims;
};

/* 6213 */
struct XnQosLookupInfo
{
  XNQOS *pxnqos;
  _XNCALLER_TYPE CallerType;
  unsigned int dwInfoFlags;
  in_addr inaddrTarget;
  unsigned __int16 wTargetPort;
  char bState;
  char bRetry;
  in_addr inaddrSec;
  unsigned int dwNumProbesRequest;
  unsigned int dwNumProbesXmit;
  unsigned int dwNumProbesRecv;
  unsigned int dwDataReceived;
  unsigned int dwBitsPerSec;
  XNKID xnkid;
  XNADDR xnaddr;
  char abReserved[48];
};

/* 6214 */
struct XnSecAssocInfo
{
  in_addr inaddrSec;
  _XNCALLER_TYPE CallerType;
  unsigned int dwInfoFlags;
  unsigned int dwReserved1;
  XNKID xnkid;
  XNADDR xnaddr;
  unsigned int dwServiceId;
  in_addr inaddrRemote;
  unsigned __int16 wRemotePort;
  char bState;
  char bReserved2;
  char abReserved3[48];
};

/* 6215 */
struct XUIMessageHittest
{
  tagPOINT pt;
  int bHit;
};

/* 6216 */
struct IXuiResourceManagerVTBL
{
  void (__cdecl *AddRef)(IXuiResourceManager *);
  unsigned int (__cdecl *Release)(IXuiResourceManager *);
  const wchar_t *(__cdecl *GetName)(IXuiResourceManager *);
  int (__cdecl *IsTransport)(IXuiResourceManager *);
  HRESULT (__cdecl *Init)(IXuiResourceManager *, IXuiResourceReader *);
  HRESULT (__cdecl *Open)(IXuiResourceManager *, const wchar_t *, IXuiResourceReader **);
  HRESULT (__cdecl *GetFileAttributesA)(IXuiResourceManager *, const wchar_t *, _WIN32_FILE_ATTRIBUTE_DATA *);
};

/* 6217 */
struct XNetConfigParams
{
  XNetConfigSectorHeader Header;
  wchar_t wszName[24];
  unsigned __int16 wFlags;
  char abEnet[6];
  in_addr ina;
  in_addr inaMask;
  in_addr inaGateway;
  in_addr ainaDnsServers[2];
  char achDhcpHostName[40];
  char achPppoeUserName[64];
  char achPppoePassword[64];
  char achPppoeServer[40];
  char achPppoeService[40];
  _LARGE_INTEGER liTimeOfLease;
  unsigned int dwSecsInLease;
  in_addr inaLease;
  in_addr inaMaskLease;
  in_addr inaServerLease;
  in_addr ainaGatewaysLease[4];
  in_addr ainaDnsServersLease[4];
  char abEnetUPnP[6];
  unsigned __int16 wPortUPnP;
  char abEnetPppoeServer[6];
  unsigned __int16 wPppoeSessionId;
  char abReserved[68];
};

/* 6218 */
#pragma pack(push, 4)
struct CSpinLock
{
  unsigned int m_lock;
  char m_oldIrql;
};
#pragma pack(pop)

/* 6219 */
struct XUIMessagePressState
{
  int bPressed;
};

/* 6220 */
struct CXuiHtmlControl
{
  CXuiControl baseclass_0;
};

/* 6221 */
struct _XONLINE_LOGON_PARAMS
{
  _XNET_LOGON_USER rgLogonUsers[4];
  unsigned int dwFlags;
};

/* 6222 */
struct XUIRenderStats
{
  unsigned int dwFaces;
  unsigned int dwVerts;
  unsigned int dwNumCachedTextures;
  unsigned int dwTextureMemory;
  unsigned int dwNumUnusedTextures;
  unsigned int dwUnusedTextureMemory;
};

/* 6223 */
struct XUINotifyFocus
{
  _XUIOBJ *hObjOther;
};

/* 6224 */
struct XHTTP_ASYNC_RESULT
{
  unsigned int dwResult;
  unsigned int dwError;
};

/* 6225 */
struct XUIMessageSourceText
{
  int iItem;
  int iData;
  int bItemData;
  const wchar_t *szText;
  float fPointSizeOverride;
  int bDisplay;
  float fVScroll;
  unsigned int dwStyleFlags;
  int nTextFormatInfo;
  XUITextFormatInfo *pTextFormatInfo;
};

/* 6226 */
struct CXuiElementImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiElement baseclass_4;
};

/* 6227 */
struct XUIRect
{
  float left;
  float top;
  float right;
  float bottom;
};

/* 6228 */
#pragma pack(push, 8)
struct CMediaStreamASFParser::ASF_FILE_PROPERTIES_OBJECT
{
  _GUID guid;
  unsigned __int64 qwSize;
  _GUID fileId;
  unsigned __int64 qwFileSize;
  unsigned __int64 qwCreationDate;
  unsigned __int64 qwcDataPackets;
  unsigned __int64 qwPlayDuration;
  unsigned __int64 qwSendDuration;
  unsigned __int64 qwPreroll;
  unsigned int dwFlags;
};
#pragma pack(pop)

/* 6229 */
struct $9496F69B55B837144784A5069B4D1363
{
  _GUID guid;
  unsigned __int64 qwSize;
};

/* 6230 */
union CMediaStreamASFParser::ASFObjectUnion
{
  $9496F69B55B837144784A5069B4D1363 _s0;
  CMediaStreamASFParser::ASF_FILE_PROPERTIES_OBJECT fileProperties;
};

/* 6231 */
#pragma pack(push, 8)
struct CMediaStreamASFParser
{
  CMediaStreamASFParser::ASFObjectUnion m_curObject;
  unsigned int m_dwOffset;
  unsigned __int64 m_qwCurObjBytesRemaining;
  unsigned int m_dwMsDuration;
  unsigned int m_dwHeaderSize;
  unsigned __int64 m_qwDataSize;
  int m_bError;
};
#pragma pack(pop)

/* 6232 */
struct CXStorageDownloadToDirectory
{
  CXStorageDownloadParent baseclass_0;
  unsigned int m_dwUserIndex;
  __declspec(align(8)) unsigned __int64 m_xuidUser;
  unsigned int m_dwServerPathLength;
  wchar_t *m_pwszServerPath;
  unsigned int m_dwDisplayNameLength;
  wchar_t *m_pwszDisplayName;
  unsigned int m_DeviceID;
  int m_fContentLinkCreated;
  CXStorageDownloadWorker *m_pDownloadSubTask;
  _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;
  __declspec(align(8)) CXCabStreamUnpacker m_CabStreamUnpacker;
  char m_abLzxBuffer[33029];
  __declspec(align(4)) void *m_hCacheFile;
  __declspec(align(8)) _LARGE_INTEGER m_liCurrentCacheOffset;
  void *m_hCurrentFile;
  __declspec(align(8)) _LARGE_INTEGER m_liCurrentFileOffset;
};

/* 6233 */
struct XUIMessageControlGetLink
{
  XUI_CONTROL_LINK nRelationship;
  _XUIOBJ *hObjSource;
  _XUIOBJ *hObjDest;
  int bSkipNavigate;
};

/* 6234 */
struct CXMarketplaceOfferContentEnumerate
{
  char dummy[1];
};

/* 6235 */
struct IXuiFontRendererVTBL
{
  HRESULT (__cdecl *Init)(IXuiFontRenderer *, float);
  void (__cdecl *Term)(IXuiFontRenderer *);
  HRESULT (__cdecl *GetCaps)(IXuiFontRenderer *, unsigned int *);
  HRESULT (__cdecl *CreateFont)(IXuiFontRenderer *, TypefaceDescriptor *, float, unsigned int, unsigned int, void **);
  void (__cdecl *ReleaseFont)(IXuiFontRenderer *, void *);
  HRESULT (__cdecl *GetFontMetrics)(IXuiFontRenderer *, void *, XUIFontMetrics *);
  HRESULT (__cdecl *GetCharMetrics)(IXuiFontRenderer *, void *, wchar_t, XUICharMetrics *);
  HRESULT (__cdecl *DrawCharToTexture)(IXuiFontRenderer *, void *, wchar_t, IXuiDevice *, D3DTexture *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
  HRESULT (__cdecl *DrawCharsToDevice)(IXuiFontRenderer *, void *, CharData *, unsigned int, tagRECT *, IXuiDevice *, D3DXMATRIX *);
};

/* 6236 */
struct CXStorageMiscParent
{
  CXLiveAsyncTaskInternal baseclass_0;
};

/* 6237 */
#pragma pack(push, 8)
struct CXStorageEnumerate
{
  CXStorageMiscParent baseclass_0;
  unsigned __int64 m_xuidUser;
  unsigned int m_dwServerPathLength;
  wchar_t *m_pwszServerPath;
  unsigned int m_dwStartingIndex;
  unsigned int m_dwMaxResultsToReturn;
  CXLiveSubTask *m_pSubTask;
};
#pragma pack(pop)

/* 6238 */
struct _CSVChal
{
  unsigned int _dwReserved;
  unsigned int _dwNonce;
  unsigned int _dwChalFlags;
  char _abParams[16];
  char _abPkSig[256];
  unsigned __int16 _wVersion;
  unsigned __int16 _wSize;
  unsigned __int16 _wChalId;
  unsigned __int16 _wChalVer;
  unsigned int _dwChalSize;
  unsigned int _dwContext;
};

/* 6239 */
struct CXuiRadioGroup
{
  CXuiControl baseclass_0;
};

/* 6240 */
struct _XONLINE_CONFIG_TASK_PRI_PARAMS
{
  _XOVERLAPPED *pOverlappedToSetOrGet;
  int fSet;
  int fForeground;
};

/* 6241 */
struct CSchemaOnFile
{
  CSchemaData baseclass_0;
};

/* 6242 */
struct IXUIPropObjVTBL
{
  XUIElementPropDef *(__cdecl *GetPropDef)(IXUIPropObj *, unsigned int *);
  HRESULT (__cdecl *GetPropertyId)(IXUIPropObj *, const wchar_t *, unsigned int *);
  HRESULT (__cdecl *GetPropertyDef)(IXUIPropObj *, const wchar_t *, XUIElementPropDef **);
  HRESULT (__cdecl *GetPropertyRef)(IXUIPropObj *, unsigned int, void **);
  HRESULT (__cdecl *GetProperty)(IXUIPropObj *, unsigned int, unsigned int, XUIElementPropVal *);
  HRESULT (__cdecl *SetProperty)(IXUIPropObj *, unsigned int, unsigned int, XUIElementPropVal *);
  HRESULT (__cdecl *GetPropertyCount)(IXUIPropObj *, unsigned int, unsigned int *);
};

/* 6243 */
struct CXuiTextElement
{
  CXuiElement baseclass_0;
};

/* 6244 */
struct CXuiSceneImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiScene baseclass_4;
};

/* 6245 */
struct CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA
{
  unsigned int dwOrdinal;
  unsigned int dwThrottleDelayMs;
  unsigned int dwThrottleFlags;
  _LIST_ENTRY leQueue;
  unsigned int dwLastThrottleTime;
  CXLiveAsyncTaskInternal::REQUESTTHROTTLEDATA *pNext;
};

/* 6246 */
struct XUIMessageScroll
{
  int nPos;
};

/* 6247 */
struct XUIMessageTimer
{
  unsigned int nId;
};

/* 6248 */
struct XUIMessageChildSaving
{
  _XUIOBJ *hChild;
  int bDeny;
};

/* 6249 */
struct CXStorageUploadFromDirectory
{
  CXStorageUploadParent baseclass_0;
  unsigned __int64 m_xuidUser;
  unsigned int m_dwServerPathLength;
  wchar_t *m_pwszServerPath;
  unsigned int m_dwLocalPathLength;
  char *m_pszLocalPath;
  CXDirectoryCrawler m_DirectoryCrawler;
  void *m_hCurrentFile;
  __declspec(align(8)) _LARGE_INTEGER m_liCurrentFileOffset;
  CXStorageUploadWorker *m_pUploadSubTask;
  int _bf8356;
  unsigned int m_dwCabSize;
  XONLINECONTENT_HEADER m_ContentHeader;
  _RC4_SHA_HEADER m_Rc4ShaHeader;
  unsigned int m_dwCheckpoint;
  char m_abPkSignature[256];
  _XSIGNATURE_TO_VERIFY m_ContentHeaderSignature;
  CFFOLDER_HMAC m_aCfFolderHmac[100];
  unsigned int m_dwCurrentFolder;
  char m_abCfFilesBuffer[70656];
  char *m_pbCurrentFileHeader;
  CXCabCryptHelper m_CabCryptHelper;
  char m_abTempBuffer[1024];
};

/* 6250 */
struct XNetLogonMachineAccount
{
  XNetConfigSectorHeader Header;
  unsigned int dwServiceNetworkID;
  unsigned __int64 qwId;
  char szGamertag[16];
  char szDomain[20];
  char szKerberosRealm[24];
  char abKey[16];
  char bCountryIdOfLastLogon;
  char abReserved[375];
};

/* 6251 */
struct __declspec(align(8)) CMarshaller
{
  CSchemaData *m_pSchemaData;
  CArgumentList *m_pArgumentList;
  CBaseEndianBuffer m_WireBuffer;
  CSchemaAccess m_SchemaBuffer;
  __declspec(align(8)) CConformanceList m_ConformanceList;
  unsigned int m_dwCounter;
};

/* 6252 */
#pragma pack(push, 4)
struct CXMessageDownloadAttachmentToMemory
{
  CXStorageDownloadParent baseclass_0;
  unsigned __int64 m_xuidUser;
  wchar_t m_wszServerPath[255];
  unsigned int m_dwServerPathLength;
  char *m_pbBuffer;
  unsigned int m_dwBufferSize;
  CXStorageDownloadWorker *m_pDownloadSubTask;
  _STORAGE_DL_RESPONSE_BUFFER m_StorageDlResponseBuffer;
};
#pragma pack(pop)

/* 6253 */
struct _XNPXNKIDSECURITY
{
  XNKID xnkid;
  unsigned int dwFlags;
  unsigned int dwNumSockets;
  unsigned int *pSockets;
};

/* 6254 */
struct XUIMessageShowstate
{
  int bShow;
};

/* 6255 */
struct XUIMessageFigurePoint
{
  int nPointIndex;
  XUIFigurePoint *pPoint;
  int nCount;
};

/* 6256 */
struct XUIObjectMethods
{
  HRESULT (__cdecl *ObjectProc)(_XUIOBJ *, XUIMessage *, void *);
  HRESULT (__cdecl *CreateInstance)(_XUIOBJ *, void **);
  HRESULT (__cdecl *DestroyInstance)(void *);
};

/* 6257 */
struct XUIClass
{
  unsigned int cbSize;
  const wchar_t *szClassName;
  const wchar_t *szBaseClassName;
  XUIObjectMethods Methods;
  XUIElementPropDef *pPropDefs;
  unsigned int dwPropDefCount;
};

/* 6258 */
struct XNetConfigStatus
{
  unsigned int dwFlags;
  in_addr ina;
  in_addr inaMask;
  in_addr ainaGateways[4];
  in_addr ainaDnsServers[4];
  unsigned int cConfigPppoe;
  XNetConfigPppoe *pConfigPppoe;
  int fConfigUPnP;
  unsigned __int16 wPortUPnP;
};

/* 6259 */
struct XUIMessageDeleteText
{
  unsigned int nIndex;
  unsigned int nCount;
};

/* 6260 */
#pragma pack(push, 4)
struct XUIMessageInput
{
  unsigned int dwKeyCode;
  wchar_t wch;
  unsigned int dwFlags;
  char UserIndex;
};
#pragma pack(pop)

/* 6261 */
struct CXLspEnumerate
{
  char dummy[1];
};

/* 6262 */
#pragma pack(push, 4)
struct XUINotifyPressing
{
  int bInPress;
  int bSkipPress;
  char UserIndex;
};
#pragma pack(pop)

/* 6263 */
struct XUIMessagePlayVisual
{
  int bFocusChanging;
  int bGettingFocus;
};

/* 6264 */
struct XUINotifyValueChanged
{
  int nValue;
};

/* 6265 */
struct XNetCapBuffer
{
  unsigned int cbCap;
  char *pbCapHead;
  char *pbCapTail;
  unsigned int cbCapFree;
};

/* 6266 */
#pragma pack(push, 4)
struct XUIMessagePress
{
  int bPressOccurred;
  char UserIndex;
  int bUserPress;
};
#pragma pack(pop)

/* 6267 */
struct XnKeyInfo
{
  XNKID xnkid;
  _XNCALLER_TYPE CallerType;
  unsigned int dwInfoFlags;
  unsigned int dwQosListenDataSize;
  unsigned int dwQosListenMaxBps;
  char abReserved[16];
};

/* 6268 */
struct CSystemApp
{
  CSystemAppVtbl *vfptr;
  HINSTANCE__ *_hInstance;
  unsigned int _dwAppId;
};

/* 6269 */
struct $B1B4CDD2A78DBA3ACE0275D8692D5D86
{
  _BYTE gap0[4];
  HRESULT (__cdecl *OnSysUnload)(CSystemApp *this);
};

/* 6270 */
struct $8126A5FDF3E5F4068EEEC8048006CE13
{
  _BYTE gap0[8];
  HRESULT (__cdecl *OnSysPersist)(CSystemApp *this, void *);
};

/* 6271 */
struct $E2E8A28423114ABD1C16778C8918C48D
{
  _BYTE gap0[12];
  HRESULT (__cdecl *OnSysUpdateFrame)(CSystemApp *this);
};

/* 6272 */
struct $79A99BA69026689EC3AA8E5CB5620A66
{
  _BYTE gap0[16];
  HRESULT (__cdecl *OnSysUIInit)(CSystemApp *this, struct _XUIDC *, SYSUIINIT *);
};

/* 6273 */
struct $90A04C654922D0E4A5729C3FDA6D8E1D
{
  _BYTE gap0[20];
  HRESULT (__cdecl *OnSysAsyncMessage)(CSystemApp *this, _XASYNCMESSAGE *);
};

/* 6274 */
struct $C0C16F472BD0329627532532828B2D9D
{
  _BYTE gap0[24];
  HRESULT (__cdecl *OnSysTitleShuttingDown)(CSystemApp *this);
};

/* 6275 */
struct $B80A39CA011055CC077B12BC071E4D0D
{
  _BYTE gap0[28];
  HRESULT (__cdecl *OnSysTitleShutdown)(CSystemApp *this);
};

/* 6276 */
struct $8BDFE6F111DFB0DDD36CFB009887EB07
{
  _BYTE gap0[32];
  HRESULT (__cdecl *OnSysTitleStartup)(CSystemApp *this);
};

/* 6277 */
struct $0050D183D04B959F3DDF37F196DEB32D
{
  _BYTE gap0[36];
  HRESULT (__cdecl *OnMessageProc)(CSystemApp *this, unsigned int, unsigned int, unsigned int);
};

/* 6278 */
union $C9DD47349A3DC42A5CEFC2810EFFEB34
{
  HRESULT (__cdecl *OnSysLoad)(CSystemApp *this, unsigned int, void *, unsigned int *);
  $B1B4CDD2A78DBA3ACE0275D8692D5D86 _s1;
  $8126A5FDF3E5F4068EEEC8048006CE13 _s2;
  $E2E8A28423114ABD1C16778C8918C48D _s3;
  $79A99BA69026689EC3AA8E5CB5620A66 _s4;
  $90A04C654922D0E4A5729C3FDA6D8E1D _s5;
  $C0C16F472BD0329627532532828B2D9D _s6;
  $B80A39CA011055CC077B12BC071E4D0D _s7;
  $8BDFE6F111DFB0DDD36CFB009887EB07 _s8;
  $0050D183D04B959F3DDF37F196DEB32D _s9;
};

/* 6279 */
struct CSystemAppVtbl
{
  void *(__cdecl *__vecDelDtor)(CSystemApp *this, unsigned int);
  $C9DD47349A3DC42A5CEFC2810EFFEB34 ___u1;
};

/* 6280 */
struct CXuiSound
{
  CXuiElement baseclass_0;
};

/* 6281 */
struct XUIMessageSetCurSel
{
  int iItem;
};

/* 6282 */
struct XUIMessageTimelineNotify
{
  _XUIOBJ *hObjSource;
};

/* 6283 */
struct IXUIAuditionHost
{
  IXUIAuditionHostVtbl *vfptr;
};

/* 6284 */
struct $CA3C8CD29E2086399FB240D4B0C04A83
{
  _BYTE gap0[4];
  HRESULT (__cdecl *ChangeLocale)(IXUIAuditionHost *this);
};

/* 6285 */
struct $4E815E82461CBE61654D5AA0369FEAB4
{
  _BYTE gap0[8];
  HRESULT (__cdecl *ChangeSkin)(IXUIAuditionHost *this, const wchar_t *, const wchar_t *);
};

/* 6286 */
struct $360B55A2EEE844BFDB062EF50E65BBC1
{
  _BYTE gap0[12];
  HRESULT (__cdecl *ReloadResources)(IXUIAuditionHost *this);
};

/* 6287 */
union $74CDBF80D1B6F6D35EDCE8742793E0C2
{
  HRESULT (__cdecl *ProcessRemoteInput)(IXUIAuditionHost *this, _XINPUT_KEYSTROKE *);
  $CA3C8CD29E2086399FB240D4B0C04A83 _s1;
  $4E815E82461CBE61654D5AA0369FEAB4 _s2;
  $360B55A2EEE844BFDB062EF50E65BBC1 _s3;
};

/* 6288 */
struct IXUIAuditionHostVtbl
{
  $74CDBF80D1B6F6D35EDCE8742793E0C2 ___u0;
};

/* 6289 */
struct IXUIAuditionHostVTBL
{
  HRESULT (__cdecl *ProcessRemoteInput)(IXUIAuditionHost *, _XINPUT_KEYSTROKE *);
  HRESULT (__cdecl *ChangeLocale)(IXUIAuditionHost *);
  HRESULT (__cdecl *ChangeSkin)(IXUIAuditionHost *, const wchar_t *, const wchar_t *);
  HRESULT (__cdecl *ReloadResources)(IXUIAuditionHost *);
};

/* 6290 */
struct XUIMessageGetBackScene
{
  _XUIOBJ *hBackScene;
};

/* 6291 */
struct CXuiImageElement
{
  CXuiElement baseclass_0;
};

/* 6292 */
struct XUIMessageInsertText
{
  unsigned int nIndex;
  const wchar_t *pszText;
};

/* 6293 */
struct CXuiSlider
{
  CXuiControl baseclass_0;
};

/* 6294 */
struct XUIMessageMouse
{
  unsigned int dwButton;
  unsigned int dwFlags;
  int nWheelDelta;
  int x;
  int y;
  D3DXVECTOR3 vLocal;
};

/* 6295 */
struct CHUDSceneImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiScene baseclass_4;
};

/* 6296 */
struct CXLiveLogon
{
  int _bf0;
  _XONLINE_LOGON_PARAMS *m_pLogonParams;
  _XOVERLAPPED *m_pOverlapped;
  HRESULT m_hrLogonStop;
  unsigned int m_dwSessionID;
  HRESULT m_hrLast;
  _RTL_CRITICAL_SECTION m_csLogon;
  __declspec(align(8)) unsigned __int64 m_qwRevocationListTime;
  _XOVERLAPPED m_xovGetRevocationList;
  _XGET_REVOCATION_LIST_REPLY *m_pGetRevocationListReply;
  _KEVENT m_kevtRevocationListDone;
};

/* 6297 */
#pragma pack(push, 8)
struct CXInviteSendMessage
{
  CXMsgSendBase baseclass_0;
  void *m_hMsgCreated;
  unsigned __int64 m_aqwPuidRecipients[100];
  unsigned int m_dwNumRecipients;
};
#pragma pack(pop)

/* 6298 */
struct XUIMessageControlNavigate
{
  XUI_CONTROL_NAVIGATE nControlNavigate;
  _XUIOBJ *hObjSource;
  _XUIOBJ *hObjDest;
  int bSkipNavigate;
};

/* 6299 */
struct XUIMessageParentChanged
{
  int bOnLink;
  _XUIOBJ *hOldParent;
  _XUIOBJ *hNewParent;
};

/* 6300 */
struct CXuiSceneCache::SceneCacheEntry
{
  wchar_t *m_szFileName;
  _XUIOBJ *m_hObj;
  int m_bInUse;
  CXuiSceneCache::SceneCacheEntry *m_pNext;
  CXuiSceneCache::SceneCacheEntry *m_pPrev;
};

/* 6301 */
struct CXuiSceneCache
{
  _XUICLASS *m_hClassControl;
  _XUICLASS *m_hClassNavButton;
  _XUICLASS *m_hClassScene;
  CXuiSceneCache::SceneCacheEntry *m_pHead;
  CXuiSceneCache::SceneCacheEntry *m_pTail;
};

/* 6302 */
struct CXuiCachingModule
{
  CXuiModule baseclass_0;
  _XUICLASS *m_hClassNavButton;
  _XUICLASS *m_hClassBackButton;
  _XUICLASS *m_hClassScene;
  CXuiSceneCache m_sceneCache;
};

/* 6303 */
struct CXMarketplaceAssetEnumerate
{
  char dummy[1];
};

/* 6304 */
struct CXuiCheckbox
{
  CXuiControl baseclass_0;
};

/* 6305 */
#pragma pack(push, 8)
struct CXStorageDelete
{
  CXStorageMiscParent baseclass_0;
  unsigned __int64 m_xuidUser;
  unsigned int m_dwServerPathLength;
  wchar_t *m_pwszServerPath;
  CXLiveSubTask *m_pSubTask;
};
#pragma pack(pop)

/* 6306 */
struct XUIMessageSetScrollEndState
{
  XUI_SCROLLEND_STATE nState;
};

/* 6307 */
struct XUINotifySelChanged
{
  int iItem;
  int iOldItem;
};

/* 6308 */
struct IXUIRuntimeHooksVTBL
{
  HRESULT (__cdecl *RewriteResourceLocator)(IXUIRuntimeHooks *, const wchar_t *, wchar_t **);
  HRESULT (__cdecl *FindClassByName)(IXUIRuntimeHooks *, const wchar_t *, _XUICLASS **);
  HRESULT (__cdecl *GetTextPresenterText)(IXUIRuntimeHooks *, _XUIOBJ *, const wchar_t **);
  HRESULT (__cdecl *LogMessage)(IXUIRuntimeHooks *, HRESULT, const wchar_t *);
};

/* 6309 */
struct XUINotify
{
  unsigned int dwNotify;
  _XUIOBJ *hObjSource;
  unsigned int cbData;
  void *pvData;
};

/* 6310 */
struct CBitrateMonitor
{
  unsigned int m_dwLastTickCount;
  unsigned int m_dwInitialTickCount;
  unsigned int m_dwTotalNumBytes;
  unsigned int m_dwNumSamplesSinceLastMeasurement;
  unsigned int m_dwNumBytesSinceLastMeasurement;
  unsigned int m_dwLastMeasurementTickCount;
  unsigned __int64 m_qwAverageBitrate;
};

/* 6311 */
struct CXContentDownloadMedia::VIDEOCONTENTURL_RESPONSE_BUFFER
{
  _ACQUIRE_VIDEO_CONTENT_URL_RESPONSE Response;
  wchar_t acUrlsBuffer[500];
};

/* 6312 */
struct CXContentDownloadMedia
{
  CXLiveAsyncTaskInternal baseclass_0;
  CXContentDownloadMedia::VIDEOCONTENTURL_RESPONSE_BUFFER m_VideoContentUrlResponseBuffer;
  __declspec(align(4)) int _bf8720;
  unsigned int m_dwNumLocations;
  _LARGE_INTEGER m_liInstallSize;
  _XREFERRAL_LOCATION *m_paReferralLocations;
  _XREFERRAL_LOCATION *m_pNextReferralLocation;
  _XCONTENT_MOUNTED_PACKAGE *m_pMountedPackage;
  void *m_hMediaDirectory;
  int m_bCreatedFile;
  unsigned int m_dwNumMediaFiles;
  unsigned int m_dwFileChunkSizeBytes;
  void *m_hMediaFile[4096];
  void *m_hResumeFile;
  void *m_hAsfResumeFile;
  __declspec(align(8)) _LARGE_INTEGER m_liMediaFileSize;
  _LARGE_INTEGER m_liTotalBytesReceived;
  int m_bResumeTransfer;
  _FILETIME m_ftLastModified;
  __declspec(align(8)) _LARGE_INTEGER m_liResumeOffset;
  _LARGE_INTEGER m_liResumeFilesize;
  unsigned int m_dwContentType;
  __declspec(align(8)) unsigned __int64 m_qwUserId;
  char m_abContentId[16];
  _WMID m_ContentWmid;
  __declspec(align(4)) unsigned int m_cchMediaURL;
  char m_szMediaURL[500];
  _XREFERRAL_LOCATION m_ReferralLocation;
  unsigned int m_dwTargetDirectoryLength;
  char *m_pszTargetDirectoryPath;
  unsigned int m_dwFlags;
  CXLiveSubTask *m_pSubTask;
  _XCONTENT_HEADER *m_pContentHeader;
  char m_abRecvBuffer[65535];
  __declspec(align(2)) CBitrateMonitor m_bitrateMonitor;
  CMediaStreamASFParser m_AsfParser;
};

/* 6313 */
struct CXuiControlImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiControl baseclass_4;
};

/* 6314 */
struct CXuiProgressBar
{
  CXuiControl baseclass_0;
};

/* 6315 */
struct CXuiHtmlControlImpl
{
  CXuiElementImplBase baseclass_0;
  CXuiHtmlControl baseclass_4;
};

/* 6316 */
#pragma pack(push, 4)
struct XAUDIOFXINIT
{
  char EffectId;
  void *pContext;
};
#pragma pack(pop)

/* 6317 */
#pragma pack(push, 4)
struct XAUDIOXMAFORMAT
{
  unsigned int SampleRate;
  char ChannelCount;
  char DecodeBufferSize;
};
#pragma pack(pop)

/* 6318 */
union $9D91AD7FD1BA7330B7FA3BAC24377F35
{
  char NumStreams;
  char ChannelCount;
};

/* 6319 */
union $A2A60DCC2C958E872EECE00B123AF832
{
  XAUDIOXMAFORMAT Stream[6];
  unsigned int SampleRate;
};

/* 6320 */
struct XAUDIOSOURCEFORMAT
{
  char SampleType;
  __declspec(align(4)) $9D91AD7FD1BA7330B7FA3BAC24377F35 ___u1;
  __declspec(align(4)) $A2A60DCC2C958E872EECE00B123AF832 ___u2;
};

/* 6321 */
struct XAUDIOSOURCEFXPACKETCALLBACK
{
  void *pEffectContext;
  void *pPacketContext;
  int Status;
};

/* 6322 */
#pragma pack(push, 4)
struct XAUDIOSOURCEFXINIT
{
  XAUDIOFXINIT EffectHeader;
  XAUDIOSOURCEFORMAT Format;
  float MaxPitchShift;
  char MaxPacketCount;
  char Flags;
  void (__cdecl *pfnPacketCompletionCallback)(XAUDIOSOURCEFXPACKETCALLBACK *);
  void (__cdecl *pfnPacketLoopCallback)(XAUDIOSOURCEFXPACKETCALLBACK *);
};
#pragma pack(pop)

/* 6323 */
struct XAUDIODRVPERFCOUNTER
{
  unsigned __int64 MinTicks;
  unsigned __int64 AvgTicks;
  unsigned __int64 MaxTicks;
  unsigned __int64 QueryTicks;
  unsigned __int64 TicksPerSecond;
  unsigned __int64 FrameCount;
};

/* 6324 */
struct XAUDIOVOICEPACKETCALLBACK
{
  void *pVoiceContext;
  void *pPacketContext;
  int Status;
};

/* 6325 */
struct IXAudioRefCount
{
  IXAudioRefCountVtbl *vfptr;
};

/* 6326 */
struct IXAudioRefCountVtbl
{
  unsigned int (__cdecl *AddRef)(IXAudioRefCount *this);
  unsigned int (__cdecl *Release)(IXAudioRefCount *this);
};

/* 6327 */
#pragma pack(push, 4)
struct XMALOOPREGION
{
  unsigned int LoopStart;
  unsigned int LoopEnd;
  char LoopSubframeEnd;
  char LoopSubframeSkip;
};
#pragma pack(pop)

/* 6328 */
struct XHV_CODEC_HEADER
{
  __int16 _bf0;
};

/* 6329 */
#pragma pack(push, 4)
struct $050D0DDAAD1EAC5A15ADCB5C29D561F6
{
  char SampleType;
  char ChannelCount;
  unsigned int SampleRate;
};
#pragma pack(pop)

/* 6330 */
union XAUDIOFORMAT
{
  $050D0DDAAD1EAC5A15ADCB5C29D561F6 _s0;
  unsigned __int64 UnionValue;
};

/* 6331 */
struct XAUDIOFRAMEBUFINIT
{
  char Type;
  __declspec(align(4)) XAUDIOFORMAT MaxFormat;
  float *pSampleBuffer;
  void *pContext;
};

/* 6332 */
struct XAUDIOREVERBSETTINGS
{
  unsigned int ReflectionsDelay;
  char ReverbDelay;
  char RearDelay;
  char PositionLeft;
  char PositionRight;
  char PositionMatrixLeft;
  char PositionMatrixRight;
  char EarlyDiffusion;
  char LateDiffusion;
  char LowEQGain;
  char LowEQCutoff;
  char HighEQGain;
  char HighEQCutoff;
  float RoomFilterFreq;
  float RoomFilterMain;
  float RoomFilterHF;
  float ReflectionsGain;
  float ReverbGain;
  float DecayTime;
  float Density;
  float RoomSize;
};

/* 6333 */
struct IXAudioVoice
{
  char dummy[1];
};

/* 6334 */
#pragma pack(push, 4)
struct XAUDIOCHANNELMAPENTRY
{
  char InputChannel;
  char OutputChannel;
  float Volume;
};
#pragma pack(pop)

/* 6335 */
#pragma pack(push, 4)
struct XAUDIOCHANNELMAP
{
  char EntryCount;
  XAUDIOCHANNELMAPENTRY *paEntries;
};
#pragma pack(pop)

/* 6336 */
struct XAUDIOVOICEOUTPUTENTRY
{
  IXAudioVoice *pDestVoice;
  XAUDIOCHANNELMAP *pChannelMap;
};

/* 6337 */
#pragma pack(push, 4)
struct XAUDIOVOICEOUTPUT
{
  char EntryCount;
  XAUDIOVOICEOUTPUTENTRY *paEntries;
};
#pragma pack(pop)

/* 6338 */
struct IXAudioBatchAllocator
{
  IXAudioRefCount baseclass_0;
};

/* 6339 */
struct IXAudioEffect
{
  IXAudioRefCount baseclass_0;
};

/* 6340 */
#pragma pack(push, 4)
struct XAUDIOFXTABLEENTRY
{
  char EffectId;
  HRESULT (__cdecl *pfnQueryEffectSize)(XAUDIOFXINIT *, unsigned int *);
  HRESULT (__cdecl *pfnCreateEffect)(XAUDIOFXINIT *, IXAudioBatchAllocator *, IXAudioEffect **);
};
#pragma pack(pop)

/* 6341 */
struct PACKET_CONTEXT
{
  XMEDIAPACKET *Packet;
  PACKET_CONTEXT *Next;
};

/* 6342 */
struct PACKET_QUEUE
{
  PACKET_CONTEXT *Head;
  PACKET_CONTEXT *Tail;
};

/* 6343 */
struct PACKET_PROCESSOR
{
  PACKET_QUEUE FreePacketContexts;
  PACKET_QUEUE InFlight;
  PACKET_CONTEXT *PacketContextAllocation;
};

/* 6344 */
struct IXHVEngine
{
  IXHVEngineVtbl *vfptr;
};

/* 6345 */
#pragma pack(push, 4)
const struct XAUDIOVOICEFXCHAIN
{
  char EffectCount;
  XAUDIOFXINIT **papEffects;
};
#pragma pack(pop)

/* 6346 */
struct IXAudioSubmixVoice
{
  IXAudioVoice baseclass_0;
};

/* 6347 */
struct XAUDIOFXDATAPARAM
{
  void *pBuffer;
  unsigned int BufferSize;
};

/* 6348 */
const union XAUDIOFXPARAM
{
  float Value;
  unsigned int Flags;
  XAUDIOFXDATAPARAM Data;
};

/* 6349 */
struct $99DB32EF0FF88247A02DD99A2FF3FCF1
{
  _BYTE gap0[4];
  HRESULT (__cdecl *StartLocalProcessingModes)(IXHVEngine *this, unsigned int, void *const *const , unsigned int);
};

/* 6350 */
struct $BFF891C480BB59173D865CF838C1F8A8
{
  _BYTE gap0[8];
  HRESULT (__cdecl *StopLocalProcessingModes)(IXHVEngine *this, unsigned int, void *const *const , unsigned int);
};

/* 6351 */
struct $6A3280FF2D57470FCADB11C02FCE32FF
{
  _BYTE gap0[12];
  HRESULT (__cdecl *StartRemoteProcessingModes)(IXHVEngine *this, unsigned __int64, void *const *const , unsigned int);
};

/* 6352 */
struct $72C9BA204E0F9E24699140C174C0C79B
{
  _BYTE gap0[16];
  HRESULT (__cdecl *StopRemoteProcessingModes)(IXHVEngine *this, unsigned __int64, void *const *const , unsigned int);
};

/* 6353 */
struct $E8AE16C882EED00024FAB89C085EB2D8
{
  _BYTE gap0[20];
  HRESULT (__cdecl *SetMaxDecodePackets)(IXHVEngine *this, unsigned int);
};

/* 6354 */
struct $70DD9FA02E306789BFF21D3937EC381F
{
  _BYTE gap0[24];
  HRESULT (__cdecl *RegisterLocalTalker)(IXHVEngine *this, unsigned int);
};

/* 6355 */
struct $1C5C3C84B14C355B60B59B47B08AFCE0
{
  _BYTE gap0[28];
  HRESULT (__cdecl *UnregisterLocalTalker)(IXHVEngine *this, unsigned int);
};

/* 6356 */
struct $5F256AD4A07B954A35D38783531D7CFF
{
  _BYTE gap0[32];
  HRESULT (__cdecl *RegisterRemoteTalker)(IXHVEngine *this, unsigned __int64, XAUDIOVOICEFXCHAIN *, XAUDIOVOICEFXCHAIN *, IXAudioSubmixVoice *);
};

/* 6357 */
struct $B2EEA0388D2D4063B6B8CF5C23CD27DE
{
  _BYTE gap0[36];
  HRESULT (__cdecl *UnregisterRemoteTalker)(IXHVEngine *this, unsigned __int64);
};

/* 6358 */
struct $BE808129C860D1DB076ED672ACE82ACB
{
  _BYTE gap0[40];
  HRESULT (__cdecl *GetRemoteTalkers)(IXHVEngine *this, unsigned int *, unsigned __int64 *);
};

/* 6359 */
struct $EB3FB013D960EEA29A5AE378725F2297
{
  _BYTE gap0[44];
  int (__cdecl *IsHeadsetPresent)(IXHVEngine *this, unsigned int);
  int (__cdecl *IsLocalTalking)(IXHVEngine *this, unsigned int);
  int (__cdecl *IsRemoteTalking)(IXHVEngine *this, unsigned __int64);
  HRESULT (__cdecl *SetRemoteTalkerOutputVoice)(IXHVEngine *this, unsigned __int64, IXAudioSubmixVoice *);
};

/* 6360 */
struct $A1FCE0F2224B593E7D2931AA7A6ADB48
{
  _BYTE gap0[60];
  HRESULT (__cdecl *SetRemoteTalkerEffectParam)(IXHVEngine *this, unsigned __int64, int, char, char, char, XAUDIOFXPARAM *);
};

/* 6361 */
struct $CCBBC715AC6EBE55482553A409982208
{
  _BYTE gap0[64];
  unsigned int (__cdecl *GetDataReadyFlags)(IXHVEngine *this);
  HRESULT (__cdecl *GetLocalChatData)(IXHVEngine *this, unsigned int, char *, unsigned int *, unsigned int *);
};

/* 6362 */
struct $328E77CAA7AB338DA367E40476DAC6D1
{
  _BYTE gap0[72];
  HRESULT (__cdecl *SetPlaybackPriority)(IXHVEngine *this, unsigned __int64, unsigned int, unsigned int);
};

/* 6363 */
struct $642C312A6BA1F96D88B78A13C85AA1CD
{
  _BYTE gap0[76];
  HRESULT (__cdecl *SubmitIncomingChatData)(IXHVEngine *this, unsigned __int64, const char *, unsigned int *);
};

/* 6364 */
union $8119665D7BCDBA4BE3DC9711BA294036
{
  HRESULT (__cdecl *Lock)(IXHVEngine *this, unsigned int);
  $99DB32EF0FF88247A02DD99A2FF3FCF1 _s1;
  $BFF891C480BB59173D865CF838C1F8A8 _s2;
  $6A3280FF2D57470FCADB11C02FCE32FF _s3;
  $72C9BA204E0F9E24699140C174C0C79B _s4;
  $E8AE16C882EED00024FAB89C085EB2D8 _s5;
  $70DD9FA02E306789BFF21D3937EC381F _s6;
  $1C5C3C84B14C355B60B59B47B08AFCE0 _s7;
  $5F256AD4A07B954A35D38783531D7CFF _s8;
  $B2EEA0388D2D4063B6B8CF5C23CD27DE _s9;
  $BE808129C860D1DB076ED672ACE82ACB _s10;
  $EB3FB013D960EEA29A5AE378725F2297 _s11;
  $A1FCE0F2224B593E7D2931AA7A6ADB48 _s12;
  $CCBBC715AC6EBE55482553A409982208 _s13;
  $328E77CAA7AB338DA367E40476DAC6D1 _s14;
  $642C312A6BA1F96D88B78A13C85AA1CD _s15;
};

/* 6365 */
struct IXHVEngineVtbl
{
  unsigned int (__cdecl *AddRef)(IXHVEngine *this);
  unsigned int (__cdecl *Release)(IXHVEngine *this);
  $8119665D7BCDBA4BE3DC9711BA294036 ___u2;
};

/* 6366 */
struct IProcMode
{
  IProcModeVtbl *lpVtbl;
};

/* 6367 */
struct XHV_INIT_PARAMS
{
  unsigned int dwMaxRemoteTalkers;
  unsigned int dwMaxLocalTalkers;
  void *const *localTalkerEnabledModes;
  unsigned int dwNumLocalTalkerEnabledModes;
  void *const *remoteTalkerEnabledModes;
  unsigned int dwNumRemoteTalkerEnabledModes;
  int bCustomVADProvided;
  int bRelaxPrivileges;
  void (__cdecl *pfnMicrophoneRawDataReady)(unsigned int, void *, unsigned int, int *);
  XAUDIOVOICEFXCHAIN *pfxDefaultRemoteTalkerFX;
  XAUDIOVOICEFXCHAIN *pfxDefaultTalkerPairFX;
  XAUDIOVOICEFXCHAIN *pfxOutputFX;
};

/* 6368 */
struct XHVENGINE
{
  IXHVEngineVtbl *IXHVEngineVtbl;
  unsigned int RefCount;
  XHV_INIT_PARAMS InitParams;
  void *OutputVoice;
  void *MixVoice;
  void *SilenceVoice;
  float Silence[256];
  int SilencePlaying;
  LOCALTALKER *AllocatedLocalTalkers[4];
  LOCALTALKER *LocalTalkers[4];
  REMOTETALKER *RemoteTalkers[34];
  void *WorkerThread;
  unsigned int DataReadyFlags;
  _RTL_CRITICAL_SECTION EngineLock;
  unsigned int ActivationFlag;
  void *ActivationEvent;
  int ResortRemoteTalkers;
  void *NotificationListener;
  int SettingsDirty;
  unsigned int Round;
  unsigned int MaxVoiceChatDecodes;
  int PrevLocalWork[4][3];
  unsigned int MaxLocalWork[4][3];
  int PrevRemoteWork[34][3];
  unsigned int MaxRemoteWork[34][3];
};

/* 6369 */
#pragma pack(push, 4)
struct LOCALTALKER
{
  unsigned int Port;
  MICPROXY *MicProxy;
  void *Headset;
  IProcMode *ProcModes[2];
  IProcMode *ModeByIndex[3];
  unsigned int NumProcModes;
  CODEC_PROCESSOR *Codecs[2];
  unsigned int NumCodecs;
  PACKET_BUFFER *HeadphonePackets;
  PACKET_QUEUE FreeHeadphonePackets;
  PACKET_QUEUE FullHeadphonePackets;
  unsigned int HeadphoneQueueLock;
  int HeadphoneWriteLock;
  PACKET_QUEUE InFlightPackets;
  t_g726state g726State;
  XMEDIAFORMAT RecordingFormat;
  XHVENGINE *XHVEngine;
  _XOVERLAPPED xoverlapped;
  _XUSER_READ_PROFILE_SETTING_RESULT *ProfileSettings;
  unsigned int SettingsBufferSize;
  float Volume;
  int SettingsPending;
  int HeadsetPresent;
  unsigned int VoiceSettings;
  XHVRESAMPLER Resampler;
};
#pragma pack(pop)

/* 6370 */
struct t_g726state
{
  __int16 a1r;
  __int16 a2r;
  __int16 apr;
  __int16 bnr[7];
  __int16 dml;
  __int16 dms;
  __int16 dqn[7];
  __int16 pk1;
  __int16 pk2;
  __int16 sr1;
  __int16 sr2;
  __int16 tdr;
  __int16 yl_lsb;
  __int16 yl_msb;
  __int16 yup;
};

/* 6371 */
struct CODEC_TYPE
{
  HRESULT (__cdecl *CreateProc)(void *);
  HRESULT (__cdecl *DestroyProc)(void *);
  HRESULT (__cdecl *ProcessProc)(void *, unsigned int);
  unsigned int CodecTypeIndex;
  unsigned int CodecSize;
  unsigned int FrameAlignment;
  unsigned int InputFrameSize;
  unsigned int OutputFrameSize;
};

/* 6372 */
struct CODEC_PROCESSOR
{
  XHVENGINE *XHVEngine;
  PACKET_PROCESSOR *InputPackets;
  PACKET_PROCESSOR *Outputs[2];
  int Running[2];
  CODEC_TYPE *CodecType;
};

/* 6373 */
#pragma pack(push, 4)
struct MICPROXY
{
  XHVENGINE *XHVEngine;
  LOCALTALKER *LocalTalker;
  char *PCMBuffer;
  unsigned int NumPackets;
  unsigned int LastPacketTime;
  int Delta;
  t_g726state g726State;
  CODEC_PROCESSOR *Codecs[2];
  PACKET_CONTEXT *Contexts[3];
  PACKET_QUEUE Queues[3];
  XMEDIAPACKET *CodecPackets[3];
  unsigned int NumCodecs;
  char Talkspurt;
  int VoiceDetected;
  unsigned int Sensitivity;
  int Hangtime;
  unsigned int Talktime;
};
#pragma pack(pop)

/* 6374 */
struct PACKET_BUFFER
{
  char *Buffer;
  XMEDIAPACKET *Packets;
  unsigned int PacketDescriptorSize;
};

/* 6375 */
#pragma pack(push, 8)
struct XHVRESAMPLER
{
  double PreviousSamples[32];
  unsigned int Offset;
};
#pragma pack(pop)

/* 6376 */
#pragma pack(push, 8)
struct REMOTETALKER
{
  unsigned __int64 Xuid;
  XHVENGINE *XHVEngine;
  IProcMode *ProcModes[2];
  unsigned int NumProcModes;
  CODEC_PROCESSOR *Codecs[2];
  unsigned int NumCodecs;
  unsigned int Priorities[4];
  int VoiceDetected;
  int Hangtime;
  unsigned int LastTime;
  char MuteFlags;
  int FriendsOnly;
  void *TalkerVoice;
  void *TalkerOutputVoice;
  void *PairVoice;
};
#pragma pack(pop)

/* 6377 */
struct PROCMODE_CODEC_INFO
{
  CODEC_TYPE *CodecType;
  unsigned int MaxPackets;
};

/* 6378 */
struct IProcModeVtbl
{
  HRESULT (__cdecl *Initialize)(IProcMode *, XHVENGINE *, CODEC_PROCESSOR *, unsigned int);
  void (__cdecl *Destroy)(IProcMode *);
  HRESULT (__cdecl *Start)(IProcMode *);
  HRESULT (__cdecl *Stop)(IProcMode *);
  HRESULT (__cdecl *Process)(IProcMode *);
  void (__cdecl *GetCodecInfo)(IProcMode *, PROCMODE_CODEC_INFO *);
  HRESULT (__cdecl *(__cdecl *GetCreationWrapper)(IProcMode *))(XHVENGINE *GetNotificationData, void *, char, IProcMode **);
  HRESULT (__cdecl *)(IProcMode *SetOutputVoice, char *, unsigned int *, unsigned int *IsDataInCodec);
  HRESULT (__cdecl *)(IProcMode *, void *);
  int (__cdecl *)(IProcMode *);
};

/* 6379 */
#pragma pack(push, 4)
struct XAUDIOFXTABLE
{
  char EffectCount;
  XAUDIOFXTABLEENTRY *paEffects;
};
#pragma pack(pop)

/* 6380 */
struct waveformat_tag
{
  unsigned __int16 wFormatTag;
  unsigned __int16 nChannels;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
};

/* 6381 */
#pragma pack(push, 8)
struct VOICECHATINFO
{
  unsigned int dwUserIndex;
  unsigned __int64 Xuid;
  char szRemoteGamertag[16];
  VOICECHATSTATUS eStatus;
};
#pragma pack(pop)

/* 6382 */
const struct XAUDIOVOICEPROCESSCALLBACK
{
  void *pVoiceContext;
};

/* 6383 */
const struct XAUDIOMASTERINGVOICEINIT
{
  XAUDIOVOICEFXCHAIN *pEffectChain;
  void (__cdecl *pfnProcessCallback)(XAUDIOVOICEPROCESSCALLBACK *);
  void *pContext;
};

/* 6384 */
#pragma pack(push, 2)
struct XAUDIOENGINEINIT
{
  char MaxVoiceChannelCount;
  char SubmixStageCount;
  char ThreadUsage;
  XAUDIOFXTABLE *pEffectTable;
  XAUDIOMASTERINGVOICEINIT *pMasteringVoiceInit;
};
#pragma pack(pop)

/* 6385 */
struct XMA2STREAMFORMAT
{
  char Channels;
  char RESERVED;
  unsigned __int16 ChannelMask;
};

/* 6386 */
struct XMASTREAMFORMAT
{
  unsigned int PsuedoBytesPerSec;
  unsigned int SampleRate;
  unsigned int LoopStart;
  unsigned int LoopEnd;
  char SubframeData;
  char Channels;
  unsigned __int16 ChannelMask;
};

/* 6387 */
struct UVBASE_REQUESTVOICECHATPARAM
{
  unsigned int dwChannelIndex;
  unsigned int dwUserIndex;
  unsigned __int64 Xuid;
  char szGamertag[16];
};

/* 6388 */
struct XMAWAVEFORMAT
{
  unsigned __int16 FormatTag;
  unsigned __int16 BitsPerSample;
  unsigned __int16 EncodeOptions;
  unsigned __int16 LargestSkip;
  unsigned __int16 NumStreams;
  char LoopCount;
  char Version;
  XMASTREAMFORMAT XmaStreams[1];
};

/* 6389 */
struct pcmwaveformat_tag
{
  waveformat_tag wf;
  unsigned __int16 wBitsPerSample;
};

/* 6390 */
#pragma pack(push, 8)
struct UVCHANNELINFO
{
  UVCHANNELSTATUS eStatus;
  VOICECHATINFO VoiceChatInfo;
};
#pragma pack(pop)

/* 6391 */
struct XAUDIOPERFCOUNTER
{
  unsigned __int64 MinTicks;
  unsigned __int64 AvgTicks;
  unsigned __int64 MaxTicks;
  unsigned __int64 QueryTicks;
  unsigned __int64 TicksPerSecond;
  unsigned __int64 FrameCount;
};

/* 6392 */
#pragma pack(push, 2)
struct XAUDIOFXINFO
{
  char DataFlow;
  unsigned __int16 TrailFrames;
};
#pragma pack(pop)

/* 6393 */
struct IXAudioFrameBuffer
{
  char dummy[1];
};

/* 6394 */
struct IXAudioEffectVtbl
{
  unsigned int (__cdecl *AddRef)(IXAudioEffect *);
  unsigned int (__cdecl *Release)(IXAudioEffect *);
  HRESULT (__cdecl *GetInfo)(IXAudioEffect *, XAUDIOFXINFO *);
  HRESULT (__cdecl *GetParam)(IXAudioEffect *, char, char, XAUDIOFXPARAM *);
  HRESULT (__cdecl *SetParam)(IXAudioEffect *, char, char, XAUDIOFXPARAM *);
  HRESULT (__cdecl *GetContext)(IXAudioEffect *, void **);
  HRESULT (__cdecl *Process)(IXAudioEffect *, IXAudioFrameBuffer *, IXAudioFrameBuffer *);
};

/* 6395 */
struct __declspec(align(4)) XAUDIOSOURCEFXFORMATPARAM
{
  XAUDIOSOURCEFORMAT Format;
  char Flags;
};

/* 6396 */
union $E11A6C8BBA3CE4EA1DBED1D138B03412
{
  LOCALTALKER *LocalTalker;
  REMOTETALKER *RemoteTalker;
};

/* 6397 */
struct PROCMODE
{
  IProcModeVtbl *lpVtbl;
  $E11A6C8BBA3CE4EA1DBED1D138B03412 ___u1;
  CODEC_PROCESSOR *Codec;
  unsigned int QueueIndex;
  PACKET_BUFFER *Packets;
  unsigned int NumPackets;
  int Running;
  PROCMODE_ID ModeID;
};

/* 6398 */
struct __declspec(align(8)) JITTERBUF
{
  PACKET_BUFFER *Buffer;
  PACKET_CONTEXT *Contexts;
  unsigned int NumPackets;
  __declspec(align(8)) unsigned __int64 LogicalOutputTime;
  unsigned __int64 RealStartOutputTime;
  unsigned __int16 InitialSeqNo;
  __declspec(align(8)) unsigned __int64 HighWaterMark;
  unsigned __int64 InitialHighWaterMark;
  __int64 HangTime;
  unsigned __int16 HWMSeqCount;
  unsigned __int16 MaxSeqCount;
  unsigned __int16 MinSeqCount;
  __declspec(align(4)) int StartTiming;
  __declspec(align(8)) double HighWaterMarkQuality[25];
  double IdealQuality;
  double FrameStrength;
  double CurrentTalkspurtWeighting;
  unsigned int FramesInTalkspurtCount;
  char CurrentTalkspurtID;
  __declspec(align(4)) unsigned int ErrorCount;
  unsigned int LostPackets;
  unsigned int PacketsPlayed;
  __declspec(align(8)) _LARGE_INTEGER PerfFreq;
  int Synchronized;
  char BackupBuffer[10];
  __declspec(align(4)) int BackupFull;
  unsigned int CurrentOOSPackets;
  unsigned int MaxOOSPackets;
  PACKET_QUEUE FreePackets;
  PACKET_QUEUE InUsePackets;
  PACKET_QUEUE InFlightPackets;
  unsigned int SubmitAllPackets;
  CODEC_PROCESSOR *Codec;
};

/* 6399 */
struct $54DE4D7BD7E2893642260F22030151A5
{
  IProcModeVtbl *lpVtbl;
  LOCALTALKER *LocalTalker;
  CODEC_PROCESSOR *Codec;
  unsigned int QueueIndex;
  PACKET_BUFFER *Packets;
  unsigned int NumPackets;
  int Running;
  PROCMODE_ID ModeID;
};

/* 6400 */
struct $B856C490797DF1482C446F138F20ECF5
{
  _BYTE gap0[4];
  REMOTETALKER *RemoteTalker;
};

/* 6401 */
union $E0414144B77B8F4E4BFC5669DF57CA86
{
  PROCMODE ProcMode;
  $54DE4D7BD7E2893642260F22030151A5 _s1;
  $B856C490797DF1482C446F138F20ECF5 _s2;
};

/* 6402 */
union $4A19CACFCEB93F05A9A681B297A44C24
{
  PACKET_QUEUE InNotification;
  PACKET_QUEUE InVoice;
};

/* 6403 */
#pragma pack(push, 2)
struct $6DF589125040C66A79F9B4A97839612A
{
  char LastTalkspurt;
  unsigned __int16 SequenceNumber;
};
#pragma pack(pop)

/* 6404 */
union $48A7BE681E1414EF9C1F81EFA636FBBF
{
  $6DF589125040C66A79F9B4A97839612A _s0;
  void *SourceVoice;
};

/* 6405 */
union $14905581E86EA665C1E62A9083F6A03D
{
  char Starved;
  int Discontinuity;
};

/* 6406 */
struct VOICECHAT_EXTENSION
{
  $E0414144B77B8F4E4BFC5669DF57CA86 ___u0;
  XHVENGINE *XHVEngine;
  int RemoteMode;
  PACKET_CONTEXT *Contexts;
  PACKET_QUEUE InCodec;
  $4A19CACFCEB93F05A9A681B297A44C24 ___u5;
  $48A7BE681E1414EF9C1F81EFA636FBBF ___u6;
  $14905581E86EA665C1E62A9083F6A03D ___u7;
  JITTERBUF *JitterBuf;
};

/* 6407 */
struct XAUDIOFXMGRINIT
{
  XAUDIOFXTABLE *pEffectTable;
};

/* 6408 */
#pragma pack(push, 4)
struct XAUDIOCHANNELVOLUMEENTRY
{
  char EntryIndex;
  float Volume;
};
#pragma pack(pop)

/* 6409 */
#pragma pack(push, 4)
struct XAUDIOCHANNELVOLUME
{
  char EntryCount;
  XAUDIOCHANNELVOLUMEENTRY *paEntries;
};
#pragma pack(pop)

/* 6410 */
struct XAUDIORENDERFXCALLBACK
{
  void *pEffectContext;
};

/* 6411 */
#pragma pack(push, 4)
struct XAUDIOFXUNREGISTER
{
  char EffectCount;
  const char *paEffectIds;
};
#pragma pack(pop)

/* 6412 */
#pragma pack(push, 4)
struct XAUDIOVOICEOUTPUTVOLUMEENTRY
{
  char OutputVoiceIndex;
  XAUDIOCHANNELVOLUME *pVolume;
};
#pragma pack(pop)

/* 6413 */
#pragma pack(push, 4)
struct XAUDIOVOICEOUTPUTVOLUME
{
  char EntryCount;
  XAUDIOVOICEOUTPUTVOLUMEENTRY *paEntries;
};
#pragma pack(pop)

/* 6414 */
struct XAUDIORENDERFXINIT
{
  XAUDIOFXINIT EffectHeader;
  void (__cdecl *pfnRenderCallback)(XAUDIORENDERFXCALLBACK *);
};

/* 6415 */
struct IXAudioBatchAllocatorVtbl
{
  unsigned int (__cdecl *AddRef)(IXAudioBatchAllocator *);
  unsigned int (__cdecl *Release)(IXAudioBatchAllocator *);
  void (__cdecl *GrowHeap)(IXAudioBatchAllocator *, unsigned int);
  HRESULT (__cdecl *CreateHeap)(IXAudioBatchAllocator *, unsigned int);
  unsigned int (__cdecl *GetFreeHeapSize)(IXAudioBatchAllocator *);
  void *(__cdecl *Alloc)(IXAudioBatchAllocator *, unsigned int);
};

/* 6416 */
struct tWAVEFORMATEX
{
  unsigned __int16 wFormatTag;
  unsigned __int16 nChannels;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
  unsigned __int16 wBitsPerSample;
  unsigned __int16 cbSize;
};

/* 6417 */
struct IXHVExternalCodec
{
  IXHVExternalCodecVtbl *lpVtbl;
};

/* 6418 */
struct $2B95C998A3AD6AD787EA722F8373D9EC
{
  unsigned int LoopStart;
  unsigned int LoopLength;
};

/* 6419 */
union $87B9C93BA640466D00C5CC5A26A2E74E
{
  $2B95C998A3AD6AD787EA722F8373D9EC _s0;
  XMALOOPREGION XMALoop[6];
};

/* 6420 */
struct XAUDIOPACKET
{
  void *pBuffer;
  unsigned int BufferSize;
  unsigned int LoopCount;
  $87B9C93BA640466D00C5CC5A26A2E74E ___u3;
  void *pContext;
};

/* 6421 */
struct IXHVExternalCodecVtbl
{
  HRESULT (__cdecl *Record)(IXHVExternalCodec *, void *, unsigned int *);
  HRESULT (__cdecl *Flush)(IXHVExternalCodec *);
  HRESULT (__cdecl *Playback)(IXHVExternalCodec *, XAUDIOPACKET *, int *, char *, unsigned int *);
  HRESULT (__cdecl *PlaybackDone)(IXHVExternalCodec *, void *);
};

/* 6422 */
struct XAUDIODRVRENDERFXCALLBACK
{
  void *pEffectContext;
};

/* 6423 */
#pragma pack(push, 8)
struct UVBASE_CALLBACKUSERTOVOICECHATPARAM
{
  unsigned int dwUserIndex;
  unsigned __int64 Xuid;
};
#pragma pack(pop)

/* 6424 */
struct IXAudioSourceEffect
{
  IXAudioEffect baseclass_0;
};

/* 6425 */
struct XAUDIOSOURCEBUFFER
{
  void *pBuffer;
  unsigned int BufferSize;
  unsigned int LoopCount;
  unsigned int LoopBegin;
  unsigned int LoopEnd;
  unsigned int PlayBegin;
  unsigned int PlayEnd;
  void *pContext;
};

/* 6426 */
#pragma pack(push, 4)
struct XMAPACKETPOSITION
{
  unsigned int ReadOffset;
  unsigned __int16 SampleIndex;
};
#pragma pack(pop)

/* 6427 */
union XAUDIOPACKETPOSITION
{
  unsigned int Position;
  XMAPACKETPOSITION XMAPosition[6];
};

/* 6428 */
struct IXAudioSourceEffectVtbl
{
  unsigned int (__cdecl *AddRef)(IXAudioSourceEffect *);
  unsigned int (__cdecl *Release)(IXAudioSourceEffect *);
  HRESULT (__cdecl *GetInfo)(IXAudioSourceEffect *, XAUDIOFXINFO *);
  HRESULT (__cdecl *GetParam)(IXAudioSourceEffect *, char, char, XAUDIOFXPARAM *);
  HRESULT (__cdecl *SetParam)(IXAudioSourceEffect *, char, char, XAUDIOFXPARAM *);
  HRESULT (__cdecl *GetContext)(IXAudioSourceEffect *, void **);
  HRESULT (__cdecl *Process)(IXAudioSourceEffect *, IXAudioFrameBuffer *, IXAudioFrameBuffer *);
  HRESULT (__cdecl *SubmitPacket)(IXAudioSourceEffect *, XAUDIOPACKET *, char);
  HRESULT (__cdecl *FlushPackets)(IXAudioSourceEffect *);
  HRESULT (__cdecl *SubmitSourceBuffer)(IXAudioSourceEffect *, XAUDIOSOURCEBUFFER *, char);
  HRESULT (__cdecl *FlushSourceBuffers)(IXAudioSourceEffect *);
  HRESULT (__cdecl *GetState)(IXAudioSourceEffect *, char *);
  HRESULT (__cdecl *Start)(IXAudioSourceEffect *);
  HRESULT (__cdecl *Stop)(IXAudioSourceEffect *, char);
  HRESULT (__cdecl *Discontinuity)(IXAudioSourceEffect *);
  HRESULT (__cdecl *GetPacketPosition)(IXAudioSourceEffect *, XAUDIOPACKETPOSITION *);
  HRESULT (__cdecl *SetPacketPosition)(IXAudioSourceEffect *, XAUDIOPACKETPOSITION *);
  HRESULT (__cdecl *GetPacketLoopCount)(IXAudioSourceEffect *, unsigned int *);
  HRESULT (__cdecl *SetPacketLoopCount)(IXAudioSourceEffect *, unsigned int);
  HRESULT (__cdecl *GetPacketContext)(IXAudioSourceEffect *, void **);
  HRESULT (__cdecl *GetStreamPosition)(IXAudioSourceEffect *, unsigned int *);
  HRESULT (__cdecl *GetVolume)(IXAudioSourceEffect *, float *);
  HRESULT (__cdecl *SetVolume)(IXAudioSourceEffect *, float);
  HRESULT (__cdecl *GetPitch)(IXAudioSourceEffect *, float *);
  HRESULT (__cdecl *SetPitch)(IXAudioSourceEffect *, float);
  HRESULT (__cdecl *GetFrequencyScale)(IXAudioSourceEffect *, float *);
  HRESULT (__cdecl *SetFrequencyScale)(IXAudioSourceEffect *, float);
  HRESULT (__cdecl *GetFormat)(IXAudioSourceEffect *, XAUDIOSOURCEFORMAT *, char *);
  HRESULT (__cdecl *SetFormat)(IXAudioSourceEffect *, XAUDIOSOURCEFORMAT *, char);
};

/* 6429 */
struct IXAudioEffectManager
{
  char dummy[1];
};

/* 6430 */
#pragma pack(push, 4)
struct XAUDIOROUTERFXINIT
{
  XAUDIOFXINIT EffectHeader;
  char ChannelMapEntryCount;
  char Mode;
  XAUDIOCHANNELMAP *pChannelMap;
};
#pragma pack(pop)

/* 6431 */
struct $2868055BD0DF8AD66A2826F7A783C147
{
  int Status;
  unsigned int Offset;
  char *Buffer;
  unsigned int Length;
  unsigned int Resrvd;
  XMEDIAFORMAT Format;
};

/* 6432 */
union $CDC95A5DD0B16523DD1852870FA5B393
{
  XMEDIAPACKET XMediaPacket;
  $2868055BD0DF8AD66A2826F7A783C147 _s1;
};

/* 6433 */
struct MPPACKET
{
  $CDC95A5DD0B16523DD1852870FA5B393 ___u0;
  unsigned int NumCodecsPending;
};

/* 6434 */
#pragma pack(push, 8)
struct UVBASE_SWITCHTOVOICECHATPARAM
{
  unsigned int dwUserIndex;
  unsigned __int64 Xuid;
  int fSuppressRemoteUINotification;
};
#pragma pack(pop)

/* 6435 */
struct UVBASE_SESSION_INFO
{
  XNADDR xnAddr;
  XNKID xnKid;
  XNKEY xnKey;
  unsigned __int16 wPort;
};

/* 6436 */
struct IXAudioRenderEffect
{
  IXAudioEffect baseclass_0;
};

/* 6437 */
struct IXAudioRenderEffectVtbl
{
  unsigned int (__cdecl *AddRef)(IXAudioRenderEffect *);
  unsigned int (__cdecl *Release)(IXAudioRenderEffect *);
  HRESULT (__cdecl *GetInfo)(IXAudioRenderEffect *, XAUDIOFXINFO *);
  HRESULT (__cdecl *GetParam)(IXAudioRenderEffect *, char, char, XAUDIOFXPARAM *);
  HRESULT (__cdecl *SetParam)(IXAudioRenderEffect *, char, char, XAUDIOFXPARAM *);
  HRESULT (__cdecl *GetContext)(IXAudioRenderEffect *, void **);
  HRESULT (__cdecl *Process)(IXAudioRenderEffect *, IXAudioFrameBuffer *, IXAudioFrameBuffer *);
  HRESULT (__cdecl *SetCallback)(IXAudioRenderEffect *, void (__cdecl *)(XAUDIORENDERFXCALLBACK *));
};

/* 6438 */
#pragma pack(push, 2)
struct LOOPBACK_EXTENSION
{
  $E0414144B77B8F4E4BFC5669DF57CA86 ___u0;
  XHVENGINE *XHVEngine;
  unsigned int CurrentPacket;
  char LastTalkspurt;
  unsigned __int16 SequenceNumber;
  REMOTETALKER *LoopbackTalker;
};
#pragma pack(pop)

/* 6439 */
struct NCI_VOICE_PROPERTIES_BLOCK
{
  float fGain;
  float fPrediction[12];
  float fReflection[12];
};

/* 6440 */
struct XHVENGINECREATEPARAMS
{
  XHV_INIT_PARAMS *InitParams;
  void **WorkerThread;
  int NoWorkerThread;
};

/* 6441 */
struct XAUDIORENDERDRVCLIENT
{
  void (__cdecl *pfnCallback)(XAUDIODRVRENDERFXCALLBACK *);
  void *pContext;
};

/* 6442 */
struct XHVOUTPUTEFFECT
{
  IXAudioEffectVtbl *lpVtbl;
  unsigned int RefCount;
  XHVENGINE *XHVEngine;
  __int16 AccumBuffer[4][768];
  unsigned int AccumBufferIndex[4];
};

/* 6443 */
struct XMA2WAVEFORMAT
{
  char Version;
  char NumStreams;
  char RESERVED;
  char LoopCount;
  unsigned int LoopBegin;
  unsigned int LoopEnd;
  unsigned int SampleRate;
  unsigned int BlockSizeInBytes;
  unsigned int SamplesEncoded;
  unsigned int SamplesInSource;
  unsigned int BlockCount;
  XMA2STREAMFORMAT Streams[1];
};

/* 6444 */
struct UVBASE_CREATEVOICEMAILPARAM
{
  unsigned int dwUserIndex;
  IXHVExternalCodec *pVoicemailCodec;
};

/* 6445 */
#pragma pack(push, 4)
struct XAUDIOSOURCEVOICEINIT
{
  XAUDIOSOURCEFORMAT Format;
  char Category;
  char MaxOutputVoiceCount;
  char MaxChannelMapEntryCount;
  char MaxPacketCount;
  float MaxPitchShift;
  char Flags;
  XAUDIOVOICEFXCHAIN *pEffectChain;
  XAUDIOVOICEOUTPUT *pVoiceOutput;
  void (__cdecl *pfnProcessCallback)(XAUDIOVOICEPROCESSCALLBACK *);
  void (__cdecl *pfnPacketCompletionCallback)(XAUDIOVOICEPACKETCALLBACK *);
  void (__cdecl *pfnPacketLoopCallback)(XAUDIOVOICEPACKETCALLBACK *);
  void *pContext;
};
#pragma pack(pop)

/* 6446 */
#pragma pack(push, 2)
struct XAUDIOSUBMIXVOICEINIT
{
  XAUDIOFORMAT Format;
  char MaxOutputVoiceCount;
  char MaxChannelMapEntryCount;
  char SubmixStage;
  XAUDIOVOICEFXCHAIN *pEffectChain;
  XAUDIOVOICEOUTPUT *pVoiceOutput;
  void (__cdecl *pfnProcessCallback)(XAUDIOVOICEPROCESSCALLBACK *);
  void *pContext;
};
#pragma pack(pop)

/* 6447 */
#pragma pack(push, 8)
struct UVBASE_QUITVOICECHATPARAM
{
  unsigned int dwUserIndex;
  unsigned __int64 Xuid;
};
#pragma pack(pop)

/* 6448 */
struct XAUDIOFRAMEBUFDATA
{
  XAUDIOFORMAT Format;
  float *pSampleBuffer;
};

/* 6449 */
struct JBPACKET
{
  $CDC95A5DD0B16523DD1852870FA5B393 ___u0;
  unsigned __int64 Timestamp;
};

/* 6450 */
struct XAUDIOREVERBI3DL2SETTINGS
{
  int lRoom;
  int lRoomHF;
  float flRoomRolloffFactor;
  float flDecayTime;
  float flDecayHFRatio;
  int lReflections;
  float flReflectionsDelay;
  int lReverb;
  float flReverbDelay;
  float flDiffusion;
  float flDensity;
  float flHFReference;
};

/* 6451 */
#pragma pack(push, 4)
struct XAUDIOFXREGISTER
{
  char EffectCount;
  XAUDIOFXTABLEENTRY *paEffects;
};
#pragma pack(pop)

/* 6452 */
struct IXAudioRouterEffect
{
  IXAudioEffect baseclass_0;
};

/* 6453 */
#pragma pack(push, 4)
struct NCI_CODEC_INFO_BLOCK
{
  unsigned __int16 wNCIVersion;
  char sCodecVersion[32];
  unsigned int dwCodecClassID;
  unsigned int dwCodecID;
  unsigned __int16 wExpires;
  unsigned __int16 wSamplingRate;
  unsigned __int16 wNumBitsPerSample;
  unsigned __int16 wNumSamplesPerFrame;
  unsigned __int16 wNumChannels;
  unsigned __int16 wInterleaveBlockSize;
  unsigned int dwBitRate;
  unsigned int dwMinPacketBits;
  unsigned int dwAvgPacketBits;
  unsigned int dwMaxPacketBits;
  unsigned __int16 wNumPrimeFlushFrames;
  unsigned __int16 wNumPrimeFlushSamples;
};
#pragma pack(pop)

/* 6454 */
struct SHORTLE
{
  unsigned __int16 value;
};

/* 6455 */
struct UVBASE_ENUMERATECHANNELSPARAM
{
  UVCHANNELINFO *pChannelInfo;
};

/* 6456 */
#pragma pack(push, 4)
struct UVBASE_CONNECTTOVOICECHATPARAM
{
  unsigned int dwChannelIndex;
  unsigned int dwUserIndex;
  unsigned __int64 Xuid;
  char szGamertag[16];
  UVBASE_SESSION_INFO SessionInfo;
};
#pragma pack(pop)

/* 6457 */
struct IXAudioRouterEffectVtbl
{
  unsigned int (__cdecl *AddRef)(IXAudioRouterEffect *);
  unsigned int (__cdecl *Release)(IXAudioRouterEffect *);
  HRESULT (__cdecl *GetInfo)(IXAudioRouterEffect *, XAUDIOFXINFO *);
  HRESULT (__cdecl *GetParam)(IXAudioRouterEffect *, char, char, XAUDIOFXPARAM *);
  HRESULT (__cdecl *SetParam)(IXAudioRouterEffect *, char, char, XAUDIOFXPARAM *);
  HRESULT (__cdecl *GetContext)(IXAudioRouterEffect *, void **);
  HRESULT (__cdecl *Process)(IXAudioRouterEffect *, IXAudioFrameBuffer *, IXAudioFrameBuffer *);
  HRESULT (__cdecl *GetMode)(IXAudioRouterEffect *, char *);
  HRESULT (__cdecl *SetMode)(IXAudioRouterEffect *, char);
  HRESULT (__cdecl *GetChannelMap)(IXAudioRouterEffect *, XAUDIOCHANNELMAP *, unsigned int, unsigned int *);
  HRESULT (__cdecl *SetChannelMap)(IXAudioRouterEffect *, XAUDIOCHANNELMAP *);
  HRESULT (__cdecl *GetChannelVolume)(IXAudioRouterEffect *, XAUDIOCHANNELVOLUME *);
  HRESULT (__cdecl *SetChannelVolume)(IXAudioRouterEffect *, XAUDIOCHANNELVOLUME *);
};

/* 6458 */
struct XAUDIOPIXCOUNTERS
{
  int ActiveVoices_Total;
  int ActiveVoices_Submix;
  int ActiveVoices_Source;
  int ActiveVoices_PCM;
  int ActiveVoices_XMA;
  int XMA_SamplesReady;
  int XMA_SamplesUsed;
};

/* 6459 */
#pragma pack(push, 4)
struct NCI_CODEC_IO_BLOCK
{
  __int16 *pPCMBuffer;
  unsigned __int16 wSamplesInPCMBuffer;
  char *pNellyBuffer;
  unsigned __int16 wNellyBufferSize;
  unsigned __int16 wNellyBufferReadByteOffset;
  char chNellyBufferReadBitOffset;
  unsigned __int16 wNellyBufferWriteByteOffset;
  char chNellyBufferWriteBitOffset;
};
#pragma pack(pop)

/* 6460 */
struct NMCodecPerfStruct
{
  __int64 minTicks;
  __int64 avgTicks;
  __int64 maxTicks;
  __int64 cpuTicks;
  int ticksPerSecond;
  unsigned int count;
};

/* 6461 */
struct UVBASE_ENUMERATEVOICECHATSPARAM
{
  unsigned int dwUserIndex;
  VOICECHATINFO *pVoiceChats;
  unsigned int *pdwUsed;
};

/* 6462 */
union $F129ED7EE6BF3DB3C8693BD4ADC6673E
{
  float Beta;
  float Sigma;
  float Lobe;
};

/* 6463 */
struct _D3DFILTER_PARAMETERS
{
  float Nyquist;
  float FlickerFilter;
  $F129ED7EE6BF3DB3C8693BD4ADC6673E ___u2;
};

/* 6464 */
struct _D3DPRIVATE_RECT
{
  int x1;
  int y1;
  int x2;
  int y2;
};

/* 6465 */
struct XConfigStatisticSettings
{
  char dummy[1];
};

/* 6466 */
struct _D3DPRIVATE_SCALER_PARAMETERS
{
  _D3DPRIVATE_RECT ScalerSourceRect;
  unsigned int ScaledOutputWidth;
  unsigned int ScaledOutputHeight;
  _D3DFILTER_TYPE VerticalFilterType;
  _D3DFILTER_PARAMETERS VerticalFilterParameters;
  _D3DFILTER_TYPE HorizontalFilterType;
  _D3DFILTER_PARAMETERS HorizontalFilterParameters;
};

/* 6467 */
struct XConfigXPlayerSettings
{
  char dummy[1];
};

/* 6468 */
struct _XBMOVIE_CAPTURE_FRAME_INFO
{
  unsigned int Identifier;
  unsigned int Flags;
  unsigned int VideoTimeStamp;
  unsigned int AudioSampleCount;
};

/* 6469 */
struct _CERTINIT
{
  unsigned int (__cdecl *g_pfnCertTell)(unsigned int, void *);
  void (__cdecl *g_pfnCertSetEvent)(_CertEvents);
  void *(__cdecl *g_pfnCertMemAlloc)(unsigned int);
  void *(__cdecl *g_pfnCertMemAllocNoZero)(unsigned int);
  void (__cdecl *g_pfnCertMemFree)(void *);
  void (__cdecl *g_pfnCertReadReq)(unsigned int, unsigned int);
  void (__cdecl *g_pfnCertReadComplete)(int);
};

/* 6470 */
struct XConfigConsoleSettings
{
  char dummy[1];
};

/* 6471 */
struct XConfigStaticSettings
{
  char dummy[1];
};

/* 6472 */
struct XConfigMediaCenterSettings
{
  char dummy[1];
};

/* 6473 */
struct XConfigSecuredSettings
{
  char dummy[1];
};

/* 6474 */
struct D3D::WorkerState
{
  unsigned int TilingFlags;
  unsigned int Tiles;
  _D3DRECT TileRects[15];
};

/* 6475 */
struct D3D::RingBufferState
{
  unsigned int *pRing;
  unsigned int *pRingLimit;
  unsigned int *pSegmentStart;
  unsigned int *pNextSecondaryStart;
  unsigned int *pRingAlloc;
  unsigned int RingWrap;
};

/* 6476 */
struct D3D::SegmentCallNode
{
  D3D::SegmentCallNode *m_pNext;
  unsigned int m_Count;
  D3D::SegmentCall m_Segment[];
};

/* 6477 */
struct D3D::SegmentCall
{
  unsigned int m_Address;
  unsigned int m_Count;
};

/* 6478 */
struct D3D::BeginShaderConstantData
{
  __vector4 m_EndShaderConstantF;
  __vector4 *m_pEndShaderConstantF;
  __vector4 *m_pCached;
  __vector4 *m_pWriteCombined;
  unsigned int m_Count;
};

/* 6479 */
struct D3D::CQueryBlock
{
  char m_Groups[8];
  unsigned int *m_pBlock;
  D3D::CQueryBlock *m_pNext;
};

/* 6480 */
struct D3D::WriteBacks
{
  unsigned int GpuFence;
  unsigned int GpuPosition;
  unsigned int SystemSwapWritebacks[4];
  unsigned int DumpLastTracePoint;
  unsigned int ScratchRegister;
  unsigned int Unused;
  unsigned int XpsWriteBack[6];
  unsigned int PrimaryRingBufferReadIndex;
  unsigned int XamGPUBuffer[8];
};

/* 6481 */
struct D3D::NonSnoopedWriteBacks
{
  unsigned int CallbackSemaphore;
  unsigned int PresentIntervalSemaphore;
  unsigned int Unused2;
  unsigned int CommandBufferAddress;
  unsigned int CallbackAddress;
  unsigned int CallbackContext;
  unsigned int PixMetaData;
  unsigned int CommandBufferMarker;
};

/* 6482 */
struct D3D::RingAllocChunk
{
  unsigned int *pEnd;
  unsigned int Data[3];
};

/* 6483 */
struct D3D::CXpsGlobal
{
  XpsGlobal baseclass_0;
  int _bf40;
  unsigned int Tile;
  int ActiveThreads;
  volatile int Working;
  volatile int Queues;
  unsigned int QueueLock;
  _KEVENT Done;
  unsigned int *pResumePoint;
  D3D::RingAllocChunk *pQueue;
  D3D::RingAllocChunk *pNextQueue;
  D3D::RingAllocChunk EmptyChunk;
  volatile int Drain;
  void *pBuffer;
  D3D::WorkerState State;
  unsigned int PredicationSelect;
  unsigned int *pZPassCommand;
  unsigned int *pInvokePassCommand;
  unsigned int *pTilingCommand;
  unsigned int DefaultThread;
};

/* 6484 */
struct D3D::CXpsThread
{
  XpsThread baseclass_0;
  _KEVENT Event;
  _KTHREAD *pKThread;
  unsigned int ThreadId;
};

/* 6485 */
union $42276396F8D5510932C34AB3DEF7190D
{
  char m_StreamMask[16];
  unsigned __int64 m_StreamMask64[2];
};

/* 6486 */
struct __declspec(align(8)) D3D::CVertexDeclaration
{
  D3DVertexDeclaration baseclass_0;
  unsigned int m_Count;
  unsigned int m_MaxStream;
  $42276396F8D5510932C34AB3DEF7190D ___u3;
  unsigned int m_Uniqueness;
  _D3DVERTEXELEMENT9 m_Element[];
};

/* 6487 */
struct D3D::D3DPACKET_STATE
{
  GPU_BLENDCONTROL BlendControl;
  int _bf4;
};

/* 6488 */
struct D3D::CPixelShader
{
  D3DPixelShader baseclass_0;
  void *m_pPhysical;
  unsigned int m_Uniqueness;
  unsigned __int64 m_LastDeviceAndFrameNumberLoaded;
  _UCODE_HEADER m_Function[];
};

/* 6489 */
union $E1A12B0DA420E6CF769E423992244CA8
{
  char m_Stride[16];
  unsigned __int64 m_Stride64[2];
};

/* 6490 */
struct __declspec(align(8)) D3D::CVertexShader::PassData
{
  unsigned int m_VertexDeclarationUniqueness;
  __declspec(align(8)) $E1A12B0DA420E6CF769E423992244CA8 ___u1;
  unsigned int m_PatchFence;
  GPUVERTEX_FETCH_INSTRUCTION m_OriginalFetchInstructions[32];
};

/* 6491 */
struct D3D::CVertexShader
{
  D3DVertexShader baseclass_0;
  unsigned __int64 m_LastDeviceAndFrameNumberLoaded;
  void *m_pPhysical;
  unsigned int m_Uniqueness;
  D3D::CVertexShader::PassData m_Pass[2];
  _UCODE_HEADER m_Function[];
};

/* 6492 */
struct D3D::CRingAllocList
{
  D3D::RingAllocChunk *m_pFirstChunk;
  D3D::RingAllocChunk *m_pChunk;
  unsigned int *m_pData;
  unsigned int *m_pDataLimit;
  D3D::CDevice *m_pDevice;
};

/* 6493 */
struct D3D::BeginVerticesData
{
  unsigned int *pRing;
  void *pVertexData;
  void *pIndexData;
  unsigned int VertexDwords;
  unsigned int IndexDwords;
};

/* 6494 */
struct D3D::BufferResourceNode
{
  D3D::BufferResourceNode *m_pNext;
  int _bf4;
  D3D::BufferResource m_Resource[];
};

/* 6495 */
struct D3D::BufferResource
{
  int _bf0;
  unsigned int m_PredicationMask;
};

/* 6496 */
struct D3D::FixupRecord
{
  int _bf0;
  unsigned int Data[];
};

/* 6497 */
struct D3D::CCommandBuffer
{
  D3DCommandBuffer baseclass_0;
  unsigned int m_MagicOffset;
  int _bf108;
  D3D::BufferResourceNode *m_pBufferResources;
  D3D::SegmentCallNode *m_pSegments;
  D3D::RingAllocChunk *m_pPatches;
  unsigned int m_DynamicFixupIndex;
  unsigned int m_StaticFixupIndex;
  unsigned int m_TimestampedFixups;
  D3D::FixupRecord *m_pFixupWrite;
  D3D::FixupRecord *m_pFixupWriteLimit;
  D3D::FixupRecord *m_pFixupRead;
  D3D::FixupRecord *m_pStaticFixup;
  unsigned int *m_pPhysical;
  unsigned int m_PhysicalSize;
  D3D::CCommandBuffer *m_pNextGrowable;
  unsigned int m_Context;
  unsigned int m_SegmentSize;
  void *(__cdecl *m_pGrowableAllocateCallback)(unsigned int, unsigned int, unsigned int *, unsigned int);
  void (__cdecl *m_pGrowableFreeCallback)(unsigned int);
  void (__cdecl *m_pGrowableQueryCallback)(unsigned int, unsigned int *, unsigned int *);
};

/* 6498 */
struct D3D::SwapData
{
  unsigned int FlipAddress;
  unsigned int SwapVBlank;
};

/* 6499 */
struct D3D::CCapture
{
  D3D::CCaptureVtbl *vfptr;
  D3D::CCapture::HashMap hashMemoryMap;
  unsigned int m_Primitive;
  int _bf776;
  unsigned int m_Fence;
  unsigned int m_LastSaveFence;
  unsigned int m_VertexShaderBase;
  unsigned int m_PixelShaderBase;
  unsigned int m_VertexShaderSize;
  unsigned int m_PixelShaderSize;
  unsigned int m_FenceAddress;
  int m_WriteDataLock;
  unsigned int m_PixCaptureWorkerDpcContext;
  unsigned int m_PredicateMaskLo;
  unsigned int m_PredicateMaskHi;
  unsigned int m_PredicateSelectLo;
  unsigned int m_PredicateSelectHi;
  void (__cdecl *m_pCallback)(unsigned int);
  unsigned int m_CallbackContext;
};

/* 6500 */
struct $D1679FD29FBE3AB6C2B08EBF253769B5
{
  _BYTE gap0[4];
  HRESULT (__cdecl *End)(D3D::CCapture *this, GPUTEXTURE_FETCH_CONSTANT *);
};

/* 6501 */
struct $DD08869D1DDEA788F4EFA532620F461D
{
  _BYTE gap0[8];
  void (__cdecl *Initialize)(D3D::CCapture *this, unsigned int);
};

/* 6502 */
union $4B0804A016A142637D06799AFA2397FB
{
  HRESULT (__cdecl *Start)(D3D::CCapture *this);
  $D1679FD29FBE3AB6C2B08EBF253769B5 _s1;
  $DD08869D1DDEA788F4EFA532620F461D _s2;
};

/* 6503 */
struct D3D::CCaptureVtbl
{
  void (__cdecl *SavePages)(D3D::CCapture *this);
  void (__cdecl *ParseRegisters)(D3D::CCapture *this, unsigned int, void *, unsigned int);
  void (__cdecl *ShadowShaderProgram)(D3D::CCapture *this, unsigned int *, unsigned int, unsigned int, unsigned int);
  int (__cdecl *HandleType3Opcode)(D3D::CCapture *this, unsigned int, unsigned int *, unsigned int, int);
  void *(__cdecl *__vecDelDtor)(D3D::CCapture *this, unsigned int);
  void (__cdecl *MarkUsedPages)(D3D::CCapture *this, unsigned int, unsigned int, RecordResourceType);
  void (__cdecl *PreSubmit)(D3D::CCapture *this, void *, unsigned int, unsigned int);
  void (__cdecl *PostSubmit)(D3D::CCapture *this);
  $4B0804A016A142637D06799AFA2397FB ___u8;
};

/* 6504 */
struct D3D::CCapture::HashMap::ENTRY
{
  unsigned int val;
  unsigned int flags;
};

/* 6505 */
struct D3D::D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree>
{
  D3D::CCapture::HashMap::ENTRY *m_pData;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 6506 */
struct D3D::CCapture::HashMap
{
  D3D::D3DFastVector<D3D::CCapture::HashMap::ENTRY,&D3D::CCapture::HashMap::HashMemAlloc,&D3D::CCapture::HashMap::HashMemFree> pLists[64];
};

/* 6507 */
struct D3D::XBMContext
{
  void *pFrameData[2];
  char *pFrameAudioData;
  unsigned __int16 FrameSizeInSectors;
  unsigned __int16 FrameVideoSizeInSectors;
  unsigned int SwapTimeStamp;
  void *CaptureFile[41];
  unsigned int CaptureFileSize[41];
  _OVERLAPPED Overlapped;
  _BYTE gap170[4];
  int _bf372;
  unsigned int VertexCount;
  unsigned int CaptureFileOffset;
  unsigned int MaxFinalFileSegmentSize;
  unsigned int MaxExportIndex;
  _XMFLOAT4 ShaderConstant[12];
  unsigned int CaptureFrame;
  unsigned int CaptureFence;
  _D3DGAMMARAMP *pGammaRamp;
  _BYTE gap254[8];
  int _bf604;
  unsigned int XamFrontBufferBase;
};

/* 6508 */
union $44871FAAECEC3D0F6AF7C1EC70F28329
{
  char m_CurrentVertexShaderStride[16];
  unsigned __int64 m_CurrentVertexShaderStride64[2];
};

/* 6509 */
union $7460A114D80CBC070C9DA4B47AC27F57
{
  D3D::CVertexDeclaration m_FvfDeclaration;
  char m_DeclarationBuffer[236];
};

/* 6510 */
union $E4C0C8FCE552F6B8286F26B6877946FC
{
  char m_StreamStride[16];
  unsigned __int64 m_StreamStride64[2];
};

/* 6511 */
struct __declspec(align(128)) D3D::CDevice
{
  D3DDevice baseclass_0;
  unsigned __int64 m_Version;
  unsigned int m_ThreadId;
  int m_IsXamProcess;
  D3D::WriteBacks *m_pWriteBacks;
  D3D::NonSnoopedWriteBacks *m_pNonSnoopedWriteBacks;
  unsigned int CallbackSemaphoreLock;
  unsigned int m_CpuFence;
  unsigned int m_CommandBufferTimeStampMask;
  GPU_BCCONTROL m_BcControl;
  GPU_GPRMANAGEMENT m_GprManagement;
  GPU_INSTSTOREMANAGEMENT m_ShaderStoreManagement;
  unsigned int m_LastInsertFence;
  unsigned int m_TilePredication;
  unsigned int m_RunPredication;
  _BYTE gap2a3c[3];
  char _bf10815;
  D3D::CXpsGlobal m_XpsGlobal;
  D3D::CXpsThread m_XpsThread[6];
  void (__cdecl *m_pDebugXpsCallback)(XpsThread *, void *, const void *, unsigned int);
  D3D::CVertexDeclaration *m_pVertexDeclaration;
  unsigned __int64 m_AsynchronousInvalidateRange;
  $44871FAAECEC3D0F6AF7C1EC70F28329 ___u21;
  D3D::D3DPACKET_STATE m_StatePacket;
  int m_ScissorTestEnable;
  int m_ColorEnable[4];
  int m_ZEnable;
  int m_StencilEnable;
  int m_PointSpriteEnable;
  int m_PointScaleEnable;
  float m_PointSize;
  float m_PointSizeMin;
  float m_PointSizeMax;
  float m_PointScaleA;
  float m_PointScaleB;
  float m_PointScaleC;
  int m_SpecularEnable;
  unsigned int m_TextureFactor;
  char m_MaxAnisotropy[26];
  char m_MaxMipLevel[26];
  char m_MinMipLevel[26];
  char m_ZFilter[26];
  int m_HighPrecisionBlendEnable[4];
  __declspec(align(8)) unsigned __int64 m_ConditionalSurveyPending;
  char m_ConditionalSurveyStack[65];
  char m_ConditionalSurveyStackIndex;
  char m_ConditionalRenderStack[65];
  char m_ConditionalRenderStackIndex;
  __declspec(align(8)) $7460A114D80CBC070C9DA4B47AC27F57 ___u47;
  __declspec(align(8)) unsigned int m_FVF;
  D3DIndexBuffer *m_pIndexBuffer;
  D3DSurface *m_pRenderTarget[4];
  D3DSurface *m_pDepthStencilSurface;
  D3DVertexBuffer *m_pVertexBuffer[16];
  __declspec(align(8)) $E4C0C8FCE552F6B8286F26B6877946FC ___u53;
  D3DBaseTexture *m_Textures[26];
  _D3DVIEWPORTF9 m_Viewport;
  tagRECT m_Scissor;
  D3D::CPixelShader *m_pPixelShader;
  D3D::CVertexShader *m_pVertexShader;
  GPU_EDRAMMODECONTROL m_ZPassEdramModeControl;
  unsigned int m_ZPassFunc;
  unsigned int m_PredicationMaskLo;
  unsigned int m_PredicationMaskHi;
  unsigned int m_GpuPacket3Predication;
  unsigned int m_FirstPassSelect;
  D3DSurface *m_pTileSurface;
  D3DSurface *m_pTileSurfaces[4];
  D3DSurface *m_pTileDepthSurface;
  unsigned int m_Tiles;
  _D3DRECT m_TileRects[15];
  _D3DPOINT m_TileOffsets[15];
  unsigned int m_TileHiZOffsets[15];
  unsigned int m_TileHiZPitch;
  unsigned int m_TileZPassSurfacePitch;
  unsigned int m_TilingWidth;
  unsigned int m_TilingHeight;
  unsigned int m_TilingFlags;
  __vector4 m_TilingClearColor;
  float m_TilingClearZ;
  unsigned int m_TilingClearStencil;
  unsigned int m_WorkerBase;
  unsigned int m_WorkerSize;
  unsigned int *m_pStopPoint;
  unsigned int m_StopWrap;
  unsigned int *m_pFencePoint;
  unsigned int m_FenceWrap;
  D3D::CRingAllocList m_Patches;
  D3D::CRingAllocList m_Runs;
  D3D::CRingAllocList m_Queue;
  D3D::CRingAllocList m_PreviousQueue;
  D3D::RingBufferState m_SavedRingBufferState;
  void (__cdecl *m_pHangCallback)(const char *);
  void (__cdecl *m_pBlockCallback)(unsigned int, _D3DBLOCKTYPE, float, unsigned int);
  D3D::BracketType m_BracketType;
  D3D::BeginVerticesData m_BeginVertices;
  __declspec(align(16)) D3D::BeginShaderConstantData m_BeginShaderConstant;
  unsigned int m_ActiveExports;
  D3D::CCommandBuffer *m_pCommandBuffer;
  D3D::BufferResourceNode *m_pCurrentBufferResourceNode;
  D3D::BufferResource *m_pBufferResource;
  D3D::BufferResource *m_pBufferResourceEnd;
  D3D::SegmentCallNode *m_pCurrentSegmentCallNode;
  D3D::SegmentCall *m_pSegmentCall;
  D3D::SegmentCall *m_pSegmentCallEnd;
  _D3DPRESENT_PARAMETERS_ m_PresentParameters;
  _D3DPRIVATE_SCALER_PARAMETERS m_XamScalerParameters;
  _D3DPRIVATE_SCALER_PARAMETERS m_TitleScalerParameters;
  void *m_pGprAllocationBuffer;
  D3D::SegmentCall m_GprAllocationSetup;
  D3D::SegmentCall m_GprAllocationSet[128];
  D3D::SegmentCall m_GprAllocationDraw;
  D3DSurface *m_pAutoDepthBuffer;
  D3DBaseTexture *m_pAutoFrontBuffer;
  D3DSurface *m_pAutoBackBuffer;
  unsigned int *m_pAutoPrimaryRingBuffer;
  unsigned int *m_pAutoSecondaryRingBuffer;
  D3DBaseTexture m_FrontBuffer;
  unsigned int *m_pPrimaryRingBuffer;
  unsigned int m_PrimaryBufferWriteMask;
  unsigned int *m_pSecondaryRingBuffer;
  unsigned int *m_pSecondaryRingBufferLimit;
  unsigned int m_SegmentSize;
  unsigned int *m_pRingAlloc;
  unsigned int m_RingWrap;
  unsigned int *m_pNextSecondaryStart;
  unsigned int *m_pSegmentStart;
  unsigned int m_TotalSegmentAllocs;
  unsigned int m_SegmentAllocLimit;
  unsigned int m_Throttle;
  _RTL_CRITICAL_SECTION m_SuspendResumeCriticalSection;
  _RTL_CRITICAL_SECTION m_GrowableCriticalSection;
  D3D::CCommandBuffer *m_pGrowableList;
  _D3DGAMMARAMP m_GammaRamp;
  void (__cdecl *m_pSwapCallback)(_D3DSWAPDATA *);
  void (__cdecl *m_pVBlankCallback)(_D3DVBLANKDATA *);
  unsigned int m_VBlankCount;
  unsigned int m_LastVBlankTime;
  unsigned int m_LastSwapVBlank;
  unsigned int m_CpuSwapCount;
  unsigned int m_CpuSwapInterruptCount;
  volatile unsigned int m_GpuSwapCount;
  D3D::SwapData m_SwapQueue[16];
  unsigned int m_SwapQueueReader;
  unsigned int m_SwapQueueWriter;
  unsigned int m_SwapFlags;
  unsigned int m_SwapLock;
  unsigned int m_AvFlags;
  unsigned int m_nProfileFlags;
  HRESULT m_LastProfileResult;
  unsigned int *m_pRingOutOfMemoryBuffer;
  unsigned int m_XamOutOfMemoryBuffer[1200];
  D3D::CCapture *m_pCapture;
  int m_TimingCaptureActive;
  unsigned int m_DisplayWidth;
  unsigned int m_DisplayHeight;
  unsigned int m_ActualDisplayWidth;
  unsigned int m_RefreshRate;
  D3D::CQueryBlock m_QueryBlock;
  unsigned int m_FrameTicks;
  unsigned int m_FrameEndLow;
  unsigned int m_FrameEndHigh;
  float m_PerfFreq;
  float m_PerfPeriod;
  _LARGE_INTEGER m_TimeBlocked;
  _LARGE_INTEGER m_TimeThrottled;
  unsigned int m_BlockedTicks;
  unsigned int m_ThrottledTicks;
  unsigned int m_XamGPURead;
  unsigned int m_XamGPUWrite;
  int m_XamGPUEnabled;
  void *m_PerfCounters[4];
  unsigned int *m_pSwapStallTimeStamps;
  unsigned int m_PerfCounterStatus;
  unsigned int m_PerfCounterReadPtr;
  unsigned int m_PerfCounterWritePtr;
  unsigned int m_PerfCounterUpdateFrame;
  unsigned int m_XamCommandBufferSize;
  unsigned int m_PixEventLevel;
  void (__cdecl *m_pPIXHook)(unsigned int, void *, unsigned int, unsigned int);
  D3D::XBMContext m_XbmContext;
  unsigned int m_CreateDeviceFlags;
};

/* 6512 */
struct D3D::CParser
{
  unsigned int *m_pGet;
  unsigned int *m_pEnd;
  unsigned int *m_pPacket;
  unsigned int m_EncodeOp;
  unsigned int m_EncodeCount;
  unsigned int m_EncodeOpIncrement;
  unsigned int m_Flags;
};

/* 6513 */
struct D3D::ParseData
{
  unsigned int *pParameter;
  unsigned int Count;
  unsigned int ConstantIndex;
  int Predicate;
};

/* 6514 */
struct D3D::EnumDescription
{
  unsigned int Value;
  char *Name;
};

/* 6515 */
struct D3D::ParameterEnum
{
  unsigned int Flags;
  char *FieldName;
  unsigned int FieldMask;
  D3D::EnumDescription *pEnumDescriptions;
  unsigned int FieldLow;
  unsigned int FieldHigh;
};

/* 6516 */
#pragma pack(push, 4)
struct D3D::CValidate
{
  char m_PrintBuffer[513];
  char *m_pStream;
  void *m_pContext;
  void (__cdecl *m_pOutput)(const char *);
  unsigned int *(__cdecl *m_pGetMemory)(void *, unsigned int, unsigned int);
  void (__cdecl *m_pReleaseMemory)(void *, unsigned int *, unsigned int);
  unsigned int m_Flags;
  unsigned int m_Errors;
};
#pragma pack(pop)

/* 6517 */
struct D3D::CValidatePacket
{
  D3D::CValidate *m_pValidate;
  unsigned int m_Opcode;
  unsigned int *m_pRing;
  unsigned int m_Count;
};

/* 6518 */
struct D3D::CValidateMemory
{
  D3D::CValidate *m_pValidate;
  unsigned int m_Count;
  unsigned int *m_pMemory;
};

/* 6519 */
struct D3D::XpsObject
{
  XpsThread *m_pXpsContext;
  unsigned int m_EndPosition;
  unsigned int m_Wrap;
  unsigned int m_RingLimit;
  unsigned int *m_pRing;
  unsigned int *m_pRingStart;
  unsigned int *m_pNextCommand;
  unsigned int m_Thread;
  unsigned int m_WriteBackAddress;
  volatile unsigned int *m_pTail;
  void *m_pDebugLastAllocate;
  unsigned int *m_pDebugDeadbeef;
  XpsGlobal *m_pXpsGlobal;
  unsigned int *m_pPrimaryRingBuffer;
  volatile int *m_pCookie;
  unsigned int m_PrimaryRingBufferIndexMask;
  int m_IsWaternoose;
};

/* 6520 */
struct XConfigUserSettings
{
  char dummy[1];
};

/* 6521 */
struct XConfigDvdSettings
{
  char dummy[1];
};

/* 6522 */
struct X3DAUDIO_DISTANCE_CURVE_POINT
{
  float Distance;
  float DSPSetting;
};

/* 6523 */
struct X3DAUDIO_CONE
{
  float InnerAngle;
  float OuterAngle;
  float InnerVolume;
  float OuterVolume;
  float InnerLPF;
  float OuterLPF;
  float InnerReverb;
  float OuterReverb;
};

/* 6524 */
struct X3DAUDIO_DISTANCE_CURVE
{
  X3DAUDIO_DISTANCE_CURVE_POINT *pPoints;
  unsigned int PointCount;
};

/* 6525 */
struct X3DAUDIO_EMITTER
{
  X3DAUDIO_CONE *pCone;
  _D3DVECTOR OrientFront;
  _D3DVECTOR OrientTop;
  _D3DVECTOR Position;
  _D3DVECTOR Velocity;
  unsigned int ChannelCount;
  float ChannelRadius;
  float *pChannelAzimuths;
  X3DAUDIO_DISTANCE_CURVE *pVolumeCurve;
  X3DAUDIO_DISTANCE_CURVE *pLFECurve;
  X3DAUDIO_DISTANCE_CURVE *pLPFDirectCurve;
  X3DAUDIO_DISTANCE_CURVE *pLPFReverbCurve;
  X3DAUDIO_DISTANCE_CURVE *pReverbCurve;
  float CurveDistanceScaler;
  float DopplerScaler;
};

/* 6526 */
struct X3DAUDIO_DSP_SETTINGS
{
  float *pMatrixCoefficients;
  float *pDelayTimes;
  unsigned int SrcChannelCount;
  unsigned int DstChannelCount;
  float LPFDirectCoefficient;
  float LPFReverbCoefficient;
  float ReverbLevel;
  float DopplerFactor;
  float EmitterToListenerAngle;
  float EmitterToListenerDistance;
  float EmitterVelocityComponent;
  float ListenerVelocityComponent;
};

/* 6527 */
struct X3DAUDIO_LISTENER
{
  _D3DVECTOR OrientFront;
  _D3DVECTOR OrientTop;
  _D3DVECTOR Position;
  _D3DVECTOR Velocity;
};

/* 6528 */
struct X3DAUDIO_HANDLE_INTERNAL
{
  unsigned int u32SpeakerChannelMask;
  unsigned int u32FinalMixChannelCount;
  unsigned int u32FinalMixLFEChannelIndex;
  float fl32SpeedOfSound;
  float fl32MaxVelocityComponent;
};

/* 6529 */
struct XAUDIO::CMemoryTracker
{
  char dummy[1];
};

/* 6530 */
union XAUDIO::_XMA_WHEN_DONE
{
  unsigned int AsULONG;
};

/* 6531 */
union XAUDIO::_XMA_RESET_ENABLE
{
  unsigned int AsULONG;
};

/* 6532 */
union XAUDIO::_XMA_INTERRUPT
{
  unsigned int AsULONG;
};

/* 6533 */
union XAUDIO::_XMA_PARSER_DEBUG
{
  unsigned int AsULONG;
};

/* 6534 */
union XAUDIO::_XMA_CONTEXT
{
  unsigned int AsULONG;
};

/* 6535 */
union XAUDIO::_XMA_DEBUG
{
  unsigned int AsULONG;
};

/* 6536 */
struct XAUDIO::_XMA_REGISTERS
{
  unsigned int ContextAddress;
  XAUDIO::_XMA_RESET_ENABLE ResetEnable;
  XAUDIO::_XMA_INTERRUPT InterruptStatusRead;
  XAUDIO::_XMA_INTERRUPT InterruptEnableRead;
  XAUDIO::_XMA_WHEN_DONE WhenDoneRead;
  XAUDIO::_XMA_PARSER_DEBUG ParserDebug;
  XAUDIO::_XMA_CONTEXT CurrentContext;
  XAUDIO::_XMA_CONTEXT NextContext;
  XAUDIO::_XMA_DEBUG Debug;
  unsigned int Reserved0[7];
  unsigned int ValidContext0Read;
  unsigned int ValidContext1Read;
  unsigned int ValidContext2Read;
  unsigned int ValidContext3Read;
  unsigned int ValidContext4Read;
  unsigned int ValidContext5Read;
  unsigned int ValidContext6Read;
  unsigned int ValidContext7Read;
  unsigned int ValidContext8Read;
  unsigned int ValidContext9Read;
  unsigned int Reserved1[6];
  unsigned int ErrorContext0Read;
  unsigned int ErrorContext1Read;
  unsigned int ErrorContext2Read;
  unsigned int ErrorContext3Read;
  unsigned int ErrorContext4Read;
  unsigned int ErrorContext5Read;
  unsigned int ErrorContext6Read;
  unsigned int ErrorContext7Read;
  unsigned int ErrorContext8Read;
  unsigned int ErrorContext9Read;
  unsigned int Reserved2[24];
  XAUDIO::_XMA_INTERRUPT InterruptStatusSet;
  XAUDIO::_XMA_INTERRUPT InterruptEnableSet;
  XAUDIO::_XMA_WHEN_DONE WhenDoneSet;
  unsigned int Reserved3[11];
  unsigned int ValidContext0Set;
  unsigned int ValidContext1Set;
  unsigned int ValidContext2Set;
  unsigned int ValidContext3Set;
  unsigned int ValidContext4Set;
  unsigned int ValidContext5Set;
  unsigned int ValidContext6Set;
  unsigned int ValidContext7Set;
  unsigned int ValidContext8Set;
  unsigned int ValidContext9Set;
  unsigned int Reserved4[6];
  unsigned int ErrorContext0Set;
  unsigned int ErrorContext1Set;
  unsigned int ErrorContext2Set;
  unsigned int ErrorContext3Set;
  unsigned int ErrorContext4Set;
  unsigned int ErrorContext5Set;
  unsigned int ErrorContext6Set;
  unsigned int ErrorContext7Set;
  unsigned int ErrorContext8Set;
  unsigned int ErrorContext9Set;
  unsigned int Reserved5[24];
  XAUDIO::_XMA_INTERRUPT InterruptStatusClear;
  XAUDIO::_XMA_INTERRUPT InterruptEnableClear;
  XAUDIO::_XMA_WHEN_DONE WhenDoneClear;
  unsigned int Reserved6[11];
  unsigned int ValidContext0Clear;
  unsigned int ValidContext1Clear;
  unsigned int ValidContext2Clear;
  unsigned int ValidContext3Clear;
  unsigned int ValidContext4Clear;
  unsigned int ValidContext5Clear;
  unsigned int ValidContext6Clear;
  unsigned int ValidContext7Clear;
  unsigned int ValidContext8Clear;
  unsigned int ValidContext9Clear;
  unsigned int Reserved7[6];
  unsigned int ErrorContext0Clear;
  unsigned int ErrorContext1Clear;
  unsigned int ErrorContext2Clear;
  unsigned int ErrorContext3Clear;
  unsigned int ErrorContext4Clear;
  unsigned int ErrorContext5Clear;
  unsigned int ErrorContext6Clear;
  unsigned int ErrorContext7Clear;
  unsigned int ErrorContext8Clear;
  unsigned int ErrorContext9Clear;
};

/* 6537 */
struct XAUDIO::XAUDIOSRCPRIVATE
{
  float FrequencyRatio;
  float Position;
  float aSampleCache[6];
};

/* 6538 */
struct XAUDIO::XAUDIOSRCDEST
{
  float *pBuffer;
  unsigned int SampleCount;
  unsigned int SampleOffset;
  unsigned int SampleRate;
};

/* 6539 */
struct XAUDIO::CObjectRefCount
{
  XAUDIO::CObjectRefCountVtbl *vfptr;
  unsigned int m_nRefCount;
};

/* 6540 */
struct XAUDIO::CObjectRefCountVtbl
{
  void *(__cdecl *__vecDelDtor)(XAUDIO::CObjectRefCount *this, unsigned int);
  unsigned int (__cdecl *AddRef)(XAUDIO::CObjectRefCount *this);
  unsigned int (__cdecl *Release)(XAUDIO::CObjectRefCount *this);
  void (__cdecl *AbsoluteRelease)(XAUDIO::CObjectRefCount *this);
  unsigned int (__cdecl *GetRefCount)(XAUDIO::CObjectRefCount *this);
};

/* 6541 */
struct XAUDIO::CBatchAllocatedObject
{
  XAUDIO::CObjectRefCount baseclass_0;
  IXAudioBatchAllocator *m_pAllocator;
};

/* 6542 */
struct XAUDIO::CSafeListEntry
{
  _LIST_ENTRY baseclass_0;
};

/* 6543 */
#pragma pack(push, 2)
struct XAUDIO::XAUDIOVOICEFXCTX
{
  IXAudioEffect *pEffect;
  char EffectIndex;
  char EffectState;
  char DataFlow;
};
#pragma pack(pop)

/* 6544 */
struct XAUDIO::CSimpleRefCount
{
  unsigned int m_nRefCount;
};

/* 6545 */
struct __declspec(align(4)) XAUDIO::CVoice
{
  XAUDIO::CBatchAllocatedObject baseclass_0;
  const char m_VoiceType;
  __declspec(align(4)) XAUDIO::CSafeListEntry m_MasterVoiceListEntry;
  XAUDIO::CSafeListEntry m_ActiveVoiceListEntry;
  IXAudioFrameBuffer *m_pFrameBuffer;
  XAUDIO::XAUDIOVOICEFXCTX *m_paUserEffects;
  XAUDIO::CSimpleRefCount m_ActiveSubmixSourceCount;
  void (__cdecl *m_pfnProcessCallback)(XAUDIOVOICEPROCESSCALLBACK *);
  void *m_pVoiceContext;
  XAUDIOFORMAT m_VoiceFormat;
  char m_UserEffectCount;
  char m_VoiceState;
  unsigned __int16 m_MaxEffectTrailFrameCount;
  unsigned __int16 m_RemainingTrailFrameCount;
};

/* 6546 */
struct XAUDIO::XAUDIOVOICEROUTECTX
{
  XAUDIO::CVoice *pDestVoice;
  XAUDIO::XAUDIOVOICEFXCTX RouterEffect;
};

/* 6547 */
struct XAUDIO::XAUDIOSRCVOLUME
{
  float Current;
  float Target;
};

/* 6548 */
struct XAUDIO::CEmbeddedList<XAUDIO::XAUDIOPACKETCTX>
{
  _LIST_ENTRY baseclass_0;
  const unsigned int m_nEntryOffset;
};

/* 6549 */
struct XAUDIO::CPacketList
{
  XAUDIO::CEmbeddedList<XAUDIO::XAUDIOPACKETCTX> baseclass_0;
};

/* 6550 */
struct $740B2E56508FF506E64AD264D796B494
{
  void *pBuffer;
  unsigned int BufferSize;
  unsigned int LoopCount;
  unsigned int LoopBegin;
  unsigned int LoopEnd;
  unsigned int PlayBegin;
  unsigned int PlayEnd;
  void *pContext;
  XMALOOPREGION XMALoop[6];
};

/* 6551 */
struct XAUDIO::XAUDIOPACKETCTX
{
  _LIST_ENTRY ListEntry;
  $740B2E56508FF506E64AD264D796B494 Packet;
  unsigned int ID;
  char XMAInputBuffer;
  char bPlayBeginSet;
  char bPlayEndSet;
  char bPlayEndRewound;
};

/* 6552 */
struct XAUDIO::CPacketQueue
{
  XAUDIO::CPacketList m_PendingPacketList;
  XAUDIO::CPacketList m_FreePacketList;
  XAUDIO::XAUDIOPACKETCTX *m_paPackets;
  unsigned int m_LastID;
};

/* 6553 */
struct XAUDIO::CSourceStream
{
  XAUDIO::CSourceStreamVtbl *vfptr;
  XAUDIO::CPacketQueue m_PacketQueue;
  XAUDIOSOURCEFORMAT m_SourceFormat;
  unsigned __int16 m_SampleBlockAlignment;
  unsigned __int16 m_PacketAlignment;
  float m_Volume;
  float m_FreqScale;
  XAUDIOPACKETPOSITION m_PacketPosition;
  unsigned int m_dwStreamPosition;
  char m_State;
  char m_Flags;
  unsigned __int16 m_VolumeFadeFrameRemaining;
};

/* 6554 */
struct $2E6C9C317450A55B7420056883780B02
{
  _BYTE gap0[4];
  HRESULT (__cdecl *SubmitSourceBuffer)(XAUDIO::CSourceStream *this, XAUDIOSOURCEBUFFER *, char);
};

/* 6555 */
struct $F61E946A4CF858F184EB63973BD48A5F
{
  _BYTE gap0[8];
  HRESULT (__cdecl *FlushPackets)(XAUDIO::CSourceStream *this);
};

/* 6556 */
struct $A88833ABE3AC295030029D57E9F6894A
{
  _BYTE gap0[12];
  HRESULT (__cdecl *FlushSourceBuffers)(XAUDIO::CSourceStream *this);
};

/* 6557 */
struct $AFA9B86BDA322F5E210CFC2A1D2C9658
{
  _BYTE gap0[16];
  HRESULT (__cdecl *GetPacketLoopCount)(XAUDIO::CSourceStream *this, unsigned int *);
};

/* 6558 */
struct $46F7073461330DC15927F664B8B407B3
{
  _BYTE gap0[20];
  HRESULT (__cdecl *SetPacketLoopCount)(XAUDIO::CSourceStream *this, unsigned int);
};

/* 6559 */
struct $CA57212EDDDDEF973D233409D24A57A8
{
  _BYTE gap0[24];
  HRESULT (__cdecl *GetPacketContext)(XAUDIO::CSourceStream *this, void **);
};

/* 6560 */
struct $D4A4DA612930C42B2EECA55323427163
{
  _BYTE gap0[28];
  HRESULT (__cdecl *GetState)(XAUDIO::CSourceStream *this, char *);
};

/* 6561 */
struct $B699398799334D001E808C4A7D2E22F4
{
  _BYTE gap0[32];
  HRESULT (__cdecl *Start)(XAUDIO::CSourceStream *this);
};

/* 6562 */
struct $8332D082F2B043D698277B59CA325CBD
{
  _BYTE gap0[36];
  HRESULT (__cdecl *Stop)(XAUDIO::CSourceStream *this, char);
};

/* 6563 */
struct $9905EAF43C892177417A820AE34C1920
{
  _BYTE gap0[40];
  HRESULT (__cdecl *Discontinuity)(XAUDIO::CSourceStream *this);
};

/* 6564 */
struct $D38B61008346E987D177E1AF7F496474
{
  _BYTE gap0[44];
  HRESULT (__cdecl *GetFormat)(XAUDIO::CSourceStream *this, XAUDIOSOURCEFORMAT *, char *);
};

/* 6565 */
struct $38582D85D8866B600C9E72839479B1D8
{
  _BYTE gap0[48];
  HRESULT (__cdecl *SetFormat)(XAUDIO::CSourceStream *this, XAUDIOSOURCEFORMAT *, char);
};

/* 6566 */
struct $0926249AFAC77CBB22525BEB49CF2868
{
  _BYTE gap0[52];
  HRESULT (__cdecl *GetVolume)(XAUDIO::CSourceStream *this, float *);
};

/* 6567 */
struct $29CDF24AEED7647DEAD7229DF8507025
{
  _BYTE gap0[56];
  HRESULT (__cdecl *SetVolume)(XAUDIO::CSourceStream *this, float);
};

/* 6568 */
struct $41067FA14ED4B5DBEE5B8063FC3FA8D0
{
  _BYTE gap0[60];
  HRESULT (__cdecl *GetPitch)(XAUDIO::CSourceStream *this, float *);
};

/* 6569 */
struct $257D9740A9C81442A1F78A9C27F0529F
{
  _BYTE gap0[64];
  HRESULT (__cdecl *SetPitch)(XAUDIO::CSourceStream *this, float);
};

/* 6570 */
struct $51A81857393EF6962D2C9409F43AD33A
{
  _BYTE gap0[68];
  HRESULT (__cdecl *GetFrequencyScale)(XAUDIO::CSourceStream *this, float *);
};

/* 6571 */
struct $9630C5B878CF4D65BA3FB7554AA8EB35
{
  _BYTE gap0[72];
  HRESULT (__cdecl *SetFrequencyScale)(XAUDIO::CSourceStream *this, float);
};

/* 6572 */
struct $6F2E1F1859DBD9FFD8A87086BD67DCEA
{
  _BYTE gap0[76];
  void (__cdecl *SetState)(XAUDIO::CSourceStream *this, char, char);
  HRESULT (__cdecl *GetCurrentPacket)(XAUDIO::CSourceStream *this, XAUDIO::XAUDIOPACKETCTX **);
};

/* 6573 */
struct $B92096CBED2A508390ACC9A6C01BA80B
{
  _BYTE gap0[84];
  XAUDIO::XAUDIOPACKETCTX *(__cdecl *CompletePacket)(XAUDIO::CSourceStream *this, XAUDIO::XAUDIOPACKETCTX *, int);
};

/* 6574 */
union $D844613017D038B1D7FFF0B32370DEED
{
  HRESULT (__cdecl *SubmitPacket)(XAUDIO::CSourceStream *this, XAUDIOPACKET *, char);
  $2E6C9C317450A55B7420056883780B02 _s1;
  $F61E946A4CF858F184EB63973BD48A5F _s2;
  $A88833ABE3AC295030029D57E9F6894A _s3;
  $AFA9B86BDA322F5E210CFC2A1D2C9658 _s4;
  $46F7073461330DC15927F664B8B407B3 _s5;
  $CA57212EDDDDEF973D233409D24A57A8 _s6;
  $D4A4DA612930C42B2EECA55323427163 _s7;
  $B699398799334D001E808C4A7D2E22F4 _s8;
  $8332D082F2B043D698277B59CA325CBD _s9;
  $9905EAF43C892177417A820AE34C1920 _s10;
  $D38B61008346E987D177E1AF7F496474 _s11;
  $38582D85D8866B600C9E72839479B1D8 _s12;
  $0926249AFAC77CBB22525BEB49CF2868 _s13;
  $29CDF24AEED7647DEAD7229DF8507025 _s14;
  $41067FA14ED4B5DBEE5B8063FC3FA8D0 _s15;
  $257D9740A9C81442A1F78A9C27F0529F _s16;
  $51A81857393EF6962D2C9409F43AD33A _s17;
  $9630C5B878CF4D65BA3FB7554AA8EB35 _s18;
  $6F2E1F1859DBD9FFD8A87086BD67DCEA _s19;
  $B92096CBED2A508390ACC9A6C01BA80B _s20;
};

/* 6575 */
struct XAUDIO::CSourceStreamVtbl
{
  void *(__cdecl *__vecDelDtor)(XAUDIO::CSourceStream *this, unsigned int);
  void (__cdecl *Initialize)(XAUDIO::CSourceStream *this, XAUDIOSOURCEFORMAT *, char, char, IXAudioBatchAllocator *);
  $D844613017D038B1D7FFF0B32370DEED ___u2;
};

/* 6576 */
#pragma pack(push, 4)
struct XAUDIO::XAUDIOCHANNELMAPENTRYEX
{
  char InputChannel;
  char OutputChannel;
  float CurrentVolume;
  float TargetVolume;
};
#pragma pack(pop)

/* 6577 */
struct XAUDIO::CFileStream
{
  XAUDIO::CFileStreamVtbl *vfptr;
};

/* 6578 */
struct $C14D06EED8D5557B3FC65C6F94DB2FD4
{
  _BYTE gap0[4];
  void (__cdecl *Close)(XAUDIO::CFileStream *this);
  int (__cdecl *IsValid)(XAUDIO::CFileStream *this);
  HRESULT (__cdecl *Read)(XAUDIO::CFileStream *this, void *, unsigned int, unsigned int *, _OVERLAPPED *, int);
};

/* 6579 */
struct $DBEF806BBE784E1E7B7992117ADFA41C
{
  _BYTE gap0[16];
  HRESULT (__cdecl *Write)(XAUDIO::CFileStream *this, const void *, unsigned int, unsigned int *, _OVERLAPPED *);
};

/* 6580 */
struct $05CFA87B46E513D8DD82915693DC90A1
{
  _BYTE gap0[20];
  HRESULT (__cdecl *Seek)(XAUDIO::CFileStream *this, int, unsigned int, unsigned int *);
};

/* 6581 */
struct $68D0E3D02F09074EE9085F78D241076B
{
  _BYTE gap0[24];
  HRESULT (__cdecl *SetEOF)(XAUDIO::CFileStream *this);
};

/* 6582 */
struct $5F457478FCF419ADC287B77E65D79250
{
  _BYTE gap0[28];
  HRESULT (__cdecl *GetLength)(XAUDIO::CFileStream *this, unsigned int *);
};

/* 6583 */
union $67F88A25C4F8E4142F6FAE5A699C7203
{
  HRESULT (__cdecl *Open)(XAUDIO::CFileStream *this, const char *, unsigned int, unsigned int, unsigned int, unsigned int);
  $C14D06EED8D5557B3FC65C6F94DB2FD4 _s1;
  $DBEF806BBE784E1E7B7992117ADFA41C _s2;
  $05CFA87B46E513D8DD82915693DC90A1 _s3;
  $68D0E3D02F09074EE9085F78D241076B _s4;
  $5F457478FCF419ADC287B77E65D79250 _s5;
};

/* 6584 */
struct XAUDIO::CFileStreamVtbl
{
  $67F88A25C4F8E4142F6FAE5A699C7203 ___u0;
};

/* 6585 */
struct XAUDIO::CWaveFileWriter
{
  XAUDIO::CWaveFileWriterVtbl *vfptr;
  XAUDIO::CFileStream *m_pStream;
  tWAVEFORMATEX *m_pwfxFormat;
  unsigned int m_dwFormatSize;
  void *m_pvWaveHeader;
  unsigned int m_dwWaveHeaderSize;
  unsigned int m_dwWritten;
};

/* 6586 */
struct XAUDIO::CWaveFileWriterVtbl
{
  void *(__cdecl *__vecDelDtor)(XAUDIO::CWaveFileWriter *this, unsigned int);
};

/* 6587 */
struct XAUDIO::XAUDIOSRCSOURCE
{
  const void *pBuffer;
  unsigned int SampleCount;
  unsigned int SampleOffset;
  XAUDIOFORMAT Format;
};

/* 6588 */
struct XAUDIO::XAUDIOSRCHDR
{
  XAUDIO::XAUDIOSRCSOURCE Source;
  XAUDIO::XAUDIOSRCDEST Dest;
  XAUDIO::XAUDIOSRCVOLUME Volume;
  XAUDIO::XAUDIOSRCPRIVATE Private;
};

/* 6589 */
struct XAUDIO::CIrql
{
  char dummy[1];
};

/* 6590 */
#pragma pack(push, 4)
struct XAUDIO::CRoutedVoice
{
  XAUDIO::CVoice baseclass_0;
  char m_MaxOutputVoiceCount;
  char m_OutputVoiceCount;
  XAUDIO::XAUDIOVOICEROUTECTX *m_paRoutingCtx;
};
#pragma pack(pop)

/* 6591 */
#pragma pack(push, 4)
struct XAUDIO::CSourceVoice
{
  XAUDIO::CRoutedVoice baseclass_0;
  XAUDIO::XAUDIOVOICEFXCTX m_SourceEffect;
  XAUDIOSOURCEFORMAT m_SourceVoiceFormat;
  float m_Volume;
  char m_Category;
};
#pragma pack(pop)

/* 6592 */
struct IXAudioSourceVoice
{
  IXAudioVoice baseclass_0;
};

/* 6593 */
struct XAUDIO::XAUDIOVOICEINIT
{
  XAUDIOFORMAT Format;
  XAUDIOVOICEFXCHAIN *pEffectChain;
  IXAudioFrameBuffer *pFrameBuffer;
  void (__cdecl *pfnProcessCallback)(XAUDIOVOICEPROCESSCALLBACK *);
  void *pVoiceContext;
};

/* 6594 */
#pragma pack(push, 4)
struct XAUDIO::XAUDIOROUTEDVOICEINIT
{
  XAUDIO::XAUDIOVOICEINIT Base;
  char MaxOutputVoiceCount;
  char MaxChannelMapEntryCount;
  XAUDIOVOICEOUTPUT *pVoiceOutput;
};
#pragma pack(pop)

/* 6595 */
struct XAUDIO::CEmbeddedList<XAUDIO::CVoice>
{
  _LIST_ENTRY baseclass_0;
  const unsigned int m_nEntryOffset;
};

/* 6596 */
struct XAUDIO::CActiveVoiceList
{
  XAUDIO::CEmbeddedList<XAUDIO::CVoice> baseclass_0;
};

/* 6597 */
#pragma pack(push, 4)
struct XAUDIO::CSpinLock
{
  unsigned int m_SpinLock;
  int m_LockCount;
  void *m_pOwningThread;
  char m_PreviousIrql;
};
#pragma pack(pop)

/* 6598 */
struct XAUDIO::CEffect
{
  XAUDIO::CObjectRefCount baseclass_0;
  void *m_pEffectContext;
};

/* 6599 */
struct _I3DL2_LISTENERPROPERTIES
{
  int lRoom;
  int lRoomHF;
  float flRoomRolloffFactor;
  float flDecayTime;
  float flDecayHFRatio;
  int lReflections;
  float flReflectionsDelay;
  int lReverb;
  float flReverbDelay;
  float flDiffusion;
  float flDensity;
  float flHFReference;
};

/* 6600 */
struct princeton_digital::stereo_room_3dl2_t<float>
{
  _BYTE gap0[4];
  _I3DL2_LISTENERPROPERTIES i3dl2_properties_;
  _BYTE gap34[309712];
};

/* 6601 */
struct princeton_digital::stereo_room_t<float>::properties_t
{
  unsigned int reflections_delay;
  unsigned int reverb_delay;
  unsigned int position_l;
  unsigned int position_r;
  unsigned int position_l_matrix;
  unsigned int position_r_matrix;
  unsigned int early_diffusion;
  unsigned int late_diffusion;
  unsigned int low_eq_gain;
  unsigned int low_eq_cutoff;
  unsigned int high_eq_gain;
  unsigned int high_eq_cutoff;
  unsigned int rear_delay;
  float room_filter_freq;
  float room_filter_main;
  float room_filter_hf;
  float reflections_gain;
  float reverb_gain;
  float decay_time;
  float density;
  float room_size;
};

/* 6602 */
struct $E599B8F7C611D75557E6EF1E6306CFCC
{
  _BYTE gap0[52];
  princeton_digital::stereo_room_t<float>::properties_t m_propertiesStandard;
  _I3DL2_LISTENERPROPERTIES m_propertiesI3DL2;
  float m_wetDryMix;
  bool m_WetDryChanged;
  bool m_PropertiesStandardChanged;
  bool m_PropertiesI3DL2Changed;
};

/* 6603 */
union $7C748C344B6122FEABA982854F57B3CB
{
  princeton_digital::stereo_room_3dl2_t<float> baseclass_0;
  $E599B8F7C611D75557E6EF1E6306CFCC _s1;
};

/* 6604 */
struct XAUDIO::CStereoRoomFloat
{
  $7C748C344B6122FEABA982854F57B3CB ___u0;
  _BYTE gap4ba04[140];
};

/* 6605 */
struct XAUDIO::CReverbEffect
{
  IXAudioEffect baseclass_0;
  XAUDIO::CEffect baseclass_4;
  XAUDIO::CStereoRoomFloat m_effect;
  __int64 m_totalProcessingTime;
  __int64 m_totalFramesProcessed;
};

/* 6606 */
struct XAUDIO::CPerfCounter
{
  unsigned __int64 m_StartTick;
};

/* 6607 */
struct __declspec(align(8)) XAUDIO::CAutoPerfCounter
{
  XAUDIO::CPerfCounter baseclass_0;
  const char *m_pFunctionName;
};

/* 6608 */
struct XAUDIO::CFloatingPointState
{
  char dummy[1];
};

/* 6609 */
struct XAUDIO::XAUDIOENGINECALLBACKCTX
{
  void (__cdecl *pfnCallback)(void *);
  void *pContext;
};

/* 6610 */
struct XAUDIO::XAUDIOFXMGRFXTABLEENTRY
{
  HRESULT (__cdecl *pfnQueryEffectSize)(XAUDIOFXINIT *, unsigned int *);
  HRESULT (__cdecl *pfnCreateEffect)(XAUDIOFXINIT *, IXAudioBatchAllocator *, IXAudioEffect **);
};

/* 6611 */
struct XAUDIO::XAUDIOFXMGRFXTABLE
{
  unsigned int EffectCount;
  XAUDIO::XAUDIOFXMGRFXTABLEENTRY *paEffects;
};

/* 6612 */
union $8AB7752EA55F0ED1458BA958FCA8F6C9
{
  IXAudioEffectManager baseclass_8;
  XAUDIO::XAUDIOFXMGRFXTABLE m_StaticEffectTable;
};

/* 6613 */
struct XAUDIO::CEffectManager
{
  XAUDIO::CObjectRefCount baseclass_0;
  $8AB7752EA55F0ED1458BA958FCA8F6C9 ___u1;
  XAUDIO::XAUDIOFXMGRFXTABLE m_DynamicEffectTable;
};

/* 6614 */
struct XAUDIO::CExternCriticalSection
{
  _RTL_CRITICAL_SECTION *m_cs;
};

/* 6615 */
struct XAUDIO::CSourceEffect
{
  XAUDIO::CEffect baseclass_0;
  XAUDIO::CSourceStream baseclass_c;
  void (__cdecl *m_pfnPacketCompletionCallback)(XAUDIOSOURCEFXPACKETCALLBACK *);
  void (__cdecl *m_pfnPacketLoopCallback)(XAUDIOSOURCEFXPACKETCALLBACK *);
};

/* 6616 */
struct XAUDIO::CResampler
{
  XAUDIO::XAUDIOSRCHDR m_SRCHeader;
  void (__cdecl *m_pfnSRCProc)(XAUDIO::XAUDIOSRCHDR *);
  unsigned int m_UpdateMask;
  unsigned int m_Flags;
};

/* 6617 */
struct XAUDIO::CPCMSourceEffect
{
  IXAudioSourceEffect baseclass_0;
  XAUDIO::CSourceEffect baseclass_4;
  XAUDIO::CResampler m_Resampler;
  int m_fUsePacketPosition;
};

/* 6618 */
struct XAUDIO::CXMemMemoryManager
{
  XAUDIO::CMemoryTracker baseclass_0;
};

/* 6619 */
struct XAUDIO::CXenonRenderer
{
  IXAudioRenderEffect baseclass_0;
  XAUDIO::CEffect baseclass_4;
  void *m_pXBMSampleDestPrev;
  unsigned int m_XBMSampleCount;
  void *m_hDriverClient;
};

/* 6620 */
struct XAUDIO::_XMA_CONTEXT_DATA
{
  _BYTE gap0[16];
  int _bf16;
  unsigned int PtrRead0;
  unsigned int PtrRead1;
  unsigned int PtrWrite;
  unsigned int PtrOverlapAdd;
  int _bf36;
  unsigned int Reserved4[6];
};

/* 6621 */
struct XAUDIO::XMAPLAYBACKSTREAM
{
  XAUDIO::_XMA_CONTEXT_DATA contextShadow;
  struct IXMAContext *pHardwareContext;
  void *pOutput;
  void *pOverlapAdd;
  unsigned int streamPosition;
  unsigned __int16 hardwareIndex;
  unsigned __int16 partialBytesRead;
  const void *pDataSubmitted[2];
  char RESERVED[4];
};

/* 6622 */
struct XAUDIO::XMAPLAYBACK
{
  unsigned int dwNumContexts;
  unsigned int dwStatus;
  XAUDIO::XMAPLAYBACKSTREAM *pStreamInfo;
  char RESERVED[4];
};

/* 6623 */
struct XAUDIO::CAutoIrql
{
  XAUDIO::CIrql baseclass_0;
};

/* 6624 */
struct XAUDIO::XMA_PLAYBACK_LOOP
{
  unsigned int dwLoopStartOffset;
  unsigned int dwLoopEndOffset;
  char dwLoopSubframeEnd;
  char dwLoopSubframeSkip;
  char numLoops;
  char RESERVED;
};

/* 6625 */
struct XAUDIO::CXMASourceEffect::CResamplerBatch
{
  XAUDIO::CResampler baseclass_0;
};

/* 6626 */
#pragma pack(push, 4)
struct XAUDIO::CXMASourceEffect
{
  IXAudioSourceEffect baseclass_0;
  XAUDIO::CSourceEffect baseclass_4;
  XAUDIO::XMAPLAYBACK *m_pPlayback;
  XAUDIO::XMA_PLAYBACK_LOOP m_loopInfo;
  XAUDIO::CXMASourceEffect::CResamplerBatch *m_pResamplers;
  unsigned int m_dwOutputBufferScale;
  XAUDIOSOURCEFORMAT m_InitialFormat;
  char m_nSourceFlags;
  unsigned int m_dwNextLoopEnd;
  unsigned int m_dwLoopCallbackCount;
  unsigned __int16 m_maxSamplesRequiredPerFrame[6];
  int m_fSetLoopCount;
  char m_packetsOrSourceBuffers;
  XAUDIO::CSpinLock m_lock;
};
#pragma pack(pop)

/* 6627 */
struct XAUDIO::CRiffChunk
{
  XAUDIO::CRiffChunkVtbl *vfptr;
  XAUDIO::CRiffChunk *m_pParentChunk;
  XAUDIO::CFileStream *m_pStream;
  unsigned int m_dwChunkId;
  unsigned int m_dwDataOffset;
  unsigned int m_dwDataSize;
  unsigned int m_dwFlags;
};

/* 6628 */
struct XAUDIO::CRiffChunkVtbl
{
  void *(__cdecl *__vecDelDtor)(XAUDIO::CRiffChunk *this, unsigned int);
};

/* 6629 */
struct XAUDIO::CWaveFile
{
  XAUDIO::CFileStream *m_pStream;
  XAUDIO::CRiffChunk m_ParentChunk;
  XAUDIO::CRiffChunk m_DataChunk;
  unsigned int m_dwFileType;
  tWAVEFORMATEX *m_pwfxFormat;
};

/* 6630 */
struct XAUDIO::CMasterMemoryManager
{
  XAUDIO::CXMemMemoryManager baseclass_0;
};

/* 6631 */
struct XAUDIO::CStdFileStream
{
  XAUDIO::CFileStream baseclass_0;
  void *m_hFile;
};

/* 6632 */
struct XAUDIO::CMasterVoiceList
{
  XAUDIO::CEmbeddedList<XAUDIO::CVoice> baseclass_0;
};

/* 6633 */
#pragma pack(push, 4)
struct XAUDIO::XAUDIOCHANNELMAPEX
{
  char EntryCount;
  XAUDIO::XAUDIOCHANNELMAPENTRYEX *paEntries;
};
#pragma pack(pop)

/* 6634 */
#pragma pack(push, 2)
struct XAUDIO::CRouterEffect
{
  IXAudioRouterEffect baseclass_0;
  XAUDIO::CEffect baseclass_4;
  XAUDIO::XAUDIOCHANNELMAPEX m_ChannelMap;
  char m_MaxChannelMapEntryCount;
  char m_OutputChannelCount;
  char m_Mode;
};
#pragma pack(pop)

/* 6635 */
struct XAUDIO::CAutoLock<XAUDIO::CSpinLock>
{
  XAUDIO::CSpinLock *m_pLock;
};

/* 6636 */
struct XAUDIO::CListEntry
{
  _LIST_ENTRY baseclass_0;
};

/* 6637 */
#pragma pack(push, 4)
struct XAUDIO::CFastSpinLock
{
  unsigned int m_SpinLock;
  char m_PreviousIrql;
};
#pragma pack(pop)

/* 6638 */
struct XAUDIO::CCriticalSection
{
  XAUDIO::CCriticalSectionVtbl *vfptr;
  _RTL_CRITICAL_SECTION m_cs;
};

/* 6639 */
struct XAUDIO::CCriticalSectionVtbl
{
  void *(__cdecl *__vecDelDtor)(XAUDIO::CCriticalSection *this, unsigned int);
};

/* 6640 */
struct XAUDIO::CMutex
{
  XAUDIO::CMutexVtbl *vfptr;
  void *m_hMutex;
};

/* 6641 */
struct XAUDIO::CMutexVtbl
{
  void *(__cdecl *__vecDelDtor)(XAUDIO::CMutex *this, unsigned int);
};

/* 6642 */
struct XAUDIO::CBatchAllocator
{
  IXAudioBatchAllocator baseclass_0;
  XAUDIO::CObjectRefCount baseclass_4;
  unsigned int m_AllocAttributes;
  unsigned int m_BufferSize;
  unsigned int m_AllocatedSize;
  char *m_pBuffer;
};

/* 6643 */
struct XAUDIO::CStaticBatchAllocator
{
  XAUDIO::CBatchAllocator baseclass_0;
};

/* 6644 */
struct XAUDIO::CDynamicBatchAllocator
{
  XAUDIO::CBatchAllocator baseclass_0;
};

/* 6645 */
struct XAUDIO::CAutoFloatingPointState
{
  XAUDIO::CFloatingPointState baseclass_0;
};

/* 6646 */
union $7DEB69678AFE472C3550FE75A2789D45
{
  IXAudioFrameBuffer baseclass_8;
  const char m_Type;
};

/* 6647 */
struct XAUDIO::CFrameBuffer
{
  XAUDIO::CObjectRefCount baseclass_0;
  $7DEB69678AFE472C3550FE75A2789D45 ___u1;
  __declspec(align(4)) XAUDIOFORMAT m_MaxFormat;
  XAUDIOFORMAT m_Format;
  float *m_pSampleBuffer;
  void *m_pContext;
};

/* 6648 */
struct XAUDIO::CMasteringVoice
{
  XAUDIO::CVoice baseclass_0;
  XAUDIO::CXenonRenderer *m_pRenderEffect;
};

/* 6649 */
struct XAUDIO::CEngine::CEngineVoiceList
{
  XAUDIO::CMasterVoiceList m_Master;
  XAUDIO::CActiveVoiceList m_Active0;
  XAUDIO::CActiveVoiceList m_Active1;
  XAUDIO::CActiveVoiceList *m_Source;
  XAUDIO::CActiveVoiceList *m_Sink;
};

/* 6650 */
#pragma pack(push, 4)
struct XAUDIO::CEngine
{
  XAUDIO::CBatchAllocatedObject baseclass_0;
  IXAudioFrameBuffer *m_apFrameBuffers[6][2];
  IXAudioEffectManager *m_pEffectManager;
  XAUDIO::CMasteringVoice *m_pMasteringVoice;
  XAUDIO::CActiveVoiceList m_SynchSourceVoiceList;
  XAUDIO::CEngine::CEngineVoiceList m_SourceVoiceList;
  XAUDIO::CEngine::CEngineVoiceList *m_paSubmixVoiceLists;
  char m_SubmixStageCount;
  float m_aCategoryVolume[2];
  unsigned int m_CategoryVolumeChangeMask;
  XAUDIO::CVoice *m_apActiveVoices[6];
  XAUDIO::XAUDIOENGINECALLBACKCTX m_aCallbackCtx[2][8];
  XAUDIO::XAUDIOENGINECALLBACKCTX *m_pActiveCallbackCtx;
  _KTHREAD *volatile m_pRenderThread;
  int m_numWorkerThreads;
  void *m_workerThreads[6];
  _KTHREAD *m_workerThreadIds[6];
  volatile __int64 m_workerCheckpointTally[2];
};
#pragma pack(pop)

/* 6651 */
struct XAUDIO::CEngine::ThreadAssignments
{
  char numWorkerThreads;
  char numVirtualThreads;
  char assignments[6];
};

/* 6652 */
#pragma pack(push, 4)
struct XAUDIO::CSubmixVoice
{
  XAUDIO::CRoutedVoice baseclass_0;
  const char m_SubmixStage;
};
#pragma pack(pop)

/* 6653 */
struct IXAudioMasteringVoice
{
  IXAudioVoice baseclass_0;
};

/* 6654 */
struct XAUDIO::CThread
{
  XAUDIO::CThreadVtbl *vfptr;
  unsigned int m_dwThreadId;
  void *m_hThread;
  void *m_hInitialize;
  void *m_hTerminate;
};

/* 6655 */
struct XAUDIO::CThreadVtbl
{
  void *(__cdecl *__vecDelDtor)(XAUDIO::CThread *this, unsigned int);
  int (__cdecl *CreateThread)(XAUDIO::CThread *this, unsigned int);
  void (__cdecl *TerminateThread)(XAUDIO::CThread *this, int);
  int (__cdecl *IsThread)(XAUDIO::CThread *this, unsigned int *);
  int (__cdecl *OnThreadCreate)(XAUDIO::CThread *this);
  unsigned int (__cdecl *ThreadProc)(XAUDIO::CThread *this);
};

/* 6656 */
struct princeton_digital::stereo_room_t<float>
{
  princeton_digital::stereo_room_t<float>Vtbl *vfptr;
  princeton_digital::stereo_room_t<float>::properties_t pd_properties_;
  float sample_rate_;
  float wet_dry_mix_;
  float reflections_gain_;
  princeton_digital::stereo_room_t<float>::input_mode_t input_mode_;
  princeton_digital::vardelay_t<float,16384> predelay_left_;
  princeton_digital::vardelay_t<float,16384> predelay_right_;
  princeton_digital::occlusion_t<float,2> room_filter_left_;
  princeton_digital::occlusion_t<float,2> room_filter_right_;
  float ef_left_tap2_gain_;
  float ef_left_tap4_gain_;
  princeton_digital::threetap_t<float,512> ef_left_filter1_;
  princeton_digital::allpass_t<float,128> ef_left_filter2_;
  princeton_digital::threetap_t<float,2048> ef_left_filter3_;
  princeton_digital::allpass_t<float,256> ef_left_filter4_;
  princeton_digital::allpass_t<float,512> ef_left_filter5_;
  princeton_digital::twotap_t<float,1024> ef_left_filter6_;
  float ef_right_tap2_gain_;
  float ef_right_tap4_gain_;
  princeton_digital::threetap_t<float,512> ef_right_filter1_;
  princeton_digital::allpass_t<float,128> ef_right_filter2_;
  princeton_digital::threetap_t<float,2048> ef_right_filter3_;
  princeton_digital::allpass_t<float,256> ef_right_filter4_;
  princeton_digital::allpass_t<float,512> ef_right_filter5_;
  princeton_digital::twotap_t<float,1024> ef_right_filter6_;
  princeton_digital::allpass_t<float,512> lf1_filter1_;
  princeton_digital::allpass_t<float,512> lf1_filter2_;
  princeton_digital::eq1_t<float,2> lf1_eq1_;
  princeton_digital::eq2_t<float,2> lf1_eq2_;
  princeton_digital::eq3_t<float,2> lf1_eq3_;
  princeton_digital::twotap_t<float,4096> lf1_delay_;
  princeton_digital::onetap_t<float,2> lf1_decay_;
  princeton_digital::allpass_t<float,512> lf2_filter1_;
  princeton_digital::allpass_t<float,512> lf2_filter2_;
  princeton_digital::eq1_t<float,2> lf2_eq1_;
  princeton_digital::eq2_t<float,2> lf2_eq2_;
  princeton_digital::eq3_t<float,2> lf2_eq3_;
  princeton_digital::twotap_t<float,4096> lf2_delay_;
  princeton_digital::onetap_t<float,2> lf2_decay_;
  princeton_digital::allpass_t<float,2048> lf3_filter1_;
  princeton_digital::allpass2_t<float,2048> lf3_filter2_;
  princeton_digital::allpass_t<float,2048> lf3_filter3_;
  princeton_digital::allpass_t<float,1024> lf3_filter4_;
  princeton_digital::twotap_t<float,4096> lf3_delay_;
  princeton_digital::lowpass_t<float,2> lf3_decay_;
  princeton_digital::allpass_t<float,2048> lf4_filter1_;
  princeton_digital::allpass2_t<float,2048> lf4_filter2_;
  princeton_digital::allpass_t<float,2048> lf4_filter3_;
  princeton_digital::allpass_t<float,1024> lf4_filter4_;
  princeton_digital::twotap_t<float,4096> lf4_delay_;
  princeton_digital::lowpass_t<float,2> lf4_decay_;
  princeton_digital::allpass_t<float,512> wet_left_filter1_;
  princeton_digital::allpass_t<float,512> wet_left_filter2_;
  princeton_digital::allpass_t<float,512> wet_right_filter1_;
  princeton_digital::allpass_t<float,512> wet_right_filter2_;
  princeton_digital::vardelay_t<float,256> reardelay_left_;
  princeton_digital::vardelay_t<float,256> reardelay_right_;
};

/* 6657 */
struct princeton_digital::stereo_room_t<float>Vtbl
{
  void *(__cdecl *__vecDelDtor)(princeton_digital::stereo_room_t<float> *this, unsigned int);
};

/* 6658 */
struct princeton_digital::delay_t<float,16384>
{
  unsigned int current_;
  float initial_val_;
  float data_[16384];
};

/* 6659 */
struct princeton_digital::vardelay_t<float,16384>
{
  float sample_rate_;
  float crossfade_;
  unsigned int delay_;
  unsigned int old_delay_;
  unsigned int future_delay_;
  float tap1_;
  princeton_digital::delay_t<float,16384> delay_line_;
};

/* 6660 */
struct princeton_digital::occlusion_t<float,2>
{
  float sample_rate_;
  float reference_freq_;
  float level_;
  float hf_level_;
  float samples_[2];
  float k_;
  float a_;
};

/* 6661 */
struct princeton_digital::delay_t<float,512>
{
  unsigned int current_;
  float initial_val_;
  float data_[512];
};

/* 6662 */
struct princeton_digital::threetap_t<float,512>
{
  unsigned int delay1_;
  float gain1_;
  float tap1_;
  unsigned int delay2_;
  float gain2_;
  float tap2_;
  unsigned int delay3_;
  float gain3_;
  float tap3_;
  princeton_digital::delay_t<float,512> delay_line_;
};

/* 6663 */
struct princeton_digital::delay_t<float,128>
{
  unsigned int current_;
  float initial_val_;
  float data_[128];
};

/* 6664 */
struct princeton_digital::allpass_t<float,128>
{
  unsigned int delay_;
  float feed_forward_;
  float feed_backward_;
  float output_;
  princeton_digital::delay_t<float,128> delay_line_;
};

/* 6665 */
struct princeton_digital::delay_t<float,2048>
{
  unsigned int current_;
  float initial_val_;
  float data_[2048];
};

/* 6666 */
struct princeton_digital::threetap_t<float,2048>
{
  unsigned int delay1_;
  float gain1_;
  float tap1_;
  unsigned int delay2_;
  float gain2_;
  float tap2_;
  unsigned int delay3_;
  float gain3_;
  float tap3_;
  princeton_digital::delay_t<float,2048> delay_line_;
};

/* 6667 */
struct princeton_digital::delay_t<float,256>
{
  unsigned int current_;
  float initial_val_;
  float data_[256];
};

/* 6668 */
struct princeton_digital::allpass_t<float,256>
{
  unsigned int delay_;
  float feed_forward_;
  float feed_backward_;
  float output_;
  princeton_digital::delay_t<float,256> delay_line_;
};

/* 6669 */
struct princeton_digital::allpass_t<float,512>
{
  unsigned int delay_;
  float feed_forward_;
  float feed_backward_;
  float output_;
  princeton_digital::delay_t<float,512> delay_line_;
};

/* 6670 */
struct princeton_digital::delay_t<float,1024>
{
  unsigned int current_;
  float initial_val_;
  float data_[1024];
};

/* 6671 */
struct princeton_digital::twotap_t<float,1024>
{
  unsigned int delay1_;
  float gain1_;
  float tap1_;
  unsigned int delay2_;
  float gain2_;
  float tap2_;
  princeton_digital::delay_t<float,1024> delay_line_;
};

/* 6672 */
struct princeton_digital::float_delay_2
{
  float initial_val_;
  float data_[2];
};

/* 6673 */
struct princeton_digital::eq1_t<float,2>
{
  unsigned int delay_;
  float output_gain_;
  float output_;
  princeton_digital::float_delay_2 delay_line_;
};

/* 6674 */
struct princeton_digital::eq2_t<float,2>
{
  unsigned int delay_;
  float feed_forward_;
  float feed_backward_;
  float output_gain_;
  float output_;
  princeton_digital::float_delay_2 delay_line_;
};

/* 6675 */
struct princeton_digital::eq3_t<float,2>
{
  unsigned int delay_;
  float output_;
  float gain1_;
  float gain2_;
  princeton_digital::float_delay_2 delay_line_;
};

/* 6676 */
struct princeton_digital::delay_t<float,4096>
{
  unsigned int current_;
  float initial_val_;
  float data_[4096];
};

/* 6677 */
struct princeton_digital::twotap_t<float,4096>
{
  unsigned int delay1_;
  float gain1_;
  float tap1_;
  unsigned int delay2_;
  float gain2_;
  float tap2_;
  princeton_digital::delay_t<float,4096> delay_line_;
};

/* 6678 */
struct princeton_digital::onetap_t<float,2>
{
  unsigned int delay1_;
  float gain1_;
  float tap1_;
  princeton_digital::float_delay_2 delay_line_;
};

/* 6679 */
struct princeton_digital::allpass_t<float,2048>
{
  unsigned int delay_;
  float feed_forward_;
  float feed_backward_;
  float output_;
  princeton_digital::delay_t<float,2048> delay_line_;
};

/* 6680 */
struct princeton_digital::allpass2_t<float,2048>
{
  unsigned int delay_;
  float feed_forward_;
  float feed_backward_;
  float output_gain_;
  float output_;
  princeton_digital::delay_t<float,2048> delay_line_;
};

/* 6681 */
struct princeton_digital::allpass_t<float,1024>
{
  unsigned int delay_;
  float feed_forward_;
  float feed_backward_;
  float output_;
  princeton_digital::delay_t<float,1024> delay_line_;
};

/* 6682 */
struct princeton_digital::lowpass_t<float,2>
{
  unsigned int delay_;
  float output_;
  float gain1_;
  float gain2_;
  princeton_digital::float_delay_2 delay_line_;
};

/* 6683 */
struct princeton_digital::vardelay_t<float,256>
{
  float sample_rate_;
  float crossfade_;
  unsigned int delay_;
  unsigned int old_delay_;
  unsigned int future_delay_;
  float tap1_;
  princeton_digital::delay_t<float,256> delay_line_;
};

/* 6684 */
struct princeton_digital::denormal_traits<float>
{
  char dummy[1];
};

/* 6685 */
struct AIFFLOOP
{
  unsigned __int16 wPlayMode;
  unsigned __int16 wStartMarker;
  unsigned __int16 wEndMarker;
};

/* 6686 */
struct DLSLOOP
{
  unsigned int dwSize;
  unsigned int dwLoopType;
  unsigned int dwLoopStart;
  unsigned int dwLoopLength;
};

/* 6687 */
struct RIFFHEADER
{
  unsigned int fccChunkId;
  unsigned int dwDataSize;
};

/* 6688 */
struct MIDILOOP
{
  unsigned int dwCuePointId;
  unsigned int dwType;
  unsigned int dwStart;
  unsigned int dwEnd;
  unsigned int dwFraction;
  unsigned int dwPlayCount;
};

/* 6689 */
struct MIDISAMPLE
{
  unsigned int dwManufacturerId;
  unsigned int dwProductId;
  unsigned int dwSamplePeriod;
  unsigned int dwUnityNode;
  unsigned int dwPitchFraction;
  unsigned int dwSMPTEFormat;
  unsigned int dwSMPTEOffset;
  unsigned int dwLoopCount;
  unsigned int dwSamplerData;
  MIDILOOP aLoops[];
};

/* 6690 */
struct DLSSAMPLE
{
  unsigned int dwSize;
  unsigned __int16 wUnityNote;
  __int16 nFineTune;
  int lGain;
  unsigned int dwOptions;
  unsigned int dwLoopCount;
  DLSLOOP aLoops[];
};

/* 6691 */
struct AIFFFORMAT
{
  unsigned __int16 nChannels;
  unsigned int dwSampleCount;
  unsigned __int16 wBitsPerSample;
  unsigned __int16 wFrequencyExponent;
  unsigned int dwFrequencyMantissa;
  unsigned __int16 wReserved;
  unsigned int dwCompression;
};

/* 6692 */
struct AIFFSOUNDHDR
{
  unsigned int dwOffset;
  unsigned int dwBlockSize;
};

/* 6693 */
struct AIFFINSTRUMENT
{
  char bBaseNote;
  char bDetune;
  char bLowNote;
  char bHighNote;
  char bLowVelocity;
  char bHighVelocity;
  __int16 nGain;
  AIFFLOOP SustainLoop;
  AIFFLOOP ReleaseLoop;
};

/* 6694 */
struct AIFFMARKER
{
  unsigned __int16 wMarkerId;
  unsigned int dwPosition;
  char bNameLength;
  char szMarkerName[1];
};

/* 6695 */
struct AIFFMARKERHDR
{
  unsigned __int16 wMarkerCount;
};

/* 6696 */
struct D3D::CBlocker
{
  D3D::CDevice *m_pDevice;
  _D3DBLOCKTYPE m_BlockType;
  unsigned int m_StartTimeoutFence;
  unsigned int m_StartTimeoutTime;
  unsigned int m_StartThreadTime;
  unsigned int m_StartQpcTime;
};

/* 6697 */
struct D3D::SamplerStateInit
{
  unsigned int (__cdecl *GetSamplerStateCall)(D3DDevice *, unsigned int);
  void (__cdecl *SetSamplerStateCall)(D3DDevice *, unsigned int, unsigned int);
  unsigned int InitialState;
};

/* 6698 */
struct D3D::RenderStateInit
{
  unsigned int (__cdecl *GetRenderStateCall)(D3DDevice *);
  void (__cdecl *SetRenderStateCall)(D3DDevice *, unsigned int);
  unsigned int InitialState;
};

/* 6699 */
struct _DISPLAY_INFORMATION
{
  unsigned __int16 FrontBufferWidth;
  unsigned __int16 FrontBufferHeight;
  char FrontBufferColorFormat;
  char FrontBufferPixelFormat;
  __declspec(align(4)) _D3DPRIVATE_SCALER_PARAMETERS ScalerParameters;
  unsigned __int16 DisplayWindowOverscanLeft;
  unsigned __int16 DisplayWindowOverscanTop;
  unsigned __int16 DisplayWindowOverscanRight;
  unsigned __int16 DisplayWindowOverscanBottom;
  unsigned __int16 DisplayWidth;
  unsigned __int16 DisplayHeight;
  float DisplayRefreshRate;
  unsigned int DisplayInterlaced;
  char DisplayColorFormat;
  __declspec(align(2)) unsigned __int16 ActualDisplayWidth;
};

/* 6700 */
struct XAUDIO::CAutoLock<XAUDIO::CCriticalSection>
{
  XAUDIO::CCriticalSection *m_pLock;
};

/* 6701 */
struct CXaudioPixAutoEvent
{
  _XAUDIOPIXEVENT m_eventID;
};

/* 6702 */
union D3D::PatchSwizzleMask
{
  unsigned __int16 word;
};

/* 6703 */
union D3D::SwizzleVector
{
  unsigned __int16 word;
};

/* 6704 */
struct PIXPatchVertexShaderToMatchPixelShaderData
{
  unsigned int NumberOfUnusedOutputs;
  char UnusedOutputs[16];
};

/* 6705 */
struct D3D::QueueRecord_Initialize
{
  unsigned int Header;
  D3D::WorkerState State;
};

/* 6706 */
struct D3D::StatusRegister
{
  unsigned int Mask;
  char *Description;
};

/* 6707 */
struct D3D::HangGroup
{
  unsigned int ControlRegister;
  unsigned int ReadRegister;
  unsigned int ControlValue;
  unsigned int IndexShift;
  unsigned int Count;
  char *Description;
};

/* 6708 */
struct D3D::HangRegister
{
  unsigned int Register;
  char *Description;
};

/* 6709 */
struct D3D::Hang
{
  void (__cdecl *m_pHangCallback)(const char *);
  unsigned int (__cdecl *m_pReadReg)(unsigned int);
  void (__cdecl *m_pWriteReg)(unsigned int, unsigned int);
};

/* 6710 */
struct D3D::DecodeTable
{
  unsigned int positionType;
  unsigned int blendIndexType;
  unsigned int blendWeightType;
  unsigned int fvf;
};

/* 6711 */
struct D3D::BitVector<2280>
{
  unsigned int Data[72];
};

/* 6712 */
struct D3D::D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>
{
  _UCODE_VSINPUTDECLARATION *m_pData;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 6713 */
struct D3D::SafetyStream
{
  HRESULT m_HR;
  char *m_pOutput;
  unsigned int m_OutputSize;
  unsigned int m_Index;
};

/* 6714 */
struct D3D::BitVector<256>
{
  unsigned int Data[8];
};

/* 6715 */
struct D3D::OutputInterpolatorUseContext
{
  char use[16];
};

/* 6716 */
union D3D::InterpolatorRecord
{
  unsigned int dword;
};

/* 6717 */
struct D3D::InterpolatorTable
{
  unsigned int m_NumInterpolants;
  D3D::InterpolatorRecord m_Interpolants[16];
};

/* 6718 */
struct D3D::D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>
{
  GPUSHADER_INSTRUCTION *m_pData;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 6719 */
union D3D::_MB_PSINPUTDECLARATION
{
  unsigned int dword;
};

/* 6720 */
struct D3D::D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>
{
  D3D::_MB_PSINPUTDECLARATION *m_pData;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 6721 */
struct D3D::D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree>
{
  _UCODE_VSOUTPUTDECLARATION *m_pData;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 6722 */
struct D3D::CMicrocodeBuilder::StreamWriter
{
  char *m_pMemory;
  unsigned int m_Position;
  unsigned int m_Size;
  unsigned int m_HighWaterMark;
  HRESULT m_Result;
};

/* 6723 */
struct D3D::MiniMicrocodeBuilder
{
  const char *m_pSrcFunctionBase;
  _UCODE_HEADER *m_pSrcHeader;
  unsigned int m_SrcPhysicalBaseOffset;
  _UCODE_HEADER *m_pDestHeader;
  unsigned int m_PhysicalBaseOffset;
  unsigned int m_Flags;
  D3D::CMicrocodeBuilder::StreamWriter *m_pOut;
  D3D::CMicrocodeBuilder::StreamWriter *m_pPhysicalOut;
};

/* 6724 */
struct D3D::CMicrocodeBuilder::Sink
{
  D3D::CMicrocodeBuilder::StreamWriter m_Physical;
  D3D::CMicrocodeBuilder::StreamWriter m_Cached;
};

/* 6725 */
struct D3D::CMicrocodeBuilder
{
  $0ADE37BAA461E0DE83B37A954FF3064D ___u0;
  __declspec(align(16)) D3D::CMicrocodeBuilder::Pass m_Pass[2];
  unsigned int ReferenceCount;
  unsigned int Flags;
  IShaderPDBBuilder *m_pPDBBuilder;
  HRESULT m_hrResult;
  int m_bFinished;
  D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_ConstantTable;
  D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_DebuggerHint;
  int m_bNeedToInitializeConstantBlockPhysicalOffsetTable;
  unsigned int m_FirstCommonALUConstantBlock;
  D3D::CMicrocodeBuilder::D3DFastVector<unsigned long> m_ALUConstantBlockPhysicalOffset;
};

/* 6726 */
struct D3D::D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree>
{
  GPUFLOW_INSTRUCTION *m_pData;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 6727 */
struct D3D::D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree>
{
  _UCODE_VSINDEXDECLARATION *m_pData;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 6728 */
struct D3D::CMicrocodeBuilder::Microcode
{
  D3D::CMicrocodeBuilder *m_pParent;
  HRESULT m_hrResult;
  int m_bFinished;
  GPU_PROGRAMCONTROL m_ProgramCntl;
  GPU_CONTEXTMISC m_ContextMisc;
  D3D::D3DFastVector<GPUSHADER_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_AluInstructions;
  D3D::D3DFastVector<GPUFLOW_INSTRUCTION,&D3D::MemAlloc,&D3D::MemFree> m_FlowInstructions;
  int m_bNextALUStartsNewExec;
  bool m_bPendingFetch;
  __declspec(align(4)) D3D::BitVector<256> m_PendingVFetchReads;
  D3D::BitVector<256> m_PendingTFetchReads;
  D3D::BitVector<256> m_PendingVFetchWrites;
  D3D::BitVector<256> m_PendingTFetchWrites;
  GPUSHADER_INSTRUCTION *m_pFlowBegin;
  GPUSHADER_INSTRUCTION *m_pALUBegin;
  GPUSHADER_INSTRUCTION *m_pALUEnd;
  D3D::D3DFastVector<D3D::_MB_PSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_PsInputDeclarations;
  D3D::D3DFastVector<_UCODE_VSINDEXDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsIndexDeclarations;
  D3D::D3DFastVector<_UCODE_VSINPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsInputDeclarations;
  D3D::D3DFastVector<_UCODE_VSOUTPUTDECLARATION,&D3D::MemAlloc,&D3D::MemFree> m_VsOutputDeclarations;
  unsigned int m_VsOutputPatchCount;
  char m_OutputInterpolatorUse[16];
  unsigned int m_ScSampleCntl;
  XShaderPDBHint m_PDBHint;
};

/* 6729 */
struct D3D::BitVector<512>
{
  unsigned int Data[16];
};

/* 6730 */
#pragma pack(push, 16)
struct D3D::CMicrocodeBuilder::DefinitionTable
{
  _D3DConstants m_Constants;
  _UCODE_DEFINITION_TABLE m_DefinitionTableHeader;
  D3D::BitVector<512> m_DefinedALUConstant;
  D3D::BitVector<2280> m_DirtyConstants;
  D3D::BitVector<256> m_BoolConstantData;
  D3D::BitVector<256> m_BoolConstantMask;
  int m_isColorPass;
  int m_bEmpty;
  HRESULT m_hResult;
  D3D::CMicrocodeBuilder *m_pParent;
};
#pragma pack(pop)

/* 6731 */
#pragma pack(push, 16)
struct D3D::CMicrocodeBuilder::Pass
{
  D3D::CMicrocodeBuilder::Microcode m_Microcode;
  D3D::CMicrocodeBuilder::DefinitionTable m_DefinitionTable;
};
#pragma pack(pop)

/* 6732 */
struct D3D::CMicrocodeBuilder::D3DFastVector<unsigned long>
{
  unsigned int *m_pData;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 6733 */
union $0ADE37BAA461E0DE83B37A954FF3064D
{
  XMicrocodeBuilder baseclass_0;
  unsigned int m_CurrentPass;
};

/* 6734 */
struct D3D::CMicrocodeBuilder::Microcode::RenumberRegistersContext
{
  unsigned int m_RegisterMap[64];
};

/* 6735 */
struct D3D::CMicrocodeBuilder::Microcode::CreateVSOutputPatchesContext
{
  _UCODE_VSOUTPUTDECLARATION *pOutputDeclaration;
  unsigned int dwOutputDeclarationCount;
  _UCODE_VSOUTPUTPATCH *pOutputPatches;
  unsigned int dwVSOutputPatchCount;
  char RegisterComponentToDeclaration[64];
  unsigned __int16 OutputCount[16];
};

/* 6736 */
struct D3D::CMicrocodeBuilder::Microcode::SetVSOutputDeclarationPatchOffsetsContext
{
  _UCODE_VSOUTPUTDECLARATION *pOutputDeclaration;
  unsigned int dwOutputDeclarationCount;
  char RegisterComponentToDeclaration[64];
  unsigned __int16 OutputCount[16];
};

/* 6737 */
struct D3D::CMicrocodeBuilder::Microcode::AnalyzeCodeVisitorContext
{
  int m_bPixelShader;
  unsigned int m_gprMax;
  int m_FirstInstructionSeen;
  int m_FirstResource;
  int m_TxCacheSel;
  _UCODE_CONTROLFLOWCONSTANTSMASK m_ControlFlowConstantMask;
};

/* 6738 */
struct D3D::CMicrocodeBuilder::StreamWriter::State
{
  unsigned int m_Position;
  unsigned int m_Size;
  unsigned int m_HighWaterMark;
  unsigned int m_Result;
};

/* 6739 */
struct D3D::RemoveDebugInfoHelper
{
  void *pNondebugFunction;
  const void *pOriginalFunction;
};

/* 6740 */
struct _SCALER_PARAMETERS_NOTIFICATION
{
  unsigned __int16 FrontBufferWidth;
  unsigned __int16 FrontBufferHeight;
  unsigned __int16 DisplayWidth;
  unsigned __int16 DisplayHeight;
  _D3DPRIVATE_SCALER_PARAMETERS ScalerParameters;
};

/* 6741 */
struct _FILTER
{
  unsigned int NumberOfTaps;
  float CutOff;
  unsigned int Taps[160];
  unsigned int Scale;
};

/* 6742 */
struct _HARDWARE_SCALER_PARAMETERS
{
  _FILTER vFilter;
  _FILTER hFilter;
  unsigned int OverscanTop;
  unsigned int OverscanBottom;
  unsigned int OverscanLeft;
  unsigned int OverscanRight;
  unsigned int SurfacePitch;
  unsigned int SurfaceOffsetX;
  unsigned int SurfaceOffsetY;
  unsigned int SurfaceStartX;
  unsigned int SurfaceStartY;
  unsigned int SurfaceEndX;
  unsigned int SurfaceEndY;
  unsigned int DataFormat;
  unsigned int ViewportStart;
  unsigned int ViewportSize;
  unsigned int ScalerEnable;
  unsigned int TapCntl;
  unsigned int ManualRepCntl;
  unsigned int HorzFilterCntl;
  unsigned int HorzScaleRatio;
  unsigned int HorzInitRgbLuma;
  unsigned int HorzInitChroma;
  unsigned int VertFilterCntl;
  unsigned int VertScaleRatio;
  unsigned int VertFilterInit;
  unsigned int VertFilterInitBot;
  unsigned int LineBufferPitch;
};

/* 6743 */
struct XAUDIO::SRC::Common
{
  char dummy[1];
};

/* 6744 */
struct XAUDIO::SRC::Native
{
  XAUDIO::SRC::Common baseclass_0;
};

/* 6745 */
struct XAUDIO::SRC::Linear
{
  XAUDIO::SRC::Common baseclass_0;
};

/* 6746 */
struct XAUDIO::SRC::DoubleVector
{
  XAUDIO::SRC::Common baseclass_0;
};

/* 6747 */
struct XAUDIO::SRC::LinearVector
{
  XAUDIO::SRC::Common baseclass_0;
};

/* 6748 */
struct XAUDIO::SRC::Double
{
  XAUDIO::SRC::Common baseclass_0;
};

/* 6749 */
struct XAUDIO::SRC::NativeVector
{
  XAUDIO::SRC::Common baseclass_0;
};

/* 6750 */
struct D3D::_CounterRecord
{
  unsigned int Mask;
  unsigned int PixCounter;
  unsigned int D3DCounter;
};

/* 6751 */
struct __declspec(align(8)) _DM_COUNTDATA
{
  _LARGE_INTEGER CountValue;
  _LARGE_INTEGER RateValue;
  unsigned int CountType;
};

/* 6752 */
struct $B5785F480BF3314486EC7004D857184A
{
  unsigned int dword;
  _BYTE gap4[2];
  __int16 _bf6;
};

/* 6753 */
union PIXMetaSetRenderTargetData
{
  $B5785F480BF3314486EC7004D857184A _s0;
};

/* 6754 */
struct _DM_CMDCONT
{
  HRESULT (__cdecl *HandlingFunction)(_DM_CMDCONT *, char *, unsigned int);
  unsigned int DataSize;
  void *Buffer;
  unsigned int BufferSize;
  void *CustomData;
  unsigned int BytesRemaining;
};

/* 6755 */
struct _SYSTEM_COMMAND_BUFFER
{
  unsigned int CommandBase;
  unsigned int CommandSize;
  unsigned int FrontBufferBase;
  unsigned int FrontBufferFormat;
  unsigned int FrontBufferColorSpace;
  unsigned int FrontBufferWidth;
  unsigned int FrontBufferHeight;
  unsigned int XamScalerParametersDirtyFlag;
  _D3DPRIVATE_SCALER_PARAMETERS XamScalerParameters;
  _D3DPRIVATE_SCALER_PARAMETERS TitleScalerParameters;
  unsigned int ScalerLock;
};

/* 6756 */
struct _PERSIST_DISPLAY
{
  void *BaseAddress;
  unsigned __int16 Width;
  unsigned __int16 Height;
  unsigned int Format;
};

/* 6757 */
struct D3D::MajorMode1PrimRegs
{
  GPU_GROUPPRIMTYPE GroupPrimType;
  unsigned int GroupFirstDecr;
  unsigned int GroupDecr;
};

/* 6758 */
struct D3D::MajorMode1InputRegs
{
  GPU_GROUPVECTCONTROL GroupVect0Control;
  GPU_GROUPVECTCONTROL GroupVect1Control;
};

/* 6759 */
struct RecordHeader
{
  RecordType Type;
  unsigned int Size;
  unsigned int Offset;
  unsigned int ModifyFence;
  unsigned int KickOffFence;
};

/* 6760 */
struct RecordRangeError
{
  unsigned int Primitive;
  RecordResourceType Type;
  unsigned int Offset;
};

/* 6761 */
struct D3D::CTBitSet<8192,unsigned long>
{
  unsigned int m_Data[2048];
};

/* 6762 */
struct D3D::BufferedOutputContext
{
  char m_Buffer[260];
  unsigned int m_Used;
};

/* 6763 */
struct D3D::aluFormat
{
  _BYTE gap0[8];
  int _bf8;
};

/* 6764 */
#pragma pack(push, 4)
struct D3D::Disassembler
{
  GPU_PROGRAMCONTROL m_ProgramControl;
  GPU_CONTEXTMISC m_ContextMisc;
  unsigned int dis_mode;
  bool print_cf;
  bool print_insts;
  char *code_buffer;
  char *ptr_beyond_last_inst;
  D3D::CTBitSet<8192,unsigned long> branchTarget;
  HRESULT (__cdecl *m_pShaderOut)(void *, const char *, unsigned int);
  void *m_pShaderOutContext;
  HRESULT (__cdecl *m_pCallback)(void *, unsigned int, unsigned int, void *, unsigned int);
  void *m_pCallbackContext;
  bool fAtStartOfLine;
  bool fLastOutputWasRTFCommand;
  HRESULT m_accumulatedResult;
  unsigned int m_HighestAddressSeen;
};
#pragma pack(pop)

/* 6765 */
struct D3D::textureFetchFormat
{
  _BYTE gap0[8];
  int _bf8;
};

/* 6766 */
struct D3D::vertexFetchFormat
{
  _BYTE gap0[8];
  int _bf8;
};

/* 6767 */
#pragma pack(push, 4)
struct XAUDIO::XMA_PLAYBACK_INIT
{
  unsigned int sampleRate;
  unsigned int outputBufferSizeInSamples;
  char channelCount;
  char subframesToDecode;
};
#pragma pack(pop)

/* 6768 */
struct XAUDIO::XMA_PLAYBACK_POSITION
{
  const void *pCurrentData;
  unsigned int dwPacketBitOffset;
  unsigned int dwCurrentSubframe;
};

/* 6769 */
union $C0FF1638809FDC5F65E8A678EC1FFF8A
{
  D3D::FixupRecord m_Previous;
  unsigned int m_Bytes[4];
};

/* 6770 */
struct D3D::CBuilder
{
  D3D::CCommandBuffer *m_pCommandBuffer;
  D3D::CParser m_Parser;
  int _bf32;
  unsigned int m_StopMarker;
  D3D::FixupRecord *m_pRecord;
  D3D::FixupRecord *m_pPrevious;
  $C0FF1638809FDC5F65E8A678EC1FFF8A ___u6;
  D3D::FixupRecord *m_pStart;
  D3D::FixupRecord *m_pLimit;
  unsigned int m_Handle;
  unsigned int m_Offset;
  unsigned int *m_pBufferStart;
};

/* 6771 */
union $4C8D4AC1C4CCD28239D35E4FD12CC29B
{
  D3DPerfCounters baseclass_0;
  unsigned int m_RefCount;
};

/* 6772 */
struct D3D::CPerfCounters
{
  $4C8D4AC1C4CCD28239D35E4FD12CC29B ___u0;
  _D3DPERFCOUNTER_VALUES *m_pValues;
  D3DDevice *m_pDevice;
  unsigned int m_Fence;
};

/* 6773 */
union $F8288FEC984DD6FC983B3B579DA07AB3
{
  D3DQuery baseclass_0;
  D3D::CDevice *m_pDevice;
};

/* 6774 */
struct D3D::CQuery
{
  $F8288FEC984DD6FC983B3B579DA07AB3 ___u0;
  _D3DQUERYTYPE m_Type;
  unsigned int m_Signature;
  unsigned int m_RefCount;
  D3D::D3DQUERYSTATE m_State;
  unsigned int m_Fence;
  unsigned int *m_pBase[15];
  D3D::CQueryBlock *m_pBlock[15];
  unsigned int m_TileCount;
  unsigned int m_TileCapacity;
};

/* 6775 */
struct _XBMOVIE_CAPTURE_VIDEO_INFO
{
  unsigned int FrontBufferWidth;
  unsigned int FrontBufferHeight;
  unsigned int DisplayWidth;
  unsigned int DisplayHeight;
  unsigned int TimeStampFreq;
  unsigned int Flags;
  _D3DPRIVATE_SCALER_PARAMETERS ScalerParameters;
  _D3DGAMMARAMP GammaRamp;
};

/* 6776 */
struct D3D::XBMCOMMAND_HANDLER
{
  const char Command[64];
  int (__cdecl *pHandler)(const char *);
};

/* 6777 */
union $85EE3B417A50317F37CC7A101FF39B2D
{
  int StartOffsetHigh;
  unsigned int StartFileIndex;
};

/* 6778 */
struct _XBMOVIE_CAPTURE_FILE_HEADER
{
  unsigned int Identifier;
  unsigned int Version;
  unsigned int StartOffsetLow;
  $85EE3B417A50317F37CC7A101FF39B2D ___u3;
  _XBMOVIE_CAPTURE_VIDEO_INFO VideoInfo;
};

/* 6779 */
struct D3D::Edram
{
  _RTL_CRITICAL_SECTION CriticalSection;
  unsigned int FreeMemory;
  unsigned int BitArray[193];
};

/* 6780 */
struct XAUDIO::CPhysicalMemoryManager
{
  XAUDIO::CMemoryTracker baseclass_0;
};

/* 6781 */
struct XAUDIO::CPoolMemoryManager
{
  XAUDIO::CMemoryTracker baseclass_0;
};

/* 6782 */
union $15E7CF796A6292CA98E6CC58C7A35830
{
  XAUDIO::CMemoryTracker baseclass_0;
  void *m_hHeap;
};

/* 6783 */
struct XAUDIO::CHeapMemoryManager
{
  $15E7CF796A6292CA98E6CC58C7A35830 ___u0;
};

/* 6784 */
struct cplane_s
{
  float normal[3];
  float dist;
  char type;
  char signbits;
  char pad[2];
};

/* 6785 */
#pragma pack(push, 2)
struct MemoryFile
{
  char *buffer;
  int bufferSize;
  int bytesUsed;
  int segmentIndex;
  int segmentStart;
  bool errorOnOverflow;
  bool memoryOverflow;
  bool compress;
  void (__cdecl *archiveProc)(MemoryFile *, int, void *);
};
#pragma pack(pop)

/* 6786 */
union SndEntHandle
{
  $54EFCC50AAD43EA9AF18F67ACEC01CFC field;
  int handle;
};

/* 6787 */
struct orientation_t
{
  float origin[3];
  float axis[3][3];
};

/* 6788 */
#pragma pack(push, 4)
struct snd_listener
{
  orientation_t orient;
  int clientNum;
  bool active;
};
#pragma pack(pop)

/* 6789 */
struct SndCurve
{
  const char *filename;
  int knotCount;
  float knots[8][2];
};

/* 6790 */
struct XAUDIOPACKET_ALIGNED
{
  char *pBuffer;
  unsigned int BufferSize;
  unsigned int LoopCount;
  XMALOOPREGION XMALoop[6];
  char *pContext;
};

/* 6791 */
struct XaIwXmaDataInfo
{
  int totalMsec;
};

/* 6792 */
struct XaSeekTable
{
  int size;
  unsigned int *data;
};

/* 6793 */
struct XaSound
{
  XAUDIOPACKET_ALIGNED packet;
  XAUDIOSOURCEFORMAT format;
  XaIwXmaDataInfo xaIwXmaDataInfo;
  XaSeekTable seekTable;
};

/* 6794 */
#pragma pack(push, 4)
struct SoundFile
{
  const char *dir;
  const char *name;
  XaSound *fileMem;
  char isStreamFound;
  snd_alias_type_t type;
};
#pragma pack(pop)

/* 6795 */
#pragma pack(push, 4)
struct SpeakerMap
{
  bool isDefault;
  const char *name;
  XAUDIOCHANNELMAP channelMaps[2][2];
};
#pragma pack(pop)

/* 6796 */
const struct snd_alias_t
{
  const char *aliasName;
  const char *subtitle;
  const char *secondaryAliasName;
  const char *chainAliasName;
  SoundFile *soundFile;
  int sequence;
  float volMin;
  float volMax;
  float pitchMin;
  float pitchMax;
  float distMin;
  float distMax;
  int flags;
  float slavePercentage;
  float probability;
  float lfePercentage;
  float centerPercentage;
  int startDelay;
  SndCurve *volumeFalloffCurve;
  float envelopMin;
  float envelopMax;
  float envelopPercentage;
  SpeakerMap *speakerMap;
};

/* 6797 */
#pragma pack(push, 4)
struct SndStartAliasInfo
{
  snd_alias_t *alias0;
  snd_alias_t *alias1;
  float lerp;
  SndEntHandle sndEnt;
  float org[3];
  float volume;
  float pitch;
  int timeshift;
  float fraction;
  int startDelay;
  bool master;
  bool timescale;
  snd_alias_system_t system;
};
#pragma pack(pop)

/* 6798 */
struct SndFileSpecificChannelInfo
{
  SndFileLoadingState loadingState;
  int srcChannelCount;
  int baserate;
  int endtime;
};

/* 6799 */
struct sndLengthNotifyInfo
{
  void (__cdecl *function[4])(int data, void *);
  void *[4];
};

/* 6800 */
#pragma pack(push, 2)
struct snd_channel_info_t
{
  SndFileSpecificChannelInfo soundFileInfo;
  SndEntHandle sndEnt;
  int entchannel;
  int startDelay;
  int startTime;
  int looptime;
  int totalMsec;
  int playbackId;
  sndLengthNotifyInfo lengthNotifyInfo;
  float basevolume;
  float pitch;
  snd_alias_t *alias0;
  snd_alias_t *alias1;
  int saveIndex0;
  int saveIndex1;
  float lerp;
  float org[3];
  float offset[3];
  bool paused;
  bool master;
  bool timescale;
  snd_alias_system_t system;
};
#pragma pack(pop)

/* 6801 */
struct snd_alias_list_t
{
  const char *aliasName;
  snd_alias_t *head;
  int count;
};

/* 6802 */
struct snd_volume_info_t
{
  float volume;
  float goalvolume;
  float goalrate;
};

/* 6803 */
struct snd_save_3D_sample_t
{
  float fraction;
  float pitch;
  float volume;
  float org[3];
};

/* 6804 */
struct snd_save_2D_sample_t
{
  float fraction;
  float pitch;
  float volume;
  float pan;
};

/* 6805 */
struct snd_save_stream_t
{
  float fraction;
  int rate;
  float basevolume;
  float volume;
  float pan;
  float org[3];
};

/* 6806 */
struct snd_overlay_info_t
{
  char pszSampleName[128];
  char aliasName[64];
  char entchannel[64];
  float fBaseVolume;
  float fCurVolume;
  int dist;
  float fPitch;
};

/* 6807 */
struct cmd_function_s
{
  cmd_function_s *next;
  const char *name;
  const char *autoCompleteDir;
  const char *autoCompleteExt;
  void (__cdecl *function)();
};

/* 6808 */
#pragma pack(push, 4)
struct $35EB982ED5B47E6D386654F970493B10
{
  char buffer[16384];
  int size;
  bool compress;
};
#pragma pack(pop)

/* 6809 */
struct __declspec(align(4)) snd_channelvolgroup
{
  snd_volume_info_t channelvol[64];
  bool active;
};

/* 6810 */
struct snd_background_info_t
{
  float goalvolume;
  float goalrate;
};

/* 6811 */
#pragma pack(push, 4)
struct snd_enveffect
{
  int roomtype;
  float drylevel;
  float drygoal;
  float dryrate;
  float wetlevel;
  float wetgoal;
  float wetrate;
  bool active;
};
#pragma pack(pop)

/* 6812 */
struct snd_amplifier
{
  snd_listener *listener;
  int minRadius;
  int maxRadius;
  float falloffExp;
  float minVol;
  float maxVol;
};

/* 6813 */
#pragma pack(push, 2)
struct snd_entchannel_info_t
{
  char name[64];
  int priority;
  bool is3d;
  bool isRestricted;
  bool isPausable;
  int maxVoices;
  int voiceCount;
};
#pragma pack(pop)

/* 6814 */
#pragma pack(push, 2)
struct snd_local_t
{
  bool Initialized2d;
  bool Initialized3d;
  bool paused;
  int playbackIdCounter;
  unsigned int playback_rate;
  int playback_bits;
  int playback_channels;
  float timescale;
  int pausetime;
  int cpu;
  $35EB982ED5B47E6D386654F970493B10 restore;
  float volume;
  snd_volume_info_t mastervol;
  snd_channelvolgroup channelVolGroups[4];
  snd_channelvolgroup *channelvol;
  snd_background_info_t background[5];
  int ambient_track;
  float slaveLerp;
  snd_enveffect envEffects[3];
  snd_enveffect *effect;
  bool defaultPauseSettings[64];
  bool pauseSettings[64];
  snd_listener listeners[5];
  int time;
  int looptime;
  snd_amplifier amplifier;
  snd_entchannel_info_t entchaninfo[64];
  int entchannel_count;
  snd_channel_info_t chaninfo[53];
  int max_2D_channels;
  int max_3D_channels;
  int max_stream_channels;
};
#pragma pack(pop)

/* 6815 */
struct CmdArgs
{
  int nesting;
  int localClientNum[8];
  int argc[8];
  const char **argv[8];
};

/* 6816 */
#pragma pack(push, 8)
struct RegisteredUser
{
  bool active;
  unsigned __int64 xuid;
};
#pragma pack(pop)

/* 6817 */
#pragma pack(push, 8)
struct RemoteTalkerInfo
{
  bool registered;
  unsigned __int64 xuid;
  int natType;
  in_addr inaddr;
  int voiceConnectivityBits;
  int lastConnectivityTestTime;
};
#pragma pack(pop)

/* 6818 */
struct LocalTalkerInfo
{
  bool enabled;
};

/* 6819 */
#pragma pack(push, 8)
struct SessionData_s
{
  char *sessionName;
  void *sessionHandle;
  _XSESSION_INFO sessionInfo;
  bool keysGenerated;
  bool sessionStartCalled;
  bool registerUsersWithVoice;
  unsigned __int64 sessionNonce;
  int privateSlots;
  int publicSlots;
  int flags;
  IXHVEngine *voiceEngine;
  bool qosListenEnabled;
  RegisteredUser registeredUsers[24];
  RemoteTalkerInfo remoteTalkers[30];
  LocalTalkerInfo localTalkers[4];
  int voiceConnectivityBits;
};
#pragma pack(pop)

/* 6820 */
struct snd_physics_info
{
  snd_alias_list_t *aliasList;
  float org[3];
};

/* 6821 */
struct snd_physics
{
  snd_physics_info info[32];
  int count;
};

/* 6822 */
struct AsyncPlaySound
{
  snd_alias_t *alias;
  SndEntHandle sndEnt;
  float origin[3];
};

/* 6823 */
struct DvarValueStringBuf
{
  const char *pad;
  char string[12];
};

/* 6824 */
union DvarValue
{
  bool enabled;
  int integer;
  unsigned int unsignedInt;
  float value;
  float vector[4];
  const char *string;
  DvarValueStringBuf stringBuf;
  char color[4];
};

/* 6825 */
struct $BFBB53559BEAC4289F32B924847E59CB
{
  int stringCount;
  const char **strings;
};

/* 6826 */
struct $9CA192F9DB66A3CB7E01DE78A0DEA53D
{
  int min;
  int max;
};

/* 6827 */
struct $251C2428A496074035CACA7AAF3D55BD
{
  float min;
  float max;
};

/* 6828 */
union DvarLimits
{
  $BFBB53559BEAC4289F32B924847E59CB enumeration;
  $9CA192F9DB66A3CB7E01DE78A0DEA53D integer;
  $251C2428A496074035CACA7AAF3D55BD value;
  $251C2428A496074035CACA7AAF3D55BD vector;
};

/* 6829 */
struct dvar_s
{
  const char *name;
  const char *description;
  unsigned __int16 flags;
  char type;
  bool modified;
  DvarValue current;
  DvarValue latched;
  DvarValue reset;
  DvarLimits domain;
  dvar_s *next;
  dvar_s *hashNext;
};

/* 6830 */
struct LerpEntityStateEarthquake
{
  float scale;
  float radius;
  int duration;
};

/* 6831 */
struct LerpEntityStateVehicle
{
  float bodyPitch;
  float bodyRoll;
  float steerYaw;
  int materialTime;
  float gunPitch;
  float gunYaw;
  int team;
};

/* 6832 */
#pragma pack(push, 2)
struct cbrushside_t
{
  cplane_s *plane;
  unsigned int materialNum;
  __int16 firstAdjacentSideOffset;
  char edgeCount;
};
#pragma pack(pop)

/* 6833 */
struct LerpEntityStatePhysicsJitter
{
  float innerRadius;
  float minDisplacement;
  float maxDisplacement;
};

/* 6834 */
struct XModelHighMipBounds
{
  float mins[3];
  float maxs[3];
};

/* 6835 */
struct LerpEntityStatePlayer
{
  float leanf;
  int movementDir;
};

/* 6836 */
struct LerpEntityStateLoopFx
{
  float cullDist;
  int period;
};

/* 6837 */
struct LerpEntityStateCustomExplode
{
  int startTime;
};

/* 6838 */
struct LerpEntityStateTurret
{
  float gunAngles[3];
};

/* 6839 */
struct LerpEntityStateAnonymous
{
  int data[7];
};

/* 6840 */
struct LerpEntityStateExplosion
{
  float innerRadius;
  float magnitude;
};

/* 6841 */
struct LerpEntityStateBulletHit
{
  float start[3];
};

/* 6842 */
struct LerpEntityStatePrimaryLight
{
  char colorAndExp[4];
  float intensity;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
};

/* 6843 */
struct LerpEntityStateMissile
{
  int launchTime;
};

/* 6844 */
struct LerpEntityStateSoundBlend
{
  float lerp;
};

/* 6845 */
struct LerpEntityStateExplosionJolt
{
  float innerRadius;
  float impulse[3];
};

/* 6846 */
#pragma pack(push, 4)
struct BrushWrapper
{
  float mins[3];
  int contents;
  float maxs[3];
  unsigned int numsides;
  cbrushside_t *sides;
  __int16 axialMaterialNum[2][3];
  char *baseAdjacentSide;
  __int16 firstAdjacentSideOffsets[2][3];
  char edgeCount[2][3];
  int totalEdgeCount;
  cplane_s *planes;
};
#pragma pack(pop)

/* 6847 */
struct clientState_s
{
  int clientIndex;
  team_t team;
  int modelindex;
  int attachModelIndex[6];
  int attachTagIndex[6];
  char name[32];
  float maxSprintTimeMultiplier;
  int rank;
  int perks;
  int voiceConnectivityBits;
  int clanIndex;
  char clanAbbrev[8];
  int attachedVehEntNum;
  int attachedVehSlotIndex;
};

/* 6848 */
struct SprintState
{
  int sprintButtonUpRequired;
  int sprintDelay;
  int lastSprintStart;
  int lastSprintEnd;
  int sprintStartMaxLength;
};

/* 6849 */
struct MantleState
{
  float yaw;
  int timer;
  int transIndex;
  int flags;
};

/* 6850 */
struct ActionSlotParam_SpecifyWeapon
{
  unsigned int index;
};

/* 6851 */
struct ActionSlotParam
{
  ActionSlotParam_SpecifyWeapon specifyWeapon;
};

/* 6852 */
struct objective_t
{
  objectiveState_t state;
  float origin[3];
  int entNum;
  int teamNum;
  int icon;
};

/* 6853 */
struct $C96EA5EC2ACBB9C0BF22693F316ACC67
{
  char r;
  char g;
  char b;
  char a;
};

/* 6854 */
union hudelem_color_t
{
  $C96EA5EC2ACBB9C0BF22693F316ACC67 _s0;
  int rgba;
};

/* 6855 */
struct hudelem_s
{
  he_type_t type;
  float x;
  float y;
  float z;
  float fontScale;
  int font;
  int alignOrg;
  int alignScreen;
  hudelem_color_t color;
  hudelem_color_t fromColor;
  int fadeStartTime;
  int fadeTime;
  int label;
  int width;
  int height;
  int materialIndex;
  int fromWidth;
  int fromHeight;
  int scaleStartTime;
  int scaleTime;
  float fromX;
  float fromY;
  int fromAlignOrg;
  int fromAlignScreen;
  int moveStartTime;
  int moveTime;
  int time;
  int duration;
  float value;
  int text;
  float sort;
  hudelem_color_t glowColor;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  int soundID;
  int flags;
};

/* 6856 */
struct $34F5FF81F22F064F6056100ACF350368
{
  hudelem_s current[31];
  hudelem_s archival[31];
};

/* 6857 */
struct playerState_s
{
  int commandTime;
  int pm_type;
  int bobCycle;
  int pm_flags;
  int weapFlags;
  int otherFlags;
  int pm_time;
  float origin[3];
  float velocity[3];
  float oldVelocity[2];
  int weaponTime;
  int weaponDelay;
  int grenadeTimeLeft;
  int throwBackGrenadeOwner;
  int throwBackGrenadeTimeLeft;
  int weaponRestrictKickTime;
  int foliageSoundTime;
  int gravity;
  float leanf;
  int speed;
  float delta_angles[3];
  int groundEntityNum;
  float vLadderVec[3];
  int jumpTime;
  float jumpOriginZ;
  int legsTimer;
  int legsAnim;
  int torsoTimer;
  int torsoAnim;
  int legsAnimDuration;
  int torsoAnimDuration;
  int damageTimer;
  int damageDuration;
  int flinchYawAnim;
  int movementDir;
  int eFlags;
  int eventSequence;
  int events[4];
  unsigned int eventParms[4];
  int oldEventSequence;
  int clientNum;
  int offHandIndex;
  OffhandSecondaryClass offhandSecondary;
  unsigned int weapon;
  int weaponstate;
  unsigned int weaponShotCount;
  float fWeaponPosFrac;
  int adsDelayTime;
  int spreadOverride;
  int spreadOverrideState;
  int viewmodelIndex;
  float viewangles[3];
  int viewHeightTarget;
  float viewHeightCurrent;
  int viewHeightLerpTime;
  int viewHeightLerpTarget;
  int viewHeightLerpDown;
  float viewAngleClampBase[2];
  float viewAngleClampRange[2];
  int damageEvent;
  int damageYaw;
  int damagePitch;
  int damageCount;
  int stats[5];
  int ammo[128];
  int ammoclip[128];
  unsigned int weapons[4];
  unsigned int weaponold[4];
  unsigned int weaponrechamber[4];
  float proneDirection;
  float proneDirectionPitch;
  float proneTorsoPitch;
  ViewLockTypes viewlocked;
  int viewlocked_entNum;
  int cursorHint;
  int cursorHintString;
  int cursorHintEntIndex;
  int iCompassPlayerInfo;
  int radarEnabled;
  int locationSelectionInfo;
  SprintState sprintState;
  float fTorsoPitch;
  float fWaistPitch;
  float holdBreathScale;
  int holdBreathTimer;
  float moveSpeedScaleMultiplier;
  MantleState mantleState;
  float meleeChargeYaw;
  int meleeChargeDist;
  int meleeChargeTime;
  int perks;
  ActionSlotType actionSlotType[4];
  ActionSlotParam actionSlotParam[4];
  int entityEventSequence;
  int weapAnim;
  float aimSpreadScale;
  int shellshockIndex;
  int shellshockTime;
  int shellshockDuration;
  float dofNearStart;
  float dofNearEnd;
  float dofFarStart;
  float dofFarEnd;
  float dofNearBlur;
  float dofFarBlur;
  int hudElemLastAssignedSoundID;
  objective_t objective[16];
  char weaponmodels[128];
  int deltaTime;
  $34F5FF81F22F064F6056100ACF350368 hud;
};

/* 6858 */
struct clSnapshot_t
{
  int valid;
  int snapFlags;
  int serverTime;
  int messageNum;
  int deltaNum;
  int ping;
  int cmdNum;
  playerState_s ps;
  int numEntities;
  int numClients;
  int parseEntitiesNum;
  int parseClientsNum;
  int serverCommandNum;
};

/* 6859 */
union LerpEntityStateTypeUnion
{
  LerpEntityStateTurret turret;
  LerpEntityStateLoopFx loopFx;
  LerpEntityStatePrimaryLight primaryLight;
  LerpEntityStatePlayer player;
  LerpEntityStateVehicle vehicle;
  LerpEntityStateMissile missile;
  LerpEntityStateSoundBlend soundBlend;
  LerpEntityStateBulletHit bulletHit;
  LerpEntityStateEarthquake earthquake;
  LerpEntityStateCustomExplode customExplode;
  LerpEntityStateExplosion explosion;
  LerpEntityStateExplosionJolt explosionJolt;
  LerpEntityStatePhysicsJitter physicsJitter;
  LerpEntityStateAnonymous anonymous;
};

/* 6860 */
struct XModelStreamInfo
{
  XModelHighMipBounds *highMipBounds;
};

/* 6861 */
struct outPacket_t
{
  int p_cmdNumber;
  int p_serverTime;
  int p_realtime;
};

/* 6862 */
struct XaReverbSettings
{
  int presetOverridden;
  XAUDIOREVERBSETTINGS reverbSettings;
};

/* 6863 */
struct PhysMass
{
  float centerOfMass[3];
  float momentsOfInertia[3];
  float productsOfInertia[3];
};

/* 6864 */
struct gameState_t
{
  int stringOffsets[2304];
  char stringData[131072];
  int dataCount;
};

/* 6865 */
#pragma pack(push, 4)
struct usercmd_s
{
  int serverTime;
  int buttons;
  char weapon;
  char offHandIndex;
  int angles[3];
  char forwardmove;
  char rightmove;
  float meleeChargeYaw;
  char meleeChargeDist;
};
#pragma pack(pop)

/* 6866 */
struct ClientArchiveData
{
  int serverTime;
  float origin[3];
  float velocity[3];
  int bobCycle;
  int movementDir;
};

/* 6867 */
struct trajectory_t
{
  trType_t trType;
  int trTime;
  int trDuration;
  float trBase[3];
  float trDelta[3];
};

/* 6868 */
struct LerpEntityState
{
  int eFlags;
  trajectory_t pos;
  trajectory_t apos;
  LerpEntityStateTypeUnion u;
};

/* 6869 */
union $C889CF518587CB2833BFE41358FA5E4A
{
  int brushmodel;
  int item;
  int xmodel;
  int primaryLight;
};

/* 6870 */
union $0AC61FC53F35A99FE97BBC85FAE448D4
{
  int scale;
  int eventParm2;
  int helicopterStage;
};

/* 6871 */
union $F0982110E72E88EB10C2A75E8CDE34E2
{
  int hintString;
  int grenadeInPickupRange;
  int vehicleXModel;
};

/* 6872 */
struct entityState_s
{
  int number;
  int eType;
  LerpEntityState lerp;
  int time2;
  int otherEntityNum;
  int attackerEntityNum;
  int groundEntityNum;
  int loopSound;
  int surfType;
  $C889CF518587CB2833BFE41358FA5E4A index;
  int clientNum;
  int iHeadIcon;
  int iHeadIconTeam;
  int solid;
  unsigned int eventParm;
  int eventSequence;
  int events[4];
  int eventParms[4];
  int weapon;
  int weaponModel;
  int legsAnim;
  int torsoAnim;
  $0AC61FC53F35A99FE97BBC85FAE448D4 un1;
  $F0982110E72E88EB10C2A75E8CDE34E2 un2;
  float fTorsoPitch;
  float fWaistPitch;
  int partBits[4];
};

/* 6873 */
#pragma pack(push, 4)
struct clientActive_t
{
  bool usingAds;
  int timeoutcount;
  clSnapshot_t snap;
  int serverTime;
  int oldServerTime;
  int oldFrameServerTime;
  int serverTimeDelta;
  int oldSnapServerTime;
  int extrapolatedSnapshot;
  int newSnapshots;
  gameState_t gameState;
  char mapname[64];
  int parseEntitiesNum;
  int parseClientsNum;
  int mouseDx[2];
  int mouseDy[2];
  int mouseIndex;
  bool stanceHeld;
  StanceState stance;
  StanceState stancePosition;
  int stanceTime;
  int cgameUserCmdWeapon;
  int cgameUserCmdOffHandIndex;
  float cgameFOVSensitivityScale;
  float cgameMaxPitchSpeed;
  float cgameMaxYawSpeed;
  float cgameKickAngles[3];
  float cgameOrigin[3];
  float cgameVelocity[3];
  int cgameBobCycle;
  int cgameMovementDir;
  int cgameExtraButtons;
  int cgamePredictedDataServerTime;
  float viewangles[3];
  int serverId;
  int skelTimeStamp;
  volatile int skelMemPos;
  char skelMemory[262144];
  char *skelMemoryStart;
  bool allowedAllocSkel;
  usercmd_s cmds[128];
  int cmdNumber;
  ClientArchiveData clientArchive[128];
  int clientArchiveIndex;
  outPacket_t outPackets[32];
  clSnapshot_t snapshots[32];
  entityState_s entityBaselines[1024];
  entityState_s parseEntities[2048];
  clientState_s parseClients[2048];
  int corruptedTranslationFile;
  char translationVersion[256];
  float vehicleViewYaw;
  float vehicleViewPitch;
};
#pragma pack(pop)

/* 6874 */
struct FxSpawnDefLooping
{
  int intervalMsec;
  int count;
};

/* 6875 */
struct FxIntRange
{
  int base;
  int amplitude;
};

/* 6876 */
struct FxSpawnDefOneShot
{
  FxIntRange count;
};

/* 6877 */
union FxSpawnDef
{
  FxSpawnDefLooping looping;
  FxSpawnDefOneShot oneShot;
};

/* 6878 */
struct FxFloatRange
{
  float base;
  float amplitude;
};

/* 6879 */
struct FxElemAtlas
{
  char behavior;
  char index;
  char fps;
  char loopCount;
  char colIndexBits;
  char rowIndexBits;
  __int16 entryCount;
};

/* 6880 */
struct FxElemVec3Range
{
  float base[3];
  float amplitude[3];
};

/* 6881 */
struct FxElemVelStateInFrame
{
  FxElemVec3Range velocity;
  FxElemVec3Range totalDelta;
};

/* 6882 */
const struct FxElemVelStateSample
{
  FxElemVelStateInFrame local;
  FxElemVelStateInFrame world;
};

/* 6883 */
struct FxElemVisualState
{
  char color[4];
  float rotationDelta;
  float rotationTotal;
  float size[2];
  float scale;
};

/* 6884 */
const struct FxElemVisStateSample
{
  FxElemVisualState base;
  FxElemVisualState amplitude;
};

/* 6885 */
struct GfxDrawSurfFields
{
  __int64 _bf0;
};

/* 6886 */
union GfxDrawSurf
{
  GfxDrawSurfFields fields;
  unsigned __int64 packed;
};

/* 6887 */
struct __declspec(align(8)) MaterialInfo
{
  const char *name;
  char gameFlags;
  char sortKey;
  char textureAtlasRowCount;
  char textureAtlasColumnCount;
  GfxDrawSurf drawSurf;
  unsigned int surfaceTypeBits;
};

/* 6888 */
#pragma pack(push, 2)
struct MaterialTechniqueSet
{
  const char *name;
  char worldVertFormat;
  char unused[2];
  MaterialTechniqueSet *remappedTechniqueSet;
  MaterialTechnique *techniques[26];
};
#pragma pack(pop)

/* 6889 */
struct MaterialStreamRouting
{
  char source;
  char dest;
};

/* 6890 */
union MaterialVertexStreamRouting
{
  MaterialStreamRouting data[16];
  D3DVertexDeclaration *decl[15];
};

/* 6891 */
struct MaterialVertexDeclaration
{
  char streamCount;
  bool hasOptionalSource;
  __declspec(align(4)) MaterialVertexStreamRouting routing;
};

/* 6892 */
struct GfxVertexShaderLoadDef
{
  char *cachedPart;
  char *physicalPart;
  unsigned __int16 cachedPartSize;
  unsigned __int16 physicalPartSize;
};

/* 6893 */
union MaterialVertexShaderProgram
{
  D3DVertexShader *vs;
  GfxVertexShaderLoadDef loadDef;
};

/* 6894 */
struct MaterialVertexShader
{
  const char *name;
  MaterialVertexShaderProgram prog;
};

/* 6895 */
struct GfxPixelShaderLoadDef
{
  char *cachedPart;
  char *physicalPart;
  unsigned __int16 cachedPartSize;
  unsigned __int16 physicalPartSize;
};

/* 6896 */
union MaterialPixelShaderProgram
{
  D3DPixelShader *ps;
  GfxPixelShaderLoadDef loadDef;
};

/* 6897 */
struct MaterialPixelShader
{
  const char *name;
  MaterialPixelShaderProgram prog;
};

/* 6898 */
struct MaterialArgumentCodeConst
{
  unsigned __int16 index;
  char firstRow;
  char rowCount;
};

/* 6899 */
union MaterialArgumentDef
{
  const float *literalConst;
  MaterialArgumentCodeConst codeConst;
  unsigned int codeSampler;
  unsigned int nameHash;
};

/* 6900 */
struct MaterialShaderArgument
{
  unsigned __int16 type;
  unsigned __int16 dest;
  MaterialArgumentDef u;
};

/* 6901 */
#pragma pack(push, 4)
struct MaterialPass
{
  MaterialVertexDeclaration *vertexDecl;
  MaterialVertexShader *vertexShaderArray[15];
  MaterialVertexShader *vertexShader;
  MaterialPixelShader *pixelShader;
  char perPrimArgCount;
  char perObjArgCount;
  char stableArgCount;
  char customSamplerFlags;
  char precompiledIndex;
  MaterialShaderArgument *args;
};
#pragma pack(pop)

/* 6902 */
struct MaterialTechnique
{
  const char *name;
  unsigned __int16 flags;
  unsigned __int16 passCount;
  MaterialPass passArray[1];
};

/* 6903 */
union GfxTexture
{
  D3DBaseTexture *basemap;
  D3DTexture *map;
  D3DVolumeTexture *volmap;
  D3DCubeTexture *cubemap;
  GfxImageLoadDef *loadDef;
};

/* 6904 */
struct GfxImageLoadDef
{
  char levelCount;
  char flags;
  __int16 dimensions[3];
  int format;
  GfxTexture texture;
};

/* 6905 */
struct CardMemory
{
  int platform[1];
};

/* 6906 */
struct GfxImage
{
  MapType mapType;
  GfxTexture texture;
  char semantic;
  __declspec(align(4)) CardMemory cardMemory;
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned __int16 depth;
  char category;
  __declspec(align(2)) char *pixels;
  unsigned int baseSize;
  unsigned __int16 streamSlot;
  bool streaming;
  __declspec(align(2)) const char *name;
};

/* 6907 */
struct WaterWritable
{
  float floatTime;
};

/* 6908 */
struct water_t
{
  WaterWritable writable;
  float *H0X;
  float *H0Y;
  float *wTerm;
  int M;
  int N;
  float Lx;
  float Lz;
  float gravity;
  float windvel;
  float winddir[2];
  float amplitude;
  float codeConstant[4];
  GfxImage *image;
};

/* 6909 */
struct MaterialWaterDef
{
  int textureWidth;
  float horizontalWorldLength;
  float verticalWorldLength;
  float amplitude;
  float windSpeed;
  float windDirection[2];
  water_t *map;
};

/* 6910 */
union MaterialTextureDefInfo
{
  GfxImage *image;
  MaterialWaterDef *water;
};

/* 6911 */
struct MaterialTextureDef
{
  unsigned int nameHash;
  char nameStart;
  char nameEnd;
  char samplerState;
  char semantic;
  MaterialTextureDefInfo u;
};

/* 6912 */
struct MaterialConstantDef
{
  unsigned int nameHash;
  char name[12];
  float literal[4];
};

/* 6913 */
struct GfxStateBits
{
  unsigned int loadBits[2];
};

/* 6914 */
#pragma pack(push, 2)
struct Material
{
  MaterialInfo info;
  char stateBitsEntry[26];
  char textureCount;
  char constantCount;
  char stateBitsCount;
  char stateFlags;
  char cameraRegion;
  MaterialTechniqueSet *techniqueSet;
  MaterialTextureDef *textureTable;
  MaterialConstantDef *constantTable;
  GfxStateBits *stateBitsTable;
};
#pragma pack(pop)

/* 6915 */
struct FxElemMarkVisuals
{
  Material *materials[2];
};

/* 6916 */
struct DObjAnimMat
{
  float quat[4];
  float trans[3];
  float transWeight;
};

/* 6917 */
struct XSurfaceVertexInfo
{
  __int16 vertCount[4];
  unsigned __int16 *vertsBlend;
};

/* 6918 */
union GfxColor
{
  unsigned int packed;
  char array[4];
};

/* 6919 */
union PackedTexCoords
{
  unsigned int packed;
};

/* 6920 */
union PackedUnitVec
{
  unsigned int packed;
};

/* 6921 */
struct GfxPackedVertex
{
  float xyz[3];
  float binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 6922 */
struct XSurfaceCollisionAabb
{
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
};

/* 6923 */
struct XSurfaceCollisionNode
{
  XSurfaceCollisionAabb aabb;
  unsigned __int16 childBeginIndex;
  unsigned __int16 childCount;
};

/* 6924 */
struct XSurfaceCollisionLeaf
{
  unsigned __int16 triangleBeginIndex;
};

/* 6925 */
struct XSurfaceCollisionTree
{
  float trans[3];
  float scale[3];
  unsigned int nodeCount;
  XSurfaceCollisionNode *nodes;
  unsigned int leafCount;
  XSurfaceCollisionLeaf *leafs;
};

/* 6926 */
struct XRigidVertList
{
  unsigned __int16 boneOffset;
  unsigned __int16 vertCount;
  unsigned __int16 triOffset;
  unsigned __int16 triCount;
  XSurfaceCollisionTree *collisionTree;
};

/* 6927 */
#pragma pack(push, 4)
struct XSurface
{
  char tileMode;
  bool deformed;
  unsigned __int16 vertCount;
  unsigned __int16 triCount;
  unsigned __int16 *triIndices;
  XSurfaceVertexInfo vertInfo;
  D3DVertexBuffer vb;
  GfxPackedVertex *verts;
  unsigned int vertListCount;
  XRigidVertList *vertList;
  D3DIndexBuffer indexBuffer;
  int partBits[4];
};
#pragma pack(pop)

/* 6928 */
struct XModelLodInfo
{
  float dist;
  unsigned __int16 numsurfs;
  unsigned __int16 surfIndex;
  int partBits[4];
};

/* 6929 */
struct XModelCollSurf_s
{
  float mins[3];
  float maxs[3];
  int boneIdx;
  int contents;
  int surfFlags;
};

/* 6930 */
struct XBoneInfo
{
  float bounds[2][3];
  float offset[3];
  float radiusSquared;
};

/* 6931 */
#pragma pack(push, 4)
struct PhysPreset
{
  const char *name;
  int type;
  float mass;
  float bounce;
  float friction;
  float bulletForceScale;
  float explosiveForceScale;
  const char *sndAliasPrefix;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  bool tempDefaultToCylinder;
};
#pragma pack(pop)

/* 6932 */
struct PhysGeomInfo
{
  BrushWrapper *brush;
  int type;
  float orientation[3][3];
  float offset[3];
  float halfLengths[3];
};

/* 6933 */
struct PhysGeomList
{
  unsigned int count;
  PhysGeomInfo *geoms;
  PhysMass mass;
};

/* 6934 */
#pragma pack(push, 4)
struct XModel
{
  const char *name;
  char numBones;
  char numRootBones;
  char numsurfs;
  unsigned __int16 *boneNames;
  char *parentList;
  __int16 *quats;
  float *trans;
  char *partClassification;
  DObjAnimMat *baseMat;
  XSurface *surfs;
  Material **materialHandles;
  XModelLodInfo lodInfo[4];
  XModelCollSurf_s *collSurfs;
  int numCollSurfs;
  int contents;
  XBoneInfo *boneInfo;
  float radius;
  float mins[3];
  float maxs[3];
  __int16 numLods;
  __int16 collLod;
  XModelStreamInfo streamInfo;
  int memUsage;
  char flags;
  PhysPreset *physPreset;
  PhysGeomList *physGeoms;
};
#pragma pack(pop)

/* 6935 */
struct FxEffectDef
{
  const char *name;
  int flags;
  int totalSize;
  int msecLoopingLife;
  int elemDefCountLooping;
  int elemDefCountOneShot;
  int elemDefCountEmission;
  FxElemDef *elemDefs;
};

/* 6936 */
union FxEffectDefRef
{
  FxEffectDef *handle;
  const char *name;
};

/* 6937 */
union FxElemVisuals
{
  const void *anonymous;
  Material *material;
  XModel *model;
  FxEffectDefRef effectDef;
  const char *soundName;
};

/* 6938 */
union FxElemDefVisuals
{
  FxElemMarkVisuals *markArray;
  FxElemVisuals *array;
  FxElemVisuals instance;
};

/* 6939 */
struct FxTrailVertex
{
  float pos[2];
  float normal[2];
  float texCoord;
};

/* 6940 */
struct FxTrailDef
{
  int scrollTimeMsec;
  int repeatDist;
  int splitDist;
  int vertCount;
  FxTrailVertex *verts;
  int indCount;
  unsigned __int16 *inds;
};

/* 6941 */
const struct FxElemDef
{
  int flags;
  FxSpawnDef spawn;
  FxFloatRange spawnRange;
  FxFloatRange fadeInRange;
  FxFloatRange fadeOutRange;
  float spawnFrustumCullRadius;
  FxIntRange spawnDelayMsec;
  FxIntRange lifeSpanMsec;
  FxFloatRange spawnOrigin[3];
  FxFloatRange spawnOffsetRadius;
  FxFloatRange spawnOffsetHeight;
  FxFloatRange spawnAngles[3];
  FxFloatRange angularVelocity[3];
  FxFloatRange initialRotation;
  FxFloatRange gravity;
  FxFloatRange reflectionFactor;
  FxElemAtlas atlas;
  char elemType;
  char visualCount;
  char velIntervalCount;
  char visStateIntervalCount;
  FxElemVelStateSample *velSamples;
  FxElemVisStateSample *visSamples;
  FxElemDefVisuals visuals;
  float collMins[3];
  float collMaxs[3];
  FxEffectDefRef effectOnImpact;
  FxEffectDefRef effectOnDeath;
  FxEffectDefRef effectEmitted;
  FxFloatRange emitDist;
  FxFloatRange emitDistVariance;
  FxTrailDef *trailDef;
  char sortOrder;
  char lightingFrac;
  char unused[2];
};

/* 6942 */
struct FxImpactEntry
{
  FxEffectDef *nonflesh[29];
  FxEffectDef *flesh[4];
};

/* 6943 */
#pragma pack(push, 4)
struct clientUIActive_t
{
  bool active;
  bool isRunning;
  bool cgameInitialized;
  bool cgameInitCalled;
  int keyCatchers;
  bool displayHUDWithKeycatchUI;
  connstate_t connectionState;
  int nextScrollTime;
  bool invited;
  int numVoicePacketsSent;
};
#pragma pack(pop)

/* 6944 */
#pragma pack(push, 4)
struct netadr_t
{
  netadrtype_t type;
  char ip[4];
  unsigned __int16 port;
};
#pragma pack(pop)

/* 6945 */
struct netProfilePacket_t
{
  int iTime;
  int iSize;
  int bFragment;
};

/* 6946 */
struct netProfileStream_t
{
  netProfilePacket_t packets[60];
  int iCurrPacket;
  int iBytesPerSecond;
  int iLastBPSCalcTime;
  int iCountedPackets;
  int iCountedFragments;
  int iFragmentPercentage;
  int iLargestPacket;
  int iSmallestPacket;
};

/* 6947 */
struct netProfileInfo_t
{
  netProfileStream_t send;
  netProfileStream_t recieve;
};

/* 6948 */
struct netchan_t
{
  int outgoingSequence;
  netsrc_t sock;
  int dropped;
  int incomingSequence;
  netadr_t remoteAddress;
  int fragmentSequence;
  int fragmentLength;
  char *fragmentBuffer;
  int fragmentBufferSize;
  int unsentFragments;
  int unsentFragmentStart;
  int unsentLength;
  char *unsentBuffer;
  int unsentBufferSize;
  netProfileInfo_t prof;
};

/* 6949 */
#pragma pack(push, 4)
struct clientConnection_t
{
  int qport;
  int clientNum;
  int lastPacketSentTime;
  int lastPacketTime;
  netadr_t serverAddress;
  int connectTime;
  int connectPacketCount;
  char serverMessage[256];
  int challenge;
  int checksumFeed;
  int reliableSequence;
  int reliableAcknowledge;
  char reliableCommands[128][1024];
  int serverMessageSequence;
  int serverCommandSequence;
  int lastExecutedServerCommand;
  char serverCommands[128][1024];
  int timeDemoBaseTime;
  netchan_t netchan;
  char netchanOutgoingBuffer[2048];
  char netchanIncomingBuffer[131072];
  netProfileInfo_t OOBProf;
  char statPacketsToSend;
  int statPacketSendTime[7];
};
#pragma pack(pop)

/* 6950 */
struct ClientVoicePacket_t
{
  char data[10];
};

/* 6951 */
struct voiceCommunication_t
{
  ClientVoicePacket_t voicePackets[10];
  int voicePacketCount;
  int voicePacketLastTransmit;
};

/* 6952 */
struct FxImpactTable
{
  const char *name;
  FxImpactEntry *table;
};

/* 6953 */
struct XModelPiece
{
  XModel *model;
  float offset[3];
};

/* 6954 */
struct XModelPieces
{
  const char *name;
  int numpieces;
  XModelPiece *pieces;
};

/* 6955 */
union XAnimIndices
{
  char *_1;
  unsigned __int16 *_2;
  void *data;
};

/* 6956 */
#pragma pack(push, 4)
struct XAnimNotifyInfo
{
  unsigned __int16 name;
  float time;
};
#pragma pack(pop)

/* 6957 */
union XAnimDynamicFrames
{
  char (*_1)[3];
  unsigned __int16 (*_2)[3];
};

/* 6958 */
union XAnimDynamicIndices
{
  char _1[1];
  unsigned __int16 _2[1];
};

/* 6959 */
#pragma pack(push, 4)
struct XAnimPartTransFrames
{
  float mins[3];
  float size[3];
  XAnimDynamicFrames frames;
  XAnimDynamicIndices indices;
};
#pragma pack(pop)

/* 6960 */
union XAnimPartTransData
{
  XAnimPartTransFrames frames;
  float frame0[3];
};

/* 6961 */
struct XAnimPartTrans
{
  unsigned __int16 size;
  char smallTrans;
  __declspec(align(2)) XAnimPartTransData u;
};

/* 6962 */
#pragma pack(push, 4)
struct XAnimDeltaPartQuatDataFrames
{
  __int16 (*frames)[2];
  XAnimDynamicIndices indices;
};
#pragma pack(pop)

/* 6963 */
union XAnimDeltaPartQuatData
{
  XAnimDeltaPartQuatDataFrames frames;
  __int16 frame0[2];
};

/* 6964 */
struct XAnimDeltaPartQuat
{
  unsigned __int16 size;
  __declspec(align(4)) XAnimDeltaPartQuatData u;
};

/* 6965 */
struct XAnimDeltaPart
{
  XAnimPartTrans *trans;
  XAnimDeltaPartQuat *quat;
};

/* 6966 */
#pragma pack(push, 4)
struct XAnimParts
{
  const char *name;
  unsigned __int16 dataByteCount;
  unsigned __int16 dataShortCount;
  unsigned __int16 dataIntCount;
  unsigned __int16 randomDataByteCount;
  unsigned __int16 randomDataIntCount;
  unsigned __int16 numframes;
  bool bLoop;
  bool bDelta;
  char boneCount[12];
  char notifyCount;
  char assetType;
  bool pad;
  unsigned int randomDataShortCount;
  unsigned int indexCount;
  float framerate;
  float frequency;
  unsigned __int16 *names;
  char *dataByte;
  __int16 *dataShort;
  int *dataInt;
  __int16 *randomDataShort;
  char *randomDataByte;
  int *randomDataInt;
  XAnimIndices indices;
  XAnimNotifyInfo *notify;
  XAnimDeltaPart *deltaPart;
};
#pragma pack(pop)

/* 6967 */
struct cStaticModelWritable
{
  unsigned __int16 nextModelInWorldSector;
};

/* 6968 */
#pragma pack(push, 4)
struct cStaticModel_s
{
  cStaticModelWritable writable;
  XModel *xmodel;
  float origin[3];
  float invScaledAxis[3][3];
  float absmin[3];
  float absmax[3];
};
#pragma pack(pop)

/* 6969 */
struct dmaterial_t
{
  char material[64];
  int surfaceFlags;
  int contentFlags;
};

/* 6970 */
struct cNode_t
{
  cplane_s *plane;
  __int16 children[2];
};

/* 6971 */
#pragma pack(push, 4)
struct cLeaf_t
{
  unsigned __int16 firstCollAabbIndex;
  unsigned __int16 collAabbCount;
  int brushContents;
  int terrainContents;
  float mins[3];
  float maxs[3];
  int leafBrushNode;
  __int16 cluster;
};
#pragma pack(pop)

/* 6972 */
struct cLeafBrushNodeLeaf_t
{
  unsigned __int16 *brushes;
};

/* 6973 */
struct cLeafBrushNodeChildren_t
{
  float dist;
  float range;
  unsigned __int16 childOffset[2];
};

/* 6974 */
union cLeafBrushNodeData_t
{
  cLeafBrushNodeLeaf_t leaf;
  cLeafBrushNodeChildren_t children;
};

/* 6975 */
#pragma pack(push, 2)
struct cLeafBrushNode_s
{
  char axis;
  __int16 leafBrushCount;
  int contents;
  cLeafBrushNodeData_t data;
};
#pragma pack(pop)

/* 6976 */
struct CollisionBorder
{
  float distEq[3];
  float zBase;
  float zSlope;
  float start;
  float length;
};

/* 6977 */
#pragma pack(push, 4)
struct CollisionPartition
{
  char triCount;
  char borderCount;
  int firstTri;
  CollisionBorder *borders;
};
#pragma pack(pop)

/* 6978 */
union CollisionAabbTreeIndex
{
  int firstChildIndex;
  int partitionIndex;
};

/* 6979 */
struct CollisionAabbTree
{
  float origin[3];
  float halfSize[3];
  unsigned __int16 materialIndex;
  unsigned __int16 childCount;
  CollisionAabbTreeIndex u;
};

/* 6980 */
struct cmodel_t
{
  float mins[3];
  float maxs[3];
  float radius;
  cLeaf_t leaf;
};

/* 6981 */
struct __declspec(align(16)) cbrush_t
{
  float mins[3];
  int contents;
  float maxs[3];
  unsigned int numsides;
  cbrushside_t *sides;
  __int16 axialMaterialNum[2][3];
  char *baseAdjacentSide;
  __int16 firstAdjacentSideOffsets[2][3];
  char edgeCount[2][3];
};

/* 6982 */
struct MapEnts
{
  const char *name;
  char *entityString;
  int numEntityChars;
};

/* 6983 */
struct GfxPlacement
{
  float quat[4];
  float origin[3];
};

/* 6984 */
struct DynEntityDef
{
  DynEntityType type;
  GfxPlacement pose;
  XModel *xModel;
  unsigned __int16 brushModel;
  unsigned __int16 physicsBrushModel;
  FxEffectDef *destroyFx;
  XModelPieces *destroyPieces;
  PhysPreset *physPreset;
  int health;
  PhysMass mass;
  int contents;
};

/* 6985 */
struct DynEntityPose
{
  GfxPlacement pose;
  float radius;
};

/* 6986 */
struct DynEntityClient
{
  int physObjId;
  unsigned __int16 flags;
  unsigned __int16 lightingHandle;
  int health;
};

/* 6987 */
struct DynEntityColl
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  float linkMins[2];
  float linkMaxs[2];
};

/* 6988 */
#pragma pack(push, 4)
struct clipMap_t
{
  const char *name;
  int planeCount;
  cplane_s *planes;
  unsigned int numStaticModels;
  cStaticModel_s *staticModelList;
  unsigned int numMaterials;
  dmaterial_t *materials;
  unsigned int numBrushSides;
  cbrushside_t *brushsides;
  unsigned int numBrushEdges;
  char *brushEdges;
  unsigned int numNodes;
  cNode_t *nodes;
  unsigned int numLeafs;
  cLeaf_t *leafs;
  unsigned int leafbrushNodesCount;
  cLeafBrushNode_s *leafbrushNodes;
  unsigned int numLeafBrushes;
  unsigned __int16 *leafbrushes;
  unsigned int numLeafSurfaces;
  unsigned int *leafsurfaces;
  unsigned int vertCount;
  float (*verts)[3];
  int triCount;
  unsigned __int16 *triIndices;
  char *triEdgeIsWalkable;
  int borderCount;
  CollisionBorder *borders;
  int partitionCount;
  CollisionPartition *partitions;
  int aabbTreeCount;
  CollisionAabbTree *aabbTrees;
  unsigned int numSubModels;
  cmodel_t *cmodels;
  unsigned __int16 numBrushes;
  cbrush_t *brushes;
  int numClusters;
  int clusterBytes;
  char *visibility;
  int vised;
  MapEnts *mapEnts;
  cbrush_t *box_brush;
  cmodel_t box_model;
  unsigned __int16 dynEntCount[2];
  DynEntityDef *dynEntDefList[2];
  DynEntityPose *dynEntPoseList[2];
  DynEntityClient *dynEntClientList[2];
  DynEntityColl *dynEntCollList[2];
  unsigned int checksum;
};
#pragma pack(pop)

/* 6989 */
struct ComPrimaryLight
{
  char type;
  char canUseShadowMap;
  char exponent;
  char unused;
  float color[3];
  float dir[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  float cosHalfFovExpanded;
  float rotationLimit;
  float translationLimit;
  const char *defName;
};

/* 6990 */
struct ComWorld
{
  const char *name;
  int isInUse;
  unsigned int primaryLightCount;
  ComPrimaryLight *primaryLights;
};

/* 6991 */
struct pathlink_s
{
  float fDist;
  unsigned __int16 nodeNum;
  char disconnectCount;
  char negotiationLink;
  char ubBadPlaceCount[4];
};

/* 6992 */
struct pathnode_constant_t
{
  nodeType type;
  unsigned __int16 spawnflags;
  unsigned __int16 targetname;
  unsigned __int16 script_linkName;
  unsigned __int16 script_noteworthy;
  unsigned __int16 target;
  unsigned __int16 animscript;
  int animscriptfunc;
  float vOrigin[3];
  float fAngle;
  float forward[2];
  float fRadius;
  float minUseDistSq;
  __int16 wOverlapNode[2];
  __int16 wChainId;
  __int16 wChainDepth;
  __int16 wChainParent;
  unsigned __int16 totalLinkCount;
  pathlink_s *Links;
};

/* 6993 */
struct pathnode_dynamic_t
{
  struct sentient_s *pOwner;
  int iFreeTime;
  int iValidTime[3];
  int inPlayerLOSTime;
  __int16 wLinkCount;
  __int16 wOverlapCount;
  __int16 turretEntNumber;
  __int16 userCount;
};

/* 6994 */
struct pathnode_t
{
  pathnode_constant_t constant;
  pathnode_dynamic_t dynamic;
  pathnode_transient_t transient;
};

/* 6995 */
struct pathnode_transient_t
{
  int iSearchFrame;
  pathnode_t *pNextOpen;
  pathnode_t *pPrevOpen;
  pathnode_t *pParent;
  float fCost;
  float fHeuristic;
  float costFactor;
};

/* 6996 */
struct pathnode_tree_t
{
  int axis;
  float dist;
  pathnode_tree_info_t u;
};

/* 6997 */
struct pathnode_tree_nodes_t
{
  int nodeCount;
  pathnode_t **nodes;
};

/* 6998 */
union pathnode_tree_info_t
{
  pathnode_tree_t *child[2];
  pathnode_tree_nodes_t s;
};

/* 6999 */
struct PathData
{
  unsigned int nodeCount;
  pathnode_t *nodes;
  unsigned int chainNodeCount;
  unsigned __int16 *chainNodeForNode;
  unsigned __int16 *nodeForChainNode;
  int visBytes;
  char *pathVis;
  int nodeTreeCount;
  pathnode_tree_t *nodeTree;
};

/* 7000 */
struct GameWorldSp
{
  const char *name;
  PathData path;
};

/* 7001 */
struct GameWorldMp
{
  const char *name;
};

/* 7002 */
struct GfxStreamingAabbTree
{
  unsigned __int16 firstItem;
  unsigned __int16 itemCount;
  unsigned __int16 firstChild;
  unsigned __int16 childCount;
  float mins[3];
  float maxs[3];
};

/* 7003 */
struct GfxWorldStreamInfo
{
  int aabbTreeCount;
  GfxStreamingAabbTree *aabbTrees;
  int leafRefCount;
  int *leafRefs;
};

/* 7004 */
struct GfxWorldVertex
{
  float xyz[3];
  float binormalSign;
  GfxColor color;
  float texCoord[2];
  float lmapCoord[2];
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 7005 */
struct GfxWorldVertexData
{
  GfxWorldVertex *vertices;
  D3DVertexBuffer worldVb;
};

/* 7006 */
struct GfxWorldVertexLayerData
{
  char *data;
  D3DVertexBuffer layerVb;
};

/* 7007 */
#pragma pack(push, 4)
struct SunLightParseParams
{
  char name[64];
  float ambientScale;
  float ambientColor[3];
  float diffuseFraction;
  float sunLight;
  float sunColor[3];
  float diffuseColor[3];
  bool diffuseColorHasBeenSet;
  float angles[3];
};
#pragma pack(pop)

/* 7008 */
#pragma pack(push, 4)
struct GfxLightImage
{
  GfxImage *image;
  char samplerState;
};
#pragma pack(pop)

/* 7009 */
struct GfxLightDef
{
  const char *name;
  GfxLightImage attenuation;
  int lmapLookupStart;
};

/* 7010 */
struct GfxLight
{
  char type;
  char canUseShadowMap;
  char unused[2];
  float color[3];
  float dir[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  unsigned int spotShadowIndex;
  GfxLightDef *def;
};

/* 7011 */
struct GfxReflectionProbe
{
  float origin[3];
  GfxImage *reflectionImage;
};

/* 7012 */
struct GfxWorldDpvsPlanes
{
  int cellCount;
  cplane_s *planes;
  unsigned __int16 *nodes;
};

/* 7013 */
struct GfxAabbTree
{
  float mins[3];
  float maxs[3];
  unsigned __int16 childCount;
  unsigned __int16 surfaceCount;
  unsigned __int16 startSurfIndex;
  unsigned __int16 smodelIndexCount;
  unsigned __int16 *smodelIndexes;
  int childrenOffset;
};

/* 7014 */
#pragma pack(push, 4)
struct GfxPortal
{
  GfxPortalWritable writable;
  DpvsPlane plane;
  GfxCell *cell;
  float (*vertices)[3];
  char vertexCount;
  float hullAxis[2][3];
};
#pragma pack(pop)

/* 7015 */
struct GfxPortalWritable
{
  bool isQueued;
  bool isAncestor;
  char recursionDepth;
  char hullPointCount;
  float (*hullPoints)[2];
  GfxPortal *queuedParent;
};

/* 7016 */
struct DpvsPlane
{
  float coeffs[4];
  char side[3];
  char pad;
};

/* 7017 */
#pragma pack(push, 4)
struct GfxCell
{
  float mins[3];
  float maxs[3];
  int aabbTreeCount;
  GfxAabbTree *aabbTree;
  int portalCount;
  GfxPortal *portals;
  int cullGroupCount;
  int *cullGroups;
  char reflectionProbeCount;
  char *reflectionProbes;
};
#pragma pack(pop)

/* 7018 */
struct GfxLightmapArray
{
  GfxImage *primary;
  GfxImage *secondary;
};

/* 7019 */
struct GfxLightGridEntry
{
  unsigned __int16 colorsIndex;
  char primaryLightIndex;
  char needsTrace;
};

/* 7020 */
struct GfxLightGridColors
{
  char rgb[56][3];
};

/* 7021 */
#pragma pack(push, 4)
struct GfxLightGrid
{
  bool hasLightRegions;
  unsigned int sunPrimaryLightIndex;
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
  unsigned int rowAxis;
  unsigned int colAxis;
  unsigned __int16 *rowDataStart;
  unsigned int rawRowDataSize;
  char *rawRowData;
  unsigned int entryCount;
  GfxLightGridEntry *entries;
  unsigned int colorCount;
  GfxLightGridColors *colors;
};
#pragma pack(pop)

/* 7022 */
struct GfxBrushModelWritable
{
  float mins[3];
  float maxs[3];
};

/* 7023 */
struct GfxBrushModel
{
  GfxBrushModelWritable writable;
  float bounds[2][3];
  unsigned int surfaceCount;
  unsigned int startSurfIndex;
};

/* 7024 */
struct MaterialMemory
{
  Material *material;
  int memory;
};

/* 7025 */
#pragma pack(push, 4)
struct sunflare_t
{
  bool hasValidData;
  Material *spriteMaterial;
  Material *flareMaterial;
  float spriteSize;
  float flareMinSize;
  float flareMinDot;
  float flareMaxSize;
  float flareMaxDot;
  float flareMaxAlpha;
  int flareFadeInTime;
  int flareFadeOutTime;
  float blindMinDot;
  float blindMaxDot;
  float blindMaxDarken;
  int blindFadeInTime;
  int blindFadeOutTime;
  float glareMinDot;
  float glareMaxDot;
  float glareMaxLighten;
  int glareFadeInTime;
  int glareFadeOutTime;
  float sunFxPosition[3];
};
#pragma pack(pop)

/* 7026 */
struct XModelDrawInfo
{
  unsigned __int16 lod;
  unsigned __int16 surfId;
};

/* 7027 */
struct GfxSceneDynModel
{
  XModelDrawInfo info;
  unsigned __int16 dynEntId;
};

/* 7028 */
struct BModelDrawInfo
{
  unsigned __int16 surfId;
};

/* 7029 */
struct GfxSceneDynBrush
{
  BModelDrawInfo info;
  unsigned __int16 dynEntId;
};

/* 7030 */
struct GfxShadowGeometry
{
  unsigned __int16 surfaceCount;
  unsigned __int16 smodelCount;
  unsigned __int16 *sortedSurfIndex;
  unsigned __int16 *smodelIndex;
};

/* 7031 */
struct GfxLightRegionAxis
{
  float dir[3];
  float midPoint;
  float halfSize;
};

/* 7032 */
struct GfxLightRegionHull
{
  float kdopMidPoint[9];
  float kdopHalfSize[9];
  unsigned int axisCount;
  GfxLightRegionAxis *axis;
};

/* 7033 */
struct GfxLightRegion
{
  unsigned int hullCount;
  GfxLightRegionHull *hulls;
};

/* 7034 */
struct GfxStaticModelInst
{
  float mins[3];
  float maxs[3];
  GfxColor groundLighting;
};

/* 7035 */
struct srfTriangles_t
{
  int vertexLayerData;
  int firstVertex;
  unsigned __int16 vertexCount;
  unsigned __int16 triCount;
  int baseIndex;
  float topMipMins[3];
  float topMipMaxs[3];
};

/* 7036 */
struct GfxSurface
{
  srfTriangles_t tris;
  Material *material;
  char lightmapIndex;
  char reflectionProbeIndex;
  char primaryLightIndex;
  bool castsSunShadow;
  float bounds[2][3];
};

/* 7037 */
struct GfxCullGroup
{
  float mins[3];
  float maxs[3];
  int surfaceCount;
  int startSurfIndex;
};

/* 7038 */
struct GfxPackedPlacement
{
  float origin[3];
  PackedUnitVec axis[3];
  float scale;
};

/* 7039 */
#pragma pack(push, 4)
struct GfxStaticModelDrawInst
{
  float cullDist;
  GfxPackedPlacement placement;
  XModel *model;
  char reflectionProbeIndex;
  char primaryLightIndex;
  unsigned __int16 lightingHandle;
  char flags;
};
#pragma pack(pop)

/* 7040 */
struct GfxWorldDpvsStatic
{
  unsigned int smodelCount;
  unsigned int staticSurfaceCount;
  unsigned int litSurfsBegin;
  unsigned int litSurfsEnd;
  unsigned int decalSurfsBegin;
  unsigned int decalSurfsEnd;
  unsigned int emissiveSurfsBegin;
  unsigned int emissiveSurfsEnd;
  char *smodelVisData[3];
  char *surfaceVisData[3];
  unsigned int *lodData;
  unsigned __int16 *sortedSurfIndex;
  GfxStaticModelInst *smodelInsts;
  GfxSurface *surfaces;
  GfxCullGroup *cullGroups;
  GfxStaticModelDrawInst *smodelDrawInsts;
  GfxDrawSurf *surfaceMaterials;
  unsigned int *surfaceCastsSunShadow;
  volatile int usageCount;
};

/* 7041 */
struct GfxWorldDpvsDynamic
{
  unsigned int dynEntClientWordCount[2];
  unsigned int dynEntClientCount[2];
  unsigned int *dynEntCellBits[2];
  char *dynEntVisData[2][3];
};

/* 7042 */
#pragma pack(push, 4)
struct GfxWorld
{
  const char *name;
  const char *baseName;
  int planeCount;
  int nodeCount;
  int indexCount;
  unsigned __int16 *indices;
  D3DIndexBuffer indexBuffer;
  int surfaceCount;
  GfxWorldStreamInfo streamInfo;
  int skySurfCount;
  int *skyStartSurfs;
  GfxImage *skyImage;
  char skySamplerState;
  unsigned int vertexCount;
  GfxWorldVertexData vd;
  unsigned int vertexLayerDataSize;
  GfxWorldVertexLayerData vld;
  SunLightParseParams sunParse;
  GfxLight *sunLight;
  float sunColorFromBsp[3];
  unsigned int sunPrimaryLightIndex;
  unsigned int primaryLightCount;
  int cullGroupCount;
  unsigned int reflectionProbeCount;
  GfxReflectionProbe *reflectionProbes;
  GfxTexture *reflectionProbeTextures;
  GfxWorldDpvsPlanes dpvsPlanes;
  int cellBitsCount;
  GfxCell *cells;
  int lightmapCount;
  GfxLightmapArray *lightmaps;
  GfxLightGrid lightGrid;
  GfxTexture *lightmapPrimaryTextures;
  GfxTexture *lightmapSecondaryTextures;
  int modelCount;
  GfxBrushModel *models;
  float mins[3];
  float maxs[3];
  unsigned int checksum;
  int materialMemoryCount;
  MaterialMemory *materialMemory;
  sunflare_t sun;
  float outdoorLookupMatrix[4][4];
  GfxImage *outdoorImage;
  unsigned int *cellCasterBits;
  unsigned int *sceneEntCellBits;
  GfxSceneDynModel *sceneDynModel;
  GfxSceneDynBrush *sceneDynBrush;
  unsigned int *primaryLightEntityShadowVis;
  unsigned int *primaryLightDynEntShadowVis[2];
  char *primaryLightForModelDynEnt;
  GfxShadowGeometry *shadowGeom;
  GfxLightRegion *lightRegion;
  GfxWorldDpvsStatic dpvs;
  GfxWorldDpvsDynamic dpvsDyn;
};
#pragma pack(pop)

/* 7043 */
#pragma pack(push, 2)
struct Glyph
{
  unsigned __int16 letter;
  char x0;
  char y0;
  char dx;
  char pixelWidth;
  char pixelHeight;
  float s0;
  float t0;
  float s1;
  float t1;
};
#pragma pack(pop)

/* 7044 */
struct Font_s
{
  const char *fontName;
  int pixelHeight;
  int glyphCount;
  Material *material;
  Material *glowMaterial;
  Glyph *glyphs;
};

/* 7045 */
struct rectDef_s
{
  float x;
  float y;
  float w;
  float h;
  int horzAlign;
  int vertAlign;
};

/* 7046 */
struct windowDef_t
{
  const char *name;
  rectDef_s rect;
  rectDef_s rectClient;
  const char *group;
  int style;
  int border;
  int ownerDraw;
  int ownerDrawFlags;
  float borderSize;
  int staticFlags;
  int dynamicFlags[4];
  int nextTime;
  float foreColor[4];
  float backColor[4];
  float borderColor[4];
  float outlineColor[4];
  Material *background;
};

/* 7047 */
struct ItemKeyHandler
{
  int key;
  const char *action;
  ItemKeyHandler *next;
};

/* 7048 */
union operandInternalDataUnion
{
  int intVal;
  float floatVal;
  const char *string;
};

/* 7049 */
struct Operand
{
  expDataType dataType;
  operandInternalDataUnion internals;
};

/* 7050 */
union entryInternalData
{
  operationEnum op;
  Operand operand;
};

/* 7051 */
struct expressionEntry
{
  int type;
  entryInternalData data;
};

/* 7052 */
struct statement_s
{
  int numEntries;
  expressionEntry **entries;
};

/* 7053 */
struct menuDef_t
{
  windowDef_t window;
  const char *font;
  int fullScreen;
  int itemCount;
  int fontIndex;
  int cursorItem[4];
  int fadeCycle;
  float fadeClamp;
  float fadeAmount;
  float fadeInAmount;
  float blurRadius;
  const char *onOpen;
  const char *onClose;
  const char *onESC;
  ItemKeyHandler *onKey;
  statement_s visibleExp;
  const char *allowedBinding;
  const char *soundName;
  int imageTrack;
  float focusColor[4];
  float disableColor[4];
  statement_s rectXExp;
  statement_s rectYExp;
  itemDef_s **items;
};

/* 7054 */
struct columnInfo_s
{
  int pos;
  int width;
  int maxChars;
  int alignment;
};

/* 7055 */
struct listBoxDef_s
{
  int startPos[4];
  int endPos[4];
  int drawPadding;
  float elementWidth;
  float elementHeight;
  int elementStyle;
  int numColumns;
  columnInfo_s columnInfo[16];
  const char *doubleClick;
  int notselectable;
  int noScrollBars;
  int usePaging;
  float selectBorder[4];
  float disableColor[4];
  Material *selectIcon;
};

/* 7056 */
struct editFieldDef_s
{
  float minVal;
  float maxVal;
  float defVal;
  float range;
  int maxChars;
  int maxCharsGotoNext;
  int maxPaintChars;
  int paintOffset;
};

/* 7057 */
struct multiDef_s
{
  const char *dvarList[32];
  const char *dvarStr[32];
  float dvarValue[32];
  int count;
  int strDef;
};

/* 7058 */
union itemDefData_t
{
  listBoxDef_s *listBox;
  editFieldDef_s *editField;
  multiDef_s *multi;
  const char *enumDvarName;
  void *data;
};

/* 7059 */
struct itemDef_s
{
  windowDef_t window;
  rectDef_s textRect[4];
  int type;
  int dataType;
  int alignment;
  int fontEnum;
  int textAlignMode;
  float textalignx;
  float textaligny;
  float textscale;
  int textStyle;
  int gameMsgWindowIndex;
  int gameMsgWindowMode;
  const char *text;
  int textSavegameInfo;
  menuDef_t *parent;
  const char *mouseEnterText;
  const char *mouseExitText;
  const char *mouseEnter;
  const char *mouseExit;
  const char *action;
  const char *onAccept;
  const char *onFocus;
  const char *leaveFocus;
  const char *dvar;
  const char *dvarTest;
  ItemKeyHandler *onKey;
  const char *enableDvar;
  int dvarFlags;
  snd_alias_list_t *focusSound;
  float special;
  int cursorPos[4];
  itemDefData_t typeData;
  int imageTrack;
  statement_s visibleExp;
  statement_s textExp;
  statement_s materialExp;
  statement_s rectXExp;
  statement_s rectYExp;
  statement_s rectWExp;
  statement_s rectHExp;
};

/* 7060 */
struct MenuList
{
  const char *name;
  int menuCount;
  menuDef_t **menus;
};

/* 7061 */
struct LocalizeEntry
{
  const char *value;
  const char *name;
};

/* 7062 */
struct WeaponDef
{
  const char *szInternalName;
  const char *szDisplayName;
  const char *szOverlayName;
  XModel *gunXModel[16];
  XModel *handXModel;
  const char *szXAnims[33];
  const char *szModeName;
  unsigned __int16 hideTags[8];
  unsigned __int16 notetrackSoundMapKeys[16];
  unsigned __int16 notetrackSoundMapValues[16];
  int playerAnimType;
  weapType_t weapType;
  weapClass_t weapClass;
  PenetrateType penetrateType;
  ImpactType impactType;
  weapInventoryType_t inventoryType;
  weapFireType_t fireType;
  OffhandClass offhandClass;
  weapStance_t stance;
  FxEffectDef *viewFlashEffect;
  FxEffectDef *worldFlashEffect;
  snd_alias_list_t *pickupSound;
  snd_alias_list_t *pickupSoundPlayer;
  snd_alias_list_t *ammoPickupSound;
  snd_alias_list_t *ammoPickupSoundPlayer;
  snd_alias_list_t *projectileSound;
  snd_alias_list_t *pullbackSound;
  snd_alias_list_t *pullbackSoundPlayer;
  snd_alias_list_t *fireSound;
  snd_alias_list_t *fireSoundPlayer;
  snd_alias_list_t *fireLoopSound;
  snd_alias_list_t *fireLoopSoundPlayer;
  snd_alias_list_t *fireStopSound;
  snd_alias_list_t *fireStopSoundPlayer;
  snd_alias_list_t *fireLastSound;
  snd_alias_list_t *fireLastSoundPlayer;
  snd_alias_list_t *emptyFireSound;
  snd_alias_list_t *emptyFireSoundPlayer;
  snd_alias_list_t *meleeSwipeSound;
  snd_alias_list_t *meleeSwipeSoundPlayer;
  snd_alias_list_t *meleeHitSound;
  snd_alias_list_t *meleeMissSound;
  snd_alias_list_t *rechamberSound;
  snd_alias_list_t *rechamberSoundPlayer;
  snd_alias_list_t *reloadSound;
  snd_alias_list_t *reloadSoundPlayer;
  snd_alias_list_t *reloadEmptySound;
  snd_alias_list_t *reloadEmptySoundPlayer;
  snd_alias_list_t *reloadStartSound;
  snd_alias_list_t *reloadStartSoundPlayer;
  snd_alias_list_t *reloadEndSound;
  snd_alias_list_t *reloadEndSoundPlayer;
  snd_alias_list_t *detonateSound;
  snd_alias_list_t *detonateSoundPlayer;
  snd_alias_list_t *nightVisionWearSound;
  snd_alias_list_t *nightVisionWearSoundPlayer;
  snd_alias_list_t *nightVisionRemoveSound;
  snd_alias_list_t *nightVisionRemoveSoundPlayer;
  snd_alias_list_t *altSwitchSound;
  snd_alias_list_t *altSwitchSoundPlayer;
  snd_alias_list_t *raiseSound;
  snd_alias_list_t *raiseSoundPlayer;
  snd_alias_list_t *firstRaiseSound;
  snd_alias_list_t *firstRaiseSoundPlayer;
  snd_alias_list_t *putawaySound;
  snd_alias_list_t *putawaySoundPlayer;
  snd_alias_list_t **bounceSound;
  FxEffectDef *viewShellEjectEffect;
  FxEffectDef *worldShellEjectEffect;
  FxEffectDef *viewLastShotEjectEffect;
  FxEffectDef *worldLastShotEjectEffect;
  Material *reticleCenter;
  Material *reticleSide;
  int iReticleCenterSize;
  int iReticleSideSize;
  int iReticleMinOfs;
  activeReticleType_t activeReticleType;
  float vStandMove[3];
  float vStandRot[3];
  float vDuckedOfs[3];
  float vDuckedMove[3];
  float vDuckedRot[3];
  float vProneOfs[3];
  float vProneMove[3];
  float vProneRot[3];
  float fPosMoveRate;
  float fPosProneMoveRate;
  float fStandMoveMinSpeed;
  float fDuckedMoveMinSpeed;
  float fProneMoveMinSpeed;
  float fPosRotRate;
  float fPosProneRotRate;
  float fStandRotMinSpeed;
  float fDuckedRotMinSpeed;
  float fProneRotMinSpeed;
  XModel *worldModel[16];
  XModel *worldClipModel;
  XModel *rocketModel;
  XModel *knifeModel;
  XModel *worldKnifeModel;
  Material *hudIcon;
  weaponIconRatioType_t hudIconRatio;
  Material *ammoCounterIcon;
  weaponIconRatioType_t ammoCounterIconRatio;
  ammoCounterClipType_t ammoCounterClip;
  int iStartAmmo;
  const char *szAmmoName;
  int iAmmoIndex;
  const char *szClipName;
  int iClipIndex;
  int iMaxAmmo;
  int iClipSize;
  int shotCount;
  const char *szSharedAmmoCapName;
  int iSharedAmmoCapIndex;
  int iSharedAmmoCap;
  int damage;
  int playerDamage;
  int iMeleeDamage;
  int iDamageType;
  int iFireDelay;
  int iMeleeDelay;
  int meleeChargeDelay;
  int iDetonateDelay;
  int iFireTime;
  int iRechamberTime;
  int iRechamberBoltTime;
  int iHoldFireTime;
  int iDetonateTime;
  int iMeleeTime;
  int meleeChargeTime;
  int iReloadTime;
  int reloadShowRocketTime;
  int iReloadEmptyTime;
  int iReloadAddTime;
  int iReloadStartTime;
  int iReloadStartAddTime;
  int iReloadEndTime;
  int iDropTime;
  int iRaiseTime;
  int iAltDropTime;
  int iAltRaiseTime;
  int quickDropTime;
  int quickRaiseTime;
  int iFirstRaiseTime;
  int iEmptyRaiseTime;
  int iEmptyDropTime;
  int sprintInTime;
  int sprintLoopTime;
  int sprintOutTime;
  int nightVisionWearTime;
  int nightVisionWearTimeFadeOutEnd;
  int nightVisionWearTimePowerUp;
  int nightVisionRemoveTime;
  int nightVisionRemoveTimePowerDown;
  int nightVisionRemoveTimeFadeInStart;
  int fuseTime;
  int aiFuseTime;
  int requireLockonToFire;
  int noAdsWhenMagEmpty;
  float autoAimRange;
  float aimAssistRange;
  float aimAssistRangeAds;
  float aimPadding;
  float enemyCrosshairRange;
  int crosshairColorChange;
  float moveSpeedScale;
  float adsMoveSpeedScale;
  float sprintDurationScale;
  float fAdsZoomFov;
  float fAdsZoomInFrac;
  float fAdsZoomOutFrac;
  Material *overlayMaterial;
  Material *overlayMaterialLowRes;
  weapOverlayReticle_t overlayReticle;
  WeapOverlayInteface_t overlayInterface;
  float overlayWidth;
  float overlayHeight;
  float fAdsBobFactor;
  float fAdsViewBobMult;
  float fHipSpreadStandMin;
  float fHipSpreadDuckedMin;
  float fHipSpreadProneMin;
  float hipSpreadStandMax;
  float hipSpreadDuckedMax;
  float hipSpreadProneMax;
  float fHipSpreadDecayRate;
  float fHipSpreadFireAdd;
  float fHipSpreadTurnAdd;
  float fHipSpreadMoveAdd;
  float fHipSpreadDuckedDecay;
  float fHipSpreadProneDecay;
  float fHipReticleSidePos;
  int iAdsTransInTime;
  int iAdsTransOutTime;
  float fAdsIdleAmount;
  float fHipIdleAmount;
  float adsIdleSpeed;
  float hipIdleSpeed;
  float fIdleCrouchFactor;
  float fIdleProneFactor;
  float fGunMaxPitch;
  float fGunMaxYaw;
  float swayMaxAngle;
  float swayLerpSpeed;
  float swayPitchScale;
  float swayYawScale;
  float swayHorizScale;
  float swayVertScale;
  float swayShellShockScale;
  float adsSwayMaxAngle;
  float adsSwayLerpSpeed;
  float adsSwayPitchScale;
  float adsSwayYawScale;
  float adsSwayHorizScale;
  float adsSwayVertScale;
  int bRifleBullet;
  int armorPiercing;
  int bBoltAction;
  int aimDownSight;
  int bRechamberWhileAds;
  float adsViewErrorMin;
  float adsViewErrorMax;
  int bCookOffHold;
  int bClipOnly;
  int adsFireOnly;
  int cancelAutoHolsterWhenEmpty;
  int enhanced;
  int laserSightDuringNightvision;
  Material *killIcon;
  weaponIconRatioType_t killIconRatio;
  int flipKillIcon;
  Material *dpadIcon;
  weaponIconRatioType_t dpadIconRatio;
  int bNoPartialReload;
  int bSegmentedReload;
  int iReloadAmmoAdd;
  int iReloadStartAdd;
  const char *szAltWeaponName;
  unsigned int altWeaponIndex;
  int iDropAmmoMin;
  int iDropAmmoMax;
  int blocksProne;
  int silenced;
  int iExplosionRadius;
  int iExplosionRadiusMin;
  int iExplosionInnerDamage;
  int iExplosionOuterDamage;
  float damageConeAngle;
  int iProjectileSpeed;
  int iProjectileSpeedUp;
  int iProjectileSpeedForward;
  int iProjectileActivateDist;
  float projLifetime;
  float timeToAccelerate;
  float projectileCurvature;
  XModel *projectileModel;
  weapProjExposion_t projExplosion;
  FxEffectDef *projExplosionEffect;
  int projExplosionEffectForceNormalUp;
  FxEffectDef *projDudEffect;
  snd_alias_list_t *projExplosionSound;
  snd_alias_list_t *projDudSound;
  int bProjImpactExplode;
  WeapStickinessType stickiness;
  int hasDetonator;
  int timedDetonation;
  int rotate;
  int holdButtonToThrow;
  int freezeMovementWhenFiring;
  float parallelBounce[29];
  float perpendicularBounce[29];
  FxEffectDef *projTrailEffect;
  float vProjectileColor[3];
  guidedMissileType_t guidedMissileType;
  float maxSteeringAccel;
  int projIgnitionDelay;
  FxEffectDef *projIgnitionEffect;
  snd_alias_list_t *projIgnitionSound;
  float fAdsAimPitch;
  float fAdsCrosshairInFrac;
  float fAdsCrosshairOutFrac;
  int adsGunKickReducedKickBullets;
  float adsGunKickReducedKickPercent;
  float fAdsGunKickPitchMin;
  float fAdsGunKickPitchMax;
  float fAdsGunKickYawMin;
  float fAdsGunKickYawMax;
  float fAdsGunKickAccel;
  float fAdsGunKickSpeedMax;
  float fAdsGunKickSpeedDecay;
  float fAdsGunKickStaticDecay;
  float fAdsViewKickPitchMin;
  float fAdsViewKickPitchMax;
  float fAdsViewKickYawMin;
  float fAdsViewKickYawMax;
  float fAdsViewKickCenterSpeed;
  float fAdsViewScatterMin;
  float fAdsViewScatterMax;
  float fAdsSpread;
  int hipGunKickReducedKickBullets;
  float hipGunKickReducedKickPercent;
  float fHipGunKickPitchMin;
  float fHipGunKickPitchMax;
  float fHipGunKickYawMin;
  float fHipGunKickYawMax;
  float fHipGunKickAccel;
  float fHipGunKickSpeedMax;
  float fHipGunKickSpeedDecay;
  float fHipGunKickStaticDecay;
  float fHipViewKickPitchMin;
  float fHipViewKickPitchMax;
  float fHipViewKickYawMin;
  float fHipViewKickYawMax;
  float fHipViewKickCenterSpeed;
  float fHipViewScatterMin;
  float fHipViewScatterMax;
  float fightDist;
  float maxDist;
  const char *accuracyGraphName[2];
  float (*accuracyGraphKnots[2])[2];
  float (*originalAccuracyGraphKnots[2])[2];
  int accuracyGraphKnotCount[2];
  int originalAccuracyGraphKnotCount[2];
  int iPositionReloadTransTime;
  float leftArc;
  float rightArc;
  float topArc;
  float bottomArc;
  float accuracy;
  float aiSpread;
  float playerSpread;
  float minTurnSpeed[2];
  float maxTurnSpeed[2];
  float pitchConvergenceTime;
  float yawConvergenceTime;
  float suppressTime;
  float maxRange;
  float fAnimHorRotateInc;
  float fPlayerPositionDist;
  const char *szUseHintString;
  const char *dropHintString;
  int iUseHintStringIndex;
  int dropHintStringIndex;
  float horizViewJitter;
  float vertViewJitter;
  const char *szScript;
  float fOOPosAnimLength[2];
  int minDamage;
  int minPlayerDamage;
  float fMaxDamageRange;
  float fMinDamageRange;
  float destabilizationRateTime;
  float destabilizationCurvatureMax;
  int destabilizeDistance;
  float locationDamageMultipliers[19];
  const char *fireRumble;
  const char *meleeImpactRumble;
  float adsDofStart;
  float adsDofEnd;
  float hipDofStart;
  float hipDofEnd;
};

/* 7063 */
struct SndDriverGlobals
{
  XaReverbSettings *reverbSettings;
  const char *name;
};

/* 7064 */
struct RawFile
{
  const char *name;
  int len;
  const char *buffer;
};

/* 7065 */
struct StringTable
{
  const char *name;
  int columnCount;
  int rowCount;
  const char **values;
};

/* 7066 */
union XAssetHeader
{
  XModelPieces *xmodelPieces;
  PhysPreset *physPreset;
  XAnimParts *parts;
  XModel *model;
  Material *material;
  MaterialPixelShader *pixelShader;
  MaterialVertexShader *vertexShader;
  MaterialTechniqueSet *techniqueSet;
  GfxImage *image;
  snd_alias_list_t *sound;
  SndCurve *sndCurve;
  clipMap_t *clipMap;
  ComWorld *comWorld;
  GameWorldSp *gameWorldSp;
  GameWorldMp *gameWorldMp;
  MapEnts *mapEnts;
  GfxWorld *gfxWorld;
  GfxLightDef *lightDef;
  Font_s *font;
  MenuList *menuList;
  menuDef_t *menu;
  LocalizeEntry *localize;
  WeaponDef *weapon;
  SndDriverGlobals *sndDriverGlobals;
  FxEffectDef *fx;
  FxImpactTable *impactFx;
  RawFile *rawfile;
  StringTable *stringTable;
  void *data;
};

/* 7067 */
#pragma pack(push, 2)
struct trace_t
{
  float fraction;
  float normal[3];
  int surfaceFlags;
  int contents;
  const char *material;
  TraceHitType hitType;
  unsigned __int16 hitId;
  unsigned __int16 modelIndex;
  unsigned __int16 partName;
  unsigned __int16 partGroup;
  bool allsolid;
  bool startsolid;
  bool walkable;
};
#pragma pack(pop)

/* 7068 */
struct DObjSkelMat
{
  float axis[3][4];
  float origin[4];
};

/* 7069 */
struct XAnimParent
{
  unsigned __int16 flags;
  unsigned __int16 children;
};

/* 7070 */
union $C64BF0E2E445847BA8C25E12A01DD591
{
  XAnimParts *parts;
  XAnimParent animParent;
};

/* 7071 */
struct XAnimEntry
{
  unsigned __int16 numAnims;
  unsigned __int16 parent;
  $C64BF0E2E445847BA8C25E12A01DD591 ___u2;
};

/* 7072 */
struct XAnim_s
{
  const char *debugName;
  unsigned int size;
  const char **debugAnimNames;
  XAnimEntry entries[1];
};

/* 7073 */
#pragma pack(push, 4)
struct XAnimTree_s
{
  XAnim_s *anims;
  unsigned __int16 children;
};
#pragma pack(pop)

/* 7074 */
struct DSkelPartBits
{
  int anim[4];
  int control[4];
  int skel[4];
};

/* 7075 */
struct DSkel
{
  DSkelPartBits partBits;
  int timeStamp;
  DObjAnimMat *mat;
};

/* 7076 */
#pragma pack(push, 2)
struct DObj_s
{
  XAnimTree_s *tree;
  unsigned __int16 duplicateParts;
  unsigned __int16 entnum;
  char duplicatePartsSize;
  char numModels;
  char numBones;
  unsigned int ignoreCollision;
  volatile int locked;
  DSkel skel;
  float radius;
  int hidePartBits[4];
  XModel **models;
};
#pragma pack(pop)

/* 7077 */
#pragma pack(push, 4)
struct NetField
{
  char *name;
  int offset;
  int bits;
  char changeHints;
};
#pragma pack(pop)

/* 7078 */
struct MD4_CTX
{
  unsigned int state[4];
  unsigned int count[2];
  char buffer[64];
};

/* 7079 */
struct clientControllers_t
{
  float angles[6][3];
  float tag_origin_angles[3];
  float tag_origin_offset[3];
};

/* 7080 */
#pragma pack(push, 4)
struct CEntPlayerInfo
{
  clientControllers_t *control;
  char tag[6];
};
#pragma pack(pop)

/* 7081 */
struct CEntTurretAngles
{
  float pitch;
  float yaw;
};

/* 7082 */
union $FAB97167803560EC0457328032896A3E
{
  CEntTurretAngles angles;
  const float *viewAngles;
};

/* 7083 */
struct CEntTurretInfo
{
  $FAB97167803560EC0457328032896A3E ___u0;
  float barrelPitch;
  bool playerUsing;
  char tag_aim;
  char tag_aim_animated;
  char tag_flash;
};

/* 7084 */
#pragma pack(push, 4)
struct CEntVehicleInfo
{
  __int16 pitch;
  __int16 yaw;
  __int16 roll;
  __int16 barrelPitch;
  float barrelRoll;
  __int16 steerYaw;
  float time;
  unsigned __int16 wheelFraction[4];
  char wheelBoneIndex[4];
  char tag_body;
  char tag_turret;
  char tag_barrel;
};
#pragma pack(pop)

/* 7085 */
struct FxBoltAndSortOrder
{
  int _bf0;
};

/* 7086 */
struct FxSpatialFrame
{
  float quat[4];
  float origin[3];
};

/* 7087 */
struct FxEffect
{
  FxEffectDef *def;
  volatile int status;
  unsigned __int16 firstElemHandle[3];
  unsigned __int16 firstSortedElemHandle;
  unsigned __int16 firstTrailHandle;
  unsigned __int16 randomSeed;
  unsigned __int16 owner;
  unsigned __int16 packedLighting;
  FxBoltAndSortOrder boltAndSortOrder;
  volatile int frameCount;
  int msecBegin;
  int msecLastUpdate;
  FxSpatialFrame frameAtSpawn;
  FxSpatialFrame frameNow;
  FxSpatialFrame framePrev;
  float distanceTraveled;
};

/* 7088 */
struct CEntFx
{
  int triggerTime;
  FxEffect *effect;
};

/* 7089 */
union $1FDB7094A69B8E896A15A99EA584326D
{
  CEntPlayerInfo player;
  CEntTurretInfo turret;
  CEntVehicleInfo vehicle;
  CEntFx fx;
};

/* 7090 */
#pragma pack(push, 4)
struct cpose_t
{
  unsigned __int16 lightingHandle;
  char eType;
  char eTypeUnion;
  char localClientNum;
  int cullIn;
  char isRagdoll;
  int ragdollHandle;
  int killcamRagdollHandle;
  int physObjId;
  float origin[3];
  float angles[3];
  $1FDB7094A69B8E896A15A99EA584326D ___u11;
};
#pragma pack(pop)

/* 7091 */
#pragma pack(push, 4)
struct Bone
{
  int parentBone;
  char animBones[2];
  int rigidBody;
  float length;
  float center[3];
};
#pragma pack(pop)

/* 7092 */
#pragma pack(push, 4)
struct LerpBone
{
  int parentBone;
  char animBone;
};
#pragma pack(pop)

/* 7093 */
struct Joint
{
  int joint;
  int joint2;
};

/* 7094 */
struct BoneOrientation
{
  float origin[3];
  int boneFlags;
  float orientation[4];
};

/* 7095 */
struct RagdollBody
{
  int references;
  int ragdollDef;
  int dobj;
  DObj_s *obj;
  cpose_t *pose;
  float poseOffset[3];
  int localClientNum;
  BodyState state;
  int stateMsec;
  int stateFrames;
  int velCaptureMsec;
  int numBones;
  Bone bones[16];
  int numLerpBones;
  LerpBone lerpBones[16];
  int numJoints;
  Joint joints[32];
  int curOrientationBuffer;
  BoneOrientation boneOrientations[2][32];
  BoneOrientation lerpBoneOffsets[16];
};

/* 7096 */
#pragma pack(push, 4)
struct BoneDef
{
  char animBoneTextNames[2][20];
  unsigned int animBoneNames[2];
  float radius;
  bool mirror;
  float percent;
  float mass;
  float friction;
  int parentBone;
  PhysicsGeomType geomType;
};
#pragma pack(pop)

/* 7097 */
#pragma pack(push, 4)
struct JointDef
{
  char bone;
  JointType type;
  int numLimitAxes;
  float limitAxes[3][3];
  float minAngles[3];
  float maxAngles[3];
  float axisFriction[3];
};
#pragma pack(pop)

/* 7098 */
struct BaseLerpBoneDef
{
  char animBoneTextName[20];
  unsigned int animBoneName;
  unsigned int parentBoneIndex;
  int lerpTime;
};

/* 7099 */
struct SelfPairDef
{
  char bones[2];
};

/* 7100 */
#pragma pack(push, 4)
struct RagdollDef
{
  bool inUse;
  bool bound;
  int numBones;
  BoneDef boneDefs[16];
  int numBaseLerpBones;
  BaseLerpBoneDef baseLerpBoneDefs[16];
  int numJoints;
  JointDef jointDefs[32];
  int numSelfPairs;
  SelfPairDef selfPairDefs[36];
};
#pragma pack(pop)

/* 7101 */
struct PhysContact
{
  float pos[3];
  float normal[3];
  float depth;
  float friction;
  float bounce;
};

/* 7102 */
struct snapshot_s
{
  int snapFlags;
  int ping;
  int serverTime;
  playerState_s ps;
  int numEntities;
  int numClients;
  entityState_s entities[512];
  clientState_s clients[24];
  int serverCommandSequence;
};

/* 7103 */
#pragma pack(push, 2)
struct centity_s
{
  cpose_t pose;
  LerpEntityState currentState;
  entityState_s nextState;
  bool nextValid;
  bool bMuzzleFlash;
  bool bTrailMade;
  int previousEventSequence;
  int miscTime;
  float lightingOrigin[3];
  XAnimTree_s *tree;
};
#pragma pack(pop)

/* 7104 */
struct playerEntity_t
{
  float fLastWeaponPosFrac;
  int bPositionToADS;
  float vPositionLastOrg[3];
  float fLastIdleFactor;
  float vLastMoveOrg[3];
  float vLastMoveAng[3];
};

/* 7105 */
struct GfxDepthOfField
{
  float viewModelStart;
  float viewModelEnd;
  float nearStart;
  float nearEnd;
  float farStart;
  float farEnd;
  float nearBlur;
  float farBlur;
};

/* 7106 */
#pragma pack(push, 4)
struct GfxFilm
{
  bool enabled;
  float brightness;
  float contrast;
  float desaturation;
  bool invert;
  float tintDark[3];
  float tintLight[3];
};
#pragma pack(pop)

/* 7107 */
#pragma pack(push, 4)
struct GfxGlow
{
  bool enabled;
  float bloomCutoff;
  float bloomDesaturation;
  float bloomIntensity;
  float radius;
};
#pragma pack(pop)

/* 7108 */
struct refdef_s
{
  unsigned int x;
  unsigned int y;
  unsigned int width;
  unsigned int height;
  float tanHalfFovX;
  float tanHalfFovY;
  float vieworg[3];
  float viewaxis[3][3];
  float viewOffset[3];
  int time;
  float zNear;
  float blurRadius;
  GfxDepthOfField dof;
  GfxFilm film;
  GfxGlow glow;
  GfxLight primaryLights[255];
  int localClientNum;
};

/* 7109 */
struct score_t
{
  int client;
  int score;
  int ping;
  int deaths;
  int team;
  int kills;
  int rank;
  int assists;
  Material *hStatusIcon;
  Material *hRankIcon;
};

/* 7110 */
struct viewDamage_t
{
  int time;
  int duration;
  float yaw;
};

/* 7111 */
struct $90E088F7D9852BC881D65DE98AF171B5
{
  int blurredFadeTime;
  int blurredEffectTime;
  int flashWhiteFadeTime;
  int flashShotFadeTime;
  ShockViewTypes type;
};

/* 7112 */
struct $B32C35443884083D3CC13DCD5C8D7874
{
  int fadeTime;
  float kickRate;
  float kickRadius;
};

/* 7113 */
#pragma pack(push, 4)
struct $BB49F567345206243E5FA1966A93D537
{
  bool affect;
  char loop[64];
  char loopSilent[64];
  char end[64];
  char endAbort[64];
  int fadeInTime;
  int fadeOutTime;
  float drylevel;
  float wetlevel;
  char roomtype[16];
  float channelvolume[64];
  int modEndDelay;
  int loopFadeTime;
  int loopEndDelay;
};
#pragma pack(pop)

/* 7114 */
#pragma pack(push, 4)
struct $402D1EFD93F6BABF9B68495BCC143889
{
  bool affect;
  int fadeTime;
  float mouseSensitivity;
  float maxPitchSpeed;
  float maxYawSpeed;
};
#pragma pack(pop)

/* 7115 */
struct $4F7202F91A0F7FC1D7CB9F222DD944AF
{
  bool affect;
};

/* 7116 */
#pragma pack(push, 4)
const struct shellshock_parms_t
{
  $90E088F7D9852BC881D65DE98AF171B5 screenBlend;
  $B32C35443884083D3CC13DCD5C8D7874 view;
  $BB49F567345206243E5FA1966A93D537 sound;
  $402D1EFD93F6BABF9B68495BCC143889 lookControl;
  $4F7202F91A0F7FC1D7CB9F222DD944AF movement;
};
#pragma pack(pop)

/* 7117 */
struct shellshock_t
{
  shellshock_parms_t *parms;
  int startTime;
  int duration;
  int loopEndTime;
  float sensitivity;
  float viewDelta[2];
  int hasSavedScreen;
};

/* 7118 */
struct $F6DFD6D87F75480A1EF1906639406DF5
{
  int time;
  int duration;
};

/* 7119 */
#pragma pack(push, 8)
struct animation_s
{
  char name[64];
  int initialLerp;
  float moveSpeed;
  int duration;
  int nameHash;
  int flags;
  __int64 movetype;
  int noteType;
};
#pragma pack(pop)

/* 7120 */
struct animScriptCondition_t
{
  int index;
  unsigned int value[2];
};

/* 7121 */
struct animScriptCommand_t
{
  __int16 bodyPart[2];
  __int16 animIndex[2];
  __int16 animDuration[2];
  snd_alias_list_t *soundAlias;
};

/* 7122 */
struct animScriptItem_t
{
  int numConditions;
  animScriptCondition_t conditions[10];
  int numCommands;
  animScriptCommand_t commands[8];
};

/* 7123 */
struct animScript_t
{
  int numItems;
  animScriptItem_t *items[128];
};

/* 7124 */
struct scr_animtree_t
{
  XAnim_s *anims;
};

/* 7125 */
#pragma pack(push, 8)
struct animScriptData_t
{
  animation_s animations[512];
  unsigned int numAnimations;
  animScript_t scriptAnims[1][43];
  animScript_t scriptCannedAnims[1][43];
  animScript_t scriptStateChange[1][1];
  animScript_t scriptEvents[21];
  animScriptItem_t scriptItems[2048];
  int numScriptItems;
  scr_animtree_t animTree;
  unsigned __int16 torsoAnim;
  unsigned __int16 legsAnim;
  unsigned __int16 turningAnim;
  snd_alias_list_t *(__cdecl *soundAlias)(const char *);
  int (__cdecl *playSoundAlias)(int, snd_alias_list_t *);
};
#pragma pack(pop)

/* 7126 */
struct $6CB7272563F4458FB40A4A5E123C4ABA
{
  unsigned __int16 index;
  unsigned __int16 tree;
};

/* 7127 */
union $23929A8C040391BF4D98215C4F78A207
{
  $6CB7272563F4458FB40A4A5E123C4ABA _s0;
  const char *linkPointer;
};

/* 7128 */
struct scr_anim_s
{
  $23929A8C040391BF4D98215C4F78A207 ___u0;
};

/* 7129 */
struct $79A9D369383989627F425BDAFFD092C2
{
  scr_animtree_t tree;
  scr_anim_s torso;
  scr_anim_s legs;
  scr_anim_s turning;
};

/* 7130 */
#pragma pack(push, 2)
struct DObjModel_s
{
  XModel *model;
  unsigned __int16 boneName;
  bool ignoreCollision;
};
#pragma pack(pop)

/* 7131 */
struct lerpFrame_t
{
  float yawAngle;
  int yawing;
  float pitchAngle;
  int pitching;
  int animationNumber;
  animation_s *animation;
  int animationTime;
  float oldFramePos[3];
  float animSpeedScale;
  int oldFrameSnapshotTime;
};

/* 7132 */
#pragma pack(push, 4)
struct clientInfo_t
{
  int infoValid;
  int nextValid;
  int clientNum;
  char name[32];
  team_t team;
  team_t oldteam;
  char clanIndex;
  char clanAbbrev[8];
  int score;
  int location;
  int health;
  char model[64];
  char attachModelNames[6][64];
  char attachTagNames[6][64];
  lerpFrame_t legs;
  lerpFrame_t torso;
  float lerpMoveDir;
  float lerpLean;
  float playerAngles[3];
  int leftHandGun;
  int dobjDirty;
  clientControllers_t control;
  unsigned int clientConditions[10][2];
  XAnimTree_s *pXAnimTree;
  int iDObjWeapon;
  char weaponModel;
  int stanceTransitionTime;
  int turnAnimEndTime;
  char turnAnimType;
  int attachedVehEntNum;
  int attachedVehSlotIndex;
  bool hideWeapon;
  bool usingKnife;
};
#pragma pack(pop)

/* 7133 */
struct bgs_t
{
  animScriptData_t animScriptData;
  $79A9D369383989627F425BDAFFD092C2 generic_human;
  int time;
  int latestSnapshotTime;
  int frametime;
  int anim_user;
  XModel *(__cdecl *GetXModel)(const char *);
  void (__cdecl *CreateDObj)(DObjModel_s *, unsigned __int16, XAnimTree_s *, int, int, clientInfo_t *);
  unsigned __int16 (__cdecl *AttachWeapon)(DObjModel_s *, unsigned __int16, clientInfo_t *);
  DObj_s *(__cdecl *GetDObj)(int, int);
  void (__cdecl *SafeDObjFree)(int, int);
  void *(__cdecl *AllocXAnim)(int);
  clientInfo_t clientinfo[24];
};

/* 7134 */
#pragma pack(push, 4)
struct visionSetVars_t
{
  bool glowEnable;
  float glowBloomCutoff;
  float glowBloomDesaturation;
  float glowBloomIntensity0;
  float glowBloomIntensity1;
  float glowRadius0;
  float glowRadius1;
  float glowSkyBleedIntensity0;
  float glowSkyBleedIntensity1;
  bool filmEnable;
  float filmBrightness;
  float filmContrast;
  float filmDesaturation;
  bool filmInvert;
  float filmLightTint[3];
  float filmDarkTint[3];
};
#pragma pack(pop)

/* 7135 */
struct visionSetLerpData_t
{
  int timeStart;
  int timeDuration;
  visionSetLerpStyle_t style;
};

/* 7136 */
struct $BE9F66374A020A9809EEAF403416A176
{
  float aimSpreadScale;
};

/* 7137 */
struct hudElemSoundInfo_t
{
  int lastPlayedTime;
};

/* 7138 */
struct __declspec(align(8)) cg_s
{
  int clientNum;
  int localClientNum;
  DemoType demoType;
  CubemapShot cubemapShot;
  int cubemapSize;
  int renderScreen;
  int latestSnapshotNum;
  int latestSnapshotTime;
  snapshot_s *snap;
  snapshot_s *nextSnap;
  snapshot_s activeSnapshots[2];
  float frameInterpolation;
  int frametime;
  int time;
  int oldTime;
  int physicsTime;
  int mapRestart;
  int renderingThirdPerson;
  playerState_s predictedPlayerState;
  centity_s predictedPlayerEntity;
  playerEntity_t playerEntity;
  int predictedErrorTime;
  float predictedError[3];
  float landChange;
  int landTime;
  float heightToCeiling;
  refdef_s refdef;
  float refdefViewAngles[3];
  float lastVieworg[3];
  float swayViewAngles[3];
  float swayAngles[3];
  float swayOffset[3];
  int iEntityLastType[1024];
  XModel *pEntityLastXModel[1024];
  float zoomSensitivity;
  bool isLoading;
  char objectiveText[1024];
  char scriptMainMenu[256];
  __declspec(align(4)) int scoresRequestTime;
  int numScores;
  int teamScores[4];
  int teamPings[4];
  int teamPlayers[4];
  score_t scores[24];
  int scoreLimit;
  int scoreFadeTime;
  int scoresTop;
  int scoresOffBottom;
  int scoresBottom;
  int selectedGamerIndex;
  int bannerLines[4];
  unsigned __int64 selectedGamerXuid;
  int drawHud;
  int crosshairClientNum;
  int crosshairClientLastTime;
  int crosshairClientStartTime;
  int identifyClientNum;
  int cursorHintIcon;
  int cursorHintTime;
  int cursorHintFade;
  int cursorHintString;
  int lastClipFlashTime;
  int lastHealthPulseTime;
  int lastHealthLerpDelay;
  int lastHealthClient;
  float lastHealth;
  float healthOverlayFromAlpha;
  float healthOverlayToAlpha;
  int healthOverlayPulseTime;
  int healthOverlayPulseDuration;
  int healthOverlayPulsePhase;
  bool healthOverlayHurt;
  __declspec(align(4)) int healthOverlayLastHitTime;
  float healthOverlayOldHealth;
  int healthOverlayPulseIndex;
  int proneBlockedEndTime;
  int lastStance;
  int lastStanceChangeTime;
  int lastStanceFlashTime;
  int voiceTime;
  unsigned int weaponSelect;
  int weaponSelectTime;
  unsigned int weaponLatestPrimaryIdx;
  int prevViewmodelWeapon;
  int equippedOffHand;
  viewDamage_t viewDamage[8];
  int damageTime;
  float damageX;
  float damageY;
  float damageValue;
  float viewFade;
  int weapIdleTime;
  int nomarks;
  int v_dmg_time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float fBobCycle;
  float xyspeed;
  float kickAVel[3];
  float kickAngles[3];
  float offsetAngles[3];
  float gunPitch;
  float gunYaw;
  float gunXOfs;
  float gunYOfs;
  float gunZOfs;
  float vGunOffset[3];
  float vGunSpeed[3];
  float viewModelAxis[4][3];
  float rumbleScale;
  float compassNorthYaw;
  float compassNorth[2];
  Material *compassMapMaterial;
  float compassMapUpperLeft[2];
  float compassMapWorldSize[2];
  int compassFadeTime;
  int healthFadeTime;
  int ammoFadeTime;
  int stanceFadeTime;
  int sprintFadeTime;
  int offhandFadeTime;
  int offhandFlashTime;
  shellshock_t shellshock;
  $F6DFD6D87F75480A1EF1906639406DF5 testShock;
  int holdBreathTime;
  int holdBreathInTime;
  int holdBreathDelay;
  float holdBreathFrac;
  float radarProgress;
  float selectedLocation[2];
  SprintState sprintStates;
  int adsViewErrorDone;
  int inKillCam;
  __declspec(align(8)) bgs_t bgs;
  cpose_t viewModelPose;
  visionSetVars_t visionSetPreLoaded[4];
  char visionSetPreLoadedName[4][64];
  visionSetVars_t visionSetFrom[2];
  visionSetVars_t visionSetTo[2];
  visionSetVars_t visionSetCurrent[2];
  visionSetLerpData_t visionSetLerpData[2];
  char visionNameNaked[64];
  char visionNameNight[64];
  int extraButtons;
  int lastActionSlotTime;
  bool playerTeleported;
  __declspec(align(4)) int stepViewStart;
  float stepViewChange;
  $BE9F66374A020A9809EEAF403416A176 lastFrame;
  hudElemSoundInfo_t hudElemSound[32];
  int vehicleFrame;
};

/* 7139 */
struct StateEnt
{
  bool (__cdecl *enterFunc)(RagdollBody *, BodyState, BodyState);
  bool (__cdecl *exitFunc)(RagdollBody *, BodyState, BodyState);
  void (__cdecl *updateFunc)(RagdollBody *);
};

/* 7140 */
struct cgs_t
{
  int viewX;
  int viewY;
  int viewWidth;
  int viewHeight;
  float viewAspect;
  int serverCommandSequence;
  int processedSnapshotNum;
  int localServer;
  char gametype[32];
  char szHostName[256];
  int maxclients;
  int privateClients;
  char mapname[64];
  int gameEndTime;
  int voteTime;
  int voteYes;
  int voteNo;
  char voteString[256];
  int redCrosshair;
  XModel *gameModels[512];
  FxEffectDef *fxs[100];
  FxEffectDef *smokeGrenadeFx;
  shellshock_parms_t holdBreathParams;
  char teamChatMsgs[8][271];
  int teamChatMsgTimes[8];
  int teamChatPos;
  int teamLastChatPos;
  float compassWidth;
  float compassHeight;
  float compassY;
  clientInfo_t corpseinfo[8];
};

/* 7141 */
struct gitem_s
{
  itemType_t giType;
};

/* 7142 */
#pragma pack(push, 4)
struct weaponInfo_s
{
  DObj_s *viewModelDObj;
  XModel *handModel;
  XModel *gogglesModel;
  XModel *rocketModel;
  XModel *knifeModel;
  char weapModelIdx;
  int partBits[4];
  int iPrevAnim;
  XAnimTree_s *tree;
  int registered;
  gitem_s *item;
  const char *translatedDisplayName;
  const char *translatedModename;
  const char *translatedAIOverlayDescription;
};
#pragma pack(pop)

/* 7143 */
struct $226EAEAF211E69CAF5BF90DB1F921A0C
{
  const char *name;
  float axis[3];
};

/* 7144 */
struct dBase
{
  char dummy[1];
};

/* 7145 */
struct dxWorld
{
  $1EEE4721BB04FF96191F29C53761696B ___u0;
  dxJoint *firstjoint;
  int nb;
  int nj;
  float gravity[4];
  float global_erp;
  float global_cfm;
  dxAutoDisable adis;
  int adis_flag;
  dxQuickStepParameters qs;
  dxContactParameters contactp;
  SorLcpData sd;
  __declspec(align(8)) QuickstepData qd;
};

/* 7146 */
struct dObject
{
  $CB9BD818F5424651D8EE5C006DBAE9AA ___u0;
  dObject *next;
  dObject **tome;
  void *userdata;
  int tag;
};

/* 7147 */
union $CB9BD818F5424651D8EE5C006DBAE9AA
{
  dBase baseclass_0;
  dxWorld *world;
};

/* 7148 */
#pragma pack(push, 4)
struct dxJoint
{
  dObject baseclass_0;
  dxJoint::Vtable *vtable;
  int flags;
  dxJointNode node[2];
  dJointFeedback *feedback;
  float lambda[6];
  bool debug;
};
#pragma pack(pop)

/* 7149 */
struct dxJoint::Info1
{
  int m;
  int nub;
};

/* 7150 */
struct dxJoint::Info2
{
  float fps;
  float erp;
  float *J1l;
  float *J1a;
  float *J2l;
  float *J2a;
  int rowskip;
  float *c;
  float *cfm;
  float *lo;
  float *hi;
  int *findex;
};

/* 7151 */
struct dxJoint::Vtable
{
  int size;
  void (__cdecl *init)(dxJoint *);
  void (__cdecl *getInfo1)(dxJoint *, dxJoint::Info1 *);
  void (__cdecl *getInfo2)(dxJoint *, dxJoint::Info2 *);
  int typenum;
};

/* 7152 */
struct dxJointNode
{
  dxJoint *joint;
  dxBody *body;
  dxJointNode *next;
};

/* 7153 */
struct dJointFeedback
{
  float f1[4];
  float t1[4];
  float f2[4];
  float t2[4];
};

/* 7154 */
struct dxBody
{
  dObject baseclass_0;
  dxJointNode *firstjoint;
  int flags;
  dxGeom *geom;
  dMass mass;
  float invI[12];
  float invMass;
  float pos[4];
  float q[4];
  float R[12];
  float lvel[4];
  float avel[4];
  float facc[4];
  float tacc[4];
  float finite_rot_axis[4];
  dxAutoDisable adis;
  float adis_timeleft;
  int adis_stepsleft;
};

/* 7155 */
struct dxGeom
{
  dxGeomVtbl *vfptr;
  $EA341B233F1EAA0B9891F7FAF5B8609E ___u1;
  int gflags;
  void *data;
  dxBody *body;
  dxGeom *body_next;
  float *pos;
  float *R;
  dxGeom *next;
  dxGeom **tome;
  dxSpace *parent_space;
  float aabb[6];
  unsigned int category_bits;
  unsigned int collide_bits;
};

/* 7156 */
struct dxGeomVtbl
{
  void *(__cdecl *__vecDelDtor)(dxGeom *this, unsigned int);
  void (__cdecl *computeAABB)(dxGeom *this);
  int (__cdecl *AABBTest)(dxGeom *this, dxGeom *, float *);
};

/* 7157 */
struct dxSpace
{
  dxGeom baseclass_0;
  int count;
  dxGeom *first;
  int cleanup;
  int current_index;
  dxGeom *current_geom;
  int lock_count;
};

/* 7158 */
union $EA341B233F1EAA0B9891F7FAF5B8609E
{
  dBase baseclass_4;
  int type;
};

/* 7159 */
struct dMass
{
  float mass;
  float c[4];
  float I[12];
};

/* 7160 */
struct dxAutoDisable
{
  float linear_threshold;
  float angular_threshold;
  float idle_time;
  int idle_steps;
};

/* 7161 */
struct dxQuickStepParameters
{
  int num_iterations;
  float w;
};

/* 7162 */
struct dxContactParameters
{
  float max_vel;
  float min_depth;
};

/* 7163 */
struct SorLcpData
{
  int order[444];
};

/* 7164 */
struct ConstraintRowData
{
  float J_body1Linear[3];
  float lambda;
  float J_body1Angular[3];
  int body1;
  float J_body2Linear[3];
  int body2;
  float J_body2Angular[3];
  float padding1;
  float iMJ_body1Linear[3];
  float padding2;
  float iMJ_body1Angular[3];
  float padding3;
  float iMJ_body2Linear[3];
  float padding4;
  float iMJ_body2Angular[3];
  float padding5;
  float lo;
  float hi;
  float rhs;
  float Ad;
};

/* 7165 */
struct QuickstepData
{
  ConstraintRowData rowData[444];
};

/* 7166 */
union $1EEE4721BB04FF96191F29C53761696B
{
  dBase baseclass_0;
  dxBody *firstbody;
};

/* 7167 */
struct dArrayBase
{
  int _size;
  int _anum;
  void *_data;
};

/* 7168 */
struct ShouldNotRemoveJoint
{
  dxBody *const *body;
  int bodyCount;
};

/* 7169 */
struct dArray<dMatrixComparison::dMatInfo *>
{
  dArrayBase baseclass_0;
};

/* 7170 */
struct dMatrixComparison
{
  dArray<dMatrixComparison::dMatInfo *> mat;
  int afterfirst;
  int index;
};

/* 7171 */
struct dMatrixComparison::dMatInfo
{
  int n;
  int m;
  char name[128];
  float *data;
  int size;
};

/* 7172 */
struct ConstraintForce
{
  float linear[3];
  float padding0;
  float angular[3];
  float padding1;
};

/* 7173 */
struct vector3
{
  __vector4 x;
  __vector4 y;
  __vector4 z;
};

/* 7174 */
struct vector4
{
  vector3 baseclass_0;
  __vector4 w;
};

/* 7175 */
struct dxUserGeom
{
  dxGeom baseclass_0;
  char user_data[16];
};

/* 7176 */
struct dSurfaceParameters
{
  int mode;
  float mu;
  float mu2;
  float bounce;
  float bounce_vel;
  float soft_erp;
  float soft_cfm;
  float motion1;
  float motion2;
  float slip1;
  float slip2;
};

/* 7177 */
struct dContactGeom
{
  float pos[4];
  float normal[4];
  float depth;
  dxGeom *g1;
  dxGeom *g2;
};

/* 7178 */
struct dContact
{
  dSurfaceParameters surface;
  dContactGeom geom;
  float fdir1[4];
};

/* 7179 */
struct dxJointContact
{
  dxJoint baseclass_0;
  int the_m;
  dContact contact;
};

/* 7180 */
union $7FAF0BD6F56256C8ADE28B8FF1F41AFC
{
  dBase baseclass_0;
  unsigned int num;
};

/* 7181 */
struct dxJointGroup
{
  $7FAF0BD6F56256C8ADE28B8FF1F41AFC ___u0;
  dxJointContact joints[4096];
};

/* 7182 */
struct dxSimpleSpace
{
  dxSpace baseclass_0;
};

/* 7183 */
struct pooldata_t
{
  void *firstFree;
  int activeCount;
};

/* 7184 */
struct __declspec(align(16)) odeGlob_t
{
  dxWorld world[3];
  dxSimpleSpace space[3];
  dxJointGroup contactsGroup[3];
  dxBody bodies[512];
  pooldata_t bodyPool;
  char geoms[425984];
  pooldata_t geomPool;
  dxUserGeom worldGeom;
};

/* 7185 */
struct dMatrix
{
  int n;
  int m;
  float *data;
};

/* 7186 */
struct dLCP
{
  int n;
  int nskip;
  int nub;
  float **A;
  float *Adata;
  float *x;
  float *b;
  float *w;
  float *lo;
  float *hi;
  float *L;
  float *d;
  float *Dell;
  float *ell;
  float *tmp;
  int *state;
  int *findex;
  int *p;
  int *C;
  int nC;
  int nN;
};

/* 7187 */
struct dxJointLimitMotor
{
  float vel;
  float fmax;
  float lostop;
  float histop;
  float fudge_factor;
  float normal_cfm;
  float stop_erp;
  float stop_cfm;
  float bounce;
  int limit;
  float limit_err;
};

/* 7188 */
struct dxJointBall
{
  dxJoint baseclass_0;
  float anchor1[4];
  float anchor2[4];
};

/* 7189 */
struct dxJointHinge
{
  dxJoint baseclass_0;
  float anchor1[4];
  float anchor2[4];
  float axis1[4];
  float axis2[4];
  float qrel[4];
  dxJointLimitMotor limot;
};

/* 7190 */
struct dxJointSlider
{
  dxJoint baseclass_0;
  float axis1[4];
  float qrel[4];
  float offset[4];
  dxJointLimitMotor limot;
};

/* 7191 */
struct dxJointHinge2
{
  dxJoint baseclass_0;
  float anchor1[4];
  float anchor2[4];
  float axis1[4];
  float axis2[4];
  float c0;
  float s0;
  float v1[4];
  float v2[4];
  dxJointLimitMotor limot1;
  dxJointLimitMotor limot2;
  float susp_erp;
  float susp_cfm;
};

/* 7192 */
struct dxJointUniversal
{
  dxJoint baseclass_0;
  float anchor1[4];
  float anchor2[4];
  float axis1[4];
  float axis2[4];
  float qrel1[4];
  float qrel2[4];
  dxJointLimitMotor limot1;
  dxJointLimitMotor limot2;
};

/* 7193 */
struct dxJointAMotor
{
  dxJoint baseclass_0;
  int num;
  int mode;
  int rel[3];
  float axis[3][4];
  dxJointLimitMotor limot[3];
  float angle[3];
  float reference1[4];
  float reference2[4];
};

/* 7194 */
struct dxJointFixed
{
  dxJoint baseclass_0;
  float qrel[4];
  float offset[4];
};

/* 7195 */
struct dxJointNull
{
  dxJoint baseclass_0;
};

/* 7196 */
struct PrintingContext
{
  _iobuf *file;
  int precision;
  int indent;
};

/* 7197 */
struct PhysTriMeshInfo
{
  float *verts;
  int vertStride;
  int vertCount;
  unsigned int *indices;
  unsigned int indexCount;
};

/* 7198 */
struct Jitter
{
  float origin[3];
  float innerRadiusSq;
  float outerRadiusSq;
  float innerRadius;
  float outerRadius;
  float minDisplacement;
  float maxDisplacement;
};

/* 7199 */
struct PhysWorldData
{
  int timeLastSnapshot;
  int timeLastUpdate;
  float timeNowLerpFrac;
  void (__cdecl *collisionCallback)();
  int numJitterRegions;
  bool useContactCentroids;
  __declspec(align(4)) Jitter jitterRegions[5];
};

/* 7200 */
struct PhysObjUserData
{
  float translation[3];
  dxBody *body;
  float savedPos[3];
  float savedRot[3][3];
  int sndClass;
  float friction;
  float bounce;
  physStuckState_t state;
  float contactCentroid[3];
};

/* 7201 */
struct PhysStaticArray<dxJointHinge,256>
{
  int freeEntry;
  dxJointHinge entries[256];
};

/* 7202 */
struct PhysStaticArray<dxJointBall,90>
{
  int freeEntry;
  dxJointBall entries[90];
};

/* 7203 */
struct PhysStaticArray<dxJointAMotor,90>
{
  int freeEntry;
  dxJointAMotor entries[90];
};

/* 7204 */
#pragma pack(push, 4)
struct PhysGlob
{
  dxWorld *world[3];
  PhysWorldData worldData[3];
  dxSpace *space[3];
  dxJointGroup *contactgroup[3];
  PhysObjUserData userData[512];
  pooldata_t userDataPool;
  PhysTriMeshInfo triMeshInfo;
  dxTriMeshData *triMeshDataID;
  bool dumpContacts;
  dxGeom *visTrisGeom;
  dxGeom *worldGeom;
  int debugActiveObjCount;
  PhysStaticArray<dxJointHinge,256> hingeArray;
  PhysStaticArray<dxJointBall,90> ballArray;
  PhysStaticArray<dxJointAMotor,90> aMotorArray;
  float gravityDirection[3];
};
#pragma pack(pop)

/* 7205 */
struct collData_t
{
  float mHullBoxRot[12];
  float vHullBoxPos[4];
  float vBoxHalfSize[4];
  float vBestNormal[4];
  float fBestDepth;
  int iBestAxis;
  float triangleEdge0[4];
  float triangleEdge1[4];
  float triangleEdge2[4];
  float triangleNormal[4];
  int iFlags;
  dContactGeom *ContactGeoms;
  int iStride;
  dxGeom *Geom1;
  dxGeom *Geom2;
  int ctContacts;
  const float *bodyCenter;
};

/* 7206 */
struct dxGeomTransform
{
  dxGeom baseclass_0;
  dxGeom *obj;
  int cleanup;
  int infomode;
  float localR[12];
  float localPos[3];
  float finalR[12];
  float finalPos[3];
};

/* 7207 */
struct dxSphere
{
  dxGeom baseclass_0;
  float radius;
};

/* 7208 */
struct dxBox
{
  dxGeom baseclass_0;
  float side[4];
};

/* 7209 */
struct dxCCylinder
{
  dxGeom baseclass_0;
  float radius;
  float lz;
};

/* 7210 */
struct dxPlane
{
  dxGeom baseclass_0;
  float p[4];
};

/* 7211 */
struct dxRay
{
  dxGeom baseclass_0;
  float length;
};

/* 7212 */
struct SpaceGeomColliderData
{
  int flags;
  dContactGeom *contact;
  int skip;
};

/* 7213 */
#pragma pack(push, 4)
struct dGeomClass
{
  int bytes;
  int (__cdecl *(__cdecl *collider)(int))(dxGeom *aabb, dxGeom *, int, dContactGeom *aabb_test, int);
  void (__cdecl *)(dxGeom *, float *isPlaceable);
  int (__cdecl *)(dxGeom *, dxGeom *, float *);
  bool;
};
#pragma pack(pop)

/* 7214 */
struct dColliderEntry
{
  int (__cdecl *fn)(dxGeom *, dxGeom *, int, dContactGeom *, int);
  int reverse;
};

/* 7215 */
struct TraceCheckCount
{
  int global;
  int *partitions;
};

/* 7216 */
struct TraceThreadInfo
{
  TraceCheckCount checkcount;
  cbrush_t *box_brush;
  cmodel_t *box_model;
};

/* 7217 */
union $A2C4EA666553E7F54FEB40BCC412A132
{
  float sideExtents[3];
  cmodel_t *brushModel;
  cbrush_t *brush;
};

/* 7218 */
#pragma pack(push, 4)
struct objInfo
{
  int clipMask;
  int cylDirection;
  TraceThreadInfo threadInfo;
  float bounds[2][3];
  PhysicsGeomType type;
  float pos[3];
  float R[3][3];
  float RTransposed[3][3];
  $A2C4EA666553E7F54FEB40BCC412A132 u;
  float bodyCenter[3];
  bool isNarrow;
};
#pragma pack(pop)

/* 7219 */
struct dContactGeomExt
{
  dContactGeom contact;
  int surfFlags;
};

/* 7220 */
struct Results
{
  dContactGeomExt *contacts;
  int contactCount;
  int maxContacts;
  int stride;
};

/* 7221 */
struct InputOutput
{
  objInfo *Input;
  Results *Output;
};

/* 7222 */
struct leafList_s
{
  int count;
  int maxcount;
  int overflowed;
  unsigned __int16 *list;
  float bounds[2][3];
  int lastLeaf;
};

/* 7223 */
struct GeomStateCylinder
{
  int direction;
  float radius;
  float halfHeight;
};

/* 7224 */
#pragma pack(push, 4)
struct entityShared_t
{
  char linked;
  char bmodel;
  char svFlags;
  int clientMask[2];
  char inuse;
  int broadcastTime;
  float mins[3];
  float maxs[3];
  int contents;
  float absmin[3];
  float absmax[3];
  float currentOrigin[3];
  float currentAngles[3];
  int ownerNum;
  int eventTime;
};
#pragma pack(pop)

/* 7225 */
struct playerTeamState_t
{
  int location;
};

/* 7226 */
#pragma pack(push, 4)
struct clientSession_t
{
  sessionState_t sessionState;
  int forceSpectatorClient;
  int status_icon;
  int archiveTime;
  int score;
  int deaths;
  int kills;
  int assists;
  unsigned __int16 scriptPersId;
  clientConnected_t connected;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int localClient;
  int predictItemPickup;
  char newnetname[32];
  int maxHealth;
  int enterTime;
  playerTeamState_t teamState;
  int voteCount;
  int teamVoteCount;
  float moveSpeedScaleMultiplier;
  int viewmodelIndex;
  int noSpectate;
  int teamInfo;
  clientState_s cs;
  int psOffsetTime;
};
#pragma pack(pop)

/* 7227 */
#pragma pack(push, 4)
struct gentity_s
{
  entityState_s s;
  entityShared_t r;
  gclient_s *client;
  turretInfo_s *pTurretInfo;
  scr_vehicle_s *scr_vehicle;
  unsigned __int16 model;
  char physicsObject;
  char takedamage;
  char active;
  char nopickup;
  char handler;
  char team;
  unsigned __int16 classname;
  unsigned __int16 target;
  unsigned __int16 targetname;
  unsigned int attachIgnoreCollision;
  int spawnflags;
  int flags;
  int eventTime;
  int freeAfterEvent;
  int unlinkAfterEvent;
  int clipmask;
  int processedFrame;
  gentity_s *parent;
  int nextthink;
  int health;
  int maxHealth;
  int damage;
  int count;
  gentity_s *chain;
  $73EC31463AB2E2014DA76FFB3C0281FF ___u30;
  tagInfo_s *tagInfo;
  gentity_s *tagChildren;
  unsigned __int16 attachModelNames[19];
  unsigned __int16 attachTagNames[19];
  int useCount;
  gentity_s *nextFree;
};
#pragma pack(pop)

/* 7228 */
#pragma pack(push, 2)
struct gclient_s
{
  playerState_s ps;
  clientSession_t sess;
  int spectatorClient;
  int noclip;
  int ufo;
  int bFrozen;
  int lastCmdTime;
  int buttons;
  int oldbuttons;
  int latched_buttons;
  int buttonsSinceLastFrame;
  float oldOrigin[3];
  float fGunPitch;
  float fGunYaw;
  int damage_blood;
  float damage_from[3];
  int damage_fromWorld;
  int accurateCount;
  int accuracy_shots;
  int accuracy_hits;
  int inactivityTime;
  int inactivityWarning;
  int lastVoiceTime;
  int switchTeamTime;
  float currentAimSpreadScale;
  gentity_s *persistantPowerup;
  int portalID;
  int dropWeaponTime;
  int sniperRifleFiredTime;
  float sniperRifleMuzzleYaw;
  int PCSpecialPickedUpCount;
  int useHoldEntity;
  int useHoldTime;
  int useButtonDone;
  int iLastCompassPlayerInfoEnt;
  int compassPingTime;
  int damageTime;
  float v_dmg_roll;
  float v_dmg_pitch;
  float swayViewAngles[3];
  float swayOffset[3];
  float swayAngles[3];
  float vLastMoveAng[3];
  float fLastIdleFactor;
  float vGunOffset[3];
  float vGunSpeed[3];
  int weapIdleTime;
  int lastServerTime;
  int lastSpawnTime;
  unsigned int lastWeapon;
  bool previouslyFiring;
  bool previouslyUsingNightVision;
  bool previouslySprinting;
  int lastStand;
  int lastStandTime;
  unsigned int clanId;
};
#pragma pack(pop)

/* 7229 */
struct turretInfo_s
{
  int inuse;
  int flags;
  int fireTime;
  float arcmin[2];
  float arcmax[2];
  float dropPitch;
  int stance;
  int prevStance;
  int fireSndDelay;
  float userOrigin[3];
  float playerSpread;
  float pitchCap;
  int triggerDown;
  char fireSnd;
  char fireSndPlayer;
  char stopSnd;
  char stopSndPlayer;
};

/* 7230 */
#pragma pack(push, 4)
struct vehicle_node_t
{
  unsigned __int16 name;
  unsigned __int16 target;
  unsigned __int16 script_linkname;
  unsigned __int16 script_noteworthy;
  __int16 index;
  int rotated;
  float speed;
  float lookAhead;
  float origin[3];
  float dir[3];
  float angles[3];
  float length;
  __int16 nextIdx;
  __int16 prevIdx;
};
#pragma pack(pop)

/* 7231 */
struct vehicle_pathpos_t
{
  __int16 nodeIdx;
  __int16 endOfPath;
  float frac;
  float speed;
  float lookAhead;
  float slide;
  float origin[3];
  float angles[3];
  float lookPos[3];
  vehicle_node_t switchNode[2];
};

/* 7232 */
#pragma pack(push, 4)
struct vehicle_physic_t
{
  float origin[3];
  float prevOrigin[3];
  float angles[3];
  float prevAngles[3];
  float maxAngleVel[3];
  float yawAccel;
  float yawDecel;
  char inputAccelerationOLD;
  char inputTurning;
  float driverPedal;
  float driverSteer;
  int onGround;
  float colVelDelta[3];
  float mins[3];
  float maxs[3];
  float vel[3];
  float bodyVel[3];
  float rotVel[3];
  float accel[3];
  float maxPitchAngle;
  float maxRollAngle;
  float wheelZVel[4];
  float wheelZPos[4];
  int wheelSurfType[4];
  float worldTilt[3];
  float worldTiltVel[3];
};
#pragma pack(pop)

/* 7233 */
struct VehicleTurret
{
  int fireTime;
  int fireBarrel;
  float barrelOffset;
  int barrelBlocked;
  VehicleTurretState turretState;
};

/* 7234 */
struct VehicleJitter
{
  int jitterPeriodMin;
  int jitterPeriodMax;
  int jitterEndTime;
  float jitterOffsetRange[3];
  float jitterDeltaAccel[3];
  float jitterAccel[3];
  float jitterPos[3];
};

/* 7235 */
struct VehicleHover
{
  float hoverRadius;
  float hoverSpeed;
  float hoverAccel;
  float hoverGoalPos[3];
  int useHoverAccelForAngles;
};

/* 7236 */
struct VehicleRideSlot_t
{
  unsigned int tagName;
  int boneIdx;
  int entNum;
};

/* 7237 */
struct VehicleTags
{
  VehicleRideSlot_t riderSlots[3];
  int detach;
  int popout;
  int body;
  int turret;
  int turret_base;
  int barrel;
  int flash[5];
  int wheel[4];
};

/* 7238 */
#pragma pack(push, 4)
struct scr_vehicle_s
{
  vehicle_pathpos_t pathPos;
  vehicle_physic_t phys;
  int entNum;
  __int16 infoIdx;
  int flags;
  int team;
  VehicleMoveState moveState;
  __int16 waitNode;
  float waitSpeed;
  VehicleTurret turret;
  VehicleJitter jitter;
  VehicleHover hover;
  int drawOnCompass;
  unsigned __int16 lookAtText0;
  unsigned __int16 lookAtText1;
  int manualMode;
  float manualSpeed;
  float manualAccel;
  float manualDecel;
  float manualTime;
  float speed;
  float maxDragSpeed;
  float turningAbility;
  int hasTarget;
  int hasTargetYaw;
  int hasGoalYaw;
  int stopAtGoal;
  int stopping;
  int targetEnt;
  int lookAtEnt;
  float targetOrigin[3];
  float targetOffset[3];
  float targetYaw;
  float goalPosition[3];
  float goalYaw;
  float prevGoalYaw;
  float yawOverShoot;
  int yawSlowDown;
  float nearGoalNotifyDist;
  float joltDir[2];
  float joltTime;
  float joltWave;
  float joltSpeed;
  float joltDecel;
  int playEngineSound;
  int idleSndEnt;
  int engineSndEnt;
  float idleSndLerp;
  float engineSndLerp;
  VehicleTags boneIndex;
  int turretHitNum;
  float forcedMaterialSpeed;
};
#pragma pack(pop)

/* 7239 */
struct item_ent_t
{
  int ammoCount;
  int clipAmmoCount;
  int index;
};

/* 7240 */
#pragma pack(push, 4)
struct trigger_ent_t
{
  int threshold;
  int accumulate;
  int timestamp;
  int singleUserEntIndex;
  bool requireLookAt;
};
#pragma pack(pop)

/* 7241 */
struct mover_ent_t
{
  float decelTime;
  float aDecelTime;
  float speed;
  float aSpeed;
  float midTime;
  float aMidTime;
  float pos1[3];
  float pos2[3];
  float pos3[3];
  float apos1[3];
  float apos2[3];
  float apos3[3];
};

/* 7242 */
struct corpse_ent_t
{
  int deathAnimStartTime;
};

/* 7243 */
struct missile_ent_t
{
  float time;
  int timeOfBirth;
  float travelDist;
  float surfaceNormal[3];
  team_t team;
  float curvature[3];
  int targetEntNum;
  float targetOffset[3];
  MissileStage stage;
  MissileFlightMode flightMode;
};

/* 7244 */
#pragma pack(push, 4)
struct tagInfo_s
{
  gentity_s *parent;
  gentity_s *next;
  unsigned __int16 name;
  int index;
  float axis[4][3];
  float parentInvAxis[4][3];
};
#pragma pack(pop)

/* 7245 */
union $73EC31463AB2E2014DA76FFB3C0281FF
{
  item_ent_t item[2];
  trigger_ent_t trigger;
  mover_ent_t mover;
  corpse_ent_t corpse;
  missile_ent_t missile;
};

/* 7246 */
union $9D45B39C07DB0B08FAF61AA195BBB4AF
{
  unsigned __int16 brushModel;
  cbrush_t *brush;
};

/* 7247 */
struct BrushInfo
{
  $9D45B39C07DB0B08FAF61AA195BBB4AF u;
  float centerOfMass[3];
};

/* 7248 */
struct GeomStateBox
{
  float extent[3];
};

/* 7249 */
struct GeomStateBrush
{
  $9D45B39C07DB0B08FAF61AA195BBB4AF u;
  float momentsOfInertia[3];
  float productsOfInertia[3];
};

/* 7250 */
union $69BD0299A050B801B60B1C7312BAEDF6
{
  GeomStateCylinder cylinderState;
  GeomStateBox boxState;
  GeomStateBrush brushState;
};

/* 7251 */
#pragma pack(push, 4)
struct GeomState
{
  PhysicsGeomType type;
  bool isOriented;
  float orientation[3][3];
  $69BD0299A050B801B60B1C7312BAEDF6 u;
};
#pragma pack(pop)

/* 7252 */
struct ContactList
{
  dContactGeomExt contacts[128];
  int contactCount;
};

/* 7253 */
struct FrameInfo
{
  int localClientNum;
  int worldIndex;
};

/* 7254 */
struct ScreenPlacement
{
  float scaleVirtualToReal[2];
  float scaleVirtualToFull[2];
  float scaleRealToVirtual[2];
  float virtualScreenOffsetX;
  float virtualViewableMin[2];
  float virtualViewableMax[2];
  float realViewportSize[2];
  float realViewableMin[2];
  float realViewableMax[2];
  float subScreenLeft;
};

/* 7255 */
struct cgMedia_t
{
  Material *whiteMaterial;
  Material *teamStatusBar;
  Material *balloonMaterial;
  Material *connectionMaterial;
  Material *youInKillCamMaterial;
  Material *tracerMaterial;
  Material *laserMaterial;
  Material *laserLightMaterial;
  Material *lagometerMaterial;
  Material *hintMaterials[133];
  Material *stanceMaterials[4];
  Material *objectiveMaterials[1];
  Material *friendMaterials[2];
  Material *damageMaterial;
  Material *mantleHint;
  Font_s *smallDevFont;
  Font_s *bigDevFont;
  snd_alias_list_t *landDmgSound;
  snd_alias_list_t *grenadeExplodeSound[29];
  snd_alias_list_t *rocketExplodeSound[29];
  snd_alias_list_t *bulletHitSmallSound[29];
  snd_alias_list_t *bulletHitLargeSound[29];
  snd_alias_list_t *bulletHitAPSound[29];
  snd_alias_list_t *shotgunHitSound[29];
  snd_alias_list_t *bulletExitSmallSound[29];
  snd_alias_list_t *bulletExitLargeSound[29];
  snd_alias_list_t *bulletExitAPSound[29];
  snd_alias_list_t *shotgunExitSound[29];
  snd_alias_list_t *stepSprintSound[58];
  snd_alias_list_t *stepSprintSoundPlayer[58];
  snd_alias_list_t *stepRunSound[58];
  snd_alias_list_t *stepRunSoundPlayer[58];
  snd_alias_list_t *stepWalkSound[58];
  snd_alias_list_t *stepWalkSoundPlayer[58];
  snd_alias_list_t *stepProneSound[58];
  snd_alias_list_t *stepProneSoundPlayer[58];
  snd_alias_list_t *landSound[58];
  snd_alias_list_t *landSoundPlayer[58];
  snd_alias_list_t *qsprintingEquipmentSound;
  snd_alias_list_t *qsprintingEquipmentSoundPlayer;
  snd_alias_list_t *qrunningEquipmentSound;
  snd_alias_list_t *qrunningEquipmentSoundPlayer;
  snd_alias_list_t *qwalkingEquipmentSound;
  snd_alias_list_t *qwalkingEquipmentSoundPlayer;
  snd_alias_list_t *sprintingEquipmentSound;
  snd_alias_list_t *sprintingEquipmentSoundPlayer;
  snd_alias_list_t *runningEquipmentSound;
  snd_alias_list_t *runningEquipmentSoundPlayer;
  snd_alias_list_t *walkingEquipmentSound;
  snd_alias_list_t *walkingEquipmentSoundPlayer;
  snd_alias_list_t *foliageMovement;
  snd_alias_list_t *bulletWhizby;
  snd_alias_list_t *meleeSwingLarge;
  snd_alias_list_t *meleeSwingSmall;
  snd_alias_list_t *meleeHit;
  snd_alias_list_t *meleeHitOther;
  snd_alias_list_t *nightVisionOn;
  snd_alias_list_t *nightVisionOff;
  snd_alias_list_t *playerSprintGasp;
  snd_alias_list_t *playerHeartBeatSound;
  snd_alias_list_t *playerBreathInSound;
  snd_alias_list_t *playerBreathOutSound;
  snd_alias_list_t *playerBreathGaspSound;
  snd_alias_list_t *playerSwapOffhand;
  snd_alias_list_t *physCollisionSound[50][29];
  Material *compassping_friendlyfiring;
  Material *compassping_friendlyyelling;
  Material *compassping_enemy;
  Material *compassping_enemyfiring;
  Material *compassping_enemyyelling;
  Material *compassping_grenade;
  Material *compassping_explosion;
  Material *compass_radarline;
  Material *compass_helicopter_friendly;
  Material *compass_helicopter_enemy;
  Material *compass_plane_friendly;
  Material *compass_plane_enemy;
  Material *grenadeIconFrag;
  Material *grenadeIconFlash;
  Material *grenadeIconThrowBack;
  Material *grenadePointer;
  FxImpactTable *fx;
  FxEffectDef *fxNoBloodFleshHit;
  FxEffectDef *fxKnifeBlood;
  FxEffectDef *heliDustEffect;
  FxEffectDef *heliWaterEffect;
  FxEffectDef *helicopterLightSmoke;
  FxEffectDef *helicopterHeavySmoke;
  FxEffectDef *helicopterOnFire;
  FxEffectDef *jetAfterburner;
  FxEffectDef *fxVehicleTireDust;
  Material *nightVisionOverlay;
  Material *hudIconNVG;
  Material *hudDpadArrow;
  Material *ammoCounterBullet;
  Material *ammoCounterBeltBullet;
  Material *ammoCounterRifleBullet;
  Material *ammoCounterRocket;
  Material *ammoCounterShotgunShell;
  Material *textDecodeCharacters;
  Material *textDecodeCharactersGlow;
};

/* 7256 */
struct Poly
{
  float (*pts)[3];
  unsigned int ptCount;
};

/* 7257 */
struct SeparatingAxisInfo
{
  float bestDepth;
  unsigned int bestAxis;
  float bestContactNormal[3];
};

/* 7258 */
struct LocalContactData
{
  float pos[3];
  float normal[3];
  float depth;
  int surfFlags;
  int inUse;
};

/* 7259 */
struct AxisTestResults
{
  float bestDepth;
  float bestCenter;
  int bestAxis;
  float bestRt;
  float normal[3];
};

/* 7260 */
struct Capsule
{
  float p0[3];
  float p1[3];
  float center[3];
  float axis[3];
  float radius;
  float sqRadius;
  float halfLength;
  float halfHeight;
};

/* 7261 */
struct BrushBrushData
{
  cbrush_t *fixedBrush;
  objInfo *input;
  Results *results;
};

/* 7262 */
struct BrushTrimeshData
{
  const unsigned __int16 *indices;
  const float (*verts)[3];
  int triCount;
  objInfo *input;
  int surfaceFlags;
  Results *results;
};

/* 7263 */
#pragma pack(push, 4)
struct internal_state
{
  z_stream_s *strm;
  int status;
  char *pending_buf;
  unsigned int pending_buf_size;
  char *pending_out;
  int pending;
  int noheader;
  char data_type;
  char method;
  int last_flush;
  unsigned int w_size;
  unsigned int w_bits;
  unsigned int w_mask;
  char *window;
  unsigned int window_size;
  unsigned __int16 *prev;
  unsigned __int16 *head;
  unsigned int ins_h;
  unsigned int hash_size;
  unsigned int hash_bits;
  unsigned int hash_mask;
  unsigned int hash_shift;
  int block_start;
  unsigned int match_length;
  unsigned int prev_match;
  int match_available;
  unsigned int strstart;
  unsigned int match_start;
  unsigned int lookahead;
  unsigned int prev_length;
  unsigned int max_chain_length;
  unsigned int max_lazy_match;
  int level;
  int strategy;
  unsigned int good_match;
  int nice_match;
  ct_data_s dyn_ltree[573];
  ct_data_s dyn_dtree[61];
  ct_data_s bl_tree[39];
  tree_desc_s l_desc;
  tree_desc_s d_desc;
  tree_desc_s bl_desc;
  unsigned __int16 bl_count[16];
  int heap[573];
  int heap_len;
  int heap_max;
  char depth[573];
  char *l_buf;
  unsigned int lit_bufsize;
  unsigned int last_lit;
  unsigned __int16 *d_buf;
  unsigned int opt_len;
  unsigned int static_len;
  unsigned int matches;
  int last_eob_len;
  unsigned __int16 bi_buf;
  int bi_valid;
};
#pragma pack(pop)

/* 7264 */
struct z_stream_s
{
  char *next_in;
  unsigned int avail_in;
  unsigned int total_in;
  char *next_out;
  unsigned int avail_out;
  unsigned int total_out;
  char *msg;
  internal_state *state;
  char *(__cdecl *zalloc)(char *, unsigned int, unsigned int);
  void (__cdecl *zfree)(char *, char *);
  char *opaque;
  int data_type;
};

/* 7265 */
union $3FED14670831426F78C1F126725788C0
{
  unsigned __int16 freq;
  unsigned __int16 code;
};

/* 7266 */
union $2467CA9704E0472D4CCF1296A763D23A
{
  unsigned __int16 dad;
  unsigned __int16 len;
};

/* 7267 */
struct ct_data_s
{
  $3FED14670831426F78C1F126725788C0 fc;
  $2467CA9704E0472D4CCF1296A763D23A dl;
};

/* 7268 */
struct static_tree_desc_s
{
  int dummy;
};

/* 7269 */
struct tree_desc_s
{
  ct_data_s *dyn_tree;
  int max_code;
  static_tree_desc_s *stat_desc;
};

/* 7270 */
struct $C95D6283330011CC4EEF9CC74F2A7D10
{
  char Exop;
  char Bits;
};

/* 7271 */
union $EB74F33F7988EEF2113B9BC3343496D2
{
  $C95D6283330011CC4EEF9CC74F2A7D10 what;
  unsigned int pad;
};

/* 7272 */
struct inflate_huft_s
{
  $EB74F33F7988EEF2113B9BC3343496D2 word;
  unsigned int base;
};

/* 7273 */
struct $92C13AB839749C078BC0682FF7B2E447
{
  unsigned int table;
  unsigned int index;
  unsigned int *blens;
  unsigned int bb;
  inflate_huft_s *tb;
};

/* 7274 */
struct inflate_codes_state
{
  int dummy;
};

/* 7275 */
struct $EEBD093F63280A1F1F41502EFCE0CC26
{
  inflate_codes_state *codes;
};

/* 7276 */
union $DE2029E061BA563D4408729F59451DA1
{
  unsigned int left;
  $92C13AB839749C078BC0682FF7B2E447 trees;
  $EEBD093F63280A1F1F41502EFCE0CC26 decode;
};

/* 7277 */
struct inflate_blocks_state
{
  inflate_block_mode mode;
  $DE2029E061BA563D4408729F59451DA1 sub;
  unsigned int last;
  unsigned int bitk;
  unsigned int bitb;
  inflate_huft_s *hufts;
  char *window;
  char *end;
  char *read;
  char *write;
};

/* 7278 */
struct $51B0BFDBD4DB281CC4945CADD7BC84D7
{
  unsigned int need;
};

/* 7279 */
union $CFE5E2AE99AE19F3BB5F1418D79951AC
{
  unsigned int method;
  $51B0BFDBD4DB281CC4945CADD7BC84D7 check;
  unsigned int marker;
};

/* 7280 */
struct $12952C21A416F0CA8ECE442516CC9A8D
{
  inflate_huft_s *tree;
  unsigned int need;
};

/* 7281 */
struct $A30D36EE59FB41C132336408835C9B9C
{
  unsigned int get;
  unsigned int dist;
};

/* 7282 */
union $CEC4B21A73D08D47E7F3C0A0B94BEAE7
{
  $12952C21A416F0CA8ECE442516CC9A8D code;
  unsigned int lit;
  $A30D36EE59FB41C132336408835C9B9C copy;
};

/* 7283 */
struct config_s
{
  unsigned __int16 good_length;
  unsigned __int16 max_lazy;
  unsigned __int16 nice_length;
  unsigned __int16 max_chain;
  block_state (__cdecl *func)(internal_state *, int);
};

/* 7284 */
struct TeamMemberInfo
{
  unsigned __int64 xuid;
  char gamertag[16];
};

/* 7285 */
struct CachedTeamInfo
{
  bool active;
  __declspec(align(4)) unsigned int teamId;
  int memberCount;
  char teamName[75];
  char teamPlayStyle[63];
  char teamPlayFrequency[63];
  char teamLanguage[33];
  char teamURL[300];
  __declspec(align(8)) TeamMemberInfo members[100];
};

/* 7286 */
struct msg_t
{
  int overflowed;
  int readOnly;
  char *data;
  char *splitData;
  int maxsize;
  int cursize;
  int splitSize;
  int readcount;
  int bit;
  int lastEntityRef;
};

/* 7287 */
struct LargeLocal
{
  int startPos;
  int size;
};

/* 7288 */
#pragma pack(push, 4)
struct overlappedTask
{
  _XOVERLAPPED overlappedIO;
  int type;
  bool active;
  char controllerIndex;
  void *data;
};
#pragma pack(pop)

/* 7289 */
#pragma pack(push, 4)
struct RemoteTeamInfo
{
  bool queued;
  unsigned int teamId;
};
#pragma pack(pop)

/* 7290 */
#pragma pack(push, 8)
struct RemoteTeamCheckInfo
{
  bool queued;
  unsigned __int64 xuid;
  int clientNum;
};
#pragma pack(pop)

/* 7291 */
#pragma pack(push, 4)
struct playerStatNetworkData
{
  char playerStats[8192];
  char tempStatsBuffer[8192];
  _XSTORAGE_DOWNLOAD_TO_MEMORY_RESULTS statsResults;
  wchar_t statsServerPath[256];
  unsigned int statsServerPathLen;
  bool statsFetched;
  bool statWriteNeeded;
};
#pragma pack(pop)

/* 7292 */
#pragma pack(push, 4)
struct PartyInfo
{
  bool active;
  _XSESSION_INFO info;
  int occupiedPublicSlots;
  int occupiedPrivateSlots;
  int numPublicSlots;
  int numPrivateSlots;
  int ping;
  int upload;
  bool avoided;
};
#pragma pack(pop)

/* 7293 */
#pragma pack(push, 8)
struct PartyMember
{
  char status;
  bool invited;
  bool headsetPresent;
  int natType;
  unsigned __int64 player;
  char gamertag[32];
  char clanAbbrev[5];
  netadr_t addr;
  int qport;
  char challenge[6];
  int lastPacketTime;
  int lastHeartbeatTime;
  int lastPartyStateAck;
  XNADDR xnaddr;
  bool mapPrefs[2];
  int ackedMembers;
  XNKID privatePartyId;
  int subpartyIndex;
  int trueSkill;
  int rank;
  int team;
  int score;
  int deaths;
  int voiceConnectivityBits;
};
#pragma pack(pop)

/* 7294 */
struct SubpartyInfo
{
  int members[24];
  int count;
  int skill;
  int team;
};

/* 7295 */
struct PartyHostDetails
{
  int partyListSlot;
  netadr_t addr;
  _XSESSION_INFO sessionInfo;
  int lastPacketTime;
  int lastPacketSentTime;
  int numPrivateSlots;
  int numPublicSlots;
};

/* 7296 */
struct PartyHostData
{
  int partyStateChangeTime;
  int expectedPlayers;
  int wakeTime;
};

/* 7297 */
#pragma pack(push, 4)
struct PartyData_s
{
  SessionData_s *session;
  SessionData_s *presenceSession;
  PartyInfo partyList[50];
  PartyMember partyMembers[24];
  SubpartyInfo subparties[24];
  int subpartyCount;
  PartyHostDetails currentHost;
  PartyHostDetails potentialHost;
  PartyHostData hostData;
  int areWeHost;
  int joiningAnotherParty;
  int inParty;
  int party_systemActive;
  int ready;
  int readyTime;
  int headsetPresent;
  int headsetTime;
  int clanAbbrevTime;
  int rankTime;
  int partyId;
  bool mapList[2];
  int nextSessionSearchTime;
  int mapPackSearchFlags;
  int mapPackFlags;
  int lastPartyStateTime;
  int gameStartTime;
  int hostTimeouts;
  char lobbyFlags;
  int playlistEntry;
  PartyData_s *partyToNotify;
  bool registeredWithArbitration;
  int partyStateIsMultiplePackets;
  int partyStatePart1LastMemberIndex;
  int unfinishedPart1ServerTime;
  msg_t partyStatePart1Msg;
  char partyStatePart1MsgBuf[1264];
  int unfinishedPart2ServerTime;
  msg_t partyStatePart2Msg;
  char partyStatePart2MsgBuf[1264];
};
#pragma pack(pop)

/* 7298 */
#pragma pack(push, 8)
struct SessionJoinData
{
  bool active;
  int privateSlot;
  int slot;
  unsigned __int64 player;
  SessionData_s *session;
};
#pragma pack(pop)

/* 7299 */
#pragma pack(push, 4)
struct SessionCreateData
{
  bool active;
  SessionData_s *session;
};
#pragma pack(pop)

/* 7300 */
#pragma pack(push, 8)
struct SessionGraveYard
{
  bool active;
  unsigned __int64 playerList[24];
  SessionData_s sessionData;
};
#pragma pack(pop)

/* 7301 */
struct MapnameRichPresenceInfo
{
  char mapname[32];
  int context;
  int mapPack;
};

/* 7302 */
struct ConversionArguments
{
  int argCount;
  const char *args[9];
};

/* 7303 */
#pragma pack(push, 4)
struct TeamMarker
{
  bool realizable;
  int partyIdx;
};
#pragma pack(pop)

/* 7304 */
struct clientLogo_t
{
  int startTime;
  int duration;
  int fadein;
  int fadeout;
  Material *material[2];
};

/* 7305 */
#pragma pack(push, 8)
struct serverInfo_t
{
  XNADDR xnaddr;
  XNKEY xnkey;
  XNKID xnkid;
  int publicSlots;
  int publicSlotsUsed;
  int privateSlots;
  int privateSlotsUsed;
  unsigned __int64 nonce;
  char netType;
  char clients;
  char maxClients;
  char dirty;
  char friendlyfire;
  char killcam;
  char hardware;
  char mod;
  char requestCount;
  __int16 minPing;
  __int16 maxPing;
  __int16 ping;
  char hostName[32];
  char mapName[32];
  char game[24];
  char gameType[16];
};
#pragma pack(pop)

/* 7306 */
#pragma pack(push, 4)
struct vidConfig_t
{
  unsigned int sceneWidth;
  unsigned int sceneHeight;
  unsigned int displayWidth;
  unsigned int displayHeight;
  float displayFrequency;
  int isFullscreen;
  float aspectRatioWindow;
  float aspectRatioScenePixel;
  float aspectRatioDisplayPixel;
  unsigned int maxTextureSize;
  unsigned int maxTextureMaps;
  bool deviceSupportsGamma;
};
#pragma pack(pop)

/* 7307 */
struct trDebugString_t
{
  float xyz[3];
  float color[4];
  float scale;
  char text[96];
};

/* 7308 */
struct clientDebugStringInfo_t
{
  int max;
  int num;
  trDebugString_t *strings;
  int *durations;
};

/* 7309 */
struct trDebugLine_t
{
  float start[3];
  float end[3];
  float color[4];
  int depthTest;
};

/* 7310 */
struct clientDebugLineInfo_t
{
  int max;
  int num;
  trDebugLine_t *lines;
  int *durations;
};

/* 7311 */
struct clientDebug_t
{
  int prevFromServer;
  int fromServer;
  clientDebugStringInfo_t clStrings;
  clientDebugStringInfo_t svStringsBuffer;
  clientDebugStringInfo_t svStrings;
  clientDebugLineInfo_t clLines;
  clientDebugLineInfo_t svLinesBuffer;
  clientDebugLineInfo_t svLines;
};

/* 7312 */
#pragma pack(push, 8)
struct clientStatic_t
{
  int quit;
  int hunkUsersStarted;
  char servername[256];
  _XSESSION_INFO hostInfo;
  int rendererStarted;
  int soundStarted;
  int uiStarted;
  int frametime;
  int realtime;
  int realFrametime;
  clientLogo_t logo;
  float mapCenter[3];
  int numlocalservers;
  serverInfo_t localServers[16];
  int pingUpdateSource;
  Material *whiteMaterial;
  Material *consoleMaterial;
  Font_s *consoleFont;
  vidConfig_t vidConfig;
  clientDebug_t debug;
  XNADDR xnaddrs[24];
  volatile int scriptError;
  float debugRenderPos[3];
};
#pragma pack(pop)

/* 7313 */
struct PartyMessages
{
  const char *string;
  void (__cdecl *func)(PartyData_s *, int, netadr_t, msg_t *);
};

/* 7314 */
#pragma pack(push, 4)
struct GamerSettingState
{
  bool isProfileLoggedIn;
  bool errorOnRead;
  bool gpadRumble;
  bool invertPitch;
  float viewSensitivity;
  bool autoAim;
  char gpadButtonsConfig[256];
  char gpadSticksConfig[256];
  float gpadButtonLStickDeflect;
  float gpadButtonRStickDeflect;
  char exeSettingsBuffer[1000];
  char commonSettingsBuffer[1000];
  char motd[256];
  bool mapPrefs[2];
  int playlist;
  char clanPrefix[5];
  char customClass[5][16];
};
#pragma pack(pop)

/* 7315 */
#pragma pack(push, 4)
struct MemcardError
{
  bool isError;
  unsigned int errorCode;
  unsigned int extendedErrorCode;
  const char *errorString;
};
#pragma pack(pop)

/* 7316 */
#pragma pack(push, 4)
struct XenonMemoryCardGlob
{
  bool isDeviceSelected[4];
  unsigned int deviceId[4];
  overlappedTask overlappedTasks[32];
  bool useDevDrive;
  bool deviceOpened;
};
#pragma pack(pop)

/* 7317 */
struct OpenFileInfo
{
  unsigned int result;
  void *xenonHandle;
  MemcardError error;
};

/* 7318 */
struct WriteFileInfo
{
  unsigned int result;
  unsigned int bytesWritten;
  unsigned int size;
  MemcardError error;
};

/* 7319 */
#pragma pack(push, 4)
struct DeviceSelectionInfo
{
  _XOVERLAPPED overlapped;
  unsigned int deviceId;
  int controllerIndex;
  bool isActive;
};
#pragma pack(pop)

/* 7320 */
struct DeviceStateInfo
{
  int controllerIndex;
};

/* 7321 */
struct sysEvent_t
{
  int evPortIndex;
  int evTime;
  sysEventType_t evType;
  int evValue;
  int evValue2;
  int evPtrLength;
  void *evPtr;
};

/* 7322 */
#pragma pack(push, 8)
struct LaunchData
{
  int version;
  char startupText[900];
  bool skipMovies;
  char activeController;
  bool gameInviteAccepted;
  unsigned __int64 invitedXUID;
  char inviteHostInfo[60];
  bool fromGameInvite;
};
#pragma pack(pop)

/* 7323 */
struct SessionWriteStatsData
{
  bool active;
  __declspec(align(8)) unsigned __int64 xuid;
  _XSESSION_VIEW_PROPERTIES views[1];
  __declspec(align(8)) _XUSER_PROPERTY skill[2];
};

/* 7324 */
#pragma pack(push, 8)
struct XenonUserData
{
  int signinState;
  char gamertag[32];
  unsigned __int64 xuid;
  char xuidString[17];
};
#pragma pack(pop)

/* 7325 */
struct TrueSkillData
{
  unsigned __int64 xuids[24];
  unsigned int xuidCount;
  _XUSER_STATS_SPEC spec;
  char trueskillBuf[4800];
  unsigned int bufSize;
};

/* 7326 */
struct qosData
{
  int qosIndex;
  int numXnAddrs;
  XNKID *qosSessionIds[50];
};

/* 7327 */
struct Achievements
{
  char achievementName[32];
  int achievementId;
};

/* 7328 */
#pragma pack(push, 2)
struct Leaderboard
{
  char userStats[25600];
  unsigned int size;
  void *enumHandle;
  LbType type;
  int offset;
  int curIdx;
  bool forceRefresh;
  bool isUpdating;
  bool notSameFilter;
  int lastUpdate;
  int filter;
};
#pragma pack(pop)

/* 7329 */
struct LbPropRow
{
  _XUSER_PROPERTY props[16];
};

/* 7330 */
struct LbPlayerStat
{
  unsigned __int64 xuid;
  LbPropRow rows;
  _XSESSION_VIEW_PROPERTIES views[4];
};

/* 7331 */
#pragma pack(push, 8)
struct LbFriends
{
  _XONLINE_FRIEND xfriends[100];
  unsigned int size;
  unsigned __int64 xuids[101];
  unsigned int numXuids;
  void *enumHandle;
};
#pragma pack(pop)

/* 7332 */
struct LbGlob
{
  overlappedTask tasks[32];
  _XUSER_STATS_SPEC spec[4];
  LbPlayerStat playerStats[4];
  Leaderboard leaderboards[4];
  LbFriends friends;
  int statMap[16];
  char feederText[32];
};

/* 7333 */
struct ButtonToCodeMap_t
{
  GamePadButton padButton;
  int code;
};

/* 7334 */
struct $C40FF63FCD6C37E86F524B1673B57969
{
  _XINPUT_VIBRATION Rumble;
};

/* 7335 */
#pragma pack(push, 4)
struct GamePad
{
  bool enabled;
  bool keyboardEnabled;
  __int16 digitals;
  __int16 lastDigitals;
  float analogs[8];
  float lastAnalogs[8];
  float sticks[4];
  float lastSticks[4];
  bool stickDown[4][2];
  bool stickDownLast[4][2];
  float lowRumble;
  float highRumble;
  $C40FF63FCD6C37E86F524B1673B57969 feedback;
  _XINPUT_CAPABILITIES caps;
  _XINPUT_CAPABILITIES keyboardCaps;
};
#pragma pack(pop)

/* 7336 */
struct XZoneInfo
{
  const char *name;
  int allocFlags;
  int freeFlags;
};

/* 7337 */
struct KnownContentPackData
{
  char contentName[128];
  int contentPack;
  char dvarname[12];
};

/* 7338 */
#pragma pack(push, 4)
struct ContentPackList
{
  int contentPack;
  char filename[43];
  char drivename[12];
  unsigned int licenseMask;
  bool mounted;
};
#pragma pack(pop)

/* 7339 */
#pragma pack(push, 4)
struct EQ
{
  SND_EQTYPE type;
  float dbGain;
  float f0;
  float Q;
  bool isEnabled;
  float coeffs[5];
  float xn1[2];
  float xn2[2];
  float yn1[2];
  float yn2[2];
};
#pragma pack(pop)

/* 7340 */
struct ParametricEQ
{
  IXAudioEffect baseclass_0;
  int refCount;
  int band;
  int index;
  float lerp;
  EQ eq[2][3];
};

/* 7341 */
#pragma pack(push, 4)
struct SndEqParams
{
  SND_EQTYPE type;
  float gain;
  float freq;
  float q;
  bool enabled;
};
#pragma pack(pop)

/* 7342 */
struct CRiffChunkBuffer
{
  unsigned int m_fccChunkId;
  CRiffChunkBuffer *m_pParentChunk;
  char *m_pBuffer;
  unsigned int m_bufferSize;
  unsigned int m_dwDataOffset;
  unsigned int m_dwDataSize;
  unsigned int m_dwFlags;
};

/* 7343 */
struct CRiffChunk
{
  unsigned int m_fccChunkId;
  CRiffChunk *m_pParentChunk;
  void *m_hFile;
  unsigned int m_dwDataOffset;
  unsigned int m_dwDataSize;
  unsigned int m_dwFlags;
};

/* 7344 */
struct CXMAFile
{
  void *m_hFile;
  CRiffChunk m_RiffChunk;
  CRiffChunk m_FormatChunk;
  CRiffChunk m_DataChunk;
  CRiffChunk m_WaveChunk;
  CRiffChunk m_SeekTableChunk;
  CRiffChunk m_IwXmaDataInfoChunk;
};

/* 7345 */
struct CXMAHeaderBuffer
{
  const char *m_pFileName;
  char *m_pBuffer;
  unsigned int m_bufferSize;
  CRiffChunkBuffer m_RiffChunk;
  CRiffChunkBuffer m_FormatChunk;
  CRiffChunkBuffer m_DataChunk;
  CRiffChunkBuffer m_WaveChunk;
  CRiffChunkBuffer m_SeekTableChunk;
  CRiffChunkBuffer m_IwXmaDataInfoChunk;
};

/* 7346 */
#pragma pack(push, 4)
struct XaStreamReadInfo
{
  int dirty;
  char fileName[128];
  unsigned int hashCode;
  volatile int packetSize;
  int timeshift;
  float fraction;
  int startDelay;
  int aliasFlags;
  bool soundFileLoaded;
  int startMsec;
  int totalMsec;
  int totalWaveLength;
  int dataOffset;
  int seekTableOffset;
  void *file;
  int submitOffset;
  int playedOffset;
  int desiredSampleIndex;
  int initialSampleIndexOfFirstPacket;
};
#pragma pack(pop)

/* 7347 */
#pragma pack(push, 4)
struct PktCacheEntry
{
  char filename[128];
  PktCacheEntry *nextHash;
  unsigned int hashCode;
  int offset;
  PktCacheEntry *prev;
  PktCacheEntry *next;
  int refCount;
  bool primed;
};
#pragma pack(pop)

/* 7348 */
struct XaEqEffect
{
  SndEqParams params[64];
};

/* 7349 */
struct XaVolumeCoefficientsMonoInput
{
  float leftFront;
  float rightFront;
  float center;
  float lfe;
  float leftRear;
  float rightRear;
};

/* 7350 */
struct XaVolumeCoefficientsStereoInput
{
  float leftInputLeftFront;
  float rightInputLeftFront;
  float leftInputRightFront;
  float rightInputRightFront;
  float leftInputCenter;
  float rightInputCenter;
  float leftInputLfe;
  float rightInputLfe;
  float leftInputLeftRear;
  float rightInputLeftRear;
  float leftInputRightRear;
  float rightInputRightRear;
};

/* 7351 */
union XaVolumeCoefficients
{
  XaVolumeCoefficientsMonoInput mono;
  XaVolumeCoefficientsStereoInput stereo;
  float anonymousArray[1];
};

/* 7352 */
#pragma pack(push, 4)
struct XaLocal
{
  char xaudioHandle[20];
  IXAudioSourceVoice *voice_2D[8];
  IXAudioSourceVoice *voice_3D[32];
  IXAudioSourceVoice *voice_stream[13];
  IXAudioSubmixVoice *submixReverb;
  XAUDIOCHANNELMAP monoSourcePassthroughChannelMap;
  XAUDIOCHANNELMAPENTRY monoSourcePassthroughChannelEntry[1];
  XAUDIOCHANNELMAP stereoSourcePassthroughChannelMap;
  XAUDIOCHANNELMAPENTRY stereoSourcePassthroughChannelEntry[2];
  XaEqEffect eq[2][3];
  float eqLerp;
  XAUDIOFXTABLEENTRY effectInfo;
  int baseVolEntryCount_2D[8][2];
  float baseVolEntries_2D[8][2][12];
  int baseVolEntryCount_stream[13][2];
  float baseVolEntries_stream[13][2][12];
  XaReverbSettings *reverbSettings;
  XAUDIOSOURCEFORMAT streamSourceFormat[13];
  XaStreamReadInfo streamReadInfo[13];
  SndStartAliasInfo startAliasInfo[13];
  float realVolume[13];
  int playbackRate[53];
  X3DAUDIO_LISTENER listener;
  X3DAUDIO_EMITTER emitter;
  unsigned int calc3DFlags;
  X3DAUDIO_DSP_SETTINGS dspSettings;
  XaVolumeCoefficients volumeCoefficients;
  float delayTimes[6];
  X3DAUDIO_CONE cone;
  XAUDIOVOICEOUTPUTVOLUME voiceVolume;
  XAUDIOVOICEOUTPUTVOLUMEENTRY voiceEntry[2];
  XAUDIOCHANNELVOLUME channelVolume[2];
  XAUDIOCHANNELVOLUMEENTRY channelVolumeEntries[2][12];
  X3DAUDIO_DISTANCE_CURVE linearVolumeFalloffCurve;
  X3DAUDIO_DISTANCE_CURVE_POINT linearVolumeFalloffCurvePoints[9];
  float azimuths[2];
  char sourceVoiceOutputCount;
  XAUDIOVOICEOUTPUT output;
  XAUDIOVOICEOUTPUTENTRY outputEntry[2];
  XAUDIOCHANNELMAP channel;
  XAUDIOCHANNELMAPENTRY channelEntry[12];
};
#pragma pack(pop)

/* 7353 */
#pragma pack(push, 4)
struct XAnimState
{
  float time;
  float oldTime;
  __int16 cycleCount;
  __int16 oldCycleCount;
  float goalTime;
  float goalWeight;
  float weight;
  float rate;
  bool instantWeightChange;
};
#pragma pack(pop)

/* 7354 */
struct XAnimInfo
{
  unsigned __int16 notifyChild;
  __int16 notifyIndex;
  unsigned __int16 notifyName;
  unsigned __int16 notifyType;
  unsigned __int16 prev;
  unsigned __int16 next;
  unsigned __int16 children;
  unsigned __int16 parent;
  unsigned __int16 animIndex;
  unsigned __int16 animToModel;
  $C64BF0E2E445847BA8C25E12A01DD591 ___u10;
  XAnimState state;
};

/* 7355 */
struct adjacencyWinding_t
{
  int numsides;
  int sides[12];
};

/* 7356 */
struct SimplePlaneIntersection
{
  float xyz[3];
  int planeIndex[3];
};

/* 7357 */
struct TraceExtents
{
  float start[3];
  float end[3];
  float invDelta[3];
};

/* 7358 */
struct xtrace_t
{
  float normal[3];
  float fraction;
};

/* 7359 */
struct QueueElement
{
  unsigned int beginIndex;
  unsigned int count;
};

/* 7360 */
struct XSurfaceGetTriCandidatesLocals
{
  int mins[3];
  int maxs[3];
  XSurfaceCollisionTree *tree;
  const unsigned __int16 *inIndices;
  GfxPackedVertex *inVertices;
  bool (__cdecl *visitorFunc)(void *, GfxPackedVertex **);
  void *visitorContext;
  unsigned int nodeQueueBegin;
  unsigned int nodeQueueEnd;
  unsigned int leafQueueBegin;
  unsigned int leafQueueEnd;
  unsigned int triangleQueueBegin;
  unsigned int triangleQueueEnd;
  unsigned int vertexQueueBegin;
  unsigned int vertexQueueEnd;
  QueueElement nodeQueue[64];
  QueueElement leafQueue[4];
  QueueElement triangleQueue[4];
  unsigned __int16 vertexQueue[4][3];
};

/* 7361 */
struct XAnimTime
{
  float time;
  float frameFrac;
  int frameIndex;
};

/* 7362 */
struct bitarray<128>
{
  int array[4];
};

/* 7363 */
struct XAnimCalcAnimInfo
{
  DObjAnimMat rotTransArray[768];
  bitarray<128> animPartBits;
  bitarray<128> ignorePartBits;
};

/* 7364 */
struct __declspec(align(4)) XAnimToXModel
{
  bitarray<128> partBits;
  char boneCount;
  char boneIndex[128];
};

/* 7365 */
struct XModelNameMap
{
  unsigned __int16 name;
  unsigned __int16 index;
};

/* 7366 */
struct XAnimSimpleRotPos
{
  float rot[2];
  float posWeight;
  float pos[3];
};

/* 7367 */
struct XAnimDeltaInfo
{
  bool bClear;
  bool bNormQuat;
  bool bAbs;
  bool bUseGoalWeight;
};

/* 7368 */
struct XAnimNotify_s
{
  const char *name;
  unsigned int type;
  float timeFrac;
};

/* 7369 */
struct SavedDObjModel
{
  unsigned __int16 boneName;
};

/* 7370 */
struct SavedDObj
{
  SavedDObjModel dobjModels[32];
  XModel **models;
  unsigned int ignoreCollision;
  unsigned __int16 numModels;
  unsigned __int16 entnum;
  XAnimTree_s *tree;
  int hidePartBits[4];
};

/* 7371 */
#pragma pack(push, 4)
struct DObjTrace_s
{
  float fraction;
  int surfaceflags;
  float normal[3];
  unsigned __int16 modelIndex;
  unsigned __int16 partName;
  unsigned __int16 partGroup;
};
#pragma pack(pop)

/* 7372 */
struct search_node_s
{
  SimplePlaneIntersection *edge;
  int plane;
  int depth;
  search_node_s *prevNode;
};

/* 7373 */
struct infoParm_t
{
  char *name;
  int clearSolid;
  int surfaceFlags;
  int contents;
  int toolFlags;
};

/* 7374 */
struct RedBlackTreeNode
{
  unsigned __int64 key;
  unsigned int color;
  RedBlackTreeNode *parent;
  RedBlackTreeNode *child[2];
};

/* 7375 */
struct __declspec(align(8)) RedBlackTree
{
  RedBlackTreeNode null;
  RedBlackTreeNode root;
  RedBlackTreeNode *(__cdecl *AllocNodeCallback)();
};

/* 7376 */
struct __declspec(align(8)) RedBlackCacheNode
{
  RedBlackTreeNode rbNode;
  unsigned int timeStamp;
};

/* 7377 */
struct __declspec(align(8)) RedBlackCache
{
  RedBlackTree rbTree;
  RedBlackCacheNode *firstNode;
  unsigned int sizeofNode;
  unsigned int nodeCount;
  unsigned int minTimeToFree;
  unsigned int allocCount;
  unsigned int freeWalk;
  unsigned int timeStamp;
  bool isNewNode;
  __declspec(align(4)) void (__cdecl *FreeCallback)(RedBlackCacheNode *);
};

/* 7378 */
union $E5C6A92FB9EC742DB48E2EDC7CE289A3
{
  float f;
  int n;
  char b[4];
};

/* 7379 */
struct cspField_t
{
  const char *szName;
  int iOffset;
  int iFieldType;
};

/* 7380 */
struct va_info_t
{
  char va_string[2][1024];
  int index;
};

/* 7381 */
#pragma pack(push, 4)
struct parseInfo_t
{
  char token[1024];
  int lines;
  bool ungetToken;
  bool spaceDelimited;
  bool keepStringQuotes;
  bool csv;
  bool negativeNumbers;
  const char *errorPrefix;
  const char *warningPrefix;
  int backup_lines;
  const char *backup_text;
  const char *parseFile;
};
#pragma pack(pop)

/* 7382 */
struct ParseThreadInfo
{
  parseInfo_t parseInfo[16];
  int parseInfoNum;
  const char *tokenPos;
  const char *prevTokenPos;
  char line[1024];
};

/* 7383 */
struct com_parse_mark_t
{
  int lines;
  const char *text;
  int ungetToken;
  int backup_lines;
  const char *backup_text;
};

/* 7384 */
struct PhysicalMemoryFragment
{
  char *buf;
  unsigned int pos;
  unsigned int type;
};

/* 7385 */
struct PhysicalMemoryAllocation
{
  const char *name;
  unsigned int pos;
};

/* 7386 */
struct PhysicalMemoryPrim
{
  const char *allocName;
  unsigned int fragmentCount;
  PhysicalMemoryFragment fragments[32];
  unsigned int allocListCount;
  unsigned int pos;
  PhysicalMemoryAllocation allocList[32];
};

/* 7387 */
struct PhysicalMemory
{
  char *buf;
  PhysicalMemoryPrim prim[2];
};

/* 7388 */
struct SoundMemory
{
  char data[8448];
};

/* 7389 */
struct complex_s
{
  float real;
  float imag;
};

/* 7390 */
struct complex4_t
{
  float real[4];
  float imag[4];
};

/* 7391 */
union $BCB030280F2C2C6D54A9337FD6EB685D
{
  double d;
  int i;
  char *s;
};

/* 7392 */
struct EvalValue
{
  EvalValueType type;
  __declspec(align(8)) $BCB030280F2C2C6D54A9337FD6EB685D u;
};

/* 7393 */
#pragma pack(push, 4)
struct Eval
{
  EvalOperatorType opStack[1024];
  EvalValue valStack[1024];
  int opStackPos;
  int valStackPos;
  int parenCount;
  bool pushedOp;
};
#pragma pack(pop)

/* 7394 */
#pragma pack(push, 2)
struct SoundAliasGlobals
{
  char initialized[3];
  int randSeed;
};
#pragma pack(pop)

/* 7395 */
struct qtime_s
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 7396 */
struct PacketCacheGlobals
{
  PktCacheEntry cacheEntryData[2048];
  PktCacheEntry *cacheEntry[2048];
  PktCacheEntry semiFreeCacheEntry;
  PktCacheEntry freeCacheEntry;
  char *packetCache;
};

/* 7397 */
#pragma pack(push, 4)
struct fileData_s
{
  void *data;
  fileData_s *next;
  char type;
  char name[1];
};
#pragma pack(pop)

/* 7398 */
#pragma pack(push, 4)
struct HunkUser
{
  HunkUser *current;
  HunkUser *next;
  int maxSize;
  int end;
  int pos;
  const char *name;
  int fixed;
  int type;
  char buf[1];
};
#pragma pack(pop)

/* 7399 */
struct hunkUsed_t
{
  int permanent;
  int temp;
};

/* 7400 */
struct hunkHeader_t
{
  unsigned int magic;
  int size;
  int dummy[2];
};

/* 7401 */
union $621BA3935DE3581577B809AAC5A150E6
{
  float f;
  int i;
};

/* 7402 */
struct stringDef_s
{
  stringDef_s *next;
  const char *str;
};

/* 7403 */
union $B42A88463653BDCDFC5664844B4491DA
{
  int integer;
  float value;
  const char *string;
};

/* 7404 */
struct UILocalVar
{
  UILocalVarType type;
  const char *name;
  $B42A88463653BDCDFC5664844B4491DA u;
};

/* 7405 */
struct UILocalVarContext
{
  UILocalVar table[256];
};

/* 7406 */
struct UiContext
{
  int localClientNum;
  float bias;
  int realTime;
  int frameTime;
  int cursorx;
  int cursory;
  int debug;
  int screenWidth;
  int screenHeight;
  float screenAspect;
  float FPS;
  float blurRadiusOut;
  menuDef_t *Menus[512];
  int menuCount;
  menuDef_t *menuStack[16];
  int openMenuCount;
  UILocalVarContext localVars;
};

/* 7407 */
struct CachedAssets_t
{
  Material *scrollBarArrowUp;
  Material *scrollBarArrowDown;
  Material *scrollBarArrowLeft;
  Material *scrollBarArrowRight;
  Material *scrollBar;
  Material *scrollBarThumb;
  Material *sliderBar;
  Material *sliderThumb;
  Material *whiteMaterial;
  Material *cursor;
  Font_s *bigFont;
  Font_s *smallFont;
  Font_s *consoleFont;
  Font_s *boldFont;
  Font_s *textFont;
  Font_s *extraBigFont;
  Font_s *objectiveFont;
};

/* 7408 */
struct gameTypeInfo
{
  const char *gameType;
  const char *gameTypeName;
};

/* 7409 */
struct mapInfo
{
  const char *mapName;
  const char *mapLoadName;
};

/* 7410 */
struct pinglist_t
{
  char adrstr[64];
  int start;
};

/* 7411 */
struct serverStatus_s
{
  pinglist_t pingList[16];
  int numqueriedservers;
  int currentping;
  int nextpingtime;
  int maxservers;
  int refreshtime;
  int numServers;
  int sortKey;
  int sortDir;
  int lastCount;
  int refreshActive;
  int currentServer;
  int displayServers[20000];
  int numDisplayServers;
  int serverCount;
  int numPlayersOnServers;
  int nextDisplayRefresh;
  int nextSortTime;
  Material *currentServerPreview;
  int motdLen;
  int motdWidth;
  int motdPaintX;
  int motdPaintX2;
  int motdOffset;
  int motdTime;
  char motd[1024];
};

/* 7412 */
struct serverStatusInfo_t
{
  char address[64];
  const char *lines[128][4];
  char text[1024];
  char pings[72];
  int numLines;
};

/* 7413 */
struct pendingServer_t
{
  char adrstr[64];
  char name[64];
  int startTime;
  int serverNum;
  int valid;
};

/* 7414 */
struct pendingServerStatus_t
{
  int num;
  pendingServer_t server[16];
};

/* 7415 */
struct sharedUiInfo_t
{
  CachedAssets_t assets;
  int playerCount;
  char playerNames[24][32];
  char teamNames[24][32];
  int playerClientNums[24];
  int numGameTypes;
  gameTypeInfo gameTypes[32];
  int numCustomGameTypes;
  gameTypeInfo customGameTypes[32];
  char customGameTypeCancelState[2048];
  int numJoinGameTypes;
  gameTypeInfo joinGameTypes[32];
  int mapCount;
  mapInfo mapList[128];
  unsigned __int64 partyMemberXuid;
  Material *talkingIcons[2];
  serverStatus_s serverStatus;
  char serverStatusAddress[64];
  serverStatusInfo_t serverStatusInfo;
  int nextServerStatusRefresh;
  pendingServerStatus_t pendingServerStatus;
};

/* 7416 */
struct commandDef_t
{
  const char *name;
  void (__cdecl *handler)(UiContext *, itemDef_s *, const char **);
};

/* 7417 */
struct scrollInfo_s
{
  int nextScrollTime;
  int nextAdjustTime;
  int adjustValue;
  int scrollKey;
  float xStart;
  float yStart;
  itemDef_s *item;
  int scrollDir;
};

/* 7418 */
struct std::reverse_iterator<char *>
{
  std::_Iterator_base baseclass_0;
  char *current;
};

/* 7419 */
struct playlistGametype
{
  char scriptName[16];
  char internalName[16];
  char localizedName[64];
  char rules[1024];
  bool teamBased;
};

/* 7420 */
struct playlistEntry
{
  char mapname[32];
  char gametype[8];
  int weight;
};

/* 7421 */
#pragma pack(push, 4)
struct playlistInfo
{
  char name[64];
  char description[256];
  char rules[1024];
  playlistEntry entries[128];
  int numEntries;
  int unlockXp;
  bool ranked;
};
#pragma pack(pop)

/* 7422 */
#pragma pack(push, 4)
struct uiInfo_s
{
  UiContext uiDC;
  int myTeamCount;
  int playerRefresh;
  int playerIndex;
  int timeIndex;
  int previousTimes[4];
  uiMenuCommand_t currentMenuType;
  bool allowScriptMenuResponse;
};
#pragma pack(pop)

/* 7423 */
struct uiClientState_s
{
  connstate_t connState;
  int connectPacketCount;
  char servername[1024];
  char messageString[1024];
};

/* 7424 */
struct ValidOperation
{
  operationEnum op;
  expDataType leftSide;
  expDataType rightSide;
  void (__cdecl *function)(Operand *, Operand *, Operand *);
};

/* 7425 */
struct OperandList
{
  Operand operands[4];
  int operandCount;
};

/* 7426 */
struct OperandStack
{
  OperandList stack[60];
  int numOperandLists;
};

/* 7427 */
struct OperatorStack
{
  operationEnum stack[60];
  int numOperators;
};

/* 7428 */
struct std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base>
{
  std::_Iterator_base baseclass_0;
};

/* 7429 */
struct $CD551F75696B1F9BB05F1D4A8D4A4A3C
{
  _BYTE gap0[8];
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Str;
};

/* 7430 */
union $5A70921C5BE5595688F9296CA7AF753E
{
  std::exception baseclass_0;
  $CD551F75696B1F9BB05F1D4A8D4A4A3C _s1;
};

/* 7431 */
struct std::logic_error
{
  $5A70921C5BE5595688F9296CA7AF753E ___u0;
};

/* 7432 */
struct std::length_error
{
  std::logic_error baseclass_0;
};

/* 7433 */
struct std::runtime_error
{
  $5A70921C5BE5595688F9296CA7AF753E ___u0;
};

/* 7434 */
struct std::ctype_base
{
  std::locale::facet baseclass_0;
};

/* 7435 */
struct _Ctypevec
{
  unsigned int _Hand;
  unsigned int _Page;
  const __int16 *_Table;
  int _Delfl;
};

/* 7436 */
struct std::ctype<char>
{
  std::ctype_base baseclass_0;
  _Ctypevec _Ctype;
};

/* 7437 */
struct std::locale::id
{
  unsigned int _Id;
};

/* 7438 */
struct std::_Locinfo
{
  std::_Lockit _Lock;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Days;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Months;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Oldlocname;
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > _Newlocname;
};

/* 7439 */
struct std::ctype_byname<char>
{
  std::ctype<char> baseclass_0;
};

/* 7440 */
struct std::allocator<char>::rebind<char>
{
  char dummy[1];
};

/* 7441 */
struct std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  std::basic_ostream<char,std::char_traits<char> > *_Myostr;
};

/* 7442 */
struct __declspec(align(4)) std::basic_ostream<char,std::char_traits<char> >::sentry
{
  std::basic_ostream<char,std::char_traits<char> >::_Sentry_base baseclass_0;
  bool _Ok;
};

/* 7443 */
struct std::bad_cast
{
  std::exception baseclass_0;
};

/* 7444 */
struct std::invalid_argument
{
  std::logic_error baseclass_0;
};

/* 7445 */
struct std::codecvt_base
{
  std::locale::facet baseclass_0;
};

/* 7446 */
struct std::underflow_error
{
  std::runtime_error baseclass_0;
};

/* 7447 */
struct std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
{
  std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base> baseclass_0;
  const char *_Myptr;
};

/* 7448 */
struct std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
{
  std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > baseclass_0;
};

/* 7449 */
struct std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  std::basic_istream<char,std::char_traits<char> > *_Myistr;
};

/* 7450 */
struct __declspec(align(4)) std::basic_istream<char,std::char_traits<char> >::sentry
{
  std::basic_istream<char,std::char_traits<char> >::_Sentry_base baseclass_0;
  bool _Ok;
};

/* 7451 */
struct std::bad_typeid
{
  std::exception baseclass_0;
};

/* 7452 */
struct _Cvtvec
{
  unsigned int _Hand;
  unsigned int _Page;
};

/* 7453 */
struct std::codecvt<unsigned short,char,int>
{
  std::codecvt_base baseclass_0;
  _Cvtvec _Cvt;
};

/* 7454 */
struct std::ctype<wchar_t>
{
  std::ctype_base baseclass_0;
  _Ctypevec _Ctype;
  _Cvtvec _Cvt;
};

/* 7455 */
struct std::domain_error
{
  std::logic_error baseclass_0;
};

/* 7456 */
struct std::__non_rtti_object
{
  std::bad_typeid baseclass_0;
};

/* 7457 */
struct std::overflow_error
{
  std::runtime_error baseclass_0;
};

/* 7458 */
struct std::ctype<unsigned short>
{
  std::ctype_base baseclass_0;
  _Ctypevec _Ctype;
  _Cvtvec _Cvt;
};

/* 7459 */
struct std::range_error
{
  std::runtime_error baseclass_0;
};

/* 7460 */
struct _Collvec
{
  unsigned int _Hand;
  unsigned int _Page;
};

/* 7461 */
struct std::_Timevec
{
  void *_Timeptr;
};

/* 7462 */
struct std::out_of_range
{
  std::logic_error baseclass_0;
};

/* 7463 */
struct std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  std::basic_istream<wchar_t,std::char_traits<wchar_t> > *_Myistr;
};

/* 7464 */
struct __declspec(align(4)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry
{
  std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base baseclass_0;
  bool _Ok;
};

/* 7465 */
struct std::codecvt<wchar_t,char,int>
{
  std::codecvt_base baseclass_0;
  _Cvtvec _Cvt;
};

/* 7466 */
struct std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Myostr;
};

/* 7467 */
struct __declspec(align(4)) std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry
{
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base baseclass_0;
  bool _Ok;
};

/* 7468 */
struct std::ios_base::failure
{
  std::runtime_error baseclass_0;
};

/* 7469 */
struct std::ios_base::Init
{
  char dummy[1];
};

/* 7470 */
struct languageInfo_t
{
  const char *pszName;
  int bPresent;
};

/* 7471 */
struct moveclip_t
{
  float mins[3];
  float maxs[3];
  float outerSize[3];
  TraceExtents extents;
  int passEntityNum;
  int passOwnerNum;
  int contentmask;
};

/* 7472 */
struct archivedEntityShared_t
{
  int svFlags;
  int clientMask[2];
  float absmin[3];
  float absmax[3];
};

/* 7473 */
struct archivedEntity_s
{
  entityState_s s;
  archivedEntityShared_t r;
};

/* 7474 */
struct svEntity_s
{
  unsigned __int16 worldSector;
  unsigned __int16 nextEntityInWorldSector;
  archivedEntity_s baseline;
  int numClusters;
  int clusternums[16];
  int lastCluster;
  int linkcontents;
  float linkmin[2];
  float linkmax[2];
};

/* 7475 */
const struct IgnoreEntParams
{
  int baseEntity;
  int parentEntity;
  bool ignoreSelf;
  bool ignoreParent;
  bool ignoreSiblings;
  bool ignoreChildren;
};

/* 7476 */
struct pointtrace_t
{
  TraceExtents extents;
  IgnoreEntParams *ignoreEntParams;
  int contentmask;
  int bLocational;
  char *priorityMap;
};

/* 7477 */
struct sightpointtrace_t
{
  float start[3];
  float end[3];
  int passEntityNum[2];
  int contentmask;
  int locational;
  char *priorityMap;
};

/* 7478 */
struct sightclip_t
{
  float mins[3];
  float maxs[3];
  float outerSize[3];
  float start[3];
  float end[3];
  int passEntityNum[2];
  int contentmask;
};

/* 7479 */
struct server_t
{
  serverState_t state;
  int timeResidual;
  bool inFrame;
  bool smp;
  bool allowNetPackets;
  __declspec(align(2)) int restarting;
  int start_frameTime;
  int checksumFeed;
  cmodel_t *models[512];
  unsigned __int16 emptyConfigString;
  unsigned __int16 configstrings[2304];
  __declspec(align(4)) svEntity_s svEntities[1024];
  gentity_s *gentities;
  int gentitySize;
  int num_entities;
  playerState_s *gameClients;
  int gameClientSize;
  int skelTimeStamp;
  int skelMemPos;
  int bpsWindow[20];
  int bpsWindowSteps;
  int bpsTotalBytes;
  int bpsMaxBytes;
  int ubpsWindow[20];
  int ubpsTotalBytes;
  int ubpsMaxBytes;
  float ucompAve;
  int ucompNum;
  char gametype[64];
  float mapCenter[3];
  bool killServer;
  __declspec(align(4)) const char *killReason;
};

/* 7480 */
struct ClientSnapshotData
{
  int snapshotSize[8];
  int compressedSize[8];
  int index;
};

/* 7481 */
#pragma pack(push, 4)
struct SnapshotInfo_s
{
  int clientNum;
  int snapshotDeltaTime;
  bool fromBaseline;
  bool archived;
};
#pragma pack(pop)

/* 7482 */
struct svscmd_info_t
{
  char cmd[1024];
  int time;
  int type;
};

/* 7483 */
struct clientSnapshot_t
{
  playerState_s ps;
  int num_entities;
  int num_clients;
  int first_entity;
  int first_client;
  int messageSent;
  int messageAcked;
  int messageSize;
  int serverTime;
};

/* 7484 */
#pragma pack(push, 4)
struct client_s
{
  int state;
  int sendAsActive;
  const char *dropReason;
  char userinfo[1024];
  svscmd_info_t reliableCommandInfo[128];
  int reliableSequence;
  int reliableAcknowledge;
  int reliableSent;
  int messageAcknowledge;
  int gamestateMessageNum;
  int challenge;
  usercmd_s lastUsercmd;
  int lastClientCommand;
  char lastClientCommandString[1024];
  gentity_s *gentity;
  char name[32];
  char clanAbbrev[5];
  char downloadName[64];
  void *download;
  int downloadSize;
  int downloadCount;
  int downloadClientBlock;
  int downloadCurrentBlock;
  int downloadXmitBlock;
  char *downloadBlocks[8];
  int downloadBlockSize[8];
  int downloadEOF;
  int downloadSendTime;
  int deltaMessage;
  int nextReliableTime;
  int lastPacketTime;
  int lastConnectTime;
  int nextSnapshotTime;
  int rateDelayed;
  int timeoutCount;
  clientSnapshot_t frames[32];
  int ping;
  int rate;
  int snapshotMsec;
  int pureAuthentic;
  netchan_t netchan;
  char netchanOutgoingBuffer[131072];
  char netchanIncomingBuffer[2048];
  int guid;
  unsigned __int16 scriptId;
  int bIsTestClient;
  int serverId;
  float predictedOrigin[3];
  int predictedOriginServerTime;
  int natType;
  char stats[8192];
  char statPacketsReceived;
};
#pragma pack(pop)

/* 7485 */
struct snapshotEntityNumbers_t
{
  int numSnapshotEntities;
  int snapshotEntities[1024];
};

/* 7486 */
struct cachedSnapshot_t
{
  int archivedFrame;
  int time;
  int num_entities;
  int first_entity;
  int num_clients;
  int first_client;
  int usesDelta;
};

/* 7487 */
struct archivedSnapshot_s
{
  int start;
  int size;
};

/* 7488 */
struct cachedClient_s
{
  int playerStateExists;
  clientState_s cs;
  playerState_s ps;
};

/* 7489 */
struct challenge_t
{
  netadr_t adr;
  int challenge;
  int time;
  int pingTime;
  int firstTime;
  int firstPing;
  int connected;
  int guid;
};

/* 7490 */
struct tempBanSlot_t
{
  int guid;
  int banTime;
};

/* 7491 */
struct serverStatic_t
{
  int initialized;
  int time;
  int snapFlagServerBit;
  client_s clients[24];
  int numSnapshotEntities;
  int numSnapshotClients;
  int nextSnapshotEntities;
  int nextSnapshotClients;
  entityState_s snapshotEntities[49152];
  clientState_s snapshotClients[18432];
  int nextArchivedSnapshotFrames;
  archivedSnapshot_s archivedSnapshotFrames[1200];
  char archivedSnapshotBuffer[2097152];
  int nextArchivedSnapshotBuffer;
  int nextCachedSnapshotEntities;
  int nextCachedSnapshotClients;
  int nextCachedSnapshotFrames;
  archivedEntity_s cachedSnapshotEntities[2304];
  cachedClient_s cachedSnapshotClients[576];
  cachedSnapshot_t cachedSnapshotFrames[512];
  int nextHeartbeatTime;
  int nextStatusResponseTime;
  challenge_t challenges[1024];
  netProfileInfo_t OOBProf;
  tempBanSlot_t tempBans[16];
  unsigned __int64 xuids[24];
};

/* 7492 */
struct ucmd_t
{
  char *name;
  void (__cdecl *func)(client_s *);
};

/* 7493 */
struct yy_buffer_state
{
  _iobuf *yy_input_file;
  char *yy_ch_buf;
  char *yy_buf_pos;
  unsigned int yy_buf_size;
  int yy_n_chars;
  int yy_is_our_buffer;
  int yy_is_interactive;
  int yy_at_bol;
  int yy_fill_buffer;
  int yy_buffer_status;
};

/* 7494 */
union sval_u
{
  int type;
  unsigned int stringValue;
  unsigned int idValue;
  float floatValue;
  int intValue;
  sval_u *node;
  unsigned int sourcePosValue;
  const char *codePosValue;
  const char *debugString;
  scr_block_s *block;
};

/* 7495 */
struct scr_localVar_t
{
  unsigned int name;
};

/* 7496 */
struct scr_block_s
{
  int abortLevel;
  int localVarsCreateCount;
  int localVarsPublicCount;
  int localVarsCount;
  char localVarsInitBits[8];
  scr_localVar_t localVars[64];
};

/* 7497 */
struct stype_t
{
  sval_u val;
  unsigned int pos;
};

/* 7498 */
#pragma pack(push, 4)
struct scrCompilePub_t
{
  int value_count;
  int far_function_count;
  unsigned int loadedscripts;
  unsigned int scripts;
  unsigned int builtinFunc;
  unsigned int builtinMeth;
  unsigned __int16 canonicalStrings[65536];
  const char *in_ptr;
  const char *parseBuf;
  bool script_loading;
  bool allowedBreakpoint;
  int developer_statement;
  char *opcodePos;
  unsigned int programLen;
  int func_table_size;
  int func_table[1024];
};
#pragma pack(pop)

/* 7499 */
struct VariableStackBuffer
{
  const char *pos;
  unsigned __int16 size;
  unsigned __int16 bufLen;
  unsigned __int16 localId;
  char time;
  char buf[1];
};

/* 7500 */
union VariableUnion
{
  int intValue;
  float floatValue;
  unsigned int stringValue;
  const float *vectorValue;
  const char *codePosValue;
  unsigned int pointerValue;
  VariableStackBuffer *stackValue;
  unsigned int entityOffset;
};

/* 7501 */
struct VariableValue
{
  VariableUnion u;
  int type;
};

/* 7502 */
struct function_stack_t
{
  const char *pos;
  unsigned int localId;
  unsigned int localVarCount;
  VariableValue *top;
  VariableValue *startTop;
};

/* 7503 */
struct scr_entref_t
{
  unsigned __int16 entnum;
  unsigned __int16 classnum;
};

/* 7504 */
#pragma pack(push, 4)
struct scrAnimPub_t
{
  unsigned int animtrees;
  unsigned int animtree_node;
  unsigned int animTreeNames;
  scr_animtree_t xanim_lookup[2][128];
  unsigned int xanim_num[2];
  unsigned int animTreeIndex;
  bool animtree_loading;
};
#pragma pack(pop)

/* 7505 */
struct function_frame_t
{
  function_stack_t fs;
  int topType;
};

/* 7506 */
#pragma pack(push, 2)
struct scrVmPub_t
{
  unsigned int *localVars;
  VariableValue *maxstack;
  int function_count;
  function_frame_t *function_frame;
  VariableValue *top;
  bool debugCode;
  bool abort_on_error;
  bool terminal_error;
  unsigned int inparamcount;
  unsigned int outparamcount;
  function_frame_t function_frame_start[32];
  VariableValue stack[2048];
};
#pragma pack(pop)

/* 7507 */
struct scrVmDebugPub_t
{
  int dummy;
};

/* 7508 */
struct scrVmGlob_t
{
  VariableValue eval_stack[2];
  const char *dialog_error_message;
  int loading;
  int starttime;
  unsigned int localVarsStack[2048];
};

/* 7509 */
#pragma pack(push, 4)
struct scrVarPub_t
{
  const char *fieldBuffer;
  unsigned __int16 canonicalStrCount;
  bool developer;
  bool developer_script;
  bool evaluate;
  const char *error_message;
  int error_index;
  unsigned int time;
  unsigned int timeArrayId;
  unsigned int pauseArrayId;
  unsigned int levelId;
  unsigned int gameId;
  unsigned int animId;
  unsigned int freeEntList;
  unsigned int tempVariable;
  bool bInited;
  unsigned __int16 savecount;
  unsigned int checksum;
  unsigned int entId;
  unsigned int entFieldName;
  HunkUser *programHunkUser;
  const char *programBuffer;
  const char *endScriptBuffer;
  unsigned __int16 saveIdMap[24574];
  unsigned __int16 saveIdMapRev[24574];
};
#pragma pack(pop)

/* 7510 */
union $7DCFA8813A4E4157B39AB4B5F6935CC0
{
  unsigned __int16 prev;
  unsigned __int16 prevSibling;
};

/* 7511 */
struct Variable
{
  unsigned __int16 id;
  $7DCFA8813A4E4157B39AB4B5F6935CC0 u;
};

/* 7512 */
union $4DDD577F5C85114F40967F144B35CFEC
{
  unsigned __int16 size;
  unsigned __int16 entnum;
  unsigned __int16 nextEntId;
  unsigned __int16 self;
};

/* 7513 */
struct ObjectInfo
{
  unsigned __int16 refCount;
  $4DDD577F5C85114F40967F144B35CFEC u;
};

/* 7514 */
union $44B49BCA716C0F3788605840C615FF8B
{
  unsigned __int16 next;
  VariableUnion u;
  ObjectInfo o;
};

/* 7515 */
union $BA3337E8C1FA6844A01B3D99D5B36902
{
  unsigned int status;
  unsigned int type;
  unsigned int name;
  unsigned int classnum;
  unsigned int notifyName;
  unsigned int waitTime;
  unsigned int parentLocalId;
};

/* 7516 */
union $F94532F26506C1C8C67A52942FD4E048
{
  unsigned __int16 next;
  unsigned __int16 index;
};

/* 7517 */
struct VariableValueInternal
{
  Variable hash;
  $44B49BCA716C0F3788605840C615FF8B u;
  $BA3337E8C1FA6844A01B3D99D5B36902 w;
  $F94532F26506C1C8C67A52942FD4E048 v;
  unsigned __int16 nextSibling;
};

/* 7518 */
struct ThreadDebugInfo
{
  const char *pos[32];
  int posSize;
  float varUsage;
  float endonUsage;
};

/* 7519 */
#pragma pack(push, 4)
struct scr_classStruct_t
{
  unsigned __int16 id;
  unsigned __int16 entArrayId;
  char charId;
  const char *name;
};
#pragma pack(pop)

/* 7520 */
struct __declspec(align(64)) scrVarGlob_t
{
  VariableValueInternal variableList[90110];
};

/* 7521 */
struct scrVarDebugPub_t
{
  bool dummy;
};

/* 7522 */
#pragma pack(push, 4)
struct RefString
{
  volatile int data;
  char str[1];
};
#pragma pack(pop)

/* 7523 */
union $FA152364550AB5CDF6142CD3B51D5E84
{
  unsigned int prev;
  unsigned int str;
};

/* 7524 */
struct HashEntry
{
  unsigned int status_next;
  $FA152364550AB5CDF6142CD3B51D5E84 u;
};

/* 7525 */
struct __declspec(align(128)) scrStringGlob_t
{
  HashEntry hashTable[20000];
  bool inited;
  __declspec(align(4)) HashEntry *nextFreeEntry;
};

/* 7526 */
struct scrMemTreePub_t
{
  char *mt_buffer;
};

/* 7527 */
struct OpcodeLookup
{
  const char *codePos;
  unsigned int sourcePosIndex;
  unsigned int sourcePosCount;
  int profileTime;
  int profileBuiltInTime;
  int profileUsage;
};

/* 7528 */
#pragma pack(push, 4)
struct SourceBufferInfo
{
  const char *codePos;
  char *buf;
  const char *sourceBuf;
  int len;
  int sortedIndex;
  bool archive;
};
#pragma pack(pop)

/* 7529 */
struct Scr_SourcePos_t
{
  unsigned int bufferIndex;
  int lineNum;
  unsigned int sourcePos;
};

/* 7530 */
struct SourceLookup
{
  unsigned int sourcePos;
  int type;
};

/* 7531 */
struct SaveSourceBufferInfo
{
  char *sourceBuf;
  int len;
};

/* 7532 */
struct scrParserGlob_t
{
  OpcodeLookup *opcodeLookup;
  unsigned int opcodeLookupMaxLen;
  unsigned int opcodeLookupLen;
  SourceLookup *sourcePosLookup;
  unsigned int sourcePosLookupMaxLen;
  unsigned int sourcePosLookupLen;
  unsigned int sourceBufferLookupMaxLen;
  const char *currentCodePos;
  unsigned int currentSourcePosCount;
  SaveSourceBufferInfo *saveSourceBufferLookup;
  unsigned int saveSourceBufferLookupLen;
  int delayedSourceIndex;
  int threadStartSourceIndex;
};

/* 7533 */
struct scrParserPub_t
{
  SourceBufferInfo *sourceBufferLookup;
  unsigned int sourceBufferLookupLen;
  const char *scriptfilename;
  const char *sourceBuf;
};

/* 7534 */
struct MemoryNode
{
  unsigned __int16 prev;
  unsigned __int16 next;
  unsigned int padding;
};

/* 7535 */
struct __declspec(align(128)) scrMemTreeGlob_t
{
  MemoryNode nodes[65536];
  char leftBits[256];
  char numBits[256];
  char logBits[256];
  unsigned __int16 head[17];
  __declspec(align(4)) int totalAlloc;
  int totalAllocBuckets;
};

/* 7536 */
#pragma pack(push, 2)
struct PrecacheEntry
{
  unsigned __int16 filename;
  bool include;
  unsigned int sourcePos;
};
#pragma pack(pop)

/* 7537 */
struct VariableCompileValue
{
  VariableValue value;
  sval_u sourcePos;
};

/* 7538 */
struct ContinueStatementInfo
{
  const char *codePos;
  const char *nextCodePos;
  ContinueStatementInfo *next;
};

/* 7539 */
struct BreakStatementInfo
{
  const char *codePos;
  const char *nextCodePos;
  BreakStatementInfo *next;
};

/* 7540 */
struct CaseStatementInfo
{
  unsigned int name;
  const char *codePos;
  unsigned int sourcePos;
  CaseStatementInfo *next;
};

/* 7541 */
#pragma pack(push, 4)
struct scrCompileGlob_t
{
  char *codePos;
  char *prevOpcodePos;
  unsigned int fileId;
  unsigned int threadId;
  int cumulOffset;
  int maxOffset;
  int maxCallOffset;
  bool bConstRefCount;
  bool in_developer_thread;
  unsigned int developer_thread_sourcePos;
  bool firstThread[2];
  CaseStatementInfo *currentCaseStatement;
  bool bCanBreak;
  BreakStatementInfo *currentBreakStatement;
  bool bCanContinue;
  ContinueStatementInfo *currentContinueStatement;
  scr_block_s **breakChildBlocks;
  int *breakChildCount;
  scr_block_s *breakBlock;
  scr_block_s **continueChildBlocks;
  int *continueChildCount;
  bool forceNotCreate;
  PrecacheEntry *precachescriptList;
  VariableCompileValue value_start[32];
};
#pragma pack(pop)

/* 7542 */
struct scrAnimGlob_t
{
  const char *start;
  const char *pos;
  unsigned __int16 using_xanim_lookup[2][128];
  int bAnimCheck;
};

/* 7543 */
struct tagTHREADNAME_INFO
{
  unsigned int type;
  const char *name;
  unsigned int threadId;
  unsigned int flags;
};

/* 7544 */
struct NetFieldList
{
  NetField *array;
  unsigned int count;
};

/* 7545 */
struct statmonitor_s
{
  int endtime;
  Material *material;
};

/* 7546 */
struct loopmsg_t
{
  char data[1264];
  int datalen;
  int port;
};

/* 7547 */
struct loopback_t
{
  loopmsg_t msgs[64];
  volatile int get;
  volatile int send;
};

/* 7548 */
struct DeferredMsg
{
  netadr_t addr;
  char data[1264];
  int datalen;
};

/* 7549 */
struct DeferredQueue
{
  DeferredMsg msgs[16];
  volatile int get;
  volatile int send;
};

/* 7550 */
struct nodetype
{
  nodetype *left;
  nodetype *right;
  nodetype *parent;
  int weight;
  int symbol;
};

/* 7551 */
struct huff_t
{
  int blocNode;
  int blocPtrs;
  nodetype *tree;
  nodetype *loc[257];
  nodetype **freelist;
  nodetype nodeList[768];
  nodetype *nodePtrs[768];
};

/* 7552 */
struct huffman_t
{
  huff_t compressDecompress;
};

/* 7553 */
struct GraphFloat
{
  char name[64];
  float knots[32][2];
  int knotCount;
  float scale;
};

/* 7554 */
struct GamePadCheat
{
  GamePadButton codeButtons[10];
  GamePadButton holdButtons[2];
  void (__cdecl *unlockFunc)();
  const char *unlockCmd;
  const char *menu;
  const char *sound;
  int buttonTimer;
  int codeIndex;
};

/* 7555 */
struct field_t
{
  int cursor;
  int scroll;
  int drawWidth;
  int widthInPixels;
  float charHeight;
  int fixedSize;
  char buffer[256];
};

/* 7556 */
struct CmdArgsPrivate
{
  char textPool[8192];
  const char *argvPool[512];
  int usedTextPool[8];
  int totalUsedArgvPool;
  int totalUsedTextPool;
};

/* 7557 */
struct CmdText
{
  char *data;
  int maxsize;
  int cmdsize;
};

/* 7558 */
struct areaParms_t
{
  const float *mins;
  const float *maxs;
  int *list;
  int count;
  int maxcount;
  int contentmask;
};

/* 7559 */
struct locTraceWork_t
{
  int contents;
  TraceExtents extents;
};

/* 7560 */
struct staticmodeltrace_t
{
  TraceExtents extents;
  int contents;
};

/* 7561 */
struct worldContents_s
{
  int contentsStaticModels;
  int contentsEntities;
  int linkcontentsEntities;
  unsigned __int16 entities;
  unsigned __int16 staticModels;
};

/* 7562 */
union $222A11CE4B6EBFDB75E74DF742F9BFF1
{
  unsigned __int16 parent;
  unsigned __int16 nextFree;
};

/* 7563 */
struct worldTree_s
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 7564 */
struct worldSector_s
{
  worldContents_s contents;
  worldTree_s tree;
};

/* 7565 */
struct cm_world_t
{
  float mins[3];
  float maxs[3];
  unsigned __int16 freeHead;
  __declspec(align(4)) worldSector_s sectors[1024];
};

/* 7566 */
#pragma pack(push, 4)
struct traceWork_t
{
  TraceExtents extents;
  float delta[3];
  float deltaLen;
  float deltaLenSq;
  float midpoint[3];
  float halfDelta[3];
  float halfDeltaAbs[3];
  float size[3];
  float bounds[2][3];
  int contents;
  bool isPoint;
  bool axialCullOnly;
  float radius;
  float offsetZ;
  float radiusOffset[3];
  float boundingRadius;
  TraceThreadInfo threadInfo;
};
#pragma pack(pop)

/* 7567 */
struct EdgeInfo
{
  float v_v[3];
  float discNormalDist;
  float discriminant;
  float discEdgeAxis[3];
  float midpoint[3];
  float start_v[3];
  float discNormalAxis[3];
};

/* 7568 */
struct scr_const_t
{
  unsigned __int16 _;
  unsigned __int16 active;
  unsigned __int16 aim_bone;
  unsigned __int16 aim_highest_bone;
  unsigned __int16 aim_vis_bone;
  unsigned __int16 all;
  unsigned __int16 allies;
  unsigned __int16 axis;
  unsigned __int16 bad_path;
  unsigned __int16 begin_firing;
  unsigned __int16 cancel_location;
  unsigned __int16 confirm_location;
  unsigned __int16 crouch;
  unsigned __int16 current;
  unsigned __int16 damage;
  unsigned __int16 dead;
  unsigned __int16 death;
  unsigned __int16 detonate;
  unsigned __int16 direct;
  unsigned __int16 dlight;
  unsigned __int16 done;
  unsigned __int16 empty;
  unsigned __int16 end_firing;
  unsigned __int16 entity;
  unsigned __int16 explode;
  unsigned __int16 failed;
  unsigned __int16 free;
  unsigned __int16 fraction;
  unsigned __int16 goal;
  unsigned __int16 goal_changed;
  unsigned __int16 goal_yaw;
  unsigned __int16 grenade;
  unsigned __int16 grenadedanger;
  unsigned __int16 grenade_fire;
  unsigned __int16 grenade_pullback;
  unsigned __int16 info_notnull;
  unsigned __int16 invisible;
  unsigned __int16 key1;
  unsigned __int16 key2;
  unsigned __int16 killanimscript;
  unsigned __int16 left;
  unsigned __int16 light;
  unsigned __int16 movedone;
  unsigned __int16 noclass;
  unsigned __int16 none;
  unsigned __int16 normal;
  unsigned __int16 player;
  unsigned __int16 position;
  unsigned __int16 projectile_impact;
  unsigned __int16 prone;
  unsigned __int16 right;
  unsigned __int16 reload;
  unsigned __int16 reload_start;
  unsigned __int16 rocket;
  unsigned __int16 rotatedone;
  unsigned __int16 script_brushmodel;
  unsigned __int16 script_model;
  unsigned __int16 script_origin;
  unsigned __int16 snd_enveffectsprio_level;
  unsigned __int16 snd_enveffectsprio_shellshock;
  unsigned __int16 snd_channelvolprio_holdbreath;
  unsigned __int16 snd_channelvolprio_pain;
  unsigned __int16 snd_channelvolprio_shellshock;
  unsigned __int16 stand;
  unsigned __int16 suppression;
  unsigned __int16 suppression_end;
  unsigned __int16 surfacetype;
  unsigned __int16 tag_aim;
  unsigned __int16 tag_aim_animated;
  unsigned __int16 tag_brass;
  unsigned __int16 tag_butt;
  unsigned __int16 tag_clip;
  unsigned __int16 tag_flash;
  unsigned __int16 tag_flash_11;
  unsigned __int16 tag_flash_2;
  unsigned __int16 tag_flash_22;
  unsigned __int16 tag_flash_3;
  unsigned __int16 tag_fx;
  unsigned __int16 tag_inhand;
  unsigned __int16 tag_knife_attach;
  unsigned __int16 tag_knife_fx;
  unsigned __int16 tag_laser;
  unsigned __int16 tag_origin;
  unsigned __int16 tag_weapon;
  unsigned __int16 tag_player;
  unsigned __int16 tag_camera;
  unsigned __int16 tag_weapon_right;
  unsigned __int16 tag_gasmask;
  unsigned __int16 tag_gasmask2;
  unsigned __int16 tag_sync;
  unsigned __int16 target_script_trigger;
  unsigned __int16 tempEntity;
  unsigned __int16 top;
  unsigned __int16 touch;
  unsigned __int16 trigger;
  unsigned __int16 trigger_use;
  unsigned __int16 trigger_use_touch;
  unsigned __int16 trigger_damage;
  unsigned __int16 trigger_lookat;
  unsigned __int16 truck_cam;
  unsigned __int16 weapon_change;
  unsigned __int16 weapon_fired;
  unsigned __int16 worldspawn;
  unsigned __int16 flashbang;
  unsigned __int16 flash;
  unsigned __int16 smoke;
  unsigned __int16 night_vision_on;
  unsigned __int16 night_vision_off;
  unsigned __int16 mod_unknown;
  unsigned __int16 mod_pistol_bullet;
  unsigned __int16 mod_rifle_bullet;
  unsigned __int16 mod_grenade;
  unsigned __int16 mod_grenade_splash;
  unsigned __int16 mod_projectile;
  unsigned __int16 mod_projectile_splash;
  unsigned __int16 mod_melee;
  unsigned __int16 mod_head_shot;
  unsigned __int16 mod_crush;
  unsigned __int16 mod_telefrag;
  unsigned __int16 mod_falling;
  unsigned __int16 mod_suicide;
  unsigned __int16 mod_trigger_hurt;
  unsigned __int16 mod_explosive;
  unsigned __int16 mod_impact;
  unsigned __int16 script_vehicle;
  unsigned __int16 script_vehicle_collision;
  unsigned __int16 script_vehicle_collmap;
  unsigned __int16 script_vehicle_corpse;
  unsigned __int16 turret_fire;
  unsigned __int16 turret_on_target;
  unsigned __int16 turret_not_on_target;
  unsigned __int16 turret_on_vistarget;
  unsigned __int16 turret_no_vis;
  unsigned __int16 turret_rotate_stopped;
  unsigned __int16 turret_deactivate;
  unsigned __int16 turretstatechange;
  unsigned __int16 turretownerchange;
  unsigned __int16 reached_end_node;
  unsigned __int16 reached_wait_node;
  unsigned __int16 reached_wait_speed;
  unsigned __int16 near_goal;
  unsigned __int16 veh_collision;
  unsigned __int16 veh_predictedcollision;
  unsigned __int16 auto_change;
  unsigned __int16 back_low;
  unsigned __int16 back_mid;
  unsigned __int16 back_up;
  unsigned __int16 begin;
  unsigned __int16 call_vote;
  unsigned __int16 freelook;
  unsigned __int16 head;
  unsigned __int16 intermission;
  unsigned __int16 j_head;
  unsigned __int16 manual_change;
  unsigned __int16 menuresponse;
  unsigned __int16 neck;
  unsigned __int16 pelvis;
  unsigned __int16 pistol;
  unsigned __int16 plane_waypoint;
  unsigned __int16 playing;
  unsigned __int16 spectator;
  unsigned __int16 vote;
  unsigned __int16 sprint_begin;
  unsigned __int16 sprint_end;
  unsigned __int16 tag_driver;
  unsigned __int16 tag_passenger;
  unsigned __int16 tag_gunner;
  unsigned __int16 tag_wheel_front_left;
  unsigned __int16 tag_wheel_front_right;
  unsigned __int16 tag_wheel_back_left;
  unsigned __int16 tag_wheel_back_right;
  unsigned __int16 tag_wheel_middle_left;
  unsigned __int16 tag_wheel_middle_right;
  unsigned __int16 tag_detach;
  unsigned __int16 tag_popout;
  unsigned __int16 tag_body;
  unsigned __int16 tag_turret;
  unsigned __int16 tag_turret_base;
  unsigned __int16 tag_barrel;
  unsigned __int16 tag_engine_left;
  unsigned __int16 tag_engine_right;
  unsigned __int16 front_left;
  unsigned __int16 front_right;
  unsigned __int16 back_left;
  unsigned __int16 back_right;
  unsigned __int16 tag_gunner_pov;
};

/* 7569 */
struct useList_t
{
  gentity_s *ent;
  float score;
};

/* 7570 */
#pragma pack(push, 4)
struct SpawnVar
{
  bool spawnVarsValid;
  int numSpawnVars;
  char *spawnVars[64][2];
  int numSpawnVarChars;
  char spawnVarChars[2048];
};
#pragma pack(pop)

/* 7571 */
struct trigger_info_t
{
  unsigned __int16 entnum;
  unsigned __int16 otherEntnum;
  int useCount;
  int otherUseCount;
};

/* 7572 */
#pragma pack(push, 4)
struct cached_tag_mat_t
{
  int time;
  int entnum;
  unsigned __int16 name;
  float tagMat[4][3];
};
#pragma pack(pop)

/* 7573 */
struct level_locals_t
{
  gclient_s *clients;
  gentity_s *gentities;
  int gentitySize;
  int num_entities;
  gentity_s *firstFreeEnt;
  gentity_s *lastFreeEnt;
  void *logFile;
  int initializing;
  int clientIsSpawning;
  objective_t objectives[16];
  int maxclients;
  int framenum;
  int time;
  int previousTime;
  int frametime;
  int startTime;
  int teamScores[4];
  int lastTeammateHealthTime;
  int bUpdateScoresForIntermission;
  bool teamHasRadar[4];
  int manualNameChange;
  int numConnectedClients;
  int sortedClients[24];
  char voteString[1024];
  char voteDisplayString[1024];
  int voteTime;
  int voteExecuteTime;
  int voteYes;
  int voteNo;
  int numVotingClients;
  SpawnVar spawnVar;
  int savepersist;
  gentity_s *droppedWeaponCue[32];
  float fFogOpaqueDist;
  float fFogOpaqueDistSqrd;
  int remapCount;
  int currentPlayerClone;
  trigger_info_t pendingTriggerList[256];
  trigger_info_t currentTriggerList[256];
  int pendingTriggerListSize;
  int currentTriggerListSize;
  int finished;
  int bPlayerIgnoreRadiusDamage;
  int bPlayerIgnoreRadiusDamageLatched;
  int registerWeapons;
  int bRegisterItems;
  int currentEntityThink;
  void *openScriptIOFileHandles[1];
  char *openScriptIOFileBuffers[1];
  com_parse_mark_t currentScriptIOLineMark[1];
  cached_tag_mat_t cachedTagMat;
  int scriptPrintChannel;
  float compassMapUpperLeft[2];
  float compassMapWorldSize[2];
  float compassNorth[2];
  scr_vehicle_s *vehicles;
};

/* 7574 */
struct entityHandler_t
{
  void (__cdecl *think)(gentity_s *);
  void (__cdecl *reached)(gentity_s *);
  void (__cdecl *blocked)(gentity_s *, gentity_s *);
  void (__cdecl *touch)(gentity_s *, gentity_s *, int);
  void (__cdecl *use)(gentity_s *, gentity_s *, gentity_s *);
  void (__cdecl *pain)(gentity_s *, gentity_s *, int, const float *, const int, const float *, hitLocation_t, const int);
  void (__cdecl *die)(gentity_s *, gentity_s *, gentity_s *, int, int, const int, const float *, hitLocation_t, int);
  void (__cdecl *controller)(gentity_s *, int *);
  int methodOfDeath;
  int splashMethodOfDeath;
};

/* 7575 */
struct AntilagClientStore
{
  float realClientPositions[24][3];
  bool clientMoved[24];
};

/* 7576 */
struct weaponParms
{
  float forward[3]; //0x04, 0x08, 0x0C
  float right[3]; //0x10, 0x14, 0x18
  float up[3]; //0x1C, 0x20, 0x24
  float muzzleTrace[3];
  float gunForward[3];
  WeaponDef *weapDef;
};

/* 7577 */
#pragma pack(push, 4)
struct vehicle_info_t
{
  char name[64];
  __int16 type;
  int steerWheels;
  int texScroll;
  int quadBarrel;
  int bulletDamage;
  int armorPiercingDamage;
  int grenadeDamage;
  int projectileDamage;
  int projectileSplashDamage;
  int heavyExplosiveDamage;
  float texScrollScale;
  float maxSpeed;
  float accel;
  float rotRate;
  float rotAccel;
  float maxBodyPitch;
  float maxBodyRoll;
  float collisionDamage;
  float collisionSpeed;
  float suspensionTravel;
  char turretWeapon[64];
  float turretHorizSpanLeft;
  float turretHorizSpanRight;
  float turretVertSpanUp;
  float turretVertSpanDown;
  float turretRotRate;
  char sndNames[6][64];
  char sndIndices[6];
  float engineSndSpeed;
};
#pragma pack(pop)

/* 7578 */
struct VehicleLocalPhysics
{
  trace_t groundTrace;
  int hasGround;
  int onGround;
};

/* 7579 */
struct VehiclePhysicsBackup
{
  vehicle_pathpos_t pathPos;
  vehicle_physic_t phys;
};

/* 7580 */
struct gameTypeScript_t
{
  char pszScript[64];
  char pszName[64];
  int bTeamBased;
};

/* 7581 */
struct $C6505C7666C046994997CB2F9B954C0B
{
  int main;
  int startupgametype;
  int playerconnect;
  int playerdisconnect;
  int playerdamage;
  int playerkilled;
  int votecalled;
  int playervote;
  int playerlaststand;
  int iNumGameTypes;
  gameTypeScript_t list[32];
};

/* 7582 */
#pragma pack(push, 4)
struct corpseInfo_t
{
  XAnimTree_s *tree;
  int entnum;
  int time;
  clientInfo_t ci;
  bool falling;
};
#pragma pack(pop)

/* 7583 */
struct scr_data_t
{
  int levelscript;
  int gametypescript;
  $C6505C7666C046994997CB2F9B954C0B gametype;
  int delete_;
  int initstructs;
  int createstruct;
  corpseInfo_t playerCorpseInfo[8];
};

/* 7584 */
struct ipFilter_s
{
  unsigned int mask;
  unsigned int compare;
};

/* 7585 */
struct SpawnFuncEntry
{
  const char *classname;
  void (__cdecl *callback)(gentity_s *);
};

/* 7586 */
struct game_hudelem_s
{
  hudelem_s elem;
  int clientNum;
  int team;
  int archived;
};

/* 7587 */
struct ent_field_t
{
  const char *name;
  int ofs;
  fieldtype_t type;
  void (__cdecl *callback)(gentity_s *, int);
};

/* 7588 */
struct BuiltinMethodDef
{
  const char *actionString;
  void (__cdecl *actionFunc)(scr_entref_t);
  int type;
};

/* 7589 */
struct BuiltinFunctionDef
{
  const char *actionString;
  void (__cdecl *actionFunc)();
  int type;
};

/* 7590 */
struct pushed_t
{
  gentity_s *ent;
  float origin[3];
  float angles[3];
  float surfaceNormal[3];
  float deltayaw;
};

/* 7591 */
#pragma pack(push, 4)
struct AttractorRepulsor_t
{
  bool inUse;
  bool isAttractor;
  int entnum;
  float origin[3];
  float strength;
  float maxDist;
};
#pragma pack(pop)

/* 7592 */
struct $DA8C2681444807D13EF0164BEA00D30E
{
  AttractorRepulsor_t attractors[32];
};

/* 7593 */
struct game_hudelem_field_t
{
  const char *name;
  int ofs;
  fieldtype_t type;
  int mask;
  int shift;
  void (__cdecl *setter)(game_hudelem_s *, int);
  void (__cdecl *getter)(game_hudelem_s *, int);
};

/* 7594 */
struct client_fields_s
{
  const char *name;
  int ofs;
  fieldtype_t type;
  void (__cdecl *setter)(gclient_s *, client_fields_s *);
  void (__cdecl *getter)(gclient_s *, client_fields_s *);
};

/* 7595 */
#pragma pack(push, 4)
struct pmove_t
{
  playerState_s *ps;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int tracemask;
  int numtouch;
  int touchents[32];
  float mins[3];
  float maxs[3];
  float xyspeed;
  int proneChange;
  float maxSprintTimeMultiplier;
  bool mantleStarted;
  float mantleEndPos[3];
  int mantleDuration;
  int viewChangeTime;
  float viewChange;
  char handler;
};
#pragma pack(pop)

/* 7596 */
struct weaponState_t
{
  playerState_s *ps;
  float xyspeed;
  float frametime;
  float vLastMoveAng[3];
  float fLastIdleFactor;
  int time;
  int damageTime;
  float v_dmg_pitch;
  float v_dmg_roll;
  float vGunOffset[3];
  float vGunSpeed[3];
  float swayAngles[3];
  int *weapIdleTime;
};

/* 7597 */
struct viewState_t
{
  playerState_s *ps;
  int damageTime;
  int time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float xyspeed;
  float frametime;
  float fLastIdleFactor;
  int *weapIdleTime;
};

/* 7598 */
struct BulletFireParams
{
  int weaponEntIndex;
  int ignoreEntIndex;
  float damageMultiplier;
  int methodOfDeath;
  float origStart[3];
  float start[3];
  float end[3];
  float dir[3];
};

/* 7599 */
#pragma pack(push, 4)
struct BulletTraceResults
{
  trace_t trace;
  gentity_s *hitEnt;
  float hitPos[3];
  bool ignoreHitEnt;
};
#pragma pack(pop)

/* 7600 */
struct FxCurve
{
  int dimensionCount;
  int keyCount;
  float keys[1];
};

/* 7601 */
struct FxCurveIterator
{
  FxCurve *master;
  int currentKeyIndex;
};

/* 7602 */
struct FxCamera
{
  float origin[3];
  volatile int isValid;
  float frustum[6][4];
  float axis[3][3];
  unsigned int frustumPlaneCount;
  float viewOffset[3];
  unsigned int pad[3];
};

/* 7603 */
struct r_double_index_t
{
  unsigned __int16 value[2];
};

/* 7604 */
struct FxSpriteInfo
{
  r_double_index_t *indices;
  unsigned int indexCount;
  Material *material;
  const char *name;
};

/* 7605 */
union $CAB802B49D819BF84CE5061C1E209C1A
{
  float trailTexCoord;
  unsigned __int16 lightingHandle;
};

/* 7606 */
union $A58BA6DA60295001BBA5E9F807131CF1
{
  int physObjId;
  float origin[3];
};

/* 7607 */
struct FxElem
{
  char defIndex;
  char sequence;
  char atRestFraction;
  char emitResidual;
  unsigned __int16 nextElemHandleInEffect;
  unsigned __int16 prevElemHandleInEffect;
  int msecBegin;
  float baseVel[3];
  $A58BA6DA60295001BBA5E9F807131CF1 u;
  $CAB802B49D819BF84CE5061C1E209C1A u;
};

/* 7608 */
union $8CF69A2848BDE4D310F29703D1A2BE2C
{
  int nextFree;
  FxElem item;
};

/* 7609 */
struct FxPool<FxElem>
{
  $8CF69A2848BDE4D310F29703D1A2BE2C ___u0;
};

/* 7610 */
struct FxTrail
{
  unsigned __int16 nextTrailHandle;
  unsigned __int16 firstElemHandle;
  unsigned __int16 lastElemHandle;
  char defIndex;
  char sequence;
};

/* 7611 */
union $22EB02D0FF34EC8F13D039D8F78EFF62
{
  int nextFree;
  FxTrail item;
};

/* 7612 */
struct FxPool<FxTrail>
{
  $22EB02D0FF34EC8F13D039D8F78EFF62 ___u0;
};

/* 7613 */
struct FxTrailElem
{
  float origin[3];
  float spawnDist;
  int msecBegin;
  unsigned __int16 nextTrailElemHandle;
  __int16 baseVelZ;
  char basis[2][3];
  char sequence;
  char unused;
};

/* 7614 */
union $B3246C0274B4A82917A74F6D638FB1B2
{
  int nextFree;
  FxTrailElem item;
};

/* 7615 */
struct FxPool<FxTrailElem>
{
  $B3246C0274B4A82917A74F6D638FB1B2 ___u0;
};

/* 7616 */
struct FxVisBlocker
{
  float origin[3];
  unsigned __int16 radius;
  unsigned __int16 visibility;
};

/* 7617 */
struct FxVisState
{
  FxVisBlocker blocker[256];
  volatile int blockerCount;
  unsigned int pad[3];
};

/* 7618 */
#pragma pack(push, 4)
struct FxSystem
{
  FxCamera camera;
  FxCamera cameraPrev;
  FxSpriteInfo sprite;
  FxEffect *effects;
  FxPool<FxElem> *elems;
  FxPool<FxTrail> *trails;
  FxPool<FxTrailElem> *trailElems;
  unsigned __int16 *deferredElems;
  volatile int firstFreeElem;
  volatile int firstFreeTrailElem;
  volatile int firstFreeTrail;
  volatile int deferredElemCount;
  volatile int activeElemCount;
  volatile int activeTrailElemCount;
  volatile int activeTrailCount;
  volatile int gfxCloudCount;
  FxVisState *visState;
  FxVisState *visStateBufferRead;
  FxVisState *visStateBufferWrite;
  volatile int firstActiveEffect;
  volatile int firstNewEffect;
  volatile int firstFreeEffect;
  unsigned __int16 allEffectHandles[1024];
  volatile int activeSpotLightEffectCount;
  volatile int activeSpotLightElemCount;
  unsigned __int16 activeSpotLightEffectHandle;
  unsigned __int16 activeSpotLightElemHandle;
  __int16 activeSpotLightBoltDobj;
  volatile int iteratorCount;
  int msecNow;
  volatile int msecDraw;
  int frameCount;
  bool isInitialized;
  bool needsGarbageCollection;
  bool isArchiving;
  char localClientNum;
  unsigned int restartList[32];
};
#pragma pack(pop)

/* 7619 */
struct FxSystemBuffers
{
  FxEffect effects[1024];
  FxPool<FxElem> elems[2048];
  FxPool<FxTrail> trails[128];
  FxPool<FxTrailElem> trailElems[2048];
  FxVisState visState[2];
  unsigned __int16 deferredElems[2048];
  char padBuffer[96];
};

/* 7620 */
#pragma pack(push, 8)
struct FxUpdateElem
{
  FxEffect *effect;
  FxElemDef *elemDef;
  int atRestFraction;
  orientation_t orient;
  int randomSeed;
  int sequence;
  float msecLifeSpan;
  double msecElemBegin;
  double msecElemEnd;
  double msecUpdateBegin;
  double msecUpdateEnd;
  float msecElapsed;
  float normTimeUpdateEnd;
  float *elemOrigin;
  float *elemBaseVel;
  float posWorld[3];
  bool onGround;
  int physObjId;
};
#pragma pack(pop)

/* 7621 */
struct FxCmd
{
  FxSystem *system;
  int localClientNum;
  volatile int *spawnLock;
};

/* 7622 */
struct FxMarkPoint
{
  float xyz[3];
  float lmapCoord[2];
  float normal[3];
};

/* 7623 */
struct FxPointGroup
{
  FxMarkPoint points[2];
  int next;
};

/* 7624 */
union FxPointGroupPool
{
  FxPointGroupPool *nextFreePointGroup;
  FxPointGroup pointGroup;
};

/* 7625 */
union FxTriGroupPool
{
  FxTriGroupPool *nextFreeTriGroup;
  FxTriGroup triGroup;
};

/* 7626 */
struct GfxMarkContext
{
  char lmapIndex;
  char primaryLightIndex;
  char reflectionProbeIndex;
  char modelTypeAndSurf;
  unsigned __int16 modelIndex;
};

/* 7627 */
struct FxTriGroup
{
  unsigned __int16 indices[2][3];
  GfxMarkContext context;
  char triCount;
  char unused[1];
  int next;
};

/* 7628 */
#pragma pack(push, 4)
struct FxMark
{
  unsigned __int16 prevMark;
  unsigned __int16 nextMark;
  int frameCountDrawn;
  float origin[3];
  float radius;
  float texCoordAxis[3];
  char nativeColor[4];
  Material *material;
  GfxMarkContext context;
  char triCount;
  unsigned __int16 pointCount;
  int tris;
  int points;
};
#pragma pack(pop)

/* 7629 */
struct FxMarksSystem
{
  int frameCount;
  unsigned __int16 firstFreeMarkHandle;
  unsigned __int16 firstActiveWorldMarkHandle;
  unsigned __int16 entFirstMarkHandles[1024];
  FxTriGroupPool *firstFreeTriGroup;
  FxPointGroupPool *firstFreePointGroup;
  FxMark marks[512];
  FxTriGroupPool triGroups[1024];
  FxPointGroupPool pointGroups[1536];
  bool noMarks;
  bool hasCarryIndex;
  unsigned __int16 carryIndex;
};

/* 7630 */
struct FxSprite
{
  Material *material;
  float pos[3];
  char rgbaColor[4];
  float radius;
  float minScreenRadius;
  int flags;
};

/* 7631 */
struct SpuDmaBuffer
{
  char dummy[1];
};

/* 7632 */
struct GfxSunShadowBoundingPoly
{
  float snapDelta[2];
  int pointCount;
  float points[5][2];
};

/* 7633 */
struct GfxMatrix
{
  float m[4][4];
};

/* 7634 */
struct GfxViewParms
{
  GfxMatrix viewMatrix;
  GfxMatrix projectionMatrix;
  GfxMatrix viewProjectionMatrix;
  GfxMatrix inverseViewProjectionMatrix;
  float origin[4];
  float axis[3][3];
  float depthHackNearClip;
  int pad[2];
};

/* 7635 */
struct GfxSceneDef
{
  int time;
  float floatTime;
  float viewOffset[3];
};

/* 7636 */
struct GfxViewport
{
  int x;
  int y;
  int width;
  int height;
};

/* 7637 */
struct GfxDrawSurfListInfo
{
  GfxDrawSurf *drawSurfs;
  unsigned int drawSurfCount;
  MaterialTechniqueType baseTechType;
  GfxViewInfo *viewInfo;
  float viewOrigin[4];
  GfxLight *light;
  int cameraView;
};

/* 7638 */
struct __declspec(align(16)) ShadowCookie
{
  GfxMatrix shadowLookupMatrix;
  float boxMin[3];
  float boxMax[3];
  GfxViewParms *shadowViewParms;
  float fade;
  unsigned int sceneEntIndex;
  GfxDrawSurfListInfo casterInfo;
  GfxDrawSurfListInfo receiverInfo;
};

/* 7639 */
#pragma pack(push, 16)
struct ShadowCookieList
{
  ShadowCookie cookies[24];
  unsigned int cookieCount;
};
#pragma pack(pop)

/* 7640 */
struct PointLightPartition
{
  GfxLight light;
  GfxDrawSurfListInfo info;
};

/* 7641 */
struct GfxVertexBufferState
{
  volatile int used;
  int total;
  D3DVertexBuffer buffer;
  char *verts;
};

/* 7642 */
struct GfxMeshData
{
  unsigned int indexCount;
  unsigned int totalIndexCount;
  D3DIndexBuffer ib;
  unsigned __int16 *indices;
  GfxVertexBufferState vb;
  unsigned int vertSize;
};

/* 7643 */
struct GfxSunShadowProjection
{
  unsigned __int16 scissorWidth;
  unsigned __int16 scissorHeight;
  float partitionFraction[4];
  float viewMatrix[4][4];
  float snappedViewOrgInClipSpace[2][2];
  float switchPartition[4];
  GfxSunShadowBoundingPoly boundingPoly;
};

/* 7644 */
#pragma pack(push, 8)
struct GfxSunShadowPartition
{
  GfxViewParms shadowViewParms;
  int partitionIndex;
  unsigned __int16 scissorWidth;
  unsigned __int16 scissorHeight;
  GfxDrawSurfListInfo info;
  char pad[12];
};
#pragma pack(pop)

/* 7645 */
struct GfxSunShadow
{
  GfxMatrix lookupMatrix;
  float farClip;
  float nearClip;
  GfxSunShadowProjection sunProj;
  GfxSunShadowPartition partition[2];
};

/* 7646 */
struct __declspec(align(16)) GfxSpotShadow
{
  GfxViewParms shadowViewParms;
  GfxMatrix lookupMatrix;
  char shadowableLightIndex;
  char pad[3];
  GfxLight *light;
  float fade;
  GfxDrawSurfListInfo info;
  char pad2[4];
};

/* 7647 */
struct GfxQuadMeshData
{
  float x;
  float y;
  float width;
  float height;
  GfxMeshData meshData;
};

/* 7648 */
struct FxCodeMeshData
{
  unsigned int triCount;
  unsigned __int16 *indices;
  unsigned __int16 argOffset;
  unsigned __int16 argCount;
  unsigned int pad;
};

/* 7649 */
struct GfxScaledPlacement
{
  GfxPlacement base;
  float scale;
};

/* 7650 */
struct GfxParticleCloud
{
  GfxScaledPlacement placement;
  float endpos[3];
  GfxColor color;
  float radius[2];
  unsigned int pad[2];
};

/* 7651 */
struct GfxBackEndPrimitiveData
{
  int hasSunDirChanged;
};

/* 7652 */
struct GfxEntity
{
  unsigned int renderFxFlags;
  float materialTime;
};

/* 7653 */
struct FxMarkMeshData
{
  unsigned int triCount;
  unsigned __int16 *indices;
  unsigned __int16 modelIndex;
  char modelTypeAndSurf;
  char pad0;
  unsigned int pad1;
};

/* 7654 */
struct GfxFog
{
  int startTime;
  int finishTime;
  GfxColor color;
  float fogStart;
  float density;
};

/* 7655 */
struct GfxCmdHeader
{
  unsigned __int16 id;
  unsigned __int16 byteCount;
};

/* 7656 */
struct GfxCmdArray
{
  char *cmds;
  int usedTotal;
  int usedCritical;
  GfxCmdHeader *lastCmd;
};

/* 7657 */
const struct GfxViewInfo
{
  GfxViewParms viewParms;
  GfxSceneDef sceneDef;
  GfxViewport sceneViewport;
  GfxViewport displayViewport;
  ShadowType dynamicShadowType;
  __declspec(align(16)) ShadowCookieList shadowCookieList;
  int localClientNum;
  int isRenderingFullScreen;
  GfxLight shadowableLights[255];
  unsigned int shadowableLightCount;
  PointLightPartition pointLightPartitions[4];
  GfxMeshData pointLightMeshData[4];
  int pointLightCount;
  unsigned int emissiveSpotLightIndex;
  GfxLight emissiveSpotLight;
  int emissiveSpotDrawSurfCount;
  GfxDrawSurf *emissiveSpotDrawSurfs;
  unsigned int emissiveSpotLightCount;
  float blurRadius;
  float frustumPlanes[4][4];
  GfxDepthOfField dof;
  GfxFilm film;
  GfxGlow glow;
  const void *cmds;
  __declspec(align(16)) GfxSunShadow sunShadow;
  unsigned int spotShadowCount;
  __declspec(align(16)) GfxSpotShadow spotShadows[4];
  GfxQuadMeshData *fullSceneViewMesh;
  GfxDrawSurfListInfo litInfo;
  GfxDrawSurfListInfo decalInfo;
  GfxDrawSurfListInfo emissiveInfo;
  __declspec(align(8)) GfxCmdBufInput input;
};

/* 7658 */
const struct __declspec(align(128)) GfxBackEndData
{
  char surfsBuffer[131072];
  FxCodeMeshData codeMeshes[2048];
  unsigned int primDrawSurfsBuf[65536];
  GfxViewParms viewParms[28];
  char primaryLightTechType[8][256];
  float codeMeshArgs[256][4];
  GfxParticleCloud clouds[256];
  GfxDrawSurf drawSurfs[32768];
  GfxMeshData codeMesh;
  GfxBackEndPrimitiveData prim;
  unsigned int shadowableLightHasShadowMap[8];
  unsigned int frameCount;
  int drawSurfCount;
  volatile int surfPos;
  volatile int gfxEntCount;
  GfxEntity gfxEnts[128];
  volatile int cloudCount;
  volatile int codeMeshCount;
  volatile int codeMeshArgsCount;
  volatile int markMeshCount;
  FxMarkMeshData markMeshes[768];
  GfxMeshData markMesh;
  GfxVertexBufferState *skinnedCacheVb;
  unsigned int endFence;
  volatile int norefresh;
  int viewParmCount;
  GfxFog fogSettings;
  GfxCmdArray *commands;
  unsigned int viewInfoIndex;
  unsigned int viewInfoCount;
  GfxViewInfo *viewInfo;
  const void *cmds;
  float sunSampleSizeNear;
  GfxLight sunLight;
  int hasApproxSunDirChanged;
  volatile int primDrawSurfPos;
  unsigned int drawType;
};

/* 7659 */
struct __declspec(align(8)) GfxCmdBufInput
{
  float consts[56][4];
  GfxImage *codeImages[27];
  char codeImageSamplerStates[27];
  __declspec(align(2)) GfxBackEndData *data;
};

/* 7660 */
#pragma pack(push, 4)
struct GfxMetrics
{
  unsigned __int16 cubemapShotRes;
  unsigned __int16 cubemapShotPixelBorder;
  unsigned __int16 feedbackWidth;
  unsigned __int16 feedbackHeight;
  bool hasAnisotropicMinFilter;
  bool hasAnisotropicMagFilter;
  int maxAnisotropy;
  int maxClipPlanes;
  MaterialTechniqueType shadowmapBuildTechType;
  char shadowmapSamplerState;
  bool slopeScaleDepthBias;
  bool canMipCubemaps;
};
#pragma pack(pop)

/* 7661 */
struct GfxRenderTargetSurface
{
  D3DSurface *color;
  D3DSurface *depthStencil;
};

/* 7662 */
struct GfxRenderTarget
{
  GfxImage *image;
  GfxRenderTargetSurface surface;
  unsigned int width;
  unsigned int height;
};

/* 7663 */
struct GfxCodeMatrices
{
  GfxMatrix matrix[32];
};

/* 7664 */
struct __declspec(align(16)) GfxCmdBufSourceState
{
  GfxCodeMatrices matrices;
  GfxCmdBufInput input;
  GfxViewParms viewParms;
  GfxMatrix shadowLookupMatrix;
  unsigned __int16 constVersions[88];
  unsigned __int16 matrixVersions[8];
  float eyeOffset[4];
  unsigned int shadowableLightForShadowLookupMatrix;
  GfxScaledPlacement *objectPlacement;
  GfxViewParms *viewParms3D;
  unsigned int depthHackFlags;
  GfxScaledPlacement skinnedPlacement;
  int cameraView;
  GfxViewMode viewMode;
  GfxSceneDef sceneDef;
  GfxViewport sceneViewport;
  float materialTime;
  GfxViewportBehavior viewportBehavior;
  int renderTargetWidth;
  int renderTargetHeight;
  bool viewportIsDirty;
  __declspec(align(4)) unsigned int shadowableLightIndex;
};

/* 7665 */
struct $7743707624638C762A9CB0675B8BCC50
{
  unsigned int stride;
  D3DVertexBuffer *vb;
  unsigned int offset;
};

/* 7666 */
struct GfxCmdBufPrimState
{
  D3DDevice *device;
  D3DIndexBuffer *indexBuffer;
  MaterialVertexDeclType vertDeclType;
  $7743707624638C762A9CB0675B8BCC50 streams[2];
  D3DVertexDeclaration *vertexDecl;
};

/* 7667 */
struct GfxVertex
{
  float xyzw[4];
  GfxColor color;
  float texCoord[2];
  PackedUnitVec normal;
};

/* 7668 */
#pragma pack(push, 4)
struct GfxCmdBufState
{
  char refSamplerState[26];
  char padding[6];
  unsigned int samplerState[26];
  GfxTexture *samplerTexture[26];
  GfxCmdBufPrimState prim;
  Material *material;
  MaterialTechniqueType techType;
  MaterialTechnique *technique;
  MaterialPass *pass;
  unsigned int passIndex;
  GfxDepthRangeType depthRangeType;
  float depthRangeNear;
  float depthRangeFar;
  unsigned __int64 vertexShaderConstState[32];
  unsigned __int64 pixelShaderConstState[256];
  char alphaRef;
  unsigned __int16 *indices;
  GfxVertex *verts;
  unsigned int refStateBits[2];
  unsigned int activeStateBits[2];
  MaterialPixelShader *pixelShader;
  MaterialVertexShader *vertexShader;
  GfxViewport viewport;
  GfxRenderTargetId renderTargetId;
};
#pragma pack(pop)

/* 7669 */
struct GfxCmdBufContext
{
  GfxCmdBufSourceState *source;
  GfxCmdBufState *state;
};

/* 7670 */
struct mnode_t
{
  unsigned __int16 cellIndex;
  unsigned __int16 rightChildOffset;
};

/* 7671 */
struct DxGlobals
{
  HINSTANCE__ *hinst;
  Direct3D *d3d9;
  D3DDevice *device;
  unsigned int adapterIndex;
  _D3DFORMAT depthStencilFormat;
  _D3DMULTISAMPLE_TYPE multiSampleType;
  unsigned int multiSampleQuality;
  D3DSurface *singleSampleDepthStencilSurface;
  D3DTexture *frontBufferTexture;
  _D3DTEXTUREFILTERTYPE linearNonMippedMinFilter;
  _D3DTEXTUREFILTERTYPE linearNonMippedMagFilter;
  _D3DTEXTUREFILTERTYPE linearMippedMinFilter;
  _D3DTEXTUREFILTERTYPE linearMippedMagFilter;
  _D3DTEXTUREFILTERTYPE anisotropicMinFilter;
  _D3DTEXTUREFILTERTYPE anisotropicMagFilter;
  int linearMippedAnisotropy;
  int anisotropyFor2x;
  int anisotropyFor4x;
  int mipFilterMode;
  unsigned int mipBias;
  _D3DRING_BUFFER_PARAMETERS ringBufferParameters;
  unsigned int swapFence;
  volatile int showDirtyDiscError;
};

/* 7672 */
#pragma pack(push, 4)
struct FxInsertSortElem
{
  int defSortOrder;
  float distToCamSq;
  int msecBegin;
  int defIndex;
  char elemType;
};
#pragma pack(pop)

/* 7673 */
struct FxProfileEntry
{
  FxEffectDef *effectDef;
  int effectCount;
  int activeElemCount;
  int pendingElemCount;
  int trailCount;
  int activeTrailElemCount;
  int pendingTrailElemCount;
};

/* 7674 */
struct FxPostLight
{
  float begin[3];
  float end[3];
  float radius;
  GfxColor color;
  Material *material;
};

/* 7675 */
struct FxPostLightInfo
{
  FxPostLight postLights[96];
  int postLightCount;
};

/* 7676 */
struct FxMarkTri
{
  unsigned __int16 indices[3];
  GfxMarkContext context;
};

/* 7677 */
#pragma pack(push, 4)
struct MarkInfoCollidedDObj
{
  DObj_s *dObj;
  cpose_t *pose;
  unsigned __int16 entnum;
};
#pragma pack(pop)

/* 7678 */
#pragma pack(push, 4)
struct MarkInfoCollidedBModel
{
  GfxBrushModel *brushModel;
  cpose_t *pose;
  unsigned __int16 entnum;
};
#pragma pack(pop)

/* 7679 */
#pragma pack(push, 4)
struct MarkInfo
{
  float origin[3];
  float localOrigin[3];
  float localTexCoordAxis[3];
  float axis[3][3];
  float radius;
  Material *material;
  int maxTris;
  FxMarkTri *tris;
  int maxPoints;
  FxMarkPoint *points;
  float mins[3];
  float maxs[3];
  float planes[6][4];
  float viewOffset[3];
  bool markHasLightmap;
  bool markHasReflection;
  MarkFragmentsAgainstEnum markAgainst;
  unsigned __int16 smodelsCollided[32];
  int smodelCollidedCount;
  MarkInfoCollidedDObj sceneDObjsCollided[32];
  int sceneDObjCollidedCount;
  MarkInfoCollidedBModel sceneBModelsCollided[32];
  int sceneBModelCollidedCount;
  int usedTriCount;
  int usedPointCount;
  void (__cdecl *callback)(void *, int, FxMarkTri *, int, FxMarkPoint *, const float *, const float *);
  void *callbackContext;
};
#pragma pack(pop)

/* 7680 */
#pragma pack(push, 2)
struct FxMarkDObjUpdateContext
{
  XModel *models[32];
  const char *modelParentBones[32];
  int modelCount;
  bool isBrush;
  unsigned __int16 brushIndex;
};
#pragma pack(pop)

/* 7681 */
#pragma pack(push, 4)
struct FxActiveMarkSurf
{
  Material *material;
  GfxMarkContext context;
  int indexCount;
  unsigned __int16 *indices;
};
#pragma pack(pop)

/* 7682 */
struct MarkGenContext
{
  int localClientNum;
  Material *material;
  float radius;
  const char *nativeColor;
};

/* 7683 */
struct FxElemPreVisualState
{
  float sampleLerp;
  float sampleLerpInv;
  FxElemDef *elemDef;
  FxEffect *effect;
  FxElemVisStateSample *refState;
  int randomSeed;
  unsigned int distanceFade;
};

/* 7684 */
struct std::pair<FxMarkTri *,FxMarkTri *>
{
  FxMarkTri *first;
  FxMarkTri *second;
};

/* 7685 */
struct $1226EF31FC871D9A38292A29A9E8A5AB
{
  FxEffectDef *defaultEffect;
};

/* 7686 */
union $67F8806314ED4E1309359B6E5E5D272E
{
  float constantValue;
  float *sampleValue;
};

/* 7687 */
struct FxGraph1D
{
  int intervalCount;
  $67F8806314ED4E1309359B6E5E5D272E u;
};

/* 7688 */
union $21CA7BA286B0FD00E25B443F3BDC0467
{
  float constantValue[3];
  float (*sampleValue)[3];
};

/* 7689 */
struct FxGraph3D
{
  int intervalCount;
  $21CA7BA286B0FD00E25B443F3BDC0467 u;
};

/* 7690 */
struct FxDrawState
{
  FxSystem *system;
  FxEffect *effect;
  FxElem *elem;
  FxElemDef *elemDef;
  orientation_t orient;
  FxCamera *camera;
  int randomSeed;
  float msecLifeSpan;
  float msecElapsed;
  float normTimeUpdateEnd;
  float posWorld[3];
  float velDirWorld[3];
  FxElemVisualState visState;
  FxElemPreVisualState preVisState;
  float physicsLerpFrac;
  int msecDraw;
};

/* 7691 */
struct FxTrailSegmentDrawState
{
  FxTrailDef *trailDef;
  float posWorld[3];
  float basis[2][3];
  float rotation;
  float size[2];
  float uCoord;
  char color[4];
};

/* 7692 */
struct FxBeam
{
  float begin[3];
  float end[3];
  GfxColor beginColor;
  GfxColor endColor;
  float beginRadius;
  float endRadius;
  Material *material;
  int segmentCount;
  float wiggleDist;
};

/* 7693 */
struct FxBeamInfo
{
  FxBeam beams[96];
  int beamCount;
};

/* 7694 */
struct FxGenerateVertsCmd
{
  FxSystem *system;
  FxBeamInfo *beamInfo;
  FxPostLightInfo *postLightInfo;
  FxSpriteInfo *spriteInfo;
  int localClientNum;
};

/* 7695 */
struct FxEffectDefTableEntry
{
  unsigned int key;
  FxEffectDef *effectDef;
};

/* 7696 */
struct FxEffectDefTable
{
  int count;
  FxEffectDefTableEntry entries[1024];
};

/* 7697 */
#pragma pack(push, 2)
struct BreakablePiece
{
  XModel *model;
  int physObjId;
  unsigned __int16 lightingHandle;
  bool active;
};
#pragma pack(pop)

/* 7698 */
struct DynEntityProps
{
  const char *name;
  bool clientOnly;
  bool clipMove;
  bool usePhysics;
  bool destroyable;
};

/* 7699 */
struct DynEntityCollTree
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 7700 */
#pragma pack(push, 4)
struct DynEntityCollSector
{
  DynEntityCollTree tree;
  int contents;
  unsigned __int16 entListHead;
};
#pragma pack(pop)

/* 7701 */
#pragma pack(push, 4)
struct DynEntityCollWorld
{
  float mins[3];
  float maxs[3];
  unsigned __int16 freeHead;
  DynEntityCollSector sectors[1024];
};
#pragma pack(pop)

/* 7702 */
struct DynEntityAreaParms
{
  const float *mins;
  const float *maxs;
  int contentMask;
  unsigned __int16 *list;
  unsigned __int16 maxCount;
  unsigned __int16 count;
};

/* 7703 */
#pragma pack(push, 4)
struct DynEntSortStruct
{
  float distSq;
  unsigned __int16 id;
};
#pragma pack(pop)

/* 7704 */
struct std::pair<DynEntSortStruct *,DynEntSortStruct *>
{
  DynEntSortStruct *first;
  DynEntSortStruct *second;
};

/* 7705 */
struct ScriptStringList
{
  int count;
  const char **strings;
};

/* 7706 */
struct XAsset
{
  XAssetType type;
  XAssetHeader header;
};

/* 7707 */
struct XAssetList
{
  ScriptStringList stringList;
  int assetCount;
  XAsset *assets;
};

/* 7708 */
struct XBlock
{
  char *data;
  unsigned int size;
};

/* 7709 */
struct StreamPosInfo
{
  char *pos;
  unsigned int index;
};

/* 7710 */
struct XAssetEntry
{
  XAsset asset;
  char zoneIndex;
  bool inuse;
  unsigned __int16 nextHash;
  unsigned __int16 nextOverride;
  unsigned __int16 usageFrame;
};

/* 7711 */
union XAssetSize
{
  XAnimParts parts;
  XModel model;
  Material material;
  MaterialPixelShader pixelShader;
  MaterialVertexShader vertexShader;
  MaterialTechniqueSet techniqueSet;
  GfxImage image;
  snd_alias_list_t sound;
  SndCurve sndCurve;
  clipMap_t clipMap;
  ComWorld comWorld;
  MapEnts mapEnts;
  GfxWorld gfxWorld;
  GfxLightDef lightDef;
  Font_s font;
  MenuList menuList;
  menuDef_t menu;
  LocalizeEntry localize;
  WeaponDef weapon;
  SndDriverGlobals sndDriverGlobals;
  FxEffectDef *fx;
  FxImpactTable impactFx;
  RawFile rawfile;
  StringTable stringTable;
};

/* 7712 */
#pragma pack(push, 4)
struct XZone
{
  unsigned __int16 index;
  int flags;
  int allocType;
  XBlock blocks[5];
};
#pragma pack(pop)

/* 7713 */
union XAssetPoolEntry<SndCurve>
{
  SndCurve entry;
  XAssetPoolEntry<SndCurve> *next;
};

/* 7714 */
struct XAssetPool<SndCurve,64>
{
  XAssetPoolEntry<SndCurve> *freeHead;
  XAssetPoolEntry<SndCurve> entries[64];
};

/* 7715 */
union XAssetPoolEntry<MapEnts>
{
  MapEnts entry;
  XAssetPoolEntry<MapEnts> *next;
};

/* 7716 */
struct XAssetPool<MapEnts,2>
{
  XAssetPoolEntry<MapEnts> *freeHead;
  XAssetPoolEntry<MapEnts> entries[2];
};

/* 7717 */
union XAssetPoolEntry<GfxLightDef>
{
  GfxLightDef entry;
  XAssetPoolEntry<GfxLightDef> *next;
};

/* 7718 */
struct XAssetPool<GfxLightDef,32>
{
  XAssetPoolEntry<GfxLightDef> *freeHead;
  XAssetPoolEntry<GfxLightDef> entries[32];
};

/* 7719 */
union XAssetPoolEntry<Font_s>
{
  Font_s entry;
  XAssetPoolEntry<Font_s> *next;
};

/* 7720 */
struct XAssetPool<Font_s,16>
{
  XAssetPoolEntry<Font_s> *freeHead;
  XAssetPoolEntry<Font_s> entries[16];
};

/* 7721 */
union XAssetPoolEntry<MenuList>
{
  MenuList entry;
  XAssetPoolEntry<MenuList> *next;
};

/* 7722 */
struct XAssetPool<MenuList,128>
{
  XAssetPoolEntry<MenuList> *freeHead;
  XAssetPoolEntry<MenuList> entries[128];
};

/* 7723 */
union XAssetPoolEntry<menuDef_t>
{
  menuDef_t entry;
  XAssetPoolEntry<menuDef_t> *next;
};

/* 7724 */
struct XAssetPool<menuDef_t,512>
{
  XAssetPoolEntry<menuDef_t> *freeHead;
  XAssetPoolEntry<menuDef_t> entries[512];
};

/* 7725 */
union XAssetPoolEntry<LocalizeEntry>
{
  LocalizeEntry entry;
  XAssetPoolEntry<LocalizeEntry> *next;
};

/* 7726 */
struct XAssetPool<LocalizeEntry,6144>
{
  XAssetPoolEntry<LocalizeEntry> *freeHead;
  XAssetPoolEntry<LocalizeEntry> entries[6144];
};

/* 7727 */
union XAssetPoolEntry<WeaponDef>
{
  WeaponDef entry;
  XAssetPoolEntry<WeaponDef> *next;
};

/* 7728 */
struct XAssetPool<WeaponDef,128>
{
  XAssetPoolEntry<WeaponDef> *freeHead;
  XAssetPoolEntry<WeaponDef> entries[128];
};

/* 7729 */
union XAssetPoolEntry<SndDriverGlobals>
{
  SndDriverGlobals entry;
  XAssetPoolEntry<SndDriverGlobals> *next;
};

/* 7730 */
struct XAssetPool<SndDriverGlobals,1>
{
  XAssetPoolEntry<SndDriverGlobals> *freeHead;
  XAssetPoolEntry<SndDriverGlobals> entries[1];
};

/* 7731 */
union XAssetPoolEntry<FxEffectDef>
{
  FxEffectDef entry;
  XAssetPoolEntry<FxEffectDef> *next;
};

/* 7732 */
struct XAssetPool<FxEffectDef,320>
{
  XAssetPoolEntry<FxEffectDef> *freeHead;
  XAssetPoolEntry<FxEffectDef> entries[320];
};

/* 7733 */
union XAssetPoolEntry<FxImpactTable>
{
  FxImpactTable entry;
  XAssetPoolEntry<FxImpactTable> *next;
};

/* 7734 */
struct XAssetPool<FxImpactTable,4>
{
  XAssetPoolEntry<FxImpactTable> *freeHead;
  XAssetPoolEntry<FxImpactTable> entries[4];
};

/* 7735 */
union XAssetPoolEntry<RawFile>
{
  RawFile entry;
  XAssetPoolEntry<RawFile> *next;
};

/* 7736 */
struct XAssetPool<RawFile,1024>
{
  XAssetPoolEntry<RawFile> *freeHead;
  XAssetPoolEntry<RawFile> entries[1024];
};

/* 7737 */
union XAssetPoolEntry<StringTable>
{
  StringTable entry;
  XAssetPoolEntry<StringTable> *next;
};

/* 7738 */
struct XAssetPool<StringTable,50>
{
  XAssetPoolEntry<StringTable> *freeHead;
  XAssetPoolEntry<StringTable> entries[50];
};

/* 7739 */
union XAssetEntryPoolEntry
{
  XAssetEntry entry;
  XAssetEntryPoolEntry *next;
};

/* 7740 */
struct XZoneName
{
  char name[64];
  int flags;
};

/* 7741 */
struct XZoneInfoInternal
{
  char name[64];
  int flags;
};

/* 7742 */
union XAssetPoolEntry<XModelPieces>
{
  XModelPieces entry;
  XAssetPoolEntry<XModelPieces> *next;
};

/* 7743 */
struct XAssetPool<XModelPieces,64>
{
  XAssetPoolEntry<XModelPieces> *freeHead;
  XAssetPoolEntry<XModelPieces> entries[64];
};

/* 7744 */
union XAssetPoolEntry<PhysPreset>
{
  PhysPreset entry;
  XAssetPoolEntry<PhysPreset> *next;
};

/* 7745 */
struct XAssetPool<PhysPreset,64>
{
  XAssetPoolEntry<PhysPreset> *freeHead;
  XAssetPoolEntry<PhysPreset> entries[64];
};

/* 7746 */
union XAssetPoolEntry<XAnimParts>
{
  XAnimParts entry;
  XAssetPoolEntry<XAnimParts> *next;
};

/* 7747 */
struct XAssetPool<XAnimParts,4096>
{
  XAssetPoolEntry<XAnimParts> *freeHead;
  XAssetPoolEntry<XAnimParts> entries[4096];
};

/* 7748 */
union XAssetPoolEntry<XModel>
{
  XModel entry;
  XAssetPoolEntry<XModel> *next;
};

/* 7749 */
struct XAssetPool<XModel,1000>
{
  XAssetPoolEntry<XModel> *freeHead;
  XAssetPoolEntry<XModel> entries[1000];
};

/* 7750 */
union XAssetPoolEntry<Material>
{
  Material entry;
  XAssetPoolEntry<Material> *next;
};

/* 7751 */
struct XAssetPool<Material,2000>
{
  XAssetPoolEntry<Material> *freeHead;
  __declspec(align(8)) XAssetPoolEntry<Material> entries[2000];
};

/* 7752 */
struct XAssetPool<Material,1536>
{
  XAssetPoolEntry<Material> *freeHead;
  __declspec(align(8)) XAssetPoolEntry<Material> entries[1536];
};

/* 7753 */
union XAssetPoolEntry<MaterialTechniqueSet>
{
  MaterialTechniqueSet entry;
  XAssetPoolEntry<MaterialTechniqueSet> *next;
};

/* 7754 */
struct XAssetPool<MaterialTechniqueSet,512>
{
  XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
  XAssetPoolEntry<MaterialTechniqueSet> entries[512];
};

/* 7755 */
union XAssetPoolEntry<GfxImage>
{
  GfxImage entry;
  XAssetPoolEntry<GfxImage> *next;
};

/* 7756 */
struct XAssetPool<GfxImage,2400>
{
  XAssetPoolEntry<GfxImage> *freeHead;
  XAssetPoolEntry<GfxImage> entries[2400];
};

/* 7757 */
union XAssetPoolEntry<snd_alias_list_t>
{
  snd_alias_list_t entry;
  XAssetPoolEntry<snd_alias_list_t> *next;
};

/* 7758 */
struct XAssetPool<snd_alias_list_t,16000>
{
  XAssetPoolEntry<snd_alias_list_t> *freeHead;
  XAssetPoolEntry<snd_alias_list_t> entries[16000];
};

/* 7759 */
struct XAssetPool<menuDef_t,1>
{
  XAssetPoolEntry<menuDef_t> *freeHead;
  XAssetPoolEntry<menuDef_t> entries[1];
};

/* 7760 */
struct XAssetPool<FxEffectDef,1>
{
  XAssetPoolEntry<FxEffectDef> *freeHead;
  XAssetPoolEntry<FxEffectDef> entries[1];
};

/* 7761 */
struct XAssetPool<FxImpactTable,1>
{
  XAssetPoolEntry<FxImpactTable> *freeHead;
  XAssetPoolEntry<FxImpactTable> entries[1];
};

/* 7762 */
struct XAssetPool<XModel,1>
{
  XAssetPoolEntry<XModel> *freeHead;
  XAssetPoolEntry<XModel> entries[1];
};

/* 7763 */
struct XAssetPool<SndCurve,1>
{
  XAssetPoolEntry<SndCurve> *freeHead;
  XAssetPoolEntry<SndCurve> entries[1];
};

/* 7764 */
struct XAssetPool<MenuList,1>
{
  XAssetPoolEntry<MenuList> *freeHead;
  XAssetPoolEntry<MenuList> entries[1];
};

/* 7765 */
struct XAssetPool<StringTable,1>
{
  XAssetPoolEntry<StringTable> *freeHead;
  XAssetPoolEntry<StringTable> entries[1];
};

/* 7766 */
struct XAssetPool<Font_s,1>
{
  XAssetPoolEntry<Font_s> *freeHead;
  XAssetPoolEntry<Font_s> entries[1];
};

/* 7767 */
union XAssetPoolEntry<MaterialPixelShader>
{
  MaterialPixelShader entry;
  XAssetPoolEntry<MaterialPixelShader> *next;
};

/* 7768 */
struct XAssetPool<MaterialPixelShader,1>
{
  XAssetPoolEntry<MaterialPixelShader> *freeHead;
  XAssetPoolEntry<MaterialPixelShader> entries[1];
};

/* 7769 */
struct XAssetPool<LocalizeEntry,1>
{
  XAssetPoolEntry<LocalizeEntry> *freeHead;
  XAssetPoolEntry<LocalizeEntry> entries[1];
};

/* 7770 */
struct XAssetPool<WeaponDef,1>
{
  XAssetPoolEntry<WeaponDef> *freeHead;
  XAssetPoolEntry<WeaponDef> entries[1];
};

/* 7771 */
struct XAssetPool<MaterialTechniqueSet,1>
{
  XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
  XAssetPoolEntry<MaterialTechniqueSet> entries[1];
};

/* 7772 */
struct XAssetPool<RawFile,1>
{
  XAssetPoolEntry<RawFile> *freeHead;
  XAssetPoolEntry<RawFile> entries[1];
};

/* 7773 */
struct XAssetPool<GfxLightDef,1>
{
  XAssetPoolEntry<GfxLightDef> *freeHead;
  XAssetPoolEntry<GfxLightDef> entries[1];
};

/* 7774 */
struct XAssetPool<snd_alias_list_t,1>
{
  XAssetPoolEntry<snd_alias_list_t> *freeHead;
  XAssetPoolEntry<snd_alias_list_t> entries[1];
};

/* 7775 */
struct XAssetPool<MapEnts,1>
{
  XAssetPoolEntry<MapEnts> *freeHead;
  XAssetPoolEntry<MapEnts> entries[1];
};

/* 7776 */
struct XAssetPool<Material,1>
{
  XAssetPoolEntry<Material> *freeHead;
  __declspec(align(8)) XAssetPoolEntry<Material> entries[1];
};

/* 7777 */
struct XAssetPool<XModelPieces,1>
{
  XAssetPoolEntry<XModelPieces> *freeHead;
  XAssetPoolEntry<XModelPieces> entries[1];
};

/* 7778 */
struct XAssetPool<PhysPreset,1>
{
  XAssetPoolEntry<PhysPreset> *freeHead;
  XAssetPoolEntry<PhysPreset> entries[1];
};

/* 7779 */
struct XAssetPool<XAnimParts,1>
{
  XAssetPoolEntry<XAnimParts> *freeHead;
  XAssetPoolEntry<XAnimParts> entries[1];
};

/* 7780 */
struct XAssetPool<GfxImage,1>
{
  XAssetPoolEntry<GfxImage> *freeHead;
  XAssetPoolEntry<GfxImage> entries[1];
};

/* 7781 */
union PackedLightingCoords
{
  unsigned int packed;
};

/* 7782 */
struct Picmip
{
  char platform[1];
};

/* 7783 */
#pragma pack(push, 4)
struct DynEntityServer
{
  GfxPlacement pose;
  unsigned __int16 flags;
  int health;
};
#pragma pack(pop)

/* 7784 */
struct GfxPosTexVertex
{
  float xyz[3];
  float texCoord[2];
};

/* 7785 */
struct XFile
{
  unsigned int version;
  unsigned int size;
  unsigned int blockSize[5];
};

/* 7786 */
struct DB_LoadData
{
  void *f;
  const char *filename;
  XBlock *blocks;
  int outstandingReads;
  _OVERLAPPED overlapped;
  z_stream_s stream;
  char *compressBufferStart;
  char *compressBufferEnd;
  void (__cdecl *interrupt)();
  int allocType;
};

/* 7787 */
struct DB_AuthHash
{
  char bytes[32];
};

/* 7788 */
#pragma pack(push, 8)
struct sha256_state
{
  unsigned __int64 length;
  unsigned int state[8];
  unsigned int curlen;
  char buf[64];
};
#pragma pack(pop)

/* 7789 */
union Hash_state
{
  char dummy[1];
  sha256_state sha256;
  void *data;
};

/* 7790 */
struct DB_AuthSignature
{
  char bytes[256];
};

/* 7791 */
struct Rsa_key
{
  int type;
  void *e;
  void *d;
  void *N;
  void *p;
  void *q;
  void *qP;
  void *dP;
  void *dQ;
};

/* 7792 */
#pragma pack(push, 4)
struct ltc_hash_descriptor
{
  char *name;
  char ID;
  unsigned int hashsize;
  unsigned int blocksize;
  unsigned int OID[16];
  unsigned int OIDlen;
  int (__cdecl *init)(Hash_state *);
  int (__cdecl *process)(Hash_state *, const char *, unsigned int);
  int (__cdecl *done)(Hash_state *, char *);
  int (__cdecl *test)();
  int (__cdecl *hmac_block)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
};
#pragma pack(pop)

/* 7793 */
union Prng_state
{
  char dummy[1];
};

/* 7794 */
struct ltc_math_descriptor
{
  char *name;
  int bits_per_digit;
  int (__cdecl *init)(void **);
  int (__cdecl *init_copy)(void **, void *);
  void (__cdecl *deinit)(void *);
  int (__cdecl *neg)(void *, void *);
  int (__cdecl *copy)(void *, void *);
  int (__cdecl *set_int)(void *, unsigned int);
  unsigned int (__cdecl *get_int)(void *);
  unsigned int (__cdecl *get_digit)(void *, int);
  int (__cdecl *get_digit_count)(void *);
  int (__cdecl *compare)(void *, void *);
  int (__cdecl *compare_d)(void *, unsigned int);
  int (__cdecl *count_bits)(void *);
  int (__cdecl *count_lsb_bits)(void *);
  int (__cdecl *twoexpt)(void *, int);
  int (__cdecl *read_radix)(void *, const char *, int);
  int (__cdecl *write_radix)(void *, char *, int);
  unsigned int (__cdecl *unsigned_size)(void *);
  int (__cdecl *unsigned_write)(void *, char *);
  int (__cdecl *unsigned_read)(void *, char *, unsigned int);
  int (__cdecl *add)(void *, void *, void *);
  int (__cdecl *addi)(void *, unsigned int, void *);
  int (__cdecl *sub)(void *, void *, void *);
  int (__cdecl *subi)(void *, unsigned int, void *);
  int (__cdecl *mul)(void *, void *, void *);
  int (__cdecl *muli)(void *, unsigned int, void *);
  int (__cdecl *sqr)(void *, void *);
  int (__cdecl *mpdiv)(void *, void *, void *, void *);
  int (__cdecl *div_2)(void *, void *);
  int (__cdecl *modi)(void *, unsigned int, unsigned int *);
  int (__cdecl *gcd)(void *, void *, void *);
  int (__cdecl *lcm)(void *, void *, void *);
  int (__cdecl *mulmod)(void *, void *, void *, void *);
  int (__cdecl *sqrmod)(void *, void *, void *);
  int (__cdecl *invmod)(void *, void *, void *);
  int (__cdecl *montgomery_setup)(void *, void **);
  int (__cdecl *montgomery_normalization)(void *, void *);
  int (__cdecl *montgomery_reduce)(void *, void *, void *);
  void (__cdecl *montgomery_deinit)(void *);
  int (__cdecl *exptmod)(void *, void *, void *, void *);
  int (__cdecl *isprime)(void *, int *);
  int (__cdecl *ecc_ptmul)(void *, void *, void *, void *, int);
  int (__cdecl *ecc_ptadd)(void *, void *, void *, void *, void *);
  int (__cdecl *ecc_ptdbl)(void *, void *, void *, void *);
  int (__cdecl *ecc_map)(void *, void *, void *);
  int (__cdecl *ecc_mul2add)(void *, void *, void *, void *, void *, void *);
  int (__cdecl *rsa_keygen)(Prng_state *, int, int, int, Rsa_key *);
  int (__cdecl *rsa_me)(const char *, unsigned int, char *, unsigned int *, int, Rsa_key *);
};

/* 7795 */
struct $FBCBCB7D32F7BD06CFF84CB8ABF708EC
{
  char fastfileName[32];
  unsigned int reserved;
  DB_AuthHash masterBlockHashes[244];
};

/* 7796 */
struct DB_AuthHeader
{
  char magic[8];
  unsigned int reserved;
  DB_AuthHash subheaderHash;
  DB_AuthSignature signedSubheaderHash;
  $FBCBCB7D32F7BD06CFF84CB8ABF708EC subheader;
};

/* 7797 */
struct DB_MasterBlock
{
  DB_AuthHash chunkHashes[256];
};

/* 7798 */
struct DB_AuthLoadGlob
{
  char expectedFastfileName[32];
  DB_AuthHeader header;
  DB_MasterBlock masterBlock;
  unsigned int authedGroupCount;
  unsigned int authedChunkInGroupCount;
  z_stream_s stream;
  unsigned int copyBufferEnd;
  char copyBuffer[8192];
};

/* 7799 */
struct TomGameMemGlob
{
  char *memAt;
  char *memEnd;
};

/* 7800 */
struct PrintChannel
{
  char name[32];
  bool allowScript;
};

/* 7801 */
struct PrintChannelGlob
{
  PrintChannel openChannels[256];
  unsigned int filters[7][8];
};

/* 7802 */
struct VoicePacket_t
{
  char talker;
  char data[10];
};

/* 7803 */
struct ping_t
{
  netadr_t adr;
  XNADDR xnaddr;
  int start;
  int time;
  char info[1024];
};

/* 7804 */
struct GfxConfiguration
{
  unsigned int maxClientViews;
  unsigned int entCount;
  unsigned int entnumNone;
  unsigned int entnumOrdinaryEnd;
  int threadContextCount;
  int critSectCount;
};

/* 7805 */
struct keyname_t
{
  const char *name;
  int keynum;
};

/* 7806 */
struct KeyState
{
  int down;
  int repeats;
  const char *binding;
};

/* 7807 */
struct PlayerKeyState
{
  field_t chatField;
  int chat_team;
  int overstrikeMode;
  int anyKeyDown;
  KeyState keys[256];
  LocSelInputState locSelInputState;
};

/* 7808 */
#pragma pack(push, 4)
struct kbutton_t
{
  int down[2];
  unsigned int downtime;
  unsigned int msec;
  bool active;
  bool wasPressed;
};
#pragma pack(pop)

/* 7809 */
struct AimInput
{
  float deltaTime;
  float pitch;
  float pitchAxis;
  float pitchMax;
  float yaw;
  float yawAxis;
  float yawMax;
  float forwardAxis;
  float rightAxis;
  int buttons;
  int localClientNum;
  playerState_s *ps;
};

/* 7810 */
#pragma pack(push, 4)
struct AimOutput
{
  float pitch;
  float yaw;
  float meleeChargeYaw;
  char meleeChargeDist;
};
#pragma pack(pop)

/* 7811 */
struct GamepadVirtualAxisMapping
{
  GamepadPhysicalAxis physicalAxis;
  GamepadMapping mapType;
};

/* 7812 */
struct GpadAxesGlob
{
  int axesValues[6];
  GamepadVirtualAxisMapping virtualAxes[6];
};

/* 7813 */
struct StickToCodeMap
{
  GamepadPhysicalAxis physicalAxis;
  int posCode;
  int negCode;
};

/* 7814 */
struct MessageLine
{
  int messageIndex;
  int textBufPos;
  int textBufSize;
  int typingStartTime;
  int lastTypingSoundTime;
  int flags;
};

/* 7815 */
struct Message
{
  int startTime;
  int endTime;
};

/* 7816 */
struct MessageWindow
{
  MessageLine *lines;
  Message *messages;
  char *circularTextBuffer;
  int textBufSize;
  int lineCount;
  int padding;
  int scrollTime;
  int fadeIn;
  int fadeOut;
  int textBufPos;
  int firstLineIndex;
  int activeLineCount;
  int messageIndex;
};

/* 7817 */
#pragma pack(push, 4)
struct ConDrawInputGlob
{
  char autoCompleteChoice[64];
  int matchIndex;
  int matchCount;
  const char *inputText;
  int inputTextLen;
  bool hasExactMatch;
  bool mayAutoComplete;
  float x;
  float y;
  float leftX;
  float fontHeight;
};
#pragma pack(pop)

/* 7818 */
struct MessageBuffer
{
  char gamemsgText[4][2048];
  MessageWindow gamemsgWindows[4];
  MessageLine gamemsgLines[4][12];
  Message gamemsgMessages[4][12];
  char miniconText[4096];
  MessageWindow miniconWindow;
  MessageLine miniconLines[100];
  Message miniconMessages[100];
  char errorText[1024];
  MessageWindow errorWindow;
  MessageLine errorLines[5];
  Message errorMessages[5];
};

/* 7819 */
#pragma pack(push, 4)
struct Console
{
  int initialized;
  MessageWindow consoleWindow;
  MessageLine consoleLines[1024];
  Message consoleMessages[1024];
  char consoleText[32768];
  char textTempLine[512];
  unsigned int lineOffset;
  int displayLineOffset;
  int prevChannel;
  bool outputVisible;
  int fontHeight;
  int visibleLineCount;
  int visiblePixelWidth;
  float screenMin[2];
  float screenMax[2];
  MessageBuffer messageBuffer[4];
  float color[4];
};
#pragma pack(pop)

/* 7820 */
struct CgEntCollNode
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  float linkMins[2];
  float linkMaxs[2];
};

/* 7821 */
struct CgEntCollTree
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 7822 */
struct __declspec(align(4)) CgEntCollSector
{
  CgEntCollTree tree;
  unsigned __int16 entListHead;
};

/* 7823 */
struct localEntity_s
{
  localEntity_s *prev;
  localEntity_s *next;
  leType_t leType;
  int endTime;
  trajectory_t pos;
  float color[4];
  float tracerClipDist;
  GfxEntity refEntity;
};

/* 7824 */
struct visField_t
{
  const char *name;
  int offset;
  int fieldType;
};

/* 7825 */
struct ClientViewParams
{
  float x;
  float y;
  float width;
  float height;
};

/* 7826 */
struct TestEffect
{
  char name[64];
  float pos[3];
  int time;
  int respawnTime;
};

/* 7827 */
#pragma pack(push, 4)
struct vehicleEffects
{
  bool active;
  int lastAccessed;
  int entityNum;
  int nextDustFx;
  int nextSmokeFx;
  bool soundPlaying;
  float barrelVelocity;
  float barrelPos;
  int lastBarrelUpdateTime;
  char tag_engine_left;
  char tag_engine_right;
};
#pragma pack(pop)

/* 7828 */
#pragma pack(push, 4)
struct vehfx_t
{
  bool tireActive[4];
  float tireGroundPoint[4][3];
  char tireGroundSurfType[4];
  bool soundEnabled;
  float soundEngineOrigin[3];
};
#pragma pack(pop)

/* 7829 */
#pragma pack(push, 4)
struct $23CB5725E145268D108535259CC94AB4
{
  char name[64];
  int index;
  bool useMouse;
};
#pragma pack(pop)

/* 7830 */
struct listColumnInfo_t
{
  listColumnTypes_t type;
  float fWidth;
  const char *pszName;
  int iAlignment;
};

/* 7831 */
struct RumbleGraph
{
  char graphName[64];
  float knots[16][2];
  int knotCount;
};

/* 7832 */
struct RumbleInfo
{
  int rumbleNameIndex;
  float duration;
  float range;
  RumbleGraph *highRumbleGraph;
  RumbleGraph *lowRumbleGraph;
  int fadeWithDistance;
  int broadcast;
};

/* 7833 */
union $72C9462F36F972EB135EFB7899102031
{
  int entityNum;
  float pos[3];
};

/* 7834 */
#pragma pack(push, 4)
struct ActiveRumble
{
  RumbleInfo *rumbleInfo;
  int startTime;
  bool loop;
  RumbleSourceType sourceType;
  $72C9462F36F972EB135EFB7899102031 source;
};
#pragma pack(pop)

/* 7835 */
struct RumbleGlobals
{
  RumbleGraph graphs[64];
  RumbleInfo infos[32];
  ActiveRumble activeRumbles[32];
  float receiverPos[3];
  int receiverEntNum;
};

/* 7836 */
struct CgSoundPlaybackTrackingInfo
{
  int entitynum;
  float origin[3];
  const char *aliasname;
  int wasInKillcam;
};

/* 7837 */
struct Image_MemUsage
{
  int total;
};

/* 7838 */
struct trStatistics_t
{
  int c_indexes;
  int c_fxIndexes;
  int c_viewIndexes;
  int c_shadowIndexes;
  int c_vertexes;
  int c_batches;
  float dc;
  Image_MemUsage c_imageUsage;
};

/* 7839 */
struct cg_hudelem_t
{
  float x;
  float y;
  float width;
  float height;
  char hudElemLabel[256];
  float labelWidth;
  char hudElemText[256];
  float textWidth;
  Font_s *font;
  float fontScale;
  float fontHeight;
  float color[4];
  int timeNow;
};

/* 7840 */
struct GfxSkinnedXModelSurfs
{
  void *firstSurf;
};

/* 7841 */
struct GfxSceneEntityCull
{
  volatile unsigned int state;
  float mins[3];
  float maxs[3];
  char lods[32];
  GfxSkinnedXModelSurfs skinnedSurfs;
};

/* 7842 */
union GfxSceneEntityInfo
{
  cpose_t *pose;
  unsigned __int16 *cachedLightingHandle;
};

/* 7843 */
#pragma pack(push, 4)
struct GfxSceneEntity
{
  float lightingOrigin[3];
  GfxScaledPlacement placement;
  GfxSceneEntityCull cull;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 entnum;
  DObj_s *obj;
  GfxSceneEntityInfo info;
  char reflectionProbeIndex;
};
#pragma pack(pop)

/* 7844 */
struct lagometer_t
{
  int frameSamples[128];
  int frameCount;
  int snapshotFlags[128];
  int snapshotSamples[128];
  int snapshotCount;
};

/* 7845 */
struct CenterPrint
{
  int time;
  int charWidth;
  char text[1024];
  int lineCount;
  int priority;
};

/* 7846 */
#pragma pack(push, 4)
struct OverheadFade
{
  int lastTime;
  int startTime;
  bool visible;
};
#pragma pack(pop)

/* 7847 */
struct HudGrenade
{
  float origin[3];
  Material *material;
};

/* 7848 */
#pragma pack(push, 4)
struct CompassActor
{
  int lastUpdate;
  float lastPos[2];
  float lastEnemyPos[2];
  float lastYaw;
  int pingTime;
  int beginFadeTime;
  int beginRadarFadeTime;
  bool enemy;
};
#pragma pack(pop)

/* 7849 */
struct CompassVehicle
{
  int entityNum;
  int lastUpdate;
  float lastPos[2];
  float lastYaw;
  team_t team;
};

/* 7850 */
struct CgEntCollWorld
{
  float mins[3];
  float maxs[3];
  unsigned __int16 freeHead;
  __declspec(align(4)) CgEntCollSector sectors[1024];
};

/* 7851 */
struct CameraShake
{
  int time;
  float scale;
  float length;
  float radius;
  float src[3];
  float size;
  float rumbleScale;
};

/* 7852 */
struct CameraShakeSet
{
  CameraShake shakes[4];
  float phase;
};

/* 7853 */
struct BINKFRAMETEXTURES
{
  D3DTexture *Ytexture;
  D3DTexture *cRtexture;
  D3DTexture *cBtexture;
  D3DTexture *Atexture;
  unsigned int Ysize;
  unsigned int cRsize;
  unsigned int cBsize;
  unsigned int Asize;
};

/* 7854 */
struct BINKPLANE
{
  int Allocate;
  void *Buffer;
  unsigned int BufferPitch;
};

/* 7855 */
struct BINKFRAMEPLANESET
{
  BINKPLANE YPlane;
  BINKPLANE cRPlane;
  BINKPLANE cBPlane;
  BINKPLANE APlane;
};

/* 7856 */
struct BINKFRAMEBUFFERS
{
  int TotalFrames;
  unsigned int YABufferWidth;
  unsigned int YABufferHeight;
  unsigned int cRcBBufferWidth;
  unsigned int cRcBBufferHeight;
  unsigned int FrameNum;
  BINKFRAMEPLANESET Frames[2];
};

/* 7857 */
struct BINKTEXTURESET
{
  BINKFRAMETEXTURES textures[2];
  BINKFRAMEBUFFERS bink_buffers;
};

/* 7858 */
struct POS_TC_VERTEX
{
  float sx;
  float sy;
  float sz;
  float tu;
  float tv;
};

/* 7859 */
struct SurfaceTypeSoundList
{
  char *surfaceSoundBase;
  snd_alias_list_t **soundAliasList;
};

/* 7860 */
struct pml_t
{
  float forward[3];
  float right[3];
  float up[3];
  float frametime;
  int msec;
  int walking;
  int groundPlane;
  int almostGroundPlane;
  trace_t groundTrace;
  float impactSpeed;
  float previous_origin[3];
  float previous_velocity[3];
};

/* 7861 */
struct viewLerpWaypoint_s
{
  int iFrac;
  float fViewHeight;
  int iOffset;
};

/* 7862 */
struct pmoveHandler_t
{
  void (__cdecl *trace)(trace_t *, const float *, const float *, const float *, const float *, int, int);
  void (__cdecl *playerEvent)(int, int);
};

/* 7863 */
struct MantleResults
{
  float dir[3];
  float startPos[3];
  float ledgePos[3];
  float endPos[3];
  int flags;
  int duration;
};

/* 7864 */
struct MantleAnimTransition
{
  int upAnimIndex;
  int overAnimIndex;
  float height;
};

/* 7865 */
struct animStringItem_t
{
  const char *string;
  int hash;
};

/* 7866 */
struct loadAnim_t
{
  scr_anim_s anim;
  int iNameHash;
  char szAnimName[64];
};

/* 7867 */
struct controller_info_t
{
  float angles[6][3];
  float tag_origin_angles[3];
  float tag_origin_offset[3];
};

/* 7868 */
struct animConditionTable_t
{
  animScriptConditionTypes_t type;
  animStringItem_t *values;
};

/* 7869 */
struct AimTarget
{
  int entIndex;
  float worldDistSqr;
  float mins[3];
  float maxs[3];
  float velocity[3];
};

/* 7870 */
struct AimTargetGlob
{
  AimTarget targets[64];
  int targetCount;
  AimTarget clientTargets[64];
  int clientTargetCount;
};

/* 7871 */
struct AimTweakables
{
  float slowdownRegionWidth;
  float slowdownRegionHeight;
  float autoAimRegionWidth;
  float autoAimRegionHeight;
  float autoMeleeRegionWidth;
  float autoMeleeRegionHeight;
  float lockOnRegionWidth;
  float lockOnRegionHeight;
};

/* 7872 */
struct AimScreenTarget
{
  int entIndex;
  float clipMins[2];
  float clipMaxs[2];
  float aimPos[3];
  float velocity[3];
  float distSqr;
  float crosshairDistSqr;
};

/* 7873 */
struct AimAssistGlobals
{
  bool initialized;
  __declspec(align(4)) AimTweakables tweakables;
  float viewOrigin[3];
  float viewAngles[3];
  float viewAxis[3][3];
  float fovTurnRateScale;
  float fovScaleInv;
  float pitchDelta;
  float yawDelta;
  float screenWidth;
  float screenHeight;
  float screenMtx[4][4];
  float invScreenMtx[4][4];
  AimScreenTarget screenTargets[64];
  int screenTargetCount;
  int autoAimTargetEnt;
  bool autoAimPressed;
  bool autoAimActive;
  __declspec(align(4)) float autoAimPitch;
  float autoAimPitchTarget;
  float autoAimYaw;
  float autoAimYawTarget;
  int autoMeleeTargetEnt;
  bool autoMeleeActive;
  bool autoMeleePressed;
  __declspec(align(4)) float autoMeleePitch;
  float autoMeleePitchTarget;
  float autoMeleeYaw;
  float autoMeleeYawTarget;
};

/* 7874 */
#pragma pack(push, 4)
struct D3DXShader::FIELD_ENTRY
{
  const char *name;
  char value;
};
#pragma pack(pop)

/* 7875 */
struct D3DXShader::EnumStringTableEntry
{
  unsigned int Value;
  const char *strName;
};

/* 7876 */
#pragma pack(push, 4)
struct D3DXShader::FETCH_FIELD
{
  const char *name;
  char field;
  char type;
  int allowedInMiniFetch;
  int allowedInUnpatched;
  D3DXShader::FIELD_ENTRY *values;
  unsigned int low;
};
#pragma pack(pop)

/* 7877 */
#pragma pack(push, 4)
struct D3DXShader::TFETCH_FIELD
{
  const char *name;
  char field;
  char type;
  D3DXShader::FIELD_ENTRY *values;
};
#pragma pack(pop)

/* 7878 */
#pragma pack(push, 4)
struct D3DXShader::CONFIG_FIELD_ENTRY
{
  const char *name;
  char mode;
};
#pragma pack(pop)

/* 7879 */
#pragma pack(push, 4)
struct D3DXShader::CONFIG_REGISTER_FIELD
{
  const char *name;
  int isValidInPixelShader;
  int isValidInVertexShader;
  char field;
  char type;
  unsigned int max;
};
#pragma pack(pop)

/* 7880 */
struct D3DXShader::CUAssemblerYaccStruct
{
  int d3dxuasm_debug;
  int d3dxuasm_nerrs;
  int d3dxuasm_errflag;
  int d3dxuasm_char;
  __int16 *d3dxuasm_ssp;
  int *d3dxuasm_vsp;
  int d3dxuasm_val;
  int d3dxuasm_lval;
  __int16 d3dxuasm_ss[500];
  int d3dxuasm_vs[500];
};

/* 7881 */
#pragma pack(push, 4)
struct D3DXShader::ValidatorOutputCallbackContext
{
  D3DXShader::CTErrors *m_pErrors;
  D3DXShader::D3DXTOKEN *m_pToken;
  unsigned __int16 m_lineLength;
  int m_bError;
  char m_lineBuf[512];
};
#pragma pack(pop)

/* 7882 */
struct D3DXShader::CUAssemblerYaccContext
{
  D3DXShader::CUAssemblerYaccStruct baseclass_0;
  D3DXShader::CUAssembler *m_pThis;
};

/* 7883 */
struct D3DXShader::AbstractHardwareDestReg
{
  int _bf0;
};

/* 7884 */
struct D3DXShader::CPreProcessorYaccStruct
{
  int d3dxtok_debug;
  int d3dxtok_nerrs;
  int d3dxtok_errflag;
  int d3dxtok_char;
  __int16 *d3dxtok_ssp;
  int *d3dxtok_vsp;
  int d3dxtok_val;
  int d3dxtok_lval;
  __int16 d3dxtok_ss[500];
  int d3dxtok_vs[500];
};

/* 7885 */
struct D3DXShader::CPreProcessorYaccContext
{
  D3DXShader::CPreProcessorYaccStruct baseclass_0;
  D3DXShader::CPreProcessor *m_pThis;
};

/* 7886 */
struct D3DXShader::FloatConstantTupple
{
  char *s;
  unsigned int bits;
};

/* 7887 */
struct D3DXShader::CShaderProgram::CombineConstants::__l2::CONSTANT_REG
{
  unsigned int uPool;
  unsigned int uRegister;
  int bUsed;
};

/* 7888 */
struct D3DXShader::_D3DXINTRINSIC_ARGUMENT
{
  const char *pName;
  unsigned int Usage;
  unsigned int TemplateId;
  D3DXShader::_D3DXTYPE_TEMPLATE *pTemplate;
  unsigned int ComponentTypeId;
  D3DXShader::_D3DXCOMPONENT_TYPE *pComponentType;
  unsigned int Rows;
  unsigned int Cols;
};

/* 7889 */
struct D3DXShader::_D3DXINTRINSIC
{
  D3DXShader::_D3DXINTRINSIC_OP Op;
  D3DXShader::_D3DXINTRINSIC_ARGUMENT Argument[5];
};

/* 7890 */
struct D3DXShader::CParseYaccStruct
{
  int d3dxshader_debug;
  int d3dxshader_nerrs;
  int d3dxshader_errflag;
  int d3dxshader_char;
  __int16 *d3dxshader_ssp;
  int *d3dxshader_vsp;
  int d3dxshader_val;
  int d3dxshader_lval;
  __int16 d3dxshader_ss[500];
  int d3dxshader_vs[500];
};

/* 7891 */
struct D3DXShader::CParseYaccContext
{
  D3DXShader::CParseYaccStruct baseclass_0;
  D3DXShader::CParse *m_pThis;
};

/* 7892 */
struct D3DXShader::CParse::GetComponentType::__l2::INFO
{
  unsigned int Bits;
  unsigned int Flags;
};

/* 7893 */
struct D3DXShader::STACKFRAME
{
  unsigned int *pStack;
  unsigned int uStack;
};

/* 7894 */
struct D3DXShader::SetShaderConstant<0,0,0>
{
  char dummy[1];
};

/* 7895 */
struct D3DXShader::SetShaderConstant<0,0,1>
{
  char dummy[1];
};

/* 7896 */
struct D3DXShader::SetShaderConstant<0,0,2>
{
  char dummy[1];
};

/* 7897 */
struct D3DXShader::SetShaderConstant<0,0,3>
{
  char dummy[1];
};

/* 7898 */
struct D3DXShader::SetShaderConstant<0,1,0>
{
  char dummy[1];
};

/* 7899 */
struct D3DXShader::SetShaderConstant<0,1,1>
{
  char dummy[1];
};

/* 7900 */
struct D3DXShader::SetShaderConstant<0,1,2>
{
  char dummy[1];
};

/* 7901 */
struct D3DXShader::SetShaderConstant<0,1,3>
{
  char dummy[1];
};

/* 7902 */
struct D3DXShader::SetShaderConstant<0,2,0>
{
  char dummy[1];
};

/* 7903 */
struct D3DXShader::SetShaderConstant<0,2,1>
{
  char dummy[1];
};

/* 7904 */
struct D3DXShader::SetShaderConstant<0,2,2>
{
  char dummy[1];
};

/* 7905 */
struct D3DXShader::SetShaderConstant<0,2,3>
{
  char dummy[1];
};

/* 7906 */
struct D3DXShader::SetShaderConstant<1,0,0>
{
  char dummy[1];
};

/* 7907 */
struct D3DXShader::SetShaderConstant<1,0,1>
{
  char dummy[1];
};

/* 7908 */
struct D3DXShader::SetShaderConstant<1,0,2>
{
  char dummy[1];
};

/* 7909 */
struct D3DXShader::SetShaderConstant<1,0,3>
{
  char dummy[1];
};

/* 7910 */
struct D3DXShader::SetShaderConstant<1,1,0>
{
  char dummy[1];
};

/* 7911 */
struct D3DXShader::SetShaderConstant<1,1,1>
{
  char dummy[1];
};

/* 7912 */
struct D3DXShader::SetShaderConstant<1,1,2>
{
  char dummy[1];
};

/* 7913 */
struct D3DXShader::SetShaderConstant<1,1,3>
{
  char dummy[1];
};

/* 7914 */
struct D3DXShader::SetShaderConstant<1,2,0>
{
  char dummy[1];
};

/* 7915 */
struct D3DXShader::SetShaderConstant<1,2,1>
{
  char dummy[1];
};

/* 7916 */
struct D3DXShader::SetShaderConstant<1,2,2>
{
  char dummy[1];
};

/* 7917 */
struct D3DXShader::SetShaderConstant<1,2,3>
{
  char dummy[1];
};

/* 7918 */
struct D3DXShader::SetShaderConstant<2,2,0>
{
  char dummy[1];
};

/* 7919 */
struct D3DXShader::SetShaderConstant<2,2,1>
{
  char dummy[1];
};

/* 7920 */
struct D3DXShader::SetShaderConstant<2,2,2>
{
  char dummy[1];
};

/* 7921 */
struct D3DXShader::SetShaderConstant<2,2,3>
{
  char dummy[1];
};

/* 7922 */
struct D3DXShader::SetTyped<0,0,1,1,0>
{
  char dummy[1];
};

/* 7923 */
struct D3DXShader::SetTyped<0,1,1,1,0>
{
  char dummy[1];
};

/* 7924 */
struct D3DXShader::SetTyped<0,2,1,1,0>
{
  char dummy[1];
};

/* 7925 */
struct D3DXShader::SetTyped<0,3,1,1,0>
{
  char dummy[1];
};

/* 7926 */
struct D3DXShader::SetTyped<1,3,1,4,0>
{
  char dummy[1];
};

/* 7927 */
struct D3DXShader::SetTyped<2,3,4,4,0>
{
  char dummy[1];
};

/* 7928 */
struct D3DXShader::SetTyped<2,3,4,4,1>
{
  char dummy[1];
};

/* 7929 */
struct D3DXShader::SetTyped<3,3,4,4,0>
{
  char dummy[1];
};

/* 7930 */
struct D3DXShader::SetTyped<3,3,4,4,1>
{
  char dummy[1];
};

/* 7931 */
struct D3DXShader::_SHADER_OPCODE
{
  const char *pName;
  unsigned int Opcode;
  unsigned int Args[16];
};

/* 7932 */
struct D3DXShader::CAssemblerYaccStruct
{
  int d3dxasm_debug;
  int d3dxasm_nerrs;
  int d3dxasm_errflag;
  int d3dxasm_char;
  __int16 *d3dxasm_ssp;
  int *d3dxasm_vsp;
  int d3dxasm_val;
  int d3dxasm_lval;
  __int16 d3dxasm_ss[500];
  int d3dxasm_vs[500];
};

/* 7933 */
struct D3DXShader::CAssemblerYaccContext
{
  D3DXShader::CAssemblerYaccStruct baseclass_0;
  D3DXShader::CAssembler *m_pThis;
};

/* 7934 */
struct ConvertAssembleParamWToA
{
  _D3DXSHADER_COMPILE_PARAMETERSA *m_pParametersA;
  char m_szPath[260];
  _D3DXSHADER_COMPILE_PARAMETERSA m_UpdatedParameters;
};

/* 7935 */
struct ConvertCompileParamWToA
{
  _D3DXSHADER_COMPILE_PARAMETERSA *m_pParametersA;
  char m_szPath[260];
  _D3DXSHADER_COMPILE_PARAMETERSA m_UpdatedParameters;
};

/* 7936 */
struct D3DXShader::PreProcessorInitializer
{
  D3DXShader::PreProcessorInitializerVtbl *vfptr;
};

/* 7937 */
struct $BAFC1E597FE1414449626ABABFE729B3
{
  _BYTE gap0[4];
  _D3DXMACRO *(__cdecl *GetDefines)(D3DXShader::PreProcessorInitializer *this);
};

/* 7938 */
union $CFECFFD8931C3C308CE8853A570F2CCA
{
  HRESULT (__cdecl *Initialize)(D3DXShader::PreProcessorInitializer *this, D3DXShader::CPreProcessor *);
  $BAFC1E597FE1414449626ABABFE729B3 _s1;
};

/* 7939 */
struct D3DXShader::PreProcessorInitializerVtbl
{
  void *(__cdecl *__vecDelDtor)(D3DXShader::PreProcessorInitializer *this, unsigned int);
  $CFECFFD8931C3C308CE8853A570F2CCA ___u1;
};

/* 7940 */
struct D3DXShader::PreProcessorInitializeFromMemory
{
  D3DXShader::PreProcessorInitializer baseclass_0;
  const char *m_pSrcData;
  unsigned int m_SrcDataSize;
  _D3DXMACRO *m_pDefines;
  ID3DXInclude *m_pInclude;
};

/* 7941 */
struct D3DXShader::PreProcessorInitializeFromFile
{
  D3DXShader::PreProcessorInitializer baseclass_0;
  const void *m_pSrcFile;
  int m_bUnicode;
  _D3DXMACRO *m_pDefines;
  ID3DXInclude *m_pInclude;
};

/* 7942 */
struct CStringBuffer
{
  char *m_pBuffer;
  unsigned int m_MaxSize;
  unsigned int m_CurSize;
};

/* 7943 */
struct XGRAPHICS::CShaderCost
{
  GPU_PROGRAMCONTROL m_ProgramControl;
  GPU_CONTEXTMISC m_ContextMisc;
  const unsigned int *m_pShaderCode;
  unsigned int m_ShaderSizeInBytes;
  unsigned int m_BooleanConstants[8];
  unsigned int m_IntegerConstants[32];
  GPUFETCH_CONSTANT m_FetchConstants[32];
  unsigned int m_KnownBooleanConstants[8];
  unsigned int m_KnownIntegerConstants[1];
  int m_bKnowFetchConstants;
  unsigned int m_ChangeableBooleanConstants[8];
  unsigned int m_ChangeableIntegerConstants[1];
  unsigned int m_VSInputDeclCount;
  _UCODE_VSINPUTDECLARATION *m_pVfetchPatches;
  int m_bHasHitUnknownControlFlow;
  int m_bHasHitChangeableControlFlow;
  int m_bHasHitPredicatedJump;
  int m_bHasHitPredicatedEndloop;
  int m_bHasHitUnknownFetchConstant;
  int m_bHasHitUnpatchedVfetch;
  int m_IsVertexShader;
  unsigned int m_MaxVertexFetchMegaCount;
  unsigned int m_MinVertexFetchMegaCount;
  unsigned int m_MaxVertexFetchSize;
  unsigned int m_MinVertexFetchSize;
  unsigned int m_MaxTextureFetchCost;
  unsigned int m_MinTextureFetchCost;
  unsigned int m_MaxAluCount;
  unsigned int m_MinAluCount;
  unsigned int m_FlowCount;
  int m_ShaderRanTooLong;
};

/* 7944 */
struct XGRAPHICS::Stream
{
  XGRAPHICS::StreamVtbl *vfptr;
  unsigned int m_Depth;
  int m_bAtStartOfLine;
};

/* 7945 */
struct XGRAPHICS::StreamVtbl
{
  void (__cdecl *VPrintf)(XGRAPHICS::Stream *this, const char *, char *);
  void (__cdecl *Append)(XGRAPHICS::Stream *this, const char *);
  void (__cdecl *Append_Xmlify)(XGRAPHICS::Stream *this, const char *);
};

/* 7946 */
struct XGRAPHICS::CountingStream
{
  XGRAPHICS::Stream baseclass_0;
  HRESULT m_hr;
  unsigned int m_Count;
};

/* 7947 */
struct XGRAPHICS::BufferStream
{
  XGRAPHICS::Stream baseclass_0;
  HRESULT m_hr;
  void *m_pBuffer;
  unsigned int m_cbBufferSize;
  unsigned int m_Count;
};

/* 7948 */
struct XGRAPHICS::File
{
  char Path[260];
  unsigned int ID;
  _FILETIME Time;
  const char *pBuffer;
};

/* 7949 */
union $6CFE0F6A2C0B7C7CE500C166E50C15CC
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::File *m_pData;
};

/* 7950 */
struct XGRAPHICS::FastVector<XGRAPHICS::File>
{
  $6CFE0F6A2C0B7C7CE500C166E50C15CC ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7951 */
struct XGRAPHICS::Statement
{
  int IsALU;
  unsigned int PC;
  unsigned int FileID;
  unsigned int Line;
  unsigned int iLexicalScope;
  int IsLastInstruction;
};

/* 7952 */
union $FC37D033C70D171B70D3340C4921CB85
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::Statement *m_pData;
};

/* 7953 */
struct XGRAPHICS::FastVector<XGRAPHICS::Statement>
{
  $FC37D033C70D171B70D3340C4921CB85 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7954 */
struct XGRAPHICS::VariableDebugInfo
{
  unsigned int iVar;
  unsigned int VarComponent;
  unsigned int Register;
  int _bf12;
};

/* 7955 */
union $B88BBA9BD580DA1FD586784695548204
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::VariableDebugInfo *m_pData;
};

/* 7956 */
struct XGRAPHICS::FastVector<XGRAPHICS::VariableDebugInfo>
{
  $B88BBA9BD580DA1FD586784695548204 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7957 */
struct XGRAPHICS::VfetchInfo
{
  _BYTE gap0[4];
  int _bf4;
};

/* 7958 */
union $CF055A9ED2DF54A8EC1A9473DC37D442
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::VfetchInfo *m_pData;
};

/* 7959 */
struct XGRAPHICS::FastVector<XGRAPHICS::VfetchInfo>
{
  $CF055A9ED2DF54A8EC1A9473DC37D442 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7960 */
struct XGRAPHICS::InterpolatorInfo
{
  int _bf0;
};

/* 7961 */
union $B02A4B2E639E2804D70E731BE352284A
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::InterpolatorInfo *m_pData;
};

/* 7962 */
struct XGRAPHICS::FastVector<XGRAPHICS::InterpolatorInfo>
{
  $B02A4B2E639E2804D70E731BE352284A ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7963 */
struct XGRAPHICS::VariableInfo
{
  int _bf0;
  unsigned int TypeIndex;
  unsigned int iFuncScope;
  unsigned int iLexicalScope;
};

/* 7964 */
union $28A6FAD7F2E747FCBB0B14A12204657A
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::VariableInfo *m_pData;
};

/* 7965 */
struct XGRAPHICS::FastVector<XGRAPHICS::VariableInfo>
{
  $28A6FAD7F2E747FCBB0B14A12204657A ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7966 */
struct XGRAPHICS::ScopeInfo
{
  unsigned int iEnclosingScope;
  int _bf4;
};

/* 7967 */
union $B6796A5BADC85BEFAD60A38107FCD7AB
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::ScopeInfo *m_pData;
};

/* 7968 */
struct XGRAPHICS::FastVector<XGRAPHICS::ScopeInfo>
{
  $B6796A5BADC85BEFAD60A38107FCD7AB ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7969 */
struct XGRAPHICS::FuncEntryExitInfo
{
  unsigned int iTransition;
  unsigned int iFuncCallee;
  int _bf8;
};

/* 7970 */
union $4D199A7CFBE3C9B2AFF5FA8CCFF278F4
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::FuncEntryExitInfo *m_pData;
};

/* 7971 */
struct XGRAPHICS::FastVector<XGRAPHICS::FuncEntryExitInfo>
{
  $4D199A7CFBE3C9B2AFF5FA8CCFF278F4 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7972 */
union $2854B30B97CDB870858FB4D340A46B89
{
  XGRAPHICS::FastVectorBase baseclass_0;
  unsigned int *m_pData;
};

/* 7973 */
struct XGRAPHICS::FastVector<unsigned long>
{
  $2854B30B97CDB870858FB4D340A46B89 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7974 */
struct XGRAPHICS::FuncInfo
{
  unsigned int NameIndex;
  unsigned int ReturnVarID;
  XGRAPHICS::FastVector<unsigned long> ParamIDs;
};

/* 7975 */
union $96E9EA9568791F8FFCD5FEE79116DB55
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::FuncInfo *m_pData;
};

/* 7976 */
struct XGRAPHICS::FastVector<XGRAPHICS::FuncInfo>
{
  $96E9EA9568791F8FFCD5FEE79116DB55 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7977 */
struct XGRAPHICS::LiteralBool
{
  char Index;
  char Value;
};

/* 7978 */
union $4A65497986D5D75AD0B0E9E2C73AAF90
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::LiteralBool *m_pData;
};

/* 7979 */
struct XGRAPHICS::FastVector<XGRAPHICS::LiteralBool>
{
  $4A65497986D5D75AD0B0E9E2C73AAF90 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7980 */
struct XGRAPHICS::LiteralInt
{
  char Index;
  char Count;
  char Start;
  char Inc;
};

/* 7981 */
union $A1BDCC3342C325776A0615AFE0E1F4A9
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::LiteralInt *m_pData;
};

/* 7982 */
struct XGRAPHICS::FastVector<XGRAPHICS::LiteralInt>
{
  $A1BDCC3342C325776A0615AFE0E1F4A9 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7983 */
#pragma pack(push, 4)
struct XGRAPHICS::LiteralFloat
{
  char Index;
  float data[4];
};
#pragma pack(pop)

/* 7984 */
union $18ED904CF34A16402DA890F8DA12639D
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::LiteralFloat *m_pData;
};

/* 7985 */
struct XGRAPHICS::FastVector<XGRAPHICS::LiteralFloat>
{
  $18ED904CF34A16402DA890F8DA12639D ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7986 */
struct XGRAPHICS::PDBShader
{
  char Entry[256];
  unsigned int ShaderVersion;
  XShaderPDBHint PdbHint;
  unsigned int AluOffset;
  XGRAPHICS::FastVector<XGRAPHICS::Statement> SourceMap;
  XGRAPHICS::FastVector<XGRAPHICS::VariableDebugInfo> VarDebugInfo;
  XGRAPHICS::FastVector<XGRAPHICS::VfetchInfo> VfetchInfo;
  XGRAPHICS::FastVector<XGRAPHICS::InterpolatorInfo> InterpolatorInfo;
  XGRAPHICS::FastVector<XGRAPHICS::VariableInfo> VarInfo;
  D3DXShader::CCommentBlock VarDecls;
  XGRAPHICS::FastVector<XGRAPHICS::ScopeInfo> ScopeInfo;
  XGRAPHICS::FastVector<XGRAPHICS::FuncEntryExitInfo> FuncEntryExitInfo;
  XGRAPHICS::FastVector<XGRAPHICS::FuncInfo> FuncInfo;
  _D3DXSHADER_CONSTANTTABLE *m_pConstantTable;
  unsigned int m_cbConstantTableSize;
  XGRAPHICS::FastVector<XGRAPHICS::LiteralBool> LiteralBools;
  XGRAPHICS::FastVector<XGRAPHICS::LiteralInt> LiteralInts;
  XGRAPHICS::FastVector<XGRAPHICS::LiteralFloat> LiteralFloats;
  unsigned int iFxlTechnique;
  unsigned int idxFxlTechniqueName;
  unsigned int iFxlPass;
  unsigned int idxFxlPassName;
  int bIsZPass;
};

/* 7987 */
union $A48CAC59B22EE36211529656F2DE1C4E
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::PDBShader *m_pData;
};

/* 7988 */
struct XGRAPHICS::FastVector<XGRAPHICS::PDBShader>
{
  $A48CAC59B22EE36211529656F2DE1C4E ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7989 */
struct XGRAPHICS::Define
{
  unsigned int Name;
  unsigned int Definition;
};

/* 7990 */
union $45B77623A51B553DE1BD8DB01F5FA894
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::Define *m_pData;
};

/* 7991 */
struct XGRAPHICS::FastVector<XGRAPHICS::Define>
{
  $45B77623A51B553DE1BD8DB01F5FA894 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7992 */
union $0212E522E39308C64449135C34092A32
{
  XGRAPHICS::FastVectorBase baseclass_0;
  char *m_pData;
};

/* 7993 */
struct XGRAPHICS::FastVector<char>
{
  $0212E522E39308C64449135C34092A32 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7994 */
struct XGRAPHICS::Argument
{
  char Name[32];
  char Value[8];
};

/* 7995 */
union $B88E7F9026616131BCFF25D1A5C368F4
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::Argument *m_pData;
};

/* 7996 */
struct XGRAPHICS::FastVector<XGRAPHICS::Argument>
{
  $B88E7F9026616131BCFF25D1A5C368F4 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 7997 */
struct XGRAPHICS::ShaderPDBBuilder
{
  IShaderPDBBuilder baseclass_0;
  XGRAPHICS::FastVector<XGRAPHICS::File> m_Files;
  XGRAPHICS::FastVector<XGRAPHICS::PDBShader> m_Shaders;
  XGRAPHICS::FastVector<XGRAPHICS::Statement> *m_pSourceMap;
  XGRAPHICS::FastVector<XGRAPHICS::Define> m_Defines;
  XGRAPHICS::FastVector<char> m_Strings;
  XGRAPHICS::FastVector<XGRAPHICS::Argument> m_Arguments;
  XGRAPHICS::FastVector<XGRAPHICS::VariableDebugInfo> *m_pVarDebugInfo;
  XGRAPHICS::FastVector<XGRAPHICS::VariableInfo> *m_pVarInfo;
  XGRAPHICS::FastVector<XGRAPHICS::VfetchInfo> *m_pVfetchInfo;
  XGRAPHICS::FastVector<XGRAPHICS::InterpolatorInfo> *m_pInterpolatorInfo;
  XGRAPHICS::FastVector<XGRAPHICS::LiteralBool> *m_pLiteralBools;
  XGRAPHICS::FastVector<XGRAPHICS::LiteralInt> *m_pLiteralInts;
  XGRAPHICS::FastVector<XGRAPHICS::LiteralFloat> *m_pLiteralFloats;
  D3DXShader::CCommentBlock *m_pVarDecls;
  XGRAPHICS::FastVector<XGRAPHICS::ScopeInfo> *m_pScopeInfo;
  XGRAPHICS::FastVector<XGRAPHICS::FuncEntryExitInfo> *m_pFuncEntryExitInfo;
  XGRAPHICS::FastVector<XGRAPHICS::FuncInfo> *m_pFuncInfo;
  XGRAPHICS::PDBShader *m_pCurShader;
  char *m_pCompilerType;
  unsigned int m_ReferenceCount;
  unsigned int m_Flags;
  HRESULT m_hr;
  XGRAPHICS::ShaderPDBBuilder::State m_Finished;
  int m_bInZPass;
  unsigned __int16 m_NumEndPassesCalled;
  unsigned __int16 m_NumBeginPassesCalled;
  XShaderPDBHint m_PDBHint;
};

/* 7998 */
union $9DD2BA57224B39AE4F04F14CABB94244
{
  XGRAPHICS::FastVectorBase baseclass_0;
  XGRAPHICS::FlowNode **m_pData;
};

/* 7999 */
struct XGRAPHICS::FastVector<XGRAPHICS::FlowNode *>
{
  $9DD2BA57224B39AE4F04F14CABB94244 ___u0;
  unsigned int m_Size;
  unsigned int m_Capacity;
};

/* 8000 */
struct XGRAPHICS::GMB_CSG_Context
{
  XGRAPHICS::FlowNode *pRootFlow;
  XGRAPHICS::FlowNode *pCurrentFlow;
  XGRAPHICS::ALUNode *pCurrentALU;
  XGRAPHICS::FastVector<XGRAPHICS::FlowNode *> AddressToFlowMap;
  XGRAPHICS::GraphMicrocodeBuilder *pThis;
};

/* 8001 */
struct XGRAPHICS::BitVector<96>
{
  unsigned int Data[3];
};

/* 8002 */
struct XGRAPHICS::_SR_SHADER_PAIR
{
  XGRAPHICS::_CS_COMPILED_SHADER *pCS_ps;
  XGRAPHICS::_CS_COMPILED_SHADER *pCS_vs;
};

/* 8003 */
struct XGRAPHICS::AS_ARRAY_STATE_TRL_ENTRY
{
  XGRAPHICS::_E_AS_ARRAY_STATE ArrayState;
  unsigned int Count;
};

/* 8004 */
struct XGRAPHICS::_R400_RS_BLK_A
{
  RB_SURFACE_INFO rb_surface_info;
  RB_COLOR0_INFO rb_color0_info;
  RB_DEPTH_INFO rb_depth_info;
  RB_COLOR1_INFO rb_color1_info;
  RB_COLOR2_INFO rb_color2_info;
  RB_COLOR3_INFO rb_color3_info;
  COHER_DEST_BASE_0 rb_coher_dest_base_0;
  COHER_DEST_BASE_1 rb_coher_dest_base_1;
  COHER_DEST_BASE_2 rb_coher_dest_base_2;
  COHER_DEST_BASE_3 rb_coher_dest_base_3;
  COHER_DEST_BASE_4 rb_coher_dest_base_4;
  COHER_DEST_BASE_5 rb_coher_dest_base_5;
  COHER_DEST_BASE_6 rb_coher_dest_base_6;
  COHER_DEST_BASE_7 rb_coher_dest_base_7;
  PA_SC_SCREEN_SCISSOR_TL pa_sc_src_scissor_tl;
  PA_SC_SCREEN_SCISSOR_BR pa_sc_src_scissor_br;
};

/* 8005 */
struct XGRAPHICS::_R400_RS_BLK_D
{
  SQ_PROGRAM_CNTL sq_program_cntl;
  SQ_CONTEXT_MISC sq_context_misc;
  SQ_INTERPOLATOR_CNTL sq_interpolator_cntl;
  SQ_WRAPPING_0 sq_wrapping_0;
  SQ_WRAPPING_1 sq_wrapping_1;
};

/* 8006 */
struct XGRAPHICS::_R400_RS_BLK_E
{
  RB_DEPTHCONTROL rb_depthcontrol;
  RB_BLENDCONTROL0 rb_blendcontrol0;
  RB_COLORCONTROL rb_colorcontrol;
  RB_TILECONTROL rb_tilecontrol;
  PA_CL_CLIP_CNTL pa_cl_clip_cntl;
  PA_SU_SC_MODE_CNTL pa_su_sc_mode_cntl;
  PA_CL_VTE_CNTL pa_cl_vte_cntl;
  unsigned int reserved_0;
  RB_MODECONTROL rb_modecontrol;
  RB_BLENDCONTROL1 rb_blendcontrol1;
  RB_BLENDCONTROL2 rb_blendcontrol2;
  RB_BLENDCONTROL3 rb_blendcontrol3;
};

/* 8007 */
struct XGRAPHICS::_R400_RS_BLK_F
{
  PA_SU_POINT_SIZE pa_su_point_size;
  PA_SU_POINT_MINMAX pa_su_point_minmax;
  PA_SU_LINE_CNTL pa_su_line_cntl;
  VGT_OUTPUT_PATH_CNTL vgt_output_path_cntl;
  VGT_HOS_CNTL vgt_hos_cntl;
  VGT_HOS_MAX_TESS_LEVEL vgt_hos_max_tess_level;
  VGT_HOS_MIN_TESS_LEVEL vgt_hos_min_tess_level;
  VGT_HOS_REUSE_DEPTH vgt_hos_reuse_depth;
  VGT_GROUP_PRIM_TYPE vgt_group_prim_type;
  VGT_GROUP_FIRST_DECR vgt_group_first_decr;
  VGT_GROUP_DECR vgt_group_decr;
  VGT_GROUP_VECT_0_CNTL vgt_group_vect_0_cntl;
  VGT_GROUP_VECT_1_CNTL vgt_group_vect_1_cntl;
  VGT_GROUP_VECT_0_FMT_CNTL vgt_group_vect_0_fmt_cntl;
  VGT_GROUP_VECT_1_FMT_CNTL vgt_group_vect_1_fmt_cntl;
  unsigned int reserved_0;
  unsigned int reserved_1;
  PA_SC_MPASS_PS_CNTL pa_sc_mpass_ps_cntl;
  PA_SC_VIZ_QUERY pa_sc_viz_query;
  VGT_ENHANCE vgt_enhance;
};

/* 8008 */
struct XGRAPHICS::_R400_RS_BLK_G
{
  PA_SC_LINE_CNTL pa_sc_line_cntl;
  PA_SC_AA_CONFIG pa_sc_aa_config;
  PA_SU_VTX_CNTL pa_su_vtx_cntl;
  PA_CL_GB_VERT_CLIP_ADJ pa_cl_gb_vert_clip_adj;
  PA_CL_GB_VERT_DISC_ADJ pa_cl_gb_vert_disc_adj;
  PA_CL_GB_HORZ_CLIP_ADJ pa_cl_gb_horz_clip_adj;
  PA_CL_GB_HORZ_DISC_ADJ pa_cl_gb_horz_disc_adj;
  SQ_VS_CONST sq_vs_const;
  SQ_PS_CONST sq_ps_const;
  SQ_DEBUG_MISC_0 sq_debug_misc_0;
  SQ_DEBUG_MISC_1 sq_debug_misc_1;
  unsigned int reserved_0;
  unsigned int reserved_1;
  unsigned int reserved_2;
  unsigned int reserved_3;
  unsigned int reserved_4;
  unsigned int reserved_5;
  unsigned int reserved_6;
  PA_SC_AA_MASK pa_sc_aa_mask;
  unsigned int reserved_7;
  unsigned int reserved_8;
  SQ_CF_PROGRAM_SIZE sq_cf_program_size;
  VGT_VERTEX_REUSE_BLOCK_CNTL vgt_vertex_reuse_block_cntl;
  VGT_OUT_DEALLOC_CNTL vgt_out_dealloc_cntl;
  RB_COPY_CONTROL rb_copy_control;
  RB_COPY_DEST_BASE rb_copy_dest_base;
  RB_COPY_DEST_PITCH rb_copy_dest_pitch;
  RB_COPY_DEST_INFO rb_copy_dest_info;
  RB_TILE_CLEAR rb_tile_clear;
  RB_DEPTH_CLEAR rb_depth_clear;
  RB_COLOR_CLEAR rb_color_clear;
  RB_COLOR_CLEAR_LO rb_color_clear_lo;
  RB_COPY_FUNC rb_copy_func;
  RB_COPY_REF rb_copy_ref;
  RB_COPY_MASK rb_copy_mask;
  RB_COPY_SURFACE_SLICE rb_copy_surface_slice;
  RB_SAMPLE_COUNT_CTL rb_fsample_count_ctl;
  RB_SAMPLE_COUNT_ADDR rb_fsample_count_addr;
};

/* 8009 */
struct XGRAPHICS::_R400_TXFORMAT_INFO
{
  SurfaceFormat NonFloatFmt;
  SurfaceFormat FloatFmt;
  unsigned int Bpp;
};

/* 8010 */
struct XGRAPHICS::_R400_CBFORMAT_INFO
{
  SurfaceFormat NonFloatFmt;
  SurfaceFormat FloatFmt;
  unsigned int numChannels;
};

/* 8011 */
struct XGRAPHICS::_XENOS_CBFORMAT_INFO
{
  ColorformatX NonFloatFmt;
  ColorformatX FloatFmt;
  ColorformatX GammaFmt;
  unsigned int numChannels;
};

/* 8012 */
struct XGRAPHICS::_SS_SHADER_STORE_ITEM
{
  unsigned int handle;
  void *ILProg;
  unsigned int ILProgLen;
  XGRAPHICS::_OBJECT_LIST *pCSList;
  unsigned int refCount;
};

/* 8013 */
union $AD8970DC7095EF5854D04210CAFDC368
{
  int i;
  float f;
};

/* 8014 */
struct XGRAPHICS::_SSM_SETTING_INFO
{
  unsigned int defaultValue;
  char *regKey;
};

/* 8015 */
struct D3DXShader::CompilerHeap::FreedMemory
{
  D3DXShader::CompilerHeap::FreedMemory *pNext;
};

/* 8016 */
struct D3DXShader::CompilerHeap::PhysicalMemoryChunk
{
  D3DXShader::CompilerHeap *pHeap;
  D3DXShader::CompilerHeap::PhysicalMemoryChunk *pNext;
};

/* 8017 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::Block>
{
  D3DXShader::Block **m_ppPrev;
  D3DXShader::Block *m_pNext;
};

/* 8018 */
struct D3DXShader::Block
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::Block> m_DFOListEntry;
  D3DXShader::ControlFlowEdge *m_pPred;
  D3DXShader::ControlFlowEdge *m_pSucc;
  D3DXShader::DoubleLinkList<D3DXShader::Instruction,32> m_Prologue;
  D3DXShader::DoubleLinkList<D3DXShader::Instruction,32> m_Body;
  D3DXShader::DoubleLinkList<D3DXShader::Instruction,32> m_Epilogue;
  D3DXShader::DynamicBitSet<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_Dominators;
  unsigned int m_VisitNumber;
  int _bf48;
  D3DXShader::Block *m_pDomParent;
  D3DXShader::Block *m_pDomChildren;
  D3DXShader::Block *m_pDomSibling;
  int _bf64;
  D3DXShader::Dependency *m_pConditionDep;
  int _bf72;
  $062FE77B8B6AAD9484DFE51332205CCB ___u15;
  $2744ED9BDD65BAC49BCDEF65A7322D93 ___u16;
  unsigned __int64 *m_rgLiveOutSet;
  D3DXShader::Instruction *m_rgSideEffects[4];
  D3DXShader::Block *m_pConditionRegisterControllingBlock;
  D3DXShader::Block *m_pPredicateRegisterControllingBlock;
};

/* 8019 */
struct D3DXShader::ControlFlowEdge
{
  D3DXShader::Block *pHead;
  D3DXShader::Block *pTail;
  D3DXShader::ControlFlowEdge *pNextHead;
  D3DXShader::ControlFlowEdge *pNextTail;
  unsigned int weight;
};

/* 8020 */
struct D3DXShader::Dependency
{
  int _bf0;
  D3DXShader::Dependency *m_pNextDependency;
  D3DXShader::Dependency *m_pNextDependent;
  D3DXShader::Instruction *m_pDef;
  D3DXShader::Instruction *m_pUse;
};

/* 8021 */
struct D3DXShader::Instruction
{
  D3DXShader::Dependency *m_pDependencies;
  D3DXShader::Dependency *m_pDependents;
  int _bf8;
  D3DXShader::Constraint *m_pConstraints;
  _BYTE gap10[4];
  int _bf20;
  D3DXShader::Block *m_pBlock;
  D3DXShader::Instruction *m_pWorkList;
  D3DXShader::DoubleLinkListEntry<D3DXShader::Instruction> m_ListEntry;
  D3DXShader::Dependency *m_rgOperands[];
};

/* 8022 */
struct D3DXShader::Constraint
{
  D3DXShader::ConstraintType type;
  D3DXShader::Constraint *pNext;
};

/* 8023 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::Instruction>
{
  D3DXShader::Instruction **m_ppPrev;
  D3DXShader::Instruction *m_pNext;
};

/* 8024 */
struct D3DXShader::DoubleLinkList<D3DXShader::Instruction,32>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::Instruction> m_Ring;
};

/* 8025 */
union $12504D4AD1774427FBF506329141CD8A
{
  unsigned int *m_rgBits;
  unsigned int m_Bits;
};

/* 8026 */
struct D3DXShader::DynamicBitSet<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  $12504D4AD1774427FBF506329141CD8A ___u0;
};

/* 8027 */
struct D3DXShader::Result
{
  $D021DB0FA776234227B59BBE2E38C452 ___u0;
  int _bf4;
};

/* 8028 */
struct D3DXShader::IndexedResult
{
  D3DXShader::Result indexValue;
  int _bf8;
  D3DXShader::Result rgElements[];
};

/* 8029 */
union $D021DB0FA776234227B59BBE2E38C452
{
  D3DXShader::Instruction *m_pInstruction;
  D3DXShader::Dependency *m_pDependency;
  D3DXShader::Result *m_pResult;
  D3DXShader::IndexedResult *m_pIndexedResult;
};

/* 8030 */
struct D3DXShader::FixedSizeBitSet<unsigned int,1>
{
  unsigned int m_rgBits[1];
};

/* 8031 */
union $062FE77B8B6AAD9484DFE51332205CCB
{
  D3DXShader::Block *m_pReplacement;
  D3DXShader::Result **m_rgVariableDefs;
  D3DXShader::Block *m_pTwin;
  unsigned __int64 *m_rgLiveAcrossSet;
};

/* 8032 */
union $2744ED9BDD65BAC49BCDEF65A7322D93
{
  D3DXShader::DynamicBitSet<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_DomFrontier;
  D3DXShader::FixedSizeBitSet<unsigned int,1> m_LoopMembership;
  unsigned __int64 *m_rgOrigLiveOutSet;
  unsigned __int64 *m_rgDefSet;
};

/* 8033 */
struct D3DXShader::DoubleLinkList<D3DXShader::Block,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::Block> m_Ring;
};

/* 8034 */
struct D3DXShader::VariableComponentInfo
{
  int _bf0;
};

/* 8035 */
struct D3DXShader::Function
{
  D3DXShader::CNodeDecl *pFuncDecl;
  D3DXShader::CNodeFunction *pFuncNode;
  D3DXShader::Function *pNext;
  D3DXShader::Block *pEntryBlock;
  D3DXShader::SubReturnBlockList ReturnBlockListHead;
  unsigned int iFunction;
};

/* 8036 */
struct D3DXShader::SubReturnBlockList
{
  D3DXShader::Block *pBlock;
  D3DXShader::SubReturnBlockList *pNext;
};

/* 8037 */
struct D3DXShader::Variable
{
  _BYTE gap0[8];
  int _bf8;
  D3DXShader::CNodeDecl *pDeclNode;
  D3DXShader::CNodeVariable *pVarNode;
  D3DXShader::CNode *pTypeNode;
  D3DXShader::Result *rgSources;
  D3DXShader::VariableComponentInfo *rgPerCompInfo;
  D3DXShader::Function *pDeclFunc;
  unsigned int iRegisterGroup;
};

/* 8038 */
union $FAE8A167581EE41DF0C0DFAC79F5CC7F
{
  unsigned int reg;
  D3DXShader::Instruction *pInput;
};

/* 8039 */
struct D3DXShader::LinkageSemantics
{
  const char *pszSemantic;
  int _bf4;
  $FAE8A167581EE41DF0C0DFAC79F5CC7F ___u2;
};

/* 8040 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8041 */
struct D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::Function *rgItems[10];
};

/* 8042 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8043 */
struct D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8044 */
struct D3DXShader::Stack<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8045 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8046 */
struct D3DXShader::AttributeState
{
  D3DXShader::AttributeType type;
  D3DXShader::CNodeAttribute *pAttrNode;
};

/* 8047 */
struct D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::AttributeState rgItems[10];
};

/* 8048 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8049 */
struct D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8050 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8051 */
struct D3DXShader::AttributeStateStackEntry
{
  D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *pAttributes;
  unsigned int isolationGroup;
  int _bf8;
};

/* 8052 */
struct D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::AttributeStateStackEntry rgItems[10];
};

/* 8053 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8054 */
struct D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8055 */
struct D3DXShader::Stack<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8056 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8057 */
struct D3DXShader::StackEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position
{
  void *rg[2];
};

/* 8058 */
struct D3DXShader::IsolateScope
{
  D3DXShader::StackEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position mark;
  D3DXShader::Block *pScopeExit;
};

/* 8059 */
struct D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::IsolateScope rgItems[10];
};

/* 8060 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8061 */
struct D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8062 */
struct D3DXShader::Stack<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8063 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8064 */
struct D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::CNode *rgItems[10];
};

/* 8065 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8066 */
struct D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8067 */
struct D3DXShader::Stack<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8068 */
struct D3DXShader::ParseStack
{
  D3DXShader::Stack<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_Stack;
};

/* 8069 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8070 */
struct D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::Block *rgItems[10];
};

/* 8071 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8072 */
struct D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8073 */
struct D3DXShader::Stack<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8074 */
struct D3DXShader::Loop
{
  D3DXShader::Block *pPreHeader;
  D3DXShader::Block *pHeader;
  D3DXShader::Block *pTail;
  D3DXShader::Block *pExit;
  D3DXShader::Block *pFooter;
  D3DXShader::Loop *pOuterLoop;
  D3DXShader::Loop *pFirstInnerLoop;
  D3DXShader::Loop *pSiblingLoop;
  int _bf32;
  D3DXShader::InductionVariable *rgIndVars;
  unsigned int maxbenefit;
  D3DXShader::InductionVariable *pIndex;
  D3DXShader::InductionVariable *pMaxIndVar;
  int _bf52;
};

/* 8075 */
struct D3DXShader::ArrayElementLoad
{
  unsigned int index;
  D3DXShader::Instruction *pCNDE;
  D3DXShader::ArrayElementLoad *pNext;
};

/* 8076 */
struct D3DXShader::ArrayLoad
{
  D3DXShader::ArrayElementLoad *pElementLoads;
  unsigned int nInstructions;
  D3DXShader::Dependency *pDefaultValue;
  __declspec(align(8)) int _bf16;
  D3DXShader::ArrayLoad *pNext;
};

/* 8077 */
struct D3DXShader::InductionVariable
{
  int _bf0;
  float startmin;
  float startmax;
  float testmin;
  float testmax;
  unsigned int maxiterations;
  float step;
  D3DXShader::Instruction *pHeaderPHI;
  D3DXShader::Instruction *pIncrement;
  D3DXShader::Instruction *pInvariantTest;
  D3DXShader::Instruction *pIntVarDef;
  D3DXShader::ArrayLoad *pArrayLoads;
  unsigned int nDependents;
  unsigned int nRemainingDependents;
  unsigned int benefit;
  unsigned int nPossibleArrayAccesses;
};

/* 8078 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8079 */
struct D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::Instruction *rgItems[10];
};

/* 8080 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8081 */
struct D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8082 */
struct D3DXShader::Stack<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8083 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8084 */
struct D3DXShader::PendingVectorizeEntry
{
  D3DXShader::Instruction *pInstr;
  unsigned int cost;
};

/* 8085 */
struct D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::PendingVectorizeEntry rgItems[10];
};

/* 8086 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8087 */
struct D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8088 */
struct D3DXShader::Stack<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8089 */
struct D3DXShader::Compiler
{
  D3DXShader::DoubleLinkList<D3DXShader::Block,0> m_BlockList;
  D3DXShader::CNodeProgram *m_pProgramNode;
  D3DXShader::Variable *m_rgVariables;
  unsigned int m_nVariables;
  D3DXShader::Function *m_pCurrentFunction;
  D3DXShader::CNodeFunction *m_pCurrentFuncNode;
  unsigned int m_CurrentBlockIsolationGroup;
  unsigned int m_NextIsolationGroup;
  unsigned int m_Flags;
  unsigned int m_Flags2;
  unsigned int m_ShaderVersion;
  unsigned int m_CompileFlags;
  _D3DXSHADER_COMPILE_PARAMETERSA *m_pCompileParameters;
  D3DXShader::Instruction *m_rgConstantHash[7];
  unsigned int m_nConstantInstrs;
  unsigned int m_nBlockBits;
  D3DXShader::Block **m_rgBlocks;
  D3DXShader::Instruction *m_pPHIList;
  D3DXShader::Instruction **m_ppPHIListTail;
  unsigned int m_NextBlockVisitNumber;
  unsigned int m_NextPHIVisitNumber;
  unsigned int m_LastCrossBlockDefIndex;
  D3DXShader::LinkageSemantics m_rgOutputSemantics[18];
  unsigned int m_nOutputSemantics;
  unsigned int m_nInterpolatorRegs;
  D3DXShader::LinkageSemantics m_rgInputSemantics[16];
  unsigned int m_nInputSemantics;
  D3DXShader::Instruction *m_pDeadCodeList;
  D3DXShader::TessellatorMode m_TessellatorMode;
  D3DXShader::Block *m_pCurrentBlock;
  D3DXShader::Function *m_FunctionList;
  D3DXShader::Stack<D3DXShader::Function *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pSubImportStack;
  D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pActiveAttributes;
  D3DXShader::Stack<D3DXShader::AttributeStateStackEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pAttrStack;
  D3DXShader::Stack<D3DXShader::IsolateScope,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pIsolateScopeStack;
  D3DXShader::ParseStack *m_pParseStack;
  D3DXShader::Stack<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pParseBlockStack;
  D3DXShader::Loop *m_rgLoops;
  unsigned int m_nLoops;
  D3DXShader::Stack<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pPendingStack;
  D3DXShader::Stack<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pPendingStack2;
  D3DXShader::Stack<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pNewGlobalDefsStack;
  unsigned int m_CostLimit;
  unsigned int m_nDefs;
  unsigned int m_nDefWords;
  D3DXShader::GeneralRegisterSet *m_rgDefRegIntf;
  unsigned __int64 **m_rgRenamedDefs;
  unsigned __int64 *m_rgDefDefIntf;
  D3DXShader::RegGroupInfo **m_rgDefGroup;
  unsigned __int64 *m_rgDefComponent;
  D3DXShader::RegGroupInfo *m_pGroups;
  unsigned int m_nGroups;
  D3DXShader::RegGroupInfo *m_pFreedGroups;
  D3DXShader::Instruction **m_rgDefs;
  D3DXShader::RegOptSolutionStep **m_rgFailedRegOptSolutionHash;
  unsigned int m_nFailedRegOptSolutions;
  D3DXShader::Instruction **m_rgGroupStartInstrs;
  unsigned int *m_rgRegOptGroupFailCounts;
  int *m_rgRegOptGroupStaticEffect;
  D3DXShader::InstructionMovementRange *m_rgInstructionMovementRanges;
  D3DXShader::VariableDebugInfo *m_rgVariableDebugInfo;
  unsigned int m_nVariableDebugInfo;
  D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pLexicalScopeDebugInfo;
  unsigned int m_NextLexicalScopeID;
  unsigned int m_CurrentLexicalScopeID;
  unsigned int *m_rgLexicalScopeMapping;
  D3DXShader::FunctionEntryExitDebugInfo *m_rgFunctionEntryExitDebugInfo;
  unsigned int m_nFunctionEntryExitDebugInfo;
  XMicrocodeBuilder *m_pBuilder;
  D3DXShader::CCompilerHeapCommentBlock *m_pCommentBlock;
  unsigned int m_nMaxExports;
  unsigned int m_nMaxTempRegs;
  unsigned int m_nTempRegTargetUsage;
  unsigned int m_SamplerRegisterBase;
  unsigned int m_SamplerRegisterCount;
  unsigned int m_MaxInstructionCount;
  D3DXShader::CompilerHeap m_FunctionHeap;
  D3DXShader::CompilerHeap m_PhaseHeap;
  __declspec(align(8)) SETJMP_VECTOR4 m_ErrorHandler[20];
  HRESULT m_ErrorCode;
  D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pErrorAssociations;
  void *m_pErrorContext;
  void (__cdecl *m_pErrorCallbackFunction)(void *, int, D3DXShader::CNode *, unsigned int, const char *);
};

/* 8090 */
struct D3DXShader::EmptyRegisterSet
{
  D3DXShader::Compiler *m_pCompiler;
};

/* 8091 */
struct D3DXShader::FixedSizeBitSet<unsigned __int64,4>
{
  unsigned __int64 m_rgBits[4];
};

/* 8092 */
struct D3DXShader::RegisterSet<D3DXShader::FixedSizeBitSet<unsigned __int64,4>,&D3DXShader::PrintTempRegister,64,4,&D3DXShader::ReportOutOfTempRegistersError>
{
  D3DXShader::EmptyRegisterSet baseclass_0;
  __declspec(align(8)) D3DXShader::FixedSizeBitSet<unsigned __int64,4> m_Regs;
};

/* 8093 */
struct D3DXShader::GeneralRegisterSet
{
  D3DXShader::RegisterSet<D3DXShader::FixedSizeBitSet<unsigned __int64,4>,&D3DXShader::PrintTempRegister,64,4,&D3DXShader::ReportOutOfTempRegistersError> baseclass_0;
};

/* 8094 */
struct __declspec(align(8)) D3DXShader::RegGroupInfo
{
  $A106B6A967AAF6EA2FB74E2EE99E3BF4 ___u0;
  unsigned __int64 *rgPerCompDefIntf[4];
  D3DXShader::GeneralRegisterSet rgPerCompRegIntf[4];
  int _bf192;
  unsigned int weight;
  D3DXShader::RegGroupInfo *pNext;
};

/* 8095 */
union $A106B6A967AAF6EA2FB74E2EE99E3BF4
{
  unsigned __int64 *rgPerCompMembers[4];
  D3DXShader::RegGroupInfo *pNextFreed;
};

/* 8096 */
struct D3DXShader::RegOptSolutionStep
{
  D3DXShader::RegOptSolutionStepState state;
  D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *pPending;
  unsigned int iPending;
  D3DXShader::Instruction *pInsertionPoint;
  D3DXShader::Instruction *pRollBackPoint;
  unsigned int iMaxReg;
  unsigned int hash;
  D3DXShader::RegOptSolutionStep *pNextFailedHashChain;
};

/* 8097 */
struct D3DXShader::InstructionMovementRange
{
  D3DXShader::Instruction *pFirstInstr;
  unsigned int begin;
  unsigned int end;
};

/* 8098 */
union $89520731B8C574F8D0B07A51873D7FCE
{
  D3DXShader::Instruction *pInstr;
  unsigned int address;
};

/* 8099 */
struct D3DXShader::VariableDebugInfo
{
  $89520731B8C574F8D0B07A51873D7FCE ___u0;
  __declspec(align(8)) int _bf8;
};

/* 8100 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8101 */
struct D3DXShader::LexicalScopeNestingInfo
{
  _BYTE gap0[4];
  int _bf4;
};

/* 8102 */
struct D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::LexicalScopeNestingInfo rgItems[10];
};

/* 8103 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8104 */
struct D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8105 */
struct D3DXShader::FunctionEntryExitDebugInfo
{
  $89520731B8C574F8D0B07A51873D7FCE ___u0;
  int _bf4;
  D3DXShader::Function *pFunc;
};

/* 8106 */
struct D3DXShader::CCompilerHeapCommentBlock
{
  D3DXShader::CCommentBlock baseclass_0;
};

/* 8107 */
struct D3DXShader::CompilerHeap
{
  D3DXShader::CompilerHeap::FreedMemory *m_rgFreedBuckets[33];
  D3DXShader::CompilerHeap::PhysicalMemoryChunk *m_pFirstChunk;
  D3DXShader::CompilerHeap::PhysicalMemoryChunk *m_pLastChunk;
  D3DXShader::CompilerHeap::PhysicalMemoryChunk *m_pCurrentChunk;
  void *m_pNextAlloc;
  D3DXShader::Compiler *m_pCompiler;
  D3DXShader::DoubleLinkList<D3DXShader::CompilerHeap::HeapAllocation,0> m_HeapAllocations;
};

/* 8108 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8109 */
struct D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  void *rgItems[10];
};

/* 8110 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8111 */
struct D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<void *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8112 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::CompilerHeap::HeapAllocation>
{
  D3DXShader::CompilerHeap::HeapAllocation **m_ppPrev;
  D3DXShader::CompilerHeap::HeapAllocation *m_pNext;
};

/* 8113 */
struct D3DXShader::CompilerHeap::HeapAllocation
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::CompilerHeap::HeapAllocation> list;
  unsigned int cb;
};

/* 8114 */
struct D3DXShader::DoubleLinkList<D3DXShader::CompilerHeap::HeapAllocation,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::CompilerHeap::HeapAllocation> m_Ring;
};

/* 8115 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8116 */
struct D3DXShader::ComponentTypeEnumerator::ContainerState
{
  D3DXShader::CNode *pNode;
  unsigned int nDimsRemaining;
  D3DXShader::CNode *pRegister;
  D3DXShader::CNode *pSemantic;
  D3DXShader::CNode *pAttributes;
};

/* 8117 */
struct D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::ComponentTypeEnumerator::ContainerState rgItems[10];
};

/* 8118 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8119 */
struct D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8120 */
struct D3DXShader::Stack<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8121 */
struct D3DXShader::ComponentTypeEnumerator
{
  D3DXShader::CNodeType *m_pType;
  unsigned int m_nComponentsRemaining;
  D3DXShader::CNode *m_pSemantic;
  D3DXShader::CNode *m_pRegister;
  D3DXShader::CNode *m_pAttributes;
  unsigned int m_iSemanticField;
  D3DXShader::Stack<D3DXShader::ComponentTypeEnumerator::ContainerState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_Stack;
};

/* 8122 */
union $96E8DE7EE343D2B268920B8EF5E946F1
{
  D3DXShader::Instruction *pInstr;
  D3DXShader::DoubleLinkList<D3DXShader::Instruction,32> *pList;
};

/* 8123 */
struct D3DXShader::Compiler::InstructionPlacementPoint
{
  $96E8DE7EE343D2B268920B8EF5E946F1 ___u0;
};

/* 8124 */
struct D3DXShader::InputSemantic
{
  const char *pszSemantic;
  __declspec(align(8)) int _bf8;
};

/* 8125 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8126 */
struct D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::Result rgItems[10];
};

/* 8127 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8128 */
struct D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8129 */
struct D3DXShader::Stack<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8130 */
struct D3DXShader::ResultStack
{
  D3DXShader::Stack<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_Stack;
};

/* 8131 */
struct D3DXShader::UnresolvedUAsmOptions
{
  D3DXShader::CNodeUAsmInstruction *pUAsmNode;
  unsigned int nOptions;
  D3DXShader::Dependency *rgOptionDeps[];
};

/* 8132 */
struct D3DXShader::Compiler::CommittedAttributeState
{
  unsigned int mask;
  unsigned int validMask;
  D3DXShader::CNodeAttribute *pUnrollAttribute;
  D3DXShader::Dependency *pDepUnrollCount;
};

/* 8133 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8134 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8135 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8136 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8137 */
struct D3DXShader::StackEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_ListEnum;
};

/* 8138 */
struct D3DXShader::ResultStackEnumerator
{
  D3DXShader::StackEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> baseclass_0;
};

/* 8139 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8140 */
struct D3DXShader::ProductTerm
{
  D3DXShader::Instruction *pDef;
  D3DXShader::Component comp;
  unsigned int mods;
};

/* 8141 */
struct D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::ProductTerm rgItems[10];
};

/* 8142 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8143 */
struct D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8144 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::F
{
  D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8145 */
struct D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::F list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *rgItems[10];
};

/* 8146 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeIn
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::F m_Ring;
};

/* 8147 */
struct D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeIn m_Arrays;
};

/* 8148 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8149 */
struct D3DXShader::UniqueProductTerm
{
  D3DXShader::ProductTerm *pTerm;
  unsigned int nSumTerms;
};

/* 8150 */
struct D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::UniqueProductTerm rgItems[10];
};

/* 8151 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8152 */
struct D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8153 */
struct D3DXShader::FixedSizeBitSet<unsigned __int64,1>
{
  unsigned __int64 m_rgBits[1];
};

/* 8154 */
struct D3DXShader::BitFieldSet<D3DXShader::FixedSizeBitSet<unsigned __int64,1>,unsigned __int64,unsigned int,4>
{
  D3DXShader::FixedSizeBitSet<unsigned __int64,1> m_Bits;
};

/* 8155 */
struct __declspec(align(8)) D3DXShader::RedundantComputationState
{
  D3DXShader::BitFieldSet<D3DXShader::FixedSizeBitSet<unsigned __int64,1>,unsigned __int64,unsigned int,4> shared;
  int _bf8;
};

/* 8156 */
struct D3DXShader::CombineInstructionsState
{
  D3DXShader::RedundantComputationState baseclass_0;
};

/* 8157 */
struct D3DXShader::CombineDependenciesState
{
  int _bf0;
  D3DXShader::Instruction *pExistingMERGE;
  D3DXShader::Instruction *pAddress;
};

/* 8158 */
struct D3DXShader::FixedStack<enum D3DXShader::Component,4>
{
  D3DXShader::Component m_rgItems[4];
  unsigned int m_nItems;
};

/* 8159 */
struct D3DXShader::AddChainEntry
{
  D3DXShader::Dependency *pDep;
  D3DXShader::Component comp;
};

/* 8160 */
struct D3DXShader::FixedStack<D3DXShader::AddChainEntry,8>
{
  D3DXShader::AddChainEntry m_rgItems[8];
  unsigned int m_nItems;
};

/* 8161 */
struct D3DXShader::FixedStack<D3DXShader::Instruction *,8>
{
  D3DXShader::Instruction *m_rgItems[8];
  unsigned int m_nItems;
};

/* 8162 */
#pragma pack(push, 4)
struct D3DXShader::AddChainInfo
{
  D3DXShader::Instruction *pCommonDef;
  unsigned int commonMods;
  D3DXShader::Instruction *pCommonAddress;
  D3DXShader::FixedStack<enum D3DXShader::Component,4> stackAddComps;
  D3DXShader::FixedStack<D3DXShader::AddChainEntry,8> stackChainEnds;
  D3DXShader::FixedStack<D3DXShader::Instruction *,8> stackAddDefs;
  int benefit;
  bool fDotProduct;
  bool fSumChainEnds;
};
#pragma pack(pop)

/* 8163 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8164 */
struct D3DXShader::CNDOperation
{
  D3DXShader::Instruction *pDef1;
  D3DXShader::Instruction *pDef2;
  int _bf8;
  D3DXShader::Instruction *rgPHIs[4];
};

/* 8165 */
struct D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::CNDOperation rgItems[10];
};

/* 8166 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8167 */
struct D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8168 */
struct D3DXShader::BitFieldSet<D3DXShader::FixedSizeBitSet<unsigned int,1>,unsigned int,unsigned int,4>
{
  D3DXShader::FixedSizeBitSet<unsigned int,1> m_Bits;
};

/* 8169 */
struct D3DXShader::BitFieldSet<D3DXShader::FixedSizeBitSet<unsigned int,1>,unsigned int,unsigned int,2>
{
  D3DXShader::FixedSizeBitSet<unsigned int,1> m_Bits;
};

/* 8170 */
union $41FE98578D29288FABD99D731AD67CAF
{
  D3DXShader::Block *pTarget;
  D3DXShader::Instruction *pTargetLabel;
};

/* 8171 */
union $296683C9BAB73A5EBD29C75E05F2B3CD
{
  unsigned int FixupAddress;
  D3DXShader::Dependency *pDepUnrollIterationCount;
};

/* 8172 */
struct D3DXShader::Instruction_ControlTransfer
{
  $41FE98578D29288FABD99D731AD67CAF ___u0;
  $296683C9BAB73A5EBD29C75E05F2B3CD ___u1;
  int _bf8;
};

/* 8173 */
struct D3DXShader::EmitState
{
  GPU_PROGRAMCONTROL *psqProgramCntl;
  GPU_CONTEXTMISC *psqContextMisc;
  D3DXShader::VariableDebugInfo *pNextVarDebugInfo;
  D3DXShader::FunctionEntryExitDebugInfo *pNextFuncEntryExitDebugInfo;
  XShaderPDBBuilder *pPDBBuilder;
};

/* 8174 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8175 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8176 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8177 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8178 */
struct D3DXShader::StackEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position
{
  void *rg[2];
};

/* 8179 */
struct D3DXShader::StackEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_ListEnum;
};

/* 8180 */
struct D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>::QueueEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>::QueueEntry> list;
  D3DXShader::Instruction *rgItems[10];
};

/* 8181 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>::QueueEntry>
{
  D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>::QueueEntry **m_ppPrev;
  D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>::QueueEntry *m_pNext;
};

/* 8182 */
struct D3DXShader::DoubleLinkList<D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>::QueueEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>::QueueEntry> m_Ring;
};

/* 8183 */
struct D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>
{
  D3DXShader::DoubleLinkList<D3DXShader::Queue<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext,10>::QueueEntry,0> m_Arrays;
  unsigned int m_iHead;
  unsigned int m_iTail;
};

/* 8184 */
struct D3DXShader::Register
{
  int _bf0;
};

/* 8185 */
struct D3DXShader::RegisterSet<D3DXShader::DynamicBitSet<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>,&D3DXShader::PrintVirtualRegister,64,4,&D3DXShader::ReportOutOfTempRegistersError>
{
  D3DXShader::EmptyRegisterSet baseclass_0;
  D3DXShader::DynamicBitSet<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_Regs;
};

/* 8186 */
struct D3DXShader::InfiniteLocalRegisterSet
{
  D3DXShader::RegisterSet<D3DXShader::DynamicBitSet<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>,&D3DXShader::PrintVirtualRegister,64,4,&D3DXShader::ReportOutOfTempRegistersError> m_Regs;
  D3DXShader::Instruction **m_rgRegOwners;
  unsigned int m_nRegOwners;
  unsigned int m_MaxRegIndex;
};

/* 8187 */
struct D3DXShader::Instruction_VARIABLE
{
  _BYTE gap0[4];
  int _bf4;
};

/* 8188 */
struct D3DXShader::Instruction_VFETCH
{
  GPUVERTEX_FETCH_INSTRUCTION encoding;
  int _bf12;
  D3DXShader::UnresolvedUAsmOptions *pOptions;
};

/* 8189 */
struct D3DXShader::Instruction_TFETCH
{
  GPUTEXTURE_FETCH_INSTRUCTION encoding;
  int _bf12;
  D3DXShader::UnresolvedUAsmOptions *pOptions;
};

/* 8190 */
struct D3DXShader::Instruction_PHI
{
  int _bf0;
  D3DXShader::Instruction *pNextPHI;
};

/* 8191 */
struct D3DXShader::Instruction_MISSING_DEF
{
  int _bf0;
};

/* 8192 */
struct D3DXShader::Instruction_LoopStart
{
  int count;
  int start;
  int step;
  int _bf12;
  D3DXShader::Instruction_ControlTransfer xfer;
};

/* 8193 */
struct D3DXShader::Instruction_LoopEnd
{
  D3DXShader::Instruction *pStart;
  D3DXShader::Instruction_ControlTransfer xfer;
};

/* 8194 */
struct D3DXShader::Instruction_ARRAY
{
  D3DXShader::Instruction *pNextArray;
  unsigned int nElements;
  D3DXShader::Dependency **rgElements;
};

/* 8195 */
struct D3DXShader::Instruction_ALLOC_EXPORT
{
  int _bf0;
};

/* 8196 */
struct D3DXShader::Instruction_SIDE_EFFECT
{
  int _bf0;
  D3DXShader::Function *pFunc;
};

/* 8197 */
struct D3DXShader::FoldResult
{
  D3DXShader::Instruction *pResult;
  int _bf4;
};

/* 8198 */
struct D3DXShader::VectorOperandEncoding
{
  int _bf0;
};

/* 8199 */
struct D3DXShader::SubEntryBlockInfo
{
  D3DXShader::Function *pFunction;
  int _bf4;
};

/* 8200 */
struct D3DXShader::ReadOnlyDependencyListHolder
{
  char dummy[1];
};

/* 8201 */
struct D3DXShader::ReadOnlyDependentListHolder
{
  char dummy[1];
};

/* 8202 */
struct D3DXShader::EditingDependenciesHolder
{
  char dummy[1];
};

/* 8203 */
#pragma pack(push, 4)
struct D3DXShader::DataFlowPredecessorEnumerator
{
  D3DXShader::Block *m_pBlock;
  D3DXShader::ControlFlowEdge *m_pNextEdge;
  D3DXShader::SubReturnBlockList *m_pNextReturnBlock;
  D3DXShader::ControlFlowEdge *m_pLastEdge;
  D3DXShader::Block *m_pEntryPoint;
  D3DXShader::Block *m_pCallSite;
  bool m_fIgnoreCallPreds;
  bool m_fIgnoreNextEdge;
};
#pragma pack(pop)

/* 8204 */
#pragma pack(push, 4)
struct D3DXShader::DomGraphBreadthFirstEnumerator
{
  D3DXShader::Block *m_pRoot;
  D3DXShader::Block *m_pNextNode;
  bool m_fEnumSiblings;
};
#pragma pack(pop)

/* 8205 */
struct D3DXShader::DomGraphDepthFirstEnumerator
{
  D3DXShader::Block *m_pRoot;
  D3DXShader::Block *m_pNextNode;
};

/* 8206 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8207 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8208 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8209 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8210 */
struct D3DXShader::StackEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::PendingVectorizeEntry,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_ListEnum;
};

/* 8211 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position
{
  D3DXShader::ArrayListEnumerator<D3DXShader::Instruction *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *pEntry;
  unsigned int iItem;
};

/* 8212 */
struct D3DXShader::_SpecialRegisterSet<D3DXShader::EmptyRegisterSet>
{
  D3DXShader::EmptyRegisterSet baseclass_0;
  D3DXShader::Instruction *m_rgSpecialRegOwners[8];
};

/* 8213 */
struct D3DXShader::MachineState
{
  D3DXShader::_SpecialRegisterSet<D3DXShader::EmptyRegisterSet> m_SpecialRegs;
  D3DXShader::InstructionUnitType m_CurrentUnit;
  D3DXShader::Compiler *m_pCompiler;
  unsigned int m_SpecialRegsWritten;
};

/* 8214 */
struct D3DXShader::Scheduler
{
  D3DXShader::Instruction *m_pQueueHead;
  D3DXShader::MachineState m_State;
  D3DXShader::Compiler *m_pCompiler;
};

/* 8215 */
struct D3DXShader::ScheduledBundleEnumerator
{
  D3DXShader::Instruction *m_pCurrentBundleStart;
  D3DXShader::MachineState m_State;
};

/* 8216 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8217 */
struct D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  unsigned int rgItems[10];
};

/* 8218 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8219 */
struct D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8220 */
struct D3DXShader::Stack<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<unsigned int,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8221 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8222 */
struct D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::RegOptSolutionStep *rgItems[10];
};

/* 8223 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8224 */
struct D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8225 */
struct D3DXShader::Stack<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::RegOptSolutionStep *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8226 */
#pragma pack(push, 2)
struct D3DXShader::RegOptSimulator
{
  D3DXShader::DoubleLinkList<D3DXShader::Instruction,32> *m_pList;
  D3DXShader::MachineState m_state;
  D3DXShader::InfiniteLocalRegisterSet *m_pRegs;
  D3DXShader::Instruction *m_pInsertionPoint;
  unsigned int m_iPeakReg;
  D3DXShader::Block *m_pBlock;
  bool m_fMustReassign;
  bool m_fCantPlaceInstructions;
  bool m_fRestoringInstructions;
};
#pragma pack(pop)

/* 8227 */
struct D3DXShader::SimplifyMULState
{
  D3DXShader::Instruction *pRemDef;
  D3DXShader::Component remComp;
  unsigned int remMods;
  D3DXShader::Instruction *pOtherMUL;
  D3DXShader::Component otherComp;
};

/* 8228 */
struct D3DXShader::Constraint_ArrayLength
{
  D3DXShader::Constraint baseclass_0;
  int _bf8;
};

/* 8229 */
struct D3DXShader::FixedSizeBitSet<unsigned __int64,16>
{
  unsigned __int64 m_rgBits[16];
};

/* 8230 */
struct D3DXShader::RegisterSet<D3DXShader::FixedSizeBitSet<unsigned __int64,16>,&D3DXShader::PrintConstantRegister,256,4,&D3DXShader::ReportOutOfConstantRegistersError>
{
  D3DXShader::EmptyRegisterSet baseclass_0;
  __declspec(align(8)) D3DXShader::FixedSizeBitSet<unsigned __int64,16> m_Regs;
};

/* 8231 */
struct D3DXShader::_SpecialRegisterSet<D3DXShader::GeneralRegisterSet>
{
  D3DXShader::GeneralRegisterSet baseclass_0;
  D3DXShader::Instruction *m_rgSpecialRegOwners[8];
};

/* 8232 */
struct D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> list;
  unsigned int nItems;
  unsigned int nItemsAlloc;
  D3DXShader::Dependency *rgItems[10];
};

/* 8233 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8234 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8235 */
struct D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> m_Arrays;
};

/* 8236 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8237 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8238 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8239 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::CNDOperation,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8240 */
struct D3DXShader::Constraint_ResultBounds
{
  D3DXShader::Constraint baseclass_0;
  float rgMin[4];
  float rgMax[4];
};

/* 8241 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8242 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8243 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8244 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8245 */
struct D3DXShader::StackEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::Block *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_ListEnum;
};

/* 8246 */
struct D3DXShader::Stack<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayList<D3DXShader::Dependency *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_List;
};

/* 8247 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8248 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8249 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8250 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position
{
  D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *pEntry;
  unsigned int iItem;
};

/* 8251 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8252 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayLi
{
  D3DXShader::ArrayList<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8253 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::Compi
{
  D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayLi **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayLi *m_pNext;
};

/* 8254 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHe
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::Compi m_Ring;
};

/* 8255 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Positio
{
  D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayLi *pEntry;
  unsigned int iItem;
};

/* 8256 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHe *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::ArrayList<D3DXShader::ProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayLi *m_pEntry;
  unsigned int m_iItem;
};

/* 8257 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8258 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8259 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8260 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::UniqueProductTerm,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8261 */
struct D3DXShader::Compiler::PrepareTessellatorInputs::__l11::PossibleModeInfo
{
  __int16 _bf0;
};

/* 8262 */
struct D3DXShader::Compiler::PrepareTessellatorInputs::__l24::ModeInfo
{
  int _bf0;
};

/* 8263 */
struct D3DXShader::CompileToMicrocodeErrorCallbackAdapterState
{
  void *context;
  void (__cdecl *pErrorCallbackFunction)(void *, int, unsigned int, const char *);
};

/* 8264 */
struct D3DXShader::ExportSemantic
{
  const char *pszSemantic;
  int _bf4;
};

/* 8265 */
struct D3DXShader::BitFieldSet<D3DXShader::FixedSizeBitSet<unsigned int,1>,unsigned int,unsigned int,3>
{
  D3DXShader::FixedSizeBitSet<unsigned int,1> m_Bits;
};

/* 8266 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8267 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8268 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8269 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8270 */
struct D3DXShader::StackEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> m_ListEnum;
};

/* 8271 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8272 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8273 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8274 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position
{
  D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *pEntry;
  unsigned int iItem;
};

/* 8275 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::AttributeState,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8276 */
struct D3DXShader::StackEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position
{
  void *rg[2];
};

/* 8277 */
struct D3DXShader::CNodeListWalker
{
  D3DXShader::Compiler *m_pCompiler;
  D3DXShader::Stack<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext> *m_pStack;
};

/* 8278 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position
{
  D3DXShader::ArrayListEnumerator<D3DXShader::CNode *,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *pEntry;
  unsigned int iItem;
};

/* 8279 */
struct D3DXShader::MatrixAccessor
{
  D3DXShader::ResultStackEnumerator *m_pEnum;
  unsigned int m_nRows;
  unsigned int m_nCols;
};

/* 8280 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::Position
{
  D3DXShader::ArrayListEnumerator<D3DXShader::Result,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *pEntry;
  unsigned int iItem;
};

/* 8281 */
struct D3DXShader::Compiler::ImportProgram::__l25::CBufferNameList
{
  D3DXShader::CNodeToken *pToken;
  D3DXShader::Compiler::ImportProgram::__l25::CBufferNameList *pNext;
};

/* 8282 */
struct D3DXShader::CopyCost
{
  unsigned int iInput;
  unsigned int cost;
};

/* 8283 */
struct D3DXShader::FinalSchedulingSimulator
{
  D3DXShader::MachineState m_state;
  D3DXShader::_SpecialRegisterSet<D3DXShader::GeneralRegisterSet> *m_pRegs;
};

/* 8284 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry
{
  D3DXShader::ArrayList<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry baseclass_0;
};

/* 8285 */
struct D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry>
{
  D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry **m_ppPrev;
  D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pNext;
};

/* 8286 */
struct D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0>
{
  D3DXShader::DoubleLinkListEntry<D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry> m_Ring;
};

/* 8287 */
struct D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>
{
  D3DXShader::DoubleLinkList<D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry,0> *m_pArrays;
  D3DXShader::ArrayListEnumerator<D3DXShader::LexicalScopeNestingInfo,&D3DXShader::CompilerHeap::AllocInContext,&D3DXShader::CompilerHeap::FreeInContext>::ArrayListEntry *m_pEntry;
  unsigned int m_iItem;
};

/* 8288 */
struct D3DXShader::Compiler::EmitShader::__l66::ConvertBooleanExecBlockList
{
  unsigned int address;
  D3DXShader::Instruction *pInstr;
  D3DXShader::Compiler::EmitShader::__l66::ConvertBooleanExecBlockList *pNext;
};

/* 8289 */
struct D3DXShader::RegisterSet<D3DXShader::FixedSizeBitSet<unsigned int,1>,&D3DXShader::PrintSamplerRegister,32,1,&D3DXShader::ReportOutOfSamplerRegistersError>
{
  D3DXShader::EmptyRegisterSet baseclass_0;
  D3DXShader::FixedSizeBitSet<unsigned int,1> m_Regs;
};

/* 8290 */
struct D3DXShader::RegisterSet<D3DXShader::FixedSizeBitSet<unsigned __int64,4>,&D3DXShader::PrintConditionRegister,256,1,&D3DXShader::ReportOutOfBooleanRegistersError>
{
  D3DXShader::EmptyRegisterSet baseclass_0;
  __declspec(align(8)) D3DXShader::FixedSizeBitSet<unsigned __int64,4> m_Regs;
};

/* 8291 */
struct D3DXShader::RegisterSet<D3DXShader::FixedSizeBitSet<unsigned int,1>,&D3DXShader::PrintIntegerRegister,32,1,&D3DXShader::ReportOutOfIntegerRegistersError>
{
  D3DXShader::EmptyRegisterSet baseclass_0;
  D3DXShader::FixedSizeBitSet<unsigned int,1> m_Regs;
};

/* 8292 */
struct D3DXShader::BitFieldSet<D3DXShader::FixedSizeBitSet<unsigned int,1>,unsigned int,unsigned int,5>
{
  D3DXShader::FixedSizeBitSet<unsigned int,1> m_Bits;
};

/* 8293 */
struct D3DXShader::SolutionState
{
  int _bf0;
};

/* 8294 */
struct D3DXShader::FixedStack<D3DXShader::SolutionState,24>
{
  D3DXShader::SolutionState m_rgItems[24];
  unsigned int m_nItems;
};

/* 8295 */
struct XGRAPHICS::EnumStringTableEntry
{
  unsigned int Value;
  const char *strName;
};

/* 8296 */
#pragma pack(push, 4)
struct XGRAPHICS::ProgramControlFieldUI
{
  const char *name;
  int showVertexShader;
  int showPixelShader;
  int isUserSetable;
  int isZPass;
  char field;
};
#pragma pack(pop)

/* 8297 */
struct XGRAPHICS::MyClientDevice
{
  void *pErrorCallbackContext;
  void (__cdecl *pErrorCallbackFunction)(void *, int, unsigned int, const char *);
  unsigned int valueUseTranslator;
};

/* 8298 */
struct XGRAPHICS::ConstantTableBitVector
{
  unsigned int usedConstants[8];
};

/* 8299 */
#pragma pack(push, 4)
struct XGRAPHICS::ConstantRenumberingTable
{
  bool m_RanOutOfConstants;
  unsigned int m_dwCompilerConstantCount;
  XGRAPHICS::ConstantTableBitVector m_compilerConstants;
  XGRAPHICS::ConstantTableBitVector m_literalConstants;
  char m_Remapping[256];
  char m_CCRegister[256];
  float m_CompilerConstantValues[256][4];
  int m_SearchStart;
};
#pragma pack(pop)

/* 8300 */
struct XGRAPHICS::SamplerDimensionTable
{
  char Dimension[32];
};

/* 8301 */
struct XGRAPHICS::CopyMicrocodeContext
{
  unsigned int m_dwFirstALUAddress;
  unsigned int m_dwLastSeenAddress;
  _UCODE_VSINPUTDECLARATION *m_pVSInputDeclarationBase;
  GPU_PROGRAMCONTROL m_ProgramCntl;
  GPU_CONTEXTMISC m_ContextMisc;
  XMicrocodeBuilder *m_pBuilder;
  XGRAPHICS::SamplerDimensionTable *m_pDimensionTable;
};

/* 8302 */
struct BitVector<256>
{
  unsigned int Data[8];
};

/* 8303 */
struct BitVector<32>
{
  unsigned int Data[1];
};

/* 8304 */
#pragma pack(push, 8)
struct XGRAPHICS::FixSerializationContext
{
  __int64 m_OutstandingFetchRegisters;
  XMicrocodeBuilder *m_pBuilder;
};
#pragma pack(pop)

/* 8305 */
struct XGRAPHICS::R500ShaderConstantValueCallbackContext
{
  unsigned int dwVSInputDeclarationCount;
  _UCODE_VSINPUTDECLARATION *pVSInputDeclaration;
};

/* 8306 */
#pragma pack(push, 4)
struct XGRAPHICS::R500ValidatorOutputCallbackContext
{
  void *m_pErrorCallbackContext;
  void (__cdecl *m_pErrorCallbackFunction)(void *, int, unsigned int, const char *);
  unsigned __int16 m_lineLength;
  int m_bError;
  char m_lineBuf[512];
};
#pragma pack(pop)

/* 8307 */
struct XGRAPHICS::DumpDefinitionTable_EnumerateLiterals_Context
{
  XGRAPHICS::OutStream *pOut;
  UCODESHADERTYPE shaderType;
  unsigned int passIndex;
};

/* 8308 */
struct XGRAPHICS::Vector<void *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8309 */
struct XGRAPHICS::Vector<XGRAPHICS::KeyValuePair *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8310 */
#pragma pack(push, 4)
struct XGRAPHICS::DepEdge
{
  XGRAPHICS::SchedNode *p;
  XGRAPHICS::SchedNode *s;
  XGRAPHICS::DepType type;
  int dist;
  bool yield;
};
#pragma pack(pop)

/* 8311 */
struct XGRAPHICS::AdjacencyList
{
  int nodes[7];
  XGRAPHICS::AdjacencyList *next;
};

/* 8312 */
struct XGRAPHICS::Range
{
  int id;
  int degree;
  XGRAPHICS::AdjacencyList *neighbors;
  int temp_degree;
  XGRAPHICS::Vector<XGRAPHICS::Range *> *preferences;
};

/* 8313 */
struct XGRAPHICS::TNode
{
  int left;
  int right;
  int size;
  int suffix_number;
  XGRAPHICS::TNode *sibling;
  XGRAPHICS::TNode *child;
  XGRAPHICS::TNode *left_leaf;
  XGRAPHICS::TNode *right_leaf;
  XGRAPHICS::TNode *suffix_link;
};

/* 8314 */
struct XGRAPHICS::Reference
{
  XGRAPHICS::TNode *active_node;
  int left;
  int right;
  XGRAPHICS::Compiler *context;
};

/* 8315 */
struct XGRAPHICS::Vector<XGRAPHICS::TNode *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8316 */
struct XGRAPHICS::stack<XGRAPHICS::TNode *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8317 */
struct XGRAPHICS::CompressData
{
  int original_offset;
  int props;
};

/* 8318 */
struct XGRAPHICS::HashTableIterator<XGRAPHICS::VRegInfo *>
{
  XGRAPHICS::InternalHashTableIterator baseclass_0;
  XGRAPHICS::VRegInfo *current;
};

/* 8319 */
struct XGRAPHICS::Vector<XGRAPHICS::konst *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8320 */
union XGRAPHICS::compare_floats::__l2::blah
{
  float f;
  void *l;
};

/* 8321 */
struct XGRAPHICS::HashTable<XGRAPHICS::CurrentValue *>
{
  XGRAPHICS::InternalHashTable baseclass_0;
};

/* 8322 */
struct XGRAPHICS::stack<XGRAPHICS::Block *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8323 */
struct XGRAPHICS::Vector<XGRAPHICS::HashTable<XGRAPHICS::CurrentValue *> *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8324 */
#pragma pack(push, 4)
struct XGRAPHICS::COND_DIR
{
  bool known;
  float value;
  XGRAPHICS::Block *cur_block;
};
#pragma pack(pop)

/* 8325 */
struct XGRAPHICS::stack<XGRAPHICS::IfHeader *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8326 */
struct XGRAPHICS::stack<XGRAPHICS::COND_DIR *>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8327 */
struct XGRAPHICS::stack<unsigned int>
{
  XGRAPHICS::InternalVector baseclass_0;
};

/* 8328 */
struct XGRAPHICS::VFetchGroup
{
  unsigned int stream_num;
  R400Tables::RegType src_type;
  XGRAPHICS::SwizzleOrMaskInfo src_swz;
  XGRAPHICS::IRVertexFetch *next_leader;
  int num_members;
  int dword_base;
  int dword_limit;
  XGRAPHICS::IRVertexFetch *cur_leader;
  XGRAPHICS::IRProjection *leader_proj;
  int leader_offset;
  int leader_count;
  XGRAPHICS::VFetchGroup *next;
};

/* 8329 */
struct XGRAPHICS::VFetchGroupMap
{
  XGRAPHICS::VFetchGroup *group;
  XGRAPHICS::IRVertexFetch *member;
  int offset;
  int num_dwords;
  XGRAPHICS::VFetchGroupMap *next;
};

/* 8330 */
struct tagAUG05FINAL_D3DTexture
{
  unsigned int Common;
  unsigned int Fence;
  unsigned int BaseFlush;
  unsigned int MipFlush;
  GPUTEXTURE_FETCH_CONSTANT Format;
};

/* 8331 */
struct XML_ELEMENT
{
  XML_ELEMENT_DEFINITION *pElementDefinition;
  void *pvUserData;
  unsigned int dwSubElementIndex;
  $6368AA44E7784BD47A1E59E4F5E86056 ___u3;
};

/* 8332 */
const struct XML_ATTRIBUTE
{
  char *strName;
  unsigned int NameLen;
  char *strValue;
  unsigned int ValueLen;
};

/* 8333 */
const struct XML_ELEMENT_DEFINITION
{
  const char *pszName;
  unsigned int dwNameLength;
  HRESULT (__cdecl *pfnElementBeginCallback)(void *, XML_ELEMENT *, unsigned int, XML_ATTRIBUTE *, unsigned int);
  HRESULT (__cdecl *pfnElementEndCallback)(void *, XML_ELEMENT *, unsigned int);
  HRESULT (__cdecl *pfnElementDataCallback)(void *, XML_ELEMENT *, unsigned int, const char *, unsigned int);
  unsigned int dwNumSubElementDefinitions;
  XML_ELEMENT_DEFINITION *const *papSubElementDefinitions;
  unsigned int dwDataElementIndex;
  unsigned int dwMaxExpectedDataSize;
};

/* 8334 */
struct XML_SUBELEMENT_DATA
{
  int abSeenItems[16];
};

/* 8335 */
union $6368AA44E7784BD47A1E59E4F5E86056
{
  XML_SUBELEMENT_DATA SubElementData;
  char szName[64];
};

/* 8336 */
struct $1954EECC2BA650A61BA4A15AE7866801
{
  XHVENGINE *XHVEngine;
  PACKET_PROCESSOR *InputPackets;
  PACKET_PROCESSOR *Outputs[2];
  int Running[2];
  CODEC_TYPE *CodecType;
};

/* 8337 */
union $84E1E773981C1B307F3B9E272D8339DD
{
  CODEC_PROCESSOR CodecProcessor;
  $1954EECC2BA650A61BA4A15AE7866801 _s1;
};

/* 8338 */
struct __declspec(align(16)) NCIENCODER_EXTENSION
{
  $84E1E773981C1B307F3B9E272D8339DD ___u0;
  NCI_CODEC_IO_BLOCK CodecIO;
  void *Encoder;
  __declspec(align(16)) char InputFrame[320];
  char OutputFrame[9];
  __declspec(align(8)) XHVRESAMPLER Resampler;
};

/* 8339 */
struct __declspec(align(16)) NCIDECODER_EXTENSION
{
  $84E1E773981C1B307F3B9E272D8339DD ___u0;
  NCI_CODEC_IO_BLOCK CodecIO;
  void *Decoder;
  __declspec(align(16)) char OutputFrame[640];
  char InputFrame[9];
  __declspec(align(8)) XHVRESAMPLER Resampler;
};

/* 8340 */
union UnionFltInt
{
  float f;
  int l;
};

/* 8341 */
union dt
{
  float f;
  int l;
};

/* 8342 */
#pragma pack(push, 4)
struct C_BUFFER_TYPE
{
  char *pBuffer;
  unsigned __int16 wBufferSize;
  unsigned __int16 *pBufferReadByteOffset;
  char *pBufferReadBitOffset;
  unsigned __int16 *pBufferWriteByteOffset;
  char *pBufferWriteBitOffset;
};
#pragma pack(pop)

/* 8343 */
struct SUBFRAME_PARAM_SC
{
  float Pitch;
  float Pv;
};

/* 8344 */
struct PARAM_SC
{
  SUBFRAME_PARAM_SC SubParam[2];
  float fLog2Gain;
  float pfASK[12];
};

/* 8345 */
#pragma pack(push, 4)
struct tagDecode_mblk
{
  void *hHFRegenMblk;
  float *pMemoryBlock;
  float *overlap;
  float *pfEnv_1;
  float *pfPhase_1;
  float *pfMinPhase;
  float *pfLogAmps;
  float fXenonPreSaturationScaleFactor;
  float fXenonSaturationValue;
  float Pitch_1_mid;
  float fTFactor;
  float fPitchWarp;
  float fPitchOffset;
  float fSpectrumWarp;
  __int16 wSpectrumOffset;
  __int16 wSpectrumLedge;
  float fRoboSquash;
  float fPvScaleFactor;
  float fGain;
  float fActualWarp;
  float fSynTimeOffset;
  float fPhaseOffset;
  int dwVoiceProp;
  void *hVoiceProperties;
  __int16 iNewFrame;
  __int16 iSilenceInjectionMode;
  __int16 sSilenceNoiseLevel;
  int lSilenceNoiseSeed;
  int lUVPhaseRandSeed;
  SUBFRAME_PARAM_SC PrevSubParam;
};
#pragma pack(pop)

/* 8346 */
#pragma pack(push, 4)
struct tagNciCodecBlock
{
  unsigned int dwNciChunkID;
  unsigned int dwCodecClassID;
  unsigned int dwCodecID;
  char chEncOrDec;
  void *hCodecMblk;
  void *pQuanMemBlk;
  void *pnemMemBlk;
  void *pNciCodecIOBlock;
  void *pScratchBlk;
  void *pVU0MicroCodeStore;
  void *pVU0MicroMemStore;
};
#pragma pack(pop)

/* 8347 */
struct RS2StageVQ_MBlk
{
  const int iStage1Size;
  const float *pfStage1CB;
  const float *pfRotScaleCB;
  const int iStage2Size;
  const float *pfStage2InCellCB;
  const float *pfStage2OutCellCB;
  const int iNumOfOutCell;
  const int *piIndexOfStage2OutCell;
};

/* 8348 */
struct VQ2_MBlk
{
  const int iCodebookSize;
  const float *fCodeBook;
};

/* 8349 */
struct HFRegenStruct
{
  float fOnsetPhase_1;
  float fBeta_1;
  float fPitchDFT_1;
};

/* 8350 */
union UnionFltLng
{
  float f;
  int l;
};

/* 8351 */
struct ENC_MEM_BLK
{
  void *CircBuf_mblk;
  void *PreProc_mblk;
  float fVoicing_km1;
  void *pParamMblk;
  void *LDPDA_mblk;
  void *VocalFry_mblk;
  void *Onset_mblk;
  float lastCorrCost;
  int iSCRateValid;
  int iSCRate_1;
  int iSCTargetRate;
  float frameEnergy;
  float uq_Pv_1;
  float uq_Pitch_1;
  float Pv_1;
  float Pitch_1;
  void *pNemMem;
  int dwVFid;
  void *pVFontMblk;
  void *pvVadAgcMblk;
  void *postEnc;
  void *nemKeyPostPack;
};

/* 8352 */
struct VocalFry_mblk
{
  float averagePitch;
  float confident;
  float *averageCepstrum;
};

/* 8353 */
#pragma pack(push, 4)
struct VFNT_VOICEFONT_BLOCK
{
  unsigned __int16 wFontID;
  unsigned int dwChecksum;
  unsigned int dwVFVersion;
  float fPvFactor;
  float fPitchScale;
  float fFoSquash;
  float fPitchOffset;
  __int16 wSpectrumOffset;
  float fSpectrumWarp;
  __int16 wSpectralLedge;
};
#pragma pack(pop)

/* 8354 */
struct ONSET_Mblk
{
  float saveAC0[4];
  float saveAC1[4];
  float sumAC0;
  float sumAC1;
  int ptr0;
  int Onset_1;
};

/* 8355 */
union $DB7D43404702E29D075EC1F807666590
{
  float f;
  int l;
};

/* 8356 */
struct tagSP_CIRC_BUF
{
  int iLength;
  int iIndex;
  float fData[371];
};

/* 8357 */
#pragma pack(push, 2)
struct tagNEM_AGC_VAD_BLK
{
  void *pCodecBlk;
  void *pVadBlk;
  void *pAgcBlk;
  float frameEng;
  float pv;
  __int16 wAGControl;
  __int16 wTargetGain;
  unsigned __int16 UserTrigLevel;
  unsigned __int16 TrigMiliSecond;
  unsigned __int16 voicing;
  char wAgcSwitch;
};
#pragma pack(pop)

/* 8358 */
#pragma pack(push, 4)
struct NellyAGC_mblk
{
  float *Count;
  float meanEngLevel;
  __int16 update_state;
};
#pragma pack(pop)

/* 8359 */
#pragma pack(push, 4)
struct NellyVAD_mblk
{
  float noise_flr;
  float threshold;
  float frame_per_msec;
  __int16 userTrigLevel;
  __int16 onset_cnt;
  __int16 hangover_cnt;
  char init;
  char blk_voicing;
  char spkr_voicing;
  char transmit_voicing;
};
#pragma pack(pop)

/* 8360 */
struct GfxDelayedCmdBuf
{
  int primDrawSurfPos;
  unsigned int primDrawSurfSize;
  GfxDrawSurf drawSurfKey;
};

/* 8361 */
struct GfxDrawSurfList
{
  GfxDrawSurf *current;
  GfxDrawSurf *end;
};

/* 8362 */
struct GfxBspDrawSurfData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurfList;
};

/* 8363 */
struct GfxVisibleLight
{
  int drawSurfCount;
  __declspec(align(8)) GfxDrawSurf drawSurfs[1024];
};

/* 8364 */
struct GfxShadowCookie
{
  DpvsPlane planes[5];
  volatile int drawSurfCount;
  GfxDrawSurf drawSurfs[256];
};

/* 8365 */
#pragma pack(push, 4)
struct GfxSceneModel
{
  XModelDrawInfo info;
  XModel *model;
  DObj_s *obj;
  GfxScaledPlacement placement;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 entnum;
  float radius;
  unsigned __int16 *cachedLightingHandle;
  float lightingOrigin[3];
  char reflectionProbeIndex;
};
#pragma pack(pop)

/* 8366 */
#pragma pack(push, 4)
struct GfxSceneBrush
{
  BModelDrawInfo info;
  unsigned __int16 entnum;
  GfxBrushModel *bmodel;
  GfxPlacement placement;
  char reflectionProbeIndex;
};
#pragma pack(pop)

/* 8367 */
struct __declspec(align(64)) GfxScene
{
  GfxDrawSurf bspDrawSurfs[8192];
  GfxDrawSurf smodelDrawSurfsLight[8192];
  GfxDrawSurf entDrawSurfsLight[8192];
  GfxDrawSurf bspDrawSurfsDecal[512];
  GfxDrawSurf smodelDrawSurfsDecal[512];
  GfxDrawSurf entDrawSurfsDecal[512];
  GfxDrawSurf bspDrawSurfsEmissive[8192];
  GfxDrawSurf smodelDrawSurfsEmissive[8192];
  GfxDrawSurf entDrawSurfsEmissive[8192];
  GfxDrawSurf fxDrawSurfsEmissive[8192];
  GfxDrawSurf fxDrawSurfsEmissiveAuto[8192];
  GfxDrawSurf fxDrawSurfsEmissiveDecal[8192];
  GfxDrawSurf bspSunShadowDrawSurfs0[4096];
  GfxDrawSurf smodelSunShadowDrawSurfs0[4096];
  GfxDrawSurf entSunShadowDrawSurfs0[4096];
  GfxDrawSurf bspSunShadowDrawSurfs1[8192];
  GfxDrawSurf smodelSunShadowDrawSurfs1[8192];
  GfxDrawSurf entSunShadowDrawSurfs1[8192];
  GfxDrawSurf bspSpotShadowDrawSurfs0[256];
  GfxDrawSurf smodelSpotShadowDrawSurfs0[256];
  GfxDrawSurf entSpotShadowDrawSurfs0[512];
  GfxDrawSurf bspSpotShadowDrawSurfs1[256];
  GfxDrawSurf smodelSpotShadowDrawSurfs1[256];
  GfxDrawSurf entSpotShadowDrawSurfs1[512];
  GfxDrawSurf bspSpotShadowDrawSurfs2[256];
  GfxDrawSurf smodelSpotShadowDrawSurfs2[256];
  GfxDrawSurf entSpotShadowDrawSurfs2[512];
  GfxDrawSurf bspSpotShadowDrawSurfs3[256];
  GfxDrawSurf smodelSpotShadowDrawSurfs3[256];
  GfxDrawSurf entSpotShadowDrawSurfs3[512];
  GfxDrawSurf shadowDrawSurfs[512];
  unsigned int shadowableLightIsUsed[32];
  int maxDrawSurfCount[34];
  volatile int drawSurfCount[34];
  GfxDrawSurf *drawSurfs[34];
  GfxDrawSurf fxDrawSurfsLight[8192];
  GfxDrawSurf fxDrawSurfsLightAuto[8192];
  GfxDrawSurf fxDrawSurfsLightDecal[8192];
  GfxSceneDef def;
  unsigned int localClientNum;
  int addedLightCount;
  GfxLight addedLight[32];
  bool isAddedLightCulled[32];
  float dynamicSpotLightNearPlaneOffset;
  GfxVisibleLight visLight[4];
  GfxVisibleLight visLightShadow[1];
  GfxShadowCookie cookie[24];
  unsigned int *entOverflowedDrawBuf;
  char *entVisData[7];
  unsigned __int16 *sceneDObjIndex;
  volatile int sceneDObjCount;
  GfxSceneEntity sceneDObj[512];
  char sceneDObjVisData[7][512];
  volatile int sceneModelCount;
  GfxSceneModel sceneModel[1024];
  char sceneModelVisData[7][1024];
  volatile int sceneBrushCount;
  GfxSceneBrush sceneBrush[512];
  char sceneBrushVisData[3][512];
  unsigned int sceneDynModelCount;
  unsigned int sceneDynBrushCount;
  DpvsPlane shadowRegionPlane[2];
  DpvsPlane blendRegionPlane[2];
};

/* 8368 */
struct __declspec(align(128)) r_global_permanent_t
{
  Material *sortedMaterials[2000];
  int needSortMaterials;
  int materialCount;
  GfxImage *whiteImage;
  GfxImage *blackImage;
  GfxImage *grayImage;
  GfxImage *identityNormalMapImage;
  GfxImage *specularityImage;
  GfxImage *outdoorImage;
  GfxLightDef *dlightDef;
  Material *defaultMaterial;
  Material *whiteMaterial;
  Material *additiveMaterial;
  Material *pointMaterial;
  Material *lineMaterial;
  Material *lineMaterialNoDepth;
  Material *clearAlphaStencilMaterial;
  Material *shadowClearMaterial;
  Material *shadowCookieOverlayMaterial;
  Material *shadowCookieBlurMaterial;
  Material *shadowCasterMaterial;
  Material *shadowOverlayMaterial;
  Material *depthPrepassMaterial;
  Material *glareBlindMaterial;
  Material *pixelCostAddDepthAlwaysMaterial;
  Material *pixelCostAddDepthDisableMaterial;
  Material *pixelCostAddDepthEqualMaterial;
  Material *pixelCostAddDepthLessMaterial;
  Material *pixelCostAddDepthWriteMaterial;
  Material *pixelCostAddNoDepthWriteMaterial;
  Material *pixelCostColorCodeMaterial;
  Material *stencilShadowMaterial;
  Material *stencilDisplayMaterial;
  Material *floatZDisplayMaterial;
  Material *colorChannelMixerMaterial;
  Material *frameColorDebugMaterial;
  Material *frameAlphaDebugMaterial;
  GfxWorld *world;
  Material *feedbackReplaceMaterial;
  Material *feedbackBlendMaterial;
  Material *feedbackFilmBlendMaterial;
  Material *cinematicMaterial;
  Material *dofDownsampleMaterial;
  Material *dofNearCocMaterial;
  Material *smallBlurMaterial;
  Material *postFxDofMaterial;
  Material *postFxDofColorMaterial;
  Material *postFxColorMaterial;
  Material *postFxMaterial;
  Material *symmetricFilterMaterial[8];
  Material *shellShockBlurredMaterial;
  Material *shellShockFlashedMaterial;
  Material *glowConsistentSetupMaterial;
  Material *glowApplyBloomMaterial;
  int savedScreenTimes[4];
};

/* 8369 */
struct GfxSModelDrawSurfLightingData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurf[3];
};

/* 8370 */
struct GfxSModelDrawSurfData
{
  GfxDelayedCmdBuf delayedCmdBuf;
  GfxDrawSurfList drawSurfList;
};

/* 8371 */
struct GfxLodParms
{
  float origin[3];
  float scale;
  float scaleSq;
  float bias;
};

/* 8372 */
struct __declspec(align(8)) r_globals_t
{
  GfxViewParms identityViewParms;
  bool forbidDelayLoadImages;
  bool ignorePrecacheErrors;
  __declspec(align(4)) float viewOrg[3];
  float viewDir[3];
  unsigned int frontEndFrameCount;
  int totalImageMemory;
  GfxFog fogSettings[5];
  int fogIndex;
  GfxColor color_axis;
  GfxColor color_allies;
  trStatistics_t *stats;
  GfxLodParms lodParms;
  bool hasAnyImageOverrides;
  bool useSunLightOverride;
  bool useSunDirOverride;
  bool useSunDirLerp;
  float sunLightOverride[3];
  float sunDirOverride[3];
  float sunDirOverrideTarget[3];
  float sunDirLerpBeginTime;
  float sunDirLerpEndTime;
  GfxScaledPlacement identityPlacement;
  GfxViewParms *debugViewParms;
  int endTime;
  bool distortion;
  __declspec(align(4)) volatile int norefresh;
  volatile int endFenceHit;
  volatile int endFenceLock;
  int renderCubeMap;
  const char *codeImageNames[27];
  unsigned int viewInfoCount;
};

/* 8373 */
struct GfxDynamicIndices
{
  volatile int used;
  int total;
  D3DIndexBuffer buffer;
  unsigned __int16 *indices;
};

/* 8374 */
struct GfxBuffers
{
  GfxVertexBufferState skinnedCacheVbPool[2];
  char *skinnedCacheLockAddr;
  D3DVertexBuffer particleCloudVertexBuffer;
  D3DIndexBuffer particleCloudIndexBuffer;
  GfxSModelCachedVertex *smodelCacheVerts;
  int dynamicBufferFrame;
};

/* 8375 */
struct CinematicHunk
{
  void *base;
  void *at;
  void *end;
};

/* 8376 */
struct CinematicTextureSet
{
  CinematicHunk textureHunk;
  D3DTexture textureY[2];
  D3DTexture textureCr[2];
  D3DTexture textureCb[2];
  D3DTexture textureA[2];
  GfxImage imageY[2];
  GfxImage imageCr[2];
  GfxImage imageCb[2];
  GfxImage imageA[2];
};

/* 8377 */
struct BINKREALTIME
{
  unsigned int FrameNum;
  unsigned int FrameRate;
  unsigned int FrameRateDiv;
  unsigned int Frames;
  unsigned int FramesTime;
  unsigned int FramesVideoDecompTime;
  unsigned int FramesAudioDecompTime;
  unsigned int FramesReadTime;
  unsigned int FramesIdleReadTime;
  unsigned int FramesThreadReadTime;
  unsigned int FramesBlitTime;
  unsigned int ReadBufferSize;
  unsigned int ReadBufferUsed;
  unsigned int FramesDataRate;
};

/* 8378 */
struct BINKRECT
{
  int Left;
  int Top;
  int Width;
  int Height;
};

/* 8379 */
struct BINKIO
{
  unsigned int (__cdecl *ReadHeader)(BINKIO *, int, void *, unsigned int);
  unsigned int (__cdecl *ReadFrame)(BINKIO *, unsigned int, int, void *, unsigned int);
  unsigned int (__cdecl *GetBufferSize)(BINKIO *, unsigned int);
  void (__cdecl *SetInfo)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);
  unsigned int (__cdecl *Idle)(BINKIO *);
  void (__cdecl *Close)(BINKIO *);
  int (__cdecl *BGControl)(BINKIO *, unsigned int);
  BINK *bink;
  volatile unsigned int ReadError;
  volatile unsigned int DoingARead;
  volatile unsigned int BytesRead;
  volatile unsigned int Working;
  volatile unsigned int TotalTime;
  volatile unsigned int ForegroundTime;
  volatile unsigned int IdleTime;
  volatile unsigned int ThreadTime;
  volatile unsigned int BufSize;
  volatile unsigned int BufHighUsed;
  volatile unsigned int CurBufSize;
  volatile unsigned int CurBufUsed;
  volatile unsigned int Suspended;
  volatile char iodata[160];
  void (__cdecl *suspend_callback)(BINKIO *);
  int (__cdecl *try_suspend_callback)(BINKIO *);
  void (__cdecl *resume_callback)(BINKIO *);
  void (__cdecl *idle_on_callback)(BINKIO *);
  volatile unsigned int callback_control[16];
};

/* 8380 */
struct BINK
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Frames;
  unsigned int FrameNum;
  unsigned int LastFrameNum;
  unsigned int FrameRate;
  unsigned int FrameRateDiv;
  unsigned int ReadError;
  unsigned int OpenFlags;
  unsigned int BinkType;
  unsigned int Size;
  unsigned int FrameSize;
  unsigned int SndSize;
  BINKRECT FrameRects[8];
  int NumRects;
  BINKFRAMEBUFFERS *FrameBuffers;
  void *MaskPlane;
  unsigned int MaskPitch;
  unsigned int MaskLength;
  unsigned int LargestFrameSize;
  unsigned int InternalFrames;
  int NumTracks;
  unsigned int Highest1SecRate;
  unsigned int Highest1SecFrame;
  int Paused;
  unsigned int BackgroundThread;
  void *compframe;
  void *preloadptr;
  unsigned int *frameoffsets;
  BINKIO bio;
  char *ioptr;
  unsigned int iosize;
  unsigned int decompwidth;
  unsigned int decompheight;
  int *trackindexes;
  unsigned int *tracksizes;
  unsigned int *tracktypes;
  int *trackIDs;
  unsigned int numrects;
  unsigned int playedframes;
  unsigned int firstframetime;
  unsigned int startframetime;
  unsigned int startblittime;
  unsigned int startsynctime;
  unsigned int startsyncframe;
  unsigned int twoframestime;
  unsigned int entireframetime;
  unsigned int slowestframetime;
  unsigned int slowestframe;
  unsigned int slowest2frametime;
  unsigned int slowest2frame;
  unsigned int soundon;
  unsigned int videoon;
  unsigned int totalmem;
  unsigned int timevdecomp;
  unsigned int timeadecomp;
  unsigned int timeblit;
  unsigned int timeopen;
  unsigned int fileframerate;
  unsigned int fileframeratediv;
  unsigned int runtimeframes;
  int rtindex;
  unsigned int *rtframetimes;
  unsigned int *rtadecomptimes;
  unsigned int *rtvdecomptimes;
  unsigned int *rtblittimes;
  unsigned int *rtreadtimes;
  unsigned int *rtidlereadtimes;
  unsigned int *rtthreadreadtimes;
  unsigned int lastblitflags;
  unsigned int lastdecompframe;
  unsigned int lastresynctime;
  unsigned int doresync;
  unsigned int skipcount;
  unsigned int toofewskipstomask;
  unsigned int playingtracks;
  unsigned int soundskips;
  BINKSND *bsnd;
  unsigned int skippedlastblit;
  unsigned int skipped_this_frame;
  unsigned int skippedblits;
  BUNDLEPOINTERS bunp;
  unsigned int skipped_in_a_row;
  unsigned int big_sound_skip_adj;
  unsigned int big_sound_skip_reduce;
  unsigned int paused_sync_diff;
  unsigned int last_time_almost_empty;
  unsigned int last_read_count;
  unsigned int last_sound_count;
  unsigned int snd_callback_buffer[16];
  int allkeys;
  BINKFRAMEBUFFERS *allocatedframebuffers;
};

/* 8381 */
struct BINKSND
{
  int (__cdecl *Ready)(BINKSND *);
  int (__cdecl *Lock)(BINKSND *, char **, unsigned int *);
  int (__cdecl *Unlock)(BINKSND *, unsigned int);
  void (__cdecl *Volume)(BINKSND *, int);
  void (__cdecl *Pan)(BINKSND *, int);
  int (__cdecl *Pause)(BINKSND *, int);
  int (__cdecl *SetOnOff)(BINKSND *, int);
  void (__cdecl *Close)(BINKSND *);
  void (__cdecl *MixBins)(BINKSND *, unsigned int *, unsigned int);
  void (__cdecl *MixBinVols)(BINKSND *, unsigned int *, int *, unsigned int);
  unsigned int sndbufsize;
  char *sndbuf;
  char *sndend;
  char *sndwritepos;
  char *sndreadpos;
  unsigned int sndcomp;
  unsigned int sndamt;
  unsigned int sndconvert8;
  unsigned int sndendframe;
  unsigned int sndprime;
  unsigned int sndpad;
  unsigned int BestSizeIn16;
  unsigned int BestSizeMask;
  unsigned int SoundDroppedOut;
  int NoThreadService;
  int OnOff;
  unsigned int Latency;
  unsigned int VideoScale;
  unsigned int freq;
  int bits;
  int chans;
  char snddata[256];
};

/* 8382 */
struct BUNDLEPOINTERS
{
  void *typeptr;
  void *type16ptr;
  void *colorptr;
  void *bits2ptr;
  void *motionXptr;
  void *motionYptr;
  void *dctptr;
  void *mdctptr;
  void *patptr;
};

/* 8383 */
#pragma pack(push, 4)
struct CinematicGlob
{
  char currentCinematicName[256];
  char targetCinematicName[256];
  char nextCinematicName[256];
  bool targetCinematicChanged;
  bool cinematicFinished;
  bool playbackStarted;
  bool hasFileIO;
  bool usingAlpha;
  BINK *bink;
  BINKTEXTURESET binkTextureSet;
  CinematicHunk masterHunk;
  CinematicHunk binkHunk;
  int activeImageFrame;
  int framesStopped;
  CinematicEnum currentPaused;
  CinematicEnum targetPaused;
  CinematicTextureSet textureSets[2];
  int activeTextureSet;
  int activeImageFrameTextureSet;
};
#pragma pack(pop)

/* 8384 */
struct _XMEDIA_VIDEO_DESCRIPTOR
{
  unsigned int dwWidth;
  unsigned int dwHeight;
  float fFrameRate;
  unsigned int dwClipDuration;
};

/* 8385 */
struct _XMEDIA_AUDIO_DESCRIPTOR
{
  unsigned int dwNumberOfChannels;
  unsigned int dwSampleRate;
  unsigned int dwBitsPerSample;
  unsigned int dwClipDuration;
};

/* 8386 */
struct $A5D82C852F78D0C9B06CCE7AF975C020
{
  void *pvYBuffer;
  void *pvUBuffer;
  void *pvVBuffer;
  unsigned int dwYBufferSize;
  unsigned int dwUBufferSize;
  unsigned int dwVBufferSize;
  unsigned int dwYPitch;
  unsigned int dwUPitch;
  unsigned int dwVPitch;
};

/* 8387 */
struct _XMEDIA_VIDEO_FRAME
{
  XMEDIA_VIDEO_FORMAT videoFormat;
  unsigned int dwFlags;
  int lTimeToPresent;
  $A5D82C852F78D0C9B06CCE7AF975C020 i420;
};

/* 8388 */
struct __declspec(align(16)) materialCommands_t
{
  GfxVertex verts[2048];
  unsigned __int16 indices[8192];
  MaterialVertexDeclType vertDeclType;
  unsigned int vertexSize;
  int indexCount;
  int vertexCount;
  int firstVertex;
  int lastVertex;
};

/* 8389 */
struct _XMEDIA_PLAYBACK_STATUS
{
  XMEDIA_PLAYER_STATUS Status;
  int lDuration;
};

/* 8390 */
struct _XMEDIA_VIDEO_SCREEN_VERTEX
{
  float fX;
  float fY;
  float fZ;
  float fTu;
  float fTv;
};

/* 8391 */
struct $71FD70DD8D48818F9095F1A222AD2B7D
{
  _XMEDIA_VIDEO_SCREEN_VERTEX upperLeft;
  _XMEDIA_VIDEO_SCREEN_VERTEX upperRight;
  _XMEDIA_VIDEO_SCREEN_VERTEX lowerLeft;
  _XMEDIA_VIDEO_SCREEN_VERTEX lowerRight;
};

/* 8392 */
union _XMEDIA_VIDEO_SCREEN
{
  $71FD70DD8D48818F9095F1A222AD2B7D _s0;
  _XMEDIA_VIDEO_SCREEN_VERTEX aVertices[4];
};

/* 8393 */
struct GfxCmdBuf
{
  D3DDevice *device;
};

/* 8394 */
#pragma pack(push, 4)
struct GfxModelSurfaceInfo
{
  DObjAnimMat *baseMat;
  char boneIndex;
  char boneCount;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 lightingHandle;
};
#pragma pack(pop)

/* 8395 */
#pragma pack(push, 4)
struct SkinXModelCmd
{
  void *modelSurfs;
  DObjAnimMat *mat;
  int surfacePartBits[4];
  unsigned __int16 surfCount;
};
#pragma pack(pop)

/* 8396 */
struct GfxModelSkinnedSurface
{
  int skinnedCachedOffset;
  XSurface *xsurf;
  GfxModelSurfaceInfo info;
};

/* 8397 */
struct GfxModelRigidSurface
{
  GfxModelSkinnedSurface surf;
  GfxScaledPlacement placement;
};

/* 8398 */
struct DpvsEntityCmd
{
  GfxSceneEntity *sceneEnt;
  DpvsPlane *planes;
  unsigned __int16 planeCount;
  unsigned __int16 cellIndex;
  char *entVisData;
};

/* 8399 */
union GfxEntCellRefInfo
{
  float radius;
  GfxBrushModel *bmodel;
};

/* 8400 */
struct FilterEntInfo
{
  unsigned int localClientNum;
  unsigned int entnum;
  GfxEntCellRefInfo info;
  unsigned int cellOffset;
};

/* 8401 */
struct DpvsDynamicCellCmd
{
  DpvsPlane *planes;
  unsigned int cellIndex;
  char planeCount;
  char frustumPlaneCount;
  unsigned __int16 viewIndex;
};

/* 8402 */
struct DpvsStaticCellCmd
{
  DpvsPlane *planes;
  GfxCell *cell;
  char planeCount;
  char frustumPlaneCount;
  unsigned __int16 viewIndex;
};

/* 8403 */
struct PortalHeapNode
{
  GfxPortal *portal;
  float dist;
};

/* 8404 */
union GfxHullPointsPool
{
  GfxHullPointsPool *nextFree;
  float points[64][2];
};

/* 8405 */
struct DpvsView
{
  unsigned int renderFxFlagsCull;
  DpvsPlane frustumPlanes[12];
  int frustumPlaneCount;
};

/* 8406 */
struct $2989291918365FC933B7D9358C7C9563
{
  DpvsPlane viewPlane;
  DpvsPlane fogPlane;
  DpvsPlane *nearPlane;
  DpvsPlane *farPlane;
  GfxMatrix *viewProjMtx;
  GfxMatrix *invViewProjMtx;
  float viewOrg[4];
  int viewOrgIsDir;
  int queuedCount;
  PortalHeapNode *portalQueue;
  GfxHullPointsPool *nextFreeHullPoints;
  float cullDist;
  DpvsPlane childPlanes[2048];
  DpvsView views[3];
  unsigned int cameraCellIndex;
  DpvsPlane *sideFrustumPlanes;
  unsigned int *entVisBits[4];
  GfxEntCellRefInfo *entInfo[4];
  unsigned int *cellBits;
  unsigned int cellVisibleBits[32];
};

/* 8407 */
struct BModelSurface
{
  GfxScaledPlacement *placement;
  GfxSurface *surf;
};

/* 8408 */
struct DpvsClipPlane
{
  __vector4 coeffs;
  __vector4 side;
};

/* 8409 */
struct DpvsClipPlanes
{
  DpvsClipPlane planes[16];
  unsigned int count;
  unsigned int pad[3];
};

/* 8410 */
struct DpvsPlanes
{
  DpvsPlane *planes;
  int count;
};

/* 8411 */
struct GfxDrawPrimArgs
{
  int vertexCount;
  int triCount;
  int baseIndex;
};

/* 8412 */
struct GfxTrianglesDrawStream
{
  unsigned int reflectionProbeCount;
  unsigned int lightmapCount;
  GfxTexture *reflectionProbeTextures;
  GfxTexture *lightmapPrimaryTextures;
  GfxTexture *lightmapSecondaryTextures;
  GfxTexture *whiteTexture;
  const unsigned int *primDrawSurfPos;
  GfxTexture *reflectionProbeTexture;
  GfxTexture *lightmapPrimaryTexture;
  GfxTexture *lightmapSecondaryTexture;
  unsigned int customSamplerFlags;
  int hasSunDirChanged;
};

/* 8413 */
struct GfxDrawMethod
{
  GfxDrawSceneMethod drawScene;
  MaterialTechniqueType baseTechType;
  MaterialTechniqueType emissiveTechType;
  char litTechType[8][7];
};

/* 8414 */
struct GfxStaticModelDrawStream
{
  unsigned int reflectionProbeCount;
  GfxTexture *reflectionProbeTextures;
  unsigned int precompiledIndex;
  const unsigned int *primDrawSurfPos;
  GfxTexture *reflectionProbeTexture;
  unsigned int customSamplerFlags;
  float viewOrigin[4];
  XSurface *localSurf;
  unsigned int smodelCount;
  const unsigned __int16 *smodelList;
};

/* 8415 */
struct GfxXModelDrawStream
{
  unsigned int reflectionProbeCount;
  GfxTexture *reflectionProbeTextures;
  unsigned int precompiledIndex;
  GfxDrawSurf *drawSurfList;
  unsigned int drawSurfCount;
  GfxTexture *reflectionProbeTexture;
  unsigned int customSamplerFlags;
  float viewOrigin[4];
  GfxBackEndData *data;
  XSurface *localSurf;
};

/* 8416 */
struct GfxSortDrawSurfsInterface
{
  char dummy[1];
};

/* 8417 */
struct GfxReverseSortDrawSurfsInterface
{
  char dummy[1];
};

/* 8418 */
struct ImageList
{
  unsigned int count;
  GfxImage *image[2048];
};

/* 8419 */
struct std::pair<GfxImage * *,GfxImage * *>
{
  GfxImage **first;
  GfxImage **second;
};

/* 8420 */
#pragma pack(push, 4)
struct GfxWindowParms
{
  bool isWideScreen;
  float hz;
  int sceneWidth;
  int sceneHeight;
  int displayWidth;
  int displayHeight;
  int aaSamples;
};
#pragma pack(pop)

/* 8421 */
struct GfxGammaRamp
{
  unsigned __int16 entries[256];
};

/* 8422 */
struct GfxAssets
{
  D3DQuery *pixelCountQuery;
};

/* 8423 */
#pragma pack(push, 2)
struct GfxGlobals
{
  bool haveThreadOwnership;
  bool startedRenderThread;
  bool isRenderingRemoteUpdate;
  volatile int screenUpdateNotify;
  volatile int remoteScreenUpdateNesting;
};
#pragma pack(pop)

/* 8424 */
struct BspOmniLightCallback
{
  const char *surfaceVisData;
  float position[3];
  float radiusSq;
};

/* 8425 */
struct BspSpotLightCallback
{
  const char *surfaceVisData;
  float planes[6][4];
};

/* 8426 */
struct StaticModelLightCallback
{
  char *smodelVisData;
  float position[3];
  float radiusSq;
  float planes[6][4];
};

/* 8427 */
struct std::pair<GfxSurface * *,GfxSurface * *>
{
  GfxSurface **first;
  GfxSurface **second;
};

/* 8428 */
struct FxWorldMarkPoint
{
  float xyz[3];
  float vertWeights[3];
};

/* 8429 */
struct MarkModelCoreContext
{
  MarkInfo *markInfo;
  GfxMarkContext *markContext;
  const float *markOrigin;
  const float *markDir;
  const float (*clipPlanes)[4];
  const float (*transformMatrix)[3];
  const float (*transformNormalMatrix)[3];
};

/* 8430 */
struct stream_source_info_t
{
  unsigned __int16 Stream;
  unsigned __int16 Offset;
  unsigned int Type;
};

/* 8431 */
struct BuiltInMaterialTable
{
  const char *name;
  Material **material;
};

/* 8432 */
struct MaterialTechniqueSetList
{
  MaterialTechniqueSet *entry[512];
  int count;
};

/* 8433 */
struct stream_dest_info_t
{
  char Usage;
  char UsageIndex;
};

/* 8434 */
struct GfxShaderConstantBlock
{
  unsigned int count;
  unsigned __int16 dest[16];
  const float *value[16];
};

/* 8435 */
struct std::pair<Material * *,Material * *>
{
  Material **first;
  Material **second;
};

/* 8436 */
#pragma pack(push, 4)
struct GfxMtlFeatureMap
{
  const char *name;
  unsigned int mask;
  unsigned int value;
  bool valueRequired;
};
#pragma pack(pop)

/* 8437 */
#pragma pack(push, 4)
struct $81D2BE69C4624108BB05657A2C18E8D0
{
  bool isRegisteringOverrides;
  bool isDirty;
  unsigned int remapMask;
  unsigned int remapValue;
};
#pragma pack(pop)

/* 8438 */
struct GfxMeshGlobals
{
  GfxQuadMeshData fullSceneViewMesh[4];
};

/* 8439 */
struct GfxFindLightForBox
{
  GfxViewInfo *viewInfo;
  float midPoint[3];
  float halfSize[3];
};

/* 8440 */
struct GfxFindLightForSphere
{
  GfxViewInfo *viewInfo;
  float origin[3];
  float radius;
};

/* 8441 */
struct $C77BB24B58F9AF1CD5C29616C9427417
{
  unsigned __int16 smodelIndex[4096];
  unsigned int usedFrameCount[4096];
  unsigned int entryLimit;
  unsigned int assignedCount;
  unsigned int freeableCount;
  unsigned int frameCount;
  unsigned int pad[28];
};

/* 8442 */
struct GfxSmodelLightGlob
{
  unsigned __int16 freeableHandles[4096];
  unsigned int lightingBits[2048];
  $C77BB24B58F9AF1CD5C29616C9427417 local;
};

/* 8443 */
struct $D83B18AC5ED51685DB5F92059A920C50
{
  unsigned int baseIndex;
};

/* 8444 */
struct $CC7A03CCE96ABB86AD15C9D047F90203
{
  float invImageHeight;
  $D83B18AC5ED51685DB5F92059A920C50 xmodel;
  unsigned int totalEntryLimit;
  unsigned int entryBitsY;
  unsigned int imageHeight;
  GfxEntity *entities;
  unsigned int modFrameCount;
  GfxImage *image;
  unsigned int xmodelEntryLimit;
  char *primaryLightIndexes;
  float (*lightingOrigins)[3];
  int allocModelFail;
  unsigned int *pixelFreeBits[4];
  unsigned int *prevPrevPixelFreeBits;
  unsigned int *prevPixelFreeBits;
  unsigned int *currPixelFreeBits;
  unsigned int pixelFreeBitsSize;
  unsigned int pixelFreeBitsWordCount;
  unsigned int pixelFreeRover;
};

/* 8445 */
struct GfxCandidateShadowedLight
{
  unsigned int shadowableLightIndex;
  float score;
};

/* 8446 */
#pragma pack(push, 4)
struct GfxShadowedLightEntry
{
  char shadowableLightIndex;
  bool isFadingOut;
  float fade;
};
#pragma pack(pop)

/* 8447 */
struct GfxShadowedLightHistory
{
  unsigned int shadowableLightWasUsed[8];
  GfxShadowedLightEntry entries[4];
  unsigned int entryCount;
  unsigned int lastUpdateTime;
};

/* 8448 */
struct __declspec(align(2)) GfxCmdDrawText2D
{
  GfxCmdHeader header;
  float x;
  float y;
  float rotation;
  Font_s *font;
  float xScale;
  float yScale;
  GfxColor color;
  int maxChars;
  int renderFlags;
  int cursorPos;
  char cursorLetter;
  __declspec(align(4)) GfxColor glowForceColor;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  Material *fxMaterial;
  Material *fxMaterialGlow;
  float padding;
  char text[3];
};

/* 8449 */
struct GfxPointVertex
{
  float xyz[3];
  char color[4];
};

/* 8450 */
struct GfxCmdSaveScreen
{
  GfxCmdHeader header;
  int screenTimerId;
};

/* 8451 */
struct GfxCmdStretchPicRotateXY
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w;
  float h;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
  float rotation;
};

/* 8452 */
struct GfxCmdSaveScreenSection
{
  GfxCmdHeader header;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
};

/* 8453 */
struct GfxCmdSetViewport
{
  GfxCmdHeader header;
  GfxViewport viewport;
};

/* 8454 */
struct GfxCmdDrawText3D
{
  GfxCmdHeader header;
  float org[3];
  Font_s *font;
  float xPixelStep[3];
  float yPixelStep[3];
  GfxColor color;
  char text[4];
};

/* 8455 */
struct GfxCmdStretchRaw
{
  GfxCmdHeader header;
  int x;
  int y;
  int w;
  int h;
  int cols;
  int rows;
  const char *data;
  int client;
  int dirty;
};

/* 8456 */
struct GfxCmdDrawQuadPic
{
  GfxCmdHeader header;
  Material *material;
  float verts[4][2];
  GfxColor color;
};

/* 8457 */
#pragma pack(push, 4)
struct GfxCmdClearScreen
{
  GfxCmdHeader header;
  char whichToClear;
  char stencil;
  float depth;
  float color[4];
};
#pragma pack(pop)

/* 8458 */
struct GfxCmdDrawPoints
{
  GfxCmdHeader header;
  __int16 pointCount;
  char size;
  char dimensions;
  GfxPointVertex verts[1];
};

/* 8459 */
struct GfxCmdSetMaterialColor
{
  GfxCmdHeader header;
  float color[4];
};

/* 8460 */
struct GfxCmdDrawTriangles
{
  GfxCmdHeader header;
  Material *material;
  MaterialTechniqueType techType;
  __int16 indexCount;
  __int16 vertexCount;
};

/* 8461 */
struct GfxCmdDrawLines
{
  GfxCmdHeader header;
  __int16 lineCount;
  char width;
  char dimensions;
  GfxPointVertex verts[2];
};

/* 8462 */
struct GfxCmdStretchPic
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w;
  float h;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

/* 8463 */
struct GfxCmdStretchPicRotateST
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w;
  float h;
  float centerS;
  float centerT;
  float radiusST;
  float scaleFinalS;
  float scaleFinalT;
  GfxColor color;
  float rotation;
};

/* 8464 */
struct GfxCmdBlendSavedScreenFlashed
{
  GfxCmdHeader header;
  float intensityWhiteout;
  float intensityScreengrab;
  float s0;
  float t0;
  float ds;
  float dt;
};

/* 8465 */
struct GfxCmdBlendSavedScreenBlurred
{
  GfxCmdHeader header;
  int fadeMsec;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
};

/* 8466 */
struct GfxCmdProjectionSet
{
  GfxCmdHeader header;
  GfxProjectionTypes projection;
};

/* 8467 */
struct GfxCmdDrawFullScreenColoredQuad
{
  GfxCmdHeader header;
  Material *material;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

/* 8468 */
struct GfxSceneParms
{
  int localClientNum;
  float blurRadius;
  GfxDepthOfField dof;
  GfxFilm film;
  GfxGlow glow;
  bool isRenderingFullScreen;
  __declspec(align(4)) GfxViewport sceneViewport;
  GfxViewport displayViewport;
  GfxLight *primaryLights;
};

/* 8469 */
struct ShadowCookieCmd
{
  GfxViewParms *viewParmsDpvs;
  GfxViewParms *viewParmsDraw;
  ShadowCookieList *shadowCookieList;
  int localClientNum;
};

/* 8470 */
struct SceneEntCmd
{
  GfxViewInfo *viewInfo;
};

/* 8471 */
struct $3AD4B2FEFAF476CEDD8385D62EEE68CF
{
  char *pixels[6];
};

/* 8472 */
struct $1A5A413BBA31B2D4C0EB65C08377FC63
{
  MaterialArgumentCodeConst codeConst;
  unsigned int version;
};

/* 8473 */
union GfxShaderConstantState
{
  $1A5A413BBA31B2D4C0EB65C08377FC63 fields;
  unsigned __int64 packed;
};

/* 8474 */
struct ShadowCandidate
{
  int sceneEntIndex;
  float weight;
};

/* 8475 */
struct ShadowReceiverCallback
{
  char *surfaceVisData;
};

/* 8476 */
struct ShadowCookieGlob
{
  float weightCap;
  int lastTime;
};

/* 8477 */
struct std::pair<ShadowCandidate *,ShadowCandidate *>
{
  ShadowCandidate *first;
  ShadowCandidate *second;
};

/* 8478 */
#pragma pack(push, 2)
struct SunFlareDynamic
{
  float flareIntensity;
  float currentBlind;
  float currentGlare;
  int lastTime;
  float lastVisibility;
  float lastDot;
  bool error;
  bool sunQueryIssued[2];
  D3DQuery *sunQuery[2];
  int hitNum;
};
#pragma pack(pop)

/* 8479 */
struct GfxSpotShadowEntCmd
{
  GfxSceneEntity *sceneEnt;
  GfxLight *light;
};

/* 8480 */
struct StreamAllocBlockInfo
{
  int maxPri;
  GfxImage *ownerImage;
  StreamAllocBlockInfo *prevFree;
  StreamAllocBlockInfo *nextFree;
};

/* 8481 */
struct StreamStatShot
{
  float elems[20][2];
};

/* 8482 */
struct StreamSlotData
{
  char buffer[131072];
};

/* 8483 */
struct StreamSlotInfo
{
  unsigned int lastUpdatedFrame;
  unsigned int lastPriorityUsedFrame;
  unsigned int lastPriorityHighFrame;
  unsigned int lastPriorityMedFrame;
};

/* 8484 */
struct StreamFrontendGlob
{
  unsigned int frame;
  StreamSlotData *slotData;
  bool allocForbidden;
  __declspec(align(4)) _RTL_CRITICAL_SECTION imageToLoadCS;
  GfxImage *volatile mostWantedImage;
  volatile float mostWantedDistSq;
  GfxImage *volatile imageToLoad;
  volatile float imageToLoadDistSq;
  GfxImage *volatile imageBeingLoaded;
  float loadedAccumulator[2];
  float reloadedAccumulator[2];
  float failedInactiveAccumulator[2];
  float failedActiveAccumulator[2];
  float visibleSurfAccumulator[2];
  float visibleSurfLoadedAccumulator[2];
  float visibleImgAccumulator[2];
  float visibleImgLoadedAccumulator[2];
  StreamSlotInfo slotInfo[512];
};

/* 8485 */
struct StreamAllocGlob
{
  _RTL_CRITICAL_SECTION criticalSection;
  unsigned int discardedSizeAccumulator;
  unsigned int discardedNumberAccumulator;
  StreamAllocBlockInfo listHeads[6][6];
  StreamAllocBlockInfo info[1024];
};

/* 8486 */
struct ShadowGlobals
{
  MaterialTechnique *defaultShadowCasterTechnique;
};

/* 8487 */
struct WaterGlob
{
  float HX[4096];
  float HY[4096];
  char pixels[4096];
};

/* 8488 */
struct WaterGlobStatic
{
  float sinTable[1024];
  complex_s fftTrigTable[256];
  int fftBitswap[256];
};

/* 8489 */
struct WorkerCmds
{
  volatile int startPos;
  volatile int endPos;
  volatile int syncedEndPos;
  volatile int inSize;
  volatile int outSize;
  unsigned int dataSize;
  char *buf;
  int bufSize;
  int bufCount;
  unsigned int pad[23];
};

/* 8490 */
struct GfxRenderCommandExecState
{
  const void *cmd;
};

/* 8491 */
struct GfxDrawSurfListArgs
{
  GfxCmdBufContext context;
  unsigned int firstDrawSurfIndex;
  GfxDrawSurfListInfo *info;
};

/* 8492 */
struct r_backEndGlobals_t
{
  int frameCount;
  int glowCount;
  GfxImage *glowImage;
  Font_s *debugFont;
};

/* 8493 */
struct GfxPointLitSurfsInfo
{
  GfxViewInfo *viewInfo;
  GfxMeshData *clearQuadMesh;
  GfxDrawSurfListInfo *drawSurfInfo;
  unsigned int x;
  unsigned int y;
  unsigned int w;
  unsigned int h;
};

/* 8494 */
struct GfxImageFilterPass
{
  Material *material;
  float srcWidth;
  float srcHeight;
  int dstWidth;
  int dstHeight;
  int tapHalfCount;
  float tapOffsetsAndWeights[8][4];
};

/* 8495 */
struct GfxImageFilter
{
  int passCount;
  GfxImageFilterPass passes[16];
  GfxImage *sourceImage;
  GfxRenderTargetId finalTarget;
  GfxRenderTargetId feedbackTarget;
};

/* 8496 */
struct $58A084419402DA38B3552A7141CB9B53
{
  unsigned __int16 (*history)[3];
  int count;
};

/* 8497 */
struct GfxLightGridRow
{
  unsigned __int16 colStart;
  unsigned __int16 colCount;
  unsigned __int16 zStart;
  unsigned __int16 zCount;
  unsigned int firstEntry;
};

/* 8498 */
struct StreamStatWindow
{
  StreamStatShot shots[10];
};

/* 8499 */
#pragma pack(push, 2)
struct StreamStatsItemFormatting
{
  const char *name;
  char r;
  char g;
  char b;
  int linesToSkip;
};
#pragma pack(pop)

/* 8500 */
struct StreamStats
{
  StreamStatShot last;
  StreamStatWindow windows[4];
  unsigned int frameCount;
};

/* 8501 */
struct AsyncCommand
{
  GfxImage *image;
  char *pixels;
};

/* 8502 */
struct StreamShowStatsStateStruct
{
  float x;
  float y;
};

/* 8503 */
struct StreamBackendGlob
{
  _RTL_CRITICAL_SECTION asyncCommandCS;
  int asyncCommandCount;
  StreamStats stats;
  AsyncCommand asyncCommands[64];
  StreamShowStatsStateStruct showStatsState;
};

/* 8504 */
struct _LocaleUpdate
{
  char dummy[1];
};

/* 8505 */
struct _strflt
{
  int sign;
  int decpt;
  int flag;
  char *mantissa;
};

/* 8506 */
struct __CrtImplementationDetails::NativeDll
{
  char dummy[1];
};

/* 8507 */
#pragma pack(push, 8)
struct _flt
{
  int flags;
  int nbytes;
  int lval;
  double dval;
};
#pragma pack(pop)

/* 8508 */
#pragma pack(push, 4)
struct ioinfo
{
  int osfhnd;
  char osfile;
  char pipech;
  int lockinitflag;
  _RTL_CRITICAL_SECTION lock;
  char _bf40;
  char pipech2[2];
};
#pragma pack(pop)

/* 8509 */
union $C8014B43F160BFD769FAE3F15553333C
{
  char sz[512];
};

/* 8510 */
union $12F061FBE778B92DEB8200A0ACF7A038
{
  char *sz;
  wchar_t *wz;
};

/* 8511 */
struct _output_l::__l83::_count_string
{
  __int16 Length;
  __int16 MaximumLength;
  char *Buffer;
};

/* 8512 */
#pragma pack(push, 4)
struct positional_param
{
  ARG_TYPE arg_type;
  char *arg_ptr;
  char type;
  int flags;
};
#pragma pack(pop)

/* 8513 */
struct HeapManager::Block
{
  HeapManager::Block *next;
  char memBlock[4096];
};

/* 8514 */
struct HeapManager
{
  void *(__cdecl *pOpNew)(unsigned int);
  void (__cdecl *pOpDelete)(void *);
  HeapManager::Block *head;
  HeapManager::Block *tail;
  unsigned int blockLeft;
};

/* 8515 */
struct DNameNode
{
  DNameNodeVtbl *vfptr;
  DNameNode *next;
};

/* 8516 */
struct DNameNodeVtbl
{
  int (__cdecl *length)(DNameNode *this);
  char (__cdecl *getLastChar)(DNameNode *this);
  char *(__cdecl *getString)(DNameNode *this, char *, int);
};

/* 8517 */
struct DName
{
  DNameNode *node;
  int _bf4;
};

/* 8518 */
struct Replicator
{
  int index;
  DName *dNameBuffer[10];
  DName ErrorDName;
  DName InvalidDName;
};

/* 8519 */
struct __declspec(align(4)) charNode
{
  DNameNode baseclass_0;
  char me;
};

/* 8520 */
struct pcharNode
{
  DNameNode baseclass_0;
  char *me;
  int myLen;
};

/* 8521 */
struct UnDecorator
{
  Replicator ArgList;
  Replicator ZNameList;
};

/* 8522 */
struct pDNameNode
{
  DNameNode baseclass_0;
  DName *me;
};

/* 8523 */
struct DNameStatusNode
{
  DNameNode baseclass_0;
  DNameStatus me;
  int myLen;
};

/* 8524 */
struct __type_info_node
{
  void *memPtr;
  __type_info_node *next;
};

/* 8525 */
struct TypeDescriptor
{
  unsigned int hash;
  void *spare;
  char name[];
};

/* 8526 */
struct PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 8527 */
struct _s_CatchableType
{
  unsigned int properties;
  TypeDescriptor *pType;
  PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)();
};

/* 8528 */
struct _s_CatchableTypeArray
{
  int nCatchableTypes;
  _s_CatchableType *arrayOfCatchableTypes[];
};

/* 8529 */
struct _s_ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)();
  int (__cdecl *pForwardCompat)();
  _s_CatchableTypeArray *pCatchableTypeArray;
};

/* 8530 */
struct EHExceptionRecord::EHParameters
{
  unsigned int magicNumber;
  void *pExceptionObject;
  _s_ThrowInfo *pThrowInfo;
};

/* 8531 */
struct EHExceptionRecord
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  EHExceptionRecord::EHParameters params;
};

/* 8532 */
#pragma pack(push, 2)
struct _tiddata
{
  unsigned int _tid;
  unsigned int _thandle;
  int _terrno;
  unsigned int _tdoserrno;
  unsigned int _fpds;
  unsigned int _holdrand;
  char *_token;
  unsigned __int16 *_wtoken;
  char *_mtoken;
  char *_errmsg;
  unsigned __int16 *_werrmsg;
  char *_namebuf0;
  unsigned __int16 *_wnamebuf0;
  char *_namebuf1;
  unsigned __int16 *_wnamebuf1;
  char *_asctimebuf;
  unsigned __int16 *_wasctimebuf;
  void *_gmtimebuf;
  char *_cvtbuf;
  char _con_ch_buf[5];
  unsigned __int16 _ch_buf_used;
  void *_initaddr;
  void *_initarg;
  void *_pxcptacttab;
  void *_tpxcptinfoptrs;
  int _tfpecode;
  unsigned int _NLG_dwCode;
  void *_terminate;
  void *_unexpected;
  void *_translator;
  void *_purecall;
  void *_curexception;
  void *_curcontext;
  int _ProcessingThrow;
  void *_curexcspec;
  void *_pExitContext;
  void *_pUnwindContext;
  void *_pFrameInfoChain;
  int _FrameInfo[6];
  void *_pForeignException;
  void *_reserved1;
  void *_reserved2;
  void *_reserved3;
  int _cxxReThrow;
};
#pragma pack(pop)

/* 8533 */
union _CRT_DOUBLE_COMPONENTS
{
  double d;
};

/* 8534 */
union _dbl
{
  int lng[2];
  double dbl;
};

/* 8535 */
struct constant
{
  const double PI_OVER_TWO;
  const double PI_INV;
  const double YMAX;
  const float zero;
  const float one;
  const float minus_one;
  const float one_half;
  _dbl _C1;
  _dbl _C2;
  const double SinCosCoeffr1;
  const double SinCosCoeffr2;
  const double SinCosCoeffr3;
  const double SinCosCoeffr4;
  const double SinCosCoeffr5;
  const double SinCosCoeffr6;
  const double SinCosCoeffr7;
  const double SinCosCoeffr8;
};

/* 8536 */
struct _U32ARRAY
{
  unsigned int W[4];
};

/* 8537 */
struct _U64
{
  unsigned int W[2];
};

/* 8538 */
struct _FP128
{
  unsigned int W[4];
};

/* 8539 */
struct _FPIEEE_EXCEPTION_FLAGS
{
  int _bf0;
};

/* 8540 */
struct _FP80
{
  unsigned __int16 W[5];
};

/* 8541 */
struct _I64
{
  unsigned int W[2];
};

/* 8542 */
struct _BCD80
{
  unsigned __int16 W[5];
};

/* 8543 */
struct _FPQ64
{
  __int64 W[2];
};

/* 8544 */
union $B954F46B24A043977E46D0D794375E35
{
  float Fp32Value;
  double Fp64Value;
  _FP80 Fp80Value;
  _FP128 Fp128Value;
  __int16 I16Value;
  int I32Value;
  _I64 I64Value;
  unsigned __int16 U16Value;
  unsigned int U32Value;
  _U64 U64Value;
  _BCD80 Bcd80Value;
  char *StringValue;
  int CompareValue;
  _U32ARRAY U32ArrayValue;
  __int64 Q64Value;
  _FPQ64 Fpq64Value;
};

/* 8545 */
struct __declspec(align(16)) _FPIEEE_VALUE
{
  $B954F46B24A043977E46D0D794375E35 Value;
  int _bf16;
};

/* 8546 */
struct _FPIEEE_RECORD
{
  int _bf0;
  _FPIEEE_EXCEPTION_FLAGS Cause;
  _FPIEEE_EXCEPTION_FLAGS Enable;
  _FPIEEE_EXCEPTION_FLAGS Status;
  _FPIEEE_VALUE Operand1;
  _FPIEEE_VALUE Operand2;
  _FPIEEE_VALUE Result;
};

/* 8547 */
struct _FloatOutStruct
{
  __int16 exp;
  char sign;
  char ManLen;
  char man[22];
};

/* 8548 */
struct FpFormatDescriptor
{
  int max_exp;
  int min_exp;
  int precision;
  int exp_width;
  int format_width;
  int bias;
};

/* 8549 */
struct FRAME_BACKCHAIN
{
  unsigned int BackChain;
  unsigned int CompilerReserved;
  __declspec(align(16)) __int64 ParameterArea;
  _BYTE gap18[56];
};

/* 8550 */
struct FRAME_LONGJMP
{
  unsigned int BackChain;
  unsigned int CompilerReserved;
  unsigned int LjReturnAddr;
  __declspec(align(8)) __int64 ParameterArea;
  _BYTE gap18[56];
};

/* 8551 */
struct T
{
  __int64 t1;
};

/* 8552 */
struct transitiondate
{
  int yr;
  int yd;
  int ms;
};

/* 8553 */
union FT
{
  unsigned __int64 ft_scalar;
  _FILETIME ft_struct;
};

/* 8554 */
struct _XCPT_ACTION
{
  unsigned int XcptNum;
  int SigNum;
  void (__cdecl *XcptAction)(int);
};

/* 8555 */
struct $367BCB2D395CFD92B632E6828BC9D541
{
  _RTL_CRITICAL_SECTION *lock;
  $1DD7A03358E0D01DD359262876E6A0F0 kind;
};

/* 8556 */
struct rterrmsgs
{
  int rterrno;
  char *rterrtxt;
};

/* 8557 */
struct $19CCDB051F529B7A9950FC7E4819396C
{
  int upperhalf;
  unsigned int lowerhalf;
};

/* 8558 */
union doubleint
{
  __int64 bigint;
  $19CCDB051F529B7A9950FC7E4819396C twoints;
};

/* 8559 */
struct errentry
{
  unsigned int oscode;
  int errnocode;
};

/* 8560 */ typedef int (__cdecl *PFNXAMISUIACTIVE)();

/* 8561 */ typedef void (__cdecl *XHTTP_STATUS_CALLBACK)(void *, unsigned int, unsigned int, void *, unsigned int);

/* 8562 */ typedef void (__cdecl *D3DSWAPCALLBACK)(_D3DSWAPDATA *);

/* 8563 */ typedef _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;

/* 8564 */ typedef HDC__ *HDC;

/* 8565 */ typedef _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;

/* 8566 */ typedef _PHYSICAL_MEMORY_DESCRIPTOR *PPHYSICAL_MEMORY_DESCRIPTOR;

/* 8567 */ typedef void _Ty;

/* 8568 */ typedef CFFOLDER_HMAC *PCFFOLDER_HMAC;

/* 8569 */ typedef char visdata_t;

/* 8570 */ typedef IDirectXFileBinary **LPLPDIRECTXFILEBINARY;

/* 8571 */ typedef unsigned __int16 wchar_t;

/* 8572 */ typedef char *LPBYTE;

/* 8573 */ typedef IUnknown *LPUNKNOWN;

/* 8574 */ typedef _DEVICE_OBJECT *PDEVICE_OBJECT;

/* 8575 */ typedef char *pchar_t;

/* 8576 */ typedef _CSTRING *PCOBJECT_STRING;

/* 8577 */ typedef const char *LPCXAUDIOVOICEFXINDEX;

/* 8578 */ typedef unsigned int SSM_BITARRAY;

/* 8579 */ typedef _XSWAPDISC_ERROR_TEXT *PXSWAPDISC_ERROR_TEXT;

/* 8580 */ typedef _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

/* 8581 */ typedef _KMUTANT *PRKMUTANT;

/* 8582 */ typedef sockaddr *PSOCKADDR;

/* 8583 */ typedef void *CodeBlock;

/* 8584 */ typedef char XAUDIOFXID;

/* 8585 */ typedef _XONLINE_CONFIG_TASK_PRI_PARAMS *PXONLINE_CONFIG_TASK_PRI_PARAMS;

/* 8586 */ typedef HKEY__ **PHKEY;

/* 8587 */ typedef unsigned int ulCodecArray[3];

/* 8588 */ typedef _DISK_GEOMETRY *PDISK_GEOMETRY;

/* 8589 */ typedef char (__cdecl *PPROCESS_STARTER_ROUTINE)(void *);

/* 8590 */ typedef unsigned int (__cdecl *ChangeChunkFunc)(XGRAPHICS::VerNode *, void *, unsigned int, unsigned int, XGRAPHICS::VerNode **);

/* 8591 */ typedef _OBJECT_SYMBOLIC_LINK *POBJECT_SYMBOLIC_LINK;

/* 8592 */ typedef XGRAPHICS::_IA_FLOATUSAGE_BLOCK *PIA_FLOATUSAGE_BLOCK;

/* 8593 */ typedef _OSVERSIONINFOW *POSVERSIONINFOW;

/* 8594 */ typedef _DVD_AP25_CHALLENGE_TABLE_HEADER *PDVD_AP25_CHALLENGE_TABLE_HEADER;

/* 8595 */ typedef UVBASE_ENUMERATEVOICECHATSPARAM *PUVBASE_ENUMERATEVOICECHATSPARAM;

/* 8596 */ typedef _ERWLOCK *PERWLOCK;

/* 8597 */ typedef _PORT_MESSAGE *PPORT_MESSAGE;

/* 8598 */ typedef void (__cdecl *OB_CLOSE_METHOD)(void *, unsigned int);

/* 8599 */ typedef XAUDIOFORMAT *LPXAUDIOFORMAT;

/* 8600 */ typedef _D3DXCONSTANTTABLE_DESC *LPD3DXCONSTANTTABLE_DESC;

/* 8601 */ typedef void (__cdecl *PIMAGE_TLS_CALLBACK)(void *, unsigned int, void *);

/* 8602 */ typedef HWINSTA__ *HWINSTA;

/* 8603 */ typedef _TESTXEXXUILOCK *PTESTXEXXUILOCK;

/* 8604 */ typedef _OSVERSIONINFOA *POSVERSIONINFOA;

/* 8605 */ typedef unsigned __int64 *PDWORDLONG;

/* 8606 */ typedef _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;

/* 8607 */ typedef _currencyfmtA *LPCURRENCYFMTA;

/* 8608 */ typedef _XMSG_GET_PROP_REQUEST *PXMSG_GET_PROP_REQUEST;

/* 8609 */ typedef IXHVEngine *LPIXHVENGINE;

/* 8610 */ typedef ID3DXEffect *LPD3DXEFFECT;

/* 8611 */ typedef D3DPixelShader *PDIRECT3DPIXELSHADER9;

/* 8612 */ typedef char XAUDIOVOICEFXINDEX;

/* 8613 */ typedef ID3DXEffectCompiler *LPD3DXEFFECTCOMPILER;

/* 8614 */ typedef unsigned __int16 XAUDIODRVFRAMESIZE;

/* 8615 */ typedef int AT;

/* 8616 */ typedef void *LOCALHANDLE;

/* 8617 */ typedef __int16 DT;

/* 8618 */ typedef int (__cdecl *FARPROC)();

/* 8619 */ typedef _D3DXFRAME *LPD3DXFRAME;

/* 8620 */ typedef _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;

/* 8621 */ typedef XAUDIOCHANNELMAP *LPCXAUDIOCHANNELMAP;

/* 8622 */ typedef _XMSG_DETAILS *PXMSG_DETAILS;

/* 8623 */ typedef _EXCEPTION_RECORD *LPEXCEPTION_RECORD;

/* 8624 */ typedef HRESULT __cdecl D3DHWLVSDELETEFUNC(_ATID3DCTX *, unsigned int, _ATIVSFUNC *);

/* 8625 */ typedef D3DVertexDeclaration *PDIRECT3DVERTEXDECLARATION9;

/* 8626 */ typedef char raw_byte16;

/* 8627 */ typedef XAUDIO::XAUDIOVOICEINIT *LPCXAUDIOVOICEINIT;

/* 8628 */ typedef XGRAPHICS::_IA_INTERNALCONST_ALLOCATOR *PIA_INTERNALCONST_ALLOC;

/* 8629 */ typedef _XUSER_PLAYERLIST_INTERNAL *PXUSER_PLAYERLIST_INTERNAL;

/* 8630 */ typedef char XAUDIOVOICECATEGORY;

/* 8631 */ typedef XGRAPHICS::_XLT_CONTEXT_ASSM_INFO *PXLT_CONTEXT_ASSM_INFO;

/* 8632 */ typedef char *voidpf;

/* 8633 */ typedef int *PSPFN_NUMBER;

/* 8634 */ typedef void (__cdecl *CLIENT_DEBUGSTRING)(void *, char *, char *, char *);

/* 8635 */ typedef _DUMP_SYSTEM_GLOBALS *PDUMP_SYSTEM_GLOBALS;

/* 8636 */ typedef char (__cdecl *PKSYNCHRONIZE_ROUTINE)(void *);

/* 8637 */ typedef char *PTCH;

/* 8638 */ typedef void (__cdecl *BINKMEMFREE)(void *);

/* 8639 */ typedef _XSTORAGE_FILE_INFO *PXSTORAGE_FILE_INFO;

/* 8640 */ typedef int __cdecl dColliderFn(dxGeom *, dxGeom *, int, dContactGeom *, int);

/* 8641 */ typedef unsigned __int64 *PUINT64;

/* 8642 */ typedef ID3DXKeyframedAnimationSet *LPD3DXKEYFRAMEDANIMATIONSET;

/* 8643 */ typedef XGRAPHICS::_OBJECT_STORE *POBJECT_STORE;

/* 8644 */ typedef _OSVERSIONINFOA *POSVERSIONINFO;

/* 8645 */ typedef _FILE_LINK_INFORMATION *PFILE_LINK_INFORMATION;

/* 8646 */ typedef void *HGDIOBJ;

/* 8647 */ typedef int (__cdecl *PRTL_ENUM_HEAPS_ROUTINE)(void *, void *);

/* 8648 */ typedef unsigned int D3DPOOL;

/* 8649 */ typedef _D3DXCONSTANT_DESC *LPD3DXCONSTANT_DESC;

/* 8650 */ typedef XGRAPHICS::_CS_REQUIRED_RENDERSTATE *PCS_REQUIRED_RENDERSTATE;

/* 8651 */ typedef GfxLightDef *GfxLightDefPtr;

/* 8652 */ typedef char *(__cdecl *lbFeederItemTextFn)(_XUSER_STATS_ROW *, int, Material **);

/* 8653 */ typedef void *(__cdecl *MEMALLOCFUNC)(unsigned int);

/* 8654 */ typedef XAUDIO::XAUDIOVOICEINIT *LPXAUDIOVOICEINIT;

/* 8655 */ typedef char *LPXAUDIOSPEAKER;

/* 8656 */ typedef HRESULT (__cdecl *PFN_GETCOUNT)(void *, unsigned int *);

/* 8657 */ typedef _D3DXEFFECTDEFAULT *LPD3DXEFFECTDEFAULT;

/* 8658 */ typedef _KTHREAD *PRKTHREAD;

/* 8659 */ typedef _OSVERSIONINFOEXA *POSVERSIONINFOEX;

/* 8660 */ typedef _RTL_HEAP_USAGE *PRTL_HEAP_USAGE;

/* 8661 */ typedef _CDROM_DISK_DATA *PCDROM_DISK_DATA;

/* 8662 */ typedef void (__cdecl *fn_touch)(gentity_s *, gentity_s *, int);

/* 8663 */ typedef _VOLUME_CONTROL *PVOLUME_CONTROL;

/* 8664 */ typedef fd_set *PFD_SET;

/* 8665 */ typedef void XUIMessageData;

/* 8666 */ typedef ID3DXSkinInfo *LPD3DXSKININFO;

/* 8667 */ typedef unsigned int uIntf;

/* 8668 */ typedef char byte128;

/* 8669 */ typedef MICPROXY *PMICPROXY;

/* 8670 */ typedef void *__cdecl dAllocFunction(unsigned int);

/* 8671 */ typedef void *SSM_CP_DATAHANDLE;

/* 8672 */ typedef IXAudioFrameBuffer *LPXAUDIOFRAMEBUFFER;

/* 8673 */ typedef _XINPUT_KEYBOARDSTATE *PXINPUT_KEYBOARDSTATE;

/* 8674 */ typedef unsigned int *PULONG32;

/* 8675 */ typedef _XUIRESOURCE *HXUIRESOURCE;

/* 8676 */ typedef HRESULT (__cdecl *LPOutputCallback)(void *, const char *, unsigned int);

/* 8677 */ typedef int *PBOOL;

/* 8678 */ typedef HICON__ *HCURSOR;

/* 8679 */ typedef tagPOINT *PPOINT;

/* 8680 */ typedef _IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

/* 8681 */ typedef _XONLINE_ATTRIBUTE *PXONLINE_ATTRIBUTE;

/* 8682 */ typedef NCIENCODER_EXTENSION *PNCIENCODER_EXTENSION;

/* 8683 */ typedef void (__cdecl *fn_die)(gentity_s *, gentity_s *, gentity_s *, int, int, const int, const float *, hitLocation_t, int);

/* 8684 */ typedef float FLOAT;

/* 8685 */ typedef bool _Bool;

/* 8686 */ typedef char UINT8;

/* 8687 */ typedef float XAUDIODRVVOLUME;

/* 8688 */ typedef volatile int volatile_int32;

/* 8689 */ typedef char *PINT8;

/* 8690 */ typedef _OSVERSIONINFOEXW *POSVERSIONINFOEXW;

/* 8691 */ typedef int (__cdecl *PFNXNENETINTERCEPTXMITCALLBACK)(void *, const char *, unsigned int);

/* 8692 */ typedef const int *LPCXAUDIODEBUGLEVEL;

/* 8693 */ typedef unsigned int UINT4;

/* 8694 */ typedef unsigned int uint4[4];

/* 8695 */ typedef unsigned __int64 DATAFLOW_WORD;

/* 8696 */ typedef IClassFactory *LPCLASSFACTORY;

/* 8697 */ typedef _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW;

/* 8698 */ typedef int XAUDIOPIXVALUE;

/* 8699 */ typedef _OSVERSIONINFOEXA *POSVERSIONINFOEXA;

/* 8700 */ typedef _IDE_SECURITY_DATA *PIDE_SECURITY_DATA;

/* 8701 */ typedef _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;

/* 8702 */ typedef float *PFLOAT;

/* 8703 */ typedef unsigned int UINT;

/* 8704 */ typedef unsigned int uint;

/* 8705 */ typedef unsigned int uInt;

/* 8706 */ typedef unsigned int *PULONG;

/* 8707 */ typedef unsigned int REGOPTINDEX;

/* 8708 */ typedef XAUDIORENDERFXCALLBACK *LPXAUDIORENDERFXCALLBACK;

/* 8709 */ typedef int *PINT;

/* 8710 */ typedef XGRAPHICS::_AS_ICONST *PAS_ICONST;

/* 8711 */ typedef _IMAGE_XEX_DIRECTORY_ENTRY *PIMAGE_XEX_DIRECTORY_ENTRY;

/* 8712 */ typedef char __C_ASSERT__[1];

/* 8713 */ typedef ID3DXAllocateHierarchy *LPD3DXALLOCATEHIERARCHY;

/* 8714 */ typedef _XONLINE_MATCH_SPLITRESULT *PXONLINE_MATCH_SPLITRESULT;

/* 8715 */ typedef XAUDIOSOURCEVOICEINIT *LPXAUDIOSOURCEVOICEINIT;

/* 8716 */ typedef DM_XAM_SERVICES *PDM_XAM_SERVICES;

/* 8717 */ typedef _OBJECT_NAME_INFORMATION *POBJECT_NAME_INFORMATION;

/* 8718 */ typedef tagPOINTS *PPOINTS;

/* 8719 */ typedef HRGN__ *HRGN;

/* 8720 */ typedef XGRAPHICS::_R400VSFUNC *PR400VSFUNC;

/* 8721 */ typedef char max_msg_buf[131072];

/* 8722 */ typedef _POINTL *PPOINTL;

/* 8723 */ typedef _numberfmtW *LPNUMBERFMTW;

/* 8724 */ typedef float dQuaternion[4];

/* 8725 */ typedef unsigned int FOURCC;

/* 8726 */ typedef _FLOAT128 *PFLOAT128;

/* 8727 */ typedef _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;

/* 8728 */ typedef _NT_PRODUCT_TYPE *PNT_PRODUCT_TYPE;

/* 8729 */ typedef float *LPXAUDIOFREQSCALE;

/* 8730 */ typedef _IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA;

/* 8731 */ typedef HMONITOR__ *HMONITOR;

/* 8732 */ typedef HBRUSH__ *HBRUSH;

/* 8733 */ typedef void (__cdecl *PIXHOOK)(unsigned int, void *, unsigned int, unsigned int);

/* 8734 */ typedef const unsigned int (*LPCXAUDIOVECTORI)[4];

/* 8735 */ typedef ID3DXAnimationSet *LPD3DXANIMATIONSET;

/* 8736 */ typedef XGRAPHICS::_IA_INTERNALCONST_BLOCK_HEADER *PIA_INTERNALCONST_BLOCK_HEADER;

/* 8737 */ typedef XGRAPHICS::__HW_STATE_MAP_INFO *PHW_STATE_MAP_INFO;

/* 8738 */ typedef UVBASE_SESSION_INFO *PUVBASE_SESSION_INFO;

/* 8739 */ typedef _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;

/* 8740 */ typedef char XAUDIOVOICEFXSTATE;

/* 8741 */ typedef _FILE_DIRECTORY_INFORMATION *PFILE_DIRECTORY_INFORMATION;

/* 8742 */ typedef _D3DXREGISTER_SET *LPD3DXREGISTER_SET;

/* 8743 */ typedef int (__cdecl *CMPKEYF)(void *, void *);

/* 8744 */ typedef D3DIndexBuffer *LPDIRECT3DINDEXBUFFER9;

/* 8745 */ typedef void (__cdecl *PFNDM_REBOOT_TITLE)(unsigned int);

/* 8746 */ typedef HRESULT (__cdecl *PAsmFindDeclCallback)(void *, D3DXShader::D3DXTOKEN *, unsigned int, D3DXShader::CNode **);

/* 8747 */ typedef VOICECHAT_EXTENSION *PVOICECHAT_EXTENSION;

/* 8748 */ typedef unsigned int _U32;

/* 8749 */ typedef XAUDIOVOICEFXCHAIN *LPXAUDIOVOICEFXCHAIN;

/* 8750 */ typedef _FSINFOCLASS *PFS_INFORMATION_CLASS;

/* 8751 */ typedef D3DVolumeTexture *PDIRECT3DVOLUMETEXTURE9;

/* 8752 */ typedef unsigned int *LPXAUDIOLOOPCOUNT;

/* 8753 */ typedef IDirectXFileEnumObject **LPLPDIRECTXFILEENUMOBJECT;

/* 8754 */ typedef IXAudioRenderEffect *LPXAUDIORENDEREFFECT;

/* 8755 */ typedef _XSESSION_INFO *PXSESSION_INFO;

/* 8756 */ typedef const char *LPCXAUDIOVOICEINDEX;

/* 8757 */ typedef unsigned int COLORREF;

/* 8758 */ typedef wchar_t *PWCHAR;

/* 8759 */ typedef clipMap_t *clipMap_ptr;

/* 8760 */ typedef void *const *PXHV_PROCESSING_MODE;

/* 8761 */ typedef D3DDevice *LPDIRECT3DDEVICE9;

/* 8762 */ typedef const char *LPCXAUDIOCHANNEL;

/* 8763 */ typedef XAUDIOVOICEOUTPUT *LPCXAUDIOVOICEOUTPUT;

/* 8764 */ typedef _CDROM_SUB_Q_DATA_FORMAT *PCDROM_SUB_Q_DATA_FORMAT;

/* 8765 */ typedef void (__cdecl **LPXHTTP_STATUS_CALLBACK)(void *, unsigned int, unsigned int, void *, unsigned int);

/* 8766 */ typedef _currencyfmtA *LPCURRENCYFMT;

/* 8767 */ typedef XGRAPHICS::_PM4CMDSETSTATE *PPM4CMDSETSTATE;

/* 8768 */ typedef _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_RUNTIME_FUNCTION_ENTRY;

/* 8769 */ typedef _XSHOWFRIENDSUI_PARAMS *PXSHOWFRIENDSUI_PARAMS;

/* 8770 */ typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned int);

/* 8771 */ typedef void __cdecl DB_Interrupt();

/* 8772 */ typedef char XAUDIOFXPARAMTYPE;

/* 8773 */ typedef int XPartBits[4];

/* 8774 */ typedef unsigned __int64 _ULonglong;

/* 8775 */ typedef _LAST_EXCEPTION_LOG *PLAST_EXCEPTION_LOG;

/* 8776 */ typedef _QUERY_ADD_RESULT *PQUERY_ADD_RESULT;

/* 8777 */ typedef XGRAPHICS::_R400IL_PS_INPUTREG *PR400IL_PS_INPUTREG;

/* 8778 */ typedef unsigned __int64 *PULONGLONG;

/* 8779 */ typedef _XMATCH_SEARCHRESULT *PXMATCH_SEARCHRESULT;

/* 8780 */ typedef _MSR *PMSR;

/* 8781 */ typedef _XEX_COMPRESSED_DATA_DESCRIPTOR *PXEX_COMPRESSED_DATA_DESCRIPTOR;

/* 8782 */ typedef BINK *HBINK;

/* 8783 */ typedef int (__cdecl *PRTL_ACQUIRE_LOCK_ROUTINE)(void *);

/* 8784 */ typedef unsigned __int16 *PUSHORT;

/* 8785 */ typedef unsigned int (__cdecl *PFNXAMSWAPDISC)(char, void *, _XSWAPDISC_ERROR_TEXT *);

/* 8786 */ typedef _XASYNCMESSAGE *PXASYNCMESSAGE;

/* 8787 */ typedef _ACL *PACL;

/* 8788 */ typedef unsigned __int64 SSM_UINT64;

/* 8789 */ typedef void __cdecl GfxDrawCallback(const void *, GfxCmdBufContext, GfxCmdBufContext);

/* 8790 */ typedef PACKET_PROCESSOR *PPACKET_PROCESSOR;

/* 8791 */ typedef void (__cdecl *FX_DrawElemHandler)(FxDrawState *);

/* 8792 */ typedef unsigned int PREDSTACKDEPTH;

/* 8793 */ typedef unsigned int *PRING;

/* 8794 */ typedef _KSEMAPHORE *PKSEMAPHORE;

/* 8795 */ typedef __int16 INT16;

/* 8796 */ typedef void (__cdecl *PSATA_START_PACKET_ROUTINE)(_SATA_CHANNEL_EXTENSION *, _IRP *);

/* 8797 */ typedef XGRAPHICS::_R400FFVSSTATE *PR400FFVSSTATE;

/* 8798 */ typedef void (__cdecl *PEX_TITLE_TERMINATE_NOTIFICATION)(_EX_TITLE_TERMINATE_REGISTRATION *);

/* 8799 */ typedef _STRING *PSTRING;

/* 8800 */ typedef unsigned int *PXCONTENTDEVICEID;

/* 8801 */ typedef unsigned int *PSECURITY_INFORMATION;

/* 8802 */ typedef HRESULT __cdecl ATIPRIMFUNC(_ATID3DCTX *, ATIPRIMTYPE, unsigned int, unsigned int);

/* 8803 */ typedef const char *XString;

/* 8804 */ typedef void (__cdecl *ScriptCallbackEnt)(gentity_s *, int);

/* 8805 */ typedef int _off_t;

/* 8806 */ typedef XAUDIOFXMGRINIT *LPCXAUDIOFXMGRINIT;

/* 8807 */ typedef void *(__cdecl *Alloc_t)(int);

/* 8808 */ typedef _FILE_INTERNAL_INFORMATION *PFILE_INTERNAL_INFORMATION;

/* 8809 */ typedef HRESULT (__cdecl *PFN_DESTROYINST)(void *);

/* 8810 */ typedef _XCONTENT_MOUNTED_PACKAGE *PXCONTENT_MOUNTED_PACKAGE;

/* 8811 */ typedef XGRAPHICS::_PM4CMDIMLOAD *PPM4CMDIMLOAD;

/* 8812 */ typedef XAUDIOSOURCEFXPACKETCALLBACK *LPCXAUDIOSOURCEFXPACKETCALLBACK;

/* 8813 */ typedef IDirectXFileObject *LPDIRECTXFILEOBJECT;

/* 8814 */ typedef _SUB_Q_HEADER *PSUB_Q_HEADER;

/* 8815 */ typedef _IO_STACK_LOCATION *PIO_STACK_LOCATION;

/* 8816 */ typedef void (__cdecl *_inconsistency_function)();

/* 8817 */ typedef unsigned __int16 raw_ushort;

/* 8818 */ typedef void (__cdecl *fn_use)(gentity_s *, gentity_s *, gentity_s *);

/* 8819 */ typedef int LRESULT;

/* 8820 */ typedef int (__cdecl *R_TimeoutFunction)();

/* 8821 */ typedef bool (__cdecl *TestBoxInSolidFunc_t)(const float *, const float *, void *);

/* 8822 */ typedef int HRESULT;

/* 8823 */ typedef _XCONTSIG_HEADER *PXCONTSIG_HEADER;

/* 8824 */ typedef unsigned int *PKAFFINITY;

/* 8825 */ typedef HRESULT (__cdecl *PXAMTASKPROC)(void *);

/* 8826 */ typedef float shared_vec3_t[3];

/* 8827 */ typedef XHVRESAMPLER *PXHVRESAMPLER;

/* 8828 */ typedef const unsigned int *LPCXAUDIOLOOPCOUNT;

/* 8829 */ typedef int (__cdecl *XBMHandlerFunc)(const char *);

/* 8830 */ typedef D3DVertexBuffer *GfxVertexBufferHandle;

/* 8831 */ typedef int (__cdecl *CODEPAGE_ENUMPROCW)(unsigned __int16 *);

/* 8832 */ typedef _TEAM_MEM_ENUM_RESULTS *PTEAM_MEM_ENUM_RESULTS;

/* 8833 */ typedef XAUDIOFXTABLEENTRY *LPCXAUDIOFXTABLEENTRY;

/* 8834 */ typedef unsigned int *PDWORD;

/* 8835 */ typedef _DMXAPI *PDMXAPI;

/* 8836 */ typedef void *HXAMTASKQUEUE;

/* 8837 */ typedef LIST_ENTRY32 *PLIST_ENTRY32;

/* 8838 */ typedef _XMSG_SUMMARY *PXMSG_SUMMARY;

/* 8839 */ typedef const char *LPCXAUDIOVOICECATEGORY;

/* 8840 */ typedef XHV_CODEC_HEADER *PXHV_CODEC_HEADER;

/* 8841 */ typedef unsigned int LCTYPE;

/* 8842 */ typedef waveformat_tag *PWAVEFORMAT;

/* 8843 */ typedef unsigned int (__cdecl *PFNXAMGETPERSISTENTMEMORY)(_XPERSISTENTMEMPARAMS *);

/* 8844 */ typedef unsigned int *PDWORD32;

/* 8845 */ typedef dxWorld *dWorldID;

/* 8846 */ typedef int HVSTATUS;

/* 8847 */ typedef unsigned int uintptr_t;

/* 8848 */ typedef XGRAPHICS::_TS_TEXTURE_SERVER *PTS_TEXTURE_SERVER;

/* 8849 */ typedef HRESULT __cdecl D3DHWLVSDELETEDECLFUNC(_ATID3DCTX *, _ATIVSDECL *);

/* 8850 */ typedef _FILE_FS_SIZE_INFORMATION *PFILE_FS_SIZE_INFORMATION;

/* 8851 */ typedef float *LPXAUDIOSAMPLE;

/* 8852 */ typedef char *LPXAUDIOTHREADUSAGE;

/* 8853 */ typedef __int64 LONG64;

/* 8854 */ typedef unsigned int *PLOGICAL;

/* 8855 */ typedef char *LPXAUDIOSTOP;

/* 8856 */ typedef void (__cdecl *R_ExecFailed)();

/* 8857 */ typedef _XBOX_KRNL_VERSION *PXBOX_KRNL_VERSION;

/* 8858 */ typedef XGRAPHICS::_CS_INTERP_USAGE *PCS_INTERP_USAGE;

/* 8859 */ typedef void (__cdecl *PKDEFERRED_ROUTINE)(_KDPC *, void *, void *, void *);

/* 8860 */ typedef PROCMODE *PPROCMODE;

/* 8861 */ typedef _RECTL *PRECTL;

/* 8862 */ typedef char *PKNOWN_ISSUE_DATA;

/* 8863 */ typedef char NCIDECODER_OUTPUT_FRAME[640];

/* 8864 */ typedef bool (__cdecl *VERNODEFUNC)(XGRAPHICS::VerNode *, void *);

/* 8865 */ typedef int expressionEntryType;

/* 8866 */ typedef D3DPixelShader *LPDIRECT3DPIXELSHADER9;

/* 8867 */ typedef _RTL_HEAP_USAGE_ENTRY *PRTL_HEAP_USAGE_ENTRY;

/* 8868 */ typedef unsigned int SEQUENCE_NUMBER;

/* 8869 */ typedef XAUDIORENDERDRVCLIENT *LPXAUDIORENDERDRVCLIENT;

/* 8870 */ typedef unsigned __int16 DynEntityId;

/* 8871 */ typedef char *va_list;

/* 8872 */ typedef void *__cdecl AllocateMemoryProc(void *, unsigned int);

/* 8873 */ typedef _EXCEPTION_POINTERS *LPEXCEPTION_POINTERS;

/* 8874 */ typedef void *(__cdecl *CLIENT_OPENFILE)(void *, char *, unsigned int);

/* 8875 */ typedef void *Instruction;

/* 8876 */ typedef const char *LPCXMASUBFRAME;

/* 8877 */ typedef void (__cdecl *PFV)();

/* 8878 */ typedef _XONLINE_MATCH_SEARCHRESULT *PXONLINE_MATCH_SEARCHRESULT;

/* 8879 */ typedef __int16 HALF_PTR;

/* 8880 */ typedef XGRAPHICS::_ABSTRACT_STATE *PABSTRACT_STATE;

/* 8881 */ typedef HRESULT (__cdecl *LPFNXAUDIOQUERYFXSIZE)(XAUDIOFXINIT *, unsigned int *);

/* 8882 */ typedef HRESULT (__cdecl *LPShaderConstantValueCallback)(void *, unsigned int, unsigned int, void *, unsigned int);

/* 8883 */ typedef _TEAM_ENUM_RESULTS *PTEAM_ENUM_RESULTS;

/* 8884 */ typedef _SUB_Q_TRACK_ISRC *PSUB_Q_TRACK_ISRC;

/* 8885 */ typedef XGRAPHICS::_R400_TEXTURE_ELEMENT_FMT *PR400_TEXTURE_ELEMENT_FMT;

/* 8886 */ typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, unsigned int, int, int, const char *, int);

/* 8887 */ typedef XMA2WAVEFORMAT *LPCXMA2WAVEFORMAT;

/* 8888 */ typedef _KSWAP_FRAME *PKSWAP_FRAME;

/* 8889 */ typedef HACCEL__ *HACCEL;

/* 8890 */ typedef _XGD2_GET_TEST_INFO *PXGD2_GET_TEST_INFO;

/* 8891 */ typedef void __cdecl CompileToMicrocodeErrorCallbackFunction(void *, int, D3DXShader::CNode *, unsigned int, const char *);

/* 8892 */ typedef WeaponDef *WeaponDefPtr;

/* 8893 */ typedef unsigned int (__cdecl *D3DGETRENDERSTATECALL)(D3DDevice *);

/* 8894 */ typedef tagSIZE *LPSIZE;

/* 8895 */ typedef XGRAPHICS::_INTEGER_LIST_FACTORY *PINTEGER_LIST_FACTORY;

/* 8896 */ typedef XGI_USERSETPROPERTY_MSG *PXGI_USERSETPROPERTY_MSG;

/* 8897 */ typedef double (__cdecl *TypDefCos)(double);

/* 8898 */ typedef char _TCHAR;

/* 8899 */ typedef char *PTCHAR;

/* 8900 */ typedef unsigned int __vector4i[4];

/* 8901 */ typedef _XSTORAGE_BUILD_SERVER_PATH *PXSTORAGE_BUILD_SERVER_PATH;

/* 8902 */ typedef XMA2STREAMFORMAT *LPXMA2STREAMFORMAT;

/* 8903 */ typedef _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];

/* 8904 */ typedef int (__cdecl *PRTL_HEAP_COMMIT_ROUTINE)(void *, void **, unsigned int *);

/* 8905 */ typedef unsigned __int16 FxEffectHandle;

/* 8906 */ typedef HRESULT (__cdecl *EMITFUNCTIONSW)(D3DXShader::C30SWProgram *this, const char *, const char *, const char *, const char *);

/* 8907 */ typedef _IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

/* 8908 */ typedef SCHEMA_TABLE_ENTRY *LPSCHEMA_TABLE_ENTRY;

/* 8909 */ typedef _KWAIT_BLOCK *PRKWAIT_BLOCK;

/* 8910 */ typedef ID3DXLine *LPD3DXLINE;

/* 8911 */ typedef char *LPXAUDIOSTART;

/* 8912 */ typedef __vector4 *LPCXAUDIOVECTOR;

/* 8913 */ typedef _IMAGE_SYMBOL *PIMAGE_SYMBOL;

/* 8914 */ typedef _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;

/* 8915 */ typedef _STF_CREATE_PACKET *PSTF_CREATE_PACKET;

/* 8916 */ typedef HRESULT (__cdecl *LPSETSHADERCONSTANT)(const void *, unsigned int, const void *, unsigned int *, unsigned int);

/* 8917 */ typedef XMALOOPREGION *LPCXMALOOPREGION;

/* 8918 */ typedef ID3DXInclude *LPD3DXINCLUDE;

/* 8919 */ typedef _XMSG_PROPERTY *PXMSG_PROPERTY;

/* 8920 */ typedef int (__cdecl *BINKIOBGCONTROL)(BINKIO *, unsigned int);

/* 8921 */ typedef void (__cdecl *pmove_trace)(trace_t *, const float *, const float *, const float *, const float *, int, int);

/* 8922 */ typedef tagSIZE *LPSIZEL;

/* 8923 */ typedef XHVBATCHALLOCATOR *PXHVBATCHALLOCATOR;

/* 8924 */ typedef PROCMODE_CODEC_INFO *PPROCMODE_CODEC_INFO;

/* 8925 */ typedef _KDEVICE_QUEUE *PRKDEVICE_QUEUE;

/* 8926 */ typedef _D3DXSHADER_WRITEINFO *LPD3DXSHADER_WRITEINFO;

/* 8927 */ typedef XGRAPHICS::_R400VSDECLTYPE *PR400VSDECLTYPE;

/* 8928 */ typedef IPersist *LPPERSIST;

/* 8929 */ typedef _XVOICEMAILUI_RESULTS *PXVOICEMAILUI_RESULTS;

/* 8930 */ typedef _UCODE_DEBUGGER_PARAMETERS *LPUCODE_DEBUGGER_PARAMETERS;

/* 8931 */ typedef _GUID *LPCGUID;

/* 8932 */ typedef _FILE_FS_CONTROL_INFORMATION *PFILE_FS_CONTROL_INFORMATION;

/* 8933 */ typedef _OBJECT_HEADER_NAME_INFO *POBJECT_HEADER_NAME_INFO;

/* 8934 */ typedef char msg_buf_t[131072];

/* 8935 */ typedef HRESULT __cdecl D3DHWLVSCREATEFUNC(_ATID3DCTX *, unsigned int, _ATIVSFUNC *, void *, unsigned int);

/* 8936 */ typedef unsigned int *LPCOLORREF;

/* 8937 */ typedef bool __cdecl TriangleVisitorFunc(void *, GfxPackedVertex **);

/* 8938 */ typedef char byte4;

/* 8939 */ typedef _Q_LIST_REPLY_MSG *PQ_LIST_REPLY_MSG;

/* 8940 */ typedef RedBlackTreeNode *(__cdecl *RedBlackTreeAllocCallback)();

/* 8941 */ typedef unsigned __int16 XMSG_PROPERTY_STRING_INTERNAL;

/* 8942 */ typedef void *DBFile;

/* 8943 */ typedef _FIRMWARE_REENTRY *PFIRMWARE_REENTRY;

/* 8944 */ typedef _D3DXSHADER_STRUCTMEMBERINFO *LPD3DXSHADER_STRUCTMEMBERINFO;

/* 8945 */ typedef unsigned int PATHLEN;

/* 8946 */ typedef UVBASE_REQUESTVOICECHATPARAM *PUVBASE_REQUESTVOICECHATPARAM;

/* 8947 */ typedef char byte;

/* 8948 */ typedef char BYTE;

/* 8949 */ typedef char Byte;

/* 8950 */ typedef void (__cdecl *LPFIBER_START_ROUTINE)(void *);

/* 8951 */ typedef XGRAPHICS::_ATIVSVTXELEM *PATIVSVTXELEM;

/* 8952 */ typedef void *LPXAUDIOSUBMIXVOICE;

/* 8953 */ typedef void (__cdecl *dstepper_fn_t)(dxWorld *, dxBody *const *, int, dxJoint *const *, int, float);

/* 8954 */ typedef void *(__cdecl *PFLS_GETVALUE_FUNCTION)(unsigned int);

/* 8955 */ typedef _KEVENT *PRKEVENT;

/* 8956 */ typedef XAUDIOCHANNELVOLUMEENTRY *LPXAUDIOCHANNELVOLUMEENTRY;

/* 8957 */ typedef D3DConstantBuffer *LPDIRECT3DCONSTANTBUFFER9;

/* 8958 */ typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;

/* 8959 */ typedef editFieldDef_s *editFieldDef_ptr;

/* 8960 */ typedef void *SndLengthNotifyData;

/* 8961 */ typedef int __cdecl COMP(unsigned int, unsigned int, const void *);

/* 8962 */ typedef XAnimParts *XAnimPartsPtr;

/* 8963 */ typedef _XEX_IMPORT_DESCRIPTOR *PXEX_IMPORT_DESCRIPTOR;

/* 8964 */ typedef char (__cdecl *PRTL_OKAY_TO_LOCK_ROUTINE)(void *);

/* 8965 */ typedef HPEN__ *HPEN;

/* 8966 */ typedef _IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;

/* 8967 */ typedef _CondR *PCondR;

/* 8968 */ typedef void (__cdecl *PHAL_HDDVD_ROM_NOTIFICATION)(_HAL_HDDVD_ROM_REGISTRATION *, struct _SPIF_NOTIFICATION *);

/* 8969 */ typedef void (__cdecl *ScriptCallbackHudElem)(game_hudelem_s *, int);

/* 8970 */ typedef _XVIRTUALKBDUI_PARAMS *PXVIRTUALKBDUI_PARAMS;

/* 8971 */ typedef void *PVOID;

/* 8972 */ typedef void *NEM_KEY;

/* 8973 */ typedef unsigned __int16 XAUDIOFRAMESIZE;

/* 8974 */ typedef _XUSER_READ_PROFILE_SETTING_RESULT *PXUSER_READ_PROFILE_SETTING_RESULT;

/* 8975 */ typedef void **PHXAMTASKQUEUE;

/* 8976 */ typedef unsigned int Filter[8];

/* 8977 */ typedef int lCodecArray[3];

/* 8978 */ typedef _D3DHAL_DP2CREATEVERTEXSHADERFUNC *LPD3DHAL_DP2CREATEVERTEXSHADERFUNC;

/* 8979 */ typedef unsigned int UINT32;

/* 8980 */ typedef int Uint32;

/* 8981 */ typedef XGRAPHICS::_R400FFVSCNTL *PR400FFVSCNTL;

/* 8982 */ typedef int *PINT32;

/* 8983 */ typedef void (__cdecl *PKD_SENDWAIT_HOOK)();

/* 8984 */ typedef _XMATCH_SESSION *PXMATCH_SESSION;

/* 8985 */ typedef _XMEDIA_VIDEO_FRAME *PXMEDIA_VIDEO_FRAME;

/* 8986 */ typedef _XASSET_ENUMERATE_RESPONSE *PXASSET_ENUMERATE_RESPONSE;

/* 8987 */ typedef char Bytef;

/* 8988 */ typedef D3DTexture *LPDIRECT3DTEXTURE9;

/* 8989 */ typedef XAUDIO::XAUDIOROUTEDVOICEINIT *LPCXAUDIOROUTEDVOICEINIT;

/* 8990 */ typedef const unsigned int *LPCXAUDIODRVSPEAKERCONFIG;

/* 8991 */ typedef _XMSG_SET_PROP_REQUEST *PXMSG_SET_PROP_REQUEST;

/* 8992 */ typedef _HVSTATS_TLB *PHVSTATS_TLB;

/* 8993 */ typedef _UCODE_PASS_HEADER *LPUCODE_PASS_HEADER;

/* 8994 */ typedef unsigned int GfxPackedColor;

/* 8995 */ typedef _RTL_HEAP_TAG_INFO *PRTL_HEAP_TAG_INFO;

/* 8996 */ typedef HRESULT (__cdecl *PFN_XUIGLYPHSUBSTITUTION)(_XUIFONT *, wchar_t, unsigned int, unsigned __int16 *, unsigned __int16 *, unsigned __int16 *, D3DTexture **, XUIRect *);

/* 8997 */ typedef unsigned __int64 XOFFERING_ID;

/* 8998 */ typedef XGRAPHICS::_AS_CONST_INFO *PAS_CONST_INFO;

/* 8999 */ typedef const unsigned int *LPCXAUDIODRVLOCKTYPE;

/* 9000 */ typedef void (__cdecl *PKKERNEL_ROUTINE)(_KAPC *, void (__cdecl **)(void *, void *, void *), void **, void **, void **);

/* 9001 */ typedef _XONLINE_QUERY_ATTRIBUTE_SPEC *PXONLINE_QUERY_ATTRIBUTE_SPEC;

/* 9002 */ typedef _XSESSION_REGISTRATION_RESULTS *PXSESSION_REGISTRATION_RESULTS;

/* 9003 */ typedef unsigned int VARINDEX;

/* 9004 */ typedef unsigned int (__cdecl *PFNXAMGETPERSISTENTMEMORYSIZES)(_XPERSISTENTMEMPARAMS *, unsigned int *);

/* 9005 */ typedef _D3DXSHADER_TYPEINFO *LPD3DXSHADER_TYPEINFO;

/* 9006 */ typedef char XAUDIOENGINECALLBACKINDEX;

/* 9007 */ typedef XAUDIOFXINFO *LPCXAUDIOFXINFO;

/* 9008 */ typedef XGRAPHICS::_PM4CMDINVALIDATESTATE *PPM4CMDINVALIDATESTATE;

/* 9009 */ typedef XAUDIOFXDATAPARAM *LPCXAUDIOFXDATAPARAM;

/* 9010 */ typedef dxBody *dBodyID;

/* 9011 */ typedef void *XAUDIOCALLBACKHANDLE;

/* 9012 */ typedef _XCONTENT_DATA_INTERNAL *PXCONTENT_DATA_INTERNAL;

/* 9013 */ typedef ID3DXAnimationController *LPD3DXANIMATIONCONTROLLER;

/* 9014 */ typedef HRESULT (__cdecl *PFNCODECDESTROY)(void *);

/* 9015 */ typedef unsigned __int16 GfxModelLightingHandle;

/* 9016 */ typedef int (__cdecl *INPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

/* 9017 */ typedef _KDEVICE_QUEUE_ENTRY *PRKDEVICE_QUEUE_ENTRY;

/* 9018 */ typedef XAUDIOFXMGRINIT *LPXAUDIOFXMGRINIT;

/* 9019 */ typedef int (__cdecl *DATEFMT_ENUMPROCA)(char *);

/* 9020 */ typedef XSVSESSION *PXSVSESSION;

/* 9021 */ typedef D3DPerfCounters *PDIRECT3DPERFCOUNTERS9;

/* 9022 */ typedef _TRACK_MODE_TYPE *PTRACK_MODE_TYPE;

/* 9023 */ typedef _TOKEN_TYPE *PTOKEN_TYPE;

/* 9024 */ typedef _ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

/* 9025 */ typedef _FP_64 *PFP_64;

/* 9026 */ typedef XGRAPHICS::_SSM_DEVINFO *PSSM_DEVINFO;

/* 9027 */ typedef D3DCommandBuffer *PDIRECT3DCOMMANDBUFFER9;

/* 9028 */ typedef unsigned int CHECKSUM;

/* 9029 */ typedef int (__cdecl *DATEFMT_ENUMPROCW)(unsigned __int16 *);

/* 9030 */ typedef XGRAPHICS::_PS_EXTERNAL_BLOCK *PPS_EXTERNAL_BLOCK;

/* 9031 */ typedef XGRAPHICS::_ATIVSCONSTTBL *PATIVSCONSTTBL;

/* 9032 */ typedef XGRAPHICS::_ATIVSELEMREG *PATIVSELEMREG;

/* 9033 */ typedef const wchar_t *LPCWCH;

/* 9034 */ typedef int (__cdecl *BINKSNDPAUSE)(BINKSND *, int);

/* 9035 */ typedef XPRESENCE_ENUM_CONTEXT *PXPRESENCE_ENUM_CONTEXT;

/* 9036 */ typedef XGRAPHICS::_R400IL_PS30_IF *PR400IL_PS30_IF;

/* 9037 */ typedef _FILE_NETWORK_OPEN_INFORMATION *PFILE_NETWORK_OPEN_INFORMATION;

/* 9038 */ typedef _XINPUT_DEVICE_DESCRIPTION *PXINPUT_DEVICE_DESCRIPTION;

/* 9039 */ typedef XMA2STREAMFORMAT *LPCXMA2STREAMFORMAT;

/* 9040 */ typedef _DVD_AP25_CHALLENGE_SET_HEADER *PDVD_AP25_CHALLENGE_SET_HEADER;

/* 9041 */ typedef _DIRECTORY_ENUM_CONTEXT *PDIRECTORY_ENUM_CONTEXT;

/* 9042 */ typedef _RTL_HEAP_INFORMATION *PRTL_HEAP_INFORMATION;

/* 9043 */ typedef void (__cdecl *CLIENT_ASSERT)(void *);

/* 9044 */ typedef _XALLOC_ATTRIBUTES *PXALLOC_ATTRIBUTES;

/* 9045 */ typedef char *PUCHAR;

/* 9046 */ typedef int (__cdecl *EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/* 9047 */ typedef __int64 SSM_INT64;

/* 9048 */ typedef char TUCHAR;

/* 9049 */ typedef void (__cdecl *PIO_APC_ROUTINE)(void *, _IO_STATUS_BLOCK *, unsigned int);

/* 9050 */ typedef void *(__cdecl *D3DALLOCATECALLBACK)(unsigned int, unsigned int, unsigned int *, unsigned int);

/* 9051 */ typedef D3DVertexDeclaration *LPDIRECT3DVERTEXDECLARATION9;

/* 9052 */ typedef int (__cdecl *__cdecl dGetColliderFnFn(int))(dxGeom *, dxGeom *, int, dContactGeom *, int);

/* 9053 */ typedef void *LPSECURITY_ATTRIBUTES;

/* 9054 */ typedef unsigned __int64 DWORDLONG;

/* 9055 */ typedef void **LPXAUDIOCALLBACKHANDLE;

/* 9056 */ typedef XAUDIORENDERFXCALLBACK *LPCXAUDIORENDERFXCALLBACK;

/* 9057 */ typedef _COMPOUND_ACCESS_ALLOWED_ACE *PCOMPOUND_ACCESS_ALLOWED_ACE;

/* 9058 */ typedef unsigned int *(__fastcall *CLIENT_GETCMDBUFF)(void *, unsigned int);

/* 9059 */ typedef XAUDIOREVERBI3DL2SETTINGS *LPXAUDIOREVERBI3DL2SETTINGS;

/* 9060 */ typedef int (__cdecl *BINKSNDOPEN)(BINKSND *, unsigned int, int, int, unsigned int, BINK *);

/* 9061 */ typedef int (__cdecl *LOCALE_ENUMPROCA)(char *);

/* 9062 */ typedef _WSABUF *LPWSABUF;

/* 9063 */ typedef _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;

/* 9064 */ typedef void (__cdecl *PVALIDATE_OUTPUT)(const char *);

/* 9065 */ typedef IXAudioSourceEffect *LPXAUDIOSOURCEFFECT;

/* 9066 */ typedef _LDR_DATA_TABLE_ENTRY *PLDR_DATA_TABLE_ENTRY;

/* 9067 */ typedef float XAUDIOSAMPLE;

/* 9068 */ typedef void (__cdecl *CLIENT_DEBUG2FILE)(void *, char *, char *, char *);

/* 9069 */ typedef _ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;

/* 9070 */ typedef _HEAP_VIRTUAL_ALLOC_ENTRY *PHEAP_VIRTUAL_ALLOC_ENTRY;

/* 9071 */ typedef unsigned int (__cdecl *PFNXAMSETPERSISTENTMEMORY)(_XPERSISTENTMEMPARAMS *);

/* 9072 */ typedef _PROFILEENUMRESULT *PPROFILEENUMRESULT;

/* 9073 */ typedef _D3DXEFFECTINSTANCE *LPD3DXEFFECTINSTANCE;

/* 9074 */ typedef _STACK_FRAME_HEADER *PSTACK_FRAME_HEADER;

/* 9075 */ typedef IXHVExternalCodec *PIXHVEXTERNALCODEC;

/* 9076 */ typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;

/* 9077 */ typedef int LPARAM;

/* 9078 */ typedef unsigned int (__cdecl *PKIPI_BROADCAST_WORKER)(unsigned int);

/* 9079 */ typedef itemDef_s *itemDef_ptr;

/* 9080 */ typedef XGRAPHICS::_CP_SHADERCONST_BLOCK *PCP_SHADERCONST_BLOCK;

/* 9081 */ typedef _XONLINE_REQUEST_THROTTLE_SETTINGS *PXONLINE_REQUEST_THROTTLE_SETTINGS;

/* 9082 */ typedef char FxElemType;

/* 9083 */ typedef XPRESENCE_SUBSCRIBE *PXPRESENCE_SUBSCRIBE;

/* 9084 */ typedef _KTIME_STAMP_BUNDLE *PKTIME_STAMP_BUNDLE;

/* 9085 */ typedef const void *LPCVOID;

/* 9086 */ typedef ID3DXMatrixStack *LPD3DXMATRIXSTACK;

/* 9087 */ typedef __vector4 *LPD3DVECTOR4;

/* 9088 */ typedef int (__cdecl *PDRIVER_DISMOUNTVOLUME)(_DEVICE_OBJECT *);

/* 9089 */ typedef wchar_t *PWCH;

/* 9090 */ typedef ID3DXMesh *LPD3DXMESH;

/* 9091 */ typedef char XAUDIOTHREADUSAGE;

/* 9092 */ typedef _FILE_DISPOSITION_INFORMATION *PFILE_DISPOSITION_INFORMATION;

/* 9093 */ typedef int *LPINT;

/* 9094 */ typedef _SYSTEMTIME *LPSYSTEMTIME;

/* 9095 */ typedef XAUDIOCHANNELVOLUMEENTRY *LPCXAUDIOCHANNELVOLUMEENTRY;

/* 9096 */ typedef XAUDIOVOICEOUTPUTVOLUMEENTRY *LPCXAUDIOVOICEOUTPUTVOLUMEENTRY;

/* 9097 */ typedef unsigned __int16 SSM_UINT16;

/* 9098 */ typedef XAUDIOCHANNELVOLUME *LPXAUDIOCHANNELVOLUME;

/* 9099 */ typedef _XSHOWDEVICESELECTORUI_PARAMS *PXSHOWDEVICESELECTORUI_PARAMS;

/* 9100 */ typedef XGRAPHICS::_PM4CMDLCC *PPM4CMDLCC;

/* 9101 */ typedef int YYSTYPE;

/* 9102 */ typedef unsigned int WPARAM;

/* 9103 */ typedef XGRAPHICS::IRInst *(__cdecl *NewInstFunc)(R400Tables::Op, XGRAPHICS::Compiler *);

/* 9104 */ typedef XGRAPHICS::_R400FFVSMTRLSRC *PR400FFVSMTRLSRC;

/* 9105 */ typedef char XAUDIODRVSPEAKER;

/* 9106 */ typedef _UCODE_VSINPUTDECLARATION *PUCODE_VSINPUTDECLARATION;

/* 9107 */ typedef __int64 _Q64;

/* 9108 */ typedef void SSM_VOID;

/* 9109 */ typedef UVBASE_SWITCHTOVOICECHATPARAM *PUVBASE_SWITCHTOVOICECHATPARAM;

/* 9110 */ typedef PROCMODE_ID *PPROCMODE_ID;

/* 9111 */ typedef _OSVERSIONINFOA *LPOSVERSIONINFOA;

/* 9112 */ typedef int INT32;

/* 9113 */ typedef void (__cdecl *PKRUNDOWN_ROUTINE)(_KAPC *);

/* 9114 */ typedef char *LPXAUDIODRVSPEAKER;

/* 9115 */ typedef IDirectXFileDataReference **LPLPDIRECTXFILEDATAREFERENCE;

/* 9116 */ typedef unsigned int (__fastcall *CLIENT_UPDATECMDBUFF)(void *, unsigned int, unsigned __int64 *);

/* 9117 */ typedef char NCIENCODER_INPUT_FRAME[320];

/* 9118 */ typedef XNOTIFICATION_DEQUEUE *PNOTIFICATION_DEQUEUE;

/* 9119 */ typedef D3DVertexBuffer *PDIRECT3DVERTEXBUFFER9;

/* 9120 */ typedef _D3DXKEY_CALLBACK *LPD3DXKEY_CALLBACK;

/* 9121 */ typedef ID3DXPMesh *LPD3DXPMESH;

/* 9122 */ typedef char *LPXAUDIOFXPARAMTYPE;

/* 9123 */ typedef void __cdecl XAssetEnum(XAssetHeader, void *);

/* 9124 */ typedef _D3DXATTRIBUTEWEIGHTS *LPD3DXATTRIBUTEWEIGHTS;

/* 9125 */ typedef bool (__cdecl *StateTransitionFunc)(RagdollBody *, BodyState, BodyState);

/* 9126 */ typedef void (__cdecl *StateUpdateFunc)(RagdollBody *);

/* 9127 */ typedef char SSM_CHAR;

/* 9128 */ typedef const char *LPCXAUDIODRVCHANNEL;

/* 9129 */ typedef XGRAPHICS::_SR_SHADER_RECYCLER *PSR_SHADER_RECYCLER;

/* 9130 */ typedef IXAudioEffect *LPXAUDIOEFFECT;

/* 9131 */ typedef _EX_THREAD_REGISTRATION *PEX_THREAD_REGISTRATION;

/* 9132 */ typedef int LIVE_RANGE;

/* 9133 */ typedef unsigned __int16 TCOMP;

/* 9134 */ typedef XGRAPHICS::_CP_RENDERSTATE_BLOCK *PCP_RENDERSTATE_BLOCK;

/* 9135 */ typedef float FLOAT32;

/* 9136 */ typedef _HV_PAGE_INFO *PHV_PAGE_INFO;

/* 9137 */ typedef void (__cdecl *PSATA_PACKET_ROUTINE)(_SATA_CHANNEL_EXTENSION *);

/* 9138 */ typedef pcmwaveformat_tag *PPCMWAVEFORMAT;

/* 9139 */ typedef D3DSurface *LPDIRECT3DSURFACE9;

/* 9140 */ typedef _XCONTENT_METADATA *PXCONTENT_METADATA;

/* 9141 */ typedef void *SSM_SC_DATAHANDLE;

/* 9142 */ typedef void (__cdecl *D3DFREECALLBACK)(unsigned int);

/* 9143 */ typedef XAUDIOFXTABLE *LPXAUDIOFXTABLE;

/* 9144 */ typedef void (__cdecl *ExecHandlerCallback)(int, const char *);

/* 9145 */ typedef char *LPXAUDIOFRAMEBUFTYPE;

/* 9146 */ typedef _AP21_MEASUREMENT_OUTPUT *PAP21_MEASUREMENT_OUTPUT;

/* 9147 */ typedef _FILE_ALIGNMENT_INFORMATION *PFILE_ALIGNMENT_INFORMATION;

/* 9148 */ typedef XAUDIOCHANNELMAP *LPXAUDIOCHANNELMAP;

/* 9149 */ typedef TEST_CHANGEXEXINFO_MSG *PTEST_CHANGEXEXINFO_MSG;

/* 9150 */ typedef void (__cdecl *XGConvertDXTokensToMicrocodeErrorCallbackFunction)(void *, int, unsigned int, const char *);

/* 9151 */ typedef ID3DXFragmentLinker *LPD3DXFRAGMENTLINKER;

/* 9152 */ typedef int NTSTATUS;

/* 9153 */ typedef _XINPUT_STATE *PXINPUT_STATE;

/* 9154 */ typedef void (__cdecl *PAPCFUNC)(unsigned int);

/* 9155 */ typedef _XONLINE_TEAM *PXONLINE_TEAM;

/* 9156 */ typedef unsigned int (__cdecl *D3DGETSAMPLERSTATECALL)(D3DDevice *, unsigned int);

/* 9157 */ typedef D3DPixelShader *GfxPixelShader;

/* 9158 */ typedef int (__cdecl *NEARPROC)();

/* 9159 */ typedef _AP21_MEASUREMENT_INPUT *PAP21_MEASUREMENT_INPUT;

/* 9160 */ typedef _KINTERRUPT *PRKINTERRUPT;

/* 9161 */ typedef char *PBOOLEAN;

/* 9162 */ typedef int qboolean;

/* 9163 */ typedef _EXCEPTION_RECORD64 *PEXCEPTION_RECORD64;

/* 9164 */ typedef char *LPXAUDIOENGINECALLBACKINDEX;

/* 9165 */ typedef int (__cdecl *PFN_NETDLL_XNETSTARTUPEX)(_XNCALLER_TYPE, XNetStartupParams *, unsigned int);

/* 9166 */ typedef _PERSONALIZATION_PARAMS *PPERSONALIZATION_PARAMS;

/* 9167 */ typedef _UCODE_VSOUTPUTDECLARATION *PUCODE_VSOUTPUTDECLARATION;

/* 9168 */ typedef char XAUDIOSPEAKER;

/* 9169 */ typedef _IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;

/* 9170 */ typedef _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;

/* 9171 */ typedef _SEMAPHORE_BASIC_INFORMATION *PSEMAPHORE_BASIC_INFORMATION;

/* 9172 */ typedef XAUDIOSOURCEFXFORMATPARAM *LPCXAUDIOSOURCEFXFORMATPARAM;

/* 9173 */ typedef HRESULT __cdecl D3DHWLVSCREATEDECLFUNC(_ATID3DCTX *, _ATIVSDECL *);

/* 9174 */ typedef unsigned int *LPUINT;

/* 9175 */ typedef __int64 LONGLONG;

/* 9176 */ typedef XHVENGINECREATEPARAMS *PXHVENGINECREATEPARAMS;

/* 9177 */ typedef int yy_state_type;

/* 9178 */ typedef XMASTREAMFORMAT *PXMASTREAMFORMAT;

/* 9179 */ typedef D3DStateBlock *LPDIRECT3DSTATEBLOCK9;

/* 9180 */ typedef D3DPerfCounters *LPDIRECT3DPERFCOUNTERS9;

/* 9181 */ typedef float XAUDIODRVSAMPLE;

/* 9182 */ typedef unsigned int XAUDIODRVSPEAKERCONFIG;

/* 9183 */ typedef char *PTBYTE;

/* 9184 */ typedef _SCOPE_TABLE *PSCOPE_TABLE;

/* 9185 */ typedef sockaddr *LPSOCKADDR;

/* 9186 */ typedef CODEC_TYPE *const PCCODEC_TYPE;

/* 9187 */ typedef D3DXShader::_D3DXSP_DEBUG *LPD3DXSP_DEBUG;

/* 9188 */ typedef int (__cdecl *PDRIVER_DISPATCH)(_DEVICE_OBJECT *, _IRP *);

/* 9189 */ typedef const char *LPCXAUDIODRVSPEAKER;

/* 9190 */ typedef _FP_IEEE_RECORD *PFP_IEEE_RECORD;

/* 9191 */ typedef _D3DXSHADER_INSTRUCTIONINFO *LPD3DXSHADER_INSTRUCTIONINFO;

/* 9192 */ typedef void *XAUDIOEVENT;

/* 9193 */ typedef D3DXShader::_D3DXCP_READ *LPD3DXCP_READ;

/* 9194 */ typedef _DUMP_STANDARD_BUCKET_DATA *PDUMP_STANDARD_BUCKET_DATA;

/* 9195 */ typedef _XAM_BOOT_DATA_BLOCK *PDM_BOOT_DATA_BLOCK;

/* 9196 */ typedef void (__cdecl *PDRIVER_STARTIO)(_DEVICE_OBJECT *, _IRP *);

/* 9197 */ typedef HRESULT (__cdecl *PD3DHWLVSDELETEDECLFUNC)(_ATID3DCTX *, _ATIVSDECL *);

/* 9198 */ typedef float dMatrix3[12];

/* 9199 */ typedef _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;

/* 9200 */ typedef _KD_PHYSICAL_PORT *PKD_PHYSICAL_PORT;

/* 9201 */ typedef _CERTINIT *PCERTINIT;

/* 9202 */ typedef XGRAPHICS::_INTEGER_LIST_ITEM *PINTEGER_LIST_ITEM;

/* 9203 */ typedef dxSpace *dSpaceID;

/* 9204 */ typedef unsigned int raw_uint;

/* 9205 */ typedef __int16 SSM_INT16;

/* 9206 */ typedef struct _XUIBRUSH *HXUIBRUSH;

/* 9207 */ typedef HRESULT (__cdecl *PFN_GETPROP)(unsigned int, void *, XUIElementPropVal *);

/* 9208 */ typedef XAUDIODRVRENDERFXCALLBACK *LPCXAUDIODRVRENDERFXCALLBACK;

/* 9209 */ typedef void (__cdecl *XGCPUSHADERFUNCTION)(_XGCPUSHADERCONTEXT *);

/* 9210 */ typedef void (__cdecl *PRTL_FREE_STRING_ROUTINE)(void *);

/* 9211 */ typedef _IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;

/* 9212 */ typedef _OSVERSIONINFOEXW *PRTL_OSVERSIONINFOEXW;

/* 9213 */ typedef void (__cdecl *BINKCBSUSPEND)(BINKIO *);

/* 9214 */ typedef __int64 *PLONGLONG;

/* 9215 */ typedef char *LPXAUDIODATAFLOW;

/* 9216 */ typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;

/* 9217 */ typedef HRESULT (__cdecl *PFN_SETPROP)(unsigned int, void *, XUIElementPropVal *);

/* 9218 */ typedef tWAVEFORMATEX *NPWAVEFORMATEX;

/* 9219 */ typedef unsigned __int64 ULONGLONG;

/* 9220 */ typedef tWAVEFORMATEX *LPWAVEFORMATEX;

/* 9221 */ typedef void (__cdecl *_purecall_handler)();

/* 9222 */ typedef _DM_FILEEVENT_DATA *PDM_FILEEVENT_DATA;

/* 9223 */ typedef void (__cdecl *PFNMICRAWDATAREADY)(unsigned int, void *, unsigned int, int *);

/* 9224 */ typedef float raw_float;

/* 9225 */ typedef _MM_STATISTICS *PMM_STATISTICS;

/* 9226 */ typedef void (__cdecl *VD_SHUTDOWN_CALLBACK)(void *);

/* 9227 */ typedef unsigned int REGINDEX;

/* 9228 */ typedef _SID_AND_ATTRIBUTES (*PSID_AND_ATTRIBUTES_ARRAY)[1];

/* 9229 */ typedef __int64 _Longlong;

/* 9230 */ typedef XGRAPHICS::_ATIVSDECL *PATIVSDECL;

/* 9231 */ typedef _XCONTENT_HEADER *PXCONTENT_HEADER;

/* 9232 */ typedef int (__cdecl *CALINFO_ENUMPROCA)(char *);

/* 9233 */ typedef _SCSI_PASS_THROUGH_DIRECT *PSCSI_PASS_THROUGH_DIRECT;

/* 9234 */ typedef _GUID *LPIID;

/* 9235 */ typedef _D3DXMESHCONTAINER *LPD3DXMESHCONTAINER;

/* 9236 */ typedef int streamsize;

/* 9237 */ typedef _TIMER_BASIC_INFORMATION *PTIMER_BASIC_INFORMATION;

/* 9238 */ typedef unsigned int HANDLE_PTR;

/* 9239 */ typedef void *(__cdecl *PFNXAMNOTIFYCREATELISTENERINTERNAL)(unsigned __int64, int, unsigned int);

/* 9240 */ typedef unsigned int DEFINDEX;

/* 9241 */ typedef char *LPCH;

/* 9242 */ typedef void **PHXAMTASKOBJ;

/* 9243 */ typedef _IMAGE_XEX_HEADER *PIMAGE_XEX_HEADER;

/* 9244 */ typedef __int16 *LPSHORT;

/* 9245 */ typedef D3DLineTexture *PDIRECT3DLINETEXTURE9;

/* 9246 */ typedef const unsigned int *LPCXAUDIOSOURCEBUFFERID;

/* 9247 */ typedef XGI_USERSETCONTEXT_MSG *PXGI_USERSETCONTEXT_MSG;

/* 9248 */ typedef int (__cdecl *CALINFO_ENUMPROCW)(unsigned __int16 *);

/* 9249 */ typedef const unsigned __int16 *LPCXAUDIOTRAILFRAME;

/* 9250 */ typedef _OBJECT_DIRECTORY_INFORMATION *POBJECT_DIRECTORY_INFORMATION;

/* 9251 */ typedef void (__cdecl *TERMINATION_HANDLER)(char);

/* 9252 */ typedef tagSIZE *PSIZE;

/* 9253 */ typedef SCHEMA_HEADER *LPSCHEMA_HEADER;

/* 9254 */ typedef const unsigned int *LPCXAUDIOSAMPLERATE;

/* 9255 */ typedef unsigned int SECURITY_INFORMATION;

/* 9256 */ typedef _XEIKA_CERT_OVERLAY_ELEMENTS *PXEIKA_CERT_OVERLAY_ELEMENTS;

/* 9257 */ typedef _DM_SWAPDISC_STATUS *PDM_SWAPDISC_STATUS;

/* 9258 */ typedef unsigned int XAUDIODRVCLIENTINDEX;

/* 9259 */ typedef void *HGLOBAL;

/* 9260 */ typedef void **LPHANDLE;

/* 9261 */ typedef unsigned int dev_t;

/* 9262 */ typedef char byte16;

/* 9263 */ typedef XUSER_ACHIEVEMENT *PXUSER_ACHIEVEMENT;

/* 9264 */ typedef _IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;

/* 9265 */ typedef void *(__cdecl *BINKMEMALLOC)(unsigned int);

/* 9266 */ typedef unsigned __int16 wint_t;

/* 9267 */ typedef XAUDIORENDERFXINIT *LPCXAUDIORENDERFXINIT;

/* 9268 */ typedef void **SPHANDLE;

/* 9269 */ typedef float XAUDIOPITCH;

/* 9270 */ typedef XGRAPHICS::_IA_BOOLUSAGE_BLOCK *PIA_BOOLUSAGE_BLOCK;

/* 9271 */ typedef _D3DXSHADER_VARIABLEINFO *LPD3DXSHADER_VARIABLEINFO;

/* 9272 */ typedef char XAUDIOROUTERFXMODE;

/* 9273 */ typedef _OSVERSIONINFOW *PRTL_OSVERSIONINFOW;

/* 9274 */ typedef _OBJECT_HEADER *POBJECT_HEADER;

/* 9275 */ typedef _DM_ODD_READ_REQUEST_DATA *PDM_ODD_READ_REQUEST_DATA;

/* 9276 */ typedef void (__cdecl *BINKSNDVOLUME)(BINKSND *, int);

/* 9277 */ typedef _XAPI_CONTSIG_HANDLE *PXAPI_CONTSIG_HANDLE;

/* 9278 */ typedef __int16 Short3[3];

/* 9279 */ typedef _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;

/* 9280 */ typedef void (__cdecl *PKUSER_MODE_DISPATCHER)(_EXCEPTION_RECORD *, _KTRAP_FRAME *);

/* 9281 */ typedef void *PVOID64;

/* 9282 */ typedef unsigned int HashIndex;

/* 9283 */ typedef _XNET_LOGON_SERVICE_INFO *PXNET_LOGON_SERVICE_INFO;

/* 9284 */ typedef void (__cdecl *fn_controller)(gentity_s *, int *);

/* 9285 */ typedef XGRAPHICS::_ORDERED_LIST_FACTORY *PORDERED_LIST_FACTORY;

/* 9286 */ typedef void *const XHV_PROCESSING_MODE;

/* 9287 */ typedef _KTHREAD *PKTHREAD;

/* 9288 */ typedef LIST_ENTRY64 *PLIST_ENTRY64;

/* 9289 */ typedef const char *LPCXAUDIOFXID;

/* 9290 */ typedef LOCALTALKER *PLOCALTALKER;

/* 9291 */ typedef int ADJ_NODE;

/* 9292 */ typedef _ATISHADERCONST *PATISHADERCONST;

/* 9293 */ typedef FxEffectDef *FxEffectDefHandle;

/* 9294 */ typedef _RTL_HEAP_PARAMETERS *PRTL_HEAP_PARAMETERS;

/* 9295 */ typedef D3DVolume *LPDIRECT3DVOLUME9;

/* 9296 */ typedef char *LPXAUDIOSUBMITPACKET;

/* 9297 */ typedef unsigned int *LPXAUDIODRVCLIENTINDEX;

/* 9298 */ typedef __int64 *PINT64;

/* 9299 */ typedef _UCODE_VSOUTPUTPATCH *PUCODE_VSOUTPUTPATCH;

/* 9300 */ typedef unsigned __int64 UINT64;

/* 9301 */ typedef unsigned __int16 LeafBrush;

/* 9302 */ typedef _IDEREGS *LPIDEREGS;

/* 9303 */ typedef unsigned int XAUDIOVECTORI[4];

/* 9304 */ typedef float XAUDIOVECTORF[4];

/* 9305 */ typedef int (__cdecl *PRTL_DELETE_LOCK_ROUTINE)(void *);

/* 9306 */ typedef _KQUEUE *PRKQUEUE;

/* 9307 */ typedef _D3DXKEY_VECTOR3 *LPD3DXKEY_VECTOR3;

/* 9308 */ typedef void (__cdecl *PXOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _XOVERLAPPED *);

/* 9309 */ typedef _KUSER_MODE_PTE_BLOCK *PKUSER_MODE_PTE_BLOCK;

/* 9310 */ typedef char byteShader;

/* 9311 */ typedef void **PXVOICE_HANDLE;

/* 9312 */ typedef const char *LPCXAUDIOFRAMEBUFPREPARE;

/* 9313 */ typedef unsigned __int16 ATOM;

/* 9314 */ typedef char __static_assert_t[1];

/* 9315 */ typedef D3DCubeTexture *PDIRECT3DCUBETEXTURE9;

/* 9316 */ typedef XGRAPHICS::_SSM_OBJINFO *PSSM_OBJINFO;

/* 9317 */ typedef char *LPXAUDIOSOURCESTATE;

/* 9318 */ typedef unsigned int (__fastcall *CLIENT_CHECKTSRETIRED)(void *, unsigned __int64 *, unsigned int);

/* 9319 */ typedef _FILE_STREAM_INFORMATION *PFILE_STREAM_INFORMATION;

/* 9320 */ typedef char YY_CHAR;

/* 9321 */ typedef _HEAP_STOP_ON_TAG *PHEAP_STOP_ON_TAG;

/* 9322 */ typedef threadmbcinfostruct *pthreadmbcinfo;

/* 9323 */ typedef _XUSER_STATS_READ_RESULTS *PXUSER_STATS_READ_RESULTS;

/* 9324 */ typedef _KDEVICE_QUEUE_ENTRY *PKDEVICE_QUEUE_ENTRY;

/* 9325 */ typedef _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;

/* 9326 */ typedef XSVLTCACHE *PXSVLTCACHE;

/* 9327 */ typedef float SSM_FLOAT;

/* 9328 */ typedef _XSESSION_SEARCHRESULT_HEADER *PXSESSION_SEARCHRESULT_HEADER;

/* 9329 */ typedef _FP_128 *PFP_128;

/* 9330 */ typedef XGRAPHICS::_PM4CMDIMLOADIMMEDIATE *PPM4CMDIMLOADIMMEDIATE;

/* 9331 */ typedef _SUB_Q_MEDIA_CATALOG_NUMBER *PSUB_Q_MEDIA_CATALOG_NUMBER;

/* 9332 */ typedef z_stream_s *z_streamp;

/* 9333 */ typedef D3DResource *LPDIRECT3DRESOURCE9;

/* 9334 */ typedef int PhysJointId;

/* 9335 */ typedef _XMARKETPLACE_ASSET *PXMARKETPLACE_ASSET;

/* 9336 */ typedef int (__cdecl *CMPF)(void *, void *);

/* 9337 */ typedef _FP_32 *PFP_32;

/* 9338 */ typedef tagPALETTEENTRY *LPPALETTEENTRY;

/* 9339 */ typedef XGRAPHICS::_PS_INTERNAL_BLOCK *PPS_INTERNAL_BLOCK;

/* 9340 */ typedef XAUDIORENDERFXINIT *LPXAUDIORENDERFXINIT;

/* 9341 */ typedef unsigned int D3DXEVENTHANDLE;

/* 9342 */ typedef XSVRTCACHE *PXSVRTCACHE;

/* 9343 */ typedef _D3DXMATERIAL *LPD3DXMATERIAL;

/* 9344 */ typedef _XMSG_DESTROY *PXMSG_DESTROY;

/* 9345 */ typedef _KQUEUE *PKQUEUE;

/* 9346 */ typedef void (__cdecl *PTIMERAPCROUTINE)(void *, unsigned int, unsigned int);

/* 9347 */ typedef _DM_SWAPDISC_START *PDM_SWAPDISC_START;

/* 9348 */ typedef unsigned __int16 FxElemHandle;

/* 9349 */ typedef _ATICACHESIZELOG2 *PATICACHESIZELOG2;

/* 9350 */ typedef char *POSTR;

/* 9351 */ typedef IDirectXFileSaveObject **LPLPDIRECTXFILESAVEOBJECT;

/* 9352 */ typedef const unsigned int *LPCXAUDIOFXFLAGPARAM;

/* 9353 */ typedef _XMSG_DETAILS_INTERNAL *PXMSG_DETAILS_INTERNAL;

/* 9354 */ typedef loadAnim_t playerAnims_t[512];

/* 9355 */ typedef _FSCACHE_ELEMENT *PFSCACHE_ELEMENT;

/* 9356 */ typedef char *PCCHAR;

/* 9357 */ typedef char *PSCHAR;

/* 9358 */ typedef _XVOICEMAILUI_PARAMS *PXVOICEMAILUI_PARAMS;

/* 9359 */ typedef unsigned int __cdecl GETMAXSTATESIZE(XGRAPHICS::_PS_PROGRAM_KEY *);

/* 9360 */ typedef __int16 *PSHORT;

/* 9361 */ typedef unsigned __int16 WORD;

/* 9362 */ typedef unsigned __int16 USHORT;

/* 9363 */ typedef unsigned __int16 ushort;

/* 9364 */ typedef _KPRCB *PKPRCB;

/* 9365 */ typedef _IO_STATUS_BLOCK *PIO_STATUS_BLOCK;

/* 9366 */ typedef IDirect3DShaderValidator9 *(__cdecl *LPD3DSVC9)();

/* 9367 */ typedef XGRAPHICS::_R400VSINOUTREG *PR400VSINOUTREG;

/* 9368 */ typedef XGRAPHICS::_FA_FETCHCONST_ALLOC *PFA_FETCHCONST_ALLOC;

/* 9369 */ typedef XGRAPHICS::_R400FFVSIN *PR400FFVSIN;

/* 9370 */ typedef int (__cdecl *LOCALE_ENUMPROCW)(unsigned __int16 *);

/* 9371 */ typedef const float *LPCXAUDIODRVSAMPLE;

/* 9372 */ typedef __int16 CSHORT;

/* 9373 */ typedef char XAUDIOSAMPLETYPE;

/* 9374 */ typedef void (__cdecl *FLASH_PROGRESS_ROUTINE)(unsigned int);

/* 9375 */ typedef unsigned __int16 FSHORT;

/* 9376 */ typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATA;

/* 9377 */ typedef in_addr *PIN_ADDR;

/* 9378 */ typedef double __XLIVEGEN_DOUBLE;

/* 9379 */ typedef XNOTIFICATION_USER *PXNOTIFICATION_USER;

/* 9380 */ typedef XGRAPHICS::_R400PIXELSHADER *PR400PIXELSHADER;

/* 9381 */ typedef unsigned __int16 _U16;

/* 9382 */ typedef unsigned int D3DXF_FILESAVEOPTIONS;

/* 9383 */ typedef void XUINotifyData;

/* 9384 */ typedef _XONLINE_SERVICE_INFO *PXONLINE_SERVICE_INFO;

/* 9385 */ typedef _XONLINE_MATCH_SESSION_INFO *PXONLINE_MATCH_SESSION_INFO;

/* 9386 */ typedef XGRAPHICS::_SSM_COMPILEWITH_RESULT (__cdecl *COMPILE_WITH_QUERY)(struct XGRAPHICS::CompAState *, int, XGRAPHICS::_CS_COMPILED_SHADER *, void (__cdecl *)(void *, const char *), void *);

/* 9387 */ typedef XAUDIOPACKETPOSITION *LPCXAUDIOPACKETPOSITION;

/* 9388 */ typedef XHV_INIT_PARAMS *PXHV_INIT_PARAMS;

/* 9389 */ typedef char (__cdecl *PDLL_INIT_ROUTINE)(void *, unsigned int, _CONTEXT *);

/* 9390 */ typedef _UCODE_HEADER *LPUCODE_HEADER;

/* 9391 */ typedef void (__cdecl *PKSERVICE_ROUTINE)(_KINTERRUPT *, void *);

/* 9392 */ typedef void *(__cdecl *PFN_CREATE_CODEC_INSTANCE)();

/* 9393 */ typedef _KINTERRUPT *PKINTERRUPT;

/* 9394 */ typedef unsigned int D3DCALLBACKTYPE;

/* 9395 */ typedef _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;

/* 9396 */ typedef _XONLINE_FRIEND *PXONLINE_FRIEND;

/* 9397 */ typedef PACKET_CONTEXT *PPACKET_CONTEXT;

/* 9398 */ typedef _KWAIT_BLOCK *PKWAIT_BLOCK;

/* 9399 */ typedef XAUDIOVOICEOUTPUTENTRY *LPXAUDIOVOICEOUTPUTENTRY;

/* 9400 */ typedef unsigned int *PUINT32;

/* 9401 */ typedef _UCODE_PSINPUTDECLARATION *PUCODE_PSINPUTDECLARATION;

/* 9402 */ typedef _HUD_PARAMS *PHUD_PARAMS;

/* 9403 */ typedef _OSVERSIONINFOW *LPOSVERSIONINFOW;

/* 9404 */ typedef XAUDIOREVERBSETTINGS *LPCXAUDIOREVERBSETTINGS;

/* 9405 */ typedef _XCONTENT_SIGNATURE *PXCONTENT_SIGNATURE;

/* 9406 */ typedef const float *LPCXAUDIOPITCH;

/* 9407 */ typedef char TextureSemantic;

/* 9408 */ typedef _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;

/* 9409 */ typedef _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;

/* 9410 */ typedef char *LPXAUDIOVOICEINDEX;

/* 9411 */ typedef GfxWorld *GfxWorldPtr;

/* 9412 */ typedef void *LPVOID;

/* 9413 */ typedef WSAData *LPWSADATA;

/* 9414 */ typedef int SHANDLE_PTR;

/* 9415 */ typedef XGRAPHICS::_PS_PROGRAM_STORE *PPS_PROGRAM_STORE;

/* 9416 */ typedef int off_t;

/* 9417 */ typedef _cpinfo *LPCPINFO;

/* 9418 */ typedef XAUDIORENDERDRVCLIENT *LPCXAUDIORENDERDRVCLIENT;

/* 9419 */ typedef unsigned __int16 *LPWORD;

/* 9420 */ typedef void (__cdecl *BINKCBIDLE)(BINKIO *);

/* 9421 */ typedef _D3DGPUVERSION *PD3DGPUVERSION;

/* 9422 */ typedef _STRING *PCANSI_STRING;

/* 9423 */ typedef GameWorldMp *GameWorldMpPtr;

/* 9424 */ typedef XAUDIOENGINEINIT *LPXAUDIOENGINEINIT;

/* 9425 */ typedef D3DVertexShader *LPDIRECT3DVERTEXSHADER9;

/* 9426 */ typedef HFONT__ *HFONT;

/* 9427 */ typedef UVBASE_CONNECTTOVOICECHATPARAM *PUVBASE_CONNECTTOVOICECHATPARAM;

/* 9428 */ typedef int (__cdecl *PFN_INIT_CRITSEC_AND_SPIN_COUNT)(_RTL_CRITICAL_SECTION *, unsigned int);

/* 9429 */ typedef void (__cdecl *DXCONVERT_TO_ILFUNC)(unsigned int **, unsigned int, XGRAPHICS::ILOpCode, XGRAPHICS::_R400IL_RECORDED_INFO *, unsigned int **);

/* 9430 */ typedef _HAL_SMC_REGISTRATION *PHAL_SMC_REGISTRATION;

/* 9431 */ typedef _XOVERLAPPED *PXOVERLAPPED;

/* 9432 */ typedef int LONG;

/* 9433 */ typedef unsigned int COFF;

/* 9434 */ typedef int *LPLONG;

/* 9435 */ typedef _EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 9436 */ typedef const char *LPCXAUDIOVOICETYPE;

/* 9437 */ typedef _GET_SESSION_RESULTS *PGET_SESSION_RESULTS;

/* 9438 */ typedef unsigned int CALID;

/* 9439 */ typedef _RC4_SHA_HEADER *PRC4_SHA_HEADER;

/* 9440 */ typedef void (__cdecl *PhysCollisionCallback)();

/* 9441 */ typedef int (__cdecl *R_BoxSurfacesCallback)(int, void *);

/* 9442 */ typedef HRESULT __cdecl D3DHWLVSSETFUNC(_ATID3DCTX *, unsigned int, _ATIVSFUNC *);

/* 9443 */ typedef _D3DVERTEXELEMENT9 *LPD3DVERTEXELEMENT9;

/* 9444 */ typedef int (__cdecl *_PNH)(unsigned int);

/* 9445 */ typedef unsigned int UOFF;

/* 9446 */ typedef D3DVertexShader *PDIRECT3DVERTEXSHADER9;

/* 9447 */ typedef unsigned int (__cdecl *BINKIOGETBUFFERSIZE)(BINKIO *, unsigned int);

/* 9448 */ typedef void *LPXAUDIOMASTERINGVOICE;

/* 9449 */ typedef _SUB_Q_CURRENT_POSITION *PSUB_Q_CURRENT_POSITION;

/* 9450 */ typedef _DUMP_FRAME_BUFFER_INFO *PDUMP_FRAME_BUFFER_INFO;

/* 9451 */ typedef _HEAP *PHEAP;

/* 9452 */ typedef _XMARKETPLACE_ASSET_PACKAGE *PXMARKETPLACE_ASSET_PACKAGE;

/* 9453 */ typedef int FxElemDefFlags;

/* 9454 */ typedef XGRAPHICS::_XLT_EXPORT_CACHE_NODE *PXLT_EXPORT_CACHE_NODE;

/* 9455 */ typedef XAUDIOXMAFORMAT *LPXAUDIOXMAFORMAT;

/* 9456 */ typedef _D3DXBONECOMBINATION *LPD3DXBONECOMBINATION;

/* 9457 */ typedef __RAW_READ_INFO *PRAW_READ_INFO;

/* 9458 */ typedef _KUSER_MODE_PTE *PKUSER_MODE_PTE;

/* 9459 */ typedef _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;

/* 9460 */ typedef void *SSM_CLIENTDEVICEHANDLE;

/* 9461 */ typedef _KUSER_MODE_PDE *PKUSER_MODE_PDE;

/* 9462 */ typedef _SECURITY_ADVANCED_QUALITY_OF_SERVICE *PSECURITY_ADVANCED_QUALITY_OF_SERVICE;

/* 9463 */ typedef IProcMode *PIPROCMODE;

/* 9464 */ typedef __int64 time_t;

/* 9465 */ typedef XGRAPHICS::_LCC_INFO *PLCC_INFO;

/* 9466 */ typedef _HVSTATS_CORE *PHVSTATS_CORE;

/* 9467 */ typedef _TOKEN_GROUPS *PTOKEN_GROUPS;

/* 9468 */ typedef threadlocaleinfostruct *pthreadlocinfo;

/* 9469 */ typedef void (__cdecl *PTIMER_APC_ROUTINE)(void *, unsigned int, int);

/* 9470 */ typedef XAUDIOSOURCEVOICEINIT *LPCXAUDIOSOURCEVOICEINIT;

/* 9471 */ typedef _DM_SATA_CHANNEL_DATA *PDM_SATA_CHANNEL_DATA;

/* 9472 */ typedef unsigned __int16 SECURITY_DESCRIPTOR_CONTROL;

/* 9473 */ typedef _XMATCH_SEARCHRESULT_HEADER *PXMATCH_SEARCHRESULT_HEADER;

/* 9474 */ typedef unsigned int THREAD_ID;

/* 9475 */ typedef _RTL_HEAP_TAG *PRTL_HEAP_TAG;

/* 9476 */ typedef _FILE_ALLOCATION_INFORMATION *PFILE_ALLOCATION_INFORMATION;

/* 9477 */ typedef void *SSM_FILE_HANDLE;

/* 9478 */ typedef void *(__cdecl *TypDefMemset)(void *, int, unsigned int);

/* 9479 */ typedef _XONLINE_ATTRIBUTE_BLOB *PXONLINE_ATTRIBUTE_BLOB;

/* 9480 */ typedef unsigned __int64 *PULONG64;

/* 9481 */ typedef _D3DXTRACK_DESC *LPD3DXTRACK_DESC;

/* 9482 */ typedef CODEC_TYPE *PCODEC_TYPE;

/* 9483 */ typedef _FILETIME *LPFILETIME;

/* 9484 */ typedef char KIRQL;

/* 9485 */ typedef _FILE_STANDARD_INFORMATION *PFILE_STANDARD_INFORMATION;

/* 9486 */ typedef XGRAPHICS::_CP_TRANSLATION_BUFFERS *PCP_TRANSLATION_BUFFERS;

/* 9487 */ typedef XGRAPHICS::_SSM_REGISTRY *PSSM_REGISTRY;

/* 9488 */ typedef timeval *PTIMEVAL;

/* 9489 */ typedef _D3DXPARAMETER_CLASS *LPD3DXPARAMETER_CLASS;

/* 9490 */ typedef const char *LPCXAUDIOSTOP;

/* 9491 */ typedef char CHAR;

/* 9492 */ typedef float vec_t;

/* 9493 */ typedef _OBJECT_DIRECTORY *POBJECT_DIRECTORY;

/* 9494 */ typedef PACKET_BUFFER *PPACKET_BUFFER;

/* 9495 */ typedef HRESULT (__cdecl *PD3DHWLVSCREATEFUNCFUNC)(_ATID3DCTX *, _ATIVSFUNC *);

/* 9496 */ typedef XVOICE_PACKET_CONTEXT *PXVOICE_PACKET_CONTEXT;

/* 9497 */ typedef _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;

/* 9498 */ typedef int PhysObjId;

/* 9499 */ typedef XGRAPHICS::_SC_STATE_CACHE *PSC_STATE_CACHE;

/* 9500 */ typedef XGI_USERGETPROPERTY_MSG *PXGI_USERGETPROPERTY_MSG;

/* 9501 */ typedef unsigned int (__cdecl *check_func)(unsigned int, const char *, unsigned int);

/* 9502 */ typedef _RTL_CRITICAL_SECTION *PCRITICAL_SECTION;

/* 9503 */ typedef void (__cdecl *D3DSETRENDERSTATECALL)(D3DDevice *, unsigned int);

/* 9504 */ typedef _XINPUT_KEYSTROKE *PXINPUT_KEYSTROKE;

/* 9505 */ typedef unsigned int raw_uint128;

/* 9506 */ typedef void **PHANDLE;

/* 9507 */ typedef int SSM_INT32;

/* 9508 */ typedef _QUOTA_LIMITS *PQUOTA_LIMITS;

/* 9509 */ typedef unsigned int (__cdecl *PATICACHEHASHFUNC)(char *, unsigned int);

/* 9510 */ typedef XAUDIOPIXCOUNTERS *LPCXAUDIOPIXCOUNTERS;

/* 9511 */ typedef void *PSECURITY_ATTRIBUTES;

/* 9512 */ typedef double (__cdecl *TypDefSin)(double);

/* 9513 */ typedef MapEnts *MapEntsPtr;

/* 9514 */ typedef _FILE_NAME_INFORMATION *PFILE_NAME_INFORMATION;

/* 9515 */ typedef XGRAPHICS::_XLT_EXEC_INFO_DATA *PXLT_EXEC_INFO_DATA;

/* 9516 */ typedef _currencyfmtW *LPCURRENCYFMTW;

/* 9517 */ typedef unsigned int *LPXAUDIOLOCKTYPE;

/* 9518 */ typedef XGRAPHICS::_SP_STATE_PREPROCESSOR *PSP_STATE_PREPROCESSOR;

/* 9519 */ typedef char XAUDIOCHANNEL;

/* 9520 */ typedef HRESULT (__cdecl *PFN_XUITEXTURELOADER)(IXuiDevice *, const wchar_t *, XUIImageInfo *, D3DTexture **);

/* 9521 */ typedef char *(__cdecl *GetParameter_t)(int);

/* 9522 */ typedef unsigned int *LPXAUDIOSPEAKERCONFIG;

/* 9523 */ typedef _ATID3DCTX *PATID3DCTX;

/* 9524 */ typedef _KPCR *PKPCR;

/* 9525 */ typedef D3DQuery *PDIRECT3DQUERY9;

/* 9526 */ typedef int FxTriGroupHandle;

/* 9527 */ typedef XGRAPHICS::_ATIVSFUNC *PATIVTXSHADER;

/* 9528 */ typedef int (__cdecl *R_BoxStaticModelsCallback)(int);

/* 9529 */ typedef int (__cdecl *BINKSNDLOCK)(BINKSND *, char **, unsigned int *);

/* 9530 */ typedef dxJointGroup *dJointGroupID;

/* 9531 */ typedef void *XMSG_HANDLE;

/* 9532 */ typedef _IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY;

/* 9533 */ typedef HRESULT (__cdecl *PD3DHWLVSCREATEFUNC)(_ATID3DCTX *, unsigned int, _ATIVSFUNC *, void *, unsigned int);

/* 9534 */ typedef XMAWAVEFORMAT *PXMAWAVEFORMAT;

/* 9535 */ typedef ID3DXLoadUserData *LPD3DXLOADUSERDATA;

/* 9536 */ typedef const char *LPCXAUDIOSAMPLETYPE;

/* 9537 */ typedef ID3DXBuffer *LPD3DXBUFFER;

/* 9538 */ typedef char charf;

/* 9539 */ typedef XAUDIO::XAUDIOPACKETCTX *LPXAUDIOPACKETCTX;

/* 9540 */ typedef XGRAPHICS::_CP_COMPILED_PROGRAM *PCP_COMPILED_PROGRAM;

/* 9541 */ typedef void (__cdecl *PDRIVER_DELETEDEVICE)(_DEVICE_OBJECT *);

/* 9542 */ typedef IDirectXFileData **LPLPDIRECTXFILEDATA;

/* 9543 */ typedef char *LPXAUDIOVOICETYPE;

/* 9544 */ typedef D3DSurface *PDIRECT3DSURFACE9;

/* 9545 */ typedef unsigned int *PUINT;

/* 9546 */ typedef int (__cdecl *LANGUAGEGROUP_ENUMPROCA)(unsigned int, char *, char *, unsigned int, int);

/* 9547 */ typedef _HCR *PHCR;

/* 9548 */ typedef char raw_byte;

/* 9549 */ typedef _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;

/* 9550 */ typedef _ATICACHEENTRY *PATICACHEENTRY;

/* 9551 */ typedef XGRAPHICS::_LARGE_ID_GENERATOR *PLARGE_ID_GENERATOR;

/* 9552 */ typedef void __cdecl ATICACHEOBJDESTROYFUNC(_ATIDXDEVICE *, void *, void *);

/* 9553 */ typedef int (__cdecl *LANGUAGEGROUP_ENUMPROCW)(unsigned int, unsigned __int16 *, unsigned __int16 *, unsigned int, int);

/* 9554 */ typedef D3DBaseTexture *PDIRECT3DBASETEXTURE9;

/* 9555 */ typedef XGRAPHICS::_SSM_COMPILEWITH_RESULT (__cdecl *COMPILE_GET_QUERY)(struct XGRAPHICS::CompAState *, int, float *, void (__cdecl *)(void *, const char *), void *);

/* 9556 */ typedef _ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

/* 9557 */ typedef _XSHOWFEEDBACKUI_PARAMS *PXSHOWFEEDBACKUI_PARAMS;

/* 9558 */ typedef tagPOINTS *LPPOINTS;

/* 9559 */ typedef const float *LPCXAUDIOFREQSCALE;

/* 9560 */ typedef __int64 INT64;

/* 9561 */ typedef unsigned int *LPXAUDIODRVLOCKTYPE;

/* 9562 */ typedef int __cdecl dAABBTestFn(dxGeom *, dxGeom *, float *);

/* 9563 */ typedef XGRAPHICS::_SR_SHADER_PAIR *PSR_SHADER_PAIR;

/* 9564 */ typedef __int16 AxialMaterialNum[3];

/* 9565 */ typedef _NT_TIB *PNT_TIB;

/* 9566 */ typedef int intf;

/* 9567 */ typedef float *dRealMutablePtr;

/* 9568 */ typedef XAUDIOFRAMEBUFINIT *LPXAUDIOFRAMEBUFINIT;

/* 9569 */ typedef int (__cdecl *LPTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/* 9570 */ typedef int (__cdecl *PFLS_SETVALUE_FUNCTION)(unsigned int, void *);

/* 9571 */ typedef _XMSG_GAMEINVITE_ANSWER_INFO *PXMSG_GAMEINVITE_ANSWER_INFO;

/* 9572 */ typedef _XSHOWSIGNINUI_PARAMS *PXSHOWSIGNINUI_PARAMS;

/* 9573 */ typedef _USER_PAYMENT_INFO *PUSER_PAYMENT_INFO;

/* 9574 */ typedef void (__cdecl *PFNONCACHEDEVICEREMOVED)(_XAM_CACHE_OPEN_FILE *);

/* 9575 */ typedef _XAM_CACHE_OPEN_FILE *PXAM_CACHE_OPEN_FILE;

/* 9576 */ typedef int FxPointGroupHandle;

/* 9577 */ typedef GfxHullPointsPool GfxHullPointsPoolArray[256];

/* 9578 */ typedef MaterialPixelShader *MaterialPixelShaderPtr;

/* 9579 */ typedef XModel *XModelPtr;

/* 9580 */ typedef HRESULT (__cdecl *PFNXML_ELEMENT_DATA_CALLBACK)(void *, XML_ELEMENT *, unsigned int, const char *, unsigned int);

/* 9581 */ typedef _XER *PXER;

/* 9582 */ typedef unsigned __int16 *PUHALF_PTR;

/* 9583 */ typedef const char *LPCXAUDIOSUBMIXSTAGE;

/* 9584 */ typedef _XLIVEBASE_ASYNC_MESSAGE *PXLIVEBASE_ASYNC_MESSAGE;

/* 9585 */ typedef ATIPRIMTYPE *PATIPRIMTYPE;

/* 9586 */ typedef void *(__cdecl *PRTL_ALLOCATE_STRING_ROUTINE)(unsigned int);

/* 9587 */ typedef XAUDIOFXDATAPARAM *LPXAUDIOFXDATAPARAM;

/* 9588 */ typedef HRESULT (__cdecl *PMESSAGEPROC)(unsigned int, unsigned int, unsigned int);

/* 9589 */ typedef HMETAFILE__ *HMETAFILE;

/* 9590 */ typedef XGRAPHICS::_TERNARY_TREE_STATS *PTERNARY_TREE_STATS;

/* 9591 */ typedef unsigned __int16 UINT16;

/* 9592 */ typedef _EX_TITLE_TERMINATE_REGISTRATION *PEX_TITLE_TERMINATE_REGISTRATION;

/* 9593 */ typedef __int16 *PINT16;

/* 9594 */ typedef NCI_CODEC *PNCI_CODEC;

/* 9595 */ typedef void (__cdecl *fn_reached)(gentity_s *);

/* 9596 */ typedef unsigned int KSPIN_LOCK;

/* 9597 */ typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA;

/* 9598 */ typedef char XAUDIOSOURCESTATE;

/* 9599 */ typedef _XONLINE_QUERY_ATTRIBUTE_DATA *PXONLINE_QUERY_ATTRIBUTE_DATA;

/* 9600 */ typedef _EXCEPTION_RECORD32 *PEXCEPTION_RECORD32;

/* 9601 */ typedef _UNICODE_STRING *PUNICODE_STRING;

/* 9602 */ typedef unsigned int XCONTENTDEVICEID;

/* 9603 */ typedef _XAMACCOUNTINFO *PXAMACCOUNTINFO;

/* 9604 */ typedef unsigned int *PCLONG;

/* 9605 */ typedef _XMATCH_SEARCH *PXMATCH_SEARCH;

/* 9606 */ typedef XAUDIOVOICEPROCESSCALLBACK *LPXAUDIOVOICEPROCESSCALLBACK;

/* 9607 */ typedef unsigned __int16 FxTrailHandle;

/* 9608 */ typedef _D3DXSHADER_CONSTANTTABLE *LPD3DXSHADER_CONSTANTTABLE;

/* 9609 */ typedef void (__cdecl *D3DHANGCALLBACK)(const char *);

/* 9610 */ typedef _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;

/* 9611 */ typedef _IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;

/* 9612 */ typedef sockaddr_in *LPSOCKADDR_IN;

/* 9613 */ typedef char max_lsp_msg_buf[1264];

/* 9614 */ typedef unsigned int MSGTIME;

/* 9615 */ typedef _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;

/* 9616 */ typedef double DOUBLE;

/* 9617 */ typedef _numberfmtA *LPNUMBERFMTA;

/* 9618 */ typedef XAUDIOMASTERINGVOICEINIT *LPXAUDIOMASTERINGVOICEINIT;

/* 9619 */ typedef unsigned __int16 XBlendInfo;

/* 9620 */ typedef void (__cdecl *PKSYSTEM_ROUTINE)(void (__cdecl *)(void *), void *);

/* 9621 */ typedef char *PSZ;

/* 9622 */ typedef unsigned __int16 XAUDIOTRAILFRAME;

/* 9623 */ typedef unsigned int SSM_SHADERHANDLE;

/* 9624 */ typedef char *LPXAUDIOCHANNEL;

/* 9625 */ typedef unsigned __int16 *LPXAUDIOTRAILFRAME;

/* 9626 */ typedef UVBASE_CREATEVOICEMAILPARAM *PUVBASE_CREATEVOICEMAILPARAM;

/* 9627 */ typedef _XINPUT_GAMEPAD *PXINPUT_GAMEPAD;

/* 9628 */ typedef XGRAPHICS::_R400_RS_BLK_E *PR400_RS_BLK_E;

/* 9629 */ typedef void (__cdecl *D3DBLOCKCALLBACK)(unsigned int, _D3DBLOCKTYPE, float, unsigned int);

/* 9630 */ typedef _TOKEN_USER *PTOKEN_USER;

/* 9631 */ typedef unsigned int *LPD3DXHANDLE;

/* 9632 */ typedef _XPROFILE_SETTING_SYNC_RESULT *PXPROFILE_SETTING_SYNC_RESULT;

/* 9633 */ typedef _FILE_TRACKING_INFORMATION *PFILE_TRACKING_INFORMATION;

/* 9634 */ typedef unsigned __int64 SSM_TIMESTAMPHANDLE;

/* 9635 */ typedef char *PCH;

/* 9636 */ typedef void (__cdecl *BINKSNDPAN)(BINKSND *, int);

/* 9637 */ typedef __int64 USN;

/* 9638 */ typedef XGRAPHICS::_E_SSM_RETURNCODE __cdecl PROCCMDBUFSTATE(XGRAPHICS::_PP_STATE_POSTPROCESSOR *, XGRAPHICS::_PS_PROGRAM_KEY *, XGRAPHICS::_ABSTRACT_STATE *, unsigned int);

/* 9639 */ typedef _DMREGISTERPERFCOUNTERPARAMBLOCK *PDMREGISTERPERFCOUNTERPARAMBLOCK;

/* 9640 */ typedef char uch;

/* 9641 */ typedef unsigned __int16 ush;

/* 9642 */ typedef _FP_80 *PFP_80;

/* 9643 */ typedef __vector4 *LPXAUDIOVECTOR;

/* 9644 */ typedef unsigned int SIZE_T;

/* 9645 */ typedef unsigned int size_t;

/* 9646 */ typedef char cbrushedge_t;

/* 9647 */ typedef unsigned int clipHandle_t;

/* 9648 */ typedef char XAUDIOENGINECALLBACKTYPE;

/* 9649 */ typedef char XAUDIOFXPARAMID;

/* 9650 */ typedef char *LPXAUDIOENGINECALLBACKTYPE;

/* 9651 */ typedef _XMEDIA_AUDIO_DESCRIPTOR *PXMEDIA_AUDIO_DESCRIPTOR;

/* 9652 */ typedef _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;

/* 9653 */ typedef _XLIVEBASE_GET_TASK_PROGRESS *PXLIVEBASE_GET_TASK_PROGRESS;

/* 9654 */ typedef char SSM_BYTE;

/* 9655 */ typedef XAUDIOCHANNELMAPENTRY *LPXAUDIOCHANNELMAPENTRY;

/* 9656 */ typedef int (__cdecl *BINKCBTRYSUSPEND)(BINKIO *);

/* 9657 */ typedef _LUID_AND_ATTRIBUTES (*PLUID_AND_ATTRIBUTES_ARRAY)[1];

/* 9658 */ typedef _FILE_COMPRESSION_INFORMATION *PFILE_COMPRESSION_INFORMATION;

/* 9659 */ typedef unsigned int (__cdecl *PKD_PORT_INITIALIZE)(unsigned int);

/* 9660 */ typedef _XDEVICERENAMEPARAM *PXDEVICERENAMEPARAM;

/* 9661 */ typedef _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY;

/* 9662 */ typedef RTV_CODEC *PRTV_CODEC;

/* 9663 */ typedef const float *dRealPtr;

/* 9664 */ typedef int (__cdecl *HASHF)(void *);

/* 9665 */ typedef _XMEDIA_VIDEO_DESCRIPTOR *PXMEDIA_VIDEO_DESCRIPTOR;

/* 9666 */ typedef XMASTREAMFORMAT *LPCXMASTREAMFORMAT;

/* 9667 */ typedef _IRP *PIRP;

/* 9668 */ typedef void (__cdecl *unexpected_function)();

/* 9669 */ typedef XAUDIOFXINIT *LPXAUDIOFXINIT;

/* 9670 */ typedef XModelPieces *XModelPiecesPtr;

/* 9671 */ typedef XGRAPHICS::_R400IL_RECORDED_INFO *PR400IL_RECORDED_INFO;

/* 9672 */ typedef XGRAPHICS::_CC_STATE_COMPILER *PCC_STATE_COMPILER;

/* 9673 */ typedef XGRAPHICS::_FA_FETCHUSAGE_BLOCK *PFA_FETCHUSAGE_BLOCK;

/* 9674 */ typedef _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;

/* 9675 */ typedef _KPCR_PAGE *PKPCR_PAGE;

/* 9676 */ typedef _FILETIME *PFILETIME;

/* 9677 */ typedef XGRAPHICS::_R400ILSTORE *PR400ILSTORE;

/* 9678 */ typedef char *LPXAUDIOSAMPLETYPE;

/* 9679 */ typedef void __cdecl MarkFragmentCallback(void *, int, FxMarkTri *, int, FxMarkPoint *, const float *, const float *);

/* 9680 */ typedef HUDSCENE *PHUDSCENE;

/* 9681 */ typedef D3DLineTexture *LPDIRECT3DLINETEXTURE9;

/* 9682 */ typedef _ATIMATRIX *PATIMATRIX;

/* 9683 */ typedef PACKET_QUEUE *PPACKET_QUEUE;

/* 9684 */ typedef const char *PCSZ;

/* 9685 */ typedef _HEAP_LOCK *PHEAP_LOCK;

/* 9686 */ typedef unsigned int _TINT;

/* 9687 */ typedef unsigned __int16 Posf;

/* 9688 */ typedef int HFILE;

/* 9689 */ typedef _RC4_HMAC_HEADER *PRC4_HMAC_HEADER;

/* 9690 */ typedef XVOICE_OBJECT *PXVOICE_OBJECT;

/* 9691 */ typedef unsigned __int64 *PDWORD64;

/* 9692 */ typedef _D3DXPARAMETER_TYPE *LPD3DXPARAMETER_TYPE;

/* 9693 */ typedef unsigned int *PUINT_PTR;

/* 9694 */ typedef XAUDIOFXTABLE *LPCXAUDIOFXTABLE;

/* 9695 */ typedef _KAPC *PKAPC;

/* 9696 */ typedef const char *PCCH;

/* 9697 */ typedef fd_set *LPFD_SET;

/* 9698 */ typedef _ATIDXDEVICE *PATIDXDEVICE;

/* 9699 */ typedef __int16 *PCSHORT;

/* 9700 */ typedef HRESULT (__cdecl *PFNPROCMODECREATE)(XHVENGINE *, void *, char, IProcMode **);

/* 9701 */ typedef _SUB_Q_CHANNEL_DATA *PSUB_Q_CHANNEL_DATA;

/* 9702 */ typedef _D3DXSEMANTIC *LPD3DXSEMANTIC;

/* 9703 */ typedef _XSHOWUPDATERUI_PARAMS *PXSHOWUPDATERUI_PARAMS;

/* 9704 */ typedef unsigned int SSM_UINT32;

/* 9705 */ typedef const char *LPCXAUDIOENGINECALLBACKTYPE;

/* 9706 */ typedef char XAUDIOVOICEINDEX;

/* 9707 */ typedef _RTL_HEAP_WALK_ENTRY *PRTL_HEAP_WALK_ENTRY;

/* 9708 */ typedef unsigned __int16 *PUINT16;

/* 9709 */ typedef _OBJECT_HANDLE_TABLE *POBJECT_HANDLE_TABLE;

/* 9710 */ typedef XMAPACKETPOSITION *LPXMAPACKETPOSITION;

/* 9711 */ typedef _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;

/* 9712 */ typedef _XMATCH_DEAD_XBOX *PXMATCH_DEAD_XBOX;

/* 9713 */ typedef char ByteVec[3];

/* 9714 */ typedef char SECURITY_CONTEXT_TRACKING_MODE;

/* 9715 */ typedef _LDRX_SOURCE *PLDRX_SOURCE;

/* 9716 */ typedef XGRAPHICS::_ID_GENERATOR *PID_GENERATOR;

/* 9717 */ typedef XAUDIOVOICEOUTPUTENTRY *LPCXAUDIOVOICEOUTPUTENTRY;

/* 9718 */ typedef tagLC_ID *LPLC_ID;

/* 9719 */ typedef _CONTEXT *LPCONTEXT;

/* 9720 */ typedef int (__cdecl *BINKSNDONOFF)(BINKSND *, int);

/* 9721 */ typedef XGRAPHICS::_XLT_EXEC_INFO_FC_DATA *PXLT_EXEC_INFO_FC_DATA;

/* 9722 */ typedef XAUDIOCHANNELVOLUME *LPCXAUDIOCHANNELVOLUME;

/* 9723 */ typedef int (__cdecl *PRTL_RELEASE_LOCK_ROUTINE)(void *);

/* 9724 */ typedef XAUDIOVOICEOUTPUTVOLUME *LPCXAUDIOVOICEOUTPUTVOLUME;

/* 9725 */ typedef _IO_COMPLETION_BASIC_INFORMATION *PIO_COMPLETION_BASIC_INFORMATION;

/* 9726 */ typedef D3DXShader::_D3DXCP_DATA *LPD3DXCP_DATA;

/* 9727 */ typedef _HEAP_FREE_ENTRY_EXTRA *PHEAP_FREE_ENTRY_EXTRA;

/* 9728 */ typedef XGRAPHICS::_R400PSIL *PR400PSIL;

/* 9729 */ typedef _ATICACHE *PATICACHE;

/* 9730 */ typedef XGRAPHICS::_XLT_RENDERSTATES *PXLT_RENDERSTATES;

/* 9731 */ typedef unsigned int COMPNUM;

/* 9732 */ typedef XGRAPHICS::_CS_R400_RENDERSTATE_VALUES *PCS_R400_STATE_VALUES;

/* 9733 */ typedef ID3DXCompressedAnimationSet *LPD3DXCOMPRESSEDANIMATIONSET;

/* 9734 */ typedef void (__cdecl *BINKIOCLOSE)(BINKIO *);

/* 9735 */ typedef D3DXVECTOR4 *LPD3DXVECTOR4;

/* 9736 */ typedef __int16 SHORT;

/* 9737 */ typedef unsigned int XAUDIODRVLOCKTYPE;

/* 9738 */ typedef void (__cdecl *PFIBER_START_ROUTINE)(void *);

/* 9739 */ typedef D3DQuery *LPDIRECT3DQUERY9;

/* 9740 */ typedef D3DXVECTOR3 *LPD3DXVECTOR3;

/* 9741 */ typedef D3DXVECTOR2 *LPD3DXVECTOR2;

/* 9742 */ typedef IDirectXFileData *LPDIRECTXFILEDATA;

/* 9743 */ typedef void (__cdecl *GamePadCallback)(int);

/* 9744 */ typedef int (__cdecl *CODEPAGE_ENUMPROCA)(char *);

/* 9745 */ typedef XAUDIODRVPERFCOUNTER *LPXAUDIODRVPERFCOUNTER;

/* 9746 */ typedef char byte4096;

/* 9747 */ typedef void *fileHandle_t;

/* 9748 */ typedef _XPERSISTENTMEMBUFFER *PXPERSISTENTMEMBUFFER;

/* 9749 */ typedef _KTRAP_FRAME *PKTRAP_FRAME;

/* 9750 */ typedef void (__cdecl *D3DSETSAMPLERSTATECALL)(D3DDevice *, unsigned int, unsigned int);

/* 9751 */ typedef XGRAPHICS::_R400VSFLOWCNTLENTRY *PR400VSFLOWCNTLENTRY;

/* 9752 */ typedef XMAWAVEFORMAT *NPXMAWAVEFORMAT;

/* 9753 */ typedef void (__cdecl *SpawnFuncCallback)(gentity_s *);

/* 9754 */ typedef dxJoint *dJointID;

/* 9755 */ typedef XMAWAVEFORMAT *LPXMAWAVEFORMAT;

/* 9756 */ typedef int LONG32;

/* 9757 */ typedef _RUNTIME_FUNCTION *PRUNTIME_FUNCTION;

/* 9758 */ typedef _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;

/* 9759 */ typedef _KDPC *PKDPC;

/* 9760 */ typedef PhysPreset *PhysPresetPtr;

/* 9761 */ typedef _XONLINE_QUERY_ATTRIBUTE_INTEGER *PXONLINE_QUERY_ATTRIBUTE_INTEGER;

/* 9762 */ typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEX;

/* 9763 */ typedef XGRAPHICS::_ATIVSOUTPUT *PATIVSOUTPUT;

/* 9764 */ typedef XAUDIOFXREGISTER *LPCXAUDIOFXREGISTER;

/* 9765 */ typedef XAUDIO::XAUDIOROUTEDVOICEINIT *LPXAUDIOROUTEDVOICEINIT;

/* 9766 */ typedef char XMASUBFRAME;

/* 9767 */ typedef XGRAPHICS::_R400FFVSVECTYPE *PR400FFVSVECTYPE;

/* 9768 */ typedef _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

/* 9769 */ typedef void (__cdecl *LPFNXAUDIOENGINECALLBACK)(void *);

/* 9770 */ typedef _SID_NAME_USE *PSID_NAME_USE;

/* 9771 */ typedef _KUSER_MODE_TYPE *PKUSER_MODE_TYPE;

/* 9772 */ typedef XGRAPHICS::_KEY_LIST_ITEM *PKEY_LIST_ITEM;

/* 9773 */ typedef const char *LPCXAUDIOSUBMITPACKET;

/* 9774 */ typedef _UCODE_R500UCODE_COMMON *PUCODE_R500UCODE_COMMON;

/* 9775 */ typedef const char *LPCXAUDIOROUTERFXMODE;

/* 9776 */ typedef XAUDIOPIXCOUNTERS *LPXAUDIOPIXCOUNTERS;

/* 9777 */ typedef IXAudioEffectManager *LPXAUDIOEFFECTMANAGER;

/* 9778 */ typedef _SHARE_ACCESS *PSHARE_ACCESS;

/* 9779 */ typedef _D3DXWELDEPSILONS *LPD3DXWELDEPSILONS;

/* 9780 */ typedef XGRAPHICS::_R400DXSETTINGS *PR400DXSETTINGS;

/* 9781 */ typedef void (__cdecl *LPVisitInstruction)(void *, bool, bool, bool, unsigned int, void *);

/* 9782 */ typedef void (__cdecl *D3DCALLBACK)(unsigned int);

/* 9783 */ typedef XAUDIOCHANNELMAPENTRY *LPCXAUDIOCHANNELMAPENTRY;

/* 9784 */ typedef _strflt *STRFLT;

/* 9785 */ typedef void ecc_point;

/* 9786 */ typedef int (__cdecl *UILANGUAGE_ENUMPROCA)(char *, int);

/* 9787 */ typedef XAUDIOSUBMIXVOICEINIT *LPCXAUDIOSUBMIXVOICEINIT;

/* 9788 */ typedef IMAGE_LOAD_CONFIG_DIRECTORY64 *PIMAGE_LOAD_CONFIG_DIRECTORY64;

/* 9789 */ typedef XMA2WAVEFORMAT *LPXMA2WAVEFORMAT;

/* 9790 */ typedef XGRAPHICS::_XLT_IL_INSTRUCTION *PXLT_IL_INSTRUCTION;

/* 9791 */ typedef unsigned __int16 *LPXAUDIODRVFRAMESIZE;

/* 9792 */ typedef XGRAPHICS::_ATIVSCOMMON *PATIVSCOMMON;

/* 9793 */ typedef _XINPUT_DEVICE_STATS *PXINPUT_DEVICE_STATS;

/* 9794 */ typedef XAUDIOSOURCEFXFORMATPARAM *LPXAUDIOSOURCEFXFORMATPARAM;

/* 9795 */ typedef _flt *FLT;

/* 9796 */ typedef unsigned int ulg;

/* 9797 */ typedef char uchf;

/* 9798 */ typedef unsigned __int16 ushf;

/* 9799 */ typedef unsigned int yy_size_t;

/* 9800 */ typedef _TOKEN_SOURCE *PTOKEN_SOURCE;

/* 9801 */ typedef const char *LPCXAUDIODATAFLOW;

/* 9802 */ typedef _KDPC *PRKDPC;

/* 9803 */ typedef JITTERBUF *PJITTERBUF;

/* 9804 */ typedef _STRING64 *PUNICODE_STRING64;

/* 9805 */ typedef IUnknown *PUNKNOWN;

/* 9806 */ typedef int (__cdecl *TIMEFMT_ENUMPROCA)(char *);

/* 9807 */ typedef int KPRIORITY;

/* 9808 */ typedef ORDINAL_TO_INDEX *LPORDINAL_TO_INDEX;

/* 9809 */ typedef unsigned int XAUDIODEBUGFLAGS;

/* 9810 */ typedef int (__cdecl *TIMEFMT_ENUMPROCW)(unsigned __int16 *);

/* 9811 */ typedef _DISPATCHER_CONTEXT *PDISPATCHER_CONTEXT;

/* 9812 */ typedef unsigned int PFN_NUMBER;

/* 9813 */ typedef char MaterialStreamDest;

/* 9814 */ typedef unsigned __int16 XMSG_PROPERTY_BINARY_INTERNAL;

/* 9815 */ typedef XGRAPHICS::_CP_SHADERPROGRAM_BLOCK *PCP_SHADERPROGRAM_BLOCK;

/* 9816 */ typedef void *SSM_OBJHANDLE;

/* 9817 */ typedef _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;

/* 9818 */ typedef unsigned int IL;

/* 9819 */ typedef wchar_t *NWPSTR;

/* 9820 */ typedef int (__cdecl *PFN_NETDLL_WSASTARTUPEX)(_XNCALLER_TYPE, unsigned __int16, WSAData *, unsigned int);

/* 9821 */ typedef void (__cdecl *_Prhand)(std::exception *);

/* 9822 */ typedef const wchar_t *LPCOLESTR;

/* 9823 */ typedef _XUIDWITHFLAGS *PXUIDWITHFLAGS;

/* 9824 */ typedef _FILE_RENAME_INFORMATION *PFILE_RENAME_INFORMATION;

/* 9825 */ typedef IXAudioRouterEffect *LPXAUDIOROUTEREFFECT;

/* 9826 */ typedef sockaddr_in *PSOCKADDR_IN;

/* 9827 */ typedef XAUDIOSOURCEFORMAT *LPCXAUDIOSOURCEFORMAT;

/* 9828 */ typedef _CLIENT_ID *PCLIENT_ID;

/* 9829 */ typedef void __cdecl ErrorCallbackProc(void *, const char *);

/* 9830 */ typedef unsigned int UINT_PTR;

/* 9831 */ typedef _FILE_MODE_INFORMATION *PFILE_MODE_INFORMATION;

/* 9832 */ typedef int *PINT_PTR;

/* 9833 */ typedef const char *LPCXAUDIOSOURCEFLAGS;

/* 9834 */ typedef unsigned int *PDWORD_PTR;

/* 9835 */ typedef IDirectXFileEnumObject *LPDIRECTXFILEENUMOBJECT;

/* 9836 */ typedef _XUSER_PROPERTY *PXUSER_PROPERTY;

/* 9837 */ typedef _D3DXTARGET_DESC *LPD3DXTARGET_DESC;

/* 9838 */ typedef void *LPXAUDIOSOURCEVOICE;

/* 9839 */ typedef SndCurve *SndCurvePtr;

/* 9840 */ typedef char *PKIRQL;

/* 9841 */ typedef char *LPXAUDIOPACKETINDEX;

/* 9842 */ typedef ID3DXAnimationCallbackHandler *LPD3DXANIMATIONCALLBACKHANDLER;

/* 9843 */ typedef struct _XUISTRINGTABLE *HXUISTRINGTABLE;

/* 9844 */ typedef _ATICACHEALG *PATICACHEALG;

/* 9845 */ typedef unsigned __int16 UnsignedShort;

/* 9846 */ typedef _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;

/* 9847 */ typedef XGRAPHICS::_ATIVSINPUTREG *PATIVSINPUTREG;

/* 9848 */ typedef void *__cdecl dReallocFunction(void *, unsigned int, unsigned int);

/* 9849 */ typedef void (__cdecl *terminate_function)();

/* 9850 */ typedef tagSIZE *PSIZEL;

/* 9851 */ typedef _TESTXEXMESSAGE *PTESTXEXMESSAGE;

/* 9852 */ typedef char *ModelLightingDest;

/* 9853 */ typedef XAUDIOSOURCEFORMAT *LPXAUDIOSOURCEFORMAT;

/* 9854 */ typedef unsigned int *PACCESS_MASK;

/* 9855 */ typedef char _TSCHAR;

/* 9856 */ typedef void (__cdecl *_PVFI)(int);

/* 9857 */ typedef D3DQuery *GfxOcclusionQuery;

/* 9858 */ typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATA;

/* 9859 */ typedef _HEAP_UCR_SEGMENT *PHEAP_UCR_SEGMENT;

/* 9860 */ typedef XGRAPHICS::_PP_STATE_POSTPROCESSOR *PPP_STATE_POSTPROCESSOR;

/* 9861 */ typedef CODEC_PROCESSOR *PCODEC_PROCESSOR;

/* 9862 */ typedef ID3DXPatchMesh *LPD3DXPATCHMESH;

/* 9863 */ typedef XGRAPHICS::__AS_STATE_MAP_INFO *PAS_STATE_MAP_INFO;

/* 9864 */ typedef _XMSG_DETAILS_RESULTS *PXMSG_DETAILS_RESULTS;

/* 9865 */ typedef IDirectXFileObject **LPLPDIRECTXFILEOBJECT;

/* 9866 */ typedef struct XGRAPHICS::CompAState *pCompAState;

/* 9867 */ typedef _EVENT_BASIC_INFORMATION *PEVENT_BASIC_INFORMATION;

/* 9868 */ typedef unsigned int (__cdecl *PKD_PORT_RECEIVE_PACKET)(unsigned int, _STRING *, _STRING *, unsigned int *);

/* 9869 */ typedef char INT8;

/* 9870 */ typedef FxImpactTable *FxImpactTablePtr;

/* 9871 */ typedef unsigned int CALTYPE;

/* 9872 */ typedef void (__cdecl *_PVFV)();

/* 9873 */ typedef void *_HFILE;

/* 9874 */ typedef _XGAMEINFO *PXGAMEINFO;

/* 9875 */ typedef _XEX_SERVICE_ID_LIST *PXEX_SERVICE_ID_LIST;

/* 9876 */ typedef unsigned __int64 XENTITY_ID;

/* 9877 */ typedef int NWORD;

/* 9878 */ typedef IPersistStream *LPPERSISTSTREAM;

/* 9879 */ typedef unsigned int (__cdecl *BINKIOIDLE)(BINKIO *);

/* 9880 */ typedef _UCODE_PSOUTPUTMASK *PUCODE_PSOUTPUTMASK;

/* 9881 */ typedef unsigned int DWORD;

/* 9882 */ typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS;

/* 9883 */ typedef void *HFONTOBJ;

/* 9884 */ typedef void (__cdecl *PEX_THREAD_NOTIFICATION)(_EX_THREAD_REGISTRATION *, _KTHREAD *, unsigned int);

/* 9885 */ typedef char *PTUCHAR;

/* 9886 */ typedef unsigned __int16 StaticModelIndex;

/* 9887 */ typedef LOOPBACK_EXTENSION *PLOOPBACK_EXTENSION;

/* 9888 */ typedef unsigned int KAFFINITY;

/* 9889 */ typedef unsigned __int64 QWORD;

/* 9890 */ typedef char _TUCHAR;

/* 9891 */ typedef unsigned __int16 *PWORD;

/* 9892 */ typedef XGRAPHICS::_OBJECT_LIST *POBJECT_LIST;

/* 9893 */ typedef _XGI_CREATEENUM_MSG *PXGI_CREATEENUM_MSG;

/* 9894 */ typedef const char *TempString;

/* 9895 */ typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;

/* 9896 */ typedef HGLRC__ *HGLRC;

/* 9897 */ typedef pcmwaveformat_tag *NPPCMWAVEFORMAT;

/* 9898 */ typedef char XAUDIOSTART;

/* 9899 */ typedef pcmwaveformat_tag *LPPCMWAVEFORMAT;

/* 9900 */ typedef _XUICLASS *HXUICLASS;

/* 9901 */ typedef _KPOWER_MODE *PKPOWER_MODE;

/* 9902 */ typedef _FP_IEEE_VALUE *PFP_IEEE_VALUE;

/* 9903 */ typedef XGRAPHICS::_R400FFPXSHADER_HANDLER *PR400FFPXSHADER_HANDLER;

/* 9904 */ typedef _GUID *LPFMTID;

/* 9905 */ typedef float XAUDIOVOLUME;

/* 9906 */ typedef _XMATCH_SESSION_DELETE *PXMATCH_SESSION_DELETE;

/* 9907 */ typedef _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;

/* 9908 */ typedef _DM_SETTINGS *PDM_SETTINGS;

/* 9909 */ typedef _DXFILELOADMEMORY *LPDXFILELOADMEMORY;

/* 9910 */ typedef HRESULT (__cdecl *PD3DHWLVSCREATEDECLFUNC)(_ATID3DCTX *, _ATIVSDECL *);

/* 9911 */ typedef _PROXY_CLASS *PPROXY_CLASS;

/* 9912 */ typedef unsigned int GfxRawStateBits[2];

/* 9913 */ typedef void (__cdecl *PartyMessageHandler)(PartyData_s *, int, netadr_t, msg_t *);

/* 9914 */ typedef _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;

/* 9915 */ typedef XHTTP_ASYNC_RESULT *LPXHTTP_ASYNC_RESULT;

/* 9916 */ typedef struct _R300DXSETTINGS *PR300DXSETTINGS;

/* 9917 */ typedef Direct3D *PDIRECT3D9;

/* 9918 */ typedef _IDE_IDENTIFY_DATA *PIDE_IDENTIFY_DATA;

/* 9919 */ typedef float dVector4[4];

/* 9920 */ typedef XGRAPHICS::_R400FFVSTEX *PR400FFVSTEX;

/* 9921 */ typedef _TOKEN_STATISTICS *PTOKEN_STATISTICS;

/* 9922 */ typedef _IO_COMPLETION_CONTEXT *PIO_COMPLETION_CONTEXT;

/* 9923 */ typedef D3DXQUATERNION *LPD3DXQUATERNION;

/* 9924 */ typedef _XCONTENT_FIND_DATA *PXCONTENT_FIND_DATA;

/* 9925 */ typedef XGRAPHICS::_R400VSMGMT *PR400VSMGMT;

/* 9926 */ typedef IDirectXFileBinary *LPDIRECTXFILEBINARY;

/* 9927 */ typedef XGRAPHICS::_TERNARY_SEARCH_TREE *PTERNARY_SEARCH_TREE;

/* 9928 */ typedef Direct3D *LPDIRECT3D9;

/* 9929 */ typedef void (__cdecl *fn_pain)(gentity_s *, gentity_s *, int, const float *, const int, const float *, hitLocation_t, const int);

/* 9930 */ typedef GfxImage *GfxImagePtr;

/* 9931 */ typedef void (__cdecl *PHAL_POWER_DOWN_NOTIFICATION)(_HAL_POWER_DOWN_REGISTRATION *);

/* 9932 */ typedef HINSTANCE__ *HMODULE;

/* 9933 */ typedef _FILE_BASIC_INFORMATION *PFILE_BASIC_INFORMATION;

/* 9934 */ typedef XGRAPHICS::_ATIVSUSEMAP *PATIVSUSEMAP;

/* 9935 */ typedef _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;

/* 9936 */ typedef localeinfo_struct *_locale_t;

/* 9937 */ typedef float *LPXAUDIODRVVOLUME;

/* 9938 */ typedef _KD_GLOBAL_DATA_BLOCK *PKD_GLOBAL_DATA_BLOCK;

/* 9939 */ typedef char *LPXAUDIOFXID;

/* 9940 */ typedef _KSEMAPHORE *PRKSEMAPHORE;

/* 9941 */ typedef _DRIVER_OBJECT *PDRIVER_OBJECT;

/* 9942 */ typedef timeval *LPTIMEVAL;

/* 9943 */ typedef XGRAPHICS::_CS_VERTEX_INPUT_PATCH *PCS_VERTEX_INPUT_PATCH;

/* 9944 */ typedef unsigned int (__cdecl *LPTHREAD_START_ROUTINE)(void *);

/* 9945 */ typedef _XMSG_DETAILS_BLOB *PXMSG_DETAILS_BLOB;

/* 9946 */ typedef SETJMP_VECTOR4 jmp_buf[20];

/* 9947 */ typedef char _TXCHAR;

/* 9948 */ typedef void (__cdecl *VD_INTERRUPT_CALLBACK)(unsigned int, void *);

/* 9949 */ typedef HRESULT (__cdecl *LPD3DXSHPRTSIMCB)(float);

/* 9950 */ typedef _XEX_DELTA_PATCH_DESCRIPTOR *PXEX_DELTA_PATCH_DESCRIPTOR;

/* 9951 */ typedef HRESULT (__cdecl *PFN_CREATEINST)(_XUIOBJ *, void **);

/* 9952 */ typedef char XAUDIOFRAMEBUFTYPE;

/* 9953 */ typedef XGRAPHICS::_R400DX_TO_IL *PR400DX_TO_IL;

/* 9954 */ typedef void (__cdecl *PRELEASE_VALIDATE_MEMORY)(void *, unsigned int *, unsigned int);

/* 9955 */ typedef StringTable *StringTablePtr;

/* 9956 */ typedef void (__cdecl *BINKIOSETINFO)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);

/* 9957 */ typedef char snapshot_key_t[8192];

/* 9958 */ typedef XGRAPHICS::_XLT_EXPORT_CACHE *PXLT_EXPORT_CACHE;

/* 9959 */ typedef float vec4_t[4];

/* 9960 */ typedef linger *LPLINGER;

/* 9961 */ typedef _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;

/* 9962 */ typedef XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *COMPILE_PROGRAM_FUNCTION_INTERFACE)(XGRAPHICS::_CC_STATE_COMPILER *, XGRAPHICS::_ABSTRACT_STATE *, XGRAPHICS::_CP_COMPILED_PROGRAM **);

/* 9963 */ typedef void *HXAMAPP;

/* 9964 */ typedef unsigned __int64 KSYSTEM_TIME;

/* 9965 */ typedef unsigned int *PULONG_PTR;

/* 9966 */ typedef _XPERSISTENTMEMPARAMS *PXPERSISTENTMEMPARAMS;

/* 9967 */ typedef const char *PCSTR;

/* 9968 */ typedef unsigned int *PLCID;

/* 9969 */ typedef char *POCHAR;

/* 9970 */ typedef unsigned int (__cdecl *BINKIOREADHEADER)(BINKIO *, int, void *, unsigned int);

/* 9971 */ typedef volatile int FxVolatileInt;

/* 9972 */ typedef _XNET_LOGON_USER *PXNET_LOGON_USER;

/* 9973 */ typedef waveformat_tag *LPCWAVEFORMAT;

/* 9974 */ typedef _XENUMERATOR_STATS *PXENUMERATOR_STATS;

/* 9975 */ typedef const char *LPCXAUDIOSOURCESTATE;

/* 9976 */ typedef char u_char;

/* 9977 */ typedef _DM_ODD_MOUNT_DATA *PDM_ODD_MOUNT_DATA;

/* 9978 */ typedef XAUDIOFXTABLEENTRY *LPXAUDIOFXTABLEENTRY;

/* 9979 */ typedef XCALCSIG_SIGNATURE *PXCALCSIG_SIGNATURE;

/* 9980 */ typedef void (__cdecl *free_func)(char *, char *);

/* 9981 */ typedef _FPSCR *PFPSCR;

/* 9982 */ typedef int (__cdecl *OUTPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

/* 9983 */ typedef void (__fastcall *CLIENT_CONVERT2UAS)(void *, void *, void *);

/* 9984 */ typedef void *HXAMTASK;

/* 9985 */ typedef XGRAPHICS::_XLT_DECL_INFO *PXLT_DECL_INFO;

/* 9986 */ typedef void *LPXAUDIOVOICE;

/* 9987 */ typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, unsigned int);

/* 9988 */ typedef XAUDIOVOICEPACKETCALLBACK *LPCXAUDIOVOICEPACKETCALLBACK;

/* 9989 */ typedef void (__cdecl *PKSTART_ROUTINE)(void *);

/* 9990 */ typedef XAUDIO::XAUDIOCHANNELMAPENTRYEX *LPXAUDIOCHANNELMAPENTRYEX;

/* 9991 */ typedef _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;

/* 9992 */ typedef unsigned __int16 edgeCount_t[3];

/* 9993 */ typedef unsigned int (__cdecl *LPREADTILEEX)(XTILETYPE, unsigned int, unsigned __int64, unsigned int, int, _XUSER_DATA *, char *, unsigned int *, _XOVERLAPPED *);

/* 9994 */ typedef unsigned int PS_VIDMEM_UPDATE;

/* 9995 */ typedef unsigned int *PPFN_COUNT;

/* 9996 */ typedef __int16 _I16;

/* 9997 */ typedef int (__cdecl *LANGGROUPLOCALE_ENUMPROCW)(unsigned int, unsigned int, unsigned __int16 *, int);

/* 9998 */ typedef char TBYTE;

/* 9999 */ typedef unsigned int XMVECTORI[4];

/*10000 */ typedef _XAMPOWERMODE *PXAMPOWERMODE;

/*10001 */ typedef char *PBYTE;

/*10002 */ typedef void **PHXAMTASK;

/*10003 */ typedef JBPACKET *PJBPACKET;

/*10004 */ typedef unsigned __int16 UHALF_PTR;

/*10005 */ typedef _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;

/*10006 */ typedef _GUID *LPCLSID;

/*10007 */ typedef __int16 *PHALF_PTR;

/*10008 */ typedef void *AS_OBJHANDLE;

/*10009 */ typedef char GfxSamplerState;

/*10010 */ typedef void (__cdecl *LPFNXAUDIOSOURCEPACKETCALLBACK)(XAUDIOSOURCEFXPACKETCALLBACK *);

/*10011 */ typedef _STRING *PANSI_STRING;

/*10012 */ typedef pcmwaveformat_tag *LPCPCMWAVEFORMAT;

/*10013 */ typedef _PARTITION_INFORMATION *PPARTITION_INFORMATION;

/*10014 */ typedef unsigned __int16 uint16_t;

/*10015 */ typedef const unsigned int *LPCXAUDIOLOCKTYPE;

/*10016 */ typedef int (__cdecl *LANGGROUPLOCALE_ENUMPROCA)(unsigned int, unsigned int, char *, int);

/*10017 */ typedef _D3DXPATCHINFO *LPD3DXPATCHINFO;

/*10018 */ typedef XGRAPHICS::_KEY_LIST *PUNORDERED_LIST;

/*10019 */ typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *);

/*10020 */ typedef const int *LPCXAUDIOPACKETSTATUS;

/*10021 */ typedef unsigned int *LPDWORD;

/*10022 */ typedef XGRAPHICS::_R400_COLOR_ELEMENT_FMT *PR400_COLOR_ELEMENT_FMT;

/*10023 */ typedef char *LPXAUDIOVOICEFXSTATE;

/*10024 */ typedef _SECURITY_TOKEN_AUDIT_DATA *PSECURITY_TOKEN_AUDIT_DATA;

/*10025 */ typedef HRESULT (__cdecl *PFNCODECCREATE)(void *);

/*10026 */ typedef _XENUMERATORHEADER *PXENUMERATORHEADER;

/*10027 */ typedef _LIST_ENTRY *PLIST_ENTRY;

/*10028 */ typedef int SndPlaybackId;

/*10029 */ typedef unsigned int D3DXF_FILELOADOPTIONS;

/*10030 */ typedef _KTIMER *PKTIMER;

/*10031 */ typedef unsigned int __cdecl ATICACHEHASHFUNC(char *, unsigned int);

/*10032 */ typedef HCOLORSPACE__ *HCOLORSPACE;

/*10033 */ typedef unsigned __int16 int_type;

/*10034 */ typedef XAUDIOFXUNREGISTER *LPCXAUDIOFXUNREGISTER;

/*10035 */ typedef HRESULT *LPXAUDIOPACKETSTATUS;

/*10036 */ typedef _XCREATECONTENTPARAM *PXCREATECONTENTPARAM;

/*10037 */ typedef _XONLINE_USER_TEAM *PXONLINE_USER_TEAM;

/*10038 */ typedef _UCODE_INTERPOLATOR_HEADER *PUCODE_INTERPOLATOR_HEADER;

/*10039 */ typedef t_decoder_context *PXONLINE_LZXDECODER_CONTEXT;

/*10040 */ typedef unsigned __int16 NCI_RETCODE;

/*10041 */ typedef BSAFE_PUB_KEY *LPBSAFE_PUB_KEY;

/*10042 */ typedef void (__cdecl *PPS_APC_ROUTINE)(void *, void *, void *);

/*10043 */ typedef char *LPXAUDIOVOICEFXINDEX;

/*10044 */ typedef D3DDevice *PDIRECT3DDEVICE9;

/*10045 */ typedef _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;

/*10046 */ typedef _HAL_HDDVD_ROM_REGISTRATION *PHAL_HDDVD_ROM_REGISTRATION;

/*10047 */ typedef unsigned int *LPXAUDIODEBUGFLAGS;

/*10048 */ typedef _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;

/*10049 */ typedef unsigned __int64 ULONG64;

/*10050 */ typedef unsigned __int64 ulong64;

/*10051 */ typedef unsigned int DWORD_PTR;

/*10052 */ typedef __int64 *PLONG64;

/*10053 */ typedef _DMINIT *PDMINIT;

/*10054 */ typedef _XEX_DATA_DESCRIPTOR *PXEX_DATA_DESCRIPTOR;

/*10055 */ typedef unsigned int *intrnman;

/*10056 */ typedef void *(__cdecl *TypDefMemcpy)(void *, const void *, unsigned int);

/*10057 */ typedef unsigned int uLongf;

/*10058 */ typedef unsigned int (__cdecl *LPREADTILETOTEXTUREEX)(XTILETYPE, unsigned int, unsigned __int64, unsigned int, int, _XUSER_DATA *, char *, unsigned int, unsigned int, _XOVERLAPPED *);

/*10059 */ typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;

/*10060 */ typedef _UCODE_R500VSUCODE *PUCODE_R500VSUCODE;

/*10061 */ typedef XHVENGINE *PXHVENGINE;

/*10062 */ typedef _FILE_MOVE_CLUSTER_INFORMATION *PFILE_MOVE_CLUSTER_INFORMATION;

/*10063 */ typedef XGRAPHICS::_OBJECT_LIST_FACTORY *POBJECT_LIST_FACTORY;

/*10064 */ typedef _OBJECT_TYPE *POBJECT_TYPE;

/*10065 */ typedef D3DXFLOAT16 *LPD3DXFLOAT16;

/*10066 */ typedef _XCONTENT_LICENSE *PXCONTENT_LICENSE;

/*10067 */ typedef _KIPI_COUNTS *PKIPI_COUNTS;

/*10068 */ typedef XGRAPHICS::_XLT_EXEC_INFO_ALLOC_DATA *PXLT_EXEC_INFO_ALLOC_DATA;

/*10069 */ typedef _XMARKETPLACE_CONTENTOFFER_INFO *PXMARKETPLACE_CONTENTOFFER_INFO;

/*10070 */ typedef float *LPXAUDIOFXNUMERICPARAM;

/*10071 */ typedef void __cdecl SndLengthNotifyFunction(int, void *);

/*10072 */ typedef __int64 int64_t;

/*10073 */ typedef int scr_func_t;

/*10074 */ typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, wchar_t *, int *);

/*10075 */ typedef _XMSG_PROPERTY_DATA *PXMSG_PROPERTY_DATA;

/*10076 */ typedef _DMDVD *PDMDVD;

/*10077 */ typedef XAUDIOMASTERINGVOICEINIT *LPCXAUDIOMASTERINGVOICEINIT;

/*10078 */ typedef void (__cdecl *XpsCallback)(XpsThread *, void *, const void *, unsigned int);

/*10079 */ typedef int __time32_t;

/*10080 */ typedef const char *LPCXAUDIOPACKETINDEX;

/*10081 */ typedef _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];

/*10082 */ typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;

/*10083 */ typedef _FILE_FS_FULL_SIZE_INFORMATION *PFILE_FS_FULL_SIZE_INFORMATION;

/*10084 */ typedef _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;

/*10085 */ typedef XGRAPHICS::_XLT_TEXTURE_INFO *PXLT_TEXTURE_INFO;

/*10086 */ typedef unsigned __int16 ScriptString;

/*10087 */ typedef _FILE_FS_LABEL_INFORMATION *PFILE_FS_LABEL_INFORMATION;

/*10088 */ typedef _XTHREAD_NOTIFICATION *PXTHREAD_NOTIFICATION;

/*10089 */ typedef HRESULT (__cdecl *PFNXML_ELEMENT_END_CALLBACK)(void *, XML_ELEMENT *, unsigned int);

/*10090 */ typedef char *LPXAUDIOXMASTREAMCOUNT;

/*10091 */ typedef void __cdecl ReportOutOfRegistersErrorProc(D3DXShader::Compiler *);

/*10092 */ typedef void (__cdecl *LPFNXAUDIOVOICEPROCESSCALLBACK)(XAUDIOVOICEPROCESSCALLBACK *);

/*10093 */ typedef int INT;

/*10094 */ typedef XAUDIOPACKET *LPXAUDIOPACKET;

/*10095 */ typedef float XAUDIOFREQSCALE;

/*10096 */ typedef XAUDIOSUBMIXVOICEINIT *LPXAUDIOSUBMIXVOICEINIT;

/*10097 */ typedef _FILE_FS_DEVICE_INFORMATION *PFILE_FS_DEVICE_INFORMATION;

/*10098 */ typedef void (__cdecl *PSWAP_CONTEXT_NOTIFY_ROUTINE)(_KTHREAD *, _KTHREAD *);

/*10099 */ typedef XAUDIOVOICEPACKETCALLBACK *LPXAUDIOVOICEPACKETCALLBACK;

/*10100 */ typedef void (__cdecl *PFNMSGBOXRETURN)(int, XHUDOPENSTATE *);

/*10101 */ typedef linger *PLINGER;

/*10102 */ typedef char min_msg_buf[2048];

/*10103 */ typedef void (__cdecl *BINKSNDCLOSE)(BINKSND *);

/*10104 */ typedef unsigned int LCID;

/*10105 */ typedef HICON__ *HICON;

/*10106 */ typedef char primaryLightTechType_t[256];

/*10107 */ typedef XGRAPHICS::_SS_SHADER_STORE_ITEM *PSS_SHADER_STORE_ITEM;

/*10108 */ typedef char *LPSTR;

/*10109 */ typedef char *NPSTR;

/*10110 */ typedef HWINEVENTHOOK__ *HWINEVENTHOOK;

/*10111 */ typedef _XAMTASKATTRIBUTES *PXAMTASKATTRIBUTES;

/*10112 */ typedef HBITMAP__ *HBITMAP;

/*10113 */ typedef void *PSID;

/*10114 */ typedef unsigned int BITINDEX;

/*10115 */ typedef IXAudioRefCount *LPXAUDIOREFCOUNT;

/*10116 */ typedef void (__cdecl *PFN_XEKEYS_SECURITY_INITIALIZE)();

/*10117 */ typedef XMALOOPREGION *LPXMALOOPREGION;

/*10118 */ typedef char XAUDIOXMASTREAMCOUNT;

/*10119 */ typedef _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;

/*10120 */ typedef void __cdecl FreeMemoryProc(void *, void *, unsigned int);

/*10121 */ typedef _HARDWARE_PTE *PHARDWARE_PTE;

/*10122 */ typedef int (__cdecl *PLOAD_IMAGE_FUNCTION)(char *, _LDRX_SOURCE *, _LDRX_SOURCE *);

/*10123 */ typedef unsigned int XAUDIOSOURCEBUFFERID;

/*10124 */ typedef IStream *LPSTREAM;

/*10125 */ typedef _EX_XCONFIG_REGISTRATION *PEX_XCONFIG_REGISTRATION;

/*10126 */ typedef unsigned int *(__cdecl *PGET_VALIDATE_MEMORY)(void *, unsigned int, unsigned int);

/*10127 */ typedef HRESULT (__cdecl *MicrocodeEnumerateConstantTableCallbackFunction)(void *, const char *, unsigned int, _D3DXREGISTER_SET, unsigned int, const void *);

/*10128 */ typedef _HEAP_STOP_ON_VALUES *PHEAP_STOP_ON_VALUES;

/*10129 */ typedef yy_buffer_state *YY_BUFFER_STATE;

/*10130 */ typedef _XEX_TLS_DATA *PXEX_TLS_DATA;

/*10131 */ typedef D3DVertexBuffer *LPDIRECT3DVERTEXBUFFER9;

/*10132 */ typedef void (__cdecl *LPFNXAUDIOSRC)(XAUDIO::XAUDIOSRCHDR *);

/*10133 */ typedef unsigned int (__cdecl *CLIENT_READFILE)(void *, void *, char *, unsigned int, unsigned int *);

/*10134 */ typedef UVCHANNELINFO *PUVCHANNELINFO;

/*10135 */ typedef _XSESSION_SEARCHRESULT *PXSESSION_SEARCHRESULT;

/*10136 */ typedef int XAUDIODEBUGLEVEL;

/*10137 */ typedef _FILE_POSITION_INFORMATION *PFILE_POSITION_INFORMATION;

/*10138 */ typedef _RTL_CRITICAL_SECTION *LPCRITICAL_SECTION;

/*10139 */ typedef _QUAD *PUQUAD;

/*10140 */ typedef void *(__cdecl *OB_ALLOCATE_METHOD)(unsigned int, unsigned int, _POOL_TYPE);

/*10141 */ typedef XGRAPHICS::_CS_COMPILED_SHADER *PCS_COMPILED_SHADER;

/*10142 */ typedef _CDROM_SEEK_AUDIO_MSF *PCDROM_SEEK_AUDIO_MSF;

/*10143 */ typedef _DUMP_COLLECTION_HELP *PDUMP_COLLECTION_HELP;

/*10144 */ typedef void **LPXAUDIODRVCLIENTHANDLE;

/*10145 */ typedef wchar_t *LPOLESTR;

/*10146 */ typedef _D3DXINTERSECTINFO *LPD3DXINTERSECTINFO;

/*10147 */ typedef _STRING32 *PSTRING32;

/*10148 */ typedef _XHASH_STATE *PXHASH_STATE;

/*10149 */ typedef _XONLINE_QUERY_ATTRIBUTE_BLOB *PXONLINE_QUERY_ATTRIBUTE_BLOB;

/*10150 */ typedef HRESULT (__cdecl *PFN_OBJECT_PROC)(_XUIOBJ *, XUIMessage *, void *);

/*10151 */ typedef _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

/*10152 */ typedef const char ConstChar;

/*10153 */ typedef int *LPXAUDIODEBUGLEVEL;

/*10154 */ typedef const char *LPCXAUDIOFRAMEBUFTYPE;

/*10155 */ typedef char *LPXAUDIOVOICECATEGORY;

/*10156 */ typedef void *(__cdecl *TypDefCalloc)(unsigned int, unsigned int);

/*10157 */ typedef unsigned __int16 HALF;

/*10158 */ typedef void (__cdecl *FxProfileDrawFunc)(const char *, float *);

/*10159 */ typedef ID3DXSPMesh *LPD3DXSPMESH;

/*10160 */ typedef ID3DXSaveUserData *LPD3DXSAVEUSERDATA;

/*10161 */ typedef const unsigned int *LPCXAUDIODEBUGFLAGS;

/*10162 */ typedef void (__cdecl *TypDefFree)(void *);

/*10163 */ typedef const char *pcchar_t;

/*10164 */ typedef _RTL_HEAP_ENTRY *PRTL_HEAP_ENTRY;

/*10165 */ typedef _XINPUT_VIBRATION *PXINPUT_VIBRATION;

/*10166 */ typedef char XAUDIOSTOP;

/*10167 */ typedef _XINPUT_CAPABILITIES *PXINPUT_CAPABILITIES;

/*10168 */ typedef _KEXCEPTION_STACK_FRAME *PKEXCEPTION_STACK_FRAME;

/*10169 */ typedef _XUSER_CONTEXT *PXUSER_CONTEXT;

/*10170 */ typedef _HEAP_TAG_ENTRY *PHEAP_TAG_ENTRY;

/*10171 */ typedef unsigned int (__cdecl *PTHREAD_START_ROUTINE)(void *);

/*10172 */ typedef _SYSTEMTIME *PSYSTEMTIME;

/*10173 */ typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER;

/*10174 */ typedef _KD_SYMBOLS_INFO *PKD_SYMBOLS_INFO;

/*10175 */ typedef unsigned __int16 UShortVec[3];

/*10176 */ typedef void (__cdecl *OB_FREE_METHOD)(void *);

/*10177 */ typedef _D3DXSHADER_DEBUGINFO *LPD3DXSHADER_DEBUGINFO;

/*10178 */ typedef void (__cdecl *PFLS_CALLBACK_FUNCTION)(void *);

/*10179 */ typedef void (__cdecl *MtlForEachTechSetCallback)(MaterialTechniqueSet *);

/*10180 */ typedef IDirectXFileDataReference *LPDIRECTXFILEDATAREFERENCE;

/*10181 */ typedef XAUDIOVOICEFXCHAIN *LPCXAUDIOVOICEFXCHAIN;

/*10182 */ typedef unsigned int REGNUM;

/*10183 */ typedef HHOOK__ *HHOOK;

/*10184 */ typedef void *PKIPI_CONTEXT;

/*10185 */ typedef HRESULT (__cdecl *PD3DHWLVSDELETEFUNC)(_ATID3DCTX *, unsigned int, _ATIVSFUNC *);

/*10186 */ typedef unsigned int XHV_PLAYBACK_PRIORITY;

/*10187 */ typedef void __cdecl dGetAABBFn(dxGeom *, float *);

/*10188 */ typedef unsigned int D3DXF_FILEFORMAT;

/*10189 */ typedef _LDRX_PATCH_DESCRIPTOR *PLDRX_PATCH_DESCRIPTOR;

/*10190 */ typedef _XINPUT_RAW *PXINPUT_RAW;

/*10191 */ typedef _ATID3DSHADERCONSTTABLE *PATID3DSHADERCONSTTBL;

/*10192 */ typedef D3DCubeTexture *LPDIRECT3DCUBETEXTURE9;

/*10193 */ typedef _FILE_OBJECT *PFILE_OBJECT;

/*10194 */ typedef ID3DXEffectPool *LPD3DXEFFECTPOOL;

/*10195 */ typedef _XUITEX *HXUITEX;

/*10196 */ typedef DM_XAM_SERVICES_1888 *PDM_XAM_SERVICES_1888;

/*10197 */ typedef __int64 fpos_t;

/*10198 */ typedef unsigned int XHV_LOCK_TYPE;

/*10199 */ typedef int (__cdecl *PTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/*10200 */ typedef _XUIPACKAGE *HXUIPACKAGE;

/*10201 */ typedef _DUMP_COLLECTION_FACILITY *PDUMP_COLLECTION_FACILITY;

/*10202 */ typedef snd_alias_list_t *snd_alias_list_name;

/*10203 */ typedef XSVENGINE *PXSVENGINE;

/*10204 */ typedef _ATA_PASS_THROUGH *PATA_PASS_THROUGH;

/*10205 */ typedef XAUDIOFXUNREGISTER *LPXAUDIOFXUNREGISTER;

/*10206 */ typedef const float *LPCXAUDIOSAMPLE;

/*10207 */ typedef HRESULT (__cdecl *PMicrocodeShaderInstructionCallback)(unsigned int, unsigned int, GPUSHADER_INSTRUCTION *, void *);

/*10208 */ typedef HRESULT (__cdecl *PD3DHWLVSDELETEFUNCFUNC)(_ATID3DCTX *, _ATIVSFUNC *);

/*10209 */ typedef int s_long;

/*10210 */ typedef unsigned int u_long;

/*10211 */ typedef XAUDIOVOICEOUTPUTVOLUME *LPXAUDIOVOICEOUTPUTVOLUME;

/*10212 */ typedef XAUDIOFXPARAM *LPCXAUDIOFXPARAM;

/*10213 */ typedef const unsigned int *LPCXAUDIOSPEAKERCONFIG;

/*10214 */ typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;

/*10215 */ typedef _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;

/*10216 */ typedef unsigned int _dev_t;

/*10217 */ typedef _CONTEXT *PCONTEXT;

/*10218 */ typedef void (__cdecl *PKPROFILER_INT_ROUTINE)(_KTRAP_FRAME *, char, char);

/*10219 */ typedef int (__cdecl *BINKSNDUNLOCK)(BINKSND *, unsigned int);

/*10220 */ typedef float *LPXAUDIOVOLUME;

/*10221 */ typedef _HV_IMAGE_IMPORT_TABLE *PHV_IMAGE_IMPORT_TABLE;

/*10222 */ typedef dxTriMeshData *dTriMeshDataID;

/*10223 */ typedef _HEAP_ENTRY_EXTRA *PHEAP_ENTRY_EXTRA;

/*10224 */ typedef _XCONTSIG_FILELIST_ENTRY *PXCONTSIG_FILELIST_ENTRY;

/*10225 */ typedef char VerOpcode;

/*10226 */ typedef _ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

/*10227 */ typedef void (__cdecl *LOG)(void *, const char *);

/*10228 */ typedef XAUDIOPERFCOUNTER *LPCXAUDIOPERFCOUNTER;

/*10229 */ typedef unsigned int bitfield32;

/*10230 */ typedef _XONLINE_ATTRIBUTE_DATA *PXONLINE_ATTRIBUTE_DATA;

/*10231 */ typedef _D3DXSHADER_CONSTANTINFO *LPD3DXSHADER_CONSTANTINFO;

/*10232 */ typedef void (__cdecl *MEMFREEFUNC)(void *);

/*10233 */ typedef menuDef_t *menuDef_ptr;

/*10234 */ typedef HRESULT (__cdecl *PFNXML_ELEMENT_BEGIN_CALLBACK)(void *, XML_ELEMENT *, unsigned int, XML_ATTRIBUTE *, unsigned int);

/*10235 */ typedef XAUDIOVOICEOUTPUTVOLUMEENTRY *LPXAUDIOVOICEOUTPUTVOLUMEENTRY;

/*10236 */ typedef unsigned __int16 Pos;

/*10237 */ typedef int (__cdecl *_onexit_t)();

/*10238 */ typedef D3DStateBlock *PDIRECT3DSTATEBLOCK9;

/*10239 */ typedef unsigned int INTTX_HANDLE;

/*10240 */ typedef _XENUMERATOR_XGI *PXENUMERATOR_XGI;

/*10241 */ typedef XGRAPHICS::_ATIVSFUNC *PATIVSFUNC;

/*10242 */ typedef float _FP32;

/*10243 */ typedef XGRAPHICS::_INTEGER_LIST *PINTEGER_LIST;

/*10244 */ typedef unsigned int rsize_t;

/*10245 */ typedef int SSIZE_T;

/*10246 */ typedef void (__cdecl *BINKCBRESUME)(BINKIO *);

/*10247 */ typedef unsigned int *PSIZE_T;

/*10248 */ typedef REMOTETALKER *PREMOTETALKER;

/*10249 */ typedef _XONLINE_QUERY_ATTRIBUTE_STRING *PXONLINE_QUERY_ATTRIBUTE_STRING;

/*10250 */ typedef LocalizeEntry *LocalizeEntryPtr;

/*10251 */ typedef _XINVITE_INFO *PXINVITE_INFO;

/*10252 */ typedef _LIST_ENTRY *PRLIST_ENTRY;

/*10253 */ typedef _XUSER_STATS_ROW *PXUSER_STATS_ROW;

/*10254 */ typedef unsigned int *LPXAUDIOSOURCEBUFFERID;

/*10255 */ typedef void *PACCESS_TOKEN;

/*10256 */ typedef _STRING *POEM_STRING;

/*10257 */ typedef int (__cdecl *PFN_XEKEYS_SECURITY_SAVE_SETTINGS)();

/*10258 */ typedef XAUDIOSOURCEFXINIT *LPCXAUDIOSOURCEFXINIT;

/*10259 */ typedef void *EVENT_HANDLE;

/*10260 */ typedef const char **XStringPtr;

/*10261 */ typedef void *HXAMTASKOBJ;

/*10262 */ typedef _XEX_FILE_DATA_DESCRIPTOR *PXEX_FILE_DATA_DESCRIPTOR;

/*10263 */ typedef int (__cdecl *DATEFMT_ENUMPROCEXA)(char *, unsigned int);

/*10264 */ typedef XVOICE_PACKET_QUEUE *PXVOICE_PACKET_QUEUE;

/*10265 */ typedef _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;

/*10266 */ typedef unsigned int (__cdecl *PFNREADMMREGULONG)(unsigned int);

/*10267 */ typedef _XINPUT_POLLING_PARAMETERS *PXINPUT_POLLING_PARAMETERS;

/*10268 */ typedef XMAPACKETPOSITION *LPCXMAPACKETPOSITION;

/*10269 */ typedef unsigned int XAUDIOLOOPCOUNT;

/*10270 */ typedef _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;

/*10271 */ typedef unsigned int SSM_BOOL;

/*10272 */ typedef void (__cdecl *LPFNXAUDIODRVRENDERFXCALLBACK)(XAUDIODRVRENDERFXCALLBACK *);

/*10273 */ typedef _CDROM_AUDIO_CONTROL *PCDROM_AUDIO_CONTROL;

/*10274 */ typedef int (__cdecl *DATEFMT_ENUMPROCEXW)(unsigned __int16 *, unsigned int);

/*10275 */ typedef int errcode;

/*10276 */ typedef _RTL_PROCESS_HEAPS *PRTL_PROCESS_HEAPS;

/*10277 */ typedef _XMARKETPLACE_ASSET_ENUMERATE_REPLY *PXMARKETPLACE_ASSET_ENUMERATE_REPLY;

/*10278 */ typedef XGRAPHICS::_TERNARY_NODE *PTERNARY_NODE;

/*10279 */ typedef void (__cdecl *xcommand_t)();

/*10280 */ typedef int (__cdecl *_PIFV)();

/*10281 */ typedef HTASK__ *HTASK;

/*10282 */ typedef unsigned __int16 *LPXAUDIOFRAMESIZE;

/*10283 */ typedef unsigned int D3DCOLOR;

/*10284 */ typedef _STRING32 *PANSI_STRING32;

/*10285 */ typedef _OSVERSIONINFOA *LPOSVERSIONINFO;

/*10286 */ typedef _XSHOWMARKETPLACEUI_PARAMS *PXSHOWMARKETPLACEUI_PARAMS;

/*10287 */ typedef _PRIVILEGE_SET *PPRIVILEGE_SET;

/*10288 */ typedef ID3DXSprite *LPD3DXSPRITE;

/*10289 */ typedef __int16 s_short;

/*10290 */ typedef unsigned __int16 u_short;

/*10291 */ typedef _FIBER *PFIBER;

/*10292 */ typedef _DMDRIVE *PDMDRIVE;

/*10293 */ typedef unsigned __int64 uint64_t;

/*10294 */ typedef _KSPECIAL_REGISTERS *PKSPECIAL_REGISTERS;

/*10295 */ typedef _MESSAGEBOX_RESULT *PMESSAGEBOX_RESULT;

/*10296 */ typedef _D3DXKEY_QUATERNION *LPD3DXKEY_QUATERNION;

/*10297 */ typedef _HEAP_PSEUDO_TAG_ENTRY *PHEAP_PSEUDO_TAG_ENTRY;

/*10298 */ typedef XTITLE_SERVER_INFO *PXTITLE_SERVER_INFO;

/*10299 */ typedef int (__cdecl *PFNXNENETINTERCEPTRECVCALLBACK)(void *, const char *, unsigned int);

/*10300 */ typedef XGRAPHICS::VRegInfo *__cdecl VCtrPtr(int, R400Tables::RegType, XGRAPHICS::Compiler *);

/*10301 */ typedef _PPC_INSTRUCTION *PPPC_INSTRUCTION;

/*10302 */ typedef D3DArrayTexture *PDIRECT3DARRAYTEXTURE9;

/*10303 */ typedef unsigned int _fsize_t;

/*10304 */ typedef int mbstate_t;

/*10305 */ typedef XAUDIOPACKETPOSITION *LPXAUDIOPACKETPOSITION;

/*10306 */ typedef _XEX_CALLCAP_IMPORTS *PXEX_CALLCAP_IMPORTS;

/*10307 */ typedef float XAUDIOFXNUMERICPARAM;

/*10308 */ typedef _XUSER_STATS_SPEC *PXUSER_STATS_SPEC;

/*10309 */ typedef snd_alias_list_t *snd_alias_list_ptr;

/*10310 */ typedef _UCODE_VSINDEXDECLARATION *PUCODE_VSINDEXDECLARATION;

/*10311 */ typedef _XMATCH_DEAD_SG *PXMATCH_DEAD_SG;

/*10312 */ typedef int INT_PTR;

/*10313 */ typedef _D3DDEVINFO_VCACHE *LPD3DDEVINFO_VCACHE;

/*10314 */ typedef _LDRX_PLUGIN *PLDRX_PLUGIN;

/*10315 */ typedef void *SSM_STATEHANDLE;

/*10316 */ typedef GameWorldSp *GameWorldSpPtr;

/*10317 */ typedef void (__cdecl *terminate_handler)();

/*10318 */ typedef _TRACK_DATA *PTRACK_DATA;

/*10319 */ typedef unsigned int UNWORD;

/*10320 */ typedef void (__cdecl *BuiltinMethod)(scr_entref_t);

/*10321 */ typedef HRESULT (__cdecl *PDM_CMDCONTPROC)(_DM_CMDCONT *, char *, unsigned int);

/*10322 */ typedef NCIDECODER_EXTENSION *PNCIDECODER_EXTENSION;

/*10323 */ typedef HPALETTE__ *HPALETTE;

/*10324 */ typedef const char *LPCXAUDIOVOICEFXSTATE;

/*10325 */ typedef unsigned int DWORD32;

/*10326 */ typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;

/*10327 */ typedef char XAUDIOPACKETINDEX;

/*10328 */ typedef void (__cdecl *PKNORMAL_ROUTINE)(void *, void *, void *);

/*10329 */ typedef XGRAPHICS::_R400DXDEVICEDATA *PR400DXDEVICEDATA;

/*10330 */ typedef XAUDIO::XAUDIOFXMGRFXTABLEENTRY *LPXAUDIOFXMGRFXTABLEENTRY;

/*10331 */ typedef void (__cdecl *BG_RegisterWeapon)(unsigned int);

/*10332 */ typedef _DUMP_MEDIA_SERVICES *PDUMP_MEDIA_SERVICES;

/*10333 */ typedef _D3DXINCLUDE_TYPE *LPD3DXINCLUDE_TYPE;

/*10334 */ typedef _XGI_VIEWRESET_MSG *PXGI_VIEWRESET_MSG;

/*10335 */ typedef XAUDIOPERFCOUNTER *LPXAUDIOPERFCOUNTER;

/*10336 */ typedef _DMALTINI *PDMALTINI;

/*10337 */ typedef _D3DXSHADER_COMPILE_PARAMETERSA *LPD3DXSHADER_COMPILE_PARAMETERSA;

/*10338 */ typedef IXHVEngine *PIXHVENGINE;

/*10339 */ typedef HENHMETAFILE__ *HENHMETAFILE;

/*10340 */ typedef D3DXShader::_D3DXRANGE *LPD3DXRANGE;

/*10341 */ typedef void (__cdecl *fn_blocked)(gentity_s *, gentity_s *);

/*10342 */ typedef int (__cdecl *BINKSNDREADY)(BINKSND *);

/*10343 */ typedef _QUERY_SEARCH_RESULT *PQUERY_SEARCH_RESULT;

/*10344 */ typedef XONLINE_FRIEND_LIST_INTERNAL *PXONLINE_FRIEND_LIST_INTERNAL;

/*10345 */ typedef void (__cdecl *ScriptCallbackClient)(gclient_s *, client_fields_s *);

/*10346 */ typedef _D3DXMESHDATA *LPD3DXMESHDATA;

/*10347 */ typedef _LUID *PLUID;

/*10348 */ typedef HDESK__ *HDESK;

/*10349 */ typedef _AP25_AUTHENTICATION_OUTPUT *PAP25_AUTHENTICATION_OUTPUT;

/*10350 */ typedef _UNICODE_STRING *PCUNICODE_STRING;

/*10351 */ typedef void *XAUDIODRVCLIENTHANDLE;

/*10352 */ typedef void (__cdecl *threadFunction_t)(unsigned int);

/*10353 */ typedef ID3DXConstantTable *LPD3DXCONSTANTTABLE;

/*10354 */ typedef unsigned int LOGICAL;

/*10355 */ typedef _XCONTSIG_SIGNATURES *PXCONTSIG_SIGNATURES;

/*10356 */ typedef XAUDIO::XMAPLAYBACK *PXMAPLAYBACK;

/*10357 */ typedef _XCONTSIG_LIVE_SIGNATURE *PXCONTSIG_LIVE_SIGNATURE;

/*10358 */ typedef char MaterialStreamSource;

/*10359 */ typedef _XEKEYS_SET_REVOCATION_LIST *PXEKEYS_SET_REVOCATION_LIST;

/*10360 */ typedef HRESULT (__cdecl *PFNEXECSVCHAL)(unsigned int, const char *, unsigned int, char *, unsigned int);

/*10361 */ typedef VOICECHATINFO *PVOICECHATINFO;

/*10362 */ typedef _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;

/*10363 */ typedef _XEX_VITAL_STATS *PXEX_VITAL_STATS;

/*10364 */ typedef XAUDIOREVERBSETTINGS *LPXAUDIOREVERBSETTINGS;

/*10365 */ typedef void (__cdecl *_PMFN)();

/*10366 */ typedef _RECTL *LPCRECTL;

/*10367 */ typedef _OVERLAPPED *LPWSAOVERLAPPED;

/*10368 */ typedef XGRAPHICS::_HWINFO_LCC *PHWINFO_LCC;

/*10369 */ typedef XUIElementPropDef *(__cdecl *PFN_GETPROPDEF)(unsigned int *);

/*10370 */ typedef XGRAPHICS::_CP_CONSTCTRL *PCP_CONSTCTRL;

/*10371 */ typedef XONLINECONTENT_HEADER *PXONLINECONTENT_HEADER;

/*10372 */ typedef _RTL_PROCESS_LOCKS *PRTL_PROCESS_LOCKS;

/*10373 */ typedef D3DCommandBuffer *LPDIRECT3DCOMMANDBUFFER9;

/*10374 */ typedef _IO_COUNTERS *PIO_COUNTERS;

/*10375 */ typedef XGRAPHICS::_XLT_DECLTEX_INFO *PXLT_DECLTEX_INFO;

/*10376 */ typedef ID3DXBaseEffect *LPD3DXBASEEFFECT;

/*10377 */ typedef D3DXMATRIX *LPD3DXMATRIX;

/*10378 */ typedef XAUDIO::XAUDIOSRCHDR *LPXAUDIOSRCHDR;

/*10379 */ typedef unsigned int (__cdecl *PHAL_POWER_DOWN_CALLBACK)();

/*10380 */ typedef UVBASE_QUITVOICECHATPARAM *PUVBASE_QUITVOICECHATPARAM;

/*10381 */ typedef waveformat_tag *LPWAVEFORMAT;

/*10382 */ typedef waveformat_tag *NPWAVEFORMAT;

/*10383 */ typedef void *const *LPCXAUDIODRVCLIENTHANDLE;

/*10384 */ typedef XAUDIOFORMAT *LPCXAUDIOFORMAT;

/*10385 */ typedef IMAGE_LOAD_CONFIG_DIRECTORY32 *PIMAGE_LOAD_CONFIG_DIRECTORY;

/*10386 */ typedef XGRAPHICS::_R400VSFLOWCNTL *PR400VSFLOWCNTL;

/*10387 */ typedef _XPROFILE_SETTING_READ_RESULT *PXPROFILE_SETTING_READ_RESULT;

/*10388 */ typedef _CDROM_TOC *PCDROM_TOC;

/*10389 */ typedef block_state (__cdecl *compress_func)(internal_state *, int);

/*10390 */ typedef _XMSG_PROPERTY_ATTACHMENT *PXMSG_PROPERTY_ATTACHMENT;

/*10391 */ typedef _XONLINE_THROUGHPUT_STATS *PXONLINE_THROUGHPUT_STATS;

/*10392 */ typedef const char *LPCXAUDIOSTART;

/*10393 */ typedef _FILE_FS_OBJECTID_INFORMATION *PFILE_FS_OBJECTID_INFORMATION;

/*10394 */ typedef UVBASE_ENUMERATECHANNELSPARAM *PUVBASE_ENUMERATECHANNELSPARAM;

/*10395 */ typedef unsigned int size_type;

/*10396 */ typedef _LARGE_INTEGER *PLARGE_INTEGER;

/*10397 */ typedef int (__cdecl *CALINFO_ENUMPROCEXA)(char *, unsigned int);

/*10398 */ typedef _KUSER_MODE_CONTROL *PKUSER_MODE_CONTROL;

/*10399 */ typedef unsigned __int64 XUID;

/*10400 */ typedef MaterialVertexShader *MaterialVertexShaderPtr;

/*10401 */ typedef void (__cdecl *PFN_XUI_DESTRUCT_ELEM)(void *);

/*10402 */ typedef void (__cdecl *PHAL_SMC_NOTIFICATION)(_HAL_SMC_REGISTRATION *, union _SMC_MAILBOX_MESSAGE *);

/*10403 */ typedef _XINPUT_LIGHTGUN_CALIBRATION_OFFSETS *PXINPUT_LIGHTGUN_CALIBRATION_OFFSETS;

/*10404 */ typedef int (__cdecl *CALINFO_ENUMPROCEXW)(unsigned __int16 *, unsigned int);

/*10405 */ typedef MPPACKET *PMPPACKET;

/*10406 */ typedef _LD_DEMO *PLD_DEMO;

/*10407 */ typedef unsigned int SOCKET;

/*10408 */ typedef _XUSER_STATS_COLUMN *PXUSER_STATS_COLUMN;

/*10409 */ typedef _SECURITY_SEED_AND_LENGTH *PSECURITY_SEED_AND_LENGTH;

/*10410 */ typedef int psize_int;

/*10411 */ typedef XGRAPHICS::_XENOS_COLOR_ELEMENT_FMT *PXENOS_COLOR_ELEMENT_FMT;

/*10412 */ typedef unsigned int raw_DWORD;

/*10413 */ typedef XAUDIOFXINFO *LPXAUDIOFXINFO;

/*10414 */ typedef XGRAPHICS::_XLT_EXEC_INFO_NODE *PXLT_EXEC_INFO_NODE;

/*10415 */ typedef _XEX_SECURITY_INFO *PXEX_SECURITY_INFO;

/*10416 */ typedef _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;

/*10417 */ typedef _XMEDIA_PLAYBACK_STATUS *PXMEDIA_PLAYBACK_STATUS;

/*10418 */ typedef XGRAPHICS::_CS_COMPONENT_SEL *PCS_COMPONENT_SEL;

/*10419 */ typedef XGRAPHICS::_XLT_EXEC_INFO_FETCH_DATA *PXLT_EXEC_INFO_FETCH_DATA;

/*10420 */ typedef void (__cdecl *PKD_ENTEREXIT_HOOK)(unsigned int);

/*10421 */ typedef void (__cdecl *CLIENT_ERRORMESSAGE)(void *, unsigned int, unsigned int, char *);

/*10422 */ typedef _XUSER_DATA *PXUSER_DATA;

/*10423 */ typedef XAUDIOXMAFORMAT *LPCXAUDIOXMAFORMAT;

/*10424 */ typedef int (__cdecl *R_BusyFunction)(void *);

/*10425 */ typedef _MUTANT_BASIC_INFORMATION *PMUTANT_BASIC_INFORMATION;

/*10426 */ typedef HINSTANCE__ *HINSTANCE;

/*10427 */ typedef unsigned int BLOCKWEIGHT;

/*10428 */ typedef unsigned int (__cdecl *BINKIOREADFRAME)(BINKIO *, unsigned int, int, void *, unsigned int);

/*10429 */ typedef void (__cdecl *LPD3DXFILL2D)(D3DXVECTOR4 *, D3DXVECTOR2 *, D3DXVECTOR2 *, void *);

/*10430 */ typedef _MESSAGEBOX_PARAMS *PMESSAGEBOX_PARAMS;

/*10431 */ typedef _XMSG_SEND_RECIPIENT_RESULT *PXMSG_SEND_RECIPIENT_RESULT;

/*10432 */ typedef _KPRCB *PRKPRCB;

/*10433 */ typedef const char *LPCTSTR;

/*10434 */ typedef XAUDIOFRAMEBUFINIT *LPCXAUDIOFRAMEBUFINIT;

/*10435 */ typedef unsigned __int16 r_index16_t;

/*10436 */ typedef _SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

/*10437 */ typedef void (__cdecl *RedBlackCacheFreeNodeCallback)(RedBlackCacheNode *);

/*10438 */ typedef unsigned int u_int;

/*10439 */ typedef tWAVEFORMATEX *LPCWAVEFORMATEX;

/*10440 */ typedef XAUDIOROUTERFXINIT *LPXAUDIOROUTERFXINIT;

/*10441 */ typedef MaterialTechnique *MaterialTechniquePtr;

/*10442 */ typedef unsigned int GfxFence;

/*10443 */ typedef _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;

/*10444 */ typedef void (__cdecl *LPD3DXFILL3D)(D3DXVECTOR4 *, D3DXVECTOR3 *, D3DXVECTOR3 *, void *);

/*10445 */ typedef _XGI_STATSENUM_MSG *PXGI_STATSENUM_MSG;

/*10446 */ typedef D3DVertexShader *GfxVertexShader;

/*10447 */ typedef char XAUDIOSUBMIXSTAGE;

/*10448 */ typedef int _Mbstatet;

/*10449 */ typedef _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;

/*10450 */ typedef unsigned int *LPXAUDIODRVSPEAKERCONFIG;

/*10451 */ typedef unsigned __int16 INTERNET_PORT;

/*10452 */ typedef _HV_IMAGE_INFO *PHV_IMAGE_INFO;

/*10453 */ typedef unsigned int ACCESS_MASK;

/*10454 */ typedef _XEXIMAGE_LIBRARY_VERSION *PXEXIMAGE_LIBRARY_VERSION;

/*10455 */ typedef HRESULT (__cdecl *PFNCODECPROCESS)(void *, unsigned int);

/*10456 */ typedef D3DIndexBuffer *PDIRECT3DINDEXBUFFER9;

/*10457 */ typedef XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *CLIENT_FREESYSMEM)(void *, void *);

/*10458 */ typedef _XGI_STATSREAD_MSG *PXGI_STATSREAD_MSG;

/*10459 */ typedef void *THREAD_START_ROUTINE_PARAM;

/*10460 */ typedef _SLIST_HEADER *PSLIST_HEADER;

/*10461 */ typedef _OBJECT_ATTRIBUTES *POBJECT_ATTRIBUTES;

/*10462 */ typedef char char2048;

/*10463 */ typedef int *PLONG32;

/*10464 */ typedef _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;

/*10465 */ typedef void *SSM_DEVHANDLE;

/*10466 */ typedef XGRAPHICS::_SSM_ABSTRACTSTATE_FACTORY *PSSM_ABSTRACTSTATE_FACTORY;

/*10467 */ typedef unsigned int ULONG32;

/*10468 */ typedef unsigned int ulong32;

/*10469 */ typedef float *LPXAUDIODRVSAMPLE;

/*10470 */ typedef unsigned __int16 ino_t;

/*10471 */ typedef HRESULT __cdecl D3DHWLVSCREATEFUNCFUNC(_ATID3DCTX *, _ATIVSFUNC *);

/*10472 */ typedef IDirectXFileSaveObject *LPDIRECTXFILESAVEOBJECT;

/*10473 */ typedef _TOKEN_OWNER *PTOKEN_OWNER;

/*10474 */ typedef void (__cdecl *pmove_PlayerEvent)(int, int);

/*10475 */ typedef const wchar_t *PCWSTR;

/*10476 */ typedef XGRAPHICS::_R400VSOUTPUT *PR400VSOUTPUT;

/*10477 */ typedef unsigned int BLKINDEX;

/*10478 */ typedef listBoxDef_s *listBoxDef_ptr;

/*10479 */ typedef char int8_t;

/*10480 */ typedef _HEAP_FREE_ENTRY *PHEAP_FREE_ENTRY;

/*10481 */ typedef _PVR *PPVR;

/*10482 */ typedef void *const *LPCXAUDIOCALLBACKHANDLE;

/*10483 */ typedef void (__cdecl *PFNWRITEMMREGULONG)(unsigned int, unsigned int);

/*10484 */ typedef void __cdecl operation(Operand *, Operand *, Operand *);

/*10485 */ typedef D3DXVECTOR3_16F *LPD3DXVECTOR3_16F;

/*10486 */ typedef D3DXVECTOR2_16F *LPD3DXVECTOR2_16F;

/*10487 */ typedef unsigned int *PXCONTENTDEVICETYPE;

/*10488 */ typedef _KTIMER *PRKTIMER;

/*10489 */ typedef _ACE_HEADER *PACE_HEADER;

/*10490 */ typedef D3DXVECTOR4_16F *LPD3DXVECTOR4_16F;

/*10491 */ typedef const char *PCTSTR;

/*10492 */ typedef const char *LPCXAUDIOFXPARAMTYPE;

/*10493 */ typedef int int32_t;

/*10494 */ typedef void **LPXAUDIOEVENT;

/*10495 */ typedef _XONLINE_MATCH_SEARCHRESULT_HEADER *PXONLINE_MATCH_SEARCHRESULT_HEADER;

/*10496 */ typedef float *LPXAUDIOPITCH;

/*10497 */ typedef void (__cdecl *XTHREAD_NOTIFY_PROC)(int);

/*10498 */ typedef XGRAPHICS::_XLT_STATE_TRANSLATOR *PXLT_STATE_TRANSLATOR;

/*10499 */ typedef XGRAPHICS::_SS_SHADER_STORE *PSS_SHADER_STORE;

/*10500 */ typedef UVBASE_CALLBACKUSERTOVOICECHATPARAM *PUVBASE_CALLBACKUSERTOVOICECHATPARAM;

/*10501 */ typedef void (__cdecl *unexpected_handler)();

/*10502 */ typedef struct _XUIDC *HXUIDC;

/*10503 */ typedef void (__cdecl *LPFNXAUDIORENDERFXCALLBACK)(XAUDIORENDERFXCALLBACK *);

/*10504 */ typedef __int16 XQuat2[2];

/*10505 */ typedef _XCHALRESP_STATS_NODE *PXCHALRESP_STATS_NODE;

/*10506 */ typedef void (__cdecl *LPOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *);

/*10507 */ typedef int (__cdecl *PROC)();

/*10508 */ typedef _KUSER_MODE_PAGE *PKUSER_MODE_PAGE;

/*10509 */ typedef _KDRIVER_NOTIFICATION_TYPE *PKDRIVER_NOTIFICATION_TYPE;

/*10510 */ typedef char *LPXAUDIOFRAMEBUFPREPARE;

/*10511 */ typedef unsigned int DXFILELOADOPTIONS;

/*10512 */ typedef _XPNGDECODE_PARAMS *PXPNGDECODE_PARAMS;

/*10513 */ typedef char *LPXAUDIOSUBMIXSTAGE;

/*10514 */ typedef XAUDIOCHANNELMAP SpeakerMapChannel[2];

/*10515 */ typedef _KDEVICE_QUEUE *PKDEVICE_QUEUE;

/*10516 */ typedef _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;

/*10517 */ typedef void **PHXAMAPP;

/*10518 */ typedef D3DResource *PDIRECT3DRESOURCE9;

/*10519 */ typedef _XMSG_ENUM_RESULTS *PXMSG_ENUM_RESULTS;

/*10520 */ typedef void (__cdecl *PEX_XCONFIG_NOTIFICATION)(__int16, __int16);

/*10521 */ typedef unsigned int LGRPID;

/*10522 */ typedef _FILE_INFORMATION_CLASS *PFILE_INFORMATION_CLASS;

/*10523 */ typedef unsigned int Bit;

/*10524 */ typedef _KAPC *PRKAPC;

/*10525 */ typedef _RTL_TIME_ZONE_INFORMATION *PRTL_TIME_ZONE_INFORMATION;

/*10526 */ typedef unsigned int (__cdecl *LPWRITEGAMERTILEEX)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, int, char *, unsigned int, char *, unsigned int, _XOVERLAPPED *);

/*10527 */ typedef int _I32;

/*10528 */ typedef _STRING32 *PUNICODE_STRING32;

/*10529 */ typedef XGRAPHICS::_R400IL_PS1X_COISSUE *PR400IL_PS1X_COISSUE;

/*10530 */ typedef void (__cdecl *new_handler)();

/*10531 */ typedef _D3DXMACRO *LPD3DXMACRO;

/*10532 */ typedef unsigned int (__cdecl *CLIENT_CLOSEFILE)(void *, void *);

/*10533 */ typedef XSTORAGEDEVICECHANGE_PARAMS *PXSTORAGEDEVICECHANGE_PARAMS;

/*10534 */ typedef void (__cdecl *LPFNXAUDIOVOICEPACKETCALLBACK)(XAUDIOVOICEPACKETCALLBACK *);

/*10535 */ typedef PACKETSTATE *PPACKETSTATE;

/*10536 */ typedef wchar_t *PWSTR;

/*10537 */ typedef const char *LPCSTR;

/*10538 */ typedef unsigned int XCONTENTDEVICETYPE;

/*10539 */ typedef _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;

/*10540 */ typedef _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;

/*10541 */ typedef void (__cdecl *XMEDIA_XMV_CALLBACK)(void *);

/*10542 */ typedef float __vector4f[4];

/*10543 */ typedef _DXFILELOADRESOURCE *LPDXFILELOADRESOURCE;

/*10544 */ typedef _PHYSICAL_MEMORY_RUN *PPHYSICAL_MEMORY_RUN;

/*10545 */ typedef XAUDIOSOURCEBUFFER *LPCXAUDIOSOURCEBUFFER;

/*10546 */ typedef _D3DXMATRIXA16 *LPD3DXMATRIXA16;

/*10547 */ typedef const float *LPCXAUDIOFXNUMERICPARAM;

/*10548 */ typedef int errno_t;

/*10549 */ typedef _HVSTATS *PHVSTATS;

/*10550 */ typedef int LONG_PTR;

/*10551 */ typedef unsigned int XAUDIOFXFLAGPARAM;

/*10552 */ typedef XGRAPHICS::_MEM_HEAD *PMEM_HEAD;

/*10553 */ typedef _FILE_FS_VOLUME_INFORMATION *PFILE_FS_VOLUME_INFORMATION;

/*10554 */ typedef _XPRESENCE_ALIVE_REPLY *PPRESENCE_ALIVE_REPLY;

/*10555 */ typedef char *LPXAUDIOSOURCEFLAGS;

/*10556 */ typedef IXAudioBatchAllocator *LPXAUDIOBATCHALLOCATOR;

/*10557 */ typedef const char *LPCXAUDIOSPEAKER;

/*10558 */ typedef _UCODE_CONTROLFLOWCONSTANTSMASK *PUCODE_CONTROLFLOWCONSTANTSMASK;

/*10559 */ typedef int *PNTSTATUS;

/*10560 */ typedef _FSCACHE_PROCESS *PFSCACHE_PROCESS;

/*10561 */ typedef _RTL_PROCESS_LOCK_INFORMATION *PRTL_PROCESS_LOCK_INFORMATION;

/*10562 */ typedef _FSCACHE_EXTENSION *PFSCACHE_EXTENSION;

/*10563 */ typedef _XEX_HEADER_STRING *PXEX_HEADER_STRING;

/*10564 */ typedef char SoundAlias;

/*10565 */ typedef int (__cdecl *PFNXAMSWAPCANCEL)();

/*10566 */ typedef _XPNGENCODE_PARAMS *PXPNGENCODE_PARAMS;

/*10567 */ typedef D3DVolumeTexture *LPDIRECT3DVOLUMETEXTURE9;

/*10568 */ typedef _UCODE_PASS_HEADER *LPCUCODE_PASS_HEADER;

/*10569 */ typedef tagPALETTEENTRY *PPALETTEENTRY;

/*10570 */ typedef XAUDIOSOURCEFXINIT *LPXAUDIOSOURCEFXINIT;

/*10571 */ typedef _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;

/*10572 */ typedef XMEDIAFORMAT *PXMEDIAFORMAT;

/*10573 */ typedef _STRING64 *PANSI_STRING64;

/*10574 */ typedef char *LPXAUDIODRVCHANNEL;

/*10575 */ typedef _HEAP_UNCOMMMTTED_RANGE *PHEAP_UNCOMMMTTED_RANGE;

/*10576 */ typedef XCONTSIG_LIVE_SIGNATURE_INFO *PXCONTSIG_LIVE_SIGNATURE_INFO;

/*10577 */ typedef unsigned __int16 r_index_t;

/*10578 */ typedef void (__cdecl *PKIPI_WORKER)(void *, void *, void *, void *);

/*10579 */ typedef _numberfmtA *LPNUMBERFMT;

/*10580 */ typedef unsigned int (__cdecl *LPPROGRESS_ROUTINE)(_LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, unsigned int, unsigned int, void *, void *, void *);

/*10581 */ typedef _XUIFONT *HXUIFONT;

/*10582 */ typedef _XONLINE_ATTRIBUTE_STRING *PXONLINE_ATTRIBUTE_STRING;

/*10583 */ typedef int intptr_t;

/*10584 */ typedef XMAWAVEFORMAT *LPCXMAWAVEFORMAT;

/*10585 */ typedef tagRECT *LPCRECT;

/*10586 */ typedef _VERIFY_INFORMATION *PVERIFY_INFORMATION;

/*10587 */ typedef _TIME_FIELDS *PTIME_FIELDS;

/*10588 */ typedef unsigned int uint32_t;

/*10589 */ typedef void __cdecl dFreeFunction(void *, unsigned int);

/*10590 */ typedef XGRAPHICS::_KEY_LIST *PORDERED_LIST;

/*10591 */ typedef void *HANDLE;

/*10592 */ typedef pathnode_t *pathnode_ptr;

/*10593 */ typedef _D3DHAL_DP2CREATEVERTEXSHADERDECL *LPD3DHAL_DP2CREATEVERTEXSHADERDECL;

/*10594 */ typedef _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;

/*10595 */ typedef _XEX_EXECUTION_ID *PXEX_EXECUTION_ID;

/*10596 */ typedef XAUDIOENGINEINIT *LPCXAUDIOENGINEINIT;

/*10597 */ typedef _XMSG_CREATE_REQUEST *PXMSG_CREATE_REQUEST;

/*10598 */ typedef unsigned __int16 GridSamplePoint[3];

/*10599 */ typedef XAUDIOFRAMEBUFDATA *LPCXAUDIOFRAMEBUFDATA;

/*10600 */ typedef _XDEVICE_DATA *PXDEVICE_DATA;

/*10601 */ typedef _KPROCESSOR_STATE *PKPROCESSOR_STATE;

/*10602 */ typedef dxGeom *dGeomID;

/*10603 */ typedef char XAUDIOFRAMEBUFPREPARE;

/*10604 */ typedef unsigned __int16 *PSECURITY_DESCRIPTOR_CONTROL;

/*10605 */ typedef unsigned __int64 *PKSYSTEM_TIME;

/*10606 */ typedef _RUNTIME_FUNCTION_INDIRECT *PRUNTIME_FUNCTION_INDIRECT;

/*10607 */ typedef XAUDIOVOICEOUTPUT *LPXAUDIOVOICEOUTPUT;

/*10608 */ typedef _GUID *LPGUID;

/*10609 */ typedef _ULARGE_INTEGER *PULARGE_INTEGER;

/*10610 */ typedef _cpinfoexA *LPCPINFOEXA;

/*10611 */ typedef wchar_t *LPWCH;

/*10612 */ typedef _XUIOBJ *HXUIOBJ;

/*10613 */ typedef _ATIVECTOR *PATIVECTOR;

/*10614 */ typedef _cpinfoexW *LPCPINFOEXW;

/*10615 */ typedef _XUSER_STATS_VIEW *PXUSER_STATS_VIEW;

/*10616 */ typedef XACHIEVEMENT_DETAILS *PXACHIEVEMENT_DETAILS;

/*10617 */ typedef char XAUDIOSUBMITPACKET;

/*10618 */ typedef void *(__cdecl *MantleAnimAlloc)(int);

/*10619 */ typedef _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

/*10620 */ typedef char *LPXAUDIOROUTERFXMODE;

/*10621 */ typedef XHUDOPENSTATE *PXHUDOPENSTATE;

/*10622 */ typedef _IMAGE_RELOCATION *PIMAGE_RELOCATION;

/*10623 */ typedef float raw_vec4_t[4];

/*10624 */ typedef int (__cdecl *PFLS_FREE_FUNCTION)(unsigned int);

/*10625 */ typedef XAUDIO::XAUDIOENGINECALLBACKCTX *LPXAUDIOENGINECALLBACKCTX;

/*10626 */ typedef _D3DXSHADER_COMPILE_PARAMETERSW *LPD3DXSHADER_COMPILE_PARAMETERSW;

/*10627 */ typedef char *LPTCH;

/*10628 */ typedef unsigned int XAUDIOSAMPLERATE;

/*10629 */ typedef char XAUDIOSOURCEFLAGS;

/*10630 */ typedef unsigned int GfxDecodedSamplerState;

/*10631 */ typedef char KPROCESSOR_MODE;

/*10632 */ typedef XMASTREAMFORMAT *NPXMASTREAMFORMAT;

/*10633 */ typedef XMASTREAMFORMAT *LPXMASTREAMFORMAT;

/*10634 */ typedef _EXCEPTION_POINTERS *Exception_info_ptr;

/*10635 */ typedef _OVERLAPPED *LPOVERLAPPED;

/*10636 */ typedef tagRECT *PRECT;

/*10637 */ typedef void (__cdecl *PATICACHEOBJDESTROYFUNC)(_ATIDXDEVICE *, void *, void *);

/*10638 */ typedef XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *CLIENT_ALLOCVIDMEM)(void *, unsigned int, XGRAPHICS::_E_SSM_VIDMEMHEAP, XGRAPHICS::_SSM_VIDMEM *);

/*10639 */ typedef XGRAPHICS::_CS_GENERIC_PATCH_DESCRIPTION *PCS_GENERIC_PATCH_DESCRIPTION;

/*10640 */ typedef void (__cdecl *D3DVBLANKCALLBACK)(_D3DVBLANKDATA *);

/*10641 */ typedef _FILE_ACCESS_INFORMATION *PFILE_ACCESS_INFORMATION;

/*10642 */ typedef XAUDIOVOICEPROCESSCALLBACK *LPCXAUDIOVOICEPROCESSCALLBACK;

/*10643 */ typedef void (__cdecl *PKDRIVER_NOTIFICATION_ROUTINE)(_KDRIVER_NOTIFICATION_REGISTRATION *, _KDRIVER_NOTIFICATION_TYPE);

/*10644 */ typedef HRESULT (__cdecl *LPFNXAUDIOCLIENTINIT)(void **, void **, XAUDIOENGINEINIT *, IXAudioBatchAllocator *);

/*10645 */ typedef int streamoff;

/*10646 */ typedef unsigned int SSM_UINT_PTR;

/*10647 */ typedef XAUDIOFXINIT *LPCXAUDIOFXINIT;

/*10648 */ typedef _cpinfoexA *LPCPINFOEX;

/*10649 */ typedef _RAW_DUMP_INFO *PRAW_DUMP_INFO;

/*10650 */ typedef _KUSER_MODE_SLB *PKUSER_MODE_SLB;

/*10651 */ typedef XGRAPHICS::_R400FFVSGEN *PR400FFVSGEN;

/*10652 */ typedef unsigned int *LPXAUDIOFXFLAGPARAM;

/*10653 */ typedef _XCONTENT_TRANSFERFLAGS *PXCONTENT_TRANSFERFLAGS;

/*10654 */ typedef unsigned __int16 scr_string_t;

/*10655 */ typedef void __cdecl dNearCallback(void *, dxGeom *, dxGeom *);

/*10656 */ typedef int clock_t;

/*10657 */ typedef _DMTD *PDMTD;

/*10658 */ typedef _XGAMERPROFILE_PARAMS *PXGAMERPROFILE_PARAMS;

/*10659 */ typedef XGRAPHICS::_XLT_EXEC_INFO *PXLT_EXEC_INFO;

/*10660 */ typedef D3DIndexBuffer *GfxIndexBufferHandle;

/*10661 */ typedef _HEAP_ENTRY *PHEAP_ENTRY;

/*10662 */ typedef _XSHOWQUICKCHATUI_PARAMS *PXSHOWQUICKCHATUI_PARAMS;

/*10663 */ typedef int (__cdecl *UILANGUAGE_ENUMPROCW)(unsigned __int16 *, int);

/*10664 */ typedef unsigned int VerReg;

/*10665 */ typedef unsigned int D3DXHANDLE;

/*10666 */ typedef IMAGE_LOAD_CONFIG_DIRECTORY32 *PIMAGE_LOAD_CONFIG_DIRECTORY32;

/*10667 */ typedef _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY;

/*10668 */ typedef _D3DXFRAGMENT_DESC *LPD3DXFRAGMENT_DESC;

/*10669 */ typedef double _FP64;

/*10670 */ typedef const float *LPCXAUDIOVOLUME;

/*10671 */ typedef _XCONTENT_DATA *PXCONTENT_DATA;

/*10672 */ typedef tWAVEFORMATEX *PWAVEFORMATEX;

/*10673 */ typedef _DVD_AP25_CHALLENGE_ENTRY *PDVD_AP25_CHALLENGE_ENTRY;

/*10674 */ typedef _XGAME_FIND_DATA *PXGAME_FIND_DATA;

/*10675 */ typedef _IMAGE_PTE *PIMAGE_PTE;

/*10676 */ typedef _XUSER_PRIVILEGE_MSG *PXUSER_PRIVILEGE_MSG;

/*10677 */ typedef _XCONTSIG_SECTION *PXCONTSIG_SECTION;

/*10678 */ typedef _HEAP_SEGMENT *PHEAP_SEGMENT;

/*10679 */ typedef void (__cdecl *D3DQUERYCALLBACK)(unsigned int, unsigned int *, unsigned int *);

/*10680 */ typedef ComWorld *ComWorldPtr;

/*10681 */ typedef _SID *PISID;

/*10682 */ typedef int SSM_INT_PTR;

/*10683 */ typedef Material *MaterialHandle;

/*10684 */ typedef XAUDIOFXPARAM *LPXAUDIOFXPARAM;

/*10685 */ typedef float vec3_t[3];

/*10686 */ typedef _DM_CMDCONT *PDM_CMDCONT;

/*10687 */ typedef char *PTSTR;

/*10688 */ typedef char GfxImageCategory;

/*10689 */ typedef _GUID *__rcGUID_t;

/*10690 */ typedef HRSRC__ *HRSRC;

/*10691 */ typedef unsigned int DXFILEFORMAT;

/*10692 */ typedef void (__cdecl *fn_think)(gentity_s *);

/*10693 */ typedef int (__cdecl *OB_PARSE_METHOD)(void *, _OBJECT_TYPE *, unsigned int, _STRING *, _STRING *, void *, void **);

/*10694 */ typedef char *PSECURITY_CONTEXT_TRACKING_MODE;

/*10695 */ typedef XAUDIOFXREGISTER *LPXAUDIOFXREGISTER;

/*10696 */ typedef SndDriverGlobals *SndDriverGlobalsPtr;

/*10697 */ typedef unsigned int XAUDIOSPEAKERCONFIG;

/*10698 */ typedef _KPROCESS *PRKPROCESS;

/*10699 */ typedef _XEX_SECTION_HEADER *PXEX_SECTION_HEADER;

/*10700 */ typedef unsigned int *(__fastcall *CLIENT_GETEMPTYCMDBUFF)(void *, unsigned int);

/*10701 */ typedef void (__cdecl *BINKSNDMIXBINS)(BINKSND *, unsigned int *, unsigned int);

/*10702 */ typedef void *HINTERNET;

/*10703 */ typedef _ATILIST *LPATILIST;

/*10704 */ typedef XGRAPHICS::_SSM_VIDMEM *PSSM_VIDMEM;

/*10705 */ typedef _IDEREGS *PIDEREGS;

/*10706 */ typedef int SPFN_NUMBER;

/*10707 */ typedef _XEIKA_CERT_OVERLAY *PXEIKA_CERT_OVERLAY;

/*10708 */ typedef _QUERY_FINDFROMIDS_RESULT *PQUERY_FINDFROMIDS_RESULT;

/*10709 */ typedef unsigned int *PPFN_NUMBER;

/*10710 */ typedef _XCREATEPROFILEUI_PARAMS *PXSHOWCREATEPROFILEUI_PARAMS;

/*10711 */ typedef struct IXMAContext *PXMACONTEXT;

/*10712 */ typedef XGRAPHICS::_HASH_TABLE *PSTRING_HASH_TABLE;

/*10713 */ typedef _DUMP_BASIC_SERVICES *PDUMP_BASIC_SERVICES;

/*10714 */ typedef unsigned int (__fastcall *CLIENT_GETMAXEMPTYCMDBUFFSIZE)(void *);

/*10715 */ typedef const float *LPCXAUDIODRVVOLUME;

/*10716 */ typedef _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;

/*10717 */ typedef char *PUINT8;

/*10718 */ typedef unsigned __int16 wctype_t;

/*10719 */ typedef _X_CACHE_DB_ENTRY *PX_CACHE_DB_ENTRY;

/*10720 */ typedef _TEAM_CREATE_RESULTS *PTEAM_CREATE_RESULTS;

/*10721 */ typedef _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;

/*10722 */ typedef D3DArrayTexture *LPDIRECT3DARRAYTEXTURE9;

/*10723 */ typedef _HV_IMAGE_EXPORT_TABLE *PHV_IMAGE_EXPORT_TABLE;

/*10724 */ typedef void *const *LPCXAUDIOEVENT;

/*10725 */ typedef void *THREAD_HANDLE;

/*10726 */ typedef XGRAPHICS::_OBJECT_LIST_ITEM *POBJECT_LIST_ITEM;

/*10727 */ typedef XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *CLIENT_FREEVIDMEM)(void *, XGRAPHICS::_SSM_VIDMEM *);

/*10728 */ typedef D3DBaseTexture *LPDIRECT3DBASETEXTURE9;

/*10729 */ typedef int *PSSIZE_T;

/*10730 */ typedef _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;

/*10731 */ typedef _XONLINE_MUTELIST_INTERNAL *PXONLINE_MUTELIST_INTERNAL;

/*10732 */ typedef void *volatile volatile_ptr;

/*10733 */ typedef int (__cdecl *PRTL_INITIALIZE_LOCK_ROUTINE)(void *);

/*10734 */ typedef _XEX_IMPORT_TABLE *PXEX_IMPORT_TABLE;

/*10735 */ typedef unsigned __int16 modelNameIndex_t;

/*10736 */ typedef _XASSET_ENUMERATE_REQUEST *PXASSET_ENUMERATE_REQUEST;

/*10737 */ typedef const unsigned __int16 *LPCXAUDIOFRAMESIZE;

/*10738 */ typedef unsigned int POINTER_64_INT;

/*10739 */ typedef _XAMGETPERSISTMEMFUNCS *PXAMGETPERSISTMEMFUNCS;

/*10740 */ typedef char X3DAUDIO_HANDLE[20];

/*10741 */ typedef HRESULT __cdecl D3DHWLVSDELETEFUNCFUNC(_ATID3DCTX *, _ATIVSFUNC *);

/*10742 */ typedef XGRAPHICS::_SSM_SETTING_INFO *PSSM_SETTING_INFO;

/*10743 */ typedef void *SSM_CLIENTOBJECTHANDLE;

/*10744 */ typedef const char *LPCXAUDIOFXPARAMID;

/*10745 */ typedef void (__cdecl *BINKSNDMIXBINVOLS)(BINKSND *, unsigned int *, int *, unsigned int);

/*10746 */ typedef _XVIDEO_MODE *PXVIDEO_MODE;

/*10747 */ typedef XAUDIO::XAUDIOSRCHDR *LPCXAUDIOSRCHDR;

/*10748 */ typedef multiDef_s *multiDef_ptr;

/*10749 */ typedef XMEDIAPACKET *PXMEDIAPACKET;

/*10750 */ typedef _XONLINE_QUERY_ATTRIBUTE *PXONLINE_QUERY_ATTRIBUTE;

/*10751 */ typedef void *PSECURITY_DESCRIPTOR;

/*10752 */ typedef const unsigned int *LPCXAUDIODRVCLIENTINDEX;

/*10753 */ typedef void *HLOCAL;

/*10754 */ typedef HKEY__ *HKEY;

/*10755 */ typedef const wchar_t *PCWCH;

/*10756 */ typedef XGRAPHICS::_READONLY_LIST *PREADONLY_LIST;

/*10757 */ typedef _LARGE_INTEGER *PPHYSICAL_ADDRESS;

/*10758 */ typedef MenuList *MenuListPtr;

/*10759 */ typedef _EXCEPTION_DISPOSITION (__cdecl *PEXCEPTION_ROUTINE)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

/*10760 */ typedef _XBOX_CACHE_DB_SECTOR *PXBOX_CACHE_DB_SECTOR;

/*10761 */ typedef unsigned __int64 DWORD64;

/*10762 */ typedef _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;

/*10763 */ typedef int *PLONG_PTR;

/*10764 */ typedef XAUDIOREVERBI3DL2SETTINGS *LPCXAUDIOREVERBI3DL2SETTINGS;

/*10765 */ typedef _CSTRING *PCSTRING;

/*10766 */ typedef unsigned int ULONG_PTR;

/*10767 */ typedef char *LPXMASUBFRAME;

/*10768 */ typedef HRESULT (__cdecl *PFN_MESSAGE_FILTER)(_XUIOBJ *, XUIMessage *);

/*10769 */ typedef HWND__ *HWND;

/*10770 */ typedef _D3DXEVENT_DESC *LPD3DXEVENT_DESC;

/*10771 */ typedef char *LPXAUDIOFXPARAMID;

/*10772 */ typedef void *XVOICE_HANDLE;

/*10773 */ typedef char XAUDIOVOICETYPE;

/*10774 */ typedef IDirectXFile **LPLPDIRECTXFILE;

/*10775 */ typedef const char *LPCXAUDIOENGINECALLBACKINDEX;

/*10776 */ typedef XAUDIOROUTERFXINIT *LPCXAUDIOROUTERFXINIT;

/*10777 */ typedef HRESULT (__cdecl *LPFNXAUDIOCREATEFX)(XAUDIOFXINIT *, IXAudioBatchAllocator *, IXAudioEffect **);

/*10778 */ typedef XAUDIO::XAUDIOVOICEROUTECTX *LPXAUDIOVOICEROUTECTX;

/*10779 */ typedef XAUDIOPACKET *LPCXAUDIOPACKET;

/*10780 */ typedef _TOKEN_CONTROL *PTOKEN_CONTROL;

/*10781 */ typedef _SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

/*10782 */ typedef char EventParm;

/*10783 */ typedef HRESULT (__cdecl *PD3DHWLVSSETFUNC)(_ATID3DCTX *, unsigned int, _ATIVSFUNC *);

/*10784 */ typedef HRESULT (__cdecl *PFNXAMAPPUNLOADSTACK)(int);

/*10785 */ typedef __int16 int16_t;

/*10786 */ typedef _D3DXSHADER_FILEINFO *LPD3DXSHADER_FILEINFO;

/*10787 */ typedef int (__cdecl *(__cdecl *BINKSNDSYSOPEN)(unsigned int))(BINKSND *, unsigned int, int, int, unsigned int, BINK *);

/*10788 */ typedef _QUAD *PQUAD;

/*10789 */ typedef unsigned int IPos;

/*10790 */ typedef XGRAPHICS::_R400HOSCNTL *PR400HOSCNTL;

/*10791 */ typedef _XONLINE_PRESENCE *PXONLINE_PRESENCE;

/*10792 */ typedef int BOOL;

/*10793 */ typedef char bool;

/*10794 */ typedef in_addr *LPIN_ADDR;

/*10795 */ typedef expressionEntry *expressionEntry_ptr;

/*10796 */ typedef _TEAM_ENUM_BY_XUID_RESULTS *PTEAM_ENUM_BY_XUID_RESULTS;

/*10797 */ typedef D3DVolume *PDIRECT3DVOLUME9;

/*10798 */ typedef void (__cdecl *XConvertShaderToMicrocodeErrorCallbackFunction)(void *, int, unsigned int, const char *);

/*10799 */ typedef ID3DXEffectStateManager *LPD3DXEFFECTSTATEMANAGER;

/*10800 */ typedef _ATICACHESTATENTRY *PATICACHESTATENTRY;

/*10801 */ typedef _FILE_FS_ATTRIBUTE_INFORMATION *PFILE_FS_ATTRIBUTE_INFORMATION;

/*10802 */ typedef _DM_SWAPDISC_COMPLETE *PDM_SWAPDISC_COMPLETE;

/*10803 */ typedef _DMGD *PDMGD;

/*10804 */ typedef unsigned __int16 scr_thread_t;

/*10805 */ typedef __int16 XQuat[4];

/*10806 */ typedef XGRAPHICS::_ATIVSMEMALLOC *PATIVSMEMALLOC;

/*10807 */ typedef _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;

/*10808 */ typedef _SECURITY_TOKEN_PROXY_DATA *PSECURITY_TOKEN_PROXY_DATA;

/*10809 */ typedef XGRAPHICS::_MEM_NODE *PMEM_NODE;

/*10810 */ typedef unsigned __int16 bitfield16;

/*10811 */ typedef void (__cdecl *OB_DELETE_METHOD)(void *);

/*10812 */ typedef pathnode_tree_t *pathnode_tree_ptr;

/*10813 */ typedef _XSYSLOADINPUT *PXSYSLOADINPUT;

/*10814 */ typedef tagPOINT *NPPOINT;

/*10815 */ typedef int *LPBOOL;

/*10816 */ typedef void (__cdecl *_PHNDLR)(int);

/*10817 */ typedef tagPOINT *LPPOINT;

/*10818 */ typedef char XMAINPUTBUFFER;

/*10819 */ typedef HKL__ *HKL;

/*10820 */ typedef HRESULT (__cdecl *XGMicrocodeEnumerateLiteralsCallbackFunction)(void *, unsigned int, unsigned int, unsigned int, const void *);

/*10821 */ typedef char *(__cdecl *alloc_func)(char *, unsigned int, unsigned int);

/*10822 */ typedef XCODEC_TYPE *PXCODEC_TYPE;

/*10823 */ typedef RawFile *RawFilePtr;

/*10824 */ typedef void *(__cdecl *CLIENT_ALLOCSYSMEM)(void *, unsigned int);

/*10825 */ typedef tagRECT *LPRECT;

/*10826 */ typedef tagRECT *NPRECT;

/*10827 */ typedef char snapshot_value_t[8192];

/*10828 */ typedef ID3DXBaseMesh *LPD3DXBASEMESH;

/*10829 */ typedef XGRAPHICS::_SWVTXSHADER *PSWVTXSHADER;

/*10830 */ typedef const char *LPCCH;

/*10831 */ typedef XGRAPHICS::__AS_STATEVALUE *PAS_STATEVALUE;

/*10832 */ typedef float vec2_t[2];

/*10833 */ typedef unsigned int (__cdecl *CLIENT_QUERYREGISTRY)(void *, char *, unsigned int *);

/*10834 */ typedef _KDRIVER_NOTIFICATION_REGISTRATION *PKDRIVER_NOTIFICATION_REGISTRATION;

/*10835 */ typedef XAUDIOFRAMEBUFDATA *LPXAUDIOFRAMEBUFDATA;

/*10836 */ typedef _CDROM_PLAY_AUDIO_MSF *PCDROM_PLAY_AUDIO_MSF;

/*10837 */ typedef unsigned __int16 FxMarkHandle;

/*10838 */ typedef XGRAPHICS::_PS_PROGRAM_KEY *PPS_PROGRAM_KEY;

/*10839 */ typedef unsigned int PFN_COUNT;

/*10840 */ typedef _XGI_CREATESTATSENUM_MSG *PXGI_CREATESTATSENUM_MSG;

/*10841 */ typedef XGRAPHICS::_PM4CMDSETCONST *PPM4CMDSETCONST;

/*10842 */ typedef _XUSER_ONLINE_PROFILE_SETTING *PXUSER_ONLINE_PROFILE_SETTING;

/*10843 */ typedef _DLinkList *PDLinkList;

/*10844 */ typedef int (__cdecl *HASHKEYF)(void *);

/*10845 */ typedef MaterialTechniqueSet *MaterialTechniqueSetPtr;

/*10846 */ typedef _XMSG_PROPERTY_INTERNAL *PXMSG_PROPERTY_INTERNAL;

/*10847 */ typedef char SCHAR;

/*10848 */ typedef Font_s *FontHandle;

/*10849 */ typedef char *PCHAR;

/*10850 */ typedef _UCODE_HEADER *LPCUCODE_HEADER;

/*10851 */ typedef CODEC_PROCESSOR *PPASSTHRU_EXTENSION;

/*10852 */ typedef __int64 __time64_t;

/*10853 */ typedef _XCHALRESP_STATS *PXCHALRESP_STATS;

/*10854 */ typedef XAUDIODRVPERFCOUNTER *LPCXAUDIODRVPERFCOUNTER;

/*10855 */ typedef char TCHAR;

/*10856 */ typedef _XMSG_SUMMARY_REQUEST *PXMSG_SUMMARY_REQUEST;

/*10857 */ typedef char UCHAR;

/*10858 */ typedef _MP_BILLING_ACCOUNT_INFO *PMP_BILLING_ACCOUNT_INFO;

/*10859 */ typedef type_info *__RTtypeidReturnType;

/*10860 */ typedef char OCHAR;

/*10861 */ typedef XHVOUTPUTEFFECT *PXHVOUTPUTEFFECT;

/*10862 */ typedef XAUDIO::XAUDIOVOICEFXCTX *LPXAUDIOVOICEFXCTX;

/*10863 */ typedef char CCHAR;

/*10864 */ typedef _RECTL *LPRECTL;

/*10865 */ typedef _FILE_END_OF_FILE_INFORMATION *PFILE_END_OF_FILE_INFORMATION;

/*10866 */ typedef XAUDIOSOURCEFXPACKETCALLBACK *LPXAUDIOSOURCEFXPACKETCALLBACK;

/*10867 */ typedef char FCHAR;

/*10868 */ typedef unsigned int TST_VALUE;

/*10869 */ typedef void (__cdecl *PKINTERRUPT_ROUTINE)();

/*10870 */ typedef D3DTexture *PDIRECT3DTEXTURE9;

/*10871 */ typedef const char *LPCXAUDIOXMASTREAMCOUNT;

/*10872 */ typedef char *PEXCEPTION_DATA;

/*10873 */ typedef XGRAPHICS::_XLT_CONTEXT *PXLT_CONTEXT;

/*10874 */ typedef void *GLOBALHANDLE;

/*10875 */ typedef const wchar_t *LPCWSTR;

/*10876 */ typedef _KMUTANT *PKMUTANT;

/*10877 */ typedef void __cdecl dMessageFunction(int, const char *, char *);

/*10878 */ typedef unsigned int (__cdecl *PGETMAXSTATESIZE)(XGRAPHICS::_PS_PROGRAM_KEY *);

/*10879 */ typedef XAUDIOSOURCEBUFFER *LPXAUDIOSOURCEBUFFER;

/*10880 */ typedef _TESTXEXSYSINFO *PTESTXEXSYSINFO;

/*10881 */ typedef unsigned int *LPD3DXEVENTHANDLE;

/*10882 */ typedef _STRING64 *PSTRING64;

/*10883 */ typedef HRESULT (__cdecl *PATIPRIMFUNC)(_ATID3DCTX *, ATIPRIMTYPE, unsigned int, unsigned int);

/*10884 */ typedef _GENERIC_MAPPING *PGENERIC_MAPPING;

/*10885 */ typedef _FPO_DATA *PFPO_DATA;

/*10886 */ typedef unsigned __int16 FxTrailElemHandle;

/*10887 */ typedef void (__cdecl *PFN_XUI_CONSTRUCT_ELEM)(void *);

/*10888 */ typedef unsigned __int16 LANGID;

/*10889 */ typedef char *PSTR;

/*10890 */ typedef unsigned __int16 _ino_t;

/*10891 */ typedef D3DConstantBuffer *PDIRECT3DCONSTANTBUFFER9;

/*10892 */ typedef unsigned int (__cdecl *PFLS_ALLOC_FUNCTION)(void (__cdecl *)(void *));

/*10893 */ typedef void (__cdecl *BuiltinFunction)();

/*10894 */ typedef unsigned __int16 *LPINTERNET_PORT;

/*10895 */ typedef IDirectXFile *LPDIRECTXFILE;

/*10896 */ typedef _FILE_ATTRIBUTE_TAG_INFORMATION *PFILE_ATTRIBUTE_TAG_INFORMATION;

/*10897 */ typedef _MEMORYSTATUS *LPMEMORYSTATUS;

/*10898 */ typedef XVOICE_EXTENSION *PXVOICE_EXTENSION;

/*10899 */ typedef _MEMORY_REGION_TYPE *PMEMORY_REGION_TYPE;

/*10900 */ typedef _XMSG_PROPERTY_STRING *PXMSG_PROPERTY_STRING;

/*10901 */ typedef void (__cdecl *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *, unsigned int);

/*10902 */ typedef unsigned int *LPXAUDIOSAMPLERATE;

/*10903 */ typedef char XAUDIODRVCHANNEL;

/*10904 */ typedef const char *LPCXAUDIOTHREADUSAGE;

/*10905 */ typedef unsigned int *PKSPIN_LOCK;

/*10906 */ typedef _XMSG_PROPERTY_BINARY *PXMSG_PROPERTY_BINARY;

/*10907 */ typedef D3DXPLANE *LPD3DXPLANE;

/*10908 */ typedef XGRAPHICS::_R400CTXDATA *PR400CTXDATA;

/*10909 */ typedef HSTR__ *HSTR;

/*10910 */ typedef char uint8_t;

/*10911 */ typedef _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

/*10912 */ typedef const char *PCOSTR;

/*10913 */ typedef XGRAPHICS::_HASH_TABLE *PHASH_TABLE;

/*10914 */ typedef wchar_t *LPWSTR;

/*10915 */ typedef _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;

/*10916 */ typedef unsigned int CLONG;

/*10917 */ typedef XGRAPHICS::_E_SSM_RETURNCODE (__cdecl *PPROCCMDBUFSTATE)(XGRAPHICS::_PP_STATE_POSTPROCESSOR *, XGRAPHICS::_PS_PROGRAM_KEY *, XGRAPHICS::_ABSTRACT_STATE *, unsigned int);

/*10918 */ typedef unsigned int FLONG;

/*10919 */ typedef _KEVENT *PKEVENT;

/*10920 */ typedef _XUSER_PROFILE_SETTING *PXUSER_PROFILE_SETTING;

/*10921 */ typedef _FILE_COMPLETION_INFORMATION *PFILE_COMPLETION_INFORMATION;

/*10922 */ typedef _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;

/*10923 */ typedef _HAL_POWER_DOWN_REGISTRATION *PHAL_POWER_DOWN_REGISTRATION;

/*10924 */ typedef HRESULT (__cdecl *PD3DSV9ERROR)(const char *, unsigned int, unsigned int, unsigned int, const char *, void *);

/*10925 */ typedef char XAUDIODATAFLOW;

/*10926 */ typedef int *PLONG;

/*10927 */ typedef _UCODE_R500PSUCODE *PUCODE_R500PSUCODE;

/*10928 */ typedef unsigned int ULONG;

/*10929 */ typedef unsigned int ulong;

/*10930 */ typedef unsigned int uLong;

/*10931 */ typedef _ATICACHECREATE *PATICACHECREATE;

/*10932 */ typedef void **LPHINTERNET;

/*10933 */ typedef FILEOUT_EXTENSION *PFILEOUT_EXTENSION;

/*10934 */ typedef _XMEDIA_VIDEO_SCREEN *PXMEDIA_VIDEO_SCREEN;

/*10935 */ typedef _STRING *POBJECT_STRING;

/*10936 */ typedef char *LPTSTR;

/*10937 */ typedef _XUISHAPE *HXUISHAPE;

/*10938 */ typedef _D3DXATTRIBUTERANGE *LPD3DXATTRIBUTERANGE;

/*10939 */ typedef char min_msg_buf_char[2048];

/*10940 */ typedef char (__cdecl *PKDEBUG_ROUTINE)(_KTRAP_FRAME *, _EXCEPTION_RECORD *, _CONTEXT *, char);

/*10941 */ typedef XGRAPHICS::_XLT_EXEC_INFO_MEMEXPORT_DATA *PXLT_EXEC_INFO_MEMEXPORT_DATA;

/*10942 */ typedef void (__cdecl *PMFN)();

/*10943 */ typedef unsigned int (__cdecl *CLIENT_WRITEFILE)(void *, void *, char *, unsigned int, unsigned int *);

/*10944 */ typedef int ptrdiff_t;

/*10945 */ typedef XGRAPHICS::_LIST_PRIM_ITEM *PLIST_PRIM_ITEM;

/*10946 */ typedef int (__cdecl *PIMAGE_FILE_READ)(void *, unsigned int, void *, unsigned int, _IO_STATUS_BLOCK *, void *);

/*10947 */ typedef void (__cdecl *PKD_PORT_SEND_PACKET)(unsigned int, _STRING *, _STRING *);

/*10948 */ typedef unsigned __int64 *PXUID;

/*10949 */ typedef int (__cdecl *PIO_COMPLETION_ROUTINE)(_DEVICE_OBJECT *, _IRP *, void *);

/*10950 */ typedef unsigned int XAUDIOLOCKTYPE;

/*10951 */ typedef XGRAPHICS::_R400VSDECL *PR400VSDECL;

/*10952 */ typedef _IMAGE_LINENUMBER *PIMAGE_LINENUMBER;

/*10953 */ typedef char BOOLEAN;

/*10954 */ typedef char boolean;

/*10955 */ typedef float dVector3[4];

/*10956 */ typedef _tiddata *_ptiddata;

/*10957 */ typedef float dReal;

/*10958 */ typedef _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;

/*10959 */ typedef HRESULT (__cdecl *UCODE_BUFFER_ALLOC_CALLBACK)(void *, unsigned int, void **);

/*10960 */ typedef D3DXCOLOR *LPD3DXCOLOR;

/*10961 */ typedef char objBufEntry[100];

/*10962 */ typedef void (__cdecl *Free_t)(void *, int);

/*10963 */ typedef HMENU__ *HMENU;

/*10964 */ typedef _KPROCESS *PKPROCESS;

/*10965 */ typedef const unsigned __int16 *LPCXAUDIODRVFRAMESIZE;

/*10966 */ typedef XAUDIODRVRENDERFXCALLBACK *LPXAUDIODRVRENDERFXCALLBACK;

/*10967 */
typedef $2E5E413DDAA694DB7384FD4B60FF3D46 $6514191E26D057361F3F0FDEA1CC24B2;

/*10968 */
typedef $C4996549AAF52AB46D0FD30475F5DA1D $4BA5200A3608758265F28BEE1CB2C6F7;

/*10969 */
typedef $C94E4A91EDBEBD319F59C2FB7604C8B2 $55B14C2EE88F76948FAB3E0EF877F941;

/*10970 */
typedef $047324CF14C4305A0CDC855795998DB7 $430D983A0364E1DA4E099138BB7DEFD4;

/*10971 */
typedef $D9682CA3054822DB86BE64B4F39DE090 $7117E221EC0B01A2D80A5784054299D8;

/*10972 */
typedef $C53F532C198B0FA3117C50C65A873A3C $B680D4F1AEB637E007AFC7B7C6FF5108;

/*10973 */
typedef $B0AD74E37BC3853F761F3502165B1F49 $54FA83D48DD570A59DF13BDFC0E7BCC4;

/*10974 */
typedef $B3E9D0B8EA9A93101E2EE06DE9FAA360 $C8CC842421EB1EA2F3510D284803218C;

/*10975 */
typedef $CD5FCE6A659E0CE83569857A8B0BB0C6 $022772ED4CFB3270B1A133DFB76FD6CF;

/*10976 */
typedef $D1500855AC9ABE02F9E25341F44073CC $73163498EB003C5980E4EE67C523F1E9;

/*10977 */
typedef $7D60B6E76FE9F2580EFDCC38554D1214 $E633E22BF940BABC38718AFA88C66452;

/*10978 */
typedef $960149983C21DF2994B149CAFF8B2A06 $995216CBBB18FB5308B811C2A9CFE283;

/*10979 */
typedef $8BD23EF9FC88B01D7E752B5FF3A10F4B $2F81DFD948E64EF65978E8A5CF90877A;

/*10980 */
typedef $8119AE9440E5AE259D0D5D462F64C42F $FE74CEE4A33F61A1D4920485A87C34B0;

/*10981 */
typedef $2250080F1676B41EF0325F39EBACDFD7 $F613B24ECF126AC9C8585637B34455F5;

/*10982 */
typedef $D8ADA0CAD5B40F821CB4CD2B320BCBEE $C2F0C9310A061FFDC8BFBF45D8CBC8BC;

/*10983 */
typedef $FBE03D018AA518154D0196FCC812B948 $CFA6336721A4AE9FE4ABA5C37290098D;

/*10984 */
typedef $67FDA9B61D417ED7FC0956CCA991A8B2 $39978E99CCD2CC3B3C451DBC603729F3;

/*10985 */
typedef $9115228B236DDC056C5F9F86516FD463 $F4FD88834D4B45C3339D1168E087916D;

/*10986 */
typedef $EFE32A12905460E51ED9F98E4CF02E45 $BAFD1CE59EC098F1C566823289F6304C;

/*10987 */
typedef $CE7D218045F54E4B78CDF57417AB8B56 $7245661804C1CD72F2BE34057C6AE818;

/*10988 */
typedef $A8F39B8196AB7035AFBAC747F7BDF4D8 $DF132E35958B310199D41BB9CC9D49B4;

/*10989 */
typedef $9FD93310E3A285B448E5D1A4CF625801 $407BDC197BEEB5DF96E1B937E1E83C08;

/*10990 */
typedef $DB0096C8434ABE4B240D09892DC94170 $869FB18789AC3668EBBC4A595B6CEEC2;

/*10991 */
typedef $621ABCB26B1FD1C5FC259E1B3EFFAE35 $861DD946726596B104EF7B364C7F1C93;

/*10992 */
typedef $21939D7AB98615478EAA9EE4087F5179 $38FB01B88E191C0F45028377C97DC47C;

/*10993 */
typedef $1FEC46B60CC76055692A419F76377DA0 $E8D43281A8C7AB0C5846785F343214B9;

/*10994 */
typedef $12504E5B39C3CBF4F43A6FA408286A0C $B5B393C032C98DB3C23A0B0802DA58CE;

/*10995 */
typedef $5BAC3BC45CFE6350AFF73F447932E9DD $B37E792DFB9EF1541F39E22585D786CA;

/*10996 */
typedef $257D112C598474FA8B42399B001E6D50 $39C8BC6FD17619BB98180BDF6A87BBE9;

/*10997 */
typedef $E00822507C2DF0A5C732B6677BDC78AE $064585AA3C2E24841D9A6AA9CFC7C40D;

/*10998 */
typedef $45D719078FEEE62F73C6A3EBE8242627 $AAB432AB6D3AE46D23891C9084B2FF47;

/*10999 */
typedef $BC449284E990DF395D4EBFA01558BBF2 $F4E33A46EC43E05316655878EC599FB5;

/*11000 */
typedef $39C0F39BA9261E8421C333FD6AEE4EA1 $DE36021770C58AE35A0CE6EE564BEFF7;

/*11001 */
typedef $5B30484D8264C861B8E9A9223524A677 $1EF191F0F7345D98D2EF33032E5954FF;

/*11002 */
typedef $818D03ADE81405E0ED5B78EB98EB51FF $7D9314C529DA03831D47A5AF9F941EE8;

/*11003 */
typedef $49ADB769676577375E08622B6B93801C $3318EF57DC1BE119072E83E6D8E46C36;

/*11004 */
typedef $EEB78449CF7DAB6F90215BEFADEE9BE2 $50617695C3406C15C185AC05FCE3133C;

/*11005 */
typedef $A35E0418366147AD0CEC4ED4F2040207 $47A449DC4426DB6756A67C653800B4BD;

/*11006 */
typedef $C08C16F0D4F7E357E25F96CE6DE2FC2C $B6914A2841AF8CD57FB25E2EB182AAF5;

/*11007 */
typedef $16AB627CC2572CA0E4BE8879B2CF5555 $4290F90F5040D227FAD0E68D57292DAA;

/*11008 */
typedef $BAE19BAE68507C342C0F1D254B79EF5C $38F83C5636D37B0180BBEC4E33775173;

/*11009 */
typedef $E355B4B7EC8C6F55FE97A6DD80FF1C44 $A17F105F1E73E07EFCCA53939FD7B75B;

/*11010 */
typedef $B9C2554585EA85BE716042C979C5AC00 $91D5E022282B17851BEAD8BF3947FF59;

/*11011 */
typedef $6002BA5F630603092F6A93FE11B31241 $296C4C41308E88C1BC4E68309300E944;

/*11012 */
typedef $8DC78B40D55437B456AE27A8B1CB109F $D8665BC015403DBA6222D62236F07A08;

/*11013 */
typedef $8B45B719AA6E728D74C81C367B645A5D $C2232225903ACA280CD866B0E4BEE606;

/*11014 */
typedef $69D87F1ABA54E563F461D2DC9AA9CE75 $C663C626C19A851F14047918424C84DA;

/*11015 */
typedef $49771439FC760A39032E32CB565AE854 $041F1006C6DD7DF1E6380F5F7272C44F;

/*11016 */
typedef $FF8DF105CBD7B6D02D0D5171176535B7 $DE77E1F9CEEC6D08D360D23F1033A5B6;

/*11017 */
typedef $192B90CD531E530B62300DC61A74811B $9FE747EDD52986C456C56947B924AE6F;

/*11018 */
typedef $C9CE0E668952415F1062FAA0C2F73862 $88FCE86E91665E9010BBAAA25144CF56;

/*11019 */
typedef $0BB57BB1A5D0C4FE13E2087945D33CEF $D4492A428E0C470339CD96C5751B2333;

/*11020 */
typedef $8C30028A1CF676892BECFBAA0EC484D4 $A3E18AC40BA336033312B81CD195F627;

/*11021 */
typedef $141AEBAF85E2B7B9F8F5571E04F9BC68 $9FC08E215BBADE5254B42BF22AE153BA;

/*11022 */
typedef $83ED1248B5FC87E6F4DEDDEDE2284F4C $AC637F351B9B6A5911D18B332FAED3A7;

/*11023 */
typedef $9C31AB3392907EB4506B77AB1FD2B6BC $B46E89FE28367B43622DB5BEFC51A1E9;

/*11024 */
typedef $0973D36D7CE7B0ADB253351AE61DCFF9 $9DA1FAC0FE6FAC5A4441EB8E03C5F851;

/*11025 */
typedef $03AE077DCD44B20F339F74D393E6C6B8 $038453FF5C41C6AC4659ACE954EF620F;

/*11026 */
typedef $ACD4109A20C6650D20BBC35717D0502F $D33AD2CB58B3FC2CA46DD2C74AC0672A;

/*11027 */
typedef $6E93C358633DB5E524489BCB86F45DAC $6E5E6E389A0B97EFABA1E2D62E81F518;

/*11028 */
typedef $ABCC7BAD0DEF374D2552F0CC077003CC $84D84A1F99ABF894EB8207ABEF5DD370;

/*11029 */
typedef $6DA16B0D8039370C43C1CA2D731568F6 $85A9B5499E553AF556B1D1E8BDF3B4F2;

/*11030 */
typedef $6D04EF4AB5FFC7DC17F5615B3AAF491C $90B5BD5BC52E8CC74D713EC86911957A;

/*11031 */
typedef $4C8930EFFE35A0007678F8962D9E298E $46B3478FD6219E30FE54E9AAAC494EB7;

/*11032 */
typedef $C0F0080D9F1C412D6557CD8DD65AFD43 $8B61989BEE2A885CA74E58465CC2C40A;

/*11033 */
typedef $66817A4EEB8294B633CF8AAF91BF4493 $E676B062AE55B044278E64E9A35AA311;

/*11034 */
typedef $923E9E4F30AC6BBB491FC35623C667E6 $1E2A2203BA08DFE3FA3AC67D83CCF231;

/*11035 */
typedef $7DEF063A5C7BBA19B7AB73DF9ADC5A23 $AFB06A47DFC873805F3A85032787ECC3;

/*11036 */
typedef $AF2874CF6ABA05C269146AD4EAA078E8 $193F45CFC7D7056FA7A2343101DEF83A;

/*11037 */
typedef $B01A1B45A37AF41D962A4F43D45F1CDE $712B96EA64BAABE75035DEE64B63BFBC;

/*11038 */
typedef $D12683B3E789AA1FFEB419004ED75446 $76603EB7E7E9B09AF85B66C3360CA24F;

/*11039 */
typedef $5209ED92B028466E24FC570AE4C7C562 $0937FDF1B540DD3079930385EEE1BD3B;

/*11040 */
typedef $C785793662972D2EF2889DD7A3E3441C $1B8D1249F4C9B3816F1FFB26C44FB514;

/*11041 */
typedef $206F9E68231DC93408EED9B5BE0359A8 $60F60E6E87BA743B4C4B92A260090467;

/*11042 */
typedef $1DC4E02B41F8D20D69CB6D56C64683EB $EEF8112F0058499B05E4835D761F4F99;

/*11043 */
typedef $95C58BE019F0D6FC9167FE5550E05DD0 $C3F7318B74334389ADC093704EFEBF7D;

/*11044 */
typedef $432D5DA3F963AC5BD0C542CBB1C35934 $9C94EC7B25BF891D903015B96637ED7E;

/*11045 */
typedef $8AB39F97F28A10334AB70C4D33832CE4 $6082EABE71A61FA60051D4981EDC91BA;

/*11046 */
typedef $56A2E54E331E53E0C307F32224811220 $3ECE31612A4170CBBA8FAE0BC298B05A;

/*11047 */
typedef $4CBCA779875BB55C270F67096FDE71D3 $ED7E70C9491E75712A14674584F461D2;

/*11048 */
typedef $60DF8D500D6560BED15895853EC24C99 $DE6315D22F4A0E9FAA98B70FDE875993;

/*11049 */
typedef $343BE72B814626B4AAEF81848D7E20CF $55140F70F593E3050725018EC91E0E21;

/*11050 */
typedef $8F8B05E2E85BE9553895E4AF16DA86B9 $90CBA2917B857A7E5EEBFC954B905893;

/*11051 */
typedef $ADC3116C8D37CCAEC38C96B43F6D9D99 $276C060E2CD1FCA58936DED26E64F3F9;

/*11052 */
typedef $FD54BB9D13320D3BDD5FF446A1AE121B $3BC87368022072C1FFA417393E7D43EE;

/*11053 */
typedef $BC578A3DA0AB59E274770492BD011136 $188E493022569209DBBC3A988A19097B;

/*11054 */
typedef $EB386416A4DBB27A8DE8A61B0C7E4B60 $FD2B1E8C6FC7145E3EDF9A1A6C9E084F;

/*11055 */
typedef $30D1720AA0E748552B1AAE0A4FB5A77B $92853AB570A64F19C7C6BF61868D8189;

/*11056 */
typedef $436AEC9A0387302844708851D4F85A60 $D2CDAA113CB2355CCCDCDDC9FA3D6E4F;

/*11057 */
typedef $C3B9F7083319F4D615914DBD25CE1FF8 $DDA9DE9883A557AB036756DD8F0A2D6D;

/*11058 */
typedef $248C1B3E95D800417BDF52ADBBBF4250 $080964CF897EEA95D6B4AD074BDB2447;

/*11059 */
typedef $B1CF14AC60C2CECA57172B19617893CB $E5658FE2BA9186D426B6CE3ABCBC10AA;

/*11060 */
typedef $AF9225859D04F391BAE8A286D3789F6A $DB98A5EF90C1253FA3A53E97F00C33A9;

/*11061 */
typedef $64712BCEC4A29B820D99E18BD91F781D $DC9149B70C3FCAE656E5FB0048D9D7BC;

/*11062 */
typedef $1A87D74BFE662B047D94CF001D085B2D $FA05100343D4C7B0547F722C1678D0B4;

/*11063 */
typedef $1A13C4D8976CE27F5E9D4C7F8CC5AEE8 $2E419AC7043EA0A6134AB9D29BD3C79A;

/*11064 */
typedef $C5724F5309C0FFFCCDF3CA0429972DCB $C70387204C15CE3786E899D1821487D4;

/*11065 */
typedef $822260D53B6865C5E1D2FA1924B26CDA $C4C6DDFD59F519BEA95943947638059A;

/*11066 */
typedef $B87C0110D100A68234FECCEB9075A41E $EEFB5B169A19D8AAEFDF0F2490D24D7E;

/*11067 */
typedef $F30A3BC6F884ECE8219A5DF69053362A $809E40D8CFEBDE44CCF03935D8F20FE1;

/*11068 */
typedef $A78330E2A7CC42FFC027915DC51B9C84 $66556523985881C8295410D065C6A2EC;

/*11069 */
typedef $D36A810CB4318BC18E5CAF7F82EC0FF8 $5BC6EAB97AA61F7FF384A155E691A878;

/*11070 */
typedef $8E5D40D8F7B875829CEEA3035BFC2B09 $E2CD823D1FBCFE68D81483089F8B7744;

/*11071 */
typedef $EEFB6B9224E02F3F92C050B1A347CB32 $0368BC7889527A3153600E73E0231B21;

/*11072 */
typedef $6BF759869E8734A4AFD4E30B8A93307D $22B1098B4BFC43335ED2DCB21EF03125;

/*11073 */
typedef $45D1A2ED01BA9DAF9AFAE6399ED18ED1 $5BEDB010DE83677E2300B734AF9552E3;

/*11074 */
typedef $15454EDC65404665873E2A95C6F44F70 $34539C2252313F833AC155701612E721;

/*11075 */
typedef $311C2E81E808B4767FB41A9C011CB4D0 $4789DD8558C84B9F160F2AD7541ED83C;

/*11076 */
typedef $48CB5FF48600BABB00A6CDA6817AC61F $BDD2D7BFF30513E6D84D777C88AEF3A4;

/*11077 */
typedef $600C5C55DA623EC1BA27D4F06AFBFC7E $1DFACA9A3F37E6B888551BC352D4522D;

/*11078 */
typedef $281899ECFC445037A6FDF23043927723 $152168A7DACA6C3A2B5F916EB1B64685;

/*11079 */
typedef $8CDC5D218EB02082E5C3D8DB6F595260 $025789C522627F25B3B962D7ED87C0D3;

/*11080 */
typedef $B50D99F124CB73833B440B95295B0D23 $4B86AD212E08DE8717B139346AB446AA;

/*11081 */
typedef $3A28824DCC635DED3FE44AEE09BF0D54 $54874CA5054A8F3DE00262858FF7C45C;

/*11082 */
typedef $74EAE330A6976F9098913848AC507000 $B1AC113E0A17AA00E811ABA3274BF991;

/*11083 */
typedef $92B73D884407279708436C3299392994 $00D1C8EE383922567ECECCC693B642B9;

/*11084 */
typedef $BAE4F9C2C15BE31554776E17A667731C $D7F31F85962B4C6C830BD45EF40C0970;

/*11085 */
typedef $CD431739C99DBA52A835C79D542FF174 $AE4740FE610CFB2A112A9F019615BE5B;

/*11086 */
typedef $6C9BFD317D127A29D3473B6C91CDCB7E $914CCDB4D6E97AB322C585A9A692B3B5;

/*11087 */
typedef $2A76464B005670687E7C1CD2CA291F25 $791E353B35C7D50BCD2534ED680FE57C;

/*11088 */
typedef $56445C427093D770B5D4AA1D7698CB1C $18058261A94686812078B64C06BC5232;

/*11089 */
typedef $55ED8AC5998C2D3DA8CF1B852A88E74D $52BD776D6DCE82A90206DBAE27AD9D96;

/*11090 */
typedef $9F542375BBDEAA431522D680B21CEDC0 $20B268ACDAD606AF9136E62DC01F49A6;

/*11091 */
typedef $A2DB58E5FE2ADE05F1A508C13866ADC2 $C69D1A345A433BDA567F9BCB2C19C886;

/*11092 */
typedef $15F7927B8F72CB40F6F99FAEBB69AFC2 $B81E28A51ED8BAC010D4F496CF4EFAFE;

/*11093 */
typedef $C8DC82A51A0B3C62546850887B6B5847 $AD9FD6E1A40FDAC0AD15054C0A6A9E68;

/*11094 */
typedef $4EB26F68A8E6E4927E38756AC12526DB $3899F4006945CAF1E54351B1848733DB;

/*11095 */
typedef $E326B487732BE8EB5AB27BA7C6F13BDF $A066A2CF811079CD09C32D85485DC7F7;

/*11096 */
typedef $E5F85BF791F996AC98973C7104606E90 $D750D74130D4D5A723E5E4ED9451E13F;

/*11097 */
typedef $2993F0254A782AC689F523594890AFB9 $C4164DD5E4FDD2097313344F6B0E9711;

/*11098 */
typedef $5329DA05E5A8A23583D87AAA256E5376 $7E06511895E6943F82186E9F9BCBD857;

/*11099 */
typedef $28A33868B9AACC691D18577108CB8C93 $E07FE6EC9C0326C1196FACC081407B2F;

/*11100 */
typedef $4060660F9B75441D92F9B01F0EB251E9 $2E589396EB88D82E8903CF3AD3A82FFF;

/*11101 */
typedef $E9C5450848AF5B0E1ED3AF9C7EAA722B $FF2B2418903EC88B9EFD02823CB61C4A;

/*11102 */
typedef $39C31954953DC0780268E0DB23FBED98 $6285484255335B11A8BA4985FE7C40FE;

/*11103 */
typedef $7C8B8C292E4C5EC841521618A6E64E01 $121EDA6474AFBFEDEEC6DE9E40C0E952;

/*11104 */
typedef $39199BFA0D60C62DCFD9209B26DED22C $9672273557C447694AD57C2D189C0C54;

/*11105 */
typedef $A408456487E1E37CB28D5FB8181927C5 $7D143C40A61A06D7B0DCA9C9C8792F0C;

/*11106 */
typedef $5C7603243A829E5BC6BA7F928C72347C $89248A6E8ECA7575AD72937920D90D24;

/*11107 */
typedef $3E40264DEA36A90C0882F99B0BCF0AEC $62E566145029493B795D00B968E093D2;

/*11108 */
typedef $8E94F5188F6AA384114B5456B3C8B3B5 $DAFCB9B582E696EDEE0B0CA991DED36F;

/*11109 */
typedef $CAE44CAF372E5672080930BE8F394808 $142AA5A94A775B86FA1918A452D7329C;

/*11110 */
typedef $B18BD998CA56E0ED7417ED5E171DE7B8 $FB0677F0F7DF385F7B59141F06B846F2;

/*11111 */
typedef $85AF80701BA2D3112FA1DB3FAB5BE1F0 $F380C2BCD8791722BA067772B6155E97;

/*11112 */
typedef $A6342FAB94B84E94672868514A3886A9 $175A334570C70F968892ED28DE73D56D;

/*11113 */
typedef $1149248F0940ABA43439084777E4DFED $C39CCAB7E7EF6B92D869FB0EC57D7FF7;

/*11114 */
typedef $EDD38D6A57EF43793B1F773859FC039A $92345803D54D7FDA7776C8A495CDEFBA;

/*11115 */
typedef $A31A830FF0232D5D84C3DC77469F0D70 $CE69F672689A299A1C4D813D73234EBF;

/*11116 */
typedef $D558E26DCBB8F93B1745F38142012E4A $08CD9C84A396A1685C88186BE748E103;

/*11117 */
typedef $B9E23A56E13B6CDB9B21E5BC61104BF3 $AE5CCA6C00470F281771AC3A5E98D43E;

/*11118 */
typedef $45E9EA399B36814E1398F4B80A5932AF $110110743EF699B3B8461530A5847E3B;

/*11119 */
typedef $065B9D63BC3BA62D67B7891BC006BC0F $9D180D96D6AC351A181BDDFD3AE554B5;

/*11120 */
typedef $BA901A123A7949D71CD7DA341DCBE8ED $2967523B7CC62623C5EE5C0BF0CF6DD3;

/*11121 */
typedef $938699F29A6665EF52530DBDE25EEE7A $84705009E40491294E73BD369571BD3D;

/*11122 */
typedef $489AEAA4B3097347ED2FC122416DFFA6 $E8F4A4D32F0575ABE763A28F73BC8766;

/*11123 */
typedef $97D54CC66FD088246E1F91237E234C87 $3B99B8AC07C5CE89525399E4E0DFE597;

/*11124 */
typedef $4B9E0CA1D4CB2853FB9099B8EAF4FF57 $CF55A1AAEE5104AE65C06F29CB7D098A;

/*11125 */
typedef $B2FD3713A7CE728D7D4B9B08B4C380D8 $51C276443545D2F435EB77AC2129F069;

/*11126 */
typedef $C08ADCF4FB47B308F7F27FE8A0F5E0A6 $266B893185DD8ECE44102FE27392751E;

/*11127 */
typedef $76B0BB9CEAB66D3FCAC714600EFB4A3C $53BBAADEF5B59FCEF98D19C5519BBFC3;

/*11128 */
typedef $59767B55E475954E114113A811572D0A $8F9A323A1DD23C0D25B5188CC31DDBF2;

/*11129 */
typedef $6961E030A9677F7C86FC6FF9B5901495 $07B4EC735DE1B8BB9C7939BFE801915B;

/*11130 */
typedef $509225601A54D63487B53D22FDE9E9D4 $ACD043842BDEE307A691AE24FFF505DE;

/*11131 */
typedef $2A7384FF3B7B49BCF10F5460BE171B70 $9434FBE02EC53BBF9DF9153DA88723FD;

/*11132 */
typedef $83363154E125A81D850DFA8F4CF53BBD $B964AF7BA9B610404286A771D51EECA2;

/*11133 */
typedef $BBA3098F62A091CA0E0EE5EF0264C478 $717FD8A7124FCDB84556191FCC0F37A1;

/*11134 */
typedef $AD163D05F246FDE0E0BF3D17157B38BB $5B4B5AAC37E7C7CEF6BA60954E477E9E;

/*11135 */
typedef $0E2DAAA54FECE08CCA73CE8967B59418 $707DD4649E99F8155FD3F910EB1E679E;

/*11136 */
typedef $F54CAB3E37A84FA16AFBEBB248D4A126 $C252E247995DC315A40D365A39FA3884;

/*11137 */
typedef $63E345E7C5842EB1B1B10E4A21F9BB4C $D81479F78383E65219E8AD93BD0078AC;

/*11138 */
typedef $673D3D32AD1EBCE7A4DFDC45146E2679 $84A8C27E6117C55CF7B0FBB55CAFBCE4;

/*11139 */
typedef $56EADB788E9A8C5332FF02A19D1398B0 $2EFA64BD9FEF35409A35CC02B51EABA1;

/*11140 */
typedef $EFBFA2092A69B720574534E604BF050B $63E63544022981B6A1389CD51A79B45E;

/*11141 */
typedef $887D29DBD6D3FDEB8D6D793E1BC180A4 $0A065581DF5E6B5AE51772AFA69E3258;

/*11142 */
typedef $0067B3625803BF20F1C14D2DD0AB38A5 $7BA134A03B73FCB9085B92A8D40A4BA0;

/*11143 */
typedef $B8B020795EE7B60F2562A4AAB6C6F743 $1342D87BC1807B41BBEDF423CF3A0BFD;

/*11144 */
typedef $F405DBE12AC9DCDAC57F7AFCE3D12168 $751CCBE4A4B327D696512BBAA93E071A;

/*11145 */
typedef $64EC7BB2831DA848E43D94D5276F3434 $E9553AD20EA648900CB3F9DC068EE1A3;

/*11146 */
typedef $EF380DB90391286258DD7FA4BDEED426 $9FBBE2D150340F4ED68299C19A079793;

/*11147 */
typedef $D8002F0A51E864B30875F61E0FB2CD5E $B63FC2D81B9EB077854325302264746C;

/*11148 */
typedef $6353DA2755805C4B6A241A1D7D258410 $D2822D7CB4A1CB8B955F0284CF1D7063;

/*11149 */
typedef $C7A66656BD20095141AF9DA597C58E36 $2F860623D61940E25F2BE968F0D7ABD6;

/*11150 */
typedef $0AE1ED1D395576D0F5C137E464D7BFE0 $D4ECE70B8637D5F6E8F0446450EB89E5;

/*11151 */
typedef $4DECDA45625DB2763FC46D6F5CBF863C $EC9BA13EE5DE622DC42F8B50EF830957;

/*11152 */
typedef $401D18D8561079E483BCFCFD960618EB $690B93E439A93BAF8A0A0961E46877FE;

/*11153 */
typedef $3065823E5191D2C998FA93C46B23A3F9 $291F5BEB9C149347B4F02619FFC9078D;

/*11154 */
typedef $E0823365732D3FE7A50ACE20644A58D7 $C0AF2D12ADFBF758B1EE22EC16BA8803;

/*11155 */
typedef $F1EC995512C3A3AC740705E060E5B3C5 $A697C8106DFF683E5C3A6DC40B6C3FF4;

/*11156 */
typedef $34C2CE88BAF47EE561C6D42F9BB5C6A7 $555CCDDEF4359C8640CE5D8E8F8E8CD8;

/*11157 */
typedef $F4BE35BEA44C8A3231432DCF643A8B37 $5A90185AF2BFB1C803C37FBD2A17E444;

/*11158 */
typedef $03867A11B1B3B42489FB24988FB94119 $08DDBBD67953086F791FC097C57E179D;

/*11159 */
typedef $E2769CD71BD3F06007FE83C4AAFE9C31 $739306A7EF1D5A41382ECE33E2C32DD4;

/*11160 */
typedef $6ECA3333CAC1FE160D67FB682515BFE1 $1AFA0C8665BBA3D7C2CED46339A086BE;

/*11161 */
typedef $BA9F847B460546ED7BFFDBCD5B0768E1 $E29509677031E5A47018F07FACA3C958;

/*11162 */
typedef $87873CC668AE3C568467CB8CCACAC9A2 $8870CC5071909406B06756EF445A65C1;

/*11163 */
typedef $4EF2ED37309DF94BFB70F58A8A7316D8 $2626FBB79A6ED8AD42BA4D6DB06B2C2C;

/*11164 */
typedef $7D2241D8F7DA70849E93F03608CA5CCA $73FF334004DDCF7BE8FFDE0F11BE9B70;

/*11165 */
typedef $C1C80C5EEA031C460D44D213AE519951 $C3535B5E43200C0707B4C372B876E970;

/*11166 */
typedef $61F28D565F73FF5CB9C3C2AD2980FCA7 $05A37D334E4239CECD873DDB6ED07A6F;

/*11167 */
typedef $31BE3B436F7CBB6536CC8909FBBBCE99 $5BBB9C1CC4A3A903C7415E2F058F70EB;

/*11168 */
typedef $BC6EBFA47C948483B9F0EC28F1994011 $55463ED3077BF44782B57F0A4A7988EB;

/*11169 */
typedef $0165C9C3AE30200D0358F933217A4F54 $3245C416960F33298146A772ACEE7042;

/*11170 */
typedef $D4BA2E19BD8FBA9AFF9F255A70CE1A8E $46F7E9AE4EEE0FD2ECE4488025C00943;

/*11171 */
typedef $C7885C42D96151CB6A26D4883EEBB0A2 $71B436220F8FB027C433900A6CC25D5E;

/*11172 */
typedef $A09314214A03CF53E3B725A0C5A8C948 $FE3A0852F890A7803AC67F6A07555265;

/*11173 */
typedef $6B96E6C8B9AE7918824611CC4DF03D76 $BFF0ED489D3B4B737370A98F248C33AA;

/*11174 */
typedef $9C122730CDD5B3A26E00534D33DB1490 $C27C466B5E895545D8CA5FBA440D9768;

/*11175 */
typedef $E5CB004E2A30A05BB958A67A0E28C4D0 $58363B9991F1E7EAA77D2ABA403453D8;

/*11176 */
typedef $C9B837D32D3B67A796093F5BAFC05F1F $46241AC2EEFBFFF4FF10C7F42A1445A7;

/*11177 */
typedef $9B142580F131EE6645CE9FDFAAC456D5 $C5C794F45004D159005349EDF01A59DA;

/*11178 */
typedef $27ADEAEF7BB6C93A4813D4AB6AC88913 $714DC53F79B88DBD4CC85635A21A53AD;

/*11179 */
typedef $C096FBC08B2001022F577565A6E1DD48 $37D84555966D5831CC1C76CEC6CBA090;

/*11180 */
typedef $6760350A3E11919D25BD877F859BD6F6 $17CDC43C7A2A3E966FED2AE3F1666762;

/*11181 */
typedef $B2778AB4851445F9DD200ECE4C4FB15A $38FE7DC931CFCCD4CAC63FEED83B9144;

/*11182 */
typedef $C6599BE10F4D9A191AF9FEC104E334DC $371C50259A337F8CEDF452D8155AAA67;

/*11183 */
typedef $9B94FB67DFE5FD8D5F4161BFB17650A5 $B896CA081879E9EB4E9232A3B01FB6A6;

/*11184 */
typedef $E7B1D95E0381D419A2E31D1BE14AA034 $CF90DC7CDF2F11BC9E8FA84D9FF5B303;

/*11185 */
typedef $3795D074AAAAB5968479B7527F325087 $66DD1504ACE85EA88A5BE22F58EC8634;

/*11186 */
typedef $3888634A9E39D1289F3B7D5706B52E7A $4214D0066EB3A74AC6BAB8A5310F3894;

/*11187 */
typedef $D5CAB2FB40E114F6B88AA1C7C8E9C5E9 $40D2E66514A6F0203803F946DF197213;

/*11188 */
typedef $920D92BA9911A3EA803542816B8A1B50 $F0AB1DA7BC49F254F9222187A3D17933;

/*11189 */
typedef $2C1387FB21D01FF73DDC78B93669782B $8FB27B58E3EE61292C3D99058E077613;

/*11190 */
typedef $65DA056E4313365ED2E8562D62B2A14E $F2C389523D2CF87BD1925D3C5D70B9F7;

/*11191 */
typedef $056D4A366440905B6547B35DB90BAB80 $0B13F95BD0E579762B84D4CB8B309284;

/*11192 */
typedef $C472F369C8B5BE7E06A4108581EA0444 $6BD48976154F300A32B1D8EEC00ABF7A;

/*11193 */
typedef $15ECC96D9C0E42899A1476BDB4AB35E1 $BCA787D6969CF2EE75D11493D9BDAC88;

/*11194 */
typedef $B87808D01B3ED274F4CD2213A2E20C5F $3254C6CCF6429C6C70DFD2B8716FE76E;

/*11195 */
typedef $EA4FF8530FEA0AC9E1589137BC90F99F $65834E0276E40F2520233B2A34AE25F4;

/*11196 */
typedef $D91DF7250D497AE680597430665E65B1 $5471878328F7FEE3ECA2A3478F3E1CD7;

/*11197 */
typedef $7E23918555002659587F63136D232798 $CAE90B64E3CFCECF5E0018AD58B1C188;

/*11198 */
typedef $C064551EB4F71D3D0B50FB4B1C9BB704 $C8A8FFFE40F6DABAF572D43DB111D065;

/*11199 */
typedef $26A775274E1959BFAEBEFAA49DDF73CF $F6E7CE177C83595163EED39C28ECF182;

/*11200 */
typedef $860984AE526833AB3F2FDC74356D6122 $4DE841D60BF4242F6AF430AD907DCFDF;

/*11201 */
typedef $99E71282218846B33557A2E237F2C5C3 $EF2C9FD25DDAAB59FA139BBD20B1A2E2;

/*11202 */
typedef $E68061CEF6E9722374EDCC45A665E6F1 $31C24729B88AF51A2B64C8B60023A0EF;

/*11203 */
typedef $6762D7C58768FEDA0A55F8B69B3A92F9 $035347FD83EBA677383FEFCB002A72C5;

/*11204 */
typedef $B33BEB1F98BDE6F788ADDDE529F5A0BA $2FF3DC104748CE525652E650BB1777F0;

/*11205 */
typedef $68BA7050023167B143590A548296522E $E3EE54ED38839F0508E8CE7F8D72BB18;

/*11206 */
typedef $C72B7C9F3CCD9DAC8AA46776495D5444 $1782C28C5E115D1F876019DBA3E9D875;

/*11207 */
typedef $2523EA9E50F3CCC4A9D1C992144AFF84 $F610F428E9900EA160729DFDF9D252BC;

/*11208 */
typedef $F26A47F4FC659BD9174B0378003EAEFE $CDADD902515087D8AE18C6F6C9C4CA33;

/*11209 */
typedef $DD04B9AEC9065A2DCF256B7AB469366F $65F0382AD738943F7D260FD8A7F51591;

/*11210 */
typedef $EF3112AD559D028CA4BA2BF80BA90ED3 $607926BCAFB3FE15551A90B456FACDEA;

/*11211 */
typedef $551F59549617BEB68828B62FDC20CD24 $2B6CED32D111A93684016E2B943BB096;

/*11212 */
typedef $752FF802448D94C5F325EFB753F2B23C $77398B91FA5879A0133D81B81699C5A1;

/*11213 */
typedef $E94182B8A3A4AF935484C57FCB0CA1ED $9FB0FA6CE8DE60ABB79650A6E2A4643E;

/*11214 */
typedef $D064C42DA0A5F9421F883776B4804EAA $DB051581271C0E2387E8CD1ABA2F1E11;

/*11215 */
typedef $5BB838DDDC07720FE7B1AF7A32E6C13A $605E1DEACACD1AE42BAAB2F0B53C6327;

/*11216 */
typedef $B714C6F62B541E39B6770ED8D57BB7A8 $B808BE069FB070ADD490535B8FAF8044;

/*11217 */
typedef $964B1E287A32DBF5291EF8404508894E $43FD9C5E3AC21C1FFDF49F92BC610D03;

/*11218 */
typedef $BECB2ECE747BD1567E4D7355284E70E0 $0DC46A1B3957B71725FE33287253DDD4;

/*11219 */
typedef $B4B8BED61B7FCB74F140B41556B61C01 $9528AFA8CDAC781A1234A3EA422F66EF;

/*11220 */
typedef $90FA71C6F3B68008C0E17C722E207571 $96DA6D5E6599409B35BA60FF3AF676DC;

/*11221 */
typedef $0E9EE34A21A8F04CA050E8897323EB2F $1F952145B8589A29C63E97A17240E602;

/*11222 */
typedef $05D27AAD7CF475B5F81DFCBDF13BE035 $C0770C0D9AFB61100A70C668171FFB29;

/*11223 */
typedef $938A21E6D5D3D51FE0250D204EE4F6D4 $1C07426360391B930E1639326101D4DF;

/*11224 */
typedef $89738957627DB6EDF3B799DCFEC42288 $9A75F0BFEFF4B73A4EEF4E5F25D09141;

/*11225 */
typedef $03F452D8EA8227B36C03DF43B8E7FCA2 $6087B798BDE29556F1312FB4DDA4BCAF;

/*11226 */
typedef $D6D873938D2EAC70BBDCF93D3349E4FB $4728F9A78BB57AEBA30630D84D8D794A;

/*11227 */
typedef $23D517BB04FF1ECE86BBD4613ED23F49 $D62D04118C4934A27C921CC9B8DE3C5B;

/*11228 */
typedef $6A53BE389BFA9EA2ED0639833923F323 $89E9B58397B681CE252DA535BF94CD9A;

/*11229 */
typedef $A9C5BD9C84CD6680CDF0F8E5D4D1C1A0 $5EDC7B088094C8418B726C5046D08998;

/*11230 */
typedef $C4F1D8FBC7EC9F7DCCC89AC339B4DBFB $287A7BB536E3A4D3264EE71CAE511842;

/*11231 */
typedef $ED818697C874626D3A86CCCEEA86772C $60E3774A00E08B683E357C5987BDF58A;

/*11232 */
typedef $BAB9ACD025604F7E057259C62F656B8A $48883BA6B99098C482E932BBB86275B0;

/*11233 */
typedef $86D6598AAF9F0060ED92DFAB004DD5D9 $2C047474E718B23CD7CE7B68DD88E697;

/*11234 */
typedef $E02171E3F54CA17A10D7B3B92E69FA00 $95F1B69D26DB50DA533C47226AE9236B;

/*11235 */
typedef $E3E5A78664A1E46C395BBEC3D9B50925 $2F0C05C30D552DF2A487EC981A3C4B53;

/*11236 */
typedef $A1E4769FC457566E4100BC46C0B299CF $D3574718AEF11463934DF7301BD10590;

/*11237 */
typedef $2932F5BE864D00D815B82B3B666A7E30 $F2510459AC231D66A0F05494703210BC;

/*11238 */
typedef $BC28FBB7508368454ABA82CD59C5529D $7654BEA2FA9BEDF1F4981320285A41B9;

/*11239 */
typedef $1DD7A03358E0D01DD359262876E6A0F0 $16576F158808D245922358E2B7756EB9;

/*11241 */
struct $9376AF87D999CCDD036DD780B3E54F9B
{
  _RTL_CRITICAL_SECTION *lock;
  $16576F158808D245922358E2B7756EB9 kind;
};


/* End of file */
