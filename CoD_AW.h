/*
   This file has been generated by IDA.
   It contains local type definitions from
   iw6_ds.i64
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct IUnknownVtbl;
struct FxElemDef;
struct gclient_s;
struct Turret;
struct gagent_s;
struct sentient_s;
struct dxJoint;
struct dxBody;
struct dxGeom;
struct dxGeomVtbl;
struct dxSpace;
struct dxWorld;
struct Vehicle;
struct tagInfo_s;
struct pathnode_t;
struct ai_common_t;
struct bdReferencableVtbl;
struct bdSingletonRegistryImplVtbl;
struct bdSocketVtbl;
struct bdTaskResultVtbl;
struct bdTaskResultProcessorVtbl;
struct bdLobbyConnectionListenerVtbl;
struct bdCypherVtbl;
struct bdLobbyConnection;
struct bdRemoteTaskManagerVtbl;
struct bdSecurityKeyMapListenerVtbl;
struct bdDTLSHeaderVtbl;
struct bdHMacVtbl;
struct bdDTLSAssociationVtbl;
struct bdECCKey;
struct bdQoSProbeListenerVtbl;
struct bdPacketInterceptorVtbl;
struct bdSocketRouterVtbl;
struct bdConnectionListenerVtbl;
struct bdConnection;
struct bdDispatchInterceptorVtbl;
struct bdRunnableVtbl;
struct bdThread;
struct bdNetImplVtbl;
struct bdDownloadInterceptorVtbl;
struct bdUploadInterceptorVtbl;
struct bdAntiCheatChallengeParamVtbl;
struct bdAntiCheatResponsesVtbl;
struct bdAntiCheatChallengeVtbl;
struct bdUserAccountIDVtbl;
struct bdLobbyEventHandlerVtbl;
struct bdStorageVtbl;
struct bdTeamsVtbl;
struct bdMailVtbl;
struct bdContentStreamingBaseVtbl;
struct bdFileID;
struct bdHashVtbl;
struct bdUCD;
struct bdLinkedAccountsVtbl;
struct bdSessionParamsVtbl;
struct bdArbitratedStatsInfoVtbl;
struct stdext::exceptionVtbl;
struct Statement_s;
struct expressionEntry;
struct ExpressionSupportingData;
struct MenuEventHandler;
struct menuDef_t;
struct ItemFloatExpression;
struct pathnode_tree_t;
struct GfxPortal;
struct GfxViewInfo;
struct GfxBackEndData;
struct jpeg_common_struct;
struct backing_store_struct;
struct jpeg_memory_mgr;
struct jpeg_progress_mgr;
struct jpeg_source_mgr;
struct JQUANT_TBL;
struct JHUFF_TBL;
struct jpeg_component_info;
struct jpeg_marker_struct;
struct jpeg_decomp_master;
struct jpeg_d_main_controller;
struct jpeg_d_coef_controller;
struct jpeg_d_post_controller;
struct jpeg_input_controller;
struct jpeg_marker_reader;
struct jpeg_entropy_decoder;
struct jpeg_inverse_dct;
struct jpeg_upsampler;
struct jpeg_color_deconverter;
struct jpeg_color_quantizer;
union small_pool_struct;
union large_pool_struct;
struct jpeg_destination_mgr;
struct jpeg_scan_info;
struct jpeg_comp_master;
struct jpeg_c_main_controller;
struct jpeg_c_prep_controller;
struct jpeg_c_coef_controller;
struct jpeg_marker_writer;
struct jpeg_color_converter;
struct jpeg_downsampler;
struct jpeg_forward_dct;
struct jpeg_entropy_encoder;
struct std::_Container_base12;
struct std::_Iterator_base12;
struct std::exceptionVtbl;
struct std::ios_baseVtbl;
struct std::ios_base::_Iosarray;
struct std::ios_base::_Fnarray;
struct std::_Facet_baseVtbl;
struct std::locale;
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl;
struct type_infoVtbl;
struct std::error_categoryVtbl;
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl;
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl;
struct CCallbackBaseVtbl;
struct HeapRegion;
struct HeapBlockHeader;
struct z_stream_s;
struct static_tree_desc_s;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct iwd_t;
struct directory_t;
struct PoolInfoHeader;
struct ScriptableEventCallbackTable;
struct ScriptableDamageEvent;
struct _RPC_ASYNC_STATE;
struct HBITMAP__;
struct tagVARIANT;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct _OLESTREAMVTBL;
struct _MIDL_STUB_DESC;
struct $3FA64165D15A4602C29B2D9B0DA4A5E9;
struct ARRAY_INFO;
struct _s__RTTIBaseClassArray;
struct tagPROPVARIANT;
struct _wireVARIANT;
struct FxGlassCrackEdge;
struct lua_State;
struct HksObject;
struct hks::HashTable;
struct hks::InternString;
struct hks::cclosure;
struct hksInstruction;
struct hks::Method;
struct hks::Method::DebugInfo;
struct hks::UpValue;
struct hks::HksClosure;
struct hks::UserData;
struct hks::StructInst;
struct hks::Debugger;
struct hks::Breakpoint;
struct hks::DebuggerVtbl;
struct hks::HksGlobal;
struct hks::CallStack::ActivationRecord;
struct hks::CallSite;
struct lua_Debug;
struct hks::BytecodeReader::Reader;
struct LuaPlus::LuaStateOutFileVtbl;
struct HksFile;
struct hks::netTransportVtbl;
struct hks::CompilerStateInterfaceVtbl;
struct hks::CompilerParseAcceptorVtbl;
struct hks::CodeGenerator::ConstructorState;
struct hks::CodeGenerator::NamePart;
struct hks::CodeGenerator::FunctionGenerationState;
struct hks::Preprocessor;
struct hks::IProfilerVtbl;
struct hks::VisitorVtbl;
struct hks::Visitor::Node;
struct bdPacketVtbl;
struct bdLinkedList<bdReference<bdChunk> >::Node;
struct bdUnreliableReceiveWindowVtbl;
struct bdLinkedList<bdReference<bdDataChunk> >::Node;
struct bdUnreliableSendWindowVtbl;
struct bdDataIdentifiersVtbl;
struct bdTeamProfileSearchParamsVtbl;
struct bdLinkableVtbl;
struct std::_Node_baseVtbl;
struct std::_Node_end_rep;
struct DNameNodeVtbl;

/* 1 */
enum $BBAEA5B7DAA0B05BC423111787544096
{
  VAL = 0x1,
};

/* 2 */
enum scriptAnimConditions_t
{
  ANIM_COND_PLAYERANIMTYPE = 0x0,
  ANIM_COND_WEAPONCLASS = 0x1,
  ANIM_COND_MOUNTED = 0x2,
  ANIM_COND_MOVETYPE = 0x3,
  ANIM_COND_CROUCHING = 0x4,
  ANIM_COND_FIRING = 0x5,
  ANIM_COND_WEAPON_POSITION = 0x6,
  ANIM_COND_STRAFING = 0x7,
  ANIM_COND_DAMAGETYPE = 0x8,
  ANIM_COND_HITLOCATION = 0x9,
  ANIM_COND_HITDIRECTION = 0xA,
  ANIM_COND_AKIMBO = 0xB,
  ANIM_COND_NEXTWEAPON = 0xC,
  ANIM_COND_NEXTWEAPON_AKIMBO = 0xD,
  ANIM_COND_PLAYERANIMTYPE_PRIMARY = 0xE,
  ANIM_COND_MANTLE_STATE = 0xF,
  ANIM_COND_FEMALE = 0x10,
  NUM_ANIM_CONDITIONS = 0x11,
};

/* 3 */
typedef $BBAEA5B7DAA0B05BC423111787544096 $17D91BDAA7EAE613F379E39B69B2C3AD;

/* 4 */
enum MaterialTechniqueType
{
  TECHNIQUE_STANDARD_BEGIN = 0x0,
  TECHNIQUE_DEPTH_PREPASS = 0x0,
  TECHNIQUE_BUILD_SHADOWMAP_DEPTH = 0x1,
  TECHNIQUE_UNLIT = 0x2,
  TECHNIQUE_EMISSIVE = 0x3,
  TECHNIQUE_EMISSIVE_DFOG = 0x4,
  TECHNIQUE_EMISSIVE_SHADOW = 0x5,
  TECHNIQUE_EMISSIVE_SHADOW_DFOG = 0x6,
  TECHNIQUE_LIT_BEGIN = 0x7,
  TECHNIQUE_LIT = 0x7,
  LIT_FIRST_ONE_LIGHT_TECHNIQUE = 0x8,
  TECHNIQUE_LIT_DIR = 0x8,
  TECHNIQUE_LIT_DIR_SHADOW = 0x9,
  TECHNIQUE_LIT_SPOT = 0xA,
  TECHNIQUE_LIT_SPOT_SHADOW = 0xB,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS = 0xC,
  TECHNIQUE_LIT_OMNI = 0xD,
  TECHNIQUE_LIT_OMNI_SHADOW = 0xE,
  LIT_FIRST_TWO_LIGHT_TECHNIQUE = 0xF,
  TECHNIQUE_LIT_DIR_SPOT = 0xF,
  TECHNIQUE_LIT_DIR_SPOT_SHADOW = 0x10,
  TECHNIQUE_LIT_DIR_SPOT_SHADOW_CUCOLORIS = 0x11,
  TECHNIQUE_LIT_DIR_OMNI = 0x12,
  TECHNIQUE_LIT_DIR_OMNI_SHADOW = 0x13,
  TECHNIQUE_LIT_DIR_SHADOW_SPOT = 0x14,
  TECHNIQUE_LIT_DIR_SHADOW_SPOT_SHADOW = 0x15,
  TECHNIQUE_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x16,
  TECHNIQUE_LIT_DIR_SHADOW_OMNI = 0x17,
  TECHNIQUE_LIT_DIR_SHADOW_OMNI_SHADOW = 0x18,
  TECHNIQUE_LIT_SPOT_SPOT = 0x19,
  TECHNIQUE_LIT_SPOT_SPOT_SHADOW = 0x1A,
  TECHNIQUE_LIT_SPOT_SPOT_SHADOW_CUCOLORIS = 0x1B,
  TECHNIQUE_LIT_SPOT_OMNI = 0x1C,
  TECHNIQUE_LIT_SPOT_OMNI_SHADOW = 0x1D,
  TECHNIQUE_LIT_SPOT_SHADOW_SPOT = 0x1E,
  TECHNIQUE_LIT_SPOT_SHADOW_SPOT_SHADOW = 0x1F,
  TECHNIQUE_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x20,
  TECHNIQUE_LIT_SPOT_SHADOW_OMNI = 0x21,
  TECHNIQUE_LIT_SPOT_SHADOW_OMNI_SHADOW = 0x22,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT = 0x23,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW = 0x24,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS = 0x25,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_OMNI = 0x26,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW = 0x27,
  TECHNIQUE_LIT_OMNI_OMNI = 0x28,
  TECHNIQUE_LIT_OMNI_OMNI_SHADOW = 0x29,
  TECHNIQUE_LIT_OMNI_SHADOW_OMNI = 0x2A,
  TECHNIQUE_LIT_OMNI_SHADOW_OMNI_SHADOW = 0x2B,
  TECHNIQUE_LIT_DYNAMIC_BRANCHING_CUCOLORIS = 0x2C,
  TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS = 0x2D,
  TECHNIQUE_LIT_DYNAMIC_BRANCHING = 0x2E,
  TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING = 0x2F,
  TECHNIQUE_LIT_BEGIN_DFOG = 0x30,
  TECHNIQUE_LIT_DFOG = 0x30,
  LIT_FIRST_ONE_LIGHT_TECHNIQUE_DFOG = 0x31,
  TECHNIQUE_LIT_DIR_DFOG = 0x31,
  TECHNIQUE_LIT_DIR_SHADOW_DFOG = 0x32,
  TECHNIQUE_LIT_SPOT_DFOG = 0x33,
  TECHNIQUE_LIT_SPOT_SHADOW_DFOG = 0x34,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x35,
  TECHNIQUE_LIT_OMNI_DFOG = 0x36,
  TECHNIQUE_LIT_OMNI_SHADOW_DFOG = 0x37,
  LIT_FIRST_TWO_LIGHT_TECHNIQUE_DFOG = 0x38,
  TECHNIQUE_LIT_DIR_SPOT_DFOG = 0x38,
  TECHNIQUE_LIT_DIR_SPOT_SHADOW_DFOG = 0x39,
  TECHNIQUE_LIT_DIR_SPOT_SHADOW_CUCOLORIS_DFOG = 0x3A,
  TECHNIQUE_LIT_DIR_OMNI_DFOG = 0x3B,
  TECHNIQUE_LIT_DIR_OMNI_SHADOW_DFOG = 0x3C,
  TECHNIQUE_LIT_DIR_SHADOW_SPOT_DFOG = 0x3D,
  TECHNIQUE_LIT_DIR_SHADOW_SPOT_SHADOW_DFOG = 0x3E,
  TECHNIQUE_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x3F,
  TECHNIQUE_LIT_DIR_SHADOW_OMNI_DFOG = 0x40,
  TECHNIQUE_LIT_DIR_SHADOW_OMNI_SHADOW_DFOG = 0x41,
  TECHNIQUE_LIT_SPOT_SPOT_DFOG = 0x42,
  TECHNIQUE_LIT_SPOT_SPOT_SHADOW_DFOG = 0x43,
  TECHNIQUE_LIT_SPOT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x44,
  TECHNIQUE_LIT_SPOT_OMNI_DFOG = 0x45,
  TECHNIQUE_LIT_SPOT_OMNI_SHADOW_DFOG = 0x46,
  TECHNIQUE_LIT_SPOT_SHADOW_SPOT_DFOG = 0x47,
  TECHNIQUE_LIT_SPOT_SHADOW_SPOT_SHADOW_DFOG = 0x48,
  TECHNIQUE_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x49,
  TECHNIQUE_LIT_SPOT_SHADOW_OMNI_DFOG = 0x4A,
  TECHNIQUE_LIT_SPOT_SHADOW_OMNI_SHADOW_DFOG = 0x4B,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_DFOG = 0x4C,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_DFOG = 0x4D,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS_DFOG = 0x4E,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_DFOG = 0x4F,
  TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW_DFOG = 0x50,
  TECHNIQUE_LIT_OMNI_OMNI_DFOG = 0x51,
  TECHNIQUE_LIT_OMNI_OMNI_SHADOW_DFOG = 0x52,
  TECHNIQUE_LIT_OMNI_SHADOW_OMNI_DFOG = 0x53,
  TECHNIQUE_LIT_OMNI_SHADOW_OMNI_SHADOW_DFOG = 0x54,
  TECHNIQUE_LIT_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x55,
  TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x56,
  TECHNIQUE_LIT_DYNAMIC_BRANCHING_DFOG = 0x57,
  TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING_DFOG = 0x58,
  TECHNIQUE_LIT_END = 0x59,
  TECHNIQUE_LIGHT_SPOT = 0x59,
  TECHNIQUE_LIGHT_OMNI = 0x5A,
  TECHNIQUE_LIGHT_SPOT_SHADOW = 0x5B,
  TECHNIQUE_LIGHT_SPOT_SHADOW_CUCOLORIS = 0x5C,
  TECHNIQUE_FAKELIGHT_NORMAL = 0x5D,
  TECHNIQUE_FAKELIGHT_VIEW = 0x5E,
  TECHNIQUE_SUNLIGHT_PREVIEW = 0x5F,
  TECHNIQUE_CASE_TEXTURE = 0x60,
  TECHNIQUE_WIREFRAME_SOLID = 0x61,
  TECHNIQUE_WIREFRAME_SHADED = 0x62,
  TECHNIQUE_THERMAL = 0x63,
  TECHNIQUE_VELOCITY_RIGID = 0x64,
  TECHNIQUE_VELOCITY_SKINNED = 0x65,
  TECHNIQUE_DEBUG_BUMPMAP = 0x66,
  TECHNIQUE_STANDARD_LAST = 0x66,
  TECHNIQUE_INSTANCED_BEGIN = 0x67,
  TECHNIQUE_INSTANCED_DEPTH_PREPASS = 0x67,
  TECHNIQUE_INSTANCED_BUILD_SHADOWMAP_DEPTH = 0x68,
  TECHNIQUE_INSTANCED_UNLIT = 0x69,
  TECHNIQUE_INSTANCED_EMISSIVE = 0x6A,
  TECHNIQUE_INSTANCED_EMISSIVE_DFOG = 0x6B,
  TECHNIQUE_INSTANCED_EMISSIVE_SHADOW = 0x6C,
  TECHNIQUE_INSTANCED_EMISSIVE_SHADOW_DFOG = 0x6D,
  TECHNIQUE_INSTANCED_LIT_BEGIN = 0x6E,
  TECHNIQUE_INSTANCED_LIT = 0x6E,
  INSTANCED_LIT_FIRST_ONE_LIGHT_TECHNIQUE = 0x6F,
  TECHNIQUE_INSTANCED_LIT_DIR = 0x6F,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW = 0x70,
  TECHNIQUE_INSTANCED_LIT_SPOT = 0x71,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW = 0x72,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS = 0x73,
  TECHNIQUE_INSTANCED_LIT_OMNI = 0x74,
  TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW = 0x75,
  INSTANCED_LIT_FIRST_TWO_LIGHT_TECHNIQUE = 0x76,
  TECHNIQUE_INSTANCED_LIT_DIR_SPOT = 0x76,
  TECHNIQUE_INSTANCED_LIT_DIR_SPOT_SHADOW = 0x77,
  TECHNIQUE_INSTANCED_LIT_DIR_SPOT_SHADOW_CUCOLORIS = 0x78,
  TECHNIQUE_INSTANCED_LIT_DIR_OMNI = 0x79,
  TECHNIQUE_INSTANCED_LIT_DIR_OMNI_SHADOW = 0x7A,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT = 0x7B,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_SHADOW = 0x7C,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x7D,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_OMNI = 0x7E,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_OMNI_SHADOW = 0x7F,
  TECHNIQUE_INSTANCED_LIT_SPOT_SPOT = 0x80,
  TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_SHADOW = 0x81,
  TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_SHADOW_CUCOLORIS = 0x82,
  TECHNIQUE_INSTANCED_LIT_SPOT_OMNI = 0x83,
  TECHNIQUE_INSTANCED_LIT_SPOT_OMNI_SHADOW = 0x84,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT = 0x85,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_SHADOW = 0x86,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x87,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_OMNI = 0x88,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_OMNI_SHADOW = 0x89,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT = 0x8A,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW = 0x8B,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS = 0x8C,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_OMNI = 0x8D,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW = 0x8E,
  TECHNIQUE_INSTANCED_LIT_OMNI_OMNI = 0x8F,
  TECHNIQUE_INSTANCED_LIT_OMNI_OMNI_SHADOW = 0x90,
  TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_OMNI = 0x91,
  TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_OMNI_SHADOW = 0x92,
  TECHNIQUE_INSTANCED_LIT_DYNAMIC_BRANCHING_CUCOLORIS = 0x93,
  TECHNIQUE_INSTANCED_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS = 0x94,
  TECHNIQUE_INSTANCED_LIT_DYNAMIC_BRANCHING = 0x95,
  TECHNIQUE_INSTANCED_LIT_SUN_DYNAMIC_BRANCHING = 0x96,
  TECHNIQUE_INSTANCED_LIT_BEGIN_DFOG = 0x97,
  TECHNIQUE_INSTANCED_LIT_DFOG = 0x97,
  INSTANCED_LIT_FIRST_ONE_LIGHT_TECHNIQUE_DFOG = 0x98,
  TECHNIQUE_INSTANCED_LIT_DIR_DFOG = 0x98,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_DFOG = 0x99,
  TECHNIQUE_INSTANCED_LIT_SPOT_DFOG = 0x9A,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_DFOG = 0x9B,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x9C,
  TECHNIQUE_INSTANCED_LIT_OMNI_DFOG = 0x9D,
  TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_DFOG = 0x9E,
  INSTANCED_LIT_FIRST_TWO_LIGHT_TECHNIQUE_DFOG = 0x9F,
  TECHNIQUE_INSTANCED_LIT_DIR_SPOT_DFOG = 0x9F,
  TECHNIQUE_INSTANCED_LIT_DIR_SPOT_SHADOW_DFOG = 0xA0,
  TECHNIQUE_INSTANCED_LIT_DIR_SPOT_SHADOW_CUCOLORIS_DFOG = 0xA1,
  TECHNIQUE_INSTANCED_LIT_DIR_OMNI_DFOG = 0xA2,
  TECHNIQUE_INSTANCED_LIT_DIR_OMNI_SHADOW_DFOG = 0xA3,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_DFOG = 0xA4,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_SHADOW_DFOG = 0xA5,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0xA6,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_OMNI_DFOG = 0xA7,
  TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_OMNI_SHADOW_DFOG = 0xA8,
  TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_DFOG = 0xA9,
  TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_SHADOW_DFOG = 0xAA,
  TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_SHADOW_CUCOLORIS_DFOG = 0xAB,
  TECHNIQUE_INSTANCED_LIT_SPOT_OMNI_DFOG = 0xAC,
  TECHNIQUE_INSTANCED_LIT_SPOT_OMNI_SHADOW_DFOG = 0xAD,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_DFOG = 0xAE,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_SHADOW_DFOG = 0xAF,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0xB0,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_OMNI_DFOG = 0xB1,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_OMNI_SHADOW_DFOG = 0xB2,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_DFOG = 0xB3,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_DFOG = 0xB4,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS_DFOG = 0xB5,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_DFOG = 0xB6,
  TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW_DFOG = 0xB7,
  TECHNIQUE_INSTANCED_LIT_OMNI_OMNI_DFOG = 0xB8,
  TECHNIQUE_INSTANCED_LIT_OMNI_OMNI_SHADOW_DFOG = 0xB9,
  TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_OMNI_DFOG = 0xBA,
  TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_OMNI_SHADOW_DFOG = 0xBB,
  TECHNIQUE_INSTANCED_LIT_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0xBC,
  TECHNIQUE_INSTANCED_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0xBD,
  TECHNIQUE_INSTANCED_LIT_DYNAMIC_BRANCHING_DFOG = 0xBE,
  TECHNIQUE_INSTANCED_LIT_SUN_DYNAMIC_BRANCHING_DFOG = 0xBF,
  TECHNIQUE_INSTANCED_LIT_END = 0xC0,
  TECHNIQUE_INSTANCED_LIGHT_SPOT = 0xC0,
  TECHNIQUE_INSTANCED_LIGHT_OMNI = 0xC1,
  TECHNIQUE_INSTANCED_LIGHT_SPOT_SHADOW = 0xC2,
  TECHNIQUE_INSTANCED_LIGHT_SPOT_SHADOW_CUCOLORIS = 0xC3,
  TECHNIQUE_INSTANCED_FAKELIGHT_NORMAL = 0xC4,
  TECHNIQUE_INSTANCED_FAKELIGHT_VIEW = 0xC5,
  TECHNIQUE_INSTANCED_SUNLIGHT_PREVIEW = 0xC6,
  TECHNIQUE_INSTANCED_CASE_TEXTURE = 0xC7,
  TECHNIQUE_INSTANCED_WIREFRAME_SOLID = 0xC8,
  TECHNIQUE_INSTANCED_WIREFRAME_SHADED = 0xC9,
  TECHNIQUE_INSTANCED_THERMAL = 0xCA,
  TECHNIQUE_INSTANCED_VELOCITY_RIGID = 0xCB,
  TECHNIQUE_INSTANCED_VELOCITY_SKINNED = 0xCC,
  TECHNIQUE_INSTANCED_DEBUG_BUMPMAP = 0xCD,
  TECHNIQUE_INSTANCED_LAST = 0xCD,
  TECHNIQUE_NO_DISPLACEMENT_BEGIN = 0xCE,
  TECHNIQUE_NO_DISPLACEMENT_DEPTH_PREPASS = 0xCE,
  TECHNIQUE_NO_DISPLACEMENT_BUILD_SHADOWMAP_DEPTH = 0xCF,
  TECHNIQUE_NO_DISPLACEMENT_UNLIT = 0xD0,
  TECHNIQUE_NO_DISPLACEMENT_EMISSIVE = 0xD1,
  TECHNIQUE_NO_DISPLACEMENT_EMISSIVE_DFOG = 0xD2,
  TECHNIQUE_NO_DISPLACEMENT_EMISSIVE_SHADOW = 0xD3,
  TECHNIQUE_NO_DISPLACEMENT_EMISSIVE_SHADOW_DFOG = 0xD4,
  TECHNIQUE_NO_DISPLACEMENT_LIT_BEGIN = 0xD5,
  TECHNIQUE_NO_DISPLACEMENT_LIT = 0xD5,
  NO_DISPLACEMENT_LIT_FIRST_ONE_LIGHT_TECHNIQUE = 0xD6,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR = 0xD6,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW = 0xD7,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT = 0xD8,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW = 0xD9,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS = 0xDA,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI = 0xDB,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW = 0xDC,
  NO_DISPLACEMENT_LIT_FIRST_TWO_LIGHT_TECHNIQUE = 0xDD,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT = 0xDD,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_SHADOW = 0xDE,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_SHADOW_CUCOLORIS = 0xDF,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_OMNI = 0xE0,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_OMNI_SHADOW = 0xE1,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT = 0xE2,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_SHADOW = 0xE3,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS = 0xE4,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_OMNI = 0xE5,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_OMNI_SHADOW = 0xE6,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT = 0xE7,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_SHADOW = 0xE8,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_SHADOW_CUCOLORIS = 0xE9,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_OMNI = 0xEA,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_OMNI_SHADOW = 0xEB,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT = 0xEC,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_SHADOW = 0xED,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS = 0xEE,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_OMNI = 0xEF,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_OMNI_SHADOW = 0xF0,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT = 0xF1,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW = 0xF2,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS = 0xF3,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_OMNI = 0xF4,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW = 0xF5,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_OMNI = 0xF6,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_OMNI_SHADOW = 0xF7,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_OMNI = 0xF8,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_OMNI_SHADOW = 0xF9,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DYNAMIC_BRANCHING_CUCOLORIS = 0xFA,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS = 0xFB,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DYNAMIC_BRANCHING = 0xFC,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SUN_DYNAMIC_BRANCHING = 0xFD,
  TECHNIQUE_NO_DISPLACEMENT_LIT_BEGIN_DFOG = 0xFE,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DFOG = 0xFE,
  NO_DISPLACEMENT_LIT_FIRST_ONE_LIGHT_TECHNIQUE_DFOG = 0xFF,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_DFOG = 0xFF,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_DFOG = 0x100,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_DFOG = 0x101,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_DFOG = 0x102,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x103,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_DFOG = 0x104,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_DFOG = 0x105,
  NO_DISPLACEMENT_LIT_FIRST_TWO_LIGHT_TECHNIQUE_DFOG = 0x106,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_DFOG = 0x106,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_SHADOW_DFOG = 0x107,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_SHADOW_CUCOLORIS_DFOG = 0x108,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_OMNI_DFOG = 0x109,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_OMNI_SHADOW_DFOG = 0x10A,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_DFOG = 0x10B,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_SHADOW_DFOG = 0x10C,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x10D,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_OMNI_DFOG = 0x10E,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_OMNI_SHADOW_DFOG = 0x10F,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_DFOG = 0x110,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_SHADOW_DFOG = 0x111,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x112,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_OMNI_DFOG = 0x113,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_OMNI_SHADOW_DFOG = 0x114,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_DFOG = 0x115,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_SHADOW_DFOG = 0x116,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x117,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_OMNI_DFOG = 0x118,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_OMNI_SHADOW_DFOG = 0x119,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_DFOG = 0x11A,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_DFOG = 0x11B,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS_DFOG = 0x11C,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_DFOG = 0x11D,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW_DFOG = 0x11E,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_OMNI_DFOG = 0x11F,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_OMNI_SHADOW_DFOG = 0x120,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_OMNI_DFOG = 0x121,
  TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_OMNI_SHADOW_DFOG = 0x122,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x123,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x124,
  TECHNIQUE_NO_DISPLACEMENT_LIT_DYNAMIC_BRANCHING_DFOG = 0x125,
  TECHNIQUE_NO_DISPLACEMENT_LIT_SUN_DYNAMIC_BRANCHING_DFOG = 0x126,
  TECHNIQUE_NO_DISPLACEMENT_LIT_END = 0x127,
  TECHNIQUE_NO_DISPLACEMENT_LIGHT_SPOT = 0x127,
  TECHNIQUE_NO_DISPLACEMENT_LIGHT_OMNI = 0x128,
  TECHNIQUE_NO_DISPLACEMENT_LIGHT_SPOT_SHADOW = 0x129,
  TECHNIQUE_NO_DISPLACEMENT_LIGHT_SPOT_SHADOW_CUCOLORIS = 0x12A,
  TECHNIQUE_NO_DISPLACEMENT_FAKELIGHT_NORMAL = 0x12B,
  TECHNIQUE_NO_DISPLACEMENT_FAKELIGHT_VIEW = 0x12C,
  TECHNIQUE_NO_DISPLACEMENT_SUNLIGHT_PREVIEW = 0x12D,
  TECHNIQUE_NO_DISPLACEMENT_CASE_TEXTURE = 0x12E,
  TECHNIQUE_NO_DISPLACEMENT_WIREFRAME_SOLID = 0x12F,
  TECHNIQUE_NO_DISPLACEMENT_WIREFRAME_SHADED = 0x130,
  TECHNIQUE_NO_DISPLACEMENT_THERMAL = 0x131,
  TECHNIQUE_NO_DISPLACEMENT_VELOCITY_RIGID = 0x132,
  TECHNIQUE_NO_DISPLACEMENT_VELOCITY_SKINNED = 0x133,
  TECHNIQUE_NO_DISPLACEMENT_DEBUG_BUMPMAP = 0x134,
  TECHNIQUE_NO_DISPLACEMENT_LAST = 0x134,
  TECHNIQUE_COUNT = 0x135,
  TECHNIQUE_TOTAL_COUNT = 0x136,
  TECHNIQUE_NONE = 0x137,
};

/* 5 */
enum $8110E7776D09EAED3F6382AD8FE21AC7
{
  MTL_SHADOW_TYPE_NONE = 0x0,
  MTL_SHADOW_TYPE_STANDARD = 0x1,
  MTL_SHADOW_TYPE_CUSTOM = 0x2,
  MTL_SHADOW_TYPE_COUNT = 0x3,
};

/* 6 */
enum SND_EQTYPE
{
  SND_EQTYPE_FIRST = 0x0,
  SND_EQTYPE_LOWPASS = 0x0,
  SND_EQTYPE_HIGHPASS = 0x1,
  SND_EQTYPE_LOWSHELF = 0x2,
  SND_EQTYPE_HIGHSHELF = 0x3,
  SND_EQTYPE_BELL = 0x4,
  SND_EQTYPE_LAST = 0x4,
  SND_EQTYPE_COUNT = 0x5,
  SND_EQTYPE_INVALID = 0x5,
};

/* 7 */
enum $B16B3D59BC9460D9563CB05BD695D3AC
{
  DB_ZONE_COMMON = 0x1,
  DB_ZONE_UI = 0x2,
  DB_ZONE_GAME = 0x4,
  DB_ZONE_LOAD = 0x8,
  DB_ZONE_DEV = 0x10,
  DB_ZONE_BASEMAP = 0x20,
  DB_ZONE_TRANSIENT_POOL = 0x40,
  DB_ZONE_TRANSIENT_MASK = 0x40,
};

/* 8 */
enum snd_whizby_t
{
  WHIZBY_NEAR = 0x0,
  WHIZBY_MEDIUM = 0x1,
  WHIZBY_FAR = 0x2,
  NUM_WHIZBY_TYPES = 0x3,
};

/* 9 */
enum bdLogMessageType
{
  BD_LOG_INFO = 0x0,
  BD_LOG_WARNING = 0x1,
  BD_LOG_ERROR = 0x2,
};

/* 10 */
enum snd_stopsounds_arg_t
{
  SND_STOP_ALL = 0x0,
  SND_KEEP_REVERB = 0x1,
  SND_KEEP_MUSIC = 0x2,
  SND_KEEP_AMBIENT = 0x4,
  SND_KEEP_MUSIC_AND_AMBIENT = 0x6,
  SND_STOP_STREAMED = 0x8,
  SND_KEEP_CHANNEL_VOLUMES = 0x10,
};

/* 11 */
enum VehicleWheelType
{
  FL_WHEEL = 0x0,
  FR_WHEEL = 0x1,
  BL_WHEEL = 0x2,
  BR_WHEEL = 0x3,
  ML_WHEEL = 0x4,
  MR_WHEEL = 0x5,
  NUM_VEHICLE_WHEELS = 0x6,
};

/* 12 */
enum weapAnimFiles_t
{
  WEAP_ANIM_ROOT = 0x0,
  WEAP_ANIM_IDLE = 0x1,
  WEAP_ANIM_EMPTY_IDLE = 0x2,
  WEAP_ANIM_FIRE = 0x3,
  WEAP_ANIM_HOLD_FIRE = 0x4,
  WEAP_ANIM_LASTSHOT = 0x5,
  WEAP_ANIM_RECHAMBER = 0x6,
  WEAP_ANIM_GRENADE_PRIME = 0x7,
  WEAP_ANIM_GRENADE_PRIME_READY_TO_THROW = 0x8,
  WEAP_ANIM_MELEE_SWIPE = 0x9,
  WEAP_ANIM_MELEE_HIT = 0xA,
  WEAP_ANIM_MELEE_FATAL = 0xB,
  WEAP_ANIM_MELEE_MISS = 0xC,
  WEAP_ANIM_MELEE_VICTIM_CROUCHING_HIT = 0xD,
  WEAP_ANIM_MELEE_VICTIM_CROUCHING_FATAL = 0xE,
  WEAP_ANIM_MELEE_VICTIM_CROUCHING_MISS = 0xF,
  WEAP_ANIM_RELOAD = 0x10,
  WEAP_ANIM_RELOAD_EMPTY = 0x11,
  WEAP_ANIM_RELOAD_START = 0x12,
  WEAP_ANIM_RELOAD_END = 0x13,
  WEAP_ANIM_FAST_RELOAD = 0x14,
  WEAP_ANIM_FAST_RELOAD_EMPTY = 0x15,
  WEAP_ANIM_FAST_RELOAD_START = 0x16,
  WEAP_ANIM_FAST_RELOAD_END = 0x17,
  WEAP_ANIM_RAISE = 0x18,
  WEAP_ANIM_FIRST_RAISE = 0x19,
  WEAP_ANIM_BREACH_RAISE = 0x1A,
  WEAP_ANIM_DROP = 0x1B,
  WEAP_ANIM_ALT_RAISE = 0x1C,
  WEAP_ANIM_ALT_DROP = 0x1D,
  WEAP_ANIM_ALT_OVERRIDE = 0x1E,
  WEAP_ANIM_TOGGLE_OVERRIDE = 0x1F,
  WEAP_ANIM_SCOPE_TOGGLE_ON = 0x20,
  WEAP_ANIM_SCOPE_TOGGLE_OFF = 0x21,
  WEAP_ANIM_QUICK_RAISE = 0x22,
  WEAP_ANIM_QUICK_DROP = 0x23,
  WEAP_ANIM_EMPTY_RAISE = 0x24,
  WEAP_ANIM_EMPTY_DROP = 0x25,
  WEAP_ANIM_SPRINT_IN = 0x26,
  WEAP_ANIM_SPRINT_IN_CANCEL = 0x27,
  WEAP_ANIM_SPRINT_LOOP = 0x28,
  WEAP_ANIM_SPRINT_OUT = 0x29,
  WEAP_ANIM_STUNNED_START = 0x2A,
  WEAP_ANIM_STUNNED_LOOP = 0x2B,
  WEAP_ANIM_STUNNED_END = 0x2C,
  WEAP_ANIM_DETONATE = 0x2D,
  WEAP_ANIM_NIGHTVISION_WEAR = 0x2E,
  WEAP_ANIM_NIGHTVISION_REMOVE = 0x2F,
  WEAP_ANIM_ADS_FIRE = 0x30,
  WEAP_ANIM_ADS_LASTSHOT = 0x31,
  WEAP_ANIM_ADS_RECHAMBER = 0x32,
  WEAP_ANIM_BLAST_FRONT = 0x33,
  WEAP_ANIM_BLAST_RIGHT = 0x34,
  WEAP_ANIM_BLAST_BACK = 0x35,
  WEAP_ANIM_BLAST_LEFT = 0x36,
  WEAP_ANIM_SLIDE_IN = 0x37,
  WEAP_ANIM_SLIDE_LOOP = 0x38,
  WEAP_ANIM_SLIDE_OUT = 0x39,
  WEAP_ANIM_RECOIL_SETTLE = 0x3A,
  WEAP_ANIM_SWIM_LOOP = 0x3B,
  WEAP_ANIM_MANTLE_UP_64 = 0x3C,
  WEAP_ANIM_MANTLE_UP_56 = 0x3D,
  WEAP_ANIM_MANTLE_UP_48 = 0x3E,
  WEAP_ANIM_MANTLE_UP_40 = 0x3F,
  WEAP_ANIM_MANTLE_UP_32 = 0x40,
  WEAP_ANIM_MANTLE_UP_24 = 0x41,
  WEAP_ANIM_MANTLE_UP_16 = 0x42,
  WEAP_ANIM_MANTLE_OVER_64 = 0x43,
  WEAP_ANIM_MANTLE_OVER_56 = 0x44,
  WEAP_ANIM_MANTLE_OVER_48 = 0x45,
  WEAP_ANIM_MANTLE_OVER_40 = 0x46,
  WEAP_ANIM_MANTLE_OVER_32 = 0x47,
  WEAP_ANIM_MANTLE_OVER_24 = 0x48,
  WEAP_ANIM_MANTLE_OVER_16 = 0x49,
  WEAP_ANIM_RELOAD_MULTIPLE_1 = 0x4A,
  WEAP_ANIM_RELOAD_MULTIPLE_2 = 0x4B,
  WEAP_ANIM_RELOAD_MULTIPLE_3 = 0x4C,
  WEAP_ANIM_RELOAD_MULTIPLE_4 = 0x4D,
  WEAP_ANIM_RELOAD_MULTIPLE_5 = 0x4E,
  WEAP_ANIM_RELOAD_MULTIPLE_6 = 0x4F,
  WEAP_ANIM_RELOAD_MULTIPLE_7 = 0x50,
  WEAP_ANIM_RELOAD_MULTIPLE_8 = 0x51,
  WEAP_ANIM_RELOAD_MULTIPLE_FAST_1 = 0x52,
  WEAP_ANIM_RELOAD_MULTIPLE_FAST_2 = 0x53,
  WEAP_ANIM_RELOAD_MULTIPLE_FAST_3 = 0x54,
  WEAP_ANIM_RELOAD_MULTIPLE_FAST_4 = 0x55,
  WEAP_ANIM_RELOAD_MULTIPLE_FAST_5 = 0x56,
  WEAP_ANIM_RELOAD_MULTIPLE_FAST_6 = 0x57,
  WEAP_ANIM_RELOAD_MULTIPLE_FAST_7 = 0x58,
  WEAP_ANIM_RELOAD_MULTIPLE_FAST_8 = 0x59,
  WEAP_ANIM_ADS_UP = 0x5A,
  WEAP_ANIM_ADS_DOWN = 0x5B,
  WEAP_ANIM_RECOIL = 0x5C,
  WEAP_ALT_ANIM_ADJUST = 0x5D,
  WEAP_ANIM_ADDITIVE_ADS_ROOT = 0x5E,
  WEAP_ANIM_ADDITIVE_ADS_UP = 0x5F,
  WEAP_ANIM_ADDITIVE_DRAG_LEFT_ROOT = 0x60,
  WEAP_ANIM_ADDITIVE_DRAG_LEFT = 0x61,
  WEAP_ANIM_ADDITIVE_DRAG_RIGHT_ROOT = 0x62,
  WEAP_ANIM_ADDITIVE_DRAG_RIGHT = 0x63,
  WEAP_ANIM_ADDITIVE_DRAG_UP_ROOT = 0x64,
  WEAP_ANIM_ADDITIVE_DRAG_UP = 0x65,
  WEAP_ANIM_ADDITIVE_DRAG_DOWN_ROOT = 0x66,
  WEAP_ANIM_ADDITIVE_DRAG_DOWN = 0x67,
  WEAP_ANIM_ADDITIVE_SWIM_FORWARD_ROOT = 0x68,
  WEAP_ANIM_ADDITIVE_SWIM_FORWARD = 0x69,
  WEAP_ANIM_ADDITIVE_SWIM_BACKWARD_ROOT = 0x6A,
  WEAP_ANIM_ADDITIVE_SWIM_BACKWARD = 0x6B,
  WEAP_ANIM_ADDITIVE_JUMP_ROOT = 0x6C,
  WEAP_ANIM_ADDITIVE_JUMP = 0x6D,
  WEAP_ANIM_ADDITIVE_JUMP_LAND_ROOT = 0x6E,
  WEAP_ANIM_ADDITIVE_JUMP_LAND = 0x6F,
  WEAP_ANIM_ADDITIVE_WALK_ROOT = 0x70,
  WEAP_ANIM_ADDITIVE_WALK = 0x71,
  WEAP_ANIM_ADDITIVE_CRAWL_IN_ROOT = 0x72,
  WEAP_ANIM_ADDITIVE_CRAWL_IN = 0x73,
  WEAP_ANIM_ADDITIVE_CRAWL_LOOP_ROOT = 0x74,
  WEAP_ANIM_ADDITIVE_CRAWL_LOOP = 0x75,
  WEAP_ANIM_ADDITIVE_CRAWL_LOOP_LEFT_ROOT = 0x76,
  WEAP_ANIM_ADDITIVE_CRAWL_LOOP_LEFT = 0x77,
  WEAP_ANIM_ADDITIVE_CRAWL_LOOP_RIGHT_ROOT = 0x78,
  WEAP_ANIM_ADDITIVE_CRAWL_LOOP_RIGHT = 0x79,
  WEAP_ANIM_ADDITIVE_PRONE_DROP_ROOT = 0x7A,
  WEAP_ANIM_ADDITIVE_PRONE_DROP = 0x7B,
  NUM_WEAP_ANIMS = 0x7C,
  WEAP_ANIM_VIEWMODEL_START = 0x1,
  WEAP_ANIM_VIEWMODEL_END = 0x5A,
  WEAP_ANIM_ADDITIVE_START = 0x5E,
  WEAP_ANIM_ADDITIVE_END = 0x7C,
};

/* 13 */
enum weapFireType_t
{
  WEAPON_FIRETYPE_FULLAUTO = 0x0,
  WEAPON_FIRETYPE_SINGLESHOT = 0x1,
  WEAPON_FIRETYPE_BURSTFIRE2 = 0x2,
  WEAPON_FIRETYPE_BURSTFIRE3 = 0x3,
  WEAPON_FIRETYPE_BURSTFIRE4 = 0x4,
  WEAPON_FIRETYPE_DOUBLEBARREL = 0x5,
  WEAPON_FIRETYPECOUNT = 0x6,
  WEAPON_FIRETYPE_BURSTFIRE_FIRST = 0x2,
  WEAPON_FIRETYPE_BURSTFIRE_LAST = 0x4,
};

/* 14 */
enum $FD98F345744F17A4648B6B03866DCD88
{
  VAR_UNDEFINED = 0x0,
  VAR_BEGIN_REF = 0x1,
  VAR_POINTER = 0x1,
  VAR_STRING = 0x2,
  VAR_ISTRING = 0x3,
  VAR_VECTOR = 0x4,
  VAR_END_REF = 0x5,
  VAR_FLOAT = 0x5,
  VAR_INTEGER = 0x6,
  VAR_CODEPOS = 0x7,
  VAR_PRECODEPOS = 0x8,
  VAR_FUNCTION = 0x9,
  VAR_BUILTIN_FUNCTION = 0xA,
  VAR_BUILTIN_METHOD = 0xB,
  VAR_STACK = 0xC,
  VAR_ANIMATION = 0xD,
  VAR_PRE_ANIMATION = 0xE,
  VAR_THREAD = 0xF,
  VAR_NOTIFY_THREAD = 0x10,
  VAR_TIME_THREAD = 0x11,
  VAR_CHILD_THREAD = 0x12,
  VAR_OBJECT = 0x13,
  VAR_DEAD_ENTITY = 0x14,
  VAR_ENTITY = 0x15,
  VAR_ARRAY = 0x16,
  VAR_DEAD_THREAD = 0x17,
  VAR_COUNT = 0x18,
  VAR_FREE = 0x18,
  VAR_THREAD_LIST = 0x19,
  VAR_ENDON_LIST = 0x1A,
  VAR_TOTAL_COUNT = 0x1B,
};

/* 15 */
enum $AB2AACC5ADBC17A6C1FC43AE2F59751E
{
  FIRST_OBJECT = 0xF,
  FIRST_CLEARABLE_OBJECT = 0x13,
  LAST_NONENTITY_OBJECT = 0x13,
  FIRST_ENTITY_OBJECT = 0x15,
  FIRST_NONFIELD_OBJECT = 0x16,
  FIRST_DEAD_OBJECT = 0x17,
};

/* 16 */
enum PhysWorld
{
  PHYS_WORLD_FIRST_CLIENT_WORLD = 0x0,
  PHYS_WORLD_DYNENT = 0x0,
  PHYS_WORLD_FX = 0x1,
  PHYS_WORLD_RAGDOLL = 0x2,
  PHYS_WORLD_LAST_CLIENT_WORLD = 0x2,
  PHYS_WORLD_FIRST_SERVER_WORLD = 0x3,
  PHYS_WORLD_VEHICLE = 0x3,
  PHYS_WORLD_WEAPON_AND_SCRIPT = 0x4,
  PHYS_WORLD_LAST_SERVER_WORLD = 0x4,
  PHYS_WORLD_COUNT = 0x5,
};

/* 17 */
enum mantleAnim_t
{
  MANTLE_ROOT = 0x0,
  MANTLE_64_UP = 0x1,
  MANTLE_56_UP = 0x2,
  MANTLE_48_UP = 0x3,
  MANTLE_40_UP = 0x4,
  MANTLE_32_UP = 0x5,
  MANTLE_24_UP = 0x6,
  MANTLE_16_UP = 0x7,
  MANTLE_64_OVER = 0x8,
  MANTLE_56_OVER = 0x9,
  MANTLE_48_OVER = 0xA,
  MANTLE_40_OVER = 0xB,
  MANTLE_32_OVER = 0xC,
  MANTLE_24_OVER = 0xD,
  MANTLE_16_OVER = 0xE,
  MANTLE_ANIM_COUNT = 0xF,
  MANTLE_UP_FIRST = 0x1,
  MANTLE_UP_LAST = 0x7,
  MANTLE_UP_COUNT = 0x7,
  MANTLE_OVER_FIRST = 0x8,
  MANTLE_OVER_LAST = 0xE,
  MANTLE_OVER_COUNT = 0x7,
};

/* 18 */
enum $C9D24B6BFC71FE7032A1A887CEF45E14
{
  PHYS_JOINT_ID_NULL = 0x0,
};

/* 19 */
enum PlayerHandIndex
{
  WEAPON_HAND_RIGHT = 0x0,
  WEAPON_HAND_LEFT = 0x1,
  NUM_WEAPON_HANDS = 0x2,
  WEAPON_HAND_DEFAULT = 0x0,
};

/* 20 */
enum StatsGroup
{
  STATSGROUP_RANKED = 0x0,
  STATSGROUP_PRIVATE = 0x1,
  STATSGROUP_COOP = 0x2,
  STATSGROUP_COMMON = 0x3,
  STATSGROUP_COUNT = 0x4,
  STATSGROUP_IGNORE = 0x5,
};

/* 21 */
enum bdHTTPContentType
{
  BD_CONTENT_URL_ENCODED = 0x0,
  BD_CONTENT_JSON = 0x1,
};

/* 22 */
enum weaponstate_t
{
  WEAPON_READY = 0x0,
  WEAPON_RAISING = 0x1,
  WEAPON_RAISING_ALTSWITCH = 0x2,
  WEAPON_DROPPING = 0x3,
  WEAPON_DROPPING_QUICK = 0x4,
  WEAPON_DROPPING_ALT = 0x5,
  WEAPON_FIRING = 0x6,
  WEAPON_RECHAMBERING = 0x7,
  WEAPON_RELOADING = 0x8,
  WEAPON_RELOADING_INTERUPT = 0x9,
  WEAPON_RELOAD_START = 0xA,
  WEAPON_RELOAD_START_INTERUPT = 0xB,
  WEAPON_RELOAD_END = 0xC,
  WEAPON_MELEE_WAIT_FOR_RESULT = 0xD,
  WEAPON_MELEE_FIRE = 0xE,
  WEAPON_MELEE_END = 0xF,
  WEAPON_OFFHAND_INIT = 0x10,
  WEAPON_OFFHAND_PREPARE = 0x11,
  WEAPON_OFFHAND_HOLD = 0x12,
  WEAPON_OFFHAND_HOLD_PRIMED = 0x13,
  WEAPON_OFFHAND_FIRE = 0x14,
  WEAPON_OFFHAND_DETONATE = 0x15,
  WEAPON_OFFHAND_END = 0x16,
  WEAPON_DETONATING = 0x17,
  WEAPON_SPRINT_RAISE = 0x18,
  WEAPON_SPRINT_LOOP = 0x19,
  WEAPON_SPRINT_DROP = 0x1A,
  WEAPON_STUNNED_START = 0x1B,
  WEAPON_STUNNED_LOOP = 0x1C,
  WEAPON_STUNNED_END = 0x1D,
  WEAPON_NIGHTVISION_WEAR = 0x1E,
  WEAPON_NIGHTVISION_REMOVE = 0x1F,
  WEAPON_MANTLE_UP = 0x20,
  WEAPON_MANTLE_OVER = 0x21,
  WEAPON_BLAST_IMPACT = 0x22,
  WEAPON_SLIDE_IN = 0x23,
  WEAPON_SLIDE_LOOP = 0x24,
  WEAPON_SLIDE_OUT = 0x25,
  WEAPONSTATES_NUM = 0x26,
};

/* 23 */
enum OffhandSecondaryClass
{
  PLAYER_OFFHAND_SECONDARY_SMOKE = 0x0,
  PLAYER_OFFHAND_SECONDARY_FLASH = 0x1,
  PLAYER_OFFHAND_SECONDARIES_TOTAL = 0x2,
};

/* 24 */
enum GfxSSAOMode
{
  GFX_SSAO_OFF = 0x0,
  GFX_SSAO_LQ = 0x1,
  GFX_SSAO_HQ = 0x2,
  GFX_SSAO_COUNT = 0x3,
};

/* 25 */
enum GfxSSAOMaterialType
{
  GFX_SSAO_MATERIAL_LQ = 0x0,
  GFX_SSAO_MATERIAL_HQ = 0x1,
  GFX_SSAO_MATERIAL_COUNT = 0x2,
};

/* 26 */
enum OffhandClass
{
  OFFHAND_CLASS_NONE = 0x0,
  OFFHAND_CLASS_FRAG_GRENADE = 0x1,
  OFFHAND_CLASS_SMOKE_GRENADE = 0x2,
  OFFHAND_CLASS_FLASH_GRENADE = 0x3,
  OFFHAND_CLASS_THROWINGKNIFE = 0x4,
  OFFHAND_CLASS_OTHER = 0x5,
  OFFHAND_CLASS_COUNT = 0x6,
};

/* 27 */
enum WeapStickinessType
{
  WEAPSTICKINESS_NONE = 0x0,
  WEAPSTICKINESS_ALL = 0x1,
  WEAPSTICKINESS_ALL_ORIENT = 0x2,
  WEAPSTICKINESS_GROUND = 0x3,
  WEAPSTICKINESS_GROUND_WITH_YAW = 0x4,
  WEAPSTICKINESS_KNIFE = 0x5,
  WEAPSTICKINESS_COUNT = 0x6,
};

/* 28 */
enum weapPositionAnimNum_t
{
  WEAPPOS_HIP_TO_ADS = 0x0,
  WEAPPOS_ADS_TO_HIP = 0x1,
  NUM_WEAPPOS_ANIMS = 0x2,
};

/* 29 */
enum ActionSlotType
{
  ACTIONSLOTTYPE_DONOTHING = 0x0,
  ACTIONSLOTTYPE_SPECIFYWEAPON = 0x1,
  ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 0x2,
  ACTIONSLOTTYPE_NIGHTVISION = 0x3,
  ACTIONSLOTTYPECOUNT = 0x4,
};

/* 30 */
enum $385559028E4C08FD81473198E24C4A98
{
  MARK_MODEL_TYPE_WORLD_BRUSH = 0x0,
  MARK_MODEL_TYPE_WORLD_BRUSH_DISPLACED = 0x1,
  MARK_MODEL_TYPE_WORLD_MODEL = 0x2,
  MARK_MODEL_TYPE_ENT_BRUSH = 0x3,
  MARK_MODEL_TYPE_ENT_MODEL = 0x4,
  MARK_MODEL_TYPE_GLASS = 0x5,
};

/* 31 */
enum WeapAccuracyType
{
  WEAP_ACCURACY_AI_VS_AI = 0x0,
  WEAP_ACCURACY_AI_VS_PLAYER = 0x1,
  WEAP_ACCURACY_COUNT = 0x2,
};

/* 32 */
enum $105767423231D0BE4D0C411A950B5558
{
  FX_FLESHTYPE_BODY_NONFATAL = 0x0,
  FX_FLESHTYPE_BODY_FATAL = 0x1,
  FX_FLESHTYPE_HEAD_NONFATAL = 0x2,
  FX_FLESHTYPE_HEAD_FATAL = 0x3,
  FX_FLESHTYPE_ALIEN = 0x4,
  FX_FLESHTYPE_ALIEN_FATAL = 0x5,
  FX_FLESHTYPE_SOFT = 0x6,
  FX_FLESHTYPE_COUNT = 0x7,
};

/* 33 */
enum $3822A0C45CAB1EC6553F4F419D3AC752
{
  MARK_ENTMODEL_MASK_DOBJMODELINDEX = 0x1F,
  MARK_ENTMODEL_MASK_VIEWMODELCLIENT_OFFSET = 0x5,
  MARK_ENTMODEL_MASK_VIEWMODELCLIENT = 0x60,
  MARK_ENTMODEL_MASK_ISVIEWMDL = 0x80,
};

/* 34 */
enum entity_event_t
{
  EV_NONE = 0x0,
  EV_FOLIAGE_SOUND = 0x1,
  EV_STOP_WEAPON_SOUND = 0x2,
  EV_SOUND_ALIAS = 0x3,
  EV_SOUND_ALIAS_AS_MASTER = 0x4,
  EV_STOPSOUNDS = 0x5,
  EV_STANCE_FORCE_STAND = 0x6,
  EV_STANCE_FORCE_CROUCH = 0x7,
  EV_STANCE_FORCE_PRONE = 0x8,
  EV_STANCE_INVALID = 0x9,
  EV_ITEM_PICKUP = 0xA,
  EV_AMMO_PICKUP = 0xB,
  EV_NOAMMO = 0xC,
  EV_EMPTY_OFFHAND_PRIMARY = 0xD,
  EV_EMPTY_OFFHAND_SECONDARY = 0xE,
  EV_OFFHAND_END_NOTIFY = 0xF,
  EV_RESET_ADS = 0x10,
  EV_RELOAD = 0x11,
  EV_RELOAD_FROM_EMPTY = 0x12,
  EV_RELOAD_START = 0x13,
  EV_RELOAD_END = 0x14,
  EV_RELOAD_START_NOTIFY = 0x15,
  EV_RELOAD_ADDAMMO = 0x16,
  EV_RAISE_WEAPON = 0x17,
  EV_FIRST_RAISE_WEAPON = 0x18,
  EV_PUTAWAY_WEAPON = 0x19,
  EV_WEAPON_ALT = 0x1A,
  EV_WEAPON_SWITCH_STARTED = 0x1B,
  EV_WEAPON_SWITCH_STARTED_OFFHAND = 0x1C,
  EV_PULLBACK_WEAPON = 0x1D,
  EV_FIRE_WEAPON_END = 0x1E,
  EV_FIRE_WEAPON = 0x1F,
  EV_FIRE_WEAPON_LASTSHOT = 0x20,
  EV_FIRE_RICOCHET = 0x21,
  EV_RECHAMBER_WEAPON = 0x22,
  EV_EJECT_BRASS = 0x23,
  EV_FIRE_WEAPON_LEFT = 0x24,
  EV_FIRE_WEAPON_LASTSHOT_LEFT = 0x25,
  EV_EJECT_BRASS_LEFT = 0x26,
  EV_HITCLIENT_FIRE_WEAPON = 0x27,
  EV_HITCLIENT_FIRE_WEAPON_LASTSHOT = 0x28,
  EV_HITCLIENT_FIRE_WEAPON_LEFT = 0x29,
  EV_HITCLIENT_FIRE_WEAPON_LASTSHOT_LEFT = 0x2A,
  EV_SV_FIRE_WEAPON = 0x2B,
  EV_SV_FIRE_WEAPON_LASTSHOT = 0x2C,
  EV_SV_FIRE_WEAPON_LEFT = 0x2D,
  EV_SV_FIRE_WEAPON_LASTSHOT_LEFT = 0x2E,
  EV_FIRE_MELEE_SWIPE = 0x2F,
  EV_FIRE_MELEE_STAND = 0x30,
  EV_FIRE_MELEE_CROUCH = 0x31,
  EV_PREP_OFFHAND = 0x32,
  EV_USE_OFFHAND = 0x33,
  EV_SWITCH_OFFHAND = 0x34,
  EV_MELEE_HIT = 0x35,
  EV_MELEE_MISS = 0x36,
  EV_MELEE_BLOOD = 0x37,
  EV_MELEE_BLOOD_STAND = 0x38,
  EV_MELEE_BLOOD_CROUCH = 0x39,
  EV_SV_FIRE_TURRET = 0x3A,
  EV_FIRE_VEH_TURRET = 0x3B,
  EV_FIRE_TURRET = 0x3C,
  EV_FIRE_SENTRY = 0x3D,
  EV_FIRE_QUADBARREL_1 = 0x3E,
  EV_FIRE_QUADBARREL_2 = 0x3F,
  EV_BULLET_HIT = 0x40,
  EV_BULLET_HIT_EXPLODE = 0x41,
  EV_BULLET_HIT_SHIELD = 0x42,
  EV_BULLET_HIT_CLIENT_SMALL = 0x43,
  EV_BULLET_HIT_CLIENT_LARGE = 0x44,
  EV_BULLET_HIT_CLIENT_EXPLODE = 0x45,
  EV_BULLET_HIT_CLIENT_SHIELD = 0x46,
  EV_BULLET_DESTROY_CLIENT_SHIELD = 0x47,
  EV_DROP_CLIENT_SHIELD = 0x48,
  EV_EXPLOSIVE_IMPACT_ON_SHIELD = 0x49,
  EV_EXPLOSIVE_SPLASH_ON_SHIELD = 0x4A,
  EV_GRENADE_BOUNCE = 0x4B,
  EV_GRENADE_STICK = 0x4C,
  EV_GRENADE_REST = 0x4D,
  EV_GRENADE_ROLL = 0x4E,
  EV_GRENADE_EXPLODE = 0x4F,
  EV_GRENADE_PICKUP = 0x50,
  EV_GRENADE_LETGO = 0x51,
  EV_ROCKET_EXPLODE = 0x52,
  EV_TRAIL_DESTROY = 0x53,
  EV_FLASHBANG_EXPLODE = 0x54,
  EV_CUSTOM_EXPLODE = 0x55,
  EV_CHANGE_TO_DUD = 0x56,
  EV_DUD_EXPLODE = 0x57,
  EV_DUD_IMPACT = 0x58,
  EV_TROPHY_EXPLODE = 0x59,
  EV_BULLET = 0x5A,
  EV_PLAY_FX = 0x5B,
  EV_PLAY_FX_ON_TAG = 0x5C,
  EV_STOP_FX_ON_TAG = 0x5D,
  EV_KILL_FX_ON_TAG = 0x5E,
  EV_PLAY_FX_ON_TAG_FOR_CLIENTS = 0x5F,
  EV_PHYS_EXPLOSION_SPHERE = 0x60,
  EV_PHYS_EXPLOSION_CYLINDER = 0x61,
  EV_PHYS_EXPLOSION_JOLT = 0x62,
  EV_RADIUSDAMAGE = 0x63,
  EV_PHYS_JITTER = 0x64,
  EV_EARTHQUAKE = 0x65,
  EV_GRENADE_SUICIDE = 0x66,
  EV_DETONATE = 0x67,
  EV_NIGHTVISION_WEAR = 0x68,
  EV_NIGHTVISION_REMOVE = 0x69,
  EV_MISSILE_REMOTE_BOOST = 0x6A,
  EV_PLAY_RUMBLE_ON_ENT = 0x6B,
  EV_PLAY_RUMBLE_ON_POS = 0x6C,
  EV_PLAY_RUMBLELOOP_ON_ENT = 0x6D,
  EV_PLAY_RUMBLELOOP_ON_POS = 0x6E,
  EV_STOP_RUMBLE = 0x6F,
  EV_STOP_ALL_RUMBLES = 0x70,
  EV_VARIABLE_ZOOM_CHANGE = 0x71,
  EV_OBITUARY = 0x72,
  EV_NO_PRIMARY_GRENADE_HINT = 0x73,
  EV_NO_SECONDARY_GRENADE_HINT = 0x74,
  EV_TARGET_TOO_CLOSE_HINT = 0x75,
  EV_TARGET_NOT_ENOUGH_CLEARANCE_HINT = 0x76,
  EV_LOCKON_REQUIRED_HINT = 0x77,
  EV_VEHICLE_COLLISION = 0x78,
  EV_VEHICLE_SUSPENSION_SOFT = 0x79,
  EV_VEHICLE_SUSPENSION_HARD = 0x7A,
  EV_FOOTSTEP_SPRINT = 0x7B,
  EV_FOOTSTEP_RUN = 0x7C,
  EV_FOOTSTEP_WALK = 0x7D,
  EV_FOOTSTEP_PRONE = 0x7E,
  EV_JUMP = 0x7F,
  EV_LANDING_FIRST = 0x80,
  EV_LANDING_LAST = 0x9E,
  EV_LANDING_PAIN_FIRST = 0x9F,
  EV_LANDING_PAIN_LAST = 0xBD,
  EV_MANTLE = 0xBE,
  EV_SLIDE_START = 0xBF,
  EV_SLIDE_EASE_OUT = 0xC0,
  EV_EXPLODER = 0xC1,
  EV_PHYSICS_IMPACT_SOUND = 0xC2,
  EV_PORTABLE_RADAR_PING = 0xC3,
  EV_MAX_EVENTS = 0xC4,
};

/* 35 */
enum invalid_cmd_hint_t
{
  INVALID_CMD_NO_HINT = 0x0,
  INVALID_CMD_STAND_HINT = 0x1,
  INVALID_CMD_CROUCH_HINT = 0x2,
  INVALID_CMD_PRONE_HINT = 0x3,
};

/* 36 */
enum MeleeHitFlag
{
  MELEE_HITFLAG_USEDKNIFE = 0x1,
  MELEE_HITFLAG_HITSHIELD = 0x2,
  MELEE_HITFLAG_WORLD = 0x4,
  MELEE_HITFLAG_LAST = 0x4,
};

/* 37 */
enum perksEnum
{
  PERK_ACCURACY = 0x0,
  PERK_FASTRELOAD = 0x1,
  PERK_RATEOFFIRE = 0x2,
  PERK_EXTRABREATH = 0x3,
  PERK_LONGERSPRINT = 0x4,
  PERK_DETECTEXPLOSIVE = 0x5,
  PERK_EXPOSEENEMY = 0x6,
  PERK_EXTRAAMMO = 0x7,
  PERK_TWOPRIMARIES = 0x8,
  PERK_ARMORVEST = 0x9,
  PERK_FRAGGRENADE = 0xA,
  PERK_SPECIALGRENADE = 0xB,
  PERK_EXTENDEDMAGS = 0xC,
  PERK_LIGHTWEIGHT = 0xD,
  PERK_MARATHON = 0xE,
  PERK_QUICKDRAW = 0xF,
  PERK_IMPROVEDEXTRABREATH = 0x10,
  PERK_FASTSPRINTRECOVERY = 0x11,
  PERK_EXTENDEDMELEE = 0x12,
  PERK_FASTOFFHAND = 0x13,
  PERK_STALKER = 0x14,
  PERK_HOLDBREATHWHILEADS = 0x15,
  PERK_LONGERRANGE = 0x16,
  PERK_FASTERMELEE = 0x17,
  PERK_REDUCEDSWAY = 0x18,
  PERK_JAMRADAR = 0x19,
  PERK_EXTRABP = 0x1A,
  PERK_GRENADEDEATH = 0x1B,
  PERK_PISTOLDEATH = 0x1C,
  PERK_QUIETMOVE = 0x1D,
  PERK_PARABOLIC = 0x1E,
  PERK_BULLETDMG = 0x1F,
  PERK_SPRINTRELOAD = 0x20,
  PERK_NOT_USED = 0x21,
  PERK_EXPLOSIVEBULLETS = 0x22,
  PERK_SCAVENGER = 0x23,
  PERK_COLDBLOODED = 0x24,
  PERK_BLINDEYE = 0x25,
  PERK_NOPLAYERTARGET = 0x26,
  PERK_HEARTBREAKER = 0x27,
  PERK_SELECTIVEHEARING = 0x28,
  PERK_FASTSNIPE = 0x29,
  PERK_SPYGAME = 0x2A,
  PERK_AUTOMANTLE = 0x2B,
  PERK_QUICKSWAP = 0x2C,
  PERK_LOWPROFILE = 0x2D,
  PERK_HEARTBREAKER_PRO = 0x2E,
  PERK_THROWBACK = 0x2F,
  PERK_RADAR_ISREDBLIP = 0x30,
  PERK_RADAR_ISREDARROW = 0x31,
  PERK_RADAR_ISJUGGERNAUT = 0x32,
  PERK_SILENTKILL = 0x33,
  PERK_NOSCOPEOUTLINE = 0x34,
  PERK_COUNT = 0x35,
  PERK_UNKNOWN = 0x35,
};

/* 38 */
enum $2CD378738FFF7BA185AEA5FB36A4EE56
{
  WEAP_ALT_MODEL0 = 0x0,
  WEAP_ALT_MODEL1 = 0x1,
  WEAP_ALT_MODEL2 = 0x2,
  WEAP_ALT_MODEL3 = 0x3,
  WEAP_ALT_MODEL4 = 0x4,
  WEAP_ALT_MODEL5 = 0x5,
  WEAP_ALT_MODEL6 = 0x6,
  WEAP_ALT_MODEL7 = 0x7,
  WEAP_ALT_MODEL8 = 0x8,
  WEAP_ALT_MODEL9 = 0x9,
  WEAP_ALT_MODEL10 = 0xA,
  WEAP_ALT_MODEL11 = 0xB,
  WEAP_ALT_MODEL12 = 0xC,
  WEAP_ALT_MODEL13 = 0xD,
  WEAP_ALT_MODEL14 = 0xE,
  WEAP_ALT_MODEL15 = 0xF,
  WEAP_ALT_MODEL16 = 0x10,
  WEAP_ALT_MODEL17 = 0x11,
  WEAP_ALT_MODEL18 = 0x12,
  WEAP_ALT_MODEL19 = 0x13,
  WEAP_ALT_MODEL20 = 0x14,
  WEAP_ALT_MODEL21 = 0x15,
  WEAP_ALT_MODEL22 = 0x16,
  WEAP_ALT_MODEL23 = 0x17,
  WEAP_ALT_MODEL24 = 0x18,
  WEAP_ALT_MODEL25 = 0x19,
  WEAP_ALT_MODEL26 = 0x1A,
  WEAP_ALT_MODEL27 = 0x1B,
  WEAP_ALT_MODEL28 = 0x1C,
  WEAP_ALT_MODEL29 = 0x1D,
  WEAP_ALT_MODEL30 = 0x1E,
  WEAP_ALT_MODEL31 = 0x1F,
  WEAP_ALT_MODEL32 = 0x20,
  WEAP_ALT_MODEL33 = 0x21,
  WEAP_ALT_MODEL34 = 0x22,
  WEAP_ALT_MODEL35 = 0x23,
  WEAP_ALT_MODEL36 = 0x24,
  WEAP_ALT_MODEL37 = 0x25,
  WEAP_ALT_MODEL38 = 0x26,
  WEAP_ALT_MODEL39 = 0x27,
  WEAP_ALT_MODEL40 = 0x28,
  WEAP_ALT_MODEL41 = 0x29,
  WEAP_ALT_MODEL42 = 0x2A,
  WEAP_ALT_MODEL43 = 0x2B,
  WEAP_ALT_MODEL44 = 0x2C,
  WEAP_ALT_MODEL45 = 0x2D,
  WEAP_ALT_MODEL46 = 0x2E,
  WEAP_ALT_MODEL47 = 0x2F,
  WEAP_ALT_MODEL48 = 0x30,
  WEAP_ALT_MODEL49 = 0x31,
  WEAP_ALT_MODEL50 = 0x32,
  WEAP_ALT_MODEL51 = 0x33,
  WEAP_ALT_MODEL52 = 0x34,
  WEAP_ALT_MODEL53 = 0x35,
  WEAP_ALT_MODEL54 = 0x36,
  WEAP_ALT_MODEL55 = 0x37,
  WEAP_ALT_MODEL56 = 0x38,
  WEAP_ALT_MODEL57 = 0x39,
  WEAP_ALT_MODEL58 = 0x3A,
  WEAP_ALT_MODEL59 = 0x3B,
  WEAP_ALT_MODEL60 = 0x3C,
  WEAP_ALT_MODEL61 = 0x3D,
  WEAP_ALT_MODEL62 = 0x3E,
  WEAP_ALT_MODEL63 = 0x3F,
  NUM_WEAP_ALTMODELS = 0x40,
};

/* 39 */
enum bdLobbyErrorCode
{
  BD_NO_ERROR = 0x0,
  BD_TOO_MANY_TASKS = 0x1,
  BD_NOT_CONNECTED = 0x2,
  BD_SEND_FAILED = 0x3,
  BD_HANDLE_TASK_FAILED = 0x4,
  BD_START_TASK_FAILED = 0x5,
  BD_RESULT_EXCEEDS_BUFFER_SIZE = 0x64,
  BD_ACCESS_DENIED = 0x65,
  BD_EXCEPTION_IN_DB = 0x66,
  BD_MALFORMED_TASK_HEADER = 0x67,
  BD_INVALID_ROW = 0x68,
  BD_EMPTY_ARG_LIST = 0x69,
  BD_PARAM_PARSE_ERROR = 0x6A,
  BD_PARAM_MISMATCHED_TYPE = 0x6B,
  BD_SERVICE_NOT_AVAILABLE = 0x6C,
  BD_CONNECTION_RESET = 0x6D,
  BD_INVALID_USER_ID = 0x6E,
  BD_LOBBY_PROTOCOL_VERSION_FAILURE = 0x6F,
  BD_LOBBY_INTERNAL_FAILURE = 0x70,
  BD_LOBBY_PROTOCOL_ERROR = 0x71,
  BD_LOBBY_FAILED_TO_DECODE_UTF8 = 0x72,
  BD_LOBBY_ASCII_EXPECTED = 0x73,
  BD_ASYNCHRONOUS_ERROR = 0xC8,
  BD_STREAMING_COMPLETE = 0xC9,
  BD_MEMBER_NO_PROPOSAL = 0x12C,
  BD_TEAMNAME_ALREADY_EXISTS = 0x12D,
  BD_MAX_TEAM_MEMBERSHIPS_LIMITED = 0x12E,
  BD_MAX_TEAM_OWNERSHIPS_LIMITED = 0x12F,
  BD_NOT_A_TEAM_MEMBER = 0x130,
  BD_INVALID_TEAM_ID = 0x131,
  BD_INVALID_TEAM_NAME = 0x132,
  BD_NOT_A_TEAM_OWNER = 0x133,
  BD_NOT_AN_ADMIN_OR_OWNER = 0x134,
  BD_MEMBER_PROPOSAL_EXISTS = 0x135,
  BD_MEMBER_EXISTS = 0x136,
  BD_TEAM_FULL = 0x137,
  BD_VULGAR_TEAM_NAME = 0x138,
  BD_TEAM_USERID_BANNED = 0x139,
  BD_TEAM_EMPTY = 0x13A,
  BD_INVALID_TEAM_PROFILE_QUERY_ID = 0x13B,
  BD_TEAMNAME_TOO_SHORT = 0x13C,
  BD_UNIQUE_PROFILE_DATA_EXISTS_ALREADY = 0x13D,
  BD_INVALID_LEADERBOARD_ID = 0x190,
  BD_INVALID_STATS_SET = 0x191,
  BD_EMPTY_STATS_SET_IGNORED = 0x193,
  BD_NO_DIRECT_ACCESS_TO_ARBITRATED_LBS = 0x194,
  BD_STATS_WRITE_PERMISSION_DENIED = 0x195,
  BD_STATS_WRITE_TYPE_DATA_TYPE_MISMATCH = 0x196,
  BD_NO_STATS_FOR_USER = 0x197,
  BD_INVALID_ACCESS_TO_UNRANKED_LB = 0x198,
  BD_INVALID_EXTERNAL_TITLE_ID = 0x199,
  BD_DIFFERENT_LEADERBOARD_SCHEMAS = 0x19A,
  BD_TOO_MANY_LEADERBOARDS_REQUESTED = 0x19B,
  BD_ENTITLEMENTS_ERROR = 0x19C,
  BD_ENTITLEMENTS_INVALID_TITLEID = 0x19D,
  BD_ENTITLEMENTS_INVALID_LEADERBOARDID = 0x19E,
  BD_ENTITLEMENTS_INVALID_GET_MODE_FOR_TITLE = 0x19F,
  BD_ENTITLEMENTS_URL_CONNECTION_ERROR = 0x1A0,
  BD_ENTITLEMENTS_CONFIG_ERROR = 0x1A1,
  BD_ENTITLEMENTS_NAMED_PARENT_ERROR = 0x1A2,
  BD_ENTITLEMENTS_NAMED_KEY_ERROR = 0x1A3,
  BD_TOO_MANY_ENTITY_IDS_REQUESTED = 0x1A4,
  BD_STATS_READ_FAILED = 0x1A5,
  BD_INVALID_TITLE_ID = 0x1F4,
  BD_MESSAGING_INVALID_MAIL_ID = 0x258,
  BD_SELF_BLOCK_NOT_ALLOWED = 0x259,
  BD_GLOBAL_MESSAGE_ACCESS_DENIED = 0x25A,
  BD_GLOBAL_MESSAGES_USER_LIMIT_EXCEEDED = 0x25B,
  BD_MESSAGING_SENDER_DOES_NOT_EXIST = 0x25C,
  BD_AUTH_NO_ERROR = 0x2BC,
  BD_AUTH_BAD_REQUEST = 0x2BD,
  BD_AUTH_SERVER_CONFIG_ERROR = 0x2BE,
  BD_AUTH_BAD_TITLE_ID = 0x2BF,
  BD_AUTH_BAD_ACCOUNT = 0x2C0,
  BD_AUTH_ILLEGAL_OPERATION = 0x2C1,
  BD_AUTH_INCORRECT_LICENSE_CODE = 0x2C2,
  BD_AUTH_CREATE_USERNAME_EXISTS = 0x2C3,
  BD_AUTH_CREATE_USERNAME_ILLEGAL = 0x2C4,
  BD_AUTH_CREATE_USERNAME_VULGAR = 0x2C5,
  BD_AUTH_CREATE_MAX_ACC_EXCEEDED = 0x2C6,
  BD_AUTH_MIGRATE_NOT_SUPPORTED = 0x2C7,
  BD_AUTH_TITLE_DISABLED = 0x2C8,
  BD_AUTH_ACCOUNT_EXPIRED = 0x2C9,
  BD_AUTH_ACCOUNT_LOCKED = 0x2CA,
  BD_AUTH_UNKNOWN_ERROR = 0x2CB,
  BD_AUTH_INCORRECT_PASSWORD = 0x2CC,
  BD_AUTH_IP_NOT_IN_ALLOWED_RANGE = 0x2CD,
  BD_AUTH_WII_TOKEN_VERIFICATION_FAILED = 0x2CE,
  BD_AUTH_WII_AUTHENTICATION_FAILED = 0x2CF,
  BD_AUTH_IP_KEY_LIMIT_REACHED = 0x2D0,
  BD_AUTH_INVALID_GSPID = 0x2D1,
  BD_AUTH_INVALID_IP_RANGE_ID = 0x2D2,
  BD_AUTH_3DS_TOKEN_VERIFICATION_FAILED = 0x2D1,
  BD_AUTH_3DS_AUTHENTICATION_FAILED = 0x2D2,
  BD_AUTH_STEAM_APP_ID_MISMATCH = 0x2D3,
  BD_AUTH_ABACCOUNTS_APP_ID_MISMATCH = 0x2D4,
  BD_AUTH_CODO_USERNAME_NOT_SET = 0x2D5,
  BD_AUTH_WIIU_TOKEN_VERIFICATION_FAILED = 0x2D6,
  BD_AUTH_WIIU_AUTHENTICATION_FAILED = 0x2D7,
  BD_AUTH_CODO_USERNAME_NOT_BASE64 = 0x2D8,
  BD_AUTH_CODO_USERNAME_NOT_UTF8 = 0x2D9,
  BD_AUTH_TENCENT_TICKET_EXPIRED = 0x2DA,
  BD_AUTH_PS3_SERVICE_ID_MISMATCH = 0x2DB,
  BD_AUTH_CODOID_NOT_WHITELISTED = 0x2DC,
  BD_AUTH_PLATFORM_TOKEN_ERROR = 0x2DD,
  BD_AUTH_JSON_FORMAT_ERROR = 0x2DE,
  BD_AUTH_REPLY_CONTENT_ERROR = 0x2DF,
  BD_AUTH_THIRD_PARTY_TOKEN_EXPIRED = 0x2E0,
  BD_AUTH_CONTINUING = 0x2E1,
  BD_AUTH_PLATFORM_DEVICE_ID_ERROR = 0x2E4,
  BD_NO_PROFILE_INFO_EXISTS = 0x320,
  BD_FRIENDSHIP_NOT_REQUSTED = 0x384,
  BD_NOT_A_FRIEND = 0x385,
  BD_SELF_FRIENDSHIP_NOT_ALLOWED = 0x387,
  BD_FRIENDSHIP_EXISTS = 0x388,
  BD_PENDING_FRIENDSHIP_EXISTS = 0x389,
  BD_USERID_BANNED = 0x38A,
  BD_FRIENDS_FULL = 0x38C,
  BD_FRIENDS_NO_RICH_PRESENCE = 0x38D,
  BD_RICH_PRESENCE_TOO_LARGE = 0x38E,
  BD_NO_FILE = 0x3E8,
  BD_PERMISSION_DENIED = 0x3E9,
  BD_FILESIZE_LIMIT_EXCEEDED = 0x3EA,
  BD_FILENAME_MAX_LENGTH_EXCEEDED = 0x3EB,
  BD_EXTERNAL_STORAGE_SERVICE_ERROR = 0x3EC,
  BD_CHANNEL_DOES_NOT_EXIST = 0x44D,
  BD_CHANNEL_ALREADY_SUBSCRIBED = 0x44E,
  BD_CHANNEL_NOT_SUBSCRIBED = 0x44F,
  BD_CHANNEL_FULL = 0x450,
  BD_CHANNEL_SUBSCRIPTIONS_FULL = 0x451,
  BD_CHANNEL_NO_SELF_WHISPERING = 0x452,
  BD_CHANNEL_ADMIN_REQUIRED = 0x453,
  BD_CHANNEL_TARGET_NOT_SUBSCRIBED = 0x454,
  BD_CHANNEL_REQUIRES_PASSWORD = 0x455,
  BD_CHANNEL_TARGET_IS_SELF = 0x456,
  BD_CHANNEL_PUBLIC_BAN_NOT_ALLOWED = 0x457,
  BD_CHANNEL_USER_BANNED = 0x458,
  BD_CHANNEL_PUBLIC_PASSWORD_NOT_ALLOWED = 0x459,
  BD_CHANNEL_PUBLIC_KICK_NOT_ALLOWED = 0x45A,
  BD_CHANNEL_MUTED = 0x45B,
  BD_EVENT_DESC_TRUNCATED = 0x4B0,
  BD_CONTENT_UNLOCK_UNKNOWN_ERROR = 0x514,
  BD_UNLOCK_KEY_INVALID = 0x515,
  BD_UNLOCK_KEY_ALREADY_USED_UP = 0x516,
  BD_SHARED_UNLOCK_LIMIT_REACHED = 0x517,
  BD_DIFFERENT_HARDWARE_ID = 0x518,
  BD_INVALID_CONTENT_OWNER = 0x519,
  BD_CONTENT_UNLOCK_INVALID_USER = 0x51A,
  BD_CONTENT_UNLOCK_INVALID_CATEGORY = 0x51B,
  BD_KEY_ARCHIVE_INVALID_WRITE_TYPE = 0x5DC,
  BD_KEY_ARCHIVE_EXCEEDED_MAX_IDS_PER_REQUEST = 0x5DD,
  BD_BANDWIDTH_TEST_TRY_AGAIN = 0x712,
  BD_BANDWIDTH_TEST_STILL_IN_PROGRESS = 0x713,
  BD_BANDWIDTH_TEST_NOT_PROGRESS = 0x714,
  BD_BANDWIDTH_TEST_SOCKET_ERROR = 0x715,
  BD_INVALID_SESSION_NONCE = 0x76D,
  BD_ARBITRATION_FAILURE = 0x76F,
  BD_ARBITRATION_USER_NOT_REGISTERED = 0x771,
  BD_ARBITRATION_NOT_CONFIGURED = 0x772,
  BD_CONTENTSTREAMING_FILE_NOT_AVAILABLE = 0x7D0,
  BD_CONTENTSTREAMING_STORAGE_SPACE_EXCEEDED = 0x7D1,
  BD_CONTENTSTREAMING_NUM_FILES_EXCEEDED = 0x7D2,
  BD_CONTENTSTREAMING_UPLOAD_BANDWIDTH_EXCEEDED = 0x7D3,
  BD_CONTENTSTREAMING_FILENAME_MAX_LENGTH_EXCEEDED = 0x7D4,
  BD_CONTENTSTREAMING_MAX_THUMB_DATA_SIZE_EXCEEDED = 0x7D5,
  BD_CONTENTSTREAMING_DOWNLOAD_BANDWIDTH_EXCEEDED = 0x7D6,
  BD_CONTENTSTREAMING_NOT_ENOUGH_DOWNLOAD_BUFFER_SPACE = 0x7D7,
  BD_CONTENTSTREAMING_SERVER_NOT_CONFIGURED = 0x7D8,
  BD_CONTENTSTREAMING_INVALID_APPLE_RECEIPT = 0x7DA,
  BD_CONTENTSTREAMING_APPLE_STORE_NOT_AVAILABLE = 0x7DB,
  BD_CONTENTSTREAMING_APPLE_RECEIPT_FILENAME_MISMATCH = 0x7DC,
  BD_CONTENTSTREAMING_HTTP_ERROR = 0x7E4,
  BD_CONTENTSTREAMING_FAILED_TO_START_HTTP = 0x7E5,
  BD_CONTENTSTREAMING_LOCALE_INVALID = 0x7E6,
  BD_CONTENTSTREAMING_LOCALE_MISSING = 0x7E7,
  BD_VOTERANK_ERROR_EMPTY_RATING_SUBMISSION = 0x7EE,
  BD_VOTERANK_ERROR_MAX_VOTES_EXCEEDED = 0x7EF,
  BD_VOTERANK_ERROR_INVALID_RATING = 0x7F0,
  BD_MAX_NUM_TAGS_EXCEEDED = 0x82A,
  BD_TAGGED_COLLECTION_DOES_NOT_EXIST = 0x82B,
  BD_EMPTY_TAG_ARRAY = 0x82C,
  BD_INVALID_QUERY_ID = 0x834,
  BD_NO_ENTRY_TO_UPDATE = 0x835,
  BD_SESSION_INVITE_EXISTS = 0x836,
  BD_INVALID_SESSION_ID = 0x837,
  BD_ATTACHMENT_TOO_LARGE = 0x838,
  BD_INVALID_GROUP_ID = 0xAF0,
  BD_MAIL_INVALID_MAIL_ID_ERROR = 0xB55,
  BD_UCD_SERVICE_ERROR = 0xC80,
  BD_UCD_SERVICE_DISABLED = 0xC81,
  BD_UCD_UNINTIALIZED_ERROR = 0xC82,
  BD_UCD_ACCOUNT_ALREADY_REGISTERED = 0xC83,
  BD_UCD_ACCOUNT_NOT_REGISTERED = 0xC84,
  BD_UCD_AUTH_ATTEMPT_FAILED = 0xC85,
  BD_UCD_ACCOUNT_LINKING_ERROR = 0xC86,
  BD_UCD_ENCRYPTION_ERROR = 0xC87,
  BD_UCD_ACCOUNT_DATA_INVALID = 0xC88,
  BD_UCD_ACCOUNT_DATA_INVALID_FIRSTNAME = 0xC89,
  BD_UCD_ACCOUNT_DATA_INVALID_LASTNAME = 0xC8A,
  BD_UCD_ACCOUNT_DATA_INVALID_DOB = 0xC8B,
  BD_UCD_ACCOUNT_DATA_INVALID_EMAIL = 0xC8C,
  BD_UCD_ACCOUNT_DATA_INVALID_COUNTRY = 0xC8D,
  BD_UCD_ACCOUNT_DATA_INVALID_POSTCODE = 0xC8E,
  BD_UCD_ACCOUNT_DATA_INVALID_PASSWORD = 0xC8F,
  BD_UCD_ACCOUNT_NAME_ALREADY_RESISTERED = 0xC94,
  BD_UCD_ACCOUNT_EMAIL_ALREADY_RESISTERED = 0xC95,
  BD_UCD_GUEST_ACCOUNT_AUTH_CONFLICT = 0xC96,
  BD_TWITCH_SERVICE_ERROR = 0xC1D,
  BD_TWITCH_ACCOUNT_ALREADY_LINKED = 0xC1E,
  BD_TWITCH_NO_LINKED_ACCOUNT = 0xC1F,
  BD_YOUTUBE_SERVICE_ERROR = 0xCE5,
  BD_YOUTUBE_SERVICE_COMMUNICATION_ERROR = 0xCE6,
  BD_YOUTUBE_USER_DENIED_AUTHORIZATION = 0xCE7,
  BD_YOUTUBE_AUTH_MAX_TIME_EXCEEDED = 0xCE8,
  BD_YOUTUBE_USER_UNAUTHORIZED = 0xCE9,
  BD_YOUTUBE_UPLOAD_MAX_TIME_EXCEEDED = 0xCEA,
  BD_YOUTUBE_DUPLICATE_UPLOAD = 0xCEB,
  BD_YOUTUBE_FAILED_UPLOAD = 0xCEC,
  BD_YOUTUBE_ACCOUNT_ALREADY_REGISTERED = 0xCED,
  BD_YOUTUBE_ACCOUNT_NOT_REGISTERED = 0xCEE,
  BD_YOUTUBE_CONTENT_SERVER_ERROR = 0xCEF,
  BD_YOUTUBE_UPLOAD_DOES_NOT_EXIST = 0xCF0,
  BD_YOUTUBE_NO_LINKED_ACCOUNT = 0xCF1,
  BD_YOUTUBE_DEVELOPER_TAGS_INVALID = 0xCF2,
  BD_TWITTER_AUTH_ATTEMPT_FAILED = 0xDAD,
  BD_TWITTER_AUTH_TOKEN_INVALID = 0xDAE,
  BD_TWITTER_UPDATE_LIMIT_REACHED = 0xDAF,
  BD_TWITTER_UNAVAILABLE = 0xDB0,
  BD_TWITTER_ERROR = 0xDB1,
  BD_TWITTER_TIMED_OUT = 0xDB2,
  BD_TWITTER_DISABLED_FOR_USER = 0xDB3,
  BD_TWITTER_ACCOUNT_AMBIGUOUS = 0xDB4,
  BD_TWITTER_MAXIMUM_ACCOUNTS_REACHED = 0xDB5,
  BD_TWITTER_ACCOUNT_NOT_REGISTERED = 0xDB6,
  BD_TWITTER_DUPLICATE_STATUS = 0xDB7,
  BD_TWITTER_ACCOUNT_ALREADY_REGISTERED = 0xE1C,
  BD_FACEBOOK_AUTH_ATTEMPT_FAILED = 0xE11,
  BD_FACEBOOK_AUTH_TOKEN_INVALID = 0xE12,
  BD_FACEBOOK_PHOTO_DOES_NOT_EXIST = 0xE13,
  BD_FACEBOOK_PHOTO_INVALID = 0xE14,
  BD_FACEBOOK_PHOTO_ALBUM_FULL = 0xE15,
  BD_FACEBOOK_UNAVAILABLE = 0xE16,
  BD_FACEBOOK_ERROR = 0xE17,
  BD_FACEBOOK_TIMED_OUT = 0xE18,
  BD_FACEBOOK_DISABLED_FOR_USER = 0xE19,
  BD_FACEBOOK_ACCOUNT_AMBIGUOUS = 0xE1A,
  BD_FACEBOOK_MAXIMUM_ACCOUNTS_REACHED = 0xE1B,
  BD_FACEBOOK_INVALID_NUM_PICTURES_REQUESTED = 0xE1C,
  BD_FACEBOOK_VIDEO_DOES_NOT_EXIST = 0xE1D,
  BD_FACEBOOK_ACCOUNT_ALREADY_REGISTERED = 0xE1E,
  BD_APNS_INVALID_PAYLOAD = 0xE74,
  BD_APNS_INVALID_TOKEN_LENGTH_ERROR = 0xE76,
  BD_MAX_CONSOLEID_LENGTH_EXCEEDED = 0xEE1,
  BD_MAX_WHITELIST_LENGTH_EXCEEDED = 0xEE2,
  BD_USERGROUP_NAME_ALREADY_EXISTS = 0x1770,
  BD_INVALID_USERGROUP_ID = 0x1771,
  BD_USER_ALREADY_IN_USERGROUP = 0x1772,
  BD_USER_NOT_IN_USERGROUP = 0x1773,
  BD_INVALID_USERGROUP_MEMBER_TYPE = 0x1774,
  BD_TOO_MANY_MEMBERS_REQUESTED = 0x1775,
  BD_USERGROUP_NAME_TOO_SHORT = 0x1776,
  BD_RICH_PRESENCE_DATA_TOO_LARGE = 0x1A90,
  BD_RICH_PRESENCE_TOO_MANY_USERS = 0x1A91,
  BD_PRESENCE_DATA_TOO_LARGE = 0x283C,
  BD_PRESENCE_TOO_MANY_USERS = 0x283D,
  BD_USER_LOGGED_IN_OTHER_TITLE = 0x283E,
  BD_USER_NOT_LOGGED_IN = 0x283F,
  BD_SUBSCRIPTION_TOO_MANY_USERS = 0x1B58,
  BD_SUBSCRIPTION_TICKET_PARSE_ERROR = 0x1B59,
  BD_CODO_ID_INVALID_DATA = 0x1BBC,
  BD_INVALID_MESSAGE_FORMAT = 0x1BBD,
  BD_TLOG_TOO_MANY_MESSAGES = 0x1BBE,
  BD_CODO_ID_NOT_IN_WHITELIST = 0x1BBF,
  BD_TLOG_MESSAGE_TRANSFORMATION_ERROR = 0x1BC0,
  BD_REWARDS_NOT_ENABLED = 0x1BC1,
  BD_MARKETPLACE_ERROR = 0x1F40,
  BD_MARKETPLACE_RESOURCE_NOT_FOUND = 0x1F41,
  BD_MARKETPLACE_INVALID_CURRENCY = 0x1F42,
  BD_MARKETPLACE_INVALID_PARAMETER = 0x1F43,
  BD_MARKETPLACE_RESOURCE_CONFLICT = 0x1F44,
  BD_MARKETPLACE_STORAGE_ERROR = 0x1F45,
  BD_MARKETPLACE_INTEGRITY_ERROR = 0x1F46,
  BD_MARKETPLACE_INSUFFICIENT_FUNDS_ERROR = 0x1F47,
  BD_MARKETPLACE_MMP_SERVICE_ERROR = 0x1F48,
  BD_MARKETPLACE_PRECONDITION_REQUIRED = 0x1F49,
  BD_MARKETPLACE_ITEM_MULTIPLE_PURCHASE_ERROR = 0x1F4A,
  BD_MARKETPLACE_MISSING_REQUIRED_ENTITLEMENT = 0x1F4B,
  BD_MARKETPLACE_VALIDATION_ERROR = 0x1F4C,
  BD_MARKETPLACE_TENCENT_PAYMENT_ERROR = 0x1F4D,
  BD_MARKETPLACE_SKU_NOT_COUPON_ENABLED_ERROR = 0x1F4E,
  BD_LEAGUE_INVALID_TEAM_SIZE = 0x1FA4,
  BD_LEAGUE_INVALID_TEAM = 0x1FA5,
  BD_LEAGUE_INVALID_SUBDIVISION = 0x1FA6,
  BD_LEAGUE_INVALID_LEAGUE = 0x1FA7,
  BD_LEAGUE_TOO_MANY_RESULTS_REQUESTED = 0x1FA8,
  BD_LEAGUE_METADATA_TOO_LARGE = 0x1FA9,
  BD_LEAGUE_TEAM_ICON_TOO_LARGE = 0x1FAA,
  BD_LEAGUE_TEAM_NAME_TOO_LONG = 0x1FAB,
  BD_LEAGUE_ARRAY_SIZE_MISMATCH = 0x1FAC,
  BD_LEAGUE_SUBDIVISION_MISMATCH = 0x2008,
  BD_LEAGUE_INVALID_WRITE_TYPE = 0x2009,
  BD_LEAGUE_INVALID_STATS_DATA = 0x200A,
  BD_LEAGUE_SUBDIVISION_UNRANKED = 0x200B,
  BD_LEAGUE_CROSS_TEAM_STATS_WRITE_PREVENTED = 0x200C,
  BD_LEAGUE_INVALID_STATS_SEASON = 0x200D,
  BD_COMMERCE_ERROR = 0x206C,
  BD_COMMERCE_RESOURCE_NOT_FOUND = 0x206D,
  BD_COMMERCE_STORAGE_INVALID_PARAMETER = 0x206E,
  BD_COMMERCE_APPLICATION_INVALID_PARAMETER = 0x206F,
  BD_COMMERCE_RESOURCE_CONFLICT = 0x2070,
  BD_COMMERCE_STORAGE_ERROR = 0x2071,
  BD_COMMERCE_INTEGRITY_ERROR = 0x2072,
  BD_COMMERCE_MMP_SERVICE_ERROR = 0x2073,
  BD_COMMERCE_PERMISSION_DENIED = 0x2074,
  BD_COMMERCE_INSUFFICIENT_FUNDS_ERROR = 0x2075,
  BD_COMMERCE_UNKNOWN_CURRENCY = 0x2076,
  BD_COMMERCE_INVALID_RECEIPT = 0x2077,
  BD_COMMERCE_RECEIPT_USED = 0x2078,
  BD_COMMERCE_TRANSACTION_ALREADY_APPLIED = 0x2079,
  BD_COMMERCE_INVALID_CURRENCY_TYPE = 0x207A,
  BD_CONNECTION_COUNTER_ERROR = 0x20D0,
  BD_LINKED_ACCOUNTS_INVALID_CONTEXT = 0x2198,
  BD_LINKED_ACCOUNTS_INVALID_PLATFORM = 0x2199,
  BD_LINKED_ACCOUNTS_LINKED_ACCOUNTS_FETCH_ERROR = 0x219A,
  BD_LINKED_ACCOUNTS_INVALID_ACCOUNT = 0x219B,
  BD_GMSG_INVALID_CATEGORY_ID = 0x27D8,
  BD_GMSG_CATEGORY_MEMBERSHIPS_LIMIT = 0x27D9,
  BD_GMSG_NONMEMBER_POST_DISALLOWED = 0x27DA,
  BD_GMSG_CATEGORY_DISALLOWS_CLIENT_TYPE = 0x27DB,
  BD_GMSG_PAYLOAD_TOO_BIG = 0x27DC,
  BD_GMSG_MEMBER_POST_DISALLOWED = 0x27DD,
  BD_GMSG_OVERLOADED = 0x27DE,
  BD_GMSG_USER_PERCATEGORY_POST_RATE_EXCEEDED = 0x27DF,
  BD_GMSG_USER_GLOBAL_POST_RATE_EXCEEDED = 0x27E0,
  BD_GMSG_GROUP_POST_RATE_EXCEEDED = 0x27E1,
  BD_MAX_ERROR_CODE = 0x27E2,
};

/* 40 */
enum $5C3C349FFE8C24683E346A7E3DAFE1C5
{
  CONTROL_ANGLES_BACK_LOW = 0x0,
  CONTROL_ANGLES_BACK_MID = 0x1,
  CONTROL_ANGLES_BACK_UP = 0x2,
  CONTROL_ANGLES_PELVIS = 0x3,
  CONTROL_ANGLES_COUNT = 0x4,
};

/* 41 */
enum $D648F0D5685A2A2C75F3C792A46CD522
{
  DOBJ_MAX_PARTS = 0xC0,
  DOBJ_MAX_PART_BITS = 0x6,
  MAX_LODS = 0x6,
};

/* 42 */
enum GfxLit2DShaderMode
{
  GFXLIT2DSHADERMODE_BASIC = 0x0,
  GFXLIT2DSHADERMODE_BLOOD = 0x1,
  GFXLIT2DSHADERMODE_COUNT = 0x2,
};

/* 43 */
enum $48CB5FF48600BABB00A6CDA6817AC61F
{
  FS_LOOK_IN_MAIN = 0x1,
  FS_LOOK_IN_DEV = 0x2,
  FS_LOOK_IN_TEMP = 0x4,
  FS_LOOK_IN_RAW = 0x8,
  FS_LOOK_IN_RAWSHARED = 0x10,
  FS_LOOK_IN_DEVRAW = 0x20,
  FS_LOOK_IN_ALL = 0x3F,
};

/* 44 */
enum hudelem_update_t
{
  HUDELEM_UPDATE_ARCHIVAL = 0x1,
  HUDELEM_UPDATE_CURRENT = 0x2,
  HUDELEM_UPDATE_ARCHIVAL_AND_CURRENT = 0x3,
};

/* 45 */
enum XSurfTile_e
{
  XSURF_TILE_NONE = 0x0,
  XSURF_TILE_ACCIDENTAL = 0x1,
  XSURF_TILE_INTENTIONAL = 0x2,
  XSURF_TILE_COUNT = 0x3,
};

/* 46 */
enum aistateEnum_t
{
  AISTATE_COMBAT = 0x0,
  MAX_AISTATES = 0x1,
};

/* 47 */
enum statIndex_t
{
  STAT_HEALTH = 0x0,
  STAT_DEAD_YAW = 0x1,
  STAT_MAX_HEALTH = 0x2,
  STAT_SPAWN_COUNT = 0x3,
  MAX_STATS = 0x4,
};

/* 48 */
enum hintType_t
{
  HINT_NONE = 0x0,
  HINT_NOICON = 0x1,
  HINT_ACTIVATE = 0x2,
  HINT_HEALTH = 0x3,
  HINT_FRIENDLY = 0x4,
  HINT_WEAPON = 0x5,
  HINT_NUM_HINTS = 0x6,
};

/* 49 */
enum $EEFB6B9224E02F3F92C050B1A347CB32
{
  IMGF_MIPMAPS = 0x1,
  IMGF_ALLOWPICMIP = 0x2,
  IMGF_CHARACTERMIP = 0x4,
  IMGF_LIGHTMAP = 0x8,
  IMGF_CLAMP_S = 0x10,
  IMGF_CLAMP_T = 0x20,
  IMGF_HEIGHTMAP = 0x40,
  IMGF_DELAYLOAD = 0x80,
  IMGF_NOOPT = 0x100,
  IMGF_SCREENDEPTH = 0x200,
  IMGF_TEXTURENAME = 0x400,
  IMGF_SHEET_KEEP_FLAGS = 0x1,
};

/* 50 */
enum meansOfDeath_t
{
  MOD_UNKNOWN = 0x0,
  MOD_PISTOL_BULLET = 0x1,
  MOD_RIFLE_BULLET = 0x2,
  MOD_EXPLOSIVE_BULLET = 0x3,
  MOD_GRENADE = 0x4,
  MOD_GRENADE_SPLASH = 0x5,
  MOD_PROJECTILE = 0x6,
  MOD_PROJECTILE_SPLASH = 0x7,
  MOD_MELEE = 0x8,
  MOD_HEAD_SHOT = 0x9,
  MOD_MELEE_DOG = 0xA,
  MOD_MELEE_ALIEN = 0xB,
  MOD_CRUSH = 0xC,
  MOD_FALLING = 0xD,
  MOD_SUICIDE = 0xE,
  MOD_TRIGGER_HURT = 0xF,
  MOD_EXPLOSIVE = 0x10,
  MOD_IMPACT = 0x11,
  MOD_NUM = 0x12,
};

/* 51 */
enum bdConnectionStore::bdConnectionStoreShutdownType
{
  BD_CONNECTION_STORE_SHUTDOWN_ELEGANT = 0x0,
  BD_CONNECTION_STORE_SHUTDOWN_IMMEDIATE = 0x1,
};

/* 52 */
enum bdFacebookFriendSort
{
  BD_FBSORT_UNSORTED = 0x0,
  BD_FBSORT_ACCOUNT_NAME_ASC = 0x1,
  BD_FBSORT_ACCOUNT_NAME_DESC = 0x2,
};

/* 53 */
enum entityType_t
{
  ET_GENERAL = 0x0,
  ET_PLAYER = 0x1,
  ET_PLAYER_CORPSE = 0x2,
  ET_ITEM = 0x3,
  ET_MISSILE = 0x4,
  ET_INVISIBLE = 0x5,
  ET_SCRIPTMOVER = 0x6,
  ET_SOUND_BLEND = 0x7,
  ET_FX = 0x8,
  ET_LOOP_FX = 0x9,
  ET_PRIMARY_LIGHT = 0xA,
  ET_TURRET = 0xB,
  ET_HELICOPTER = 0xC,
  ET_PLANE = 0xD,
  ET_VEHICLE = 0xE,
  ET_VEHICLE_COLLMAP = 0xF,
  ET_VEHICLE_CORPSE = 0x10,
  ET_VEHICLE_SPAWNER = 0x11,
  ET_AGENT = 0x12,
  ET_AGENT_CORPSE = 0x13,
  ET_EVENTS = 0x14,
};

/* 54 */
enum $281899ECFC445037A6FDF23043927723
{
  qfalse = 0x0,
  qtrue = 0x1,
};

/* 55 */
enum visionSetMode_t
{
  VISIONSET_NORMAL = 0x0,
  VISIONSET_NIGHT = 0x1,
  VISIONSET_MISSILECAM = 0x2,
  VISIONSET_THERMAL = 0x3,
  VISIONSET_PAIN = 0x4,
  VISIONSET_3RD_PERSON = 0x5,
  VISIONSET_POST_APPLY = 0x6,
  VISIONSETCOUNT = 0x7,
};

/* 56 */
enum $9E6B579D8E55576C4BF34EDFC9787732
{
  COLORBLIND_DISABLED = 0x0,
  COLORBLIND_ENABLED = 0x1,
  COLORBLIND_OPTION_COUNT = 0x2,
};

/* 57 */
enum AI_SHOW_NODES_ENUM
{
  AI_SHOW_NODES_ENUM_OFF = 0x0,
  AI_SHOW_NODES_ENUM_LINKS = 0x1,
  AI_SHOW_NODES_ENUM_LINKS_INDEX = 0x2,
  AI_SHOW_NODES_ENUM_LINKS_ALL = 0x3,
  AI_SHOW_NODES_ENUM_LINKS_ALL_INDEX = 0x4,
  AI_SHOW_NODES_ENUM_EXP_RINGS = 0x5,
  AI_SHOW_NODES_ENUM_EXP_VALUES = 0x6,
  AI_SHOW_NODES_ENUM_TRAFFIC = 0x7,
  AI_SHOW_NODES_ENUM_ENTRANCES = 0x8,
  AI_SHOW_NODES_ENUM_ENTRANCES_AND_PATHS = 0x9,
  AI_SHOW_NODES_ENUM_ZONES = 0xA,
  AI_SHOW_NODES_ENUM_ZONES_ISLANDS = 0xB,
  AI_SHOW_NODES_ENUM_ZONES_PREDICT = 0xC,
  AI_SHOW_NODES_ENUM_JUMP_LINKS = 0xD,
  AI_SHOW_NODES_ENUM_GLASS_LINKS = 0xE,
  AI_SHOW_NODES_ENUM_NULL = 0xF,
  NUM_AI_SHOW_NODES_ENUM = 0x10,
  AI_SHOW_NODES_ENUM_ALL = 0x3,
  AI_SHOW_NODES_ENUM_EXTRA_DATA_START = 0x5,
  AI_SHOW_NODES_ENUM_EXTRA_DATA_END = 0x7,
};

/* 58 */
enum GfxLightType
{
  GFX_LIGHT_TYPE_NONE = 0x0,
  GFX_LIGHT_TYPE_DIR = 0x1,
  GFX_LIGHT_TYPE_SPOT = 0x2,
  GFX_LIGHT_TYPE_OMNI = 0x3,
  GFX_LIGHT_TYPE_COUNT = 0x4,
  GFX_LIGHT_TYPE_DIR_SHADOWMAP = 0x4,
  GFX_LIGHT_TYPE_SPOT_SHADOWMAP = 0x5,
  GFX_LIGHT_TYPE_OMNI_SHADOWMAP = 0x6,
  GFX_LIGHT_TYPE_COUNT_WITH_SHADOWMAP_VERSIONS = 0x7,
  GFX_LIGHT_TYPE_SPOT_SHADOWMAP_CUCOLORIS = 0x7,
  GFX_LIGHT_TYPE_COUNT_WITH_ALL_VERSIONS = 0x8,
};

/* 59 */
enum $88BF8E661AA377A64B80C77775D26455
{
  BSP_PLATFORM_PC = 0x1,
  BSP_PLATFORM_XENON = 0x2,
  BSP_PLATFORM_PS3 = 0x4,
  BSP_PLATFORM_WIIU = 0x8,
  BSP_PLATFORM_XB3 = 0x10,
  BSP_PLATFORM_PS4 = 0x20,
  BSP_PLATFORM_ALL = 0x3F,
  BSP_PLATFORM_NEXT_GEN = 0x31,
  BSP_PLATFORM_CURRENT_GEN = 0xE,
};

/* 60 */
enum LocalClientNum_t
{
  LOCAL_CLIENT_INVALID = 0xFFFFFFFF,
  LOCAL_CLIENT_0 = 0x0,
  LOCAL_CLIENT_LAST = 0x0,
  LOCAL_CLIENT_COUNT = 0x1,
};

/* 61 */
enum bdUPnPDevice::bdUPnPDeviceShutdownType
{
  BD_UPNP_DEVICE_SHUTDOWN_ELEGANT = 0x0,
  BD_UPNP_DEVICE_SHUTDOWN_IMMEDIATE = 0x1,
};

/* 62 */
enum TrisType
{
  TRIS_TYPE_LAYERED = 0x0,
  TRIS_TYPE_SIMPLE = 0x1,
  TRIS_TYPE_COUNT = 0x2,
};

/* 63 */
enum trType_t
{
  TR_STATIONARY = 0x0,
  TR_INTERPOLATE = 0x1,
  TR_LINEAR = 0x2,
  TR_LINEAR_STOP = 0x3,
  TR_SINE = 0x4,
  TR_GRAVITY = 0x5,
  TR_LOW_GRAVITY = 0x6,
  TR_ACCELERATE = 0x7,
  TR_DECELERATE = 0x8,
  TR_PHYSICS = 0x9,
  TR_ANIMATED_MOVER = 0xA,
  TR_FIRST_RAGDOLL = 0xB,
  TR_RAGDOLL = 0xB,
  TR_RAGDOLL_GRAVITY = 0xC,
  TR_RAGDOLL_INTERPOLATE = 0xD,
  TR_LAST_RAGDOLL = 0xD,
  NUM_TRTYPES = 0xE,
};

/* 64 */
enum team_t
{
  TEAM_FREE = 0x0,
  TEAM_BAD = 0x0,
  TEAM_AXIS = 0x1,
  TEAM_ALLIES = 0x2,
  TEAM_SPECTATOR = 0x3,
  TEAM_NUM_TEAMS = 0x4,
};

/* 65 */
enum bdNATType
{
  BD_NAT_UNKNOWN = 0x0,
  BD_NAT_OPEN = 0x1,
  BD_NAT_MODERATE = 0x2,
  BD_NAT_STRICT = 0x3,
};

/* 66 */
enum ConfigString
{
  CS_FIRST = 0x0,
  CS_SERVERINFO = 0x0,
  CS_SYSTEMINFO = 0x1,
  CS_SUNLIGHT = 0x2,
  CS_SERVERID = 0x3,
  CS_SCORES1 = 0x4,
  CS_SCORES2 = 0x5,
  CS_FOGVARS = 0x6,
  CS_GAMEENDTIME = 0x7,
  CS_MAPCENTER = 0x8,
  CS_SESSIONNONCE = 0x9,
  CS_TIMESCALE = 0xA,
  CS_CODINFO = 0xB,
  CS_CODINFO_LAST = 0x8A,
  CS_CODINFO_VALUE = 0x8B,
  CS_CODINFO_VALUE_LAST = 0x10A,
  CS_PLAYERINFOS = 0x10B,
  CS_PLAYERINFOS_LAST = 0x116,
  CS_ENABLE_HUD_LIGHTING = 0x117,
  CS_USE_TRIG_STRINGS = 0x118,
  CS_USE_TRIG_STRINGS_LAST = 0x216,
  CS_LOCALIZED_STRINGS = 0x217,
  CS_LOCALIZED_STRINGS_LAST = 0x415,
  CS_MATCHID = 0x416,
  CS_CASE_INSENSITIVE_BEGIN = 0x417,
  CS_AMBIENT = 0x417,
  CS_AMBIENT_LAST = 0x418,
  CS_AMBIENT_AC130 = 0x419,
  CS_RUMBLES = 0x41A,
  CS_RUMBLE_LAST = 0x439,
  CS_NORTHYAW = 0x43A,
  CS_MINIMAP = 0x43B,
  CS_MATERIAL_THERMALBODY = 0x43C,
  CS_VISIONSET_NORMAL = 0x43D,
  CS_VISIONSET_NIGHT = 0x43E,
  CS_VISIONSET_MISSILECAM = 0x43F,
  CS_VISIONSET_THERMAL = 0x440,
  CS_VISIONSET_PAIN = 0x441,
  CS_VISIONSET_POST_APPLY = 0x442,
  CS_LOC_SEL_MTLS = 0x443,
  CS_LOC_SEL_MTLS_LAST = 0x445,
  CS_MODELS = 0x446,
  CS_MODELS_LAST = 0x845,
  CS_VEHICLE_DEFS = 0x846,
  CS_VEHICLE_DEFS_LAST = 0x865,
  CS_SOUNDALIASES = 0x866,
  CS_SOUNDALIASES_LAST = 0x965,
  CS_EFFECT_NAMES = 0x966,
  CS_EFFECT_NAMES_LAST = 0xA65,
  CS_SHELLSHOCKS = 0xA66,
  CS_SHELLSHOCKS_LAST = 0xA75,
  CS_SCRIPT_MENUS = 0xA76,
  CS_SCRIPT_MENUS_LAST = 0xAA0,
  CS_SERVER_MATERIALS = 0xAA1,
  CS_SERVER_MATERIALS_LAST = 0xBFE,
  CS_CLIENT_TAGS = 0xBFF,
  CS_CLIENT_TAGS_LAST = 0xC0E,
  CS_HEAD_ICONS = 0xC0F,
  CS_HEAD_ICONS_LAST = 0xC1D,
  CS_WEAPONFILES = 0xC1E,
  CS_WEAPONFILES_LAST = 0xCBD,
  CS_STATUS_ICONS = 0xCBE,
  CS_STATUS_ICONS_LAST = 0xCC5,
  CS_MINIMAP_ICONS = 0xCC6,
  CS_MINIMAP_ICONS_LAST = 0xCD4,
  CS_NAMEPLATE_MTLS = 0xCD5,
  CS_NAMEPLATE_MTLS_LAST = 0xCE2,
  CS_MP_ANIMS = 0xCE3,
  CS_MP_ANIMS_LAST = 0xD61,
  CS_ITEMS = 0xD62,
  CS_LEADERBOARDS = 0xD63,
  MAX_CONFIGSTRINGS = 0xD64,
};

/* 67 */
enum scriptAnimMoveTypes_t
{
  ANIM_MT_UNUSED = 0x0,
  ANIM_MT_IDLE = 0x1,
  ANIM_MT_IDLECR = 0x2,
  ANIM_MT_IDLEPRONE = 0x3,
  ANIM_MT_WALK = 0x4,
  ANIM_MT_WALKBK = 0x5,
  ANIM_MT_WALKCR = 0x6,
  ANIM_MT_WALKCRBK = 0x7,
  ANIM_MT_WALKPRONE = 0x8,
  ANIM_MT_WALKPRONEBK = 0x9,
  ANIM_MT_RUN = 0xA,
  ANIM_MT_RUNBK = 0xB,
  ANIM_MT_RUNCR = 0xC,
  ANIM_MT_RUNCRBK = 0xD,
  ANIM_MT_CLIMBUP = 0xE,
  ANIM_MT_CLIMBDOWN = 0xF,
  ANIM_MT_SPRINT = 0x10,
  ANIM_MT_MANTLE = 0x11,
  ANIM_MT_IDLELASTSTAND = 0x12,
  ANIM_MT_CRAWLLASTSTAND = 0x13,
  ANIM_MT_CRAWLLASTSTANDBK = 0x14,
  ANIM_MT_SLIDE = 0x15,
  NUM_ANIM_CODEMOVETYPES = 0x16,
  FIRST_TRANSITION_MOVETYPE = 0x16,
};

/* 68 */
enum GfxDrawSurfListType
{
  DSL_CAM_LIT_OPAQUE = 0x0,
  DSL_CAM_LIT_DECAL = 0x1,
  DSL_CAM_LIT_TRANS = 0x2,
  DSL_CAM_EMISSIVE = 0x3,
  DSL_CAM_DEPTH_HACK = 0x4,
  DSL_SUNSHADOW_0 = 0x5,
  DSL_SUNSHADOW_1 = 0x6,
  DSL_SPOTSHADOW_0 = 0x7,
  DSL_SPOTSHADOW_1 = 0x8,
  DSL_SPOTSHADOW_2 = 0x9,
  DSL_SPOTSHADOW_3 = 0xA,
  DSL_CAM_MOTIONBLUR = 0xB,
  DSL_TYPE_COUNT = 0xC,
};

/* 69 */
enum $A78330E2A7CC42FFC027915DC51B9C84
{
  XASOURCE_MONO = 0x0,
  XASOURCE_STEREO = 0x1,
  XASOURCE_COUNT = 0x2,
};

/* 70 */
enum scriptAnimEventTypes_t
{
  ANIM_ET_DEATH = 0x0,
  ANIM_ET_FIREWEAPON = 0x1,
  ANIM_ET_JUMP = 0x2,
  ANIM_ET_JUMPBK = 0x3,
  ANIM_ET_LAND = 0x4,
  ANIM_ET_DROPWEAPON = 0x5,
  ANIM_ET_RAISEWEAPON = 0x6,
  ANIM_ET_CLIMB_MOUNT = 0x7,
  ANIM_ET_CLIMB_DISMOUNT = 0x8,
  ANIM_ET_RELOAD = 0x9,
  ANIM_ET_MELEEATTACK = 0xA,
  ANIM_ET_KNIFE_MELEE = 0xB,
  ANIM_ET_KNIFE_MELEE_CHARGE_HIGH = 0xC,
  ANIM_ET_KNIFE_MELEE_CHARGE_LOW = 0xD,
  ANIM_ET_SHELLSHOCK = 0xE,
  ANIM_ET_STUNNED = 0xF,
  ANIM_ET_ROCKET_CORPSE = 0x10,
  ANIM_ET_FLINCH = 0x11,
  ANIM_ET_PREPARE_GRENADE = 0x12,
  ANIM_ET_PREPARE_THROWINGKNIFE = 0x13,
  AMIM_ET_THROW_GRENADE = 0x14,
  AMIM_ET_THROW_THROWINGKNIFE = 0x15,
  AMIM_ET_DETONATE = 0x16,
  AMIM_ET_PULLOUT_TROPHYSYSTEM = 0x17,
  NUM_ANIM_EVENTTYPES = 0x18,
};

/* 71 */
enum weapHudIcon_t
{
  WEAPHUDICON_PRIMARYOFFHAND = 0x0,
  WEAPHUDICON_SECONDARYOFFHAND = 0x1,
  WEAPHUDICON_ACTIONSLOT_FIRST = 0x2,
  WEAPHUDICON_ACTIONSLOT_LAST = 0x5,
  WEAPHUDICON_COUNT = 0x6,
};

/* 72 */
enum GfxCameraRegionType
{
  CAMERA_REGION_LIT_OPAQUE = 0x0,
  CAMERA_REGION_LIT_DECAL = 0x1,
  CAMERA_REGION_LIT_TRANS = 0x2,
  CAMERA_REGION_EMISSIVE = 0x3,
  CAMERA_REGION_DEPTH_HACK = 0x4,
  CAMERA_REGION_LIGHT_MAP_OPAQUE = 0x5,
  CAMERA_REGION_HUD_OUTLINE = 0x6,
  CAMERA_REGION_MOTIONBLUR = 0x7,
  CAMERA_REGION_COUNT = 0x8,
  CAMERA_REGION_NONE = 0x8,
};

/* 73 */
enum $D36A810CB4318BC18E5CAF7F82EC0FF8
{
  XAOUTPUT_STEREO = 0x0,
  XAOUTPUT_51 = 0x1,
  XAOUTPUT_COUNT = 0x2,
};

/* 74 */
enum bdFileInfo::bdVisibility
{
  BD_VISIBLE_PUBLIC = 0x0,
  BD_VISIBLE_PRIVATE = 0x1,
  BD_MAX_VISIBILITY_TYPE = 0x2,
};

/* 75 */
enum XAssetType
{
  ASSET_TYPE_PHYSPRESET = 0x0,
  ASSET_TYPE_PHYSCOLLMAP = 0x1,
  ASSET_TYPE_XANIMPARTS = 0x2,
  ASSET_TYPE_XMODEL_SURFS = 0x3,
  ASSET_TYPE_XMODEL = 0x4,
  ASSET_TYPE_MATERIAL = 0x5,
  ASSET_TYPE_COMPUTESHADER = 0x6,
  ASSET_TYPE_VERTEXSHADER = 0x7,
  ASSET_TYPE_HULLSHADER = 0x8,
  ASSET_TYPE_DOMAINSHADER = 0x9,
  ASSET_TYPE_PIXELSHADER = 0xA,
  ASSET_TYPE_VERTEXDECL = 0xB,
  ASSET_TYPE_TECHNIQUE_SET = 0xC,
  ASSET_TYPE_IMAGE = 0xD,
  ASSET_TYPE_SOUND = 0xE,
  ASSET_TYPE_SOUND_CURVE = 0xF,
  ASSET_TYPE_LPF_CURVE = 0x10,
  ASSET_TYPE_REVERB_CURVE = 0x11,
  ASSET_TYPE_LOADED_SOUND = 0x12,
  ASSET_TYPE_CLIPMAP = 0x13,
  ASSET_TYPE_COMWORLD = 0x14,
  ASSET_TYPE_GLASSWORLD = 0x15,
  ASSET_TYPE_PATHDATA = 0x16,
  ASSET_TYPE_VEHICLE_TRACK = 0x17,
  ASSET_TYPE_MAP_ENTS = 0x18,
  ASSET_TYPE_FXWORLD = 0x19,
  ASSET_TYPE_GFXWORLD = 0x1A,
  ASSET_TYPE_LIGHT_DEF = 0x1B,
  ASSET_TYPE_UI_MAP = 0x1C,
  ASSET_TYPE_FONT = 0x1D,
  ASSET_TYPE_MENULIST = 0x1E,
  ASSET_TYPE_MENU = 0x1F,
  ASSET_TYPE_ANIMCLASS = 0x20,
  ASSET_TYPE_LOCALIZE_ENTRY = 0x21,
  ASSET_TYPE_ATTACHMENT = 0x22,
  ASSET_TYPE_WEAPON = 0x23,
  ASSET_TYPE_SNDDRIVER_GLOBALS = 0x24,
  ASSET_TYPE_FX = 0x25,
  ASSET_TYPE_IMPACT_FX = 0x26,
  ASSET_TYPE_SURFACE_FX = 0x27,
  ASSET_TYPE_AITYPE = 0x28,
  ASSET_TYPE_MPTYPE = 0x29,
  ASSET_TYPE_CHARACTER = 0x2A,
  ASSET_TYPE_XMODELALIAS = 0x2B,
  ASSET_TYPE_RAWFILE = 0x2C,
  ASSET_TYPE_SCRIPTFILE = 0x2D,
  ASSET_TYPE_STRINGTABLE = 0x2E,
  ASSET_TYPE_LEADERBOARD = 0x2F,
  ASSET_TYPE_STRUCTURED_DATA_DEF = 0x30,
  ASSET_TYPE_TRACER = 0x31,
  ASSET_TYPE_VEHICLE = 0x32,
  ASSET_TYPE_ADDON_MAP_ENTS = 0x33,
  ASSET_TYPE_NET_CONST_STRINGS = 0x34,
  ASSET_TYPE_REVERB_PRESET = 0x35,
  ASSET_TYPE_LUA_FILE = 0x36,
  ASSET_TYPE_SCRIPTABLE = 0x37,
  ASSET_TYPE_COLORIZATION = 0x38,
  ASSET_TYPE_COLORIZATIONSET = 0x39,
  ASSET_TYPE_TONEMAPPING = 0x3A,
  ASSET_TYPE_EQUIPMENT_SND_TABLE = 0x3B,
  ASSET_TYPE_VECTORFIELD = 0x3C,
  ASSET_TYPE_DOPPLER_PRESET = 0x3D,
  ASSET_TYPE_PARTICLE_SIM_ANIMATION = 0x3E,
  ASSET_TYPE_COUNT = 0x3F,
  ASSET_TYPE_STRING = 0x3F,
  ASSET_TYPE_ASSETLIST = 0x40,
};

/* 76 */
enum MeleeServerResult
{
  MELEE_RESULT_NONE = 0x0,
  MELEE_RESULT_MISS = 0x1,
  MELEE_RESULT_HIT = 0x2,
  MELEE_RESULT_FATAL = 0x3,
  MELEE_RESULT_MAX = 0x4,
};

/* 77 */
enum pmtype_t
{
  PM_NORMAL = 0x0,
  PM_NORMAL_LINKED = 0x1,
  PM_NOCLIP = 0x2,
  PM_UFO = 0x3,
  PM_MPVIEWER = 0x4,
  PM_SPECTATOR = 0x5,
  PM_INTERMISSION = 0x6,
  PM_DEAD = 0x7,
  PM_DEAD_LINKED = 0x8,
};

/* 78 */
enum bdBitBufferDataType
{
  BD_BB_NO_TYPE = 0x0,
  BD_BB_BOOL_TYPE = 0x1,
  BD_BB_SIGNED_CHAR8_TYPE = 0x2,
  BD_BB_UNSIGNED_CHAR8_TYPE = 0x3,
  BD_BB_WCHAR16_TYPE = 0x4,
  BD_BB_SIGNED_INTEGER16_TYPE = 0x5,
  BD_BB_UNSIGNED_INTEGER16_TYPE = 0x6,
  BD_BB_SIGNED_INTEGER32_TYPE = 0x7,
  BD_BB_UNSIGNED_INTEGER32_TYPE = 0x8,
  BD_BB_SIGNED_INTEGER64_TYPE = 0x9,
  BD_BB_UNSIGNED_INTEGER64_TYPE = 0xA,
  BD_BB_RANGED_SIGNED_INTEGER32_TYPE = 0xB,
  BD_BB_RANGED_UNSIGNED_INTEGER32_TYPE = 0xC,
  BD_BB_FLOAT32_TYPE = 0xD,
  BD_BB_FLOAT64_TYPE = 0xE,
  BD_BB_RANGED_FLOAT32_TYPE = 0xF,
  BD_BB_SIGNED_CHAR8_STRING_TYPE = 0x10,
  BD_BB_UNSIGNED_CHAR8_STRING_TYPE = 0x11,
  BD_BB_MBSTRING_TYPE = 0x12,
  BD_BB_BLOB_TYPE = 0x13,
  BD_BB_NAN_TYPE = 0x14,
  BD_BB_FULL_TYPE = 0x15,
  BD_BB_MAX_TYPE = 0x20,
};

/* 79 */
enum he_type_t
{
  HE_TYPE_FREE = 0x0,
  HE_TYPE_TEXT = 0x1,
  HE_TYPE_VALUE = 0x2,
  HE_TYPE_PLAYERNAME = 0x3,
  HE_TYPE_MATERIAL = 0x4,
  HE_TYPE_TIMER_DOWN = 0x5,
  HE_TYPE_TIMER_UP = 0x6,
  HE_TYPE_TIMER_STATIC = 0x7,
  HE_TYPE_TENTHS_TIMER_DOWN = 0x8,
  HE_TYPE_TENTHS_TIMER_UP = 0x9,
  HE_TYPE_TENTHS_TIMER_STATIC = 0xA,
  HE_TYPE_CLOCK_DOWN = 0xB,
  HE_TYPE_CLOCK_UP = 0xC,
  HE_TYPE_WAYPOINT = 0xD,
  HE_TYPE_COUNT = 0xE,
};

/* 80 */
enum PhysPresetScaling
{
  PHYSPRESET_SCALING_LINEAR = 0x0,
  PHYSPRESET_SCALING_QUADRATIC = 0x1,
  PHYSPRESET_SCALING_COUNT = 0x2,
};

/* 81 */
enum TraceHitType
{
  TRACE_HITTYPE_NONE = 0x0,
  TRACE_HITTYPE_ENTITY = 0x1,
  TRACE_HITTYPE_DYNENT_MODEL = 0x2,
  TRACE_HITTYPE_DYNENT_BRUSH = 0x3,
  TRACE_HITTYPE_GLASS = 0x4,
};

/* 82 */
enum scr_string_t
{
};

/* 83 */
enum weapType_t
{
  WEAPTYPE_NONE = 0x0,
  WEAPTYPE_BULLET = 0x1,
  WEAPTYPE_GRENADE = 0x2,
  WEAPTYPE_PROJECTILE = 0x3,
  WEAPTYPE_RIOTSHIELD = 0x4,
  WEAPTYPE_NUM = 0x5,
};

/* 84 */
enum weapClass_t
{
  WEAPCLASS_RIFLE = 0x0,
  WEAPCLASS_SNIPER = 0x1,
  WEAPCLASS_MG = 0x2,
  WEAPCLASS_SMG = 0x3,
  WEAPCLASS_SPREAD = 0x4,
  WEAPCLASS_PISTOL = 0x5,
  WEAPCLASS_GRENADE = 0x6,
  WEAPCLASS_ROCKETLAUNCHER = 0x7,
  WEAPCLASS_TURRET = 0x8,
  WEAPCLASS_THROWINGKNIFE = 0x9,
  WEAPCLASS_NON_PLAYER = 0xA,
  WEAPCLASS_ITEM = 0xB,
  WEAPCLASS_NUM = 0xC,
};

/* 85 */
enum weapProjExposion_t
{
  WEAPPROJEXP_GRENADE = 0x0,
  WEAPPROJEXP_ROCKET = 0x1,
  WEAPPROJEXP_FLASHBANG = 0x2,
  WEAPPROJEXP_NONE = 0x3,
  WEAPPROJEXP_DUD = 0x4,
  WEAPPROJEXP_SMOKE = 0x5,
  WEAPPROJEXP_HEAVY = 0x6,
  WEAPPROJEXP_NUM = 0x7,
};

/* 86 */
enum PenetrateType
{
  PENETRATE_TYPE_NONE = 0x0,
  PENETRATE_TYPE_SMALL = 0x1,
  PENETRATE_TYPE_MEDIUM = 0x2,
  PENETRATE_TYPE_LARGE = 0x3,
  PENETRATE_TYPE_COUNT = 0x4,
};

/* 87 */
enum ImpactType
{
  IMPACT_TYPE_NONE = 0x0,
  IMPACT_TYPE_BULLET_SMALL = 0x1,
  IMPACT_TYPE_BULLET_LARGE = 0x2,
  IMPACT_TYPE_BULLET_AP = 0x3,
  IMPACT_TYPE_BULLET_EXPLODE = 0x4,
  IMPACT_TYPE_SHOTGUN = 0x5,
  IMPACT_TYPE_SHOTGUN_EXPLODE = 0x6,
  IMPACT_TYPE_GRENADE_BOUNCE = 0x7,
  IMPACT_TYPE_GRENADE_EXPLODE = 0x8,
  IMPACT_TYPE_ROCKET_EXPLODE = 0x9,
  IMPACT_TYPE_PROJECTILE_DUD = 0xA,
  IMPACT_TYPE_COUNT = 0xB,
};

/* 88 */
enum weapOverlayReticle_t
{
  WEAPOVERLAYRETICLE_NONE = 0x0,
  WEAPOVERLAYRETICLE_CROSSHAIR = 0x1,
  WEAPOVERLAYRETICLE_NUM = 0x2,
};

/* 89 */
enum weaponIconRatioType_t
{
  WEAPON_ICON_RATIO_1TO1 = 0x0,
  WEAPON_ICON_RATIO_2TO1 = 0x1,
  WEAPON_ICON_RATIO_4TO1 = 0x2,
  WEAPON_ICON_RATIO_COUNT = 0x3,
};

/* 90 */
enum ammoCounterClipType_t
{
  AMMO_COUNTER_CLIP_NONE = 0x0,
  AMMO_COUNTER_CLIP_MAGAZINE = 0x1,
  AMMO_COUNTER_CLIP_SHORTMAGAZINE = 0x2,
  AMMO_COUNTER_CLIP_SHOTGUN = 0x3,
  AMMO_COUNTER_CLIP_ROCKET = 0x4,
  AMMO_COUNTER_CLIP_BELTFED = 0x5,
  AMMO_COUNTER_CLIP_ALTWEAPON = 0x6,
  AMMO_COUNTER_CLIP_COUNT = 0x7,
};

/* 91 */
enum weapInventoryType_t
{
  WEAPINVENTORY_PRIMARY = 0x0,
  WEAPINVENTORY_OFFHAND = 0x1,
  WEAPINVENTORY_ITEM = 0x2,
  WEAPINVENTORY_ALTMODE = 0x3,
  WEAPINVENTORY_EXCLUSIVE = 0x4,
  WEAPINVENTORY_SCAVENGER = 0x5,
  WEAPINVENTORYCOUNT = 0x6,
};

/* 92 */
enum weapStance_t
{
  WEAPSTANCE_STAND = 0x0,
  WEAPSTANCE_DUCK = 0x1,
  WEAPSTANCE_PRONE = 0x2,
  WEAPSTANCE_NUM = 0x3,
};

/* 93 */
enum WeapOverlayInteface_t
{
  WEAPOVERLAYINTERFACE_NONE = 0x0,
  WEAPOVERLAYINTERFACE_JAVELIN = 0x1,
  WEAPOVERLAYINTERFACE_TURRETSCOPE = 0x2,
  WEAPOVERLAYINTERFACECOUNT = 0x3,
};

/* 94 */
enum activeReticleType_t
{
  VEH_ACTIVE_RETICLE_NONE = 0x0,
  VEH_ACTIVE_RETICLE_PIP_ON_A_STICK = 0x1,
  VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND = 0x2,
  VEH_ACTIVE_RETICLE_COUNT = 0x3,
};

/* 95 */
enum guidedMissileType_t
{
  MISSILE_GUIDANCE_NONE = 0x0,
  MISSILE_GUIDANCE_SIDEWINDER = 0x1,
  MISSILE_GUIDANCE_HELLFIRE = 0x2,
  MISSILE_GUIDANCE_JAVELIN = 0x3,
  MISSILE_GUIDANCE_COUNT = 0x4,
};

/* 96 */
enum AttachmentType
{
  ATTACHMENT_SCOPE = 0x0,
  ATTACHMENT_UNDERBARREL = 0x1,
  ATTACHMENT_OTHER = 0x2,
  ATTACHMENT_COUNT = 0x3,
};

/* 97 */
enum OmnvarType
{
  OMNVAR_TYPE_INVALID = 0x0,
  OMNVAR_TYPE_BOOL = 0x1,
  OMNVAR_TYPE_FLOAT = 0x2,
  OMNVAR_TYPE_INT = 0x3,
  OMNVAR_TYPE_TIME = 0x4,
  OMNVAR_TYPE_NCS_LUI = 0x5,
};

/* 98 */
enum ViewLockTypes
{
  PLAYERVIEWLOCK_NONE = 0x0,
  PLAYERVIEWLOCK_FULL = 0x1,
  PLAYERVIEWLOCK_WEAPONJITTER = 0x2,
  PLAYERVIEWLOCKCOUNT = 0x3,
};

/* 99 */
enum MissileStage
{
  MISSILESTAGE_SOFTLAUNCH = 0x0,
  MISSILESTAGE_ASCENT = 0x1,
  MISSILESTAGE_DESCENT = 0x2,
};

/* 100 */
enum sessionState_t
{
  SESS_STATE_PLAYING = 0x0,
  SESS_STATE_DEAD = 0x1,
  SESS_STATE_SPECTATOR = 0x2,
  SESS_STATE_INTERMISSION = 0x3,
};

/* 101 */
enum clientConnected_t
{
  CON_DISCONNECTED = 0x0,
  CON_CONNECTING = 0x1,
  CON_CONNECTED = 0x2,
};

/* 102 */
enum VehicleDrivingState
{
  VEH_DRIVE_NONE = 0x0,
  VEH_DRIVE_PATH_CONSTRAINED = 0x1,
  VEH_DRIVE_PATH_FOLLOW = 0x2,
  VEH_DRIVE_TRACK = 0x3,
  VEH_DRIVE_AI = 0x4,
  VEH_DRIVE_PLAYER = 0x5,
};

/* 103 */
enum VehicleTransmission
{
  VEH_TRANS_FORWARD = 0x0,
  VEH_TRANS_REVERSE = 0x1,
};

/* 104 */
enum VehiclePathDir
{
  VEH_PATH_FORWARD = 0x0,
  VEH_PATH_REVERSE = 0x1,
};

/* 105 */
enum VehicleCameraState
{
  VEH_CAMERA_DEFAULT = 0x0,
  VEH_CAMERA_DELAYED = 0x1,
  VEH_CAMERA_CHANGED = 0x2,
};

/* 106 */
enum VehicleManualMode
{
  VEH_MANUAL_OFF = 0x0,
  VEH_MANUAL_ON = 0x1,
  VEH_MANUAL_TRANS = 0x2,
};

/* 107 */
enum VehicleRotateToMode
{
  VEH_ROTATE_TO_OFF = 0x0,
  VEH_ROTATE_TO_ACCEL = 0x1,
  VEH_ROTATE_TO_DECEL = 0x2,
};

/* 108 */
enum VehiclePathType
{
  VEH_PATH_FOLLOW = 0x0,
  VEH_PATH_CONSTRAINED = 0x1,
};

/* 109 */
enum bdSequenceNumberStore::bdSequenuceStatus
{
  BD_SN_INVALID_SMALLER = 0xFFFFFFFE,
  BD_SN_VALID_SMALLER = 0xFFFFFFFF,
  BD_SN_INVALID_DUPLICATE = 0x0,
  BD_SN_VALID_LARGER = 0x1,
  BD_SN_VALID_MUCH_LARGER = 0x2,
};

/* 110 */
enum bdSocketStatusCode
{
  BD_NET_SUCCESS = 0x1,
  BD_NET_CONNECTION_CLOSED = 0x0,
  BD_NET_ERROR = 0xFFFFFFFF,
  BD_NET_WOULD_BLOCK = 0xFFFFFFFE,
  BD_NET_SUBSYTEM_ERROR = 0xFFFFFFFD,
  BD_NET_ADDRESS_IN_USE = 0xFFFFFFFC,
  BD_NET_CONNECTION_RESET = 0xFFFFFFFB,
  BD_NET_MSG_SIZE = 0xFFFFFFFA,
  BD_NET_ADDRESS_INVALID = 0xFFFFFFF9,
  BD_NET_BLOCKING_CALL_CANCELED = 0xFFFFFFF8,
  BD_NET_NOT_BOUND = 0xFFFFFFF7,
  BD_NET_INVALID_HANDLE = 0xFFFFFFF6,
  BD_NET_NOT_CONNECTED = 0xFFFFFFF5,
  BD_NET_CONNECTION_REFUSED = 0xFFFFFFF4,
  BD_NET_HOST_UNREACH = 0xFFFFFFF3,
};

/* 111 */
enum bdRemoteTask::bdStatus
{
  BD_EMPTY = 0x0,
  BD_PENDING = 0x1,
  BD_DONE = 0x2,
  BD_FAILED = 0x3,
  BD_TIMED_OUT = 0x4,
  BD_CANCELLED = 0x5,
  BD_MAX_STATUS = 0x6,
};

/* 112 */
enum bdRSAKey::bdRSAKeyStatus
{
  BD_RSA_KEY_UNINITIALIZED = 0x0,
  BD_RSA_KEY_INITIALIZED = 0x1,
};

/* 113 */
enum bdAddrHandle::bdAddrHandleStatus
{
  BD_ADDR_NOT_CONSTRUCTED = 0x0,
  BD_ADDR_NOT_RESOLVED = 0x1,
  BD_ADDR_ERROR = 0x2,
  BD_ADDR_RESOLVED = 0x3,
  BD_ADDR_UNRESOLVED = 0x4,
};

/* 114 */
enum bdDTLSPacketTypes
{
  BD_DTLS_INIT = 0x1,
  BD_DTLS_INIT_ACK = 0x2,
  BD_DTLS_COOKIE_ECHO = 0x3,
  BD_DTLS_COOKIE_ACK = 0x4,
  BD_DTLS_ERROR = 0x5,
  BD_DTLS_DATA = 0x6,
  BD_DTLS_NATKEEPALIVE = 0x7,
};

/* 115 */
enum bdDTLSError::bdDTLSErrorType
{
  BD_DTLS_ERROR_BAD_SECID = 0x0,
  BD_DTLS_INVALID_STATE = 0x1,
};

/* 116 */
enum bdDTLSAssociationStatus
{
  BD_SOCKET_IDLE = 0x0,
  BD_SOCKET_PENDING = 0x1,
  BD_SOCKET_CONNECTED = 0x2,
  BD_SOCKET_LOST = 0x3,
};

/* 117 */
enum bdDTLSAssociation::bdDTLSStatus
{
  BD_DTLS_CLOSED = 0x0,
  BD_DTLS_COOKIE_WAIT = 0x1,
  BD_DTLS_COOKIE_ECHOED = 0x2,
  BD_DTLS_ESTABLISHED = 0x3,
};

/* 118 */
enum bdQoSProbe::bdQoSProbeStatus
{
  BD_QOS_PROBE_UNINITIALIZED = 0x0,
  BD_QOS_PROBE_INITIALIZED = 0x1,
  BD_QOS_PROBE_RUNNING = 0x2,
};

/* 119 */
enum bdECCKey::bdECCKeyStatus
{
  BD_ECC_KEY_UNINITIALIZED = 0x0,
  BD_ECC_KEY_INITIALIZED = 0x1,
};

/* 120 */
enum bdNATTravClientData::bdNATTravClientDataState
{
  BD_NTCDS_INITIAL = 0x0,
  BD_NTCDS_STAGE_1 = 0x1,
  BD_NTCDS_STAGE_2 = 0x2,
  BD_NTCDS_STAGE_3 = 0x3,
};

/* 121 */
enum bdNATTravClient::bdNATTravClientStatus
{
  BD_NAT_TRAV_UNINITIALIZED = 0x0,
  BD_NAT_TRAV_INITIALIZED = 0x1,
  BD_NAT_TRAV_RUNNING = 0x2,
};

/* 122 */
enum bdSocketRouter::bdSocketRouterStatus
{
  BD_SOCKET_ROUTER_UNINITIALIZED = 0x0,
  BD_SOCKET_ROUTER_INITIALIZED = 0x1,
  BD_SOCKET_ROUTER_ERROR = 0x2,
};

/* 123 */
enum bdConnectionStore::bdConnectionStoreStatus
{
  BD_CONNECTION_STORE_UNINITIALIZED = 0x0,
  BD_CONNECTION_STORE_INITIALIZED = 0x1,
  BD_CONNECTION_STORE_SHUTTING_DOWN = 0x2,
  BD_CONNECTION_STORE_ERROR = 0x3,
};

/* 124 */
enum bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest
{
  BD_NTDP_SAME_ADDR = 0x0,
  BD_NTDP_DIFF_PORT = 0x1,
  BD_NTDP_DIFF_IP = 0x2,
  BD_NTDP_DIFF_PORT_IP = 0x3,
  BD_NTDP_INVALID_TYPE = 0x4,
};

/* 125 */
enum bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState
{
  BD_NTDCS_UNINITIALIZED = 0x0,
  BD_NTDCS_RUN_TEST_1 = 0x1,
  BD_NTDCS_RUN_TEST_2 = 0x2,
  BD_NTDCS_RUN_TEST_3 = 0x3,
  BD_NTDCS_FINI = 0x4,
  BD_NTDCS_ERROR = 0x5,
};

/* 126 */
enum bdIPDiscoveryClient::bdIPDiscoveryClientStatus
{
  BD_IP_DISC_UNINITIALIZED = 0x0,
  BD_IP_DISC_RUNNING = 0x1,
  BD_IP_DISC_SUCCESS = 0x2,
  BD_IP_DISC_FAIL = 0x3,
  BD_IP_DISC_ERROR = 0x4,
};

/* 127 */
enum bdGetHostByName::bdStatus
{
  BD_LOOKUP_UNINITIALIZED = 0x0,
  BD_LOOKUP_PENDING = 0x1,
  BD_LOOKUP_SUCCEEDED = 0x2,
  BD_LOOKUP_FAILED = 0x3,
  BD_LOOKUP_CANCELLED = 0x4,
  BD_LOOKUP_TIMED_OUT = 0x5,
  BD_LOOKUP_ERROR = 0x6,
};

/* 128 */
enum bdUPnPConfig::bdUPnPRunMode
{
  BD_UPNP_DO_PORT_MAPPING = 0x0,
  BD_UPNP_EXTERNAL_IP_ONLY = 0x1,
};

/* 129 */
enum bdUPnPDevice::bdUPnPDeviceState
{
  BD_UPNP_DEVICE_UNINITIALISED = 0x0,
  BD_UPNP_DEVICE_INITIALISED = 0x1,
  BD_UPNP_DEVICE_SENDING_DESCRIPTION_REQ = 0x2,
  BD_UPNP_DEVICE_GETTING_DESCRIPTION = 0x3,
  BD_UPNP_DEVICE_GOT_DESCRIPTION = 0x4,
  BD_UPNP_DEVICE_SENDING_IP_REQ = 0x5,
  BD_UPNP_DEVICE_DISCOVERING_IP = 0x6,
  BD_UPNP_DEVICE_DISCOVERED_IP = 0x7,
  BD_UPNP_DEVICE_SENDING_PORT_QUERY_REQ = 0x8,
  BD_UPNP_DEVICE_DISCOVERING_PORT_MAPPING = 0x9,
  BD_UPNP_DEVICE_DISCOVERED_PORT_MAPPING = 0xA,
  BD_UPNP_DEVICE_SENDING_MAPPING_REQ = 0xB,
  BD_UPNP_DEVICE_MAPPING_PORT = 0xC,
  BD_UPNP_DEVICE_MAPPED_PORT = 0xD,
  BD_UPNP_DEVICE_SENDING_UNMAPPING_REQ = 0xE,
  BD_UPNP_DEVICE_UNMAPPING_PORT = 0xF,
  BD_UPNP_DEVICE_UNMAPPED_PORT = 0x10,
  BD_UPNP_DEVICE_SHUTTING_DOWN = 0x11,
  BD_UPNP_DEVICE_FINISHED = 0x12,
  BD_UPNP_DEVICE_FAILED = 0x13,
};

/* 130 */
enum bdUPnPDevice::bdUPnPPortStatus
{
  BD_UPNP_PORT_STATUS_UNKNOWN = 0x0,
  BD_UPNP_PORT_COLLISION_FOUND = 0x1,
  BD_UPNP_PORT_NOT_MAPPED = 0x2,
  BD_UPNP_PORT_MAPPED = 0x3,
};

/* 131 */
enum bdUPnP::bdUPnPState
{
  BD_UPNP_UNINITIALISED = 0x0,
  BD_UPNP_INITIALISED = 0x1,
  BD_UPNP_DISCOVERING_DEVICES = 0x2,
  BD_UPNP_DISCOVERED_DEVICE = 0x3,
  BD_UPNP_CONFIGURING_DEVICE = 0x4,
  BD_UPNP_SHUTTING_DOWN = 0x5,
  BD_UPNP_FINISHED = 0x6,
  BD_UPNP_FAILED = 0x7,
};

/* 132 */
enum bdNetImpl::bdNetStatus
{
  BD_NET_PARAMS_CONFIG_ERROR = 0xFFFFFFFC,
  BD_NET_BIND_FAILED = 0xFFFFFFFD,
  BD_NET_ONLINE_FAILED = 0xFFFFFFFE,
  BD_NET_INIT_FAILED = 0xFFFFFFFF,
  BD_NET_STOPPED = 0x0,
  BD_NET_PENDING = 0x1,
  BD_NET_DONE = 0x2,
};

/* 133 */
enum bdAuthTicket::bdTicketTypes
{
  BD_AUTH_USER_TO_SERVICE_TICKET = 0x0,
  BD_AUTH_HOST_TO_SERVICE_TICKET = 0x1,
  BD_AUTH_USER_TO_HOST_TICKET = 0x2,
};

/* 134 */
enum bdAuthService::bdStatus
{
  BD_READY = 0x0,
  BD_CONNECTING = 0x1,
  BD_PENDING_REPLY = 0x2,
};

/* 135 */
typedef bdRemoteTask::bdStatus bdHTTPWrapperBase::bdStatus;

/* 136 */
enum bdHTTPWrapperBase::bdOperation
{
  BD_IDLE = 0x0,
  BD_UPLOAD = 0x1,
  BD_DOWNLOAD = 0x2,
  BD_DELETE = 0x3,
  BD_COPY = 0x4,
  BD_AUTH = 0x5,
  BD_POST = 0x6,
};

/* 137 */
typedef bdAuthService::bdStatus bdHTTPAuthService::bdStatus;

/* 138 */
typedef bdLobbyErrorCode bdLobbyConnection::Status;

/* 139 */
enum bdLobbyConnection::RecvState
{
  BD_READ_INIT = 0x0,
  BD_READ_SIZE = 0x1,
  BD_READ_ENCRYPT = 0x2,
  BD_READ_MESSAGE = 0x3,
  BD_READ_COMPLETE = 0x4,
};

/* 140 */
enum bdStats::bdWriteType
{
  STAT_WRITE_REPLACE = 0x0,
  STAT_WRITE_ADD = 0x1,
  STAT_WRITE_MAX = 0x2,
  STAT_WRITE_MIN = 0x3,
  STAT_WRITE_REPLACE_WHEN_RATING_INCREASE = 0x4,
  STAT_WRITE_ADD_WHEN_RATING_INCREASE = 0x5,
  STAT_WRITE_MAX_WHEN_RATING_INCREASE = 0x6,
  STAT_WRITE_MIN_WHEN_RATING_INCREASE = 0x7,
};

/* 141 */
typedef bdFileInfo::bdVisibility bdFileMetaData::bdVisibility;

/* 142 */
enum bdContentStreamingBase::bdStatus
{
  READY = 0x0,
  PRE_HTTP_OPERATION = 0x1,
  HTTP_OPERATION = 0x2,
  POST_HTTP_OPERATION = 0x3,
  DONE = 0x4,
  FAILED = 0x5,
};

/* 143 */
enum HelicopterMoveState
{
  VEH_MOVESTATE_STOP = 0x0,
  VEH_MOVESTATE_MOVE = 0x1,
  VEH_MOVESTATE_HOVER = 0x2,
};

/* 144 */
enum DroneMoveState
{
  DRONEMOVESTATE_UNKNOWN = 0x0,
  DRONEMOVESTATE_TO_POS = 0x1,
  DRONEMOVESTATE_TO_NODE = 0x2,
  NUM_DRONEMOVESTATES = 0x3,
};

/* 145 */
enum $E389D7B3C590F306A60DD6067CD1A771
{
  XFILE_BLOCK_TEMP = 0x0,
  XFILE_BLOCK_PHYSICAL = 0x1,
  XFILE_BLOCK_RUNTIME = 0x2,
  XFILE_BLOCK_VIRTUAL = 0x3,
  XFILE_BLOCK_LARGE = 0x4,
  XFILE_BLOCK_CALLBACK = 0x5,
  XFILE_BLOCK_SCRIPT = 0x6,
  MAX_XFILE_COUNT = 0x7,
};

/* 146 */
enum $3EA5C49109C388D2FF7C008F089D1F3C
{
  IGNORE_TECH_DFOG = 0x0,
  IGNORE_TECH_NORMAL_FOG = 0x1,
  IGNORE_TECH_CUCOLORIS = 0x2,
  IGNORE_TECH_THERMAL = 0x3,
  IGNORE_TECH_DYNLIGHT_SPEC = 0x4,
  IGNORE_TECH_LOD_SHADERS = 0x5,
  IGNORE_TECH_LAYERED = 0x6,
  IGNORE_TECH_COUNT = 0x7,
};

/* 147 */
enum $40142E5DF968FCA091918FCC56B7D02C
{
  FX_ELEM_CLOUD_SHAPE_SHIFT = 0x1D,
};

/* 148 */
enum $48BB407CDF9D31D8FA5FE97033213E90
{
  FX_ELEM_SPAWN_RELATIVE_TO_EFFECT = 0x2,
  FX_ELEM_SPAWN_FRUSTUM_CULL = 0x4,
  FX_ELEM_RUNNER_USES_RAND_ROT = 0x8,
  FX_ELEM_SPAWN_OFFSET_NONE = 0x0,
  FX_ELEM_SPAWN_OFFSET_SPHERE = 0x10,
  FX_ELEM_SPAWN_OFFSET_CYLINDER = 0x20,
  FX_ELEM_SPAWN_OFFSET_MASK = 0x30,
  FX_ELEM_RUN_RELATIVE_TO_WORLD = 0x0,
  FX_ELEM_RUN_RELATIVE_TO_SPAWN = 0x40,
  FX_ELEM_RUN_RELATIVE_TO_EFFECT = 0x80,
  FX_ELEM_RUN_RELATIVE_TO_OFFSET = 0xC0,
  FX_ELEM_RUN_RELATIVE_TO_CAMERA = 0x100,
  FX_ELEM_RUN_MASK = 0x1C0,
  FX_ELEM_DIE_ON_TOUCH = 0x200,
  FX_ELEM_DRAW_PAST_FOG = 0x400,
  FX_ELEM_DRAW_WITH_VIEWMODEL = 0x800,
  FX_ELEM_BLOCK_SIGHT = 0x1000,
  FX_ELEM_DRAW_IN_THERMAL_VIEW_ONLY = 0x2000,
  FX_ELEM_TRAIL_ORIENT_BY_VELOCITY = 0x4000,
  FX_ELEM_EMIT_BOLT = 0x80000000,
  FX_ELEM_EMIT_ORIENT_BY_ELEM = 0x8000,
  FX_ELEM_USE_OCCLUSION_QUERY = 0x10000,
  FX_ELEM_NODRAW_IN_THERMAL_VIEW = 0x20000,
  FX_ELEM_THERMAL_MASK = 0x22000,
  FX_ELEM_SPAWN_IMPACT_FX_WITH_SURFACE_NAME = 0x40000,
  FX_ELEM_RECEIVE_DYNAMIC_LIGHT = 0x80000,
  FX_ELEM_VOLUMETRIC_TRAIL = 0x100000,
  FX_ELEM_USE_COLLISION = 0x200000,
  FX_ELEM_USE_VECTORFIELDS = 0x400000,
  FX_ELEM_NO_SURFACE_HDR_SCALAR = 0x800000,
  FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL = 0x1000000,
  FX_ELEM_HAS_VELOCITY_GRAPH_WORLD = 0x2000000,
  FX_ELEM_HAS_GRAVITY = 0x4000000,
  FX_ELEM_USE_MODEL_PHYSICS = 0x8000000,
  FX_ELEM_NONUNIFORM_SCALE = 0x10000000,
  FX_ELEM_CLOUD_SHAPE_CUBE = 0x0,
  FX_ELEM_CLOUD_SHAPE_SPHERE_LARGE = 0x20000000,
  FX_ELEM_CLOUD_SHAPE_SPHERE_MEDIUM = 0x40000000,
  FX_ELEM_CLOUD_SHAPE_SPHERE_SMALL = 0x60000000,
  FX_ELEM_CLOUD_SHAPE_MASK = 0x60000000,
  FX_ELEM_FOUNTAIN_DISABLE_COLLISION = 0x80000000,
};

/* 149 */
enum $492CD0B85F0B730CED02E7126C1E8052
{
  FX_ELEM2_BILLBOARD_FACING_CAMERA_PERPENDICULAR = 0x1,
  FX_ELEM2_BILLBOARD_FACING_PLAYER = 0x2,
  FX_ELEM2_BILLBOARD_FACING_MASK = 0x3,
  FX_ELEM2_EMIT_TRAILS = 0x4,
  FX_ELEM2_REACTIVE_TURBULENCE = 0x8,
};

/* 150 */
enum $6F5F7EF12AB4A92AB8B792C12995AD50
{
  FX_ELEM_TYPE_SPRITE_BILLBOARD = 0x0,
  FX_ELEM_TYPE_SPRITE_ORIENTED = 0x1,
  FX_ELEM_TYPE_TAIL = 0x2,
  FX_ELEM_TYPE_TRAIL = 0x3,
  FX_ELEM_TYPE_FLARE = 0x4,
  FX_ELEM_TYPE_PARTICLE_SIM_ANIMATION = 0x5,
  FX_ELEM_TYPE_CLOUD = 0x6,
  FX_ELEM_TYPE_SPARK_CLOUD = 0x7,
  FX_ELEM_TYPE_SPARK_FOUNTAIN = 0x8,
  FX_ELEM_TYPE_MODEL = 0x9,
  FX_ELEM_TYPE_OMNI_LIGHT = 0xA,
  FX_ELEM_TYPE_SPOT_LIGHT = 0xB,
  FX_ELEM_TYPE_SOUND = 0xC,
  FX_ELEM_TYPE_DECAL = 0xD,
  FX_ELEM_TYPE_RUNNER = 0xE,
  FX_ELEM_TYPE_VECTORFIELD = 0xF,
  FX_ELEM_TYPE_COUNT = 0x10,
  FX_ELEM_TYPE_LAST_SPRITE = 0x5,
  FX_ELEM_TYPE_LAST_DRAWN = 0xB,
};

/* 151 */
enum snd_alias_type_t
{
  SAT_UNKNOWN = 0x0,
  SAT_LOADED = 0x1,
  SAT_STREAMED = 0x2,
  SAT_PRIMED = 0x3,
  SAT_COUNT = 0x4,
};

/* 152 */
enum MigrationFlags
{
  MFLAG_NO_FLAGS = 0x0,
  MFLAG_KICKOLDHOST = 0x1,
  MFLAG_BACKOUTPARTY = 0x2,
  MFLAG_COUNT = 0x3,
};

/* 153 */
enum MigrationType
{
  MTYPE_PARTY = 0x0,
  MTYPE_GAMESERVER = 0x1,
  MTYPE_COUNT = 0x2,
};

/* 154 */
enum $DAE1E2F90FA70ABDA01C7525C696A385
{
  VISION_SET_OVERRIDE_EXISTING_DVARS = 0x1,
  VISION_SET_OVERRIDE_EXISTING_HDR_COLORIZATION = 0x2,
  VISION_SET_OVERRIDE_EXISTING_TONE_MAPPING = 0x4,
  VISION_SET_OVERRIDE_EXISTING_LDR_COLORIZATION = 0x8,
  VISION_SET_OVERRIDE_EXISTING_NUM_FLAGS = 0x4,
  VISION_SET_OVERRIDE_EXISTING_ALL = 0xF,
};

/* 155 */
enum $FD08F1DE906C731CF6838EE7A68CDEF4
{
  FX_ATLAS_START_FIXED = 0x0,
  FX_ATLAS_START_RANDOM = 0x1,
  FX_ATLAS_START_INDEXED = 0x2,
  FX_ATLAS_START_MASK = 0x3,
  FX_ATLAS_PLAY_OVER_LIFE = 0x4,
  FX_ATLAS_LOOP_ONLY_N_TIMES = 0x8,
  FX_ATLAS_FRAME_BLEND = 0x10,
  FX_ATLAS_IS_ARRAY = 0x20,
};

/* 156 */
enum $5FEF55A2B530AD31928FF617B6BC3CAB
{
  FX_FLARE_NONUNIFORM_SCALE = 0x1,
  FX_FLARE_USE_VIEW_DIR = 0x2,
  FX_FLARE_USE_SCREEN_INTENSITY = 0x4,
  FX_FLARE_SOURCE_TYPE_SHIFT = 0x3,
  FX_FLARE_SOURCE_TYPE_OMNI = 0x0,
  FX_FLARE_SOURCE_TYPE_SPOT = 0x8,
  FX_FLARE_SOURCE_TYPE_MASK = 0x18,
  FX_FLARE_SOURCE_TYPE_COUNT = 0x2,
};

/* 157 */
enum $953D8D2351A632F7881D347D82B40820
{
  CON_CHANNEL_DONT_FILTER = 0x0,
  CON_CHANNEL_ERROR = 0x1,
  CON_CHANNEL_GAMENOTIFY = 0x2,
  CON_CHANNEL_BOLDGAME = 0x3,
  CON_CHANNEL_SUBTITLE = 0x4,
  CON_CHANNEL_OBITUARY = 0x5,
  CON_CHANNEL_LOGFILEONLY = 0x6,
  CON_CHANNEL_CONSOLEONLY = 0x7,
  CON_CHANNEL_GFX = 0x8,
  CON_CHANNEL_SOUND = 0x9,
  CON_CHANNEL_FILES = 0xA,
  CON_CHANNEL_DEVGUI = 0xB,
  CON_CHANNEL_PROFILE = 0xC,
  CON_CHANNEL_UI = 0xD,
  CON_CHANNEL_CLIENT = 0xE,
  CON_CHANNEL_SERVER = 0xF,
  CON_CHANNEL_SYSTEM = 0x10,
  CON_CHANNEL_PLAYERWEAP = 0x11,
  CON_CHANNEL_AI = 0x12,
  CON_CHANNEL_ANIM = 0x13,
  CON_CHANNEL_PHYS = 0x14,
  CON_CHANNEL_FX = 0x15,
  CON_CHANNEL_LEADERBOARDS = 0x16,
  CON_CHANNEL_PARSERSCRIPT = 0x17,
  CON_CHANNEL_SCRIPT = 0x18,
  CON_CHANNEL_NETWORK = 0x19,
  CON_CHANNEL_PROFILE_MAPLOAD = 0x1A,
  CON_CHANNEL_DS = 0x1B,
  CON_BUILTIN_CHANNEL_COUNT = 0x1C,
  CON_CHANNEL_ALWAYS_DS = 0x8000,
};

/* 158 */
enum $0AF19E077E9D46649115AE75245D373F
{
  COMPASSTURRET_SENTRY = 0x0,
  COMPASSTURRET_BUDDY = 0x1,
  COMPASSTURRET_COUNT = 0x2,
};

/* 159 */
enum keyNum_t
{
  K_NONE = 0x0,
  K_FIRSTGAMEPADBUTTON_RANGE_1 = 0x1,
  K_BUTTON_A = 0x1,
  K_BUTTON_B = 0x2,
  K_BUTTON_X = 0x3,
  K_BUTTON_Y = 0x4,
  K_BUTTON_LSHLDR = 0x5,
  K_BUTTON_RSHLDR = 0x6,
  K_LASTGAMEPADBUTTON_RANGE_1 = 0x6,
  K_TAB = 0x9,
  K_ENTER = 0xD,
  K_FIRSTGAMEPADBUTTON_RANGE_2 = 0xE,
  K_BUTTON_START = 0xE,
  K_BUTTON_BACK = 0xF,
  K_BUTTON_LSTICK = 0x10,
  K_BUTTON_RSTICK = 0x11,
  K_BUTTON_LTRIG = 0x12,
  K_BUTTON_RTRIG = 0x13,
  K_DPAD_UP = 0x14,
  K_FIRSTDPAD = 0x14,
  K_DPAD_DOWN = 0x15,
  K_DPAD_LEFT = 0x16,
  K_DPAD_RIGHT = 0x17,
  K_BUTTON_LSTICK_ALTIMAGE = 0x18,
  K_BUTTON_RSTICK_ALTIMAGE = 0x19,
  K_LASTDPAD = 0x17,
  K_LASTGAMEPADBUTTON_RANGE_2 = 0x17,
  K_ESCAPE = 0x1B,
  K_FIRSTGAMEPADBUTTON_RANGE_3 = 0x1C,
  K_APAD_UP = 0x1C,
  K_FIRSTAPAD = 0x1C,
  K_APAD_DOWN = 0x1D,
  K_APAD_LEFT = 0x1E,
  K_APAD_RIGHT = 0x1F,
  K_LASTAPAD = 0x1F,
  K_LASTGAMEPADBUTTON_RANGE_3 = 0x1F,
  K_SPACE = 0x20,
  K_BACKSPACE = 0x7F,
  K_ASCII_FIRST = 0x80,
  K_ASCII_181 = 0x80,
  K_ASCII_191 = 0x81,
  K_ASCII_223 = 0x82,
  K_ASCII_224 = 0x83,
  K_ASCII_225 = 0x84,
  K_ASCII_228 = 0x85,
  K_ASCII_229 = 0x86,
  K_ASCII_230 = 0x87,
  K_ASCII_231 = 0x88,
  K_ASCII_232 = 0x89,
  K_ASCII_233 = 0x8A,
  K_ASCII_236 = 0x8B,
  K_ASCII_241 = 0x8C,
  K_ASCII_242 = 0x8D,
  K_ASCII_243 = 0x8E,
  K_ASCII_246 = 0x8F,
  K_ASCII_248 = 0x90,
  K_ASCII_249 = 0x91,
  K_ASCII_250 = 0x92,
  K_ASCII_252 = 0x93,
  K_END_ASCII_CHARS = 0x94,
  K_COMMAND = 0x96,
  K_CAPSLOCK = 0x97,
  K_POWER = 0x98,
  K_PAUSE = 0x99,
  K_UPARROW = 0x9A,
  K_DOWNARROW = 0x9B,
  K_LEFTARROW = 0x9C,
  K_RIGHTARROW = 0x9D,
  K_ALT = 0x9E,
  K_CTRL = 0x9F,
  K_SHIFT = 0xA0,
  K_INS = 0xA1,
  K_DEL = 0xA2,
  K_PGDN = 0xA3,
  K_PGUP = 0xA4,
  K_HOME = 0xA5,
  K_END = 0xA6,
  K_F1 = 0xA7,
  K_F2 = 0xA8,
  K_F3 = 0xA9,
  K_F4 = 0xAA,
  K_F5 = 0xAB,
  K_F6 = 0xAC,
  K_F7 = 0xAD,
  K_F8 = 0xAE,
  K_F9 = 0xAF,
  K_F10 = 0xB0,
  K_F11 = 0xB1,
  K_F12 = 0xB2,
  K_F13 = 0xB3,
  K_F14 = 0xB4,
  K_F15 = 0xB5,
  K_KP_HOME = 0xB6,
  K_KP_UPARROW = 0xB7,
  K_KP_PGUP = 0xB8,
  K_KP_LEFTARROW = 0xB9,
  K_KP_5 = 0xBA,
  K_KP_RIGHTARROW = 0xBB,
  K_KP_END = 0xBC,
  K_KP_DOWNARROW = 0xBD,
  K_KP_PGDN = 0xBE,
  K_KP_ENTER = 0xBF,
  K_KP_INS = 0xC0,
  K_KP_DEL = 0xC1,
  K_KP_SLASH = 0xC2,
  K_KP_MINUS = 0xC3,
  K_KP_PLUS = 0xC4,
  K_KP_NUMLOCK = 0xC5,
  K_KP_STAR = 0xC6,
  K_KP_EQUALS = 0xC7,
  K_MOUSE1 = 0xC8,
  K_MOUSE2 = 0xC9,
  K_MOUSE3 = 0xCA,
  K_MOUSE4 = 0xCB,
  K_MOUSE5 = 0xCC,
  K_MWHEELDOWN = 0xCD,
  K_MWHEELUP = 0xCE,
  K_AUX1 = 0xCF,
  K_AUX2 = 0xD0,
  K_AUX3 = 0xD1,
  K_AUX4 = 0xD2,
  K_AUX5 = 0xD3,
  K_AUX6 = 0xD4,
  K_AUX7 = 0xD5,
  K_AUX8 = 0xD6,
  K_AUX9 = 0xD7,
  K_AUX10 = 0xD8,
  K_AUX11 = 0xD9,
  K_AUX12 = 0xDA,
  K_AUX13 = 0xDB,
  K_AUX14 = 0xDC,
  K_AUX15 = 0xDD,
  K_AUX16 = 0xDE,
  K_LAST_KEY = 0xDF,
};

/* 160 */
enum $F36B89AFE41872EC704FA5D6F4ACF1ED
{
  COMPASSENEMY_ELEVATION_LEVEL = 0x0,
  COMPASSENEMY_ELEVATION_ABOVE = 0x1,
  COMPASSENEMY_ELEVATION_BELOW = 0x2,
  COMPASSENEMY_ELEVATION_COUNT = 0x3,
};

/* 161 */
enum $2A43C4961FB2D14511BD9B618BEAE076
{
  BITS_PER_WORD = 0x20,
  WORD_COUNT = 0x6,
};

/* 162 */
enum $2E07021A25434E0C2CCFB5F9DBC72881
{
  COMPASSENEMY_STATUS_NOTFIRING = 0x0,
  COMPASSENEMY_STATUS_FIRING = 0x1,
  COMPASSENEMY_STATUS_COUNT = 0x2,
};

/* 163 */
enum $6EEFF8BE0919C71BE1A26839EF8B02D0
{
  MT_NODE_SIZE = 0xC,
};

/* 164 */
enum $6E2C0171D4EB80DF1D06D40CD9874C4C
{
  MEMORY_NODE_BITS = 0x12,
  MEMORY_NODE_COUNT = 0x40000,
  MT_SIZE = 0x300000,
  REFSTRING_STRING_OFFSET = 0x4,
};

/* 165 */
enum $2C72D027C5BC3DADFA7C4DF5C9EDB604
{
  STRINGLIST_SIZE = 0x10000,
};

/* 166 */
enum XAnimIKType
{
  XANIM_IK_ACTOR_LEFT_HAND = 0x0,
  XANIM_IK_NUM_TYPES = 0x1,
  XANIM_IK_NONE = 0x2,
};

/* 167 */
enum $00F75C6066B2B90A0A6FBA9E44EE688D
{
  BIND_VOID = 0x0,
  BIND_ATTACK1 = 0x1,
  BIND_ATTACK0 = 0x2,
  BIND_MELEE1 = 0x3,
  BIND_MELEE0 = 0x4,
  BIND_FRAG1 = 0x5,
  BIND_FRAG0 = 0x6,
  BIND_SMOKE1 = 0x7,
  BIND_SMOKE0 = 0x8,
  BIND_BREATH_SPRINT1 = 0x9,
  BIND_BREATH_SPRINT0 = 0xA,
  BIND_USERELOAD1 = 0xB,
  BIND_USERELOAD0 = 0xC,
  BIND_SPEED_THROW1 = 0xD,
  BIND_SPEED_THROW0 = 0xE,
  BIND_ACTIONSLOT11 = 0xF,
  BIND_ACTIONSLOT10 = 0x10,
  BIND_ACTIONSLOT21 = 0x11,
  BIND_ACTIONSLOT20 = 0x12,
  BIND_ACTIONSLOT31 = 0x13,
  BIND_ACTIONSLOT30 = 0x14,
  BIND_ACTIONSLOT41 = 0x15,
  BIND_ACTIONSLOT40 = 0x16,
  BIND_STANCE1 = 0x17,
  BIND_STANCE0 = 0x18,
  BIND_GOSTAND1 = 0x19,
  BIND_GOSTAND0 = 0x1A,
  BIND_MELEE_ZOOM1 = 0x1B,
  BIND_MELEE_ZOOM0 = 0x1C,
  BIND_CHANGEZOOM1 = 0x1D,
  BIND_CHANGEZOOM0 = 0x1E,
  BIND_ADS_AKIMBO_ACCESSIBLE1 = 0x1F,
  BIND_ADS_AKIMBO_ACCESSIBLE0 = 0x20,
  BIND_ATTACK_AKIMBO_ACCESSIBLE1 = 0x21,
  BIND_ATTACK_AKIMBO_ACCESSIBLE0 = 0x22,
  BIND_MELEE_BREATH1 = 0x23,
  BIND_MELEE_BREATH0 = 0x24,
  BIND_SPRINT_ZOOM1 = 0x25,
  BIND_SPRINT_ZOOM0 = 0x26,
  BIND_FIRST_NON_UP_DOWN = 0x27,
  BIND_TOGGLEMENU = 0x27,
  BIND_WEAPNEXT = 0x28,
  BIND_PAUSE = 0x29,
  BIND_CHATMODEPUBLIC = 0x2A,
  BIND_CHATMODETEAM = 0x2B,
  BIND_TOGGLESCORES = 0x2C,
  BIND_COUNT = 0x2D,
};

/* 168 */
enum IK_TAG_PRIORITIES
{
  FOREGRIP_IK_PRIORITY = 0x0,
  SHOTGUN_IK_PRIORITY = 0x1,
  LAUNCHER_IK_PRIORITY = 0x2,
  DEFAULT_IK_PRIORITY = 0x3,
  NUM_IK_PRIORITIES = 0x4,
};

/* 169 */
enum print_msg_dest_t
{
  CON_DEST_GAME_FIRST = 0x0,
  CON_DEST_GAME1 = 0x0,
  CON_DEST_GAME2 = 0x1,
  CON_DEST_GAME3 = 0x2,
  CON_DEST_GAME4 = 0x3,
  CON_DEST_GAME_LAST = 0x3,
  CON_DEST_COUNT = 0x4,
};

/* 170 */
enum CTAudFlag
{
  CTAUD_REVERB = 0x1,
  CTAUD_MIX = 0x2,
  CTAUD_FILTER = 0x4,
  CTAUD_OCCLUSION = 0x8,
  CTAUD_AMBIENT = 0x10,
  CTAUD_AMBIENT_EVENTS = 0x20,
  CTAUD_PLAYER_ADSR = 0x40,
  CTAUD_ALL = 0x7F,
};

/* 171 */
enum MapVoteIndicies
{
  MAP_VOTE_ENTRY_FIRST = 0x0,
  MAP_VOTE_ENTRY_SECOND = 0x1,
  NUM_MAP_VOTE_ENTRIES = 0x2,
};

/* 172 */
enum $4BF563C2792CB88B3C979E0B0BD7AADE
{
  FX_MARK_VISUALS_CLASS_MODEL_INDEX = 0x0,
  FX_MARK_VISUALS_CLASS_WORLD_INDEX = 0x1,
  FX_MARK_VISUALS_CLASS_WORLD_DISPLACED_INDEX = 0x2,
  FX_MARK_VISUALS_CLASS_COUNT = 0x3,
};

/* 173 */
enum HudObjectiveIcon
{
  HUD_OBJ_SAME = 0x0,
  HUD_OBJ_NUM = 0x1,
};

/* 174 */
enum $F54CAB3E37A84FA16AFBEBB248D4A126
{
  XANIM_LOOP_SYNC_TIME = 0x1,
  XANIM_NONLOOP_SYNC_TIME = 0x2,
  XANIM_SYNC_ROOT = 0x4,
  XANIM_COMPLETE = 0x8,
  XANIM_ADDITIVE = 0x10,
};

/* 175 */
enum snd_alias_system_t
{
  SASYS_UI = 0x0,
  SASYS_CGAME = 0x1,
  SASYS_GAME = 0x2,
  SASYS_COUNT = 0x3,
};

/* 176 */
enum snd_overlay_type_t
{
  SND_OVERLAY_NONE = 0x0,
  SND_OVERLAY_3D = 0x1,
  SND_OVERLAY_STREAM = 0x2,
  SND_OVERLAY_2D = 0x3,
  SND_OVERLAY_3D_VOLS = 0x4,
  SND_OVERLAY_STREAM_VOLS = 0x5,
  SND_OVERLAY_2D_VOLS = 0x6,
};

/* 177 */
enum SndLengthId
{
  SndLengthNotify_Subtitle = 0x0,
  SndLengthNotify_EntityCustom = 0x1,
  SndLengthNotifyCount = 0x2,
};

/* 178 */
enum animScriptTransitionTriggerType_t
{
  ANIM_TRANSITIONTRIGGERTYPE_MOVETYPE = 0x0,
  ANIM_TRANSITIONTRIGGERTYPE_MOVETYPE_NOT_STRAFING = 0x1,
  ANIM_TRANSITIONTRIGGERTYPE_ANIMCOMPLETE = 0x2,
  ANIM_TRANSITIONTRIGGERTYPE_ANIMCHANGE = 0x3,
  NUM_ANIM_TRANSITION_TRIGGER_TYPES = 0x4,
};

/* 179 */
enum connstate_t
{
  CA_DISCONNECTED = 0x0,
  CA_CINEMATIC = 0x1,
  CA_LOGO = 0x2,
  CA_CONNECTING = 0x3,
  CA_CHALLENGING = 0x4,
  CA_CONNECTED = 0x5,
  CA_SENDINGSTATS = 0x6,
  CA_SYNCHRONIZING_DATA = 0x7,
  CA_LOADING = 0x8,
  CA_PRIMED = 0x9,
  CA_ACTIVE = 0xA,
};

/* 180 */
enum StanceState
{
  CL_STANCE_STAND = 0x0,
  CL_STANCE_CROUCH = 0x1,
  CL_STANCE_PRONE = 0x2,
  CL_STANCE_SLIDE = 0x3,
};

/* 181 */
enum damageType
{
  WHIZBY = 0x0,
  NORMAL = 0x1,
  STUN = 0x2,
};

/* 182 */
enum DemoType
{
  DEMO_TYPE_NONE = 0x0,
  DEMO_TYPE_CLIENT = 0x1,
  DEMO_TYPE_SERVER = 0x2,
};

/* 183 */
enum CubemapShot
{
  CUBEMAPSHOT_NONE = 0x0,
  CUBEMAPSHOT_RIGHT = 0x1,
  CUBEMAPSHOT_LEFT = 0x2,
  CUBEMAPSHOT_BACK = 0x3,
  CUBEMAPSHOT_FRONT = 0x4,
  CUBEMAPSHOT_UP = 0x5,
  CUBEMAPSHOT_DOWN = 0x6,
  CUBEMAPSHOT_COUNT = 0x7,
};

/* 184 */
enum InvalidCmdHintType
{
  INVALID_CMD_NONE = 0x0,
  INVALID_CMD_NO_AMMO_BULLETS = 0x1,
  INVALID_CMD_NO_AMMO_GRENADE = 0x2,
  INVALID_CMD_STAND_BLOCKED = 0x3,
  INVALID_CMD_CROUCH_BLOCKED = 0x4,
  INVALID_CMD_PRONE_BLOCKED = 0x5,
  INVALID_CMD_TARGET_TOO_CLOSE = 0x6,
  INVALID_CMD_LOCKON_REQUIRED = 0x7,
  INVALID_CMD_NOT_ENOUGH_CLEARANCE = 0x8,
  INVALID_CMD_NO_AMMO_SPECIAL = 0x9,
};

/* 185 */
enum KillCamEntityType
{
  KC_NO_ENTITY = 0x0,
  KC_HELICOPTER = 0x1,
  KC_AIRSTRIKE = 0x2,
  KC_EXPLOSIVE = 0x3,
  KC_FAST_EXPLOSIVE = 0x4,
  KC_ROCKET = 0x5,
  KC_ROCKET_CORPSE = 0x6,
  KC_TURRET = 0x7,
  KC_JAVELIN = 0x8,
  KC_REMOTE_MISSILE = 0x9,
};

/* 186 */
enum KillCamEntityRestState
{
  KC_ENT_MOVING = 0x0,
  KC_ENT_AT_REST = 0x1,
  KC_ENT_STUCK_GROUND = 0x2,
  KC_ENT_STUCK_WALL = 0x3,
  KC_ENT_STUCK_PERSON = 0x4,
};

/* 187 */
enum visionSetLerpStyle_t
{
  VISIONSETLERP_UNDEFINED = 0x0,
  VISIONSETLERP_NONE = 0x1,
  VISIONSETLERP_SMOOTH = 0x2,
};

/* 188 */
enum SpawnPointVisibility
{
  SPAWNPOINTVIS_NONE = 0x0,
  SPAWNPOINTVIS_PARTIAL = 0x1,
  SPAWNPOINTVIS_FULL = 0x2,
};

/* 189 */
enum ShockViewTypes
{
  SHELLSHOCK_VIEWTYPE_BLURRED = 0x0,
  SHELLSHOCK_VIEWTYPE_FLASHED = 0x1,
  SHELLSHOCK_VIEWTYPE_NONE = 0x2,
};

/* 190 */
enum $15ECC96D9C0E42899A1476BDB4AB35E1
{
  PMOVE_HANDLER_CLIENT = 0x0,
  PMOVE_HANDLER_SERVER = 0x1,
  PMOVE_HANDLER_COUNT = 0x2,
};

/* 191 */
enum ClassNum
{
  CLASS_NUM_ENTITY = 0x0,
  CLASS_NUM_HUDELEM = 0x1,
  CLASS_NUM_PATHNODE = 0x2,
  CLASS_NUM_VEHICLENODE = 0x3,
  CLASS_NUM_VEHTRACK_SEGMENT = 0x4,
  CLASS_NUM_FXENTITY = 0x5,
  CLASS_NUM_COUNT = 0x6,
};

/* 192 */
enum VehicleType
{
  VEH_WHEELS_4 = 0x0,
  VEH_TANK = 0x1,
  VEH_PLANE = 0x2,
  VEH_BOAT = 0x3,
  VEH_ARTILLERY = 0x4,
  VEH_HELICOPTER = 0x5,
  VEH_SNOWMOBILE = 0x6,
  VEH_SUBMARINE = 0x7,
  VEH_UGV = 0x8,
  VEH_TYPE_COUNT = 0x9,
};

/* 193 */
enum VehCamZOffsetMode
{
  VEHCAM_ZMODE_WORLD = 0x0,
  VEHCAM_ZMODE_VEHICLE = 0x1,
  VEHCAM_ZMODE_VIEW = 0x2,
  VEHCAM_ZMODE_COUNT = 0x3,
};

/* 194 */
enum VehicleTurretFireType
{
  VEH_TURRET_SINGLE_FIRE = 0x0,
  VEH_TURRET_DUAL_FIRE = 0x1,
  VEH_TURRET_ALT_FIRE = 0x2,
  VEH_TURRET_FIRE_TYPE_COUNT = 0x3,
};

/* 195 */
enum VehicleAxleType
{
  VEH_AXLE_FRONT = 0x0,
  VEH_AXLE_REAR = 0x1,
  VEH_AXLE_ALL = 0x2,
  VEH_AXLE_COUNT = 0x3,
};

/* 196 */
enum clc_ops_e
{
  clc_move = 0x0,
  clc_moveNoDelta = 0x1,
  clc_clientCommand = 0x2,
  clc_EOF = 0x3,
};

/* 197 */
enum operationEnum
{
  OP_NOOP = 0x0,
  OP_RIGHTPAREN = 0x1,
  OP_MULTIPLY = 0x2,
  OP_DIVIDE = 0x3,
  OP_MODULUS = 0x4,
  OP_ADD = 0x5,
  OP_SUBTRACT = 0x6,
  OP_NOT = 0x7,
  OP_LESSTHAN = 0x8,
  OP_LESSTHANEQUALTO = 0x9,
  OP_GREATERTHAN = 0xA,
  OP_GREATERTHANEQUALTO = 0xB,
  OP_EQUALS = 0xC,
  OP_NOTEQUAL = 0xD,
  OP_AND = 0xE,
  OP_OR = 0xF,
  OP_LEFTPAREN = 0x10,
  OP_COMMA = 0x11,
  OP_BITWISEAND = 0x12,
  OP_BITWISEOR = 0x13,
  OP_BITWISENOT = 0x14,
  OP_BITSHIFTLEFT = 0x15,
  OP_BITSHIFTRIGHT = 0x16,
  OP_STATICDVARINT = 0x17,
  OP_FIRSTFUNCTIONCALL = 0x17,
  OP_STATICDVARBOOL = 0x18,
  OP_STATICDVARFLOAT = 0x19,
  OP_STATICDVARSTRING = 0x1A,
  OP_TOINT = 0x1B,
  OP_TOSTRING = 0x1C,
  OP_TOFLOAT = 0x1D,
  LAST_COMMONLY_CALLED_FUNCTION = 0x1D,
  OP_SIN = 0x1E,
  OP_COS = 0x1F,
  OP_MIN = 0x20,
  OP_MAX = 0x21,
  OP_MILLISECONDS = 0x22,
  OP_LOCALCLIENTUIMILLISECONDS = 0x23,
  OP_DVARINT = 0x24,
  OP_DVARBOOL = 0x25,
  OP_DVARFLOAT = 0x26,
  OP_DVARSTRING = 0x27,
  OP_UIACTIVE = 0x28,
  OP_FLASHBANGED = 0x29,
  OP_USINGVEHICLE = 0x2A,
  OP_MISSILECAM = 0x2B,
  OP_SCOPED = 0x2C,
  OP_SCOPEDTHERMAL = 0x2D,
  OP_SCOREBOARDVISIBLE = 0x2E,
  OP_INKILLCAM = 0x2F,
  OP_INKILLCAM_NPC = 0x30,
  OP_PLAYERFIELD = 0x31,
  OP_GET_PLAYER_PERK = 0x32,
  OP_SELECTINGLOCATION = 0x33,
  OP_SELECTINGDIRECTION = 0x34,
  OP_TEAMFIELD = 0x35,
  OP_OTHERTEAMFIELD = 0x36,
  OP_MARINESFIELD = 0x37,
  OP_OPFORFIELD = 0x38,
  OP_MENUISOPEN = 0x39,
  OP_WRITINGDATA = 0x3A,
  OP_INLOBBY = 0x3B,
  OP_INGAMELOBBY = 0x3C,
  OP_INPRIVATEPARTY = 0x3D,
  OP_PRIVATEPARTYHOST = 0x3E,
  OP_PRIVATEPARTYHOSTINLOBBY = 0x3F,
  OP_ALONEINPARTY = 0x40,
  OP_ADSJAVELIN = 0x41,
  OP_WEAPLOCKBLINK = 0x42,
  OP_WEAPATTACKTOP = 0x43,
  OP_WEAPATTACKDIRECT = 0x44,
  OP_WEAPLOCKING = 0x45,
  OP_WEAPLOCKED = 0x46,
  OP_WEAPLOCKTOOCLOSE = 0x47,
  OP_WEAPLOCKSCREENPOSX = 0x48,
  OP_WEAPLOCKSCREENPOSY = 0x49,
  OP_SECONDSASTIME = 0x4A,
  OP_TABLELOOKUP = 0x4B,
  OP_TABLELOOKUPBYROW = 0x4C,
  OP_TABLEGETROWNUM = 0x4D,
  OP_LOCALIZESTRING = 0x4E,
  OP_LOCALVARINT = 0x4F,
  OP_LOCALVARBOOL = 0x50,
  OP_LOCALVARFLOAT = 0x51,
  OP_LOCALVARSTRING = 0x52,
  OP_TIMELEFT = 0x53,
  OP_SECONDSASCOUNTDOWN = 0x54,
  OP_GAMEMSGWNDACTIVE = 0x55,
  OP_GAMETYPENAME = 0x56,
  OP_GAMETYPE = 0x57,
  OP_GAMETYPEDESCRIPTION = 0x58,
  OP_SCORE = 0x59,
  OP_FOLLOWING = 0x5A,
  OP_SPECTATINGFREE = 0x5B,
  OP_KEYBINDING = 0x5C,
  OP_ACTIONSLOTUSABLE = 0x5D,
  OP_HUDFADE = 0x5E,
  OP_MAXPLAYERS = 0x5F,
  OP_ACCEPTINGINVITE = 0x60,
  OP_ISINTERMISSION = 0x61,
  OP_GAMEHOST = 0x62,
  OP_PARTYHASMISSINGMAPPACK = 0x63,
  OP_PARTYMISSINGMAPPACKERROR = 0x64,
  OP_ANYNEWMAPPACKS = 0x65,
  OP_AMISELECTED = 0x66,
  OP_PARTYSTATUSSTRING = 0x67,
  OP_ATTACHED_CONTROLLER_COUNT = 0x68,
  OP_IS_SPLIT_SCREEN_ONLINE_POSSIBLE = 0x69,
  OP_SPLITSCREENPLAYERCOUNT = 0x6A,
  OP_GETPLAYERDATA = 0x6B,
  OP_GETPLAYERDATASPLITSCREEN = 0x6C,
  OP_GET_MATCHRULES_DATA = 0x6D,
  OP_GET_SAVED_MATCHRULES_METADATA = 0x6E,
  OP_LEVEL_FOR_EXPERIENCE_MP = 0x6F,
  OP_LEVEL_FOR_EXPERIENCE_SO = 0x70,
  OP_IS_ITEM_UNLOCKED = 0x71,
  OP_IS_ITEM_UNLOCKEDSPLITSCREEN = 0x72,
  OP_IS_CARDICON_UNLOCKED = 0x73,
  OP_IS_CARDTITLE_UNLOCKED = 0x74,
  OP_IS_CARDICON_NEW = 0x75,
  OP_IS_CARDTITLE_NEW = 0x76,
  OP_IS_CARDICON_UNLOCKED_SPLITSCREEN = 0x77,
  OP_IS_CARDTITLE_UNLOCKED_SPLITSCREEN = 0x78,
  OP_IS_CARDICON_NEW_SPLITSCREEN = 0x79,
  OP_IS_CARDTITLE_NEW_SPLITSCREEN = 0x7A,
  OP_IS_PROFILEITEM_UNLOCKED = 0x7B,
  OP_IS_PROFILEITEM_UNLOCKED_SPLITSCREEN = 0x7C,
  OP_IS_PROFILEITEM_NEW = 0x7D,
  OP_IS_PROFILEITEM_NEW_SPLITSCREEN = 0x7E,
  OP_DEBUG_PRINT = 0x7F,
  OP_GETPLAYERDATA_ANYBOOLTRUE = 0x80,
  OP_GETPROFILE_ANYBOOLTRUE = 0x81,
  OP_WEAPON_CLASS_NEW = 0x82,
  OP_WEAPONNAME = 0x83,
  OP_ISRELOADING = 0x84,
  OP_SAVE_GAME_AVAILABLE = 0x85,
  OP_UNLOCKED_ITEM_COUNT = 0x86,
  OP_UNLOCKED_ITEM_COUNT_SPLITSCREEN = 0x87,
  OP_UNLOCKED_ITEM = 0x88,
  OP_UNLOCKED_ITEM_SPLITSCREEN = 0x89,
  OP_RADAR_IS_JAMMED = 0x8A,
  OP_RADAR_JAM_INTENSITY = 0x8B,
  OP_RADAR_IS_ENABLED = 0x8C,
  OP_EMP_JAMMED = 0x8D,
  OP_PLAYERADS = 0x8E,
  OP_WEAPON_HEAT_ACTIVE = 0x8F,
  OP_WEAPON_HEAT_VALUE = 0x90,
  OP_WEAPON_HEAT_OVERHEATED = 0x91,
  OP_SPLASH_TEXT = 0x92,
  OP_SPLASH_DESCRIPTION = 0x93,
  OP_SPLASH_MATERIAL = 0x94,
  OP_SPLASH_HAS_ICON = 0x95,
  OP_SPLASH_ROWNUM = 0x96,
  OP_GETFOCUSED_NAME = 0x97,
  OP_GETFOCUSED_X = 0x98,
  OP_GETFOCUSED_Y = 0x99,
  OP_GETFOCUSED_W = 0x9A,
  OP_GETFOCUSED_H = 0x9B,
  OP_GETITEMDEF_X = 0x9C,
  OP_GETITEMDEF_Y = 0x9D,
  OP_GETITEMDEF_W = 0x9E,
  OP_GETITEMDEF_H = 0x9F,
  OP_PLAYLISTFIELD = 0xA0,
  OP_SCOREBOARD_EXTERNALMUTE_NOTICE = 0xA1,
  OP_CLIENT_MATCH_DATA = 0xA2,
  OP_CLIENT_MATCH_DATA_DEF = 0xA3,
  OP_GET_MAP_NAME = 0xA4,
  OP_GET_MAP_IMAGE = 0xA5,
  OP_GET_MAP_CUSTOM = 0xA6,
  OP_GET_MIGRATION_STATUS = 0xA7,
  OP_GET_PLAYERCARD_INFO = 0xA8,
  OP_IS_OFFLINE_PROFILE_SELECTED = 0xA9,
  OP_COOP_PLAYERFIELD = 0xAA,
  OP_IS_COOP = 0xAB,
  OP_GETPARTYSTATUS = 0xAC,
  OP_GETSEARCHPARAMS = 0xAD,
  OP_GETTIMEPLAYED = 0xAE,
  OP_IS_SELECTED_PLAYER_FRIEND = 0xAF,
  OP_GETCHARBYINDEX = 0xB0,
  OP_GETPLAYERPROFILEDATA = 0xB1,
  OP_GETPLAYERPROFILEDATASPLITSCREEN = 0xB2,
  OP_IS_PROFILE_SIGNED_IN = 0xB3,
  OP_GET_WAIT_POPUP_STATUS = 0xB4,
  OP_GETNATTYPE = 0xB5,
  OP_GETLOCALIZEDNATTYPE = 0xB6,
  OP_GET_ADJUSTED_SAFEAREA_HORIZONTAL = 0xB7,
  OP_GET_ADJUSTED_SAFEAREA_VERTICAL = 0xB8,
  OP_CONNECTION_INFO = 0xB9,
  OP_OFFLINE_PROFILE_CAN_SAVE = 0xBA,
  OP_USER_WITHOUT_OFFLINE_PROFILE = 0xBB,
  OP_ALL_SPLITSCREEN_PROFILES_CAN_SAVE = 0xBC,
  OP_ALL_SPLITSCREEN_PROFILES_ARE_SIGNED_IN = 0xBD,
  OP_DO_WE_HAVE_MAP_PACK = 0xBE,
  OP_MAY_INVITE_PLAYER_TO_PARTY = 0xBF,
  OP_GETPATCHNOTES = 0xC0,
  OP_GETGAMEINFOS = 0xC1,
  OP_COOP_READY = 0xC2,
  OP_VOTE_CAST = 0xC3,
  OP_VOTE_PASSED = 0xC4,
  OP_GET_MAP_VOTE_MAP_IMAGE = 0xC5,
  OP_GET_MAP_VOTE_MAP_NAME = 0xC6,
  OP_GET_MAP_VOTE_GAME_TYPE_NAME = 0xC7,
  OP_IS_FRIEND_INVITABLE = 0xC8,
  OP_IS_FRIEND_JOINABLE = 0xC9,
  OP_GET_SORTED_CHALLENGE_INDEX = 0xCA,
  OP_GET_SORTED_CHALLENGE_NAME = 0xCB,
  OP_GET_SORTED_CHALLENGE_COUNT = 0xCC,
  OP_GET_FILTER_CHALLENGE_COUNT = 0xCD,
  OP_GET_FILTER_CHALLENGE_LOCKED_COUNT = 0xCE,
  OP_GET_FILTER_CHALLENGE_COMPLETE_COUNT = 0xCF,
  OP_IS_SORTED_CHALLENGE_TIERED = 0xD0,
  OP_GET_CHALLENGE_FILTER_CACHE_COUNT = 0xD1,
  OP_GET_CHALLENGE_FILTER_CACHE_COMPLETE_COUNT = 0xD2,
  OP_IS_COOP_SEARCHING = 0xD3,
  OP_IS_COOP_PUBLIC = 0xD4,
  OP_GET_COOP_DISPLAYABLE_GROUP_NUM = 0xD5,
  OP_COOP_HAS_REQUIRED_ONLINE_FILES = 0xD6,
  OP_GET_TEXTWIDTH = 0xD7,
  OP_GET_TEXTHEIGHT = 0xD8,
  OP_DEVELOPER = 0xD9,
  OP_IS_USING_AIRBURST_WEAPON = 0xDA,
  OP_GET_AIRBURST_METERS = 0xDB,
  OP_GET_CROSSHAIR_TRACE_METERS = 0xDC,
  OP_GET_FACEBOOK_STATUS_TEXT = 0xDD,
  OP_IS_FACEBOOK_LOGGED_IN = 0xDE,
  OP_IS_FACEBOOK_CHECKING = 0xDF,
  OP_IS_FACEBOOK_ALLOWED = 0xE0,
  OP_GETPRIVATELOBBYSTATUS = 0xE1,
  OP_INCLUDEDINMAPROTATION = 0xE2,
  OP_SELECT = 0xE3,
  OP_IS_DEMO_PLAYING = 0xE4,
  OP_GET_USER_GROUP_TEXT = 0xE5,
  OP_GET_USER_GROUP_COMMON_INTEREST_TOTAL = 0xE6,
  OP_IS_DEMO_FOLLOW_CAMERA = 0xE7,
  OP_IS_DEMO_FREE_CAMERA = 0xE8,
  OP_IS_DEMO_CAPTURING_SCREENSHOT = 0xE9,
  OP_PARTY_HOST_WAITING_ON_MEMBERS = 0xEA,
  OP_POPUP_PARTY_MEMBER_AWAY = 0xEB,
  OP_SELECTED_PARTY_MEMBER_AWAY = 0xEC,
  OP_GAMETIME = 0xED,
  OP_GAMEENDTIME = 0xEE,
  OP_HAS_FOCUS = 0xEF,
  OP_MENU_HAS_FOCUS = 0xF0,
  OP_GET_DEMO_SEGMENT_COUNT = 0xF1,
  OP_GET_DEMO_SEGMENT_INFORMATION = 0xF2,
  OP_IS_CLIP_MODIFIED = 0xF3,
  OP_IS_USING_RECIPE = 0xF4,
  OP_IS_GUEST = 0xF5,
  OP_GET_FACEBOOK_HELP_TEXT = 0xF6,
  OP_IS_ELITE_CLAN_ALLOWED = 0xF7,
  OP_IS_ENTITLEMENTS_ALLOWED = 0xF8,
  OP_IS_USERGROUPS_ALLOWED = 0xF9,
  OP_IS_WAITING_FOR_ONLINE_SERVICES = 0xFA,
  OP_GET_TEXTWIDTHMODCASE = 0xFB,
  OP_GET_SAVE_SCREEN_TITLE = 0xFC,
  OP_GET_SAVE_SCREEN_DESCRIPTION = 0xFD,
  OP_GET_ONLINEVAULT_SELECTEDITEM_DATA = 0xFE,
  OP_ONLINEVAULT_IS_RESTRICTED = 0xFF,
  OP_IS_CONTENTSERVER_TASK_IN_PROGRESS = 0x100,
  OP_IS_CONTENTSERVER_GET_TASK_PROGRESS = 0x101,
  OP_GET_RECENTGAMES_SELECTEDITEM_DATA = 0x102,
  OP_GAMETYPENAME_ABBREVIATED = 0x103,
  OP_GET_MAP_VOTE_GAME_TYPE_NAME_ABBREVIATED = 0x104,
  OP_IS_USER_SIGNED_IN_TO_LIVE = 0x105,
  OP_USER_CAN_PLAY_ONLINE = 0x106,
  OP_GET_FEEDER_DATA = 0x107,
  OP_PARTY_CLIENTS_UP_TO_DATE = 0x108,
  OP_TRUNCATETEXTWITHELLIPSIS = 0x109,
  OP_UI_STARTED = 0x10A,
  OP_CAN_RENDER_CLIP = 0x10B,
  OP_GET_PREVIEW_MAP_CUSTOM = 0x10C,
  OP_GET_DLC_MAPS_AVAILABLE_COUNT = 0x10D,
  OP_IS_USER_SIGNED_IN = 0x10E,
  OP_USINGINTERMISSIONTIMER = 0x10F,
  OP_ISUSINGCUSTOMMAPROTATION = 0x110,
  OP_MENU_IS_TOPMOST = 0x111,
  OP_FACEBOOK_IS_PLATFORM_FRIEND = 0x112,
  OP_ELITE_CLAN_IS_PLATFORM_FRIEND = 0x113,
  OP_ELITE_CLAN_IS_ME = 0x114,
  OP_ELITE_CLAN_IS_LEADER = 0x115,
  OP_IS_USER_SIGNED_IN_FOR_VAULT = 0x116,
  OP_GET_USING_MATCHRULES_DATA = 0x117,
  OP_CAN_USER_ACCESS_ONLINEVAULT = 0x118,
  OP_FRIEND_GET_GAMERTAG = 0x119,
  OP_RECENTPLAYER_GET_GAMERTAG = 0x11A,
  OP_LIVEPARTY_GET_GAMERTAG = 0x11B,
  OP_FACEBOOK_GET_GAMERTAG = 0x11C,
  OP_ELITECLAN_GET_GAMERTAG = 0x11D,
  OP_LIVEPARTY_IS_ME = 0x11E,
  OP_LIVEPARTY_IS_LOCAL = 0x11F,
  OP_DOUBLECLICK_WAS_RIGHT_CLICK = 0x120,
  OP_IS_DEMO_CLIP_RECORDING = 0x121,
  OP_GET_INDEX_FROM_STRING = 0x122,
  OP_GET_STRING_WIHTOUT_INDEX = 0x123,
  OP_ELITECLAN_GET_NAME = 0x124,
  OP_ELITECLAN_GET_HELP = 0x125,
  OP_ELITECLAN_GET_MOTD = 0x126,
  OP_ELITECLAN_IS_MEMBER = 0x127,
  OP_ELITECLAN_IS_EMBLEM_OK = 0x128,
  OP_FACEBOOKFRIENDS_SHOW_NEXT = 0x129,
  OP_FACEBOOKFRIENDS_SHOW_PREV = 0x12A,
  OP_GET_ONLINEVAULT_FRIEND_GAMERTAG = 0x12B,
  OP_GET_OBJECTIVE_LIST_HEIGHT = 0x12C,
  OP_IS_CLIENT_DEMO_ENABLED = 0x12D,
  OP_IS_USER_SIGNED_IN_TO_DEMONWARE = 0x12E,
  OP_IS_CUSTOM_CLASS_RESTRICTED = 0x12F,
  OP_IS_WEAPON_RESTRICTED = 0x130,
  OP_ANY_SPLITSCREEN_PROFILES_ARE_SIGNED_IN = 0x131,
  OP_IS_GUEST_SPLITSCREEN = 0x132,
  OP_IS_ITEM_UNLOCKED_BY_CLIENT = 0x133,
  OP_IS_ANY_USER_SIGNED_IN_TO_LIVE = 0x134,
  OP_SPLITSCREENACTIVEGAMEPADCOUNT = 0x135,
  OP_SHOW_FRIEND_PLAYERCARD = 0x136,
  OP_GET_FRIEND_PLAYERCARD_PRESENCE = 0x137,
  OP_SHOW_RECENT_PLAYERS_GROUP_ICON = 0x138,
  OP_GET_WRAPPED_TEXT_HEIGHT = 0x139,
  OP_CAN_SAVE = 0x13A,
  OP_GET_GAME_INVITES_COUNT = 0x13B,
  OP_IS_SPLITSCREEN_GAMER_LIVE_ENABLED = 0x13C,
  OP_SO_COOP_SHOW_COMMON_GROUP_ICON = 0x13D,
  OP_STRIP_COLORS_FROM_STRING = 0x13E,
  OP_CAN_USER_ACCESS_THEATRE = 0x13F,
  OP_IS_CHALLENGE_PERIODIC = 0x140,
  OP_GET_CHALLENGE_DATA = 0x141,
  OP_IS_ELITE_APP_PRESENT = 0x142,
  OP_ELITE_CLAN_SELECTED_IS_ME = 0x143,
  OP_ENOUGH_STORAGE_SPACE_FOR_CLIENT_DEMO = 0x144,
  OP_IS_USER_SIGNED_IN_FOR_COMMERCE = 0x145,
  OP_GET_FACEBOOK_MENU_TEXT = 0x146,
  OP_GET_FACEBOOK_IS_POSTING = 0x147,
  OP_MEET_PLAYER_IS_PLATFORM_FRIEND = 0x148,
  OP_IS_SELECTED_PLAYER_GUEST = 0x149,
  OP_GET_SPLITSCREEN_CONTROLLER_CLIENT_NUM = 0x14A,
  OP_IS_CLIENT_DEMO_ENABLED_SPLITSCREEN = 0x14B,
  OP_ITEM_CAN_TAKE_FOCUS = 0x14C,
  OP_GET_TIME_SINCE_LAST_DOUBLECLICK = 0x14D,
  OP_IS_SERVER_LIST_REFRESHING = 0x14E,
  OP_IS_RECIPE_NAME_VALID = 0x14F,
  OP_RECIPE_EXISTS = 0x150,
  OP_GET_FACEBOOK_OPTIONS_HELP_TEXT = 0x151,
  OP_DO_WE_HAVE_ALL_MAP_PACKS = 0x152,
  OP_IS_THERE_NEW_ELITE_ITEMS = 0x153,
  OP_IS_PAYING_SUBSCRIBER = 0x154,
  OP_LOCALUSER_HASMISSINGMAPPACK = 0x155,
  OP_LOCALUSER_MISSINGMAPPACKERROR = 0x156,
  OP_GET_FIRST_SPECOPS_DLC_MAP = 0x157,
  OP_LOCALUSER_MISSINGMAPNAME = 0x158,
  OP_SHOW_STORE_NEW = 0x159,
  OP_USINGBOTS = 0x15A,
  OP_BOTSALLOWED = 0x15B,
  OP_ISCOLORBLIND = 0x15C,
  OP_BOTSCONNECTTYPE = 0x15D,
  OP_BOTSDIFFICULTY = 0x15E,
  OP_SPECTATINGTHIRD = 0x15F,
  OP_GETPLAYERNAME = 0x160,
  OP_SQUAD_SHOW_REPORT = 0x161,
  OP_GETRANKEDPLAYERDATA = 0x162,
  OP_GETPRIVATEPLAYERDATA = 0x163,
  OP_GETCOOPPLAYERDATA = 0x164,
  OP_GETCOMMONPLAYERDATA = 0x165,
  OP_GETRANKEDPLAYERDATASPLITSCREEN = 0x166,
  OP_GETPRIVATEPLAYERDATASPLITSCREEN = 0x167,
  OP_GETCOOPPLAYERDATASPLITSCREEN = 0x168,
  OP_GETCOMMONPLAYERDATASPLITSCREEN = 0x169,
  NUM_OPERATORS = 0x16A,
};

/* 198 */
enum CodPlayMode
{
  CODPLAYMODE_NONE = 0x0,
  CODPLAYMODE_SP = 0x1,
  CODPLAYMODE_CORE = 0x2,
  CODPLAYMODE_ALIENS = 0x3,
  CODPLAYMODE_SQUADVSSQUAD = 0x4,
  CODPLAYMODE_COUNT = 0x5,
};

/* 199 */
enum DSPlayerRemoveReason
{
  DSPlayerRemoveReasonPartyLeave = 0x0,
  DSPlayerRemoveReasonNotInParty = 0x1,
  DSPlayerRemoveReasonHostMigration = 0x2,
  DSPlayerRemoveReasonDuplicateJoin = 0x3,
  DSPlayerRemoveReasonP2PAuth = 0x4,
  DSPlayerRemoveReasonCount = 0x5,
  DSPlayerRemoveReasonBits = 0x3,
};

/* 200 */
enum PartyEndType
{
  PARTY_END_STOPPED = 0x0,
  PARTY_END_REMOVED = 0x1,
  PARTY_END_BACKOUT = 0x2,
  PARTY_END_COUNT = 0x3,
};

/* 201 */
enum MatchRulesReturnCode
{
  MR_RETCODE_CORRUPT = 0xFFFFFFFD,
  MR_RETCODE_ERROR = 0xFFFFFFFF,
  MR_RETCODE_FALSE = 0x0,
  MR_RETCODE_TRUE = 0x1,
  MR_RETCODE_NO_EFFECT = 0x0,
  MR_RETCODE_DATA_CHANGED = 0x1,
  MR_RETCODE_INVALID_SAVEDEVICE = 0xFFFFFFFE,
  MR_RETCODE_INCOMPLETE = 0x0,
  MR_RETCODE_COMPLETE = 0x1,
};

/* 202 */
enum MatchRulesSaveHeaderLookup
{
  RECIPE_LOOKUP_TIMESTAMP = 0x0,
  RECIPE_LOOKUP_RAW_GAMETYPE = 0x1,
  RECIPE_LOOKUP_GAMETYPE = 0x2,
  RECIPE_LOOKUP_NAME = 0x3,
  RECIPE_LOOKUP_COUNT = 0x4,
  RECIPE_LOOKUP_INVALID = 0x5,
};

/* 203 */
enum MatchRulesSaveLocation
{
  MR_SAVELOC_PLAYERSAVED = 0x0,
  MR_SAVELOC_PLAYERHISTORY = 0x1,
  MR_SAVELOC_COUNT = 0x2,
};

/* 204 */
enum expDataType
{
  VAL_INT = 0x0,
  VAL_FLOAT = 0x1,
  VAL_STRING = 0x2,
  NUM_INTERNAL_DATATYPES = 0x3,
  VAL_FUNCTION = 0x3,
  NUM_DATATYPES = 0x4,
};

/* 205 */
enum StructuredDataTypeCategory
{
  DATA_INT = 0x0,
  DATA_BYTE = 0x1,
  DATA_BOOL = 0x2,
  DATA_STRING = 0x3,
  DATA_ENUM = 0x4,
  DATA_STRUCT = 0x5,
  DATA_INDEXED_ARRAY = 0x6,
  DATA_ENUM_ARRAY = 0x7,
  DATA_FLOAT = 0x8,
  DATA_SHORT = 0x9,
  DATA_COUNT = 0xA,
};

/* 206 */
enum MatchRulesNotify
{
  MRNOTIFY_FAILED_TO_LOAD = 0x0,
  MRNOTIFY_FAILED_TO_SAVE = 0x1,
  MRNOTIFY_COUNT = 0x2,
};

/* 207 */
enum errorParm_t
{
  ERR_FATAL = 0x0,
  ERR_DROP = 0x1,
  ERR_SERVERDISCONNECT = 0x2,
  ERR_DISCONNECT = 0x3,
  ERR_SCRIPT = 0x4,
  ERR_SCRIPT_DROP = 0x5,
  ERR_LOCALIZATION = 0x6,
  ERR_MAPLOADERRORSUMMARY = 0x7,
};

/* 208 */
enum $09A54B695E5F2AC08500BAE6316946AE
{
  GENERIC_MATCHRULES_LOAD_ERROR = 0x0,
  GENERIC_MATCHRULES_READ_ERROR = 0x1,
  GENERIC_ERROR_COUNT = 0x2,
};

/* 209 */
enum $EDD38D6A57EF43793B1F773859FC039A
{
  FS_SEEK_CUR = 0x0,
  FS_SEEK_END = 0x1,
  FS_SEEK_SET = 0x2,
};

/* 210 */
enum LookupResultDataType
{
  LOOKUP_RESULT_INT = 0x0,
  LOOKUP_RESULT_BOOL = 0x1,
  LOOKUP_RESULT_STRING = 0x2,
  LOOKUP_RESULT_FLOAT = 0x3,
  LOOKUP_RESULT_SHORT = 0x4,
};

/* 211 */
enum LookupState
{
  LOOKUP_IN_PROGRESS = 0x0,
  LOOKUP_FINISHED = 0x1,
  LOOKUP_ERROR = 0x2,
};

/* 212 */
enum StructuredData_SetResult
{
  SETRESULT_SUCCESS_CHANGED = 0x0,
  SETRESULT_SUCCESS_NOCHANGE = 0x1,
  SETRESULT_WRONG_DATA_TYPE = 0x2,
  SETRESULT_ERROR_INT_TOO_LARGE_FOR_BYTE = 0x3,
  SETRESULT_ERROR_STRING_TOO_LONG = 0x4,
  SETRESULT_ERROR_INVALID_ENUM_VALUE = 0x5,
  SETRESULT_COUNT = 0x6,
};

/* 213 */
enum StructuredDataValidationType
{
  VALIDATION_NONE = 0x0,
  VALIDATION_CONSTANT = 0x1,
  VALIDATION_INCREASECLAMP = 0x2,
  VALIDATION_INCREASESTRICT = 0x3,
  VALIDATION_DELTACLAMP = 0x4,
  VALIDATION_DELTASTRICT = 0x5,
  VALIDATION_XP = 0x6,
  VALIDATION_COUNT = 0x7,
};

/* 214 */
enum LbColType
{
  LBCOL_TYPE_NUMBER = 0x0,
  LBCOL_TYPE_TIME = 0x1,
  LBCOL_TYPE_LEVELXP = 0x2,
  LBCOL_TYPE_PRESTIGE = 0x3,
  LBCOL_TYPE_BIGNUMBER = 0x4,
  LBCOL_TYPE_PERCENT = 0x5,
  LBCOL_TYPE_TIME_FULL = 0x6,
  LBCOL_TYPE_COUNT = 0x7,
};

/* 215 */
enum LbAggType
{
  LBAGG_TYPE_MIN = 0x0,
  LBAGG_TYPE_MAX = 0x1,
  LBAGG_TYPE_SUM = 0x2,
  LBAGG_TYPE_LAST = 0x3,
  LBAGG_TYPE_COUNT = 0x4,
};

/* 216 */
enum LbUpdateType
{
  LBUPDATE_TYPE_NORMAL = 0x0,
  LBUPDATE_TYPE_RANK = 0x1,
  LBUPDATE_TYPE_COMBINE = 0x2,
  LBUPDATE_TYPE_COUNT = 0x3,
};

/* 217 */
enum UILocalVarType
{
  UILOCALVAR_INT = 0x0,
  UILOCALVAR_FLOAT = 0x1,
  UILOCALVAR_STRING = 0x2,
};

/* 218 */
enum serverState_t
{
  SS_DEAD = 0x0,
  SS_LOADING = 0x1,
  SS_GAME = 0x2,
};

/* 219 */
enum LiveClientDropType
{
  SV_LIVE_DROP_NONE = 0x0,
  SV_LIVE_DROP_DISCONNECT = 0x1,
  SV_LIVE_DROP_RMSG_LOST = 0x2,
  SV_LIVE_DROP_INACTIVE = 0x3,
  SV_LIVE_DROP_P2P_AUTH = 0x4,
  SV_LIVE_DROP_COUNT = 0x5,
};

/* 220 */
enum TestClientType
{
  TC_NONE = 0x0,
  TC_TEST_CLIENT = 0x1,
  TC_BOT = 0x2,
  TC_COUNT = 0x3,
};

/* 221 */
enum LookupError
{
  LOOKUP_ERROR_NONE = 0x0,
  LOOKUP_ERROR_WRONG_DATA_TYPE = 0x1,
  LOOKUP_ERROR_INDEX_OUTSIDE_BOUNDS = 0x2,
  LOOKUP_ERROR_INVALID_STRUCT_PROPERTY = 0x3,
  LOOKUP_ERROR_INVALID_ENUM_VALUE = 0x4,
  LOOKUP_ERROR_COUNT = 0x5,
};

/* 222 */
enum bot_difficulty_t
{
  BOT_DIFFICULTY_RECRUIT = 0x0,
  BOT_DIFFICULTY_REGULAR = 0x1,
  BOT_DIFFICULTY_HARDENED = 0x2,
  BOT_DIFFICULTY_VETERAN = 0x3,
  BOT_DIFFICULTY_DEFAULT = 0x4,
  BOT_DIFFICULTY_COUNT = 0x5,
};

/* 223 */
enum GameStateInfoInitOption
{
  GAMESTATEINFO_INITONCE = 0x0,
  GAMESTATEINFO_REINIT = 0x1,
};

/* 224 */
enum GameStateInfoIndex
{
  GAMESTATEINFO_HOST = 0x0,
  GAMESTATEINFO_CLIENT = 0x1,
};

/* 225 */
enum $E7F8A64E92EDFF134ABDD42A52CC879E
{
  STBI_default = 0x0,
  STBI_grey = 0x1,
  STBI_grey_alpha = 0x2,
  STBI_rgb = 0x3,
  STBI_rgb_alpha = 0x4,
};

/* 226 */
enum $0A515787AEC998A82A656FBEBEECF2D4
{
  F_none = 0x0,
  F_sub = 0x1,
  F_up = 0x2,
  F_avg = 0x3,
  F_paeth = 0x4,
  F_avg_first = 0x5,
  F_paeth_first = 0x6,
};

/* 227 */
enum $C74BE78AFF075BD999734DFED25D4AB6
{
  SCAN_load = 0x0,
  SCAN_type = 0x1,
  SCAN_header = 0x2,
};

/* 228 */
typedef D3D10_PRIMITIVE D3D_PRIMITIVE;

/* 229 */
enum D3D11_MESSAGE_ID
{
  D3D11_MESSAGE_ID_UNKNOWN = 0x0,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 0x1,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 0x2,
  D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 0x3,
  D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 0x4,
  D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 0x5,
  D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 0x6,
  D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 0x7,
  D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 0x8,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 0x9,
  D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 0xA,
  D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 0xB,
  D3D11_MESSAGE_ID_CORRUPTED_THIS = 0xC,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 0xD,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 0xE,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 0xF,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 0x10,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 0x11,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 0x12,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 0x13,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 0x14,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 0x15,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 0x16,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 0x17,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 0x18,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 0x19,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 0x1A,
  D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 0x1B,
  D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 0x1C,
  D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 0x1D,
  D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 0x1E,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 0x1F,
  D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 0x20,
  D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 0x21,
  D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x22,
  D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x23,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x24,
  D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 0x25,
  D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x26,
  D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x27,
  D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x28,
  D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 0x29,
  D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 0x2A,
  D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2B,
  D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2C,
  D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x2D,
  D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 0x2E,
  D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 0x2F,
  D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 0x30,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 0x31,
  D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 0x32,
  D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 0x33,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 0x34,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 0x35,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 0x36,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 0x37,
  D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 0x38,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 0x39,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 0x3A,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 0x3B,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 0x3C,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 0x3D,
  D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 0x3E,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 0x3F,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 0x40,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 0x41,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 0x42,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 0x43,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 0x44,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 0x45,
  D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 0x46,
  D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 0x47,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 0x48,
  D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 0x49,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 0x4A,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 0x4B,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 0x4C,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 0x4D,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 0x4E,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 0x4F,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 0x50,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 0x51,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 0x52,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 0x53,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 0x54,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 0x55,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 0x56,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 0x57,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 0x58,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 0x59,
  D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 0x5A,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 0x5B,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 0x5C,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 0x5D,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 0x5E,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 0x5F,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 0x60,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 0x61,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 0x62,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 0x63,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 0x64,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 0x65,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 0x66,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 0x67,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 0x68,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 0x69,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 0x6A,
  D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 0x6B,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 0x6C,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 0x6D,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 0x6E,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 0x6F,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 0x70,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 0x71,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 0x72,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 0x73,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 0x74,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 0x75,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 0x76,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 0x77,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 0x78,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 0x79,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 0x7A,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 0x7B,
  D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 0x7C,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 0x7D,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 0x7E,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 0x7F,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 0x80,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 0x81,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 0x82,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 0x83,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 0x84,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 0x85,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 0x86,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 0x87,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 0x88,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 0x89,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 0x8A,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 0x8B,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 0x8C,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 0x8D,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 0x8E,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 0x8F,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 0x90,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 0x91,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 0x92,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 0x93,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 0x94,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 0x95,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 0x96,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 0x97,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 0x98,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 0x99,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 0x9A,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 0x9B,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 0x9C,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 0x9D,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 0x9E,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 0x9F,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 0xA0,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 0xA1,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 0xA2,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 0xA3,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 0xA4,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 0xA5,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 0xA6,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 0xA7,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 0xA8,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 0xA9,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 0xAA,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 0xAB,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 0xAC,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 0xAD,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 0xAE,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 0xAF,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 0xB0,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 0xB1,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 0xB2,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 0xB3,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 0xB4,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 0xB5,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 0xB6,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 0xB7,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 0xB8,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 0xB9,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 0xBA,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 0xBB,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 0xBC,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 0xBD,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 0xBE,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 0xBF,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 0xC0,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 0xC1,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 0xC2,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 0xC3,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 0xC4,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 0xC5,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 0xC6,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 0xC7,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 0xC8,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 0xC9,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 0xCA,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 0xCB,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 0xCC,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 0xCD,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 0xCE,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 0xCF,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 0xD0,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 0xD1,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 0xD2,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 0xD3,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 0xD4,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 0xD5,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 0xD6,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 0xD7,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 0xD8,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 0xD9,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 0xDA,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 0xDB,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 0xDC,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 0xDD,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 0xDE,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 0xDF,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 0xE0,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 0xE1,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 0xE2,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 0xE3,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 0xE4,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 0xE5,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 0xE6,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 0xE7,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 0xE8,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 0xE9,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 0xEA,
  D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 0xEB,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 0xEC,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 0xED,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 0xEE,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 0xEF,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 0xF0,
  D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 0xF1,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 0xF2,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 0xF3,
  D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 0xF4,
  D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF5,
  D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xF6,
  D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xF7,
  D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 0xF8,
  D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF9,
  D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xFA,
  D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xFB,
  D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 0xFC,
  D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 0xFD,
  D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 0xFE,
  D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 0xFF,
  D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x100,
  D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x101,
  D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 0x102,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 0x103,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 0x104,
  D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 0x105,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 0x106,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 0x107,
  D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 0x108,
  D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 0x109,
  D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10A,
  D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 0x10B,
  D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 0x10C,
  D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10D,
  D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 0x10E,
  D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 0x10F,
  D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 0x110,
  D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x111,
  D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 0x112,
  D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 0x113,
  D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 0x114,
  D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 0x115,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 0x116,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 0x117,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 0x118,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 0x119,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 0x11A,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 0x11B,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 0x11C,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 0x11D,
  D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 0x11E,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 0x11F,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 0x120,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 0x121,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 0x122,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 0x123,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 0x124,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 0x125,
  D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 0x126,
  D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 0x127,
  D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 0x128,
  D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 0x129,
  D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 0x12A,
  D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 0x12B,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 0x12C,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 0x12D,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 0x12E,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 0x12F,
  D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 0x130,
  D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 0x131,
  D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 0x132,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 0x133,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 0x134,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 0x135,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 0x136,
  D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 0x137,
  D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 0x138,
  D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 0x139,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 0x13A,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 0x13B,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 0x13C,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 0x13D,
  D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 0x13E,
  D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 0x13F,
  D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 0x140,
  D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 0x141,
  D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 0x142,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 0x143,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 0x144,
  D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 0x145,
  D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 0x146,
  D3D11_MESSAGE_ID_REF_THREADING_MODE = 0x147,
  D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 0x148,
  D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 0x149,
  D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 0x14A,
  D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 0x14B,
  D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 0x14C,
  D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 0x14D,
  D3D11_MESSAGE_ID_REF_INFO = 0x14E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 0x14F,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 0x150,
  D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 0x151,
  D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 0x152,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 0x153,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 0x154,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 0x155,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 0x156,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 0x157,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 0x158,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 0x159,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 0x15A,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 0x15B,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 0x15C,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 0x15D,
  D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 0x15E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 0x15F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 0x160,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 0x161,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 0x162,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 0x163,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 0x164,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 0x165,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 0x166,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 0x167,
  D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 0x168,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 0x169,
  D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 0x16A,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 0x16B,
  D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 0x16C,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 0x16D,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 0x16E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 0x16F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 0x170,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 0x171,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 0x172,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 0x173,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 0x174,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 0x175,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 0x176,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 0x177,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 0x178,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 0x179,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 0x17A,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 0x17B,
  D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 0x17C,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 0x17D,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 0x17E,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 0x17F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 0x180,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 0x181,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 0x182,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 0x183,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 0x184,
  D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 0x185,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 0x186,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 0x187,
  D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 0x188,
  D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 0x189,
  D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 0x18A,
  D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 0x18B,
  D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 0x18C,
  D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 0x18D,
  D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x18E,
  D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 0x18F,
  D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 0x190,
  D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 0x191,
  D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 0x192,
  D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x193,
  D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 0x194,
  D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 0x195,
  D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 0x196,
  D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 0x197,
  D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 0x198,
  D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 0x199,
  D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 0x19A,
  D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 0x19B,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 0x19C,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 0x19D,
  D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 0x19E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 0x19F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 0x1A0,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 0x1A1,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 0x1A2,
  D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 0x1A3,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 0x1A4,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 0x1A5,
  D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 0x1A6,
  D3D11_MESSAGE_ID_LIVE_BUFFER = 0x1A7,
  D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 0x1A8,
  D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 0x1A9,
  D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 0x1AA,
  D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 0x1AB,
  D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 0x1AC,
  D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 0x1AD,
  D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 0x1AE,
  D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 0x1AF,
  D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 0x1B0,
  D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 0x1B1,
  D3D11_MESSAGE_ID_LIVE_SAMPLER = 0x1B2,
  D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 0x1B3,
  D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 0x1B4,
  D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 0x1B5,
  D3D11_MESSAGE_ID_LIVE_QUERY = 0x1B6,
  D3D11_MESSAGE_ID_LIVE_PREDICATE = 0x1B7,
  D3D11_MESSAGE_ID_LIVE_COUNTER = 0x1B8,
  D3D11_MESSAGE_ID_LIVE_DEVICE = 0x1B9,
  D3D11_MESSAGE_ID_LIVE_SWAPCHAIN = 0x1BA,
  D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 0x1BB,
  D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
  D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
  D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000A,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000B,
  D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000C,
  D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000D,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000E,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000F,
  D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
  D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
  D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
  D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
  D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
  D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
  D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001A,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001B,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001C,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001D,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001E,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001F,
  D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
  D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
  D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
  D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
  D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
  D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
  D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002A,
  D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002B,
  D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002C,
  D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002D,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002E,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002F,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
  D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
  D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
  D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
  D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
  D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
  D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
  D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
  D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
  D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003A,
  D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003B,
  D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003C,
  D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 0x10003D,
  D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003E,
  D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 0x200000,
  D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 0x200001,
  D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 0x200002,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 0x200003,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 0x200004,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 0x200005,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 0x200006,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 0x200007,
  D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 0x200008,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 0x200009,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 0x20000A,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 0x20000B,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 0x20000C,
  D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 0x20000D,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 0x20000E,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 0x20000F,
  D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 0x200010,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 0x200011,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 0x200012,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 0x200013,
  D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 0x200014,
  D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 0x200015,
  D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 0x200016,
  D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200017,
  D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200018,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 0x200019,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 0x20001A,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 0x20001B,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 0x20001C,
  D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 0x20001D,
  D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20001E,
  D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20001F,
  D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200020,
  D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 0x200021,
  D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200022,
  D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200023,
  D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 0x200024,
  D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 0x200025,
  D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 0x200026,
  D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200027,
  D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200028,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 0x200029,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 0x20002A,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 0x20002B,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 0x20002C,
  D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 0x20002D,
  D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20002E,
  D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20002F,
  D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200030,
  D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 0x200031,
  D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200032,
  D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200033,
  D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 0x200034,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 0x200035,
  D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 0x200036,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 0x200037,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 0x200038,
  D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 0x200039,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 0x20003A,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 0x20003B,
  D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 0x20003C,
  D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 0x20003D,
  D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 0x20003E,
  D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 0x20003F,
  D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 0x200040,
  D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 0x200041,
  D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 0x200042,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 0x200043,
  D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 0x200044,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 0x200045,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 0x200046,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 0x200047,
  D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 0x200048,
  D3D11_MESSAGE_ID_CREATE_CONTEXT = 0x200049,
  D3D11_MESSAGE_ID_LIVE_CONTEXT = 0x20004A,
  D3D11_MESSAGE_ID_DESTROY_CONTEXT = 0x20004B,
  D3D11_MESSAGE_ID_CREATE_BUFFER = 0x20004C,
  D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 = 0x20004D,
  D3D11_MESSAGE_ID_DESTROY_BUFFER = 0x20004E,
  D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 0x20004F,
  D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 = 0x200050,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 0x200051,
  D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 0x200052,
  D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 = 0x200053,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 0x200054,
  D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 0x200055,
  D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 = 0x200056,
  D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 0x200057,
  D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 0x200058,
  D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 = 0x200059,
  D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 0x20005A,
  D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 0x20005B,
  D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 = 0x20005C,
  D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 0x20005D,
  D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 0x20005E,
  D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 = 0x20005F,
  D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 0x200060,
  D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 0x200061,
  D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 = 0x200062,
  D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 0x200063,
  D3D11_MESSAGE_ID_CREATE_HULLSHADER = 0x200064,
  D3D11_MESSAGE_ID_LIVE_HULLSHADER = 0x200065,
  D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 0x200066,
  D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 0x200067,
  D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 0x200068,
  D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 0x200069,
  D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 0x20006A,
  D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 = 0x20006B,
  D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 0x20006C,
  D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 0x20006D,
  D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 = 0x20006E,
  D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 0x20006F,
  D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 0x200070,
  D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 = 0x200071,
  D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 0x200072,
  D3D11_MESSAGE_ID_CREATE_SAMPLER = 0x200073,
  D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 = 0x200074,
  D3D11_MESSAGE_ID_DESTROY_SAMPLER = 0x200075,
  D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 0x200076,
  D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 = 0x200077,
  D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 0x200078,
  D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 0x200079,
  D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 = 0x20007A,
  D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 0x20007B,
  D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 0x20007C,
  D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 = 0x20007D,
  D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 0x20007E,
  D3D11_MESSAGE_ID_CREATE_QUERY = 0x20007F,
  D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 = 0x200080,
  D3D11_MESSAGE_ID_DESTROY_QUERY = 0x200081,
  D3D11_MESSAGE_ID_CREATE_PREDICATE = 0x200082,
  D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 = 0x200083,
  D3D11_MESSAGE_ID_DESTROY_PREDICATE = 0x200084,
  D3D11_MESSAGE_ID_CREATE_COUNTER = 0x200085,
  D3D11_MESSAGE_ID_DESTROY_COUNTER = 0x200086,
  D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 0x200087,
  D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 0x200088,
  D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 0x200089,
  D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 0x20008A,
  D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 0x20008B,
  D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 0x20008C,
  D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 0x20008D,
  D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 0x20008E,
  D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 0x20008F,
  D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 = 0x200090,
  D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 = 0x200091,
  D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 0x200092,
  D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 0x200093,
  D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 0x200094,
  D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 0x200095,
  D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 0x200096,
  D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 0x200097,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 0x200098,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 0x200099,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 0x20009A,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 0x20009B,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 0x20009C,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 0x20009D,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 0x20009E,
  D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 0x20009F,
  D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 0x2000A0,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 0x2000A1,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 0x2000A2,
  D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 0x2000A3,
  D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 0x2000A4,
  D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 0x2000A5,
  D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2000A6,
  D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2000A7,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 0x2000A8,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 0x2000A9,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 0x2000AA,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 0x2000AB,
  D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 0x2000AC,
  D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 0x2000AD,
  D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x2000AE,
  D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000AF,
  D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 0x2000B0,
  D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 0x2000B1,
  D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000B2,
  D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 0x2000B3,
  D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B4,
  D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B5,
  D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B6,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B7,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B8,
  D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000B9,
  D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000BA,
  D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 0x2000BB,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 0x2000BC,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 0x2000BD,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 0x2000BE,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 0x2000BF,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 0x2000C0,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 0x2000C1,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 0x2000C2,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 0x2000C3,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 0x2000C4,
  D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000C5,
  D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000C6,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 0x2000C7,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 0x2000C8,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 0x2000C9,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 0x2000CA,
  D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 0x2000CB,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000CC,
  D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000CD,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 0x2000CE,
  D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 0x2000CF,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 0x2000D0,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 0x2000D1,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 0x2000D2,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000D3,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000D4,
  D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 0x2000D5,
  D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000D6,
  D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000D7,
  D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 0x2000D8,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 0x2000D9,
  D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 0x2000DA,
  D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 0x2000DB,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 0x2000DC,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 0x2000DD,
  D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 0x2000DE,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 0x2000DF,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 0x2000E0,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 0x2000E1,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000E2,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 0x2000E3,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 0x2000E4,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 0x2000E5,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 0x2000E6,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 0x2000E7,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 0x2000E8,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 0x2000E9,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 0x2000EA,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 0x2000EB,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 0x2000EC,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 0x2000ED,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 0x2000EE,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 0x2000EF,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000F0,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 0x2000F1,
  D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 0x2000F2,
  D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 0x2000F3,
  D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 0x2000F4,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 0x2000F5,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 0x2000F6,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 0x2000F7,
  D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 0x2000F8,
  D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 0x2000F9,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 0x2000FA,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 0x2000FB,
  D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 0x2000FC,
  D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 0x2000FD,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 0x2000FE,
  D3D11_MESSAGE_ID_REF_WARNING = 0x2000FF,
  D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = 0x200100,
  D3D11_MESSAGE_ID_SHADER_ABORT = 0x200101,
  D3D11_MESSAGE_ID_SHADER_MESSAGE = 0x200102,
  D3D11_MESSAGE_ID_SHADER_ERROR = 0x200103,
  D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE = 0x200104,
  D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x200105,
  D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x200106,
  D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x200107,
  D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT = 0x200108,
  D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT = 0x200109,
  D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT = 0x20010A,
  D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN = 0x20010B,
  D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN = 0x20010C,
  D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN = 0x20010D,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = 0x20010E,
  D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 0x20010F,
  D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START = 0x300000,
  D3D11_MESSAGE_ID_CREATE_VIDEODECODER = 0x300001,
  D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM = 0x300002,
  D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 0x300003,
  D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW = 0x300004,
  D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW = 0x300005,
  D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW = 0x300006,
  D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE = 0x300007,
  D3D11_MESSAGE_ID_LIVE_VIDEODECODER = 0x300008,
  D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM = 0x300009,
  D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 0x30000A,
  D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW = 0x30000B,
  D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW = 0x30000C,
  D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW = 0x30000D,
  D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE = 0x30000E,
  D3D11_MESSAGE_ID_DESTROY_VIDEODECODER = 0x30000F,
  D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM = 0x300010,
  D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 0x300011,
  D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW = 0x300012,
  D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW = 0x300013,
  D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW = 0x300014,
  D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE = 0x300015,
  D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = 0x300016,
  D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = 0x300017,
  D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = 0x300018,
  D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID = 0x300019,
  D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW = 0x30001A,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS = 0x30001B,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS = 0x30001C,
  D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 0x30001D,
  D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN = 0x30001E,
  D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM = 0x30001F,
  D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT = 0x300020,
  D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT = 0x300021,
  D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = 0x300022,
  D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = 0x300023,
  D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = 0x300024,
  D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM = 0x300025,
  D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX = 0x300026,
  D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = 0x300027,
  D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM = 0x300028,
  D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = 0x300029,
  D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM = 0x30002A,
  D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = 0x30002B,
  D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM = 0x30002C,
  D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX = 0x30002D,
  D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = 0x30002E,
  D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM = 0x30002F,
  D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM = 0x300030,
  D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM = 0x300031,
  D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER = 0x300032,
  D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE = 0x300033,
  D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED = 0x300034,
  D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM = 0x300035,
  D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE = 0x300036,
  D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED = 0x300037,
  D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM = 0x300038,
  D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD = 0x300039,
  D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM = 0x30003A,
  D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM = 0x30003B,
  D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE = 0x30003C,
  D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM = 0x30003D,
  D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE = 0x30003E,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = 0x30003F,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = 0x300040,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = 0x300041,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = 0x300042,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = 0x300043,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = 0x300044,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = 0x300045,
  D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = 0x300046,
  D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM = 0x300047,
  D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM = 0x300048,
  D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = 0x300049,
  D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = 0x30004A,
  D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = 0x30004B,
  D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = 0x30004C,
  D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = 0x30004D,
  D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = 0x30004E,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = 0x30004F,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM = 0x300050,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = 0x300051,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 0x300052,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = 0x300053,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = 0x300054,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = 0x300055,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = 0x300056,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = 0x300057,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = 0x300058,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = 0x300059,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = 0x30005A,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = 0x30005B,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = 0x30005C,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = 0x30005D,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 0x30005E,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = 0x30005F,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = 0x300060,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = 0x300061,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = 0x300062,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = 0x300063,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = 0x300064,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = 0x300065,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = 0x300066,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = 0x300067,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = 0x300068,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = 0x300069,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = 0x30006A,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = 0x30006B,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = 0x30006C,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = 0x30006D,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = 0x30006E,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = 0x30006F,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = 0x300070,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = 0x300071,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = 0x300072,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = 0x300073,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = 0x300074,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = 0x300075,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = 0x300076,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = 0x300077,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = 0x300078,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = 0x300079,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = 0x30007A,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = 0x30007B,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = 0x30007C,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 0x30007D,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = 0x30007E,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = 0x30007F,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = 0x300080,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = 0x300081,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = 0x300082,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = 0x300083,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = 0x300084,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = 0x300085,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = 0x300086,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = 0x300087,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = 0x300088,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = 0x300089,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 0x30008A,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 0x30008B,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = 0x30008C,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = 0x30008D,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = 0x30008E,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = 0x30008F,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = 0x300090,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = 0x300091,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = 0x300092,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = 0x300093,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = 0x300094,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = 0x300095,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = 0x300096,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = 0x300097,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = 0x300098,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = 0x300099,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = 0x30009A,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = 0x30009B,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = 0x30009C,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 0x30009D,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = 0x30009E,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = 0x30009F,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = 0x3000A0,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM = 0x3000A1,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = 0x3000A2,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT = 0x3000A3,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT = 0x3000A4,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES = 0x3000A5,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = 0x3000A6,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT = 0x3000A7,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT = 0x3000A8,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = 0x3000A9,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE = 0x3000AA,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY = 0x3000AB,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED = 0x3000AC,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = 0x3000AD,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED = 0x3000AE,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = 0x3000AF,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS = 0x3000B0,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD = 0x3000B1,
  D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD = 0x3000B2,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = 0x3000B3,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = 0x3000B4,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = 0x3000B5,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = 0x3000B6,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = 0x3000B7,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = 0x3000B8,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = 0x3000B9,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = 0x3000BA,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = 0x3000BB,
  D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = 0x3000BC,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = 0x3000BD,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = 0x3000BE,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = 0x3000BF,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = 0x3000C0,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = 0x3000C1,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = 0x3000C2,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = 0x3000C3,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = 0x3000C4,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = 0x3000C5,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = 0x3000C6,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = 0x3000C7,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = 0x3000C8,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = 0x3000C9,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = 0x3000CA,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = 0x3000CB,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = 0x3000CC,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = 0x3000CD,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = 0x3000CE,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = 0x3000CF,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = 0x3000D0,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = 0x3000D1,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = 0x3000D2,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = 0x3000D3,
  D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 0x3000D4,
  D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 0x3000D5,
  D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = 0x3000D6,
  D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = 0x3000D7,
  D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = 0x3000D8,
  D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE = 0x3000D9,
  D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT = 0x3000DA,
  D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE = 0x3000DB,
  D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD = 0x3000DC,
  D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD = 0x3000DD,
  D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD = 0x3000DE,
  D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM = 0x3000DF,
  D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = 0x3000E0,
  D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM = 0x3000E1,
  D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM = 0x3000E2,
  D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = 0x3000E3,
  D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = 0x3000E4,
  D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = 0x3000E5,
  D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE = 0x3000E6,
  D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = 0x3000E7,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM = 0x3000E9,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE = 0x3000EA,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE = 0x3000EB,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH = 0x3000EC,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH = 0x3000ED,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED = 0x3000EE,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING = 0x3000EF,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED = 0x3000F0,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED = 0x3000F1,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED = 0x3000F2,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED = 0x3000F3,
  D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = 0x3000F4,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM = 0x3000F6,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE = 0x3000F7,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE = 0x3000F8,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH = 0x3000F9,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH = 0x3000FA,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED = 0x3000FB,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING = 0x3000FC,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET = 0x3000FD,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED = 0x3000FE,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED = 0x3000FF,
  D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED = 0x300100,
  D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE = 0x300104,
  D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM = 0x300105,
  D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM = 0x300106,
  D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE = 0x300107,
  D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM = 0x300108,
  D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM = 0x300109,
  D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = 0x30010A,
  D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM = 0x30010B,
  D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = 0x30010C,
  D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = 0x30010D,
  D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = 0x30010E,
  D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = 0x30010F,
  D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = 0x300110,
  D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = 0x300111,
  D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = 0x300112,
  D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = 0x300113,
  D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = 0x300114,
  D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = 0x300115,
  D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM = 0x300116,
  D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = 0x300117,
  D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = 0x300118,
  D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = 0x300119,
  D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = 0x30011A,
  D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = 0x30011B,
  D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = 0x30011C,
  D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = 0x30011D,
  D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = 0x30011E,
  D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = 0x30011F,
  D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300120,
  D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300121,
  D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300122,
  D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300124,
  D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300125,
  D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = 0x300127,
  D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY = 0x300128,
  D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = 0x300129,
  D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM = 0x30012A,
  D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = 0x30012B,
  D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND = 0x30012C,
  D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = 0x30012D,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = 0x30012E,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = 0x30012F,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID = 0x300130,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = 0x300131,
  D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = 0x300132,
  D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x300134,
  D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x300135,
  D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x300137,
  D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x300138,
  D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x300139,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x30013A,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x30013B,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 0x30013C,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = 0x30013D,
  D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x30013E,
  D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x30013F,
  D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x300140,
  D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION = 0x300142,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = 0x300143,
  D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = 0x300144,
  D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 0x300145,
  D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 0x300147,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 0x300148,
  D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 0x300149,
  D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 0x30014A,
  D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 0x30014B,
  D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = 0x30014C,
  D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED = 0x30014E,
  D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = 0x30014F,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = 0x300150,
  D3D11_MESSAGE_ID_GETDC_INACCESSIBLE = 0x300151,
  D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT = 0x300152,
  D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = 0x300153,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED = 0x300154,
  D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = 0x300155,
  D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED = 0x300156,
  D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED = 0x300157,
  D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE = 0x300158,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = 0x300159,
  D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = 0x30015A,
  D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 0x30015B,
  D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 0x30015C,
  D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX = 0x30015D,
  D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = 0x30015E,
  D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 0x30015F,
  D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = 0x300160,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = 0x300161,
  D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 0x300162,
  D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 0x300163,
  D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END = 0x300164,
};

/* 230 */
enum D3D10_MESSAGE_ID
{
  D3D10_MESSAGE_ID_UNKNOWN = 0x0,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 0x1,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 0x2,
  D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 0x3,
  D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 0x4,
  D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 0x5,
  D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 0x6,
  D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 0x7,
  D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 0x8,
  D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 0x9,
  D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 0xA,
  D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 0xB,
  D3D10_MESSAGE_ID_CORRUPTED_THIS = 0xC,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 0xD,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 0xE,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 0xF,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 0x10,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 0x11,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 0x12,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 0x13,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 0x14,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 0x15,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 0x16,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 0x17,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 0x18,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 0x19,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 0x1A,
  D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 0x1B,
  D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 0x1C,
  D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 0x1D,
  D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 0x1E,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 0x1F,
  D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 0x20,
  D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 0x21,
  D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x22,
  D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x23,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x24,
  D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 0x25,
  D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x26,
  D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x27,
  D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x28,
  D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 0x29,
  D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 0x2A,
  D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2B,
  D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2C,
  D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x2D,
  D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 0x2E,
  D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 0x2F,
  D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 0x30,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 0x31,
  D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 0x32,
  D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 0x33,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 0x34,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 0x35,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 0x36,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 0x37,
  D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 0x38,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 0x39,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 0x3A,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 0x3B,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 0x3C,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 0x3D,
  D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 0x3E,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 0x3F,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 0x40,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 0x41,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 0x42,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 0x43,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 0x44,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 0x45,
  D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 0x46,
  D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 0x47,
  D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 0x48,
  D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 0x49,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 0x4A,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 0x4B,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 0x4C,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 0x4D,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 0x4E,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 0x4F,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 0x50,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 0x51,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 0x52,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 0x53,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 0x54,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 0x55,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 0x56,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 0x57,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 0x58,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 0x59,
  D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 0x5A,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 0x5B,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 0x5C,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 0x5D,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 0x5E,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 0x5F,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 0x60,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 0x61,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 0x62,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 0x63,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 0x64,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 0x65,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 0x66,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 0x67,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 0x68,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 0x69,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 0x6A,
  D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 0x6B,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 0x6C,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 0x6D,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 0x6E,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 0x6F,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 0x70,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 0x71,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 0x72,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 0x73,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 0x74,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 0x75,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 0x76,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 0x77,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 0x78,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 0x79,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 0x7A,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 0x7B,
  D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 0x7C,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 0x7D,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 0x7E,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 0x7F,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 0x80,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 0x81,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 0x82,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 0x83,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 0x84,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 0x85,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 0x86,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 0x87,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 0x88,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 0x89,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 0x8A,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 0x8B,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 0x8C,
  D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 0x8D,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 0x8E,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 0x8F,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 0x90,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 0x91,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 0x92,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 0x93,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 0x94,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 0x95,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 0x96,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 0x97,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 0x98,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 0x99,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 0x9A,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 0x9B,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 0x9C,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 0x9D,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 0x9E,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 0x9F,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 0xA0,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 0xA1,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 0xA2,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 0xA3,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 0xA4,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 0xA5,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 0xA6,
  D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 0xA7,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 0xA8,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 0xA9,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 0xAA,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 0xAB,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 0xAC,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 0xAD,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 0xAE,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 0xAF,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 0xB0,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 0xB1,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 0xB2,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 0xB3,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 0xB4,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 0xB5,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 0xB6,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 0xB7,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 0xB8,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 0xB9,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 0xBA,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 0xBB,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 0xBC,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 0xBD,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 0xBE,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 0xBF,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 0xC0,
  D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 0xC1,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 0xC2,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 0xC3,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 0xC4,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 0xC5,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 0xC6,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 0xC7,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 0xC8,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 0xC9,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 0xCA,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 0xCB,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 0xCC,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 0xCD,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 0xCE,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 0xCF,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 0xD0,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 0xD1,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 0xD2,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 0xD3,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 0xD4,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 0xD5,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 0xD6,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 0xD7,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 0xD8,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 0xD9,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 0xDA,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 0xDB,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 0xDC,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 0xDD,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 0xDE,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 0xDF,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 0xE0,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 0xE1,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 0xE2,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 0xE3,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 0xE4,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 0xE5,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 0xE6,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 0xE7,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 0xE8,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 0xE9,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 0xEA,
  D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 0xEB,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 0xEC,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 0xED,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 0xEE,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 0xEF,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 0xF0,
  D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 0xF1,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 0xF2,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 0xF3,
  D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 0xF4,
  D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF5,
  D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xF6,
  D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xF7,
  D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 0xF8,
  D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 0xF9,
  D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 0xFA,
  D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0xFB,
  D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 0xFC,
  D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 0xFD,
  D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 0xFE,
  D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 0xFF,
  D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x100,
  D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x101,
  D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 0x102,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 0x103,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 0x104,
  D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 0x105,
  D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 0x106,
  D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 0x107,
  D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 0x108,
  D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 0x109,
  D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10A,
  D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 0x10B,
  D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 0x10C,
  D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x10D,
  D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 0x10E,
  D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 0x10F,
  D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 0x110,
  D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x111,
  D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 0x112,
  D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 0x113,
  D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 0x114,
  D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 0x115,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 0x116,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 0x117,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 0x118,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 0x119,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 0x11A,
  D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 0x11B,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 0x11C,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 0x11D,
  D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 0x11E,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 0x11F,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 0x120,
  D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 0x121,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 0x122,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 0x123,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 0x124,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 0x125,
  D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 0x126,
  D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 0x127,
  D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 0x128,
  D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 0x129,
  D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 0x12A,
  D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 0x12B,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 0x12C,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 0x12D,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 0x12E,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 0x12F,
  D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 0x130,
  D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 0x131,
  D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 0x132,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 0x133,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 0x134,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 0x135,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 0x136,
  D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 0x137,
  D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 0x138,
  D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 0x139,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 0x13A,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 0x13B,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 0x13C,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 0x13D,
  D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 0x13E,
  D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 0x13F,
  D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 0x140,
  D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 0x141,
  D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 0x142,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 0x143,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 0x144,
  D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 0x145,
  D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 0x146,
  D3D10_MESSAGE_ID_REF_THREADING_MODE = 0x147,
  D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 0x148,
  D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 0x149,
  D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 0x14A,
  D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 0x14B,
  D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 0x14C,
  D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 0x14D,
  D3D10_MESSAGE_ID_REF_INFO = 0x14E,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 0x14F,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 0x150,
  D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 0x151,
  D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 0x152,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 0x153,
  D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 0x154,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 0x155,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 0x156,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 0x157,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 0x158,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 0x159,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 0x15A,
  D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 0x15B,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 0x15C,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 0x15D,
  D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 0x15E,
  D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 0x15F,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 0x160,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 0x161,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 0x162,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 0x163,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 0x164,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 0x165,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 0x166,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 0x167,
  D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 0x168,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 0x169,
  D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 0x16A,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 0x16B,
  D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 0x16C,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 0x16D,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 0x16E,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 0x16F,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 0x170,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 0x171,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 0x172,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 0x173,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 0x174,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 0x175,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 0x176,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 0x177,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 0x178,
  D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 0x179,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 0x17A,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 0x17B,
  D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 0x17C,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 0x17D,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 0x17E,
  D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 0x17F,
  D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 0x180,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 0x181,
  D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 0x182,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 0x183,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 0x184,
  D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 0x185,
  D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 0x186,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 0x187,
  D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 0x188,
  D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 0x189,
  D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 0x18A,
  D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 0x18B,
  D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 0x18C,
  D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 0x18D,
  D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x18E,
  D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 0x18F,
  D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 0x190,
  D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 0x191,
  D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 0x192,
  D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 0x193,
  D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 0x194,
  D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 0x195,
  D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 0x196,
  D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 0x197,
  D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 0x198,
  D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 0x199,
  D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 0x19A,
  D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 0x19B,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 0x19C,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 0x19D,
  D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 0x19E,
  D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 0x19F,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 0x1A0,
  D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 0x1A1,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 0x1A2,
  D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 0x1A3,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 0x1A4,
  D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 0x1A5,
  D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 0x1A6,
  D3D10_MESSAGE_ID_LIVE_BUFFER = 0x1A7,
  D3D10_MESSAGE_ID_LIVE_TEXTURE1D = 0x1A8,
  D3D10_MESSAGE_ID_LIVE_TEXTURE2D = 0x1A9,
  D3D10_MESSAGE_ID_LIVE_TEXTURE3D = 0x1AA,
  D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 0x1AB,
  D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 0x1AC,
  D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 0x1AD,
  D3D10_MESSAGE_ID_LIVE_VERTEXSHADER = 0x1AE,
  D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER = 0x1AF,
  D3D10_MESSAGE_ID_LIVE_PIXELSHADER = 0x1B0,
  D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT = 0x1B1,
  D3D10_MESSAGE_ID_LIVE_SAMPLER = 0x1B2,
  D3D10_MESSAGE_ID_LIVE_BLENDSTATE = 0x1B3,
  D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 0x1B4,
  D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE = 0x1B5,
  D3D10_MESSAGE_ID_LIVE_QUERY = 0x1B6,
  D3D10_MESSAGE_ID_LIVE_PREDICATE = 0x1B7,
  D3D10_MESSAGE_ID_LIVE_COUNTER = 0x1B8,
  D3D10_MESSAGE_ID_LIVE_DEVICE = 0x1B9,
  D3D10_MESSAGE_ID_LIVE_SWAPCHAIN = 0x1BA,
  D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 0x1BB,
  D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
  D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
  D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
  D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000A,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000B,
  D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000C,
  D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000D,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000E,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000F,
  D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
  D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
  D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
  D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
  D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
  D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
  D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
  D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
  D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001A,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001B,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001C,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001D,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001E,
  D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001F,
  D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
  D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
  D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
  D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
  D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
  D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
  D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002A,
  D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002B,
  D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002C,
  D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002D,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002E,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002F,
  D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
  D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
  D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
  D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
  D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
  D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
  D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
  D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
  D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
  D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003A,
  D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003B,
  D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003C,
  D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 0x10003D,
  D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003E,
};

/* 231 */
enum D3D11_FILTER
{
  D3D11_FILTER_MIN_MAG_MIP_POINT = 0x0,
  D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
  D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
  D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
  D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
  D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
  D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
  D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
  D3D11_FILTER_ANISOTROPIC = 0x55,
  D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
  D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
  D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
  D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
  D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
  D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
  D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
  D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
  D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xD5,
};

/* 232 */
enum D3D11_TEXTURE_ADDRESS_MODE
{
  D3D11_TEXTURE_ADDRESS_WRAP = 0x1,
  D3D11_TEXTURE_ADDRESS_MIRROR = 0x2,
  D3D11_TEXTURE_ADDRESS_CLAMP = 0x3,
  D3D11_TEXTURE_ADDRESS_BORDER = 0x4,
  D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 0x5,
};

/* 233 */
enum $5B5BF600EED085E311F47CB034FDCF25
{
  CONST_SRC_CODE_MAYBE_DIRTY_PS_BEGIN = 0x0,
  CONST_SRC_CODE_LIGHT_POSITION = 0x0,
  CONST_SRC_CODE_LIGHT_DIFFUSE = 0x1,
  CONST_SRC_CODE_LIGHT_SPECULAR = 0x2,
  CONST_SRC_CODE_LIGHT_SPOTDIR = 0x3,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS = 0x4,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT = 0x5,
  CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM = 0x6,
  CONST_SRC_CODE_LIGHT_POSITION1 = 0x7,
  CONST_SRC_CODE_LIGHT_DIFFUSE1 = 0x8,
  CONST_SRC_CODE_LIGHT_SPECULAR1 = 0x9,
  CONST_SRC_CODE_LIGHT_SPOTDIR1 = 0xA,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS1 = 0xB,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT1 = 0xC,
  CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM1 = 0xD,
  CONST_SRC_CODE_LIGHT_POSITION2 = 0xE,
  CONST_SRC_CODE_LIGHT_DIFFUSE2 = 0xF,
  CONST_SRC_CODE_LIGHT_SPECULAR2 = 0x10,
  CONST_SRC_CODE_LIGHT_SPOTDIR2 = 0x11,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS2 = 0x12,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT2 = 0x13,
  CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM2 = 0x14,
  CONST_SRC_CODE_LIGHT_POSITION3 = 0x15,
  CONST_SRC_CODE_LIGHT_DIFFUSE3 = 0x16,
  CONST_SRC_CODE_LIGHT_SPECULAR3 = 0x17,
  CONST_SRC_CODE_LIGHT_SPOTDIR3 = 0x18,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS3 = 0x19,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT3 = 0x1A,
  CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM3 = 0x1B,
  CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_0 = 0x1C,
  CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_1 = 0x1D,
  CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_2 = 0x1E,
  CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_3 = 0x1F,
  CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_0 = 0x20,
  CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_1 = 0x21,
  CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_2 = 0x22,
  CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_3 = 0x23,
  CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_0 = 0x24,
  CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_1 = 0x25,
  CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_2 = 0x26,
  CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_3 = 0x27,
  CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_0 = 0x28,
  CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_1 = 0x29,
  CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_2 = 0x2A,
  CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_3 = 0x2B,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_0 = 0x2C,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_1 = 0x2D,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_2 = 0x2E,
  CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_3 = 0x2F,
  CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_0 = 0x30,
  CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_1 = 0x31,
  CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_2 = 0x32,
  CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_3 = 0x33,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_0 = 0x34,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_1 = 0x35,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_2 = 0x36,
  CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_3 = 0x37,
  CONST_SRC_CODE_LIGHT_DYN_COUNT = 0x38,
  CONST_SRC_CODE_LIGHT_DYN_TYPES = 0x39,
  CONST_SRC_CODE_LIGHT_DYN_SHADOW_TYPES = 0x3A,
  CONST_SRC_CODE_PARTICLE_CLOUD_COLOR = 0x3B,
  CONST_SRC_CODE_GAMETIME = 0x3C,
  CONST_SRC_CODE_GENERIC_MATERIAL_DATA = 0x3D,
  CONST_SRC_CODE_EYEOFFSET = 0x3E,
  CONST_SRC_CODE_MODEL_MOTIONBLUR_VELOCITY_PARMS = 0x3F,
  CONST_SRC_CODE_HUD_OUTLINE_PARMS = 0x40,
  CONST_SRC_CODE_POSTFX_CONTROL0 = 0x41,
  CONST_SRC_CODE_POSTFX_CONTROL1 = 0x42,
  CONST_SRC_CODE_POSTFX_CONTROL2 = 0x43,
  CONST_SRC_CODE_POSTFX_CONTROL3 = 0x44,
  CONST_SRC_CODE_POSTFX_CONTROL4 = 0x45,
  CONST_SRC_CODE_POSTFX_CONTROL5 = 0x46,
  CONST_SRC_CODE_POSTFX_CONTROL6 = 0x47,
  CONST_SRC_CODE_POSTFX_CONTROL7 = 0x48,
  CONST_SRC_CODE_POSTFX_CONTROL8 = 0x49,
  CONST_SRC_CODE_POSTFX_CONTROL9 = 0x4A,
  CONST_SRC_CODE_POSTFX_CONTROLA = 0x4B,
  CONST_SRC_CODE_POSTFX_CONTROLB = 0x4C,
  CONST_SRC_CODE_POSTFX_CONTROLC = 0x4D,
  CONST_SRC_CODE_POSTFX_CONTROLD = 0x4E,
  CONST_SRC_CODE_POSTFX_CONTROLE = 0x4F,
  CONST_SRC_CODE_POSTFX_CONTROLF = 0x50,
  CONST_SRC_CODE_MAYBE_DIRTY_PS_END = 0x51,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_BEGIN = 0x51,
  CONST_SRC_CODE_FILTER_TAP_BEGIN = 0x51,
  CONST_SRC_CODE_FILTER_TAP_BEGIN_STEPBACK = 0x50,
  CONST_SRC_CODE_FILTER_TAP_0 = 0x51,
  CONST_SRC_CODE_FILTER_TAP_1 = 0x52,
  CONST_SRC_CODE_FILTER_TAP_2 = 0x53,
  CONST_SRC_CODE_FILTER_TAP_3 = 0x54,
  CONST_SRC_CODE_FILTER_TAP_4 = 0x55,
  CONST_SRC_CODE_FILTER_TAP_5 = 0x56,
  CONST_SRC_CODE_FILTER_TAP_6 = 0x57,
  CONST_SRC_CODE_FILTER_TAP_7 = 0x58,
  CONST_SRC_CODE_FILTER_TAP_8 = 0x59,
  CONST_SRC_CODE_FILTER_TAP_9 = 0x5A,
  CONST_SRC_CODE_FILTER_TAP_10 = 0x5B,
  CONST_SRC_CODE_FILTER_TAP_11 = 0x5C,
  CONST_SRC_CODE_FILTER_TAP_END = 0x5D,
  CONST_SRC_CODE_FILTER_TAP_END_STEPBACK = 0x5C,
  CONST_SRC_CODE_COLOR_MATRIX_R = 0x5D,
  CONST_SRC_CODE_COLOR_MATRIX_G = 0x5E,
  CONST_SRC_CODE_COLOR_MATRIX_B = 0x5F,
  CONST_SRC_CODE_RENDER_TARGET_SIZE = 0x60,
  CONST_SRC_CODE_RENDER_SOURCE_SIZE = 0x61,
  CONST_SRC_CODE_BLOOM_HQ_RADIUS = 0x62,
  CONST_SRC_CODE_BLOOM_HQ_METERING_SENSITIVITY = 0x63,
  CONST_SRC_CODE_BLOOM_HQ_IRIS_PARAMS = 0x64,
  CONST_SRC_CODE_BLOOM_HQ_FALLOFF_1 = 0x65,
  CONST_SRC_CODE_BLOOM_HQ_FALLOFF_2 = 0x66,
  CONST_SRC_CODE_FXAA_RCPFRAMEOPT = 0x67,
  CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_1 = 0x68,
  CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_2 = 0x69,
  CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_3 = 0x6A,
  CONST_SRC_CODE_MODEL_LIGHTMAP_PARAMS = 0x6B,
  CONST_SRC_CODE_AVG_LUMINANCE_PARAMS = 0x6C,
  CONST_SRC_CODE_SSAO_POWER_BB_SHARPNESS_STEP = 0x6D,
  CONST_SRC_CODE_SSAO_COLOR_COEFF = 0x6E,
  CONST_SRC_CODE_SSAO_FALLOFF_DEPTH_SCALE = 0x6F,
  CONST_SRC_CODE_SSAO_UV_TO_ROT_SCALE_AND_FADE = 0x70,
  CONST_SRC_CODE_SSAO_SAMPLE_MAT_SCALE = 0x71,
  CONST_SRC_CODE_SSAO_DEPTH_OFFSET_REJECT = 0x72,
  CONST_SRC_CODE_LIT2D_LIGHTDIRX2 = 0x73,
  CONST_SRC_CODE_LIT2D_SPECHALFANGLEDIRX2 = 0x74,
  CONST_SRC_CODE_LIT2D_AMBIENTCOLOR = 0x75,
  CONST_SRC_CODE_LIT2D_DIFFUSECOLOR = 0x76,
  CONST_SRC_CODE_LIT2D_SPECCOLOR_SPECEXPONENT = 0x77,
  CONST_SRC_CODE_LIT2D_ADDITIVECOLOR = 0x78,
  CONST_SRC_CODE_LIT2D_BLOODSPATTER_AMBIENTCOLOR = 0x79,
  CONST_SRC_CODE_LIT2D_BLOODSPATTER_DIFFUSECOLOR = 0x7A,
  CONST_SRC_CODE_LIT2D_BLOODSPATTER_SPECCOLOR_SPECEXPONENT = 0x7B,
  CONST_SRC_CODE_LIT2D_BLOODSPATTER_ADDITIVECOLOR = 0x7C,
  CONST_SRC_CODE_ALWAYS_DIRTY_PS_END = 0x7D,
  CONST_SRC_CODE_FIXED_PS_BEGIN = 0x7D,
  CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR = 0x7D,
  CONST_SRC_CODE_DOF_EQUATION_SCENE = 0x7E,
  CONST_SRC_CODE_DOF_LERP_SCALE = 0x7F,
  CONST_SRC_CODE_DOF_LERP_BIAS = 0x80,
  CONST_SRC_CODE_DOF_ROW_DELTA = 0x81,
  CONST_SRC_CODE_MOTION_MATRIX_X = 0x82,
  CONST_SRC_CODE_MOTION_MATRIX_Y = 0x83,
  CONST_SRC_CODE_MOTION_MATRIX_W = 0x84,
  CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R0 = 0x85,
  CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R1 = 0x86,
  CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R2 = 0x87,
  CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R3 = 0x88,
  CONST_SRC_CODE_PREV_EYEPOSITION_TRANSFORM = 0x89,
  CONST_SRC_CODE_SCREEN_SPACE_REFLECTION_FADE = 0x8A,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE_AND_OFFSET = 0x8B,
  CONST_SRC_CODE_SSR_CLIP_TO_FADE_SCALE_OFFSET_PS = 0x8C,
  CONST_SRC_CODE_MSAA_ALPHA_TEST_OFFSETS_PS = 0x8D,
  CONST_SRC_CODE_DISTORTION_SAMPLE_LIMITS_PS = 0x8E,
  CONST_SRC_CODE_SCOPE_SAMPLE_LIMITS_PS = 0x8F,
  CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C0_PS = 0x90,
  CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C1_PS = 0x91,
  CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C3_PS = 0x92,
  CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R0 = 0x93,
  CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R1 = 0x94,
  CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R2 = 0x95,
  CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R3 = 0x96,
  CONST_SRC_CODE_SCENE_EYEOFFSET = 0x97,
  CONST_SRC_CODE_PREV_FRAME_EYEOFFSET = 0x98,
  CONST_SRC_CODE_MOTION_BLUR_HQ_PARAMS = 0x99,
  CONST_SRC_CODE_MOTION_BLUR_HQ_TILE_MAX_PARAMS = 0x9A,
  CONST_SRC_CODE_MOTION_BLUR_HQ_DECODE_SCALE_BIAS = 0x9B,
  CONST_SRC_CODE_STATIC_MOTIONBLUR_VELOCITY_PARMS = 0x9C,
  CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION = 0x9D,
  CONST_SRC_CODE_SHADOWMAP_SCALE = 0x9E,
  CONST_SRC_CODE_ZNEAR = 0x9F,
  CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE = 0xA0,
  CONST_SRC_CODE_INV_SCENE_PROJECTION = 0xA1,
  CONST_SRC_CODE_RIM_LIGHT_0_DIR = 0xA2,
  CONST_SRC_CODE_RIM_LIGHT_0_COLOR = 0xA3,
  CONST_SRC_CODE_RIM_LIGHT_1_DIR = 0xA4,
  CONST_SRC_CODE_RIM_LIGHT_1_COLOR = 0xA5,
  CONST_SRC_CODE_RIM_LIGHT_TECHNIQUE = 0xA6,
  CONST_SCR_CODE_HDR_SKY_INTENSITY = 0xA7,
  CONST_SRC_CODE_DEBUG_BUMPMAP = 0xA8,
  CONST_SRC_CODE_MATERIAL_COLOR = 0xA9,
  CONST_SRC_CODE_FOG = 0xAA,
  CONST_SRC_CODE_FOG_COLOR_LINEAR = 0xAB,
  CONST_SRC_CODE_FOG_COLOR_GAMMA = 0xAC,
  CONST_SRC_CODE_FOG_SUN_CONSTS = 0xAD,
  CONST_SRC_CODE_FOG_SUN_COLOR_LINEAR = 0xAE,
  CONST_SRC_CODE_FOG_SUN_COLOR_GAMMA = 0xAF,
  CONST_SRC_CODE_FOG_SUN_DIR = 0xB0,
  CONST_SRC_CODE_FOG_HEIGHT = 0xB1,
  CONST_SRC_CODE_FOG_SKY_DIR = 0xB2,
  CONST_SRC_CODE_FOG_DEPTHHACK = 0xB3,
  CONST_SRC_CODE_GLOW_SETUP = 0xB4,
  CONST_SRC_CODE_GLOW_APPLY = 0xB5,
  CONST_SRC_CODE_GLOW_SETUP_ALT_COLOR_SCALE = 0xB6,
  CONST_SRC_CODE_COLOR_BIAS = 0xB7,
  CONST_SRC_CODE_COLOR_TINT_BASE = 0xB8,
  CONST_SRC_CODE_COLOR_TINT_DELTA = 0xB9,
  CONST_SRC_CODE_COLOR_TINT_QUADRATIC_DELTA = 0xBA,
  CONST_SRC_CODE_MCOLOR_BIAS_AND_RANGE1 = 0xBB,
  CONST_SRC_CODE_MCOLOR_CONTRAST_SCALE1 = 0xBC,
  CONST_SRC_CODE_MCOLOR_CONTRAST_POW_AND_SAT1 = 0xBD,
  CONST_SRC_CODE_MCOLOR_BIAS2_AND_RANGE_SCALE = 0xBE,
  CONST_SRC_CODE_MCOLOR_CONTRAST_SCALE2 = 0xBF,
  CONST_SRC_CODE_MCOLOR_CONTRAST_POW_AND_SAT2 = 0xC0,
  CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION = 0xC1,
  CONST_SRC_CODE_COLORIZATION_SCALE = 0xC2,
  CONST_SRC_CODE_COLORIZATION_BIAS = 0xC3,
  CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_ARRAY = 0xC4,
  CONST_SRC_CODE_COLORIZATION_SCALE_ARRAY = 0xC5,
  CONST_SRC_CODE_COLORIZATION_BIAS_ARRAY = 0xC6,
  CONST_SRC_CODE_COLORIZATION_DEPTH_SCALE_AND_BIAS = 0xC7,
  CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_ALTERNATE = 0xC8,
  CONST_SRC_CODE_COLORIZATION_SCALE_ALTERNATE = 0xC9,
  CONST_SRC_CODE_COLORIZATION_BIAS_ALTERNATE = 0xCA,
  CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_ALTERNATE_ARRAY = 0xCB,
  CONST_SRC_CODE_COLORIZATION_SCALE_ALTERNATE_ARRAY = 0xCC,
  CONST_SRC_CODE_COLORIZATION_BIAS_ALTERNATE_ARRAY = 0xCD,
  CONST_SRC_CODE_COLORIZATION_LOW_AND_HIGH_END_POINTS = 0xCE,
  CONST_SRC_CODE_COLORIZATION_MID_END_POINTS = 0xCF,
  CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_LOW = 0xD0,
  CONST_SRC_CODE_COLORIZATION_SCALE_LOW = 0xD1,
  CONST_SRC_CODE_COLORIZATION_BIAS_LOW = 0xD2,
  CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_MID = 0xD3,
  CONST_SRC_CODE_COLORIZATION_SCALE_MID = 0xD4,
  CONST_SRC_CODE_COLORIZATION_BIAS_MID = 0xD5,
  CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_HIGH = 0xD6,
  CONST_SRC_CODE_COLORIZATION_SCALE_HIGH = 0xD7,
  CONST_SRC_CODE_COLORIZATION_BIAS_HIGH = 0xD8,
  CONST_SRC_CODE_TONE_MAPPING_TOE_STRENGTH_TOE_NUMERATOR = 0xD9,
  CONST_SRC_CODE_TONE_MAPPING_TOE_STRENGTH_TOE_DENOMINATOR = 0xDA,
  CONST_SRC_CODE_TONE_MAPPING_TOE_ANGLE = 0xDB,
  CONST_SRC_CODE_TONE_MAPPING_LINEAR_STRENGTH = 0xDC,
  CONST_SRC_CODE_TONE_MAPPING_LINEAR_ANGLE = 0xDD,
  CONST_SRC_CODE_TONE_MAPPING_TOE_SHOULDER_STRENGTH = 0xDE,
  CONST_SRC_CODE_TONE_MAPPING_INV_TONE_MAPPED_WHITE_POINT = 0xDF,
  CONST_SRC_CODE_TONE_MAPPING_EXPOSURE = 0xE0,
  CONST_SRC_CODE_TONE_MAPPING_ADAPTATION_RATES = 0xE1,
  CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C0_PS = 0xE2,
  CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C1_PS = 0xE3,
  CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C2_PS = 0xE4,
  CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C3_PS = 0xE5,
  CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C4_PS = 0xE6,
  CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C5_PS = 0xE7,
  CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C6_PS = 0xE8,
  CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS = 0xE9,
  CONST_SRC_CODE_ENVMAP_PARMS = 0xEA,
  CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST = 0xEB,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST = 0xEC,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_1 = 0xED,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_2 = 0xEE,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_0 = 0xEF,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_1 = 0xF0,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_2 = 0xF1,
  CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_3 = 0xF2,
  CONST_SRC_CODE_COMPOSITE_FX_DISTORTION = 0xF3,
  CONST_SRC_CODE_POSTFX_FADE_EFFECT = 0xF4,
  CONST_SRC_CODE_SNOWAMBIENTCOLOR = 0xF5,
  CONST_SRC_CODE_VIEWPORT_DIMENSIONS = 0xF6,
  CONST_SRC_CODE_FRAMEBUFFER_READ = 0xF7,
  CONST_SRC_CODE_THERMAL_COLOR_OFFSET = 0xF8,
  CONST_SRC_CODE_THERMAL_FADE_CONTROL = 0xF9,
  CONST_SRC_CODE_THERMAL_FADE_COLOR = 0xFA,
  CONST_SRC_CODE_PLAYLIST_POPULATION_PARAMS = 0xFB,
  CONST_SRC_CODE_TESSELLATION_PARMS = 0xFC,
  CONST_SRC_CODE_TESSELLATION_PARMS2 = 0xFD,
  CONST_SRC_CODE_BLACK_LEVEL = 0xFE,
  CONST_SRC_CODE_FIXED_PS_END = 0xFF,
  CONST_SRC_CODE_NON_PS_BEGIN = 0xFF,
  CONST_SRC_CODE_BASE_LIGHTING_COORDS = 0xFF,
  CONST_SRC_CODE_LIGHT_PROBE_AMBIENT = 0x100,
  CONST_SRC_CODE_NEARPLANE_ORG = 0x101,
  CONST_SRC_CODE_NEARPLANE_DX = 0x102,
  CONST_SRC_CODE_NEARPLANE_DY = 0x103,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE = 0x104,
  CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET = 0x105,
  CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX0 = 0x106,
  CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX1 = 0x107,
  CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX2 = 0x108,
  CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR0 = 0x109,
  CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR1 = 0x10A,
  CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR2 = 0x10B,
  CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM0 = 0x10C,
  CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM1 = 0x10D,
  CONST_SRC_CODE_LIT2D_BLOODSPATTER_FADESHARPNESS = 0x10E,
  CONST_SRC_CODE_BLUR_SCENE_PIXEL_POS_TO_UV = 0x10F,
  CONST_SRC_CODE_REACTIVEMOTION_CENTERS = 0x110,
  CONST_SRC_CODE_DEPTH_FROM_CLIP = 0x111,
  CONST_SRC_CODE_CODE_MESH_ARG_0 = 0x112,
  CONST_SRC_CODE_CODE_MESH_ARG_1 = 0x113,
  CONST_SRC_CODE_CODE_MESH_ARG_LAST = 0x113,
  CONST_SRC_CODE_NON_PS_END = 0x114,
  CONST_SRC_CODE_COUNT_FLOAT4 = 0x114,
  CONST_SRC_FIRST_CODE_MATRIX = 0x114,
  CONST_SRC_CODE_VIEW_MATRIX = 0x114,
  CONST_SRC_CODE_INVERSE_VIEW_MATRIX = 0x115,
  CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX = 0x116,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX = 0x117,
  CONST_SRC_CODE_PROJECTION_MATRIX = 0x118,
  CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX = 0x119,
  CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX = 0x11A,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX = 0x11B,
  CONST_SRC_CODE_VIEW_PROJECTION_MATRIX = 0x11C,
  CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX = 0x11D,
  CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0x11E,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0x11F,
  CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX = 0x120,
  CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX = 0x121,
  CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0x122,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0x123,
  CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX1 = 0x124,
  CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX1 = 0x125,
  CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX1 = 0x126,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX1 = 0x127,
  CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX2 = 0x128,
  CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX2 = 0x129,
  CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX2 = 0x12A,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX2 = 0x12B,
  CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX3 = 0x12C,
  CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX3 = 0x12D,
  CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX3 = 0x12E,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX3 = 0x12F,
  CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x130,
  CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x131,
  CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x132,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x133,
  CONST_SRC_CODE_PREV_FRAME_WORLD_MATRIX = 0x134,
  CONST_SRC_CODE_PREV_FRAME_INVERSE_WORLD_MATRIX = 0x135,
  CONST_SRC_CODE_PREV_FRAME_TRANSPOSE_WORLD_MATRIX = 0x136,
  CONST_SRC_CODE_PREV_FRAME_INVERSE_TRANSPOSE_WORLD_MATRIX = 0x137,
  CONST_SRC_CODE_WORLD_MATRIX0 = 0x138,
  CONST_SRC_CODE_INVERSE_WORLD_MATRIX0 = 0x139,
  CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX0 = 0x13A,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX0 = 0x13B,
  CONST_SRC_CODE_WORLD_VIEW_MATRIX0 = 0x13C,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX0 = 0x13D,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX0 = 0x13E,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX0 = 0x13F,
  CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX0 = 0x140,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX0 = 0x141,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0 = 0x142,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0 = 0x143,
  CONST_SRC_CODE_WORLD_MATRIX1 = 0x144,
  CONST_SRC_CODE_INVERSE_WORLD_MATRIX1 = 0x145,
  CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX1 = 0x146,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX1 = 0x147,
  CONST_SRC_CODE_WORLD_VIEW_MATRIX1 = 0x148,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX1 = 0x149,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX1 = 0x14A,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX1 = 0x14B,
  CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX1 = 0x14C,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX1 = 0x14D,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1 = 0x14E,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1 = 0x14F,
  CONST_SRC_CODE_WORLD_MATRIX2 = 0x150,
  CONST_SRC_CODE_INVERSE_WORLD_MATRIX2 = 0x151,
  CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX2 = 0x152,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX2 = 0x153,
  CONST_SRC_CODE_WORLD_VIEW_MATRIX2 = 0x154,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX2 = 0x155,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX2 = 0x156,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX2 = 0x157,
  CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX2 = 0x158,
  CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX2 = 0x159,
  CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2 = 0x15A,
  CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2 = 0x15B,
  CONST_SRC_TOTAL_COUNT = 0x15C,
  CONST_SRC_NONE = 0x15D,
};

/* 234 */
typedef D3D10_SRV_DIMENSION D3D_SRV_DIMENSION;

/* 235 */
typedef _D3D10_INCLUDE_TYPE _D3D_INCLUDE_TYPE;

/* 236 */
typedef _D3D10_SHADER_VARIABLE_CLASS _D3D_SHADER_VARIABLE_CLASS;

/* 237 */
enum D3D11_FILL_MODE
{
  D3D11_FILL_WIREFRAME = 0x2,
  D3D11_FILL_SOLID = 0x3,
};

/* 238 */
enum D3D11_QUERY
{
  D3D11_QUERY_EVENT = 0x0,
  D3D11_QUERY_OCCLUSION = 0x1,
  D3D11_QUERY_TIMESTAMP = 0x2,
  D3D11_QUERY_TIMESTAMP_DISJOINT = 0x3,
  D3D11_QUERY_PIPELINE_STATISTICS = 0x4,
  D3D11_QUERY_OCCLUSION_PREDICATE = 0x5,
  D3D11_QUERY_SO_STATISTICS = 0x6,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE = 0x7,
  D3D11_QUERY_SO_STATISTICS_STREAM0 = 0x8,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 0x9,
  D3D11_QUERY_SO_STATISTICS_STREAM1 = 0xA,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 0xB,
  D3D11_QUERY_SO_STATISTICS_STREAM2 = 0xC,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 0xD,
  D3D11_QUERY_SO_STATISTICS_STREAM3 = 0xE,
  D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 0xF,
};

/* 239 */
enum D3D11_CULL_MODE
{
  D3D11_CULL_NONE = 0x1,
  D3D11_CULL_FRONT = 0x2,
  D3D11_CULL_BACK = 0x3,
};

/* 240 */
typedef _D3D10_SHADER_VARIABLE_FLAGS _D3D_SHADER_VARIABLE_FLAGS;

/* 241 */
typedef _D3D10_SHADER_VARIABLE_TYPE _D3D_SHADER_VARIABLE_TYPE;

/* 242 */
enum D3D11_RESOURCE_DIMENSION
{
  D3D11_RESOURCE_DIMENSION_UNKNOWN = 0x0,
  D3D11_RESOURCE_DIMENSION_BUFFER = 0x1,
  D3D11_RESOURCE_DIMENSION_TEXTURE1D = 0x2,
  D3D11_RESOURCE_DIMENSION_TEXTURE2D = 0x3,
  D3D11_RESOURCE_DIMENSION_TEXTURE3D = 0x4,
};

/* 243 */
enum D3D11_DSV_DIMENSION
{
  D3D11_DSV_DIMENSION_UNKNOWN = 0x0,
  D3D11_DSV_DIMENSION_TEXTURE1D = 0x1,
  D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 0x2,
  D3D11_DSV_DIMENSION_TEXTURE2D = 0x3,
  D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 0x4,
  D3D11_DSV_DIMENSION_TEXTURE2DMS = 0x5,
  D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 0x6,
};

/* 244 */
enum D3D11_RTV_DIMENSION
{
  D3D11_RTV_DIMENSION_UNKNOWN = 0x0,
  D3D11_RTV_DIMENSION_BUFFER = 0x1,
  D3D11_RTV_DIMENSION_TEXTURE1D = 0x2,
  D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 0x3,
  D3D11_RTV_DIMENSION_TEXTURE2D = 0x4,
  D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 0x5,
  D3D11_RTV_DIMENSION_TEXTURE2DMS = 0x6,
  D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 0x7,
  D3D11_RTV_DIMENSION_TEXTURE3D = 0x8,
};

/* 245 */
enum D3D11_UAV_DIMENSION
{
  D3D11_UAV_DIMENSION_UNKNOWN = 0x0,
  D3D11_UAV_DIMENSION_BUFFER = 0x1,
  D3D11_UAV_DIMENSION_TEXTURE1D = 0x2,
  D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 0x3,
  D3D11_UAV_DIMENSION_TEXTURE2D = 0x4,
  D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 0x5,
  D3D11_UAV_DIMENSION_TEXTURE3D = 0x8,
};

/* 246 */
enum D3D11_USAGE
{
  D3D11_USAGE_DEFAULT = 0x0,
  D3D11_USAGE_IMMUTABLE = 0x1,
  D3D11_USAGE_DYNAMIC = 0x2,
  D3D11_USAGE_STAGING = 0x3,
};

/* 247 */
enum D3D11_BIND_FLAG
{
  D3D11_BIND_VERTEX_BUFFER = 0x1,
  D3D11_BIND_INDEX_BUFFER = 0x2,
  D3D11_BIND_CONSTANT_BUFFER = 0x4,
  D3D11_BIND_SHADER_RESOURCE = 0x8,
  D3D11_BIND_STREAM_OUTPUT = 0x10,
  D3D11_BIND_RENDER_TARGET = 0x20,
  D3D11_BIND_DEPTH_STENCIL = 0x40,
  D3D11_BIND_UNORDERED_ACCESS = 0x80,
  D3D11_BIND_DECODER = 0x200,
  D3D11_BIND_VIDEO_ENCODER = 0x400,
};

/* 248 */
enum D3D11_CPU_ACCESS_FLAG
{
  D3D11_CPU_ACCESS_WRITE = 0x10000,
  D3D11_CPU_ACCESS_READ = 0x20000,
};

/* 249 */
enum $04E5073ECAAD142C73E693DFFB25FA2D
{
  CMDBUF_LIT_OPAQUE = 0x0,
  CMDBUF_LIT_PREPASS = 0x1,
  CMDBUF_LIT_OPAQUE1 = 0x2,
  CMDBUF_LIT_PREPASS1 = 0x3,
  CMDBUF_LIT_GLASS_OPAQUE = 0x4,
  CMDBUF_DECAL = 0x5,
  CMDBUF_TRANS = 0x6,
  CMDBUF_DECAL_PREPASS = 0x7,
  CMDBUF_TRANS_PREPASS = 0x8,
  CMDBUF_LIGHT_MAP_OPAQUE = 0x9,
  CMDBUF_LIGHT_MAP_OPAQUE1 = 0xA,
  CMDBUF_LIGHT_MAP_OPAQUE2 = 0xB,
  CMDBUF_LIGHT_MAP_OPAQUE3 = 0xC,
  CMDBUF_LIGHT_MAP_OPAQUE4 = 0xD,
  CMDBUF_LIGHT_MAP_OPAQUE5 = 0xE,
  CMDBUF_LIGHT_MAP_OPAQUE6 = 0xF,
  CMDBUF_LIGHT_MAP_OPAQUE7 = 0x10,
  CMDBUF_LIGHT_MAP_OPAQUE8 = 0x11,
  CMDBUF_LIGHT_MAP_OPAQUE9 = 0x12,
  CMDBUF_LIGHT_MAP_OPAQUE10 = 0x13,
  CMDBUF_LIGHT_MAP_OPAQUE11 = 0x14,
  CMDBUF_LIGHT_MAP_PREPASS = 0x15,
  CMDBUF_LIGHT_MAP_PREPASS1 = 0x16,
  CMDBUF_LIGHT_MAP_PREPASS2 = 0x17,
  CMDBUF_LIGHT_MAP_PREPASS3 = 0x18,
  CMDBUF_LIGHT_MAP_PREPASS4 = 0x19,
  CMDBUF_LIGHT_MAP_PREPASS5 = 0x1A,
  CMDBUF_LIGHT_MAP_PREPASS6 = 0x1B,
  CMDBUF_LIGHT_MAP_PREPASS7 = 0x1C,
  CMDBUF_LIGHT_MAP_PREPASS8 = 0x1D,
  CMDBUF_LIGHT_MAP_PREPASS9 = 0x1E,
  CMDBUF_LIGHT_MAP_PREPASS10 = 0x1F,
  CMDBUF_LIGHT_MAP_PREPASS11 = 0x20,
  CMDBUF_DEPTH_HACK = 0x21,
  CMDBUF_SHADOW0 = 0x22,
  CMDBUF_SHADOW1 = 0x23,
  CMDBUF_EMISSIVE = 0x24,
  CMDBUF_SPOTSHADOW0 = 0x25,
  CMDBUF_SPOTSHADOW1 = 0x26,
  CMDBUF_SPOTSHADOW2 = 0x27,
  CMDBUF_SPOTSHADOW3 = 0x28,
  CMDBUF_SPOTSHADOW0_CACHED = 0x29,
  CMDBUF_SPOTSHADOW1_CACHED = 0x2A,
  CMDBUF_SPOTSHADOW2_CACHED = 0x2B,
  CMDBUF_SPOTSHADOW3_CACHED = 0x2C,
  CMDBUF_SUNSHADOW0_CACHED_FIRST = 0x2D,
  CMDBUF_SUNSHADOW0_CACHED_LAST = 0x35,
  CMDBUF_SUNSHADOW1_CACHED_FIRST = 0x36,
  CMDBUF_SUNSHADOW1_CACHED_LAST = 0x3E,
  CMDBUF_MOTIONBLUR_VELOCITY = 0x3F,
  CMDBUF_COUNT = 0x40,
};

/* 250 */
enum D3D11_MAP
{
  D3D11_MAP_READ = 0x1,
  D3D11_MAP_WRITE = 0x2,
  D3D11_MAP_READ_WRITE = 0x3,
  D3D11_MAP_WRITE_DISCARD = 0x4,
  D3D11_MAP_WRITE_NO_OVERWRITE = 0x5,
};

/* 251 */
enum D3D11_COUNTER_TYPE
{
  D3D11_COUNTER_TYPE_FLOAT32 = 0x0,
  D3D11_COUNTER_TYPE_UINT16 = 0x1,
  D3D11_COUNTER_TYPE_UINT32 = 0x2,
  D3D11_COUNTER_TYPE_UINT64 = 0x3,
};

/* 252 */
enum $48020B3658031D6AEE6AC9F164515B88
{
  R_PER_PRIM_CONSTANT_BUFFER_BINDING = 0x0,
  R_PER_OBJECT_CONSTANT_BUFFER_BINDING = 0x1,
  R_STABLE_CONSTANT_BUFFER_BINDING = 0x2,
  R_MATERIAL_CONSTANT_BUFFER_BINDING = 0x3,
  R_SUBDOMAIN_CONSTANT_BUFFER_BINDING = 0x5,
  R_SMODEL_WORLDMATRIX_CONSTANT_BUFFER_BINDING = 0x6,
  R_SMODEL_LIGHTING_OR_AMBIENT_CONSTANT_BUFFER_BINDING = 0x7,
  R_REACTIVEMOTION_CONSTANT_BUFFER_BINDING = 0x9,
  R_REACTIVETURBULENCE_CONSTANT_BUFFER_BINDING = 0xA,
  R_UNUSED_CONSTANT_BUFFER_BINDING = 0xD,
  R_CONSTANT_BUFFER_BINDING_COUNT = 0xE,
};

/* 253 */
enum D3D11_CLEAR_FLAG
{
  D3D11_CLEAR_DEPTH = 0x1,
  D3D11_CLEAR_STENCIL = 0x2,
};

/* 254 */
enum MaterialWorldVertexFormat
{
  MTL_WORLDVERT_T1 = 0x0,
  MTL_WORLDVERT_T2N1D0 = 0x1,
  MTL_WORLDVERT_T2N1D1 = 0x2,
  MTL_WORLDVERT_T2N1D2 = 0x3,
  MTL_WORLDVERT_T2N2D0 = 0x4,
  MTL_WORLDVERT_T2N2D1 = 0x5,
  MTL_WORLDVERT_T2N2D2 = 0x6,
  MTL_WORLDVERT_T3N1D0 = 0x7,
  MTL_WORLDVERT_T3N1D1 = 0x8,
  MTL_WORLDVERT_T3N1D2 = 0x9,
  MTL_WORLDVERT_T3N1D3 = 0xA,
  MTL_WORLDVERT_T3N2D0 = 0xB,
  MTL_WORLDVERT_T3N2D1 = 0xC,
  MTL_WORLDVERT_T3N2D2 = 0xD,
  MTL_WORLDVERT_T3N2D3 = 0xE,
  MTL_WORLDVERT_T3N3D0 = 0xF,
  MTL_WORLDVERT_T3N3D1 = 0x10,
  MTL_WORLDVERT_T3N3D2 = 0x11,
  MTL_WORLDVERT_T3N3D3 = 0x12,
  MTL_WORLDVERT_T4N1D0 = 0x13,
  MTL_WORLDVERT_T4N1D1 = 0x14,
  MTL_WORLDVERT_T4N1D2 = 0x15,
  MTL_WORLDVERT_T4N1D3 = 0x16,
  MTL_WORLDVERT_T4N1D4 = 0x17,
  MTL_WORLDVERT_T4N2D0 = 0x18,
  MTL_WORLDVERT_T4N2D1 = 0x19,
  MTL_WORLDVERT_T4N2D2 = 0x1A,
  MTL_WORLDVERT_T4N2D3 = 0x1B,
  MTL_WORLDVERT_T4N2D4 = 0x1C,
  MTL_WORLDVERT_T4N3D0 = 0x1D,
  MTL_WORLDVERT_T4N3D1 = 0x1E,
  MTL_WORLDVERT_T4N3D2 = 0x1F,
  MTL_WORLDVERT_T4N3D3 = 0x20,
  MTL_WORLDVERT_T4N3D4 = 0x21,
  MTL_WORLDVERT_T4N4D0 = 0x22,
  MTL_WORLDVERT_T4N4D1 = 0x23,
  MTL_WORLDVERT_T4N4D2 = 0x24,
  MTL_WORLDVERT_T4N4D3 = 0x25,
  MTL_WORLDVERT_T4N4D4 = 0x26,
  MTL_WORLDVERT_T5N1D0 = 0x27,
  MTL_WORLDVERT_T5N1D1 = 0x28,
  MTL_WORLDVERT_T5N1D2 = 0x29,
  MTL_WORLDVERT_T5N1D3 = 0x2A,
  MTL_WORLDVERT_T5N1D4 = 0x2B,
  MTL_WORLDVERT_T5N1D5 = 0x2C,
  MTL_WORLDVERT_T5N2D0 = 0x2D,
  MTL_WORLDVERT_T5N2D1 = 0x2E,
  MTL_WORLDVERT_T5N2D2 = 0x2F,
  MTL_WORLDVERT_T5N2D3 = 0x30,
  MTL_WORLDVERT_T5N2D4 = 0x31,
  MTL_WORLDVERT_T5N2D5 = 0x32,
  MTL_WORLDVERT_T5N3D0 = 0x33,
  MTL_WORLDVERT_T5N3D1 = 0x34,
  MTL_WORLDVERT_T5N3D2 = 0x35,
  MTL_WORLDVERT_T5N3D3 = 0x36,
  MTL_WORLDVERT_T5N3D4 = 0x37,
  MTL_WORLDVERT_T5N3D5 = 0x38,
  MTL_WORLDVERT_T5N4D0 = 0x39,
  MTL_WORLDVERT_T5N4D1 = 0x3A,
  MTL_WORLDVERT_T5N4D2 = 0x3B,
  MTL_WORLDVERT_T5N4D3 = 0x3C,
  MTL_WORLDVERT_T5N4D4 = 0x3D,
  MTL_WORLDVERT_T5N4D5 = 0x3E,
  MTL_WORLDVERT_T5N5D0 = 0x3F,
  MTL_WORLDVERT_T5N5D1 = 0x40,
  MTL_WORLDVERT_T5N5D2 = 0x41,
  MTL_WORLDVERT_T5N5D3 = 0x42,
  MTL_WORLDVERT_T5N5D4 = 0x43,
  MTL_WORLDVERT_T5N5D5 = 0x44,
  MTL_WORLDVERT_T6N1D0 = 0x45,
  MTL_WORLDVERT_T6N1D1 = 0x46,
  MTL_WORLDVERT_T6N1D2 = 0x47,
  MTL_WORLDVERT_T6N1D3 = 0x48,
  MTL_WORLDVERT_T6N1D4 = 0x49,
  MTL_WORLDVERT_T6N1D5 = 0x4A,
  MTL_WORLDVERT_T6N1D6 = 0x4B,
  MTL_WORLDVERT_T6N2D0 = 0x4C,
  MTL_WORLDVERT_T6N2D1 = 0x4D,
  MTL_WORLDVERT_T6N2D2 = 0x4E,
  MTL_WORLDVERT_T6N2D3 = 0x4F,
  MTL_WORLDVERT_T6N2D4 = 0x50,
  MTL_WORLDVERT_T6N2D5 = 0x51,
  MTL_WORLDVERT_T6N2D6 = 0x52,
  MTL_WORLDVERT_T6N3D0 = 0x53,
  MTL_WORLDVERT_T6N3D1 = 0x54,
  MTL_WORLDVERT_T6N3D2 = 0x55,
  MTL_WORLDVERT_T6N3D3 = 0x56,
  MTL_WORLDVERT_T6N3D4 = 0x57,
  MTL_WORLDVERT_T6N3D5 = 0x58,
  MTL_WORLDVERT_T6N3D6 = 0x59,
  MTL_WORLDVERT_T6N4D0 = 0x5A,
  MTL_WORLDVERT_T6N4D1 = 0x5B,
  MTL_WORLDVERT_T6N4D2 = 0x5C,
  MTL_WORLDVERT_T6N4D3 = 0x5D,
  MTL_WORLDVERT_T6N4D4 = 0x5E,
  MTL_WORLDVERT_T6N4D5 = 0x5F,
  MTL_WORLDVERT_T6N4D6 = 0x60,
  MTL_WORLDVERT_T6N5D0 = 0x61,
  MTL_WORLDVERT_T6N5D1 = 0x62,
  MTL_WORLDVERT_T6N5D2 = 0x63,
  MTL_WORLDVERT_T6N5D3 = 0x64,
  MTL_WORLDVERT_T6N5D4 = 0x65,
  MTL_WORLDVERT_T6N5D5 = 0x66,
  MTL_WORLDVERT_T6N5D6 = 0x67,
  MTL_WORLDVERT_T7N1D0 = 0x68,
  MTL_WORLDVERT_T7N1D1 = 0x69,
  MTL_WORLDVERT_T7N1D2 = 0x6A,
  MTL_WORLDVERT_T7N1D3 = 0x6B,
  MTL_WORLDVERT_T7N1D4 = 0x6C,
  MTL_WORLDVERT_T7N1D5 = 0x6D,
  MTL_WORLDVERT_T7N1D6 = 0x6E,
  MTL_WORLDVERT_T7N1D7 = 0x6F,
  MTL_WORLDVERT_T7N2D0 = 0x70,
  MTL_WORLDVERT_T7N2D1 = 0x71,
  MTL_WORLDVERT_T7N2D2 = 0x72,
  MTL_WORLDVERT_T7N2D3 = 0x73,
  MTL_WORLDVERT_T7N2D4 = 0x74,
  MTL_WORLDVERT_T7N2D5 = 0x75,
  MTL_WORLDVERT_T7N2D6 = 0x76,
  MTL_WORLDVERT_T7N2D7 = 0x77,
  MTL_WORLDVERT_T7N3D0 = 0x78,
  MTL_WORLDVERT_T7N3D1 = 0x79,
  MTL_WORLDVERT_T7N3D2 = 0x7A,
  MTL_WORLDVERT_T7N3D3 = 0x7B,
  MTL_WORLDVERT_T7N3D4 = 0x7C,
  MTL_WORLDVERT_T7N3D5 = 0x7D,
  MTL_WORLDVERT_T7N3D6 = 0x7E,
  MTL_WORLDVERT_T7N3D7 = 0x7F,
  MTL_WORLDVERT_T7N4D0 = 0x80,
  MTL_WORLDVERT_T7N4D1 = 0x81,
  MTL_WORLDVERT_T7N4D2 = 0x82,
  MTL_WORLDVERT_T7N4D3 = 0x83,
  MTL_WORLDVERT_T7N4D4 = 0x84,
  MTL_WORLDVERT_T7N4D5 = 0x85,
  MTL_WORLDVERT_T7N4D6 = 0x86,
  MTL_WORLDVERT_T7N4D7 = 0x87,
  MTL_WORLDVERT_T7N5D0 = 0x88,
  MTL_WORLDVERT_T7N5D1 = 0x89,
  MTL_WORLDVERT_T7N5D2 = 0x8A,
  MTL_WORLDVERT_T7N5D3 = 0x8B,
  MTL_WORLDVERT_T7N5D4 = 0x8C,
  MTL_WORLDVERT_T7N5D5 = 0x8D,
  MTL_WORLDVERT_T7N5D6 = 0x8E,
  MTL_WORLDVERT_T7N5D7 = 0x8F,
  MTL_WORLDVERT_T8N1D0 = 0x90,
  MTL_WORLDVERT_T8N1D1 = 0x91,
  MTL_WORLDVERT_T8N1D2 = 0x92,
  MTL_WORLDVERT_T8N1D3 = 0x93,
  MTL_WORLDVERT_T8N1D4 = 0x94,
  MTL_WORLDVERT_T8N1D5 = 0x95,
  MTL_WORLDVERT_T8N1D6 = 0x96,
  MTL_WORLDVERT_T8N1D7 = 0x97,
  MTL_WORLDVERT_T8N1D8 = 0x98,
  MTL_WORLDVERT_T8N2D0 = 0x99,
  MTL_WORLDVERT_T8N2D1 = 0x9A,
  MTL_WORLDVERT_T8N2D2 = 0x9B,
  MTL_WORLDVERT_T8N2D3 = 0x9C,
  MTL_WORLDVERT_T8N2D4 = 0x9D,
  MTL_WORLDVERT_T8N2D5 = 0x9E,
  MTL_WORLDVERT_T8N2D6 = 0x9F,
  MTL_WORLDVERT_T8N2D7 = 0xA0,
  MTL_WORLDVERT_T8N2D8 = 0xA1,
  MTL_WORLDVERT_T8N3D0 = 0xA2,
  MTL_WORLDVERT_T8N3D1 = 0xA3,
  MTL_WORLDVERT_T8N3D2 = 0xA4,
  MTL_WORLDVERT_T8N3D3 = 0xA5,
  MTL_WORLDVERT_T8N3D4 = 0xA6,
  MTL_WORLDVERT_T8N3D5 = 0xA7,
  MTL_WORLDVERT_T8N3D6 = 0xA8,
  MTL_WORLDVERT_T8N3D7 = 0xA9,
  MTL_WORLDVERT_T8N3D8 = 0xAA,
  MTL_WORLDVERT_T8N4D0 = 0xAB,
  MTL_WORLDVERT_T8N4D1 = 0xAC,
  MTL_WORLDVERT_T8N4D2 = 0xAD,
  MTL_WORLDVERT_T8N4D3 = 0xAE,
  MTL_WORLDVERT_T8N4D4 = 0xAF,
  MTL_WORLDVERT_T8N4D5 = 0xB0,
  MTL_WORLDVERT_T8N4D6 = 0xB1,
  MTL_WORLDVERT_T8N4D7 = 0xB2,
  MTL_WORLDVERT_T8N4D8 = 0xB3,
  MTL_WORLDVERT_T8N5D0 = 0xB4,
  MTL_WORLDVERT_T8N5D1 = 0xB5,
  MTL_WORLDVERT_T8N5D2 = 0xB6,
  MTL_WORLDVERT_T8N5D3 = 0xB7,
  MTL_WORLDVERT_T8N5D4 = 0xB8,
  MTL_WORLDVERT_T8N5D5 = 0xB9,
  MTL_WORLDVERT_T8N5D6 = 0xBA,
  MTL_WORLDVERT_T8N5D7 = 0xBB,
  MTL_WORLDVERT_T8N5D8 = 0xBC,
  MTL_WORLDVERT_T9N1D0 = 0xBD,
  MTL_WORLDVERT_T9N1D1 = 0xBE,
  MTL_WORLDVERT_T9N1D2 = 0xBF,
  MTL_WORLDVERT_T9N1D3 = 0xC0,
  MTL_WORLDVERT_T9N1D4 = 0xC1,
  MTL_WORLDVERT_T9N1D5 = 0xC2,
  MTL_WORLDVERT_T9N1D6 = 0xC3,
  MTL_WORLDVERT_T9N1D7 = 0xC4,
  MTL_WORLDVERT_T9N1D8 = 0xC5,
  MTL_WORLDVERT_T9N2D0 = 0xC6,
  MTL_WORLDVERT_T9N2D1 = 0xC7,
  MTL_WORLDVERT_T9N2D2 = 0xC8,
  MTL_WORLDVERT_T9N2D3 = 0xC9,
  MTL_WORLDVERT_T9N2D4 = 0xCA,
  MTL_WORLDVERT_T9N2D5 = 0xCB,
  MTL_WORLDVERT_T9N2D6 = 0xCC,
  MTL_WORLDVERT_T9N2D7 = 0xCD,
  MTL_WORLDVERT_T9N2D8 = 0xCE,
  MTL_WORLDVERT_T9N3D0 = 0xCF,
  MTL_WORLDVERT_T9N3D1 = 0xD0,
  MTL_WORLDVERT_T9N3D2 = 0xD1,
  MTL_WORLDVERT_T9N3D3 = 0xD2,
  MTL_WORLDVERT_T9N3D4 = 0xD3,
  MTL_WORLDVERT_T9N3D5 = 0xD4,
  MTL_WORLDVERT_T9N3D6 = 0xD5,
  MTL_WORLDVERT_T9N3D7 = 0xD6,
  MTL_WORLDVERT_T9N3D8 = 0xD7,
  MTL_WORLDVERT_T9N4D0 = 0xD8,
  MTL_WORLDVERT_T9N4D1 = 0xD9,
  MTL_WORLDVERT_T9N4D2 = 0xDA,
  MTL_WORLDVERT_T9N4D3 = 0xDB,
  MTL_WORLDVERT_T9N4D4 = 0xDC,
  MTL_WORLDVERT_T9N4D5 = 0xDD,
  MTL_WORLDVERT_T9N4D6 = 0xDE,
  MTL_WORLDVERT_T9N4D7 = 0xDF,
  MTL_WORLDVERT_T9N4D8 = 0xE0,
  MTL_WORLDVERT_T9N5D0 = 0xE1,
  MTL_WORLDVERT_T9N5D1 = 0xE2,
  MTL_WORLDVERT_T9N5D2 = 0xE3,
  MTL_WORLDVERT_T9N5D3 = 0xE4,
  MTL_WORLDVERT_T9N5D4 = 0xE5,
  MTL_WORLDVERT_T9N5D5 = 0xE6,
  MTL_WORLDVERT_T9N5D6 = 0xE7,
  MTL_WORLDVERT_T9N5D7 = 0xE8,
  MTL_WORLDVERT_T9N5D8 = 0xE9,
  MTL_WORLDVERT_COUNT = 0xEA,
};

/* 255 */
typedef _D3D10_SHADER_INPUT_FLAGS _D3D_SHADER_INPUT_FLAGS;

/* 256 */
enum $CBBE7F7677FCFC5EF46C8128A6BF505C
{
  CONSTANT_BUFFER_PER_PRIM = 0x0,
  CONSTANT_BUFFER_PER_OBJECT = 0x1,
  CONSTANT_BUFFER_STABLE = 0x2,
  CONSTANT_BUFFER_SHARED_COUNT = 0x3,
  CONSTANT_BUFFER_MATERIAL = 0x3,
  FIRST_FIXED_CONSTANT_BUFFER = 0x4,
  CONSTANT_BUFFER_SUBDOMAIN = 0x4,
  CONSTANT_BUFFER_REACTIVEMOTION = 0x5,
  CONSTANT_BUFFER_REACTIVETURBULENCE = 0x6,
  CONSTANT_BUFFER_SMODEL_WORLDMATRIX = 0x7,
  CONSTANT_BUFFER_SMODEL_LIGHTING = 0x8,
  CONSTANT_BUFFER_SMODEL_AMBIENT = 0x9,
  CONSTANT_BUFFER_COUNT = 0xA,
};

/* 257 */
typedef _D3D10_SHADER_INPUT_TYPE _D3D_SHADER_INPUT_TYPE;

/* 258 */
enum $1326FD8044A6688E9ABED5199CACFF5A
{
  R_SUNSHADOW_NEAR = 0x0,
  R_SUNSHADOW_FAR = 0x1,
  R_SUNSHADOW_PARTITION_COUNT = 0x2,
};

/* 259 */
enum $5DEBE4D36DF66D6CCE092E52D2BF2E94
{
  FOG_NONE = 0x0,
  FOG_SERVER = 0x1,
  FOG_CURRENT = 0x2,
  FOG_LAST = 0x3,
  FOG_TARGET = 0x4,
  FOG_CLIENT = 0x5,
  FOG_RESULT = 0x6,
  FOG_WATER = 0x7,
  FOG_COUNT = 0x8,
};

/* 260 */
enum GfxStencilMask
{
  STENCIL_MASK_MATERIAL_0 = 0x1,
  STENCIL_MASK_ALIEN_BLOOM = 0x8,
  STENCIL_MASK_MATERIAL = 0x9,
  STENCIL_MASK_DEPTH_HACK = 0x2,
  STENCIL_MASK_MOTIONBLUR_HQ = 0x4,
  STENCIL_UNUSED = 0x10,
  STENCIL_MASK_HUD_OUTLINE_SHIFT = 0x5,
  STENCIL_MASK_HUD_OUTLINE_0 = 0x20,
  STENCIL_MASK_HUD_OUTLINE_1 = 0x40,
  STENCIL_MASK_HUD_OUTLINE_2 = 0x80,
  STENCIL_MASK_HUD_OUTLINE = 0xE0,
  STENCIL_MASK_ALL = 0xFF,
  STENCIL_MASK_DEFAULT = 0x9,
  STENCIL_MASK_CACHED_SPOT_SHADOW = 0xFF,
};

/* 261 */
enum MaterialTextureSource
{
  TEXTURE_SRC_CODE_BLACK = 0x0,
  TEXTURE_SRC_CODE_WHITE = 0x1,
  TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP = 0x2,
  TEXTURE_SRC_CODE_MODEL_LIGHTING = 0x3,
  TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY = 0x4,
  TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY = 0x5,
  TEXTURE_SRC_CODE_SHADOWMAP_SUN = 0x6,
  TEXTURE_SRC_CODE_SHADOWMAP_SPOT = 0x7,
  TEXTURE_SRC_CODE_SHADOWMAP_SPOT_1 = 0x8,
  TEXTURE_SRC_CODE_SHADOWMAP_SPOT_2 = 0x9,
  TEXTURE_SRC_CODE_SHADOWMAP_SPOT_3 = 0xA,
  TEXTURE_SRC_CODE_FEEDBACK = 0xB,
  TEXTURE_SRC_CODE_RESOLVED_POST_SUN = 0xC,
  TEXTURE_SRC_CODE_RESOLVED_SCENE = 0xD,
  TEXTURE_SRC_CODE_HDR_SCENE_R11G11B10_MIPMAP = 0xE,
  TEXTURE_SRC_CODE_POST_EFFECT_0 = 0xF,
  TEXTURE_SRC_CODE_POST_EFFECT_1 = 0x10,
  TEXTURE_SRC_CODE_LIGHT_ATTENUATION = 0x11,
  TEXTURE_SRC_CODE_LIGHT_CUCOLORIS = 0x12,
  TEXTURE_SRC_CODE_LIGHT_ATTENUATION1 = 0x13,
  TEXTURE_SRC_CODE_LIGHT_CUCOLORIS1 = 0x14,
  TEXTURE_SRC_CODE_LIGHT_ATTENUATION2 = 0x15,
  TEXTURE_SRC_CODE_LIGHT_CUCOLORIS2 = 0x16,
  TEXTURE_SRC_CODE_LIGHT_ATTENUATION3 = 0x17,
  TEXTURE_SRC_CODE_LIGHT_CUCOLORIS3 = 0x18,
  TEXTURE_SRC_CODE_OUTDOOR = 0x19,
  TEXTURE_SRC_CODE_FLOATZ = 0x1A,
  TEXTURE_SRC_CODE_PROCESSED_FLOATZ = 0x1B,
  TEXTURE_SRC_CODE_RAW_FLOATZ = 0x1C,
  TEXTURE_SRC_CODE_FLOATZ_STENCIL = 0x1D,
  TEXTURE_SRC_CODE_RAW_STENCIL = 0x1E,
  TEXTURE_SRC_CODE_HALF_PARTICLES = 0x1F,
  TEXTURE_SRC_CODE_HALF_PARTICLES_Z = 0x20,
  TEXTURE_SRC_CODE_CASE_TEXTURE = 0x21,
  TEXTURE_SRC_CODE_CINEMATIC_Y = 0x22,
  TEXTURE_SRC_CODE_CINEMATIC_CR = 0x23,
  TEXTURE_SRC_CODE_CINEMATIC_CB = 0x24,
  TEXTURE_SRC_CODE_CINEMATIC_A = 0x25,
  TEXTURE_SRC_CODE_REFLECTION_PROBE = 0x26,
  TEXTURE_SRC_CODE_DALTONIZE_CLUT = 0x27,
  TEXTURE_SRC_CODE_MACROCLUT = 0x28,
  TEXTURE_SRC_CODE_PIP_SCENE = 0x29,
  TEXTURE_SRC_CODE_BLUR_SCENE_SAVE = 0x2A,
  TEXTURE_SRC_CODE_CHARACTER_SCENE = 0x2B,
  TEXTURE_SRC_CODE_RANDOM_ROTATIONS = 0x2C,
  TEXTURE_SRC_CODE_SSAO = 0x2D,
  TEXTURE_SRC_CODE_POSTFX_TEXTURE_0 = 0x2E,
  TEXTURE_SRC_CODE_POSTFX_TEXTURE_1 = 0x2F,
  TEXTURE_SRC_CODE_POSTFX_TEXTURE_2 = 0x30,
  TEXTURE_SRC_CODE_POSTFX_TEXTURE_3 = 0x31,
  TEXTURE_SRC_CODE_COLORIZATION_ALTERNATE_MASK = 0x32,
  TEXTURE_SRC_CODE_COLOR_GRADING_CLUT = 0x33,
  TEXTURE_SRC_CODE_DEPTH_BLUR_0 = 0x34,
  TEXTURE_SRC_CODE_DEPTH_BLUR_1 = 0x35,
  TEXTURE_SRC_CODE_SCENE_LUMINANCE = 0x36,
  TEXTURE_SRC_CODE_DEFAULT_DEPTH = 0x37,
  TEXTURE_SRC_CODE_DYNAMIC_IRIS_EXPOSURE = 0x38,
  TEXTURE_SRC_CODE_SCENE_VELOCITY = 0x39,
  TEXTURE_SRC_CODE_SCENE_VELOCITY_PASS0 = 0x3A,
  TEXTURE_SRC_CODE_SCENE_VELOCITY_PASS1 = 0x3B,
  TEXTURE_SRC_CODE_GENERIC_FLOAT_DATA = 0x3C,
  TEXTURE_SRC_CODE_COUNT = 0x3D,
};

/* 262 */
enum $65FF71DDFDD39055237FF0E03477BD4A
{
  STREAM_SRC_POSITION = 0x0,
  STREAM_SRC_COLOR = 0x1,
  STREAM_SRC_TEXCOORD_0 = 0x2,
  STREAM_SRC_NORMAL = 0x3,
  STREAM_SRC_TANGENT = 0x4,
  STREAM_SRC_OPTIONAL_BEGIN = 0x5,
  STREAM_SRC_PRE_OPTIONAL_BEGIN = 0x4,
  STREAM_SRC_TEXCOORD_1 = 0x5,
  STREAM_SRC_TEXCOORD_2 = 0x6,
  STREAM_SRC_TEXCOORD_3 = 0x7,
  STREAM_SRC_TEXCOORD_4 = 0x8,
  STREAM_SRC_VERTEX_LIT_0 = 0x9,
  STREAM_SRC_VERTEX_LIT_1 = 0xA,
  STREAM_SRC_VERTEX_LIT_2 = 0xB,
  STREAM_SRC_MODEL_LMAP_COORDS = 0xC,
  STREAM_SRC_NORMAL_TRANSFORM_0 = 0xD,
  STREAM_SRC_NORMAL_TRANSFORM_1 = 0xE,
  STREAM_SRC_NORMAL_TRANSFORM_2 = 0xF,
  STREAM_SRC_NORMAL_TRANSFORM_3 = 0x10,
  STREAM_SRC_COLOR2 = 0x11,
  STREAM_SRC_TEXEL_DENSITY_0 = 0x12,
  STREAM_SRC_TEXEL_DENSITY_1 = 0x13,
  STREAM_SRC_DISPLACEMENT_WEIGHTS_0 = 0x14,
  STREAM_SRC_DISPLACEMENT_WEIGHTS_1 = 0x15,
  STREAM_SRC_COUNT = 0x16,
};

/* 263 */
typedef _D3D10_SHADER_CBUFFER_FLAGS _D3D_SHADER_CBUFFER_FLAGS;

/* 264 */
typedef _D3D10_CBUFFER_TYPE _D3D_CBUFFER_TYPE;

/* 265 */
enum D3D11_DEVICE_CONTEXT_TYPE
{
  D3D11_DEVICE_CONTEXT_IMMEDIATE = 0x0,
  D3D11_DEVICE_CONTEXT_DEFERRED = 0x1,
};

/* 266 */
typedef D3D10_NAME D3D_NAME;

/* 267 */
enum $36696C32A7BED9AC327E0A7057EB4EE1
{
  STREAM_DST_POSITION = 0x0,
  STREAM_DST_NORMAL = 0x1,
  STREAM_DST_COLOR_0 = 0x2,
  STREAM_DST_COLOR_1 = 0x3,
  STREAM_DST_COLOR_LAST = 0x4,
  STREAM_DST_COLOR_END = 0x3,
  STREAM_DST_DEPTH = 0x4,
  STREAM_DST_TEXCOORD_0 = 0x5,
  STREAM_DST_TEXCOORD_1 = 0x6,
  STREAM_DST_TEXCOORD_2 = 0x7,
  STREAM_DST_TEXCOORD_3 = 0x8,
  STREAM_DST_TEXCOORD_4 = 0x9,
  STREAM_DST_TEXCOORD_5 = 0xA,
  STREAM_DST_TEXCOORD_6 = 0xB,
  STREAM_DST_TEXCOORD_7 = 0xC,
  STREAM_DST_TEXCOORD_8 = 0xD,
  STREAM_DST_TEXCOORD_9 = 0xE,
  STREAM_DST_TEXCOORD_10 = 0xF,
  STREAM_DST_TEXCOORD_11 = 0x10,
  STREAM_DST_TEXCOORD_12 = 0x11,
  STREAM_DST_TEXCOORD_13 = 0x12,
  STREAM_DST_TEXCOORD_14 = 0x13,
  STREAM_DST_TEXCOORD_15 = 0x14,
  STREAM_DST_TEXCOORD_16 = 0x15,
  STREAM_DST_TEXCOORD_17 = 0x16,
  STREAM_DST_TEXCOORD_18 = 0x17,
  STREAM_DST_TEXCOORD_19 = 0x18,
  STREAM_DST_TEXCOORD_20 = 0x19,
  STREAM_DST_TEXCOORD_21 = 0x1A,
  STREAM_DST_TEXCOORD_22 = 0x1B,
  STREAM_DST_TEXCOORD_23 = 0x1C,
  STREAM_DST_TEXCOORD_24 = 0x1D,
  STREAM_DST_TEXCOORD_25 = 0x1E,
  STREAM_DST_COUNT = 0x1F,
  STREAM_DST_TEXCOORD_COUNT = 0x1A,
  STREAM_DST_COLOR_COUNT = 0x2,
  STREAM_DST_CUSTOM = 0x1F,
};

/* 268 */
enum GfxRenderTargetId
{
  R_RENDERTARGET_SAVED_SCREEN = 0x0,
  R_RENDERTARGET_FRAME_BUFFER = 0x1,
  R_RENDERTARGET_SCENE = 0x2,
  R_RENDERTARGET_SCENE_PINGPONG = 0x3,
  R_RENDERTARGET_RESOLVED_POST_SUN = 0x4,
  R_RENDERTARGET_RESOLVED_SCENE = 0x5,
  R_RENDERTARGET_FLOAT_Z = 0x6,
  R_RENDERTARGET_PINGPONG_0 = 0x7,
  R_RENDERTARGET_PINGPONG_1 = 0x8,
  R_RENDERTARGET_FRAME_BUFFER_PINGPONG = 0x9,
  R_RENDERTARGET_SMAA_EDGES = 0xA,
  R_RENDERTARGET_SMAA_BLEND = 0xB,
  R_RENDERTARGET_PIP_SCENE = 0xC,
  R_RENDERTARGET_PIP_SCENE_FLOAT_Z = 0xD,
  R_RENDERTARGET_PIP_SCENE_PINGPONG = 0xE,
  R_RENDERTARGET_PIP_FINAL_SCENE = 0xF,
  R_RENDERTARGET_PIP_SCENE_NODEPTH = 0x10,
  R_RENDERTARGET_PIP_SCENE_PINGPONG_NODEPTH = 0x11,
  R_RENDERTARGET_PIP_FINAL_SCENE_NODEPTH = 0x12,
  R_RENDERTARGET_POST_EFFECT_0 = 0x13,
  R_RENDERTARGET_POST_EFFECT_1 = 0x14,
  R_RENDERTARGET_SHADOWMAP_LARGE = 0x15,
  R_RENDERTARGET_SHADOWMAP_SMALL = 0x16,
  R_RENDERTARGET_SSAO_LUMINANCE = 0x17,
  R_RENDERTARGET_SSAO_LUMINANCE_VBLUR = 0x18,
  R_RENDERTARGET_HDR_POSTFX_0 = 0x19,
  R_RENDERTARGET_HDR_POSTFX_1 = 0x1A,
  R_RENDERTARGET_HDR_PINGPONG = 0x1B,
  R_RENDERTARGET_HDR_POSTFX_FP32_0 = 0x1C,
  R_RENDERTARGET_HDR_POSTFX_FP32_1 = 0x1D,
  R_RENDERTARGET_SCENE_R16G16F = 0x1E,
  R_RENDERTARGET_SCENE_R16F_MIP1_PING = 0x1F,
  R_RENDERTARGET_SCENE_R16F_MIP1_PONG = 0x20,
  R_RENDERTARGET_HDR_SCENE_MIPMAP = 0x21,
  R_RENDERTARGET_HDR_SCENE_MIP0 = 0x22,
  R_RENDERTARGET_HDR_SCENE_MIP1 = 0x23,
  R_RENDERTARGET_HDR_SCENE_MIP2 = 0x24,
  R_RENDERTARGET_HDR_SCENE_MIP3 = 0x25,
  R_RENDERTARGET_HDR_SCENE_MIP1_TEMP = 0x26,
  R_RENDERTARGET_HDR_SCENE_MIP2_TEMP = 0x27,
  R_RENDERTARGET_HDR_SCENE_MIP3_TEMP = 0x28,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIPMAP = 0x29,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_BEGIN = 0x2A,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP2 = 0x2A,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP3 = 0x2B,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP4 = 0x2C,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP5 = 0x2D,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP6 = 0x2E,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP7 = 0x2F,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_END = 0x2F,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP2_TEMP = 0x30,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP3_TEMP = 0x31,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP4_TEMP = 0x32,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP5_TEMP = 0x33,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP6_TEMP = 0x34,
  R_RENDERTARGET_HDR_SCENE_R11G11B10_MIP7_TEMP = 0x35,
  R_RENDERTARGET_DEPTH_BLUR_0 = 0x36,
  R_RENDERTARGET_DEPTH_BLUR_1 = 0x37,
  R_RENDERTARGET_SCENE_LUMINANCE_64 = 0x38,
  R_RENDERTARGET_SCENE_LUMINANCE_16 = 0x39,
  R_RENDERTARGET_SCENE_LUMINANCE_4 = 0x3A,
  R_RENDERTARGET_SCENE_LUMINANCE = 0x3B,
  R_RENDERTARGET_SCENE_VELOCITY = 0x3C,
  R_RENDERTARGET_SCENE_VELOCITY_PASS0_TEMP = 0x3D,
  R_RENDERTARGET_SCENE_VELOCITY_PASS0 = 0x3E,
  R_RENDERTARGET_SCENE_VELOCITY_PASS1 = 0x3F,
  R_RENDERTARGET_DYNAMIC_IRIS_EXPOSURE_0 = 0x40,
  R_RENDERTARGET_DYNAMIC_IRIS_EXPOSURE_1 = 0x41,
  R_RENDERTARGET_DYNAMIC_IRIS_EXPOSURE_0_PIP = 0x42,
  R_RENDERTARGET_DYNAMIC_IRIS_EXPOSURE_1_PIP = 0x43,
  R_RENDERTARGET_SCENE_NODEPTH = 0x44,
  R_RENDERTARGET_SCENE_PINGPONG_NODEPTH = 0x45,
  R_RENDERTARGET_CACHED_SPOT_SHADOW_FIRST = 0x46,
  R_RENDERTARGET_CACHED_SPOT_BSP_ONLY_0 = 0x46,
  R_RENDERTARGET_CACHED_SPOT_BSP_ONLY_LAST = 0x55,
  R_RENDERTARGET_CACHED_SPOT_0 = 0x56,
  R_RENDERTARGET_CACHED_SPOT_LAST = 0x65,
  R_RENDERTARGET_CACHED_SPOT_SHADOW_LAST = 0x65,
  R_RENDERTARGET_CACHED_SUN_SHADOW_FIRST = 0x66,
  R_RENDERTARGET_CACHED_SUN_0_BSP_ONLY_0 = 0x66,
  R_RENDERTARGET_CACHED_SUN_0_BSP_ONLY_LAST = 0xAB,
  R_RENDERTARGET_CACHED_SUN_1_BSP_ONLY_0 = 0xAC,
  R_RENDERTARGET_CACHED_SUN_1_BSP_ONLY_LAST = 0xF1,
  R_RENDERTARGET_CACHED_SUN_0_0 = 0xF2,
  R_RENDERTARGET_CACHED_SUN_0_LAST = 0x137,
  R_RENDERTARGET_CACHED_SUN_1_0 = 0x138,
  R_RENDERTARGET_CACHED_SUN_1_LAST = 0x17D,
  R_RENDERTARGET_CACHED_SUN_SHADOW_LAST = 0x17D,
  R_RENDERTARGET_COUNT = 0x17E,
  R_RENDERTARGET_NONE = 0x17F,
};

/* 269 */
enum $E0E483EC7A8A5E1978A648899BE8063A
{
  SURF_FLAG_BIT_VERTCOL_GREY = 0x0,
  SURF_FLAG_BIT_VERTCOL_NONE = 0x1,
  SURF_FLAG_BIT_SKINNED = 0x2,
  SURF_FLAG_BIT_REACTIVE_MOTION = 0x3,
  SURF_FLAG_BIT_LIGHTMAP_COORDS = 0x4,
  SURF_FLAG_BIT_TENSION = 0x5,
  SURF_FLAG_BIT_COUNT = 0x6,
};

/* 270 */
enum $1B7F6CACE73958FF6C7099540A89F8BC
{
  SURF_FLAG_VERTCOL_GREY = 0x1,
  SURF_FLAG_VERTCOL_NONE = 0x2,
  SURF_FLAG_SKINNED = 0x4,
  SURF_FLAG_REACTIVE_MOTION = 0x8,
  SURF_FLAG_LIGHTMAP_COORDS = 0x10,
  SURF_FLAG_TENSION = 0x20,
};

/* 271 */
typedef D3D10_RESOURCE_RETURN_TYPE D3D_RESOURCE_RETURN_TYPE;

/* 272 */
enum $2DDDE224A2FCC28FF9513FBF310314EB
{
  R_CC_MODE_OFF = 0x0,
  R_CC_MODE_FLAT = 0x1,
  R_CC_MODE_DEPTH = 0x2,
  R_CC_MODE_MASK = 0x3,
  R_CC_MODE_CLUT = 0x4,
  R_CC_MODE_COUNT = 0x5,
};

/* 273 */
enum D3D11_COMPARISON_FUNC
{
  D3D11_COMPARISON_NEVER = 0x1,
  D3D11_COMPARISON_LESS = 0x2,
  D3D11_COMPARISON_EQUAL = 0x3,
  D3D11_COMPARISON_LESS_EQUAL = 0x4,
  D3D11_COMPARISON_GREATER = 0x5,
  D3D11_COMPARISON_NOT_EQUAL = 0x6,
  D3D11_COMPARISON_GREATER_EQUAL = 0x7,
  D3D11_COMPARISON_ALWAYS = 0x8,
};

/* 274 */
enum D3D_FEATURE_LEVEL
{
  D3D_FEATURE_LEVEL_9_1 = 0x9100,
  D3D_FEATURE_LEVEL_9_2 = 0x9200,
  D3D_FEATURE_LEVEL_9_3 = 0x9300,
  D3D_FEATURE_LEVEL_10_0 = 0xA000,
  D3D_FEATURE_LEVEL_10_1 = 0xA100,
  D3D_FEATURE_LEVEL_11_0 = 0xB000,
  D3D_FEATURE_LEVEL_11_1 = 0xB100,
};

/* 275 */
typedef _D3DMULTISAMPLE_TYPE D3DMULTISAMPLE_TYPE;

/* 276 */
enum D3D11_DEPTH_WRITE_MASK
{
  D3D11_DEPTH_WRITE_MASK_ZERO = 0x0,
  D3D11_DEPTH_WRITE_MASK_ALL = 0x1,
};

/* 277 */
enum D3D11_FEATURE
{
  D3D11_FEATURE_THREADING = 0x0,
  D3D11_FEATURE_DOUBLES = 0x1,
  D3D11_FEATURE_FORMAT_SUPPORT = 0x2,
  D3D11_FEATURE_FORMAT_SUPPORT2 = 0x3,
  D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 0x4,
  D3D11_FEATURE_D3D11_OPTIONS = 0x5,
  D3D11_FEATURE_ARCHITECTURE_INFO = 0x6,
  D3D11_FEATURE_D3D9_OPTIONS = 0x7,
  D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 0x8,
  D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 0x9,
};

/* 278 */
enum D3D11_STENCIL_OP
{
  D3D11_STENCIL_OP_KEEP = 0x1,
  D3D11_STENCIL_OP_ZERO = 0x2,
  D3D11_STENCIL_OP_REPLACE = 0x3,
  D3D11_STENCIL_OP_INCR_SAT = 0x4,
  D3D11_STENCIL_OP_DECR_SAT = 0x5,
  D3D11_STENCIL_OP_INVERT = 0x6,
  D3D11_STENCIL_OP_INCR = 0x7,
  D3D11_STENCIL_OP_DECR = 0x8,
};

/* 279 */
typedef D3D10_REGISTER_COMPONENT_TYPE D3D_REGISTER_COMPONENT_TYPE;

/* 280 */
enum D3D_TESSELLATOR_DOMAIN
{
  D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0x0,
  D3D_TESSELLATOR_DOMAIN_ISOLINE = 0x1,
  D3D_TESSELLATOR_DOMAIN_TRI = 0x2,
  D3D_TESSELLATOR_DOMAIN_QUAD = 0x3,
  D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0x0,
  D3D11_TESSELLATOR_DOMAIN_ISOLINE = 0x1,
  D3D11_TESSELLATOR_DOMAIN_TRI = 0x2,
  D3D11_TESSELLATOR_DOMAIN_QUAD = 0x3,
};

/* 281 */
enum D3D_TESSELLATOR_PARTITIONING
{
  D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0x0,
  D3D_TESSELLATOR_PARTITIONING_INTEGER = 0x1,
  D3D_TESSELLATOR_PARTITIONING_POW2 = 0x2,
  D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 0x3,
  D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 0x4,
  D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0x0,
  D3D11_TESSELLATOR_PARTITIONING_INTEGER = 0x1,
  D3D11_TESSELLATOR_PARTITIONING_POW2 = 0x2,
  D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 0x3,
  D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 0x4,
};

/* 282 */
enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
{
  D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0x0,
  D3D_TESSELLATOR_OUTPUT_POINT = 0x1,
  D3D_TESSELLATOR_OUTPUT_LINE = 0x2,
  D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 0x3,
  D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 0x4,
  D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0x0,
  D3D11_TESSELLATOR_OUTPUT_POINT = 0x1,
  D3D11_TESSELLATOR_OUTPUT_LINE = 0x2,
  D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 0x3,
  D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 0x4,
};

/* 283 */
enum D3D10_MESSAGE_CATEGORY
{
  D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0x0,
  D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 0x1,
  D3D10_MESSAGE_CATEGORY_INITIALIZATION = 0x2,
  D3D10_MESSAGE_CATEGORY_CLEANUP = 0x3,
  D3D10_MESSAGE_CATEGORY_COMPILATION = 0x4,
  D3D10_MESSAGE_CATEGORY_STATE_CREATION = 0x5,
  D3D10_MESSAGE_CATEGORY_STATE_SETTING = 0x6,
  D3D10_MESSAGE_CATEGORY_STATE_GETTING = 0x7,
  D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 0x8,
  D3D10_MESSAGE_CATEGORY_EXECUTION = 0x9,
  D3D10_MESSAGE_CATEGORY_SHADER = 0xA,
};

/* 284 */
enum D3D11_SHADER_TRACKING_OPTION
{
  D3D11_SHADER_TRACKING_OPTION_IGNORE = 0x0,
  D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED = 0x1,
  D3D11_SHADER_TRACKING_OPTION_TRACK_RAW = 0x2,
  D3D11_SHADER_TRACKING_OPTION_TRACK_WAR = 0x4,
  D3D11_SHADER_TRACKING_OPTION_TRACK_WAW = 0x8,
  D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME = 0x10,
  D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY = 0x20,
  D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS = 0x40,
  D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS = 0x80,
  D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS = 0x100,
  D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = 0x200,
  D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS = 0x3C0,
  D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS = 0x3EE,
  D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME = 0x3FE,
  D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS = 0x3FF,
};

/* 285 */
enum D3D11_BLEND
{
  D3D11_BLEND_ZERO = 0x1,
  D3D11_BLEND_ONE = 0x2,
  D3D11_BLEND_SRC_COLOR = 0x3,
  D3D11_BLEND_INV_SRC_COLOR = 0x4,
  D3D11_BLEND_SRC_ALPHA = 0x5,
  D3D11_BLEND_INV_SRC_ALPHA = 0x6,
  D3D11_BLEND_DEST_ALPHA = 0x7,
  D3D11_BLEND_INV_DEST_ALPHA = 0x8,
  D3D11_BLEND_DEST_COLOR = 0x9,
  D3D11_BLEND_INV_DEST_COLOR = 0xA,
  D3D11_BLEND_SRC_ALPHA_SAT = 0xB,
  D3D11_BLEND_BLEND_FACTOR = 0xE,
  D3D11_BLEND_INV_BLEND_FACTOR = 0xF,
  D3D11_BLEND_SRC1_COLOR = 0x10,
  D3D11_BLEND_INV_SRC1_COLOR = 0x11,
  D3D11_BLEND_SRC1_ALPHA = 0x12,
  D3D11_BLEND_INV_SRC1_ALPHA = 0x13,
};

/* 286 */
enum D3D10_MESSAGE_SEVERITY
{
  D3D10_MESSAGE_SEVERITY_CORRUPTION = 0x0,
  D3D10_MESSAGE_SEVERITY_ERROR = 0x1,
  D3D10_MESSAGE_SEVERITY_WARNING = 0x2,
  D3D10_MESSAGE_SEVERITY_INFO = 0x3,
  D3D10_MESSAGE_SEVERITY_MESSAGE = 0x4,
};

/* 287 */
enum D3D11_BLEND_OP
{
  D3D11_BLEND_OP_ADD = 0x1,
  D3D11_BLEND_OP_SUBTRACT = 0x2,
  D3D11_BLEND_OP_REV_SUBTRACT = 0x3,
  D3D11_BLEND_OP_MIN = 0x4,
  D3D11_BLEND_OP_MAX = 0x5,
};

/* 288 */
enum D3D11_COLOR_WRITE_ENABLE
{
  D3D11_COLOR_WRITE_ENABLE_RED = 0x1,
  D3D11_COLOR_WRITE_ENABLE_GREEN = 0x2,
  D3D11_COLOR_WRITE_ENABLE_BLUE = 0x4,
  D3D11_COLOR_WRITE_ENABLE_ALPHA = 0x8,
  D3D11_COLOR_WRITE_ENABLE_ALL = 0xF,
};

/* 289 */
enum D3D11_MESSAGE_CATEGORY
{
  D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0x0,
  D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 0x1,
  D3D11_MESSAGE_CATEGORY_INITIALIZATION = 0x2,
  D3D11_MESSAGE_CATEGORY_CLEANUP = 0x3,
  D3D11_MESSAGE_CATEGORY_COMPILATION = 0x4,
  D3D11_MESSAGE_CATEGORY_STATE_CREATION = 0x5,
  D3D11_MESSAGE_CATEGORY_STATE_SETTING = 0x6,
  D3D11_MESSAGE_CATEGORY_STATE_GETTING = 0x7,
  D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 0x8,
  D3D11_MESSAGE_CATEGORY_EXECUTION = 0x9,
  D3D11_MESSAGE_CATEGORY_SHADER = 0xA,
};

/* 290 */
enum GfxRenderTargetSuiteId
{
  R_RENDERTARGET_SUITE_LIT = 0x0,
  R_RENDERTARGET_SUITE_POST_OPAQUE = 0x1,
  R_RENDERTARGET_SUITE_COUNT = 0x2,
  R_RENDERTARGET_SUITE_NONE = 0x3,
};

/* 291 */
enum D3D11_MESSAGE_SEVERITY
{
  D3D11_MESSAGE_SEVERITY_CORRUPTION = 0x0,
  D3D11_MESSAGE_SEVERITY_ERROR = 0x1,
  D3D11_MESSAGE_SEVERITY_WARNING = 0x2,
  D3D11_MESSAGE_SEVERITY_INFO = 0x3,
  D3D11_MESSAGE_SEVERITY_MESSAGE = 0x4,
};

/* 292 */
enum MaterialVertexDeclType
{
  VERTDECL_GENERIC = 0x0,
  VERTDECL_PACKED = 0x1,
  VERTDECL_PACKED_REACTIVEMOTION = 0x2,
  VERTDECL_PACKED_VERTLIT = 0x3,
  VERTDECL_PACKED_MLMAP = 0x4,
  VERTDECL_PACKED_HDR = 0x5,
  VERTDECL_WORLD = 0x6,
  VERTDECL_WORLD_POS = 0x6,
  VERTDECL_WORLD_WORLDVERT_FIRST = 0x6,
  VERTDECL_WORLD_WORLDVERT_LAST = 0xEF,
  VERTDECL_WORLD_DISPLACED_DECAL = 0xF0,
  VERTDECL_POS_TEX = 0xF1,
  VERTDECL_COUNT = 0xF2,
};

/* 293 */
enum GfxPrimStatsTarget
{
  GFX_PRIM_STATS_WORLD = 0x0,
  GFX_PRIM_STATS_SMODELRIGID = 0x1,
  GFX_PRIM_STATS_XMODELRIGID = 0x2,
  GFX_PRIM_STATS_XMODELSKINNED = 0x3,
  GFX_PRIM_STATS_BMODEL = 0x4,
  GFX_PRIM_STATS_COUNT_GEO = 0x5,
  GFX_PRIM_STATS_FX = 0x5,
  GFX_PRIM_STATS_HUD = 0x6,
  GFX_PRIM_STATS_DEBUG = 0x7,
  GFX_PRIM_STATS_CODE = 0x8,
  GFX_PRIM_STATS_COUNT = 0x9,
  GFX_PRIM_STATS_INVALID = 0xA,
};

/* 294 */
enum $AD16F11A536D90A4843F587412FD88E6
{
  MTL_ARG_CODE_CONST = 0x0,
  MTL_ARG_CODE_TEXTURE = 0x1,
  MTL_ARG_CODE_SAMPLER = 0x2,
  MTL_ARG_MATERIAL_CONST = 0x3,
  MTL_ARG_LITERAL_CONST = 0x4,
  MTL_ARG_MATERIAL_TEXTURE = 0x5,
  MTL_ARG_MATERIAL_SAMPLER = 0x6,
  MTL_ARG_COUNT = 0x7,
};

/* 295 */
enum $DF489AB7D171DE9801248586EABB40BD
{
  MTL_COMPUTE_SHADER = 0x0,
  MTL_VERTEX_SHADER = 0x1,
  MTL_HULL_SHADER = 0x2,
  MTL_DOMAIN_SHADER = 0x3,
  MTL_PIXEL_SHADER = 0x4,
  MTL_SHADER_TYPE_COUNT = 0x5,
};

/* 296 */
enum $EADD35D80988D572AF69C2FE33BA66E9
{
  TEXTURE_FILTER_DISABLED = 0x0,
  TEXTURE_FILTER_NEAREST = 0x1,
  TEXTURE_FILTER_LINEAR = 0x2,
  TEXTURE_FILTER_ANISO2X = 0x3,
  TEXTURE_FILTER_ANISO4X = 0x4,
  TEXTURE_FILTER_CMP = 0x5,
  TEXTURE_FILTER_ANISO16X = 0x6,
};

/* 297 */
enum $1B12B2AC40AB8A95F073EE59F3EA3D63
{
  SAMPLER_FILTER_SHIFT = 0x0,
  SAMPLER_FILTER_NEAREST = 0x1,
  SAMPLER_FILTER_LINEAR = 0x2,
  SAMPLER_FILTER_ANISO2X = 0x3,
  SAMPLER_FILTER_ANISO4X = 0x4,
  SAMPLER_FILTER_CMP = 0x5,
  SAMPLER_FILTER_ANISO16X = 0x6,
  SAMPLER_FILTER_MASK = 0x7,
  SAMPLER_MIPMAP_SHIFT = 0x3,
  SAMPLER_MIPMAP_DISABLED = 0x0,
  SAMPLER_MIPMAP_NEAREST = 0x8,
  SAMPLER_MIPMAP_LINEAR = 0x10,
  SAMPLER_MIPMAP_BESPOKE = 0x18,
  SAMPLER_MIPMAP_COUNT = 0x3,
  SAMPLER_MIPMAP_MASK = 0x18,
  SAMPLER_CLAMP_U_SHIFT = 0x5,
  SAMPLER_CLAMP_V_SHIFT = 0x6,
  SAMPLER_CLAMP_W_SHIFT = 0x7,
  SAMPLER_CLAMP_U = 0x20,
  SAMPLER_CLAMP_V = 0x40,
  SAMPLER_CLAMP_W = 0x80,
  SAMPLER_CLAMP_MASK = 0xE0,
};

/* 298 */
enum GfxBlend
{
  GFXS_BLEND_DISABLED = 0x0,
  GFXS_BLEND_ZERO = 0x1,
  GFXS_BLEND_ONE = 0x2,
  GFXS_BLEND_SRCCOLOR = 0x3,
  GFXS_BLEND_INVSRCCOLOR = 0x4,
  GFXS_BLEND_SRCALPHA = 0x5,
  GFXS_BLEND_INVSRCALPHA = 0x6,
  GFXS_BLEND_DESTALPHA = 0x7,
  GFXS_BLEND_INVDESTALPHA = 0x8,
  GFXS_BLEND_DESTCOLOR = 0x9,
  GFXS_BLEND_INVDESTCOLOR = 0xA,
  GFXS_BLEND_SRCCOLOR1 = 0xB,
  GFXS_BLEND_INVSRCCOLOR1 = 0xC,
  GFXS_BLEND_SRCALPHA1 = 0xD,
  GFXS_BLEND_INVSRCALPHA1 = 0xE,
  GFXS_BLEND_MASK = 0xF,
};

/* 299 */
enum GfxBlendOp
{
  GFXS_BLENDOP_DISABLED = 0x0,
  GFXS_BLENDOP_ADD = 0x1,
  GFXS_BLENDOP_SUBTRACT = 0x2,
  GFXS_BLENDOP_REVSUBTRACT = 0x3,
  GFXS_BLENDOP_MIN = 0x4,
  GFXS_BLENDOP_MAX = 0x5,
  GFXS_BLENDOP_MASK = 0x7,
};

/* 300 */
enum GfxStencilOp
{
  GFXS_STENCILOP_KEEP = 0x0,
  GFXS_STENCILOP_ZERO = 0x1,
  GFXS_STENCILOP_REPLACE = 0x2,
  GFXS_STENCILOP_INCRSAT = 0x3,
  GFXS_STENCILOP_DECRSAT = 0x4,
  GFXS_STENCILOP_INVERT = 0x5,
  GFXS_STENCILOP_INCR = 0x6,
  GFXS_STENCILOP_DECR = 0x7,
  GFXS_STENCILOP_COUNT = 0x8,
};

/* 301 */
enum GfxStencilFunc
{
  GFXS_STENCILFUNC_NEVER = 0x0,
  GFXS_STENCILFUNC_LESS = 0x1,
  GFXS_STENCILFUNC_EQUAL = 0x2,
  GFXS_STENCILFUNC_LESSEQUAL = 0x3,
  GFXS_STENCILFUNC_GREATER = 0x4,
  GFXS_STENCILFUNC_NOTEQUAL = 0x5,
  GFXS_STENCILFUNC_GREATEREQUAL = 0x6,
  GFXS_STENCILFUNC_ALWAYS = 0x7,
  GFXS_STENCILFUNC_COUNT = 0x8,
};

/* 302 */
enum $7CEDCD1DFB85FC6C525FEEC0D6B6AD15
{
  DRAWLIST_LIT_OPAQUE = 0x0,
  DRAWLIST_LIGHTMAP_OPAQUE = 0x1,
  DRAWLIST_LIGHTMAP_OPAQUE1 = 0x2,
  DRAWLIST_LIGHTMAP_OPAQUE2 = 0x3,
  DRAWLIST_LIGHTMAP_OPAQUE3 = 0x4,
  DRAWLIST_LIGHTMAP_OPAQUE4 = 0x5,
  DRAWLIST_LIGHTMAP_OPAQUE5 = 0x6,
  DRAWLIST_LIGHTMAP_OPAQUE6 = 0x7,
  DRAWLIST_LIGHTMAP_OPAQUE7 = 0x8,
  DRAWLIST_LIGHTMAP_OPAQUE8 = 0x9,
  DRAWLIST_LIGHTMAP_OPAQUE9 = 0xA,
  DRAWLIST_LIGHTMAP_OPAQUE10 = 0xB,
  DRAWLIST_LIGHTMAP_OPAQUE11 = 0xC,
  DRAWLIST_LIGHTMAP_OPAQUE_END = 0xD,
  DRAWLIST_LIGHTMAP_OPAQUE_END_STEPBACK = 0xC,
  DRAWLIST_LIT_OPAQUE1 = 0xD,
  DRAWLIST_LIT_DECAL = 0xE,
  DRAWLIST_LIT_TRANS = 0xF,
  DRAWLIST_LIT_PREPASS_COUNT = 0x10,
  DRAWLIST_DEPTH_HACK = 0x10,
  DRAWLIST_MOTIONBLUR_VELOCITY = 0x11,
  DRAWLIST_LIT_GLASS_OPAQUE = 0x12,
  DRAWLIST_LIT_COUNT = 0x13,
  DRAWLIST_SHADOWMAP0 = 0x13,
  DRAWLIST_SHADOWMAP1 = 0x14,
  DRAWLIST_EMISSIVE = 0x15,
  DRAWLIST_SPOTSHADOW0 = 0x16,
  DRAWLIST_SPOTSHADOW1 = 0x17,
  DRAWLIST_SPOTSHADOW2 = 0x18,
  DRAWLIST_SPOTSHADOW3 = 0x19,
  DRAWLIST_NOCACHE_COUNT = 0x1A,
  DRAWLIST_NOCACHE_COUNT_HACK = 0x19,
  DRAWLIST_SPOTSHADOW0_CACHED = 0x1A,
  DRAWLIST_SPOTSHADOW1_CACHED = 0x1B,
  DRAWLIST_SPOTSHADOW2_CACHED = 0x1C,
  DRAWLIST_SPOTSHADOW3_CACHED = 0x1D,
  DRAWLIST_SUNSHADOW0_CACHED_FIRST = 0x1E,
  DRAWLIST_SUNSHADOW0_CACHED_LAST = 0x26,
  DRAWLIST_SUNSHADOW1_CACHED_FIRST = 0x27,
  DRAWLIST_SUNSHADOW1_CACHED_LAST = 0x2F,
  DRAWLIST_COUNT = 0x30,
  DRAWLIST_PREPASS_LIT_OPAQUE = 0x30,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE = 0x31,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE1 = 0x32,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE2 = 0x33,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE3 = 0x34,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE4 = 0x35,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE5 = 0x36,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE6 = 0x37,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE7 = 0x38,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE8 = 0x39,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE9 = 0x3A,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE10 = 0x3B,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE11 = 0x3C,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE_END = 0x3D,
  DRAWLIST_PREPASS_LIGHTMAP_OPAQUE_END_STEPBACK = 0x3C,
  DRAWLIST_PREPASS_LIT_OPAQUE1 = 0x3D,
  DRAWLIST_PREPASS_LIT_DECAL = 0x3E,
  DRAWLIST_PREPASS_LIT_TRANS = 0x3F,
  DRAWLIST_OUTPUT_COUNT = 0x40,
  DRAWLIST_OTHER = 0x40,
  DRAWLIST_ALL = 0x41,
};

/* 303 */
enum $AAC13A0BC35C9B7831A1D3BAD3DDED5C
{
  CUSTOM_BUFFER_PER_PRIM = 0x0,
  CUSTOM_BUFFER_PER_OBJECT = 0x1,
  CUSTOM_BUFFER_PER_STABLE = 0x2,
  CUSTOM_BUFFER_MATERIAL = 0x3,
  CUSTOM_BUFFER_SUBDOMAIN = 0x4,
  CUSTOM_BUFFER_REACTIVE_MOTION = 0x5,
  CUSTOM_BUFFER_REACTIVE_TURBULENCE_EFFECTORS = 0x6,
  CUSTOM_BUFFER_SMODEL_WORLDMATRIX = 0x7,
  CUSTOM_BUFFER_SMODEL_LIGHTING = 0x8,
  CUSTOM_BUFFER_SMODEL_AMBIENT = 0x9,
  CUSTOM_BUFFER_SKINNED_CACHED_PREV_FRAME = 0xA,
  CUSTOM_BUFFER_COUNT = 0xB,
};

/* 304 */
enum GfxDepthStencilMode
{
  GFX_DEPTH_STENCIL_MODE_DEFAULT = 0x0,
  GFX_DEPTH_STENCIL_MODE_HUD_OUTLINE = 0x1,
  GFX_DEPTH_STENCIL_MODE_HUD_OUTLINE_ZFAIL = 0x2,
  GFX_DEPTH_STENCIL_MODE_MOTION_BLUR_HQ = 0x3,
  GFX_DEPTH_STENCIL_MODE_DEPTH_HACK = 0x4,
  GFX_DEPTH_STENCIL_MODE_FORCE_DEPTH_WRITE = 0x5,
  GFX_DEPTH_STENCIL_MODE_FORCE_DEPTH_WRITE_HUD_OUTLINE = 0x6,
  GFX_DEPTH_STENCIL_MODE_FORCE_DEPTH_WRITE_HUD_OUTLINE_ZFAIL = 0x7,
  GFX_DEPTH_STENCIL_MODE_CACHED_SPOT_STENCIL_INCR_SAT = 0x8,
  GFX_DEPTH_STENCIL_MODE_CACHED_SPOT_STENCIL_INCR_SAT_CLEAR_DEPTH = 0x9,
  GFX_DEPTH_STENCIL_MODE_CACHED_SPOT_STENCIL_FULL_MASK = 0xA,
  GFX_DEPTH_STENCIL_MODE_COUNT = 0xB,
  GFX_DEPTH_STENCIL_FIRST_FORCE_DEPTH = 0x5,
};

/* 305 */
enum $B399D47DC76F79FF3F07474402DDF51A
{
  GFXS0_ATEST_DISABLE = 0x1,
  GFXS0_ATEST_SHIFT = 0x1,
  GFXS0_ATEST_GT_0 = 0x2,
  GFXS0_ATEST_LT_128 = 0x4,
  GFXS0_ATEST_GE_128 = 0x6,
  GFXS0_ATEST_MASK = 0x6,
  GFXS0_CULL_SHIFT = 0x3,
  GFXS0_CULL_NONE = 0x8,
  GFXS0_CULL_BACK = 0x10,
  GFXS0_CULL_FRONT = 0x18,
  GFXS0_CULL_MASK = 0x18,
  GFXS0_POLYMODE_LINE = 0x20,
  GFXS0_GAMMAWRITE = 0x40,
  GFXS0_STENCIL_REF_SHIFT = 0x8,
  GFXS0_STENCIL_REF_ZERO = 0x0,
  GFXS0_STENCIL_REF_BIT_0 = 0x100,
  GFXS0_STENCIL_REF_BIT_1 = 0x200,
  GFXS0_STENCIL_REF_BIT_2 = 0x400,
  GFXS0_STENCIL_REF_BIT_3 = 0x800,
  GFXS0_STENCIL_REF_BIT_4 = 0x1000,
  GFXS0_STENCIL_REF_BIT_5 = 0x2000,
  GFXS0_STENCIL_REF_BIT_6 = 0x4000,
  GFXS0_STENCIL_REF_BIT_7 = 0x8000,
  GFXS0_STENCIL_REF_MASK = 0xFF00,
  GFXS1_DEPTHWRITE = 0x1,
  GFXS1_DEPTHTEST_DISABLE = 0x2,
  GFXS1_DEPTHTEST_SHIFT = 0x2,
  GFXS1_DEPTHTEST_ALWAYS = 0x0,
  GFXS1_DEPTHTEST_LESS = 0x4,
  GFXS1_DEPTHTEST_EQUAL = 0x8,
  GFXS1_DEPTHTEST_LESSEQUAL = 0xC,
  GFXS1_DEPTHTEST_MASK = 0xC,
  GFXS1_POLYGON_OFFSET_SHIFT = 0x4,
  GFXS1_POLYGON_OFFSET_0 = 0x0,
  GFXS1_POLYGON_OFFSET_1 = 0x10,
  GFXS1_POLYGON_OFFSET_2 = 0x20,
  GFXS1_POLYGON_OFFSET_SHADOWMAP = 0x30,
  GFXS1_POLYGON_OFFSET_MASK = 0x30,
  GFXS1_STENCIL_FRONT_ENABLE = 0x40,
  GFXS1_STENCIL_BACK_ENABLE = 0x80,
  GFXS1_STENCIL_MASK = 0xC0,
  GFXS1_STENCIL_FRONT_PASS_SHIFT = 0x8,
  GFXS1_STENCIL_FRONT_FAIL_SHIFT = 0xB,
  GFXS1_STENCIL_FRONT_ZFAIL_SHIFT = 0xE,
  GFXS1_STENCIL_FRONT_FUNC_SHIFT = 0x11,
  GFXS1_STENCIL_FRONT_MASK = 0xFFF00,
  GFXS1_STENCIL_BACK_PASS_SHIFT = 0x14,
  GFXS1_STENCIL_BACK_FAIL_SHIFT = 0x17,
  GFXS1_STENCIL_BACK_ZFAIL_SHIFT = 0x1A,
  GFXS1_STENCIL_BACK_FUNC_SHIFT = 0x1D,
  GFXS1_STENCIL_BACK_MASK = 0xFFF00000,
  GFXS1_STENCILFUNC_FRONTBACK_MASK = 0xE00E0000,
  GFXS1_STENCILOP_FRONTBACK_MASK = 0x1FF1FF00,
  GFXS_SRCBLEND_RGB_SHIFT = 0x0,
  GFXS_SRCBLEND_RGB_MASK = 0xF,
  GFXS_DSTBLEND_RGB_SHIFT = 0x4,
  GFXS_DSTBLEND_RGB_MASK = 0xF0,
  GFXS_BLENDOP_RGB_SHIFT = 0x8,
  GFXS_BLENDOP_RGB_MASK = 0x700,
  GFXS_BLEND_RGB_MASK = 0x7FF,
  GFXS_SRCBLEND_ALPHA_SHIFT = 0xC,
  GFXS_SRCBLEND_ALPHA_MASK = 0xF000,
  GFXS_DSTBLEND_ALPHA_SHIFT = 0x10,
  GFXS_DSTBLEND_ALPHA_MASK = 0xF0000,
  GFXS_BLENDOP_ALPHA_SHIFT = 0x14,
  GFXS_BLENDOP_ALPHA_MASK = 0x700000,
  GFXS_BLEND_ALPHA_MASK = 0x7FF000,
  GFXS_BLEND_COLORWRITE_SHIFT = 0x18,
  GFXS_BLEND_COLORWRITE_R = 0x1000000,
  GFXS_BLEND_COLORWRITE_G = 0x2000000,
  GFXS_BLEND_COLORWRITE_B = 0x4000000,
  GFXS_BLEND_COLORWRITE_A = 0x8000000,
  GFXS_BLEND_COLORWRITE_RGB = 0x7000000,
  GFXS_BLEND_COLORWRITE_MASK = 0xF000000,
  GFXS2_DEPTHWRITE_OPAQUE = 0x10000000,
};

/* 306 */
enum GfxRenderer
{
  GFX_RENDERER_SHADER_3 = 0x0,
  GFX_RENDERER_SHADER_4 = 0x1,
  GFX_RENDERER_SHADER_5 = 0x2,
  GFX_RENDERER_COUNT = 0x3,
  GFX_RENDERER_UNSPECIFIED = 0x3,
};

/* 307 */
enum GfxDepthRangeType
{
  GFX_DEPTH_RANGE_SCENE = 0x0,
  GFX_DEPTH_RANGE_VIEWMODEL = 0x1,
  GFX_DEPTH_RANGE_FORCE_NEAR = 0x2,
  GFX_DEPTH_RANGE_FORCE_FAR = 0x3,
  GFX_DEPTH_RANGE_FULL = 0xFFFFFFFF,
};

/* 308 */
enum GfxTextureOp
{
  GFXS_TEXOP_DISABLE = 0x0,
  GFXS_TEXOP_SELECTARG1 = 0x1,
  GFXS_TEXOP_SELECTARG2 = 0x2,
  GFXS_TEXOP_MODULATE = 0x3,
  GFXS_TEXOP_MODULATE2X = 0x4,
  GFXS_TEXOP_MODULATE4X = 0x5,
  GFXS_TEXOP_ADD = 0x6,
  GFXS_TEXOP_ADDSIGNED = 0x7,
  GFXS_TEXOP_ADDSIGNED2X = 0x8,
  GFXS_TEXOP_SUBTRACT = 0x9,
  GFXS_TEXOP_ADDSMOOTH = 0xA,
  GFXS_TEXOP_BLENDDIFFUSEALPHA = 0xB,
  GFXS_TEXOP_BLENDTEXTUREALPHA = 0xC,
  GFXS_TEXOP_BLENDFACTORALPHA = 0xD,
  GFXS_TEXOP_BLENDTEXTUREALPHAPM = 0xE,
  GFXS_TEXOP_BLENDCURRENTALPHA = 0xF,
  GFXS_TEXOP_MODULATEALPHA_ADDCOLOR = 0x10,
  GFXS_TEXOP_MODULATECOLOR_ADDALPHA = 0x11,
  GFXS_TEXOP_MODULATEINVALPHA_ADDCOLOR = 0x12,
  GFXS_TEXOP_MODULATEINVCOLOR_ADDALPHA = 0x13,
  GFXS_TEXOP_DOTPRODUCT3 = 0x14,
  GFXS_TEXOP_MULTIPLYADD = 0x15,
  GFXS_TEXOP_LERP = 0x16,
  GFXS_TEXOP_COUNT = 0x17,
  GFXS_TEXOP_BITS = 0x5,
  GFXS_TEXOP_MASK = 0x1F,
};

/* 309 */
enum GfxTextureArg
{
  GFXS_TEXARG_CONSTANT = 0x0,
  GFXS_TEXARG_CURRENT = 0x1,
  GFXS_TEXARG_COLOR_0 = 0x2,
  GFXS_TEXARG_COLOR_1 = 0x3,
  GFXS_TEXARG_TEMP = 0x4,
  GFXS_TEXARG_TEXTURE = 0x5,
  GFXS_TEXARG_TFACTOR = 0x6,
  GFXS_TEXARG_COUNT = 0x7,
  GFXS_TEXARG_BASE_BITS = 0x3,
  GFXS_TEXARG_BASE_MASK = 0x7,
  GFXS_TEXARG_COMPLEMENT = 0x8,
  GFXS_TEXARG_ALPHA_REPLICATE = 0x10,
  GFXS_TEXARG_BITS = 0x5,
  GFXS_TEXARG_MASK = 0x1F,
};

/* 310 */
enum GfxTextureFunc
{
  GFXS_TEXFUNC_OP_SHIFT = 0x0,
  GFXS_TEXFUNC_DEST_SHIFT = 0x5,
  GFXS_TEXFUNC_ARG1_SHIFT = 0xA,
  GFXS_TEXFUNC_ARG2_SHIFT = 0xF,
  GFXS_TEXFUNC_ARG0_SHIFT = 0x14,
};

/* 311 */
enum R_HudOutlinePostMode
{
  R_HUD_OUTLINE_POST_MODE_PIXEL = 0x0,
  R_HUD_OUTLINE_POST_MODE_DEPRECATED = 0x1,
  R_HUD_OUTLINE_POST_MODE_HALO = 0x2,
  R_HUD_OUTLINE_POST_MODE_CURVY = 0x3,
  R_HUD_OUTLINE_POST_MODE_COUNT = 0x4,
};

/* 312 */
enum $A9550983BC6618109E47CED0BE5E3332
{
  GFX_SYM_FILTER_1 = 0x0,
  GFX_SYM_FILTER_2 = 0x1,
  GFX_SYM_FILTER_3 = 0x2,
  GFX_SYM_FILTER_4 = 0x3,
  GFX_SYM_FILTER_5 = 0x4,
  GFX_SYM_FILTER_6 = 0x5,
  GFX_SYM_FILTER_7 = 0x6,
  GFX_SYM_FILTER_8 = 0x7,
  GFX_SYM_FILTER_9 = 0x8,
  GFX_SYM_FILTER_10 = 0x9,
  GFX_SYM_FILTER_11 = 0xA,
  GFX_SYM_FILTER_12 = 0xB,
  GFX_SYM_FILTER_13 = 0xC,
  GFX_SYM_FILTER_14 = 0xD,
  GFX_SYM_FILTER_15 = 0xE,
  GFX_SYM_FILTER_16 = 0xF,
  GFX_SYM_FILTER_COUNT = 0x10,
};

/* 313 */
enum D3D_DRIVER_TYPE
{
  D3D_DRIVER_TYPE_UNKNOWN = 0x0,
  D3D_DRIVER_TYPE_HARDWARE = 0x1,
  D3D_DRIVER_TYPE_REFERENCE = 0x2,
  D3D_DRIVER_TYPE_NULL = 0x3,
  D3D_DRIVER_TYPE_SOFTWARE = 0x4,
  D3D_DRIVER_TYPE_WARP = 0x5,
};

/* 314 */
enum $80BB21665B5848411649902C5A3B3BDC
{
  GFX_SYM_FILTER_GAMMA_OFF = 0x0,
  GFX_SYM_FILTER_GAMMA_ON = 0x1,
  GFX_SYM_FILTER_GAMMA_COUNT = 0x2,
};

/* 315 */
enum GfxBloomApplyMode
{
  GFX_BLOOM_APPLY_NORMAL = 0x0,
  GFX_BLOOM_APPLY_COUNT = 0x1,
};

/* 316 */
enum $C3C18891A29A768F2624F93438493612
{
  GFX_WATERSHEETING_COLOR_BIT = 0x0,
  GFX_WATERSHEETING_MULTI_COLOR_BIT = 0x1,
  GFX_WATERSHEETING_COLOR_MANIPULATION_BITS = 0x2,
  GFX_WATERSHEETING_DALTONIZE_BIT = 0x2,
  GFX_WATERSHEETING_BITS = 0x3,
  GFX_WATERSHEETING_SHADER_COUNT = 0x8,
  GFX_WATERSHEETING_COLOR2 = 0x0,
  GFX_WATERSHEETING_COLOR_MULTI_DEPTH = 0x1,
  GFX_WATERSHEETING_COLOR_MULTI_MASK = 0x2,
  GFX_WATERSHEETING_COLOR_MULTI_CLUT = 0x3,
  GFX_WATERSHEETING_COLOR_MANIPULATION_COUNT = 0x4,
  GFX_WATERSHEETING_DALTONIZE = 0x4,
};

/* 317 */
enum $60EB198AB3BF919D1E2A20E1C1FD03AF
{
  RASTERIZER_STATE_CULL_SHIFT = 0x0,
  RASTERIZER_STATE_CULL_MASK = 0x3,
  RASTERIZER_STATE_POLYGON_OFFSET_SHIFT = 0x2,
  RASTERIZER_STATE_POLYGON_OFFSET_MASK = 0xC,
  RASTERIZER_STATE_POLYMODE_LINE_SHIFT = 0x4,
  RASTERIZER_STATE_POLYMODE_LINE_MASK = 0x10,
  RASTERIZER_STATE_INDEX_MASK = 0x1F,
  RASTERIZER_STATE_ATEST_SHIFT = 0x5,
  RASTERIZER_STATE_ATEST_MASK = 0x60,
  RASTERIZER_STATE_GAMMAWRITE_SHIFT = 0x7,
  RASTERIZER_STATE_GAMMAWRITE_MASK = 0x80,
};

/* 318 */
typedef D3D10_PRIMITIVE_TOPOLOGY D3D_PRIMITIVE_TOPOLOGY;

/* 319 */
enum $3E6EAC37C714CC08BE7A24A0D3BC19F4
{
  GFX_HDR_POSTFX_0_BIT_DOF = 0x0,
  GFX_HDR_POSTFX_0_BIT_COUNT = 0x1,
  GFX_HDR_POSTFX_0_DOF = 0x1,
  GFX_HDR_POSTFX_0_COUNT = 0x2,
};

/* 320 */
enum $E0F4D3E16213BBBB898479EB46C9E6A3
{
  GFX_DISTORTION_NONE = 0x0,
  GFX_DISTORTION_WATERSHEETING = 0x1,
  GFX_DISTORTION_COUNT = 0x2,
};

/* 321 */
enum $DF8FFCC4CBBC543AFCC48B251314BE65
{
  GFX_HDR_POSTFX_1_BIT_COLOR_GRADING_LOW_MID_HIGH = 0x0,
  GFX_HDR_POSTFX_1_BIT_COLOR_GRADING_CLUT = 0x1,
  GFX_HDR_POSTFX_1_BIT_DALTONIZE = 0x2,
  GFX_HDR_POSTFX_1_BIT_FIRST_DISTORTION = 0x3,
  GFX_HDR_POSTFX_1_BIT_LAST_DISTORTION = 0x3,
  GFX_HDR_POSTFX_1_BIT_COUNT = 0x4,
  GFX_HDR_POSTFX_1_COLOR_GRADING = 0x0,
  GFX_HDR_POSTFX_1_COLOR_GRADING_LOW_MID_HIGH = 0x1,
  GFX_HDR_POSTFX_1_COLOR_GRADING_CLUT = 0x2,
  GFX_HDR_POSTFX_1_DALTONIZE = 0x4,
  GFX_HDR_POSTFX_1_WATERSHEETING_DISTORTION = 0x8,
  GFX_HDR_POSTFX_1_DISTORTION_MASK = 0x8,
  GFX_HDR_POSTFX_1_COUNT = 0x10,
};

/* 322 */
enum $BAEC67BE836A5B9A8883B97E91E7BF79
{
  GFX_HDR_POSTFX_2_BIT_ALTERNATE_DEPTH = 0x0,
  GFX_HDR_POSTFX_2_BIT_ALTERNATE_MASK = 0x1,
  GFX_HDR_POSTFX_2_BIT_COUNT = 0x2,
  GFX_HDR_POSTFX_2_COLOR_GRADING = 0x0,
  GFX_HDR_POSTFX_2_ALTERNATE_DEPTH = 0x1,
  GFX_HDR_POSTFX_2_ALTERNATE_MASK = 0x2,
  GFX_HDR_POSTFX_2_COUNT = 0x4,
};

/* 323 */
enum $1DDC37EDBED71FBD2587B24DE2A1060B
{
  GFX_LEGACY_POSTFX_COLOR_BIT = 0x0,
  GFX_LEGACY_POSTFX_COLOR_BIT1 = 0x1,
  GFX_LEGACY_POSTFX_COLOR_BIT_COUNT = 0x2,
  GFX_LEGACY_POSTFX_BIT_RESET = 0x1,
  GFX_LEGACY_POSTFX_BIT_DISTORTION = 0x2,
  GFX_LEGACY_POSTFX_BIT_DISTORTION_END = 0x2,
  GFX_LEGACY_POSTFX_BIT_DALTONIZE = 0x3,
  GFX_LEGACY_POSTFX_BIT_COUNT = 0x4,
  GFX_LEGACY_POSTFX_COLOR2 = 0x0,
  GFX_LEGACY_POSTFX_COLOR_MULTI_DEPTH = 0x1,
  GFX_LEGACY_POSTFX_COLOR_MULTI_MASK = 0x2,
  GFX_LEGACY_POSTFX_COLOR_MULTI_CLUT = 0x3,
  GFX_LEGACY_POSTFX_COLOR_COUNT = 0x4,
  GFX_LEGACY_POSTFX_DISTORT_NONE = 0x0,
  GFX_LEGACY_POSTFX_DISTORT_WATERSHEETING = 0x1,
  GFX_LEGACY_POSTFX_DISTORT_COUNT = 0x2,
  GFX_LEGACY_POSTFX_WATERSHEETING = 0x4,
  GFX_LEGACY_POSTFX_DALTONIZE = 0x8,
  GFX_LEGACY_POSTFX_MATERIAL_COUNT = 0x10,
};

/* 324 */
enum GfxHdrPostFXMacroclutBit
{
  GFX_HDR_POSTFX_MACROCLUT_BIT_DIGITAL = 0x0,
  GFX_HDR_POSTFX_MACROCLUT_BIT_WATERSHEETING = 0x1,
  GFX_HDR_POSTFX_MACROCLUT_BIT_COUNT = 0x2,
};

/* 325 */
enum $12722C31889C8012046954D8100512E6
{
  TS_2D = 0x0,
  TS_FUNCTION = 0x1,
  TS_COLOR_MAP = 0x2,
  TS_DETAIL_MAP = 0x3,
  TS_UNUSED_2 = 0x4,
  TS_NORMAL_MAP = 0x5,
  TS_UNUSED_3 = 0x6,
  TS_UNUSED_4 = 0x7,
  TS_SPECULAR_MAP = 0x8,
  TS_UNUSED_5 = 0x9,
  TS_OCEANFLOW_DISPLACEMENT_MAP = 0xA,
  TS_WATER_MAP = 0xB,
  TS_OCEAN_DISPLACEMENT_MAP = 0xC,
  TS_DISPLACEMENT_MAP = 0xD,
  TS_PARALLAX_MAP = 0xE,
  TS_COUNT = 0xF,
};

/* 326 */
enum $EACEBC835B0B15F3324BB665FB1FDC4A
{
  GFX_HDR_POSTFX_MACROCLUT_DIGITAL = 0x1,
  GFX_HDR_POSTFX_MACROCLUT_WATERSHEETING = 0x2,
  GFX_HDR_POSTFX_MACROCLUT_COUNT = 0x4,
};

/* 327 */
enum $1CFBB810AD1C3773EC461B56480BCEC0
{
  GFX_POST_OPAQUE_FX_BIT_FIRST_SSAO = 0x0,
  GFX_POST_OPAQUE_FX_BIT_LAST_SSAO = 0x1,
  GFX_POST_OPAQUE_FX_BIT_FIRST_FOG = 0x2,
  GFX_POST_OPAQUE_FX_BIT_LAST_FOG = 0x3,
  GFX_POST_OPAQUE_FX_BIT_COLOR_GRADING = 0x4,
  GFX_POST_OPAQUE_FX_BIT_COLOR_GRADING_ALTD = 0x5,
  GFX_POST_OPAQUE_FX_BIT_COLOR_GRADING_ALTM = 0x6,
  GFX_POST_OPAQUE_FX_BIT_COUNT = 0x7,
  GFX_POST_OPAQUE_FX_MASK_FOG = 0x8,
  GFX_POST_OPAQUE_FX_SSAO_OFF = 0x0,
  GFX_POST_OPAQUE_FX_SSAO_LQ = 0x1,
  GFX_POST_OPAQUE_FX_SSAO_HQ = 0x2,
  GFX_POST_OPAQUE_FX_FOG = 0x4,
  GFX_POST_OPAQUE_FX_DFOG = 0x8,
  GFX_POST_OPAQUE_FX_COLOR_GRADING = 0x10,
  GFX_POST_OPAQUE_FX_COLOR_GRADING_ALTD = 0x20,
  GFX_POST_OPAQUE_FX_COLOR_GRADING_ALTM = 0x40,
  GFX_POST_OPAQUE_FX_COUNT = 0x80,
};

/* 328 */
enum $B2FD3713A7CE728D7D4B9B08B4C380D8
{
  IMG_CATEGORY_UNKNOWN = 0x0,
  IMG_CATEGORY_AUTO_GENERATED = 0x1,
  IMG_CATEGORY_LIGHTMAP = 0x2,
  IMG_CATEGORY_LOAD_FROM_FILE = 0x3,
  IMG_CATEGORY_RAW = 0x4,
  IMG_CATEGORY_FIRST_UNMANAGED = 0x5,
  IMG_CATEGORY_WATER = 0x5,
  IMG_CATEGORY_RENDERTARGET = 0x6,
  IMG_CATEGORY_TEMP = 0x7,
};

/* 329 */
enum $E039F973340A0E27C29B04AB0197BED7
{
  PICMIP_PLATFORM_USED = 0x0,
  PICMIP_PLATFORM_MINSPEC = 0x1,
  PICMIP_PLATFORM_COUNT = 0x2,
};

/* 330 */
enum GfxMSAAState
{
  GFX_MSAA_STATE_OFF = 0x0,
  GFX_MSAA_STATE_COUNT = 0x1,
};

/* 331 */
enum D3D11_COUNTER
{
  D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
};

/* 332 */
enum D3D11_INPUT_CLASSIFICATION
{
  D3D11_INPUT_PER_VERTEX_DATA = 0x0,
  D3D11_INPUT_PER_INSTANCE_DATA = 0x1,
};

/* 333 */
enum GfxShaderMode
{
  SHADER_MODE_GRAPHICS = 0x0,
  SHADER_MODE_COMPUTE = 0x1,
};

/* 334 */
enum GfxViewMode
{
  VIEW_MODE_NONE = 0x0,
  VIEW_MODE_3D = 0x1,
  VIEW_MODE_2D = 0x2,
  VIEW_MODE_IDENTITY = 0x3,
};

/* 335 */
enum GfxViewportBehavior
{
  GFX_USE_VIEWPORT_FOR_VIEW = 0x0,
  GFX_USE_VIEWPORT_FULL = 0x1,
};

/* 336 */
enum netsrc_t
{
  NS_CLIENT1 = 0x0,
  NS_MAXCLIENTS = 0x1,
  NS_SERVER = 0x2,
  NS_PACKET = 0x3,
  NS_INVALID_NETSRC = 0x4,
};

/* 337 */
typedef bdContentStreamingBase::bdStatus db_inflate_block_mode;

/* 338 */
typedef bdContentStreamingBase::bdStatus db_inflate_mode;

/* 339 */
enum inflate_codes_mode
{
  START = 0x0,
  LEN = 0x1,
  LENEXT = 0x2,
  DIST = 0x3,
  DISTEXT = 0x4,
  COPY = 0x5,
  LIT = 0x6,
  WASH = 0x7,
  END = 0x8,
  BADCODE = 0x9,
};

/* 340 */
enum J_MESSAGE_CODE
{
  JMSG_NOMESSAGE = 0x0,
  JERR_ARITH_NOTIMPL = 0x1,
  JERR_BAD_ALIGN_TYPE = 0x2,
  JERR_BAD_ALLOC_CHUNK = 0x3,
  JERR_BAD_BUFFER_MODE = 0x4,
  JERR_BAD_COMPONENT_ID = 0x5,
  JERR_BAD_DCT_COEF = 0x6,
  JERR_BAD_DCTSIZE = 0x7,
  JERR_BAD_HUFF_TABLE = 0x8,
  JERR_BAD_IN_COLORSPACE = 0x9,
  JERR_BAD_J_COLORSPACE = 0xA,
  JERR_BAD_LENGTH = 0xB,
  JERR_BAD_LIB_VERSION = 0xC,
  JERR_BAD_MCU_SIZE = 0xD,
  JERR_BAD_POOL_ID = 0xE,
  JERR_BAD_PRECISION = 0xF,
  JERR_BAD_PROGRESSION = 0x10,
  JERR_BAD_PROG_SCRIPT = 0x11,
  JERR_BAD_SAMPLING = 0x12,
  JERR_BAD_SCAN_SCRIPT = 0x13,
  JERR_BAD_STATE = 0x14,
  JERR_BAD_STRUCT_SIZE = 0x15,
  JERR_BAD_VIRTUAL_ACCESS = 0x16,
  JERR_BUFFER_SIZE = 0x17,
  JERR_CANT_SUSPEND = 0x18,
  JERR_CCIR601_NOTIMPL = 0x19,
  JERR_COMPONENT_COUNT = 0x1A,
  JERR_CONVERSION_NOTIMPL = 0x1B,
  JERR_DAC_INDEX = 0x1C,
  JERR_DAC_VALUE = 0x1D,
  JERR_DHT_INDEX = 0x1E,
  JERR_DQT_INDEX = 0x1F,
  JERR_EMPTY_IMAGE = 0x20,
  JERR_EMS_READ = 0x21,
  JERR_EMS_WRITE = 0x22,
  JERR_EOI_EXPECTED = 0x23,
  JERR_FILE_READ = 0x24,
  JERR_FILE_WRITE = 0x25,
  JERR_FRACT_SAMPLE_NOTIMPL = 0x26,
  JERR_HUFF_CLEN_OVERFLOW = 0x27,
  JERR_HUFF_MISSING_CODE = 0x28,
  JERR_IMAGE_TOO_BIG = 0x29,
  JERR_INPUT_EMPTY = 0x2A,
  JERR_INPUT_EOF = 0x2B,
  JERR_MISMATCHED_QUANT_TABLE = 0x2C,
  JERR_MISSING_DATA = 0x2D,
  JERR_MODE_CHANGE = 0x2E,
  JERR_NOTIMPL = 0x2F,
  JERR_NOT_COMPILED = 0x30,
  JERR_NO_BACKING_STORE = 0x31,
  JERR_NO_HUFF_TABLE = 0x32,
  JERR_NO_IMAGE = 0x33,
  JERR_NO_QUANT_TABLE = 0x34,
  JERR_NO_SOI = 0x35,
  JERR_OUT_OF_MEMORY = 0x36,
  JERR_QUANT_COMPONENTS = 0x37,
  JERR_QUANT_FEW_COLORS = 0x38,
  JERR_QUANT_MANY_COLORS = 0x39,
  JERR_SOF_DUPLICATE = 0x3A,
  JERR_SOF_NO_SOS = 0x3B,
  JERR_SOF_UNSUPPORTED = 0x3C,
  JERR_SOI_DUPLICATE = 0x3D,
  JERR_SOS_NO_SOF = 0x3E,
  JERR_TFILE_CREATE = 0x3F,
  JERR_TFILE_READ = 0x40,
  JERR_TFILE_SEEK = 0x41,
  JERR_TFILE_WRITE = 0x42,
  JERR_TOO_LITTLE_DATA = 0x43,
  JERR_UNKNOWN_MARKER = 0x44,
  JERR_VIRTUAL_BUG = 0x45,
  JERR_WIDTH_OVERFLOW = 0x46,
  JERR_XMS_READ = 0x47,
  JERR_XMS_WRITE = 0x48,
  JMSG_COPYRIGHT = 0x49,
  JMSG_VERSION = 0x4A,
  JTRC_16BIT_TABLES = 0x4B,
  JTRC_ADOBE = 0x4C,
  JTRC_APP0 = 0x4D,
  JTRC_APP14 = 0x4E,
  JTRC_DAC = 0x4F,
  JTRC_DHT = 0x50,
  JTRC_DQT = 0x51,
  JTRC_DRI = 0x52,
  JTRC_EMS_CLOSE = 0x53,
  JTRC_EMS_OPEN = 0x54,
  JTRC_EOI = 0x55,
  JTRC_HUFFBITS = 0x56,
  JTRC_JFIF = 0x57,
  JTRC_JFIF_BADTHUMBNAILSIZE = 0x58,
  JTRC_JFIF_EXTENSION = 0x59,
  JTRC_JFIF_THUMBNAIL = 0x5A,
  JTRC_MISC_MARKER = 0x5B,
  JTRC_PARMLESS_MARKER = 0x5C,
  JTRC_QUANTVALS = 0x5D,
  JTRC_QUANT_3_NCOLORS = 0x5E,
  JTRC_QUANT_NCOLORS = 0x5F,
  JTRC_QUANT_SELECTED = 0x60,
  JTRC_RECOVERY_ACTION = 0x61,
  JTRC_RST = 0x62,
  JTRC_SMOOTH_NOTIMPL = 0x63,
  JTRC_SOF = 0x64,
  JTRC_SOF_COMPONENT = 0x65,
  JTRC_SOI = 0x66,
  JTRC_SOS = 0x67,
  JTRC_SOS_COMPONENT = 0x68,
  JTRC_SOS_PARAMS = 0x69,
  JTRC_TFILE_CLOSE = 0x6A,
  JTRC_TFILE_OPEN = 0x6B,
  JTRC_THUMB_JPEG = 0x6C,
  JTRC_THUMB_PALETTE = 0x6D,
  JTRC_THUMB_RGB = 0x6E,
  JTRC_UNKNOWN_IDS = 0x6F,
  JTRC_XMS_CLOSE = 0x70,
  JTRC_XMS_OPEN = 0x71,
  JWRN_ADOBE_XFORM = 0x72,
  JWRN_BOGUS_PROGRESSION = 0x73,
  JWRN_EXTRANEOUS_DATA = 0x74,
  JWRN_HIT_MARKER = 0x75,
  JWRN_HUFF_BAD_CODE = 0x76,
  JWRN_JFIF_MAJOR = 0x77,
  JWRN_JPEG_EOF = 0x78,
  JWRN_MUST_RESYNC = 0x79,
  JWRN_NOT_SEQUENTIAL = 0x7A,
  JWRN_TOO_MUCH_DATA = 0x7B,
  JMSG_LASTMSGCODE = 0x7C,
};

/* 341 */
enum J_DITHER_MODE
{
  JDITHER_NONE = 0x0,
  JDITHER_ORDERED = 0x1,
  JDITHER_FS = 0x2,
};

/* 342 */
enum J_COLOR_SPACE
{
  JCS_UNKNOWN = 0x0,
  JCS_GRAYSCALE = 0x1,
  JCS_RGB = 0x2,
  JCS_YCbCr = 0x3,
  JCS_CMYK = 0x4,
  JCS_YCCK = 0x5,
};

/* 343 */
enum J_DCT_METHOD
{
  JDCT_ISLOW = 0x0,
  JDCT_IFAST = 0x1,
  JDCT_FLOAT = 0x2,
};

/* 344 */
enum J_BUF_MODE
{
  JBUF_PASS_THRU = 0x0,
  JBUF_SAVE_SOURCE = 0x1,
  JBUF_CRANK_DEST = 0x2,
  JBUF_SAVE_AND_PASS = 0x3,
};

/* 345 */
enum JPEG_MARKER
{
  M_SOF0 = 0xC0,
  M_SOF1 = 0xC1,
  M_SOF2 = 0xC2,
  M_SOF3 = 0xC3,
  M_SOF5 = 0xC5,
  M_SOF6 = 0xC6,
  M_SOF7 = 0xC7,
  M_JPG = 0xC8,
  M_SOF9 = 0xC9,
  M_SOF10 = 0xCA,
  M_SOF11 = 0xCB,
  M_SOF13 = 0xCD,
  M_SOF14 = 0xCE,
  M_SOF15 = 0xCF,
  M_DHT = 0xC4,
  M_DAC = 0xCC,
  M_RST0 = 0xD0,
  M_RST1 = 0xD1,
  M_RST2 = 0xD2,
  M_RST3 = 0xD3,
  M_RST4 = 0xD4,
  M_RST5 = 0xD5,
  M_RST6 = 0xD6,
  M_RST7 = 0xD7,
  M_SOI = 0xD8,
  M_EOI = 0xD9,
  M_SOS = 0xDA,
  M_DQT = 0xDB,
  M_DNL = 0xDC,
  M_DRI = 0xDD,
  M_DHP = 0xDE,
  M_EXP = 0xDF,
  M_APP0 = 0xE0,
  M_APP1 = 0xE1,
  M_APP2 = 0xE2,
  M_APP3 = 0xE3,
  M_APP4 = 0xE4,
  M_APP5 = 0xE5,
  M_APP6 = 0xE6,
  M_APP7 = 0xE7,
  M_APP8 = 0xE8,
  M_APP9 = 0xE9,
  M_APP10 = 0xEA,
  M_APP11 = 0xEB,
  M_APP12 = 0xEC,
  M_APP13 = 0xED,
  M_APP14 = 0xEE,
  M_APP15 = 0xEF,
  M_JPG0 = 0xF0,
  M_JPG13 = 0xFD,
  M_COM = 0xFE,
  M_TEM = 0x1,
  M_ERROR = 0x100,
};

/* 346 */
enum c_pass_type
{
  main_pass = 0x0,
  huff_opt_pass = 0x1,
  output_pass = 0x2,
};

/* 347 */
enum GfxSceneViewType
{
  SCENE_VIEW_CAMERA = 0x0,
  SCENE_VIEW_SUNSHADOW_0 = 0x1,
  SCENE_VIEW_SUNSHADOW_1 = 0x2,
  SCENE_VIEW_COUNT = 0x3,
  SCENE_VIEW_COUNT_UMBRA = 0x3,
  SCENE_VIEW_SPOTSHADOW_0 = 0x3,
  SCENE_VIEW_SPOTSHADOW_1 = 0x4,
  SCENE_VIEW_SPOTSHADOW_2 = 0x5,
  SCENE_VIEW_SPOTSHADOW_3 = 0x6,
  SCENE_VIEW_COUNT_ENTVIS = 0x7,
  SCENE_VIEW_CACHED_SUNSHADOW_PARTITION_COUNT = 0x9,
  SCENE_VIEW_CACHED_SUNSHADOW_0_0 = 0x3,
  SCENE_VIEW_CACHED_SUNSHADOW_0_1 = 0x4,
  SCENE_VIEW_CACHED_SUNSHADOW_0_2 = 0x5,
  SCENE_VIEW_CACHED_SUNSHADOW_0_3 = 0x6,
  SCENE_VIEW_CACHED_SUNSHADOW_0_4 = 0x7,
  SCENE_VIEW_CACHED_SUNSHADOW_0_5 = 0x8,
  SCENE_VIEW_CACHED_SUNSHADOW_0_6 = 0x9,
  SCENE_VIEW_CACHED_SUNSHADOW_0_7 = 0xA,
  SCENE_VIEW_CACHED_SUNSHADOW_0_8 = 0xB,
  SCENE_VIEW_CACHED_SUNSHADOW_1_0 = 0xC,
  SCENE_VIEW_CACHED_SUNSHADOW_1_1 = 0xD,
  SCENE_VIEW_CACHED_SUNSHADOW_1_2 = 0xE,
  SCENE_VIEW_CACHED_SUNSHADOW_1_3 = 0xF,
  SCENE_VIEW_CACHED_SUNSHADOW_1_4 = 0x10,
  SCENE_VIEW_CACHED_SUNSHADOW_1_5 = 0x11,
  SCENE_VIEW_CACHED_SUNSHADOW_1_6 = 0x12,
  SCENE_VIEW_CACHED_SUNSHADOW_1_7 = 0x13,
  SCENE_VIEW_CACHED_SUNSHADOW_1_8 = 0x14,
  SCENE_VIEW_COUNT_CACHED_SUNSHADOW = 0x15,
  SCENE_VIEW_FULL_SPOTSHADOW_0 = 0x15,
  SCENE_VIEW_FULL_SPOTSHADOW_1 = 0x16,
  SCENE_VIEW_FULL_SPOTSHADOW_2 = 0x17,
  SCENE_VIEW_FULL_SPOTSHADOW_3 = 0x18,
  SCENE_VIEW_COUNT_FULL = 0x19,
  SCENE_VIEW_COUNT_CACHED_SUNSHADOW_ONLY = 0x12,
  SCENE_VIEW_INVALID = 0xFFFFFFFF,
};

/* 348 */
enum std::float_denorm_style
{
  denorm_indeterminate = 0xFFFFFFFF,
  denorm_absent = 0x0,
  denorm_present = 0x1,
};

/* 349 */
enum std::float_round_style
{
  round_indeterminate = 0xFFFFFFFF,
  round_toward_zero = 0x0,
  round_to_nearest = 0x1,
  round_toward_infinity = 0x2,
  round_toward_neg_infinity = 0x3,
};

/* 350 */
enum GfxRenderCommand
{
  RC_END_OF_LIST = 0x0,
  RC_SET_MATERIAL_COLOR = 0x1,
  RC_SET_2D_LIGHT_PROPERTIES = 0x2,
  RC_SAVE_SCREEN = 0x3,
  RC_SAVE_SCREEN_SECTION = 0x4,
  RC_CLEAR_SCREEN = 0x5,
  RC_SET_VIEWPORT = 0x6,
  RC_SET_SCISSOR = 0x7,
  RC_CLEAR_SCISSOR = 0x8,
  RC_FIRST_NONCRITICAL = 0x9,
  RC_STRETCH_PIC = 0x9,
  RC_STRETCH_PIC_FLIP_ST = 0xA,
  RC_STRETCH_PIC_ROTATE_XY = 0xB,
  RC_STRETCH_PIC_ROTATE_ST = 0xC,
  RC_STRETCH_RAW = 0xD,
  RC_DRAW_QUAD_PIC = 0xE,
  RC_DRAW_QUAD_PIC_ST = 0xF,
  RC_DRAW_FULL_SCREEN_COLORED_QUAD = 0x10,
  RC_DRAW_TEXT_2D = 0x11,
  RC_DRAW_TEXT_3D = 0x12,
  RC_BLEND_SAVED_SCREEN_BLURRED = 0x13,
  RC_BLEND_SAVED_SCREEN_FLASHED = 0x14,
  RC_DRAW_POINTS = 0x15,
  RC_DRAW_LINES = 0x16,
  RC_DRAW_TRIANGLES = 0x17,
  RC_SET_CODE_CONSTANT = 0x18,
  RC_PROJECTION_SET = 0x19,
  RC_COUNT = 0x1A,
};

/* 351 */
enum $EB47B09236BDAFB853B1768069F9B7BC
{
  R_SMODEL_SURFTYPE_RIGID = 0x0,
  R_SMODEL_SURFTYPE_INSTANCED = 0x1,
  R_SMODEL_SURFTYPE_COUNT = 0x2,
};

/* 352 */
enum $4DECDA45625DB2763FC46D6F5CBF863C
{
  _BUF_SIZE = 0x10,
};

/* 353 */
enum GfxCodeSurfListType
{
  GFX_CODE_SURFLIST_INVALID = 0xFFFFFFFF,
  GFX_CODE_SURFLIST_DECAL = 0x0,
  GFX_CODE_SURFLIST_TRANS = 0x1,
  GFX_CODE_SURFLIST_EMISSIVE = 0x2,
  GFX_CODE_SURFLIST_TYPE_COUNT = 0x3,
};

/* 354 */
enum surfaceType_t
{
  SF_TRIANGLES = 0x0,
  SF_TRIANGLES_NO_SUN_SHADOW = 0x1,
  SF_BEGIN_STATICMODEL = 0x2,
  SF_STATICMODEL_RIGID = 0x2,
  SF_STATICMODEL_INSTANCED = 0x3,
  SF_STATICMODEL_RIGID_NO_SUN_SHADOW = 0x4,
  SF_STATICMODEL_INSTANCED_NO_SUN_SHADOW = 0x5,
  SF_END_STATICMODEL = 0x6,
  SF_BMODEL = 0x6,
  SF_BEGIN_XMODEL = 0x7,
  SF_XMODEL_RIGID = 0x7,
  SF_XMODEL_SKINNED = 0x8,
  SF_END_XMODEL = 0x9,
  SF_BEGIN_FX = 0x9,
  SF_CODE = 0x9,
  SF_GLASS = 0xA,
  SF_MARK = 0xB,
  SF_SPARK = 0xC,
  SF_PARTICLE_CLOUD = 0xD,
  SF_PARTICLE_SPARK_CLOUD = 0xE,
  SF_END_FX = 0xF,
  SF_NUM_SURFACE_TYPES = 0xF,
  SF_FORCE_32_BITS = 0xFFFFFFFF,
};

/* 355 */
enum GfxDrawSceneMethod
{
  GFX_DRAW_SCENE_STANDARD = 0x0,
};

/* 356 */
enum std::memory_order
{
  memory_order_relaxed = 0x0,
  memory_order_consume = 0x1,
  memory_order_acquire = 0x2,
  memory_order_release = 0x3,
  memory_order_acq_rel = 0x4,
  memory_order_seq_cst = 0x5,
};

/* 357 */
enum GfxWarningType
{
  R_WARN_FRONTEND_ENT_LIMIT = 0x0,
  R_WARN_KNOWN_MODELS = 0x1,
  R_WARN_KNOWN_DOBJ = 0x2,
  R_WARN_KNOWN_BRUSH = 0x3,
  R_WARN_KNOWN_PER_CLIENT_MODELS = 0x4,
  R_WARN_KNOWN_SPECIAL_MODELS = 0x5,
  R_WARN_MODEL_LIGHT_CACHE = 0x6,
  R_WARN_SCENE_ENTITIES = 0x7,
  R_WARN_MAX_SKINNED_CACHE_VERTICES = 0x8,
  R_WARN_MAX_SCENE_SURFS_SIZE = 0x9,
  R_WARN_MAX_SURF_BUF = 0xA,
  R_WARN_PORTAL_PLANES = 0xB,
  R_WARN_MAX_CLOUDS = 0xC,
  R_WARN_MAX_DLIGHTS = 0xD,
  R_WARN_DLIGHT_SMODEL_LIMIT = 0xE,
  R_WARN_SMODEL_LIGHTING = 0xF,
  R_WARN_SMODEL_VIS_DATA_LIMIT = 0x10,
  R_WARN_SMODEL_SURF_LIMIT = 0x11,
  R_WARN_SMODEL_SURF_DELAY_LIMIT = 0x12,
  R_WARN_MARK_SMODEL_COLLIDED_LIMIT = 0x13,
  R_WARN_BSPSURF_DATA_LIMIT = 0x14,
  R_WARN_MAX_DRAWSURFS = 0x15,
  R_WARN_GFX_CODE_EMISSIVE_SURF_LIMIT = 0x16,
  R_WARN_GFX_CODE_DECAL_SURF_LIMIT = 0x17,
  R_WARN_GFX_CODE_TRANS_SURF_LIMIT = 0x18,
  R_WARN_GFX_GLASS_SURF_LIMIT = 0x19,
  R_WARN_GFX_MARK_SURF_LIMIT = 0x1A,
  R_WARN_GFX_SPARK_SURF_LIMIT = 0x1B,
  R_WARN_MAX_SCENE_DRAWSURFS = 0x1C,
  R_WARN_MAX_FX_DRAWSURFS = 0x1D,
  R_WARN_NONEMISSIVE_FX_MATERIAL = 0x1E,
  R_WARN_NONLIT_MARK_MATERIAL = 0x1F,
  R_WARN_CMDBUF_OVERFLOW = 0x20,
  R_WARN_MISSING_DECL_NONDEBUG = 0x21,
  R_WARN_MAX_DYNENT_REFS = 0x22,
  R_WARN_MAX_SCENE_DOBJ_REFS = 0x23,
  R_WARN_MAX_SCENE_MODEL_REFS = 0x24,
  R_WARN_MAX_SCENE_BRUSH_REFS = 0x25,
  R_WARN_MAX_CODE_EMISSIVE_INDS = 0x26,
  R_WARN_MAX_CODE_EMISSIVE_VERTS = 0x27,
  R_WARN_MAX_CODE_EMISSIVE_ARGS = 0x28,
  R_WARN_MAX_CODE_DECAL_INDS = 0x29,
  R_WARN_MAX_CODE_DECAL_VERTS = 0x2A,
  R_WARN_MAX_CODE_DECAL_ARGS = 0x2B,
  R_WARN_MAX_CODE_TRANS_INDS = 0x2C,
  R_WARN_MAX_CODE_TRANS_VERTS = 0x2D,
  R_WARN_MAX_CODE_TRANS_ARGS = 0x2E,
  R_WARN_MAX_GLASS_INDS = 0x2F,
  R_WARN_MAX_GLASS_VERTS = 0x30,
  R_WARN_MAX_MARK_INDS = 0x31,
  R_WARN_MAX_MARK_VERTS = 0x32,
  R_WARN_MAX_SPARK_INDS = 0x33,
  R_WARN_MAX_SPARK_VERTS = 0x34,
  R_WARN_MAX_TRAIL_ELEMS_PER_TRAIL = 0x35,
  R_WARN_TRAIL_WITH_DELAY = 0x36,
  R_WARN_DEBUG_ALLOC = 0x37,
  R_WARN_SPOT_LIGHT_LIMIT = 0x38,
  R_WARN_FX_EFFECT_LIMIT = 0x39,
  R_WARN_FX_ELEM_LIMIT = 0x3A,
  R_WARN_FX_BOLT_LIMIT = 0x3B,
  R_WARN_WORKER_CMD_SIZE = 0x3C,
  R_WARN_UNKNOWN_STATICMODEL_SHADER = 0x3D,
  R_WARN_UNKNOWN_XMODEL_SHADER = 0x3E,
  R_WARN_DYNAMIC_INDEX_BUFFER_SIZE = 0x3F,
  R_WARN_TOO_MANY_LIGHT_GRID_POINTS = 0x40,
  R_WARN_FOGABLE_2DTEXT = 0x41,
  R_WARN_FOGABLE_2DGLYPH = 0x42,
  R_WARN_OCCLUSION_QUERY = 0x43,
  R_WARN_MAX_OCCLUSION_QUERIES = 0x44,
  R_WARN_ESTIMATED_BOUNDS_TOO_SMALL_BEGIN = 0x45,
  R_WARN_ESTIMATED_BOUNDS_TOO_SMALL_BEGIN_STEPBACK = 0x44,
  R_WARN_ESTIMATED_BOUNDS_TOO_SMALL0 = 0x45,
  R_WARN_ESTIMATED_BOUNDS_TOO_SMALL1 = 0x46,
  R_WARN_ESTIMATED_BOUNDS_TOO_SMALL2 = 0x47,
  R_WARN_ESTIMATED_BOUNDS_TOO_SMALL_END = 0x48,
  R_WARN_ESTIMATED_BOUNDS_TOO_SMALL_END_STEPBACK = 0x47,
  R_WARN_GPU_TIMERS_INACCURATE = 0x48,
  R_WARN_MAX_JOINT_COUNT = 0x49,
  R_WARN_MAX_FX_PER_FRAME = 0x4A,
  R_WARN_ROTATED_CAPSULE_TRACE = 0x4B,
  R_WARN_MINIMAP_ASSETS_NOT_PRECACHED = 0x4C,
  R_WARN_DYNAMIC_INDEX_BUFFER_OVERFLOW = 0x4D,
  R_WARN_PRETESS_INDEX_BUFFER_OVERFLOW = 0x4E,
  R_WARN_2D_DRAW = 0x4F,
  R_WARN_FX_MAX_RETRIGGER = 0x50,
  R_WARN_FX_MAX_LIGHTGRID_SAMPLE_COUNT = 0x51,
  R_WARN_NO_SUN_OVERRIDE = 0x52,
  R_WARN_THERMAL_LIGHT_OVERFLOW = 0x53,
  R_WARN_DYNAMIC_VERTEX_BUFFER_OVERFLOW = 0x54,
  R_WARN_REACTIVEMOTION_CBS = 0x55,
  R_WARN_INSTANCED_TECH_HAS_PER_PRIM_ARGS = 0x56,
  R_WARN_MAX_MOTIONBLUR_SURFS_BUFFER = 0x57,
  R_WARN_MAX_MOTIONBLUR_SURFS_WORK_BUFFER = 0x58,
  R_WARN_FLARE_OVERFLOW = 0x59,
  R_WARN_MAX_FLARE_VERTS = 0x5A,
  R_WARN_MAX_FLARE_INDICES = 0x5B,
  R_WARN_OVERFLOW_MODEL_LIGHTING_PATCH = 0x5C,
  R_WARN_SMALL_SCENE_SURFS_SIZE = 0x5D,
  R_WARN_UNSUPPORTED_POSTFX = 0x5E,
  R_WARN_COUNT = 0x5F,
};

/* 358 */
enum $0CB0038436E1BCF21D4546844626499F
{
  GFXMESH_CODE_BEGIN = 0x0,
  GFXMESH_CODE_BEGIN_STEPBACK = 0xFFFFFFFF,
  GFXMESH_CODE_DECAL = 0x0,
  GFXMESH_CODE_TRANS = 0x1,
  GFXMESH_CODE_EMISSIVE = 0x2,
  GFXMESH_CODE_END = 0x3,
  GFXMESH_CODE_END_STEPBACK = 0x2,
  GFXMESH_GLASS = 0x3,
  GFXMESH_MARK = 0x4,
  GFXMESH_SPARK = 0x5,
  GFXMESH_COUNT = 0x6,
};

/* 359 */
enum DynEntityDrawType
{
  DYNENT_DRAW_MODEL = 0x0,
  DYNENT_DRAW_BRUSH = 0x1,
  DYNENT_DRAW_COUNT = 0x2,
};

/* 360 */
enum $78CC39993E973CC76167A478C2132C79
{
  R_TESSELLATION_OFF = 0x0,
  R_TESSELLATION_NEAR = 0x1,
  R_TESSELLATION_ALL = 0x2,
  R_TESSELLATION_COUNT = 0x3,
};

/* 361 */
enum $20CB914F9A2C207D33B02E15DD4B6E4D
{
  MOTIONBLUR_CACHE_OFFSET_SKINNED = 0x0,
  MOTIONBLUR_CACHE_OFFSET_TYPE_COUNT = 0x1,
  MOTIONBLUR_CACHE_OFFSET_INVALID = 0xFFFFFFFF,
};

/* 362 */
enum ShadowType
{
  SHADOW_NONE = 0x0,
  SHADOW_MAP = 0x1,
};

/* 363 */
enum $401D18D8561079E483BCFCFD960618EB
{
  _ALLOC_MASK = 0xF,
};

/* 364 */
enum $D43DD43B3470FF217FF59F845637F4EF
{
  MTL_TYPE_DEFAULT = 0x0,
  MTL_TYPE_MODEL_FIRST = 0x1,
  MTL_TYPE_MODEL = 0x1,
  MTL_TYPE_MODEL_VERTCOL = 0x2,
  MTL_TYPE_MODEL_VERTCOL_GREY = 0x3,
  MTL_TYPE_MODEL_QUANTIZED = 0x4,
  MTL_TYPE_MODEL_QUANTIZED_VERTCOL = 0x5,
  MTL_TYPE_MODEL_QUANTIZED_VERTCOL_GREY = 0x6,
  MTL_TYPE_MODEL_VERTLIT = 0x7,
  MTL_TYPE_MODEL_VERTLIT_VERTCOL = 0x8,
  MTL_TYPE_MODEL_VERTLIT_VERTCOL_GREY = 0x9,
  MTL_TYPE_MODEL_VERTLIT_QUANTIZED = 0xA,
  MTL_TYPE_MODEL_VERTLIT_QUANTIZED_VERTCOL = 0xB,
  MTL_TYPE_MODEL_VERTLIT_QUANTIZED_VERTCOL_GREY = 0xC,
  MTL_TYPE_MODEL_LMAP = 0xD,
  MTL_TYPE_MODEL_LMAP_VERTCOL = 0xE,
  MTL_TYPE_MODEL_LMAP_VERTCOL_GREY = 0xF,
  MTL_TYPE_MODEL_LMAP_QUANTIZED = 0x10,
  MTL_TYPE_MODEL_LMAP_QUANTIZED_VERTCOL = 0x11,
  MTL_TYPE_MODEL_LMAP_QUANTIZED_VERTCOL_GREY = 0x12,
  MTL_TYPE_MODEL_LAST = 0x12,
  MTL_TYPE_MODEL_SUBDIV_FIRST = 0x13,
  MTL_TYPE_MODEL_SUBDIV = 0x13,
  MTL_TYPE_MODEL_SUBDIV_VERTCOL = 0x14,
  MTL_TYPE_MODEL_SUBDIV_TENSION = 0x15,
  MTL_TYPE_MODEL_SUBDIV_VERTLIT = 0x16,
  MTL_TYPE_MODEL_SUBDIV_VERTLIT_VERTCOL = 0x17,
  MTL_TYPE_MODEL_SUBDIV_LMAP = 0x18,
  MTL_TYPE_MODEL_SUBDIV_LMAP_VERTCOL = 0x19,
  MTL_TYPE_MODEL_SUBDIV_LAST = 0x19,
  MTL_TYPE_WORLD_FIRST = 0x1A,
  MTL_TYPE_WORLD = 0x1A,
  MTL_TYPE_WORLD_VERTCOL = 0x1B,
  MTL_TYPE_WORLD_LAST = 0x1B,
  MTL_TYPE_COUNT = 0x1C,
};

/* 365 */
enum $B3688AC4727B2BB98BD01D80B372588B
{
  STATE_FLAG_CULL_BACK = 0x1,
  STATE_FLAG_DECAL = 0x4,
  STATE_FLAG_WRITES_DEPTH = 0x8,
  STATE_FLAG_USES_DEPTH_BUFFER = 0x10,
  STATE_FLAG_USES_STENCIL_BUFFER = 0x20,
};

/* 366 */
enum $1795BA5E9682B3226184F5E3194A5733
{
  VERTEX_SHADER_NONE = 0x0,
  VERTEX_SHADER_MODEL_LIT = 0x1,
  VERTEX_SHADER_MODEL_UNLIT = 0x2,
  VERTEX_SHADER_MODEL_AMBIENT = 0x3,
  VERTEX_SHADER_MODEL_VERTEX_LIT = 0x4,
  VERTEX_SHADER_MODEL_LIGHTMAP = 0x5,
  VERTEX_SHADER_MODEL_COUNT = 0x6,
};

/* 367 */
enum GfxTessellationMode
{
  TESSELLATION_NONE = 0x0,
  TESSELLATION_TESS_ONLY = 0x1,
  TESSELLATION_NO_TESS_ONLY = 0x2,
  TESSELLATION_TESS_BUCKET = 0x3,
  TESSELLATION_NO_TESS_BUCKET = 0x4,
  TESSELLATION_COUNT = 0x5,
};

/* 368 */
enum GfxDrawSurfCustomIndex
{
  CUSTOMINDEX_XMODEL_THERMAL = 0x1,
};

/* 369 */
enum WorkerCmdType
{
  WRKCMD_RUN_PHYSICS = 0x0,
  WRKCMD_FIRST_FRONTEND = 0x1,
  WRKCMD_DPVS_CELL_DYN_BRUSH = 0x1,
  WRKCMD_DPVS_CELL_DYN_MODEL = 0x2,
  WRKCMD_DPVS_CELL_SCENE_ENT = 0x3,
  WRKCMD_DPVS_ENTITY = 0x4,
  WRKCMD_BOUNDS_ENT_DELAYED = 0x5,
  WRKCMD_SPOT_SHADOW_ENT = 0x6,
  WRKCMD_TRACE = 0x7,
  WRKCMD_TRACE_TO_ENTITY = 0x8,
  WRKCMD_UPDATE_FX_PASS_0 = 0x9,
  WRKCMD_UPDATE_FX_PASS_2 = 0xA,
  WRKCMD_UPDATE_GLASS = 0xB,
  WRKCMD_UPDATE_FX_PASS_4 = 0xC,
  WRKCMD_UPDATE_FX_PASS_5 = 0xD,
  WRKCMD_DPVS_CELL_STATIC = 0xE,
  WRKCMD_ADD_BSP = 0xF,
  WRKCMD_ADD_STATICMODEL = 0x10,
  WRKCMD_ADD_BSP_SUNSHADOW = 0x11,
  WRKCMD_ADD_STATICMODEL_SUNSHADOW = 0x12,
  WRKCMD_SKIN_XMODEL = 0x13,
  WRKCMD_ADD_SCENE_ENT = 0x14,
  WRKCMD_GENERATE_DRAWSURFS = 0x15,
  WRKCMD_DPVS_CELL_GLASS = 0x16,
  WRKCMD_GLASS_PIECE_LIGHT = 0x17,
  WRKCMD_GENERATE_GLASS_VERTS = 0x18,
  WRKCMD_GENERATE_MARK_VERTS = 0x19,
  WRKCMD_GENERATE_DYN_MARK_VERTS = 0x1A,
  WRKCMD_GENERATE_REACTIVEMOTION = 0x1B,
  WRKCMD_END_FRONTEND_NONEMISSIVE = 0x1C,
  WRKCMD_LAST_FRONTEND_NONEMISSIVE = 0x1B,
  WRKCMD_GENERATE_FX_VERTS = 0x1C,
  WRKCMD_GENERATE_MACROCLUT = 0x1D,
  WRKCMD_END_FRONTEND = 0x1E,
  WRKCMD_LAST_FRONTEND = 0x1D,
  WRKCMD_DRAW_LIT_OPAQUE = 0x1E,
  WRKCMD_COUNT = 0x1F,
};

/* 370 */
enum GPUTimerId
{
  GPU_TIMER_FRAME = 0x0,
  GPU_TIMER_SHADOW_TOTAL = 0x1,
  GPU_TIMER_SUN_SHADOW_0 = 0x2,
  GPU_TIMER_SUN_SHADOW_1 = 0x3,
  GPU_TIMER_SPOT_SHADOW_BLIT = 0x4,
  GPU_TIMER_SPOT_SHADOW_0 = 0x5,
  GPU_TIMER_SPOT_SHADOW_1 = 0x6,
  GPU_TIMER_SPOT_SHADOW_2 = 0x7,
  GPU_TIMER_SPOT_SHADOW_3 = 0x8,
  GPU_TIMER_SPOT_SHADOW_0_CACHED = 0x9,
  GPU_TIMER_SPOT_SHADOW_1_CACHED = 0xA,
  GPU_TIMER_SPOT_SHADOW_2_CACHED = 0xB,
  GPU_TIMER_SPOT_SHADOW_3_CACHED = 0xC,
  GPU_TIMER_SUN_SHADOW_0_CACHED = 0xD,
  GPU_TIMER_SUN_SHADOW_1_CACHED = 0xE,
  GPU_TIMER_MAINPASS_TOTAL = 0xF,
  GPU_TIMER_CLEAR_SCREEN = 0x10,
  GPU_TIMER_DEPTH_HACK = 0x11,
  GPU_TIMER_OPAQUE_PREPASS = 0x12,
  GPU_TIMER_LM_OPAQUE_PREPASS = 0x13,
  GPU_TIMER_DECAL_PREPASS = 0x14,
  GPU_TIMER_TRANS_PREPASS = 0x15,
  GPU_TIMER_OPAQUE = 0x16,
  GPU_TIMER_LM_OPAQUE = 0x17,
  GPU_TIMER_DECAL = 0x18,
  GPU_TIMER_POST_OPAQUE_FX = 0x19,
  GPU_TIMER_TRANS = 0x1A,
  GPU_TIMER_MBHQ_VELOCITY_MODELS = 0x1B,
  GPU_TIMER_MBHQ_VELOCITY_STATIC = 0x1C,
  GPU_TIMER_FX_TOTAL = 0x1D,
  GPU_TIMER_RESOLVE_FLOAT_Z = 0x1E,
  GPU_TIMER_OCCLUSION_QUERIES = 0x1F,
  GPU_TIMER_SUN = 0x20,
  GPU_TIMER_VOLUME_LIGHT_SCATTER = 0x21,
  GPU_TIMER_RESOLVE_DISTORTION = 0x22,
  GPU_TIMER_EMISSIVE = 0x23,
  GPU_TIMER_HDR_COLOR_GRADING = 0x24,
  GPU_TIMER_SUN_POST = 0x25,
  GPU_TIMER_POST_TOTAL = 0x26,
  GPU_TIMER_MBHQ_POST_PASS0 = 0x27,
  GPU_TIMER_MBHQ_POST_PASS1 = 0x28,
  GPU_TIMER_MBHQ_POST_FINAL = 0x29,
  GPU_TIMER_POST_AA = 0x2A,
  GPU_TIMER_POST_EFFECTS = 0x2B,
  GPU_TIMER_2D = 0x2C,
  GPU_TIMER_END_RESOLVE = 0x2D,
  GPU_TIMER_COUNT = 0x2E,
  GPU_TIMER_NONE = 0x2E,
  GPU_TIMER_END_WHEN_FINISHED = 0x2F,
};

/* 371 */
enum $383EC364C7AA4724408C374E04C8106A
{
  IMAGE_PROG_SHADOWMAP_LARGE = 0x0,
  IMAGE_PROG_SHADOWMAP_SMALL = 0x1,
  IMAGE_PROG_FLOATZ = 0x2,
  IMAGE_PROG_STENCIL = 0x3,
  IMAGE_PROG_POST_EFFECT_0 = 0x4,
  IMAGE_PROG_POST_EFFECT_1 = 0x5,
  IMAGE_PROG_PINGPONG_0 = 0x6,
  IMAGE_PROG_PINGPONG_1 = 0x7,
  IMAGE_PROG_PIP_SCENE = 0x8,
  IMAGE_PROG_PIP_SCENE_FLOATZ = 0x9,
  IMAGE_PROG_PIP_SCENE_PINGPONG = 0xA,
  IMAGE_PROG_PIP_FINAL_SCENE = 0xB,
  IMAGE_PROG_RESOLVED_SCENE = 0xC,
  IMAGE_PROG_RESOLVED_POST_SUN = 0xD,
  IMAGE_PROG_SCENE_PINGPONG = 0xE,
  IMAGE_PROG_SCENE = 0xF,
  IMAGE_PROG_SAVEDSCREEN = 0x10,
  IMAGE_PROG_SCENE_DEPTH = 0x11,
  IMAGE_PROG_SCENE_STENCIL = 0x12,
  IMAGE_PROG_PIP_DEPTH = 0x13,
  IMAGE_PROG_RAW = 0x14,
  IMAGE_PROG_MODEL_LIGHTING = 0x15,
  IMAGE_PROG_MODEL_LIGHTING1 = 0x16,
  IMAGE_PROG_MODEL_LIGHTING2 = 0x17,
  IMAGE_PROG_DALTONIZE_CLUT = 0x18,
  IMAGE_PROG_MACROCLUT_START = 0x19,
  IMAGE_PROG_MACROCLUT_START_STEPBACK = 0x18,
  IMAGE_PROG_MACROCLUT0 = 0x19,
  IMAGE_PROG_MACROCLUT1 = 0x1A,
  IMAGE_PROG_MACROCLUT2 = 0x1B,
  IMAGE_PROG_MACROCLUT3 = 0x1C,
  IMAGE_PROG_MACROCLUT4 = 0x1D,
  IMAGE_PROG_MACROCLUT5 = 0x1E,
  IMAGE_PROG_MACROCLUT_END = 0x1F,
  IMAGE_PROG_MACROCLUT_END_STEPBACK = 0x1E,
  IMAGE_PROG_RANDOM_ROTATIONS = 0x1F,
  IMAGE_PROG_SSAO_LUMINANCE = 0x20,
  IMAGE_PROG_SSAO_LUMINANCE_VBLUR = 0x21,
  IMAGE_PROG_FRAME_BUFFER_PINGPONG = 0x22,
  IMAGE_PROG_SMAA_EDGES = 0x23,
  IMAGE_PROG_SMAA_BLEND = 0x24,
  IMAGE_PROG_HDR_POSTFX_0 = 0x25,
  IMAGE_PROG_HDR_POSTFX_1 = 0x26,
  IMAGE_PROG_HDR_PINGPONG = 0x27,
  IMAGE_PROG_HDR_POSTFX_FP32_0 = 0x28,
  IMAGE_PROG_HDR_POSTFX_FP32_1 = 0x29,
  IMAGE_PROG_SCENE_R16G16F = 0x2A,
  IMAGE_PROG_SCENE_R16F_MIP1_PING = 0x2B,
  IMAGE_PROG_SCENE_R16F_MIP1_PONG = 0x2C,
  IMAGE_PROG_HDR_SCENE_MIPMAP = 0x2D,
  IMAGE_PROG_HDR_SCENE_MIP0 = 0x2E,
  IMAGE_PROG_HDR_SCENE_MIP1 = 0x2F,
  IMAGE_PROG_HDR_SCENE_MIP2 = 0x30,
  IMAGE_PROG_HDR_SCENE_MIP3 = 0x31,
  IMAGE_PROG_HDR_SCENE_MIP1_TEMP = 0x32,
  IMAGE_PROG_HDR_SCENE_MIP2_TEMP = 0x33,
  IMAGE_PROG_HDR_SCENE_MIP3_TEMP = 0x34,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIPMAP = 0x35,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP2 = 0x36,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP3 = 0x37,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP4 = 0x38,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP5 = 0x39,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP6 = 0x3A,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP7 = 0x3B,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP2_TEMP = 0x3C,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP3_TEMP = 0x3D,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP4_TEMP = 0x3E,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP5_TEMP = 0x3F,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP6_TEMP = 0x40,
  IMAGE_PROG_HDR_SCENE_R11G11B10_MIP7_TEMP = 0x41,
  IMAGE_PROG_DEPTH_BLUR_0 = 0x42,
  IMAGE_PROG_DEPTH_BLUR_1 = 0x43,
  IMAGE_PROG_SCENE_LUMINANCE_64 = 0x44,
  IMAGE_PROG_SCENE_LUMINANCE_16 = 0x45,
  IMAGE_PROG_SCENE_LUMINANCE_4 = 0x46,
  IMAGE_PROG_SCENE_LUMINANCE = 0x47,
  IMAGE_PROG_SCENE_VELOCITY = 0x48,
  IMAGE_PROG_SCENE_VELOCITY_PASS0_TEMP = 0x49,
  IMAGE_PROG_SCENE_VELOCITY_PASS0 = 0x4A,
  IMAGE_PROG_SCENE_VELOCITY_PASS1 = 0x4B,
  IMAGE_PROG_DEFAULT_DEPTH = 0x4C,
  IMAGE_PROG_DYNAMIC_IRIS_EXPOSURE_0 = 0x4D,
  IMAGE_PROG_DYNAMIC_IRIS_EXPOSURE_1 = 0x4E,
  IMAGE_PROG_DYNAMIC_IRIS_EXPOSURE_0_PIP = 0x4F,
  IMAGE_PROG_DYNAMIC_IRIS_EXPOSURE_1_PIP = 0x50,
  IMAGE_PROG_CACHED_SPOT_SHADOW_FIRST = 0x51,
  IMAGE_PROG_CACHED_SPOT_BSP_ONLY_0 = 0x51,
  IMAGE_PROG_CACHED_SPOT_BSP_ONLY_LAST = 0x60,
  IMAGE_PROG_CACHED_SPOT_0 = 0x61,
  IMAGE_PROG_CACHED_SPOT_LAST = 0x70,
  IMAGE_PROG_CACHED_SPOT_SHADOW_LAST = 0x70,
  IMAGE_PROG_CACHED_SUN_SHADOW_FIRST = 0x71,
  IMAGE_PROG_CACHED_SUN_0_BSP_ONLY_0 = 0x71,
  IMAGE_PROG_CACHED_SUN_0_BSP_ONLY_LAST = 0xB6,
  IMAGE_PROG_CACHED_SUN_1_BSP_ONLY_0 = 0xB7,
  IMAGE_PROG_CACHED_SUN_1_BSP_ONLY_LAST = 0xFC,
  IMAGE_PROG_CACHED_SUN_0_0 = 0xFD,
  IMAGE_PROG_CACHED_SUN_0_LAST = 0x142,
  IMAGE_PROG_CACHED_SUN_1_0 = 0x143,
  IMAGE_PROG_CACHED_SUN_1_LAST = 0x188,
  IMAGE_PROG_CACHED_SUN_SHADOW_LAST = 0x188,
  IMAGE_PROG_COUNT = 0x189,
};

/* 372 */
enum $6E46BBD74E299ADE7E654C7EB58BA48D
{
  IMG_FLAG_NOPICMIP = 0x1,
  IMG_FLAG_NOMIPMAPS = 0x2,
  IMG_FLAG_STREAMING = 0x4,
  IMG_FLAG_LEGACY_NORMALS = 0x8,
  IMG_FLAG_CLAMP_U = 0x10,
  IMG_FLAG_CLAMP_V = 0x20,
  IMG_FLAG_ALPHA_WEIGHTED_COLORS = 0x40,
  IMG_FLAG_DXTC_APPROX_WEIGHTS = 0x80,
  IMG_FLAG_GAMMA_NONE = 0x0,
  IMG_FLAG_GAMMA_SRGB = 0x100,
  IMG_FLAG_GAMMA_PWL = 0x200,
  IMG_FLAG_GAMMA_2 = 0x300,
  IMG_FLAG_CPU_READ = 0x800,
  IMG_FLAG_CPU_WRITE = 0x1000,
  IMG_FLAG_POM = 0x2000,
  IMG_FLAG_AUTODISPLACEMENT = 0x4000,
  IMG_FLAG_MAPTYPE_2D = 0x0,
  IMG_FLAG_MAPTYPE_CUBE = 0x8000,
  IMG_FLAG_MAPTYPE_3D = 0x10000,
  IMG_FLAG_MAPTYPE_1D = 0x18000,
  IMG_FLAG_MAPTYPE_ARRAY = 0x20000,
  IMG_FLAG_MODE_NONE = 0x0,
  IMG_FLAG_MODE_NORMAL_MAP = 0x40000,
  IMG_FLAG_MODE_DISPLACEMENT_MAP = 0xC0000,
  IMG_FLAG_MODE_OCEAN_DISPLACEMENT_MAP = 0x80000,
  IMG_FLAG_MIPGEN_ORIGINAL = 0x0,
  IMG_FLAG_MIPGEN_LANCZOS2 = 0x100000,
  IMG_FLAG_MIPGEN_LANCZOS3 = 0x200000,
  IMG_FLAG_MIPGEN_MITCHELL = 0x300000,
  IMG_FLAG_MIPGEN_CATMULL_ROM = 0x400000,
  IMG_FLAG_MIPGEN_CUBIC_BSPLINE = 0x500000,
  IMG_FLAG_MIPGEN_HERMITE = 0x600000,
  IMG_FLAG_MIPGEN_BOX = 0x700000,
  IMG_FLAG_GENMIPMAPS = 0x800000,
  IMG_FLAG_DYNAMIC = 0x1000000,
  IMG_FLAG_RENDER_TARGET = 0x2000000,
  IMG_FLAG_FLOATING_POINT = 0x8000000,
  IMG_FLAG_PARABOLOID = 0x10000000,
  IMG_FLAG_STAGING = 0x20000000,
  IMG_FLAG_DEPTH = 0x40000000,
  IMG_FLAG_TYPELESS = 0x80000000,
};

/* 373 */
enum GfxCachedRenderTargetId
{
  GFX_CACHED_SHADOWMAP_TARGET_LARGE = 0x0,
  GFX_CACHED_SHADOWMAP_TARGET_SMALL = 0x1,
  GFX_CACHED_SHADOWMAP_TARGET_COUNT = 0x2,
};

/* 374 */
enum $18B1B989CB7F95E8A794B2D873B66800
{
  R_CACHED_SPOT_SHADOWS_DISABLED = 0x0,
  R_CACHED_SPOT_SHADOWS_ENABLED = 0x1,
  R_CACHED_SPOT_SHADOWS_FORCE_CACHE_FLUSH = 0x2,
  R_CACHED_SPOT_SHADOWS_FORCE_STENCIL_CLEAR = 0x3,
  R_CACHED_SPOT_SHADOWS_INVALIDATE_DEPTH_AND_STENCIL = 0x4,
  R_CACHED_SPOT_SHADOWS_OPTIONS_COUNT = 0x5,
};

/* 375 */
enum CriticalSection
{
  CRITSECT_CONSOLE = 0x0,
  CRITSECT_DEBUG_SOCKET = 0x1,
  CRITSECT_COM_ERROR = 0x2,
  CRITSECT_ALLOC_MARK = 0x3,
  CRITSECT_GENERATE_MARK = 0x4,
  CRITSECT_STREAMED_SOUND = 0x5,
  CRITSECT_STREAMFILE_SHUTDOWN = 0x6,
  CRITSECT_FAKELAG = 0x7,
  CRITSECT_CLIENT_MESSAGE = 0x8,
  CRITSECT_CLIENT_CMD = 0x9,
  CRITSECT_DOBJ_ALLOC = 0xA,
  CRITSECT_XANIM_ALLOC = 0xB,
  CRITSECT_KEY_BINDINGS = 0xC,
  CRITSECT_FX_VIS = 0xD,
  CRITSECT_SERVER_MESSAGE = 0xE,
  CRITSECT_SCRIPT_STRING = 0xF,
  CRITSECT_RD_BUFFER = 0x10,
  CRITSECT_SYS_EVENT_QUEUE = 0x11,
  CRITSECT_GPU_FENCE = 0x12,
  CRITSECT_FATAL_ERROR = 0x13,
  CRITSECT_SPARK_SURF = 0x14,
  CRITSECT_PHYSICS = 0x15,
  CRITSECT_LIVE = 0x16,
  CRITSECT_AUDIO_PHYSICS = 0x17,
  CRITSECT_DW_LOGGING = 0x18,
  CRITSECT_CINEMATIC_UPDATE = 0x19,
  CRITSECT_CINEMATIC_TARGET_CHANGE_COMMAND = 0x1A,
  CRITSECT_CINEMATIC_TARGET_CHANGE_BACKEND = 0x1B,
  CRITSECT_CINEMATIC_STATUS = 0x1C,
  CRITSECT_CINEMATIC_SERVER = 0x1D,
  CRITSECT_CINEMATIC_PAUSE = 0x1E,
  CRITSECT_CINEMATIC_SAVE = 0x1F,
  CRITSECT_DEMONWARE_ALLOC = 0x20,
  CRITSECT_DEMONWARE = 0x21,
  CRITSECT_CBUF = 0x22,
  CRITSECT_STATS_WRITE = 0x23,
  CRITSECT_CG_GLASS = 0x24,
  CRITSECT_SERVER_DEMO_COMPRESS = 0x25,
  CRITSECT_COM_SET_ERROR_MSG = 0x26,
  CRITSECT_SOUND_UPDATE = 0x27,
  CRITSECT_RESET_MODEL_LIGHTING = 0x28,
  CRITSECT_OCCLUSION_QUERY = 0x29,
  CRITSECT_TENSION = 0x2A,
  CRITSECT_COUNT = 0x2B,
};

/* 376 */
enum R_DofTweakState
{
  R_DOFTWEAKSTATE_OFF = 0x0,
  R_DOFTWEAKSTATE_ON = 0x1,
  R_DOFTWEAKSTATE_FORCEDISABLE = 0x2,
  R_DOFTWEAKSTATE_COUNT = 0x3,
};

/* 377 */
enum $73A44A0C5F0129EEA992ADB2548A1662
{
  R_WEIGHTED_DISK_DOF_OFF = 0x0,
  R_WEIGHTED_DISK_DOF_MIP_CHAIN = 0x1,
  R_WEIGHTED_DISK_DOF_SINGLE_MIP = 0x2,
  R_WEIGHTED_DISK_DOF_COUNT = 0x3,
};

/* 378 */
enum $E28C4D6EDC8E93F6700193E2B4FB9BCE
{
  R_MB_FAST_PRESET_LOW = 0x0,
  R_MB_FAST_PRESET_MED = 0x1,
  R_MB_FAST_PRESET_HIGH = 0x2,
  R_MB_FAST_PRESET_COUNT = 0x3,
};

/* 379 */
enum $8159839A7FAD847CA32F4EEBFE25E9EF
{
  POST_AA_MODE_NONE = 0x0,
  POST_AA_MODE_FXAA = 0x1,
  POST_AA_MODE_SMAA_1X = 0x2,
  POST_AA_MODE_COUNT = 0x3,
};

/* 380 */
enum $268DB39C24AC5DC0EC031B97FF37323D
{
  COLORIZATION_USE_ALTERNATE_DEPTH = 0x1,
  COLORIZATION_USE_ALTERNATE_MASK = 0x2,
  COLORIZATION_USE_LOW_MID_HIGH = 0x4,
};

/* 381 */
enum GfxSortedHistoryAdd
{
  SH_ADD_NEVER = 0x0,
  SH_ADD_IF_NEW = 0x1,
};

/* 382 */
enum GfxLightingAtPointParamFlags
{
  GFX_LIGHTING_AT_POINT_PARAM_COMPUTE_AMBIENT_ONLY = 0x1,
  GFX_LIGHTING_AT_POINT_PARAM_ADD_PRIMARY_LIGHT_TO_AMBIENT = 0x2,
  GFX_LIGHTING_AT_POINT_PARAM_IGNORE_AMBIENT = 0x4,
};

/* 383 */
enum GfxLightingAverageColorType
{
  GFX_LIGHTING_AVGCOLOR_IWRAD_EQUATION = 0x0,
  GFX_LIGHTING_AVGCOLOR_LEGACY_EQUATION = 0x1,
  GFX_LIGHTING_AVGCOLOR_SH1 = 0x2,
};

/* 384 */
enum $09793723D5D7115D312333533B5A38E4
{
  R_MBENABLE_MODE_OFF = 0x0,
  R_MBENABLE_MODE_ON_SCRIPT_ENTS_ONLY = 0x1,
  R_MBENABLE_MODE_ON_ALL_ENTS = 0x2,
  R_MBENABLE_MODE_ON_ALL_BUT_SCRIPT_ENTS = 0x3,
  R_MBENABLE_MODE_COUNT = 0x4,
};

/* 385 */
enum GfxModelLightExtrapolation
{
  GFX_MODELLIGHT_EXTRAPOLATE = 0x0,
  GFX_MODELLIGHT_SHOW_MISSING = 0x1,
};

/* 386 */
enum SideClassification
{
  SIDE_FRONT = 0x0,
  SIDE_BACK = 0x1,
  SIDE_ON = 0x2,
  SIDE_CROSS = 0x3,
  SIDE_COUNT = 0x4,
};

/* 387 */
enum LightGridIndexCommandEnum
{
  LightGridIndexCommand_List = 0x0,
  LightGridIndexCommand_Splat = 0x1,
  LightGridIndexCommand_MaskedList = 0x2,
  LightGridIndexCommand_MaskedSplat = 0x3,
  LightGridIndexCommand_Count = 0x4,
  LightGridIndexCommand_List_Flag = 0x1,
  LightGridIndexCommand_Splat_Flag = 0x2,
  LightGridIndexCommand_MaskedList_Flag = 0x4,
  LightGridIndexCommand_MaskedSplat_Flag = 0x8,
};

/* 388 */
enum LightGridMaskCommandEnum
{
  LightGridMaskCommand_CustomMask = 0x0,
  LightGridMaskCommand_TableMask = 0x1,
  LightGridMaskCommand_Count = 0x2,
};

/* 389 */
enum LightGridVoxelCommandEnum
{
  LightGridVoxelCommand_CustomMask = 0x0,
  LightGridVoxelCommand_FullMask = 0x1,
  LightGridVoxelCommand_TableMask = 0x2,
  LightGridVoxelCommand_FlippedTableMask = 0x3,
  LightGridVoxelCommand_Count = 0x4,
};

/* 390 */
enum $0181B4D368B9CAB76F74F1668482555A
{
  PROF2PAGE_DISABLED = 0x0,
  PROF2PAGE_SPECIAL_COUNT = 0x1,
  PROF2PAGE_DEFAULT = 0x1,
};

/* 391 */
enum NV_MOSAIC_TOPO
{
  NV_MOSAIC_TOPO_NONE = 0x0,
  NV_MOSAIC_TOPO_BEGIN_BASIC = 0x1,
  NV_MOSAIC_TOPO_1x2_BASIC = 0x1,
  NV_MOSAIC_TOPO_2x1_BASIC = 0x2,
  NV_MOSAIC_TOPO_1x3_BASIC = 0x3,
  NV_MOSAIC_TOPO_3x1_BASIC = 0x4,
  NV_MOSAIC_TOPO_1x4_BASIC = 0x5,
  NV_MOSAIC_TOPO_4x1_BASIC = 0x6,
  NV_MOSAIC_TOPO_2x2_BASIC = 0x7,
  NV_MOSAIC_TOPO_2x3_BASIC = 0x8,
  NV_MOSAIC_TOPO_2x4_BASIC = 0x9,
  NV_MOSAIC_TOPO_3x2_BASIC = 0xA,
  NV_MOSAIC_TOPO_4x2_BASIC = 0xB,
  NV_MOSAIC_TOPO_1x5_BASIC = 0xC,
  NV_MOSAIC_TOPO_1x6_BASIC = 0xD,
  NV_MOSAIC_TOPO_7x1_BASIC = 0xE,
  NV_MOSAIC_TOPO_END_BASIC = 0x17,
  NV_MOSAIC_TOPO_BEGIN_PASSIVE_STEREO = 0x18,
  NV_MOSAIC_TOPO_1x2_PASSIVE_STEREO = 0x18,
  NV_MOSAIC_TOPO_2x1_PASSIVE_STEREO = 0x19,
  NV_MOSAIC_TOPO_1x3_PASSIVE_STEREO = 0x1A,
  NV_MOSAIC_TOPO_3x1_PASSIVE_STEREO = 0x1B,
  NV_MOSAIC_TOPO_1x4_PASSIVE_STEREO = 0x1C,
  NV_MOSAIC_TOPO_4x1_PASSIVE_STEREO = 0x1D,
  NV_MOSAIC_TOPO_2x2_PASSIVE_STEREO = 0x1E,
  NV_MOSAIC_TOPO_END_PASSIVE_STEREO = 0x22,
  NV_MOSAIC_TOPO_MAX = 0x23,
};

/* 392 */
enum _NV_SCALING
{
  NV_SCALING_DEFAULT = 0x0,
  NV_SCALING_GPU_SCALING_TO_CLOSEST = 0x1,
  NV_SCALING_GPU_SCALING_TO_NATIVE = 0x2,
  NV_SCALING_GPU_SCANOUT_TO_NATIVE = 0x3,
  NV_SCALING_GPU_SCALING_TO_ASPECT_SCANOUT_TO_NATIVE = 0x5,
  NV_SCALING_GPU_SCALING_TO_ASPECT_SCANOUT_TO_CLOSEST = 0x6,
  NV_SCALING_GPU_SCANOUT_TO_CLOSEST = 0x7,
  NV_SCALING_MONITOR_SCALING = 0x1,
  NV_SCALING_ADAPTER_SCALING = 0x2,
  NV_SCALING_CENTERED = 0x3,
  NV_SCALING_ASPECT_SCALING = 0x5,
  NV_SCALING_CUSTOMIZED = 0xFF,
};

/* 393 */
enum _NVAPI_DITHER_BITS
{
  NVAPI_DITHER_BITS_6BITS = 0x0,
  NVAPI_DITHER_BITS_8BITS = 0x1,
};

/* 394 */
enum _NVAPI_DITHER_MODE
{
  NVAPI_DITHER_MODE_DYNAMIC_ERR_ACC = 0x0,
  NVAPI_DITHER_MODE_STATIC_ERR_ACC = 0x1,
  NVAPI_DITHER_MODE_DYNAMIC_2X2 = 0x2,
  NVAPI_DITHER_MODE_STATIC_2X2 = 0x3,
};

/* 395 */
enum _NV_TIMING_OVERRIDE
{
  NV_TIMING_OVERRIDE_CURRENT = 0x0,
  NV_TIMING_OVERRIDE_AUTO = 0x1,
  NV_TIMING_OVERRIDE_EDID = 0x2,
  NV_TIMING_OVERRIDE_DMT = 0x3,
  NV_TIMING_OVERRIDE_DMT_RB = 0x4,
  NV_TIMING_OVERRIDE_CVT = 0x5,
  NV_TIMING_OVERRIDE_CVT_RB = 0x6,
  NV_TIMING_OVERRIDE_GTF = 0x7,
  NV_TIMING_OVERRIDE_EIA861 = 0x8,
  NV_TIMING_OVERRIDE_ANALOG_TV = 0x9,
  NV_TIMING_OVERRIDE_CUST = 0xA,
  NV_TIMING_OVERRIDE_NV_PREDEFINED = 0xB,
  NV_TIMING_OVERRIDE_NV_PSF = 0xB,
  NV_TIMING_OVERRIDE_NV_ASPR = 0xC,
  NV_TIMING_OVERRIDE_SDI = 0xD,
  NV_TIMING_OVRRIDE_MAX = 0xE,
};

/* 396 */
enum R_SplitDecalTrans_Layer
{
  R_SPLITDECALTRANS_LAYER_DECAL = 0x0,
  R_SPLITDECALTRANS_LAYER_TRANS = 0x1,
  R_SPLITDECALTRANS_LAYER_COUNT = 0x2,
};

/* 397 */
enum GamePadStick
{
  GPAD_INVALID = 0x0,
  GPAD_LX = 0x40000000,
  GPAD_LY = 0x40000001,
  GPAD_RX = 0x40000002,
  GPAD_RY = 0x40000003,
};

/* 398 */
enum GfxProjectionTypes
{
  GFX_PROJECTION_2D = 0x0,
  GFX_PROJECTION_3D = 0x1,
};

/* 399 */
enum GamePadButton
{
  GPAD_NONE = 0x0,
  GPAD_UP = 0x10000001,
  GPAD_DOWN = 0x10000002,
  GPAD_LEFT = 0x10000004,
  GPAD_RIGHT = 0x10000008,
  GPAD_START = 0x10000010,
  GPAD_BACK = 0x10000020,
  GPAD_L3 = 0x10000040,
  GPAD_R3 = 0x10000080,
  GPAD_A = 0x10001000,
  GPAD_B = 0x10002000,
  GPAD_X = 0x10004000,
  GPAD_Y = 0x10008000,
  GPAD_L_SHLDR = 0x10000100,
  GPAD_R_SHLDR = 0x10000200,
  GPAD_L_TRIG = 0x20000000,
  GPAD_R_TRIG = 0x20000001,
};

/* 400 */
enum $2523EA9E50F3CCC4A9D1C992144AFF84
{
  RENDERCMD_BEGINFRAME = 0x1,
  RENDERCMD_ENDFRAME = 0x2,
};

/* 401 */
enum $5C7603243A829E5BC6BA7F928C72347C
{
  THREAD_VALUE_PROF_STACK = 0x0,
  THREAD_VALUE_VA = 0x1,
  THREAD_VALUE_COM_ERROR = 0x2,
  THREAD_VALUE_TRACE = 0x3,
  THREAD_VALUE_COUNT = 0x4,
};

/* 402 */
enum DisplayModeEnum
{
  DISPLAY_MODE_FULLSCREEN = 0x0,
  DISPLAY_MODE_WINDOWED_NO_BORDER = 0x1,
  DISPLAY_MODE_WINDOWED = 0x2,
  DISPLAY_MODE_COUNT = 0x3,
};

/* 403 */
enum $283AB572DE9E3AF0B6B60CEE7D616AC7
{
  TEXT_RENDERFLAG_FORCEMONOSPACE = 0x1,
  TEXT_RENDERFLAG_CURSOR = 0x2,
  TEXT_RENDERFLAG_DROPSHADOW = 0x4,
  TEXT_RENDERFLAG_DROPSHADOW_EXTRA = 0x8,
  TEXT_RENDERFLAG_GLOW = 0x10,
  TEXT_RENDERFLAG_GLOW_FORCE_COLOR = 0x20,
  TEXT_RENDERFLAG_FX_DECODE = 0x40,
  TEXT_RENDERFLAG_PADDING = 0x80,
  TEXT_RENDERFLAG_SUBTITLETEXT = 0x100,
  TEXT_RENDERFLAG_CINEMATIC = 0x200,
  TEXT_RENDERFLAG_OUTLINE = 0x400,
  TEXT_RENDERFLAG_OUTLINE_EXTRA = 0x800,
};

/* 404 */
enum $73FBCC5539B386EC0A859BC4CB3E91BA
{
  FONTPASS_NORMAL = 0x0,
  FONTPASS_GLOW = 0x1,
  FONTPASS_OUTLINE = 0x2,
  FONTPASS_COUNT = 0x3,
};

/* 405 */
enum $065B9D63BC3BA62D67B7891BC006BC0F
{
  IMAGE_TRACK_MISC = 0x0,
  IMAGE_TRACK_DEBUG = 0x1,
  IMAGE_TRACK_TEXTURENAME = 0x2,
  IMAGE_TRACK_UI = 0x3,
  IMAGE_TRACK_LIGHTMAP = 0x4,
  IMAGE_TRACK_LIGHT = 0x5,
  IMAGE_TRACK_FX = 0x6,
  IMAGE_TRACK_HUD = 0x7,
  IMAGE_TRACK_MODEL = 0x8,
  IMAGE_TRACK_WORLD = 0x9,
  IMAGE_TRACK_COUNT = 0xA,
};

/* 406 */
enum _NVAPI_D3D_RESOURCERENDERING_FLAG
{
  NVAPI_D3D_RR_FLAG_DEFAULTS = 0x0,
  NVAPI_D3D_RR_FLAG_FORCE_DISCARD_CONTENT = 0x1,
  NVAPI_D3D_RR_FLAG_FORCE_KEEP_CONTENT = 0x2,
  NVAPI_D3D_RR_FLAG_MULTI_FRAME = 0x4,
};

/* 407 */
enum _NvAPI_Status
{
  NVAPI_OK = 0x0,
  NVAPI_ERROR = 0xFFFFFFFF,
  NVAPI_LIBRARY_NOT_FOUND = 0xFFFFFFFE,
  NVAPI_NO_IMPLEMENTATION = 0xFFFFFFFD,
  NVAPI_API_NOT_INITIALIZED = 0xFFFFFFFC,
  NVAPI_INVALID_ARGUMENT = 0xFFFFFFFB,
  NVAPI_NVIDIA_DEVICE_NOT_FOUND = 0xFFFFFFFA,
  NVAPI_END_ENUMERATION = 0xFFFFFFF9,
  NVAPI_INVALID_HANDLE = 0xFFFFFFF8,
  NVAPI_INCOMPATIBLE_STRUCT_VERSION = 0xFFFFFFF7,
  NVAPI_HANDLE_INVALIDATED = 0xFFFFFFF6,
  NVAPI_OPENGL_CONTEXT_NOT_CURRENT = 0xFFFFFFF5,
  NVAPI_INVALID_POINTER = 0xFFFFFFF2,
  NVAPI_NO_GL_EXPERT = 0xFFFFFFF4,
  NVAPI_INSTRUMENTATION_DISABLED = 0xFFFFFFF3,
  NVAPI_NO_GL_NSIGHT = 0xFFFFFFF1,
  NVAPI_EXPECTED_LOGICAL_GPU_HANDLE = 0xFFFFFF9C,
  NVAPI_EXPECTED_PHYSICAL_GPU_HANDLE = 0xFFFFFF9B,
  NVAPI_EXPECTED_DISPLAY_HANDLE = 0xFFFFFF9A,
  NVAPI_INVALID_COMBINATION = 0xFFFFFF99,
  NVAPI_NOT_SUPPORTED = 0xFFFFFF98,
  NVAPI_PORTID_NOT_FOUND = 0xFFFFFF97,
  NVAPI_EXPECTED_UNATTACHED_DISPLAY_HANDLE = 0xFFFFFF96,
  NVAPI_INVALID_PERF_LEVEL = 0xFFFFFF95,
  NVAPI_DEVICE_BUSY = 0xFFFFFF94,
  NVAPI_NV_PERSIST_FILE_NOT_FOUND = 0xFFFFFF93,
  NVAPI_PERSIST_DATA_NOT_FOUND = 0xFFFFFF92,
  NVAPI_EXPECTED_TV_DISPLAY = 0xFFFFFF91,
  NVAPI_EXPECTED_TV_DISPLAY_ON_DCONNECTOR = 0xFFFFFF90,
  NVAPI_NO_ACTIVE_SLI_TOPOLOGY = 0xFFFFFF8F,
  NVAPI_SLI_RENDERING_MODE_NOTALLOWED = 0xFFFFFF8E,
  NVAPI_EXPECTED_DIGITAL_FLAT_PANEL = 0xFFFFFF8D,
  NVAPI_ARGUMENT_EXCEED_MAX_SIZE = 0xFFFFFF8C,
  NVAPI_DEVICE_SWITCHING_NOT_ALLOWED = 0xFFFFFF8B,
  NVAPI_TESTING_CLOCKS_NOT_SUPPORTED = 0xFFFFFF8A,
  NVAPI_UNKNOWN_UNDERSCAN_CONFIG = 0xFFFFFF89,
  NVAPI_TIMEOUT_RECONFIGURING_GPU_TOPO = 0xFFFFFF88,
  NVAPI_DATA_NOT_FOUND = 0xFFFFFF87,
  NVAPI_EXPECTED_ANALOG_DISPLAY = 0xFFFFFF86,
  NVAPI_NO_VIDLINK = 0xFFFFFF85,
  NVAPI_REQUIRES_REBOOT = 0xFFFFFF84,
  NVAPI_INVALID_HYBRID_MODE = 0xFFFFFF83,
  NVAPI_MIXED_TARGET_TYPES = 0xFFFFFF82,
  NVAPI_SYSWOW64_NOT_SUPPORTED = 0xFFFFFF81,
  NVAPI_IMPLICIT_SET_GPU_TOPOLOGY_CHANGE_NOT_ALLOWED = 0xFFFFFF80,
  NVAPI_REQUEST_USER_TO_CLOSE_NON_MIGRATABLE_APPS = 0xFFFFFF7F,
  NVAPI_OUT_OF_MEMORY = 0xFFFFFF7E,
  NVAPI_WAS_STILL_DRAWING = 0xFFFFFF7D,
  NVAPI_FILE_NOT_FOUND = 0xFFFFFF7C,
  NVAPI_TOO_MANY_UNIQUE_STATE_OBJECTS = 0xFFFFFF7B,
  NVAPI_INVALID_CALL = 0xFFFFFF7A,
  NVAPI_D3D10_1_LIBRARY_NOT_FOUND = 0xFFFFFF79,
  NVAPI_FUNCTION_NOT_FOUND = 0xFFFFFF78,
  NVAPI_INVALID_USER_PRIVILEGE = 0xFFFFFF77,
  NVAPI_EXPECTED_NON_PRIMARY_DISPLAY_HANDLE = 0xFFFFFF76,
  NVAPI_EXPECTED_COMPUTE_GPU_HANDLE = 0xFFFFFF75,
  NVAPI_STEREO_NOT_INITIALIZED = 0xFFFFFF74,
  NVAPI_STEREO_REGISTRY_ACCESS_FAILED = 0xFFFFFF73,
  NVAPI_STEREO_REGISTRY_PROFILE_TYPE_NOT_SUPPORTED = 0xFFFFFF72,
  NVAPI_STEREO_REGISTRY_VALUE_NOT_SUPPORTED = 0xFFFFFF71,
  NVAPI_STEREO_NOT_ENABLED = 0xFFFFFF70,
  NVAPI_STEREO_NOT_TURNED_ON = 0xFFFFFF6F,
  NVAPI_STEREO_INVALID_DEVICE_INTERFACE = 0xFFFFFF6E,
  NVAPI_STEREO_PARAMETER_OUT_OF_RANGE = 0xFFFFFF6D,
  NVAPI_STEREO_FRUSTUM_ADJUST_MODE_NOT_SUPPORTED = 0xFFFFFF6C,
  NVAPI_TOPO_NOT_POSSIBLE = 0xFFFFFF6B,
  NVAPI_MODE_CHANGE_FAILED = 0xFFFFFF6A,
  NVAPI_D3D11_LIBRARY_NOT_FOUND = 0xFFFFFF69,
  NVAPI_INVALID_ADDRESS = 0xFFFFFF68,
  NVAPI_STRING_TOO_SMALL = 0xFFFFFF67,
  NVAPI_MATCHING_DEVICE_NOT_FOUND = 0xFFFFFF66,
  NVAPI_DRIVER_RUNNING = 0xFFFFFF65,
  NVAPI_DRIVER_NOTRUNNING = 0xFFFFFF64,
  NVAPI_ERROR_DRIVER_RELOAD_REQUIRED = 0xFFFFFF63,
  NVAPI_SET_NOT_ALLOWED = 0xFFFFFF62,
  NVAPI_ADVANCED_DISPLAY_TOPOLOGY_REQUIRED = 0xFFFFFF61,
  NVAPI_SETTING_NOT_FOUND = 0xFFFFFF60,
  NVAPI_SETTING_SIZE_TOO_LARGE = 0xFFFFFF5F,
  NVAPI_TOO_MANY_SETTINGS_IN_PROFILE = 0xFFFFFF5E,
  NVAPI_PROFILE_NOT_FOUND = 0xFFFFFF5D,
  NVAPI_PROFILE_NAME_IN_USE = 0xFFFFFF5C,
  NVAPI_PROFILE_NAME_EMPTY = 0xFFFFFF5B,
  NVAPI_EXECUTABLE_NOT_FOUND = 0xFFFFFF5A,
  NVAPI_EXECUTABLE_ALREADY_IN_USE = 0xFFFFFF59,
  NVAPI_DATATYPE_MISMATCH = 0xFFFFFF58,
  NVAPI_PROFILE_REMOVED = 0xFFFFFF57,
  NVAPI_UNREGISTERED_RESOURCE = 0xFFFFFF56,
  NVAPI_ID_OUT_OF_RANGE = 0xFFFFFF55,
  NVAPI_DISPLAYCONFIG_VALIDATION_FAILED = 0xFFFFFF54,
  NVAPI_DPMST_CHANGED = 0xFFFFFF53,
  NVAPI_INSUFFICIENT_BUFFER = 0xFFFFFF52,
  NVAPI_ACCESS_DENIED = 0xFFFFFF51,
  NVAPI_MOSAIC_NOT_ACTIVE = 0xFFFFFF50,
  NVAPI_SHARE_RESOURCE_RELOCATED = 0xFFFFFF4F,
  NVAPI_REQUEST_USER_TO_DISABLE_DWM = 0xFFFFFF4E,
  NVAPI_D3D_DEVICE_LOST = 0xFFFFFF4D,
  NVAPI_INVALID_CONFIGURATION = 0xFFFFFF4C,
  NVAPI_STEREO_HANDSHAKE_NOT_DONE = 0xFFFFFF4B,
  NVAPI_EXECUTABLE_PATH_IS_AMBIGUOUS = 0xFFFFFF4A,
  NVAPI_DEFAULT_STEREO_PROFILE_IS_NOT_DEFINED = 0xFFFFFF49,
  NVAPI_DEFAULT_STEREO_PROFILE_DOES_NOT_EXIST = 0xFFFFFF48,
  NVAPI_CLUSTER_ALREADY_EXISTS = 0xFFFFFF47,
  NVAPI_DPMST_DISPLAY_ID_EXPECTED = 0xFFFFFF46,
  NVAPI_INVALID_DISPLAY_ID = 0xFFFFFF45,
  NVAPI_STREAM_IS_OUT_OF_SYNC = 0xFFFFFF44,
  NVAPI_INCOMPATIBLE_AUDIO_DRIVER = 0xFFFFFF43,
  NVAPI_VALUE_ALREADY_SET = 0xFFFFFF42,
  NVAPI_TIMEOUT = 0xFFFFFF41,
  NVAPI_GPU_WORKSTATION_FEATURE_INCOMPLETE = 0xFFFFFF40,
  NVAPI_STEREO_INIT_ACTIVATION_NOT_DONE = 0xFFFFFF3F,
  NVAPI_SYNC_NOT_ACTIVE = 0xFFFFFF3E,
  NVAPI_SYNC_MASTER_NOT_FOUND = 0xFFFFFF3D,
  NVAPI_INVALID_SYNC_TOPOLOGY = 0xFFFFFF3C,
};

/* 408 */
enum $5C3A0E953DAC3DD22DDB64B067709C79
{
  FX_STATUS_REF_COUNT_MASK = 0x3FFF,
  FX_STATUS_DONT_DRAW = 0x4000,
  FX_STATUS_HAS_PENDING_LOOP_ELEMS = 0x8000,
  FX_STATUS_OWNED_EFFECTS_SHIFT = 0x10,
  FX_STATUS_OWNED_EFFECTS_MASK = 0x3FF0000,
  FX_STATUS_SELF_OWNED = 0x4000000,
  FX_STATUS_LIGHTING_PENDING = 0x8000000,
  FX_STATUS_ACTIVE_CLIENT0 = 0x10000000,
  FX_STATUS_ACTIVE_CLIENT1 = 0x20000000,
  FX_STATUS_ACTIVE_CLIENT2 = 0x40000000,
  FX_STATUS_ACTIVE_CLIENT3 = 0x80000000,
};

/* 409 */
enum $7E23918555002659587F63136D232798
{
  FX_ELEM_CLASS_SPRITE = 0x0,
  FX_ELEM_CLASS_NONSPRITE = 0x1,
  FX_ELEM_CLASS_CLOUD = 0x2,
  FX_ELEM_CLASS_COUNT = 0x3,
};

/* 410 */
enum $860984AE526833AB3F2FDC74356D6122
{
  PHYS_OBJ_ID_NULL = 0x0,
  PHYS_OBJ_ID_DEAD = 0xFFFFFFFF,
};

/* 411 */
enum FxRandKey
{
  FXRAND_VELOCITY_X = 0x0,
  FXRAND_VELOCITY_Y = 0x1,
  FXRAND_VELOCITY_Z = 0x2,
  FXRAND_ANGULAR_VELOCITY_PITCH = 0x3,
  FXRAND_ANGULAR_VELOCITY_YAW = 0x4,
  FXRAND_ANGULAR_VELOCITY_ROLL = 0x5,
  FXRAND_ORIGIN_X = 0x6,
  FXRAND_ORIGIN_Y = 0x7,
  FXRAND_ORIGIN_Z = 0x8,
  FXRAND_OFFSET_YAW = 0x9,
  FXRAND_OFFSET_HEIGHT = 0xA,
  FXRAND_OFFSET_RADIUS = 0xB,
  FXRAND_ANGLES_PITCH = 0xC,
  FXRAND_ANGLES_YAW = 0xD,
  FXRAND_ANGLES_ROLL = 0xE,
  FXRAND_GRAVITY = 0xF,
  FXRAND_REFLECTION_FACTOR = 0x10,
  FXRAND_LIFE_SPAN = 0x11,
  FXRAND_SPAWN_DELAY = 0x12,
  FXRAND_SPAWN_COUNT = 0x13,
  FXRAND_EMIT_DIST = 0x14,
  FXRAND_VISUAL = 0x15,
  FXRAND_TILE_START = 0x16,
  FXRAND_COLOR = 0x17,
  FXRAND_ROTATION = 0x18,
  FXRAND_ROTATION_DELTA = 0x19,
  FXRAND_SIZE_0 = 0x1A,
  FXRAND_SIZE_1 = 0x1B,
  FXRAND_SCALE = 0x1C,
  FXRAND_COUNT = 0x1D,
  FXRAND_GLASS = 0x0,
};

/* 412 */
enum $BD200F002BA2287E97B1193A861BC2A1
{
  GENERATE_DRAWSURFS0 = 0x0,
  GENERATE_DRAWSURFS1 = 0x1,
  GENERATE_DRAWSURFS2 = 0x2,
  GENERATE_DRAWSURFS3 = 0x3,
  GENERATE_DRAWSURFS_COUNT = 0x4,
};

/* 413 */
enum $44ED595A48CF2D4BF24165A45E7595BF
{
  THREAD_CONTEXT_MAIN = 0x0,
  THREAD_CONTEXT_BACKEND = 0x1,
  THREAD_CONTEXT_WORKER0 = 0x2,
  THREAD_CONTEXT_WORKER1 = 0x3,
  THREAD_CONTEXT_WORKER2 = 0x4,
  THREAD_CONTEXT_WORKER3 = 0x5,
  THREAD_CONTEXT_WORKER4 = 0x6,
  THREAD_CONTEXT_WORKER5 = 0x7,
  THREAD_CONTEXT_WORKER6 = 0x8,
  THREAD_CONTEXT_WORKER7 = 0x9,
  THREAD_CONTEXT_SERVER = 0xA,
  THREAD_CONTEXT_TRACE_COUNT = 0xB,
  THREAD_CONTEXT_TRACE_LAST = 0xA,
  THREAD_CONTEXT_CINEMATIC = 0xB,
  THREAD_CONTEXT_DATABASE = 0xC,
  THREAD_CONTEXT_STREAM = 0xD,
  THREAD_CONTEXT_SNDSTREAMPACKETCALLBACK = 0xE,
  THREAD_CONTEXT_STATS_WRITE = 0xF,
  THREAD_CONTEXT_COUNT = 0x10,
};

/* 414 */
enum $BB0A0BD92AC53728D957CD6241F67588
{
  PHYSICS_RUN0_FX = 0x0,
  PHYSICS_RUN0 = 0x1,
};

/* 415 */
enum $C4F1D8FBC7EC9F7DCCC89AC339B4DBFB
{
  R_CLEAR_NEVER = 0x0,
  R_CLEAR_DEV_ONLY_BLINK = 0x1,
  R_CLEAR_BLINK = 0x2,
  R_CLEAR_STEADY = 0x3,
  R_CLEAR_FOG_COLOR = 0x4,
  R_CLEAR_COUNT = 0x5,
};

/* 416 */
enum $252272DEA946CA449D3DB862DC48749F
{
  R_CACHED_SUN_SHADOWS_DISABLED = 0x0,
  R_CACHED_SUN_SHADOWS_ENABLED = 0x1,
  R_CACHED_SUN_SHADOWS_FORCE_CACHE_FLUSH = 0x2,
  R_CACHED_SUN_SHADOWS_OPTIONS_COUNT = 0x3,
};

/* 417 */
enum BespokeSamplerIndex
{
  BESPOKE_SAMPLER_FLOATZ_POSTOPAQUEFX = 0x0,
  BESPOKE_SAMPLER_COUNT = 0x1,
};

/* 418 */
enum MaterialUpdateFrequency
{
  MTL_UPDATE_PER_PRIM = 0x0,
  MTL_UPDATE_PER_OBJECT = 0x1,
  MTL_UPDATE_RARELY = 0x2,
  MTL_UPDATE_CUSTOM = 0x3,
};

/* 419 */
enum $05D27AAD7CF475B5F81DFCBDF13BE035
{
  R_COLOR_OVERRIDE_BLACK = 0x0,
  R_COLOR_OVERRIDE_NONE = 0x1,
  R_COLOR_OVERRIDE_WHITE = 0x2,
  R_COLOR_OVERRIDE_GRAY = 0x3,
  R_COLOR_OVERRIDE_COUNT = 0x4,
};

/* 420 */
enum $BAB9ACD025604F7E057259C62F656B8A
{
  R_MIP_FILTER_UNCHANGED = 0x0,
  R_MIP_FILTER_FORCE_LINEAR = 0x1,
  R_MIP_FILTER_FORCE_NEAREST = 0x2,
  R_MIP_FILTER_FORCE_NO_MIPS = 0x3,
  R_MIP_FILTER_COUNT = 0x4,
};

/* 421 */
enum $0E9EE34A21A8F04CA050E8897323EB2F
{
  CUSTOM_SAMPLER_REFLECTION_PROBE = 0x0,
  CUSTOM_SAMPLER_LIGHTMAP_PRIMARY = 0x1,
  CUSTOM_SAMPLER_LIGHTMAP_SECONDARY = 0x2,
  CUSTOM_SAMPLER_COUNT = 0x3,
};

/* 422 */
enum BespokeSamplerID
{
  BESPOKE_SAMPLER_ID_FLOATZ_POSTOPAQUEFX = 0x18,
  BESPOKE_SAMPLER_ID_MAX = 0x19,
};

/* 423 */
enum DynEntityCollType
{
  DYNENT_COLL_CLIENT_FIRST = 0x0,
  DYNENT_COLL_CLIENT_MODEL = 0x0,
  DYNENT_COLL_CLIENT_BRUSH = 0x1,
  DYNENT_COLL_COUNT = 0x2,
};

/* 424 */
enum clientTriggerType_t
{
  CLIENT_TRIGGER_NONE = 0x0,
  CLIENT_TRIGGER_VISIONSET = 0x1,
  CLIENT_TRIGGER_AUDIO = 0x2,
  CLIENT_TRIGGER_BLEND_VISION = 0x4,
  CLIENT_TRIGGER_BLEND_AUDIO = 0x8,
  CLIENT_TRIGGER_BLEND_ALL = 0xC,
  CLIENT_TRIGGER_NPC = 0x10,
};

/* 425 */
enum ScriptableEventType
{
  SCRIPTABLE_EVENT_MODEL = 0x0,
  SCRIPTABLE_EVENT_FX = 0x1,
  SCRIPTABLE_EVENT_SOUND = 0x2,
  SCRIPTABLE_EVENT_ANIMATION = 0x3,
  SCRIPTABLE_EVENT_EXPLODE = 0x4,
  SCRIPTABLE_EVENT_HEALTHDRAIN = 0x5,
  SCRIPTABLE_EVENT_PHYSICSLAUNCH = 0x6,
  SCRIPTABLE_EVENT_LIGHTSETTINGS = 0x7,
  SCRIPTABLE_EVENT_SUNLIGHTSETTINGS = 0x8,
  SCRIPTABLE_EVENT_SHAKE = 0x9,
  SCRIPTABLE_EVENT_STATECHANGE = 0xA,
  SCRIPTABLE_EVENT_COUNT = 0xB,
};

/* 426 */
enum DynEntityType
{
  DYNENT_TYPE_INVALID = 0x0,
  DYNENT_TYPE_CLUTTER = 0x1,
  DYNENT_TYPE_DESTRUCT = 0x2,
  DYNENT_TYPE_HINGE = 0x3,
  DYNENT_TYPE_SCRIPTABLEINST = 0x4,
  DYNENT_TYPE_SCRIPTABLEPHYSICS = 0x5,
  DYNENT_TYPE_LINKED = 0x6,
  DYNENT_TYPE_LINKED_NOSHADOW = 0x7,
  DYNENT_TYPE_COUNT = 0x8,
};

/* 427 */
enum ScriptableNotetrackType
{
  SCRIPTABLE_NT_FX = 0x0,
  SCRIPTABLE_NT_SOUND = 0x1,
  SCRIPTABLE_NT_COUNT = 0x2,
};

/* 428 */
enum ScriptableType
{
  SCRIPTABLE_TYPE_GENERAL = 0x0,
  SCRIPTABLE_TYPE_CHARACTER = 0x1,
  SCRIPTABLE_TYPE_COUNT = 0x2,
};

/* 429 */
enum $21DA92F27E923E92053594B405691DA6
{
  VISDATA_UNKNOWN = 0x0,
  VISDATA_VISIBLE = 0x1,
  VISDATA_CULL_OUT = 0x2,
};

/* 430 */
enum $B09567EA64579CA0C6E82BF29FD6FC26
{
  MAPTYPE_NONE = 0x0,
  MAPTYPE_INVALID1 = 0x1,
  MAPTYPE_1D = 0x2,
  MAPTYPE_2D = 0x3,
  MAPTYPE_3D = 0x4,
  MAPTYPE_CUBE = 0x5,
  MAPTYPE_ARRAY = 0x6,
  MAPTYPE_COUNT = 0x7,
};

/* 431 */
enum $03F452D8EA8227B36C03DF43B8E7FCA2
{
  R_NORMAL_OVERRIDE_FLAT = 0x0,
  R_NORMAL_OVERRIDE_NONE = 0x1,
  R_NORMAL_OVERRIDE_COUNT = 0x2,
};

/* 432 */
enum $4DC1F267157BEB2F9980BFC8738AEDB6
{
  R_DETAIL_OVERRIDE_HIDE = 0x0,
  R_DETAIL_OVERRIDE_NONE = 0x1,
  R_DETAIL_OVERRIDE_COUNT = 0x2,
};

/* 433 */
enum $57ED518E5959ED62031EC9640E9FF0AD
{
  R_DISPLACEMENT_OVERRIDE_FLAT0 = 0x0,
  R_DISPLACEMENT_OVERRIDE_FLAT1 = 0x1,
  R_DISPLACEMENT_OVERRIDE_NONE = 0x2,
  R_DISPLACEMENT_OVERRIDE_COUNT = 0x3,
};

/* 434 */
enum XModelThermalMode
{
  THERMAL_OFF = 0x0,
  THERMAL_ON = 0x1,
  THERMAL_TECH_ONLY = 0x3,
};

/* 435 */
enum SunShadowMode
{
  SUN_SHADOW_DEFAULT = 0x0,
  SUN_SHADOW_FORCE_ON = 0x1,
  SUN_SHADOW_FORCE_OFF = 0x2,
};

/* 436 */
enum $EF4BB3CA98450BA281262ED168A295D6
{
  R_DEPTH_PREPASS_NONE = 0x0,
  R_DEPTH_PREPASS_NEAR = 0x1,
  R_DEPTH_PREPASS_ALL = 0x2,
  R_DEPTH_PREPASS_COUNT = 0x3,
};

/* 437 */
enum GfxAAMode
{
  GFX_AA_MODE_OFF = 0x0,
  GFX_AA_MODE_FXAA = 0x1,
  GFX_AA_MODE_MSAA2X = 0x2,
  GFX_AA_MODE_MSAA4X = 0x3,
  GFX_AA_MODE_SMAA = 0x4,
  GFX_AA_MODE_TXAA2X = 0x5,
  GFX_AA_MODE_TXAA4X = 0x6,
  GFX_AA_MODE_COUNT = 0x7,
};

/* 438 */
enum XModelLodRampType
{
  XMODEL_LOD_RAMP_RIGID = 0x0,
  XMODEL_LOD_RAMP_SKINNED = 0x1,
  XMODEL_LOD_RAMP_COUNT = 0x2,
};

/* 439 */
enum $B4B8BED61B7FCB74F140B41556B61C01
{
  CULL_STATE_OUT = 0x0,
  CULL_STATE_BOUNDED_PENDING = 0x1,
  CULL_STATE_BOUNDED = 0x2,
  CULL_STATE_SKINNED_PENDING = 0x3,
  CULL_STATE_DONE = 0x4,
};

/* 440 */
enum InviteState
{
  INVITE_NONE = 0x0,
  INVITE_PENDING = 0x1,
  INVITE_MPACCEPTED = 0x2,
  INVITE_SPACCEPTED = 0x3,
};

/* 441 */
enum RenderTargetUsage
{
  RENDERTARGET_USAGE_DEPTH = 0x0,
  RENDERTARGET_USAGE_RENDER = 0x1,
  RENDERTARGET_USAGE_RENDER_SHARE_SCENE = 0x2,
  RENDERTARGET_USAGE_TEXTURE = 0x3,
  RENDERTARGET_USAGE_TYPELESS = 0x4,
  RENDERTARGET_USAGE_RENDER_TYPELESS = 0x5,
  RENDERTARGET_USAGE_TEXTURE_WITH_MIPS = 0x6,
};

/* 442 */
enum FullscreenType
{
  FULLSCREEN_DISPLAY = 0x0,
  FULLSCREEN_MIXED = 0x1,
  FULLSCREEN_SCENE = 0x2,
};

/* 443 */
enum FogTypes
{
  FOG_NORMAL = 0x1,
  FOG_DFOG = 0x2,
};

/* 444 */
enum LightInfluenceType
{
  LIGHT_INFLUENCE_NONE = 0x0,
  LIGHT_INFLUENCE_PRIMARY = 0x1,
  LIGHT_INFLUENCE_SECONDARY = 0x2,
  LIGHT_INFLUENCE_COINCIDENT = 0x3,
};

/* 445 */
enum LightGridNodeEncodedFlags
{
  LightGridNodeEncoded_Set_ColorIndex_Range_Flag = 0x1,
  LightGridNodeEncoded_Set_ColorIndex_Default_Flag = 0x2,
  LightGridNodeEncoded_Build_ColorIndex_Palette_Flag = 0x4,
  LightGridNodeEncoded_Set_LightIndex_Range_Flag = 0x8,
  LightGridNodeEncoded_Set_LightIndex_Default_Flag = 0x10,
  LightGridNodeEncoded_Build_LightIndex_Palette_Flag = 0x20,
};

/* 446 */
enum LightGridLeafEncodedFlags
{
  LightGridLeafEncoded_Set_ColorIndex_Range_Flag = 0x1,
  LightGridLeafEncoded_Set_ColorIndex_Default_Flag = 0x2,
  LightGridLeafEncoded_Set_ColorIndex_Commands_Flag = 0x4,
  LightGridLeafEncoded_Set_LightIndex_Range_Flag = 0x8,
  LightGridLeafEncoded_Set_LightIndex_Default_Flag = 0x10,
  LightGridLeafEncoded_Set_LightIndex_Commands_Flag = 0x20,
  LightGridLeafEncoded_Set_Voxel0_Flag = 0x40,
  LightGridLeafEncoded_Set_Voxel1_Flag = 0x80,
};

/* 447 */
enum GfxLightGridBlockCacheEntryStatus
{
  GfxLightGridBlockCacheEntry_Available = 0x0,
  GfxLightGridBlockCacheEntry_Reading = 0x1,
  GfxLightGridBlockCacheEntry_Updating = 0x2,
};

/* 448 */
enum PerfTimerDisplayMode
{
  PERF_TIMER_MODE_TOP = 0x0,
  PERF_TIMER_MODE_ALL = 0x1,
  PERF_TIMER_MODE_ACTIVE = 0x2,
  PERF_TIMER_MODE_MAJOR = 0x3,
  PERF_TIMER_MODE_MINOR = 0x4,
  PERF_TIMER_MODE_EMISSIVE_ONLY = 0x5,
  PERF_TIMER_MODE_UNKNOWN = 0x6,
};

/* 449 */
enum PerfTimerDisplayType
{
  PERF_TIMER_TYPE_STANDARD = 0x0,
  PERF_TIMER_TYPE_IN_PLACE = 0x1,
  PERF_TIMER_TYPE_COM_ONLY = 0x2,
  PERF_TIMER_TYPE_HIDDEN = 0x3,
  PERF_TIMER_TYPE_UNKNOWN = 0x4,
};

/* 450 */
enum StaticModelFlag
{
  STATIC_MODEL_FLAG_NO_CAST_SHADOW = 0x10,
  STATIC_MODEL_FLAG_GROUND_LIGHTING = 0x20,
  STATIC_MODEL_FLAG_LIGHTGRID_LIGHTING = 0x40,
  STATIC_MODEL_FLAG_VERTEXLIT_LIGHTING = 0x80,
  STATIC_MODEL_FLAG_LIGHTMAP_LIGHTING = 0x100,
  STATIC_MODEL_FLAG_ALLOW_FXMARK = 0x200,
  STATIC_MODEL_FLAG_REACTIVEMOTION = 0x400,
  STATIC_MODEL_FLAG_ANIMATED_VERTS = 0x800,
};

/* 451 */
enum R_fastModelPrimaryLightEnum
{
  R_FAST_MODEL_PRIMARY_LIGHT_DISABLED = 0x0,
  R_FAST_MODEL_PRIMARY_LIGHT_FASTER = 0x1,
  R_FAST_MODEL_PRIMARY_LIGHT_FASTEST = 0x2,
  R_FAST_MODEL_PRIMARY_LIGHT_COUNT = 0x3,
};

/* 452 */
enum $8AB4453A6DBA1F0C40BB9572A684F60C
{
  DOBJ_MAX_SURFS = 0x40,
  XMODEL_MAX_SURFS = 0x80,
};

/* 453 */
typedef $4DECDA45625DB2763FC46D6F5CBF863C $EC9BA13EE5DE622DC42F8B50EF830957;

/* 454 */
typedef $401D18D8561079E483BCFCFD960618EB $690B93E439A93BAF8A0A0961E46877FE;

/* 455 */
enum $C7A66656BD20095141AF9DA597C58E36
{
  ok = 0x0,
  partial = 0x1,
  error = 0x2,
  noconv = 0x3,
};

/* 456 */
enum std::_Iosb<int>::_Fmtflags
{
  _Fmtmask = 0xFFFF,
  _Fmtzero = 0x0,
};

/* 457 */
enum std::_Iosb<int>::_Iostate
{
  _Statmask = 0x17,
};

/* 458 */
enum std::ios_base::event
{
  erase_event = 0x0,
  imbue_event = 0x1,
  copyfmt_event = 0x2,
};

/* 459 */
enum std::io_errc::io_errc
{
  stream = 0x1,
};

/* 460 */
enum $3765A173ADD7CE92B6314F58D2CDA9A2
{
  alnum = 0x107,
  alpha = 0x103,
  cntrl = 0x20,
  digit = 0x4,
  graph = 0x117,
  lower = 0x2,
  print = 0x1D7,
  punct = 0x10,
  space = 0x48,
  upper = 0x1,
  xdigit = 0x80,
  blank = 0x48,
};

/* 461 */
enum EvalOperatorType
{
  EVAL_OP_LPAREN = 0x0,
  EVAL_OP_RPAREN = 0x1,
  EVAL_OP_COLON = 0x2,
  EVAL_OP_QUESTION = 0x3,
  EVAL_OP_PLUS = 0x4,
  EVAL_OP_MINUS = 0x5,
  EVAL_OP_UNARY_PLUS = 0x6,
  EVAL_OP_UNARY_MINUS = 0x7,
  EVAL_OP_MULTIPLY = 0x8,
  EVAL_OP_DIVIDE = 0x9,
  EVAL_OP_MODULUS = 0xA,
  EVAL_OP_LSHIFT = 0xB,
  EVAL_OP_RSHIFT = 0xC,
  EVAL_OP_BITWISE_NOT = 0xD,
  EVAL_OP_BITWISE_AND = 0xE,
  EVAL_OP_BITWISE_OR = 0xF,
  EVAL_OP_BITWISE_XOR = 0x10,
  EVAL_OP_LOGICAL_NOT = 0x11,
  EVAL_OP_LOGICAL_AND = 0x12,
  EVAL_OP_LOGICAL_OR = 0x13,
  EVAL_OP_EQUALS = 0x14,
  EVAL_OP_NOT_EQUAL = 0x15,
  EVAL_OP_LESS = 0x16,
  EVAL_OP_LESS_EQUAL = 0x17,
  EVAL_OP_GREATER = 0x18,
  EVAL_OP_GREATER_EQUAL = 0x19,
  EVAL_OP_COUNT = 0x1A,
};

/* 462 */
enum EvalValueType
{
  EVAL_VALUE_DOUBLE = 0x0,
  EVAL_VALUE_INT = 0x1,
  EVAL_VALUE_STRING = 0x2,
  EVAL_VALUE_ERROR = 0x3,
};

/* 463 */
enum std::_Uninitialized
{
  _Noinit = 0x0,
};

/* 464 */
enum std::errc::errc
{
  address_family_not_supported = 0x66,
  address_in_use = 0x64,
  address_not_available = 0x65,
  already_connected = 0x71,
  argument_list_too_long = 0x7,
  argument_out_of_domain = 0x21,
  bad_address = 0xE,
  bad_file_descriptor = 0x9,
  bad_message = 0x68,
  broken_pipe = 0x20,
  connection_aborted = 0x6A,
  connection_already_in_progress = 0x67,
  connection_refused = 0x6B,
  connection_reset = 0x6C,
  cross_device_link = 0x12,
  destination_address_required = 0x6D,
  device_or_resource_busy = 0x10,
  directory_not_empty = 0x29,
  executable_format_error = 0x8,
  file_exists = 0x11,
  file_too_large = 0x1B,
  filename_too_long = 0x26,
  function_not_supported = 0x28,
  host_unreachable = 0x6E,
  identifier_removed = 0x6F,
  illegal_byte_sequence = 0x2A,
  inappropriate_io_control_operation = 0x19,
  interrupted = 0x4,
  invalid_argument = 0x16,
  invalid_seek = 0x1D,
  io_error = 0x5,
  is_a_directory = 0x15,
  message_size = 0x73,
  network_down = 0x74,
  network_reset = 0x75,
  network_unreachable = 0x76,
  no_buffer_space = 0x77,
  no_child_process = 0xA,
  no_link = 0x79,
  no_lock_available = 0x27,
  no_message_available = 0x78,
  no_message = 0x7A,
  no_protocol_option = 0x7B,
  no_space_on_device = 0x1C,
  no_stream_resources = 0x7C,
  no_such_device_or_address = 0x6,
  no_such_device = 0x13,
  no_such_file_or_directory = 0x2,
  no_such_process = 0x3,
  not_a_directory = 0x14,
  not_a_socket = 0x80,
  not_a_stream = 0x7D,
  not_connected = 0x7E,
  not_enough_memory = 0xC,
  not_supported = 0x81,
  operation_canceled = 0x69,
  operation_in_progress = 0x70,
  operation_not_permitted = 0x1,
  operation_not_supported = 0x82,
  operation_would_block = 0x8C,
  owner_dead = 0x85,
  permission_denied = 0xD,
  protocol_error = 0x86,
  protocol_not_supported = 0x87,
  read_only_file_system = 0x1E,
  resource_deadlock_would_occur = 0x24,
  resource_unavailable_try_again = 0xB,
  result_out_of_range = 0x22,
  state_not_recoverable = 0x7F,
  stream_timeout = 0x89,
  text_file_busy = 0x8B,
  timed_out = 0x8A,
  too_many_files_open_in_system = 0x17,
  too_many_files_open = 0x18,
  too_many_links = 0x1F,
  too_many_symbolic_link_levels = 0x72,
  value_too_large = 0x84,
  wrong_protocol_type = 0x88,
};

/* 465 */
enum std::_Iosb<int>::_Dummy_enum
{
  _Dummy_enum_val = 0x1,
};

/* 466 */
enum std::_Iosb<int>::_Openmode
{
  _Openmask = 0xFF,
};

/* 467 */
enum std::_Iosb<int>::_Seekdir
{
  _Seekmask = 0x3,
};

/* 468 */
enum $0AE1ED1D395576D0F5C137E464D7BFE0
{
  _Openprot = 0x40,
};

/* 469 */
enum $CB70BAC724A579872079F071D4D4192E
{
  MTL_STANDARD_STAGES = 0x0,
  MTL_TESSELLATION_STAGES = 0x1,
  MTL_STAGE_CONFIG_COUNT = 0x2,
};

/* 470 */
enum $093BBDD82242C1A6B3F5E5BEE9EB0B8E
{
  MTL_PREPASS_STANDARD = 0x0,
  MTL_PREPASS_ALPHA = 0x1,
  MTL_PREPASS_NONE = 0x2,
  MTL_PREPASS_TYPECOUNT = 0x3,
};

/* 471 */
enum MtlTechSetNotFoundBehavior
{
  MTL_TECHSET_NOT_FOUND_RETURN_NULL = 0x0,
  MTL_TECHSET_NOT_FOUND_RETURN_DEFAULT = 0x1,
};

/* 472 */
enum MarkFragmentsAgainstEnum
{
  MARK_FRAGMENTS_AGAINST_BRUSHES = 0x0,
  MARK_FRAGMENTS_AGAINST_MODELS = 0x1,
};

/* 473 */
enum $FF464801A92705FD29A96E35CE08DC8C
{
  MARK_MODEL_MAX_SURF_INDEX = 0x100,
};

/* 474 */
enum VectorFieldType
{
  VECTOR_FIELD_TYPE_NONE = 0x0,
  VECTOR_FIELD_TYPE_FORCE = 0x1,
  VECTOR_FIELD_TYPE_VELOCITY = 0x2,
  VECTOR_FIELD_NUM_TYPES = 0x3,
};

/* 475 */
enum GfxImageQuality
{
  GFX_IMAGE_QUALITY_NATIVE = 0x0,
  GFX_IMAGE_QUALITY_VERYLOW = 0x1,
  GFX_IMAGE_QUALITY_LOW = 0x2,
  GFX_IMAGE_QUALITY_NORMAL = 0x3,
  GFX_IMAGE_QUALITY_HIGH = 0x4,
  GFX_IMAGE_QUALITY_COUNT = 0x5,
};

/* 476 */
enum _NVAPI_D3D_SETRESOURCEHINT_CATEGORY
{
  NVAPI_D3D_SRH_CATEGORY_SLI = 0x1,
};

/* 477 */
enum _NVAPI_D3D_SETRESOURCEHINT_SLI
{
  NVAPI_D3D_SRH_SLI_APP_CONTROLLED_INTERFRAME_CONTENT_SYNC = 0x1,
};

/* 478 */
enum GfxAspectRatio
{
  GFX_ASPECT_RATIO_AUTO = 0x0,
  GFX_ASPECT_RATIO_STANDARD = 0x1,
  GFX_ASPECT_RATIO_WIDE_16_10 = 0x2,
  GFX_ASPECT_RATIO_WIDE_16_9 = 0x3,
  GFX_ASPECT_RATIO_COUNT = 0x4,
};

/* 479 */
enum GfxDisplayMode
{
  GFX_DISPLAY_MODE_FULLSCREEN = 0x0,
  GFX_DISPLAY_MODE_WINDOWED_NO_BORDER = 0x1,
  GFX_DISPLAY_MODE_WINDOWED = 0x2,
  GFX_DISPLAY_MODE_COUNT = 0x3,
};

/* 480 */
enum $BFF65F9456139E987C2A41E36F85CFDE
{
  ASSET_MEMORY_MAIN = 0x0,
  ASSET_MEMORY_SCRIPT = 0x1,
  ASSET_MEMORY_IMAGECACHE_ALWAYSLOADED = 0x2,
  ASSET_MEMORY_COUNT = 0x3,
};

/* 481 */
enum D3D11_TEXTURECUBE_FACE
{
  D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0x0,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 0x1,
  D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 0x2,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 0x3,
  D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 0x4,
  D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 0x5,
};

/* 482 */
enum GfxImageFileFormat
{
  IMG_FORMAT_INVALID = 0x0,
  IMG_FORMAT_BITMAP_RGBA = 0x1,
  IMG_FORMAT_BITMAP_RGB = 0x2,
  IMG_FORMAT_BITMAP_LUMINANCE_ALPHA = 0x3,
  IMG_FORMAT_BITMAP_LUMINANCE = 0x4,
  IMG_FORMAT_BITMAP_ALPHA = 0x5,
  IMG_FORMAT_WAVELET_RGBA = 0x6,
  IMG_FORMAT_WAVELET_RGB = 0x7,
  IMG_FORMAT_WAVELET_LUMINANCE_ALPHA = 0x8,
  IMG_FORMAT_WAVELET_LUMINANCE = 0x9,
  IMG_FORMAT_WAVELET_ALPHA = 0xA,
  IMG_FORMAT_DXT1 = 0xB,
  IMG_FORMAT_DXT3 = 0xC,
  IMG_FORMAT_DXT5 = 0xD,
  IMG_FORMAT_DXN = 0xE,
  IMG_FORMAT_DXT3A_AS_LUMINANCE = 0xF,
  IMG_FORMAT_DXT5A_AS_LUMINANCE = 0x10,
  IMG_FORMAT_DXT3A_AS_ALPHA = 0x11,
  IMG_FORMAT_DXT5A_AS_ALPHA = 0x12,
  IMG_FORMAT_DXT1_AS_LUMINANCE_ALPHA = 0x13,
  IMG_FORMAT_DXN_AS_LUMINANCE_ALPHA = 0x14,
  IMG_FORMAT_DXT1_AS_LUMINANCE = 0x15,
  IMG_FORMAT_DXT1_AS_ALPHA = 0x16,
  IMG_FORMAT_BITMAP_RGBA16F = 0x17,
  IMG_FORMAT_BITMAP_RGBA32F = 0x18,
  IMG_FORMAT_BITMAP_R32F = 0x19,
  IMG_FORMAT_BC1 = 0x1A,
  IMG_FORMAT_BC2 = 0x1B,
  IMG_FORMAT_BC3 = 0x1C,
  IMG_FORMAT_BC4 = 0x1D,
  IMG_FORMAT_BC5 = 0x1E,
  IMG_FORMAT_BC5S = 0x1F,
  IMG_FORMAT_BC6H_UF16 = 0x20,
  IMG_FORMAT_BC6H_SF16 = 0x21,
  IMG_FORMAT_BC7_UNORM = 0x22,
  IMG_FORMAT_BC7_UNORM_SRGB = 0x23,
  IMG_FORMAT_COUNT = 0x24,
};

/* 483 */
enum $964CAD0BB8D69B9C858C2B5F8F4E4B72
{
  IMAGE_FLAG_USE_SRGB_READS = 0x1,
  IMAGE_FLAG_NOPICMIP = 0x2,
  IMAGE_FLAG_DELAY_LOAD_PIXELS = 0x4,
  IMAGE_FLAG_PARABOLOID = 0x8,
  IMAGE_FLAG_HEATMAP = 0x10,
  IMAGE_FLAG_STAGING = 0x20,
  IMAGE_FLAG_TRANSIENT = 0x40,
};

/* 484 */
enum SysOS
{
  SYS_OSID_UNKNOWN = 0x0,
  SYS_OSID_WINDOWS_2000 = 0x1,
  SYS_OSID_WINDOWS_XP = 0x2,
  SYS_OSID_WINDOWS_XP_PRO_X64 = 0x3,
  SYS_OSID_WINDOWS_SERVER_2003 = 0x4,
  SYS_OSID_WINDOWS_SERVER_2003_R2 = 0x5,
  SYS_OSID_WINDOWS_VISTA = 0x6,
  SYS_OSID_WINDOWS_SERVER_2008 = 0x7,
  SYS_OSID_WINDOWS_SERVER_2008_R2 = 0x8,
  SYS_OSID_WINDOWS_7 = 0x9,
  SYS_OSID_NEWER_UNKNOWN = 0xA,
};

/* 485 */
enum $768049DC628C68F0AFF545284C646513
{
  R_REFLECTIONPROBESELECTION_OFF = 0x0,
  R_REFLECTIONPROBESELECTION_BSP = 0x1,
  R_REFLECTIONPROBESELECTION_STATICMODELS = 0x2,
  R_REFLECTIONPROBESELECTION_ENTS = 0x3,
  R_REFLECTIONPROBESELECTION_COUNT = 0x4,
};

/* 486 */
enum $7FCFFE32206AE8505A084679860B1418
{
  R_THERMAL_FADE_DISABLED = 0x0,
  R_THERMAL_FADE_TO_COLOR = 0x1,
  R_THERMAL_FADE_TO_DESATURATED = 0x2,
  R_THERMAL_FADE_COUNT = 0x3,
};

/* 487 */
enum R_HudOutlineWhen
{
  R_HUD_OUTLINE_WHEN_AFTER_COLORIZE = 0x0,
  R_HUD_OUTLINE_WHEN_AFTER_FXAA = 0x1,
  R_HUD_OUTLINE_WHEN_BEFORE_FXAA = 0x2,
  R_HUD_OUTLINE_WHEN_COUNT = 0x3,
};

/* 488 */
enum GfxShadowType
{
  GFX_SHADOW_TYPE_NONE = 0x0,
  GFX_SHADOW_TYPE_DIR = 0x1,
  GFX_SHADOW_TYPE_SPOT = 0x2,
};

/* 489 */
enum LightHasShadowMap
{
  LIGHT_HAS_SHADOWMAP = 0x0,
  LIGHT_HAS_NO_SHADOWMAP = 0x1,
};

/* 490 */
enum lightEnvLitTechTypeOffsetType
{
  OT_INVALID = 0x0,
  OT_SHADOWS_NOT_ALLOWED = 0x1,
  OT_POINT_SHADOWS_ALLOWED = 0x2,
  OT_ALL_SHADOWS_ALLOWED = 0x3,
};

/* 491 */
enum $68BA7050023167B143590A548296522E
{
  ENT_DRAW_DOBJ = 0x0,
  ENT_DRAW_BRUSH = 0x1,
  ENT_DRAW_COUNT = 0x2,
};

/* 492 */
enum $B58230AC90FE72EB2B7BEBA95B4E16F3
{
  SPU_ARRAY_ITER_READ = 0x0,
  SPU_ARRAY_ITER_COUNT = 0x1,
};

/* 493 */
enum DpvsForceBevels
{
  DPVS_DONT_FORCE_BEVELS = 0x0,
  DPVS_FORCE_BEVELS = 0x1,
};

/* 494 */
enum DpvsClipChildren
{
  DPVS_DONT_CLIP_CHILDREN = 0x0,
  DPVS_CLIP_CHILDREN = 0x1,
};

/* 495 */
enum CubeCoord
{
  CUBE_X0 = 0x0,
  CUBE_X1 = 0x1,
  CUBE_Y0 = 0x2,
  CUBE_Y1 = 0x3,
  CUBE_NUM_COORDS = 0x4,
};

/* 496 */
enum FlipEdge
{
  DONT_FLIP_EDGE = 0x0,
  FLIP_EDGE = 0x1,
};

/* 497 */
enum GfxCodeSurfUser
{
  GFX_CODE_SURF_USER_NONE = 0x0,
  GFX_CODE_SURF_USER_FX = 0x1,
  GFX_CODE_SURF_USER_COMPASS = 0x2,
  GFX_CODE_SURF_USER_FX_MARKS = 0x3,
};

/* 498 */
enum SaveType
{
  SAVE_TYPE_INTERNAL = 0x0,
  SAVE_TYPE_AUTOSAVE = 0x1,
  SAVE_TYPE_CONSOLE = 0x2,
  SAVE_TYPESCOUNT = 0x3,
};

/* 499 */
enum $2C9BA3D323E47FE15BFFB595D83EF687
{
  R_SMODEL_SURF_LIST_SHIFT = 0x1,
};

/* 500 */
enum $D27A38D8E5593D2A3F287A90AB3EF1C4
{
  R_ADD_BSP_SHADOWMAP = 0x0,
  R_ADD_BSP_LIGHTMAP = 0x1,
  R_ADD_BSP_COUNT = 0x2,
};

/* 501 */
enum $C72B7C9F3CCD9DAC8AA46776495D5444
{
  CRYPT_OK = 0x0,
  CRYPT_ERROR = 0x1,
  CRYPT_NOP = 0x2,
  CRYPT_INVALID_KEYSIZE = 0x3,
  CRYPT_INVALID_ROUNDS = 0x4,
  CRYPT_FAIL_TESTVECTOR = 0x5,
  CRYPT_BUFFER_OVERFLOW = 0x6,
  CRYPT_INVALID_PACKET = 0x7,
  CRYPT_INVALID_PRNGSIZE = 0x8,
  CRYPT_ERROR_READPRNG = 0x9,
  CRYPT_INVALID_CIPHER = 0xA,
  CRYPT_INVALID_HASH = 0xB,
  CRYPT_INVALID_PRNG = 0xC,
  CRYPT_MEM = 0xD,
  CRYPT_PK_TYPE_MISMATCH = 0xE,
  CRYPT_PK_NOT_PRIVATE = 0xF,
  CRYPT_INVALID_ARG = 0x10,
  CRYPT_FILE_NOTFOUND = 0x11,
  CRYPT_PK_INVALID_TYPE = 0x12,
  CRYPT_PK_INVALID_SYSTEM = 0x13,
  CRYPT_PK_DUP = 0x14,
  CRYPT_PK_NOT_FOUND = 0x15,
  CRYPT_PK_INVALID_SIZE = 0x16,
  CRYPT_INVALID_PRIME_SIZE = 0x17,
  CRYPT_PK_INVALID_PADDING = 0x18,
};

/* 502 */
enum challengeTest_t
{
  CT_TYPE_INVALID = 0x0,
  CT_TYPE_CRC32 = 0x1,
  CT_TYPE_MD4 = 0x2,
  CT_TYPE_SHA_TOMCRYPT = 0x3,
  CT_TYPE_8WAY = 0x4,
  CT_TYPE_CRC32_SPLIT = 0x5,
};

/* 503 */
enum trackerColumn_e
{
  TRACKER_INVALID_COLUMN = 0xFFFFFFFF,
  TRACKER_LEADERBOARD_CACHE_READ_FAILURE = 0x0,
  TRACKER_LEADERBOARD_MAX_WRITES = 0x1,
  TRACKER_LEADERBOARD_BOOSTING_CLIENT = 0x2,
  TRACKER_LEADERBOARD_BOOSTING_SERVER = 0x3,
  TRACKER_LEADERBOARD_FAILED_XUID_RECEIVER = 0x4,
  TRACKER_LEADERBOARD_FAILED_XUID_GIVER = 0x5,
  TRACKER_LEADERBOARD_OFFENSIVE_LOBBY_PLAYER = 0x6,
  TRACKER_LEADERBOARD_EXPLOITING_LOBBY_PLAYER = 0x7,
  TRACKER_LEADERBOARD_CHEATING_LOBBY_PLAYER = 0x8,
  TRACKER_LEADERBOARD_BOOSTING_LOBBY_PLAYER = 0x9,
  TRACKER_LEADERBOARD_OFFENSIVE_COOP_PLAYER = 0xA,
  TRACKER_LEADERBOARD_EXPLOITING_COOP_PLAYER = 0xB,
  TRACKER_LEADERBOARD_CHEATING_COOP_PLAYER = 0xC,
  TRACKER_LEADERBOARD_BOOSTING_COOP_PLAYER = 0xD,
  TRACKER_LEADERBOARD_RECENT_ACTIVITY = 0xE,
  TRACKER_END_COLUMNS = 0xF,
};

/* 504 */
enum DWOnlineStatus
{
  DW_LIVE_DISCONNECTED = 0x0,
  DW_LIVE_CONNECTING = 0x1,
  DW_LIVE_CONNECTED = 0x2,
};

/* 505 */
enum trackerFileCol_e
{
  TRACKER_CSV_COLNUM = 0x0,
  TRACKER_CSV_COLNAME = 0x1,
  TRACKER_CSV_COLTYPE = 0x2,
};

/* 506 */
enum trackerColType_e
{
  TRACKER_COLTYPE_AUTOTIMESTAMP = 0x0,
  TRACKER_COLTYPE_REPLACE = 0x1,
  TRACKER_COLTYPE_ADD = 0x2,
  TRACKER_COLTYPE_MAX = 0x3,
  TRACKER_COLTYPE_END = 0x3,
  TRACKER_COLTYPE_INVALID = 0xFFFFFFFF,
};

/* 507 */
enum UI_LiveDialogState
{
  LIVE_DIALOG_NONE = 0x0,
  LIVE_DIALOG_ACCEPTING_INVITE = 0x1,
  LIVE_DIALOG_GETTING_PLAYER_DATA = 0x2,
  LIVE_DIALOG_WAITING_FOR_ONLINE_SERVICES = 0x3,
  LIVE_DIALOG_STATE_COUNT = 0x4,
};

/* 508 */
enum OnlineConnectionDialogState
{
  OCDS_NONE = 0x0,
  OCDS_REQUESTED = 0x1,
  OCDS_ACTIVE = 0x2,
};

/* 509 */
enum DWLogonErrorType
{
  DW_LOGON_ERROR_TYPE_GENERIC = 0x0,
  DW_LOGON_ERROR_TYPE_VAC_BANNED = 0x1,
  DW_LOGON_ERROR_TYPE_MAX = 0x2,
};

/* 510 */
enum uiMenuCommand_t
{
  UIMENU_NONE = 0x0,
  UIMENU_MAIN = 0x1,
  UIMENU_INGAME = 0x2,
  UIMENU_PREGAME = 0x3,
  UIMENU_POSTGAME = 0x4,
  UIMENU_SCRIPT_POPUP = 0x5,
  UIMENU_SCOREBOARD = 0x6,
  UIMENU_CONTROLLERREMOVED = 0x7,
  UIMENU_MIGRATION = 0x8,
  UIMENU_MLG_SPECTATOR = 0x9,
};

/* 511 */
enum msgLocErrType_t
{
  LOCMSG_SAFE = 0x0,
  LOCMSG_NOERR = 0x1,
};

/* 512 */
enum MultipleLoginType
{
  MULTIPLE_LOGIN_NORMAL = 0x0,
  MULTIPLE_LOGIN_COD_ANYWHERE = 0x1,
};

/* 513 */
enum OnlinePlayFailureReason
{
  OPFR_NONE = 0x0,
  OPFR_XBOXLIVE_SIGNEDOUTOFLIVE = 0x1,
  OPFR_XBOXLIVE_NOGUESTACCOUNTS = 0x2,
  OPFR_MP_BANNED = 0x3,
  OPFR_MP_BUILDEXPIRED = 0x4,
  OPFR_MP_BETACLOSED = 0x5,
  OPFR_MP_AUTH_NOT_ENTITLED = 0x6,
  OPFR_MP_AUTH_BANNED = 0x7,
  OPFR_XBOXLIVE_MPNOTALLOWED = 0x8,
  OPFR_ONLINE_SERVICES = 0x9,
  OPFR_PLATFORM_USECONTROLLER1 = 0xA,
  OPFR_PLATFORM_STEAM_OFFLINE = 0xB,
  OPFR_XBOXLIVE_MUSTLOGIN = 0xC,
  OPFR_XBOXLIVE_NO_USERCONTENT = 0xD,
  OPFR_ONLINEVAULT_RESTRICTED = 0xE,
  OPFR_PLATFORM_NOGUESTACCOUNTS = 0xF,
  OPFR_PLATFORM_PSPLUS_REQUIRED = 0x10,
  OPFR_COUNT = 0x11,
};

/* 514 */
enum DSMessageType
{
  DSRequestAcquireServer = 0x0,
  DSRequestReleaseServer = 0x1,
  DSRequestStartServerGame = 0x2,
  DSRequestHostKeepAlive = 0x3,
  DSRequestClientKeepAlive = 0x4,
  DSRequestMemberIntro = 0x5,
  DSResponseAcquireServer = 0x6,
  DSResponseKeepAlive = 0x7,
  DSResponseMemberIntro = 0x8,
  DSEventServerReleased = 0x9,
  DSEventMemberIntro = 0xA,
  DSEventMemberConnected = 0xB,
  DSEventMemberJoined = 0xC,
  DSEventMemberLeft = 0xD,
  DSEventServerGameStarted = 0xE,
  DSEventServerGameEnded = 0xF,
  DSEventMigrationStarted = 0x10,
  DSEventMigrationEnded = 0x11,
  DSEventHostDisconnected = 0x12,
  DSEventFirstSnapshot = 0x13,
  DSEventData = 0x14,
  DSMessageCount = 0x15,
  DSMessageCountBits = 0x5,
};

/* 515 */
enum DSAcquireServerResult
{
  DSAcquireServerResultAcquired = 0x0,
  DSAcquireServerResultRejectedAlreadyAcquired = 0x1,
  DSAcquireServerResultRejectedVersionMismatch = 0x2,
  DSAcquireServerResultCount = 0x3,
  DSAcquireServerResultBits = 0x4,
};

/* 516 */
enum OnlineDataSyncFlags
{
  ODSF_NONE = 0x0,
  ODSF_NOT_SIGNED_IN = 0x1,
  ODSF_ONLINESERVICES = 0x2,
  ODSF_PLAYLISTS = 0x4,
  ODSF_FFOTD = 0x8,
  ODSF_TIME = 0x10,
  ODSF_MP_STATS = 0x20,
  ODSF_MOTD = 0x40,
  ODSF_CHALLENGES = 0x80,
  ODSF_SOCIALCONFIG = 0x100,
  ODSF_REGIONINFO = 0x200,
  ODSF_COD_ANYWHERE = 0x800,
  ODSF_COD_CONTENT_ENUMERATION = 0x1000,
  ODSF_IOTD = 0x4000,
  ODSF_NEWSFEED = 0x8000,
};

/* 517 */
enum CGameID::EGameIDType
{
  k_EGameIDTypeApp = 0x0,
  k_EGameIDTypeGameMod = 0x1,
  k_EGameIDTypeShortcut = 0x2,
  k_EGameIDTypeP2P = 0x3,
};

/* 518 */
enum $FD360262F56B111CF7764CDEECCB2FA3
{
  k_cchStatNameMax = 0x80,
};

/* 519 */
enum $6353DA2755805C4B6A241A1D7D258410
{
  OPERATOR = 0x0,
  OPERAND = 0x1,
};

/* 520 */
enum $CE95BDF041289D58359A37E5F909D21B
{
  k_iSteamUserCallbacks = 0x64,
};

/* 521 */
enum $7AE7D11A4A92908A95AD49D3D0A8B27B
{
  k_iSteamFriendsCallbacks = 0x12C,
};

/* 522 */
enum $5ACCA345198C743CBC537F8392B8D869
{
  k_iSteamMatchmakingCallbacks = 0x1F4,
};

/* 523 */
enum $68FBBB15FF2671A68E39B7920FBA40AF
{
  k_iSteamUtilsCallbacks = 0x2BC,
};

/* 524 */
enum $4D2F29AE67BC93B6AFDDDD4341956CF8
{
  k_iSteamAppsCallbacks = 0x3E8,
};

/* 525 */
enum $0E058EB220585A5F6AD0DD6CE8C49935
{
  k_iSteamUserStatsCallbacks = 0x44C,
};

/* 526 */
enum $FE0347FCF3B1460A2BEF2E7C3F0F7C2C
{
  k_iSteamNetworkingCallbacks = 0x4B0,
};

/* 527 */
enum $0264E91DBF7A2BBEC6E806BF204CFA1B
{
  k_iClientRemoteStorageCallbacks = 0x514,
};

/* 528 */
enum $8DF2C37A6FDD097329D0E936CB6AF929
{
  k_iClientHTTPCallbacks = 0x834,
};

/* 529 */
enum $AAC6F232B1BF6A25AA1F35F902015810
{
  k_iSteamScreenshotsCallbacks = 0x8FC,
};

/* 530 */
enum $BADCFC95CF65DB248A8C3DDAD5C8D9D8
{
  k_iClientUnifiedMessagesCallbacks = 0x9C4,
};

/* 531 */
enum ANTI_CHEAT_INFRACTION
{
  ANTI_CHEAT_INFRACTION_MAX_XP_MULT = 0x0,
  ANTI_CHEAT_INFRACTION_DOUBLE_XP_DOWN = 0x1,
  ANTI_CHEAT_INFRACTION_XP_DELTA = 0x2,
  ANTI_CHEAT_INFRACTION_CURRENT_SQUAD_POINTS = 0x3,
  ANTI_CHEAT_INFRACTION_INTEGRATE_CORRUPT_CAC = 0x4,
  ANTI_CHEAT_INFRACTION_SAVE_CORRUPT_SQUAD = 0x5,
  ANTI_CHEAT_INFRACTION_MAX = 0x6,
};

/* 532 */
enum ANTI_CHEAT_LB_COLUMNS
{
  ANTI_CHEAT_LB_COL_XP_DELTA = 0x0,
  ANTI_CHEAT_LB_COL_SQUAD_POINTS = 0x1,
  ANTI_CHEAT_LB_COL_LOADOUT = 0x2,
  ANTI_CHEAT_LB_COL_CORRUPT_CAC = 0x3,
  ANTI_CHEAT_LB_COL_MODIFIED_EXE = 0x4,
  ANTI_CHEAT_LB_COL_SAVE_CORRUPT_SQUAD = 0x5,
  ANTI_CHEAT_LB_COL_PLAYERDATA_WRITE_PROTECTION = 0x6,
};

/* 533 */
enum $E97C33773BC5ECA161015FC5C391EAAA
{
  ENUM_PLAYER_INFRACTION_LEADERBOARD_ID = 0x1389,
};

/* 534 */
enum LbTaskEnum
{
  LB_TASK_READLB = 0x0,
  LB_TASK_READLB_BYPLAYER = 0x1,
  LB_TASK_READLB_BYRANK = 0x2,
  LB_TASK_READLB_CACHE = 0x3,
  LB_TASK_UPLOADSTATS = 0x4,
  LB_TASK_READ_TEAMGAMERTAGS = 0x5,
  LB_TASK_UPLOAD_TRACKER = 0x6,
  LB_TASK_READPASTLB_BYPLAYER = 0x7,
  LB_TASK_PLAYER_SQUAD_WRITE = 0x8,
  LB_TASK_PLAYER_SQUAD_FIND_MATCH_PIVOT_READ = 0x9,
  LB_TASK_PLAYER_SQUAD_POST_MATCH_READ = 0xA,
  LB_TASK_PLAYER_SQUAD_LB_CHECK = 0xB,
  LB_TASK_PLAYER_INFRACTION_WRITE = 0xC,
  LB_TASK_COUNT = 0xD,
};

/* 535 */
enum FunctionID_t
{
  FUNCTIONID_NONE = 0x0,
  FUNCTIONID_DEBUG0 = 0x64,
  FUNCTIONID_DEBUG1 = 0x65,
  FUNCTIONID_DEBUG2 = 0x66,
  FUNCTIONID_DEBUG3 = 0x67,
  FUNCTIONID_DEBUG4 = 0x68,
  FUNCTIONID_DEBUGREFLECT = 0x6E,
  FUNCTIONID_CRC32 = 0xC8,
  FUNCTIONID_MD4 = 0xC9,
  FUNCTIONID_SHATOMCRYPT = 0xCA,
  FUNCTIONID_8WAY = 0xCB,
  FUNCTIONID_CRC32SPLIT = 0xCC,
  FUNCTIONID_DVAR = 0x12C,
  FUNCTIONID_DVARFLOAT = 0x12D,
  FUNCTIONID_ENCODEDEXPRESSION = 0x190,
};

/* 536 */
enum StatsSource
{
  STATS_ONLINE = 0x0,
  STATS_COUNT = 0x1,
};

/* 537 */
enum $483B864C2E2FBC8159CA33326516C8CA
{
  k_cchMaxRichPresenceValueLength = 0x100,
};

/* 538 */
enum FeatureBans
{
  FEATURE_BAN_LIVE_MP = 0x1,
  FEATURE_BAN_LIVE_EXTINCTION = 0x2,
  FEATURE_BAN_LEADERBOARD_WRITE_MP = 0x3,
  FEATURE_BAN_LEADERBOARD_WRITE_EXTINCTION = 0x4,
  FEATURE_BAN_MP_SPLITSCREEN = 0x5,
  FEATURE_BAN_CLAN_TAGS = 0x6,
  FEATURE_BAN_VOICE_CHAT = 0x7,
  FEATURE_BAN_PRESTIGE = 0x8,
  FEATURE_BAN_BOT_GAMES = 0x9,
  FEATURE_BAN_SEARCH_DEDICATED_SERVER = 0xA,
  FEATURE_BAN_ALLOCATE_DEDICATED_SERVER = 0xB,
  FEATURE_BAN_HOSTING = 0xC,
  FEATURE_BAN_PRESTIGE_EXTRAS = 0xD,
  FEATURE_BAN_COUNT = 0xE,
};

/* 539 */
enum EUniverse
{
  k_EUniverseInvalid = 0x0,
  k_EUniversePublic = 0x1,
  k_EUniverseBeta = 0x2,
  k_EUniverseInternal = 0x3,
  k_EUniverseDev = 0x4,
  k_EUniverseMax = 0x5,
};

/* 540 */
enum ReportOffense
{
  REPORT_BOOSTING_LOBBY_CLIENT = 0x0,
  REPORT_BOOSTING_LOBBY_SERVER = 0x1,
  REPORT_FAILED_STATS_XUID_RECEIVER = 0x2,
  REPORT_FAILED_STATS_XUID_GIVER = 0x3,
  REPORT_OFFENSIVE_LOBBY_PLAYER = 0x4,
  REPORT_EXPLOITING_LOBBY_PLAYER = 0x5,
  REPORT_CHEATING_LOBBY_PLAYER = 0x6,
  REPORT_BOOSTING_LOBBY_PLAYER = 0x7,
  REPORT_OFFENSIVE_COOP_PLAYER = 0x8,
  REPORT_EXPLOITING_COOP_PLAYER = 0x9,
  REPORT_CHEATING_COOP_PLAYER = 0xA,
  REPORT_BOOSTING_COOP_PLAYER = 0xB,
  NUM_REPORT_OFFENSES = 0xC,
};

/* 541 */
enum EAccountType
{
  k_EAccountTypeInvalid = 0x0,
  k_EAccountTypeIndividual = 0x1,
  k_EAccountTypeMultiseat = 0x2,
  k_EAccountTypeGameServer = 0x3,
  k_EAccountTypeAnonGameServer = 0x4,
  k_EAccountTypePending = 0x5,
  k_EAccountTypeContentServer = 0x6,
  k_EAccountTypeClan = 0x7,
  k_EAccountTypeChat = 0x8,
  k_EAccountTypeConsoleUser = 0x9,
  k_EAccountTypeAnonUser = 0xA,
  k_EAccountTypeMax = 0xB,
};

/* 542 */
enum EChatSteamIDInstanceFlags
{
  k_EChatAccountInstanceMask = 0xFFF,
  k_EChatInstanceFlagClan = 0x80000,
  k_EChatInstanceFlagLobby = 0x40000,
  k_EChatInstanceFlagMMSLobby = 0x20000,
};

/* 543 */
enum EMarketingMessageFlags
{
  k_EMarketingMessageFlagsNone = 0x0,
  k_EMarketingMessageFlagsHighPriority = 0x1,
  k_EMarketingMessageFlagsPlatformWindows = 0x2,
  k_EMarketingMessageFlagsPlatformMac = 0x4,
  k_EMarketingMessageFlagsPlatformLinux = 0x8,
  k_EMarketingMessageFlagsPlatformRestrictions = 0xE,
};

/* 544 */
enum $F7813D00DC2EF439805F4B10223F41B8
{
  k_ECallbackFlagsRegistered = 0x1,
  k_ECallbackFlagsGameServer = 0x2,
};

/* 545 */
enum $5399C8A0CDEB7B7978D909EC57A9F0FE
{
  DVAR_TYPE_BOOL = 0x0,
  DVAR_TYPE_FLOAT = 0x1,
  DVAR_TYPE_FLOAT_2 = 0x2,
  DVAR_TYPE_FLOAT_3 = 0x3,
  DVAR_TYPE_FLOAT_4 = 0x4,
  DVAR_TYPE_INT = 0x5,
  DVAR_TYPE_ENUM = 0x6,
  DVAR_TYPE_STRING = 0x7,
  DVAR_TYPE_COLOR = 0x8,
  DVAR_TYPE_FLOAT_3_COLOR = 0x9,
  DVAR_TYPE_COUNT = 0xA,
};

/* 546 */
enum PLAYERCARD_CACHE_TASK_STAGE
{
  PLAYERCARD_CACHE_TASK_STAGE_WAITING = 0x0,
  PLAYERCARD_CACHE_TASK_STAGE_WORKING = 0x1,
  PLAYERCARD_CACHE_TASK_STAGE_ALL_DONE = 0x2,
};

/* 547 */
enum PlayerCardCache
{
  PLAYERCARDCACHE_RANKED = 0x0,
  PLAYERCARDCACHE_COOP = 0x1,
  PLAYERCARDCACHE_COUNT = 0x2,
};

/* 548 */
enum PLAYERCARD_CACHE_SCREEN
{
  PLAYERCARD_CACHE_SCREEN_NONE = 0x0,
  PLAYERCARD_CACHE_SCREEN_FRIENDS = 0x1,
  PLAYERCARD_CACHE_SCREEN_RECENT = 0x2,
  PLAYERCARD_CACHE_SCREEN_PARTY = 0x3,
  PLAYERCARD_CACHE_SCREEN_FACEBOOK = 0x4,
  PLAYERCARD_CACHE_SCREEN_ELITE_CLAN = 0x5,
};

/* 549 */
enum ENTITLEMENTS_TASK_STAGE
{
  ENTITLEMENTS_TASK_STAGE_WAITING_TO_GET_KEY_ARCHIVE = 0x0,
  ENTITLEMENTS_TASK_STAGE_GETTING_KEY_ARCHIVE = 0x1,
  ENTITLEMENTS_TASK_STAGE_WAITING_TO_GIVE_ENTITLEMENTS = 0x2,
  ENTITLEMENTS_TASK_STAGE_ALL_DONE = 0x3,
};

/* 550 */
enum bdKeyValuePair::bdArchiveUpdateType
{
  BD_REPLACE = 0x0,
  BD_ADD = 0x1,
  BD_MAX = 0x2,
  BD_MIN = 0x3,
  BD_AND = 0x4,
  BD_OR = 0x5,
  BD_XOR = 0x6,
  BD_SUB_SAFE = 0x7,
};

/* 551 */
enum HostNameTaskStatus
{
  HNTS_PENDING = 0x0,
  HNTS_DONE = 0x1,
  HNTS_FAILED = 0x2,
};

/* 552 */
enum DWLogonStatus
{
  DW_LOGON_ERROR = 0x0,
  DW_NP_CONNECTING = 0x1,
  DW_NO_ACCOUNT_SIGNED_IN = 0x2,
  DW_DNS_NOT_RESOLVED = 0x3,
  DW_PC_STEAM_ACQUIRE_DEDICATED_LICENSE = 0x4,
  DW_PC_STEAM_ACQUIRING_DEDICATED_LICENSE = 0x5,
  DW_PC_STEAM_AUTHORIZING_DEDICATED_LICENSE = 0x6,
  DW_PC_STATIC_LICENSE = 0x7,
  DW_PC_AUTHORIZING_STATIC_LICENSE = 0x8,
  DW_LOBBY_CONNECT = 0x9,
  DW_LOBBY_CONNECTING = 0xA,
  DW_LOGON_COMPLETE = 0xB,
};

/* 553 */
enum taskCompleteResults
{
  TASK_NOTCOMPLETE = 0x0,
  TASK_COMPLETE = 0x1,
  TASK_ERROR = 0x2,
};

/* 554 */
enum TaskSubsystem
{
  TASKSUBSYSTEM_INVALID = 0x0,
  TASKSUBSYSTEM_NATIVE = 0x1,
};

/* 555 */
enum DmlState
{
  DML_STATE_WAITING_FOR_INIT = 0x0,
  DML_STATE_IDLE = 0x1,
  DML_STATE_RECORDING_IP = 0x2,
  DML_STATE_RETRIEVING_REGION = 0x3,
  DML_STATE_COMPLETE = 0x4,
  DML_STATE_ERROR = 0x5,
  DML_STATE_TEST = 0x6,
  DML_STATE_END = 0x7,
};

/* 556 */
enum DWRecordEventType
{
  DW_EVENT_UNKNOWN = 0x0,
  DW_EVENT_MATCHDATA = 0x1,
  DW_EVENT_MATCHDATA_PRIVATE = 0x2,
  DW_EVENT_MATCHDATA_RECIPE = 0x3,
  DW_EVENT_BLACKBOX = 0x4,
  DW_EVENT_MATCHMAKING_TELEMETRY = 0x5,
  DW_EVENT_DS_LOGGING = 0x6,
  DW_EVENT_NUM_EVENTS = 0x7,
};

/* 557 */
enum DWRecordStringEventType
{
  DW_STRING_EVENT_UNKNOWN = 0x0,
  DW_STRING_EVENT_LSP_LOG = 0x1,
  DW_STRING_EVENT_LSP_LOG_MATCHMAKING_DATA = 0x2,
  DW_EVENT_LOGPRESTIGE = 0x3,
  DW_EVENT_MATCH_RECORD_FINISHED = 0x4,
  DW_EVENT_UPLOAD_SP_STATS = 0x5,
  DW_STRING_EVENT_LSP_LOG_WHITELIST_SUCCESS = 0x6,
  DW_STRING_EVENT_LSP_LOG_WHITELIST_FAILURE = 0x7,
  DW_STRING_EVENT_DVAR_USAGE = 0x8,
  DW_EVENT_UPLOAD_P2P_AUTH_DATA = 0x9,
  DW_EVENT_IGS = 0xA,
  DW_EVENT_MIGRATION_FROM = 0xB,
  DW_EVENT_MIGRATION_TO = 0xC,
  DW_EVENT_HOST_NOMINATION = 0xD,
  DW_STRING_EVENT_NUM_EVENTS = 0xE,
};

/* 558 */
enum HeapRegionDirection
{
  HEAPREGION_DIR_BOTTOM_UP = 0x0,
  HEAPREGION_DIR_TOP_DOWN = 0x1,
  HEAPREGION_DIR_NUMTYPES = 0x2,
};

/* 559 */
enum HeapDirection
{
  HEAP_DIR_BOTTOM_UP = 0x1,
  HEAP_DIR_TOP_DOWN = 0xFFFFFFFF,
};

/* 560 */
enum DWNetStatus
{
  DW_NET_ERROR_START_FAILED = 0x0,
  DW_NET_ERROR_NO_LOCAL_IP = 0x1,
  DW_NET_NOT_STARTED = 0x2,
  DW_NET_STARTING_LAN = 0x3,
  DW_NET_STARTED_LAN = 0x4,
  DW_NET_STARTING_ONLINE = 0x5,
  DW_NET_STARTED_ONLINE = 0x6,
};

/* 561 */
enum DSCommandLineOptionId
{
  DS_OPT_SERVERID = 0x0,
  DS_OPT_TITLEID = 0x1,
  DS_OPT_LICENSE = 0x2,
  DS_OPT_ENV = 0x3,
  DS_OPT_AUTHADDR = 0x4,
  DS_OPT_LSGADDR = 0x5,
  DS_OPT_CLIENTPLATFORM = 0x6,
  DS_OPT_PINGSERVER = 0x7,
  DS_OPT_DCID = 0x8,
  DS_OPT_HWID = 0x9,
  DS_OPT_PARKLIST = 0xA,
  DS_OPT_NODUMP = 0xB,
  DS_OPT_XLSP_SERVERTAG = 0xC,
  DS_OPT_XLSP_SERVERPORT = 0xD,
  DS_OPT_SHIMADDR = 0xE,
  DS_OPT_SHIMPORT = 0xF,
  DS_OPT_REFLECTORADDR = 0x10,
  DS_OPT_REFLECTORPORT = 0x11,
  MAX_DS_OPTS = 0x12,
};

/* 562 */
typedef bdLobbyErrorCode bdConnection::Status;

/* 563 */
enum sessionTaskEnum
{
  TASK_COUNTERS_INCREMENT = 0x0,
  TASK_COUNTERS_GETTOTALS = 0x1,
  NUM_SESSION_TASKS = 0x2,
};

/* 564 */
enum CustomizationModelType
{
  CUSTOMIZATION_TYPE_HEAD = 0x0,
  CUSTOMIZATION_TYPE_BODY = 0x1,
  CUSTOMIZATION_TYPE_VIEWHANDS = 0x2,
  CUSTOMIZATION_TYPE_COUNT = 0x3,
};

/* 565 */
enum turret_handler
{
  TURRET_HANDLER_CLIENT = 0x0,
  TURRET_HANDLER_SERVER = 0x1,
  TURRET_HANDLER_COUNT = 0x2,
};

/* 566 */
enum TracerDrawFlags
{
  TRACER_DRAW_FLAG_NONE = 0x0,
  TRACER_DRAW_FLAG_THERMAL = 0x1,
};

/* 567 */
enum leType_t
{
  LE_MOVING_TRACER = 0x0,
};

/* 568 */
enum FxBeamType
{
  BEAMTYPE_TRACER = 0x0,
  BEAMTYPE_LASER = 0x1,
  BEAMTYPE_COUNT = 0x2,
};

/* 569 */
enum netadrtype_t
{
  NA_BOT = 0x0,
  NA_BAD = 0x1,
  NA_LOOPBACK = 0x2,
  NA_BROADCAST = 0x3,
  NA_IP = 0x4,
};

/* 570 */
enum LbTrackTypes
{
  LBTRK_TYPE_ALLTIME = 0x0,
  LBTRK_TYPE_WEEKLY = 0x1,
  LBTRK_TYPE_MONTHLY = 0x2,
  LBTRK_TYPE_PRESTIGE_ALLTIME = 0x3,
  LBTRK_TYPE_PRESTIGE_WEEKLY = 0x4,
  LBTRK_TYPE_PRESTIGE_MONTHLY = 0x5,
  LBTRK_TYPE_DAILY = 0x6,
  LBTRK_TYPE_PRESTIGE_DAILY = 0x7,
  LBTRK_TYPE_COUNT = 0x8,
};

/* 571 */
enum rankTableColumns_t
{
  RANKTABLE_RANKID = 0x0,
  RANKTABLE_RANK = 0x1,
  RANKTABLE_MINXP = 0x2,
  RANKTABLE_XPTONEXT = 0x3,
  RANKTABLE_SHORTRANK = 0x4,
  RANKTABLE_FULLRANK = 0x5,
  RANKTABLE_ICON = 0x6,
  RANKTABLE_MAXXP = 0x7,
  RANKTABLE_WEAPUNLOCK = 0x8,
  RANKTABLE_PERKUNLOCK = 0x9,
  RANKTABLE_CHALLENGE = 0xA,
  RANKTABLE_CAMO = 0xB,
  RANKTABLE_ATTACHMENT = 0xC,
  RANKTABLE_LEVEL = 0xD,
  RANKTABLE_DISPLAYLEVEL = 0xE,
  RANKTABLE_FEATUREUNLOCKED = 0xF,
  RANKTABLE_INGAMERANK = 0x10,
  RANKTABLE_UNLOCKSTRING = 0x11,
  RANKTABLE_COUNT = 0x12,
};

/* 572 */
enum LbFilter
{
  LB_FILTER_NONE = 0x0,
  LB_FILTER_FRIENDS = 0x1,
  LB_FILTER_CLAN = 0x2,
  LB_FILTER_LOBBY_MEMBERS = 0x3,
  LB_FILTER_FACEBOOK_FRIENDS = 0x4,
  LB_FILTER_COUNT = 0x5,
};

/* 573 */
enum $250064B8D41CEC521BA31ADBCD41F323
{
  OPAQUE_STRING_VOID = 0x0,
  OPAQUE_STRING_PL = 0x1,
  OPAQUE_STRING_MINUS = 0x2,
  OPAQUE_STRING_RADIUS_TYPO = 0x3,
  OPAQUE_STRING_NOTE_COLON = 0x4,
  SCR_OPAQUE_STRING__ = 0x5,
  SCR_OPAQUE_STRING__custom = 0x6,
  SCR_OPAQUE_STRING_accuracy = 0x7,
  SCR_OPAQUE_STRING_actionslot1 = 0x8,
  SCR_OPAQUE_STRING_actionslot2 = 0x9,
  SCR_OPAQUE_STRING_actionslot3 = 0xA,
  SCR_OPAQUE_STRING_actionslot4 = 0xB,
  SCR_OPAQUE_STRING_actionslot5 = 0xC,
  SCR_OPAQUE_STRING_actionslot6 = 0xD,
  SCR_OPAQUE_STRING_actionslot7 = 0xE,
  SCR_OPAQUE_STRING_activator = 0xF,
  SCR_OPAQUE_STRING_active = 0x10,
  SCR_OPAQUE_STRING_activevisionset = 0x11,
  SCR_OPAQUE_STRING_activevisionsetduration = 0x12,
  SCR_OPAQUE_STRING_agent = 0x13,
  SCR_OPAQUE_STRING_agenthealth = 0x14,
  SCR_OPAQUE_STRING_agentname = 0x15,
  SCR_OPAQUE_STRING_agentteam = 0x16,
  SCR_OPAQUE_STRING_ai_event = 0x17,
  SCR_OPAQUE_STRING_ai_sight_line_cycle_group = 0x18,
  SCR_OPAQUE_STRING_ai_sight_line_group = 0x19,
  SCR_OPAQUE_STRING_aim_highest_bone = 0x1A,
  SCR_OPAQUE_STRING_aim_vis_bone = 0x1B,
  SCR_OPAQUE_STRING_alert = 0x1C,
  SCR_OPAQUE_STRING_alertlevel = 0x1D,
  SCR_OPAQUE_STRING_alertlevelint = 0x1E,
  SCR_OPAQUE_STRING_alien = 0x1F,
  SCR_OPAQUE_STRING_alignx = 0x20,
  SCR_OPAQUE_STRING_aligny = 0x21,
  SCR_OPAQUE_STRING_all = 0x22,
  SCR_OPAQUE_STRING_allies = 0x23,
  SCR_OPAQUE_STRING_allowdeath = 0x24,
  SCR_OPAQUE_STRING_allowjump = 0x25,
  SCR_OPAQUE_STRING_allowladders = 0x26,
  SCR_OPAQUE_STRING_allowpain = 0x27,
  SCR_OPAQUE_STRING_alpha = 0x28,
  SCR_OPAQUE_STRING_altmode = 0x29,
  SCR_OPAQUE_STRING_always = 0x2A,
  SCR_OPAQUE_STRING_ambush = 0x2B,
  SCR_OPAQUE_STRING_ambush_nodes_only = 0x2C,
  SCR_OPAQUE_STRING_angle_deltas = 0x2D,
  SCR_OPAQUE_STRING_anglelerprate = 0x2E,
  SCR_OPAQUE_STRING_angles = 0x2F,
  SCR_OPAQUE_STRING_anim_angle_delta = 0x30,
  SCR_OPAQUE_STRING_anim_deltas = 0x31,
  SCR_OPAQUE_STRING_anim_pose = 0x32,
  SCR_OPAQUE_STRING_anim_will_finish = 0x33,
  SCR_OPAQUE_STRING_animscript = 0x34,
  SCR_OPAQUE_STRING_archived = 0x35,
  SCR_OPAQUE_STRING_archivetime = 0x36,
  SCR_OPAQUE_STRING_asleep = 0x37,
  SCR_OPAQUE_STRING_aspectratio = 0x38,
  SCR_OPAQUE_STRING_assists = 0x39,
  SCR_OPAQUE_STRING_attackeraccuracy = 0x3A,
  SCR_OPAQUE_STRING_attackercount = 0x3B,
  SCR_OPAQUE_STRING_auto_ai = 0x3C,
  SCR_OPAQUE_STRING_auto_change = 0x3D,
  SCR_OPAQUE_STRING_auto_nonai = 0x3E,
  SCR_OPAQUE_STRING_axis = 0x3F,
  SCR_OPAQUE_STRING_back = 0x40,
  SCR_OPAQUE_STRING_back_left = 0x41,
  SCR_OPAQUE_STRING_back_low = 0x42,
  SCR_OPAQUE_STRING_back_mid = 0x43,
  SCR_OPAQUE_STRING_back_right = 0x44,
  SCR_OPAQUE_STRING_back_up = 0x45,
  SCR_OPAQUE_STRING_bad_guys = 0x46,
  SCR_OPAQUE_STRING_bad_path = 0x47,
  SCR_OPAQUE_STRING_badplaceawareness = 0x48,
  SCR_OPAQUE_STRING_begin = 0x49,
  SCR_OPAQUE_STRING_begin_custom_anim = 0x4A,
  SCR_OPAQUE_STRING_begin_firing = 0x4B,
  SCR_OPAQUE_STRING_begin_firing_left = 0x4C,
  SCR_OPAQUE_STRING_bipods = 0x4D,
  SCR_OPAQUE_STRING_birthtime = 0x4E,
  SCR_OPAQUE_STRING_blade_hide = 0x4F,
  SCR_OPAQUE_STRING_blade_show = 0x50,
  SCR_OPAQUE_STRING_blockfriendlies = 0x51,
  SCR_OPAQUE_STRING_blurradius = 0x52,
  SCR_OPAQUE_STRING_body_animate_jnt = 0x53,
  SCR_OPAQUE_STRING_bullet_hitshield = 0x54,
  SCR_OPAQUE_STRING_bullethit = 0x55,
  SCR_OPAQUE_STRING_bulletwhizby = 0x56,
  SCR_OPAQUE_STRING_call_vote = 0x57,
  SCR_OPAQUE_STRING_cancel_location = 0x58,
  SCR_OPAQUE_STRING_canclimbladders = 0x59,
  SCR_OPAQUE_STRING_chainfallback = 0x5A,
  SCR_OPAQUE_STRING_chainnode = 0x5B,
  SCR_OPAQUE_STRING_chest = 0x5C,
  SCR_OPAQUE_STRING_chyron_message1 = 0x5D,
  SCR_OPAQUE_STRING_chyron_message2 = 0x5E,
  SCR_OPAQUE_STRING_chyron_message3 = 0x5F,
  SCR_OPAQUE_STRING_civilian = 0x60,
  SCR_OPAQUE_STRING_classname = 0x61,
  SCR_OPAQUE_STRING_clipdistance = 0x62,
  SCR_OPAQUE_STRING_code_classname = 0x63,
  SCR_OPAQUE_STRING_code_damageradius = 0x64,
  SCR_OPAQUE_STRING_code_move = 0x65,
  SCR_OPAQUE_STRING_code_move_slide = 0x66,
  SCR_OPAQUE_STRING_color = 0x67,
  SCR_OPAQUE_STRING_color_blind_toggled = 0x68,
  SCR_OPAQUE_STRING_combat = 0x69,
  SCR_OPAQUE_STRING_combatmode = 0x6A,
  SCR_OPAQUE_STRING_confirm_location = 0x6B,
  SCR_OPAQUE_STRING_constrained = 0x6C,
  SCR_OPAQUE_STRING_contact = 0x6D,
  SCR_OPAQUE_STRING_contextleanenabled = 0x6E,
  SCR_OPAQUE_STRING_count = 0x6F,
  SCR_OPAQUE_STRING_cover = 0x70,
  SCR_OPAQUE_STRING_cover_approach = 0x71,
  SCR_OPAQUE_STRING_coversearchinterval = 0x72,
  SCR_OPAQUE_STRING_criticalbulletdamagedist = 0x73,
  SCR_OPAQUE_STRING_crouch = 0x74,
  SCR_OPAQUE_STRING_current = 0x75,
  SCR_OPAQUE_STRING_custom_attach_00 = 0x76,
  SCR_OPAQUE_STRING_custom_attach_01 = 0x77,
  SCR_OPAQUE_STRING_custom_attach_02 = 0x78,
  SCR_OPAQUE_STRING_custom_attach_03 = 0x79,
  SCR_OPAQUE_STRING_custom_attach_04 = 0x7A,
  SCR_OPAQUE_STRING_custom_attach_05 = 0x7B,
  SCR_OPAQUE_STRING_custom_attach_06 = 0x7C,
  SCR_OPAQUE_STRING_custom_attach_07 = 0x7D,
  SCR_OPAQUE_STRING_custom_attach_08 = 0x7E,
  SCR_OPAQUE_STRING_custom_attach_09 = 0x7F,
  SCR_OPAQUE_STRING_custom_attach_10 = 0x80,
  SCR_OPAQUE_STRING_custom_attach_11 = 0x81,
  SCR_OPAQUE_STRING_custom_attach_12 = 0x82,
  SCR_OPAQUE_STRING_custom_attach_13 = 0x83,
  SCR_OPAQUE_STRING_custom_attach_14 = 0x84,
  SCR_OPAQUE_STRING_custom_attach_15 = 0x85,
  SCR_OPAQUE_STRING_damage = 0x86,
  SCR_OPAQUE_STRING_damage_notdone = 0x87,
  SCR_OPAQUE_STRING_damagedir = 0x88,
  SCR_OPAQUE_STRING_damagelocation = 0x89,
  SCR_OPAQUE_STRING_damagemod = 0x8A,
  SCR_OPAQUE_STRING_damagemultiplier = 0x8B,
  SCR_OPAQUE_STRING_damageshield = 0x8C,
  SCR_OPAQUE_STRING_damagetaken = 0x8D,
  SCR_OPAQUE_STRING_damageweapon = 0x8E,
  SCR_OPAQUE_STRING_damageyaw = 0x8F,
  SCR_OPAQUE_STRING_dangerreactduration = 0x90,
  SCR_OPAQUE_STRING_dead = 0x91,
  SCR_OPAQUE_STRING_death = 0x92,
  SCR_OPAQUE_STRING_deathinvulnerabletime = 0x93,
  SCR_OPAQUE_STRING_deathplant = 0x94,
  SCR_OPAQUE_STRING_deaths = 0x95,
  SCR_OPAQUE_STRING_deathshield = 0x96,
  SCR_OPAQUE_STRING_delayeddeath = 0x97,
  SCR_OPAQUE_STRING_desiredangle = 0x98,
  SCR_OPAQUE_STRING_detonate = 0x99,
  SCR_OPAQUE_STRING_diequietly = 0x9A,
  SCR_OPAQUE_STRING_direct = 0x9B,
  SCR_OPAQUE_STRING_disableplayeradsloscheck = 0x9C,
  SCR_OPAQUE_STRING_dlight = 0x9D,
  SCR_OPAQUE_STRING_dmg = 0x9E,
  SCR_OPAQUE_STRING_dodamagetoall = 0x9F,
  SCR_OPAQUE_STRING_dodangerreact = 0xA0,
  SCR_OPAQUE_STRING_doffar = 0xA1,
  SCR_OPAQUE_STRING_dofnear = 0xA2,
  SCR_OPAQUE_STRING_dog = 0xA3,
  SCR_OPAQUE_STRING_doghandler = 0xA4,
  SCR_OPAQUE_STRING_doingambush = 0xA5,
  SCR_OPAQUE_STRING_done = 0xA6,
  SCR_OPAQUE_STRING_dontavoidplayer = 0xA7,
  SCR_OPAQUE_STRING_down = 0xA8,
  SCR_OPAQUE_STRING_downaimlimit = 0xA9,
  SCR_OPAQUE_STRING_drawoncompass = 0xAA,
  SCR_OPAQUE_STRING_dropweapon = 0xAB,
  SCR_OPAQUE_STRING_empty = 0xAC,
  SCR_OPAQUE_STRING_empty_offhand = 0xAD,
  SCR_OPAQUE_STRING_enable = 0xAE,
  SCR_OPAQUE_STRING_enableshadows = 0xAF,
  SCR_OPAQUE_STRING_end_firing = 0xB0,
  SCR_OPAQUE_STRING_end_firing_left = 0xB1,
  SCR_OPAQUE_STRING_enemy = 0xB2,
  SCR_OPAQUE_STRING_enemy_sighted = 0xB3,
  SCR_OPAQUE_STRING_enemy_sighted_lost = 0xB4,
  SCR_OPAQUE_STRING_enemy_visible = 0xB5,
  SCR_OPAQUE_STRING_engagemaxdist = 0xB6,
  SCR_OPAQUE_STRING_engagemaxfalloffdist = 0xB7,
  SCR_OPAQUE_STRING_engagemindist = 0xB8,
  SCR_OPAQUE_STRING_engageminfalloffdist = 0xB9,
  SCR_OPAQUE_STRING_entity = 0xBA,
  SCR_OPAQUE_STRING_exclusive = 0xBB,
  SCR_OPAQUE_STRING_explode = 0xBC,
  SCR_OPAQUE_STRING_exposedduration = 0xBD,
  SCR_OPAQUE_STRING_extrascore0 = 0xBE,
  SCR_OPAQUE_STRING_extrascore1 = 0xBF,
  SCR_OPAQUE_STRING_playercardpatch = 0xC0,
  SCR_OPAQUE_STRING_playercardpatchbacking = 0xC1,
  SCR_OPAQUE_STRING_playercardbackground = 0xC2,
  SCR_OPAQUE_STRING_face_angle = 0xC3,
  SCR_OPAQUE_STRING_face_angle_3d = 0xC4,
  SCR_OPAQUE_STRING_face_angle_abs = 0xC5,
  SCR_OPAQUE_STRING_face_angle_rel = 0xC6,
  SCR_OPAQUE_STRING_face_current = 0xC7,
  SCR_OPAQUE_STRING_face_default = 0xC8,
  SCR_OPAQUE_STRING_face_direction = 0xC9,
  SCR_OPAQUE_STRING_face_enemy = 0xCA,
  SCR_OPAQUE_STRING_face_enemy_or_motion = 0xCB,
  SCR_OPAQUE_STRING_face_goal = 0xCC,
  SCR_OPAQUE_STRING_face_motion = 0xCD,
  SCR_OPAQUE_STRING_face_point = 0xCE,
  SCR_OPAQUE_STRING_facemotion = 0xCF,
  SCR_OPAQUE_STRING_failed = 0xD0,
  SCR_OPAQUE_STRING_falling = 0xD1,
  SCR_OPAQUE_STRING_fast_radar = 0xD2,
  SCR_OPAQUE_STRING_favoriteenemy = 0xD3,
  SCR_OPAQUE_STRING_finalaccuracy = 0xD4,
  SCR_OPAQUE_STRING_first_person = 0xD5,
  SCR_OPAQUE_STRING_fixednode = 0xD6,
  SCR_OPAQUE_STRING_fixednodesaferadius = 0xD7,
  SCR_OPAQUE_STRING_flash = 0xD8,
  SCR_OPAQUE_STRING_flashbang = 0xD9,
  SCR_OPAQUE_STRING_follow = 0xDA,
  SCR_OPAQUE_STRING_followmax = 0xDB,
  SCR_OPAQUE_STRING_followmin = 0xDC,
  SCR_OPAQUE_STRING_font = 0xDD,
  SCR_OPAQUE_STRING_fontscale = 0xDE,
  SCR_OPAQUE_STRING_footstepdetectdist = 0xDF,
  SCR_OPAQUE_STRING_footstepdetectdistsprint = 0xE0,
  SCR_OPAQUE_STRING_footstepdetectdistwalk = 0xE1,
  SCR_OPAQUE_STRING_forceragdollimmediate = 0xE2,
  SCR_OPAQUE_STRING_forcespectatorclient = 0xE3,
  SCR_OPAQUE_STRING_foregrip_off = 0xE4,
  SCR_OPAQUE_STRING_foreground = 0xE5,
  SCR_OPAQUE_STRING_forward = 0xE6,
  SCR_OPAQUE_STRING_fov = 0xE7,
  SCR_OPAQUE_STRING_fovcosine = 0xE8,
  SCR_OPAQUE_STRING_fovcosinebusy = 0xE9,
  SCR_OPAQUE_STRING_fraction = 0xEA,
  SCR_OPAQUE_STRING_frag = 0xEB,
  SCR_OPAQUE_STRING_free = 0xEC,
  SCR_OPAQUE_STRING_freecamera = 0xED,
  SCR_OPAQUE_STRING_freelook = 0xEE,
  SCR_OPAQUE_STRING_front_left = 0xEF,
  SCR_OPAQUE_STRING_front_right = 0xF0,
  SCR_OPAQUE_STRING_frontshieldanglecos = 0xF1,
  SCR_OPAQUE_STRING_game_extrainfo = 0xF2,
  SCR_OPAQUE_STRING_glass_destroyed = 0xF3,
  SCR_OPAQUE_STRING_glowalpha = 0xF4,
  SCR_OPAQUE_STRING_glowcolor = 0xF5,
  SCR_OPAQUE_STRING_goal = 0xF6,
  SCR_OPAQUE_STRING_goal_changed = 0xF7,
  SCR_OPAQUE_STRING_goal_reached = 0xF8,
  SCR_OPAQUE_STRING_goal_yaw = 0xF9,
  SCR_OPAQUE_STRING_goalheight = 0xFA,
  SCR_OPAQUE_STRING_goalpos = 0xFB,
  SCR_OPAQUE_STRING_goalradius = 0xFC,
  SCR_OPAQUE_STRING_goingtoruntopos = 0xFD,
  SCR_OPAQUE_STRING_gravity = 0xFE,
  SCR_OPAQUE_STRING_grenade = 0xFF,
  SCR_OPAQUE_STRING_grenade_fire = 0x100,
  SCR_OPAQUE_STRING_grenade_pullback = 0x101,
  SCR_OPAQUE_STRING_grenade_return_hand_tag = 0x102,
  SCR_OPAQUE_STRING_grenadeammo = 0x103,
  SCR_OPAQUE_STRING_grenadeawareness = 0x104,
  SCR_OPAQUE_STRING_grenadedanger = 0x105,
  SCR_OPAQUE_STRING_grenadeweapon = 0x106,
  SCR_OPAQUE_STRING_groundEntChanged = 0x107,
  SCR_OPAQUE_STRING_groundtype = 0x108,
  SCR_OPAQUE_STRING_gunblockedbywall = 0x109,
  SCR_OPAQUE_STRING_gunshot = 0x10A,
  SCR_OPAQUE_STRING_gunshot_teammate = 0x10B,
  SCR_OPAQUE_STRING_hasradar = 0x10C,
  SCR_OPAQUE_STRING_headicon = 0x10D,
  SCR_OPAQUE_STRING_headiconteam = 0x10E,
  SCR_OPAQUE_STRING_health = 0x10F,
  SCR_OPAQUE_STRING_height = 0x110,
  SCR_OPAQUE_STRING_showinkillcam = 0x111,
  SCR_OPAQUE_STRING_hidein3rdperson = 0x112,
  SCR_OPAQUE_STRING_hidewhendead = 0x113,
  SCR_OPAQUE_STRING_hidewhenindemo = 0x114,
  SCR_OPAQUE_STRING_enablehudlighting = 0x115,
  SCR_OPAQUE_STRING_hidewheninmenu = 0x116,
  SCR_OPAQUE_STRING_high_priority = 0x117,
  SCR_OPAQUE_STRING_highlyawareradius = 0x118,
  SCR_OPAQUE_STRING_hindlegstraceoffset = 0x119,
  SCR_OPAQUE_STRING_hit_by_missile = 0x11A,
  SCR_OPAQUE_STRING_horzalign = 0x11B,
  SCR_OPAQUE_STRING_host_sucks_end_game = 0x11C,
  SCR_OPAQUE_STRING_human = 0x11D,
  SCR_OPAQUE_STRING_ignoreall = 0x11E,
  SCR_OPAQUE_STRING_ignoreclosefoliage = 0x11F,
  SCR_OPAQUE_STRING_ignoreexplosionevents = 0x120,
  SCR_OPAQUE_STRING_ignoreforfixednodesafecheck = 0x121,
  SCR_OPAQUE_STRING_ignoreme = 0x122,
  SCR_OPAQUE_STRING_ignorerandombulletdamage = 0x123,
  SCR_OPAQUE_STRING_ignoresuppression = 0x124,
  SCR_OPAQUE_STRING_ignoretriggers = 0x125,
  SCR_OPAQUE_STRING_infinite_energy = 0x126,
  SCR_OPAQUE_STRING_info_notnull = 0x127,
  SCR_OPAQUE_STRING_info_player_start = 0x128,
  SCR_OPAQUE_STRING_insolid = 0x129,
  SCR_OPAQUE_STRING_intermission = 0x12A,
  SCR_OPAQUE_STRING_interval = 0x12B,
  SCR_OPAQUE_STRING_invisible = 0x12C,
  SCR_OPAQUE_STRING_ironsight_off = 0x12D,
  SCR_OPAQUE_STRING_ironsight_on = 0x12E,
  SCR_OPAQUE_STRING_isradarblocked = 0x12F,
  SCR_OPAQUE_STRING_item = 0x130,
  SCR_OPAQUE_STRING_j_eyeball_le = 0x131,
  SCR_OPAQUE_STRING_j_eyeball_ri = 0x132,
  SCR_OPAQUE_STRING_j_head = 0x133,
  SCR_OPAQUE_STRING_j_left_elbow = 0x134,
  SCR_OPAQUE_STRING_j_left_hand = 0x135,
  SCR_OPAQUE_STRING_j_left_shoulder = 0x136,
  SCR_OPAQUE_STRING_j_mainroot = 0x137,
  SCR_OPAQUE_STRING_j_neck = 0x138,
  SCR_OPAQUE_STRING_j_spine4 = 0x139,
  SCR_OPAQUE_STRING_j_spinelower = 0x13A,
  SCR_OPAQUE_STRING_j_spineupper = 0x13B,
  SCR_OPAQUE_STRING_jumpcost = 0x13C,
  SCR_OPAQUE_STRING_jumping = 0x13D,
  SCR_OPAQUE_STRING_keepclaimednode = 0x13E,
  SCR_OPAQUE_STRING_keepclaimednodeifvalid = 0x13F,
  SCR_OPAQUE_STRING_keepnodeduringscriptedanim = 0x140,
  SCR_OPAQUE_STRING_key1 = 0x141,
  SCR_OPAQUE_STRING_key2 = 0x142,
  SCR_OPAQUE_STRING_killanimscript = 0x143,
  SCR_OPAQUE_STRING_killcamentity = 0x144,
  SCR_OPAQUE_STRING_killcamentitylookat = 0x145,
  SCR_OPAQUE_STRING_kills = 0x146,
  SCR_OPAQUE_STRING_known_event = 0x147,
  SCR_OPAQUE_STRING_label = 0x148,
  SCR_OPAQUE_STRING_ladder_down = 0x149,
  SCR_OPAQUE_STRING_ladder_up = 0x14A,
  SCR_OPAQUE_STRING_land = 0x14B,
  SCR_OPAQUE_STRING_lastattacker = 0x14C,
  SCR_OPAQUE_STRING_lastenemysightpos = 0x14D,
  SCR_OPAQUE_STRING_laststand = 0x14E,
  SCR_OPAQUE_STRING_leanamount = 0x14F,
  SCR_OPAQUE_STRING_ledge = 0x150,
  SCR_OPAQUE_STRING_left = 0x151,
  SCR_OPAQUE_STRING_leftaimlimit = 0x152,
  SCR_OPAQUE_STRING_light = 0x153,
  SCR_OPAQUE_STRING_lockorientation = 0x154,
  SCR_OPAQUE_STRING_lod = 0x155,
  SCR_OPAQUE_STRING_look = 0x156,
  SCR_OPAQUE_STRING_lookahead = 0x157,
  SCR_OPAQUE_STRING_lookaheaddir = 0x158,
  SCR_OPAQUE_STRING_lookaheaddist = 0x159,
  SCR_OPAQUE_STRING_lookaheadhitsstairs = 0x15A,
  SCR_OPAQUE_STRING_lookforward = 0x15B,
  SCR_OPAQUE_STRING_lookright = 0x15C,
  SCR_OPAQUE_STRING_looktarget = 0x15D,
  SCR_OPAQUE_STRING_lookup = 0x15E,
  SCR_OPAQUE_STRING_low_priority = 0x15F,
  SCR_OPAQUE_STRING_lowresbackground = 0x160,
  SCR_OPAQUE_STRING_luinotifyserver = 0x161,
  SCR_OPAQUE_STRING_mag_eject = 0x162,
  SCR_OPAQUE_STRING_mag_eject_left = 0x163,
  SCR_OPAQUE_STRING_manual = 0x164,
  SCR_OPAQUE_STRING_manual_ai = 0x165,
  SCR_OPAQUE_STRING_manual_change = 0x166,
  SCR_OPAQUE_STRING_max_time = 0x167,
  SCR_OPAQUE_STRING_maxfaceenemydist = 0x168,
  SCR_OPAQUE_STRING_maxhealth = 0x169,
  SCR_OPAQUE_STRING_maxsightdistsqrd = 0x16A,
  SCR_OPAQUE_STRING_maxvisibledist = 0x16B,
  SCR_OPAQUE_STRING_meleeattackdist = 0x16C,
  SCR_OPAQUE_STRING_menuresponse = 0x16D,
  SCR_OPAQUE_STRING_middle_left = 0x16E,
  SCR_OPAQUE_STRING_middle_right = 0x16F,
  SCR_OPAQUE_STRING_min_energy = 0x170,
  SCR_OPAQUE_STRING_min_time = 0x171,
  SCR_OPAQUE_STRING_minpaindamage = 0x172,
  SCR_OPAQUE_STRING_minusedistsq = 0x173,
  SCR_OPAQUE_STRING_missile_fire = 0x174,
  SCR_OPAQUE_STRING_missile_stuck = 0x175,
  SCR_OPAQUE_STRING_mod_crush = 0x176,
  SCR_OPAQUE_STRING_mod_explosive = 0x177,
  SCR_OPAQUE_STRING_mod_explosive_bullet = 0x178,
  SCR_OPAQUE_STRING_mod_falling = 0x179,
  SCR_OPAQUE_STRING_mod_grenade = 0x17A,
  SCR_OPAQUE_STRING_mod_grenade_splash = 0x17B,
  SCR_OPAQUE_STRING_mod_head_shot = 0x17C,
  SCR_OPAQUE_STRING_mod_impact = 0x17D,
  SCR_OPAQUE_STRING_mod_melee = 0x17E,
  SCR_OPAQUE_STRING_mod_melee_alien = 0x17F,
  SCR_OPAQUE_STRING_mod_melee_dog = 0x180,
  SCR_OPAQUE_STRING_mod_pistol_bullet = 0x181,
  SCR_OPAQUE_STRING_mod_projectile = 0x182,
  SCR_OPAQUE_STRING_mod_projectile_splash = 0x183,
  SCR_OPAQUE_STRING_mod_rifle_bullet = 0x184,
  SCR_OPAQUE_STRING_mod_suicide = 0x185,
  SCR_OPAQUE_STRING_mod_trigger_hurt = 0x186,
  SCR_OPAQUE_STRING_mod_unknown = 0x187,
  SCR_OPAQUE_STRING_model = 0x188,
  SCR_OPAQUE_STRING_motiontrackerenabled = 0x189,
  SCR_OPAQUE_STRING_movedone = 0x18A,
  SCR_OPAQUE_STRING_movemode = 0x18B,
  SCR_OPAQUE_STRING_name = 0x18C,
  SCR_OPAQUE_STRING_near_goal = 0x18D,
  SCR_OPAQUE_STRING_nearz = 0x18E,
  SCR_OPAQUE_STRING_neutral = 0x18F,
  SCR_OPAQUE_STRING_never = 0x190,
  SCR_OPAQUE_STRING_newenemyreactiondistsq = 0x191,
  SCR_OPAQUE_STRING_night_vision_off = 0x192,
  SCR_OPAQUE_STRING_night_vision_on = 0x193,
  SCR_OPAQUE_STRING_no_cover = 0x194,
  SCR_OPAQUE_STRING_no_gravity = 0x195,
  SCR_OPAQUE_STRING_noattackeraccuracymod = 0x196,
  SCR_OPAQUE_STRING_noclip = 0x197,
  SCR_OPAQUE_STRING_node = 0x198,
  SCR_OPAQUE_STRING_node_not_safe = 0x199,
  SCR_OPAQUE_STRING_node_out_of_range = 0x19A,
  SCR_OPAQUE_STRING_node_relinquished = 0x19B,
  SCR_OPAQUE_STRING_node_taken = 0x19C,
  SCR_OPAQUE_STRING_nodeoffsetpos = 0x19D,
  SCR_OPAQUE_STRING_nododgemove = 0x19E,
  SCR_OPAQUE_STRING_nogravity = 0x19F,
  SCR_OPAQUE_STRING_nogrenadereturnthrow = 0x1A0,
  SCR_OPAQUE_STRING_noncombat = 0x1A1,
  SCR_OPAQUE_STRING_none = 0x1A2,
  SCR_OPAQUE_STRING_nophysics = 0x1A3,
  SCR_OPAQUE_STRING_normal = 0x1A4,
  SCR_OPAQUE_STRING_normal_radar = 0x1A5,
  SCR_OPAQUE_STRING_notinsolid = 0x1A6,
  SCR_OPAQUE_STRING_obstacle = 0x1A7,
  SCR_OPAQUE_STRING_offhand = 0x1A8,
  SCR_OPAQUE_STRING_offhand_end = 0x1A9,
  SCR_OPAQUE_STRING_only_sky = 0x1AA,
  SCR_OPAQUE_STRING_onlygoodnearestnodes = 0x1AB,
  SCR_OPAQUE_STRING_oriented = 0x1AC,
  SCR_OPAQUE_STRING_orientto_complete = 0x1AD,
  SCR_OPAQUE_STRING_origin = 0x1AE,
  SCR_OPAQUE_STRING_other = 0x1AF,
  SCR_OPAQUE_STRING_over = 0x1B0,
  SCR_OPAQUE_STRING_owner = 0x1B1,
  SCR_OPAQUE_STRING_pacifist = 0x1B2,
  SCR_OPAQUE_STRING_pacifistwait = 0x1B3,
  SCR_OPAQUE_STRING_pain = 0x1B4,
  SCR_OPAQUE_STRING_parentindex = 0x1B5,
  SCR_OPAQUE_STRING_parentname = 0x1B6,
  SCR_OPAQUE_STRING_path_blocked = 0x1B7,
  SCR_OPAQUE_STRING_path_changed = 0x1B8,
  SCR_OPAQUE_STRING_path_dir_change = 0x1B9,
  SCR_OPAQUE_STRING_path_enemy = 0x1BA,
  SCR_OPAQUE_STRING_path_need_dodge = 0x1BB,
  SCR_OPAQUE_STRING_path_set = 0x1BC,
  SCR_OPAQUE_STRING_pathenemyfightdist = 0x1BD,
  SCR_OPAQUE_STRING_pathenemylookahead = 0x1BE,
  SCR_OPAQUE_STRING_pathgoalpos = 0x1BF,
  SCR_OPAQUE_STRING_pathrandompercent = 0x1C0,
  SCR_OPAQUE_STRING_pelvis = 0x1C1,
  SCR_OPAQUE_STRING_pers = 0x1C2,
  SCR_OPAQUE_STRING_physics_finished = 0x1C3,
  SCR_OPAQUE_STRING_pickup = 0x1C4,
  SCR_OPAQUE_STRING_pistol = 0x1C5,
  SCR_OPAQUE_STRING_pitchamount = 0x1C6,
  SCR_OPAQUE_STRING_plane_waypoint = 0x1C7,
  SCR_OPAQUE_STRING_player = 0x1C8,
  SCR_OPAQUE_STRING_player_pushed = 0x1C9,
  SCR_OPAQUE_STRING_playername = 0x1CA,
  SCR_OPAQUE_STRING_playing = 0x1CB,
  SCR_OPAQUE_STRING_position = 0x1CC,
  SCR_OPAQUE_STRING_predicted_projectile_impact = 0x1CD,
  SCR_OPAQUE_STRING_prevanimdelta = 0x1CE,
  SCR_OPAQUE_STRING_prevnode = 0x1CF,
  SCR_OPAQUE_STRING_prevscript = 0x1D0,
  SCR_OPAQUE_STRING_primary = 0x1D1,
  SCR_OPAQUE_STRING_primaryoffhand = 0x1D2,
  SCR_OPAQUE_STRING_projectile_impact = 0x1D3,
  SCR_OPAQUE_STRING_prone = 0x1D4,
  SCR_OPAQUE_STRING_proneok = 0x1D5,
  SCR_OPAQUE_STRING_providecoveringfire = 0x1D6,
  SCR_OPAQUE_STRING_psoffsettime = 0x1D7,
  SCR_OPAQUE_STRING_pushable = 0x1D8,
  SCR_OPAQUE_STRING_radarmode = 0x1D9,
  SCR_OPAQUE_STRING_radarshowenemydirection = 0x1DA,
  SCR_OPAQUE_STRING_radarstrength = 0x1DB,
  SCR_OPAQUE_STRING_radius = 0x1DC,
  SCR_OPAQUE_STRING_ragdoll_early_result = 0x1DD,
  SCR_OPAQUE_STRING_reached_end_node = 0x1DE,
  SCR_OPAQUE_STRING_reached_wait_node = 0x1DF,
  SCR_OPAQUE_STRING_reached_wait_speed = 0x1E0,
  SCR_OPAQUE_STRING_reactiontargetpos = 0x1E1,
  SCR_OPAQUE_STRING_receiver = 0x1E2,
  SCR_OPAQUE_STRING_relativedir = 0x1E3,
  SCR_OPAQUE_STRING_reload = 0x1E4,
  SCR_OPAQUE_STRING_reload_start = 0x1E5,
  SCR_OPAQUE_STRING_rendertotexture = 0x1E6,
  SCR_OPAQUE_STRING_requestarrivalnotify = 0x1E7,
  SCR_OPAQUE_STRING_result = 0x1E8,
  SCR_OPAQUE_STRING_return_pitch = 0x1E9,
  SCR_OPAQUE_STRING_reverse = 0x1EA,
  SCR_OPAQUE_STRING_right = 0x1EB,
  SCR_OPAQUE_STRING_rightaimlimit = 0x1EC,
  SCR_OPAQUE_STRING_riotshield_damaged = 0x1ED,
  SCR_OPAQUE_STRING_rocket = 0x1EE,
  SCR_OPAQUE_STRING_rotatedone = 0x1EF,
  SCR_OPAQUE_STRING_run = 0x1F0,
  SCR_OPAQUE_STRING_runcost = 0x1F1,
  SCR_OPAQUE_STRING_runto_arrived = 0x1F2,
  SCR_OPAQUE_STRING_safetochangescript = 0x1F3,
  SCR_OPAQUE_STRING_scavenger = 0x1F4,
  SCR_OPAQUE_STRING_score = 0x1F5,
  SCR_OPAQUE_STRING_script = 0x1F6,
  SCR_OPAQUE_STRING_script_brushmodel = 0x1F7,
  SCR_OPAQUE_STRING_script_linkname = 0x1F8,
  SCR_OPAQUE_STRING_script_model = 0x1F9,
  SCR_OPAQUE_STRING_script_noteworthy = 0x1FA,
  SCR_OPAQUE_STRING_script_origin = 0x1FB,
  SCR_OPAQUE_STRING_script_parent = 0x1FC,
  SCR_OPAQUE_STRING_script_parentname = 0x1FD,
  SCR_OPAQUE_STRING_script_pushable = 0x1FE,
  SCR_OPAQUE_STRING_script_vehicle = 0x1FF,
  SCR_OPAQUE_STRING_script_vehicle_collision = 0x200,
  SCR_OPAQUE_STRING_script_vehicle_collmap = 0x201,
  SCR_OPAQUE_STRING_script_vehicle_corpse = 0x202,
  SCR_OPAQUE_STRING_scriptable = 0x203,
  SCR_OPAQUE_STRING_scriptedarrivalent = 0x204,
  SCR_OPAQUE_STRING_scope_center = 0x205,
  SCR_OPAQUE_STRING_scope_top = 0x206,
  SCR_OPAQUE_STRING_scope_cap = 0x207,
  SCR_OPAQUE_STRING_search_end = 0x208,
  SCR_OPAQUE_STRING_secondaryoffhand = 0x209,
  SCR_OPAQUE_STRING_sentry = 0x20A,
  SCR_OPAQUE_STRING_sentry_offline = 0x20B,
  SCR_OPAQUE_STRING_sessionstate = 0x20C,
  SCR_OPAQUE_STRING_sessionteam = 0x20D,
  SCR_OPAQUE_STRING_sharpturnnotifydist = 0x20E,
  SCR_OPAQUE_STRING_sightlatency = 0x20F,
  SCR_OPAQUE_STRING_silenced_shot = 0x210,
  SCR_OPAQUE_STRING_slidevelocity = 0x211,
  SCR_OPAQUE_STRING_slowmo_active = 0x212,
  SCR_OPAQUE_STRING_slowmo_passive = 0x213,
  SCR_OPAQUE_STRING_smoke = 0x214,
  SCR_OPAQUE_STRING_snd_channelvolprio_holdbreath = 0x215,
  SCR_OPAQUE_STRING_snd_channelvolprio_pain = 0x216,
  SCR_OPAQUE_STRING_snd_channelvolprio_shellshock = 0x217,
  SCR_OPAQUE_STRING_snd_enveffectsprio_level = 0x218,
  SCR_OPAQUE_STRING_snd_enveffectsprio_shellshock = 0x219,
  SCR_OPAQUE_STRING_sort = 0x21A,
  SCR_OPAQUE_STRING_sound_blend = 0x21B,
  SCR_OPAQUE_STRING_space = 0x21C,
  SCR_OPAQUE_STRING_spawned = 0x21D,
  SCR_OPAQUE_STRING_spawnflags = 0x21E,
  SCR_OPAQUE_STRING_spectatekillcam = 0x21F,
  SCR_OPAQUE_STRING_spectating_cycle = 0x220,
  SCR_OPAQUE_STRING_spectator = 0x221,
  SCR_OPAQUE_STRING_speed = 0x222,
  SCR_OPAQUE_STRING_splatter = 0x223,
  SCR_OPAQUE_STRING_sprint_begin = 0x224,
  SCR_OPAQUE_STRING_sprint_end = 0x225,
  SCR_OPAQUE_STRING_stairsstate = 0x226,
  SCR_OPAQUE_STRING_stand = 0x227,
  SCR_OPAQUE_STRING_start_blend = 0x228,
  SCR_OPAQUE_STRING_start_move = 0x229,
  SCR_OPAQUE_STRING_start_ragdoll = 0x22A,
  SCR_OPAQUE_STRING_statelocked = 0x22B,
  SCR_OPAQUE_STRING_statusicon = 0x22C,
  SCR_OPAQUE_STRING_stop = 0x22D,
  SCR_OPAQUE_STRING_stop_soon = 0x22E,
  SCR_OPAQUE_STRING_stopanimdistsq = 0x22F,
  SCR_OPAQUE_STRING_stopsoonnotifydist = 0x230,
  SCR_OPAQUE_STRING_suppression = 0x231,
  SCR_OPAQUE_STRING_suppression_end = 0x232,
  SCR_OPAQUE_STRING_suppressionduration = 0x233,
  SCR_OPAQUE_STRING_suppressionmeter = 0x234,
  SCR_OPAQUE_STRING_suppressionstarttime = 0x235,
  SCR_OPAQUE_STRING_suppressionwait = 0x236,
  SCR_OPAQUE_STRING_surfacetype = 0x237,
  SCR_OPAQUE_STRING_surprisedbymedistsq = 0x238,
  SCR_OPAQUE_STRING_swimmer = 0x239,
  SCR_OPAQUE_STRING_syncedmeleetarget = 0x23A,
  SCR_OPAQUE_STRING_tag = 0x23B,
  SCR_OPAQUE_STRING_tag_aim = 0x23C,
  SCR_OPAQUE_STRING_tag_aim_animated = 0x23D,
  SCR_OPAQUE_STRING_tag_aim_pivot = 0x23E,
  SCR_OPAQUE_STRING_tag_barrel = 0x23F,
  SCR_OPAQUE_STRING_tag_blade_off = 0x240,
  SCR_OPAQUE_STRING_tag_body = 0x241,
  SCR_OPAQUE_STRING_tag_brass = 0x242,
  SCR_OPAQUE_STRING_tag_butt = 0x243,
  SCR_OPAQUE_STRING_tag_camera = 0x244,
  SCR_OPAQUE_STRING_tag_clip = 0x245,
  SCR_OPAQUE_STRING_tag_detach = 0x246,
  SCR_OPAQUE_STRING_tag_engine_left = 0x247,
  SCR_OPAQUE_STRING_tag_engine_right = 0x248,
  SCR_OPAQUE_STRING_tag_eotech_reticle = 0x249,
  SCR_OPAQUE_STRING_tag_eye = 0x24A,
  SCR_OPAQUE_STRING_tag_flash = 0x24B,
  SCR_OPAQUE_STRING_tag_flash_11 = 0x24C,
  SCR_OPAQUE_STRING_tag_flash_2 = 0x24D,
  SCR_OPAQUE_STRING_tag_flash_22 = 0x24E,
  SCR_OPAQUE_STRING_tag_flash_3 = 0x24F,
  SCR_OPAQUE_STRING_tag_flash_silenced = 0x250,
  SCR_OPAQUE_STRING_tag_fx = 0x251,
  SCR_OPAQUE_STRING_tag_gasmask = 0x252,
  SCR_OPAQUE_STRING_tag_gasmask2 = 0x253,
  SCR_OPAQUE_STRING_tag_ik_loc_le = 0x254,
  SCR_OPAQUE_STRING_tag_ik_loc_le_foregrip = 0x255,
  SCR_OPAQUE_STRING_tag_ik_loc_le_launcher = 0x256,
  SCR_OPAQUE_STRING_tag_ik_loc_le_shotgun = 0x257,
  SCR_OPAQUE_STRING_tag_ik_target = 0x258,
  SCR_OPAQUE_STRING_tag_inhand = 0x259,
  SCR_OPAQUE_STRING_tag_knife_fx = 0x25A,
  SCR_OPAQUE_STRING_tag_laser = 0x25B,
  SCR_OPAQUE_STRING_tag_launcher = 0x25C,
  SCR_OPAQUE_STRING_tag_magnifier_eotech_reticle = 0x25D,
  SCR_OPAQUE_STRING_tag_motion_tracker_bl = 0x25E,
  SCR_OPAQUE_STRING_tag_motion_tracker_br = 0x25F,
  SCR_OPAQUE_STRING_tag_motion_tracker_fx = 0x260,
  SCR_OPAQUE_STRING_tag_motion_tracker_tl = 0x261,
  SCR_OPAQUE_STRING_tag_origin = 0x262,
  SCR_OPAQUE_STRING_tag_player = 0x263,
  SCR_OPAQUE_STRING_tag_popout = 0x264,
  SCR_OPAQUE_STRING_tag_reticle_acog = 0x265,
  SCR_OPAQUE_STRING_tag_reticle_hamr = 0x266,
  SCR_OPAQUE_STRING_tag_reticle_on = 0x267,
  SCR_OPAQUE_STRING_tag_reticle_red_dot = 0x268,
  SCR_OPAQUE_STRING_tag_reticle_reflex = 0x269,
  SCR_OPAQUE_STRING_tag_reticle_tavor_scope = 0x26A,
  SCR_OPAQUE_STRING_tag_reticle_thermal_scope = 0x26B,
  SCR_OPAQUE_STRING_tag_shield_back = 0x26C,
  SCR_OPAQUE_STRING_tag_shotgun = 0x26D,
  SCR_OPAQUE_STRING_tag_show_alt = 0x26E,
  SCR_OPAQUE_STRING_tag_stowed_back = 0x26F,
  SCR_OPAQUE_STRING_tag_stowed_hip_rear = 0x270,
  SCR_OPAQUE_STRING_tag_sync = 0x271,
  SCR_OPAQUE_STRING_tag_tip = 0x272,
  SCR_OPAQUE_STRING_tag_turret = 0x273,
  SCR_OPAQUE_STRING_tag_turret_base = 0x274,
  SCR_OPAQUE_STRING_tag_weapon = 0x275,
  SCR_OPAQUE_STRING_tag_weapon_chest = 0x276,
  SCR_OPAQUE_STRING_tag_weapon_left = 0x277,
  SCR_OPAQUE_STRING_tag_weapon_right = 0x278,
  SCR_OPAQUE_STRING_tag_wheel_back_left = 0x279,
  SCR_OPAQUE_STRING_tag_wheel_back_right = 0x27A,
  SCR_OPAQUE_STRING_tag_wheel_front_left = 0x27B,
  SCR_OPAQUE_STRING_tag_wheel_front_right = 0x27C,
  SCR_OPAQUE_STRING_tag_wheel_middle_left = 0x27D,
  SCR_OPAQUE_STRING_tag_wheel_middle_right = 0x27E,
  SCR_OPAQUE_STRING_takedamage = 0x27F,
  SCR_OPAQUE_STRING_target = 0x280,
  SCR_OPAQUE_STRING_target_script_trigger = 0x281,
  SCR_OPAQUE_STRING_targetname = 0x282,
  SCR_OPAQUE_STRING_team = 0x283,
  SCR_OPAQUE_STRING_team3 = 0x284,
  SCR_OPAQUE_STRING_teammode_axisallies = 0x285,
  SCR_OPAQUE_STRING_teammode_ffa = 0x286,
  SCR_OPAQUE_STRING_teammovewaittime = 0x287,
  SCR_OPAQUE_STRING_thermal = 0x288,
  SCR_OPAQUE_STRING_thermalbodymaterial = 0x289,
  SCR_OPAQUE_STRING_third_person = 0x28A,
  SCR_OPAQUE_STRING_threatbias = 0x28B,
  SCR_OPAQUE_STRING_threatbiasgroup = 0x28C,
  SCR_OPAQUE_STRING_throwingknife = 0x28D,
  SCR_OPAQUE_STRING_top = 0x28E,
  SCR_OPAQUE_STRING_touch = 0x28F,
  SCR_OPAQUE_STRING_touching_platform = 0x290,
  SCR_OPAQUE_STRING_transients_synced = 0x291,
  SCR_OPAQUE_STRING_traverse_complete = 0x292,
  SCR_OPAQUE_STRING_traverse_soon = 0x293,
  SCR_OPAQUE_STRING_traversecost = 0x294,
  SCR_OPAQUE_STRING_traversesoonnotifydist = 0x295,
  SCR_OPAQUE_STRING_trigger = 0x296,
  SCR_OPAQUE_STRING_trigger_damage = 0x297,
  SCR_OPAQUE_STRING_trigger_use = 0x298,
  SCR_OPAQUE_STRING_trigger_use_touch = 0x299,
  SCR_OPAQUE_STRING_truck_cam = 0x29A,
  SCR_OPAQUE_STRING_turnrate = 0x29B,
  SCR_OPAQUE_STRING_turret_deactivate = 0x29C,
  SCR_OPAQUE_STRING_turret_fire = 0x29D,
  SCR_OPAQUE_STRING_turret_no_vis = 0x29E,
  SCR_OPAQUE_STRING_turret_not_on_target = 0x29F,
  SCR_OPAQUE_STRING_turret_on_target = 0x2A0,
  SCR_OPAQUE_STRING_turret_on_vistarget = 0x2A1,
  SCR_OPAQUE_STRING_turret_pitch_clamped = 0x2A2,
  SCR_OPAQUE_STRING_turret_rotate_stopped = 0x2A3,
  SCR_OPAQUE_STRING_turret_yaw_clamped = 0x2A4,
  SCR_OPAQUE_STRING_turretinvulnerability = 0x2A5,
  SCR_OPAQUE_STRING_turretownerchange = 0x2A6,
  SCR_OPAQUE_STRING_turretstatechange = 0x2A7,
  SCR_OPAQUE_STRING_type = 0x2A8,
  SCR_OPAQUE_STRING_unresolved_collision = 0x2A9,
  SCR_OPAQUE_STRING_up = 0x2AA,
  SCR_OPAQUE_STRING_upaimlimit = 0x2AB,
  SCR_OPAQUE_STRING_useable = 0x2AC,
  SCR_OPAQUE_STRING_usechokepoints = 0x2AD,
  SCR_OPAQUE_STRING_usecombatscriptatcover = 0x2AE,
  SCR_OPAQUE_STRING_veh_boatbounce = 0x2AF,
  SCR_OPAQUE_STRING_veh_brake = 0x2B0,
  SCR_OPAQUE_STRING_veh_collision = 0x2B1,
  SCR_OPAQUE_STRING_veh_jolt = 0x2B2,
  SCR_OPAQUE_STRING_veh_landed = 0x2B3,
  SCR_OPAQUE_STRING_veh_leftground = 0x2B4,
  SCR_OPAQUE_STRING_veh_pathdir = 0x2B5,
  SCR_OPAQUE_STRING_veh_pathspeed = 0x2B6,
  SCR_OPAQUE_STRING_veh_pathtype = 0x2B7,
  SCR_OPAQUE_STRING_veh_predictedcollision = 0x2B8,
  SCR_OPAQUE_STRING_veh_speed = 0x2B9,
  SCR_OPAQUE_STRING_veh_throttle = 0x2BA,
  SCR_OPAQUE_STRING_veh_topspeed = 0x2BB,
  SCR_OPAQUE_STRING_veh_transmission = 0x2BC,
  SCR_OPAQUE_STRING_vehicle_dismount = 0x2BD,
  SCR_OPAQUE_STRING_vehicle_mount = 0x2BE,
  SCR_OPAQUE_STRING_velocity = 0x2BF,
  SCR_OPAQUE_STRING_vertalign = 0x2C0,
  SCR_OPAQUE_STRING_visionsetmissilecam = 0x2C1,
  SCR_OPAQUE_STRING_visionsetmissilecamduration = 0x2C2,
  SCR_OPAQUE_STRING_visionsetnaked = 0x2C3,
  SCR_OPAQUE_STRING_visionsetnakedduration = 0x2C4,
  SCR_OPAQUE_STRING_visionsetnight = 0x2C5,
  SCR_OPAQUE_STRING_visionsetnightduration = 0x2C6,
  SCR_OPAQUE_STRING_visionsetpain = 0x2C7,
  SCR_OPAQUE_STRING_visionsetpainduration = 0x2C8,
  SCR_OPAQUE_STRING_visionsetthermal = 0x2C9,
  SCR_OPAQUE_STRING_visionsetthermalduration = 0x2CA,
  SCR_OPAQUE_STRING_vote = 0x2CB,
  SCR_OPAQUE_STRING_walk = 0x2CC,
  SCR_OPAQUE_STRING_walkdist = 0x2CD,
  SCR_OPAQUE_STRING_walkdistfacingmotion = 0x2CE,
  SCR_OPAQUE_STRING_waypoint_reached = 0x2CF,
  SCR_OPAQUE_STRING_weapon = 0x2D0,
  SCR_OPAQUE_STRING_weapon_change = 0x2D1,
  SCR_OPAQUE_STRING_weapon_dropped = 0x2D2,
  SCR_OPAQUE_STRING_weapon_fired = 0x2D3,
  SCR_OPAQUE_STRING_weapon_switch_started = 0x2D4,
  SCR_OPAQUE_STRING_weapon_taken = 0x2D5,
  SCR_OPAQUE_STRING_weaponchange = 0x2D6,
  SCR_OPAQUE_STRING_weaponrail_on = 0x2D7,
  SCR_OPAQUE_STRING_width = 0x2D8,
  SCR_OPAQUE_STRING_world = 0x2D9,
  SCR_OPAQUE_STRING_worldspawn = 0x2DA,
  SCR_OPAQUE_STRING_x = 0x2DB,
  SCR_OPAQUE_STRING_y = 0x2DC,
  SCR_OPAQUE_STRING_z = 0x2DD,
  SCR_OPAQUE_STRING_zonly_physics = 0x2DE,
  SCR_OPAQUE_STRING_accumulate = 0x2DF,
  SCR_OPAQUE_STRING_allowprone = 0x2E0,
  SCR_OPAQUE_STRING_aiSpread = 0x2E1,
  SCR_OPAQUE_STRING_ambienttrack = 0x2E2,
  SCR_OPAQUE_STRING_ambienttrack_ac130 = 0x2E3,
  SCR_OPAQUE_STRING_bottomarc = 0x2E4,
  SCR_OPAQUE_STRING_convergencetime = 0x2E5,
  SCR_OPAQUE_STRING_cursorhint = 0x2E6,
  SCR_OPAQUE_STRING_destructible_type = 0x2E7,
  SCR_OPAQUE_STRING_diffusefraction = 0x2E8,
  SCR_OPAQUE_STRING_eftarc = 0x2E9,
  SCR_OPAQUE_STRING_leftarc = 0x2EA,
  SCR_OPAQUE_STRING_maxrange = 0x2EB,
  SCR_OPAQUE_STRING_northyaw = 0x2EC,
  SCR_OPAQUE_STRING_pitchconvergencetime = 0x2ED,
  SCR_OPAQUE_STRING_playerSpread = 0x2EE,
  SCR_OPAQUE_STRING_postsharpturnlookaheaddist = 0x2EF,
  SCR_OPAQUE_STRING_reflection_clear_color = 0x2F0,
  SCR_OPAQUE_STRING_rightarc = 0x2F1,
  SCR_OPAQUE_STRING_sharpturntooclosetodestdist = 0x2F2,
  SCR_OPAQUE_STRING_script_delay = 0x2F3,
  SCR_OPAQUE_STRING_script_visionset = 0x2F4,
  SCR_OPAQUE_STRING_script_zone = 0x2F5,
  SCR_OPAQUE_STRING_spawner = 0x2F6,
  SCR_OPAQUE_STRING_sunlight = 0x2F7,
  SCR_OPAQUE_STRING_suncolor = 0x2F8,
  SCR_OPAQUE_STRING_sundirection = 0x2F9,
  SCR_OPAQUE_STRING_suppressionTime = 0x2FA,
  SCR_OPAQUE_STRING_threshold = 0x2FB,
  SCR_OPAQUE_STRING_toparc = 0x2FC,
  SCR_OPAQUE_STRING_vehicletype = 0x2FD,
  SCR_OPAQUE_STRING_wait = 0x2FE,
  SCR_OPAQUE_STRING_weaponinfo = 0x2FF,
  SCR_OPAQUE_STRING_yawconvergencetime = 0x300,
  SCR_OPAQUE_FILE2_character_character_ajax_flood_a = 0x301,
  SCR_OPAQUE_FILE2_character_character_ajax_wood_shotgun_a = 0x302,
  SCR_OPAQUE_FILE2_character_character_ajax_wood_shotgun_b = 0x303,
  SCR_OPAQUE_FILE2_character_character_ajax_wood_shotgun_injured = 0x304,
  SCR_OPAQUE_FILE2_character_character_almagro_assault_a = 0x305,
  SCR_OPAQUE_FILE2_character_character_chemwar_russian_assault_b = 0x306,
  SCR_OPAQUE_FILE2_character_character_chemwar_russian_assault_bb = 0x307,
  SCR_OPAQUE_FILE2_character_character_chemwar_russian_assault_c = 0x308,
  SCR_OPAQUE_FILE2_character_character_chemwar_russian_assault_cc = 0x309,
  SCR_OPAQUE_FILE2_character_character_chemwar_russian_assault_d = 0x30A,
  SCR_OPAQUE_FILE2_character_character_chemwar_russian_assault_dd = 0x30B,
  SCR_OPAQUE_FILE2_character_character_chemwar_russian_assault_e = 0x30C,
  SCR_OPAQUE_FILE2_character_character_chemwar_russian_assault_ee = 0x30D,
  SCR_OPAQUE_FILE2_character_character_deer_a = 0x30E,
  SCR_OPAQUE_FILE2_character_character_deer_b = 0x30F,
  SCR_OPAQUE_FILE2_character_character_deer_c = 0x310,
  SCR_OPAQUE_FILE2_character_character_elias_a = 0x311,
  SCR_OPAQUE_FILE2_character_character_elias_assault_a = 0x312,
  SCR_OPAQUE_FILE2_character_character_elias_b = 0x313,
  SCR_OPAQUE_FILE2_character_character_elias_e = 0x314,
  SCR_OPAQUE_FILE2_character_character_elias_hc = 0x315,
  SCR_OPAQUE_FILE2_character_character_elias_wood_shotgun_b = 0x316,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_assault_a = 0x317,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_assault_a_black = 0x318,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_assault_a_white = 0x319,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_assault_b = 0x31A,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_assault_b_desert = 0x31B,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_lmg_b_desert = 0x31C,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_shotgun_b_desert = 0x31D,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_skyway = 0x31E,
  SCR_OPAQUE_FILE2_character_character_elite_pmc_smg_b_desert = 0x31F,
  SCR_OPAQUE_FILE2_character_character_enemy_shark = 0x320,
  SCR_OPAQUE_FILE2_character_character_enemy_wolf = 0x321,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_a = 0x322,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_a_arctic = 0x323,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_a_elite = 0x324,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_a_nohelmet = 0x325,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_a_urban = 0x326,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_b = 0x327,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_b_arctic = 0x328,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_b_elite = 0x329,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_b_nohelmet = 0x32A,
  SCR_OPAQUE_FILE2_character_character_fed_army_assault_b_urban = 0x32B,
  SCR_OPAQUE_FILE2_character_character_fed_army_drones = 0x32C,
  SCR_OPAQUE_FILE2_character_character_fed_army_lmg_a = 0x32D,
  SCR_OPAQUE_FILE2_character_character_fed_army_lmg_a_arctic = 0x32E,
  SCR_OPAQUE_FILE2_character_character_fed_army_lmg_a_urban = 0x32F,
  SCR_OPAQUE_FILE2_character_character_fed_army_shotgun_a = 0x330,
  SCR_OPAQUE_FILE2_character_character_fed_army_shotgun_a_arctic = 0x331,
  SCR_OPAQUE_FILE2_character_character_fed_army_shotgun_a_urban = 0x332,
  SCR_OPAQUE_FILE2_character_character_fed_army_smg_a = 0x333,
  SCR_OPAQUE_FILE2_character_character_fed_army_smg_a_arctic = 0x334,
  SCR_OPAQUE_FILE2_character_character_fed_army_smg_a_nohelmet = 0x335,
  SCR_OPAQUE_FILE2_character_character_fed_army_smg_a_urban = 0x336,
  SCR_OPAQUE_FILE2_character_character_fed_basic_assault_a = 0x337,
  SCR_OPAQUE_FILE2_character_character_fed_basic_smg_a = 0x338,
  SCR_OPAQUE_FILE2_character_character_fed_space_assault_a = 0x339,
  SCR_OPAQUE_FILE2_character_character_fed_space_assault_b = 0x33A,
  SCR_OPAQUE_FILE2_character_character_fed_udt_assault_a = 0x33B,
  SCR_OPAQUE_FILE2_character_character_hazmat_a = 0x33C,
  SCR_OPAQUE_FILE2_character_character_hero_flood_vargas_test = 0x33D,
  SCR_OPAQUE_FILE2_character_character_hesh_assault_a = 0x33E,
  SCR_OPAQUE_FILE2_character_character_hesh_cornered_b = 0x33F,
  SCR_OPAQUE_FILE2_character_character_hesh_end_a = 0x340,
  SCR_OPAQUE_FILE2_character_character_hesh_end_a_water = 0x341,
  SCR_OPAQUE_FILE2_character_character_hesh_end_b = 0x342,
  SCR_OPAQUE_FILE2_character_character_hesh_fed_shotgun_a = 0x343,
  SCR_OPAQUE_FILE2_character_character_hesh_hostage_ab = 0x344,
  SCR_OPAQUE_FILE2_character_character_hesh_ranger_assault_a = 0x345,
  SCR_OPAQUE_FILE2_character_character_hesh_ranger_assault_b = 0x346,
  SCR_OPAQUE_FILE2_character_character_hesh_stealth_mask_c = 0x347,
  SCR_OPAQUE_FILE2_character_character_hesh_stealth_mask_d = 0x348,
  SCR_OPAQUE_FILE2_character_character_hesh_udt_assault_a = 0x349,
  SCR_OPAQUE_FILE2_character_character_hesh_young_a = 0x34A,
  SCR_OPAQUE_FILE2_character_character_iw6_sp_enemy_dog = 0x34B,
  SCR_OPAQUE_FILE2_character_character_iw6_sp_german_shepherd_dog_a = 0x34C,
  SCR_OPAQUE_FILE2_character_character_iw6_sp_german_shepherd_dog_b = 0x34D,
  SCR_OPAQUE_FILE2_character_character_iw6_sp_german_shepherd_dog_c = 0x34E,
  SCR_OPAQUE_FILE2_character_character_keegan_assault_a = 0x34F,
  SCR_OPAQUE_FILE2_character_character_keegan_end_smg_a = 0x350,
  SCR_OPAQUE_FILE2_character_character_keegan_fed_smg_a = 0x351,
  SCR_OPAQUE_FILE2_character_character_keegan_udt_assault_a = 0x352,
  SCR_OPAQUE_FILE2_character_character_keegan_udt_water_b = 0x353,
  SCR_OPAQUE_FILE2_character_character_keegan_wood_sniper_b = 0x354,
  SCR_OPAQUE_FILE2_character_character_kick_udt_assault_b = 0x355,
  SCR_OPAQUE_FILE2_character_character_kick_udt_water_glowstick = 0x356,
  SCR_OPAQUE_FILE2_character_character_kyra_us_space_a = 0x357,
  SCR_OPAQUE_FILE2_character_character_merrick_assault_a = 0x358,
  SCR_OPAQUE_FILE2_character_character_merrick_assault_b = 0x359,
  SCR_OPAQUE_FILE2_character_character_merrick_assault_c = 0x35A,
  SCR_OPAQUE_FILE2_character_character_merrick_end_a = 0x35B,
  SCR_OPAQUE_FILE2_character_character_merrick_fed_assault_a = 0x35C,
  SCR_OPAQUE_FILE2_character_character_merrick_flood_a = 0x35D,
  SCR_OPAQUE_FILE2_character_character_merrick_hostage_a = 0x35E,
  SCR_OPAQUE_FILE2_character_character_merrick_udt_assault_b = 0x35F,
  SCR_OPAQUE_FILE2_character_character_merrick_udt_water_glowstick = 0x360,
  SCR_OPAQUE_FILE2_character_character_merrick_wood_smg_c_skull = 0x361,
  SCR_OPAQUE_FILE2_character_character_oil_worker = 0x362,
  SCR_OPAQUE_FILE2_character_character_oil_worker_bi_foreman = 0x363,
  SCR_OPAQUE_FILE2_character_character_oil_worker_mask = 0x364,
  SCR_OPAQUE_FILE2_character_character_opforce_henchmen_smg_a = 0x365,
  SCR_OPAQUE_FILE2_character_character_opforce_henchmen_smg_b = 0x366,
  SCR_OPAQUE_FILE2_character_character_pilot_a = 0x367,
  SCR_OPAQUE_FILE2_character_character_pilot_b = 0x368,
  SCR_OPAQUE_FILE2_character_character_pilot_b_tan = 0x369,
  SCR_OPAQUE_FILE2_character_character_pilot_c = 0x36A,
  SCR_OPAQUE_FILE2_character_character_pilot_c_blue = 0x36B,
  SCR_OPAQUE_FILE2_character_character_pilot_c_green = 0x36C,
  SCR_OPAQUE_FILE2_character_character_pilot_c_purple = 0x36D,
  SCR_OPAQUE_FILE2_character_character_pilot_c_red = 0x36E,
  SCR_OPAQUE_FILE2_character_character_ppilot_crew_d = 0x36F,
  SCR_OPAQUE_FILE2_character_character_ramos_a = 0x370,
  SCR_OPAQUE_FILE2_character_character_rorke_assault = 0x371,
  SCR_OPAQUE_FILE2_character_character_rorke_basic_a = 0x372,
  SCR_OPAQUE_FILE2_character_character_rorke_flood_a = 0x373,
  SCR_OPAQUE_FILE2_character_character_scientist_a = 0x374,
  SCR_OPAQUE_FILE2_character_character_scientist_b = 0x375,
  SCR_OPAQUE_FILE2_character_character_scientist_c = 0x376,
  SCR_OPAQUE_FILE2_character_character_scientist_d = 0x377,
  SCR_OPAQUE_FILE2_character_character_us_civ_female_yb_a = 0x378,
  SCR_OPAQUE_FILE2_character_character_us_civ_female_yb_b = 0x379,
  SCR_OPAQUE_FILE2_character_character_us_civ_male_yb_a = 0x37A,
  SCR_OPAQUE_FILE2_character_character_us_civ_male_yb_b = 0x37B,
  SCR_OPAQUE_FILE2_character_character_us_rangers_assault_a = 0x37C,
  SCR_OPAQUE_FILE2_character_character_us_rangers_assault_a_desert = 0x37D,
  SCR_OPAQUE_FILE2_character_character_us_rangers_assault_a_urban = 0x37E,
  SCR_OPAQUE_FILE2_character_character_us_rangers_drones = 0x37F,
  SCR_OPAQUE_FILE2_character_character_us_rangers_lmg_a = 0x380,
  SCR_OPAQUE_FILE2_character_character_us_rangers_lmg_a_urban = 0x381,
  SCR_OPAQUE_FILE2_character_character_us_rangers_shotgun_a = 0x382,
  SCR_OPAQUE_FILE2_character_character_us_rangers_shotgun_a_urban = 0x383,
  SCR_OPAQUE_FILE2_character_character_us_rangers_smg_a = 0x384,
  SCR_OPAQUE_FILE2_character_character_us_rangers_smg_a_desert = 0x385,
  SCR_OPAQUE_FILE2_character_character_us_space_assault_a = 0x386,
  SCR_OPAQUE_FILE2_character_character_us_space_assault_b = 0x387,
  SCR_OPAQUE_FILE2_character_character_us_space_collins = 0x388,
  SCR_OPAQUE_FILE2_character_character_us_space_int_a = 0x389,
  SCR_OPAQUE_FILE2_character_character_us_space_int_b = 0x38A,
  SCR_OPAQUE_FILE2_character_character_us_space_int_c = 0x38B,
  SCR_OPAQUE_FILE2_character_character_venezuela_army_assault_a = 0x38C,
  SCR_OPAQUE_FILE2_character_character_venezuela_army_smg_a = 0x38D,
  SCR_OPAQUE_FILE2_character_character_venezuela_army_smg_a_head_d = 0x38E,
  SCR_OPAQUE_FILE2_codescripts_character = 0x38F,
  SCR_OPAQUE_FILE2_codescripts_delete = 0x390,
  SCR_OPAQUE_FILE2_codescripts_struct = 0x391,
  SCR_OPAQUE_FILE2_common_scripts__artcommon = 0x392,
  SCR_OPAQUE_FILE2_common_scripts__bcs_location_trigs = 0x393,
  SCR_OPAQUE_FILE2_common_scripts__createfx = 0x394,
  SCR_OPAQUE_FILE2_common_scripts__createfxmenu = 0x395,
  SCR_OPAQUE_FILE2_common_scripts__csplines = 0x396,
  SCR_OPAQUE_FILE2_common_scripts__destructible = 0x397,
  SCR_OPAQUE_FILE2_common_scripts__dynamic_world = 0x398,
  SCR_OPAQUE_FILE2_common_scripts__elevator = 0x399,
  SCR_OPAQUE_FILE2_common_scripts__exploder = 0x39A,
  SCR_OPAQUE_FILE2_common_scripts__fx = 0x39B,
  SCR_OPAQUE_FILE2_common_scripts__pipes = 0x39C,
  SCR_OPAQUE_FILE2_common_scripts__sentry = 0x39D,
  SCR_OPAQUE_FILE2_common_scripts__wind = 0x39E,
  SCR_OPAQUE_FILE2_common_scripts_utility = 0x39F,
  SCR_OPAQUE_FILE2_destructible_scripts_destructible_civilian_sedan_iw6 = 0x3A0,
  SCR_OPAQUE_FILE2_destructible_scripts_destructible_civilian_sedan_water_iw6 = 0x3A1,
  SCR_OPAQUE_FILE2_destructible_scripts_destructible_van_water_iw6 = 0x3A2,
  SCR_OPAQUE_FILE2_destructible_scripts_destructible_vehicle_city_car_water = 0x3A3,
  SCR_OPAQUE_FILE2_destructible_scripts_electrical_transformer_large = 0x3A4,
  SCR_OPAQUE_FILE2_destructible_scripts_explodable_barrel = 0x3A5,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_electricbox2 = 0x3A6,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_filecabinet = 0x3A7,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_generator_on = 0x3A8,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_light_ceiling_fluorescent = 0x3A9,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_lv_trash_can_vegas = 0x3AA,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_sp_panel_box = 0x3AB,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_transformer_small01 = 0x3AC,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_trashcan_metal_closed = 0x3AD,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_tv_flatscreen = 0x3AE,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_tv_flatscreen_wallmount_02 = 0x3AF,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_tv_video_monitor = 0x3B0,
  SCR_OPAQUE_FILE2_destructible_scripts_toy_usa_gas_station_trash_bin_02 = 0x3B1,
  SCR_OPAQUE_FILE2_maps__ambient = 0x3B2,
  SCR_OPAQUE_FILE2_maps__anim = 0x3B3,
  SCR_OPAQUE_FILE2_maps__animatedmodels = 0x3B4,
  SCR_OPAQUE_FILE2_maps__art = 0x3B5,
  SCR_OPAQUE_FILE2_maps__ash_falling = 0x3B6,
  SCR_OPAQUE_FILE2_maps__audio = 0x3B7,
  SCR_OPAQUE_FILE2_maps__audio_ambient = 0x3B8,
  SCR_OPAQUE_FILE2_maps__audio_code = 0x3B9,
  SCR_OPAQUE_FILE2_maps__autosave = 0x3BA,
  SCR_OPAQUE_FILE2_maps__breach = 0x3BB,
  SCR_OPAQUE_FILE2_maps__c4 = 0x3BC,
  SCR_OPAQUE_FILE2_maps__chaingun_player = 0x3BD,
  SCR_OPAQUE_FILE2_maps__chopperboss = 0x3BE,
  SCR_OPAQUE_FILE2_maps__chopperboss_utility = 0x3BF,
  SCR_OPAQUE_FILE2_maps__colors = 0x3C0,
  SCR_OPAQUE_FILE2_maps__compass = 0x3C1,
  SCR_OPAQUE_FILE2_maps__coop = 0x3C2,
  SCR_OPAQUE_FILE2_maps__createfx = 0x3C3,
  SCR_OPAQUE_FILE2_maps__credits_iw6 = 0x3C4,
  SCR_OPAQUE_FILE2_maps__damagefeedback = 0x3C5,
  SCR_OPAQUE_FILE2_maps__deadbody = 0x3C6,
  SCR_OPAQUE_FILE2_maps__debug = 0x3C7,
  SCR_OPAQUE_FILE2_maps__detonategrenades = 0x3C8,
  SCR_OPAQUE_FILE2_maps__dog_control = 0x3C9,
  SCR_OPAQUE_FILE2_maps__dog_drive = 0x3CA,
  SCR_OPAQUE_FILE2_maps__dog_kinect = 0x3CB,
  SCR_OPAQUE_FILE2_maps__dog_pip = 0x3CC,
  SCR_OPAQUE_FILE2_maps__drone = 0x3CD,
  SCR_OPAQUE_FILE2_maps__drone_ai = 0x3CE,
  SCR_OPAQUE_FILE2_maps__drone_base = 0x3CF,
  SCR_OPAQUE_FILE2_maps__drone_civilian = 0x3D0,
  SCR_OPAQUE_FILE2_maps__drone_deer = 0x3D1,
  SCR_OPAQUE_FILE2_maps__dynamic_run_speed = 0x3D2,
  SCR_OPAQUE_FILE2_maps__endmission = 0x3D3,
  SCR_OPAQUE_FILE2_maps__friendlyfire = 0x3D4,
  SCR_OPAQUE_FILE2_maps__gameskill = 0x3D5,
  SCR_OPAQUE_FILE2_maps__geo_mover = 0x3D6,
  SCR_OPAQUE_FILE2_maps__global_fx = 0x3D7,
  SCR_OPAQUE_FILE2_maps__global_fx_code = 0x3D8,
  SCR_OPAQUE_FILE2_maps__hand_signals = 0x3D9,
  SCR_OPAQUE_FILE2_maps__helicopter_ai = 0x3DA,
  SCR_OPAQUE_FILE2_maps__helicopter_globals = 0x3DB,
  SCR_OPAQUE_FILE2_maps__hud = 0x3DC,
  SCR_OPAQUE_FILE2_maps__hud_util = 0x3DD,
  SCR_OPAQUE_FILE2_maps__idle = 0x3DE,
  SCR_OPAQUE_FILE2_maps__idle_coffee = 0x3DF,
  SCR_OPAQUE_FILE2_maps__idle_lean_smoke = 0x3E0,
  SCR_OPAQUE_FILE2_maps__idle_phone = 0x3E1,
  SCR_OPAQUE_FILE2_maps__idle_sit_load_ak = 0x3E2,
  SCR_OPAQUE_FILE2_maps__idle_sleep = 0x3E3,
  SCR_OPAQUE_FILE2_maps__idle_smoke = 0x3E4,
  SCR_OPAQUE_FILE2_maps__idle_smoke_balcony = 0x3E5,
  SCR_OPAQUE_FILE2_maps__intelligence = 0x3E6,
  SCR_OPAQUE_FILE2_maps__introscreen = 0x3E7,
  SCR_OPAQUE_FILE2_maps__inventory = 0x3E8,
  SCR_OPAQUE_FILE2_maps__lights = 0x3E9,
  SCR_OPAQUE_FILE2_maps__load = 0x3EA,
  SCR_OPAQUE_FILE2_maps__loadout = 0x3EB,
  SCR_OPAQUE_FILE2_maps__loadout_code = 0x3EC,
  SCR_OPAQUE_FILE2_maps__mg_penetration = 0x3ED,
  SCR_OPAQUE_FILE2_maps__mgturret = 0x3EE,
  SCR_OPAQUE_FILE2_maps__minigun = 0x3EF,
  SCR_OPAQUE_FILE2_maps__minigun_viewmodel = 0x3F0,
  SCR_OPAQUE_FILE2_maps__mocap_ar = 0x3F1,
  SCR_OPAQUE_FILE2_maps__mortar = 0x3F2,
  SCR_OPAQUE_FILE2_maps__names = 0x3F3,
  SCR_OPAQUE_FILE2_maps__nightvision = 0x3F4,
  SCR_OPAQUE_FILE2_maps__ocean = 0x3F5,
  SCR_OPAQUE_FILE2_maps__patrol = 0x3F6,
  SCR_OPAQUE_FILE2_maps__patrol_anims = 0x3F7,
  SCR_OPAQUE_FILE2_maps__patrol_anims_creepwalk = 0x3F8,
  SCR_OPAQUE_FILE2_maps__patrol_anims_gundown = 0x3F9,
  SCR_OPAQUE_FILE2_maps__patrol_anims_patroljog = 0x3FA,
  SCR_OPAQUE_FILE2_maps__perlin_noise = 0x3FB,
  SCR_OPAQUE_FILE2_maps__player_death = 0x3FC,
  SCR_OPAQUE_FILE2_maps__player_limp = 0x3FD,
  SCR_OPAQUE_FILE2_maps__player_rig = 0x3FE,
  SCR_OPAQUE_FILE2_maps__player_stats = 0x3FF,
  SCR_OPAQUE_FILE2_maps__props = 0x400,
  SCR_OPAQUE_FILE2_maps__radiation = 0x401,
  SCR_OPAQUE_FILE2_maps__rambo = 0x402,
  SCR_OPAQUE_FILE2_maps__readystand_anims = 0x403,
  SCR_OPAQUE_FILE2_maps__remoteturret = 0x404,
  SCR_OPAQUE_FILE2_maps__rv_vfx = 0x405,
  SCR_OPAQUE_FILE2_maps__shellshock = 0x406,
  SCR_OPAQUE_FILE2_maps__shg_common = 0x407,
  SCR_OPAQUE_FILE2_maps__slowmo_breach = 0x408,
  SCR_OPAQUE_FILE2_maps__space = 0x409,
  SCR_OPAQUE_FILE2_maps__space_ai = 0x40A,
  SCR_OPAQUE_FILE2_maps__space_player = 0x40B,
  SCR_OPAQUE_FILE2_maps__spawner = 0x40C,
  SCR_OPAQUE_FILE2_maps__stealth = 0x40D,
  SCR_OPAQUE_FILE2_maps__stealth_accuracy_friendly = 0x40E,
  SCR_OPAQUE_FILE2_maps__stealth_animation_funcs = 0x40F,
  SCR_OPAQUE_FILE2_maps__stealth_anims = 0x410,
  SCR_OPAQUE_FILE2_maps__stealth_behavior_enemy = 0x411,
  SCR_OPAQUE_FILE2_maps__stealth_behavior_friendly = 0x412,
  SCR_OPAQUE_FILE2_maps__stealth_behavior_system = 0x413,
  SCR_OPAQUE_FILE2_maps__stealth_color_friendly = 0x414,
  SCR_OPAQUE_FILE2_maps__stealth_corpse_enemy = 0x415,
  SCR_OPAQUE_FILE2_maps__stealth_corpse_system = 0x416,
  SCR_OPAQUE_FILE2_maps__stealth_event_enemy = 0x417,
  SCR_OPAQUE_FILE2_maps__stealth_shared_utilities = 0x418,
  SCR_OPAQUE_FILE2_maps__stealth_smartstance_friendly = 0x419,
  SCR_OPAQUE_FILE2_maps__stealth_threat_enemy = 0x41A,
  SCR_OPAQUE_FILE2_maps__stealth_utility = 0x41B,
  SCR_OPAQUE_FILE2_maps__stealth_visibility_enemy = 0x41C,
  SCR_OPAQUE_FILE2_maps__stealth_visibility_friendly = 0x41D,
  SCR_OPAQUE_FILE2_maps__stealth_visibility_system = 0x41E,
  SCR_OPAQUE_FILE2_maps__swim_ai = 0x41F,
  SCR_OPAQUE_FILE2_maps__swim_ai_common = 0x420,
  SCR_OPAQUE_FILE2_maps__swim_player = 0x421,
  SCR_OPAQUE_FILE2_maps__tank_battlechatter = 0x422,
  SCR_OPAQUE_FILE2_maps__teargas = 0x423,
  SCR_OPAQUE_FILE2_maps__treadfx = 0x424,
  SCR_OPAQUE_FILE2_maps__trigger = 0x425,
  SCR_OPAQUE_FILE2_maps__underwater = 0x426,
  SCR_OPAQUE_FILE2_maps__utility = 0x427,
  SCR_OPAQUE_FILE2_maps__utility_code = 0x428,
  SCR_OPAQUE_FILE2_maps__utility_dogs = 0x429,
  SCR_OPAQUE_FILE2_maps__vehicle = 0x42A,
  SCR_OPAQUE_FILE2_maps__vehicle_aianim = 0x42B,
  SCR_OPAQUE_FILE2_maps__vehicle_code = 0x42C,
  SCR_OPAQUE_FILE2_maps__vehicle_spline_zodiac = 0x42D,
  SCR_OPAQUE_FILE2_maps__vignette_util = 0x42E,
  SCR_OPAQUE_FILE2_maps__weather = 0x42F,
  SCR_OPAQUE_FILE2_maps_black_ice_fx = 0x430,
  SCR_OPAQUE_FILE2_maps_black_ice_precache = 0x431,
  SCR_OPAQUE_FILE2_maps_carrier_fx = 0x432,
  SCR_OPAQUE_FILE2_maps_carrier_precache = 0x433,
  SCR_OPAQUE_FILE2_maps_clockwork_fx = 0x434,
  SCR_OPAQUE_FILE2_maps_clockwork_precache = 0x435,
  SCR_OPAQUE_FILE2_maps_cornered_fx = 0x436,
  SCR_OPAQUE_FILE2_maps_cornered_precache = 0x437,
  SCR_OPAQUE_FILE2_maps_deer_hunt_fx = 0x438,
  SCR_OPAQUE_FILE2_maps_deer_hunt_precache = 0x439,
  SCR_OPAQUE_FILE2_maps_enemyhq_fx = 0x43A,
  SCR_OPAQUE_FILE2_maps_enemyhq_precache = 0x43B,
  SCR_OPAQUE_FILE2_maps_flood_fx = 0x43C,
  SCR_OPAQUE_FILE2_maps_flood_precache = 0x43D,
  SCR_OPAQUE_FILE2_maps_homecoming_fx = 0x43E,
  SCR_OPAQUE_FILE2_maps_homecoming_precache = 0x43F,
  SCR_OPAQUE_FILE2_maps_iplane_fx = 0x440,
  SCR_OPAQUE_FILE2_maps_jungle_ghosts_fx = 0x441,
  SCR_OPAQUE_FILE2_maps_jungle_ghosts_precache = 0x442,
  SCR_OPAQUE_FILE2_maps_loki_fx = 0x443,
  SCR_OPAQUE_FILE2_maps_loki_precache = 0x444,
  SCR_OPAQUE_FILE2_maps_nml_fx = 0x445,
  SCR_OPAQUE_FILE2_maps_nml_precache = 0x446,
  SCR_OPAQUE_FILE2_maps_odin_fx = 0x447,
  SCR_OPAQUE_FILE2_maps_odin_precache = 0x448,
  SCR_OPAQUE_FILE2_maps_oilrocks_fx = 0x449,
  SCR_OPAQUE_FILE2_maps_oilrocks_precache = 0x44A,
  SCR_OPAQUE_FILE2_maps_prologue_fx = 0x44B,
  SCR_OPAQUE_FILE2_maps_prologue_precache = 0x44C,
  SCR_OPAQUE_FILE2_maps_satfarm_b_fx = 0x44D,
  SCR_OPAQUE_FILE2_maps_satfarm_b_precache = 0x44E,
  SCR_OPAQUE_FILE2_maps_satfarm_fx = 0x44F,
  SCR_OPAQUE_FILE2_maps_satfarm_precache = 0x450,
  SCR_OPAQUE_FILE2_maps_ship_graveyard_fx = 0x451,
  SCR_OPAQUE_FILE2_maps_ship_graveyard_precache = 0x452,
  SCR_OPAQUE_FILE2_maps_skyway_fx = 0x453,
  SCR_OPAQUE_FILE2_maps_skyway_precache = 0x454,
  SCR_OPAQUE_FILE2_maps_youngblood_fx = 0x455,
  SCR_OPAQUE_FILE2_maps_youngblood_precache = 0x456,
  SCR_OPAQUE_FILE2_vehicle_scripts__a10_warthog = 0x457,
  SCR_OPAQUE_FILE2_vehicle_scripts__apache = 0x458,
  SCR_OPAQUE_FILE2_vehicle_scripts__apache_player = 0x459,
  SCR_OPAQUE_FILE2_vehicle_scripts__apache_player_audio = 0x45A,
  SCR_OPAQUE_FILE2_vehicle_scripts__apache_player_difficulty = 0x45B,
  SCR_OPAQUE_FILE2_vehicle_scripts__apache_player_missile_hydra_and_lockon = 0x45C,
  SCR_OPAQUE_FILE2_vehicle_scripts__apache_player_pilot = 0x45D,
  SCR_OPAQUE_FILE2_vehicle_scripts__apache_player_raining_missile = 0x45E,
  SCR_OPAQUE_FILE2_vehicle_scripts__apache_player_targeting = 0x45F,
  SCR_OPAQUE_FILE2_vehicle_scripts__attack_heli = 0x460,
  SCR_OPAQUE_FILE2_vehicle_scripts__btr80 = 0x461,
  SCR_OPAQUE_FILE2_vehicle_scripts__c17 = 0x462,
  SCR_OPAQUE_FILE2_vehicle_scripts__chinese_brave_warrior = 0x463,
  SCR_OPAQUE_FILE2_vehicle_scripts__chopper_ai_missile_defense = 0x464,
  SCR_OPAQUE_FILE2_vehicle_scripts__chopper_missile_defense_utility = 0x465,
  SCR_OPAQUE_FILE2_vehicle_scripts__chopper_player_missile_defense = 0x466,
  SCR_OPAQUE_FILE2_vehicle_scripts__empty = 0x467,
  SCR_OPAQUE_FILE2_vehicle_scripts__f15 = 0x468,
  SCR_OPAQUE_FILE2_vehicle_scripts__f18 = 0x469,
  SCR_OPAQUE_FILE2_vehicle_scripts__foliage_tumbleweed_vehicle = 0x46A,
  SCR_OPAQUE_FILE2_vehicle_scripts__gaz = 0x46B,
  SCR_OPAQUE_FILE2_vehicle_scripts__gaz_dshk_oilrocks = 0x46C,
  SCR_OPAQUE_FILE2_vehicle_scripts__gunboat = 0x46D,
  SCR_OPAQUE_FILE2_vehicle_scripts__hind = 0x46E,
  SCR_OPAQUE_FILE2_vehicle_scripts__lcs = 0x46F,
  SCR_OPAQUE_FILE2_vehicle_scripts__m1a1_minigun = 0x470,
  SCR_OPAQUE_FILE2_vehicle_scripts__m880_launcher = 0x471,
  SCR_OPAQUE_FILE2_vehicle_scripts__man_7t = 0x472,
  SCR_OPAQUE_FILE2_vehicle_scripts__mig29 = 0x473,
  SCR_OPAQUE_FILE2_vehicle_scripts__missile_boat = 0x474,
  SCR_OPAQUE_FILE2_vehicle_scripts__osprey = 0x475,
  SCR_OPAQUE_FILE2_vehicle_scripts__snowmobile = 0x476,
  SCR_OPAQUE_FILE2_vehicle_scripts__snowmobile_friendly = 0x477,
  SCR_OPAQUE_FILE2_vehicle_scripts__soc_r = 0x478,
  SCR_OPAQUE_FILE2_vehicle_scripts__submarine_sdv = 0x479,
  SCR_OPAQUE_FILE2_vehicle_scripts__tank_crush = 0x47A,
  SCR_OPAQUE_FILE2_vehicle_scripts__zodiac = 0x47B,
  SCR_OPAQUE_FILE2_vehicle_scripts__zpu_antiair = 0x47C,
  SCR_OPAQUE_FILE2_vehicle_scripts__zpu_antiair_oilrocks = 0x47D,
  SCR_OPAQUE_FILE2_vehicle_scripts_aas_72x = 0x47E,
  SCR_OPAQUE_FILE2_vehicle_scripts_apache = 0x47F,
  SCR_OPAQUE_FILE2_vehicle_scripts_artemis = 0x480,
  SCR_OPAQUE_FILE2_vehicle_scripts_hind = 0x481,
  SCR_OPAQUE_FILE2_vehicle_scripts_hind_battle_carrier = 0x482,
  SCR_OPAQUE_FILE2_vehicle_scripts_hind_battle_oilrocks = 0x483,
  SCR_OPAQUE_FILE2_vehicle_scripts_hovercraft = 0x484,
  SCR_OPAQUE_FILE2_vehicle_scripts_iveco_lynx = 0x485,
  SCR_OPAQUE_FILE2_vehicle_scripts_iveco_lynx_turret = 0x486,
  SCR_OPAQUE_FILE2_vehicle_scripts_m1a2 = 0x487,
  SCR_OPAQUE_FILE2_vehicle_scripts_m1a2_player = 0x488,
  SCR_OPAQUE_FILE2_vehicle_scripts_m800 = 0x489,
  SCR_OPAQUE_FILE2_vehicle_scripts_matv = 0x48A,
  SCR_OPAQUE_FILE2_vehicle_scripts_mk23 = 0x48B,
  SCR_OPAQUE_FILE2_vehicle_scripts_nh90 = 0x48C,
  SCR_OPAQUE_FILE2_vehicle_scripts_pickup_truck_civ = 0x48D,
  SCR_OPAQUE_FILE2_vehicle_scripts_sedan_4door = 0x48E,
  SCR_OPAQUE_FILE2_vehicle_scripts_silenthawk = 0x48F,
  SCR_OPAQUE_FILE2_vehicle_scripts_silenthawk_landing = 0x490,
  SCR_OPAQUE_FILE2_vehicle_scripts_t90ms = 0x491,
  SCR_OPAQUE_FILE2_vehicle_scripts_tatra_t815 = 0x492,
  SCR_OPAQUE_FILE2_vehicle_scripts_y_8_gunship = 0x493,
  SCR_OPAQUE_FILE2_xmodelalias_alias_chemwar_russian_heads = 0x494,
  SCR_OPAQUE_FILE2_xmodelalias_alias_elite_pmc_heads = 0x495,
  SCR_OPAQUE_FILE2_xmodelalias_alias_fed_army_heads_a = 0x496,
  SCR_OPAQUE_FILE2_xmodelalias_alias_fed_army_heads_a_arctic_noshield = 0x497,
  SCR_OPAQUE_FILE2_xmodelalias_alias_fed_army_heads_a_nofaceshield = 0x498,
  SCR_OPAQUE_FILE2_xmodelalias_alias_fed_army_heads_a_urban = 0x499,
  SCR_OPAQUE_FILE2_xmodelalias_alias_fed_basic_heads = 0x49A,
  SCR_OPAQUE_FILE2_xmodelalias_alias_fed_space_assault_heads = 0x49B,
  SCR_OPAQUE_FILE2_xmodelalias_alias_fed_udt_heads = 0x49C,
  SCR_OPAQUE_FILE2_xmodelalias_alias_henchmen_heads = 0x49D,
  SCR_OPAQUE_FILE2_xmodelalias_alias_oil_worker_bodies = 0x49E,
  SCR_OPAQUE_FILE2_xmodelalias_alias_oil_worker_heads = 0x49F,
  SCR_OPAQUE_FILE2_xmodelalias_alias_pilot_heads = 0x4A0,
  SCR_OPAQUE_FILE2_xmodelalias_alias_pilot_heads_blue = 0x4A1,
  SCR_OPAQUE_FILE2_xmodelalias_alias_pilot_heads_green = 0x4A2,
  SCR_OPAQUE_FILE2_xmodelalias_alias_pilot_heads_purple = 0x4A3,
  SCR_OPAQUE_FILE2_xmodelalias_alias_pilot_heads_red = 0x4A4,
  SCR_OPAQUE_FILE2_xmodelalias_alias_pilot_heads_yellow = 0x4A5,
  SCR_OPAQUE_FILE2_xmodelalias_alias_russian_military_heads_skyway = 0x4A6,
  SCR_OPAQUE_FILE2_xmodelalias_alias_scientist_heads = 0x4A7,
  SCR_OPAQUE_FILE2_xmodelalias_alias_us_rangers_drone_bodies = 0x4A8,
  SCR_OPAQUE_FILE2_xmodelalias_alias_us_rangers_drone_heads = 0x4A9,
  SCR_OPAQUE_FILE2_xmodelalias_alias_us_rangers_heads_a = 0x4AA,
  SCR_OPAQUE_FILE2_xmodelalias_alias_us_rangers_heads_a_desert = 0x4AB,
  SCR_OPAQUE_FILE2_xmodelalias_alias_us_rangers_heads_a_urban = 0x4AC,
  SCR_OPAQUE_FILE2_xmodelalias_alias_us_space_assault_heads = 0x4AD,
  SCR_OPAQUE_FILE2_xmodelalias_alias_us_space_int_heads = 0x4AE,
  SCR_OPAQUE_FILE2_xmodelalias_alias_venezuela_army_heads = 0x4AF,
  SCR_OPAQUE_FILE3_maps_animated_models_accessories_windsock_wind_medium = 0x4B0,
  SCR_OPAQUE_FILE3_maps_animated_models_com_roofvent2 = 0x4B1,
  SCR_OPAQUE_FILE3_maps_animated_models_com_roofvent3 = 0x4B2,
  SCR_OPAQUE_FILE3_maps_animated_models_flood_palm_tree_tall = 0x4B3,
  SCR_OPAQUE_FILE3_maps_animated_models_flood_palm_tree_tall_no_shadow = 0x4B4,
  SCR_OPAQUE_FILE3_maps_animated_models_hanging_sheet_wind_medium = 0x4B5,
  SCR_OPAQUE_FILE3_maps_animated_models_mp_flooded_water_debris_bob = 0x4B6,
  SCR_OPAQUE_FILE3_maps_animated_models_mp_flooded_water_debris_spiral = 0x4B7,
  SCR_OPAQUE_FILE3_maps_animated_models_mp_flooded_water_street = 0x4B8,
  SCR_OPAQUE_FILE3_maps_animated_models_mp_frag_crane = 0x4B9,
  SCR_OPAQUE_FILE3_maps_animated_models_ow_crane_hook = 0x4BA,
  SCR_OPAQUE_FILE3_maps_animated_models_tarp_tattered_thin_02 = 0x4BB,
  SCR_OPAQUE_FILE3_maps_animated_models_tattered_cloth_medium_01 = 0x4BC,
  SCR_OPAQUE_FILE3_maps_animated_models_tattered_cloth_small_02 = 0x4BD,
  SCR_OPAQUE_FILE3_maps_createart_black_ice_art = 0x4BE,
  SCR_OPAQUE_FILE3_maps_createart_black_ice_fog = 0x4BF,
  SCR_OPAQUE_FILE3_maps_createart_carrier_art = 0x4C0,
  SCR_OPAQUE_FILE3_maps_createart_carrier_fog = 0x4C1,
  SCR_OPAQUE_FILE3_maps_createart_clockwork_art = 0x4C2,
  SCR_OPAQUE_FILE3_maps_createart_clockwork_fog = 0x4C3,
  SCR_OPAQUE_FILE3_maps_createart_cornered_art = 0x4C4,
  SCR_OPAQUE_FILE3_maps_createart_cornered_fog = 0x4C5,
  SCR_OPAQUE_FILE3_maps_createart_deer_hunt_art = 0x4C6,
  SCR_OPAQUE_FILE3_maps_createart_deer_hunt_fog = 0x4C7,
  SCR_OPAQUE_FILE3_maps_createart_enemyhq_art = 0x4C8,
  SCR_OPAQUE_FILE3_maps_createart_enemyhq_fog = 0x4C9,
  SCR_OPAQUE_FILE3_maps_createart_flood_art = 0x4CA,
  SCR_OPAQUE_FILE3_maps_createart_flood_fog = 0x4CB,
  SCR_OPAQUE_FILE3_maps_createart_homecoming_art = 0x4CC,
  SCR_OPAQUE_FILE3_maps_createart_homecoming_fog = 0x4CD,
  SCR_OPAQUE_FILE3_maps_createart_iplane_art = 0x4CE,
  SCR_OPAQUE_FILE3_maps_createart_iplane_fog = 0x4CF,
  SCR_OPAQUE_FILE3_maps_createart_jungle_ghosts_art = 0x4D0,
  SCR_OPAQUE_FILE3_maps_createart_jungle_ghosts_fog = 0x4D1,
  SCR_OPAQUE_FILE3_maps_createart_loki_art = 0x4D2,
  SCR_OPAQUE_FILE3_maps_createart_loki_fog = 0x4D3,
  SCR_OPAQUE_FILE3_maps_createart_mp_alien_town_art = 0x4D4,
  SCR_OPAQUE_FILE3_maps_createart_mp_alien_town_fog = 0x4D5,
  SCR_OPAQUE_FILE3_maps_createart_mp_chasm_art = 0x4D6,
  SCR_OPAQUE_FILE3_maps_createart_mp_chasm_fog = 0x4D7,
  SCR_OPAQUE_FILE3_maps_createart_mp_dart_art = 0x4D8,
  SCR_OPAQUE_FILE3_maps_createart_mp_dart_fog = 0x4D9,
  SCR_OPAQUE_FILE3_maps_createart_mp_fahrenheit_art = 0x4DA,
  SCR_OPAQUE_FILE3_maps_createart_mp_fahrenheit_fog = 0x4DB,
  SCR_OPAQUE_FILE3_maps_createart_mp_flooded_art = 0x4DC,
  SCR_OPAQUE_FILE3_maps_createart_mp_flooded_fog = 0x4DD,
  SCR_OPAQUE_FILE3_maps_createart_mp_frag_art = 0x4DE,
  SCR_OPAQUE_FILE3_maps_createart_mp_frag_fog = 0x4DF,
  SCR_OPAQUE_FILE3_maps_createart_mp_hashima_art = 0x4E0,
  SCR_OPAQUE_FILE3_maps_createart_mp_hashima_fog = 0x4E1,
  SCR_OPAQUE_FILE3_maps_createart_mp_lonestar_art = 0x4E2,
  SCR_OPAQUE_FILE3_maps_createart_mp_lonestar_fog = 0x4E3,
  SCR_OPAQUE_FILE3_maps_createart_mp_prisonbreak_art = 0x4E4,
  SCR_OPAQUE_FILE3_maps_createart_mp_prisonbreak_fog = 0x4E5,
  SCR_OPAQUE_FILE3_maps_createart_mp_siege_buildings_fog = 0x4E6,
  SCR_OPAQUE_FILE3_maps_createart_mp_skeleton_art = 0x4E7,
  SCR_OPAQUE_FILE3_maps_createart_mp_skeleton_fog = 0x4E8,
  SCR_OPAQUE_FILE3_maps_createart_mp_snow_art = 0x4E9,
  SCR_OPAQUE_FILE3_maps_createart_mp_snow_fog = 0x4EA,
  SCR_OPAQUE_FILE3_maps_createart_mp_sovereign_art = 0x4EB,
  SCR_OPAQUE_FILE3_maps_createart_mp_sovereign_fog = 0x4EC,
  SCR_OPAQUE_FILE3_maps_createart_mp_strikezone_art = 0x4ED,
  SCR_OPAQUE_FILE3_maps_createart_mp_strikezone_fog = 0x4EE,
  SCR_OPAQUE_FILE3_maps_createart_mp_warhawk_art = 0x4EF,
  SCR_OPAQUE_FILE3_maps_createart_mp_warhawk_fog = 0x4F0,
  SCR_OPAQUE_FILE3_maps_createart_mp_zebra_art = 0x4F1,
  SCR_OPAQUE_FILE3_maps_createart_mp_zebra_fog = 0x4F2,
  SCR_OPAQUE_FILE3_maps_createart_nml_art = 0x4F3,
  SCR_OPAQUE_FILE3_maps_createart_nml_fog = 0x4F4,
  SCR_OPAQUE_FILE3_maps_createart_odin_art = 0x4F5,
  SCR_OPAQUE_FILE3_maps_createart_odin_fog = 0x4F6,
  SCR_OPAQUE_FILE3_maps_createart_oilrocks_art = 0x4F7,
  SCR_OPAQUE_FILE3_maps_createart_oilrocks_fog = 0x4F8,
  SCR_OPAQUE_FILE3_maps_createart_prologue_art = 0x4F9,
  SCR_OPAQUE_FILE3_maps_createart_prologue_fog = 0x4FA,
  SCR_OPAQUE_FILE3_maps_createart_satfarm_art = 0x4FB,
  SCR_OPAQUE_FILE3_maps_createart_satfarm_b_art = 0x4FC,
  SCR_OPAQUE_FILE3_maps_createart_satfarm_b_fog = 0x4FD,
  SCR_OPAQUE_FILE3_maps_createart_satfarm_fog = 0x4FE,
  SCR_OPAQUE_FILE3_maps_createart_ship_graveyard_art = 0x4FF,
  SCR_OPAQUE_FILE3_maps_createart_ship_graveyard_fog = 0x500,
  SCR_OPAQUE_FILE3_maps_createart_skyway_art = 0x501,
  SCR_OPAQUE_FILE3_maps_createart_skyway_fog = 0x502,
  SCR_OPAQUE_FILE3_maps_createart_youngblood_art = 0x503,
  SCR_OPAQUE_FILE3_maps_createart_youngblood_fog = 0x504,
  SCR_OPAQUE_FILE3_maps_createfx_black_ice_fx = 0x505,
  SCR_OPAQUE_FILE3_maps_createfx_black_ice_sound = 0x506,
  SCR_OPAQUE_FILE3_maps_createfx_carrier_fx = 0x507,
  SCR_OPAQUE_FILE3_maps_createfx_carrier_sound = 0x508,
  SCR_OPAQUE_FILE3_maps_createfx_clockwork_fx = 0x509,
  SCR_OPAQUE_FILE3_maps_createfx_clockwork_sound = 0x50A,
  SCR_OPAQUE_FILE3_maps_createfx_cornered_fx = 0x50B,
  SCR_OPAQUE_FILE3_maps_createfx_cornered_sound = 0x50C,
  SCR_OPAQUE_FILE3_maps_createfx_deer_hunt_fx = 0x50D,
  SCR_OPAQUE_FILE3_maps_createfx_deer_hunt_sound = 0x50E,
  SCR_OPAQUE_FILE3_maps_createfx_enemyhq_fx = 0x50F,
  SCR_OPAQUE_FILE3_maps_createfx_enemyhq_sound = 0x510,
  SCR_OPAQUE_FILE3_maps_createfx_flood_fx = 0x511,
  SCR_OPAQUE_FILE3_maps_createfx_flood_sound = 0x512,
  SCR_OPAQUE_FILE3_maps_createfx_homecoming_fx = 0x513,
  SCR_OPAQUE_FILE3_maps_createfx_homecoming_sound = 0x514,
  SCR_OPAQUE_FILE3_maps_createfx_jungle_ghosts_fx = 0x515,
  SCR_OPAQUE_FILE3_maps_createfx_jungle_ghosts_sound = 0x516,
  SCR_OPAQUE_FILE3_maps_createfx_loki_fx = 0x517,
  SCR_OPAQUE_FILE3_maps_createfx_loki_sound = 0x518,
  SCR_OPAQUE_FILE3_maps_createfx_mp_alien_town_fx = 0x519,
  SCR_OPAQUE_FILE3_maps_createfx_mp_chasm_fx = 0x51A,
  SCR_OPAQUE_FILE3_maps_createfx_mp_dart_fx = 0x51B,
  SCR_OPAQUE_FILE3_maps_createfx_mp_fahrenheit_fx = 0x51C,
  SCR_OPAQUE_FILE3_maps_createfx_mp_flooded_fx = 0x51D,
  SCR_OPAQUE_FILE3_maps_createfx_mp_frag_fx = 0x51E,
  SCR_OPAQUE_FILE3_maps_createfx_mp_hashima_fx = 0x51F,
  SCR_OPAQUE_FILE3_maps_createfx_mp_lonestar_fx = 0x520,
  SCR_OPAQUE_FILE3_maps_createfx_mp_prisonbreak_fx = 0x521,
  SCR_OPAQUE_FILE3_maps_createfx_mp_skeleton_fx = 0x522,
  SCR_OPAQUE_FILE3_maps_createfx_mp_snow_fx = 0x523,
  SCR_OPAQUE_FILE3_maps_createfx_mp_sovereign_fx = 0x524,
  SCR_OPAQUE_FILE3_maps_createfx_mp_strikezone_fx = 0x525,
  SCR_OPAQUE_FILE3_maps_createfx_mp_warhawk_fx = 0x526,
  SCR_OPAQUE_FILE3_maps_createfx_mp_zebra_fx = 0x527,
  SCR_OPAQUE_FILE3_maps_createfx_nml_fx = 0x528,
  SCR_OPAQUE_FILE3_maps_createfx_nml_sound = 0x529,
  SCR_OPAQUE_FILE3_maps_createfx_odin_fx = 0x52A,
  SCR_OPAQUE_FILE3_maps_createfx_odin_sound = 0x52B,
  SCR_OPAQUE_FILE3_maps_createfx_oilrocks_fx = 0x52C,
  SCR_OPAQUE_FILE3_maps_createfx_oilrocks_sound = 0x52D,
  SCR_OPAQUE_FILE3_maps_createfx_prologue_fx = 0x52E,
  SCR_OPAQUE_FILE3_maps_createfx_prologue_sound = 0x52F,
  SCR_OPAQUE_FILE3_maps_createfx_satfarm_b_fx = 0x530,
  SCR_OPAQUE_FILE3_maps_createfx_satfarm_b_sound = 0x531,
  SCR_OPAQUE_FILE3_maps_createfx_satfarm_fx = 0x532,
  SCR_OPAQUE_FILE3_maps_createfx_satfarm_sound = 0x533,
  SCR_OPAQUE_FILE3_maps_createfx_ship_graveyard_fx = 0x534,
  SCR_OPAQUE_FILE3_maps_createfx_ship_graveyard_sound = 0x535,
  SCR_OPAQUE_FILE3_maps_createfx_skyway_fx = 0x536,
  SCR_OPAQUE_FILE3_maps_createfx_skyway_sound = 0x537,
  SCR_OPAQUE_FILE3_maps_createfx_youngblood_fx = 0x538,
  SCR_OPAQUE_FILE3_maps_createfx_youngblood_sound = 0x539,
  SCR_OPAQUE_FILE3_maps_interactive_models__birds = 0x53A,
  SCR_OPAQUE_FILE3_maps_interactive_models__fish = 0x53B,
  SCR_OPAQUE_FILE3_maps_interactive_models__interactive_utility = 0x53C,
  SCR_OPAQUE_FILE3_maps_interactive_models__interactive_utility_sp = 0x53D,
  SCR_OPAQUE_FILE3_maps_interactive_models_bldg_01_dest = 0x53E,
  SCR_OPAQUE_FILE3_maps_interactive_models_egrets = 0x53F,
  SCR_OPAQUE_FILE3_maps_interactive_models_fish_bannerfish = 0x540,
  SCR_OPAQUE_FILE3_maps_interactive_models_fish_school_sardines = 0x541,
  SCR_OPAQUE_FILE3_maps_interactive_models_fish_school_snapper = 0x542,
  SCR_OPAQUE_FILE3_maps_interactive_models_oilrig_hanging_jumpsuit = 0x543,
  SCR_OPAQUE_FILE3_maps_interactive_models_parakeets = 0x544,
  SCR_OPAQUE_FILE3_maps_interactive_models_pigeons = 0x545,
  SCR_OPAQUE_FILE3_maps_interactive_models_vulture = 0x546,
  SCR_OPAQUE_FILE3_maps_mp__animatedmodels = 0x547,
  SCR_OPAQUE_FILE3_maps_mp__areas = 0x548,
  SCR_OPAQUE_FILE3_maps_mp__art = 0x549,
  SCR_OPAQUE_FILE3_maps_mp__audio = 0x54A,
  SCR_OPAQUE_FILE3_maps_mp__awards = 0x54B,
  SCR_OPAQUE_FILE3_maps_mp__breach = 0x54C,
  SCR_OPAQUE_FILE3_maps_mp__compass = 0x54D,
  SCR_OPAQUE_FILE3_maps_mp__createfx = 0x54E,
  SCR_OPAQUE_FILE3_maps_mp__crib = 0x54F,
  SCR_OPAQUE_FILE3_maps_mp__defcon = 0x550,
  SCR_OPAQUE_FILE3_maps_mp__destructables = 0x551,
  SCR_OPAQUE_FILE3_maps_mp__elevator = 0x552,
  SCR_OPAQUE_FILE3_maps_mp__empgrenade = 0x553,
  SCR_OPAQUE_FILE3_maps_mp__entityheadicons = 0x554,
  SCR_OPAQUE_FILE3_maps_mp__events = 0x555,
  SCR_OPAQUE_FILE3_maps_mp__flashgrenades = 0x556,
  SCR_OPAQUE_FILE3_maps_mp__fx = 0x557,
  SCR_OPAQUE_FILE3_maps_mp__global_fx = 0x558,
  SCR_OPAQUE_FILE3_maps_mp__global_fx_code = 0x559,
  SCR_OPAQUE_FILE3_maps_mp__highlights = 0x55A,
  SCR_OPAQUE_FILE3_maps_mp__javelin = 0x55B,
  SCR_OPAQUE_FILE3_maps_mp__laserguidedlauncher = 0x55C,
  SCR_OPAQUE_FILE3_maps_mp__load = 0x55D,
  SCR_OPAQUE_FILE3_maps_mp__matchdata = 0x55E,
  SCR_OPAQUE_FILE3_maps_mp__matchevents = 0x55F,
  SCR_OPAQUE_FILE3_maps_mp__menus = 0x560,
  SCR_OPAQUE_FILE3_maps_mp__minefields = 0x561,
  SCR_OPAQUE_FILE3_maps_mp__movable_cover = 0x562,
  SCR_OPAQUE_FILE3_maps_mp__movers = 0x563,
  SCR_OPAQUE_FILE3_maps_mp__radiation = 0x564,
  SCR_OPAQUE_FILE3_maps_mp__scoreboard = 0x565,
  SCR_OPAQUE_FILE3_maps_mp__shutter = 0x566,
  SCR_OPAQUE_FILE3_maps_mp__stinger = 0x567,
  SCR_OPAQUE_FILE3_maps_mp__teleport = 0x568,
  SCR_OPAQUE_FILE3_maps_mp__utility = 0x569,
  SCR_OPAQUE_FILE3_maps_mp__water = 0x56A,
  SCR_OPAQUE_FILE3_maps_mp__zipline = 0x56B,
  SCR_OPAQUE_FILE3_maps_mp_mp_alien_town_fx = 0x56C,
  SCR_OPAQUE_FILE3_maps_mp_mp_alien_town_precache = 0x56D,
  SCR_OPAQUE_FILE3_maps_mp_mp_chasm_fx = 0x56E,
  SCR_OPAQUE_FILE3_maps_mp_mp_chasm_precache = 0x56F,
  SCR_OPAQUE_FILE3_maps_mp_mp_dart_fx = 0x570,
  SCR_OPAQUE_FILE3_maps_mp_mp_dart_precache = 0x571,
  SCR_OPAQUE_FILE3_maps_mp_mp_fahrenheit_fx = 0x572,
  SCR_OPAQUE_FILE3_maps_mp_mp_fahrenheit_precache = 0x573,
  SCR_OPAQUE_FILE3_maps_mp_mp_flooded_fx = 0x574,
  SCR_OPAQUE_FILE3_maps_mp_mp_flooded_precache = 0x575,
  SCR_OPAQUE_FILE3_maps_mp_mp_frag_fx = 0x576,
  SCR_OPAQUE_FILE3_maps_mp_mp_frag_precache = 0x577,
  SCR_OPAQUE_FILE3_maps_mp_mp_hashima_fx = 0x578,
  SCR_OPAQUE_FILE3_maps_mp_mp_hashima_precache = 0x579,
  SCR_OPAQUE_FILE3_maps_mp_mp_lonestar_fx = 0x57A,
  SCR_OPAQUE_FILE3_maps_mp_mp_lonestar_precache = 0x57B,
  SCR_OPAQUE_FILE3_maps_mp_mp_prisonbreak_fx = 0x57C,
  SCR_OPAQUE_FILE3_maps_mp_mp_prisonbreak_precache = 0x57D,
  SCR_OPAQUE_FILE3_maps_mp_mp_skeleton_fx = 0x57E,
  SCR_OPAQUE_FILE3_maps_mp_mp_skeleton_precache = 0x57F,
  SCR_OPAQUE_FILE3_maps_mp_mp_snow_fx = 0x580,
  SCR_OPAQUE_FILE3_maps_mp_mp_snow_precache = 0x581,
  SCR_OPAQUE_FILE3_maps_mp_mp_sovereign_fx = 0x582,
  SCR_OPAQUE_FILE3_maps_mp_mp_sovereign_precache = 0x583,
  SCR_OPAQUE_FILE3_maps_mp_mp_strikezone_fx = 0x584,
  SCR_OPAQUE_FILE3_maps_mp_mp_warhawk_fx = 0x586,
  SCR_OPAQUE_FILE3_maps_mp_mp_warhawk_precache = 0x587,
  SCR_OPAQUE_FILE3_maps_mp_mp_zebra_fx = 0x588,
  SCR_OPAQUE_FILE3_maps_mp_mp_zebra_precache = 0x589,
  SCR_OPAQUE_FILE4_maps_mp_alien__achievement = 0x58A,
  SCR_OPAQUE_FILE4_maps_mp_alien__airdrop = 0x58B,
  SCR_OPAQUE_FILE4_maps_mp_alien__alien_fx = 0x58C,
  SCR_OPAQUE_FILE4_maps_mp_alien__autosentry_alien = 0x58D,
  SCR_OPAQUE_FILE4_maps_mp_alien__challenge_function = 0x58F,
  SCR_OPAQUE_FILE4_maps_mp_alien__collectibles = 0x590,
  SCR_OPAQUE_FILE4_maps_mp_alien__combat_resources = 0x591,
  SCR_OPAQUE_FILE4_maps_mp_alien__damage = 0x592,
  SCR_OPAQUE_FILE4_maps_mp_alien__death = 0x593,
  SCR_OPAQUE_FILE4_maps_mp_alien__debug = 0x594,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox = 0x595,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_adrenalinebox = 0x596,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_ammo = 0x597,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_currency = 0x598,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_explosives = 0x599,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_juicebox = 0x59A,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_randombox = 0x59B,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_specialammo = 0x59C,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_specialammo_ap = 0x59D,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_specialammo_explo = 0x59E,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_vest = 0x5A0,
  SCR_OPAQUE_FILE4_maps_mp_alien__director = 0x5A1,
  SCR_OPAQUE_FILE4_maps_mp_alien__drill = 0x5A2,
  SCR_OPAQUE_FILE4_maps_mp_alien__globallogic = 0x5A4,
  SCR_OPAQUE_FILE4_maps_mp_alien__hud = 0x5A5,
  SCR_OPAQUE_FILE4_maps_mp_alien__intro_sequence = 0x5A6,
  SCR_OPAQUE_FILE4_maps_mp_alien__lasedstrike_alien = 0x5A7,
  SCR_OPAQUE_FILE4_maps_mp_alien__laststand = 0x5A8,
  SCR_OPAQUE_FILE4_maps_mp_alien__music_and_dialog = 0x5A9,
  SCR_OPAQUE_FILE4_maps_mp_alien__nuke = 0x5AA,
  SCR_OPAQUE_FILE4_maps_mp_alien__outline_proto = 0x5AB,
  SCR_OPAQUE_FILE4_maps_mp_alien__perk_utility = 0x5AC,
  SCR_OPAQUE_FILE4_maps_mp_alien__perkfunctions = 0x5AD,
  SCR_OPAQUE_FILE4_maps_mp_alien__perks = 0x5AE,
  SCR_OPAQUE_FILE4_maps_mp_alien__persistence = 0x5AF,
  SCR_OPAQUE_FILE4_maps_mp_alien__pillage = 0x5B0,
  SCR_OPAQUE_FILE4_maps_mp_alien__prestige = 0x5B1,
  SCR_OPAQUE_FILE4_maps_mp_alien__progression = 0x5B2,
  SCR_OPAQUE_FILE4_maps_mp_alien__spawn_director = 0x5B3,
  SCR_OPAQUE_FILE4_maps_mp_alien__spawnlogic = 0x5B4,
  SCR_OPAQUE_FILE4_maps_mp_alien__switchblade_alien = 0x5B5,
  SCR_OPAQUE_FILE4_maps_mp_alien__trap = 0x5B6,
  SCR_OPAQUE_FILE4_maps_mp_alien__unlock = 0x5B7,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__battlebuddy = 0x5B9,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__battlechatter_mp = 0x5BA,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__callbacksetup = 0x5BB,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__class = 0x5BC,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__clientids = 0x5BD,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__damage = 0x5BE,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__damagefeedback = 0x5BF,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__deathicons = 0x5C0,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__dev = 0x5C1,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__door = 0x5C2,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__friendicons = 0x5C3,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__gamelogic = 0x5C4,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__gameobjects = 0x5C5,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__gamescore = 0x5C6,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__globalentities = 0x5C7,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__globallogic = 0x5C8,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__hardpoints = 0x5C9,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__healthoverlay = 0x5CA,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__horde_crates = 0x5CB,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__horde_laststand = 0x5CC,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__horde_util = 0x5CD,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__hostmigration = 0x5CE,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__hud = 0x5CF,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__hud_message = 0x5D0,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__hud_util = 0x5D1,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__intel = 0x5D2,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__intelchallenges = 0x5D3,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__killcam = 0x5D4,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__missions = 0x5D6,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__music_and_dialog = 0x5D7,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__objpoints = 0x5D8,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__outline = 0x5D9,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__persistence = 0x5DA,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__playercards = 0x5DB,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__playerlogic = 0x5DC,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__rank = 0x5DD,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__serversettings = 0x5DE,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__shellshock = 0x5DF,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__spawnfactor = 0x5E0,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__spawnlogic = 0x5E1,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__spawnscoring = 0x5E2,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__spectating = 0x5E3,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__teams = 0x5E4,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__trophy_system = 0x5E5,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__tweakables = 0x5E6,
  SCR_OPAQUE_FILE4_maps_mp_gametypes__weapons = 0x5E7,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__a10 = 0x5E8,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__aamissile = 0x5EA,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__ac130 = 0x5EC,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__agent_killstreak = 0x5ED,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__air_superiority = 0x5EE,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__airdrop = 0x5EF,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__airstrike = 0x5F0,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__autosentry = 0x5F1,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__autoshotgun = 0x5F2,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__deployablebox = 0x5F4,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__deployablebox_ammo = 0x5F5,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__deployablebox_grenades = 0x5F6,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__deployablebox_gun = 0x5F7,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__deployablebox_juicebox = 0x5F8,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__deployablebox_vest = 0x5F9,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__designator_grenade = 0x5FA,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__dog_killstreak = 0x5FB,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__dronehive = 0x5FC,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__emp = 0x5FD,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__escortairdrop = 0x5FF,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__flares = 0x600,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__gas_airstrike = 0x601,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__harrier = 0x602,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__helicopter = 0x603,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__helicopter_flock = 0x604,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__helicopter_guard = 0x605,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__helicopter_pilot = 0x606,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__helisniper = 0x607,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__ims = 0x609,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__jammer = 0x60A,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__juggernaut = 0x60B,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__killstreaks = 0x60C,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__killstreaks_init = 0x60D,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__lasedstrike = 0x60E,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__mobilemortar = 0x60F,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__mrsiartillery = 0x610,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__nuke = 0x611,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__odin = 0x612,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__perkstreaks = 0x613,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__placeable_barrier = 0x615,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__plane = 0x616,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__portableaoegenerator = 0x617,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__remotemissile = 0x618,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__remotetank = 0x61A,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__remoteturret = 0x61B,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__remoteuav = 0x61C,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__tank = 0x61D,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__teamammorefill = 0x61E,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__uav = 0x61F,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__uplink = 0x620,
  SCR_OPAQUE_FILE4_maps_mp_killstreaks__vanguard = 0x621,
  SCR_OPAQUE_FILE4_maps_mp_perks__abilities = 0x622,
  SCR_OPAQUE_FILE4_maps_mp_perks__perkfunctions = 0x623,
  SCR_OPAQUE_FILE4_maps_mp_perks__perks = 0x624,
  SCR_OPAQUE_STRING___smangles = 0x625,
  SCR_OPAQUE_STRING___smid = 0x626,
  SCR_OPAQUE_STRING___smname = 0x627,
  SCR_OPAQUE_STRING___smorigin = 0x628,
  SCR_OPAQUE_STRING__add_as_apache_target_on_spawn_iternal = 0x629,
  SCR_OPAQUE_STRING__ai_delete = 0x62A,
  SCR_OPAQUE_STRING__ai_group = 0x62B,
  SCR_OPAQUE_STRING__ai_health = 0x62C,
  SCR_OPAQUE_STRING__aliveplayers = 0x62D,
  SCR_OPAQUE_STRING__allies = 0x62E,
  SCR_OPAQUE_STRING__ally = 0x630,
  SCR_OPAQUE_STRING__ally_dist = 0x632,
  SCR_OPAQUE_STRING__ally_get_pitch_down_aim_weight = 0x633,
  SCR_OPAQUE_STRING__ally_get_pitch_up_aim_weight = 0x634,
  SCR_OPAQUE_STRING__ally_get_yaw_left_aim_weight = 0x635,
  SCR_OPAQUE_STRING__ally_get_yaw_right_aim_weight = 0x636,
  SCR_OPAQUE_STRING__ally_is_current_volume = 0x637,
  SCR_OPAQUE_STRING__ally_set_last_volume = 0x638,
  SCR_OPAQUE_STRING__ally_transition_to_weight = 0x639,
  SCR_OPAQUE_STRING__ally_trigs = 0x63A,
  SCR_OPAQUE_STRING__anim = 0x63B,
  SCR_OPAQUE_STRING__anim_node = 0x63C,
  SCR_OPAQUE_STRING__animactive = 0x63D,
  SCR_OPAQUE_STRING__animmode = 0x63F,
  SCR_OPAQUE_STRING__animname = 0x640,
  SCR_OPAQUE_STRING__array_wait = 0x641,
  SCR_OPAQUE_STRING__aud_zip_wind_1 = 0x642,
  SCR_OPAQUE_STRING__audio = 0x643,
  SCR_OPAQUE_STRING__audio_trigger = 0x644,
  SCR_OPAQUE_STRING__autosave_game_now = 0x645,
  SCR_OPAQUE_STRING__autosave_game_now_nochecks = 0x646,
  SCR_OPAQUE_STRING__autosave_game_now_notrestart = 0x647,
  SCR_OPAQUE_STRING__autosave_stealthcheck = 0x648,
  SCR_OPAQUE_STRING__autosave_stealthcheck_nml = 0x649,
  SCR_OPAQUE_STRING__battlechatter_off = 0x64A,
  SCR_OPAQUE_STRING__battlechatter_on = 0x64B,
  SCR_OPAQUE_STRING__beginlocationselection = 0x64C,
  SCR_OPAQUE_STRING__boss = 0x64D,
  SCR_OPAQUE_STRING__box_setactivehelper = 0x64E,
  SCR_OPAQUE_STRING__bravo = 0x64F,
  SCR_OPAQUE_STRING__clearalltextafterhudelem = 0x650,
  SCR_OPAQUE_STRING__clearperks = 0x651,
  SCR_OPAQUE_STRING__col = 0x652,
  SCR_OPAQUE_STRING__color = 0x653,
  SCR_OPAQUE_STRING__color_friendly_spawners = 0x654,
  SCR_OPAQUE_STRING__color_ng = 0x655,
  SCR_OPAQUE_STRING__colors_go_line = 0x656,
  SCR_OPAQUE_STRING__command = 0x657,
  SCR_OPAQUE_STRING__current_goal_volume = 0x659,
  SCR_OPAQUE_STRING__current_index = 0x65A,
  SCR_OPAQUE_STRING__custom_anim = 0x65B,
  SCR_OPAQUE_STRING__custom_anim_loop = 0x65C,
  SCR_OPAQUE_STRING__custom_anim_thread = 0x65D,
  SCR_OPAQUE_STRING__death_anims = 0x65E,
  SCR_OPAQUE_STRING__delay = 0x65F,
  SCR_OPAQUE_STRING__destroy = 0x660,
  SCR_OPAQUE_STRING__destructible_preanims = 0x661,
  SCR_OPAQUE_STRING__destructible_preanimtree = 0x662,
  SCR_OPAQUE_STRING__detachall = 0x663,
  SCR_OPAQUE_STRING__disableoffhandweapons = 0x664,
  SCR_OPAQUE_STRING__disableusability = 0x665,
  SCR_OPAQUE_STRING__disableweapon = 0x666,
  SCR_OPAQUE_STRING__disableweaponswitch = 0x667,
  SCR_OPAQUE_STRING__dmg = 0x668,
  SCR_OPAQUE_STRING__dog_guard = 0x669,
  SCR_OPAQUE_STRING__dog_too_close_to_owner = 0x66A,
  SCR_OPAQUE_STRING__domflageffect = 0x66B,
  SCR_OPAQUE_STRING__effect_keys = 0x66D,
  SCR_OPAQUE_STRING__effecttype = 0x66E,
  SCR_OPAQUE_STRING__enableusability = 0x670,
  SCR_OPAQUE_STRING__enableweapon = 0x671,
  SCR_OPAQUE_STRING__enableweaponswitch = 0x672,
  SCR_OPAQUE_STRING__end = 0x673,
  SCR_OPAQUE_STRING__end_swim = 0x674,
  SCR_OPAQUE_STRING__end_wreck = 0x675,
  SCR_OPAQUE_STRING__endbeach = 0x676,
  SCR_OPAQUE_STRING__enemies = 0x677,
  SCR_OPAQUE_STRING__enemy = 0x678,
  SCR_OPAQUE_STRING__enemy_num = 0x679,
  SCR_OPAQUE_STRING__engine_room = 0x67A,
  SCR_OPAQUE_STRING__essential_part = 0x67B,
  SCR_OPAQUE_STRING__exfil = 0x67C,
  SCR_OPAQUE_STRING__exfil_heli = 0x67D,
  SCR_OPAQUE_STRING__exit_menu = 0x67E,
  SCR_OPAQUE_STRING__explosion_fquakepower = 0x67F,
  SCR_OPAQUE_STRING__explosion_iblastradius = 0x680,
  SCR_OPAQUE_STRING__explosion_idamagemax = 0x681,
  SCR_OPAQUE_STRING__explosion_idamagemin = 0x682,
  SCR_OPAQUE_STRING__explosion_imaxrange = 0x683,
  SCR_OPAQUE_STRING__explosion_iminrange = 0x684,
  SCR_OPAQUE_STRING__explosion_iquakeradius = 0x685,
  SCR_OPAQUE_STRING__explosion_iquaketime = 0x686,
  SCR_OPAQUE_STRING__explosion_last_incoming = 0x687,
  SCR_OPAQUE_STRING__explosion_last_sound = 0x688,
  SCR_OPAQUE_STRING__extra_autosave_checks = 0x689,
  SCR_OPAQUE_STRING__findunobstructedfiringpointhelper = 0x68A,
  SCR_OPAQUE_STRING__fire = 0x68B,
  SCR_OPAQUE_STRING__fire_damage_ent = 0x68C,
  SCR_OPAQUE_STRING__fire_suppression = 0x68D,
  SCR_OPAQUE_STRING__fires = 0x68E,
  SCR_OPAQUE_STRING__firework_large = 0x68F,
  SCR_OPAQUE_STRING__firework_sunlight = 0x690,
  SCR_OPAQUE_STRING__firework_wait = 0x691,
  SCR_OPAQUE_STRING__fireworks_cleanup = 0x692,
  SCR_OPAQUE_STRING__fireworks_internal = 0x693,
  SCR_OPAQUE_STRING__fireworks_meteor_internal = 0x694,
  SCR_OPAQUE_STRING__first_frame_anim = 0x695,
  SCR_OPAQUE_STRING__flag_wait_trigger = 0x696,
  SCR_OPAQUE_STRING__flags = 0x697,
  SCR_OPAQUE_STRING__flarestack = 0x698,
  SCR_OPAQUE_STRING__force_kill = 0x699,
  SCR_OPAQUE_STRING__freevehicle = 0x69A,
  SCR_OPAQUE_STRING__fx = 0x69B,
  SCR_OPAQUE_STRING__get_dummy = 0x69C,
  SCR_OPAQUE_STRING__get_guard_node_behind_player = 0x69D,
  SCR_OPAQUE_STRING__get_location_sunlight = 0x69E,
  SCR_OPAQUE_STRING__get_player_tank_target = 0x69F,
  SCR_OPAQUE_STRING__getplayerdata = 0x6A0,
  SCR_OPAQUE_STRING__getplayerscore = 0x6A1,
  SCR_OPAQUE_STRING__getradarstrength = 0x6A2,
  SCR_OPAQUE_STRING__getvehiclespawnerarray_by_spawngroup = 0x6A5,
  SCR_OPAQUE_STRING__giveweapon = 0x6A6,
  SCR_OPAQUE_STRING__global_fx_ents = 0x6A7,
  SCR_OPAQUE_STRING__globals = 0x6A8,
  SCR_OPAQUE_STRING__gopath = 0x6A9,
  SCR_OPAQUE_STRING__hangar = 0x6AA,
  SCR_OPAQUE_STRING__hasperk = 0x6AB,
  SCR_OPAQUE_STRING__health_death = 0x6AC,
  SCR_OPAQUE_STRING__heli_ai_pre_move_func_internal = 0x6AD,
  SCR_OPAQUE_STRING__hint = 0x6AE,
  SCR_OPAQUE_STRING__hint_stick_get_config_suffix = 0x6AF,
  SCR_OPAQUE_STRING__hint_stick_update_breakfunc = 0x6B0,
  SCR_OPAQUE_STRING__hint_stick_update_string = 0x6B1,
  SCR_OPAQUE_STRING__ignore_settings_old = 0x6B2,
  SCR_OPAQUE_STRING__index = 0x6B3,
  SCR_OPAQUE_STRING__init = 0x6B4,
  SCR_OPAQUE_STRING__interactive = 0x6B5,
  SCR_OPAQUE_STRING__ishelicopter = 0x6B8,
  SCR_OPAQUE_STRING__kill_fx = 0x6B9,
  SCR_OPAQUE_STRING__lastanimtime = 0x6BA,
  SCR_OPAQUE_STRING__lc = 0x6BC,
  SCR_OPAQUE_STRING__lc_persists = 0x6BD,
  SCR_OPAQUE_STRING__lever_col = 0x6BE,
  SCR_OPAQUE_STRING__linked_triggers = 0x6BF,
  SCR_OPAQUE_STRING__loadstarted = 0x6C0,
  SCR_OPAQUE_STRING__max_ai = 0x6C1,
  SCR_OPAQUE_STRING__mgoff = 0x6C3,
  SCR_OPAQUE_STRING__missile_cleanup_fake_target = 0x6C5,
  SCR_OPAQUE_STRING__missile_earthquake = 0x6C6,
  SCR_OPAQUE_STRING__missile_start_lockon_notify = 0x6C7,
  SCR_OPAQUE_STRING__mount_snowmobile = 0x6C9,
  SCR_OPAQUE_STRING__nextcoverprint = 0x6CA,
  SCR_OPAQUE_STRING__nextmission = 0x6CB,
  SCR_OPAQUE_STRING__notetrackfx = 0x6CC,
  SCR_OPAQUE_STRING__objective_delete = 0x6CE,
  SCR_OPAQUE_STRING__old_goalradius = 0x6CF,
  SCR_OPAQUE_STRING__patrol_endon_spotted_flag = 0x6D0,
  SCR_OPAQUE_STRING__pick_best_node_behind_owner = 0x6D1,
  SCR_OPAQUE_STRING__pick_best_node_heeled_by_owner = 0x6D2,
  SCR_OPAQUE_STRING__pipe_deck = 0x6D3,
  SCR_OPAQUE_STRING__pipe_fx_time = 0x6D4,
  SCR_OPAQUE_STRING__pipe_methods = 0x6D5,
  SCR_OPAQUE_STRING__pipes = 0x6D6,
  SCR_OPAQUE_STRING__playlocalsound = 0x6D7,
  SCR_OPAQUE_STRING__precache = 0x6D8,
  SCR_OPAQUE_STRING__radio_queue = 0x6D9,
  SCR_OPAQUE_STRING__refinery = 0x6DA,
  SCR_OPAQUE_STRING__remote_turrets = 0x6DB,
  SCR_OPAQUE_STRING__remoteturret_loc_table = 0x6DC,
  SCR_OPAQUE_STRING__remove_nodes_too_close = 0x6DD,
  SCR_OPAQUE_STRING__restorepreviousnameplatematerial = 0x6DE,
  SCR_OPAQUE_STRING__retreat_current_volumes = 0x6DF,
  SCR_OPAQUE_STRING__retreat_final = 0x6E0,
  SCR_OPAQUE_STRING__retreat_standby = 0x6E1,
  SCR_OPAQUE_STRING__rpl_legs_is_diagonal = 0x6E4,
  SCR_OPAQUE_STRING__rpl_legs_is_horizontal = 0x6E5,
  SCR_OPAQUE_STRING__sat = 0x6E6,
  SCR_OPAQUE_STRING__script_exploders = 0x6E7,
  SCR_OPAQUE_STRING__scripted_spawn = 0x6E8,
  SCR_OPAQUE_STRING__set_anim_time = 0x6E9,
  SCR_OPAQUE_STRING__setactionslot = 0x6EA,
  SCR_OPAQUE_STRING__setextraperks = 0x6EB,
  SCR_OPAQUE_STRING__sethighestmissionifnotcheating = 0x6EC,
  SCR_OPAQUE_STRING__setmissiondiffstringifnotcheating = 0x6ED,
  SCR_OPAQUE_STRING__setnameplatematerial = 0x6EE,
  SCR_OPAQUE_STRING__setperk = 0x6EF,
  SCR_OPAQUE_STRING__setplayerdata = 0x6F0,
  SCR_OPAQUE_STRING__setplayerscore = 0x6F1,
  SCR_OPAQUE_STRING__setswitchnode = 0x6F2,
  SCR_OPAQUE_STRING__setteamscore = 0x6F3,
  SCR_OPAQUE_STRING__setup_chair = 0x6F4,
  SCR_OPAQUE_STRING__setvehgoalpos = 0x6F5,
  SCR_OPAQUE_STRING__setvehgoalpos_wrap = 0x6F6,
  SCR_OPAQUE_STRING__setvehgoalposadheretomesh = 0x6F7,
  SCR_OPAQUE_STRING__sleeves_flap_internal = 0x6F8,
  SCR_OPAQUE_STRING__sleeves_idle = 0x6F9,
  SCR_OPAQUE_STRING__slomo_breach_blowback_guy = 0x6FA,
  SCR_OPAQUE_STRING__slomo_breach_chair_guy_animated = 0x6FC,
  SCR_OPAQUE_STRING__slomo_breach_chair_guy_normal = 0x6FD,
  SCR_OPAQUE_STRING__slomo_breach_desk_guy = 0x6FE,
  SCR_OPAQUE_STRING__slomo_breach_executed_guy = 0x6FF,
  SCR_OPAQUE_STRING__slomo_breach_executed_guy_pushed_to_floor = 0x700,
  SCR_OPAQUE_STRING__slomo_breach_executioner_knife = 0x701,
  SCR_OPAQUE_STRING__slomo_breach_executioner_pistol = 0x702,
  SCR_OPAQUE_STRING__slomo_breach_fightback_guy = 0x703,
  SCR_OPAQUE_STRING__slomo_breach_hostage_react = 0x704,
  SCR_OPAQUE_STRING__slomo_breach_knife_charger = 0x705,
  SCR_OPAQUE_STRING__slomo_breach_knife_hostage_death = 0x706,
  SCR_OPAQUE_STRING__slomo_breach_pistol_guy = 0x707,
  SCR_OPAQUE_STRING__slowmo_breach_funcs = 0x708,
  SCR_OPAQUE_STRING__slowmo_functions = 0x709,
  SCR_OPAQUE_STRING__sound = 0x70A,
  SCR_OPAQUE_STRING__source = 0x70B,
  SCR_OPAQUE_STRING__source_base = 0x70C,
  SCR_OPAQUE_STRING__spawner_mg42_think = 0x70D,
  SCR_OPAQUE_STRING__spawner_stealth_default = 0x70E,
  SCR_OPAQUE_STRING__spawner_stealth_dog = 0x70F,
  SCR_OPAQUE_STRING__start = 0x710,
  SCR_OPAQUE_STRING__stealth = 0x711,
  SCR_OPAQUE_STRING__stealth_move_detection_cap = 0x712,
  SCR_OPAQUE_STRING__suicide = 0x713,
  SCR_OPAQUE_STRING__tag_entity = 0x714,
  SCR_OPAQUE_STRING__takeweaponsexcept = 0x715,
  SCR_OPAQUE_STRING__tanks = 0x717,
  SCR_OPAQUE_STRING__target = 0x718,
  SCR_OPAQUE_STRING__target_vols = 0x719,
  SCR_OPAQUE_STRING__thruster_ents = 0x71A,
  SCR_OPAQUE_STRING__thruster_rig = 0x71B,
  SCR_OPAQUE_STRING__timeout = 0x71C,
  SCR_OPAQUE_STRING__timeout_pause_on_death_and_prematch = 0x71D,
  SCR_OPAQUE_STRING__traverses = 0x71F,
  SCR_OPAQUE_STRING__trigger_handle_triggering = 0x720,
  SCR_OPAQUE_STRING__turn_off_spec_sun_lerp = 0x721,
  SCR_OPAQUE_STRING__turn_on_spec_sun_lerp = 0x722,
  SCR_OPAQUE_STRING__unsetextraperks = 0x723,
  SCR_OPAQUE_STRING__unsetperk = 0x724,
  SCR_OPAQUE_STRING__up = 0x725,
  SCR_OPAQUE_STRING__updateenemyusable = 0x726,
  SCR_OPAQUE_STRING__updateteamusable = 0x727,
  SCR_OPAQUE_STRING__useperkenabled = 0x728,
  SCR_OPAQUE_STRING__validateattacker = 0x729,
  SCR_OPAQUE_STRING__vehicle_badplace = 0x72A,
  SCR_OPAQUE_STRING__vehicle_effect = 0x72B,
  SCR_OPAQUE_STRING__vehicle_is_crashing = 0x72C,
  SCR_OPAQUE_STRING__vehicle_landvehicle = 0x72D,
  SCR_OPAQUE_STRING__vehicle_paths = 0x72E,
  SCR_OPAQUE_STRING__vehicle_resume_named = 0x72F,
  SCR_OPAQUE_STRING__vehicle_spawn = 0x730,
  SCR_OPAQUE_STRING__vehicle_stop_named = 0x731,
  SCR_OPAQUE_STRING__vehicle_unload = 0x732,
  SCR_OPAQUE_STRING__vehicles = 0x733,
  SCR_OPAQUE_STRING__vignette_active = 0x734,
  SCR_OPAQUE_STRING__vision_sets_active = 0x735,
  SCR_OPAQUE_STRING__vols = 0x736,
  SCR_OPAQUE_STRING__walkway_brush = 0x738,
  SCR_OPAQUE_STRING__walkway_brush_node = 0x739,
  SCR_OPAQUE_STRING__wavedelay = 0x73A,
  SCR_OPAQUE_STRING__waveplayerspawnindex = 0x73B,
  SCR_OPAQUE_STRING__window_imp = 0x73C,
  SCR_OPAQUE_STRING_a = 0x73D,
  SCR_OPAQUE_STRING_a10_30mm_fire = 0x73E,
  SCR_OPAQUE_STRING_a10_allies_target_logic = 0x73F,
  SCR_OPAQUE_STRING_a10_ambient_clouds = 0x740,
  SCR_OPAQUE_STRING_a10_balcony_strafe_physics = 0x742,
  SCR_OPAQUE_STRING_a10_bridge_strike = 0x743,
  SCR_OPAQUE_STRING_a10_cockpit_breathing = 0x744,
  SCR_OPAQUE_STRING_a10_crash_approach = 0x745,
  SCR_OPAQUE_STRING_a10_crash_impact = 0x746,
  SCR_OPAQUE_STRING_a10_create_fake_ai = 0x747,
  SCR_OPAQUE_STRING_a10_create_fake_player = 0x748,
  SCR_OPAQUE_STRING_a10_delayed_hint = 0x749,
  SCR_OPAQUE_STRING_a10_do_shots = 0x74A,
  SCR_OPAQUE_STRING_a10_enable_target = 0x74B,
  SCR_OPAQUE_STRING_a10_endrun_shooting = 0x74C,
  SCR_OPAQUE_STRING_a10_enemies_target_logic = 0x74D,
  SCR_OPAQUE_STRING_a10_explode = 0x74E,
  SCR_OPAQUE_STRING_a10_fake_ai_death = 0x74F,
  SCR_OPAQUE_STRING_a10_fire_hint_func = 0x750,
  SCR_OPAQUE_STRING_a10_fire_missiles = 0x751,
  SCR_OPAQUE_STRING_a10_freezebuffer = 0x754,
  SCR_OPAQUE_STRING_a10_get_player_end_position = 0x755,
  SCR_OPAQUE_STRING_a10_gun_dives = 0x756,
  SCR_OPAQUE_STRING_a10_handledamage = 0x757,
  SCR_OPAQUE_STRING_a10_hint_func = 0x758,
  SCR_OPAQUE_STRING_a10_hud_connected_pulse = 0x75A,
  SCR_OPAQUE_STRING_a10_hud_grain = 0x75B,
  SCR_OPAQUE_STRING_a10_hud_set_alpha = 0x75C,
  SCR_OPAQUE_STRING_a10_hud_set_altitude = 0x75D,
  SCR_OPAQUE_STRING_a10_hud_set_connection = 0x75E,
  SCR_OPAQUE_STRING_a10_hud_set_coords = 0x75F,
  SCR_OPAQUE_STRING_a10_hud_set_id = 0x760,
  SCR_OPAQUE_STRING_a10_hud_set_speed = 0x761,
  SCR_OPAQUE_STRING_a10_inital_fire_check = 0x762,
  SCR_OPAQUE_STRING_a10_kill_notification = 0x763,
  SCR_OPAQUE_STRING_a10_lastweapon = 0x764,
  SCR_OPAQUE_STRING_a10_mechanic_off = 0x765,
  SCR_OPAQUE_STRING_a10_mechanic_skip_end = 0x766,
  SCR_OPAQUE_STRING_a10_missile_cleanup = 0x767,
  SCR_OPAQUE_STRING_a10_missile_dives = 0x768,
  SCR_OPAQUE_STRING_a10_missile_lockon = 0x769,
  SCR_OPAQUE_STRING_a10_missile_set_target = 0x76A,
  SCR_OPAQUE_STRING_a10_originalaudiozone = 0x76B,
  SCR_OPAQUE_STRING_a10_player_30mm = 0x76C,
  SCR_OPAQUE_STRING_a10_player_30mm_fire = 0x76D,
  SCR_OPAQUE_STRING_a10_player_aftermission_report = 0x76E,
  SCR_OPAQUE_STRING_a10_player_hit_hudelem = 0x76F,
  SCR_OPAQUE_STRING_a10_player_hit_strafe_vehicles = 0x770,
  SCR_OPAQUE_STRING_a10_player_hud_cleanup = 0x771,
  SCR_OPAQUE_STRING_a10_player_init = 0x772,
  SCR_OPAQUE_STRING_a10_player_init_hud = 0x773,
  SCR_OPAQUE_STRING_a10_player_kills = 0x774,
  SCR_OPAQUE_STRING_a10_player_lockon_warning = 0x775,
  SCR_OPAQUE_STRING_a10_player_shot_think = 0x776,
  SCR_OPAQUE_STRING_a10_precache = 0x777,
  SCR_OPAQUE_STRING_a10_remove_target = 0x778,
  SCR_OPAQUE_STRING_a10_spawn_funcs = 0x779,
  SCR_OPAQUE_STRING_a10_squadron_friendlyfire_watcher = 0x77A,
  SCR_OPAQUE_STRING_a10_squadron_logic = 0x77B,
  SCR_OPAQUE_STRING_a10_squadron_shoot = 0x77C,
  SCR_OPAQUE_STRING_a10_squadron_tower_crash = 0x77D,
  SCR_OPAQUE_STRING_a10_squadron_tower_crash_flares_warthog = 0x77E,
  SCR_OPAQUE_STRING_a10_squadron_tower_crash_missile = 0x77F,
  SCR_OPAQUE_STRING_a10_strafe_cleanup = 0x780,
  SCR_OPAQUE_STRING_a10_strafe_get_location_spawner = 0x781,
  SCR_OPAQUE_STRING_a10_strafe_groups = 0x782,
  SCR_OPAQUE_STRING_a10_strafe_impact = 0x783,
  SCR_OPAQUE_STRING_a10_strafe_impact_earthquake = 0x784,
  SCR_OPAQUE_STRING_a10_strafe_impacts = 0x785,
  SCR_OPAQUE_STRING_a10_strafe_mechanic = 0x786,
  SCR_OPAQUE_STRING_a10_strafe_respotioning = 0x787,
  SCR_OPAQUE_STRING_a10_strafe_respotioning_dialogue = 0x788,
  SCR_OPAQUE_STRING_a10_strafe_run = 0x789,
  SCR_OPAQUE_STRING_a10_strafe_run_cheap = 0x78A,
  SCR_OPAQUE_STRING_a10_strafe_use_nag = 0x78B,
  SCR_OPAQUE_STRING_a10_target_logic = 0x78C,
  SCR_OPAQUE_STRING_a10_targeting_think = 0x78D,
  SCR_OPAQUE_STRING_a10_targeting_watcher = 0x78E,
  SCR_OPAQUE_STRING_a10_uses = 0x78F,
  SCR_OPAQUE_STRING_a10_vista_strafe_group = 0x791,
  SCR_OPAQUE_STRING_a10_vista_strafe_group_delete = 0x792,
  SCR_OPAQUE_STRING_a10_vista_strafe_mig = 0x793,
  SCR_OPAQUE_STRING_a10_wait_fire_missile = 0x794,
  SCR_OPAQUE_STRING_a10_wait_start_firing = 0x795,
  SCR_OPAQUE_STRING_a10_wait_stop_firing = 0x796,
  SCR_OPAQUE_STRING_a10_warthog_strafe = 0x797,
  SCR_OPAQUE_STRING_a10endposition = 0x798,
  SCR_OPAQUE_STRING_a10fakeplayer = 0x799,
  SCR_OPAQUE_STRING_a10splinesout = 0x79B,
  SCR_OPAQUE_STRING_a10strafeactive = 0x79C,
  SCR_OPAQUE_STRING_a_bad_guys = 0x79E,
  SCR_OPAQUE_STRING_a_globals = 0x7A1,
  SCR_OPAQUE_STRING_a_guys = 0x7A2,
  SCR_OPAQUE_STRING_a_rel = 0x7A3,
  SCR_OPAQUE_STRING_aa_add_event = 0x7A4,
  SCR_OPAQUE_STRING_aa_add_event_float = 0x7A5,
  SCR_OPAQUE_STRING_aa_init_stats = 0x7A6,
  SCR_OPAQUE_STRING_aa_missile_fire = 0x7A7,
  SCR_OPAQUE_STRING_aa_player_ads_tracking = 0x7A8,
  SCR_OPAQUE_STRING_aa_player_attacks_enemy_with_ads = 0x7A9,
  SCR_OPAQUE_STRING_aa_player_health_tracking = 0x7AA,
  SCR_OPAQUE_STRING_aa_print_vals = 0x7AB,
  SCR_OPAQUE_STRING_aa_should_start_fresh = 0x7AC,
  SCR_OPAQUE_STRING_aa_time_tracking = 0x7AD,
  SCR_OPAQUE_STRING_aa_update_flags = 0x7AE,
  SCR_OPAQUE_STRING_aalauncherammo = 0x7AF,
  SCR_OPAQUE_STRING_aamissilelaunchhorz = 0x7B0,
  SCR_OPAQUE_STRING_aamissilelaunchtargetdist = 0x7B1,
  SCR_OPAQUE_STRING_aamissilelaunchvert = 0x7B2,
  SCR_OPAQUE_STRING_aammissilelaunchtargetdist = 0x7B3,
  SCR_OPAQUE_STRING_aas_guys_spawn_logic = 0x7B4,
  SCR_OPAQUE_STRING_aasoundmanager = 0x7B6,
  SCR_OPAQUE_STRING_abanglecutoff = 0x7B7,
  SCR_OPAQUE_STRING_abilitychosen = 0x7B8,
  SCR_OPAQUE_STRING_abilitymaxval = 0x7B9,
  SCR_OPAQUE_STRING_abort = 0x7BA,
  SCR_OPAQUE_STRING_abort_attack_requested = 0x7BB,
  SCR_OPAQUE_STRING_abort_count = 0x7BC,
  SCR_OPAQUE_STRING_abortapproachifthreatened = 0x7BE,
  SCR_OPAQUE_STRING_abortlevel = 0x7BF,
  SCR_OPAQUE_STRING_abortreloadwhencanshoot = 0x7C0,
  SCR_OPAQUE_STRING_abouttobebreached = 0x7C1,
  SCR_OPAQUE_STRING_above_water_start_setup = 0x7C2,
  SCR_OPAQUE_STRING_absangleclamp180 = 0x7C3,
  SCR_OPAQUE_STRING_absolute = 0x7C4,
  SCR_OPAQUE_STRING_absyawtoangles = 0x7C5,
  SCR_OPAQUE_STRING_absyawtoenemy = 0x7C6,
  SCR_OPAQUE_STRING_absyawtoenemy2d = 0x7C7,
  SCR_OPAQUE_STRING_ac130 = 0x7C9,
  SCR_OPAQUE_STRING_ac130_altscene = 0x7CA,
  SCR_OPAQUE_STRING_ac130_attack_random = 0x7CB,
  SCR_OPAQUE_STRING_ac130_attacked_player_count = 0x7CC,
  SCR_OPAQUE_STRING_ac130_constant_target = 0x7CD,
  SCR_OPAQUE_STRING_ac130_direct_attack_path = 0x7CE,
  SCR_OPAQUE_STRING_ac130_final_life = 0x7CF,
  SCR_OPAQUE_STRING_ac130_flood_respawn = 0x7D0,
  SCR_OPAQUE_STRING_ac130_kill_player = 0x7D1,
  SCR_OPAQUE_STRING_ac130_last_105_fire_time = 0x7D2,
  SCR_OPAQUE_STRING_ac130_magic_105 = 0x7D3,
  SCR_OPAQUE_STRING_ac130_magic_105_fake = 0x7D4,
  SCR_OPAQUE_STRING_ac130_magic_105_impact = 0x7D5,
  SCR_OPAQUE_STRING_ac130_magic_bullet_fake = 0x7D7,
  SCR_OPAQUE_STRING_ac130_missile_take_hit = 0x7DA,
  SCR_OPAQUE_STRING_ac130_spawn = 0x7DC,
  SCR_OPAQUE_STRING_ac130_speed = 0x7DD,
  SCR_OPAQUE_STRING_ac130_use_duration = 0x7DE,
  SCR_OPAQUE_STRING_ac130gunner = 0x7DF,
  SCR_OPAQUE_STRING_ac130inuse = 0x7E0,
  SCR_OPAQUE_STRING_ac130player = 0x7E1,
  SCR_OPAQUE_STRING_ac130queue = 0x7E2,
  SCR_OPAQUE_STRING_ac130shellshock = 0x7E3,
  SCR_OPAQUE_STRING_ac_130 = 0x7E4,
  SCR_OPAQUE_STRING_accaracy_mod = 0x7E5,
  SCR_OPAQUE_STRING_accel = 0x7E6,
  SCR_OPAQUE_STRING_accel_factor = 0x7E7,
  SCR_OPAQUE_STRING_accel_time = 0x7E8,
  SCR_OPAQUE_STRING_acceleration = 0x7E9,
  SCR_OPAQUE_STRING_acceleration_fov = 0x7EA,
  SCR_OPAQUE_STRING_accessory = 0x7EB,
  SCR_OPAQUE_STRING_accn = 0x7EC,
  SCR_OPAQUE_STRING_accumulated_damage = 0x7ED,
  SCR_OPAQUE_STRING_accuracy_ally = 0x7EE,
  SCR_OPAQUE_STRING_accuracy_enemy = 0x7EF,
  SCR_OPAQUE_STRING_accuracygrowthmultiplier = 0x7F0,
  SCR_OPAQUE_STRING_accuracystationarymod = 0x7F1,
  SCR_OPAQUE_STRING_achieve_birdie = 0x7F2,
  SCR_OPAQUE_STRING_achieve_jack_the_ripper = 0x7F4,
  SCR_OPAQUE_STRING_achieve_serrated_edge = 0x7F5,
  SCR_OPAQUE_STRING_achieve_slowmo_breach_kills = 0x7F6,
  SCR_OPAQUE_STRING_achieve_strike = 0x7F7,
  SCR_OPAQUE_STRING_achievement = 0x7F8,
  SCR_OPAQUE_STRING_achievement_attacker = 0x7F9,
  SCR_OPAQUE_STRING_achievement_completed = 0x7FA,
  SCR_OPAQUE_STRING_achievement_list = 0x7FB,
  SCR_OPAQUE_STRING_achievement_registration_func = 0x7FC,
  SCR_OPAQUE_STRING_acquiregroundtarget = 0x7FD,
  SCR_OPAQUE_STRING_acquireminitarget = 0x7FE,
  SCR_OPAQUE_STRING_acquiretarget = 0x7FF,
  SCR_OPAQUE_STRING_acquirevehicletarget = 0x800,
  SCR_OPAQUE_STRING_action_back = 0x801,
  SCR_OPAQUE_STRING_action_func = 0x802,
  SCR_OPAQUE_STRING_action_gears = 0x803,
  SCR_OPAQUE_STRING_action_killstreak = 0x804,
  SCR_OPAQUE_STRING_action_thread = 0x806,
  SCR_OPAQUE_STRING_action_weapons_primary = 0x807,
  SCR_OPAQUE_STRING_action_weapons_secondary = 0x808,
  SCR_OPAQUE_STRING_actionbinds = 0x809,
  SCR_OPAQUE_STRING_actionnotify = 0x80A,
  SCR_OPAQUE_STRING_actionnotifymessage = 0x80B,
  SCR_OPAQUE_STRING_actionslotenabled = 0x80C,
  SCR_OPAQUE_STRING_actionslots = 0x80D,
  SCR_OPAQUE_STRING_activate = 0x80E,
  SCR_OPAQUE_STRING_activate_angered_state = 0x80F,
  SCR_OPAQUE_STRING_activate_avoid_minion_exp = 0x810,
  SCR_OPAQUE_STRING_activate_clientside_exploder = 0x811,
  SCR_OPAQUE_STRING_activate_color_code_internal = 0x812,
  SCR_OPAQUE_STRING_activate_color_trigger = 0x813,
  SCR_OPAQUE_STRING_activate_destructibles_in_volume = 0x815,
  SCR_OPAQUE_STRING_activate_exploder = 0x816,
  SCR_OPAQUE_STRING_activate_exploders_in_volume = 0x817,
  SCR_OPAQUE_STRING_activate_fireworks_exploder = 0x819,
  SCR_OPAQUE_STRING_activate_health_regen = 0x81A,
  SCR_OPAQUE_STRING_activate_individual_exploder = 0x81C,
  SCR_OPAQUE_STRING_activate_individual_exploder_proc = 0x81D,
  SCR_OPAQUE_STRING_activate_individual_fireworks_exploder = 0x81E,
  SCR_OPAQUE_STRING_activate_interactives_in_volume = 0x81F,
  SCR_OPAQUE_STRING_activate_kill_10_in_30 = 0x820,
  SCR_OPAQUE_STRING_activate_kill_10_with_traps = 0x822,
  SCR_OPAQUE_STRING_activate_kill_10_with_turrets = 0x823,
  SCR_OPAQUE_STRING_activate_kill_airborne_aliens = 0x824,
  SCR_OPAQUE_STRING_activate_melee_goons = 0x826,
  SCR_OPAQUE_STRING_activate_melee_only = 0x827,
  SCR_OPAQUE_STRING_activate_mortar = 0x829,
  SCR_OPAQUE_STRING_activate_nerf = 0x82A,
  SCR_OPAQUE_STRING_activate_new_challenge = 0x82B,
  SCR_OPAQUE_STRING_activate_no_abilities = 0x82C,
  SCR_OPAQUE_STRING_activate_no_reloads = 0x82D,
  SCR_OPAQUE_STRING_activate_percent_accuracy = 0x82E,
  SCR_OPAQUE_STRING_activate_protect_a_player = 0x82F,
  SCR_OPAQUE_STRING_activate_riders = 0x830,
  SCR_OPAQUE_STRING_activate_rotunda_fight = 0x831,
  SCR_OPAQUE_STRING_activate_spawn_event = 0x832,
  SCR_OPAQUE_STRING_activate_spend_currency = 0x833,
  SCR_OPAQUE_STRING_activate_spend_money_progress = 0x834,
  SCR_OPAQUE_STRING_activate_spend_no_money = 0x835,
  SCR_OPAQUE_STRING_activate_stay_prone = 0x836,
  SCR_OPAQUE_STRING_activate_stay_within_area = 0x837,
  SCR_OPAQUE_STRING_activate_trig_if_not_flag = 0x838,
  SCR_OPAQUE_STRING_activate_trigger = 0x839,
  SCR_OPAQUE_STRING_activate_trigger_process = 0x83A,
  SCR_OPAQUE_STRING_activate_trigger_with_noteworthy = 0x83B,
  SCR_OPAQUE_STRING_activate_trigger_with_targetname = 0x83C,
  SCR_OPAQUE_STRING_activate_use_weapon_challenge = 0x83D,
  SCR_OPAQUE_STRING_activateagent = 0x83E,
  SCR_OPAQUE_STRING_activated = 0x83F,
  SCR_OPAQUE_STRING_activated_color_trigger = 0x840,
  SCR_OPAQUE_STRING_activated_nerfs = 0x841,
  SCR_OPAQUE_STRING_activatefunc = 0x842,
  SCR_OPAQUE_STRING_activateratio = 0x843,
  SCR_OPAQUE_STRING_activatetime = 0x844,
  SCR_OPAQUE_STRING_activateweapon = 0x845,
  SCR_OPAQUE_STRING_activation_notify = 0x846,
  SCR_OPAQUE_STRING_activation_time = 0x847,
  SCR_OPAQUE_STRING_activation_trig = 0x848,
  SCR_OPAQUE_STRING_active_deployables = 0x84A,
  SCR_OPAQUE_STRING_active_force_dog_talk = 0x84B,
  SCR_OPAQUE_STRING_active_mode = 0x84C,
  SCR_OPAQUE_STRING_active_objective = 0x84D,
  SCR_OPAQUE_STRING_active_odin = 0x84E,
  SCR_OPAQUE_STRING_active_rope = 0x84F,
  SCR_OPAQUE_STRING_active_teargas = 0x850,
  SCR_OPAQUE_STRING_active_turrets = 0x851,
  SCR_OPAQUE_STRING_active_wait_spread = 0x852,
  SCR_OPAQUE_STRING_activebreaks = 0x853,
  SCR_OPAQUE_STRING_activecount = 0x854,
  SCR_OPAQUE_STRING_activecounteruavs = 0x855,
  SCR_OPAQUE_STRING_activegrenadetimer = 0x857,
  SCR_OPAQUE_STRING_activenodes = 0x858,
  SCR_OPAQUE_STRING_activeplayers = 0x85A,
  SCR_OPAQUE_STRING_activesfx = 0x85B,
  SCR_OPAQUE_STRING_activeuavs = 0x85C,
  SCR_OPAQUE_STRING_actor_teleport = 0x85D,
  SCR_OPAQUE_STRING_actor_use_water_when_moving = 0x85E,
  SCR_OPAQUE_STRING_actual_health = 0x860,
  SCR_OPAQUE_STRING_actuator_click_wait = 0x861,
  SCR_OPAQUE_STRING_adam = 0x862,
  SCR_OPAQUE_STRING_add_abort = 0x863,
  SCR_OPAQUE_STRING_add_actor_danger_listeners = 0x864,
  SCR_OPAQUE_STRING_add_and_select_entity = 0x866,
  SCR_OPAQUE_STRING_add_animation = 0x867,
  SCR_OPAQUE_STRING_add_animsound = 0x868,
  SCR_OPAQUE_STRING_add_array_to_destructible = 0x869,
  SCR_OPAQUE_STRING_add_as_apache_target_on_spawn = 0x86A,
  SCR_OPAQUE_STRING_add_as_apaches_target = 0x86B,
  SCR_OPAQUE_STRING_add_attachment_to_weapon = 0x86C,
  SCR_OPAQUE_STRING_add_bcs_location_mapping = 0x86E,
  SCR_OPAQUE_STRING_add_beacon_effect = 0x86F,
  SCR_OPAQUE_STRING_add_breach_func = 0x870,
  SCR_OPAQUE_STRING_add_breach_target = 0x871,
  SCR_OPAQUE_STRING_add_button = 0x872,
  SCR_OPAQUE_STRING_add_c4_glow = 0x873,
  SCR_OPAQUE_STRING_add_c4_to_spot = 0x874,
  SCR_OPAQUE_STRING_add_call = 0x875,
  SCR_OPAQUE_STRING_add_care_package = 0x876,
  SCR_OPAQUE_STRING_add_cellphone_notetracks = 0x877,
  SCR_OPAQUE_STRING_add_cleanup_ent = 0x878,
  SCR_OPAQUE_STRING_add_collision_to_path_ent = 0x87B,
  SCR_OPAQUE_STRING_add_context_sensative_dialog = 0x87C,
  SCR_OPAQUE_STRING_add_context_sensative_timeout = 0x87D,
  SCR_OPAQUE_STRING_add_contrail = 0x87E,
  SCR_OPAQUE_STRING_add_cover_node = 0x880,
  SCR_OPAQUE_STRING_add_cycle_scalar = 0x881,
  SCR_OPAQUE_STRING_add_damage_function = 0x883,
  SCR_OPAQUE_STRING_add_damage_owner_recorder = 0x884,
  SCR_OPAQUE_STRING_add_damagefeedback = 0x885,
  SCR_OPAQUE_STRING_add_dead_enemy_clip = 0x886,
  SCR_OPAQUE_STRING_add_debug_dialogue = 0x887,
  SCR_OPAQUE_STRING_add_destructible_fx = 0x888,
  SCR_OPAQUE_STRING_add_destructible_to_frame_queue = 0x889,
  SCR_OPAQUE_STRING_add_destructible_type_function = 0x88A,
  SCR_OPAQUE_STRING_add_dialogue_line = 0x88C,
  SCR_OPAQUE_STRING_add_dialogue_line_timed = 0x88D,
  SCR_OPAQUE_STRING_add_earthquake = 0x88E,
  SCR_OPAQUE_STRING_add_endon = 0x88F,
  SCR_OPAQUE_STRING_add_ent_objective_to_compass = 0x890,
  SCR_OPAQUE_STRING_add_extra_autosave_check = 0x891,
  SCR_OPAQUE_STRING_add_fire = 0x892,
  SCR_OPAQUE_STRING_add_fire_fx = 0x893,
  SCR_OPAQUE_STRING_add_fractional_data_point = 0x894,
  SCR_OPAQUE_STRING_add_fx = 0x896,
  SCR_OPAQUE_STRING_add_headlamp = 0x898,
  SCR_OPAQUE_STRING_add_hint_background = 0x899,
  SCR_OPAQUE_STRING_add_hint_string = 0x89A,
  SCR_OPAQUE_STRING_add_hive_dependencies = 0x89B,
  SCR_OPAQUE_STRING_add_hud_line = 0x89C,
  SCR_OPAQUE_STRING_add_hudelm_position_internal = 0x89D,
  SCR_OPAQUE_STRING_add_humanoid_agent = 0x89E,
  SCR_OPAQUE_STRING_add_ice_radius = 0x89F,
  SCR_OPAQUE_STRING_add_in_more_allies = 0x8A0,
  SCR_OPAQUE_STRING_add_jav_glow = 0x8A1,
  SCR_OPAQUE_STRING_add_kb_button = 0x8A2,
  SCR_OPAQUE_STRING_add_key = 0x8A3,
  SCR_OPAQUE_STRING_add_key_to_destructible = 0x8A4,
  SCR_OPAQUE_STRING_add_keypairs_to_destructible = 0x8A5,
  SCR_OPAQUE_STRING_add_large_firework = 0x8A6,
  SCR_OPAQUE_STRING_add_lcs_target = 0x8A7,
  SCR_OPAQUE_STRING_add_light_to_actor = 0x8A8,
  SCR_OPAQUE_STRING_add_magic_bullet_shield_if_off = 0x8A9,
  SCR_OPAQUE_STRING_add_meteor_firework = 0x8AA,
  SCR_OPAQUE_STRING_add_name = 0x8AB,
  SCR_OPAQUE_STRING_add_no_game_starts = 0x8AC,
  SCR_OPAQUE_STRING_add_noself_call = 0x8AE,
  SCR_OPAQUE_STRING_add_notetrack_and_get_index = 0x8AF,
  SCR_OPAQUE_STRING_add_notetrack_array = 0x8B0,
  SCR_OPAQUE_STRING_add_option_to_selected_entities = 0x8B1,
  SCR_OPAQUE_STRING_add_path_start_and_end_refs = 0x8B3,
  SCR_OPAQUE_STRING_add_pet_bombs_to_pillage_system = 0x8B4,
  SCR_OPAQUE_STRING_add_proccess_trigger = 0x8B5,
  SCR_OPAQUE_STRING_add_random_killspawner_to_spawngroup = 0x8B7,
  SCR_OPAQUE_STRING_add_reactive_fx = 0x8B8,
  SCR_OPAQUE_STRING_add_reverb = 0x8B9,
  SCR_OPAQUE_STRING_add_scene_model = 0x8BA,
  SCR_OPAQUE_STRING_add_sit_load_ak_notetracks = 0x8BB,
  SCR_OPAQUE_STRING_add_slowmo_breach_custom_function = 0x8BC,
  SCR_OPAQUE_STRING_add_slowmo_breacher = 0x8BD,
  SCR_OPAQUE_STRING_add_small_firework = 0x8BE,
  SCR_OPAQUE_STRING_add_smoking_notetracks = 0x8BF,
  SCR_OPAQUE_STRING_add_spawn_function = 0x8C0,
  SCR_OPAQUE_STRING_add_start = 0x8C1,
  SCR_OPAQUE_STRING_add_start_assert = 0x8C2,
  SCR_OPAQUE_STRING_add_start_construct = 0x8C3,
  SCR_OPAQUE_STRING_add_target = 0x8C4,
  SCR_OPAQUE_STRING_add_target_pivot = 0x8C5,
  SCR_OPAQUE_STRING_add_teargas_cloud_radius = 0x8C6,
  SCR_OPAQUE_STRING_add_to_array = 0x8C9,
  SCR_OPAQUE_STRING_add_to_bot_damage_targets = 0x8CA,
  SCR_OPAQUE_STRING_add_to_bot_use_targets = 0x8CB,
  SCR_OPAQUE_STRING_add_to_destroyed_count = 0x8CC,
  SCR_OPAQUE_STRING_add_to_dialogue = 0x8CD,
  SCR_OPAQUE_STRING_add_to_dialogue_generic = 0x8CE,
  SCR_OPAQUE_STRING_add_to_enemygazs_until_dead = 0x8CF,
  SCR_OPAQUE_STRING_add_to_enemytanks_until_dead = 0x8D0,
  SCR_OPAQUE_STRING_add_to_group = 0x8D1,
  SCR_OPAQUE_STRING_add_to_interrupt_vo = 0x8D2,
  SCR_OPAQUE_STRING_add_to_outline_hive_watch_list = 0x8D4,
  SCR_OPAQUE_STRING_add_to_outline_pillage_watch_list = 0x8D5,
  SCR_OPAQUE_STRING_add_to_outline_watch_list = 0x8D6,
  SCR_OPAQUE_STRING_add_to_outline_weapon_watch_list = 0x8D7,
  SCR_OPAQUE_STRING_add_to_queue_at_priority = 0x8D8,
  SCR_OPAQUE_STRING_add_to_radio = 0x8D9,
  SCR_OPAQUE_STRING_add_to_spawngroup = 0x8DA,
  SCR_OPAQUE_STRING_add_to_standby = 0x8DB,
  SCR_OPAQUE_STRING_add_to_thrown_entity_list = 0x8DC,
  SCR_OPAQUE_STRING_add_to_vo_system = 0x8DD,
  SCR_OPAQUE_STRING_add_to_vo_system_internal = 0x8DE,
  SCR_OPAQUE_STRING_add_to_zone = 0x8DF,
  SCR_OPAQUE_STRING_add_tokens_to_trigger_flags = 0x8E0,
  SCR_OPAQUE_STRING_add_trace_fx = 0x8E1,
  SCR_OPAQUE_STRING_add_trace_fx_proc = 0x8E2,
  SCR_OPAQUE_STRING_add_trigger_func_thread = 0x8E3,
  SCR_OPAQUE_STRING_add_trigger_function = 0x8E4,
  SCR_OPAQUE_STRING_add_turret_to_heli = 0x8E5,
  SCR_OPAQUE_STRING_add_valid_evade = 0x8E6,
  SCR_OPAQUE_STRING_add_vol_to_node = 0x8E7,
  SCR_OPAQUE_STRING_add_volume_to_global_arrays = 0x8E8,
  SCR_OPAQUE_STRING_add_wait = 0x8E9,
  SCR_OPAQUE_STRING_add_wait_asserter = 0x8EA,
  SCR_OPAQUE_STRING_add_weapon = 0x8EB,
  SCR_OPAQUE_STRING_add_z = 0x8EC,
  SCR_OPAQUE_STRING_addactioncovermealiasex = 0x8ED,
  SCR_OPAQUE_STRING_addactivecounteruav = 0x8EE,
  SCR_OPAQUE_STRING_addactiveuav = 0x8EF,
  SCR_OPAQUE_STRING_addaieventlistener_func = 0x8F0,
  SCR_OPAQUE_STRING_addairexplosion = 0x8F1,
  SCR_OPAQUE_STRING_addalienagent = 0x8F2,
  SCR_OPAQUE_STRING_addalienweaponammo = 0x8F3,
  SCR_OPAQUE_STRING_addallowedthreatcallout = 0x8F4,
  SCR_OPAQUE_STRING_addallweaponammo = 0x8F5,
  SCR_OPAQUE_STRING_addalternatespawnpoint = 0x8F6,
  SCR_OPAQUE_STRING_addammo = 0x8F7,
  SCR_OPAQUE_STRING_addammoovertime = 0x8F8,
  SCR_OPAQUE_STRING_addasapachehudtarget = 0x8F9,
  SCR_OPAQUE_STRING_addattacker = 0x8FA,
  SCR_OPAQUE_STRING_addawardwinner = 0x8FB,
  SCR_OPAQUE_STRING_addblankiw6 = 0x8FC,
  SCR_OPAQUE_STRING_addboxtolevelarray = 0x8FD,
  SCR_OPAQUE_STRING_addcalloutresponseevent = 0x8FE,
  SCR_OPAQUE_STRING_addcastiw = 0x8FF,
  SCR_OPAQUE_STRING_addcastname = 0x900,
  SCR_OPAQUE_STRING_addcenterdual = 0x901,
  SCR_OPAQUE_STRING_addcenterediw6 = 0x902,
  SCR_OPAQUE_STRING_addcenterheading = 0x903,
  SCR_OPAQUE_STRING_addcenterimage = 0x904,
  SCR_OPAQUE_STRING_addcentername = 0x905,
  SCR_OPAQUE_STRING_addcenternamedouble = 0x906,
  SCR_OPAQUE_STRING_addcheckfirealias = 0x908,
  SCR_OPAQUE_STRING_addchild = 0x909,
  SCR_OPAQUE_STRING_addconcatdirectionalias = 0x90A,
  SCR_OPAQUE_STRING_addconcattargetalias = 0x90B,
  SCR_OPAQUE_STRING_addcratetype = 0x90C,
  SCR_OPAQUE_STRING_addcreditiw6_3f = 0x90F,
  SCR_OPAQUE_STRING_addcreditiw6_4 = 0x910,
  SCR_OPAQUE_STRING_addcreditliw6 = 0x911,
  SCR_OPAQUE_STRING_addcreditlsubheaderriw6 = 0x912,
  SCR_OPAQUE_STRING_addcreditriw6 = 0x913,
  SCR_OPAQUE_STRING_adddeathicon = 0x914,
  SCR_OPAQUE_STRING_addedtowave = 0x915,
  SCR_OPAQUE_STRING_addenemytominimap = 0x916,
  SCR_OPAQUE_STRING_addentryiw6 = 0x917,
  SCR_OPAQUE_STRING_addfullcliptoallweapons = 0x918,
  SCR_OPAQUE_STRING_addgap = 0x91A,
  SCR_OPAQUE_STRING_addgrenadethrowanimoffset = 0x91B,
  SCR_OPAQUE_STRING_addheaderiw6 = 0x91C,
  SCR_OPAQUE_STRING_addhostileburstalias = 0x91D,
  SCR_OPAQUE_STRING_addimageiw = 0x91E,
  SCR_OPAQUE_STRING_addinformalias = 0x91F,
  SCR_OPAQUE_STRING_addinformevent = 0x920,
  SCR_OPAQUE_STRING_addinformreloadingaliasex = 0x921,
  SCR_OPAQUE_STRING_additionalassets = 0x922,
  SCR_OPAQUE_STRING_additionalexit_vo = 0x923,
  SCR_OPAQUE_STRING_additionalsighttraceentities = 0x924,
  SCR_OPAQUE_STRING_additive_pain = 0x925,
  SCR_OPAQUE_STRING_additiveturretdriveidle = 0x927,
  SCR_OPAQUE_STRING_additiveturretfire = 0x928,
  SCR_OPAQUE_STRING_additiveturretidle = 0x929,
  SCR_OPAQUE_STRING_additiveturretrotateleft = 0x92A,
  SCR_OPAQUE_STRING_additiveturretrotateright = 0x92B,
  SCR_OPAQUE_STRING_additiveusegunroot = 0x92C,
  SCR_OPAQUE_STRING_addleftimage = 0x92D,
  SCR_OPAQUE_STRING_addleftname = 0x92E,
  SCR_OPAQUE_STRING_addleftnamename = 0x92F,
  SCR_OPAQUE_STRING_addlefttitle = 0x930,
  SCR_OPAQUE_STRING_addlefttitlename = 0x931,
  SCR_OPAQUE_STRING_addlefttitlenamespace = 0x932,
  SCR_OPAQUE_STRING_addlevel = 0x933,
  SCR_OPAQUE_STRING_addlevelstoexperience = 0x934,
  SCR_OPAQUE_STRING_addlinknode = 0x936,
  SCR_OPAQUE_STRING_addlockedontarget = 0x937,
  SCR_OPAQUE_STRING_addlowermessage = 0x939,
  SCR_OPAQUE_STRING_addmovecombataliasex = 0x93A,
  SCR_OPAQUE_STRING_addmovenoncombataliasex = 0x93B,
  SCR_OPAQUE_STRING_addnamealias = 0x93C,
  SCR_OPAQUE_STRING_addnamealiasex = 0x93D,
  SCR_OPAQUE_STRING_addnameiw = 0x93E,
  SCR_OPAQUE_STRING_addnotetrack_animsound = 0x93F,
  SCR_OPAQUE_STRING_addnotetrack_attach = 0x940,
  SCR_OPAQUE_STRING_addnotetrack_clockwork = 0x941,
  SCR_OPAQUE_STRING_addnotetrack_cornered = 0x942,
  SCR_OPAQUE_STRING_addnotetrack_customfunction = 0x943,
  SCR_OPAQUE_STRING_addnotetrack_detach = 0x944,
  SCR_OPAQUE_STRING_addnotetrack_detach_gun = 0x945,
  SCR_OPAQUE_STRING_addnotetrack_dialogue = 0x946,
  SCR_OPAQUE_STRING_addnotetrack_flag = 0x947,
  SCR_OPAQUE_STRING_addnotetrack_flag_clear = 0x948,
  SCR_OPAQUE_STRING_addnotetrack_notify = 0x949,
  SCR_OPAQUE_STRING_addnotetrack_playersound = 0x94A,
  SCR_OPAQUE_STRING_addnotetrack_sound = 0x94B,
  SCR_OPAQUE_STRING_addnotetrack_startfxontag = 0x94C,
  SCR_OPAQUE_STRING_addnotetrack_stopfxontag = 0x94D,
  SCR_OPAQUE_STRING_addnotetrack_swapparttoefx = 0x94E,
  SCR_OPAQUE_STRING_addnotetrack_tracepartforefx = 0x94F,
  SCR_OPAQUE_STRING_addofficertosquad = 0x950,
  SCR_OPAQUE_STRING_addoption = 0x953,
  SCR_OPAQUE_STRING_addorderalias = 0x954,
  SCR_OPAQUE_STRING_addorderevent = 0x955,
  SCR_OPAQUE_STRING_addpaneltimesarray = 0x956,
  SCR_OPAQUE_STRING_addplanetolist = 0x957,
  SCR_OPAQUE_STRING_addplayernamealias = 0x958,
  SCR_OPAQUE_STRING_addplayertosquad = 0x959,
  SCR_OPAQUE_STRING_addpossiblethreatcallout = 0x95A,
  SCR_OPAQUE_STRING_addprereq = 0x95B,
  SCR_OPAQUE_STRING_addrankalias = 0x95C,
  SCR_OPAQUE_STRING_addratiomaxstocktoallweapons = 0x95D,
  SCR_OPAQUE_STRING_addreactionalias = 0x95E,
  SCR_OPAQUE_STRING_addreactionevent = 0x95F,
  SCR_OPAQUE_STRING_addresponsealias = 0x961,
  SCR_OPAQUE_STRING_addresponseevent = 0x962,
  SCR_OPAQUE_STRING_addresponseevent_internal = 0x963,
  SCR_OPAQUE_STRING_addrightname = 0x964,
  SCR_OPAQUE_STRING_addrighttitle = 0x965,
  SCR_OPAQUE_STRING_addsafetyhealth = 0x966,
  SCR_OPAQUE_STRING_addsituationalcombatorder = 0x967,
  SCR_OPAQUE_STRING_addsituationalorder = 0x968,
  SCR_OPAQUE_STRING_addspace = 0x969,
  SCR_OPAQUE_STRING_addspacesmall = 0x96A,
  SCR_OPAQUE_STRING_addspawnpoints = 0x96C,
  SCR_OPAQUE_STRING_addspeaker = 0x96D,
  SCR_OPAQUE_STRING_addstartspawnpoints = 0x96E,
  SCR_OPAQUE_STRING_addsubheaderiw6 = 0x96F,
  SCR_OPAQUE_STRING_addsubheaderliw6 = 0x970,
  SCR_OPAQUE_STRING_addsubheaderriw6 = 0x971,
  SCR_OPAQUE_STRING_addsubleftname = 0x972,
  SCR_OPAQUE_STRING_addsubleftnamename = 0x973,
  SCR_OPAQUE_STRING_addsubleftnamenamename = 0x974,
  SCR_OPAQUE_STRING_addsublefttitlename = 0x976,
  SCR_OPAQUE_STRING_addsublefttitlenamespace = 0x977,
  SCR_OPAQUE_STRING_addsubnameiw = 0x978,
  SCR_OPAQUE_STRING_addsubtitleiw = 0x979,
  SCR_OPAQUE_STRING_addsubtitleiw6 = 0x97A,
  SCR_OPAQUE_STRING_addsubtitlenameiw = 0x97B,
  SCR_OPAQUE_STRING_addtakingfirealias = 0x97C,
  SCR_OPAQUE_STRING_addtauntalias = 0x97D,
  SCR_OPAQUE_STRING_addthreatalias = 0x97E,
  SCR_OPAQUE_STRING_addthreatcalloutalias = 0x97F,
  SCR_OPAQUE_STRING_addthreatcalloutecho = 0x980,
  SCR_OPAQUE_STRING_addthreatcalloutlandmarkalias = 0x981,
  SCR_OPAQUE_STRING_addthreatcalloutlocationalias = 0x982,
  SCR_OPAQUE_STRING_addthreatcalloutqa_nextline = 0x983,
  SCR_OPAQUE_STRING_addthreatcalloutresponsealias = 0x984,
  SCR_OPAQUE_STRING_addthreatdistancealias = 0x985,
  SCR_OPAQUE_STRING_addthreatelevationalias = 0x986,
  SCR_OPAQUE_STRING_addthreatevent = 0x987,
  SCR_OPAQUE_STRING_addthreatexposedalias = 0x988,
  SCR_OPAQUE_STRING_addthreatobviousalias = 0x989,
  SCR_OPAQUE_STRING_addtime = 0x98A,
  SCR_OPAQUE_STRING_addtitleiw = 0x98B,
  SCR_OPAQUE_STRING_addtitleiw6 = 0x98C,
  SCR_OPAQUE_STRING_addtitlenameiw = 0x98D,
  SCR_OPAQUE_STRING_addtoballdronelist = 0x98F,
  SCR_OPAQUE_STRING_addtobattlebuddywaitlist = 0x990,
  SCR_OPAQUE_STRING_addtocharactersarray = 0x991,
  SCR_OPAQUE_STRING_addtoclosedlist = 0x992,
  SCR_OPAQUE_STRING_addtohelilist = 0x993,
  SCR_OPAQUE_STRING_addtoimslist = 0x994,
  SCR_OPAQUE_STRING_addtolittlebirdlist = 0x995,
  SCR_OPAQUE_STRING_addtolivescount = 0x996,
  SCR_OPAQUE_STRING_addtoopenlist = 0x997,
  SCR_OPAQUE_STRING_addtoparticipantsarray = 0x998,
  SCR_OPAQUE_STRING_addtosquad = 0x999,
  SCR_OPAQUE_STRING_addtotanklist = 0x99B,
  SCR_OPAQUE_STRING_addtoteam = 0x99C,
  SCR_OPAQUE_STRING_addtoteamcount = 0x99D,
  SCR_OPAQUE_STRING_addtoturretlist = 0x99E,
  SCR_OPAQUE_STRING_addtougvlist = 0x99F,
  SCR_OPAQUE_STRING_addtrackingtarget_ondeath = 0x9A2,
  SCR_OPAQUE_STRING_addtrackingtarget_update = 0x9A3,
  SCR_OPAQUE_STRING_adduavmodel = 0x9A5,
  SCR_OPAQUE_STRING_adduplinktolevellist = 0x9A6,
  SCR_OPAQUE_STRING_addzone = 0x9A7,
  SCR_OPAQUE_STRING_adjust_ally_movement = 0x9A8,
  SCR_OPAQUE_STRING_adjust_angles_to_player = 0x9A9,
  SCR_OPAQUE_STRING_adjust_forward_push = 0x9AA,
  SCR_OPAQUE_STRING_adjust_helo_sound_high = 0x9AB,
  SCR_OPAQUE_STRING_adjust_helo_sound_low = 0x9AC,
  SCR_OPAQUE_STRING_adjust_helo_sound_roll = 0x9AD,
  SCR_OPAQUE_STRING_adjust_movement_step_up = 0x9AE,
  SCR_OPAQUE_STRING_adjust_moving_grass = 0x9AF,
  SCR_OPAQUE_STRING_adjust_overall_apache_pitches = 0x9B0,
  SCR_OPAQUE_STRING_adjust_player_view = 0x9B1,
  SCR_OPAQUE_STRING_adjust_suppression_on_enemies = 0x9B2,
  SCR_OPAQUE_STRING_adrenaline = 0x9B3,
  SCR_OPAQUE_STRING_adrenalineinfo = 0x9B4,
  SCR_OPAQUE_STRING_adrenalinetime = 0x9B5,
  SCR_OPAQUE_STRING_ads_hint = 0x9B6,
  SCR_OPAQUE_STRING_adstime = 0x9B7,
  SCR_OPAQUE_STRING_adstoggled = 0x9B8,
  SCR_OPAQUE_STRING_adszoomed = 0x9B9,
  SCR_OPAQUE_STRING_advance_regardless_of_numbers = 0x9BA,
  SCR_OPAQUE_STRING_advancedtraverse = 0x9BB,
  SCR_OPAQUE_STRING_advancedtraverse2 = 0x9BC,
  SCR_OPAQUE_STRING_advanceonhidingenemy = 0x9BE,
  SCR_OPAQUE_STRING_advancetoenemygroup = 0x9BF,
  SCR_OPAQUE_STRING_advancetoenemygroupmax = 0x9C0,
  SCR_OPAQUE_STRING_advancetoenemyinterval = 0x9C1,
  SCR_OPAQUE_STRING_aenemies = 0x9C2,
  SCR_OPAQUE_STRING_aent_flag_waitopen_either = 0x9C3,
  SCR_OPAQUE_STRING_aerial_vehicle_allowed = 0x9C4,
  SCR_OPAQUE_STRING_affected = 0x9C5,
  SCR_OPAQUE_STRING_afk = 0x9C6,
  SCR_OPAQUE_STRING_after_fall_bounce = 0x9C7,
  SCR_OPAQUE_STRING_after_hunt = 0x9C8,
  SCR_OPAQUE_STRING_after_hunt_dialogue = 0x9C9,
  SCR_OPAQUE_STRING_agent_damage_finished = 0x9CA,
  SCR_OPAQUE_STRING_agent_gameparticipant = 0x9CC,
  SCR_OPAQUE_STRING_agent_teamparticipant = 0x9CD,
  SCR_OPAQUE_STRING_agent_type = 0x9CE,
  SCR_OPAQUE_STRING_agentarray = 0x9CF,
  SCR_OPAQUE_STRING_agentdogthink = 0x9D0,
  SCR_OPAQUE_STRING_agentfunc = 0x9D1,
  SCR_OPAQUE_STRING_aggresivelookat = 0x9D2,
  SCR_OPAQUE_STRING_aggressivemode = 0x9D3,
  SCR_OPAQUE_STRING_ahdmode = 0x9D4,
  SCR_OPAQUE_STRING_ahdmode_ng = 0x9D5,
  SCR_OPAQUE_STRING_ai_3d_sighting_model = 0x9D7,
  SCR_OPAQUE_STRING_ai_advancing_logic = 0x9D8,
  SCR_OPAQUE_STRING_ai_alert = 0x9D9,
  SCR_OPAQUE_STRING_ai_alert_bullet = 0x9DA,
  SCR_OPAQUE_STRING_ai_alert_damage = 0x9DB,
  SCR_OPAQUE_STRING_ai_alert_friend_death = 0x9DC,
  SCR_OPAQUE_STRING_ai_alert_loop = 0x9DD,
  SCR_OPAQUE_STRING_ai_alert_player_break_stealth = 0x9DE,
  SCR_OPAQUE_STRING_ai_alert_range = 0x9DF,
  SCR_OPAQUE_STRING_ai_animate_props_on_death = 0x9E0,
  SCR_OPAQUE_STRING_ai_array = 0x9E1,
  SCR_OPAQUE_STRING_ai_array_killcount_flag_set = 0x9E2,
  SCR_OPAQUE_STRING_ai_attack_missile = 0x9E3,
  SCR_OPAQUE_STRING_ai_classname_in_level = 0x9E4,
  SCR_OPAQUE_STRING_ai_clean_up = 0x9E6,
  SCR_OPAQUE_STRING_ai_cleanup_fake_death = 0x9E7,
  SCR_OPAQUE_STRING_ai_clear_custom_animation_reaction = 0x9E8,
  SCR_OPAQUE_STRING_ai_clear_custom_animation_reaction_and_idle = 0x9E9,
  SCR_OPAQUE_STRING_ai_create_behavior_function = 0x9EB,
  SCR_OPAQUE_STRING_ai_damage_think = 0x9EC,
  SCR_OPAQUE_STRING_ai_deathflag = 0x9ED,
  SCR_OPAQUE_STRING_ai_debug = 0x9EE,
  SCR_OPAQUE_STRING_ai_delete_when_out_of_sight = 0x9EF,
  SCR_OPAQUE_STRING_ai_dont_glow_in_thermal = 0x9F0,
  SCR_OPAQUE_STRING_ai_enemy_target_underwater = 0x9F1,
  SCR_OPAQUE_STRING_ai_enemy_tracking = 0x9F2,
  SCR_OPAQUE_STRING_ai_event_settings = 0x9F3,
  SCR_OPAQUE_STRING_ai_event_settings_reset = 0x9F4,
  SCR_OPAQUE_STRING_ai_flee_from_teargas = 0x9F5,
  SCR_OPAQUE_STRING_ai_flooding_hip_anims = 0x9F6,
  SCR_OPAQUE_STRING_ai_flooding_under_anims = 0x9F7,
  SCR_OPAQUE_STRING_ai_follow_cover = 0x9F8,
  SCR_OPAQUE_STRING_ai_get_behavior_function = 0x9FA,
  SCR_OPAQUE_STRING_ai_go_to_player = 0x9FB,
  SCR_OPAQUE_STRING_ai_group_killcount_flag_set = 0x9FC,
  SCR_OPAQUE_STRING_ai_in_coverwater = 0x9FD,
  SCR_OPAQUE_STRING_ai_init = 0x9FE,
  SCR_OPAQUE_STRING_ai_lasers = 0x9FF,
  SCR_OPAQUE_STRING_ai_message_handler_hidden = 0xA00,
  SCR_OPAQUE_STRING_ai_mode = 0xA02,
  SCR_OPAQUE_STRING_ai_number = 0xA03,
  SCR_OPAQUE_STRING_ai_out_time = 0xA05,
  SCR_OPAQUE_STRING_ai_picks_destination = 0xA06,
  SCR_OPAQUE_STRING_ai_react_to_teargas = 0xA08,
  SCR_OPAQUE_STRING_ai_record_spawn_pos = 0xA09,
  SCR_OPAQUE_STRING_ai_remove_outline_waiter = 0xA0A,
  SCR_OPAQUE_STRING_ai_rider_invulnerable_until_vehicle_death = 0xA0B,
  SCR_OPAQUE_STRING_ai_rider_invulnerable_until_vehicle_death_or_jumping_out = 0xA0C,
  SCR_OPAQUE_STRING_ai_rpg_attack_delay_max = 0xA0D,
  SCR_OPAQUE_STRING_ai_rpg_attack_delay_min = 0xA0E,
  SCR_OPAQUE_STRING_ai_set_custom_animation_reaction = 0xA0F,
  SCR_OPAQUE_STRING_ai_set_goback_override_function = 0xA10,
  SCR_OPAQUE_STRING_ai_sets_goal = 0xA11,
  SCR_OPAQUE_STRING_ai_should_be_added = 0xA13,
  SCR_OPAQUE_STRING_ai_sight_brushes = 0xA14,
  SCR_OPAQUE_STRING_ai_space_death = 0xA15,
  SCR_OPAQUE_STRING_ai_space_headshot_death = 0xA16,
  SCR_OPAQUE_STRING_ai_space_pain = 0xA17,
  SCR_OPAQUE_STRING_ai_stealth_init = 0xA19,
  SCR_OPAQUE_STRING_ai_stealth_pause_handler = 0xA1A,
  SCR_OPAQUE_STRING_ai_swim_death = 0xA1B,
  SCR_OPAQUE_STRING_ai_swim_pain = 0xA1C,
  SCR_OPAQUE_STRING_ai_swim_sound = 0xA1D,
  SCR_OPAQUE_STRING_ai_swim_sound_idle = 0xA1E,
  SCR_OPAQUE_STRING_ai_test_count = 0xA1F,
  SCR_OPAQUE_STRING_ai_to_kill = 0xA20,
  SCR_OPAQUE_STRING_ai_total_count = 0xA21,
  SCR_OPAQUE_STRING_ai_track = 0xA22,
  SCR_OPAQUE_STRING_ai_track_death_by_player = 0xA23,
  SCR_OPAQUE_STRING_ai_types = 0xA24,
  SCR_OPAQUE_STRING_ai_wait_go = 0xA25,
  SCR_OPAQUE_STRING_ai_waittill_entered_vehicle = 0xA26,
  SCR_OPAQUE_STRING_ai_water_rising_think = 0xA27,
  SCR_OPAQUE_STRING_aiamount = 0xA28,
  SCR_OPAQUE_STRING_aiareintheroom = 0xA29,
  SCR_OPAQUE_STRING_aiarray = 0xA2A,
  SCR_OPAQUE_STRING_aibattlechatterloop = 0xA2B,
  SCR_OPAQUE_STRING_aicount = 0xA2C,
  SCR_OPAQUE_STRING_aideathenemy = 0xA2D,
  SCR_OPAQUE_STRING_aideatheventthread = 0xA2E,
  SCR_OPAQUE_STRING_aideathfriendly = 0xA2F,
  SCR_OPAQUE_STRING_aidisplacewaiter = 0xA30,
  SCR_OPAQUE_STRING_aifolloworderwaiter = 0xA31,
  SCR_OPAQUE_STRING_aigrenadedangerwaiter = 0xA32,
  SCR_OPAQUE_STRING_aigroup_create = 0xA33,
  SCR_OPAQUE_STRING_aigroup_soldierthink = 0xA34,
  SCR_OPAQUE_STRING_aigroup_spawnerdeath = 0xA35,
  SCR_OPAQUE_STRING_aigroup_spawnerempty = 0xA36,
  SCR_OPAQUE_STRING_aigroup_spawnerthink = 0xA37,
  SCR_OPAQUE_STRING_aihasweapon = 0xA38,
  SCR_OPAQUE_STRING_aikilleventthread = 0xA3A,
  SCR_OPAQUE_STRING_aim2_target = 0xA3B,
  SCR_OPAQUE_STRING_aim4_target = 0xA3C,
  SCR_OPAQUE_STRING_aim6_target = 0xA3D,
  SCR_OPAQUE_STRING_aim8_target = 0xA3E,
  SCR_OPAQUE_STRING_aim_arrow = 0xA3F,
  SCR_OPAQUE_STRING_aim_arrow_on_target = 0xA40,
  SCR_OPAQUE_STRING_aim_idle_thread = 0xA42,
  SCR_OPAQUE_STRING_aim_missiles_2 = 0xA43,
  SCR_OPAQUE_STRING_aim_turret_at_ambush_point_or_visible_enemy = 0xA44,
  SCR_OPAQUE_STRING_aim_while_moving_thread = 0xA45,
  SCR_OPAQUE_STRING_aimbutdontshoot = 0xA46,
  SCR_OPAQUE_STRING_aimed_at_shoot_ent_or_pos = 0xA47,
  SCR_OPAQUE_STRING_aimedatshootentorpos = 0xA48,
  SCR_OPAQUE_STRING_aimedsomewhatatenemy = 0xA49,
  SCR_OPAQUE_STRING_aimidlethread = 0xA4A,
  SCR_OPAQUE_STRING_aiming_at_ally = 0xA4B,
  SCR_OPAQUE_STRING_aimpitchdifftolerance = 0xA4C,
  SCR_OPAQUE_STRING_aimweight = 0xA4D,
  SCR_OPAQUE_STRING_aimweight_end = 0xA4E,
  SCR_OPAQUE_STRING_aimweight_start = 0xA4F,
  SCR_OPAQUE_STRING_aimweight_t = 0xA50,
  SCR_OPAQUE_STRING_aimweight_transframes = 0xA51,
  SCR_OPAQUE_STRING_aimyawdiffclosedistsq = 0xA52,
  SCR_OPAQUE_STRING_ainame = 0xA55,
  SCR_OPAQUE_STRING_ainameandrankwaiter = 0xA56,
  SCR_OPAQUE_STRING_aiofficerorders = 0xA57,
  SCR_OPAQUE_STRING_aiowner = 0xA58,
  SCR_OPAQUE_STRING_air_armada = 0xA59,
  SCR_OPAQUE_STRING_air_dropped = 0xA5A,
  SCR_OPAQUE_STRING_air_node_mesh = 0xA5B,
  SCR_OPAQUE_STRING_air_raid = 0xA5C,
  SCR_OPAQUE_STRING_air_raid_fire = 0xA5E,
  SCR_OPAQUE_STRING_air_raid_siren = 0xA5F,
  SCR_OPAQUE_STRING_air_raids = 0xA61,
  SCR_OPAQUE_STRING_air_start_nodes = 0xA62,
  SCR_OPAQUE_STRING_air_strip_ai_quick_cleanup_death_function = 0xA63,
  SCR_OPAQUE_STRING_air_strip_ai_quick_cleanup_spawn_function = 0xA64,
  SCR_OPAQUE_STRING_air_strip_ambient_a10_gun_dive_1 = 0xA65,
  SCR_OPAQUE_STRING_air_strip_ambient_a10_gun_dive_2 = 0xA66,
  SCR_OPAQUE_STRING_air_strip_ambient_a10_gun_dive_3 = 0xA67,
  SCR_OPAQUE_STRING_air_strip_ambient_dogfight_1 = 0xA68,
  SCR_OPAQUE_STRING_air_strip_ambient_dogfight_2 = 0xA69,
  SCR_OPAQUE_STRING_air_strip_begin = 0xA6B,
  SCR_OPAQUE_STRING_air_strip_choppers = 0xA6C,
  SCR_OPAQUE_STRING_air_strip_cleanup = 0xA6D,
  SCR_OPAQUE_STRING_air_strip_hints = 0xA6E,
  SCR_OPAQUE_STRING_air_strip_init = 0xA6F,
  SCR_OPAQUE_STRING_air_strip_m880_corpses = 0xA70,
  SCR_OPAQUE_STRING_air_strip_m880_death_count = 0xA71,
  SCR_OPAQUE_STRING_air_strip_m880s = 0xA72,
  SCR_OPAQUE_STRING_air_strip_main = 0xA73,
  SCR_OPAQUE_STRING_air_strip_obj_markers = 0xA74,
  SCR_OPAQUE_STRING_air_strip_secured_ambient_enemies_setup = 0xA75,
  SCR_OPAQUE_STRING_air_strip_secured_init = 0xA77,
  SCR_OPAQUE_STRING_air_strip_secured_main = 0xA78,
  SCR_OPAQUE_STRING_air_strip_secured_vo = 0xA79,
  SCR_OPAQUE_STRING_air_strip_take_off_mig_01 = 0xA7A,
  SCR_OPAQUE_STRING_air_strip_take_off_mig_02 = 0xA7B,
  SCR_OPAQUE_STRING_air_strip_temp_dialog = 0xA7C,
  SCR_OPAQUE_STRING_air_strip_to_chopper = 0xA7D,
  SCR_OPAQUE_STRING_air_strip_trucks_static_setup = 0xA7E,
  SCR_OPAQUE_STRING_air_strip_victory = 0xA7F,
  SCR_OPAQUE_STRING_airank = 0xA81,
  SCR_OPAQUE_STRING_airburstbomb = 0xA82,
  SCR_OPAQUE_STRING_aircraft_wash = 0xA83,
  SCR_OPAQUE_STRING_airdeniedplayer = 0xA85,
  SCR_OPAQUE_STRING_airdrop_heli = 0xA86,
  SCR_OPAQUE_STRING_airdrop_icon = 0xA87,
  SCR_OPAQUE_STRING_airdrop_max_linear_velocity = 0xA88,
  SCR_OPAQUE_STRING_airdrop_override_death_moving_platform = 0xA89,
  SCR_OPAQUE_STRING_airdrop_override_invalid_moving_platform = 0xA8A,
  SCR_OPAQUE_STRING_airdrop_reward = 0xA8B,
  SCR_OPAQUE_STRING_airdropcratecollision = 0xA8C,
  SCR_OPAQUE_STRING_airdropdetonateonstuck = 0xA8D,
  SCR_OPAQUE_STRING_airdropmarkeractivate = 0xA8E,
  SCR_OPAQUE_STRING_airdroptype = 0xA8F,
  SCR_OPAQUE_STRING_airlock_glass_fog = 0xA91,
  SCR_OPAQUE_STRING_airlock_interior_hatch = 0xA92,
  SCR_OPAQUE_STRING_airlockexplode = 0xA93,
  SCR_OPAQUE_STRING_airplane_list = 0xA94,
  SCR_OPAQUE_STRING_airshipflydefense = 0xA95,
  SCR_OPAQUE_STRING_airshipfx = 0xA97,
  SCR_OPAQUE_STRING_airshipfxonclient = 0xA98,
  SCR_OPAQUE_STRING_airshipfxonconnect = 0xA99,
  SCR_OPAQUE_STRING_airshippitchhatchdown = 0xA9A,
  SCR_OPAQUE_STRING_airshippitchhatchup = 0xA9B,
  SCR_OPAQUE_STRING_airshippitchpropsdown = 0xA9C,
  SCR_OPAQUE_STRING_airshippitchpropsup = 0xA9D,
  SCR_OPAQUE_STRING_airspread = 0xA9E,
  SCR_OPAQUE_STRING_airstrike_earthquake = 0xA9F,
  SCR_OPAQUE_STRING_airstrikedamagedents = 0xAA0,
  SCR_OPAQUE_STRING_airstrikedamagedentscount = 0xAA1,
  SCR_OPAQUE_STRING_airstrikedamagedentsindex = 0xAA2,
  SCR_OPAQUE_STRING_airstrikedamageentsthread = 0xAA3,
  SCR_OPAQUE_STRING_airstrikeexplosion = 0xAA4,
  SCR_OPAQUE_STRING_airstrikeheightscale = 0xAA6,
  SCR_OPAQUE_STRING_airstrikeinprogress = 0xAA7,
  SCR_OPAQUE_STRING_airstrikemadeselectionvo = 0xAA8,
  SCR_OPAQUE_STRING_airstrikessfx = 0xAA9,
  SCR_OPAQUE_STRING_airstriketype = 0xAAA,
  SCR_OPAQUE_STRING_aishootplayer = 0xAAB,
  SCR_OPAQUE_STRING_aispread = 0xAAC,
  SCR_OPAQUE_STRING_aistate = 0xAAD,
  SCR_OPAQUE_STRING_aisuppressai = 0xAAE,
  SCR_OPAQUE_STRING_aithreadthreader = 0xAAF,
  SCR_OPAQUE_STRING_aiturnnotifies = 0xAB0,
  SCR_OPAQUE_STRING_aitype_check = 0xAB1,
  SCR_OPAQUE_STRING_aiupdateanimstate = 0xAB2,
  SCR_OPAQUE_STRING_aiupdatecombat = 0xAB3,
  SCR_OPAQUE_STRING_aiupdatesuppressed = 0xAB4,
  SCR_OPAQUE_STRING_aiweapon = 0xAB5,
  SCR_OPAQUE_STRING_ajax_flare = 0xAB6,
  SCR_OPAQUE_STRING_alarm_annoyance = 0xAB7,
  SCR_OPAQUE_STRING_alarm_ent = 0xAB8,
  SCR_OPAQUE_STRING_alarm_interval = 0xAB9,
  SCR_OPAQUE_STRING_alarm_playing = 0xABA,
  SCR_OPAQUE_STRING_alarm_validate_damage = 0xABB,
  SCR_OPAQUE_STRING_alarms = 0xABC,
  SCR_OPAQUE_STRING_alarms2 = 0xABD,
  SCR_OPAQUE_STRING_alarms_1 = 0xABE,
  SCR_OPAQUE_STRING_alarms_2 = 0xABF,
  SCR_OPAQUE_STRING_alarms_3 = 0xAC0,
  SCR_OPAQUE_STRING_alert_all = 0xAC1,
  SCR_OPAQUE_STRING_alert_enemies = 0xAC3,
  SCR_OPAQUE_STRING_alert_enemies_early = 0xAC4,
  SCR_OPAQUE_STRING_alert_enemies_react = 0xAC5,
  SCR_OPAQUE_STRING_alert_level = 0xAC6,
  SCR_OPAQUE_STRING_alert_level_table = 0xAC7,
  SCR_OPAQUE_STRING_alert_on_chopper_damage = 0xAC8,
  SCR_OPAQUE_STRING_alert_team = 0xAC9,
  SCR_OPAQUE_STRING_alertface = 0xACA,
  SCR_OPAQUE_STRING_alias = 0xACB,
  SCR_OPAQUE_STRING_alien_ai_debug_print = 0xACC,
  SCR_OPAQUE_STRING_alien_area_init = 0xACD,
  SCR_OPAQUE_STRING_alien_attack = 0xACE,
  SCR_OPAQUE_STRING_alien_attack_enemy = 0xACF,
  SCR_OPAQUE_STRING_alien_attack_sequence = 0xAD0,
  SCR_OPAQUE_STRING_alien_attribute_table_init = 0xAD1,
  SCR_OPAQUE_STRING_alien_begindeployableviamarker = 0xAD2,
  SCR_OPAQUE_STRING_alien_challenge_table = 0xAD3,
  SCR_OPAQUE_STRING_alien_character_cac_table = 0xAD4,
  SCR_OPAQUE_STRING_alien_cloak = 0xAD5,
  SCR_OPAQUE_STRING_alien_collectibles_table = 0xAD6,
  SCR_OPAQUE_STRING_alien_combat_resource_callbacks = 0xAD7,
  SCR_OPAQUE_STRING_alien_combat_resources = 0xAD8,
  SCR_OPAQUE_STRING_alien_combat_resources_table = 0xAD9,
  SCR_OPAQUE_STRING_alien_customprematchperiod = 0xADA,
  SCR_OPAQUE_STRING_alien_cycle_intermission = 0xADB,
  SCR_OPAQUE_STRING_alien_cycle_table = 0xADC,
  SCR_OPAQUE_STRING_alien_cycle_table_hardcore = 0xADD,
  SCR_OPAQUE_STRING_alien_eyes_off = 0xADE,
  SCR_OPAQUE_STRING_alien_eyes_off_on_death = 0xADF,
  SCR_OPAQUE_STRING_alien_eyes_on = 0xAE0,
  SCR_OPAQUE_STRING_alien_eyes_on_threaded = 0xAE1,
  SCR_OPAQUE_STRING_alien_fire_off = 0xAE2,
  SCR_OPAQUE_STRING_alien_fire_on = 0xAE3,
  SCR_OPAQUE_STRING_alien_funcs = 0xAE4,
  SCR_OPAQUE_STRING_alien_health_per_player_init = 0xAE5,
  SCR_OPAQUE_STRING_alien_health_per_player_scalar = 0xAE6,
  SCR_OPAQUE_STRING_alien_jump_melee_speed = 0xAE8,
  SCR_OPAQUE_STRING_alien_loadout = 0xAE9,
  SCR_OPAQUE_STRING_alien_loot_initialized = 0xAEA,
  SCR_OPAQUE_STRING_alien_lurker_behavior = 0xAEB,
  SCR_OPAQUE_STRING_alien_lurker_init = 0xAEC,
  SCR_OPAQUE_STRING_alien_lurkers = 0xAED,
  SCR_OPAQUE_STRING_alien_main_loop = 0xAEE,
  SCR_OPAQUE_STRING_alien_make_entity_sentient = 0xAEF,
  SCR_OPAQUE_STRING_alien_max_rank = 0xAF0,
  SCR_OPAQUE_STRING_alien_melee = 0xAF1,
  SCR_OPAQUE_STRING_alien_mode = 0xAF2,
  SCR_OPAQUE_STRING_alien_mode_enable = 0xAF3,
  SCR_OPAQUE_STRING_alien_mode_enable_raw = 0xAF4,
  SCR_OPAQUE_STRING_alien_mode_feature = 0xAF5,
  SCR_OPAQUE_STRING_alien_mode_feature_strings = 0xAF6,
  SCR_OPAQUE_STRING_alien_mode_has = 0xAF7,
  SCR_OPAQUE_STRING_alien_noncombat = 0xAF8,
  SCR_OPAQUE_STRING_alien_perks = 0xAFA,
  SCR_OPAQUE_STRING_alien_perks_table = 0xAFB,
  SCR_OPAQUE_STRING_alien_pet = 0xAFC,
  SCR_OPAQUE_STRING_alien_pet_follow = 0xAFD,
  SCR_OPAQUE_STRING_alien_player_spawn_group = 0xAFE,
  SCR_OPAQUE_STRING_alien_pregame_delay = 0xAFF,
  SCR_OPAQUE_STRING_alien_ranks = 0xB00,
  SCR_OPAQUE_STRING_alien_retreat = 0xB02,
  SCR_OPAQUE_STRING_alien_scene_behavior = 0xB03,
  SCR_OPAQUE_STRING_alien_scene_init = 0xB04,
  SCR_OPAQUE_STRING_alien_scripted = 0xB05,
  SCR_OPAQUE_STRING_alien_synch_attack_enemy = 0xB06,
  SCR_OPAQUE_STRING_alien_test_jump = 0xB07,
  SCR_OPAQUE_STRING_alien_test_loop = 0xB08,
  SCR_OPAQUE_STRING_alien_town_intro = 0xB09,
  SCR_OPAQUE_STRING_alien_town_intro_precache_characters = 0xB0A,
  SCR_OPAQUE_STRING_alien_type = 0xB0C,
  SCR_OPAQUE_STRING_alien_unlock_data = 0xB0E,
  SCR_OPAQUE_STRING_alien_unlock_table = 0xB0F,
  SCR_OPAQUE_STRING_alien_used_resource_rank = 0xB11,
  SCR_OPAQUE_STRING_alien_vo_priority_level = 0xB12,
  SCR_OPAQUE_STRING_alien_wave = 0xB14,
  SCR_OPAQUE_STRING_alien_wave_behavior = 0xB15,
  SCR_OPAQUE_STRING_alien_wave_init = 0xB16,
  SCR_OPAQUE_STRING_alien_wave_spawn_think = 0xB18,
  SCR_OPAQUE_STRING_alien_wave_status = 0xB19,
  SCR_OPAQUE_STRING_alien_wave_table = 0xB1A,
  SCR_OPAQUE_STRING_alien_xp = 0xB1B,
  SCR_OPAQUE_STRING_alienagentspawn = 0xB1C,
  SCR_OPAQUE_STRING_alienagentthink = 0xB1D,
  SCR_OPAQUE_STRING_alienanimdata = 0xB1E,
  SCR_OPAQUE_STRING_alienbbdata = 0xB1F,
  SCR_OPAQUE_STRING_alienclimbdown = 0xB20,
  SCR_OPAQUE_STRING_alienclimbup = 0xB21,
  SCR_OPAQUE_STRING_alienendgame = 0xB22,
  SCR_OPAQUE_STRING_alienmovebackanimchance = 0xB24,
  SCR_OPAQUE_STRING_alienoutcomenotify = 0xB25,
  SCR_OPAQUE_STRING_alienplayerarmor = 0xB26,
  SCR_OPAQUE_STRING_alienplayerpainbreathingsound = 0xB29,
  SCR_OPAQUE_STRING_alienregulartraversal = 0xB2A,
  SCR_OPAQUE_STRING_aliens_give_currency_func = 0xB2B,
  SCR_OPAQUE_STRING_aliens_make_entity_sentient_func = 0xB2C,
  SCR_OPAQUE_STRING_aliensnarecount = 0xB2D,
  SCR_OPAQUE_STRING_alienspawnlogic = 0xB2F,
  SCR_OPAQUE_STRING_alientraversenotetrackhandler = 0xB30,
  SCR_OPAQUE_STRING_alientypecandofriendlydamage = 0xB31,
  SCR_OPAQUE_STRING_align_chalk_marks = 0xB32,
  SCR_OPAQUE_STRING_aligntoverticaledge = 0xB33,
  SCR_OPAQUE_STRING_alivecount = 0xB35,
  SCR_OPAQUE_STRING_aliveplayers = 0xB36,
  SCR_OPAQUE_STRING_all_challenge_completed = 0xB37,
  SCR_OPAQUE_STRING_all_dom_flags = 0xB38,
  SCR_OPAQUE_STRING_all_players_istouching = 0xB39,
  SCR_OPAQUE_STRING_all_rappel_pt3_downstairs_enemies = 0xB3A,
  SCR_OPAQUE_STRING_all_scenes = 0xB3C,
  SCR_OPAQUE_STRING_all_team_steak_col = 0xB3D,
  SCR_OPAQUE_STRING_all_team_streak_col = 0xB3E,
  SCR_OPAQUE_STRING_allcrashes = 0xB3F,
  SCR_OPAQUE_STRING_alley_bokehdots = 0xB40,
  SCR_OPAQUE_STRING_alley_bokehdots_old = 0xB41,
  SCR_OPAQUE_STRING_alley_end_of_alley_fx = 0xB42,
  SCR_OPAQUE_STRING_alley_fill_shallow = 0xB44,
  SCR_OPAQUE_STRING_alley_flood = 0xB45,
  SCR_OPAQUE_STRING_alley_flood_collision_cheater = 0xB46,
  SCR_OPAQUE_STRING_alley_flood_far_vfx_attachments = 0xB47,
  SCR_OPAQUE_STRING_alley_flood_fx = 0xB48,
  SCR_OPAQUE_STRING_alley_flood_near_vfx_attachments = 0xB49,
  SCR_OPAQUE_STRING_alley_flood_spawn = 0xB4A,
  SCR_OPAQUE_STRING_alley_flood_water = 0xB4C,
  SCR_OPAQUE_STRING_alley_froth_vfx = 0xB4D,
  SCR_OPAQUE_STRING_alley_giantsplashes_left = 0xB4E,
  SCR_OPAQUE_STRING_alley_kill_triggers = 0xB50,
  SCR_OPAQUE_STRING_alley_near = 0xB51,
  SCR_OPAQUE_STRING_alley_stumble = 0xB52,
  SCR_OPAQUE_STRING_allie1_tussbubbs = 0xB53,
  SCR_OPAQUE_STRING_allies_baker_command_end_anim = 0xB55,
  SCR_OPAQUE_STRING_allies_baker_console_anims = 0xB56,
  SCR_OPAQUE_STRING_allies_baker_flarestack_exit = 0xB57,
  SCR_OPAQUE_STRING_allies_baker_hold = 0xB58,
  SCR_OPAQUE_STRING_allies_baker_hold_approach_and_idle = 0xB59,
  SCR_OPAQUE_STRING_allies_breach_anim_node = 0xB5A,
  SCR_OPAQUE_STRING_allies_building_entry_movement = 0xB5B,
  SCR_OPAQUE_STRING_allies_building_entry_vo = 0xB5C,
  SCR_OPAQUE_STRING_allies_building_exit_hookup = 0xB5D,
  SCR_OPAQUE_STRING_allies_convoy_dialogue = 0xB60,
  SCR_OPAQUE_STRING_allies_cqbwalk = 0xB61,
  SCR_OPAQUE_STRING_allies_dam_vign = 0xB62,
  SCR_OPAQUE_STRING_allies_dialog_col = 0xB63,
  SCR_OPAQUE_STRING_allies_dialog_playing = 0xB64,
  SCR_OPAQUE_STRING_allies_engine_room = 0xB65,
  SCR_OPAQUE_STRING_allies_first_advance = 0xB66,
  SCR_OPAQUE_STRING_allies_gunship_run = 0xB67,
  SCR_OPAQUE_STRING_allies_help_when_player_shoots_balcony_enemies = 0xB68,
  SCR_OPAQUE_STRING_allies_help_when_player_shoots_second_floor_left = 0xB6A,
  SCR_OPAQUE_STRING_allies_help_when_player_shoots_second_floor_middle_or_right = 0xB6B,
  SCR_OPAQUE_STRING_allies_hesh_final_position = 0xB6C,
  SCR_OPAQUE_STRING_allies_inverted_rappel_movement = 0xB6D,
  SCR_OPAQUE_STRING_allies_inverted_rappel_vo = 0xB6E,
  SCR_OPAQUE_STRING_allies_jeep_sync_anim = 0xB6F,
  SCR_OPAQUE_STRING_allies_move_down_to_first_floor_combat = 0xB70,
  SCR_OPAQUE_STRING_allies_move_down_to_second_floor_combat = 0xB71,
  SCR_OPAQUE_STRING_allies_move_down_to_third_floor_combat = 0xB72,
  SCR_OPAQUE_STRING_allies_move_to_checkpoint_start = 0xB73,
  SCR_OPAQUE_STRING_allies_movement_post_missile_launch = 0xB76,
  SCR_OPAQUE_STRING_allies_movement_tower = 0xB77,
  SCR_OPAQUE_STRING_allies_movement_warehouse = 0xB78,
  SCR_OPAQUE_STRING_allies_mudpumps = 0xB79,
  SCR_OPAQUE_STRING_allies_rappel_anims = 0xB7A,
  SCR_OPAQUE_STRING_allies_rappel_stealth_anims = 0xB7B,
  SCR_OPAQUE_STRING_allies_ride_chopper = 0xB7F,
  SCR_OPAQUE_STRING_allies_run_for_garage = 0xB80,
  SCR_OPAQUE_STRING_allies_sat1 = 0xB81,
  SCR_OPAQUE_STRING_allies_sat2 = 0xB82,
  SCR_OPAQUE_STRING_allies_shadow_kill_movement = 0xB83,
  SCR_OPAQUE_STRING_allies_shadow_kill_vo = 0xB84,
  SCR_OPAQUE_STRING_allies_start_cqb = 0xB85,
  SCR_OPAQUE_STRING_allies_stealth_behavior_end_count = 0xB86,
  SCR_OPAQUE_STRING_allies_tanks = 0xB87,
  SCR_OPAQUE_STRING_allies_throw_smoke = 0xB88,
  SCR_OPAQUE_STRING_allies_to_rappel = 0xB89,
  SCR_OPAQUE_STRING_allies_vo_post_missile_launch = 0xB8A,
  SCR_OPAQUE_STRING_allies_vo_tower = 0xB8B,
  SCR_OPAQUE_STRING_alliescapturing = 0xB8D,
  SCR_OPAQUE_STRING_allieschopper = 0xB8E,
  SCR_OPAQUE_STRING_alliesinsertchopper = 0xB8F,
  SCR_OPAQUE_STRING_alliesteletostartspot = 0xB90,
  SCR_OPAQUE_STRING_allow_dry_fire = 0xB91,
  SCR_OPAQUE_STRING_allow_fall = 0xB92,
  SCR_OPAQUE_STRING_allow_fire = 0xB93,
  SCR_OPAQUE_STRING_allow_glass_break_slide = 0xB94,
  SCR_OPAQUE_STRING_allow_level_killstreak = 0xB96,
  SCR_OPAQUE_STRING_allow_movement = 0xB97,
  SCR_OPAQUE_STRING_allow_pipe_damage = 0xB98,
  SCR_OPAQUE_STRING_allow_player_ascend_move = 0xB99,
  SCR_OPAQUE_STRING_allow_sprint = 0xB9A,
  SCR_OPAQUE_STRING_allow_walk_up = 0xB9B,
  SCR_OPAQUE_STRING_allowable_double_attachments = 0xB9C,
  SCR_OPAQUE_STRING_allowboard = 0xB9D,
  SCR_OPAQUE_STRING_allowclasschoice = 0xB9F,
  SCR_OPAQUE_STRING_allowcrouch = 0xBA0,
  SCR_OPAQUE_STRING_allowed_cycles = 0xBA1,
  SCR_OPAQUE_STRING_allowedcallouts = 0xBA3,
  SCR_OPAQUE_STRING_allowedinsolo = 0xBA4,
  SCR_OPAQUE_STRING_allowedpartialreloadontheruntime = 0xBA5,
  SCR_OPAQUE_STRING_allowedtofire = 0xBA6,
  SCR_OPAQUE_STRING_allowempdamage = 0xBA7,
  SCR_OPAQUE_STRING_allowenemyspectate = 0xBA8,
  SCR_OPAQUE_STRING_allowfauxdeath = 0xBA9,
  SCR_OPAQUE_STRING_allowfreespectate = 0xBAA,
  SCR_OPAQUE_STRING_allowgrenadedamage = 0xBAB,
  SCR_OPAQUE_STRING_allowlaststandai = 0xBAC,
  SCR_OPAQUE_STRING_allowlatecomers = 0xBAD,
  SCR_OPAQUE_STRING_allowneutral = 0xBAF,
  SCR_OPAQUE_STRING_allowridekillstreakplayerexit = 0xBB0,
  SCR_OPAQUE_STRING_allowsafeeject = 0xBB1,
  SCR_OPAQUE_STRING_allowshoot = 0xBB2,
  SCR_OPAQUE_STRING_allowteamchoice = 0xBB3,
  SCR_OPAQUE_STRING_allowtelefrag = 0xBB4,
  SCR_OPAQUE_STRING_allowuse = 0xBB5,
  SCR_OPAQUE_STRING_allowvehicledamage = 0xBB6,
  SCR_OPAQUE_STRING_allowvote = 0xBB7,
  SCR_OPAQUE_STRING_allowweapons = 0xBB8,
  SCR_OPAQUE_STRING_ally = 0xBB9,
  SCR_OPAQUE_STRING_ally0_inhere = 0xBBA,
  SCR_OPAQUE_STRING_ally0_instruction_vo = 0xBBB,
  SCR_OPAQUE_STRING_ally0_instruction_vo_holdup = 0xBBC,
  SCR_OPAQUE_STRING_ally0_instruction_vo_table = 0xBBD,
  SCR_OPAQUE_STRING_ally0_main = 0xBBE,
  SCR_OPAQUE_STRING_ally0_main_int = 0xBBF,
  SCR_OPAQUE_STRING_ally0_move_to_end = 0xBC1,
  SCR_OPAQUE_STRING_ally0_start_path2 = 0xBC2,
  SCR_OPAQUE_STRING_ally0_traversal_logic = 0xBC3,
  SCR_OPAQUE_STRING_ally1_ascend_ascender = 0xBC4,
  SCR_OPAQUE_STRING_ally1_ascend_launcher = 0xBC5,
  SCR_OPAQUE_STRING_ally1_main_int = 0xBC8,
  SCR_OPAQUE_STRING_ally1_mall = 0xBC9,
  SCR_OPAQUE_STRING_ally2_ascend_ascender = 0xBCA,
  SCR_OPAQUE_STRING_ally2_ascend_launcher = 0xBCB,
  SCR_OPAQUE_STRING_ally2_main = 0xBCC,
  SCR_OPAQUE_STRING_ally2_main_int = 0xBCD,
  SCR_OPAQUE_STRING_ally2_mall = 0xBCE,
  SCR_OPAQUE_STRING_ally_0_animation = 0xBCF,
  SCR_OPAQUE_STRING_ally_1_animation = 0xBD0,
  SCR_OPAQUE_STRING_ally_advance_watcher = 0xBD2,
  SCR_OPAQUE_STRING_ally_alley_flood_spawn = 0xBD4,
  SCR_OPAQUE_STRING_ally_animate_vault_scene = 0xBD5,
  SCR_OPAQUE_STRING_ally_breach_gas = 0xBD6,
  SCR_OPAQUE_STRING_ally_breach_goal = 0xBD7,
  SCR_OPAQUE_STRING_ally_breach_vo = 0xBD8,
  SCR_OPAQUE_STRING_ally_calm_idle_internal = 0xBD9,
  SCR_OPAQUE_STRING_ally_catchup = 0xBDB,
  SCR_OPAQUE_STRING_ally_catchup_solo = 0xBDC,
  SCR_OPAQUE_STRING_ally_cleanup = 0xBDF,
  SCR_OPAQUE_STRING_ally_clear_flee_behavior = 0xBE0,
  SCR_OPAQUE_STRING_ally_color_node_movement = 0xBE1,
  SCR_OPAQUE_STRING_ally_console_scene = 0xBE2,
  SCR_OPAQUE_STRING_ally_cqb_kill = 0xBE3,
  SCR_OPAQUE_STRING_ally_cqb_kill_solo = 0xBE4,
  SCR_OPAQUE_STRING_ally_crouch_walk_to_goal = 0xBE5,
  SCR_OPAQUE_STRING_ally_current_state = 0xBE6,
  SCR_OPAQUE_STRING_ally_dialogue = 0xBE7,
  SCR_OPAQUE_STRING_ally_do_reload_anim = 0xBE8,
  SCR_OPAQUE_STRING_ally_dog_attack_free = 0xBE9,
  SCR_OPAQUE_STRING_ally_dog_follow_owner = 0xBEB,
  SCR_OPAQUE_STRING_ally_dog_guard_owner = 0xBED,
  SCR_OPAQUE_STRING_ally_dog_guardpoint_radius = 0xBEE,
  SCR_OPAQUE_STRING_ally_dog_scripted = 0xBEF,
  SCR_OPAQUE_STRING_ally_dog_search_radius = 0xBF0,
  SCR_OPAQUE_STRING_ally_dog_sniff_mode = 0xBF1,
  SCR_OPAQUE_STRING_ally_dog_think = 0xBF2,
  SCR_OPAQUE_STRING_ally_dogs = 0xBF3,
  SCR_OPAQUE_STRING_ally_edge_nodes = 0xBF6,
  SCR_OPAQUE_STRING_ally_elevator_clip_back = 0xBF8,
  SCR_OPAQUE_STRING_ally_ent_del = 0xBF9,
  SCR_OPAQUE_STRING_ally_finale_logic = 0xBFA,
  SCR_OPAQUE_STRING_ally_finale_movement_setup = 0xBFB,
  SCR_OPAQUE_STRING_ally_fire_until_out_of_ammo = 0xBFC,
  SCR_OPAQUE_STRING_ally_fire_until_out_of_ammo_internal = 0xBFD,
  SCR_OPAQUE_STRING_ally_fired = 0xBFE,
  SCR_OPAQUE_STRING_ally_first_frame_check = 0xBFF,
  SCR_OPAQUE_STRING_ally_flee_setup = 0xC00,
  SCR_OPAQUE_STRING_ally_garage = 0xC01,
  SCR_OPAQUE_STRING_ally_garage_sneak = 0xC02,
  SCR_OPAQUE_STRING_ally_get_fire_animation = 0xC03,
  SCR_OPAQUE_STRING_ally_get_horizontal_start_distance = 0xC04,
  SCR_OPAQUE_STRING_ally_get_horizontal_stop_distance = 0xC05,
  SCR_OPAQUE_STRING_ally_get_vertical_stop_anim_distance = 0xC06,
  SCR_OPAQUE_STRING_ally_goggle_glow_on = 0xC0A,
  SCR_OPAQUE_STRING_ally_grenade = 0xC0B,
  SCR_OPAQUE_STRING_ally_groups = 0xC0C,
  SCR_OPAQUE_STRING_ally_gun_hide = 0xC0E,
  SCR_OPAQUE_STRING_ally_gun_show = 0xC0F,
  SCR_OPAQUE_STRING_ally_impact_org = 0xC11,
  SCR_OPAQUE_STRING_ally_intro_anims_and_logic = 0xC12,
  SCR_OPAQUE_STRING_ally_invasion_scene_approach = 0xC13,
  SCR_OPAQUE_STRING_ally_is_aiming = 0xC14,
  SCR_OPAQUE_STRING_ally_kill = 0xC17,
  SCR_OPAQUE_STRING_ally_left_death = 0xC18,
  SCR_OPAQUE_STRING_ally_listen_dog_commands = 0xC19,
  SCR_OPAQUE_STRING_ally_littlebird_1 = 0xC1A,
  SCR_OPAQUE_STRING_ally_littlebird_2 = 0xC1B,
  SCR_OPAQUE_STRING_ally_main = 0xC1D,
  SCR_OPAQUE_STRING_ally_main_walk = 0xC1E,
  SCR_OPAQUE_STRING_ally_make_fall = 0xC1F,
  SCR_OPAQUE_STRING_ally_move_to_jeep = 0xC21,
  SCR_OPAQUE_STRING_ally_movement = 0xC22,
  SCR_OPAQUE_STRING_ally_nagging = 0xC24,
  SCR_OPAQUE_STRING_ally_new_state = 0xC25,
  SCR_OPAQUE_STRING_ally_node_logic = 0xC26,
  SCR_OPAQUE_STRING_ally_on_stairs = 0xC27,
  SCR_OPAQUE_STRING_ally_owner = 0xC28,
  SCR_OPAQUE_STRING_ally_physics_pulse = 0xC29,
  SCR_OPAQUE_STRING_ally_push = 0xC2A,
  SCR_OPAQUE_STRING_ally_push_player_after_unload = 0xC2B,
  SCR_OPAQUE_STRING_ally_rappel_distance2dsquared_to_player = 0xC2C,
  SCR_OPAQUE_STRING_ally_rappel_get_aim_pitch = 0xC2F,
  SCR_OPAQUE_STRING_ally_rappel_get_aim_yaw = 0xC30,
  SCR_OPAQUE_STRING_ally_rappel_get_enemy = 0xC31,
  SCR_OPAQUE_STRING_ally_rappel_get_rope_start = 0xC32,
  SCR_OPAQUE_STRING_ally_rappel_moving_change_direction = 0xC34,
  SCR_OPAQUE_STRING_ally_rappel_moving_stop_idle = 0xC35,
  SCR_OPAQUE_STRING_ally_rappel_moving_vertical_stop = 0xC36,
  SCR_OPAQUE_STRING_ally_rappel_pause_movement_horizontal = 0xC37,
  SCR_OPAQUE_STRING_ally_rappel_reload = 0xC38,
  SCR_OPAQUE_STRING_ally_rappel_rope = 0xC39,
  SCR_OPAQUE_STRING_ally_rappel_set_perfect_accuracy = 0xC3B,
  SCR_OPAQUE_STRING_ally_rappel_setup_rope = 0xC3C,
  SCR_OPAQUE_STRING_ally_rappel_start_aiming = 0xC3D,
  SCR_OPAQUE_STRING_ally_rappel_start_movement_horizontal = 0xC3E,
  SCR_OPAQUE_STRING_ally_rappel_start_movement_horizontal_internal = 0xC3F,
  SCR_OPAQUE_STRING_ally_rappel_start_rope = 0xC40,
  SCR_OPAQUE_STRING_ally_rappel_start_shooting = 0xC41,
  SCR_OPAQUE_STRING_ally_rappel_stealth_movement_vertical = 0xC42,
  SCR_OPAQUE_STRING_ally_rappel_stop_aiming = 0xC43,
  SCR_OPAQUE_STRING_ally_rappel_stop_rope = 0xC44,
  SCR_OPAQUE_STRING_ally_rappel_stop_shooting = 0xC45,
  SCR_OPAQUE_STRING_ally_reset_second_floor_right = 0xC47,
  SCR_OPAQUE_STRING_ally_reset_weights = 0xC48,
  SCR_OPAQUE_STRING_ally_roof_collapsing_vo = 0xC4A,
  SCR_OPAQUE_STRING_ally_rooftop_water_to_debrisbridge = 0xC4B,
  SCR_OPAQUE_STRING_ally_rubber_banding_solo = 0xC4C,
  SCR_OPAQUE_STRING_ally_set_initial_weights = 0xC4D,
  SCR_OPAQUE_STRING_ally_setup = 0xC4E,
  SCR_OPAQUE_STRING_ally_setup_aim = 0xC4F,
  SCR_OPAQUE_STRING_ally_shoot_at_enemy = 0xC51,
  SCR_OPAQUE_STRING_ally_shoot_convoy = 0xC52,
  SCR_OPAQUE_STRING_ally_shoot_nodes = 0xC53,
  SCR_OPAQUE_STRING_ally_shoot_think = 0xC54,
  SCR_OPAQUE_STRING_ally_shooting_loop = 0xC55,
  SCR_OPAQUE_STRING_ally_shoots_fire_extinguisher = 0xC56,
  SCR_OPAQUE_STRING_ally_sprint = 0xC57,
  SCR_OPAQUE_STRING_ally_sprint_end = 0xC58,
  SCR_OPAQUE_STRING_ally_sprint_setup = 0xC59,
  SCR_OPAQUE_STRING_ally_start = 0xC5A,
  SCR_OPAQUE_STRING_ally_start_1 = 0xC5B,
  SCR_OPAQUE_STRING_ally_start_2 = 0xC5C,
  SCR_OPAQUE_STRING_ally_start_calm_idle = 0xC5D,
  SCR_OPAQUE_STRING_ally_start_cornerwaving = 0xC5E,
  SCR_OPAQUE_STRING_ally_stealth_kill = 0xC5F,
  SCR_OPAQUE_STRING_ally_stealth_settings = 0xC60,
  SCR_OPAQUE_STRING_ally_stop_calm_idle = 0xC61,
  SCR_OPAQUE_STRING_ally_through_sat_panel = 0xC67,
  SCR_OPAQUE_STRING_ally_to_magicbullet = 0xC68,
  SCR_OPAQUE_STRING_ally_transition_to_target_weights = 0xC69,
  SCR_OPAQUE_STRING_ally_turnanim_hack = 0xC6A,
  SCR_OPAQUE_STRING_ally_vault_props = 0xC6B,
  SCR_OPAQUE_STRING_ally_vo = 0xC6C,
  SCR_OPAQUE_STRING_ally_wait_to_get_impatient = 0xC6D,
  SCR_OPAQUE_STRING_ally_zipline_count = 0xC6E,
  SCR_OPAQUE_STRING_ally_zipline_nag = 0xC6F,
  SCR_OPAQUE_STRING_allyagentthink = 0xC70,
  SCR_OPAQUE_STRING_allyc17_right_waits = 0xC71,
  SCR_OPAQUE_STRING_allyheli = 0xC72,
  SCR_OPAQUE_STRING_allytank1 = 0xC76,
  SCR_OPAQUE_STRING_allytime = 0xC7A,
  SCR_OPAQUE_STRING_alpha1 = 0xC7B,
  SCR_OPAQUE_STRING_alpha2 = 0xC7C,
  SCR_OPAQUE_STRING_alpha_ascend_rubberband_cleanup = 0xC7E,
  SCR_OPAQUE_STRING_alpha_curr_rate = 0xC7F,
  SCR_OPAQUE_STRING_alphabetize = 0xC80,
  SCR_OPAQUE_STRING_already_checking_udwfx = 0xC81,
  SCR_OPAQUE_STRING_already_dumpped = 0xC82,
  SCR_OPAQUE_STRING_already_issued = 0xC83,
  SCR_OPAQUE_STRING_already_ran_function = 0xC84,
  SCR_OPAQUE_STRING_already_spawned = 0xC85,
  SCR_OPAQUE_STRING_already_stuck = 0xC86,
  SCR_OPAQUE_STRING_already_thrown = 0xC87,
  SCR_OPAQUE_STRING_alreadyaddedtoalivecount = 0xC89,
  SCR_OPAQUE_STRING_alreadyrotating = 0xC8B,
  SCR_OPAQUE_STRING_alreadystumbling = 0xC8C,
  SCR_OPAQUE_STRING_alreadytarget = 0xC8D,
  SCR_OPAQUE_STRING_alsodamageparent = 0xC8E,
  SCR_OPAQUE_STRING_alt_override = 0xC8F,
  SCR_OPAQUE_STRING_alternates = 0xC90,
  SCR_OPAQUE_STRING_altitude = 0xC91,
  SCR_OPAQUE_STRING_altitude_adjusted = 0xC92,
  SCR_OPAQUE_STRING_altitude_min_override = 0xC93,
  SCR_OPAQUE_STRING_altitude_min_override_remove = 0xC94,
  SCR_OPAQUE_STRING_altitude_override_over_time = 0xC95,
  SCR_OPAQUE_STRING_altitudepolls = 0xC96,
  SCR_OPAQUE_STRING_altwarning = 0xC97,
  SCR_OPAQUE_STRING_always_pain = 0xC98,
  SCR_OPAQUE_STRING_always_play_pain_sound = 0xC99,
  SCR_OPAQUE_STRING_alwaysdrawfriendlynames = 0xC9A,
  SCR_OPAQUE_STRING_alwaysgamemodeclass = 0xC9B,
  SCR_OPAQUE_STRING_alwayslookatfirsttarget = 0xC9C,
  SCR_OPAQUE_STRING_alwaysquake = 0xC9D,
  SCR_OPAQUE_STRING_alwaysrocketdeath = 0xC9E,
  SCR_OPAQUE_STRING_alwaysrunforward = 0xC9F,
  SCR_OPAQUE_STRING_amb_quakes = 0xCA0,
  SCR_OPAQUE_STRING_ambience_inner = 0xCA1,
  SCR_OPAQUE_STRING_ambient = 0xCA3,
  SCR_OPAQUE_STRING_ambient_a10s = 0xCA4,
  SCR_OPAQUE_STRING_ambient_airburst_periph_cleanup = 0xCA5,
  SCR_OPAQUE_STRING_ambient_airbursts = 0xCA6,
  SCR_OPAQUE_STRING_ambient_airbursts_player_effcts = 0xCA7,
  SCR_OPAQUE_STRING_ambient_airbursts_startpoint = 0xCA8,
  SCR_OPAQUE_STRING_ambient_animate = 0xCAA,
  SCR_OPAQUE_STRING_ambient_breach_tank_a10_pass = 0xCAB,
  SCR_OPAQUE_STRING_ambient_building_elevators = 0xCAC,
  SCR_OPAQUE_STRING_ambient_building_explosions = 0xCAD,
  SCR_OPAQUE_STRING_ambient_building_lights = 0xCAE,
  SCR_OPAQUE_STRING_ambient_building_lights_internal = 0xCAF,
  SCR_OPAQUE_STRING_ambient_canyon_airburst_close_shake = 0xCB0,
  SCR_OPAQUE_STRING_ambient_canyon_airburst_fx_teleport_and_delete = 0xCB1,
  SCR_OPAQUE_STRING_ambient_canyon_airbursts_periph = 0xCB3,
  SCR_OPAQUE_STRING_ambient_choppers = 0xCB5,
  SCR_OPAQUE_STRING_ambient_combat_guys = 0xCB6,
  SCR_OPAQUE_STRING_ambient_derrick_animation = 0xCB7,
  SCR_OPAQUE_STRING_ambient_drones = 0xCB8,
  SCR_OPAQUE_STRING_ambient_event_thread = 0xCB9,
  SCR_OPAQUE_STRING_ambient_ext = 0xCBA,
  SCR_OPAQUE_STRING_ambient_fence_shocks = 0xCBB,
  SCR_OPAQUE_STRING_ambient_guys_anims = 0xCBC,
  SCR_OPAQUE_STRING_ambient_hinds = 0xCBD,
  SCR_OPAQUE_STRING_ambient_int = 0xCBE,
  SCR_OPAQUE_STRING_ambient_jet_by_sound = 0xCBF,
  SCR_OPAQUE_STRING_ambient_nh90_landers = 0xCC2,
  SCR_OPAQUE_STRING_ambient_road_runners = 0xCC4,
  SCR_OPAQUE_STRING_ambient_road_vehicles = 0xCC5,
  SCR_OPAQUE_STRING_ambient_rog_strike = 0xCC6,
  SCR_OPAQUE_STRING_ambient_rog_strike_intro = 0xCC7,
  SCR_OPAQUE_STRING_ambient_rog_strike_timer = 0xCC9,
  SCR_OPAQUE_STRING_ambient_runner_think = 0xCCA,
  SCR_OPAQUE_STRING_ambient_track = 0xCCC,
  SCR_OPAQUE_STRING_ambient_vehicle_spawning = 0xCCD,
  SCR_OPAQUE_STRING_ambush_duration = 0xCCF,
  SCR_OPAQUE_STRING_ambush_enemies = 0xCD1,
  SCR_OPAQUE_STRING_ambush_guy_outcome_logic = 0xCD5,
  SCR_OPAQUE_STRING_ambush_hidden_settings = 0xCD6,
  SCR_OPAQUE_STRING_ambush_init = 0xCD7,
  SCR_OPAQUE_STRING_ambush_jeep2_backr = 0xCD8,
  SCR_OPAQUE_STRING_ambush_jeep2_driver = 0xCD9,
  SCR_OPAQUE_STRING_ambush_jeep2_guy_wave = 0xCDA,
  SCR_OPAQUE_STRING_ambush_jeep2_passenger = 0xCDB,
  SCR_OPAQUE_STRING_ambush_jeep_latch_close_lf = 0xCDD,
  SCR_OPAQUE_STRING_ambush_jeep_latch_close_rr = 0xCDF,
  SCR_OPAQUE_STRING_ambush_jeep_latch_open_lf = 0xCE0,
  SCR_OPAQUE_STRING_ambush_jeep_latch_open_rf = 0xCE1,
  SCR_OPAQUE_STRING_ambush_jeep_latch_open_rr = 0xCE2,
  SCR_OPAQUE_STRING_ambush_jeep_passenger = 0xCE3,
  SCR_OPAQUE_STRING_ambush_kill_ally = 0xCE6,
  SCR_OPAQUE_STRING_ambush_kill_driver = 0xCE7,
  SCR_OPAQUE_STRING_ambush_kill_driver_cypher = 0xCE8,
  SCR_OPAQUE_STRING_ambush_kill_driver_player = 0xCE9,
  SCR_OPAQUE_STRING_ambush_main = 0xCEA,
  SCR_OPAQUE_STRING_ambush_notify_on_player_kill = 0xCEB,
  SCR_OPAQUE_STRING_ambush_notify_on_player_shot = 0xCEC,
  SCR_OPAQUE_STRING_ambush_patrol_guys = 0xCEE,
  SCR_OPAQUE_STRING_ambush_patrol_logic = 0xCEF,
  SCR_OPAQUE_STRING_ambush_patrollers = 0xCF0,
  SCR_OPAQUE_STRING_ambush_player_did_ambush = 0xCF1,
  SCR_OPAQUE_STRING_ambush_player_ran_ahead = 0xCF2,
  SCR_OPAQUE_STRING_ambush_recover_anim = 0xCF3,
  SCR_OPAQUE_STRING_ambush_script = 0xCF4,
  SCR_OPAQUE_STRING_ambush_stealth_settings = 0xCF5,
  SCR_OPAQUE_STRING_ambush_trap_ent = 0xCF6,
  SCR_OPAQUE_STRING_ambush_yaw = 0xCF8,
  SCR_OPAQUE_STRING_ammo = 0xCFB,
  SCR_OPAQUE_STRING_ammo_cache_think_global = 0xCFC,
  SCR_OPAQUE_STRING_ammo_crate_failsafe = 0xCFD,
  SCR_OPAQUE_STRING_ammo_hack = 0xCFE,
  SCR_OPAQUE_STRING_ammo_icon = 0xCFF,
  SCR_OPAQUE_STRING_ammo_icon_fade_in = 0xD00,
  SCR_OPAQUE_STRING_ammo_icon_fade_out = 0xD01,
  SCR_OPAQUE_STRING_ammo_pickup = 0xD04,
  SCR_OPAQUE_STRING_ammo_thrower_scene = 0xD05,
  SCR_OPAQUE_STRING_ammocheatinterval = 0xD06,
  SCR_OPAQUE_STRING_ammocheattime = 0xD07,
  SCR_OPAQUE_STRING_ammocount = 0xD08,
  SCR_OPAQUE_STRING_ammocounterhide = 0xD09,
  SCR_OPAQUE_STRING_ammoomnvar = 0xD0A,
  SCR_OPAQUE_STRING_ammopickup = 0xD0B,
  SCR_OPAQUE_STRING_ammopickupfunc = 0xD0C,
  SCR_OPAQUE_STRING_ammopickupmodel = 0xD0D,
  SCR_OPAQUE_STRING_ammorefillprimary = 0xD0E,
  SCR_OPAQUE_STRING_ammorefillsecondary = 0xD0F,
  SCR_OPAQUE_STRING_ammorestockcheckfreq = 0xD10,
  SCR_OPAQUE_STRING_amount = 0xD13,
  SCR_OPAQUE_STRING_amplitude = 0xD14,
  SCR_OPAQUE_STRING_anchor_line_impact = 0xD16,
  SCR_OPAQUE_STRING_angel_flare = 0xD17,
  SCR_OPAQUE_STRING_angel_flare_burst = 0xD18,
  SCR_OPAQUE_STRING_angelflareprecache = 0xD19,
  SCR_OPAQUE_STRING_angered = 0xD1A,
  SCR_OPAQUE_STRING_angle_180 = 0xD1B,
  SCR_OPAQUE_STRING_angle_lerp = 0xD1D,
  SCR_OPAQUE_STRING_angle_offset = 0xD1E,
  SCR_OPAQUE_STRING_anglerangethread = 0xD1F,
  SCR_OPAQUE_STRING_angles3d = 0xD20,
  SCR_OPAQUE_STRING_angles_within = 0xD23,
  SCR_OPAQUE_STRING_anglescheck = 0xD24,
  SCR_OPAQUE_STRING_anglesclamp180 = 0xD25,
  SCR_OPAQUE_STRING_angry_flood_big_wave_water = 0xD28,
  SCR_OPAQUE_STRING_angry_flood_collision_cheater = 0xD2B,
  SCR_OPAQUE_STRING_angry_flood_collision_cheater_spawn = 0xD2C,
  SCR_OPAQUE_STRING_angry_flood_collision_dodamage = 0xD2D,
  SCR_OPAQUE_STRING_angry_flood_collision_spawn = 0xD2E,
  SCR_OPAQUE_STRING_angry_flood_finishing_move = 0xD2F,
  SCR_OPAQUE_STRING_angry_flood_rumble = 0xD30,
  SCR_OPAQUE_STRING_angry_flood_rumble_loop = 0xD31,
  SCR_OPAQUE_STRING_angry_flood_splash_sequencing_lf = 0xD32,
  SCR_OPAQUE_STRING_angry_flood_street_mist = 0xD34,
  SCR_OPAQUE_STRING_angry_flood_water = 0xD35,
  SCR_OPAQUE_STRING_anim_addmodel = 0xD36,
  SCR_OPAQUE_STRING_anim_animationendnotify = 0xD37,
  SCR_OPAQUE_STRING_anim_array = 0xD38,
  SCR_OPAQUE_STRING_anim_at_entity = 0xD39,
  SCR_OPAQUE_STRING_anim_at_self = 0xD3A,
  SCR_OPAQUE_STRING_anim_base = 0xD3B,
  SCR_OPAQUE_STRING_anim_blend_time_override = 0xD3C,
  SCR_OPAQUE_STRING_anim_boost = 0xD3D,
  SCR_OPAQUE_STRING_anim_break_entrance = 0xD3E,
  SCR_OPAQUE_STRING_anim_changes_pushplayer = 0xD3F,
  SCR_OPAQUE_STRING_anim_custom_animmode = 0xD41,
  SCR_OPAQUE_STRING_anim_custom_animmode_loop = 0xD42,
  SCR_OPAQUE_STRING_anim_custom_animmode_loop_solo = 0xD43,
  SCR_OPAQUE_STRING_anim_custom_animmode_on_guy = 0xD44,
  SCR_OPAQUE_STRING_anim_deathnotify = 0xD46,
  SCR_OPAQUE_STRING_anim_dialogueendnotify = 0xD47,
  SCR_OPAQUE_STRING_anim_disablepain = 0xD48,
  SCR_OPAQUE_STRING_anim_dontpushplayer = 0xD49,
  SCR_OPAQUE_STRING_anim_down_move_strength = 0xD4A,
  SCR_OPAQUE_STRING_anim_drop_bone = 0xD4B,
  SCR_OPAQUE_STRING_anim_end_early = 0xD4C,
  SCR_OPAQUE_STRING_anim_end_early_animationendnotify = 0xD4D,
  SCR_OPAQUE_STRING_anim_end_early_deathnotify = 0xD4E,
  SCR_OPAQUE_STRING_anim_end_early_dialogueendnotify = 0xD4F,
  SCR_OPAQUE_STRING_anim_end_early_facialendnotify = 0xD50,
  SCR_OPAQUE_STRING_anim_enemies_non_combat = 0xD53,
  SCR_OPAQUE_STRING_anim_enemies_non_combat_rate = 0xD54,
  SCR_OPAQUE_STRING_anim_ent_a = 0xD57,
  SCR_OPAQUE_STRING_anim_ent_b = 0xD58,
  SCR_OPAQUE_STRING_anim_ent_c = 0xD59,
  SCR_OPAQUE_STRING_anim_facialanim = 0xD5C,
  SCR_OPAQUE_STRING_anim_fake_loop_endon = 0xD5F,
  SCR_OPAQUE_STRING_anim_first_frame = 0xD60,
  SCR_OPAQUE_STRING_anim_first_frame_on_guy = 0xD61,
  SCR_OPAQUE_STRING_anim_first_frame_solo = 0xD62,
  SCR_OPAQUE_STRING_anim_first_roll_everyone = 0xD63,
  SCR_OPAQUE_STRING_anim_generic_custom_animmode_loop = 0xD66,
  SCR_OPAQUE_STRING_anim_generic_gravity_run = 0xD69,
  SCR_OPAQUE_STRING_anim_generic_loop = 0xD6A,
  SCR_OPAQUE_STRING_anim_generic_queue = 0xD6B,
  SCR_OPAQUE_STRING_anim_generic_reach = 0xD6C,
  SCR_OPAQUE_STRING_anim_generic_reach_and_animate = 0xD6D,
  SCR_OPAQUE_STRING_anim_generic_reach_and_arrive = 0xD6E,
  SCR_OPAQUE_STRING_anim_generic_run = 0xD6F,
  SCR_OPAQUE_STRING_anim_generic_teleport = 0xD70,
  SCR_OPAQUE_STRING_anim_gunhand = 0xD71,
  SCR_OPAQUE_STRING_anim_guninhand = 0xD72,
  SCR_OPAQUE_STRING_anim_handle_notetrack = 0xD73,
  SCR_OPAQUE_STRING_anim_head_faceplate = 0xD74,
  SCR_OPAQUE_STRING_anim_index = 0xD75,
  SCR_OPAQUE_STRING_anim_intro_dog = 0xD76,
  SCR_OPAQUE_STRING_anim_intro_sniper = 0xD77,
  SCR_OPAQUE_STRING_anim_last_frame_solo = 0xD79,
  SCR_OPAQUE_STRING_anim_length = 0xD7A,
  SCR_OPAQUE_STRING_anim_length_frames_left = 0xD7B,
  SCR_OPAQUE_STRING_anim_link_tag_model = 0xD7C,
  SCR_OPAQUE_STRING_anim_loop = 0xD7D,
  SCR_OPAQUE_STRING_anim_loop_packet = 0xD7E,
  SCR_OPAQUE_STRING_anim_loop_solo = 0xD80,
  SCR_OPAQUE_STRING_anim_minigun_hands = 0xD81,
  SCR_OPAQUE_STRING_anim_models = 0xD82,
  SCR_OPAQUE_STRING_anim_moveto = 0xD83,
  SCR_OPAQUE_STRING_anim_node = 0xD84,
  SCR_OPAQUE_STRING_anim_org = 0xD85,
  SCR_OPAQUE_STRING_anim_player_and_allies = 0xD86,
  SCR_OPAQUE_STRING_anim_player_target_enemy = 0xD87,
  SCR_OPAQUE_STRING_anim_precache = 0xD89,
  SCR_OPAQUE_STRING_anim_prop_init_threads = 0xD8A,
  SCR_OPAQUE_STRING_anim_prop_models = 0xD8B,
  SCR_OPAQUE_STRING_anim_prop_models_animtree = 0xD8C,
  SCR_OPAQUE_STRING_anim_props_animated = 0xD8E,
  SCR_OPAQUE_STRING_anim_pushplayer = 0xD8F,
  SCR_OPAQUE_STRING_anim_reach = 0xD90,
  SCR_OPAQUE_STRING_anim_reach_and_approach = 0xD91,
  SCR_OPAQUE_STRING_anim_reach_and_approach_node_solo = 0xD92,
  SCR_OPAQUE_STRING_anim_reach_and_approach_solo = 0xD93,
  SCR_OPAQUE_STRING_anim_reach_and_idle = 0xD94,
  SCR_OPAQUE_STRING_anim_reach_and_idle_solo = 0xD95,
  SCR_OPAQUE_STRING_anim_reach_and_plant = 0xD96,
  SCR_OPAQUE_STRING_anim_reach_failsafe = 0xD98,
  SCR_OPAQUE_STRING_anim_reach_idle = 0xD99,
  SCR_OPAQUE_STRING_anim_reach_play = 0xD9A,
  SCR_OPAQUE_STRING_anim_reach_solo = 0xD9B,
  SCR_OPAQUE_STRING_anim_reach_together = 0xD9D,
  SCR_OPAQUE_STRING_anim_reach_with_funcs = 0xD9E,
  SCR_OPAQUE_STRING_anim_ref = 0xD9F,
  SCR_OPAQUE_STRING_anim_removemodel = 0xDA1,
  SCR_OPAQUE_STRING_anim_right_move_strength = 0xDA2,
  SCR_OPAQUE_STRING_anim_scene = 0xDA3,
  SCR_OPAQUE_STRING_anim_self_set_time = 0xDA4,
  SCR_OPAQUE_STRING_anim_sequence = 0xDA5,
  SCR_OPAQUE_STRING_anim_set_rate = 0xDA6,
  SCR_OPAQUE_STRING_anim_set_rate_internal = 0xDA7,
  SCR_OPAQUE_STRING_anim_set_rate_single = 0xDA8,
  SCR_OPAQUE_STRING_anim_set_time = 0xDA9,
  SCR_OPAQUE_STRING_anim_single = 0xDAA,
  SCR_OPAQUE_STRING_anim_single_end_early = 0xDAB,
  SCR_OPAQUE_STRING_anim_single_failsafe = 0xDAC,
  SCR_OPAQUE_STRING_anim_single_failsafeonguy = 0xDAD,
  SCR_OPAQUE_STRING_anim_single_internal = 0xDAE,
  SCR_OPAQUE_STRING_anim_single_queue = 0xDAF,
  SCR_OPAQUE_STRING_anim_single_run = 0xDB0,
  SCR_OPAQUE_STRING_anim_single_run_solo = 0xDB1,
  SCR_OPAQUE_STRING_anim_single_solo = 0xDB2,
  SCR_OPAQUE_STRING_anim_spawn_generic_model = 0xDB4,
  SCR_OPAQUE_STRING_anim_spawn_replace_with_model = 0xDB6,
  SCR_OPAQUE_STRING_anim_spawn_tag_model = 0xDB7,
  SCR_OPAQUE_STRING_anim_spawner_teleport = 0xDB8,
  SCR_OPAQUE_STRING_anim_start_at_groundpos = 0xDB9,
  SCR_OPAQUE_STRING_anim_start_pos = 0xDBA,
  SCR_OPAQUE_STRING_anim_start_pos_solo = 0xDBB,
  SCR_OPAQUE_STRING_anim_stopanimscripted = 0xDBC,
  SCR_OPAQUE_STRING_anim_teleport = 0xDBD,
  SCR_OPAQUE_STRING_anim_teleport_solo = 0xDBE,
  SCR_OPAQUE_STRING_anim_time = 0xDBF,
  SCR_OPAQUE_STRING_anim_timing = 0xDC0,
  SCR_OPAQUE_STRING_anim_up_down_boost = 0xDC1,
  SCR_OPAQUE_STRING_anim_wait_func = 0xDC2,
  SCR_OPAQUE_STRING_anim_weight = 0xDC3,
  SCR_OPAQUE_STRING_animarray = 0xDC5,
  SCR_OPAQUE_STRING_animarrayanyexist = 0xDC6,
  SCR_OPAQUE_STRING_animarrayfuncs = 0xDC7,
  SCR_OPAQUE_STRING_animarraypickrandom = 0xDC8,
  SCR_OPAQUE_STRING_animate_after_movement = 0xDC9,
  SCR_OPAQUE_STRING_animate_allies_to_train = 0xDCA,
  SCR_OPAQUE_STRING_animate_ally_breach = 0xDCB,
  SCR_OPAQUE_STRING_animate_ambush_scene_enemies = 0xDCC,
  SCR_OPAQUE_STRING_animate_and_get_shot = 0xDCD,
  SCR_OPAQUE_STRING_animate_arms = 0xDCE,
  SCR_OPAQUE_STRING_animate_chairs = 0xDCF,
  SCR_OPAQUE_STRING_animate_combat_two_intro_debris = 0xDD0,
  SCR_OPAQUE_STRING_animate_drive_idle = 0xDD1,
  SCR_OPAQUE_STRING_animate_ent = 0xDD3,
  SCR_OPAQUE_STRING_animate_front_station_01 = 0xDD4,
  SCR_OPAQUE_STRING_animate_front_station_02 = 0xDD5,
  SCR_OPAQUE_STRING_animate_front_station_03 = 0xDD6,
  SCR_OPAQUE_STRING_animate_front_station_04 = 0xDD7,
  SCR_OPAQUE_STRING_animate_front_station_05 = 0xDD8,
  SCR_OPAQUE_STRING_animate_front_station_and_return_to_idle = 0xDD9,
  SCR_OPAQUE_STRING_animate_guys = 0xDDA,
  SCR_OPAQUE_STRING_animate_opposite_direction = 0xDDB,
  SCR_OPAQUE_STRING_animate_props_on_death = 0xDDC,
  SCR_OPAQUE_STRING_animate_til_volume = 0xDDD,
  SCR_OPAQUE_STRING_animate_turret_with_viewmodel = 0xDDE,
  SCR_OPAQUE_STRING_animate_vault_door = 0xDDF,
  SCR_OPAQUE_STRING_animate_vault_light = 0xDE0,
  SCR_OPAQUE_STRING_animate_vip_enemies = 0xDE1,
  SCR_OPAQUE_STRING_animated_doors = 0xDE2,
  SCR_OPAQUE_STRING_animated_logs = 0xDE3,
  SCR_OPAQUE_STRING_animated_model = 0xDE4,
  SCR_OPAQUE_STRING_animated_models = 0xDE5,
  SCR_OPAQUE_STRING_animated_prop = 0xDE6,
  SCR_OPAQUE_STRING_animated_prop_anims = 0xDE7,
  SCR_OPAQUE_STRING_animated_sat_part = 0xDE9,
  SCR_OPAQUE_STRING_animated_scene = 0xDEA,
  SCR_OPAQUE_STRING_animated_scene_org = 0xDEB,
  SCR_OPAQUE_STRING_animated_script_model = 0xDEC,
  SCR_OPAQUE_STRING_animated_warehouse_guys = 0xDED,
  SCR_OPAQUE_STRING_animatedduffle = 0xDEF,
  SCR_OPAQUE_STRING_animatemodel = 0xDF0,
  SCR_OPAQUE_STRING_animatemoveintoplace = 0xDF1,
  SCR_OPAQUE_STRING_animcbs = 0xDF5,
  SCR_OPAQUE_STRING_animflagnameindex = 0xDF9,
  SCR_OPAQUE_STRING_animgaz = 0xDFA,
  SCR_OPAQUE_STRING_animhasfacialoverride = 0xDFB,
  SCR_OPAQUE_STRING_animlengths = 0xDFC,
  SCR_OPAQUE_STRING_animname = 0xDFD,
  SCR_OPAQUE_STRING_animnode = 0xDFE,
  SCR_OPAQUE_STRING_animoffset = 0xDFF,
  SCR_OPAQUE_STRING_animontag = 0xE00,
  SCR_OPAQUE_STRING_animplaybackrate = 0xE03,
  SCR_OPAQUE_STRING_anims_curr = 0xE05,
  SCR_OPAQUE_STRING_animsapplied = 0xE06,
  SCR_OPAQUE_STRING_animscriptdonotetracksthread = 0xE07,
  SCR_OPAQUE_STRING_animset = 0xE09,
  SCR_OPAQUE_STRING_animsets = 0xE0A,
  SCR_OPAQUE_STRING_animsound_aliases = 0xE0B,
  SCR_OPAQUE_STRING_animsound_exists = 0xE0C,
  SCR_OPAQUE_STRING_animsound_hud_extralines = 0xE0D,
  SCR_OPAQUE_STRING_animsound_hudlimit = 0xE0E,
  SCR_OPAQUE_STRING_animsound_start_tracker = 0xE0F,
  SCR_OPAQUE_STRING_animsound_start_tracker_loop = 0xE10,
  SCR_OPAQUE_STRING_animsound_tracker = 0xE12,
  SCR_OPAQUE_STRING_animsounds = 0xE13,
  SCR_OPAQUE_STRING_animsounds_thisframe = 0xE14,
  SCR_OPAQUE_STRING_animspeeds = 0xE15,
  SCR_OPAQUE_STRING_animspot = 0xE16,
  SCR_OPAQUE_STRING_animsubstate = 0xE18,
  SCR_OPAQUE_STRING_animtree = 0xE19,
  SCR_OPAQUE_STRING_animtype_idle = 0xE1A,
  SCR_OPAQUE_STRING_animtype_idle_shift = 0xE1B,
  SCR_OPAQUE_STRING_animtype_loop = 0xE1C,
  SCR_OPAQUE_STRING_animtype_loop_run = 0xE1D,
  SCR_OPAQUE_STRING_animtype_parent = 0xE1E,
  SCR_OPAQUE_STRING_animtype_run_stop = 0xE1F,
  SCR_OPAQUE_STRING_animtype_shift_back = 0xE20,
  SCR_OPAQUE_STRING_animtype_stop = 0xE22,
  SCR_OPAQUE_STRING_anmimname = 0xE23,
  SCR_OPAQUE_STRING_announce_past_those_doors = 0xE24,
  SCR_OPAQUE_STRING_annoyance_tracker = 0xE25,
  SCR_OPAQUE_STRING_ant_races = 0xE26,
  SCR_OPAQUE_STRING_antenna = 0xE27,
  SCR_OPAQUE_STRING_antenna_kill = 0xE28,
  SCR_OPAQUE_STRING_antenna_rumble = 0xE29,
  SCR_OPAQUE_STRING_anti_air_objectiv_trigger = 0xE2A,
  SCR_OPAQUE_STRING_antithreat = 0xE2B,
  SCR_OPAQUE_STRING_any_player_near_sentry = 0xE2C,
  SCR_OPAQUE_STRING_any_player_nearby = 0xE2D,
  SCR_OPAQUE_STRING_any_players_istouching = 0xE2E,
  SCR_OPAQUE_STRING_anyone_touching_blocker = 0xE2F,
  SCR_OPAQUE_STRING_anyplayersinkillcam = 0xE30,
  SCR_OPAQUE_STRING_anythingtouchingtrigger = 0xE31,
  SCR_OPAQUE_STRING_ao = 0xE32,
  SCR_OPAQUE_STRING_aoeradius = 0xE33,
  SCR_OPAQUE_STRING_aoexponent = 0xE34,
  SCR_OPAQUE_STRING_aogain = 0xE35,
  SCR_OPAQUE_STRING_aomaxdist = 0xE36,
  SCR_OPAQUE_STRING_aoscalemin = 0xE37,
  SCR_OPAQUE_STRING_apache = 0xE39,
  SCR_OPAQUE_STRING_apache1 = 0xE3A,
  SCR_OPAQUE_STRING_apache2 = 0xE3B,
  SCR_OPAQUE_STRING_apache_ally_path_attack_filter_targets = 0xE3C,
  SCR_OPAQUE_STRING_apache_ally_path_attack_func = 0xE3D,
  SCR_OPAQUE_STRING_apache_ally_path_attack_internal = 0xE3E,
  SCR_OPAQUE_STRING_apache_autosave_check = 0xE3F,
  SCR_OPAQUE_STRING_apache_chase_allies_apache = 0xE40,
  SCR_OPAQUE_STRING_apache_chase_ally_apache_think = 0xE41,
  SCR_OPAQUE_STRING_apache_chase_ally_blackhawk_think = 0xE42,
  SCR_OPAQUE_STRING_apache_chase_enemies = 0xE43,
  SCR_OPAQUE_STRING_apache_chase_enemies_turret_think_delay = 0xE44,
  SCR_OPAQUE_STRING_apache_chatter = 0xE45,
  SCR_OPAQUE_STRING_apache_chatter_func = 0xE46,
  SCR_OPAQUE_STRING_apache_chatter_last = 0xE47,
  SCR_OPAQUE_STRING_apache_chatter_queue = 0xE48,
  SCR_OPAQUE_STRING_apache_chopper_enemies = 0xE49,
  SCR_OPAQUE_STRING_apache_chopper_hind_on_death = 0xE4A,
  SCR_OPAQUE_STRING_apache_chopper_hind_spawn = 0xE4B,
  SCR_OPAQUE_STRING_apache_difficulty = 0xE4D,
  SCR_OPAQUE_STRING_apache_dmg_recent = 0xE4E,
  SCR_OPAQUE_STRING_apache_dmg_time = 0xE4F,
  SCR_OPAQUE_STRING_apache_escort_encounter_final_wave_on_spawn = 0xE50,
  SCR_OPAQUE_STRING_apache_factory_ai_roof_on_spawn = 0xE51,
  SCR_OPAQUE_STRING_apache_factory_allies_apache_think = 0xE52,
  SCR_OPAQUE_STRING_apache_factory_ally_blackhawk_think = 0xE53,
  SCR_OPAQUE_STRING_apache_factory_enemies = 0xE54,
  SCR_OPAQUE_STRING_apache_factory_enemy_counts = 0xE55,
  SCR_OPAQUE_STRING_apache_factory_enemy_on_death = 0xE56,
  SCR_OPAQUE_STRING_apache_factory_hind_parked_on_death = 0xE57,
  SCR_OPAQUE_STRING_apache_factory_hind_parked_on_spawn = 0xE58,
  SCR_OPAQUE_STRING_apache_factory_objective = 0xE59,
  SCR_OPAQUE_STRING_apache_health = 0xE5B,
  SCR_OPAQUE_STRING_apache_health_at_max = 0xE5D,
  SCR_OPAQUE_STRING_apache_health_get = 0xE5E,
  SCR_OPAQUE_STRING_apache_health_init = 0xE5F,
  SCR_OPAQUE_STRING_apache_health_max = 0xE60,
  SCR_OPAQUE_STRING_apache_health_max_get = 0xE61,
  SCR_OPAQUE_STRING_apache_health_max_set = 0xE62,
  SCR_OPAQUE_STRING_apache_health_min = 0xE63,
  SCR_OPAQUE_STRING_apache_health_pct_get = 0xE64,
  SCR_OPAQUE_STRING_apache_health_pct_min_clear = 0xE65,
  SCR_OPAQUE_STRING_apache_health_pct_min_set = 0xE66,
  SCR_OPAQUE_STRING_apache_health_pct_set = 0xE67,
  SCR_OPAQUE_STRING_apache_health_set = 0xE68,
  SCR_OPAQUE_STRING_apache_health_state_next = 0xE69,
  SCR_OPAQUE_STRING_apache_health_state_think = 0xE6A,
  SCR_OPAQUE_STRING_apache_hints_break_flares = 0xE6C,
  SCR_OPAQUE_STRING_apache_hints_break_mg = 0xE6D,
  SCR_OPAQUE_STRING_apache_hints_break_missile_lockon = 0xE6E,
  SCR_OPAQUE_STRING_apache_hints_break_missile_straight = 0xE6F,
  SCR_OPAQUE_STRING_apache_hints_chase = 0xE70,
  SCR_OPAQUE_STRING_apache_hints_display_hint_timeout = 0xE72,
  SCR_OPAQUE_STRING_apache_hints_factory = 0xE73,
  SCR_OPAQUE_STRING_apache_hints_island = 0xE74,
  SCR_OPAQUE_STRING_apache_hints_move = 0xE75,
  SCR_OPAQUE_STRING_apache_hints_tutorial = 0xE78,
  SCR_OPAQUE_STRING_apache_missile_water_z = 0xE79,
  SCR_OPAQUE_STRING_apache_mission_difficulty = 0xE7B,
  SCR_OPAQUE_STRING_apache_mission_heli_ai_collision = 0xE7C,
  SCR_OPAQUE_STRING_apache_mission_impact_water_missile_think = 0xE7D,
  SCR_OPAQUE_STRING_apache_mission_impact_water_missiles = 0xE7E,
  SCR_OPAQUE_STRING_apache_mission_impact_water_think = 0xE7F,
  SCR_OPAQUE_STRING_apache_mission_vo_antiair = 0xE80,
  SCR_OPAQUE_STRING_apache_mission_vo_chopper = 0xE81,
  SCR_OPAQUE_STRING_apache_mission_vo_factory = 0xE82,
  SCR_OPAQUE_STRING_apache_mission_vo_finale = 0xE84,
  SCR_OPAQUE_STRING_apache_mission_vo_player_crashing = 0xE85,
  SCR_OPAQUE_STRING_apache_owner_notify_on_input_camera = 0xE89,
  SCR_OPAQUE_STRING_apache_owner_notify_on_input_move = 0xE8A,
  SCR_OPAQUE_STRING_apache_player_adjust = 0xE8B,
  SCR_OPAQUE_STRING_apache_player_dead = 0xE8C,
  SCR_OPAQUE_STRING_apache_player_difficulty = 0xE8D,
  SCR_OPAQUE_STRING_apache_precache = 0xE8E,
  SCR_OPAQUE_STRING_apache_savecheck = 0xE8F,
  SCR_OPAQUE_STRING_apache_sun_settings = 0xE90,
  SCR_OPAQUE_STRING_apache_target_manager = 0xE92,
  SCR_OPAQUE_STRING_apache_tutorial_fly_allies = 0xE93,
  SCR_OPAQUE_STRING_apache_tutorial_fly_allies_govern_speed = 0xE94,
  SCR_OPAQUE_STRING_apache_tutorial_fly_allies_govern_speed_stop = 0xE95,
  SCR_OPAQUE_STRING_apache_tutorial_fly_player_pitch_think = 0xE97,
  SCR_OPAQUE_STRING_apache_tutorial_fly_reactive_foliage = 0xE98,
  SCR_OPAQUE_STRING_apextraversaldeathvector = 0xE99,
  SCR_OPAQUE_STRING_apply_difficulty_frac_with_func = 0xE9B,
  SCR_OPAQUE_STRING_apply_end_fog = 0xE9D,
  SCR_OPAQUE_STRING_apply_extra_last_stand = 0xE9E,
  SCR_OPAQUE_STRING_apply_fog = 0xE9F,
  SCR_OPAQUE_STRING_apply_friendly_fire_damage_modifier = 0xEA0,
  SCR_OPAQUE_STRING_apply_synch_attack_damage = 0xEA3,
  SCR_OPAQUE_STRING_apply_truckjunk = 0xEA4,
  SCR_OPAQUE_STRING_apply_weapons_status = 0xEA5,
  SCR_OPAQUE_STRING_apply_whizby = 0xEA6,
  SCR_OPAQUE_STRING_applyaliensnare = 0xEA7,
  SCR_OPAQUE_STRING_applyaliensnareinternal = 0xEA8,
  SCR_OPAQUE_STRING_applybombcarrierclass = 0xEA9,
  SCR_OPAQUE_STRING_applyflash = 0xEAB,
  SCR_OPAQUE_STRING_applyformat = 0xEAC,
  SCR_OPAQUE_STRING_applyformattype = 0xEAD,
  SCR_OPAQUE_STRING_applygaseffect = 0xEAE,
  SCR_OPAQUE_STRING_applyglobalempeffects = 0xEAF,
  SCR_OPAQUE_STRING_applyoutline = 0xEB0,
  SCR_OPAQUE_STRING_applyperplayerempeffects = 0xEB1,
  SCR_OPAQUE_STRING_applyperplayerempeffects_ondetonate = 0xEB2,
  SCR_OPAQUE_STRING_applystunresistence = 0xEB3,
  SCR_OPAQUE_STRING_approach_anims = 0xEB4,
  SCR_OPAQUE_STRING_approach_enemy = 0xEB5,
  SCR_OPAQUE_STRING_approach_types = 0xEB6,
  SCR_OPAQUE_STRING_approachnumber = 0xEB8,
  SCR_OPAQUE_STRING_approachwaittillclose = 0xEBB,
  SCR_OPAQUE_STRING_approx_dist_from_edge = 0xEBC,
  SCR_OPAQUE_STRING_arc_cached = 0xEBD,
  SCR_OPAQUE_STRING_arcademode_hud_timer = 0xEBF,
  SCR_OPAQUE_STRING_arcademode_stop_timer = 0xEC0,
  SCR_OPAQUE_STRING_arcademode_stoptime = 0xEC1,
  SCR_OPAQUE_STRING_archetype_exists = 0xEC2,
  SCR_OPAQUE_STRING_archetypechanged = 0xEC3,
  SCR_OPAQUE_STRING_archetypeexists = 0xEC4,
  SCR_OPAQUE_STRING_archetypes = 0xEC5,
  SCR_OPAQUE_STRING_archive = 0xEC6,
  SCR_OPAQUE_STRING_are_all_players_using_nuke = 0xEC7,
  SCR_OPAQUE_STRING_are_opposite_sign = 0xEC8,
  SCR_OPAQUE_STRING_area1_ents = 0xEC9,
  SCR_OPAQUE_STRING_area_damage_and_impulse = 0xECA,
  SCR_OPAQUE_STRING_areaparallelpipid = 0xECB,
  SCR_OPAQUE_STRING_areatriange = 0xECD,
  SCR_OPAQUE_STRING_aredifferent = 0xECE,
  SCR_OPAQUE_STRING_arm_mine = 0xECF,
  SCR_OPAQUE_STRING_arm_player = 0xED0,
  SCR_OPAQUE_STRING_armingdelay = 0xED1,
  SCR_OPAQUE_STRING_armormitigation = 0xED3,
  SCR_OPAQUE_STRING_armorpiercingmod = 0xED4,
  SCR_OPAQUE_STRING_armorvestmod = 0xED5,
  SCR_OPAQUE_STRING_arms_and_legs = 0xED6,
  SCR_OPAQUE_STRING_armtime = 0xED7,
  SCR_OPAQUE_STRING_array_2dadd = 0xED9,
  SCR_OPAQUE_STRING_array_add = 0xEDA,
  SCR_OPAQUE_STRING_array_call = 0xEDB,
  SCR_OPAQUE_STRING_array_combine = 0xEDC,
  SCR_OPAQUE_STRING_array_combine_keys = 0xEDD,
  SCR_OPAQUE_STRING_array_combine_non_integer_indices = 0xEDE,
  SCR_OPAQUE_STRING_array_compare = 0xEE0,
  SCR_OPAQUE_STRING_array_contains = 0xEE1,
  SCR_OPAQUE_STRING_array_contains_script_linkto = 0xEE3,
  SCR_OPAQUE_STRING_array_delete = 0xEE4,
  SCR_OPAQUE_STRING_array_delete_evenly = 0xEE5,
  SCR_OPAQUE_STRING_array_exclude = 0xEE6,
  SCR_OPAQUE_STRING_array_find = 0xEE7,
  SCR_OPAQUE_STRING_array_index_by_classname = 0xEE8,
  SCR_OPAQUE_STRING_array_index_by_parameters = 0xEE9,
  SCR_OPAQUE_STRING_array_insert = 0xEEB,
  SCR_OPAQUE_STRING_array_is_defined = 0xEEC,
  SCR_OPAQUE_STRING_array_is_greater_than = 0xEED,
  SCR_OPAQUE_STRING_array_keep_key_values = 0xEEE,
  SCR_OPAQUE_STRING_array_keep_values = 0xEEF,
  SCR_OPAQUE_STRING_array_kill = 0xEF0,
  SCR_OPAQUE_STRING_array_levelcall = 0xEF1,
  SCR_OPAQUE_STRING_array_levelthread = 0xEF2,
  SCR_OPAQUE_STRING_array_levelthread_safe = 0xEF3,
  SCR_OPAQUE_STRING_array_merge_links = 0xEF5,
  SCR_OPAQUE_STRING_array_notify = 0xEF6,
  SCR_OPAQUE_STRING_array_of_triggers1 = 0xEF7,
  SCR_OPAQUE_STRING_array_of_triggers2 = 0xEF8,
  SCR_OPAQUE_STRING_array_of_triggers3 = 0xEF9,
  SCR_OPAQUE_STRING_array_randomize = 0xEFA,
  SCR_OPAQUE_STRING_array_remove = 0xEFB,
  SCR_OPAQUE_STRING_array_remove_array = 0xEFC,
  SCR_OPAQUE_STRING_array_remove_dupes = 0xEFD,
  SCR_OPAQUE_STRING_array_remove_duplicates = 0xEFE,
  SCR_OPAQUE_STRING_array_remove_nokeys = 0xF00,
  SCR_OPAQUE_STRING_array_remove_perk = 0xF01,
  SCR_OPAQUE_STRING_array_remove_when_dead = 0xF03,
  SCR_OPAQUE_STRING_array_removedead = 0xF04,
  SCR_OPAQUE_STRING_array_removedead_keepkeys = 0xF05,
  SCR_OPAQUE_STRING_array_removedead_zodiac = 0xF07,
  SCR_OPAQUE_STRING_array_removeinvalidmissiles = 0xF08,
  SCR_OPAQUE_STRING_array_removeundefined = 0xF09,
  SCR_OPAQUE_STRING_array_reverse = 0xF0A,
  SCR_OPAQUE_STRING_array_setgoalvolume = 0xF0B,
  SCR_OPAQUE_STRING_array_shift = 0xF0C,
  SCR_OPAQUE_STRING_array_sort_by_handler = 0xF0D,
  SCR_OPAQUE_STRING_array_sort_by_handler_parameter = 0xF0E,
  SCR_OPAQUE_STRING_array_sortbysorter = 0xF11,
  SCR_OPAQUE_STRING_array_spawn = 0xF12,
  SCR_OPAQUE_STRING_array_spawn_allow_fail = 0xF13,
  SCR_OPAQUE_STRING_array_spawn_function = 0xF14,
  SCR_OPAQUE_STRING_array_spawn_function_noteworthy = 0xF15,
  SCR_OPAQUE_STRING_array_spawn_function_targetname = 0xF16,
  SCR_OPAQUE_STRING_array_spawn_targetname = 0xF18,
  SCR_OPAQUE_STRING_array_spawn_targetname_allow_fail = 0xF19,
  SCR_OPAQUE_STRING_array_spawn_targetname_allow_fail_setthreat_insideaware = 0xF1A,
  SCR_OPAQUE_STRING_array_thread5 = 0xF1D,
  SCR_OPAQUE_STRING_array_thread_safe = 0xF1F,
  SCR_OPAQUE_STRING_array_thread_targetname = 0xF20,
  SCR_OPAQUE_STRING_array_wait = 0xF21,
  SCR_OPAQUE_STRING_array_waitlogic2 = 0xF23,
  SCR_OPAQUE_STRING_arrayinsertion = 0xF24,
  SCR_OPAQUE_STRING_arrays_of_colorcoded_ai = 0xF25,
  SCR_OPAQUE_STRING_arrays_of_colorcoded_nodes = 0xF26,
  SCR_OPAQUE_STRING_arrays_of_colorcoded_spawners = 0xF27,
  SCR_OPAQUE_STRING_arrays_of_colorcoded_volumes = 0xF28,
  SCR_OPAQUE_STRING_arrays_of_colorforced_ai = 0xF29,
  SCR_OPAQUE_STRING_arrivalanim = 0xF2A,
  SCR_OPAQUE_STRING_arrivalendstance = 0xF2B,
  SCR_OPAQUE_STRING_arrivalnodetype = 0xF2C,
  SCR_OPAQUE_STRING_arrivalpathgoalpos = 0xF2D,
  SCR_OPAQUE_STRING_arrivalstance = 0xF2E,
  SCR_OPAQUE_STRING_arrivalstartdist = 0xF2F,
  SCR_OPAQUE_STRING_arrivaltype = 0xF30,
  SCR_OPAQUE_STRING_arrive = 0xF31,
  SCR_OPAQUE_STRING_arrived = 0xF32,
  SCR_OPAQUE_STRING_artemis_fire = 0xF33,
  SCR_OPAQUE_STRING_artemis_fire_think = 0xF34,
  SCR_OPAQUE_STRING_artemis_think = 0xF35,
  SCR_OPAQUE_STRING_artifact_pulse = 0xF37,
  SCR_OPAQUE_STRING_artifacts = 0xF38,
  SCR_OPAQUE_STRING_artifacts_fade = 0xF39,
  SCR_OPAQUE_STRING_artillery_balcony_stumble = 0xF3A,
  SCR_OPAQUE_STRING_artillery_balcony_stumble_skip = 0xF3B,
  SCR_OPAQUE_STRING_artillery_balcony_stumblers_setup = 0xF3C,
  SCR_OPAQUE_STRING_artillery_disable_player_mg = 0xF3D,
  SCR_OPAQUE_STRING_artillery_disableweapons = 0xF3E,
  SCR_OPAQUE_STRING_artillery_hesco_tower_drones = 0xF40,
  SCR_OPAQUE_STRING_artillery_hit_drones = 0xF41,
  SCR_OPAQUE_STRING_artillery_player_slide = 0xF43,
  SCR_OPAQUE_STRING_artillery_smoke_grenade = 0xF45,
  SCR_OPAQUE_STRING_artilleryshellshock = 0xF47,
  SCR_OPAQUE_STRING_ascend_aim_lerp_anims = 0xF48,
  SCR_OPAQUE_STRING_ascend_aim_logic = 0xF49,
  SCR_OPAQUE_STRING_ascend_aim_logic_cleanup = 0xF4A,
  SCR_OPAQUE_STRING_ascend_anim_node = 0xF4B,
  SCR_OPAQUE_STRING_ascend_anims_rate = 0xF4C,
  SCR_OPAQUE_STRING_ascend_ascend_state = 0xF4D,
  SCR_OPAQUE_STRING_ascend_ascend_state_transition = 0xF4E,
  SCR_OPAQUE_STRING_ascend_ascender = 0xF4F,
  SCR_OPAQUE_STRING_ascend_current_rate = 0xF50,
  SCR_OPAQUE_STRING_ascend_dialog = 0xF51,
  SCR_OPAQUE_STRING_ascend_hook = 0xF53,
  SCR_OPAQUE_STRING_ascend_hook_ally2 = 0xF55,
  SCR_OPAQUE_STRING_ascend_hook_ally3 = 0xF56,
  SCR_OPAQUE_STRING_ascend_hook_ally4 = 0xF57,
  SCR_OPAQUE_STRING_ascend_idle_state = 0xF58,
  SCR_OPAQUE_STRING_ascend_idle_state_transition = 0xF59,
  SCR_OPAQUE_STRING_ascend_ignoreme_loop = 0xF5A,
  SCR_OPAQUE_STRING_ascend_launch_pos = 0xF5B,
  SCR_OPAQUE_STRING_ascend_launcher = 0xF5C,
  SCR_OPAQUE_STRING_ascend_mechanics = 0xF5F,
  SCR_OPAQUE_STRING_ascend_pendulum = 0xF60,
  SCR_OPAQUE_STRING_ascend_rope1 = 0xF61,
  SCR_OPAQUE_STRING_ascend_rope2 = 0xF62,
  SCR_OPAQUE_STRING_ascend_rope3 = 0xF63,
  SCR_OPAQUE_STRING_ascend_snow_fx = 0xF64,
  SCR_OPAQUE_STRING_ascend_state = 0xF65,
  SCR_OPAQUE_STRING_ascend_state_transition = 0xF66,
  SCR_OPAQUE_STRING_ascend_stop_state = 0xF67,
  SCR_OPAQUE_STRING_ascend_stop_state_transition = 0xF68,
  SCR_OPAQUE_STRING_ascend_target_rate = 0xF69,
  SCR_OPAQUE_STRING_ascend_vision_sets = 0xF6A,
  SCR_OPAQUE_STRING_ascend_waiting = 0xF6B,
  SCR_OPAQUE_STRING_ascend_wind_01 = 0xF6C,
  SCR_OPAQUE_STRING_ascend_wind_02 = 0xF6D,
  SCR_OPAQUE_STRING_ascend_wind_03 = 0xF6E,
  SCR_OPAQUE_STRING_ascend_wind_04 = 0xF6F,
  SCR_OPAQUE_STRING_ascender = 0xF70,
  SCR_OPAQUE_STRING_ash_fall_thread = 0xF72,
  SCR_OPAQUE_STRING_ash_init = 0xF73,
  SCR_OPAQUE_STRING_asign_blackhawk_riders = 0xF74,
  SCR_OPAQUE_STRING_assemble_plane_wing = 0xF76,
  SCR_OPAQUE_STRING_assembly_line = 0xF77,
  SCR_OPAQUE_STRING_assembly_line_animate = 0xF78,
  SCR_OPAQUE_STRING_assembly_line_notetrack_sound = 0xF79,
  SCR_OPAQUE_STRING_assembly_line_piece = 0xF7B,
  SCR_OPAQUE_STRING_assembly_line_precache = 0xF7C,
  SCR_OPAQUE_STRING_assembly_line_tank_damage_watch = 0xF7D,
  SCR_OPAQUE_STRING_assembly_line_tank_notetracks = 0xF7E,
  SCR_OPAQUE_STRING_assembly_line_tank_part_damage_watch = 0xF7F,
  SCR_OPAQUE_STRING_assembly_line_tank_part_damage_watch_end = 0xF80,
  SCR_OPAQUE_STRING_assembly_line_tank_part_explode = 0xF81,
  SCR_OPAQUE_STRING_assembly_line_tank_part_extinguish = 0xF82,
  SCR_OPAQUE_STRING_assembly_line_tank_part_visible = 0xF83,
  SCR_OPAQUE_STRING_assert_existance_of_anim = 0xF84,
  SCR_OPAQUE_STRING_assert_if_anim_not_defined = 0xF85,
  SCR_OPAQUE_STRING_assert_if_identical_origins = 0xF86,
  SCR_OPAQUE_STRING_assetname = 0xF87,
  SCR_OPAQUE_STRING_assign_alien_attributes = 0xF88,
  SCR_OPAQUE_STRING_assign_alpha = 0xF89,
  SCR_OPAQUE_STRING_assign_animals_tree = 0xF8A,
  SCR_OPAQUE_STRING_assign_animtree = 0xF8B,
  SCR_OPAQUE_STRING_assign_archetypes = 0xF8C,
  SCR_OPAQUE_STRING_assign_bravo = 0xF8D,
  SCR_OPAQUE_STRING_assign_chatter = 0xF8E,
  SCR_OPAQUE_STRING_assign_friendly_heros = 0xF90,
  SCR_OPAQUE_STRING_assign_fx_to_trigger = 0xF91,
  SCR_OPAQUE_STRING_assign_generic_human_tree = 0xF92,
  SCR_OPAQUE_STRING_assign_model = 0xF93,
  SCR_OPAQUE_STRING_assign_npcid = 0xF94,
  SCR_OPAQUE_STRING_assign_script_breachgroup_to_ents = 0xF95,
  SCR_OPAQUE_STRING_assign_unique_id = 0xF96,
  SCR_OPAQUE_STRING_assignaward = 0xF97,
  SCR_OPAQUE_STRING_assignawards = 0xF98,
  SCR_OPAQUE_STRING_assignteamspawns = 0xF99,
  SCR_OPAQUE_STRING_assistedsuicide = 0xF9A,
  SCR_OPAQUE_STRING_assumed_match_length = 0xF9C,
  SCR_OPAQUE_STRING_at_edge = 0xF9D,
  SCR_OPAQUE_STRING_at_edge_sign = 0xF9E,
  SCR_OPAQUE_STRING_at_end_anim_freeze_frame = 0xF9F,
  SCR_OPAQUE_STRING_at_goal_node = 0xFA0,
  SCR_OPAQUE_STRING_at_least_goal = 0xFA1,
  SCR_OPAQUE_STRING_atbrinkofdeath = 0xFA2,
  SCR_OPAQUE_STRING_atconcealmentnode = 0xFA3,
  SCR_OPAQUE_STRING_atrium_checkpoint = 0xFA4,
  SCR_OPAQUE_STRING_atrium_done = 0xFA5,
  SCR_OPAQUE_STRING_atrium_final_stand = 0xFA6,
  SCR_OPAQUE_STRING_atrium_player_outside = 0xFA8,
  SCR_OPAQUE_STRING_atrium_wave2 = 0xFA9,
  SCR_OPAQUE_STRING_atrium_wave3 = 0xFAA,
  SCR_OPAQUE_STRING_atrium_wave4 = 0xFAB,
  SCR_OPAQUE_STRING_attach_audio_points_to_player = 0xFAC,
  SCR_OPAQUE_STRING_attach_cig = 0xFAD,
  SCR_OPAQUE_STRING_attach_cig_self = 0xFAE,
  SCR_OPAQUE_STRING_attach_deck_gun = 0xFB0,
  SCR_OPAQUE_STRING_attach_dust_to_mover = 0xFB1,
  SCR_OPAQUE_STRING_attach_flashlight = 0xFB2,
  SCR_OPAQUE_STRING_attach_fx_anim_model = 0xFB3,
  SCR_OPAQUE_STRING_attach_fx_anim_model_mall_debris = 0xFB5,
  SCR_OPAQUE_STRING_attach_fx_anim_model_street_flood = 0xFB6,
  SCR_OPAQUE_STRING_attach_in_volume = 0xFB7,
  SCR_OPAQUE_STRING_attach_model_override = 0xFB8,
  SCR_OPAQUE_STRING_attach_phone = 0xFBA,
  SCR_OPAQUE_STRING_attach_pistol_right = 0xFBC,
  SCR_OPAQUE_STRING_attached_actor = 0xFBE,
  SCR_OPAQUE_STRING_attached_item = 0xFBF,
  SCR_OPAQUE_STRING_attachedguys = 0xFC0,
  SCR_OPAQUE_STRING_attachedmodels = 0xFC1,
  SCR_OPAQUE_STRING_attachedpath = 0xFC2,
  SCR_OPAQUE_STRING_attachedusemodel = 0xFC3,
  SCR_OPAQUE_STRING_attachgrenademodel = 0xFC4,
  SCR_OPAQUE_STRING_attachhat = 0xFC5,
  SCR_OPAQUE_STRING_attachhead = 0xFC6,
  SCR_OPAQUE_STRING_attachlid = 0xFC7,
  SCR_OPAQUE_STRING_attachmentcheck = 0xFC9,
  SCR_OPAQUE_STRING_attachmentgroup = 0xFCA,
  SCR_OPAQUE_STRING_attachmentmap_attachtoperk = 0xFCB,
  SCR_OPAQUE_STRING_attachmentmap_basetounique = 0xFCC,
  SCR_OPAQUE_STRING_attachmentmap_tobase = 0xFCD,
  SCR_OPAQUE_STRING_attachmentmap_tounique = 0xFCE,
  SCR_OPAQUE_STRING_attachmentmap_uniquetobase = 0xFCF,
  SCR_OPAQUE_STRING_attachments = 0xFD1,
  SCR_OPAQUE_STRING_attachmentscompatible = 0xFD2,
  SCR_OPAQUE_STRING_attachmissiles = 0xFD3,
  SCR_OPAQUE_STRING_attachplayer = 0xFD4,
  SCR_OPAQUE_STRING_attachplayertochopper = 0xFD5,
  SCR_OPAQUE_STRING_attachprops = 0xFD6,
  SCR_OPAQUE_STRING_attachturret = 0xFD8,
  SCR_OPAQUE_STRING_attack_chopper_monitoruse = 0xFDA,
  SCR_OPAQUE_STRING_attack_chopper_pot = 0xFDB,
  SCR_OPAQUE_STRING_attack_chopper_reward_pool = 0xFDC,
  SCR_OPAQUE_STRING_attack_damage_trigger = 0xFDD,
  SCR_OPAQUE_STRING_attack_dir = 0xFDE,
  SCR_OPAQUE_STRING_attack_heli_cleanup = 0xFE0,
  SCR_OPAQUE_STRING_attack_heli_fx = 0xFE1,
  SCR_OPAQUE_STRING_attack_heli_safe_volumes = 0xFE2,
  SCR_OPAQUE_STRING_attack_if_provoked = 0xFE3,
  SCR_OPAQUE_STRING_attack_indicator_off = 0xFE4,
  SCR_OPAQUE_STRING_attack_indicator_on = 0xFE5,
  SCR_OPAQUE_STRING_attack_missile_set_up_and_notify = 0xFE6,
  SCR_OPAQUE_STRING_attack_origin_condition_threadd = 0xFE8,
  SCR_OPAQUE_STRING_attack_player_after_death = 0xFE9,
  SCR_OPAQUE_STRING_attack_pos = 0xFEA,
  SCR_OPAQUE_STRING_attack_sequence_num = 0xFEB,
  SCR_OPAQUE_STRING_attack_sound_setup = 0xFEC,
  SCR_OPAQUE_STRING_attack_targets = 0xFED,
  SCR_OPAQUE_STRING_attack_times = 0xFEE,
  SCR_OPAQUE_STRING_attackable = 0xFEF,
  SCR_OPAQUE_STRING_attackable_ent = 0xFF0,
  SCR_OPAQUE_STRING_attackback = 0xFF2,
  SCR_OPAQUE_STRING_attacked = 0xFF3,
  SCR_OPAQUE_STRING_attackenemyaircraft = 0xFF5,
  SCR_OPAQUE_STRING_attacker = 0xFF6,
  SCR_OPAQUE_STRING_attacker_damage = 0xFF7,
  SCR_OPAQUE_STRING_attacker_isonmyteam = 0xFF8,
  SCR_OPAQUE_STRING_attackercandamageitem = 0xFFA,
  SCR_OPAQUE_STRING_attackerdata = 0xFFB,
  SCR_OPAQUE_STRING_attackerent = 0xFFC,
  SCR_OPAQUE_STRING_attackerinlaststand = 0xFFD,
  SCR_OPAQUE_STRING_attackerinremotekillstreak = 0xFFE,
  SCR_OPAQUE_STRING_attackerishittingteam = 0xFFF,
  SCR_OPAQUE_STRING_attackernum = 0x1000,
  SCR_OPAQUE_STRING_attackerposition = 0x1002,
  SCR_OPAQUE_STRING_attackerride = 0x1003,
  SCR_OPAQUE_STRING_attackers = 0x1004,
  SCR_OPAQUE_STRING_attackerstance = 0x1005,
  SCR_OPAQUE_STRING_attackertable = 0x1006,
  SCR_OPAQUE_STRING_attackheightpos = 0x1008,
  SCR_OPAQUE_STRING_attackheliexcluders = 0x100A,
  SCR_OPAQUE_STRING_attackhelifov = 0x100B,
  SCR_OPAQUE_STRING_attackheligraceperiod = 0x100C,
  SCR_OPAQUE_STRING_attackhelikillsai = 0x100D,
  SCR_OPAQUE_STRING_attackhelimemory = 0x100E,
  SCR_OPAQUE_STRING_attackhelimovetime = 0x100F,
  SCR_OPAQUE_STRING_attackheliplayerbreak = 0x1010,
  SCR_OPAQUE_STRING_attackhelirange = 0x1011,
  SCR_OPAQUE_STRING_attackhelitargetreaquire = 0x1012,
  SCR_OPAQUE_STRING_attackhelitimeout = 0x1013,
  SCR_OPAQUE_STRING_attacking_player = 0x1014,
  SCR_OPAQUE_STRING_attackmisstracktargetthread = 0x1017,
  SCR_OPAQUE_STRING_attackmovetime = 0x1018,
  SCR_OPAQUE_STRING_attacknothingtodo = 0x1019,
  SCR_OPAQUE_STRING_attackoffset = 0x101A,
  SCR_OPAQUE_STRING_attackradiussq = 0x101B,
  SCR_OPAQUE_STRING_attacks = 0x101C,
  SCR_OPAQUE_STRING_attackstate = 0x101D,
  SCR_OPAQUE_STRING_attacksuppressableenemy = 0x101E,
  SCR_OPAQUE_STRING_attackteleportthread = 0x101F,
  SCR_OPAQUE_STRING_attackzheight = 0x1022,
  SCR_OPAQUE_STRING_attempt_bad_path_melee = 0x1023,
  SCR_OPAQUE_STRING_attempt_bad_path_move_nearby_node = 0x1024,
  SCR_OPAQUE_STRING_attempt_badpath_jump = 0x1025,
  SCR_OPAQUE_STRING_attempt_badpath_move_to_node = 0x1026,
  SCR_OPAQUE_STRING_attract_guys_to_dog = 0x1029,
  SCR_OPAQUE_STRING_attract_range = 0x102A,
  SCR_OPAQUE_STRING_attract_strength = 0x102B,
  SCR_OPAQUE_STRING_attractor = 0x102C,
  SCR_OPAQUE_STRING_attractor2 = 0x102D,
  SCR_OPAQUE_STRING_attractor_flare = 0x102E,
  SCR_OPAQUE_STRING_attributes = 0x102F,
  SCR_OPAQUE_STRING_atv_death_launchslide = 0x1031,
  SCR_OPAQUE_STRING_atv_decide_shoot = 0x1032,
  SCR_OPAQUE_STRING_atv_decide_shoot_internal = 0x1033,
  SCR_OPAQUE_STRING_atv_do_event = 0x1034,
  SCR_OPAQUE_STRING_atv_get_death_anim = 0x1035,
  SCR_OPAQUE_STRING_atv_getoff = 0x1036,
  SCR_OPAQUE_STRING_atv_geton = 0x1037,
  SCR_OPAQUE_STRING_atv_handle_events = 0x1038,
  SCR_OPAQUE_STRING_atv_loop_driver = 0x1039,
  SCR_OPAQUE_STRING_atv_loop_driver_shooting = 0x103A,
  SCR_OPAQUE_STRING_atv_normal_death = 0x103B,
  SCR_OPAQUE_STRING_atv_reload = 0x103C,
  SCR_OPAQUE_STRING_atv_reload_internal = 0x103D,
  SCR_OPAQUE_STRING_atv_setanim_common = 0x103E,
  SCR_OPAQUE_STRING_atv_start_shooting = 0x1041,
  SCR_OPAQUE_STRING_atv_stop_shooting = 0x1042,
  SCR_OPAQUE_STRING_atv_waitfor_end = 0x1044,
  SCR_OPAQUE_STRING_atv_waitfor_start_aim = 0x1045,
  SCR_OPAQUE_STRING_atv_waitfor_start_lean = 0x1046,
  SCR_OPAQUE_STRING_aud_30mm_tail = 0x1048,
  SCR_OPAQUE_STRING_aud_add_progress_map = 0x1049,
  SCR_OPAQUE_STRING_aud_ajax_chair = 0x104A,
  SCR_OPAQUE_STRING_aud_ajax_flare = 0x104B,
  SCR_OPAQUE_STRING_aud_alarm = 0x104C,
  SCR_OPAQUE_STRING_aud_ally_gear_rustle = 0x104D,
  SCR_OPAQUE_STRING_aud_ally_gear_rustle_2 = 0x104E,
  SCR_OPAQUE_STRING_aud_aux_explosions = 0x104F,
  SCR_OPAQUE_STRING_aud_bar = 0x1050,
  SCR_OPAQUE_STRING_aud_birds = 0x1052,
  SCR_OPAQUE_STRING_aud_blow_vehicle = 0x1053,
  SCR_OPAQUE_STRING_aud_blow_vehicle_low = 0x1054,
  SCR_OPAQUE_STRING_aud_bullet_count = 0x1056,
  SCR_OPAQUE_STRING_aud_bumpy_ride = 0x1057,
  SCR_OPAQUE_STRING_aud_bust_windshield = 0x1059,
  SCR_OPAQUE_STRING_aud_can_play_outside_wind_gusts = 0x105D,
  SCR_OPAQUE_STRING_aud_can_play_rappel_footsteps = 0x105E,
  SCR_OPAQUE_STRING_aud_can_play_rope_creak = 0x105F,
  SCR_OPAQUE_STRING_aud_can_play_tilt_screams = 0x1060,
  SCR_OPAQUE_STRING_aud_car_creak = 0x1061,
  SCR_OPAQUE_STRING_aud_carr_bg_rog_01 = 0x1063,
  SCR_OPAQUE_STRING_aud_carr_bg_rog_02 = 0x1064,
  SCR_OPAQUE_STRING_aud_carr_bg_rog_03 = 0x1065,
  SCR_OPAQUE_STRING_aud_carr_dead_sparrow_ops = 0x1066,
  SCR_OPAQUE_STRING_aud_carr_elevator_exp = 0x1068,
  SCR_OPAQUE_STRING_aud_carr_elevator_front = 0x1069,
  SCR_OPAQUE_STRING_aud_carr_elevator_rear = 0x106A,
  SCR_OPAQUE_STRING_aud_carr_exfil_bg_heli = 0x106B,
  SCR_OPAQUE_STRING_aud_carr_exfil_heli = 0x106C,
  SCR_OPAQUE_STRING_aud_carr_exfil_rog = 0x106D,
  SCR_OPAQUE_STRING_aud_carr_exfil_rog_incoming = 0x106E,
  SCR_OPAQUE_STRING_aud_carr_exp_heli_blade = 0x106F,
  SCR_OPAQUE_STRING_aud_carr_exp_heli_bounce = 0x1070,
  SCR_OPAQUE_STRING_aud_carr_exp_heli_whoosh = 0x1072,
  SCR_OPAQUE_STRING_aud_carr_ghost_mask_on_plr = 0x1073,
  SCR_OPAQUE_STRING_aud_carr_gunship_attack_run = 0x1074,
  SCR_OPAQUE_STRING_aud_carr_gunship_killed = 0x1075,
  SCR_OPAQUE_STRING_aud_carr_hesh_talk_explode = 0x1076,
  SCR_OPAQUE_STRING_aud_carr_osprey_loader = 0x1079,
  SCR_OPAQUE_STRING_aud_carr_osprey_zone_off = 0x107A,
  SCR_OPAQUE_STRING_aud_carr_osprey_zone_on = 0x107B,
  SCR_OPAQUE_STRING_aud_carr_pharmacy_shut = 0x107C,
  SCR_OPAQUE_STRING_aud_carr_pickup_osprey_control = 0x107D,
  SCR_OPAQUE_STRING_aud_carr_player_cuts_rope = 0x107E,
  SCR_OPAQUE_STRING_aud_carr_promotion_dog = 0x107F,
  SCR_OPAQUE_STRING_aud_carr_promotion_hsh = 0x1080,
  SCR_OPAQUE_STRING_aud_carr_promotion_mrk = 0x1081,
  SCR_OPAQUE_STRING_aud_carr_promotion_plr = 0x1082,
  SCR_OPAQUE_STRING_aud_carr_slowmo_bg = 0x1083,
  SCR_OPAQUE_STRING_aud_carr_slowmo_in = 0x1084,
  SCR_OPAQUE_STRING_aud_carr_slowmo_out = 0x1085,
  SCR_OPAQUE_STRING_aud_carr_slowmo_roll = 0x1086,
  SCR_OPAQUE_STRING_aud_carr_slowmo_slide = 0x1087,
  SCR_OPAQUE_STRING_aud_carr_sparrow_105_hit = 0x1088,
  SCR_OPAQUE_STRING_aud_carr_sparrow_105_incoming = 0x1089,
  SCR_OPAQUE_STRING_aud_carr_sparrow_run_hit = 0x108A,
  SCR_OPAQUE_STRING_aud_carr_sparrow_zone_off = 0x108B,
  SCR_OPAQUE_STRING_aud_carr_sparrow_zone_on = 0x108C,
  SCR_OPAQUE_STRING_aud_carr_tilt_plr_death = 0x108D,
  SCR_OPAQUE_STRING_aud_carr_tilt_plr_vault = 0x108E,
  SCR_OPAQUE_STRING_aud_carr_victory_deck_checkpoint = 0x108F,
  SCR_OPAQUE_STRING_aud_carr_zodiac_deck_explode = 0x1090,
  SCR_OPAQUE_STRING_aud_carr_zodiac_deck_explode_vista = 0x1091,
  SCR_OPAQUE_STRING_aud_cart_crash = 0x1092,
  SCR_OPAQUE_STRING_aud_charge_set = 0x1093,
  SCR_OPAQUE_STRING_aud_check = 0x1094,
  SCR_OPAQUE_STRING_aud_chopper_second = 0x1096,
  SCR_OPAQUE_STRING_aud_clear_zone_medbay = 0x1097,
  SCR_OPAQUE_STRING_aud_collapse = 0x1098,
  SCR_OPAQUE_STRING_aud_convoy_done = 0x109A,
  SCR_OPAQUE_STRING_aud_convoy_start = 0x109B,
  SCR_OPAQUE_STRING_aud_coughing = 0x109C,
  SCR_OPAQUE_STRING_aud_deck_jet_catapult_01 = 0x109D,
  SCR_OPAQUE_STRING_aud_deck_jet_catapult_02 = 0x109E,
  SCR_OPAQUE_STRING_aud_deck_siren = 0x109F,
  SCR_OPAQUE_STRING_aud_defend_zodiac_osprey_zone = 0x10A1,
  SCR_OPAQUE_STRING_aud_defend_zodiac_zone = 0x10A2,
  SCR_OPAQUE_STRING_aud_disable_deathsdoor_audio = 0x10A3,
  SCR_OPAQUE_STRING_aud_dish_crash = 0x10A4,
  SCR_OPAQUE_STRING_aud_distant_alarm = 0x10A5,
  SCR_OPAQUE_STRING_aud_dog_scratch = 0x10A7,
  SCR_OPAQUE_STRING_aud_dog_thread = 0x10A8,
  SCR_OPAQUE_STRING_aud_doppler_grenade = 0x10AB,
  SCR_OPAQUE_STRING_aud_drillholenumber = 0x10AC,
  SCR_OPAQUE_STRING_aud_dry_fire = 0x10AD,
  SCR_OPAQUE_STRING_aud_enable_deathsdoor_audio = 0x10AE,
  SCR_OPAQUE_STRING_aud_end_random_chatter_and_pa = 0x10AF,
  SCR_OPAQUE_STRING_aud_end_sniper = 0x10B0,
  SCR_OPAQUE_STRING_aud_enemy_muffled_vo = 0x10B3,
  SCR_OPAQUE_STRING_aud_engine_fail = 0x10B4,
  SCR_OPAQUE_STRING_aud_ext_bombs = 0x10B6,
  SCR_OPAQUE_STRING_aud_fast_jets = 0x10B7,
  SCR_OPAQUE_STRING_aud_filter_off = 0x10B8,
  SCR_OPAQUE_STRING_aud_filter_on = 0x10B9,
  SCR_OPAQUE_STRING_aud_finale_ally_locs = 0x10BA,
  SCR_OPAQUE_STRING_aud_finale_chopper1 = 0x10BB,
  SCR_OPAQUE_STRING_aud_finale_chopper2 = 0x10BC,
  SCR_OPAQUE_STRING_aud_finale_chopper4 = 0x10BE,
  SCR_OPAQUE_STRING_aud_finale_pa_guys = 0x10BF,
  SCR_OPAQUE_STRING_aud_finale_sniper = 0x10C0,
  SCR_OPAQUE_STRING_aud_finale_sniper2 = 0x10C1,
  SCR_OPAQUE_STRING_aud_flap_loop = 0x10C2,
  SCR_OPAQUE_STRING_aud_flare_grab = 0x10C3,
  SCR_OPAQUE_STRING_aud_flare_kill = 0x10C4,
  SCR_OPAQUE_STRING_aud_flight_deck_bell = 0x10C5,
  SCR_OPAQUE_STRING_aud_focus_zoom = 0x10C6,
  SCR_OPAQUE_STRING_aud_fx_planes = 0x10C7,
  SCR_OPAQUE_STRING_aud_gas_mask_on = 0x10C8,
  SCR_OPAQUE_STRING_aud_gear_sounds = 0x10C9,
  SCR_OPAQUE_STRING_aud_gunship_loc = 0x10CC,
  SCR_OPAQUE_STRING_aud_gunship_trans_4_105_01 = 0x10CE,
  SCR_OPAQUE_STRING_aud_gunship_trans_4_105_02 = 0x10CF,
  SCR_OPAQUE_STRING_aud_handle_remote_sniper_ai = 0x10D1,
  SCR_OPAQUE_STRING_aud_hvt_rescue_thread = 0x10D7,
  SCR_OPAQUE_STRING_aud_in_sparrow = 0x10D9,
  SCR_OPAQUE_STRING_aud_init_animation_sounds = 0x10DA,
  SCR_OPAQUE_STRING_aud_init_flags = 0x10DB,
  SCR_OPAQUE_STRING_aud_init_globals = 0x10DC,
  SCR_OPAQUE_STRING_aud_intro_alarms = 0x10DF,
  SCR_OPAQUE_STRING_aud_intro_cargo_doors = 0x10E0,
  SCR_OPAQUE_STRING_aud_intro_choppers = 0x10E1,
  SCR_OPAQUE_STRING_aud_intro_convoy_counter = 0x10E2,
  SCR_OPAQUE_STRING_aud_intro_keegan_tinkering = 0x10E3,
  SCR_OPAQUE_STRING_aud_intro_seq_lr = 0x10E4,
  SCR_OPAQUE_STRING_aud_invert = 0x10E6,
  SCR_OPAQUE_STRING_aud_inverted_kill_finish = 0x10E7,
  SCR_OPAQUE_STRING_aud_inverted_kill_firstguy = 0x10E8,
  SCR_OPAQUE_STRING_aud_jeep_flip = 0x10E9,
  SCR_OPAQUE_STRING_aud_jet_attack = 0x10EA,
  SCR_OPAQUE_STRING_aud_junction = 0x10EB,
  SCR_OPAQUE_STRING_aud_keegan_gunfire = 0x10EC,
  SCR_OPAQUE_STRING_aud_last_time = 0x10ED,
  SCR_OPAQUE_STRING_aud_lerp_eq_over_time = 0x10EF,
  SCR_OPAQUE_STRING_aud_listen_mk32_reload = 0x10F1,
  SCR_OPAQUE_STRING_aud_listen_sprint_or_switch = 0x10F2,
  SCR_OPAQUE_STRING_aud_lynx_rider_death_listener = 0x10F5,
  SCR_OPAQUE_STRING_aud_lynx_turrets = 0x10F6,
  SCR_OPAQUE_STRING_aud_map_range = 0x10F8,
  SCR_OPAQUE_STRING_aud_max_bullets = 0x10F9,
  SCR_OPAQUE_STRING_aud_medbay_alarms = 0x10FA,
  SCR_OPAQUE_STRING_aud_medbay_pa = 0x10FB,
  SCR_OPAQUE_STRING_aud_mk32_dud_beep_atrium = 0x10FD,
  SCR_OPAQUE_STRING_aud_music = 0x1100,
  SCR_OPAQUE_STRING_aud_ocean02_line_emitter_create = 0x1103,
  SCR_OPAQUE_STRING_aud_old_height = 0x1104,
  SCR_OPAQUE_STRING_aud_old_rotation = 0x1105,
  SCR_OPAQUE_STRING_aud_osprey_controller_off = 0x1106,
  SCR_OPAQUE_STRING_aud_osprey_controller_on = 0x1107,
  SCR_OPAQUE_STRING_aud_osprey_fire = 0x1108,
  SCR_OPAQUE_STRING_aud_osprey_run = 0x110A,
  SCR_OPAQUE_STRING_aud_outside_crowd_rear = 0x110C,
  SCR_OPAQUE_STRING_aud_outside_music = 0x110D,
  SCR_OPAQUE_STRING_aud_outside_music_rear = 0x110E,
  SCR_OPAQUE_STRING_aud_pa_guys = 0x110F,
  SCR_OPAQUE_STRING_aud_party = 0x1110,
  SCR_OPAQUE_STRING_aud_pickup_mk32 = 0x1111,
  SCR_OPAQUE_STRING_aud_play_and_move_sound = 0x1113,
  SCR_OPAQUE_STRING_aud_play_deck_music = 0x1115,
  SCR_OPAQUE_STRING_aud_play_intro_music = 0x1118,
  SCR_OPAQUE_STRING_aud_play_jet_flyby = 0x1119,
  SCR_OPAQUE_STRING_aud_play_jets_zoomby = 0x111A,
  SCR_OPAQUE_STRING_aud_play_loop_until_flag = 0x111B,
  SCR_OPAQUE_STRING_aud_play_medbay_music = 0x111C,
  SCR_OPAQUE_STRING_aud_play_random_wind_gust = 0x111E,
  SCR_OPAQUE_STRING_aud_play_tilt_music = 0x111F,
  SCR_OPAQUE_STRING_aud_play_whizby = 0x1121,
  SCR_OPAQUE_STRING_aud_player_gunfire = 0x1123,
  SCR_OPAQUE_STRING_aud_player_jumps_from_sparrow = 0x1124,
  SCR_OPAQUE_STRING_aud_player_reloading = 0x1125,
  SCR_OPAQUE_STRING_aud_player_tank_int_on = 0x1127,
  SCR_OPAQUE_STRING_aud_post_sparrow_music = 0x1128,
  SCR_OPAQUE_STRING_aud_pre_sniper_rpg_explode = 0x112A,
  SCR_OPAQUE_STRING_aud_pre_sniper_rpg_gunner_listener = 0x112B,
  SCR_OPAQUE_STRING_aud_pre_sniper_rpg_listener = 0x112C,
  SCR_OPAQUE_STRING_aud_random_enemy_chatter = 0x1130,
  SCR_OPAQUE_STRING_aud_random_enemy_pa = 0x1131,
  SCR_OPAQUE_STRING_aud_random_metal_crumbles = 0x1132,
  SCR_OPAQUE_STRING_aud_random_rumbles_intro = 0x1134,
  SCR_OPAQUE_STRING_aud_rappel = 0x1135,
  SCR_OPAQUE_STRING_aud_rappel_combat = 0x1136,
  SCR_OPAQUE_STRING_aud_rappel_jump_down = 0x1137,
  SCR_OPAQUE_STRING_aud_rpg_gunner_listener = 0x1139,
  SCR_OPAQUE_STRING_aud_screen_shake_jumps = 0x113D,
  SCR_OPAQUE_STRING_aud_set_spec_ops = 0x113E,
  SCR_OPAQUE_STRING_aud_sniper_fire = 0x1143,
  SCR_OPAQUE_STRING_aud_sniper_start_zoom = 0x1144,
  SCR_OPAQUE_STRING_aud_sniper_stop_zoom = 0x1145,
  SCR_OPAQUE_STRING_aud_sparrow_aiming = 0x1146,
  SCR_OPAQUE_STRING_aud_sparrow_run_spawn_fires = 0x1148,
  SCR_OPAQUE_STRING_aud_sparrow_tone = 0x1149,
  SCR_OPAQUE_STRING_aud_stadium_crumble1 = 0x114A,
  SCR_OPAQUE_STRING_aud_start_garden_events = 0x114C,
  SCR_OPAQUE_STRING_aud_start_pseudo_occlusion = 0x114D,
  SCR_OPAQUE_STRING_aud_start_sniper = 0x114E,
  SCR_OPAQUE_STRING_aud_start_sniper_finale = 0x114F,
  SCR_OPAQUE_STRING_aud_stop_wind = 0x1151,
  SCR_OPAQUE_STRING_aud_switch_zone_medbay = 0x1152,
  SCR_OPAQUE_STRING_aud_temp_timer = 0x1153,
  SCR_OPAQUE_STRING_aud_tilt_barrels_01 = 0x1154,
  SCR_OPAQUE_STRING_aud_tilt_debris_01 = 0x1155,
  SCR_OPAQUE_STRING_aud_tilt_front_deck = 0x1156,
  SCR_OPAQUE_STRING_aud_tilt_sliding_cart_01 = 0x1158,
  SCR_OPAQUE_STRING_aud_tilt_sliding_guya = 0x1159,
  SCR_OPAQUE_STRING_aud_tower_collapse = 0x115B,
  SCR_OPAQUE_STRING_aud_tower_to_deck = 0x115C,
  SCR_OPAQUE_STRING_aud_traverse_ally_locs = 0x115D,
  SCR_OPAQUE_STRING_aud_truck_drive = 0x115E,
  SCR_OPAQUE_STRING_aud_truck_enter = 0x115F,
  SCR_OPAQUE_STRING_aud_truck_ext_idle_loop = 0x1160,
  SCR_OPAQUE_STRING_aud_truck_start = 0x1162,
  SCR_OPAQUE_STRING_aud_turret_indices = 0x1163,
  SCR_OPAQUE_STRING_aud_updating_movement = 0x1165,
  SCR_OPAQUE_STRING_aud_vehicle_jolt = 0x1166,
  SCR_OPAQUE_STRING_aud_victory_deck_spawn_fires = 0x1168,
  SCR_OPAQUE_STRING_aud_vip_ally_locs = 0x1169,
  SCR_OPAQUE_STRING_aud_vip_breach = 0x116A,
  SCR_OPAQUE_STRING_aud_vip_combat = 0x116B,
  SCR_OPAQUE_STRING_aud_virus = 0x116C,
  SCR_OPAQUE_STRING_aud_wave2_ambient_jets = 0x116D,
  SCR_OPAQUE_STRING_aud_wave3_ambient_jets = 0x116E,
  SCR_OPAQUE_STRING_aud_weapon_strobe = 0x116F,
  SCR_OPAQUE_STRING_aud_wind_loop = 0x1170,
  SCR_OPAQUE_STRING_aud_wind_state_last = 0x1171,
  SCR_OPAQUE_STRING_aud_zipline = 0x1172,
  SCR_OPAQUE_STRING_aud_zipline_launcher_loop = 0x1173,
  SCR_OPAQUE_STRING_aud_zodiac_gunship_attack_105_fake = 0x1175,
  SCR_OPAQUE_STRING_aud_zodiac_jet_catapult_02 = 0x1178,
  SCR_OPAQUE_STRING_audio = 0x117D,
  SCR_OPAQUE_STRING_audio_bink_percentage_beep_array = 0x117E,
  SCR_OPAQUE_STRING_audio_check_to_play_a_beep_or_not = 0x117F,
  SCR_OPAQUE_STRING_audio_derrick_explode_logic = 0x1180,
  SCR_OPAQUE_STRING_audio_entities = 0x1181,
  SCR_OPAQUE_STRING_audio_flag_init = 0x1182,
  SCR_OPAQUE_STRING_audio_jet_counter = 0x1185,
  SCR_OPAQUE_STRING_audio_odin_pressurized_variable = 0x1186,
  SCR_OPAQUE_STRING_audio_plane_engine_sounds_dying = 0x1187,
  SCR_OPAQUE_STRING_audio_player_falling_start = 0x1189,
  SCR_OPAQUE_STRING_audio_set_default_ambience = 0x118B,
  SCR_OPAQUE_STRING_audio_set_fadein_ambience = 0x118C,
  SCR_OPAQUE_STRING_audio_set_infil_ambience = 0x118D,
  SCR_OPAQUE_STRING_audio_set_initial_ambience = 0x118E,
  SCR_OPAQUE_STRING_audio_speed = 0x118F,
  SCR_OPAQUE_STRING_audio_start_destruction_loop = 0x1190,
  SCR_OPAQUE_STRING_audio_start_plane_engine_sounds = 0x1191,
  SCR_OPAQUE_STRING_audio_start_rushing_water_line_emitter_01 = 0x1193,
  SCR_OPAQUE_STRING_audio_start_rushing_water_line_emitter_02 = 0x1194,
  SCR_OPAQUE_STRING_audio_start_rushing_water_line_emitter_03 = 0x1195,
  SCR_OPAQUE_STRING_audio_stereo_line_emitter = 0x1196,
  SCR_OPAQUE_STRING_audio_stringtable_mapname = 0x1198,
  SCR_OPAQUE_STRING_audio_underwater_breath_bubbles = 0x1199,
  SCR_OPAQUE_STRING_audio_underwater_breath_surfacing = 0x119A,
  SCR_OPAQUE_STRING_audio_underwater_choke = 0x119B,
  SCR_OPAQUE_STRING_audio_wait_to_delete_water_node = 0x119C,
  SCR_OPAQUE_STRING_audio_water_level_logic = 0x119D,
  SCR_OPAQUE_STRING_audio_zones = 0x119E,
  SCR_OPAQUE_STRING_aurora_anims = 0x11A0,
  SCR_OPAQUE_STRING_auto_adjust_difficulty_player_movement_check = 0x11A2,
  SCR_OPAQUE_STRING_auto_adjust_difficulty_player_positioner = 0x11A3,
  SCR_OPAQUE_STRING_auto_adjust_difficulty_track_player_death = 0x11A4,
  SCR_OPAQUE_STRING_auto_adjust_enemy_died = 0x11A7,
  SCR_OPAQUE_STRING_auto_adjust_flags = 0x11A8,
  SCR_OPAQUE_STRING_auto_adjust_results = 0x11AA,
  SCR_OPAQUE_STRING_auto_adust_zone_complete = 0x11AB,
  SCR_OPAQUE_STRING_auto_breach = 0x11AC,
  SCR_OPAQUE_STRING_auto_breach_gametypes = 0x11AD,
  SCR_OPAQUE_STRING_auto_flash_text = 0x11AE,
  SCR_OPAQUE_STRING_auto_kill_enemies = 0x11AF,
  SCR_OPAQUE_STRING_auto_mg42_target = 0x11B0,
  SCR_OPAQUE_STRING_auto_pilot_rot_control_ref_ent = 0x11B2,
  SCR_OPAQUE_STRING_autoassign = 0x11B4,
  SCR_OPAQUE_STRING_automatic_sliding_door_detector = 0x11B7,
  SCR_OPAQUE_STRING_autoresettime = 0x11B9,
  SCR_OPAQUE_STRING_autosave_by_name = 0x11BA,
  SCR_OPAQUE_STRING_autosave_by_name_silent = 0x11BB,
  SCR_OPAQUE_STRING_autosave_by_name_thread = 0x11BC,
  SCR_OPAQUE_STRING_autosave_check_override = 0x11BD,
  SCR_OPAQUE_STRING_autosave_now = 0x11BE,
  SCR_OPAQUE_STRING_autosave_now_trigger = 0x11C0,
  SCR_OPAQUE_STRING_autosave_or_timeout = 0x11C1,
  SCR_OPAQUE_STRING_autosave_past_balcony = 0x11C2,
  SCR_OPAQUE_STRING_autosave_recon = 0x11C4,
  SCR_OPAQUE_STRING_autosave_stealth_silent = 0x11C6,
  SCR_OPAQUE_STRING_autosave_tactical = 0x11C7,
  SCR_OPAQUE_STRING_autosave_tactical_grenade_check = 0x11C8,
  SCR_OPAQUE_STRING_autosave_tactical_grenade_check_dieout = 0x11C9,
  SCR_OPAQUE_STRING_autosave_tactical_player_nades = 0x11CA,
  SCR_OPAQUE_STRING_autosave_tactical_proc = 0x11CB,
  SCR_OPAQUE_STRING_autosave_threat_check_enabled = 0x11CD,
  SCR_OPAQUE_STRING_autosave_timeout = 0x11CE,
  SCR_OPAQUE_STRING_autosaveammocheck = 0x11CF,
  SCR_OPAQUE_STRING_autosavecheck = 0x11D0,
  SCR_OPAQUE_STRING_autosavecheck_not_picky = 0x11D1,
  SCR_OPAQUE_STRING_autosavehealthcheck = 0x11D2,
  SCR_OPAQUE_STRING_autosaveprint = 0x11D5,
  SCR_OPAQUE_STRING_autosaves_think = 0x11D6,
  SCR_OPAQUE_STRING_autosavethreatcheck = 0x11D7,
  SCR_OPAQUE_STRING_autoshootanimrate = 0x11D8,
  SCR_OPAQUE_STRING_autospotadswatcher = 0x11DA,
  SCR_OPAQUE_STRING_autospotdeathwatcher = 0x11DB,
  SCR_OPAQUE_STRING_autotarget = 0x11DC,
  SCR_OPAQUE_STRING_available = 0x11DE,
  SCR_OPAQUE_STRING_availabledrones = 0x11DF,
  SCR_OPAQUE_STRING_avengeddog = 0x11E1,
  SCR_OPAQUE_STRING_avengedplayer = 0x11E2,
  SCR_OPAQUE_STRING_avoidairstrikelocations = 0x11E3,
  SCR_OPAQUE_STRING_avoidcarepackages = 0x11E4,
  SCR_OPAQUE_STRING_avoidcornervisibleenemies = 0x11E5,
  SCR_OPAQUE_STRING_avoidenemyspawn = 0x11E7,
  SCR_OPAQUE_STRING_avoidgrenades = 0x11E9,
  SCR_OPAQUE_STRING_avoidkillstreakonspawntimer = 0x11EA,
  SCR_OPAQUE_STRING_avoidlastattackerlocation = 0x11EB,
  SCR_OPAQUE_STRING_avoidlastdeathlocation = 0x11EC,
  SCR_OPAQUE_STRING_avoidmines = 0x11ED,
  SCR_OPAQUE_STRING_avoidrecentlyused = 0x11EE,
  SCR_OPAQUE_STRING_avoidsamespawn = 0x11EF,
  SCR_OPAQUE_STRING_awaittill_either = 0x11F1,
  SCR_OPAQUE_STRING_award1_ref = 0x11F2,
  SCR_OPAQUE_STRING_award2_ref = 0x11F3,
  SCR_OPAQUE_STRING_award_intel = 0x11F4,
  SCR_OPAQUE_STRING_awards = 0x11F6,
  SCR_OPAQUE_STRING_awardxp = 0x11F7,
  SCR_OPAQUE_STRING_aware_aievents = 0x11F8,
  SCR_OPAQUE_STRING_awareness = 0x11F9,
  SCR_OPAQUE_STRING_awareness_param = 0x11FA,
  SCR_OPAQUE_STRING_axes = 0x11FB,
  SCR_OPAQUE_STRING_axischopper = 0x11FD,
  SCR_OPAQUE_STRING_axismode = 0x11FF,
  SCR_OPAQUE_STRING_b = 0x1200,
  SCR_OPAQUE_STRING_b_bad_guys = 0x1201,
  SCR_OPAQUE_STRING_b_falling = 0x1202,
  SCR_OPAQUE_STRING_back_alley_humvee = 0x1204,
  SCR_OPAQUE_STRING_back_jerk = 0x1205,
  SCR_OPAQUE_STRING_back_light_on = 0x1206,
  SCR_OPAQUE_STRING_back_velocity = 0x1207,
  SCR_OPAQUE_STRING_back_weight = 0x1208,
  SCR_OPAQUE_STRING_back_wheel_sfx = 0x1209,
  SCR_OPAQUE_STRING_backdoor_guy = 0x120A,
  SCR_OPAQUE_STRING_backend_friendly_stealth_logic = 0x120B,
  SCR_OPAQUE_STRING_background_block = 0x120D,
  SCR_OPAQUE_STRING_background_vo = 0x1210,
  SCR_OPAQUE_STRING_backplate_sound_on = 0x1211,
  SCR_OPAQUE_STRING_backstab = 0x1212,
  SCR_OPAQUE_STRING_backtank = 0x1213,
  SCR_OPAQUE_STRING_backtodefendlocation = 0x1214,
  SCR_OPAQUE_STRING_backtorunondamage = 0x1215,
  SCR_OPAQUE_STRING_backupbuddyplayfx = 0x1216,
  SCR_OPAQUE_STRING_baclonyguys = 0x1218,
  SCR_OPAQUE_STRING_bad_path_handled = 0x121A,
  SCR_OPAQUE_STRING_badger = 0x121C,
  SCR_OPAQUE_STRING_badpath_jump = 0x121E,
  SCR_OPAQUE_STRING_badpathcount = 0x121F,
  SCR_OPAQUE_STRING_badpathtime = 0x1220,
  SCR_OPAQUE_STRING_badplace = 0x1221,
  SCR_OPAQUE_STRING_badplace_brush_moving = 0x1223,
  SCR_OPAQUE_STRING_badplace_cylinder_func = 0x1224,
  SCR_OPAQUE_STRING_badplace_name = 0x1226,
  SCR_OPAQUE_STRING_badplace_think = 0x1228,
  SCR_OPAQUE_STRING_badplaceint = 0x1229,
  SCR_OPAQUE_STRING_badplacer = 0x122C,
  SCR_OPAQUE_STRING_badplaces = 0x122D,
  SCR_OPAQUE_STRING_badshot = 0x122E,
  SCR_OPAQUE_STRING_badshotcount = 0x122F,
  SCR_OPAQUE_STRING_badtarget = 0x1230,
  SCR_OPAQUE_STRING_badtargetreset = 0x1231,
  SCR_OPAQUE_STRING_bag_name = 0x1232,
  SCR_OPAQUE_STRING_bag_trigger_off_if_player_has_weapon = 0x1233,
  SCR_OPAQUE_STRING_bag_trigger_wait = 0x1234,
  SCR_OPAQUE_STRING_bag_vis_callback = 0x1235,
  SCR_OPAQUE_STRING_bags = 0x1236,
  SCR_OPAQUE_STRING_baker = 0x1237,
  SCR_OPAQUE_STRING_baker_anim = 0x1238,
  SCR_OPAQUE_STRING_baker_approach = 0x1239,
  SCR_OPAQUE_STRING_baker_building_entry_movement = 0x123A,
  SCR_OPAQUE_STRING_baker_crawl_dialogue = 0x123B,
  SCR_OPAQUE_STRING_baker_drop_bag = 0x123E,
  SCR_OPAQUE_STRING_baker_end = 0x123F,
  SCR_OPAQUE_STRING_baker_enemy = 0x1240,
  SCR_OPAQUE_STRING_baker_enter = 0x1241,
  SCR_OPAQUE_STRING_baker_enter_struct = 0x1242,
  SCR_OPAQUE_STRING_baker_enter_wreck = 0x1243,
  SCR_OPAQUE_STRING_baker_glint_off = 0x1245,
  SCR_OPAQUE_STRING_baker_glint_on = 0x1246,
  SCR_OPAQUE_STRING_baker_in_to_jeep_anim = 0x1247,
  SCR_OPAQUE_STRING_baker_junction_door_open = 0x1248,
  SCR_OPAQUE_STRING_baker_killfirms = 0x1249,
  SCR_OPAQUE_STRING_baker_move_to_stealth_2 = 0x124A,
  SCR_OPAQUE_STRING_baker_noncombat = 0x124B,
  SCR_OPAQUE_STRING_baker_path_to_wreck = 0x124C,
  SCR_OPAQUE_STRING_baker_post_up_at_sharks = 0x124E,
  SCR_OPAQUE_STRING_baker_rappel_hookup = 0x1250,
  SCR_OPAQUE_STRING_baker_sonar_path = 0x1251,
  SCR_OPAQUE_STRING_baker_sonar_path_dialogue = 0x1252,
  SCR_OPAQUE_STRING_baker_struct = 0x1254,
  SCR_OPAQUE_STRING_baker_torpedo_position = 0x1255,
  SCR_OPAQUE_STRING_baker_wait_at_container = 0x1256,
  SCR_OPAQUE_STRING_baker_weld_door = 0x1258,
  SCR_OPAQUE_STRING_baker_wreck_cleanup = 0x1259,
  SCR_OPAQUE_STRING_baker_wreck_dialogue = 0x125A,
  SCR_OPAQUE_STRING_balanceteams = 0x125B,
  SCR_OPAQUE_STRING_balcony = 0x125C,
  SCR_OPAQUE_STRING_balcony_allies_playerhind_logic = 0x125D,
  SCR_OPAQUE_STRING_balcony_anims = 0x125E,
  SCR_OPAQUE_STRING_balcony_check = 0x125F,
  SCR_OPAQUE_STRING_balcony_death = 0x1261,
  SCR_OPAQUE_STRING_balcony_death_damage_watcher = 0x1262,
  SCR_OPAQUE_STRING_balcony_enemies_clip = 0x1264,
  SCR_OPAQUE_STRING_balcony_fall_deaths = 0x1265,
  SCR_OPAQUE_STRING_balcony_kill_trigger = 0x1267,
  SCR_OPAQUE_STRING_balcony_read = 0x1268,
  SCR_OPAQUE_STRING_balcony_turret = 0x1269,
  SCR_OPAQUE_STRING_balconyent = 0x126A,
  SCR_OPAQUE_STRING_balconystumblers = 0x126B,
  SCR_OPAQUE_STRING_ball_angle = 0x126D,
  SCR_OPAQUE_STRING_ball_i = 0x126E,
  SCR_OPAQUE_STRING_ball_offset = 0x1270,
  SCR_OPAQUE_STRING_ball_ring = 0x1271,
  SCR_OPAQUE_STRING_balldrone = 0x1272,
  SCR_OPAQUE_STRING_balldrone_burstfirestop = 0x1277,
  SCR_OPAQUE_STRING_balldrone_enemy_lightfx = 0x1278,
  SCR_OPAQUE_STRING_balldrone_followplayer = 0x1279,
  SCR_OPAQUE_STRING_balldrone_friendly_lightfx = 0x127A,
  SCR_OPAQUE_STRING_balldrone_handledamage = 0x127B,
  SCR_OPAQUE_STRING_balldrone_leave = 0x127C,
  SCR_OPAQUE_STRING_balldrone_moving_platform_death = 0x127E,
  SCR_OPAQUE_STRING_balldrone_stunned = 0x127F,
  SCR_OPAQUE_STRING_balldrone_watchdeath = 0x1280,
  SCR_OPAQUE_STRING_balldrone_watchforgoal = 0x1281,
  SCR_OPAQUE_STRING_balldrone_watchownerdeath = 0x1282,
  SCR_OPAQUE_STRING_balldrone_watchownerloss = 0x1283,
  SCR_OPAQUE_STRING_balldrone_watchroundend = 0x1284,
  SCR_OPAQUE_STRING_balldrone_watchtimeout = 0x1285,
  SCR_OPAQUE_STRING_balldronedestroyed = 0x1286,
  SCR_OPAQUE_STRING_balldroneexplode = 0x1287,
  SCR_OPAQUE_STRING_balldrones = 0x1288,
  SCR_OPAQUE_STRING_balldronesettings = 0x1289,
  SCR_OPAQUE_STRING_balldronetype = 0x128A,
  SCR_OPAQUE_STRING_balloon_count = 0x128B,
  SCR_OPAQUE_STRING_balloons = 0x128C,
  SCR_OPAQUE_STRING_ballytankmove = 0x128D,
  SCR_OPAQUE_STRING_bang_stick_rotate = 0x128E,
  SCR_OPAQUE_STRING_bar = 0x128F,
  SCR_OPAQUE_STRING_bar_animnode = 0x1290,
  SCR_OPAQUE_STRING_bar_death = 0x1291,
  SCR_OPAQUE_STRING_bar_drift_rate = 0x1292,
  SCR_OPAQUE_STRING_bar_enemies = 0x1293,
  SCR_OPAQUE_STRING_bar_enemy_lights_out_accuracy = 0x1296,
  SCR_OPAQUE_STRING_bar_enemy_panic_vo = 0x1297,
  SCR_OPAQUE_STRING_bar_enemy_reach = 0x1298,
  SCR_OPAQUE_STRING_bar_enemy_react = 0x1299,
  SCR_OPAQUE_STRING_bar_enemy_seek_player = 0x129A,
  SCR_OPAQUE_STRING_bar_enemy_setup = 0x129B,
  SCR_OPAQUE_STRING_bar_enemy_strobe_react = 0x129C,
  SCR_OPAQUE_STRING_bar_enemy_strobe_vo = 0x129D,
  SCR_OPAQUE_STRING_bar_enemy_vo = 0x129E,
  SCR_OPAQUE_STRING_bar_enemy_wave2_3_react = 0x129F,
  SCR_OPAQUE_STRING_bar_enemy_wave2_behavior = 0x12A0,
  SCR_OPAQUE_STRING_bar_guy11 = 0x12A2,
  SCR_OPAQUE_STRING_bar_guy9 = 0x12A3,
  SCR_OPAQUE_STRING_bar_guy_watch_death = 0x12A4,
  SCR_OPAQUE_STRING_bar_light = 0x12A5,
  SCR_OPAQUE_STRING_bar_prep = 0x12A6,
  SCR_OPAQUE_STRING_bar_props = 0x12A7,
  SCR_OPAQUE_STRING_bar_react_variable_wait = 0x12A8,
  SCR_OPAQUE_STRING_bar_rorke = 0x12A9,
  SCR_OPAQUE_STRING_bar_rorke_move_on = 0x12AA,
  SCR_OPAQUE_STRING_bar_rorke_shoot_tv = 0x12AB,
  SCR_OPAQUE_STRING_bar_rorke_strobe_attack = 0x12AC,
  SCR_OPAQUE_STRING_bar_rorke_warning_vo = 0x12AD,
  SCR_OPAQUE_STRING_bar_spotted_func = 0x12AE,
  SCR_OPAQUE_STRING_bar_stool_anim = 0x12AF,
  SCR_OPAQUE_STRING_bar_strobe_player_force_off = 0x12B1,
  SCR_OPAQUE_STRING_bar_strobe_player_on = 0x12B2,
  SCR_OPAQUE_STRING_barbed_wire_waver = 0x12B3,
  SCR_OPAQUE_STRING_barbedwirerunners = 0x12B4,
  SCR_OPAQUE_STRING_bared_wire_scene = 0x12B5,
  SCR_OPAQUE_STRING_bark_trigger = 0x12B6,
  SCR_OPAQUE_STRING_barking_sound = 0x12B7,
  SCR_OPAQUE_STRING_barkingdog_handle_stealth_break = 0x12B8,
  SCR_OPAQUE_STRING_barrel = 0x12B9,
  SCR_OPAQUE_STRING_barrel_earthquake = 0x12BA,
  SCR_OPAQUE_STRING_barrel_model_1 = 0x12BB,
  SCR_OPAQUE_STRING_barrel_model_2 = 0x12BC,
  SCR_OPAQUE_STRING_barrel_model_3 = 0x12BD,
  SCR_OPAQUE_STRING_barrel_model_5 = 0x12BF,
  SCR_OPAQUE_STRING_barrel_roll = 0x12C0,
  SCR_OPAQUE_STRING_base = 0x12C4,
  SCR_OPAQUE_STRING_base_accuracy = 0x12C5,
  SCR_OPAQUE_STRING_base_alarm = 0x12C6,
  SCR_OPAQUE_STRING_base_alarm_loop = 0x12C7,
  SCR_OPAQUE_STRING_base_array_ai_cleanup_spawn_function = 0x12C9,
  SCR_OPAQUE_STRING_base_array_ambient_a10_gun_dive_1b = 0x12CC,
  SCR_OPAQUE_STRING_base_array_ambient_a10_gun_dive_2 = 0x12CD,
  SCR_OPAQUE_STRING_base_array_ambient_a10_gun_dive_2b = 0x12CE,
  SCR_OPAQUE_STRING_base_array_ambient_a10_gun_dive_3b = 0x12D0,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_1 = 0x12D1,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_1b = 0x12D2,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_2 = 0x12D3,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_2b = 0x12D4,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_3 = 0x12D5,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_3b = 0x12D6,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_4b = 0x12D7,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_5b = 0x12D8,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_6b = 0x12D9,
  SCR_OPAQUE_STRING_base_array_ambient_dogfight_6c = 0x12DA,
  SCR_OPAQUE_STRING_base_array_begin = 0x12DB,
  SCR_OPAQUE_STRING_base_array_choppers = 0x12DC,
  SCR_OPAQUE_STRING_base_array_cleanup = 0x12DD,
  SCR_OPAQUE_STRING_base_array_end_vo = 0x12DE,
  SCR_OPAQUE_STRING_base_array_enemies_setup = 0x12DF,
  SCR_OPAQUE_STRING_base_array_exit_rpg = 0x12E0,
  SCR_OPAQUE_STRING_base_array_init = 0x12E2,
  SCR_OPAQUE_STRING_base_array_main = 0x12E3,
  SCR_OPAQUE_STRING_base_array_mortar_strikes = 0x12E4,
  SCR_OPAQUE_STRING_base_array_pinned_down_allies = 0x12E5,
  SCR_OPAQUE_STRING_base_array_trucks_01_setup = 0x12E7,
  SCR_OPAQUE_STRING_base_array_vo = 0x12E9,
  SCR_OPAQUE_STRING_base_falling_hands_anim = 0x12EA,
  SCR_OPAQUE_STRING_base_falling_legs_anim = 0x12EB,
  SCR_OPAQUE_STRING_base_origin = 0x12EC,
  SCR_OPAQUE_STRING_baseaccuracy = 0x12ED,
  SCR_OPAQUE_STRING_basealpha = 0x12EE,
  SCR_OPAQUE_STRING_baseangles = 0x12EF,
  SCR_OPAQUE_STRING_baseeffectforward = 0x12F1,
  SCR_OPAQUE_STRING_baseeffectpos = 0x12F2,
  SCR_OPAQUE_STRING_baseeffectright = 0x12F3,
  SCR_OPAQUE_STRING_baseeffectswaitforjoined = 0x12F4,
  SCR_OPAQUE_STRING_basefontscale = 0x12F5,
  SCR_OPAQUE_STRING_baseheight = 0x12F6,
  SCR_OPAQUE_STRING_baseignorerandombulletdamage = 0x12F7,
  SCR_OPAQUE_STRING_baseline_speed = 0x12F8,
  SCR_OPAQUE_STRING_basement_ally_movement = 0x12F9,
  SCR_OPAQUE_STRING_basename = 0x12FB,
  SCR_OPAQUE_STRING_basetile = 0x12FD,
  SCR_OPAQUE_STRING_basetime = 0x12FE,
  SCR_OPAQUE_STRING_basewidth = 0x12FF,
  SCR_OPAQUE_STRING_baseyaw = 0x1300,
  SCR_OPAQUE_STRING_batman_begins = 0x1302,
  SCR_OPAQUE_STRING_batman_rotate_plane = 0x1303,
  SCR_OPAQUE_STRING_battingcage_door_peek = 0x1305,
  SCR_OPAQUE_STRING_battle_chatter_controller_friendlies = 0x1306,
  SCR_OPAQUE_STRING_battlebuddy = 0x1307,
  SCR_OPAQUE_STRING_battlebuddyrespawntimestamp = 0x1308,
  SCR_OPAQUE_STRING_battlebuddywaitlist = 0x1309,
  SCR_OPAQUE_STRING_battlechatter = 0x130A,
  SCR_OPAQUE_STRING_battlechatter_canprint = 0x130B,
  SCR_OPAQUE_STRING_battlechatter_debugprint = 0x130D,
  SCR_OPAQUE_STRING_battlechatter_off = 0x130F,
  SCR_OPAQUE_STRING_battlechatter_on = 0x1310,
  SCR_OPAQUE_STRING_battlechatter_on_thread = 0x1311,
  SCR_OPAQUE_STRING_battlechatter_print = 0x1312,
  SCR_OPAQUE_STRING_battlechatter_printdumpline = 0x1314,
  SCR_OPAQUE_STRING_battlechatter_setup = 0x1315,
  SCR_OPAQUE_STRING_bay_door_lower_model = 0x1317,
  SCR_OPAQUE_STRING_bay_door_upper_model = 0x1319,
  SCR_OPAQUE_STRING_bbdata_init = 0x131A,
  SCR_OPAQUE_STRING_bc_ascend = 0x131C,
  SCR_OPAQUE_STRING_bc_enabled = 0x1320,
  SCR_OPAQUE_STRING_bc_end_fic = 0x1322,
  SCR_OPAQUE_STRING_bc_eventtypelastusedtimeplr = 0x1324,
  SCR_OPAQUE_STRING_bc_front_fic = 0x1326,
  SCR_OPAQUE_STRING_bc_helo_fic = 0x1327,
  SCR_OPAQUE_STRING_bc_helo_reinforce = 0x1328,
  SCR_OPAQUE_STRING_bc_helo_reinforce_kill = 0x1329,
  SCR_OPAQUE_STRING_bc_isspeaking = 0x132B,
  SCR_OPAQUE_STRING_bc_mid = 0x132C,
  SCR_OPAQUE_STRING_bc_rolling_door_open = 0x132E,
  SCR_OPAQUE_STRING_bc_snow_tweaks = 0x132F,
  SCR_OPAQUE_STRING_bc_street = 0x1330,
  SCR_OPAQUE_STRING_bc_street_fic = 0x1332,
  SCR_OPAQUE_STRING_bccountryid = 0x1333,
  SCR_OPAQUE_STRING_bcgetclaimednode = 0x1335,
  SCR_OPAQUE_STRING_bcinfo = 0x1336,
  SCR_OPAQUE_STRING_bclearstrafeturnrate = 0x1338,
  SCR_OPAQUE_STRING_bcname = 0x1339,
  SCR_OPAQUE_STRING_bcprintfailprefix = 0x133B,
  SCR_OPAQUE_STRING_bcqb_pa_playing = 0x133D,
  SCR_OPAQUE_STRING_bcrank = 0x133E,
  SCR_OPAQUE_STRING_bcrashmix = 0x133F,
  SCR_OPAQUE_STRING_bcs_location_mappings = 0x1340,
  SCR_OPAQUE_STRING_bcs_location_trigger_mapping = 0x1341,
  SCR_OPAQUE_STRING_bcs_location_trigs_init = 0x1342,
  SCR_OPAQUE_STRING_bcs_locations = 0x1343,
  SCR_OPAQUE_STRING_bcs_maxtalkingdistsqrdfromplayer = 0x1344,
  SCR_OPAQUE_STRING_bcs_minpriority = 0x1346,
  SCR_OPAQUE_STRING_bcs_on = 0x1347,
  SCR_OPAQUE_STRING_bcs_scripted_dialogue_start = 0x1348,
  SCR_OPAQUE_STRING_bcs_setup_chatter_toggle_array = 0x1349,
  SCR_OPAQUE_STRING_bcs_setup_flavorburst_toggle_array = 0x134B,
  SCR_OPAQUE_STRING_bcs_setup_teams_array = 0x134C,
  SCR_OPAQUE_STRING_bcs_setup_voice = 0x134D,
  SCR_OPAQUE_STRING_bcs_threatresettime = 0x134E,
  SCR_OPAQUE_STRING_bcsdebugwaiter = 0x1350,
  SCR_OPAQUE_STRING_bcsounds = 0x1352,
  SCR_OPAQUE_STRING_bdamagesoundplaying = 0x1353,
  SCR_OPAQUE_STRING_bdcheck = 0x1354,
  SCR_OPAQUE_STRING_bdefenddoorexplosionplaying = 0x1356,
  SCR_OPAQUE_STRING_bdisabledefaultfacialanims = 0x1357,
  SCR_OPAQUE_STRING_bdisablegearsounds = 0x1358,
  SCR_OPAQUE_STRING_bdisablemovetwitch = 0x1359,
  SCR_OPAQUE_STRING_bdoorbreakfoleyplayed = 0x135A,
  SCR_OPAQUE_STRING_bdoturnandmove = 0x135B,
  SCR_OPAQUE_STRING_bdrillon = 0x135C,
  SCR_OPAQUE_STRING_bdriverkilled = 0x135D,
  SCR_OPAQUE_STRING_beach_a10_return_flybys = 0x135E,
  SCR_OPAQUE_STRING_beach_ai = 0x135F,
  SCR_OPAQUE_STRING_beach_ally_default = 0x1360,
  SCR_OPAQUE_STRING_beach_artillery_balcony_logic = 0x1362,
  SCR_OPAQUE_STRING_beach_balcony_collapse_watcher = 0x1363,
  SCR_OPAQUE_STRING_beach_battlehind_default = 0x1364,
  SCR_OPAQUE_STRING_beach_battlehind_rpgers = 0x1365,
  SCR_OPAQUE_STRING_beach_battlehinds_start = 0x1367,
  SCR_OPAQUE_STRING_beach_bunker_backtrack_blocker = 0x1368,
  SCR_OPAQUE_STRING_beach_bunker_drones = 0x1369,
  SCR_OPAQUE_STRING_beach_bunker_stumble_event = 0x136A,
  SCR_OPAQUE_STRING_beach_bunker_stumbler_sound = 0x136B,
  SCR_OPAQUE_STRING_beach_dof_changes = 0x136C,
  SCR_OPAQUE_STRING_beach_enemy_attack_player_manager = 0x136D,
  SCR_OPAQUE_STRING_beach_enemy_default = 0x136E,
  SCR_OPAQUE_STRING_beach_flyover_helis = 0x1370,
  SCR_OPAQUE_STRING_beach_front_nodes_think = 0x1371,
  SCR_OPAQUE_STRING_beach_frontline_abrams = 0x1372,
  SCR_OPAQUE_STRING_beach_frontline_abrams_mg = 0x1373,
  SCR_OPAQUE_STRING_beach_hind_balcony_logic = 0x1374,
  SCR_OPAQUE_STRING_beach_hind_balcony_missile_logic = 0x1375,
  SCR_OPAQUE_STRING_beach_hovercraft_looper = 0x1376,
  SCR_OPAQUE_STRING_beach_hovercraft_tanks_default = 0x1377,
  SCR_OPAQUE_STRING_beach_m880_death_hack = 0x1379,
  SCR_OPAQUE_STRING_beach_nh90_damagestate = 0x137B,
  SCR_OPAQUE_STRING_beach_path_drones = 0x137D,
  SCR_OPAQUE_STRING_beach_playerhind_attack_logic = 0x137E,
  SCR_OPAQUE_STRING_beach_playerhind_attack_target = 0x137F,
  SCR_OPAQUE_STRING_beach_playerhind_attack_target_player = 0x1380,
  SCR_OPAQUE_STRING_beach_reveal_turn_off_mix_snapshot = 0x1381,
  SCR_OPAQUE_STRING_beach_runners = 0x1382,
  SCR_OPAQUE_STRING_beach_sequence_bunker_new = 0x1383,
  SCR_OPAQUE_STRING_beach_sequence_trenches = 0x1384,
  SCR_OPAQUE_STRING_beach_ship_ambient_artillery = 0x1385,
  SCR_OPAQUE_STRING_beach_ship_phalanx_start = 0x1386,
  SCR_OPAQUE_STRING_beach_ship_phalanx_system = 0x1387,
  SCR_OPAQUE_STRING_beach_ship_phalanx_think = 0x1389,
  SCR_OPAQUE_STRING_beach_tank_balcony_logic = 0x138B,
  SCR_OPAQUE_STRING_beach_tank_balcony_stumble = 0x138C,
  SCR_OPAQUE_STRING_beach_tank_balcony_stumbler_notetrack = 0x138D,
  SCR_OPAQUE_STRING_beach_tower_runners_off = 0x138E,
  SCR_OPAQUE_STRING_beach_tower_runners_on = 0x138F,
  SCR_OPAQUE_STRING_beach_trenches_combat = 0x1390,
  SCR_OPAQUE_STRING_beach_trenches_combat_part2 = 0x1391,
  SCR_OPAQUE_STRING_beach_trenches_dialogue = 0x1392,
  SCR_OPAQUE_STRING_beach_trenches_part2_dialogue = 0x1393,
  SCR_OPAQUE_STRING_beach_vehicle_default = 0x1394,
  SCR_OPAQUE_STRING_beach_wave1_ai = 0x1395,
  SCR_OPAQUE_STRING_beach_wave1_artillery_drones = 0x1397,
  SCR_OPAQUE_STRING_beach_wave1_artillery_retreat = 0x1398,
  SCR_OPAQUE_STRING_beach_wave1_dialog = 0x1399,
  SCR_OPAQUE_STRING_beach_wave1_enemy_drones = 0x139B,
  SCR_OPAQUE_STRING_beach_wave1_hind_flybys = 0x139C,
  SCR_OPAQUE_STRING_beach_wave1_logic = 0x139D,
  SCR_OPAQUE_STRING_beach_wave2_dialogue = 0x139E,
  SCR_OPAQUE_STRING_beach_wave2_inithinds = 0x139F,
  SCR_OPAQUE_STRING_beach_wave2_logic = 0x13A0,
  SCR_OPAQUE_STRING_beach_wave2_playerhind_deathfunc = 0x13A1,
  SCR_OPAQUE_STRING_beach_wave2_playerhind_evade = 0x13A2,
  SCR_OPAQUE_STRING_beach_wave2_playerhind_path_logic = 0x13A5,
  SCR_OPAQUE_STRING_beach_wave2_playerhind_pathing = 0x13A6,
  SCR_OPAQUE_STRING_beach_wave2_vehicle_watcher = 0x13A8,
  SCR_OPAQUE_STRING_beach_wave3_dialogue = 0x13A9,
  SCR_OPAQUE_STRING_beach_wave3_logic = 0x13AA,
  SCR_OPAQUE_STRING_beach_wave3_tank_dropoff = 0x13AB,
  SCR_OPAQUE_STRING_beach_wave3_tank_setup = 0x13AC,
  SCR_OPAQUE_STRING_beachfronelinedrones = 0x13AD,
  SCR_OPAQUE_STRING_beachhinds = 0x13AF,
  SCR_OPAQUE_STRING_beachlander = 0x13B0,
  SCR_OPAQUE_STRING_beachtanks = 0x13B1,
  SCR_OPAQUE_STRING_beforestairanim = 0x13B4,
  SCR_OPAQUE_STRING_begin_anim_reach = 0x13B6,
  SCR_OPAQUE_STRING_begin_atrium = 0x13B7,
  SCR_OPAQUE_STRING_begin_building_entry = 0x13BB,
  SCR_OPAQUE_STRING_begin_checkpoint = 0x13BE,
  SCR_OPAQUE_STRING_begin_combat = 0x13C0,
  SCR_OPAQUE_STRING_begin_courtyard = 0x13C2,
  SCR_OPAQUE_STRING_begin_deck_combat = 0x13C3,
  SCR_OPAQUE_STRING_begin_deck_transition = 0x13C5,
  SCR_OPAQUE_STRING_begin_deck_victory = 0x13C6,
  SCR_OPAQUE_STRING_begin_defend_blowdoors1 = 0x13C8,
  SCR_OPAQUE_STRING_begin_defend_blowdoors2 = 0x13C9,
  SCR_OPAQUE_STRING_begin_defend_plat = 0x13CB,
  SCR_OPAQUE_STRING_begin_defend_zodiac = 0x13CD,
  SCR_OPAQUE_STRING_begin_drive_in = 0x13CE,
  SCR_OPAQUE_STRING_begin_exfil_tank = 0x13D2,
  SCR_OPAQUE_STRING_begin_finale = 0x13D3,
  SCR_OPAQUE_STRING_begin_garden = 0x13D4,
  SCR_OPAQUE_STRING_begin_hvt_test = 0x13D6,
  SCR_OPAQUE_STRING_begin_interior_cqb = 0x13D9,
  SCR_OPAQUE_STRING_begin_interior_vault_scene = 0x13DA,
  SCR_OPAQUE_STRING_begin_intro = 0x13DB,
  SCR_OPAQUE_STRING_begin_inverted_rappel = 0x13DC,
  SCR_OPAQUE_STRING_begin_rail_vo = 0x13E1,
  SCR_OPAQUE_STRING_begin_rappel = 0x13E2,
  SCR_OPAQUE_STRING_begin_rappel_stealth = 0x13E3,
  SCR_OPAQUE_STRING_begin_rooftop_intro = 0x13E4,
  SCR_OPAQUE_STRING_begin_rooftop_shoot = 0x13E5,
  SCR_OPAQUE_STRING_begin_run_to_sparrow = 0x13E6,
  SCR_OPAQUE_STRING_begin_semtex_grenade_tracking = 0x13E7,
  SCR_OPAQUE_STRING_begin_shadow_kill = 0x13E8,
  SCR_OPAQUE_STRING_begin_slow_intro = 0x13E9,
  SCR_OPAQUE_STRING_begin_stairwell = 0x13EA,
  SCR_OPAQUE_STRING_begin_traverse = 0x13ED,
  SCR_OPAQUE_STRING_begin_zipline = 0x13EF,
  SCR_OPAQUE_STRING_beginairdropmarkertracking = 0x13F0,
  SCR_OPAQUE_STRING_beginairdropviamarker = 0x13F1,
  SCR_OPAQUE_STRING_beginclasschoice = 0x13F3,
  SCR_OPAQUE_STRING_begincustomevent = 0x13F4,
  SCR_OPAQUE_STRING_begingrenadetracking = 0x13F6,
  SCR_OPAQUE_STRING_beginharrier = 0x13F7,
  SCR_OPAQUE_STRING_beginningoflevelsave = 0x13F8,
  SCR_OPAQUE_STRING_beginsmokegrenadetracking = 0x13FA,
  SCR_OPAQUE_STRING_beginteamchoice = 0x13FB,
  SCR_OPAQUE_STRING_behavior = 0x13FC,
  SCR_OPAQUE_STRING_being_charged = 0x13FD,
  SCR_OPAQUE_STRING_beingartilleryshellshocked = 0x13FF,
  SCR_OPAQUE_STRING_beingdestroyed = 0x1400,
  SCR_OPAQUE_STRING_beingrevived = 0x1401,
  SCR_OPAQUE_STRING_belowcumulativepainthreshold = 0x1402,
  SCR_OPAQUE_STRING_bestminitarget = 0x1404,
  SCR_OPAQUE_STRING_bestspawnflag = 0x1405,
  SCR_OPAQUE_STRING_better = 0x1407,
  SCR_OPAQUE_STRING_betty_tutorial_given = 0x1408,
  SCR_OPAQUE_STRING_bfirstmoveanim = 0x140A,
  SCR_OPAQUE_STRING_bg = 0x140B,
  SCR_OPAQUE_STRING_bg_loop_sound = 0x140C,
  SCR_OPAQUE_STRING_bg_rog_hit = 0x140D,
  SCR_OPAQUE_STRING_bg_rog_impact = 0x140E,
  SCR_OPAQUE_STRING_bg_viewbobmax = 0x140F,
  SCR_OPAQUE_STRING_bg_weaponbobamplitudebase = 0x1410,
  SCR_OPAQUE_STRING_bg_zodiac_respawn = 0x1411,
  SCR_OPAQUE_STRING_bhasgunwhileriding = 0x1414,
  SCR_OPAQUE_STRING_bhasnopath = 0x1415,
  SCR_OPAQUE_STRING_bidlehitreaction = 0x1416,
  SCR_OPAQUE_STRING_bidlelooking = 0x1417,
  SCR_OPAQUE_STRING_big_dish_fall = 0x1418,
  SCR_OPAQUE_STRING_big_message = 0x1419,
  SCR_OPAQUE_STRING_big_wave_2 = 0x141A,
  SCR_OPAQUE_STRING_big_wave_addl_effects = 0x141B,
  SCR_OPAQUE_STRING_big_wreck_2_dialogue = 0x141C,
  SCR_OPAQUE_STRING_big_wreck_2_setup = 0x141D,
  SCR_OPAQUE_STRING_big_wreck_baker_stealth = 0x141E,
  SCR_OPAQUE_STRING_big_wreck_dialogue = 0x1420,
  SCR_OPAQUE_STRING_big_wreck_encounter = 0x1421,
  SCR_OPAQUE_STRING_big_wreck_kill_when_outside = 0x1423,
  SCR_OPAQUE_STRING_big_wreck_setup = 0x1424,
  SCR_OPAQUE_STRING_big_wreck_shark = 0x1425,
  SCR_OPAQUE_STRING_big_wreck_shark_baker_teleport = 0x1426,
  SCR_OPAQUE_STRING_big_wreck_tilt = 0x1427,
  SCR_OPAQUE_STRING_big_wreck_track_player_gunfire = 0x1428,
  SCR_OPAQUE_STRING_bigjump = 0x142A,
  SCR_OPAQUE_STRING_bigjump_player_blend_to_anim = 0x142B,
  SCR_OPAQUE_STRING_bigjump_timedelta = 0x142C,
  SCR_OPAQUE_STRING_bigmissile1 = 0x142D,
  SCR_OPAQUE_STRING_bike = 0x142E,
  SCR_OPAQUE_STRING_bike_avoids_obstacles = 0x1430,
  SCR_OPAQUE_STRING_bike_death_score = 0x1431,
  SCR_OPAQUE_STRING_bike_drives_path = 0x1432,
  SCR_OPAQUE_STRING_bike_ent_wipe_out_check = 0x1433,
  SCR_OPAQUE_STRING_bike_randomly_changes_lanes = 0x1434,
  SCR_OPAQUE_STRING_bike_turns = 0x1436,
  SCR_OPAQUE_STRING_bin_failsafe = 0x1437,
  SCR_OPAQUE_STRING_binding = 0x1438,
  SCR_OPAQUE_STRING_bink_is_paused = 0x143A,
  SCR_OPAQUE_STRING_bink_percentage = 0x143B,
  SCR_OPAQUE_STRING_bink_start_time = 0x143C,
  SCR_OPAQUE_STRING_binoc_target = 0x143D,
  SCR_OPAQUE_STRING_binocular_body_features_left = 0x143E,
  SCR_OPAQUE_STRING_binocular_face_scanning = 0x1440,
  SCR_OPAQUE_STRING_binocular_face_scanning_data = 0x1441,
  SCR_OPAQUE_STRING_binocular_face_scanning_lines_complete = 0x1443,
  SCR_OPAQUE_STRING_binocular_profile_materials = 0x1446,
  SCR_OPAQUE_STRING_binocular_reticle_target_reaction = 0x1448,
  SCR_OPAQUE_STRING_binocular_status_update = 0x1449,
  SCR_OPAQUE_STRING_binocular_target = 0x144A,
  SCR_OPAQUE_STRING_binocular_zoom_levels = 0x144B,
  SCR_OPAQUE_STRING_binoculars_angles_display = 0x144E,
  SCR_OPAQUE_STRING_binoculars_calculate_range = 0x144F,
  SCR_OPAQUE_STRING_binoculars_clear_hud = 0x1450,
  SCR_OPAQUE_STRING_binoculars_default_zoom_level = 0x1452,
  SCR_OPAQUE_STRING_binoculars_hide_deactive_hint = 0x1454,
  SCR_OPAQUE_STRING_binoculars_hide_hint = 0x1455,
  SCR_OPAQUE_STRING_binoculars_hud = 0x1456,
  SCR_OPAQUE_STRING_binoculars_hud_item = 0x1457,
  SCR_OPAQUE_STRING_binoculars_init = 0x1458,
  SCR_OPAQUE_STRING_binoculars_linked_to_target = 0x145A,
  SCR_OPAQUE_STRING_binoculars_lock_to_target = 0x145B,
  SCR_OPAQUE_STRING_binoculars_monitor_scanning = 0x145C,
  SCR_OPAQUE_STRING_binoculars_monitor_scanning_button = 0x145D,
  SCR_OPAQUE_STRING_binoculars_pip_update_position = 0x1461,
  SCR_OPAQUE_STRING_binoculars_remove_target_on_death = 0x1462,
  SCR_OPAQUE_STRING_binoculars_reticle_lerp_to_tag = 0x1463,
  SCR_OPAQUE_STRING_binoculars_scan_for_targets = 0x1464,
  SCR_OPAQUE_STRING_binoculars_scan_target = 0x1465,
  SCR_OPAQUE_STRING_binoculars_scan_target_points = 0x1466,
  SCR_OPAQUE_STRING_binoculars_set_default_zoom_level = 0x1468,
  SCR_OPAQUE_STRING_binoculars_set_vision_set = 0x1469,
  SCR_OPAQUE_STRING_binoculars_trace = 0x146B,
  SCR_OPAQUE_STRING_binoculars_vision_set = 0x146D,
  SCR_OPAQUE_STRING_binoculars_zoom_display = 0x146E,
  SCR_OPAQUE_STRING_binoculars_zooming = 0x146F,
  SCR_OPAQUE_STRING_bird_fly = 0x1471,
  SCR_OPAQUE_STRING_bird_fx = 0x1473,
  SCR_OPAQUE_STRING_bird_model = 0x1475,
  SCR_OPAQUE_STRING_bird_sit = 0x1476,
  SCR_OPAQUE_STRING_bird_startle = 0x1477,
  SCR_OPAQUE_STRING_bird_waitfordamage = 0x1478,
  SCR_OPAQUE_STRING_birdexists = 0x1479,
  SCR_OPAQUE_STRING_birdmodel_anims = 0x147A,
  SCR_OPAQUE_STRING_birds = 0x147B,
  SCR_OPAQUE_STRING_birds_createents = 0x147C,
  SCR_OPAQUE_STRING_birds_finishbirdtypesetup = 0x147F,
  SCR_OPAQUE_STRING_birds_fly = 0x1480,
  SCR_OPAQUE_STRING_birds_get_last_takeoff = 0x1482,
  SCR_OPAQUE_STRING_birds_isperchsafe = 0x1483,
  SCR_OPAQUE_STRING_birds_loadfromstruct = 0x1484,
  SCR_OPAQUE_STRING_birds_on_baddy = 0x1485,
  SCR_OPAQUE_STRING_birds_path_move_first_point = 0x1486,
  SCR_OPAQUE_STRING_birds_perchdangertrigger = 0x1487,
  SCR_OPAQUE_STRING_birds_perchsetuppath = 0x1489,
  SCR_OPAQUE_STRING_birds_savetostruct = 0x148B,
  SCR_OPAQUE_STRING_birds_savetostructandwaitfortriggerstart = 0x148C,
  SCR_OPAQUE_STRING_birds_setup = 0x148E,
  SCR_OPAQUE_STRING_birds_setupconnectedperches = 0x148F,
  SCR_OPAQUE_STRING_birth_time = 0x1492,
  SCR_OPAQUE_STRING_bisgunner = 0x1493,
  SCR_OPAQUE_STRING_bishop = 0x1494,
  SCR_OPAQUE_STRING_bishop_in_crosshairs = 0x1497,
  SCR_OPAQUE_STRING_bishop_loop_carry_pose = 0x1498,
  SCR_OPAQUE_STRING_bishop_speaks = 0x149A,
  SCR_OPAQUE_STRING_bishop_stool = 0x149B,
  SCR_OPAQUE_STRING_bkillplayer = 0x149D,
  SCR_OPAQUE_STRING_black_fade = 0x149F,
  SCR_OPAQUE_STRING_black_ice_geyser2_pulse = 0x14A0,
  SCR_OPAQUE_STRING_black_ice_geyser_pulse = 0x14A1,
  SCR_OPAQUE_STRING_black_ice_hide_hud = 0x14A2,
  SCR_OPAQUE_STRING_black_ice_hud = 0x14A3,
  SCR_OPAQUE_STRING_black_ice_hud_actionslotshide = 0x14A4,
  SCR_OPAQUE_STRING_black_ice_hud_compass = 0x14A6,
  SCR_OPAQUE_STRING_black_ice_hud_showstance = 0x14A7,
  SCR_OPAQUE_STRING_black_ice_show_previous_hud = 0x14A8,
  SCR_OPAQUE_STRING_black_screen_vo = 0x14AA,
  SCR_OPAQUE_STRING_blackbox_alienkilled = 0x14AB,
  SCR_OPAQUE_STRING_blackbox_endgame = 0x14AC,
  SCR_OPAQUE_STRING_blackbox_endgame_score = 0x14AD,
  SCR_OPAQUE_STRING_blackbox_laststand = 0x14AE,
  SCR_OPAQUE_STRING_blackhawk_ally = 0x14AF,
  SCR_OPAQUE_STRING_blackhawk_countermeasure = 0x14B0,
  SCR_OPAQUE_STRING_blackhawk_idle_next_to_factory = 0x14B2,
  SCR_OPAQUE_STRING_blackhawk_into_position = 0x14B3,
  SCR_OPAQUE_STRING_blackhawk_landing = 0x14B4,
  SCR_OPAQUE_STRING_blackhawk_path_to_end = 0x14B5,
  SCR_OPAQUE_STRING_blackhawk_unloads_and_takes_off = 0x14B6,
  SCR_OPAQUE_STRING_blackice_exfil_music = 0x14B7,
  SCR_OPAQUE_STRING_blackice_exfil_stinger_music = 0x14B8,
  SCR_OPAQUE_STRING_blackice_ice_chunks_truck = 0x14B9,
  SCR_OPAQUE_STRING_blackice_locations = 0x14BA,
  SCR_OPAQUE_STRING_blackice_pre_ascend_music = 0x14BB,
  SCR_OPAQUE_STRING_blackout = 0x14BC,
  SCR_OPAQUE_STRING_blackout_50 = 0x14BD,
  SCR_OPAQUE_STRING_blackout_enemy1and2_react_anims = 0x14BE,
  SCR_OPAQUE_STRING_blackout_enemy3 = 0x14BF,
  SCR_OPAQUE_STRING_blackout_enemy45 = 0x14C0,
  SCR_OPAQUE_STRING_blackout_loop_anims = 0x14C1,
  SCR_OPAQUE_STRING_blackout_moment_anims = 0x14C2,
  SCR_OPAQUE_STRING_blackout_no_blur = 0x14C4,
  SCR_OPAQUE_STRING_blackscreen = 0x14C6,
  SCR_OPAQUE_STRING_blackscreen_intro = 0x14C7,
  SCR_OPAQUE_STRING_blank = 0x14C8,
  SCR_OPAQUE_STRING_blast_shield = 0x14C9,
  SCR_OPAQUE_STRING_blastshieldclamp = 0x14CB,
  SCR_OPAQUE_STRING_blastshieldmod = 0x14CC,
  SCR_OPAQUE_STRING_blastshieldusetracker = 0x14CD,
  SCR_OPAQUE_STRING_blend_droppitch = 0x14CE,
  SCR_OPAQUE_STRING_blend_link_over_time = 0x14CF,
  SCR_OPAQUE_STRING_blend_movespeedscale = 0x14D0,
  SCR_OPAQUE_STRING_blend_movespeedscale_custom = 0x14D1,
  SCR_OPAQUE_STRING_blend_movespeedscale_default = 0x14D2,
  SCR_OPAQUE_STRING_blend_movespeedscale_percent = 0x14D3,
  SCR_OPAQUE_STRING_blend_player_position = 0x14D4,
  SCR_OPAQUE_STRING_blend_player_to_arms = 0x14D5,
  SCR_OPAQUE_STRING_blend_struct = 0x14D6,
  SCR_OPAQUE_STRING_blend_to_exploder = 0x14D9,
  SCR_OPAQUE_STRING_blend_wind_setting_internal = 0x14DA,
  SCR_OPAQUE_STRING_blend_zones = 0x14DB,
  SCR_OPAQUE_STRING_blended_link = 0x14DE,
  SCR_OPAQUE_STRING_blendintocrouchrun = 0x14DF,
  SCR_OPAQUE_STRING_blendintocrouchwalk = 0x14E0,
  SCR_OPAQUE_STRING_blendintostandrun = 0x14E1,
  SCR_OPAQUE_STRING_blendintostandwalk = 0x14E2,
  SCR_OPAQUE_STRING_blendtreeanims = 0x14E3,
  SCR_OPAQUE_STRING_blindfire = 0x14E4,
  SCR_OPAQUE_STRING_blinkinglightfx = 0x14E5,
  SCR_OPAQUE_STRING_blitz_allies_trigger_origin = 0x14E8,
  SCR_OPAQUE_STRING_blitz_axis_trigger_origin = 0x14E9,
  SCR_OPAQUE_STRING_blitzgetteam = 0x14EA,
  SCR_OPAQUE_STRING_block_ally_cornerwaving = 0x14EB,
  SCR_OPAQUE_STRING_block_ally_sneak_to_node = 0x14EC,
  SCR_OPAQUE_STRING_block_garage_exit = 0x14EE,
  SCR_OPAQUE_STRING_block_off_road_during_convoy = 0x14EF,
  SCR_OPAQUE_STRING_block_until_at_struct = 0x14F0,
  SCR_OPAQUE_STRING_block_until_fully_stopped_and_idle = 0x14F1,
  SCR_OPAQUE_STRING_blockarea = 0x14F3,
  SCR_OPAQUE_STRING_blockentsinarea = 0x14F4,
  SCR_OPAQUE_STRING_blocker_hive_active = 0x14F5,
  SCR_OPAQUE_STRING_blocker_hive_burn = 0x14F6,
  SCR_OPAQUE_STRING_blocker_hive_chopper_hp_bar = 0x14F7,
  SCR_OPAQUE_STRING_blocker_hive_cycle = 0x14F8,
  SCR_OPAQUE_STRING_blocker_hive_hp_bar = 0x14F9,
  SCR_OPAQUE_STRING_blocker_hive_pain_monitor = 0x14FA,
  SCR_OPAQUE_STRING_blockgoalpos = 0x14FD,
  SCR_OPAQUE_STRING_blocking = 0x14FE,
  SCR_OPAQUE_STRING_blockingpain = 0x14FF,
  SCR_OPAQUE_STRING_blockplayeruav = 0x1500,
  SCR_OPAQUE_STRING_blockweapondrops = 0x1501,
  SCR_OPAQUE_STRING_blood_splat_on_screen = 0x1502,
  SCR_OPAQUE_STRING_bloodrushregenhealthmod = 0x1505,
  SCR_OPAQUE_STRING_bloodrushregenspeedmod = 0x1506,
  SCR_OPAQUE_STRING_bloodsplateffect = 0x1507,
  SCR_OPAQUE_STRING_bloody_death = 0x1508,
  SCR_OPAQUE_STRING_blowdoors = 0x150C,
  SCR_OPAQUE_STRING_blowit_beep = 0x150D,
  SCR_OPAQUE_STRING_blowout_goalradius_on_pathend = 0x150E,
  SCR_OPAQUE_STRING_blue = 0x150F,
  SCR_OPAQUE_STRING_blue_flare = 0x1510,
  SCR_OPAQUE_STRING_blur = 0x1511,
  SCR_OPAQUE_STRING_blur_death = 0x1512,
  SCR_OPAQUE_STRING_blur_pulse = 0x1513,
  SCR_OPAQUE_STRING_blur_sine = 0x1514,
  SCR_OPAQUE_STRING_blurview = 0x1515,
  SCR_OPAQUE_STRING_bmantisexplosionplaying = 0x1516,
  SCR_OPAQUE_STRING_bmcd_debug_loop = 0x1517,
  SCR_OPAQUE_STRING_bmovingstraight = 0x1518,
  SCR_OPAQUE_STRING_bnoanimunload = 0x1519,
  SCR_OPAQUE_STRING_bnpcpostsoundplaying = 0x151A,
  SCR_OPAQUE_STRING_bo_enemy3 = 0x151B,
  SCR_OPAQUE_STRING_bo_enemy5 = 0x151D,
  SCR_OPAQUE_STRING_boat2_in_sounds = 0x1520,
  SCR_OPAQUE_STRING_boat_crashing_waves = 0x1521,
  SCR_OPAQUE_STRING_boat_fall_trigs = 0x1522,
  SCR_OPAQUE_STRING_boat_mginit = 0x1523,
  SCR_OPAQUE_STRING_boat_populate = 0x1524,
  SCR_OPAQUE_STRING_boat_teleport = 0x1527,
  SCR_OPAQUE_STRING_boat_vo = 0x1529,
  SCR_OPAQUE_STRING_boats = 0x152A,
  SCR_OPAQUE_STRING_boats_struct = 0x152B,
  SCR_OPAQUE_STRING_bob_axis = 0x152C,
  SCR_OPAQUE_STRING_bob_mask = 0x152D,
  SCR_OPAQUE_STRING_bob_value = 0x152F,
  SCR_OPAQUE_STRING_bobbing_actor = 0x1530,
  SCR_OPAQUE_STRING_bobbing_jitter_cleanup = 0x1532,
  SCR_OPAQUE_STRING_bobbing_object = 0x1533,
  SCR_OPAQUE_STRING_bobbing_ripple = 0x1535,
  SCR_OPAQUE_STRING_bobbing_updown = 0x1536,
  SCR_OPAQUE_STRING_bobcat = 0x1537,
  SCR_OPAQUE_STRING_bodies = 0x1538,
  SCR_OPAQUE_STRING_body_ext = 0x153A,
  SCR_OPAQUE_STRING_body_is_falling = 0x153C,
  SCR_OPAQUE_STRING_bodyarmorhp = 0x153D,
  SCR_OPAQUE_STRING_bodyindex = 0x153E,
  SCR_OPAQUE_STRING_bog_style_mortar = 0x1540,
  SCR_OPAQUE_STRING_bog_style_mortar_cleanup = 0x1542,
  SCR_OPAQUE_STRING_bog_style_mortar_cooldown = 0x1543,
  SCR_OPAQUE_STRING_bog_style_mortar_explode = 0x1544,
  SCR_OPAQUE_STRING_bog_style_mortar_off = 0x1545,
  SCR_OPAQUE_STRING_bog_style_mortar_on = 0x1546,
  SCR_OPAQUE_STRING_bog_style_mortar_think = 0x1547,
  SCR_OPAQUE_STRING_bokeh_ent = 0x154A,
  SCR_OPAQUE_STRING_bokehdots_audition_test = 0x154B,
  SCR_OPAQUE_STRING_bold_dog_jeep = 0x154C,
  SCR_OPAQUE_STRING_bolthit = 0x154D,
  SCR_OPAQUE_STRING_bomb = 0x154E,
  SCR_OPAQUE_STRING_bomb_squad = 0x154F,
  SCR_OPAQUE_STRING_bombdefusetrig = 0x1552,
  SCR_OPAQUE_STRING_bombexploded = 0x1554,
  SCR_OPAQUE_STRING_bombowner = 0x1556,
  SCR_OPAQUE_STRING_bombplanted = 0x1557,
  SCR_OPAQUE_STRING_bombplantedtime = 0x1558,
  SCR_OPAQUE_STRING_bombsquadicon = 0x155A,
  SCR_OPAQUE_STRING_bombsquadicons = 0x155B,
  SCR_OPAQUE_STRING_bombsquadmodel = 0x155D,
  SCR_OPAQUE_STRING_bombsquadvisibilityupdater = 0x155E,
  SCR_OPAQUE_STRING_bombsquadwaiter_missilefire = 0x155F,
  SCR_OPAQUE_STRING_bombstrike = 0x1560,
  SCR_OPAQUE_STRING_bombtimer = 0x1561,
  SCR_OPAQUE_STRING_bombwatcher = 0x1563,
  SCR_OPAQUE_STRING_bombzones = 0x1564,
  SCR_OPAQUE_STRING_bone = 0x1565,
  SCR_OPAQUE_STRING_boneyard_style_heli_missile_attack = 0x1567,
  SCR_OPAQUE_STRING_bool = 0x156A,
  SCR_OPAQUE_STRING_border = 0x156B,
  SCR_OPAQUE_STRING_border_thickness = 0x156C,
  SCR_OPAQUE_STRING_borescope = 0x156E,
  SCR_OPAQUE_STRING_bot = 0x1571,
  SCR_OPAQUE_STRING_bot_3d_sighting_model = 0x1572,
  SCR_OPAQUE_STRING_bot_3d_sighting_model_thread = 0x1573,
  SCR_OPAQUE_STRING_bot_abort_tactical_goal = 0x1574,
  SCR_OPAQUE_STRING_bot_add_ambush_time_delayed = 0x1575,
  SCR_OPAQUE_STRING_bot_add_to_bot_damage_targets = 0x1577,
  SCR_OPAQUE_STRING_bot_add_to_bot_level_targets = 0x1578,
  SCR_OPAQUE_STRING_bot_add_to_bot_use_targets = 0x1579,
  SCR_OPAQUE_STRING_bot_allowed_to_use_killstreaks = 0x157A,
  SCR_OPAQUE_STRING_bot_ambush_end = 0x157B,
  SCR_OPAQUE_STRING_bot_attachment_reticle = 0x157D,
  SCR_OPAQUE_STRING_bot_attachmenttable = 0x157E,
  SCR_OPAQUE_STRING_bot_balance_personality = 0x157F,
  SCR_OPAQUE_STRING_bot_body_is_dead = 0x1580,
  SCR_OPAQUE_STRING_bot_bots_enabled_or_added = 0x1581,
  SCR_OPAQUE_STRING_bot_cache_entrances = 0x1582,
  SCR_OPAQUE_STRING_bot_cache_entrances_to_bombzones = 0x1583,
  SCR_OPAQUE_STRING_bot_cache_entrances_to_flags_or_radios = 0x1584,
  SCR_OPAQUE_STRING_bot_can_revive = 0x1585,
  SCR_OPAQUE_STRING_bot_can_use_aa_launcher = 0x1586,
  SCR_OPAQUE_STRING_bot_can_use_air_superiority = 0x1587,
  SCR_OPAQUE_STRING_bot_can_use_ball_drone = 0x1588,
  SCR_OPAQUE_STRING_bot_can_use_box_by_type = 0x1589,
  SCR_OPAQUE_STRING_bot_can_use_point_in_defend = 0x158B,
  SCR_OPAQUE_STRING_bot_capture_zone = 0x158D,
  SCR_OPAQUE_STRING_bot_capture_zone_get_furthest_distance = 0x158E,
  SCR_OPAQUE_STRING_bot_check_team_is_using_position = 0x158F,
  SCR_OPAQUE_STRING_bot_choose_difficulty_for_default = 0x1590,
  SCR_OPAQUE_STRING_bot_chosen_difficulty = 0x1591,
  SCR_OPAQUE_STRING_bot_class = 0x1592,
  SCR_OPAQUE_STRING_bot_client_counts = 0x1593,
  SCR_OPAQUE_STRING_bot_connect_monitor = 0x1594,
  SCR_OPAQUE_STRING_bot_control_heli = 0x1595,
  SCR_OPAQUE_STRING_bot_control_heli_main_move_loop = 0x1596,
  SCR_OPAQUE_STRING_bot_control_heli_pilot = 0x1597,
  SCR_OPAQUE_STRING_bot_control_heli_sniper = 0x1598,
  SCR_OPAQUE_STRING_bot_control_odin = 0x1599,
  SCR_OPAQUE_STRING_bot_control_vanguard = 0x159D,
  SCR_OPAQUE_STRING_bot_crate_is_command_goal = 0x159E,
  SCR_OPAQUE_STRING_bot_crate_valid = 0x159F,
  SCR_OPAQUE_STRING_bot_damage_callback = 0x15A0,
  SCR_OPAQUE_STRING_bot_defend_get_random_entrance_point_for_current_area = 0x15A3,
  SCR_OPAQUE_STRING_bot_defend_stop = 0x15A5,
  SCR_OPAQUE_STRING_bot_defend_think = 0x15A6,
  SCR_OPAQUE_STRING_bot_defending = 0x15A7,
  SCR_OPAQUE_STRING_bot_defending_center = 0x15A8,
  SCR_OPAQUE_STRING_bot_defending_radius = 0x15AB,
  SCR_OPAQUE_STRING_bot_defending_trigger = 0x15AC,
  SCR_OPAQUE_STRING_bot_defending_type = 0x15AD,
  SCR_OPAQUE_STRING_bot_disable_tactical_goals = 0x15B0,
  SCR_OPAQUE_STRING_bot_draw_circle = 0x15B1,
  SCR_OPAQUE_STRING_bot_draw_cylinder = 0x15B2,
  SCR_OPAQUE_STRING_bot_draw_cylinder_think = 0x15B3,
  SCR_OPAQUE_STRING_bot_enable_tactical_goals = 0x15B4,
  SCR_OPAQUE_STRING_bot_end_control_on_respawn = 0x15B5,
  SCR_OPAQUE_STRING_bot_end_control_on_vehicle_death = 0x15B6,
  SCR_OPAQUE_STRING_bot_end_control_watcher = 0x15B7,
  SCR_OPAQUE_STRING_bot_end_odin_watcher = 0x15B8,
  SCR_OPAQUE_STRING_bot_ent_is_anonymous_mine = 0x15B9,
  SCR_OPAQUE_STRING_bot_filter_ambush_inuse = 0x15BA,
  SCR_OPAQUE_STRING_bot_filter_ambush_vicinity = 0x15BB,
  SCR_OPAQUE_STRING_bot_find_ambush_entrances = 0x15BC,
  SCR_OPAQUE_STRING_bot_find_defend_node_func = 0x15BD,
  SCR_OPAQUE_STRING_bot_find_node_that_protects_point = 0x15BE,
  SCR_OPAQUE_STRING_bot_find_node_to_capture_point = 0x15BF,
  SCR_OPAQUE_STRING_bot_find_node_to_guard_player = 0x15C1,
  SCR_OPAQUE_STRING_bot_find_random_midpoint = 0x15C2,
  SCR_OPAQUE_STRING_bot_fireteam_buddy_search = 0x15C3,
  SCR_OPAQUE_STRING_bot_fireteam_buddy_think = 0x15C4,
  SCR_OPAQUE_STRING_bot_fireteam_buddy_up = 0x15C5,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getperk = 0x15C6,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getprimarygrenade = 0x15C7,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getsecondarygrenade = 0x15C8,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getstreak = 0x15C9,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getweapon = 0x15CA,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getweaponattachmenttwo = 0x15CC,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getweaponbuff = 0x15CD,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getweaponcamo = 0x15CE,
  SCR_OPAQUE_STRING_bot_fireteam_cac_getweaponreticle = 0x15CF,
  SCR_OPAQUE_STRING_bot_fireteam_follower = 0x15D1,
  SCR_OPAQUE_STRING_bot_fireteam_loadout_class_callback = 0x15D4,
  SCR_OPAQUE_STRING_bot_fireteam_monitor_killstreak_earned = 0x15D5,
  SCR_OPAQUE_STRING_bot_fireteam_setup_callback_class = 0x15D6,
  SCR_OPAQUE_STRING_bot_fireteam_setup_callbacks = 0x15D7,
  SCR_OPAQUE_STRING_bot_free_to_move = 0x15D9,
  SCR_OPAQUE_STRING_bot_funcs = 0x15DA,
  SCR_OPAQUE_STRING_bot_gametype_chooses_class = 0x15DB,
  SCR_OPAQUE_STRING_bot_gametype_chooses_team = 0x15DC,
  SCR_OPAQUE_STRING_bot_get_client_limit = 0x15DF,
  SCR_OPAQUE_STRING_bot_get_entrances_for_stance_and_index = 0x15E0,
  SCR_OPAQUE_STRING_bot_get_grenade_ammo = 0x15E1,
  SCR_OPAQUE_STRING_bot_get_grenade_for_purpose = 0x15E2,
  SCR_OPAQUE_STRING_bot_get_heli_goal_dist_sq = 0x15E3,
  SCR_OPAQUE_STRING_bot_get_heli_slowdown_dist_sq = 0x15E4,
  SCR_OPAQUE_STRING_bot_get_known_attacker = 0x15E5,
  SCR_OPAQUE_STRING_bot_get_nodes_in_cone = 0x15E7,
  SCR_OPAQUE_STRING_bot_get_player_team = 0x15E8,
  SCR_OPAQUE_STRING_bot_get_rank_xp = 0x15E9,
  SCR_OPAQUE_STRING_bot_get_string_index_for_integer = 0x15EA,
  SCR_OPAQUE_STRING_bot_get_team_limit = 0x15EB,
  SCR_OPAQUE_STRING_bot_get_teammates_currently_defending_point = 0x15EC,
  SCR_OPAQUE_STRING_bot_get_total_gun_ammo = 0x15EE,
  SCR_OPAQUE_STRING_bot_get_zones_within_dist = 0x15EF,
  SCR_OPAQUE_STRING_bot_get_zones_within_dist_recurs = 0x15F0,
  SCR_OPAQUE_STRING_bot_goal_can_override = 0x15F1,
  SCR_OPAQUE_STRING_bot_grenade_matches_purpose = 0x15F2,
  SCR_OPAQUE_STRING_bot_guard_player = 0x15F3,
  SCR_OPAQUE_STRING_bot_has_tactical_goal = 0x15F5,
  SCR_OPAQUE_STRING_bot_heli_find_unvisited_nodes = 0x15F6,
  SCR_OPAQUE_STRING_bot_heli_nodes = 0x15F7,
  SCR_OPAQUE_STRING_bot_heli_pilot_traceoffset = 0x15F8,
  SCR_OPAQUE_STRING_bot_in_combat = 0x15F9,
  SCR_OPAQUE_STRING_bot_initialized_remote_vehicles = 0x15FA,
  SCR_OPAQUE_STRING_bot_interaction_type = 0x15FB,
  SCR_OPAQUE_STRING_bot_invalid_attachment_combos = 0x15FC,
  SCR_OPAQUE_STRING_bot_is_bodyguarding = 0x15FD,
  SCR_OPAQUE_STRING_bot_is_capturing = 0x15FE,
  SCR_OPAQUE_STRING_bot_is_defending = 0x15FF,
  SCR_OPAQUE_STRING_bot_is_defending_point = 0x1600,
  SCR_OPAQUE_STRING_bot_is_fireteam_mode = 0x1601,
  SCR_OPAQUE_STRING_bot_is_guarding_player = 0x1602,
  SCR_OPAQUE_STRING_bot_is_remote_or_linked = 0x1605,
  SCR_OPAQUE_STRING_bot_killstreak_choose_loc_enemies = 0x1606,
  SCR_OPAQUE_STRING_bot_killstreak_drop = 0x1607,
  SCR_OPAQUE_STRING_bot_killstreak_drop_hidden = 0x1609,
  SCR_OPAQUE_STRING_bot_killstreak_drop_outside = 0x160A,
  SCR_OPAQUE_STRING_bot_killstreak_get_all_outside_allies = 0x160B,
  SCR_OPAQUE_STRING_bot_killstreak_get_all_outside_enemies = 0x160C,
  SCR_OPAQUE_STRING_bot_killstreak_get_zone_allies_outside = 0x160E,
  SCR_OPAQUE_STRING_bot_killstreak_get_zone_enemies_outside = 0x160F,
  SCR_OPAQUE_STRING_bot_killstreak_is_valid_internal = 0x1610,
  SCR_OPAQUE_STRING_bot_killstreak_never_use = 0x1612,
  SCR_OPAQUE_STRING_bot_killstreak_remote_control = 0x1613,
  SCR_OPAQUE_STRING_bot_killstreak_sentry = 0x1614,
  SCR_OPAQUE_STRING_bot_killstreak_setup = 0x1615,
  SCR_OPAQUE_STRING_bot_killstreak_simple_use = 0x1616,
  SCR_OPAQUE_STRING_bot_killstreak_valid_for_specific_streaktype = 0x1617,
  SCR_OPAQUE_STRING_bot_ks_funcs = 0x161B,
  SCR_OPAQUE_STRING_bot_loadout_choose_from_attachmenttable = 0x161F,
  SCR_OPAQUE_STRING_bot_loadout_choose_from_perktable = 0x1621,
  SCR_OPAQUE_STRING_bot_loadout_choose_from_set = 0x1622,
  SCR_OPAQUE_STRING_bot_loadout_copy_from_client = 0x1626,
  SCR_OPAQUE_STRING_bot_loadout_fields = 0x1627,
  SCR_OPAQUE_STRING_bot_loadout_pick = 0x1629,
  SCR_OPAQUE_STRING_bot_loadout_set = 0x162A,
  SCR_OPAQUE_STRING_bot_loadout_setup_perks = 0x162B,
  SCR_OPAQUE_STRING_bot_loadout_setup_squad_match = 0x162C,
  SCR_OPAQUE_STRING_bot_loadout_valid_choice = 0x162D,
  SCR_OPAQUE_STRING_bot_lui_convert_team_to_int = 0x162F,
  SCR_OPAQUE_STRING_bot_map_center = 0x1631,
  SCR_OPAQUE_STRING_bot_map_max_x = 0x1632,
  SCR_OPAQUE_STRING_bot_map_max_y = 0x1633,
  SCR_OPAQUE_STRING_bot_map_min_x = 0x1635,
  SCR_OPAQUE_STRING_bot_map_min_y = 0x1636,
  SCR_OPAQUE_STRING_bot_map_min_z = 0x1637,
  SCR_OPAQUE_STRING_bot_melee_tactical_insertion_check = 0x1638,
  SCR_OPAQUE_STRING_bot_memory_goal = 0x1639,
  SCR_OPAQUE_STRING_bot_memory_goal_time = 0x163A,
  SCR_OPAQUE_STRING_bot_monitor_watch_entrances_bodyguard = 0x163D,
  SCR_OPAQUE_STRING_bot_new_tactical_goal = 0x163F,
  SCR_OPAQUE_STRING_bot_notify_streak_used = 0x1640,
  SCR_OPAQUE_STRING_bot_odin_find_target_for_airdrop = 0x1641,
  SCR_OPAQUE_STRING_bot_odin_find_target_for_rods = 0x1642,
  SCR_OPAQUE_STRING_bot_odin_get_closest_visible_outside_player = 0x1643,
  SCR_OPAQUE_STRING_bot_odin_get_player_target_point = 0x1646,
  SCR_OPAQUE_STRING_bot_odin_get_visible_outside_players = 0x1647,
  SCR_OPAQUE_STRING_bot_odin_should_airdrop_at_marker = 0x1648,
  SCR_OPAQUE_STRING_bot_odin_should_fire_flash_at_marker = 0x164A,
  SCR_OPAQUE_STRING_bot_odin_should_fire_rod_at_marker = 0x164B,
  SCR_OPAQUE_STRING_bot_odin_time_to_move = 0x164C,
  SCR_OPAQUE_STRING_bot_odin_try_airdrop = 0x164D,
  SCR_OPAQUE_STRING_bot_odin_try_flash = 0x164E,
  SCR_OPAQUE_STRING_bot_odin_try_rods = 0x164F,
  SCR_OPAQUE_STRING_bot_odin_try_smoke = 0x1650,
  SCR_OPAQUE_STRING_bot_odin_try_spawn_juggernaut = 0x1651,
  SCR_OPAQUE_STRING_bot_out_of_ammo = 0x1652,
  SCR_OPAQUE_STRING_bot_outside_gate_watch = 0x1654,
  SCR_OPAQUE_STRING_bot_perk_cost = 0x1656,
  SCR_OPAQUE_STRING_bot_perktable = 0x1657,
  SCR_OPAQUE_STRING_bot_pers_init = 0x1659,
  SCR_OPAQUE_STRING_bot_pers_update = 0x165A,
  SCR_OPAQUE_STRING_bot_pick_random_point_from_set = 0x165E,
  SCR_OPAQUE_STRING_bot_pickup_weapon = 0x1660,
  SCR_OPAQUE_STRING_bot_point_is_on_pathgrid = 0x1662,
  SCR_OPAQUE_STRING_bot_post_teleport = 0x1663,
  SCR_OPAQUE_STRING_bot_post_use_ammo_crate = 0x1664,
  SCR_OPAQUE_STRING_bot_post_use_box_of_type = 0x1665,
  SCR_OPAQUE_STRING_bot_pre_use_box_of_type = 0x1667,
  SCR_OPAQUE_STRING_bot_protect_point = 0x1669,
  SCR_OPAQUE_STRING_bot_queued_process = 0x166A,
  SCR_OPAQUE_STRING_bot_queued_process_level_thread = 0x166B,
  SCR_OPAQUE_STRING_bot_queued_process_level_thread_active = 0x166C,
  SCR_OPAQUE_STRING_bot_random_path = 0x166E,
  SCR_OPAQUE_STRING_bot_random_path_default = 0x166F,
  SCR_OPAQUE_STRING_bot_random_path_function = 0x1670,
  SCR_OPAQUE_STRING_bot_random_ranks_for_difficulty = 0x1671,
  SCR_OPAQUE_STRING_bot_register_killstreak_func = 0x1673,
  SCR_OPAQUE_STRING_bot_remove_from_bot_level_targets = 0x1674,
  SCR_OPAQUE_STRING_bot_respawn_launcher_name = 0x1675,
  SCR_OPAQUE_STRING_bot_restart_think_threads = 0x1676,
  SCR_OPAQUE_STRING_bot_rnd_prestige = 0x1677,
  SCR_OPAQUE_STRING_bot_rnd_rank = 0x1678,
  SCR_OPAQUE_STRING_bot_seek_dropped_weapon = 0x167A,
  SCR_OPAQUE_STRING_bot_send_cancel_notify = 0x167B,
  SCR_OPAQUE_STRING_bot_sentry_activate = 0x167D,
  SCR_OPAQUE_STRING_bot_sentry_add_goal = 0x167E,
  SCR_OPAQUE_STRING_bot_sentry_carried_obj = 0x1680,
  SCR_OPAQUE_STRING_bot_sentry_choose_placement = 0x1681,
  SCR_OPAQUE_STRING_bot_sentry_choose_target = 0x1682,
  SCR_OPAQUE_STRING_bot_sentry_ensure_exit = 0x1683,
  SCR_OPAQUE_STRING_bot_sentry_force_cancel = 0x1684,
  SCR_OPAQUE_STRING_bot_sentry_path_start = 0x1685,
  SCR_OPAQUE_STRING_bot_sentry_path_thread = 0x1686,
  SCR_OPAQUE_STRING_bot_set_ambush_trap = 0x1688,
  SCR_OPAQUE_STRING_bot_set_ambush_trap_wait_fire = 0x1689,
  SCR_OPAQUE_STRING_bot_set_bombzone_bottargets = 0x168A,
  SCR_OPAQUE_STRING_bot_set_difficulty = 0x168B,
  SCR_OPAQUE_STRING_bot_set_personality = 0x168D,
  SCR_OPAQUE_STRING_bot_setup_bot_targets = 0x168F,
  SCR_OPAQUE_STRING_bot_setup_callback_class = 0x1690,
  SCR_OPAQUE_STRING_bot_setup_radio_bottargets = 0x1692,
  SCR_OPAQUE_STRING_bot_shootable_target_watch = 0x1693,
  SCR_OPAQUE_STRING_bot_should_do_killcam = 0x1694,
  SCR_OPAQUE_STRING_bot_should_pickup_weapons = 0x1696,
  SCR_OPAQUE_STRING_bot_should_use_ammo_crate = 0x1697,
  SCR_OPAQUE_STRING_bot_should_use_grenade_crate = 0x1699,
  SCR_OPAQUE_STRING_bot_should_use_scavenger_bag = 0x169B,
  SCR_OPAQUE_STRING_bot_spawned_before = 0x169C,
  SCR_OPAQUE_STRING_bot_squad_lookup = 0x169D,
  SCR_OPAQUE_STRING_bot_squad_lookup_enemy = 0x169E,
  SCR_OPAQUE_STRING_bot_squad_lookup_ranked = 0x16A0,
  SCR_OPAQUE_STRING_bot_start_aa_launcher_tracking = 0x16A1,
  SCR_OPAQUE_STRING_bot_supported_killstreaks = 0x16A4,
  SCR_OPAQUE_STRING_bot_switch_to_killstreak_weapon = 0x16A5,
  SCR_OPAQUE_STRING_bot_target = 0x16A6,
  SCR_OPAQUE_STRING_bot_targets = 0x16A7,
  SCR_OPAQUE_STRING_bot_tdm_apply_commander_tactics = 0x16A8,
  SCR_OPAQUE_STRING_bot_think_crate = 0x16AC,
  SCR_OPAQUE_STRING_bot_think_crate_blocking_path = 0x16AD,
  SCR_OPAQUE_STRING_bot_think_gametype = 0x16AE,
  SCR_OPAQUE_STRING_bot_think_killstreak = 0x16AF,
  SCR_OPAQUE_STRING_bot_think_revive = 0x16B1,
  SCR_OPAQUE_STRING_bot_think_seek_dropped_weapons = 0x16B2,
  SCR_OPAQUE_STRING_bot_think_tactical_goals = 0x16B3,
  SCR_OPAQUE_STRING_bot_think_watch_enemy = 0x16B5,
  SCR_OPAQUE_STRING_bot_underground_trapped_watch = 0x16B6,
  SCR_OPAQUE_STRING_bot_usebutton_wait = 0x16B8,
  SCR_OPAQUE_STRING_bot_valid_camp_assassin = 0x16B9,
  SCR_OPAQUE_STRING_bot_validate_perk = 0x16BA,
  SCR_OPAQUE_STRING_bot_validate_reticle = 0x16BB,
  SCR_OPAQUE_STRING_bot_validate_weapon = 0x16BC,
  SCR_OPAQUE_STRING_bot_vanguard_find_unvisited_nodes = 0x16BD,
  SCR_OPAQUE_STRING_bot_vanguard_height_trace_size = 0x16BE,
  SCR_OPAQUE_STRING_bot_waittill_goal_or_fail = 0x16C5,
  SCR_OPAQUE_STRING_bot_waittill_out_of_combat_or_time = 0x16C6,
  SCR_OPAQUE_STRING_bot_waittill_using_vehicle = 0x16C7,
  SCR_OPAQUE_STRING_bot_war_think = 0x16C8,
  SCR_OPAQUE_STRING_bot_watch_manual_detonate = 0x16CB,
  SCR_OPAQUE_STRING_bot_watch_nodes = 0x16CC,
  SCR_OPAQUE_STRING_bot_weap_personality = 0x16CD,
  SCR_OPAQUE_STRING_bot_weap_statstable = 0x16CE,
  SCR_OPAQUE_STRING_botlastloadout = 0x16D0,
  SCR_OPAQUE_STRING_botlastloadoutdifficulty = 0x16D1,
  SCR_OPAQUE_STRING_botlastloadoutpersonality = 0x16D2,
  SCR_OPAQUE_STRING_botloadoutfavoritecamo = 0x16D3,
  SCR_OPAQUE_STRING_bots_disable_team_switching = 0x16D7,
  SCR_OPAQUE_STRING_bots_exist = 0x16D8,
  SCR_OPAQUE_STRING_bots_fireteam_num_classes_loaded = 0x16DA,
  SCR_OPAQUE_STRING_bots_gametype_handles_class_choice = 0x16DB,
  SCR_OPAQUE_STRING_bots_gametype_handles_team_choice = 0x16DC,
  SCR_OPAQUE_STRING_bots_ignore_team_balance = 0x16DD,
  SCR_OPAQUE_STRING_bots_notify_on_disconnect = 0x16DE,
  SCR_OPAQUE_STRING_bots_update_difficulty = 0x16E1,
  SCR_OPAQUE_STRING_bottarget = 0x16E2,
  SCR_OPAQUE_STRING_bottargets = 0x16E3,
  SCR_OPAQUE_STRING_bottom = 0x16E4,
  SCR_OPAQUE_STRING_bottom_arc = 0x16E5,
  SCR_OPAQUE_STRING_bottom_missile_target = 0x16E6,
  SCR_OPAQUE_STRING_bottom_target = 0x16E7,
  SCR_OPAQUE_STRING_bottom_tower_enemies = 0x16E8,
  SCR_OPAQUE_STRING_bouncelight = 0x16E9,
  SCR_OPAQUE_STRING_boundry_radius_cache = 0x16EB,
  SCR_OPAQUE_STRING_boundryradius = 0x16EC,
  SCR_OPAQUE_STRING_box_agentconnected = 0x16EE,
  SCR_OPAQUE_STRING_box_disableplayeruse = 0x16EF,
  SCR_OPAQUE_STRING_box_enableplayeruse = 0x16F0,
  SCR_OPAQUE_STRING_box_handledamage = 0x16F1,
  SCR_OPAQUE_STRING_box_handledeath = 0x16F2,
  SCR_OPAQUE_STRING_box_handledeathdamage = 0x16F3,
  SCR_OPAQUE_STRING_box_handleownerdisconnect = 0x16F4,
  SCR_OPAQUE_STRING_box_modelteamupdater = 0x16F6,
  SCR_OPAQUE_STRING_box_playerjoinedteam = 0x16F9,
  SCR_OPAQUE_STRING_box_setactive = 0x16FA,
  SCR_OPAQUE_STRING_box_seticon = 0x16FB,
  SCR_OPAQUE_STRING_box_setinactive = 0x16FC,
  SCR_OPAQUE_STRING_box_should_leave_immediately = 0x16FD,
  SCR_OPAQUE_STRING_boxes = 0x1702,
  SCR_OPAQUE_STRING_boxmodifydamage = 0x1704,
  SCR_OPAQUE_STRING_boxsettings = 0x1706,
  SCR_OPAQUE_STRING_boxthink = 0x1707,
  SCR_OPAQUE_STRING_boxtouchonly = 0x1708,
  SCR_OPAQUE_STRING_boxtype = 0x1709,
  SCR_OPAQUE_STRING_bp = 0x170A,
  SCR_OPAQUE_STRING_bplrpostsoundplaying = 0x170C,
  SCR_OPAQUE_STRING_branchnodes = 0x170D,
  SCR_OPAQUE_STRING_bravo1_ascend_ascender = 0x170F,
  SCR_OPAQUE_STRING_bravo1_ascend_launcher = 0x1710,
  SCR_OPAQUE_STRING_bravo2_ascend_launcher = 0x1712,
  SCR_OPAQUE_STRING_bravo_ascend = 0x1713,
  SCR_OPAQUE_STRING_bravo_ascend_anim_node = 0x1714,
  SCR_OPAQUE_STRING_bravo_ascend_rope2 = 0x1716,
  SCR_OPAQUE_STRING_bravo_ascend_rubberband = 0x1717,
  SCR_OPAQUE_STRING_bravo_ascend_rubberband_cleanup = 0x1719,
  SCR_OPAQUE_STRING_bravo_friendly_logic = 0x171B,
  SCR_OPAQUE_STRING_bravo_post_snake_cam = 0x171C,
  SCR_OPAQUE_STRING_breach_abort = 0x171E,
  SCR_OPAQUE_STRING_breach_ai_space_death = 0x1720,
  SCR_OPAQUE_STRING_breach_allies = 0x1721,
  SCR_OPAQUE_STRING_breach_ally_drones_drone_think = 0x1722,
  SCR_OPAQUE_STRING_breach_anim_struct = 0x1725,
  SCR_OPAQUE_STRING_breach_animated_door_init = 0x1726,
  SCR_OPAQUE_STRING_breach_bad_weapon_hint = 0x1728,
  SCR_OPAQUE_STRING_breach_charge_fx_activate = 0x172B,
  SCR_OPAQUE_STRING_breach_cleanup = 0x172E,
  SCR_OPAQUE_STRING_breach_damage_radius = 0x1731,
  SCR_OPAQUE_STRING_breach_damage_watch = 0x1732,
  SCR_OPAQUE_STRING_breach_dont_fire = 0x1736,
  SCR_OPAQUE_STRING_breach_door = 0x1737,
  SCR_OPAQUE_STRING_breach_door_clips = 0x1738,
  SCR_OPAQUE_STRING_breach_door_close = 0x1739,
  SCR_OPAQUE_STRING_breach_door_init = 0x173A,
  SCR_OPAQUE_STRING_breach_door_open = 0x173B,
  SCR_OPAQUE_STRING_breach_door_rig = 0x173D,
  SCR_OPAQUE_STRING_breach_doors = 0x173E,
  SCR_OPAQUE_STRING_breach_enemies_stunned = 0x1740,
  SCR_OPAQUE_STRING_breach_enemy_array = 0x1741,
  SCR_OPAQUE_STRING_breach_enemy_catch_exceptions = 0x1743,
  SCR_OPAQUE_STRING_breach_enemy_death_dmg = 0x1745,
  SCR_OPAQUE_STRING_breach_enemy_player_stab = 0x1747,
  SCR_OPAQUE_STRING_breach_enemy_ragdoll_on_death = 0x1748,
  SCR_OPAQUE_STRING_breach_enemy_setup = 0x1749,
  SCR_OPAQUE_STRING_breach_enemy_spawner_think = 0x174A,
  SCR_OPAQUE_STRING_breach_enemy_waitfor_breach_ending = 0x174E,
  SCR_OPAQUE_STRING_breach_explosion = 0x1751,
  SCR_OPAQUE_STRING_breach_explosion_notify = 0x1752,
  SCR_OPAQUE_STRING_breach_fire_straight = 0x1754,
  SCR_OPAQUE_STRING_breach_friendlies_restore_grenades = 0x1756,
  SCR_OPAQUE_STRING_breach_functions = 0x1759,
  SCR_OPAQUE_STRING_breach_fx_setup = 0x175A,
  SCR_OPAQUE_STRING_breach_grenade = 0x175B,
  SCR_OPAQUE_STRING_breach_grenade_smoke = 0x175C,
  SCR_OPAQUE_STRING_breach_group_trigger_think = 0x175D,
  SCR_OPAQUE_STRING_breach_groups = 0x175E,
  SCR_OPAQUE_STRING_breach_gun_up = 0x175F,
  SCR_OPAQUE_STRING_breach_heli_door = 0x1760,
  SCR_OPAQUE_STRING_breach_hide = 0x1761,
  SCR_OPAQUE_STRING_breach_icon = 0x1765,
  SCR_OPAQUE_STRING_breach_icon_count = 0x1766,
  SCR_OPAQUE_STRING_breach_icon_create = 0x1767,
  SCR_OPAQUE_STRING_breach_icon_fade_in = 0x1768,
  SCR_OPAQUE_STRING_breach_icon_fade_out = 0x1769,
  SCR_OPAQUE_STRING_breach_icon_think = 0x176A,
  SCR_OPAQUE_STRING_breach_icon_update = 0x176B,
  SCR_OPAQUE_STRING_breach_icon_update_is_player_in_range = 0x176C,
  SCR_OPAQUE_STRING_breach_icons = 0x176D,
  SCR_OPAQUE_STRING_breach_index = 0x176E,
  SCR_OPAQUE_STRING_breach_init = 0x176F,
  SCR_OPAQUE_STRING_breach_mines = 0x1771,
  SCR_OPAQUE_STRING_breach_missionfailed = 0x1772,
  SCR_OPAQUE_STRING_breach_nag = 0x1774,
  SCR_OPAQUE_STRING_breach_no_auto_reload = 0x1776,
  SCR_OPAQUE_STRING_breach_not_ready_hint = 0x1777,
  SCR_OPAQUE_STRING_breach_on_activate = 0x1778,
  SCR_OPAQUE_STRING_breach_on_event = 0x1779,
  SCR_OPAQUE_STRING_breach_onenduse = 0x177A,
  SCR_OPAQUE_STRING_breach_onuse = 0x177B,
  SCR_OPAQUE_STRING_breach_open_door = 0x177C,
  SCR_OPAQUE_STRING_breach_open_watch = 0x177D,
  SCR_OPAQUE_STRING_breach_origin = 0x177E,
  SCR_OPAQUE_STRING_breach_other_watch = 0x177F,
  SCR_OPAQUE_STRING_breach_outside_ambience = 0x1780,
  SCR_OPAQUE_STRING_breach_participants_ready_to_proceed = 0x1781,
  SCR_OPAQUE_STRING_breach_passive_time = 0x1783,
  SCR_OPAQUE_STRING_breach_precache = 0x1788,
  SCR_OPAQUE_STRING_breach_pt = 0x178A,
  SCR_OPAQUE_STRING_breach_reset_goaladius = 0x178E,
  SCR_OPAQUE_STRING_breach_rumble = 0x1790,
  SCR_OPAQUE_STRING_breach_set_2dicon = 0x1791,
  SCR_OPAQUE_STRING_breach_set_can_use = 0x1793,
  SCR_OPAQUE_STRING_breach_set_goaladius = 0x1794,
  SCR_OPAQUE_STRING_breach_setup = 0x1795,
  SCR_OPAQUE_STRING_breach_sfx = 0x1796,
  SCR_OPAQUE_STRING_breach_shot_blood_fx = 0x1797,
  SCR_OPAQUE_STRING_breach_show = 0x1799,
  SCR_OPAQUE_STRING_breach_spawner_setup = 0x179A,
  SCR_OPAQUE_STRING_breach_spawners = 0x179B,
  SCR_OPAQUE_STRING_breach_targets = 0x179C,
  SCR_OPAQUE_STRING_breach_think = 0x179D,
  SCR_OPAQUE_STRING_breach_too_many_enemies_hint = 0x179E,
  SCR_OPAQUE_STRING_breach_trigger_cleanup = 0x179F,
  SCR_OPAQUE_STRING_breach_use_triggers = 0x17A1,
  SCR_OPAQUE_STRING_breach_vehicles = 0x17A3,
  SCR_OPAQUE_STRING_breach_wait_move = 0x17A4,
  SCR_OPAQUE_STRING_breach_wait_nag_proc = 0x17A5,
  SCR_OPAQUE_STRING_breach_weapon = 0x17A8,
  SCR_OPAQUE_STRING_breachdonotfire = 0x17A9,
  SCR_OPAQUE_STRING_breached = 0x17AA,
  SCR_OPAQUE_STRING_breacher_think = 0x17AE,
  SCR_OPAQUE_STRING_breachers = 0x17AF,
  SCR_OPAQUE_STRING_breachfriendlies = 0x17B2,
  SCR_OPAQUE_STRING_breachfriendlies_can_teleport = 0x17B3,
  SCR_OPAQUE_STRING_breachfriendlies_grenades_empty = 0x17B4,
  SCR_OPAQUE_STRING_breaching = 0x17B6,
  SCR_OPAQUE_STRING_breaching_shots_fired = 0x17B7,
  SCR_OPAQUE_STRING_breachless_door_opens = 0x17B8,
  SCR_OPAQUE_STRING_break_cockpit_glass = 0x17BB,
  SCR_OPAQUE_STRING_break_light = 0x17BE,
  SCR_OPAQUE_STRING_break_nearest_light = 0x17BF,
  SCR_OPAQUE_STRING_break_stealth_mg = 0x17C0,
  SCR_OPAQUE_STRING_break_window = 0x17C1,
  SCR_OPAQUE_STRING_breakable_light = 0x17C2,
  SCR_OPAQUE_STRING_breaktarget = 0x17C5,
  SCR_OPAQUE_STRING_breathing_overlay = 0x17C7,
  SCR_OPAQUE_STRING_breathingmanager = 0x17C8,
  SCR_OPAQUE_STRING_bren_switchout_logic = 0x17CA,
  SCR_OPAQUE_STRING_brian = 0x17CB,
  SCR_OPAQUE_STRING_bridge_anim = 0x17D0,
  SCR_OPAQUE_STRING_bridge_begin = 0x17D1,
  SCR_OPAQUE_STRING_bridge_deploy_begin = 0x17D2,
  SCR_OPAQUE_STRING_bridge_deploy_enemy_a10_gun_dives = 0x17D3,
  SCR_OPAQUE_STRING_bridge_deploy_enemy_tanks_setup = 0x17D4,
  SCR_OPAQUE_STRING_bridge_deploy_init = 0x17D5,
  SCR_OPAQUE_STRING_bridge_destroyed = 0x17D7,
  SCR_OPAQUE_STRING_bridge_enemies = 0x17D8,
  SCR_OPAQUE_STRING_bridge_event = 0x17D9,
  SCR_OPAQUE_STRING_bridge_init = 0x17DD,
  SCR_OPAQUE_STRING_bridge_jeep_by = 0x17DE,
  SCR_OPAQUE_STRING_bridge_main = 0x17E0,
  SCR_OPAQUE_STRING_bridge_push = 0x17E1,
  SCR_OPAQUE_STRING_bridge_push_4 = 0x17E3,
  SCR_OPAQUE_STRING_bridge_scene_anims = 0x17E4,
  SCR_OPAQUE_STRING_bridge_scene_tank_anims = 0x17E5,
  SCR_OPAQUE_STRING_bridges = 0x17E8,
  SCR_OPAQUE_STRING_briefcase = 0x17E9,
  SCR_OPAQUE_STRING_bright_light_flash_into_console = 0x17EA,
  SCR_OPAQUE_STRING_bring_up_osprey = 0x17EC,
  SCR_OPAQUE_STRING_brinkofdeathkillstreak = 0x17ED,
  SCR_OPAQUE_STRING_broadcast_player_input = 0x17EE,
  SCR_OPAQUE_STRING_broken_wall_delete = 0x17F1,
  SCR_OPAQUE_STRING_broken_wall_init = 0x17F2,
  SCR_OPAQUE_STRING_broken_wall_show = 0x17F3,
  SCR_OPAQUE_STRING_broken_walls = 0x17F4,
  SCR_OPAQUE_STRING_brushmodels = 0x17FA,
  SCR_OPAQUE_STRING_bsharpturnduringsharpturn = 0x17FB,
  SCR_OPAQUE_STRING_bshootwhilemoving = 0x17FC,
  SCR_OPAQUE_STRING_bsnowmobilesstarted = 0x17FD,
  SCR_OPAQUE_STRING_bsoundlooping = 0x17FE,
  SCR_OPAQUE_STRING_bsplashplaying = 0x17FF,
  SCR_OPAQUE_STRING_bsprinton = 0x1800,
  SCR_OPAQUE_STRING_bstopbarrage = 0x1801,
  SCR_OPAQUE_STRING_btankmoving = 0x1802,
  SCR_OPAQUE_STRING_bthermalon = 0x1803,
  SCR_OPAQUE_STRING_btr_ambush = 0x1804,
  SCR_OPAQUE_STRING_btr_attack_player_on_flag = 0x1805,
  SCR_OPAQUE_STRING_btr_burst = 0x1806,
  SCR_OPAQUE_STRING_btr_by_mountainside = 0x1807,
  SCR_OPAQUE_STRING_btr_check_player_fire = 0x1808,
  SCR_OPAQUE_STRING_btr_fire_logic = 0x1809,
  SCR_OPAQUE_STRING_btr_look_logic = 0x180A,
  SCR_OPAQUE_STRING_btr_mg_off = 0x180B,
  SCR_OPAQUE_STRING_btr_sees_body = 0x180C,
  SCR_OPAQUE_STRING_btr_stop_when_not_normal = 0x180D,
  SCR_OPAQUE_STRING_btr_target_player = 0x180E,
  SCR_OPAQUE_STRING_btr_turret_follow = 0x180F,
  SCR_OPAQUE_STRING_buddyspawn = 0x1810,
  SCR_OPAQUE_STRING_bufferedstats = 0x1813,
  SCR_OPAQUE_STRING_bufferedstatsmax = 0x1814,
  SCR_OPAQUE_STRING_build_aianims = 0x1817,
  SCR_OPAQUE_STRING_build_all_treadfx = 0x1818,
  SCR_OPAQUE_STRING_build_bulletshield = 0x181A,
  SCR_OPAQUE_STRING_build_car = 0x181C,
  SCR_OPAQUE_STRING_build_chopperboss_defaults = 0x181D,
  SCR_OPAQUE_STRING_build_data_override = 0x181E,
  SCR_OPAQUE_STRING_build_death_badplace = 0x181F,
  SCR_OPAQUE_STRING_build_death_jolt_delay = 0x1820,
  SCR_OPAQUE_STRING_build_deathanim = 0x1821,
  SCR_OPAQUE_STRING_build_deathfx = 0x1822,
  SCR_OPAQUE_STRING_build_deathfx_override = 0x1823,
  SCR_OPAQUE_STRING_build_deathmodel = 0x1824,
  SCR_OPAQUE_STRING_build_elevators = 0x1829,
  SCR_OPAQUE_STRING_build_exhaust = 0x182A,
  SCR_OPAQUE_STRING_build_frontarmor = 0x182B,
  SCR_OPAQUE_STRING_build_fx = 0x182C,
  SCR_OPAQUE_STRING_build_gaz_death = 0x182D,
  SCR_OPAQUE_STRING_build_grenadeshield = 0x182E,
  SCR_OPAQUE_STRING_build_hideparts = 0x182F,
  SCR_OPAQUE_STRING_build_human_model = 0x1830,
  SCR_OPAQUE_STRING_build_humvee_anims = 0x1831,
  SCR_OPAQUE_STRING_build_is_airplane = 0x1833,
  SCR_OPAQUE_STRING_build_is_helicopter = 0x1834,
  SCR_OPAQUE_STRING_build_life = 0x1835,
  SCR_OPAQUE_STRING_build_light_override = 0x1837,
  SCR_OPAQUE_STRING_build_lynx_death = 0x1839,
  SCR_OPAQUE_STRING_build_pillageitem_array = 0x183C,
  SCR_OPAQUE_STRING_build_pillageitem_arrays = 0x183D,
  SCR_OPAQUE_STRING_build_quake = 0x183E,
  SCR_OPAQUE_STRING_build_radiusdamage = 0x183F,
  SCR_OPAQUE_STRING_build_rider_death_func = 0x1840,
  SCR_OPAQUE_STRING_build_rocket_deathfx = 0x1841,
  SCR_OPAQUE_STRING_build_rumble_unique = 0x1844,
  SCR_OPAQUE_STRING_build_shoot_shock = 0x1845,
  SCR_OPAQUE_STRING_build_single_tread = 0x1846,
  SCR_OPAQUE_STRING_build_spawn_zones = 0x1847,
  SCR_OPAQUE_STRING_build_template = 0x1849,
  SCR_OPAQUE_STRING_build_treadfx = 0x184A,
  SCR_OPAQUE_STRING_build_turret = 0x184C,
  SCR_OPAQUE_STRING_build_turrets = 0x184D,
  SCR_OPAQUE_STRING_buildalienweaponname = 0x1850,
  SCR_OPAQUE_STRING_buildalienweaponnamecamo = 0x1851,
  SCR_OPAQUE_STRING_buildbaseweaponlist = 0x1856,
  SCR_OPAQUE_STRING_buildchallengetableinfo = 0x1858,
  SCR_OPAQUE_STRING_builddot_damage = 0x1859,
  SCR_OPAQUE_STRING_builddot_ontick = 0x185A,
  SCR_OPAQUE_STRING_builddot_wait = 0x185C,
  SCR_OPAQUE_STRING_building_entry_exit_anim_struct = 0x1861,
  SCR_OPAQUE_STRING_building_entry_tv = 0x1864,
  SCR_OPAQUE_STRING_building_fall_anim_rig = 0x1865,
  SCR_OPAQUE_STRING_building_hit_fx = 0x1867,
  SCR_OPAQUE_STRING_building_slide_control_hint = 0x1869,
  SCR_OPAQUE_STRING_buildscoreboardtype = 0x186A,
  SCR_OPAQUE_STRING_buildshadowgeomopt = 0x186B,
  SCR_OPAQUE_STRING_buildweaponname = 0x186D,
  SCR_OPAQUE_STRING_buildweaponnamereticle = 0x186F,
  SCR_OPAQUE_STRING_bullet_armor = 0x1870,
  SCR_OPAQUE_STRING_bullet_attack = 0x1871,
  SCR_OPAQUE_STRING_bullet_blender = 0x1872,
  SCR_OPAQUE_STRING_bullet_caused_fuel_leaks = 0x1874,
  SCR_OPAQUE_STRING_bullet_damage_scalar = 0x1875,
  SCR_OPAQUE_STRING_bullet_holes2 = 0x1878,
  SCR_OPAQUE_STRING_bullet_holes3 = 0x1879,
  SCR_OPAQUE_STRING_bullet_pinhole_tag_fx_orgs = 0x187A,
  SCR_OPAQUE_STRING_bullet_resistance = 0x187B,
  SCR_OPAQUE_STRING_bullet_start = 0x187C,
  SCR_OPAQUE_STRING_bullet_strafe_start = 0x187D,
  SCR_OPAQUE_STRING_bullet_watcher_ambush = 0x1880,
  SCR_OPAQUE_STRING_bulletcount = 0x1881,
  SCR_OPAQUE_STRING_bulletsinclip = 0x1884,
  SCR_OPAQUE_STRING_bulletwhizbycheck_whilemoving = 0x1885,
  SCR_OPAQUE_STRING_bulletwhizbycheckloop = 0x1886,
  SCR_OPAQUE_STRING_bulletwhizbyreaction = 0x1887,
  SCR_OPAQUE_STRING_bully = 0x1888,
  SCR_OPAQUE_STRING_bully_shoots = 0x1889,
  SCR_OPAQUE_STRING_bump_player = 0x188A,
  SCR_OPAQUE_STRING_bunker_balcony_bullet_impacts = 0x188C,
  SCR_OPAQUE_STRING_bunker_balcony_bullet_impacts_think = 0x188E,
  SCR_OPAQUE_STRING_bunker_balcony_cleanup = 0x188F,
  SCR_OPAQUE_STRING_bunker_balcony_damage_state = 0x1890,
  SCR_OPAQUE_STRING_bunker_beach_ai = 0x1893,
  SCR_OPAQUE_STRING_bunker_beach_attackers = 0x1894,
  SCR_OPAQUE_STRING_bunker_beach_attackers_death = 0x1895,
  SCR_OPAQUE_STRING_bunker_beach_attackers_think = 0x1896,
  SCR_OPAQUE_STRING_bunker_beach_vehicles = 0x1897,
  SCR_OPAQUE_STRING_bunker_enemy_cover_drones = 0x1898,
  SCR_OPAQUE_STRING_bunker_final_strafe = 0x1899,
  SCR_OPAQUE_STRING_bunker_final_strafe_hind_missiles = 0x189A,
  SCR_OPAQUE_STRING_bunker_final_strafe_think = 0x189C,
  SCR_OPAQUE_STRING_bunker_mg_guy = 0x189E,
  SCR_OPAQUE_STRING_bunker_reinforcement_helis = 0x189F,
  SCR_OPAQUE_STRING_bunker_style_mortar_activate = 0x18A1,
  SCR_OPAQUE_STRING_bunker_style_mortar_on = 0x18A5,
  SCR_OPAQUE_STRING_bunker_style_mortar_think = 0x18A6,
  SCR_OPAQUE_STRING_bunker_style_mortar_trigger = 0x18A7,
  SCR_OPAQUE_STRING_bunker_trench_drone_runners = 0x18A8,
  SCR_OPAQUE_STRING_bunker_vehicle_javelin_watcher = 0x18AA,
  SCR_OPAQUE_STRING_burn_trig = 0x18AB,
  SCR_OPAQUE_STRING_burning = 0x18AC,
  SCR_OPAQUE_STRING_burnville_paratrooper_hack_loop = 0x18AF,
  SCR_OPAQUE_STRING_burst_fire_settings = 0x18B2,
  SCR_OPAQUE_STRING_burst_pause_max = 0x18B5,
  SCR_OPAQUE_STRING_burst_pause_min = 0x18B6,
  SCR_OPAQUE_STRING_burst_shots_max = 0x18B7,
  SCR_OPAQUE_STRING_burstdelay = 0x18B9,
  SCR_OPAQUE_STRING_burstfirenumshots = 0x18BA,
  SCR_OPAQUE_STRING_burstmin = 0x18BC,
  SCR_OPAQUE_STRING_burstshootanimrate = 0x18BD,
  SCR_OPAQUE_STRING_bus_movement_internal = 0x18BF,
  SCR_OPAQUE_STRING_bus_movement_model_logic = 0x18C0,
  SCR_OPAQUE_STRING_bus_movement_sounds_rumble_etc = 0x18C1,
  SCR_OPAQUE_STRING_busdust = 0x18C2,
  SCR_OPAQUE_STRING_busereadyidle = 0x18C3,
  SCR_OPAQUE_STRING_bust_thru_prep = 0x18C6,
  SCR_OPAQUE_STRING_bust_thru_prep_dog = 0x18C7,
  SCR_OPAQUE_STRING_butchdance = 0x18C8,
  SCR_OPAQUE_STRING_butchdance_combat = 0x18C9,
  SCR_OPAQUE_STRING_button_is_clicked = 0x18CA,
  SCR_OPAQUE_STRING_button_is_held = 0x18CB,
  SCR_OPAQUE_STRING_button_parse_parameters = 0x18CD,
  SCR_OPAQUE_STRING_button_pressed_from_string = 0x18CE,
  SCR_OPAQUE_STRING_button_sound = 0x18D0,
  SCR_OPAQUE_STRING_button_switch = 0x18D1,
  SCR_OPAQUE_STRING_button_toggles = 0x18D2,
  SCR_OPAQUE_STRING_buttonclick = 0x18D3,
  SCR_OPAQUE_STRING_buttonisheld = 0x18D5,
  SCR_OPAQUE_STRING_buttonpressed_internal = 0x18D6,
  SCR_OPAQUE_STRING_buttonthink = 0x18D8,
  SCR_OPAQUE_STRING_buzzkill = 0x18DA,
  SCR_OPAQUE_STRING_bwalldestroyed = 0x18DB,
  SCR_OPAQUE_STRING_bwalldestroyedsoundplayed = 0x18DC,
  SCR_OPAQUE_STRING_bypass_max_attacker_counter = 0x18DD,
  SCR_OPAQUE_STRING_bypassclasschoice = 0x18DE,
  SCR_OPAQUE_STRING_bypassclasschoicefunc = 0x18DF,
  SCR_OPAQUE_STRING_c = 0x18E0,
  SCR_OPAQUE_STRING_c130 = 0x18E1,
  SCR_OPAQUE_STRING_c130setup = 0x18E2,
  SCR_OPAQUE_STRING_c17_drops = 0x18E3,
  SCR_OPAQUE_STRING_c4_cancel_flag = 0x18E4,
  SCR_OPAQUE_STRING_c4_earthquake = 0x18E6,
  SCR_OPAQUE_STRING_c4_hint = 0x18E7,
  SCR_OPAQUE_STRING_c4_hintstring = 0x18E8,
  SCR_OPAQUE_STRING_c4_location = 0x18E9,
  SCR_OPAQUE_STRING_c4_sound_override = 0x18EA,
  SCR_OPAQUE_STRING_c4_spot_glow = 0x18EB,
  SCR_OPAQUE_STRING_c4_weaponname = 0x18EC,
  SCR_OPAQUE_STRING_c4activate = 0x18ED,
  SCR_OPAQUE_STRING_c4damage = 0x18EF,
  SCR_OPAQUE_STRING_c4death = 0x18F0,
  SCR_OPAQUE_STRING_c4deathdetonate = 0x18F1,
  SCR_OPAQUE_STRING_c4detectiontrigger = 0x18F2,
  SCR_OPAQUE_STRING_c4empdamage = 0x18F4,
  SCR_OPAQUE_STRING_c4empkillstreakwait = 0x18F5,
  SCR_OPAQUE_STRING_c4used = 0x18F7,
  SCR_OPAQUE_STRING_cac_getkillstreak = 0x18F9,
  SCR_OPAQUE_STRING_cac_getkillstreakwithtype = 0x18FA,
  SCR_OPAQUE_STRING_cac_getperk = 0x18FB,
  SCR_OPAQUE_STRING_cac_getsecondarygrenade = 0x18FD,
  SCR_OPAQUE_STRING_cac_getweapon = 0x18FE,
  SCR_OPAQUE_STRING_cac_getweaponattachment = 0x18FF,
  SCR_OPAQUE_STRING_cac_getweaponattachmenttwo = 0x1901,
  SCR_OPAQUE_STRING_cac_getweaponbuff = 0x1902,
  SCR_OPAQUE_STRING_cac_getweaponcamo = 0x1903,
  SCR_OPAQUE_STRING_cac_getweaponreticle = 0x1904,
  SCR_OPAQUE_STRING_cac_selector = 0x1906,
  SCR_OPAQUE_STRING_cache_ambient = 0x1907,
  SCR_OPAQUE_STRING_cache_ambient_element = 0x1908,
  SCR_OPAQUE_STRING_cache_ambient_event = 0x1909,
  SCR_OPAQUE_STRING_cache_mix_default = 0x190D,
  SCR_OPAQUE_STRING_cache_occlusion = 0x190E,
  SCR_OPAQUE_STRING_cache_reverb = 0x190F,
  SCR_OPAQUE_STRING_cache_timescale = 0x1910,
  SCR_OPAQUE_STRING_cache_whizby = 0x1911,
  SCR_OPAQUE_STRING_cache_zone = 0x1912,
  SCR_OPAQUE_STRING_cached = 0x1913,
  SCR_OPAQUE_STRING_cached_ambients = 0x1914,
  SCR_OPAQUE_STRING_cached_arcs = 0x1915,
  SCR_OPAQUE_STRING_cached_elems = 0x1916,
  SCR_OPAQUE_STRING_cage_guys3 = 0x1919,
  SCR_OPAQUE_STRING_cairo_church_whines = 0x191A,
  SCR_OPAQUE_STRING_cairo_scared_dialogue = 0x191B,
  SCR_OPAQUE_STRING_calc_max_last_stands = 0x191C,
  SCR_OPAQUE_STRING_calcanimstartpos = 0x191D,
  SCR_OPAQUE_STRING_calctrackingyaw = 0x191E,
  SCR_OPAQUE_STRING_calculate_and_show_hive_scores = 0x191F,
  SCR_OPAQUE_STRING_calculate_arc = 0x1920,
  SCR_OPAQUE_STRING_calculate_bezier_curve = 0x1921,
  SCR_OPAQUE_STRING_calculate_bravo_rubberband_base = 0x1922,
  SCR_OPAQUE_STRING_calculate_challenge_score = 0x1923,
  SCR_OPAQUE_STRING_calculate_current_intensity_level = 0x1924,
  SCR_OPAQUE_STRING_calculate_defend_stance = 0x1925,
  SCR_OPAQUE_STRING_calculate_discount = 0x1926,
  SCR_OPAQUE_STRING_calculate_drill_protection_score = 0x1927,
  SCR_OPAQUE_STRING_calculate_maxmovedeltainanimstate = 0x1929,
  SCR_OPAQUE_STRING_calculate_partial_hive_scores = 0x192A,
  SCR_OPAQUE_STRING_calculate_personal_skill_score = 0x192B,
  SCR_OPAQUE_STRING_calculate_players_total_end_game_score = 0x192D,
  SCR_OPAQUE_STRING_calculate_stopsoonnotifydist = 0x192E,
  SCR_OPAQUE_STRING_calculate_total_end_game_score = 0x1930,
  SCR_OPAQUE_STRING_calculateanimdata = 0x1931,
  SCR_OPAQUE_STRING_calculated_closest_point = 0x1932,
  SCR_OPAQUE_STRING_calculated_nearest_node = 0x1933,
  SCR_OPAQUE_STRING_calculatekillcamtime = 0x1934,
  SCR_OPAQUE_STRING_calculatenodeoffsetfromanimationdelta = 0x1936,
  SCR_OPAQUE_STRING_call_elevator = 0x1938,
  SCR_OPAQUE_STRING_call_fire_exploder_on_spawn = 0x1939,
  SCR_OPAQUE_STRING_call_flag_when_clacked = 0x193A,
  SCR_OPAQUE_STRING_call_in_airdrop_heli = 0x193B,
  SCR_OPAQUE_STRING_call_in_attack_heli = 0x193C,
  SCR_OPAQUE_STRING_call_in_hive_heli = 0x193D,
  SCR_OPAQUE_STRING_call_in_rescue_heli = 0x193E,
  SCR_OPAQUE_STRING_call_jolt_by_flag = 0x193F,
  SCR_OPAQUE_STRING_callairsupport = 0x1942,
  SCR_OPAQUE_STRING_callback_alienplayerdamage = 0x1943,
  SCR_OPAQUE_STRING_callback_playerconnect = 0x1947,
  SCR_OPAQUE_STRING_callback_playerdamage = 0x1948,
  SCR_OPAQUE_STRING_callback_playerdamage_internal = 0x1949,
  SCR_OPAQUE_STRING_callback_playerlaststand = 0x194C,
  SCR_OPAQUE_STRING_callback_playerlaststandalien = 0x194D,
  SCR_OPAQUE_STRING_callback_playermigrated = 0x194F,
  SCR_OPAQUE_STRING_callback_startgametype = 0x1950,
  SCR_OPAQUE_STRING_callback_vehicledamage = 0x1951,
  SCR_OPAQUE_STRING_callbackhostmigration = 0x1953,
  SCR_OPAQUE_STRING_callbackplayerdamage = 0x1955,
  SCR_OPAQUE_STRING_callbackplayerdisconnect = 0x1956,
  SCR_OPAQUE_STRING_callbackplayerkilled = 0x1957,
  SCR_OPAQUE_STRING_callbackplayerlaststand = 0x1958,
  SCR_OPAQUE_STRING_callbackplayermigrated = 0x1959,
  SCR_OPAQUE_STRING_callbackstartgametype = 0x195B,
  SCR_OPAQUE_STRING_caller = 0x195E,
  SCR_OPAQUE_STRING_calloptionalbehaviorcallback = 0x195F,
  SCR_OPAQUE_STRING_callout = 0x1960,
  SCR_OPAQUE_STRING_calloutdestroyed = 0x1961,
  SCR_OPAQUE_STRING_callouttypewillrepeat = 0x1962,
  SCR_OPAQUE_STRING_callstrike = 0x1963,
  SCR_OPAQUE_STRING_callstrike_bombeffect = 0x1965,
  SCR_OPAQUE_STRING_calm_idle_get_random = 0x1966,
  SCR_OPAQUE_STRING_cam = 0x1967,
  SCR_OPAQUE_STRING_cam_sound_sources = 0x1968,
  SCR_OPAQUE_STRING_camera = 0x1969,
  SCR_OPAQUE_STRING_camera_zoom = 0x196C,
  SCR_OPAQUE_STRING_camera_zoomout = 0x196D,
  SCR_OPAQUE_STRING_cameramodel = 0x196E,
  SCR_OPAQUE_STRING_camlanding_from_apache = 0x1970,
  SCR_OPAQUE_STRING_camp_mblur_changes = 0x1971,
  SCR_OPAQUE_STRING_camper_guy = 0x1974,
  SCR_OPAQUE_STRING_camper_time_started_hunting = 0x1975,
  SCR_OPAQUE_STRING_camper_trigger_think = 0x1976,
  SCR_OPAQUE_STRING_campfire_temp_dialog = 0x1978,
  SCR_OPAQUE_STRING_camping_needs_fallback_camp_location = 0x1979,
  SCR_OPAQUE_STRING_camtime = 0x197A,
  SCR_OPAQUE_STRING_can_activate_trap = 0x197B,
  SCR_OPAQUE_STRING_can_attempt_badpath_move = 0x197D,
  SCR_OPAQUE_STRING_can_cut_rope = 0x1980,
  SCR_OPAQUE_STRING_can_do_charge_attack = 0x1981,
  SCR_OPAQUE_STRING_can_early_melee = 0x1982,
  SCR_OPAQUE_STRING_can_leap_melee = 0x1984,
  SCR_OPAQUE_STRING_can_place_sentry = 0x1986,
  SCR_OPAQUE_STRING_can_purchase_chopper = 0x1987,
  SCR_OPAQUE_STRING_can_say_event_type = 0x1989,
  SCR_OPAQUE_STRING_can_say_soundalias = 0x198B,
  SCR_OPAQUE_STRING_can_see_attacker_for_a_bit = 0x198C,
  SCR_OPAQUE_STRING_can_see_enemy = 0x198D,
  SCR_OPAQUE_STRING_can_see_origin = 0x198E,
  SCR_OPAQUE_STRING_can_spawn_at_any_node = 0x1990,
  SCR_OPAQUE_STRING_can_spawn_meteoroid_alien = 0x1991,
  SCR_OPAQUE_STRING_can_spit_gas_cloud = 0x1992,
  SCR_OPAQUE_STRING_can_use_health = 0x1994,
  SCR_OPAQUE_STRING_canactivatefunc = 0x1995,
  SCR_OPAQUE_STRING_canal_event = 0x1996,
  SCR_OPAQUE_STRING_canbepickedup = 0x1997,
  SCR_OPAQUE_STRING_canbeplaced = 0x1998,
  SCR_OPAQUE_STRING_canbetargeted = 0x1999,
  SCR_OPAQUE_STRING_cancalloutlocation = 0x199C,
  SCR_OPAQUE_STRING_cancel_repair_on_hive_death = 0x199E,
  SCR_OPAQUE_STRING_cancelmode = 0x19A1,
  SCR_OPAQUE_STRING_cancelnukeondeath = 0x19A2,
  SCR_OPAQUE_STRING_canceluse_default_deployable_box = 0x19A4,
  SCR_OPAQUE_STRING_canceluse_dpad_airstrike = 0x19A5,
  SCR_OPAQUE_STRING_canceluse_dpad_backup_buddy = 0x19A6,
  SCR_OPAQUE_STRING_canceluse_dpad_death_machine = 0x19A7,
  SCR_OPAQUE_STRING_canceluse_dpad_glsentry = 0x19A8,
  SCR_OPAQUE_STRING_canceluse_dpad_ims = 0x19A9,
  SCR_OPAQUE_STRING_canceluse_dpad_minigun_turret = 0x19AA,
  SCR_OPAQUE_STRING_canceluse_dpad_predator = 0x19AB,
  SCR_OPAQUE_STRING_canceluse_dpad_riotshield = 0x19AC,
  SCR_OPAQUE_STRING_canceluse_dpad_sentry = 0x19AD,
  SCR_OPAQUE_STRING_canceluse_dpad_war_machine = 0x19AE,
  SCR_OPAQUE_STRING_candodge = 0x19B2,
  SCR_OPAQUE_STRING_candoflavorburst = 0x19B3,
  SCR_OPAQUE_STRING_candojumpforend = 0x19B4,
  SCR_OPAQUE_STRING_candopain = 0x19B5,
  SCR_OPAQUE_STRING_candostartmove = 0x19B6,
  SCR_OPAQUE_STRING_candoturnanim = 0x19B7,
  SCR_OPAQUE_STRING_canenttriggerplatform = 0x19B8,
  SCR_OPAQUE_STRING_canfire = 0x19B9,
  SCR_OPAQUE_STRING_cangive_booster = 0x19BC,
  SCR_OPAQUE_STRING_cangive_health = 0x19BE,
  SCR_OPAQUE_STRING_cangive_loot_blood = 0x19BF,
  SCR_OPAQUE_STRING_cangive_maxammo = 0x19C1,
  SCR_OPAQUE_STRING_cangive_offhand = 0x19C2,
  SCR_OPAQUE_STRING_cangive_self_revive = 0x19C3,
  SCR_OPAQUE_STRING_cangive_shock_ammo = 0x19C4,
  SCR_OPAQUE_STRING_cangive_slotted_explosive = 0x19C5,
  SCR_OPAQUE_STRING_cangive_throwable_weapon = 0x19C7,
  SCR_OPAQUE_STRING_canlean = 0x19CB,
  SCR_OPAQUE_STRING_canlogclient = 0x19CC,
  SCR_OPAQUE_STRING_canlogevent = 0x19CD,
  SCR_OPAQUE_STRING_canlogkillstreak = 0x19CE,
  SCR_OPAQUE_STRING_canloglife = 0x19CF,
  SCR_OPAQUE_STRING_canmovepointtopoint = 0x19D0,
  SCR_OPAQUE_STRING_cannedtraverseanims = 0x19D1,
  SCR_OPAQUE_STRING_cannonfirevfx = 0x19D3,
  SCR_OPAQUE_STRING_cannonrumble = 0x19D4,
  SCR_OPAQUE_STRING_cannotplacestring = 0x19D5,
  SCR_OPAQUE_STRING_canperformclienttraces = 0x19D6,
  SCR_OPAQUE_STRING_canpickcrate = 0x19D7,
  SCR_OPAQUE_STRING_canpickupobject = 0x19D8,
  SCR_OPAQUE_STRING_canpurchase_dpad_backup_buddy = 0x19DC,
  SCR_OPAQUE_STRING_canpurchase_dpad_death_machine = 0x19DD,
  SCR_OPAQUE_STRING_canpurchase_dpad_minigun_turret = 0x19E0,
  SCR_OPAQUE_STRING_canpurchase_dpad_predator = 0x19E1,
  SCR_OPAQUE_STRING_canpurchase_dpad_riotshield = 0x19E2,
  SCR_OPAQUE_STRING_canpurchase_dpad_team_armor = 0x19E6,
  SCR_OPAQUE_STRING_canpurchase_dpad_team_boost = 0x19E7,
  SCR_OPAQUE_STRING_canpurchase_dpad_team_currency = 0x19E8,
  SCR_OPAQUE_STRING_canpurchase_dpad_team_specialammo = 0x19EB,
  SCR_OPAQUE_STRING_canreactagain = 0x19ED,
  SCR_OPAQUE_STRING_canreadtext = 0x19EE,
  SCR_OPAQUE_STRING_canregenhealth = 0x19EF,
  SCR_OPAQUE_STRING_canreturntocover = 0x19F0,
  SCR_OPAQUE_STRING_cansave = 0x19F1,
  SCR_OPAQUE_STRING_canseeandshootpoint = 0x19F5,
  SCR_OPAQUE_STRING_canseeenemyfromexposed = 0x19F7,
  SCR_OPAQUE_STRING_canseepointfromexposedatnode = 0x19F9,
  SCR_OPAQUE_STRING_canshootwhilerunning = 0x19FA,
  SCR_OPAQUE_STRING_canshootwhilerunningbackward = 0x19FB,
  SCR_OPAQUE_STRING_canshootwhilerunningforward = 0x19FC,
  SCR_OPAQUE_STRING_canstoppeeking = 0x19FE,
  SCR_OPAQUE_STRING_cansuppressenemy = 0x19FF,
  SCR_OPAQUE_STRING_cantfindanythingtodo = 0x1A02,
  SCR_OPAQUE_STRING_canthittarget = 0x1A03,
  SCR_OPAQUE_STRING_canthrowgrenade = 0x1A04,
  SCR_OPAQUE_STRING_cantraceto = 0x1A05,
  SCR_OPAQUE_STRING_cantseeenemybehavior = 0x1A06,
  SCR_OPAQUE_STRING_cantseeenemywait = 0x1A07,
  SCR_OPAQUE_STRING_canuse = 0x1A09,
  SCR_OPAQUE_STRING_canuse_dpad_backup_buddy = 0x1A0B,
  SCR_OPAQUE_STRING_canuse_dpad_death_machine = 0x1A0C,
  SCR_OPAQUE_STRING_canuse_dpad_glsentry = 0x1A0D,
  SCR_OPAQUE_STRING_canuse_dpad_ims = 0x1A0E,
  SCR_OPAQUE_STRING_canuse_dpad_minigun_turret = 0x1A0F,
  SCR_OPAQUE_STRING_canuse_dpad_predator = 0x1A10,
  SCR_OPAQUE_STRING_canuse_dpad_team_ammo = 0x1A14,
  SCR_OPAQUE_STRING_canuse_dpad_team_armor = 0x1A15,
  SCR_OPAQUE_STRING_canuse_dpad_team_boost = 0x1A16,
  SCR_OPAQUE_STRING_canuse_dpad_team_currency = 0x1A17,
  SCR_OPAQUE_STRING_canuse_dpad_team_explosives = 0x1A18,
  SCR_OPAQUE_STRING_canusecallback = 0x1A1C,
  SCR_OPAQUE_STRING_canusedeployable = 0x1A1D,
  SCR_OPAQUE_STRING_canuseotherboxes = 0x1A1F,
  SCR_OPAQUE_STRING_canyon_init = 0x1A21,
  SCR_OPAQUE_STRING_canyon_jumper_setup = 0x1A22,
  SCR_OPAQUE_STRING_canyon_main = 0x1A23,
  SCR_OPAQUE_STRING_cap_range = 0x1A24,
  SCR_OPAQUE_STRING_capacity = 0x1A25,
  SCR_OPAQUE_STRING_capsule_ninja = 0x1A26,
  SCR_OPAQUE_STRING_capturednuke = 0x1A27,
  SCR_OPAQUE_STRING_capturingstring = 0x1A2A,
  SCR_OPAQUE_STRING_car_1 = 0x1A2C,
  SCR_OPAQUE_STRING_car_alarm_org = 0x1A2D,
  SCR_OPAQUE_STRING_car_alarm_timeout = 0x1A2E,
  SCR_OPAQUE_STRING_car_damage_owner_recorder = 0x1A2F,
  SCR_OPAQUE_STRING_care_package_watch = 0x1A32,
  SCR_OPAQUE_STRING_career_stat_increment = 0x1A34,
  SCR_OPAQUE_STRING_career_stats_init = 0x1A35,
  SCR_OPAQUE_STRING_cargo = 0x1A38,
  SCR_OPAQUE_STRING_cargo_amb = 0x1A39,
  SCR_OPAQUE_STRING_cargo_choppers = 0x1A3A,
  SCR_OPAQUE_STRING_cargo_container = 0x1A3B,
  SCR_OPAQUE_STRING_cargo_item_spawners = 0x1A3C,
  SCR_OPAQUE_STRING_cargo_winds_front = 0x1A3E,
  SCR_OPAQUE_STRING_cargo_winds_rear = 0x1A3F,
  SCR_OPAQUE_STRING_carried_grape = 0x1A40,
  SCR_OPAQUE_STRING_carriedby = 0x1A41,
  SCR_OPAQUE_STRING_carrieditem = 0x1A43,
  SCR_OPAQUE_STRING_carrier = 0x1A45,
  SCR_OPAQUE_STRING_carrier_grape = 0x1A46,
  SCR_OPAQUE_STRING_carrier_life_jet_takeoff_guys = 0x1A48,
  SCR_OPAQUE_STRING_carrier_life_jet_takeoff_jet = 0x1A49,
  SCR_OPAQUE_STRING_carrier_liferaft = 0x1A4A,
  SCR_OPAQUE_STRING_carrier_light_post_sparrow = 0x1A4C,
  SCR_OPAQUE_STRING_carrier_locations = 0x1A4D,
  SCR_OPAQUE_STRING_carrier_planes_precache = 0x1A4E,
  SCR_OPAQUE_STRING_carrier_post_load = 0x1A4F,
  SCR_OPAQUE_STRING_carrier_set_vision_rog_tilt = 0x1A50,
  SCR_OPAQUE_STRING_carrier_starts = 0x1A51,
  SCR_OPAQUE_STRING_carriervisible = 0x1A52,
  SCR_OPAQUE_STRING_carry_bishop = 0x1A53,
  SCR_OPAQUE_STRING_carry_in = 0x1A54,
  SCR_OPAQUE_STRING_carry_vanguard = 0x1A55,
  SCR_OPAQUE_STRING_carryflag = 0x1A56,
  SCR_OPAQUE_STRING_carryicon = 0x1A57,
  SCR_OPAQUE_STRING_carrying_pickedup_sentry = 0x1A58,
  SCR_OPAQUE_STRING_carryobject = 0x1A59,
  SCR_OPAQUE_STRING_carryobject_overridemovingplatformdeath = 0x1A5A,
  SCR_OPAQUE_STRING_carryobjectproxthink = 0x1A5B,
  SCR_OPAQUE_STRING_carryobjectproxthinkdelayed = 0x1A5C,
  SCR_OPAQUE_STRING_carryobjectusethink = 0x1A5E,
  SCR_OPAQUE_STRING_carryremoteuav_delete = 0x1A5F,
  SCR_OPAQUE_STRING_carryremoteuav_setcarried = 0x1A61,
  SCR_OPAQUE_STRING_cars = 0x1A62,
  SCR_OPAQUE_STRING_cart_player_kill_volume = 0x1A63,
  SCR_OPAQUE_STRING_cart_runner = 0x1A64,
  SCR_OPAQUE_STRING_casualtytracking = 0x1A66,
  SCR_OPAQUE_STRING_cat_array_add = 0x1A67,
  SCR_OPAQUE_STRING_cat_array_get = 0x1A68,
  SCR_OPAQUE_STRING_catch_alien_on_fire = 0x1A69,
  SCR_OPAQUE_STRING_catch_death_notify = 0x1A6B,
  SCR_OPAQUE_STRING_catch_interrupt_notify = 0x1A6C,
  SCR_OPAQUE_STRING_catchup_deck_combat = 0x1A6F,
  SCR_OPAQUE_STRING_catchup_deck_tilt = 0x1A70,
  SCR_OPAQUE_STRING_catchup_defend_sparrow = 0x1A73,
  SCR_OPAQUE_STRING_catchup_function = 0x1A75,
  SCR_OPAQUE_STRING_catchup_slow_intro = 0x1A78,
  SCR_OPAQUE_STRING_catwalk_melee_glass_break = 0x1A7C,
  SCR_OPAQUE_STRING_catwalks_end = 0x1A7D,
  SCR_OPAQUE_STRING_cave_cairo_whine = 0x1A82,
  SCR_OPAQUE_STRING_cave_dialogue = 0x1A83,
  SCR_OPAQUE_STRING_cave_dialogue_2 = 0x1A84,
  SCR_OPAQUE_STRING_cave_dust = 0x1A85,
  SCR_OPAQUE_STRING_cave_earthquake = 0x1A86,
  SCR_OPAQUE_STRING_ceiling_rubble = 0x1A8D,
  SCR_OPAQUE_STRING_ceiling_rubble_missile_explode_watch = 0x1A8E,
  SCR_OPAQUE_STRING_ceiling_rubble_onplayerconnect = 0x1A8F,
  SCR_OPAQUE_STRING_ceiling_rubble_watchusage = 0x1A90,
  SCR_OPAQUE_STRING_centeraimpoint = 0x1A94,
  SCR_OPAQUE_STRING_centered = 0x1A95,
  SCR_OPAQUE_STRING_centerref = 0x1A97,
  SCR_OPAQUE_STRING_cfxprintln = 0x1A98,
  SCR_OPAQUE_STRING_cfxprintlnend = 0x1A99,
  SCR_OPAQUE_STRING_cfxprintlnstart = 0x1A9A,
  SCR_OPAQUE_STRING_cg_drawbreathhint = 0x1A9B,
  SCR_OPAQUE_STRING_ch_assists = 0x1A9C,
  SCR_OPAQUE_STRING_ch_bulletdamagecommon = 0x1A9D,
  SCR_OPAQUE_STRING_ch_getstate = 0x1AA0,
  SCR_OPAQUE_STRING_ch_gettarget = 0x1AA1,
  SCR_OPAQUE_STRING_ch_isactivechallenge = 0x1AA3,
  SCR_OPAQUE_STRING_ch_roundplayed = 0x1AA5,
  SCR_OPAQUE_STRING_ch_roundwin = 0x1AA6,
  SCR_OPAQUE_STRING_ch_setprogress = 0x1AA7,
  SCR_OPAQUE_STRING_ch_vehicle_killed = 0x1AA9,
  SCR_OPAQUE_STRING_ch_vehicle_kills = 0x1AAA,
  SCR_OPAQUE_STRING_ch_vo = 0x1AAB,
  SCR_OPAQUE_STRING_chain_gate = 0x1AAC,
  SCR_OPAQUE_STRING_chaingun_shelleject_fx = 0x1AAF,
  SCR_OPAQUE_STRING_chair_anim_ent = 0x1AB4,
  SCR_OPAQUE_STRING_chair_animate = 0x1AB5,
  SCR_OPAQUE_STRING_chair_nags = 0x1AB8,
  SCR_OPAQUE_STRING_chair_vargas = 0x1AB9,
  SCR_OPAQUE_STRING_chalk_swipe1 = 0x1ABC,
  SCR_OPAQUE_STRING_chalk_swipe2 = 0x1ABD,
  SCR_OPAQUE_STRING_challenge_countdown = 0x1ABE,
  SCR_OPAQUE_STRING_challenge_registration_func = 0x1AC0,
  SCR_OPAQUE_STRING_challenge_rewardval = 0x1AC1,
  SCR_OPAQUE_STRING_challengedata = 0x1AC4,
  SCR_OPAQUE_STRING_challengeinfo = 0x1AC5,
  SCR_OPAQUE_STRING_challengereward = 0x1AC7,
  SCR_OPAQUE_STRING_challengescompleted = 0x1AC8,
  SCR_OPAQUE_STRING_challengeslot = 0x1AC9,
  SCR_OPAQUE_STRING_challengetarget = 0x1ACB,
  SCR_OPAQUE_STRING_chance = 0x1ACD,
  SCR_OPAQUE_STRING_chancefordoground = 0x1ACE,
  SCR_OPAQUE_STRING_chancetospawndog = 0x1ACF,
  SCR_OPAQUE_STRING_chancetospawnpickup = 0x1AD0,
  SCR_OPAQUE_STRING_change_character_model = 0x1AD1,
  SCR_OPAQUE_STRING_change_enemy_priority = 0x1AD3,
  SCR_OPAQUE_STRING_change_guard_to_hazmat = 0x1AD4,
  SCR_OPAQUE_STRING_change_light = 0x1AD5,
  SCR_OPAQUE_STRING_change_mix = 0x1AD6,
  SCR_OPAQUE_STRING_change_zone_stairwell = 0x1AD8,
  SCR_OPAQUE_STRING_changecrateweight = 0x1ADA,
  SCR_OPAQUE_STRING_changed_team = 0x1ADB,
  SCR_OPAQUE_STRING_changelightcolortoworkerthread = 0x1ADE,
  SCR_OPAQUE_STRING_changestanceforfuntime = 0x1AE0,
  SCR_OPAQUE_STRING_changestepoutpos = 0x1AE1,
  SCR_OPAQUE_STRING_changingcoverpos = 0x1AE3,
  SCR_OPAQUE_STRING_changingtoregularinfected = 0x1AE5,
  SCR_OPAQUE_STRING_changingtoregularinfectedbykill = 0x1AE6,
  SCR_OPAQUE_STRING_changingweapon = 0x1AE7,
  SCR_OPAQUE_STRING_chaos_a = 0x1AE8,
  SCR_OPAQUE_STRING_chaos_a_hesh_landing = 0x1AEA,
  SCR_OPAQUE_STRING_chaos_a_hesh_run = 0x1AEB,
  SCR_OPAQUE_STRING_chaos_airdrop_locs = 0x1AEE,
  SCR_OPAQUE_STRING_chaos_b = 0x1AEF,
  SCR_OPAQUE_STRING_chaos_b_hide_debris = 0x1AF0,
  SCR_OPAQUE_STRING_chaos_b_slow_zone = 0x1AF1,
  SCR_OPAQUE_STRING_chaos_checkpoint = 0x1AF2,
  SCR_OPAQUE_STRING_chaos_checkpoint_trigger = 0x1AF3,
  SCR_OPAQUE_STRING_chaos_hide_on_start = 0x1AF7,
  SCR_OPAQUE_STRING_chaos_kill_after_time = 0x1AF8,
  SCR_OPAQUE_STRING_chaos_kill_player = 0x1AFA,
  SCR_OPAQUE_STRING_chaos_moving_clip = 0x1AFB,
  SCR_OPAQUE_STRING_chaos_moving_head = 0x1AFC,
  SCR_OPAQUE_STRING_chaos_music = 0x1AFD,
  SCR_OPAQUE_STRING_chaos_player_kill = 0x1AFE,
  SCR_OPAQUE_STRING_chaos_quake_trigger_think = 0x1AFF,
  SCR_OPAQUE_STRING_chaos_rog_think = 0x1B00,
  SCR_OPAQUE_STRING_chaos_walker_wait = 0x1B02,
  SCR_OPAQUE_STRING_character_type = 0x1B09,
  SCR_OPAQUE_STRING_characters = 0x1B0A,
  SCR_OPAQUE_STRING_charactertypebonusxp = 0x1B0B,
  SCR_OPAQUE_STRING_charge = 0x1B0C,
  SCR_OPAQUE_STRING_charge1 = 0x1B0D,
  SCR_OPAQUE_STRING_charge2 = 0x1B0E,
  SCR_OPAQUE_STRING_charge_attack = 0x1B0F,
  SCR_OPAQUE_STRING_charge_tracking_enemy = 0x1B10,
  SCR_OPAQUE_STRING_chase_amb_enter_chasm = 0x1B12,
  SCR_OPAQUE_STRING_chase_amb_enter_ravine = 0x1B13,
  SCR_OPAQUE_STRING_chase_amb_garage_exit = 0x1B16,
  SCR_OPAQUE_STRING_chase_amb_garage_punch_it = 0x1B19,
  SCR_OPAQUE_STRING_chase_amb_garage_start = 0x1B1A,
  SCR_OPAQUE_STRING_chase_amb_sharp_turn = 0x1B1B,
  SCR_OPAQUE_STRING_chase_amb_sub_comes_up = 0x1B1C,
  SCR_OPAQUE_STRING_chase_amb_tight_spot = 0x1B1D,
  SCR_OPAQUE_STRING_chase_amb_under_bridge_2 = 0x1B1F,
  SCR_OPAQUE_STRING_chase_amb_under_bridge_3 = 0x1B20,
  SCR_OPAQUE_STRING_chase_amb_under_bridge_4 = 0x1B21,
  SCR_OPAQUE_STRING_chase_cam_ent = 0x1B22,
  SCR_OPAQUE_STRING_chase_cam_last_num = 0x1B23,
  SCR_OPAQUE_STRING_chase_concussion = 0x1B26,
  SCR_OPAQUE_STRING_chase_crack_icehole = 0x1B27,
  SCR_OPAQUE_STRING_chase_crashmix = 0x1B28,
  SCR_OPAQUE_STRING_chase_dog = 0x1B29,
  SCR_OPAQUE_STRING_chase_dog_blocker_think = 0x1B2A,
  SCR_OPAQUE_STRING_chase_dog_dialogue = 0x1B2B,
  SCR_OPAQUE_STRING_chase_land_roof = 0x1B2C,
  SCR_OPAQUE_STRING_chase_land_tires_big = 0x1B2D,
  SCR_OPAQUE_STRING_chase_land_tires_small = 0x1B2E,
  SCR_OPAQUE_STRING_chase_music = 0x1B30,
  SCR_OPAQUE_STRING_chase_pileup_counter = 0x1B31,
  SCR_OPAQUE_STRING_chase_player = 0x1B32,
  SCR_OPAQUE_STRING_chase_player_collision = 0x1B33,
  SCR_OPAQUE_STRING_chase_player_jolt = 0x1B34,
  SCR_OPAQUE_STRING_chase_roadblock_smash = 0x1B35,
  SCR_OPAQUE_STRING_chase_script = 0x1B36,
  SCR_OPAQUE_STRING_chase_sink = 0x1B37,
  SCR_OPAQUE_STRING_chase_tunnel_jeep = 0x1B3C,
  SCR_OPAQUE_STRING_chasecam = 0x1B3D,
  SCR_OPAQUE_STRING_chasecam_onent = 0x1B3E,
  SCR_OPAQUE_STRING_chatqueue = 0x1B41,
  SCR_OPAQUE_STRING_cheap_effect_id = 0x1B42,
  SCR_OPAQUE_STRING_cheap_vehicles_have_shields = 0x1B43,
  SCR_OPAQUE_STRING_cheatammoifnecessary = 0x1B44,
  SCR_OPAQUE_STRING_check_ai_array_for_death = 0x1B46,
  SCR_OPAQUE_STRING_check_already_touching = 0x1B47,
  SCR_OPAQUE_STRING_check_atrium_done = 0x1B4B,
  SCR_OPAQUE_STRING_check_break_stealth = 0x1B4C,
  SCR_OPAQUE_STRING_check_break_stealth_end = 0x1B4D,
  SCR_OPAQUE_STRING_check_debug_hud_dvar = 0x1B51,
  SCR_OPAQUE_STRING_check_dog_ready_to_attack = 0x1B53,
  SCR_OPAQUE_STRING_check_dog_sprinting = 0x1B54,
  SCR_OPAQUE_STRING_check_enemy_clump = 0x1B55,
  SCR_OPAQUE_STRING_check_enemy_index = 0x1B56,
  SCR_OPAQUE_STRING_check_failed_spawn_groups = 0x1B57,
  SCR_OPAQUE_STRING_check_feature_dependencies = 0x1B58,
  SCR_OPAQUE_STRING_check_flag_for_stat_tracking = 0x1B5A,
  SCR_OPAQUE_STRING_check_for_block = 0x1B5C,
  SCR_OPAQUE_STRING_check_for_combat_two_done = 0x1B5D,
  SCR_OPAQUE_STRING_check_for_death_during_traversal = 0x1B5E,
  SCR_OPAQUE_STRING_check_for_enemies = 0x1B5F,
  SCR_OPAQUE_STRING_check_for_existing_pet_bombs = 0x1B60,
  SCR_OPAQUE_STRING_check_for_melee_stab = 0x1B61,
  SCR_OPAQUE_STRING_check_for_player_impact = 0x1B63,
  SCR_OPAQUE_STRING_check_for_player_meleeing = 0x1B64,
  SCR_OPAQUE_STRING_check_for_player_near_hive_with_drill = 0x1B65,
  SCR_OPAQUE_STRING_check_for_rog_death = 0x1B66,
  SCR_OPAQUE_STRING_check_for_special_damage = 0x1B67,
  SCR_OPAQUE_STRING_check_for_weapon_pickup = 0x1B68,
  SCR_OPAQUE_STRING_check_force_color = 0x1B69,
  SCR_OPAQUE_STRING_check_grenade = 0x1B6B,
  SCR_OPAQUE_STRING_check_guard_death_to_stop_pistol_fire = 0x1B6C,
  SCR_OPAQUE_STRING_check_hold_bar_in_green = 0x1B6E,
  SCR_OPAQUE_STRING_check_hold_bar_in_green_or_die = 0x1B6F,
  SCR_OPAQUE_STRING_check_hostage_flag_a = 0x1B70,
  SCR_OPAQUE_STRING_check_hostage_flag_b = 0x1B71,
  SCR_OPAQUE_STRING_check_if_player_close_to_checkpoint = 0x1B72,
  SCR_OPAQUE_STRING_check_if_went_hot_late = 0x1B73,
  SCR_OPAQUE_STRING_check_kill_traversal = 0x1B75,
  SCR_OPAQUE_STRING_check_melee_interaction_active = 0x1B77,
  SCR_OPAQUE_STRING_check_missing_animation = 0x1B78,
  SCR_OPAQUE_STRING_check_other_haslevelveteranachievement = 0x1B79,
  SCR_OPAQUE_STRING_check_overrides = 0x1B7A,
  SCR_OPAQUE_STRING_check_pain_lockout = 0x1B7C,
  SCR_OPAQUE_STRING_check_player_warehouse_mantle = 0x1B7F,
  SCR_OPAQUE_STRING_check_player_zoom = 0x1B80,
  SCR_OPAQUE_STRING_check_script_char_group_ratio = 0x1B81,
  SCR_OPAQUE_STRING_check_sound_tag_dupe = 0x1B82,
  SCR_OPAQUE_STRING_check_sound_tag_dupe_reset = 0x1B83,
  SCR_OPAQUE_STRING_check_submix_hud_dvar = 0x1B86,
  SCR_OPAQUE_STRING_check_triggers_flagset = 0x1B89,
  SCR_OPAQUE_STRING_check_unloadgroup = 0x1B8A,
  SCR_OPAQUE_STRING_check_weapon = 0x1B8C,
  SCR_OPAQUE_STRING_checkadvanceonenemyconditions = 0x1B8F,
  SCR_OPAQUE_STRING_checkallgeneratorsofthistype = 0x1B90,
  SCR_OPAQUE_STRING_checkapproachpreconditions = 0x1B93,
  SCR_OPAQUE_STRING_checkarrivalenterpositions = 0x1B94,
  SCR_OPAQUE_STRING_checkchanged = 0x1B97,
  SCR_OPAQUE_STRING_checkcombatstate = 0x1B98,
  SCR_OPAQUE_STRING_checkcoverenterpos = 0x1B99,
  SCR_OPAQUE_STRING_checkdynamicspawns = 0x1B9B,
  SCR_OPAQUE_STRING_checked = 0x1B9C,
  SCR_OPAQUE_STRING_checkexpiretime = 0x1B9E,
  SCR_OPAQUE_STRING_checkforbestweapon = 0x1B9F,
  SCR_OPAQUE_STRING_checkforcebleedout = 0x1BA0,
  SCR_OPAQUE_STRING_checkforceragdoll = 0x1BA1,
  SCR_OPAQUE_STRING_checkforperkupgrade = 0x1BA3,
  SCR_OPAQUE_STRING_checkforpersonalbests = 0x1BA4,
  SCR_OPAQUE_STRING_checkforthrowback = 0x1BA5,
  SCR_OPAQUE_STRING_checkgeneratorplacement = 0x1BA6,
  SCR_OPAQUE_STRING_checkgrenadethrowdist = 0x1BA7,
  SCR_OPAQUE_STRING_checkhit = 0x1BA8,
  SCR_OPAQUE_STRING_checkhitsthismag_regularmp = 0x1BAA,
  SCR_OPAQUE_STRING_checking_for_hits = 0x1BAB,
  SCR_OPAQUE_STRING_checkisfacing = 0x1BAC,
  SCR_OPAQUE_STRING_checkkillsteal = 0x1BAD,
  SCR_OPAQUE_STRING_checkmatchdataequipmentkills = 0x1BAE,
  SCR_OPAQUE_STRING_checkowner = 0x1BB2,
  SCR_OPAQUE_STRING_checkpitchvisibility = 0x1BB3,
  SCR_OPAQUE_STRING_checkplayer = 0x1BB4,
  SCR_OPAQUE_STRING_checkplayerscorelimitsoon = 0x1BB5,
  SCR_OPAQUE_STRING_checkpoint_base_array = 0x1BB8,
  SCR_OPAQUE_STRING_checkpoint_bridge = 0x1BB9,
  SCR_OPAQUE_STRING_checkpoint_canyon = 0x1BBA,
  SCR_OPAQUE_STRING_checkpoint_cave = 0x1BBB,
  SCR_OPAQUE_STRING_checkpoint_chaos = 0x1BBC,
  SCR_OPAQUE_STRING_checkpoint_crash_site = 0x1BBF,
  SCR_OPAQUE_STRING_checkpoint_defend = 0x1BC0,
  SCR_OPAQUE_STRING_checkpoint_exfil = 0x1BC3,
  SCR_OPAQUE_STRING_checkpoint_foley = 0x1BC5,
  SCR_OPAQUE_STRING_checkpoint_interior = 0x1BC6,
  SCR_OPAQUE_STRING_checkpoint_interior_combat = 0x1BC7,
  SCR_OPAQUE_STRING_checkpoint_interior_cqb = 0x1BC8,
  SCR_OPAQUE_STRING_checkpoint_osprey = 0x1BCA,
  SCR_OPAQUE_STRING_checkpoint_patrol_anim = 0x1BCC,
  SCR_OPAQUE_STRING_checkpoint_ride = 0x1BCE,
  SCR_OPAQUE_STRING_checkpoint_tank = 0x1BD2,
  SCR_OPAQUE_STRING_checkpoint_tower = 0x1BD3,
  SCR_OPAQUE_STRING_checkpredictedspawnpointcorrectness = 0x1BD4,
  SCR_OPAQUE_STRING_checkstreakreward = 0x1BD8,
  SCR_OPAQUE_STRING_checkteam = 0x1BD9,
  SCR_OPAQUE_STRING_checktransitionpreconditions = 0x1BDE,
  SCR_OPAQUE_STRING_choke_loc = 0x1BE5,
  SCR_OPAQUE_STRING_choke_trigs = 0x1BE6,
  SCR_OPAQUE_STRING_choose_fire = 0x1BE9,
  SCR_OPAQUE_STRING_choose_from_weighted_array = 0x1BEA,
  SCR_OPAQUE_STRING_choose_goal_vol = 0x1BEB,
  SCR_OPAQUE_STRING_choose_goal_vol_chain = 0x1BEC,
  SCR_OPAQUE_STRING_choose_random_explosive_type = 0x1BEE,
  SCR_OPAQUE_STRING_choose_spit_type = 0x1BEF,
  SCR_OPAQUE_STRING_chooseattackidle = 0x1BF1,
  SCR_OPAQUE_STRING_choosedirection = 0x1BF2,
  SCR_OPAQUE_STRING_choosepose = 0x1BF4,
  SCR_OPAQUE_STRING_chooseposefunc = 0x1BF5,
  SCR_OPAQUE_STRING_choper_fly_in_think = 0x1BF6,
  SCR_OPAQUE_STRING_chopper = 0x1BF7,
  SCR_OPAQUE_STRING_chopper_achievement_check = 0x1BFA,
  SCR_OPAQUE_STRING_chopper_active = 0x1BFB,
  SCR_OPAQUE_STRING_chopper_ai_init = 0x1BFC,
  SCR_OPAQUE_STRING_chopper_air_support_activate = 0x1BFD,
  SCR_OPAQUE_STRING_chopper_arrive_wind_gust = 0x1BFE,
  SCR_OPAQUE_STRING_chopper_attacker_check = 0x1C00,
  SCR_OPAQUE_STRING_chopper_boss_agro = 0x1C01,
  SCR_OPAQUE_STRING_chopper_boss_attempt_firing = 0x1C03,
  SCR_OPAQUE_STRING_chopper_boss_can_hit_from_tag_turret = 0x1C05,
  SCR_OPAQUE_STRING_chopper_boss_forced_target_set = 0x1C0C,
  SCR_OPAQUE_STRING_chopper_boss_gather_targets = 0x1C0D,
  SCR_OPAQUE_STRING_chopper_boss_get_best_location_and_target = 0x1C0E,
  SCR_OPAQUE_STRING_chopper_boss_get_best_target_proc = 0x1C10,
  SCR_OPAQUE_STRING_chopper_boss_get_closest_neighbor_2d = 0x1C12,
  SCR_OPAQUE_STRING_chopper_boss_get_closest_target_2d = 0x1C13,
  SCR_OPAQUE_STRING_chopper_boss_get_target = 0x1C14,
  SCR_OPAQUE_STRING_chopper_boss_goto_hangout = 0x1C15,
  SCR_OPAQUE_STRING_chopper_boss_in_range = 0x1C17,
  SCR_OPAQUE_STRING_chopper_boss_locs_disabled = 0x1C1C,
  SCR_OPAQUE_STRING_chopper_boss_locs_monitor_disable = 0x1C1D,
  SCR_OPAQUE_STRING_chopper_boss_locs_monitor_disable_clean_up = 0x1C1E,
  SCR_OPAQUE_STRING_chopper_boss_locs_monitor_disable_reset = 0x1C1F,
  SCR_OPAQUE_STRING_chopper_boss_locs_populate = 0x1C21,
  SCR_OPAQUE_STRING_chopper_boss_locs_populate_thread = 0x1C22,
  SCR_OPAQUE_STRING_chopper_boss_locs_populate_thread_optimized = 0x1C23,
  SCR_OPAQUE_STRING_chopper_boss_locs_populated = 0x1C24,
  SCR_OPAQUE_STRING_chopper_boss_move = 0x1C27,
  SCR_OPAQUE_STRING_chopper_boss_path_override = 0x1C28,
  SCR_OPAQUE_STRING_chopper_boss_path_paused = 0x1C29,
  SCR_OPAQUE_STRING_chopper_boss_post_move_func = 0x1C2B,
  SCR_OPAQUE_STRING_chopper_boss_pre_move_func = 0x1C2C,
  SCR_OPAQUE_STRING_chopper_boss_resume_path_finding = 0x1C2D,
  SCR_OPAQUE_STRING_chopper_boss_think = 0x1C31,
  SCR_OPAQUE_STRING_chopper_boss_wait_populate = 0x1C33,
  SCR_OPAQUE_STRING_chopper_crash = 0x1C35,
  SCR_OPAQUE_STRING_chopper_crash_enemies = 0x1C36,
  SCR_OPAQUE_STRING_chopper_crash_guy_logic = 0x1C38,
  SCR_OPAQUE_STRING_chopper_custom_death_spin = 0x1C39,
  SCR_OPAQUE_STRING_chopper_decoys_and_evade = 0x1C3D,
  SCR_OPAQUE_STRING_chopper_destroys_cover = 0x1C3E,
  SCR_OPAQUE_STRING_chopper_does_first_flyby = 0x1C3F,
  SCR_OPAQUE_STRING_chopper_hear_vo = 0x1C42,
  SCR_OPAQUE_STRING_chopper_infantry_tweak = 0x1C43,
  SCR_OPAQUE_STRING_chopper_insta_kill = 0x1C44,
  SCR_OPAQUE_STRING_chopper_leaves_after_time = 0x1C46,
  SCR_OPAQUE_STRING_chopper_missile_burst = 0x1C49,
  SCR_OPAQUE_STRING_chopper_outline_monitor = 0x1C4B,
  SCR_OPAQUE_STRING_chopper_reacts_to_lockon = 0x1C4E,
  SCR_OPAQUE_STRING_chopper_resume_path = 0x1C4F,
  SCR_OPAQUE_STRING_chopper_reward = 0x1C50,
  SCR_OPAQUE_STRING_chopper_rumble_earthquake = 0x1C51,
  SCR_OPAQUE_STRING_chopper_scripted_death = 0x1C52,
  SCR_OPAQUE_STRING_chopper_side_dodge = 0x1C53,
  SCR_OPAQUE_STRING_chopper_sound = 0x1C54,
  SCR_OPAQUE_STRING_chopper_start_at_path = 0x1C58,
  SCR_OPAQUE_STRING_chopper_turret_on = 0x1C5B,
  SCR_OPAQUE_STRING_chopperboss_const = 0x1C5D,
  SCR_OPAQUE_STRING_choppers_do_strafe_attacks = 0x1C5F,
  SCR_OPAQUE_STRING_chopperturretofffunc = 0x1C64,
  SCR_OPAQUE_STRING_chopperturretonfunc = 0x1C65,
  SCR_OPAQUE_STRING_chosen = 0x1C66,
  SCR_OPAQUE_STRING_chosentemplates = 0x1C67,
  SCR_OPAQUE_STRING_chunk_spark_fx_tag = 0x1C68,
  SCR_OPAQUE_STRING_church_destruction_init = 0x1C6A,
  SCR_OPAQUE_STRING_church_fall = 0x1C6B,
  SCR_OPAQUE_STRING_church_weapon_pullout = 0x1C6C,
  SCR_OPAQUE_STRING_chyron = 0x1C6E,
  SCR_OPAQUE_STRING_chyron_sound = 0x1C6F,
  SCR_OPAQUE_STRING_cig_throwing = 0x1C70,
  SCR_OPAQUE_STRING_cinematic_off = 0x1C72,
  SCR_OPAQUE_STRING_cinematic_on = 0x1C73,
  SCR_OPAQUE_STRING_cinematic_over = 0x1C74,
  SCR_OPAQUE_STRING_cinematicmode_off = 0x1C75,
  SCR_OPAQUE_STRING_cipher_ambush_approach = 0x1C77,
  SCR_OPAQUE_STRING_cipher_keegan_tower_kill = 0x1C79,
  SCR_OPAQUE_STRING_cipher_podium = 0x1C7A,
  SCR_OPAQUE_STRING_cipher_vo = 0x1C7B,
  SCR_OPAQUE_STRING_circle_radius = 0x1C7E,
  SCR_OPAQUE_STRING_circle_time = 0x1C7F,
  SCR_OPAQUE_STRING_circling = 0x1C80,
  SCR_OPAQUE_STRING_city_collapse = 0x1C82,
  SCR_OPAQUE_STRING_civilian_combatmoveturn = 0x1C84,
  SCR_OPAQUE_STRING_civilian_jet_flyby = 0x1C86,
  SCR_OPAQUE_STRING_civilian_noncombatmoveturn = 0x1C87,
  SCR_OPAQUE_STRING_civilian_walk_animation = 0x1C88,
  SCR_OPAQUE_STRING_civilianjetflyby = 0x1C8A,
  SCR_OPAQUE_STRING_civilianjetflyby_timer = 0x1C8B,
  SCR_OPAQUE_STRING_civilianprops = 0x1C8C,
  SCR_OPAQUE_STRING_civs = 0x1C8D,
  SCR_OPAQUE_STRING_civs_set_flag_on_damage = 0x1C8E,
  SCR_OPAQUE_STRING_clacker_vo_failsafe = 0x1C8F,
  SCR_OPAQUE_STRING_claimed_node = 0x1C93,
  SCR_OPAQUE_STRING_claimtrigger = 0x1C96,
  SCR_OPAQUE_STRING_clampandnormalize = 0x1C97,
  SCR_OPAQUE_STRING_clampedhealth = 0x1C98,
  SCR_OPAQUE_STRING_class = 0x1C9A,
  SCR_OPAQUE_STRING_class_num = 0x1C9B,
  SCR_OPAQUE_STRING_classcallback = 0x1C9D,
  SCR_OPAQUE_STRING_classhasperk = 0x1C9F,
  SCR_OPAQUE_STRING_classmap = 0x1CA0,
  SCR_OPAQUE_STRING_classname_ng = 0x1CA1,
  SCR_OPAQUE_STRING_classtablename = 0x1CA2,
  SCR_OPAQUE_STRING_classtablenum = 0x1CA3,
  SCR_OPAQUE_STRING_classtweaks = 0x1CA4,
  SCR_OPAQUE_STRING_claymore_tutorial_given = 0x1CA6,
  SCR_OPAQUE_STRING_claymoredetectiontrigger = 0x1CAA,
  SCR_OPAQUE_STRING_claymoredetonateradius = 0x1CAB,
  SCR_OPAQUE_STRING_claymoredetonation = 0x1CAC,
  SCR_OPAQUE_STRING_claymores = 0x1CAE,
  SCR_OPAQUE_STRING_claymoresentientfunc = 0x1CAF,
  SCR_OPAQUE_STRING_claymoretracking = 0x1CB0,
  SCR_OPAQUE_STRING_claymoreused = 0x1CB1,
  SCR_OPAQUE_STRING_clean_tow_hud = 0x1CB3,
  SCR_OPAQUE_STRING_clean_up_intro_exterior_props = 0x1CB9,
  SCR_OPAQUE_STRING_clean_up_lagged_aliens = 0x1CBA,
  SCR_OPAQUE_STRING_clean_up_on_death = 0x1CBB,
  SCR_OPAQUE_STRING_clean_up_on_owner_death = 0x1CBC,
  SCR_OPAQUE_STRING_clean_window_player = 0x1CBD,
  SCR_OPAQUE_STRING_cleanup = 0x1CC0,
  SCR_OPAQUE_STRING_cleanup_boats = 0x1CC2,
  SCR_OPAQUE_STRING_cleanup_complex = 0x1CC4,
  SCR_OPAQUE_STRING_cleanup_deck_transition = 0x1CC5,
  SCR_OPAQUE_STRING_cleanup_delayed = 0x1CC6,
  SCR_OPAQUE_STRING_cleanup_enemies = 0x1CC7,
  SCR_OPAQUE_STRING_cleanup_enemy_destroyer = 0x1CC8,
  SCR_OPAQUE_STRING_cleanup_ent_on_dismount = 0x1CC9,
  SCR_OPAQUE_STRING_cleanup_ents = 0x1CCA,
  SCR_OPAQUE_STRING_cleanup_ents_removing_bullet_shield = 0x1CCB,
  SCR_OPAQUE_STRING_cleanup_fixtures = 0x1CCC,
  SCR_OPAQUE_STRING_cleanup_intermission_enemies = 0x1CCE,
  SCR_OPAQUE_STRING_cleanup_land_vert_missile_fx = 0x1CD0,
  SCR_OPAQUE_STRING_cleanup_launcher = 0x1CD1,
  SCR_OPAQUE_STRING_cleanup_missile_fx = 0x1CD3,
  SCR_OPAQUE_STRING_cleanup_phys_obj = 0x1CD6,
  SCR_OPAQUE_STRING_cleanup_rope = 0x1CD9,
  SCR_OPAQUE_STRING_cleanup_rope_on_zodiac_death = 0x1CDA,
  SCR_OPAQUE_STRING_cleanup_sentry_hud_outline = 0x1CDE,
  SCR_OPAQUE_STRING_cleanup_teargas_on_exit = 0x1CE0,
  SCR_OPAQUE_STRING_cleanup_topdrive = 0x1CE1,
  SCR_OPAQUE_STRING_cleanup_triggers = 0x1CE2,
  SCR_OPAQUE_STRING_cleanup_vehicles = 0x1CE3,
  SCR_OPAQUE_STRING_cleanup_vert_missile_fx = 0x1CE4,
  SCR_OPAQUE_STRING_cleanup_zodiac_bodies = 0x1CE6,
  SCR_OPAQUE_STRING_cleanup_zodiacs = 0x1CE7,
  SCR_OPAQUE_STRING_cleanup_zone_arrays = 0x1CE8,
  SCR_OPAQUE_STRING_cleanupents = 0x1CEC,
  SCR_OPAQUE_STRING_cleanupequipment = 0x1CED,
  SCR_OPAQUE_STRING_cleanupflyby = 0x1CEE,
  SCR_OPAQUE_STRING_cleanuplasertargetingdevice = 0x1CEF,
  SCR_OPAQUE_STRING_clear_all_corpses = 0x1CF3,
  SCR_OPAQUE_STRING_clear_ally_drones = 0x1CF4,
  SCR_OPAQUE_STRING_clear_animation = 0x1CF5,
  SCR_OPAQUE_STRING_clear_attached_items = 0x1CF9,
  SCR_OPAQUE_STRING_clear_attacking = 0x1CFA,
  SCR_OPAQUE_STRING_clear_audio_filter = 0x1CFB,
  SCR_OPAQUE_STRING_clear_audio_mix = 0x1CFC,
  SCR_OPAQUE_STRING_clear_audio_occlusion = 0x1CFD,
  SCR_OPAQUE_STRING_clear_bark_cairo = 0x1CFE,
  SCR_OPAQUE_STRING_clear_colors = 0x1D03,
  SCR_OPAQUE_STRING_clear_custom_gameskill_func = 0x1D05,
  SCR_OPAQUE_STRING_clear_deathanim = 0x1D06,
  SCR_OPAQUE_STRING_clear_deck_props = 0x1D07,
  SCR_OPAQUE_STRING_clear_dog_master = 0x1D08,
  SCR_OPAQUE_STRING_clear_entity_selection = 0x1D0C,
  SCR_OPAQUE_STRING_clear_exception = 0x1D0D,
  SCR_OPAQUE_STRING_clear_filter = 0x1D0E,
  SCR_OPAQUE_STRING_clear_generic_run_anim = 0x1D12,
  SCR_OPAQUE_STRING_clear_groundref = 0x1D13,
  SCR_OPAQUE_STRING_clear_ignore_everything = 0x1D16,
  SCR_OPAQUE_STRING_clear_ignore_states = 0x1D17,
  SCR_OPAQUE_STRING_clear_mix = 0x1D1B,
  SCR_OPAQUE_STRING_clear_promotion_order = 0x1D1E,
  SCR_OPAQUE_STRING_clear_rappel_move_flag = 0x1D1F,
  SCR_OPAQUE_STRING_clear_reverb = 0x1D20,
  SCR_OPAQUE_STRING_clear_run_anim = 0x1D21,
  SCR_OPAQUE_STRING_clear_sam_missiles = 0x1D22,
  SCR_OPAQUE_STRING_clear_script_goal_on = 0x1D23,
  SCR_OPAQUE_STRING_clear_settable_fx = 0x1D24,
  SCR_OPAQUE_STRING_clear_target_array = 0x1D25,
  SCR_OPAQUE_STRING_clear_target_on_vehicle_death = 0x1D26,
  SCR_OPAQUE_STRING_clear_this_node = 0x1D29,
  SCR_OPAQUE_STRING_clear_to_go_flag_set_once = 0x1D2A,
  SCR_OPAQUE_STRING_clear_tool_hud = 0x1D2B,
  SCR_OPAQUE_STRING_clear_turret_ammo_counter_on_dismount = 0x1D2E,
  SCR_OPAQUE_STRING_clear_vista_vehicles = 0x1D30,
  SCR_OPAQUE_STRING_clear_volume_flag = 0x1D31,
  SCR_OPAQUE_STRING_clearafterfade = 0x1D32,
  SCR_OPAQUE_STRING_clearall = 0x1D33,
  SCR_OPAQUE_STRING_clearawardwinners = 0x1D34,
  SCR_OPAQUE_STRING_clearbuddymessage = 0x1D36,
  SCR_OPAQUE_STRING_cleardamagehistory = 0x1D38,
  SCR_OPAQUE_STRING_cleardodgeanims = 0x1D39,
  SCR_OPAQUE_STRING_clearempondeath = 0x1D3B,
  SCR_OPAQUE_STRING_clearfaceanimonanimdone = 0x1D3C,
  SCR_OPAQUE_STRING_clearfxondeath = 0x1D3D,
  SCR_OPAQUE_STRING_clearidshortly = 0x1D40,
  SCR_OPAQUE_STRING_clearing_bob_anim = 0x1D41,
  SCR_OPAQUE_STRING_clearing_sways = 0x1D42,
  SCR_OPAQUE_STRING_clearkillcamstate = 0x1D44,
  SCR_OPAQUE_STRING_clearkillstreaks = 0x1D45,
  SCR_OPAQUE_STRING_clearondeath = 0x1D49,
  SCR_OPAQUE_STRING_clearonvictimdisconnect = 0x1D4A,
  SCR_OPAQUE_STRING_clearplayerlockfromremoteuavlaunch = 0x1D4B,
  SCR_OPAQUE_STRING_clearportalfx = 0x1D4D,
  SCR_OPAQUE_STRING_clearprevioustispawnpoint = 0x1D4E,
  SCR_OPAQUE_STRING_clearprogress = 0x1D4F,
  SCR_OPAQUE_STRING_clearrideintro = 0x1D50,
  SCR_OPAQUE_STRING_clearsightposnear = 0x1D52,
  SCR_OPAQUE_STRING_clearspawnpointdistancedata = 0x1D53,
  SCR_OPAQUE_STRING_clearteamspawnpointsightdata = 0x1D56,
  SCR_OPAQUE_STRING_clearthreatbias = 0x1D58,
  SCR_OPAQUE_STRING_clearwatervarsonspawn = 0x1D5A,
  SCR_OPAQUE_STRING_clientid = 0x1D5B,
  SCR_OPAQUE_STRING_clientmatchdataid = 0x1D5C,
  SCR_OPAQUE_STRING_clienttracespawnclass = 0x1D5D,
  SCR_OPAQUE_STRING_clienttweakables = 0x1D5E,
  SCR_OPAQUE_STRING_cliff_choppers_move_on = 0x1D61,
  SCR_OPAQUE_STRING_cliff_guy_logic = 0x1D62,
  SCR_OPAQUE_STRING_climb_over = 0x1D63,
  SCR_OPAQUE_STRING_climbover_enemy = 0x1D64,
  SCR_OPAQUE_STRING_clip_brush = 0x1D66,
  SCR_OPAQUE_STRING_clip_delete = 0x1D67,
  SCR_OPAQUE_STRING_clip_down = 0x1D68,
  SCR_OPAQUE_STRING_clip_move = 0x1D69,
  SCR_OPAQUE_STRING_clip_up = 0x1D6B,
  SCR_OPAQUE_STRING_clipammo = 0x1D6D,
  SCR_OPAQUE_STRING_clipmovementtolerance = 0x1D71,
  SCR_OPAQUE_STRING_clockwork_exfil_pre_load = 0x1D73,
  SCR_OPAQUE_STRING_clockwork_interior_nvg_pre_load = 0x1D75,
  SCR_OPAQUE_STRING_clockwork_intro_pre_load = 0x1D77,
  SCR_OPAQUE_STRING_clockwork_locations = 0x1D78,
  SCR_OPAQUE_STRING_clockwork_starts = 0x1D79,
  SCR_OPAQUE_STRING_clockwork_thermobaric_mines = 0x1D7A,
  SCR_OPAQUE_STRING_clockwork_treadfx_override = 0x1D7C,
  SCR_OPAQUE_STRING_close_distance_sq = 0x1D7D,
  SCR_OPAQUE_STRING_close_door = 0x1D7E,
  SCR_OPAQUE_STRING_close_elevator_doors = 0x1D7F,
  SCR_OPAQUE_STRING_close_enemy_volume = 0x1D80,
  SCR_OPAQUE_STRING_close_gate = 0x1D82,
  SCR_OPAQUE_STRING_close_inner_doors = 0x1D84,
  SCR_OPAQUE_STRING_close_outer_doors = 0x1D86,
  SCR_OPAQUE_STRING_close_range_retreat = 0x1D87,
  SCR_OPAQUE_STRING_close_stream_enemies = 0x1D88,
  SCR_OPAQUE_STRING_close_to_waterfall_enemy_logic = 0x1D89,
  SCR_OPAQUE_STRING_close_warehouse_doors = 0x1D8B,
  SCR_OPAQUE_STRING_closed_angles = 0x1D8C,
  SCR_OPAQUE_STRING_closed_defend_fx_ent = 0x1D8D,
  SCR_OPAQUE_STRING_closed_height = 0x1D8F,
  SCR_OPAQUE_STRING_closed_pos = 0x1D90,
  SCR_OPAQUE_STRING_closed_x = 0x1D92,
  SCR_OPAQUE_STRING_closedlist = 0x1D94,
  SCR_OPAQUE_STRING_closeelevatordoors = 0x1D96,
  SCR_OPAQUE_STRING_closeenoughaimdegrees = 0x1D97,
  SCR_OPAQUE_STRING_closeomamenuondeath = 0x1D98,
  SCR_OPAQUE_STRING_closepos = 0x1D99,
  SCR_OPAQUE_STRING_closerfunc = 0x1D9A,
  SCR_OPAQUE_STRING_closest_enemy_snowmobile_to_player = 0x1D9C,
  SCR_OPAQUE_STRING_closest_start_struct = 0x1D9E,
  SCR_OPAQUE_STRING_clouds = 0x1DA1,
  SCR_OPAQUE_STRING_cnd_delay_rope_link = 0x1DA6,
  SCR_OPAQUE_STRING_cnd_ent_flag_clear = 0x1DA7,
  SCR_OPAQUE_STRING_cnd_generic_flicker = 0x1DAC,
  SCR_OPAQUE_STRING_cnd_generic_flicker_msg_watcher = 0x1DAD,
  SCR_OPAQUE_STRING_cnd_generic_flicker_pause = 0x1DAE,
  SCR_OPAQUE_STRING_cnd_get_rope_anim_origin = 0x1DB0,
  SCR_OPAQUE_STRING_cnd_plyr_rpl_death = 0x1DB4,
  SCR_OPAQUE_STRING_cnd_plyr_rpl_handle_view_lerp = 0x1DB6,
  SCR_OPAQUE_STRING_cnd_plyr_rpl_setup_dvars = 0x1DBA,
  SCR_OPAQUE_STRING_cnd_plyr_rpl_setup_globals = 0x1DBB,
  SCR_OPAQUE_STRING_cnd_rappel_player_rope = 0x1DBD,
  SCR_OPAQUE_STRING_cnd_rappel_railing_obj = 0x1DBE,
  SCR_OPAQUE_STRING_cnd_rpl_cleanup = 0x1DC3,
  SCR_OPAQUE_STRING_cnd_rpl_do_move_bob = 0x1DC6,
  SCR_OPAQUE_STRING_cnd_rpl_do_rope = 0x1DC7,
  SCR_OPAQUE_STRING_cnd_rpl_do_stop_sway = 0x1DC8,
  SCR_OPAQUE_STRING_cnd_rpl_do_wind = 0x1DCB,
  SCR_OPAQUE_STRING_cnd_rpl_legs_notetracks = 0x1DCD,
  SCR_OPAQUE_STRING_cnd_rpl_plyr_link_to_rope = 0x1DCE,
  SCR_OPAQUE_STRING_cnd_shaft_flickering = 0x1DD2,
  SCR_OPAQUE_STRING_cobra_missile_models = 0x1DD6,
  SCR_OPAQUE_STRING_cobra_weapon_tags = 0x1DD7,
  SCR_OPAQUE_STRING_cockpit_tubes = 0x1DD9,
  SCR_OPAQUE_STRING_codecallback_agentadded = 0x1DDA,
  SCR_OPAQUE_STRING_codecallback_agentdamaged = 0x1DDB,
  SCR_OPAQUE_STRING_codecallback_agentkilled = 0x1DDC,
  SCR_OPAQUE_STRING_codecallback_codeendgame = 0x1DDD,
  SCR_OPAQUE_STRING_codecallback_hostmigration = 0x1DDE,
  SCR_OPAQUE_STRING_codecallback_leaderdialog = 0x1DDF,
  SCR_OPAQUE_STRING_codecallback_playerconnect = 0x1DE0,
  SCR_OPAQUE_STRING_codecallback_playerdamage = 0x1DE1,
  SCR_OPAQUE_STRING_codecallback_playerkilled = 0x1DE3,
  SCR_OPAQUE_STRING_codecallback_playerlaststand = 0x1DE4,
  SCR_OPAQUE_STRING_codecallback_playermigrated = 0x1DE5,
  SCR_OPAQUE_STRING_codecallback_vehicledamage = 0x1DE7,
  SCR_OPAQUE_STRING_col_lines = 0x1DEB,
  SCR_OPAQUE_STRING_col_radiuses = 0x1DEC,
  SCR_OPAQUE_STRING_col_volumes = 0x1DED,
  SCR_OPAQUE_STRING_coldbreath_player = 0x1DEE,
  SCR_OPAQUE_STRING_coldbreathfx = 0x1DEF,
  SCR_OPAQUE_STRING_colheight = 0x1DF0,
  SCR_OPAQUE_STRING_collapsed_derrick_wire_anims = 0x1DF2,
  SCR_OPAQUE_STRING_collect_func = 0x1DF3,
  SCR_OPAQUE_STRING_collectibles_hint_precache = 0x1DF5,
  SCR_OPAQUE_STRING_collectibles_model_precache = 0x1DF7,
  SCR_OPAQUE_STRING_collectibles_worldcount = 0x1DFA,
  SCR_OPAQUE_STRING_collision = 0x1DFB,
  SCR_OPAQUE_STRING_collision_brush_post_explosion = 0x1DFC,
  SCR_OPAQUE_STRING_collision_brush_pre_explosion = 0x1DFD,
  SCR_OPAQUE_STRING_collision_origin = 0x1DFE,
  SCR_OPAQUE_STRING_color_debug_println = 0x1E01,
  SCR_OPAQUE_STRING_color_doesnt_care_about_classname = 0x1E02,
  SCR_OPAQUE_STRING_color_doesnt_care_about_heroes = 0x1E03,
  SCR_OPAQUE_STRING_color_helper_trigger = 0x1E04,
  SCR_OPAQUE_STRING_color_node = 0x1E05,
  SCR_OPAQUE_STRING_color_node_finds_user_from_colorcodes = 0x1E08,
  SCR_OPAQUE_STRING_color_node_type_function = 0x1E09,
  SCR_OPAQUE_STRING_color_ordered_node_assignment = 0x1E0A,
  SCR_OPAQUE_STRING_color_status = 0x1E0B,
  SCR_OPAQUE_STRING_color_teams = 0x1E0D,
  SCR_OPAQUE_STRING_color_trig_moves_enemies = 0x1E0E,
  SCR_OPAQUE_STRING_color_user = 0x1E10,
  SCR_OPAQUE_STRING_color_volume_enemies = 0x1E11,
  SCR_OPAQUE_STRING_colorblind = 0x1E12,
  SCR_OPAQUE_STRING_colordebug = 0x1E15,
  SCR_OPAQUE_STRING_colorindex = 0x1E16,
  SCR_OPAQUE_STRING_colorislegit = 0x1E17,
  SCR_OPAQUE_STRING_colorlist = 0x1E18,
  SCR_OPAQUE_STRING_colornode_func = 0x1E19,
  SCR_OPAQUE_STRING_colornode_setgoal_func = 0x1E1B,
  SCR_OPAQUE_STRING_colornodes_debug_array = 0x1E1D,
  SCR_OPAQUE_STRING_colors = 0x1E1E,
  SCR_OPAQUE_STRING_combat_allies_mainhall = 0x1E20,
  SCR_OPAQUE_STRING_combat_ambient_guys2 = 0x1E22,
  SCR_OPAQUE_STRING_combat_handle_allies = 0x1E24,
  SCR_OPAQUE_STRING_combat_one = 0x1E25,
  SCR_OPAQUE_STRING_combat_one_door_col = 0x1E28,
  SCR_OPAQUE_STRING_combat_one_enemy = 0x1E2A,
  SCR_OPAQUE_STRING_combat_one_start = 0x1E2B,
  SCR_OPAQUE_STRING_combat_one_wave_node = 0x1E2C,
  SCR_OPAQUE_STRING_combat_playfacialanim = 0x1E2D,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry = 0x1E30,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_enemies = 0x1E34,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_finish_player_rope = 0x1E36,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_first_frame = 0x1E37,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_rotate_legs = 0x1E3C,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_set_small_legs_jump = 0x1E3D,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_set_small_rotate_jump = 0x1E3E,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_setup_glass = 0x1E3F,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_setup_jumpoints = 0x1E40,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_setup_weapon = 0x1E41,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_should_shift_allies = 0x1E42,
  SCR_OPAQUE_STRING_combat_rappel_garden_entry_tree = 0x1E44,
  SCR_OPAQUE_STRING_combat_rappel_rope_coil_baker = 0x1E45,
  SCR_OPAQUE_STRING_combat_rappel_rope_coil_player = 0x1E46,
  SCR_OPAQUE_STRING_combat_rappel_rope_coil_rorke = 0x1E47,
  SCR_OPAQUE_STRING_combat_rappel_rope_rorke = 0x1E48,
  SCR_OPAQUE_STRING_combat_rappel_spawn_garden_entry_enemies = 0x1E49,
  SCR_OPAQUE_STRING_combat_resource = 0x1E4B,
  SCR_OPAQUE_STRING_combat_two = 0x1E4C,
  SCR_OPAQUE_STRING_combat_two_dialogue = 0x1E4E,
  SCR_OPAQUE_STRING_combatbehavior = 0x1E54,
  SCR_OPAQUE_STRING_combathigh = 0x1E57,
  SCR_OPAQUE_STRING_combathighicon = 0x1E58,
  SCR_OPAQUE_STRING_combathighoverlay = 0x1E59,
  SCR_OPAQUE_STRING_combatidle = 0x1E5B,
  SCR_OPAQUE_STRING_combatidlepreventoverlappingplayer = 0x1E5C,
  SCR_OPAQUE_STRING_combatmemorytimeconst = 0x1E5D,
  SCR_OPAQUE_STRING_combatspeedscalar = 0x1E60,
  SCR_OPAQUE_STRING_combatstate = 0x1E62,
  SCR_OPAQUE_STRING_combattime = 0x1E63,
  SCR_OPAQUE_STRING_comeback = 0x1E64,
  SCR_OPAQUE_STRING_comexpfuncs = 0x1E65,
  SCR_OPAQUE_STRING_comm_center_2_pieces = 0x1E67,
  SCR_OPAQUE_STRING_command_fail_late_death = 0x1E68,
  SCR_OPAQUE_STRING_command_geyser_light = 0x1E69,
  SCR_OPAQUE_STRING_command_goal = 0x1E6A,
  SCR_OPAQUE_STRING_command_platform_bag_baker = 0x1E6D,
  SCR_OPAQUE_STRING_command_platform_bag_cypher = 0x1E6E,
  SCR_OPAQUE_STRING_command_platform_bag_keegan = 0x1E6F,
  SCR_OPAQUE_STRING_command_platform_bag_player = 0x1E70,
  SCR_OPAQUE_STRING_commander_can_takeover_bot = 0x1E75,
  SCR_OPAQUE_STRING_commander_create_dom_obj = 0x1E77,
  SCR_OPAQUE_STRING_commander_gametype_initialized = 0x1E79,
  SCR_OPAQUE_STRING_commander_gave_hint = 0x1E7A,
  SCR_OPAQUE_STRING_commander_handle_notify_quick = 0x1E7B,
  SCR_OPAQUE_STRING_commander_hint_delete_on_commander_menu = 0x1E7D,
  SCR_OPAQUE_STRING_commander_initialize_gametype = 0x1E7F,
  SCR_OPAQUE_STRING_commander_last_tactic_applied = 0x1E80,
  SCR_OPAQUE_STRING_commander_last_tactic_selected = 0x1E81,
  SCR_OPAQUE_STRING_commander_loadout_class_callback = 0x1E82,
  SCR_OPAQUE_STRING_commander_moment = 0x1E83,
  SCR_OPAQUE_STRING_commander_monitor_tactics = 0x1E84,
  SCR_OPAQUE_STRING_commander_or_bot_change_class = 0x1E85,
  SCR_OPAQUE_STRING_commander_order_ack = 0x1E86,
  SCR_OPAQUE_STRING_commander_speaking = 0x1E87,
  SCR_OPAQUE_STRING_commander_spectate_first_available_bot = 0x1E89,
  SCR_OPAQUE_STRING_commander_spectate_next_bot = 0x1E8A,
  SCR_OPAQUE_STRING_commander_takeover_first_available_bot = 0x1E8B,
  SCR_OPAQUE_STRING_commander_vo = 0x1E8C,
  SCR_OPAQUE_STRING_commander_wait_connect = 0x1E8D,
  SCR_OPAQUE_STRING_commanding_bot = 0x1E8F,
  SCR_OPAQUE_STRING_common_flash_check = 0x1E90,
  SCR_OPAQUE_STRING_common_tryuse_actions = 0x1E92,
  SCR_OPAQUE_STRING_commonstarttime = 0x1E93,
  SCR_OPAQUE_STRING_compare = 0x1E94,
  SCR_OPAQUE_STRING_comparesizesfx = 0x1E96,
  SCR_OPAQUE_STRING_compass_flash = 0x1E98,
  SCR_OPAQUE_STRING_compass_objectives = 0x1E99,
  SCR_OPAQUE_STRING_compassiconenemy = 0x1E9C,
  SCR_OPAQUE_STRING_compassiconfriendly = 0x1E9D,
  SCR_OPAQUE_STRING_complete_me = 0x1E9F,
  SCR_OPAQUE_STRING_completednodes = 0x1EA2,
  SCR_OPAQUE_STRING_complex_expl = 0x1EA3,
  SCR_OPAQUE_STRING_complex_script = 0x1EA6,
  SCR_OPAQUE_STRING_complexobjectives = 0x1EA7,
  SCR_OPAQUE_STRING_compute_round_based_percentages = 0x1EA8,
  SCR_OPAQUE_STRING_computer_guys_runin = 0x1EA9,
  SCR_OPAQUE_STRING_computer_guys_runin_vo = 0x1EAA,
  SCR_OPAQUE_STRING_computer_idf = 0x1EAB,
  SCR_OPAQUE_STRING_conf_fx = 0x1EAD,
  SCR_OPAQUE_STRING_config = 0x1EAE,
  SCR_OPAQUE_STRING_confirmed = 0x1EAF,
  SCR_OPAQUE_STRING_connect_and_start_tarps = 0x1EB0,
  SCR_OPAQUE_STRING_connect_door_path = 0x1EB1,
  SCR_OPAQUE_STRING_connect_nodes_after_crash = 0x1EB3,
  SCR_OPAQUE_STRING_connect_time = 0x1EB4,
  SCR_OPAQUE_STRING_connect_traverse = 0x1EB5,
  SCR_OPAQUE_STRING_connect_watch = 0x1EB6,
  SCR_OPAQUE_STRING_connected_nodes = 0x1EB9,
  SCR_OPAQUE_STRING_connectedpostgame = 0x1EBC,
  SCR_OPAQUE_STRING_connection_sound = 0x1EBD,
  SCR_OPAQUE_STRING_connecttime = 0x1EC1,
  SCR_OPAQUE_STRING_connecttraverses = 0x1EC2,
  SCR_OPAQUE_STRING_considerthrowgrenade = 0x1EC5,
  SCR_OPAQUE_STRING_consolation = 0x1EC6,
  SCR_OPAQUE_STRING_console = 0x1EC7,
  SCR_OPAQUE_STRING_console_scene_dialogue = 0x1EC8,
  SCR_OPAQUE_STRING_console_scene_player_blocker = 0x1EC9,
  SCR_OPAQUE_STRING_const_baker = 0x1ECA,
  SCR_OPAQUE_STRING_constraingametype = 0x1ED0,
  SCR_OPAQUE_STRING_constrict_view = 0x1ED2,
  SCR_OPAQUE_STRING_constrict_view_count = 0x1ED3,
  SCR_OPAQUE_STRING_contact_points = 0x1ED4,
  SCR_OPAQUE_STRING_context_sensative_dialog_filler = 0x1ED8,
  SCR_OPAQUE_STRING_context_sensative_dialog_guy_in_sight = 0x1EDA,
  SCR_OPAQUE_STRING_context_sensative_dialog_guy_in_sight_check = 0x1EDB,
  SCR_OPAQUE_STRING_context_sensative_dialog_kill = 0x1EDD,
  SCR_OPAQUE_STRING_context_sensative_dialog_kill_thread = 0x1EDE,
  SCR_OPAQUE_STRING_context_sensative_dialog_locations = 0x1EDF,
  SCR_OPAQUE_STRING_context_sensative_dialog_locations_add_notify_event = 0x1EE0,
  SCR_OPAQUE_STRING_context_sensative_dialog_locations_thread = 0x1EE1,
  SCR_OPAQUE_STRING_context_sensative_dialog_play_random_group_sound = 0x1EE2,
  SCR_OPAQUE_STRING_context_sensative_dialog_secondary_explosion_vehicle = 0x1EE3,
  SCR_OPAQUE_STRING_context_sensative_dialog_timedout = 0x1EE4,
  SCR_OPAQUE_STRING_context_sensative_dialog_vehicledeath = 0x1EE6,
  SCR_OPAQUE_STRING_context_sensative_dialog_vehiclespawn = 0x1EE7,
  SCR_OPAQUE_STRING_continous_fire = 0x1EE8,
  SCR_OPAQUE_STRING_continuedrivenmovement = 0x1EE9,
  SCR_OPAQUE_STRING_continuemovement = 0x1EEA,
  SCR_OPAQUE_STRING_control_nvg_lightmodels = 0x1EEC,
  SCR_OPAQUE_STRING_control_nvg_staticscreens_off = 0x1EED,
  SCR_OPAQUE_STRING_control_nvg_staticscreens_on = 0x1EEE,
  SCR_OPAQUE_STRING_control_panel_setup_lights = 0x1EEF,
  SCR_OPAQUE_STRING_control_room_combat = 0x1EF0,
  SCR_OPAQUE_STRING_control_room_enemies = 0x1EF1,
  SCR_OPAQUE_STRING_control_room_enemies_upper_setup = 0x1EF2,
  SCR_OPAQUE_STRING_control_room_enemy_setup = 0x1EF3,
  SCR_OPAQUE_STRING_control_screen_bink_init = 0x1EF6,
  SCR_OPAQUE_STRING_controlled_dog = 0x1EF7,
  SCR_OPAQUE_STRING_controlling_dog = 0x1EF8,
  SCR_OPAQUE_STRING_controlroom_top_2 = 0x1EFA,
  SCR_OPAQUE_STRING_controlsfrozen = 0x1EFB,
  SCR_OPAQUE_STRING_contuing_to_move_check = 0x1EFD,
  SCR_OPAQUE_STRING_converge_on_target = 0x1EFE,
  SCR_OPAQUE_STRING_conversation_start = 0x1EFF,
  SCR_OPAQUE_STRING_conversation_stop = 0x1F00,
  SCR_OPAQUE_STRING_convert_color_to_short_string = 0x1F01,
  SCR_OPAQUE_STRING_convert_fov_string = 0x1F02,
  SCR_OPAQUE_STRING_convert_guy_to_drone = 0x1F03,
  SCR_OPAQUE_STRING_convert_moving_cover_enemies_to_wave_3 = 0x1F04,
  SCR_OPAQUE_STRING_convert_to_fake_riders = 0x1F06,
  SCR_OPAQUE_STRING_convert_to_fireworks_effect = 0x1F07,
  SCR_OPAQUE_STRING_convert_to_time_string = 0x1F08,
  SCR_OPAQUE_STRING_convo_generator = 0x1F09,
  SCR_OPAQUE_STRING_convoy = 0x1F0A,
  SCR_OPAQUE_STRING_convoy_checkpoint = 0x1F0C,
  SCR_OPAQUE_STRING_convoy_checkpoint_spawn = 0x1F0D,
  SCR_OPAQUE_STRING_convoy_death_func = 0x1F0E,
  SCR_OPAQUE_STRING_convoy_kill_player = 0x1F0F,
  SCR_OPAQUE_STRING_convoy_riders_death_func = 0x1F10,
  SCR_OPAQUE_STRING_convoy_riders_react_func = 0x1F11,
  SCR_OPAQUE_STRING_convoy_spawn_func = 0x1F13,
  SCR_OPAQUE_STRING_convoy_spawn_logic = 0x1F14,
  SCR_OPAQUE_STRING_convoy_tall_barricade_01 = 0x1F16,
  SCR_OPAQUE_STRING_convoy_tall_barricade_02 = 0x1F17,
  SCR_OPAQUE_STRING_convoy_think = 0x1F18,
  SCR_OPAQUE_STRING_convoy_veh_01 = 0x1F19,
  SCR_OPAQUE_STRING_convoy_veh_01a = 0x1F1A,
  SCR_OPAQUE_STRING_convoy_veh_03 = 0x1F1C,
  SCR_OPAQUE_STRING_convoy_veh_05 = 0x1F1F,
  SCR_OPAQUE_STRING_cool_spawn = 0x1F22,
  SCR_OPAQUE_STRING_cool_walk = 0x1F23,
  SCR_OPAQUE_STRING_cooldowntime = 0x1F26,
  SCR_OPAQUE_STRING_cooldownwaittime = 0x1F27,
  SCR_OPAQUE_STRING_coop_breached_from_same_door_in_a_muliti_door_room = 0x1F28,
  SCR_OPAQUE_STRING_coop_icon_blinkcrement = 0x1F29,
  SCR_OPAQUE_STRING_coop_icon_color_blink = 0x1F2B,
  SCR_OPAQUE_STRING_coop_icon_color_damage = 0x1F2C,
  SCR_OPAQUE_STRING_coop_icon_color_downed = 0x1F2D,
  SCR_OPAQUE_STRING_coop_icon_color_dying = 0x1F2E,
  SCR_OPAQUE_STRING_coop_icon_color_normal = 0x1F2F,
  SCR_OPAQUE_STRING_coop_icon_color_shoot = 0x1F30,
  SCR_OPAQUE_STRING_coop_icon_state = 0x1F31,
  SCR_OPAQUE_STRING_coop_player_in_special_ops_survival = 0x1F32,
  SCR_OPAQUE_STRING_coop_player_touching_valid_door_volume = 0x1F33,
  SCR_OPAQUE_STRING_coop_with_one_player_downed = 0x1F35,
  SCR_OPAQUE_STRING_copier = 0x1F37,
  SCR_OPAQUE_STRING_copy_adrenaline = 0x1F38,
  SCR_OPAQUE_STRING_copy_bar = 0x1F3B,
  SCR_OPAQUE_STRING_copy_cat = 0x1F3C,
  SCR_OPAQUE_STRING_copy_ents = 0x1F3D,
  SCR_OPAQUE_STRING_copy_fullweaponlist = 0x1F3E,
  SCR_OPAQUE_STRING_copy_killstreak_status = 0x1F3F,
  SCR_OPAQUE_STRING_copy_node = 0x1F41,
  SCR_OPAQUE_STRING_copy_weapon_ammo_clip = 0x1F42,
  SCR_OPAQUE_STRING_copy_weapon_ammo_stock = 0x1F43,
  SCR_OPAQUE_STRING_copy_weapon_current = 0x1F44,
  SCR_OPAQUE_STRING_copymachine_ai = 0x1F46,
  SCR_OPAQUE_STRING_copymachine_cleanup = 0x1F48,
  SCR_OPAQUE_STRING_copymachine_falling_vo = 0x1F49,
  SCR_OPAQUE_STRING_copymachine_window_event = 0x1F4C,
  SCR_OPAQUE_STRING_core_lights_red = 0x1F4D,
  SCR_OPAQUE_STRING_corner_clearfacialanim = 0x1F4E,
  SCR_OPAQUE_STRING_corner_playaimfacialanim = 0x1F4F,
  SCR_OPAQUE_STRING_corner_playcornerfacialanim = 0x1F50,
  SCR_OPAQUE_STRING_cornerdirection = 0x1F55,
  SCR_OPAQUE_STRING_cornered_building_entry_pre_load = 0x1F56,
  SCR_OPAQUE_STRING_cornered_destruct_pre_load = 0x1F57,
  SCR_OPAQUE_STRING_cornered_falling_death = 0x1F58,
  SCR_OPAQUE_STRING_cornered_garden_pre_load = 0x1F59,
  SCR_OPAQUE_STRING_cornered_interior_pre_load = 0x1F5B,
  SCR_OPAQUE_STRING_cornered_player_arms = 0x1F5E,
  SCR_OPAQUE_STRING_cornered_player_legs = 0x1F5F,
  SCR_OPAQUE_STRING_cornered_rappel_pre_load = 0x1F60,
  SCR_OPAQUE_STRING_cornered_start_random_wind = 0x1F61,
  SCR_OPAQUE_STRING_cornered_starts = 0x1F63,
  SCR_OPAQUE_STRING_cornered_stop_random_wind = 0x1F64,
  SCR_OPAQUE_STRING_cornered_stop_rappel = 0x1F65,
  SCR_OPAQUE_STRING_cornerline_height = 0x1F66,
  SCR_OPAQUE_STRING_cornermode = 0x1F67,
  SCR_OPAQUE_STRING_cornerreload = 0x1F68,
  SCR_OPAQUE_STRING_cornerrightgrenadedeath = 0x1F69,
  SCR_OPAQUE_STRING_cornersights = 0x1F6A,
  SCR_OPAQUE_STRING_corpse = 0x1F6B,
  SCR_OPAQUE_STRING_corpse_behavior_doesnt_require_player_sight = 0x1F6C,
  SCR_OPAQUE_STRING_corpse_clear = 0x1F6D,
  SCR_OPAQUE_STRING_corpse_entity = 0x1F6E,
  SCR_OPAQUE_STRING_corpse_entnums = 0x1F6F,
  SCR_OPAQUE_STRING_corpse_height = 0x1F70,
  SCR_OPAQUE_STRING_corpse_ragdoll_when_vertical = 0x1F71,
  SCR_OPAQUE_STRING_corpseflag = 0x1F73,
  SCR_OPAQUE_STRING_cos45 = 0x1F76,
  SCR_OPAQUE_STRING_cosine = 0x1F77,
  SCR_OPAQUE_STRING_cosine11_25 = 0x1F78,
  SCR_OPAQUE_STRING_cosine15 = 0x1F79,
  SCR_OPAQUE_STRING_cosine45 = 0x1F7B,
  SCR_OPAQUE_STRING_cost = 0x1F7D,
  SCR_OPAQUE_STRING_cost_display = 0x1F7E,
  SCR_OPAQUE_STRING_coughing_active = 0x1F7F,
  SCR_OPAQUE_STRING_countdown_sound = 0x1F81,
  SCR_OPAQUE_STRING_counted = 0x1F83,
  SCR_OPAQUE_STRING_countryids = 0x1F86,
  SCR_OPAQUE_STRING_courtyard_cleanup_enemies = 0x1F87,
  SCR_OPAQUE_STRING_courtyard_directory = 0x1F88,
  SCR_OPAQUE_STRING_courtyard_guys_notify_on_death = 0x1F8A,
  SCR_OPAQUE_STRING_courtyard_guys_walla = 0x1F8B,
  SCR_OPAQUE_STRING_courtyard_hazmat_guy_think = 0x1F8C,
  SCR_OPAQUE_STRING_courtyard_intro_ally_vo = 0x1F8D,
  SCR_OPAQUE_STRING_courtyard_intro_elevator = 0x1F8F,
  SCR_OPAQUE_STRING_courtyard_intro_elevator_guy = 0x1F90,
  SCR_OPAQUE_STRING_courtyard_intro_elevator_guy_fail = 0x1F91,
  SCR_OPAQUE_STRING_courtyard_intro_elevator_guys = 0x1F92,
  SCR_OPAQUE_STRING_courtyard_office_a_doors = 0x1F95,
  SCR_OPAQUE_STRING_courtyard_office_chair = 0x1F97,
  SCR_OPAQUE_STRING_courtyard_office_death = 0x1F99,
  SCR_OPAQUE_STRING_courtyard_office_enemies = 0x1F9A,
  SCR_OPAQUE_STRING_courtyard_office_enemy_anim = 0x1F9B,
  SCR_OPAQUE_STRING_courtyard_office_glass = 0x1F9C,
  SCR_OPAQUE_STRING_courtyard_office_props = 0x1F9D,
  SCR_OPAQUE_STRING_courtyard_office_stealth_end = 0x1F9E,
  SCR_OPAQUE_STRING_courtyard_rig_kill = 0x1F9F,
  SCR_OPAQUE_STRING_courtyard_transient_unload = 0x1FA2,
  SCR_OPAQUE_STRING_cover_warnings_disabled = 0x1FAA,
  SCR_OPAQUE_STRING_covercrouchfail = 0x1FAD,
  SCR_OPAQUE_STRING_covercrouchgrenade = 0x1FAE,
  SCR_OPAQUE_STRING_covercrouchlean_aimmode = 0x1FAF,
  SCR_OPAQUE_STRING_covercrouchleanpitch = 0x1FB0,
  SCR_OPAQUE_STRING_coverenterpos = 0x1FB1,
  SCR_OPAQUE_STRING_coverexit = 0x1FB2,
  SCR_OPAQUE_STRING_coverexitangles = 0x1FB3,
  SCR_OPAQUE_STRING_coverexitpostdist = 0x1FB6,
  SCR_OPAQUE_STRING_covermode = 0x1FBB,
  SCR_OPAQUE_STRING_covermulti_choosehidestate = 0x1FBC,
  SCR_OPAQUE_STRING_covermulti_dotransition = 0x1FBD,
  SCR_OPAQUE_STRING_covermulti_enterstate = 0x1FBE,
  SCR_OPAQUE_STRING_covermulti_exitstate = 0x1FBF,
  SCR_OPAQUE_STRING_covermulti_getanimtransition = 0x1FC0,
  SCR_OPAQUE_STRING_covermulti_getnonrandomvaliddir = 0x1FC2,
  SCR_OPAQUE_STRING_covermulti_getrandomvaliddir = 0x1FC3,
  SCR_OPAQUE_STRING_covermulti_getstatefromdir = 0x1FC4,
  SCR_OPAQUE_STRING_covermulti_isvaliddir = 0x1FC5,
  SCR_OPAQUE_STRING_covermulti_setstate = 0x1FC7,
  SCR_OPAQUE_STRING_covermulti_think = 0x1FC9,
  SCR_OPAQUE_STRING_coverposestablishedtime = 0x1FCC,
  SCR_OPAQUE_STRING_coverreload = 0x1FCE,
  SCR_OPAQUE_STRING_coverrightgrenade = 0x1FD1,
  SCR_OPAQUE_STRING_coversetupanim = 0x1FD2,
  SCR_OPAQUE_STRING_coverstand = 0x1FD3,
  SCR_OPAQUE_STRING_coverstandfail = 0x1FD4,
  SCR_OPAQUE_STRING_coverstandgrenade = 0x1FD5,
  SCR_OPAQUE_STRING_covertransangles = 0x1FD8,
  SCR_OPAQUE_STRING_covertranspredist = 0x1FDB,
  SCR_OPAQUE_STRING_covertype = 0x1FDC,
  SCR_OPAQUE_STRING_cq_combat_movement = 0x1FDF,
  SCR_OPAQUE_STRING_cq_enemies = 0x1FE0,
  SCR_OPAQUE_STRING_cq_room_destruction = 0x1FE1,
  SCR_OPAQUE_STRING_cqb_aim = 0x1FE2,
  SCR_OPAQUE_STRING_cqb_anims = 0x1FE4,
  SCR_OPAQUE_STRING_cqb_clearfacialanim = 0x1FE5,
  SCR_OPAQUE_STRING_cqb_dog = 0x1FE6,
  SCR_OPAQUE_STRING_cqb_door_open_slow = 0x1FE8,
  SCR_OPAQUE_STRING_cqb_door_shove = 0x1FE9,
  SCR_OPAQUE_STRING_cqb_encounter = 0x1FEA,
  SCR_OPAQUE_STRING_cqb_encounter_allies_move_up = 0x1FEB,
  SCR_OPAQUE_STRING_cqb_fans = 0x1FEC,
  SCR_OPAQUE_STRING_cqb_off_sprint_on = 0x1FED,
  SCR_OPAQUE_STRING_cqb_playfacialanim = 0x1FEF,
  SCR_OPAQUE_STRING_cqb_point_of_interest = 0x1FF0,
  SCR_OPAQUE_STRING_cqb_reloadinternal = 0x1FF1,
  SCR_OPAQUE_STRING_cqb_time = 0x1FF3,
  SCR_OPAQUE_STRING_cqb_wide_poi_track = 0x1FF5,
  SCR_OPAQUE_STRING_cqb_wide_target_track = 0x1FF6,
  SCR_OPAQUE_STRING_cqbenabled = 0x1FF7,
  SCR_OPAQUE_STRING_cqbpointsofinterest = 0x1FF8,
  SCR_OPAQUE_STRING_cqbtracking = 0x1FF9,
  SCR_OPAQUE_STRING_crack_exploder_test = 0x1FFE,
  SCR_OPAQUE_STRING_cranked = 0x2000,
  SCR_OPAQUE_STRING_cranked_end_time = 0x2001,
  SCR_OPAQUE_STRING_crankedbombtimer = 0x2002,
  SCR_OPAQUE_STRING_crash_blackhawk_fire_think = 0x2003,
  SCR_OPAQUE_STRING_crash_blackhawk_think = 0x2005,
  SCR_OPAQUE_STRING_crash_derailed_check = 0x2006,
  SCR_OPAQUE_STRING_crash_event = 0x2009,
  SCR_OPAQUE_STRING_crash_hidden_settings = 0x200A,
  SCR_OPAQUE_STRING_crash_model_damage = 0x200B,
  SCR_OPAQUE_STRING_crash_path_check = 0x200E,
  SCR_OPAQUE_STRING_crash_pilot_logic = 0x200F,
  SCR_OPAQUE_STRING_crash_site_a10_missile_dive_1 = 0x2011,
  SCR_OPAQUE_STRING_crash_site_a10_overhead = 0x2012,
  SCR_OPAQUE_STRING_crash_site_begin = 0x2014,
  SCR_OPAQUE_STRING_crash_site_init = 0x2016,
  SCR_OPAQUE_STRING_crash_site_main = 0x2017,
  SCR_OPAQUE_STRING_crash_site_vo = 0x2019,
  SCR_OPAQUE_STRING_crash_test_start = 0x201A,
  SCR_OPAQUE_STRING_crash_vehicle_on_death = 0x201C,
  SCR_OPAQUE_STRING_crashed_truck1 = 0x201E,
  SCR_OPAQUE_STRING_crashed_truck2 = 0x201F,
  SCR_OPAQUE_STRING_crashed_trucks = 0x2020,
  SCR_OPAQUE_STRING_crashedc17_waits = 0x2022,
  SCR_OPAQUE_STRING_crashedtank_waits = 0x2023,
  SCR_OPAQUE_STRING_crashing = 0x2024,
  SCR_OPAQUE_STRING_crashplane = 0x2025,
  SCR_OPAQUE_STRING_crashtimer = 0x2026,
  SCR_OPAQUE_STRING_crate_calculate_on_path_grid = 0x2027,
  SCR_OPAQUE_STRING_crate_can_use_always = 0x2028,
  SCR_OPAQUE_STRING_crate_clip = 0x202A,
  SCR_OPAQUE_STRING_crate_clip_of_doom = 0x202B,
  SCR_OPAQUE_STRING_crate_death_fling = 0x202C,
  SCR_OPAQUE_STRING_crate_get_bot_target = 0x202D,
  SCR_OPAQUE_STRING_crate_low_ammo_check = 0x2033,
  SCR_OPAQUE_STRING_crate_picked_up = 0x2035,
  SCR_OPAQUE_STRING_crateallcapturethink = 0x2038,
  SCR_OPAQUE_STRING_cratekill = 0x203B,
  SCR_OPAQUE_STRING_cratemodelenemyteamsupdater = 0x203D,
  SCR_OPAQUE_STRING_cratemodelplayerupdater = 0x203E,
  SCR_OPAQUE_STRING_cratenonownerusetime = 0x2040,
  SCR_OPAQUE_STRING_crateothercapturethink = 0x2041,
  SCR_OPAQUE_STRING_crateownercapturethink = 0x2042,
  SCR_OPAQUE_STRING_crateownerusetime = 0x2043,
  SCR_OPAQUE_STRING_crater_ledge_walk = 0x2046,
  SCR_OPAQUE_STRING_crater_reveal_dialogue = 0x2047,
  SCR_OPAQUE_STRING_cratesetupforuse = 0x2048,
  SCR_OPAQUE_STRING_crateteammodelupdater = 0x2049,
  SCR_OPAQUE_STRING_cratetype = 0x204A,
  SCR_OPAQUE_STRING_cratetypes = 0x204B,
  SCR_OPAQUE_STRING_crateusepostjuggernautupdater = 0x204D,
  SCR_OPAQUE_STRING_crateuseteamupdater = 0x204E,
  SCR_OPAQUE_STRING_crawl_breath_start = 0x2051,
  SCR_OPAQUE_STRING_crawl_fx = 0x2052,
  SCR_OPAQUE_STRING_crawl_fx_rate = 0x2053,
  SCR_OPAQUE_STRING_crawl_hurt_pulse = 0x2054,
  SCR_OPAQUE_STRING_crawl_out = 0x2055,
  SCR_OPAQUE_STRING_crawl_target_and_init_flags = 0x2056,
  SCR_OPAQUE_STRING_crawl_through_targets_to_init_flags = 0x2057,
  SCR_OPAQUE_STRING_crawling_guys_spawnfunc = 0x2059,
  SCR_OPAQUE_STRING_crawlingpainanimoverridefunc = 0x205B,
  SCR_OPAQUE_STRING_crawlingpaintransanim = 0x205C,
  SCR_OPAQUE_STRING_creaky_board = 0x205F,
  SCR_OPAQUE_STRING_create_anim_event = 0x2061,
  SCR_OPAQUE_STRING_create_anim_node = 0x2062,
  SCR_OPAQUE_STRING_create_anim_scene = 0x2063,
  SCR_OPAQUE_STRING_create_array_of_intel_items = 0x2065,
  SCR_OPAQUE_STRING_create_artillery_shell = 0x2067,
  SCR_OPAQUE_STRING_create_chyron_text = 0x206A,
  SCR_OPAQUE_STRING_create_client_overlay = 0x206B,
  SCR_OPAQUE_STRING_create_client_overlay_custom_size = 0x206C,
  SCR_OPAQUE_STRING_create_dog_start_point_ent = 0x2074,
  SCR_OPAQUE_STRING_create_door_sound_ents = 0x2075,
  SCR_OPAQUE_STRING_create_dvar = 0x2077,
  SCR_OPAQUE_STRING_create_escape_doors = 0x2078,
  SCR_OPAQUE_STRING_create_flare = 0x207A,
  SCR_OPAQUE_STRING_create_fresh_friendly_icon = 0x207C,
  SCR_OPAQUE_STRING_create_fx_ent_setup = 0x207D,
  SCR_OPAQUE_STRING_create_fx_menu = 0x207E,
  SCR_OPAQUE_STRING_create_fxlighting_object = 0x207F,
  SCR_OPAQUE_STRING_create_gain_credit_hud = 0x2080,
  SCR_OPAQUE_STRING_create_gamemessage_text = 0x2081,
  SCR_OPAQUE_STRING_create_hatchet = 0x2083,
  SCR_OPAQUE_STRING_create_hud = 0x2084,
  SCR_OPAQUE_STRING_create_hud_lower_right = 0x208B,
  SCR_OPAQUE_STRING_create_hud_section = 0x208D,
  SCR_OPAQUE_STRING_create_hud_static_overlay = 0x208E,
  SCR_OPAQUE_STRING_create_hud_upper_left = 0x208F,
  SCR_OPAQUE_STRING_create_hud_upper_right = 0x2090,
  SCR_OPAQUE_STRING_create_hud_vertical_meter = 0x2091,
  SCR_OPAQUE_STRING_create_hud_xm25_screen = 0x2093,
  SCR_OPAQUE_STRING_create_jump_point = 0x2095,
  SCR_OPAQUE_STRING_create_line = 0x2096,
  SCR_OPAQUE_STRING_create_lock = 0x2097,
  SCR_OPAQUE_STRING_create_looper = 0x2098,
  SCR_OPAQUE_STRING_create_loopsound = 0x2099,
  SCR_OPAQUE_STRING_create_mantle = 0x209A,
  SCR_OPAQUE_STRING_create_new_spawner_pool = 0x209E,
  SCR_OPAQUE_STRING_create_outofrange_hud = 0x20A0,
  SCR_OPAQUE_STRING_create_overlay_element = 0x20A1,
  SCR_OPAQUE_STRING_create_passengers = 0x20A2,
  SCR_OPAQUE_STRING_create_path = 0x20A3,
  SCR_OPAQUE_STRING_create_persistent_ice_breach_props = 0x20A4,
  SCR_OPAQUE_STRING_create_player_rig = 0x20A7,
  SCR_OPAQUE_STRING_create_player_surfacing_effects = 0x20A8,
  SCR_OPAQUE_STRING_create_pushed_dropped_weapon = 0x20A9,
  SCR_OPAQUE_STRING_create_qte_prompt = 0x20AA,
  SCR_OPAQUE_STRING_create_random_animation = 0x20AB,
  SCR_OPAQUE_STRING_create_reflection_objects = 0x20AE,
  SCR_OPAQUE_STRING_create_rog_controls = 0x20AF,
  SCR_OPAQUE_STRING_create_rumble_ent = 0x20B0,
  SCR_OPAQUE_STRING_create_single_missile_truck = 0x20B1,
  SCR_OPAQUE_STRING_create_sliding_space_door = 0x20B2,
  SCR_OPAQUE_STRING_create_smoke_and_ambience = 0x20B4,
  SCR_OPAQUE_STRING_create_start = 0x20B5,
  SCR_OPAQUE_STRING_create_sunflare_setting = 0x20B8,
  SCR_OPAQUE_STRING_create_trace_cache = 0x20B9,
  SCR_OPAQUE_STRING_create_track_struct = 0x20BA,
  SCR_OPAQUE_STRING_create_view_particle_source_locked = 0x20BF,
  SCR_OPAQUE_STRING_create_vision_set_fog = 0x20C0,
  SCR_OPAQUE_STRING_create_vo_data = 0x20C1,
  SCR_OPAQUE_STRING_create_warning_elem = 0x20C2,
  SCR_OPAQUE_STRING_create_world_model_from_ent_weapon = 0x20C3,
  SCR_OPAQUE_STRING_createairdropcrate = 0x20C5,
  SCR_OPAQUE_STRING_createart_transient_thread = 0x20C7,
  SCR_OPAQUE_STRING_createballdrone = 0x20C8,
  SCR_OPAQUE_STRING_createbar = 0x20C9,
  SCR_OPAQUE_STRING_createbombsquadmodel = 0x20CA,
  SCR_OPAQUE_STRING_createcarryremoteuav = 0x20CD,
  SCR_OPAQUE_STRING_createclientfontstring_func = 0x20D2,
  SCR_OPAQUE_STRING_createclienticon = 0x20D3,
  SCR_OPAQUE_STRING_createclientprogressbar = 0x20D4,
  SCR_OPAQUE_STRING_createclienttimer = 0x20D5,
  SCR_OPAQUE_STRING_createdogenemy = 0x20D7,
  SCR_OPAQUE_STRING_createdot = 0x20D8,
  SCR_OPAQUE_STRING_createdot_radius = 0x20D9,
  SCR_OPAQUE_STRING_createdropzones = 0x20DA,
  SCR_OPAQUE_STRING_createechoalias = 0x20DB,
  SCR_OPAQUE_STRING_createeffect = 0x20DC,
  SCR_OPAQUE_STRING_createexploder = 0x20DF,
  SCR_OPAQUE_STRING_createexploderex = 0x20E0,
  SCR_OPAQUE_STRING_createfontstring = 0x20E1,
  SCR_OPAQUE_STRING_createfx_centerprint = 0x20E5,
  SCR_OPAQUE_STRING_createfx_centerprint_thread = 0x20E6,
  SCR_OPAQUE_STRING_createfx_draw_enabled = 0x20E8,
  SCR_OPAQUE_STRING_createfx_inputlocked = 0x20EB,
  SCR_OPAQUE_STRING_createfx_loopcounter = 0x20EC,
  SCR_OPAQUE_STRING_createfx_offset = 0x20ED,
  SCR_OPAQUE_STRING_createfx_only_triggers = 0x20EE,
  SCR_OPAQUE_STRING_createfx_print3d = 0x20EF,
  SCR_OPAQUE_STRING_createfx_selecting = 0x20F0,
  SCR_OPAQUE_STRING_createfxbyfxid = 0x20F1,
  SCR_OPAQUE_STRING_createfxcursor = 0x20F2,
  SCR_OPAQUE_STRING_createfxexploders = 0x20F4,
  SCR_OPAQUE_STRING_createfxlogic = 0x20F5,
  SCR_OPAQUE_STRING_createfxmasks = 0x20F6,
  SCR_OPAQUE_STRING_createheli = 0x20F7,
  SCR_OPAQUE_STRING_createhordecrates = 0x20F9,
  SCR_OPAQUE_STRING_createhumanoidenemy = 0x20FB,
  SCR_OPAQUE_STRING_createicon_hudelem = 0x20FD,
  SCR_OPAQUE_STRING_createims = 0x20FE,
  SCR_OPAQUE_STRING_createimsforplayer = 0x20FF,
  SCR_OPAQUE_STRING_createintervalsound = 0x2100,
  SCR_OPAQUE_STRING_createlbguard = 0x2101,
  SCR_OPAQUE_STRING_createline = 0x2102,
  SCR_OPAQUE_STRING_createloopeffect = 0x2104,
  SCR_OPAQUE_STRING_createloopsound = 0x2105,
  SCR_OPAQUE_STRING_createmuggercrates = 0x2108,
  SCR_OPAQUE_STRING_createmultipliertext = 0x2109,
  SCR_OPAQUE_STRING_createnewexploder = 0x210A,
  SCR_OPAQUE_STRING_createobject = 0x210B,
  SCR_OPAQUE_STRING_createobjective = 0x210C,
  SCR_OPAQUE_STRING_createoneshoteffect = 0x210E,
  SCR_OPAQUE_STRING_createplaneasheli = 0x2110,
  SCR_OPAQUE_STRING_createportal = 0x2112,
  SCR_OPAQUE_STRING_createportals = 0x2113,
  SCR_OPAQUE_STRING_createprimaryprogressbar = 0x2114,
  SCR_OPAQUE_STRING_createprimaryprogressbartext = 0x2115,
  SCR_OPAQUE_STRING_createprisoner = 0x2116,
  SCR_OPAQUE_STRING_createremoteuav = 0x2118,
  SCR_OPAQUE_STRING_createrpgrepulsors = 0x2119,
  SCR_OPAQUE_STRING_createserverfontstring = 0x211D,
  SCR_OPAQUE_STRING_createservertimer = 0x211F,
  SCR_OPAQUE_STRING_createspendhinthud = 0x2120,
  SCR_OPAQUE_STRING_createsquad = 0x2121,
  SCR_OPAQUE_STRING_createstruct = 0x2122,
  SCR_OPAQUE_STRING_createtags = 0x2123,
  SCR_OPAQUE_STRING_createtank = 0x2124,
  SCR_OPAQUE_STRING_createteamobjpoint = 0x2126,
  SCR_OPAQUE_STRING_createteamprogressbartext = 0x2128,
  SCR_OPAQUE_STRING_createtimer = 0x2129,
  SCR_OPAQUE_STRING_createturret = 0x212A,
  SCR_OPAQUE_STRING_createzones = 0x212F,
  SCR_OPAQUE_STRING_credits = 0x2130,
  SCR_OPAQUE_STRING_credits_spacing = 0x2133,
  SCR_OPAQUE_STRING_creepwalk_traverse_over_small = 0x2136,
  SCR_OPAQUE_STRING_creepwalk_traverse_under = 0x2138,
  SCR_OPAQUE_STRING_crew_quarters_combat = 0x213A,
  SCR_OPAQUE_STRING_crew_quarters_crew_killed = 0x213C,
  SCR_OPAQUE_STRING_critchance = 0x213E,
  SCR_OPAQUE_STRING_critialhit = 0x213F,
  SCR_OPAQUE_STRING_critical_factor = 0x2141,
  SCR_OPAQUE_STRING_criticalfactors_awayfromenemies = 0x2142,
  SCR_OPAQUE_STRING_criticalfactors_domination = 0x2143,
  SCR_OPAQUE_STRING_criticalfactors_nearteam = 0x2145,
  SCR_OPAQUE_STRING_criticalfactors_safeguard = 0x2146,
  SCR_OPAQUE_STRING_crnd_bar_amb = 0x2148,
  SCR_OPAQUE_STRING_crossproduct = 0x214E,
  SCR_OPAQUE_STRING_crouchrun_combatanim = 0x2153,
  SCR_OPAQUE_STRING_crouchrun_runnormal = 0x2154,
  SCR_OPAQUE_STRING_crouchrun_runoverride = 0x2155,
  SCR_OPAQUE_STRING_crouchruntocrouch = 0x2156,
  SCR_OPAQUE_STRING_crouchruntopronerun = 0x2158,
  SCR_OPAQUE_STRING_crouchruntopronewalk = 0x2159,
  SCR_OPAQUE_STRING_crouchstop_begin = 0x215B,
  SCR_OPAQUE_STRING_crouchtocrouchrun = 0x215C,
  SCR_OPAQUE_STRING_crouchtoprone = 0x215E,
  SCR_OPAQUE_STRING_crouchtopronewalk = 0x2160,
  SCR_OPAQUE_STRING_crouchtostand = 0x2161,
  SCR_OPAQUE_STRING_crt_plane = 0x2167,
  SCR_OPAQUE_STRING_crush_front_gaz = 0x2168,
  SCR_OPAQUE_STRING_crush_mobile_gaz = 0x2169,
  SCR_OPAQUE_STRING_crush_player_with_floating_lynx = 0x216A,
  SCR_OPAQUE_STRING_crush_rear_gaz = 0x216B,
  SCR_OPAQUE_STRING_crush_stop_sign_when_near_tank = 0x216C,
  SCR_OPAQUE_STRING_cspline_adjusttime = 0x216F,
  SCR_OPAQUE_STRING_cspline_calctangent = 0x2170,
  SCR_OPAQUE_STRING_cspline_findpathnodes = 0x2173,
  SCR_OPAQUE_STRING_cspline_getnodes = 0x2174,
  SCR_OPAQUE_STRING_cspline_initnoise = 0x2177,
  SCR_OPAQUE_STRING_cspline_makenoisepathnodes = 0x217A,
  SCR_OPAQUE_STRING_cspline_makepath = 0x217B,
  SCR_OPAQUE_STRING_cspline_makepath1seg = 0x217C,
  SCR_OPAQUE_STRING_cspline_makepathtopoint = 0x217D,
  SCR_OPAQUE_STRING_cspline_noise = 0x217F,
  SCR_OPAQUE_STRING_cspline_speedfromdistance = 0x2180,
  SCR_OPAQUE_STRING_cspline_test = 0x2181,
  SCR_OPAQUE_STRING_cspline_testnodes = 0x2182,
  SCR_OPAQUE_STRING_cspline_time = 0x2183,
  SCR_OPAQUE_STRING_csplineseg_calccoeffs = 0x2184,
  SCR_OPAQUE_STRING_csplineseg_calccoeffscapspeed = 0x2185,
  SCR_OPAQUE_STRING_csplineseg_calclengthbystepping = 0x2186,
  SCR_OPAQUE_STRING_csplineseg_calctopspeed = 0x2187,
  SCR_OPAQUE_STRING_csplineseg_calctopspeedbystepping = 0x2189,
  SCR_OPAQUE_STRING_csplineseg_getpoint = 0x218B,
  SCR_OPAQUE_STRING_csv_include = 0x218C,
  SCR_OPAQUE_STRING_csv_lines = 0x218D,
  SCR_OPAQUE_STRING_cull_spawners_from_killspawner = 0x218F,
  SCR_OPAQUE_STRING_cull_trigger_logic = 0x2191,
  SCR_OPAQUE_STRING_cur_defend_angle_override = 0x2192,
  SCR_OPAQUE_STRING_cur_defend_point_override = 0x2194,
  SCR_OPAQUE_STRING_cur_defend_stance = 0x2195,
  SCR_OPAQUE_STRING_cur_node = 0x2197,
  SCR_OPAQUE_STRING_cur_node_check_delete = 0x2198,
  SCR_OPAQUE_STRING_curautosave = 0x2199,
  SCR_OPAQUE_STRING_curclass = 0x219A,
  SCR_OPAQUE_STRING_curdefvalue = 0x219B,
  SCR_OPAQUE_STRING_curmeleetarget = 0x219E,
  SCR_OPAQUE_STRING_curorigin = 0x219F,
  SCR_OPAQUE_STRING_curprogress = 0x21A0,
  SCR_OPAQUE_STRING_curr_betty = 0x21A1,
  SCR_OPAQUE_STRING_curr_interruption = 0x21A2,
  SCR_OPAQUE_STRING_curr_movetime = 0x21A3,
  SCR_OPAQUE_STRING_currectlocindex = 0x21A5,
  SCR_OPAQUE_STRING_currency_scale_per_hive = 0x21A7,
  SCR_OPAQUE_STRING_current_accuracy = 0x21A8,
  SCR_OPAQUE_STRING_current_alien_count = 0x21A9,
  SCR_OPAQUE_STRING_current_anim = 0x21AA,
  SCR_OPAQUE_STRING_current_anim_data_scene = 0x21AB,
  SCR_OPAQUE_STRING_current_attackers = 0x21AD,
  SCR_OPAQUE_STRING_current_audio_zone = 0x21AE,
  SCR_OPAQUE_STRING_current_binocular_zoom_level = 0x21AF,
  SCR_OPAQUE_STRING_current_challenge = 0x21B0,
  SCR_OPAQUE_STRING_current_challenge_exist = 0x21B1,
  SCR_OPAQUE_STRING_current_challenge_index = 0x21B2,
  SCR_OPAQUE_STRING_current_challenge_is = 0x21B3,
  SCR_OPAQUE_STRING_current_challenge_percent = 0x21B4,
  SCR_OPAQUE_STRING_current_challenge_progress_current = 0x21B5,
  SCR_OPAQUE_STRING_current_challenge_progress_max = 0x21B6,
  SCR_OPAQUE_STRING_current_challenge_target_player = 0x21B7,
  SCR_OPAQUE_STRING_current_color_order = 0x21BA,
  SCR_OPAQUE_STRING_current_cycle_num = 0x21BC,
  SCR_OPAQUE_STRING_current_dist_to_top = 0x21BD,
  SCR_OPAQUE_STRING_current_drill_health = 0x21BE,
  SCR_OPAQUE_STRING_current_drill_time = 0x21BF,
  SCR_OPAQUE_STRING_current_end = 0x21C0,
  SCR_OPAQUE_STRING_current_enemy = 0x21C1,
  SCR_OPAQUE_STRING_current_enemy_vol = 0x21C2,
  SCR_OPAQUE_STRING_current_event = 0x21C3,
  SCR_OPAQUE_STRING_current_fallbackers = 0x21C4,
  SCR_OPAQUE_STRING_current_follow_path = 0x21C5,
  SCR_OPAQUE_STRING_current_foot = 0x21C6,
  SCR_OPAQUE_STRING_current_global_hint = 0x21C7,
  SCR_OPAQUE_STRING_current_high_volume = 0x21C8,
  SCR_OPAQUE_STRING_current_hint = 0x21C9,
  SCR_OPAQUE_STRING_current_hive_name = 0x21CB,
  SCR_OPAQUE_STRING_current_intensity = 0x21CC,
  SCR_OPAQUE_STRING_current_interrupt_status = 0x21CE,
  SCR_OPAQUE_STRING_current_lane_monitor = 0x21D0,
  SCR_OPAQUE_STRING_current_mode_hud = 0x21D1,
  SCR_OPAQUE_STRING_current_position = 0x21D3,
  SCR_OPAQUE_STRING_current_sniff_zone = 0x21D7,
  SCR_OPAQUE_STRING_current_speed_percent = 0x21D8,
  SCR_OPAQUE_STRING_current_spit_node = 0x21D9,
  SCR_OPAQUE_STRING_current_sun = 0x21DD,
  SCR_OPAQUE_STRING_current_sunflare_setting = 0x21DE,
  SCR_OPAQUE_STRING_current_swing_pos = 0x21DF,
  SCR_OPAQUE_STRING_current_target = 0x21E0,
  SCR_OPAQUE_STRING_current_target_hud_count = 0x21E1,
  SCR_OPAQUE_STRING_current_vol_acceptable = 0x21E2,
  SCR_OPAQUE_STRING_current_volume = 0x21E3,
  SCR_OPAQUE_STRING_current_volumes = 0x21E4,
  SCR_OPAQUE_STRING_current_yellow_enemy_replenisher = 0x21E5,
  SCR_OPAQUE_STRING_currentanimstate = 0x21EB,
  SCR_OPAQUE_STRING_currentcolorcode = 0x21EF,
  SCR_OPAQUE_STRING_currentcolorforced = 0x21F0,
  SCR_OPAQUE_STRING_currentdialogimportance = 0x21F1,
  SCR_OPAQUE_STRING_currentdodgeanim = 0x21F4,
  SCR_OPAQUE_STRING_currentenemycount = 0x21F5,
  SCR_OPAQUE_STRING_currentfireworkslocation = 0x21F6,
  SCR_OPAQUE_STRING_currentlylocking = 0x21FA,
  SCR_OPAQUE_STRING_currentowner = 0x21FC,
  SCR_OPAQUE_STRING_currentroundnumber = 0x21FF,
  SCR_OPAQUE_STRING_currentstate = 0x2200,
  SCR_OPAQUE_STRING_currenttrig = 0x2207,
  SCR_OPAQUE_STRING_currentvehicletarget = 0x2208,
  SCR_OPAQUE_STRING_currentvels = 0x2209,
  SCR_OPAQUE_STRING_currentweapon = 0x220A,
  SCR_OPAQUE_STRING_cursor = 0x220C,
  SCR_OPAQUE_STRING_curtain_dust = 0x220D,
  SCR_OPAQUE_STRING_custom_aim_internal = 0x2211,
  SCR_OPAQUE_STRING_custom_anim_wait = 0x2212,
  SCR_OPAQUE_STRING_custom_balcony_death_animscript = 0x2215,
  SCR_OPAQUE_STRING_custom_bar_enemy_state_spotted = 0x2216,
  SCR_OPAQUE_STRING_custom_battlechatter_init_valid_phrases = 0x2219,
  SCR_OPAQUE_STRING_custom_cornered_stealth_settings = 0x221C,
  SCR_OPAQUE_STRING_custom_death_script = 0x221F,
  SCR_OPAQUE_STRING_custom_dismount_hint_return_when_dismounted = 0x2220,
  SCR_OPAQUE_STRING_custom_fade_out = 0x2222,
  SCR_OPAQUE_STRING_custom_flavor_burst_ent_delete = 0x2223,
  SCR_OPAQUE_STRING_custom_flavor_bursts = 0x2225,
  SCR_OPAQUE_STRING_custom_followpath_parameter_func = 0x2227,
  SCR_OPAQUE_STRING_custom_friendly_fire_message = 0x2228,
  SCR_OPAQUE_STRING_custom_friendly_fire_shader = 0x2229,
  SCR_OPAQUE_STRING_custom_giveloadout = 0x222B,
  SCR_OPAQUE_STRING_custom_hind_death = 0x222C,
  SCR_OPAQUE_STRING_custom_laser_function = 0x2230,
  SCR_OPAQUE_STRING_custom_mount_hint_return_when_mounted = 0x2232,
  SCR_OPAQUE_STRING_custom_no_game_setupfunc = 0x2233,
  SCR_OPAQUE_STRING_custom_player_attacker = 0x2234,
  SCR_OPAQUE_STRING_custom_radius_damage_for_exploders = 0x2235,
  SCR_OPAQUE_STRING_custom_waterfx = 0x2238,
  SCR_OPAQUE_STRING_customanim = 0x2239,
  SCR_OPAQUE_STRING_customarrivalfunc = 0x223A,
  SCR_OPAQUE_STRING_customautosavecheck = 0x223B,
  SCR_OPAQUE_STRING_custombadplacethread = 0x223C,
  SCR_OPAQUE_STRING_custombcs_validphrases = 0x223D,
  SCR_OPAQUE_STRING_custombreathingtime = 0x223E,
  SCR_OPAQUE_STRING_customchatevent = 0x223F,
  SCR_OPAQUE_STRING_customidleanimset = 0x2244,
  SCR_OPAQUE_STRING_customidleanimweights = 0x2245,
  SCR_OPAQUE_STRING_customjuiced = 0x2247,
  SCR_OPAQUE_STRING_custommoveanimset = 0x2248,
  SCR_OPAQUE_STRING_custommovetransitionfunc = 0x224A,
  SCR_OPAQUE_STRING_customprematchperiod = 0x224C,
  SCR_OPAQUE_STRING_customrunningreacttobullets = 0x224D,
  SCR_OPAQUE_STRING_cut_exploders = 0x224E,
  SCR_OPAQUE_STRING_cut_hint = 0x224F,
  SCR_OPAQUE_STRING_cut_window_rorke = 0x2257,
  SCR_OPAQUE_STRING_cw_barracks = 0x2259,
  SCR_OPAQUE_STRING_cw_barracks_setup = 0x225E,
  SCR_OPAQUE_STRING_cw_barracks_slow = 0x225F,
  SCR_OPAQUE_STRING_cw_bloom_above = 0x2260,
  SCR_OPAQUE_STRING_cw_bravo_breach = 0x2261,
  SCR_OPAQUE_STRING_cw_common = 0x2266,
  SCR_OPAQUE_STRING_cw_common_breach_allies = 0x2268,
  SCR_OPAQUE_STRING_cw_common_breach_nag = 0x226A,
  SCR_OPAQUE_STRING_cw_common_breach_player = 0x226B,
  SCR_OPAQUE_STRING_cw_common_breach_trig_proc = 0x226C,
  SCR_OPAQUE_STRING_cw_common_fic = 0x226D,
  SCR_OPAQUE_STRING_cw_fizzle_flashbangs_thinking = 0x226F,
  SCR_OPAQUE_STRING_cw_fog_above = 0x2270,
  SCR_OPAQUE_STRING_cw_fog_under = 0x2271,
  SCR_OPAQUE_STRING_cw_in_rising_water = 0x2272,
  SCR_OPAQUE_STRING_cw_lights_out_ng = 0x2273,
  SCR_OPAQUE_STRING_cw_lights_out_script_1 = 0x2274,
  SCR_OPAQUE_STRING_cw_lights_out_script_3 = 0x2276,
  SCR_OPAQUE_STRING_cw_lights_out_script_5 = 0x2278,
  SCR_OPAQUE_STRING_cw_mid = 0x227B,
  SCR_OPAQUE_STRING_cw_player_damage_underwater_time_exceeded = 0x227F,
  SCR_OPAQUE_STRING_cw_player_drowning_animate = 0x2280,
  SCR_OPAQUE_STRING_cw_player_drowning_damage_count = 0x2281,
  SCR_OPAQUE_STRING_cw_player_in_rising_water = 0x2282,
  SCR_OPAQUE_STRING_cw_player_is_drowning = 0x2283,
  SCR_OPAQUE_STRING_cw_player_make_stand = 0x2284,
  SCR_OPAQUE_STRING_cw_player_underwater_max_blur = 0x2285,
  SCR_OPAQUE_STRING_cw_player_view_fx_source = 0x2287,
  SCR_OPAQUE_STRING_cw_player_view_water_level_fx_source = 0x2288,
  SCR_OPAQUE_STRING_cw_playing_wet_fx = 0x2289,
  SCR_OPAQUE_STRING_cw_previous_longdeath = 0x228B,
  SCR_OPAQUE_STRING_cw_snowmobile_headlight = 0x228C,
  SCR_OPAQUE_STRING_cw_snowmobile_headlight_cg = 0x228D,
  SCR_OPAQUE_STRING_cw_snowmobile_light = 0x228E,
  SCR_OPAQUE_STRING_cw_stairs_fic = 0x228F,
  SCR_OPAQUE_STRING_cw_tape_breach = 0x2291,
  SCR_OPAQUE_STRING_cw_thermite_charge_light = 0x2294,
  SCR_OPAQUE_STRING_cw_trigger_volumes = 0x2295,
  SCR_OPAQUE_STRING_cw_vision_above = 0x2296,
  SCR_OPAQUE_STRING_cw_waterwipe_above = 0x2297,
  SCR_OPAQUE_STRING_cw_waterwipe_under = 0x2299,
  SCR_OPAQUE_STRING_cw_waterwipe_under_playing = 0x229A,
  SCR_OPAQUE_STRING_cycle_begin_intensity_monitor = 0x229C,
  SCR_OPAQUE_STRING_cycle_count = 0x229D,
  SCR_OPAQUE_STRING_cycle_data = 0x229F,
  SCR_OPAQUE_STRING_cycle_reward_scalar = 0x22A4,
  SCR_OPAQUE_STRING_cycletargets = 0x22A7,
  SCR_OPAQUE_STRING_cypher_defend_self = 0x22A8,
  SCR_OPAQUE_STRING_d_dialogue_queue = 0x22AC,
  SCR_OPAQUE_STRING_dam = 0x22AD,
  SCR_OPAQUE_STRING_dam_break = 0x22AE,
  SCR_OPAQUE_STRING_dam_break_church_spire = 0x22B1,
  SCR_OPAQUE_STRING_dam_break_m880_launch_prep = 0x22B5,
  SCR_OPAQUE_STRING_dam_break_m880_launch_prep_spawn = 0x22B6,
  SCR_OPAQUE_STRING_dam_break_missile_02 = 0x22BA,
  SCR_OPAQUE_STRING_dam_break_missile_03 = 0x22BB,
  SCR_OPAQUE_STRING_dam_break_street_water = 0x22BF,
  SCR_OPAQUE_STRING_dam_break_street_water_01 = 0x22C0,
  SCR_OPAQUE_STRING_dam_break_street_water_02 = 0x22C1,
  SCR_OPAQUE_STRING_dam_break_weapon = 0x22C5,
  SCR_OPAQUE_STRING_dam_heli_flyover_hover = 0x22C7,
  SCR_OPAQUE_STRING_dam_start = 0x22C8,
  SCR_OPAQUE_STRING_dam_street_flood_big_splashes_fx = 0x22C9,
  SCR_OPAQUE_STRING_dam_street_flood_church_hits = 0x22CA,
  SCR_OPAQUE_STRING_damage_alien_over_time = 0x22CD,
  SCR_OPAQUE_STRING_damage_done = 0x22CF,
  SCR_OPAQUE_STRING_damage_feedback_setup = 0x22D1,
  SCR_OPAQUE_STRING_damage_functions = 0x22D2,
  SCR_OPAQUE_STRING_damage_hint_bullet_only = 0x22D4,
  SCR_OPAQUE_STRING_damage_hints_cleanup = 0x22D6,
  SCR_OPAQUE_STRING_damage_is_valid_for_friendlyfire_warning = 0x22D7,
  SCR_OPAQUE_STRING_damage_level = 0x22D8,
  SCR_OPAQUE_STRING_damage_not = 0x22DA,
  SCR_OPAQUE_STRING_damage_player = 0x22DB,
  SCR_OPAQUE_STRING_damage_slide_time = 0x22DF,
  SCR_OPAQUE_STRING_damage_smoke_time = 0x22E1,
  SCR_OPAQUE_STRING_damage_state_apply = 0x22E2,
  SCR_OPAQUE_STRING_damage_state_build = 0x22E3,
  SCR_OPAQUE_STRING_damage_state_choose = 0x22E4,
  SCR_OPAQUE_STRING_damage_state_fx_add = 0x22E6,
  SCR_OPAQUE_STRING_damage_state_play_fx_on_tag = 0x22EB,
  SCR_OPAQUE_STRING_damage_state_stop_fx_on_tag = 0x22EF,
  SCR_OPAQUE_STRING_damage_state_tag_ent_clear_all = 0x22F0,
  SCR_OPAQUE_STRING_damage_time = 0x22F4,
  SCR_OPAQUE_STRING_damage_time_player = 0x22F5,
  SCR_OPAQUE_STRING_damage_type = 0x22F7,
  SCR_OPAQUE_STRING_damage_vehicle_think = 0x22F8,
  SCR_OPAQUE_STRING_damage_vehicles_path1 = 0x22F9,
  SCR_OPAQUE_STRING_damage_vehicles_path2 = 0x22FA,
  SCR_OPAQUE_STRING_damage_watcher_ambush = 0x22FB,
  SCR_OPAQUE_STRING_damageattacker = 0x22FE,
  SCR_OPAQUE_STRING_damagecallback = 0x2300,
  SCR_OPAQUE_STRING_damaged_crate = 0x2303,
  SCR_OPAQUE_STRING_damagedplayer = 0x2304,
  SCR_OPAQUE_STRING_damagefeedback = 0x2308,
  SCR_OPAQUE_STRING_damagefeedback_took_damage = 0x2309,
  SCR_OPAQUE_STRING_damageinfocolorindex = 0x230B,
  SCR_OPAQUE_STRING_damagelistsize = 0x230F,
  SCR_OPAQUE_STRING_damageorigin = 0x2312,
  SCR_OPAQUE_STRING_damagepoint = 0x2314,
  SCR_OPAQUE_STRING_damageshieldcounter = 0x2316,
  SCR_OPAQUE_STRING_damageshieldpain = 0x2318,
  SCR_OPAQUE_STRING_damping_factor = 0x231B,
  SCR_OPAQUE_STRING_dangermaxradius = 0x231D,
  SCR_OPAQUE_STRING_dangerminradius = 0x231E,
  SCR_OPAQUE_STRING_dangerovalscale = 0x231F,
  SCR_OPAQUE_STRING_dangersprinttime = 0x2320,
  SCR_OPAQUE_STRING_dart = 0x2321,
  SCR_OPAQUE_STRING_dart_breach_precache = 0x2323,
  SCR_OPAQUE_STRING_dash_wipe = 0x2324,
  SCR_OPAQUE_STRING_data = 0x2325,
  SCR_OPAQUE_STRING_data_value_suffix = 0x2327,
  SCR_OPAQUE_STRING_dc_old_moveplaybackrate = 0x2329,
  SCR_OPAQUE_STRING_dc_shotgun_seek = 0x232A,
  SCR_OPAQUE_STRING_ddtimetoadd = 0x232C,
  SCR_OPAQUE_STRING_deactivate = 0x232D,
  SCR_OPAQUE_STRING_deactivate_avoid_minion_exp = 0x232E,
  SCR_OPAQUE_STRING_deactivate_current_challenge = 0x232F,
  SCR_OPAQUE_STRING_deactivate_kill_10_with_turrets = 0x2333,
  SCR_OPAQUE_STRING_deactivate_kill_airborne_aliens = 0x2334,
  SCR_OPAQUE_STRING_deactivate_melee_goons = 0x2336,
  SCR_OPAQUE_STRING_deactivate_melee_only = 0x2337,
  SCR_OPAQUE_STRING_deactivate_occlusion = 0x2339,
  SCR_OPAQUE_STRING_deactivate_percent_accuracy = 0x233A,
  SCR_OPAQUE_STRING_deactivate_protect_a_player = 0x233B,
  SCR_OPAQUE_STRING_dead_guy = 0x2347,
  SCR_OPAQUE_STRING_dead_hive_model = 0x234B,
  SCR_OPAQUE_STRING_dead_pilot_hang = 0x234C,
  SCR_OPAQUE_STRING_deadly_sharks = 0x234E,
  SCR_OPAQUE_STRING_death_a = 0x2350,
  SCR_OPAQUE_STRING_death_achievements = 0x2351,
  SCR_OPAQUE_STRING_death_achievements_rappel = 0x2352,
  SCR_OPAQUE_STRING_death_anim = 0x2353,
  SCR_OPAQUE_STRING_death_anim_anytime = 0x2354,
  SCR_OPAQUE_STRING_death_anim_played = 0x2355,
  SCR_OPAQUE_STRING_death_d = 0x2358,
  SCR_OPAQUE_STRING_death_delayed_ragdoll = 0x2359,
  SCR_OPAQUE_STRING_death_effect = 0x235A,
  SCR_OPAQUE_STRING_death_firesound = 0x235B,
  SCR_OPAQUE_STRING_death_func = 0x235C,
  SCR_OPAQUE_STRING_death_getincomingdirection = 0x235F,
  SCR_OPAQUE_STRING_death_model_col = 0x2360,
  SCR_OPAQUE_STRING_death_only_ragdoll = 0x2364,
  SCR_OPAQUE_STRING_death_override = 0x2365,
  SCR_OPAQUE_STRING_death_waiter = 0x2366,
  SCR_OPAQUE_STRING_death_warning_vo = 0x2367,
  SCR_OPAQUE_STRING_death_watcher = 0x2368,
  SCR_OPAQUE_STRING_deathanim = 0x2369,
  SCR_OPAQUE_STRING_deathanimscript = 0x236B,
  SCR_OPAQUE_STRING_deathchain_goalvolume = 0x236C,
  SCR_OPAQUE_STRING_deathchainainotify = 0x236D,
  SCR_OPAQUE_STRING_deathchainspawnerlogic = 0x236E,
  SCR_OPAQUE_STRING_deathdamagemax = 0x2372,
  SCR_OPAQUE_STRING_deathdamageradius = 0x2374,
  SCR_OPAQUE_STRING_deathflags = 0x2375,
  SCR_OPAQUE_STRING_deathfunc = 0x2376,
  SCR_OPAQUE_STRING_deathfunc_vol_num_decrement = 0x2379,
  SCR_OPAQUE_STRING_deathfuncs = 0x237A,
  SCR_OPAQUE_STRING_deathfx_ent = 0x237D,
  SCR_OPAQUE_STRING_deathoverridecallback = 0x237E,
  SCR_OPAQUE_STRING_deathquote_on_death = 0x2380,
  SCR_OPAQUE_STRING_deathrolloff = 0x2381,
  SCR_OPAQUE_STRING_deathscript = 0x2383,
  SCR_OPAQUE_STRING_deathsdoor_enabled = 0x2385,
  SCR_OPAQUE_STRING_deathspawnerents = 0x2388,
  SCR_OPAQUE_STRING_deathspawnerpreview = 0x2389,
  SCR_OPAQUE_STRING_deathstring = 0x238A,
  SCR_OPAQUE_STRING_deathvfx = 0x238E,
  SCR_OPAQUE_STRING_deathwatcher = 0x238F,
  SCR_OPAQUE_STRING_debgugprintdestructiblelist = 0x2391,
  SCR_OPAQUE_STRING_debris = 0x2392,
  SCR_OPAQUE_STRING_debris_bridge_actor_vign_and_transition_to_combat = 0x2393,
  SCR_OPAQUE_STRING_debris_bridge_allies_loop = 0x2394,
  SCR_OPAQUE_STRING_debris_bridge_bus_sparks = 0x2396,
  SCR_OPAQUE_STRING_debris_bridge_cleanup = 0x2397,
  SCR_OPAQUE_STRING_debris_bridge_fx = 0x2399,
  SCR_OPAQUE_STRING_debris_bridge_loop1 = 0x239A,
  SCR_OPAQUE_STRING_debris_bridge_sfx = 0x239C,
  SCR_OPAQUE_STRING_debris_bridge_vign2_and_loop3 = 0x23A0,
  SCR_OPAQUE_STRING_debris_bridge_vign2_and_loop3_ally = 0x23A1,
  SCR_OPAQUE_STRING_debris_chunk = 0x23A2,
  SCR_OPAQUE_STRING_debris_remove_after_time = 0x23A4,
  SCR_OPAQUE_STRING_debris_spawner = 0x23A5,
  SCR_OPAQUE_STRING_debrisbridge_cleanup = 0x23A8,
  SCR_OPAQUE_STRING_debrisbridge_clear_enemies_bottom = 0x23A9,
  SCR_OPAQUE_STRING_debrisbridge_clear_enemies_top = 0x23AA,
  SCR_OPAQUE_STRING_debrisbridge_crossing = 0x23AC,
  SCR_OPAQUE_STRING_debrisbridge_enemy_aggrisive_logic = 0x23AE,
  SCR_OPAQUE_STRING_debrisbridge_enemy_logic = 0x23AF,
  SCR_OPAQUE_STRING_debrisbridge_enemy_spawn_logic = 0x23B1,
  SCR_OPAQUE_STRING_debrisbridge_fodder = 0x23B2,
  SCR_OPAQUE_STRING_debrisbridge_fodder_extra = 0x23B3,
  SCR_OPAQUE_STRING_debrisbridge_hide_glass_parts = 0x23B4,
  SCR_OPAQUE_STRING_debrisbridge_kill_enemies_top = 0x23B5,
  SCR_OPAQUE_STRING_debrisbridge_loc = 0x23B6,
  SCR_OPAQUE_STRING_debrisbridge_move_trigger = 0x23B7,
  SCR_OPAQUE_STRING_debrisbridge_origins = 0x23B9,
  SCR_OPAQUE_STRING_debrisbridge_path_logic = 0x23BA,
  SCR_OPAQUE_STRING_debrisbridge_prevent_frogger = 0x23BB,
  SCR_OPAQUE_STRING_debrisbridge_setup_ally_for_kill_shot = 0x23BC,
  SCR_OPAQUE_STRING_debrisbridge_setup_enemies_for_clearance = 0x23BD,
  SCR_OPAQUE_STRING_debrisbridge_shot_count = 0x23BE,
  SCR_OPAQUE_STRING_debrisbridge_start = 0x23C0,
  SCR_OPAQUE_STRING_debrisbridge_wall_break_logic = 0x23C1,
  SCR_OPAQUE_STRING_debrisbridge_water_enter_combat_space = 0x23C2,
  SCR_OPAQUE_STRING_debug = 0x23C6,
  SCR_OPAQUE_STRING_debug_ai_drone_amounts = 0x23C7,
  SCR_OPAQUE_STRING_debug_ai_drone_amounts_logic = 0x23C8,
  SCR_OPAQUE_STRING_debug_anim = 0x23C9,
  SCR_OPAQUE_STRING_debug_animsoundtagselected = 0x23CB,
  SCR_OPAQUE_STRING_debug_arrivals_on_actor = 0x23CD,
  SCR_OPAQUE_STRING_debug_audio_hud = 0x23CE,
  SCR_OPAQUE_STRING_debug_bike_line = 0x23CF,
  SCR_OPAQUE_STRING_debug_circle = 0x23D2,
  SCR_OPAQUE_STRING_debug_color_huds = 0x23D5,
  SCR_OPAQUE_STRING_debug_color_system_hud = 0x23D6,
  SCR_OPAQUE_STRING_debug_corner = 0x23D8,
  SCR_OPAQUE_STRING_debug_cross = 0x23DA,
  SCR_OPAQUE_STRING_debug_death = 0x23DB,
  SCR_OPAQUE_STRING_debug_draw_arrow = 0x23DE,
  SCR_OPAQUE_STRING_debug_enemyposproc = 0x23E6,
  SCR_OPAQUE_STRING_debug_enemyposreplay = 0x23E7,
  SCR_OPAQUE_STRING_debug_error = 0x23E8,
  SCR_OPAQUE_STRING_debug_friendlyfire = 0x23E9,
  SCR_OPAQUE_STRING_debug_function = 0x23EA,
  SCR_OPAQUE_STRING_debug_fxlighting_buttons = 0x23EC,
  SCR_OPAQUE_STRING_debug_heli_gun = 0x23ED,
  SCR_OPAQUE_STRING_debug_hud_disabled = 0x23EF,
  SCR_OPAQUE_STRING_debug_j_prop = 0x23F1,
  SCR_OPAQUE_STRING_debug_jolt_vehs = 0x23F3,
  SCR_OPAQUE_STRING_debug_kill_enemies_in_order = 0x23F4,
  SCR_OPAQUE_STRING_debug_line = 0x23F5,
  SCR_OPAQUE_STRING_debug_lookflag = 0x23F6,
  SCR_OPAQUE_STRING_debug_message = 0x23F7,
  SCR_OPAQUE_STRING_debug_no_move = 0x23FA,
  SCR_OPAQUE_STRING_debug_org = 0x23FC,
  SCR_OPAQUE_STRING_debug_player_in_post_clip = 0x23FE,
  SCR_OPAQUE_STRING_debug_print3d = 0x2400,
  SCR_OPAQUE_STRING_debug_print3d_simple = 0x2401,
  SCR_OPAQUE_STRING_debug_radiusdamage_circle = 0x2403,
  SCR_OPAQUE_STRING_debug_reflection = 0x2404,
  SCR_OPAQUE_STRING_debug_reflection_buttons = 0x2405,
  SCR_OPAQUE_STRING_debug_show_ai_counts = 0x2408,
  SCR_OPAQUE_STRING_debug_spawn_director_active = 0x240A,
  SCR_OPAQUE_STRING_debug_stopenemypos = 0x240C,
  SCR_OPAQUE_STRING_debug_test_thruster_audio = 0x240E,
  SCR_OPAQUE_STRING_debug_thruster_text = 0x2410,
  SCR_OPAQUE_STRING_debug_timer = 0x2411,
  SCR_OPAQUE_STRING_debug_wait = 0x2415,
  SCR_OPAQUE_STRING_debug_warning = 0x2416,
  SCR_OPAQUE_STRING_debug_wibble = 0x2417,
  SCR_OPAQUE_STRING_debugchains = 0x2419,
  SCR_OPAQUE_STRING_debugcircle = 0x241A,
  SCR_OPAQUE_STRING_debugcolorfriendlies = 0x241B,
  SCR_OPAQUE_STRING_debuggoalpos = 0x241E,
  SCR_OPAQUE_STRING_debugleft = 0x2421,
  SCR_OPAQUE_STRING_debugmisstime = 0x2423,
  SCR_OPAQUE_STRING_debugpos = 0x2426,
  SCR_OPAQUE_STRING_debugposinternal = 0x2427,
  SCR_OPAQUE_STRING_debugpossize = 0x2428,
  SCR_OPAQUE_STRING_debugprint3d = 0x242A,
  SCR_OPAQUE_STRING_debugprintln2 = 0x242B,
  SCR_OPAQUE_STRING_debugsightline = 0x242C,
  SCR_OPAQUE_STRING_debugspawners = 0x242D,
  SCR_OPAQUE_STRING_debugthreat = 0x242E,
  SCR_OPAQUE_STRING_debugthreatcalc = 0x242F,
  SCR_OPAQUE_STRING_debugtimeout = 0x2430,
  SCR_OPAQUE_STRING_debugvar = 0x2431,
  SCR_OPAQUE_STRING_decal = 0x2433,
  SCR_OPAQUE_STRING_deceleration = 0x2435,
  SCR_OPAQUE_STRING_decidenumcrawls = 0x2436,
  SCR_OPAQUE_STRING_deck_ac130_dmg_badplace_size = 0x243B,
  SCR_OPAQUE_STRING_deck_ac130_dmg_clip = 0x243C,
  SCR_OPAQUE_STRING_deck_combat_vo = 0x2441,
  SCR_OPAQUE_STRING_deck_combat_wave1_flank = 0x2443,
  SCR_OPAQUE_STRING_deck_combat_wave1_helis = 0x2444,
  SCR_OPAQUE_STRING_deck_combat_wave2_helis = 0x2446,
  SCR_OPAQUE_STRING_deck_combat_wave3_ambient_jets = 0x2448,
  SCR_OPAQUE_STRING_deck_combat_wave3_helis = 0x2449,
  SCR_OPAQUE_STRING_deck_damage = 0x244A,
  SCR_OPAQUE_STRING_deck_destroyed_odin = 0x244B,
  SCR_OPAQUE_STRING_deck_explode = 0x244C,
  SCR_OPAQUE_STRING_deck_explode_guys = 0x244D,
  SCR_OPAQUE_STRING_deck_explode_vista = 0x244E,
  SCR_OPAQUE_STRING_deck_tilt_pre_load = 0x244F,
  SCR_OPAQUE_STRING_deck_tilt_water_kill_trigger = 0x2450,
  SCR_OPAQUE_STRING_deck_transition_cleanup_vol = 0x2452,
  SCR_OPAQUE_STRING_deck_transition_pre_load = 0x2453,
  SCR_OPAQUE_STRING_deck_victory_pre_load = 0x2454,
  SCR_OPAQUE_STRING_decomp_anim_line_1 = 0x2456,
  SCR_OPAQUE_STRING_decomp_anim_line_2 = 0x2457,
  SCR_OPAQUE_STRING_decomp_anim_notify_done = 0x2458,
  SCR_OPAQUE_STRING_decomp_anim_notify_end_slomo = 0x2459,
  SCR_OPAQUE_STRING_decomp_anim_notify_player_link = 0x245A,
  SCR_OPAQUE_STRING_decomp_anim_notify_slomo = 0x245B,
  SCR_OPAQUE_STRING_decomp_explosion_anim_ally = 0x245D,
  SCR_OPAQUE_STRING_decomp_explosion_anim_enemies = 0x245E,
  SCR_OPAQUE_STRING_decomp_explosion_anim_player = 0x245F,
  SCR_OPAQUE_STRING_decomp_explosion_anim_player_legs = 0x2460,
  SCR_OPAQUE_STRING_decomp_heavy_rumble = 0x2462,
  SCR_OPAQUE_STRING_decreasexpboost = 0x2464,
  SCR_OPAQUE_STRING_decrement_list_offset = 0x2465,
  SCR_OPAQUE_STRING_decrementalivecount = 0x2466,
  SCR_OPAQUE_STRING_decrementcolorusers = 0x2468,
  SCR_OPAQUE_STRING_decrementfauxvehiclecount = 0x246A,
  SCR_OPAQUE_STRING_decrementing_slide = 0x246B,
  SCR_OPAQUE_STRING_decrementlevelbreaks = 0x246C,
  SCR_OPAQUE_STRING_deep_array_call = 0x246D,
  SCR_OPAQUE_STRING_deep_array_thread = 0x246E,
  SCR_OPAQUE_STRING_deer = 0x246F,
  SCR_OPAQUE_STRING_deer_anims = 0x2471,
  SCR_OPAQUE_STRING_deer_detects_when_to_run = 0x2474,
  SCR_OPAQUE_STRING_deer_drone_custom_idle = 0x2475,
  SCR_OPAQUE_STRING_deer_drone_spawn_func = 0x2477,
  SCR_OPAQUE_STRING_deer_dronespawn = 0x2478,
  SCR_OPAQUE_STRING_deer_dronespawn_internal = 0x2479,
  SCR_OPAQUE_STRING_deer_fade_in = 0x247B,
  SCR_OPAQUE_STRING_deer_init = 0x247C,
  SCR_OPAQUE_STRING_deer_player_aim_detection = 0x247D,
  SCR_OPAQUE_STRING_deer_player_leaning_detect = 0x247E,
  SCR_OPAQUE_STRING_deer_reveal_chairs = 0x247F,
  SCR_OPAQUE_STRING_deer_ruckus_trig_logic = 0x2481,
  SCR_OPAQUE_STRING_deer_rumble_movewait = 0x2482,
  SCR_OPAQUE_STRING_deer_stampede_logic = 0x2483,
  SCR_OPAQUE_STRING_deerhunttransitionanim = 0x2484,
  SCR_OPAQUE_STRING_def = 0x2485,
  SCR_OPAQUE_STRING_def_fire = 0x2486,
  SCR_OPAQUE_STRING_default_canactivatefunc = 0x248B,
  SCR_OPAQUE_STRING_default_dof = 0x248D,
  SCR_OPAQUE_STRING_default_dog_limits = 0x248E,
  SCR_OPAQUE_STRING_default_door_node_flashbang_frequency = 0x248F,
  SCR_OPAQUE_STRING_default_drop_pitch = 0x2490,
  SCR_OPAQUE_STRING_default_failactivatefunc = 0x2491,
  SCR_OPAQUE_STRING_default_failfunc = 0x2492,
  SCR_OPAQUE_STRING_default_fov = 0x2494,
  SCR_OPAQUE_STRING_default_goalheight = 0x2496,
  SCR_OPAQUE_STRING_default_heartbeat_rate = 0x2498,
  SCR_OPAQUE_STRING_default_init = 0x2499,
  SCR_OPAQUE_STRING_default_loadout_if_notset = 0x249B,
  SCR_OPAQUE_STRING_default_mg_drone = 0x249D,
  SCR_OPAQUE_STRING_default_node = 0x249F,
  SCR_OPAQUE_STRING_default_ondeadevent = 0x24A0,
  SCR_OPAQUE_STRING_default_ononeleftevent = 0x24A2,
  SCR_OPAQUE_STRING_default_resetsuccess = 0x24A4,
  SCR_OPAQUE_STRING_default_run_speed = 0x24A6,
  SCR_OPAQUE_STRING_default_should_update = 0x24A7,
  SCR_OPAQUE_STRING_default_sprint = 0x24A8,
  SCR_OPAQUE_STRING_default_start = 0x24A9,
  SCR_OPAQUE_STRING_default_stealth_override = 0x24AC,
  SCR_OPAQUE_STRING_default_stealth_settings = 0x24AD,
  SCR_OPAQUE_STRING_default_unresolved_collision_handler = 0x24B0,
  SCR_OPAQUE_STRING_default_visionset = 0x24B1,
  SCR_OPAQUE_STRING_default_wander_radius = 0x24B2,
  SCR_OPAQUE_STRING_defaultbodymodels = 0x24B4,
  SCR_OPAQUE_STRING_defaultclass = 0x24B5,
  SCR_OPAQUE_STRING_defaultdroneragdoll = 0x24B6,
  SCR_OPAQUE_STRING_defaultdroppitch = 0x24B7,
  SCR_OPAQUE_STRING_defaultdropyaw = 0x24B8,
  SCR_OPAQUE_STRING_defaultemissive = 0x24B9,
  SCR_OPAQUE_STRING_defaultexception = 0x24BA,
  SCR_OPAQUE_STRING_defaultheadmodels = 0x24BB,
  SCR_OPAQUE_STRING_defaultmoveplaybackrate = 0x24BE,
  SCR_OPAQUE_STRING_defaultonmode = 0x24BF,
  SCR_OPAQUE_STRING_defaults = 0x24C0,
  SCR_OPAQUE_STRING_defaulttarget = 0x24C1,
  SCR_OPAQUE_STRING_defaultturnthreshold = 0x24C2,
  SCR_OPAQUE_STRING_defaultweapon = 0x24C6,
  SCR_OPAQUE_STRING_defconkillstreakthread = 0x24C7,
  SCR_OPAQUE_STRING_defconkillstreakwait = 0x24C8,
  SCR_OPAQUE_STRING_defconmode = 0x24C9,
  SCR_OPAQUE_STRING_defconpointmod = 0x24CA,
  SCR_OPAQUE_STRING_defconsplashnotify = 0x24CB,
  SCR_OPAQUE_STRING_defend_combat = 0x24CE,
  SCR_OPAQUE_STRING_defend_door_explosion = 0x24D2,
  SCR_OPAQUE_STRING_defend_door_open = 0x24D3,
  SCR_OPAQUE_STRING_defend_fire = 0x24D7,
  SCR_OPAQUE_STRING_defend_intro = 0x24DA,
  SCR_OPAQUE_STRING_defend_platform = 0x24DB,
  SCR_OPAQUE_STRING_defend_quick = 0x24DC,
  SCR_OPAQUE_STRING_defend_save_safe = 0x24DD,
  SCR_OPAQUE_STRING_defend_sparrow_control = 0x24DF,
  SCR_OPAQUE_STRING_defend_sparrow_fx = 0x24E0,
  SCR_OPAQUE_STRING_defend_sparrow_pre_load = 0x24E1,
  SCR_OPAQUE_STRING_defend_sparrow_ships = 0x24E2,
  SCR_OPAQUE_STRING_defend_start = 0x24E3,
  SCR_OPAQUE_STRING_defend_start_player_shield = 0x24E4,
  SCR_OPAQUE_STRING_defend_valid_center = 0x24E5,
  SCR_OPAQUE_STRING_defend_zodiac_arrived_catwalk = 0x24E9,
  SCR_OPAQUE_STRING_defend_zodiac_arrived_right = 0x24EA,
  SCR_OPAQUE_STRING_defend_zodiac_autosave = 0x24EB,
  SCR_OPAQUE_STRING_defend_zodiac_osprey = 0x24ED,
  SCR_OPAQUE_STRING_defend_zodiac_spawn_hidden_reinforcement = 0x24F0,
  SCR_OPAQUE_STRING_defend_zodiac_spawn_reinforcement = 0x24F1,
  SCR_OPAQUE_STRING_defend_zodiac_waittill_enemies_remaining = 0x24F2,
  SCR_OPAQUE_STRING_defendedplayer = 0x24F3,
  SCR_OPAQUE_STRING_defendloc = 0x24F4,
  SCR_OPAQUE_STRING_defendlocation = 0x24F5,
  SCR_OPAQUE_STRING_defends = 0x24F6,
  SCR_OPAQUE_STRING_defense_cautious_approach = 0x24F7,
  SCR_OPAQUE_STRING_defense_death_monitor = 0x24F8,
  SCR_OPAQUE_STRING_defense_force_next_node_goal = 0x24F9,
  SCR_OPAQUE_STRING_defense_get_initial_entrances = 0x24FA,
  SCR_OPAQUE_STRING_defense_override_entrances = 0x24FC,
  SCR_OPAQUE_STRING_define_loadout = 0x24FF,
  SCR_OPAQUE_STRING_definechestweapons = 0x2500,
  SCR_OPAQUE_STRING_defuseendtime = 0x2502,
  SCR_OPAQUE_STRING_defuses = 0x2503,
  SCR_OPAQUE_STRING_defusetime = 0x2504,
  SCR_OPAQUE_STRING_delay = 0x2505,
  SCR_OPAQUE_STRING_delay_drop_boat = 0x2506,
  SCR_OPAQUE_STRING_delay_keegan_color = 0x2508,
  SCR_OPAQUE_STRING_delay_multi_fx = 0x2509,
  SCR_OPAQUE_STRING_delay_multi_fx_proc = 0x250A,
  SCR_OPAQUE_STRING_delay_remove_invul = 0x250C,
  SCR_OPAQUE_STRING_delay_reset_swim_shock = 0x250D,
  SCR_OPAQUE_STRING_delay_show_legs_entry = 0x2511,
  SCR_OPAQUE_STRING_delay_with_bubbles = 0x2512,
  SCR_OPAQUE_STRING_delaybetweenlockon = 0x2513,
  SCR_OPAQUE_STRING_delaybetweenrockets = 0x2514,
  SCR_OPAQUE_STRING_delaycall = 0x2515,
  SCR_OPAQUE_STRING_delaycall_proc = 0x2516,
  SCR_OPAQUE_STRING_delaychildthread = 0x2517,
  SCR_OPAQUE_STRING_delaychildthread_proc = 0x2518,
  SCR_OPAQUE_STRING_delaydestroy = 0x2519,
  SCR_OPAQUE_STRING_delayed_delete = 0x251A,
  SCR_OPAQUE_STRING_delayed_intro = 0x251C,
  SCR_OPAQUE_STRING_delayed_kill = 0x251D,
  SCR_OPAQUE_STRING_delayed_player_seek_think = 0x251E,
  SCR_OPAQUE_STRING_delayed_setgoalvolumeauto = 0x251F,
  SCR_OPAQUE_STRING_delayed_setup = 0x2520,
  SCR_OPAQUE_STRING_delayedbadplace = 0x2522,
  SCR_OPAQUE_STRING_delayedexception = 0x2524,
  SCR_OPAQUE_STRING_delayedfofoverlay = 0x2525,
  SCR_OPAQUE_STRING_delayer = 0x2528,
  SCR_OPAQUE_STRING_delayhudoutline = 0x2529,
  SCR_OPAQUE_STRING_delaytankunload = 0x252E,
  SCR_OPAQUE_STRING_delaythread_nuke = 0x2530,
  SCR_OPAQUE_STRING_delaythread_proc = 0x2531,
  SCR_OPAQUE_STRING_deletable_magic_bullet_shield = 0x2532,
  SCR_OPAQUE_STRING_delete_accessories_on_death = 0x2534,
  SCR_OPAQUE_STRING_delete_ai_at_path_end = 0x2538,
  SCR_OPAQUE_STRING_delete_all_by_type = 0x2539,
  SCR_OPAQUE_STRING_delete_all_ents = 0x253A,
  SCR_OPAQUE_STRING_delete_all_grenades = 0x253B,
  SCR_OPAQUE_STRING_delete_all_triggers = 0x253C,
  SCR_OPAQUE_STRING_delete_at_anim_end = 0x253E,
  SCR_OPAQUE_STRING_delete_beginning_ents = 0x2540,
  SCR_OPAQUE_STRING_delete_building_glow = 0x2543,
  SCR_OPAQUE_STRING_delete_corpse_in_volume = 0x2544,
  SCR_OPAQUE_STRING_delete_corpses_around_vehicle = 0x2546,
  SCR_OPAQUE_STRING_delete_cracked_glass = 0x2547,
  SCR_OPAQUE_STRING_delete_destructibles_in_volumes = 0x2548,
  SCR_OPAQUE_STRING_delete_ent = 0x2549,
  SCR_OPAQUE_STRING_delete_ent_by_script_noteworthy = 0x254A,
  SCR_OPAQUE_STRING_delete_ents = 0x254C,
  SCR_OPAQUE_STRING_delete_fish_in_volume = 0x2552,
  SCR_OPAQUE_STRING_delete_glass_cutter = 0x2553,
  SCR_OPAQUE_STRING_delete_hazmat_guns = 0x2554,
  SCR_OPAQUE_STRING_delete_if_player_cant_see_me = 0x2556,
  SCR_OPAQUE_STRING_delete_intel = 0x2557,
  SCR_OPAQUE_STRING_delete_interactives_in_volumes = 0x2558,
  SCR_OPAQUE_STRING_delete_light_on_clearup = 0x2559,
  SCR_OPAQUE_STRING_delete_links_then_self = 0x255A,
  SCR_OPAQUE_STRING_delete_me = 0x255B,
  SCR_OPAQUE_STRING_delete_me_after_time = 0x255C,
  SCR_OPAQUE_STRING_delete_me_on_parent_ai_death = 0x255E,
  SCR_OPAQUE_STRING_delete_moving_cover_objects = 0x2560,
  SCR_OPAQUE_STRING_delete_on_crack1_done = 0x2564,
  SCR_OPAQUE_STRING_delete_on_crack2_done = 0x2565,
  SCR_OPAQUE_STRING_delete_on_death = 0x2566,
  SCR_OPAQUE_STRING_delete_on_death_wait_sound = 0x2567,
  SCR_OPAQUE_STRING_delete_on_end = 0x2568,
  SCR_OPAQUE_STRING_delete_on_flag = 0x2569,
  SCR_OPAQUE_STRING_delete_on_house_done = 0x256B,
  SCR_OPAQUE_STRING_delete_on_notify = 0x256D,
  SCR_OPAQUE_STRING_delete_on_path_end = 0x256E,
  SCR_OPAQUE_STRING_delete_on_removed = 0x256F,
  SCR_OPAQUE_STRING_delete_on_sounddone = 0x2570,
  SCR_OPAQUE_STRING_delete_path_clip = 0x2571,
  SCR_OPAQUE_STRING_delete_removables = 0x2574,
  SCR_OPAQUE_STRING_delete_sentry_turret = 0x2577,
  SCR_OPAQUE_STRING_delete_stage_one_fx = 0x2578,
  SCR_OPAQUE_STRING_delete_start = 0x2579,
  SCR_OPAQUE_STRING_delete_temp_sat_view_targets = 0x257A,
  SCR_OPAQUE_STRING_delete_trolley_ally = 0x257D,
  SCR_OPAQUE_STRING_delete_volmod_hud = 0x257E,
  SCR_OPAQUE_STRING_delete_wand_at_lights_out = 0x257F,
  SCR_OPAQUE_STRING_delete_when_behind_player = 0x2580,
  SCR_OPAQUE_STRING_deletecrate = 0x2584,
  SCR_OPAQUE_STRING_deletedebugtexthud = 0x2585,
  SCR_OPAQUE_STRING_deletedestructiblekillcament = 0x2587,
  SCR_OPAQUE_STRING_deleteexplosive = 0x2589,
  SCR_OPAQUE_STRING_deleteifnotused = 0x258B,
  SCR_OPAQUE_STRING_deletelethalequipmentondisconnect = 0x258C,
  SCR_OPAQUE_STRING_deleteobjpoint = 0x258D,
  SCR_OPAQUE_STRING_deleteonac130playerremoved = 0x258E,
  SCR_OPAQUE_STRING_deleteondeath = 0x258F,
  SCR_OPAQUE_STRING_deleteonentnotify = 0x2590,
  SCR_OPAQUE_STRING_deleteonreviveordeathordisconnect = 0x2592,
  SCR_OPAQUE_STRING_deletepickupafterawhile = 0x2594,
  SCR_OPAQUE_STRING_deleteplacedentity = 0x2595,
  SCR_OPAQUE_STRING_deletereviveicon = 0x2596,
  SCR_OPAQUE_STRING_deletestruct_ref = 0x2599,
  SCR_OPAQUE_STRING_deletestructarray = 0x259A,
  SCR_OPAQUE_STRING_deletestructarray_ref = 0x259B,
  SCR_OPAQUE_STRING_deleteti = 0x259C,
  SCR_OPAQUE_STRING_deleteuseent = 0x259D,
  SCR_OPAQUE_STRING_deleteuseobject = 0x259E,
  SCR_OPAQUE_STRING_demo_setup_allies = 0x25A1,
  SCR_OPAQUE_STRING_demo_setup_sound = 0x25A2,
  SCR_OPAQUE_STRING_demo_switch_checkpoints = 0x25A3,
  SCR_OPAQUE_STRING_denied = 0x25A5,
  SCR_OPAQUE_STRING_dependent_hives_removed = 0x25A6,
  SCR_OPAQUE_STRING_deploy_currency = 0x25A7,
  SCR_OPAQUE_STRING_deploy_health_regen_shield = 0x25A8,
  SCR_OPAQUE_STRING_deployable = 0x25A9,
  SCR_OPAQUE_STRING_deployable_ammo_placed_listener = 0x25AB,
  SCR_OPAQUE_STRING_deployable_armor_placed_listener = 0x25AC,
  SCR_OPAQUE_STRING_deployable_box_onuse_message = 0x25AF,
  SCR_OPAQUE_STRING_deployable_currency_placed_listener = 0x25B0,
  SCR_OPAQUE_STRING_deployable_randombox_placed_listener = 0x25B3,
  SCR_OPAQUE_STRING_deployable_specialammo_placed_listener = 0x25B4,
  SCR_OPAQUE_STRING_deployable_tutorial_given = 0x25B5,
  SCR_OPAQUE_STRING_deployablebox_adrenalinebox_max = 0x25B6,
  SCR_OPAQUE_STRING_deployablebox_adrenalinebox_rank = 0x25B7,
  SCR_OPAQUE_STRING_deployablebox_juicebox_rank = 0x25B9,
  SCR_OPAQUE_STRING_deployablegunbox_bonusinxuses = 0x25BD,
  SCR_OPAQUE_STRING_depth = 0x25C3,
  SCR_OPAQUE_STRING_depth_allow_stand = 0x25C6,
  SCR_OPAQUE_STRING_depth_charge_check_failure = 0x25C8,
  SCR_OPAQUE_STRING_depth_charge_clear_hud = 0x25C9,
  SCR_OPAQUE_STRING_depth_charge_control_down = 0x25CA,
  SCR_OPAQUE_STRING_depth_charge_control_up = 0x25CB,
  SCR_OPAQUE_STRING_depth_charge_current_slow_pitch = 0x25CD,
  SCR_OPAQUE_STRING_depth_charge_death_trig = 0x25D0,
  SCR_OPAQUE_STRING_depth_charge_default_pitch = 0x25D2,
  SCR_OPAQUE_STRING_depth_charge_dialogue = 0x25D3,
  SCR_OPAQUE_STRING_depth_charge_drop = 0x25D4,
  SCR_OPAQUE_STRING_depth_charge_exit = 0x25D7,
  SCR_OPAQUE_STRING_depth_charge_firing_slow_aim_modifier = 0x25D9,
  SCR_OPAQUE_STRING_depth_charge_friendly_fire_kills_to_fail = 0x25DB,
  SCR_OPAQUE_STRING_depth_charge_give_control = 0x25DC,
  SCR_OPAQUE_STRING_depth_charge_hint = 0x25DF,
  SCR_OPAQUE_STRING_depth_charge_init = 0x25E2,
  SCR_OPAQUE_STRING_depth_charge_max_slow_aim_pitch = 0x25E8,
  SCR_OPAQUE_STRING_depth_charge_min_fov = 0x25EA,
  SCR_OPAQUE_STRING_depth_charge_min_slow_aim_yaw = 0x25EC,
  SCR_OPAQUE_STRING_depth_charge_monitor_drop = 0x25EE,
  SCR_OPAQUE_STRING_depth_charge_org = 0x25F0,
  SCR_OPAQUE_STRING_depth_charge_pitch_down_allowance = 0x25F1,
  SCR_OPAQUE_STRING_depth_charge_remove_control = 0x25F3,
  SCR_OPAQUE_STRING_depth_charge_replay = 0x25F4,
  SCR_OPAQUE_STRING_depth_charge_set_slow_aim = 0x25F6,
  SCR_OPAQUE_STRING_depth_charge_start_time = 0x25F7,
  SCR_OPAQUE_STRING_depth_charge_target = 0x25F8,
  SCR_OPAQUE_STRING_depth_charge_turn = 0x25F9,
  SCR_OPAQUE_STRING_depth_charge_use = 0x25FB,
  SCR_OPAQUE_STRING_depth_charges = 0x25FD,
  SCR_OPAQUE_STRING_depth_charges_setup = 0x25FF,
  SCR_OPAQUE_STRING_depth_marker = 0x2600,
  SCR_OPAQUE_STRING_depthenable = 0x2601,
  SCR_OPAQUE_STRING_derrick_metal_debris_sfx = 0x2603,
  SCR_OPAQUE_STRING_derrick_model = 0x2604,
  SCR_OPAQUE_STRING_derrick_pop_and_explode = 0x2605,
  SCR_OPAQUE_STRING_derrick_scene_struct = 0x2606,
  SCR_OPAQUE_STRING_derrick_struct = 0x2607,
  SCR_OPAQUE_STRING_desc = 0x2608,
  SCR_OPAQUE_STRING_deselect_entity = 0x260C,
  SCR_OPAQUE_STRING_designator_disableusabilityduringgrenadepullback = 0x260D,
  SCR_OPAQUE_STRING_designator_enableusabilitywhendesignatorfinishes = 0x260E,
  SCR_OPAQUE_STRING_designator_ontargetacquired = 0x260F,
  SCR_OPAQUE_STRING_designator_start = 0x2611,
  SCR_OPAQUE_STRING_designator_waitforgrenadefire = 0x2612,
  SCR_OPAQUE_STRING_desired_anim_pose = 0x2615,
  SCR_OPAQUE_STRING_desired_bob_pitch = 0x2616,
  SCR_OPAQUE_STRING_desired_bob_roll = 0x2617,
  SCR_OPAQUE_STRING_desired_speed = 0x2618,
  SCR_OPAQUE_STRING_desiredtimeofdeath = 0x2619,
  SCR_OPAQUE_STRING_desk_animate = 0x261A,
  SCR_OPAQUE_STRING_dest_tree_test = 0x261D,
  SCR_OPAQUE_STRING_destination = 0x261E,
  SCR_OPAQUE_STRING_destinations = 0x261F,
  SCR_OPAQUE_STRING_destroy_all_hangar_walls_wait = 0x2621,
  SCR_OPAQUE_STRING_destroy_breach_mines_and_fx = 0x2622,
  SCR_OPAQUE_STRING_destroy_corner = 0x2624,
  SCR_OPAQUE_STRING_destroy_hint = 0x2627,
  SCR_OPAQUE_STRING_destroy_hint_on_friendlyfire = 0x2628,
  SCR_OPAQUE_STRING_destroy_hive_icon = 0x2629,
  SCR_OPAQUE_STRING_destroy_lip_debris_fx = 0x262A,
  SCR_OPAQUE_STRING_destroy_persistent_ice_breach_props = 0x262B,
  SCR_OPAQUE_STRING_destroy_player_ambush_vo = 0x262F,
  SCR_OPAQUE_STRING_destroy_warning_elem = 0x2633,
  SCR_OPAQUE_STRING_destroyactiveimss = 0x263A,
  SCR_OPAQUE_STRING_destroyactivelittlebirds = 0x263B,
  SCR_OPAQUE_STRING_destroyactiverockets = 0x263C,
  SCR_OPAQUE_STRING_destroyactiveturrets = 0x263D,
  SCR_OPAQUE_STRING_destroyactiveuavs = 0x263E,
  SCR_OPAQUE_STRING_destroyactiveugvs = 0x263F,
  SCR_OPAQUE_STRING_destroyed = 0x2641,
  SCR_OPAQUE_STRING_destroyed_derrick_models = 0x2642,
  SCR_OPAQUE_STRING_destroyed_fire_fx = 0x2643,
  SCR_OPAQUE_STRING_destroyed_hesco_count = 0x2644,
  SCR_OPAQUE_STRING_destroyed_tank = 0x2645,
  SCR_OPAQUE_STRING_destroyedcounttimeout = 0x2647,
  SCR_OPAQUE_STRING_destroyedmodel = 0x2648,
  SCR_OPAQUE_STRING_destroyefx = 0x264A,
  SCR_OPAQUE_STRING_destroyelem = 0x264B,
  SCR_OPAQUE_STRING_destroyer_ac130_exchange = 0x264D,
  SCR_OPAQUE_STRING_destroyer_mg_monitor = 0x2650,
  SCR_OPAQUE_STRING_destroyer_target = 0x2651,
  SCR_OPAQUE_STRING_destroyer_targets_big = 0x2652,
  SCR_OPAQUE_STRING_destroyheadiconsondeath = 0x2655,
  SCR_OPAQUE_STRING_destroyslowly = 0x2659,
  SCR_OPAQUE_STRING_destructable_think = 0x265E,
  SCR_OPAQUE_STRING_destructible = 0x265F,
  SCR_OPAQUE_STRING_destructible_attachmodel = 0x2663,
  SCR_OPAQUE_STRING_destructible_builddot_startloop = 0x2667,
  SCR_OPAQUE_STRING_destructible_builddot_wait = 0x2668,
  SCR_OPAQUE_STRING_destructible_car_alarm = 0x2669,
  SCR_OPAQUE_STRING_destructible_civilian_sedan_iw6 = 0x266A,
  SCR_OPAQUE_STRING_destructible_cleans_up_more = 0x266B,
  SCR_OPAQUE_STRING_destructible_create = 0x266C,
  SCR_OPAQUE_STRING_destructible_createdot_radius = 0x266E,
  SCR_OPAQUE_STRING_destructible_damage_threshold = 0x266F,
  SCR_OPAQUE_STRING_destructible_death = 0x2670,
  SCR_OPAQUE_STRING_destructible_dots = 0x2672,
  SCR_OPAQUE_STRING_destructible_dragons_teeth = 0x2673,
  SCR_OPAQUE_STRING_destructible_function = 0x2679,
  SCR_OPAQUE_STRING_destructible_fx_think = 0x267C,
  SCR_OPAQUE_STRING_destructible_handles_collision_brushes = 0x2680,
  SCR_OPAQUE_STRING_destructible_health_drain_amount_multiplier = 0x2681,
  SCR_OPAQUE_STRING_destructible_info = 0x2683,
  SCR_OPAQUE_STRING_destructible_lights_out = 0x2684,
  SCR_OPAQUE_STRING_destructible_loopfx = 0x2685,
  SCR_OPAQUE_STRING_destructible_parts = 0x268C,
  SCR_OPAQUE_STRING_destructible_physics = 0x268D,
  SCR_OPAQUE_STRING_destructible_protection_func = 0x268E,
  SCR_OPAQUE_STRING_destructible_quakes_off = 0x268F,
  SCR_OPAQUE_STRING_destructible_quakes_on = 0x2690,
  SCR_OPAQUE_STRING_destructible_setdot_ontickfunc = 0x2693,
  SCR_OPAQUE_STRING_destructible_setup = 0x2694,
  SCR_OPAQUE_STRING_destructible_sound_think = 0x2696,
  SCR_OPAQUE_STRING_destructible_spotlight = 0x269A,
  SCR_OPAQUE_STRING_destructible_spotlight_think = 0x269B,
  SCR_OPAQUE_STRING_destructible_state = 0x269C,
  SCR_OPAQUE_STRING_destructible_transient = 0x269E,
  SCR_OPAQUE_STRING_destructible_update_part = 0x269F,
  SCR_OPAQUE_STRING_destructible_van_iw6 = 0x26A0,
  SCR_OPAQUE_STRING_destructibles = 0x26A4,
  SCR_OPAQUE_STRING_destructiblespawnedents = 0x26A5,
  SCR_OPAQUE_STRING_destructions = 0x26A9,
  SCR_OPAQUE_STRING_destructisolarpanelsinit = 0x26AA,
  SCR_OPAQUE_STRING_detach_cig = 0x26AC,
  SCR_OPAQUE_STRING_detach_getoutrigs = 0x26AD,
  SCR_OPAQUE_STRING_detach_hatchet = 0x26AE,
  SCR_OPAQUE_STRING_detach_idle_clip = 0x26AF,
  SCR_OPAQUE_STRING_detach_models_with_substr = 0x26B0,
  SCR_OPAQUE_STRING_detach_phone = 0x26B1,
  SCR_OPAQUE_STRING_detach_pistol_left = 0x26B2,
  SCR_OPAQUE_STRING_detach_pistol_right = 0x26B3,
  SCR_OPAQUE_STRING_detach_rope_ally = 0x26B4,
  SCR_OPAQUE_STRING_detach_rope_rorke = 0x26B7,
  SCR_OPAQUE_STRING_detachallweaponmodels = 0x26B8,
  SCR_OPAQUE_STRING_detachifattached = 0x26BA,
  SCR_OPAQUE_STRING_detachprops = 0x26BB,
  SCR_OPAQUE_STRING_detachusemodels = 0x26BC,
  SCR_OPAQUE_STRING_detect_distsqrd = 0x26BF,
  SCR_OPAQUE_STRING_detect_people = 0x26C1,
  SCR_OPAQUE_STRING_detect_people_trigger = 0x26C2,
  SCR_OPAQUE_STRING_detect_player_death = 0x26C3,
  SCR_OPAQUE_STRING_detect_player_event = 0x26C4,
  SCR_OPAQUE_STRING_detect_range = 0x26C6,
  SCR_OPAQUE_STRING_detectexplosives = 0x26CA,
  SCR_OPAQUE_STRING_detectfriendlyfireonentity = 0x26CB,
  SCR_OPAQUE_STRING_detectid = 0x26CD,
  SCR_OPAQUE_STRING_detection_level = 0x26CE,
  SCR_OPAQUE_STRING_detection_timeout = 0x26CF,
  SCR_OPAQUE_STRING_detectiongraceperiod = 0x26D0,
  SCR_OPAQUE_STRING_detectionradius = 0x26D2,
  SCR_OPAQUE_STRING_detectkill = 0x26D3,
  SCR_OPAQUE_STRING_determine_closest_cars = 0x26D4,
  SCR_OPAQUE_STRING_determinecqbanim = 0x26D6,
  SCR_OPAQUE_STRING_determineexposedapproachtype = 0x26D7,
  SCR_OPAQUE_STRING_determineheatcoverexittype = 0x26D8,
  SCR_OPAQUE_STRING_determinenodeapproachtype = 0x26D9,
  SCR_OPAQUE_STRING_determinenodeexittype = 0x26DA,
  SCR_OPAQUE_STRING_determinenonnodeexittype = 0x26DB,
  SCR_OPAQUE_STRING_detonate_dominator = 0x26DD,
  SCR_OPAQUE_STRING_detonateonuse = 0x26E1,
  SCR_OPAQUE_STRING_detoured = 0x26E4,
  SCR_OPAQUE_STRING_detouringpath = 0x26E5,
  SCR_OPAQUE_STRING_detpackstunradius = 0x26E6,
  SCR_OPAQUE_STRING_devaliengiveplayersmoney = 0x26E7,
  SCR_OPAQUE_STRING_device = 0x26E8,
  SCR_OPAQUE_STRING_dialog = 0x26EA,
  SCR_OPAQUE_STRING_dialog_baker_init_control = 0x26EB,
  SCR_OPAQUE_STRING_dialog_baker_player_control = 0x26EC,
  SCR_OPAQUE_STRING_dialog_baker_start = 0x26ED,
  SCR_OPAQUE_STRING_dialog_explode = 0x26EF,
  SCR_OPAQUE_STRING_dialog_found_a_body = 0x26F0,
  SCR_OPAQUE_STRING_dialog_jump = 0x26F1,
  SCR_OPAQUE_STRING_dialog_line_with_flag = 0x26F2,
  SCR_OPAQUE_STRING_dialog_nags_heli = 0x26F5,
  SCR_OPAQUE_STRING_dialog_radiobravo = 0x26F8,
  SCR_OPAQUE_STRING_dialog_seehelo = 0x26F9,
  SCR_OPAQUE_STRING_dialogue = 0x26FB,
  SCR_OPAQUE_STRING_dialogue_baker_waitforit = 0x26FD,
  SCR_OPAQUE_STRING_dialogue_end = 0x2700,
  SCR_OPAQUE_STRING_dialogue_intro = 0x2704,
  SCR_OPAQUE_STRING_dialogue_mantle = 0x2705,
  SCR_OPAQUE_STRING_dialogue_mgs_1 = 0x2706,
  SCR_OPAQUE_STRING_dialogue_mudpumps = 0x2708,
  SCR_OPAQUE_STRING_dialogue_outro = 0x270A,
  SCR_OPAQUE_STRING_dialogue_queue_single = 0x270C,
  SCR_OPAQUE_STRING_dialogue_random_last_line = 0x270D,
  SCR_OPAQUE_STRING_dialogue_sat1 = 0x2710,
  SCR_OPAQUE_STRING_dialogue_sat2 = 0x2711,
  SCR_OPAQUE_STRING_dialogue_streets_to_dam = 0x2712,
  SCR_OPAQUE_STRING_dialogue_streets_to_dam_2 = 0x2713,
  SCR_OPAQUE_STRING_dialogue_tanks = 0x2714,
  SCR_OPAQUE_STRING_dialoguenotetrack = 0x2715,
  SCR_OPAQUE_STRING_diaz_door_kick_sfx = 0x2716,
  SCR_OPAQUE_STRING_did_flares = 0x2717,
  SCR_OPAQUE_STRING_did_handsignal = 0x2718,
  SCR_OPAQUE_STRING_did_inactive_vo = 0x2719,
  SCR_OPAQUE_STRING_diddamagestate = 0x271B,
  SCR_OPAQUE_STRING_didpastmeleefail = 0x271C,
  SCR_OPAQUE_STRING_didpastpursuitfail = 0x271D,
  SCR_OPAQUE_STRING_didsomethingotherthanshooting = 0x271F,
  SCR_OPAQUE_STRING_die_and_ragdoll = 0x2722,
  SCR_OPAQUE_STRING_die_from_explosion = 0x2723,
  SCR_OPAQUE_STRING_die_hard_explosion_fx = 0x2724,
  SCR_OPAQUE_STRING_die_quietly = 0x2725,
  SCR_OPAQUE_STRING_died_of_headshot = 0x2727,
  SCR_OPAQUE_STRING_diehardmode = 0x2728,
  SCR_OPAQUE_STRING_dieingrevival_vo = 0x272A,
  SCR_OPAQUE_STRING_difficultystring = 0x272F,
  SCR_OPAQUE_STRING_difficultytype = 0x2730,
  SCR_OPAQUE_STRING_diffusefraction_ng = 0x2731,
  SCR_OPAQUE_STRING_digitalflash = 0x2734,
  SCR_OPAQUE_STRING_diraimlimit = 0x2737,
  SCR_OPAQUE_STRING_direct_chopper_crate_anim = 0x2738,
  SCR_OPAQUE_STRING_direction = 0x2739,
  SCR_OPAQUE_STRING_direction_change_smoothing = 0x273A,
  SCR_OPAQUE_STRING_dirt_on_screen_from_position = 0x273E,
  SCR_OPAQUE_STRING_disable_achievement_harder_they_fall_guy = 0x2742,
  SCR_OPAQUE_STRING_disable_all_triggers = 0x2746,
  SCR_OPAQUE_STRING_disable_arrivals = 0x2749,
  SCR_OPAQUE_STRING_disable_arrivals_and_exits = 0x274A,
  SCR_OPAQUE_STRING_disable_blindfire = 0x274D,
  SCR_OPAQUE_STRING_disable_breathing_sound = 0x274F,
  SCR_OPAQUE_STRING_disable_bulletwhizbyreaction = 0x2750,
  SCR_OPAQUE_STRING_disable_careful = 0x2751,
  SCR_OPAQUE_STRING_disable_checkpoint_patrol = 0x2752,
  SCR_OPAQUE_STRING_disable_control = 0x2754,
  SCR_OPAQUE_STRING_disable_cqb_points_of_interest = 0x2755,
  SCR_OPAQUE_STRING_disable_cqbwalk = 0x2756,
  SCR_OPAQUE_STRING_disable_damagefeedback = 0x2757,
  SCR_OPAQUE_STRING_disable_danger_react = 0x2758,
  SCR_OPAQUE_STRING_disable_demigod = 0x275A,
  SCR_OPAQUE_STRING_disable_dog_control = 0x275D,
  SCR_OPAQUE_STRING_disable_dog_sneak = 0x275F,
  SCR_OPAQUE_STRING_disable_dog_sniff = 0x2760,
  SCR_OPAQUE_STRING_disable_dog_walk = 0x2761,
  SCR_OPAQUE_STRING_disable_dontevershoot = 0x2763,
  SCR_OPAQUE_STRING_disable_dynamic_run_speed = 0x2764,
  SCR_OPAQUE_STRING_disable_exits = 0x2765,
  SCR_OPAQUE_STRING_disable_flinch = 0x2767,
  SCR_OPAQUE_STRING_disable_fx_on_death = 0x2768,
  SCR_OPAQUE_STRING_disable_gun_recall = 0x2769,
  SCR_OPAQUE_STRING_disable_health_regen_shield = 0x276A,
  SCR_OPAQUE_STRING_disable_heat_behavior = 0x276B,
  SCR_OPAQUE_STRING_disable_hudoutline_on_death = 0x276C,
  SCR_OPAQUE_STRING_disable_ignorerandombulletdamage_drone = 0x276D,
  SCR_OPAQUE_STRING_disable_killcam = 0x276F,
  SCR_OPAQUE_STRING_disable_militia_behavior = 0x2772,
  SCR_OPAQUE_STRING_disable_nodes_before_allies_move = 0x2773,
  SCR_OPAQUE_STRING_disable_oneshotfx_with_noteworthy = 0x2775,
  SCR_OPAQUE_STRING_disable_pain = 0x2777,
  SCR_OPAQUE_STRING_disable_player_swim = 0x2779,
  SCR_OPAQUE_STRING_disable_readystand = 0x277A,
  SCR_OPAQUE_STRING_disable_sniper_outline = 0x277D,
  SCR_OPAQUE_STRING_disable_sprint = 0x2782,
  SCR_OPAQUE_STRING_disable_stealth = 0x2783,
  SCR_OPAQUE_STRING_disable_strikezone_rog = 0x2787,
  SCR_OPAQUE_STRING_disable_swim = 0x2789,
  SCR_OPAQUE_STRING_disable_target_on_death = 0x278A,
  SCR_OPAQUE_STRING_disable_teamflashbangimmunity = 0x278C,
  SCR_OPAQUE_STRING_disable_tired = 0x278E,
  SCR_OPAQUE_STRING_disable_torpedo_ui = 0x278F,
  SCR_OPAQUE_STRING_disable_trigger = 0x2790,
  SCR_OPAQUE_STRING_disable_trigger_helper = 0x2791,
  SCR_OPAQUE_STRING_disable_trigger_with_noteworthy = 0x2792,
  SCR_OPAQUE_STRING_disable_turnanims = 0x2794,
  SCR_OPAQUE_STRING_disable_turns_arrivals_exits = 0x2795,
  SCR_OPAQUE_STRING_disableallstreaks = 0x2799,
  SCR_OPAQUE_STRING_disablebattlechatter = 0x279C,
  SCR_OPAQUE_STRING_disablebutton = 0x279E,
  SCR_OPAQUE_STRING_disableclientspawntraces = 0x279F,
  SCR_OPAQUE_STRING_disablecollision = 0x27A0,
  SCR_OPAQUE_STRING_disablecoverarrivalsonly = 0x27A1,
  SCR_OPAQUE_STRING_disabled_use_for = 0x27A4,
  SCR_OPAQUE_STRING_disabledamageshieldpain = 0x27A5,
  SCR_OPAQUE_STRING_disabledefaultfacialanims = 0x27A6,
  SCR_OPAQUE_STRING_disabledoffhandweapons = 0x27A7,
  SCR_OPAQUE_STRING_disabledweapon = 0x27AA,
  SCR_OPAQUE_STRING_disablegeardrop = 0x27AF,
  SCR_OPAQUE_STRING_disablegrenadetracking = 0x27B0,
  SCR_OPAQUE_STRING_disablelongdeath = 0x27B3,
  SCR_OPAQUE_STRING_disablemovementtracker = 0x27B6,
  SCR_OPAQUE_STRING_disablepain = 0x27B8,
  SCR_OPAQUE_STRING_disablevehiclescripts = 0x27C0,
  SCR_OPAQUE_STRING_disablewhenjuggernaut = 0x27C2,
  SCR_OPAQUE_STRING_discardtime = 0x27C3,
  SCR_OPAQUE_STRING_disconnect_and_bad_place = 0x27C4,
  SCR_OPAQUE_STRING_disconnect_path_periodic = 0x27C5,
  SCR_OPAQUE_STRING_disconnect_paths = 0x27C6,
  SCR_OPAQUE_STRING_disconnect_paths_whenstopped = 0x27C8,
  SCR_OPAQUE_STRING_disconnecttraverses = 0x27CD,
  SCR_OPAQUE_STRING_discrete_waittill = 0x27D0,
  SCR_OPAQUE_STRING_disguise_head = 0x27D1,
  SCR_OPAQUE_STRING_disomount_hint = 0x27D3,
  SCR_OPAQUE_STRING_dispatch_activated_zone = 0x27D5,
  SCR_OPAQUE_STRING_dispatch_activated_zone_thread = 0x27D6,
  SCR_OPAQUE_STRING_dispatch_dog_think = 0x27D7,
  SCR_OPAQUE_STRING_dispatchnotify = 0x27D8,
  SCR_OPAQUE_STRING_displacement_uvscale = 0x27D9,
  SCR_OPAQUE_STRING_display_fx_add_options = 0x27DC,
  SCR_OPAQUE_STRING_display_hint = 0x27DE,
  SCR_OPAQUE_STRING_display_hint_stick = 0x27DF,
  SCR_OPAQUE_STRING_display_hint_stick_timeout = 0x27E0,
  SCR_OPAQUE_STRING_display_hint_stick_timeout_mintime = 0x27E1,
  SCR_OPAQUE_STRING_display_hint_timeout = 0x27E2,
  SCR_OPAQUE_STRING_display_hint_timeout_mintime = 0x27E3,
  SCR_OPAQUE_STRING_display_no_target = 0x27E4,
  SCR_OPAQUE_STRING_display_starts_pressed = 0x27E8,
  SCR_OPAQUE_STRING_displaybuddystatusmessage = 0x27ED,
  SCR_OPAQUE_STRING_displayed_hints = 0x27EE,
  SCR_OPAQUE_STRING_displaygameend = 0x27EF,
  SCR_OPAQUE_STRING_displayincomingairdropmessage = 0x27F0,
  SCR_OPAQUE_STRING_displayroundend = 0x27F2,
  SCR_OPAQUE_STRING_displaythreat = 0x27F4,
  SCR_OPAQUE_STRING_displaythrowmessage = 0x27F5,
  SCR_OPAQUE_STRING_dist_to_next_targ = 0x27FA,
  SCR_OPAQUE_STRING_distance_from_next_volume_sq = 0x2800,
  SCR_OPAQUE_STRING_distances = 0x2804,
  SCR_OPAQUE_STRING_distfromplayer = 0x2805,
  SCR_OPAQUE_STRING_distorg = 0x2808,
  SCR_OPAQUE_STRING_distort_pct = 0x2809,
  SCR_OPAQUE_STRING_disttoline = 0x280C,
  SCR_OPAQUE_STRING_dlight_on_me = 0x280D,
  SCR_OPAQUE_STRING_dmg_bullet_chance_player_static = 0x2810,
  SCR_OPAQUE_STRING_dmg_player_health_adjust_chance = 0x2813,
  SCR_OPAQUE_STRING_dmg_player_speed_evade_max_pct = 0x2814,
  SCR_OPAQUE_STRING_dmg_player_speed_evade_min_pct = 0x2815,
  SCR_OPAQUE_STRING_dmg_rear_elevator = 0x2817,
  SCR_OPAQUE_STRING_do_bird_single = 0x2819,
  SCR_OPAQUE_STRING_do_bird_single_enemy = 0x281A,
  SCR_OPAQUE_STRING_do_bokeh = 0x281C,
  SCR_OPAQUE_STRING_do_bokehdot_volume = 0x281D,
  SCR_OPAQUE_STRING_do_charge_attack = 0x281F,
  SCR_OPAQUE_STRING_do_creak = 0x2820,
  SCR_OPAQUE_STRING_do_damage_over_time = 0x2821,
  SCR_OPAQUE_STRING_do_decal_square = 0x2823,
  SCR_OPAQUE_STRING_do_dud_damage = 0x2824,
  SCR_OPAQUE_STRING_do_earthquake = 0x2825,
  SCR_OPAQUE_STRING_do_elias_head_look = 0x2826,
  SCR_OPAQUE_STRING_do_exit_wait_on_movement = 0x2829,
  SCR_OPAQUE_STRING_do_funcs = 0x282C,
  SCR_OPAQUE_STRING_do_fx_plane_break = 0x282D,
  SCR_OPAQUE_STRING_do_goto_trace = 0x282E,
  SCR_OPAQUE_STRING_do_ground_slam = 0x282F,
  SCR_OPAQUE_STRING_do_hand_wheeling_anim = 0x2831,
  SCR_OPAQUE_STRING_do_heavy_delete_wait = 0x2832,
  SCR_OPAQUE_STRING_do_knife_throw_blood = 0x2835,
  SCR_OPAQUE_STRING_do_multiple_treads = 0x2837,
  SCR_OPAQUE_STRING_do_nag_dialog = 0x2838,
  SCR_OPAQUE_STRING_do_no_game_start_teleport = 0x283B,
  SCR_OPAQUE_STRING_do_nothing = 0x283E,
  SCR_OPAQUE_STRING_do_physics_pulse = 0x283F,
  SCR_OPAQUE_STRING_do_rag_death = 0x2841,
  SCR_OPAQUE_STRING_do_ramp_light = 0x2842,
  SCR_OPAQUE_STRING_do_random_pilot_chatter = 0x2844,
  SCR_OPAQUE_STRING_do_rope_animation = 0x2845,
  SCR_OPAQUE_STRING_do_rubble = 0x2846,
  SCR_OPAQUE_STRING_do_single_tread = 0x2849,
  SCR_OPAQUE_STRING_do_spacejump_debris = 0x284A,
  SCR_OPAQUE_STRING_do_specular_sun_lerp = 0x284B,
  SCR_OPAQUE_STRING_do_tarps = 0x284E,
  SCR_OPAQUE_STRING_do_unique_debris = 0x2850,
  SCR_OPAQUE_STRING_do_wait_endons_array = 0x2853,
  SCR_OPAQUE_STRING_doaim = 0x2856,
  SCR_OPAQUE_STRING_doairstrikeflyby = 0x2859,
  SCR_OPAQUE_STRING_dobj_manager = 0x285B,
  SCR_OPAQUE_STRING_doblinkinglight = 0x285C,
  SCR_OPAQUE_STRING_dobomberstrike = 0x285D,
  SCR_OPAQUE_STRING_dobuilddot_wait = 0x285F,
  SCR_OPAQUE_STRING_docustomidle = 0x2862,
  SCR_OPAQUE_STRING_dodeathfromarray = 0x2863,
  SCR_OPAQUE_STRING_dodge_dir = 0x2864,
  SCR_OPAQUE_STRING_dodge_distance = 0x2865,
  SCR_OPAQUE_STRING_dodgemoveloopoverride = 0x2869,
  SCR_OPAQUE_STRING_dodgerightanimoffset = 0x286B,
  SCR_OPAQUE_STRING_dodot_delayfunc = 0x286E,
  SCR_OPAQUE_STRING_dodot_fadeinblackout = 0x286F,
  SCR_OPAQUE_STRING_dodrivenidle = 0x2874,
  SCR_OPAQUE_STRING_dodropff = 0x2875,
  SCR_OPAQUE_STRING_doempartifactloop = 0x2876,
  SCR_OPAQUE_STRING_doexposedcalloutresponse = 0x2878,
  SCR_OPAQUE_STRING_dof_blend_interior_ads = 0x287C,
  SCR_OPAQUE_STRING_dof_blend_interior_ads_element = 0x287D,
  SCR_OPAQUE_STRING_dof_blend_interior_ads_scalar = 0x287E,
  SCR_OPAQUE_STRING_dof_blend_interior_generic = 0x287F,
  SCR_OPAQUE_STRING_dof_disable_ads = 0x2882,
  SCR_OPAQUE_STRING_dof_enable_ads = 0x2884,
  SCR_OPAQUE_STRING_dof_enable_script = 0x2885,
  SCR_OPAQUE_STRING_dof_outro_pt2 = 0x2887,
  SCR_OPAQUE_STRING_dof_process_ads = 0x2888,
  SCR_OPAQUE_STRING_dof_ref_ent = 0x288B,
  SCR_OPAQUE_STRING_dof_set_generic = 0x288D,
  SCR_OPAQUE_STRING_dof_underwater_general = 0x2890,
  SCR_OPAQUE_STRING_dofacialdialogue = 0x2892,
  SCR_OPAQUE_STRING_dofinalkillcamfx = 0x2894,
  SCR_OPAQUE_STRING_dofiring = 0x2895,
  SCR_OPAQUE_STRING_dofriendlyfirereaction = 0x2897,
  SCR_OPAQUE_STRING_dog_active_touch_zones = 0x2899,
  SCR_OPAQUE_STRING_dog_additional_drivein_anims = 0x289B,
  SCR_OPAQUE_STRING_dog_animation_generic = 0x28A1,
  SCR_OPAQUE_STRING_dog_animation_sawcorpse = 0x28A3,
  SCR_OPAQUE_STRING_dog_animation_wakeup_slow = 0x28A5,
  SCR_OPAQUE_STRING_dog_attack_alt_func = 0x28A9,
  SCR_OPAQUE_STRING_dog_attack_back_enemies_logic = 0x28AA,
  SCR_OPAQUE_STRING_dog_attack_command_internal = 0x28AB,
  SCR_OPAQUE_STRING_dog_attack_damage_tracking = 0x28AC,
  SCR_OPAQUE_STRING_dog_attack_guy = 0x28B2,
  SCR_OPAQUE_STRING_dog_attack_range = 0x28B4,
  SCR_OPAQUE_STRING_dog_attack_slowmo = 0x28B5,
  SCR_OPAQUE_STRING_dog_attack_tunnel_sniper = 0x28B7,
  SCR_OPAQUE_STRING_dog_attack_victim_logic = 0x28B8,
  SCR_OPAQUE_STRING_dog_attacking_me = 0x28B9,
  SCR_OPAQUE_STRING_dog_bark = 0x28BB,
  SCR_OPAQUE_STRING_dog_bark_think = 0x28BD,
  SCR_OPAQUE_STRING_dog_cam_fov_default = 0x28BF,
  SCR_OPAQUE_STRING_dog_command_attack = 0x28C1,
  SCR_OPAQUE_STRING_dog_death_quote = 0x28C7,
  SCR_OPAQUE_STRING_dog_delayed_allow_damage = 0x28CB,
  SCR_OPAQUE_STRING_dog_delayed_unlink = 0x28CC,
  SCR_OPAQUE_STRING_dog_disable_ai_color = 0x28CD,
  SCR_OPAQUE_STRING_dog_downed_player = 0x28CE,
  SCR_OPAQUE_STRING_dog_drag_to_cover = 0x28CF,
  SCR_OPAQUE_STRING_dog_drive_animscript = 0x28D0,
  SCR_OPAQUE_STRING_dog_enemy_laststand_check = 0x28D4,
  SCR_OPAQUE_STRING_dog_exits_jeep = 0x28D5,
  SCR_OPAQUE_STRING_dog_force_talk = 0x28D9,
  SCR_OPAQUE_STRING_dog_friendly_spotted = 0x28DB,
  SCR_OPAQUE_STRING_dog_gasstation_logic = 0x28DC,
  SCR_OPAQUE_STRING_dog_goto_veh_and_enter = 0x28DF,
  SCR_OPAQUE_STRING_dog_health = 0x28E3,
  SCR_OPAQUE_STRING_dog_hint = 0x28E4,
  SCR_OPAQUE_STRING_dog_hint_check = 0x28E5,
  SCR_OPAQUE_STRING_dog_hits_before_kill = 0x28E7,
  SCR_OPAQUE_STRING_dog_hud_active = 0x28E8,
  SCR_OPAQUE_STRING_dog_hunt2_delete = 0x28EA,
  SCR_OPAQUE_STRING_dog_hunt_spotted = 0x28EB,
  SCR_OPAQUE_STRING_dog_in_exfil_jeep = 0x28EC,
  SCR_OPAQUE_STRING_dog_intro = 0x28EE,
  SCR_OPAQUE_STRING_dog_is_in_combat = 0x28EF,
  SCR_OPAQUE_STRING_dog_jump_down = 0x28F0,
  SCR_OPAQUE_STRING_dog_jump_guy = 0x28F1,
  SCR_OPAQUE_STRING_dog_jumpup_wait = 0x28F5,
  SCR_OPAQUE_STRING_dog_kills_roof_guy = 0x28F6,
  SCR_OPAQUE_STRING_dog_link = 0x28F8,
  SCR_OPAQUE_STRING_dog_lock_check = 0x28F9,
  SCR_OPAQUE_STRING_dog_lock_flag = 0x28FA,
  SCR_OPAQUE_STRING_dog_logic = 0x28FB,
  SCR_OPAQUE_STRING_dog_long_jump = 0x28FC,
  SCR_OPAQUE_STRING_dog_manage_damage = 0x28FE,
  SCR_OPAQUE_STRING_dog_marker = 0x28FF,
  SCR_OPAQUE_STRING_dog_melee_index = 0x2901,
  SCR_OPAQUE_STRING_dog_melee_timing_array = 0x2902,
  SCR_OPAQUE_STRING_dog_navigation_logic = 0x2904,
  SCR_OPAQUE_STRING_dog_neck_snapped = 0x2905,
  SCR_OPAQUE_STRING_dog_node_wait = 0x2906,
  SCR_OPAQUE_STRING_dog_pant = 0x2909,
  SCR_OPAQUE_STRING_dog_pant_think = 0x290A,
  SCR_OPAQUE_STRING_dog_return_to_sender = 0x2911,
  SCR_OPAQUE_STRING_dog_reunite = 0x2912,
  SCR_OPAQUE_STRING_dog_run_earthquakes = 0x2916,
  SCR_OPAQUE_STRING_dog_scratch_and_path = 0x2917,
  SCR_OPAQUE_STRING_dog_setup = 0x291B,
  SCR_OPAQUE_STRING_dog_sniff_spots = 0x291C,
  SCR_OPAQUE_STRING_dog_sprint_disable = 0x291F,
  SCR_OPAQUE_STRING_dog_stealth = 0x2921,
  SCR_OPAQUE_STRING_dog_stealth_visibility = 0x2922,
  SCR_OPAQUE_STRING_dog_swap_enemy = 0x2923,
  SCR_OPAQUE_STRING_dog_tag_origin = 0x2924,
  SCR_OPAQUE_STRING_dog_traverse_kill = 0x2927,
  SCR_OPAQUE_STRING_dog_victim_death_internal = 0x292A,
  SCR_OPAQUE_STRING_dog_victim_enemy_early_damage_detection = 0x292B,
  SCR_OPAQUE_STRING_dog_wait_anim_finished = 0x292E,
  SCR_OPAQUE_STRING_dog_walk = 0x2930,
  SCR_OPAQUE_STRING_dog_walk_for_time = 0x2931,
  SCR_OPAQUE_STRING_dogattackaidist = 0x2936,
  SCR_OPAQUE_STRING_dogattackradius = 0x2939,
  SCR_OPAQUE_STRING_dogdamagedradiussq = 0x293B,
  SCR_OPAQUE_STRING_doghintelem = 0x293C,
  SCR_OPAQUE_STRING_doginited = 0x293D,
  SCR_OPAQUE_STRING_doglookpose = 0x293E,
  SCR_OPAQUE_STRING_dognextidletwitchtime = 0x2942,
  SCR_OPAQUE_STRING_dogs = 0x2945,
  SCR_OPAQUE_STRING_dogsinitialized = 0x2948,
  SCR_OPAQUE_STRING_dogstartmovedist = 0x2949,
  SCR_OPAQUE_STRING_dogstoppingdistsq = 0x294B,
  SCR_OPAQUE_STRING_dogtag = 0x294C,
  SCR_OPAQUE_STRING_dogtags = 0x294D,
  SCR_OPAQUE_STRING_dogturnadjust = 0x2951,
  SCR_OPAQUE_STRING_doimmediateragdolldeath = 0x2955,
  SCR_OPAQUE_STRING_doing_hand_signal = 0x2957,
  SCR_OPAQUE_STRING_doing_in_space_rotation = 0x2958,
  SCR_OPAQUE_STRING_doing_start_anim = 0x295A,
  SCR_OPAQUE_STRING_doingadditivepain = 0x295B,
  SCR_OPAQUE_STRING_doingdamagestate = 0x295C,
  SCR_OPAQUE_STRING_doinglongdeath = 0x295E,
  SCR_OPAQUE_STRING_doingreacquirestep = 0x295F,
  SCR_OPAQUE_STRING_doingsplash = 0x2960,
  SCR_OPAQUE_STRING_dointrovignetteanim = 0x2961,
  SCR_OPAQUE_STRING_dolastminuteexposedapproach = 0x2963,
  SCR_OPAQUE_STRING_dolastminuteexposedapproachwrapper = 0x2964,
  SCR_OPAQUE_STRING_dolbstrike = 0x2965,
  SCR_OPAQUE_STRING_dolerp = 0x2967,
  SCR_OPAQUE_STRING_dom = 0x296B,
  SCR_OPAQUE_STRING_domarkingflash = 0x296D,
  SCR_OPAQUE_STRING_domegac130flyby = 0x296E,
  SCR_OPAQUE_STRING_domeleevsai = 0x2971,
  SCR_OPAQUE_STRING_domeleevsai_simple = 0x2972,
  SCR_OPAQUE_STRING_domeleevsai_simple_animcustom_cleanup = 0x2974,
  SCR_OPAQUE_STRING_domeleevsdog = 0x2975,
  SCR_OPAQUE_STRING_dominator_earthquake = 0x2979,
  SCR_OPAQUE_STRING_domissioncallback = 0x297B,
  SCR_OPAQUE_STRING_domortar = 0x297C,
  SCR_OPAQUE_STRING_dompointa = 0x297D,
  SCR_OPAQUE_STRING_dompointc = 0x297F,
  SCR_OPAQUE_STRING_dompointnumber = 0x2980,
  SCR_OPAQUE_STRING_donodeexitanimation = 0x2984,
  SCR_OPAQUE_STRING_dononattackcoverbehavior = 0x2985,
  SCR_OPAQUE_STRING_donotetracksforever = 0x2987,
  SCR_OPAQUE_STRING_donotetracksforpopup = 0x298A,
  SCR_OPAQUE_STRING_donotetracksfortime = 0x298B,
  SCR_OPAQUE_STRING_donotetrackspostcallback = 0x2991,
  SCR_OPAQUE_STRING_donotetrackswithendon = 0x2993,
  SCR_OPAQUE_STRING_donotetrackswithtimeout = 0x2994,
  SCR_OPAQUE_STRING_donothingfunc = 0x2995,
  SCR_OPAQUE_STRING_dont_allow_ammo_cache = 0x2996,
  SCR_OPAQUE_STRING_dont_auto_ride = 0x2998,
  SCR_OPAQUE_STRING_dont_crush_player = 0x2999,
  SCR_OPAQUE_STRING_dont_delete_mines_on_next_spawn = 0x299B,
  SCR_OPAQUE_STRING_dont_unlink_after_breach = 0x299E,
  SCR_OPAQUE_STRING_dontallowexplode = 0x29A0,
  SCR_OPAQUE_STRING_dontchangemoveplaybackrate = 0x29A2,
  SCR_OPAQUE_STRING_dontchangepushplayer = 0x29A3,
  SCR_OPAQUE_STRING_dontcolormove = 0x29A4,
  SCR_OPAQUE_STRING_dontcrouchtime = 0x29A5,
  SCR_OPAQUE_STRING_dontdonotetracks = 0x29A7,
  SCR_OPAQUE_STRING_dontdrawoncompass = 0x29A8,
  SCR_OPAQUE_STRING_dontdropweapon = 0x29A9,
  SCR_OPAQUE_STRING_dontgetonpath = 0x29AD,
  SCR_OPAQUE_STRING_dontshoot = 0x29B0,
  SCR_OPAQUE_STRING_dontshootwhilemoving = 0x29B2,
  SCR_OPAQUE_STRING_dontunloadondeath = 0x29B3,
  SCR_OPAQUE_STRING_dontunloadonend = 0x29B4,
  SCR_OPAQUE_STRING_donuke_fx = 0x29B7,
  SCR_OPAQUE_STRING_donuke_fx_strikezone = 0x29B8,
  SCR_OPAQUE_STRING_donukesimple = 0x29B9,
  SCR_OPAQUE_STRING_dooneflyby = 0x29BA,
  SCR_OPAQUE_STRING_door = 0x29BB,
  SCR_OPAQUE_STRING_door_break_foley = 0x29BC,
  SCR_OPAQUE_STRING_door_burst_splashes = 0x29BD,
  SCR_OPAQUE_STRING_door_close = 0x29BF,
  SCR_OPAQUE_STRING_door_close_behind = 0x29C0,
  SCR_OPAQUE_STRING_door_current_x = 0x29C3,
  SCR_OPAQUE_STRING_door_debris_l = 0x29C4,
  SCR_OPAQUE_STRING_door_fall_over = 0x29C7,
  SCR_OPAQUE_STRING_door_in = 0x29C8,
  SCR_OPAQUE_STRING_door_knockback = 0x29CB,
  SCR_OPAQUE_STRING_door_knockdown = 0x29CC,
  SCR_OPAQUE_STRING_door_l_modelswap = 0x29CD,
  SCR_OPAQUE_STRING_door_name = 0x29CE,
  SCR_OPAQUE_STRING_door_out = 0x29D2,
  SCR_OPAQUE_STRING_door_parse_parameters = 0x29D3,
  SCR_OPAQUE_STRING_door_play_sounds = 0x29D4,
  SCR_OPAQUE_STRING_door_state_exit = 0x29D9,
  SCR_OPAQUE_STRING_door_state_update_sound = 0x29DD,
  SCR_OPAQUE_STRING_door_switch_icon = 0x29DE,
  SCR_OPAQUE_STRING_door_switch_icon_fade_out = 0x29E2,
  SCR_OPAQUE_STRING_door_traversal = 0x29E7,
  SCR_OPAQUE_STRING_door_traversal_move = 0x29E8,
  SCR_OPAQUE_STRING_door_volume = 0x29E9,
  SCR_OPAQUE_STRING_doorangle = 0x29EA,
  SCR_OPAQUE_STRING_doorclose = 0x29EB,
  SCR_OPAQUE_STRING_doorenter_enable_cqbwalk = 0x29EE,
  SCR_OPAQUE_STRING_doorexit = 0x29F1,
  SCR_OPAQUE_STRING_doorfragchance = 0x29F4,
  SCR_OPAQUE_STRING_doormovetime = 0x29F6,
  SCR_OPAQUE_STRING_doors_open_flicker = 0x29FB,
  SCR_OPAQUE_STRING_doors_swingopen = 0x29FC,
  SCR_OPAQUE_STRING_doorspeed = 0x29FD,
  SCR_OPAQUE_STRING_doortype = 0x29FF,
  SCR_OPAQUE_STRING_doospreyinsertion = 0x2A00,
  SCR_OPAQUE_STRING_dopain = 0x2A01,
  SCR_OPAQUE_STRING_dopainfromarray = 0x2A02,
  SCR_OPAQUE_STRING_dopavelow = 0x2A03,
  SCR_OPAQUE_STRING_doreload = 0x2A08,
  SCR_OPAQUE_STRING_doshoot = 0x2A0C,
  SCR_OPAQUE_STRING_dosounddistant = 0x2A10,
  SCR_OPAQUE_STRING_dospacetraverse = 0x2A11,
  SCR_OPAQUE_STRING_dostrike = 0x2A15,
  SCR_OPAQUE_STRING_dostumble = 0x2A16,
  SCR_OPAQUE_STRING_dot_player = 0x2A1A,
  SCR_OPAQUE_STRING_dot_to_apache_player_facing_2d_inverse = 0x2A1C,
  SCR_OPAQUE_STRING_dotraverse_custom = 0x2A20,
  SCR_OPAQUE_STRING_doturnnotetracks = 0x2A23,
  SCR_OPAQUE_STRING_doturretearthquake = 0x2A24,
  SCR_OPAQUE_STRING_dotypelimit = 0x2A25,
  SCR_OPAQUE_STRING_doubletapcount = 0x2A2A,
  SCR_OPAQUE_STRING_doubletapthink = 0x2A2B,
  SCR_OPAQUE_STRING_dowalkanimoverride = 0x2A2D,
  SCR_OPAQUE_STRING_down_leg_move_percent = 0x2A2F,
  SCR_OPAQUE_STRING_down_part2_proc_ran = 0x2A31,
  SCR_OPAQUE_STRING_down_velocity = 0x2A32,
  SCR_OPAQUE_STRING_downed_enemy_monitor = 0x2A35,
  SCR_OPAQUE_STRING_download_time = 0x2A37,
  SCR_OPAQUE_STRING_download_timer = 0x2A38,
  SCR_OPAQUE_STRING_dpad_icon = 0x2A39,
  SCR_OPAQUE_STRING_dpad_icon_col = 0x2A3A,
  SCR_OPAQUE_STRING_drag_hints = 0x2A3E,
  SCR_OPAQUE_STRING_drag_interrogate_scene = 0x2A3F,
  SCR_OPAQUE_STRING_drag_metal_detector = 0x2A41,
  SCR_OPAQUE_STRING_drag_player_arms = 0x2A44,
  SCR_OPAQUE_STRING_drag_sounds = 0x2A45,
  SCR_OPAQUE_STRING_draw_arrow = 0x2A48,
  SCR_OPAQUE_STRING_draw_arrow_time = 0x2A49,
  SCR_OPAQUE_STRING_draw_bike_debug = 0x2A4B,
  SCR_OPAQUE_STRING_draw_boundry_sphere = 0x2A4C,
  SCR_OPAQUE_STRING_draw_col_vol_offset = 0x2A50,
  SCR_OPAQUE_STRING_draw_color_friendlies = 0x2A51,
  SCR_OPAQUE_STRING_draw_colored_nodes = 0x2A52,
  SCR_OPAQUE_STRING_draw_colornodes = 0x2A53,
  SCR_OPAQUE_STRING_draw_cut_hint = 0x2A55,
  SCR_OPAQUE_STRING_draw_effects_list = 0x2A59,
  SCR_OPAQUE_STRING_draw_entity_bounds = 0x2A5A,
  SCR_OPAQUE_STRING_draw_line_from_ent_for_time = 0x2A5D,
  SCR_OPAQUE_STRING_draw_line_from_ent_to_ent_for_time = 0x2A5E,
  SCR_OPAQUE_STRING_draw_line_from_ent_to_ent_until_notify = 0x2A5F,
  SCR_OPAQUE_STRING_draw_line_to_ent_for_time = 0x2A61,
  SCR_OPAQUE_STRING_draw_line_until_notify = 0x2A62,
  SCR_OPAQUE_STRING_draw_model_path = 0x2A63,
  SCR_OPAQUE_STRING_draw_move_path = 0x2A64,
  SCR_OPAQUE_STRING_draw_path = 0x2A66,
  SCR_OPAQUE_STRING_draw_radial_buttons = 0x2A69,
  SCR_OPAQUE_STRING_draw_trigger = 0x2A6B,
  SCR_OPAQUE_STRING_draw_turret_target_line = 0x2A6D,
  SCR_OPAQUE_STRING_draw_volume = 0x2A6E,
  SCR_OPAQUE_STRING_drawarrow = 0x2A71,
  SCR_OPAQUE_STRING_drawarrowforever = 0x2A72,
  SCR_OPAQUE_STRING_drawchopperattackarrow = 0x2A75,
  SCR_OPAQUE_STRING_drawcircleuntilnotify = 0x2A77,
  SCR_OPAQUE_STRING_drawenttag = 0x2A7A,
  SCR_OPAQUE_STRING_drawforwardforever = 0x2A7B,
  SCR_OPAQUE_STRING_drawfriend = 0x2A7C,
  SCR_OPAQUE_STRING_drawgraph = 0x2A7D,
  SCR_OPAQUE_STRING_drawminimapbounds = 0x2A80,
  SCR_OPAQUE_STRING_drawmyoff = 0x2A81,
  SCR_OPAQUE_STRING_drawoffset = 0x2A83,
  SCR_OPAQUE_STRING_draworgforever = 0x2A84,
  SCR_OPAQUE_STRING_draworiginforever = 0x2A85,
  SCR_OPAQUE_STRING_drawpath = 0x2A86,
  SCR_OPAQUE_STRING_drawplayerviewforever = 0x2A87,
  SCR_OPAQUE_STRING_drawsphere = 0x2A88,
  SCR_OPAQUE_STRING_drawstring = 0x2A89,
  SCR_OPAQUE_STRING_drawtag = 0x2A8B,
  SCR_OPAQUE_STRING_drawtagforever = 0x2A8C,
  SCR_OPAQUE_STRING_drift_hit = 0x2A91,
  SCR_OPAQUE_STRING_driftspeed = 0x2A93,
  SCR_OPAQUE_STRING_drill = 0x2A94,
  SCR_OPAQUE_STRING_drill_bink = 0x2A95,
  SCR_OPAQUE_STRING_drill_carrier = 0x2A96,
  SCR_OPAQUE_STRING_drill_detonate_bbprint = 0x2A98,
  SCR_OPAQUE_STRING_drill_fail_animation = 0x2A99,
  SCR_OPAQUE_STRING_drill_generic_bbprint = 0x2A9A,
  SCR_OPAQUE_STRING_drill_health_hardcore = 0x2A9B,
  SCR_OPAQUE_STRING_drill_health_scalar = 0x2A9C,
  SCR_OPAQUE_STRING_drill_icon = 0x2A9D,
  SCR_OPAQUE_STRING_drill_locs = 0x2AA0,
  SCR_OPAQUE_STRING_drill_monitor = 0x2AA2,
  SCR_OPAQUE_STRING_drill_nag = 0x2AA3,
  SCR_OPAQUE_STRING_drill_plant = 0x2AAA,
  SCR_OPAQUE_STRING_drill_progress_fx = 0x2AAC,
  SCR_OPAQUE_STRING_drill_reset_bbprint = 0x2AAF,
  SCR_OPAQUE_STRING_drill_reset_pos = 0x2AB0,
  SCR_OPAQUE_STRING_drill_sfx_dist_lp = 0x2AB1,
  SCR_OPAQUE_STRING_drill_sfx_lp = 0x2AB2,
  SCR_OPAQUE_STRING_drill_sfx_offline_lp = 0x2AB4,
  SCR_OPAQUE_STRING_drill_sfx_overheat_lp = 0x2AB5,
  SCR_OPAQUE_STRING_drill_synch_attack_play_anim = 0x2AB7,
  SCR_OPAQUE_STRING_drill_think = 0x2AB9,
  SCR_OPAQUE_STRING_drill_threat_think = 0x2ABA,
  SCR_OPAQUE_STRING_drill_time_scalar = 0x2ABB,
  SCR_OPAQUE_STRING_drill_tutorial_given = 0x2ABC,
  SCR_OPAQUE_STRING_drillthrough_plate_sound = 0x2AC2,
  SCR_OPAQUE_STRING_drip_already_played = 0x2AC3,
  SCR_OPAQUE_STRING_drip_on_player_choose_location = 0x2AC7,
  SCR_OPAQUE_STRING_drive_in_vo = 0x2AC8,
  SCR_OPAQUE_STRING_drivenanimupdate = 0x2ACA,
  SCR_OPAQUE_STRING_driver_dies = 0x2ACD,
  SCR_OPAQUE_STRING_driver_shooting = 0x2ACF,
  SCR_OPAQUE_STRING_driverdead = 0x2AD0,
  SCR_OPAQUE_STRING_drivingvehicle = 0x2AD1,
  SCR_OPAQUE_STRING_drone_animate_on_path = 0x2AD2,
  SCR_OPAQUE_STRING_drone_anims = 0x2AD3,
  SCR_OPAQUE_STRING_drone_array_handling = 0x2AD4,
  SCR_OPAQUE_STRING_drone_civs_init = 0x2AD7,
  SCR_OPAQUE_STRING_drone_death_handler = 0x2ADA,
  SCR_OPAQUE_STRING_drone_die = 0x2ADD,
  SCR_OPAQUE_STRING_drone_fight = 0x2AE0,
  SCR_OPAQUE_STRING_drone_fire_fake_javelin_loop = 0x2AE2,
  SCR_OPAQUE_STRING_drone_frontline_respawner = 0x2AE5,
  SCR_OPAQUE_STRING_drone_give_soul = 0x2AE7,
  SCR_OPAQUE_STRING_drone_gun_remove = 0x2AE8,
  SCR_OPAQUE_STRING_drone_idle = 0x2AE9,
  SCR_OPAQUE_STRING_drone_idle_custom = 0x2AEA,
  SCR_OPAQUE_STRING_drone_init_path = 0x2AEE,
  SCR_OPAQUE_STRING_drone_look_ahead_point = 0x2AF1,
  SCR_OPAQUE_STRING_drone_lookahead_value = 0x2AF2,
  SCR_OPAQUE_STRING_drone_loop_custom = 0x2AF3,
  SCR_OPAQUE_STRING_drone_move_callback = 0x2AF6,
  SCR_OPAQUE_STRING_drone_move_z = 0x2AF9,
  SCR_OPAQUE_STRING_drone_play_anim = 0x2AFB,
  SCR_OPAQUE_STRING_drone_play_looping_anim = 0x2AFC,
  SCR_OPAQUE_STRING_drone_play_scripted_anim = 0x2AFD,
  SCR_OPAQUE_STRING_drone_play_weapon_sound = 0x2AFE,
  SCR_OPAQUE_STRING_drone_respawner = 0x2B00,
  SCR_OPAQUE_STRING_drone_runanim = 0x2B02,
  SCR_OPAQUE_STRING_drone_set_runanim = 0x2B04,
  SCR_OPAQUE_STRING_drone_setname = 0x2B05,
  SCR_OPAQUE_STRING_drone_shoot = 0x2B06,
  SCR_OPAQUE_STRING_drone_shoot_rpg = 0x2B08,
  SCR_OPAQUE_STRING_drone_spawn = 0x2B0A,
  SCR_OPAQUE_STRING_drone_targets = 0x2B0E,
  SCR_OPAQUE_STRING_drone_thermal_draw_disable = 0x2B0F,
  SCR_OPAQUE_STRING_drone_traverse_check = 0x2B10,
  SCR_OPAQUE_STRING_dronemissilespawnarray = 0x2B1A,
  SCR_OPAQUE_STRING_dronepathstarts = 0x2B1B,
  SCR_OPAQUE_STRING_dronerowend = 0x2B1D,
  SCR_OPAQUE_STRING_dronerows = 0x2B1E,
  SCR_OPAQUE_STRING_dronerowsamount = 0x2B1F,
  SCR_OPAQUE_STRING_dronerunoffset = 0x2B21,
  SCR_OPAQUE_STRING_drones_crew = 0x2B23,
  SCR_OPAQUE_STRING_drones_death_watcher = 0x2B24,
  SCR_OPAQUE_STRING_drones_request_queue = 0x2B27,
  SCR_OPAQUE_STRING_drones_request_think = 0x2B28,
  SCR_OPAQUE_STRING_drones_targets_sets_to_default = 0x2B29,
  SCR_OPAQUE_STRING_dronespawner_init = 0x2B2D,
  SCR_OPAQUE_STRING_dronesthermalteamselect = 0x2B2E,
  SCR_OPAQUE_STRING_dronestruct = 0x2B2F,
  SCR_OPAQUE_STRING_drop_and_angle_to_ground = 0x2B31,
  SCR_OPAQUE_STRING_drop_ascender = 0x2B32,
  SCR_OPAQUE_STRING_drop_drill = 0x2B35,
  SCR_OPAQUE_STRING_drop_drill_on_disconnect = 0x2B37,
  SCR_OPAQUE_STRING_drop_geiger_counter = 0x2B3B,
  SCR_OPAQUE_STRING_drop_grenade_bag = 0x2B3C,
  SCR_OPAQUE_STRING_drop_health_timeout_thread = 0x2B3E,
  SCR_OPAQUE_STRING_drop_loc = 0x2B41,
  SCR_OPAQUE_STRING_drop_path_to_ground = 0x2B43,
  SCR_OPAQUE_STRING_drop_pillage_item_on_ground = 0x2B44,
  SCR_OPAQUE_STRING_drop_selection_to_ground = 0x2B45,
  SCR_OPAQUE_STRING_drop_to_ground = 0x2B46,
  SCR_OPAQUE_STRING_drop_turret = 0x2B47,
  SCR_OPAQUE_STRING_dropanim = 0x2B4A,
  SCR_OPAQUE_STRING_dropbombs = 0x2B4B,
  SCR_OPAQUE_STRING_dropcrateexistence = 0x2B4D,
  SCR_OPAQUE_STRING_dropimpulse = 0x2B4F,
  SCR_OPAQUE_STRING_dropnuke = 0x2B51,
  SCR_OPAQUE_STRING_dropoff_height = 0x2B52,
  SCR_OPAQUE_STRING_droponebomb = 0x2B53,
  SCR_OPAQUE_STRING_dropparachutebomb = 0x2B54,
  SCR_OPAQUE_STRING_droppeddeathweapon = 0x2B55,
  SCR_OPAQUE_STRING_droppedlinez = 0x2B57,
  SCR_OPAQUE_STRING_droppedoff = 0x2B58,
  SCR_OPAQUE_STRING_droppingoff = 0x2B5A,
  SCR_OPAQUE_STRING_droppingtoground = 0x2B5B,
  SCR_OPAQUE_STRING_droppostoground = 0x2B5C,
  SCR_OPAQUE_STRING_dropscavengerfordeath = 0x2B5D,
  SCR_OPAQUE_STRING_droptimeout = 0x2B60,
  SCR_OPAQUE_STRING_dropturret = 0x2B61,
  SCR_OPAQUE_STRING_droptype = 0x2B63,
  SCR_OPAQUE_STRING_dropweaponfordeath = 0x2B64,
  SCR_OPAQUE_STRING_dropweaponfordeathhorde = 0x2B65,
  SCR_OPAQUE_STRING_drown_choke = 0x2B68,
  SCR_OPAQUE_STRING_drown_die = 0x2B6A,
  SCR_OPAQUE_STRING_drown_heartbeat = 0x2B6B,
  SCR_OPAQUE_STRING_drown_max_alpha = 0x2B6C,
  SCR_OPAQUE_STRING_drowning_dialogue = 0x2B6D,
  SCR_OPAQUE_STRING_drowning_hudfx = 0x2B6F,
  SCR_OPAQUE_STRING_drs_ahead_test = 0x2B71,
  SCR_OPAQUE_STRING_ds_vo_timer = 0x2B72,
  SCR_OPAQUE_STRING_ds_vo_timer_left = 0x2B73,
  SCR_OPAQUE_STRING_ds_vo_timer_right = 0x2B74,
  SCR_OPAQUE_STRING_dshk_death_anim = 0x2B75,
  SCR_OPAQUE_STRING_dsq_2d_ents_lt = 0x2B78,
  SCR_OPAQUE_STRING_dual_firing = 0x2B7C,
  SCR_OPAQUE_STRING_dual_waittill = 0x2B7D,
  SCR_OPAQUE_STRING_duck_once = 0x2B7E,
  SCR_OPAQUE_STRING_duckidle = 0x2B7F,
  SCR_OPAQUE_STRING_duckidleoccurrence = 0x2B80,
  SCR_OPAQUE_STRING_duckin = 0x2B81,
  SCR_OPAQUE_STRING_duckout = 0x2B83,
  SCR_OPAQUE_STRING_dude_kicks_in_the_door = 0x2B84,
  SCR_OPAQUE_STRING_dude_kicks_in_the_door_setup = 0x2B85,
  SCR_OPAQUE_STRING_dudes_in_place_breach = 0x2B86,
  SCR_OPAQUE_STRING_dudes_in_place_cover = 0x2B87,
  SCR_OPAQUE_STRING_duffle_bag_anims = 0x2B88,
  SCR_OPAQUE_STRING_dumb_tank_shoot = 0x2B89,
  SCR_OPAQUE_STRING_dummy_ent = 0x2B8A,
  SCR_OPAQUE_STRING_dummy_to_vehicle = 0x2B8D,
  SCR_OPAQUE_STRING_dummyspeed = 0x2B8F,
  SCR_OPAQUE_STRING_dump_missing_anims = 0x2B91,
  SCR_OPAQUE_STRING_dumpit = 0x2B92,
  SCR_OPAQUE_STRING_dupe_hud = 0x2B93,
  SCR_OPAQUE_STRING_dusteffect = 0x2B96,
  SCR_OPAQUE_STRING_dvar = 0x2B97,
  SCR_OPAQUE_STRING_dyingcrawlaiming = 0x2B9B,
  SCR_OPAQUE_STRING_dyingcrawlbackaim = 0x2B9C,
  SCR_OPAQUE_STRING_dyingcrawlbloodsmear = 0x2B9D,
  SCR_OPAQUE_STRING_dyn_balloon_bob = 0x2B9E,
  SCR_OPAQUE_STRING_dyn_balloon_delete = 0x2B9F,
  SCR_OPAQUE_STRING_dyn_sniff_disable = 0x2BA4,
  SCR_OPAQUE_STRING_dyn_speed = 0x2BA6,
  SCR_OPAQUE_STRING_dyn_swimspeed_enable = 0x2BA8,
  SCR_OPAQUE_STRING_dynamic_player_crash = 0x2BAC,
  SCR_OPAQUE_STRING_dynamic_repulsor = 0x2BAD,
  SCR_OPAQUE_STRING_dynamic_sun_sample_size = 0x2BB3,
  SCR_OPAQUE_STRING_dynamicspawns = 0x2BB4,
  SCR_OPAQUE_STRING_dz_osprey_missiles = 0x2BB9,
  SCR_OPAQUE_STRING_e = 0x2BBA,
  SCR_OPAQUE_STRING_e3_demo = 0x2BBB,
  SCR_OPAQUE_STRING_e3_fadein = 0x2BBC,
  SCR_OPAQUE_STRING_e3_fadeout = 0x2BBD,
  SCR_OPAQUE_STRING_e3_section = 0x2BBE,
  SCR_OPAQUE_STRING_e3_section_start = 0x2BBF,
  SCR_OPAQUE_STRING_e3_start = 0x2BC0,
  SCR_OPAQUE_STRING_early_level = 0x2BC6,
  SCR_OPAQUE_STRING_early_prompt = 0x2BC7,
  SCR_OPAQUE_STRING_early_weapon_enabled = 0x2BC8,
  SCR_OPAQUE_STRING_earlyabortwatcher = 0x2BC9,
  SCR_OPAQUE_STRING_earned_dialog_col = 0x2BCB,
  SCR_OPAQUE_STRING_earned_hint_col = 0x2BCC,
  SCR_OPAQUE_STRING_earnedstreaklevel = 0x2BCD,
  SCR_OPAQUE_STRING_earnkillstreak = 0x2BCE,
  SCR_OPAQUE_STRING_earth_model = 0x2BD0,
  SCR_OPAQUE_STRING_earth_origin_start = 0x2BD1,
  SCR_OPAQUE_STRING_earthqauke_wait = 0x2BD3,
  SCR_OPAQUE_STRING_earthquake = 0x2BD4,
  SCR_OPAQUE_STRING_earthquake_destructibles_monitor = 0x2BD5,
  SCR_OPAQUE_STRING_earthquake_max = 0x2BD7,
  SCR_OPAQUE_STRING_earthquake_on_death = 0x2BD9,
  SCR_OPAQUE_STRING_earthquake_on_death_missile = 0x2BDA,
  SCR_OPAQUE_STRING_earthquake_player = 0x2BDB,
  SCR_OPAQUE_STRING_earthquake_strength = 0x2BDD,
  SCR_OPAQUE_STRING_earthquake_trigger = 0x2BDE,
  SCR_OPAQUE_STRING_ebreachmodel = 0x2BE3,
  SCR_OPAQUE_STRING_edge_lean_natural = 0x2BE4,
  SCR_OPAQUE_STRING_edgetiles = 0x2BE7,
  SCR_OPAQUE_STRING_effect_id = 0x2BEB,
  SCR_OPAQUE_STRING_effect_monitors = 0x2BEF,
  SCR_OPAQUE_STRING_effect_soundalias = 0x2BF0,
  SCR_OPAQUE_STRING_effectcheckfrequency = 0x2BF1,
  SCR_OPAQUE_STRING_effectheight = 0x2BF3,
  SCR_OPAQUE_STRING_effectlifespan = 0x2BF4,
  SCR_OPAQUE_STRING_effectmaxdelay = 0x2BF5,
  SCR_OPAQUE_STRING_effectradius = 0x2BF7,
  SCR_OPAQUE_STRING_ehq_intro_flag_wait_all = 0x2BFB,
  SCR_OPAQUE_STRING_ehq_znear_default = 0x2BFC,
  SCR_OPAQUE_STRING_einflictor = 0x2BFD,
  SCR_OPAQUE_STRING_either_player_looking_at = 0x2BFE,
  SCR_OPAQUE_STRING_ejected = 0x2BFF,
  SCR_OPAQUE_STRING_ele_enemy1 = 0x2C00,
  SCR_OPAQUE_STRING_electric_fences = 0x2C03,
  SCR_OPAQUE_STRING_elem = 0x2C06,
  SCR_OPAQUE_STRING_elevated_circling_retreat = 0x2C0A,
  SCR_OPAQUE_STRING_elevated_delay_retreat = 0x2C0B,
  SCR_OPAQUE_STRING_elevator_105 = 0x2C0D,
  SCR_OPAQUE_STRING_elevator_ac130_dmg = 0x2C0F,
  SCR_OPAQUE_STRING_elevator_accel = 0x2C11,
  SCR_OPAQUE_STRING_elevator_anims = 0x2C13,
  SCR_OPAQUE_STRING_elevator_call = 0x2C14,
  SCR_OPAQUE_STRING_elevator_callbutton_link_h = 0x2C15,
  SCR_OPAQUE_STRING_elevator_debug = 0x2C18,
  SCR_OPAQUE_STRING_elevator_door_open = 0x2C1C,
  SCR_OPAQUE_STRING_elevator_floor_update = 0x2C1E,
  SCR_OPAQUE_STRING_elevator_interrupt = 0x2C25,
  SCR_OPAQUE_STRING_elevator_lean_over = 0x2C27,
  SCR_OPAQUE_STRING_elevator_move = 0x2C29,
  SCR_OPAQUE_STRING_elevator_movement = 0x2C2A,
  SCR_OPAQUE_STRING_elevator_outterdoorspeed = 0x2C2C,
  SCR_OPAQUE_STRING_elevator_return = 0x2C2D,
  SCR_OPAQUE_STRING_elevator_room_combat = 0x2C2E,
  SCR_OPAQUE_STRING_elevator_room_left_flank = 0x2C31,
  SCR_OPAQUE_STRING_elevator_sound_think = 0x2C33,
  SCR_OPAQUE_STRING_elevator_think = 0x2C35,
  SCR_OPAQUE_STRING_elevator_update_global_dvars = 0x2C36,
  SCR_OPAQUE_STRING_elevator_zoom = 0x2C39,
  SCR_OPAQUE_STRING_elevatorblockpath = 0x2C3A,
  SCR_OPAQUE_STRING_elevatorclearpath = 0x2C3B,
  SCR_OPAQUE_STRING_elevatordoorsautoclose = 0x2C3C,
  SCR_OPAQUE_STRING_elevatormovetofloor = 0x2C3D,
  SCR_OPAQUE_STRING_elevators = 0x2C3E,
  SCR_OPAQUE_STRING_elias = 0x2C40,
  SCR_OPAQUE_STRING_elias_house_attack = 0x2C41,
  SCR_OPAQUE_STRING_elias_house_attack_dialogue = 0x2C42,
  SCR_OPAQUE_STRING_elias_house_attack_grab_sound = 0x2C45,
  SCR_OPAQUE_STRING_elias_house_attack_hesh_shot = 0x2C46,
  SCR_OPAQUE_STRING_elias_house_attack_hit_ground = 0x2C47,
  SCR_OPAQUE_STRING_elias_house_attack_knife_anim_logic = 0x2C48,
  SCR_OPAQUE_STRING_elias_house_attack_knife_fail_killplayer = 0x2C4A,
  SCR_OPAQUE_STRING_elias_house_attack_knife_hint = 0x2C4C,
  SCR_OPAQUE_STRING_elias_house_attack_knife_hint_logic = 0x2C4D,
  SCR_OPAQUE_STRING_elias_house_attack_knife_think = 0x2C4F,
  SCR_OPAQUE_STRING_elias_house_attack_knife_vision = 0x2C50,
  SCR_OPAQUE_STRING_elias_house_attack_wall = 0x2C53,
  SCR_OPAQUE_STRING_elias_house_attacker_breath_knife = 0x2C55,
  SCR_OPAQUE_STRING_elias_house_attacker_breath_sequence = 0x2C56,
  SCR_OPAQUE_STRING_elias_house_lift_rubble_scene = 0x2C5C,
  SCR_OPAQUE_STRING_elias_house_sequence = 0x2C5D,
  SCR_OPAQUE_STRING_elias_house_window_explosion = 0x2C5E,
  SCR_OPAQUE_STRING_elias_line = 0x2C5F,
  SCR_OPAQUE_STRING_elias_logic = 0x2C60,
  SCR_OPAQUE_STRING_elias_start = 0x2C62,
  SCR_OPAQUE_STRING_elias_street_advancing_drones = 0x2C63,
  SCR_OPAQUE_STRING_elias_street_artemis = 0x2C65,
  SCR_OPAQUE_STRING_elias_street_flee_guys = 0x2C69,
  SCR_OPAQUE_STRING_elias_street_flee_guys_enemies = 0x2C6A,
  SCR_OPAQUE_STRING_elias_street_helicopter_flyover = 0x2C6C,
  SCR_OPAQUE_STRING_elias_street_helicopter_spawn = 0x2C6D,
  SCR_OPAQUE_STRING_elite_angered = 0x2C71,
  SCR_OPAQUE_STRING_elite_approach = 0x2C72,
  SCR_OPAQUE_STRING_elite_monitor = 0x2C75,
  SCR_OPAQUE_STRING_emerge_node = 0x2C78,
  SCR_OPAQUE_STRING_emitfalldamage = 0x2C79,
  SCR_OPAQUE_STRING_emp_jamplayers = 0x2C7A,
  SCR_OPAQUE_STRING_emp_teamtracker = 0x2C7E,
  SCR_OPAQUE_STRING_emp_use = 0x2C7F,
  SCR_OPAQUE_STRING_empcandamage = 0x2C80,
  SCR_OPAQUE_STRING_empeffects = 0x2C82,
  SCR_OPAQUE_STRING_empgrenaded = 0x2C84,
  SCR_OPAQUE_STRING_emprumbleloop = 0x2C89,
  SCR_OPAQUE_STRING_emptimeout = 0x2C8A,
  SCR_OPAQUE_STRING_emptimeremaining = 0x2C8B,
  SCR_OPAQUE_STRING_empty_func = 0x2C8C,
  SCR_OPAQUE_STRING_empty_init_func = 0x2C8D,
  SCR_OPAQUE_STRING_empty_kill_func = 0x2C8E,
  SCR_OPAQUE_STRING_empty_spawner = 0x2C8F,
  SCR_OPAQUE_STRING_empty_suit_animation = 0x2C91,
  SCR_OPAQUE_STRING_enable_achievement_harder_they_fall = 0x2C94,
  SCR_OPAQUE_STRING_enable_blood_pool = 0x2CA0,
  SCR_OPAQUE_STRING_enable_bulletwhizbyreaction = 0x2CA1,
  SCR_OPAQUE_STRING_enable_careful = 0x2CA2,
  SCR_OPAQUE_STRING_enable_cqbwalk = 0x2CA3,
  SCR_OPAQUE_STRING_enable_danger_react = 0x2CA6,
  SCR_OPAQUE_STRING_enable_dog_sniff = 0x2CAB,
  SCR_OPAQUE_STRING_enable_dog_walk = 0x2CAC,
  SCR_OPAQUE_STRING_enable_elias_walk = 0x2CAF,
  SCR_OPAQUE_STRING_enable_global_vehicle_spawn_functions = 0x2CB4,
  SCR_OPAQUE_STRING_enable_hesh_walk = 0x2CB7,
  SCR_OPAQUE_STRING_enable_ignorerandombulletdamage_drone = 0x2CB8,
  SCR_OPAQUE_STRING_enable_limp = 0x2CBB,
  SCR_OPAQUE_STRING_enable_player_space = 0x2CC2,
  SCR_OPAQUE_STRING_enable_player_swim = 0x2CC3,
  SCR_OPAQUE_STRING_enable_space = 0x2CC6,
  SCR_OPAQUE_STRING_enable_spline_path_think = 0x2CC8,
  SCR_OPAQUE_STRING_enable_sprint = 0x2CC9,
  SCR_OPAQUE_STRING_enable_stealth_smart_stance = 0x2CCB,
  SCR_OPAQUE_STRING_enable_stealth_system = 0x2CCC,
  SCR_OPAQUE_STRING_enable_surprise = 0x2CCE,
  SCR_OPAQUE_STRING_enable_team_color = 0x2CD0,
  SCR_OPAQUE_STRING_enable_teamflashbangimmunity = 0x2CD1,
  SCR_OPAQUE_STRING_enable_teamflashbangimmunity_proc = 0x2CD2,
  SCR_OPAQUE_STRING_enable_tired = 0x2CD3,
  SCR_OPAQUE_STRING_enable_trigger_with_noteworthy = 0x2CD7,
  SCR_OPAQUE_STRING_enable_trigger_with_targetname = 0x2CD8,
  SCR_OPAQUE_STRING_enable_turnanims = 0x2CD9,
  SCR_OPAQUE_STRING_enable_turns_arrivals_exits = 0x2CDA,
  SCR_OPAQUE_STRING_enable_weapons = 0x2CDE,
  SCR_OPAQUE_STRING_enableairdropoutlineai = 0x2CDF,
  SCR_OPAQUE_STRING_enableextendedkill = 0x2CE4,
  SCR_OPAQUE_STRING_enablejammedeffect = 0x2CE6,
  SCR_OPAQUE_STRING_enablejuggernaut = 0x2CE7,
  SCR_OPAQUE_STRING_enablelaststandweapons = 0x2CE9,
  SCR_OPAQUE_STRING_enableplayerweapons = 0x2CEB,
  SCR_OPAQUE_STRING_enablesomecontrol = 0x2CED,
  SCR_OPAQUE_STRING_enablestop = 0x2CEF,
  SCR_OPAQUE_STRING_enableteamintel = 0x2CF0,
  SCR_OPAQUE_STRING_enableweaponlaser = 0x2CF1,
  SCR_OPAQUE_STRING_encoderatio = 0x2CF2,
  SCR_OPAQUE_STRING_end = 0x2CF6,
  SCR_OPAQUE_STRING_end_aim_idle_thread = 0x2CF7,
  SCR_OPAQUE_STRING_end_anim_then_loop = 0x2CF9,
  SCR_OPAQUE_STRING_end_birds = 0x2CFB,
  SCR_OPAQUE_STRING_end_breach_enemies_killed = 0x2CFD,
  SCR_OPAQUE_STRING_end_breach_enemy_spawn_single = 0x2CFE,
  SCR_OPAQUE_STRING_end_breach_engines_sieze = 0x2CFF,
  SCR_OPAQUE_STRING_end_breach_impulse_player_logic = 0x2D02,
  SCR_OPAQUE_STRING_end_breach_impulse_player_single = 0x2D03,
  SCR_OPAQUE_STRING_end_breach_player_death_rpg = 0x2D05,
  SCR_OPAQUE_STRING_end_breach_player_unlink = 0x2D06,
  SCR_OPAQUE_STRING_end_breach_rpg_explosion = 0x2D07,
  SCR_OPAQUE_STRING_end_breach_rpg_guy_fire = 0x2D0A,
  SCR_OPAQUE_STRING_end_color = 0x2D0E,
  SCR_OPAQUE_STRING_end_dialogue = 0x2D14,
  SCR_OPAQUE_STRING_end_enemies = 0x2D15,
  SCR_OPAQUE_STRING_end_fade = 0x2D16,
  SCR_OPAQUE_STRING_end_fardist = 0x2D17,
  SCR_OPAQUE_STRING_end_fire_and_anim_idle_thread = 0x2D18,
  SCR_OPAQUE_STRING_end_game_score = 0x2D19,
  SCR_OPAQUE_STRING_end_game_string_index = 0x2D1A,
  SCR_OPAQUE_STRING_end_game_string_override = 0x2D1B,
  SCR_OPAQUE_STRING_end_hdrsuncolorintensity = 0x2D1D,
  SCR_OPAQUE_STRING_end_heli_2_think = 0x2D1E,
  SCR_OPAQUE_STRING_end_heli_treadfx = 0x2D1F,
  SCR_OPAQUE_STRING_end_legs_jump_anim = 0x2D23,
  SCR_OPAQUE_STRING_end_level = 0x2D24,
  SCR_OPAQUE_STRING_end_mantle_angle = 0x2D27,
  SCR_OPAQUE_STRING_end_neardist = 0x2D2A,
  SCR_OPAQUE_STRING_end_nodes = 0x2D2B,
  SCR_OPAQUE_STRING_end_notifies = 0x2D2E,
  SCR_OPAQUE_STRING_end_of_scripting = 0x2D30,
  SCR_OPAQUE_STRING_end_opacity = 0x2D31,
  SCR_OPAQUE_STRING_end_org = 0x2D32,
  SCR_OPAQUE_STRING_end_script = 0x2D34,
  SCR_OPAQUE_STRING_end_script_corner = 0x2D35,
  SCR_OPAQUE_STRING_end_skyfogintensity = 0x2D36,
  SCR_OPAQUE_STRING_end_slide_effects = 0x2D3A,
  SCR_OPAQUE_STRING_end_sunbeginfadeangle = 0x2D3B,
  SCR_OPAQUE_STRING_end_suncolor = 0x2D3C,
  SCR_OPAQUE_STRING_end_sundir = 0x2D3D,
  SCR_OPAQUE_STRING_end_sunendfadeangle = 0x2D3E,
  SCR_OPAQUE_STRING_end_sunfogscale = 0x2D3F,
  SCR_OPAQUE_STRING_end_surface = 0x2D40,
  SCR_OPAQUE_STRING_end_swim_anim_node = 0x2D41,
  SCR_OPAQUE_STRING_end_swim_logic = 0x2D43,
  SCR_OPAQUE_STRING_end_thread = 0x2D44,
  SCR_OPAQUE_STRING_end_to_start_length = 0x2D46,
  SCR_OPAQUE_STRING_end_tunnel_swim = 0x2D47,
  SCR_OPAQUE_STRING_end_turret_reservation = 0x2D48,
  SCR_OPAQUE_STRING_endcustomevent = 0x2D4E,
  SCR_OPAQUE_STRING_endedkillcamcleanup = 0x2D4F,
  SCR_OPAQUE_STRING_endgame = 0x2D54,
  SCR_OPAQUE_STRING_endgameontimelimit = 0x2D5A,
  SCR_OPAQUE_STRING_endgameovertime = 0x2D5B,
  SCR_OPAQUE_STRING_endgameupdate = 0x2D5E,
  SCR_OPAQUE_STRING_ending2_debri_fall = 0x2D61,
  SCR_OPAQUE_STRING_ending2_window_break = 0x2D65,
  SCR_OPAQUE_STRING_ending_animatic_setup = 0x2D67,
  SCR_OPAQUE_STRING_ending_arms = 0x2D68,
  SCR_OPAQUE_STRING_ending_autosave = 0x2D69,
  SCR_OPAQUE_STRING_ending_bink_display = 0x2D6A,
  SCR_OPAQUE_STRING_ending_blink_qte_prompt = 0x2D6B,
  SCR_OPAQUE_STRING_ending_blood_wall = 0x2D6C,
  SCR_OPAQUE_STRING_ending_blur_logic = 0x2D6D,
  SCR_OPAQUE_STRING_ending_breach_ally = 0x2D6E,
  SCR_OPAQUE_STRING_ending_dof_05 = 0x2D77,
  SCR_OPAQUE_STRING_ending_dof_08 = 0x2D7A,
  SCR_OPAQUE_STRING_ending_door_r = 0x2D7C,
  SCR_OPAQUE_STRING_ending_fx_opfor03_fire_pilot = 0x2D83,
  SCR_OPAQUE_STRING_ending_gate_l = 0x2D84,
  SCR_OPAQUE_STRING_ending_gate_node_left = 0x2D85,
  SCR_OPAQUE_STRING_ending_gate_node_right = 0x2D86,
  SCR_OPAQUE_STRING_ending_gate_r = 0x2D87,
  SCR_OPAQUE_STRING_ending_harmless_shots_logic = 0x2D8A,
  SCR_OPAQUE_STRING_ending_heli = 0x2D8B,
  SCR_OPAQUE_STRING_ending_heli_callout_vo = 0x2D8C,
  SCR_OPAQUE_STRING_ending_heli_path = 0x2D8D,
  SCR_OPAQUE_STRING_ending_hvt_handle_damage = 0x2D8F,
  SCR_OPAQUE_STRING_ending_hvt_shot_blood_fx = 0x2D90,
  SCR_OPAQUE_STRING_ending_init = 0x2D91,
  SCR_OPAQUE_STRING_ending_lower_raise_weapon_logic = 0x2D94,
  SCR_OPAQUE_STRING_ending_open_doors = 0x2D95,
  SCR_OPAQUE_STRING_ending_opfor_1 = 0x2D97,
  SCR_OPAQUE_STRING_ending_opfor_kill_pilot = 0x2D9A,
  SCR_OPAQUE_STRING_ending_player_anims = 0x2D9B,
  SCR_OPAQUE_STRING_ending_player_broken_nose = 0x2D9C,
  SCR_OPAQUE_STRING_ending_player_enemy_broken_nose = 0x2D9E,
  SCR_OPAQUE_STRING_ending_player_failed_qte_0 = 0x2DA0,
  SCR_OPAQUE_STRING_ending_player_hvt_aim = 0x2DA3,
  SCR_OPAQUE_STRING_ending_player_qte_0_logic = 0x2DA8,
  SCR_OPAQUE_STRING_ending_player_qte_reach_logic = 0x2DAB,
  SCR_OPAQUE_STRING_ending_player_qte_shoot_logic = 0x2DAC,
  SCR_OPAQUE_STRING_ending_price_gets_capped = 0x2DB6,
  SCR_OPAQUE_STRING_ending_pt1_allies_sequence_start = 0x2DB7,
  SCR_OPAQUE_STRING_ending_pt1_ally_0_sequence = 0x2DB8,
  SCR_OPAQUE_STRING_ending_pt1_ally_1_sequence = 0x2DB9,
  SCR_OPAQUE_STRING_ending_pt2_player_sequence_save = 0x2DC0,
  SCR_OPAQUE_STRING_ending_qte_0_prompt_logic = 0x2DC1,
  SCR_OPAQUE_STRING_ending_qte_catch = 0x2DC3,
  SCR_OPAQUE_STRING_ending_qte_reach = 0x2DC8,
  SCR_OPAQUE_STRING_ending_scene = 0x2DCA,
  SCR_OPAQUE_STRING_ending_sequence = 0x2DCD,
  SCR_OPAQUE_STRING_ending_setup = 0x2DCF,
  SCR_OPAQUE_STRING_ending_transition = 0x2DD4,
  SCR_OPAQUE_STRING_ending_vo_main = 0x2DD5,
  SCR_OPAQUE_STRING_ending_white_fade = 0x2DD6,
  SCR_OPAQUE_STRING_endkillcamifnothingtoshow = 0x2DD8,
  SCR_OPAQUE_STRING_endmgstreakwhenleavemg = 0x2DDA,
  SCR_OPAQUE_STRING_endnotetrack = 0x2DDD,
  SCR_OPAQUE_STRING_endofspeedwatcher = 0x2DDF,
  SCR_OPAQUE_STRING_endonstring = 0x2DE2,
  SCR_OPAQUE_STRING_endpoint = 0x2DE5,
  SCR_OPAQUE_STRING_endpos = 0x2DE6,
  SCR_OPAQUE_STRING_endrespawnnotify = 0x2DE8,
  SCR_OPAQUE_STRING_endselectiononemp = 0x2DF0,
  SCR_OPAQUE_STRING_endselectiononendgame = 0x2DF1,
  SCR_OPAQUE_STRING_endsliding = 0x2DF2,
  SCR_OPAQUE_STRING_endtime = 0x2DF4,
  SCR_OPAQUE_STRING_enduavonlatejoiner = 0x2DF5,
  SCR_OPAQUE_STRING_endupvector = 0x2DF6,
  SCR_OPAQUE_STRING_endvel = 0x2DF7,
  SCR_OPAQUE_STRING_enemies_above_killed = 0x2DFA,
  SCR_OPAQUE_STRING_enemies_around_nitro = 0x2DFC,
  SCR_OPAQUE_STRING_enemies_engine_room = 0x2DFE,
  SCR_OPAQUE_STRING_enemies_engine_room_reinforcements = 0x2DFF,
  SCR_OPAQUE_STRING_enemies_engineroom_entry = 0x2E00,
  SCR_OPAQUE_STRING_enemies_engineroom_extinguisher = 0x2E02,
  SCR_OPAQUE_STRING_enemies_final_move = 0x2E05,
  SCR_OPAQUE_STRING_enemies_magic_bullet_until_player_at_corner = 0x2E08,
  SCR_OPAQUE_STRING_enemies_mg_watcher_shield_damage = 0x2E0A,
  SCR_OPAQUE_STRING_enemies_right_door = 0x2E0F,
  SCR_OPAQUE_STRING_enemies_sat1 = 0x2E10,
  SCR_OPAQUE_STRING_enemies_sat2 = 0x2E11,
  SCR_OPAQUE_STRING_enemies_scene = 0x2E12,
  SCR_OPAQUE_STRING_enemies_setup_explosion_scene_guys = 0x2E13,
  SCR_OPAQUE_STRING_enemieskilledintimewindow = 0x2E17,
  SCR_OPAQUE_STRING_enemy2 = 0x2E1A,
  SCR_OPAQUE_STRING_enemy_13 = 0x2E1B,
  SCR_OPAQUE_STRING_enemy_1_sitting = 0x2E1E,
  SCR_OPAQUE_STRING_enemy_1_standing = 0x2E1F,
  SCR_OPAQUE_STRING_enemy_alert_level_attack = 0x2E21,
  SCR_OPAQUE_STRING_enemy_alert_level_attack_wrapper = 0x2E22,
  SCR_OPAQUE_STRING_enemy_alert_level_default_pre_spotted_func = 0x2E25,
  SCR_OPAQUE_STRING_enemy_alert_level_forget = 0x2E26,
  SCR_OPAQUE_STRING_enemy_alert_level_logic = 0x2E27,
  SCR_OPAQUE_STRING_enemy_alert_level_normal = 0x2E29,
  SCR_OPAQUE_STRING_enemy_alert_level_normal_wrapper = 0x2E2A,
  SCR_OPAQUE_STRING_enemy_alert_level_reset_wrapper = 0x2E2B,
  SCR_OPAQUE_STRING_enemy_alert_level_warning1 = 0x2E2E,
  SCR_OPAQUE_STRING_enemy_animation_custom = 0x2E32,
  SCR_OPAQUE_STRING_enemy_animation_do_anim = 0x2E33,
  SCR_OPAQUE_STRING_enemy_animation_generic = 0x2E35,
  SCR_OPAQUE_STRING_enemy_animation_loop = 0x2E36,
  SCR_OPAQUE_STRING_enemy_animation_post_anim = 0x2E38,
  SCR_OPAQUE_STRING_enemy_animation_pre_anim = 0x2E39,
  SCR_OPAQUE_STRING_enemy_animation_pre_anim_dog_special_first_condition = 0x2E3A,
  SCR_OPAQUE_STRING_enemy_announce_corpse = 0x2E40,
  SCR_OPAQUE_STRING_enemy_announce_hmph = 0x2E41,
  SCR_OPAQUE_STRING_enemy_announce_spotted_acknowledge = 0x2E46,
  SCR_OPAQUE_STRING_enemy_announce_wtf = 0x2E48,
  SCR_OPAQUE_STRING_enemy_attempt_melee = 0x2E4A,
  SCR_OPAQUE_STRING_enemy_breach_anims = 0x2E4B,
  SCR_OPAQUE_STRING_enemy_checkpoint_dialogue = 0x2E53,
  SCR_OPAQUE_STRING_enemy_corpse_alert_level = 0x2E57,
  SCR_OPAQUE_STRING_enemy_corpse_found = 0x2E59,
  SCR_OPAQUE_STRING_enemy_corpse_found_loop = 0x2E5B,
  SCR_OPAQUE_STRING_enemy_corpse_logic = 0x2E5D,
  SCR_OPAQUE_STRING_enemy_corpse_saw_behavior = 0x2E61,
  SCR_OPAQUE_STRING_enemy_custom_corpse_behavior = 0x2E64,
  SCR_OPAQUE_STRING_enemy_custom_state_behavior = 0x2E65,
  SCR_OPAQUE_STRING_enemy_death_tracking = 0x2E69,
  SCR_OPAQUE_STRING_enemy_debris_vo = 0x2E6A,
  SCR_OPAQUE_STRING_enemy_default_corpse_behavior = 0x2E6D,
  SCR_OPAQUE_STRING_enemy_default_threat_anim_behavior = 0x2E6F,
  SCR_OPAQUE_STRING_enemy_destroyer_guy_logic = 0x2E71,
  SCR_OPAQUE_STRING_enemy_dialog_col = 0x2E72,
  SCR_OPAQUE_STRING_enemy_dog_init = 0x2E74,
  SCR_OPAQUE_STRING_enemy_drone_anim = 0x2E76,
  SCR_OPAQUE_STRING_enemy_drones_pt1_lower = 0x2E78,
  SCR_OPAQUE_STRING_enemy_drones_pt1_lower_runners = 0x2E79,
  SCR_OPAQUE_STRING_enemy_event_awareness_notify = 0x2E7D,
  SCR_OPAQUE_STRING_enemy_event_category_awareness = 0x2E7E,
  SCR_OPAQUE_STRING_enemy_event_debug_print = 0x2E7F,
  SCR_OPAQUE_STRING_enemy_event_declare_to_team = 0x2E80,
  SCR_OPAQUE_STRING_enemy_event_listeners_logic = 0x2E83,
  SCR_OPAQUE_STRING_enemy_event_listeners_proc = 0x2E84,
  SCR_OPAQUE_STRING_enemy_event_loop = 0x2E85,
  SCR_OPAQUE_STRING_enemy_event_reaction_dog_attack = 0x2E86,
  SCR_OPAQUE_STRING_enemy_event_reaction_dog_bark = 0x2E87,
  SCR_OPAQUE_STRING_enemy_event_reaction_flashbang = 0x2E89,
  SCR_OPAQUE_STRING_enemy_event_reaction_heard_scream = 0x2E8A,
  SCR_OPAQUE_STRING_enemy_final_wave_run = 0x2E8D,
  SCR_OPAQUE_STRING_enemy_gaz_health = 0x2E94,
  SCR_OPAQUE_STRING_enemy_get_nearby_pathnodes = 0x2E95,
  SCR_OPAQUE_STRING_enemy_go_back_clear_lastspot = 0x2E97,
  SCR_OPAQUE_STRING_enemy_heli_attacking = 0x2E9E,
  SCR_OPAQUE_STRING_enemy_heli_killed = 0x2E9F,
  SCR_OPAQUE_STRING_enemy_heli_respawner = 0x2EA1,
  SCR_OPAQUE_STRING_enemy_infantry_set_up_on_spawn = 0x2EA4,
  SCR_OPAQUE_STRING_enemy_investigate_position = 0x2EA7,
  SCR_OPAQUE_STRING_enemy_jeep_b = 0x2EAA,
  SCR_OPAQUE_STRING_enemy_jeep_turret = 0x2EAF,
  SCR_OPAQUE_STRING_enemy_lookaround_for_time = 0x2EB4,
  SCR_OPAQUE_STRING_enemy_lower_level = 0x2EB5,
  SCR_OPAQUE_STRING_enemy_melee_readjust = 0x2EB9,
  SCR_OPAQUE_STRING_enemy_mg_adjust_if_target_dies = 0x2EBA,
  SCR_OPAQUE_STRING_enemy_mg_burst_fire = 0x2EBB,
  SCR_OPAQUE_STRING_enemy_mg_get_untargeted_random_target = 0x2EBC,
  SCR_OPAQUE_STRING_enemy_mg_pin_down_player = 0x2EBD,
  SCR_OPAQUE_STRING_enemy_near_position = 0x2EBF,
  SCR_OPAQUE_STRING_enemy_odin_assault_exists = 0x2EC0,
  SCR_OPAQUE_STRING_enemy_patrol_phone = 0x2EC1,
  SCR_OPAQUE_STRING_enemy_plane_behind_skipto = 0x2EC3,
  SCR_OPAQUE_STRING_enemy_plane_engine_loop_01 = 0x2EC4,
  SCR_OPAQUE_STRING_enemy_plane_engine_loop_04 = 0x2EC7,
  SCR_OPAQUE_STRING_enemy_plane_looping_sounds_start = 0x2EC9,
  SCR_OPAQUE_STRING_enemy_poker_cards = 0x2ECA,
  SCR_OPAQUE_STRING_enemy_prespotted_func_default = 0x2ECC,
  SCR_OPAQUE_STRING_enemy_process_synch_attack = 0x2ECD,
  SCR_OPAQUE_STRING_enemy_reaction_state_alert = 0x2ED1,
  SCR_OPAQUE_STRING_enemy_rnd_runner = 0x2ED3,
  SCR_OPAQUE_STRING_enemy_runto_and_lookaround = 0x2ED5,
  SCR_OPAQUE_STRING_enemy_saw_corpse_logic = 0x2ED6,
  SCR_OPAQUE_STRING_enemy_sentry_difficulty_settings = 0x2ED7,
  SCR_OPAQUE_STRING_enemy_set_threat_behavior = 0x2EDB,
  SCR_OPAQUE_STRING_enemy_setup = 0x2EDC,
  SCR_OPAQUE_STRING_enemy_setup_vign = 0x2EDD,
  SCR_OPAQUE_STRING_enemy_setup_vign_floor = 0x2EDE,
  SCR_OPAQUE_STRING_enemy_shoot_at_player = 0x2EDF,
  SCR_OPAQUE_STRING_enemy_snowmobiles = 0x2EE1,
  SCR_OPAQUE_STRING_enemy_spanish_vo = 0x2EE3,
  SCR_OPAQUE_STRING_enemy_spawn_func = 0x2EE5,
  SCR_OPAQUE_STRING_enemy_squad_spawn = 0x2EE7,
  SCR_OPAQUE_STRING_enemy_stop_current_behavior = 0x2EEC,
  SCR_OPAQUE_STRING_enemy_struggle_anim = 0x2EF0,
  SCR_OPAQUE_STRING_enemy_struggle_anim_additives = 0x2EF1,
  SCR_OPAQUE_STRING_enemy_switchblade_exists = 0x2EF4,
  SCR_OPAQUE_STRING_enemy_tank_soldiers_2_init = 0x2EF8,
  SCR_OPAQUE_STRING_enemy_team_name = 0x2EFB,
  SCR_OPAQUE_STRING_enemy_threat_anim_defaults = 0x2EFC,
  SCR_OPAQUE_STRING_enemy_threat_logic = 0x2EFD,
  SCR_OPAQUE_STRING_enemy_threat_logic_dog = 0x2EFE,
  SCR_OPAQUE_STRING_enemy_threat_logic_dog_wait = 0x2EFF,
  SCR_OPAQUE_STRING_enemy_threat_loop = 0x2F01,
  SCR_OPAQUE_STRING_enemy_twitch = 0x2F04,
  SCR_OPAQUE_STRING_enemy_twitch_runstumble = 0x2F05,
  SCR_OPAQUE_STRING_enemy_wait_for_synch_attack_end = 0x2F09,
  SCR_OPAQUE_STRING_enemy_wait_for_synch_end_notify = 0x2F0A,
  SCR_OPAQUE_STRING_enemy_wait_for_synch_invalid_enemy = 0x2F0B,
  SCR_OPAQUE_STRING_enemy_waittill_count = 0x2F0C,
  SCR_OPAQUE_STRING_enemy_weapons_force_use_silencer = 0x2F0E,
  SCR_OPAQUE_STRING_enemy_zodiacs_spawn_and_attack = 0x2F0F,
  SCR_OPAQUE_STRING_enemy_zpu_health = 0x2F10,
  SCR_OPAQUE_STRING_enemygazs = 0x2F14,
  SCR_OPAQUE_STRING_enemyguys2 = 0x2F16,
  SCR_OPAQUE_STRING_enemyhq_basement_pre_load = 0x2F19,
  SCR_OPAQUE_STRING_enemyhq_footstep_override = 0x2F1B,
  SCR_OPAQUE_STRING_enemyhq_pre_load = 0x2F1E,
  SCR_OPAQUE_STRING_enemyhq_rooftop_intro_pre_load = 0x2F1F,
  SCR_OPAQUE_STRING_enemyhq_starts = 0x2F20,
  SCR_OPAQUE_STRING_enemyisingeneraldirection = 0x2F26,
  SCR_OPAQUE_STRING_enemytank_cleanup = 0x2F2B,
  SCR_OPAQUE_STRING_enemytanksbri1 = 0x2F2D,
  SCR_OPAQUE_STRING_enemyteam = 0x2F2E,
  SCR_OPAQUE_STRING_enemyteamid = 0x2F2F,
  SCR_OPAQUE_STRING_enemytrigger = 0x2F30,
  SCR_OPAQUE_STRING_enemyvelocity = 0x2F31,
  SCR_OPAQUE_STRING_engageground = 0x2F32,
  SCR_OPAQUE_STRING_engagementcomplimentdialognext = 0x2F33,
  SCR_OPAQUE_STRING_engagevehicle = 0x2F34,
  SCR_OPAQUE_STRING_engine_fxs = 0x2F35,
  SCR_OPAQUE_STRING_engineroom_headsmoke_fx_end = 0x2F37,
  SCR_OPAQUE_STRING_engineroom_headsmoke_fx_start = 0x2F38,
  SCR_OPAQUE_STRING_engineroom_heat_fx_shake = 0x2F39,
  SCR_OPAQUE_STRING_enginevfxtag = 0x2F3C,
  SCR_OPAQUE_STRING_enhanced_vision = 0x2F3D,
  SCR_OPAQUE_STRING_ent_flag = 0x2F42,
  SCR_OPAQUE_STRING_ent_flag_assert = 0x2F43,
  SCR_OPAQUE_STRING_ent_flag_exist = 0x2F46,
  SCR_OPAQUE_STRING_ent_flag_wait = 0x2F4A,
  SCR_OPAQUE_STRING_ent_flag_wait_either = 0x2F4B,
  SCR_OPAQUE_STRING_ent_flag_wait_or_timeout = 0x2F4C,
  SCR_OPAQUE_STRING_ent_flag_wait_vehicle_node = 0x2F4D,
  SCR_OPAQUE_STRING_ent_flag_waitopen = 0x2F4E,
  SCR_OPAQUE_STRING_ent_flags_lock = 0x2F50,
  SCR_OPAQUE_STRING_ent_is_highlighted = 0x2F51,
  SCR_OPAQUE_STRING_ent_parachute_from_plane_two = 0x2F54,
  SCR_OPAQUE_STRING_ent_wait_for_flag_or_time_elapses = 0x2F55,
  SCR_OPAQUE_STRING_ent_waits_for_trigger = 0x2F56,
  SCR_OPAQUE_STRING_enter = 0x2F57,
  SCR_OPAQUE_STRING_enter_blackbird_vo = 0x2F58,
  SCR_OPAQUE_STRING_enter_camera_zoomout = 0x2F59,
  SCR_OPAQUE_STRING_enter_jeep = 0x2F5D,
  SCR_OPAQUE_STRING_enter_revive_use_hold_think = 0x2F60,
  SCR_OPAQUE_STRING_enter_spectate = 0x2F61,
  SCR_OPAQUE_STRING_entermove = 0x2F64,
  SCR_OPAQUE_STRING_enterpronewrapper = 0x2F65,
  SCR_OPAQUE_STRING_entities_are_selected = 0x2F6A,
  SCR_OPAQUE_STRING_entity_counter = 0x2F6C,
  SCR_OPAQUE_STRING_entity_fx_and_anims_think = 0x2F6D,
  SCR_OPAQUE_STRING_entity_highlight_disable = 0x2F6E,
  SCR_OPAQUE_STRING_entity_highlight_enable = 0x2F6F,
  SCR_OPAQUE_STRING_entity_number = 0x2F70,
  SCR_OPAQUE_STRING_entity_path_disconnect_thread = 0x2F71,
  SCR_OPAQUE_STRING_entityheadiconoffset = 0x2F73,
  SCR_OPAQUE_STRING_entityheadiconteam = 0x2F76,
  SCR_OPAQUE_STRING_entitynumber = 0x2F77,
  SCR_OPAQUE_STRING_entnum = 0x2F78,
  SCR_OPAQUE_STRING_entrance_points = 0x2F7C,
  SCR_OPAQUE_STRING_entrance_visible_from = 0x2F7F,
  SCR_OPAQUE_STRING_entrance_watched_by_player = 0x2F81,
  SCR_OPAQUE_STRING_entry = 0x2F82,
  SCR_OPAQUE_STRING_entry_door_beeper = 0x2F83,
  SCR_OPAQUE_STRING_entry_door_close_layer2 = 0x2F85,
  SCR_OPAQUE_STRING_ents = 0x2F87,
  SCR_OPAQUE_STRING_entsound = 0x2F89,
  SCR_OPAQUE_STRING_eog_altimeter_conv_ratio = 0x2F8A,
  SCR_OPAQUE_STRING_eog_player_tracking_init = 0x2F8B,
  SCR_OPAQUE_STRING_eog_player_update_stat = 0x2F8C,
  SCR_OPAQUE_STRING_eq_table = 0x2F8E,
  SCR_OPAQUE_STRING_eq_track = 0x2F90,
  SCR_OPAQUE_STRING_eq_trigger_num = 0x2F91,
  SCR_OPAQUE_STRING_equal_to_goal = 0x2F92,
  SCR_OPAQUE_STRING_equipment_enabled = 0x2F93,
  SCR_OPAQUE_STRING_equipmentdeathvfx = 0x2F94,
  SCR_OPAQUE_STRING_equipmentdeletevfx = 0x2F95,
  SCR_OPAQUE_STRING_equipmentempstunvfx = 0x2F96,
  SCR_OPAQUE_STRING_equipped_hide_weapon = 0x2F98,
  SCR_OPAQUE_STRING_equipped_weapon = 0x2F99,
  SCR_OPAQUE_STRING_erasefinalkillcam = 0x2F9A,
  SCR_OPAQUE_STRING_error = 0x2F9B,
  SCR_OPAQUE_STRING_escape_choke_init = 0x2FA3,
  SCR_OPAQUE_STRING_escape_combat_door = 0x2FA6,
  SCR_OPAQUE_STRING_escape_cycle = 0x2FA7,
  SCR_OPAQUE_STRING_escape_dialogue = 0x2FAB,
  SCR_OPAQUE_STRING_escape_door_anim_player = 0x2FAD,
  SCR_OPAQUE_STRING_escape_enemies_and_vehicles = 0x2FB0,
  SCR_OPAQUE_STRING_escape_enemy_01_think = 0x2FB2,
  SCR_OPAQUE_STRING_escape_enemy_02_think = 0x2FB3,
  SCR_OPAQUE_STRING_escape_enemy_03_think = 0x2FB4,
  SCR_OPAQUE_STRING_escape_enemy_setup = 0x2FB5,
  SCR_OPAQUE_STRING_escape_fake_underwater_bullets = 0x2FB7,
  SCR_OPAQUE_STRING_escape_friendly_follow_spline = 0x2FB9,
  SCR_OPAQUE_STRING_escape_friendly_movement = 0x2FBB,
  SCR_OPAQUE_STRING_escape_jungle_start = 0x2FBD,
  SCR_OPAQUE_STRING_escape_loc = 0x2FBE,
  SCR_OPAQUE_STRING_escape_main = 0x2FBF,
  SCR_OPAQUE_STRING_escape_objective = 0x2FC2,
  SCR_OPAQUE_STRING_escape_play_slide_fx_on_npc = 0x2FC3,
  SCR_OPAQUE_STRING_escape_player_jump = 0x2FC6,
  SCR_OPAQUE_STRING_escape_player_speed = 0x2FC7,
  SCR_OPAQUE_STRING_escape_river_start = 0x2FC9,
  SCR_OPAQUE_STRING_escape_scripted_destruction = 0x2FCB,
  SCR_OPAQUE_STRING_escape_setup = 0x2FCC,
  SCR_OPAQUE_STRING_escape_setup_trees = 0x2FCE,
  SCR_OPAQUE_STRING_escape_socr_turret_own_target = 0x2FD1,
  SCR_OPAQUE_STRING_escape_spawn_special_minion_wave = 0x2FD2,
  SCR_OPAQUE_STRING_escape_vo = 0x2FD8,
  SCR_OPAQUE_STRING_escape_waterfall_enemies_logic = 0x2FD9,
  SCR_OPAQUE_STRING_estate = 0x2FDD,
  SCR_OPAQUE_STRING_estimatedtimetillscorelimit = 0x2FDE,
  SCR_OPAQUE_STRING_evad_anims = 0x2FE0,
  SCR_OPAQUE_STRING_eval = 0x2FE2,
  SCR_OPAQUE_STRING_evaluatefiringevent = 0x2FE4,
  SCR_OPAQUE_STRING_evaluatemeleeevent = 0x2FE5,
  SCR_OPAQUE_STRING_evaluatesuppressionevent = 0x2FE8,
  SCR_OPAQUE_STRING_evasive_addpoint = 0x2FE9,
  SCR_OPAQUE_STRING_evasive_endmaneuvers = 0x2FED,
  SCR_OPAQUE_STRING_event_awareness_dialogue_wrapper = 0x2FF5,
  SCR_OPAQUE_STRING_event_awareness_enders = 0x2FF6,
  SCR_OPAQUE_STRING_event_derrick_explode_catwalk_break = 0x2FFE,
  SCR_OPAQUE_STRING_event_derrick_explode_debris_bomb_throw_enemy = 0x3001,
  SCR_OPAQUE_STRING_event_derrick_explode_debris_main = 0x3003,
  SCR_OPAQUE_STRING_event_derrick_explode_debris_oiltank = 0x3005,
  SCR_OPAQUE_STRING_event_derrick_explode_debris_setup_collision = 0x3007,
  SCR_OPAQUE_STRING_event_derrick_explode_large = 0x300A,
  SCR_OPAQUE_STRING_event_derrick_explode_setup = 0x300B,
  SCR_OPAQUE_STRING_event_derrick_explode_stack_setup = 0x300D,
  SCR_OPAQUE_STRING_event_flarestack_enter = 0x300F,
  SCR_OPAQUE_STRING_event_flarestack_enter_fail_watcher = 0x3011,
  SCR_OPAQUE_STRING_event_intro_player_anims = 0x3014,
  SCR_OPAQUE_STRING_event_intro_tv_pip = 0x3015,
  SCR_OPAQUE_STRING_event_jet_flyby = 0x3016,
  SCR_OPAQUE_STRING_event_noticket = 0x3017,
  SCR_OPAQUE_STRING_event_pipe_explosions = 0x3018,
  SCR_OPAQUE_STRING_event_player_arm_break = 0x3019,
  SCR_OPAQUE_STRING_event_player_gets_kicked = 0x301B,
  SCR_OPAQUE_STRING_event_player_grabs_knife = 0x301D,
  SCR_OPAQUE_STRING_event_pressure_buildup = 0x301F,
  SCR_OPAQUE_STRING_event_qte_bullet_catch = 0x3021,
  SCR_OPAQUE_STRING_event_quaker_indoor = 0x3024,
  SCR_OPAQUE_STRING_event_quaker_outdoor = 0x3025,
  SCR_OPAQUE_STRING_event_rogs_finale = 0x3027,
  SCR_OPAQUE_STRING_event_scan_manager = 0x302B,
  SCR_OPAQUE_STRING_event_sinking_boats = 0x302C,
  SCR_OPAQUE_STRING_event_tanks_bridge_fall_scene = 0x302E,
  SCR_OPAQUE_STRING_event_thread = 0x302F,
  SCR_OPAQUE_STRING_eventactionminwait = 0x3035,
  SCR_OPAQUE_STRING_eventchance = 0x3036,
  SCR_OPAQUE_STRING_eventduration = 0x3037,
  SCR_OPAQUE_STRING_eventpriority = 0x3038,
  SCR_OPAQUE_STRING_eventstring = 0x303A,
  SCR_OPAQUE_STRING_eventtype = 0x303B,
  SCR_OPAQUE_STRING_eventtypeminwait = 0x303C,
  SCR_OPAQUE_STRING_everusessecondaryweapon = 0x303D,
  SCR_OPAQUE_STRING_exceededmaxballdrones = 0x303E,
  SCR_OPAQUE_STRING_exception = 0x3044,
  SCR_OPAQUE_STRING_excludedir = 0x3046,
  SCR_OPAQUE_STRING_execute_save = 0x304C,
  SCR_OPAQUE_STRING_execution = 0x304D,
  SCR_OPAQUE_STRING_execution_guy_dead = 0x304E,
  SCR_OPAQUE_STRING_execution_slowmo = 0x304F,
  SCR_OPAQUE_STRING_executor_kill_hostage_notetrack = 0x3051,
  SCR_OPAQUE_STRING_exfil_animnode = 0x3054,
  SCR_OPAQUE_STRING_exfil_anims_cornering = 0x3055,
  SCR_OPAQUE_STRING_exfil_blackice_exfil_heli_lights_fx = 0x3057,
  SCR_OPAQUE_STRING_exfil_chopper = 0x3059,
  SCR_OPAQUE_STRING_exfil_cypher_enter_jeep = 0x305A,
  SCR_OPAQUE_STRING_exfil_engine_fires = 0x305D,
  SCR_OPAQUE_STRING_exfil_enter_jeep = 0x3060,
  SCR_OPAQUE_STRING_exfil_get_on_turret = 0x3061,
  SCR_OPAQUE_STRING_exfil_gun_cock = 0x3062,
  SCR_OPAQUE_STRING_exfil_hall_explosions = 0x3063,
  SCR_OPAQUE_STRING_exfil_heli = 0x3065,
  SCR_OPAQUE_STRING_exfil_heli_smoke_fx_01 = 0x3066,
  SCR_OPAQUE_STRING_exfil_heli_spotlight = 0x3067,
  SCR_OPAQUE_STRING_exfil_heli_tag = 0x3068,
  SCR_OPAQUE_STRING_exfil_hoodsmack = 0x3069,
  SCR_OPAQUE_STRING_exfil_jeep_latch_close_lf = 0x306A,
  SCR_OPAQUE_STRING_exfil_jeep_latch_close_rf = 0x306C,
  SCR_OPAQUE_STRING_exfil_jeep_latch_open_lf = 0x306D,
  SCR_OPAQUE_STRING_exfil_jet = 0x3070,
  SCR_OPAQUE_STRING_exfil_keegan_and_cypher_enter_jeep = 0x3072,
  SCR_OPAQUE_STRING_exfil_mblur_changes = 0x3075,
  SCR_OPAQUE_STRING_exfil_player_view_smoke_particles = 0x307A,
  SCR_OPAQUE_STRING_exfil_random_quaker = 0x307B,
  SCR_OPAQUE_STRING_exfil_slomo = 0x307D,
  SCR_OPAQUE_STRING_exfil_sniper = 0x307E,
  SCR_OPAQUE_STRING_exfil_teleport = 0x3080,
  SCR_OPAQUE_STRING_exfil_vision_bump = 0x3081,
  SCR_OPAQUE_STRING_exfil_yellow_alarms = 0x3082,
  SCR_OPAQUE_STRING_exit = 0x3086,
  SCR_OPAQUE_STRING_exit_gamemodespecificaction = 0x3088,
  SCR_OPAQUE_STRING_exit_laststand = 0x308B,
  SCR_OPAQUE_STRING_exit_nags = 0x308C,
  SCR_OPAQUE_STRING_exit_tunnel_jeep_by = 0x3094,
  SCR_OPAQUE_STRING_exit_water_tired = 0x3095,
  SCR_OPAQUE_STRING_exit_wreck_check = 0x3097,
  SCR_OPAQUE_STRING_exitaistate = 0x3098,
  SCR_OPAQUE_STRING_exiting_combat_player_fail = 0x3099,
  SCR_OPAQUE_STRING_exiting_combat_zone = 0x309A,
  SCR_OPAQUE_STRING_exitpronewrapper = 0x309C,
  SCR_OPAQUE_STRING_expand_goalradius = 0x30A0,
  SCR_OPAQUE_STRING_expire_time = 0x30A4,
  SCR_OPAQUE_STRING_explicitabandonminitarget = 0x30A6,
  SCR_OPAQUE_STRING_explicitabandontarget = 0x30A7,
  SCR_OPAQUE_STRING_explode_gunboats = 0x30AA,
  SCR_OPAQUE_STRING_explode_zodiacs = 0x30AE,
  SCR_OPAQUE_STRING_exploded = 0x30AF,
  SCR_OPAQUE_STRING_explodeondamage = 0x30B0,
  SCR_OPAQUE_STRING_exploder = 0x30B1,
  SCR_OPAQUE_STRING_exploder_after_load = 0x30B2,
  SCR_OPAQUE_STRING_exploder_cache = 0x30B4,
  SCR_OPAQUE_STRING_exploder_damage = 0x30B6,
  SCR_OPAQUE_STRING_exploder_damage_loop = 0x30B7,
  SCR_OPAQUE_STRING_exploder_earthquake = 0x30B9,
  SCR_OPAQUE_STRING_exploder_flag_wait = 0x30BA,
  SCR_OPAQUE_STRING_exploder_fx_stuffs = 0x30BB,
  SCR_OPAQUE_STRING_exploder_model_is_chunk = 0x30BD,
  SCR_OPAQUE_STRING_exploder_radius_custom = 0x30C1,
  SCR_OPAQUE_STRING_exploder_with_connect_watch = 0x30C6,
  SCR_OPAQUE_STRING_exploderfunction = 0x30C7,
  SCR_OPAQUE_STRING_exploderfx = 0x30C8,
  SCR_OPAQUE_STRING_exploders_cached = 0x30CB,
  SCR_OPAQUE_STRING_exploders_explode_for_late_player = 0x30CC,
  SCR_OPAQUE_STRING_explodevfx = 0x30CE,
  SCR_OPAQUE_STRING_exploding_heli = 0x30D1,
  SCR_OPAQUE_STRING_explosion_anim = 0x30D5,
  SCR_OPAQUE_STRING_explosion_boom = 0x30D7,
  SCR_OPAQUE_STRING_explosion_death = 0x30D8,
  SCR_OPAQUE_STRING_explosion_death_offset = 0x30D9,
  SCR_OPAQUE_STRING_explosion_delay = 0x30DB,
  SCR_OPAQUE_STRING_explosion_incoming = 0x30DD,
  SCR_OPAQUE_STRING_explosion_throw_sandbags = 0x30E2,
  SCR_OPAQUE_STRING_explosion_vehicle_killer2 = 0x30E4,
  SCR_OPAQUE_STRING_explosion_vehicle_killer3 = 0x30E5,
  SCR_OPAQUE_STRING_explosion_vehicle_killer4 = 0x30E6,
  SCR_OPAQUE_STRING_explosive_damage_watch = 0x30EB,
  SCR_OPAQUE_STRING_explosive_dist = 0x30EC,
  SCR_OPAQUE_STRING_explosive_type = 0x30ED,
  SCR_OPAQUE_STRING_explosivehandlemovers = 0x30EF,
  SCR_OPAQUE_STRING_explosiveinfo = 0x30F0,
  SCR_OPAQUE_STRING_explosiveplanttime = 0x30F3,
  SCR_OPAQUE_STRING_explosivetrigger = 0x30F4,
  SCR_OPAQUE_STRING_expltagroot = 0x30F5,
  SCR_OPAQUE_STRING_exposed_guy = 0x30F8,
  SCR_OPAQUE_STRING_exposedcombatcheckputawaypistol = 0x30FC,
  SCR_OPAQUE_STRING_exposedcombatcheckreloadorusepistol = 0x30FD,
  SCR_OPAQUE_STRING_exposedcombatmainloop = 0x30FF,
  SCR_OPAQUE_STRING_exposedcombatpositionadjust = 0x3101,
  SCR_OPAQUE_STRING_exposedcombatstopusingrpgcheck = 0x3102,
  SCR_OPAQUE_STRING_extra_vehicle_cleanup = 0x310A,
  SCR_OPAQUE_STRING_extrafiretime_max = 0x310B,
  SCR_OPAQUE_STRING_extrafiretime_min = 0x310C,
  SCR_OPAQUE_STRING_extraspintime_max = 0x310D,
  SCR_OPAQUE_STRING_f_max = 0x3112,
  SCR_OPAQUE_STRING_face_players = 0x3115,
  SCR_OPAQUE_STRING_faceenemyaimtracking = 0x3116,
  SCR_OPAQUE_STRING_faceenemyarrival = 0x3117,
  SCR_OPAQUE_STRING_faceenemyatendofapproach = 0x3118,
  SCR_OPAQUE_STRING_faceresult = 0x311C,
  SCR_OPAQUE_STRING_facewaitforresult = 0x311E,
  SCR_OPAQUE_STRING_faceyaw = 0x3120,
  SCR_OPAQUE_STRING_facial = 0x3121,
  SCR_OPAQUE_STRING_facialidx = 0x3125,
  SCR_OPAQUE_STRING_facing_dot = 0x3129,
  SCR_OPAQUE_STRING_fade = 0x312C,
  SCR_OPAQUE_STRING_fade_ambient_elem_internal = 0x312D,
  SCR_OPAQUE_STRING_fade_ambient_elems = 0x312F,
  SCR_OPAQUE_STRING_fade_from_black = 0x3130,
  SCR_OPAQUE_STRING_fade_in_hint = 0x3135,
  SCR_OPAQUE_STRING_fade_in_logo = 0x3136,
  SCR_OPAQUE_STRING_fade_in_to_alpha = 0x3138,
  SCR_OPAQUE_STRING_fade_logo_run_credits = 0x313B,
  SCR_OPAQUE_STRING_fade_out = 0x313C,
  SCR_OPAQUE_STRING_fade_out_cut_hint = 0x313D,
  SCR_OPAQUE_STRING_fade_out_hint = 0x3140,
  SCR_OPAQUE_STRING_fade_out_in = 0x3141,
  SCR_OPAQUE_STRING_fade_out_time = 0x3145,
  SCR_OPAQUE_STRING_fade_qte_prompt = 0x3148,
  SCR_OPAQUE_STRING_fade_sun_in_out = 0x3149,
  SCR_OPAQUE_STRING_fade_tired = 0x314B,
  SCR_OPAQUE_STRING_fade_up_black = 0x314D,
  SCR_OPAQUE_STRING_fadeaway = 0x314E,
  SCR_OPAQUE_STRING_fadeinblackout = 0x3150,
  SCR_OPAQUE_STRING_fadeoverlay_no_blur = 0x3154,
  SCR_OPAQUE_STRING_fadetoalpha = 0x3155,
  SCR_OPAQUE_STRING_fadetoalphatime = 0x3156,
  SCR_OPAQUE_STRING_fading = 0x3157,
  SCR_OPAQUE_STRING_fail_mission_ambush = 0x315A,
  SCR_OPAQUE_STRING_fail_mission_leave_area = 0x315B,
  SCR_OPAQUE_STRING_fail_on_player_kill = 0x315E,
  SCR_OPAQUE_STRING_failactivatefunc = 0x315F,
  SCR_OPAQUE_STRING_failcase_blackout_early = 0x3160,
  SCR_OPAQUE_STRING_failed_spawnvehicles = 0x3162,
  SCR_OPAQUE_STRING_failonfriendlyfire = 0x3165,
  SCR_OPAQUE_STRING_fails = 0x3166,
  SCR_OPAQUE_STRING_failsafe_c_k_bags = 0x3167,
  SCR_OPAQUE_STRING_fake = 0x3168,
  SCR_OPAQUE_STRING_fake_ally_kill_me = 0x3169,
  SCR_OPAQUE_STRING_fake_dead = 0x316B,
  SCR_OPAQUE_STRING_fake_death_bullet = 0x316C,
  SCR_OPAQUE_STRING_fake_function = 0x316F,
  SCR_OPAQUE_STRING_fake_mantle_text = 0x3171,
  SCR_OPAQUE_STRING_fake_missile_launch = 0x3172,
  SCR_OPAQUE_STRING_fake_shellshock_sound = 0x3175,
  SCR_OPAQUE_STRING_fake_shooter_death = 0x3176,
  SCR_OPAQUE_STRING_fake_spot = 0x317A,
  SCR_OPAQUE_STRING_fake_tank_rumble = 0x317C,
  SCR_OPAQUE_STRING_fake_targets = 0x317D,
  SCR_OPAQUE_STRING_fake_teleport_notify = 0x317F,
  SCR_OPAQUE_STRING_fake_vehicle_moveto = 0x3181,
  SCR_OPAQUE_STRING_fakea10ai = 0x3185,
  SCR_OPAQUE_STRING_fakedrones = 0x3186,
  SCR_OPAQUE_STRING_fall_break_glass = 0x3190,
  SCR_OPAQUE_STRING_fall_enemies_rail_hit = 0x3194,
  SCR_OPAQUE_STRING_fall_enemies_start = 0x3196,
  SCR_OPAQUE_STRING_fall_enemy_anim = 0x3197,
  SCR_OPAQUE_STRING_fall_environment = 0x319A,
  SCR_OPAQUE_STRING_fall_fx_billboard_fx = 0x319B,
  SCR_OPAQUE_STRING_fall_fx_billboard_setup = 0x319C,
  SCR_OPAQUE_STRING_fall_fx_crowd_fx = 0x319E,
  SCR_OPAQUE_STRING_fall_fx_end_bldg = 0x31A0,
  SCR_OPAQUE_STRING_fall_object_init = 0x31A5,
  SCR_OPAQUE_STRING_fall_object_run = 0x31A6,
  SCR_OPAQUE_STRING_fall_physics_debris_furniture = 0x31AA,
  SCR_OPAQUE_STRING_fall_physics_debris_lobby = 0x31AB,
  SCR_OPAQUE_STRING_fall_physics_debris_slide = 0x31AC,
  SCR_OPAQUE_STRING_fall_prop_merrick_window = 0x31B0,
  SCR_OPAQUE_STRING_fall_prop_picture = 0x31B1,
  SCR_OPAQUE_STRING_fall_props_debris_b = 0x31B5,
  SCR_OPAQUE_STRING_fall_props_player_parachute = 0x31BB,
  SCR_OPAQUE_STRING_fall_to = 0x31BC,
  SCR_OPAQUE_STRING_fallback_ai = 0x31BF,
  SCR_OPAQUE_STRING_fallback_ai_think = 0x31C0,
  SCR_OPAQUE_STRING_fallback_coverprint = 0x31C2,
  SCR_OPAQUE_STRING_fallback_initiated = 0x31C5,
  SCR_OPAQUE_STRING_fallback_text = 0x31C8,
  SCR_OPAQUE_STRING_falling_debris = 0x31CB,
  SCR_OPAQUE_STRING_falling_rock_init = 0x31D0,
  SCR_OPAQUE_STRING_falling_rock_kill_trigger = 0x31D1,
  SCR_OPAQUE_STRING_falling_rock_run = 0x31D2,
  SCR_OPAQUE_STRING_falling_rocks = 0x31D3,
  SCR_OPAQUE_STRING_falling_sat_dish = 0x31D4,
  SCR_OPAQUE_STRING_falling_tree_player_detection = 0x31D5,
  SCR_OPAQUE_STRING_fallingtileeffect = 0x31D6,
  SCR_OPAQUE_STRING_falloff = 0x31D7,
  SCR_OPAQUE_STRING_fandb_dodamage = 0x31D9,
  SCR_OPAQUE_STRING_fandb_handles_collision_brushes = 0x31DD,
  SCR_OPAQUE_STRING_fandb_hideshowtag = 0x31DE,
  SCR_OPAQUE_STRING_fandb_playsound = 0x31DF,
  SCR_OPAQUE_STRING_farthest_distance_down = 0x31E5,
  SCR_OPAQUE_STRING_fast_convoy = 0x31E6,
  SCR_OPAQUE_STRING_fast_destructible_explode = 0x31E7,
  SCR_OPAQUE_STRING_fast_jog = 0x31E8,
  SCR_OPAQUE_STRING_fast_walk = 0x31E9,
  SCR_OPAQUE_STRING_fastburstfirenumshots = 0x31EB,
  SCR_OPAQUE_STRING_fastcrouch = 0x31EC,
  SCR_OPAQUE_STRING_fastropeoffset = 0x31F0,
  SCR_OPAQUE_STRING_faux_spawn_stance = 0x31F4,
  SCR_OPAQUE_STRING_fauxdead = 0x31F5,
  SCR_OPAQUE_STRING_faze_out_finish = 0x31FB,
  SCR_OPAQUE_STRING_fbt_firstburst = 0x31FD,
  SCR_OPAQUE_STRING_featherents = 0x3203,
  SCR_OPAQUE_STRING_fed_destroyer_fx_guns = 0x3205,
  SCR_OPAQUE_STRING_fed_destroyer_guys = 0x3207,
  SCR_OPAQUE_STRING_fed_destroyer_osprey = 0x3208,
  SCR_OPAQUE_STRING_fence_bottom_left = 0x320B,
  SCR_OPAQUE_STRING_fence_smash_setup = 0x320F,
  SCR_OPAQUE_STRING_fence_smash_wait = 0x3210,
  SCR_OPAQUE_STRING_ffpoints = 0x321A,
  SCR_OPAQUE_STRING_field_birds = 0x321C,
  SCR_OPAQUE_STRING_fifteen_minutes_earlier_feed_lines = 0x321D,
  SCR_OPAQUE_STRING_fight_objective = 0x3220,
  SCR_OPAQUE_STRING_fightdist = 0x3221,
  SCR_OPAQUE_STRING_fileprint_launcher_start_file = 0x3225,
  SCR_OPAQUE_STRING_fileprint_map_entity_end = 0x3226,
  SCR_OPAQUE_STRING_fileprint_map_entity_start = 0x3227,
  SCR_OPAQUE_STRING_fileprintlauncher_linecount = 0x322D,
  SCR_OPAQUE_STRING_filter = 0x3230,
  SCR_OPAQUE_STRING_filter_spawn_point_by_distance_from_player = 0x3232,
  SCR_OPAQUE_STRING_final_jungle_ai_cleanup = 0x3236,
  SCR_OPAQUE_STRING_final_main = 0x3237,
  SCR_OPAQUE_STRING_final_sequence_fail_condition = 0x3239,
  SCR_OPAQUE_STRING_finale_fx_handling = 0x3240,
  SCR_OPAQUE_STRING_finale_nags = 0x3241,
  SCR_OPAQUE_STRING_finale_sniping = 0x3242,
  SCR_OPAQUE_STRING_finale_timer = 0x3243,
  SCR_OPAQUE_STRING_finalhinds = 0x3246,
  SCR_OPAQUE_STRING_finalkillcam_inflictor = 0x324D,
  SCR_OPAQUE_STRING_finalkillcam_killcamentityindex = 0x324E,
  SCR_OPAQUE_STRING_finalkillcam_psoffsettime = 0x3250,
  SCR_OPAQUE_STRING_finalkillcam_sweapon = 0x3252,
  SCR_OPAQUE_STRING_finalkillcam_victim = 0x3255,
  SCR_OPAQUE_STRING_finalkillcam_winner = 0x3256,
  SCR_OPAQUE_STRING_finalkillcammusic = 0x3257,
  SCR_OPAQUE_STRING_find_available_collision_model = 0x325D,
  SCR_OPAQUE_STRING_find_camp_node_worker = 0x3260,
  SCR_OPAQUE_STRING_find_connected_turrets = 0x3264,
  SCR_OPAQUE_STRING_find_defend_node_capture = 0x3266,
  SCR_OPAQUE_STRING_find_defend_node_protect = 0x3269,
  SCR_OPAQUE_STRING_find_destructibles = 0x326A,
  SCR_OPAQUE_STRING_find_different_way_to_attack_last_seen_position = 0x326B,
  SCR_OPAQUE_STRING_find_lane_spawn_node = 0x326E,
  SCR_OPAQUE_STRING_find_new_chase_target = 0x3270,
  SCR_OPAQUE_STRING_find_random_spawn_node = 0x3272,
  SCR_OPAQUE_STRING_find_safe_spawn_spot_with_volumes = 0x3274,
  SCR_OPAQUE_STRING_find_spitter_attack_node = 0x3278,
  SCR_OPAQUE_STRING_findaveragepointvec = 0x327E,
  SCR_OPAQUE_STRING_findbattlebuddy = 0x327F,
  SCR_OPAQUE_STRING_findboxcenter = 0x3280,
  SCR_OPAQUE_STRING_findbuddypathnode = 0x3281,
  SCR_OPAQUE_STRING_findlocation = 0x3288,
  SCR_OPAQUE_STRING_findnewowner = 0x3289,
  SCR_OPAQUE_STRING_findpointnearowner = 0x328A,
  SCR_OPAQUE_STRING_findrandomtarget = 0x328B,
  SCR_OPAQUE_STRING_findspawnlocationnearplayer = 0x328D,
  SCR_OPAQUE_STRING_findtarget = 0x328E,
  SCR_OPAQUE_STRING_findunobstructedfiringpoint = 0x3290,
  SCR_OPAQUE_STRING_finish_zoom = 0x3294,
  SCR_OPAQUE_STRING_finishcoverexitnotetracks = 0x3297,
  SCR_OPAQUE_STRING_finished_spawning = 0x329A,
  SCR_OPAQUE_STRING_finishsupportescortusage = 0x32A1,
  SCR_OPAQUE_STRING_fire_anim_start = 0x32A4,
  SCR_OPAQUE_STRING_fire_artillery = 0x32A6,
  SCR_OPAQUE_STRING_fire_at_chopper = 0x32A8,
  SCR_OPAQUE_STRING_fire_cloud_burn_alien = 0x32B1,
  SCR_OPAQUE_STRING_fire_cloud_burn_player = 0x32B2,
  SCR_OPAQUE_STRING_fire_damage = 0x32B3,
  SCR_OPAQUE_STRING_fire_death_watcher = 0x32B4,
  SCR_OPAQUE_STRING_fire_ext_grab = 0x32B7,
  SCR_OPAQUE_STRING_fire_extinguisher = 0x32BA,
  SCR_OPAQUE_STRING_fire_extinguisher_death = 0x32BD,
  SCR_OPAQUE_STRING_fire_fx = 0x32C6,
  SCR_OPAQUE_STRING_fire_grenade = 0x32C8,
  SCR_OPAQUE_STRING_fire_guns = 0x32C9,
  SCR_OPAQUE_STRING_fire_heli_missile = 0x32CA,
  SCR_OPAQUE_STRING_fire_link_structs = 0x32CD,
  SCR_OPAQUE_STRING_fire_magic_missile = 0x32CF,
  SCR_OPAQUE_STRING_fire_magic_missile_mig = 0x32D0,
  SCR_OPAQUE_STRING_fire_missile_at_vehicle = 0x32D2,
  SCR_OPAQUE_STRING_fire_missiles = 0x32D3,
  SCR_OPAQUE_STRING_fire_on = 0x32D7,
  SCR_OPAQUE_STRING_fire_on_non_vehicle = 0x32D8,
  SCR_OPAQUE_STRING_fire_radius = 0x32DA,
  SCR_OPAQUE_STRING_fire_rocket = 0x32DD,
  SCR_OPAQUE_STRING_fire_sat_rcs_thrusters = 0x32E0,
  SCR_OPAQUE_STRING_fire_seeking_missile = 0x32E1,
  SCR_OPAQUE_STRING_fire_sensor = 0x32E2,
  SCR_OPAQUE_STRING_fire_sound_spindown = 0x32E3,
  SCR_OPAQUE_STRING_fire_space_microtar = 0x32E6,
  SCR_OPAQUE_STRING_fire_spit_projectile = 0x32E7,
  SCR_OPAQUE_STRING_fire_supression_status = 0x32E9,
  SCR_OPAQUE_STRING_fire_tracers = 0x32EB,
  SCR_OPAQUE_STRING_fire_tracking_missile_at_vehicle = 0x32ED,
  SCR_OPAQUE_STRING_fire_tracking_missile_mig = 0x32EE,
  SCR_OPAQUE_STRING_fire_trap_burn = 0x32EF,
  SCR_OPAQUE_STRING_fire_turret = 0x32F6,
  SCR_OPAQUE_STRING_firecloudheight = 0x32FA,
  SCR_OPAQUE_STRING_firecloudlingertime = 0x32FC,
  SCR_OPAQUE_STRING_firecloudsfx = 0x3300,
  SCR_OPAQUE_STRING_firecloudtickdamage = 0x3301,
  SCR_OPAQUE_STRING_fired_weapon = 0x3306,
  SCR_OPAQUE_STRING_firedirector = 0x3308,
  SCR_OPAQUE_STRING_firedonme = 0x3309,
  SCR_OPAQUE_STRING_fireinterval = 0x330B,
  SCR_OPAQUE_STRING_fireontarget = 0x3310,
  SCR_OPAQUE_STRING_fireonvehicletarget = 0x3311,
  SCR_OPAQUE_STRING_fires = 0x3312,
  SCR_OPAQUE_STRING_fireshield = 0x3313,
  SCR_OPAQUE_STRING_fireteam_hunt_next_zone_search_time = 0x331C,
  SCR_OPAQUE_STRING_fireteam_hunt_target_zone = 0x331D,
  SCR_OPAQUE_STRING_fireteam_menu = 0x331E,
  SCR_OPAQUE_STRING_fireteam_personality_original = 0x331F,
  SCR_OPAQUE_STRING_fireteam_tdm_set_hunt_leader = 0x3323,
  SCR_OPAQUE_STRING_fireteammembers = 0x3324,
  SCR_OPAQUE_STRING_firetime = 0x3325,
  SCR_OPAQUE_STRING_fireuntiloutofammointernal = 0x3328,
  SCR_OPAQUE_STRING_fireworklights = 0x332C,
  SCR_OPAQUE_STRING_fireworks = 0x332D,
  SCR_OPAQUE_STRING_fireworks_courtyard = 0x332E,
  SCR_OPAQUE_STRING_fireworks_courtyard_post = 0x332F,
  SCR_OPAQUE_STRING_fireworks_courtyard_stairs = 0x3330,
  SCR_OPAQUE_STRING_fireworks_finale = 0x3331,
  SCR_OPAQUE_STRING_fireworks_init = 0x3335,
  SCR_OPAQUE_STRING_fireworks_intro_post = 0x3337,
  SCR_OPAQUE_STRING_fireworks_junction = 0x3338,
  SCR_OPAQUE_STRING_fireworks_junction_post = 0x3339,
  SCR_OPAQUE_STRING_fireworks_start = 0x333B,
  SCR_OPAQUE_STRING_firing_into_bunks = 0x3341,
  SCR_OPAQUE_STRING_firing_position = 0x3342,
  SCR_OPAQUE_STRING_firing_sound_ent = 0x3343,
  SCR_OPAQUE_STRING_firingreaper = 0x3347,
  SCR_OPAQUE_STRING_first_distant_sat_launch = 0x3348,
  SCR_OPAQUE_STRING_first_explosion_fx = 0x3349,
  SCR_OPAQUE_STRING_first_floor_patroller_1_setup = 0x334C,
  SCR_OPAQUE_STRING_first_floor_patroller_2_setup = 0x334D,
  SCR_OPAQUE_STRING_first_floor_shift_right_trigger = 0x334E,
  SCR_OPAQUE_STRING_first_floor_sitting_laptop_guy_react = 0x334F,
  SCR_OPAQUE_STRING_first_floor_sitting_laptop_guy_react_laptop = 0x3350,
  SCR_OPAQUE_STRING_first_frame = 0x3352,
  SCR_OPAQUE_STRING_first_guy_leap_frog_logic = 0x3356,
  SCR_OPAQUE_STRING_first_time_depth_charge_minigun_hint = 0x335E,
  SCR_OPAQUE_STRING_first_zoom_level_fov = 0x3361,
  SCR_OPAQUE_STRING_firstblood = 0x3362,
  SCR_OPAQUE_STRING_firstcapture = 0x3364,
  SCR_OPAQUE_STRING_firstcontact = 0x3365,
  SCR_OPAQUE_STRING_firstcratedrop = 0x3366,
  SCR_OPAQUE_STRING_firstframe_combat_one_door = 0x3367,
  SCR_OPAQUE_STRING_firstinit = 0x336A,
  SCR_OPAQUE_STRING_firstload = 0x336C,
  SCR_OPAQUE_STRING_fish = 0x3370,
  SCR_OPAQUE_STRING_fizzle_flashbangs_think = 0x3377,
  SCR_OPAQUE_STRING_fizzle_tracked = 0x3378,
  SCR_OPAQUE_STRING_flag_count = 0x337E,
  SCR_OPAQUE_STRING_flag_exist = 0x3383,
  SCR_OPAQUE_STRING_flag_if_player_aims_knife_at_enemy = 0x3384,
  SCR_OPAQUE_STRING_flag_inits = 0x3386,
  SCR_OPAQUE_STRING_flag_on_death = 0x3387,
  SCR_OPAQUE_STRING_flag_set = 0x3388,
  SCR_OPAQUE_STRING_flag_set_delayed = 0x3389,
  SCR_OPAQUE_STRING_flag_set_near_ent = 0x338A,
  SCR_OPAQUE_STRING_flag_state = 0x338C,
  SCR_OPAQUE_STRING_flag_trigger_init = 0x3390,
  SCR_OPAQUE_STRING_flag_wait = 0x3394,
  SCR_OPAQUE_STRING_flag_wait_all = 0x3395,
  SCR_OPAQUE_STRING_flag_wait_any = 0x3396,
  SCR_OPAQUE_STRING_flag_wait_badplace_brush = 0x3399,
  SCR_OPAQUE_STRING_flag_wait_either_return = 0x339C,
  SCR_OPAQUE_STRING_flag_wait_or_timeout = 0x339F,
  SCR_OPAQUE_STRING_flag_waitopen_any = 0x33A1,
  SCR_OPAQUE_STRING_flag_watcher = 0x33A3,
  SCR_OPAQUE_STRING_flagbasefxid = 0x33A4,
  SCR_OPAQUE_STRING_flagtowait = 0x33A9,
  SCR_OPAQUE_STRING_flagwaitthread = 0x33AA,
  SCR_OPAQUE_STRING_flagwaitthread_proc = 0x33AB,
  SCR_OPAQUE_STRING_flamestack_godrays = 0x33AD,
  SCR_OPAQUE_STRING_flare_doburnout = 0x33AF,
  SCR_OPAQUE_STRING_flare_fx = 0x33B2,
  SCR_OPAQUE_STRING_flare_knife = 0x33B5,
  SCR_OPAQUE_STRING_flare_trackvelocity = 0x33B9,
  SCR_OPAQUE_STRING_flareactiveradius = 0x33BB,
  SCR_OPAQUE_STRING_flareauto = 0x33BD,
  SCR_OPAQUE_STRING_flarefx = 0x33C1,
  SCR_OPAQUE_STRING_flarefxexplode = 0x33C2,
  SCR_OPAQUE_STRING_flareindex = 0x33C3,
  SCR_OPAQUE_STRING_flareprotection = 0x33C5,
  SCR_OPAQUE_STRING_flarerig_animrate = 0x33C7,
  SCR_OPAQUE_STRING_flarerig_tagangles = 0x33CA,
  SCR_OPAQUE_STRING_flares = 0x33CC,
  SCR_OPAQUE_STRING_flares_fire = 0x33D2,
  SCR_OPAQUE_STRING_flares_playfx = 0x33DB,
  SCR_OPAQUE_STRING_flares_redirect_missiles = 0x33DC,
  SCR_OPAQUE_STRING_flares_watchsamproximity = 0x33DE,
  SCR_OPAQUE_STRING_flaresound = 0x33E1,
  SCR_OPAQUE_STRING_flarestack_door = 0x33EA,
  SCR_OPAQUE_STRING_flarestack_pressurelp_01 = 0x33EC,
  SCR_OPAQUE_STRING_flarestack_pressurelp_02 = 0x33ED,
  SCR_OPAQUE_STRING_flash_credit_gain = 0x33F4,
  SCR_OPAQUE_STRING_flash_fxs = 0x33F5,
  SCR_OPAQUE_STRING_flashanimindex = 0x33F7,
  SCR_OPAQUE_STRING_flashbangedloop = 0x33FA,
  SCR_OPAQUE_STRING_flashbangimmunity = 0x33FC,
  SCR_OPAQUE_STRING_flashbangisactive = 0x33FD,
  SCR_OPAQUE_STRING_flashbangstart = 0x33FF,
  SCR_OPAQUE_STRING_flashbangstop = 0x3400,
  SCR_OPAQUE_STRING_flashendtime = 0x3403,
  SCR_OPAQUE_STRING_flashlight_off = 0x3408,
  SCR_OPAQUE_STRING_flashlight_prop = 0x340A,
  SCR_OPAQUE_STRING_flashlight_toggle = 0x340C,
  SCR_OPAQUE_STRING_flashmonitor = 0x340D,
  SCR_OPAQUE_STRING_flashmonitorenablehealthshield = 0x340E,
  SCR_OPAQUE_STRING_flashrumbleloop = 0x3412,
  SCR_OPAQUE_STRING_flat_trigger = 0x3418,
  SCR_OPAQUE_STRING_flinching = 0x3428,
  SCR_OPAQUE_STRING_fling_debug = 0x342B,
  SCR_OPAQUE_STRING_flock_handledamage = 0x3434,
  SCR_OPAQUE_STRING_flood_amb_fx = 0x3436,
  SCR_OPAQUE_STRING_flood_and_secure_spawn = 0x3438,
  SCR_OPAQUE_STRING_flood_and_secure_spawn_goal = 0x3439,
  SCR_OPAQUE_STRING_flood_and_secure_spawner = 0x343A,
  SCR_OPAQUE_STRING_flood_and_secure_spawner_think = 0x343B,
  SCR_OPAQUE_STRING_flood_battlechatter_on = 0x343C,
  SCR_OPAQUE_STRING_flood_convoy_attackheli01_sfx = 0x343E,
  SCR_OPAQUE_STRING_flood_convoy_chopper2_sfx = 0x3441,
  SCR_OPAQUE_STRING_flood_convoy_exp_sfx = 0x3443,
  SCR_OPAQUE_STRING_flood_convoy_sfx = 0x3444,
  SCR_OPAQUE_STRING_flood_createfx_cleanup = 0x3445,
  SCR_OPAQUE_STRING_flood_current_goalnode = 0x3446,
  SCR_OPAQUE_STRING_flood_default_water_transion_fx = 0x3447,
  SCR_OPAQUE_STRING_flood_ending_fadeout = 0x3449,
  SCR_OPAQUE_STRING_flood_interactives_cleanup = 0x344D,
  SCR_OPAQUE_STRING_flood_intro_screen = 0x344E,
  SCR_OPAQUE_STRING_flood_launcher_crash_sfx = 0x3450,
  SCR_OPAQUE_STRING_flood_locations = 0x3451,
  SCR_OPAQUE_STRING_flood_mall_roof_door = 0x3452,
  SCR_OPAQUE_STRING_flood_mall_roof_door_model = 0x3453,
  SCR_OPAQUE_STRING_flood_og_movetransitionrate = 0x3459,
  SCR_OPAQUE_STRING_flood_player_default_jump_height = 0x345B,
  SCR_OPAQUE_STRING_flood_shake_tree = 0x345C,
  SCR_OPAQUE_STRING_flood_shake_tree_internal = 0x345D,
  SCR_OPAQUE_STRING_flood_spawn = 0x345F,
  SCR_OPAQUE_STRING_flood_spawner_scripted = 0x3462,
  SCR_OPAQUE_STRING_flood_spawner_stop = 0x3463,
  SCR_OPAQUE_STRING_flood_spawner_think = 0x3464,
  SCR_OPAQUE_STRING_flood_sweptaway = 0x3465,
  SCR_OPAQUE_STRING_flooding_ext_start = 0x346A,
  SCR_OPAQUE_STRING_flooding_int_start = 0x346C,
  SCR_OPAQUE_STRING_flooding_last_water_state = 0x346D,
  SCR_OPAQUE_STRING_flooding_stairs_vo = 0x346E,
  SCR_OPAQUE_STRING_flush_church_proc = 0x3470,
  SCR_OPAQUE_STRING_flush_sat_camp_1 = 0x3471,
  SCR_OPAQUE_STRING_fly_around_start = 0x3473,
  SCR_OPAQUE_STRING_fly_distance = 0x3476,
  SCR_OPAQUE_STRING_flyout_lights = 0x347B,
  SCR_OPAQUE_STRING_fndogmeleevictim = 0x347C,
  SCR_OPAQUE_STRING_fnoverlord = 0x347E,
  SCR_OPAQUE_STRING_folded_sentry_use_wait = 0x3487,
  SCR_OPAQUE_STRING_foley = 0x3488,
  SCR_OPAQUE_STRING_follow_icon_manager = 0x348B,
  SCR_OPAQUE_STRING_follow_on_went_hot = 0x348C,
  SCR_OPAQUE_STRING_follow_on_went_hot_logic = 0x348D,
  SCR_OPAQUE_STRING_follow_origin = 0x348E,
  SCR_OPAQUE_STRING_follow_path = 0x348F,
  SCR_OPAQUE_STRING_follow_path_animate_set_ent = 0x3491,
  SCR_OPAQUE_STRING_follow_path_animate_set_node = 0x3492,
  SCR_OPAQUE_STRING_follow_path_animate_set_struct = 0x3493,
  SCR_OPAQUE_STRING_font_color = 0x349A,
  SCR_OPAQUE_STRING_font_size = 0x349B,
  SCR_OPAQUE_STRING_fontpulse = 0x349D,
  SCR_OPAQUE_STRING_fontscaler = 0x349F,
  SCR_OPAQUE_STRING_foo = 0x34A0,
  SCR_OPAQUE_STRING_force_actor_space_rotation_update = 0x34A3,
  SCR_OPAQUE_STRING_force_all_complete = 0x34A5,
  SCR_OPAQUE_STRING_force_civilian_hunched_run = 0x34A7,
  SCR_OPAQUE_STRING_force_crawling_death_proc = 0x34AB,
  SCR_OPAQUE_STRING_force_crouch = 0x34AC,
  SCR_OPAQUE_STRING_force_deathquote = 0x34AD,
  SCR_OPAQUE_STRING_force_hint = 0x34B2,
  SCR_OPAQUE_STRING_force_mantle_trigs = 0x34B6,
  SCR_OPAQUE_STRING_force_next_earthquake = 0x34B7,
  SCR_OPAQUE_STRING_force_num_crawls = 0x34B8,
  SCR_OPAQUE_STRING_force_player_to_end_upload = 0x34BB,
  SCR_OPAQUE_STRING_force_stop_sound = 0x34BF,
  SCR_OPAQUE_STRING_forced_hint = 0x34C7,
  SCR_OPAQUE_STRING_forced_slowmo_breach_lerpout = 0x34C8,
  SCR_OPAQUE_STRING_forced_start_catchup = 0x34CA,
  SCR_OPAQUE_STRING_forced_startingposition = 0x34CB,
  SCR_OPAQUE_STRING_forcedend = 0x34CC,
  SCR_OPAQUE_STRING_forcedgameskill = 0x34CD,
  SCR_OPAQUE_STRING_forcedtarget = 0x34D0,
  SCR_OPAQUE_STRING_forcegoal = 0x34D6,
  SCR_OPAQUE_STRING_forcegoal_radius = 0x34D7,
  SCR_OPAQUE_STRING_forcespawnangles = 0x34DE,
  SCR_OPAQUE_STRING_forcetrigger = 0x34E2,
  SCR_OPAQUE_STRING_foreman = 0x34E5,
  SCR_OPAQUE_STRING_forfeitinprogress = 0x34E7,
  SCR_OPAQUE_STRING_forfeitwaitforabort = 0x34E8,
  SCR_OPAQUE_STRING_forget_time = 0x34E9,
  SCR_OPAQUE_STRING_format1 = 0x34EA,
  SCR_OPAQUE_STRING_format2 = 0x34EB,
  SCR_OPAQUE_STRING_forty_five_sec_vo = 0x34ED,
  SCR_OPAQUE_STRING_forward_direction_worldspace = 0x34EE,
  SCR_OPAQUE_STRING_forward_for_vision_change = 0x34EF,
  SCR_OPAQUE_STRING_forwardgraphid = 0x34F0,
  SCR_OPAQUE_STRING_forwardpush = 0x34F1,
  SCR_OPAQUE_STRING_forwardyaw = 0x34F3,
  SCR_OPAQUE_STRING_fov_get_default = 0x34FB,
  SCR_OPAQUE_STRING_fov_orig = 0x34FD,
  SCR_OPAQUE_STRING_fov_outer = 0x34FE,
  SCR_OPAQUE_STRING_fov_range = 0x34FF,
  SCR_OPAQUE_STRING_frac = 0x3501,
  SCR_OPAQUE_STRING_frames_visible = 0x3504,
  SCR_OPAQUE_STRING_free_node = 0x3505,
  SCR_OPAQUE_STRING_free_on_death = 0x3506,
  SCR_OPAQUE_STRING_freeplayer = 0x350A,
  SCR_OPAQUE_STRING_freezeallplayers = 0x350D,
  SCR_OPAQUE_STRING_freon_leak_fx_turn_off_damage = 0x3510,
  SCR_OPAQUE_STRING_fridge_anims = 0x3512,
  SCR_OPAQUE_STRING_friendlies_breach = 0x3516,
  SCR_OPAQUE_STRING_friendlies_execute_enemies = 0x3517,
  SCR_OPAQUE_STRING_friendlies_shoot_while_breaching = 0x3518,
  SCR_OPAQUE_STRING_friendly_breach_thread = 0x351F,
  SCR_OPAQUE_STRING_friendly_bubbles = 0x3520,
  SCR_OPAQUE_STRING_friendly_color_hidden = 0x3525,
  SCR_OPAQUE_STRING_friendly_color_spotted = 0x3526,
  SCR_OPAQUE_STRING_friendly_custom_acc_behavior = 0x352A,
  SCR_OPAQUE_STRING_friendly_default_acc_behavior = 0x352D,
  SCR_OPAQUE_STRING_friendly_default_color_behavior = 0x352E,
  SCR_OPAQUE_STRING_friendly_fire_enable = 0x3533,
  SCR_OPAQUE_STRING_friendly_fire_fail_check = 0x3534,
  SCR_OPAQUE_STRING_friendly_getangles_ai = 0x3536,
  SCR_OPAQUE_STRING_friendly_getangles_player = 0x3537,
  SCR_OPAQUE_STRING_friendly_getvelocity = 0x353A,
  SCR_OPAQUE_STRING_friendly_hud_icon_blink_on_damage = 0x353C,
  SCR_OPAQUE_STRING_friendly_init = 0x3540,
  SCR_OPAQUE_STRING_friendly_mg42_doneusingturret = 0x3545,
  SCR_OPAQUE_STRING_friendly_mg42_endtrigger = 0x3546,
  SCR_OPAQUE_STRING_friendly_mgturret = 0x354B,
  SCR_OPAQUE_STRING_friendly_navigation = 0x354C,
  SCR_OPAQUE_STRING_friendly_nearby = 0x354D,
  SCR_OPAQUE_STRING_friendly_promotion_thread = 0x354E,
  SCR_OPAQUE_STRING_friendly_respawn_vision_checker_thread = 0x3550,
  SCR_OPAQUE_STRING_friendly_setup = 0x3553,
  SCR_OPAQUE_STRING_friendly_setup_apache_section = 0x3554,
  SCR_OPAQUE_STRING_friendly_spawner = 0x3556,
  SCR_OPAQUE_STRING_friendly_spotted_getup_from_prone = 0x3558,
  SCR_OPAQUE_STRING_friendly_stance_handler = 0x3559,
  SCR_OPAQUE_STRING_friendly_stance_handler_check_mightbeseen = 0x355C,
  SCR_OPAQUE_STRING_friendly_stance_handler_return_ai_sight = 0x355E,
  SCR_OPAQUE_STRING_friendly_visibility_logic = 0x3568,
  SCR_OPAQUE_STRING_friendly_wave_masterthread = 0x356B,
  SCR_OPAQUE_STRING_friendly_wave_trigger = 0x356C,
  SCR_OPAQUE_STRING_friendlychains = 0x3570,
  SCR_OPAQUE_STRING_friendlyfire_damage_modifier = 0x3574,
  SCR_OPAQUE_STRING_friendlyfire_destructible_attacker = 0x3575,
  SCR_OPAQUE_STRING_friendlyfire_max_participation = 0x3577,
  SCR_OPAQUE_STRING_friendlyfire_shield = 0x3578,
  SCR_OPAQUE_STRING_friendlyfire_warning = 0x3579,
  SCR_OPAQUE_STRING_friendlyfire_warnings_disable = 0x357B,
  SCR_OPAQUE_STRING_friendlyfire_warnings_off = 0x357C,
  SCR_OPAQUE_STRING_friendlyfire_whizby_distances_valid = 0x357E,
  SCR_OPAQUE_STRING_friendlyfiredisabledfordestructible = 0x3581,
  SCR_OPAQUE_STRING_friendlyhudicon_normal = 0x3587,
  SCR_OPAQUE_STRING_friendlyhudicon_rotating = 0x3588,
  SCR_OPAQUE_STRING_friendlyhudicon_showall = 0x3589,
  SCR_OPAQUE_STRING_friendlyhudicon_update = 0x358A,
  SCR_OPAQUE_STRING_friendlyicon = 0x358B,
  SCR_OPAQUE_STRING_friendlymodel = 0x358C,
  SCR_OPAQUE_STRING_friendlyspawnorg = 0x358D,
  SCR_OPAQUE_STRING_friendlyspawnwave = 0x358F,
  SCR_OPAQUE_STRING_friendlyspawnwave_triggerthink = 0x3590,
  SCR_OPAQUE_STRING_friendlytrigger = 0x3591,
  SCR_OPAQUE_STRING_friendlywave_thread = 0x3592,
  SCR_OPAQUE_STRING_friendlywaypoint = 0x3593,
  SCR_OPAQUE_STRING_front_wheel_sfx = 0x359D,
  SCR_OPAQUE_STRING_fudge_ally_accuracy = 0x35A0,
  SCR_OPAQUE_STRING_fullmodel = 0x35A3,
  SCR_OPAQUE_STRING_func = 0x35A5,
  SCR_OPAQUE_STRING_func_get_level_fx = 0x35AA,
  SCR_OPAQUE_STRING_func_get_nodes_on_path = 0x35AB,
  SCR_OPAQUE_STRING_func_give = 0x35AD,
  SCR_OPAQUE_STRING_func_position_player = 0x35B2,
  SCR_OPAQUE_STRING_func_position_player_get = 0x35B3,
  SCR_OPAQUE_STRING_func_waittill_msg = 0x35B6,
  SCR_OPAQUE_STRING_function_stack = 0x35B7,
  SCR_OPAQUE_STRING_function_stack_caller_waits_for_turn = 0x35B8,
  SCR_OPAQUE_STRING_function_stack_clear = 0x35B9,
  SCR_OPAQUE_STRING_function_stack_wait = 0x35BE,
  SCR_OPAQUE_STRING_function_stack_wait_finish = 0x35BF,
  SCR_OPAQUE_STRING_funnel_player_internal = 0x35C2,
  SCR_OPAQUE_STRING_furniturepushsound = 0x35C3,
  SCR_OPAQUE_STRING_fx_airlock_ambient = 0x35C7,
  SCR_OPAQUE_STRING_fx_airstrike_afterburner = 0x35C8,
  SCR_OPAQUE_STRING_fx_airstrike_contrail = 0x35C9,
  SCR_OPAQUE_STRING_fx_airstrike_wingtip_light_red = 0x35CB,
  SCR_OPAQUE_STRING_fx_ambient_setup = 0x35CE,
  SCR_OPAQUE_STRING_fx_angry_flood_nearmiss = 0x35CF,
  SCR_OPAQUE_STRING_fx_array = 0x35D0,
  SCR_OPAQUE_STRING_fx_aurora_anim = 0x35D1,
  SCR_OPAQUE_STRING_fx_blood_splatter = 0x35D2,
  SCR_OPAQUE_STRING_fx_bokehdots_and_waterdrops_heavy = 0x35D3,
  SCR_OPAQUE_STRING_fx_bokehdots_far = 0x35D5,
  SCR_OPAQUE_STRING_fx_bridgefall_med_splash = 0x35D8,
  SCR_OPAQUE_STRING_fx_bridgefall_small_splash = 0x35D9,
  SCR_OPAQUE_STRING_fx_burnup_kyra = 0x35DB,
  SCR_OPAQUE_STRING_fx_burnup_player = 0x35DC,
  SCR_OPAQUE_STRING_fx_burnup_sat = 0x35DD,
  SCR_OPAQUE_STRING_fx_c2_rog_satelittes_close_01 = 0x35DE,
  SCR_OPAQUE_STRING_fx_camp_truck_submerge_body = 0x35E1,
  SCR_OPAQUE_STRING_fx_charge2_pos = 0x35E5,
  SCR_OPAQUE_STRING_fx_command_snow = 0x35E9,
  SCR_OPAQUE_STRING_fx_command_window_light_on = 0x35EB,
  SCR_OPAQUE_STRING_fx_crater_plume = 0x35EF,
  SCR_OPAQUE_STRING_fx_create_bokehdots_source = 0x35F0,
  SCR_OPAQUE_STRING_fx_dam_explosion = 0x35F3,
  SCR_OPAQUE_STRING_fx_dam_missile_dust = 0x35F5,
  SCR_OPAQUE_STRING_fx_dam_missile_launch_01 = 0x35F6,
  SCR_OPAQUE_STRING_fx_debri_combat_one = 0x35FC,
  SCR_OPAQUE_STRING_fx_door_open = 0x35FD,
  SCR_OPAQUE_STRING_fx_ents_playfx = 0x3605,
  SCR_OPAQUE_STRING_fx_escape_ambient = 0x3606,
  SCR_OPAQUE_STRING_fx_escape_play_rog_impact = 0x3608,
  SCR_OPAQUE_STRING_fx_flarestack_motion = 0x360B,
  SCR_OPAQUE_STRING_fx_glass_front = 0x3610,
  SCR_OPAQUE_STRING_fx_glass_mid_1 = 0x3612,
  SCR_OPAQUE_STRING_fx_init = 0x3620,
  SCR_OPAQUE_STRING_fx_intro_amb = 0x3621,
  SCR_OPAQUE_STRING_fx_intro_ambient = 0x3622,
  SCR_OPAQUE_STRING_fx_intro_friendly_glowsticks = 0x3623,
  SCR_OPAQUE_STRING_fx_jump_ambient = 0x3624,
  SCR_OPAQUE_STRING_fx_lens_drops_01 = 0x3627,
  SCR_OPAQUE_STRING_fx_lens_drops_04 = 0x362A,
  SCR_OPAQUE_STRING_fx_like_dust_in_the_wind_02 = 0x362D,
  SCR_OPAQUE_STRING_fx_like_dust_in_the_wind_03 = 0x362E,
  SCR_OPAQUE_STRING_fx_mall_roof_water_hide = 0x3632,
  SCR_OPAQUE_STRING_fx_mall_roof_water_show = 0x3633,
  SCR_OPAQUE_STRING_fx_mall_rooftop_debris = 0x3634,
  SCR_OPAQUE_STRING_fx_mall_rooftop_hide_shadow_geo = 0x3635,
  SCR_OPAQUE_STRING_fx_missile_launch = 0x3636,
  SCR_OPAQUE_STRING_fx_opfor3_pushdown_bubbles = 0x3639,
  SCR_OPAQUE_STRING_fx_org = 0x363B,
  SCR_OPAQUE_STRING_fx_org_belly2 = 0x363D,
  SCR_OPAQUE_STRING_fx_org_body = 0x363E,
  SCR_OPAQUE_STRING_fx_origin_with_train_angles = 0x3645,
  SCR_OPAQUE_STRING_fx_parking_garage_ambient = 0x3646,
  SCR_OPAQUE_STRING_fx_retarget_warehouse_waters_lighting = 0x3650,
  SCR_OPAQUE_STRING_fx_rog_amb_exp = 0x3651,
  SCR_OPAQUE_STRING_fx_rog_satelittes_close_02 = 0x3653,
  SCR_OPAQUE_STRING_fx_rog_satelittes_close_03 = 0x3654,
  SCR_OPAQUE_STRING_fx_rog_satelittes_fire_fx_close = 0x3655,
  SCR_OPAQUE_STRING_fx_rog_satelittes_firing_c2 = 0x3657,
  SCR_OPAQUE_STRING_fx_rooftop2_ambient = 0x3659,
  SCR_OPAQUE_STRING_fx_rotate_lights = 0x365E,
  SCR_OPAQUE_STRING_fx_rotating = 0x3660,
  SCR_OPAQUE_STRING_fx_sat_doors_close = 0x3662,
  SCR_OPAQUE_STRING_fx_sat_doors_open = 0x3663,
  SCR_OPAQUE_STRING_fx_sat_rcs_damage = 0x3665,
  SCR_OPAQUE_STRING_fx_sat_rcs_damage_kill = 0x3666,
  SCR_OPAQUE_STRING_fx_sat_thrusters_damage = 0x3667,
  SCR_OPAQUE_STRING_fx_screen_bokehdots_rain = 0x3669,
  SCR_OPAQUE_STRING_fx_screen_raindrops_fast_kill = 0x366D,
  SCR_OPAQUE_STRING_fx_screen_water_sheeting = 0x366E,
  SCR_OPAQUE_STRING_fx_sea_spray = 0x366F,
  SCR_OPAQUE_STRING_fx_skybridge_event = 0x3675,
  SCR_OPAQUE_STRING_fx_skybridge_room_bokeh_01 = 0x3676,
  SCR_OPAQUE_STRING_fx_skybridge_room_bokeh_02 = 0x3677,
  SCR_OPAQUE_STRING_fx_snakecam_lens_shmutz = 0x3678,
  SCR_OPAQUE_STRING_fx_snowmobile_light = 0x367B,
  SCR_OPAQUE_STRING_fx_solar_panel_collision_player = 0x367D,
  SCR_OPAQUE_STRING_fx_space_glass = 0x367F,
  SCR_OPAQUE_STRING_fx_spin_play_rog_impact = 0x3682,
  SCR_OPAQUE_STRING_fx_spin_player_debris = 0x3683,
  SCR_OPAQUE_STRING_fx_stealth_ambient = 0x3686,
  SCR_OPAQUE_STRING_fx_stealthkill_02_blood_02 = 0x3688,
  SCR_OPAQUE_STRING_fx_stealthkill_02_opfor2_blood_01 = 0x3689,
  SCR_OPAQUE_STRING_fx_swept_amb_fx = 0x368C,
  SCR_OPAQUE_STRING_fx_swept_water_hide = 0x368E,
  SCR_OPAQUE_STRING_fx_tag = 0x3691,
  SCR_OPAQUE_STRING_fx_tag_prop_wash = 0x3694,
  SCR_OPAQUE_STRING_fx_tag_prop_wash1 = 0x3695,
  SCR_OPAQUE_STRING_fx_tank_window_break = 0x3697,
  SCR_OPAQUE_STRING_fx_turn_on_bokehdots_16_player = 0x369A,
  SCR_OPAQUE_STRING_fx_turn_on_bokehdots_32_player = 0x369C,
  SCR_OPAQUE_STRING_fx_turn_on_introfx = 0x369E,
  SCR_OPAQUE_STRING_fx_turn_on_tunnel_lights = 0x369F,
  SCR_OPAQUE_STRING_fx_turnon_loco_exterior_lights = 0x36A0,
  SCR_OPAQUE_STRING_fx_turnon_rooftop_lights = 0x36A2,
  SCR_OPAQUE_STRING_fx_warehouse_door_burst = 0x36B0,
  SCR_OPAQUE_STRING_fx_warehouse_double_doors = 0x36B2,
  SCR_OPAQUE_STRING_fx_warehouse_floating_debris = 0x36B3,
  SCR_OPAQUE_STRING_fx_warehouse_splashes = 0x36B5,
  SCR_OPAQUE_STRING_fx_warehouse_underwater_fx_on = 0x36B8,
  SCR_OPAQUE_STRING_fx_waterwipe_above = 0x36BD,
  SCR_OPAQUE_STRING_fx_waterwipe_under = 0x36BE,
  SCR_OPAQUE_STRING_fx_wh_splashes = 0x36BF,
  SCR_OPAQUE_STRING_fxcost = 0x36C0,
  SCR_OPAQUE_STRING_fxfireloopmod = 0x36C4,
  SCR_OPAQUE_STRING_fxhudelements = 0x36C5,
  SCR_OPAQUE_STRING_fxid_explode = 0x36C8,
  SCR_OPAQUE_STRING_fxid_light2 = 0x36CB,
  SCR_OPAQUE_STRING_fxstop = 0x36D3,
  SCR_OPAQUE_STRING_fxtags = 0x36D5,
  SCR_OPAQUE_STRING_fxtime = 0x36D6,
  SCR_OPAQUE_STRING_g_bob_scale_get_func = 0x36D8,
  SCR_OPAQUE_STRING_g_bob_scale_set_func = 0x36D9,
  SCR_OPAQUE_STRING_g_friendlynamedist_old = 0x36DB,
  SCR_OPAQUE_STRING_g_speed = 0x36DC,
  SCR_OPAQUE_STRING_g_speed_get_func = 0x36DD,
  SCR_OPAQUE_STRING_g_speed_set_func = 0x36DE,
  SCR_OPAQUE_STRING_gain = 0x36DF,
  SCR_OPAQUE_STRING_gain_credit_message = 0x36E0,
  SCR_OPAQUE_STRING_gamblerability = 0x36E1,
  SCR_OPAQUE_STRING_gambleranimwatcher = 0x36E2,
  SCR_OPAQUE_STRING_game_is_current_gen = 0x36E3,
  SCR_OPAQUE_STRING_game_is_ng = 0x36E4,
  SCR_OPAQUE_STRING_gameended = 0x36EE,
  SCR_OPAQUE_STRING_gameendlistener = 0x36EF,
  SCR_OPAQUE_STRING_gameflagwait = 0x36F5,
  SCR_OPAQUE_STRING_gamemodemaydropweapon = 0x36FA,
  SCR_OPAQUE_STRING_gamemodemodifyplayerdamage = 0x36FB,
  SCR_OPAQUE_STRING_gameskill = 0x36FE,
  SCR_OPAQUE_STRING_gameskill_is_difficult = 0x3700,
  SCR_OPAQUE_STRING_gapfixlevel = 0x3709,
  SCR_OPAQUE_STRING_garage = 0x370A,
  SCR_OPAQUE_STRING_garage_ally_move476_jumpers = 0x370D,
  SCR_OPAQUE_STRING_garage_ally_move480 = 0x3711,
  SCR_OPAQUE_STRING_garage_door_logic = 0x3713,
  SCR_OPAQUE_STRING_garage_door_nag = 0x3714,
  SCR_OPAQUE_STRING_garage_jeep_start_skid = 0x3715,
  SCR_OPAQUE_STRING_garage_jump_01 = 0x3716,
  SCR_OPAQUE_STRING_garage_jump_02_spawn = 0x3719,
  SCR_OPAQUE_STRING_garage_malllight_off = 0x371A,
  SCR_OPAQUE_STRING_garage_misc = 0x371B,
  SCR_OPAQUE_STRING_garage_opening_collapse = 0x371C,
  SCR_OPAQUE_STRING_garage_start = 0x371F,
  SCR_OPAQUE_STRING_garage_velocity_loops = 0x3722,
  SCR_OPAQUE_STRING_garage_wave3_trig = 0x3725,
  SCR_OPAQUE_STRING_garage_wave4_trig = 0x3726,
  SCR_OPAQUE_STRING_garage_wave_get_furthest = 0x3727,
  SCR_OPAQUE_STRING_garden_enemies_cyan_needed = 0x3729,
  SCR_OPAQUE_STRING_garden_enemies_delete = 0x372A,
  SCR_OPAQUE_STRING_garden_entity_cleanup = 0x372F,
  SCR_OPAQUE_STRING_garden_gameplay = 0x3731,
  SCR_OPAQUE_STRING_garden_glass_room_guy_spawnfunc = 0x3732,
  SCR_OPAQUE_STRING_garden_idf_guys_orange = 0x3733,
  SCR_OPAQUE_STRING_garden_last_stand = 0x3737,
  SCR_OPAQUE_STRING_garden_move_allies_to_end = 0x3738,
  SCR_OPAQUE_STRING_garden_transient_sync = 0x3739,
  SCR_OPAQUE_STRING_garden_vo = 0x373A,
  SCR_OPAQUE_STRING_garden_wave1 = 0x373B,
  SCR_OPAQUE_STRING_gas_cloud_available = 0x373F,
  SCR_OPAQUE_STRING_gas_flee_guys = 0x3742,
  SCR_OPAQUE_STRING_gas_mask_off_player_anim = 0x3743,
  SCR_OPAQUE_STRING_gas_station = 0x3746,
  SCR_OPAQUE_STRING_gas_station_connect_node = 0x3748,
  SCR_OPAQUE_STRING_gas_station_disconnect_node = 0x3749,
  SCR_OPAQUE_STRING_gas_station_earthquake = 0x374A,
  SCR_OPAQUE_STRING_gas_station_events = 0x374B,
  SCR_OPAQUE_STRING_gas_station_play_fx = 0x374E,
  SCR_OPAQUE_STRING_gas_station_precache = 0x3750,
  SCR_OPAQUE_STRING_gas_station_run_func_on_notify = 0x3752,
  SCR_OPAQUE_STRING_gas_station_update_clip = 0x3753,
  SCR_OPAQUE_STRING_gasmask = 0x3755,
  SCR_OPAQUE_STRING_gasmask_breathing = 0x3756,
  SCR_OPAQUE_STRING_gasmask_hud_elem = 0x3757,
  SCR_OPAQUE_STRING_gasstation_ambient_aa72 = 0x375C,
  SCR_OPAQUE_STRING_gasstation_civs_logic = 0x375F,
  SCR_OPAQUE_STRING_gasstation_did_player_rush = 0x3760,
  SCR_OPAQUE_STRING_gasstation_execution_timing = 0x3763,
  SCR_OPAQUE_STRING_gasstation_takedown_knife_notetrack_func = 0x3766,
  SCR_OPAQUE_STRING_gate_being_used = 0x3768,
  SCR_OPAQUE_STRING_gateopen = 0x3769,
  SCR_OPAQUE_STRING_gates = 0x376A,
  SCR_OPAQUE_STRING_gather_delay_proc = 0x376C,
  SCR_OPAQUE_STRING_gaz_additive_anims_release = 0x376F,
  SCR_OPAQUE_STRING_gaz_crush = 0x3770,
  SCR_OPAQUE_STRING_gaz_relative_speed_stop = 0x3777,
  SCR_OPAQUE_STRING_gaz_spawn_setup = 0x3778,
  SCR_OPAQUE_STRING_gaz_turret_guy_gettin_func = 0x3779,
  SCR_OPAQUE_STRING_gazvehicles = 0x377A,
  SCR_OPAQUE_STRING_generatemaxweightedcratevalue = 0x377E,
  SCR_OPAQUE_STRING_generatesquadname = 0x3780,
  SCR_OPAQUE_STRING_generatortype = 0x3784,
  SCR_OPAQUE_STRING_generic_double_strobe = 0x3788,
  SCR_OPAQUE_STRING_generic_flicker = 0x3789,
  SCR_OPAQUE_STRING_generic_gaz_spawner_setup = 0x378E,
  SCR_OPAQUE_STRING_generic_human_beach = 0x3792,
  SCR_OPAQUE_STRING_generic_human_intro = 0x3793,
  SCR_OPAQUE_STRING_generic_human_recruits = 0x3794,
  SCR_OPAQUE_STRING_generic_index = 0x3797,
  SCR_OPAQUE_STRING_generic_shootable_double_doors = 0x379C,
  SCR_OPAQUE_STRING_generic_spawn_node_based_enemy_gaz = 0x379D,
  SCR_OPAQUE_STRING_generic_swing_ents = 0x37A5,
  SCR_OPAQUE_STRING_geo_off = 0x37AA,
  SCR_OPAQUE_STRING_geo_on = 0x37AB,
  SCR_OPAQUE_STRING_get_a10_player_start = 0x37AC,
  SCR_OPAQUE_STRING_get_activation_result = 0x37AD,
  SCR_OPAQUE_STRING_get_active_turret = 0x37AE,
  SCR_OPAQUE_STRING_get_adjusted_armor = 0x37AF,
  SCR_OPAQUE_STRING_get_ai_array = 0x37B0,
  SCR_OPAQUE_STRING_get_ai_group_count = 0x37B2,
  SCR_OPAQUE_STRING_get_ai_number = 0x37B4,
  SCR_OPAQUE_STRING_get_ai_touching_volume = 0x37B5,
  SCR_OPAQUE_STRING_get_alias_from_stored = 0x37B6,
  SCR_OPAQUE_STRING_get_all_allies = 0x37BB,
  SCR_OPAQUE_STRING_get_all_wave_guys = 0x37C2,
  SCR_OPAQUE_STRING_get_altitude_min = 0x37C3,
  SCR_OPAQUE_STRING_get_angered_damage_scalar = 0x37C4,
  SCR_OPAQUE_STRING_get_anim_class = 0x37C6,
  SCR_OPAQUE_STRING_get_anim_start_time = 0x37C9,
  SCR_OPAQUE_STRING_get_apache_ally = 0x37CD,
  SCR_OPAQUE_STRING_get_apache_player = 0x37CF,
  SCR_OPAQUE_STRING_get_apache_spawn_struct = 0x37D1,
  SCR_OPAQUE_STRING_get_approach_node = 0x37D3,
  SCR_OPAQUE_STRING_get_area_for_cycle = 0x37D4,
  SCR_OPAQUE_STRING_get_array_of_farthest = 0x37D6,
  SCR_OPAQUE_STRING_get_attack_num = 0x37DA,
  SCR_OPAQUE_STRING_get_average_distance_to_players = 0x37E0,
  SCR_OPAQUE_STRING_get_badcountryidstr = 0x37E2,
  SCR_OPAQUE_STRING_get_best_weapons = 0x37EA,
  SCR_OPAQUE_STRING_get_blended_difficulty = 0x37F0,
  SCR_OPAQUE_STRING_get_blendtime_from_notetrack = 0x37F1,
  SCR_OPAQUE_STRING_get_breach_groups = 0x37F6,
  SCR_OPAQUE_STRING_get_breach_target = 0x37F9,
  SCR_OPAQUE_STRING_get_challenge_scalar = 0x3800,
  SCR_OPAQUE_STRING_get_channel_array = 0x3801,
  SCR_OPAQUE_STRING_get_chaos_airdrop_loc = 0x3802,
  SCR_OPAQUE_STRING_get_choke_trig_id = 0x3804,
  SCR_OPAQUE_STRING_get_chopperboss_data = 0x3805,
  SCR_OPAQUE_STRING_get_clone_agent = 0x3806,
  SCR_OPAQUE_STRING_get_closest_ally = 0x3809,
  SCR_OPAQUE_STRING_get_closest_colored_friendly = 0x380A,
  SCR_OPAQUE_STRING_get_closest_colored_friendly_with_classname = 0x380B,
  SCR_OPAQUE_STRING_get_closest_player_healthy = 0x3812,
  SCR_OPAQUE_STRING_get_closest_to_player_view = 0x3815,
  SCR_OPAQUE_STRING_get_closest_vec_index = 0x3816,
  SCR_OPAQUE_STRING_get_closest_with_targetname = 0x3817,
  SCR_OPAQUE_STRING_get_color_index_item = 0x3819,
  SCR_OPAQUE_STRING_get_color_volume_from_trigger = 0x381F,
  SCR_OPAQUE_STRING_get_colorcoded_volume = 0x3820,
  SCR_OPAQUE_STRING_get_colorcodes_and_activate_trigger = 0x3822,
  SCR_OPAQUE_STRING_get_cumulative_weights = 0x382D,
  SCR_OPAQUE_STRING_get_curfloor = 0x382E,
  SCR_OPAQUE_STRING_get_current_agent_count = 0x382F,
  SCR_OPAQUE_STRING_get_current_hive = 0x3834,
  SCR_OPAQUE_STRING_get_current_hive_lane_index = 0x3835,
  SCR_OPAQUE_STRING_get_current_sam = 0x3838,
  SCR_OPAQUE_STRING_get_current_vo_alias = 0x383B,
  SCR_OPAQUE_STRING_get_damageable_mine = 0x3845,
  SCR_OPAQUE_STRING_get_damageable_player = 0x3846,
  SCR_OPAQUE_STRING_get_datascene = 0x3849,
  SCR_OPAQUE_STRING_get_death_anim_physics_mode = 0x384B,
  SCR_OPAQUE_STRING_get_delay = 0x384D,
  SCR_OPAQUE_STRING_get_desc_by_ref = 0x384E,
  SCR_OPAQUE_STRING_get_direction_away_from_players = 0x3852,
  SCR_OPAQUE_STRING_get_dot = 0x3855,
  SCR_OPAQUE_STRING_get_downed_posture_node = 0x3856,
  SCR_OPAQUE_STRING_get_download_state_hud = 0x3857,
  SCR_OPAQUE_STRING_get_dpad_down_level = 0x3858,
  SCR_OPAQUE_STRING_get_dpad_right_level = 0x385B,
  SCR_OPAQUE_STRING_get_drill_widget_color = 0x385E,
  SCR_OPAQUE_STRING_get_drones_touching_volume = 0x385F,
  SCR_OPAQUE_STRING_get_drones_with_targetname = 0x3860,
  SCR_OPAQUE_STRING_get_drop_loop_center = 0x3861,
  SCR_OPAQUE_STRING_get_edge_tiles = 0x3866,
  SCR_OPAQUE_STRING_get_elem_position = 0x3867,
  SCR_OPAQUE_STRING_get_elevated_jump_node = 0x3868,
  SCR_OPAQUE_STRING_get_enemy_count_touching_volume = 0x386B,
  SCR_OPAQUE_STRING_get_ent = 0x3871,
  SCR_OPAQUE_STRING_get_entry = 0x3873,
  SCR_OPAQUE_STRING_get_explosion_radius = 0x3877,
  SCR_OPAQUE_STRING_get_eye_position = 0x387A,
  SCR_OPAQUE_STRING_get_flare_node = 0x387C,
  SCR_OPAQUE_STRING_get_flashed_anim = 0x387D,
  SCR_OPAQUE_STRING_get_force_color = 0x3884,
  SCR_OPAQUE_STRING_get_force_color_guys = 0x3885,
  SCR_OPAQUE_STRING_get_fov = 0x3886,
  SCR_OPAQUE_STRING_get_free_edge_node = 0x3888,
  SCR_OPAQUE_STRING_get_free_shoot_node = 0x3889,
  SCR_OPAQUE_STRING_get_friendly_crate_model = 0x388A,
  SCR_OPAQUE_STRING_get_friendly_juggernaut_crate_model = 0x388B,
  SCR_OPAQUE_STRING_get_from_entity_target = 0x388D,
  SCR_OPAQUE_STRING_get_from_spawnstruct = 0x388E,
  SCR_OPAQUE_STRING_get_from_spawnstruct_target = 0x388F,
  SCR_OPAQUE_STRING_get_func_give = 0x3893,
  SCR_OPAQUE_STRING_get_furthest_zodiac = 0x3894,
  SCR_OPAQUE_STRING_get_generic_anime = 0x3895,
  SCR_OPAQUE_STRING_get_gun_tag = 0x389A,
  SCR_OPAQUE_STRING_get_helicopter_crash_location = 0x389D,
  SCR_OPAQUE_STRING_get_heroes = 0x389E,
  SCR_OPAQUE_STRING_get_hintstring_for_item_pickup = 0x38A2,
  SCR_OPAQUE_STRING_get_hintstring_for_pillaged_item = 0x38A3,
  SCR_OPAQUE_STRING_get_hives_destroyed_stat = 0x38A5,
  SCR_OPAQUE_STRING_get_housing_door_trigger = 0x38A9,
  SCR_OPAQUE_STRING_get_housing_musak_model = 0x38AF,
  SCR_OPAQUE_STRING_get_housing_primarylight = 0x38B0,
  SCR_OPAQUE_STRING_get_human_player = 0x38B3,
  SCR_OPAQUE_STRING_get_idle_anim = 0x38B6,
  SCR_OPAQUE_STRING_get_in_moving_vehicle = 0x38B9,
  SCR_OPAQUE_STRING_get_in_truck_nag_vo = 0x38BA,
  SCR_OPAQUE_STRING_get_in_world_area = 0x38BC,
  SCR_OPAQUE_STRING_get_is_upgrade_by_ref = 0x38C1,
  SCR_OPAQUE_STRING_get_item_desc = 0x38C3,
  SCR_OPAQUE_STRING_get_item_name = 0x38C4,
  SCR_OPAQUE_STRING_get_item_outline_color = 0x38C5,
  SCR_OPAQUE_STRING_get_jump_info = 0x38C6,
  SCR_OPAQUE_STRING_get_key = 0x38C7,
  SCR_OPAQUE_STRING_get_knife_reticle = 0x38C9,
  SCR_OPAQUE_STRING_get_last_selected_ent = 0x38CD,
  SCR_OPAQUE_STRING_get_latest_struct = 0x38CF,
  SCR_OPAQUE_STRING_get_leper_retreat_node = 0x38D3,
  SCR_OPAQUE_STRING_get_leveltime = 0x38D6,
  SCR_OPAQUE_STRING_get_linked_ents = 0x38D8,
  SCR_OPAQUE_STRING_get_linked_nodes_and_delete = 0x38DA,
  SCR_OPAQUE_STRING_get_linked_points = 0x38DB,
  SCR_OPAQUE_STRING_get_linked_struct = 0x38DC,
  SCR_OPAQUE_STRING_get_linked_structs = 0x38DD,
  SCR_OPAQUE_STRING_get_linked_vehicle_node = 0x38DE,
  SCR_OPAQUE_STRING_get_linked_vehicle_nodes = 0x38DF,
  SCR_OPAQUE_STRING_get_links = 0x38E0,
  SCR_OPAQUE_STRING_get_living_ai = 0x38E1,
  SCR_OPAQUE_STRING_get_living_ai_array = 0x38E2,
  SCR_OPAQUE_STRING_get_load_trigger_classes = 0x38E5,
  SCR_OPAQUE_STRING_get_load_trigger_funcs = 0x38E6,
  SCR_OPAQUE_STRING_get_loadout = 0x38E7,
  SCR_OPAQUE_STRING_get_locked_difficulty_val_global = 0x38EB,
  SCR_OPAQUE_STRING_get_locked_difficulty_val_player = 0x38EC,
  SCR_OPAQUE_STRING_get_lookahead_target_location = 0x38EE,
  SCR_OPAQUE_STRING_get_manhandled = 0x38F1,
  SCR_OPAQUE_STRING_get_map_soundtable = 0x38F2,
  SCR_OPAQUE_STRING_get_max_alien_count = 0x38F3,
  SCR_OPAQUE_STRING_get_max_sentry_count = 0x38F6,
  SCR_OPAQUE_STRING_get_maxxp_by_id = 0x38FA,
  SCR_OPAQUE_STRING_get_melee_painstate_info = 0x38FB,
  SCR_OPAQUE_STRING_get_meteoroid_impact_node_escape = 0x38FE,
  SCR_OPAQUE_STRING_get_minutes_and_seconds = 0x3901,
  SCR_OPAQUE_STRING_get_modified_alien_amount = 0x3904,
  SCR_OPAQUE_STRING_get_name = 0x3909,
  SCR_OPAQUE_STRING_get_name_by_ref = 0x390A,
  SCR_OPAQUE_STRING_get_nerf_scalar = 0x390C,
  SCR_OPAQUE_STRING_get_next_allow_melee_time = 0x390D,
  SCR_OPAQUE_STRING_get_node_funcs_based_on_target = 0x3910,
  SCR_OPAQUE_STRING_get_noteworthy_ent = 0x3912,
  SCR_OPAQUE_STRING_get_obj_ent_hvt = 0x3916,
  SCR_OPAQUE_STRING_get_obj_event = 0x3917,
  SCR_OPAQUE_STRING_get_obj_origin = 0x3918,
  SCR_OPAQUE_STRING_get_obstacle_dodge_amount = 0x3919,
  SCR_OPAQUE_STRING_get_offset_percent = 0x391B,
  SCR_OPAQUE_STRING_get_optimal_next_path_los_check = 0x391D,
  SCR_OPAQUE_STRING_get_out_override = 0x3923,
  SCR_OPAQUE_STRING_get_outer_leftdoor = 0x3927,
  SCR_OPAQUE_STRING_get_outside_range = 0x392B,
  SCR_OPAQUE_STRING_get_pacifist = 0x392E,
  SCR_OPAQUE_STRING_get_part_fx_cost_for_action_state = 0x3930,
  SCR_OPAQUE_STRING_get_parts = 0x3931,
  SCR_OPAQUE_STRING_get_path_end_node = 0x3932,
  SCR_OPAQUE_STRING_get_path_getfunc = 0x3933,
  SCR_OPAQUE_STRING_get_perk_1_level = 0x3936,
  SCR_OPAQUE_STRING_get_perk_ref_at_upgrade_level = 0x3937,
  SCR_OPAQUE_STRING_get_pet_follow_node = 0x3939,
  SCR_OPAQUE_STRING_get_photo_copier = 0x393A,
  SCR_OPAQUE_STRING_get_phraseinvalidstr = 0x393B,
  SCR_OPAQUE_STRING_get_pistol_plane_attack = 0x393E,
  SCR_OPAQUE_STRING_get_player_currency = 0x393F,
  SCR_OPAQUE_STRING_get_player_escaped = 0x3940,
  SCR_OPAQUE_STRING_get_player_feet_from_view = 0x3941,
  SCR_OPAQUE_STRING_get_player_gameskill = 0x3943,
  SCR_OPAQUE_STRING_get_player_hesco = 0x3944,
  SCR_OPAQUE_STRING_get_player_loop_center = 0x3946,
  SCR_OPAQUE_STRING_get_player_max_currency = 0x3947,
  SCR_OPAQUE_STRING_get_player_rig = 0x394D,
  SCR_OPAQUE_STRING_get_player_score = 0x394E,
  SCR_OPAQUE_STRING_get_player_session_rankup = 0x394F,
  SCR_OPAQUE_STRING_get_player_targ = 0x3951,
  SCR_OPAQUE_STRING_get_player_xp = 0x3955,
  SCR_OPAQUE_STRING_get_players = 0x3956,
  SCR_OPAQUE_STRING_get_portable_mg_spot = 0x395C,
  SCR_OPAQUE_STRING_get_position_from_progress = 0x395D,
  SCR_OPAQUE_STRING_get_possible_attachments_by_weaponclass = 0x3961,
  SCR_OPAQUE_STRING_get_primary_death_anim_state = 0x3967,
  SCR_OPAQUE_STRING_get_prioritized_colorcoded_nodes = 0x396B,
  SCR_OPAQUE_STRING_get_random_death_sound = 0x3971,
  SCR_OPAQUE_STRING_get_random_firework_num = 0x3974,
  SCR_OPAQUE_STRING_get_random_streamer_num = 0x3977,
  SCR_OPAQUE_STRING_get_ref_by_id = 0x397D,
  SCR_OPAQUE_STRING_get_reflected_point = 0x397E,
  SCR_OPAQUE_STRING_get_resource_ref_by_index = 0x3980,
  SCR_OPAQUE_STRING_get_respawn_delay_by_index = 0x3982,
  SCR_OPAQUE_STRING_get_respawn_threshold_by_index = 0x3983,
  SCR_OPAQUE_STRING_get_retreat_node_rated = 0x3984,
  SCR_OPAQUE_STRING_get_rider_by_position = 0x3987,
  SCR_OPAQUE_STRING_get_rl_toward = 0x398A,
  SCR_OPAQUE_STRING_get_rumble_ent = 0x398D,
  SCR_OPAQUE_STRING_get_rumble_ent_linked = 0x398E,
  SCR_OPAQUE_STRING_get_scaled_alien_amount = 0x398F,
  SCR_OPAQUE_STRING_get_script_linkto_targets = 0x3991,
  SCR_OPAQUE_STRING_get_selected_dpad_down = 0x3993,
  SCR_OPAQUE_STRING_get_selected_move_vector = 0x3997,
  SCR_OPAQUE_STRING_get_selected_nerf = 0x3998,
  SCR_OPAQUE_STRING_get_shuffle_to_corner_start_anim = 0x399F,
  SCR_OPAQUE_STRING_get_side_next_missile = 0x39A0,
  SCR_OPAQUE_STRING_get_sign = 0x39A1,
  SCR_OPAQUE_STRING_get_skill_from_index = 0x39A2,
  SCR_OPAQUE_STRING_get_sound_ent = 0x39A3,
  SCR_OPAQUE_STRING_get_spawn_event_types_array = 0x39A4,
  SCR_OPAQUE_STRING_get_spawn_event_wave_blocking_by_index = 0x39A5,
  SCR_OPAQUE_STRING_get_spawn_position = 0x39A6,
  SCR_OPAQUE_STRING_get_start_dvars = 0x39AD,
  SCR_OPAQUE_STRING_get_strip_color = 0x39B1,
  SCR_OPAQUE_STRING_get_strip_settings = 0x39B2,
  SCR_OPAQUE_STRING_get_suppress_point = 0x39B4,
  SCR_OPAQUE_STRING_get_surface_types = 0x39B5,
  SCR_OPAQUE_STRING_get_target_ent_origin = 0x39BE,
  SCR_OPAQUE_STRING_get_target_ent_target_ent = 0x39C0,
  SCR_OPAQUE_STRING_get_target_ents = 0x39C2,
  SCR_OPAQUE_STRING_get_team_prefix = 0x39C6,
  SCR_OPAQUE_STRING_get_team_substr = 0x39C7,
  SCR_OPAQUE_STRING_get_teleport_optimized_breachfriendly = 0x39C9,
  SCR_OPAQUE_STRING_get_to_train_wait_node = 0x39CD,
  SCR_OPAQUE_STRING_get_tool_hudelem = 0x39CE,
  SCR_OPAQUE_STRING_get_touching_tiles = 0x39CF,
  SCR_OPAQUE_STRING_get_trace_loc_for_target = 0x39D0,
  SCR_OPAQUE_STRING_get_trace_types = 0x39D1,
  SCR_OPAQUE_STRING_get_trigger_targs = 0x39D7,
  SCR_OPAQUE_STRING_get_turret_setup_anim = 0x39D8,
  SCR_OPAQUE_STRING_get_type_data = 0x39DA,
  SCR_OPAQUE_STRING_get_types_array = 0x39DB,
  SCR_OPAQUE_STRING_get_use_trigger = 0x39E2,
  SCR_OPAQUE_STRING_get_valid_challenge = 0x39E3,
  SCR_OPAQUE_STRING_get_vehicle_ai_spawners = 0x39E9,
  SCR_OPAQUE_STRING_get_vehicle_array = 0x39EA,
  SCR_OPAQUE_STRING_get_wash_effect = 0x39F4,
  SCR_OPAQUE_STRING_get_wave_data = 0x39F6,
  SCR_OPAQUE_STRING_get_waves = 0x39F7,
  SCR_OPAQUE_STRING_get_weapon_outline_color = 0x39F9,
  SCR_OPAQUE_STRING_get_white_overlay = 0x39FE,
  SCR_OPAQUE_STRING_get_within_range = 0x39FF,
  SCR_OPAQUE_STRING_get_world_item_spawn_pos = 0x3A00,
  SCR_OPAQUE_STRING_get_zone_to = 0x3A05,
  SCR_OPAQUE_STRING_getactionbind = 0x3A0A,
  SCR_OPAQUE_STRING_getactiveagentsoftype = 0x3A0B,
  SCR_OPAQUE_STRING_getactiveplayerlist = 0x3A0C,
  SCR_OPAQUE_STRING_getagentdamagescalar = 0x3A0D,
  SCR_OPAQUE_STRING_getaicurrentweaponslot = 0x3A0F,
  SCR_OPAQUE_STRING_getaimpitchtoshootentorpos = 0x3A10,
  SCR_OPAQUE_STRING_getairstrikedanger = 0x3A14,
  SCR_OPAQUE_STRING_getaisidearmweapon = 0x3A16,
  SCR_OPAQUE_STRING_getaliastypefromsoundalias = 0x3A17,
  SCR_OPAQUE_STRING_getallactiveparts = 0x3A18,
  SCR_OPAQUE_STRING_getallweapons = 0x3A19,
  SCR_OPAQUE_STRING_getangleindex = 0x3A1B,
  SCR_OPAQUE_STRING_getangles_func = 0x3A1E,
  SCR_OPAQUE_STRING_getanimscalefactors = 0x3A24,
  SCR_OPAQUE_STRING_getarrivalnode = 0x3A27,
  SCR_OPAQUE_STRING_getarrivalprestartpos = 0x3A28,
  SCR_OPAQUE_STRING_getattachmentlistbasenames = 0x3A2B,
  SCR_OPAQUE_STRING_getattachmentlistuniqenames = 0x3A2C,
  SCR_OPAQUE_STRING_getattachmenttype = 0x3A2D,
  SCR_OPAQUE_STRING_getattackpoint = 0x3A2E,
  SCR_OPAQUE_STRING_getaverageplayerorigin = 0x3A31,
  SCR_OPAQUE_STRING_getawardrecord = 0x3A32,
  SCR_OPAQUE_STRING_getawardtype = 0x3A34,
  SCR_OPAQUE_STRING_getawardwinners = 0x3A35,
  SCR_OPAQUE_STRING_getbestminitarget = 0x3A3B,
  SCR_OPAQUE_STRING_getbestspawnpoint = 0x3A3F,
  SCR_OPAQUE_STRING_getbeststepoutpos = 0x3A40,
  SCR_OPAQUE_STRING_getbesttarget = 0x3A41,
  SCR_OPAQUE_STRING_getbetterplayer = 0x3A42,
  SCR_OPAQUE_STRING_getbuddyspawnangles = 0x3A45,
  SCR_OPAQUE_STRING_getcapxpscale = 0x3A4A,
  SCR_OPAQUE_STRING_getchain = 0x3A4C,
  SCR_OPAQUE_STRING_getchallengestatus = 0x3A4F,
  SCR_OPAQUE_STRING_getclosest2d = 0x3A57,
  SCR_OPAQUE_STRING_getclosestfriendlyspeaker = 0x3A59,
  SCR_OPAQUE_STRING_getclosestfx = 0x3A5A,
  SCR_OPAQUE_STRING_getclosestnode = 0x3A5C,
  SCR_OPAQUE_STRING_getclosests_flickering_model = 0x3A5D,
  SCR_OPAQUE_STRING_getcloseststartnode = 0x3A5E,
  SCR_OPAQUE_STRING_getcombatspeedscalar = 0x3A60,
  SCR_OPAQUE_STRING_getcorrectcoverangles = 0x3A62,
  SCR_OPAQUE_STRING_getcovermultipretendtype = 0x3A64,
  SCR_OPAQUE_STRING_getcratetypefordroptype = 0x3A65,
  SCR_OPAQUE_STRING_getcrouchdeathanim = 0x3A67,
  SCR_OPAQUE_STRING_getcurrentdifficultysetting = 0x3A6B,
  SCR_OPAQUE_STRING_getcurrentfraction = 0x3A6C,
  SCR_OPAQUE_STRING_getcurrentweaponxp = 0x3A6E,
  SCR_OPAQUE_STRING_getdamagetype = 0x3A73,
  SCR_OPAQUE_STRING_getdeathanim = 0x3A74,
  SCR_OPAQUE_STRING_getdeathanimindex = 0x3A75,
  SCR_OPAQUE_STRING_getdegreeselevation = 0x3A7A,
  SCR_OPAQUE_STRING_getdescription = 0x3A7B,
  SCR_OPAQUE_STRING_getdesireddrivenmovemode = 0x3A7C,
  SCR_OPAQUE_STRING_getdesiredidlepose = 0x3A7E,
  SCR_OPAQUE_STRING_getdirectioncompass = 0x3A80,
  SCR_OPAQUE_STRING_getdirectionfacingclock = 0x3A82,
  SCR_OPAQUE_STRING_getdogdeathanim = 0x3A87,
  SCR_OPAQUE_STRING_getdogmoveanim = 0x3A89,
  SCR_OPAQUE_STRING_getdognexttwitchtime = 0x3A8A,
  SCR_OPAQUE_STRING_getdogstopanimlook = 0x3A8E,
  SCR_OPAQUE_STRING_getdoorside = 0x3A91,
  SCR_OPAQUE_STRING_getdvarvec = 0x3A93,
  SCR_OPAQUE_STRING_getearliestclaimplayer = 0x3A94,
  SCR_OPAQUE_STRING_getempdamageents = 0x3A95,
  SCR_OPAQUE_STRING_getenemyeyepos = 0x3A96,
  SCR_OPAQUE_STRING_getent_or_struct = 0x3A9B,
  SCR_OPAQUE_STRING_getentarraywithflag = 0x3A9E,
  SCR_OPAQUE_STRING_getentwithflag = 0x3A9F,
  SCR_OPAQUE_STRING_geteventstate = 0x3AA0,
  SCR_OPAQUE_STRING_getexitnode = 0x3AA1,
  SCR_OPAQUE_STRING_getexitsplittime = 0x3AA2,
  SCR_OPAQUE_STRING_getexplodedistance = 0x3AA3,
  SCR_OPAQUE_STRING_getflavorburstaliases = 0x3AAC,
  SCR_OPAQUE_STRING_getflavorburstid = 0x3AAD,
  SCR_OPAQUE_STRING_getfollowmovemode = 0x3AB1,
  SCR_OPAQUE_STRING_getfraggrenadecount = 0x3AB4,
  SCR_OPAQUE_STRING_getfreeagent = 0x3AB5,
  SCR_OPAQUE_STRING_getfriendlyspawnstart = 0x3AB6,
  SCR_OPAQUE_STRING_getgenericanim = 0x3ABC,
  SCR_OPAQUE_STRING_getgunpitchtoshootentorpos = 0x3AC2,
  SCR_OPAQUE_STRING_getgvalue = 0x3AC4,
  SCR_OPAQUE_STRING_gethalftime = 0x3AC5,
  SCR_OPAQUE_STRING_gethealthcap = 0x3AC7,
  SCR_OPAQUE_STRING_gethelipilotmeshoffset = 0x3AC8,
  SCR_OPAQUE_STRING_gethighestscoringplayer = 0x3ACB,
  SCR_OPAQUE_STRING_gethostplayer = 0x3ACE,
  SCR_OPAQUE_STRING_gethvalue = 0x3ACF,
  SCR_OPAQUE_STRING_geticonshader = 0x3AD0,
  SCR_OPAQUE_STRING_getimpactpainanimindex = 0x3AD2,
  SCR_OPAQUE_STRING_getimpactpainanimstate = 0x3AD3,
  SCR_OPAQUE_STRING_getintervalsounddelaymaxdefault = 0x3ADB,
  SCR_OPAQUE_STRING_getitemweaponname = 0x3ADF,
  SCR_OPAQUE_STRING_getjumpendangles = 0x3AE5,
  SCR_OPAQUE_STRING_getjumpgravity = 0x3AE6,
  SCR_OPAQUE_STRING_getjumpinfo = 0x3AE7,
  SCR_OPAQUE_STRING_getjumpplaybackrate = 0x3AE9,
  SCR_OPAQUE_STRING_getjumpspeedmultiplier = 0x3AEA,
  SCR_OPAQUE_STRING_getjumpvelocity = 0x3AEC,
  SCR_OPAQUE_STRING_getkillstreakallteamstreak = 0x3AF0,
  SCR_OPAQUE_STRING_getkillstreakawardref = 0x3AF1,
  SCR_OPAQUE_STRING_getkillstreakcount = 0x3AF2,
  SCR_OPAQUE_STRING_getkillstreakearnedhint = 0x3AF6,
  SCR_OPAQUE_STRING_getkillstreakfromchallenge = 0x3AF9,
  SCR_OPAQUE_STRING_getkillstreakicon = 0x3AFA,
  SCR_OPAQUE_STRING_getkillstreakoverheadicon = 0x3AFE,
  SCR_OPAQUE_STRING_getkillstreakreference = 0x3AFF,
  SCR_OPAQUE_STRING_getkillstreakrownum = 0x3B00,
  SCR_OPAQUE_STRING_getkillstreakscore = 0x3B01,
  SCR_OPAQUE_STRING_getkillstreakweapon = 0x3B04,
  SCR_OPAQUE_STRING_getlaunchanimentry = 0x3B0B,
  SCR_OPAQUE_STRING_getlerptime = 0x3B0D,
  SCR_OPAQUE_STRING_getlevelcompleted = 0x3B0E,
  SCR_OPAQUE_STRING_getlinkedvehiclenodes = 0x3B13,
  SCR_OPAQUE_STRING_getlinknamenodes = 0x3B14,
  SCR_OPAQUE_STRING_getlocation = 0x3B18,
  SCR_OPAQUE_STRING_getloccalloutalias = 0x3B19,
  SCR_OPAQUE_STRING_getlookattarget = 0x3B1A,
  SCR_OPAQUE_STRING_getlosingplayers = 0x3B1C,
  SCR_OPAQUE_STRING_getlowermessage = 0x3B1D,
  SCR_OPAQUE_STRING_getmapcenter = 0x3B21,
  SCR_OPAQUE_STRING_getmaxaliveenemycount = 0x3B25,
  SCR_OPAQUE_STRING_getmaxrounds = 0x3B29,
  SCR_OPAQUE_STRING_getmaxstreakcost = 0x3B2A,
  SCR_OPAQUE_STRING_getmeleepainanimindex = 0x3B2C,
  SCR_OPAQUE_STRING_getmoveanim = 0x3B33,
  SCR_OPAQUE_STRING_getmovebackentry = 0x3B34,
  SCR_OPAQUE_STRING_getmovebackstate = 0x3B35,
  SCR_OPAQUE_STRING_getnewenemyreactionanim = 0x3B3C,
  SCR_OPAQUE_STRING_getnextflashanim = 0x3B3F,
  SCR_OPAQUE_STRING_getnextlevelindex = 0x3B40,
  SCR_OPAQUE_STRING_getnextmissilespawnindex = 0x3B41,
  SCR_OPAQUE_STRING_getnextobjid = 0x3B44,
  SCR_OPAQUE_STRING_getnodeforwardangles = 0x3B4C,
  SCR_OPAQUE_STRING_getnodeforwardyaw = 0x3B4D,
  SCR_OPAQUE_STRING_getnodefunction = 0x3B4E,
  SCR_OPAQUE_STRING_getnodeorigin = 0x3B51,
  SCR_OPAQUE_STRING_getnodetype = 0x3B52,
  SCR_OPAQUE_STRING_getnodeyawtoorigin = 0x3B54,
  SCR_OPAQUE_STRING_getnormalanimtime = 0x3B56,
  SCR_OPAQUE_STRING_getnumabilitycategories = 0x3B57,
  SCR_OPAQUE_STRING_getnumactiveagents = 0x3B58,
  SCR_OPAQUE_STRING_getnumownedactiveagents = 0x3B59,
  SCR_OPAQUE_STRING_getnumsubability = 0x3B5D,
  SCR_OPAQUE_STRING_getobjectivetext = 0x3B60,
  SCR_OPAQUE_STRING_getobjpointbyname = 0x3B62,
  SCR_OPAQUE_STRING_getotherteam = 0x3B67,
  SCR_OPAQUE_STRING_getoutrig_model = 0x3B73,
  SCR_OPAQUE_STRING_getpainanim = 0x3B79,
  SCR_OPAQUE_STRING_getparent = 0x3B7D,
  SCR_OPAQUE_STRING_getpartandstateindex = 0x3B7E,
  SCR_OPAQUE_STRING_getpathnodenearplayer = 0x3B82,
  SCR_OPAQUE_STRING_getpathstart = 0x3B83,
  SCR_OPAQUE_STRING_getpercentchancetodrop = 0x3B84,
  SCR_OPAQUE_STRING_getperkforclass = 0x3B86,
  SCR_OPAQUE_STRING_getperkupgrade = 0x3B89,
  SCR_OPAQUE_STRING_getpermutation = 0x3B8C,
  SCR_OPAQUE_STRING_getpitchtoenemy = 0x3B8E,
  SCR_OPAQUE_STRING_getpitchtoshootentorpos = 0x3B90,
  SCR_OPAQUE_STRING_getplayerclaymores = 0x3B94,
  SCR_OPAQUE_STRING_getplayerfoleytype = 0x3B95,
  SCR_OPAQUE_STRING_getplayerhelispeed = 0x3B98,
  SCR_OPAQUE_STRING_getplayermodelindex = 0x3B99,
  SCR_OPAQUE_STRING_getplayermodelname = 0x3B9A,
  SCR_OPAQUE_STRING_getplayerstat = 0x3B9B,
  SCR_OPAQUE_STRING_getplayertraceheight = 0x3B9D,
  SCR_OPAQUE_STRING_getplayerweaponhorde = 0x3B9E,
  SCR_OPAQUE_STRING_getpredictedaimyawtoshootentorpos = 0x3BA1,
  SCR_OPAQUE_STRING_getpredictedpathmidpoint = 0x3BA2,
  SCR_OPAQUE_STRING_getpreferredweapon = 0x3BA4,
  SCR_OPAQUE_STRING_getprojectiondata = 0x3BA7,
  SCR_OPAQUE_STRING_getquadrant = 0x3BAC,
  SCR_OPAQUE_STRING_getradarstrengthforcomexp = 0x3BAE,
  SCR_OPAQUE_STRING_getradarstrengthforplayer = 0x3BAF,
  SCR_OPAQUE_STRING_getradialanglefroment = 0x3BB1,
  SCR_OPAQUE_STRING_getrandomability = 0x3BB2,
  SCR_OPAQUE_STRING_getrandomanimentry = 0x3BB3,
  SCR_OPAQUE_STRING_getrandomattachments = 0x3BB4,
  SCR_OPAQUE_STRING_getrandomcratetype = 0x3BB7,
  SCR_OPAQUE_STRING_getrandomcratetypeforgamemode = 0x3BB8,
  SCR_OPAQUE_STRING_getrandomindex = 0x3BBA,
  SCR_OPAQUE_STRING_getrank = 0x3BC0,
  SCR_OPAQUE_STRING_getrankforxp = 0x3BC1,
  SCR_OPAQUE_STRING_getrankfromname = 0x3BC2,
  SCR_OPAQUE_STRING_getratiohival = 0x3BCB,
  SCR_OPAQUE_STRING_getratioloval = 0x3BCC,
  SCR_OPAQUE_STRING_getrawbaseweaponname = 0x3BCD,
  SCR_OPAQUE_STRING_getregendata = 0x3BCE,
  SCR_OPAQUE_STRING_getregenspeed = 0x3BCF,
  SCR_OPAQUE_STRING_getremainingburstdelaytime = 0x3BD2,
  SCR_OPAQUE_STRING_getreversegraphnode = 0x3BD7,
  SCR_OPAQUE_STRING_getroundintermissiontimer = 0x3BD8,
  SCR_OPAQUE_STRING_getroundswon = 0x3BD9,
  SCR_OPAQUE_STRING_getscorelimit = 0x3BE1,
  SCR_OPAQUE_STRING_getscoreperminute = 0x3BE2,
  SCR_OPAQUE_STRING_getspawnpoint = 0x3BED,
  SCR_OPAQUE_STRING_getspawnpoint_domination = 0x3BEF,
  SCR_OPAQUE_STRING_getspawnteam = 0x3BF7,
  SCR_OPAQUE_STRING_getspeakers = 0x3BF8,
  SCR_OPAQUE_STRING_getspecialroundtimer = 0x3BFA,
  SCR_OPAQUE_STRING_getsplittimes = 0x3BFB,
  SCR_OPAQUE_STRING_getsprintanim = 0x3BFE,
  SCR_OPAQUE_STRING_getstance_func = 0x3C01,
  SCR_OPAQUE_STRING_getstartmoveangleindex = 0x3C07,
  SCR_OPAQUE_STRING_getstartnode = 0x3C09,
  SCR_OPAQUE_STRING_getstat_easy = 0x3C0C,
  SCR_OPAQUE_STRING_getstat_veteran = 0x3C11,
  SCR_OPAQUE_STRING_getstopanimindex = 0x3C12,
  SCR_OPAQUE_STRING_getstopdata = 0x3C14,
  SCR_OPAQUE_STRING_gettargetentpos = 0x3C23,
  SCR_OPAQUE_STRING_gettargetpredictedposition = 0x3C25,
  SCR_OPAQUE_STRING_getteamarray = 0x3C2A,
  SCR_OPAQUE_STRING_getteamassignment = 0x3C2B,
  SCR_OPAQUE_STRING_getteambalance = 0x3C2C,
  SCR_OPAQUE_STRING_getteamcolor = 0x3C2D,
  SCR_OPAQUE_STRING_getteamcratemodel = 0x3C2E,
  SCR_OPAQUE_STRING_getteamdeploymodel = 0x3C2F,
  SCR_OPAQUE_STRING_getteamflagmodel = 0x3C36,
  SCR_OPAQUE_STRING_getteamforfeitedstring = 0x3C37,
  SCR_OPAQUE_STRING_getteamhudicon = 0x3C39,
  SCR_OPAQUE_STRING_getteamspawnmusic = 0x3C40,
  SCR_OPAQUE_STRING_getteamvoiceprefix = 0x3C42,
  SCR_OPAQUE_STRING_getteamwinmusic = 0x3C43,
  SCR_OPAQUE_STRING_getthreatsovertime = 0x3C47,
  SCR_OPAQUE_STRING_gettierfromtable = 0x3C48,
  SCR_OPAQUE_STRING_gettimeinterval = 0x3C49,
  SCR_OPAQUE_STRING_gettimepassedpercentage = 0x3C4C,
  SCR_OPAQUE_STRING_gettimeremaining = 0x3C4D,
  SCR_OPAQUE_STRING_gettimesincedompointcapture = 0x3C4F,
  SCR_OPAQUE_STRING_gettranssplittime = 0x3C53,
  SCR_OPAQUE_STRING_gettruenodeangles = 0x3C54,
  SCR_OPAQUE_STRING_getturnanim = 0x3C55,
  SCR_OPAQUE_STRING_getturnanimstate = 0x3C56,
  SCR_OPAQUE_STRING_getturninplaceindex = 0x3C57,
  SCR_OPAQUE_STRING_gettweakabledvar = 0x3C58,
  SCR_OPAQUE_STRING_gettweakabledvarvalue = 0x3C59,
  SCR_OPAQUE_STRING_getuniqueflagnameindex = 0x3C5C,
  SCR_OPAQUE_STRING_getvalueinrange = 0x3C64,
  SCR_OPAQUE_STRING_getvectorarrayaverage = 0x3C65,
  SCR_OPAQUE_STRING_getvelocity_func = 0x3C6A,
  SCR_OPAQUE_STRING_getwalkanim = 0x3C6D,
  SCR_OPAQUE_STRING_getwatcheddvar = 0x3C6E,
  SCR_OPAQUE_STRING_getweaponattachmentfromchallenge = 0x3C70,
  SCR_OPAQUE_STRING_getweaponattachmentfromstats = 0x3C71,
  SCR_OPAQUE_STRING_getweaponbarsize = 0x3C73,
  SCR_OPAQUE_STRING_getweaponchoice = 0x3C76,
  SCR_OPAQUE_STRING_getweaponclass = 0x3C77,
  SCR_OPAQUE_STRING_getweaponforpos = 0x3C78,
  SCR_OPAQUE_STRING_getweaponfromchallenge = 0x3C79,
  SCR_OPAQUE_STRING_getweaponmaxrankxp = 0x3C7C,
  SCR_OPAQUE_STRING_getweaponrankforxp = 0x3C7E,
  SCR_OPAQUE_STRING_getweaponrankinfomaxxp = 0x3C7F,
  SCR_OPAQUE_STRING_getweaponrankinfominxp = 0x3C80,
  SCR_OPAQUE_STRING_getweaponrankinfoxpamt = 0x3C81,
  SCR_OPAQUE_STRING_getweaponrankxp = 0x3C82,
  SCR_OPAQUE_STRING_getweeklyref = 0x3C84,
  SCR_OPAQUE_STRING_getyaw2d = 0x3C88,
  SCR_OPAQUE_STRING_getyawangles = 0x3C89,
  SCR_OPAQUE_STRING_getyawtoorigin = 0x3C8C,
  SCR_OPAQUE_STRING_getyawtospot = 0x3C8D,
  SCR_OPAQUE_STRING_getyawtotag = 0x3C8E,
  SCR_OPAQUE_STRING_ghetto_tag_create = 0x3C90,
  SCR_OPAQUE_STRING_ghille_top = 0x3C92,
  SCR_OPAQUE_STRING_ghost_town_end = 0x3C97,
  SCR_OPAQUE_STRING_ghost_town_sneak_end = 0x3C9C,
  SCR_OPAQUE_STRING_give_ammo_clip = 0x3CA1,
  SCR_OPAQUE_STRING_give_back_aim_over_time = 0x3CA5,
  SCR_OPAQUE_STRING_give_binoculars = 0x3CA7,
  SCR_OPAQUE_STRING_give_boost_item = 0x3CA8,
  SCR_OPAQUE_STRING_give_default = 0x3CA9,
  SCR_OPAQUE_STRING_give_hatchet = 0x3CAF,
  SCR_OPAQUE_STRING_give_health = 0x3CB0,
  SCR_OPAQUE_STRING_give_initial_perks = 0x3CB3,
  SCR_OPAQUE_STRING_give_laser = 0x3CB4,
  SCR_OPAQUE_STRING_give_loadout = 0x3CB7,
  SCR_OPAQUE_STRING_give_maxammo = 0x3CBC,
  SCR_OPAQUE_STRING_give_player_new_ref_ent_look = 0x3CC1,
  SCR_OPAQUE_STRING_give_player_points = 0x3CC3,
  SCR_OPAQUE_STRING_give_player_skill_point = 0x3CC5,
  SCR_OPAQUE_STRING_give_player_xp = 0x3CC8,
  SCR_OPAQUE_STRING_give_players_rewards = 0x3CC9,
  SCR_OPAQUE_STRING_give_point = 0x3CCA,
  SCR_OPAQUE_STRING_give_power_back = 0x3CCB,
  SCR_OPAQUE_STRING_give_soflam = 0x3CCF,
  SCR_OPAQUE_STRING_give_trophy_item = 0x3CD4,
  SCR_OPAQUE_STRING_give_underwater_weapon = 0x3CD5,
  SCR_OPAQUE_STRING_giveassistbonus = 0x3CDC,
  SCR_OPAQUE_STRING_givebonusperks = 0x3CE0,
  SCR_OPAQUE_STRING_givecarryremoteuav = 0x3CE1,
  SCR_OPAQUE_STRING_givecombathigh = 0x3CE4,
  SCR_OPAQUE_STRING_giveflagcapturexp = 0x3CEA,
  SCR_OPAQUE_STRING_givehighlight = 0x3CEE,
  SCR_OPAQUE_STRING_giveims = 0x3CEF,
  SCR_OPAQUE_STRING_givejuggernaut = 0x3CF0,
  SCR_OPAQUE_STRING_givekillreward = 0x3CF1,
  SCR_OPAQUE_STRING_givekillstreakweapon = 0x3CF3,
  SCR_OPAQUE_STRING_giveloadout = 0x3CF5,
  SCR_OPAQUE_STRING_givemarker = 0x3CF6,
  SCR_OPAQUE_STRING_givematchbonus = 0x3CF7,
  SCR_OPAQUE_STRING_giveobject = 0x3CF8,
  SCR_OPAQUE_STRING_giveperkequipment = 0x3CFC,
  SCR_OPAQUE_STRING_givepointsforevent = 0x3D03,
  SCR_OPAQUE_STRING_giverandomdeployable = 0x3D04,
  SCR_OPAQUE_STRING_giverandomgun = 0x3D05,
  SCR_OPAQUE_STRING_giverankxp = 0x3D06,
  SCR_OPAQUE_STRING_giverankxp_regularmp = 0x3D07,
  SCR_OPAQUE_STRING_giverecentshieldxp = 0x3D09,
  SCR_OPAQUE_STRING_giveresistanceperks = 0x3D0A,
  SCR_OPAQUE_STRING_giveselectedkillstreakitem = 0x3D0C,
  SCR_OPAQUE_STRING_givetank = 0x3D10,
  SCR_OPAQUE_STRING_giveteamscoreforobjective = 0x3D14,
  SCR_OPAQUE_STRING_giveultimatekillstreak = 0x3D15,
  SCR_OPAQUE_STRING_giveuponsuppressiontime = 0x3D17,
  SCR_OPAQUE_STRING_giveuptime = 0x3D18,
  SCR_OPAQUE_STRING_glass_cutter_on = 0x3D1E,
  SCR_OPAQUE_STRING_glass_cutting_fx_notetrack_handler = 0x3D1F,
  SCR_OPAQUE_STRING_global_breakables_think = 0x3D28,
  SCR_OPAQUE_STRING_global_callbacks = 0x3D29,
  SCR_OPAQUE_STRING_global_damage_func = 0x3D2A,
  SCR_OPAQUE_STRING_global_fx_array_to_string = 0x3D2E,
  SCR_OPAQUE_STRING_global_kill_func = 0x3D2F,
  SCR_OPAQUE_STRING_global_spawn_functions = 0x3D30,
  SCR_OPAQUE_STRING_global_tables = 0x3D31,
  SCR_OPAQUE_STRING_globalthink = 0x3D32,
  SCR_OPAQUE_STRING_glow = 0x3D34,
  SCR_OPAQUE_STRING_glow_console = 0x3D35,
  SCR_OPAQUE_STRING_glow_model = 0x3D37,
  SCR_OPAQUE_STRING_glowstick2_prop = 0x3D3E,
  SCR_OPAQUE_STRING_glowstick_hacking = 0x3D3F,
  SCR_OPAQUE_STRING_glowstickenemyuselistener = 0x3D45,
  SCR_OPAQUE_STRING_glowstickhandledeathdamage = 0x3D46,
  SCR_OPAQUE_STRING_glowsticks = 0x3D48,
  SCR_OPAQUE_STRING_glowstickuselistener = 0x3D4B,
  SCR_OPAQUE_STRING_glsentry_placed_listener = 0x3D4C,
  SCR_OPAQUE_STRING_gndlt = 0x3D4E,
  SCR_OPAQUE_STRING_go_hit_geo = 0x3D51,
  SCR_OPAQUE_STRING_go_path_by_targetname = 0x3D52,
  SCR_OPAQUE_STRING_go_street = 0x3D54,
  SCR_OPAQUE_STRING_go_to_leaping_melee_node = 0x3D57,
  SCR_OPAQUE_STRING_go_to_node = 0x3D59,
  SCR_OPAQUE_STRING_go_to_node_set_goal_node = 0x3D5C,
  SCR_OPAQUE_STRING_go_to_struct = 0x3D61,
  SCR_OPAQUE_STRING_go_to_waiting = 0x3D62,
  SCR_OPAQUE_STRING_goal_dir = 0x3D63,
  SCR_OPAQUE_STRING_goal_fx_ent = 0x3D64,
  SCR_OPAQUE_STRING_goal_node = 0x3D65,
  SCR_OPAQUE_STRING_goalraidus = 0x3D6C,
  SCR_OPAQUE_STRING_goback_startfunc = 0x3D6F,
  SCR_OPAQUE_STRING_god_rays_from_moving_source = 0x3D71,
  SCR_OPAQUE_STRING_god_rays_from_rog = 0x3D72,
  SCR_OPAQUE_STRING_godmode = 0x3D74,
  SCR_OPAQUE_STRING_godoff = 0x3D75,
  SCR_OPAQUE_STRING_godon = 0x3D76,
  SCR_OPAQUE_STRING_godrays = 0x3D77,
  SCR_OPAQUE_STRING_goingtoproneaim = 0x3D7A,
  SCR_OPAQUE_STRING_gold_jeep_player_door_exfil = 0x3D7D,
  SCR_OPAQUE_STRING_gold_player_door = 0x3D7E,
  SCR_OPAQUE_STRING_goodaccuracy = 0x3D80,
  SCR_OPAQUE_STRING_goodfriendlydistancefromplayersquared = 0x3D82,
  SCR_OPAQUE_STRING_goodshootpos = 0x3D83,
  SCR_OPAQUE_STRING_gopath = 0x3D84,
  SCR_OPAQUE_STRING_gotocover = 0x3D89,
  SCR_OPAQUE_STRING_grabvignetteinfo = 0x3D8F,
  SCR_OPAQUE_STRING_graceperiodgrenademod = 0x3D91,
  SCR_OPAQUE_STRING_graph_position = 0x3D92,
  SCR_OPAQUE_STRING_grass_aas_approach = 0x3D95,
  SCR_OPAQUE_STRING_gravity_shift = 0x3D96,
  SCR_OPAQUE_STRING_greatestuniqueplayerkills = 0x3D98,
  SCR_OPAQUE_STRING_grenade_cache_index = 0x3DA3,
  SCR_OPAQUE_STRING_grenade_roll_grenade = 0x3DAA,
  SCR_OPAQUE_STRING_grenade_tossed = 0x3DAB,
  SCR_OPAQUE_STRING_grenadecooldownelapsed = 0x3DAD,
  SCR_OPAQUE_STRING_grenadeorigin = 0x3DB4,
  SCR_OPAQUE_STRING_grenades = 0x3DB6,
  SCR_OPAQUE_STRING_grenades_by_difficulty = 0x3DB7,
  SCR_OPAQUE_STRING_grenades_merrick = 0x3DB8,
  SCR_OPAQUE_STRING_grenadeshielded = 0x3DB9,
  SCR_OPAQUE_STRING_grenadesplashing = 0x3DBA,
  SCR_OPAQUE_STRING_grenadethrowoffsets = 0x3DBC,
  SCR_OPAQUE_STRING_grenadethrowpose = 0x3DBD,
  SCR_OPAQUE_STRING_grenadetimers = 0x3DBE,
  SCR_OPAQUE_STRING_grenadetracking = 0x3DBF,
  SCR_OPAQUE_STRING_ground_movement = 0x3DC6,
  SCR_OPAQUE_STRING_ground_ref = 0x3DC8,
  SCR_OPAQUE_STRING_ground_ref_ent = 0x3DC9,
  SCR_OPAQUE_STRING_ground_support_locs = 0x3DCB,
  SCR_OPAQUE_STRING_group_anim = 0x3DD0,
  SCR_OPAQUE_STRING_group_flag_init = 0x3DD3,
  SCR_OPAQUE_STRING_group_get_flagname = 0x3DD6,
  SCR_OPAQUE_STRING_group_get_flagname_from_group = 0x3DD7,
  SCR_OPAQUE_STRING_group_return_groups_with_flag_set = 0x3DDA,
  SCR_OPAQUE_STRING_group_wait_group_spawned = 0x3DDB,
  SCR_OPAQUE_STRING_group_walla = 0x3DDC,
  SCR_OPAQUE_STRING_groupedanim_pos = 0x3DDD,
  SCR_OPAQUE_STRING_growl_on_path_end = 0x3DE0,
  SCR_OPAQUE_STRING_gt_get_to_cover_after_landing = 0x3DE3,
  SCR_OPAQUE_STRING_guard_b_1 = 0x3DE8,
  SCR_OPAQUE_STRING_guard_b_2 = 0x3DE9,
  SCR_OPAQUE_STRING_gun_down_trigger = 0x3DEF,
  SCR_OPAQUE_STRING_gun_on_ground = 0x3DF7,
  SCR_OPAQUE_STRING_gun_pickup_left = 0x3DF8,
  SCR_OPAQUE_STRING_gun_r_off = 0x3DFA,
  SCR_OPAQUE_STRING_gun_recall = 0x3DFC,
  SCR_OPAQUE_STRING_gun_removed = 0x3DFE,
  SCR_OPAQUE_STRING_gun_up_for_reload = 0x3E00,
  SCR_OPAQUE_STRING_gundown_twitch = 0x3E09,
  SCR_OPAQUE_STRING_gundown_walk = 0x3E0A,
  SCR_OPAQUE_STRING_gunfireloopfxvecthread = 0x3E0F,
  SCR_OPAQUE_STRING_gunner_pain_init = 0x3E12,
  SCR_OPAQUE_STRING_gunner_pain_reset = 0x3E13,
  SCR_OPAQUE_STRING_gunnerweapon = 0x3E16,
  SCR_OPAQUE_STRING_gunship_attack_autosave = 0x3E18,
  SCR_OPAQUE_STRING_gunship_damage = 0x3E1A,
  SCR_OPAQUE_STRING_gunship_line_attack = 0x3E1D,
  SCR_OPAQUE_STRING_gunship_line_attack_fake = 0x3E1F,
  SCR_OPAQUE_STRING_gunship_sparrow_platform_loop = 0x3E20,
  SCR_OPAQUE_STRING_gunship_trans_1 = 0x3E21,
  SCR_OPAQUE_STRING_gunship_trans_2 = 0x3E22,
  SCR_OPAQUE_STRING_gunship_trans_3 = 0x3E23,
  SCR_OPAQUE_STRING_gunship_trans_4 = 0x3E24,
  SCR_OPAQUE_STRING_guy1 = 0x3E28,
  SCR_OPAQUE_STRING_guy3 = 0x3E2A,
  SCR_OPAQUE_STRING_guy_cleanup_vehiclevars = 0x3E2E,
  SCR_OPAQUE_STRING_guy_death = 0x3E2F,
  SCR_OPAQUE_STRING_guy_deathhandle = 0x3E30,
  SCR_OPAQUE_STRING_guy_deathimate_me = 0x3E31,
  SCR_OPAQUE_STRING_guy_do_animation = 0x3E32,
  SCR_OPAQUE_STRING_guy_duck_once = 0x3E35,
  SCR_OPAQUE_STRING_guy_duck_out = 0x3E37,
  SCR_OPAQUE_STRING_guy_enter = 0x3E38,
  SCR_OPAQUE_STRING_guy_fridge_beers = 0x3E3A,
  SCR_OPAQUE_STRING_guy_goes_directly_to_turret = 0x3E3C,
  SCR_OPAQUE_STRING_guy_goes_to_struct_animates = 0x3E3D,
  SCR_OPAQUE_STRING_guy_idle_alert_to_casual = 0x3E43,
  SCR_OPAQUE_STRING_guy_runtovehicle_load = 0x3E4E,
  SCR_OPAQUE_STRING_guy_runtovehicle_loaded = 0x3E4F,
  SCR_OPAQUE_STRING_guy_should_man_turret = 0x3E52,
  SCR_OPAQUE_STRING_guy_turn_hardleft = 0x3E57,
  SCR_OPAQUE_STRING_guy_turn_left = 0x3E59,
  SCR_OPAQUE_STRING_guy_turn_right = 0x3E5B,
  SCR_OPAQUE_STRING_guy_turret_fire = 0x3E5D,
  SCR_OPAQUE_STRING_guy_turret_turnleft = 0x3E5E,
  SCR_OPAQUE_STRING_guy_unset_allowdeath = 0x3E63,
  SCR_OPAQUE_STRING_guy_weave = 0x3E66,
  SCR_OPAQUE_STRING_guy_weave_check = 0x3E67,
  SCR_OPAQUE_STRING_hacking_eyes_and_ears = 0x3E6C,
  SCR_OPAQUE_STRING_hacking_music = 0x3E6D,
  SCR_OPAQUE_STRING_halftimeroundenddelay = 0x3E71,
  SCR_OPAQUE_STRING_halftimesubcaption = 0x3E72,
  SCR_OPAQUE_STRING_hall_clear_vo = 0x3E75,
  SCR_OPAQUE_STRING_hall_redshirt_talk = 0x3E77,
  SCR_OPAQUE_STRING_hallway_crossing_middle = 0x3E7A,
  SCR_OPAQUE_STRING_hallway_encounter = 0x3E7C,
  SCR_OPAQUE_STRING_halon_system_fog_on = 0x3E85,
  SCR_OPAQUE_STRING_halon_system_killstreak = 0x3E86,
  SCR_OPAQUE_STRING_hand_icon = 0x3E8A,
  SCR_OPAQUE_STRING_hand_icon_count = 0x3E8B,
  SCR_OPAQUE_STRING_hand_icons = 0x3E90,
  SCR_OPAQUE_STRING_handle_ally_bag_vis = 0x3E95,
  SCR_OPAQUE_STRING_handle_ambush_return_spot = 0x3E98,
  SCR_OPAQUE_STRING_handle_approach_anims_end = 0x3E9B,
  SCR_OPAQUE_STRING_handle_autoturret_chatter = 0x3E9E,
  SCR_OPAQUE_STRING_handle_backpack_objective = 0x3EA0,
  SCR_OPAQUE_STRING_handle_baker_intro_anim = 0x3EA4,
  SCR_OPAQUE_STRING_handle_basement_guys2 = 0x3EA6,
  SCR_OPAQUE_STRING_handle_binocular_zoom_magnet = 0x3EAA,
  SCR_OPAQUE_STRING_handle_breach_door = 0x3EAE,
  SCR_OPAQUE_STRING_handle_cipher_intro_anim = 0x3EB4,
  SCR_OPAQUE_STRING_handle_combat_guys2 = 0x3EB9,
  SCR_OPAQUE_STRING_handle_cqb_pip_cams = 0x3EBD,
  SCR_OPAQUE_STRING_handle_death = 0x3EC2,
  SCR_OPAQUE_STRING_handle_delete = 0x3EC6,
  SCR_OPAQUE_STRING_handle_dismount = 0x3ECB,
  SCR_OPAQUE_STRING_handle_dog_ambush = 0x3ECC,
  SCR_OPAQUE_STRING_handle_dog_chaos = 0x3ECD,
  SCR_OPAQUE_STRING_handle_dog_combat_defend = 0x3ECF,
  SCR_OPAQUE_STRING_handle_dog_defend = 0x3ED1,
  SCR_OPAQUE_STRING_handle_dog_hud = 0x3ED3,
  SCR_OPAQUE_STRING_handle_dog_interior_attack = 0x3ED5,
  SCR_OPAQUE_STRING_handle_dog_modes = 0x3ED8,
  SCR_OPAQUE_STRING_handle_dog_targeting_chaos = 0x3ED9,
  SCR_OPAQUE_STRING_handle_dogbite_notetrack = 0x3EDB,
  SCR_OPAQUE_STRING_handle_drill_spot = 0x3EDC,
  SCR_OPAQUE_STRING_handle_drilling = 0x3EDD,
  SCR_OPAQUE_STRING_handle_drone = 0x3EDE,
  SCR_OPAQUE_STRING_handle_drone_nags = 0x3EDF,
  SCR_OPAQUE_STRING_handle_enemies_behind_player = 0x3EE1,
  SCR_OPAQUE_STRING_handle_exploders = 0x3EE6,
  SCR_OPAQUE_STRING_handle_finale_drones = 0x3EEB,
  SCR_OPAQUE_STRING_handle_first_doorway_allies = 0x3EEE,
  SCR_OPAQUE_STRING_handle_flare_slow = 0x3EEF,
  SCR_OPAQUE_STRING_handle_fog_changes = 0x3EF1,
  SCR_OPAQUE_STRING_handle_friendly_fail = 0x3EF2,
  SCR_OPAQUE_STRING_handle_front_elevator = 0x3EF3,
  SCR_OPAQUE_STRING_handle_ghost_chopper_removal = 0x3EF9,
  SCR_OPAQUE_STRING_handle_glowstick = 0x3EFA,
  SCR_OPAQUE_STRING_handle_grenade_thrown_failcase = 0x3EFD,
  SCR_OPAQUE_STRING_handle_gunner_pain = 0x3EFF,
  SCR_OPAQUE_STRING_handle_hesh_teleport = 0x3F00,
  SCR_OPAQUE_STRING_handle_intro_fx = 0x3F04,
  SCR_OPAQUE_STRING_handle_intro_sniper_outline = 0x3F05,
  SCR_OPAQUE_STRING_handle_jet3_fx = 0x3F0C,
  SCR_OPAQUE_STRING_handle_jet_taxi = 0x3F0F,
  SCR_OPAQUE_STRING_handle_keegan_intro_anim = 0x3F10,
  SCR_OPAQUE_STRING_handle_landing = 0x3F12,
  SCR_OPAQUE_STRING_handle_lights = 0x3F15,
  SCR_OPAQUE_STRING_handle_looper = 0x3F18,
  SCR_OPAQUE_STRING_handle_m32_launcher = 0x3F1B,
  SCR_OPAQUE_STRING_handle_mg_firing = 0x3F1C,
  SCR_OPAQUE_STRING_handle_moving_platform_invalid = 0x3F23,
  SCR_OPAQUE_STRING_handle_phys_debris = 0x3F2B,
  SCR_OPAQUE_STRING_handle_platform_blockers = 0x3F2E,
  SCR_OPAQUE_STRING_handle_radiotower_guy = 0x3F34,
  SCR_OPAQUE_STRING_handle_rappel_inverted = 0x3F38,
  SCR_OPAQUE_STRING_handle_rider_death = 0x3F3E,
  SCR_OPAQUE_STRING_handle_sentry_placement_failed = 0x3F45,
  SCR_OPAQUE_STRING_handle_shadow_kill = 0x3F46,
  SCR_OPAQUE_STRING_handle_skip_rpg_sniping = 0x3F47,
  SCR_OPAQUE_STRING_handle_sliding_osprey_fx = 0x3F48,
  SCR_OPAQUE_STRING_handle_slow_movement = 0x3F49,
  SCR_OPAQUE_STRING_handle_spotlight_enemy_b = 0x3F4C,
  SCR_OPAQUE_STRING_handle_stage_two_fx = 0x3F4D,
  SCR_OPAQUE_STRING_handle_stairs = 0x3F4E,
  SCR_OPAQUE_STRING_handle_starts = 0x3F4F,
  SCR_OPAQUE_STRING_handle_strobe_on_hint = 0x3F53,
  SCR_OPAQUE_STRING_handle_tank_death = 0x3F54,
  SCR_OPAQUE_STRING_handle_teargas_grenades = 0x3F57,
  SCR_OPAQUE_STRING_handle_truck_shooting = 0x3F5D,
  SCR_OPAQUE_STRING_handle_unresolved_collision = 0x3F60,
  SCR_OPAQUE_STRING_handle_vehicles_near_iceholes = 0x3F62,
  SCR_OPAQUE_STRING_handle_weapon_melee_toggle = 0x3F67,
  SCR_OPAQUE_STRING_handleapdamage = 0x3F6D,
  SCR_OPAQUE_STRING_handlebranchnode = 0x3F71,
  SCR_OPAQUE_STRING_handlecleanupputaway = 0x3F73,
  SCR_OPAQUE_STRING_handledeathdamage = 0x3F76,
  SCR_OPAQUE_STRING_handleemp = 0x3F7B,
  SCR_OPAQUE_STRING_handleempdamage = 0x3F7C,
  SCR_OPAQUE_STRING_handlefirstelitearrival = 0x3F7D,
  SCR_OPAQUE_STRING_handlefriendlyfiredeath = 0x3F7F,
  SCR_OPAQUE_STRING_handlegrenadedamage = 0x3F80,
  SCR_OPAQUE_STRING_handlehostmigration = 0x3F81,
  SCR_OPAQUE_STRING_handleinsolid = 0x3F84,
  SCR_OPAQUE_STRING_handlemeleedamage = 0x3F88,
  SCR_OPAQUE_STRING_handlenotetrack = 0x3F8C,
  SCR_OPAQUE_STRING_handleownerleft = 0x3F8F,
  SCR_OPAQUE_STRING_handlescavengerbagpickup = 0x3F96,
  SCR_OPAQUE_STRING_handlesidetosidenotetracks = 0x3F97,
  SCR_OPAQUE_STRING_handletraversedeathnotetrack = 0x3FA0,
  SCR_OPAQUE_STRING_handleunreslovedcollision = 0x3FA4,
  SCR_OPAQUE_STRING_handleuse = 0x3FA5,
  SCR_OPAQUE_STRING_handleworlddeath = 0x3FA7,
  SCR_OPAQUE_STRING_hangar_wall_debris = 0x3FB0,
  SCR_OPAQUE_STRING_hangar_wall_shot = 0x3FB2,
  SCR_OPAQUE_STRING_hanging_cargo_motion = 0x3FB9,
  SCR_OPAQUE_STRING_harassers_ignore_player = 0x3FBA,
  SCR_OPAQUE_STRING_hardcoremode = 0x3FBB,
  SCR_OPAQUE_STRING_hardpointtweaks = 0x3FBD,
  SCR_OPAQUE_STRING_hardpointtype = 0x3FBE,
  SCR_OPAQUE_STRING_harrierexplode = 0x3FC7,
  SCR_OPAQUE_STRING_harriers = 0x3FCA,
  SCR_OPAQUE_STRING_has_attack_abort_been_requested = 0x3FCF,
  SCR_OPAQUE_STRING_has_char_group = 0x3FD4,
  SCR_OPAQUE_STRING_has_cold_breath = 0x3FD5,
  SCR_OPAQUE_STRING_has_health_pack = 0x3FDB,
  SCR_OPAQUE_STRING_has_homing_missiles = 0x3FDD,
  SCR_OPAQUE_STRING_has_ims = 0x3FDE,
  SCR_OPAQUE_STRING_has_loadout = 0x3FE1,
  SCR_OPAQUE_STRING_has_model = 0x3FE3,
  SCR_OPAQUE_STRING_has_passive_breacher = 0x3FE5,
  SCR_OPAQUE_STRING_has_script_parameters = 0x3FEB,
  SCR_OPAQUE_STRING_has_special_weapon = 0x3FF0,
  SCR_OPAQUE_STRING_has_straight_missiles = 0x3FF1,
  SCR_OPAQUE_STRING_has_stun_ammo = 0x3FF2,
  SCR_OPAQUE_STRING_has_target_shader = 0x3FF3,
  SCR_OPAQUE_STRING_has_terrain = 0x3FF4,
  SCR_OPAQUE_STRING_has_weapon_variation = 0x3FF7,
  SCR_OPAQUE_STRING_hasattachedweapons = 0x3FFE,
  SCR_OPAQUE_STRING_hasdied = 0x4004,
  SCR_OPAQUE_STRING_hasdisplayvalue = 0x4005,
  SCR_OPAQUE_STRING_hasdonecombat = 0x4008,
  SCR_OPAQUE_STRING_hasenemysightpos = 0x400A,
  SCR_OPAQUE_STRING_hasexplosivefired = 0x400B,
  SCR_OPAQUE_STRING_hashelicopterdustkickup = 0x400E,
  SCR_OPAQUE_STRING_hashelicopterturret = 0x400F,
  SCR_OPAQUE_STRING_hashima = 0x4010,
  SCR_OPAQUE_STRING_hashimacustomcratefunc = 0x4012,
  SCR_OPAQUE_STRING_haslightarmor = 0x4019,
  SCR_OPAQUE_STRING_hasmissionhardenedaward = 0x401A,
  SCR_OPAQUE_STRING_hasprogressbar = 0x401E,
  SCR_OPAQUE_STRING_hasregenfaster = 0x401F,
  SCR_OPAQUE_STRING_hasriotshield = 0x4020,
  SCR_OPAQUE_STRING_hasspawned = 0x4023,
  SCR_OPAQUE_STRING_hasstarted = 0x4025,
  SCR_OPAQUE_STRING_hassuppressableenemy = 0x4026,
  SCR_OPAQUE_STRING_have_flashlight = 0x402F,
  SCR_OPAQUE_STRING_havenothingtoshoot = 0x4032,
  SCR_OPAQUE_STRING_hazmat_find_gun = 0x4035,
  SCR_OPAQUE_STRING_hazmat_if_hazmat = 0x4039,
  SCR_OPAQUE_STRING_hazmat_react = 0x403B,
  SCR_OPAQUE_STRING_hazmat_run_away = 0x403C,
  SCR_OPAQUE_STRING_hdrsuncolorintensity = 0x4042,
  SCR_OPAQUE_STRING_head_shield_activated = 0x4043,
  SCR_OPAQUE_STRING_heading = 0x4047,
  SCR_OPAQUE_STRING_headlamp_death_blink = 0x4049,
  SCR_OPAQUE_STRING_health_drain = 0x4050,
  SCR_OPAQUE_STRING_healthregen = 0x4058,
  SCR_OPAQUE_STRING_healthregendisabled = 0x405A,
  SCR_OPAQUE_STRING_healthregenerated_regularmp = 0x405C,
  SCR_OPAQUE_STRING_healthregeninit = 0x405F,
  SCR_OPAQUE_STRING_heartbeat_rumble = 0x4063,
  SCR_OPAQUE_STRING_heartbeatrate = 0x4064,
  SCR_OPAQUE_STRING_heat = 0x4065,
  SCR_OPAQUE_STRING_heat_column_fx = 0x4066,
  SCR_OPAQUE_STRING_heat_warn_toggle = 0x4069,
  SCR_OPAQUE_STRING_heatlevel = 0x406A,
  SCR_OPAQUE_STRING_heavy_quake = 0x406B,
  SCR_OPAQUE_STRING_heavyarmorhp = 0x406C,
  SCR_OPAQUE_STRING_heightforhighcallout = 0x406D,
  SCR_OPAQUE_STRING_heightrange = 0x406E,
  SCR_OPAQUE_STRING_heli = 0x406F,
  SCR_OPAQUE_STRING_heli_ai_can_hit_target = 0x4070,
  SCR_OPAQUE_STRING_heli_ai_collision_cylinder_setup = 0x4073,
  SCR_OPAQUE_STRING_heli_ai_gather_targets = 0x4074,
  SCR_OPAQUE_STRING_heli_ai_shoot_target = 0x4078,
  SCR_OPAQUE_STRING_heli_angle_offset = 0x407A,
  SCR_OPAQUE_STRING_heli_anims_length = 0x407C,
  SCR_OPAQUE_STRING_heli_array_setup = 0x407E,
  SCR_OPAQUE_STRING_heli_attack1 = 0x407F,
  SCR_OPAQUE_STRING_heli_attract_range = 0x4083,
  SCR_OPAQUE_STRING_heli_beach_lander_leave = 0x4089,
  SCR_OPAQUE_STRING_heli_can_see_target = 0x408C,
  SCR_OPAQUE_STRING_heli_chopper_impact = 0x408D,
  SCR_OPAQUE_STRING_heli_combat_path = 0x4093,
  SCR_OPAQUE_STRING_heli_combat_respawn = 0x4094,
  SCR_OPAQUE_STRING_heli_crash_blade_hit_2 = 0x4098,
  SCR_OPAQUE_STRING_heli_crash_box_hit_1 = 0x409B,
  SCR_OPAQUE_STRING_heli_crash_box_hit_2 = 0x409C,
  SCR_OPAQUE_STRING_heli_crash_engine_fail = 0x409D,
  SCR_OPAQUE_STRING_heli_crash_kill = 0x40A0,
  SCR_OPAQUE_STRING_heli_damage_update = 0x40A6,
  SCR_OPAQUE_STRING_heli_decides_to_shoot_missile_at_ai = 0x40A9,
  SCR_OPAQUE_STRING_heli_engine_lp_02 = 0x40B1,
  SCR_OPAQUE_STRING_heli_explode = 0x40B6,
  SCR_OPAQUE_STRING_heli_fire_turret = 0x40BA,
  SCR_OPAQUE_STRING_heli_firelink = 0x40BF,
  SCR_OPAQUE_STRING_heli_fireminigun_cheap = 0x40C0,
  SCR_OPAQUE_STRING_heli_firemissile_noexplode = 0x40C1,
  SCR_OPAQUE_STRING_heli_flock = 0x40C2,
  SCR_OPAQUE_STRING_heli_flock_victims = 0x40C3,
  SCR_OPAQUE_STRING_heli_flyin_mudpumps = 0x40CB,
  SCR_OPAQUE_STRING_heli_get_node_origin = 0x40D0,
  SCR_OPAQUE_STRING_heli_get_target_player_only = 0x40D3,
  SCR_OPAQUE_STRING_heli_goal_think = 0x40D5,
  SCR_OPAQUE_STRING_heli_jump_fire_fail = 0x40DE,
  SCR_OPAQUE_STRING_heli_leave_on_changeteams = 0x40E4,
  SCR_OPAQUE_STRING_heli_leave_on_disconnect = 0x40E5,
  SCR_OPAQUE_STRING_heli_leave_on_nuke = 0x40E7,
  SCR_OPAQUE_STRING_heli_loop_nodes = 0x40EC,
  SCR_OPAQUE_STRING_heli_loop_speed_control = 0x40EF,
  SCR_OPAQUE_STRING_heli_lp = 0x40F0,
  SCR_OPAQUE_STRING_heli_maxhealth = 0x40F1,
  SCR_OPAQUE_STRING_heli_pilot = 0x40FB,
  SCR_OPAQUE_STRING_heli_pilot_monitor_flares = 0x4100,
  SCR_OPAQUE_STRING_heli_pilot_pick_node = 0x4101,
  SCR_OPAQUE_STRING_heli_pilot_waittill_initial_goal = 0x4102,
  SCR_OPAQUE_STRING_heli_setup = 0x4108,
  SCR_OPAQUE_STRING_heli_shells = 0x4109,
  SCR_OPAQUE_STRING_heli_shoot_think = 0x410A,
  SCR_OPAQUE_STRING_heli_sniper_waittill_initial_goal = 0x410F,
  SCR_OPAQUE_STRING_heli_spawn = 0x4111,
  SCR_OPAQUE_STRING_heli_spotlight_cleanup = 0x4119,
  SCR_OPAQUE_STRING_heli_spotlight_think = 0x4121,
  SCR_OPAQUE_STRING_heli_strafing_run = 0x4125,
  SCR_OPAQUE_STRING_heli_strafing_think = 0x4126,
  SCR_OPAQUE_STRING_heli_targeting_delay = 0x4130,
  SCR_OPAQUE_STRING_heli_think = 0x4132,
  SCR_OPAQUE_STRING_heli_turret_think = 0x4136,
  SCR_OPAQUE_STRING_heli_type = 0x4139,
  SCR_OPAQUE_STRING_heli_vs_heli_mg_range_2d_squared = 0x413E,
  SCR_OPAQUE_STRING_heli_wait_node = 0x4140,
  SCR_OPAQUE_STRING_heliconfigs = 0x4145,
  SCR_OPAQUE_STRING_helicopter_crash = 0x4146,
  SCR_OPAQUE_STRING_helicopter_crash_flavor = 0x4148,
  SCR_OPAQUE_STRING_helicopter_crash_path = 0x414B,
  SCR_OPAQUE_STRING_helicopter_fail = 0x414E,
  SCR_OPAQUE_STRING_helicopter_jump = 0x4151,
  SCR_OPAQUE_STRING_helicopter_predator_target_shader = 0x4153,
  SCR_OPAQUE_STRING_helidialog = 0x4157,
  SCR_OPAQUE_STRING_heliguardsettings = 0x415B,
  SCR_OPAQUE_STRING_helileave = 0x415F,
  SCR_OPAQUE_STRING_helipickup = 0x4161,
  SCR_OPAQUE_STRING_helipilot_leave = 0x4166,
  SCR_OPAQUE_STRING_helipilot_setairstartnodes = 0x4168,
  SCR_OPAQUE_STRING_helipilot_watchdeath = 0x416A,
  SCR_OPAQUE_STRING_helipilot_watchownerloss = 0x416C,
  SCR_OPAQUE_STRING_helipilot_watchtimeout = 0x416E,
  SCR_OPAQUE_STRING_helipilotsettings = 0x416F,
  SCR_OPAQUE_STRING_helipilottype = 0x4170,
  SCR_OPAQUE_STRING_heliridelifeid = 0x4172,
  SCR_OPAQUE_STRING_helis_can_respawn = 0x4174,
  SCR_OPAQUE_STRING_helisniper = 0x4176,
  SCR_OPAQUE_STRING_helispawning = 0x4177,
  SCR_OPAQUE_STRING_helmet_damage_test = 0x417A,
  SCR_OPAQUE_STRING_helmet_swap_keegan = 0x417F,
  SCR_OPAQUE_STRING_helmetpop = 0x4181,
  SCR_OPAQUE_STRING_helmetsidemodel = 0x4182,
  SCR_OPAQUE_STRING_help_baker_control_panel_vo = 0x418B,
  SCR_OPAQUE_STRING_help_near_comps = 0x418C,
  SCR_OPAQUE_STRING_hero_train_impact = 0x4194,
  SCR_OPAQUE_STRING_heroonly = 0x4199,
  SCR_OPAQUE_STRING_hesco_logic = 0x419C,
  SCR_OPAQUE_STRING_hesh = 0x419F,
  SCR_OPAQUE_STRING_hesh_close_to_knockdown = 0x41A5,
  SCR_OPAQUE_STRING_hesh_dialogue_pacing = 0x41A9,
  SCR_OPAQUE_STRING_hesh_gate_logic = 0x41AE,
  SCR_OPAQUE_STRING_hesh_getin_truck = 0x41B0,
  SCR_OPAQUE_STRING_hesh_gunship_run = 0x41B1,
  SCR_OPAQUE_STRING_hesh_hide_dsm = 0x41B3,
  SCR_OPAQUE_STRING_hesh_logic = 0x41B9,
  SCR_OPAQUE_STRING_hesh_looks_at_cam = 0x41BA,
  SCR_OPAQUE_STRING_hesh_nag_til_flag = 0x41BE,
  SCR_OPAQUE_STRING_hesh_regroup_nag_vo = 0x41C1,
  SCR_OPAQUE_STRING_hesh_ride_chopper = 0x41C2,
  SCR_OPAQUE_STRING_hesh_waits_for_player = 0x41CA,
  SCR_OPAQUE_STRING_hidden_parts = 0x41CD,
  SCR_OPAQUE_STRING_hidden_terrain = 0x41D0,
  SCR_OPAQUE_STRING_hide_ai_sight_brushes = 0x41D1,
  SCR_OPAQUE_STRING_hide_and_drop_entity = 0x41D2,
  SCR_OPAQUE_STRING_hide_and_show = 0x41D3,
  SCR_OPAQUE_STRING_hide_bink_brush = 0x41D5,
  SCR_OPAQUE_STRING_hide_combat_two_intro_debris = 0x41D6,
  SCR_OPAQUE_STRING_hide_dufflebags = 0x41DA,
  SCR_OPAQUE_STRING_hide_end_bridge_geo = 0x41DB,
  SCR_OPAQUE_STRING_hide_exploder_models = 0x41DD,
  SCR_OPAQUE_STRING_hide_hint = 0x41E6,
  SCR_OPAQUE_STRING_hide_if_defined = 0x41E8,
  SCR_OPAQUE_STRING_hide_loco_exterior = 0x41EA,
  SCR_OPAQUE_STRING_hide_mask = 0x41EC,
  SCR_OPAQUE_STRING_hide_missile_launcher_collision = 0x41EE,
  SCR_OPAQUE_STRING_hide_models_by_targetname = 0x41EF,
  SCR_OPAQUE_STRING_hide_normal_hud_elements = 0x41F0,
  SCR_OPAQUE_STRING_hide_notsolid = 0x41F1,
  SCR_OPAQUE_STRING_hide_player_arms_sleeve_flaps = 0x41F3,
  SCR_OPAQUE_STRING_hide_turret = 0x41FA,
  SCR_OPAQUE_STRING_hide_turret_icon = 0x41FB,
  SCR_OPAQUE_STRING_hidecarryiconongameend = 0x4201,
  SCR_OPAQUE_STRING_hidehudelementongameend = 0x4207,
  SCR_OPAQUE_STRING_hidespendhinticon = 0x420C,
  SCR_OPAQUE_STRING_hideworldiconongameend = 0x420E,
  SCR_OPAQUE_STRING_hiding = 0x4210,
  SCR_OPAQUE_STRING_high_priority_for = 0x4213,
  SCR_OPAQUE_STRING_high_priority_hint = 0x4214,
  SCR_OPAQUE_STRING_highestwins = 0x4216,
  SCR_OPAQUE_STRING_highlightairdrop = 0x4217,
  SCR_OPAQUE_STRING_highlightallenemies = 0x4218,
  SCR_OPAQUE_STRING_highy = 0x421E,
  SCR_OPAQUE_STRING_hill_chopper = 0x4220,
  SCR_OPAQUE_STRING_hill_enemy_on_spotted = 0x4221,
  SCR_OPAQUE_STRING_hill_holders = 0x4224,
  SCR_OPAQUE_STRING_hill_squad = 0x4227,
  SCR_OPAQUE_STRING_hind_projectile_damagestate = 0x422C,
  SCR_OPAQUE_STRING_hint_active = 0x4230,
  SCR_OPAQUE_STRING_hint_ascend_func = 0x4231,
  SCR_OPAQUE_STRING_hint_breakfunc = 0x4235,
  SCR_OPAQUE_STRING_hint_bridge_2 = 0x4237,
  SCR_OPAQUE_STRING_hint_create = 0x423B,
  SCR_OPAQUE_STRING_hint_delete = 0x423D,
  SCR_OPAQUE_STRING_hint_fontscale = 0x4240,
  SCR_OPAQUE_STRING_hint_for_first_attack = 0x4241,
  SCR_OPAQUE_STRING_hint_guided_round_guiding_off = 0x4243,
  SCR_OPAQUE_STRING_hint_jump_off = 0x4244,
  SCR_OPAQUE_STRING_hint_machine_gun_off = 0x4246,
  SCR_OPAQUE_STRING_hint_missile_lock = 0x4247,
  SCR_OPAQUE_STRING_hint_neverbreak = 0x4248,
  SCR_OPAQUE_STRING_hint_smoke_off = 0x424C,
  SCR_OPAQUE_STRING_hint_timeout = 0x4252,
  SCR_OPAQUE_STRING_hint_toggle_thermal_off = 0x4253,
  SCR_OPAQUE_STRING_hint_zoom_off = 0x4256,
  SCR_OPAQUE_STRING_hintbackground = 0x4257,
  SCR_OPAQUE_STRING_hintbackground1 = 0x4258,
  SCR_OPAQUE_STRING_hintbackground2 = 0x4259,
  SCR_OPAQUE_STRING_hintexit = 0x425E,
  SCR_OPAQUE_STRING_hintmessage = 0x4260,
  SCR_OPAQUE_STRING_hit_bullet_armor = 0x426A,
  SCR_OPAQUE_STRING_hit_chain_dialogue = 0x426B,
  SCR_OPAQUE_STRING_hit_panel_rumble = 0x426F,
  SCR_OPAQUE_STRING_hit_player = 0x4270,
  SCR_OPAQUE_STRING_hit_surface = 0x4272,
  SCR_OPAQUE_STRING_hit_vo = 0x4273,
  SCR_OPAQUE_STRING_hitloc = 0x4277,
  SCR_OPAQUE_STRING_hitroundlimit = 0x427B,
  SCR_OPAQUE_STRING_hive_dependencies = 0x4284,
  SCR_OPAQUE_STRING_hive_drill_listener = 0x4285,
  SCR_OPAQUE_STRING_hive_outline_monitor = 0x4289,
  SCR_OPAQUE_STRING_hive_play_death_animations = 0x428D,
  SCR_OPAQUE_STRING_hive_play_first_pain_animations = 0x428F,
  SCR_OPAQUE_STRING_hive_play_second_pain_animations = 0x4290,
  SCR_OPAQUE_STRING_hive_score_bbprint = 0x4291,
  SCR_OPAQUE_STRING_hold_count_check = 0x4298,
  SCR_OPAQUE_STRING_hold_fire_unless_ads = 0x4299,
  SCR_OPAQUE_STRING_holdstancechange = 0x429D,
  SCR_OPAQUE_STRING_homecoming_locations = 0x42A0,
  SCR_OPAQUE_STRING_hopper_wheel_think = 0x42A5,
  SCR_OPAQUE_STRING_hordecrateperkthink = 0x42AB,
  SCR_OPAQUE_STRING_hordecrateweaponthink = 0x42AC,
  SCR_OPAQUE_STRING_hordedroplocations = 0x42AE,
  SCR_OPAQUE_STRING_hordeendgame = 0x42B0,
  SCR_OPAQUE_STRING_hordemaydropweapon = 0x42B4,
  SCR_OPAQUE_STRING_hordesetupdogstate = 0x42B5,
  SCR_OPAQUE_STRING_horn = 0x42B9,
  SCR_OPAQUE_STRING_hose_fx = 0x42BB,
  SCR_OPAQUE_STRING_hostage_b = 0x42BD,
  SCR_OPAQUE_STRING_hostage_fire_single_right = 0x42BF,
  SCR_OPAQUE_STRING_hostage_fire_spray = 0x42C0,
  SCR_OPAQUE_STRING_hostage_health_regen = 0x42C1,
  SCR_OPAQUE_STRING_hostilesspawned = 0x42C7,
  SCR_OPAQUE_STRING_hostmigrationtimer = 0x42CA,
  SCR_OPAQUE_STRING_hostmigrationtimerthink_internal = 0x42CC,
  SCR_OPAQUE_STRING_hotel_parking_car_hide = 0x42D0,
  SCR_OPAQUE_STRING_house_attack_slowmo = 0x42D2,
  SCR_OPAQUE_STRING_house_deer = 0x42D3,
  SCR_OPAQUE_STRING_house_enter = 0x42D4,
  SCR_OPAQUE_STRING_house_secondfloor_exploder = 0x42D9,
  SCR_OPAQUE_STRING_house_secondfloor_exploder_off = 0x42DA,
  SCR_OPAQUE_STRING_hovercraft_ai_pathstarts = 0x42DD,
  SCR_OPAQUE_STRING_hovercraft_artillery_incoming_missile = 0x42E0,
  SCR_OPAQUE_STRING_hovercraft_artillery_player_weapon = 0x42E1,
  SCR_OPAQUE_STRING_hovercraft_drone_fightspots = 0x42E8,
  SCR_OPAQUE_STRING_hovercraft_missile_barrage = 0x42EE,
  SCR_OPAQUE_STRING_hovercraft_missile_barrage_player = 0x42EF,
  SCR_OPAQUE_STRING_hovercraft_tanks_setup = 0x42F2,
  SCR_OPAQUE_STRING_hovercraftdroneunloader = 0x42FA,
  SCR_OPAQUE_STRING_hovercraftlanders = 0x42FB,
  SCR_OPAQUE_STRING_hovercraftsmokeents = 0x42FF,
  SCR_OPAQUE_STRING_hovercrafttanks = 0x4300,
  SCR_OPAQUE_STRING_hp = 0x4302,
  SCR_OPAQUE_STRING_hud = 0x4303,
  SCR_OPAQUE_STRING_hud2 = 0x4306,
  SCR_OPAQUE_STRING_hud_color_ally = 0x430C,
  SCR_OPAQUE_STRING_hud_compass_elem = 0x430D,
  SCR_OPAQUE_STRING_hud_countfree_flares = 0x430E,
  SCR_OPAQUE_STRING_hud_debug_add = 0x4311,
  SCR_OPAQUE_STRING_hud_debug_add_frac = 0x4313,
  SCR_OPAQUE_STRING_hud_debug_add_second_string = 0x4316,
  SCR_OPAQUE_STRING_hud_debug_add_string = 0x4317,
  SCR_OPAQUE_STRING_hud_enemy_missile_lockon = 0x431C,
  SCR_OPAQUE_STRING_hud_enemy_tracker = 0x431D,
  SCR_OPAQUE_STRING_hud_highlight_homing_missile = 0x4325,
  SCR_OPAQUE_STRING_hud_makenotavailable_availablemissileicon = 0x432D,
  SCR_OPAQUE_STRING_hud_mantle = 0x432F,
  SCR_OPAQUE_STRING_hud_markavailable_firstusedmissileicon = 0x4330,
  SCR_OPAQUE_STRING_hud_marklocked_firstavailablemissileicon = 0x4332,
  SCR_OPAQUE_STRING_hud_markunlocked_firstlockedmissileicon = 0x4333,
  SCR_OPAQUE_STRING_hud_markused_freemissileicon = 0x4335,
  SCR_OPAQUE_STRING_hud_mask_model = 0x4336,
  SCR_OPAQUE_STRING_hud_mg_inactive = 0x4338,
  SCR_OPAQUE_STRING_hud_missile_active = 0x4339,
  SCR_OPAQUE_STRING_hud_missile_warning = 0x433B,
  SCR_OPAQUE_STRING_hud_monitorplayerownership = 0x433C,
  SCR_OPAQUE_STRING_hud_offset = 0x433E,
  SCR_OPAQUE_STRING_hud_outlineenable_static = 0x4342,
  SCR_OPAQUE_STRING_hud_player_target_hide_at_min = 0x4344,
  SCR_OPAQUE_STRING_hud_scubamask = 0x4345,
  SCR_OPAQUE_STRING_hud_space_helmet_rim = 0x434D,
  SCR_OPAQUE_STRING_hud_start = 0x434E,
  SCR_OPAQUE_STRING_hud_static_overlay = 0x434F,
  SCR_OPAQUE_STRING_hud_update_speed = 0x4357,
  SCR_OPAQUE_STRING_huddelete = 0x435B,
  SCR_OPAQUE_STRING_hudelem_count = 0x435D,
  SCR_OPAQUE_STRING_hudelems = 0x4360,
  SCR_OPAQUE_STRING_huditemshide = 0x4362,
  SCR_OPAQUE_STRING_huditemsshow = 0x4363,
  SCR_OPAQUE_STRING_hudoutline_wait_death = 0x436A,
  SCR_OPAQUE_STRING_huds = 0x436B,
  SCR_OPAQUE_STRING_hudsetpoint_func = 0x436C,
  SCR_OPAQUE_STRING_hummer_spawn_func = 0x4373,
  SCR_OPAQUE_STRING_humvee_turret_guy_gettin_func = 0x4377,
  SCR_OPAQUE_STRING_hunted_style_door_open = 0x4379,
  SCR_OPAQUE_STRING_hurtgen_style = 0x437F,
  SCR_OPAQUE_STRING_hvt_dog_bark = 0x4380,
  SCR_OPAQUE_STRING_hvt_guys_in_position = 0x4382,
  SCR_OPAQUE_STRING_hvt_office_chair = 0x4385,
  SCR_OPAQUE_STRING_hvt_office_doors = 0x4386,
  SCR_OPAQUE_STRING_hvt_office_hesh = 0x4389,
  SCR_OPAQUE_STRING_hvt_office_hvt_death = 0x438B,
  SCR_OPAQUE_STRING_hvt_office_light = 0x438D,
  SCR_OPAQUE_STRING_hvt_office_merrick = 0x438E,
  SCR_OPAQUE_STRING_hvt_office_player = 0x438F,
  SCR_OPAQUE_STRING_hvt_office_props = 0x4390,
  SCR_OPAQUE_STRING_hvt_reach_and_animate = 0x4394,
  SCR_OPAQUE_STRING_icehole_achievement = 0x43A5,
  SCR_OPAQUE_STRING_icehole_shards = 0x43A7,
  SCR_OPAQUE_STRING_icon_always_show = 0x43AA,
  SCR_OPAQUE_STRING_icon_fade_in = 0x43AC,
  SCR_OPAQUE_STRING_icon_fade_out = 0x43AD,
  SCR_OPAQUE_STRING_icon_name = 0x43AE,
  SCR_OPAQUE_STRING_iconelem = 0x43B0,
  SCR_OPAQUE_STRING_iconvisall = 0x43B5,
  SCR_OPAQUE_STRING_idflags = 0x43B9,
  SCR_OPAQUE_STRING_idflags_no_knockback = 0x43BB,
  SCR_OPAQUE_STRING_idflags_penetration = 0x43BF,
  SCR_OPAQUE_STRING_idflags_shield_explosive_impact_huge = 0x43C2,
  SCR_OPAQUE_STRING_idle_break_anim_active = 0x43D0,
  SCR_OPAQUE_STRING_idle_hardleft = 0x43D3,
  SCR_OPAQUE_STRING_idle_reach_node = 0x43DA,
  SCR_OPAQUE_STRING_idle_right = 0x43DB,
  SCR_OPAQUE_STRING_idle_struct_animating_node = 0x43DD,
  SCR_OPAQUE_STRING_idleanim = 0x43DF,
  SCR_OPAQUE_STRING_idleanimtype = 0x43E0,
  SCR_OPAQUE_STRING_idlelookattargets = 0x43E2,
  SCR_OPAQUE_STRING_idleoccurrence = 0x43E3,
  SCR_OPAQUE_STRING_idlesound_waitfordoneordeath = 0x43E6,
  SCR_OPAQUE_STRING_idlewait = 0x43EC,
  SCR_OPAQUE_STRING_idlingatcover = 0x43EE,
  SCR_OPAQUE_STRING_iflashfuse = 0x43F2,
  SCR_OPAQUE_STRING_ignore_me_ignore_all = 0x43F7,
  SCR_OPAQUE_STRING_ignore_move_suppression = 0x43FB,
  SCR_OPAQUE_STRING_ignore_run = 0x4400,
  SCR_OPAQUE_STRING_ignoreall_false_end_anim = 0x4408,
  SCR_OPAQUE_STRING_ignoreall_on_end = 0x4409,
  SCR_OPAQUE_STRING_ignored_by_attack_heli = 0x440B,
  SCR_OPAQUE_STRING_ignoreeachother = 0x440D,
  SCR_OPAQUE_STRING_ignoreorigin = 0x440F,
  SCR_OPAQUE_STRING_ignoresightpos = 0x4412,
  SCR_OPAQUE_STRING_impact_loc = 0x4417,
  SCR_OPAQUE_STRING_impulse_push = 0x4421,
  SCR_OPAQUE_STRING_ims_handleownerdisconnect = 0x4428,
  SCR_OPAQUE_STRING_ims_hideallparts = 0x442A,
  SCR_OPAQUE_STRING_ims_modifydamage = 0x442B,
  SCR_OPAQUE_STRING_ims_oncarrierdeath = 0x442D,
  SCR_OPAQUE_STRING_ims_oncarrierdisconnect = 0x442E,
  SCR_OPAQUE_STRING_ims_setactive = 0x4433,
  SCR_OPAQUE_STRING_ims_setcancelled = 0x4434,
  SCR_OPAQUE_STRING_ims_setcarried = 0x4435,
  SCR_OPAQUE_STRING_imscreateexplosive = 0x443B,
  SCR_OPAQUE_STRING_imsopendoor = 0x4441,
  SCR_OPAQUE_STRING_in_alien_mode = 0x4445,
  SCR_OPAQUE_STRING_in_attack = 0x4446,
  SCR_OPAQUE_STRING_in_deathsdoor = 0x4448,
  SCR_OPAQUE_STRING_in_spawnspectator = 0x4450,
  SCR_OPAQUE_STRING_in_to_jeep = 0x4451,
  SCR_OPAQUE_STRING_in_world_area = 0x4454,
  SCR_OPAQUE_STRING_inairanimentry = 0x4458,
  SCR_OPAQUE_STRING_inboundsfx = 0x445A,
  SCR_OPAQUE_STRING_inc = 0x445C,
  SCR_OPAQUE_STRING_inc4death = 0x445D,
  SCR_OPAQUE_STRING_inc_escaped_stat = 0x4465,
  SCR_OPAQUE_STRING_inc_hives_destroyed_stat = 0x4466,
  SCR_OPAQUE_STRING_inc_prestige_nerfs_stat = 0x4468,
  SCR_OPAQUE_STRING_inc_score_stat = 0x446A,
  SCR_OPAQUE_STRING_inc_session_stat = 0x446B,
  SCR_OPAQUE_STRING_inc_stat = 0x446C,
  SCR_OPAQUE_STRING_inc_xp_stat = 0x446D,
  SCR_OPAQUE_STRING_incoming_sound = 0x4474,
  SCR_OPAQUE_STRING_incranimaimweight = 0x447C,
  SCR_OPAQUE_STRING_increase_difficulty = 0x447F,
  SCR_OPAQUE_STRING_increase_threatbias = 0x4481,
  SCR_OPAQUE_STRING_incrementalivecount = 0x4485,
  SCR_OPAQUE_STRING_index = 0x4489,
  SCR_OPAQUE_STRING_index_col = 0x448A,
  SCR_OPAQUE_STRING_index_is_selected = 0x448B,
  SCR_OPAQUE_STRING_index_map = 0x448C,
  SCR_OPAQUE_STRING_indexarray = 0x448D,
  SCR_OPAQUE_STRING_indexnumber = 0x448E,
  SCR_OPAQUE_STRING_indoor_think = 0x4490,
  SCR_OPAQUE_STRING_indoorcqbtogglecheck = 0x4491,
  SCR_OPAQUE_STRING_infantry_guys = 0x4492,
  SCR_OPAQUE_STRING_infantry_teleport_start = 0x4493,
  SCR_OPAQUE_STRING_infect_chosefirstinfected = 0x4497,
  SCR_OPAQUE_STRING_infil_allow_movement = 0x44A1,
  SCR_OPAQUE_STRING_infil_allowed_slide = 0x44A2,
  SCR_OPAQUE_STRING_infil_ally = 0x44A3,
  SCR_OPAQUE_STRING_infil_cleanup = 0x44A5,
  SCR_OPAQUE_STRING_infil_entry_lock = 0x44A7,
  SCR_OPAQUE_STRING_infil_explosions = 0x44A8,
  SCR_OPAQUE_STRING_infil_flyin_allies = 0x44A9,
  SCR_OPAQUE_STRING_infil_flyin_battle_init = 0x44AB,
  SCR_OPAQUE_STRING_infil_flyin_old = 0x44AC,
  SCR_OPAQUE_STRING_infil_grenade = 0x44B0,
  SCR_OPAQUE_STRING_infil_grenade_delete = 0x44B1,
  SCR_OPAQUE_STRING_infil_heli_anim_skip = 0x44B3,
  SCR_OPAQUE_STRING_infil_lights_and_vision = 0x44B7,
  SCR_OPAQUE_STRING_infil_movement_step = 0x44B8,
  SCR_OPAQUE_STRING_infil_object_hide = 0x44B9,
  SCR_OPAQUE_STRING_infil_path_offset = 0x44BC,
  SCR_OPAQUE_STRING_infil_rpg_guy = 0x44C4,
  SCR_OPAQUE_STRING_infil_sidestreet = 0x44C5,
  SCR_OPAQUE_STRING_infil_vignette = 0x44C8,
  SCR_OPAQUE_STRING_infinite_event_index = 0x44CD,
  SCR_OPAQUE_STRING_informattacking = 0x44D3,
  SCR_OPAQUE_STRING_informreloading = 0x44D6,
  SCR_OPAQUE_STRING_infront = 0x44DA,
  SCR_OPAQUE_STRING_init_a10 = 0x44E0,
  SCR_OPAQUE_STRING_init_ai_space_animsets = 0x44E2,
  SCR_OPAQUE_STRING_init_alien_idle = 0x44E7,
  SCR_OPAQUE_STRING_init_ambient = 0x44E9,
  SCR_OPAQUE_STRING_init_animated_dufflebags_baker = 0x44ED,
  SCR_OPAQUE_STRING_init_animated_dufflebags_candk = 0x44EE,
  SCR_OPAQUE_STRING_init_animatedmodels = 0x44EF,
  SCR_OPAQUE_STRING_init_anims_human = 0x44F1,
  SCR_OPAQUE_STRING_init_anims_player = 0x44F2,
  SCR_OPAQUE_STRING_init_animset_ambush = 0x44F3,
  SCR_OPAQUE_STRING_init_animset_combat = 0x44F4,
  SCR_OPAQUE_STRING_init_animset_cover_multi = 0x44F8,
  SCR_OPAQUE_STRING_init_animset_cover_right = 0x44FA,
  SCR_OPAQUE_STRING_init_animset_cover_wall = 0x44FB,
  SCR_OPAQUE_STRING_init_animset_cqb_move = 0x44FC,
  SCR_OPAQUE_STRING_init_animset_cqb_stand = 0x44FD,
  SCR_OPAQUE_STRING_init_animset_custom_stand = 0x44FF,
  SCR_OPAQUE_STRING_init_animset_death = 0x4500,
  SCR_OPAQUE_STRING_init_animset_default_crouch = 0x4501,
  SCR_OPAQUE_STRING_init_animset_flashed = 0x4504,
  SCR_OPAQUE_STRING_init_animset_heat_stand = 0x4507,
  SCR_OPAQUE_STRING_init_animset_idle = 0x4508,
  SCR_OPAQUE_STRING_init_animset_pain = 0x450B,
  SCR_OPAQUE_STRING_init_animset_reactions = 0x450D,
  SCR_OPAQUE_STRING_init_animset_rpg_crouch = 0x450E,
  SCR_OPAQUE_STRING_init_animset_shotgun_stand = 0x4513,
  SCR_OPAQUE_STRING_init_animsounds_for_animname = 0x4516,
  SCR_OPAQUE_STRING_init_audio = 0x4518,
  SCR_OPAQUE_STRING_init_biasgroups = 0x451B,
  SCR_OPAQUE_STRING_init_blocker_hive_animation_state = 0x451C,
  SCR_OPAQUE_STRING_init_bot_attachmenttable = 0x451D,
  SCR_OPAQUE_STRING_init_challenge_type = 0x4522,
  SCR_OPAQUE_STRING_init_chaos_animset = 0x4524,
  SCR_OPAQUE_STRING_init_color_grouping = 0x4527,
  SCR_OPAQUE_STRING_init_color_helper_triggers = 0x4528,
  SCR_OPAQUE_STRING_init_colors = 0x452A,
  SCR_OPAQUE_STRING_init_combat_resource_from_table = 0x452C,
  SCR_OPAQUE_STRING_init_combat_resource_overrides = 0x452E,
  SCR_OPAQUE_STRING_init_combat_resources = 0x452F,
  SCR_OPAQUE_STRING_init_creepwalk_archetype = 0x4531,
  SCR_OPAQUE_STRING_init_dam_destruction_anim = 0x4533,
  SCR_OPAQUE_STRING_init_damage_feedback = 0x4534,
  SCR_OPAQUE_STRING_init_dog_anims = 0x453B,
  SCR_OPAQUE_STRING_init_drill_drop_loc = 0x453E,
  SCR_OPAQUE_STRING_init_filter = 0x4547,
  SCR_OPAQUE_STRING_init_fog_transition = 0x454B,
  SCR_OPAQUE_STRING_init_fx = 0x454D,
  SCR_OPAQUE_STRING_init_gamescore = 0x454F,
  SCR_OPAQUE_STRING_init_helicopters = 0x4552,
  SCR_OPAQUE_STRING_init_helo = 0x4553,
  SCR_OPAQUE_STRING_init_hive_locs = 0x4558,
  SCR_OPAQUE_STRING_init_hover = 0x4559,
  SCR_OPAQUE_STRING_init_levelvariables = 0x4563,
  SCR_OPAQUE_STRING_init_light_def = 0x4564,
  SCR_OPAQUE_STRING_init_lights = 0x4565,
  SCR_OPAQUE_STRING_init_lit_model = 0x4567,
  SCR_OPAQUE_STRING_init_localoilrocks = 0x456A,
  SCR_OPAQUE_STRING_init_mgturretsettings = 0x456E,
  SCR_OPAQUE_STRING_init_mix = 0x4570,
  SCR_OPAQUE_STRING_init_move_transition_arrays = 0x4571,
  SCR_OPAQUE_STRING_init_occlusion = 0x4577,
  SCR_OPAQUE_STRING_init_patrol_paths = 0x4579,
  SCR_OPAQUE_STRING_init_perk_bullet_damage = 0x457A,
  SCR_OPAQUE_STRING_init_perks = 0x4580,
  SCR_OPAQUE_STRING_init_perks_callback = 0x4581,
  SCR_OPAQUE_STRING_init_personality_camper = 0x4584,
  SCR_OPAQUE_STRING_init_player_hud_onconnect = 0x458A,
  SCR_OPAQUE_STRING_init_player_limp = 0x458B,
  SCR_OPAQUE_STRING_init_player_rig = 0x458E,
  SCR_OPAQUE_STRING_init_player_score = 0x458F,
  SCR_OPAQUE_STRING_init_player_space = 0x4590,
  SCR_OPAQUE_STRING_init_player_unlock = 0x4594,
  SCR_OPAQUE_STRING_init_post_main = 0x4595,
  SCR_OPAQUE_STRING_init_radio_dialogue = 0x4597,
  SCR_OPAQUE_STRING_init_reverb = 0x4599,
  SCR_OPAQUE_STRING_init_screeneffect_vars = 0x459D,
  SCR_OPAQUE_STRING_init_scripted_light = 0x45A0,
  SCR_OPAQUE_STRING_init_shooter = 0x45A4,
  SCR_OPAQUE_STRING_init_shooter_anims = 0x45A5,
  SCR_OPAQUE_STRING_init_spawn_node_info = 0x45AC,
  SCR_OPAQUE_STRING_init_squadbattlechatter = 0x45AE,
  SCR_OPAQUE_STRING_init_take_cover_warnings = 0x45B7,
  SCR_OPAQUE_STRING_init_threatbiasgroups = 0x45BC,
  SCR_OPAQUE_STRING_init_tracks = 0x45C1,
  SCR_OPAQUE_STRING_init_tunnel = 0x45C3,
  SCR_OPAQUE_STRING_init_uphill_jog_animset = 0x45C6,
  SCR_OPAQUE_STRING_init_vehicles = 0x45C9,
  SCR_OPAQUE_STRING_init_vo_system = 0x45CC,
  SCR_OPAQUE_STRING_init_whizby = 0x45CF,
  SCR_OPAQUE_STRING_init_wind_if_uninitialized = 0x45D0,
  SCR_OPAQUE_STRING_initactivisioncredits = 0x45D3,
  SCR_OPAQUE_STRING_initalienanims = 0x45D8,
  SCR_OPAQUE_STRING_initaliencannedtraverses = 0x45D9,
  SCR_OPAQUE_STRING_initaliendeath = 0x45DA,
  SCR_OPAQUE_STRING_initalienvosystem = 0x45DD,
  SCR_OPAQUE_STRING_initanimtree = 0x45E0,
  SCR_OPAQUE_STRING_initatvicredits_blade = 0x45E2,
  SCR_OPAQUE_STRING_initatvicredits_central_tech = 0x45E4,
  SCR_OPAQUE_STRING_initatvicredits_global = 0x45E8,
  SCR_OPAQUE_STRING_initatvicredits_qa1 = 0x45EA,
  SCR_OPAQUE_STRING_initatvicredits_qa2 = 0x45EB,
  SCR_OPAQUE_STRING_initbaseaward = 0x45F1,
  SCR_OPAQUE_STRING_initbattlechatter = 0x45F2,
  SCR_OPAQUE_STRING_initbombsquaddata = 0x45F3,
  SCR_OPAQUE_STRING_initcharacterface = 0x45F7,
  SCR_OPAQUE_STRING_initcontact = 0x45FB,
  SCR_OPAQUE_STRING_initdoganimations = 0x4601,
  SCR_OPAQUE_STRING_initdogarchetype_reaction = 0x4605,
  SCR_OPAQUE_STRING_initdogvestanimations = 0x4608,
  SCR_OPAQUE_STRING_initdot = 0x4609,
  SCR_OPAQUE_STRING_initgameflags = 0x4610,
  SCR_OPAQUE_STRING_initglobals = 0x4612,
  SCR_OPAQUE_STRING_inithandsignals = 0x4615,
  SCR_OPAQUE_STRING_inithordesettings = 0x4616,
  SCR_OPAQUE_STRING_initial_dist_z_from_top = 0x4619,
  SCR_OPAQUE_STRING_initial_edge_ally_left = 0x461B,
  SCR_OPAQUE_STRING_initial_spawn = 0x461E,
  SCR_OPAQUE_STRING_initialdelay = 0x4620,
  SCR_OPAQUE_STRING_initialdmscoreupdate = 0x4621,
  SCR_OPAQUE_STRING_initializematchrules = 0x4628,
  SCR_OPAQUE_STRING_initiated = 0x462A,
  SCR_OPAQUE_STRING_initinsertionvehicles = 0x462B,
  SCR_OPAQUE_STRING_initiw6atvicredits = 0x462D,
  SCR_OPAQUE_STRING_initiw6credits = 0x462E,
  SCR_OPAQUE_STRING_initlevelflags = 0x4634,
  SCR_OPAQUE_STRING_initmovestartstoptransitions = 0x4637,
  SCR_OPAQUE_STRING_initpainfx = 0x463C,
  SCR_OPAQUE_STRING_initplayerstat = 0x4643,
  SCR_OPAQUE_STRING_initplayerstats = 0x4644,
  SCR_OPAQUE_STRING_initprisonerloadout = 0x4646,
  SCR_OPAQUE_STRING_initridekillstreak_internal = 0x464A,
  SCR_OPAQUE_STRING_initscoreboard = 0x464C,
  SCR_OPAQUE_STRING_initspawns = 0x4650,
  SCR_OPAQUE_STRING_initstat = 0x4651,
  SCR_OPAQUE_STRING_initstate = 0x4653,
  SCR_OPAQUE_STRING_initweapon = 0x4659,
  SCR_OPAQUE_STRING_initwindowtraverse = 0x465A,
  SCR_OPAQUE_STRING_inovertime = 0x465C,
  SCR_OPAQUE_STRING_inplayerportableradar = 0x465D,
  SCR_OPAQUE_STRING_inplayerscrambler = 0x465E,
  SCR_OPAQUE_STRING_insyncmeleewithtarget = 0x4674,
  SCR_OPAQUE_STRING_intel_items = 0x4677,
  SCR_OPAQUE_STRING_intel_think = 0x4678,
  SCR_OPAQUE_STRING_intelcrouchkillschallenge = 0x467E,
  SCR_OPAQUE_STRING_intelfoundshotkillschallenge = 0x4684,
  SCR_OPAQUE_STRING_intelheadshotchallenge = 0x4685,
  SCR_OPAQUE_STRING_intelknifekillchallenge = 0x4689,
  SCR_OPAQUE_STRING_intelminigun = 0x468A,
  SCR_OPAQUE_STRING_intelteammelee = 0x4693,
  SCR_OPAQUE_STRING_intelteamreward = 0x4694,
  SCR_OPAQUE_STRING_intensity = 0x4696,
  SCR_OPAQUE_STRING_intensity_monitor_update_loop = 0x4697,
  SCR_OPAQUE_STRING_intensity_spawning_paused_count = 0x4699,
  SCR_OPAQUE_STRING_intensitylevels = 0x469A,
  SCR_OPAQUE_STRING_interactive_number = 0x469E,
  SCR_OPAQUE_STRING_interactive_tv = 0x46A0,
  SCR_OPAQUE_STRING_intermission_vo = 0x46AD,
  SCR_OPAQUE_STRING_internalmain = 0x46AE,
  SCR_OPAQUE_STRING_interrupt_level = 0x46B5,
  SCR_OPAQUE_STRING_intro_agent = 0x46C0,
  SCR_OPAQUE_STRING_intro_allies_killed_by_mig = 0x46C1,
  SCR_OPAQUE_STRING_intro_ally_idle = 0x46C3,
  SCR_OPAQUE_STRING_intro_ambush_vo = 0x46C4,
  SCR_OPAQUE_STRING_intro_and_crash_site_ally_setup = 0x46C5,
  SCR_OPAQUE_STRING_intro_anim_from_keegan = 0x46C8,
  SCR_OPAQUE_STRING_intro_binocs_not_target_vo = 0x46D7,
  SCR_OPAQUE_STRING_intro_binocs_oracle_scanning_vo = 0x46D8,
  SCR_OPAQUE_STRING_intro_binocular_monitor = 0x46D9,
  SCR_OPAQUE_STRING_intro_binoculars_use_hint = 0x46DD,
  SCR_OPAQUE_STRING_intro_birds = 0x46DF,
  SCR_OPAQUE_STRING_intro_bunker_house_runners = 0x46E4,
  SCR_OPAQUE_STRING_intro_bunker_turrets = 0x46E5,
  SCR_OPAQUE_STRING_intro_check_binocular_activate = 0x46EB,
  SCR_OPAQUE_STRING_intro_check_binocular_deactivate = 0x46EC,
  SCR_OPAQUE_STRING_intro_check_binocular_range = 0x46ED,
  SCR_OPAQUE_STRING_intro_check_binocular_zoom = 0x46EF,
  SCR_OPAQUE_STRING_intro_chopper_fx = 0x46F1,
  SCR_OPAQUE_STRING_intro_cleanup = 0x46F3,
  SCR_OPAQUE_STRING_intro_cliff_tanks = 0x46F4,
  SCR_OPAQUE_STRING_intro_dialogue_2 = 0x46FC,
  SCR_OPAQUE_STRING_intro_dof = 0x46FF,
  SCR_OPAQUE_STRING_intro_drive = 0x4703,
  SCR_OPAQUE_STRING_intro_enemy11 = 0x4707,
  SCR_OPAQUE_STRING_intro_enemy2 = 0x4709,
  SCR_OPAQUE_STRING_intro_enemy5 = 0x470B,
  SCR_OPAQUE_STRING_intro_enemy_scene = 0x470F,
  SCR_OPAQUE_STRING_intro_ent_del = 0x4711,
  SCR_OPAQUE_STRING_intro_explosion2 = 0x4713,
  SCR_OPAQUE_STRING_intro_fake_mortars = 0x4714,
  SCR_OPAQUE_STRING_intro_flavorburst = 0x4715,
  SCR_OPAQUE_STRING_intro_flyby_a10 = 0x4716,
  SCR_OPAQUE_STRING_intro_helis_overhead = 0x4721,
  SCR_OPAQUE_STRING_intro_house_blocker_truck = 0x4726,
  SCR_OPAQUE_STRING_intro_logic = 0x472B,
  SCR_OPAQUE_STRING_intro_main = 0x472C,
  SCR_OPAQUE_STRING_intro_mask = 0x472D,
  SCR_OPAQUE_STRING_intro_masks = 0x472E,
  SCR_OPAQUE_STRING_intro_medic_osprey = 0x472F,
  SCR_OPAQUE_STRING_intro_offse = 0x4733,
  SCR_OPAQUE_STRING_intro_overlook_static = 0x4736,
  SCR_OPAQUE_STRING_intro_player_blur = 0x4739,
  SCR_OPAQUE_STRING_intro_player_goggles_watersheeting_fx = 0x473A,
  SCR_OPAQUE_STRING_intro_prep_vip_heli = 0x473D,
  SCR_OPAQUE_STRING_intro_rorke_gun = 0x4748,
  SCR_OPAQUE_STRING_intro_runners = 0x474A,
  SCR_OPAQUE_STRING_intro_save_check = 0x474B,
  SCR_OPAQUE_STRING_intro_screen_custom_timing = 0x4750,
  SCR_OPAQUE_STRING_intro_scripted_audio_fade_in_mixing = 0x4752,
  SCR_OPAQUE_STRING_intro_scripted_sequence = 0x4753,
  SCR_OPAQUE_STRING_intro_sequence_precache = 0x4757,
  SCR_OPAQUE_STRING_intro_sequence_street = 0x4758,
  SCR_OPAQUE_STRING_intro_setup = 0x4759,
  SCR_OPAQUE_STRING_intro_street_abrams = 0x4762,
  SCR_OPAQUE_STRING_intro_street_drones = 0x4764,
  SCR_OPAQUE_STRING_intro_tank_foley = 0x4767,
  SCR_OPAQUE_STRING_intro_target_monitor = 0x4768,
  SCR_OPAQUE_STRING_intro_transport_mover = 0x476A,
  SCR_OPAQUE_STRING_intro_turn_off_prop_bm21_1_lights_fx = 0x476B,
  SCR_OPAQUE_STRING_intro_watch = 0x4779,
  SCR_OPAQUE_STRING_introcp_guy_radio = 0x477A,
  SCR_OPAQUE_STRING_introcp_guys_remaining = 0x477B,
  SCR_OPAQUE_STRING_introcp_guys_tower = 0x477C,
  SCR_OPAQUE_STRING_introscreen = 0x477D,
  SCR_OPAQUE_STRING_introscreen_generic_fade_in_on_flag = 0x4786,
  SCR_OPAQUE_STRING_introscreen_line_1 = 0x4788,
  SCR_OPAQUE_STRING_introscreen_line_4 = 0x478B,
  SCR_OPAQUE_STRING_invasion_door_anim = 0x4792,
  SCR_OPAQUE_STRING_inventory = 0x4794,
  SCR_OPAQUE_STRING_inverted_rappel = 0x47A0,
  SCR_OPAQUE_STRING_inverted_rappel_ally_idles = 0x47A1,
  SCR_OPAQUE_STRING_inverted_rappel_ally_movement = 0x47A2,
  SCR_OPAQUE_STRING_inverted_rappel_movement_rorke = 0x47A5,
  SCR_OPAQUE_STRING_invincible = 0x47A8,
  SCR_OPAQUE_STRING_iplane_start = 0x47B2,
  SCR_OPAQUE_STRING_iplane_start_dialogue = 0x47B3,
  SCR_OPAQUE_STRING_is3d = 0x47B5,
  SCR_OPAQUE_STRING_is_alien_agent = 0x47BA,
  SCR_OPAQUE_STRING_is_ambience_blend_valid = 0x47BC,
  SCR_OPAQUE_STRING_is_apache_player = 0x47BF,
  SCR_OPAQUE_STRING_is_array_close = 0x47C0,
  SCR_OPAQUE_STRING_is_blocker_hive = 0x47C4,
  SCR_OPAQUE_STRING_is_burning = 0x47C7,
  SCR_OPAQUE_STRING_is_currently_mg_target = 0x47D4,
  SCR_OPAQUE_STRING_is_dead_sentient = 0x47D9,
  SCR_OPAQUE_STRING_is_dog_really_attacking = 0x47E0,
  SCR_OPAQUE_STRING_is_drop_button_pressed = 0x47E2,
  SCR_OPAQUE_STRING_is_dynamic_path = 0x47E6,
  SCR_OPAQUE_STRING_is_empty_string = 0x47E9,
  SCR_OPAQUE_STRING_is_escape_sequence_active = 0x47EB,
  SCR_OPAQUE_STRING_is_exploding = 0x47EC,
  SCR_OPAQUE_STRING_is_fake_zodiac = 0x47EF,
  SCR_OPAQUE_STRING_is_firing = 0x47F0,
  SCR_OPAQUE_STRING_is_first = 0x47F1,
  SCR_OPAQUE_STRING_is_frag_grenade = 0x47F3,
  SCR_OPAQUE_STRING_is_godmode = 0x47F9,
  SCR_OPAQUE_STRING_is_hero_ai = 0x47FC,
  SCR_OPAQUE_STRING_is_in_upload = 0x4807,
  SCR_OPAQUE_STRING_is_indoor_map = 0x4808,
  SCR_OPAQUE_STRING_is_lastblast = 0x480B,
  SCR_OPAQUE_STRING_is_later_in_alphabet = 0x480C,
  SCR_OPAQUE_STRING_is_locked = 0x480F,
  SCR_OPAQUE_STRING_is_moving = 0x4811,
  SCR_OPAQUE_STRING_is_no_nerf = 0x4814,
  SCR_OPAQUE_STRING_is_normal_upright = 0x4817,
  SCR_OPAQUE_STRING_is_on_heli = 0x481A,
  SCR_OPAQUE_STRING_is_overrode = 0x481D,
  SCR_OPAQUE_STRING_is_path_start_node = 0x4822,
  SCR_OPAQUE_STRING_is_perk_set = 0x4823,
  SCR_OPAQUE_STRING_is_player_right = 0x482B,
  SCR_OPAQUE_STRING_is_playing_initial_blocker_anim = 0x482D,
  SCR_OPAQUE_STRING_is_precalculated_entrance = 0x4830,
  SCR_OPAQUE_STRING_is_resource_set = 0x4833,
  SCR_OPAQUE_STRING_is_rider = 0x4834,
  SCR_OPAQUE_STRING_is_spawn_debug_info_requested = 0x483E,
  SCR_OPAQUE_STRING_is_spitter_spit = 0x4842,
  SCR_OPAQUE_STRING_is_survival = 0x4844,
  SCR_OPAQUE_STRING_is_targeting = 0x4846,
  SCR_OPAQUE_STRING_is_turret_enabled = 0x484B,
  SCR_OPAQUE_STRING_is_valid_spit_target = 0x4858,
  SCR_OPAQUE_STRING_is_visable = 0x485D,
  SCR_OPAQUE_STRING_isactive = 0x4860,
  SCR_OPAQUE_STRING_isagent = 0x4865,
  SCR_OPAQUE_STRING_isaifunc = 0x4866,
  SCR_OPAQUE_STRING_isaigameparticipant = 0x4867,
  SCR_OPAQUE_STRING_isairdenied = 0x4868,
  SCR_OPAQUE_STRING_isairdropmarker = 0x486A,
  SCR_OPAQUE_STRING_isairplane = 0x486B,
  SCR_OPAQUE_STRING_isanymissilefiredonme = 0x4876,
  SCR_OPAQUE_STRING_isassaultkillstreak = 0x4878,
  SCR_OPAQUE_STRING_isatmost = 0x487B,
  SCR_OPAQUE_STRING_isattachment = 0x487D,
  SCR_OPAQUE_STRING_isattachmentsniperscopedefaulttokenized = 0x487F,
  SCR_OPAQUE_STRING_isattachmentunlocked = 0x4880,
  SCR_OPAQUE_STRING_isawardexclusive = 0x4885,
  SCR_OPAQUE_STRING_isawardflag = 0x4886,
  SCR_OPAQUE_STRING_isbombcarrier = 0x4887,
  SCR_OPAQUE_STRING_isbreaching = 0x488A,
  SCR_OPAQUE_STRING_isbulletweapon = 0x488E,
  SCR_OPAQUE_STRING_iscacprimaryweapon = 0x488F,
  SCR_OPAQUE_STRING_iscallouttypereport = 0x4893,
  SCR_OPAQUE_STRING_iscapturingcrate = 0x4895,
  SCR_OPAQUE_STRING_ischallengeunlocked = 0x4898,
  SCR_OPAQUE_STRING_ischeap = 0x489A,
  SCR_OPAQUE_STRING_iscqbwalkingorfacingenemy = 0x48A1,
  SCR_OPAQUE_STRING_iscurrentlyholdingkillstreakweapon = 0x48A4,
  SCR_OPAQUE_STRING_isdefusing = 0x48A8,
  SCR_OPAQUE_STRING_isdestructibleweapon = 0x48AD,
  SCR_OPAQUE_STRING_isdrone = 0x48B0,
  SCR_OPAQUE_STRING_isexposed = 0x48BB,
  SCR_OPAQUE_STRING_isfacing = 0x48BC,
  SCR_OPAQUE_STRING_isferal = 0x48BD,
  SCR_OPAQUE_STRING_isflashed = 0x48C4,
  SCR_OPAQUE_STRING_isflashing = 0x48C5,
  SCR_OPAQUE_STRING_isfmjdamage = 0x48C8,
  SCR_OPAQUE_STRING_isfriendlyteam = 0x48CA,
  SCR_OPAQUE_STRING_isfriendlytoims = 0x48CC,
  SCR_OPAQUE_STRING_ishackweapon = 0x48D1,
  SCR_OPAQUE_STRING_ishelicopter = 0x48D5,
  SCR_OPAQUE_STRING_isincontact = 0x48DF,
  SCR_OPAQUE_STRING_isinset = 0x48E5,
  SCR_OPAQUE_STRING_isinzone = 0x48E8,
  SCR_OPAQUE_STRING_isitem = 0x48E9,
  SCR_OPAQUE_STRING_iskillstreakaffectedbyjammer = 0x48F4,
  SCR_OPAQUE_STRING_iskillstreakchallenge = 0x48F5,
  SCR_OPAQUE_STRING_isknifeonly = 0x48F8,
  SCR_OPAQUE_STRING_islaserguidedmissile = 0x48FE,
  SCR_OPAQUE_STRING_islastround = 0x4901,
  SCR_OPAQUE_STRING_islockedontarget = 0x4906,
  SCR_OPAQUE_STRING_islongrangeai = 0x4907,
  SCR_OPAQUE_STRING_isloot = 0x490A,
  SCR_OPAQUE_STRING_ismembersaying = 0x490D,
  SCR_OPAQUE_STRING_ismidstarted = 0x490E,
  SCR_OPAQUE_STRING_isminitarget = 0x490F,
  SCR_OPAQUE_STRING_ismoving = 0x4913,
  SCR_OPAQUE_STRING_isoffhandweapon = 0x491E,
  SCR_OPAQUE_STRING_isoffhandweaponenabled = 0x491F,
  SCR_OPAQUE_STRING_isonemanarmymenu = 0x4921,
  SCR_OPAQUE_STRING_isonhumanteam = 0x4922,
  SCR_OPAQUE_STRING_ispainted = 0x4925,
  SCR_OPAQUE_STRING_ispartiallysuppressedwrapper = 0x4926,
  SCR_OPAQUE_STRING_ispathclear = 0x4927,
  SCR_OPAQUE_STRING_ispeekoutposclear = 0x492A,
  SCR_OPAQUE_STRING_isperk = 0x492C,
  SCR_OPAQUE_STRING_isperkstreakon = 0x492D,
  SCR_OPAQUE_STRING_isplanting = 0x4930,
  SCR_OPAQUE_STRING_isplayeroutsideofanybombsite = 0x4936,
  SCR_OPAQUE_STRING_isplayertimer = 0x4937,
  SCR_OPAQUE_STRING_isprimaryweapon = 0x493E,
  SCR_OPAQUE_STRING_israppelshooting = 0x4941,
  SCR_OPAQUE_STRING_isreactivated = 0x4942,
  SCR_OPAQUE_STRING_isreactivating = 0x4943,
  SCR_OPAQUE_STRING_isrelativeteam = 0x4947,
  SCR_OPAQUE_STRING_isreloading = 0x4948,
  SCR_OPAQUE_STRING_isrepairing = 0x4949,
  SCR_OPAQUE_STRING_isscoring = 0x4954,
  SCR_OPAQUE_STRING_isscriptmodel = 0x4955,
  SCR_OPAQUE_STRING_issentient = 0x4957,
  SCR_OPAQUE_STRING_issentrygun = 0x4959,
  SCR_OPAQUE_STRING_issetup = 0x495A,
  SCR_OPAQUE_STRING_isshooting = 0x495B,
  SCR_OPAQUE_STRING_isshotgun = 0x495C,
  SCR_OPAQUE_STRING_isshotgunai = 0x495D,
  SCR_OPAQUE_STRING_issidearm = 0x495F,
  SCR_OPAQUE_STRING_issliding = 0x4960,
  SCR_OPAQUE_STRING_issniperrifle = 0x4962,
  SCR_OPAQUE_STRING_issp_towerdefense = 0x4964,
  SCR_OPAQUE_STRING_isspeakerinrange = 0x4967,
  SCR_OPAQUE_STRING_isspeakingfailsafe = 0x4969,
  SCR_OPAQUE_STRING_isspecialist = 0x496A,
  SCR_OPAQUE_STRING_issue_color_orders = 0x4975,
  SCR_OPAQUE_STRING_issue_leave_node_order_to_ai_and_get_ai = 0x4976,
  SCR_OPAQUE_STRING_issuffix = 0x4977,
  SCR_OPAQUE_STRING_issupportkillstreak = 0x4978,
  SCR_OPAQUE_STRING_isteam = 0x4981,
  SCR_OPAQUE_STRING_isteaminlaststand = 0x4982,
  SCR_OPAQUE_STRING_isteamspeaking = 0x4986,
  SCR_OPAQUE_STRING_isthresholdaward = 0x4989,
  SCR_OPAQUE_STRING_isthrowableitem = 0x498A,
  SCR_OPAQUE_STRING_istopbarrage = 0x498B,
  SCR_OPAQUE_STRING_istouchingrangetrigger = 0x498D,
  SCR_OPAQUE_STRING_istouchingtrigger = 0x498E,
  SCR_OPAQUE_STRING_isvalidattachment = 0x4999,
  SCR_OPAQUE_STRING_isvalidevent = 0x499F,
  SCR_OPAQUE_STRING_isvalidffatarget = 0x49A0,
  SCR_OPAQUE_STRING_isvalidperk1 = 0x49A3,
  SCR_OPAQUE_STRING_isvalidperk2 = 0x49A4,
  SCR_OPAQUE_STRING_isvalidperk3 = 0x49A5,
  SCR_OPAQUE_STRING_isvalidsecondary = 0x49A8,
  SCR_OPAQUE_STRING_isvalidsoundcause = 0x49A9,
  SCR_OPAQUE_STRING_isvehicle = 0x49AF,
  SCR_OPAQUE_STRING_isweapon = 0x49B2,
  SCR_OPAQUE_STRING_isweaponbuffunlocked = 0x49B4,
  SCR_OPAQUE_STRING_isweaponchallenge = 0x49B5,
  SCR_OPAQUE_STRING_isweaponswitchenabled = 0x49B9,
  SCR_OPAQUE_STRING_item_bob = 0x49BA,
  SCR_OPAQUE_STRING_item_ent = 0x49BB,
  SCR_OPAQUE_STRING_item_exist = 0x49BD,
  SCR_OPAQUE_STRING_item_min_distance_from_players = 0x49BF,
  SCR_OPAQUE_STRING_item_outline = 0x49C0,
  SCR_OPAQUE_STRING_item_pickup_listener = 0x49C4,
  SCR_OPAQUE_STRING_item_ref = 0x49C5,
  SCR_OPAQUE_STRING_itemexplodethisframe = 0x49C7,
  SCR_OPAQUE_STRING_jackpot_tag = 0x49CC,
  SCR_OPAQUE_STRING_jackpot_targetfx = 0x49CD,
  SCR_OPAQUE_STRING_jackpot_zone = 0x49CE,
  SCR_OPAQUE_STRING_jackpotpileicon = 0x49CF,
  SCR_OPAQUE_STRING_javelin = 0x49D1,
  SCR_OPAQUE_STRING_javelin_check_decent = 0x49D2,
  SCR_OPAQUE_STRING_javelin_dof = 0x49D3,
  SCR_OPAQUE_STRING_javelin_target_set = 0x49D6,
  SCR_OPAQUE_STRING_javelinlostsightlinetime = 0x49DB,
  SCR_OPAQUE_STRING_javelinstage = 0x49DE,
  SCR_OPAQUE_STRING_javelintargets = 0x49E2,
  SCR_OPAQUE_STRING_javelinuseentered = 0x49E4,
  SCR_OPAQUE_STRING_javtargets = 0x49E5,
  SCR_OPAQUE_STRING_jeep2 = 0x49E8,
  SCR_OPAQUE_STRING_jeep_player_arms_sub = 0x49F1,
  SCR_OPAQUE_STRING_jeep_start_music = 0x49F4,
  SCR_OPAQUE_STRING_jeeps_by = 0x49F5,
  SCR_OPAQUE_STRING_jet_blast_shields = 0x49FD,
  SCR_OPAQUE_STRING_jet_flight_time = 0x4A03,
  SCR_OPAQUE_STRING_jet_phalanx_tracking = 0x4A0B,
  SCR_OPAQUE_STRING_jet_planesound = 0x4A0C,
  SCR_OPAQUE_STRING_jet_reset = 0x4A0D,
  SCR_OPAQUE_STRING_jet_takeoff1 = 0x4A0E,
  SCR_OPAQUE_STRING_jet_takeoff2 = 0x4A0F,
  SCR_OPAQUE_STRING_jets_check_deleted = 0x4A13,
  SCR_OPAQUE_STRING_joint1 = 0x4A21,
  SCR_OPAQUE_STRING_juggmovespeedscaler = 0x4A2B,
  SCR_OPAQUE_STRING_juggsettings = 0x4A2E,
  SCR_OPAQUE_STRING_juggtype = 0x4A2F,
  SCR_OPAQUE_STRING_juicetime = 0x4A32,
  SCR_OPAQUE_STRING_jump_distance_allowed = 0x4A35,
  SCR_OPAQUE_STRING_jumparms = 0x4A3A,
  SCR_OPAQUE_STRING_jumporient = 0x4A47,
  SCR_OPAQUE_STRING_junction_baker_open_elevator_control_room = 0x4A50,
  SCR_OPAQUE_STRING_junction_banners = 0x4A51,
  SCR_OPAQUE_STRING_junction_elevator_control_doors_open = 0x4A53,
  SCR_OPAQUE_STRING_junction_enemies = 0x4A56,
  SCR_OPAQUE_STRING_junction_enemy_setup = 0x4A57,
  SCR_OPAQUE_STRING_junction_fireworks = 0x4A58,
  SCR_OPAQUE_STRING_junction_pip_waver_drone = 0x4A5E,
  SCR_OPAQUE_STRING_junction_rorke_window = 0x4A5F,
  SCR_OPAQUE_STRING_jungle_start = 0x4A6A,
  SCR_OPAQUE_STRING_keegan_additional_drivein_anims = 0x4A73,
  SCR_OPAQUE_STRING_keegan_breach_anim = 0x4A76,
  SCR_OPAQUE_STRING_keegan_breach_guys = 0x4A78,
  SCR_OPAQUE_STRING_keegan_drag_body = 0x4A79,
  SCR_OPAQUE_STRING_keegan_drag_body2 = 0x4A7A,
  SCR_OPAQUE_STRING_keegan_enter = 0x4A7B,
  SCR_OPAQUE_STRING_keegan_gun_l = 0x4A81,
  SCR_OPAQUE_STRING_keegan_idle_with_bishop = 0x4A83,
  SCR_OPAQUE_STRING_keegan_kill_dialog = 0x4A84,
  SCR_OPAQUE_STRING_keegan_snipes = 0x4A8B,
  SCR_OPAQUE_STRING_keegan_stands_behind_desk = 0x4A8C,
  SCR_OPAQUE_STRING_keegan_start_at_button = 0x4A8D,
  SCR_OPAQUE_STRING_keegan_swap_head_to_mask = 0x4A8E,
  SCR_OPAQUE_STRING_keegan_turn_right_anims = 0x4A93,
  SCR_OPAQUE_STRING_keegan_turn_right_anims_rush = 0x4A94,
  SCR_OPAQUE_STRING_keep_player_below_surface = 0x4A99,
  SCR_OPAQUE_STRING_keep_up_with_player_reset = 0x4A9C,
  SCR_OPAQUE_STRING_keepnukeemptimeremaining = 0x4AA0,
  SCR_OPAQUE_STRING_keeptryingtomelee = 0x4AA3,
  SCR_OPAQUE_STRING_keepweapons = 0x4AA4,
  SCR_OPAQUE_STRING_keyhint = 0x4AA9,
  SCR_OPAQUE_STRING_kick_bully_logic = 0x4AAD,
  SCR_OPAQUE_STRING_kill_allies = 0x4AB9,
  SCR_OPAQUE_STRING_kill_allies_on_next_shot = 0x4ABA,
  SCR_OPAQUE_STRING_kill_ally1_submerge_bubbles = 0x4ABB,
  SCR_OPAQUE_STRING_kill_ally_in_volume = 0x4ABC,
  SCR_OPAQUE_STRING_kill_barriers_when_close = 0x4AC0,
  SCR_OPAQUE_STRING_kill_death_anim_thread = 0x4AC6,
  SCR_OPAQUE_STRING_kill_deathflag = 0x4AC8,
  SCR_OPAQUE_STRING_kill_drone_respawner = 0x4ACC,
  SCR_OPAQUE_STRING_kill_dude = 0x4ACD,
  SCR_OPAQUE_STRING_kill_during_vignette = 0x4ACE,
  SCR_OPAQUE_STRING_kill_ending_heli_fx = 0x4ACF,
  SCR_OPAQUE_STRING_kill_enemies_touching_trigger = 0x4AD1,
  SCR_OPAQUE_STRING_kill_enemy_at_arm_node = 0x4AD2,
  SCR_OPAQUE_STRING_kill_estimates_vo = 0x4AD3,
  SCR_OPAQUE_STRING_kill_fire = 0x4AD4,
  SCR_OPAQUE_STRING_kill_fx = 0x4AD6,
  SCR_OPAQUE_STRING_kill_guys_right = 0x4ADB,
  SCR_OPAQUE_STRING_kill_heli_logic = 0x4ADE,
  SCR_OPAQUE_STRING_kill_hive_burning_on_death = 0x4AE1,
  SCR_OPAQUE_STRING_kill_infil_enemies = 0x4AE2,
  SCR_OPAQUE_STRING_kill_intro_chopper = 0x4AE3,
  SCR_OPAQUE_STRING_kill_on_river_crossing_back_track = 0x4AED,
  SCR_OPAQUE_STRING_kill_player = 0x4AEF,
  SCR_OPAQUE_STRING_kill_player_if_go_back_or_not_moving = 0x4AF0,
  SCR_OPAQUE_STRING_kill_players_touching_ent = 0x4AF3,
  SCR_OPAQUE_STRING_kill_remaining_gunboats = 0x4AF5,
  SCR_OPAQUE_STRING_kill_spawnernum = 0x4AFD,
  SCR_OPAQUE_STRING_kill_spawners_per_checkpoint = 0x4AFE,
  SCR_OPAQUE_STRING_kill_streak = 0x4AFF,
  SCR_OPAQUE_STRING_kill_timer = 0x4B01,
  SCR_OPAQUE_STRING_kill_trigger = 0x4B03,
  SCR_OPAQUE_STRING_kill_trigger_linked = 0x4B04,
  SCR_OPAQUE_STRING_killcamcleanup = 0x4B0D,
  SCR_OPAQUE_STRING_killchains = 0x4B12,
  SCR_OPAQUE_STRING_killedaxis = 0x4B16,
  SCR_OPAQUE_STRING_killedbestenemyplayer = 0x4B17,
  SCR_OPAQUE_STRING_killedinuse = 0x4B19,
  SCR_OPAQUE_STRING_killedplayernotifysys = 0x4B1B,
  SCR_OPAQUE_STRING_killedplayerscurrent = 0x4B1D,
  SCR_OPAQUE_STRING_killing_will_down = 0x4B22,
  SCR_OPAQUE_STRING_killplayer = 0x4B23,
  SCR_OPAQUE_STRING_killplayerfromcrate_dodamage = 0x4B24,
  SCR_OPAQUE_STRING_killplayerfromcrate_fastvelocitypush = 0x4B25,
  SCR_OPAQUE_STRING_killsassurvivor = 0x4B28,
  SCR_OPAQUE_STRING_killstreak_botparm = 0x4B31,
  SCR_OPAQUE_STRING_killstreak_info = 0x4B33,
  SCR_OPAQUE_STRING_killstreakcratethink = 0x4B35,
  SCR_OPAQUE_STRING_killstreaks = 0x4B40,
  SCR_OPAQUE_STRING_killstreaks_array = 0x4B41,
  SCR_OPAQUE_STRING_killstreakspawnshield = 0x4B45,
  SCR_OPAQUE_STRING_killstreakthink = 0x4B47,
  SCR_OPAQUE_STRING_killstreakusepressed = 0x4B49,
  SCR_OPAQUE_STRING_killstreakweapons = 0x4B4B,
  SCR_OPAQUE_STRING_killteaminlaststand = 0x4B4D,
  SCR_OPAQUE_STRING_killwrapper = 0x4B51,
  SCR_OPAQUE_STRING_knife = 0x4B57,
  SCR_OPAQUE_STRING_knife_guy_cleanup = 0x4B58,
  SCR_OPAQUE_STRING_knife_out_rorke_anims = 0x4B5A,
  SCR_OPAQUE_STRING_knife_reticle = 0x4B5B,
  SCR_OPAQUE_STRING_knockback_player = 0x4B62,
  SCR_OPAQUE_STRING_ks_manualflares_watchuse = 0x4B68,
  SCR_OPAQUE_STRING_ks_setup_manual_flares = 0x4B69,
  SCR_OPAQUE_STRING_la_river_defend_weapons_spawn = 0x4B6D,
  SCR_OPAQUE_STRING_ladder = 0x4B6F,
  SCR_OPAQUE_STRING_ladder_spot_glow = 0x4B72,
  SCR_OPAQUE_STRING_ladder_vo = 0x4B73,
  SCR_OPAQUE_STRING_land_shoot_vert_missile = 0x4B78,
  SCR_OPAQUE_STRING_land_shoot_vert_missile_loop = 0x4B79,
  SCR_OPAQUE_STRING_land_vert_missile_wait_max = 0x4B7B,
  SCR_OPAQUE_STRING_landed = 0x4B81,
  SCR_OPAQUE_STRING_landing_gear_up = 0x4B83,
  SCR_OPAQUE_STRING_lanterns = 0x4B87,
  SCR_OPAQUE_STRING_laptop_close = 0x4B89,
  SCR_OPAQUE_STRING_laptop_hdr = 0x4B8C,
  SCR_OPAQUE_STRING_laptop_off = 0x4B8D,
  SCR_OPAQUE_STRING_largescale = 0x4B92,
  SCR_OPAQUE_STRING_lariver_balcony_friendly_logic = 0x4B96,
  SCR_OPAQUE_STRING_lariver_bridge_drones = 0x4B97,
  SCR_OPAQUE_STRING_lariver_bridge_rappel_enemies = 0x4B99,
  SCR_OPAQUE_STRING_lariver_chopper_passanger_logic = 0x4B9B,
  SCR_OPAQUE_STRING_lariver_defend_enemy_population = 0x4BA0,
  SCR_OPAQUE_STRING_lariver_defend_guided_missile_setup = 0x4BA2,
  SCR_OPAQUE_STRING_lariver_defend_populate_close_area = 0x4BA6,
  SCR_OPAQUE_STRING_lariver_defend_slide_down_river_wall = 0x4BA7,
  SCR_OPAQUE_STRING_lariver_defend_start = 0x4BA9,
  SCR_OPAQUE_STRING_lariver_doors_siren = 0x4BAA,
  SCR_OPAQUE_STRING_lariver_enemy_chopper_logic = 0x4BAF,
  SCR_OPAQUE_STRING_lariver_exit = 0x4BB0,
  SCR_OPAQUE_STRING_lariver_matv_load_and_go = 0x4BB6,
  SCR_OPAQUE_STRING_lariver_spawn_wall_battle_guys_early = 0x4BBE,
  SCR_OPAQUE_STRING_lariver_team2_logic = 0x4BC1,
  SCR_OPAQUE_STRING_lasedstrikecratethink = 0x4BC7,
  SCR_OPAQUE_STRING_lasedstrikedrone = 0x4BC8,
  SCR_OPAQUE_STRING_laser_artillery = 0x4BCD,
  SCR_OPAQUE_STRING_laser_designator_disable_list = 0x4BD1,
  SCR_OPAQUE_STRING_laser_ent = 0x4BD2,
  SCR_OPAQUE_STRING_laser_targets = 0x4BD6,
  SCR_OPAQUE_STRING_laserforceon = 0x4BDA,
  SCR_OPAQUE_STRING_laserguidedmissileents_inuse = 0x4BDC,
  SCR_OPAQUE_STRING_laseron_func = 0x4BE0,
  SCR_OPAQUE_STRING_last_audio_bink_beep_array_num = 0x4BE6,
  SCR_OPAQUE_STRING_last_audio_bink_percentage = 0x4BE7,
  SCR_OPAQUE_STRING_last_balcony_death = 0x4BE8,
  SCR_OPAQUE_STRING_last_balcony_death_time = 0x4BEA,
  SCR_OPAQUE_STRING_last_bob_anim = 0x4BEB,
  SCR_OPAQUE_STRING_last_charge_time = 0x4BEE,
  SCR_OPAQUE_STRING_last_command = 0x4BEF,
  SCR_OPAQUE_STRING_last_commanded_bot = 0x4BF0,
  SCR_OPAQUE_STRING_last_death_pos = 0x4BF2,
  SCR_OPAQUE_STRING_last_dodge_time = 0x4BF8,
  SCR_OPAQUE_STRING_last_dog_attack = 0x4BF9,
  SCR_OPAQUE_STRING_last_drill_pickup_angles = 0x4BFB,
  SCR_OPAQUE_STRING_last_enemy_sight_time = 0x4BFD,
  SCR_OPAQUE_STRING_last_goal_struct = 0x4C01,
  SCR_OPAQUE_STRING_last_heli_decides_to_shoot_missile_at_ai_time = 0x4C02,
  SCR_OPAQUE_STRING_last_hive_xp = 0x4C05,
  SCR_OPAQUE_STRING_last_investigation_time = 0x4C07,
  SCR_OPAQUE_STRING_last_killfirm_time = 0x4C08,
  SCR_OPAQUE_STRING_last_killfirm_timeout = 0x4C09,
  SCR_OPAQUE_STRING_last_large_rod_time = 0x4C0B,
  SCR_OPAQUE_STRING_last_legs_offset = 0x4C0C,
  SCR_OPAQUE_STRING_last_motion_time = 0x4C13,
  SCR_OPAQUE_STRING_last_move_state = 0x4C14,
  SCR_OPAQUE_STRING_last_player_damage = 0x4C19,
  SCR_OPAQUE_STRING_last_runanim = 0x4C1E,
  SCR_OPAQUE_STRING_last_set_goalent = 0x4C21,
  SCR_OPAQUE_STRING_last_set_goalpos = 0x4C23,
  SCR_OPAQUE_STRING_last_spawned_time = 0x4C25,
  SCR_OPAQUE_STRING_last_spawned_vehicle = 0x4C27,
  SCR_OPAQUE_STRING_last_strips = 0x4C2D,
  SCR_OPAQUE_STRING_last_teleport_time = 0x4C2E,
  SCR_OPAQUE_STRING_last_time = 0x4C30,
  SCR_OPAQUE_STRING_lastadvancetoenemyattacker = 0x4C36,
  SCR_OPAQUE_STRING_lastadvancetoenemydest = 0x4C37,
  SCR_OPAQUE_STRING_lastadvancetoenemysrc = 0x4C38,
  SCR_OPAQUE_STRING_lastaieventtrigger = 0x4C3A,
  SCR_OPAQUE_STRING_lastattackedshieldplayer = 0x4C3D,
  SCR_OPAQUE_STRING_lastautosavetime = 0x4C3F,
  SCR_OPAQUE_STRING_lastcampkilltime = 0x4C46,
  SCR_OPAQUE_STRING_lastcaralarmtime = 0x4C47,
  SCR_OPAQUE_STRING_lastcarexplosionrange = 0x4C4A,
  SCR_OPAQUE_STRING_lastclass = 0x4C4E,
  SCR_OPAQUE_STRING_lastdeathicon = 0x4C54,
  SCR_OPAQUE_STRING_lastenemypos = 0x4C5C,
  SCR_OPAQUE_STRING_lastenemysightposold = 0x4C5D,
  SCR_OPAQUE_STRING_lastenemysightposselforigin = 0x4C5E,
  SCR_OPAQUE_STRING_lastexplodingbarrel = 0x4C61,
  SCR_OPAQUE_STRING_lastflashedtime = 0x4C62,
  SCR_OPAQUE_STRING_lastfraggrenadetoplayerstart = 0x4C63,
  SCR_OPAQUE_STRING_lastgrenadelandednearplayertime = 0x4C66,
  SCR_OPAQUE_STRING_lastkilldogtime = 0x4C6F,
  SCR_OPAQUE_STRING_lastkilledby = 0x4C70,
  SCR_OPAQUE_STRING_lastkilllocation = 0x4C73,
  SCR_OPAQUE_STRING_lastmansd = 0x4C7B,
  SCR_OPAQUE_STRING_lastmeleefailedmypos = 0x4C7C,
  SCR_OPAQUE_STRING_lastmeleefailedpos = 0x4C7D,
  SCR_OPAQUE_STRING_lastmortar = 0x4C7F,
  SCR_OPAQUE_STRING_lastpaintime = 0x4C85,
  SCR_OPAQUE_STRING_lastplayercallouttime = 0x4C88,
  SCR_OPAQUE_STRING_lastprimaryweaponswaptime = 0x4C8B,
  SCR_OPAQUE_STRING_lastshoottime = 0x4C97,
  SCR_OPAQUE_STRING_lastslowprocessframe = 0x4C9A,
  SCR_OPAQUE_STRING_lastspawnteam = 0x4C9E,
  SCR_OPAQUE_STRING_lastspawntime = 0x4C9F,
  SCR_OPAQUE_STRING_laststand_enabled = 0x4CA4,
  SCR_OPAQUE_STRING_laststandkeepoverlay = 0x4CAD,
  SCR_OPAQUE_STRING_laststandrespawnplayer = 0x4CB0,
  SCR_OPAQUE_STRING_laststandupdatereviveiconcoloralien = 0x4CB6,
  SCR_OPAQUE_STRING_laststandusetime = 0x4CB8,
  SCR_OPAQUE_STRING_laststandwaittilldeath = 0x4CB9,
  SCR_OPAQUE_STRING_laststandwaittilldeathhorde = 0x4CBA,
  SCR_OPAQUE_STRING_laststatustime = 0x4CC0,
  SCR_OPAQUE_STRING_laststoppedtime = 0x4CC1,
  SCR_OPAQUE_STRING_lastsurfacetype = 0x4CC4,
  SCR_OPAQUE_STRING_lasttarget = 0x4CC5,
  SCR_OPAQUE_STRING_lastteamthreatcallouttime = 0x4CC9,
  SCR_OPAQUE_STRING_lastturretindex = 0x4CCC,
  SCR_OPAQUE_STRING_lastupdatetime = 0x4CCD,
  SCR_OPAQUE_STRING_lastvectotarget = 0x4CD3,
  SCR_OPAQUE_STRING_lastvisionsetthermal = 0x4CD4,
  SCR_OPAQUE_STRING_lateral_change_this_update = 0x4CD9,
  SCR_OPAQUE_STRING_launch_button = 0x4CDE,
  SCR_OPAQUE_STRING_launch_ends = 0x4CE1,
  SCR_OPAQUE_STRING_launch_prep_static = 0x4CE4,
  SCR_OPAQUE_STRING_launch_ragdolls_zodiac = 0x4CE6,
  SCR_OPAQUE_STRING_launch_rope_ally = 0x4CE9,
  SCR_OPAQUE_STRING_launch_smoke = 0x4CEB,
  SCR_OPAQUE_STRING_launch_smoke_from_tag = 0x4CEC,
  SCR_OPAQUE_STRING_launch_speed = 0x4CED,
  SCR_OPAQUE_STRING_launchanimentry = 0x4CEE,
  SCR_OPAQUE_STRING_launchanimstate = 0x4CEF,
  SCR_OPAQUE_STRING_launcher = 0x4CF0,
  SCR_OPAQUE_STRING_launcher_destroy_slomo_sfx = 0x4CF7,
  SCR_OPAQUE_STRING_launcher_destroy_stop_slomo_sfx = 0x4CF8,
  SCR_OPAQUE_STRING_launcher_lynx = 0x4CF9,
  SCR_OPAQUE_STRING_launcher_lynx_spawn_func = 0x4CFA,
  SCR_OPAQUE_STRING_launchers_attached = 0x4CFD,
  SCR_OPAQUE_STRING_launchtime = 0x4D01,
  SCR_OPAQUE_STRING_launchuav = 0x4D02,
  SCR_OPAQUE_STRING_launchvelocity = 0x4D03,
  SCR_OPAQUE_STRING_launchvelocity2d = 0x4D04,
  SCR_OPAQUE_STRING_layer_completed = 0x4D06,
  SCR_OPAQUE_STRING_lbexplode = 0x4D09,
  SCR_OPAQUE_STRING_lbsupport_attacktargets = 0x4D0E,
  SCR_OPAQUE_STRING_lbsupport_burstfirestop = 0x4D10,
  SCR_OPAQUE_STRING_lbsupport_getclosestnode = 0x4D14,
  SCR_OPAQUE_STRING_lbsupport_watchownerdamage = 0x4D1E,
  SCR_OPAQUE_STRING_lcs_lights_back = 0x4D29,
  SCR_OPAQUE_STRING_lcs_lights_front = 0x4D2A,
  SCR_OPAQUE_STRING_lcs_setup = 0x4D2B,
  SCR_OPAQUE_STRING_lead_jeep = 0x4D2E,
  SCR_OPAQUE_STRING_leaderdialoggroup = 0x4D32,
  SCR_OPAQUE_STRING_leaderdialoggroups = 0x4D33,
  SCR_OPAQUE_STRING_leadersound = 0x4D39,
  SCR_OPAQUE_STRING_leave_node_on_attacked = 0x4D44,
  SCR_OPAQUE_STRING_leave_node_on_distance_breach = 0x4D45,
  SCR_OPAQUE_STRING_leave_path_for_spline_path = 0x4D46,
  SCR_OPAQUE_STRING_leavebattlebuddysystem = 0x4D47,
  SCR_OPAQUE_STRING_leavebattlebuddysystemdisconnect = 0x4D48,
  SCR_OPAQUE_STRING_leavecoverandshoot = 0x4D49,
  SCR_OPAQUE_STRING_leaveonownerdisconnect = 0x4D4B,
  SCR_OPAQUE_STRING_ledge_fx = 0x4D4E,
  SCR_OPAQUE_STRING_ledge_old_player_pos = 0x4D4F,
  SCR_OPAQUE_STRING_ledge_sway = 0x4D51,
  SCR_OPAQUE_STRING_ledge_track_player_pos = 0x4D52,
  SCR_OPAQUE_STRING_left_arc = 0x4D54,
  SCR_OPAQUE_STRING_left_defend = 0x4D56,
  SCR_OPAQUE_STRING_left_ent = 0x4D57,
  SCR_OPAQUE_STRING_left_flank_spawn_proc = 0x4D58,
  SCR_OPAQUE_STRING_left_post = 0x4D5D,
  SCR_OPAQUE_STRING_left_stick = 0x4D5F,
  SCR_OPAQUE_STRING_left_velocity = 0x4D60,
  SCR_OPAQUE_STRING_leg_anim_blend_time = 0x4D63,
  SCR_OPAQUE_STRING_leg_anim_blend_time_fast = 0x4D64,
  SCR_OPAQUE_STRING_leg_clear_anim_blend_time = 0x4D65,
  SCR_OPAQUE_STRING_legs_idle_anim = 0x4D6B,
  SCR_OPAQUE_STRING_legs_move_parent_node = 0x4D6C,
  SCR_OPAQUE_STRING_length = 0x4D6D,
  SCR_OPAQUE_STRING_leper = 0x4D6E,
  SCR_OPAQUE_STRING_leper_combat = 0x4D72,
  SCR_OPAQUE_STRING_leper_despawn = 0x4D73,
  SCR_OPAQUE_STRING_leper_init = 0x4D74,
  SCR_OPAQUE_STRING_leper_retreat = 0x4D75,
  SCR_OPAQUE_STRING_leperdespawntime = 0x4D78,
  SCR_OPAQUE_STRING_lerp = 0x4D79,
  SCR_OPAQUE_STRING_lerp_fovscale_overtime = 0x4D7E,
  SCR_OPAQUE_STRING_lerp_intensity = 0x4D80,
  SCR_OPAQUE_STRING_lerp_maxalpha_overtime = 0x4D81,
  SCR_OPAQUE_STRING_lerp_out_drop_pitch = 0x4D83,
  SCR_OPAQUE_STRING_lerp_player_view_to_tag = 0x4D88,
  SCR_OPAQUE_STRING_lerp_player_view_to_tag_oldstyle_internal = 0x4D8C,
  SCR_OPAQUE_STRING_lerp_rate = 0x4D8D,
  SCR_OPAQUE_STRING_lerp_saveddvar_cg_ng = 0x4D90,
  SCR_OPAQUE_STRING_lerpfov_saved_thread = 0x4D98,
  SCR_OPAQUE_STRING_lerpfraction = 0x4D99,
  SCR_OPAQUE_STRING_let_player_through = 0x4D9B,
  SCR_OPAQUE_STRING_level_2_weight = 0x4D9E,
  SCR_OPAQUE_STRING_level_fadein = 0x4DA5,
  SCR_OPAQUE_STRING_level_specific_dof = 0x4DAD,
  SCR_OPAQUE_STRING_level_specific_score_parameter = 0x4DAE,
  SCR_OPAQUE_STRING_levelflag = 0x4DB3,
  SCR_OPAQUE_STRING_levelflagset = 0x4DB7,
  SCR_OPAQUE_STRING_levelflagwaitopen = 0x4DB9,
  SCR_OPAQUE_STRING_levelhasvehicles = 0x4DBB,
  SCR_OPAQUE_STRING_lg_missileslocked = 0x4DBE,
  SCR_OPAQUE_STRING_lgm_firing_monitormissilefire = 0x4DC3,
  SCR_OPAQUE_STRING_lgm_locked_missileondeath = 0x4DC7,
  SCR_OPAQUE_STRING_lgm_locked_spawnmissiles = 0x4DC8,
  SCR_OPAQUE_STRING_lgm_locking_loopsound = 0x4DCA,
  SCR_OPAQUE_STRING_lgm_locking_think = 0x4DCC,
  SCR_OPAQUE_STRING_lgm_missilesnotifyandrelease = 0x4DCD,
  SCR_OPAQUE_STRING_lgm_onmissilenotifies = 0x4DD0,
  SCR_OPAQUE_STRING_lgm_update_launcherusage = 0x4DD5,
  SCR_OPAQUE_STRING_lgt_ally_sequence = 0x4DD6,
  SCR_OPAQUE_STRING_life_span = 0x4DE0,
  SCR_OPAQUE_STRING_liferaft_splash_on_hit_water = 0x4DE3,
  SCR_OPAQUE_STRING_light_brighten = 0x4DE8,
  SCR_OPAQUE_STRING_light_fade = 0x4DED,
  SCR_OPAQUE_STRING_light_flicker = 0x4DF0,
  SCR_OPAQUE_STRING_light_hall_light = 0x4DF2,
  SCR_OPAQUE_STRING_light_model = 0x4DF3,
  SCR_OPAQUE_STRING_light_pulse = 0x4DF4,
  SCR_OPAQUE_STRING_light_rog_threads = 0x4DF5,
  SCR_OPAQUE_STRING_light_tag = 0x4DF6,
  SCR_OPAQUE_STRING_lightgridsupersamplecount = 0x4DFB,
  SCR_OPAQUE_STRING_lighthouse = 0x4DFC,
  SCR_OPAQUE_STRING_lightmapcount_cg = 0x4DFE,
  SCR_OPAQUE_STRING_lightning_flash = 0x4E00,
  SCR_OPAQUE_STRING_lightningexploder = 0x4E02,
  SCR_OPAQUE_STRING_lightningexploderindex = 0x4E03,
  SCR_OPAQUE_STRING_lightningthink = 0x4E05,
  SCR_OPAQUE_STRING_lights = 0x4E07,
  SCR_OPAQUE_STRING_lights_off = 0x4E09,
  SCR_OPAQUE_STRING_limping_guys_spawnfunc = 0x4E16,
  SCR_OPAQUE_STRING_line_debug = 0x4E19,
  SCR_OPAQUE_STRING_linelist = 0x4E1D,
  SCR_OPAQUE_STRING_lines = 0x4E1E,
  SCR_OPAQUE_STRING_link1 = 0x4E23,
  SCR_OPAQUE_STRING_link_bag_to_jeep_after_anim = 0x4E25,
  SCR_OPAQUE_STRING_link_bags_to_spin_crates = 0x4E26,
  SCR_OPAQUE_STRING_link_dlight_to_dummy = 0x4E27,
  SCR_OPAQUE_STRING_link_dog_to_jeep = 0x4E28,
  SCR_OPAQUE_STRING_link_final_exposed_nodes = 0x4E2A,
  SCR_OPAQUE_STRING_link_player_for_catch = 0x4E2C,
  SCR_OPAQUE_STRING_link_to_moving_target = 0x4E2F,
  SCR_OPAQUE_STRING_link_to_sittag = 0x4E30,
  SCR_OPAQUE_STRING_linked = 0x4E32,
  SCR_OPAQUE_STRING_linked_ents = 0x4E35,
  SCR_OPAQUE_STRING_linked_prefab_ents = 0x4E39,
  SCR_OPAQUE_STRING_linked_to_ent = 0x4E3B,
  SCR_OPAQUE_STRING_linked_world_space_forward = 0x4E3D,
  SCR_OPAQUE_STRING_linkedplayers = 0x4E3E,
  SCR_OPAQUE_STRING_linkparent = 0x4E42,
  SCR_OPAQUE_STRING_linkpet = 0x4E43,
  SCR_OPAQUE_STRING_links = 0x4E44,
  SCR_OPAQUE_STRING_linkstartnodes = 0x4E45,
  SCR_OPAQUE_STRING_linktoblend = 0x4E46,
  SCR_OPAQUE_STRING_linktotrain = 0x4E48,
  SCR_OPAQUE_STRING_listen_dog_attack = 0x4E4B,
  SCR_OPAQUE_STRING_listen_for_dog_commands = 0x4E4E,
  SCR_OPAQUE_STRING_listen_for_landing_gear_messages = 0x4E50,
  SCR_OPAQUE_STRING_listen_for_mine_layed = 0x4E51,
  SCR_OPAQUE_STRING_listen_for_mine_trigger = 0x4E52,
  SCR_OPAQUE_STRING_listen_for_use_multi_turret = 0x4E53,
  SCR_OPAQUE_STRING_listen_player_leftground = 0x4E62,
  SCR_OPAQUE_STRING_lit_models = 0x4E67,
  SCR_OPAQUE_STRING_littlebird_spotlight_death = 0x4E6E,
  SCR_OPAQUE_STRING_littlebird_turrets_think = 0x4E72,
  SCR_OPAQUE_STRING_littlebirdmadeselectionvo = 0x4E75,
  SCR_OPAQUE_STRING_living_ai = 0x4E79,
  SCR_OPAQUE_STRING_living_ai_prethink = 0x4E7A,
  SCR_OPAQUE_STRING_lnchr_slomo_sfx = 0x4E7E,
  SCR_OPAQUE_STRING_load = 0x4E7F,
  SCR_OPAQUE_STRING_load_player_anims = 0x4E8A,
  SCR_OPAQUE_STRING_load_spawn_events_from_table = 0x4E90,
  SCR_OPAQUE_STRING_load_transient = 0x4E92,
  SCR_OPAQUE_STRING_load_variables_from_table = 0x4E95,
  SCR_OPAQUE_STRING_loadingdocks_no_jump = 0x4E9C,
  SCR_OPAQUE_STRING_loadoutperkoffhand = 0x4EA3,
  SCR_OPAQUE_STRING_loadoutprimarycamo = 0x4EA7,
  SCR_OPAQUE_STRING_loadoutprimaryreticle = 0x4EA8,
  SCR_OPAQUE_STRING_loadoutsecondarycamo = 0x4EAD,
  SCR_OPAQUE_STRING_loadoutvalues = 0x4EAF,
  SCR_OPAQUE_STRING_lobby_ruckus = 0x4EB2,
  SCR_OPAQUE_STRING_loc1 = 0x4EB4,
  SCR_OPAQUE_STRING_location = 0x4EBA,
  SCR_OPAQUE_STRING_location_add_last_callout_time = 0x4EBB,
  SCR_OPAQUE_STRING_lock_dummy_add = 0x4ECA,
  SCR_OPAQUE_STRING_lock_dummy_add_ondeath = 0x4ECB,
  SCR_OPAQUE_STRING_lock_dummy_remove = 0x4ECC,
  SCR_OPAQUE_STRING_lock_player_controls = 0x4ED2,
  SCR_OPAQUE_STRING_lock_spawner_for_awhile = 0x4ED3,
  SCR_OPAQUE_STRING_lockedtarget = 0x4EDA,
  SCR_OPAQUE_STRING_lockmissespassedthreshold = 0x4EDE,
  SCR_OPAQUE_STRING_lockontargets_stop = 0x4EE5,
  SCR_OPAQUE_STRING_loco_breach_opfor_start = 0x4EEE,
  SCR_OPAQUE_STRING_loco_falling_glass = 0x4EF7,
  SCR_OPAQUE_STRING_loco_gunhold_end_slowmo = 0x4EF8,
  SCR_OPAQUE_STRING_loco_slide_player_view_lerp_up = 0x4F00,
  SCR_OPAQUE_STRING_log_anim_lengths = 0x4F06,
  SCR_OPAQUE_STRING_log_pile_support_damage_watch = 0x4F0D,
  SCR_OPAQUE_STRING_log_visual_link_joints = 0x4F12,
  SCR_OPAQUE_STRING_logaward = 0x4F14,
  SCR_OPAQUE_STRING_loggameevent = 0x4F17,
  SCR_OPAQUE_STRING_logkillsconfirmed = 0x4F1B,
  SCR_OPAQUE_STRING_logplayerdata = 0x4F25,
  SCR_OPAQUE_STRING_logweaponstat = 0x4F2A,
  SCR_OPAQUE_STRING_logxpgains = 0x4F2B,
  SCR_OPAQUE_STRING_loki_breach_lighting = 0x4F2C,
  SCR_OPAQUE_STRING_loki_drop_weapon = 0x4F30,
  SCR_OPAQUE_STRING_loki_space_particulates_while_moving = 0x4F3A,
  SCR_OPAQUE_STRING_look_at_roof_nag = 0x4F42,
  SCR_OPAQUE_STRING_look_at_tower_vo_timeout = 0x4F47,
  SCR_OPAQUE_STRING_lookat_triggers = 0x4F4D,
  SCR_OPAQUE_STRING_lookatent = 0x4F4E,
  SCR_OPAQUE_STRING_lookdown_zodiacs = 0x4F53,
  SCR_OPAQUE_STRING_lookforenemy = 0x4F56,
  SCR_OPAQUE_STRING_lookout_guys_logic = 0x4F5B,
  SCR_OPAQUE_STRING_lookupanim = 0x4F5C,
  SCR_OPAQUE_STRING_loop = 0x4F61,
  SCR_OPAQUE_STRING_loop_armada = 0x4F63,
  SCR_OPAQUE_STRING_loopers = 0x4F74,
  SCR_OPAQUE_STRING_loopidlesound = 0x4F7E,
  SCR_OPAQUE_STRING_loopmovesound = 0x4F82,
  SCR_OPAQUE_STRING_loopreflectoreffect = 0x4F83,
  SCR_OPAQUE_STRING_loot_collection_timeout = 0x4F8A,
  SCR_OPAQUE_STRING_loot_pickup_listener = 0x4F8D,
  SCR_OPAQUE_STRING_lootbag = 0x4F8F,
  SCR_OPAQUE_STRING_lootbox_world_init = 0x4F92,
  SCR_OPAQUE_STRING_lootboxes = 0x4F93,
  SCR_OPAQUE_STRING_losthope_vo = 0x4F97,
  SCR_OPAQUE_STRING_low_speed_mult = 0x4F98,
  SCR_OPAQUE_STRING_lower_bottom_bay_door = 0x4F9B,
  SCR_OPAQUE_STRING_lower_shield1 = 0x4F9D,
  SCR_OPAQUE_STRING_lower_shield2 = 0x4F9E,
  SCR_OPAQUE_STRING_lowertextfontsize = 0x4FA5,
  SCR_OPAQUE_STRING_lowspeed_start_crossfade = 0x4FAC,
  SCR_OPAQUE_STRING_lowy = 0x4FAE,
  SCR_OPAQUE_STRING_lrtest = 0x4FAF,
  SCR_OPAQUE_STRING_lurker_listen_trigger = 0x4FB2,
  SCR_OPAQUE_STRING_m880_crash = 0x4FBC,
  SCR_OPAQUE_STRING_m880_crash_spawn = 0x4FC5,
  SCR_OPAQUE_STRING_m880_kill_collision_change = 0x4FC8,
  SCR_OPAQUE_STRING_m880_open_path = 0x4FCC,
  SCR_OPAQUE_STRING_m880_waits = 0x4FCF,
  SCR_OPAQUE_STRING_magic_bullet_shield = 0x4FD6,
  SCR_OPAQUE_STRING_magic_distance = 0x4FD7,
  SCR_OPAQUE_STRING_magic_missile_fire_at_ent = 0x4FD8,
  SCR_OPAQUE_STRING_magicbullet_spray = 0x4FDA,
  SCR_OPAQUE_STRING_main_chopper_test = 0x4FE4,
  SCR_OPAQUE_STRING_main_common = 0x4FE6,
  SCR_OPAQUE_STRING_main_end_beach = 0x4FE8,
  SCR_OPAQUE_STRING_main_roof_combat = 0x4FF6,
  SCR_OPAQUE_STRING_main_sp = 0x4FFA,
  SCR_OPAQUE_STRING_main_spot = 0x4FFB,
  SCR_OPAQUE_STRING_maingun_fx_override = 0x5001,
  SCR_OPAQUE_STRING_mainloopstart = 0x5002,
  SCR_OPAQUE_STRING_make_array = 0x5004,
  SCR_OPAQUE_STRING_make_enemy_squad_burst = 0x5008,
  SCR_OPAQUE_STRING_makereviveentity = 0x5019,
  SCR_OPAQUE_STRING_makesureturnworks = 0x501F,
  SCR_OPAQUE_STRING_mall = 0x5023,
  SCR_OPAQUE_STRING_mall_breach_enemy_2 = 0x5029,
  SCR_OPAQUE_STRING_mall_breach_enemy_ragdoll_on_death = 0x502A,
  SCR_OPAQUE_STRING_mall_delete_rooftop_ents = 0x502E,
  SCR_OPAQUE_STRING_mall_dialogue_grp1 = 0x5032,
  SCR_OPAQUE_STRING_mall_heli = 0x503A,
  SCR_OPAQUE_STRING_mall_lone_patrol_think = 0x503E,
  SCR_OPAQUE_STRING_mall_lookout = 0x503F,
  SCR_OPAQUE_STRING_mall_radioburst_volume = 0x5041,
  SCR_OPAQUE_STRING_mall_rooftop_floor_splash = 0x5043,
  SCR_OPAQUE_STRING_mall_rootop_event = 0x504B,
  SCR_OPAQUE_STRING_mall_teleport_dog = 0x5051,
  SCR_OPAQUE_STRING_mall_walla_volume = 0x5053,
  SCR_OPAQUE_STRING_mallroof_acboxes = 0x5054,
  SCR_OPAQUE_STRING_mallroof_array = 0x5055,
  SCR_OPAQUE_STRING_manage_all_rpg_ai_get_target = 0x5063,
  SCR_OPAQUE_STRING_manage_player_linked_view = 0x506C,
  SCR_OPAQUE_STRING_manage_sentry_count = 0x506F,
  SCR_OPAQUE_STRING_manage_use_region = 0x5072,
  SCR_OPAQUE_STRING_manhandler_hold = 0x5076,
  SCR_OPAQUE_STRING_mansion_hesh = 0x5081,
  SCR_OPAQUE_STRING_mantis_explosion = 0x5086,
  SCR_OPAQUE_STRING_mantis_explosion_fragment = 0x5087,
  SCR_OPAQUE_STRING_manual_clear_hint_on_trigger = 0x508B,
  SCR_OPAQUE_STRING_manualdropthink = 0x5091,
  SCR_OPAQUE_STRING_map_is_early_in_the_game = 0x5097,
  SCR_OPAQUE_STRING_map_without_loadout = 0x5099,
  SCR_OPAQUE_STRING_mapcustomkillstreakfunc = 0x509D,
  SCR_OPAQUE_STRING_mark_completed = 0x509F,
  SCR_OPAQUE_STRING_mark_friendly_vehicles = 0x50A1,
  SCR_OPAQUE_STRING_mark_suits_for_delete = 0x50A3,
  SCR_OPAQUE_STRING_markedduration = 0x50A4,
  SCR_OPAQUE_STRING_markplayer = 0x50AA,
  SCR_OPAQUE_STRING_mask_interactives_in_volumes = 0x50B0,
  SCR_OPAQUE_STRING_mask_prop = 0x50B1,
  SCR_OPAQUE_STRING_massnodeinitfunctions = 0x50B3,
  SCR_OPAQUE_STRING_matchestargetteam = 0x50BB,
  SCR_OPAQUE_STRING_matchoutcomenotify = 0x50C2,
  SCR_OPAQUE_STRING_matchrules_numinitialinfected = 0x50C5,
  SCR_OPAQUE_STRING_matv = 0x50CE,
  SCR_OPAQUE_STRING_max_capacity = 0x50D4,
  SCR_OPAQUE_STRING_max_count = 0x50D5,
  SCR_OPAQUE_STRING_max_distance = 0x50D7,
  SCR_OPAQUE_STRING_max_drones = 0x50D8,
  SCR_OPAQUE_STRING_max_lurker_population = 0x50DC,
  SCR_OPAQUE_STRING_max_rotation_speed = 0x50DF,
  SCR_OPAQUE_STRING_max_velocity = 0x50E6,
  SCR_OPAQUE_STRING_max_zodiacs = 0x50E8,
  SCR_OPAQUE_STRING_max_zoom_dof = 0x50E9,
  SCR_OPAQUE_STRING_maxalienattackerdifficultyvalue = 0x50EA,
  SCR_OPAQUE_STRING_maxaliveenemycount = 0x50EB,
  SCR_OPAQUE_STRING_maxammopickupsperround = 0x50EE,
  SCR_OPAQUE_STRING_maxdestructions = 0x50F6,
  SCR_OPAQUE_STRING_maxdetpackdamage = 0x50F7,
  SCR_OPAQUE_STRING_maxdirections = 0x50F8,
  SCR_OPAQUE_STRING_maxdistance = 0x50FA,
  SCR_OPAQUE_STRING_maxemissive = 0x50FD,
  SCR_OPAQUE_STRING_maxflashedseconds = 0x5101,
  SCR_OPAQUE_STRING_maxlaststands = 0x5107,
  SCR_OPAQUE_STRING_maxnamelength = 0x510C,
  SCR_OPAQUE_STRING_maxpickupsperround = 0x5111,
  SCR_OPAQUE_STRING_maxradius = 0x5114,
  SCR_OPAQUE_STRING_maxtracecount = 0x511A,
  SCR_OPAQUE_STRING_maxvehiclesallowed = 0x511D,
  SCR_OPAQUE_STRING_maxvisibledist_old = 0x511E,
  SCR_OPAQUE_STRING_maydolaststand = 0x5120,
  SCR_OPAQUE_STRING_mayonlydie = 0x5125,
  SCR_OPAQUE_STRING_medbay_cleanup = 0x512C,
  SCR_OPAQUE_STRING_medbay_player_anim = 0x512D,
  SCR_OPAQUE_STRING_meeting_guys = 0x5133,
  SCR_OPAQUE_STRING_meetup_vo = 0x5136,
  SCR_OPAQUE_STRING_melee_aivsai_exposed_chooseanimationandposition_behind = 0x5140,
  SCR_OPAQUE_STRING_melee_aivsai_exposed_chooseanimationandposition_flip = 0x5142,
  SCR_OPAQUE_STRING_melee_aivsai_targetlink = 0x514C,
  SCR_OPAQUE_STRING_melee_clean_up = 0x514F,
  SCR_OPAQUE_STRING_melee_deathhandler_regular = 0x5156,
  SCR_OPAQUE_STRING_melee_dogcleanup = 0x515B,
  SCR_OPAQUE_STRING_melee_droppedweaponrestore = 0x515D,
  SCR_OPAQUE_STRING_melee_endscript = 0x515E,
  SCR_OPAQUE_STRING_melee_endscript_checkpositionandmovement = 0x5160,
  SCR_OPAQUE_STRING_melee_in_posture = 0x516A,
  SCR_OPAQUE_STRING_melee_jumping_to_wall = 0x516E,
  SCR_OPAQUE_STRING_melee_kill_stab = 0x516F,
  SCR_OPAQUE_STRING_melee_player_lerp_back = 0x517B,
  SCR_OPAQUE_STRING_melee_playfacialanim = 0x517C,
  SCR_OPAQUE_STRING_melee_resetaction = 0x517E,
  SCR_OPAQUE_STRING_melee_scalar = 0x517F,
  SCR_OPAQUE_STRING_melee_setjumpanimstates = 0x5180,
  SCR_OPAQUE_STRING_melee_standard_checktimeconstraints = 0x5181,
  SCR_OPAQUE_STRING_melee_standard_resetgiveuptime = 0x5187,
  SCR_OPAQUE_STRING_melee_stealthcheck = 0x518A,
  SCR_OPAQUE_STRING_melee_success = 0x518C,
  SCR_OPAQUE_STRING_melee_synch = 0x518F,
  SCR_OPAQUE_STRING_melee_synch_attack = 0x5190,
  SCR_OPAQUE_STRING_melee_trigger = 0x5191,
  SCR_OPAQUE_STRING_meleebiteattackplayer = 0x519B,
  SCR_OPAQUE_STRING_meleefailed = 0x51A0,
  SCR_OPAQUE_STRING_meleeforcedexposedflip = 0x51A1,
  SCR_OPAQUE_STRING_meleeforcedexposedwrestle = 0x51A2,
  SCR_OPAQUE_STRING_meleekilltarget = 0x51A6,
  SCR_OPAQUE_STRING_meleeplayerwhilemoving = 0x51A7,
  SCR_OPAQUE_STRING_meleestrength = 0x51AB,
  SCR_OPAQUE_STRING_meleestruggle_istraverse = 0x51AC,
  SCR_OPAQUE_STRING_meleestrugglevsai_first_attack = 0x51AE,
  SCR_OPAQUE_STRING_meleestrugglevsai_interrupted_animcustom = 0x51AF,
  SCR_OPAQUE_STRING_meleestrugglevsai_interrupted_animcustom_cleanup = 0x51B0,
  SCR_OPAQUE_STRING_meleestrugglevsai_supershort = 0x51B3,
  SCR_OPAQUE_STRING_meleestrugglevsdog = 0x51B5,
  SCR_OPAQUE_STRING_meleestrugglevsdog_justdie = 0x51B9,
  SCR_OPAQUE_STRING_meleestrugglevsdog_traverse = 0x51BB,
  SCR_OPAQUE_STRING_meleestun = 0x51BC,
  SCR_OPAQUE_STRING_memberremovestrings = 0x51C4,
  SCR_OPAQUE_STRING_menu_create = 0x51C9,
  SCR_OPAQUE_STRING_menu_fx_creation = 0x51CB,
  SCR_OPAQUE_STRING_menu_fx_option_set = 0x51CC,
  SCR_OPAQUE_STRING_menu_none = 0x51CD,
  SCR_OPAQUE_STRING_menuspectator = 0x51D2,
  SCR_OPAQUE_STRING_merrick_goes_green = 0x51D4,
  SCR_OPAQUE_STRING_merrick_handle_name_when_scanning = 0x51D5,
  SCR_OPAQUE_STRING_merrick_medbay = 0x51D7,
  SCR_OPAQUE_STRING_merrick_move_to_edge = 0x51D8,
  SCR_OPAQUE_STRING_merrick_scene_dialogue = 0x51DA,
  SCR_OPAQUE_STRING_merrick_shoots_first_guy = 0x51DF,
  SCR_OPAQUE_STRING_metal_detector = 0x51E1,
  SCR_OPAQUE_STRING_metal_detector_dmg_monitor = 0x51E2,
  SCR_OPAQUE_STRING_metal_detector_touch_monitor = 0x51E3,
  SCR_OPAQUE_STRING_metal_detector_weapons = 0x51E4,
  SCR_OPAQUE_STRING_meteorfireworkstructs = 0x51E7,
  SCR_OPAQUE_STRING_meteoroid = 0x51E8,
  SCR_OPAQUE_STRING_meteoroid_start_angles = 0x51EF,
  SCR_OPAQUE_STRING_meteoroid_start_pos = 0x51F0,
  SCR_OPAQUE_STRING_methodsinit = 0x51F1,
  SCR_OPAQUE_STRING_mg = 0x51F2,
  SCR_OPAQUE_STRING_mg42_gunner_manual_think = 0x51F6,
  SCR_OPAQUE_STRING_mg42_gunner_think = 0x51F7,
  SCR_OPAQUE_STRING_mg42_setdifficulty = 0x51F9,
  SCR_OPAQUE_STRING_mg42_suppressionfire = 0x51FA,
  SCR_OPAQUE_STRING_mg42_think = 0x51FC,
  SCR_OPAQUE_STRING_mg42badplace_mintime = 0x51FF,
  SCR_OPAQUE_STRING_mg42pain = 0x5200,
  SCR_OPAQUE_STRING_mg_gunner_team = 0x5203,
  SCR_OPAQUE_STRING_mg_target = 0x5204,
  SCR_OPAQUE_STRING_mg_turret_do_something_while_waiting_for_player = 0x5205,
  SCR_OPAQUE_STRING_mginit = 0x5206,
  SCR_OPAQUE_STRING_mgon = 0x5209,
  SCR_OPAQUE_STRING_mgturret_auto = 0x520D,
  SCR_OPAQUE_STRING_mig29_missile_dives = 0x5220,
  SCR_OPAQUE_STRING_mindetpackdamage = 0x5234,
  SCR_OPAQUE_STRING_mindistancecallout = 0x5235,
  SCR_OPAQUE_STRING_mine_beacon = 0x5237,
  SCR_OPAQUE_STRING_mine_explode = 0x523A,
  SCR_OPAQUE_STRING_mine_notify_on_level = 0x523D,
  SCR_OPAQUE_STRING_mine_spin = 0x5240,
  SCR_OPAQUE_STRING_minedamagemin = 0x5246,
  SCR_OPAQUE_STRING_minedamagemonitor = 0x5247,
  SCR_OPAQUE_STRING_minedamageradius = 0x5248,
  SCR_OPAQUE_STRING_minedetectionheight = 0x524B,
  SCR_OPAQUE_STRING_minedetectionradius = 0x524C,
  SCR_OPAQUE_STRING_mineproximitytrigger = 0x5252,
  SCR_OPAQUE_STRING_mineselfdestructtime = 0x5257,
  SCR_OPAQUE_STRING_minethrown = 0x525A,
  SCR_OPAQUE_STRING_mini_sub_prop_wash_stop = 0x5262,
  SCR_OPAQUE_STRING_minigun_fire = 0x5266,
  SCR_OPAQUE_STRING_minigun_hints_off = 0x5269,
  SCR_OPAQUE_STRING_minigun_hints_on = 0x526A,
  SCR_OPAQUE_STRING_minigun_ignoreme = 0x526B,
  SCR_OPAQUE_STRING_minigun_rumble = 0x526C,
  SCR_OPAQUE_STRING_minigun_turret_placed_listener = 0x5274,
  SCR_OPAQUE_STRING_minigun_turret_watch_ammo = 0x5275,
  SCR_OPAQUE_STRING_minigun_used = 0x5276,
  SCR_OPAQUE_STRING_minigunchance = 0x5277,
  SCR_OPAQUE_STRING_minigunsspinning = 0x527A,
  SCR_OPAQUE_STRING_minimapheight = 0x527F,
  SCR_OPAQUE_STRING_minimaporigin = 0x5280,
  SCR_OPAQUE_STRING_minion_approach = 0x5283,
  SCR_OPAQUE_STRING_minradius = 0x5288,
  SCR_OPAQUE_STRING_missed_enemy = 0x528B,
  SCR_OPAQUE_STRING_missile_dist_internal = 0x5294,
  SCR_OPAQUE_STRING_missile_find_ground_target = 0x5299,
  SCR_OPAQUE_STRING_missile_launcher_destruction_vignette = 0x52A9,
  SCR_OPAQUE_STRING_missile_move_firemissile = 0x52AF,
  SCR_OPAQUE_STRING_missile_starts = 0x52B5,
  SCR_OPAQUE_STRING_missile_towerbuzz = 0x52BA,
  SCR_OPAQUE_STRING_missile_trackrealtarget = 0x52BB,
  SCR_OPAQUE_STRING_missile_truck_fire_missile = 0x52BD,
  SCR_OPAQUE_STRING_missileattractor = 0x52C0,
  SCR_OPAQUE_STRING_missileisgoodtarget = 0x52C9,
  SCR_OPAQUE_STRING_missilelosetarget = 0x52CB,
  SCR_OPAQUE_STRING_missiles_chasing = 0x52D0,
  SCR_OPAQUE_STRING_missiletags = 0x52D4,
  SCR_OPAQUE_STRING_missiletargetangle = 0x52D5,
  SCR_OPAQUE_STRING_missiletargetflareradius = 0x52D6,
  SCR_OPAQUE_STRING_missing_animation_parameters = 0x52D8,
  SCR_OPAQUE_STRING_mission_fail_func = 0x52DA,
  SCR_OPAQUE_STRING_mission_failed_garage = 0x52DC,
  SCR_OPAQUE_STRING_mission_finished = 0x52E0,
  SCR_OPAQUE_STRING_mission_flag_inits = 0x52E1,
  SCR_OPAQUE_STRING_mission_post_inits = 0x52EA,
  SCR_OPAQUE_STRING_mission_recon = 0x52EC,
  SCR_OPAQUE_STRING_missionfail = 0x52EF,
  SCR_OPAQUE_STRING_missionfail_rorke = 0x52F0,
  SCR_OPAQUE_STRING_mix = 0x52FA,
  SCR_OPAQUE_STRING_mk32_badassery = 0x52FE,
  SCR_OPAQUE_STRING_mlrs_start_qte = 0x5308,
  SCR_OPAQUE_STRING_mobilemortar = 0x530A,
  SCR_OPAQUE_STRING_mod = 0x530B,
  SCR_OPAQUE_STRING_model_dummy_death = 0x530E,
  SCR_OPAQUE_STRING_model_init = 0x530F,
  SCR_OPAQUE_STRING_model_name_dummy = 0x5310,
  SCR_OPAQUE_STRING_model_name_enemy = 0x5311,
  SCR_OPAQUE_STRING_modelbase = 0x5314,
  SCR_OPAQUE_STRING_modelbombsquad = 0x5316,
  SCR_OPAQUE_STRING_modeldummyon = 0x5319,
  SCR_OPAQUE_STRING_modelmgturret = 0x531A,
  SCR_OPAQUE_STRING_modify_player_speed = 0x5322,
  SCR_OPAQUE_STRING_modify_sentry_setting = 0x5324,
  SCR_OPAQUE_STRING_modifydamage = 0x5325,
  SCR_OPAQUE_STRING_mods_override = 0x5328,
  SCR_OPAQUE_STRING_modulate_speed_based_on_progress = 0x5329,
  SCR_OPAQUE_STRING_module_int = 0x532B,
  SCR_OPAQUE_STRING_monitor_attackable_ent_damage = 0x5332,
  SCR_OPAQUE_STRING_monitor_bar_drift = 0x5334,
  SCR_OPAQUE_STRING_monitor_can_cut_rope = 0x5338,
  SCR_OPAQUE_STRING_monitor_cautious_approach_dangerous_locations = 0x5339,
  SCR_OPAQUE_STRING_monitor_controls_and_fx = 0x533E,
  SCR_OPAQUE_STRING_monitor_deaths_on_dynamic_array = 0x533F,
  SCR_OPAQUE_STRING_monitor_drill_complete = 0x5342,
  SCR_OPAQUE_STRING_monitor_enemies_in_pods = 0x5343,
  SCR_OPAQUE_STRING_monitor_enemy_for_downed = 0x5345,
  SCR_OPAQUE_STRING_monitor_fx = 0x534A,
  SCR_OPAQUE_STRING_monitor_guy_moveup = 0x534C,
  SCR_OPAQUE_STRING_monitor_missile_distance = 0x5350,
  SCR_OPAQUE_STRING_monitor_pain = 0x5353,
  SCR_OPAQUE_STRING_monitor_spawners = 0x535F,
  SCR_OPAQUE_STRING_monitor_touching = 0x5362,
  SCR_OPAQUE_STRING_monitor_trig_activation = 0x5363,
  SCR_OPAQUE_STRING_monitorads_blend_dof = 0x5366,
  SCR_OPAQUE_STRING_monitorads_zoom_elem_offset = 0x5367,
  SCR_OPAQUE_STRING_monitorads_zoom_elem_reset = 0x5368,
  SCR_OPAQUE_STRING_monitorads_zoom_hud_delay = 0x5369,
  SCR_OPAQUE_STRING_monitorads_zoom_out = 0x536B,
  SCR_OPAQUE_STRING_monitorconcussion = 0x5379,
  SCR_OPAQUE_STRING_monitorenemymissilefire = 0x5384,
  SCR_OPAQUE_STRING_monitorflares = 0x538B,
  SCR_OPAQUE_STRING_monitorhealth_ondeath = 0x5397,
  SCR_OPAQUE_STRING_monitorhealth_ondeath_apache_crash = 0x5398,
  SCR_OPAQUE_STRING_monitorkills = 0x539E,
  SCR_OPAQUE_STRING_monitorlivetime = 0x53A2,
  SCR_OPAQUE_STRING_monitormagcycle = 0x53A6,
  SCR_OPAQUE_STRING_monitormarkervisibility = 0x53A8,
  SCR_OPAQUE_STRING_monitormisc = 0x53AA,
  SCR_OPAQUE_STRING_monitormovedown = 0x53AD,
  SCR_OPAQUE_STRING_monitormovementdistance = 0x53AE,
  SCR_OPAQUE_STRING_monitorpositioncamping = 0x53B3,
  SCR_OPAQUE_STRING_monitorprocesschallenge = 0x53B4,
  SCR_OPAQUE_STRING_monitorreload = 0x53B5,
  SCR_OPAQUE_STRING_monitorrocketfire2 = 0x53B9,
  SCR_OPAQUE_STRING_monitorscopechange = 0x53BD,
  SCR_OPAQUE_STRING_monitorsinglesprintdistance = 0x53C1,
  SCR_OPAQUE_STRING_monitorspecialroundend = 0x53C2,
  SCR_OPAQUE_STRING_monitorstateshud = 0x53C8,
  SCR_OPAQUE_STRING_monitorsupportdropprogress = 0x53CD,
  SCR_OPAQUE_STRING_monitorthermalvision = 0x53D2,
  SCR_OPAQUE_STRING_monitorturretfire = 0x53D5,
  SCR_OPAQUE_STRING_mortar_ends = 0x53DE,
  SCR_OPAQUE_STRING_mortar_fire_on_struct = 0x53DF,
  SCR_OPAQUE_STRING_mortardamageradius = 0x53EE,
  SCR_OPAQUE_STRING_mortardamagetriggerdist = 0x53EF,
  SCR_OPAQUE_STRING_mortarearthquakeradius = 0x53F0,
  SCR_OPAQUE_STRING_mortarfx = 0x53F3,
  SCR_OPAQUE_STRING_mortargroup = 0x53F4,
  SCR_OPAQUE_STRING_mortarnoincomingsound = 0x53F7,
  SCR_OPAQUE_STRING_mortarrecoil = 0x53F9,
  SCR_OPAQUE_STRING_mortars = 0x53FA,
  SCR_OPAQUE_STRING_mortartrigger = 0x53FD,
  SCR_OPAQUE_STRING_mosley_airlock_ln_1 = 0x5400,
  SCR_OPAQUE_STRING_mosley_airlock_ln_2 = 0x5401,
  SCR_OPAQUE_STRING_motion_light = 0x5402,
  SCR_OPAQUE_STRING_motion_trigger = 0x5407,
  SCR_OPAQUE_STRING_motionsensormarkedby = 0x5409,
  SCR_OPAQUE_STRING_mount_tank = 0x540D,
  SCR_OPAQUE_STRING_movable_cover_init = 0x5417,
  SCR_OPAQUE_STRING_movable_cover_move_delay = 0x541C,
  SCR_OPAQUE_STRING_movable_cover_parse_parameters = 0x541E,
  SCR_OPAQUE_STRING_movable_cover_trigger = 0x5421,
  SCR_OPAQUE_STRING_movable_cover_update_use_icon = 0x5422,
  SCR_OPAQUE_STRING_movable_cover_use_icon = 0x5423,
  SCR_OPAQUE_STRING_movable_cover_wait_for_user_or_timeout = 0x5425,
  SCR_OPAQUE_STRING_movable_type = 0x5426,
  SCR_OPAQUE_STRING_movables = 0x5427,
  SCR_OPAQUE_STRING_move_all_fx = 0x5429,
  SCR_OPAQUE_STRING_move_allies_from_fire_blocker = 0x542A,
  SCR_OPAQUE_STRING_move_ally_to_mesh = 0x542C,
  SCR_OPAQUE_STRING_move_angles = 0x542E,
  SCR_OPAQUE_STRING_move_apache_to_main_island = 0x542F,
  SCR_OPAQUE_STRING_move_arc = 0x5430,
  SCR_OPAQUE_STRING_move_arc_dist = 0x5431,
  SCR_OPAQUE_STRING_move_arc_zodiac = 0x5432,
  SCR_OPAQUE_STRING_move_check = 0x5437,
  SCR_OPAQUE_STRING_move_controlroom_to_new_location = 0x5439,
  SCR_OPAQUE_STRING_move_explosion_buildup_rumble = 0x5440,
  SCR_OPAQUE_STRING_move_player_to_start_point = 0x5448,
  SCR_OPAQUE_STRING_move_previous = 0x544A,
  SCR_OPAQUE_STRING_move_primary_light = 0x544B,
  SCR_OPAQUE_STRING_move_side = 0x5451,
  SCR_OPAQUE_STRING_move_speed_scalar = 0x5452,
  SCR_OPAQUE_STRING_move_state_loop = 0x5458,
  SCR_OPAQUE_STRING_move_state_loop_run = 0x5459,
  SCR_OPAQUE_STRING_move_state_shift_back = 0x545A,
  SCR_OPAQUE_STRING_move_state_start = 0x545B,
  SCR_OPAQUE_STRING_move_to_breach = 0x545F,
  SCR_OPAQUE_STRING_move_transition_arrays = 0x5468,
  SCR_OPAQUE_STRING_move_with_plane = 0x5471,
  SCR_OPAQUE_STRING_move_with_rate = 0x5472,
  SCR_OPAQUE_STRING_movecovertocover_checkstartpose = 0x5477,
  SCR_OPAQUE_STRING_movedlow = 0x547A,
  SCR_OPAQUE_STRING_movedrecently = 0x547C,
  SCR_OPAQUE_STRING_moveloop = 0x547E,
  SCR_OPAQUE_STRING_movement_back = 0x5487,
  SCR_OPAQUE_STRING_movemsg = 0x548C,
  SCR_OPAQUE_STRING_moveplaybackrate = 0x548F,
  SCR_OPAQUE_STRING_mover_candidates = 0x5492,
  SCR_OPAQUE_STRING_mover_delete = 0x5493,
  SCR_OPAQUE_STRING_movercreate = 0x5496,
  SCR_OPAQUE_STRING_moverun = 0x549A,
  SCR_OPAQUE_STRING_moverwaitforuse = 0x549B,
  SCR_OPAQUE_STRING_movespeed_multiplier = 0x549F,
  SCR_OPAQUE_STRING_movespeedscale = 0x54A2,
  SCR_OPAQUE_STRING_movestartbattlechatter = 0x54A5,
  SCR_OPAQUE_STRING_moveswim = 0x54A8,
  SCR_OPAQUE_STRING_moveswim_combat_forward_enter = 0x54AC,
  SCR_OPAQUE_STRING_moveswim_combat_forward_exit = 0x54AD,
  SCR_OPAQUE_STRING_moveswim_combat_strafe_exit = 0x54B0,
  SCR_OPAQUE_STRING_moveswim_set = 0x54B5,
  SCR_OPAQUE_STRING_moveto_speed = 0x54BB,
  SCR_OPAQUE_STRING_moving = 0x54C6,
  SCR_OPAQUE_STRING_moving_cover_death = 0x54C9,
  SCR_OPAQUE_STRING_moving_cover_guys = 0x54CA,
  SCR_OPAQUE_STRING_moving_cover_jumped = 0x54CB,
  SCR_OPAQUE_STRING_moving_cover_lightsoff = 0x54CC,
  SCR_OPAQUE_STRING_moving_cover_obj1 = 0x54CE,
  SCR_OPAQUE_STRING_moving_crates_plane = 0x54D4,
  SCR_OPAQUE_STRING_moving_jeeps_and_crates = 0x54D7,
  SCR_OPAQUE_STRING_moving_platform_empty_func = 0x54DC,
  SCR_OPAQUE_STRING_moving_water = 0x54DE,
  SCR_OPAQUE_STRING_mp_alien_town_intro_drill_setup = 0x54E2,
  SCR_OPAQUE_STRING_mp_dart_is_light_entity = 0x54EC,
  SCR_OPAQUE_STRING_mp_dart_restarteffect = 0x54EE,
  SCR_OPAQUE_STRING_mp_dart_tv_flicker = 0x54EF,
  SCR_OPAQUE_STRING_mssl_launch_destory_sfx = 0x54F3,
  SCR_OPAQUE_STRING_mugger_add_extra_tag = 0x54F9,
  SCR_OPAQUE_STRING_mugger_bank_limit = 0x54FA,
  SCR_OPAQUE_STRING_mugger_delayed_banking = 0x54FD,
  SCR_OPAQUE_STRING_mugger_first_unused_or_oldest_extra_tag = 0x5500,
  SCR_OPAQUE_STRING_mugger_fx_playing = 0x5502,
  SCR_OPAQUE_STRING_mugger_jackpot_tags_spawned = 0x550E,
  SCR_OPAQUE_STRING_mugger_jackpot_timer = 0x5511,
  SCR_OPAQUE_STRING_mugger_last_mega_drop = 0x5514,
  SCR_OPAQUE_STRING_mugger_max_extra_tags = 0x5515,
  SCR_OPAQUE_STRING_mugger_pile_icon_remove = 0x551B,
  SCR_OPAQUE_STRING_mugger_scorelimit = 0x551C,
  SCR_OPAQUE_STRING_mugger_tag_pickup_wait = 0x551D,
  SCR_OPAQUE_STRING_multikill = 0x5526,
  SCR_OPAQUE_STRING_multiple_c4 = 0x5529,
  SCR_OPAQUE_STRING_multiteambased = 0x552E,
  SCR_OPAQUE_STRING_music_escape_hot = 0x5532,
  SCR_OPAQUE_STRING_music_loop_stealth = 0x5537,
  SCR_OPAQUE_STRING_music_on_flag = 0x5539,
  SCR_OPAQUE_STRING_music_play = 0x553A,
  SCR_OPAQUE_STRING_music_play_jg = 0x553C,
  SCR_OPAQUE_STRING_music_stealth_tension_loop = 0x5540,
  SCR_OPAQUE_STRING_musiclength = 0x5544,
  SCR_OPAQUE_STRING_muzzleflashoverride = 0x5546,
  SCR_OPAQUE_STRING_my_animnode = 0x5547,
  SCR_OPAQUE_STRING_my_speed = 0x554B,
  SCR_OPAQUE_STRING_n_door_knock = 0x5554,
  SCR_OPAQUE_STRING_n_hesh_stumble_and_path = 0x5555,
  SCR_OPAQUE_STRING_n_vehicle_1 = 0x5556,
  SCR_OPAQUE_STRING_n_vehicle_3 = 0x555A,
  SCR_OPAQUE_STRING_nag_if_shot = 0x555F,
  SCR_OPAQUE_STRING_nag_player_to_jump = 0x5565,
  SCR_OPAQUE_STRING_name1 = 0x556C,
  SCR_OPAQUE_STRING_names = 0x5573,
  SCR_OPAQUE_STRING_near_dist_sq = 0x5580,
  SCR_OPAQUE_STRING_neardistance = 0x5584,
  SCR_OPAQUE_STRING_nearest_nodes = 0x5586,
  SCR_OPAQUE_STRING_nearest_point_on_pathgrid = 0x5587,
  SCR_OPAQUE_STRING_necksnapped = 0x558A,
  SCR_OPAQUE_STRING_needflexibleheightsupport = 0x558D,
  SCR_OPAQUE_STRING_needrecalculategoodshootpos = 0x558E,
  SCR_OPAQUE_STRING_neutralflagfx = 0x55A3,
  SCR_OPAQUE_STRING_neverenablecqb = 0x55A6,
  SCR_OPAQUE_STRING_new_glowstick_scene = 0x55B6,
  SCR_OPAQUE_STRING_new_l_pip_corner = 0x55B9,
  SCR_OPAQUE_STRING_new_rope_roll = 0x55BD,
  SCR_OPAQUE_STRING_new_submix_hud = 0x55C0,
  SCR_OPAQUE_STRING_new_volmod_hud = 0x55C5,
  SCR_OPAQUE_STRING_newenemyreactiondistsq_old = 0x55C8,
  SCR_OPAQUE_STRING_newenemysurprisedreaction = 0x55C9,
  SCR_OPAQUE_STRING_newfallback_overmind = 0x55CA,
  SCR_OPAQUE_STRING_newradialbutton = 0x55CC,
  SCR_OPAQUE_STRING_newrandomcrate = 0x55CE,
  SCR_OPAQUE_STRING_next = 0x55D0,
  SCR_OPAQUE_STRING_next_bomb_damage_vo_time = 0x55D1,
  SCR_OPAQUE_STRING_next_earthquake = 0x55D4,
  SCR_OPAQUE_STRING_next_minion_vo_time = 0x55D8,
  SCR_OPAQUE_STRING_next_reactive_time = 0x55DF,
  SCR_OPAQUE_STRING_nextallowedlooktime = 0x55E3,
  SCR_OPAQUE_STRING_nextdoorgrenadetime = 0x55E8,
  SCR_OPAQUE_STRING_nextgrenadedrop = 0x55EB,
  SCR_OPAQUE_STRING_nextmeleechecktarget = 0x55F1,
  SCR_OPAQUE_STRING_nextmeleechecktime = 0x55F2,
  SCR_OPAQUE_STRING_nextmissiletag = 0x55F5,
  SCR_OPAQUE_STRING_nextorigin = 0x55F8,
  SCR_OPAQUE_STRING_nextpeekoutattempttime = 0x55F9,
  SCR_OPAQUE_STRING_nextsaytimes = 0x55FB,
  SCR_OPAQUE_STRING_nextstandinghitdying = 0x55FD,
  SCR_OPAQUE_STRING_nh90_doors_open = 0x5600,
  SCR_OPAQUE_STRING_nightvision_dlight = 0x5603,
  SCR_OPAQUE_STRING_nightvision_effectsoff = 0x5605,
  SCR_OPAQUE_STRING_nightvision_started = 0x560A,
  SCR_OPAQUE_STRING_ninebangexplodewaiter = 0x560D,
  SCR_OPAQUE_STRING_nml_locations = 0x5611,
  SCR_OPAQUE_STRING_no_abilities_timer = 0x5612,
  SCR_OPAQUE_STRING_no_attack_hint = 0x5614,
  SCR_OPAQUE_STRING_no_crouch_or_prone_think_for_player = 0x5618,
  SCR_OPAQUE_STRING_no_delete = 0x5619,
  SCR_OPAQUE_STRING_no_edge_death = 0x561C,
  SCR_OPAQUE_STRING_no_go_back_into_field = 0x5621,
  SCR_OPAQUE_STRING_no_moving_unresolved_collisions = 0x5627,
  SCR_OPAQUE_STRING_no_prone = 0x562B,
  SCR_OPAQUE_STRING_no_swept_hint = 0x5632,
  SCR_OPAQUE_STRING_no_tremor = 0x5634,
  SCR_OPAQUE_STRING_no_vehicle_getoutanim = 0x5635,
  SCR_OPAQUE_STRING_no_vehicle_ragdoll = 0x5636,
  SCR_OPAQUE_STRING_node_array = 0x563E,
  SCR_OPAQUE_STRING_node_change_logic = 0x563F,
  SCR_OPAQUE_STRING_node_closest = 0x5640,
  SCR_OPAQUE_STRING_node_is_valid_outside_for_vanguard = 0x5646,
  SCR_OPAQUE_STRING_node_search = 0x5649,
  SCR_OPAQUE_STRING_node_test = 0x564A,
  SCR_OPAQUE_STRING_node_within_use_radius_of_crate = 0x564E,
  SCR_OPAQUE_STRING_nodes = 0x5654,
  SCR_OPAQUE_STRING_nodes_array = 0x5655,
  SCR_OPAQUE_STRING_nodes_start = 0x5658,
  SCR_OPAQUE_STRING_nodescore = 0x5659,
  SCR_OPAQUE_STRING_nodisconnect = 0x565B,
  SCR_OPAQUE_STRING_nodroneweaponsound = 0x565C,
  SCR_OPAQUE_STRING_nofirstframemelee = 0x565F,
  SCR_OPAQUE_STRING_nofour = 0x5660,
  SCR_OPAQUE_STRING_nogun = 0x5662,
  SCR_OPAQUE_STRING_noise_amplitude = 0x5666,
  SCR_OPAQUE_STRING_nomeleechargedelay = 0x5669,
  SCR_OPAQUE_STRING_noragdollents = 0x5675,
  SCR_OPAQUE_STRING_normal_speed = 0x5678,
  SCR_OPAQUE_STRING_norunreload = 0x5681,
  SCR_OPAQUE_STRING_not_closing = 0x5688,
  SCR_OPAQUE_STRING_notargethudelem = 0x568D,
  SCR_OPAQUE_STRING_note_track_start_fx_on_tag = 0x5690,
  SCR_OPAQUE_STRING_noteleport = 0x5695,
  SCR_OPAQUE_STRING_notetrack_blast_shake_early = 0x569B,
  SCR_OPAQUE_STRING_notetrack_command_dialog_end = 0x569D,
  SCR_OPAQUE_STRING_notetrack_control_room_allow_free_look = 0x56A0,
  SCR_OPAQUE_STRING_notetrack_derrick_chunk_hit_barrels = 0x56A3,
  SCR_OPAQUE_STRING_notetrack_derrick_debris_hitground = 0x56A6,
  SCR_OPAQUE_STRING_notetrack_derrick_large_explosion = 0x56A8,
  SCR_OPAQUE_STRING_notetrack_derrick_small_explosion = 0x56A9,
  SCR_OPAQUE_STRING_notetrack_end_slomo = 0x56AB,
  SCR_OPAQUE_STRING_notetrack_oiltank_catwalk_swap = 0x56B8,
  SCR_OPAQUE_STRING_notetrack_player_breach_water = 0x56BC,
  SCR_OPAQUE_STRING_notetrack_release_allies = 0x56C3,
  SCR_OPAQUE_STRING_notetrack_shake_start = 0x56C5,
  SCR_OPAQUE_STRING_notetrack_start_slomo = 0x56CD,
  SCR_OPAQUE_STRING_notetrack_swim_begin_player_control = 0x56CE,
  SCR_OPAQUE_STRING_notetrackalertnesscasual = 0x56D8,
  SCR_OPAQUE_STRING_notetrackbodyfall = 0x56D9,
  SCR_OPAQUE_STRING_notetrackfire = 0x56DD,
  SCR_OPAQUE_STRING_notetrackguntochest = 0x56E5,
  SCR_OPAQUE_STRING_notetrackmovementstop = 0x56EA,
  SCR_OPAQUE_STRING_notetrackpistolpickup = 0x56EC,
  SCR_OPAQUE_STRING_notetrackpistolputaway = 0x56ED,
  SCR_OPAQUE_STRING_notetrackpistolrechamber = 0x56EE,
  SCR_OPAQUE_STRING_notetrackposecrawl = 0x56F0,
  SCR_OPAQUE_STRING_noteworthy_check = 0x56FC,
  SCR_OPAQUE_STRING_notfirsttime = 0x56FD,
  SCR_OPAQUE_STRING_notfirsttimedogs = 0x56FE,
  SCR_OPAQUE_STRING_notfirsttimedogvests = 0x56FF,
  SCR_OPAQUE_STRING_notify_baddies_to_retreat = 0x5703,
  SCR_OPAQUE_STRING_notify_enable = 0x5706,
  SCR_OPAQUE_STRING_notify_moving_platform_invalid = 0x570B,
  SCR_OPAQUE_STRING_notify_on_damage = 0x570F,
  SCR_OPAQUE_STRING_notify_spotted_on_damage = 0x571A,
  SCR_OPAQUE_STRING_notify_trigger = 0x571C,
  SCR_OPAQUE_STRING_notifyaftertime = 0x571E,
  SCR_OPAQUE_STRING_notifydamage = 0x5721,
  SCR_OPAQUE_STRING_notifydamageafterframe = 0x5722,
  SCR_OPAQUE_STRING_notifydamagenotdone = 0x5723,
  SCR_OPAQUE_STRING_notifyonanimend = 0x572A,
  SCR_OPAQUE_STRING_notifyoverlay = 0x572E,
  SCR_OPAQUE_STRING_notifyroundover = 0x572F,
  SCR_OPAQUE_STRING_notifytext = 0x5733,
  SCR_OPAQUE_STRING_notsolid_ents = 0x5737,
  SCR_OPAQUE_STRING_npc_physics_pulse = 0x573C,
  SCR_OPAQUE_STRING_npc_tank_combat_init = 0x573E,
  SCR_OPAQUE_STRING_npcid = 0x573F,
  SCR_OPAQUE_STRING_nuke_blur = 0x5743,
  SCR_OPAQUE_STRING_nuke_empjam = 0x5747,
  SCR_OPAQUE_STRING_nuke_soundobject = 0x574E,
  SCR_OPAQUE_STRING_nukecankill = 0x5753,
  SCR_OPAQUE_STRING_nukecratethink = 0x5756,
  SCR_OPAQUE_STRING_nukedeathsimple = 0x5759,
  SCR_OPAQUE_STRING_nukedetonated = 0x575A,
  SCR_OPAQUE_STRING_nukeslowmo = 0x5765,
  SCR_OPAQUE_STRING_nukevisioninprogress = 0x576A,
  SCR_OPAQUE_STRING_num_players_left = 0x5771,
  SCR_OPAQUE_STRING_numagents = 0x5773,
  SCR_OPAQUE_STRING_numareas = 0x5774,
  SCR_OPAQUE_STRING_numberoffishinexistence = 0x5776,
  SCR_OPAQUE_STRING_numbombs = 0x577B,
  SCR_OPAQUE_STRING_numdropcrates = 0x5781,
  SCR_OPAQUE_STRING_numenemiesclose = 0x5782,
  SCR_OPAQUE_STRING_numexplosivesexceedmodelcapacity = 0x5785,
  SCR_OPAQUE_STRING_numfriendlyvoices = 0x5787,
  SCR_OPAQUE_STRING_numgasstrikeactive = 0x5789,
  SCR_OPAQUE_STRING_numgrenadesinprogresstowardsplayer = 0x578A,
  SCR_OPAQUE_STRING_numspeakers = 0x5794,
  SCR_OPAQUE_STRING_nvg_animted_scene = 0x579D,
  SCR_OPAQUE_STRING_nvg_goggles_off = 0x57A0,
  SCR_OPAQUE_STRING_nvg_on_check = 0x57A5,
  SCR_OPAQUE_STRING_nvgs_on_blackout = 0x57A9,
  SCR_OPAQUE_STRING_obj = 0x57AB,
  SCR_OPAQUE_STRING_obj_capture_hvt = 0x57AF,
  SCR_OPAQUE_STRING_obj_clear_deck = 0x57B0,
  SCR_OPAQUE_STRING_obj_enterbase = 0x57B5,
  SCR_OPAQUE_STRING_obj_exists = 0x57B8,
  SCR_OPAQUE_STRING_obj_flags = 0x57BA,
  SCR_OPAQUE_STRING_obj_flight_deck = 0x57BB,
  SCR_OPAQUE_STRING_obj_getingetajaxgetout = 0x57BC,
  SCR_OPAQUE_STRING_obj_getinjeep = 0x57BD,
  SCR_OPAQUE_STRING_obj_origin = 0x57C0,
  SCR_OPAQUE_STRING_obj_sparrow = 0x57C3,
  SCR_OPAQUE_STRING_objective = 0x57C9,
  SCR_OPAQUE_STRING_objective_breach = 0x57CA,
  SCR_OPAQUE_STRING_objective_is_inactive = 0x57CF,
  SCR_OPAQUE_STRING_objective_outline_add = 0x57D0,
  SCR_OPAQUE_STRING_objective_outline_remove = 0x57D1,
  SCR_OPAQUE_STRING_objectivepointsmod = 0x57DB,
  SCR_OPAQUE_STRING_objectives = 0x57DC,
  SCR_OPAQUE_STRING_objectivescaler = 0x57DD,
  SCR_OPAQUE_STRING_objid_axis = 0x57E1,
  SCR_OPAQUE_STRING_objpoints = 0x57E9,
  SCR_OPAQUE_STRING_occlusion = 0x57EF,
  SCR_OPAQUE_STRING_occupied = 0x57F1,
  SCR_OPAQUE_STRING_odin_assault_perform_action = 0x57FD,
  SCR_OPAQUE_STRING_odin_clear_using = 0x57FE,
  SCR_OPAQUE_STRING_odin_control_player_speed = 0x57FF,
  SCR_OPAQUE_STRING_odin_drop_weapon = 0x5801,
  SCR_OPAQUE_STRING_odin_fac_cart = 0x5806,
  SCR_OPAQUE_STRING_odin_fireweapon = 0x580A,
  SCR_OPAQUE_STRING_odin_flag_inits = 0x580C,
  SCR_OPAQUE_STRING_odin_fov = 0x580E,
  SCR_OPAQUE_STRING_odin_hall_escape_turn02_ally_spawn = 0x5815,
  SCR_OPAQUE_STRING_odin_hall_escape_turn02_player_spawn = 0x5817,
  SCR_OPAQUE_STRING_odin_hint_string_init = 0x5818,
  SCR_OPAQUE_STRING_odin_leave = 0x5820,
  SCR_OPAQUE_STRING_odin_overlay_ent = 0x5829,
  SCR_OPAQUE_STRING_odin_satellite = 0x5830,
  SCR_OPAQUE_STRING_odin_script_setup = 0x5831,
  SCR_OPAQUE_STRING_odin_waitfordonefiring = 0x583B,
  SCR_OPAQUE_STRING_odin_watchoutlines = 0x583E,
  SCR_OPAQUE_STRING_odin_zoom_up = 0x5844,
  SCR_OPAQUE_STRING_odinsettings = 0x5845,
  SCR_OPAQUE_STRING_off_flashlight = 0x5847,
  SCR_OPAQUE_STRING_office_enemy_vo = 0x5853,
  SCR_OPAQUE_STRING_officercount = 0x585E,
  SCR_OPAQUE_STRING_officerid = 0x585F,
  SCR_OPAQUE_STRING_officers = 0x5860,
  SCR_OPAQUE_STRING_offscreen_shader_blink = 0x5865,
  SCR_OPAQUE_STRING_offset = 0x5866,
  SCR_OPAQUE_STRING_offset_percent = 0x5869,
  SCR_OPAQUE_STRING_offsetdist = 0x586D,
  SCR_OPAQUE_STRING_offsetone = 0x586E,
  SCR_OPAQUE_STRING_offsetzero = 0x5871,
  SCR_OPAQUE_STRING_og_animname = 0x5873,
  SCR_OPAQUE_STRING_og_health = 0x5876,
  SCR_OPAQUE_STRING_og_script_stealthgroup = 0x5879,
  SCR_OPAQUE_STRING_oilrig_jumpsuit_ondamage = 0x587D,
  SCR_OPAQUE_STRING_oilrig_jumpsuit_precache = 0x587F,
  SCR_OPAQUE_STRING_oilrig_jumpsuits = 0x5880,
  SCR_OPAQUE_STRING_oilrocks_apache_hint_timers = 0x5881,
  SCR_OPAQUE_STRING_oilrocks_locations = 0x5882,
  SCR_OPAQUE_STRING_old = 0x5883,
  SCR_OPAQUE_STRING_old_ai_target = 0x5889,
  SCR_OPAQUE_STRING_old_alpha = 0x588A,
  SCR_OPAQUE_STRING_old_ang = 0x588B,
  SCR_OPAQUE_STRING_old_baseaccuracy = 0x588E,
  SCR_OPAQUE_STRING_old_color = 0x588F,
  SCR_OPAQUE_STRING_old_disablearrivals = 0x5892,
  SCR_OPAQUE_STRING_old_dist = 0x5893,
  SCR_OPAQUE_STRING_old_fixednode = 0x5895,
  SCR_OPAQUE_STRING_old_ignoreme = 0x589A,
  SCR_OPAQUE_STRING_old_movementtype = 0x58A1,
  SCR_OPAQUE_STRING_old_weap = 0x58AF,
  SCR_OPAQUE_STRING_old_weapon = 0x58B0,
  SCR_OPAQUE_STRING_oldbaseaccuracy = 0x58B4,
  SCR_OPAQUE_STRING_oldcombatmode = 0x58B6,
  SCR_OPAQUE_STRING_oldfightdist = 0x58BB,
  SCR_OPAQUE_STRING_oldgoalradius = 0x58BD,
  SCR_OPAQUE_STRING_oldgrenadeawareness = 0x58BF,
  SCR_OPAQUE_STRING_oldmaxdist = 0x58C5,
  SCR_OPAQUE_STRING_oldorigin = 0x58CC,
  SCR_OPAQUE_STRING_oldprimarygun = 0x58CF,
  SCR_OPAQUE_STRING_oldradius = 0x58D0,
  SCR_OPAQUE_STRING_on_agent_squadmate_killed = 0x58D9,
  SCR_OPAQUE_STRING_on_alien_type_killed = 0x58DA,
  SCR_OPAQUE_STRING_on_bridge = 0x58DC,
  SCR_OPAQUE_STRING_on_damaged_finished = 0x58DF,
  SCR_OPAQUE_STRING_on_fire_sabot = 0x58E3,
  SCR_OPAQUE_STRING_on_hintstring = 0x58E4,
  SCR_OPAQUE_STRING_on_path_grid = 0x58EA,
  SCR_OPAQUE_STRING_on_pop_smoke = 0x58EB,
  SCR_OPAQUE_STRING_onagentkilled = 0x58F0,
  SCR_OPAQUE_STRING_onaiconnect = 0x58F1,
  SCR_OPAQUE_STRING_onalienagentkilled = 0x58F3,
  SCR_OPAQUE_STRING_onatv = 0x58F7,
  SCR_OPAQUE_STRING_onback = 0x58F8,
  SCR_OPAQUE_STRING_ondamaged = 0x5907,
  SCR_OPAQUE_STRING_ondamageddelegate = 0x5908,
  SCR_OPAQUE_STRING_ondamagefinish = 0x5909,
  SCR_OPAQUE_STRING_ondeath = 0x590D,
  SCR_OPAQUE_STRING_ondeathfunc = 0x5911,
  SCR_OPAQUE_STRING_ondestroycallback = 0x5914,
  SCR_OPAQUE_STRING_ondetonateexplosive = 0x5917,
  SCR_OPAQUE_STRING_one_missile_kill = 0x591D,
  SCR_OPAQUE_STRING_onemanarmyweaponchangetracker = 0x591F,
  SCR_OPAQUE_STRING_onenter = 0x5921,
  SCR_OPAQUE_STRING_onentercallback = 0x5923,
  SCR_OPAQUE_STRING_onenterdot_player = 0x5925,
  SCR_OPAQUE_STRING_onenterdot_poisondamageoverlay = 0x5927,
  SCR_OPAQUE_STRING_onenterstate = 0x592A,
  SCR_OPAQUE_STRING_onfinalsurvivor = 0x5937,
  SCR_OPAQUE_STRING_onfirerocket = 0x5939,
  SCR_OPAQUE_STRING_onfirstspawnedplayer = 0x593A,
  SCR_OPAQUE_STRING_ongroundpos = 0x5940,
  SCR_OPAQUE_STRING_onhalftime = 0x5941,
  SCR_OPAQUE_STRING_onhitpitchclamp = 0x5943,
  SCR_OPAQUE_STRING_onjoinedspectators = 0x5944,
  SCR_OPAQUE_STRING_onkill = 0x5947,
  SCR_OPAQUE_STRING_onkillstreakdisowned = 0x5948,
  SCR_OPAQUE_STRING_onkillstreakkilled = 0x5949,
  SCR_OPAQUE_STRING_only_allowable_tactical_goals = 0x594F,
  SCR_OPAQUE_STRING_onmovingplatformcollision = 0x5954,
  SCR_OPAQUE_STRING_onpickup = 0x5957,
  SCR_OPAQUE_STRING_onplayerconnecting = 0x5961,
  SCR_OPAQUE_STRING_onplayerspawned = 0x5969,
  SCR_OPAQUE_STRING_onrespawndelay = 0x596E,
  SCR_OPAQUE_STRING_onrotatingvehicleturret = 0x596F,
  SCR_OPAQUE_STRING_onscorelimit = 0x5973,
  SCR_OPAQUE_STRING_ontriggeredsfx = 0x5983,
  SCR_OPAQUE_STRING_onusedefuseobject = 0x5986,
  SCR_OPAQUE_STRING_onuseplantobject = 0x5988,
  SCR_OPAQUE_STRING_onweapondamage = 0x598B,
  SCR_OPAQUE_STRING_op_barracks = 0x598D,
  SCR_OPAQUE_STRING_op_helo = 0x598E,
  SCR_OPAQUE_STRING_open_and_connect = 0x5990,
  SCR_OPAQUE_STRING_open_angles = 0x5991,
  SCR_OPAQUE_STRING_open_church_doors = 0x5992,
  SCR_OPAQUE_STRING_open_loading_dock_doors = 0x599E,
  SCR_OPAQUE_STRING_open_up_player_view_during_weld = 0x59A4,
  SCR_OPAQUE_STRING_opened_y = 0x59AC,
  SCR_OPAQUE_STRING_opfor_bc_lmg = 0x59B6,
  SCR_OPAQUE_STRING_opfor_catwalk_falling_death = 0x59B7,
  SCR_OPAQUE_STRING_opfor_common_ambush = 0x59B9,
  SCR_OPAQUE_STRING_opfor_crawl = 0x59BA,
  SCR_OPAQUE_STRING_opfor_death_runners = 0x59BB,
  SCR_OPAQUE_STRING_opfor_infil = 0x59BD,
  SCR_OPAQUE_STRING_opfor_m880_escape = 0x59C1,
  SCR_OPAQUE_STRING_opfor_retreat = 0x59C6,
  SCR_OPAQUE_STRING_opfor_starting_runners = 0x59CA,
  SCR_OPAQUE_STRING_opsrey_control_nag_vo = 0x59CB,
  SCR_OPAQUE_STRING_optimal_height = 0x59CC,
  SCR_OPAQUE_STRING_options = 0x59D4,
  SCR_OPAQUE_STRING_orderonqueueddialog = 0x59D8,
  SCR_OPAQUE_STRING_orient_to_face = 0x59E1,
  SCR_OPAQUE_STRING_orientmeleevictim = 0x59E2,
  SCR_OPAQUE_STRING_orig_org = 0x59E6,
  SCR_OPAQUE_STRING_orig_wakeupradius = 0x59EC,
  SCR_OPAQUE_STRING_origin_offset = 0x59F1,
  SCR_OPAQUE_STRING_original_angles = 0x59F3,
  SCR_OPAQUE_STRING_original_height = 0x59F4,
  SCR_OPAQUE_STRING_original_pos = 0x59F6,
  SCR_OPAQUE_STRING_original_yaw = 0x59F9,
  SCR_OPAQUE_STRING_osprey2_gunship_attack = 0x5A03,
  SCR_OPAQUE_STRING_osprey_debug_ai = 0x5A07,
  SCR_OPAQUE_STRING_osprey_hit_fake_targets = 0x5A09,
  SCR_OPAQUE_STRING_osprey_hit_zodiacs = 0x5A0B,
  SCR_OPAQUE_STRING_osprey_missile_side_left = 0x5A0E,
  SCR_OPAQUE_STRING_osprey_props = 0x5A0F,
  SCR_OPAQUE_STRING_other_col_point = 0x5A17,
  SCR_OPAQUE_STRING_otherdir = 0x5A1C,
  SCR_OPAQUE_STRING_outline_init = 0x5A31,
  SCR_OPAQUE_STRING_outline_set_global_width = 0x5A37,
  SCR_OPAQUE_STRING_outline_switch = 0x5A38,
  SCR_OPAQUE_STRING_outlinegethighestinfoforplayer = 0x5A49,
  SCR_OPAQUE_STRING_outlinegethighestpriorityid = 0x5A4A,
  SCR_OPAQUE_STRING_outlineonplayerdisconnect = 0x5A4C,
  SCR_OPAQUE_STRING_outlineremoveplayerfromvisibletoarrays = 0x5A51,
  SCR_OPAQUE_STRING_outro_gate = 0x5A55,
  SCR_OPAQUE_STRING_outro_heli_front = 0x5A56,
  SCR_OPAQUE_STRING_outro_heli_mid = 0x5A57,
  SCR_OPAQUE_STRING_outro_heli_rear = 0x5A58,
  SCR_OPAQUE_STRING_outside_reads = 0x5A62,
  SCR_OPAQUE_STRING_outside_start = 0x5A63,
  SCR_OPAQUE_STRING_overheat = 0x5A6C,
  SCR_OPAQUE_STRING_overheattime = 0x5A6E,
  SCR_OPAQUE_STRING_override_array_delete = 0x5A7C,
  SCR_OPAQUE_STRING_override_check = 0x5A7F,
  SCR_OPAQUE_STRING_override_class_function = 0x5A80,
  SCR_OPAQUE_STRING_override_crawl_death_anims = 0x5A81,
  SCR_OPAQUE_STRING_override_ride_anims = 0x5A85,
  SCR_OPAQUE_STRING_ownerboarded = 0x5A8E,
  SCR_OPAQUE_STRING_ownerfx = 0x5A90,
  SCR_OPAQUE_STRING_ownerradiussq = 0x5A94,
  SCR_OPAQUE_STRING_ownersattacker = 0x5A95,
  SCR_OPAQUE_STRING_ownershipstring = 0x5A97,
  SCR_OPAQUE_STRING_ownerteamid = 0x5A99,
  SCR_OPAQUE_STRING_pa_announcements_chaos_thread = 0x5A9D,
  SCR_OPAQUE_STRING_pain_interval_monitor = 0x5AA7,
  SCR_OPAQUE_STRING_pain_resistance = 0x5AAB,
  SCR_OPAQUE_STRING_pain_setflaggedanimknobrestart = 0x5AAE,
  SCR_OPAQUE_STRING_pain_test = 0x5AAF,
  SCR_OPAQUE_STRING_painai = 0x5AB0,
  SCR_OPAQUE_STRING_painonstairs = 0x5AB4,
  SCR_OPAQUE_STRING_pairbattlebuddy = 0x5ABB,
  SCR_OPAQUE_STRING_panel_array = 0x5AC8,
  SCR_OPAQUE_STRING_panicdistance = 0x5ACC,
  SCR_OPAQUE_STRING_parachute_function = 0x5AD5,
  SCR_OPAQUE_STRING_parachute_intro_sound = 0x5ADA,
  SCR_OPAQUE_STRING_parachute_player_land_sounds = 0x5ADE,
  SCR_OPAQUE_STRING_parachute_unload = 0x5AE1,
  SCR_OPAQUE_STRING_parm2 = 0x5AEA,
  SCR_OPAQUE_STRING_part_2_draw_player = 0x5AFA,
  SCR_OPAQUE_STRING_part_2_gun_reload = 0x5AFF,
  SCR_OPAQUE_STRING_part_2_help_ally = 0x5B00,
  SCR_OPAQUE_STRING_part_2_speedloader = 0x5B05,
  SCR_OPAQUE_STRING_parthealths = 0x5B06,
  SCR_OPAQUE_STRING_participation_point_cap = 0x5B09,
  SCR_OPAQUE_STRING_passenger2turret_anime = 0x5B12,
  SCR_OPAQUE_STRING_passes_spawn_node_filter = 0x5B16,
  SCR_OPAQUE_STRING_passive_missile_settargetandflightmode = 0x5B17,
  SCR_OPAQUE_STRING_pastswitch = 0x5B1A,
  SCR_OPAQUE_STRING_path_clip = 0x5B1D,
  SCR_OPAQUE_STRING_path_gate_open = 0x5B24,
  SCR_OPAQUE_STRING_path_solids = 0x5B28,
  SCR_OPAQUE_STRING_pathdataavailable = 0x5B31,
  SCR_OPAQUE_STRING_pathgoal = 0x5B33,
  SCR_OPAQUE_STRING_pathrandompercent_set = 0x5B35,
  SCR_OPAQUE_STRING_pathstart = 0x5B37,
  SCR_OPAQUE_STRING_patrol_react_anim_count = 0x5B48,
  SCR_OPAQUE_STRING_patrol_scriptedanims = 0x5B4C,
  SCR_OPAQUE_STRING_pavelowmadeselectionvo = 0x5B5F,
  SCR_OPAQUE_STRING_pc_dog_drive_end = 0x5B67,
  SCR_OPAQUE_STRING_pc_dog_drive_killed_by_sniper = 0x5B69,
  SCR_OPAQUE_STRING_pc_house_baker_get_ready = 0x5B6B,
  SCR_OPAQUE_STRING_perk_getdrillhealthscalar = 0x5B84,
  SCR_OPAQUE_STRING_perk_getdrilltimescalar = 0x5B85,
  SCR_OPAQUE_STRING_perk_getpistoloverkill = 0x5B8B,
  SCR_OPAQUE_STRING_perk_getrevivetimescalar = 0x5B8F,
  SCR_OPAQUE_STRING_perksperkname = 0x5B9E,
  SCR_OPAQUE_STRING_persistence_weaponstats = 0x5BAB,
  SCR_OPAQUE_STRING_perslog_weaponstats = 0x5BAF,
  SCR_OPAQUE_STRING_personalcoldbreathstop = 0x5BB2,
  SCR_OPAQUE_STRING_personalitymanuallyset = 0x5BB6,
  SCR_OPAQUE_STRING_pet = 0x5BB9,
  SCR_OPAQUE_STRING_pet_patrol = 0x5BBC,
  SCR_OPAQUE_STRING_pet_patrol_get_available_origin = 0x5BBE,
  SCR_OPAQUE_STRING_phalanx_gun_fire_at_missiles = 0x5BC8,
  SCR_OPAQUE_STRING_phalanx_gun_fire_target = 0x5BCA,
  SCR_OPAQUE_STRING_phalanx_gun_offline = 0x5BCB,
  SCR_OPAQUE_STRING_pharm_roller_shut = 0x5BD0,
  SCR_OPAQUE_STRING_phone = 0x5BD1,
  SCR_OPAQUE_STRING_photo_copier = 0x5BD2,
  SCR_OPAQUE_STRING_photo_copier_init = 0x5BD4,
  SCR_OPAQUE_STRING_photo_light_flicker = 0x5BD8,
  SCR_OPAQUE_STRING_phys_blockers_brush = 0x5BD9,
  SCR_OPAQUE_STRING_phys_blockers_model = 0x5BDA,
  SCR_OPAQUE_STRING_physicsdefaultdamagepush = 0x5BE2,
  SCR_OPAQUE_STRING_physicsjolt_proximity = 0x5BE3,
  SCR_OPAQUE_STRING_physicsmodel = 0x5BE4,
  SCR_OPAQUE_STRING_pianodamagethink = 0x5BEC,
  SCR_OPAQUE_STRING_pianothink = 0x5BED,
  SCR_OPAQUE_STRING_pick_drone_gundown_dummy = 0x5BF0,
  SCR_OPAQUE_STRING_pickai = 0x5BF4,
  SCR_OPAQUE_STRING_pickup_guns = 0x5BF8,
  SCR_OPAQUE_STRING_pickupfunc = 0x5BFC,
  SCR_OPAQUE_STRING_pickupmodelobj = 0x5BFE,
  SCR_OPAQUE_STRING_pickupobjectdelay = 0x5BFF,
  SCR_OPAQUE_STRING_pickuptimer = 0x5C03,
  SCR_OPAQUE_STRING_pillage_area_has_petbomb = 0x5C0B,
  SCR_OPAQUE_STRING_pillage_init = 0x5C0D,
  SCR_OPAQUE_STRING_pillage_spot = 0x5C0E,
  SCR_OPAQUE_STRING_pillage_trigger = 0x5C10,
  SCR_OPAQUE_STRING_pillageable_attachments = 0x5C12,
  SCR_OPAQUE_STRING_pillageable_attachments_dmr = 0x5C15,
  SCR_OPAQUE_STRING_pillageable_attachments_lmg = 0x5C16,
  SCR_OPAQUE_STRING_pillageable_explosives = 0x5C1B,
  SCR_OPAQUE_STRING_pillageinfo = 0x5C1C,
  SCR_OPAQUE_STRING_pilot = 0x5C1E,
  SCR_OPAQUE_STRING_pilot_ai_spawner = 0x5C22,
  SCR_OPAQUE_STRING_pip_ai_cam = 0x5C29,
  SCR_OPAQUE_STRING_pip_border = 0x5C2A,
  SCR_OPAQUE_STRING_pip_camera = 0x5C2B,
  SCR_OPAQUE_STRING_pip_enable = 0x5C30,
  SCR_OPAQUE_STRING_pip_open = 0x5C33,
  SCR_OPAQUE_STRING_pip_static_lines = 0x5C39,
  SCR_OPAQUE_STRING_pip_toggle_ai_cam = 0x5C3B,
  SCR_OPAQUE_STRING_pipe_calc_ballistic = 0x5C3F,
  SCR_OPAQUE_STRING_pipe_calc_splash = 0x5C41,
  SCR_OPAQUE_STRING_pipe_deck_fx = 0x5C43,
  SCR_OPAQUE_STRING_pipe_fx_array = 0x5C45,
  SCR_OPAQUE_STRING_pipe_logic = 0x5C46,
  SCR_OPAQUE_STRING_pistol_ammo_remaining = 0x5C52,
  SCR_OPAQUE_STRING_pistol_overkill = 0x5C54,
  SCR_OPAQUE_STRING_pistolcombatspeedscalar = 0x5C57,
  SCR_OPAQUE_STRING_pistolshoot = 0x5C58,
  SCR_OPAQUE_STRING_pitch_offset_ground = 0x5C5F,
  SCR_OPAQUE_STRING_place_defenses = 0x5C66,
  SCR_OPAQUE_STRING_place_sentry = 0x5C67,
  SCR_OPAQUE_STRING_place_weapon_on = 0x5C69,
  SCR_OPAQUE_STRING_placed_sentry = 0x5C6B,
  SCR_OPAQUE_STRING_placedims = 0x5C6C,
  SCR_OPAQUE_STRING_placedmodel = 0x5C6D,
  SCR_OPAQUE_STRING_placedsfx = 0x5C6E,
  SCR_OPAQUE_STRING_placeweaponon = 0x5C78,
  SCR_OPAQUE_STRING_plan_crash_run = 0x5C7C,
  SCR_OPAQUE_STRING_plane_tail = 0x5C8F,
  SCR_OPAQUE_STRING_planemodel = 0x5C94,
  SCR_OPAQUE_STRING_planemove = 0x5C95,
  SCR_OPAQUE_STRING_planes = 0x5C96,
  SCR_OPAQUE_STRING_play2dspawnsound = 0x5CA1,
  SCR_OPAQUE_STRING_play_ally_anim = 0x5CA3,
  SCR_OPAQUE_STRING_play_ally_launcher_vignette = 0x5CA4,
  SCR_OPAQUE_STRING_play_ambient_sfx_int = 0x5CA9,
  SCR_OPAQUE_STRING_play_anim_and_end_slowmo_logic = 0x5CAA,
  SCR_OPAQUE_STRING_play_baker_anim = 0x5CAF,
  SCR_OPAQUE_STRING_play_basic_pain_overlay = 0x5CB0,
  SCR_OPAQUE_STRING_play_chatter = 0x5CB4,
  SCR_OPAQUE_STRING_play_console_scene = 0x5CBA,
  SCR_OPAQUE_STRING_play_distant_cloud_design = 0x5CC6,
  SCR_OPAQUE_STRING_play_fire = 0x5CCE,
  SCR_OPAQUE_STRING_play_foilage_sound_custom = 0x5CD0,
  SCR_OPAQUE_STRING_play_fullscreen_shader = 0x5CD4,
  SCR_OPAQUE_STRING_play_fx_for_sub_back = 0x5CD8,
  SCR_OPAQUE_STRING_play_fx_for_sub_blow = 0x5CD9,
  SCR_OPAQUE_STRING_play_fx_for_sub_front = 0x5CDA,
  SCR_OPAQUE_STRING_play_fx_on_tag = 0x5CDC,
  SCR_OPAQUE_STRING_play_health_regen_anim = 0x5CE0,
  SCR_OPAQUE_STRING_play_hive_anim = 0x5CE3,
  SCR_OPAQUE_STRING_play_linked_sound = 0x5CED,
  SCR_OPAQUE_STRING_play_mlrs_m880_end = 0x5CF8,
  SCR_OPAQUE_STRING_play_nag = 0x5CFA,
  SCR_OPAQUE_STRING_play_new_idle = 0x5CFD,
  SCR_OPAQUE_STRING_play_nuke_rumble = 0x5D00,
  SCR_OPAQUE_STRING_play_pain_sound = 0x5D02,
  SCR_OPAQUE_STRING_play_pilot_vo = 0x5D03,
  SCR_OPAQUE_STRING_play_player_break_light = 0x5D04,
  SCR_OPAQUE_STRING_play_rumble_heavy = 0x5D11,
  SCR_OPAQUE_STRING_play_rumble_light = 0x5D12,
  SCR_OPAQUE_STRING_play_rumble_seconds = 0x5D15,
  SCR_OPAQUE_STRING_play_rumbles = 0x5D16,
  SCR_OPAQUE_STRING_play_satellite_static_on_connect = 0x5D18,
  SCR_OPAQUE_STRING_play_spark_fx_when_falling = 0x5D27,
  SCR_OPAQUE_STRING_play_sub_fx_icerise = 0x5D30,
  SCR_OPAQUE_STRING_play_sub_fx_settle = 0x5D31,
  SCR_OPAQUE_STRING_play_synch_attack = 0x5D32,
  SCR_OPAQUE_STRING_play_vo_for_grab_drill = 0x5D36,
  SCR_OPAQUE_STRING_play_vo_for_next_hive = 0x5D37,
  SCR_OPAQUE_STRING_playanimnatratefortime = 0x5D45,
  SCR_OPAQUE_STRING_playanimnatrateuntilnotetrack = 0x5D46,
  SCR_OPAQUE_STRING_playanimnuntilnotetrack = 0x5D48,
  SCR_OPAQUE_STRING_playanimonscriptable = 0x5D4A,
  SCR_OPAQUE_STRING_playbackrate = 0x5D4C,
  SCR_OPAQUE_STRING_player_acceleration_low = 0x5D64,
  SCR_OPAQUE_STRING_player_action_slot_internal = 0x5D67,
  SCR_OPAQUE_STRING_player_aim_debug = 0x5D6A,
  SCR_OPAQUE_STRING_player_animated_sequence_restrictions = 0x5D74,
  SCR_OPAQUE_STRING_player_animtree = 0x5D77,
  SCR_OPAQUE_STRING_player_beach = 0x5D84,
  SCR_OPAQUE_STRING_player_blend_swim_speed = 0x5D86,
  SCR_OPAQUE_STRING_player_boundaries_off = 0x5D8A,
  SCR_OPAQUE_STRING_player_boundary_ai_focus = 0x5D8C,
  SCR_OPAQUE_STRING_player_boundary_vo_player = 0x5D90,
  SCR_OPAQUE_STRING_player_breach = 0x5D91,
  SCR_OPAQUE_STRING_player_can_see_corpse = 0x5D98,
  SCR_OPAQUE_STRING_player_cancel_internal = 0x5D9A,
  SCR_OPAQUE_STRING_player_chopper_anim_struct = 0x5DA3,
  SCR_OPAQUE_STRING_player_chopper_flyin_setup = 0x5DA4,
  SCR_OPAQUE_STRING_player_combat_rappel = 0x5DA9,
  SCR_OPAQUE_STRING_player_console_anims = 0x5DAE,
  SCR_OPAQUE_STRING_player_const_quake = 0x5DAF,
  SCR_OPAQUE_STRING_player_control = 0x5DB1,
  SCR_OPAQUE_STRING_player_controller = 0x5DB5,
  SCR_OPAQUE_STRING_player_died_recently = 0x5DC2,
  SCR_OPAQUE_STRING_player_dismount = 0x5DC6,
  SCR_OPAQUE_STRING_player_distsqrd = 0x5DC8,
  SCR_OPAQUE_STRING_player_downed_death_buffer_time = 0x5DD0,
  SCR_OPAQUE_STRING_player_drag_body = 0x5DD1,
  SCR_OPAQUE_STRING_player_embers = 0x5DD8,
  SCR_OPAQUE_STRING_player_enter_building = 0x5DDB,
  SCR_OPAQUE_STRING_player_fade_out = 0x5DE7,
  SCR_OPAQUE_STRING_player_fail_finale = 0x5DE8,
  SCR_OPAQUE_STRING_player_failcase_road_overrun = 0x5DEE,
  SCR_OPAQUE_STRING_player_failcase_tunnel_overrun = 0x5DF1,
  SCR_OPAQUE_STRING_player_fall_off_balcony = 0x5DF5,
  SCR_OPAQUE_STRING_player_falling_2 = 0x5DF7,
  SCR_OPAQUE_STRING_player_flap_sleeves = 0x5DFA,
  SCR_OPAQUE_STRING_player_flashlight_toggle = 0x5DFC,
  SCR_OPAQUE_STRING_player_force_prone_recover = 0x5DFF,
  SCR_OPAQUE_STRING_player_get_mk32 = 0x5E07,
  SCR_OPAQUE_STRING_player_getvelocity_pc = 0x5E12,
  SCR_OPAQUE_STRING_player_gravity_slide = 0x5E18,
  SCR_OPAQUE_STRING_player_grenade_check = 0x5E1A,
  SCR_OPAQUE_STRING_player_grenade_check_dieout = 0x5E1B,
  SCR_OPAQUE_STRING_player_ground_collapse = 0x5E1C,
  SCR_OPAQUE_STRING_player_ground_ref_mover = 0x5E1D,
  SCR_OPAQUE_STRING_player_has_enough_currency = 0x5E22,
  SCR_OPAQUE_STRING_player_has_silenced_weapon = 0x5E24,
  SCR_OPAQUE_STRING_player_heartbeat_rate = 0x5E2B,
  SCR_OPAQUE_STRING_player_heat_fx_end = 0x5E2E,
  SCR_OPAQUE_STRING_player_helmet = 0x5E31,
  SCR_OPAQUE_STRING_player_hideviewmodelsleeveflaps = 0x5E35,
  SCR_OPAQUE_STRING_player_hit_ratio_override = 0x5E38,
  SCR_OPAQUE_STRING_player_initiates_inverted_kill = 0x5E51,
  SCR_OPAQUE_STRING_player_input_console_animate = 0x5E52,
  SCR_OPAQUE_STRING_player_inside_nvg_area = 0x5E53,
  SCR_OPAQUE_STRING_player_intro_anim = 0x5E56,
  SCR_OPAQUE_STRING_player_inverted_kill = 0x5E5B,
  SCR_OPAQUE_STRING_player_inverted_kill_enemy = 0x5E5C,
  SCR_OPAQUE_STRING_player_inverted_kill_fail = 0x5E5F,
  SCR_OPAQUE_STRING_player_is_good_missile_target = 0x5E63,
  SCR_OPAQUE_STRING_player_killzone = 0x5E74,
  SCR_OPAQUE_STRING_player_knife_throw_enemy = 0x5E75,
  SCR_OPAQUE_STRING_player_lerp_speed = 0x5E7B,
  SCR_OPAQUE_STRING_player_lerp_swim_vars = 0x5E7C,
  SCR_OPAQUE_STRING_player_littlebird = 0x5E84,
  SCR_OPAQUE_STRING_player_location_check = 0x5E86,
  SCR_OPAQUE_STRING_player_looking_at_stabguy = 0x5E8D,
  SCR_OPAQUE_STRING_player_looking_at_vargas = 0x5E8E,
  SCR_OPAQUE_STRING_player_mantle_wait = 0x5E93,
  SCR_OPAQUE_STRING_player_max = 0x5E95,
  SCR_OPAQUE_STRING_player_min_speed = 0x5E98,
  SCR_OPAQUE_STRING_player_missile_control = 0x5E99,
  SCR_OPAQUE_STRING_player_missile_roll_control = 0x5E9B,
  SCR_OPAQUE_STRING_player_name_called_recently = 0x5EA9,
  SCR_OPAQUE_STRING_player_on_hill = 0x5EB1,
  SCR_OPAQUE_STRING_player_one_already_breached = 0x5EB3,
  SCR_OPAQUE_STRING_player_outline = 0x5EB4,
  SCR_OPAQUE_STRING_player_pain_vo = 0x5EB6,
  SCR_OPAQUE_STRING_player_persistence_init = 0x5EBA,
  SCR_OPAQUE_STRING_player_pipe_explosion_reaction = 0x5EBC,
  SCR_OPAQUE_STRING_player_plane_engine_right = 0x5EBE,
  SCR_OPAQUE_STRING_player_pounce_anim = 0x5EC4,
  SCR_OPAQUE_STRING_player_pulls_mask_down = 0x5EC5,
  SCR_OPAQUE_STRING_player_pushes_too_far = 0x5ECD,
  SCR_OPAQUE_STRING_player_quake_distance = 0x5ECF,
  SCR_OPAQUE_STRING_player_rambo_rpg = 0x5ED3,
  SCR_OPAQUE_STRING_player_ramp_up_wind = 0x5ED4,
  SCR_OPAQUE_STRING_player_random_blur_cleanup = 0x5ED6,
  SCR_OPAQUE_STRING_player_random_sway = 0x5ED7,
  SCR_OPAQUE_STRING_player_recoil = 0x5ED9,
  SCR_OPAQUE_STRING_player_ref_ent = 0x5EDC,
  SCR_OPAQUE_STRING_player_rides_shotgun_in_humvee = 0x5EE3,
  SCR_OPAQUE_STRING_player_rope_unwind_anim = 0x5EE6,
  SCR_OPAQUE_STRING_player_rotate_plane01 = 0x5EE8,
  SCR_OPAQUE_STRING_player_rumble = 0x5EEC,
  SCR_OPAQUE_STRING_player_rumble_amb_ent = 0x5EED,
  SCR_OPAQUE_STRING_player_safe_from_sonar = 0x5EF3,
  SCR_OPAQUE_STRING_player_saw_kill = 0x5EF4,
  SCR_OPAQUE_STRING_player_scuba = 0x5EF5,
  SCR_OPAQUE_STRING_player_seek_disable = 0x5EFC,
  SCR_OPAQUE_STRING_player_set_spotted = 0x5F00,
  SCR_OPAQUE_STRING_player_should_see_drill_hint = 0x5F07,
  SCR_OPAQUE_STRING_player_showviewmodelsleeveflaps = 0x5F09,
  SCR_OPAQUE_STRING_player_space_breathe_sound = 0x5F15,
  SCR_OPAQUE_STRING_player_spotted_logic = 0x5F22,
  SCR_OPAQUE_STRING_player_sprint = 0x5F23,
  SCR_OPAQUE_STRING_player_sprintcamerabob = 0x5F24,
  SCR_OPAQUE_STRING_player_stealth = 0x5F2B,
  SCR_OPAQUE_STRING_player_struct = 0x5F2F,
  SCR_OPAQUE_STRING_player_struggle_anim = 0x5F30,
  SCR_OPAQUE_STRING_player_stun_return_weapons_sprint = 0x5F33,
  SCR_OPAQUE_STRING_player_surface_blur_think = 0x5F35,
  SCR_OPAQUE_STRING_player_sway = 0x5F37,
  SCR_OPAQUE_STRING_player_sway_bump = 0x5F39,
  SCR_OPAQUE_STRING_player_swim_rubberband = 0x5F3C,
  SCR_OPAQUE_STRING_player_swim_think = 0x5F3E,
  SCR_OPAQUE_STRING_player_swim_water_current_logic = 0x5F3F,
  SCR_OPAQUE_STRING_player_tank_impeded_sound = 0x5F41,
  SCR_OPAQUE_STRING_player_tank_turret_sounds = 0x5F43,
  SCR_OPAQUE_STRING_player_tired = 0x5F49,
  SCR_OPAQUE_STRING_player_took_too_long_to_open = 0x5F4B,
  SCR_OPAQUE_STRING_player_touched_arr = 0x5F4D,
  SCR_OPAQUE_STRING_player_touching_post_clip = 0x5F4E,
  SCR_OPAQUE_STRING_player_underwater_set = 0x5F55,
  SCR_OPAQUE_STRING_player_unlink_slide_on_death = 0x5F58,
  SCR_OPAQUE_STRING_player_using_missile = 0x5F5D,
  SCR_OPAQUE_STRING_player_view_pitch_down = 0x5F65,
  SCR_OPAQUE_STRING_player_view_shake_blender = 0x5F68,
  SCR_OPAQUE_STRING_player_viewhands_minigun_hand = 0x5F6C,
  SCR_OPAQUE_STRING_player_viewkick_distance = 0x5F70,
  SCR_OPAQUE_STRING_player_watch_upgrade_internal = 0x5F7D,
  SCR_OPAQUE_STRING_player_watch_use = 0x5F7E,
  SCR_OPAQUE_STRING_player_watcher = 0x5F81,
  SCR_OPAQUE_STRING_player_water_breach_moment = 0x5F82,
  SCR_OPAQUE_STRING_player_water_height_think = 0x5F84,
  SCR_OPAQUE_STRING_player_water_wade_speed = 0x5F88,
  SCR_OPAQUE_STRING_playeractivatedairsupport = 0x5F92,
  SCR_OPAQUE_STRING_playeraffectedarray = 0x5F93,
  SCR_OPAQUE_STRING_playerdamagerumble = 0x5F9F,
  SCR_OPAQUE_STRING_playerdrone_create = 0x5FA8,
  SCR_OPAQUE_STRING_playergrenaderangetime = 0x5FAF,
  SCR_OPAQUE_STRING_playerhealthregeninit = 0x5FB4,
  SCR_OPAQUE_STRING_playerhind_attackspots = 0x5FB5,
  SCR_OPAQUE_STRING_playerhurtcheck = 0x5FB8,
  SCR_OPAQUE_STRING_playerinvul = 0x5FBA,
  SCR_OPAQUE_STRING_playerkilled_internal = 0x5FC2,
  SCR_OPAQUE_STRING_playerkilled_regularmp = 0x5FC3,
  SCR_OPAQUE_STRING_playerlinktodeltablend = 0x5FC8,
  SCR_OPAQUE_STRING_playerpainbreathingsound = 0x5FCE,
  SCR_OPAQUE_STRING_players = 0x5FD0,
  SCR_OPAQUE_STRING_playerseesme = 0x5FD5,
  SCR_OPAQUE_STRING_playertank = 0x5FE0,
  SCR_OPAQUE_STRING_playertank_waits = 0x5FE3,
  SCR_OPAQUE_STRING_playerview_endsequence = 0x5FEF,
  SCR_OPAQUE_STRING_playerview_playmissanim = 0x5FF4,
  SCR_OPAQUE_STRING_playface_waitfornotify = 0x6001,
  SCR_OPAQUE_STRING_playfx_for_sub_slide = 0x600D,
  SCR_OPAQUE_STRING_playfx_targetname_endon = 0x600F,
  SCR_OPAQUE_STRING_playgrowl = 0x6012,
  SCR_OPAQUE_STRING_playheatfx = 0x6014,
  SCR_OPAQUE_STRING_playidleface = 0x6018,
  SCR_OPAQUE_STRING_playinairjumppainanims = 0x601A,
  SCR_OPAQUE_STRING_playing_effect = 0x601C,
  SCR_OPAQUE_STRING_playlocksound = 0x6025,
  SCR_OPAQUE_STRING_playlookanimation = 0x6026,
  SCR_OPAQUE_STRING_playmusicbeforereachlayer = 0x602E,
  SCR_OPAQUE_STRING_playpainoverlay = 0x6031,
  SCR_OPAQUE_STRING_playpanting = 0x6032,
  SCR_OPAQUE_STRING_playplayerandnpcsounds = 0x6035,
  SCR_OPAQUE_STRING_playreactionevent = 0x6039,
  SCR_OPAQUE_STRING_playsound_and_light = 0x603E,
  SCR_OPAQUE_STRING_playsound_wrapper = 0x6042,
  SCR_OPAQUE_STRING_playtankexhaust = 0x604A,
  SCR_OPAQUE_STRING_playtickingsound = 0x604C,
  SCR_OPAQUE_STRING_playtransitionanimationthread_withoutwaitsetstates = 0x604F,
  SCR_OPAQUE_STRING_playuplinkanimations = 0x6051,
  SCR_OPAQUE_STRING_playvoforbombplant = 0x605A,
  SCR_OPAQUE_STRING_playvofordeathmachine = 0x605D,
  SCR_OPAQUE_STRING_playvofordowned = 0x605E,
  SCR_OPAQUE_STRING_playvoformeteor = 0x6067,
  SCR_OPAQUE_STRING_playvofornukecountdown = 0x606B,
  SCR_OPAQUE_STRING_playvoforrandombox = 0x6070,
  SCR_OPAQUE_STRING_playvoforwavestart = 0x607C,
  SCR_OPAQUE_STRING_plot_points = 0x607E,
  SCR_OPAQUE_STRING_point_cost = 0x6087,
  SCR_OPAQUE_STRING_pointoncircle = 0x608D,
  SCR_OPAQUE_STRING_poison = 0x608F,
  SCR_OPAQUE_STRING_poolindex = 0x6095,
  SCR_OPAQUE_STRING_pop_first_vo_out_of_queue = 0x6096,
  SCR_OPAQUE_STRING_populate_combat_resource_from_table = 0x609C,
  SCR_OPAQUE_STRING_populateintelchallenges = 0x609E,
  SCR_OPAQUE_STRING_port_to_escape_spitter_location = 0x60A0,
  SCR_OPAQUE_STRING_pos_info = 0x60AB,
  SCR_OPAQUE_STRING_posclosed = 0x60B0,
  SCR_OPAQUE_STRING_positions = 0x60B4,
  SCR_OPAQUE_STRING_post = 0x60B8,
  SCR_OPAQUE_STRING_post_breach_doors = 0x60BA,
  SCR_OPAQUE_STRING_post_breach_positional_ambience = 0x60BB,
  SCR_OPAQUE_STRING_post_crater_breach_dialogue_2 = 0x60BD,
  SCR_OPAQUE_STRING_post_quake_vo = 0x60CD,
  SCR_OPAQUE_STRING_power_down = 0x60DE,
  SCR_OPAQUE_STRING_pre_ambush_scene_org = 0x60E2,
  SCR_OPAQUE_STRING_pre_breach_guys = 0x60E3,
  SCR_OPAQUE_STRING_pre_org = 0x60EC,
  SCR_OPAQUE_STRING_pre_tall_grass_patroller_logic = 0x60F4,
  SCR_OPAQUE_STRING_pre_tall_grass_stealth_settings = 0x60F6,
  SCR_OPAQUE_STRING_pre_tall_grass_went_hot_vo = 0x60F8,
  SCR_OPAQUE_STRING_pre_teleport = 0x60FB,
  SCR_OPAQUE_STRING_pre_teleport_to_start = 0x60FC,
  SCR_OPAQUE_STRING_precache_create_fx = 0x6103,
  SCR_OPAQUE_STRING_precache_for_startpoints = 0x6106,
  SCR_OPAQUE_STRING_precache_items = 0x6107,
  SCR_OPAQUE_STRING_precache_please = 0x6108,
  SCR_OPAQUE_STRING_precache_scripts = 0x610C,
  SCR_OPAQUE_STRING_precache_stuff = 0x610D,
  SCR_OPAQUE_STRING_precache_teargas = 0x610E,
  SCR_OPAQUE_STRING_precachesetup = 0x6114,
  SCR_OPAQUE_STRING_precisepositioning = 0x6117,
  SCR_OPAQUE_STRING_precommon = 0x6119,
  SCR_OPAQUE_STRING_precommon_bc = 0x611A,
  SCR_OPAQUE_STRING_predictedspawnpoint = 0x6120,
  SCR_OPAQUE_STRING_prefers_drones = 0x612A,
  SCR_OPAQUE_STRING_pregame_delay = 0x612B,
  SCR_OPAQUE_STRING_prekillcamnotify = 0x612D,
  SCR_OPAQUE_STRING_preload = 0x612E,
  SCR_OPAQUE_STRING_preloop_push_anims = 0x612F,
  SCR_OPAQUE_STRING_prematchperiodend = 0x6131,
  SCR_OPAQUE_STRING_prepare_crates_for_anim = 0x6134,
  SCR_OPAQUE_STRING_prepare_to_regenerate = 0x613C,
  SCR_OPAQUE_STRING_prepareattackplayer = 0x613D,
  SCR_OPAQUE_STRING_prereqs = 0x613F,
  SCR_OPAQUE_STRING_prespawn_decomp_enemies = 0x6147,
  SCR_OPAQUE_STRING_pressurized = 0x614A,
  SCR_OPAQUE_STRING_prestige_getweapondamagescalar = 0x614F,
  SCR_OPAQUE_STRING_prestigedoubleweaponxp = 0x6151,
  SCR_OPAQUE_STRING_prevattack = 0x615D,
  SCR_OPAQUE_STRING_prevleanfracpitch = 0x616F,
  SCR_OPAQUE_STRING_prevstairsstate = 0x6179,
  SCR_OPAQUE_STRING_price_breach_ent_movesto_player = 0x6180,
  SCR_OPAQUE_STRING_price_desired_speed = 0x6182,
  SCR_OPAQUE_STRING_price_match_player_speed = 0x6183,
  SCR_OPAQUE_STRING_priceliner = 0x6184,
  SCR_OPAQUE_STRING_primary_attacker = 0x6185,
  SCR_OPAQUE_STRING_primary_weapon_array = 0x6187,
  SCR_OPAQUE_STRING_primaryprogressbarfontsize = 0x6189,
  SCR_OPAQUE_STRING_primaryprogressbartexty = 0x618C,
  SCR_OPAQUE_STRING_printboldonteam = 0x61A4,
  SCR_OPAQUE_STRING_printer = 0x61A9,
  SCR_OPAQUE_STRING_printturnrate = 0x61B1,
  SCR_OPAQUE_STRING_prioritize_watch_nodes_toward_enemies = 0x61B5,
  SCR_OPAQUE_STRING_process = 0x61BB,
  SCR_OPAQUE_STRING_process_blend = 0x61BD,
  SCR_OPAQUE_STRING_process_deathflags = 0x61C3,
  SCR_OPAQUE_STRING_process_moving_platform_death = 0x61C7,
  SCR_OPAQUE_STRING_processassist = 0x61CC,
  SCR_OPAQUE_STRING_progress_trigger_callbacks = 0x61DD,
  SCR_OPAQUE_STRING_project = 0x61DF,
  SCR_OPAQUE_STRING_projectileexplode = 0x61E1,
  SCR_OPAQUE_STRING_promo_dof = 0x61EA,
  SCR_OPAQUE_STRING_promote_nearest_friendly_with_classname = 0x61EC,
  SCR_OPAQUE_STRING_promotion_dog = 0x61EE,
  SCR_OPAQUE_STRING_prone_kill_trigger = 0x61F6,
  SCR_OPAQUE_STRING_prone_only = 0x61F7,
  SCR_OPAQUE_STRING_pronelegsstraighttree = 0x61FF,
  SCR_OPAQUE_STRING_pronetocrouchwalk = 0x6207,
  SCR_OPAQUE_STRING_pronetopronemove = 0x6208,
  SCR_OPAQUE_STRING_prop_launch = 0x6216,
  SCR_OPAQUE_STRING_props_cleanup = 0x621B,
  SCR_OPAQUE_STRING_proxbartext = 0x6221,
  SCR_OPAQUE_STRING_proximity_spawn = 0x6223,
  SCR_OPAQUE_STRING_proximitykill = 0x6228,
  SCR_OPAQUE_STRING_proxmity_check_stop_loop = 0x622B,
  SCR_OPAQUE_STRING_proxmity_check_stop_relative = 0x622C,
  SCR_OPAQUE_STRING_pt2_force_look_down = 0x6235,
  SCR_OPAQUE_STRING_push_anim = 0x6243,
  SCR_OPAQUE_STRING_push_out_of_doorway = 0x6246,
  SCR_OPAQUE_STRING_quadrantanimweights = 0x6264,
  SCR_OPAQUE_STRING_quake_anims_ref = 0x6269,
  SCR_OPAQUE_STRING_quake_event_disconnect_node = 0x626F,
  SCR_OPAQUE_STRING_quake_event_gas_leak = 0x6273,
  SCR_OPAQUE_STRING_quake_event_hurt = 0x6274,
  SCR_OPAQUE_STRING_quake_event_init = 0x6275,
  SCR_OPAQUE_STRING_quake_event_pole_fall_on_car = 0x6279,
  SCR_OPAQUE_STRING_quake_event_wait = 0x6282,
  SCR_OPAQUE_STRING_quake_hurt_trigger = 0x6285,
  SCR_OPAQUE_STRING_queued_anim_threads = 0x6298,
  SCR_OPAQUE_STRING_radarviewtime = 0x62AA,
  SCR_OPAQUE_STRING_radial_button_group = 0x62AF,
  SCR_OPAQUE_STRING_radial_button_previous_group = 0x62B1,
  SCR_OPAQUE_STRING_radiationdeath = 0x62B7,
  SCR_OPAQUE_STRING_radiationeffect = 0x62B8,
  SCR_OPAQUE_STRING_radiationsound = 0x62BA,
  SCR_OPAQUE_STRING_radio_dialogue_queue_single = 0x62C5,
  SCR_OPAQUE_STRING_radio_in_use = 0x62C9,
  SCR_OPAQUE_STRING_radio_queue_thread = 0x62CA,
  SCR_OPAQUE_STRING_radio_tower_guy_shot = 0x62CB,
  SCR_OPAQUE_STRING_radioforcedtransmissionqueue = 0x62CC,
  SCR_OPAQUE_STRING_radiousityscale = 0x62D1,
  SCR_OPAQUE_STRING_radius_min_sq = 0x62D5,
  SCR_OPAQUE_STRING_radiusartilleryshellshock = 0x62D7,
  SCR_OPAQUE_STRING_ragdoll_and_delete = 0x62D8,
  SCR_OPAQUE_STRING_ragdoll_immediate = 0x62DD,
  SCR_OPAQUE_STRING_railyard_style = 0x62E3,
  SCR_OPAQUE_STRING_rain = 0x62E4,
  SCR_OPAQUE_STRING_rain_overlay_alpha = 0x62E7,
  SCR_OPAQUE_STRING_raineffectchange = 0x62E9,
  SCR_OPAQUE_STRING_raise_rear_elevator_intro = 0x62F6,
  SCR_OPAQUE_STRING_ramboaccuracymult = 0x62F9,
  SCR_OPAQUE_STRING_ramp_down_push = 0x62FF,
  SCR_OPAQUE_STRING_ramp_up_accurracy = 0x6301,
  SCR_OPAQUE_STRING_rampfx = 0x6302,
  SCR_OPAQUE_STRING_ramping_explosions = 0x6303,
  SCR_OPAQUE_STRING_random_mortars_get_target = 0x631B,
  SCR_OPAQUE_STRING_random_mortars_incoming_sound = 0x631C,
  SCR_OPAQUE_STRING_random_pick_r_or_l = 0x6320,
  SCR_OPAQUE_STRING_random_player_wall_push = 0x6321,
  SCR_OPAQUE_STRING_random_player_wall_pushdownup = 0x6322,
  SCR_OPAQUE_STRING_random_weight = 0x632A,
  SCR_OPAQUE_STRING_random_weight_sorted = 0x632B,
  SCR_OPAQUE_STRING_randomaditionaltime = 0x632C,
  SCR_OPAQUE_STRING_randomdeath = 0x6330,
  SCR_OPAQUE_STRING_randominttable = 0x6336,
  SCR_OPAQUE_STRING_randomitem = 0x6338,
  SCR_OPAQUE_STRING_randomizer_create = 0x633B,
  SCR_OPAQUE_STRING_randomly_rotate_and_fire = 0x633E,
  SCR_OPAQUE_STRING_randompathstoptime = 0x6341,
  SCR_OPAQUE_STRING_randomvector = 0x6343,
  SCR_OPAQUE_STRING_randomvectorrange = 0x6344,
  SCR_OPAQUE_STRING_rappel_clear_vertical_limits = 0x6354,
  SCR_OPAQUE_STRING_rappel_combat_two_volume_upstairs = 0x6356,
  SCR_OPAQUE_STRING_rappel_death = 0x6357,
  SCR_OPAQUE_STRING_rappel_disable_fidgit = 0x6359,
  SCR_OPAQUE_STRING_rappel_enemy = 0x635B,
  SCR_OPAQUE_STRING_rappel_enter_death = 0x635D,
  SCR_OPAQUE_STRING_rappel_entry_anim_struct = 0x635E,
  SCR_OPAQUE_STRING_rappel_guy = 0x6364,
  SCR_OPAQUE_STRING_rappel_idle = 0x6366,
  SCR_OPAQUE_STRING_rappel_max_lateral_speed = 0x6374,
  SCR_OPAQUE_STRING_rappel_params = 0x6378,
  SCR_OPAQUE_STRING_rappel_rope_rig = 0x6380,
  SCR_OPAQUE_STRING_rappel_rotate_jump_anim = 0x6381,
  SCR_OPAQUE_STRING_rappel_stealth_checkpoint = 0x6385,
  SCR_OPAQUE_STRING_rappel_stealth_second_floor_combat_vo = 0x638A,
  SCR_OPAQUE_STRING_rappel_type = 0x638C,
  SCR_OPAQUE_STRING_rappel_type_aim = 0x638D,
  SCR_OPAQUE_STRING_rappel_upper_limit = 0x638E,
  SCR_OPAQUE_STRING_raven_player_can_see_ai = 0x6397,
  SCR_OPAQUE_STRING_ravine_jeeps_to_the_right = 0x6398,
  SCR_OPAQUE_STRING_reach_death_notify = 0x639C,
  SCR_OPAQUE_STRING_react_to_attractor_flare = 0x63B2,
  SCR_OPAQUE_STRING_reaction_sleep_wait_wakeup_dist = 0x63BB,
  SCR_OPAQUE_STRING_reactive_fx_ents = 0x63C2,
  SCR_OPAQUE_STRING_reactive_grass_settings = 0x63C4,
  SCR_OPAQUE_STRING_reactive_grass_settings_pc = 0x63C5,
  SCR_OPAQUE_STRING_reactive_sound_ents = 0x63C6,
  SCR_OPAQUE_STRING_reacttobulletsinterruptcheck = 0x63CA,
  SCR_OPAQUE_STRING_readtriple = 0x63CF,
  SCR_OPAQUE_STRING_real_reload = 0x63DC,
  SCR_OPAQUE_STRING_realorigin = 0x63DE,
  SCR_OPAQUE_STRING_rear_left_anchor_impact = 0x63E3,
  SCR_OPAQUE_STRING_rear_right_anchor_impact = 0x63E4,
  SCR_OPAQUE_STRING_reassign_dir_group = 0x63E9,
  SCR_OPAQUE_STRING_reassign_interrogate = 0x63EC,
  SCR_OPAQUE_STRING_reassign_typer = 0x63EF,
  SCR_OPAQUE_STRING_reassign_vault_guys = 0x63F0,
  SCR_OPAQUE_STRING_rec_blink = 0x63F7,
  SCR_OPAQUE_STRING_recentdamageamount = 0x63FA,
  SCR_OPAQUE_STRING_recentdamages = 0x63FB,
  SCR_OPAQUE_STRING_recentkillcount = 0x63FC,
  SCR_OPAQUE_STRING_recipe_getkillstreak = 0x6402,
  SCR_OPAQUE_STRING_recipeclassapplyjuggernaut = 0x6403,
  SCR_OPAQUE_STRING_record_last_player_damage = 0x640C,
  SCR_OPAQUE_STRING_recordfinalkillcam = 0x640E,
  SCR_OPAQUE_STRING_recover_from_careful_disable = 0x6410,
  SCR_OPAQUE_STRING_recover_interval = 0x6411,
  SCR_OPAQUE_STRING_recruit_player_visual = 0x6412,
  SCR_OPAQUE_STRING_red_crosshair = 0x6416,
  SCR_OPAQUE_STRING_redshirt_cq_enc_handles = 0x6418,
  SCR_OPAQUE_STRING_redshirts = 0x641A,
  SCR_OPAQUE_STRING_ref_node = 0x6425,
  SCR_OPAQUE_STRING_refillclip = 0x642A,
  SCR_OPAQUE_STRING_refillexplosiveweapons = 0x642B,
  SCR_OPAQUE_STRING_refresh_reactive_fx_ents = 0x643B,
  SCR_OPAQUE_STRING_refreshspectatorportalfx = 0x643C,
  SCR_OPAQUE_STRING_regenamount = 0x6442,
  SCR_OPAQUE_STRING_regenfastermod = 0x6444,
  SCR_OPAQUE_STRING_regenspeedwatcher = 0x6448,
  SCR_OPAQUE_STRING_register_achievement = 0x6449,
  SCR_OPAQUE_STRING_register_airdrop_sub_items = 0x644A,
  SCR_OPAQUE_STRING_register_default_achievements = 0x644E,
  SCR_OPAQUE_STRING_register_end_game_string_index = 0x6451,
  SCR_OPAQUE_STRING_register_laststand_ammo = 0x6455,
  SCR_OPAQUE_STRING_registeradrenalineinfo = 0x6465,
  SCR_OPAQUE_STRING_registerdamage = 0x6467,
  SCR_OPAQUE_STRING_registerscoreinfo = 0x6474,
  SCR_OPAQUE_STRING_reincrement_count_if_deleted = 0x647D,
  SCR_OPAQUE_STRING_release_use_trigger = 0x6486,
  SCR_OPAQUE_STRING_release_view_count = 0x6488,
  SCR_OPAQUE_STRING_reload_aim_active = 0x648A,
  SCR_OPAQUE_STRING_relocatespeed = 0x6490,
  SCR_OPAQUE_STRING_remaining_kill = 0x6491,
  SCR_OPAQUE_STRING_remote_canreload = 0x6492,
  SCR_OPAQUE_STRING_remote_turret_clear_hud = 0x649D,
  SCR_OPAQUE_STRING_remote_turret_handle_zoom = 0x64A9,
  SCR_OPAQUE_STRING_remote_turret_monitor_dryfire = 0x64B7,
  SCR_OPAQUE_STRING_remote_turret_next = 0x64B8,
  SCR_OPAQUE_STRING_remote_turret_type = 0x64C6,
  SCR_OPAQUE_STRING_remotefiring = 0x64D7,
  SCR_OPAQUE_STRING_remoteride = 0x64DF,
  SCR_OPAQUE_STRING_remoteuav_explode_on_disconnect = 0x64EE,
  SCR_OPAQUE_STRING_remoteuav_leave = 0x64F7,
  SCR_OPAQUE_STRING_remoteuav_markplayer = 0x64FA,
  SCR_OPAQUE_STRING_remoteuav_rumble = 0x6501,
  SCR_OPAQUE_STRING_remoteuav_staticfade = 0x6502,
  SCR_OPAQUE_STRING_remove_all_challenge_cases = 0x650C,
  SCR_OPAQUE_STRING_remove_allies = 0x6510,
  SCR_OPAQUE_STRING_remove_damagefeedback = 0x6519,
  SCR_OPAQUE_STRING_remove_from_bot_damage_targets = 0x6529,
  SCR_OPAQUE_STRING_remove_global_spawn_function = 0x6531,
  SCR_OPAQUE_STRING_remove_nocolor_from_array = 0x6543,
  SCR_OPAQUE_STRING_remove_remote_turret_targets = 0x654E,
  SCR_OPAQUE_STRING_remove_specialized_ammo = 0x6559,
  SCR_OPAQUE_STRING_remove_without_classname = 0x6567,
  SCR_OPAQUE_STRING_removeac130playerongameend = 0x6572,
  SCR_OPAQUE_STRING_removealtituedmesh = 0x6578,
  SCR_OPAQUE_STRING_removebodyarmorondeath = 0x657B,
  SCR_OPAQUE_STRING_removechild = 0x6581,
  SCR_OPAQUE_STRING_removefrombattlebuddywaitlist = 0x658B,
  SCR_OPAQUE_STRING_removefromhelilist = 0x658D,
  SCR_OPAQUE_STRING_removefromimslist = 0x658F,
  SCR_OPAQUE_STRING_removefromtanklist = 0x6595,
  SCR_OPAQUE_STRING_removelockedontarget = 0x659F,
  SCR_OPAQUE_STRING_removepickup = 0x65A8,
  SCR_OPAQUE_STRING_removeplanefromlist = 0x65A9,
  SCR_OPAQUE_STRING_removesafetyhealth = 0x65AD,
  SCR_OPAQUE_STRING_removetypefromqueue = 0x65B6,
  SCR_OPAQUE_STRING_removeuavmodelondeath = 0x65B8,
  SCR_OPAQUE_STRING_replace_attacker_request = 0x65C1,
  SCR_OPAQUE_STRING_replenishloadout = 0x65C5,
  SCR_OPAQUE_STRING_rescue_think = 0x65D6,
  SCR_OPAQUE_STRING_reserve_turret = 0x65DB,
  SCR_OPAQUE_STRING_reserved = 0x65DC,
  SCR_OPAQUE_STRING_reset_kill_10_with_propane_progress = 0x65E9,
  SCR_OPAQUE_STRING_reset_kill_10_with_traps_progress = 0x65EA,
  SCR_OPAQUE_STRING_reset_laststand = 0x65ED,
  SCR_OPAQUE_STRING_reset_melee_goons_progress = 0x65EE,
  SCR_OPAQUE_STRING_reset_nuke_usage = 0x65F2,
  SCR_OPAQUE_STRING_reset_player_speed = 0x65F4,
  SCR_OPAQUE_STRING_reset_team_hive_performance = 0x65FB,
  SCR_OPAQUE_STRING_resetaccuracyandpause = 0x6603,
  SCR_OPAQUE_STRING_resetbrinkofdeathkillstreakshortly = 0x6607,
  SCR_OPAQUE_STRING_resetnow = 0x6612,
  SCR_OPAQUE_STRING_resetoncancel = 0x6613,
  SCR_OPAQUE_STRING_resetplayervariables = 0x6615,
  SCR_OPAQUE_STRING_resetskill = 0x6618,
  SCR_OPAQUE_STRING_resetsniperaim = 0x6619,
  SCR_OPAQUE_STRING_resetstate = 0x661A,
  SCR_OPAQUE_STRING_resetuidvarsondeath = 0x6620,
  SCR_OPAQUE_STRING_respawn_asspectator = 0x6628,
  SCR_OPAQUE_STRING_respawn_friendlies_force_vision_check = 0x662A,
  SCR_OPAQUE_STRING_respawn_max = 0x662C,
  SCR_OPAQUE_STRING_respawn_spawner_org = 0x662E,
  SCR_OPAQUE_STRING_respawn_with_launcher = 0x6634,
  SCR_OPAQUE_STRING_respawneliminatedplayers = 0x6635,
  SCR_OPAQUE_STRING_respawntimerstarttime = 0x6636,
  SCR_OPAQUE_STRING_respondto = 0x6639,
  SCR_OPAQUE_STRING_responsethreatexposed = 0x6640,
  SCR_OPAQUE_STRING_restockammoaura = 0x6646,
  SCR_OPAQUE_STRING_restore_last_weapon = 0x6651,
  SCR_OPAQUE_STRING_restorevision_no_blur = 0x6663,
  SCR_OPAQUE_STRING_retarget_rig = 0x666D,
  SCR_OPAQUE_STRING_retreat_watcher = 0x6677,
  SCR_OPAQUE_STRING_return_collision_model = 0x667C,
  SCR_OPAQUE_STRING_return_false = 0x667E,
  SCR_OPAQUE_STRING_return_on_movement = 0x6680,
  SCR_OPAQUE_STRING_revive_player = 0x6694,
  SCR_OPAQUE_STRING_revivetriggerthink = 0x669A,
  SCR_OPAQUE_STRING_ride_dog_bark = 0x669F,
  SCR_OPAQUE_STRING_rider_func = 0x66A7,
  SCR_OPAQUE_STRING_rifleshootobjectivenormal = 0x66B0,
  SCR_OPAQUE_STRING_rifleshootobjectivesuppress = 0x66B1,
  SCR_OPAQUE_STRING_rig_fx = 0x66B4,
  SCR_OPAQUE_STRING_rig_model = 0x66B5,
  SCR_OPAQUE_STRING_right_direction_worldspace = 0x66B8,
  SCR_OPAQUE_STRING_rigmodel_anims = 0x66C3,
  SCR_OPAQUE_STRING_rigmodel_pauseend = 0x66C4,
  SCR_OPAQUE_STRING_riing_fx = 0x66C6,
  SCR_OPAQUE_STRING_ring_fx = 0x66CB,
  SCR_OPAQUE_STRING_riotshield_attach = 0x66D0,
  SCR_OPAQUE_STRING_riotshield_detach = 0x66D2,
  SCR_OPAQUE_STRING_riotshield_getmodel = 0x66D3,
  SCR_OPAQUE_STRING_rog_add_hud_element_on_target = 0x6702,
  SCR_OPAQUE_STRING_rog_adjust_aoe_target_height = 0x6703,
  SCR_OPAQUE_STRING_rog_airstrike = 0x6705,
  SCR_OPAQUE_STRING_rog_altimeter_game_world_delta = 0x670B,
  SCR_OPAQUE_STRING_rog_ammo_animate_depleted_round = 0x6711,
  SCR_OPAQUE_STRING_rog_aoe_reticle_visibility_logic = 0x6716,
  SCR_OPAQUE_STRING_rog_cleanup_altimeter_hud = 0x6723,
  SCR_OPAQUE_STRING_rog_cleanup_static_hud = 0x6725,
  SCR_OPAQUE_STRING_rog_display_hint_strings = 0x672A,
  SCR_OPAQUE_STRING_rog_firing_fx_at_player = 0x6736,
  SCR_OPAQUE_STRING_rog_hud_logic_reset = 0x6744,
  SCR_OPAQUE_STRING_rog_kill_jet = 0x674B,
  SCR_OPAQUE_STRING_rog_play_countdown_beeps = 0x6755,
  SCR_OPAQUE_STRING_rog_setup_temp_hud = 0x6762,
  SCR_OPAQUE_STRING_rog_shockwave = 0x6764,
  SCR_OPAQUE_STRING_rog_show_target_marker = 0x6765,
  SCR_OPAQUE_STRING_rog_single_velocity_max = 0x6767,
  SCR_OPAQUE_STRING_rog_stop_countdown_beebs = 0x676D,
  SCR_OPAQUE_STRING_rog_target_add_hud_element = 0x6773,
  SCR_OPAQUE_STRING_rog_target_cleaned_up_by_allies = 0x6774,
  SCR_OPAQUE_STRING_rog_target_create_model_logic = 0x6776,
  SCR_OPAQUE_STRING_rog_target_handle_rod_impact = 0x677C,
  SCR_OPAQUE_STRING_rog_target_overkill_death = 0x6784,
  SCR_OPAQUE_STRING_rog_targeting_pip = 0x678A,
  SCR_OPAQUE_STRING_rog_temp_ui = 0x678D,
  SCR_OPAQUE_STRING_rog_uav_camera_logic = 0x678F,
  SCR_OPAQUE_STRING_rog_zoom_ui_pip_0 = 0x67A1,
  SCR_OPAQUE_STRING_roll_speed_max = 0x67AB,
  SCR_OPAQUE_STRING_ronnie_knife_watcher = 0x67AE,
  SCR_OPAQUE_STRING_ronnie_talks = 0x67AF,
  SCR_OPAQUE_STRING_roofcollapse_retreat = 0x67B9,
  SCR_OPAQUE_STRING_rooftop_collapse_end_build_sfx = 0x67BF,
  SCR_OPAQUE_STRING_rooftop_heli = 0x67C4,
  SCR_OPAQUE_STRING_rooftops_encounter_b_ally_vo = 0x67E7,
  SCR_OPAQUE_STRING_rooftops_encounter_b_flank_vo = 0x67EA,
  SCR_OPAQUE_STRING_rooftops_encounter_b_handle_defensive = 0x67EC,
  SCR_OPAQUE_STRING_rooftops_encounter_b_water_vo = 0x67F0,
  SCR_OPAQUE_STRING_rooftops_encounters_ally_logic = 0x67F1,
  SCR_OPAQUE_STRING_rooftops_heli_flyaway = 0x67FE,
  SCR_OPAQUE_STRING_rooftops_interior_start_combat_soft_sight_line = 0x6802,
  SCR_OPAQUE_STRING_rooftops_long_jump = 0x6804,
  SCR_OPAQUE_STRING_rooftops_player_start_combat_attack = 0x680B,
  SCR_OPAQUE_STRING_rooftops_water_enter_combat_space_play_effects = 0x681B,
  SCR_OPAQUE_STRING_rooftops_water_heli_movement_logic = 0x6820,
  SCR_OPAQUE_STRING_rooftops_water_intro = 0x6821,
  SCR_OPAQUE_STRING_rooftops_water_intro_flare_setup = 0x6824,
  SCR_OPAQUE_STRING_rooftops_water_player_logic = 0x682A,
  SCR_OPAQUE_STRING_room_has_multiple_doors = 0x6832,
  SCR_OPAQUE_STRING_room_volume = 0x6833,
  SCR_OPAQUE_STRING_root_anim = 0x6834,
  SCR_OPAQUE_STRING_rootsofquadratic = 0x6836,
  SCR_OPAQUE_STRING_rope_cut_death = 0x6839,
  SCR_OPAQUE_STRING_rope_origin = 0x683E,
  SCR_OPAQUE_STRING_rope_prop_anim = 0x6840,
  SCR_OPAQUE_STRING_rope_unwind_anim = 0x6844,
  SCR_OPAQUE_STRING_rorke_glass_cutter = 0x684D,
  SCR_OPAQUE_STRING_rorke_inverted_kill_enemy = 0x6852,
  SCR_OPAQUE_STRING_rorke_inverted_kill_knife = 0x6853,
  SCR_OPAQUE_STRING_rorke_inverted_kill_knife_putaway = 0x6854,
  SCR_OPAQUE_STRING_rorke_react_to_stealth_break = 0x685B,
  SCR_OPAQUE_STRING_rorke_start_shadowkill = 0x685E,
  SCR_OPAQUE_STRING_rotate_helicopter_rotor = 0x686A,
  SCR_OPAQUE_STRING_rotate_rollers_to = 0x686F,
  SCR_OPAQUE_STRING_rotate_turbine = 0x6872,
  SCR_OPAQUE_STRING_rotate_vector = 0x6873,
  SCR_OPAQUE_STRING_rotating_turbines = 0x687E,
  SCR_OPAQUE_STRING_rotation_is_occuring = 0x6882,
  SCR_OPAQUE_STRING_rotunda_kill_gun_sync = 0x6888,
  SCR_OPAQUE_STRING_rotunda_knife = 0x6889,
  SCR_OPAQUE_STRING_round_num = 0x688E,
  SCR_OPAQUE_STRING_roundbegin = 0x6892,
  SCR_OPAQUE_STRING_roundenddelay = 0x6895,
  SCR_OPAQUE_STRING_roundendwait = 0x6897,
  SCR_OPAQUE_STRING_roundup = 0x689D,
  SCR_OPAQUE_STRING_roundwinnerdialog = 0x689E,
  SCR_OPAQUE_STRING_rpg_ai_attack = 0x68A0,
  SCR_OPAQUE_STRING_rpg_guy_wait_and_fire_at_target = 0x68AC,
  SCR_OPAQUE_STRING_rpg_kibble = 0x68AD,
  SCR_OPAQUE_STRING_rpl_calc_max_yaw_right = 0x68BB,
  SCR_OPAQUE_STRING_rpl_get_max_downward_speed = 0x68C2,
  SCR_OPAQUE_STRING_rpl_get_max_lateral_speed = 0x68C3,
  SCR_OPAQUE_STRING_rpl_get_walk_loop_anim = 0x68C9,
  SCR_OPAQUE_STRING_rpl_get_walk_stop_anim = 0x68CB,
  SCR_OPAQUE_STRING_rpl_legs_get_blend_time = 0x68D4,
  SCR_OPAQUE_STRING_rpl_legs_get_idle_anim = 0x68D7,
  SCR_OPAQUE_STRING_rpl_legs_get_move_directions = 0x68D8,
  SCR_OPAQUE_STRING_rpl_legs_get_stop_move_direction = 0x68DC,
  SCR_OPAQUE_STRING_rpl_legs_should_use_run_loop = 0x68E7,
  SCR_OPAQUE_STRING_rt_fade_in = 0x68F3,
  SCR_OPAQUE_STRING_rt_helo_break_glass = 0x68F7,
  SCR_OPAQUE_STRING_rt_helo_cleanup = 0x68F9,
  SCR_OPAQUE_STRING_rt_helo_crash_train = 0x68FC,
  SCR_OPAQUE_STRING_rt_helo_dam = 0x68FE,
  SCR_OPAQUE_STRING_rt_helo_flyout = 0x6901,
  SCR_OPAQUE_STRING_rt_helo_fx_setup = 0x6902,
  SCR_OPAQUE_STRING_rt_helos_kill_ally = 0x690F,
  SCR_OPAQUE_STRING_rt_hero_train_impact = 0x6910,
  SCR_OPAQUE_STRING_rt_run_fic = 0x6914,
  SCR_OPAQUE_STRING_rt_spawn_and_link_helo_glass = 0x6915,
  SCR_OPAQUE_STRING_rubble_flare = 0x691F,
  SCR_OPAQUE_STRING_rumble_ent = 0x6925,
  SCR_OPAQUE_STRING_rumble_ramp_on = 0x692A,
  SCR_OPAQUE_STRING_rumbletrigger = 0x6930,
  SCR_OPAQUE_STRING_run_anim_events = 0x6936,
  SCR_OPAQUE_STRING_run_c17_jet_flyers = 0x693B,
  SCR_OPAQUE_STRING_run_call_after_wait_array = 0x693C,
  SCR_OPAQUE_STRING_run_defend_zodiac = 0x6946,
  SCR_OPAQUE_STRING_run_enemy_destroyer_gun = 0x694D,
  SCR_OPAQUE_STRING_run_nag_vo = 0x695E,
  SCR_OPAQUE_STRING_run_near_enemy = 0x695F,
  SCR_OPAQUE_STRING_run_noself_call_after_wait_array = 0x6960,
  SCR_OPAQUE_STRING_run_overrideanim = 0x696A,
  SCR_OPAQUE_STRING_run_overridebulletreact = 0x696B,
  SCR_OPAQUE_STRING_run_player_out_of_bounds = 0x696D,
  SCR_OPAQUE_STRING_run_spawn_functions = 0x6976,
  SCR_OPAQUE_STRING_run_speed = 0x6977,
  SCR_OPAQUE_STRING_run_speed_state = 0x6978,
  SCR_OPAQUE_STRING_run_to_new_spot_and_setup_gun = 0x697E,
  SCR_OPAQUE_STRING_runnerguys = 0x6994,
  SCR_OPAQUE_STRING_runngun_backward = 0x6996,
  SCR_OPAQUE_STRING_runportalstatus = 0x69A4,
  SCR_OPAQUE_STRING_runteamintel = 0x69AB,
  SCR_OPAQUE_STRING_runtovehicleoverride = 0x69AC,
  SCR_OPAQUE_STRING_runway_apache_logic = 0x69AD,
  SCR_OPAQUE_STRING_rushtime = 0x69C1,
  SCR_OPAQUE_STRING_saf_large_sign_01_dynamic_func = 0x69C7,
  SCR_OPAQUE_STRING_saf_streetlight_dynamic_func = 0x69C9,
  SCR_OPAQUE_STRING_safe_makerealai = 0x69D8,
  SCR_OPAQUE_STRING_safezone_sound_on = 0x69E6,
  SCR_OPAQUE_STRING_sam_exit = 0x69F2,
  SCR_OPAQUE_STRING_sam_fire_missiles = 0x69F4,
  SCR_OPAQUE_STRING_sam_missile_lockon = 0x6A00,
  SCR_OPAQUE_STRING_sam_reload_missile = 0x6A04,
  SCR_OPAQUE_STRING_sam_start_missile_lockon = 0x6A06,
  SCR_OPAQUE_STRING_sam_update_compass = 0x6A08,
  SCR_OPAQUE_STRING_sam_use_auto_lock_on = 0x6A0D,
  SCR_OPAQUE_STRING_sam_watchleaving = 0x6A10,
  SCR_OPAQUE_STRING_samdamagescale = 0x6A12,
  SCR_OPAQUE_STRING_samproximitydetonate = 0x6A18,
  SCR_OPAQUE_STRING_samtargetent = 0x6A19,
  SCR_OPAQUE_STRING_samturret = 0x6A1A,
  SCR_OPAQUE_STRING_sardines = 0x6A20,
  SCR_OPAQUE_STRING_sardines_balllinkpiece = 0x6A23,
  SCR_OPAQUE_STRING_sardines_ballpanic = 0x6A24,
  SCR_OPAQUE_STRING_sardines_line = 0x6A28,
  SCR_OPAQUE_STRING_sardines_spreadring = 0x6A36,
  SCR_OPAQUE_STRING_sat_base_s = 0x6A39,
  SCR_OPAQUE_STRING_sat_combat = 0x6A3A,
  SCR_OPAQUE_STRING_sat_crane_arm = 0x6A3C,
  SCR_OPAQUE_STRING_satellite_cleanup = 0x6A4A,
  SCR_OPAQUE_STRING_satellite_group_hide = 0x6A55,
  SCR_OPAQUE_STRING_satellite_script_mover = 0x6A5E,
  SCR_OPAQUE_STRING_satellite_view_blink_corners = 0x6A67,
  SCR_OPAQUE_STRING_satellite_view_pip_close_l_corner = 0x6A79,
  SCR_OPAQUE_STRING_satellite_view_pip_display_name = 0x6A7B,
  SCR_OPAQUE_STRING_satellite_view_pip_set_entity = 0x6A7F,
  SCR_OPAQUE_STRING_satellite_view_remove_l_corners = 0x6A81,
  SCR_OPAQUE_STRING_satellite_view_type_anchored_text = 0x6A84,
  SCR_OPAQUE_STRING_satellite_view_type_multiline_text_at_point = 0x6A86,
  SCR_OPAQUE_STRING_satellite_view_zoom_in_sound = 0x6A8C,
  SCR_OPAQUE_STRING_satfarm_global_flags = 0x6A92,
  SCR_OPAQUE_STRING_save_turret_sharing_info = 0x6AA0,
  SCR_OPAQUE_STRING_saveplayerweaponstatepersistent = 0x6AAB,
  SCR_OPAQUE_STRING_saw_mgturretlink = 0x6AAE,
  SCR_OPAQUE_STRING_say_nag_after_delay = 0x6AB0,
  SCR_OPAQUE_STRING_saylocalsounddelayed = 0x6AB4,
  SCR_OPAQUE_STRING_scale = 0x6AB9,
  SCR_OPAQUE_STRING_scan_blur = 0x6ABB,
  SCR_OPAQUE_STRING_scared_behavior = 0x6AC1,
  SCR_OPAQUE_STRING_scared_danger_dialogue = 0x6AC2,
  SCR_OPAQUE_STRING_scene1emitter = 0x6AC8,
  SCR_OPAQUE_STRING_scene_loop = 0x6ACA,
  SCR_OPAQUE_STRING_scr_anim = 0x6AEB,
  SCR_OPAQUE_STRING_scr_notetrack = 0x6AF4,
  SCR_OPAQUE_STRING_scr_text = 0x6AF8,
  SCR_OPAQUE_STRING_scramble_watchlineofsight = 0x6AFD,
  SCR_OPAQUE_STRING_scrambletarget = 0x6B01,
  SCR_OPAQUE_STRING_screen_effect_on_open_bottom = 0x6B09,
  SCR_OPAQUE_STRING_screen_glitch_org = 0x6B0D,
  SCR_OPAQUE_STRING_screen_shake_vehicles = 0x6B11,
  SCR_OPAQUE_STRING_script_airstrike_exp02 = 0x6B25,
  SCR_OPAQUE_STRING_script_airstrike_exp05 = 0x6B28,
  SCR_OPAQUE_STRING_script_allowdeath = 0x6B2B,
  SCR_OPAQUE_STRING_script_ammo_alt_extra = 0x6B2D,
  SCR_OPAQUE_STRING_script_audio_update_rate = 0x6B44,
  SCR_OPAQUE_STRING_script_audio_zones = 0x6B45,
  SCR_OPAQUE_STRING_script_color_axis = 0x6B68,
  SCR_OPAQUE_STRING_script_count = 0x6B6D,
  SCR_OPAQUE_STRING_script_count_max = 0x6B6E,
  SCR_OPAQUE_STRING_script_crashtypeoverride = 0x6B71,
  SCR_OPAQUE_STRING_script_deathchain = 0x6B77,
  SCR_OPAQUE_STRING_script_deathflag_longdeath = 0x6B79,
  SCR_OPAQUE_STRING_script_deathroll = 0x6B7A,
  SCR_OPAQUE_STRING_script_decel_fraction = 0x6B7D,
  SCR_OPAQUE_STRING_script_delayed_playerseek = 0x6B82,
  SCR_OPAQUE_STRING_script_delete_vehicles = 0x6B84,
  SCR_OPAQUE_STRING_script_destruct_collision = 0x6B86,
  SCR_OPAQUE_STRING_script_dof_far_start = 0x6B8E,
  SCR_OPAQUE_STRING_script_engage = 0x6BA2,
  SCR_OPAQUE_STRING_script_favoriteenemy = 0x6BB3,
  SCR_OPAQUE_STRING_script_firefx = 0x6BB5,
  SCR_OPAQUE_STRING_script_firelink = 0x6BB9,
  SCR_OPAQUE_STRING_script_fixednode = 0x6BBC,
  SCR_OPAQUE_STRING_script_flag = 0x6BBD,
  SCR_OPAQUE_STRING_script_flag_clear = 0x6BBE,
  SCR_OPAQUE_STRING_script_flag_set = 0x6BC2,
  SCR_OPAQUE_STRING_script_followmax = 0x6BCB,
  SCR_OPAQUE_STRING_script_forcegrenade = 0x6BD3,
  SCR_OPAQUE_STRING_script_gametype_koth = 0x6BE2,
  SCR_OPAQUE_STRING_script_ghettotag = 0x6BE6,
  SCR_OPAQUE_STRING_script_goal_radius = 0x6BE7,
  SCR_OPAQUE_STRING_script_goalvolume = 0x6BEC,
  SCR_OPAQUE_STRING_script_grenadespeed = 0x6BF2,
  SCR_OPAQUE_STRING_script_health = 0x6BF5,
  SCR_OPAQUE_STRING_script_hidden = 0x6BF7,
  SCR_OPAQUE_STRING_script_idleanim = 0x6BFA,
  SCR_OPAQUE_STRING_script_ignore_suppression = 0x6BFC,
  SCR_OPAQUE_STRING_script_light = 0x6C0E,
  SCR_OPAQUE_STRING_script_linkto = 0x6C11,
  SCR_OPAQUE_STRING_script_longdeath = 0x6C13,
  SCR_OPAQUE_STRING_script_mapsize_16 = 0x6C17,
  SCR_OPAQUE_STRING_script_mapsize_32 = 0x6C18,
  SCR_OPAQUE_STRING_script_minspec_level = 0x6C24,
  SCR_OPAQUE_STRING_script_mortargroup_domortar = 0x6C30,
  SCR_OPAQUE_STRING_script_mortargroup_mortarzone = 0x6C32,
  SCR_OPAQUE_STRING_script_move_vehicles = 0x6C35,
  SCR_OPAQUE_STRING_script_mover = 0x6C38,
  SCR_OPAQUE_STRING_script_mover_add_hintstring = 0x6C39,
  SCR_OPAQUE_STRING_script_mover_add_parameters = 0x6C3A,
  SCR_OPAQUE_STRING_script_mover_connect_watch = 0x6C40,
  SCR_OPAQUE_STRING_script_mover_func_on_notify = 0x6C42,
  SCR_OPAQUE_STRING_script_mover_is_script_mover = 0x6C46,
  SCR_OPAQUE_STRING_script_mover_move_to_named_goal = 0x6C47,
  SCR_OPAQUE_STRING_script_mover_move_to_target = 0x6C48,
  SCR_OPAQUE_STRING_script_mover_parameters = 0x6C4A,
  SCR_OPAQUE_STRING_script_mover_parse_range = 0x6C4C,
  SCR_OPAQUE_STRING_script_mover_save_default_move_parameters = 0x6C4F,
  SCR_OPAQUE_STRING_script_multiplier = 0x6C56,
  SCR_OPAQUE_STRING_script_namenumber = 0x6C57,
  SCR_OPAQUE_STRING_script_node_pausetime = 0x6C5A,
  SCR_OPAQUE_STRING_script_nofriendlywave = 0x6C5E,
  SCR_OPAQUE_STRING_script_nosurprise = 0x6C62,
  SCR_OPAQUE_STRING_script_objective_inactive = 0x6C6B,
  SCR_OPAQUE_STRING_script_oneway = 0x6C6F,
  SCR_OPAQUE_STRING_script_painter_treeorient = 0x6C74,
  SCR_OPAQUE_STRING_script_pet = 0x6C7C,
  SCR_OPAQUE_STRING_script_physics = 0x6C7D,
  SCR_OPAQUE_STRING_script_retreating_allies04_firing = 0x6C8E,
  SCR_OPAQUE_STRING_script_rumble = 0x6C92,
  SCR_OPAQUE_STRING_script_savedata = 0x6C93,
  SCR_OPAQUE_STRING_script_shooting_tanks_01 = 0x6C98,
  SCR_OPAQUE_STRING_script_shooting_tanks_08 = 0x6C9F,
  SCR_OPAQUE_STRING_script_spawnsubgroup = 0x6CB1,
  SCR_OPAQUE_STRING_script_specialops = 0x6CB2,
  SCR_OPAQUE_STRING_script_stay_drone = 0x6CC1,
  SCR_OPAQUE_STRING_script_transient = 0x6CD9,
  SCR_OPAQUE_STRING_script_triggered_playerseek = 0x6CDD,
  SCR_OPAQUE_STRING_script_turretmg = 0x6CE5,
  SCR_OPAQUE_STRING_script_vehicle_selfremove = 0x6CEF,
  SCR_OPAQUE_STRING_script_vehicletriggergroup = 0x6CFD,
  SCR_OPAQUE_STRING_scriptable_vo_handler = 0x6D0A,
  SCR_OPAQUE_STRING_scriptables = 0x6D0C,
  SCR_OPAQUE_STRING_scripted_dialogue = 0x6D11,
  SCR_OPAQUE_STRING_scubamask_distortion = 0x6D1E,
  SCR_OPAQUE_STRING_sd_loadout = 0x6D24,
  SCR_OPAQUE_STRING_sd_loadouts = 0x6D25,
  SCR_OPAQUE_STRING_sd_prisonerobjective = 0x6D27,
  SCR_OPAQUE_STRING_sd_triggers = 0x6D28,
  SCR_OPAQUE_STRING_sdbomb = 0x6D29,
  SCR_OPAQUE_STRING_sdv_follow_spotted_react = 0x6D2C,
  SCR_OPAQUE_STRING_second_bumper_hint = 0x6D35,
  SCR_OPAQUE_STRING_second_floor_elevator_guy_setup = 0x6D3D,
  SCR_OPAQUE_STRING_second_floor_fridge_guy_setup = 0x6D40,
  SCR_OPAQUE_STRING_second_floor_kitchenette_guy_setup = 0x6D43,
  SCR_OPAQUE_STRING_second_floor_poker_table_guys_setup = 0x6D46,
  SCR_OPAQUE_STRING_second_patroller = 0x6D4B,
  SCR_OPAQUE_STRING_secondarytarget = 0x6D4F,
  SCR_OPAQUE_STRING_secondload = 0x6D52,
  SCR_OPAQUE_STRING_section_flag_inits = 0x6D57,
  SCR_OPAQUE_STRING_security_beeps = 0x6D5E,
  SCR_OPAQUE_STRING_seekoutenemytime = 0x6D63,
  SCR_OPAQUE_STRING_seen_attacker = 0x6D64,
  SCR_OPAQUE_STRING_segments = 0x6D65,
  SCR_OPAQUE_STRING_select_by_substring = 0x6D6B,
  SCR_OPAQUE_STRING_select_last_entity = 0x6D6E,
  SCR_OPAQUE_STRING_selected_fx_ents = 0x6D75,
  SCR_OPAQUE_STRING_selectentrancelocation = 0x6D7E,
  SCR_OPAQUE_STRING_selectidleanimstate = 0x6D7F,
  SCR_OPAQUE_STRING_self_cleanup = 0x6D85,
  SCR_OPAQUE_STRING_self_func = 0x6D87,
  SCR_OPAQUE_STRING_send_friends_in = 0x6D95,
  SCR_OPAQUE_STRING_send_to_node_and_set_flag_if_specified_when_reached = 0x6D9A,
  SCR_OPAQUE_STRING_send_to_volume_and_delete = 0x6D9B,
  SCR_OPAQUE_STRING_sensitive_chopper_in_players_view = 0x6DA0,
  SCR_OPAQUE_STRING_sensor = 0x6DA1,
  SCR_OPAQUE_STRING_sensorscreeneffects = 0x6DA2,
  SCR_OPAQUE_STRING_sentient = 0x6DA3,
  SCR_OPAQUE_STRING_sentry_badplace_delete = 0x6DAC,
  SCR_OPAQUE_STRING_sentry_beep_sounds = 0x6DAE,
  SCR_OPAQUE_STRING_sentry_burst_fire_start = 0x6DB0,
  SCR_OPAQUE_STRING_sentry_burstfirestop = 0x6DB3,
  SCR_OPAQUE_STRING_sentry_enemy_wait = 0x6DBE,
  SCR_OPAQUE_STRING_sentry_gun_weak_settings = 0x6DC2,
  SCR_OPAQUE_STRING_sentry_initsentry = 0x6DCB,
  SCR_OPAQUE_STRING_sentry_place_delay = 0x6DDC,
  SCR_OPAQUE_STRING_sentry_setactive = 0x6DE9,
  SCR_OPAQUE_STRING_sentry_smg_default_settings = 0x6DF3,
  SCR_OPAQUE_STRING_sentry_synch_attack_begin = 0x6DF7,
  SCR_OPAQUE_STRING_sentry_team_show_icon = 0x6DFD,
  SCR_OPAQUE_STRING_sentrymode = 0x6E06,
  SCR_OPAQUE_STRING_sentrymodifydamage = 0x6E09,
  SCR_OPAQUE_STRING_set3duseicon = 0x6E16,
  SCR_OPAQUE_STRING_set_ai_bcvoice = 0x6E20,
  SCR_OPAQUE_STRING_set_all_ai_targetnames = 0x6E29,
  SCR_OPAQUE_STRING_set_all_exceptions = 0x6E2A,
  SCR_OPAQUE_STRING_set_allowdeath = 0x6E2C,
  SCR_OPAQUE_STRING_set_animarray_burst_and_semi_fire_crouch = 0x6E37,
  SCR_OPAQUE_STRING_set_animarray_crouching = 0x6E39,
  SCR_OPAQUE_STRING_set_animarray_crouching_left = 0x6E3A,
  SCR_OPAQUE_STRING_set_audio_mix = 0x6E4B,
  SCR_OPAQUE_STRING_set_bag_visibility = 0x6E4F,
  SCR_OPAQUE_STRING_set_breaching_variable = 0x6E5E,
  SCR_OPAQUE_STRING_set_console_status = 0x6E64,
  SCR_OPAQUE_STRING_set_custom_gameskill_func = 0x6E70,
  SCR_OPAQUE_STRING_set_cycle_scalars = 0x6E73,
  SCR_OPAQUE_STRING_set_default_hud_stuff = 0x6E7F,
  SCR_OPAQUE_STRING_set_diff_accuracy = 0x6E87,
  SCR_OPAQUE_STRING_set_dog_hud_disabled = 0x6E8F,
  SCR_OPAQUE_STRING_set_dog_hud_for_guard = 0x6E91,
  SCR_OPAQUE_STRING_set_dpad_right_level = 0x6E9E,
  SCR_OPAQUE_STRING_set_dpad_up_level = 0x6E9F,
  SCR_OPAQUE_STRING_set_drill_state_run = 0x6EA4,
  SCR_OPAQUE_STRING_set_enter_garage_mall_vf = 0x6EAB,
  SCR_OPAQUE_STRING_set_firing = 0x6EB7,
  SCR_OPAQUE_STRING_set_flag_on_dead = 0x6EC0,
  SCR_OPAQUE_STRING_set_flag_on_dead_or_dying = 0x6EC1,
  SCR_OPAQUE_STRING_set_flag_on_spawned = 0x6EC5,
  SCR_OPAQUE_STRING_set_flavorbursts_team_state = 0x6EDA,
  SCR_OPAQUE_STRING_set_glass_zero_gravity = 0x6EF2,
  SCR_OPAQUE_STRING_set_goal_from_settings = 0x6EF7,
  SCR_OPAQUE_STRING_set_goal_volume = 0x6EFE,
  SCR_OPAQUE_STRING_set_grenadeammo = 0x6F01,
  SCR_OPAQUE_STRING_set_high_priority_target_for_bot = 0x6F04,
  SCR_OPAQUE_STRING_set_hud_name_percent_value = 0x6F07,
  SCR_OPAQUE_STRING_set_hud_value = 0x6F09,
  SCR_OPAQUE_STRING_set_hud_value_internal = 0x6F0A,
  SCR_OPAQUE_STRING_set_hudoutline = 0x6F0B,
  SCR_OPAQUE_STRING_set_ignoreall = 0x6F12,
  SCR_OPAQUE_STRING_set_ignoreme = 0x6F13,
  SCR_OPAQUE_STRING_set_ignoresuppression = 0x6F14,
  SCR_OPAQUE_STRING_set_initial_emissive = 0x6F15,
  SCR_OPAQUE_STRING_set_key = 0x6F18,
  SCR_OPAQUE_STRING_set_missile_reaction = 0x6F22,
  SCR_OPAQUE_STRING_set_mission_failed_override = 0x6F24,
  SCR_OPAQUE_STRING_set_mk23_model = 0x6F27,
  SCR_OPAQUE_STRING_set_mortar_on = 0x6F28,
  SCR_OPAQUE_STRING_set_motion_blur = 0x6F29,
  SCR_OPAQUE_STRING_set_motionblur = 0x6F2A,
  SCR_OPAQUE_STRING_set_nerf_scalar = 0x6F30,
  SCR_OPAQUE_STRING_set_new_enemy_volume = 0x6F31,
  SCR_OPAQUE_STRING_set_off_exploders = 0x6F39,
  SCR_OPAQUE_STRING_set_perk_bullet_damage_1 = 0x6F46,
  SCR_OPAQUE_STRING_set_perk_bullet_damage_4 = 0x6F49,
  SCR_OPAQUE_STRING_set_perk_health_level_1 = 0x6F4B,
  SCR_OPAQUE_STRING_set_perk_pistol_m9a1_2 = 0x6F56,
  SCR_OPAQUE_STRING_set_perk_pistol_magnum_0 = 0x6F59,
  SCR_OPAQUE_STRING_set_perk_pistol_mp443_2 = 0x6F60,
  SCR_OPAQUE_STRING_set_perk_pistol_p226_0 = 0x6F63,
  SCR_OPAQUE_STRING_set_perk_rigger_1 = 0x6F69,
  SCR_OPAQUE_STRING_set_perk_rigger_3 = 0x6F6B,
  SCR_OPAQUE_STRING_set_perk_rigger_4 = 0x6F6C,
  SCR_OPAQUE_STRING_set_player_character_model = 0x6F6F,
  SCR_OPAQUE_STRING_set_player_hearbeat_rate = 0x6F72,
  SCR_OPAQUE_STRING_set_player_session_rankup = 0x6F79,
  SCR_OPAQUE_STRING_set_room_to_breached = 0x6F87,
  SCR_OPAQUE_STRING_set_silenthawk_override_anims = 0x6F91,
  SCR_OPAQUE_STRING_set_spawners_for_location = 0x6F98,
  SCR_OPAQUE_STRING_set_stage = 0x6F99,
  SCR_OPAQUE_STRING_set_standing_turns = 0x6F9C,
  SCR_OPAQUE_STRING_set_start_pos = 0x6F9D,
  SCR_OPAQUE_STRING_set_start_positions = 0x6F9E,
  SCR_OPAQUE_STRING_set_stop_ignore_flag = 0x6FA0,
  SCR_OPAQUE_STRING_set_talker_until_msg = 0x6FA5,
  SCR_OPAQUE_STRING_set_team_bcvoice = 0x6FA6,
  SCR_OPAQUE_STRING_set_up_vignette_enemies = 0x6FB5,
  SCR_OPAQUE_STRING_set_up_when_patroller_goes = 0x6FB6,
  SCR_OPAQUE_STRING_set_vision_set = 0x6FBF,
  SCR_OPAQUE_STRING_set_visionset_for_watching_players = 0x6FC2,
  SCR_OPAQUE_STRING_set_vo_currently_playing = 0x6FC3,
  SCR_OPAQUE_STRING_set_vo_system_playing = 0x6FC4,
  SCR_OPAQUE_STRING_set_warelights_off = 0x6FC7,
  SCR_OPAQUE_STRING_set_z = 0x6FCF,
  SCR_OPAQUE_STRING_setac130 = 0x6FD3,
  SCR_OPAQUE_STRING_setactivegrenadetimer = 0x6FD5,
  SCR_OPAQUE_STRING_setairdropcratecollision = 0x6FD8,
  SCR_OPAQUE_STRING_setalienloadout = 0x6FDA,
  SCR_OPAQUE_STRING_setanimaimweight = 0x6FDD,
  SCR_OPAQUE_STRING_setbloodrushinternal = 0x6FEE,
  SCR_OPAQUE_STRING_setcarriervisible = 0x6FF8,
  SCR_OPAQUE_STRING_setcarryicon = 0x6FF9,
  SCR_OPAQUE_STRING_setcarryingtank = 0x6FFD,
  SCR_OPAQUE_STRING_setcarryingturret = 0x6FFE,
  SCR_OPAQUE_STRING_setcomexp = 0x7009,
  SCR_OPAQUE_STRING_setdefaultmodel = 0x7018,
  SCR_OPAQUE_STRING_setdelaymine = 0x701A,
  SCR_OPAQUE_STRING_setdirection = 0x701C,
  SCR_OPAQUE_STRING_setfirstinfected = 0x7033,
  SCR_OPAQUE_STRING_setflashbangimmunity = 0x7036,
  SCR_OPAQUE_STRING_setgamblerinternal = 0x703F,
  SCR_OPAQUE_STRING_setglobalaimsettings = 0x7041,
  SCR_OPAQUE_STRING_setgunsmithinternal = 0x7046,
  SCR_OPAQUE_STRING_sethardshell = 0x7048,
  SCR_OPAQUE_STRING_setheadicon = 0x704A,
  SCR_OPAQUE_STRING_seticonshader = 0x7050,
  SCR_OPAQUE_STRING_setjugg = 0x7059,
  SCR_OPAQUE_STRING_setlightweight = 0x7064,
  SCR_OPAQUE_STRING_setlowermessage = 0x7067,
  SCR_OPAQUE_STRING_setmapcenterfordev = 0x7068,
  SCR_OPAQUE_STRING_setmatchrecordiflower = 0x706B,
  SCR_OPAQUE_STRING_setmeleeattackdist = 0x706D,
  SCR_OPAQUE_STRING_setmovenonforwardanims = 0x7076,
  SCR_OPAQUE_STRING_setnotetrackeffect = 0x707E,
  SCR_OPAQUE_STRING_setobjectivehinttext = 0x7081,
  SCR_OPAQUE_STRING_setplayermodels = 0x709C,
  SCR_OPAQUE_STRING_setpose = 0x70A6,
  SCR_OPAQUE_STRING_setposemovementfnarray = 0x70A8,
  SCR_OPAQUE_STRING_setscrambled = 0x70BE,
  SCR_OPAQUE_STRING_setshootstyleforsuppression = 0x70C4,
  SCR_OPAQUE_STRING_setsize = 0x70C8,
  SCR_OPAQUE_STRING_setspawnpoint = 0x70CC,
  SCR_OPAQUE_STRING_setstandardspeed = 0x70D2,
  SCR_OPAQUE_STRING_setstreakcounttonext = 0x70D6,
  SCR_OPAQUE_STRING_setstrikermodel = 0x70D7,
  SCR_OPAQUE_STRING_setup_ai = 0x70F3,
  SCR_OPAQUE_STRING_setup_ai_for_end = 0x70F5,
  SCR_OPAQUE_STRING_setup_atrium_check = 0x7101,
  SCR_OPAQUE_STRING_setup_blocker_hives = 0x7105,
  SCR_OPAQUE_STRING_setup_bodydrag_startpoint = 0x7107,
  SCR_OPAQUE_STRING_setup_bullet_pinholes = 0x710B,
  SCR_OPAQUE_STRING_setup_camera_roll = 0x710D,
  SCR_OPAQUE_STRING_setup_capture = 0x710E,
  SCR_OPAQUE_STRING_setup_combat = 0x711A,
  SCR_OPAQUE_STRING_setup_common = 0x711B,
  SCR_OPAQUE_STRING_setup_damageable_exploder_rooftanks = 0x7126,
  SCR_OPAQUE_STRING_setup_defend_blowdoors2 = 0x7130,
  SCR_OPAQUE_STRING_setup_defense_bunkers = 0x7135,
  SCR_OPAQUE_STRING_setup_dog = 0x713A,
  SCR_OPAQUE_STRING_setup_edge_lean = 0x7143,
  SCR_OPAQUE_STRING_setup_electric_fence = 0x7144,
  SCR_OPAQUE_STRING_setup_enemies_open_gate = 0x7146,
  SCR_OPAQUE_STRING_setup_exfil = 0x7148,
  SCR_OPAQUE_STRING_setup_flags = 0x7153,
  SCR_OPAQUE_STRING_setup_flood_water_anims = 0x7154,
  SCR_OPAQUE_STRING_setup_front_elevator = 0x7158,
  SCR_OPAQUE_STRING_setup_fuel_leak_lighting = 0x7159,
  SCR_OPAQUE_STRING_setup_garden_entry = 0x715E,
  SCR_OPAQUE_STRING_setup_gate_ai = 0x7160,
  SCR_OPAQUE_STRING_setup_hangar_truck_pre_loaded = 0x7163,
  SCR_OPAQUE_STRING_setup_hangar_truck_to_load = 0x7164,
  SCR_OPAQUE_STRING_setup_hill_enemies = 0x7165,
  SCR_OPAQUE_STRING_setup_house = 0x7167,
  SCR_OPAQUE_STRING_setup_individual_exploder = 0x716C,
  SCR_OPAQUE_STRING_setup_inverted_rappel = 0x7176,
  SCR_OPAQUE_STRING_setup_item_data = 0x7179,
  SCR_OPAQUE_STRING_setup_mall = 0x7186,
  SCR_OPAQUE_STRING_setup_neighborhood = 0x7194,
  SCR_OPAQUE_STRING_setup_object_friction_mass = 0x7196,
  SCR_OPAQUE_STRING_setup_objectives = 0x7197,
  SCR_OPAQUE_STRING_setup_office_enemy_vo = 0x719C,
  SCR_OPAQUE_STRING_setup_retreat_vols = 0x71AF,
  SCR_OPAQUE_STRING_setup_rooftop_dof = 0x71B1,
  SCR_OPAQUE_STRING_setup_scientist = 0x71BC,
  SCR_OPAQUE_STRING_setup_shadow_kill = 0x71C5,
  SCR_OPAQUE_STRING_setup_traverse = 0x71D4,
  SCR_OPAQUE_STRING_setup_tunnel = 0x71D9,
  SCR_OPAQUE_STRING_setup_woods = 0x71E8,
  SCR_OPAQUE_STRING_setupapproachnode = 0x71EB,
  SCR_OPAQUE_STRING_setupcqbpointsofinterest = 0x71F1,
  SCR_OPAQUE_STRING_setupdamageflags = 0x71F2,
  SCR_OPAQUE_STRING_setupdoor = 0x71F6,
  SCR_OPAQUE_STRING_setupforrandomspawn = 0x71FA,
  SCR_OPAQUE_STRING_setupmovement = 0x7201,
  SCR_OPAQUE_STRING_setuppaths = 0x7202,
  SCR_OPAQUE_STRING_sfx_airlock_door = 0x721D,
  SCR_OPAQUE_STRING_sfx_ally_ally_grapple = 0x721F,
  SCR_OPAQUE_STRING_sfx_ally_grab_script = 0x7220,
  SCR_OPAQUE_STRING_sfx_ally_plr_grapple_loop = 0x7223,
  SCR_OPAQUE_STRING_sfx_ascend_wind_last = 0x722F,
  SCR_OPAQUE_STRING_sfx_blackice_catwalk_collapse = 0x723F,
  SCR_OPAQUE_STRING_sfx_blackice_derrick_exp6_ss = 0x7244,
  SCR_OPAQUE_STRING_sfx_blackice_door_rollup = 0x7245,
  SCR_OPAQUE_STRING_sfx_blackice_engine_beam_fall = 0x7247,
  SCR_OPAQUE_STRING_sfx_blackice_engine_dist_explo = 0x7248,
  SCR_OPAQUE_STRING_sfx_cmd_console_acknowledge = 0x7266,
  SCR_OPAQUE_STRING_sfx_cmd_seq_end = 0x7269,
  SCR_OPAQUE_STRING_sfx_controlroom_explosions = 0x7270,
  SCR_OPAQUE_STRING_sfx_delete_refinery_alarm_node = 0x7278,
  SCR_OPAQUE_STRING_sfx_derrick_mix_change = 0x727C,
  SCR_OPAQUE_STRING_sfx_distant_oil_rig = 0x7282,
  SCR_OPAQUE_STRING_sfx_drill_destroyed = 0x7283,
  SCR_OPAQUE_STRING_sfx_drill_offline = 0x7285,
  SCR_OPAQUE_STRING_sfx_drill_offline_beep = 0x7286,
  SCR_OPAQUE_STRING_sfx_drill_plant = 0x7289,
  SCR_OPAQUE_STRING_sfx_escape_destruction_fire_puffs = 0x728F,
  SCR_OPAQUE_STRING_sfx_fire_tower_triggers = 0x729F,
  SCR_OPAQUE_STRING_sfx_flare_stack_arm_expl = 0x72A2,
  SCR_OPAQUE_STRING_sfx_flarestack_door_open = 0x72A5,
  SCR_OPAQUE_STRING_sfx_gas_line_scene_plr_hit = 0x72B5,
  SCR_OPAQUE_STRING_sfx_gen4_fire_puff = 0x72B9,
  SCR_OPAQUE_STRING_sfx_gun_grab_script = 0x72BB,
  SCR_OPAQUE_STRING_sfx_heli_flyaway_cmd_center = 0x72C4,
  SCR_OPAQUE_STRING_sfx_heli_rooftops_engine = 0x72CC,
  SCR_OPAQUE_STRING_sfx_heli_turret_fire_start = 0x72D3,
  SCR_OPAQUE_STRING_sfx_heli_turret_shells_stop = 0x72D6,
  SCR_OPAQUE_STRING_sfx_intro_heli_engine = 0x72E3,
  SCR_OPAQUE_STRING_sfx_jet_passby_01 = 0x72E9,
  SCR_OPAQUE_STRING_sfx_jet_passby_02 = 0x72EA,
  SCR_OPAQUE_STRING_sfx_jet_passby_04 = 0x72EC,
  SCR_OPAQUE_STRING_sfx_jet_passby_05 = 0x72ED,
  SCR_OPAQUE_STRING_sfx_kyra_hatch = 0x72F5,
  SCR_OPAQUE_STRING_sfx_last_pass = 0x7301,
  SCR_OPAQUE_STRING_sfx_lever_logic = 0x7305,
  SCR_OPAQUE_STRING_sfx_lever_rumbles = 0x7307,
  SCR_OPAQUE_STRING_sfx_loco_breach_02 = 0x730A,
  SCR_OPAQUE_STRING_sfx_loco_breach_out = 0x730B,
  SCR_OPAQUE_STRING_sfx_loki_control_room_start = 0x730E,
  SCR_OPAQUE_STRING_sfx_long_pipe_bursts = 0x7310,
  SCR_OPAQUE_STRING_sfx_noticket = 0x731E,
  SCR_OPAQUE_STRING_sfx_odin_decompress = 0x7320,
  SCR_OPAQUE_STRING_sfx_odin_decompress_explode = 0x7321,
  SCR_OPAQUE_STRING_sfx_odin_spin_explosion = 0x7325,
  SCR_OPAQUE_STRING_sfx_odin_spinup = 0x7326,
  SCR_OPAQUE_STRING_sfx_plane_crash_script = 0x732B,
  SCR_OPAQUE_STRING_sfx_play_pipe_sounds = 0x732F,
  SCR_OPAQUE_STRING_sfx_plr_vault = 0x733D,
  SCR_OPAQUE_STRING_sfx_post_infil_door = 0x733E,
  SCR_OPAQUE_STRING_sfx_rescue_heli_flyin = 0x734A,
  SCR_OPAQUE_STRING_sfx_rooftop_collapse = 0x7353,
  SCR_OPAQUE_STRING_sfx_sat_approach_kyra = 0x735B,
  SCR_OPAQUE_STRING_sfx_sat_big_fire_lp = 0x735D,
  SCR_OPAQUE_STRING_sfx_satellite_lat_thruster_loop = 0x7362,
  SCR_OPAQUE_STRING_sfx_set_rog_amb = 0x736C,
  SCR_OPAQUE_STRING_sfx_shaky_camera_moment = 0x736F,
  SCR_OPAQUE_STRING_sfx_stereo_quake = 0x7383,
  SCR_OPAQUE_STRING_sfx_stop_alley_water = 0x7385,
  SCR_OPAQUE_STRING_sfx_stop_ascend_sound_wait = 0x7386,
  SCR_OPAQUE_STRING_sfx_train_derail_sound = 0x7397,
  SCR_OPAQUE_STRING_sfx_truck_sinking = 0x739A,
  SCR_OPAQUE_STRING_sfxcannonfireloop_1p = 0x73B0,
  SCR_OPAQUE_STRING_sfxmissilefire_3p = 0x73B8,
  SCR_OPAQUE_STRING_shader_fade_out = 0x73BB,
  SCR_OPAQUE_STRING_shadowkill_phone_on = 0x73D0,
  SCR_OPAQUE_STRING_shadowkill_phone_show = 0x73D1,
  SCR_OPAQUE_STRING_shakemag = 0x73D5,
  SCR_OPAQUE_STRING_shaky_moment = 0x73D6,
  SCR_OPAQUE_STRING_shared_turrets = 0x73D8,
  SCR_OPAQUE_STRING_shark_attack_2_fx = 0x73DA,
  SCR_OPAQUE_STRING_shark_collision_model = 0x73DF,
  SCR_OPAQUE_STRING_shark_eat_wandering_player = 0x73E2,
  SCR_OPAQUE_STRING_shark_heartbeat = 0x73E5,
  SCR_OPAQUE_STRING_shark_kill_front = 0x73E7,
  SCR_OPAQUE_STRING_shark_room_faster_hint = 0x73EF,
  SCR_OPAQUE_STRING_shark_think = 0x73F0,
  SCR_OPAQUE_STRING_shipartilleryspots = 0x740C,
  SCR_OPAQUE_STRING_shoot_from_ai_to_ai = 0x7423,
  SCR_OPAQUE_STRING_shootanimtime = 0x742F,
  SCR_OPAQUE_STRING_shootenemytarget_bullets = 0x7433,
  SCR_OPAQUE_STRING_shootentvelocity = 0x743A,
  SCR_OPAQUE_STRING_shooter_tracking = 0x743E,
  SCR_OPAQUE_STRING_shootflares = 0x7441,
  SCR_OPAQUE_STRING_shootuntilneedtoturn = 0x744C,
  SCR_OPAQUE_STRING_shot = 0x7456,
  SCR_OPAQUE_STRING_shotgunswitchfinish = 0x7461,
  SCR_OPAQUE_STRING_should_do_immediate_ragdoll = 0x7472,
  SCR_OPAQUE_STRING_should_explode_on_damage = 0x7477,
  SCR_OPAQUE_STRING_should_make_entity_sentient = 0x7480,
  SCR_OPAQUE_STRING_should_put_drill_outline_on = 0x7488,
  SCR_OPAQUE_STRING_should_put_player_outline_on = 0x7489,
  SCR_OPAQUE_STRING_should_stabilize = 0x748F,
  SCR_OPAQUE_STRING_should_toggle_silencer = 0x7495,
  SCR_OPAQUE_STRING_shouldconserveammotime = 0x74A3,
  SCR_OPAQUE_STRING_shoulddoarrivals = 0x74A6,
  SCR_OPAQUE_STRING_shoulddostopanim = 0x74AC,
  SCR_OPAQUE_STRING_shouldfirewhilechangingpose = 0x74B1,
  SCR_OPAQUE_STRING_shouldhelpadvancingteammate = 0x74B4,
  SCR_OPAQUE_STRING_shouldpreventearlyuse = 0x74BB,
  SCR_OPAQUE_STRING_shouldreturntocover = 0x74BE,
  SCR_OPAQUE_STRING_shouldsniff = 0x74C3,
  SCR_OPAQUE_STRING_show_binoc_scan_hint = 0x74D6,
  SCR_OPAQUE_STRING_show_challenge_outcome = 0x74D7,
  SCR_OPAQUE_STRING_show_ent = 0x74DD,
  SCR_OPAQUE_STRING_show_entity = 0x74DE,
  SCR_OPAQUE_STRING_show_fire_hide_aim_idle = 0x74E2,
  SCR_OPAQUE_STRING_show_garage_debris = 0x74E3,
  SCR_OPAQUE_STRING_show_icon = 0x74EB,
  SCR_OPAQUE_STRING_show_legs = 0x74F0,
  SCR_OPAQUE_STRING_show_missile_launcher_collision = 0x74F3,
  SCR_OPAQUE_STRING_show_train_geo = 0x74FC,
  SCR_OPAQUE_STRING_show_trap_icon_to_team = 0x74FE,
  SCR_OPAQUE_STRING_show_weapon_switch_hints = 0x7503,
  SCR_OPAQUE_STRING_showcapturedbaseeffecttoplayer = 0x7505,
  SCR_OPAQUE_STRING_showclosedportalfx = 0x7507,
  SCR_OPAQUE_STRING_showcratesplash = 0x7508,
  SCR_OPAQUE_STRING_showdefendprompt = 0x750C,
  SCR_OPAQUE_STRING_showfx = 0x7511,
  SCR_OPAQUE_STRING_showlastenemysightpos = 0x7518,
  SCR_OPAQUE_STRING_showline = 0x7519,
  SCR_OPAQUE_STRING_showmainmenuforteam = 0x751B,
  SCR_OPAQUE_STRING_showspawnnotifies = 0x7521,
  SCR_OPAQUE_STRING_showspawnpoint = 0x7522,
  SCR_OPAQUE_STRING_shufflekillstreaksdown = 0x752C,
  SCR_OPAQUE_STRING_shut_post_infil_door_flag = 0x7531,
  SCR_OPAQUE_STRING_shuttle_docking = 0x7538,
  SCR_OPAQUE_STRING_shuttle_thrust_fl = 0x753C,
  SCR_OPAQUE_STRING_side_arm_array = 0x7541,
  SCR_OPAQUE_STRING_sideisleftright = 0x7545,
  SCR_OPAQUE_STRING_sidesteprate = 0x7547,
  SCR_OPAQUE_STRING_sign = 0x7550,
  SCR_OPAQUE_STRING_silent_magic_bullet_windshield = 0x7551,
  SCR_OPAQUE_STRING_simulation_speed = 0x7557,
  SCR_OPAQUE_STRING_single_ally_run = 0x7558,
  SCR_OPAQUE_STRING_single_fish_detectdamage = 0x755B,
  SCR_OPAQUE_STRING_single_fish_start = 0x7562,
  SCR_OPAQUE_STRING_single_fish_start_after_frameend = 0x7563,
  SCR_OPAQUE_STRING_sinkingplatform_start = 0x7568,
  SCR_OPAQUE_STRING_sittag_offset = 0x7574,
  SCR_OPAQUE_STRING_sitting_wounded_scene_sound = 0x7576,
  SCR_OPAQUE_STRING_skip_start_transition = 0x757A,
  SCR_OPAQUE_STRING_skip_to_end = 0x757B,
  SCR_OPAQUE_STRING_skiplivesxpscalar = 0x7583,
  SCR_OPAQUE_STRING_skipmodelswapdeath = 0x7584,
  SCR_OPAQUE_STRING_sky_change = 0x758A,
  SCR_OPAQUE_STRING_skybridge_ally_cross = 0x758D,
  SCR_OPAQUE_STRING_skybridge_player_flinch = 0x75A0,
  SCR_OPAQUE_STRING_skybridge_precursor_emitter = 0x75A1,
  SCR_OPAQUE_STRING_skybridge_rumble_logic = 0x75A3,
  SCR_OPAQUE_STRING_skybridge_to_rooftops_transition = 0x75AA,
  SCR_OPAQUE_STRING_skydomeradiosity_ng = 0x75B8,
  SCR_OPAQUE_STRING_skyway_beach_fade_to_dev_logo_credits = 0x75C0,
  SCR_OPAQUE_STRING_skyway_beach_rorke_again = 0x75C5,
  SCR_OPAQUE_STRING_skyway_checkmate_music = 0x75C6,
  SCR_OPAQUE_STRING_skyway_endshot_sfx = 0x75C9,
  SCR_OPAQUE_STRING_skyway_hud_ammocounterhide = 0x75CD,
  SCR_OPAQUE_STRING_skyway_introscreen = 0x75D2,
  SCR_OPAQUE_STRING_sleeping_enemy_below_alerted_or_killed = 0x75DD,
  SCR_OPAQUE_STRING_sleeping_enemy_below_vo = 0x75DF,
  SCR_OPAQUE_STRING_sliding_jet2 = 0x75F1,
  SCR_OPAQUE_STRING_sliding_jet21 = 0x75F3,
  SCR_OPAQUE_STRING_slomo_breach_vision_change = 0x75F7,
  SCR_OPAQUE_STRING_slomobasevision = 0x75FA,
  SCR_OPAQUE_STRING_slow_intro_pre_load = 0x7606,
  SCR_OPAQUE_STRING_slowconvergence = 0x7608,
  SCR_OPAQUE_STRING_slowmo_breach_damage_trigger_think = 0x760C,
  SCR_OPAQUE_STRING_slowmo_breach_disable_stancemod = 0x760D,
  SCR_OPAQUE_STRING_slowmo_breach_start_delay = 0x7610,
  SCR_OPAQUE_STRING_slowmo_lerp_in = 0x7614,
  SCR_OPAQUE_STRING_small_shakes_on = 0x7623,
  SCR_OPAQUE_STRING_smart_get_nag_line = 0x762A,
  SCR_OPAQUE_STRING_smart_radio_dialogue = 0x762B,
  SCR_OPAQUE_STRING_smoke_thrown = 0x763B,
  SCR_OPAQUE_STRING_snake_cam_enemy_anims = 0x7647,
  SCR_OPAQUE_STRING_snake_cam_hud = 0x7649,
  SCR_OPAQUE_STRING_snake_cam_vision_flicker = 0x7652,
  SCR_OPAQUE_STRING_sniff_mode = 0x7659,
  SCR_OPAQUE_STRING_sniff_system_init = 0x765B,
  SCR_OPAQUE_STRING_sniper_cancel_flag = 0x7660,
  SCR_OPAQUE_STRING_sniper_paces = 0x7667,
  SCR_OPAQUE_STRING_sniper_vision_override = 0x766A,
  SCR_OPAQUE_STRING_sniper_wait_extra_black = 0x766B,
  SCR_OPAQUE_STRING_sniper_zoom_hint_hud = 0x766C,
  SCR_OPAQUE_STRING_snowmobile_decide_shoot = 0x767C,
  SCR_OPAQUE_STRING_snowmobile_decide_shoot_internal = 0x767D,
  SCR_OPAQUE_STRING_snowmobile_loop_driver = 0x7684,
  SCR_OPAQUE_STRING_snowmobile_loop_driver_shooting = 0x7685,
  SCR_OPAQUE_STRING_snowmobile_reload = 0x768B,
  SCR_OPAQUE_STRING_snowmobile_reload_internal = 0x768C,
  SCR_OPAQUE_STRING_soccer_scene_enemies = 0x76A4,
  SCR_OPAQUE_STRING_softlandingwaiter = 0x76B1,
  SCR_OPAQUE_STRING_solar_array0 = 0x76B3,
  SCR_OPAQUE_STRING_solar_panel_handling = 0x76B5,
  SCR_OPAQUE_STRING_solarpanels_damage_think_instant = 0x76B9,
  SCR_OPAQUE_STRING_sonar_boat_audio = 0x76C3,
  SCR_OPAQUE_STRING_sonar_boat_e3 = 0x76C8,
  SCR_OPAQUE_STRING_sonar_mines = 0x76D7,
  SCR_OPAQUE_STRING_sonar_ping_light_think = 0x76E0,
  SCR_OPAQUE_STRING_sonar_times_hit = 0x76E4,
  SCR_OPAQUE_STRING_sonar_wreck = 0x76E5,
  SCR_OPAQUE_STRING_sonar_wreck_crash_after = 0x76E6,
  SCR_OPAQUE_STRING_sorter = 0x76F9,
  SCR_OPAQUE_STRING_sortlowermessages = 0x76FA,
  SCR_OPAQUE_STRING_sound_effect = 0x7704,
  SCR_OPAQUE_STRING_sound_ents = 0x7707,
  SCR_OPAQUE_STRING_sound_fade_in = 0x770A,
  SCR_OPAQUE_STRING_sound_org_four = 0x770F,
  SCR_OPAQUE_STRING_sound_ping_plr = 0x7711,
  SCR_OPAQUE_STRING_sound_torpedo_ent = 0x7719,
  SCR_OPAQUE_STRING_sounds = 0x7721,
  SCR_OPAQUE_STRING_space_accel = 0x772C,
  SCR_OPAQUE_STRING_space_breach_dialogue = 0x7732,
  SCR_OPAQUE_STRING_space_breach_enemies = 0x7733,
  SCR_OPAQUE_STRING_space_breathing_enabled = 0x7735,
  SCR_OPAQUE_STRING_space_hud_enable = 0x773D,
  SCR_OPAQUE_STRING_sparrow_control = 0x7750,
  SCR_OPAQUE_STRING_sparrow_fire_hint = 0x7752,
  SCR_OPAQUE_STRING_sparrow_run_enemy_logic = 0x775B,
  SCR_OPAQUE_STRING_spawn_ally = 0x7775,
  SCR_OPAQUE_STRING_spawn_and_reinforce = 0x777B,
  SCR_OPAQUE_STRING_spawn_convoy = 0x7799,
  SCR_OPAQUE_STRING_spawn_dam_harrassers = 0x779B,
  SCR_OPAQUE_STRING_spawn_dead_bodies_mudpumps = 0x779D,
  SCR_OPAQUE_STRING_spawn_event_delayed_wave_spawn = 0x77B3,
  SCR_OPAQUE_STRING_spawn_event_per_alien_activation_increase = 0x77B8,
  SCR_OPAQUE_STRING_spawn_events = 0x77BD,
  SCR_OPAQUE_STRING_spawn_grenade = 0x77CC,
  SCR_OPAQUE_STRING_spawn_group = 0x77D0,
  SCR_OPAQUE_STRING_spawn_gunboat = 0x77D3,
  SCR_OPAQUE_STRING_spawn_guys_until_death_or_no_count = 0x77D4,
  SCR_OPAQUE_STRING_spawn_heroes_checkpoint = 0x77D6,
  SCR_OPAQUE_STRING_spawn_infantry_friends = 0x77DF,
  SCR_OPAQUE_STRING_spawn_infantry_in_blackhawk = 0x77E0,
  SCR_OPAQUE_STRING_spawn_initial_combat_helis = 0x77E1,
  SCR_OPAQUE_STRING_spawn_left = 0x77EB,
  SCR_OPAQUE_STRING_spawn_model_on_me = 0x77FB,
  SCR_OPAQUE_STRING_spawn_node_info = 0x77FF,
  SCR_OPAQUE_STRING_spawn_odin_actor_single = 0x7807,
  SCR_OPAQUE_STRING_spawn_random_airdrop_sub_items = 0x7811,
  SCR_OPAQUE_STRING_spawn_rorke_inverted_kill_knife = 0x7818,
  SCR_OPAQUE_STRING_spawn_scaffold_guys = 0x781C,
  SCR_OPAQUE_STRING_spawn_scene_alien = 0x781D,
  SCR_OPAQUE_STRING_spawn_setcharacter = 0x7820,
  SCR_OPAQUE_STRING_spawn_single_stage3_ground_vehicle = 0x7825,
  SCR_OPAQUE_STRING_spawn_space_ais_from_targetname = 0x7829,
  SCR_OPAQUE_STRING_spawn_stage1_bombing_runs = 0x782C,
  SCR_OPAQUE_STRING_spawn_stage2_attack_ground_vehicles = 0x782E,
  SCR_OPAQUE_STRING_spawn_stair_runner = 0x7832,
  SCR_OPAQUE_STRING_spawn_type_vo_monitor = 0x7849,
  SCR_OPAQUE_STRING_spawn_vehicles_from_targetname = 0x7850,
  SCR_OPAQUE_STRING_spawn_zone_exists = 0x785C,
  SCR_OPAQUE_STRING_spawnallypet = 0x7860,
  SCR_OPAQUE_STRING_spawnarmor = 0x7861,
  SCR_OPAQUE_STRING_spawnendofgame = 0x786D,
  SCR_OPAQUE_STRING_spawner_cleanup = 0x786E,
  SCR_OPAQUE_STRING_spawner_random_team = 0x7876,
  SCR_OPAQUE_STRING_spawnfunc_enemies_noticket = 0x7888,
  SCR_OPAQUE_STRING_spawnfunc_enemies_rog = 0x788A,
  SCR_OPAQUE_STRING_spawnfunc_enemy_plan_b = 0x7891,
  SCR_OPAQUE_STRING_spawnfunc_enemy_right = 0x7892,
  SCR_OPAQUE_STRING_spawnlogicteam = 0x78AB,
  SCR_OPAQUE_STRING_spawnorigin = 0x78B2,
  SCR_OPAQUE_STRING_spawnplayer = 0x78B5,
  SCR_OPAQUE_STRING_spawnpointarray = 0x78B6,
  SCR_OPAQUE_STRING_spawnpoints = 0x78B9,
  SCR_OPAQUE_STRING_spawnpointupdate = 0x78BB,
  SCR_OPAQUE_STRING_spawnpos = 0x78BC,
  SCR_OPAQUE_STRING_spawnsolarpanelsinit = 0x78C0,
  SCR_OPAQUE_STRING_spawnspectator = 0x78C1,
  SCR_OPAQUE_STRING_spawntracelocation = 0x78C5,
  SCR_OPAQUE_STRING_spawnwaypointfriendlies = 0x78C7,
  SCR_OPAQUE_STRING_spec_cg_fireworks_low = 0x78CC,
  SCR_OPAQUE_STRING_special_ammocount = 0x78D3,
  SCR_OPAQUE_STRING_special_ammocount_rank = 0x78DA,
  SCR_OPAQUE_STRING_specialcheck = 0x78E6,
  SCR_OPAQUE_STRING_specialpain = 0x78F1,
  SCR_OPAQUE_STRING_specialreloadanimfunc = 0x78F3,
  SCR_OPAQUE_STRING_species = 0x78F7,
  SCR_OPAQUE_STRING_speechcommands = 0x78FE,
  SCR_OPAQUE_STRING_spin_allowance_y = 0x790B,
  SCR_OPAQUE_STRING_spin_ally_logic = 0x790D,
  SCR_OPAQUE_STRING_spin_colliders_go = 0x7910,
  SCR_OPAQUE_STRING_spin_dialogue = 0x7913,
  SCR_OPAQUE_STRING_spin_do_moving_debris = 0x7914,
  SCR_OPAQUE_STRING_spin_do_moving_debris_fx = 0x7915,
  SCR_OPAQUE_STRING_spin_piece_sparks = 0x791B,
  SCR_OPAQUE_STRING_spit_target_location = 0x7930,
  SCR_OPAQUE_STRING_spit_type = 0x7931,
  SCR_OPAQUE_STRING_spitters_against_players_ratio = 0x793D,
  SCR_OPAQUE_STRING_splash_z = 0x794A,
  SCR_OPAQUE_STRING_splashqueue = 0x794F,
  SCR_OPAQUE_STRING_spline = 0x7951,
  SCR_OPAQUE_STRING_spline_min_progress = 0x7955,
  SCR_OPAQUE_STRING_splitarrivalsright = 0x7959,
  SCR_OPAQUE_STRING_splitscreen = 0x795C,
  SCR_OPAQUE_STRING_splshtag11 = 0x795E,
  SCR_OPAQUE_STRING_spotlight_loop = 0x796E,
  SCR_OPAQUE_STRING_spotlight_tag_origin_cleanup = 0x7970,
  SCR_OPAQUE_STRING_spotted_an_enemy = 0x7973,
  SCR_OPAQUE_STRING_spotted_enemy = 0x7974,
  SCR_OPAQUE_STRING_sprinkler_fx = 0x797A,
  SCR_OPAQUE_STRING_sprinkler_watch = 0x797C,
  SCR_OPAQUE_STRING_squad = 0x7986,
  SCR_OPAQUE_STRING_squad_kill = 0x7987,
  SCR_OPAQUE_STRING_squadflavorbursttransmissions = 0x7991,
  SCR_OPAQUE_STRING_squadofficerwaiter = 0x799A,
  SCR_OPAQUE_STRING_squadupdatefuncs = 0x79A0,
  SCR_OPAQUE_STRING_stairwell_crack_flat = 0x79B3,
  SCR_OPAQUE_STRING_stance = 0x79BB,
  SCR_OPAQUE_STRING_stance_handler = 0x79C1,
  SCR_OPAQUE_STRING_stances = 0x79C5,
  SCR_OPAQUE_STRING_standardspeed = 0x79CA,
  SCR_OPAQUE_STRING_standing = 0x79D1,
  SCR_OPAQUE_STRING_standrun_begin = 0x79D5,
  SCR_OPAQUE_STRING_standrun_checkreload = 0x79D7,
  SCR_OPAQUE_STRING_standruntostand = 0x79DC,
  SCR_OPAQUE_STRING_standruntranstime = 0x79DD,
  SCR_OPAQUE_STRING_standwalk_begin = 0x79E3,
  SCR_OPAQUE_STRING_start_ascend_time = 0x79F9,
  SCR_OPAQUE_STRING_start_ascent = 0x79FA,
  SCR_OPAQUE_STRING_start_atrium_combat = 0x79FB,
  SCR_OPAQUE_STRING_start_baker = 0x79FD,
  SCR_OPAQUE_STRING_start_balcony_fall = 0x79FE,
  SCR_OPAQUE_STRING_start_canyon = 0x7A08,
  SCR_OPAQUE_STRING_start_canyon_combat = 0x7A09,
  SCR_OPAQUE_STRING_start_catwalk_snow = 0x7A0A,
  SCR_OPAQUE_STRING_start_catwalks_end = 0x7A0C,
  SCR_OPAQUE_STRING_start_chaos_a = 0x7A0E,
  SCR_OPAQUE_STRING_start_chaos_b = 0x7A0F,
  SCR_OPAQUE_STRING_start_chase_dog = 0x7A11,
  SCR_OPAQUE_STRING_start_chopper_test = 0x7A12,
  SCR_OPAQUE_STRING_start_church_destruction = 0x7A14,
  SCR_OPAQUE_STRING_start_combat_after_seeing_launcher = 0x7A18,
  SCR_OPAQUE_STRING_start_command_outside = 0x7A1A,
  SCR_OPAQUE_STRING_start_coverheight_water_swap = 0x7A1D,
  SCR_OPAQUE_STRING_start_end_beach = 0x7A2D,
  SCR_OPAQUE_STRING_start_end_swim = 0x7A30,
  SCR_OPAQUE_STRING_start_fuel_explosion_fx = 0x7A3B,
  SCR_OPAQUE_STRING_start_hangar = 0x7A43,
  SCR_OPAQUE_STRING_start_hdrsuncolorintensity = 0x7A46,
  SCR_OPAQUE_STRING_start_hesh = 0x7A47,
  SCR_OPAQUE_STRING_start_loco_standoff_nomove = 0x7A58,
  SCR_OPAQUE_STRING_start_mall = 0x7A59,
  SCR_OPAQUE_STRING_start_mansion = 0x7A5A,
  SCR_OPAQUE_STRING_start_odin_satellite = 0x7A6C,
  SCR_OPAQUE_STRING_start_odin_spin = 0x7A6D,
  SCR_OPAQUE_STRING_start_off_running = 0x7A6E,
  SCR_OPAQUE_STRING_start_pickup = 0x7A76,
  SCR_OPAQUE_STRING_start_pipe_deck = 0x7A77,
  SCR_OPAQUE_STRING_start_point = 0x7A79,
  SCR_OPAQUE_STRING_start_post_crater_dog = 0x7A7E,
  SCR_OPAQUE_STRING_start_post_crater_house = 0x7A7F,
  SCR_OPAQUE_STRING_start_sat = 0x7A8A,
  SCR_OPAQUE_STRING_start_sfx_dam_siren_ext = 0x7A8F,
  SCR_OPAQUE_STRING_start_small_wreck = 0x7A94,
  SCR_OPAQUE_STRING_start_strafe_1 = 0x7A9A,
  SCR_OPAQUE_STRING_start_street_sequence = 0x7A9C,
  SCR_OPAQUE_STRING_start_struggle_spin = 0x7A9E,
  SCR_OPAQUE_STRING_start_suncolor = 0x7AA0,
  SCR_OPAQUE_STRING_start_test_1 = 0x7AAA,
  SCR_OPAQUE_STRING_start_test_area_a = 0x7AAE,
  SCR_OPAQUE_STRING_start_timed_monitor_fx = 0x7AB2,
  SCR_OPAQUE_STRING_start_to_end_length = 0x7AB3,
  SCR_OPAQUE_STRING_start_vo_system = 0x7ABB,
  SCR_OPAQUE_STRING_startfireandaimidlethread = 0x7AD2,
  SCR_OPAQUE_STRING_starthelipilot = 0x7AD8,
  SCR_OPAQUE_STRING_startingbunkerheli = 0x7ADA,
  SCR_OPAQUE_STRING_startjeep = 0x7ADD,
  SCR_OPAQUE_STRING_startlbsupport = 0x7AE0,
  SCR_OPAQUE_STRING_startnode = 0x7AE7,
  SCR_OPAQUE_STRING_startnpcbombusesound = 0x7AE9,
  SCR_OPAQUE_STRING_startwatervisuals = 0x7B00,
  SCR_OPAQUE_STRING_state = 0x7B0D,
  SCR_OPAQUE_STRING_statgetbuffered = 0x7B17,
  SCR_OPAQUE_STRING_static = 0x7B1A,
  SCR_OPAQUE_STRING_static_damping_factor = 0x7B1B,
  SCR_OPAQUE_STRING_stealth_1_encounter = 0x7B32,
  SCR_OPAQUE_STRING_stealth_1_zodiac_sounds = 0x7B35,
  SCR_OPAQUE_STRING_stealth_ai_reach_idle_and_react_proc = 0x7B4A,
  SCR_OPAQUE_STRING_stealth_alert_level_duration = 0x7B4C,
  SCR_OPAQUE_STRING_stealth_behavior_system_init = 0x7B58,
  SCR_OPAQUE_STRING_stealth_blockers = 0x7B5A,
  SCR_OPAQUE_STRING_stealth_broken_flag = 0x7B5C,
  SCR_OPAQUE_STRING_stealth_corpse_default_collect_func = 0x7B63,
  SCR_OPAQUE_STRING_stealth_corpse_forget_time_default = 0x7B69,
  SCR_OPAQUE_STRING_stealth_event_anim_defaults = 0x7B84,
  SCR_OPAQUE_STRING_stealth_event_mod_all = 0x7B8A,
  SCR_OPAQUE_STRING_stealth_group_corpse_flag_waitopen = 0x7B9A,
  SCR_OPAQUE_STRING_stealth_group_return_groups_with_corpse_flag = 0x7B9E,
  SCR_OPAQUE_STRING_stealth_group_return_groups_with_spotted_flag = 0x7BA0,
  SCR_OPAQUE_STRING_stealth_init = 0x7BA8,
  SCR_OPAQUE_STRING_stealth_kill_01_enemy1 = 0x7BAE,
  SCR_OPAQUE_STRING_stealth_kill_02_ally = 0x7BB0,
  SCR_OPAQUE_STRING_stealth_photocopier = 0x7BB5,
  SCR_OPAQUE_STRING_stealth_plugin_accuracy = 0x7BB7,
  SCR_OPAQUE_STRING_stealth_plugin_event_explosion = 0x7BBD,
  SCR_OPAQUE_STRING_stealth_pre_spotted_function_default = 0x7BC4,
  SCR_OPAQUE_STRING_stealth_range_trigger = 0x7BC5,
  SCR_OPAQUE_STRING_stealth_satellite_guys = 0x7BC6,
  SCR_OPAQUE_STRING_stealth_threat_behavior_replace = 0x7BDC,
  SCR_OPAQUE_STRING_stealthbombfx = 0x7BE3,
  SCR_OPAQUE_STRING_stealthed_stream_vo = 0x7BE4,
  SCR_OPAQUE_STRING_stealthnewenemyreactanim = 0x7BE5,
  SCR_OPAQUE_STRING_steering_maxdelta = 0x7BE8,
  SCR_OPAQUE_STRING_stern_corner_dmg = 0x7BEF,
  SCR_OPAQUE_STRING_sticky_grenade_04 = 0x7BF3,
  SCR_OPAQUE_STRING_sticky_grenade_07 = 0x7BF6,
  SCR_OPAQUE_STRING_stingerfxid = 0x7BFB,
  SCR_OPAQUE_STRING_stop_anim_direction = 0x7C0D,
  SCR_OPAQUE_STRING_stop_chopper_bosses = 0x7C17,
  SCR_OPAQUE_STRING_stop_chopper_lean = 0x7C18,
  SCR_OPAQUE_STRING_stop_drilling_sounds = 0x7C1C,
  SCR_OPAQUE_STRING_stop_loopsound = 0x7C36,
  SCR_OPAQUE_STRING_stop_music_jg = 0x7C3D,
  SCR_OPAQUE_STRING_stop_path_on_damage = 0x7C3F,
  SCR_OPAQUE_STRING_stop_patrol_vo = 0x7C40,
  SCR_OPAQUE_STRING_stop_player_scuba = 0x7C43,
  SCR_OPAQUE_STRING_stop_player_space = 0x7C44,
  SCR_OPAQUE_STRING_stop_sfx_dam_siren_int = 0x7C4B,
  SCR_OPAQUE_STRING_stop_spotlight_killed = 0x7C4F,
  SCR_OPAQUE_STRING_stop_spotlight_provoked = 0x7C50,
  SCR_OPAQUE_STRING_stop_vo_on_spotted = 0x7C57,
  SCR_OPAQUE_STRING_stopguy3 = 0x7C63,
  SCR_OPAQUE_STRING_stopidlesound = 0x7C65,
  SCR_OPAQUE_STRING_stoplocationselection = 0x7C66,
  SCR_OPAQUE_STRING_stoponback = 0x7C6C,
  SCR_OPAQUE_STRING_stopusingturretwhennodelost = 0x7C7A,
  SCR_OPAQUE_STRING_store_weapons_status = 0x7C7E,
  SCR_OPAQUE_STRING_storecompletedchallenge = 0x7C7F,
  SCR_OPAQUE_STRING_str = 0x7C86,
  SCR_OPAQUE_STRING_strafecooldown = 0x7C8B,
  SCR_OPAQUE_STRING_stream_enemy_logic = 0x7C9F,
  SCR_OPAQUE_STRING_streets_script_vehicle_cleanup = 0x7CBA,
  SCR_OPAQUE_STRING_string_is_single_digit_integer = 0x7CDF,
  SCR_OPAQUE_STRING_string_starts_with = 0x7CE1,
  SCR_OPAQUE_STRING_string_to_bool = 0x7CE2,
  SCR_OPAQUE_STRING_stringcannotplace = 0x7CE5,
  SCR_OPAQUE_STRING_stringfix = 0x7CE6,
  SCR_OPAQUE_STRING_strobe_off_hide_hint = 0x7CED,
  SCR_OPAQUE_STRING_strobe_on_hide_hint = 0x7CEE,
  SCR_OPAQUE_STRING_strobelight = 0x7CF0,
  SCR_OPAQUE_STRING_struct = 0x7CF4,
  SCR_OPAQUE_STRING_struct_arrayspawn = 0x7CF6,
  SCR_OPAQUE_STRING_structarray_remove = 0x7CFC,
  SCR_OPAQUE_STRING_structarray_remove_undefined = 0x7CFE,
  SCR_OPAQUE_STRING_structarray_swaptolast = 0x7D01,
  SCR_OPAQUE_STRING_stuckenemyentity = 0x7D0F,
  SCR_OPAQUE_STRING_stumble_and_quake = 0x7D12,
  SCR_OPAQUE_STRING_stylized_line = 0x7D21,
  SCR_OPAQUE_STRING_sun_angles_intro = 0x7D36,
  SCR_OPAQUE_STRING_sun_manage = 0x7D3C,
  SCR_OPAQUE_STRING_sundir_start = 0x7D44,
  SCR_OPAQUE_STRING_sunflare = 0x7D48,
  SCR_OPAQUE_STRING_sunred_start = 0x7D55,
  SCR_OPAQUE_STRING_sunsamplesizenear_ng = 0x7D57,
  SCR_OPAQUE_STRING_suppressingfiretracking = 0x7D68,
  SCR_OPAQUE_STRING_survive = 0x7D79,
  SCR_OPAQUE_STRING_sus_fd = 0x7D83,
  SCR_OPAQUE_STRING_sus_fr = 0x7D86,
  SCR_OPAQUE_STRING_swap_goal_volumes = 0x7D92,
  SCR_OPAQUE_STRING_swap_head = 0x7D93,
  SCR_OPAQUE_STRING_swap_to_overcast_sky = 0x7D98,
  SCR_OPAQUE_STRING_sweep_tells_vehicles_to_get_off_path = 0x7D9E,
  SCR_OPAQUE_STRING_swept = 0x7D9F,
  SCR_OPAQUE_STRING_swept_end = 0x7DAA,
  SCR_OPAQUE_STRING_swept_path_anim = 0x7DB2,
  SCR_OPAQUE_STRING_swept_plunge_01 = 0x7DB5,
  SCR_OPAQUE_STRING_swim_getanimstartpos = 0x7DDB,
  SCR_OPAQUE_STRING_swim_moveend = 0x7DE6,
  SCR_OPAQUE_STRING_swim_player_surface_anim = 0x7DEA,
  SCR_OPAQUE_STRING_swim_track_set = 0x7DFA,
  SCR_OPAQUE_STRING_swim_truck_surface_anim = 0x7DFD,
  SCR_OPAQUE_STRING_swim_updateleananim = 0x7DFF,
  SCR_OPAQUE_STRING_swim_updatestrafeaimanim = 0x7E00,
  SCR_OPAQUE_STRING_swim_updatestrafeanim = 0x7E01,
  SCR_OPAQUE_STRING_swim_waitforapproachpos = 0x7E04,
  SCR_OPAQUE_STRING_switch_node_on_flag = 0x7E13,
  SCR_OPAQUE_STRING_switchmsg = 0x7E1F,
  SCR_OPAQUE_STRING_sync_carry_walk_anims = 0x7E24,
  SCR_OPAQUE_STRING_synch_directions = 0x7E2D,
  SCR_OPAQUE_STRING_syncnotetrackent = 0x7E30,
  SCR_OPAQUE_STRING_system_default_event_distances = 0x7E34,
  SCR_OPAQUE_STRING_system_init_shadows = 0x7E38,
  SCR_OPAQUE_STRING_systems_down_end = 0x7E41,
  SCR_OPAQUE_STRING_table_getweaponbuff = 0x7E51,
  SCR_OPAQUE_STRING_table_getweaponreticle = 0x7E53,
  SCR_OPAQUE_STRING_tablet = 0x7E55,
  SCR_OPAQUE_STRING_tablet_prop = 0x7E58,
  SCR_OPAQUE_STRING_take_cover_warning = 0x7E7A,
  SCR_OPAQUE_STRING_take_cover_warning_loop = 0x7E7B,
  SCR_OPAQUE_STRING_take_fire_tracking = 0x7E7D,
  SCR_OPAQUE_STRING_takeover_flash = 0x7E8C,
  SCR_OPAQUE_STRING_talk_for_time = 0x7E91,
  SCR_OPAQUE_STRING_tall_grass_friendly_exit_logic = 0x7E95,
  SCR_OPAQUE_STRING_tall_grass_guys_went_hot = 0x7E9D,
  SCR_OPAQUE_STRING_tank_ambient_waits = 0x7EAD,
  SCR_OPAQUE_STRING_tank_damage_allies = 0x7EBE,
  SCR_OPAQUE_STRING_tank_death_allies = 0x7EC0,
  SCR_OPAQUE_STRING_tank_drop_slide_allies = 0x7ECB,
  SCR_OPAQUE_STRING_tank_dropmines = 0x7ECC,
  SCR_OPAQUE_STRING_tank_event = 0x7ED0,
  SCR_OPAQUE_STRING_tank_fire_at_enemies = 0x7ED1,
  SCR_OPAQUE_STRING_tank_handledeath = 0x7EDA,
  SCR_OPAQUE_STRING_tank_hud = 0x7EE0,
  SCR_OPAQUE_STRING_tank_hud_crack_left = 0x7EE5,
  SCR_OPAQUE_STRING_tank_hud_vignette = 0x7EF1,
  SCR_OPAQUE_STRING_tank_rumble = 0x7F03,
  SCR_OPAQUE_STRING_tank_save = 0x7F04,
  SCR_OPAQUE_STRING_tank_setinactive = 0x7F08,
  SCR_OPAQUE_STRING_tank_watchlowhealth = 0x7F1E,
  SCR_OPAQUE_STRING_tankfire_spline_jeep = 0x7F27,
  SCR_OPAQUE_STRING_tankflash = 0x7F29,
  SCR_OPAQUE_STRING_tankupdate = 0x7F39,
  SCR_OPAQUE_STRING_targertname = 0x7F3F,
  SCR_OPAQUE_STRING_target_ent_cleanup = 0x7F46,
  SCR_OPAQUE_STRING_target_entity = 0x7F47,
  SCR_OPAQUE_STRING_target_min_range = 0x7F4C,
  SCR_OPAQUE_STRING_target_trace_to_owners_eyes = 0x7F55,
  SCR_OPAQUE_STRING_target_unset_islockedon = 0x7F57,
  SCR_OPAQUE_STRING_targetingoffset = 0x7F63,
  SCR_OPAQUE_STRING_targetpointtooclose = 0x7F6A,
  SCR_OPAQUE_STRING_team1 = 0x7F78,
  SCR_OPAQUE_STRING_team_hive_performance = 0x7F84,
  SCR_OPAQUE_STRING_teamflashbangimmunity = 0x7F93,
  SCR_OPAQUE_STRING_teamheadicon = 0x7F94,
  SCR_OPAQUE_STRING_teamkilldelay = 0x7F97,
  SCR_OPAQUE_STRING_teamprogressbartexty = 0x7FA3,
  SCR_OPAQUE_STRING_teamprogressbarwidth = 0x7FA4,
  SCR_OPAQUE_STRING_teams = 0x7FA6,
  SCR_OPAQUE_STRING_teargas_cough_vo = 0x7FB0,
  SCR_OPAQUE_STRING_teargas_coughing = 0x7FB1,
  SCR_OPAQUE_STRING_teargas_loaded = 0x7FB9,
  SCR_OPAQUE_STRING_teargas_vo = 0x7FBF,
  SCR_OPAQUE_STRING_teleport_add_delta = 0x7FC5,
  SCR_OPAQUE_STRING_teleport_failsafe = 0x7FD8,
  SCR_OPAQUE_STRING_teleport_get_care_packages = 0x7FDD,
  SCR_OPAQUE_STRING_teleport_get_safe_node_near = 0x7FE0,
  SCR_OPAQUE_STRING_teleport_include_killstreaks = 0x7FE4,
  SCR_OPAQUE_STRING_teleport_is_valid_zone = 0x7FE8,
  SCR_OPAQUE_STRING_teleport_notify_death = 0x7FEC,
  SCR_OPAQUE_STRING_teleport_onteleportgrind = 0x7FF6,
  SCR_OPAQUE_STRING_teleport_pre_onstartgamesd_and_sr = 0x8004,
  SCR_OPAQUE_STRING_teleport_self_add_delta = 0x8007,
  SCR_OPAQUE_STRING_teleport_to_zone_agents = 0x8016,
  SCR_OPAQUE_STRING_teleport_to_zone_character = 0x8017,
  SCR_OPAQUE_STRING_teleport_zone_current = 0x801C,
  SCR_OPAQUE_STRING_tell_player_to_stay = 0x8027,
  SCR_OPAQUE_STRING_test_attack_heli = 0x8043,
  SCR_OPAQUE_STRING_test_connect_paths = 0x8045,
  SCR_OPAQUE_STRING_test_guy_do_goalor_die = 0x8048,
  SCR_OPAQUE_STRING_test_individual_spawner = 0x8049,
  SCR_OPAQUE_STRING_testingapache_animations = 0x8057,
  SCR_OPAQUE_STRING_text1 = 0x805B,
  SCR_OPAQUE_STRING_text_titlefadeout = 0x8065,
  SCR_OPAQUE_STRING_thermite2 = 0x807E,
  SCR_OPAQUE_STRING_thorough_delete = 0x808E,
  SCR_OPAQUE_STRING_threatcallouttracking = 0x8097,
  SCR_OPAQUE_STRING_throw_stones_idle = 0x80AA,
  SCR_OPAQUE_STRING_throwingknifeused = 0x80B1,
  SCR_OPAQUE_STRING_thrown_entities = 0x80B2,
  SCR_OPAQUE_STRING_thrown_semtex_grenades = 0x80B3,
  SCR_OPAQUE_STRING_thruster_timer_logic = 0x80C7,
  SCR_OPAQUE_STRING_thunder_big_sound_moving = 0x80CB,
  SCR_OPAQUE_STRING_tilt_exfil_props = 0x80E0,
  SCR_OPAQUE_STRING_tilt_exp_heli_clip = 0x80E1,
  SCR_OPAQUE_STRING_tilt_front_deck_impact = 0x80E3,
  SCR_OPAQUE_STRING_tilt_handler = 0x80E8,
  SCR_OPAQUE_STRING_tilt_osprey_1 = 0x80EF,
  SCR_OPAQUE_STRING_tilt_player_stumble = 0x80F4,
  SCR_OPAQUE_STRING_tilt_player_vault = 0x80F5,
  SCR_OPAQUE_STRING_tilt_run_forward_monitor = 0x8109,
  SCR_OPAQUE_STRING_timebetweenshots = 0x8117,
  SCR_OPAQUE_STRING_timecheck = 0x8118,
  SCR_OPAQUE_STRING_timelimitthread = 0x8121,
  SCR_OPAQUE_STRING_timeofnextsound = 0x8123,
  SCR_OPAQUE_STRING_timeout = 0x8124,
  SCR_OPAQUE_STRING_timeout_watch = 0x8126,
  SCR_OPAQUE_STRING_timeoutregenfaster = 0x8128,
  SCR_OPAQUE_STRING_timepaused = 0x8129,
  SCR_OPAQUE_STRING_timer_ten_change = 0x812F,
  SCR_OPAQUE_STRING_timername = 0x8131,
  SCR_OPAQUE_STRING_timerpausetime = 0x8132,
  SCR_OPAQUE_STRING_timescale = 0x8136,
  SCR_OPAQUE_STRING_toggle_zoom = 0x8153,
  SCR_OPAQUE_STRING_too_close_to_boat = 0x8158,
  SCR_OPAQUE_STRING_took_damage = 0x815A,
  SCR_OPAQUE_STRING_topattackpasses = 0x8161,
  SCR_OPAQUE_STRING_total_runner_drone_spawn_count = 0x817C,
  SCR_OPAQUE_STRING_totalscore = 0x8186,
  SCR_OPAQUE_STRING_touched = 0x8188,
  SCR_OPAQUE_STRING_tower_a10_flyby = 0x8193,
  SCR_OPAQUE_STRING_tower_door_pitchfx = 0x81A7,
  SCR_OPAQUE_STRING_tower_entrance_stumblers = 0x81B0,
  SCR_OPAQUE_STRING_tower_hesh_help_wounded = 0x81B5,
  SCR_OPAQUE_STRING_tower_nh90_guys = 0x81BD,
  SCR_OPAQUE_STRING_tower_pickup_b = 0x81BE,
  SCR_OPAQUE_STRING_tower_radio = 0x81BF,
  SCR_OPAQUE_STRING_tower_retreat_mortars_hit = 0x81C8,
  SCR_OPAQUE_STRING_tower_vista_retreat_tank = 0x81CF,
  SCR_OPAQUE_STRING_toy_tvs_flatscreen_sturdy = 0x81D8,
  SCR_OPAQUE_STRING_trace_part_for_efx = 0x81DC,
  SCR_OPAQUE_STRING_trace_to_forward = 0x81DE,
  SCR_OPAQUE_STRING_track_dud = 0x81ED,
  SCR_OPAQUE_STRING_track_odin_down = 0x81F9,
  SCR_OPAQUE_STRING_trackingweaponheadshots = 0x8219,
  SCR_OPAQUE_STRING_trackloop_cqbshootpos = 0x8224,
  SCR_OPAQUE_STRING_trackshootentorpos = 0x822A,
  SCR_OPAQUE_STRING_train_nag = 0x8239,
  SCR_OPAQUE_STRING_train_pathing = 0x8240,
  SCR_OPAQUE_STRING_train_tele_trig_proc = 0x824A,
  SCR_OPAQUE_STRING_train_teleport = 0x824B,
  SCR_OPAQUE_STRING_trains_move = 0x8250,
  SCR_OPAQUE_STRING_trajectoryactive = 0x8252,
  SCR_OPAQUE_STRING_transitiontime = 0x826E,
  SCR_OPAQUE_STRING_translate_off_edge = 0x8277,
  SCR_OPAQUE_STRING_trap_cage_init = 0x827E,
  SCR_OPAQUE_STRING_trap_can_player_trigger = 0x827F,
  SCR_OPAQUE_STRING_trap_damage_scalar = 0x8282,
  SCR_OPAQUE_STRING_trap_explosive_init = 0x8287,
  SCR_OPAQUE_STRING_trap_get_launch_dir = 0x8289,
  SCR_OPAQUE_STRING_trap_get_targets = 0x828E,
  SCR_OPAQUE_STRING_trap_get_unset_use_text = 0x8290,
  SCR_OPAQUE_STRING_trap_launcher_init = 0x829A,
  SCR_OPAQUE_STRING_trap_launcher_reset = 0x829C,
  SCR_OPAQUE_STRING_trap_set_can_use = 0x82AD,
  SCR_OPAQUE_STRING_trap_state_funcs = 0x82B1,
  SCR_OPAQUE_STRING_trap_use_trigger_init = 0x82BA,
  SCR_OPAQUE_STRING_travel_view_fx = 0x82C5,
  SCR_OPAQUE_STRING_traversedeath = 0x82D5,
  SCR_OPAQUE_STRING_traverseinfo = 0x82DA,
  SCR_OPAQUE_STRING_treadfx_override_nh90 = 0x82E6,
  SCR_OPAQUE_STRING_trench_beach_allies_ambient = 0x82F5,
  SCR_OPAQUE_STRING_trench_beach_allies_ambient_off = 0x82F6,
  SCR_OPAQUE_STRING_trench_boat_think = 0x82FA,
  SCR_OPAQUE_STRING_trench_chargers_think = 0x82FC,
  SCR_OPAQUE_STRING_trench_friendly_orange_guy = 0x8302,
  SCR_OPAQUE_STRING_trench_spawn_functions = 0x830F,
  SCR_OPAQUE_STRING_trig_stairs_setup = 0x8325,
  SCR_OPAQUE_STRING_trigger_battlechatter = 0x8330,
  SCR_OPAQUE_STRING_trigger_createart_transient = 0x8333,
  SCR_OPAQUE_STRING_trigger_disable_on_jump = 0x833B,
  SCR_OPAQUE_STRING_trigger_door = 0x833C,
  SCR_OPAQUE_STRING_trigger_enemy_spawn = 0x833F,
  SCR_OPAQUE_STRING_trigger_flag_set_specialops = 0x8347,
  SCR_OPAQUE_STRING_trigger_flag_set_specialops_clear = 0x8348,
  SCR_OPAQUE_STRING_trigger_functions = 0x834F,
  SCR_OPAQUE_STRING_trigger_glass_break = 0x8351,
  SCR_OPAQUE_STRING_trigger_group = 0x8352,
  SCR_OPAQUE_STRING_trigger_int_building_hits = 0x835D,
  SCR_OPAQUE_STRING_trigger_multiple_depthoffield = 0x836D,
  SCR_OPAQUE_STRING_trigger_multiple_fx_trigger_on_think = 0x836F,
  SCR_OPAQUE_STRING_trigger_multiple_fx_volume_off_target = 0x8371,
  SCR_OPAQUE_STRING_trigger_multiple_sunflare = 0x8373,
  SCR_OPAQUE_STRING_trigger_parse_parameters = 0x8380,
  SCR_OPAQUE_STRING_trigger_spawngroup = 0x839D,
  SCR_OPAQUE_STRING_trigger_turns_off = 0x83A5,
  SCR_OPAQUE_STRING_trigger_wait = 0x83AD,
  SCR_OPAQUE_STRING_triggers = 0x83BB,
  SCR_OPAQUE_STRING_truck_rumble = 0x83DC,
  SCR_OPAQUE_STRING_try_take_player_currency = 0x83EC,
  SCR_OPAQUE_STRING_tryorderto = 0x8404,
  SCR_OPAQUE_STRING_tryuse = 0x8409,
  SCR_OPAQUE_STRING_tryuse_dpad_team_ammo = 0x8417,
  SCR_OPAQUE_STRING_tryuse_dpad_team_explosives = 0x841B,
  SCR_OPAQUE_STRING_tryusedeployableammo = 0x842E,
  SCR_OPAQUE_STRING_tryuseperkstreak = 0x8445,
  SCR_OPAQUE_STRING_tryuserefillammo = 0x8449,
  SCR_OPAQUE_STRING_tryusesam = 0x8451,
  SCR_OPAQUE_STRING_tryuseuplink = 0x845B,
  SCR_OPAQUE_STRING_tryusevanguard = 0x845C,
  SCR_OPAQUE_STRING_tunnel_behavior = 0x8464,
  SCR_OPAQUE_STRING_tunnel_door_clip = 0x8468,
  SCR_OPAQUE_STRING_tunnel_door_scene = 0x8469,
  SCR_OPAQUE_STRING_tunnel_tank_crush = 0x847F,
  SCR_OPAQUE_STRING_tunnel_vehicle_think = 0x8480,
  SCR_OPAQUE_STRING_tunnel_vehix_stop_sounds = 0x8482,
  SCR_OPAQUE_STRING_turn_exit_trigger_on = 0x848A,
  SCR_OPAQUE_STRING_turn_off_gas_fx = 0x8491,
  SCR_OPAQUE_STRING_turn_off_nodes = 0x8495,
  SCR_OPAQUE_STRING_turn_on_gaztiger_underwater_bubble_fx = 0x84A6,
  SCR_OPAQUE_STRING_turnbackon = 0x84B5,
  SCR_OPAQUE_STRING_turnoff = 0x84B9,
  SCR_OPAQUE_STRING_turret_activate = 0x84C6,
  SCR_OPAQUE_STRING_turret_cleanup_on_unload = 0x84D1,
  SCR_OPAQUE_STRING_turret_coolmonitor = 0x84D4,
  SCR_OPAQUE_STRING_turret_deleteme = 0x84DA,
  SCR_OPAQUE_STRING_turret_function = 0x84DF,
  SCR_OPAQUE_STRING_turret_impact = 0x84EB,
  SCR_OPAQUE_STRING_turret_oncarrierchangedteam = 0x84F5,
  SCR_OPAQUE_STRING_turret_oncarrierdisconnect = 0x84F7,
  SCR_OPAQUE_STRING_turret_setcarried = 0x8503,
  SCR_OPAQUE_STRING_turret_target_updater = 0x8512,
  SCR_OPAQUE_STRING_turretattachpoint = 0x8521,
  SCR_OPAQUE_STRING_turretdeathanimroot = 0x8523,
  SCR_OPAQUE_STRING_turretinfo = 0x852B,
  SCR_OPAQUE_STRING_tv_changes_intensity = 0x853F,
  SCR_OPAQUE_STRING_tv_play = 0x8544,
  SCR_OPAQUE_STRING_tweak_player_view_do_rotate = 0x8549,
  SCR_OPAQUE_STRING_uav_rig_controller = 0x856C,
  SCR_OPAQUE_STRING_uav_sort = 0x856F,
  SCR_OPAQUE_STRING_ui_action_slot_force_active_off = 0x857C,
  SCR_OPAQUE_STRING_ui_bomb_planting_defusing = 0x857F,
  SCR_OPAQUE_STRING_ui_dom_securing = 0x8581,
  SCR_OPAQUE_STRING_unblock_curtain = 0x858B,
  SCR_OPAQUE_STRING_underwater = 0x858F,
  SCR_OPAQUE_STRING_underwater_combat_amb = 0x8592,
  SCR_OPAQUE_STRING_underwater_melee_kill_achievement_count = 0x8595,
  SCR_OPAQUE_STRING_unloadque = 0x85BC,
  SCR_OPAQUE_STRING_unlock_flag = 0x85BF,
  SCR_OPAQUE_STRING_unmatched_death_rig_light_waits_for_lights_off = 0x85C6,
  SCR_OPAQUE_STRING_unresolved_collision_count = 0x85C7,
  SCR_OPAQUE_STRING_unresolved_collision_kill = 0x85CA,
  SCR_OPAQUE_STRING_unset_forcegoal = 0x85D3,
  SCR_OPAQUE_STRING_unset_perk = 0x85D6,
  SCR_OPAQUE_STRING_unset_perk_health_level_3 = 0x85DF,
  SCR_OPAQUE_STRING_unset_perk_medic_0 = 0x85E1,
  SCR_OPAQUE_STRING_unset_perk_pistol_magnum_2 = 0x85ED,
  SCR_OPAQUE_STRING_unset_perk_pistol_mp443_0 = 0x85F0,
  SCR_OPAQUE_STRING_unset_perk_pistol_mp443_3 = 0x85F3,
  SCR_OPAQUE_STRING_unset_perk_rigger_2 = 0x85FC,
  SCR_OPAQUE_STRING_unsetlightarmor = 0x862B,
  SCR_OPAQUE_STRING_unsetpainted = 0x8632,
  SCR_OPAQUE_STRING_unsetrefillgrenades = 0x8639,
  SCR_OPAQUE_STRING_unstoppable_friendly_fire_shield = 0x864E,
  SCR_OPAQUE_STRING_update_achievement = 0x8658,
  SCR_OPAQUE_STRING_update_achievement_all_players = 0x8659,
  SCR_OPAQUE_STRING_update_bike_player_avoidance = 0x8663,
  SCR_OPAQUE_STRING_update_goal_vol_from_trigger = 0x867A,
  SCR_OPAQUE_STRING_update_heli_crash_location = 0x867B,
  SCR_OPAQUE_STRING_update_melee_spitter = 0x8689,
  SCR_OPAQUE_STRING_update_motion_tracker_speed = 0x868A,
  SCR_OPAQUE_STRING_update_no_reloads = 0x8690,
  SCR_OPAQUE_STRING_update_shotguns_only = 0x86AA,
  SCR_OPAQUE_STRING_update_soflam_ammocount = 0x86AD,
  SCR_OPAQUE_STRING_update_steering = 0x86B2,
  SCR_OPAQUE_STRING_update_weaponstats_hits = 0x86C1,
  SCR_OPAQUE_STRING_updateareanodes = 0x86CB,
  SCR_OPAQUE_STRING_updatecheckforceragdoll = 0x86D7,
  SCR_OPAQUE_STRING_updateenemyuse = 0x86E6,
  SCR_OPAQUE_STRING_updatefreeplayedtime = 0x86E9,
  SCR_OPAQUE_STRING_updateobjectivetext = 0x8709,
  SCR_OPAQUE_STRING_updatesavedlastweapon = 0x8729,
  SCR_OPAQUE_STRING_updatesentrypositionthread = 0x872E,
  SCR_OPAQUE_STRING_updatesppercent = 0x8734,
  SCR_OPAQUE_STRING_updatestreakcount = 0x8739,
  SCR_OPAQUE_STRING_updatestreakslots = 0x873A,
  SCR_OPAQUE_STRING_updateteamplacement = 0x873F,
  SCR_OPAQUE_STRING_updateteamscores = 0x8741,
  SCR_OPAQUE_STRING_updatetimerpausedness = 0x8748,
  SCR_OPAQUE_STRING_updatewinlossstats = 0x8757,
  SCR_OPAQUE_STRING_updateworldicons = 0x875A,
  SCR_OPAQUE_STRING_uplink_override_moving_platform_death = 0x8760,
  SCR_OPAQUE_STRING_upload_virus_anims = 0x8767,
  SCR_OPAQUE_STRING_use_big_splash = 0x8779,
  SCR_OPAQUE_STRING_use_dpad_glsentry = 0x8780,
  SCR_OPAQUE_STRING_use_dpad_team_randombox = 0x878C,
  SCR_OPAQUE_STRING_use_dpad_war_machine = 0x878E,
  SCR_OPAQUE_STRING_use_switch_toggle_multiple = 0x8799,
  SCR_OPAQUE_STRING_use_trigger = 0x87A0,
  SCR_OPAQUE_STRING_useballdrone = 0x87A5,
  SCR_OPAQUE_STRING_usehardpoint_regularmp = 0x87BB,
  SCR_OPAQUE_STRING_usehintstring = 0x87BE,
  SCR_OPAQUE_STRING_useholdthinkloop = 0x87C0,
  SCR_OPAQUE_STRING_using_hdr_fog = 0x87E5,
  SCR_OPAQUE_STRING_using_remote_turret_when_died = 0x87EA,
  SCR_OPAQUE_STRING_using_string_tables = 0x87EC,
  SCR_OPAQUE_STRING_usingmg = 0x87F1,
  SCR_OPAQUE_STRING_usingprimary = 0x87F6,
  SCR_OPAQUE_STRING_usingremote = 0x87F7,
  SCR_OPAQUE_STRING_usingriflelikeweapon = 0x87F9,
  SCR_OPAQUE_STRING_util_derrick_destroy_quick = 0x8803,
  SCR_OPAQUE_STRING_vanguard_missile_radius = 0x882B,
  SCR_OPAQUE_STRING_vanguard_origin = 0x8833,
  SCR_OPAQUE_STRING_vanguard_pick_node = 0x8834,
  SCR_OPAQUE_STRING_vanguard_showreticletoplayer = 0x883C,
  SCR_OPAQUE_STRING_vanguardfiremisslefunc = 0x8842,
  SCR_OPAQUE_STRING_vantage_nag = 0x8847,
  SCR_OPAQUE_STRING_vault_vol_1 = 0x886B,
  SCR_OPAQUE_STRING_vault_water = 0x886F,
  SCR_OPAQUE_STRING_vehicle_ai_turret_gunner_ignore_all_until_unload = 0x8884,
  SCR_OPAQUE_STRING_vehicle_attack_missile = 0x8893,
  SCR_OPAQUE_STRING_vehicle_controlling = 0x889A,
  SCR_OPAQUE_STRING_vehicle_death_anim = 0x88A0,
  SCR_OPAQUE_STRING_vehicle_death_jolt = 0x88A6,
  SCR_OPAQUE_STRING_vehicle_deathmodel_delay = 0x88AB,
  SCR_OPAQUE_STRING_vehicle_deletegroup = 0x88AE,
  SCR_OPAQUE_STRING_vehicle_detourpaths = 0x88B0,
  SCR_OPAQUE_STRING_vehicle_dynamicpath = 0x88B9,
  SCR_OPAQUE_STRING_vehicle_fire_loop = 0x88BE,
  SCR_OPAQUE_STRING_vehicle_frontarmor = 0x88C0,
  SCR_OPAQUE_STRING_vehicle_getinanim_clear = 0x88C9,
  SCR_OPAQUE_STRING_vehicle_getinstart = 0x88CC,
  SCR_OPAQUE_STRING_vehicle_grenadeshield = 0x88D1,
  SCR_OPAQUE_STRING_vehicle_idle_override = 0x88DA,
  SCR_OPAQUE_STRING_vehicle_isstationary = 0x88DF,
  SCR_OPAQUE_STRING_vehicle_liftoff = 0x88ED,
  SCR_OPAQUE_STRING_vehicle_lights = 0x88EF,
  SCR_OPAQUE_STRING_vehicle_lights_off = 0x88F2,
  SCR_OPAQUE_STRING_vehicle_mainturrets = 0x88FC,
  SCR_OPAQUE_STRING_vehicle_play_guy_anim = 0x8905,
  SCR_OPAQUE_STRING_vehicle_resume_named = 0x8910,
  SCR_OPAQUE_STRING_vehicle_ridespawners = 0x8916,
  SCR_OPAQUE_STRING_vehicle_rumble_override = 0x8919,
  SCR_OPAQUE_STRING_vehicle_spawner_adjust_health_and_damage = 0x892C,
  SCR_OPAQUE_STRING_vehicle_startmovegroup = 0x8931,
  SCR_OPAQUE_STRING_vehicle_turn_left = 0x893B,
  SCR_OPAQUE_STRING_vehicle_unloadgroups = 0x8945,
  SCR_OPAQUE_STRING_vehicle_unloadwhenattacked = 0x8946,
  SCR_OPAQUE_STRING_vehicle_zpu_can_target = 0x894C,
  SCR_OPAQUE_STRING_vehiclekilled = 0x8955,
  SCR_OPAQUE_STRING_verifydedicatedconfiguration = 0x8966,
  SCR_OPAQUE_STRING_vfx_hostage1_waterboard_stop = 0x898A,
  SCR_OPAQUE_STRING_vfx_torpedo_wings_out = 0x8999,
  SCR_OPAQUE_STRING_vfxarry = 0x899A,
  SCR_OPAQUE_STRING_victimteam = 0x89A0,
  SCR_OPAQUE_STRING_view_particle_source_alt = 0x89AB,
  SCR_OPAQUE_STRING_viewfx = 0x89B5,
  SCR_OPAQUE_STRING_vignette_drone_spawn = 0x89C3,
  SCR_OPAQUE_STRING_vignette_register_wait = 0x89D0,
  SCR_OPAQUE_STRING_vignette_unignore_everything = 0x89D8,
  SCR_OPAQUE_STRING_vignette_vehicle_delete = 0x89D9,
  SCR_OPAQUE_STRING_vip_enemy_interrupt = 0x89E2,
  SCR_OPAQUE_STRING_visibleto = 0x89F6,
  SCR_OPAQUE_STRING_vision_mudpumps_end = 0x89FD,
  SCR_OPAQUE_STRING_vision_set_fog_progress = 0x8A03,
  SCR_OPAQUE_STRING_vision_set_refinery_visionsets = 0x8A04,
  SCR_OPAQUE_STRING_visionset_diff = 0x8A0B,
  SCR_OPAQUE_STRING_visiontest = 0x8A0C,
  SCR_OPAQUE_STRING_vista_tilt_model = 0x8A1B,
  SCR_OPAQUE_STRING_vista_tilt_setup = 0x8A1C,
  SCR_OPAQUE_STRING_vista_vehicles = 0x8A1D,
  SCR_OPAQUE_STRING_visual_origin = 0x8A1F,
  SCR_OPAQUE_STRING_vo_flag_timer = 0x8A33,
  SCR_OPAQUE_STRING_vo_system = 0x8A37,
  SCR_OPAQUE_STRING_voice_is_british_based = 0x8A3F,
  SCR_OPAQUE_STRING_voicecanburst = 0x8A40,
  SCR_OPAQUE_STRING_vol = 0x8A46,
  SCR_OPAQUE_STRING_vttype = 0x8A57,
  SCR_OPAQUE_STRING_vulture_savetostruct = 0x8A5F,
  SCR_OPAQUE_STRING_vulture_waitfortriggerstop = 0x8A62,
  SCR_OPAQUE_STRING_w_alpha = 0x8A64,
  SCR_OPAQUE_STRING_wait_endon = 0x8A6C,
  SCR_OPAQUE_STRING_wait_for_ability_use = 0x8A6D,
  SCR_OPAQUE_STRING_wait_for_proximity_check_activation = 0x8A91,
  SCR_OPAQUE_STRING_wait_till_distance_from_enemy = 0x8AB7,
  SCR_OPAQUE_STRING_wait_till_offscreen_then_delete = 0x8AB9,
  SCR_OPAQUE_STRING_wait_till_shot = 0x8ABC,
  SCR_OPAQUE_STRING_wait_until_anim_finishes = 0x8AC3,
  SCR_OPAQUE_STRING_wait_until_enemies_in_volume = 0x8AC5,
  SCR_OPAQUE_STRING_waitforchangeteams = 0x8ADC,
  SCR_OPAQUE_STRING_waitforclassselect = 0x8ADD,
  SCR_OPAQUE_STRING_waitformovemodechange = 0x8AE8,
  SCR_OPAQUE_STRING_waitforstancechange = 0x8AF6,
  SCR_OPAQUE_STRING_waitforstuck = 0x8AFA,
  SCR_OPAQUE_STRING_waitfortimeornotify = 0x8AFC,
  SCR_OPAQUE_STRING_waitingforgate = 0x8B04,
  SCR_OPAQUE_STRING_waitingtodeactivate = 0x8B05,
  SCR_OPAQUE_STRING_waitloadoutdone = 0x8B0B,
  SCR_OPAQUE_STRING_waitskipkillcambutton = 0x8B17,
  SCR_OPAQUE_STRING_waitskipkillcambuttonduringdeathtimer = 0x8B18,
  SCR_OPAQUE_STRING_waittakekillstreakweapon = 0x8B1E,
  SCR_OPAQUE_STRING_waittill_any_in_array_or_timeout_no_endon_death = 0x8B2D,
  SCR_OPAQUE_STRING_waittill_any_in_array_return_no_endon_death = 0x8B2F,
  SCR_OPAQUE_STRING_waittill_any_return_no_endon_death = 0x8B34,
  SCR_OPAQUE_STRING_waittill_any_triggered_return_triggerer = 0x8B38,
  SCR_OPAQUE_STRING_waittill_array_dead = 0x8B39,
  SCR_OPAQUE_STRING_waittill_breach_enemy_dead = 0x8B3B,
  SCR_OPAQUE_STRING_waittill_clockambush_driver_dead = 0x8B3C,
  SCR_OPAQUE_STRING_waittill_death_respawn = 0x8B4D,
  SCR_OPAQUE_STRING_waittill_entity_in_range = 0x8B5A,
  SCR_OPAQUE_STRING_waittill_forever = 0x8B61,
  SCR_OPAQUE_STRING_waittill_knockdown_moment = 0x8B6B,
  SCR_OPAQUE_STRING_waittill_my_death = 0x8B75,
  SCR_OPAQUE_STRING_waittill_notify_or_timeout = 0x8B7C,
  SCR_OPAQUE_STRING_waittill_player_not_looking = 0x8B92,
  SCR_OPAQUE_STRING_waittill_time_out = 0x8BA1,
  SCR_OPAQUE_STRING_waittill_trigger_ent_targetname = 0x8BA6,
  SCR_OPAQUE_STRING_waittill_triggered_current = 0x8BA8,
  SCR_OPAQUE_STRING_waittill_volume_dead_then_set_flag = 0x8BAD,
  SCR_OPAQUE_STRING_waittill_weapon_placed = 0x8BAE,
  SCR_OPAQUE_STRING_waituntilwaverelease = 0x8BCB,
  SCR_OPAQUE_STRING_wakeup_enemies = 0x8BD1,
  SCR_OPAQUE_STRING_wakeup_to_player_distance = 0x8BD5,
  SCR_OPAQUE_STRING_walkout_do_stop_transition_anim = 0x8BE0,
  SCR_OPAQUE_STRING_walkway_collapse_clip_show = 0x8BE6,
  SCR_OPAQUE_STRING_wall_friction_enabled = 0x8BF2,
  SCR_OPAQUE_STRING_wall_friction_trace_dist = 0x8BF4,
  SCR_OPAQUE_STRING_wall_lights = 0x8BF9,
  SCR_OPAQUE_STRING_wants_to_fire = 0x8C00,
  SCR_OPAQUE_STRING_warhawkcustombotkillstreakfunc = 0x8C2B,
  SCR_OPAQUE_STRING_warthog = 0x8C35,
  SCR_OPAQUE_STRING_warthog_player_fadeout_crash = 0x8C38,
  SCR_OPAQUE_STRING_watch_damage = 0x8C62,
  SCR_OPAQUE_STRING_watch_for_ally_see_convoy = 0x8C6E,
  SCR_OPAQUE_STRING_watch_for_round_room_combat = 0x8C80,
  SCR_OPAQUE_STRING_watch_for_shockwave_hit = 0x8C82,
  SCR_OPAQUE_STRING_watch_if_used = 0x8C8E,
  SCR_OPAQUE_STRING_watch_nodes_stop = 0x8C99,
  SCR_OPAQUE_STRING_watch_placed_sentry = 0x8C9D,
  SCR_OPAQUE_STRING_watch_player_escape = 0x8CA2,
  SCR_OPAQUE_STRING_watch_player_wake_scientists = 0x8CAC,
  SCR_OPAQUE_STRING_watch_smoke = 0x8CB4,
  SCR_OPAQUE_STRING_watch_throwing_knife_land = 0x8CB8,
  SCR_OPAQUE_STRING_watch_tv_for_damage = 0x8CBB,
  SCR_OPAQUE_STRING_watchattackstate = 0x8CC5,
  SCR_OPAQUE_STRING_watchdeployablemarkercancel = 0x8CD7,
  SCR_OPAQUE_STRING_watchdvars = 0x8CDD,
  SCR_OPAQUE_STRING_watchoffhandcancel = 0x8D07,
  SCR_OPAQUE_STRING_watchsmokeuse = 0x8D22,
  SCR_OPAQUE_STRING_watchstartweaponchange = 0x8D24,
  SCR_OPAQUE_STRING_watchstoprevenge = 0x8D28,
  SCR_OPAQUE_STRING_watchsuppression = 0x8D29,
  SCR_OPAQUE_STRING_watchweaponpickuphorde = 0x8D34,
  SCR_OPAQUE_STRING_water_surface_think = 0x8D52,
  SCR_OPAQUE_STRING_waterball_main_side_setup = 0x8D5F,
  SCR_OPAQUE_STRING_wave_3_charge_spawn_func = 0x8D79,
  SCR_OPAQUE_STRING_wave_has_delayed_spawn_type = 0x8D7E,
  SCR_OPAQUE_STRING_weap_has_thermal = 0x8D8D,
  SCR_OPAQUE_STRING_weapon_change_timer = 0x8D91,
  SCR_OPAQUE_STRING_weapon_notify_loop = 0x8D9A,
  SCR_OPAQUE_STRING_weaponattachments = 0x8DA1,
  SCR_OPAQUE_STRING_weaponspeed = 0x8DC2,
  SCR_OPAQUE_STRING_weapontagright = 0x8DC9,
  SCR_OPAQUE_STRING_weld_sound_loop_npc = 0x8DD3,
  SCR_OPAQUE_STRING_weldtool = 0x8DDA,
  SCR_OPAQUE_STRING_whisper = 0x8DE4,
  SCR_OPAQUE_STRING_white_overlay = 0x8DE6,
  SCR_OPAQUE_STRING_window_crash = 0x8DFA,
  SCR_OPAQUE_STRING_wing_tag = 0x8E0C,
  SCR_OPAQUE_STRING_winner = 0x8E11,
  SCR_OPAQUE_STRING_winners = 0x8E12,
  SCR_OPAQUE_STRING_wipeout = 0x8E15,
  SCR_OPAQUE_STRING_wolfpack_circle_dialogue = 0x8E33,
  SCR_OPAQUE_STRING_world_vault_clip = 0x8E44,
  SCR_OPAQUE_STRING_wreck_hint_up = 0x8E51,
  SCR_OPAQUE_STRING_wreck_jumper_watcher = 0x8E52,
  SCR_OPAQUE_STRING_write_log = 0x8E5B,
  SCR_OPAQUE_STRING_yoff = 0x8E96,
  SCR_OPAQUE_STRING_yscale = 0x8E9C,
  SCR_OPAQUE_STRING_z_max = 0x8E9E,
  SCR_OPAQUE_STRING_zipline = 0x8EA8,
  SCR_OPAQUE_STRING_zipline_allies_anims = 0x8EA9,
  SCR_OPAQUE_STRING_zipline_allies_vo = 0x8EAA,
  SCR_OPAQUE_STRING_zipline_launcher_setup_anims = 0x8EB8,
  SCR_OPAQUE_STRING_zipline_rope_baker = 0x8EBC,
  SCR_OPAQUE_STRING_zipline_startpoint = 0x8EC1,
  SCR_OPAQUE_STRING_zipline_trolley_rorke = 0x8EC5,
  SCR_OPAQUE_STRING_zodiac_ally_shoot_targets = 0x8ECA,
  SCR_OPAQUE_STRING_zodiac_b = 0x8ECC,
  SCR_OPAQUE_STRING_zodiac_osprey_2_wave = 0x8ED7,
  SCR_OPAQUE_STRING_zodiac_teleport_logic = 0x8EE0,
  SCR_OPAQUE_STRING_zodiacs_defend_vo = 0x8EE7,
  SCR_OPAQUE_STRING_zoffset = 0x8EE8,
  SCR_OPAQUE_STRING_zone = 0x8EE9,
  SCR_OPAQUE_STRING_zoom_lerp_dof = 0x8EF2,
  SCR_OPAQUE_FILE3_maps_createart_mp_boneyard_ns_art = 0x8EFF,
  SCR_OPAQUE_FILE3_maps_createart_mp_ca_red_river_art = 0x8F01,
  SCR_OPAQUE_FILE3_maps_createfx_mp_boneyard_ns_fx = 0x8F08,
  SCR_OPAQUE_FILE3_maps_mp_mp_alien_armory_fx = 0x8F0D,
  SCR_OPAQUE_FILE3_maps_mp_mp_ca_rumble_fx = 0x8F13,
  SCR_OPAQUE_FILE3_maps_mp_mp_swamp_precache = 0x8F16,
  SCR_OPAQUE_FILE4_maps_mp_alien__alien_matchdata = 0x8F18,
  SCR_OPAQUE_FILE4_maps_mp_alien__deployablebox_functions = 0x8F1D,
  SCR_OPAQUE_STRING_agent_player_dom_think = 0x8F3E,
  SCR_OPAQUE_STRING_alien_crafting_items = 0x8F50,
  SCR_OPAQUE_STRING_allow_random_killers = 0x8F64,
  SCR_OPAQUE_STRING_allowcamo = 0x8F65,
  SCR_OPAQUE_STRING_armory_custom_onalienagentdamaged_func = 0x8F7C,
  SCR_OPAQUE_STRING_assignspiderattributes = 0x8F86,
  SCR_OPAQUE_STRING_attack_behavior = 0x8F8D,
  SCR_OPAQUE_STRING_base_player_count_multiplier = 0x8F9B,
  SCR_OPAQUE_STRING_beamprecursor = 0x8FA8,
  SCR_OPAQUE_STRING_beat_blocker_hive = 0x8FAB,
  SCR_OPAQUE_STRING_bomber_wait_for_bomb_reset = 0x8FBB,
  SCR_OPAQUE_STRING_bot_cache_flag_distances = 0x8FD5,
  SCR_OPAQUE_STRING_bot_dom_apply_commander_tactics = 0x8FE0,
  SCR_OPAQUE_STRING_bot_find_visible_tags_mugger = 0x8FEC,
  SCR_OPAQUE_STRING_bot_infect_think = 0x8FF6,
  SCR_OPAQUE_STRING_bot_sd_ai_director_update = 0x9009,
  SCR_OPAQUE_STRING_bridge_anim_time = 0x9019,
  SCR_OPAQUE_STRING_bridge_event_handle_churchbells = 0x9027,
  SCR_OPAQUE_STRING_bridge_event_play_caralarm = 0x902B,
  SCR_OPAQUE_STRING_bridge_precache = 0x9031,
  SCR_OPAQUE_STRING_bridge_wholeents = 0x9035,
  SCR_OPAQUE_STRING_burst_out = 0x903B,
  SCR_OPAQUE_STRING_cautious_approach_till_close = 0x9056,
  SCR_OPAQUE_STRING_challenge_name = 0x9058,
  SCR_OPAQUE_STRING_clear_bot_on_reset = 0x906C,
  SCR_OPAQUE_STRING_crash_path = 0x90A0,
  SCR_OPAQUE_STRING_crate_can_use = 0x90A1,
  SCR_OPAQUE_STRING_create_attackable_ent_override_func = 0x90A6,
  SCR_OPAQUE_STRING_createcarriedobject = 0x90AE,
  SCR_OPAQUE_STRING_cross_office_vo = 0x90B3,
  SCR_OPAQUE_STRING_default_radial_craftable = 0x90DB,
  SCR_OPAQUE_STRING_defend_planted_bomb_update = 0x90E2,
  SCR_OPAQUE_STRING_delay_vo_until_all_clear = 0x90E9,
  SCR_OPAQUE_STRING_destroy_weakpoint = 0x90ED,
  SCR_OPAQUE_STRING_device_det_radius = 0x90F0,
  SCR_OPAQUE_STRING_disable_force_sprint = 0x90F4,
  SCR_OPAQUE_STRING_dlcalieneggs = 0x90FE,
  SCR_OPAQUE_STRING_drainable = 0x9105,
  SCR_OPAQUE_STRING_during_host_migration = 0x9109,
  SCR_OPAQUE_STRING_elevatedreturn = 0x9125,
  SCR_OPAQUE_STRING_encounter_name = 0x912E,
  SCR_OPAQUE_STRING_encounter_score_earned = 0x9131,
  SCR_OPAQUE_STRING_fire_event_b = 0x9154,
  SCR_OPAQUE_STRING_fire_fx_array = 0x9155,
  SCR_OPAQUE_STRING_fire_horiz_fire = 0x9158,
  SCR_OPAQUE_STRING_fire_horiz_firing_fx = 0x9159,
  SCR_OPAQUE_STRING_fx_cross_lab_light_off = 0x916E,
  SCR_OPAQUE_STRING_get_activation_trigger = 0x9186,
  SCR_OPAQUE_STRING_get_damage_weight = 0x9199,
  SCR_OPAQUE_STRING_get_lb_final_spider_rank = 0x91A9,
  SCR_OPAQUE_STRING_get_notify_message = 0x91B1,
  SCR_OPAQUE_STRING_get_num_allies_capturing_flag = 0x91B3,
  SCR_OPAQUE_STRING_get_num_allies_getting_tag = 0x91B4,
  SCR_OPAQUE_STRING_getcamoindex = 0x91E7,
  SCR_OPAQUE_STRING_gethighestprogressedplayers = 0x91EE,
  SCR_OPAQUE_STRING_gun_guns = 0x920B,
  SCR_OPAQUE_STRING_gun_loadouts = 0x920C,
  SCR_OPAQUE_STRING_gun_nextguns = 0x920D,
  SCR_OPAQUE_STRING_gun_prevguns = 0x920E,
  SCR_OPAQUE_STRING_gungamegunindex = 0x920F,
  SCR_OPAQUE_STRING_hard_attachment = 0x9217,
  SCR_OPAQUE_STRING_hard_money = 0x921C,
  SCR_OPAQUE_STRING_hotjoin_skill_points_fun = 0x9236,
  SCR_OPAQUE_STRING_hvtisfollowing = 0x923B,
  SCR_OPAQUE_STRING_init_challenge_score = 0x9250,
  SCR_OPAQUE_STRING_init_spider_teamwork_score_component = 0x926C,
  SCR_OPAQUE_STRING_initialize_blitz_role = 0x927B,
  SCR_OPAQUE_STRING_intel_outline_func = 0x9284,
  SCR_OPAQUE_STRING_intel_type = 0x9289,
  SCR_OPAQUE_STRING_is_sliding = 0x92A2,
  SCR_OPAQUE_STRING_isaliennonmannedturret = 0x92A7,
  SCR_OPAQUE_STRING_isoutofbound = 0x92AE,
  SCR_OPAQUE_STRING_isspecialattackavailable = 0x92B1,
  SCR_OPAQUE_STRING_jump_to_loadingdock = 0x92C2,
  SCR_OPAQUE_STRING_long_shot_logic = 0x9309,
  SCR_OPAQUE_STRING_make_waypoint = 0x930D,
  SCR_OPAQUE_STRING_mapcustomjuggfunc = 0x9311,
  SCR_OPAQUE_STRING_medium_explosive = 0x9326,
  SCR_OPAQUE_STRING_medium_specialammo = 0x932B,
  SCR_OPAQUE_STRING_monitor_flag_ownership = 0x933E,
  SCR_OPAQUE_STRING_monitor_spider_intro_proximity = 0x9341,
  SCR_OPAQUE_STRING_monitoroutofbound = 0x9346,
  SCR_OPAQUE_STRING_mortar_siren_ent = 0x934D,
  SCR_OPAQUE_STRING_mortars_activate_at_end_of_match = 0x9350,
  SCR_OPAQUE_STRING_mp_alien_armory_onspawnplayer_func = 0x9353,
  SCR_OPAQUE_STRING_next_direction_vo_time = 0x935F,
  SCR_OPAQUE_STRING_notify_enemy_team_bomb_used = 0x9367,
  SCR_OPAQUE_STRING_operationindexes = 0x9381,
  SCR_OPAQUE_STRING_perimiter_defense_think = 0x938D,
  SCR_OPAQUE_STRING_play_third_spider_music = 0x939B,
  SCR_OPAQUE_STRING_play_vignette_vo = 0x939D,
  SCR_OPAQUE_STRING_playanimation = 0x939E,
  SCR_OPAQUE_STRING_playeggattackanim = 0x93A0,
  SCR_OPAQUE_STRING_player_kill_quad = 0x93A6,
  SCR_OPAQUE_STRING_playvoforbrutespawn = 0x93B5,
  SCR_OPAQUE_STRING_postintroscreenfunc = 0x93C9,
  SCR_OPAQUE_STRING_random_killer_update = 0x93DC,
  SCR_OPAQUE_STRING_redriver_breach_update = 0x93E1,
  SCR_OPAQUE_STRING_redrivercustomkillstreakfunc = 0x93E6,
  SCR_OPAQUE_STRING_removetagsongameended = 0x9403,
  SCR_OPAQUE_STRING_reset_player_encounter_lua_omnvars = 0x9408,
  SCR_OPAQUE_STRING_role = 0x941D,
  SCR_OPAQUE_STRING_run_encounters = 0x9422,
  SCR_OPAQUE_STRING_scale_alien_damage_by_perks = 0x9427,
  SCR_OPAQUE_STRING_sd_bomb_just_planted = 0x942C,
  SCR_OPAQUE_STRING_set_lua_encounter_score_row = 0x943F,
  SCR_OPAQUE_STRING_set_single_value_stats = 0x9449,
  SCR_OPAQUE_STRING_setup_bot_conf = 0x945A,
  SCR_OPAQUE_STRING_setup_bouys = 0x945F,
  SCR_OPAQUE_STRING_setup_special_spawn_trigs = 0x946A,
  SCR_OPAQUE_STRING_setup_watertanks = 0x946B,
  SCR_OPAQUE_STRING_sfx = 0x9474,
  SCR_OPAQUE_STRING_should_skip_area_activation_func = 0x9482,
  SCR_OPAQUE_STRING_shouldcallforregen = 0x9489,
  SCR_OPAQUE_STRING_solo_gameshouldend = 0x94A0,
  SCR_OPAQUE_STRING_sotf_crate_can_use = 0x94A5,
  SCR_OPAQUE_STRING_sound_fire_elements = 0x94AB,
  SCR_OPAQUE_STRING_spider = 0x94C2,
  SCR_OPAQUE_STRING_spider_egg_spawn_structs = 0x94C4,
  SCR_OPAQUE_STRING_spider_entrance_b = 0x94C5,
  SCR_OPAQUE_STRING_spider_initial_intro = 0x94CB,
  SCR_OPAQUE_STRING_stop_firetrap_on_disconnect = 0x94EA,
  SCR_OPAQUE_STRING_swampslasherkilleffect = 0x94F4,
  SCR_OPAQUE_STRING_sweep_dummy = 0x94F6,
  SCR_OPAQUE_STRING_tank_hitfx_throttle = 0x94FF,
  SCR_OPAQUE_STRING_testspiderstagethink = 0x9508,
  SCR_OPAQUE_STRING_throwegg = 0x950A,
  SCR_OPAQUE_STRING_toggle_usablity_on_distance = 0x950E,
  SCR_OPAQUE_STRING_turn_off_intel_for_player = 0x9521,
  SCR_OPAQUE_STRING_update_alien_kill_achievements_dlc = 0x952F,
  SCR_OPAQUE_STRING_update_destroyer = 0x9538,
  SCR_OPAQUE_STRING_update_intel_achievement = 0x9540,
  SCR_OPAQUE_STRING_update_target_dummy = 0x954D,
  SCR_OPAQUE_STRING_updateweaponui = 0x955C,
  SCR_OPAQUE_STRING_validate_byte = 0x9562,
  SCR_OPAQUE_STRING_validate_value = 0x9565,
  SCR_OPAQUE_STRING_vulnerable_damage = 0x9578,
  SCR_OPAQUE_STRING_vulnerable_internal = 0x9579,
  SCR_OPAQUE_STRING_wait_notify_activate = 0x9580,
  SCR_OPAQUE_STRING_waitformove = 0x9584,
  SCR_OPAQUE_STRING_watch_for_rumble_mortars_crate = 0x958D,
  SCR_OPAQUE_STRING_weakpoints = 0x959B,
  SCR_OPAQUE_STRING_wolffurfx = 0x95A1,
  OPAQUE_STRING_COUNT_PLUS_ONE = 0x95A2,
};

/* 574 */
enum teammode_t
{
  TEAMMODE_AXIS_ALLIES = 0x0,
  TEAMMODE_FFA = 0x1,
  TEAMMODE_NUM_MODES = 0x2,
};

/* 575 */
enum $C65D947AD55D217516F83BBF1EBCB876
{
  SCR_FUNC_BEGIN = 0x1,
  SCR_FUNC_BEGIN_PREV = 0x0,
  SCR_FUNC_precacheturret = 0x1,
  SCR_FUNC_getweaponarray = 0x2,
  SCR_FUNC_createprintchannel = 0x3,
  SCR_FUNC_updategamerprofileall = 0x4,
  SCR_FUNC_clearlocalizedstrings = 0x5,
  SCR_FUNC_setphysicsgravitydir = 0x6,
  SCR_FUNC_gettimescale = 0x7,
  SCR_FUNC_settimescale = 0x8,
  SCR_FUNC_setslowmotionview = 0x9,
  SCR_FUNC_teleportscene = 0xA,
  SCR_FUNC_forcesharedammo = 0xB,
  SCR_FUNC_refreshhudcompass = 0xC,
  SCR_FUNC_refreshhudammocounter = 0xD,
  SCR_FUNC_notifyoncommand = 0xE,
  SCR_FUNC_setprintchannel = 0xF,
  SCR_FUNC_print = 0x10,
  SCR_FUNC_println = 0x11,
  SCR_FUNC_print3d = 0x12,
  SCR_FUNC_line = 0x13,
  SCR_FUNC_box = 0x14,
  SCR_FUNC_orientedbox = 0x15,
  SCR_FUNC_sphere = 0x16,
  SCR_FUNC_cylinder = 0x17,
  SCR_FUNC_spawnturret = 0x18,
  SCR_FUNC_canspawnturret = 0x19,
  SCR_FUNC_assert = 0x1A,
  SCR_FUNC_pausecinematicingame = 0x1B,
  SCR_FUNC_drawcompassfriendlies = 0x1C,
  SCR_FUNC_bulletspread = 0x1D,
  SCR_FUNC_bullettracer = 0x1E,
  SCR_FUNC_badplace_delete = 0x1F,
  SCR_FUNC_badplace_cylinder = 0x20,
  SCR_FUNC_badplace_arc = 0x21,
  SCR_FUNC_badplace_brush = 0x22,
  SCR_FUNC_clearallcorpses = 0x23,
  SCR_FUNC_setturretnode = 0x24,
  SCR_FUNC_unsetturretnode = 0x25,
  SCR_FUNC_setnodepriority = 0x26,
  SCR_FUNC_isnodeoccupied = 0x27,
  SCR_FUNC_setdebugorigin = 0x28,
  SCR_FUNC_setdebugangles = 0x29,
  SCR_FUNC_updategamerprofile = 0x2A,
  SCR_FUNC_assertex = 0x2B,
  SCR_FUNC_assertmsg = 0x2C,
  SCR_FUNC_isdefined = 0x2D,
  SCR_FUNC_isvalidmissile = 0x2E,
  SCR_FUNC_isstring = 0x2F,
  SCR_FUNC_setomnvar = 0x30,
  SCR_FUNC_getomnvar = 0x31,
  SCR_FUNC_setdvar = 0x32,
  SCR_FUNC_setdynamicdvar = 0x33,
  SCR_FUNC_setdvarifuninitialized = 0x34,
  SCR_FUNC_setdevdvar = 0x35,
  SCR_FUNC_setdevdvarifuninitialized = 0x36,
  SCR_FUNC_getdvar = 0x37,
  SCR_FUNC_getdvarint = 0x38,
  SCR_FUNC_getdvarfloat = 0x39,
  SCR_FUNC_getdvarvector = 0x3A,
  SCR_FUNC_gettime = 0x3B,
  SCR_FUNC_getentbynum = 0x3C,
  SCR_FUNC_getweaponmodel = 0x3D,
  SCR_FUNC_getculldist = 0x3E,
  SCR_FUNC_sethalfresparticles = 0x3F,
  SCR_FUNC_getmapsunlight = 0x40,
  SCR_FUNC_setsunlight = 0x41,
  SCR_FUNC_resetsunlight = 0x42,
  SCR_FUNC_getmapsundirection = 0x43,
  SCR_FUNC_getmapsunangles = 0x44,
  SCR_FUNC_setsundirection = 0x45,
  SCR_FUNC_lerpsundirection = 0x46,
  SCR_FUNC_lerpsunangles = 0x47,
  SCR_FUNC_resetsundirection = 0x48,
  SCR_FUNC_enableforcedsunshadows = 0x49,
  SCR_FUNC_enableforcednosunshadows = 0x4A,
  SCR_FUNC_disableforcedsunshadows = 0x4B,
  SCR_FUNC_enableouterspacemodellighting = 0x4C,
  SCR_FUNC_disableouterspacemodellighting = 0x4D,
  SCR_FUNC_remapstage = 0x4E,
  SCR_FUNC_changelevel = 0x4F,
  SCR_FUNC_missionsuccess = 0x50,
  SCR_FUNC_missionfailed = 0x51,
  SCR_FUNC_cinematic = 0x52,
  SCR_FUNC_cinematicingame = 0x53,
  SCR_FUNC_cinematicingamesync = 0x54,
  SCR_FUNC_cinematicingameloop = 0x55,
  SCR_FUNC_cinematicingameloopresident = 0x56,
  SCR_FUNC_iscinematicplaying = 0x57,
  SCR_FUNC_stopcinematicingame = 0x58,
  SCR_FUNC_getweapondisplayname = 0x59,
  SCR_FUNC_getweaponbasename = 0x5A,
  SCR_FUNC_getweaponattachments = 0x5B,
  SCR_FUNC_getweaponattachmentdisplaynames = 0x5C,
  SCR_FUNC_getweaponcamoname = 0x5D,
  SCR_FUNC_getweaponreticlename = 0x5E,
  SCR_FUNC_getweaponhidetags = 0x5F,
  SCR_FUNC_getanimlength = 0x60,
  SCR_FUNC_animhasnotetrack = 0x61,
  SCR_FUNC_getnotetracktimes = 0x62,
  SCR_FUNC_spawn = 0x63,
  SCR_FUNC_spawnloopsound = 0x64,
  SCR_FUNC_spawnloopingsound = 0x65,
  SCR_FUNC_bullettrace = 0x66,
  SCR_FUNC_target_setmaxsize = 0x67,
  SCR_FUNC_target_setcolor = 0x68,
  SCR_FUNC_target_setdelay = 0x69,
  SCR_FUNC_getstartorigin = 0x6A,
  SCR_FUNC_getstartangles = 0x6B,
  SCR_FUNC_getcycleoriginoffset = 0x6C,
  SCR_FUNC_magicgrenade = 0x6D,
  SCR_FUNC_magicgrenademanual = 0x6E,
  SCR_FUNC_setblur = 0x6F,
  SCR_FUNC_musicplay = 0x70,
  SCR_FUNC_musicstop = 0x71,
  SCR_FUNC_soundfade = 0x72,
  SCR_FUNC_soundsettimescalefactor = 0x73,
  SCR_FUNC_soundresettimescale = 0x74,
  SCR_FUNC_setocclusionpreset = 0x75,
  SCR_FUNC_levelsoundfade = 0x76,
  SCR_FUNC_precachenightvisioncodeassets = 0x77,
  SCR_FUNC_precachedigitaldistortcodeassets = 0x78,
  SCR_FUNC_precacheminimapsentrycodeassets = 0x79,
  SCR_FUNC_savegame = 0x7A,
  SCR_FUNC_issavesuccessful = 0x7B,
  SCR_FUNC_issaverecentlyloaded = 0x7C,
  SCR_FUNC_savegamenocommit = 0x7D,
  SCR_FUNC_commitsave = 0x7E,
  SCR_FUNC_commitwouldbevalid = 0x7F,
  SCR_FUNC_getfxvisibility = 0x80,
  SCR_FUNC_setculldist = 0x81,
  SCR_FUNC_bullettracepassed = 0x82,
  SCR_FUNC_sighttracepassed = 0x83,
  SCR_FUNC_physicstrace = 0x84,
  SCR_FUNC_playerphysicstrace = 0x85,
  SCR_FUNC_getgroundposition = 0x86,
  SCR_FUNC_getmovedelta = 0x87,
  SCR_FUNC_getangledelta = 0x88,
  SCR_FUNC_getnorthyaw = 0x89,
  SCR_FUNC_getcommandfromkey = 0x8A,
  SCR_FUNC_getsticksconfig = 0x8B,
  SCR_FUNC_weaponfightdist = 0x8C,
  SCR_FUNC_weaponmaxdist = 0x8D,
  SCR_FUNC_isturretactive = 0x8E,
  SCR_FUNC_target_alloc = 0x8F,
  SCR_FUNC_target_flush = 0x90,
  SCR_FUNC_target_set = 0x91,
  SCR_FUNC_target_remove = 0x92,
  SCR_FUNC_target_setshader = 0x93,
  SCR_FUNC_target_setoffscreenshader = 0x94,
  SCR_FUNC_target_isinrect = 0x95,
  SCR_FUNC_target_isincircle = 0x96,
  SCR_FUNC_target_startreticlelockon = 0x97,
  SCR_FUNC_target_clearreticlelockon = 0x98,
  SCR_FUNC_target_getarray = 0x99,
  SCR_FUNC_target_istarget = 0x9A,
  SCR_FUNC_target_setattackmode = 0x9B,
  SCR_FUNC_target_setjavelinonly = 0x9C,
  SCR_FUNC_target_hidefromplayer = 0x9D,
  SCR_FUNC_target_showtoplayer = 0x9E,
  SCR_FUNC_target_setscaledrendermode = 0x9F,
  SCR_FUNC_target_drawcornersonly = 0xA0,
  SCR_FUNC_target_drawsquare = 0xA1,
  SCR_FUNC_target_drawsingle = 0xA2,
  SCR_FUNC_target_setminsize = 0xA3,
  SCR_FUNC_setnorthyaw = 0xA4,
  SCR_FUNC_setslowmotion = 0xA5,
  SCR_FUNC_randomint = 0xA6,
  SCR_FUNC_randomfloat = 0xA7,
  SCR_FUNC_randomintrange = 0xA8,
  SCR_FUNC_randomfloatrange = 0xA9,
  SCR_FUNC_sin = 0xAA,
  SCR_FUNC_cos = 0xAB,
  SCR_FUNC_tan = 0xAC,
  SCR_FUNC_asin = 0xAD,
  SCR_FUNC_acos = 0xAE,
  SCR_FUNC_atan = 0xAF,
  SCR_FUNC_int = 0xB0,
  SCR_FUNC_float = 0xB1,
  SCR_FUNC_abs = 0xB2,
  SCR_FUNC_min = 0xB3,
  SCR_FUNC_objective_additionalcurrent = 0xB4,
  SCR_FUNC_objective_ring = 0xB5,
  SCR_FUNC_objective_setpointertextoverride = 0xB6,
  SCR_FUNC_getnode = 0xB7,
  SCR_FUNC_getnodearray = 0xB8,
  SCR_FUNC_getallnodes = 0xB9,
  SCR_FUNC_getnodesinradius = 0xBA,
  SCR_FUNC_getnodesinradiussorted = 0xBB,
  SCR_FUNC_getclosestnodeinsight = 0xBC,
  SCR_FUNC_getreflectionlocs = 0xBD,
  SCR_FUNC_getreflectionreferencelocs = 0xBE,
  SCR_FUNC_getvehicletracksegment = 0xBF,
  SCR_FUNC_getvehicletracksegmentarray = 0xC0,
  SCR_FUNC_getallvehicletracksegments = 0xC1,
  SCR_FUNC_isarray = 0xC2,
  SCR_FUNC_isai = 0xC3,
  SCR_FUNC_getindexforluincstring = 0xC4,
  SCR_FUNC_issentient = 0xC5,
  SCR_FUNC_isgodmode = 0xC6,
  SCR_FUNC_getdebugdvar = 0xC7,
  SCR_FUNC_getdebugdvarint = 0xC8,
  SCR_FUNC_getdebugdvarfloat = 0xC9,
  SCR_FUNC_setsaveddvar = 0xCA,
  SCR_FUNC_getfreeaicount = 0xCB,
  SCR_FUNC_getaicount = 0xCC,
  SCR_FUNC_getaiarray = 0xCD,
  SCR_FUNC_getaispeciesarray = 0xCE,
  SCR_FUNC_getspawnerarray = 0xCF,
  SCR_FUNC_getcorpsearray = 0xD0,
  SCR_FUNC_getspawnerteamarray = 0xD1,
  SCR_FUNC_getweaponclipmodel = 0xD2,
  SCR_FUNC_getbrushmodelcenter = 0xD3,
  SCR_FUNC_getkeybinding = 0xD4,
  SCR_FUNC_max = 0xD5,
  SCR_FUNC_floor = 0xD6,
  SCR_FUNC_ceil = 0xD7,
  SCR_FUNC_exp = 0xD8,
  SCR_FUNC_log = 0xD9,
  SCR_FUNC_sqrt = 0xDA,
  SCR_FUNC_squared = 0xDB,
  SCR_FUNC_clamp = 0xDC,
  SCR_FUNC_angleclamp = 0xDD,
  SCR_FUNC_angleclamp180 = 0xDE,
  SCR_FUNC_vectorfromlinetopoint = 0xDF,
  SCR_FUNC_pointonsegmentnearesttopoint = 0xE0,
  SCR_FUNC_distance = 0xE1,
  SCR_FUNC_distance2d = 0xE2,
  SCR_FUNC_distancesquared = 0xE3,
  SCR_FUNC_length = 0xE4,
  SCR_FUNC_length2d = 0xE5,
  SCR_FUNC_lengthsquared = 0xE6,
  SCR_FUNC_length2dsquared = 0xE7,
  SCR_FUNC_closer = 0xE8,
  SCR_FUNC_vectordot = 0xE9,
  SCR_FUNC_vectorcross = 0xEA,
  SCR_FUNC_axistoangles = 0xEB,
  SCR_FUNC_visionsetthermal = 0xEC,
  SCR_FUNC_visionsetpain = 0xED,
  SCR_FUNC_endlobby = 0xEE,
  SCR_FUNC_setac130ambience = 0xEF,
  SCR_FUNC_getmapcustom = 0xF0,
  SCR_FUNC_spawnsighttrace = 0xF1,
  SCR_FUNC_incrementcounter = 0xF2,
  SCR_FUNC_getcountertotal = 0xF3,
  SCR_FUNC_getlevelticks = 0xF4,
  SCR_FUNC_perlinnoise2d = 0xF5,
  SCR_FUNC_calcrockingangles = 0xF6,
  SCR_FUNC_reconevent = 0xF7,
  SCR_FUNC_reconspatialevent = 0xF8,
  SCR_FUNC_setsunflareposition = 0xF9,
  SCR_FUNC_createthreatbiasgroup = 0xFA,
  SCR_FUNC_threatbiasgroupexists = 0xFB,
  SCR_FUNC_getthreatbias = 0xFC,
  SCR_FUNC_setthreatbias = 0xFD,
  SCR_FUNC_setthreatbiasagainstall = 0xFE,
  SCR_FUNC_setignoremegroup = 0xFF,
  SCR_FUNC_isenemyteam = 0x100,
  SCR_FUNC_objective_additionalentity = 0x101,
  SCR_FUNC_objective_state_nomessage = 0x102,
  SCR_FUNC_objective_string = 0x103,
  SCR_FUNC_objective_string_nomessage = 0x104,
  SCR_FUNC_objective_additionalposition = 0x105,
  SCR_FUNC_objective_current_nomessage = 0x106,
  SCR_FUNC_vectornormalize = 0x107,
  SCR_FUNC_vectortoangles = 0x108,
  SCR_FUNC_vectortoyaw = 0x109,
  SCR_FUNC_vectorlerp = 0x10A,
  SCR_FUNC_anglestoup = 0x10B,
  SCR_FUNC_anglestoright = 0x10C,
  SCR_FUNC_anglestoforward = 0x10D,
  SCR_FUNC_anglesdelta = 0x10E,
  SCR_FUNC_combineangles = 0x10F,
  SCR_FUNC_transformmove = 0x110,
  SCR_FUNC_rotatevector = 0x111,
  SCR_FUNC_rotatepointaroundvector = 0x112,
  SCR_FUNC_issubstr = 0x113,
  SCR_FUNC_isendstr = 0x114,
  SCR_FUNC_getsubstr = 0x115,
  SCR_FUNC_tolower = 0x116,
  SCR_FUNC_strtok = 0x117,
  SCR_FUNC_stricmp = 0x118,
  SCR_FUNC_ambientplay = 0x119,
  SCR_FUNC_getuavstrengthmax = 0x11A,
  SCR_FUNC_getuavstrengthlevelneutral = 0x11B,
  SCR_FUNC_getuavstrengthlevelshowenemyfastsweep = 0x11C,
  SCR_FUNC_getuavstrengthlevelshowenemydirectional = 0x11D,
  SCR_FUNC_blockteamradar = 0x11E,
  SCR_FUNC_unblockteamradar = 0x11F,
  SCR_FUNC_isteamradarblocked = 0x120,
  SCR_FUNC_getassignedteam = 0x121,
  SCR_FUNC_setmatchdata = 0x122,
  SCR_FUNC_getmatchdata = 0x123,
  SCR_FUNC_sendmatchdata = 0x124,
  SCR_FUNC_clearmatchdata = 0x125,
  SCR_FUNC_setmatchdatadef = 0x126,
  SCR_FUNC_setmatchclientip = 0x127,
  SCR_FUNC_setmatchdataid = 0x128,
  SCR_FUNC_setclientmatchdata = 0x129,
  SCR_FUNC_getclientmatchdata = 0x12A,
  SCR_FUNC_setclientmatchdatadef = 0x12B,
  SCR_FUNC_sendclientmatchdata = 0x12C,
  SCR_FUNC_getbuildversion = 0x12D,
  SCR_FUNC_getbuildnumber = 0x12E,
  SCR_FUNC_getsystemtime = 0x12F,
  SCR_FUNC_getmatchrulesdata = 0x130,
  SCR_FUNC_isusingmatchrulesdata = 0x131,
  SCR_FUNC_kick = 0x132,
  SCR_FUNC_issplitscreen = 0x133,
  SCR_FUNC_setmapcenter = 0x134,
  SCR_FUNC_setgameendtime = 0x135,
  SCR_FUNC_visionsetnaked = 0x136,
  SCR_FUNC_visionsetnight = 0x137,
  SCR_FUNC_visionsetmissilecam = 0x138,
  SCR_FUNC_ambientstop = 0x139,
  SCR_FUNC_precachemodel = 0x13A,
  SCR_FUNC_precacheshellshock = 0x13B,
  SCR_FUNC_precacheitem = 0x13C,
  SCR_FUNC_precacheshader = 0x13D,
  SCR_FUNC_precachestring = 0x13E,
  SCR_FUNC_precachemenu = 0x13F,
  SCR_FUNC_precacherumble = 0x140,
  SCR_FUNC_precachelocationselector = 0x141,
  SCR_FUNC_precacheleaderboards = 0x142,
  SCR_FUNC_loadfx = 0x143,
  SCR_FUNC_playfx = 0x144,
  SCR_FUNC_playfxontag = 0x145,
  SCR_FUNC_stopfxontag = 0x146,
  SCR_FUNC_killfxontag = 0x147,
  SCR_FUNC_playloopedfx = 0x148,
  SCR_FUNC_spawnfx = 0x149,
  SCR_FUNC_triggerfx = 0x14A,
  SCR_FUNC_playfxontagforclients = 0x14B,
  SCR_FUNC_setwinningteam = 0x14C,
  SCR_FUNC_announcement = 0x14D,
  SCR_FUNC_clientannouncement = 0x14E,
  SCR_FUNC_setteammode = 0x14F,
  SCR_FUNC_getteamscore = 0x150,
  SCR_FUNC_setteamscore = 0x151,
  SCR_FUNC_setclientnamemode = 0x152,
  SCR_FUNC_updateclientnames = 0x153,
  SCR_FUNC_getteamplayersalive = 0x154,
  SCR_FUNC_logprint = 0x155,
  SCR_FUNC_worldentnumber = 0x156,
  SCR_FUNC_obituary = 0x157,
  SCR_FUNC_positionwouldtelefrag = 0x158,
  SCR_FUNC_canspawn = 0x159,
  SCR_FUNC_getstarttime = 0x15A,
  SCR_FUNC_precachestatusicon = 0x15B,
  SCR_FUNC_precacheheadicon = 0x15C,
  SCR_FUNC_precacheminimapicon = 0x15D,
  SCR_FUNC_precachempanim = 0x15E,
  SCR_FUNC_map_restart = 0x15F,
  SCR_FUNC_exitlevel = 0x160,
  SCR_FUNC_addtestclient = 0x161,
  SCR_FUNC_addagent = 0x162,
  SCR_FUNC_setarchive = 0x163,
  SCR_FUNC_allclientsprint = 0x164,
  SCR_FUNC_clientprint = 0x165,
  SCR_FUNC_mapexists = 0x166,
  SCR_FUNC_isvalidgametype = 0x167,
  SCR_FUNC_matchend = 0x168,
  SCR_FUNC_setplayerteamrank = 0x169,
  SCR_FUNC_endparty = 0x16A,
  SCR_FUNC_setteamradar = 0x16B,
  SCR_FUNC_getteamradar = 0x16C,
  SCR_FUNC_setteamradarstrength = 0x16D,
  SCR_FUNC_getteamradarstrength = 0x16E,
  SCR_FUNC_getuavstrengthmin = 0x16F,
  SCR_FUNC_physicsexplosionsphere = 0x170,
  SCR_FUNC_physicsexplosioncylinder = 0x171,
  SCR_FUNC_physicsjolt = 0x172,
  SCR_FUNC_physicsjitter = 0x173,
  SCR_FUNC_setexpfog = 0x174,
  SCR_FUNC_isexplosivedamagemod = 0x175,
  SCR_FUNC_radiusdamage = 0x176,
  SCR_FUNC_setplayerignoreradiusdamage = 0x177,
  SCR_FUNC_glassradiusdamage = 0x178,
  SCR_FUNC_earthquake = 0x179,
  SCR_FUNC_getnumparts = 0x17A,
  SCR_FUNC_objective_onentity = 0x17B,
  SCR_FUNC_objective_onentitywithrotation = 0x17C,
  SCR_FUNC_objective_team = 0x17D,
  SCR_FUNC_objective_player = 0x17E,
  SCR_FUNC_objective_playerteam = 0x17F,
  SCR_FUNC_objective_playerenemyteam = 0x180,
  SCR_FUNC_objective_playermask_hidefromall = 0x181,
  SCR_FUNC_objective_playermask_hidefrom = 0x182,
  SCR_FUNC_objective_playermask_showtoall = 0x183,
  SCR_FUNC_objective_playermask_showto = 0x184,
  SCR_FUNC_iprintln = 0x185,
  SCR_FUNC_iprintlnbold = 0x186,
  SCR_FUNC_logstring = 0x187,
  SCR_FUNC_getent = 0x188,
  SCR_FUNC_getentarray = 0x189,
  SCR_FUNC_getspawnarray = 0x18A,
  SCR_FUNC_spawnplane = 0x18B,
  SCR_FUNC_spawnstruct = 0x18C,
  SCR_FUNC_spawnhelicopter = 0x18D,
  SCR_FUNC_isalive = 0x18E,
  SCR_FUNC_isspawner = 0x18F,
  SCR_FUNC_missile_createattractorent = 0x190,
  SCR_FUNC_missile_createattractororigin = 0x191,
  SCR_FUNC_missile_createrepulsorent = 0x192,
  SCR_FUNC_missile_createrepulsororigin = 0x193,
  SCR_FUNC_missile_deleteattractor = 0x194,
  SCR_FUNC_playsoundatpos = 0x195,
  SCR_FUNC_newhudelem = 0x196,
  SCR_FUNC_newclienthudelem = 0x197,
  SCR_FUNC_newteamhudelem = 0x198,
  SCR_FUNC_resettimeout = 0x199,
  SCR_FUNC_isplayer = 0x19A,
  SCR_FUNC_isplayernumber = 0x19B,
  SCR_FUNC_getpartname = 0x19C,
  SCR_FUNC_weaponfiretime = 0x19D,
  SCR_FUNC_weaponclipsize = 0x19E,
  SCR_FUNC_weaponisauto = 0x19F,
  SCR_FUNC_weaponissemiauto = 0x1A0,
  SCR_FUNC_weaponisboltaction = 0x1A1,
  SCR_FUNC_weaponinheritsperks = 0x1A2,
  SCR_FUNC_weaponburstcount = 0x1A3,
  SCR_FUNC_weapontype = 0x1A4,
  SCR_FUNC_weaponclass = 0x1A5,
  SCR_FUNC_getnextarraykey = 0x1A6,
  SCR_FUNC_sortbydistance = 0x1A7,
  SCR_FUNC_tablelookup = 0x1A8,
  SCR_FUNC_tablelookupbyrow = 0x1A9,
  SCR_FUNC_tablelookupistring = 0x1AA,
  SCR_FUNC_tablelookupistringbyrow = 0x1AB,
  SCR_FUNC_tablelookuprownum = 0x1AC,
  SCR_FUNC_tableexists = 0x1AD,
  SCR_FUNC_getmissileowner = 0x1AE,
  SCR_FUNC_magicbullet = 0x1AF,
  SCR_FUNC_getweaponflashtagname = 0x1B0,
  SCR_FUNC_averagepoint = 0x1B1,
  SCR_FUNC_averagenormal = 0x1B2,
  SCR_FUNC_vehicle_getspawnerarray = 0x1B3,
  SCR_FUNC_playrumbleonposition = 0x1B4,
  SCR_FUNC_playrumblelooponposition = 0x1B5,
  SCR_FUNC_stopallrumbles = 0x1B6,
  SCR_FUNC_soundexists = 0x1B7,
  SCR_FUNC_openfile = 0x1B8,
  SCR_FUNC_closefile = 0x1B9,
  SCR_FUNC_fprintln = 0x1BA,
  SCR_FUNC_fprintfields = 0x1BB,
  SCR_FUNC_freadln = 0x1BC,
  SCR_FUNC_fgetarg = 0x1BD,
  SCR_FUNC_setminimap = 0x1BE,
  SCR_FUNC_setthermalbodymaterial = 0x1BF,
  SCR_FUNC_getarraykeys = 0x1C0,
  SCR_FUNC_getfirstarraykey = 0x1C1,
  SCR_FUNC_getglass = 0x1C2,
  SCR_FUNC_getglassarray = 0x1C3,
  SCR_FUNC_getglassorigin = 0x1C4,
  SCR_FUNC_isglassdestroyed = 0x1C5,
  SCR_FUNC_destroyglass = 0x1C6,
  SCR_FUNC_deleteglass = 0x1C7,
  SCR_FUNC_getentchannelscount = 0x1C8,
  SCR_FUNC_getentchannelname = 0x1C9,
  SCR_FUNC_objective_add = 0x1CA,
  SCR_FUNC_objective_delete = 0x1CB,
  SCR_FUNC_objective_state = 0x1CC,
  SCR_FUNC_objective_icon = 0x1CD,
  SCR_FUNC_objective_position = 0x1CE,
  SCR_FUNC_objective_current = 0x1CF,
  SCR_FUNC_weaponinventorytype = 0x1D0,
  SCR_FUNC_weaponstartammo = 0x1D1,
  SCR_FUNC_weaponmaxammo = 0x1D2,
  SCR_FUNC_weaponaltweaponname = 0x1D3,
  SCR_FUNC_isweaponcliponly = 0x1D4,
  SCR_FUNC_isweapondetonationtimed = 0x1D5,
  SCR_FUNC_weaponhasthermalscope = 0x1D6,
  SCR_FUNC_getvehiclenode = 0x1D7,
  SCR_FUNC_getvehiclenodearray = 0x1D8,
  SCR_FUNC_getallvehiclenodes = 0x1D9,
  SCR_FUNC_getnumvehicles = 0x1DA,
  SCR_FUNC_precachevehicle = 0x1DB,
  SCR_FUNC_spawnvehicle = 0x1DC,
  SCR_FUNC_vehicle_getarray = 0x1DD,
  SCR_FUNC_pow = 0x1DE,
  SCR_FUNC_botgetmemoryevents = 0x1DF,
  SCR_FUNC_botautoconnectenabled = 0x1E0,
  SCR_FUNC_botzonegetcount = 0x1E1,
  SCR_FUNC_botzonesetteam = 0x1E2,
  SCR_FUNC_botzonenearestcount = 0x1E3,
  SCR_FUNC_botmemoryflags = 0x1E4,
  SCR_FUNC_botflagmemoryevents = 0x1E5,
  SCR_FUNC_botzonegetindoorpercent = 0x1E6,
  SCR_FUNC_botsentientswap = 0x1E7,
  SCR_FUNC_isbot = 0x1E8,
  SCR_FUNC_isagent = 0x1E9,
  SCR_FUNC_getmaxagents = 0x1EA,
  SCR_FUNC_botdebugdrawtrigger = 0x1EB,
  SCR_FUNC_botgetclosestnavigablepoint = 0x1EC,
  SCR_FUNC_getnodesintrigger = 0x1ED,
  SCR_FUNC_nodesvisible = 0x1EE,
  SCR_FUNC_getnodesonpath = 0x1EF,
  SCR_FUNC_getzonecount = 0x1F0,
  SCR_FUNC_getzonenearest = 0x1F1,
  SCR_FUNC_getzonenodes = 0x1F2,
  SCR_FUNC_getzonepath = 0x1F3,
  SCR_FUNC_getzoneorigin = 0x1F4,
  SCR_FUNC_getnodezone = 0x1F5,
  SCR_FUNC_getzonenodesbydist = 0x1F6,
  SCR_FUNC_getzonenodeforindex = 0x1F7,
  SCR_FUNC_getweaponexplosionradius = 0x1F8,
  SCR_FUNC_markdangerousnodes = 0x1F9,
  SCR_FUNC_markdangerousnodesintrigger = 0x1FA,
  SCR_FUNC_nodeexposedtosky = 0x1FB,
  SCR_FUNC_findentrances = 0x1FC,
  SCR_FUNC_badplace_global = 0x1FD,
  SCR_FUNC_getpathdist = 0x1FE,
  SCR_FUNC_getlinkednodes = 0x1FF,
  SCR_FUNC_disconnectnodepair = 0x200,
  SCR_FUNC_connectnodepair = 0x201,
  SCR_FUNC_drawsoundshape = 0x202,
  SCR_FUNC_gettimesincelastpaused = 0x203,
  SCR_FUNC_setlasermaterial = 0x204,
  SCR_FUNC_precachefxontag = 0x205,
  SCR_FUNC_precachetag = 0x206,
  SCR_FUNC_precachesound = 0x207,
  SCR_FUNC_devsetminimapdvarsettings = 0x208,
  SCR_FUNC_loadtransient = 0x209,
  SCR_FUNC_unloadtransient = 0x20A,
  SCR_FUNC_unloadalltransients = 0x20B,
  SCR_FUNC_synctransients = 0x20C,
  SCR_FUNC_istransientqueued = 0x20D,
  SCR_FUNC_istransientloaded = 0x20E,
  SCR_FUNC_loadstartpointtransient = 0x20F,
  SCR_FUNC_distance2dsquared = 0x210,
  SCR_FUNC_getangledelta3d = 0x211,
  SCR_FUNC_activateclientexploder = 0x212,
  SCR_FUNC_trajectorycalculateinitialvelocity = 0x213,
  SCR_FUNC_trajectorycalculateminimumvelocity = 0x214,
  SCR_FUNC_trajectorycalculateexitangle = 0x215,
  SCR_FUNC_trajectoryestimatedesiredinairtime = 0x216,
  SCR_FUNC_trajectorycomputedeltaheightattime = 0x217,
  SCR_FUNC_trajectorycanattemptaccuratejump = 0x218,
  SCR_FUNC_adddebugcommand = 0x219,
  SCR_FUNC_ispointinvolume = 0x21A,
  SCR_FUNC_cinematicgettimeinmsec = 0x21B,
  SCR_FUNC_cinematicgetframe = 0x21C,
  SCR_FUNC_iscinematicloaded = 0x21D,
  SCR_FUNC_bbprint = 0x21E,
  SCR_FUNC_getenemysquaddata = 0x21F,
  SCR_FUNC_lookupsoundlength = 0x220,
  SCR_FUNC_getscriptablearray = 0x221,
  SCR_FUNC_clearfog = 0x222,
  SCR_FUNC_setleveldopplerpreset = 0x223,
  SCR_FUNC_screenshake = 0x224,
  SCR_FUNC_anglestoaxis = 0x225,
  SCR_FUNC_visionsetwater = 0x226,
  SCR_FUNC_sendscriptusageanalysisdata = 0x227,
  SCR_FUNC_resetscriptusageanalysisdata = 0x228,
  SCR_FUNC_instantlylogusageanalysisdata = 0x229,
  SCR_FUNC_invertangles = 0x22A,
  SCR_FUNC_rotatevectorinverted = 0x22B,
  SCR_FUNC_calculatestartorientation = 0x22C,
  SCR_FUNC_getcsplinecount = 0x22D,
  SCR_FUNC_getcsplinepointcount = 0x22E,
  SCR_FUNC_getcsplinelength = 0x22F,
  SCR_FUNC_getcsplinepointid = 0x230,
  SCR_FUNC_getcsplinepointlabel = 0x231,
  SCR_FUNC_getcsplinepointtension = 0x232,
  SCR_FUNC_getcsplinepointposition = 0x233,
  SCR_FUNC_getcsplinepointcorridordims = 0x234,
  SCR_FUNC_getcsplinepointtangent = 0x235,
  SCR_FUNC_getcsplinepointdisttonextpoint = 0x236,
  SCR_FUNC_calccsplineposition = 0x237,
  SCR_FUNC_calccsplinetangent = 0x238,
  SCR_FUNC_calccsplinecorridor = 0x239,
  SCR_FUNC_setnojipscore = 0x23A,
  SCR_FUNC_setnojiptime = 0x23B,
  SCR_FUNC_getpredictedentityposition = 0x23C,
  SCR_FUNC_gamedvrprohibitrecording = 0x23D,
  SCR_FUNC_gamedvrstartrecording = 0x23E,
  SCR_FUNC_gamedvrstoprecording = 0x23F,
  SCR_FUNC_gamedvrsetvideometadata = 0x240,
  SCR_FUNC_gamedvrprohibitscreenshots = 0x241,
  SCR_FUNC_gamedvrsetscreenshotmetadata = 0x242,
  SCR_FUNC_queuedialog = 0x243,
  SCR_FUNC_speechenablegrammar = 0x244,
  SCR_FUNC_speechenable = 0x245,
  SCR_FUNC_livestreamingenable = 0x246,
  SCR_FUNC_livestreamingsetbitrate = 0x247,
  SCR_FUNC_triggerportableradarping = 0x248,
  SCR_FUNC_setglaregrimematerial = 0x249,
  SCR_FUNC_botgetteamlimit = 0x24A,
  SCR_FUNC_spawnfxforclient = 0x24B,
  SCR_FUNC_botgetteamdifficulty = 0x24C,
  SCR_FUNC_getsquadassaultelo = 0x24D,
  SCR_FUNC_loadluifile = 0x24E,
  SCR_FUNC_isdedicatedserver = 0x24F,
  SCR_FUNC_getplaylistversion = 0x250,
  SCR_FUNC_getplaylistid = 0x251,
  SCR_FUNC_getactiveclientcount = 0x252,
  SCR_FUNC_issquadsmode = 0x253,
  SCR_FUNC_getsquadassaultsquadindex = 0x254,
  SCR_FUNC_visionsetpostapply = 0x255,
  SCR_FUNC_addbot = 0x256,
  SCR_FUNC_ishairrunning = 0x257,
  SCR_FUNC_getsquadassaultenemyprestige = 0x258,
  SCR_FUNC_playcinematicforall = 0x259,
  SCR_FUNC_preloadcinematicforall = 0x25A,
  SCR_FUNC_stopcinematicforall = 0x25B,
  SCR_FUNC_getenemysquaddogtype = 0x25C,
  SCR_FUNC_capsuletracepassed = 0x25D,
  SCR_FUNC_END = 0x25E,
  SCR_METH_BEGIN = 0x8000,
  SCR_METH_BEGIN_PREV = 0x7FFF,
  SCR_METH_thermaldrawdisable = 0x8000,
  SCR_METH_setturretdismountorg = 0x8001,
  SCR_METH_setdamagestage = 0x8002,
  SCR_METH_playsoundtoteam = 0x8003,
  SCR_METH_playsoundtoplayer = 0x8004,
  SCR_METH_playerhide = 0x8005,
  SCR_METH_showtoplayer = 0x8006,
  SCR_METH_enableplayeruse = 0x8007,
  SCR_METH_disableplayeruse = 0x8008,
  SCR_METH_makescrambler = 0x8009,
  SCR_METH_makeportableradar = 0x800A,
  SCR_METH_clearscrambler = 0x800B,
  SCR_METH_clearportableradar = 0x800C,
  SCR_METH_placespawnpoint = 0x800D,
  SCR_METH_setteamfortrigger = 0x800E,
  SCR_METH_clientclaimtrigger = 0x800F,
  SCR_METH_clientreleasetrigger = 0x8010,
  SCR_METH_releaseclaimedtrigger = 0x8011,
  SCR_METH_isusingonlinedataoffline = 0x8012,
  SCR_METH_getrestedtime = 0x8013,
  SCR_METH_sendleaderboards = 0x8014,
  SCR_METH_isonladder = 0x8015,
  SCR_METH_getcorpseanim = 0x8016,
  SCR_METH_playerforcedeathanim = 0x8017,
  SCR_METH_attach = 0x8018,
  SCR_METH_attachshieldmodel = 0x8019,
  SCR_METH_getlightfovinner = 0x801A,
  SCR_METH_getlightfovouter = 0x801B,
  SCR_METH_setlightfovrange = 0x801C,
  SCR_METH_getlightexponent = 0x801D,
  SCR_METH_setlightexponent = 0x801E,
  SCR_METH_startragdoll = 0x801F,
  SCR_METH_startragdollfromimpact = 0x8020,
  SCR_METH_queryshouldearlyragdoll = 0x8021,
  SCR_METH_logstring = 0x8022,
  SCR_METH_laserhidefromclient = 0x8023,
  SCR_METH_stopsoundchannel = 0x8024,
  SCR_METH_thermaldrawenable = 0x8025,
  SCR_METH_detach = 0x8026,
  SCR_METH_detachshieldmodel = 0x8027,
  SCR_METH_moveshieldmodel = 0x8028,
  SCR_METH_detachall = 0x8029,
  SCR_METH_getattachsize = 0x802A,
  SCR_METH_getattachmodelname = 0x802B,
  SCR_METH_getattachtagname = 0x802C,
  SCR_METH_setturretcanaidetach = 0x802D,
  SCR_METH_setturretfov = 0x802E,
  SCR_METH_lerpfov = 0x802F,
  SCR_METH_getvalidcoverpeekouts = 0x8030,
  SCR_METH_gethighestnodestance = 0x8031,
  SCR_METH_doesnodeallowstance = 0x8032,
  SCR_METH_getgunangles = 0x8033,
  SCR_METH_magicgrenade = 0x8034,
  SCR_METH_magicgrenademanual = 0x8035,
  SCR_METH_getentnum = 0x8036,
  SCR_METH_launch = 0x8037,
  SCR_METH_setsoundblend = 0x8038,
  SCR_METH_makefakeai = 0x8039,
  SCR_METH_spawndrone = 0x803A,
  SCR_METH_setcorpseremovetimer = 0x803B,
  SCR_METH_setlookattext = 0x803C,
  SCR_METH_setspawnerteam = 0x803D,
  SCR_METH_addaieventlistener = 0x803E,
  SCR_METH_removeaieventlistener = 0x803F,
  SCR_METH_getlightcolor = 0x8040,
  SCR_METH_setlightcolor = 0x8041,
  SCR_METH_getlightradius = 0x8042,
  SCR_METH_setlightradius = 0x8043,
  SCR_METH_getattachignorecollision = 0x8044,
  SCR_METH_hidepart = 0x8045,
  SCR_METH_hidepart_allinstances = 0x8046,
  SCR_METH_hideallparts = 0x8047,
  SCR_METH_showpart = 0x8048,
  SCR_METH_showallparts = 0x8049,
  SCR_METH_linkto = 0x804A,
  SCR_METH_linktoblendtotag = 0x804B,
  SCR_METH_unlink = 0x804C,
  SCR_METH_setnormalhealth = 0x804D,
  SCR_METH_dodamage = 0x804E,
  SCR_METH_kill = 0x804F,
  SCR_METH_show = 0x8050,
  SCR_METH_hide = 0x8051,
  SCR_METH_showonclient = 0x8052,
  SCR_METH_hideonclient = 0x8053,
  SCR_METH_laserforceon = 0x8054,
  SCR_METH_laserforceoff = 0x8055,
  SCR_METH_disconnectpaths = 0x8056,
  SCR_METH_connectpaths = 0x8057,
  SCR_METH_disconnectnode = 0x8058,
  SCR_METH_connectnode = 0x8059,
  SCR_METH_startusingheroonlylighting = 0x805A,
  SCR_METH_stopusingheroonlylighting = 0x805B,
  SCR_METH_startusinglessfrequentlighting = 0x805C,
  SCR_METH_stopusinglessfrequentlighting = 0x805D,
  SCR_METH_setmovingplatformplayerturnrate = 0x805E,
  SCR_METH_setthermalfog = 0x805F,
  SCR_METH_setnightvisionfog = 0x8060,
  SCR_METH_clearthermalfog = 0x8061,
  SCR_METH_clearnightvisionfog = 0x8062,
  SCR_METH_digitaldistortsetparams = 0x8063,
  SCR_METH_setmode = 0x8064,
  SCR_METH_getmode = 0x8065,
  SCR_METH_setturretignoregoals = 0x8066,
  SCR_METH_islinked = 0x8067,
  SCR_METH_enablelinkto = 0x8068,
  SCR_METH_playsoundatviewheight = 0x8069,
  SCR_METH_prefetchsound = 0x806A,
  SCR_METH_setpitch = 0x806B,
  SCR_METH_scalepitch = 0x806C,
  SCR_METH_setvolume = 0x806D,
  SCR_METH_scalevolume = 0x806E,
  SCR_METH_setspeakermapmonotostereo = 0x806F,
  SCR_METH_setspeakermapmonoto51 = 0x8070,
  SCR_METH_setdistributed2dsound = 0x8071,
  SCR_METH_playsoundasmaster = 0x8072,
  SCR_METH_playloopsound = 0x8073,
  SCR_METH_eqon = 0x8074,
  SCR_METH_eqoff = 0x8075,
  SCR_METH_haseq = 0x8076,
  SCR_METH_iswaitingonsound = 0x8077,
  SCR_METH_getnormalhealth = 0x8078,
  SCR_METH_playerlinkto = 0x8079,
  SCR_METH_playerlinktodelta = 0x807A,
  SCR_METH_playerlinkweaponviewtodelta = 0x807B,
  SCR_METH_playerlinktoabsolute = 0x807C,
  SCR_METH_playerlinktoblend = 0x807D,
  SCR_METH_playerlinkedoffsetenable = 0x807E,
  SCR_METH_setwaypointedgestyle_secondaryarrow = 0x807F,
  SCR_METH_setwaypointiconoffscreenonly = 0x8080,
  SCR_METH_fadeovertime = 0x8081,
  SCR_METH_scaleovertime = 0x8082,
  SCR_METH_moveovertime = 0x8083,
  SCR_METH_reset = 0x8084,
  SCR_METH_destroy = 0x8085,
  SCR_METH_setpulsefx = 0x8086,
  SCR_METH_setplayernamestring = 0x8087,
  SCR_METH_changefontscaleovertime = 0x8088,
  SCR_METH_startignoringspotlight = 0x8089,
  SCR_METH_stopignoringspotlight = 0x808A,
  SCR_METH_dontcastshadows = 0x808B,
  SCR_METH_castshadows = 0x808C,
  SCR_METH_setstablemissile = 0x808D,
  SCR_METH_playersetgroundreferenceent = 0x808E,
  SCR_METH_dontinterpolate = 0x808F,
  SCR_METH_dospawn = 0x8090,
  SCR_METH_stalingradspawn = 0x8091,
  SCR_METH_getorigin = 0x8092,
  SCR_METH_getcentroid = 0x8093,
  SCR_METH_getshootatpos = 0x8094,
  SCR_METH_getdebugeye = 0x8095,
  SCR_METH_useby = 0x8096,
  SCR_METH_playsound = 0x8097,
  SCR_METH_playerlinkedoffsetdisable = 0x8098,
  SCR_METH_playerlinkedsetviewznear = 0x8099,
  SCR_METH_playerlinkedsetusebaseangleforviewclamp = 0x809A,
  SCR_METH_lerpviewangleclamp = 0x809B,
  SCR_METH_setviewangleresistance = 0x809C,
  SCR_METH_springcamenabled = 0x809D,
  SCR_METH_springcamdisabled = 0x809E,
  SCR_METH_linktoplayerview = 0x809F,
  SCR_METH_unlinkfromplayerview = 0x80A0,
  SCR_METH_geteye = 0x80A1,
  SCR_METH_istouching = 0x80A2,
  SCR_METH_getistouchingentities = 0x80A3,
  SCR_METH_stoploopsound = 0x80A4,
  SCR_METH_stopsounds = 0x80A5,
  SCR_METH_playrumbleonentity = 0x80A6,
  SCR_METH_playrumblelooponentity = 0x80A7,
  SCR_METH_stoprumble = 0x80A8,
  SCR_METH_delete = 0x80A9,
  SCR_METH_setmodel = 0x80AA,
  SCR_METH_laseron = 0x80AB,
  SCR_METH_laseroff = 0x80AC,
  SCR_METH_laseraltviewon = 0x80AD,
  SCR_METH_laseraltviewoff = 0x80AE,
  SCR_METH_thermalvisionon = 0x80AF,
  SCR_METH_thermalvisiononshadowoff = 0x80B0,
  SCR_METH_thermalvisionoff = 0x80B1,
  SCR_METH_thermalvisionfofoverlayon = 0x80B2,
  SCR_METH_thermalvisionfofoverlayoff = 0x80B3,
  SCR_METH_autospotoverlayon = 0x80B4,
  SCR_METH_autospotoverlayoff = 0x80B5,
  SCR_METH_seteyesonuplinkenabled = 0x80B6,
  SCR_METH_setcontents = 0x80B7,
  SCR_METH_makeusable = 0x80B8,
  SCR_METH_makeunusable = 0x80B9,
  SCR_METH_setwhizbyprobabilities = 0x80BA,
  SCR_METH_visionsetnakedforplayer_lerp = 0x80BB,
  SCR_METH_setwaitnode = 0x80BC,
  SCR_METH_returnplayercontrol = 0x80BD,
  SCR_METH_vehphys_starttrack = 0x80BE,
  SCR_METH_vehphys_clearautodisable = 0x80BF,
  SCR_METH_vehicleusealtblendedaudio = 0x80C0,
  SCR_METH_settext = 0x80C1,
  SCR_METH_clearalltextafterhudelem = 0x80C2,
  SCR_METH_setshader = 0x80C3,
  SCR_METH_settargetent = 0x80C4,
  SCR_METH_cleartargetent = 0x80C5,
  SCR_METH_settimer = 0x80C6,
  SCR_METH_settimerup = 0x80C7,
  SCR_METH_settimerstatic = 0x80C8,
  SCR_METH_settenthstimer = 0x80C9,
  SCR_METH_settenthstimerup = 0x80CA,
  SCR_METH_settenthstimerstatic = 0x80CB,
  SCR_METH_setclock = 0x80CC,
  SCR_METH_setclockup = 0x80CD,
  SCR_METH_setvalue = 0x80CE,
  SCR_METH_setwaypoint = 0x80CF,
  SCR_METH_setwaypointedgestyle_rotatingicon = 0x80D0,
  SCR_METH_setcursorhint = 0x80D1,
  SCR_METH_sethintstring = 0x80D2,
  SCR_METH_forceusehinton = 0x80D3,
  SCR_METH_forceusehintoff = 0x80D4,
  SCR_METH_makesoft = 0x80D5,
  SCR_METH_makehard = 0x80D6,
  SCR_METH_willneverchange = 0x80D7,
  SCR_METH_startfiring = 0x80D8,
  SCR_METH_stopfiring = 0x80D9,
  SCR_METH_isfiringturret = 0x80DA,
  SCR_METH_startbarrelspin = 0x80DB,
  SCR_METH_stopbarrelspin = 0x80DC,
  SCR_METH_getbarrelspinrate = 0x80DD,
  SCR_METH_remotecontrolturret = 0x80DE,
  SCR_METH_remotecontrolturretoff = 0x80DF,
  SCR_METH_shootturret = 0x80E0,
  SCR_METH_getturretowner = 0x80E1,
  SCR_METH_enabledeathshield = 0x80E2,
  SCR_METH_nightvisiongogglesforceon = 0x80E3,
  SCR_METH_nightvisiongogglesforceoff = 0x80E4,
  SCR_METH_enableinvulnerability = 0x80E5,
  SCR_METH_disableinvulnerability = 0x80E6,
  SCR_METH_enablebreaching = 0x80E7,
  SCR_METH_disablebreaching = 0x80E8,
  SCR_METH_forceviewmodelanimation = 0x80E9,
  SCR_METH_disableturretdismount = 0x80EA,
  SCR_METH_enableturretdismount = 0x80EB,
  SCR_METH_uploadscore = 0x80EC,
  SCR_METH_uploadtime = 0x80ED,
  SCR_METH_uploadleaderboards = 0x80EE,
  SCR_METH_giveachievement = 0x80EF,
  SCR_METH_hidehud = 0x80F0,
  SCR_METH_showhud = 0x80F1,
  SCR_METH_mountvehicle = 0x80F2,
  SCR_METH_dismountvehicle = 0x80F3,
  SCR_METH_enableslowaim = 0x80F4,
  SCR_METH_disableslowaim = 0x80F5,
  SCR_METH_usehintsinvehicle = 0x80F6,
  SCR_METH_vehicleattackbuttonpressed = 0x80F7,
  SCR_METH_setwhizbyoffset = 0x80F8,
  SCR_METH_setsentryowner = 0x80F9,
  SCR_METH_setsentrycarrier = 0x80FA,
  SCR_METH_setturretminimapvisible = 0x80FB,
  SCR_METH_settargetentity = 0x80FC,
  SCR_METH_snaptotargetentity = 0x80FD,
  SCR_METH_cleartargetentity = 0x80FE,
  SCR_METH_getturrettarget = 0x80FF,
  SCR_METH_setplayerspread = 0x8100,
  SCR_METH_setaispread = 0x8101,
  SCR_METH_setsuppressiontime = 0x8102,
  SCR_METH_setflaggedanimknobrestart = 0x8103,
  SCR_METH_setflaggedanimknoblimitedrestart = 0x8104,
  SCR_METH_setflaggedanimknoball = 0x8105,
  SCR_METH_setflaggedanimknoballrestart = 0x8106,
  SCR_METH_setflaggedanim = 0x8107,
  SCR_METH_setflaggedanimlimited = 0x8108,
  SCR_METH_setflaggedanimrestart = 0x8109,
  SCR_METH_setflaggedanimlimitedrestart = 0x810A,
  SCR_METH_useanimtree = 0x810B,
  SCR_METH_stopuseanimtree = 0x810C,
  SCR_METH_setanimtime = 0x810D,
  SCR_METH_showviewmodel = 0x810E,
  SCR_METH_hideviewmodel = 0x810F,
  SCR_METH_allowstand = 0x8110,
  SCR_METH_allowcrouch = 0x8111,
  SCR_METH_allowprone = 0x8112,
  SCR_METH_allowlean = 0x8113,
  SCR_METH_allowswim = 0x8114,
  SCR_METH_setocclusion = 0x8115,
  SCR_METH_setocclusionfromtable = 0x8116,
  SCR_METH_deactivateocclusion = 0x8117,
  SCR_METH_deactivateallocclusion = 0x8118,
  SCR_METH_isocclusionenabled = 0x8119,
  SCR_METH_setreverbfromtable = 0x811A,
  SCR_METH_setvolmodfromtable = 0x811B,
  SCR_METH_settimescalefactorfromtable = 0x811C,
  SCR_METH_setwhizbyfromtable = 0x811D,
  SCR_METH_seteqfromtable = 0x811E,
  SCR_METH_iseqenabled = 0x811F,
  SCR_METH_seteq = 0x8120,
  SCR_METH_seteqbands = 0x8121,
  SCR_METH_deactivateeq = 0x8122,
  SCR_METH_seteqlerp = 0x8123,
  SCR_METH_islookingat = 0x8124,
  SCR_METH_isthrowinggrenade = 0x8125,
  SCR_METH_isfiring = 0x8126,
  SCR_METH_ismeleeing = 0x8127,
  SCR_METH_setautopickup = 0x8128,
  SCR_METH_allowmelee = 0x8129,
  SCR_METH_allowfire = 0x812A,
  SCR_METH_enablehealthshield = 0x812B,
  SCR_METH_setconvergencetime = 0x812C,
  SCR_METH_setconvergenceheightpercent = 0x812D,
  SCR_METH_setturretteam = 0x812E,
  SCR_METH_maketurretsolid = 0x812F,
  SCR_METH_maketurretoperable = 0x8130,
  SCR_METH_maketurretinoperable = 0x8131,
  SCR_METH_makeentitysentient = 0x8132,
  SCR_METH_freeentitysentient = 0x8133,
  SCR_METH_isindoor = 0x8134,
  SCR_METH_getdroptofloorposition = 0x8135,
  SCR_METH_isbadguy = 0x8136,
  SCR_METH_animscripted = 0x8137,
  SCR_METH_animscriptedthirdperson = 0x8138,
  SCR_METH_animrelative = 0x8139,
  SCR_METH_stopanimscripted = 0x813A,
  SCR_METH_clearanim = 0x813B,
  SCR_METH_setanimknob = 0x813C,
  SCR_METH_setanimknoblimited = 0x813D,
  SCR_METH_setanimknobrestart = 0x813E,
  SCR_METH_setanimknoblimitedrestart = 0x813F,
  SCR_METH_setanimknoball = 0x8140,
  SCR_METH_setanimknoballlimited = 0x8141,
  SCR_METH_setanimknoballrestart = 0x8142,
  SCR_METH_setanimknoballlimitedrestart = 0x8143,
  SCR_METH_setanim = 0x8144,
  SCR_METH_setanimlimited = 0x8145,
  SCR_METH_setanimrestart = 0x8146,
  SCR_METH_setanimlimitedrestart = 0x8147,
  SCR_METH_getanimtime = 0x8148,
  SCR_METH_getanimweight = 0x8149,
  SCR_METH_getanimassettype = 0x814A,
  SCR_METH_setflaggedanimknob = 0x814B,
  SCR_METH_setflaggedanimknoblimited = 0x814C,
  SCR_METH_setturretaccuracy = 0x814D,
  SCR_METH_setrightarc = 0x814E,
  SCR_METH_setleftarc = 0x814F,
  SCR_METH_settoparc = 0x8150,
  SCR_METH_setbottomarc = 0x8151,
  SCR_METH_setautorotationdelay = 0x8152,
  SCR_METH_setdefaultdroppitch = 0x8153,
  SCR_METH_restoredefaultdroppitch = 0x8154,
  SCR_METH_turretfiredisable = 0x8155,
  SCR_METH_getfixednodesafevolume = 0x8156,
  SCR_METH_clearfixednodesafevolume = 0x8157,
  SCR_METH_isingoal = 0x8158,
  SCR_METH_setruntopos = 0x8159,
  SCR_METH_nearnode = 0x815A,
  SCR_METH_nearclaimnode = 0x815B,
  SCR_METH_nearclaimnodeandangle = 0x815C,
  SCR_METH_atdangerousnode = 0x815D,
  SCR_METH_getenemyinfo = 0x815E,
  SCR_METH_clearenemy = 0x815F,
  SCR_METH_setentitytarget = 0x8160,
  SCR_METH_clearentitytarget = 0x8161,
  SCR_METH_setpotentialthreat = 0x8162,
  SCR_METH_clearpotentialthreat = 0x8163,
  SCR_METH_setflashbanged = 0x8164,
  SCR_METH_setengagementmindist = 0x8165,
  SCR_METH_setengagementmaxdist = 0x8166,
  SCR_METH_isknownenemyinradius = 0x8167,
  SCR_METH_isknownenemyinvolume = 0x8168,
  SCR_METH_settalktospecies = 0x8169,
  SCR_METH_laseralton = 0x816A,
  SCR_METH_laseraltoff = 0x816B,
  SCR_METH_invisiblenotsolid = 0x816C,
  SCR_METH_visiblesolid = 0x816D,
  SCR_METH_setdefaultaimlimits = 0x816E,
  SCR_METH_initriotshieldhealth = 0x816F,
  SCR_METH_getenemysqdist = 0x8170,
  SCR_METH_getclosestenemysqdist = 0x8171,
  SCR_METH_setthreatbiasgroup = 0x8172,
  SCR_METH_getthreatbiasgroup = 0x8173,
  SCR_METH_turretfireenable = 0x8174,
  SCR_METH_setturretmodechangewait = 0x8175,
  SCR_METH_usetriggerrequirelookat = 0x8176,
  SCR_METH_getstance = 0x8177,
  SCR_METH_setstance = 0x8178,
  SCR_METH_itemweaponsetammo = 0x8179,
  SCR_METH_getammocount = 0x817A,
  SCR_METH_gettagorigin = 0x817B,
  SCR_METH_gettagangles = 0x817C,
  SCR_METH_shellshock = 0x817D,
  SCR_METH_stunplayer = 0x817E,
  SCR_METH_stopshellshock = 0x817F,
  SCR_METH_fadeoutshellshock = 0x8180,
  SCR_METH_setdepthoffield = 0x8181,
  SCR_METH_setviewmodeldepthoffield = 0x8182,
  SCR_METH_setmotionblurmovescale = 0x8183,
  SCR_METH_pickupgrenade = 0x8184,
  SCR_METH_useturret = 0x8185,
  SCR_METH_stopuseturret = 0x8186,
  SCR_METH_canuseturret = 0x8187,
  SCR_METH_traversemode = 0x8188,
  SCR_METH_animmode = 0x8189,
  SCR_METH_orientmode = 0x818A,
  SCR_METH_getmotionangle = 0x818B,
  SCR_METH_shouldfacemotion = 0x818C,
  SCR_METH_getanglestolikelyenemypath = 0x818D,
  SCR_METH_setturretanim = 0x818E,
  SCR_METH_getturret = 0x818F,
  SCR_METH_getgroundenttype = 0x8190,
  SCR_METH_forcestartnegotiation = 0x8191,
  SCR_METH_setalienjumpcostscale = 0x8192,
  SCR_METH_setalienruncostscale = 0x8193,
  SCR_METH_setalientraversecostscale = 0x8194,
  SCR_METH_animcustom = 0x8195,
  SCR_METH_isinscriptedstate = 0x8196,
  SCR_METH_canattackenemynode = 0x8197,
  SCR_METH_getnegotiationstartnode = 0x8198,
  SCR_METH_getnegotiationendnode = 0x8199,
  SCR_METH_getnegotiationnextnode = 0x819A,
  SCR_METH_getdoorpathnode = 0x819B,
  SCR_METH_comparenodedirtopathdir = 0x819C,
  SCR_METH_checkprone = 0x819D,
  SCR_METH_pushplayer = 0x819E,
  SCR_METH_checkgrenadethrowpos = 0x819F,
  SCR_METH_setgoalnode = 0x81A0,
  SCR_METH_setgoalpos = 0x81A1,
  SCR_METH_setgoalentity = 0x81A2,
  SCR_METH_setgoalvolume = 0x81A3,
  SCR_METH_setgoalvolumeauto = 0x81A4,
  SCR_METH_getgoalvolume = 0x81A5,
  SCR_METH_cleargoalvolume = 0x81A6,
  SCR_METH_setfixednodesafevolume = 0x81A7,
  SCR_METH_setmotionblurturnscale = 0x81A8,
  SCR_METH_setmotionblurzoomscale = 0x81A9,
  SCR_METH_viewkick = 0x81AA,
  SCR_METH_localtoworldcoords = 0x81AB,
  SCR_METH_getentitynumber = 0x81AC,
  SCR_METH_getentityvelocity = 0x81AD,
  SCR_METH_enablegrenadetouchdamage = 0x81AE,
  SCR_METH_disablegrenadetouchdamage = 0x81AF,
  SCR_METH_enableaimassist = 0x81B0,
  SCR_METH_setlookatyawlimits = 0x81B1,
  SCR_METH_stoplookat = 0x81B2,
  SCR_METH_getmuzzlepos = 0x81B3,
  SCR_METH_getmuzzleangle = 0x81B4,
  SCR_METH_getmuzzlesideoffsetpos = 0x81B5,
  SCR_METH_getaimangle = 0x81B6,
  SCR_METH_canshoot = 0x81B7,
  SCR_METH_canshootenemy = 0x81B8,
  SCR_METH_cansee = 0x81B9,
  SCR_METH_seerecently = 0x81BA,
  SCR_METH_lastknowntime = 0x81BB,
  SCR_METH_lastknownpos = 0x81BC,
  SCR_METH_dropweapon = 0x81BD,
  SCR_METH_maymovetopoint = 0x81BE,
  SCR_METH_maymovefrompointtopoint = 0x81BF,
  SCR_METH_teleport = 0x81C0,
  SCR_METH_forceteleport = 0x81C1,
  SCR_METH_safeteleport = 0x81C2,
  SCR_METH_withinapproxpathdist = 0x81C3,
  SCR_METH_ispathdirect = 0x81C4,
  SCR_METH_allowedstances = 0x81C5,
  SCR_METH_isstanceallowed = 0x81C6,
  SCR_METH_issuppressionwaiting = 0x81C7,
  SCR_METH_issuppressed = 0x81C8,
  SCR_METH_ismovesuppressed = 0x81C9,
  SCR_METH_isgrenadepossafe = 0x81CA,
  SCR_METH_checkgrenadethrow = 0x81CB,
  SCR_METH_checkgrenadelaunch = 0x81CC,
  SCR_METH_checkgrenadelaunchpos = 0x81CD,
  SCR_METH_throwgrenade = 0x81CE,
  SCR_METH_disableaimassist = 0x81CF,
  SCR_METH_radiusdamage = 0x81D0,
  SCR_METH_detonate = 0x81D1,
  SCR_METH_damageconetrace = 0x81D2,
  SCR_METH_sightconetrace = 0x81D3,
  SCR_METH_missile_settargetent = 0x81D4,
  SCR_METH_missile_settargetpos = 0x81D5,
  SCR_METH_missile_cleartarget = 0x81D6,
  SCR_METH_missile_setflightmodedirect = 0x81D7,
  SCR_METH_missile_setflightmodetop = 0x81D8,
  SCR_METH_getlightintensity = 0x81D9,
  SCR_METH_setlightintensity = 0x81DA,
  SCR_METH_isragdoll = 0x81DB,
  SCR_METH_setmovespeedscale = 0x81DC,
  SCR_METH_cameralinkto = 0x81DD,
  SCR_METH_cameraunlink = 0x81DE,
  SCR_METH_startcoverarrival = 0x81DF,
  SCR_METH_starttraversearrival = 0x81E0,
  SCR_METH_checkcoverexitposwithpath = 0x81E1,
  SCR_METH_shoot = 0x81E2,
  SCR_METH_shootblank = 0x81E3,
  SCR_METH_melee = 0x81E4,
  SCR_METH_updateplayersightaccuracy = 0x81E5,
  SCR_METH_findshufflecovernode = 0x81E6,
  SCR_METH_findnearbycovernode = 0x81E7,
  SCR_METH_findcovernode = 0x81E8,
  SCR_METH_findbestcovernode = 0x81E9,
  SCR_METH_getcovernode = 0x81EA,
  SCR_METH_usecovernode = 0x81EB,
  SCR_METH_iscovervalidagainstenemy = 0x81EC,
  SCR_METH_reacquirestep = 0x81ED,
  SCR_METH_findreacquiredirectpath = 0x81EE,
  SCR_METH_trimpathtoattack = 0x81EF,
  SCR_METH_reacquiremove = 0x81F0,
  SCR_METH_findreacquireproximatepath = 0x81F1,
  SCR_METH_flagenemyunattackable = 0x81F2,
  SCR_METH_enterprone = 0x81F3,
  SCR_METH_exitprone = 0x81F4,
  SCR_METH_setproneanimnodes = 0x81F5,
  SCR_METH_updateprone = 0x81F6,
  SCR_METH_clearpitchorient = 0x81F7,
  SCR_METH_setlookatanimnodes = 0x81F8,
  SCR_METH_setlookat = 0x81F9,
  SCR_METH_setlookatentity = 0x81FA,
  SCR_METH_controlslinkto = 0x81FB,
  SCR_METH_controlsunlink = 0x81FC,
  SCR_METH_makevehiclesolidcapsule = 0x81FD,
  SCR_METH_teleportentityrelative = 0x81FE,
  SCR_METH_makevehiclesolidsphere = 0x81FF,
  SCR_METH_makevehiclesolid = 0x8200,
  SCR_METH_remotecontrolvehicle = 0x8201,
  SCR_METH_remotecontrolvehicleoff = 0x8202,
  SCR_METH_isfiringvehicleturret = 0x8203,
  SCR_METH_remotecontrolvehicletarget = 0x8204,
  SCR_METH_remotecontrolvehicletargetoff = 0x8205,
  SCR_METH_drivevehicleandcontrolturret = 0x8206,
  SCR_METH_drivevehicleandcontrolturretoff = 0x8207,
  SCR_METH_getplayersetting = 0x8208,
  SCR_METH_getlocalplayerprofiledata = 0x8209,
  SCR_METH_setlocalplayerprofiledata = 0x820A,
  SCR_METH_remotecamerasoundscapeon = 0x820B,
  SCR_METH_remotecamerasoundscapeoff = 0x820C,
  SCR_METH_setmotiontrackervisible = 0x820D,
  SCR_METH_getmotiontrackervisible = 0x820E,
  SCR_METH_worldpointinreticle_circle = 0x820F,
  SCR_METH_worldpointinreticle_rect = 0x8210,
  SCR_METH_getpointinbounds = 0x8211,
  SCR_METH_transfermarkstonewscriptmodel = 0x8212,
  SCR_METH_setwatersheeting = 0x8213,
  SCR_METH_addontoviewmodel = 0x8214,
  SCR_METH_clearviewmodeladdons = 0x8215,
  SCR_METH_setweaponhudiconoverride = 0x8216,
  SCR_METH_getweaponhudiconoverride = 0x8217,
  SCR_METH_setempjammed = 0x8218,
  SCR_METH_playersetexpfog = 0x8219,
  SCR_METH_isitemunlocked = 0x821A,
  SCR_METH_getplayerdata = 0x821B,
  SCR_METH_getrankedplayerdata = 0x821C,
  SCR_METH_getprivateplayerdata = 0x821D,
  SCR_METH_getcoopplayerdata = 0x821E,
  SCR_METH_getcommonplayerdata = 0x821F,
  SCR_METH_vehicleturretcontroloff = 0x8220,
  SCR_METH_isturretready = 0x8221,
  SCR_METH_vehicledriveto = 0x8222,
  SCR_METH_vehicle_dospawn = 0x8223,
  SCR_METH_vehicle_isphysveh = 0x8224,
  SCR_METH_vehphys_crash = 0x8225,
  SCR_METH_vehphys_launch = 0x8226,
  SCR_METH_vehphys_disablecrashing = 0x8227,
  SCR_METH_vehphys_enablecrashing = 0x8228,
  SCR_METH_vehphys_setspeed = 0x8229,
  SCR_METH_vehphys_setconveyorbelt = 0x822A,
  SCR_METH_freehelicopter = 0x822B,
  SCR_METH_playerlinkedturretanglesenable = 0x822C,
  SCR_METH_playerlinkedturretanglesdisable = 0x822D,
  SCR_METH_playersetstreamorigin = 0x822E,
  SCR_METH_playerclearstreamorigin = 0x822F,
  SCR_METH_nightvisionviewon = 0x8230,
  SCR_METH_nightvisionviewoff = 0x8231,
  SCR_METH_painvisionon = 0x8232,
  SCR_METH_painvisionoff = 0x8233,
  SCR_METH_getplayerintelisfound = 0x8234,
  SCR_METH_setplayerintelfound = 0x8235,
  SCR_METH_newpip = 0x8236,
  SCR_METH_sethuddynlight = 0x8237,
  SCR_METH_startscriptedanim = 0x8238,
  SCR_METH_startcoverbehavior = 0x8239,
  SCR_METH_setplayerdata = 0x823A,
  SCR_METH_setrankedplayerdata = 0x823B,
  SCR_METH_setprivateplayerdata = 0x823C,
  SCR_METH_setcoopplayerdata = 0x823D,
  SCR_METH_setcommonplayerdata = 0x823E,
  SCR_METH_getcacplayerdata = 0x823F,
  SCR_METH_trackerupdate = 0x8240,
  SCR_METH_pingplayer = 0x8241,
  SCR_METH_buttonpressed = 0x8242,
  SCR_METH_sayall = 0x8243,
  SCR_METH_sayteam = 0x8244,
  SCR_METH_setspawnweapon = 0x8245,
  SCR_METH_dropitem = 0x8246,
  SCR_METH_dropscavengerbag = 0x8247,
  SCR_METH_setjitterparams = 0x8248,
  SCR_METH_sethoverparams = 0x8249,
  SCR_METH_joltbody = 0x824A,
  SCR_METH_freevehicle = 0x824B,
  SCR_METH_getwheelsurface = 0x824C,
  SCR_METH_getvehicleowner = 0x824D,
  SCR_METH_setvehiclelookattext = 0x824E,
  SCR_METH_setvehicleteam = 0x824F,
  SCR_METH_setneargoalnotifydist = 0x8250,
  SCR_METH_setvehgoalpos = 0x8251,
  SCR_METH_setgoalyaw = 0x8252,
  SCR_METH_cleargoalyaw = 0x8253,
  SCR_METH_settargetyaw = 0x8254,
  SCR_METH_cleartargetyaw = 0x8255,
  SCR_METH_vehicle_helisetai = 0x8256,
  SCR_METH_setturrettargetvec = 0x8257,
  SCR_METH_setturrettargetent = 0x8258,
  SCR_METH_clearturrettarget = 0x8259,
  SCR_METH_vehicle_canturrettargetpoint = 0x825A,
  SCR_METH_setlookatent = 0x825B,
  SCR_METH_clearlookatent = 0x825C,
  SCR_METH_setvehweapon = 0x825D,
  SCR_METH_fireweapon = 0x825E,
  SCR_METH_vehicleturretcontrolon = 0x825F,
  SCR_METH_finishplayerdamage = 0x8260,
  SCR_METH_suicide = 0x8261,
  SCR_METH_closeingamemenu = 0x8262,
  SCR_METH_iprintln = 0x8263,
  SCR_METH_iprintlnbold = 0x8264,
  SCR_METH_spawn = 0x8265,
  SCR_METH_setentertime = 0x8266,
  SCR_METH_cloneplayer = 0x8267,
  SCR_METH_istalking = 0x8268,
  SCR_METH_allowspectateteam = 0x8269,
  SCR_METH_getguid = 0x826A,
  SCR_METH_physicslaunchserver = 0x826B,
  SCR_METH_physicslaunchserveritem = 0x826C,
  SCR_METH_clonebrushmodeltoscriptmodel = 0x826D,
  SCR_METH_scriptmodelplayanim = 0x826E,
  SCR_METH_scriptmodelclearanim = 0x826F,
  SCR_METH_scriptmodelplayanimdeltamotion = 0x8270,
  SCR_METH_vehicle_teleport = 0x8271,
  SCR_METH_attachpath = 0x8272,
  SCR_METH_getattachpos = 0x8273,
  SCR_METH_startpath = 0x8274,
  SCR_METH_setswitchnode = 0x8275,
  SCR_METH_setwaitspeed = 0x8276,
  SCR_METH_vehicle_finishdamage = 0x8277,
  SCR_METH_vehicle_setspeed = 0x8278,
  SCR_METH_vehicle_setspeedimmediate = 0x8279,
  SCR_METH_vehicle_rotateyaw = 0x827A,
  SCR_METH_vehicle_getspeed = 0x827B,
  SCR_METH_vehicle_getvelocity = 0x827C,
  SCR_METH_vehicle_getbodyvelocity = 0x827D,
  SCR_METH_vehicle_getsteering = 0x827E,
  SCR_METH_vehicle_getthrottle = 0x827F,
  SCR_METH_vehicle_turnengineoff = 0x8280,
  SCR_METH_vehicle_turnengineon = 0x8281,
  SCR_METH_vehicle_orientto = 0x8282,
  SCR_METH_getgoalspeedmph = 0x8283,
  SCR_METH_setacceleration = 0x8284,
  SCR_METH_setdeceleration = 0x8285,
  SCR_METH_resumespeed = 0x8286,
  SCR_METH_setyawspeed = 0x8287,
  SCR_METH_setyawspeedbyname = 0x8288,
  SCR_METH_setmaxpitchroll = 0x8289,
  SCR_METH_setairresistance = 0x828A,
  SCR_METH_setturningability = 0x828B,
  SCR_METH_getxuid = 0x828C,
  SCR_METH_getucdidhigh = 0x828D,
  SCR_METH_getucdidlow = 0x828E,
  SCR_METH_getclanidhigh = 0x828F,
  SCR_METH_getclanidlow = 0x8290,
  SCR_METH_ishost = 0x8291,
  SCR_METH_getspectatingplayer = 0x8292,
  SCR_METH_predictstreampos = 0x8293,
  SCR_METH_updatescores = 0x8294,
  SCR_METH_updatedmscores = 0x8295,
  SCR_METH_setrank = 0x8296,
  SCR_METH_setcardtitle = 0x8297,
  SCR_METH_weaponlocknoclearance = 0x8298,
  SCR_METH_visionsyncwithplayer = 0x8299,
  SCR_METH_showhudsplash = 0x829A,
  SCR_METH_setperk = 0x829B,
  SCR_METH_hasperk = 0x829C,
  SCR_METH_clearperks = 0x829D,
  SCR_METH_unsetperk = 0x829E,
  SCR_METH_registerparty = 0x829F,
  SCR_METH_getfireteammembers = 0x82A0,
  SCR_METH_noclip = 0x82A1,
  SCR_METH_ufo = 0x82A2,
  SCR_METH_moveto = 0x82A3,
  SCR_METH_movex = 0x82A4,
  SCR_METH_movey = 0x82A5,
  SCR_METH_movez = 0x82A6,
  SCR_METH_movegravity = 0x82A7,
  SCR_METH_moveslide = 0x82A8,
  SCR_METH_stopmoveslide = 0x82A9,
  SCR_METH_rotateto = 0x82AA,
  SCR_METH_rotatepitch = 0x82AB,
  SCR_METH_rotateyaw = 0x82AC,
  SCR_METH_rotateroll = 0x82AD,
  SCR_METH_addpitch = 0x82AE,
  SCR_METH_addyaw = 0x82AF,
  SCR_METH_addroll = 0x82B0,
  SCR_METH_vibrate = 0x82B1,
  SCR_METH_rotatevelocity = 0x82B2,
  SCR_METH_solid = 0x82B3,
  SCR_METH_notsolid = 0x82B4,
  SCR_METH_setcandamage = 0x82B5,
  SCR_METH_setcanradiusdamage = 0x82B6,
  SCR_METH_physicslaunchclient = 0x82B7,
  SCR_METH_setcardicon = 0x82B8,
  SCR_METH_setcardnameplate = 0x82B9,
  SCR_METH_setcarddisplayslot = 0x82BA,
  SCR_METH_kc_regweaponforfxremoval = 0x82BB,
  SCR_METH_laststandrevive = 0x82BC,
  SCR_METH_setspectatedefaults = 0x82BD,
  SCR_METH_getthirdpersoncrosshairoffset = 0x82BE,
  SCR_METH_disableweaponpickup = 0x82BF,
  SCR_METH_enableweaponpickup = 0x82C0,
  SCR_METH_issplitscreenplayer = 0x82C1,
  SCR_METH_getweaponslistoffhands = 0x82C2,
  SCR_METH_getweaponslistitems = 0x82C3,
  SCR_METH_getweaponslistexclusives = 0x82C4,
  SCR_METH_getweaponslist = 0x82C5,
  SCR_METH_canplayerplacesentry = 0x82C6,
  SCR_METH_canplayerplacetank = 0x82C7,
  SCR_METH_visionsetnakedforplayer = 0x82C8,
  SCR_METH_visionsetnightforplayer = 0x82C9,
  SCR_METH_visionsetmissilecamforplayer = 0x82CA,
  SCR_METH_visionsetthermalforplayer = 0x82CB,
  SCR_METH_visionsetpainforplayer = 0x82CC,
  SCR_METH_setblurforplayer = 0x82CD,
  SCR_METH_getplayerweaponmodel = 0x82CE,
  SCR_METH_getplayerknifemodel = 0x82CF,
  SCR_METH_updateentitywithweapons = 0x82D0,
  SCR_METH_notifyonplayercommand = 0x82D1,
  SCR_METH_canmantle = 0x82D2,
  SCR_METH_forcemantle = 0x82D3,
  SCR_METH_ismantling = 0x82D4,
  SCR_METH_playfx = 0x82D5,
  SCR_METH_player_recoilscaleon = 0x82D6,
  SCR_METH_player_recoilscaleoff = 0x82D7,
  SCR_METH_weaponlockstart = 0x82D8,
  SCR_METH_weaponlockfinalize = 0x82D9,
  SCR_METH_weaponlockfree = 0x82DA,
  SCR_METH_weaponlocktargettooclose = 0x82DB,
  SCR_METH_issplitscreenplayerprimary = 0x82DC,
  SCR_METH_markforeyeson = 0x82DD,
  SCR_METH_issighted = 0x82DE,
  SCR_METH_getsightedplayers = 0x82DF,
  SCR_METH_getplayerssightingme = 0x82E0,
  SCR_METH_getviewmodel = 0x82E1,
  SCR_METH_fragbuttonpressed = 0x82E2,
  SCR_METH_secondaryoffhandbuttonpressed = 0x82E3,
  SCR_METH_getcurrentweaponclipammo = 0x82E4,
  SCR_METH_setvelocity = 0x82E5,
  SCR_METH_getplayerviewheight = 0x82E6,
  SCR_METH_getnormalizedmovement = 0x82E7,
  SCR_METH_setchannelvolumes = 0x82E8,
  SCR_METH_deactivatechannelvolumes = 0x82E9,
  SCR_METH_playlocalsound = 0x82EA,
  SCR_METH_stoplocalsound = 0x82EB,
  SCR_METH_setweaponammoclip = 0x82EC,
  SCR_METH_setweaponammostock = 0x82ED,
  SCR_METH_getweaponammoclip = 0x82EE,
  SCR_METH_getweaponammostock = 0x82EF,
  SCR_METH_anyammoforweaponmodes = 0x82F0,
  SCR_METH_setclientomnvar = 0x82F1,
  SCR_METH_setclientdvar = 0x82F2,
  SCR_METH_setclientdvars = 0x82F3,
  SCR_METH_setclientspawnsighttraces = 0x82F4,
  SCR_METH_clientspawnsighttracepassed = 0x82F5,
  SCR_METH_allowads = 0x82F6,
  SCR_METH_allowjump = 0x82F7,
  SCR_METH_allowsprint = 0x82F8,
  SCR_METH_setspreadoverride = 0x82F9,
  SCR_METH_resetspreadoverride = 0x82FA,
  SCR_METH_setaimspreadmovementscale = 0x82FB,
  SCR_METH_setactionslot = 0x82FC,
  SCR_METH_setviewkickscale = 0x82FD,
  SCR_METH_getviewkickscale = 0x82FE,
  SCR_METH_getweaponslistall = 0x82FF,
  SCR_METH_getweaponslistprimaries = 0x8300,
  SCR_METH_getnormalizedcameramovement = 0x8301,
  SCR_METH_giveweapon = 0x8302,
  SCR_METH_takeweapon = 0x8303,
  SCR_METH_takeallweapons = 0x8304,
  SCR_METH_getcurrentweapon = 0x8305,
  SCR_METH_getcurrentprimaryweapon = 0x8306,
  SCR_METH_getcurrentoffhand = 0x8307,
  SCR_METH_hasweapon = 0x8308,
  SCR_METH_switchtoweapon = 0x8309,
  SCR_METH_switchtoweaponimmediate = 0x830A,
  SCR_METH_switchtooffhand = 0x830B,
  SCR_METH_setoffhandsecondaryclass = 0x830C,
  SCR_METH_getoffhandsecondaryclass = 0x830D,
  SCR_METH_beginlocationselection = 0x830E,
  SCR_METH_endlocationselection = 0x830F,
  SCR_METH_disableweapons = 0x8310,
  SCR_METH_enableweapons = 0x8311,
  SCR_METH_disableoffhandweapons = 0x8312,
  SCR_METH_enableoffhandweapons = 0x8313,
  SCR_METH_disableweaponswitch = 0x8314,
  SCR_METH_enableweaponswitch = 0x8315,
  SCR_METH_openpopupmenu = 0x8316,
  SCR_METH_openpopupmenunomouse = 0x8317,
  SCR_METH_closepopupmenu = 0x8318,
  SCR_METH_openmenu = 0x8319,
  SCR_METH_closemenu = 0x831A,
  SCR_METH_savematchrulestohistory = 0x831B,
  SCR_METH_freezecontrols = 0x831C,
  SCR_METH_disableusability = 0x831D,
  SCR_METH_enableusability = 0x831E,
  SCR_METH_setwhizbyspreads = 0x831F,
  SCR_METH_setwhizbyradii = 0x8320,
  SCR_METH_setreverb = 0x8321,
  SCR_METH_deactivatereverb = 0x8322,
  SCR_METH_setvolmod = 0x8323,
  SCR_METH_setchannelvolume = 0x8324,
  SCR_METH_givestartammo = 0x8325,
  SCR_METH_givemaxammo = 0x8326,
  SCR_METH_getfractionstartammo = 0x8327,
  SCR_METH_getfractionmaxammo = 0x8328,
  SCR_METH_isdualwielding = 0x8329,
  SCR_METH_isreloading = 0x832A,
  SCR_METH_isswitchingweapon = 0x832B,
  SCR_METH_setorigin = 0x832C,
  SCR_METH_getvelocity = 0x832D,
  SCR_METH_setplayerangles = 0x832E,
  SCR_METH_getplayerangles = 0x832F,
  SCR_METH_usebuttonpressed = 0x8330,
  SCR_METH_attackbuttonpressed = 0x8331,
  SCR_METH_adsbuttonpressed = 0x8332,
  SCR_METH_meleebuttonpressed = 0x8333,
  SCR_METH_playerads = 0x8334,
  SCR_METH_isonground = 0x8335,
  SCR_METH_isusingturret = 0x8336,
  SCR_METH_setviewmodel = 0x8337,
  SCR_METH_setoffhandprimaryclass = 0x8338,
  SCR_METH_getoffhandprimaryclass = 0x8339,
  SCR_METH_startac130 = 0x833A,
  SCR_METH_stopac130 = 0x833B,
  SCR_METH_enablemousesteer = 0x833C,
  SCR_METH_setscriptmoverkillcam = 0x833D,
  SCR_METH_usinggamepad = 0x833E,
  SCR_METH_forcethirdpersonwhenfollowing = 0x833F,
  SCR_METH_disableforcethirdpersonwhenfollowing = 0x8340,
  SCR_METH_botsetflag = 0x8341,
  SCR_METH_botsetstance = 0x8342,
  SCR_METH_botsetscriptmove = 0x8343,
  SCR_METH_botsetscriptgoal = 0x8344,
  SCR_METH_botsetscriptgoalnode = 0x8345,
  SCR_METH_botclearscriptgoal = 0x8346,
  SCR_METH_botsetscriptenemy = 0x8347,
  SCR_METH_botclearscriptenemy = 0x8348,
  SCR_METH_botsetattacker = 0x8349,
  SCR_METH_botgetscriptgoal = 0x834A,
  SCR_METH_botgetscriptgoalradius = 0x834B,
  SCR_METH_botgetscriptgoalyaw = 0x834C,
  SCR_METH_botgetscriptgoaltype = 0x834D,
  SCR_METH_botgetentrancepoint = 0x834E,
  SCR_METH_botgetworldsize = 0x834F,
  SCR_METH_botnodeavailable = 0x8350,
  SCR_METH_botfindnoderandom = 0x8351,
  SCR_METH_botmemoryevent = 0x8352,
  SCR_METH_botmemoryselectpos = 0x8353,
  SCR_METH_botnodepick = 0x8354,
  SCR_METH_bothasscriptgoal = 0x8355,
  SCR_METH_botgetpersonality = 0x8356,
  SCR_METH_botthrowgrenade = 0x8357,
  SCR_METH_botgetmemoryevents = 0x8358,
  SCR_METH_botsetpersonality = 0x8359,
  SCR_METH_botsetdifficulty = 0x835A,
  SCR_METH_botgetdifficulty = 0x835B,
  SCR_METH_botgetworldclosestedge = 0x835C,
  SCR_METH_botlookatpoint = 0x835D,
  SCR_METH_botpredictseepoint = 0x835E,
  SCR_METH_botcanseeentity = 0x835F,
  SCR_METH_botgetnodesonpath = 0x8360,
  SCR_METH_botnodepickmultiple = 0x8361,
  SCR_METH_botgetnearestnode = 0x8362,
  SCR_METH_botgetfovdot = 0x8363,
  SCR_METH_botsetawareness = 0x8364,
  SCR_METH_botpursuingscriptgoal = 0x8365,
  SCR_METH_botgetscriptgoalnode = 0x8366,
  SCR_METH_botgetimperfectenemyinfo = 0x8367,
  SCR_METH_botflagmemoryevents = 0x8368,
  SCR_METH_botsetpathingstyle = 0x8369,
  SCR_METH_botsetdifficultysetting = 0x836A,
  SCR_METH_botgetdifficultysetting = 0x836B,
  SCR_METH_botgetpathdist = 0x836C,
  SCR_METH_botisrandomized = 0x836D,
  SCR_METH_botpressbutton = 0x836E,
  SCR_METH_botclearbutton = 0x836F,
  SCR_METH_botnodescoremultiple = 0x8370,
  SCR_METH_getnodenumber = 0x8371,
  SCR_METH_setclientowner = 0x8372,
  SCR_METH_setotherent = 0x8373,
  SCR_METH_playercommandbot = 0x8374,
  SCR_METH_setaisightlinevisible = 0x8375,
  SCR_METH_setentityowner = 0x8376,
  SCR_METH_nodeisdisconnected = 0x8377,
  SCR_METH_getnearestnode = 0x8378,
  SCR_METH_makeentitynomeleetarget = 0x8379,
  SCR_METH_isagent = 0x837A,
  SCR_METH_spawnagent = 0x837B,
  SCR_METH_finishagentdamage = 0x837C,
  SCR_METH_setagentattacker = 0x837D,
  SCR_METH_cloneagent = 0x837E,
  SCR_METH_agentcanseesentient = 0x837F,
  SCR_METH_scragentsetwaypoint = 0x8380,
  SCR_METH_scragentsetgoalpos = 0x8381,
  SCR_METH_scragentgetgoalpos = 0x8382,
  SCR_METH_scragentsetgoalnode = 0x8383,
  SCR_METH_scragentsetgoalentity = 0x8384,
  SCR_METH_scragentsetgoalradius = 0x8385,
  SCR_METH_scragentsetanimscale = 0x8386,
  SCR_METH_scragentsetorientmode = 0x8387,
  SCR_METH_scragentsetanimmode = 0x8388,
  SCR_METH_scragentsetphysicsmode = 0x8389,
  SCR_METH_scragentsetclipmode = 0x838A,
  SCR_METH_scragentsetmaxturnspeed = 0x838B,
  SCR_METH_scragentgetmaxturnspeed = 0x838C,
  SCR_METH_scragentbeginmelee = 0x838D,
  SCR_METH_scragentsetscripted = 0x838E,
  SCR_METH_scragentdotrajectory = 0x838F,
  SCR_METH_scragentdoanimlerp = 0x8390,
  SCR_METH_scragentsetviewheight = 0x8391,
  SCR_METH_scragentclaimnode = 0x8392,
  SCR_METH_scragentrelinquishclaimednode = 0x8393,
  SCR_METH_setdoghandler = 0x8394,
  SCR_METH_setdogcommand = 0x8395,
  SCR_METH_setdogattackradius = 0x8396,
  SCR_METH_isdogfollowinghandler = 0x8397,
  SCR_METH_setdogmaxdrivespeed = 0x8398,
  SCR_METH_isdogbeingdriven = 0x8399,
  SCR_METH_setdogautoattackwhendriven = 0x839A,
  SCR_METH_getdogattackbeginnode = 0x839B,
  SCR_METH_setanimclass = 0x839C,
  SCR_METH_enableanimstate = 0x839D,
  SCR_METH_setanimstate = 0x839E,
  SCR_METH_getanimentry = 0x839F,
  SCR_METH_getanimentryname = 0x83A0,
  SCR_METH_getanimentryalias = 0x83A1,
  SCR_METH_getanimentrycount = 0x83A2,
  SCR_METH_pushplayervector = 0x83A3,
  SCR_METH_issprinting = 0x83A4,
  SCR_METH_playerlinkeduselinkedvelocity = 0x83A5,
  SCR_METH_shootstopsound = 0x83A6,
  SCR_METH_setclothtype = 0x83A7,
  SCR_METH_getclothmovesound = 0x83A8,
  SCR_METH_getequipmovesound = 0x83A9,
  SCR_METH_jumpbuttonpressed = 0x83AA,
  SCR_METH_rotateby = 0x83AB,
  SCR_METH_getlookaheaddir = 0x83AC,
  SCR_METH_getpathgoalpos = 0x83AD,
  SCR_METH_setrocketcorpse = 0x83AE,
  SCR_METH_setcorpsefalling = 0x83AF,
  SCR_METH_setsurfacetype = 0x83B0,
  SCR_METH_aiphysicstrace = 0x83B1,
  SCR_METH_aiphysicstracepassed = 0x83B2,
  SCR_METH_setdevtext = 0x83B3,
  SCR_METH_forcemovingplatformentity = 0x83B4,
  SCR_METH_setmovingplatformtrigger = 0x83B5,
  SCR_METH_visionsetstage = 0x83B6,
  SCR_METH_linkwaypointtotargetwithoffset = 0x83B7,
  SCR_METH_getlinkedparent = 0x83B8,
  SCR_METH_getmovingplatformparent = 0x83B9,
  SCR_METH_setnameplatematerial = 0x83BA,
  SCR_METH_retargetscriptmodellighting = 0x83BB,
  SCR_METH_setmantlesoundflavor = 0x83BC,
  SCR_METH_clearclienttriggeraudiozone = 0x83BD,
  SCR_METH_setclienttriggeraudiozone = 0x83BE,
  SCR_METH_makevehiclenotcollidewithplayers = 0x83BF,
  SCR_METH_getbobrate = 0x83C0,
  SCR_METH_setbobrate = 0x83C1,
  SCR_METH_setscriptablepartstate = 0x83C2,
  SCR_METH_stopsliding = 0x83C3,
  SCR_METH_cancelrocketcorpse = 0x83C4,
  SCR_METH_setdronegoalpos = 0x83C5,
  SCR_METH_hudoutlineenable = 0x83C6,
  SCR_METH_hudoutlinedisable = 0x83C7,
  SCR_METH_motionblurhqenable = 0x83C8,
  SCR_METH_motionblurhqdisable = 0x83C9,
  SCR_METH_screenshakeonentity = 0x83CA,
  SCR_METH_setpitchorient = 0x83CB,
  SCR_METH_worldpointtoscreenpos = 0x83CC,
  SCR_METH_linktoplayerviewignoreparentrot = 0x83CD,
  SCR_METH_shouldplaymeleedeathanim = 0x83CE,
  SCR_METH_botfirstavailablegrenade = 0x83CF,
  SCR_METH_visionsetwaterforplayer = 0x83D0,
  SCR_METH_setwatersurfacetransitionfx = 0x83D1,
  SCR_METH_linktoplayerviewfollowwatersurface = 0x83D2,
  SCR_METH_linktoplayerviewattachwatersurfacetransitioneffects = 0x83D3,
  SCR_METH_playersetwaterfog = 0x83D4,
  SCR_METH_emissiveblend = 0x83D5,
  SCR_METH_enableforceviewmodeldof = 0x83D6,
  SCR_METH_disableforceviewmodeldof = 0x83D7,
  SCR_METH_getcustomizationbody = 0x83D8,
  SCR_METH_getcustomizationhead = 0x83D9,
  SCR_METH_getcustomizationviewmodel = 0x83DA,
  SCR_METH_setviewmodeldepth = 0x83DB,
  SCR_METH_isenemyaware = 0x83DC,
  SCR_METH_hasenemybeenseen = 0x83DD,
  SCR_METH_physicssetmaxlinvel = 0x83DE,
  SCR_METH_physicssetmaxangvel = 0x83DF,
  SCR_METH_physicsgetlinvel = 0x83E0,
  SCR_METH_physicsgetlinspeed = 0x83E1,
  SCR_METH_physicsgetangvel = 0x83E2,
  SCR_METH_physicsgetangspeed = 0x83E3,
  SCR_METH_disablemissileboosting = 0x83E4,
  SCR_METH_enablemissileboosting = 0x83E5,
  SCR_METH_canspawntestclient = 0x83E6,
  SCR_METH_spawntestclient = 0x83E7,
  SCR_METH_loadcustomizationplayerview = 0x83E8,
  SCR_METH_setgrenadethrowscale = 0x83E9,
  SCR_METH_setgrenadecookscale = 0x83EA,
  SCR_METH_setplanesplineid = 0x83EB,
  SCR_METH_hudoutlineenableforclient = 0x83EC,
  SCR_METH_hudoutlinedisableforclient = 0x83ED,
  SCR_METH_hudoutlineenableforclients = 0x83EE,
  SCR_METH_hudoutlinedisableforclients = 0x83EF,
  SCR_METH_turretsetbarrelspinenabled = 0x83F0,
  SCR_METH_hasloadedcustomizationplayerview = 0x83F1,
  SCR_METH_setclienttriggeraudiozonelerp = 0x83F2,
  SCR_METH_setclienttriggeraudiozonepartial = 0x83F3,
  SCR_METH_scragentdoanimrelative = 0x83F4,
  SCR_METH_rotatetolinked = 0x83F5,
  SCR_METH_rotatebylinked = 0x83F6,
  SCR_METH_setlinkedangles = 0x83F7,
  SCR_METH_getcorpseentity = 0x83F8,
  SCR_METH_removefrommovingplatformsystem = 0x83F9,
  SCR_METH_logmatchdatalife = 0x83FA,
  SCR_METH_logmatchdatadeath = 0x83FB,
  SCR_METH_queuedialogforplayer = 0x83FC,
  SCR_METH_setmlgcameradefaults = 0x83FD,
  SCR_METH_ismlgspectator = 0x83FE,
  SCR_METH_disableautoreload = 0x83FF,
  SCR_METH_enableautoreload = 0x8400,
  SCR_METH_issprintsliding = 0x8401,
  SCR_METH_getlinkedchildren = 0x8402,
  SCR_METH_botpredictenemycampspots = 0x8403,
  SCR_METH_playsoundonmovingent = 0x8404,
  SCR_METH_cancelmantle = 0x8405,
  SCR_METH_hasfemalecustomizationmodel = 0x8406,
  SCR_METH_setscriptabledamageowner = 0x8407,
  SCR_METH_setfxkilldefondelete = 0x8408,
  SCR_METH_getdogavoident = 0x8409,
  SCR_METH_enabledogavoidance = 0x840A,
  SCR_METH_forcedeathfall = 0x840B,
  SCR_METH_gethybridscopestate = 0x840C,
  SCR_METH_sethybridscopestate = 0x840D,
  SCR_METH_getvieworigin = 0x840E,
  SCR_METH_setweaponmodelvariant = 0x840F,
  SCR_METH_ridevehicle = 0x8410,
  SCR_METH_stopridingvehicle = 0x8411,
  SCR_METH_getmantlesound = 0x8412,
  SCR_METH_autoboltmissileeffects = 0x8413,
  SCR_METH_disablemissilestick = 0x8414,
  SCR_METH_enablemissilestick = 0x8415,
  SCR_METH_setmissileminimapvisible = 0x8416,
  SCR_METH_isoffhandweaponreadytothrow = 0x8417,
  SCR_METH_isleaning = 0x8418,
  SCR_METH_makecollidewithitemclip = 0x8419,
  SCR_METH_ismovementfromgamepad = 0x841A,
  SCR_METH_visionsetpostapplyforplayer = 0x841B,
  SCR_METH_setcommonplayerdatareservedint = 0x841C,
  SCR_METH_getclanwarsbonus = 0x841D,
  SCR_METH_getrankedplayerdatareservedint = 0x841E,
  SCR_METH_setrankedplayerdatareservedint = 0x841F,
  SCR_METH_setignorefoliagesightingme = 0x8420,
  SCR_METH_scragentusemodelcollisionbounds = 0x8421,
  SCR_METH_setmlgspectator = 0x8422,
  SCR_METH_getmlgspectatorteam = 0x8423,
  SCR_METH_getcommonplayerdatareservedint = 0x8424,
  SCR_METH_getcoopplayerdatareservedint = 0x8425,
  SCR_METH_setcoopplayerdatareservedint = 0x8426,
  SCR_METH_getjointype = 0x8427,
  SCR_METH_scragentsetwallruncost = 0x8428,
  SCR_METH_alienscheckisitempurchased = 0x8429,
  SCR_METH_END = 0x842A,
  SCR_METH_END_PREV = 0x8429,
};

/* 576 */
enum $9C122730CDD5B3A26E00534D33DB1490
{
  BUILTIN_ANY = 0x0,
  BUILTIN_DEVELOPER_ONLY = 0x1,
};

/* 577 */
enum $219904913BC1E6DB920C78C8CC0BD8F1
{
  FL_GODMODE = 0x1,
  FL_DEMI_GODMODE = 0x2,
  FL_NOTARGET = 0x4,
  FL_NO_KNOCKBACK = 0x8,
  FL_NO_RADIUS_DAMAGE = 0x10,
  FL_SUPPORTS_LINKTO = 0x20,
  FL_NO_AUTO_ANIM_UPDATE = 0x40,
  FL_GRENADE_TOUCH_DAMAGE = 0x80,
  FL_STABLE_MISSILES = 0x100,
  FL_REPEAT_ANIM_UPDATE = 0x200,
  FL_VEHICLE_TARGET = 0x400,
  FL_GROUND_ENT = 0x800,
  FL_CURSOR_HINT = 0x1000,
  FL_MISSILE_ATTRACTOR_OR_REPULSOR = 0x2000,
  FL_WEAPON_BEING_GRABBED = 0x4000,
  FL_DELETE = 0x8000,
  FL_BOUNCE = 0x10000,
  FL_MOVER_SLIDE = 0x20000,
  FL_MOVING = 0x40000,
  FL_DONT_AUTOBOLT_MISSILE_EFFECTS = 0x80000,
  FL_DISABLE_MISSILE_STICK = 0x100000,
  FL_NO_MELEE_TARGET = 0x2000000,
  FL_DYNAMICPATH = 0x8000000,
  FL_AUTO_BLOCKPATHS = 0x10000000,
  FL_OBSTACLE = 0x20000000,
  FL_BADPLACE_VOLUME = 0x80000000,
};

/* 578 */
enum fieldtype_t
{
  F_INT = 0x0,
  F_SHORT = 0x1,
  F_USHORT = 0x2,
  F_BYTE = 0x3,
  F_FLOAT = 0x4,
  F_CSTRING = 0x5,
  F_STRING = 0x6,
  F_VECTOR = 0x7,
  F_ENTITY = 0x8,
  F_ENTHANDLE = 0x9,
  F_SENTIENT = 0xA,
  F_SENTIENTHANDLE = 0xB,
  F_CLIENT = 0xC,
  F_PATHNODE = 0xD,
  F_ANGLES_YAW = 0xE,
  F_OBJECT = 0xF,
  F_MODEL = 0x10,
};

/* 579 */
enum $1A19276F3555F3F33E31AD6D91AAE5EC
{
  ENTFIELD_ENTITY = 0x0,
  ENTFIELD_SENTIENT = 0x2000,
  ENTFIELD_ACTOR = 0x4000,
  ENTFIELD_CLIENT = 0x6000,
  ENTFIELD_VEHICLE = 0x8000,
  ENTFIELD_AGENT = 0xA000,
  ENTFIELD_MASK = 0xE000,
};

/* 580 */
enum VehiclePathNotifyMode
{
  VEH_PATH_NOTIFY_SCRIPT = 0x0,
};

/* 581 */
enum CompassType
{
  COMPASS_TYPE_PARTIAL = 0x0,
  COMPASS_TYPE_FULL = 0x1,
};

/* 582 */
enum VehicleEngineState
{
  VEH_ENGINE_STATE_OFF = 0x0,
  VEH_ENGINE_STATE_STARTUP = 0x1,
  VEH_ENGINE_STATE_IDLE = 0x2,
  VEH_ENGINE_STATE_RAMPUP = 0x3,
  VEH_ENGINE_STATE_SUSTAIN = 0x4,
  VEH_ENGINE_STATE_RAMPDOWN = 0x5,
};

/* 583 */
enum nodeType
{
  NODE_ERROR = 0x0,
  NODE_PATHNODE = 0x1,
  NODE_COVER_STAND = 0x2,
  NODE_COVER_CROUCH = 0x3,
  NODE_COVER_CROUCH_WINDOW = 0x4,
  NODE_COVER_PRONE = 0x5,
  NODE_COVER_RIGHT = 0x6,
  NODE_COVER_LEFT = 0x7,
  NODE_COVER_MULTI = 0x8,
  NODE_AMBUSH = 0x9,
  NODE_EXPOSED = 0xA,
  NODE_CONCEALMENT_STAND = 0xB,
  NODE_CONCEALMENT_CROUCH = 0xC,
  NODE_CONCEALMENT_PRONE = 0xD,
  NODE_DOOR = 0xE,
  NODE_DOOR_INTERIOR = 0xF,
  NODE_SCRIPTED = 0x10,
  NODE_NEGOTIATION_BEGIN = 0x11,
  NODE_NEGOTIATION_END = 0x12,
  NODE_TURRET = 0x13,
  NODE_GUARD = 0x14,
  NODE_PATHNODE_3D = 0x15,
  NODE_COVER_UP_3D = 0x16,
  NODE_COVER_RIGHT_3D = 0x17,
  NODE_COVER_LEFT_3D = 0x18,
  NODE_EXPOSED_3D = 0x19,
  NODE_SCRIPTED_3D = 0x1A,
  NODE_NEGOTIATION_BEGIN_3D = 0x1B,
  NODE_NEGOTIATION_END_3D = 0x1C,
  NODE_JUMP = 0x1D,
  NODE_JUMP_ATTACK = 0x1E,
  NODE_NUMTYPES = 0x1F,
  NODE_DONTLINK = 0x1F,
};

/* 584 */
enum $717F541B193E243FDFFF8B32641F70F1
{
  PNF_DONTLINK = 0x1,
  PNF_INDOORTRANSITION = 0x2,
  PNF_DONTSTAND = 0x4,
  PNF_DONTCROUCH = 0x8,
  PNF_DONTPRONE = 0x10,
  PNF_CHOKEPOINT = 0x20,
  PNF_ALT_BOUNDS = 0x40,
  PNF_PRIORITY = 0x40,
  PNF_IDLE = 0x80,
  PSF_ZONE_ISLAND = 0x100,
  PNF_COVER_PEEKOVER = 0x200,
  PNF_COVER_PEEKLEFT = 0x400,
  PNF_COVER_PEEKRIGHT = 0x800,
  PNF_LINKSTOCHOKE = 0x1000,
  PNF_INDOOR = 0x2000,
  PNF_ERROR = 0x4000,
  PNF_ANGLEVALID = 0x8000,
  PNF_CANNOTBEUSEDBY_HUMANS = 0x10000,
  PNF_CANNOTBEUSEDBY_DOGS = 0x20000,
  PNF_GLASS_LINK = 0x40000,
  PNF_NO_ENTITY_DISCONNECT = 0x80000,
};

/* 585 */
enum path_exposure_e
{
  PATH_EXPOSE_STAND = 0x0,
  PATH_EXPOSE_CROUCH = 0x1,
  PATH_EXPOSE_PRONE = 0x2,
  PATH_EXPOSE_TRAFFIC = 0x3,
  PATH_EXPOSE_MAX = 0x4,
};

/* 586 */
enum dyn_state_buffer_e
{
  DSB_VIS = 0x0,
  DSB_NOPEEKVIS = 0x1,
  DSB_EXPOSURE = 0x2,
  DSB_COUNT = 0x3,
};

/* 587 */
enum ai_stance_e
{
  STANCE_BAD = 0x0,
  STANCE_STAND = 0x1,
  STANCE_CROUCH = 0x2,
  STANCE_PRONE = 0x4,
  STANCE_ANY = 0x7,
};

/* 588 */
enum nearestNodeHeightCheck
{
  NEAREST_NODE_DO_HEIGHT_CHECK = 0x0,
  NEAREST_NODE_DONT_DO_HEIGHT_CHECK = 0x1,
};

/* 589 */
enum PathNodeErrorCode
{
  PNERR_NONE = 0x0,
  PNERR_INSOLID = 0x1,
  PNERR_FLOATING = 0x2,
  PNERR_NOLINK = 0x3,
  PNERR_DUPLICATE = 0x4,
  PNERR_NOSTANCE = 0x5,
  PNERR_INVALIDDOOR = 0x6,
  PNERR_NOANGLES = 0x7,
  PNERR_BADPLACEMENT = 0x8,
  NUM_PATH_NODE_ERRORS = 0x9,
};

/* 590 */
enum $752FF802448D94C5F325EFB753F2B23C
{
  CULL_OUT = 0x0,
  CULL_CALC_POSE = 0x1,
  CULL_CALC_SKIN = 0x2,
};

/* 591 */
enum CEntVehicleInfoBoneUsage
{
  CENT_VEHICLE_INFO_BONE_USAGE_WHEELS = 0x0,
  CENT_VEHICLE_INFO_BONE_USAGE_ROTORS = 0x1,
};

/* 592 */
enum GamepadVirtualAxis
{
  GPAD_VIRTAXIS_SIDE = 0x0,
  GPAD_VIRTAXIS_FORWARD = 0x1,
  GPAD_VIRTAXIS_UP = 0x2,
  GPAD_VIRTAXIS_YAW = 0x3,
  GPAD_VIRTAXIS_PITCH = 0x4,
  GPAD_VIRTAXIS_ATTACK = 0x5,
  GPAD_VIRTAXIS_COUNT = 0x6,
  GPAD_VIRTAXIS_NONE = 0xFFFFFFFF,
};

/* 593 */
enum VehCamMode
{
  VEHCAM_MODE_1ST_PERSON = 0x0,
  VEHCAM_MODE_3RD_PERSON = 0x1,
  VEHCAM_MODE_COUNT = 0x2,
};

/* 594 */
enum ExplosionType
{
  EXPLOSION_TYPE_DEFAULT = 0x0,
  EXPLOSION_TYPE_TROPHY = 0x1,
};

/* 595 */
enum $9B94FB67DFE5FD8D5F4161BFB17650A5
{
  SCR_SYS_GAME = 0x1,
};

/* 596 */
enum DAMAGE_FLAGS
{
  DAMAGE_NOFLAG = 0x0,
  DAMAGE_RADIUS = 0x1,
  DAMAGE_NO_ARMOR = 0x2,
  DAMAGE_NO_KNOCKBACK = 0x4,
  DAMAGE_PENETRATION = 0x8,
  DAMAGE_STUN = 0x10,
  DAMAGE_SHIELD_EXPLOSIVE_IMPACT = 0x20,
  DAMAGE_SHIELD_EXPLOSIVE_IMPACT_HUGE = 0x40,
  DAMAGE_SHIELD_EXPLOSIVE_SPLASH = 0x80,
};

/* 597 */
enum saveFieldtype_t
{
  SF_NONE = 0x0,
  SF_STRING = 0x1,
  SF_MODEL = 0x2,
  SF_ENTITY = 0x3,
  SF_ENTHANDLE = 0x4,
  SF_CLIENT = 0x5,
  SF_AGENT = 0x6,
  SF_VEHICLE = 0x7,
  SF_TURRET = 0x8,
  SF_THREAD = 0x9,
  SF_PHYS_OBJ = 0xA,
  SF_SENTIENT = 0xB,
  SF_SENTIENTHANDLE = 0xC,
  SF_PATHNODE = 0xD,
  SF_ANIMTREE = 0xE,
  SF_TYPE_TAG_INFO = 0xF,
  SF_WEAPON = 0x10,
};

/* 598 */
enum $2ECEB46995321DB8C312E8304E6C3A30
{
  ENT_HANDLER_NULL = 0x0,
  ENT_HANDLER_TRIGGER_MULTIPLE = 0x1,
  ENT_HANDLER_TRIGGER_HURT = 0x2,
  ENT_HANDLER_TRIGGER_HURT_TOUCH = 0x3,
  ENT_HANDLER_TRIGGER_DAMAGE = 0x4,
  ENT_HANDLER_SCRIPT_MOVER = 0x5,
  ENT_HANDLER_SCRIPT_MODEL = 0x6,
  ENT_HANDLER_GRENADE = 0x7,
  ENT_HANDLER_TIMED_OBJECT = 0x8,
  ENT_HANDLER_ROCKET = 0x9,
  ENT_HANDLER_CLIENT = 0xA,
  ENT_HANDLER_CLIENT_SPECTATOR = 0xB,
  ENT_HANDLER_CLIENT_DEAD = 0xC,
  ENT_HANDLER_PLAYER_CLONE = 0xD,
  ENT_HANDLER_TURRET_INIT = 0xE,
  ENT_HANDLER_TURRET = 0xF,
  ENT_HANDLER_DROPPED_ITEM = 0x10,
  ENT_HANDLER_ITEM_INIT = 0x11,
  ENT_HANDLER_ITEM = 0x12,
  ENT_HANDLER_PRIMARY_LIGHT = 0x13,
  ENT_HANDLER_PLAYER_BLOCK = 0x14,
  ENT_HANDLER_VEHICLE = 0x15,
  ENT_HANDLER_AGENT = 0x16,
  ENT_HANDLER_AGENT_DEAD = 0x17,
  ENT_HANDLER_SCRIPTABLE = 0x18,
  ENT_HANDLER_COUNT = 0x19,
};

/* 599 */
enum hitLocation_t
{
  HITLOC_NONE = 0x0,
  HITLOC_HELMET = 0x1,
  HITLOC_HEAD = 0x2,
  HITLOC_NECK = 0x3,
  HITLOC_TORSO_UPR = 0x4,
  HITLOC_TORSO_LWR = 0x5,
  HITLOC_R_ARM_UPR = 0x6,
  HITLOC_L_ARM_UPR = 0x7,
  HITLOC_R_ARM_LWR = 0x8,
  HITLOC_L_ARM_LWR = 0x9,
  HITLOC_R_HAND = 0xA,
  HITLOC_L_HAND = 0xB,
  HITLOC_R_LEG_UPR = 0xC,
  HITLOC_L_LEG_UPR = 0xD,
  HITLOC_R_LEG_LWR = 0xE,
  HITLOC_L_LEG_LWR = 0xF,
  HITLOC_R_FOOT = 0x10,
  HITLOC_L_FOOT = 0x11,
  HITLOC_GUN = 0x12,
  HITLOC_SHIELD = 0x13,
  HITLOC_ARMOR = 0x14,
  HITLOC_SOFT = 0x15,
  HITLOC_NUM = 0x16,
};

/* 600 */
enum VehicleCameraMode
{
  VEHICLE_CAMERA_MODE_1ST_PERSON = 0x0,
  VEHICLE_CAMERA_MODE_3RD_PERSON = 0x1,
  VEHICLE_CAMERA_MODE_BOTH = 0x2,
  VEHICLE_CAMERA_MODE_COUNT = 0x3,
};

/* 601 */
enum $D479793B2962BE4C1624C88437F11D06
{
  MODELTYPE_CAPSULE = 0x0,
  MODELTYPE_CYLINDER = 0x1,
  MODELTYPE_DISK = 0x2,
  MODELTYPE_TRIGGER = 0x3,
  MODELTYPE_BRUSH = 0x4,
};

/* 602 */
enum $E7B1D95E0381D419A2E31D1BE14AA034
{
  ACTIVE_STATE_INACTIVE = 0x0,
  ACTIVE_STATE_ACTIVE = 0x1,
  ACTIVE_STATE_WANTS_TURRET_DISMOUNT = 0x2,
};

/* 603 */
enum DSHostingEnvironment
{
  DS_HOSTING_LOCAL = 0x0,
  DS_HOSTING_GAMESERVERS = 0x1,
  DS_HOSTING_THUNDERHEAD = 0x2,
};

/* 604 */
enum JointType
{
  RAGDOLL_JOINT_NONE = 0x0,
  RAGDOLL_JOINT_HINGE = 0x1,
  RAGDOLL_JOINT_SWIVEL = 0x2,
};

/* 605 */
enum BodyState
{
  BS_DEAD = 0x0,
  BS_DOBJ_WAIT = 0x1,
  BS_VELOCITY_CAPTURE = 0x2,
  BS_TUNNEL_TEST = 0x3,
  BS_RUNNING = 0x4,
  BS_IDLE = 0x5,
  BS_JUST_LOADED = 0x6,
  RAGDOLL_NUM_STATES = 0x7,
};

/* 606 */
enum ragdoll_def_t
{
  RAGDOLL_DEF_ALIEN = 0x0,
  RAGDOLL_DEF_HUMAN = 0x1,
  RAGDOLL_DEF_ASTRONAUT = 0x2,
  RAGDOLL_DEF_SIZE = 0x3,
};

/* 607 */
enum PhysicsGeomType
{
  PHYS_GEOM_NONE = 0x0,
  PHYS_GEOM_BOX = 0x1,
  PHYS_GEOM_BRUSHMODEL = 0x2,
  PHYS_GEOM_BRUSH = 0x3,
  PHYS_GEOM_COLLMAP = 0x4,
  PHYS_GEOM_CYLINDER = 0x5,
  PHYS_GEOM_CAPSULE = 0x6,
  PHYS_GEOM_GLASS = 0x7,
  PHYS_GEOM_COUNT = 0x8,
};

/* 608 */
enum $2D4FA9F47A2A60985FE097915D7E0003
{
  dMaxUserClasses = 0x6,
};

/* 609 */
enum $BCB2EA7BC7CB5A8AC0E4DCDD2826687F
{
  dBoxClass = 0x0,
  dGeomTransformClass = 0x1,
  dFirstSpaceClass = 0x2,
  dSimpleSpaceClass = 0x2,
  dLastSpaceClass = 0x2,
  dFirstUserClass = 0x3,
  dLastUserClass = 0x8,
  dGeomNumClasses = 0x9,
};

/* 610 */
enum $85AA0FF6E2351B2C8655145DF11C2099
{
  ODE_BODY_FLAG_FINITE_ROTATIONS = 0x1,
  ODE_BODY_FLAG_FINITE_ROTATION_AXIS = 0x2,
  ODE_BODY_FLAG_DISABLED = 0x4,
  ODE_BODY_FLAG_NO_GRAVITY = 0x8,
  ODE_BODY_FLAG_AUTO_DISABLE = 0x10,
  ODE_BODY_FLAG_HAS_CONTACTS = 0x20,
  ODE_BODY_FLAG_USE_SOFT_CONTACTS = 0x40,
  ODE_BODY_FLAG_BREAKS_GLASS = 0x80,
  ODE_BODY_FLAG_MOVED = 0x100,
};

/* 611 */
enum $E5F85BF791F996AC98973C7104606E90
{
  GEOM_DIRTY = 0x1,
  GEOM_AABB_BAD = 0x2,
  GEOM_PLACEABLE = 0x4,
  GEOM_ENABLED = 0x8,
  RAY_FIRSTCONTACT = 0x10000,
  RAY_BACKFACECULL = 0x20000,
  RAY_CLOSEST_HIT = 0x40000,
};

/* 612 */
enum $8F6F5B9C49D32CEB4E2620940842C39C
{
  ODE_ONESIDED_OFF = 0x0,
  ODE_ONESIDED_BODY1 = 0x1,
  ODE_ONESIDED_BODY2 = 0x2,
};

/* 613 */
enum $2993F0254A782AC689F523594890AFB9
{
  dJOINT_INGROUP = 0x1,
  dJOINT_REVERSE = 0x2,
  dJOINT_TWOBODIES = 0x4,
};

/* 614 */
enum $8DBAEBA4E6FFE0AD41D5D5B8AEF182DF
{
  GEOM_CLASS_BRUSHMODEL = 0x3,
  GEOM_CLASS_COLLMAP = 0x4,
  GEOM_CLASS_CYLINDER = 0x5,
  GEOM_CLASS_CAPSULE = 0x6,
  GEOM_CLASS_GLASS = 0x7,
  GEOM_CLASS_WORLD = 0x8,
};

/* 615 */
enum $4060660F9B75441D92F9B01F0EB251E9
{
  dParamLoStop = 0x0,
  dParamHiStop = 0x1,
  dParamVel = 0x2,
  dParamFMax = 0x3,
  dParamFudgeFactor = 0x4,
  dParamBounce = 0x5,
  dParamCFM = 0x6,
  dParamStopERP = 0x7,
  dParamStopCFM = 0x8,
  dParamSuspensionERP = 0x9,
  dParamSuspensionCFM = 0xA,
  dParamLoStop2 = 0x100,
  dParamHiStop2 = 0x101,
  dParamVel2 = 0x102,
  dParamFMax2 = 0x103,
  dParamFudgeFactor2 = 0x104,
  dParamBounce2 = 0x105,
  dParamCFM2 = 0x106,
  dParamStopERP2 = 0x107,
  dParamStopCFM2 = 0x108,
  dParamSuspensionERP2 = 0x109,
  dParamSuspensionCFM2 = 0x10A,
  dParamLoStop3 = 0x200,
  dParamHiStop3 = 0x201,
  dParamVel3 = 0x202,
  dParamFMax3 = 0x203,
  dParamFudgeFactor3 = 0x204,
  dParamBounce3 = 0x205,
  dParamCFM3 = 0x206,
  dParamStopERP3 = 0x207,
  dParamStopCFM3 = 0x208,
  dParamSuspensionERP3 = 0x209,
  dParamSuspensionCFM3 = 0x20A,
  dParamGroup = 0x100,
};

/* 616 */
enum $E9C5450848AF5B0E1ED3AF9C7EAA722B
{
  dAMotorUser = 0x0,
  dAMotorEuler = 0x1,
};

/* 617 */
enum $D80829A2BE17B50830D2EA59B3C67706
{
  ODE_CONTACTFLAG_MU2 = 0x1,
  ODE_CONTACTFLAG_FDIR1 = 0x2,
  ODE_CONTACTFLAG_BOUNCE = 0x4,
  ODE_CONTACTFLAG_SOFT_ERP = 0x8,
  ODE_CONTACTFLAG_SOFT_CFM = 0x10,
  ODE_CONTACTFLAG_MOTION1 = 0x20,
  ODE_CONTACTFLAG_MOTION2 = 0x40,
  ODE_CONTACTFLAG_SLIP1 = 0x80,
  ODE_CONTACTFLAG_SLIP2 = 0x100,
  ODE_CONTACTFLAG_NO_MCV = 0x200,
  ODE_CONTACTFLAG_FRICTION_ONLY = 0x400,
  ODE_CONTACTFLAG_APPROX0 = 0x0,
  ODE_CONTACTFLAG_APPROX1_1 = 0x1000,
  ODE_CONTACTFLAG_APPROX1_2 = 0x2000,
  ODE_CONTACTFLAG_APPROX1 = 0x3000,
  ODE_CONTACTFLAG_ONESIDED_OFF = 0x0,
  ODE_CONTACTFLAG_ONESIDED_BODY1 = 0x4000,
  ODE_CONTACTFLAG_ONESIDED_BODY2 = 0x8000,
};

/* 618 */
enum physStuckState_t
{
  PHYS_OBJ_STATE_POSSIBLY_STUCK = 0x0,
  PHYS_OBJ_STATE_STUCK = 0x1,
  PHYS_OBJ_STATE_FREE = 0x2,
};

/* 619 */
enum $CC4523DFC35615C6BF6C268C28595B55
{
  PHYS_OBJ_NOTRACE = 0x1,
};

/* 620 */
enum PolyOrientation
{
  POLY_COUNTERCLOCKWISE = 0x0,
  POLY_CLOCKWISE = 0x1,
  POLY_ERROR = 0x2,
};

/* 621 */
typedef bdContentStreamingBase::bdStatus inflate_block_mode;

/* 622 */
typedef bdContentStreamingBase::bdStatus inflate_mode;

/* 623 */
enum block_state
{
  need_more = 0x0,
  block_done = 0x1,
  finish_started = 0x2,
  finish_done = 0x3,
};

/* 624 */
enum $BFE3142A777DFAD8199AB6DEBB6FCFD8
{
  XANIM_SIZE = 0x10,
  DOBJ_CREATE_SIZE = 0xB8,
  XSURFACE_SIZE = 0xC0,
  DSKELRECORD_CREATE_SIZE = 0x78,
};

/* 625 */
enum $D3EECB7FD608B7B0FF8E6775AF29FE66
{
  VARIABLELIST_PARENT_SIZE = 0x9000,
  VARIABLELIST_PARENT_END = 0x9000,
  VARIABLELIST_CHILD_SIZE = 0xC800,
  VARIABLELIST_CHILD0_BEGIN = 0x0,
  VARIABLELIST_CHILD0_END = 0xC800,
  VARIABLELIST_CHILD1_BEGIN = 0xC800,
  VARIABLELIST_CHILD1_END = 0x19000,
  VARIABLELIST_PARENT_DEV_SIZE = 0x8380,
  VARIABLELIST_CHILD_DEV_SIZE = 0xBB80,
  VARIABLELIST_SIZE = 0x22000,
};

/* 626 */
enum $25EF9448C800B18F0C83DB367159AFD6
{
  PART_TYPE_NO_QUAT = 0x0,
  PART_TYPE_HALF_QUAT = 0x1,
  PART_TYPE_FULL_QUAT = 0x2,
  PART_TYPE_HALF_QUAT_NO_SIZE = 0x3,
  PART_TYPE_FULL_QUAT_NO_SIZE = 0x4,
  PART_TYPE_SMALL_TRANS = 0x5,
  PART_TYPE_TRANS = 0x6,
  PART_TYPE_TRANS_NO_SIZE = 0x7,
  PART_TYPE_NO_TRANS = 0x8,
  PART_TYPE_ALL = 0x9,
  PART_TYPE_COUNT = 0xA,
};

/* 627 */
enum $BCBEBDEC84CD6533FB79C434F335B765
{
  MT_TYPE_EMPTY = 0x0,
  MT_TYPE_THREAD = 0x1,
  MT_TYPE_VECTOR = 0x2,
  MT_TYPE_ANIM_NOTETRACK = 0x3,
  MT_TYPE_ANIM_TREE = 0x4,
  MT_TYPE_SMALL_ANIM_TREE = 0x5,
  MT_TYPE_SIMPLE_ANIM_TREE = 0x6,
  MT_TYPE_EXTERNAL = 0x7,
  MT_TYPE_TEMP = 0x8,
  MT_TYPE_SURFACE = 0x9,
  MT_TYPE_ANIM_PART = 0xA,
  MT_TYPE_MODEL_PART = 0xB,
  MT_TYPE_MODEL_PART_MAP = 0xC,
  MT_TYPE_MODEL_DUPLICATE_PARTS = 0xD,
  MT_TYPE_MODEL_LIST = 0xE,
  MT_TYPE_SCRIPT_PARSE = 0xF,
  MT_TYPE_SCRIPT_STRING = 0x10,
  MT_TYPE_CLASS = 0x11,
  MT_TYPE_TAG_INFO = 0x12,
  MT_TYPE_ANIMSCRIPTED = 0x13,
  MT_TYPE_CONFIG_STRING = 0x14,
  MT_TYPE_DEBUGGER_STRING = 0x15,
  MT_TYPE_GENERIC = 0x16,
  MT_TYPE_COUNT = 0x17,
};

/* 628 */
enum $673D3D32AD1EBCE7A4DFDC45146E2679
{
  XANIM_ERROR_NONE = 0x0,
  XANIM_ERROR_BAD_ROOT_ANIM = 0x1,
  XANIM_ERROR_BAD_NOTIFY = 0x2,
};

/* 629 */
enum $0F175015A39D31EE80D73D7274679672
{
  ANIM_LOOP = 0x1,
  ANIM_DELTA = 0x2,
  ANIM_DELTA_3D = 0x4,
  ANIM_DEFAULT = 0x8,
  ANIM_SHMEM = 0x10,
};

/* 630 */
enum $0067B3625803BF20F1C14D2DD0AB38A5
{
  DSKEL_CREATE_INC = 0x20,
};

/* 631 */
enum sysEventType_t
{
  SE_NONE = 0x0,
  SE_CHAR = 0x1,
  SE_CONSOLE = 0x2,
};

/* 632 */
enum MuteStrategy
{
  MuteStrategyUnmute = 0x0,
  MuteStrategyMuteAll = 0x1,
  MuteStrategyMuteAllButParty = 0x2,
  MuteStrategyMuteAllButFriends = 0x3,
  MuteStrategySize = 0x4,
};

/* 633 */
enum Sys_Folder
{
  SF_ZONE = 0x0,
  SF_ZONE_LOC = 0x1,
  SF_VIDEO = 0x2,
  SF_VIDEO_LOC = 0x3,
  SF_PAKFILE = 0x4,
  SF_PAKFILE_LOC = 0x5,
  SF_COUNT = 0x6,
};

/* 634 */
enum FF_DIR
{
  FFD_DEFAULT = 0x0,
  FFD_USER_MAP = 0x1,
};

/* 635 */
enum MessageBoxEnableState
{
  MB_ENABLE_UNDEFINED = 0x0,
  MB_ENABLE_ENABLED = 0x1,
  MB_ENABLE_DISABLED = 0x2,
};

/* 636 */
typedef MACRO_MAX_LANGUAGES language_t;

/* 637 */
enum XONLINE_NAT_TYPE
{
  XONLINE_NAT_UNKNOWN = 0x0,
  XONLINE_NAT_OPEN = 0x1,
  XONLINE_NAT_MODERATE = 0x2,
  XONLINE_NAT_STRICT = 0x3,
};

/* 638 */
typedef MACRO_WSA_IO $3606EA6289F50BC7E2D005471ADFEAA8;

/* 639 */
enum bdBandwidthTestInitStatus
{
  BD_BANDWIDTH_TEST_UNINITIALIZED = 0x0,
  BD_BANDWIDTH_TEST_INITIALIZED = 0x1,
};

/* 640 */
enum bdBandwidthTestStatus
{
  BD_BANDWIDTH_TEST_IDLE = 0x0,
  BD_BANDWIDTH_TEST_REQUESTING_TEST = 0x1,
  BD_BANDWIDTH_TEST_UPLOAD_WAITING = 0x2,
  BD_BANDWIDTH_TEST_UPLOAD_SENDING = 0x3,
  BD_BANDWIDTH_TEST_DOWNLOAD_WAITING = 0x4,
  BD_BANDWIDTH_TEST_DOWNLOAD_RECEIVING = 0x5,
  BD_BANDWIDTH_TEST_FINALIZING = 0x6,
  BD_BANDWIDTH_TEST_DONE = 0x7,
};

/* 641 */
enum bdBandwidthTestType
{
  BD_UPLOAD_TEST = 0x0,
  BD_UPLOAD_DOWNLOAD_TEST = 0x1,
};

/* 642 */
enum $B0C5EE9F189D227B14D4491A2F309FE7
{
  TASK_QOSPROBE = 0x1,
  TASK_WRITEACHIVEMENT = 0x2,
  TASK_BANDWIDTHTEST = 0x3,
  NUM_LIVE_TASKS = 0x4,
};

/* 643 */
typedef $CFDB0D303165423155BC335C42AADBEC SCOPE_LEVEL;

/* 644 */
enum voiceCommunicationSetting
{
  TALK_TO_EVERYONE = 0x0,
  TALK_TO_FRIENDS_ONLY = 0x1,
  TALK_TO_NOBODY_I_HATE_EVERYONE = 0x2,
  NUM_VOICECOMMUNICATIONSETTINGS = 0x3,
};

/* 645 */
enum bdMessaging::bdBlockLevel
{
  BD_NOT_BLOCKED = 0x0,
  BD_BLOCKED = 0x1,
};

/* 646 */
enum GamepadPhysicalAxis
{
  GPAD_PHYSAXIS_RSTICK_X = 0x0,
  GPAD_PHYSAXIS_RSTICK_Y = 0x1,
  GPAD_PHYSAXIS_LSTICK_X = 0x2,
  GPAD_PHYSAXIS_LSTICK_Y = 0x3,
  GPAD_PHYSAXIS_RTRIGGER = 0x4,
  GPAD_PHYSAXIS_LTRIGGER = 0x5,
  GPAD_PHYSAXIS_COUNT = 0x6,
  GPAD_PHYSAXIS_NONE = 0xFFFFFFFF,
};

/* 647 */
enum GamePadStickDir
{
  GPAD_STICK_POS = 0x0,
  GPAD_STICK_NEG = 0x1,
  GPAD_STICK_DIRCOUNT = 0x2,
};

/* 648 */
typedef $091388B5486C38E232712F2AD090397D POWER_INFORMATION_LEVEL;

/* 649 */
enum WinThreadLock
{
  THREAD_LOCK_NONE = 0x0,
  THREAD_LOCK_MINIMAL = 0x1,
  THREAD_LOCK_ALL = 0x2,
};

/* 650 */
typedef $5BDA056A888DC5F03790D737B7575A6D INTERNET_SCHEME;

/* 651 */
typedef $D1D25F7E59039EE4F06FC6A15C79D0DD InternetCookieState;

/* 652 */
enum $A3C72BF7FC148054322040D3FDDA56D8
{
  TRACK_DEBUG = 0x0,
  TRACK_FREE = 0x1,
  TRACK_BINARIES = 0x2,
  TRACK_MISC_SWAP = 0x3,
  TRACK_DELIMITER1 = 0x4,
  TRACK_AI = 0x5,
  TRACK_AI_NODES = 0x6,
  TRACK_SCRIPT = 0x7,
  TRACK_FX = 0x8,
  TRACK_NETWORK_ENTITY = 0x9,
  TRACK_MISC = 0xA,
  TRACK_ANIMATION = 0xB,
  TRACK_WORLD_GLOBALS = 0xC,
  TRACK_SOUND_GLOBALS = 0xD,
  TRACK_MINSPEC_SOUND_GLOBALS = 0xE,
  TRACK_SOUND = 0xF,
  TRACK_MINSPEC_SOUND = 0x10,
  TRACK_DELIMITER2 = 0x11,
  TRACK_RENDERER_GLOBALS = 0x12,
  TRACK_RENDERER_IMAGES = 0x13,
  TRACK_RENDERER_WORLD = 0x14,
  TRACK_RENDERER_MODELS = 0x15,
  TRACK_RENDERER_MISC = 0x16,
  TRACK_RENDERER_TOTAL = 0x17,
  TRACK_DELIMITER3 = 0x18,
  TRACK_COLLISION_MISC = 0x19,
  TRACK_COLLISION_BRUSH = 0x1A,
  TRACK_COLLISION_MODEL_TRI = 0x1B,
  TRACK_COLLISION_TERRAIN = 0x1C,
  TRACK_COLLISION_TOTAL = 0x1D,
  TRACK_MAP_ENTS = 0x1E,
  TRACK_VEHICLE = 0x1F,
  TRACK_TEMP = 0x20,
  TRACK_DELIMITER4 = 0x21,
  TRACK_LOCALIZATION = 0x22,
  TRACK_UI = 0x23,
  TRACK_MINSPEC_IMAGES = 0x24,
  TRACK_DELIMITER5 = 0x25,
  TRACK_GLOBAL_NEW = 0x26,
  TRACK_COUNT = 0x27,
};

/* 653 */
enum PackfileUser
{
  PACKFILE_USER_SOUND = 0x0,
  PACKFILE_USER_IMAGE = 0x1,
};

/* 654 */
enum RMsgSendStatus
{
  RMSG_STATUS_INACTIVE = 0x0,
  RMSG_STATUS_IN_PROGRESS = 0x1,
  RMSG_STATUS_SUCCESS = 0x2,
  RMSG_STATUS_ERROR = 0x3,
  RMSG_STATUS_COUNT = 0x4,
};

/* 655 */
enum csParseFieldType_t
{
  CSPFT_STRING = 0x0,
  CSPFT_STRING_MAX_STRING_CHARS = 0x1,
  CSPFT_STRING_MAX_QPATH = 0x2,
  CSPFT_STRING_MAX_OSPATH = 0x3,
  CSPFT_INT = 0x4,
  CSPFT_QBOOLEAN = 0x5,
  CSPFT_BOOL = 0x6,
  CSPFT_FLOAT = 0x7,
  CSPFT_MPH_TO_INCHES_PER_SEC = 0x8,
  CSPFT_MILLISECONDS = 0x9,
  CSPFT_FX = 0xA,
  CSPFT_XMODEL = 0xB,
  CSPFT_ANIMATION = 0xC,
  CSPFT_MATERIAL = 0xD,
  CSPFT_SOUND = 0xE,
  CSPFT_TRACER = 0xF,
  CSPFT_NUM_BASE_FIELD_TYPES = 0x10,
};

/* 656 */
enum ParseThreadContext
{
  PARSE_THREAD_MAIN = 0x0,
  PARSE_THREAD_BACKEND = 0x1,
  PARSE_THREAD_SERVER = 0x2,
  PARSE_THREAD_FASTFILE = 0x3,
  PARSE_THREAD_COUNT = 0x4,
};

/* 657 */
enum XTransientZoneState
{
  TRANSIENT_ZONE_EMPTY = 0x0,
  TRANSIENT_ZONE_QUEUED_FOR_LOAD = 0x1,
  TRANSIENT_ZONE_LOADING = 0x2,
  TRANSIENT_ZONE_LOADING_QUEUED_FOR_UNLOAD = 0x3,
  TRANSIENT_ZONE_LOADED = 0x4,
  TRANSIENT_ZONE_UNLOADING = 0x5,
  TRANSIENT_ZONE_QUEUED_FOR_UNLOAD = 0x6,
  TRANSIENT_ZONE_NTYPES = 0x7,
};

/* 658 */
enum PMem_Direction
{
  PHYS_ALLOC_LOW = 0x0,
  PHYS_ALLOC_HIGH = 0x1,
  PHYS_ALLOC_COUNT = 0x2,
};

/* 659 */
enum PMem_AllocBlock
{
  PMEM_ALLOCBLOCK_MAIN = 0x0,
  PMEM_ALLOCBLOCK_SCRIPT = 0x1,
  PMEM_ALLOCBLOCK_COUNT = 0x2,
};

/* 660 */
enum PMem_Source
{
  PMEM_SOURCE_EXTERNAL = 0x0,
  PMEM_SOURCE_DATABASE = 0x1,
  PMEM_SOURCE_DEFAULT_LOW = 0x2,
  PMEM_SOURCE_DEFAULT_HIGH = 0x3,
  PMEM_SOURCE_MOVIE = 0x4,
  PMEM_SOURCE_SCRIPT = 0x5,
};

/* 661 */
enum NetConstStringType
{
  NETCONSTSTRINGTYPE_XMODEL = 0x0,
  NETCONSTSTRINGTYPE_MATERIAL = 0x1,
  NETCONSTSTRINGTYPE_RUMBLE = 0x2,
  NETCONSTSTRINGTYPE_VEHICLES = 0x3,
  NETCONSTSTRINGTYPE_FX = 0x4,
  NETCONSTSTRINGTYPE_LOCSTRING = 0x5,
  NETCONSTSTRINGTYPE_SOUNDALIAS = 0x6,
  NETCONSTSTRINGTYPE_SOUNDALIAS_LOOPING = 0x7,
  NETCONSTSTRINGTYPE_SHOCK = 0x8,
  NETCONSTSTRINGTYPE_SCRIPTMENU = 0x9,
  NETCONSTSTRINGTYPE_CLIENT_TAGS = 0xA,
  NETCONSTSTRINGTYPE_HEADICON = 0xB,
  NETCONSTSTRINGTYPE_STATUSICON = 0xC,
  NETCONSTSTRINGTYPE_NAMEPLATE = 0xD,
  NETCONSTSTRINGTYPE_MINIMAPICON = 0xE,
  NETCONSTSTRINGTYPE_LOCSELMAT = 0xF,
  NETCONSTSTRINGTYPE_WEAPON = 0x10,
  NETCONSTSTRINGTYPE_HINTSTRING = 0x11,
  NETCONSTSTRINGTYPE_ANIM = 0x12,
  NETCONSTSTRINGTYPE_TAGS = 0x13,
  NETCONSTSTRINGTYPE_ANIMCLASS = 0x14,
  NETCONSTSTRINGTYPE_LUI = 0x15,
  NETCONSTSTRINGTYPE_ASSET_COUNT = 0x16,
  NETCONSTSTRINGTYPE_CODINFO_DVAR = 0x16,
  NETCONSTSTRINGTYPE_NETWORK_DVAR = 0x17,
  NETCONSTSTRINGTYPE_COUNT = 0x18,
  NETCONSTSTRINGTYPE_NONE = 0x18,
};

/* 662 */
enum NetConstStringSource
{
  NETCONSTSTRINGSOURCE_MAP = 0x0,
  NETCONSTSTRINGSOURCE_PRE_MAP = 0x1,
  NETCONSTSTRINGSOURCE_COMMON = 0x2,
  NETCONSTSTRINGSOURCE_COUNT = 0x3,
  NETCONSTSTRINGSOURCE_NONE = 0x3,
};

/* 663 */
enum $64EC7BB2831DA848E43D94D5276F3434
{
  CODE_SHIFT_BITS = 0x6,
  CODE_TYPE_MASK = 0xC0,
  CODE_LEN_MASK = 0x3F,
};

/* 664 */
enum $60D09906AD1C0B61C47B44DE9751D7CF
{
  SAVE_STRING_NULL = 0x0,
  SAVE_STRING_EMPTY = 0x1,
  SAVE_STRING_NEW = 0x2,
  SAVE_STRING_NOT_FOUND = 0x3,
  SAVE_STRING_COUNT = 0x4,
};

/* 665 */
enum MemFileMode
{
  MEM_FILE_MODE_DEFAULT = 0x0,
  MEM_FILE_MODE_INFLATE = 0x1,
  MEM_FILE_MODE_DEFLATE = 0x2,
  MEM_FILE_MODENUM = 0x3,
};

/* 666 */
enum $C6563B60C994B896140DA959904EAB44
{
  SL_USER_GAME = 0x1,
  SL_USER_TEMP = 0x2,
  SL_USER_XZONE = 0x4,
  SL_USER_XZONE_TEMP = 0x8,
  SL_USER_SAVEGAME = 0x10,
};

/* 667 */
enum $82D2AF87CEDAC7B52E6434FBC1457EA6
{
  SAVE_SEGMENT_START = 0x0,
  SAVE_SEGMENT_MAIN = 0x1,
  SAVE_SEGMENT_NORMAL = 0x2,
  SAVE_SEGMENT_SCRIPT = 0x3,
  SAVE_SEGMENT_END = 0x4,
  SAVE_SEGMENT_COUNT = 0x5,
  SAVE_SEGMENT_NONE = 0xFFFFFFFF,
};

/* 668 */
enum $BD413443A7330A22BD6E6705A31623D0
{
  SCOREBOARD_TEAMSCORE_AXIS = 0x0,
  SCOREBOARD_TEAMSCORE_ALLIES = 0x1,
  SCOREBOARD_TEAMSCORE_COUNT = 0x2,
};

/* 669 */
enum LuiHudMenu
{
  LUI_HUD_MENU_FIRST = 0x0,
  LUI_HUD_MENU_AMMO = 0x0,
  LUI_HUD_MENU_STANCE = 0x1,
  LUI_HUD_MENU_OFFHAND = 0x2,
  LUI_HUD_MENU_COUNT = 0x3,
};

/* 670 */
enum CardinalDirection
{
  CARDINAL_NORTH = 0x0,
  CARDINAL_EAST = 0x1,
  CARDINAL_SOUTH = 0x2,
  CARDINAL_WEST = 0x3,
  CARDINAL_DIRECTIONS_MAX = 0x4,
};

/* 671 */
enum StreamSyncType
{
  STREAM_SYNC_TYPE_HEAD = 0x0,
  STREAM_SYNC_TYPE_BODY = 0x1,
  STREAM_SYNC_TYPE_COUNT = 0x2,
};

/* 672 */
enum MissileFlightMode
{
  MISSILEFLIGHTMODE_TOP = 0x0,
  MISSILEFLIGHTMODE_DIRECT = 0x1,
  MISSILEFLIGHTMODE_COUNT = 0x2,
};

/* 673 */
enum DvarSetSource
{
  DVAR_SOURCE_INTERNAL = 0x0,
  DVAR_SOURCE_EXTERNAL = 0x1,
  DVAR_SOURCE_SCRIPT = 0x2,
  DVAR_SOURCE_UISCRIPT = 0x3,
  DVAR_SOURCE_SERVERCMD = 0x4,
  DVAR_SOURCE_NUM = 0x5,
};

/* 674 */
enum printParm_t
{
  PRINT_ALL = 0x0,
  PRINT_DEVELOPER = 0x1,
  PRINT_WARNING = 0x2,
  PRINT_ERROR = 0x3,
};

/* 675 */
enum LookupExpectation
{
  LOOKUP_EXPECT_INT = 0x0,
  LOOKUP_EXPECT_STRING = 0x1,
};

/* 676 */
enum RleCompressResult
{
  RLE_COMPRESS_OK = 0x0,
  RLE_COMPRESS_OUT_OF_OUTPUT_BUFFER = 0x1,
};

/* 677 */
enum RleUncompressResult
{
  RLE_UNCOMPRESS_OK = 0x0,
  RLE_UNCOMPRESS_INVALID_STREAM = 0x1,
  RLE_UNCOMPRESS_OUT_OF_INPUT_DATA = 0x2,
  RLE_UNCOMPRESS_OUT_OF_OUTPUT_BUFFER = 0x3,
};

/* 678 */
enum fsMode_t
{
  FS_READ = 0x0,
  FS_WRITE = 0x1,
  FS_APPEND = 0x2,
  FS_APPEND_SYNC = 0x3,
  FS_APPEND_BINARY = 0x4,
};

/* 679 */
enum FS_ErrorCodes
{
  FS_OPEN_FAILURE = 0xFFFFFFFF,
  FS_OPEN_NOT_IN_IWD_OR_LOCALIZED_DIR = 0xFFFFFFFE,
};

/* 680 */
enum FsThread
{
  FS_THREAD_MAIN = 0x0,
  FS_THREAD_STREAM = 0x1,
  FS_THREAD_DATABASE = 0x2,
  FS_THREAD_BACKEND = 0x3,
  FS_THREAD_SERVER = 0x4,
  FS_THREAD_COUNT = 0x5,
  FS_THREAD_INVALID = 0x6,
};

/* 681 */
enum FsListBehavior_e
{
  FS_LIST_PURE_ONLY = 0x0,
  FS_LIST_ALL = 0x1,
};

/* 682 */
enum $F405DBE12AC9DCDAC57F7AFCE3D12168
{
  RED = 0x0,
  BLACK = 0x1,
};

/* 683 */
enum transitionType
{
  TRANS_INACTIVE = 0x0,
  TRANS_LERP = 0x1,
};

/* 684 */
enum triggerType
{
  TRIGGER_NONE = 0x0,
  TRIGGER_CLOSEMENU = 0x1,
};

/* 685 */
enum ItemFloatExpressionTarget
{
  ITEM_FLOATEXP_TGT_RECT_X = 0x0,
  ITEM_FLOATEXP_TGT_RECT_Y = 0x1,
  ITEM_FLOATEXP_TGT_RECT_W = 0x2,
  ITEM_FLOATEXP_TGT_RECT_H = 0x3,
  ITEM_FLOATEXP_TGT_FORECOLOR_R = 0x4,
  ITEM_FLOATEXP_TGT_FORECOLOR_G = 0x5,
  ITEM_FLOATEXP_TGT_FORECOLOR_B = 0x6,
  ITEM_FLOATEXP_TGT_FORECOLOR_RGB = 0x7,
  ITEM_FLOATEXP_TGT_FORECOLOR_A = 0x8,
  ITEM_FLOATEXP_TGT_GLOWCOLOR_R = 0x9,
  ITEM_FLOATEXP_TGT_GLOWCOLOR_G = 0xA,
  ITEM_FLOATEXP_TGT_GLOWCOLOR_B = 0xB,
  ITEM_FLOATEXP_TGT_GLOWCOLOR_RGB = 0xC,
  ITEM_FLOATEXP_TGT_GLOWCOLOR_A = 0xD,
  ITEM_FLOATEXP_TGT_BACKCOLOR_R = 0xE,
  ITEM_FLOATEXP_TGT_BACKCOLOR_G = 0xF,
  ITEM_FLOATEXP_TGT_BACKCOLOR_B = 0x10,
  ITEM_FLOATEXP_TGT_BACKCOLOR_RGB = 0x11,
  ITEM_FLOATEXP_TGT_BACKCOLOR_A = 0x12,
  ITEM_FLOATEXP_TGT__COUNT = 0x13,
};

/* 686 */
enum ItemFocusReason
{
  FOCUS_OTHER = 0x0,
  FOCUS_KEYBOARD = 0x1,
};

/* 687 */
enum uiErrorAction_t
{
  UI_ERROR_ACTION_NONE = 0x0,
  UI_ERROR_ACTION_SHOWMARKETPLACE = 0x1,
};

/* 688 */
enum TickerState
{
  TICKER_STOPPED = 0x0,
  TICKER_MOVE_IN = 0x1,
  TICKER_SHOW = 0x2,
  TICKER_LEFT_SCROLL = 0x3,
  TICKER_PAUSE_AFTER_SCROLL = 0x4,
  TICKER_MOVE_OUT = 0x5,
};

/* 689 */
enum msgwnd_mode_t
{
  MWM_BOTTOMUP_ALIGN_TOP = 0x0,
  MWM_BOTTOMUP_ALIGN_BOTTOM = 0x1,
  MWM_TOPDOWN_ALIGN_TOP = 0x2,
  MWM_TOPDOWN_ALIGN_BOTTOM = 0x3,
};

/* 690 */
enum EventType
{
  EVENT_UNCONDITIONAL = 0x0,
  EVENT_IF = 0x1,
  EVENT_ELSE = 0x2,
  EVENT_SET_LOCAL_VAR_BOOL = 0x3,
  EVENT_SET_LOCAL_VAR_INT = 0x4,
  EVENT_SET_LOCAL_VAR_FLOAT = 0x5,
  EVENT_SET_LOCAL_VAR_STRING = 0x6,
  EVENT_COUNT = 0x7,
};

/* 691 */
enum e_mapSelectionColumns
{
  FEEDER_MAPSELECTION_COLUMN_NAME = 0x0,
  FEEDER_MAPSELECTION_COLUMN_ROTATIONDECOR = 0x1,
};

/* 692 */
enum $E547BE8FDF07D7076C655C73C4CB2F48
{
  PLAYLIST = 0x0,
  CATEGORY = 0x1,
};

/* 693 */
enum parseBlockTypes
{
  PARSE_GLOBAL = 0x0,
  PARSE_GAMETYPE = 0x1,
  PARSE_PLAYLIST = 0x2,
  PARSE_CATEGORY = 0x3,
};

/* 694 */
enum $ABEA4EADF9804F03409F35E529B38E10
{
  PLAYLIST_NOJIP = 0x1,
  PLAYLIST_PARTYTEAMS = 0x2,
  PLAYLIST_NOLOOPING = 0x4,
  PLAYLIST_ALLOWDUPES = 0x8,
  PLAYLIST_ALWAYSSEARCH = 0x10,
};

/* 695 */
enum PlaylistLockState
{
  PLS_UNLOCKED = 0x0,
  PLS_FETCHING = 0x1,
  PLS_XP = 0x2,
  PLS_DLC = 0x3,
  PLS_COUNT = 0x4,
  PLS_USER_GENERATED_RESTRICTION = 0x5,
};

/* 696 */
enum SQUAD_MODE_GAMEMODE
{
  SQUAD_MODE_GAMEMODE_UNKNOWN = 0x0,
  SQUAD_MODE_GAMEMODE_SQUAD_ASSAULT = 0x1,
  SQUAD_MODE_GAMEMODE_SQUAD_VS_SQUAD = 0x2,
  SQUAD_MODE_GAMEMODE_SAFEGUARD = 0x3,
  SQUAD_MODE_GAMEMODE_SAFEGUARD_EXT = 0x4,
  SQUAD_MODE_GAMEMODE_SAFEGUARD_INF = 0x5,
  SQUAD_MODE_GAMEMODE_WARGAME_1 = 0x6,
  SQUAD_MODE_GAMEMODE_WARGAME_2 = 0x7,
  SQUAD_MODE_GAMEMODE_WARGAME_3 = 0x8,
  SQUAD_MODE_GAMEMODE_WARGAME_4 = 0x9,
  SQUAD_MODE_GAMEMODE_WARGAME_5 = 0xA,
  SQUAD_MODE_GAMEMODE_WARGAME_6 = 0xB,
  SQUAD_MODE_GAMEMODE_WARGAME_7 = 0xC,
  SQUAD_MODE_GAMEMODE_WARGAME_8 = 0xD,
  SQUAD_MODE_GAMEMODE_DLC_SAFEGUARD_1 = 0xE,
  SQUAD_MODE_GAMEMODE_DLC_SAFEGUARD_2 = 0xF,
  SQUAD_MODE_GAMEMODE_DLC_SAFEGUARD_3 = 0x10,
  SQUAD_MODE_GAMEMODE_DLC_SAFEGUARD_4 = 0x11,
  SQUAD_MODE_GAMEMODE_DLC_WARGAME_1 = 0x12,
  SQUAD_MODE_GAMEMODE_DLC_WARGAME_2 = 0x13,
  SQUAD_MODE_GAMEMODE_DLC_WARGAME_3 = 0x14,
  SQUAD_MODE_GAMEMODE_DLC_WARGAME_4 = 0x15,
  SQUAD_MODE_GAMEMODE_COUNT = 0x16,
};

/* 697 */
enum CustomizationAltType
{
  CUSTOMIZATION_ALT_ALLY = 0x0,
  CUSTOMIZATION_ALT_OPFORCE = 0x1,
  CUSTOMIZATION_ALT_COUNT = 0x2,
  CUSTOMIZATION_ALT_DEFAULT = 0x0,
  CUSTOMIZATION_ALT_DEFAULT_OTHER = 0x1,
};

/* 698 */
enum PlayerCardDataType
{
  PLAYERCARD_DATA_ISVALID = 0x0,
  PLAYERCARD_DATA_TITLEINDEX = 0x1,
  PLAYERCARD_DATA_ICONINDEX = 0x2,
  PLAYERCARD_DATA_NAMEPLATEINDEX = 0x3,
  PLAYERCARD_DATA_RANK_MP = 0x4,
  PLAYERCARD_DATA_PRESTIGE_MP = 0x5,
  PLAYERCARD_DATA_RANK_ALIEN = 0x6,
  PLAYERCARD_DATA_PRESTIGE_ALIEN = 0x7,
  PLAYERCARD_DATA_TEAM = 0x8,
  PLAYERCARD_DATA_TIMESINCEUPDATE = 0x9,
  PLAYERCARD_DATA_XPMULT = 0xA,
  PLAYERCARD_DATA_NAME = 0xB,
  PLAYERCARD_DATA_CLAN = 0xC,
  PLAYERCARD_DATA_NAMECLAN = 0xD,
  PLAYERCARD_DATA_TITLENAME = 0xE,
  PLAYERCARD_DATA_G_XPMULT = 0xF,
  PLAYERCARD_DATA_ELITE_CLAN_LEVEL = 0x10,
  PLAYERCARD_DATA_ELITE_CLAN_LEVEL_ONES_MATERIAL = 0x11,
  PLAYERCARD_DATA_ELITE_CLAN_LEVEL_TENS_MATERIAL = 0x12,
  PLAYERCARD_DATA_CUSTOMIZATION_PATCH = 0x13,
  PLAYERCARD_DATA_CUSTOMIZATION_PATCHBACKING = 0x14,
  PLAYERCARD_DATA_CUSTOMIZATION_BACKGROUND = 0x15,
  PLAYERCARD_DATA_COUNT = 0x16,
};

/* 699 */
enum PlayerCardClientLookupType
{
  PLAYERCARD_LOOKUP_SCRIPTSLOT = 0x0,
  PLAYERCARD_LOOKUP_LIVEPROFILE_CLIENT = 0x1,
  PLAYERCARD_LOOKUP_LIVEPROFILE_CONTROLLER = 0x2,
  PLAYERCARD_LOOKUP_LOBBY = 0x3,
  PLAYERCARD_LOOKUP_MYTEAM = 0x4,
  PLAYERCARD_LOOKUP_ENEMYTEAM = 0x5,
  PLAYERCARD_LOOKUP_COOP = 0x6,
  PLAYERCARD_LOOKUP_THEATER = 0x7,
  PLAYERCARD_LOOKUP_LOCALCLIENT = 0x8,
  PLAYERCARD_LOOKUP_FRIEND_CACHE = 0x9,
  PLAYERCARD_LOOKUP_COUNT = 0xA,
};

/* 700 */
enum UnlockTableColumns
{
  UNLOCKTABLE_COLUMN_ITEM = 0x0,
  UNLOCKTABLE_COLUMN_TYPE = 0x1,
  UNLOCKTABLE_COLUMN_LEVEL = 0x2,
  UNLOCKTABLE_COLUMN_CHALLENGE = 0x3,
  UNLOCKTABLE_COLUMN_PRESTIGE_SHOP = 0x7,
  UNLOCKTABLE_COLUMN_EXT_RANK = 0x8,
  UNLOCKTABLE_COLUMN_ENTITLEMENT = 0x9,
  UNLOCKTABLE_COLUMN_EXT_PRESTIGE = 0xA,
  UNLOCKTABLE_COLUMN_EXT_ESCAPES = 0xB,
  UNLOCKTABLE_COLUMN_EXT_RELIC_ESCAPES = 0xC,
  UNLOCKTABLE_COLUMN_EXT_CAREER_KILLS = 0xD,
  UNLOCKTABLE_COLUMN_EXT_CAREER_REVIVES = 0xE,
  UNLOCKTABLE_COLUMN_PRESTIGE = 0xF,
  UNLOCKTABLE_COLUMN_PLAYED_MW3 = 0x10,
  UNLOCKTABLE_COLUMN_PRESTIGE_MW3 = 0x11,
  UNLOCKTABLE_COLUMN_PLAYED_BLOPS2 = 0x12,
  UNLOCKTABLE_COLUMN_PRESTIGE_BLOPS2 = 0x13,
  UNLOCKTABLE_COLUMN_UCD = 0x14,
  UNLOCKTABLE_COLUMN_DLC_NAME = 0x15,
};

/* 701 */
enum AntiBurnHudMenus
{
  HUD_MENU_HEALTH = 0x0,
  HUD_MENU_AMMO = 0x1,
  HUD_MENU_COMPASS = 0x2,
  HUD_MENU_OFFHAND = 0x3,
  HUD_MENU_OBJECTIVES = 0x4,
  HUD_MENU_SPRINT = 0x5,
  HUD_MENU_SPLASH = 0x6,
  HUD_MENU_SPLASH_CHALLENGE = 0x6,
  HUD_MENU_COUNT = 0x7,
};

/* 702 */
enum TASK_SQUADS
{
  TASK_SQUADS_DOWNLOADING_ENEMY = 0x0,
  TASK_SQUADS_SENDING_REPORT = 0x1,
};

/* 703 */
enum SQUADS_TASK
{
  SQUADS_TASK_NOTHING = 0x0,
  SQUADS_TASK_GETTING_MATCHES_FROM_LEADERBOARD_WAIT = 0x1,
  SQUADS_TASK_GETTING_MATCHES_FROM_LEADERBOARD = 0x2,
  SQUADS_TASK_GETTING_MATCHES_FROM_LEADERBOARD_RETRYING = 0x3,
  SQUADS_TASK_DOWNLOADING_ENEMY_DATA = 0x4,
  SQUADS_TASK_DOWNLOADING_ENEMY_DATA_RETRYING = 0x5,
  SQUADS_TASK_FINDING_ENEMY_DATA_RETRYING = 0x6,
  SQUADS_TASK_SENDING_REPORT = 0x7,
  SQUADS_TASK_SENDING_REPORT_RETRYING = 0x8,
  SQUADS_TASK_READING_ELO_LEADERBOARD = 0x9,
  SQUADS_TASK_READING_ELO_LEADERBOARD_RETRYING = 0xA,
  SQUADS_TASK_WRITING_TO_ELO_LEADERBOARD = 0xB,
  SQUADS_TASK_WRITING_TO_ELO_LEADERBOARD_RETRYING = 0xC,
};

/* 704 */
enum SQUADS_MATCHMAKING_TYPE
{
  SQUADS_MATCHMAKING_TYPE_NORMAL = 0x0,
  SQUADS_MATCHMAKING_TYPE_CHALLENGE = 0x1,
};

/* 705 */
enum UI_KEYBOARD_TYPE
{
  UI_KEYBOARD_TYPE_NORMAL = 0x0,
  UI_KEYBOARD_TYPE_EMAIL = 0x1,
  UI_KEYBOARD_TYPE_PASSWORD = 0x2,
};

/* 706 */
enum SQUADS_LOBBY_TYPE
{
  SQUADS_LOBBY_TYPE_SQUAD_ASSAULT = 0x0,
  SQUADS_LOBBY_TYPE_SAFEGUARD = 0x1,
  SQUADS_LOBBY_TYPE_MAX = 0x2,
};

/* 707 */
enum SQUADS_MATCH_OUTCOME
{
  SQUADS_MATCH_OUTCOME_WON = 0x0,
  SQUADS_MATCH_OUTCOME_LOST = 0x1,
  SQUADS_MATCH_OUTCOME_DRAWN = 0x2,
  SQUADS_MATCH_OUTCOME_FORFEIT = 0x3,
};

/* 708 */
enum ERiffAudioFormat
{
  SND_FORMAT_INVALID = 0x0,
  SND_FORMAT_PCM = 0x1,
  SND_FORMAT_XMA2 = 0x2,
  SND_FORMAT_ADPCM = 0x3,
  SND_FORMAT_XWMA = 0x4,
  SND_FORMAT_MP3 = 0x5,
  SND_FORMAT_WIIUDSP = 0x6,
  SND_FORMAT_FLAC = 0x7,
  SND_FORMAT_COUNT = 0x8,
};

/* 709 */
typedef CALL_STATE $5768F200A90265EBC806C091AD37A86D;

/* 710 */
enum svscmd_type
{
  SV_CMD_CAN_IGNORE = 0x0,
  SV_CMD_RELIABLE = 0x1,
};

/* 711 */
enum SvStreamSyncLoadState
{
  STREAM_SYNC_LOAD_STATE_UNLOADED = 0x0,
  STREAM_SYNC_LOAD_STATE_LOADING = 0x1,
  STREAM_SYNC_LOAD_STATE_LOADED = 0x2,
  STREAM_SYNC_LOAD_STATE_COUNT = 0x3,
};

/* 712 */
enum DSPlayerState
{
  DSPlayerStateUnregistered = 0x0,
  DSPlayerStateRegistered = 0x1,
  DSPlayerStateDisconnected = 0x2,
  DSPlayerStateConnected = 0x3,
  DSPlayerStateJoined = 0x4,
  DSPlayerStateCount = 0x5,
};

/* 713 */
enum svc_ops_e
{
  svc_gamestate = 0x0,
  svc_configstring = 0x1,
  svc_serverCommand = 0x2,
  svc_serverCommandBuffer = 0x3,
  svc_rankdata = 0x4,
  svc_matchdata = 0x5,
  svc_snapshot = 0x6,
  svc_EOF = 0x7,
};

/* 714 */
enum ScrAgent_PathTraversalPermissions
{
  SA_ENUM_PATH_ALLOW_JUMP = 0x0,
  SA_ENUM_PATH_ALLOW_LADDERS = 0x1,
  SA_ENUM_PATH_ALLOW_CROUCH = 0x2,
  SA_ENUM_PATH_ALLOW_PRONE = 0x3,
  SA_ENUM_PATH_ALLOW_MAX = 0x4,
};

/* 715 */
enum bot_scr_goal_t
{
  BOT_SCR_GOAL_NONE = 0x0,
  BOT_SCR_GOAL_HUNT = 0x1,
  BOT_SCR_GOAL_GUARD = 0x2,
  BOT_SCR_GOAL_CAMP = 0x3,
  BOT_SCR_GOAL_OBJECTIVE = 0x4,
  BOT_SCR_GOAL_CRITICAL = 0x5,
  BOT_SCR_GOAL_TACTICAL = 0x6,
  BOT_SCR_GOAL_COUNT = 0x7,
};

/* 716 */
enum bot_playercard_t
{
  BOT_PC_PATCH = 0x0,
  BOT_PC_BACKGROUND = 0x1,
  BOT_PC_COUNT = 0x2,
};

/* 717 */
enum bot_zone_count_t
{
  BOT_ZONE_COUNT_ALLY = 0x0,
  BOT_ZONE_COUNT_ENEMY = 0x1,
  BOT_ZONE_COUNT_ENEMY_KNOWN = 0x2,
  BOT_ZONE_COUNT_ENEMY_PREDICT = 0x3,
  BOT_ZONE_COUNT_PATH_ALLY = 0x4,
  BOT_ZONE_COUNT_COUNT = 0x5,
};

/* 718 */
enum bot_path_t
{
  BOT_PATH_UNDEFINED = 0x0,
  BOT_PATH_DEFAULT = 0x1,
  BOT_PATH_SNEAK = 0x2,
  BOT_PATH_CQB = 0x3,
  BOT_PATH_BEELINE = 0x4,
  BOT_PATH_HUNT_TRAFFIC = 0x5,
  BOT_PATH_HUNT_EDGES = 0x6,
  BOT_PATH_OVERWATCH = 0x7,
  BOT_PATH_OBJECTIVE = 0x8,
  BOT_PATH_SCRIPTED = 0x9,
  BOT_PATH_COUNT = 0xA,
};

/* 719 */
enum bot_scripted_grenade_type_t
{
  BOT_SCRIPTED_GRENADE_TYPE_NONE = 0x0,
  BOT_SCRIPTED_GRENADE_TYPE_LETHAL = 0x1,
  BOT_SCRIPTED_GRENADE_TYPE_TACTICAL = 0x2,
  BOT_SCRIPTED_GRENADE_TYPE_COUNT = 0x3,
};

/* 720 */
enum bot_look_t
{
  BOT_LOOK_CODE_PATH = 0x0,
  BOT_LOOK_CODE_SEARCH = 0x1,
  BOT_LOOK_SCRIPT_SEARCH = 0x2,
  BOT_LOOK_CODE_SEEK = 0x3,
  BOT_LOOK_SCRIPT_SEEK = 0x4,
  BOT_LOOK_CODE_FORCED = 0x5,
  BOT_LOOK_SCRIPT_FORCED = 0x6,
  BOT_LOOK_COUNT = 0x7,
};

/* 721 */
enum bot_track_t
{
  BOT_ENEMY_TRACK_VISIBLE = 0x0,
  BOT_ENEMY_TRACK_LASTKNOWN = 0x1,
  BOT_ENEMY_TRACK_PREDICT = 0x2,
  BOT_ENEMY_TRACK_PREDICT_SHORT = 0x3,
};

/* 722 */
enum AutoMeleeState
{
  AIM_MELEE_STATE_OFF = 0x0,
  AIM_MELEE_STATE_TARGETED = 0x1,
  AIM_MELEE_STATE_UPDATING = 0x2,
};

/* 723 */
enum ai_search_type_t
{
  AI_SEARCH_QUICK = 0x0,
  AI_SEARCH_THOROUGH = 0x1,
};

/* 724 */
enum ScriptedAgentState_t
{
  SCRIPTEDAGENT_NONE = 0x0,
  SCRIPTEDAGENT_IDLE = 0x1,
  SCRIPTEDAGENT_MOVE = 0x2,
  SCRIPTEDAGENT_TRAVERSE = 0x3,
  SCRIPTEDAGENT_MELEE = 0x4,
  SCRIPTEDAGENT_SCRIPTED = 0x5,
  SCRIPTEDAGENT_NUMSTATES = 0x6,
};

/* 725 */
enum ScriptedAgentAnimMode_t
{
  SA_ANIM_CODEMOVE = 0x0,
  SA_ANIM_CODEMOVE_SLIDE = 0x1,
  SA_ANIM_ANIMDELTAS = 0x2,
  SA_ANIM_ANIMANGLEDELTA = 0x3,
  SA_ANIM_TRAJECTORY = 0x4,
  SA_ANIM_ANIMLERP = 0x5,
  SA_ANIM_ANIMRELATIVE = 0x6,
  SA_ANIM_NUMSTATES = 0x7,
};

/* 726 */
enum ScriptedAgentPhysicsMode_t
{
  SA_PHYSICS_NOCLIP = 0x0,
  SA_PHYSICS_NOGRAVITY = 0x1,
  SA_PHYSICS_GRAVITY = 0x2,
  SA_PHYSICS_NUMSTATES = 0x3,
};

/* 727 */
enum ScriptedAgentOrientMode_t
{
  SA_ORIENT_MOTION = 0x0,
  SA_ORIENT_ANGLE_ABS = 0x1,
  SA_ORIENT_ANGLE_REL = 0x2,
  SA_ORIENT_ENEMY = 0x3,
  SA_ORIENT_NUMSTATES = 0x4,
};

/* 728 */
enum bot_mem_type_t
{
  BOT_MEM_KILL = 0x0,
  BOT_MEM_DEATH = 0x1,
  BOT_MEM_KNOWN_ENEMY = 0x2,
  BOT_MEM_PATHING_AVOID_LOCATION = 0x3,
  BOT_MEM_PATHING_AVOID_RADIUS_LOS = 0x4,
  BOT_MEM_TYPE_COUNT = 0x5,
};

/* 729 */
enum bot_personality_t
{
  BOT_DEFAULT = 0x0,
  BOT_RUN_AND_GUN = 0x1,
  BOT_CQB = 0x2,
  BOT_CAMPER = 0x3,
  BOT_PERSONALITY_COUNT = 0x4,
};

/* 730 */
enum AnimationController
{
  ANIMCTRL_NONE = 0x0,
  ANIMCTRL_PLAYER = 0x1,
  ANIMCTRL_DOG = 0x2,
  ANIMCTRL_NUM = 0x3,
};

/* 731 */
enum AgentFlag
{
  AGENT_ALIVE = 0x1,
  AGENT_DEAD = 0x2,
  AGENT_FROZEN = 0x4,
  AGENT_ALLOW_USE = 0x8,
};

/* 732 */
enum ScrAgent_PathTraversalPermissionFlags
{
  SA_PATH_ALLOW_JUMP = 0x1,
  SA_PATH_ALLOW_LADDERS = 0x2,
  SA_PATH_ALLOW_CROUCH = 0x4,
  SA_PATH_ALLOW_PRONE = 0x8,
};

/* 733 */
enum proneCheckType_t
{
  PCT_CLIENT = 0x0,
  PCT_ACTOR = 0x1,
};

/* 734 */
enum FeetDirection
{
  FEETDIR_FRONT = 0x0,
  FEETDIR_BACK = 0x1,
  FEETDIR_COUNT = 0x2,
};

/* 735 */
enum PartyType
{
  GAME_LOBBY_ID = 0x0,
  PRIVATE_PARTY_ID = 0x1,
  ANY_PARTY_ID = 0x2,
};

/* 736 */
enum MigrationState
{
  MSTATE_INACTIVE = 0x0,
  MSTATE_STARTING = 0x1,
  MSTATE_BANDWIDTH = 0x2,
  MSTATE_HEADER = 0x3,
  MSTATE_SENDING = 0x4,
  MSTATE_FINALIZING = 0x5,
};

/* 737 */
enum MigrationClientState
{
  CSTATE_INACTIVE = 0x0,
  CSTATE_WAITFORRATING = 0x1,
  CSTATE_MIGRATING = 0x2,
};

/* 738 */
enum MigrationVerboseState
{
  MVSTATE_INACTIVE = 0x0,
  MVSTATE_WAITING = 0x1,
  MVSTATE_RATING = 0x2,
  MVSTATE_SENDING = 0x3,
  MVSTATE_MIGRATING = 0x4,
  MVSTATE_COUNT = 0x5,
};

/* 739 */
enum SaveHandleType
{
  SAVE_MIGRATION_HANDLE = 0x0,
};

/* 740 */
enum P2PAuthTimeoutCounter
{
  P2P_TIMEOUT_TICKET_INIT_WAIT = 0x0,
  P2P_TIMEOUT_TICKET_REQUEST = 0x1,
  P2P_TIMEOUT_TICKET_RECEIVED = 0x2,
  P2P_TIMEOUT_TICKET_AUTH = 0x3,
  P2P_TIMEOUT_COUNT = 0x4,
};

/* 741 */
enum P2PAuthRetryCounter
{
  P2P_RETRY_BEGIN_AUTH_FAILED = 0x0,
  P2P_RETRY_AUTH_FAILED_INVALID_TICKET = 0x1,
  P2P_RETRY_RECEIVED_INVALID_TICKET = 0x2,
  P2P_RETRY_REMOTE_TICKET_REQ_TIMEOUT = 0x3,
  P2P_RETRY_COUNT = 0x4,
};

/* 742 */
enum $4F73B99E14CEE25AEDAE39E1B700AAED
{
  LOAD_LEVEL_MAP_START = 0x0,
  LOAD_LEVEL_MIDDLE = 0x1,
  LOAD_LEVEL_TRANSIENT = 0x2,
};

/* 743 */
enum $8BD2BB643732DCFD88A30AAA9F08D154
{
  GAMEMODE_NONE = 0x0,
  GAMEMODE_SP = 0x1,
  GAMEMODE_SO = 0x2,
  GAMEMODE_MP = 0x3,
  NUM_GAMEMODES = 0x4,
};

/* 744 */
enum $F1EC995512C3A3AC740705E060E5B3C5
{
  PA_UNVALIDATED = 0x0,
  PA_VALID = 0x1,
  PA_INVALID = 0x2,
};

/* 745 */
enum bot_scr_buttons_t
{
  BOT_SCR_BUTTON_USE = 0x0,
  BOT_SCR_BUTTON_ATTACK = 0x1,
  BOT_SCR_BUTTON_JUMP = 0x2,
  BOT_SCR_BUTTON_MELEE = 0x3,
  BOT_SCR_BUTTON_ADS = 0x4,
  BOT_SCR_BUTTON_LETHAL = 0x5,
  BOT_SCR_BUTTON_TACTICAL = 0x6,
  BOT_SCR_BUTTON_COUNT = 0x7,
};

/* 746 */
enum bot_scr_flag_t
{
  BOT_SCR_FLAG_SEPARATION = 0x0,
  BOT_SCR_FLAG_HIDE_INDOORS = 0x1,
  BOT_SCR_FLAG_DISABLE_MOVEMENT = 0x2,
  BOT_SCR_FLAG_DISABLE_ROTATION = 0x3,
  BOT_SCR_FLAG_FORCE_SPRINT = 0x4,
  BOT_SCR_FLAG_CAUTIOUS = 0x5,
  BOT_SCR_FLAG_GRENADE_OBJECTIVES = 0x6,
  BOT_SCR_FLAG_DISABLE_STAND = 0x7,
  BOT_SCR_FLAG_DISABLE_CROUCH = 0x8,
  BOT_SCR_FLAG_DISABLE_PRONE = 0x9,
  BOT_SCR_FLAG_USE_OBJ_PATH_STYLE = 0xA,
  BOT_SCR_FLAG_PREFER_MELEE = 0xB,
  BOT_SCR_FLAG_THROW_KNIFE_MELEE = 0xC,
  BOT_SCR_FLAG_PREFER_SHIELD_OUT = 0xD,
  BOT_SCR_FLAG_PATH_MONSTER_CLIP = 0xE,
  BOT_SCR_FLAG_PATH_TRAVERSE_WAIT = 0xF,
  BOT_SCR_FLAG_NO_ENEMY_SEARCH = 0x10,
  BOT_SCR_FLAG_COUNT = 0x11,
};

/* 747 */
enum bot_zone_count_cmp_type_t
{
  BOT_ZONE_COUNT_CMP_GREATER = 0x0,
  BOT_ZONE_COUNT_CMP_LESS = 0x1,
  BOT_ZONE_COUNT_CMP_COUNT = 0x2,
};

/* 748 */
enum $AC7CA907BC24469DB4EB5EEDB86896D0
{
  AI_KNOWN_EV_FOOTSTEP = 0x0,
  AI_KNOWN_EV_FOOTSTEP_WALK = 0x1,
  AI_KNOWN_EV_FOOTSTEP_SPRINT = 0x2,
  AI_KNOWN_EV_NEW_ENEMY = 0x3,
  AI_KNOWN_EV_PAIN = 0x4,
  AI_KNOWN_EV_DEATH = 0x5,
  AI_KNOWN_EV_EXPLOSION = 0x6,
  AI_KNOWN_EV_GRENADE_PING = 0x7,
  AI_KNOWN_EV_PROJECTILE_PING = 0x8,
  AI_KNOWN_EV_GUNSHOT = 0x9,
  AI_KNOWN_EV_GUNSHOT_TEAMMATE = 0xA,
  AI_KNOWN_EV_SILENCED_SHOT = 0xB,
  AI_KNOWN_EV_BULLET = 0xC,
  AI_KNOWN_EV_PROJECTILE_IMPACT = 0xD,
  AI_KNOWN_PERFECT_ENEMY_INFO = 0xE,
  AI_KNOWN_SPAWN_SHARE_INFO = 0xF,
  AI_KNOWN_FAVORITE_ENEMY = 0x10,
  AI_KNOWN_HIGHLY_AWARE_RADIUS = 0x11,
  AI_KNOWN_SET_ATTACKER = 0x12,
  AI_KNOWN_GET_ENEMY_INFO = 0x13,
  AI_KNOWN_GRENADE_ESCAPE = 0x14,
  AI_KNOWN_GRENADE_RETURN = 0x15,
  AI_KNOWN_EXPOSED_TOUCH = 0x16,
  AI_KNOWN_TURRET_TOUCH = 0x17,
  AI_KNOWN_CAN_SEE = 0x18,
  AI_KNOWN_RADAR = 0x19,
};

/* 749 */
enum bot_score_type_t
{
  BOT_SCORE_NONE = 0x0,
  BOT_SCORE_NODE_CAPTURE = 0x1,
  BOT_SCORE_NODE_PROTECT = 0x2,
  BOT_SCORE_NODE_GRENADE_FROM = 0x3,
  BOT_SCORE_NODE_GRENADE_TARGET = 0x4,
  BOT_SCORE_NODE_AMBUSH = 0x5,
  BOT_SCORE_NODE_SENTRY = 0x6,
  BOT_SCORE_NODE_TRAFFIC = 0x7,
  BOT_SCORE_NODE_EXPOSED = 0x8,
  BOT_SCORE_NODE_HIDE = 0x9,
  BOT_SCORE_NODE_HIDE_FROM = 0xA,
  BOT_SCORE_NODE_COMBAT = 0xB,
  BOT_SCORE_NODE_CAMP = 0xC,
  BOT_SCORE_NODE_TRAP = 0xD,
  BOT_SCORE_NODE_AERIAL_TARGET = 0xE,
  BOT_SCORE_NODE_EXPOSURE_VIS = 0xF,
  BOT_SCORE_TYPE_COUNT = 0x10,
};

/* 750 */
enum bot_score_flag_t
{
  BOT_SCORE_FLAG_IGNORE_OCCUPANCY = 0x0,
  BOT_SCORE_FLAG_IGNORE_NO_SKY = 0x1,
  BOT_SCORE_FLAG_IGNORE_SKY = 0x2,
  BOT_SCORE_FLAG_LENIENT = 0x3,
  BOT_SCORE_FLAG_STRICT_LOS = 0x4,
  BOT_SCORE_FLAG_DONT_CROSS_ISLANDS = 0x5,
  BOT_SCORE_FLAG_COUNT = 0x6,
};

/* 751 */
enum path_exposure_layer_e
{
  PATH_EXP_TYPE_STAND = 0x1,
  PATH_EXP_TYPE_CROUCH = 0x2,
  PATH_EXP_TYPE_PRONE = 0x4,
  PATH_EXP_TYPE_TRAFFIC = 0x8,
};

/* 752 */
enum $41CC92489D5455B54A8E059BA317021F
{
  MISSILEFLAG_DESTABILIZED = 0x1,
  MISSILEFLAG_LOCKED = 0x2,
  MISSILEFLAG_LOCK_TO_ENTITY = 0x4,
  MISSILEFLAG_LOCK_DUMBFIRE = 0x8,
  MISSILEFLAG_GAVE_UP_TRACKING = 0x10,
  MISSILEFLAG_BOOST_ENABLED = 0x20,
  MISSILEFLAG_BOOST_PERFORMED = 0x40,
  MISSILEFLAG_CLIENT_CONTROLLED = 0x80,
  MISSILEFLAG_CLIENT_CAN_BOOST = 0x100,
};

/* 753 */
enum $7FEA1D120499DF358C13CE2B1FAE0331
{
  WPLF_LOCK_STARTED = 0x1,
  WPLF_LOCK_SET = 0x2,
  WPLF_LOCK_ATTACK_TOP = 0x4,
  WPLF_LOCK_ATTACK_DIRECT = 0x8,
  WPLF_LOCK_TARGET_TOO_CLOSE = 0x10,
  WPLF_LOCK_NOT_ENOUGH_CLEARANCE = 0x20,
  WPLF_LOCK_TO_POSITION = 0x40,
  WEAPONLOCKFLAG_BITS = 0x7,
};

/* 754 */
enum ai_event_t
{
  AI_EV_BAD = 0x0,
  AI_EV_FIRST_POINT_EVENT = 0x1,
  AI_EV_FOOTSTEP = 0x2,
  AI_EV_FOOTSTEP_WALK = 0x3,
  AI_EV_FOOTSTEP_SPRINT = 0x4,
  AI_EV_NEW_ENEMY = 0x5,
  AI_EV_PAIN = 0x6,
  AI_EV_DEATH = 0x7,
  AI_EV_EXPLOSION = 0x8,
  AI_EV_GRENADE_PING = 0x9,
  AI_EV_PROJECTILE_PING = 0xA,
  AI_EV_GUNSHOT = 0xB,
  AI_EV_GUNSHOT_TEAMMATE = 0xC,
  AI_EV_SILENCED_SHOT = 0xD,
  AI_EV_LAST_POINT_EVENT = 0xE,
  AI_EV_FIRST_LINE_EVENT = 0xF,
  AI_EV_BULLET = 0x10,
  AI_EV_BLOCK_FRIENDLIES = 0x11,
  AI_EV_PROJECTILE_IMPACT = 0x12,
  AI_EV_LAST_LINE_EVENT = 0x13,
  AI_EV_FIRST_ARC_EVENT = 0x14,
  AI_EV_BADPLACE_ARC = 0x15,
  AI_EV_LAST_ARC_EVENT = 0x16,
  AI_EV_FIRST_VOLUME_EVENT = 0x17,
  AI_EV_BADPLACE_VOLUME = 0x18,
  AI_EV_LAST_VOLUME_EVENT = 0x19,
  AI_EV_FIRST_GLOBAL_EVENT = 0x1A,
  AI_EV_BADPLACE_GLOBAL = 0x1B,
  AI_EV_LAST_GLOBAL_EVENT = 0x1C,
  AI_EV_NUM_EVENTS = 0x1D,
};

/* 755 */
enum $10221E9CD40242F44FE1BCAF70F976BC
{
  BADPLACE_INVALID = 0x0,
  BADPLACE_ARC = 0x1,
  BADPLACE_BRUSH = 0x2,
  BADPLACE_GLOBAL = 0x3,
};

/* 756 */
enum $770D47674020E9804D156A2B593888A0
{
  IMPACTEFFECT_HEADSHOT = 0x1,
  IMPACTEFFECT_FATAL = 0x2,
  IMPACTEFFECT_EXIT = 0x4,
  IMPACTEFFECT_NOVISUAL = 0x8,
  IMPACTEFFECT_NOSOUND = 0x10,
  IMPACTEFFECT_SOFT = 0x20,
  IMPACTEFFECT_AGENT = 0x40,
  IMPACTEFFECT_LAST = 0x80,
};

/* 757 */
enum AnimUpdateFlag
{
  ANIM_UPDATE_FLAG_NONE = 0x0,
  ANIM_UPDATE_FLAG_INIT = 0x1,
  ANIM_UPDATE_FLAG_FORCE = 0x2,
  ANIM_UPDATE_FLAG_NOBLEND = 0x4,
  ANIM_UPDATE_FLAG_RESTART = 0x8,
};

/* 758 */
enum SentientType
{
  ST_ACTOR = 0x0,
  ST_PLAYER = 0x1,
  ST_OTHER = 0x2,
  ST_OTHER_EXPENDABLE = 0x3,
};

/* 759 */
enum PlayerSpreadOverrideState
{
  PSOS_DISABLED = 0x0,
  PSOS_RESETTING = 0x1,
  PSOS_ENABLED = 0x2,
};

/* 760 */
enum $3CAED30AA3C6248BF44EE7533D9518C9
{
  MAX_VM_STACK_DEPTH = 0x20,
  MAX_VM_OPERAND_STACK = 0x800,
  LOCAL_VAR_STACK_SIZE = 0x40,
};

/* 761 */
enum $BA9F847B460546ED7BFFDBCD5B0768E1
{
  SCR_XANIM_CLIENT = 0x0,
  SCR_XANIM_SERVER = 0x1,
  SCR_XANIM_COUNT = 0x2,
};

/* 762 */
enum $2A7DE7B24A36182858DD1F3974533164
{
  OP_SetNewLocalVariableFieldCached0 = 0x17,
  OP_EvalSelfFieldVariable = 0x18,
  OP_Return = 0x19,
  OP_CallBuiltin0 = 0x1A,
  OP_CallBuiltin1 = 0x1B,
  OP_CallBuiltin2 = 0x1C,
  OP_CallBuiltin3 = 0x1D,
  OP_CallBuiltin4 = 0x1E,
  OP_CallBuiltin5 = 0x1F,
  OP_CallBuiltin = 0x20,
  OP_BoolNot = 0x21,
  OP_ScriptFarMethodThreadCall = 0x22,
  OP_JumpOnTrueExpr = 0x23,
  OP_SetLevelFieldVariableField = 0x24,
  OP_CastBool = 0x25,
  OP_EvalNewLocalArrayRefCached0 = 0x26,
  OP_CallBuiltinPointer = 0x27,
  OP_inequality = 0x28,
  OP_GetThisthread = 0x29,
  OP_ClearFieldVariable = 0x2A,
  OP_GetFloat = 0x2B,
  OP_SafeCreateVariableFieldCached = 0x2C,
  OP_ScriptFarFunctionCall2 = 0x2D,
  OP_ScriptFarFunctionCall = 0x2E,
  OP_ScriptFarChildThreadCall = 0x2F,
  OP_ClearLocalVariableFieldCached0 = 0x30,
  OP_ClearLocalVariableFieldCached = 0x31,
  OP_checkclearparams = 0x32,
  OP_CastFieldObject = 0x33,
  OP_End = 0x34,
  OP_size = 0x35,
  OP_EmptyArray = 0x36,
  OP_bit_and = 0x37,
  OP_less_equal = 0x38,
  OP_voidCodepos = 0x39,
  OP_ScriptMethodThreadCallPointer = 0x3A,
  OP_endswitch = 0x3B,
  OP_ClearVariableField = 0x3C,
  OP_divide = 0x3D,
  OP_ScriptFarMethodChildThreadCall = 0x3E,
  OP_GetUnsignedShort = 0x3F,
  OP_JumpOnTrue = 0x40,
  OP_GetSelf = 0x41,
  OP_ScriptFarThreadCall = 0x42,
  OP_ScriptLocalThreadCall = 0x43,
  OP_SetLocalVariableFieldCached0 = 0x44,
  OP_SetLocalVariableFieldCached = 0x45,
  OP_plus = 0x46,
  OP_BoolComplement = 0x47,
  OP_ScriptMethodCallPointer = 0x48,
  OP_inc = 0x49,
  OP_RemoveLocalVariables = 0x4A,
  OP_JumpOnFalseExpr = 0x4B,
  OP_switch = 0x4C,
  OP_clearparams = 0x4D,
  OP_EvalLocalVariableRefCached0 = 0x4E,
  OP_EvalLocalVariableRefCached = 0x4F,
  OP_ScriptLocalMethodCall = 0x50,
  OP_EvalFieldVariable = 0x51,
  OP_EvalFieldVariableRef = 0x52,
  OP_GetString = 0x53,
  OP_ScriptFunctionCallPointer = 0x54,
  OP_EvalLevelFieldVariable = 0x55,
  OP_GetVector = 0x56,
  OP_endon = 0x57,
  OP_greater_equal = 0x58,
  OP_GetSelfObject = 0x59,
  OP_SetAnimFieldVariableField = 0x5A,
  OP_SetVariableField = 0x5B,
  OP_ScriptLocalFunctionCall2 = 0x5C,
  OP_ScriptLocalFunctionCall = 0x5D,
  OP_EvalLocalArrayRefCached0 = 0x5E,
  OP_EvalLocalArrayRefCached = 0x5F,
  OP_GetFarFunction = 0x60,
  OP_less = 0x61,
  OP_GetGameRef = 0x62,
  OP_waittillFrameEnd = 0x63,
  OP_SafeSetVariableFieldCached0 = 0x64,
  OP_SafeSetVariableFieldCached = 0x65,
  OP_ScriptMethodChildThreadCallPointer = 0x66,
  OP_GetLevel = 0x67,
  OP_notify = 0x68,
  OP_DecTop = 0x69,
  OP_shift_left = 0x6A,
  OP_ScriptLocalMethodThreadCall = 0x6B,
  OP_ScriptLocalMethodChildThreadCall = 0x6C,
  OP_greater = 0x6D,
  OP_EvalLocalVariableCached0 = 0x6E,
  OP_EvalLocalVariableCached1 = 0x6F,
  OP_EvalLocalVariableCached2 = 0x70,
  OP_EvalLocalVariableCached3 = 0x71,
  OP_EvalLocalVariableCached4 = 0x72,
  OP_EvalLocalVariableCached5 = 0x73,
  OP_EvalLocalVariableCached = 0x74,
  OP_SafeSetWaittillVariableFieldCached = 0x75,
  OP_jump = 0x76,
  OP_ScriptThreadCallPointer = 0x77,
  OP_GetZero = 0x78,
  OP_wait = 0x79,
  OP_minus = 0x7A,
  OP_SetSelfFieldVariableField = 0x7B,
  OP_EvalNewLocalVariableRefCached0 = 0x7C,
  OP_multiply = 0x7D,
  OP_CreateLocalVariable = 0x7E,
  OP_ScriptLocalChildThreadCall = 0x7F,
  OP_GetInteger = 0x80,
  OP_mod = 0x81,
  OP_EvalAnimFieldVariableRef = 0x82,
  OP_GetBuiltinFunction = 0x83,
  OP_GetGame = 0x84,
  OP_waittill = 0x85,
  OP_dec = 0x86,
  OP_EvalLocalVariableObjectCached = 0x87,
  OP_PreScriptCall = 0x88,
  OP_GetAnim = 0x89,
  OP_GetUndefined = 0x8A,
  OP_EvalLevelFieldVariableRef = 0x8B,
  OP_GetAnimObject = 0x8C,
  OP_GetLevelObject = 0x8D,
  OP_bit_ex_or = 0x8E,
  OP_equality = 0x8F,
  OP_ClearArray = 0x90,
  OP_jumpback = 0x91,
  OP_GetAnimation = 0x92,
  OP_EvalAnimFieldVariable = 0x93,
  OP_GetAnimTree = 0x94,
  OP_GetIString = 0x95,
  OP_EvalArrayRef = 0x96,
  OP_EvalSelfFieldVariableRef = 0x97,
  OP_GetNegByte = 0x98,
  OP_GetBuiltinMethod = 0x99,
  OP_CallBuiltinMethodPointer = 0x9A,
  OP_EvalArray = 0x9B,
  OP_vector = 0x9C,
  OP_ScriptFarMethodCall = 0x9D,
  OP_EvalLocalArrayCached = 0x9E,
  OP_GetByte = 0x9F,
  OP_ScriptChildThreadCallPointer = 0xA0,
  OP_bit_or = 0xA1,
  OP_AddArray = 0xA2,
  OP_waittillmatch2 = 0xA3,
  OP_waittillmatch = 0xA4,
  OP_GetLocalFunction = 0xA5,
  OP_GetNegUnsignedShort = 0xA6,
  OP_shift_right = 0xA7,
  OP_CallBuiltinMethod0 = 0xA8,
  OP_CallBuiltinMethod1 = 0xA9,
  OP_CallBuiltinMethod2 = 0xAA,
  OP_CallBuiltinMethod3 = 0xAB,
  OP_CallBuiltinMethod4 = 0xAC,
  OP_CallBuiltinMethod5 = 0xAD,
  OP_CallBuiltinMethod = 0xAE,
  OP_JumpOnFalse = 0xAF,
  OP_count = 0xB0,
};

/* 763 */
enum $4EF2ED37309DF94BFB70F58A8A7316D8
{
  VAR_NAME_BITS = 0x8,
  VAR_NAME_LOW_MASK = 0xFFFFFF,
  VAR_NAME_HIGH_MASK = 0xFFFFFF00,
  VAR_MIN_INT = 0xFF800000,
  VAR_MAX_INT = 0x7FFFFF,
};

/* 764 */
enum $78DA8CC87E663E02C76C947AB087BE0A
{
  VAR_MASK = 0xFF,
};

/* 765 */
enum $14FEA52D8D4624579185BF094EAFD471
{
  HASH_STAT_FREE = 0x0,
  HASH_STAT_MOVABLE = 0x40000,
  HASH_STAT_HEAD = 0x80000,
  HASH_STAT_MASK = 0xC0000,
};

/* 766 */
enum $6A33E9D3ED457A040343283F5E6E7CF2
{
  HASH_NEXT_MASK = 0x3FFFF,
};

/* 767 */
enum $6156218400BF35F5A891B149BA6ABAFE
{
  SAVE_OBJECT_DEFAULT = 0x0,
  SAVE_OBJECT_THREAD = 0x1,
  SAVE_OBJECT_NOTIFY_THREAD = 0x2,
  SAVE_OBJECT_TIME_THREAD = 0x3,
  SAVE_OBJECT_CHILD_THREAD = 0x4,
  SAVE_OBJECT_DEAD_ENTITY = 0x5,
};

/* 768 */
enum $97F44CCB984D8F626C42854014D497EA
{
  THREAD_COUNT = 0x0,
  THREAD_INDICES = 0x1,
};

/* 769 */
enum $C096FBC08B2001022F577565A6E1DD48
{
  ANIMTREE_NAMES = 0x0,
  ANIMTREE_XANIM = 0x1,
};

/* 770 */
enum $6760350A3E11919D25BD877F859BD6F6
{
  ANIMTREE_PROPERTIES = 0x0,
};

/* 771 */
enum $27ADEAEF7BB6C93A4813D4AB6AC88913
{
  ANIMPROP_LOOPSYNC = 0x0,
  ANIMPROP_NONLOOPSYNC = 0x1,
  ANIMPROP_COMPLETE = 0x2,
  ANIMPROP_ADDITIVE = 0x3,
  ANIMPROP_COUNT = 0x4,
};

/* 772 */
enum ScriptableContext
{
  SBL_CONTEXT_SERVER = 0x0,
  SBL_CONTEXT_CLIENT_0 = 0x1,
  SBL_CONTEXT_COUNT = 0x2,
};

/* 773 */
enum ScriptableDamageFlags
{
  SCRIPTABLE_DMG_SRC_STANDARD = 0x1,
  SCRIPTABLE_DMG_SRC_SPLASH = 0x2,
  SCRIPTABLE_DMG_SRC_MELEE = 0x4,
  SCRIPTABLE_DMG_ATK_PLAYER = 0x8,
  SCRIPTABLE_DMG_ATK_AI = 0x10,
  SCRIPTABLE_DMG_ATK_OTHER = 0x20,
  SCRIPTABLE_DMG_LAST = 0x20,
};

/* 774 */
enum ScriptableEventField
{
  SFT_EVENT_STATE_TARGET = 0x0,
  SFT_EVENT_STATE_DELAYMIN = 0x1,
  SFT_EVENT_STATE_DELAYMAX = 0x2,
  SFT_EVENT_MODEL_NAME = 0x3,
  SFT_EVENT_FX_PATH = 0x4,
  SFT_EVENT_FX_LOOPTIME = 0x5,
  SFT_EVENT_FX_TAGNAME = 0x6,
  SFT_EVENT_FX_TAGUSEANGLES = 0x7,
  SFT_EVENT_SOUND_ALIAS = 0x8,
  SFT_EVENT_SOUND_LOOPING = 0x9,
  SFT_EVENT_ANIM_NAME = 0xA,
  SFT_EVENT_ANIM_OVERRIDE = 0xB,
  SFT_EVENT_ANIM_STATEFUL = 0xC,
  SFT_EVENT_ANIM_STARTMINTIME = 0xD,
  SFT_EVENT_ANIM_STARTMAXTIME = 0xE,
  SFT_EVENT_ANIM_PLAYBACKRATEMIN = 0xF,
  SFT_EVENT_ANIM_PLAYBACKRATEMAX = 0x10,
  SFT_EVENT_ANIM_BLENDTIME = 0x11,
  SFT_EVENT_EXPLODE_FORCEMIN = 0x12,
  SFT_EVENT_EXPLODE_FORCEMAX = 0x13,
  SFT_EVENT_EXPLODE_RADIUSSP = 0x14,
  SFT_EVENT_EXPLODE_RADIUSMP = 0x15,
  SFT_EVENT_EXPLODE_DMGMIN = 0x16,
  SFT_EVENT_EXPLODE_DMGMAX = 0x17,
  SFT_EVENT_EXPLODE_AI_AVOID = 0x18,
  SFT_EVENT_DOT_AMOUNT = 0x19,
  SFT_EVENT_DOT_INTERVAL = 0x1A,
  SFT_EVENT_LIGHT_NOTEWORTHY = 0x1B,
  SFT_EVENT_LIGHT_INTENSITY_SCALE_MIN = 0x1C,
  SFT_EVENT_LIGHT_INTENSITY_SCALE_MAX = 0x1D,
  SFT_EVENT_LIGHT_RADIUS_SCALE_MIN = 0x1E,
  SFT_EVENT_LIGHT_RADIUS_SCALE_MAX = 0x1F,
  SFT_EVENT_LIGHT_COLOR_CHANGE = 0x20,
  SFT_EVENT_LIGHT_COLOR = 0x21,
  SFT_EVENT_LIGHT_TRANS_TIME_MIN = 0x22,
  SFT_EVENT_LIGHT_TRANS_TIME_MAX = 0x23,
  SFT_EVENT_LIGHT_TRANS_TIME_USE_STATE = 0x24,
  SFT_TYPE_COUNT = 0x25,
};

/* 775 */
enum ScriptableEventField_SunlightSettings
{
  SFTSUN_EVENT_SUNLIGHT_USE_COLOR = 0x0,
  SFTSUN_EVENT_SUNLIGHT_USE_INTENSITY = 0x1,
  SFTSUN_EVENT_SUNLIGHT_USE_DIRECTION = 0x2,
  SFTSUN_EVENT_SUNLIGHT_USE_TRANS_STATE = 0x3,
  SFTSUN_EVENT_SUNLIGHT_COLOR = 0x4,
  SFTSUN_EVENT_SUNLIGHT_INTENSITY_SCALE_MIN = 0x5,
  SFTSUN_EVENT_SUNLIGHT_INTENSITY_SCALE_MAX = 0x6,
  SFTSUN_EVENT_SUNLIGHT_PITCH_MIN = 0x7,
  SFTSUN_EVENT_SUNLIGHT_PITCH_MAX = 0x8,
  SFTSUN_EVENT_SUNLIGHT_HEADING_MIN = 0x9,
  SFTSUN_EVENT_SUNLIGHT_HEADING_MAX = 0xA,
  SFTSUN_EVENT_SUNLIGHT_TRANS_TIME_MIN = 0xB,
  SFTSUN_EVENT_SUNLIGHT_TRANS_TIME_MAX = 0xC,
  SFTSUN_COUNT = 0xD,
};

/* 776 */
enum ScriptableEventField_Shake
{
  SFTSHAKE_EVENT_RUMBLE_NAME = 0x0,
  SFTSHAKE_EVENT_DURATION = 0x1,
  SFTSHAKE_EVENT_DURATION_FADE_UP = 0x2,
  SFTSHAKE_EVENT_DURATION_FADE_DOWN = 0x3,
  SFTSHAKE_EVENT_RADIUS = 0x4,
  SFTSHAKE_EVENT_EXPONENT = 0x5,
  SFTSHAKE_EVENT_SCALE_EARTHQUAKE = 0x6,
  SFTSHAKE_EVENT_SCALE_PITCH = 0x7,
  SFTSHAKE_EVENT_SCALE_YAW = 0x8,
  SFTSHAKE_EVENT_SCALE_ROLL = 0x9,
  SFTSHAKE_EVENT_FREQUENCY_PITCH = 0xA,
  SFTSHAKE_EVENT_FREQUENCY_YAW = 0xB,
  SFTSHAKE_EVENT_FREQUENCY_ROLL = 0xC,
  SFTSHAKE_EVENT_IS_EARTHQUAKE = 0xD,
  SFTSHAKE_EVENT_IS_SCREEN_SHAKE = 0xE,
  SFTSHAKE_EVENT_IS_RUMBLE = 0xF,
  SFTSHAKE_COUNT = 0x10,
};

/* 777 */
enum ScriptableNotetrackField_Fx
{
  SNTF_FX_PATH = 0x0,
  SNTF_FX_TAGNAME = 0x1,
  SNTF_FX_TAGUSEANGLES = 0x2,
  SNTF_FX_COUNT = 0x3,
};

/* 778 */
enum ScriptableNotetrackField_Sound
{
  SNTF_SOUND_ALIAS = 0x0,
  SNTF_SOUND_COUNT = 0x1,
};

/* 779 */
enum ScriptableFieldType
{
  SFT_BOOL = 0x0,
  SFT_BYTE = 0x1,
  SFT_USHORT = 0x2,
  SFT_USHORT_TIME = 0x3,
  SFT_USHORT_SCALE = 0x4,
  SFT_USHORT_ANGLE = 0x5,
  SFT_FLOAT = 0x6,
  SFT_COLOR = 0x7,
  SFT_RUMBLE = 0x8,
  SFT_MODEL = 0x9,
  SFT_TAGNAME = 0xA,
  SFT_FX_PATH = 0xB,
  SFT_SOUND_ALIAS = 0xC,
  SFT_CUSTOM = 0xD,
  SFT_COUNT = 0xE,
};

/* 780 */
enum scriptAnimNoteType_t
{
  ANIM_NOTE_NONE = 0x0,
  ANIM_NOTE_RELOAD = 0x1,
  ANIM_NOTE_ANIMSTATE = 0x2,
  ANIM_NOTE_SCRIPTABLE = 0x3,
  NUM_ANIM_NOTES = 0x4,
};

/* 781 */
enum $9D99CB359CA7A9F71E479CB4A12A7C4B
{
  SERVER_CONTEXT_NONE = 0x0,
  SERVER_CONTEXT_SERVER = 0x1,
  SERVER_CONTEXT_MAIN = 0x2,
};

/* 782 */
enum $B2778AB4851445F9DD200ECE4C4FB15A
{
  BACKEND_EVENT_WORKER_CMD = 0x0,
  BACKEND_EVENT_GENERIC = 0x1,
  BACKEND_EVENT_COUNT = 0x2,
};

/* 783 */
enum $8C007691598125965BF7171F029B855E
{
  SND_TRACK_MUSIC_0 = 0x0,
  SND_TRACK_MUSIC_1 = 0x1,
  SND_TRACK_AMBIENT_PRIMARY_0 = 0x2,
  SND_TRACK_AMBIENT_SECONDARY_0 = 0x3,
  SND_TRACK_AMBIENT_PRIMARY_1 = 0x4,
  SND_TRACK_AMBIENT_SECONDARY_1 = 0x5,
  SND_TRACK_COUNT = 0x6,
};

/* 784 */
enum $97B26ECDEA34F6477DC8F54C0235A625
{
  HUDELEMFLAG_FOREGROUND = 0x1,
  HUDELEMFLAG_HIDEWHENDEAD = 0x2,
  HUDELEMFLAG_HIDEWHENINMENU = 0x4,
  HUDELEMFLAG_WAYPOINT_PINTOEDGE = 0x8,
  HUDELEMFLAG_WAYPOINT_FADEATEDGE = 0x10,
  HUDELEMFLAG_WAYPOINT_ROTATEATEDGE = 0x20,
  HUDELEMFLAG_WAYPOINT_OFFSCREENONLY = 0x40,
  HUDELEMFLAG_LOWRES_BACKGROUND = 0x100,
  HUDELEMFLAG_IS_CONSTANTSIZE = 0x200,
  HUDELEMFLAG_DRAW_3D = 0x400,
  HUDELEMFLAG_HIDEWHENIN3RDPERSON = 0x800,
  HUDELEMFLAG_HIDEWHENINDEMO = 0x1000,
  HUDELEMFLAG_ENTITY_LINKED = 0x2000,
  HUDELEMFLAG_HUDLIGHTING = 0x4000,
  HUDELEMFLAGBITS = 0xF,
};

/* 785 */
enum netFieldTypes_t
{
  NET_FIELD_TYPE_ARCHIVED_ENTITY = 0x0,
  NET_FIELD_TYPE_CLIENT_STATE = 0x1,
  NET_FIELD_TYPE_AGENT_STATE = 0x2,
  NET_FIELD_TYPE_PLAYERSTATE = 0x3,
  NET_FIELD_TYPE_OBJECTIVE = 0x4,
  NET_FIELD_TYPE_HUDELEMS = 0x5,
  NET_FIELD_TYPE_ENTITY_STATE = 0x6,
  NET_FIELD_TYPE_COUNT = 0x7,
};

/* 786 */
enum objectiveState_t
{
  OBJST_EMPTY = 0x0,
  OBJST_ACTIVE = 0x1,
  OBJST_INVISIBLE = 0x2,
  OBJST_DONE = 0x3,
  OBJST_CURRENT = 0x4,
  OBJST_FAILED = 0x5,
  OBJST_NUMSTATES = 0x6,
};

/* 787 */
enum DataReadState
{
  DATA_READ_BLACK_OPS2 = 0x0,
  DATA_READ_MODERN_WARFARE3 = 0x1,
  DATA_READ_MAX_TITLES = 0x2,
};

/* 788 */
enum PastTitleStats
{
  PAST_TITLE_STATS_PLAYED = 0x0,
  PAST_TITLE_STATS_PRESTIGE = 0x1,
  PAST_TITLE_STATS_NEXT_READ_TIME = 0x2,
};

/* 789 */
enum DBSyncMode
{
  DB_LOAD_ASYNC = 0x0,
  DB_LOAD_SYNC = 0x1,
  DB_LOAD_ASYNC_WAIT_ALLOC = 0x2,
  DB_LOAD_ASYNC_FORCE_FREE = 0x3,
  DB_LOAD_ASYNC_NO_SYNC_THREADS = 0x4,
  DB_LOAD_SYNC_SKIP_ALWAYS_LOADED = 0x5,
};

/* 790 */
enum $08CDCBEF93D76ABC2971F255E051D0EA
{
  SLOW_MOTION_LINEAR = 0x0,
};

/* 791 */
enum StreamSyncExchangeBuffers
{
  SYNC_EXCHANGE_BUF_WRITE = 0x0,
  SYNC_EXCHANGE_BUF_READ = 0x1,
  SYNC_EXCHANGE_BUF_SWAP = 0x2,
  SYNC_EXCHANGE_BUF_COUNT = 0x3,
};

/* 792 */
enum ResetStatsReason
{
  RESET_STATS_REASON_CORRUPT_OFFLINE = 0x0,
  RESET_STATS_REASON_CORRUPT_ONLINE = 0x1,
  RESET_STATS_REASON_BAD_FILE_VERSION = 0x2,
  RESET_STATS_REASON_BAD_PLAYERDATA_VERSION = 0x3,
  RESET_STATS_REASON_ONLINE_STATS_RESET = 0x4,
};

/* 793 */
enum ContentServerInitState
{
  CS_NOT_INITIALIZED = 0x1,
  CS_DW_INITIALIZED = 0x2,
  CS_INITIALIZED = 0x4,
};

/* 794 */
enum ContentServerMemoryAllocationState
{
  CS_NO_MEMORY_ALLOCATED = 0x1,
  CS_PRIMARY_PRIVATE_DATA_MEMORY_ALLOCATED = 0x2,
  CS_SECONDARY_PRIVATE_DATA_MEMORY_ALLOCATED = 0x4,
  CS_LIST_TASK_ARRAY_ALLOCATED = 0x8,
  CS_SEARCH_TASK_MEMORY_ALLOCATED = 0x10,
  CS_DESCRIPTORS_TASK_MEMORY_ALLOCATED = 0x20,
  CS_READ_FILE_TASK_MEMORY_ALLOCATED = 0x40,
  CS_WRITE_FILE_TASK_MEMORY_ALLOCATED = 0x80,
  CS_SET_TAG_TASK_MEMORY_ALLOCATED = 0x100,
  CS_REMOVE_FILE_TASK_MEMORY_ALLOCATED = 0x200,
  CS_COPY_FILE_TASK_MEMORY_ALLOCATED = 0x400,
  CS_UPLOAD_SUMMARY_TASK_MEMORY_ALLOCATED = 0x800,
  CS_DOWNLOAD_SUMMARY_TASK_MEMORY_ALLOCATED = 0x1000,
  CS_LIST_PUBLISHER_FILES_TASK_MEMORY_ALLOCATED = 0x100000,
  CS_DOWNLOAD_PUBLISHER_FILE_TASK_MEMORY_ALLOCATED = 0x200000,
  CS_ALL_MEMORY_ALLOCATED = 0x400000,
};

/* 795 */
enum $99C9D7029576FE69EE399FC7F843DA10
{
  PLAYLIST_AGGR_HEADER_VERSION = 0x0,
  PLAYLIST_AGGR_HEADER_PLAYLISTOFFSET = 0x1,
  PLAYLIST_AGGR_HEADER_PLAYLISTLENGTH = 0x2,
  PLAYLIST_AGGR_HEADER_RECIPECOUNT = 0x3,
  PLAYLIST_AGGR_HEADER_START_OF_RECIPES_DATA = 0x4,
};

/* 796 */
enum $E8E0781AB1C4CBA2111AE51A76C8B412
{
  CAC_STRING_ARG_SQUAD_MEMBERS_CHANGED = 0x0,
  CAC_STRING_ARG_LOADOUTS_CHANGED = 0x1,
  CAC_STRING_ARG_MODIFIED_DAY = 0x2,
  CAC_STRING_ARG_MODIFIED_MONTH = 0x3,
  CAC_STRING_ARG_MODIFIED_YEAR = 0x4,
  CAC_STRING_ARG_COUNT = 0x5,
};

/* 797 */
enum VaultPrimaryTags
{
  VAULT_PRITAG_GAMETYPE = 0x0,
  VAULT_PRITAG_MAP = 0x1,
  VAULT_PRITAG_TYPE = 0x2,
  VAULT_PRITAG_AUTHORXUID = 0x3,
  VAULT_PRITAG_XUIDS = 0x4,
  VAULT_PRITAG_USERTAG = 0x5,
  VAULT_PRITAG_FINGERPRINT = 0x6,
  VAULT_PRITAG_MATCHID = 0x7,
  VAULT_PRITAG_MATCHSUMMARYTYPE = 0x8,
  VAULT_PRITAG_GAMETYPE_RAW = 0x9,
};

/* 798 */
enum ReservedRankedDataByteValues
{
  RANKED_PRESTIGE = 0x0,
  RANKED_DLC_EGG_STATUS = 0x4,
  RANKED_KD_HISTORY_K0 = 0x8,
  RANKED_KD_HISTORY_D0 = 0x9,
  RANKED_KD_HISTORY_K1 = 0xA,
  RANKED_KD_HISTORY_D1 = 0xB,
  RANKED_KD_HISTORY_K2 = 0xC,
  RANKED_KD_HISTORY_D2 = 0xD,
  RANKED_KD_HISTORY_K3 = 0xE,
  RANKED_KD_HISTORY_D3 = 0xF,
  RANKED_KD_HISTORY_K4 = 0x10,
  RANKED_KD_HISTORY_D4 = 0x11,
};

/* 799 */
enum ReservedCoopDataByteValues
{
  INTEL_EPISODE_1_LOCATION_1 = 0x0,
  INTEL_EPISODE_1_LOCATION_2 = 0x1,
  INTEL_EPISODE_1_LOCATION_3 = 0x2,
  INTEL_EPISODE_1_LOCATION_4 = 0x3,
  INTEL_EPISODE_1_LOCATION_5 = 0x4,
  INTEL_EPISODE_1_LOCATION_6 = 0x5,
  INTEL_EPISODE_1_SEQUENCED_COUNT = 0x6,
  INTEL_EPISODE_2_LOCATION_1 = 0x7,
  INTEL_EPISODE_2_LOCATION_2 = 0x8,
  INTEL_EPISODE_2_LOCATION_3 = 0x9,
  INTEL_EPISODE_2_LOCATION_4 = 0xA,
  INTEL_EPISODE_2_LOCATION_5 = 0xB,
  INTEL_EPISODE_2_LOCATION_6 = 0xC,
  INTEL_EPISODE_2_SEQUENCED_COUNT = 0xD,
  INTEL_EPISODE_3_LOCATION_1 = 0xE,
  INTEL_EPISODE_3_LOCATION_2 = 0xF,
  INTEL_EPISODE_3_LOCATION_3 = 0x10,
  INTEL_EPISODE_3_LOCATION_4 = 0x11,
  INTEL_EPISODE_3_LOCATION_5 = 0x12,
  INTEL_EPISODE_3_LOCATION_6 = 0x13,
  INTEL_EPISODE_3_SEQUENCED_COUNT = 0x14,
  INTEL_EPISODE_4_LOCATION_1 = 0x15,
  INTEL_EPISODE_4_LOCATION_2 = 0x16,
  INTEL_EPISODE_4_LOCATION_3 = 0x17,
  INTEL_EPISODE_4_LOCATION_4 = 0x18,
  INTEL_EPISODE_4_LOCATION_5 = 0x19,
  INTEL_EPISODE_4_LOCATION_6 = 0x1A,
  INTEL_EPISODE_4_SEQUENCED_COUNT = 0x1B,
  HAS_SEEN_DISCOVERY_INTRO = 0x1C,
  HAS_SEEN_DISCOVERY_OUTRO = 0x1D,
  EXTINCTION_TOKENS = 0x1E,
  EXTINCTION_PURCHASE_FLAGS = 0x22,
};

/* 800 */
enum ReservedCommonDataByteValues
{
  COMMON_ENTITLEMENT_XP = 0x0,
  COMMON_CLAN_WARS_BONUS_XP = 0x4,
  COMMON_SEASON_PASS_COUNT = 0x8,
  COMMON_WELCOME_SCREEN_COUNT = 0x9,
  COMMON_MOUNTED_DLC_BITS = 0xA,
  COMMON_COD_ANYWHERE_SCREEN_COUNT = 0xB,
  COMMON_MOTD_DAY = 0xC,
  COMMON_MOTD_MONTH = 0xD,
  COMMON_SP_UPSELL_VIEW_TIME_0 = 0xE,
  COMMON_SP_UPSELL_ACTION_0 = 0xF,
  COMMON_SP_UPSELL_OPEN_TIMESTAMP_0 = 0x10,
  COMMON_SP_UPSELL_VIEW_TIME_1 = 0x14,
  COMMON_SP_UPSELL_ACTION_1 = 0x15,
  COMMON_SP_UPSELL_OPEN_TIMESTAMP_1 = 0x16,
  COMMON_SP_UPSELL_RECENT_UPDATED_RECORD = 0x1A,
  COMMON_MP_WOLFPACK_UPSELL_COUNT = 0x1B,
  COMMON_MP_HOLIDAY_UPSELL_COUNT = 0x1C,
  COMMON_MP_DOG_TYPE = 0x1D,
  COMMON_MICRO_DLC_BITS_LAST_GEN = 0x1E,
  COMMON_MICRO_DLC_BITS_NEXT_GEN = 0x22,
};

/* 801 */
enum GamerProfileDataType
{
  TYPE_INVALID = 0x0,
  TYPE_BYTE = 0x1,
  TYPE_BOOL = 0x2,
  TYPE_SHORT = 0x3,
  TYPE_INT = 0x4,
  TYPE_FLOAT = 0x5,
  TYPE_STRING = 0x6,
  TYPE_BITFIELD = 0x7,
};

/* 802 */
enum groupTaskEnum
{
  TASK_SETGROUPS = 0x0,
  TASK_COUNTGROUPS = 0x1,
};

/* 803 */
enum WorkerTraceState
{
  WORKER_TRACE_NOT_STARTED = 0x0,
  WORKER_TRACE_STARTED = 0x1,
  WORKER_TRACE_FINISHED = 0x2,
};

/* 804 */
enum $6B966B00FF4446856C30F2325F3395AC
{
  TRACE_WORLD = 0x1,
  TRACE_POINT_STATIC_MODELS = 0x2,
  TRACE_CG_CLIP_MOVE_TO_ENTITIES = 0x4,
  TRACE_CM_CLIP_MOVE_TO_ENTITIES = 0x8,
  TRACE_DYNENTCL_CLIP_MOVE_TRACE = 0x10,
  TRACE_CG_POINT_TRACE_TO_ENTITIES = 0x20,
  TRACE_CM_POINT_TRACE_TO_ENTITIES = 0x40,
  TRACE_SPECIAL_SPAWN_SIGHT_TRACE = 0x80,
};

/* 805 */
enum SphereEdgeTraceResult
{
  SPHERE_HITS_EDGE = 0x0,
  SPHERE_MISSES_EDGE = 0x1,
  SPHERE_MAY_HIT_V0 = 0x2,
  SPHERE_MAY_HIT_V1 = 0x3,
};

/* 806 */
typedef $8166B8857E7CD08BCB1E0D6C8F56BCBA ACTCTX_REQUESTED_RUN_LEVEL;

/* 807 */
enum tagAR_STATE
{
  AR_ENABLED = 0x0,
  AR_DISABLED = 0x1,
  AR_SUPPRESSED = 0x2,
  AR_REMOTESESSION = 0x4,
  AR_MULTIMON = 0x8,
  AR_NOSENSOR = 0x10,
  AR_NOT_SUPPORTED = 0x20,
  AR_DOCKED = 0x40,
  AR_LAPTOP = 0x80,
};

/* 808 */
enum $834A896E16A66330BDBCDBE48B60EF50
{
  FILEDATA_AITYPE = 0x0,
  FILEDATA_ANIMSCRIPTS_TRAVERSE = 0x1,
};

/* 809 */
typedef $53091E8B7324FD0E85FFE62254BC5002 ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

/* 810 */
enum ORIENTATION_PREFERENCE
{
  ORIENTATION_PREFERENCE_NONE = 0x0,
  ORIENTATION_PREFERENCE_LANDSCAPE = 0x1,
  ORIENTATION_PREFERENCE_PORTRAIT = 0x2,
  ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
  ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 0x8,
};

/* 811 */
enum tagPOINTER_INPUT_TYPE
{
  PT_POINTER = 0x1,
  PT_TOUCH = 0x2,
  PT_PEN = 0x3,
  PT_MOUSE = 0x4,
};

/* 812 */
enum tagPOINTER_BUTTON_CHANGE_TYPE
{
  POINTER_CHANGE_NONE = 0x0,
  POINTER_CHANGE_FIRSTBUTTON_DOWN = 0x1,
  POINTER_CHANGE_FIRSTBUTTON_UP = 0x2,
  POINTER_CHANGE_SECONDBUTTON_DOWN = 0x3,
  POINTER_CHANGE_SECONDBUTTON_UP = 0x4,
  POINTER_CHANGE_THIRDBUTTON_DOWN = 0x5,
  POINTER_CHANGE_THIRDBUTTON_UP = 0x6,
  POINTER_CHANGE_FOURTHBUTTON_DOWN = 0x7,
  POINTER_CHANGE_FOURTHBUTTON_UP = 0x8,
  POINTER_CHANGE_FIFTHBUTTON_DOWN = 0x9,
  POINTER_CHANGE_FIFTHBUTTON_UP = 0xA,
};

/* 813 */
enum __MIDL_IGetBindHandle_0001
{
  BINDHANDLETYPES_APPCACHE = 0x0,
  BINDHANDLETYPES_DEPENDENCY = 0x1,
  BINDHANDLETYPES_COUNT = 0x2,
};

/* 814 */
enum tagFEEDBACK_TYPE
{
  FEEDBACK_TOUCH_CONTACTVISUALIZATION = 0x1,
  FEEDBACK_PEN_BARRELVISUALIZATION = 0x2,
  FEEDBACK_PEN_TAP = 0x3,
  FEEDBACK_PEN_DOUBLETAP = 0x4,
  FEEDBACK_PEN_PRESSANDHOLD = 0x5,
  FEEDBACK_PEN_RIGHTTAP = 0x6,
  FEEDBACK_TOUCH_TAP = 0x7,
  FEEDBACK_TOUCH_DOUBLETAP = 0x8,
  FEEDBACK_TOUCH_PRESSANDHOLD = 0x9,
  FEEDBACK_TOUCH_RIGHTTAP = 0xA,
  FEEDBACK_GESTURE_PRESSANDTAP = 0xB,
  FEEDBACK_MAX = 0xFFFFFFFF,
};

/* 815 */
typedef $2A6324B8E10DEE2666A6A5498DFC667B XLAT_SIDE;

/* 816 */
enum _SE_LEARNING_MODE_DATA_TYPE
{
  SeLearningModeInvalidType = 0x0,
  SeLearningModeSettings = 0x1,
  SeLearningModeMax = 0x2,
};

/* 817 */
typedef $0FC989869F227A36D749990E523E5F04 POWER_ACTION;

/* 818 */
enum READER_SEL_REQUEST_MATCH_TYPE
{
  RSR_MATCH_TYPE_READER_AND_CONTAINER = 0x1,
  RSR_MATCH_TYPE_SERIAL_NUMBER = 0x2,
  RSR_MATCH_TYPE_ALL_CARDS = 0x3,
};

/* 819 */
enum _CSV_CONTROL_OP
{
  CsvControlStartRedirectFile = 0x2,
  CsvControlStopRedirectFile = 0x3,
  CsvControlQueryRedirectState = 0x4,
  CsvControlQueryFileRevision = 0x6,
  CsvControlQueryMdsPath = 0x8,
};

/* 820 */
enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0x0,
  PowerUserNotPresent = 0x1,
  PowerUserInactive = 0x2,
  PowerUserMaximum = 0x3,
  PowerUserInvalid = 0x3,
};

/* 821 */
typedef $C76430121188DB029AABDFCFE322BAEC WELL_KNOWN_SID_TYPE;

/* 822 */
enum _NORM_FORM
{
  NormalizationOther = 0x0,
  NormalizationC = 0x1,
  NormalizationD = 0x2,
  NormalizationKC = 0x5,
  NormalizationKD = 0x6,
};

/* 823 */
typedef $C9C41CE7F7AB140BE1C872069B92FC11 LATENCY_TIME;

/* 824 */
typedef $A98B79572840FDA381AA9CDCE69D1BC8 DISK_CACHE_RETENTION_PRIORITY;

/* 825 */
enum CWMO_FLAGS
{
  CWMO_DEFAULT = 0x0,
  CWMO_DISPATCH_CALLS = 0x1,
  CWMO_DISPATCH_WINDOW_MESSAGES = 0x2,
};

/* 826 */
typedef $FC1DBF8EF20370BCAE1BC38DD4C130F0 EPrintPropertyType;

/* 827 */
typedef $69C131A102699638B93EBA91A6DCF04E EPrintXPSJobProgress;

/* 828 */
typedef $65A38C5744FB98CD77FF3B8CC3FAC622 EPrintXPSJobOperation;

/* 829 */
enum _QUERY_FILE_LAYOUT_FILTER_TYPE
{
  QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0x0,
  QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 0x1,
  QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 0x2,
  QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 0x3,
};

/* 830 */
enum ThreadOwner
{
  THREAD_OWNER_NONE = 0x0,
  THREAD_OWNER_DATABASE = 0x1,
  THREAD_OWNER_CINEMATICS = 0x2,
};

/* 831 */
enum POWER_USER_PRESENCE_TYPE
{
  UserNotPresent = 0x0,
  UserPresent = 0x1,
  UserUnknown = 0xFF,
};

/* 832 */
enum e_status
{
  FMV_IDLE = 0x0,
  FMV_PLAY = 0x1,
  FMV_EOF = 0x2,
  FMV_ID_BLT = 0x3,
  FMV_ID_IDLE = 0x4,
  FMV_LOOPED = 0x5,
  FMV_ID_WAIT = 0x6,
};

/* 833 */
enum _flag_status
{
  FLAG_ATBASE = 0x0,
  FLAG_TAKEN = 0x1,
  FLAG_TAKEN_RED = 0x2,
  FLAG_TAKEN_BLUE = 0x3,
  FLAG_DROPPED = 0x4,
};

/* 834 */
enum _PROCESS_MITIGATION_POLICY
{
  ProcessDEPPolicy = 0x0,
  ProcessASLRPolicy = 0x1,
  ProcessReserved1MitigationPolicy = 0x2,
  ProcessStrictHandleCheckPolicy = 0x3,
  ProcessSystemCallDisablePolicy = 0x4,
  ProcessMitigationOptionsMask = 0x5,
  ProcessExtensionPointDisablePolicy = 0x6,
  MaxProcessMitigationPolicy = 0x7,
};

/* 835 */
enum tagGLOBALOPT_RO_FLAGS
{
  COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
  COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
  COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
  COMGLB_FAST_RUNDOWN = 0x8,
  COMGLB_RESERVED1 = 0x10,
  COMGLB_RESERVED2 = 0x20,
  COMGLB_RESERVED3 = 0x40,
  COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
};

/* 836 */
enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
{
  COMGLB_UNMARSHALING_POLICY_NORMAL = 0x0,
  COMGLB_UNMARSHALING_POLICY_STRONG = 0x1,
  COMGLB_UNMARSHALING_POLICY_HYBRID = 0x2,
};

/* 837 */
typedef $D4EEC2E11024A0705B1B032E28F72F7B PRINT_EXECUTION_CONTEXT;

/* 838 */
enum server_hardware_types
{
  SERVERHARDWARE_UNKNOWN = 0x0,
  SERVERHARDWARE_LINUXDEDICATED = 0x1,
  SERVERHARDWARE_WINDEDICATED = 0x2,
  SERVERHARDWARE_MACDEDICATED = 0x3,
  SERVERHARDWARE_XENONDEDICATED = 0x4,
  SERVERHARDWARE_ORBISDEDICATED = 0x5,
  SERVERHARDWARE_WINLISTEN = 0x6,
  SERVERHARDWARE_MACLISTEN = 0x7,
  SERVERHARDWARE_XENONLISTEN = 0x8,
  SERVERHARDWARE_PS3LISTEN = 0x9,
  SERVERHARDWARE_XB3LISTEN = 0xA,
  SERVERHARDWARE_ORBISLISTEN = 0xB,
  MAX_SERVERHARDWARE = 0xC,
};

/* 839 */
enum POWER_MONITOR_REQUEST_REASON
{
  MonitorRequestReasonUnknown = 0x0,
  MonitorRequestReasonPowerButton = 0x1,
  MonitorRequestReasonRemoteConnection = 0x2,
  MonitorRequestReasonScMonitorpower = 0x3,
  MonitorRequestReasonUserInput = 0x4,
  MonitorRequestReasonAcDcDisplayBurst = 0x5,
  MonitorRequestReasonUserDisplayBurst = 0x6,
  MonitorRequestReasonPoSetSystemState = 0x7,
  MonitorRequestReasonSetThreadExecutionState = 0x8,
  MonitorRequestReasonFullWake = 0x9,
  MonitorRequestReasonSessionUnlock = 0xA,
  MonitorRequestReasonScreenOffRequest = 0xB,
  MonitorRequestReasonIdleTimeout = 0xC,
  MonitorRequestReasonPolicyChange = 0xD,
  MonitorRequestReasonMax = 0xE,
};

/* 840 */
typedef $80B40C51F983DF6470D1FE94B60AC2DA MULTICAST_MODE_TYPE;

/* 841 */
enum tagCOINITBASE
{
  COINITBASE_MULTITHREADED = 0x0,
};

/* 842 */
typedef $0125F7DD214878EB629B8863199E19EA SYSTEM_POWER_CONDITION;

/* 843 */
enum AlienAbilitySlots
{
  ABILITY_UP = 0x0,
  ABILITY_DOWN = 0x64,
  ABILITY_LEFT = 0xC8,
  ABILITY_RIGHT = 0x12C,
};

/* 844 */
typedef $6BF626A6977BE4B45BA2CE7046C5C411 QUERY_USER_NOTIFICATION_STATE;

/* 845 */
enum _THREAD_INFORMATION_CLASS
{
  ThreadMemoryPriority = 0x0,
  ThreadAbsoluteCpuPriority = 0x1,
  ThreadInformationClassMax = 0x2,
};

/* 846 */
enum _PROCESS_INFORMATION_CLASS
{
  ProcessMemoryPriority = 0x0,
  ProcessInformationClassMax = 0x1,
};

/* 847 */
enum ObjectiveVisMode
{
  OBJVIS_BYCLIENT = 0x0,
  OBJVIS_BYTEAM = 0x1,
  OBJVIS_BYMASK = 0x2,
};

/* 848 */
typedef $FD19F3E103D4016A907C359DAF3A86E6 _POWER_PLATFORM_ROLE;

/* 849 */
enum $AEEE9AC7DC130E427C85828AE08F1153
{
  DVAR_ENABLE_NEVER = 0x0,
  DVAR_ENABLE_DEFAULT = 0x1,
  DVAR_ENABLE_ALWAYS = 0x2,
};

/* 850 */
enum _COPYFILE2_MESSAGE_TYPE
{
  COPYFILE2_CALLBACK_NONE = 0x0,
  COPYFILE2_CALLBACK_CHUNK_STARTED = 0x1,
  COPYFILE2_CALLBACK_CHUNK_FINISHED = 0x2,
  COPYFILE2_CALLBACK_STREAM_STARTED = 0x3,
  COPYFILE2_CALLBACK_STREAM_FINISHED = 0x4,
  COPYFILE2_CALLBACK_POLL_CONTINUE = 0x5,
  COPYFILE2_CALLBACK_ERROR = 0x6,
  COPYFILE2_CALLBACK_MAX = 0x7,
};

/* 851 */
enum _COPYFILE2_MESSAGE_ACTION
{
  COPYFILE2_PROGRESS_CONTINUE = 0x0,
  COPYFILE2_PROGRESS_CANCEL = 0x1,
  COPYFILE2_PROGRESS_STOP = 0x2,
  COPYFILE2_PROGRESS_QUIET = 0x3,
  COPYFILE2_PROGRESS_PAUSE = 0x4,
};

/* 852 */
enum _COPYFILE2_COPY_PHASE
{
  COPYFILE2_PHASE_NONE = 0x0,
  COPYFILE2_PHASE_PREPARE_SOURCE = 0x1,
  COPYFILE2_PHASE_PREPARE_DEST = 0x2,
  COPYFILE2_PHASE_READ_SOURCE = 0x3,
  COPYFILE2_PHASE_WRITE_DESTINATION = 0x4,
  COPYFILE2_PHASE_SERVER_COPY = 0x5,
  COPYFILE2_PHASE_NAMEGRAFT_COPY = 0x6,
  COPYFILE2_PHASE_MAX = 0x7,
};

/* 853 */
enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY
{
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = 0xFFFFFFFF,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0x0,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 0x1,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 0x2,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 0x3,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 0x4,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 0x5,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 0x6,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 0x8,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 0x9,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 0xA,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 0xB,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 0xC,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 0xD,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 0xE,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
  DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 854 */
enum DISPLAYCONFIG_SCANLINE_ORDERING
{
  DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0x0,
  DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 0x1,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 0x2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 0x2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 0x3,
  DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 855 */
enum _DEVICEDUMP_COLLECTION_TYPE
{
  TCCollectionBugCheck = 0x1,
  TCCollectionApplicationRequested = 0x2,
  TCCollectionDeviceRequested = 0x3,
};

/* 856 */
enum gameModeModifiers
{
  GAME_SOFTCORE = 0x0,
  GAME_HARDCORE = 0x1,
  NUM_GAME_MODIFIERS = 0x2,
};

/* 857 */
enum DISPLAYCONFIG_SCALING
{
  DISPLAYCONFIG_SCALING_IDENTITY = 0x1,
  DISPLAYCONFIG_SCALING_CENTERED = 0x2,
  DISPLAYCONFIG_SCALING_STRETCHED = 0x3,
  DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 0x4,
  DISPLAYCONFIG_SCALING_CUSTOM = 0x5,
  DISPLAYCONFIG_SCALING_PREFERRED = 0x80,
  DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 858 */
enum DISPLAYCONFIG_ROTATION
{
  DISPLAYCONFIG_ROTATION_IDENTITY = 0x1,
  DISPLAYCONFIG_ROTATION_ROTATE90 = 0x2,
  DISPLAYCONFIG_ROTATION_ROTATE180 = 0x3,
  DISPLAYCONFIG_ROTATION_ROTATE270 = 0x4,
  DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 859 */
enum HASHALGORITHM_ENUM
{
  DSA_HASH_ALGORITHM_SHA1 = 0x0,
  DSA_HASH_ALGORITHM_SHA256 = 0x1,
  DSA_HASH_ALGORITHM_SHA512 = 0x2,
};

/* 860 */
enum DISPLAYCONFIG_MODE_INFO_TYPE
{
  DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 0x1,
  DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 0x2,
  DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 861 */
enum DSAFIPSVERSION_ENUM
{
  DSA_FIPS186_2 = 0x0,
  DSA_FIPS186_3 = 0x1,
};

/* 862 */
enum DISPLAYCONFIG_PIXELFORMAT
{
  DISPLAYCONFIG_PIXELFORMAT_8BPP = 0x1,
  DISPLAYCONFIG_PIXELFORMAT_16BPP = 0x2,
  DISPLAYCONFIG_PIXELFORMAT_24BPP = 0x3,
  DISPLAYCONFIG_PIXELFORMAT_32BPP = 0x4,
  DISPLAYCONFIG_PIXELFORMAT_NONGDI = 0x5,
  DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 863 */
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE
{
  ToleranceLow = 0x1,
  ToleranceMedium = 0x2,
  ToleranceHigh = 0x3,
};

/* 864 */
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
{
  ToleranceIntervalShort = 0x1,
  ToleranceIntervalMedium = 0x2,
  ToleranceIntervalLong = 0x3,
};

/* 865 */
enum tagPOINTER_DEVICE_TYPE
{
  POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x1,
  POINTER_DEVICE_TYPE_EXTERNAL_PEN = 0x2,
  POINTER_DEVICE_TYPE_TOUCH = 0x3,
  POINTER_DEVICE_TYPE_MAX = 0xFFFFFFFF,
};

/* 866 */
typedef $B2CD58BB5E151C37D855099D3E2FDD5A STUB_PHASE;

/* 867 */
typedef $0AEECC1A63E1B2F73D11FBA74082B60B PROXY_PHASE;

/* 868 */
enum DISPLAYCONFIG_TOPOLOGY_ID
{
  DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x1,
  DISPLAYCONFIG_TOPOLOGY_CLONE = 0x2,
  DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x4,
  DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x8,
  DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 869 */
enum tagPOINTER_DEVICE_CURSOR_TYPE
{
  POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x0,
  POINTER_DEVICE_CURSOR_TYPE_TIP = 0x1,
  POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x2,
  POINTER_DEVICE_CURSOR_TYPE_MAX = 0xFFFFFFFF,
};

/* 870 */
enum DISPLAYCONFIG_DEVICE_INFO_TYPE
{
  DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 0x1,
  DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 0x2,
  DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 0x3,
  DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 0x4,
  DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 0x5,
  DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF,
};

/* 871 */
enum DIFFICULTIES
{
  DIFFICULTY_EASY = 0x0,
  DIFFICULTY_MEDIUM = 0x1,
  DIFFICULTY_HARD = 0x2,
  DIFFICULTY_FU = 0x3,
};

/* 872 */
enum _FIRMWARE_TYPE
{
  FirmwareTypeUnknown = 0x0,
  FirmwareTypeBios = 0x1,
  FirmwareTypeUefi = 0x2,
  FirmwareTypeMax = 0x3,
};

/* 873 */
enum _STORAGE_POWERUP_REASON_TYPE
{
  StoragePowerupUnknown = 0x0,
  StoragePowerupIO = 0x1,
  StoragePowerupDeviceAttention = 0x2,
};

/* 874 */
enum CO_MARSHALING_CONTEXT_ATTRIBUTES
{
  CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0x0,
};

/* 875 */
enum COMPARTMENT_ID
{
  UNSPECIFIED_COMPARTMENT_ID = 0x0,
  DEFAULT_COMPARTMENT_ID = 0x1,
};

/* 876 */
typedef $745E23152FEB546D3977EAE1B94D3BAD IPPROTO;

/* 877 */
enum $75E1C3852A037895CAC05730BA245838
{
  ASSERT_TYPE_ASSERT = 0x0,
  ASSERT_TYPE_SANITY = 0x1,
  ASSERT_TYPE_STACKTRACE = 0x2,
};

/* 878 */
typedef $13CC20D9AD0BBA5D63681FE6203B0C08 BIDI_TYPE;

/* 879 */
enum tagINPUT_MESSAGE_DEVICE_TYPE
{
  IMDT_UNAVAILABLE = 0x0,
  IMDT_KEYBOARD = 0x1,
  IMDT_MOUSE = 0x2,
  IMDT_TOUCH = 0x4,
  IMDT_PEN = 0x8,
};

/* 880 */
enum tagINPUT_MESSAGE_ORIGIN_ID
{
  IMO_UNAVAILABLE = 0x0,
  IMO_HARDWARE = 0x1,
  IMO_INJECTED = 0x2,
  IMO_SYSTEM = 0x4,
};

/* 881 */
enum __vc_attributes::pointer_defaultAttribute::type_e
{
  ptr = 0x0,
  ref = 0x1,
  unique = 0x2,
};

/* 882 */
typedef void __cdecl __vc_attributes::threadingAttribute::threading_e(void *);

/* 883 */
enum __vc_attributes::event_receiverAttribute::type_e
{
  native = 0x0,
  com = 0x1,
  managed = 0x2,
};

/* 884 */
enum __vc_attributes::aggregatableAttribute::type_e
{
  never = 0x0,
  allowed = 0x1,
  always = 0x2,
};

/* 885 */
typedef __vc_attributes::event_receiverAttribute::type_e __vc_attributes::event_sourceAttribute::type_e;

/* 886 */
enum __vc_attributes::event_sourceAttribute::optimize_e
{
  speed = 0x0,
  size = 0x1,
};

/* 887 */
enum __vc_attributes::moduleAttribute::type_e
{
  dll = 0x1,
  exe = 0x2,
  service = 0x3,
  unspecified = 0x4,
  EXE = 0x2,
  SERVICE = 0x3,
};

/* 888 */
enum __vc_attributes::helper_attributes::usageAttribute::usage_e
{
  eAnyUsage = 0x0,
  eCoClassUsage = 0x1,
  eCOMInterfaceUsage = 0x2,
  eInterfaceUsage = 0x6,
  eMemberUsage = 0x8,
  eMethodUsage = 0x10,
  eInterfaceMethodUsage = 0x20,
  eInterfaceMemberUsage = 0x40,
  eCoClassMemberUsage = 0x80,
  eCoClassMethodUsage = 0x100,
  eGlobalMethodUsage = 0x300,
  eGlobalDataUsage = 0x400,
  eClassUsage = 0x800,
  eInterfaceParameterUsage = 0x1000,
  eMethodParameterUsage = 0x3000,
  eIDLModuleUsage = 0x4000,
  eAnonymousUsage = 0x8000,
  eTypedefUsage = 0x10000,
  eUnionUsage = 0x20000,
  eEnumUsage = 0x40000,
  eDefineTagUsage = 0x80000,
  eStructUsage = 0x100000,
  eLocalUsage = 0x200000,
  ePropertyUsage = 0x400000,
  eEventUsage = 0x800000,
  eTemplateUsage = 0x1000000,
  eModuleUsage = 0x1000000,
  eIllegalUsage = 0x2000000,
  eAsynchronousUsage = 0x4000000,
  eAnyIDLUsage = 0x3F7FFF,
};

/* 889 */
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e
{
  eBoolean = 0x0,
  eInteger = 0x1,
  eFloat = 0x2,
  eDouble = 0x3,
};

/* 890 */
enum ScriptClientDataColumns
{
  SCRIPT_CLIENT_DATA_COL_DOMAIN = 0x0,
  SCRIPT_CLIENT_DATA_COL_NAME = 0x1,
  SCRIPT_CLIENT_DATA_COL_TYPE = 0x2,
  SCRIPT_CLIENT_DATA_COL_DEFAULT = 0x3,
};

/* 891 */
enum $F00FCF266BA5749504F109B433F3D026
{
  PLAY_MODE_FAST = 0x0,
  PLAY_MODE_SLOW = 0x1,
  PLAY_MODE_NORMAL = 0x2,
};

/* 892 */
enum bandwidth_enum
{
  BANDWIDTH_NARROW = 0x0,
  BANDWIDTH_WIDE = 0x1,
  BANDWIDTH_ULTRAWIDE = 0x2,
  NUM_BANDWIDTH_MODES = 0x3,
};

/* 893 */
enum $C506EBF091585A985DAE8D081A4823A7
{
  TURRET_INIT_VIEW = 0x1,
  TURRET_FIRING_DISABLED = 0x2,
  TURRET_AUTO = 0x4,
  TURRET_SENTRY = 0x8,
  TURRET_FIRING = 0x10,
  TURRET_HAS_TARGET = 0x20,
  TURRET_HAS_MISS_TARGET = 0x40,
  TURRET_SCANNING = 0x80,
  TURRET_SCAN_TOGGLE = 0x100,
  TURRET_INOPERABLE = 0x200,
  TURRET_OFFLINE = 0x400,
  TURRET_MANUAL_TARGET = 0x800,
  TURRET_BARREL_SPINNING = 0x100000,
  TURRET_BARREL_SPIN_DISABLED = 0x200000,
  TURRET_MODE_CHANGE_WAIT = 0x400000,
};

/* 894 */
enum $92B78415067DAE10EEA2863AA8238FA3
{
  TURRET_STATE_IDLE = 0x0,
  TURRET_STATE_FIRING_HEAD = 0x1,
  TURRET_STATE_FIRING_FEET = 0x2,
};

/* 895 */
enum SaveErrorType
{
  SAVE_ERROR_MISSING_DEVICE = 0x0,
  SAVE_ERROR_CORRUPT_SAVE = 0x1,
};

/* 896 */
enum $2C1387FB21D01FF73DDC78B93669782B
{
  FIXED_LINK_ANGLES = 0x0,
  FIXED_LINK_ANGLES_YAW_ONLY = 0x1,
  FIXED_LINK_ANGLES_NONE = 0x2,
};

/* 897 */
enum $056D4A366440905B6547B35DB90BAB80
{
  LF_NONE = 0x0,
  LF_MAP_RESTART = 0x1,
  LF_MAP_CHANGE = 0x2,
  LF_EXITLEVEL = 0x3,
};

/* 898 */
enum PlayerLinkToType
{
  PLAYERLINKTO_NORMAL = 0x0,
  PLAYERLINKTO_DELTA = 0x1,
  PLAYERLINKTO_DELTA_WEAPONVIEWONLY = 0x2,
  PLAYERLINKTOCNT = 0x3,
};

/* 899 */
enum GlassPieceState
{
  GLASS_UNDAMAGED = 0x0,
  GLASS_DAMAGED = 0x1,
  GLASS_DESTROYED = 0x2,
  GLASS_DELETED = 0x3,
  GLASS_STATE_COUNT = 0x4,
};

/* 900 */
enum BGEntInfoType
{
  EIT_PLATFORM = 0x0,
  EIT_CHARACTER = 0x1,
};

/* 901 */
enum BounceMissileResult
{
  BOUNCE_RESULT_IGNORE = 0x0,
  BOUNCE_RESULT_BOUNCE = 0x1,
  BOUNCE_RESULT_REST = 0x2,
  BOUNCE_RESULT_STICK = 0x3,
  BOUNCE_RESULT_ROLL = 0x4,
};

/* 902 */
enum $2F470DEE71EBBC8F14B9A6A15FE45BB1
{
  MAX_WEAP_NOTETRACK_TO_RUMBLE_MAPPINGS = 0x10,
};

/* 903 */
enum $F86D74F651744B985C0BE6BE28F365A2
{
  HE_FONT_DEFAULT = 0x0,
  HE_FONT_BIGFIXED = 0x1,
  HE_FONT_SMALLFIXED = 0x2,
  HE_FONT_OBJECTIVE = 0x3,
  HE_FONT_BIG = 0x4,
  HE_FONT_SMALL = 0x5,
  HE_FONT_HUDBIG = 0x6,
  HE_FONT_HUDSMALL = 0x7,
  HE_FONT_COUNT = 0x8,
};

/* 904 */
enum scriptAnimDamageType_t
{
  ANIM_DAMAGETYPE_BULLET = 0x0,
  ANIM_DAMAGETYPE_EXPLOSION_LIGHT = 0x1,
  ANIM_DAMAGETYPE_EXPLOSION = 0x2,
  ANIM_DAMAGETYPE_MELEE = 0x3,
  ANIM_DAMAGETYPE_MELEE_DOG = 0x4,
  ANIM_DAMAGETYPE_MELEE_ALIEN = 0x5,
  NUM_ANIM_DAMAGETYPES = 0x6,
};

/* 905 */
enum scriptAnimHitLocation_t
{
  ANIM_HITLOC_TORSO = 0x0,
  ANIM_HITLOC_HEAD = 0x1,
  ANIM_HITLOC_NECK = 0x2,
  ANIM_HITLOC_LEGS = 0x3,
  NUM_ANIM_HITLOCATIONS = 0x4,
};

/* 906 */
enum scriptAnimHitDirection_t
{
  ANIM_HITDIR_FRONT = 0x0,
  ANIM_HITDIR_LEFT = 0x1,
  ANIM_HITDIR_RIGHT = 0x2,
  ANIM_HITDIR_BACK = 0x3,
  NUM_ANIM_HITDIRECTIONS = 0x4,
};

/* 907 */
enum SND_CHANNELVOLPRIO
{
  SND_CHANNELVOLPRIO_NONE = 0x0,
  SND_CHANNELVOLPRIO_HOLDBREATH = 0x1,
  SND_CHANNELVOLPRIO_PAIN = 0x2,
  SND_CHANNELVOLPRIO_SHELLSHOCK = 0x3,
  SND_CHANNELVOLPRIO_COUNT = 0x4,
};

/* 908 */
enum AI_STAIRS_STATE
{
  AI_STAIRS_NONE = 0x0,
  AI_STAIRS_UP = 0x1,
  AI_STAIRS_DOWN = 0x2,
  NUM_STAIRS_STATES = 0x3,
};

/* 909 */
enum PredictionTraceResult
{
  PTR_SUCCESS = 0x0,
  PTR_HIT_WORLD = 0x1,
  PTR_HIT_ENTITY = 0x2,
};

/* 910 */
enum PARM_SUPPRESSION
{
  DO_SUPPRESSION = 0x0,
  DONT_SUPPRESS = 0x1,
};

/* 911 */
enum $9443BF42E108AC8C9582DA59892F6307
{
  FX_EFFECT_FLAGS_ASSERT_HAS_FX_ENT = 0x8000,
  FX_EFFECT_FLAGS_ASSERT_IS_CHILD = 0x4000,
  FX_EFFECT_FLAGS_ASSERT_IS_THROUGH = 0x2000,
  FX_EFFECT_FLAGS_DONT_REWIND = 0x1000,
  FX_EFFECT_FLAGS_DONT_UPDATE_FRAMEPREV = 0x800,
  FX_EFFECT_FLAGS_DYNAMIC_BOLT = 0x400,
  FX_EFFECT_FLAGS_KILL_ON_STOP = 0x200,
  FX_EFFECT_FLAGS_MARK_VIEWMODEL = 0x100,
  FX_EFFECT_FLAGS_MARK_GIVENMODELSONLY = 0x80,
  FX_EFFECT_FLAGS_DYNAMIC_BOLT_ROTATION = 0x40,
};

/* 912 */
enum FxUpdateResult
{
  FX_UPDATE_REMOVE = 0x0,
  FX_UPDATE_KEEP = 0x1,
};

/* 913 */
enum $9BFC87319722C944A324279A8D1B2055
{
  FX_SURFACE_EFFECT_20MM = 0x0,
  FX_SURFACE_EFFECT_AMMO_CASE = 0x1,
  FX_SURFACE_EFFECT_PISTOL = 0x2,
  FX_SURFACE_EFFECT_RIFLE = 0x3,
  FX_SURFACE_EFFECT_SAW = 0x4,
  FX_SURFACE_EFFECT_SHOTGUN = 0x5,
  FX_SURFACE_EFFECT_COUNT = 0x6,
};

/* 914 */
enum $CC1E3B475C1F9D13C375FAA5A65361B5
{
  FX_EFFECT_NEEDS_LIGHTING_AT_SPAWN = 0x1,
  FX_EFFECT_NEEDS_LIGHTING_PER_FRAME_AT_ORIGIN = 0x2,
  FX_EFFECT_RECEIVES_DYNAMIC_LIGHTING_PER_FRAME_AT_ORIGIN = 0x4,
  FX_EFFECT_USE_VECTORFIELDS = 0x8,
};

/* 915 */
enum $8C7DB7A69643795E12746A50BA751352
{
  FX_ELEM_LIT_TYPE_NONE = 0x0,
  FX_ELEM_LIT_TYPE_LIGHTGRID_SPAWN_SINGLE = 0x1,
  FX_ELEM_LIT_TYPE_LIGHTGRID_FRAME_SINGLE = 0x2,
  FX_ELEM_LIT_TYPE_LIGHTGRID_FRAME_SPRITE = 0x3,
  FX_ELEM_LIT_TYPE_LIGHTGRID_FRAME_VERTEX = 0x4,
  FX_ELEM_LIT_TYPE_COUNT = 0x5,
};

/* 916 */
enum FxSystemFlags
{
  FX_FLAG_DISABLE = 0x1,
  FX_FLAG_NODRAW = 0x2,
  FX_FLAG_NOSPOTLIGHT = 0x4,
  FX_FLAG_GC = 0x8,
  FX_FLAG_INIT = 0x10,
  FX_FLAG_ARCHIVING = 0x20,
  FX_FLAG_DEFER_ELEM = 0x40,
  FX_FLAG_NOOMNILIGHT = 0x80,
};

/* 917 */
enum FindSlotResult
{
  FINDSLOT_FOUND_ALLOCED = 0x0,
  FINDSLOT_FOUND_CACHED = 0x1,
  FINDSLOT_FOUND_NONE_AVAILABLE = 0x2,
};

/* 918 */
enum $3F2C3865F135A949800936FDFA09E965
{
  FX_ED_FLAG_LOOPING = 0x1,
  FX_ED_FLAG_USE_RANDOM_COLOR = 0x2,
  FX_ED_FLAG_USE_RANDOM_ALPHA = 0x4,
  FX_ED_FLAG_USE_RANDOM_SIZE_0 = 0x8,
  FX_ED_FLAG_USE_RANDOM_SIZE_1 = 0x10,
  FX_ED_FLAG_USE_RANDOM_SCALE = 0x20,
  FX_ED_FLAG_USE_RANDOM_ROTATION_DELTA = 0x40,
  FX_ED_FLAG_MODULATE_COLOR_BY_ALPHA = 0x80,
  FX_ED_FLAG_USE_RANDOM_VELOCITY_0 = 0x100,
  FX_ED_FLAG_USE_RANDOM_VELOCITY_1 = 0x200,
  FX_ED_FLAG_BACKCOMPAT_VELOCITY = 0x400,
  FX_ED_FLAG_ABSOLUTE_VELOCITY_0 = 0x800,
  FX_ED_FLAG_ABSOLUTE_VELOCITY_1 = 0x1000,
  FX_ED_FLAG_PLAY_ON_TOUCH = 0x2000,
  FX_ED_FLAG_PLAY_ON_DEATH = 0x4000,
  FX_ED_FLAG_PLAY_ON_RUN = 0x8000,
  FX_ED_FLAG_BOUNDING_SPHERE = 0x10000,
  FX_ED_FLAG_USE_ITEM_CLIP = 0x20000,
  FX_ED_FLAG_FADE_IN_DECAL = 0x40000,
  FX_ED_FLAG_CURR_GEN_ONLY = 0x80000,
  FX_ED_FLAG_NEXT_GEN_ONLY = 0x100000,
  FX_ED_FLAG_USE_RANDOM_HDR_SCALE = 0x200000,
  FX_ED_FLAG_DISABLED = 0x80000000,
};

/* 919 */
enum FxGlassFlags
{
  GF_DAMAGED = 0x1,
  GF_SIMPLE = 0x2,
  GF_NO_PHYSICS = 0x4,
  GF_FALLING_PHYSICS = 0x8,
  GF_GUARANTEE_FX = 0x10,
  GF_FELL_ASLEEP = 0x20,
  GF_FALLING_SIMPLE = 0x40,
};

/* 920 */
enum FxGlassDrawLevel
{
  GLASS_DRAW_NONE = 0x0,
  GLASS_DRAW_FACES = 0x1,
  GLASS_DRAW_SIDES = 0x2,
  GLASS_DRAW_ALL = 0x3,
};

/* 921 */
enum $7F8B30767BB2C83ADF13BB678A8A4890
{
  FX_GLASS_EDGE_SUPPORTING = 0x0,
  FX_GLASS_EDGE_EXPOSED = 0x1,
};

/* 922 */
enum Direction
{
  DIRECTION_SAVE = 0x0,
  DIRECTION_RESTORE = 0x1,
};

/* 923 */
enum $7F6FE8EFCB3068C970AE94EE7071A83C
{
  FX_TYPE_BULLET_HIT_SMALL_NORMAL = 0x0,
  FX_TYPE_BULLET_HIT_SMALL_EXIT = 0x1,
  FX_TYPE_BULLET_HIT_LARGE_NORMAL = 0x2,
  FX_TYPE_BULLET_HIT_LARGE_EXIT = 0x3,
  FX_TYPE_BULLET_EXPLODE = 0x4,
  FX_TYPE_SHOTGUN_HIT_NORMAL = 0x5,
  FX_TYPE_SHOTGUN_HIT_EXIT = 0x6,
  FX_TYPE_SHOTGUN_EXPLODE = 0x7,
  FX_TYPE_BULLET_HIT_AP_NORMAL = 0x8,
  FX_TYPE_BULLET_HIT_AP_EXIT = 0x9,
  FX_TYPE_GRENADE_BOUNCE = 0xA,
  FX_TYPE_KNIFE_STICK = 0xB,
  FX_TYPE_GRENADE_EXPLODE = 0xC,
  FX_TYPE_ROCKET_EXPLODE = 0xD,
  FX_TYPE_PROJECTILE_DUD = 0xE,
  FX_TYPE_COUNT = 0xF,
};

/* 924 */
enum $6C551CAEDFEF00512E80BFADF33A90E1
{
  LOAD_ZONE_STREAM_SYNC = 0x0,
  LOAD_ZONE_NO_STREAM_SYNC = 0x1,
};

/* 925 */
enum DB_CloneType
{
  DB_CLONE_DEFAULT = 0x0,
  DB_CLONE_NORMAL = 0x1,
  DB_CLONE_SWAP = 0x2,
  DB_CLONE_NORMAL_FROM_DEFAULT = 0x3,
  DB_CLONE_CREATE_DEFAULT = 0x4,
};

/* 926 */
enum GiveImageCacheState
{
  TRANSIENT_GICSTATE_IDLE = 0x0,
  TRANSIENT_GICSTATE_QUEUED = 0x1,
  TRANSIENT_GICSTATE_PROCESSING = 0x2,
};

/* 927 */
enum PMem_Location
{
  PMEM_LOCATION_MAIN = 0x0,
  PMEM_LOCATION_COUNT = 0x1,
};

/* 928 */
enum $32255E3218E8BE46032E948B7939267E
{
  DM_MEMORY_VIRTUAL = 0x0,
  DM_MEMORY_PHYSICAL = 0x1,
  DM_MEMORY_SCRIPT = 0x2,
  DM_MEMORY_VIRTUAL_CPU_ONLY = 0x3,
  DM_MEMORY_COUNT = 0x4,
};

/* 929 */
enum SoundOverrideTypes
{
  SNDTYPE_NONE = 0x0,
  SNDTYPE_FIRE = 0x1,
  SNDTYPE_PLAYER_FIRE = 0x2,
  SNDTYPE_PLAYER_AKIMBO = 0x3,
  SNDTYPE_PLAYER_LASTSHOT = 0x4,
  NUM_SOUND_OVERRIDE_TYPES = 0x5,
};

/* 930 */
enum FXOverrideTypes
{
  FXTYPE_NONE = 0x0,
  FXTYPE_VIEW_FLASH = 0x1,
  FXTYPE_WORLD_FLASH = 0x2,
  FXTYPE_VIEW_SHELL_EJECT = 0x3,
  FXTYPE_WORLD_SHELL_EJECT = 0x4,
  FXTYPE_VIEW_LAST_SHOT_EJECT = 0x5,
  FXTYPE_WORLD_LAST_SHOT_EJECT = 0x6,
  FXTYPE_VIEW_MAG_EJECT = 0x7,
  FXTYPE_VIEW_FLASH_ADS = 0x8,
  NUM_FX_OVERRIDE_TYPES = 0x9,
};

/* 931 */
enum $22EAB330C872462ADB39572727F4D1C1
{
  MAX_WEAP_NOTETRACK_TO_SOUND_MAPPINGS = 0x18,
};

/* 932 */
enum $9B22ED6C0D9963B8EC6C685381373C64
{
  MAX_WEAP_NOTETRACK_TO_FX_MAPPINGS = 0x10,
};

/* 933 */
enum weapKnifeHand_t
{
  WEAP_KNIFE_HAND_DEFAULT = 0x0,
  WEAP_KNIFE_HAND_LEFT = 0x1,
  WEAP_KNIFE_HAND_RIGHT = 0x2,
  WEAP_KNIFE_HAND_COUNT = 0x3,
};

/* 934 */
enum DB_CompressorType
{
  DB_COMPRESSOR_INVALID = 0xFFFFFFFF,
  DB_COMPRESSOR_ZLIB = 0x0,
  DB_COMPRESSOR_LZX = 0x1,
  DB_COMPRESSOR_PASSTHROUGH = 0x2,
};

/* 935 */
enum $29F76B188B797CF78A9AA226BD4560AB
{
  LOAD_OUTSTANDING_READ_NONE = 0x0,
  LOAD_OUTSTANDING_READ_LOGICAL_AND_FILE = 0x1,
  LOAD_OUTSTANDING_READ_LOGICAL = 0x2,
};

/* 936 */
enum $A14F50E6C02D98D95796BAAD77766682
{
  FF_HEADER_SIZEOF_MAGIC = 0x8,
  FF_HEADER_SIZEOF_VERSION = 0x4,
  FF_HEADER_SIZEOF_COMPRESS = 0x1,
  FF_HEADER_SIZEOF_COMRESSTYPE = 0x1,
  FF_HEADER_SIZEOF_SIZEOFPOINTER = 0x1,
  FF_HEADER_SIZEOF_SIZEOFLONG = 0x1,
  FF_HEADER_SIZEOF_FILETIMEHIGH = 0x4,
  FF_HEADER_SIZEOF_FILETIMELOW = 0x4,
  FF_HEADER_SIZEOF_IMAGECOUNT = 0x4,
  FF_HEADER_SIZEOF_BASEFILELEN = 0x8,
  FF_HEADER_SIZEOF_TOTALFILELEN = 0x8,
};

/* 937 */
enum ltc_pkcs_1_paddings
{
  LTC_LTC_PKCS_1_V1_5 = 0x1,
  LTC_LTC_PKCS_1_OAEP = 0x2,
  LTC_LTC_PKCS_1_PSS = 0x3,
};

/* 938 */
enum ScreenPlacementMode
{
  SCRMODE_FULL = 0x0,
  SCRMODE_DISPLAY = 0x1,
  SCRMODE_HUD = 0x2,
  SCRMODE_INVALID = 0x3,
  SCRMODE_COUNT = 0x4,
};

/* 939 */
enum XNET_CONNECT_STATUS
{
  XNET_CONNECT_STATUS_IDLE = 0x0,
  XNET_CONNECT_STATUS_PENDING = 0x1,
  XNET_CONNECT_STATUS_CONNECTED = 0x2,
  XNET_CONNECT_STATUS_LOST = 0x3,
};

/* 940 */
enum LocSelInputState
{
  LOC_SEL_INPUT_NONE = 0x0,
  LOC_SEL_INPUT_CONFIRM = 0x1,
  LOC_SEL_INPUT_CANCEL = 0x2,
};

/* 941 */
enum $F26A47F4FC659BD9174B0378003EAEFE
{
  KEYS_ALL = 0x0,
  KEYS_GAMEPAD_ONLY = 0x1,
};

/* 942 */
enum $0A25966C8830CECDFB4447E50BC59FB6
{
  KB_LEFT = 0x0,
  KB_RIGHT = 0x1,
  KB_FORWARD = 0x2,
  KB_BACK = 0x3,
  KB_LOOKUP = 0x4,
  KB_LOOKDOWN = 0x5,
  KB_MOVELEFT = 0x6,
  KB_MOVERIGHT = 0x7,
  KB_STRAFE = 0x8,
  KB_SPEED = 0x9,
  KB_UP = 0xA,
  KB_DOWN = 0xB,
  KB_ANYUP = 0xC,
  KB_MLOOK = 0xD,
  KB_SPECTATE = 0xE,
  KB_SPECNEXT = 0xF,
  KB_SPECPREV = 0x10,
  KB_ATTACK = 0x11,
  KB_BREATH = 0x12,
  KB_ZOOM = 0x13,
  KB_FRAG = 0x14,
  KB_OFFHANDSECONDARY = 0x15,
  KB_MELEE = 0x16,
  KB_ACTIVATE = 0x17,
  KB_RELOAD = 0x18,
  KB_USE_RELOAD = 0x19,
  KB_PRONE = 0x1A,
  KB_CROUCH = 0x1B,
  KB_THROW = 0x1C,
  KB_SPRINT = 0x1D,
  KB_NIGHTVISION = 0x1E,
  KB_USE_ALTERNATE = 0x1F,
  KB_TALK = 0x20,
  KB_ATTACK_ACCESSIBLE = 0x21,
  KB_ADS_ACCESSIBLE = 0x22,
  NUM_BUTTONS = 0x23,
};

/* 943 */
enum GamepadMapping
{
  GPAD_MAP_LINEAR = 0x0,
  GPAD_MAP_SQUARED = 0x1,
  GPAD_MAP_COUNT = 0x2,
  GPAD_MAP_NONE = 0xFFFFFFFF,
};

/* 944 */
enum WeaponAnimNumber
{
  WEAP_IDLE = 0x0,
  WEAP_FORCE_IDLE = 0x1,
  WEAP_ATTACK = 0x2,
  WEAP_ATTACK_LASTSHOT = 0x3,
  WEAP_RECHAMBER = 0x4,
  WEAP_ADS_ATTACK = 0x5,
  WEAP_ADS_ATTACK_LASTSHOT = 0x6,
  WEAP_ADS_RECHAMBER = 0x7,
  WEAP_GRENADE_PRIME = 0x8,
  WEAP_GRENADE_PRIME_READY_TO_THROW = 0x9,
  WEAP_MELEE_SWIPE = 0xA,
  WEAP_MELEE_HIT = 0xB,
  WEAP_MELEE_FATAL = 0xC,
  WEAP_MELEE_MISS = 0xD,
  WEAP_MELEE_VICTIM_CROUCHING_HIT = 0xE,
  WEAP_MELEE_VICTIM_CROUCHING_FATAL = 0xF,
  WEAP_MELEE_VICTIM_CROUCHING_MISS = 0x10,
  WEAP_DROP = 0x11,
  WEAP_RAISE = 0x12,
  WEAP_FIRST_RAISE = 0x13,
  WEAP_RELOAD = 0x14,
  WEAP_RELOAD_EMPTY = 0x15,
  WEAP_RELOAD_START = 0x16,
  WEAP_RELOAD_END = 0x17,
  WEAP_ALTSWITCHFROM = 0x18,
  WEAP_ALTSWITCHTO = 0x19,
  WEAP_QUICK_DROP = 0x1A,
  WEAP_QUICK_RAISE = 0x1B,
  WEAP_EMPTY_DROP = 0x1C,
  WEAP_EMPTY_RAISE = 0x1D,
  WEAP_SPRINT_IN = 0x1E,
  WEAP_SPRINT_IN_CANCEL = 0x1F,
  WEAP_SPRINT_LOOP = 0x20,
  WEAP_SPRINT_OUT = 0x21,
  WEAP_STUNNED_START = 0x22,
  WEAP_STUNNED_LOOP = 0x23,
  WEAP_STUNNED_END = 0x24,
  WEAP_HOLD_FIRE = 0x25,
  WEAP_DETONATE = 0x26,
  WEAP_NIGHTVISION_WEAR = 0x27,
  WEAP_NIGHTVISION_REMOVE = 0x28,
  WEAP_MANTLE_UP_64 = 0x29,
  WEAP_MANTLE_UP_56 = 0x2A,
  WEAP_MANTLE_UP_48 = 0x2B,
  WEAP_MANTLE_UP_40 = 0x2C,
  WEAP_MANTLE_UP_32 = 0x2D,
  WEAP_MANTLE_UP_24 = 0x2E,
  WEAP_MANTLE_UP_16 = 0x2F,
  WEAP_MANTLE_OVER_64 = 0x30,
  WEAP_MANTLE_OVER_56 = 0x31,
  WEAP_MANTLE_OVER_48 = 0x32,
  WEAP_MANTLE_OVER_40 = 0x33,
  WEAP_MANTLE_OVER_32 = 0x34,
  WEAP_MANTLE_OVER_24 = 0x35,
  WEAP_MANTLE_OVER_16 = 0x36,
  WEAP_BLAST_IMPACT_FRONT = 0x37,
  WEAP_BLAST_IMPACT_LEFT = 0x38,
  WEAP_BLAST_IMPACT_BACK = 0x39,
  WEAP_BLAST_IMPACT_RIGHT = 0x3A,
  WEAP_SLIDE_IN = 0x3B,
  WEAP_SLIDE_LOOP = 0x3C,
  WEAP_SLIDE_OUT = 0x3D,
  MAX_WP_ANIMATIONS = 0x3E,
};

/* 945 */
enum LaserOwnerEnum
{
  LASER_OWNER_NON_PLAYER = 0x0,
  LASER_OWNER_PLAYER = 0x1,
};

/* 946 */
enum LaserLightEnum
{
  LASER_LIGHT_OFF = 0x0,
  LASER_LIGHT_ON = 0x1,
};

/* 947 */
enum ToggleScopeState
{
  TOGGLE_SCOPE_NONE = 0x0,
  TOGGLE_SCOPE_OVERRIDE = 0x1,
  TOGGLE_SCOPE_OFF = 0x2,
  TOGGLE_SCOPE_ON = 0x3,
  TOGGLE_SCOPE_OFF_TO_ON = 0x4,
  TOGGLE_SCOPE_ON_TO_OFF = 0x5,
};

/* 948 */
enum TurretAnims
{
  TURRET_ANIM_ROOT = 0x0,
  TURRET_ANIM_IDLE = 0x1,
  TURRET_ANIM_FIRE = 0x2,
  TURRET_ANIM_NUM = 0x3,
};

/* 949 */
enum LUISystem
{
  FIRST_LUI_SYSTEM = 0x0,
  LUI_SYSTEM_WEAPON_CHANGE = 0x0,
  LUI_SYSTEM_LIVE_CONNECTION = 0x1,
  LUI_SYSTEM_NETWORK_CONNECTION = 0x2,
  LUI_SYSTEM_GRAMMARS_CHANGED = 0x3,
  LUI_SYSTEM_STORE = 0x4,
  NUM_LUI_SYSTEMS = 0x5,
};

/* 950 */
enum $551F59549617BEB68828B62FDC20CD24
{
  DTYPE_BOOL = 0x0,
  DTYPE_FLOAT = 0x1,
  DTYPE_VEC3 = 0x2,
};

/* 951 */
enum $E88FEAE307656E7EF03BEDDC7F0A4D13
{
  ZONE_NAME = 0x0,
  ZONE_COMMENT = 0x1,
  ZONE_REVERB = 0x2,
  ZONE_FILTER = 0x3,
  ZONE_OCCLUSION = 0x4,
  ZONE_NUM_COLUMNS = 0x5,
};

/* 952 */
enum $8A27601DA3AF6A7F50BC7D0249B4E328
{
  ZONE2_NAME = 0x0,
  ZONE2_AMBIENCE = 0x1,
  ZONE2_AMBIENT_NAME = 0x2,
  ZONE2_MIX = 0x3,
  ZONE2_REVERB = 0x4,
  ZONE2_FILTER = 0x5,
  ZONE2_OCCLUSION = 0x6,
  ZONE2_ADSR = 0x7,
  ZONE2_NUM_COLUMNS = 0x8,
};

/* 953 */
enum $F95B110896AF1D9EE436B82DB826B5C8
{
  REVERB_NAME = 0x0,
  REVERB_COMMENT = 0x1,
  REVERB_ROOMTYPE = 0x2,
  REVERB_DRYLEVEL = 0x3,
  REVERB_WETLEVEL = 0x4,
  REVERB_FADETIME = 0x5,
  REVERB_NUM_COLUMNS = 0x6,
};

/* 954 */
enum $B0D3FEA96F32E5F62C832AB1B6F90861
{
  REVERB2_NAME = 0x0,
  REVERB2_ROOMTYPE = 0x1,
  REVERB2_DRYLEVEL = 0x2,
  REVERB2_WETLEVEL = 0x3,
  REVERB2_FADETIME = 0x4,
  REVERB2_NUM_COLUMNS = 0x5,
};

/* 955 */
enum $351D045BB65F210C21A98C0F0F748A85
{
  FILTER_NAME = 0x0,
  FILTER_CHANNEL_NAME = 0x1,
  FILTER_BAND = 0x2,
  FILTER_TYPE = 0x3,
  FILTER_FREQ = 0x4,
  FILTER_GAIN = 0x5,
  FILTER_Q = 0x6,
  FILTER_NUM_COLUMNS = 0x7,
};

/* 956 */
enum $95351399BE7B29F0CAEC6160F1703F93
{
  OCCLUDE_NAME = 0x0,
  OCCLUDE_CHANNEL_NAME = 0x1,
  OCCLUDE_FREQ = 0x2,
  OCCLUDE_TYPE = 0x3,
  OCCLUDE_GAIN = 0x4,
  OCCLUDE_Q = 0x5,
  OCCLUDE_NUM_COLUMNS = 0x6,
};

/* 957 */
enum $DE3802743E25C5A38BDE69EE78CBE3D2
{
  MIX_NAME = 0x0,
  MIX_BUS = 0x1,
  MIX_VOLUME = 0x2,
  MIX_FADE = 0x3,
};

/* 958 */
enum $2B34088B1964B033B193D2B02E6FB767
{
  ADSR_NAME = 0x0,
  ADSR_ATTACK_LENGTH = 0x1,
  ADSR_DECAY_LENGTH = 0x2,
  ADSR_SUSTAIN_LENGTH = 0x3,
  ADSR_SUSTAIN_LEVEL = 0x4,
  ADSR_RELEASE_LENGTH = 0x5,
};

/* 959 */
enum $8CCF0CFEDABC37D338F9D353D6703B11
{
  ADSRZONE_NAME = 0x0,
  ADSRZONE_WEAPON = 0x1,
  ADSRZONE_ADSR = 0x2,
};

/* 960 */
enum EAmbientNameFields
{
  AMBIENT_NAME_NAME = 0x0,
  AMBIENT_NAME_TIME_MIN = 0x1,
  AMBIENT_NAME_TIME_MAX = 0x2,
};

/* 961 */
enum EAmbientElementField
{
  AMBIENT_ELEMENT_NAME = 0x0,
  AMBIENT_ELEMENT_ALIAS = 0x1,
  AMBIENT_ELEMENT_RANGE_MIN = 0x2,
  AMBIENT_ELEMENT_RANGE_MAX = 0x3,
  AMBIENT_ELEMENT_CONE_MIN = 0x4,
  AMBIENT_ELEMENT_CONE_MAX = 0x5,
  AMBIENT_ELEMENT_TIME_MIN = 0x6,
  AMBIENT_ELEMENT_TIME_MAX = 0x7,
};

/* 962 */
enum EAmbientEventField
{
  AMBIENT_EVENT_NAME = 0x0,
  AMBIENT_EVENT_ELEMENT = 0x1,
  AMBIENT_EVENT_WEIGHT = 0x2,
};

/* 963 */
enum $7F6AD54755CAB8B5869E159AE1541443
{
  CINEMATIC_PLAYBACKFLAGS_SYNCHRONOUS = 0x1,
  CINEMATIC_PLAYBACKFLAGS_LOOP = 0x2,
  CINEMATIC_PLAYBACKFLAGS_MEMORY_RESIDENT = 0x4,
  CINEMATIC_PLAYBACKFLAGS_SMALL = 0x8,
  CINEMATIC_PLAYBACKFLAGS_STARTPAUSED = 0x10,
  CINEMATIC_PLAYBACKFLAGS_PRELOADED = 0x20,
  CINEMATIC_PLAYBACKFLAGS_INTRO_THEN_LOOP = 0x40,
  CINEMATIC_PLAYBACKFLAGS_FILLER_AFTER_FINISH = 0x80,
  CINEMATIC_PLAYBACKFLAGS_FAST_SEEK = 0x100,
};

/* 964 */
enum RumbleSourceType
{
  RUMBLESOURCE_INVALID = 0x0,
  RUMBLESOURCE_ENTITY = 0x1,
  RUMBLESOURCE_POS = 0x2,
};

/* 965 */
enum animBodyPart_t
{
  ANIM_BP_UNUSED = 0x0,
  ANIM_BP_LEGS = 0x1,
  ANIM_BP_TORSO = 0x2,
  ANIM_BP_BOTH = 0x3,
  ANIM_BP_SKIP = 0x4,
  NUM_ANIM_BODYPARTS = 0x5,
};

/* 966 */
enum cgDrawTalkEnum
{
  CG_TALKER_NONE = 0x0,
  CG_TALKER_ALL = 0x1,
  CG_TALKER_FRIENDLY = 0x2,
  CG_TALKER_ENEMY = 0x3,
  CG_TALKER_COUNT = 0x4,
};

/* 967 */
enum $93125953E588CC3D1E2FBE942CDA020C
{
  NOT_LOADED = 0x0,
  LOADED = 0x1,
};

/* 968 */
enum $37B73B2068C15F71BBE7437BABF330B5
{
  ENTITYCUSTOMDATA_LOCALCLIENTNUM = 0x0,
  ENTITYCUSTOMDATA_ENTNUM = 0x1,
};

/* 969 */
enum helicopteranims_t
{
  HELICOPTER_ROOT = 0x0,
  HELICOPTER_ROTORS_ROTATE = 0x1,
  HELICOPTER_NUM = 0x2,
};

/* 970 */
enum $ACAC408EFF22CDDB99C7E9172BB76F6A
{
  UILAYER_LOWRES_BACKGROUND = 0x0,
  UILAYER_BACKGROUND = 0x1,
  UILAYER_FOREGROUND = 0x2,
};

/* 971 */
enum EquipmentMoveType_t
{
  EQUIPMENT_MOVE_TYPE_INVALID = 0xFFFFFFFF,
  EQUIPMENT_MOVE_TYPE_WALK = 0x0,
  EQUIPMENT_MOVE_TYPE_RUN = 0x1,
  EQUIPMENT_MOVE_TYPE_SPRINT = 0x2,
  EQUIPMENT_MOVE_TYPE_PRONE = 0x3,
  EQUIPMENT_MOVE_TYPE_LAND = 0x4,
  EQUIPMENT_MOVE_TYPE_MANTLE = 0x5,
  EQUIPMENT_MOVE_TYPE_TOTAL = 0x6,
};

/* 972 */
enum BlurTime
{
  BLUR_TIME_RELATIVE = 0x0,
  BLUR_TIME_ABSOLUTE = 0x1,
};

/* 973 */
enum BlurPriority
{
  BLUR_PRIORITY_NONE = 0x0,
  BLUR_PRIORITY_SCRIPT = 0x1,
  BLUR_PRIORITY_CODE = 0x2,
};

/* 974 */
enum EffectiveStance
{
  PM_EFF_STANCE_DEFAULT = 0x0,
  PM_EFF_STANCE_PRONE = 0x1,
  PM_EFF_STANCE_DUCKED = 0x2,
  PM_EFF_STANCE_LASTSTANDCRAWL = 0x3,
  PM_EFF_STANCE_COUNT = 0x4,
};

/* 975 */
enum scriptAnimWeaponPositions_t
{
  ANIM_WP_HIP = 0x0,
  ANIM_WP_ADS = 0x1,
  NUM_ANIM_WEAPONPOSITIONS = 0x2,
};

/* 976 */
enum VehicleBone
{
  VEHICLE_BONE_PLAYER = 0x0,
  VEHICLE_BONE_DETACH = 0x1,
  VEHICLE_BONE_POPOUT = 0x2,
  VEHICLE_BONE_BODY = 0x3,
  VEHICLE_BONE_BARREL = 0x4,
  VEHICLE_BONE_TURRET = 0x5,
  VEHICLE_BONE_TURRET_BASE = 0x6,
  VEHICLE_BONE_FLASH = 0x7,
  VEHICLE_BONE_FLASH_0 = 0x7,
  VEHICLE_BONE_FLASH_1 = 0x8,
  VEHICLE_BONE_FLASH_2 = 0x9,
  VEHICLE_BONE_FLASH_3 = 0xA,
  VEHICLE_BONE_FLASH_4 = 0xB,
  VEHICLE_BONE_FLASH_LAST = 0xB,
  VEHICLE_BONE_WHEEL = 0xC,
  VEHICLE_BONE_WHEEL_0 = 0xC,
  VEHICLE_BONE_WHEEL_1 = 0xD,
  VEHICLE_BONE_WHEEL_2 = 0xE,
  VEHICLE_BONE_WHEEL_3 = 0xF,
  VEHICLE_BONE_WHEEL_4 = 0x10,
  VEHICLE_BONE_WHEEL_5 = 0x11,
  VEHICLE_BONE_WHEEL_LAST = 0x11,
  NUM_VEHICLE_BONES = 0x12,
};

/* 977 */
enum $C097027AFC8F54D3834F9E938D509109
{
  PML_TURNING_NO = 0x0,
  PML_TURNING_YES = 0x1,
  PML_TURNING_STARTING = 0x2,
};

/* 978 */
enum playerLateralPlane
{
  PLAYER_LATERAL_PLANE_XY = 0x0,
  PLAYER_LATERAL_PLANE_XZ = 0x1,
  PLAYER_LATERAL_PLANE_YZ = 0x2,
};

/* 979 */
enum PmStanceFrontBack
{
  PM_STANCE_FORWARD_STAND = 0x0,
  PM_STANCE_FORWARD_PRONE = 0x1,
  PM_STANCE_FORWARD_CROUCH = 0x2,
  PM_STANCE_LASTSTANDCRAWL = 0x3,
  PM_STANCE_BACKWARD_FIRST = 0x4,
  PM_STANCE_BACKWARD_RUN = 0x4,
  PM_STANCE_BACKWARD_PRONE = 0x5,
  PM_STANCE_BACKWARD_CROUCH = 0x6,
  PM_STANCE_BACKWARD_LASTSTAND = 0x7,
  NUM_PM_STANCE_FRONTBACK = 0x8,
};

/* 980 */
enum scriptAnimStrafeStates_t
{
  ANIM_STRAFE_NOT = 0x0,
  ANIM_STRAFE_LEFT = 0x1,
  ANIM_STRAFE_RIGHT = 0x2,
  NUM_ANIM_STRAFESTATES = 0x3,
};

/* 981 */
enum MantleAnimType
{
  MAT_UP = 0x0,
  MAT_OVER = 0x1,
  MAT_COUNT = 0x2,
};

/* 982 */
enum scriptAnimMantleState_t
{
  ANIM_MANTLE_STATE_NONE = 0x0,
  ANIM_MANTLE_STATE_64_UP = 0x1,
  ANIM_MANTLE_STATE_56_UP = 0x2,
  ANIM_MANTLE_STATE_48_UP = 0x3,
  ANIM_MANTLE_STATE_40_UP = 0x4,
  ANIM_MANTLE_STATE_32_UP = 0x5,
  ANIM_MANTLE_STATE_24_UP = 0x6,
  ANIM_MANTLE_STATE_16_UP = 0x7,
  ANIM_MANTLE_STATE_64_OVER = 0x8,
  ANIM_MANTLE_STATE_56_OVER = 0x9,
  ANIM_MANTLE_STATE_48_OVER = 0xA,
  ANIM_MANTLE_STATE_40_OVER = 0xB,
  ANIM_MANTLE_STATE_32_OVER = 0xC,
  ANIM_MANTLE_STATE_24_OVER = 0xD,
  ANIM_MANTLE_STATE_16_OVER = 0xE,
  NUM_ANIM_MANTLE_STATE = 0xF,
};

/* 983 */
enum animScriptConditionTypes_t
{
  ANIM_CONDTYPE_BITFLAGS = 0x0,
  ANIM_CONDTYPE_VALUE = 0x1,
  NUM_ANIM_CONDTYPES = 0x2,
};

/* 984 */
enum animScriptMounted_t
{
  MOUNTED_UNUSED = 0x0,
  MOUNTED_TURRET = 0x1,
  MOUNTED_REMOTE = 0x2,
  NUM_ANIM_COND_MOUNTED = 0x3,
};

/* 985 */
enum animScriptParseMode_t
{
  PARSEMODE_DEFINES = 0x0,
  PARSEMODE_AIM_SETS = 0x1,
  PARSEMODE_LEAN_SETS = 0x2,
  PARSEMODE_TRANSITION_MOVETYPES = 0x3,
  PARSEMODE_SYNC_GROUPS = 0x4,
  PARSEMODE_ANIMATION = 0x5,
  PARSEMODE_EVENTS = 0x6,
  NUM_PARSEMODES = 0x7,
};

/* 986 */
enum LUIDataBindIndex
{
  LUIDataBind_Unknown = 0x0,
  LUIDataBind_FirstIndex = 0x1,
  LUIDataBind_ClipAmmo_Left = 0x1,
  LUIDataBind_ClipAmmo_Right = 0x2,
  LUIDataBind_ClipAmmoMax = 0x3,
  LUIDataBind_StockAmmo = 0x4,
  LUIDataBind_FragAmmo = 0x5,
  LUIDataBind_FlashAmmo = 0x6,
  LUIDataBind_AltModeAmmo = 0x7,
  LUIDataBind_PlayerWeaponClass = 0x8,
  LUIDataBind_PlayerStance = 0x9,
  LUIDataBind_PlayerMelee = 0xA,
  LUIDataBind_PlayerActionSlotAmmo = 0xB,
  LUIDataBind_PlayerActionSlotMaterial = 0xC,
  LUIDataBind_PlayerActionSlotActive = 0xD,
  LUIDataBind_FragMaterial = 0xE,
  LUIDataBind_FlashMaterial = 0xF,
  LUIDataBind_IsGamepadEnabled = 0x10,
  LUIDataBind_TeamScore_Friendly = 0x11,
  LUIDataBind_TeamScore_Enemy = 0x12,
  LUIDataBind_PlayerHealth = 0x13,
  LUIDataBind_PlayerMaxHealth = 0x14,
  LUIDataBind_PlayerArmor = 0x15,
  LUIDataBind_AlienCash = 0x16,
  LUIDataBind_AlienSkillPoints = 0x17,
  LUIDataBind_AlienCumulatedSkillsLevel = 0x18,
  LUIDataBind_Talking = 0x19,
  LUIDataBind_Talker = 0x1A,
  LUIDataBind_DownloadProgress = 0x1B,
  LUIDataBind_PrivatePartyStatus = 0x1C,
  LUIDataBind_ClientVoiceStatus = 0x1D,
  LUIDataBind_Count = 0x1E,
  LUIDataBind_MaxIndex = 0x1D,
};

/* 987 */
enum hks::StaticStringIndex
{
  STATIC_STRING_START_MM = 0x0,
  STATIC_STRING_MM_MODE = 0x0,
  STATIC_STRING_MM_INDEX = 0x1,
  STATIC_STRING_MM_NEWINDEX = 0x2,
  STATIC_STRING_MM_ADD = 0x3,
  STATIC_STRING_MM_SUB = 0x4,
  STATIC_STRING_MM_MUL = 0x5,
  STATIC_STRING_MM_DIV = 0x6,
  STATIC_STRING_MM_MOD = 0x7,
  STATIC_STRING_MM_POW = 0x8,
  STATIC_STRING_MM_CONCAT = 0x9,
  STATIC_STRING_MM_LEN = 0xA,
  STATIC_STRING_MM_UNM = 0xB,
  STATIC_STRING_MM_LE = 0xC,
  STATIC_STRING_MM_EQ = 0xD,
  STATIC_STRING_MM_LT = 0xE,
  STATIC_STRING_MM_GC = 0xF,
  STATIC_STRING_MM_CALL = 0x10,
  STATIC_STRING_MM_VIZ = 0x11,
  STATIC_STRING_MM_SELF = 0x12,
  STATIC_STRING_ARG = 0x13,
  STATIC_STRING_N = 0x14,
  STATIC_STRING_OUT_OF_MEMORY = 0x15,
  STATIC_STRING_FINALIZER_STATE = 0x16,
  STATIC_STRING_STRUCT_META_NAME = 0x17,
  STATIC_STRING_STRUCT_BACK_NAME = 0x18,
  STATIC_STRING_STRUCT_DUMMY_NAME = 0x19,
  STATIC_STRING_TYPE_NO_VALUE = 0x1A,
  STATIC_STRING_START_TYPE = 0x1B,
  STATIC_STRING_TYPE_NIL = 0x1B,
  STATIC_STRING_TYPE_BOOLEAN = 0x1C,
  STATIC_STRING_TYPE_USERDATA = 0x1D,
  STATIC_STRING_TYPE_NUMBER = 0x1E,
  STATIC_STRING_TYPE_STRING = 0x1F,
  STATIC_STRING_TYPE_TABLE = 0x20,
  STATIC_STRING_TYPE_FUNCTION = 0x21,
  STATIC_STRING_TYPE_USERDATA2 = 0x22,
  STATIC_STRING_TYPE_THREAD = 0x23,
  STATIC_STRING_TYPE_FUNCTION2 = 0x24,
  STATIC_STRING_TYPE_FUNCTION3 = 0x25,
  STATIC_STRING_TYPE_UI64 = 0x26,
  STATIC_STRING_TYPE_STRUCT = 0x27,
  STATIC_STRING_IS_USED_FOR_REFFING = 0x28,
  NUM_STATIC_STRINGS = 0x29,
};

/* 988 */
enum hks::StructSlotType
{
  HKS_SLOT_NORMAL = 0x0,
  HKS_SLOT_META = 0x1,
  HKS_SLOT_BACKING = 0x2,
  HKS_SLOT_PADDING = 0x3,
};

/* 989 */
enum lua_State::Status
{
  NEW = 0x1,
  RUNNING = 0x2,
  YIELDED = 0x3,
  DEAD_ERROR = 0x4,
};

/* 990 */
enum $5C475B48BB2F7DE82581CA350675F1E7
{
  PROFILE_BUFFER_SIZE = 0x1E,
};

/* 991 */
enum $7FD95A735019EA0F6A77E53078F191B5
{
  NO_HOOK_LEVEL = 0xFFFFFFFE,
};

/* 992 */
enum LuaPlus::LuaState::DumpObjectTypes
{
  DUMP_ALPHABETICAL = 0x1,
  DUMP_WRITEALL = 0x2,
  DUMP_WRITETABLEPOINTERS = 0x4,
};

/* 993 */
enum LuaPlus::LuaState::DefaultMaxIndent
{
  DEFAULT_MAX_INDENT = 0xFFFFFFFF,
};

/* 994 */
enum $DEE810AE09020B7FE54EAEE5050D6BE2
{
  MAX_LINE_TRACK_STACK_LEVEL = 0x40,
};

/* 995 */
enum $CF3BC55B6BE40139EED29F14F006F3EE
{
  LUAL_BUFFERSIZE = 0x200,
};

/* 996 */
enum $4C2EBF625C5972186325ADC646984EE1
{
  SHIFT_COLOR = 0x0,
  BIT_COLOR = 0x1,
  SHIFT_PREVIOUS_LINK = 0x1,
  BIT_PREVIOUS_LINK = 0x2,
  SHIFT_DELETED = 0x2,
  BIT_DELETED = 0x4,
  SHIFT_ON_RESUME_STACK = 0x3,
  BIT_ON_RESUME_STACK = 0x8,
  SHIFT_ON_WEAK_STACK = 0x4,
  BIT_ON_WEAK_STACK = 0x10,
  SHIFT_ON_GREY_STACK = 0x5,
  BIT_ON_GREY_STACK = 0x20,
  SHIFT_ON_REMARK_STACK = 0x6,
  BIT_ON_REMARK_STACK = 0x40,
  SHIFT_TYPE = 0x7,
  MASK_TYPE = 0x3F,
  SHIFT_SIZE = 0xD,
};

/* 997 */
enum $BDBF09D9110B11E30FA747CC10FF8307
{
  LUA_REGISTRYINDEX = 0xFFFFD8F0,
  LUA_GLOBALSINDEX = 0xFFFFD8EE,
  LUA_ENVIRONINDEX = 0xFFFFD8EF,
  LUA_CUPVALUE = 0xFFFFD8EE,
  VM_PSEUDOINDEXBOUNDS = 0xFFFFD8F0,
};

/* 998 */
enum HksType
{
  LUA_TNONE = 0xFFFFFFFF,
  LUA_TNIL = 0x0,
  LUA_TBOOLEAN = 0x1,
  LUA_TLIGHTUSERDATA = 0x2,
  LUA_TNUMBER = 0x3,
  LUA_TSTRING = 0x4,
  LUA_TTABLE = 0x5,
  LUA_TFUNCTION = 0x6,
  LUA_TUSERDATA = 0x7,
  LUA_TTHREAD = 0x8,
  LUA_TUI64 = 0xB,
  LUA_TSTRUCT = 0xC,
};

/* 999 */
enum $2398792DDA88F35E822D79B0E31E20E5
{
  BREAKPOINT_FILENAME_SIZE = 0x200,
  BREAKPOINT_EXPRESSION_SIZE = 0x200,
};

/* 1000 */
enum $5E3A2346075185C773B959593FC79086
{
  HKS_IS_INTERNAL = 0x1,
  HKS_DEBUG_DATA_SENT = 0x2,
  HKS_TREAT_CLOSURE_AS_FUNC = 0x4,
};

/* 1001 */
typedef lua_State::Status hks::Breakpoint::bpStates;

/* 1002 */
enum hks::Breakpoint::expressionTypes
{
  LOWER_EXPRESSION_TYPES_BOUND = 0xFFFFFFFE,
  HITCOUNT_EXP_LT = 0xFFFFFFFF,
  HITCOUNT_EXP_EQ = 0x0,
  HITCOUNT_EXP_GT = 0x1,
  HITCOUNT_DISABLED = 0x2,
  UPPER_EXPRESSION_TYES_BOUND = 0x3,
};

/* 1003 */
enum $DB3B9A183442C144CF1F63A61FCDD8EE
{
  LUA_NORMAL = 0x0,
  LUA_MULTRET = 0xFFFFFFFF,
  LUA_YIELD = 0xFFFFFFFE,
  LUA_MINSTACK = 0x14,
};

/* 1004 */
enum $AEE3B7D1F20BD44CA3039605396DC319
{
  LUA_HOOKCALL = 0x0,
  LUA_HOOKRET = 0x1,
  LUA_HOOKLINE = 0x2,
  LUA_HOOKCOUNT = 0x3,
  LUA_HOOKTAILRET = 0x4,
};

/* 1005 */
enum hks::GCPhase
{
  GCSTARTING = 0x0,
  GCMARKING = 0x1,
  GCCLEANING = 0x2,
  GCCLEANUSERDATA = 0x3,
  GCCLEANSTRINGTABLE = 0x4,
  GCSWEEPING = 0x5,
  GCFINISHED = 0x6,
};

/* 1006 */
enum $ED6C6A5E55843458655C184EBD4F2C86
{
  NUM_BREAKPOINTS = 0x80,
};

/* 1007 */
enum $6940915D9ADF8837D0DF37F9FD41F9C4
{
  VARARG_HASARG = 0x1,
  VARARG_ISVARARG = 0x2,
  VARARG_NEEDSARG = 0x4,
  BYTECODE_IS_SHARED = 0x8,
  BYTECODE_IS_REF = 0x10,
};

/* 1008 */
enum HksObjectType
{
  TANY = 0xFFFFFFFE,
  TNONE = 0xFFFFFFFF,
  TNIL = 0x0,
  TBOOLEAN = 0x1,
  TLIGHTUSERDATA = 0x2,
  TNUMBER = 0x3,
  TSTRING = 0x4,
  TTABLE = 0x5,
  TFUNCTION = 0x6,
  TUSERDATA = 0x7,
  TTHREAD = 0x8,
  TIFUNCTION = 0x9,
  TCFUNCTION = 0xA,
  TUI64 = 0xB,
  TSTRUCT = 0xC,
  NUM_TYPE_OBJECTS = 0xE,
};

/* 1009 */
enum hks::HksArgMode
{
  hksABC = 0x0,
  hksABx = 0x1,
  hksAsBx = 0x2,
};

/* 1010 */
enum hks::HksArgMask
{
  hksArgN = 0x0,
  hksArgU = 0x1,
  hksArgUK = 0x2,
  hksArgR = 0x3,
  hksArgRK = 0x4,
  hksArgK = 0x5,
};

/* 1011 */
enum hks::HksArgR1UseRegister
{
  hksNR1 = 0x0,
  hksR1A = 0x1,
  hksR1B = 0x2,
};

/* 1012 */
enum $BB780401279095D500366B6C90F02A59
{
  MAX_HASH_LENGTH = 0x1F,
};

/* 1013 */
enum $BBB28D1A3CFF199AEE1ADDF60D6A92B6
{
  BUFFER_LENGTH = 0x1E,
};

/* 1014 */
enum hks::Opcode
{
  HKS_OPCODE_GETFIELD = 0x0,
  HKS_OPCODE_TEST = 0x1,
  HKS_OPCODE_CALL_I = 0x2,
  HKS_OPCODE_CALL_C = 0x3,
  HKS_OPCODE_EQ = 0x4,
  HKS_OPCODE_EQ_BK = 0x5,
  HKS_OPCODE_GETGLOBAL = 0x6,
  HKS_OPCODE_MOVE = 0x7,
  HKS_OPCODE_SELF = 0x8,
  HKS_OPCODE_RETURN = 0x9,
  HKS_OPCODE_GETTABLE_S = 0xA,
  HKS_OPCODE_GETTABLE_N = 0xB,
  HKS_OPCODE_GETTABLE = 0xC,
  HKS_OPCODE_LOADBOOL = 0xD,
  HKS_OPCODE_TFORLOOP = 0xE,
  HKS_OPCODE_SETFIELD = 0xF,
  HKS_OPCODE_SETTABLE_S = 0x10,
  HKS_OPCODE_SETTABLE_S_BK = 0x11,
  HKS_OPCODE_SETTABLE_N = 0x12,
  HKS_OPCODE_SETTABLE_N_BK = 0x13,
  HKS_OPCODE_SETTABLE = 0x14,
  HKS_OPCODE_SETTABLE_BK = 0x15,
  HKS_OPCODE_TAILCALL_I = 0x16,
  HKS_OPCODE_TAILCALL_C = 0x17,
  HKS_OPCODE_TAILCALL_M = 0x18,
  HKS_OPCODE_LOADK = 0x19,
  HKS_OPCODE_LOADNIL = 0x1A,
  HKS_OPCODE_SETGLOBAL = 0x1B,
  HKS_OPCODE_JMP = 0x1C,
  HKS_OPCODE_CALL_M = 0x1D,
  HKS_OPCODE_CALL = 0x1E,
  HKS_OPCODE_INTRINSIC_INDEX = 0x1F,
  HKS_OPCODE_INTRINSIC_NEWINDEX = 0x20,
  HKS_OPCODE_INTRINSIC_SELF = 0x21,
  HKS_OPCODE_INTRINSIC_INDEX_LITERAL = 0x22,
  HKS_OPCODE_INTRINSIC_NEWINDEX_LITERAL = 0x23,
  HKS_OPCODE_INTRINSIC_SELF_LITERAL = 0x24,
  HKS_OPCODE_TAILCALL = 0x25,
  HKS_OPCODE_GETUPVAL = 0x26,
  HKS_OPCODE_SETUPVAL = 0x27,
  HKS_OPCODE_ADD = 0x28,
  HKS_OPCODE_ADD_BK = 0x29,
  HKS_OPCODE_SUB = 0x2A,
  HKS_OPCODE_SUB_BK = 0x2B,
  HKS_OPCODE_MUL = 0x2C,
  HKS_OPCODE_MUL_BK = 0x2D,
  HKS_OPCODE_DIV = 0x2E,
  HKS_OPCODE_DIV_BK = 0x2F,
  HKS_OPCODE_MOD = 0x30,
  HKS_OPCODE_MOD_BK = 0x31,
  HKS_OPCODE_POW = 0x32,
  HKS_OPCODE_POW_BK = 0x33,
  HKS_OPCODE_NEWTABLE = 0x34,
  HKS_OPCODE_UNM = 0x35,
  HKS_OPCODE_NOT = 0x36,
  HKS_OPCODE_LEN = 0x37,
  HKS_OPCODE_LT = 0x38,
  HKS_OPCODE_LT_BK = 0x39,
  HKS_OPCODE_LE = 0x3A,
  HKS_OPCODE_LE_BK = 0x3B,
  HKS_OPCODE_CONCAT = 0x3C,
  HKS_OPCODE_TESTSET = 0x3D,
  HKS_OPCODE_FORPREP = 0x3E,
  HKS_OPCODE_FORLOOP = 0x3F,
  HKS_OPCODE_SETLIST = 0x40,
  HKS_OPCODE_CLOSE = 0x41,
  HKS_OPCODE_CLOSURE = 0x42,
  HKS_OPCODE_VARARG = 0x43,
  HKS_OPCODE_TAILCALL_I_R1 = 0x44,
  HKS_OPCODE_CALL_I_R1 = 0x45,
  HKS_OPCODE_SETUPVAL_R1 = 0x46,
  HKS_OPCODE_TEST_R1 = 0x47,
  HKS_OPCODE_NOT_R1 = 0x48,
  HKS_OPCODE_GETFIELD_R1 = 0x49,
  HKS_OPCODE_SETFIELD_R1 = 0x4A,
  HKS_OPCODE_NEWSTRUCT = 0x4B,
  HKS_OPCODE_DATA = 0x4C,
  HKS_OPCODE_SETSLOTN = 0x4D,
  HKS_OPCODE_SETSLOTI = 0x4E,
  HKS_OPCODE_SETSLOT = 0x4F,
  HKS_OPCODE_SETSLOTS = 0x50,
  HKS_OPCODE_SETSLOTMT = 0x51,
  HKS_OPCODE_CHECKTYPE = 0x52,
  HKS_OPCODE_CHECKTYPES = 0x53,
  HKS_OPCODE_GETSLOT = 0x54,
  HKS_OPCODE_GETSLOTMT = 0x55,
  HKS_OPCODE_SELFSLOT = 0x56,
  HKS_OPCODE_SELFSLOTMT = 0x57,
  HKS_OPCODE_GETFIELD_MM = 0x58,
  HKS_OPCODE_CHECKTYPE_D = 0x59,
  HKS_OPCODE_GETSLOT_D = 0x5A,
  HKS_OPCODE_GETGLOBAL_MEM = 0x5B,
  HKS_OPCODE_DELETE = 0x5C,
  HKS_OPCODE_DELETE_BK = 0x5D,
  HKS_OPCODE_MAX = 0x5E,
};

/* 1015 */
enum HksBytecodeStrippingLevel
{
  HKS_BYTECODE_STRIPPING_NONE = 0x0,
  HKS_BYTECODE_STRIPPING_PROFILING = 0x1,
  HKS_BYTECODE_STRIPPING_ALL = 0x2,
};

/* 1016 */
enum $22F4C2B1AD10E9D1447823EDC685F0DB
{
  HKS_DEFAULT_CALLSTACK_SIZE = 0x8,
  HKS_DEFAULT_API_STACK_SIZE = 0x32,
  HKS_MAX_CSTACK_CALL_SIZE = 0x80,
  HKS_MAX_EVENT_DEPTH = 0x20,
  HKS_METAMETHOD_STACK_SPACE = 0x5,
  HKS_DEBUGGER_DEFAULT_PORT = 0x6C4D,
  HKS_DEBUGGER_DEFAULT_TIMEOUT = 0x1F4,
};

/* 1017 */
enum HksError
{
  HKS_NO_ERROR = 0x0,
  LUA_ERRSYNTAX = 0xFFFFFFFC,
  LUA_ERRFILE = 0xFFFFFFFB,
  LUA_ERRRUN = 0xFFFFFF9C,
  LUA_ERRMEM = 0xFFFFFF38,
  LUA_ERRERR = 0xFFFFFED4,
  HKS_THROWING_ERROR = 0xFFFFFE0C,
  HKS_GC_YIELD = 0x1,
};

/* 1018 */
enum $4871CFD3E07E42314B5FAAF9684C1486
{
  LUA_IDSIZE = 0x200,
};

/* 1019 */
enum HksCompilerSettings::BytecodeSharingFormat
{
  BYTECODE_DEFAULT = 0x0,
  BYTECODE_INPLACE = 0x1,
  BYTECODE_REFERENCED = 0x2,
};

/* 1020 */
enum HksCompilerSettings::IntLiteralOptions
{
  INT_LITERALS_NONE = 0x0,
  INT_LITERALS_LUD = 0x1,
  INT_LITERALS_32BIT = 0x1,
  INT_LITERALS_UI64 = 0x2,
  INT_LITERALS_64BIT = 0x2,
  INT_LITERALS_ALL = 0x3,
};

/* 1021 */
enum hks::AllocTypes
{
  Alloc_Table_Hdr = 0x0,
  Alloc_Table_Hash = 0x1,
  Alloc_Table_Array = 0x2,
  Alloc_CClosure = 0x3,
  Alloc_Closure = 0x4,
  Alloc_IFunction_Hdr = 0x5,
  Alloc_IFunction_Constants = 0x6,
  Alloc_IFunction_Debug_LineInfo = 0x7,
  Alloc_IFunction_Debug_LocalInfo = 0x8,
  Alloc_IFunction_Debug_UpvalInfo = 0x9,
  Alloc_IFunction_Instructions = 0xA,
  Alloc_IFunction_Children = 0xB,
  Alloc_ByteCodeReader_Data = 0xC,
  Alloc_CharacterBuffer = 0xD,
  Alloc_State = 0xE,
  Alloc_State_APIStack = 0xF,
  Alloc_State_CallStack = 0x10,
  Alloc_State_Globals = 0x11,
  Alloc_Upvalue = 0x12,
  Alloc_Struct_Proto_List = 0x13,
  Alloc_Struct_Instance = 0x14,
  Alloc_Serialize_MemBuffer = 0x15,
  Alloc_Serialize_StringReader = 0x16,
  Alloc_GC_VisitStack = 0x17,
  Alloc_GC_WeakStack = 0x18,
  Alloc_GC_GreyStack = 0x19,
  Alloc_GC_GreyStack_RemarkStack = 0x1A,
  Alloc_UserData = 0x1B,
  Alloc_String = 0x1C,
  Alloc_String_Table = 0x1D,
  Alloc_String_Pinner = 0x1E,
  Alloc_String_Pinner_Node = 0x1F,
  Alloc_Script_Profiler = 0x20,
  Alloc_Dynamic_Buffer = 0x21,
  Alloc_Bytecode_Optimizer = 0x22,
  Alloc_Compiler_Preprocessor = 0x23,
  Alloc_Compiler_Func_Object = 0x24,
  Alloc_IFunction_DebugInfo = 0x25,
};

/* 1022 */
typedef $F405DBE12AC9DCDAC57F7AFCE3D12168 hks::MemoryManager::ChunkColor;

/* 1023 */
enum Hks_DeleteCheckingMode
{
  HKS_DELETE_CHECKING_OFF = 0x0,
  HKS_DELETE_CHECKING_ACCURATE = 0x1,
  HKS_DELETE_CHECKING_SAFE = 0x2,
};

/* 1024 */
enum hks::GCResumePhase
{
  GC_STATE_MARKING_UPVALUES = 0x0,
  GC_STATE_MARKING_GLOBAL_TABLE = 0x1,
  GC_STATE_MARKING_REGISTRY = 0x2,
  GC_STATE_MARKING_PROTOTYPES = 0x3,
  GC_STATE_MARKING_SCRIPT_PROFILER = 0x4,
  GC_STATE_MARKING_FINALIZER_STATE = 0x5,
  GC_TABLE_MARKING_ARRAY = 0x6,
  GC_TABLE_MARKING_HASH = 0x7,
};

/* 1025 */
enum hks::GC_Call_Type
{
  GC_CALL_AUTOMATED = 0x0,
  GC_CALL_USER = 0x1,
  GC_CALL_EMERGENCY = 0x2,
};

/* 1026 */
enum hks::Metamethod
{
  M_MODE = 0x0,
  M_INDEX = 0x1,
  M_NEWINDEX = 0x2,
  M_ADD = 0x3,
  M_SUB = 0x4,
  M_MUL = 0x5,
  M_DIV = 0x6,
  M_MOD = 0x7,
  M_POW = 0x8,
  M_CONCAT = 0x9,
  M_LEN = 0xA,
  M_UNM = 0xB,
  M_LE = 0xC,
  M_EQ = 0xD,
  M_LT = 0xE,
  M_GC = 0xF,
  M_CALL = 0x10,
  M_VIZ = 0x11,
  M_SELF = 0x12,
  N_METAMETHODS = 0x13,
};

/* 1027 */
enum HksBytecodeSharingMode
{
  HKS_BYTECODE_SHARING_OFF = 0x0,
  HKS_BYTECODE_SHARING_ON = 0x1,
  HKS_BYTECODE_SHARING_SECURE = 0x2,
};

/* 1028 */
enum HksBytecodeEndianness
{
  HKS_BYTECODE_DEFAULT_ENDIAN = 0x0,
  HKS_BYTECODE_BIG_ENDIAN = 0x1,
  HKS_BYTECODE_LITTLE_ENDIAN = 0x2,
};

/* 1029 */
enum hks::Debugger::CallBackActions
{
  ACTION_CONTINUE = 0x0,
  ACTION_STEP_IN = 0x1,
  ACTION_STEP_OUT = 0x2,
  ACTION_STEP_OVER = 0x3,
};

/* 1030 */
enum hks::Debugger::RunMode
{
  RUN_CONTINUE = 0x0,
  RUN_STEP_IN = 0x1,
  RUN_STEP_OUT = 0x2,
  RUN_STEP_OVER = 0x3,
};

/* 1031 */
enum tcpipErrorCodes
{
  TCPIP_NO_ERROR = 0x0,
  TCPIP_SOCK_ALLOC_FAILED = 0xFFFFFFF1,
  TCPIP_SOCK_BIND_FAILED = 0xFFFFFFF0,
};

/* 1032 */
enum $2A18429B53F9EFF45283B28BA1AFA611
{
  OPR_ADD = 0x0,
  OPR_SUB = 0x1,
  OPR_MUL = 0x2,
  OPR_DIV = 0x3,
  OPR_MOD = 0x4,
  OPR_POW = 0x5,
  OPR_CONCAT = 0x6,
  OPR_NE = 0x7,
  OPR_EQ = 0x8,
  OPR_LT = 0x9,
  OPR_LE = 0xA,
  OPR_GT = 0xB,
  OPR_GE = 0xC,
  OPR_AND = 0xD,
  OPR_OR = 0xE,
  OPR_NOBINOPR = 0xF,
};

/* 1033 */
enum $3FE14E39FB9C49CFBE17919EC4BBEB82
{
  STORAGE_SIZE = 0x88,
};

/* 1034 */
typedef $3FE14E39FB9C49CFBE17919EC4BBEB82 $D9FAC2031DE7AF25B0F2EC7B9C002CA0;

/* 1035 */
enum $B3C23D7DC1FD480BC2B65C41391A37DC
{
  OPR_MINUS = 0x0,
  OPR_NOT = 0x1,
  OPR_LEN = 0x2,
  OPR_NOUNOPR = 0x3,
};

/* 1036 */
enum hks::CompatibilityBits
{
  HKS_COMPATIBILITY_BIT_MEMOIZATION = 0x0,
  HKS_COMPATIBILITY_BIT_STRUCTURES = 0x1,
  HKS_COMPATIBILITY_BIT_SELF = 0x2,
  HKS_COMPATIBILITY_BIT_DOUBLES = 0x3,
  HKS_COMPATIBILITY_BIT_NATIVEINT = 0x4,
  HKS_COMPATIBILITY_MEMOIZATION = 0x1,
  HKS_COMPATIBILITY_STRUCTURES = 0x2,
  HKS_COMPATIBILITY_SELF = 0x0,
  HKS_COMPATIBILITY_DOUBLES = 0x0,
  HKS_COMPATIBILITY_NATIVEINT = 0x0,
  HKS_COMPATIBILITY_SUMMARY = 0x3,
};

/* 1037 */
enum hks::CodeGenerator::LoopState::LoopKind
{
  FOR = 0x0,
  WHILE = 0x1,
  REPEAT = 0x2,
  IF = 0x3,
};

/* 1038 */
enum $BD12C47C437625427982A071BFE85009
{
  INIT_GREY_STACK_SIZE = 0x140,
  INIT_REMARK_TABLE_STACK_SIZE = 0x8,
  GC_BUFFER_SPACE = 0x400,
  GC_MAX_DEPTH = 0x5F,
};

/* 1039 */
enum $46A85369B497C57492CBE7BDC26BEB13
{
  GC_FINALIZE_JUMP = 0x0,
  GC_FINALIZE_FINISHED = 0x1,
};

/* 1040 */
enum hks::BytecodeReader::Reader::StreamState
{
  STREAM_OK = 0x0,
  STREAM_END = 0x1,
};

/* 1041 */
typedef _ATTRIBUTEINFO hks::CodeGenerator::NamePart::Type;

/* 1042 */
enum $84B24017179C10FAF000CA87AE4EC150
{
  HKS_DUMP_HEADERSIZE = 0xE,
  HKS_DUMP_LUA_VERSION = 0x51,
  HKS_DUMP_LUA_FORMAT = 0x0,
  HKS_DUMP_HKS_FORMAT = 0xD,
};

/* 1043 */
enum hks::Preprocessor::ActionType
{
  E_onParseStart = 0x0,
  E_onParseEnd = 0x1,
  E_onEnterBlock = 0x2,
  E_onLeaveBlock = 0x3,
  E_onIfBranch = 0x4,
  E_onIfThenStart = 0x5,
  E_onIfThenEnd = 0x6,
  E_onIfStart = 0x7,
  E_onElseifStart = 0x8,
  E_onElseStart = 0x9,
  E_onElseEnd = 0xA,
  E_onIfEnd = 0xB,
  E_onWhileStart = 0xC,
  E_onWhileEnd = 0xD,
  E_onWhileConditionStart = 0xE,
  E_onWhileConditionEnd = 0xF,
  E_onWhileBodyStart = 0x10,
  E_onWhileBodyEnd = 0x11,
  E_onForStart = 0x12,
  E_onForEnd = 0x13,
  E_onForBody = 0x14,
  E_onForBodyStart = 0x15,
  E_onForBodyEnd = 0x16,
  E_onForNumericStart = 0x17,
  E_onForNumericEnd = 0x18,
  E_onForNumericIterator = 0x19,
  E_onForNumericInitValueStart = 0x1A,
  E_onForNumericInitValueEnd = 0x1B,
  E_onForNumericLimitValueStart = 0x1C,
  E_onForNumericLimitValueEnd = 0x1D,
  E_onForNumericStepValueStart = 0x1E,
  E_onForNumericStepValueEnd = 0x1F,
  E_onForNumericDefaultStep = 0x20,
  E_onForListStart = 0x21,
  E_onForListEnd = 0x22,
  E_onForListIteratorsStart = 0x23,
  E_onForListIteratorsEnd = 0x24,
  E_onForListIterator = 0x25,
  E_onForListIterSourceStart = 0x26,
  E_onForListIterSourceEnd = 0x27,
  E_onRepeatStart = 0x28,
  E_onRepeatEnd = 0x29,
  E_onRepeatBodyStart = 0x2A,
  E_onRepeatBodyEnd = 0x2B,
  E_onRepeatConditionalStart = 0x2C,
  E_onRepeatConditionalEnd = 0x2D,
  E_onFunctionStart = 0x2E,
  E_onFunctionEnd = 0x2F,
  E_onFunctionFirstName = 0x30,
  E_onFunctionNameField = 0x31,
  E_onFunctionNeedsSelf = 0x32,
  E_onFunctionArglistStart = 0x33,
  E_onFunctionArglistEnd = 0x34,
  E_onFunctionParam = 0x35,
  E_onFunctionParamVararg = 0x36,
  E_onFunctionArglistEmpty = 0x37,
  E_onFunctionBodyStart = 0x38,
  E_onFunctionBodyEnd = 0x39,
  E_onFunctionCall = 0x3A,
  E_onLocalFunctionStart = 0x3B,
  E_onLocalFunctionName = 0x3C,
  E_onLocalFunctionEnd = 0x3D,
  E_onLocalDefStart = 0x3E,
  E_onLocalDefEnd = 0x3F,
  E_onLocalDefined = 0x40,
  E_onLocalDefAssignmentStart = 0x41,
  E_onLocalDefAssignmentEnd = 0x42,
  E_onLocalDefNoAssignment = 0x43,
  E_onReturnEmpty = 0x44,
  E_onReturnListStart = 0x45,
  E_onReturnListEnd = 0x46,
  E_onBreak = 0x47,
  E_onPrefixSubExpressionStart = 0x48,
  E_onPrefixSubExpressionEnd = 0x49,
  E_onPrefixIdent = 0x4A,
  E_onFieldSeparator = 0x4B,
  E_onField = 0x4C,
  E_onIndexStart = 0x4D,
  E_onIndexEnd = 0x4E,
  E_onFunctionArgumentsStart = 0x4F,
  E_onFunctionArgumentsEnd = 0x50,
  E_onFunctionArgumentsEmpty = 0x51,
  E_onFunctionArgumentsTable = 0x52,
  E_onFunctionArgumentsLiteral = 0x53,
  E_onFunctionArgumentsListStart = 0x54,
  E_onFunctionArgumentsListEnd = 0x55,
  E_onFunctionBodystatStart = 0x56,
  E_onFunctionBodystatEnd = 0x57,
  E_onFunctionNameParsed = 0x58,
  E_onConstructorStart = 0x59,
  E_onConstructorEnd = 0x5A,
  E_onConstructorNextField = 0x5B,
  E_onConstructorListFieldStart = 0x5C,
  E_onConstructorListFieldEnd = 0x5D,
  E_onRecordFieldStart = 0x5E,
  E_onRecordFieldEnd = 0x5F,
  E_onRecordFieldIdent = 0x60,
  E_onRecordFieldAssignment = 0x61,
  E_onExpressionStart = 0x62,
  E_onExpressionEnd = 0x63,
  E_onExpressionNumber = 0x64,
  E_onExpressionString = 0x65,
  E_onExpressionIntLiteral = 0x66,
  E_onExpressionNil = 0x67,
  E_onExpressionTrue = 0x68,
  E_onExpressionFalse = 0x69,
  E_onExpressionDots = 0x6A,
  E_onExpressionListNext = 0x6B,
  E_onSingleExpressionStart = 0x6C,
  E_onSingleExpressionEnd = 0x6D,
  E_onSubexpressionStart = 0x6E,
  E_onUnaryOperatorStart = 0x6F,
  E_onUnaryOperatorEnd = 0x70,
  E_onInfixOperatorStart = 0x71,
  E_onInfixOperatorEnd = 0x72,
  E_onSubexpressionEnd = 0x73,
  E_onExpressionIndexStart = 0x74,
  E_onExpressionIndexEnd = 0x75,
  E_onPrimaryExpressionStart = 0x76,
  E_onPrimaryExpressionEnd = 0x77,
  E_onSelfCall = 0x78,
  E_onAssignmentStart = 0x79,
  E_onAssignmentEnd = 0x7A,
  E_onAssignmentNextStart = 0x7B,
  E_onAssignmentNextEnd = 0x7C,
  E_onAssignmentBodyStart = 0x7D,
  E_onAssignmentBodyEnd = 0x7E,
  E_onStatementStart = 0x7F,
  E_onStatementEnd = 0x80,
  E_onSimpleStatementStart = 0x81,
  E_onSimpleStatementEnd = 0x82,
  E_onSimpleStatementFuncall = 0x83,
  E_onConditionalStart = 0x84,
  E_onConditionalEnd = 0x85,
  E_onDeleteStart = 0x86,
  E_onDeleteExpression = 0x87,
  E_onDeleteEnd = 0x88,
  E_onDefstruct = 0x89,
  E_onDefstructBacktable = 0x8A,
  E_onDefstructMetaslot = 0x8B,
  E_onDefstructDefSlot = 0x8C,
  E_onDefstructEnd = 0x8D,
  E_onMkStructStart = 0x8E,
  E_onMkStructEnd = 0x8F,
  E_onForNumericIteratorTyped = 0x90,
  E_onForListIteratorTyped = 0x91,
  E_onFunctionParamTyped = 0x92,
  E_onLocalDefinedTyped = 0x93,
};

/* 1044 */
enum $65DD0619B009993C609591AF80B69BA4
{
  BLOCK_SIZE = 0x20,
};

/* 1045 */
enum $50A35D460D37D315128E1AD063F11470
{
  HKS_MAX_PACKAGE_NAME = 0x100,
};

/* 1046 */
enum hks::Delete_Arg_Type
{
  DELETE_ARG_LOCAL = 0x0,
  DELETE_ARG_GLOBAL = 0x1,
  DELETE_ARG_UPVAL = 0x2,
  DELETE_ARG_INDEXED = 0x3,
  NUM_DELETE_ARG_TYPES = 0x4,
};

/* 1047 */
enum $63B8531420CFA24C4E70CA651239FA9F
{
  HASH_OFFSET_BITS = 0x18,
  MAX_ARRAY_SIZE = 0x1000000,
};

/* 1048 */
enum $CCF22B67A75BCCD6604280C389540790
{
  MAX_ATTEMPTS = 0x3,
};

/* 1049 */
enum $48864C73BFA9B135AEF16B97BFCBBBE7
{
  HKS_PROTOTYPE_DUMP_FORMAT = 0x1,
};

/* 1050 */
enum $ABF9C63786C5C767FFE5F28073065244
{
  VERSION = 0x4,
  INITIAL_REFERENCE_TABLE_SIZE = 0x8,
};

/* 1051 */
enum $0458266814C904F4CBF4F90DBB4E5DFB
{
  TAG_REFERENCE = 0xE,
  TAG_PERMANENT = 0xF,
  TAG_SPECIAL = 0x10,
  TAG_FENCE = 0x11,
  TAG_UPVALUE = 0x12,
};

/* 1052 */
enum $A654AE761430DFAF23B8A7E9EDF05580
{
  PERMANENTS_TABLE = 0x1,
  REFERENCE_TABLE = 0x2,
};

/* 1053 */
enum $B8A901AD50C5697E4E7EB8E58D3B3004
{
  HKS_COMPILER_LUA_MAX_VARS = 0xC8,
  HKS_COMPILER_MAX_STACK = 0xC8,
  HKS_LOCAL_VAR_ARRAY_BLOCK_SIZE = 0x10,
};

/* 1054 */
enum $A46600F5787D958C10250B01477CFF79
{
  LUA_REFNIL = 0xFFFFFFFF,
  LUA_NOREF = 0xFFFFFFFE,
};

/* 1055 */
enum hks::netTransport::Status
{
  NOT_SETUP = 0x0,
  SETUP_FAILED = 0x1,
  NO_CLIENT = 0x2,
  NEW_CLIENT = 0x3,
  HAVE_CLIENT = 0x4,
};

/* 1056 */
enum hks::file_type
{
  REGULAR = 0x0,
  POPEN = 0x1,
  NOCLOSE = 0x2,
  TMPFILE = 0x3,
};

/* 1057 */
enum $23818C31E6F836A4E511F2868B866A36
{
  DEFAULT_CHUNK = 0x400,
};

/* 1058 */
enum $F892281ABC2996819174C42AFB514556
{
  DEFAULT_INFILE_INDEX = 0x1,
  DEFAULT_OUTFILE_INDEX = 0x2,
  DEFAULT_ERRFILE_INDEX = 0x3,
};

/* 1059 */
enum $487E3F10B2D522C1A6C1A35662BB5F8C
{
  HKS_SETVBUF_DEFAULT = 0x200,
};

/* 1060 */
enum $7F4CDCB14A2A79CFC69911BF9ECA176D
{
  FILE_BUFFER_SIZE_BYTES = 0x800,
};

/* 1061 */
enum $E2F506AA414EC7490152F5A0B4420E27
{
  INITIAL_BUFFER_SIZE = 0xC00,
};

/* 1062 */
enum hks::Profiler::ProfGCPhases
{
  GC_Starting = 0x0,
  GC_MainStateMarking = 0x1,
  GC_VisitStack = 0x2,
  GC_GreyStack = 0x3,
  GC_SafeValue = 0x4,
  GC_LuaPlus = 0x5,
  GC_StateStacks = 0x6,
  GC_CompilerDataStructures = 0x7,
  GC_StructProtos = 0x8,
  GC_ProcessCoroutines = 0x9,
  GC_CleanWeakTables = 0xA,
  GC_UserdataFinalization = 0xB,
  GC_ProcessInternList = 0xC,
  GC_Sweeping = 0xD,
  GC_Finished = 0xE,
  NumProGCPhases = 0xF,
};

/* 1063 */
enum $312CA1C4291CDBC3EC4F2EEFD7555057
{
  PACKET_ID_OFFSET = 0x0,
  PACKET_FRAGMENT_OFFSET = 0x8,
  PACKET_TYPE_OFFSET = 0x10,
  PAYLOAD_OFFSET = 0x18,
};

/* 1064 */
enum hks::Preprocessor::MatchStatus
{
  NO_MATCH = 0x0,
  MAYBE_MATCH = 0x1,
  MATCH = 0x2,
};

/* 1065 */
enum hks::Preprocessor::StrippableAssertMatcher::State
{
  STATE_START = 0x0,
  STATE_FOUND_IDENT = 0x1,
  STATE_MATCHED_PREFIX = 0x2,
  STATE_NO_MATCH = 0x3,
  STATE_MATCH = 0x4,
};

/* 1066 */
typedef hks::Preprocessor::MatchStatus hks::state_type;

/* 1067 */
enum hks::CodeGenerator::StructChainResult
{
  SLOT_FOUND = 0x0,
  SLOT_RUNTIME = 0x1,
  SLOT_UNREACHABLE = 0x2,
};

/* 1068 */
enum hks::CodeGenerator::StructAssignmentType
{
  STRUCT_ASSIGN_NIL = 0x0,
  STRUCT_ASSIGN_NOTP = 0x1,
  STRUCT_ASSIGN_GEN = 0x2,
  STRUCT_ASSIGN_RUNTIME = 0x3,
  STRUCT_ASSIGN_BACKING = 0x4,
};

/* 1069 */
enum $0BE0A6E8D1411F50D158E0F09F823D00
{
  HKS_WEAKVALUES = 0x1,
  HKS_WEAKKEYS = 0x2,
};

/* 1070 */
enum $D6654CDA227F6AFE0BDEB6C05A3C9238
{
  MAX_CHAIN_LENGTH = 0xF,
};

/* 1071 */
typedef hks::BytecodeReader::Reader::StreamState hks::CompilerReader::StreamState;

/* 1072 */
enum hks::VisitorEdges::EdgeTag
{
  EDGE_start = 0x0,
  EDGE_lua_State__m_global = 0x1,
  EDGE_lua_State__m_callStack = 0x2,
  EDGE_lua_State__m_apistack = 0x3,
  EDGE_lua_State__pending = 0x4,
  EDGE_lua_State__globals = 0x5,
  EDGE_lua_State__m_name = 0x6,
  EDGE_lua_State__m_nextState = 0x7,
  EDGE_UpValue__loc = 0x8,
  EDGE_HashTable__key_of_array_entry = 0x9,
  EDGE_HashTable__value_of_array_entry = 0xA,
  EDGE_HashTable__key_of_hash_entry = 0xB,
  EDGE_HashTable__value_of_hash_entry = 0xC,
  EDGE_UserData__m_env = 0xD,
  EDGE_UserData__m_meta = 0xE,
  EDGE_cclosure__m_env = 0xF,
  EDGE_cclosure__m_name = 0x10,
  EDGE_cclosure__upvalues = 0x11,
  EDGE_HksClosure__m_method = 0x12,
  EDGE_HksClosure__m_env = 0x13,
  EDGE_HksClosure__m_cache = 0x14,
  EDGE_HksClosure__upvalues = 0x15,
  EDGE_Method__instructions = 0x16,
  EDGE_Method__constants = 0x17,
  EDGE_Method__children = 0x18,
  EDGE_Method__m_debug = 0x19,
  EDGE_WeakStack_Entry__m_table = 0x1A,
  EDGE_GarbageCollector_WeakStack__m_storage = 0x1B,
  EDGE_GarbageCollector_GreyStack__m_storage = 0x1C,
  EDGE_HksGlobal__m_memory = 0x1D,
  EDGE_HksGlobal__m_collector = 0x1E,
  EDGE_HksGlobal__m_stringTable = 0x1F,
  EDGE_HksGlobal__m_registry = 0x20,
  EDGE_HksGlobal__m_root = 0x21,
  EDGE_HksGlobal__m_activeCoroutine = 0x22,
  EDGE_HksGlobal__m_structProtoByName = 0x23,
  EDGE_HksGlobal__m_protoList = 0x24,
  EDGE_HksGlobal__m_luaplusObjectList = 0x25,
  EDGE_LuaPlus_LuaObject__m_state = 0x26,
  EDGE_LuaPlus_LuaObject__m_object = 0x27,
  EDGE_LuaPlus_LuaObject__m_next = 0x28,
  EDGE_LuaPlus_LuaObject__m_prev = 0x29,
  EDGE_GarbageCollector__m_mainState = 0x2A,
  EDGE_GarbageCollector__m_resumeStack = 0x2B,
  EDGE_GarbageCollector__m_weakStack = 0x2C,
  EDGE_GarbageCollector__m_greyStack = 0x2D,
  EDGE_GarbageCollector__m_safeTableValue = 0x2E,
  EDGE_GarbageCollector__m_safeValue = 0x2F,
  EDGE_ApiStack__item = 0x30,
  EDGE_HksObject__rhs = 0x31,
  EDGE_Method_Constants__item = 0x32,
  EDGE_Method_Children__item = 0x33,
  EDGE_CallStack__item = 0x34,
  EDGE_GarbageCollector_ResumeStack__m_storage = 0x35,
  EDGE_ResumeData_Entry__contents = 0x36,
  EDGE_ResumeData_State__m_state = 0x37,
  EDGE_ResumeData_State__m_pending = 0x38,
  EDGE_ResumeData_Table__m_table = 0x39,
  EDGE_ResumeData_Closure__m_closure = 0x3A,
  EDGE_ResumeData_CClosure__m_cclosure = 0x3B,
  EDGE_ResumeData_Userdata__m_data = 0x3C,
  EDGE_Method_DebugInfo__lineInfo = 0x3D,
  EDGE_Method_DebugInfo__upvalInfo = 0x3E,
  EDGE_Method_DebugInfo__source = 0x3F,
  EDGE_Method_DebugInfo__name = 0x40,
  EDGE_Method_DebugInfo__localInfo = 0x41,
  EDGE_Method_UpValueInfo__data = 0x42,
  EDGE_Method_Locals__data = 0x43,
  EDGE_Method_LocalInfo__name = 0x44,
  EDGE_StructInst__name_of_slot = 0x45,
  EDGE_StructInst__slot_entry = 0x46,
  EDGE_StructInst__backTable = 0x47,
  EDGE_StructInst__metaSlot = 0x48,
  EDGE_StructProto__getName = 0x49,
  EDGE_StructProto__name_of_slot = 0x4A,
  EDGE_ProtoList__m_protoList = 0x4B,
  NUM_EDGES = 0x4C,
};

/* 1073 */
enum $5BD3C8F6BFA1552E5C53EBD3868EC894
{
  TK_AND = 0x400001,
  TK_BREAK = 0x400002,
  TK_DO = 0x400003,
  TK_ELSE = 0x400004,
  TK_ELSEIF = 0x400005,
  TK_END = 0x400006,
  TK_FALSE = 0x400007,
  TK_FOR = 0x400008,
  TK_FUNCTION = 0x400009,
  TK_IF = 0x40000A,
  TK_IN = 0x40000B,
  TK_LOCAL = 0x40000C,
  TK_NIL = 0x40000D,
  TK_NOT = 0x40000E,
  TK_OR = 0x40000F,
  TK_REPEAT = 0x400010,
  TK_RETURN = 0x400011,
  TK_THEN = 0x400012,
  TK_TRUE = 0x400013,
  TK_UNTIL = 0x400014,
  TK_WHILE = 0x400015,
  TK_STRUCT = 0x400016,
  TK_MAKE = 0x400017,
  TK_DELETE = 0x400018,
  TK_RESERVED_LAST = 0x400019,
  TK_CONCAT = 0x40001A,
  TK_DOTS = 0x40001B,
  TK_EQ = 0x40001C,
  TK_GE = 0x40001D,
  TK_LE = 0x40001E,
  TK_NE = 0x40001F,
  TK_NUMBER = 0x400020,
  TK_LITERALLUD = 0x400021,
  TK_LITERALUI64 = 0x400022,
  TK_NAME = 0x400023,
  TK_STRING = 0x400024,
  TK_EOS = 0x400025,
  TK_BOM_INVALID = 0x400026,
  TK_BOM_UTF8 = 0x400027,
  TK_BOM_UTF16LE = 0x400028,
  TK_BOM_UTF16BE = 0x400029,
  TK_BOM_UTF32LE = 0x40002A,
  TK_BOM_UTF32BE = 0x40002B,
  TK_LAST = 0x40002C,
};

/* 1074 */
enum $603D31AFBDCD2D56D708AAE255705E85
{
  START_WITH = 0x1,
  END_WITH = 0x2,
};

/* 1075 */
enum GCOperations
{
  LUA_GCSTOP = 0x0,
  LUA_GCRESTART = 0x1,
  LUA_GCCOLLECT = 0x2,
  LUA_GCCOUNT = 0x3,
  LUA_GCCOUNTB = 0x4,
  LUA_GCSTEP = 0x5,
  LUA_GCSETPAUSE = 0x6,
  LUA_GCSETSTEPMUL = 0x7,
  LUA_GCCYCLES = 0x8,
};

/* 1076 */
enum $19AEB8A8341F9017FF52645144D1C58D
{
  COROUTINE_YIELDING_IN_PROGRESS = 0xFFFC6CAB,
};

/* 1077 */
enum $39453C70A17F12D15AB50D56E47B320D
{
  NRETS = 0x0,
};

/* 1078 */
enum hks::CodeGenerator::ExpressionKind
{
  VVOID = 0x0,
  VNIL = 0x1,
  VTRUE = 0x2,
  VFALSE = 0x3,
  VK = 0x4,
  VKNUM = 0x5,
  VLOCAL = 0x6,
  VUPVAL = 0x7,
  VGLOBAL = 0x8,
  VSLOT = 0x9,
  VINDEXED = 0xA,
  VJMP = 0xB,
  VRELOCABLE = 0xC,
  VNONRELOC = 0xD,
  VCALL = 0xE,
  VVARARG = 0xF,
  VINTRINSIC = 0x10,
};

/* 1079 */
enum $567FC74769BE94D59DED6D899695154E
{
  LUA_MASKCALL = 0x1,
  LUA_MASKRET = 0x2,
  LUA_MASKLINE = 0x4,
  LUA_MASKCOUNT = 0x8,
};

/* 1080 */
enum $B569A53513152616BC280626EDEFD692
{
  FREE_LIST_HEAD = 0x2,
};

/* 1081 */
enum hks::CodeGenerator::IntrinsicType
{
  HKS_NO_INTRINSIC = 0x0,
  HKS_INTRINSIC_INDEX = 0x1,
  HKS_INTRINSIC_INDEX_LITERAL = 0x2,
  HKS_INTRINSIC_NEWINDEX = 0x3,
  HKS_INTRINSIC_NEWINDEX_LITERAL = 0x4,
  HKS_INTRINSIC_SELF = 0x5,
  HKS_INTRINSIC_SELF_LITERAL = 0x6,
  HKS_INTRINSIC_SELF_PLACEHOLDER = 0x7,
};

/* 1082 */
enum hks::VisitorTypes::TypeTag
{
  TYPE_start = 0x0,
  TYPE_lua_State = 0x1,
  TYPE_UpValue = 0x2,
  TYPE_InternString = 0x3,
  TYPE_HashTable = 0x4,
  TYPE_UserData = 0x5,
  TYPE_cclosure = 0x6,
  TYPE_HksClosure = 0x7,
  TYPE_Method = 0x8,
  TYPE_WeakStack_Entry = 0x9,
  TYPE_GarbageCollector__WeakStack = 0xA,
  TYPE_GarbageCollector__GreyStack = 0xB,
  TYPE_HksGlobal = 0xC,
  TYPE_MemoryManager = 0xD,
  TYPE_GarbageCollector = 0xE,
  TYPE_ApiStack = 0xF,
  TYPE_HksObject = 0x10,
  TYPE_StringTable = 0x11,
  TYPE_HksClosure__MethodCache = 0x12,
  TYPE_Method__Instructions = 0x13,
  TYPE_Method__Constants = 0x14,
  TYPE_Method__Children = 0x15,
  TYPE_CallStack = 0x16,
  TYPE_CallStack__ActivationRecord = 0x17,
  TYPE_GarbageCollector__ResumeStack = 0x18,
  TYPE_ResumeData_Entry = 0x19,
  TYPE_ResumeData_State = 0x1A,
  TYPE_ResumeData_Table = 0x1B,
  TYPE_ResumeData_Closure = 0x1C,
  TYPE_ResumeData_CClosure = 0x1D,
  TYPE_ResumeData_Userdata = 0x1E,
  TYPE_Method__DebugInfo = 0x1F,
  TYPE_Method__LineInfo = 0x20,
  TYPE_Method__UpValueInfo = 0x21,
  TYPE_Method__Locals = 0x22,
  TYPE_Method__LocalInfo = 0x23,
  TYPE_LuaPlus__LuaObject = 0x24,
  TYPE_StructInst = 0x25,
  TYPE_StructProto = 0x26,
  TYPE_ProtoList = 0x27,
  NUM_TYPES = 0x28,
};

/* 1083 */
enum $7B4A515C5B8298E21C1E1DEE0ED34CDA
{
  VISIT_STACK_BLOCK_SIZE = 0x12C,
  VISIT_STACK_EXTRA_SLOTS = 0x8,
};

/* 1084 */
enum hks::MemoryAllocationsByType::ChunkAllocationType
{
  LUA_STATE = 0x0,
  LUA_STATE_CALLSTACK = 0x1,
  LUA_STATE_APISTACK = 0x2,
  STRING_TABLE = 0x3,
  STRINGS = 0x4,
  GARBAGECOLLECTOR_GREY_STACK = 0x5,
  GARBAGECOLLECTOR_RESUME_STACK = 0x6,
  GARBAGECOLLECTOR_WEAK_STACK = 0x7,
  USERDATA = 0x8,
  HASHTABLE = 0x9,
  HASHTABLE_HASH_DATA = 0xA,
  HASHTABLE_ARRAY_DATA = 0xB,
  STRUCT_INSTANCE = 0xC,
  C_FUNCTION = 0xD,
  HKS_CLOSURE = 0xE,
  UPVALUES = 0xF,
  LUA_METHOD = 0x10,
  LUA_METHOD_DEBUG_LINES = 0x11,
  LUA_METHOD_DEBUG_UPVALUES = 0x12,
  LUA_METHOD_DEBUG_LOCALS = 0x13,
  LUA_METHOD_INSTRUCTIONS = 0x14,
  LUA_METHOD_CONSTANTS = 0x15,
  LUA_METHOD_CHILDREN = 0x16,
  TOTAL_CHUNK_ALLOCATION_TYPES = 0x17,
};

/* 1085 */
enum $9F923C1F6181A47752078051C3D5DC5E
{
  MAX_TOKEN_LEN = 0xA,
};

/* 1086 */
enum hks::CompilerLexer::TextModes
{
  ASCII = 0x0,
  UTF8 = 0x1,
};

/* 1087 */
enum $E5E6675DC6B45E21C182DCB6C72DAD36
{
  NOT_IN_HASH = 0xFFFFFF,
};

/* 1088 */
enum $51C9FAF993756D1755F31A3E06E5DF31
{
  SIZE = 0x100,
};

/* 1089 */
typedef $51C9FAF993756D1755F31A3E06E5DF31 $13928D00174D40F76CA4883DF527733C;

/* 1090 */
enum $1EA2ABB70E5E57C1E6A2446261CF29A6
{
  LIMIT = 0xA,
};

/* 1091 */
enum $A3228CA7A68E901C749C7DA356B625BD
{
  MATCH_SIZE = 0x64,
};

/* 1092 */
enum $E927AE6E0C8A2EDE503094E86E9BF40C
{
  STRING_MAX_FORMAT = 0x3F,
};

/* 1093 */
enum D3D11_RESOURCE_MISC_FLAG
{
  D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1,
  D3D11_RESOURCE_MISC_SHARED = 0x2,
  D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4,
  D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10,
  D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20,
  D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40,
  D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80,
  D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100,
  D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200,
  D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 0x800,
  D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 0x1000,
  D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x2000,
  D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000,
  D3D11_RESOURCE_MISC_GUARDED = 0x8000,
};

/* 1094 */
enum D3D11_BUFFER_UAV_FLAG
{
  D3D11_BUFFER_UAV_FLAG_RAW = 0x1,
  D3D11_BUFFER_UAV_FLAG_APPEND = 0x2,
  D3D11_BUFFER_UAV_FLAG_COUNTER = 0x4,
};

/* 1095 */
enum D3D11_BUFFEREX_SRV_FLAG
{
  D3D11_BUFFEREX_SRV_FLAG_RAW = 0x1,
};

/* 1096 */
enum $81E4929C05AC07A8B53CE7428DFCFE39
{
  VAL_0 = 0x0,
  VAL_1_4 = 0x1,
  VAL_1_3 = 0x2,
  VAL_3_8 = 0x3,
  VAL_1_2 = 0x4,
  VAL_2_3 = 0x5,
  VAL_3_4 = 0x6,
  VAL_1 = 0x7,
};

/* 1097 */
enum $64AE7D6A6E0F7E68D0028B1E155C1862
{
  SD_V1 = 0x38,
  SD_V1_V2_1_4 = 0x31,
  SD_V1_V2_1_3 = 0x2A,
  SD_V1_V2_1_2 = 0x24,
  SD_V1_V2_2_4 = 0x24,
  SD_V1_V2_2_3 = 0x15,
  SD_V1_V2_3_4 = 0xE,
  SD_V2_V1_1_4 = 0xE,
  SD_V2_V1_1_3 = 0x15,
  SD_V2_V1_1_2 = 0x24,
  SD_V2_V1_2_4 = 0x24,
  SD_V2_V1_2_3 = 0x2A,
  SD_V2_V1_3_4 = 0x31,
  SD_V2 = 0x7,
  SD_V2_V0_1_4 = 0x6,
  SD_V2_V0_1_3 = 0x5,
  SD_V2_V0_1_2 = 0x4,
  SD_V2_V0_2_4 = 0x4,
  SD_V2_V0_2_3 = 0x2,
  SD_V2_V0_3_4 = 0x1,
  SD_V0_V2_1_4 = 0x1,
  SD_V0_V2_1_3 = 0x2,
  SD_V0_V2_1_2 = 0x4,
  SD_V0_V2_2_4 = 0x4,
  SD_V0_V2_2_3 = 0x5,
  SD_V0_V2_3_4 = 0x6,
  SD_V0 = 0x0,
  SD_V0_V1_1_4 = 0x8,
  SD_V0_V1_1_3 = 0x10,
  SD_V0_V1_1_2 = 0x20,
  SD_V0_V1_2_4 = 0x20,
  SD_V0_V1_2_3 = 0x28,
  SD_V0_V1_3_4 = 0x30,
  SD_V1_V0_1_4 = 0x30,
  SD_V1_V0_1_3 = 0x28,
  SD_V1_V0_1_2 = 0x20,
  SD_V1_V0_2_4 = 0x20,
  SD_V1_V0_2_3 = 0x10,
  SD_V1_V0_3_4 = 0x8,
  SD_CENTER = 0x12,
  SD_C332 = 0x19,
};

/* 1098 */
enum $D9CA625E7359F54C5D6D05509B41E632
{
  R_DALTONIZE_NONE = 0x0,
  R_DALTONIZE_PROTANOPE = 0x1,
  R_DALTONIZE_DEUTERANOPE = 0x2,
  R_DALTONIZE_TRITANOPE = 0x3,
  R_DALTONIZE_COUNT = 0x4,
};

/* 1099 */
enum QueryId
{
  ENUM_ASN_REGION_LAT_LONG_BASED_WEIGHT = 0x1,
  ENUM_ASN_REGION_LAT_LONG_BASED_WEIGHT_FILTERED = 0x4,
};

/* 1100 */
enum DW_MATCH_MAKING_SETTINGS_PING
{
  DW_MATCH_MAKING_SETTINGS_PING_TIME = 0x0,
  DW_MATCH_MAKING_SETTINGS_PING_VALUE = 0x1,
  DW_MATCH_MAKING_SETTINGS_PING_MAX = 0x2,
};

/* 1101 */
enum DW_MATCHMAKING_MANAGER_MODE
{
  DW_MATCHMAKING_MANAGER_SERVER_MODE_NONE = 0x0,
  DW_MATCHMAKING_MANAGER_SERVER_MODE_LISTEN_SERVER = 0x1,
  DW_MATCHMAKING_MANAGER_SERVER_MODE_DEDICATED_SERVER = 0x2,
};

/* 1102 */
enum $769F68704DB21C8E65964BB87DD7C7E3
{
  QUERY_INFO_SYN = 0x0,
  QUERY_STATUS_SYN = 0x1,
  QUERY_SCORE_SYN = 0x2,
  QUERY_PING_SYN = 0x3,
  QUERY_PERF_SYN = 0x4,
  QUERY_CLIENTUIDS_SYN = 0x5,
  MAX_QUERY_CMDS = 0x6,
  QUERY_INFO_ACK = 0x64,
  QUERY_STATUS_ACK = 0x65,
  QUERY_SCORE_ACK = 0x66,
  QUERY_PING_ACK = 0x67,
  QUERY_PERF_ACK = 0x68,
  QUERY_CLIENTUIDS_ACK = 0x69,
  MAX_QUERY_ACKS = 0x6A,
};

/* 1103 */
enum DSLState
{
  DSLStateNone = 0x0,
  DSLStateInited = 0x1,
  DSLStateCreatingSession = 0x2,
  DSLStateSessionCreated = 0x3,
  DSLStateAcquired = 0x4,
  DSLStateGameStarting = 0x5,
  DSLStateWaitingForConnect = 0x6,
  DSLStateGameStarted = 0x7,
  DSLStateGameEnding = 0x8,
  DSLStateMigratingServer = 0x9,
  DSLStateTimedShutdown = 0xA,
  DSLStateCount = 0xB,
};

/* 1104 */
enum DSLTransitionState
{
  DSLTransitionStateIdle = 0x0,
  DSLStateWaitingForClientAcks = 0x1,
  DSLStateWaitingForHostAck = 0x2,
};

/* 1105 */
enum DSMigrateState
{
  DSMStateIdle = 0x0,
  DSMStateRequested = 0x1,
  DSMStateStarted = 0x2,
  DSMStateEnded = 0x3,
};

/* 1106 */
enum DSMessageTarget
{
  DSMessageTargetNone = 0x0,
  DSMessageTargetHost = 0x1,
  DSMessageTargetClients = 0x2,
  DSMessageTargetAll = 0x3,
};

/* 1107 */
enum DSCLJoinState
{
  DSCLJoinStateIdle = 0x0,
  DSCLJoinStateIntroduced = 0x1,
  DSCLJoinStateRegistering = 0x2,
  DSCLJoinStateConnected = 0x3,
  DSCLJoinStateInGame = 0x4,
  DSCLJoinStateCount = 0x5,
};

/* 1108 */
enum LoadJobType
{
  LOADJOB_FF_RESIDENT = 0x0,
  LOADJOB_FF_ALWAYSLOADED = 0x1,
  LOADJOB_STREAMSYNC = 0x2,
  LOADJOB_MP_TRANSIENTS = 0x3,
};

/* 1109 */
enum AlwaysLoadedState
{
  ALWAYSLOADED_IDLE = 0x0,
  ALWAYSLOADED_WANT_LOAD = 0x1,
  ALWAYSLOADED_IS_LOADING = 0x2,
};

/* 1110 */
enum CLStreamSyncItemState
{
  CLS_ITEM_STATE_UNLOADED = 0x0,
  CLS_ITEM_STATE_LOADING = 0x1,
  CLS_ITEM_STATE_LOADED = 0x2,
};

/* 1111 */
enum $B57EABB66B689E98E6A155FDB176FCB1
{
  VECTORFIELD_FLAG_UNIFORM = 0x1,
};

/* 1112 */
enum CG_HudLighting_LightType
{
  CG_HUDLIGHTING_LIGHTTYPE_AMBIENT = 0x0,
  CG_HUDLIGHTING_LIGHTTYPE_DIFFUSE = 0x1,
  CG_HUDLIGHTING_LIGHTTYPE_SPEC = 0x2,
  CG_HUDLIGHTING_LIGHTTYPE_ADDITIVE = 0x3,
  CG_HUDLIGHTING_LIGHTTYPE_COUNT = 0x4,
};

/* 1113 */
enum CustomizationCategory
{
  CUSTOMIZATION_CATEGORY_MALE = 0x0,
  CUSTOMIZATION_CATEGORY_FEMALE = 0x1,
  CUSTOMIZATION_CATEGORY_FULLBODY = 0x2,
  CUSTOMIZATION_CATEGORY_RANDOM_COUNT = 0x3,
  CUSTOMIZATION_CATEGORY_PRESET1 = 0x3,
  CUSTOMIZATION_CATEGORY_PRESET2 = 0x4,
  CUSTOMIZATION_CATEGORY_PRESET3 = 0x5,
  CUSTOMIZATION_CATEGORY_PRESET4 = 0x6,
  CUSTOMIZATION_CATEGORY_PRESET5 = 0x7,
  CUSTOMIZATION_CATEGORY_PRESET6 = 0x8,
  CUSTOMIZATION_CATEGORY_PRESET7 = 0x9,
  CUSTOMIZATION_CATEGORY_PRESET8 = 0xA,
  CUSTOMIZATION_CATEGORY_PRESET9 = 0xB,
  CUSTOMIZATION_CATEGORY_COUNT = 0xC,
};

/* 1114 */
enum CustomizationCategoryWeights
{
  CATEGORY_MALE_ROLL = 0x46,
  CATEGORY_FEMALE_ROLL = 0x5F,
  CATEGORY_FULLBODY_ROLL = 0x64,
  CATEGORY_MAX_ROLL = 0x64,
};

/* 1115 */
enum AnimStateFlag
{
  ANIMSTATE_FLAG_RESTART = 0x1,
  ANIMSTATE_FLAG_ALIASED = 0x2,
};

/* 1116 */
enum PlatformType
{
  PLATFORM_VOID = 0x0,
  PLATFORM_PC = 0x1,
  PLATFORM_XENON = 0x2,
  PLATFORM_PS3 = 0x3,
  PLATFORM_WIIU = 0x4,
  PLATFORM_XB3 = 0x5,
  PLATFORM_PS4 = 0x6,
  PLATFORM_COUNT = 0x7,
};

/* 1117 */
enum _NVAPI_MODULE_ID
{
  NVAPI_MODULE_GPU = 0x0,
  NVAPI_MODULE_PEP = 0x1,
};

/* 1118 */
enum _NV_TARGET_VIEW_MODE
{
  NV_VIEW_MODE_STANDARD = 0x0,
  NV_VIEW_MODE_CLONE = 0x1,
  NV_VIEW_MODE_HSPAN = 0x2,
  NV_VIEW_MODE_VSPAN = 0x3,
  NV_VIEW_MODE_DUALVIEW = 0x4,
  NV_VIEW_MODE_MULTIVIEW = 0x5,
};

/* 1119 */
enum NV_SYSTEM_TYPE
{
  NV_SYSTEM_TYPE_UNKNOWN = 0x0,
  NV_SYSTEM_TYPE_LAPTOP = 0x1,
  NV_SYSTEM_TYPE_DESKTOP = 0x2,
};

/* 1120 */
enum _NV_GPU_OUTPUT_TYPE
{
  NVAPI_GPU_OUTPUT_UNKNOWN = 0x0,
  NVAPI_GPU_OUTPUT_CRT = 0x1,
  NVAPI_GPU_OUTPUT_DFP = 0x2,
  NVAPI_GPU_OUTPUT_TV = 0x3,
};

/* 1121 */
enum _NV_GPU_TYPE
{
  NV_SYSTEM_TYPE_GPU_UNKNOWN = 0x0,
  NV_SYSTEM_TYPE_IGPU = 0x1,
  NV_SYSTEM_TYPE_DGPU = 0x2,
};

/* 1122 */
enum _NV_GPU_BUS_TYPE
{
  NVAPI_GPU_BUS_TYPE_UNDEFINED = 0x0,
  NVAPI_GPU_BUS_TYPE_PCI = 0x1,
  NVAPI_GPU_BUS_TYPE_AGP = 0x2,
  NVAPI_GPU_BUS_TYPE_PCI_EXPRESS = 0x3,
  NVAPI_GPU_BUS_TYPE_FPCI = 0x4,
  NVAPI_GPU_BUS_TYPE_AXI = 0x5,
};

/* 1123 */
enum NV_GPU_RAM_TYPE
{
  NV_GPU_RAM_TYPE_UNKNOWN = 0x0,
  NV_GPU_RAM_TYPE_SDRAM = 0x1,
  NV_GPU_RAM_TYPE_DDR1 = 0x2,
  NV_GPU_RAM_TYPE_DDR2 = 0x3,
  NV_GPU_RAM_TYPE_GDDR2 = 0x4,
  NV_GPU_RAM_TYPE_GDDR3 = 0x5,
  NV_GPU_RAM_TYPE_GDDR4 = 0x6,
  NV_GPU_RAM_TYPE_DDR3 = 0x7,
  NV_GPU_RAM_TYPE_GDDR5 = 0x8,
  NV_GPU_RAM_TYPE_LPDDR2 = 0x9,
};

/* 1124 */
enum _NV_GPU_FB_LOCATION
{
  NV_GPU_FB_RAM_LOCATION_UNKNOWN = 0x0,
  NV_GPU_FB_RAM_LOCATION_GPU_DEDICATED = 0x1,
  NV_GPU_FB_RAM_LOCATION_SYS_SHARED = 0x2,
  NV_GPU_FB_RAM_LOCATION_SYS_DEDICATED = 0x3,
};

/* 1125 */
enum NV_COOLER_POLICY
{
  NVAPI_COOLER_POLICY_NONE = 0x0,
  NVAPI_COOLER_POLICY_MANUAL = 0x1,
  NVAPI_COOLER_POLICY_PERF = 0x2,
  NVAPI_COOLER_POLICY_TEMPERATURE_DISCRETE = 0x4,
  NVAPI_COOLER_POLICY_TEMPERATURE_CONTINUOUS = 0x8,
  NVAPI_COOLER_POLICY_TEMPERATURE_CONTINUOUS_SW = 0x10,
  NVAPI_COOLER_POLICY_DEFAULT = 0x20,
};

/* 1126 */
enum _NV_GPU_PERF_PSTATE_ID
{
  NVAPI_GPU_PERF_PSTATE_P0 = 0x0,
  NVAPI_GPU_PERF_PSTATE_P1 = 0x1,
  NVAPI_GPU_PERF_PSTATE_P2 = 0x2,
  NVAPI_GPU_PERF_PSTATE_P3 = 0x3,
  NVAPI_GPU_PERF_PSTATE_P4 = 0x4,
  NVAPI_GPU_PERF_PSTATE_P5 = 0x5,
  NVAPI_GPU_PERF_PSTATE_P6 = 0x6,
  NVAPI_GPU_PERF_PSTATE_P7 = 0x7,
  NVAPI_GPU_PERF_PSTATE_P8 = 0x8,
  NVAPI_GPU_PERF_PSTATE_P9 = 0x9,
  NVAPI_GPU_PERF_PSTATE_P10 = 0xA,
  NVAPI_GPU_PERF_PSTATE_P11 = 0xB,
  NVAPI_GPU_PERF_PSTATE_P12 = 0xC,
  NVAPI_GPU_PERF_PSTATE_P13 = 0xD,
  NVAPI_GPU_PERF_PSTATE_P14 = 0xE,
  NVAPI_GPU_PERF_PSTATE_P15 = 0xF,
  NVAPI_GPU_PERF_PSTATE_UNDEFINED = 0x10,
  NVAPI_GPU_PERF_PSTATE_ALL = 0x11,
};

/* 1127 */
enum _NV_PERF_PSTATE_CLIENT_LIMIT_ID
{
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_HARD = 0x1,
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_SOFT = 0x2,
  NVAPI_PERF_PSTATE_CLIENT_LIMIT_BOTH = 0x3,
};

/* 1128 */
enum _NVAPI_DITHER_TYPE
{
  NVAPI_DITHER_TYPE_DEFAULT = 0x0,
  NVAPI_DITHER_TYPE_ENABLE = 0x1,
  NVAPI_DITHER_TYPE_DISABLE = 0x2,
};

/* 1129 */
enum NV_GPS_PS_STATUS
{
  NV_GPS_PS_DISABLED = 0x0,
  NV_GPS_PS_ENABLED = 0x1,
  NV_GPS_PS_NOT_SUPPORTED = 0x2,
};

/* 1130 */
enum NV_EVENT_LEVEL
{
  UNKNOWN_LEVEL = 0x0,
  NORMAL_LEVEL = 0x1,
  WARNING_LEVEL = 0x2,
  CRITICAL_LEVEL = 0x3,
};

/* 1131 */
enum _NV_PWR_SOURCE_INFO
{
  NVAPI_PWR_SOURCE_AC = 0x1,
  NVAPI_PWR_SOURCE_BATT = 0x2,
};

/* 1132 */
enum _NV_SELECT_INFO
{
  NVAPI_INDEX_PWR_MZR_HARD = 0x1,
  NVAPI_INDEX_PWR_MZR_SOFT = 0x2,
  NVAPI_INDEX_ADC = 0x3,
};

/* 1133 */
enum _NV_LEVEL_INFO
{
  NVAPI_PWR_MZR_HARD_LIMIT_MAX = 0x1,
  NVAPI_PWR_MZR_HARD_LIMIT_BAL = 0x2,
  NVAPI_PWR_MZR_MAX_BATT = 0x3,
  NVAPI_PWR_MZR_SOFT_LIMIT_MAX = 0x4,
  NVAPI_PWR_MZR_SOFT_LIMIT_BAL = 0x5,
  NVAPI_ADC_OFF = 0x6,
  NVAPI_ADC_ON = 0x7,
};

/* 1134 */
enum _NV_INFOFRAME_TYPE
{
  NV_INFOFRAME_TYPE_AVI = 0x2,
  NV_INFOFRAME_TYPE_SPD = 0x3,
  NV_INFOFRAME_TYPE_AUDIO = 0x4,
  NV_INFOFRAME_TYPE_MS = 0x5,
};

/* 1135 */
enum NV_TV_BORDER_COLOR
{
  NV_TV_BORDER_COLOR_BLACK = 0x0,
  NV_TV_BORDER_COLOR_GREY = 0x1,
};

/* 1136 */
enum _NV_HYBRID_MODE
{
  NV_HYBRID_MODE_IGPU = 0x0,
  NV_HYBRID_MODE_DGPU = 0x1,
  NV_HYBRID_MODE_MULTI_ADAPTER = 0x2,
  NV_HYBRID_MODE_INVALID = 0x3,
  NV_HYBRID_MODE_DGPU_WARMUP = 0x4,
  NV_HYBRID_MODE_DGPU_DEEP_IDLE = 0x5,
  NV_HYBRID_MODE_INSTALL = 0x6,
  NV_HYBRID_MODE_ADAPTIVE = 0x7,
};

/* 1137 */
enum _NV_COPROC_STATE
{
  NV_COPROC_STATE_DGPU_GOLD = 0x0,
  NV_COPROC_STATE_DGPU_ON = 0x1,
};

/* 1138 */
enum NV_MOSAIC_TOPO_TYPE
{
  NV_MOSAIC_TOPO_TYPE_ALL = 0x0,
  NV_MOSAIC_TOPO_TYPE_BASIC = 0x1,
  NV_MOSAIC_TOPO_TYPE_PASSIVE_STEREO = 0x2,
  NV_MOSAIC_TOPO_TYPE_SCALED_CLONE = 0x3,
  NV_MOSAIC_TOPO_TYPE_PASSIVE_STEREO_SCALED_CLONE = 0x4,
  NV_MOSAIC_TOPO_TYPE_MAX = 0x5,
};

/* 1139 */
enum _NVAPI_GSYNC_DELAY_TYPE
{
  NVAPI_GSYNC_DELAY_TYPE_UNKNOWN = 0x0,
  NVAPI_GSYNC_DELAY_TYPE_SYNC_SKEW = 0x1,
  NVAPI_GSYNC_DELAY_TYPE_STARTUP = 0x2,
};

/* 1140 */
enum _NVAPI_D3D_QUERY_TYPE
{
  NVAPI_D3D_QUERY_TYPE_RESERVED0 = 0x0,
  NVAPI_D3D_QUERY_TYPE_RESERVED1 = 0x1,
  NVAPI_D3D_QUERY_TYPE_RESERVED2 = 0x2,
  NVAPI_D3D_QUERY_TYPE_RESERVED3 = 0x3,
  NVAPI_D3D_QUERY_TYPE_ROP_TIMESTAMP = 0x4,
};

/* 1141 */
enum _NV_PATH_DATATYPE
{
  NV_BYTE = 0x0,
  NV_UNSIGNED_BYTE = 0x1,
  NV_SHORT = 0x2,
  NV_UNSIGNED_SHORT = 0x3,
  NV_INT = 0x4,
  NV_UNSIGNED_INT = 0x5,
  NV_FLOAT = 0x6,
  NV_FIXED = 0x7,
};

/* 1142 */
enum _NV_PATH_PARAMTYPE
{
  PATH_QUALITY_NV = 0x8ED8,
  FILL_RULE_NV = 0x8ED9,
  STROKE_CAP0_STYLE_NV = 0x8EE0,
  STROKE_CAP1_STYLE_NV = 0x8EE1,
  STROKE_CAP2_STYLE_NV = 0x8EE2,
  STROKE_CAP3_STYLE_NV = 0x8EE3,
  STROKE_JOIN_STYLE_NV = 0x8EE8,
  STROKE_MITER_LIMIT_NV = 0x8EE9,
};

/* 1143 */
enum _NV_PATH_TARGETTYPE
{
  MATRIX_PATH_TO_CLIP_NV = 0x8F04,
  MATRIX_STROKE_TO_PATH_NV = 0x8F05,
  MATRIX_PATH_COORD0_NV = 0x8F08,
  MATRIX_PATH_COORD1_NV = 0x8F09,
  MATRIX_PATH_COORD2_NV = 0x8F0A,
  MATRIX_PATH_COORD3_NV = 0x8F0B,
};

/* 1144 */
enum _NV_PATH_MODE
{
  FILL_PATH_NV = 0x8F18,
  STROKE_PATH_NV = 0x8F19,
};

/* 1145 */
enum _NV_GAMUT_FORMAT
{
  NV_GAMUT_FORMAT_VERTICES = 0x0,
  NV_GAMUT_FORMAT_RANGE = 0x1,
};

/* 1146 */
enum _NVAPI_SETRESOURCEHINT_CATEGORY
{
  NvApiHints_Sli = 0x1,
};

/* 1147 */
enum _NV_SLI_MODE
{
  NV_SLI_RENDERING_MODE_AUTOSELECT = 0x0,
  NV_SLI_RENDERING_MODE_AFR = 0x1,
  NV_SLI_RENDERING_MODE_SFR = 0x2,
  NV_SLI_RENDERING_MODE_SINGLE = 0x3,
  NV_SLI_RENDERING_MODE_AFR_OF_SFR = 0x4,
};

/* 1148 */
enum NVFBC_BUFFER_FORMAT
{
  NVFBC_FORMAT_ARGB = 0x0,
  NVFBC_FORMAT_RGB = 0x1,
  NVFBC_FORMAT_YUV_420 = 0x2,
  NVFBC_FORMAT_RGB_PLANAR = 0x3,
  NVFBC_FORMAT_RGB_XOR = 0x4,
  NVFBC_FORMAT_YUV_444 = 0x5,
  NVFBC_FORMAT_NOT_SUPPORTED = 0x6,
};

/* 1149 */
enum NVAPI_DEVICE_FEATURE_LEVEL
{
  NVAPI_DEVICE_FEATURE_LEVEL_NULL = 0xFFFFFFFF,
  NVAPI_DEVICE_FEATURE_LEVEL_10_0 = 0x0,
  NVAPI_DEVICE_FEATURE_LEVEL_10_0_PLUS = 0x1,
  NVAPI_DEVICE_FEATURE_LEVEL_10_1 = 0x2,
  NVAPI_DEVICE_FEATURE_LEVEL_11_0 = 0x3,
};

/* 1150 */
enum NVAPI_VSYNC_MODE
{
  NVAPI_VSYNC_DEFAULT = 0x0,
  NVAPI_VSYNC_OFF = 0x1,
  NVAPI_VSYNC_ON = 0x2,
  NVAPI_VSYNC_ADAPTIVE = 0x3,
  NVAPI_VSYNC_ADAPTIVE_HALF_REFRESH_RATE = 0x4,
};

/* 1151 */
enum _NVVIOOWNERTYPE
{
  NVVIOOWNERTYPE_NONE = 0x0,
  NVVIOOWNERTYPE_APPLICATION = 0x1,
  NVVIOOWNERTYPE_DESKTOP = 0x2,
};

/* 1152 */
enum _NV_StereoRegistryProfileType
{
  NVAPI_STEREO_DEFAULT_REGISTRY_PROFILE = 0x0,
  NVAPI_STEREO_DX9_REGISTRY_PROFILE = 0x1,
  NVAPI_STEREO_DX10_REGISTRY_PROFILE = 0x2,
};

/* 1153 */
enum _NV_StereoRegistryID
{
  NVAPI_CONVERGENCE_ID = 0x0,
  NVAPI_FRUSTUM_ADJUST_MODE_ID = 0x1,
};

/* 1154 */
enum _NV_FrustumAdjustMode
{
  NVAPI_NO_FRUSTUM_ADJUST = 0x0,
  NVAPI_FRUSTUM_STRETCH = 0x1,
  NVAPI_FRUSTUM_CLEAR_EDGES = 0x2,
};

/* 1155 */
enum _NVAPI_STEREO_INIT_ACTIVATION_FLAGS
{
  NVAPI_STEREO_INIT_ACTIVATION_IMMEDIATE = 0x0,
  NVAPI_STEREO_INIT_ACTIVATION_DELAYED = 0x1,
};

/* 1156 */
enum _NV_StereoActiveEye
{
  NVAPI_STEREO_EYE_RIGHT = 0x1,
  NVAPI_STEREO_EYE_LEFT = 0x2,
  NVAPI_STEREO_EYE_MONO = 0x3,
};

/* 1157 */
enum _NV_StereoDriverMode
{
  NVAPI_STEREO_DRIVER_MODE_AUTOMATIC = 0x0,
  NVAPI_STEREO_DRIVER_MODE_DIRECT = 0x2,
};

/* 1158 */
enum _NVAPI_STEREO_SURFACECREATEMODE
{
  NVAPI_STEREO_SURFACECREATEMODE_AUTO = 0x0,
  NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO = 0x1,
  NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO = 0x2,
};

/* 1159 */
enum _NV_StereoSwapChainMode
{
  NVAPI_STEREO_SWAPCHAIN_DEFAULT = 0x0,
  NVAPI_STEREO_SWAPCHAIN_STEREO = 0x1,
  NVAPI_STEREO_SWAPCHAIN_MONO = 0x2,
};

/* 1160 */
enum _NVAPI_VENTURA_STATE
{
  NVAPI_VENTURA_STATE_UNSUPPORTED = 0x0,
  NVAPI_VENTURA_STATE_DISABLED = 0x1,
  NVAPI_VENTURA_STATE_ENABLED = 0x2,
};

/* 1161 */
enum _NVAPI_VENTURA_DEVICE
{
  NVAPI_VENTURA_DEVICE_SYSTEM = 0x0,
  NVAPI_VENTURA_DEVICE_CPU_0 = 0x1,
  NVAPI_VENTURA_DEVICE_GPU_0 = 0x2,
};

/* 1162 */
enum _NVVIOBITSPERCOMPONENT
{
  NVVIOBITSPERCOMPONENT_UNKNOWN = 0x0,
  NVVIOBITSPERCOMPONENT_8 = 0x1,
  NVVIOBITSPERCOMPONENT_10 = 0x2,
  NVVIOBITSPERCOMPONENT_12 = 0x3,
};

/* 1163 */
enum _NVVIOLINKID
{
  NVVIOLINKID_UNKNOWN = 0x0,
  NVVIOLINKID_A = 0x1,
  NVVIOLINKID_B = 0x2,
  NVVIOLINKID_C = 0x3,
  NVVIOLINKID_D = 0x4,
};

/* 1164 */
enum _NVVIOCOMPONENTSAMPLING
{
  NVVIOCOMPONENTSAMPLING_UNKNOWN = 0x0,
  NVVIOCOMPONENTSAMPLING_4444 = 0x1,
  NVVIOCOMPONENTSAMPLING_4224 = 0x2,
  NVVIOCOMPONENTSAMPLING_444 = 0x3,
  NVVIOCOMPONENTSAMPLING_422 = 0x4,
};

/* 1165 */
enum _NVVIOCOLORSPACE
{
  NVVIOCOLORSPACE_UNKNOWN = 0x0,
  NVVIOCOLORSPACE_YCBCR = 0x1,
  NVVIOCOLORSPACE_YCBCRA = 0x2,
  NVVIOCOLORSPACE_YCBCRD = 0x3,
  NVVIOCOLORSPACE_GBR = 0x4,
  NVVIOCOLORSPACE_GBRA = 0x5,
  NVVIOCOLORSPACE_GBRD = 0x6,
};

/* 1166 */
enum _NVVIOCAPTURESTATUS
{
  NVVIOSTATUS_STOPPED = 0x0,
  NVVIOSTATUS_RUNNING = 0x1,
  NVVIOSTATUS_ERROR = 0x2,
};

/* 1167 */
enum _NVVIOSIGNALFORMAT
{
  NVVIOSIGNALFORMAT_NONE = 0x0,
  NVVIOSIGNALFORMAT_487I_59_94_SMPTE259_NTSC = 0x1,
  NVVIOSIGNALFORMAT_576I_50_00_SMPTE259_PAL = 0x2,
  NVVIOSIGNALFORMAT_1035I_60_00_SMPTE260 = 0x3,
  NVVIOSIGNALFORMAT_1035I_59_94_SMPTE260 = 0x4,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE295 = 0x5,
  NVVIOSIGNALFORMAT_1080I_60_00_SMPTE274 = 0x6,
  NVVIOSIGNALFORMAT_1080I_59_94_SMPTE274 = 0x7,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE274 = 0x8,
  NVVIOSIGNALFORMAT_1080P_30_00_SMPTE274 = 0x9,
  NVVIOSIGNALFORMAT_1080P_29_97_SMPTE274 = 0xA,
  NVVIOSIGNALFORMAT_1080P_25_00_SMPTE274 = 0xB,
  NVVIOSIGNALFORMAT_1080P_24_00_SMPTE274 = 0xC,
  NVVIOSIGNALFORMAT_1080P_23_976_SMPTE274 = 0xD,
  NVVIOSIGNALFORMAT_720P_60_00_SMPTE296 = 0xE,
  NVVIOSIGNALFORMAT_720P_59_94_SMPTE296 = 0xF,
  NVVIOSIGNALFORMAT_720P_50_00_SMPTE296 = 0x10,
  NVVIOSIGNALFORMAT_1080I_48_00_SMPTE274 = 0x11,
  NVVIOSIGNALFORMAT_1080I_47_96_SMPTE274 = 0x12,
  NVVIOSIGNALFORMAT_720P_30_00_SMPTE296 = 0x13,
  NVVIOSIGNALFORMAT_720P_29_97_SMPTE296 = 0x14,
  NVVIOSIGNALFORMAT_720P_25_00_SMPTE296 = 0x15,
  NVVIOSIGNALFORMAT_720P_24_00_SMPTE296 = 0x16,
  NVVIOSIGNALFORMAT_720P_23_98_SMPTE296 = 0x17,
  NVVIOSIGNALFORMAT_2048P_30_00_SMPTE372 = 0x18,
  NVVIOSIGNALFORMAT_2048P_29_97_SMPTE372 = 0x19,
  NVVIOSIGNALFORMAT_2048I_60_00_SMPTE372 = 0x1A,
  NVVIOSIGNALFORMAT_2048I_59_94_SMPTE372 = 0x1B,
  NVVIOSIGNALFORMAT_2048P_25_00_SMPTE372 = 0x1C,
  NVVIOSIGNALFORMAT_2048I_50_00_SMPTE372 = 0x1D,
  NVVIOSIGNALFORMAT_2048P_24_00_SMPTE372 = 0x1E,
  NVVIOSIGNALFORMAT_2048P_23_98_SMPTE372 = 0x1F,
  NVVIOSIGNALFORMAT_2048I_48_00_SMPTE372 = 0x20,
  NVVIOSIGNALFORMAT_2048I_47_96_SMPTE372 = 0x21,
  NVVIOSIGNALFORMAT_1080PSF_25_00_SMPTE274 = 0x22,
  NVVIOSIGNALFORMAT_1080PSF_29_97_SMPTE274 = 0x23,
  NVVIOSIGNALFORMAT_1080PSF_30_00_SMPTE274 = 0x24,
  NVVIOSIGNALFORMAT_1080PSF_24_00_SMPTE274 = 0x25,
  NVVIOSIGNALFORMAT_1080PSF_23_98_SMPTE274 = 0x26,
  NVVIOSIGNALFORMAT_1080P_50_00_SMPTE274_3G_LEVEL_A = 0x27,
  NVVIOSIGNALFORMAT_1080P_59_94_SMPTE274_3G_LEVEL_A = 0x28,
  NVVIOSIGNALFORMAT_1080P_60_00_SMPTE274_3G_LEVEL_A = 0x29,
  NVVIOSIGNALFORMAT_1080P_60_00_SMPTE274_3G_LEVEL_B = 0x2A,
  NVVIOSIGNALFORMAT_1080I_60_00_SMPTE274_3G_LEVEL_B = 0x2B,
  NVVIOSIGNALFORMAT_2048I_60_00_SMPTE372_3G_LEVEL_B = 0x2C,
  NVVIOSIGNALFORMAT_1080P_50_00_SMPTE274_3G_LEVEL_B = 0x2D,
  NVVIOSIGNALFORMAT_1080I_50_00_SMPTE274_3G_LEVEL_B = 0x2E,
  NVVIOSIGNALFORMAT_2048I_50_00_SMPTE372_3G_LEVEL_B = 0x2F,
  NVVIOSIGNALFORMAT_1080P_30_00_SMPTE274_3G_LEVEL_B = 0x30,
  NVVIOSIGNALFORMAT_2048P_30_00_SMPTE372_3G_LEVEL_B = 0x31,
  NVVIOSIGNALFORMAT_1080P_25_00_SMPTE274_3G_LEVEL_B = 0x32,
  NVVIOSIGNALFORMAT_2048P_25_00_SMPTE372_3G_LEVEL_B = 0x33,
  NVVIOSIGNALFORMAT_1080P_24_00_SMPTE274_3G_LEVEL_B = 0x34,
  NVVIOSIGNALFORMAT_2048P_24_00_SMPTE372_3G_LEVEL_B = 0x35,
  NVVIOSIGNALFORMAT_1080I_48_00_SMPTE274_3G_LEVEL_B = 0x36,
  NVVIOSIGNALFORMAT_2048I_48_00_SMPTE372_3G_LEVEL_B = 0x37,
  NVVIOSIGNALFORMAT_1080P_59_94_SMPTE274_3G_LEVEL_B = 0x38,
  NVVIOSIGNALFORMAT_1080I_59_94_SMPTE274_3G_LEVEL_B = 0x39,
  NVVIOSIGNALFORMAT_2048I_59_94_SMPTE372_3G_LEVEL_B = 0x3A,
  NVVIOSIGNALFORMAT_1080P_29_97_SMPTE274_3G_LEVEL_B = 0x3B,
  NVVIOSIGNALFORMAT_2048P_29_97_SMPTE372_3G_LEVEL_B = 0x3C,
  NVVIOSIGNALFORMAT_1080P_23_98_SMPTE274_3G_LEVEL_B = 0x3D,
  NVVIOSIGNALFORMAT_2048P_23_98_SMPTE372_3G_LEVEL_B = 0x3E,
  NVVIOSIGNALFORMAT_1080I_47_96_SMPTE274_3G_LEVEL_B = 0x3F,
  NVVIOSIGNALFORMAT_2048I_47_96_SMPTE372_3G_LEVEL_B = 0x40,
  NVVIOSIGNALFORMAT_END = 0x41,
};

/* 1168 */
enum _NVVIOINPUTOUTPUTSTATUS
{
  NVINPUTOUTPUTSTATUS_OFF = 0x0,
  NVINPUTOUTPUTSTATUS_ERROR = 0x1,
  NVINPUTOUTPUTSTATUS_SDI_SD = 0x2,
  NVINPUTOUTPUTSTATUS_SDI_HD = 0x3,
};

/* 1169 */
enum _NV_CODEC
{
  NV_CODEC_TYPE_NONE = 0x0,
  NV_CODEC_TYPE_MPEG2 = 0x1,
  NV_CODEC_TYPE_H264 = 0x2,
  NV_CODEC_TYPE_VC1 = 0x3,
  NV_CODEC_TYPE_MVC = 0x4,
};

/* 1170 */
enum _NVVIOPCILINKWIDTH
{
  NVVIOPCILINKWIDTH_UNKNOWN = 0x0,
  NVVIOPCILINKWIDTH_x1 = 0x1,
  NVVIOPCILINKWIDTH_x2 = 0x2,
  NVVIOPCILINKWIDTH_x4 = 0x4,
  NVVIOPCILINKWIDTH_x8 = 0x8,
  NVVIOPCILINKWIDTH_x16 = 0x10,
};

/* 1171 */
enum _NVVIOPCILINKRATE
{
  NVVIOPCILINKRATE_UNKNOWN = 0x0,
  NVVIOPCILINKRATE_GEN1 = 0x1,
  NVVIOPCILINKRATE_GEN2 = 0x2,
  NVVIOPCILINKRATE_GEN3 = 0x3,
};

/* 1172 */
enum _NVVIOSYNCSTATUS
{
  NVVIOSYNCSTATUS_OFF = 0x0,
  NVVIOSYNCSTATUS_ERROR = 0x1,
  NVVIOSYNCSTATUS_SYNCLOSS = 0x2,
  NVVIOSYNCSTATUS_COMPOSITE = 0x3,
  NVVIOSYNCSTATUS_SDI_SD = 0x4,
  NVVIOSYNCSTATUS_SDI_HD = 0x5,
};

/* 1173 */
enum _NVVIOSYNCSOURCE
{
  NVVIOSYNCSOURCE_SDISYNC = 0x0,
  NVVIOSYNCSOURCE_COMPSYNC = 0x1,
};

/* 1174 */
enum _NV_CLUSTER_TYPE
{
  NV_CLUSTER_TYPE_UNKNOWN = 0x0,
  NV_CLUSTER_TYPE_DP_STREAM_CLONE = 0x1,
};

/* 1175 */
enum _NV_CLUSTER_DISCOVERY_MODE
{
  NV_CLUSTER_DISCOVERY_MODE_UNKNOWN = 0x0,
  NV_CLUSTER_DISCOVERY_MODE_MANUAL = 0x1,
  NV_CLUSTER_DISCOVERY_MODE_AUTO = 0x2,
};

/* 1176 */
enum _NV_CLUSTER_STATE
{
  NV_CLUSTER_STATE_UNKNOWN = 0x0,
  NV_CLUSTER_STATE_DISABLED = 0x1,
  NV_CLUSTER_STATE_ENABLED = 0x2,
  NV_CLUSTER_STATE_DELETE = 0x3,
};

/* 1177 */
enum _NVVIOANCPARITYCOMPUTATION
{
  NVVIOANCPARITYCOMPUTATION_AUTO = 0x0,
  NVVIOANCPARITYCOMPUTATION_ON = 0x1,
  NVVIOANCPARITYCOMPUTATION_OFF = 0x2,
};

/* 1178 */
enum _NV_GPU_ILLUMINATION_ATTRIB
{
  NV_GPU_IA_LOGO_BRIGHTNESS = 0x0,
  NV_GPU_IA_SLI_BRIGHTNESS = 0x1,
};

/* 1179 */
enum _NVVIOOUTPUTAREA
{
  NVVIOOUTPUTAREA_FULLSIZE = 0x0,
  NVVIOOUTPUTAREA_SAFEACTION = 0x1,
  NVVIOOUTPUTAREA_SAFETITLE = 0x2,
};

/* 1180 */
enum _NV_DP_COLOR_FORMAT
{
  NV_DP_COLOR_FORMAT_RGB = 0x0,
  NV_DP_COLOR_FORMAT_YCbCr422 = 0x1,
  NV_DP_COLOR_FORMAT_YCbCr444 = 0x2,
};

/* 1181 */
enum _NV_DP_BPC
{
  NV_DP_BPC_DEFAULT = 0x0,
  NV_DP_BPC_6 = 0x1,
  NV_DP_BPC_8 = 0x2,
  NV_DP_BPC_10 = 0x3,
  NV_DP_BPC_12 = 0x4,
  NV_DP_BPC_16 = 0x5,
};

/* 1182 */
enum _NVVIODATAFORMAT
{
  NVVIODATAFORMAT_UNKNOWN = 0xFFFFFFFF,
  NVVIODATAFORMAT_R8G8B8_TO_YCRCB444 = 0x0,
  NVVIODATAFORMAT_R8G8B8A8_TO_YCRCBA4444 = 0x1,
  NVVIODATAFORMAT_R8G8B8Z10_TO_YCRCBZ4444 = 0x2,
  NVVIODATAFORMAT_R8G8B8_TO_YCRCB422 = 0x3,
  NVVIODATAFORMAT_R8G8B8A8_TO_YCRCBA4224 = 0x4,
  NVVIODATAFORMAT_R8G8B8Z10_TO_YCRCBZ4224 = 0x5,
  NVVIODATAFORMAT_X8X8X8_444_PASSTHRU = 0x6,
  NVVIODATAFORMAT_X8X8X8A8_4444_PASSTHRU = 0x7,
  NVVIODATAFORMAT_X8X8X8Z10_4444_PASSTHRU = 0x8,
  NVVIODATAFORMAT_X10X10X10_444_PASSTHRU = 0x9,
  NVVIODATAFORMAT_X10X8X8_444_PASSTHRU = 0xA,
  NVVIODATAFORMAT_X10X8X8A10_4444_PASSTHRU = 0xB,
  NVVIODATAFORMAT_X10X8X8Z10_4444_PASSTHRU = 0xC,
  NVVIODATAFORMAT_DUAL_R8G8B8_TO_DUAL_YCRCB422 = 0xD,
  NVVIODATAFORMAT_DUAL_X8X8X8_TO_DUAL_422_PASSTHRU = 0xE,
  NVVIODATAFORMAT_R10G10B10_TO_YCRCB422 = 0xF,
  NVVIODATAFORMAT_R10G10B10_TO_YCRCB444 = 0x10,
  NVVIODATAFORMAT_X12X12X12_444_PASSTHRU = 0x11,
  NVVIODATAFORMAT_X12X12X12_422_PASSTHRU = 0x12,
  NVVIODATAFORMAT_Y10CR10CB10_TO_YCRCB422 = 0x13,
  NVVIODATAFORMAT_Y8CR8CB8_TO_YCRCB422 = 0x14,
  NVVIODATAFORMAT_Y10CR8CB8A10_TO_YCRCBA4224 = 0x15,
  NVVIODATAFORMAT_R10G10B10_TO_RGB444 = 0x16,
  NVVIODATAFORMAT_R12G12B12_TO_YCRCB444 = 0x17,
  NVVIODATAFORMAT_R12G12B12_TO_YCRCB422 = 0x18,
};

/* 1183 */
enum _NVVIOCOMPSYNCTYPE
{
  NVVIOCOMPSYNCTYPE_AUTO = 0x0,
  NVVIOCOMPSYNCTYPE_BILEVEL = 0x1,
  NVVIOCOMPSYNCTYPE_TRILEVEL = 0x2,
};

/* 1184 */
enum _NVVIOCONFIGTYPE
{
  NVVIOCONFIGTYPE_IN = 0x0,
  NVVIOCONFIGTYPE_OUT = 0x1,
};

/* 1185 */
enum NV_THERMAL_CONTROLLER
{
  NVAPI_THERMAL_CONTROLLER_NONE = 0x0,
  NVAPI_THERMAL_CONTROLLER_GPU_INTERNAL = 0x1,
  NVAPI_THERMAL_CONTROLLER_ADM1032 = 0x2,
  NVAPI_THERMAL_CONTROLLER_MAX6649 = 0x3,
  NVAPI_THERMAL_CONTROLLER_MAX1617 = 0x4,
  NVAPI_THERMAL_CONTROLLER_LM99 = 0x5,
  NVAPI_THERMAL_CONTROLLER_LM89 = 0x6,
  NVAPI_THERMAL_CONTROLLER_LM64 = 0x7,
  NVAPI_THERMAL_CONTROLLER_ADT7473 = 0x8,
  NVAPI_THERMAL_CONTROLLER_SBMAX6649 = 0x9,
  NVAPI_THERMAL_CONTROLLER_VBIOSEVT = 0xA,
  NVAPI_THERMAL_CONTROLLER_OS = 0xB,
  NVAPI_THERMAL_CONTROLLER_UNKNOWN = 0xFFFFFFFF,
};

/* 1186 */
enum _NV_STANDARD_COLORSPACE
{
  NV_STANDARD_COLORSPACE_DISABLED = 0x0,
  NV_STANDARD_COLORSPACE_AUTOSELECT = 0x1,
  NV_STANDARD_COLORSPACE_sRGB = 0x2,
  NV_STANDARD_COLORSPACE_MONITOR_RGB = 0x3,
  NV_STANDARD_COLORSPACE_ADOBE_RGB = 0x4,
  NV_STANDARD_COLORSPACE_ADOBE_WIDE_GAMUT = 0x5,
  NV_STANDARD_COLORSPACE_APPLE = 0x6,
  NV_STANDARD_COLORSPACE_NTSC = 0x7,
  NV_STANDARD_COLORSPACE_HDTV = 0x8,
  NV_STANDARD_COLORSPACE_PAL = 0x9,
  NV_STANDARD_COLORSPACE_DCIP3 = 0xA,
  NV_STANDARD_COLORSPACE_MAX = 0xB,
};

/* 1187 */
enum _NVAPI_D3D9_DMA_TRANSFER_TYPE
{
  NVAPI_D3D9_DMA_TRANSFER_TYPE_PROGRESSIVE = 0x0,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_INTERLACED = 0x1,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_BOB_TOP_FIELD = 0x2,
  NVAPI_D3D9_DMA_TRANSFER_TYPE_BOB_BTM_FIELD = 0x3,
};

/* 1188 */
enum _NV_DISPLAYCONFIG_SPANNING_ORIENTATION
{
  NV_DISPLAYCONFIG_SPAN_NONE = 0x0,
  NV_DISPLAYCONFIG_SPAN_HORIZONTAL = 0x1,
  NV_DISPLAYCONFIG_SPAN_VERTICAL = 0x2,
};

/* 1189 */
enum NV_COOLER_TARGET
{
  NVAPI_COOLER_TARGET_NONE = 0x0,
  NVAPI_COOLER_TARGET_GPU = 0x1,
  NVAPI_COOLER_TARGET_MEMORY = 0x2,
  NVAPI_COOLER_TARGET_POWER_SUPPLY = 0x4,
  NVAPI_COOLER_TARGET_ALL = 0x7,
  NVAPI_COOLER_TARGET_VCD_COOLER1 = 0x8,
  NVAPI_COOLER_TARGET_VCD_COOLER2 = 0x9,
  NVAPI_COOLER_TARGET_VCD_COOLER3 = 0xA,
  NVAPI_COOLER_TARGET_VCD_COOLER4 = 0xB,
  NVAPI_COOLER_TARGET_VCD_COOLER5 = 0xC,
  NVAPI_COOLER_TARGET_VCD_COOLER6 = 0xD,
  NVAPI_COOLER_TARGET_VCD_COOLER7 = 0xE,
  NVAPI_COOLER_TARGET_VCD_COOLER8 = 0xF,
  NVAPI_COOLER_TARGET_VCD_COOLER9 = 0x10,
  NVAPI_COOLER_TARGET_VCD_COOLER10 = 0x11,
  NVAPI_COOLER_TARGET_VCD_COOLER11 = 0x12,
  NVAPI_COOLER_TARGET_VCD_COOLER12 = 0x13,
  NVAPI_COOLER_TARGET_VCD_COOLER13 = 0x14,
  NVAPI_COOLER_TARGET_VCD_COOLER14 = 0x15,
  NVAPI_COOLER_TARGET_VCD_COOLER15 = 0x16,
  NVAPI_COOLER_TARGET_VCD_COOLER16 = 0x17,
  NVAPI_COOLER_TARGET_VCD_COOLER17 = 0x18,
  NVAPI_COOLER_TARGET_VCD_COOLER18 = 0x19,
  NVAPI_COOLER_TARGET_VCD_COOLER19 = 0x1A,
  NVAPI_COOLER_TARGET_VCD_COOLER20 = 0x1B,
};

/* 1190 */
enum NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_ID
{
  NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_GPS = 0x0,
  NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_ACOUSTIC = 0x1,
};

/* 1191 */
enum _NVAPI_VIDEO_ENGINES
{
  NVAPI_VE_UNKNOWN = 0x0,
  NVAPI_VE_PixelShader = 0x1,
  NVAPI_VE_MPEG2Decoder = 0x2,
  NVAPI_VE_VideoProcessor1 = 0x3,
  NVAPI_VE_VideoProcessor2 = 0x4,
  NVAPI_VE_MSDEC = 0x5,
  NVAPI_VE_VIC = 0x6,
};

/* 1192 */
enum _NVAPI_VIDEO_FEATURE_GET_FLAG
{
  NVAPI_VF_GET_COUNT = 0x0,
  NVAPI_VF_GET_DETAILS = 0x1,
};

/* 1193 */
enum NV_GPS_SENSOR_INDEX
{
  NV_GPS_SENSOR_INDEX_TGPU_LIMIT = 0x9,
  NV_GPS_SENSOR_INDEX_PDTS_LIMIT = 0xA,
  NV_GPS_SENSOR_INDEX_SFAN_LIMIT = 0xB,
  NV_GPS_SENSOR_INDEX_SKNT_LIMIT = 0xC,
  NV_GPS_SENSOR_INDEX_CPUE_LIMIT = 0xD,
  NV_GPS_SENSOR_INDEX_TMP1_LIMIT = 0xE,
  NV_GPS_SENSOR_INDEX_TMP2_LIMIT = 0xF,
};

/* 1194 */
enum _NVAPI_D3D9_QUERY_COMMAND
{
  NVAPI_D3D9_QUERY_NULL_CMD = 0x0,
  NVAPI_D3D9_QUERY_STEREO_INFO_CMD = 0x1,
  NVAPI_D3D9_QUERY_COLOR_INFO_CMD = 0x2,
};

/* 1195 */
enum _NVVIOINTERLACEMODE
{
  NVVIOINTERLACEMODE_PROGRESSIVE = 0x0,
  NVVIOINTERLACEMODE_INTERLACE = 0x1,
  NVVIOINTERLACEMODE_PSF = 0x2,
};

/* 1196 */
enum _NVVIOVIDEOSTANDARD
{
  NVVIOVIDEOSTANDARD_SMPTE259 = 0x0,
  NVVIOVIDEOSTANDARD_SMPTE260 = 0x1,
  NVVIOVIDEOSTANDARD_SMPTE274 = 0x2,
  NVVIOVIDEOSTANDARD_SMPTE295 = 0x3,
  NVVIOVIDEOSTANDARD_SMPTE296 = 0x4,
  NVVIOVIDEOSTANDARD_SMPTE372 = 0x5,
};

/* 1197 */
enum _NVVIOVIDEOTYPE
{
  NVVIOVIDEOTYPE_SD = 0x0,
  NVVIOVIDEOTYPE_HD = 0x1,
};

/* 1198 */
enum _NV_DISPLAY_TV_FORMAT
{
  NV_DISPLAY_TV_FORMAT_NONE = 0x0,
  NV_DISPLAY_TV_FORMAT_SD_NTSCM = 0x1,
  NV_DISPLAY_TV_FORMAT_SD_NTSCJ = 0x2,
  NV_DISPLAY_TV_FORMAT_SD_PALM = 0x4,
  NV_DISPLAY_TV_FORMAT_SD_PALBDGH = 0x8,
  NV_DISPLAY_TV_FORMAT_SD_PALN = 0x10,
  NV_DISPLAY_TV_FORMAT_SD_PALNC = 0x20,
  NV_DISPLAY_TV_FORMAT_SD_576i = 0x100,
  NV_DISPLAY_TV_FORMAT_SD_480i = 0x200,
  NV_DISPLAY_TV_FORMAT_ED_480p = 0x400,
  NV_DISPLAY_TV_FORMAT_ED_576p = 0x800,
  NV_DISPLAY_TV_FORMAT_HD_720p = 0x1000,
  NV_DISPLAY_TV_FORMAT_HD_1080i = 0x2000,
  NV_DISPLAY_TV_FORMAT_HD_1080p = 0x4000,
  NV_DISPLAY_TV_FORMAT_HD_720p50 = 0x8000,
  NV_DISPLAY_TV_FORMAT_HD_1080p24 = 0x10000,
  NV_DISPLAY_TV_FORMAT_HD_1080i50 = 0x20000,
  NV_DISPLAY_TV_FORMAT_HD_1080p50 = 0x40000,
  NV_DISPLAY_TV_FORMAT_UHD_4Kp30 = 0x80000,
  NV_DISPLAY_TV_FORMAT_UHD_4Kp25 = 0x100000,
  NV_DISPLAY_TV_FORMAT_UHD_4Kp24 = 0x200000,
  NV_DISPLAY_TV_FORMAT_UHD_4Kp24_SMPTE = 0x400000,
  NV_DISPLAY_TV_FORMAT_SD_OTHER = 0x1000000,
  NV_DISPLAY_TV_FORMAT_ED_OTHER = 0x2000000,
  NV_DISPLAY_TV_FORMAT_HD_OTHER = 0x4000000,
  NV_DISPLAY_TV_FORMAT_ANY = 0x80000000,
};

/* 1199 */
enum NV_COOLER_TYPE
{
  NVAPI_COOLER_TYPE_NONE = 0x0,
  NVAPI_COOLER_TYPE_FAN = 0x1,
  NVAPI_COOLER_TYPE_WATER = 0x2,
  NVAPI_COOLER_TYPE_LIQUID_NO2 = 0x3,
};

/* 1200 */
enum _NVDRS_SETTING_TYPE
{
  NVDRS_DWORD_TYPE = 0x0,
  NVDRS_BINARY_TYPE = 0x1,
  NVDRS_STRING_TYPE = 0x2,
  NVDRS_WSTRING_TYPE = 0x3,
};

/* 1201 */
enum _NVDRS_SETTING_LOCATION
{
  NVDRS_CURRENT_PROFILE_LOCATION = 0x0,
  NVDRS_GLOBAL_PROFILE_LOCATION = 0x1,
  NVDRS_BASE_PROFILE_LOCATION = 0x2,
};

/* 1202 */
enum NV_HW_CURSOR_COLOR_FORMAT_FLAGS
{
  NV_HW_CURSOR_COLOR_FORMAT_MONOCHROME = 0x0,
  NV_HW_CURSOR_COLOR_FORMAT_COLOR = 0x1,
  NV_HW_CURSOR_COLOR_FORMAT_MASKED_COLOR = 0x2,
};

/* 1203 */
enum _NV_DPCD_CMD
{
  NV_DP_AUXCH_CMD_REQ_TYPE_WRITE = 0x0,
  NV_DP_AUXCH_CMD_REQ_TYPE_READ = 0x1,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_WRITE = 0x2,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_READ = 0x3,
  NV_DP_AUXCH_CMD_REQ_TYPE_I2C_WRITE_STATUS = 0x4,
  NV_DP_AUXCH_CMD_REQ_TYPE_MOT_I2C_WRITE = 0x5,
  NV_DP_AUXCH_CMD_REQ_TYPE_MOT_I2C_READ = 0x6,
};

/* 1204 */
enum _NV_DPCD_REPLY_TYPE
{
  NV_DP_AUXCH_REPLYTYPE_ACK = 0x0,
  NV_DP_AUXCH_REPLYTYPE_NACK = 0x1,
  NV_DP_AUXCH_REPLYTYPE_DEFER = 0x2,
  NV_DP_AUXCH_REPLYTYPE_TIMEOUT = 0xFF,
};

/* 1205 */
enum _NVAPI_GSYNC_RJ45_IO
{
  NVAPI_GSYNC_RJ45_OUTPUT = 0x0,
  NVAPI_GSYNC_RJ45_INPUT = 0x1,
  NVAPI_GSYNC_RJ45_UNUSED = 0x2,
};

/* 1206 */
enum NV_GPU_CLIENT_THERMAL_READING_ID
{
  NV_GPU_CLIENT_THERMAL_READING_ID_GPU_AVG = 0x0,
  NV_GPU_CLIENT_THERMAL_READING_ID_GPU_MAX = 0x1,
  NV_GPU_CLIENT_THERMAL_READING_ID_BOARD = 0x2,
  NV_GPU_CLIENT_THERMAL_READING_ID_MEMORY = 0x3,
  NV_GPU_CLIENT_THERMAL_READING_ID_PWR_SUPPLY = 0x4,
};

/* 1207 */
enum _NV_FORMAT
{
  NV_FORMAT_UNKNOWN = 0x0,
  NV_FORMAT_P8 = 0x29,
  NV_FORMAT_R5G6B5 = 0x17,
  NV_FORMAT_A8R8G8B8 = 0x15,
  NV_FORMAT_A16B16G16R16F = 0x71,
};

/* 1208 */
enum _NVVIOSTATUSTYPE
{
  NVVIOSTATUSTYPE_IN = 0x0,
  NVVIOSTATUSTYPE_OUT = 0x1,
};

/* 1209 */
enum _NV_GPU_HDCP_FUSE_STATE
{
  NV_GPU_HDCP_FUSE_STATE_UNKNOWN = 0x0,
  NV_GPU_HDCP_FUSE_STATE_DISABLED = 0x1,
  NV_GPU_HDCP_FUSE_STATE_ENABLED = 0x2,
};

/* 1210 */
enum _NV_GPU_HDCP_KEY_SOURCE
{
  NV_GPU_HDCP_KEY_SOURCE_UNKNOWN = 0x0,
  NV_GPU_HDCP_KEY_SOURCE_NONE = 0x1,
  NV_GPU_HDCP_KEY_SOURCE_CRYPTO_ROM = 0x2,
  NV_GPU_HDCP_KEY_SOURCE_SBIOS = 0x3,
  NV_GPU_HDCP_KEY_SOURCE_I2C_ROM = 0x4,
  NV_GPU_HDCP_KEY_SOURCE_FUSES = 0x5,
};

/* 1211 */
enum _NV_GPU_HDCP_KEY_SOURCE_STATE
{
  NV_GPU_HDCP_KEY_SOURCE_STATE_UNKNOWN = 0x0,
  NV_GPU_HDCP_KEY_SOURCE_STATE_ABSENT = 0x1,
  NV_GPU_HDCP_KEY_SOURCE_STATE_PRESENT = 0x2,
};

/* 1212 */
enum _NV_ROTATE
{
  NV_ROTATE_0 = 0x0,
  NV_ROTATE_90 = 0x1,
  NV_ROTATE_180 = 0x2,
  NV_ROTATE_270 = 0x3,
  NV_ROTATE_IGNORED = 0x4,
};

/* 1213 */
enum _NV_GPU_CONNECTOR_TYPE
{
  NVAPI_GPU_CONNECTOR_VGA_15_PIN = 0x0,
  NVAPI_GPU_CONNECTOR_TV_COMPOSITE = 0x10,
  NVAPI_GPU_CONNECTOR_TV_SVIDEO = 0x11,
  NVAPI_GPU_CONNECTOR_TV_HDTV_COMPONENT = 0x13,
  NVAPI_GPU_CONNECTOR_TV_SCART = 0x14,
  NVAPI_GPU_CONNECTOR_TV_COMPOSITE_SCART_ON_EIAJ4120 = 0x16,
  NVAPI_GPU_CONNECTOR_TV_HDTV_EIAJ4120 = 0x17,
  NVAPI_GPU_CONNECTOR_PC_POD_HDTV_YPRPB = 0x18,
  NVAPI_GPU_CONNECTOR_PC_POD_SVIDEO = 0x19,
  NVAPI_GPU_CONNECTOR_PC_POD_COMPOSITE = 0x1A,
  NVAPI_GPU_CONNECTOR_DVI_I_TV_SVIDEO = 0x20,
  NVAPI_GPU_CONNECTOR_DVI_I_TV_COMPOSITE = 0x21,
  NVAPI_GPU_CONNECTOR_DVI_I = 0x30,
  NVAPI_GPU_CONNECTOR_DVI_D = 0x31,
  NVAPI_GPU_CONNECTOR_ADC = 0x32,
  NVAPI_GPU_CONNECTOR_LFH_DVI_I_1 = 0x38,
  NVAPI_GPU_CONNECTOR_LFH_DVI_I_2 = 0x39,
  NVAPI_GPU_CONNECTOR_SPWG = 0x40,
  NVAPI_GPU_CONNECTOR_OEM = 0x41,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_EXTERNAL = 0x46,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_INTERNAL = 0x47,
  NVAPI_GPU_CONNECTOR_DISPLAYPORT_MINI_EXT = 0x48,
  NVAPI_GPU_CONNECTOR_HDMI_A = 0x61,
  NVAPI_GPU_CONNECTOR_HDMI_C_MINI = 0x63,
  NVAPI_GPU_CONNECTOR_LFH_DISPLAYPORT_1 = 0x64,
  NVAPI_GPU_CONNECTOR_LFH_DISPLAYPORT_2 = 0x65,
  NVAPI_GPU_CONNECTOR_VIRTUAL_WFD = 0x70,
  NVAPI_GPU_CONNECTOR_UNKNOWN = 0xFFFFFFFF,
};

/* 1214 */
enum NV_COOLER_ACTIVITY_LEVEL
{
  NVAPI_INACTIVE = 0x0,
  NVAPI_ACTIVE = 0x1,
};

/* 1215 */
enum NV_HDMI_STEREO_TYPE
{
  NV_HDMI_STEREO_3D_NONE = 0x0,
  NV_STEREO_NVISION = 0x1,
  NV_HDMI_STEREO_3D_FRAME_PACKING = 0x2,
  NV_HDMI_STEREO_3D_FRAME_PACKING_INT = 0x3,
  NV_HDMI_STEREO_3D_LINE_ALT = 0x4,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_FULL = 0x5,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_ODD_LEFT_ODD_RIGHT = 0x6,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_ODD_LEFT_EVEN_RIGHT = 0x7,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_EVEN_LEFT_ODD_RIGHT = 0x8,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_HORIZONTAIL_EVEN_LEFT_EVEN_RIGHT = 0x9,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_ODD_LEFT_ODD_RIGHT = 0xA,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_ODD_LEFT_EVEN_RIGHT = 0xB,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_EVEN_LEFT_ODD_RIGHT = 0xC,
  NV_HDMI_STEREO_3D_SIDE_BY_SIDE_HALF_QUINCUX_EVEN_LEFT_EVEN_RIGHT = 0xD,
  NV_HDMI_STEREO_3D_FIELD_ALT = 0xE,
  NV_HDMI_STEREO_3D_L_DEPTH = 0xF,
  NV_HDMI_STEREO_3D_L_DEPTH_GFX = 0x10,
  NV_HDMI_STEREO_3D_ANY = 0xFF,
};

/* 1216 */
enum NV_COOLER_CONTROL
{
  NVAPI_COOLER_CONTROL_NONE = 0x0,
  NVAPI_COOLER_CONTROL_TOGGLE = 0x1,
  NVAPI_COOLER_CONTROL_VARIABLE = 0x2,
};

/* 1217 */
enum _NV_DP_COLORIMETRY
{
  NV_DP_COLORIMETRY_RGB = 0x0,
  NV_DP_COLORIMETRY_YCbCr_ITU601 = 0x1,
  NV_DP_COLORIMETRY_YCbCr_ITU709 = 0x2,
};

/* 1218 */
enum NV_I2C_SPEED
{
  NVAPI_I2C_SPEED_DEFAULT = 0x0,
  NVAPI_I2C_SPEED_3KHZ = 0x1,
  NVAPI_I2C_SPEED_10KHZ = 0x2,
  NVAPI_I2C_SPEED_33KHZ = 0x3,
  NVAPI_I2C_SPEED_100KHZ = 0x4,
  NVAPI_I2C_SPEED_200KHZ = 0x5,
  NVAPI_I2C_SPEED_400KHZ = 0x6,
};

/* 1219 */
enum NV_GPU_PERF_PSTATE20_CLOCK_TYPE_ID
{
  NVAPI_GPU_PERF_PSTATE20_CLOCK_TYPE_SINGLE = 0x0,
  NVAPI_GPU_PERF_PSTATE20_CLOCK_TYPE_RANGE = 0x1,
};

/* 1220 */
enum _NVAPI_GSYNC_GPU_TOPOLOGY_CONNECTOR
{
  NVAPI_GSYNC_GPU_TOPOLOGY_CONNECTOR_NONE = 0x0,
  NVAPI_GSYNC_GPU_TOPOLOGY_CONNECTOR_PRIMARY = 0x1,
  NVAPI_GSYNC_GPU_TOPOLOGY_CONNECTOR_SECONDARY = 0x2,
  NVAPI_GSYNC_GPU_TOPOLOGY_CONNECTOR_TERTIARY = 0x3,
  NVAPI_GSYNC_GPU_TOPOLOGY_CONNECTOR_QUARTERNARY = 0x4,
};

/* 1221 */
enum _NV_DP_LINK_RATE
{
  NV_DP_1_62GBPS = 0x6,
  NV_DP_2_70GBPS = 0xA,
  NV_DP_5_40GBPS = 0x14,
};

/* 1222 */
enum NV_3D_PROPERTY
{
  NV_3D_PROPERTY_AS = 0x1,
  NV_3D_PROPERTY_AA = 0x2,
  NV_3D_PROPERTY_AF = 0x3,
  NV_3D_PROPERTY_MAX_FRAMES = 0x4,
  NV_3D_PROPERTY_TEX_FILTER = 0x5,
};

/* 1223 */
enum _NV_RESOLUTION_SPEC
{
  NV_RESOLUTION_SPEC_UNKNOWN = 0x0,
  NV_RESOLUTION_SPEC_VESA = 0x1,
  NV_RESOLUTION_SPEC_CEA = 0x2,
  NV_RESOLUTION_SPEC_HANDHELD = 0x3,
};

/* 1224 */
enum NV_VIRTUALMODE_CMD
{
  NV_VIRTUALMODE_CMD_GET_INFO = 0x1,
};

/* 1225 */
enum NV_HCLONE_HOTPLUG_BEHAVIOR
{
  NV_HCLONE_HOTPLUG_BEHAVIOR_CCD = 0x0,
  NV_HCLONE_HOTPLUG_BEHAVIOR_EXTENDED = 0x1,
  NV_HCLONE_HOTPLUG_BEHAVIOR_UI = 0x2,
};

/* 1226 */
enum _NVAPI_VIDEO_FEATURE
{
  NVAPI_VF_UNKNOWN = 0x0,
  NVAPI_VF_MPEG2SDDecodeAcceleration = 0x1,
  NVAPI_VF_MPEG2HDDecodeAcceleration = 0x2,
  NVAPI_VF_VC1SDDecodeAcceleration = 0x3,
  NVAPI_VF_VC1HDDecodeAcceleration = 0x4,
  NVAPI_VF_H264SDDecodeAcceleration = 0x5,
  NVAPI_VF_H264HDDecodeAcceleration = 0x6,
  NVAPI_VF_WMV9SDDecodeAcceleration = 0x7,
  NVAPI_VF_WMV9HDDecodeAcceleration = 0x8,
  NVAPI_VF_ProcAmp = 0x9,
  NVAPI_VF_ColorTemperatureCorrection = 0xA,
  NVAPI_VF_ColorSpaceConversion = 0xB,
  NVAPI_VF_GammaCorrection = 0xC,
  NVAPI_VF_OverDrive = 0xD,
  NVAPI_VF_DynamicContrastEnhancement = 0xE,
  NVAPI_VF_StretchBlueGreenSkin = 0xF,
  NVAPI_VF_AdaptiveDeInterlacing = 0x10,
  NVAPI_VF_NoiseReduction = 0x11,
  NVAPI_VF_EdgeEnhancement = 0x12,
  NVAPI_VF_InverseTelecine = 0x13,
  NVAPI_VF_Scaling = 0x14,
  NVAPI_VF_VideoMirror = 0x15,
  NVAPI_VF_Blend = 0x16,
  NVAPI_VF_DxvaHDTest = 0x17,
  NVAPI_VF_GamutRemap = 0x18,
  NVAPI_VF_MftXcode = 0x19,
  NVAPI_VF_SkinToneCorrection = 0x1A,
  NVAPI_VF_MftYUY2Xcode = 0x1B,
  NVAPI_VF_MftDivxXcode = 0x1C,
  NVAPI_VF_MftWmv9Encode = 0x1D,
  NVAPI_VF_DynamicPState = 0x1E,
  NVAPI_VF_PostProcessVIC = 0x1F,
  NVAPI_VF_MVCHDDecodeAcceleration = 0x20,
  NVAPI_VF_SVCHDDecodeAcceleration = 0x21,
  NVAPI_VF_SimpleScaling = 0x22,
  NVAPI_VF_ID_LAST = 0x23,
};

/* 1227 */
enum _NVAPI_SURFACE_LAYOUT
{
  NVAPI_SURFACE_LAYOUT_BL = 0x0,
  NVAPI_SURFACE_LAYOUT_PL = 0x1,
  NVAPI_SURFACE_LAYOUT_TILED = 0x2,
};

/* 1228 */
enum NV_GPS_THERM_LIMIT_SRC
{
  NV_GPS_THERM_LIMIT_SRC_USER_LIMITED = 0x1,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_LIMITED = 0x2,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_UNLIMITED = 0x3,
  NV_GPS_THERM_LIMIT_SRC_SBIOS_NOT_SUPPORTED = 0x4,
  NV_GPS_THERM_LIMIT_SRC_USER_DISABLED = 0x5,
};

/* 1229 */
enum _NVAPI_VIDEO_DRIVER_ENTRY_POINT
{
  NVAPI_EP_UNKNOWN = 0x0,
  NVAPI_EP_DecodeEndFrame = 0x1,
  NVAPI_EP_OverlayTransfer = 0x2,
  NVAPI_EP_DIBlitEx = 0x3,
  NVAPI_EP_VideoProcessBlt = 0x4,
  NVAPI_EP_D3DBlt = 0x5,
  NVAPI_EP_Blit32 = 0x6,
  NVAPI_EP_VPBltHD = 0x7,
};

/* 1230 */
enum _NV_GPU_CONNECTOR_PLATFORM
{
  NVAPI_GPU_CONNECTOR_PLATFORM_DEFAULT_ADD_IN_CARD = 0x0,
  NVAPI_GPU_CONNECTOR_PLATFORM_TWO_PLATE_ADD_IN_CARD = 0x1,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_ADD_IN_CARD = 0x8,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK = 0x10,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK_LEFT = 0x11,
  NVAPI_GPU_CONNECTOR_PLATFORM_MOBILE_BACK_DOCK = 0x18,
  NVAPI_GPU_CONNECTOR_PLATFORM_MAINBOARD_DEFAULT = 0x20,
  NVAPI_GPU_CONNECTOR_PLATFORM_UNKNOWN = 0xFFFFFFFF,
};

/* 1231 */
enum _NV_STEREO_VIDEO_FORMAT
{
  NV_STEREO_VIDEO_FORMAT_NOT_STEREO = 0x0,
  NV_STEREO_VIDEO_FORMAT_SIDE_BY_SIDE_LR = 0x1,
  NV_STEREO_VIDEO_FORMAT_SIDE_BY_SIDE_RL = 0x2,
  NV_STEREO_VIDEO_FORMAT_TOP_BOTTOM_LR = 0x3,
  NV_STEREO_VIDEO_FORMAT_TOP_BOTTOM_RL = 0x4,
  NV_STEREO_VIDEO_FORMAT_ROW_INTERLEAVE_LR = 0x5,
  NV_STEREO_VIDEO_FORMAT_ROW_INTERLEAVE_RL = 0x6,
  NV_STEREO_VIDEO_FORMAT_TWO_FRAMES_LR = 0x7,
  NV_STEREO_VIDEO_FORMAT_MONO_PLUS_OFFSET = 0x8,
  NV_STEREO_VIDEO_FORMAT_LAST = 0x9,
};

/* 1232 */
enum _NVAPI_GSYNC_SYNC_SOURCE
{
  NVAPI_GSYNC_SYNC_SOURCE_VSYNC = 0x0,
  NVAPI_GSYNC_SYNC_SOURCE_HOUSESYNC = 0x1,
};

/* 1233 */
enum _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID
{
  NVAPI_GPU_PERF_VOLTAGE_INFO_DOMAIN_CORE = 0x0,
  NVAPI_GPU_PERF_VOLTAGE_INFO_DOMAIN_UNDEFINED = 0x10,
};

/* 1234 */
enum _NV_DP_LANE_COUNT
{
  NV_DP_1_LANE = 0x1,
  NV_DP_2_LANE = 0x2,
  NV_DP_4_LANE = 0x4,
};

/* 1235 */
enum _NV_DP_DYNAMIC_RANGE
{
  NV_DP_DYNAMIC_RANGE_VESA = 0x0,
  NV_DP_DYNAMIC_RANGE_CEA = 0x1,
};

/* 1236 */
enum NV_HDCP_COMMANDS
{
  NV_HDCP_CMD_NULL = 0x0,
  NV_HDCP_CMD_QUERY_HEAD_CONFIG = 0x1,
  NV_HDCP_CMD_READ_LINK_STATUS = 0x2,
  NV_HDCP_CMD_VALIDATE_LINK = 0x3,
  NV_HDCP_CMD_RENEGOTIATE = 0x4,
  NV_HDCP_CMD_ABORTAUTHENTICATION = 0x5,
  NV_HDCP_CMD_SETLINKPOLICY = 0x6,
};

/* 1237 */
enum NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID
{
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_TOTAL_GPU_POWER = 0x0,
};

/* 1238 */
enum NV_GPU_WARPING_VERTICE_FORMAT
{
  NV_GPU_WARPING_VERTICE_FORMAT_TRIANGLESTRIP_XYUVRQ = 0x0,
  NV_GPU_WARPING_VERTICE_FORMAT_TRIANGLES_XYUVRQ = 0x1,
};

/* 1239 */
enum NV_THERMAL_TARGET
{
  NVAPI_THERMAL_TARGET_NONE = 0x0,
  NVAPI_THERMAL_TARGET_GPU = 0x1,
  NVAPI_THERMAL_TARGET_MEMORY = 0x2,
  NVAPI_THERMAL_TARGET_POWER_SUPPLY = 0x4,
  NVAPI_THERMAL_TARGET_BOARD = 0x8,
  NVAPI_THERMAL_TARGET_VCD_BOARD = 0x9,
  NVAPI_THERMAL_TARGET_VCD_INLET = 0xA,
  NVAPI_THERMAL_TARGET_VCD_OUTLET = 0xB,
  NVAPI_THERMAL_TARGET_ALL = 0xF,
  NVAPI_THERMAL_TARGET_UNKNOWN = 0xFFFFFFFF,
};

/* 1240 */
enum _NV_GPU_PUBLIC_CLOCK_ID
{
  NVAPI_GPU_PUBLIC_CLOCK_GRAPHICS = 0x0,
  NVAPI_GPU_PUBLIC_CLOCK_MEMORY = 0x4,
  NVAPI_GPU_PUBLIC_CLOCK_PROCESSOR = 0x7,
  NVAPI_GPU_PUBLIC_CLOCK_UNDEFINED = 0x20,
};

/* 1241 */
enum NV_HDCP_FLAGS
{
  NV_HDCP_FLAGS_NULL = 0x0,
  NV_HDCP_FLAGS_APINDEX = 0x1,
  NV_HDCP_FLAGS_AN = 0x10,
  NV_HDCP_FLAGS_AKSV = 0x20,
  NV_HDCP_FLAGS_BKSV = 0x40,
  NV_HDCP_FLAGS_BSTATUS = 0x80,
  NV_HDCP_FLAGS_CN = 0x100,
  NV_HDCP_FLAGS_CKSV = 0x200,
  NV_HDCP_FLAGS_DKSV = 0x400,
  NV_HDCP_FLAGS_KP = 0x1000,
  NV_HDCP_FLAGS_S = 0x2000,
  NV_HDCP_FLAGS_CS = 0x4000,
  NV_HDCP_FLAGS_V = 0x10000,
  NV_HDCP_FLAGS_MP = 0x20000,
  NV_HDCP_FLAGS_BKSVLIST = 0x40000,
  NV_HDCP_FLAGS_DUAL_LINK = 0x100000,
  NV_HDCP_FLAGS_ALWAYS_AUTH = 0x200000,
  NV_HDCP_FLAGS_ON_BY_DEMAND = 0x0,
  NV_HDCP_FLAGS_ABORT_UNTRUST = 0x400000,
  NV_HDCP_FLAGS_ABORT_UNRELBL = 0x800000,
  NV_HDCP_FLAGS_ABORT_KSV_LEN = 0x1000000,
  NV_HDCP_FLAGS_ABORT_KSV_SIG = 0x2000000,
  NV_HDCP_FLAGS_ABORT_SRM_SIG = 0x4000000,
  NV_HDCP_FLAGS_ABORT_SRM_REV = 0x8000000,
  NV_HDCP_FLAGS_ABORT_NORDY = 0x10000000,
  NV_HDCP_FLAGS_ABORT_KSVTOP = 0x20000000,
  NV_HDCP_FLAGS_ABORT_BADBKSV = 0x40000000,
};

/* 1242 */
enum _NVAPI_GSYNC_POLARITY
{
  NVAPI_GSYNC_POLARITY_RISING_EDGE = 0x0,
  NVAPI_GSYNC_POLARITY_FALLING_EDGE = 0x1,
  NVAPI_GSYNC_POLARITY_BOTH_EDGES = 0x2,
};

/* 1243 */
enum _NVAPI_GSYNC_VIDEO_MODE
{
  NVAPI_GSYNC_VIDEO_MODE_NONE = 0x0,
  NVAPI_GSYNC_VIDEO_MODE_TTL = 0x1,
  NVAPI_GSYNC_VIDEO_MODE_NTSCPALSECAM = 0x2,
  NVAPI_GSYNC_VIDEO_MODE_HDTV = 0x3,
  NVAPI_GSYNC_VIDEO_MODE_COMPOSITE = 0x4,
};

/* 1244 */
enum _NVAPI_D3D9_DMA_TRANSFER_DIR
{
  NVAPI_D3D9_DMA_TRANSFER_DIR_UPLOAD = 0x0,
  NVAPI_D3D9_DMA_TRANSFER_DIR_DOWNLOAD = 0x1,
};

/* 1245 */
enum _NV_DP_NODE_TYPE
{
  NV_DP_NODE_TYPE_UNKNOWN = 0xFFFFFFFF,
  NV_DP_NODE_TYPE_DP = 0x0,
  NV_DP_NODE_TYPE_HDMI = 0x1,
  NV_DP_NODE_TYPE_DVI = 0x2,
  NV_DP_NODE_TYPE_VGA = 0x3,
};

/* 1246 */
enum NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID
{
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID_TOTAL_GPU_POWER = 0x0,
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID_NORMALIZED_TOTAL_POWER = 0x1,
};

/* 1247 */
enum NV_MONITOR_CONN_TYPE
{
  NV_MONITOR_CONN_TYPE_UNINITIALIZED = 0x0,
  NV_MONITOR_CONN_TYPE_VGA = 0x1,
  NV_MONITOR_CONN_TYPE_COMPONENT = 0x2,
  NV_MONITOR_CONN_TYPE_SVIDEO = 0x3,
  NV_MONITOR_CONN_TYPE_HDMI = 0x4,
  NV_MONITOR_CONN_TYPE_DVI = 0x5,
  NV_MONITOR_CONN_TYPE_LVDS = 0x6,
  NV_MONITOR_CONN_TYPE_DP = 0x7,
  NV_MONITOR_CONN_TYPE_COMPOSITE = 0x8,
  NV_MONITOR_CONN_TYPE_UNKNOWN = 0xFFFFFFFF,
};

/* 1248 */
enum _NVAPI_GSYNC_DISPLAY_SYNC_STATE
{
  NVAPI_GSYNC_DISPLAY_SYNC_STATE_UNSYNCED = 0x0,
  NVAPI_GSYNC_DISPLAY_SYNC_STATE_SLAVE = 0x1,
  NVAPI_GSYNC_DISPLAY_SYNC_STATE_MASTER = 0x2,
};

/* 1249 */
enum _NV_GPU_FLATPANEL_SIGNAL_LINK
{
  NV_GPU_FLATPANEL_SIGNAL_SINGLE_LINK = 0x1,
  NV_GPU_FLATPANEL_SIGNAL_DUAL_LINK = 0x2,
};

/* 1250 */
enum NV_HDCP_RET_STATUS
{
  NV_HDCP_STATUS_SUCCESS = 0x0,
  NV_HDCP_STATUS_UNSUCCESSFUL = 0xC0000001,
  NV_HDCP_STATUS_PENDING = 0x103,
  NV_HDCP_STATUS_LINK_FAILED = 0xC000013E,
  NV_HDCP_STATUS_INVALID_PARAMETER = 0xC000000D,
  NV_HDCP_STATUS_INVALID_PARAMETER_MIX = 0xC0000030,
  NV_HDCP_STATUS_NO_MEMORY = 0xC0000017,
  NV_HDCP_STATUS_BAD_TOKEN_TYPE = 0xC00000A8,
};

/* 1251 */
enum NV_EVENT_TYPE
{
  NV_EVENT_TYPE_NONE = 0x0,
  NV_EVENT_TYPE_FAN_SPEED_CHANGE = 0x1,
  NV_EVENT_TYPE_THERMAL_CHANGE = 0x2,
};

/* 1252 */
enum NV_COOLER_CONTROLLER
{
  NVAPI_COOLER_CONTROLLER_NONE = 0x0,
  NVAPI_COOLER_CONTROLLER_ADI = 0x1,
  NVAPI_COOLER_CONTROLLER_INTERNAL = 0x2,
};

/* 1253 */
enum _NV_ECC_CONFIGURATION
{
  NV_ECC_CONFIGURATION_NOT_SUPPORTED = 0x0,
  NV_ECC_CONFIGURATION_DEFERRED = 0x1,
  NV_ECC_CONFIGURATION_IMMEDIATE = 0x2,
};

/* 1254 */
enum _NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES
{
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_NONE = 0x0,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_SINGLE_LANE = 0x1,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_DUAL_LANE = 0x2,
  NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_QUAD_LANE = 0x3,
};

/* 1255 */
enum _NV_GPU_FLATPANEL_SIGNAL_TYPE
{
  NV_GPU_FLATPANEL_SIGNAL_TYPE_TMDS = 0x0,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_LVDS = 0x1,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_SDI = 0x2,
  NV_GPU_FLATPANEL_SIGNAL_TYPE_DISPLAYPORT = 0x3,
};

/* 1256 */
enum NVAPI_GPIO_DIRECTION
{
  NVAPI_GPIO_DIRECTION_INPUT = 0x0,
  NVAPI_GPIO_DIRECTION_OUTPUT = 0x1,
};

/* 1257 */
enum bdPriority
{
  BD_PRIORITY_VERY_LOW = 0x0,
  BD_PRIORITY_LOW = 0x1,
  BD_PRIORITY_NORMAL = 0x2,
  BD_PRIORITY_HIGH = 0x3,
  BD_PRIORITY_VERY_HIGH = 0x4,
  BD_NUM_PRIORITIES = 0x5,
};

/* 1258 */
enum bdChunkTypes
{
  BD_CT_INVALID = 0x0,
  BD_CT_PADDING = 0x1,
  BD_CT_DATA = 0x2,
  BD_CT_INIT = 0x3,
  BD_CT_INIT_ACK = 0x4,
  BD_CT_SACK = 0x5,
  BD_CT_HEARTBEAT = 0x6,
  BD_CT_HEARTBEAT_ACK = 0x7,
  BD_CT_ABORT = 0x8,
  BD_CT_SHUTDOWN = 0x9,
  BD_CT_SHUTDOWN_ACK = 0xA,
  BD_CT_SHUTDOWN_COMPLETE = 0xB,
  BD_CT_ERROR = 0xC,
  BD_CT_COOKIE_ECHO = 0xD,
  BD_CT_COOKIE_ACK = 0xE,
};

/* 1259 */
enum bdCookieAckChunk::bdCookieAckFlags
{
  BD_CA_NO_FLAGS = 0x0,
};

/* 1260 */
enum bdCookieEchoChunk::bdCookieEchoFlags
{
  BD_CE_NO_FLAGS = 0x0,
};

/* 1261 */
enum bdDataChunk::bdDataFlags
{
  BD_DC_NO_FLAGS = 0x0,
  BD_DC_UNRELIABLE = 0x1,
  BD_DC_ENC_DATA = 0x2,
  BD_DC_UNENC_DATA = 0x4,
};

/* 1262 */
typedef bdCookieAckChunk::bdCookieAckFlags bdHeartbeatAckChunk::bdHeartbeatAckFlags;

/* 1263 */
typedef bdCookieAckChunk::bdCookieAckFlags bdHeartbeatChunk::bdHeartbeatFlags;

/* 1264 */
enum bdInitChunk::bdInitChunkFlags
{
  BD_IC_NO_FLAGS = 0x0,
};

/* 1265 */
typedef bdInitChunk::bdInitChunkFlags bdInitAckChunk::bdInitAckChunkFlags;

/* 1266 */
enum bdShutdownAckChunk::bdShutdownAckFlags
{
  BD_SA_NO_FLAGS = 0x0,
};

/* 1267 */
enum bdShutdownCompleteChunk::bdShutdownCompleteFlags
{
  BD_SCC_NO_FLAGS = 0x0,
};

/* 1268 */
enum bdSAckChunk::bdSAckFlags
{
  BD_SC_NO_FLAGS = 0x0,
};

/* 1269 */
typedef bdSAckChunk::bdSAckFlags bdShutdownChunk::bdShutdownFlags;

/* 1270 */
enum bdReliableSendWindow::bdCongestionWindowDecreaseReason
{
  BD_CWDR_PACKET_LOSS_DETECTED = 0x0,
  BD_CWDR_RESEND_TIMER_EXPIRED = 0x1,
  BD_CWDR_INACTIVE = 0x2,
};

/* 1271 */
enum bdUnicastConnection::bdUnicastConnectionStatus
{
  BD_UC_CLOSED = 0x0,
  BD_UC_COOKIE_WAIT = 0x1,
  BD_UC_COOKIE_ECHOED = 0x2,
  BD_UC_ESTABLISHED = 0x3,
  BD_UC_SHUTDOWN_PENDING = 0x4,
  BD_UC_SHUTDOWN_SENT = 0x5,
  BD_UC_SHUTDOWN_RECEIVED = 0x6,
  BD_UC_SHUTDOWN_ACK_SENT = 0x7,
};

/* 1272 */
enum $31D2C4EF0A86149A988EEC1F9F75C622
{
  PK_PUBLIC = 0x0,
  PK_PRIVATE = 0x1,
};

/* 1273 */
enum bdContentStatusCode
{
  BD_INVALID_KEY = 0x0,
  BD_CONTENT_UNLOCKABLE = 0x1,
  BD_CONTENT_UNLOCKED_TO_OTHER_USER = 0x2,
  BD_CONTENT_UNLOCKED_TO_THIS_USER = 0x3,
  BD_MAX_CONTENT_STATUS_CODE = 0x4,
};

/* 1274 */
enum bdFacebookFieldCode
{
  BD_FACEBOOK_NONE = 0x0,
  BD_FACEBOOK_USERNAME = 0x2,
  BD_FACEBOOK_LASTNAME = 0x4,
  BD_FACEBOOK_FIRSTNAME = 0x8,
  BD_FACEBOOK_ABOUTME = 0x10,
  BD_FACEBOOK_WEBSITE = 0x20,
  BD_FACEBOOK_CITY = 0x40,
  BD_FACEBOOK_STATE = 0x80,
  BD_FACEBOOK_COUNTRY = 0x100,
  BD_FACEBOOK_EMAIL = 0x200,
  BD_FACEBOOK_LOCATION = 0x400,
  BD_FACEBOOK_MAX_FIELD_CODE = 0x401,
};

/* 1275 */
enum CURLcode
{
  CURLE_OK = 0x0,
  CURLE_UNSUPPORTED_PROTOCOL = 0x1,
  CURLE_FAILED_INIT = 0x2,
  CURLE_URL_MALFORMAT = 0x3,
  CURLE_OBSOLETE4 = 0x4,
  CURLE_COULDNT_RESOLVE_PROXY = 0x5,
  CURLE_COULDNT_RESOLVE_HOST = 0x6,
  CURLE_COULDNT_CONNECT = 0x7,
  CURLE_FTP_WEIRD_SERVER_REPLY = 0x8,
  CURLE_REMOTE_ACCESS_DENIED = 0x9,
  CURLE_OBSOLETE10 = 0xA,
  CURLE_FTP_WEIRD_PASS_REPLY = 0xB,
  CURLE_OBSOLETE12 = 0xC,
  CURLE_FTP_WEIRD_PASV_REPLY = 0xD,
  CURLE_FTP_WEIRD_227_FORMAT = 0xE,
  CURLE_FTP_CANT_GET_HOST = 0xF,
  CURLE_OBSOLETE16 = 0x10,
  CURLE_FTP_COULDNT_SET_TYPE = 0x11,
  CURLE_PARTIAL_FILE = 0x12,
  CURLE_FTP_COULDNT_RETR_FILE = 0x13,
  CURLE_OBSOLETE20 = 0x14,
  CURLE_QUOTE_ERROR = 0x15,
  CURLE_HTTP_RETURNED_ERROR = 0x16,
  CURLE_WRITE_ERROR = 0x17,
  CURLE_OBSOLETE24 = 0x18,
  CURLE_UPLOAD_FAILED = 0x19,
  CURLE_READ_ERROR = 0x1A,
  CURLE_OUT_OF_MEMORY = 0x1B,
  CURLE_OPERATION_TIMEDOUT = 0x1C,
  CURLE_OBSOLETE29 = 0x1D,
  CURLE_FTP_PORT_FAILED = 0x1E,
  CURLE_FTP_COULDNT_USE_REST = 0x1F,
  CURLE_OBSOLETE32 = 0x20,
  CURLE_RANGE_ERROR = 0x21,
  CURLE_HTTP_POST_ERROR = 0x22,
  CURLE_SSL_CONNECT_ERROR = 0x23,
  CURLE_BAD_DOWNLOAD_RESUME = 0x24,
  CURLE_FILE_COULDNT_READ_FILE = 0x25,
  CURLE_LDAP_CANNOT_BIND = 0x26,
  CURLE_LDAP_SEARCH_FAILED = 0x27,
  CURLE_OBSOLETE40 = 0x28,
  CURLE_FUNCTION_NOT_FOUND = 0x29,
  CURLE_ABORTED_BY_CALLBACK = 0x2A,
  CURLE_BAD_FUNCTION_ARGUMENT = 0x2B,
  CURLE_OBSOLETE44 = 0x2C,
  CURLE_INTERFACE_FAILED = 0x2D,
  CURLE_OBSOLETE46 = 0x2E,
  CURLE_TOO_MANY_REDIRECTS = 0x2F,
  CURLE_UNKNOWN_TELNET_OPTION = 0x30,
  CURLE_TELNET_OPTION_SYNTAX = 0x31,
  CURLE_OBSOLETE50 = 0x32,
  CURLE_PEER_FAILED_VERIFICATION = 0x33,
  CURLE_GOT_NOTHING = 0x34,
  CURLE_SSL_ENGINE_NOTFOUND = 0x35,
  CURLE_SSL_ENGINE_SETFAILED = 0x36,
  CURLE_SEND_ERROR = 0x37,
  CURLE_RECV_ERROR = 0x38,
  CURLE_OBSOLETE57 = 0x39,
  CURLE_SSL_CERTPROBLEM = 0x3A,
  CURLE_SSL_CIPHER = 0x3B,
  CURLE_SSL_CACERT = 0x3C,
  CURLE_BAD_CONTENT_ENCODING = 0x3D,
  CURLE_LDAP_INVALID_URL = 0x3E,
  CURLE_FILESIZE_EXCEEDED = 0x3F,
  CURLE_USE_SSL_FAILED = 0x40,
  CURLE_SEND_FAIL_REWIND = 0x41,
  CURLE_SSL_ENGINE_INITFAILED = 0x42,
  CURLE_LOGIN_DENIED = 0x43,
  CURLE_TFTP_NOTFOUND = 0x44,
  CURLE_TFTP_PERM = 0x45,
  CURLE_REMOTE_DISK_FULL = 0x46,
  CURLE_TFTP_ILLEGAL = 0x47,
  CURLE_TFTP_UNKNOWNID = 0x48,
  CURLE_REMOTE_FILE_EXISTS = 0x49,
  CURLE_TFTP_NOSUCHUSER = 0x4A,
  CURLE_CONV_FAILED = 0x4B,
  CURLE_CONV_REQD = 0x4C,
  CURLE_SSL_CACERT_BADFILE = 0x4D,
  CURLE_REMOTE_FILE_NOT_FOUND = 0x4E,
  CURLE_SSH = 0x4F,
  CURLE_SSL_SHUTDOWN_FAILED = 0x50,
  CURLE_AGAIN = 0x51,
  CURLE_SSL_CRL_BADFILE = 0x52,
  CURLE_SSL_ISSUER_ERROR = 0x53,
  CURL_LAST = 0x54,
};

/* 1276 */
enum CURLoption
{
  CURLOPT_FILE = 0x2711,
  CURLOPT_URL = 0x2712,
  CURLOPT_PORT = 0x3,
  CURLOPT_PROXY = 0x2714,
  CURLOPT_USERPWD = 0x2715,
  CURLOPT_PROXYUSERPWD = 0x2716,
  CURLOPT_RANGE = 0x2717,
  CURLOPT_INFILE = 0x2719,
  CURLOPT_ERRORBUFFER = 0x271A,
  CURLOPT_WRITEFUNCTION = 0x4E2B,
  CURLOPT_READFUNCTION = 0x4E2C,
  CURLOPT_TIMEOUT = 0xD,
  CURLOPT_INFILESIZE = 0xE,
  CURLOPT_POSTFIELDS = 0x271F,
  CURLOPT_REFERER = 0x2720,
  CURLOPT_FTPPORT = 0x2721,
  CURLOPT_USERAGENT = 0x2722,
  CURLOPT_LOW_SPEED_LIMIT = 0x13,
  CURLOPT_LOW_SPEED_TIME = 0x14,
  CURLOPT_RESUME_FROM = 0x15,
  CURLOPT_COOKIE = 0x2726,
  CURLOPT_HTTPHEADER = 0x2727,
  CURLOPT_HTTPPOST = 0x2728,
  CURLOPT_SSLCERT = 0x2729,
  CURLOPT_KEYPASSWD = 0x272A,
  CURLOPT_CRLF = 0x1B,
  CURLOPT_QUOTE = 0x272C,
  CURLOPT_WRITEHEADER = 0x272D,
  CURLOPT_COOKIEFILE = 0x272F,
  CURLOPT_SSLVERSION = 0x20,
  CURLOPT_TIMECONDITION = 0x21,
  CURLOPT_TIMEVALUE = 0x22,
  CURLOPT_CUSTOMREQUEST = 0x2734,
  CURLOPT_STDERR = 0x2735,
  CURLOPT_POSTQUOTE = 0x2737,
  CURLOPT_WRITEINFO = 0x2738,
  CURLOPT_VERBOSE = 0x29,
  CURLOPT_HEADER = 0x2A,
  CURLOPT_NOPROGRESS = 0x2B,
  CURLOPT_NOBODY = 0x2C,
  CURLOPT_FAILONERROR = 0x2D,
  CURLOPT_UPLOAD = 0x2E,
  CURLOPT_POST = 0x2F,
  CURLOPT_DIRLISTONLY = 0x30,
  CURLOPT_APPEND = 0x32,
  CURLOPT_NETRC = 0x33,
  CURLOPT_FOLLOWLOCATION = 0x34,
  CURLOPT_TRANSFERTEXT = 0x35,
  CURLOPT_PUT = 0x36,
  CURLOPT_PROGRESSFUNCTION = 0x4E58,
  CURLOPT_PROGRESSDATA = 0x2749,
  CURLOPT_AUTOREFERER = 0x3A,
  CURLOPT_PROXYPORT = 0x3B,
  CURLOPT_POSTFIELDSIZE = 0x3C,
  CURLOPT_HTTPPROXYTUNNEL = 0x3D,
  CURLOPT_INTERFACE = 0x274E,
  CURLOPT_KRBLEVEL = 0x274F,
  CURLOPT_SSL_VERIFYPEER = 0x40,
  CURLOPT_CAINFO = 0x2751,
  CURLOPT_MAXREDIRS = 0x44,
  CURLOPT_FILETIME = 0x45,
  CURLOPT_TELNETOPTIONS = 0x2756,
  CURLOPT_MAXCONNECTS = 0x47,
  CURLOPT_CLOSEPOLICY = 0x48,
  CURLOPT_FRESH_CONNECT = 0x4A,
  CURLOPT_FORBID_REUSE = 0x4B,
  CURLOPT_RANDOM_FILE = 0x275C,
  CURLOPT_EGDSOCKET = 0x275D,
  CURLOPT_CONNECTTIMEOUT = 0x4E,
  CURLOPT_HEADERFUNCTION = 0x4E6F,
  CURLOPT_HTTPGET = 0x50,
  CURLOPT_SSL_VERIFYHOST = 0x51,
  CURLOPT_COOKIEJAR = 0x2762,
  CURLOPT_SSL_CIPHER_LIST = 0x2763,
  CURLOPT_HTTP_VERSION = 0x54,
  CURLOPT_FTP_USE_EPSV = 0x55,
  CURLOPT_SSLCERTTYPE = 0x2766,
  CURLOPT_SSLKEY = 0x2767,
  CURLOPT_SSLKEYTYPE = 0x2768,
  CURLOPT_SSLENGINE = 0x2769,
  CURLOPT_SSLENGINE_DEFAULT = 0x5A,
  CURLOPT_DNS_USE_GLOBAL_CACHE = 0x5B,
  CURLOPT_DNS_CACHE_TIMEOUT = 0x5C,
  CURLOPT_PREQUOTE = 0x276D,
  CURLOPT_DEBUGFUNCTION = 0x4E7E,
  CURLOPT_DEBUGDATA = 0x276F,
  CURLOPT_COOKIESESSION = 0x60,
  CURLOPT_CAPATH = 0x2771,
  CURLOPT_BUFFERSIZE = 0x62,
  CURLOPT_NOSIGNAL = 0x63,
  CURLOPT_SHARE = 0x2774,
  CURLOPT_PROXYTYPE = 0x65,
  CURLOPT_ENCODING = 0x2776,
  CURLOPT_PRIVATE = 0x2777,
  CURLOPT_HTTP200ALIASES = 0x2778,
  CURLOPT_UNRESTRICTED_AUTH = 0x69,
  CURLOPT_FTP_USE_EPRT = 0x6A,
  CURLOPT_HTTPAUTH = 0x6B,
  CURLOPT_SSL_CTX_FUNCTION = 0x4E8C,
  CURLOPT_SSL_CTX_DATA = 0x277D,
  CURLOPT_FTP_CREATE_MISSING_DIRS = 0x6E,
  CURLOPT_PROXYAUTH = 0x6F,
  CURLOPT_FTP_RESPONSE_TIMEOUT = 0x70,
  CURLOPT_IPRESOLVE = 0x71,
  CURLOPT_MAXFILESIZE = 0x72,
  CURLOPT_INFILESIZE_LARGE = 0x75A3,
  CURLOPT_RESUME_FROM_LARGE = 0x75A4,
  CURLOPT_MAXFILESIZE_LARGE = 0x75A5,
  CURLOPT_NETRC_FILE = 0x2786,
  CURLOPT_USE_SSL = 0x77,
  CURLOPT_POSTFIELDSIZE_LARGE = 0x75A8,
  CURLOPT_TCP_NODELAY = 0x79,
  CURLOPT_FTPSSLAUTH = 0x81,
  CURLOPT_IOCTLFUNCTION = 0x4EA2,
  CURLOPT_IOCTLDATA = 0x2793,
  CURLOPT_FTP_ACCOUNT = 0x2796,
  CURLOPT_COOKIELIST = 0x2797,
  CURLOPT_IGNORE_CONTENT_LENGTH = 0x88,
  CURLOPT_FTP_SKIP_PASV_IP = 0x89,
  CURLOPT_FTP_FILEMETHOD = 0x8A,
  CURLOPT_LOCALPORT = 0x8B,
  CURLOPT_LOCALPORTRANGE = 0x8C,
  CURLOPT_CONNECT_ONLY = 0x8D,
  CURLOPT_CONV_FROM_NETWORK_FUNCTION = 0x4EAE,
  CURLOPT_CONV_TO_NETWORK_FUNCTION = 0x4EAF,
  CURLOPT_CONV_FROM_UTF8_FUNCTION = 0x4EB0,
  CURLOPT_MAX_SEND_SPEED_LARGE = 0x75C1,
  CURLOPT_MAX_RECV_SPEED_LARGE = 0x75C2,
  CURLOPT_FTP_ALTERNATIVE_TO_USER = 0x27A3,
  CURLOPT_SOCKOPTFUNCTION = 0x4EB4,
  CURLOPT_SOCKOPTDATA = 0x27A5,
  CURLOPT_SSL_SESSIONID_CACHE = 0x96,
  CURLOPT_SSH_AUTH_TYPES = 0x97,
  CURLOPT_SSH_PUBLIC_KEYFILE = 0x27A8,
  CURLOPT_SSH_PRIVATE_KEYFILE = 0x27A9,
  CURLOPT_FTP_SSL_CCC = 0x9A,
  CURLOPT_TIMEOUT_MS = 0x9B,
  CURLOPT_CONNECTTIMEOUT_MS = 0x9C,
  CURLOPT_HTTP_TRANSFER_DECODING = 0x9D,
  CURLOPT_HTTP_CONTENT_DECODING = 0x9E,
  CURLOPT_NEW_FILE_PERMS = 0x9F,
  CURLOPT_NEW_DIRECTORY_PERMS = 0xA0,
  CURLOPT_POSTREDIR = 0xA1,
  CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = 0x27B2,
  CURLOPT_OPENSOCKETFUNCTION = 0x4EC3,
  CURLOPT_OPENSOCKETDATA = 0x27B4,
  CURLOPT_COPYPOSTFIELDS = 0x27B5,
  CURLOPT_PROXY_TRANSFER_MODE = 0xA6,
  CURLOPT_SEEKFUNCTION = 0x4EC7,
  CURLOPT_SEEKDATA = 0x27B8,
  CURLOPT_CRLFILE = 0x27B9,
  CURLOPT_ISSUERCERT = 0x27BA,
  CURLOPT_ADDRESS_SCOPE = 0xAB,
  CURLOPT_CERTINFO = 0xAC,
  CURLOPT_USERNAME = 0x27BD,
  CURLOPT_PASSWORD = 0x27BE,
  CURLOPT_PROXYUSERNAME = 0x27BF,
  CURLOPT_PROXYPASSWORD = 0x27C0,
  CURLOPT_LASTENTRY = 0x27C1,
};

/* 1277 */
enum CURLINFO
{
  CURLINFO_NONE = 0x0,
  CURLINFO_EFFECTIVE_URL = 0x100001,
  CURLINFO_RESPONSE_CODE = 0x200002,
  CURLINFO_TOTAL_TIME = 0x300003,
  CURLINFO_NAMELOOKUP_TIME = 0x300004,
  CURLINFO_CONNECT_TIME = 0x300005,
  CURLINFO_PRETRANSFER_TIME = 0x300006,
  CURLINFO_SIZE_UPLOAD = 0x300007,
  CURLINFO_SIZE_DOWNLOAD = 0x300008,
  CURLINFO_SPEED_DOWNLOAD = 0x300009,
  CURLINFO_SPEED_UPLOAD = 0x30000A,
  CURLINFO_HEADER_SIZE = 0x20000B,
  CURLINFO_REQUEST_SIZE = 0x20000C,
  CURLINFO_SSL_VERIFYRESULT = 0x20000D,
  CURLINFO_FILETIME = 0x20000E,
  CURLINFO_CONTENT_LENGTH_DOWNLOAD = 0x30000F,
  CURLINFO_CONTENT_LENGTH_UPLOAD = 0x300010,
  CURLINFO_STARTTRANSFER_TIME = 0x300011,
  CURLINFO_CONTENT_TYPE = 0x100012,
  CURLINFO_REDIRECT_TIME = 0x300013,
  CURLINFO_REDIRECT_COUNT = 0x200014,
  CURLINFO_PRIVATE = 0x100015,
  CURLINFO_HTTP_CONNECTCODE = 0x200016,
  CURLINFO_HTTPAUTH_AVAIL = 0x200017,
  CURLINFO_PROXYAUTH_AVAIL = 0x200018,
  CURLINFO_OS_ERRNO = 0x200019,
  CURLINFO_NUM_CONNECTS = 0x20001A,
  CURLINFO_SSL_ENGINES = 0x40001B,
  CURLINFO_COOKIELIST = 0x40001C,
  CURLINFO_LASTSOCKET = 0x20001D,
  CURLINFO_FTP_ENTRY_PATH = 0x10001E,
  CURLINFO_REDIRECT_URL = 0x10001F,
  CURLINFO_PRIMARY_IP = 0x100020,
  CURLINFO_APPCONNECT_TIME = 0x300021,
  CURLINFO_CERTINFO = 0x400022,
  CURLINFO_LASTONE = 0x22,
};

/* 1278 */
enum CURLMcode
{
  CURLM_CALL_MULTI_PERFORM = 0xFFFFFFFF,
  CURLM_OK = 0x0,
  CURLM_BAD_HANDLE = 0x1,
  CURLM_BAD_EASY_HANDLE = 0x2,
  CURLM_OUT_OF_MEMORY = 0x3,
  CURLM_INTERNAL_ERROR = 0x4,
  CURLM_BAD_SOCKET = 0x5,
  CURLM_UNKNOWN_OPTION = 0x6,
  CURLM_LAST = 0x7,
};

/* 1279 */
enum CURLMSG
{
  CURLMSG_NONE = 0x0,
  CURLMSG_DONE = 0x1,
  CURLMSG_LAST = 0x2,
};

/* 1280 */
enum bdBandwidthRequest
{
  BD_BANDWIDTH_TEST_REQUEST = 0x0,
  BD_BANDWIDTH_TEST_FINALIZE = 0x1,
};

/* 1281 */
enum bdPagingToken::bdStatus
{
  BD_NOT_STARTED = 0x0,
  BD_IN_PROGRESS = 0x1,
  BD_FINISHED = 0x2,
};

/* 1282 */
enum bdNotificationType
{
  BD_FRIENDSHIP_REJECTED = 0x1,
  BD_FRIENDSHIP_ACCEPTED = 0x2,
  BD_FRIENDSHIP_REVOKED = 0x3,
  BD_TEAMNAME_UPDATED = 0x4,
  BD_TEAMMEMBER_PROMOTED_TO_ADMIN = 0x5,
  BD_TEAMMEMBER_PROMOTED_TO_OWNER = 0x6,
  BD_TEAMMEMBER_DEMOTED_TO_ORDINARY = 0x7,
  BD_TEAMMEMBER_KICKED = 0x8,
  BD_TEAM_DISSOLVED = 0x9,
  BD_TEAMMEMBER_LEFT = 0xA,
  BD_TEAMMEMBER_INVITE_REJECTED = 0xB,
  BD_TEAMMEMBER_INVITE_ACCEPTED = 0xC,
};

/* 1283 */
enum bdRelayServicePlatform
{
  BD_RELAY_SERVICE_PLATFORM_PC = 0x1,
  BD_RELAY_SERVICE_PLATFORM_PS3 = 0x2,
  BD_RELAY_SERVICE_PLATFORM_IPHONE = 0x3,
  BD_RELAY_SERVICE_PLATFORM_ANDROID = 0x4,
  BD_RELAY_SERVICE_PLATFORM_XENON = 0x5,
  BD_RELAY_SERVICE_PLATFORM_PS4 = 0x6,
  BD_RELAY_SERVICE_PLATFORM_XBOXONE = 0x7,
  BD_RELAY_SERVICE_PLATFORM_WII = 0x8,
  BD_RELAY_SERVICE_PLATFORM_WIIU = 0x9,
  BD_RELAY_SERVICE_PLATFORM_WP8 = 0xA,
  BD_RELAY_SERVICE_PLATFORM_UNIX = 0xB,
  BD_RELAY_SERVICE_PLATFORM_OSX = 0xC,
  BD_RELAY_SERVICE_PLATFORM_UNKNOWN = 0xFF,
};

/* 1284 */
enum bdRelayServiceConnTypeHint
{
  BD_RELAY_SERVICE_CONN_UDP = 0x1,
  BD_RELAY_SERVICE_CONN_XLSP = 0x2,
};

/* 1285 */
enum bdTwitterFieldCode
{
  BD_TWITTER_NONE = 0x0,
  BD_TWITTER_SCREENNAME = 0x2,
  BD_TWITTER_NAME = 0x4,
  BD_TWITTER_DESCRIPTION = 0x8,
  BD_TWITTER_URL = 0x10,
  BD_TWITTER_LOCATION = 0x20,
  BD_TWITTER_STATUSTEXT = 0x40,
  BD_TWITTER_MAX_FIELD_CODE = 0x41,
};

/* 1286 */
enum bdTwitterResultType
{
  BD_TWITTER_DEFAULT_RESULT = 0x0,
  BD_TWITTER_MIXED_RESULT = 0x1,
  BD_TWITTER_RECENT_RESULT = 0x2,
  BD_TWITTER_POPULAR_RESULT = 0x3,
};

/* 1287 */
enum bdUCDAccountStatus::bdMarketingOptInStatus
{
  BD_MARKETING_OPT_IN_FALSE = 0x0,
  BD_MARKETING_OPT_IN_TRUE = 0x1,
};

/* 1288 */
enum bdUCDAccountStatus::bdElitePaidStatus
{
  BD_ELITE_PAID_UNKNOWN = 0xFFFFFFFF,
  BD_ELITE_PAID_FALSE = 0x0,
  BD_ELITE_PAID_TRUE = 0x1,
};

/* 1289 */
enum bdSubscriptionFilter
{
  BD_SUBSCRIPTION_FILTER_ALL = 0x0,
  BD_SUBSCRIPTION_FILTER_VALID = 0x1,
  BD_SUBSCRIPTION_FILTER_EXPIRED = 0x2,
};

/* 1290 */
enum bdAuthMsgTypes
{
  BD_AUTH_CREATE_ACCOUNT_REQUEST = 0x0,
  BD_AUTH_CREATE_ACCOUNT_REPLY = 0x1,
  BD_AUTH_CHANGE_USER_KEY_REQUEST = 0x2,
  BD_AUTH_CHANGE_USER_KEY_REPLY = 0x3,
  BD_AUTH_RESET_ACCOUNT_REQUEST = 0x4,
  BD_AUTH_RESET_ACCOUNT_REPLY = 0x5,
  BD_AUTH_DELETE_ACCOUNT_REQUEST = 0x6,
  BD_AUTH_DELETE_ACCOUNT_REPLY = 0x7,
  BD_AUTH_MIGRATE_ACCOUNTS_REQUEST = 0x8,
  BD_AUTH_MIGRATE_ACCOUNTS_REPLY = 0x9,
  BD_AUTH_ACCOUNT_FOR_MMP_REQUEST = 0xA,
  BD_AUTH_ACCOUNT_FOR_MMP_REPLY = 0xB,
  BD_AUTH_HOST_FOR_MMP_REQUEST = 0xC,
  BD_AUTH_HOST_FOR_MMP_REPLY = 0xD,
  BD_AUTH_ACCOUNT_FOR_HOST_REQUEST = 0xE,
  BD_AUTH_ACCOUNT_FOR_HOST_REPLY = 0xF,
  BD_AUTH_ANONYMOUS_FOR_MMP_REQUEST = 0x10,
  BD_AUTH_ANONYMOUS_FOR_MMP_REPLY = 0x11,
  BD_AUTH_PS3_FOR_MMP_REQUEST = 0x12,
  BD_AUTH_PS3_FOR_MMP_REPLY = 0x13,
  BD_AUTH_GET_USERNAMES_BY_LICENSE_REQUEST = 0x14,
  BD_AUTH_GET_USERNAMES_BY_LICENSE_REPLY = 0x15,
  BD_AUTH_WII_FOR_MMP_REQUEST = 0x16,
  BD_AUTH_WII_FOR_MMP_REPLY = 0x17,
  BD_AUTH_FOR_DEDICATED_SERVER_REQUEST = 0x18,
  BD_AUTH_FOR_DEDICATED_SERVER_REPLY = 0x19,
  BD_AUTH_FOR_DEDICATED_SERVER_REQUEST_RSA = 0x1A,
  BD_AUTH_FOR_DEDICATED_SERVER_REPLY_RSA = 0x1B,
  BD_AUTH_STEAM_FOR_MMP_REQUEST = 0x1C,
  BD_AUTH_STEAM_FOR_MMP_REPLY = 0x1D,
  BD_AUTH_3DS_FOR_MMP_REQUEST = 0x1E,
  BD_AUTH_3DS_FOR_MMP_REPLY = 0x1F,
  BD_AUTH_CODO_FOR_MMP_REQUEST = 0x20,
  BD_AUTH_CODO_FOR_MMP_REPLY = 0x21,
  BD_AUTH_ABACCOUNTS_FOR_MMP_REQUEST = 0x22,
  BD_AUTH_ABACCOUNTS_FOR_MMP_REPLY = 0x23,
  BD_AUTH_WIIU_FOR_MMP_REQUEST = 0x24,
  BD_AUTH_WIIU_FOR_MMP_REPLY = 0x25,
  BD_AUTH_WIIU_FOR_MMP_REQUEST2 = 0x26,
  BD_AUTH_WIIU_FOR_MMP_REPLY2 = 0x27,
  BD_AUTH_WIIU_SECONDARY_FOR_MMP_REQUEST = 0x28,
  BD_AUTH_WIIU_SECONDARY_FOR_MMP_REPLY = 0x29,
  BD_AUTH_XBOX360_FOR_MMP_REQUEST = 0x2A,
  BD_AUTH_XBOX360_FOR_MMP_REPLY = 0x2B,
  BD_AUTH_XBOXONE_FOR_MMP_REQUEST = 0x2C,
  BD_AUTH_XBOXONE_FOR_MMP_REPLY = 0x2D,
  BD_AUTH_PS4_FOR_MMP_REQUEST = 0x2E,
  BD_AUTH_PS4_FOR_MMP_REPLY = 0x2F,
  BD_AUTH_WINPHONE8_FOR_MMP_REQUEST = 0x30,
  BD_AUTH_WINPHONE8_FOR_MMP_REPLY = 0x31,
  BD_AUTH_WIN8METRO_FOR_MMP_REQUEST = 0x32,
  BD_AUTH_WIN8METRO_FOR_MMP_REPLY = 0x33,
  BD_AUTH_THUNDERHEAD_FOR_MMP_REQUEST = 0x34,
  BD_AUTH_THUNDERHEAD_FOR_MMP_REPLY = 0x35,
};

/* 1291 */
typedef $44ED595A48CF2D4BF24165A45E7595BF $F5ED1853B0211D34DC837B1F5568CEFD;

/* 1292 */
enum bdEventType
{
  BD_NEW_NOTIFICATION = 0x1,
  BD_FRIENDSHIP_PROPOSAL = 0x2,
  BD_TEAM_PROPOSAL = 0x3,
  BD_FRIEND_CONNECTED = 0x4,
  BD_FRIEND_DISCONNECTED = 0x5,
  BD_SESSION_INVITATION = 0x6,
  BD_CHANNEL_CHAT_BROADCAST_MSG = 0x7,
  BD_CHANNEL_CHAT_WHISPER_MSG = 0x8,
  BD_CHANNEL_USER_SUBSCRIBED = 0x9,
  BD_CHANNEL_USER_UNSUBSCRIBED = 0xA,
  BD_TEAMMEMBER_CONNECTED = 0xB,
  BD_TEAMMEMBER_DISCONNECTED = 0xC,
  BD_FRIEND_RICH_PRESENCE_UPDATED = 0xD,
  BD_FRIEND_CHAT_MSG = 0xF,
  BD_TEAM_CHAT_MSG = 0x10,
  BD_NOTIFY_LEAVE = 0x11,
  BD_NEW_MAIL = 0x12,
  BD_CHALLENGES_RECEIVED = 0x13,
  BD_ASYNCHRONOUS_RESULT = 0x14,
  BD_GLOBAL_INSTANT_MESSAGE = 0x15,
  BD_MULTIPLE_LOGONS = 0x1D,
  BD_PLAYER_BANNED = 0x1E,
  BD_CHANNEL_USER_PROMOTED = 0x1F,
  BD_CHANNEL_USER_KICKED = 0x20,
  BD_FEATURE_BAN = 0x21,
  BD_GMSG_GROUP_MESSAGE = 0x22,
  BD_GMSG_BROADCAST = 0x23,
  BD_TENCENT_AAS_RECORD = 0x24,
  BD_YOUTUBE_REGISTRATION = 0x25,
  BD_NOT_WHITE_LISTED = 0x26,
  BD_CHANNEL_USER_MUTED = 0x27,
  BD_STABILISED = 0x28,
  BD_CONSOLE_BANNED = 0x29,
  BD_MULTIPLE_LINKED_ACCOUNT_LOGONS = 0x2A,
  BD_LINKED_ACCOUNT_STATUS_CHANGE = 0x2B,
  BD_TENCENT_ANTIBOT_DATA = 0x3E9,
  BD_TENCENT_ANTIBOT_PUNISH = 0x3EA,
  BD_TENCENT_REWARD = 0x3EB,
  BD_TENCENT_ANTIBOT_SERVER_READY = 0x3EC,
};

/* 1293 */
enum $C9F4CEB8FE87A3A762913B3303A31350
{
  LTC_ASN1_EOL = 0x0,
  LTC_ASN1_BOOLEAN = 0x1,
  LTC_ASN1_INTEGER = 0x2,
  LTC_ASN1_SHORT_INTEGER = 0x3,
  LTC_ASN1_BIT_STRING = 0x4,
  LTC_ASN1_OCTET_STRING = 0x5,
  LTC_ASN1_NULL = 0x6,
  LTC_ASN1_OBJECT_IDENTIFIER = 0x7,
  LTC_ASN1_IA5_STRING = 0x8,
  LTC_ASN1_PRINTABLE_STRING = 0x9,
  LTC_ASN1_UTF8_STRING = 0xA,
  LTC_ASN1_UTCTIME = 0xB,
  LTC_ASN1_CHOICE = 0xC,
  LTC_ASN1_SEQUENCE = 0xD,
  LTC_ASN1_SET = 0xE,
  LTC_ASN1_SETOF = 0xF,
};

/* 1294 */
enum ltc_pkcs_1_v1_5_blocks
{
  LTC_LTC_PKCS_1_EMSA = 0x1,
  LTC_LTC_PKCS_1_EME = 0x2,
};

/* 1295 */
enum std::_Lang_flags
{
  _L_ext_rep = 0x1,
  _L_alt_pipe = 0x2,
  _L_alt_nl = 0x4,
  _L_nex_grp = 0x8,
  _L_nex_rep = 0x10,
  _L_nc_grp = 0x20,
  _L_asrt_gen = 0x40,
  _L_asrt_wrd = 0x80,
  _L_bckr = 0x100,
  _L_lim_bckr = 0x200,
  _L_ngr_rep = 0x400,
  _L_esc_uni = 0x800,
  _L_esc_hex = 0x1000,
  _L_esc_oct = 0x2000,
  _L_esc_bsl = 0x4000,
  _L_esc_ffnx = 0x8000,
  _L_esc_ffn = 0x10000,
  _L_esc_wsd = 0x20000,
  _L_esc_ctrl = 0x40000,
  _L_no_nl = 0x80000,
  _L_bzr_chr = 0x100000,
  _L_grp_esc = 0x200000,
  _L_ident_ECMA = 0x400000,
  _L_ident_ERE = 0x800000,
  _L_ident_awk = 0x1000000,
  _L_anch_rstr = 0x2000000,
  _L_star_beg = 0x4000000,
  _L_empty_grp = 0x8000000,
  _L_paren_bal = 0x10000000,
  _L_brk_rstr = 0x20000000,
  _L_mtch_long = 0x40000000,
  _L_no_subs = 0x80000000,
};

/* 1296 */
enum std::_Meta_type
{
  _Meta_lpar = 0x28,
  _Meta_rpar = 0x29,
  _Meta_dlr = 0x24,
  _Meta_caret = 0x5E,
  _Meta_dot = 0x2E,
  _Meta_star = 0x2A,
  _Meta_plus = 0x2B,
  _Meta_query = 0x3F,
  _Meta_lsq = 0x5B,
  _Meta_rsq = 0x5D,
  _Meta_bar = 0x7C,
  _Meta_esc = 0x5C,
  _Meta_dash = 0x2D,
  _Meta_lbr = 0x7B,
  _Meta_rbr = 0x7D,
  _Meta_comma = 0x2C,
  _Meta_colon = 0x3A,
  _Meta_equal = 0x3D,
  _Meta_exc = 0x21,
  _Meta_eos = 0xFFFFFFFF,
  _Meta_nl = 0xA,
  _Meta_cr = 0xD,
  _Meta_bsp = 0x8,
  _Meta_chr = 0x0,
  _Esc_bsl = 0x5C,
  _Esc_word = 0x62,
  _Esc_not_word = 0x42,
  _Esc_ctrl_a = 0x61,
  _Esc_ctrl_b = 0x62,
  _Esc_ctrl_f = 0x66,
  _Esc_ctrl_n = 0x6E,
  _Esc_ctrl_r = 0x72,
  _Esc_ctrl_t = 0x74,
  _Esc_ctrl_v = 0x76,
  _Esc_ctrl = 0x63,
  _Esc_hex = 0x78,
  _Esc_uni = 0x75,
};

/* 1297 */
enum std::_Node_flags
{
  _Fl_none = 0x0,
  _Fl_negate = 0x1,
  _Fl_greedy = 0x2,
  _Fl_final = 0x4,
  _Fl_longest = 0x8,
};

/* 1298 */
enum std::_Node_type
{
  _N_none = 0x0,
  _N_nop = 0x1,
  _N_bol = 0x2,
  _N_eol = 0x3,
  _N_wbound = 0x4,
  _N_dot = 0x5,
  _N_str = 0x6,
  _N_class = 0x7,
  _N_group = 0x8,
  _N_end_group = 0x9,
  _N_assert = 0xA,
  _N_neg_assert = 0xB,
  _N_end_assert = 0xC,
  _N_capture = 0xD,
  _N_end_capture = 0xE,
  _N_back = 0xF,
  _N_if = 0x10,
  _N_endif = 0x11,
  _N_rep = 0x12,
  _N_end_rep = 0x13,
  _N_begin = 0x14,
  _N_end = 0x15,
};

/* 1299 */
enum std::regex_constants::error_type
{
  error_collate = 0x0,
  error_ctype = 0x1,
  error_escape = 0x2,
  error_backref = 0x3,
  error_brack = 0x4,
  error_paren = 0x5,
  error_brace = 0x6,
  error_badbrace = 0x7,
  error_range = 0x8,
  error_space = 0x9,
  error_badrepeat = 0xA,
  error_complexity = 0xB,
  error_stack = 0xC,
  error_parse = 0xD,
  error_syntax = 0xE,
};

/* 1300 */
enum std::_Barg_type
{
  _Reference_wrapper = 0x0,
  _Placeholder = 0x1,
  _Bind_expression = 0x2,
  _UDT = 0x3,
};

/* 1301 */
typedef $3765A173ADD7CE92B6314F58D2CDA9A2 $E0E5A63BEEC24A40788161BF85A9B058;

/* 1302 */
enum std::_Regex_traits_base::_Char_class_type
{
  _Ch_none = 0x0,
  _Ch_alnum = 0x107,
  _Ch_alpha = 0x103,
  _Ch_cntrl = 0x20,
  _Ch_digit = 0x4,
  _Ch_graph = 0x117,
  _Ch_lower = 0x2,
  _Ch_print = 0x1D7,
  _Ch_punct = 0x10,
  _Ch_space = 0x48,
  _Ch_upper = 0x1,
  _Ch_xdigit = 0x80,
  _Ch_blank = 0x48,
};

/* 1303 */
enum std::regex_constants::syntax_option_type
{
  ECMAScript = 0x1,
  basic = 0x2,
  extended = 0x4,
  awk = 0x8,
  grep = 0x10,
  egrep = 0x20,
  _Gmask = 0x3F,
  icase = 0x100,
  nosubs = 0x200,
  optimize = 0x400,
  collate = 0x800,
};

/* 1304 */
enum std::time_base::dateorder
{
  no_order = 0x0,
  dmy = 0x1,
  mdy = 0x2,
  ymd = 0x3,
  ydm = 0x4,
};

/* 1305 */
enum wrapEncodedKERNEL32Functions
{
  eFlsAlloc = 0x0,
  eFlsFree = 0x1,
  eFlsGetValue = 0x2,
  eFlsSetValue = 0x3,
  eInitializeCriticalSectionEx = 0x4,
  eCreateSemaphoreExW = 0x5,
  eSetThreadStackGuarantee = 0x6,
  eCreateThreadpoolTimer = 0x7,
  eSetThreadpoolTimer = 0x8,
  eWaitForThreadpoolTimerCallbacks = 0x9,
  eCloseThreadpoolTimer = 0xA,
  eCreateThreadpoolWait = 0xB,
  eSetThreadpoolWait = 0xC,
  eCloseThreadpoolWait = 0xD,
  eFlushProcessWriteBuffers = 0xE,
  eFreeLibraryWhenCallbackReturns = 0xF,
  eGetCurrentProcessorNumber = 0x10,
  eGetLogicalProcessorInformation = 0x11,
  eCreateSymbolicLinkW = 0x12,
  eSetDefaultDllDirectories = 0x13,
  eCompareStringEx = 0x14,
  eEnumSystemLocalesEx = 0x15,
  eGetDateFormatEx = 0x16,
  eGetLocaleInfoEx = 0x17,
  eGetTimeFormatEx = 0x18,
  eGetUserDefaultLocaleName = 0x19,
  eIsValidLocaleName = 0x1A,
  eLCMapStringEx = 0x1B,
  eGetCurrentPackageId = 0x1C,
  eMaxKernel32Function = 0x1D,
};

/* 1306 */
typedef __vc_attributes::moduleAttribute::type_e $4C3161804E05B3540D0B3C44F3D03C1E;

/* 1307 */
enum LSA_FOREST_TRUST_RECORD_TYPE
{
  ForestTrustTopLevelName = 0x0,
  ForestTrustTopLevelNameEx = 0x1,
  ForestTrustDomainInfo = 0x2,
  ForestTrustRecordTypeLast = 0x2,
};

/* 1308 */
enum ISA_AVAILABILITY
{
  __ISA_AVAILABLE_X86 = 0x0,
  __ISA_AVAILABLE_SSE2 = 0x1,
  __ISA_AVAILABLE_SSE42 = 0x2,
  __ISA_AVAILABLE_AVX = 0x3,
  __ISA_AVAILABLE_ENFSTRG = 0x4,
  __ISA_AVAILABLE_ARMNT = 0x0,
  __ISA_AVAILABLE_NEON = 0x1,
};

/* 1309 */
enum INTRNCVT_STATUS
{
  INTRNCVT_OK = 0x0,
  INTRNCVT_OVERFLOW = 0x1,
  INTRNCVT_UNDERFLOW = 0x2,
};

/* 1310 */
enum STATE
{
  ST_NORMAL = 0x0,
  ST_PERCENT = 0x1,
  ST_FLAG = 0x2,
  ST_WIDTH = 0x3,
  ST_DOT = 0x4,
  ST_PRECIS = 0x5,
  ST_SIZE = 0x6,
  ST_TYPE = 0x7,
  ST_INVALID = 0x8,
};

/* 1311 */
enum CHARTYPE
{
  CH_OTHER = 0x0,
  CH_PERCENT = 0x1,
  CH_DOT = 0x2,
  CH_STAR = 0x3,
  CH_ZERO = 0x4,
  CH_DIGIT = 0x5,
  CH_FLAG = 0x6,
  CH_SIZE = 0x7,
  CH_TYPE = 0x8,
};

/* 1312 */
enum ARG_TYPE
{
  eblank = 0x0,
  e_int_arg = 0x1,
  e_short_arg = 0x2,
  e_ptr_arg = 0x3,
  e_int64_arg = 0x4,
  e_long_long_arg = 0x5,
  e_long_arg = 0x6,
  e_longdouble_arg = 0x7,
  e_double_arg = 0x8,
};

/* 1313 */
enum RO_INIT_TYPE
{
  RO_INIT_SINGLETHREADED = 0x0,
  RO_INIT_MULTITHREADED = 0x1,
};

/* 1314 */
enum $1DD7A03358E0D01DD359262876E6A0F0
{
  lkNormal = 0x0,
  lkPrealloc = 0x1,
  lkDeleted = 0x2,
};

/* 1315 */
enum state_t
{
  S_INIT = 0x0,
  S_EAT0L = 0x1,
  S_SIGNM = 0x2,
  S_GETL = 0x3,
  S_GETR = 0x4,
  S_POINT = 0x5,
  S_E = 0x6,
  S_SIGNE = 0x7,
  S_EAT0E = 0x8,
  S_GETE = 0x9,
  S_END = 0xA,
  S_E_IMPLICIT = 0xB,
};

/* 1316 */
typedef $D7F48ACA8F7E5F151D30CF090E11B572 _FP_OPERATION_CODE;

/* 1317 */
typedef $239F13ABFE0DEB25C9BEF2C1826A55A5 _FPIEEE_FORMAT;

/* 1318 */
typedef $0CDD13AED9949118DD70163834A3A235 _FPIEEE_ROUNDING_MODE;

/* 1319 */
enum Tokens
{
  TOK_basedLp = 0x0,
  TOK_cdecl = 0x1,
  TOK_pascal = 0x2,
  TOK_stdcall = 0x3,
  TOK_thiscall = 0x4,
  TOK_fastcall = 0x5,
  TOK_cocall = 0x6,
  TOK_eabi = 0x7,
  TOK_ptr64 = 0x8,
  TOK_restrict = 0x9,
  TOK_unaligned = 0xA,
  TOK_restrictSpecLp = 0xB,
  TOK__last = 0xC,
};

/* 1320 */
enum DNameStatus
{
  DN_valid = 0x0,
  DN_truncated = 0x1,
  DN_invalid = 0x2,
  DN_error = 0x3,
};

/* 1321 */
typedef $C65D947AD55D217516F83BBF1EBCB876 $C1172ED85F6EEA2F1817E8AB2525566B;

/* 1322 */
enum DW_MATCH_MAKING_SETTINGS
{
  DW_MATCH_MAKING_SETTINGS_TIME = 0x0,
  DW_MATCH_MAKING_SETTINGS_VALUE = 0x1,
  DW_MATCH_MAKING_SETTINGS_MAX = 0x2,
};

/* 1323 */
enum $DE5C92F2DE1A8D9AC0F6951F4C1D0DA3
{
  FFOTD_FETCH_DEFAULT = 0x0,
  FFOTD_FETCH_ALIEN = 0x1,
  FFOTD_FETCH_DONE = 0x2,
  NUM_FFOTDS = 0x2,
};

/* 1324 */
typedef $DF8FFCC4CBBC543AFCC48B251314BE65 $DFDAA00EFB0E2E10ECE64BA58854C84D;

/* 1325 */
enum GfxPostFXColorMode
{
  GfxPostFXColorMode_Color = 0x0,
  GfxPostFXColorMode_Color2 = 0x1,
  GfxPostFXColorMode_PredatorThermal = 0x2,
  GfxPostFXColorMode_COUNT = 0x3,
};

/* 1326 */
enum AntiCheatChallengeStatus
{
  CHALLENGE_STATUS_INVALID = 0x0,
  CHALLENGE_STATUS_NEW = 0x1,
  CHALLENGE_STATUS_PROCESSING = 0x2,
  CHALLENGE_STATUS_COMPLETE = 0x3,
};

/* 1327 */
struct Packed128
{
  unsigned __int64 p0;
  unsigned __int64 p1;
};

/* 1328 */
const struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 1329 */
struct IUnknown
{
  IUnknownVtbl *vfptr;
};

/* 8845 */
typedef int HRESULT;

/* 1330 */
struct IUnknownVtbl
{
  HRESULT (__cdecl *QueryInterface)(IUnknown *this, _GUID *, void **);
  unsigned int (__cdecl *AddRef)(IUnknown *this);
  unsigned int (__cdecl *Release)(IUnknown *this);
};

/* 1331 */
struct __cppobj ID3D11DeviceChild : IUnknown
{
};

/* 1332 */
struct __cppobj ID3D11Resource : ID3D11DeviceChild
{
};

/* 1333 */
struct __cppobj ID3D11Texture1D : ID3D11Resource
{
};

/* 1334 */
struct __cppobj ID3D11Texture2D : ID3D11Resource
{
};

/* 1335 */
struct __cppobj ID3D11Texture3D : ID3D11Resource
{
};

/* 1336 */
struct __declspec(align(4)) GfxImageLoadDef
{
  char levelCount;
  char numElements;
  char pad[2];
  int flags;
  int format;
  int resourceSize;
  char data[1];
};

/* 1337 */
struct __cppobj ID3D11View : ID3D11DeviceChild
{
};

/* 1338 */
struct __cppobj ID3D11ShaderResourceView : ID3D11View
{
};

/* 1339 */
union $97B6F890F865250D429259278D989554
{
  ID3D11Texture1D *linemap;
  ID3D11Texture2D *map;
  ID3D11Texture3D *volmap;
  ID3D11Texture2D *cubemap;
  GfxImageLoadDef *loadDef;
};

/* 1340 */
struct GfxTexture
{
  $97B6F890F865250D429259278D989554 ___u0;
  ID3D11ShaderResourceView *shaderView;
  ID3D11ShaderResourceView *shaderViewAlternate;
};

/* 1341 */
struct Picmip
{
  char platform[2];
};

/* 1342 */
struct CardMemory
{
  int platform[2];
};

/* 1343 */
struct GfxImage
{
  GfxTexture texture;
  char mapType;
  char semantic;
  char category;
  char flags;
  Picmip picmip;
  char track;
  CardMemory cardMemory;
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned __int16 depth;
  unsigned __int16 numElements;
  const char *name;
};

/* 1344 */
struct GfxMarkDisplacementContext
{
  GfxImage *displacementMap;
  float displacementParams[4];
};

/* 1345 */
union $0BFED2521EFC2ADD953BA45101642BDC
{
  char modelIndex[2];
  char entnum[2];
  char glassPieceIndex[2];
  char lightHandle[2];
};

/* 1346 */
union $C2FF5889CC33314FCE679ED361558D61
{
  char lmapIndex;
  char boneIndex;
};

/* 1347 */
union $26E58EB2A6E9224B031C4B2F1CA23368
{
  char surfIndex;
  char entModelBits;
};

/* 1348 */
struct GfxMarkContext
{
  GfxMarkDisplacementContext displacement[8];
  char modelType;
  $C2FF5889CC33314FCE679ED361558D61 ___u2;
  $0BFED2521EFC2ADD953BA45101642BDC typeSpecificIndex;
  $26E58EB2A6E9224B031C4B2F1CA23368 ___u4;
  char reflectionProbeIndex;
  unsigned __int16 primaryLightEnvIndex;
};

/* 1349 */
union __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  char m128_i8[16];
  __int16 m128_i16[8];
  int m128_i32[4];
  __int64 m128_i64[2];
  char m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned int m128_u32[4];
};

/* 1350 */
union uint4
{
  unsigned int u[4];
  __m128 v;
};

/* 1351 */
union __m128i
{
  char m128i_i8[16];
  __int16 m128i_i16[8];
  int m128i_i32[4];
  __int64 m128i_i64[2];
  char m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned int m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 1352 */
struct vector2
{
  __m128 x;
  __m128 y;
};

/* 1353 */
struct vector3
{
  __m128 x;
  __m128 y;
  __m128 z;
};

/* 1354 */
struct __cppobj vector4 : vector3
{
  __m128 w;
};

/* 1355 */
struct __declspec(align(2)) trace_t
{
  float fraction;
  float normal[3];
  int surfaceFlags;
  int contents;
  TraceHitType hitType;
  unsigned __int16 hitId;
  unsigned __int16 modelIndex;
  scr_string_t partName;
  unsigned __int16 partGroup;
  bool allsolid;
  bool startsolid;
  bool walkable;
  bool getPenetration;
  bool removePitchAndRollRotations;
};

/* 1356 */
struct $C96EA5EC2ACBB9C0BF22693F316ACC67
{
  char r;
  char g;
  char b;
  char a;
};

/* 1357 */
union hudelem_color_t
{
  $C96EA5EC2ACBB9C0BF22693F316ACC67 __s0;
  int rgba;
};

/* 1358 */
struct hudelem_s
{
  he_type_t type;
  float x;
  float y;
  float z;
  int targetEntNum;
  float fontScale;
  float fromFontScale;
  int fontScaleStartTime;
  int fontScaleTime;
  int font;
  int alignOrg;
  int alignScreen;
  hudelem_color_t color;
  hudelem_color_t fromColor;
  int fadeStartTime;
  int fadeTime;
  int label;
  int width;
  int height;
  int materialIndex;
  int fromWidth;
  int fromHeight;
  int scaleStartTime;
  int scaleTime;
  float fromX;
  float fromY;
  int fromAlignOrg;
  int fromAlignScreen;
  int moveStartTime;
  int moveTime;
  int time;
  int duration;
  float value;
  int text;
  float sort;
  hudelem_color_t glowColor;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  int soundID;
  int flags;
};

/* 1359 */
struct compressedAnimData_s
{
  int flags;
  int animRate;
  int distanceIn2D;
  int distanceOut2D;
  int distanceInZ;
  int distanceOutZ;
  int endScriptAnimTableIndex;
};

/* 1360 */
struct MantleState
{
  float yaw;
  int startPitch;
  int transIndex;
  int flags;
  int startTime;
  float startPosition[3];
  compressedAnimData_s compressedAnimData;
};

/* 1361 */
struct FxFloatRange
{
  float base;
  float amplitude;
};

/* 1362 */
struct FxSpawnDefLooping
{
  int intervalMsec;
  int count;
};

/* 1363 */
struct FxIntRange
{
  int base;
  int amplitude;
};

/* 1364 */
struct FxSpawnDefOneShot
{
  FxIntRange count;
};

/* 1365 */
union FxSpawnDef
{
  FxSpawnDefLooping looping;
  FxSpawnDefOneShot oneShot;
};

/* 1366 */
struct FxElemAtlas
{
  char behavior;
  char index;
  char fps;
  char loopCount;
  char colIndexBits;
  char rowIndexBits;
  __int16 entryCount;
};

/* 1367 */
struct FxElemVec3Range
{
  float base[3];
  float amplitude[3];
};

/* 1368 */
struct FxElemVelStateInFrame
{
  FxElemVec3Range velocity;
  FxElemVec3Range totalDelta;
};

/* 1369 */
const struct FxElemVelStateSample
{
  FxElemVelStateInFrame local;
  FxElemVelStateInFrame world;
};

/* 1370 */
struct FxElemVisualState
{
  float color[4];
  float unlitHDRScale;
  float rotationDelta;
  float rotationTotal;
  float size[2];
  float scale;
};

/* 1371 */
const struct FxElemVisStateSample
{
  FxElemVisualState base;
  FxElemVisualState amplitude;
};

/* 1372 */
struct GfxDrawSurfFields
{
  unsigned __int64 objectId : 16;
  unsigned __int64 reflectionProbeIndex : 8;
  unsigned __int64 hasGfxEntIndex : 1;
  unsigned __int64 customIndex : 5;
  unsigned __int64 materialSortedIndex : 13;
  unsigned __int64 tessellation : 3;
  unsigned __int64 prepass : 2;
  unsigned __int64 useHeroLighting : 1;
  unsigned __int64 sceneLightEnvIndex : 16;
  unsigned __int64 viewModelRender : 1;
  unsigned __int64 surfType : 4;
  unsigned __int64 primarySortKey : 6;
  unsigned __int64 unused : 30;
};

/* 1373 */
union GfxDrawSurf
{
  GfxDrawSurfFields fields;
  Packed128 packed;
};

/* 1374 */
struct __declspec(align(4)) MaterialInfo
{
  const char *name;
  char gameFlags;
  char sortKey;
  char textureAtlasRowCount;
  char textureAtlasColumnCount;
  char textureAtlasFrameBlend;
  char textureAtlasAsArray;
  char renderFlags;
  GfxDrawSurf drawSurf;
  unsigned int surfaceTypeBits;
  unsigned __int16 hashIndex;
};

/* 1375 */
struct __cppobj ID3D11VertexShader : ID3D11DeviceChild
{
};

/* 1376 */
struct __declspec(align(8)) GfxVertexShaderLoadDef
{
  char *program;
  unsigned int programSize;
  unsigned __int16 loadForRenderer;
  unsigned int microCodeCrc;
};

/* 1377 */
struct MaterialVertexShaderProgram
{
  ID3D11VertexShader *vs;
  GfxVertexShaderLoadDef loadDef;
};

/* 1378 */
struct MaterialVertexShader
{
  const char *name;
  MaterialVertexShaderProgram prog;
};

/* 1379 */
struct MaterialStreamRouting
{
  char source;
  char dest;
  char mask;
};

/* 1380 */
struct __cppobj ID3D11InputLayout : ID3D11DeviceChild
{
};

/* 1381 */
struct MaterialVertexStreamRouting
{
  MaterialStreamRouting data[31];
  ID3D11InputLayout *decl[242];
};

/* 1382 */
struct MaterialVertexDeclaration
{
  const char *name;
  char streamCount;
  bool hasOptionalSource;
  MaterialVertexStreamRouting routing;
};

/* 1383 */
struct __cppobj ID3D11HullShader : ID3D11DeviceChild
{
};

/* 1384 */
struct __declspec(align(4)) GfxHullShaderLoadDef
{
  char *program;
  unsigned int programSize;
  unsigned __int16 loadForRenderer;
};

/* 1385 */
struct MaterialHullShaderProgram
{
  ID3D11HullShader *hs;
  GfxHullShaderLoadDef loadDef;
};

/* 1386 */
struct MaterialHullShader
{
  const char *name;
  MaterialHullShaderProgram prog;
};

/* 1387 */
struct __cppobj ID3D11DomainShader : ID3D11DeviceChild
{
};

/* 1388 */
struct __declspec(align(4)) GfxDomainShaderLoadDef
{
  char *program;
  unsigned int programSize;
  unsigned __int16 loadForRenderer;
};

/* 1389 */
struct MaterialDomainShaderProgram
{
  ID3D11DomainShader *ds;
  GfxDomainShaderLoadDef loadDef;
};

/* 1390 */
struct MaterialDomainShader
{
  const char *name;
  MaterialDomainShaderProgram prog;
};

/* 1391 */
struct __cppobj ID3D11PixelShader : ID3D11DeviceChild
{
};

/* 1392 */
struct __declspec(align(8)) GfxPixelShaderLoadDef
{
  char *program;
  unsigned int programSize;
  unsigned __int16 loadForRenderer;
  unsigned int microCodeCrc;
};

/* 1393 */
struct MaterialPixelShaderProgram
{
  ID3D11PixelShader *ps;
  GfxPixelShaderLoadDef loadDef;
};

/* 1394 */
struct MaterialPixelShader
{
  const char *name;
  MaterialPixelShaderProgram prog;
};

/* 1395 */
struct MaterialArgumentCodeConst
{
  unsigned __int16 index;
  char firstRow;
  char rowCount;
};

/* 1396 */
union MaterialArgumentDef
{
  const float *literalConst;
  MaterialArgumentCodeConst codeConst;
  unsigned int codeSampler;
  unsigned int nameHash;
};

/* 1397 */
struct MaterialShaderArgument
{
  char type;
  char shader;
  unsigned __int16 dest;
  MaterialArgumentDef u;
};

/* 1398 */
struct MaterialPass
{
  MaterialVertexShader *vertexShader;
  MaterialVertexDeclaration *vertexDecl;
  MaterialHullShader *hullShader;
  MaterialDomainShader *domainShader;
  MaterialPixelShader *pixelShader;
  char pixelOutputMask;
  char perPrimArgCount;
  char perObjArgCount;
  char stableArgCount;
  unsigned __int16 perPrimArgSize;
  unsigned __int16 perObjArgSize;
  unsigned __int16 stableArgSize;
  char zone;
  char perPrimConstantBuffer;
  char perObjConstantBuffer;
  char stableConstantBuffer;
  unsigned int customBufferFlags;
  char customSamplerFlags;
  char precompiledIndex;
  char stageConfig;
  MaterialShaderArgument *args;
};

/* 1399 */
struct MaterialTechnique
{
  const char *name;
  unsigned __int16 flags;
  unsigned __int16 passCount;
  MaterialPass passArray[1];
};

/* 1400 */
struct MaterialTechniqueSet
{
  const char *name;
  unsigned __int16 flags;
  char worldVertFormat;
  char preDisplacementOnlyCount;
  MaterialTechnique *techniques[309];
};

/* 1401 */
struct WaterWritable
{
  float floatTime;
};

/* 1402 */
struct water_t
{
  WaterWritable writable;
  float *H0X;
  float *H0Y;
  float *wTerm;
  int M;
  int N;
  float Lx;
  float Lz;
  float gravity;
  float windvel;
  float winddir[2];
  float amplitude;
  GfxImage *image;
  GfxImage *stagingImage;
};

/* 1403 */
union MaterialTextureDefInfo
{
  GfxImage *image;
  water_t *water;
};

/* 1404 */
struct MaterialTextureDef
{
  unsigned int nameHash;
  char nameStart;
  char nameEnd;
  char samplerState;
  char semantic;
  MaterialTextureDefInfo u;
};

/* 1405 */
struct MaterialConstantDef
{
  unsigned int nameHash;
  char name[12];
  float literal[4];
};

/* 1406 */
struct __declspec(align(4)) GfxStateBits
{
  unsigned int loadBits[3];
  char zone;
  char depthStencilState[11];
  char blendState;
  char rasterizerState;
};

/* 1407 */
struct __cppobj ID3D11Buffer : ID3D11Resource
{
};

/* 1408 */
struct MaterialConstantBufferDef
{
  unsigned int vsDataSize;
  unsigned int hsDataSize;
  unsigned int dsDataSize;
  unsigned int psDataSize;
  unsigned int vsOffsetDataSize;
  unsigned int hsOffsetDataSize;
  unsigned int dsOffsetDataSize;
  unsigned int psOffsetDataSize;
  char *vsData;
  char *hsData;
  char *dsData;
  char *psData;
  unsigned __int16 *vsOffsetData;
  unsigned __int16 *hsOffsetData;
  unsigned __int16 *dsOffsetData;
  unsigned __int16 *psOffsetData;
  ID3D11Buffer *vsConstantBuffer;
  ID3D11Buffer *hsConstantBuffer;
  ID3D11Buffer *dsConstantBuffer;
  ID3D11Buffer *psConstantBuffer;
};

/* 1409 */
struct __declspec(align(8)) Material
{
  MaterialInfo info;
  char stateBitsEntry[309];
  char textureCount;
  char constantCount;
  char stateBitsCount;
  char stateFlags;
  char cameraRegion;
  char materialType;
  char assetFlags;
  MaterialTechniqueSet *techniqueSet;
  MaterialTextureDef *textureTable;
  MaterialConstantDef *constantTable;
  GfxStateBits *stateBitsTable;
  char constantBufferIndex[309];
  MaterialConstantBufferDef *constantBufferTable;
  char constantBufferCount;
};

/* 1410 */
struct FxElemMarkVisuals
{
  Material *materials[3];
};

/* 1411 */
struct DObjAnimMat
{
  float quat[4];
  float trans[3];
  float transWeight;
};

/* 1412 */
struct ReactiveMotionModelPart
{
  float center[3];
  float stiffness;
};

/* 1413 */
union PackedUnitVec
{
  unsigned int packed;
};

/* 1414 */
union PackedTexCoords
{
  unsigned int packed;
};

/* 1415 */
struct GfxQuantizedNoColorVertex
{
  __int16 xyz[3];
  __int16 binormalSign;
  PackedUnitVec normal;
  PackedUnitVec tangent;
  PackedTexCoords texCoord;
};

/* 1416 */
union GfxColor
{
  char array[4];
  unsigned int packed;
};

/* 1417 */
struct GfxQuantizedNoColorMotionVertex
{
  __int16 xyz[3];
  __int16 binormalSignAndHeight;
  PackedUnitVec normal;
  PackedUnitVec tangent;
  PackedTexCoords texCoord;
  GfxColor pieceIndex;
};

/* 1418 */
struct GfxQuantizedVertex
{
  __int16 xyz[3];
  __int16 binormalSign;
  PackedUnitVec normal;
  PackedUnitVec tangent;
  PackedTexCoords texCoord;
  GfxColor color;
};

/* 1419 */
struct GfxQuantizedMotionVertex
{
  __int16 xyz[3];
  __int16 binormalSignAndHeight;
  PackedUnitVec normal;
  PackedUnitVec tangent;
  PackedTexCoords texCoord;
  GfxColor pieceIndex;
};

/* 1420 */
struct GfxPackedVertex
{
  float xyz[3];
  float binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 1421 */
struct GfxPackedMotionVertex
{
  float xyz[3];
  float binormalSignAndHeight;
  GfxColor pieceIndex;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 1422 */
union GfxVertexUnion0
{
  GfxQuantizedNoColorVertex *quantizedNoColorVerts0;
  GfxQuantizedNoColorMotionVertex *quantizedNoColorMotionVerts0;
  GfxQuantizedVertex *quantizedVerts0;
  GfxQuantizedMotionVertex *quantizedMotionVerts0;
  GfxPackedVertex *packedVerts0;
  GfxPackedMotionVertex *packedMotionVerts0;
  void *verts0;
};

/* 1423 */
struct XSurfaceCollisionAabb
{
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
};

/* 1424 */
struct XSurfaceCollisionNode
{
  XSurfaceCollisionAabb aabb;
  unsigned __int16 childBeginIndex;
  unsigned __int16 childCount;
};

/* 1425 */
struct XSurfaceCollisionLeaf
{
  unsigned __int16 triangleBeginIndex;
};

/* 1426 */
struct XSurfaceCollisionTree
{
  float trans[3];
  float scale[3];
  unsigned int nodeCount;
  XSurfaceCollisionNode *nodes;
  unsigned int leafCount;
  XSurfaceCollisionLeaf *leafs;
};

/* 1427 */
struct XRigidVertList
{
  unsigned __int16 boneOffset;
  unsigned __int16 vertCount;
  unsigned __int16 triOffset;
  unsigned __int16 triCount;
  XSurfaceCollisionTree *collisionTree;
};

/* 1428 */
struct __declspec(align(8)) XSurface
{
  unsigned __int16 flags;
  unsigned __int16 vertCount;
  unsigned __int16 triCount;
  char rigidVertListCount;
  char pad;
  __int16 blendVertCounts[8];
  GfxVertexUnion0 verts0;
  unsigned __int16 *triIndices;
  ID3D11Buffer *vb0;
  ID3D11ShaderResourceView *vb0View;
  ID3D11Buffer *indexBuffer;
  XRigidVertList *rigidVertLists;
  unsigned __int16 *blendVerts;
  float (*lmapUnwrap)[2];
  ID3D11Buffer *vblmap;
  ID3D11ShaderResourceView *vblmapView;
  float *tensionData;
  unsigned __int16 *tensionAccumTable;
  ID3D11Buffer *tensionAccumTableBuffer;
  ID3D11ShaderResourceView *tensionAccumTableView;
  ID3D11Buffer *tensionDataBuffer;
  ID3D11ShaderResourceView *tensionDataView;
  ID3D11ShaderResourceView *indexBufferView;
  unsigned int vertexLightingIndex;
  int partBits[6];
};

/* 1429 */
struct __declspec(align(8)) XModelSurfs
{
  const char *name;
  XSurface *surfs;
  unsigned __int16 numsurfs;
  int partBits[6];
};

/* 1430 */
struct XModelLodInfo
{
  float dist;
  unsigned __int16 numsurfs;
  unsigned __int16 surfIndex;
  XModelSurfs *modelSurfs;
  int partBits[6];
  XSurface *surfs;
};

/* 1431 */
struct Bounds
{
  float midPoint[3];
  float halfSize[3];
};

/* 1432 */
struct XModelCollSurf_s
{
  Bounds bounds;
  int boneIdx;
  int contents;
  int surfFlags;
};

/* 1433 */
union $3F5B938DF5E4F97F8E1F05029085C3EA
{
  float radiusSquared;
  unsigned int radiusSquaredAsInt;
};

/* 1434 */
struct XBoneInfo
{
  Bounds bounds;
  $3F5B938DF5E4F97F8E1F05029085C3EA ___u1;
};

/* 1435 */
struct __declspec(align(8)) PhysPreset
{
  const char *name;
  int type;
  float mass;
  float bounce;
  float friction;
  float bulletForceScale;
  float explosiveForceScale;
  const char *sndAliasPrefix;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  float minMomentum;
  float maxMomentum;
  float minVolume;
  float maxVolume;
  float minPitch;
  float maxPitch;
  PhysPresetScaling volumeType;
  PhysPresetScaling pitchType;
  bool tempDefaultToCylinder;
  bool perSurfaceSndAlias;
};

/* 1436 */
struct cplane_s
{
  float normal[3];
  float dist;
  char type;
  char pad[3];
};

/* 1437 */
struct __declspec(align(8)) cbrushside_t
{
  cplane_s *plane;
  unsigned __int16 materialNum;
  char firstAdjacentSideOffset;
  char edgeCount;
};

/* 1438 */
struct cbrush_t
{
  unsigned __int16 numsides;
  unsigned __int16 glassPieceIndex;
  cbrushside_t *sides;
  char *baseAdjacentSide;
  __int16 axialMaterialNum[2][3];
  char firstAdjacentSideOffsets[2][3];
  char edgeCount[2][3];
};

/* 1439 */
struct BrushWrapper
{
  Bounds bounds;
  cbrush_t brush;
  int totalEdgeCount;
  cplane_s *planes;
};

/* 1440 */
struct PhysGeomInfo
{
  BrushWrapper *brushWrapper;
  int type;
  float orientation[3][3];
  Bounds bounds;
};

/* 1441 */
struct PhysMass
{
  float centerOfMass[3];
  float momentsOfInertia[3];
  float productsOfInertia[3];
};

/* 1442 */
struct __declspec(align(8)) PhysCollmap
{
  const char *name;
  unsigned int count;
  PhysGeomInfo *geoms;
  PhysMass mass;
  Bounds bounds;
};

/* 1443 */
struct __declspec(align(8)) XModel
{
  const char *name;
  char numBones;
  char numRootBones;
  char numsurfs;
  char numReactiveMotionParts;
  char lodRampType;
  float scale;
  unsigned int noScalePartBits[6];
  scr_string_t *boneNames;
  char *parentList;
  __int16 *quats;
  float *trans;
  char *partClassification;
  DObjAnimMat *baseMat;
  ReactiveMotionModelPart *reactiveMotionParts;
  Material **materialHandles;
  XModelLodInfo lodInfo[6];
  char maxLoadedLod;
  char numLods;
  char collLod;
  char flags;
  int numCollSurfs;
  XModelCollSurf_s *collSurfs;
  int contents;
  XBoneInfo *boneInfo;
  float radius;
  Bounds bounds;
  int memUsage;
  bool bad;
  PhysPreset *physPreset;
  PhysCollmap *physCollmap;
  float quantization;
};

/* 1444 */
struct FxEffectDef
{
  const char *name;
  int flags;
  int totalSize;
  int msecLoopingLife;
  int elemDefCountLooping;
  int elemDefCountOneShot;
  int elemDefCountEmission;
  float elemMaxRadius;
  float occlusionQueryDepthBias;
  int occlusionQueryFadeIn;
  int occlusionQueryFadeOut;
  FxFloatRange occlusionQueryScaleRange;
  FxElemDef *elemDefs;
};

/* 1445 */
union FxEffectDefRef
{
  FxEffectDef *handle;
  const char *name;
};

/* 1446 */
struct __declspec(align(8)) GfxLightImage
{
  GfxImage *image;
  char samplerState;
};

/* 1447 */
struct __declspec(align(8)) GfxLightDef
{
  const char *name;
  GfxLightImage attenuation;
  GfxLightImage cucoloris;
  int lmapLookupStart;
};

/* 1448 */
struct __declspec(align(4)) FxParticleSimAnimationHeader
{
  float playbackRate;
  float duration;
  unsigned int frameCount;
  float minX;
  float minY;
  float minZ;
  float boundsXDelta;
  float boundsYDelta;
  float boundsZDelta;
  float maxWidth;
  float maxHeight;
  unsigned int colorTableSize;
  unsigned int particleDataCount;
  bool evalVisStatePerParticle;
  bool sortParticlesAtRuntime;
};

/* 1449 */
struct FxParticleSimAnimationParticleData
{
  unsigned __int16 xNormalizedPos;
  unsigned __int16 yNormalizedPos;
  unsigned __int16 zNormalizedPos;
  unsigned __int16 xNormalizedWidth;
  unsigned __int16 yNormalizedHeight;
  unsigned __int16 orientation;
  unsigned __int16 lifetime;
  unsigned __int16 particleID;
  unsigned __int16 xNormalizedPosNextFrame;
  unsigned __int16 yNormalizedPosNextFrame;
  unsigned __int16 zNormalizedPosNextFrame;
  unsigned __int16 xNormalizedWidthNextFrame;
  unsigned __int16 yNormalizedHeightNextFrame;
  __int16 orientationDelta;
  unsigned __int16 colorTableIndex;
  unsigned __int16 nextColorTableIndex;
};

/* 1450 */
struct FxParticleSimAnimationFrame
{
  unsigned int particleDataOffset;
  unsigned int numActiveParticles;
};

/* 1451 */
struct GfxColorFloat
{
  float array[4];
};

/* 1452 */
struct FxParticleSimAnimation
{
  const char *name;
  Material *material;
  FxParticleSimAnimationHeader header;
  FxParticleSimAnimationParticleData *particleData;
  FxParticleSimAnimationFrame *frames;
  GfxColorFloat *colorTable;
};

/* 1453 */
union FxElemVisuals
{
  const void *anonymous;
  Material *material;
  XModel *model;
  FxEffectDefRef effectDef;
  const char *soundName;
  const char *vectorFieldName;
  GfxLightDef *lightDef;
  FxParticleSimAnimation *particleSimAnimation;
};

/* 1454 */
union FxElemDefVisuals
{
  FxElemMarkVisuals *markArray;
  FxElemVisuals *array;
  FxElemVisuals instance;
};

/* 1455 */
struct FxTrailVertex
{
  float pos[2];
  float normal[2];
  float texCoord[2];
};

/* 1456 */
struct FxTrailDef
{
  int scrollTimeMsec;
  int repeatDist;
  float invSplitDist;
  float invSplitArcDist;
  float invSplitTime;
  int vertCount;
  FxTrailVertex *verts;
  int indCount;
  unsigned __int16 *inds;
};

/* 1457 */
struct FxSparkFountainDef
{
  float gravity;
  float bounceFrac;
  float bounceRand;
  float sparkSpacing;
  float sparkLength;
  int sparkCount;
  float loopTime;
  float velMin;
  float velMax;
  float velConeFrac;
  float restSpeed;
  float boostTime;
  float boostFactor;
};

/* 1458 */
struct FxSpotLightDef
{
  float fovInnerFraction;
  float startRadius;
  float endRadius;
  float brightness;
  float maxLength;
  int exponent;
};

/* 1459 */
struct FxFlareDef
{
  float position;
  int angularRotCount;
  int flags;
  FxFloatRange depthScaleRange;
  FxFloatRange depthScaleValue;
  FxFloatRange radialRot;
  FxFloatRange radialScaleX;
  FxFloatRange radialScaleY;
  float dir[3];
  int intensityXIntervalCount;
  int intensityYIntervalCount;
  int srcCosIntensityIntervalCount;
  int srcCosScaleIntervalCount;
  float *intensityX;
  float *intensityY;
  float *srcCosIntensity;
  float *srcCosScale;
};

/* 1460 */
union FxElemExtendedDefPtr
{
  FxTrailDef *trailDef;
  FxSparkFountainDef *sparkFountainDef;
  FxSpotLightDef *spotLightDef;
  FxFlareDef *flareDef;
  void *unknownDef;
};

/* 1461 */
const struct FxElemDef
{
  int flags;
  int flags2;
  FxSpawnDef spawn;
  FxFloatRange spawnRange;
  FxFloatRange fadeInRange;
  FxFloatRange fadeOutRange;
  float spawnFrustumCullRadius;
  FxIntRange spawnDelayMsec;
  FxIntRange lifeSpanMsec;
  FxFloatRange spawnOrigin[3];
  FxFloatRange spawnOffsetRadius;
  FxFloatRange spawnOffsetHeight;
  FxFloatRange spawnAngles[3];
  FxFloatRange angularVelocity[3];
  FxFloatRange initialRotation;
  FxFloatRange gravity;
  FxFloatRange reflectionFactor;
  FxElemAtlas atlas;
  char elemType;
  char elemLitType;
  char visualCount;
  char velIntervalCount;
  char visStateIntervalCount;
  FxElemVelStateSample *velSamples;
  FxElemVisStateSample *visSamples;
  FxElemDefVisuals visuals;
  Bounds collBounds;
  FxEffectDefRef effectOnImpact;
  FxEffectDefRef effectOnDeath;
  FxEffectDefRef effectEmitted;
  FxFloatRange emitDist;
  FxFloatRange emitDistVariance;
  FxElemExtendedDefPtr extended;
  char sortOrder;
  char lightingFrac;
  char useItemClip;
  char fadeInfo;
  int randomSeed;
  float litMaxColorChangePerSec;
  float unlitHDRScalar;
  float litHDRScalar;
  float litUnlitBlendFactor;
};

/* 1462 */
union XAnimIndices
{
  char *_1;
  unsigned __int16 *_2;
  void *data;
};

/* 1463 */
struct XAnimNotifyInfo
{
  scr_string_t name;
  float time;
};

/* 1464 */
union XAnimDynamicFrames
{
  char (*_1)[3];
  unsigned __int16 (*_2)[3];
};

/* 1465 */
union XAnimDynamicIndices
{
  char _1[1];
  unsigned __int16 _2[1];
};

/* 1466 */
struct __declspec(align(8)) XAnimPartTransFrames
{
  float mins[3];
  float size[3];
  XAnimDynamicFrames frames;
  XAnimDynamicIndices indices;
};

/* 1467 */
union XAnimPartTransData
{
  XAnimPartTransFrames frames;
  float frame0[3];
};

/* 1468 */
struct XAnimPartTrans
{
  unsigned __int16 size;
  char smallTrans;
  XAnimPartTransData u;
};

/* 1469 */
struct __declspec(align(8)) XAnimDeltaPartQuatDataFrames2
{
  __int16 (*frames)[2];
  XAnimDynamicIndices indices;
};

/* 1470 */
union XAnimDeltaPartQuatData2
{
  XAnimDeltaPartQuatDataFrames2 frames;
  __int16 frame0[2];
};

/* 1471 */
struct XAnimDeltaPartQuat2
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData2 u;
};

/* 1472 */
struct __declspec(align(8)) XAnimDeltaPartQuatDataFrames
{
  __int16 (*frames)[4];
  XAnimDynamicIndices indices;
};

/* 1473 */
union XAnimDeltaPartQuatData
{
  XAnimDeltaPartQuatDataFrames frames;
  __int16 frame0[4];
};

/* 1474 */
struct XAnimDeltaPartQuat
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData u;
};

/* 1475 */
struct XAnimDeltaPart
{
  XAnimPartTrans *trans;
  XAnimDeltaPartQuat2 *quat2;
  XAnimDeltaPartQuat *quat;
};

/* 1476 */
struct XAnimParts
{
  const char *name;
  unsigned __int16 dataByteCount;
  unsigned __int16 dataShortCount;
  unsigned __int16 dataIntCount;
  unsigned __int16 randomDataByteCount;
  unsigned __int16 randomDataIntCount;
  unsigned __int16 numframes;
  char flags;
  char boneCount[10];
  char notifyCount;
  char assetType;
  char ikType;
  unsigned int randomDataShortCount;
  unsigned int indexCount;
  float framerate;
  float frequency;
  scr_string_t *names;
  char *dataByte;
  __int16 *dataShort;
  int *dataInt;
  __int16 *randomDataShort;
  char *randomDataByte;
  int *randomDataInt;
  XAnimIndices indices;
  XAnimNotifyInfo *notify;
  XAnimDeltaPart *deltaPart;
};

/* 1477 */
struct __declspec(align(2)) RiffAudioInfo
{
  unsigned int sampleRate;
  unsigned int dataByteCount;
  unsigned int numSamples;
  unsigned int avgBytesPerSec;
  unsigned __int16 channels;
  unsigned __int16 numBits;
  unsigned __int16 blockAlign;
  char format;
};

/* 1478 */
struct XA2Sound
{
  char *data;
  char *seekTable;
  RiffAudioInfo format;
  int loadedSize;
  int seekTableSize;
};

/* 1479 */
struct LoadedSound
{
  const char *name;
  XA2Sound sound;
};

/* 1480 */
struct StreamFileNameRaw
{
  const char *dir;
  const char *name;
};

/* 1481 */
struct StreamFileNamePacked
{
  unsigned __int64 offset;
  unsigned __int64 length;
};

/* 1482 */
union StreamFileInfo
{
  StreamFileNameRaw raw;
  StreamFileNamePacked packed;
};

/* 1483 */
struct StreamFileName
{
  unsigned __int16 isLocalized;
  unsigned __int16 fileIndex;
  StreamFileInfo info;
};

/* 1484 */
struct __declspec(align(8)) StreamedSound
{
  StreamFileName filename;
  unsigned int totalMsec;
};

/* 1485 */
struct __declspec(align(8)) PrimedSound
{
  StreamFileName filename;
  LoadedSound *loadedPart;
  int dataOffset;
  int totalSize;
  unsigned int primedCrc;
};

/* 1486 */
union SoundFileRef
{
  LoadedSound *loadSnd;
  StreamedSound streamSnd;
  PrimedSound primedSnd;
};

/* 1487 */
struct SoundFile
{
  char type;
  char exists;
  SoundFileRef u;
};

/* 1488 */
struct __declspec(align(8)) SndCurve
{
  bool isDefault;
  const char *filename;
  unsigned __int16 knotCount;
  float knots[16][2];
};

/* 1489 */
struct SpeakerLevels
{
  int speaker;
  int numLevels;
  float levels[2];
};

/* 1490 */
struct ChannelMap
{
  int speakerCount;
  SpeakerLevels speakers[6];
};

/* 1491 */
struct SpeakerMap
{
  bool isDefault;
  const char *name;
  ChannelMap channelMaps[2][2];
};

/* 1492 */
struct OcclusionShape
{
  bool isDefault;
  const char *name;
  int shapeKind;
  float innerAngle;
  float outerAngle;
  float occludedVolume;
};

/* 1493 */
struct __declspec(align(8)) DopplerPreset
{
  const char *p_name;
  float speedOfSound;
  float playerVelocityScale;
  float minPitch;
  float maxPitch;
  float smoothing;
};

/* 1494 */
struct snd_alias_t
{
  const char *aliasName;
  const char *subtitle;
  const char *secondaryAliasName;
  const char *chainAliasName;
  const char *mixerGroup;
  SoundFile *soundFile;
  int sequence;
  float volMin;
  float volMax;
  int volModIndex;
  float pitchMin;
  float pitchMax;
  float distMin;
  float distMax;
  float velocityMin;
  int flags;
  char masterPriority;
  float masterPercentage;
  float slavePercentage;
  float probability;
  float lfePercentage;
  float centerPercentage;
  int startDelay;
  SndCurve *volumeFalloffCurve;
  SndCurve *lpfCurve;
  SndCurve *reverbSendCurve;
  float envelopMin;
  float envelopMax;
  float envelopPercentage;
  SpeakerMap *speakerMap;
  float wetMixOverride;
  OcclusionShape *occlusionShape;
  char allowDoppler;
  DopplerPreset *dopplerPreset;
};

/* 1495 */
struct __declspec(align(8)) snd_alias_list_t
{
  const char *aliasName;
  snd_alias_t *head;
  int count;
};

/* 1496 */
struct TracerDef
{
  const char *name;
  Material *material;
  unsigned int drawInterval;
  float speed;
  float beamLength;
  float beamWidth;
  float screwRadius;
  float screwDist;
  float colors[5][4];
};

/* 1497 */
struct __declspec(align(8)) AttAmmoGeneral
{
  PenetrateType penetrateType;
  float penetrateMultiplier;
  ImpactType impactType;
  weapFireType_t fireType;
  TracerDef *tracerType;
  bool rifleBullet;
  bool armorPiercing;
};

/* 1498 */
struct AttSight
{
  bool aimDownSight;
  bool adsFire;
  bool rechamberWhileAds;
  bool noAdsWhenMagEmpty;
  bool canHoldBreath;
  bool canVariableZoom;
  bool hideRailWithThisScope;
  bool useScopeDrift;
  bool useDualFOV;
};

/* 1499 */
struct AttReload
{
  bool noPartialReload;
  bool segmentedReload;
};

/* 1500 */
struct AttAddOns
{
  bool motionTracker;
  bool silenced;
  bool riotShield;
};

/* 1501 */
struct AttGeneral
{
  bool boltAction;
  bool inheritsPerks;
  bool reticleSpin45;
  float enemyCrosshairRange;
  Material *reticleCenter;
  Material *reticleSide;
  int reticleCenterSize;
  int reticleSideSize;
  float moveSpeedScale;
  float adsMoveSpeedScale;
};

/* 1502 */
struct AttAimAssist
{
  float autoAimRange;
  float aimAssistRange;
  float aimAssistRangeAds;
};

/* 1503 */
struct AttAmmunition
{
  int maxAmmo;
  int startAmmo;
  int clipSize;
  int shotCount;
  int reloadAmmoAdd;
  int reloadStartAdd;
};

/* 1504 */
struct AttDamage
{
  int damage;
  int minDamage;
  int meleeDamage;
  float maxDamageRange;
  float minDamageRange;
  int playerDamage;
  int minPlayerDamage;
};

/* 1505 */
struct AttLocationDamage
{
  float locNone;
  float locHelmet;
  float locHead;
  float locNeck;
  float locTorsoUpper;
  float locTorsoLower;
  float locRightArmUpper;
  float locRightArmLower;
  float locRightHand;
  float locLeftArmUpper;
  float locLeftArmLower;
  float locLeftHand;
  float locRightLegUpper;
  float locRightLegLower;
  float locRightFoot;
  float locLeftLegUpper;
  float locLeftLegLower;
  float locLeftFoot;
  float locGun;
};

/* 1506 */
struct AttIdleSettings
{
  float hipIdleAmount;
  float hipIdleSpeed;
  float idleCrouchFactor;
  float idleProneFactor;
  float adsIdleLerpStartTime;
  float adsIdleLerpTime;
};

/* 1507 */
struct AttADSSettings
{
  float adsSpread;
  float adsAimPitch;
  float adsTransInTime;
  float adsTransOutTime;
  int adsReloadTransTime;
  float adsCrosshairInFrac;
  float adsCrosshairOutFrac;
  float adsZoomFov;
  float adsZoomInFrac;
  float adsZoomOutFrac;
  float adsFovLerpTime;
  float adsBobFactor;
  float adsViewBobMult;
  float adsFireRateScale;
  float adsDamageRangeScale;
  float adsFireAnimFrac;
};

/* 1508 */
struct AttScopeDriftSettings
{
  float fScopeDriftDelay;
  float fScopeDriftLerpInTime;
  float fScopeDriftSteadyTime;
  float fScopeDriftLerpOutTime;
  float fScopeDriftSteadyFactor;
  float fScopeDriftUnsteadyFactor;
};

/* 1509 */
struct AttHipSpread
{
  float hipSpreadStandMin;
  float hipSpreadDuckedMin;
  float hipSpreadProneMin;
  float hipSpreadMax;
  float hipSpreadDuckedMax;
  float hipSpreadProneMax;
  float hipSpreadFireAdd;
  float hipSpreadTurnAdd;
  float hipSpreadMoveAdd;
  float hipSpreadDecayRate;
  float hipSpreadDuckedDecay;
  float hipSpreadProneDecay;
};

/* 1510 */
struct AttGunKick
{
  int hipGunKickReducedKickBullets;
  float hipGunKickReducedKickPercent;
  float hipGunKickPitchMin;
  float hipGunKickPitchMax;
  float hipGunKickYawMin;
  float hipGunKickYawMax;
  float hipGunKickMagMin;
  float hipGunKickAccel;
  float hipGunKickSpeedMax;
  float hipGunKickSpeedDecay;
  float hipGunKickStaticDecay;
  int adsGunKickReducedKickBullets;
  float adsGunKickReducedKickPercent;
  float adsGunKickPitchMin;
  float adsGunKickPitchMax;
  float adsGunKickYawMin;
  float adsGunKickYawMax;
  float adsGunKickMagMin;
  float adsGunKickAccel;
  float adsGunKickSpeedMax;
  float adsGunKickSpeedDecay;
  float adsGunKickStaticDecay;
};

/* 1511 */
struct AttViewKick
{
  float hipViewKickPitchMin;
  float hipViewKickPitchMax;
  float hipViewKickYawMin;
  float hipViewKickYawMax;
  float hipViewKickMagMin;
  float hipViewKickCenterSpeed;
  float adsViewKickPitchMin;
  float adsViewKickPitchMax;
  float adsViewKickYawMin;
  float adsViewKickYawMax;
  float adsViewKickMagMin;
  float adsViewKickCenterSpeed;
};

/* 1512 */
struct __declspec(align(8)) ADSOverlay
{
  Material *shader;
  Material *shaderLowRes;
  Material *shaderEMP;
  Material *shaderEMPLowRes;
  weapOverlayReticle_t reticle;
  float width;
  float height;
  float widthSplitscreen;
  float heightSplitscreen;
};

/* 1513 */
struct __declspec(align(8)) AttADSOverlay
{
  ADSOverlay overlay;
  bool hybridToggle;
  bool thermalScope;
  bool thermalToggle;
  bool outlineEnemies;
};

/* 1514 */
struct __declspec(align(8)) AttUI
{
  Material *dpadIcon;
  Material *ammoCounterIcon;
  weaponIconRatioType_t dpadIconRatio;
  weaponIconRatioType_t ammoCounterIconRatio;
  ammoCounterClipType_t ammoCounterClip;
};

/* 1515 */
struct AttRumbles
{
  const char *fireRumble;
  const char *meleeImpactRumble;
};

/* 1516 */
struct AttProjectile
{
  int explosionRadius;
  int explosionInnerDamage;
  int explosionOuterDamage;
  float damageConeAngle;
  int projectileSpeed;
  int projectileSpeedUp;
  int projectileActivateDist;
  float projectileLifetime;
  const char *projectileName;
  XModel *projectileModel;
  weapProjExposion_t projExplosionType;
  FxEffectDef *projExplosionEffect;
  bool projExplosionEffectForceNormalUp;
  snd_alias_list_t *projExplosionSound;
  FxEffectDef *projDudEffect;
  snd_alias_list_t *projDudSound;
  bool projImpactExplode;
  float destabilizationRateTime;
  float destabilizationCurvatureMax;
  int destabilizeDistance;
  FxEffectDef *projTrailEffect;
  int projIgnitionDelay;
  FxEffectDef *projIgnitionEffect;
  snd_alias_list_t *projIgnitionSound;
};

/* 1517 */
struct __declspec(align(4)) WeaponAttachment
{
  const char *szInternalName;
  const char *szDisplayName;
  AttachmentType type;
  weapType_t weaponType;
  weapClass_t weapClass;
  XModel **worldModels;
  XModel **viewModels;
  XModel **reticleViewModels;
  AttAmmoGeneral *ammogeneral;
  AttSight *sight;
  AttReload *reload;
  AttAddOns *addOns;
  AttGeneral *general;
  AttAimAssist *aimAssist;
  AttAmmunition *ammunition;
  AttDamage *damage;
  AttLocationDamage *locationDamage;
  AttIdleSettings *idleSettings;
  AttADSSettings *adsSettings;
  AttADSSettings *adsSettingsMain;
  AttScopeDriftSettings *scopeDriftSettings;
  AttScopeDriftSettings *scopeDriftSettingsMain;
  AttHipSpread *hipSpread;
  AttGunKick *gunKick;
  AttViewKick *viewKick;
  AttADSOverlay *adsOverlay;
  AttUI *ui;
  AttRumbles *rumbles;
  AttProjectile *projectile;
  float ammunitionScale;
  float damageScale;
  float damageScaleMin;
  float stateTimersScale;
  float fireTimersScale;
  float idleSettingsScale;
  float adsSettingsScale;
  float adsSettingsScaleMain;
  float hipSpreadScale;
  float gunKickScale;
  float viewKickScale;
  float viewCenterScale;
  int loadIndex;
  bool hideIronSightsWithThisAttachment;
  bool shareAmmoWithAlt;
};

/* 1518 */
struct XAUDIO2FX_REVERB_PARAMETERS
{
  float WetDryMix;
  unsigned int ReflectionsDelay;
  char ReverbDelay;
  char RearDelay;
  char PositionLeft;
  char PositionRight;
  char PositionMatrixLeft;
  char PositionMatrixRight;
  char EarlyDiffusion;
  char LateDiffusion;
  char LowEQGain;
  char LowEQCutoff;
  char HighEQGain;
  char HighEQCutoff;
  float RoomFilterFreq;
  float RoomFilterMain;
  float RoomFilterHF;
  float ReflectionsGain;
  float ReverbGain;
  float DecayTime;
  float Density;
  float RoomSize;
};

/* 1519 */
struct XAUDIO2FX_REVERB_I3DL2_PARAMETERS
{
  float WetDryMix;
  int Room;
  int RoomHF;
  float RoomRolloffFactor;
  float DecayTime;
  float DecayHFRatio;
  int Reflections;
  float ReflectionsDelay;
  int Reverb;
  float ReverbDelay;
  float Diffusion;
  float Density;
  float HFReference;
};

/* 1520 */
struct __unaligned __declspec(align(2)) tWAVEFORMATEX
{
  unsigned __int16 wFormatTag;
  unsigned __int16 nChannels;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
  unsigned __int16 wBitsPerSample;
  unsigned __int16 cbSize;
};

/* 1521 */
union $C7B45A521DD9425F10AF23801AD4919D
{
  unsigned __int16 wValidBitsPerSample;
  unsigned __int16 wSamplesPerBlock;
  unsigned __int16 wReserved;
};

/* 1522 */
struct WAVEFORMATEXTENSIBLE
{
  tWAVEFORMATEX Format;
  $C7B45A521DD9425F10AF23801AD4919D Samples;
  unsigned int dwChannelMask;
  _GUID SubFormat;
};

/* 1523 */
union UFormat
{
  WAVEFORMATEXTENSIBLE wfex;
};

/* 1524 */
struct RiffAudioParser
{
  unsigned int dataOffset;
  unsigned int seekOffset;
  unsigned int seekByteCount;
  char *p_memBuf;
  __int64 memBufByteCount;
  __int64 bufferReadPos;
  RiffAudioInfo riffInfo;
  UFormat ufmt;
};

/* 1525 */
struct $9704E9D6F23D6A5E526351953F37E26F
{
  unsigned __int32 weaponIdx : 8;
  unsigned __int32 weaponVariation : 6;
  unsigned __int32 weaponScopes : 3;
  unsigned __int32 weaponUnderBarrels : 2;
  unsigned __int32 weaponOthers : 7;
  unsigned __int32 scopeVariation : 6;
};

/* 1526 */
union Weapon
{
  $9704E9D6F23D6A5E526351953F37E26F __s0;
  unsigned int data;
};

/* 1527 */
struct ActionSlotParam_SpecifyWeapon
{
  Weapon weapon;
};

/* 1528 */
struct ActionSlotParam
{
  ActionSlotParam_SpecifyWeapon specifyWeapon;
};

/* 1529 */
struct __declspec(align(8)) TempPriority
{
  void *threadHandle;
  int oldPriority;
};

/* 1530 */
struct FastCriticalSection
{
  volatile int readCount;
  volatile int writeCount;
  TempPriority tempPriority;
};

/* 1531 */
struct SlideState
{
  int flags;
  int noFricTime;
};

/* 1532 */
union OmnvarValue
{
  bool enabled;
  int integer;
  unsigned int time;
  float value;
  unsigned int ncsString;
};

/* 1533 */
struct OmnvarData
{
  unsigned int timeModified;
  OmnvarValue current;
};

/* 1534 */
struct __declspec(align(8)) OmnvarDef
{
  const char *name;
  char flags;
  OmnvarType type;
  OmnvarValue initial;
  const char *ncsString;
  int offset;
  int numbits;
  int minvalue;
  int maxvalue;
  int row;
};

/* 1535 */
struct SprintState_s
{
  int sprintButtonUpRequired;
  int sprintDelay;
  int lastSprintStart;
  int lastSprintEnd;
  int sprintStartMaxLength;
};

/* 1536 */
struct DObjSkelMat
{
  float axis[3][4];
  float origin[4];
};

/* 1537 */
struct PlayerVehicleState
{
  int entity;
  int flags;
  int targetEntity;
  float origin[3];
  float angles[3];
  float velocity[3];
  float angVelocity[3];
  float tilt[2];
  float tiltVelocity[2];
  float gunAngles[2];
  unsigned int splineId;
  unsigned int splineNodeIndex;
  float splineLambda;
  float corridorSpeeds[2];
};

/* 1538 */
struct EntityEvent
{
  int eventType;
  int eventParm;
};

/* 1539 */
struct playerEvents_t
{
  int eventSequence;
  EntityEvent events[4];
  int oldEventSequence;
  int timeADSCameUp;
};

/* 1540 */
struct PlayerActiveWeaponState
{
  int weapAnim;
  int weaponTime;
  int weaponDelay;
  int weaponRestrictKickTime;
  int weaponState;
  int weapHandFlags;
  unsigned int weaponShotCount;
};

/* 1541 */
struct __declspec(align(4)) PlayerEquippedWeaponState
{
  bool usedBefore;
  bool dualWielding;
  bool inAltMode;
  bool needsRechamber[2];
  int zoomLevelIndex;
  bool thermalEnabled;
  bool hybridScope;
};

/* 1542 */
struct __declspec(align(8)) GlobalAmmo
{
  unsigned __int64 ammoType;
  int ammoCount;
};

/* 1543 */
struct ClipAmmo
{
  unsigned __int64 clipIndex;
  int ammoCount[2];
};

/* 1544 */
struct PlayerWeaponAnimArrays
{
  XAnimParts *normalAnimArray[124];
  XAnimParts *altAnimArray[124];
};

/* 1545 */
struct PlayerWeaponCommonState
{
  Weapon offHand;
  OffhandClass offhandPrimary;
  OffhandClass offhandSecondary;
  Weapon weapon;
  int weapFlags;
  float fWeaponPosFrac;
  float aimSpreadScale;
  int adsDelayTime;
  int spreadOverride;
  int spreadOverrideState;
  float fAimSpreadMovementScale;
  PlayerHandIndex lastWeaponHand;
  GlobalAmmo ammoNotInClip[15];
  ClipAmmo ammoInClip[15];
  int weapLockFlags;
  int weapLockedEntnum;
  float weapLockedPos[3];
  int weaponIdleTime;
  Weapon lastStowedWeapon;
  PlayerWeaponAnimArrays weaponAnimArrays;
};

/* 1546 */
struct $7FAD354E815F654511E1075F7F1C316F
{
  int clientNum;
  int invert;
};

/* 1547 */
union $FE4EDC35E626A2AFA89E51A683DCF352
{
  $7FAD354E815F654511E1075F7F1C316F byClient;
  int teamNum;
  int clientMask;
};

/* 1548 */
struct objective_t
{
  objectiveState_t state;
  float origin[3];
  int entNum;
  int shouldRotate;
  ObjectiveVisMode visMode;
  $FE4EDC35E626A2AFA89E51A683DCF352 visData;
  int icon;
};

/* 1549 */
struct $38A4C5C72B7CD27A063BA728E95FF065
{
  hudelem_s current[30];
  hudelem_s archival[15];
};

/* 1550 */
struct ClientOutlineData
{
  unsigned int bits[4];
};

/* 1551 */
struct $BEFE9800A1314C6B12F8C3CE18A08083
{
  unsigned __int32 iHeadIcon : 4;
  unsigned __int32 iHeadIconTeam : 2;
  unsigned __int32 hudOutlineInfo : 5;
  unsigned __int32 padding : 21;
};

/* 1552 */
union HudData
{
  $BEFE9800A1314C6B12F8C3CE18A08083 __s0;
  unsigned int data;
};

/* 1553 */
struct playerState_s
{
  int commandTime;
  int pm_type;
  int pm_time;
  int pm_flags;
  int otherFlags;
  int linkFlags;
  int bobCycle;
  float origin[3];
  float velocity[3];
  int grenadeTimeLeft;
  int throwbackGrenadeOwner;
  int throwbackGrenadeTimeLeft;
  Weapon throwbackWeapon;
  int movingPlatformEntity;
  int remoteEyesEnt;
  int remoteEyesTagname;
  int remoteControlEnt;
  int remoteTurretEnt;
  int foliageSoundTime;
  int gravity;
  int speed;
  float delta_angles[3];
  int groundEntityNum;
  float vLadderVec[3];
  int jumpTime;
  float jumpOriginZ;
  int legsTimer;
  int legsAnim;
  int torsoTimer;
  int torsoAnim;
  int animMoveType;
  int damageTimer;
  int damageDuration;
  int flinch;
  int movementDir;
  int turnStartTime;
  int turnDirection;
  int turnRemaining;
  int corpseIndex;
  PlayerVehicleState vehicleState;
  int eFlags;
  playerEvents_t pe;
  int unpredictableEventSequence;
  int unpredictableEventSequenceOld;
  EntityEvent unpredictableEvents[4];
  int clientNum;
  int viewmodelIndex;
  float viewangles[3];
  int viewHeightTarget;
  float viewHeightCurrent;
  int viewHeightLerpTime;
  int viewHeightLerpTarget;
  int viewHeightLerpDown;
  float viewAngleClampBase[2];
  float viewAngleClampRange[2];
  int damageEvent;
  int damageYaw;
  int damagePitch;
  int damageCount;
  int damageFlags;
  int stats[4];
  float proneDirection;
  float proneDirectionPitch;
  float proneTorsoPitch;
  ViewLockTypes viewlocked;
  int viewlocked_entNum;
  float linkAngles[3];
  float linkWeaponAngles[3];
  int linkWeaponEnt;
  int loopSound;
  int groundRefEnt;
  int cursorHint;
  unsigned int cursorHintString;
  int cursorHintEntIndex;
  int cursorHintDualWield;
  int iCompassPlayerInfo;
  int radarEnabled;
  int radarBlocked;
  int radarMode;
  int radarStrength;
  int radarShowEnemyDirection;
  int sightedEnemyPlayersMask;
  int locationSelectionInfo;
  SprintState_s sprintState;
  float holdBreathScale;
  int holdBreathTimer;
  float moveSpeedScaleMultiplier;
  float grenadeCookScale;
  MantleState mantleState;
  SlideState slideState;
  float leanf;
  PlayerActiveWeaponState weapState[2];
  Weapon weaponsEquipped[15];
  PlayerEquippedWeaponState weapEquippedData[15];
  PlayerWeaponCommonState weapCommon;
  int meleeChargeDist;
  int meleeChargeTime;
  int meleeChargeEnt;
  int meleeServerResult;
  unsigned int airburstMarkDistance;
  unsigned int perks[2];
  unsigned int perkSlots[9];
  ActionSlotType actionSlotType[4];
  ActionSlotParam actionSlotParam[4];
  int weaponHudIconOverrides[6];
  int shellshockIndex;
  int shellshockTime;
  int shellshockDuration;
  float viewKickScale;
  float dofNearStart;
  float dofNearEnd;
  float dofFarStart;
  float dofFarEnd;
  float dofNearBlur;
  float dofFarBlur;
  float dofViewmodelStart;
  float dofViewmodelEnd;
  objective_t objective[32];
  int deltaTime;
  int killCamEntity;
  int killCamLookAtEntity;
  int killCamClientNum;
  $38A4C5C72B7CD27A063BA728E95FF065 hud;
  OmnvarData rxvOmnvars[48];
  unsigned int partBits[6];
  int recoilScale;
  int stunTime;
  int clothType;
  ClientOutlineData outlineData;
  HudData hudData;
};

/* 1554 */
struct TraceData
{
  bool getPenetration;
  bool removePitchAndRollRotations;
  bool ignoreWorld;
};

/* 1555 */
struct StateTimers
{
  int iFireDelay;
  int iMeleeDelay;
  int meleeChargeDelay;
  int iDetonateDelay;
  int iRechamberTime;
  int rechamberTimeOneHanded;
  int iRechamberBoltTime;
  int iHoldFireTime;
  int iHoldPrimeTime;
  int iDetonateTime;
  int iMeleeTime;
  int meleeChargeTime;
  int iReloadTime;
  int reloadShowRocketTime;
  int iReloadEmptyTime;
  int iReloadAddTime;
  int iReloadEmptyAddTime;
  int iReloadStartTime;
  int iReloadStartAddTime;
  int iReloadEndTime;
  int iDropTime;
  int iRaiseTime;
  int iAltDropTime;
  int quickDropTime;
  int quickRaiseTime;
  int iBreachRaiseTime;
  int iEmptyRaiseTime;
  int iEmptyDropTime;
  int sprintInTime;
  int sprintLoopTime;
  int sprintOutTime;
  int stunnedTimeBegin;
  int stunnedTimeLoop;
  int stunnedTimeEnd;
  int nightVisionWearTime;
  int nightVisionWearTimeFadeOutEnd;
  int nightVisionWearTimePowerUp;
  int nightVisionRemoveTime;
  int nightVisionRemoveTimePowerDown;
  int nightVisionRemoveTimeFadeInStart;
  int fuseTime;
  int aiFuseTime;
  int primeTime;
  bool bHoldFullPrime;
  int blastFrontTime;
  int blastRightTime;
  int blastBackTime;
  int blastLeftTime;
  int slideInTime;
  int slideLoopTime;
  int slideOutTime;
};

/* 1556 */
struct WeaponDef
{
  const char *szOverlayName;
  XModel **gunXModel;
  XModel *handXModel;
  XModel *camoWorldModel;
  XModel *camoViewModel;
  Material *camoWorldModelMaterialOverride;
  Material *camoViewModelMaterialOverride;
  Material **camoMaterialTarget;
  XAnimParts **szXAnimsRightHanded;
  XAnimParts **szXAnimsLeftHanded;
  const char *szModeName;
  scr_string_t *notetrackSoundMapKeys;
  scr_string_t *notetrackSoundMapValues;
  scr_string_t *notetrackRumbleMapKeys;
  scr_string_t *notetrackRumbleMapValues;
  scr_string_t *notetrackFXMapKeys;
  FxEffectDef **notetrackFXMapValues;
  scr_string_t *notetrackFXMapTagValues;
  int playerAnimType;
  weapType_t weapType;
  weapClass_t weapClass;
  PenetrateType penetrateType;
  weapInventoryType_t inventoryType;
  weapFireType_t fireType;
  float burstFireCooldown;
  OffhandClass offhandClass;
  weapStance_t stance;
  char rattleSoundType;
  FxEffectDef *viewFlashEffect;
  FxEffectDef *worldFlashEffect;
  FxEffectDef *viewFlashADSEffect;
  snd_alias_list_t *pickupSound;
  snd_alias_list_t *pickupSoundPlayer;
  snd_alias_list_t *ammoPickupSound;
  snd_alias_list_t *ammoPickupSoundPlayer;
  snd_alias_list_t *projectileSound;
  snd_alias_list_t *pullbackSound;
  snd_alias_list_t *pullbackSoundPlayer;
  snd_alias_list_t *fireSound;
  snd_alias_list_t *fireSoundPlayer;
  snd_alias_list_t *fireSoundPlayerAkimbo;
  snd_alias_list_t *fireLoopSound;
  snd_alias_list_t *fireLoopSoundPlayer;
  snd_alias_list_t *fireStopSound;
  snd_alias_list_t *fireStopSoundPlayer;
  snd_alias_list_t *fireLastSound;
  snd_alias_list_t *fireLastSoundPlayer;
  snd_alias_list_t *emptyFireSound;
  snd_alias_list_t *emptyFireSoundPlayer;
  snd_alias_list_t *meleeSwipeSound;
  snd_alias_list_t *meleeSwipeSoundPlayer;
  snd_alias_list_t *meleeHitSound;
  snd_alias_list_t *meleeMissSound;
  snd_alias_list_t *rechamberSound;
  snd_alias_list_t *rechamberSoundPlayer;
  snd_alias_list_t *reloadSound;
  snd_alias_list_t *reloadSoundPlayer;
  snd_alias_list_t *reloadEmptySound;
  snd_alias_list_t *reloadEmptySoundPlayer;
  snd_alias_list_t *reloadStartSound;
  snd_alias_list_t *reloadStartSoundPlayer;
  snd_alias_list_t *reloadEndSound;
  snd_alias_list_t *reloadEndSoundPlayer;
  snd_alias_list_t *detonateSound;
  snd_alias_list_t *detonateSoundPlayer;
  snd_alias_list_t *nightVisionWearSound;
  snd_alias_list_t *nightVisionWearSoundPlayer;
  snd_alias_list_t *nightVisionRemoveSound;
  snd_alias_list_t *nightVisionRemoveSoundPlayer;
  snd_alias_list_t *altSwitchSound;
  snd_alias_list_t *altSwitchSoundPlayer;
  snd_alias_list_t *raiseSound;
  snd_alias_list_t *raiseSoundPlayer;
  snd_alias_list_t *firstRaiseSound;
  snd_alias_list_t *firstRaiseSoundPlayer;
  snd_alias_list_t *putawaySound;
  snd_alias_list_t *putawaySoundPlayer;
  snd_alias_list_t *scanSound;
  snd_alias_list_t *changeVariableZoomSound;
  snd_alias_list_t **bounceSound;
  snd_alias_list_t **rollingSound;
  FxEffectDef *viewShellEjectEffect;
  FxEffectDef *worldShellEjectEffect;
  FxEffectDef *viewLastShotEjectEffect;
  FxEffectDef *worldLastShotEjectEffect;
  FxEffectDef *viewMagEjectEffect;
  Material *reticleCenter;
  Material *reticleSide;
  int iReticleCenterSize;
  int iReticleSideSize;
  int iReticleMinOfs;
  activeReticleType_t activeReticleType;
  float vStandMove[3];
  float vStandRot[3];
  float strafeMove[3];
  float strafeRot[3];
  float vDuckedOfs[3];
  float vDuckedMove[3];
  float vDuckedRot[3];
  float vProneOfs[3];
  float vProneMove[3];
  float vProneRot[3];
  float fPosMoveRate;
  float fPosProneMoveRate;
  float fStandMoveMinSpeed;
  float fDuckedMoveMinSpeed;
  float fProneMoveMinSpeed;
  float fPosRotRate;
  float fPosProneRotRate;
  float fStandRotMinSpeed;
  float fDuckedRotMinSpeed;
  float fProneRotMinSpeed;
  XModel **worldModel;
  XModel *worldClipModel;
  XModel *rocketModel;
  XModel *knifeModel;
  XModel *worldKnifeModel;
  Material *hudIcon;
  weaponIconRatioType_t hudIconRatio;
  Material *pickupIcon;
  weaponIconRatioType_t pickupIconRatio;
  Material *ammoCounterIcon;
  weaponIconRatioType_t ammoCounterIconRatio;
  ammoCounterClipType_t ammoCounterClip;
  int iStartAmmo;
  const char *szAmmoName;
  int iAmmoIndex;
  const char *szClipName;
  int iClipIndex;
  int iMaxAmmo;
  int shotCount;
  const char *szSharedAmmoCapName;
  int iSharedAmmoCapIndex;
  int iSharedAmmoCap;
  int damage;
  int playerDamage;
  int iMeleeDamage;
  int iDamageType;
  StateTimers stateTimers;
  StateTimers akimboStateTimers;
  float autoAimRange;
  float aimAssistRange;
  float aimAssistRangeAds;
  float aimPadding;
  float enemyCrosshairRange;
  float moveSpeedScale;
  float adsMoveSpeedScale;
  float sprintDurationScale;
  float fAdsZoomInFrac;
  float fAdsZoomOutFrac;
  ADSOverlay overlay;
  WeapOverlayInteface_t overlayInterface;
  float fAdsBobFactor;
  float fAdsViewBobMult;
  float fHipSpreadStandMin;
  float fHipSpreadDuckedMin;
  float fHipSpreadProneMin;
  float hipSpreadStandMax;
  float hipSpreadDuckedMax;
  float hipSpreadProneMax;
  float fHipSpreadDecayRate;
  float fHipSpreadFireAdd;
  float fHipSpreadTurnAdd;
  float fHipSpreadMoveAdd;
  float fHipSpreadDuckedDecay;
  float fHipSpreadProneDecay;
  float fHipReticleSidePos;
  float fAdsIdleAmount;
  float fHipIdleAmount;
  float adsIdleSpeed;
  float hipIdleSpeed;
  float fIdleCrouchFactor;
  float fIdleProneFactor;
  float fGunMaxPitch;
  float fGunMaxYaw;
  float adsIdleLerpStartTime;
  float adsIdleLerpTime;
  float swayMaxAngleSteadyAim;
  float swayMaxAngle;
  float swayLerpSpeed;
  float swayPitchScale;
  float swayYawScale;
  float swayHorizScale;
  float swayVertScale;
  float swayShellShockScale;
  float adsSwayMaxAngle;
  float adsSwayLerpSpeed;
  float adsSwayPitchScale;
  float adsSwayYawScale;
  float adsSwayHorizScale;
  float adsSwayVertScale;
  float adsFireRateScale;
  float adsDamageRangeScale;
  float adsFireAnimFrac;
  PhysCollmap *physCollmap;
  float dualWieldViewModelOffset;
  float fScopeDriftDelay;
  float fScopeDriftLerpInTime;
  float fScopeDriftSteadyTime;
  float fScopeDriftLerpOutTime;
  float fScopeDriftSteadyFactor;
  float fScopeDriftUnsteadyFactor;
  weaponIconRatioType_t killIconRatio;
  int iReloadAmmoAdd;
  int iReloadStartAdd;
  int ammoDropStockMin;
  int ammoDropClipPercentMin;
  int ammoDropClipPercentMax;
  int iExplosionRadius;
  int iExplosionRadiusMin;
  int iExplosionInnerDamage;
  int iExplosionOuterDamage;
  float damageConeAngle;
  float bulletExplDmgMult;
  float bulletExplRadiusMult;
  int iProjectileSpeed;
  int iProjectileSpeedUp;
  int iProjectileSpeedForward;
  int iProjectileActivateDist;
  float projLifetime;
  float timeToAccelerate;
  float projectileCurvature;
  const char *projectileName;
  XModel *projectileModel;
  weapProjExposion_t projExplosion;
  FxEffectDef *projExplosionEffect;
  FxEffectDef *projDudEffect;
  snd_alias_list_t *projExplosionSound;
  snd_alias_list_t *projDudSound;
  WeapStickinessType stickiness;
  float lowAmmoWarningThreshold;
  float ricochetChance;
  bool riotShieldEnableDamage;
  int riotShieldHealth;
  float riotShieldDamageMult;
  float *parallelBounce;
  float *perpendicularBounce;
  FxEffectDef *projTrailEffect;
  FxEffectDef *projBeaconEffect;
  float vProjectileColor[3];
  guidedMissileType_t guidedMissileType;
  float maxSteeringAccel;
  int projIgnitionDelay;
  FxEffectDef *projIgnitionEffect;
  snd_alias_list_t *projIgnitionSound;
  float fAdsAimPitch;
  float fAdsCrosshairInFrac;
  float fAdsCrosshairOutFrac;
  bool adsShouldShowCrosshair;
  int adsGunKickReducedKickBullets;
  float adsGunKickReducedKickPercent;
  float fAdsGunKickPitchMin;
  float fAdsGunKickPitchMax;
  float fAdsGunKickYawMin;
  float fAdsGunKickYawMax;
  float fAdsGunKickMagMin;
  float fAdsGunKickAccel;
  float fAdsGunKickSpeedMax;
  float fAdsGunKickSpeedDecay;
  float fAdsGunKickStaticDecay;
  float fAdsViewKickPitchMin;
  float fAdsViewKickPitchMax;
  float fAdsViewKickYawMin;
  float fAdsViewKickYawMax;
  float fAdsViewKickMagMin;
  float fAdsViewScatterMin;
  float fAdsViewScatterMax;
  float fAdsSpread;
  int hipGunKickReducedKickBullets;
  float hipGunKickReducedKickPercent;
  float fHipGunKickPitchMin;
  float fHipGunKickPitchMax;
  float fHipGunKickYawMin;
  float fHipGunKickYawMax;
  float fHipGunKickMagMin;
  float fHipGunKickAccel;
  float fHipGunKickSpeedMax;
  float fHipGunKickSpeedDecay;
  float fHipGunKickStaticDecay;
  float fHipViewKickPitchMin;
  float fHipViewKickPitchMax;
  float fHipViewKickYawMin;
  float fHipViewKickYawMax;
  float fHipViewKickMagMin;
  float fHipViewScatterMin;
  float fHipViewScatterMax;
  float fightDist;
  float maxDist;
  const char *accuracyGraphName[2];
  float (*originalAccuracyGraphKnots[2])[2];
  unsigned __int16 originalAccuracyGraphKnotCount[2];
  int iPositionReloadTransTime;
  float leftArc;
  float rightArc;
  float topArc;
  float bottomArc;
  float accuracy;
  float aiSpread;
  float playerSpread;
  float minTurnSpeed[2];
  float maxTurnSpeed[2];
  float pitchConvergenceTime;
  float yawConvergenceTime;
  float suppressTime;
  float maxRange;
  float fAnimHorRotateInc;
  float fPlayerPositionDist;
  const char *szUseHintString;
  const char *dropHintString;
  unsigned int iUseHintStringIndex;
  unsigned int dropHintStringIndex;
  float horizViewJitter;
  float vertViewJitter;
  float scanSpeed;
  float scanAccel;
  int scanPauseTime;
  const char *szScript;
  float fOOPosAnimLength[2];
  int minDamage;
  int minPlayerDamage;
  float fMaxDamageRange;
  float fMinDamageRange;
  float destabilizationRateTime;
  float destabilizationCurvatureMax;
  int destabilizeDistance;
  float *locationDamageMultipliers;
  const char *fireRumble;
  const char *meleeImpactRumble;
  TracerDef *tracerType;
  bool turretADSEnabled;
  float turretADSTime;
  float turretFov;
  float turretFovADS;
  float turretScopeZoomRate;
  float turretScopeZoomMin;
  float turretScopeZoomMax;
  float turretOverheatUpRate;
  float turretOverheatDownRate;
  float turretOverheatPenalty;
  snd_alias_list_t *turretOverheatSound;
  FxEffectDef *turretOverheatEffect;
  const char *turretBarrelSpinRumble;
  float turretBarrelSpinSpeed;
  float turretBarrelSpinUpTime;
  float turretBarrelSpinDownTime;
  snd_alias_list_t *turretBarrelSpinMaxSnd;
  snd_alias_list_t *turretBarrelSpinUpSnd[4];
  snd_alias_list_t *turretBarrelSpinDownSnd[4];
  snd_alias_list_t *missileConeSoundAlias;
  snd_alias_list_t *missileConeSoundAliasAtBase;
  float missileConeSoundRadiusAtTop;
  float missileConeSoundRadiusAtBase;
  float missileConeSoundHeight;
  float missileConeSoundOriginOffset;
  float missileConeSoundVolumescaleAtCore;
  float missileConeSoundVolumescaleAtEdge;
  float missileConeSoundVolumescaleCoreSize;
  float missileConeSoundPitchAtTop;
  float missileConeSoundPitchAtBottom;
  float missileConeSoundPitchTopSize;
  float missileConeSoundPitchBottomSize;
  float missileConeSoundCrossfadeTopSize;
  float missileConeSoundCrossfadeBottomSize;
  scr_string_t knifeAttachTagOverride;
  bool knifeAlwaysAttached;
  bool meleeOverrideValues;
  float aim_automelee_lerp;
  float aim_automelee_range;
  float aim_automelee_region_height;
  float aim_automelee_region_width;
  float player_meleeHeight;
  float player_meleeRange;
  float player_meleeWidth;
  bool sharedAmmo;
  bool lockonSupported;
  bool requireLockonToFire;
  bool isAirburstWeapon;
  bool bigExplosion;
  bool noAdsWhenMagEmpty;
  bool avoidDropCleanup;
  bool inheritsPerks;
  bool crosshairColorChange;
  bool bRifleBullet;
  bool armorPiercing;
  bool bBoltAction;
  bool aimDownSight;
  bool canHoldBreath;
  bool meleeOnly;
  bool canVariableZoom;
  bool bRechamberWhileAds;
  bool bBulletExplosiveDamage;
  bool bCookOffHold;
  bool reticleSpin45;
  bool bClipOnly;
  bool noAmmoPickup;
  bool adsFireOnly;
  bool cancelAutoHolsterWhenEmpty;
  bool disableSwitchToWhenEmpty;
  bool suppressAmmoReserveDisplay;
  bool laserSightDuringNightvision;
  bool markableViewmodel;
  bool noDualWield;
  bool flipKillIcon;
  bool bNoPartialReload;
  bool bSegmentedReload;
  bool bMultipleReload;
  bool blocksProne;
  bool silenced;
  bool isRollingGrenade;
  bool projExplosionEffectForceNormalUp;
  bool projExplosionEffectInheritParentDirection;
  bool bProjImpactExplode;
  bool bProjTrajectoryEvents;
  bool bProjWhizByEnabled;
  bool stickToPlayers;
  bool stickToVehicles;
  bool stickToTurrets;
  bool thrownSideways;
  bool hasDetonator;
  bool disableFiring;
  bool timedDetonation;
  bool rotate;
  bool holdButtonToThrow;
  bool freezeMovementWhenFiring;
  bool thermalScope;
  bool thermalToggle;
  bool outlineEnemies;
  bool altModeSameWeapon;
  bool turretBarrelSpinEnabled;
  bool missileConeSoundEnabled;
  bool missileConeSoundPitchshiftEnabled;
  bool missileConeSoundCrossfadeEnabled;
  bool offhandHoldIsCancelable;
  bool doNotAllowAttachmentsToOverrideSpread;
  bool useFastReloadAnims;
  bool useScopeDrift;
  bool alwaysShatterGlassOnImpact;
  bool oldWeapon;
  scr_string_t stowTag;
  XModel *stowOffsetModel;
};

/* 1557 */
struct __declspec(align(8)) AnimOverrideEntry
{
  unsigned __int16 attachment1;
  unsigned __int16 attachment2;
  XAnimParts *overrideAnim;
  XAnimParts *altmodeAnim;
  unsigned int animTreeType;
  int animTime;
  int altTime;
};

/* 1558 */
struct __declspec(align(8)) SoundOverrideEntry
{
  unsigned __int16 attachment1;
  unsigned __int16 attachment2;
  snd_alias_list_t *overrideSound;
  snd_alias_list_t *altmodeSound;
  unsigned int soundType;
};

/* 1559 */
struct __declspec(align(8)) FXOverrideEntry
{
  unsigned __int16 attachment1;
  unsigned __int16 attachment2;
  FxEffectDef *overrideFX;
  FxEffectDef *altmodeFX;
  unsigned int fxType;
};

/* 1560 */
struct ReloadStateTimerEntry
{
  int attachment;
  int reloadAddTime;
  int reloadEmptyAddTime;
  int reloadStartAddTime;
};

/* 1561 */
struct NoteTrackToSoundEntry
{
  int attachment;
  scr_string_t *notetrackSoundMapKeys;
  scr_string_t *notetrackSoundMapValues;
};

/* 1562 */
struct WeaponCompleteDef
{
  const char *szInternalName;
  WeaponDef *weapDef;
  const char *szDisplayName;
  scr_string_t *hideTags;
  WeaponAttachment **scopes;
  WeaponAttachment **underBarrels;
  WeaponAttachment **others;
  XAnimParts *const *szXAnims;
  unsigned int numAnimOverrides;
  AnimOverrideEntry *animOverrides;
  unsigned int numSoundOverrides;
  SoundOverrideEntry *soundOverrides;
  unsigned int numFXOverrides;
  FXOverrideEntry *fxOverrides;
  unsigned int numReloadStateTimerOverrides;
  ReloadStateTimerEntry *reloadOverrides;
  unsigned int numNotetrackOverrides;
  NoteTrackToSoundEntry *notetrackOverrides;
  float fAdsZoomFov;
  int iAdsTransInTime;
  int iAdsTransOutTime;
  int iClipSize;
  ImpactType impactType;
  int iFireTime;
  int iFireTimeAkimbo;
  weaponIconRatioType_t dpadIconRatio;
  float penetrateMultiplier;
  float fAdsViewKickCenterSpeed;
  float fHipViewKickCenterSpeed;
  const char *szAltWeaponName;
  int altWeapon;
  int iAltRaiseTime;
  int iAltRaiseTimeAkimbo;
  Material *killIcon;
  Material *dpadIcon;
  int fireAnimLength;
  int fireAnimLengthAkimbo;
  int iFirstRaiseTime;
  int iFirstRaiseTimeAkimbo;
  int ammoDropStockMax;
  float adsDofStart;
  float adsDofEnd;
  unsigned __int16 accuracyGraphKnotCount[2];
  float (*accuracyGraphKnots[2])[2];
  bool motionTracker;
  bool enhanced;
  bool dpadIconShowsAmmo;
  const char *szAdsrBaseSetting;
};

/* 1563 */
struct trajectory_t
{
  trType_t trType;
  int trTime;
  int trDuration;
  float trBase[3];
  float trDelta[3];
};

/* 1564 */
struct __declspec(align(2)) LerpEntityStateTurret
{
  float gunAngles[3];
  int lastBarrelRotChangeTime;
  unsigned __int16 lastBarrelRotChangeRate;
  unsigned __int16 lastHeatChangeLevel;
  int lastHeatChangeTime;
  bool isBarrelRotating;
  bool isOverheat;
  bool isHeatingUp;
};

/* 1565 */
struct LerpEntityStateLoopFx
{
  float cullDist;
  int period;
};

/* 1566 */
struct LerpEntityStatePrimaryLight
{
  char colorAndExp[4];
  float intensity;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
};

/* 1567 */
struct LerpEntityStatePlayer
{
  int movementDir;
  float lerpLean;
  float torsoPitch;
  float waistPitch;
  Weapon offhandWeapon;
  Weapon stowedWeapon;
  int lastSpawnTime;
};

/* 1568 */
struct LerpEntityStateAgentCorpse
{
  int modelIndex;
  int attachModels[3];
  int attachTags[3];
};

/* 1569 */
struct LerpEntityStateVehicle
{
  unsigned int indices;
  unsigned int flags;
  float bodyPitch;
  float bodyRoll;
  float steerYaw;
  float gunPitch;
  float gunYaw;
};

/* 1570 */
struct LerpEntityStatePlane
{
  int ownerNum;
  int enemyIcon;
  int friendIcon;
};

/* 1571 */
struct LerpEntityStateMissile
{
  int launchTime;
  MissileFlightMode flightMode;
  int flags;
};

/* 1572 */
struct LerpEntityStateSoundBlend
{
  float lerp;
};

/* 1573 */
struct LerpEntityStateBulletHit
{
  float start[3];
};

/* 1574 */
struct LerpEntityStateEarthquake
{
  float scale;
  float radius;
  int duration;
};

/* 1575 */
struct LerpEntityStateCustomExplode
{
  int startTime;
};

/* 1576 */
struct LerpEntityStateExplosion
{
  float innerRadius;
  float outerRadius;
  float magnitude;
};

/* 1577 */
struct LerpEntityStateExplosionJolt
{
  float innerRadius;
  float outerRadius;
  float impulse[3];
};

/* 1578 */
struct LerpEntityStatePhysicsJitter
{
  float innerRadius;
  float outerRadius;
  float minDisplacement;
  float maxDisplacement;
};

/* 1579 */
struct LerpEntityStatePhysicsImpactSnd
{
  int sndClass;
  float impactMomentum;
};

/* 1580 */
struct LerpEntityStateRadiusDamage
{
  float range;
  int damageMin;
  int damageMax;
};

/* 1581 */
struct LerpEntityStateScriptMover
{
  int entToTakeMarksFrom;
  int xModelIndex;
  int animIndex;
  int animTime;
};

/* 1582 */
struct LerpEntityStateAnonymous
{
  int data[7];
};

/* 1583 */
union LerpEntityStateTypeUnion
{
  LerpEntityStateTurret turret;
  LerpEntityStateLoopFx loopFx;
  LerpEntityStatePrimaryLight primaryLight;
  LerpEntityStatePlayer player;
  LerpEntityStateAgentCorpse agentCorpse;
  LerpEntityStateVehicle vehicle;
  LerpEntityStatePlane plane;
  LerpEntityStateMissile missile;
  LerpEntityStateSoundBlend soundBlend;
  LerpEntityStateBulletHit bulletHit;
  LerpEntityStateEarthquake earthquake;
  LerpEntityStateCustomExplode customExplode;
  LerpEntityStateExplosion explosion;
  LerpEntityStateExplosionJolt explosionJolt;
  LerpEntityStatePhysicsJitter physicsJitter;
  LerpEntityStatePhysicsImpactSnd physicsImpactSnd;
  LerpEntityStateRadiusDamage radiusDamage;
  LerpEntityStateScriptMover scriptMover;
  LerpEntityStateAnonymous anonymous;
};

/* 1584 */
struct LerpEntityState
{
  int eFlags;
  trajectory_t pos;
  trajectory_t apos;
  LerpEntityStateTypeUnion u;
};

/* 1585 */
struct StaticEntityStatePlayer
{
  int playerFlags;
};

/* 1586 */
struct StaticEntityStateVehicle
{
  int playerIndex;
};

/* 1587 */
struct StaticEntityStateTurret
{
  int isBeingCarried;
};

/* 1588 */
struct StaticEntityStateMover
{
  unsigned int scriptableIndex;
};

/* 1589 */
struct StaticEntityStateAgentCorpse
{
  Weapon stowedWeapon;
};

/* 1590 */
struct StaticEntityStateFX
{
  int killEffectDef;
};

/* 1591 */
struct StaticEntityStateAnonymous
{
  int data[1];
};

/* 1592 */
union StaticEntityStateTypeUnion
{
  StaticEntityStatePlayer player;
  StaticEntityStateVehicle vehicle;
  StaticEntityStateTurret turret;
  StaticEntityStateMover mover;
  StaticEntityStateAgentCorpse agentCorpse;
  StaticEntityStateFX fx;
  StaticEntityStateAnonymous anonymous;
};

/* 1593 */
union $E86BBCD7829813CBD189FC5DA0DA50CB
{
  int brushModel;
  int triggerModel;
  int xmodel;
  int primaryLight;
};

/* 1594 */
struct selectAnim_t
{
  unsigned __int32 usingAnimState : 1;
  unsigned __int32 padding : 31;
};

/* 1595 */
struct stateAnim_t
{
  unsigned __int32 usingAnimState : 1;
  unsigned __int32 animState : 7;
  unsigned __int32 animEntry : 5;
  unsigned __int32 animClass : 4;
  unsigned __int32 padding : 15;
};

/* 1596 */
struct bodyAnim_t
{
  unsigned __int32 usingAnimState : 1;
  unsigned __int32 packedTorsoAnim : 9;
  unsigned __int32 packedLegsAnim : 11;
  unsigned __int32 padding : 11;
};

/* 1597 */
union $4ABEBA009F5771CC0F89C24AA4777672
{
  selectAnim_t selectAnim;
  stateAnim_t stateAnim;
  bodyAnim_t bodyAnim;
  unsigned int animData;
};

/* 1598 */
struct animInfo_t
{
  int animTime;
  $4ABEBA009F5771CC0F89C24AA4777672 ___u1;
};

/* 1599 */
union $4A7D791A301CDEBBD9E43A9642D4463C
{
  int eventParm2;
  unsigned int hintString;
  int fxId;
};

/* 1600 */
union $234D26D1B5DDFE0BB202AC4847E2D0A5
{
  int hintType;
  int vehicleXModel;
  float animRate;
};

/* 1601 */
struct clientLinkInfo_t
{
  unsigned __int32 parentId : 11;
  unsigned __int32 boneIndex : 8;
  unsigned __int32 flags : 2;
  unsigned __int32 padding : 11;
};

/* 1602 */
struct entityState_s
{
  int number;
  int eType;
  LerpEntityState lerp;
  StaticEntityStateTypeUnion staticState;
  int time2;
  int otherEntityNum;
  int attackerEntityNum;
  int groundEntityNum;
  int loopSound;
  int surfType;
  $E86BBCD7829813CBD189FC5DA0DA50CB index;
  int clientNum;
  HudData hudData;
  int solid;
  unsigned int eventParm;
  int eventSequence;
  EntityEvent events[4];
  Weapon weapon;
  int inAltWeaponMode;
  animInfo_t animInfo;
  $4A7D791A301CDEBBD9E43A9642D4463C un1;
  $234D26D1B5DDFE0BB202AC4847E2D0A5 un2;
  clientLinkInfo_t clientLinkInfo;
  unsigned int partBits[6];
  int clientMask[1];
  unsigned int pad[1];
};

/* 1603 */
struct EntHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

/* 1604 */
struct entityShared_t
{
  char isLinked;
  char modelType;
  char svFlags;
  char isInUse;
  Bounds box;
  int contents;
  Bounds absBox;
  float currentOrigin[3];
  float currentAngles[3];
  EntHandle ownerNum;
  int eventTime;
};

/* 1605 */
struct usercmd_s
{
  int serverTime;
  unsigned int buttons;
  int angles[3];
  Weapon weapon;
  Weapon offHand;
  char forwardmove;
  char rightmove;
  unsigned __int16 airburstMarkDistance;
  unsigned __int16 meleeChargeEnt;
  char meleeChargeDist;
  char selectedLoc[2];
  char selectedLocAngle;
  char remoteControlAngles[2];
  char remoteControlMove[3];
  unsigned int sightedClientsMask;
  unsigned __int16 spawnTraceEntIndex;
  unsigned int sightedSpawnsMask;
  unsigned int partialSightedSpawnsMask;
};

/* 1606 */
struct playerTeamState_t
{
  int location;
};

/* 1607 */
struct rootMotionInfo_s
{
  int startTime;
  float startPosition[3];
  float yaw;
};

/* 1608 */
struct ClientCustomizationInfo
{
  unsigned int modelIndex[3];
};

/* 1609 */
struct clientState_s
{
  int clientIndex;
  team_t team;
  int modelindex;
  int dualWielding;
  int attachModelIndex[6];
  int attachTagIndex[6];
  char name[32];
  int rank;
  int prestige;
  int nameplateFriendlyIndex;
  int nameplateEnemyIndex;
  unsigned int perks[2];
  rootMotionInfo_s rootMotion;
  compressedAnimData_s compressedAnimData;
  int meleeChargeEnt;
  int voiceConnectivityBits;
  char clanAbbrev[8];
  unsigned int playerCardPatch;
  unsigned int playerCardBackground;
  unsigned int use_elite_clan_tag;
  char elite_clan_tag_text[8];
  int elite_clan_level;
  unsigned int elite_clan_id_high;
  unsigned int elite_clan_id_low;
  unsigned int isPrivatePartyHost;
  unsigned int isMLGSpectator;
  ClientCustomizationInfo customization;
  int game_extrainfo;
};

/* 1610 */
struct ScoreInfo
{
  unsigned __int16 ping;
  char status;
  unsigned __int16 score;
  unsigned __int16 kills;
  unsigned __int16 deaths;
  unsigned __int16 assists;
  unsigned __int16 extrascore0;
  unsigned __int16 extrascore1;
  unsigned __int16 adrenaline;
};

/* 1611 */
struct clientSession_t
{
  sessionState_t sessionState;
  int forceSpectatorClient;
  int isInKillcam;
  int killCamEntity;
  int killCamLookAtEntity;
  int archiveTime;
  unsigned __int16 scriptPersId;
  clientConnected_t connected;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int localClient;
  char newnetname[32];
  int maxHealth;
  int enterTime;
  playerTeamState_t teamState;
  int voteCount;
  int teamVoteCount;
  float moveSpeedScaleMultiplier;
  int viewmodelIndex;
  int noSpectate;
  clientState_s cs;
  ScoreInfo scores;
  int psOffsetTime;
  int hasRadar;
  int isRadarBlocked;
  int radarStrength;
  int radarShowEnemyDirection;
  int radarMode;
  int sightedPlayers;
  int lastDeathTime;
  int weaponHudIconOverrides[6];
  unsigned int unusableEntFlags[64];
  float spectateDefaultPos[3];
  float spectateDefaultAngles[3];
  float mlgCameraPos[4][3];
  float mlgCameraAngles[4][3];
  team_t mlgSpectatingTeam;
  float clanWarsXPModifier;
  OmnvarData *omnvars;
};

/* 1612 */
struct iw::padding<4>
{
  char buf[4];
};

/* 1613 */
struct AntilagAimHistoryFrame
{
  float offset[3];
  float angleOffset;
};

/* 1614 */
struct viewClamp
{
  float start[2];
  float current[2];
  float goal[2];
};

/* 1615 */
struct viewClampState
{
  viewClamp min;
  viewClamp max;
  float accelTime;
  float decelTime;
  float totalTime;
  float startTime;
};

/* 1661 */
struct __declspec(align(4)) item_ent_t
{
  int ammoCount;
  int clipAmmoCount[2];
  Weapon weapon;
  bool dualWieldItem;
};

/* 1662 */
struct spawner_ent_t
{
  int team;
  int timestamp;
  int index;
};

/* 1663 */
struct __declspec(align(4)) trigger_ent_t
{
  int threshold;
  int accumulate;
  int timestamp;
  int singleUserEntIndex;
  int damage;
  bool requireLookAt;
};

/* 1664 */
struct mover_positions_t
{
  float decelTime;
  float speed;
  float midTime;
  float pos1[3];
  float pos2[3];
  float pos3[3];
};

/* 1665 */
struct mover_slidedata_t
{
  Bounds bounds;
  float velocity[3];
};

/* 1666 */
union $B399FA784A70B9BA710B8C9285776A11
{
  mover_positions_t pos;
  mover_slidedata_t slide;
};

/* 1667 */
struct mover_ent_t
{
  $B399FA784A70B9BA710B8C9285776A11 ___u0;
  mover_positions_t angle;
};

/* 1668 */
struct corpse_ent_t
{
  int deathAnimStartTime;
};

/* 1669 */
struct missile_fields_grenade
{
  float predictLandPos[3];
  int predictLandTime;
  float wobbleCycle;
  float curve;
};

/* 1670 */
struct missile_fields_nonGrenade
{
  float curvature[3];
  float targetEntOffset[3];
  float targetPos[3];
  float launchOrigin[3];
  MissileStage stage;
};

/* 1671 */
union $9DD77D6BFDE55B92F8ABF1B369E7C10F
{
  missile_fields_grenade grenade;
  missile_fields_nonGrenade nonGrenade;
};

/* 1672 */
struct missile_ent_t
{
  int timestamp;
  float time;
  int timeOfBirth;
  float travelDist;
  float surfaceNormal[3];
  team_t team;
  int flags;
  int antilagTimeOffset;
  $9DD77D6BFDE55B92F8ABF1B369E7C10F ___u8;
};

/* 1673 */
struct blend_ent_t
{
  float pos[3];
  float vel[3];
  float viewQuat[4];
  bool changed;
  float accelTime;
  float decelTime;
  float startTime;
  float totalTime;
};

/* 1675 */
union $094B22526126F72CF3FB058D886C1346
{
  item_ent_t item[2];
  spawner_ent_t spawner;
  trigger_ent_t trigger;
  mover_ent_t mover;
  corpse_ent_t corpse;
  missile_ent_t missile;
  blend_ent_t blend;
};

/* 1616 */
struct gentity_s
{
  entityState_s s;
  entityShared_t r;
  gclient_s *client;
  Turret *turret;
  gagent_s *agent;
  sentient_s *sentient;
  Vehicle *vehicle;
  __int64 physObjId;
  unsigned __int16 model;
  char physicsObject;
  char takedamage;
  char active;
  char handler;
  char team;
  bool freeAfterEvent;
  unsigned __int16 disconnectedLinks;
  __int16 padding_short2;
  scr_string_t classname;
  scr_string_t script_classname;
  scr_string_t script_linkName;
  scr_string_t target;
  scr_string_t targetname;
  unsigned int attachIgnoreCollision;
  int spawnflags;
  int flags;
  int eventTime;
  int clipmask;
  int processedFrame;
  EntHandle parent;
  EntHandle trackMovingPlatformEntity;
  int nextthink;
  int health;
  int maxHealth;
  $094B22526126F72CF3FB058D886C1346 ___u33;
  EntHandle missileTargetEnt;
  EntHandle remoteControlledOwner;
  int pad64_1;
  int padding_4[2];
  tagInfo_s *tagInfo;
  gentity_s *tagChildren;
  unsigned __int16 attachModelNames[19];
  __int16 padding_2;
  scr_string_t attachTagNames[19];
  int useCount;
  gentity_s *nextFree;
  int birthTime;
  int pad64_2;
};

/* 1617 */
struct __declspec(align(8)) gclient_s
{
  playerState_s ps;
  clientSession_t sess;
  int flags;
  int spectatorClient;
  int cycleSpectatorClient;
  int cycleSpectatorTime;
  int lastCmdTime;
  iw::padding<4> mpviewer_padding;
  int buttons;
  int oldbuttons;
  int latched_buttons;
  int buttonsSinceLastFrame;
  float oldOrigin[3];
  float fGunPitch;
  float fGunYaw;
  AntilagAimHistoryFrame antilagAimHistory[8];
  int damage_blood;
  int damage_stun;
  float damage_from[3];
  int damage_fromWorld;
  int accurateCount;
  int accuracy_shots;
  int accuracy_hits;
  int inactivityTime;
  int inactivityWarning;
  int lastVoiceTime;
  int switchTeamTime;
  float currentAimSpreadScale;
  float prevLinkedInvQuat[4];
  bool prevLinkAnglesSet;
  bool link_rotationMovesEyePos;
  bool link_doCollision;
  bool link_useTagAnglesForViewAngles;
  bool link_useBaseAnglesForViewClamp;
  float linkAnglesFrac;
  viewClampState link_viewClamp;
  gentity_s *persistantPowerup;
  int portalID;
  int dropWeaponTime;
  int sniperRifleFiredTime;
  float sniperRifleMuzzleYaw;
  int PCSpecialPickedUpCount;
  EntHandle useHoldEntity;
  int useHoldTime;
  int useButtonDone;
  int iLastCompassPlayerInfoEnt;
  int compassPingTime;
  int damageTime;
  float v_dmg_roll;
  float v_dmg_pitch;
  float baseAngles[3];
  float baseOrigin[3];
  float swayViewAngles[3];
  float swayOffset[3];
  float swayAngles[3];
  float recoilAngles[3];
  float recoilSpeed[3];
  float fLastIdleFactor;
  int lastServerTime;
  Weapon lastWeapon;
  unsigned __int32 lastWeaponAltStatus : 1;
  unsigned __int32 previouslyFiring : 1;
  unsigned __int32 previouslyFiringLeftHand : 1;
  unsigned __int32 previouslyUsingNightVision : 1;
  unsigned __int32 previouslySprinting : 1;
  unsigned __int32 previouslySprintSliding : 1;
  int visionDuration[7];
  char visionName[7][64];
  int contactEntity;
  int lastStand;
  int lastStandTime;
  int hudElemLastAssignedSoundID;
  float lockedTargetOffset[3];
  scr_string_t attachShieldTagName;
  hintType_t hintForcedType;
  unsigned int hintForcedString;
  float grenadeThrowSpeedScale;
  float grenadeThrowSpeedUpScale;
};

/* 1618 */
struct __declspec(align(4)) Turret
{
  bool inuse;
  int flags;
  int fireTime;
  float arcmin[2];
  float arcmax[2];
  float dropPitch;
  int stance;
  int prevStance;
  int fireSndDelay;
  float userOrigin[3];
  float playerSpread;
  int state;
  EntHandle target;
  float targetOffset[3];
  EntHandle manualTarget;
  float manualTargetOffset[3];
  int targetTime;
  int stateChangeTime;
  int modeChangeTime;
  float maxRangeSquared;
  int prevTargetIndex;
  team_t eTeam;
  int convergenceTime[2];
  float convergenceHeightPercent;
  float targetPos[3];
  float missOffsetNormalized[3];
  float scanSpeed;
  float scanDecelYaw;
  int scanPauseTime;
  bool triggerDown;
  float heatLevel;
  int heatPenaltyEndTime;
  float barrelRollRate;
  int autoRotationStopDelay;
  int lastAutoRotationRequestTime;
  unsigned __int16 fireLoopSnd;
  unsigned __int16 scanLoopSnd;
  unsigned __int16 stopSnd;
};

/* 1619 */
struct agentState_s
{
  int entityNum;
  team_t team;
  int modelindex;
  int dualWielding;
  int attachModelIndex[6];
  int attachTagIndex[6];
  int nameplateFriendlyIndex;
  int nameplateEnemyIndex;
  unsigned int perks[2];
  rootMotionInfo_s rootMotion;
  compressedAnimData_s compressedAnimData;
  int meleeChargeEnt;
  int name;
};

/* 1620 */
struct __declspec(align(8)) gagent_s
{
  playerState_s playerState;
  agentState_s agentState;
  usercmd_s cmd;
  usercmd_s oldcmd;
  float lockedTargetOffset[3];
  float baseAngles[3];
  float baseOrigin[3];
  float swayViewAngles[3];
  float swayOffset[3];
  float swayAngles[3];
  float recoilAngles[3];
  float recoilSpeed[3];
  float lastIdleFactor;
  float currentAimSpreadScale;
  float gunPitch;
  float gunYaw;
  float damagePitch;
  float damageRoll;
  int damageTime;
  int damageBlood;
  int damageStun;
  float damageFrom[3];
  int damageFromWorld;
  int maxHealth;
  int lastDeathTime;
  int lastServerTime;
  int flags;
  char agentGuid[7];
  AntilagAimHistoryFrame antilagAimHistory[8];
  scr_string_t attachShieldTagName;
  int buttons;
  int oldbuttons;
  int latched_buttons;
  EntHandle useHoldEntity;
  int useHoldTime;
  int useButtonDone;
  unsigned __int16 useEntsEnabled[2];
  Weapon lastWeapon;
  unsigned __int32 lastWeaponAltStatus : 1;
  unsigned __int32 previouslyFiring : 1;
  unsigned __int32 previouslyFiringLeftHand : 1;
  unsigned __int32 previouslyUsingNightVision : 1;
  unsigned __int32 previouslySprinting : 1;
  unsigned __int32 previouslySprintSliding : 1;
  float grenadeThrowSpeedScale;
  float grenadeThrowSpeedUpScale;
};

/* 1621 */
struct __declspec(align(8)) sentient_s
{
  gentity_s *ent;
  ai_common_t *ai;
  team_t eTeam;
  int iThreatBias;
  int iThreatBiasGroupIndex;
  bool bIgnoreMe;
  bool bIgnoreAll;
  bool originChanged;
  float oldOrigin[3];
  float maxVisibleDist;
  float surprisedByMeDistSq;
  int iEnemyNotifyTime;
  int attackerCount;
  EntHandle lastAttacker;
  EntHandle syncedMeleeEnt;
  EntHandle targetEnt;
  EntHandle scriptTargetEnt;
  float entityTargetThreat;
  int meleeAttackerSpot[4];
  float attackerAccuracy;
  bool ignoreRandomBulletDamage;
  bool doDamageToAll;
  bool turretInvulnerability;
  bool scriptTargetHasTagEye;
  pathnode_t *pClaimedNode;
  pathnode_t *pPrevClaimedNode;
  pathnode_t *pNearestNode;
  char bNearestNodeValid;
  char bNearestNodeBad;
  bool bOnlyGoodNearestNodes;
  bool inuse;
  __int8 expendable : 1;
  __int8 bIgnoreFoliageSightingMe : 1;
  int banNodeTime;
};

/* 1622 */
struct __declspec(align(4)) VehiclePathNode
{
  scr_string_t name;
  scr_string_t target;
  scr_string_t script_linkname;
  scr_string_t script_noteworthy;
  __int16 index;
  __int16 flags;
  float speed;
  float lookAhead;
  float origin[3];
  float dir[3];
  float angles[3];
  float length;
  __int16 nextIdx;
  __int16 prevIdx;
  __int16 notifyIdx;
};

/* 1623 */
struct VehiclePathPos
{
  __int16 nodeIdx;
  __int16 flags;
  float frac;
  float speed;
  float lookAhead;
  float origin[3];
  float angles[3];
  float lookPos[3];
  VehiclePathNode switchNode[2];
};

/* 1624 */
struct VehicleTrackObstacle
{
  float origin[2];
  float radius;
};

/* 1625 */
struct __declspec(align(8)) VehicleTrackSector
{
  float startEdgeDir[2];
  float startEdgeDist;
  float leftEdgeDir[2];
  float leftEdgeDist;
  float rightEdgeDir[2];
  float rightEdgeDist;
  float sectorLength;
  float sectorWidth;
  float totalPriorLength;
  float totalFollowingLength;
  VehicleTrackObstacle *obstacles;
  unsigned int obstacleCount;
};

/* 1626 */
const struct __declspec(align(8)) VehicleTrackSegment
{
  const char *targetName;
  VehicleTrackSector *sectors;
  unsigned int sectorCount;
  VehicleTrackSegment **nextBranches;
  unsigned int nextBranchesCount;
  VehicleTrackSegment **prevBranches;
  unsigned int prevBranchesCount;
  float endEdgeDir[2];
  float endEdgeDist;
  float totalLength;
};

/* 1627 */
struct __declspec(align(8)) VehicleTrackpos
{
  VehicleTrackSegment *segment;
  unsigned int sectorIndex;
};

/* 1628 */
struct vehicle_physic_t
{
  float origin[3];
  float prevOrigin[3];
  float angles[3];
  float prevAngles[3];
  Bounds bounds;
  float vel[3];
  float bodyVel[3];
  float accel[3];
  float bodyAccel[3];
  float rotVel[3];
  float bodyPitchVel;
  float bodyRollVel;
  float wheelZVel[6];
  float wheelZPos[6];
  int wheelSurfType[6];
  float wheelCompression[6];
  float wheelPrevCompression[6];
  float worldTilt[3];
  float worldTiltVel[3];
};

/* 1629 */
struct __declspec(align(4)) PhysVehicleWheel
{
  float originLocal[3];
  unsigned int flags;
  float forward[3];
  float speedRatio;
  float accelRatio;
  float sideFriction;
  bool slipping;
};

/* 1630 */
struct __cppobj dBase
{
};

/* 1631 */
struct __cppobj dObject : dBase
{
  dObject *next;
  dObject **tome;
  void *userdata;
  int tag;
  dxWorld *world;
};

/* 1634 */
struct dxJointNode
{
  dxJoint *joint;
  dxBody *body;
  int bodyTag;
  dxJointNode *next;
};

/* 1632 */
struct __cppobj dxJoint : dObject
{
  JointType type;
  int flags;
  dxJointNode node[2];
};

/* 1638 */
struct dMass
{
  float mass;
  float c[4];
  float I[12];
};

/* 1639 */
struct dxAutoDisable
{
  float linearThresholdSqrd;
  float angularThresholdSqrd;
  float idle_time;
  int idle_steps;
};

/* 1640 */
struct dxBodyInfo
{
  float pos[4];
  float q[4];
  float R[12];
  float lvel[4];
  float avel[4];
  float maxLinVel;
  float maxAngVel;
  float padding[2];
};

/* 1633 */
struct __cppobj dxBody : dObject
{
  dxJointNode *firstjoint;
  int flags;
  dxGeom *geom;
  dMass mass;
  float invI[12];
  float invMass;
  float facc[4];
  float tacc[4];
  float finite_rot_axis[4];
  dxAutoDisable adis;
  float adis_timeleft;
  int adis_stepsleft;
  dxBodyInfo info;
};

/* 1635 */
struct __cppobj dxGeom : dBase
{
  dxGeomVtbl *vfptr;
  int type;
  int gflags;
  void *data;
  dxBody *body;
  dxGeom *body_next;
  float *pos;
  float *R;
  dxGeom *next;
  dxGeom **tome;
  dxSpace *parent_space;
  float aabb[6];
  unsigned int category_bits;
  unsigned int collide_bits;
};

/* 1636 */
struct dxGeomVtbl
{
  void *(__cdecl *__vecDelDtor)(dxGeom *this, unsigned int);
  void (__cdecl *computeAABB)(dxGeom *this);
  int (__cdecl *AABBTest)(dxGeom *this, dxGeom *, float *);
};

/* 1637 */
struct __cppobj __declspec(align(16)) dxSpace : dxGeom
{
  int count;
  dxGeom *first;
  int cleanup;
  int current_index;
  dxGeom *current_geom;
  int lock_count;
};

/* 1641 */
struct dxQuickStepParameters
{
  int num_iterations;
  float w;
};

/* 1642 */
struct dxContactParameters
{
  float max_vel;
  float min_depth;
};

/* 1643 */
struct dxWorldStepInfo
{
  float gravity[4];
  float global_erp;
  float global_cfm;
  dxQuickStepParameters qs;
  dxContactParameters contactp;
};

/* 1644 */
struct ConstraintRowData
{
  float J_body1Linear[3];
  float lambda;
  float J_body1Angular[3];
  int body1;
  float J_body2Linear[3];
  int body2;
  float J_body2Angular[3];
  float padding1;
  float iMJ_body1Linear[3];
  float padding2;
  float iMJ_body1Angular[3];
  float padding3;
  float iMJ_body2Linear[3];
  float padding4;
  float iMJ_body2Angular[3];
  unsigned int oneSided;
  float lo;
  float hi;
  float rhs;
  float Ad;
};

/* 1645 */
struct SorLcpData
{
  int order[576];
};

/* 1646 */
struct QuickstepData
{
  ConstraintRowData rowData[576];
  SorLcpData sd;
};

/* 1647 */
struct __cppobj dxWorld : dBase
{
  dxBody *firstbody;
  dxJoint *firstjoint;
  int bodyCount;
  int jointCount;
  dxWorldStepInfo stepInfo;
  dxAutoDisable adis;
  int adis_flag;
  float seconds;
  int useWorkerCmd;
  PhysWorld worldIndex;
  float angularVelocityMax;
  __declspec(align(16)) QuickstepData qd;
};

/* 1648 */
struct __cppobj JointOrientation : dxJoint
{
  unsigned int constraintRowCount;
  float rollResistance;
  float pitchResistance;
  float yawResistance;
  float uprightStrengthRoll;
  float uprightStrengthPitch;
  bool uprightCorrection;
  float targetPitch;
  float maxRoll;
  float maxPitch;
};

/* 1649 */
struct __cppobj __declspec(align(4)) JointPath : dxJoint
{
  int substeps;
  float pos[2];
  float vel[2];
  float yaw;
  float yawVel;
  float cfm;
  float erp;
  bool enabled;
};

/* 1650 */
const struct __declspec(align(8)) VehiclePhysDef
{
  int physicsEnabled;
  const char *physPresetName;
  PhysPreset *physPreset;
  const char *accelGraphName;
  VehicleAxleType steeringAxle;
  VehicleAxleType powerAxle;
  VehicleAxleType brakingAxle;
  float topSpeed;
  float reverseSpeed;
  float maxVelocity;
  float maxPitch;
  float maxRoll;
  float suspensionTravelFront;
  float suspensionTravelRear;
  float suspensionStrengthFront;
  float suspensionDampingFront;
  float suspensionStrengthRear;
  float suspensionDampingRear;
  float frictionBraking;
  float frictionCoasting;
  float frictionTopSpeed;
  float frictionSide;
  float frictionSideRear;
  float velocityDependentSlip;
  float rollStability;
  float rollResistance;
  float pitchResistance;
  float yawResistance;
  float uprightStrengthPitch;
  float uprightStrengthRoll;
  float targetAirPitch;
  float airYawTorque;
  float airPitchTorque;
  float minimumMomentumForCollision;
  float collisionLaunchForceScale;
  float wreckedMassScale;
  float wreckedBodyFriction;
  float minimumJoltForNotify;
  float slipThresholdFront;
  float slipThresholdRear;
  float slipFricScaleFront;
  float slipFricScaleRear;
  float slipFricRateFront;
  float slipFricRateRear;
  float slipYawTorque;
};

/* 1651 */
const struct GraphFloat
{
  char name[64];
  float knots[32][2];
  unsigned __int16 knotCount;
  float scale;
};

/* 1652 */
struct __declspec(align(8)) PhysVehicle
{
  __int64 body;
  PhysVehicleWheel wheels[6];
  JointOrientation orientationConstraint;
  JointPath pathConstraint;
  unsigned int wheelsOnGroundCount;
  float invWheelsWithPower;
  float desiredAccel;
  float desiredSpeed;
  float brakingFactor;
  float steeringAngle;
  float pitchControl;
  float velocity[3];
  float acceleration[3];
  float prevAcceleration[3];
  float localVelocity[3];
  float localAcceleration[3];
  float jolt[3];
  float frontWheelCenter[3];
  float rearWheelCenter[3];
  float steeringPoint[3];
  float steeringPointDist;
  float steeringHalfWidth;
  unsigned int flags;
  VehiclePhysDef *def;
  GraphFloat *accelGraph;
  float topSpeed;
  int passEntityNum;
  int modelIndex;
  float tankMaxYawSpeed;
  float tankYawAccel;
  float conveyorVelocity[2];
};

/* 1653 */
struct PhysVehicleControl
{
  float steering;
  float desiredSpeed;
  float desiredSpeedReverse;
  float accelOverride;
  float brake;
  float pitch;
};

/* 1654 */
struct HelicopterHover
{
  float hoverRadius;
  float hoverSpeed;
  float hoverAccel;
  float hoverGoalPos[3];
  int useHoverAccelForAngles;
  int droneHoverStatic;
  float droneHoverOffset[3];
  float droneHoverOffsetTimer;
};

/* 1655 */
struct HeliPathPos
{
  HelicopterMoveState moveState;
  float speed;
  float origin[3];
  float angles[3];
  float vel[3];
  float rotVel[3];
  float accel[3];
  HelicopterHover hover;
  int stopping;
  int yawSlowDown;
  float prevGoalYaw;
  gentity_s *ent;
  float goalPosition[3];
  int stopAtGoal;
  float manualSpeed;
  float manualAccel;
  float manualDecel;
  float maxDragSpeed;
  float nearGoalNotifyDist;
  float dronePrevOrigin[3];
  DroneMoveState droneMoveState;
  float droneOffset[3];
  float droneMovePos[3];
  float droneNavPath[32][3];
  int numDroneNavPathNodes;
  int currentDroneNavPathNodeIndex;
  float droneMovePath[4][3];
  int numDroneMovePathNodes;
  bool droneCanFastMoveThroughPath;
  int currentDroneMovePathNodeIndex;
  int droneShortcutFrameDelay;
  float droneLastSafePosition[3];
  float turningAbility;
  float lookAtEntOrigin[3];
  bool hasLookAtEnt;
  int hasGoalYaw;
  int hasTargetYaw;
  float goalYaw;
  float targetYaw;
  float yawOverShoot;
  float maxAngleVel[3];
  float yawAccel;
  float yawDecel;
  float maxPitchAngle;
  float maxRollAngle;
  float vehDefAccel;
};

/* 1656 */
struct __declspec(align(4)) VehicleTurret
{
  int fireTime;
  int fireBarrel;
  float barrelOffset;
  int barrelBlocked;
  bool turretMoving;
};

/* 1657 */
struct VehicleJitter
{
  int jitterPeriodMin;
  int jitterPeriodMax;
  int jitterEndTime;
  float jitterOffsetRange[3];
  float jitterDeltaAccel[3];
  float jitterAccel[3];
  float jitterPos[3];
};

/* 1658 */
struct VehicleBoat
{
  float rockingDirYaw;
  float bounceCurrentForce;
  float bouncePeakForce;
};

/* 1659 */
struct VehicleTags
{
  int player;
  int detach;
  int popout;
  int body;
  int turret;
  int turret_base;
  int barrel;
  int flash[5];
  int wheel[6];
};

/* 1660 */
struct Vehicle
{
  gentity_s *ent;
  VehicleDrivingState drivingState;
  VehicleTransmission transMode;
  VehiclePathPos pathPos;
  VehiclePathDir pathDir;
  VehicleTrackpos trackPos;
  vehicle_physic_t phys;
  PhysVehicle *physVeh;
  PhysVehicleControl physVehCtrl;
  int boostTime;
  int defIndex;
  int team;
  unsigned int useHintStringIndex;
  HeliPathPos heliPathPos;
  float speed;
  float pathSpeed;
  __int16 waitNode;
  float waitSpeed;
  VehicleTurret turret;
  VehicleJitter jitter;
  VehicleBoat boat;
  VehicleCameraState cameraState;
  scr_string_t lookAtText0;
  scr_string_t lookAtText1;
  VehicleManualMode manualMode;
  float manualSpeed;
  float manualAccel;
  float manualDecel;
  float manualTime;
  VehicleRotateToMode rotateToYawMode;
  float rotateToYaw;
  float rotateToYawAccel;
  int hasTarget;
  int targetEnt;
  EntHandle lookAtEnt;
  float targetOrigin[3];
  float targetOffset[3];
  float goalPosition[3];
  float joltDir[2];
  float joltTime;
  float joltWave;
  float joltSpeed;
  float joltDecel;
  float throttle;
  float brake;
  float impactSpeed;
  VehicleTags boneIndex;
  int turretHitNum;
  unsigned int trophyAmmo;
  int trophyReloadEndTime;
  VehiclePathType pathType;
  int canPushEntities;
  int useDroneLogic;
  EntHandle droneTarget;
  int isMultiStage;
  int isDeathStage;
};

/* 1674 */
struct __declspec(align(8)) tagInfo_s
{
  gentity_s *parent;
  gentity_s *next;
  scr_string_t name;
  bool blendToParent;
  int index;
  float axis[4][3];
  float parentInvAxis[4][3];
};

/* 1676 */
struct vis_cache_t
{
  int bVisible;
  int iLastUpdateTime;
  int iLastVisTime;
  int iFirstVisTime;
};

/* 1677 */
struct pathnode_yaworient_t
{
  float fLocalAngle;
  float localForward[2];
};

/* 1678 */
union PathNodeParentUnion
{
  scr_string_t name;
  unsigned __int16 index;
};

/* 1679 */
struct pathlink_s
{
  float fDist;
  unsigned __int16 nodeNum;
  char disconnectCount;
  char negotiationLink;
  char flags;
  char ubBadPlaceCount[3];
};

/* 1680 */
union $D493D64769D474417A7CB4D94DA4A7D8
{
  pathnode_yaworient_t yaw_orient;
  float angles[3];
};

/* 1681 */
union $EB400DEDE558A1207C252B3120F61B1D
{
  float minUseDistSq;
  PathNodeErrorCode error;
};

/* 1682 */
struct pathnode_constant_t
{
  unsigned __int16 type;
  unsigned int spawnflags;
  scr_string_t targetname;
  scr_string_t script_linkName;
  scr_string_t script_noteworthy;
  scr_string_t target;
  scr_string_t animscript;
  int animscriptfunc;
  float vLocalOrigin[3];
  $D493D64769D474417A7CB4D94DA4A7D8 ___u9;
  PathNodeParentUnion parent;
  $EB400DEDE558A1207C252B3120F61B1D ___u11;
  __int16 wOverlapNode[2];
  unsigned __int16 totalLinkCount;
  pathlink_s *Links;
};

/* 1683 */
struct SentientHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

/* 1684 */
struct pathnode_dynamic_t
{
  SentientHandle pOwner;
  int iFreeTime;
  int iValidTime[3];
  __int16 wLinkCount;
  __int16 wOverlapCount;
  __int16 turretEntNumber;
  char userCount;
  char hasBadPlaceLink;
  int spreadUsedTime[2];
  __int16 flags;
  __int16 dangerousCount;
  int recentUseProxTime;
};

/* 1686 */
union $73F238679C0419BE2C31C6559E8604FC
{
  float nodeCost;
  int linkIndex;
};

/* 1687 */
struct __declspec(align(8)) pathnode_transient_t
{
  int iSearchFrame;
  pathnode_t *pNextOpen;
  pathnode_t *pPrevOpen;
  pathnode_t *pParent;
  float fCost;
  float fHeuristic;
  $73F238679C0419BE2C31C6559E8604FC ___u6;
};

/* 1685 */
struct pathnode_t
{
  pathnode_constant_t constant;
  pathnode_dynamic_t dynamic;
  pathnode_transient_t transient;
};

/* 1688 */
struct __declspec(align(8)) sentient_info_t
{
  vis_cache_t VisCache;
  int iLastAttackMeTime;
  int lastKnownPosTime;
  int attackTime;
  bool surprised;
  float vLastKnownLocalPos[3];
  pathnode_t *pLastKnownNode;
  char lastKnownReason;
  __int16 lastKnownGroundEntNum;
};

/* 1689 */
struct potential_threat_t
{
  bool isEnabled;
  float direction[2];
};

/* 1690 */
struct AISecondaryTarget
{
  EntHandle entity;
  float dirToEnt[2];
  float distToEnt;
  pathnode_t *node;
};

/* 1691 */
struct AIThreat
{
  bool hasThreateningEnemy;
  bool allEnemiesInSimilarDir;
  bool newEnemyReaction;
  bool ignoreExplosionEvents;
  bool bPacifist;
  int iPacifistWait;
  potential_threat_t potentialThreat;
  int threatUpdateTime;
  float footstepDetectDistSq;
  float footstepDetectDistWalkSq;
  float footstepDetectDistSprintSq;
  float reactionTargetPos[3];
  float newEnemyReactionDistSq;
  float highlyAwareRadius;
  SentientHandle pFavoriteEnemy;
  int numSecondaryTarget;
  AISecondaryTarget secondaryTargets[2];
};

/* 1692 */
struct AISight
{
  float fovDot;
  float fovDotBusy;
  float fMaxSightDistSqrd;
  int latency;
  bool ignoreCloseFoliage;
  bool lastEnemySightPosValid;
  float lastEnemySightPos[3];
  float anglesToLikelyEnemyPath[3];
  int faceLikelyEnemyPathNeedCheckTime;
  int faceLikelyEnemyPathNeedRecalculateTime;
  pathnode_t *faceLikelyEnemyPathNode;
  float upAimLimit;
  float downAimLimit;
  float rightAimLimit;
  float leftAimLimit;
};

/* 1693 */
struct AICachedInfo
{
  int time;
  float pos[3];
  float dir[3];
};

/* 1694 */
struct AIOrientation
{
  float vDesiredAngles[3];
  float fLookPitch;
  float fLookYaw;
  float maxFaceEnemyDistSq;
  char relativeDir;
  char prevRelativeDir;
  bool faceMotion;
  bool gunBlockedByWall;
  bool lockScriptOrient;
  float vLookForward[3];
  float vLookRight[3];
  float vLookUp[3];
};

/* 1695 */
struct AINavigation
{
  float fWalkDist;
  float fWalkDistFacingMotion;
  bool isInBadPlace;
  char badplaceRecheckPathLen;
  float badPlaceAwareness;
};

/* 1696 */
struct __declspec(align(8)) AITurret
{
  gentity_s *pTurret;
  unsigned __int16 turretAnim;
  char turretAnimSet;
};

/* 1697 */
struct pathpoint_t
{
  float vOrigPoint[3];
  float fDir2D[2];
  float fOrigLength;
  int iNodeNum;
};

/* 1698 */
struct path_s
{
  pathpoint_t pts[32];
  char wPathLen;
  char wOrigPathLen;
  char wDodgeCount;
  char wNegotiationStartNode;
  char lookaheadNextNode;
  char pathChangeNotifyNode;
  __int16 wDodgeEntity;
  float vFinalGoal[3];
  float vStartPos[3];
  float lookaheadDir[3];
  float lookaheadPos[3];
  float fLookaheadDist;
  float fLookaheadAmount;
  float fLookaheadDistToNextNode;
  int minLookAheadNodes;
  int flags;
  int iPathTime;
  int iPathClearedTime;
  team_t eTeam;
  float fCurrLength;
  float vCurrPoint[3];
  int iPathEndTime;
  float pathEndAnimDistSq;
  bool pathEndAnimNotified;
  bool lookaheadHitsStairs;
  bool useChokePoints;
  float pathChangeTracePos[2];
  int randomPercent;
  unsigned int parentIndex;
  float badPlaceAwareness;
  int ownerEntNum;
  int iTraceMask;
};

/* 1699 */
struct __declspec(align(8)) ai_common_t
{
  gentity_s *ent;
  sentient_s *sentient;
  sentient_info_t sentientInfo[60];
  AIThreat threat;
  AISight sight;
  AICachedInfo eyeInfo;
  AIOrientation orientation;
  AINavigation navigation;
  AITurret turret;
  path_s Path;
  int traceCount;
};

/* 1700 */
struct bdStringData
{
  unsigned int m_referenceCount;
  unsigned __int64 m_length;
  unsigned __int64 m_capacity;
};

/* 1701 */
struct __cppobj bdMemory
{
};

/* 1702 */
struct bdString
{
  char *m_string;
};

/* 1703 */
struct __declspec(align(8)) bdReferencable
{
  bdReferencableVtbl *vfptr;
  int m_refCount;
};

/* 1704 */
struct bdReferencableVtbl
{
  void *(__cdecl *__vecDelDtor)(bdReferencable *this, unsigned int);
};

/* 1705 */
struct bdFastArray<unsigned char>
{
  char *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1706 */
struct __cppobj __declspec(align(4)) bdBitBuffer : bdReferencable
{
  bdFastArray<unsigned char> m_data;
  unsigned int m_writePosition;
  unsigned int m_maxWritePosition;
  unsigned int m_readPosition;
  bool m_failedRead;
  bool m_typeChecked;
};

/* 1707 */
struct bdReference<bdBitBuffer>
{
  bdBitBuffer *m_ptr;
};

/* 1708 */
struct bdFastArray<char>
{
  char *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1709 */
struct __cppobj __declspec(align(8)) bdByteBuffer : bdReferencable
{
  unsigned int m_size;
  char *m_data;
  char *m_readPtr;
  char *m_writePtr;
  bool m_typeChecked;
  bool m_typeCheckedCopy;
  bool m_allocatedData;
};

/* 1710 */
struct bdReference<bdByteBuffer>
{
  bdByteBuffer *m_ptr;
};

/* 1711 */
struct __cppobj bdHashingClass
{
};

/* 1712 */
struct __cppobj bdBitOperations
{
};

/* 1715 */
struct bdFastArray<void (__cdecl*)(void)>
{
  void (__cdecl **m_data)();
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1713 */
struct __declspec(align(8)) bdSingletonRegistryImpl
{
  bdSingletonRegistryImplVtbl *vfptr;
  bdFastArray<void (__cdecl*)(void)> m_destroyFunctions;
  bool m_cleaningUp;
};

/* 1714 */
struct bdSingletonRegistryImplVtbl
{
  void *(__cdecl *__vecDelDtor)(bdSingletonRegistryImpl *this, unsigned int);
};

/* 1716 */
struct __cppobj bdSingleton<bdSingletonRegistryImpl>
{
};

/* 1717 */
struct __cppobj bdSingletonRegistry : bdSingleton<bdSingletonRegistryImpl>
{
};

/* 1718 */
struct bdSequenceNumber
{
  int m_seqNum;
};

/* 1719 */
struct bdSequenceNumberStore
{
  unsigned int m_bitmap;
  bdSequenceNumber m_lastSeq;
};

/* 1720 */
struct $DC3D5EA3E6080C8C82A5E1CDF5FE24EF
{
  char m_b1;
  char m_b2;
  char m_b3;
  char m_b4;
};

/* 1721 */
struct $10C13E733AD73D35DA6881B07E14B63C
{
  unsigned __int16 m_w1;
  unsigned __int16 m_w2;
  unsigned __int16 m_w3;
  unsigned __int16 m_w4;
  unsigned __int16 m_w5;
  unsigned __int16 m_w6;
  unsigned __int16 m_w7;
  unsigned __int16 m_w8;
};

/* 1722 */
union $2111C10F3EF29B410563CD394070F8AE
{
  $DC3D5EA3E6080C8C82A5E1CDF5FE24EF m_caddr;
  unsigned int m_iaddr;
  $10C13E733AD73D35DA6881B07E14B63C m_caddr6;
  char m_iaddr6[16];
  char m_sockaddr_storage[128];
};

/* 1723 */
struct __declspec(align(4)) bdSockAddr
{
  $2111C10F3EF29B410563CD394070F8AE inUn;
  unsigned __int16 m_family;
};

/* 1724 */
struct bdInetAddr
{
  bdSockAddr m_addr;
};

/* 1725 */
struct __declspec(align(4)) bdAddr
{
  bdInetAddr m_address;
  unsigned __int16 m_port;
};

/* 1726 */
struct __cppobj bdAddrHash
{
};

/* 1727 */
struct __cppobj bdPlatformSocket
{
};

/* 1728 */
struct __declspec(align(8)) bdSocket
{
  bdSocketVtbl *vfptr;
  int m_handle;
};

/* 1729 */
struct bdSocketVtbl
{
  void *(__cdecl *__vecDelDtor)(bdSocket *this, unsigned int);
  bool (__cdecl *create)(bdSocket *this, const unsigned __int16, const bool, const bool, const bool);
  bool (__cdecl *create)(bdSocket *this, const bool, const bool, const bool);
  bdSocketStatusCode (__cdecl *bind)(bdSocket *this, bdAddr *);
  bdSocketStatusCode (__cdecl *bind)(bdSocket *this, const unsigned __int16);
  int (__cdecl *sendTo)(bdSocket *this, bdAddr *, const void *, const unsigned int);
  int (__cdecl *receiveFrom)(bdSocket *this, bdAddr *, void *, const unsigned int);
  bool (__cdecl *close)(bdSocket *this);
};

/* 1730 */
struct __cppobj __declspec(align(4)) bdCommonAddr : bdReferencable
{
  bdInetAddr m_localAddr;
  bdAddr m_onlineAddr;
  char m_enet[6];
  char m_online[20];
  unsigned int m_hash;
  bool m_isLoopback;
};

/* 1731 */
struct bdReference<bdCommonAddr>
{
  bdCommonAddr *m_ptr;
};

/* 1732 */
struct __cppobj bdCommonAddrHash
{
};

/* 1733 */
struct bdSecurityKey
{
  char ab[16];
};

/* 1734 */
struct bdSecurityID
{
  char ab[8];
};

/* 1735 */
struct bdEndpoint
{
  bdReference<bdCommonAddr> m_ca;
  bdSecurityID m_secID;
};

/* 1736 */
struct __cppobj bdEndpointHashingClass
{
};

/* 1737 */
struct bdStopwatch
{
  unsigned __int64 m_start;
};

/* 1738 */
struct bdBackoffTimer
{
  unsigned int m_timestamp;
  unsigned int m_failures;
  unsigned int m_sizeTimeouts;
  char m_timeouts[16];
};

/* 1739 */
struct bdRandom
{
  unsigned int m_val;
};

/* 1740 */
struct __cppobj bdTrulyRandomImpl
{
};

/* 1741 */
struct __cppobj bdSingleton<bdTrulyRandomImpl>
{
};

/* 1742 */
struct __cppobj bdTrulyRandom : bdSingleton<bdTrulyRandomImpl>
{
};

/* 1743 */
struct bdTaskResultProcessor
{
  bdTaskResultProcessorVtbl *vfptr;
};

/* 1744 */
struct bdTaskResult
{
  bdTaskResultVtbl *vfptr;
};

/* 1745 */
struct bdTaskResultVtbl
{
  void *(__cdecl *__vecDelDtor)(bdTaskResult *this, unsigned int);
  bool (__cdecl *deserialize)(bdTaskResult *this, bdReference<bdByteBuffer>);
  unsigned int (__cdecl *sizeOf)(bdTaskResult *this);
};

/* 1746 */
struct bdTaskResultProcessorVtbl
{
  void *(__cdecl *__vecDelDtor)(bdTaskResultProcessor *this, unsigned int);
  bool (__cdecl *processResult)(bdTaskResultProcessor *this, bdTaskResult *, unsigned int);
};

/* 1747 */
struct __cppobj bdRemoteTask : bdReferencable
{
  bdStopwatch m_timer;
  float m_timeout;
  bdRemoteTask::bdStatus m_status;
  bdReference<bdByteBuffer> m_byteResults;
  bdTaskResult *m_taskResult;
  bdTaskResult **m_taskResultList;
  unsigned int m_numResults;
  unsigned int m_maxNumResults;
  unsigned int m_totalNumResults;
  unsigned __int64 m_transactionID;
  bdLobbyErrorCode m_errorCode;
  bdTaskResultProcessor *m_taskResultProcessor;
};

/* 1748 */
struct bdReference<bdRemoteTask>
{
  bdRemoteTask *m_ptr;
};

/* 1749 */
struct __cppobj __declspec(align(8)) bdTaskByteBuffer : bdByteBuffer
{
  char *m_taskData;
  unsigned int m_taskDataSize;
  unsigned int m_validHeaderSize;
  unsigned int m_paddingSize;
};

/* 1750 */
struct bdReference<bdTaskByteBuffer>
{
  bdTaskByteBuffer *m_ptr;
};

/* 1751 */
struct __cppobj __declspec(align(8)) bdPendingBufferTransfer : bdReferencable
{
  bdReference<bdByteBuffer> m_buffer;
  char *m_txPtr;
  unsigned int m_txAvail;
};

/* 1752 */
struct bdReference<bdPendingBufferTransfer>
{
  bdPendingBufferTransfer *m_ptr;
};

/* 1753 */
struct bdLinkedList<bdPendingBufferTransfer>::Node
{
  bdPendingBufferTransfer m_data;
  bdLinkedList<bdPendingBufferTransfer>::Node *m_next;
  bdLinkedList<bdPendingBufferTransfer>::Node *m_prev;
};

/* 1754 */
struct __declspec(align(8)) bdLinkedList<bdPendingBufferTransfer>
{
  bdLinkedList<bdPendingBufferTransfer>::Node *m_head;
  bdLinkedList<bdPendingBufferTransfer>::Node *m_tail;
  unsigned int m_size;
};

/* 1755 */
struct bdQueue<bdPendingBufferTransfer>
{
  bdLinkedList<bdPendingBufferTransfer> m_list;
};

/* 1756 */
struct bdStreamSocket
{
  int m_handle;
};

/* 1757 */
struct bdLobbyConnectionListener
{
  bdLobbyConnectionListenerVtbl *vfptr;
};

/* 1758 */
struct bdReference<bdLobbyConnection>
{
  bdLobbyConnection *m_ptr;
};

/* 1759 */
struct bdLobbyConnectionListenerVtbl
{
  void *(__cdecl *__vecDelDtor)(bdLobbyConnectionListener *this, unsigned int);
  void (__cdecl *onConnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
  void (__cdecl *onConnectFailed)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
  void (__cdecl *onDisconnect)(bdLobbyConnectionListener *this, bdReference<bdLobbyConnection>);
};

/* 1760 */
struct bdCypher
{
  bdCypherVtbl *vfptr;
};

/* 1761 */
struct bdCypherVtbl
{
  void *(__cdecl *__vecDelDtor)(bdCypher *this, unsigned int);
  bool (__cdecl *init)(bdCypher *this, const char *, unsigned int);
  bool (__cdecl *encrypt)(bdCypher *this, const char *, const char *, char *, unsigned int);
  bool (__cdecl *decrypt)(bdCypher *this, const char *, const char *, char *, unsigned int);
};

/* 1762 */
struct __cppobj bdLobbyConnection : bdReferencable
{
  bdReference<bdCommonAddr> m_addr;
  unsigned int m_maxSendMessageSize;
  unsigned int m_maxRecvMessageSize;
  bdLobbyConnection::RecvState m_recvState;
  char m_msgSizeBuffer[4];
  unsigned int m_recvCount;
  char m_recvEncryptType;
  unsigned int m_messageSize;
  bdReference<bdTaskByteBuffer> m_recvMessage;
  bdReference<bdPendingBufferTransfer> m_recvTransfer;
  bdQueue<bdPendingBufferTransfer> m_outgoingBuffers;
  bdStreamSocket m_socket;
  bdLobbyConnection::Status m_status;
  bdLobbyConnectionListener *m_connectionListener;
  unsigned int m_encryptionType;
  bdCypher *m_cypher;
  char m_sessionKey[24];
  unsigned int m_messageCount;
  bdStopwatch m_keepAliveTimer;
  bdStopwatch m_lastReceivedTimer;
  bdStopwatch m_asyncConnectTimer;
};

/* 1763 */
struct __cppobj __declspec(align(8)) bdStreamingTask : bdRemoteTask
{
  bool m_failOnPartialError;
  unsigned int m_partsFailed;
  bdStopwatch m_streamingTimer;
  float m_streamingTimeout;
};

/* 1764 */
struct bdReference<bdStreamingTask>
{
  bdStreamingTask *m_ptr;
};

/* 1765 */
struct bdLinkedList<bdReference<bdRemoteTask> >::Node
{
  bdReference<bdRemoteTask> m_data;
  bdLinkedList<bdReference<bdRemoteTask> >::Node *m_next;
  bdLinkedList<bdReference<bdRemoteTask> >::Node *m_prev;
};

/* 1766 */
struct __declspec(align(8)) bdLinkedList<bdReference<bdRemoteTask> >
{
  bdLinkedList<bdReference<bdRemoteTask> >::Node *m_head;
  bdLinkedList<bdReference<bdRemoteTask> >::Node *m_tail;
  unsigned int m_size;
};

/* 1767 */
struct bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node
{
  bdReference<bdRemoteTask> m_data;
  unsigned __int64 m_key;
  bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node *m_next;
};

/* 1768 */
struct __declspec(align(8)) bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1769 */
struct bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node
{
  bdReference<bdByteBuffer> m_data;
  unsigned __int64 m_key;
  bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node *m_next;
};

/* 1770 */
struct __declspec(align(8)) bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1771 */
struct bdRemoteTaskManager
{
  bdRemoteTaskManagerVtbl *vfptr;
  bdLinkedList<bdReference<bdRemoteTask> > m_tasks;
  bdHashMap<unsigned __int64,bdReference<bdRemoteTask>,bdHashingClass> m_asyncTasks;
  bdHashMap<unsigned __int64,bdReference<bdByteBuffer>,bdHashingClass> m_asyncResults;
  bdReference<bdLobbyConnection> m_lobbyConnection;
  bool m_encryptedConnection;
  unsigned __int64 m_connectionID;
};

/* 1772 */
struct bdRemoteTaskManagerVtbl
{
  void *(__cdecl *__vecDelDtor)(bdRemoteTaskManager *this, unsigned int);
};

/* 1773 */
struct bdMutex
{
  void *m_handle;
};

/* 1774 */
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 1775 */
struct des_key
{
  unsigned int ek[32];
  unsigned int dk[32];
};

/* 1776 */
struct des3_key
{
  unsigned int ek[3][32];
  unsigned int dk[3][32];
};

/* 1777 */
struct rijndael_key
{
  unsigned int eK[60];
  unsigned int dK[60];
  int Nr;
};

/* 1778 */
union Symmetric_key
{
  des_key des;
  des3_key des3;
  rijndael_key rijndael;
  void *data;
};

/* 1779 */
struct symmetric_CBC
{
  int cipher;
  int blocklen;
  char IV[128];
  Symmetric_key key;
};

/* 1780 */
struct symmetric_CTR
{
  int cipher;
  int blocklen;
  int padlen;
  int mode;
  int ctrlen;
  char ctr[128];
  char pad[128];
  Symmetric_key key;
};

/* 1781 */
struct __declspec(align(8)) sha256_state
{
  unsigned __int64 length;
  unsigned int state[8];
  unsigned int curlen;
  char buf[64];
};

/* 1782 */
struct sha1_state
{
  unsigned __int64 length;
  unsigned int state[5];
  unsigned int curlen;
  char buf[64];
};

/* 1783 */
struct __declspec(align(8)) md5_state
{
  unsigned __int64 length;
  unsigned int state[4];
  unsigned int curlen;
  char buf[64];
};

/* 1784 */
struct __declspec(align(8)) tiger_state
{
  unsigned __int64 state[3];
  unsigned __int64 length;
  unsigned int curlen;
  char buf[64];
};

/* 1785 */
union Hash_state
{
  char dummy[1];
  sha256_state sha256;
  sha1_state sha1;
  md5_state md5;
  tiger_state tiger;
  void *data;
};

/* 1786 */
struct Hmac_state
{
  Hash_state md;
  int hash;
  Hash_state hashstate;
  char *key;
};

/* 1787 */
struct yarrow_prng
{
  int cipher;
  int hash;
  char pool[128];
  symmetric_CTR ctr;
};

/* 1788 */
struct fortuna_prng
{
  Hash_state pool[32];
  Symmetric_key skey;
  char K[32];
  char IV[16];
  unsigned int pool_idx;
  unsigned int pool0_len;
  unsigned int wd;
  unsigned __int64 reset_cnt;
};

/* 1789 */
union Prng_state
{
  char dummy[1];
  yarrow_prng yarrow;
  fortuna_prng fortuna;
};

/* 1790 */
struct Rsa_key
{
  int type;
  void *e;
  void *d;
  void *N;
  void *p;
  void *q;
  void *qP;
  void *dP;
  void *dQ;
};

/* 1791 */
struct ltc_ecc_set_type
{
  int size;
  char *name;
  char *prime;
  char *B;
  char *order;
  char *Gx;
  char *Gy;
};

/* 1792 */
struct ecc_point
{
  void *x;
  void *y;
  void *z;
};

/* 1793 */
struct ecc_key
{
  int type;
  int idx;
  ltc_ecc_set_type *dp;
  ecc_point pubkey;
  void *k;
};

/* 1794 */
struct bdRSAKey
{
  bdRSAKey::bdRSAKeyStatus m_status;
  Rsa_key m_key;
};

/* 1795 */
struct bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node
{
  bdSecurityKey m_data;
  bdSecurityID m_key;
  bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node *m_next;
};

/* 1796 */
struct __declspec(align(8)) bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1797 */
struct bdSecurityKeyMapListener
{
  bdSecurityKeyMapListenerVtbl *vfptr;
};

/* 1798 */
union $38341F11E900F8AE4C202BFE059D3DFD
{
  void (__cdecl *~bdSecurityKeyMapListener)(bdSecurityKeyMapListener *this);
  void *(__cdecl *__vecDelDtor)(bdSecurityKeyMapListener *this, unsigned int);
};

/* 1799 */
struct bdSecurityKeyMapListenerVtbl
{
  void (__cdecl *onSecurityKeyRemove)(bdSecurityKeyMapListener *this, bdSecurityID *);
  $38341F11E900F8AE4C202BFE059D3DFD ___u1;
};

/* 1800 */
struct bdSecurityKeyMap
{
  bdSecurityKeyMapListener *m_listener;
  bdHashMap<bdSecurityID,bdSecurityKey,bdHashingClass> m_map;
};

/* 1801 */
struct __cppobj bdAddrHandle : bdReferencable
{
  bdEndpoint m_endpoint;
  bdAddr m_realAddr;
  char m_secTag;
  bool m_valid;
  bdStopwatch m_lastReceived;
};

/* 1802 */
struct bdReference<bdAddrHandle>
{
  bdAddrHandle *m_ptr;
};

/* 1803 */
struct bdArray<bdReference<bdAddrHandle> >
{
  bdReference<bdAddrHandle> *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1804 */
struct bdAddressMap
{
  bdReference<bdCommonAddr> m_me;
  bdArray<bdReference<bdAddrHandle> > m_addrHandles;
};

/* 1805 */
struct __declspec(align(4)) bdSocketRouterConfig
{
  bool m_ignoreConnectionReset;
  float m_DTLSAssociationReceiveTimeout;
  float m_DTLSAssociationNATKeepaliveInterval;
  unsigned int m_maxConnectionResets;
  int m_xlspDCID;
  char m_xlspServerTag[20];
  unsigned __int16 m_xlspServerPort;
  bdAddr m_xlspShimAddr;
  bdAddr m_xlspReflectorAddr;
  unsigned __int16 m_instancePort;
};

/* 1806 */
struct __cppobj bdCypher3Des : bdCypher
{
  symmetric_CBC m_cbc;
};

/* 1807 */
struct __cppobj bdCypherAES : bdCypher
{
  unsigned int m_keySize;
  symmetric_CBC m_cbc;
};

/* 1808 */
struct __declspec(align(4)) bdDTLSHeader
{
  bdDTLSHeaderVtbl *vfptr;
  char m_type;
  char m_version;
  unsigned __int16 m_vtag;
  unsigned __int16 m_counter;
};

/* 1809 */
struct bdDTLSHeaderVtbl
{
  void *(__cdecl *__vecDelDtor)(bdDTLSHeader *this, unsigned int);
  bool (__cdecl *serialize)(bdDTLSHeader *this, void *, const unsigned int, const unsigned int, unsigned int *);
  bool (__cdecl *deserialize)(bdDTLSHeader *this, const void *, const unsigned int, const unsigned int, unsigned int *);
};

/* 1810 */
struct __cppobj __declspec(align(8)) bdDTLSError : bdDTLSHeader
{
  bdDTLSError::bdDTLSErrorType m_etype;
  bdSecurityID m_secID;
};

/* 1811 */
struct bdHMac
{
  bdHMacVtbl *vfptr;
};

/* 1812 */
struct bdHMacVtbl
{
  void *(__cdecl *__vecDelDtor)(bdHMac *this, unsigned int);
  bool (__cdecl *process)(bdHMac *this, const char *const , const unsigned int);
  bool (__cdecl *getData)(bdHMac *this, char *, unsigned int *);
};

/* 1813 */
struct __cppobj bdHMacSHA1 : bdHMac
{
  Hmac_state m_state;
};

/* 1814 */
struct __cppobj __declspec(align(8)) bdDTLSInitAck : bdDTLSHeader
{
  unsigned int m_timestamp;
  unsigned int m_signature;
  unsigned __int16 m_initTag;
  unsigned __int16 m_localTag;
  unsigned __int16 m_peerTag;
  unsigned __int16 m_localTieTag;
  unsigned __int16 m_peerTieTag;
  bdAddr m_peerAddr;
  bdSecurityID m_secID;
};

/* 1815 */
struct bdNonce<16>
{
  char m_nonce[16];
  bool m_initialised;
};

/* 1816 */
struct bdDTLSAssociation
{
  bdDTLSAssociationVtbl *vfptr;
  bdSocket *m_socket;
  bdSecurityKeyMap *m_keyMap;
  bdECCKey *m_ECCKey;
  bdCypher3Des m_cypher;
  char m_sharedKey[24];
  bdAddr m_addr;
  bdReference<bdAddrHandle> m_addrHandle;
  bdDTLSAssociation::bdDTLSStatus m_state;
  bdStopwatch m_lastReceived;
  bdStopwatch m_lastSent;
  bdStopwatch m_initTimer;
  char m_initResends;
  bdStopwatch m_cookieTimer;
  char m_cookieResends;
  unsigned __int16 m_localTag;
  unsigned __int16 m_peerTag;
  bdSequenceNumber m_seqNum;
  bdSequenceNumberStore m_incomingSeqNums;
  bdDTLSInitAck m_initAck;
  bdSecurityID m_localId;
  bdReference<bdCommonAddr> m_localCommonAddr;
  bdAddressMap *m_addrMap;
  float m_receiveTimeout;
  float m_natKeepaliveInterval;
};

/* 1817 */
struct bdDTLSAssociationVtbl
{
  void *(__cdecl *__vecDelDtor)(bdDTLSAssociation *this, unsigned int);
  int (__cdecl *sendTo)(bdDTLSAssociation *this, bdAddr *, const void *, const unsigned int);
  int (__cdecl *receiveFrom)(bdDTLSAssociation *this, bdAddr *, const void *, const unsigned int, bdReference<bdAddrHandle> *, void *, const unsigned int);
};

/* 1818 */
struct bdECCKey
{
  bdECCKey::bdECCKeyStatus m_status;
  ecc_key m_key;
};

/* 1819 */
struct bdQoSRemoteAddr
{
  bdReference<bdCommonAddr> m_addr;
  bdSecurityID m_id;
  bdSecurityKey m_key;
};

/* 1820 */
struct bdQoSProbe
{
  unsigned int m_maxBandwidth;
};

/* 1821 */
struct bdQoSProbeListener
{
  bdQoSProbeListenerVtbl *vfptr;
};

/* 1822 */
const struct bdQoSProbeInfo
{
  bdReference<bdCommonAddr> m_addr;
  bdAddr m_realAddr;
  float m_latency;
  char *m_data;
  unsigned int m_dataSize;
  bool m_disabled;
  unsigned int m_bandwidthDown;
  unsigned int m_bandwidthUp;
};

/* 1823 */
struct bdQoSProbeListenerVtbl
{
  void *(__cdecl *__vecDelDtor)(bdQoSProbeListener *this, unsigned int);
  void (__cdecl *onQoSProbeSuccess)(bdQoSProbeListener *this, bdQoSProbeInfo *);
  void (__cdecl *onQoSProbeFail)(bdQoSProbeListener *this, bdReference<bdCommonAddr>);
};

/* 1824 */
struct bdArray<bdQoSRemoteAddr>
{
  bdQoSRemoteAddr *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1825 */
struct bdFastArray<bdSecurityID>
{
  bdSecurityID *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1826 */
struct __declspec(align(4)) bdServiceBandwidthArbitrator
{
  int m_allowedSend;
  bool m_sentThisSlice;
};

/* 1827 */
struct bdPacketInterceptor
{
  bdPacketInterceptorVtbl *vfptr;
};

/* 1828 */
struct bdPacketInterceptorVtbl
{
  void *(__cdecl *__vecDelDtor)(bdPacketInterceptor *this, unsigned int);
  bool (__cdecl *acceptPacket)(bdPacketInterceptor *this, bdSocket *, bdAddr, void *, const unsigned int, const char);
};

/* 1829 */
struct bdArray<bdAddr>
{
  bdAddr *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1830 */
struct bdNATTravClientData
{
  bdNATTravClientData::bdNATTravClientDataState m_state;
  bdReference<bdCommonAddr> m_local;
  bdReference<bdCommonAddr> m_remote;
  struct bdNATTravListener *m_listener;
  struct bdNATTravListener *m_secondaryListener;
  unsigned int m_tries;
  bdStopwatch m_lastSent;
  bool m_throttled;
  bdStopwatch m_age;
};

/* 1831 */
struct __declspec(align(8)) bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  struct bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1832 */
struct __cppobj bdNATTravClient : bdPacketInterceptor
{
  bdServiceBandwidthArbitrator *m_bandArb;
  bdArray<bdAddr> m_introducers;
  bdSocket *m_socket;
  bdHashMap<unsigned int,bdNATTravClientData,bdHashingClass> m_callbacks;
  bdStopwatch m_keepAliveTimer;
  char m_secretKey[28];
  bdNATTravClient::bdNATTravClientStatus m_status;
  bdReference<bdCommonAddr> m_localCommonAddr;
};

/* 1833 */
struct bdNATTravClient::CachedTraversal
{
  unsigned int m_remoteAddressHash;
  bdAddr m_realAddress;
};

/* 1834 */
struct bdFastArray<bdPacketInterceptor *>
{
  bdPacketInterceptor **m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1835 */
struct bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node
{
  bdReference<bdAddrHandle> m_data;
  bdEndpoint m_key;
  bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node *m_next;
};

/* 1836 */
struct __declspec(align(8)) bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass>::Node **m_map;
  bdEndpointHashingClass m_hashClass;
};

/* 1837 */
struct __declspec(align(8)) bdSocketRouter
{
  bdSocketRouterVtbl *vfptr;
  bdSocket *m_socket;
  bdFastArray<bdPacketInterceptor *> m_interceptors;
  bdSocketRouter::bdSocketRouterStatus m_status;
  bdSocketRouterConfig m_config;
  bdReference<bdCommonAddr> m_localCommonAddr;
  bdAddressMap m_addrMap;
  bdSecurityKeyMap m_keyStore;
  bdQoSProbe m_qosProber;
  bdHashMap<bdEndpoint,bdReference<bdAddrHandle>,bdEndpointHashingClass> m_endpointToAddrMap;
  unsigned int m_lastReflectorPing;
};

/* 1838 */
struct bdSocketRouterVtbl
{
  void *(__cdecl *__vecDelDtor)(bdSocketRouter *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *pump)(bdSocketRouter *this);
  bool (__cdecl *quit)(bdSocketRouter *this);
  bool (__cdecl *connect)(bdSocketRouter *this, bdReference<bdAddrHandle> *);
  bool (__cdecl *disconnect)(bdSocketRouter *this, bdReference<bdAddrHandle> *);
  bdSocketRouter::bdSocketRouterStatus (__cdecl *getStatus)(bdSocketRouter *this);
  bdDTLSAssociationStatus (__cdecl *getStatus)(bdSocketRouter *this, bdReference<bdAddrHandle>);
  int (__cdecl *sendTo)(bdSocketRouter *this, bdReference<bdAddrHandle>, void *, const unsigned int);
  int (__cdecl *receiveFrom)(bdSocketRouter *this, bdReference<bdAddrHandle> *, void *, const unsigned int);
  bool (__cdecl *isRelayEnabled)(bdSocketRouter *this);
};

/* 1839 */
struct bdConnectionListener
{
  bdConnectionListenerVtbl *vfptr;
};

/* 1840 */
struct bdReference<bdConnection>
{
  bdConnection *m_ptr;
};

/* 1841 */
struct bdConnectionListenerVtbl
{
  void *(__cdecl *__vecDelDtor)(bdConnectionListener *this, unsigned int);
  void (__cdecl *onConnect)(bdConnectionListener *this, bdReference<bdConnection>);
  void (__cdecl *onConnectFailed)(bdConnectionListener *this, bdReference<bdConnection>);
  void (__cdecl *onDisconnect)(bdConnectionListener *this, bdReference<bdConnection>);
  void (__cdecl *onReconnect)(bdConnectionListener *this, bdReference<bdConnection>);
};

/* 1842 */
struct bdFastArray<bdConnectionListener *>
{
  bdConnectionListener **m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1843 */
struct __cppobj bdConnection : bdReferencable
{
  bdReference<bdCommonAddr> m_addr;
  bdReference<bdAddrHandle> m_addrHandle;
  bdFastArray<bdConnectionListener *> m_listeners;
  unsigned int m_maxTransmissionRate;
  bdConnection::Status m_status;
};

/* 1844 */
struct bdDispatchInterceptor
{
  bdDispatchInterceptorVtbl *vfptr;
};

/* 1845 */
struct __cppobj bdMessage : bdReferencable
{
  char m_type;
  bdReference<bdBitBuffer> m_payload;
  bool m_payloadTypeChecked;
  bdReference<bdByteBuffer> m_unencPayload;
};

/* 1846 */
struct bdReference<bdMessage>
{
  bdMessage *m_ptr;
};

/* 1847 */
const struct bdReceivedMessage
{
  bdReference<bdMessage> m_message;
  bdReference<bdConnection> m_connection;
};

/* 1848 */
struct bdDispatchInterceptorVtbl
{
  void *(__cdecl *__vecDelDtor)(bdDispatchInterceptor *this, unsigned int);
  bool (__cdecl *accept)(bdDispatchInterceptor *this, bdReceivedMessage *);
};

/* 1849 */
struct bdFastArray<bdDispatchInterceptor *>
{
  bdDispatchInterceptor **m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1850 */
struct bdDispatcher
{
  bdFastArray<bdDispatchInterceptor *> m_interceptors;
};

/* 1851 */
struct bdConnectionStoreConfig
{
  unsigned int m_maxReceiveIterations;
  float m_maxShutdownDuration;
  unsigned int m_maxFlushIterations;
};

/* 1852 */
struct bdAddrHandleRefWrapper
{
  bdReference<bdAddrHandle> m_handle;
};

/* 1853 */
struct bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node
{
  bdReference<bdConnection> m_data;
  bdAddrHandleRefWrapper m_key;
  bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node *m_next;
};

/* 1854 */
struct bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper>::Node **m_map;
  bdAddrHandleRefWrapper m_hashClass;
};

/* 1855 */
struct __declspec(align(8)) bdConnectionStore
{
  bdSocketRouter *m_socket;
  bdHashMap<bdAddrHandleRefWrapper,bdReference<bdConnection>,bdAddrHandleRefWrapper> m_connectionMap;
  bdConnectionStore::bdConnectionStoreStatus m_status;
  bdDispatcher m_dispatcher;
  bdStopwatch m_shutdownTimer;
  bdAddressMap *m_addrMap;
  bdConnectionStoreConfig m_config;
};

/* 1856 */
struct bdNATTypeDiscoveryPacket
{
  char m_type;
  unsigned __int16 m_protocolVersion;
  bdNATTypeDiscoveryPacket::bdNATTypeDiscoveryPacketRequest m_request;
};

/* 1857 */
struct bdNATTypeDiscoveryConfig
{
  unsigned int m_NtdcsMaxResends;
  float m_NtdcsSendTimeout;
};

/* 1858 */
struct bdNATTypeDiscoveryClient
{
  bdSocket *m_socket;
  bdAddr m_serverAddr1;
  bdAddr m_serverAddr2;
  bdAddr m_mappedAddr;
  bdNATType m_NATType;
  bdNATTypeDiscoveryClient::bdNATTypeDiscoveryClientState m_state;
  char m_resends;
  bdStopwatch m_timer;
  bdNATTypeDiscoveryConfig m_config;
};

/* 1859 */
struct bdIPDiscoveryConfig
{
  char m_retries;
  float m_requestTimeout;
};

/* 1860 */
struct bdIPDiscoveryClient
{
  bdSocket *m_socket;
  bdAddr m_serverAddr;
  bdAddr m_publicAddr;
  bdStopwatch m_timer;
  bdIPDiscoveryClient::bdIPDiscoveryClientStatus m_status;
  bdIPDiscoveryConfig m_config;
  unsigned int m_retries;
};

/* 1861 */
struct __declspec(align(8)) bdRunnable
{
  bdRunnableVtbl *vfptr;
  bool m_stop;
};

/* 1862 */
struct bdRunnableVtbl
{
  void *(__cdecl *__vecDelDtor)(bdRunnable *this, unsigned int);
  unsigned int (__cdecl *run)(bdRunnable *this, void *);
  void (__cdecl *stop)(bdRunnable *this);
};

/* 1863 */
struct bdGetHostByNameConfig
{
  float m_timeout;
};

/* 1865 */
struct bdThreadArgs
{
  void *m_args;
  bdRunnable *m_runnable;
  bdThread *m_thread;
};

/* 1864 */
struct __declspec(align(8)) bdThread
{
  bdRunnable *m_runnable;
  bdThreadArgs m_threadArgs;
  void *m_handle;
  bool m_isRunning;
  unsigned int m_stackSize;
  unsigned int m_priority;
};

/* 1866 */
struct __cppobj bdGetHostByName : bdRunnable
{
  bdStopwatch m_timer;
  bdGetHostByName::bdStatus m_status;
  bdThread *m_thread;
  bdGetHostByNameConfig m_config;
  bdSockAddr m_addresses[4];
  unsigned int m_numAddresses;
  int m_handle;
  unsigned int m_threadStackSize;
};

/* 1867 */
struct __declspec(align(4)) bdUPnPConfig
{
  float m_discoveryTimeout;
  float m_responseTimeout;
  float m_connectTimeout;
  bdUPnPConfig::bdUPnPRunMode m_runMode;
  unsigned int m_discoveryRetries;
  bool m_disabled;
  bdInetAddr m_gatewayAddr;
  bool m_onlyUseGateway;
};

/* 1868 */
struct bdArray<bdString>
{
  bdString *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1869 */
struct bdArray<bdInetAddr>
{
  bdInetAddr *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1870 */
struct __declspec(align(8)) bdNetStartParams
{
  bool m_onlineGame;
  unsigned __int16 m_gamePort;
  bdSocket *m_socket;
  bdArray<bdString> m_natTravHosts;
  unsigned __int16 m_natTravPort;
  bdArray<bdInetAddr> m_localAddresses;
  bdAddr m_overridePublicAddr;
  bdNATType m_overrideNATType;
  bool m_useAnyIP;
  unsigned int m_threadStackSize;
  bdSocketRouterConfig m_socketRouterConfig;
};

/* 1871 */
struct bdUPnPDevice
{
  bdUPnPDevice::bdUPnPDeviceState m_state;
  bool m_shutdownRequested;
  bdUPnPDevice::bdUPnPDeviceShutdownType m_shutdownType;
  bdUPnPDevice::bdUPnPPortStatus m_portStatus;
  bdAddr m_deviceAddr;
  bdArray<bdInetAddr> *m_localAddrs;
  bdInetAddr m_localConnectedAddr;
  bdStreamSocket m_streamSocket;
  bool m_isIp;
  bdUPnPConfig m_config;
  unsigned __int16 m_gamePort;
  bdInetAddr m_externalDeviceAddr;
  char m_requestBuffer[2048];
  unsigned int m_requestSize;
  char m_readBuffer[6144];
  unsigned int m_bytesReceived;
  char m_fetchLocation[64];
  char m_controlURL[128];
  bdStopwatch m_connectTimer;
  bdStopwatch m_responseTimer;
};

/* 1872 */
struct __declspec(align(4)) bdUPnP
{
  bdUPnP::bdUPnPState m_state;
  unsigned __int16 m_gamePort;
  bdArray<bdInetAddr> *m_localAddrs;
  bdUPnPConfig m_config;
  bdSocket m_discoverySocket;
  char m_readBuffer[1025];
  unsigned int m_bytesReceived;
  bdUPnPDevice m_device;
  bdUPnPDevice m_cachedDevice;
  bdStopwatch m_discoveryTimer;
  unsigned int m_numDiscoveryAttempts;
  bool m_shutdownRequested;
};

/* 1873 */
struct __declspec(align(8)) bdNetImpl
{
  bdNetImplVtbl *vfptr;
  bdNetStartParams m_params;
  bdConnectionStore m_connectionStore;
  bdSocketRouter *m_socketRouter;
  bdNetImpl::bdNetStatus m_status;
};

/* 1874 */
struct bdNetImplVtbl
{
  void *(__cdecl *__vecDelDtor)(bdNetImpl *this, unsigned int);
};

/* 1875 */
struct __cppobj bdSingleton<bdNetImpl>
{
};

/* 1876 */
struct __cppobj bdNet : bdSingleton<bdNetImpl>
{
};

/* 1877 */
struct __declspec(align(2)) bdAuthTicket
{
  unsigned int m_magicNumber;
  char m_type;
  unsigned int m_titleID;
  unsigned int m_timeIssued;
  unsigned int m_timeExpires;
  unsigned __int64 m_licenseID;
  unsigned __int64 m_userID;
  char m_username[64];
  char m_sessionKey[24];
  char m_usingHashMagicNumber[3];
  char m_hash[4];
};

/* 1878 */
struct bdAuthInfo
{
  unsigned int m_titleID;
  unsigned int m_IVSeed;
  char m_data[128];
  char m_sessionKey[24];
};

/* 1879 */
struct bdFastArray<char [64]>
{
  char (*m_data)[64];
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1880 */
struct __cppobj bdAuthService : bdLobbyConnectionListener
{
  bdFastArray<char [64]> m_usernamesForLicenseResult;
  bdReference<bdLobbyConnection> m_connection;
  unsigned int m_titleID;
  bdReference<bdCommonAddr> m_authServiceAddr;
  bdAuthService::bdStatus m_status;
  bdReference<bdBitBuffer> m_request;
  bdAuthInfo m_authInfo;
  bdAuthTicket m_authTicket;
  char m_userKey[24];
  char m_licenseKey[24];
  bdLobbyErrorCode m_errorCode;
  unsigned __int64 m_sendBufSize;
  unsigned __int64 m_recvBufSize;
  bdGetHostByName m_authLookup;
  char *m_authAddress;
  unsigned __int16 m_authPort;
  bdAddr m_resolvedAuthAddress;
  bool m_isResolved;
  char m_cdKey[86];
  int m_cdKeyTimeToLiveSecs;
  bdRSAKey m_RSAKey;
};

/* 1881 */
struct bdDownloadInterceptor
{
  bdDownloadInterceptorVtbl *vfptr;
};

/* 1882 */
struct bdDownloadInterceptorVtbl
{
  void *(__cdecl *__vecDelDtor)(bdDownloadInterceptor *this, unsigned int);
  unsigned int (__cdecl *handleDownload)(bdDownloadInterceptor *this, void *, unsigned int);
};

/* 1883 */
struct bdUploadInterceptor
{
  bdUploadInterceptorVtbl *vfptr;
};

/* 1884 */
struct bdUploadInterceptorVtbl
{
  void *(__cdecl *__vecDelDtor)(bdUploadInterceptor *this, unsigned int);
  unsigned int (__cdecl *handleUpload)(bdUploadInterceptor *this, void *, unsigned int, unsigned int);
};

/* 1885 */
struct bdSemaphore
{
  void *m_handle;
};

/* 1886 */
struct __cppobj bdHTTPWrapperBase : bdRunnable
{
  bool m_threadExiting;
  bdMutex m_threadMutex;
  bdSemaphore *m_httpSemaphore;
  bdThread *m_thread;
  bdHTTPWrapperBase::bdStatus m_status;
  bdHTTPWrapperBase::bdOperation m_operation;
};

/* 1887 */
struct curl_slist
{
  char *data;
  curl_slist *next;
};

/* 1888 */
struct __cppobj __declspec(align(4)) bdHTTPWrapper : bdHTTPWrapperBase
{
  void *m_curl;
  curl_slist *m_headerList;
  unsigned int m_bytesTransfered;
  unsigned int m_bytesTransferedUp;
  unsigned int m_bytesTransferedDown;
  bdDownloadInterceptor *m_downloadHandler;
  char *m_downloadBuffer;
  unsigned int m_downloadBufferSize;
  bdUploadInterceptor *m_uploadHandler;
  const char *m_uploadBuffer;
  unsigned int m_uploadSize;
  bool m_abortOperation;
  bool m_customVerification;
  float m_dataRate;
  bdStopwatch m_stopwatch;
  char *m_caPath;
  char m_errorBuffer[1024];
  int m_httpErrorCode;
  bool m_verboseOutput;
  bool m_progressMeter;
};

/* 1889 */
struct __cppobj bdAuthHTTPUtility
{
};

/* 1890 */
struct __cppobj bdJSON
{
};

/* 1891 */
struct __declspec(align(8)) bdHTTPAuthService
{
  unsigned int m_titleID;
  bdHTTPAuthService::bdStatus m_status;
  bdAuthInfo m_authInfo;
  bdAuthTicket m_authTicket;
  bdHTTPWrapper m_httpInterface;
  char m_httpAuthRequest[2048];
  char m_httpAuthReply[1024];
  bdLobbyErrorCode m_errorCode;
  const char *m_authAddress;
  unsigned __int16 m_authPort;
};

/* 1892 */
struct __cppobj bdSessionID : bdTaskResult
{
  bdSecurityID m_sessionID;
};

/* 1893 */
struct __declspec(align(8)) bdAntiCheatChallengeParam
{
  bdAntiCheatChallengeParamVtbl *vfptr;
  char *m_data;
  unsigned int m_size;
};

/* 1894 */
struct bdAntiCheatChallengeParamVtbl
{
  void *(__cdecl *__vecDelDtor)(bdAntiCheatChallengeParam *this, unsigned int);
  bool (__cdecl *deserialize)(bdAntiCheatChallengeParam *this, bdReference<bdByteBuffer>);
  unsigned int (__cdecl *sizeOf)(bdAntiCheatChallengeParam *this);
};

/* 1895 */
struct bdArray<bdAntiCheatChallengeParam>
{
  bdAntiCheatChallengeParam *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1896 */
struct bdFastArray<unsigned __int64>
{
  unsigned __int64 *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1897 */
struct bdFastArray<__int64>
{
  __int64 *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1898 */
struct bdAntiCheatResponses
{
  bdAntiCheatResponsesVtbl *vfptr;
  bdFastArray<unsigned __int64> m_challengeIDs;
  bdFastArray<__int64> m_responses;
  unsigned __int16 m_numResponses;
  char m_logMessage[64];
  unsigned int m_logMessageSize;
};

/* 1899 */
struct bdAntiCheatResponsesVtbl
{
  void *(__cdecl *__vecDelDtor)(bdAntiCheatResponses *this, unsigned int);
};

/* 1900 */
struct bdAntiCheatChallenge
{
  bdAntiCheatChallengeVtbl *vfptr;
  unsigned __int16 m_functionID;
  unsigned __int64 m_challengeID;
  bdArray<bdAntiCheatChallengeParam> m_parameters;
};

/* 1901 */
struct bdAntiCheatChallengeVtbl
{
  void *(__cdecl *__vecDelDtor)(bdAntiCheatChallenge *this, unsigned int);
  bool (__cdecl *deserialize)(bdAntiCheatChallenge *this, bdReference<bdByteBuffer>);
};

/* 1902 */
struct bdArray<bdAntiCheatChallenge>
{
  bdAntiCheatChallenge *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 1903 */
struct __cppobj bdAntiCheatChallenges : bdReferencable
{
  bdArray<bdAntiCheatChallenge> *m_challenges;
};

/* 1904 */
struct bdReference<bdAntiCheatChallenges>
{
  bdAntiCheatChallenges *m_ptr;
};

/* 1905 */
struct __cppobj bdConsoleID : bdTaskResult
{
  char m_id[16];
};

/* 1906 */
struct bdMACAddr
{
  char m_data[6];
};

/* 1907 */
struct bdAntiCheat
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1908 */
struct __cppobj __declspec(align(8)) bdSessionInvite : bdTaskResult
{
  unsigned __int64 m_senderID;
  char m_senderName[64];
  bdSessionID m_sessionID;
  char m_attachment[1024];
  unsigned int m_attachmentSize;
};

/* 1909 */
struct __cppobj bdChannelInfo : bdTaskResult
{
  unsigned __int64 m_channelID;
  unsigned int m_numSubscribers;
  unsigned int m_maxSubscribers;
  unsigned __int64 m_adminID;
  bool m_isPasswordRequired;
  bool m_isPublicChannel;
  unsigned int m_dataVersion;
};

/* 1910 */
struct __cppobj __declspec(align(8)) bdChannelMember : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
  unsigned int m_subscribedTimestamp;
};

/* 1911 */
struct __cppobj __declspec(align(8)) bdFeatureBanInfo : bdTaskResult
{
  unsigned __int64 m_category;
  unsigned int m_secondsRemaining;
};

/* 1912 */
struct bdUserAccountID
{
  bdUserAccountIDVtbl *vfptr;
  char m_accountType[10];
  unsigned __int64 m_userID;
};

/* 1913 */
struct bdUserAccountIDVtbl
{
  void *(__cdecl *__vecDelDtor)(bdUserAccountID *this, unsigned int);
};

/* 1914 */
struct __cppobj ContextSerialization
{
};

/* 1915 */
struct bdLobbyEventHandler
{
  bdLobbyEventHandlerVtbl *vfptr;
};

/* 1916 */
struct bdLobbyEventHandlerVtbl
{
  void *(__cdecl *__vecDelDtor)(bdLobbyEventHandler *this, unsigned int);
  _BYTE gap8[24];
  void (__cdecl *onChatChannelUpdate)(bdLobbyEventHandler *this, bdChannelInfo *, bdChannelMember *, char);
  void (__cdecl *onChatChannelUpdate)(bdLobbyEventHandler *this, unsigned __int64, unsigned __int64, char *, char);
  void (__cdecl *onChatChannelMessage)(bdLobbyEventHandler *this, unsigned __int64, unsigned __int64, char *, unsigned int, void *, unsigned int);
  void (__cdecl *onChatChannelUserPromoted)(bdLobbyEventHandler *this, bdChannelInfo *, bdChannelMember *, bdChannelMember *);
  void (__cdecl *onChatChannelUserKicked)(bdLobbyEventHandler *this, bdChannelInfo *, bdChannelMember *, bdChannelMember *, unsigned int, bool);
  void (__cdecl *onInstantMessage)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int, unsigned __int64);
  void (__cdecl *onSessionInvite)(bdLobbyEventHandler *this, bdSessionInvite *);
  void (__cdecl *onNotifyLeave)(bdLobbyEventHandler *this, unsigned __int64, bdSessionID);
  void (__cdecl *onFriendshipProposal)(bdLobbyEventHandler *this);
  void (__cdecl *onTeamProposal)(bdLobbyEventHandler *this);
  void (__cdecl *onNewNotification)(bdLobbyEventHandler *this);
  void (__cdecl *onNewMail)(bdLobbyEventHandler *this);
  void (__cdecl *onMultipleLogon)(bdLobbyEventHandler *this, unsigned __int64);
  void (__cdecl *onChallengesReceived)(bdLobbyEventHandler *this, unsigned __int64, bdReference<bdAntiCheatChallenges>);
  void (__cdecl *onPlayerBanned)(bdLobbyEventHandler *this, unsigned __int64, unsigned int, __int64);
  void (__cdecl *onConsoleBanned)(bdLobbyEventHandler *this, unsigned __int64);
  void (__cdecl *onNotWhiteListed)(bdLobbyEventHandler *this, unsigned __int64);
  void (__cdecl *onMultipleLinkedAccountLogons)(bdLobbyEventHandler *this, bdUserAccountID);
  void (__cdecl *onLinkedAccountStatusChange)(bdLobbyEventHandler *this, bdUserAccountID);
  void (__cdecl *onGlobalInstantMessage)(bdLobbyEventHandler *this, unsigned __int64, char *, void *, unsigned int);
  void (__cdecl *onFeatureBan)(bdLobbyEventHandler *this, bdFeatureBanInfo *);
  void (__cdecl *onGroupMessagingMessage)(bdLobbyEventHandler *this, unsigned __int64, const char *, void *, unsigned int);
  void (__cdecl *onBroadcastMessage)(bdLobbyEventHandler *this, unsigned __int64, const char *, void *, unsigned int);
};

/* 1917 */
struct bdStorage
{
  bdStorageVtbl *vfptr;
  bdRemoteTaskManager *m_remoteTaskManager;
  char m_context[16];
};

/* 1918 */
struct bdStorageVtbl
{
  void *(__cdecl *__vecDelDtor)(bdStorage *this, unsigned int);
};

/* 1919 */
struct bdHashMap<bdString,bdStorage *,bdHashingClass>::Node
{
  bdStorage *m_data;
  bdString m_key;
  bdHashMap<bdString,bdStorage *,bdHashingClass>::Node *m_next;
};

/* 1920 */
struct __declspec(align(8)) bdHashMap<bdString,bdStorage *,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdString,bdStorage *,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1921 */
struct bdTeams
{
  bdTeamsVtbl *vfptr;
  bdRemoteTaskManager *m_remoteTaskManager;
  char m_context[16];
};

/* 1922 */
struct bdTeamsVtbl
{
  void *(__cdecl *__vecDelDtor)(bdTeams *this, unsigned int);
};

/* 1923 */
struct bdHashMap<bdString,bdTeams *,bdHashingClass>::Node
{
  bdTeams *m_data;
  bdString m_key;
  bdHashMap<bdString,bdTeams *,bdHashingClass>::Node *m_next;
};

/* 1924 */
struct __declspec(align(8)) bdHashMap<bdString,bdTeams *,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdString,bdTeams *,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1925 */
struct bdMail
{
  bdMailVtbl *vfptr;
  bdRemoteTaskManager *m_remoteTaskManager;
  char m_context[16];
};

/* 1926 */
struct bdMailVtbl
{
  void *(__cdecl *__vecDelDtor)(bdMail *this, unsigned int);
};

/* 1927 */
struct bdHashMap<bdString,bdMail *,bdHashingClass>::Node
{
  bdMail *m_data;
  bdString m_key;
  bdHashMap<bdString,bdMail *,bdHashingClass>::Node *m_next;
};

/* 1928 */
struct __declspec(align(8)) bdHashMap<bdString,bdMail *,bdHashingClass>
{
  unsigned int m_size;
  unsigned int m_capacity;
  float m_loadFactor;
  unsigned int m_threshold;
  bdHashMap<bdString,bdMail *,bdHashingClass>::Node **m_map;
  bdHashingClass m_hashClass;
};

/* 1929 */
struct bdProfiles
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1930 */
struct bdMessaging
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1931 */
struct bdMatchMaking
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1932 */
struct bdStats
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1933 */
struct bdFriends
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1934 */
struct bdContentUnlock
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1935 */
struct bdEventLog
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1936 */
struct bdTitleUtilities
{
  bdRemoteTaskManager *m_remoteTaskManager;
  bdEventLog *m_eventLog;
};

/* 1937 */
struct bdKeyArchive
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1938 */
struct bdCounter
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1939 */
struct bdGroup
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1942 */
struct __cppobj bdTag : bdTaskResult
{
  unsigned __int64 m_priTag;
  unsigned __int64 m_secTag;
};

/* 1943 */
struct __cppobj bdFileMetaData : bdTaskResult
{
  unsigned __int64 m_fileID;
  unsigned int m_createTime;
  unsigned int m_modifedTime;
  unsigned int m_fileSize;
  unsigned __int64 m_ownerID;
  char m_ownerName[64];
  unsigned __int16 m_fileSlot;
  char m_fileName[128];
  char m_url[384];
  unsigned __int16 m_category;
  unsigned int m_numTags;
  char m_metaData[512];
  unsigned int m_metaDataSize;
  unsigned int m_summaryFileSize;
  bdTag m_tags[60];
  unsigned int m_numCopiesMade;
  unsigned __int64 m_originID;
};

/* 1945 */
struct __cppobj bdURL : bdTaskResult
{
  char m_url[384];
  unsigned __int16 m_serverType;
  char m_serverIndex[128];
  unsigned __int64 m_fileID;
};

/* 1946 */
struct __cppobj __declspec(align(8)) bdPreCopyResult : bdTaskResult
{
  bdURL *m_source;
  char m_destination[384];
  unsigned int m_fileSize;
};

/* 1947 */
struct __cppobj bdSummaryMetaHandler : bdFileMetaData
{
};

/* 1948 */
struct bdHash
{
  bdHashVtbl *vfptr;
};

/* 1950 */
struct __cppobj bdHashMD5 : bdHash
{
};

/* 1940 */
struct bdContentStreamingBase
{
  bdContentStreamingBaseVtbl *vfptr;
  unsigned int m_operation;
  bdContentStreamingBase::bdStatus m_state;
  bdUploadInterceptor *m_uploadHandler;
  bdFileMetaData m_taskData;
  const void *m_uploadData;
  bdFileID *m_uploadFileID;
  bdURL m_URLs[3];
  const void *m_thumbData;
  unsigned int m_thumbDataSize;
  unsigned __int16 m_httpSite;
  bool m_sendChecksum;
  char m_checksum[33];
  char m_clientLocale[16];
  unsigned __int64 m_copySourceFileID;
  bool m_wasCopyingPooledFile;
  bdDownloadInterceptor *m_downloadHandler;
  bdFileMetaData *m_downloadMetaData;
  void *m_downloadData;
  unsigned int m_downloadDataSize;
  unsigned int m_startByte;
  unsigned int m_endByte;
  bdPreCopyResult m_preCopyResults[3];
  bool m_uploadSummary;
  bdSummaryMetaHandler m_summaryMeta;
  bdReference<bdRemoteTask> m_overallTask;
  bdReference<bdRemoteTask> m_remoteTask;
  bdHTTPWrapper m_http;
  bdHashMD5 m_md5Hash;
  bool m_finalizeOnComplete;
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1941 */
struct bdContentStreamingBaseVtbl
{
  void *(__cdecl *__vecDelDtor)(bdContentStreamingBase *this, unsigned int);
  void (__cdecl *handlePreHTTPComplete)(bdContentStreamingBase *this);
  bdReference<bdRemoteTask> *(__cdecl *_postUploadFile)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
  bdReference<bdRemoteTask> *(__cdecl *_postUploadSummary)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
  bdReference<bdRemoteTask> *(__cdecl *_postCopy)(bdContentStreamingBase *this, bdReference<bdRemoteTask> *result);
  unsigned int (__cdecl *getMaxMetaDataSize)(bdContentStreamingBase *this);
};

/* 1944 */
struct __cppobj bdFileID : bdTaskResult
{
  unsigned __int64 m_fileID;
};

/* 1949 */
struct bdHashVtbl
{
  void *(__cdecl *__vecDelDtor)(bdHash *this, unsigned int);
  bool (__cdecl *hash)(bdHash *this, const char *, const unsigned int, char *, unsigned int *);
};

/* 1951 */
struct __cppobj bdContentStreaming : bdContentStreamingBase
{
};

/* 1952 */
struct __cppobj __declspec(align(8)) bdPooledStorage : bdContentStreamingBase
{
  unsigned __int64 m_pooledStoragefileID;
  bool m_fileIDReady;
};

/* 1953 */
struct bdTags
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1954 */
struct bdVoteRank
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1955 */
struct bdTwitter
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1956 */
struct bdFacebook
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1957 */
struct bdFacebookLite
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1958 */
struct bdLinkCode
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1959 */
struct bdDML
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1961 */
struct __cppobj __declspec(align(8)) bdUCDPublicKeyInfo : bdTaskResult
{
  bdUCD *m_requestingUCDService;
  char m_publicKey[140];
};

/* 1960 */
struct bdUCD
{
  bdRemoteTaskManager *m_remoteTaskManager;
  bdRSAKey m_rsaKey;
  bool m_keySet;
  bdUCDPublicKeyInfo m_initPublicKeyResult;
};

/* 1962 */
struct bdCRUX
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1963 */
struct bdUserGroups
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1964 */
struct bdRichPresenceService
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1965 */
struct bdPresenceService
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1966 */
struct bdMarketplace
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1967 */
struct bdSubscription
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1968 */
struct bdFeatureBan
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1969 */
struct bdRelayService
{
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1970 */
struct bdLinkedAccounts
{
  bdLinkedAccountsVtbl *vfptr;
  bdRemoteTaskManager *m_remoteTaskManager;
};

/* 1971 */
struct bdLinkedAccountsVtbl
{
  void *(__cdecl *__vecDelDtor)(bdLinkedAccounts *this, unsigned int);
};

/* 1972 */
struct __cppobj __declspec(align(8)) bdLobbyService : bdLobbyConnectionListener
{
  bdRemoteTaskManager *m_taskManager;
  bdProfiles *m_profiles;
  bdMessaging *m_messaging;
  bdMatchMaking *m_matchMaking;
  bdStats *m_statsManager;
  bdFriends *m_friendsManager;
  bdTeams *m_teamsManager;
  bdStorage *m_storageManager;
  bdContentUnlock *m_contentUnlockManager;
  bdTitleUtilities *m_titleUtilitiesManager;
  bdEventLog *m_eventLogManager;
  bdKeyArchive *m_keyArchive;
  bdCounter *m_counter;
  bdGroup *m_group;
  bdContentStreaming *m_contentStreamingManager;
  bdPooledStorage *m_pooledStorageManager;
  bdTags *m_tags;
  bdVoteRank *m_voteRankManager;
  struct bdTwitch *m_twitch;
  struct bdYouTube *m_youTube;
  bdTwitter *m_twitter;
  bdFacebook *m_facebook;
  bdFacebookLite *m_facebookLite;
  bdLinkCode *m_linkCode;
  bdAntiCheat *m_antiCheat;
  bdDML *m_DML;
  bdUCD *m_UCD;
  bdCRUX *m_crux;
  bdUserGroups *m_userGroups;
  bdRichPresenceService *m_richPresence;
  bdPresenceService *m_presence;
  bdMarketplace *m_marketplace;
  struct bdCommerce *m_commerce;
  bdSubscription *m_subscription;
  bdFeatureBan *m_featureBan;
  struct bdTencent *m_tencent;
  struct bdLeague *m_league;
  bdRelayService *m_relayService;
  bdLinkedAccounts *m_linkedAccounts;
  bdHashMap<bdString,bdStorage *,bdHashingClass> m_storageManagers;
  bdHashMap<bdString,bdTeams *,bdHashingClass> m_teamsManagers;
  bdHashMap<bdString,bdMail *,bdHashingClass> m_mailManagers;
  bdGetHostByName m_LSGLookup;
  char *m_LSGAddress;
  unsigned __int16 m_LSGPort;
  bdAddr m_resolvedLSGAddress;
  bool m_isResolved;
  unsigned int m_titleID;
  bdLobbyEventHandler *m_eventHandler;
  bdReference<bdLobbyConnection> m_lobbyConnection;
  bool m_lobbyConnectionEstablished;
  bdAuthInfo m_authInfo;
  bool m_encryptedConnection;
  unsigned int m_errorCode;
};

/* 1973 */
struct __cppobj bdMatchMakingInfo : bdTaskResult
{
  bdSecurityID m_sessionID;
  char m_hostAddr[255];
  unsigned int m_hostAddrSize;
  unsigned int m_gameType;
  unsigned int m_maxPlayers;
  unsigned int m_numPlayers;
};

/* 1974 */
struct bdSessionParams
{
  bdSessionParamsVtbl *vfptr;
};

/* 1975 */
struct bdSessionParamsVtbl
{
  void *(__cdecl *__vecDelDtor)(bdSessionParams *this, unsigned int);
  void (__cdecl *serialize)(bdSessionParams *this, bdByteBuffer *);
  unsigned int (__cdecl *sizeOf)(bdSessionParams *this);
};

/* 1976 */
struct __cppobj bdPagingToken : bdTaskResultProcessor
{
  bdPagingToken::bdStatus m_status;
  bdSecurityID m_sessionID;
  unsigned int m_numResultsPerPage;
};

/* 1977 */
struct __cppobj bdPerformanceValue : bdTaskResult
{
  unsigned __int64 m_entityID;
  __int64 m_performanceValue;
};

/* 1978 */
struct __cppobj __declspec(align(8)) bdFileInfo : bdTaskResult
{
  unsigned __int64 m_fileID;
  unsigned int m_createTime;
  unsigned int m_modifedTime;
  bdFileInfo::bdVisibility m_visibility;
  unsigned __int64 m_ownerID;
  char m_fileName[128];
  unsigned int m_fileSize;
};

/* 1979 */
struct __cppobj __declspec(align(8)) bdContextUserStorageFileInfo : bdTaskResult
{
  unsigned int m_createTime;
  unsigned int m_modifedTime;
  bdFileInfo::bdVisibility m_visibility;
  bdUserAccountID m_ownerID;
  char m_fileName[128];
  unsigned int m_fileSize;
};

/* 1980 */
struct __cppobj __declspec(align(8)) bdFileData : bdTaskResult
{
  void *m_fileData;
  unsigned int m_fileSize;
};

/* 1981 */
struct __cppobj __declspec(align(8)) bdBoolResult : bdTaskResult
{
  bool m_result;
};

/* 1982 */
struct __cppobj bdStatsInfo : bdTaskResult
{
  unsigned int m_leaderboardID;
  unsigned __int64 m_entityID;
  bdStats::bdWriteType m_writeType;
  __int64 m_rating;
  unsigned __int64 m_rank;
  char m_entityName[65];
  unsigned int m_secondsSinceUpdate;
};

/* 1983 */
struct __cppobj bdSessionNonce : bdTaskResult
{
  unsigned __int64 m_nonce;
};

/* 1984 */
struct bdArbitratedStatsInfo
{
  bdArbitratedStatsInfoVtbl *vfptr;
  unsigned int m_leaderboardID;
  unsigned __int64 m_entityID;
  bdStats::bdWriteType m_writeType;
  __int64 m_rating;
};

/* 1985 */
struct bdArbitratedStatsInfoVtbl
{
  void *(__cdecl *__vecDelDtor)(bdArbitratedStatsInfo *this, unsigned int);
  void (__cdecl *serialize)(bdArbitratedStatsInfo *this, bdByteBuffer *);
  unsigned int (__cdecl *sizeOf)(bdArbitratedStatsInfo *this);
};

/* 1986 */
struct __cppobj bdStatsInfoEx : bdTaskResult
{
  unsigned int m_leaderboardID;
  unsigned int m_error;
  unsigned __int64 m_entityID;
  bdStatsInfo *m_statsInfo;
};

/* 1987 */
struct __cppobj bdFacebookAccount : bdTaskResult
{
  unsigned __int64 m_accountID;
  char m_accountName[128];
};

/* 1988 */
struct __cppobj bdFacebookAttachmentProperty : bdTaskResult
{
  char m_name[50];
  char m_value[70];
  char m_href[1024];
};

/* 1989 */
struct __cppobj __declspec(align(8)) bdFacebookFriend : bdTaskResult
{
  unsigned __int64 m_accountID;
  char m_accountName[128];
  unsigned __int64 m_userID;
  char m_userName[64];
  char m_platformState[64];
  unsigned int m_platformStateLength;
};

/* 1990 */
struct __cppobj __declspec(align(8)) bdFacebookIsRegistered : bdTaskResult
{
  bool m_isRegistered;
};

/* 1991 */
struct __cppobj __declspec(align(8)) bdFacebookProfilePicture : bdTaskResult
{
  unsigned __int64 m_accountID;
  unsigned int m_pictureDataLength;
  char m_pictureData[16384];
};

/* 1992 */
struct __cppobj __declspec(align(8)) bdFacebookUserAttribute : bdTaskResult
{
  unsigned int m_name;
  char m_value[512];
};

/* 1993 */
struct __cppobj __declspec(align(8)) bdFacebookTag : bdTaskResult
{
  unsigned __int64 m_accountID;
  unsigned __int16 m_x;
  unsigned __int16 m_y;
};

/* 1994 */
struct __cppobj bdTagsArray : bdTaskResult
{
  unsigned __int64 m_entityID;
  unsigned int m_numTags;
  bdTag m_tags[60];
};

/* 1995 */
struct __cppobj bdQuotaUsage : bdTaskResult
{
  unsigned int m_usedStorageSpace;
  unsigned int m_usedNumFiles;
  unsigned int m_usedDailyUploadBW;
  unsigned int m_usedDailyDownloadBW;
  unsigned int m_maxStorageSpace;
  unsigned int m_maxNumFiles;
  unsigned int m_maxDailyUploadBW;
  unsigned int m_maxDailyDownloadBW;
};

/* 1996 */
struct __cppobj bdUserGroupInfo : bdTaskResult
{
  unsigned __int64 m_userGroupID;
  char m_userGroupName[64];
};

/* 1997 */
struct __cppobj __declspec(align(8)) bdUserGroupMembershipInfo : bdTaskResult
{
  unsigned __int64 m_userGroupID;
  char m_userGroupName[64];
  unsigned __int64 m_userID;
  __int16 m_userGroupMemberType;
};

/* 1998 */
struct __cppobj bdUserGroupNumMembers : bdTaskResult
{
  unsigned __int64 m_numMembers;
};

/* 1999 */
struct __cppobj __declspec(align(8)) bdUserGroupList : bdTaskResult
{
  unsigned __int64 m_userID;
  unsigned __int64 m_groupList[32];
  unsigned int m_groupCount;
};

/* 2000 */
struct __cppobj bdGroupCount : bdTaskResult
{
  unsigned int m_groupID;
  unsigned int m_groupCount;
};

/* 2001 */
struct __cppobj __declspec(align(8)) bdGroupID : bdTaskResult
{
  unsigned int m_groupID;
};

/* 2002 */
struct __cppobj bdCommonAddrInfo
{
};

/* 2003 */
struct __cppobj __declspec(align(8)) bdDMLInfo : bdTaskResult
{
  char m_countryCode[3];
  char m_country[65];
  char m_region[65];
  char m_city[129];
  char m_timezone[9];
  float m_latitude;
  float m_longitude;
  unsigned int m_asn;
};

/* 2004 */
union DvarValue
{
  bool enabled;
  int integer;
  unsigned int unsignedInt;
  float value;
  float vector[4];
  const char *string;
  char color[4];
};

/* 2005 */
struct $A37BA207B3DDD6345C554D4661813EDD
{
  int stringCount;
  const char *const *strings;
};

/* 2006 */
struct $9CA192F9DB66A3CB7E01DE78A0DEA53D
{
  int min;
  int max;
};

/* 2007 */
struct $251C2428A496074035CACA7AAF3D55BD
{
  float min;
  float max;
};

/* 2008 */
union DvarLimits
{
  $A37BA207B3DDD6345C554D4661813EDD enumeration;
  $9CA192F9DB66A3CB7E01DE78A0DEA53D integer;
  $251C2428A496074035CACA7AAF3D55BD value;
  $251C2428A496074035CACA7AAF3D55BD vector;
};

/* 2009 */
struct dvar_t
{
  const char *name;
  unsigned int flags;
  char type;
  bool modified;
  DvarValue current;
  DvarValue latched;
  DvarValue reset;
  DvarLimits domain;
  bool (__cdecl *domainFunc)(dvar_t *, DvarValue);
  dvar_t *hashNext;
};

/* 2010 */
struct GfxColorization
{
  float powerAndDesaturation[4];
  float scale[3];
  float bias[3];
};

/* 2011 */
struct __cppobj Colorization : GfxColorization
{
  const char *name;
};

/* 2012 */
struct displayFreq_t
{
  unsigned int numerator;
  unsigned int denominator;
};

/* 2013 */
struct trDebugString_t
{
  float xyz[3];
  GfxColor color;
  float scale;
  char text[76];
};

/* 2014 */
struct trDebugLine_t
{
  float start[3];
  float end[3];
  GfxColor color;
  int depthTest;
};

/* 2015 */
struct snd_overlay_info_t
{
  char pszSampleName[128];
  char aliasName[64];
  char entchannel[64];
  char falloffCurve[64];
  char speakerMap[64];
  float fBaseVolume;
  float fCurVolume;
  int dist;
  float fPitch;
  float fSlaveLerp;
  float fSlavePercent;
  float fMasterPercent;
  char masterPriority;
  bool isFiltered;
  int volModIndex;
};

/* 2016 */
struct MemoryFile
{
  char *buffer;
  unsigned __int64 bufferSize;
  unsigned __int64 bufferSizeOriginal;
  unsigned __int64 bytesUsed;
  int segmentIndex;
  unsigned __int64 segmentStart;
  int segmentFullLen;
  bool errorOnOverflow;
  bool memoryOverflow;
  bool compress;
  void (__cdecl *archiveProc)(MemoryFile *, unsigned __int64, void *);
};

/* 2017 */
struct __declspec(align(4)) GfxSkinCacheEntry
{
  unsigned int frameCount;
  int skinnedCachedOffset;
  unsigned __int16 numSkinnedVerts;
};

/* 2018 */
struct clientControllers_t
{
  float angles[4][3];
  float tag_origin_angles[3];
  float tag_origin_offset[3];
};

/* 2019 */
struct __declspec(align(4)) CEntPlayerInfo
{
  clientControllers_t *control;
  char tag[4];
  char animCtrl;
};

/* 2020 */
struct CEntTurretAngles
{
  float pitch;
  float yaw;
};

/* 2021 */
union $7CB6B68332D146DEE65A017831720E19
{
  CEntTurretAngles angles;
  const float *viewAngles;
};

/* 2022 */
struct __declspec(align(8)) CEntTurretInfo
{
  $7CB6B68332D146DEE65A017831720E19 ___u0;
  float barrelPitch;
  bool playerUsing;
  bool remoteTurret;
  char tagIdx_aim;
  char tagIdx_aim_animated;
  char tagIdx_aim_pivot;
  char tagIdx_flash;
  char tagIdx_barrel;
  float barrelRoll;
  bool barrelRollSndLastRotating;
  bool barrelRollSndNotified;
  int barrelRollSndTime;
  char barrelRollSndIndex;
  bool wasOverheat;
};

/* 2023 */
struct $493A051D5A596A95E61931F16959562C
{
  unsigned __int16 wheelFraction[6];
  char wheelBoneIndex[6];
  char wheelSurfaceType[6];
};

/* 2024 */
struct $A0B019BF477FC599608C2EF297843084
{
  unsigned __int16 rotorTilt[2];
  unsigned __int16 rotorSpin;
  unsigned __int16 rotorMaxAngle;
  unsigned __int16 rotorYaw;
  char rotorBoneIndex[12];
};

/* 2025 */
union $CA167C07E9251BFE48B31CDB0B3133BC
{
  $493A051D5A596A95E61931F16959562C __s0;
  $A0B019BF477FC599608C2EF297843084 __s1;
};

/* 2026 */
struct __declspec(align(4)) CEntVehicleInfo
{
  float barrelRoll;
  float time;
  __int16 pitch;
  __int16 yaw;
  __int16 roll;
  __int16 barrelPitch;
  __int16 steerYaw;
  $CA167C07E9251BFE48B31CDB0B3133BC ___u7;
  char boneUsage;
  char tag_body;
  char tag_turret;
  char tag_barrel;
};

/* 2027 */
struct FxSpatialFrame
{
  float quat[4];
  float origin[3];
};

/* 2028 */
struct __declspec(align(8)) FxEffect
{
  FxEffectDef *def;
  int status;
  unsigned int firstElemHandle[3];
  unsigned int firstSortedElemHandle;
  unsigned int firstTrailHandle;
  unsigned int firstSparkFountainHandle;
  unsigned __int16 occlusionQueryHandle;
  unsigned __int16 randomSeed;
  unsigned int owner;
  float lighting[3];
  unsigned __int16 updateCount;
  char markViewmodelClientIndex;
  unsigned __int16 markEntnum;
  unsigned __int16 flags;
  unsigned __int16 bolt;
  char runnerSortOrder;
  volatile int frameCount;
  int msecBegin;
  int msecLastUpdate;
  float distanceTravelled;
  FxSpatialFrame frameAtSpawn;
  FxSpatialFrame frameNow;
  FxSpatialFrame framePrev;
  unsigned int numVectorFields;
  unsigned int vectorFields[8];
  unsigned int pad[3];
  float occlusionFade;
};

/* 2029 */
struct CEntFx
{
  int triggerTime;
  FxEffect *effect;
};

/* 2030 */
union $C6CD5EF529FB336AFC4A8FBDE89A8092
{
  CEntPlayerInfo player;
  CEntTurretInfo turret;
  CEntVehicleInfo vehicle;
  CEntFx fx;
};

/* 2031 */
struct cpose_t
{
  unsigned __int16 lightingHandle;
  char eType;
  char cullIn;
  char isRagdoll;
  int ragdollHandle;
  int killcamRagdollHandle;
  __int64 physObjId;
  float origin[3];
  float angles[3];
  float prevOrigin[3];
  float prevAngles[3];
  GfxSkinCacheEntry skinCacheEntry;
  $C6CD5EF529FB336AFC4A8FBDE89A8092 ___u12;
};

/* 2032 */
struct XAnimParent
{
  unsigned __int16 flags;
  unsigned __int16 children;
};

/* 2033 */
union $60899A70C6DF71099112C96FB921E944
{
  XAnimParts *parts;
  XAnimParent animParent;
};

/* 2034 */
struct XAnimEntry
{
  unsigned __int16 numAnims;
  unsigned __int16 parent;
  $60899A70C6DF71099112C96FB921E944 ___u2;
};

/* 2035 */
struct XAnim_s
{
  unsigned int size;
  XAnimEntry entries[1];
};

/* 2036 */
struct __declspec(align(8)) XAnimTree
{
  XAnim_s *anims;
  unsigned __int16 children;
};

/* 2037 */
struct __declspec(align(8)) centity_s
{
  cpose_t pose;
  LerpEntityState prevState;
  entityState_s nextState;
  int flags;
  char tracerDrawRateCounter;
  char weaponVisTestCounter;
  char surfaceType;
  int previousEventSequence;
  int pickupPredictionTime;
  float lightingOrigin[3];
  XAnimTree *tree;
  centity_s *updateDelayedNext;
  int prevClientNum;
};

/* 2038 */
struct $6CB7272563F4458FB40A4A5E123C4ABA
{
  unsigned __int16 index;
  unsigned __int16 tree;
};

/* 2039 */
union $8925DE4FCCB9891A5F436C8F8D579F98
{
  $6CB7272563F4458FB40A4A5E123C4ABA __s0;
  unsigned __int64 linkPointer;
};

/* 2040 */
struct scr_anim_s
{
  $8925DE4FCCB9891A5F436C8F8D579F98 ___u0;
};

/* 2041 */
struct scr_animtree_t
{
  XAnim_s *anims;
};

/* 2042 */
struct DSkelPartBits
{
  int anim[6];
  int control[6];
  int worldCtrl[6];
  int skel[6];
};

/* 2043 */
struct DSkel
{
  DSkelPartBits partBits;
  int timeStamp;
  DObjAnimMat *mat;
};

/* 2044 */
struct DObj
{
  XAnimTree *tree;
  scr_string_t duplicateParts;
  unsigned __int16 entnum;
  char duplicatePartsSize;
  char numModels;
  char numBones;
  char flags;
  unsigned int ignoreCollision;
  volatile int locked;
  DSkel skel;
  float radius;
  unsigned int hidePartBits[6];
  XModel **models;
};

/* 2045 */
struct $3EFEFDD88B0A831F6BA64BB859190140
{
  int blurredFadeTime;
  int blurredEffectTime;
  int flashWhiteFadeTime;
  int flashShotFadeTime;
  ShockViewTypes type;
};

/* 2046 */
struct $B32C35443884083D3CC13DCD5C8D7874
{
  int fadeTime;
  float kickRate;
  float kickRadius;
};

/* 2047 */
struct $F1B88B46A58404709A6E24557CBA159F
{
  bool affect;
  char loop[64];
  char loopSilent[64];
  char end[64];
  char endAbort[64];
  int fadeInTime;
  int fadeOutTime;
  float drylevel;
  float wetlevel;
  char roomtype[16];
  float channelvolume[128];
  int modEndDelay;
  int loopFadeTime;
  int loopEndDelay;
};

/* 2048 */
struct $52C58A71BD00586BA7DCB8AF66236D72
{
  bool affect;
  int fadeTime;
  float mouseSensitivity;
  float maxPitchSpeed;
  float maxYawSpeed;
};

/* 2049 */
struct $1BC6F870A2CCF543567EAA1D445E0BBA
{
  bool affect;
};

/* 2050 */
struct __declspec(align(4)) shellshock_parms_t
{
  $3EFEFDD88B0A831F6BA64BB859190140 screenBlend;
  $B32C35443884083D3CC13DCD5C8D7874 view;
  $F1B88B46A58404709A6E24557CBA159F sound;
  $52C58A71BD00586BA7DCB8AF66236D72 lookControl;
  $1BC6F870A2CCF543567EAA1D445E0BBA movement;
};

/* 2051 */
struct __declspec(align(8)) shellshock_t
{
  shellshock_parms_t *parms;
  int startTime;
  int duration;
  float sensitivity;
  float viewDelta[2];
  int wantSavedScreen;
  int hasSavedScreen;
  int hasScissor;
  int loopEndTime;
};

/* 2052 */
struct animation_s
{
  char *name;
  __int64 movetype;
  float moveSpeed;
  int nameHash;
  int flags;
  __int16 initialLerp;
  unsigned __int16 duration;
  unsigned __int16 localMeleeVictimAnimIndex;
  char noteType;
  char aimSet;
  char leanSet;
  char turns;
  char twitches;
  char syncGroup;
};

/* 2053 */
struct score_t
{
  int client;
  int status;
  int score;
  int ping;
  int deaths;
  int team;
  int kills;
  int rank_mp;
  int prestige_mp;
  const char *rankDisplayLevel;
  int assists;
  int extrascore0;
  int extrascore1;
  int adrenaline;
  Material *hStatusIcon;
  Material *hRankIcon;
};

/* 2054 */
struct animScriptCondition_t
{
  int index;
  unsigned int value[2];
};

/* 2055 */
struct animScriptCommand_t
{
  __int16 bodyPart;
  __int16 animIndex;
  __int16 animDuration;
};

/* 2056 */
struct __declspec(align(4)) animScriptItem_t
{
  int numConditions;
  animScriptCondition_t conditions[3];
  int numCommands;
  animScriptCommand_t commands[11];
};

/* 2057 */
union $14E55C473980A88EEF229AD53D618FB2
{
  scriptAnimMoveTypes_t moveType;
};

/* 2058 */
struct animScriptTransition_t
{
  animScriptTransitionTriggerType_t triggerType;
  $14E55C473980A88EEF229AD53D618FB2 triggerParam;
  scriptAnimMoveTypes_t targetMoveType;
};

/* 2059 */
struct animScriptAimSets_t
{
  __int16 aim_1;
  __int16 aim_2;
  __int16 aim_3;
  __int16 aim_4;
  __int16 aim_6;
  __int16 aim_7;
  __int16 aim_8;
  __int16 aim_9;
};

/* 2060 */
struct animScriptLeanSets_t
{
  __int16 lean_left;
  __int16 lean_right;
};

/* 2061 */
struct animScriptIdleTurns_t
{
  __int16 turnleft;
  __int16 turnright;
};

/* 2062 */
struct animScriptIdleTwitches_t
{
  __int16 twitches[5];
  int numTwitches;
  float cycleLength;
};

/* 2063 */
struct __declspec(align(8)) animScript_t
{
  int numItems;
  animScriptItem_t *items[64];
  int numTransitions;
  animScriptTransition_t *transitions[16];
  int flags;
};

/* 2064 */
struct aimAnimSet_t
{
  unsigned __int16 aim_parent;
  unsigned __int16 aim_1;
  unsigned __int16 aim_2;
  unsigned __int16 aim_3;
  unsigned __int16 aim_4;
  unsigned __int16 aim_6;
  unsigned __int16 aim_7;
  unsigned __int16 aim_8;
  unsigned __int16 aim_9;
};

/* 2065 */
struct animScriptData_t
{
  animation_s animations[1640];
  unsigned int numAnimations;
  animScript_t scriptAnims[1][57];
  animScript_t scriptEvents[24];
  animScriptItem_t scriptItems[1320];
  int numScriptItems;
  animScriptTransition_t scriptTransitions[512];
  int numScriptTransitions;
  animScriptAimSets_t scriptAimSets[64];
  animScriptLeanSets_t scriptLeanSets[2];
  animScriptIdleTurns_t scriptIdleTurns[48];
  int numScriptIdleTurns;
  animScriptIdleTwitches_t scriptIdleTwitches[48];
  int numScriptIdleTwitches;
  scr_animtree_t animTree;
  unsigned __int16 torsoAnim;
  unsigned __int16 legsAnim;
  unsigned __int16 codeAnim;
  aimAnimSet_t stndrdAimAnims;
  aimAnimSet_t strafeAimAnims;
  unsigned __int16 lean_parent;
  unsigned __int16 lean_left;
  unsigned __int16 lean_right;
  __int16 torsoAnimPackMap[1640];
  __int16 torsoAnimUnpackMap[256];
  __int16 legsAnimPackMap[1640];
  __int16 legsAnimUnpackMap[1024];
};

/* 2066 */
struct __declspec(align(8)) lerpFrame_t
{
  float yawAngle;
  int yawing;
  float pitchAngle;
  int pitching;
  int animationNumber;
  animation_s *animation;
  int animationTime;
  float oldFramePos[3];
  float prevMovingPlatformOrigin[3];
  float prevMovingPlatformAngles[3];
  float animSpeedScale;
  int oldFrameSnapshotTime;
  bool movingPlatformOriginValid;
};

/* 2067 */
struct playerAnimState_t
{
  unsigned int legsAnim;
  unsigned int torsoAnim;
};

/* 2068 */
struct characterAnimState_t
{
  unsigned __int16 animClass;
  unsigned __int16 animState;
  unsigned __int16 animEntry;
  unsigned __int16 animAimRoot;
  int animTime;
};

/* 2069 */
struct nameplateMedia_t
{
  Material *friendly;
  Material *enemy;
};

/* 2070 */
struct nameplateSet_t
{
  char friendlyIndex;
  char enemyIndex;
  char prevFriendlyIndex;
  char prevEnemyIndex;
  nameplateMedia_t media[2];
};

/* 2071 */
struct $6FDE62F1F60D8ECD15D1CE501ACB010C
{
  scr_animtree_t tree;
  scr_anim_s torso;
  scr_anim_s legs;
  scr_anim_s stndrd_aim_parent;
  scr_anim_s stndrd_aim_1;
  scr_anim_s stndrd_aim_2;
  scr_anim_s stndrd_aim_3;
  scr_anim_s stndrd_aim_4;
  scr_anim_s stndrd_aim_6;
  scr_anim_s stndrd_aim_7;
  scr_anim_s stndrd_aim_8;
  scr_anim_s stndrd_aim_9;
  scr_anim_s strafe_aim_parent;
  scr_anim_s strafe_aim_1;
  scr_anim_s strafe_aim_2;
  scr_anim_s strafe_aim_3;
  scr_anim_s strafe_aim_4;
  scr_anim_s strafe_aim_6;
  scr_anim_s strafe_aim_7;
  scr_anim_s strafe_aim_8;
  scr_anim_s strafe_aim_9;
  scr_anim_s lean_parent;
  scr_anim_s lean_left;
  scr_anim_s lean_right;
};

/* 2072 */
struct __declspec(align(4)) DObjModel_s
{
  XModel *model;
  scr_string_t boneName;
  bool ignoreCollision;
};

/* 2073 */
struct characterAnimData_s
{
  int flags;
  float animRate;
  float distanceIn2D;
  float distanceOut2D;
  float distanceInZ;
  float distanceOutZ;
  int endScriptAnimTableIndex;
};

/* 2074 */
union $2101AF9725B4B38C887E6107D291A618
{
  playerAnimState_t playerAnim;
  characterAnimState_t characterAnim;
};

/* 2075 */
struct characterInfo_t
{
  int entityNum;
  int infoValid;
  int nextValid;
  team_t team;
  team_t oldteam;
  unsigned int perks[2];
  char model[64];
  char attachModelNames[6][64];
  char attachTagNames[6][64];
  unsigned int partBits[6];
  int leftHandGun;
  int dobjDirty;
  Weapon iDObjWeapon;
  bool weaponNotVisible;
  bool hideWeapon;
  bool hideLeftHandWeapon;
  bool hideRocket;
  bool usingKnife;
  bool usingThrownWeapon;
  bool usingKillstreakTrigger;
  bool knifeInRightHand;
  XAnimTree *pXAnimTree;
  lerpFrame_t legs;
  lerpFrame_t torso;
  float legsYawTurnTimer;
  int legsYawTurnDirection;
  int legsPredictingForThisAnim;
  int isLocalMeleeVictim;
  float lerpMoveDir;
  float lerpLean;
  float playerAngles[3];
  int usingAnimState;
  int animTreeDirty;
  $2101AF9725B4B38C887E6107D291A618 ___u33;
  float fTorsoPitch;
  float fWaistPitch;
  rootMotionInfo_s rootMotion;
  int rootMotionReceivedTime;
  characterAnimData_s animData;
  int meleeChargeEnt;
  clientControllers_t control;
  unsigned int clientConditions[17][2];
  int stanceTransitionTime;
  int dualWielding;
  int isFemale;
  nameplateSet_t nameplateSet;
  int emissiveBlendStart;
  int emissiveBlendDuration;
  float emissiveBlendStartStrength;
  float emissiveBlendTargetStrength;
};

/* 2076 */
struct clientInfo_t
{
  int clientNum;
  char name[32];
  int rank_mp;
  int prestige_mp;
  int rank_alien;
  int prestige_alien;
  char clanAbbrev[8];
  int location;
  int health;
  unsigned int playerCardPatch;
  unsigned int playerCardBackground;
  char isMLGSpectator;
  ClientCustomizationInfo customization;
  int game_extrainfo;
  Material *rankIconHandle;
  const char *rankDisplayLevel;
};

/* 2077 */
struct bgs_t
{
  animScriptData_t animScriptData;
  $6FDE62F1F60D8ECD15D1CE501ACB010C generic_human;
  scr_animtree_t animClassTrees[8];
  int time;
  int deltaTime;
  int latestSnapshotTime;
  int frametime;
  int anim_user;
  XModel *(__cdecl *GetXModel)(const char *);
  DObj *(__cdecl *CreateDObj)(DObjModel_s *, unsigned __int16, XAnimTree *, int, LocalClientNum_t, int);
  unsigned __int16 (__cdecl *AttachWeapon)(DObjModel_s *, unsigned __int16, characterInfo_t *, Weapon, Weapon, int *, int *, const unsigned int *);
  unsigned __int16 (__cdecl *BodyModel)(DObjModel_s *, unsigned __int16, entityState_s *, LocalClientNum_t, const char *);
  void (__cdecl *SafeDObjFree)(int, LocalClientNum_t);
  int (__cdecl *GetOrigin)(LocalClientNum_t, int, float *);
  int (__cdecl *GetAngles)(LocalClientNum_t, int, float *);
  DObj *(__cdecl *GetDObj)(int, LocalClientNum_t);
  void *(__cdecl *AllocXAnim)(unsigned __int64);
  characterInfo_t characterinfo[36];
  clientInfo_t clientinfo[12];
};

/* 2078 */
struct ClientVoicePacket_t
{
  char data[256];
  int dataSize;
};

/* 2079 */
struct voiceCommunication_t
{
  ClientVoicePacket_t voicePackets[10];
  int voicePacketCount;
  int voicePacketLastTransmit;
  int packetsPerSec;
  int packetsPerSecStart;
};

/* 2080 */
struct ScoreboardInfo
{
  int teamScores[2];
  ScoreInfo clientScores[12];
};

/* 2081 */
struct __declspec(align(8)) clSnapshot_s
{
  playerState_s ps;
  ScoreboardInfo scores;
  int valid;
  int snapFlags;
  int serverTime;
  int messageNum;
  int deltaNum;
  int ping;
  int cmdNum;
  int numEntities;
  int numClients;
  int parseEntitiesIndex;
  int parseClientsIndex;
  int parseOmnvarsIdx;
  int numAgents;
  int parseAgentsIndex;
  unsigned int scriptablesParseCount;
  unsigned int scriptablesParseIndex;
  int serverCommandNum;
};

/* 2082 */
struct outPacket_t
{
  int p_cmdNumber;
  int p_serverTime;
  int p_realtime;
};

/* 2083 */
struct gameState_t
{
  int stringOffsets[3428];
  char stringData[131072];
  int dataCount;
};

/* 2084 */
struct ClientArchiveData
{
  int serverTime;
  float origin[3];
  float velocity[3];
  int bobCycle;
  int movementDir;
  PlayerVehicleState playerVehStateClientArchive;
};

/* 2085 */
struct clientDebugStringInfo_t
{
  int max;
  int num;
  trDebugString_t *strings;
  int *durations;
};

/* 2086 */
struct clientDebugLineInfo_t
{
  int max;
  int num;
  trDebugLine_t *lines;
  int *durations;
};

/* 2087 */
struct clientDebug_t
{
  int prevFromServer;
  int fromServer;
  clientDebugStringInfo_t clStrings;
  clientDebugStringInfo_t svStringsBuffer;
  clientDebugStringInfo_t svStrings;
  clientDebugLineInfo_t clLines;
  clientDebugLineInfo_t svLinesBuffer;
  clientDebugLineInfo_t svLines;
};

/* 2088 */
struct clientLogo_t
{
  int startTime;
  int duration;
  int fadein;
  int fadeout;
  Material *material[2];
};

/* 2089 */
struct Glyph
{
  unsigned __int16 letter;
  char x0;
  char y0;
  char dx;
  char pixelWidth;
  char pixelHeight;
  float s0;
  float t0;
  float s1;
  float t1;
};

/* 2090 */
struct Font_s
{
  const char *fontName;
  int pixelHeight;
  int glyphCount;
  Material *material;
  Material *glowMaterial;
  Glyph *glyphs;
};

/* 2091 */
struct vidConfig_t
{
  unsigned int sceneWidth;
  unsigned int sceneHeight;
  unsigned int displayWidth;
  unsigned int displayHeight;
  char omitRTFlags;
  unsigned __int16 shadowTileResSmall;
  unsigned __int16 shadowTileResLarge;
  displayFreq_t displayFrequency;
  unsigned int monitorWidth;
  unsigned int monitorHeight;
  int displayMode;
  float windowAspectRatio;
  float displayAspectRatio;
  float sceneAspectRatio;
  float aspectRatioScenePixel;
  float aspectRatioDisplayPixel;
};

/* 2092 */
struct ClientMatchData
{
  char def[64];
  char data[1400];
};

/* 2093 */
struct XNADDR
{
  char addrBuff[36];
};

/* 2094 */
struct SkelMemoryPool
{
  char buffer[262144];
};

/* 2095 */
struct ScriptableWorld
{
  unsigned __int16 partCount;
  unsigned int data[124];
};

/* 2096 */
struct clientStatic_t
{
  int quit;
  int hunkUsersStarted;
  char servername[256];
  int rendererStarted;
  int soundStarted;
  int inUpdateSound;
  int uiStarted;
  int frametime;
  float frametime_base;
  int realtime;
  bool gpuSyncedPrevFrame;
  bool inputUpdatedPrevFrame;
  clientLogo_t logo;
  float mapCenter[3];
  int lastServerPinged;
  int pingedServerCount;
  int totalServersParsed;
  int pingUpdateSource;
  Material *whiteMaterial;
  Material *consoleMaterial;
  Font_s *consoleFont;
  vidConfig_t vidConfig;
  clientDebug_t debug;
  int doVidRestart;
  char downloadList[1024];
  ClientMatchData matchData;
  XNADDR xnaddrs[12];
  volatile int scriptError;
  float debugRenderPos[3];
  int skelTimeStamp;
  volatile int skelMemPos;
  SkelMemoryPool skelMemPools[2];
  char *skelMemoryStart;
  bool allowedAllocSkel;
  int serverId;
  gameState_t gameState;
  clSnapshot_s noDeltaSnapshot;
  int nextNoDeltaEntity;
  entityState_s noDeltaEntities[1024];
  ScriptableWorld noDeltaScriptables;
  int isInvitePending;
  unsigned int clientRankCount;
  unsigned __int64 clientRankXUID[36];
  int clientRankValue[36];
};

/* 2097 */
struct __declspec(align(8)) clientUIActive_t
{
  bool active;
  bool isRunning;
  bool cgameInitialized;
  bool cgameInitCalled;
  int keyCatchers;
  connstate_t connectionState;
  int nextScrollTime;
  int dpadNextTime;
  int dpadLatestKey;
  char itemsUnlocked[320];
  bool itemsUnlockedInited;
  bool itemsUnlockedLastGameDirty;
  unsigned __int16 itemsUnlockedLastGame[16];
  int itemsUnlockedLastGameCount;
  char *itemsUnlockedBuffer;
  int itemsUnlockedLocalClientNum;
  int itemsUnlockedControllerIndex;
  int itemsUnlockedStatsSource;
};

/* 2098 */
struct ScriptableArchiveData
{
  unsigned int worldCount;
  unsigned int worldIndex;
  ScriptableWorld world[16];
};

/* 2099 */
struct clientActive_t
{
  bool usingAds;
  int timeoutcount;
  clSnapshot_s snap;
  int oldSnapServerTime;
  int oldServerTime;
  int extrapolatedSnapshot;
  bool alwaysFalse;
  int serverTime;
  int oldFrameServerTime;
  int serverTimeDelta;
  int newSnapshots;
  int serverId;
  char mapname[64];
  int mapcrc;
  int parseEntitiesIndex;
  int parseClientsIndex;
  int parseOmnvarsIdx;
  int mouseDx[2];
  int mouseDy[2];
  int mouseIndex;
  bool stanceHeld;
  StanceState stance;
  StanceState stancePosition;
  int stanceTime;
  bool wasSprinting;
  Weapon cgameUserCmdWeapon;
  Weapon cgameUserCmdOffHand;
  int cgameUserCmdAlternate;
  float cgameFOVSensitivityScale;
  float cgameMaxPitchSpeed;
  float cgameMaxYawSpeed;
  float cgameKickAngles[3];
  float cgameOrigin[3];
  float cgameVelocity[3];
  PlayerVehicleState cgamePlayerVehState;
  int cgameBobCycle;
  int cgameMovementDir;
  int cgameExtraButtons;
  int cgamePredictedDataServerTime;
  float clViewangles[3];
  usercmd_s cmds[128];
  int cmdNumber;
  ClientArchiveData clientArchive[256];
  int clientArchiveIndex;
  int packetBackupCount;
  int packetBackupMask;
  int parseEntitiesCount;
  int parseClientsCount;
  int parseOmnvarsCount;
  outPacket_t outPackets[16];
  clSnapshot_s snapshots[16];
  entityState_s parseEntities[9600];
  clientState_s parseClients[192];
  OmnvarData parseOmnvars[4096];
  int parseAgentsCount;
  int parseAgentsIndex;
  agentState_s parseAgents[384];
  ScriptableArchiveData parseScriptables;
};

/* 2100 */
struct netadr_s
{
  netadrtype_t type;
  char ip[4];
  unsigned __int16 port;
  netsrc_t localNetID;
  unsigned int addrHandleIndex;
};

/* 2101 */
struct netProfilePacket_t
{
  int iTime;
  int iSize;
  int bFragment;
};

/* 2102 */
struct netProfileStream_t
{
  netProfilePacket_t packets[60];
  int iCurrPacket;
  int iBytesPerSecond;
  int iLastBPSCalcTime;
  int iCountedPackets;
  int iCountedFragments;
  int iFragmentPercentage;
  int iLargestPacket;
  int iSmallestPacket;
};

/* 2103 */
struct netProfileInfo_t
{
  netProfileStream_t send;
  netProfileStream_t recieve;
};

/* 2104 */
struct __declspec(align(8)) netchan_t
{
  int outgoingSequence;
  netsrc_t sock;
  int dropped;
  int incomingSequence;
  netadr_s remoteAddress;
  int fragmentSequence;
  int fragmentLength;
  char *fragmentBuffer;
  int fragmentBufferSize;
  int unsentFragments;
  int unsentFragmentStart;
  int unsentLength;
  char *unsentBuffer;
  int unsentBufferSize;
  netProfileInfo_t prof;
};

/* 2105 */
struct clientConnection_t
{
  int qport;
  int clientNum;
  int lastPacketTime;
  netadr_s serverAddress;
  int connectLastSendTime;
  int connectPacketCount;
  char serverMessage[256];
  int challenge;
  int checksumFeed;
  int reliableSequence;
  int reliableAcknowledge;
  char reliableCommands[128][1024];
  int serverMessageSequence;
  int serverCommandSequence;
  int lastExecutedServerCommand;
  char serverCommands[128][1024];
  bool isServerRestarting;
  netchan_t netchan;
  char netchanOutgoingBuffer[2048];
  char netchanIncomingBuffer[131072];
  netProfileInfo_t OOBProf;
  unsigned int statPacketsToSend;
  int statPacketSendTime[31];
  unsigned int loadoutPacketsToSend;
  int loadoutPacketSendTime[8];
  unsigned int currentGamestatePacket;
};

/* 2106 */
struct CG_HudLighting_Public
{
  bool enable;
};

/* 2107 */
struct __declspec(align(4)) XAnimState
{
  float currentAnimTime;
  float oldTime;
  __int16 cycleCount;
  __int16 oldCycleCount;
  float goalTime;
  float goalWeight;
  float weight;
  float rate;
  bool instantWeightChange;
};

/* 2108 */
struct XAnimInfo
{
  unsigned __int16 notifyChild;
  __int16 notifyIndex;
  scr_string_t notifyName;
  unsigned __int16 notifyType;
  unsigned __int16 prev;
  unsigned __int16 next;
  unsigned __int16 children;
  unsigned __int16 parent;
  unsigned __int16 animIndex;
  scr_string_t animToModel;
  $60899A70C6DF71099112C96FB921E944 ___u10;
  XAnimState state;
};

/* 2109 */
struct scrMemTreePub_t
{
  char *mt_buffer;
};

/* 2110 */
struct __declspec(align(4)) RefString
{
  volatile int data;
  char str[1];
};

/* 2111 */
struct playerEntity_t
{
  int bPositionToADS;
  float fLastIdleFactor;
  float baseMoveOrigin[3];
  float baseMoveAngles[3];
};

/* 2112 */
struct viewDamage_t
{
  int time;
  int duration;
  float dir[3];
  float yaw;
  float playerYaw;
  float playerDir[3][3];
  damageType type;
};

/* 2113 */
struct hudElemSoundInfo_t
{
  int lastPlayedTime;
};

/* 2114 */
struct snapshot_s
{
  playerState_s ps;
  ScoreboardInfo scores;
  OmnvarData omnvars[256];
  int snapFlags;
  int ping;
  int serverTime;
  int numEntities;
  int numClients;
  entityState_s entities[768];
  clientState_s clients[12];
  int numAgents;
  agentState_s agents[24];
  ScriptableWorld scriptableWorld;
  int serverCommandSequence;
};

/* 2115 */
struct GfxViewport
{
  int x;
  int y;
  int width;
  int height;
};

/* 2116 */
struct RefdefView
{
  float tanHalfFovX;
  float tanHalfFovY;
  float org[3];
  float axis[3][3];
  float zNear;
};

/* 2117 */
struct GfxDepthOfField
{
  float viewModelStart;
  float viewModelEnd;
  float nearStart;
  float nearEnd;
  float farStart;
  float farEnd;
  float nearBlur;
  float farBlur;
};

/* 2118 */
struct GfxFilm
{
  bool enabled;
  float brightness;
  float contrast;
  float desaturation;
  float desaturationDark;
  bool invert;
  float tintDark[3];
  float tintMedium[3];
  float tintLight[3];
};

/* 2119 */
struct GfxMaterialBloom
{
  float radius;
  float pinch;
  float intensity;
  float luminanceCutoff;
  float desaturation;
};

/* 2120 */
struct GfxMaterialBloomHQ
{
  bool enable;
  float haziness;
  float gamma;
  float desaturation;
};

/* 2121 */
struct GfxLightScale
{
  float diffuseScale;
  float specularScale;
};

/* 2122 */
struct __declspec(align(4)) GfxCompositeFx
{
  GfxFilm film;
  float distortionScale[3];
  float blurRadius;
  float distortionMagnitude;
  float frameRate;
  int lastUpdate;
  int frame;
  int startMSec;
  int currentTime;
  int duration;
  bool enabled;
  bool scriptEnabled;
};

/* 2123 */
struct GfxLight
{
  char type;
  char canUseShadowMap;
  char unused[2];
  float color[3];
  float dir[3];
  float up[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  unsigned int spotShadowIndex;
  float cucRotationOffsetRad;
  float cucRotationSpeedRad;
  float cucScrollVector[2];
  float cucScaleVector[2];
  float cucTransVector[2];
  GfxLightDef *def;
};

/* 2124 */
struct __declspec(align(8)) GfxColorizationSet
{
  float lowAndHighEndPoints[4];
  float midEndPoints[4];
  float alternateDepthScaleAndBias[2];
  Material *alternateMaskMaterial;
  GfxColorization colorization;
  GfxColorization colorizationAlternate;
  GfxColorization colorizationLow;
  GfxColorization colorizationMid;
  GfxColorization colorizationHigh;
  char flags;
};

/* 2125 */
struct GfxToneMapping
{
  float toeStrength[3];
  float toeAngleNumerator[3];
  float toeAngleDenominator[3];
  float linearStrength[3];
  float linearAngle[3];
  float shoulderStrength[3];
  float whitePoint[3];
  float exposure[3];
  float adaptationRates[2];
};

/* 2126 */
struct __declspec(align(8)) GfxColorGrading
{
  GfxColorizationSet colorizationSet;
  GfxToneMapping toneMapping;
  Material *colorLUTMaterial;
  bool enabled;
};

/* 2127 */
struct SSAOControls
{
  float strength;
  float power;
};

/* 2128 */
struct RimLightingControls
{
  float rimLightPitch;
  float rimLightHeading;
  float rimLightDiffuseIntensity;
  float rimLightSpecIntensity;
  float rimLightBias;
  float rimLightPower;
  float rimLightColor[3];
};

/* 2129 */
struct GfxVolumeLightScatter
{
  bool enabled;
  float lightColor[3];
  float attenuation[3];
  float depthAttenuation[2];
  float backgroundDistance;
};

/* 2130 */
struct __declspec(align(8)) refdef_t
{
  GfxViewport displayViewport;
  RefdefView view;
  float viewOffset[3];
  float viewOffsetPrev[3];
  int time;
  int frameTime;
  bool daltonize;
  float blurRadius;
  bool uiBlur;
  GfxDepthOfField dof;
  GfxFilm film;
  GfxMaterialBloom materialBloom;
  GfxMaterialBloomHQ materialBloomHQ;
  GfxLightScale charPrimaryLightScale;
  GfxLightScale viewModelPrimaryLightScale;
  float charAmbience[3];
  float viewModelAmbience[3];
  GfxCompositeFx waterSheetingFx;
  float ssrFade;
  GfxViewport ssrSourceDisplayViewport;
  GfxLight primaryLights[1];
  unsigned int primaryLightsAnimated[1];
  GfxViewport scissorViewport;
  bool useScissorViewport;
  bool viewModelHasDistortion;
  char forceSunShadowsGenerate;
  bool playerTeleported;
  LocalClientNum_t localClientNum;
  float primaryLightOverride;
  GfxColorGrading colorGrading;
  SSAOControls ssao;
  RimLightingControls rimLighting;
  GfxVolumeLightScatter volumeLightScatter;
  float unlitSurfaceHDRScalar;
  float litSurfaceHDRScalar;
  float hdrSkyIntensity;
  float hdrSkyColorTint[3];
};

/* 2131 */
struct WeaponXAnim
{
  XAnim_s xanim;
  XAnimEntry entries[124];
};

/* 2132 */
struct ClientPlayerWeaponInfo
{
  XModel *handModel;
  XModel *gogglesModel;
  XModel *knifeModel;
  Weapon weapon;
  Weapon turretWeapon;
  bool hideReticle;
  bool isAlternate;
  bool isWeaponHidden;
  WeaponXAnim animsTwoHanded;
  WeaponXAnim animsTwoHandedAltMode;
  WeaponXAnim animsRightHanded;
  WeaponXAnim animsLeftHanded;
  WeaponXAnim animsTurret;
};

/* 2133 */
struct $F6DFD6D87F75480A1EF1906639406DF5
{
  int time;
  int duration;
};

/* 2134 */
struct PlayerDiveView
{
  float diveYaw;
  float roll;
};

/* 2135 */
struct visionSetVarsBase_t
{
  bool filmEnable;
  float filmBrightness;
  float filmContrast;
  float filmDesaturation;
  float filmDesaturationDark;
  bool filmInvert;
  float filmLightTint[3];
  float filmMediumTint[3];
  float filmDarkTint[3];
  bool charPrimaryUseTweaks;
  float charPrimaryDiffuseScale;
  float charPrimarySpecularScale;
  float charLightAmbient[3];
  bool viewModelPrimaryUseTweaks;
  float viewModelPrimaryDiffuseScale;
  float viewModelPrimarySpecularScale;
  float viewModelLightAmbient[3];
  float primaryLightOverride;
  bool materialBloomHQEnable;
  float materialBloomHQHaziness;
  float materialBloomHQGamma;
  float materialBloomHQDesaturation;
  float materialBloomIntensity;
  float materialBloomRadius;
  float materialBloomPinch;
  float materialBloomLuminanceCutoff;
  float materialBloomDesaturation;
  bool volumeLightScatter;
  float volumeLightScatterLinearAtten;
  float volumeLightScatterQuadraticAtten;
  float volumeLightScatterAngularAtten;
  float volumeLightScatterDepthAttenNear;
  float volumeLightScatterDepthAttenFar;
  float volumeLightScatterBackgroundDistance;
  float volumeLightScatterColor[3];
  float ssaoStrength;
  float ssaoPower;
  float ssaoBlurRadius;
  float rimLightPitch;
  float rimLightHeading;
  float rimLightDiffuseIntensity;
  float rimLightSpecIntensity;
  float rimLightBias;
  float rimLightPower;
  float rimLightColor[3];
  char overrideExistingMask;
  float unlitSurfaceHDRScalar;
  float litSurfaceHDRScalar;
  float hdrSkyIntensity;
  float hdrSkyColorTint[3];
};

/* 2136 */
struct __declspec(align(8)) ColorizationSet
{
  const char *name;
  float lowAndHighEndPoints[4];
  float midEndPoints[4];
  float alternateDepthScaleAndBias[2];
  Colorization *colorization;
  Colorization *colorizationAlternate;
  Colorization *colorizationLow;
  Colorization *colorizationMid;
  Colorization *colorizationHigh;
  Material *alternateMaskMaterial;
  char flags;
};

/* 2137 */
struct __cppobj ToneMapping : GfxToneMapping
{
  const char *name;
};

/* 2138 */
struct ColorGrading
{
  ColorizationSet *colorizationSet;
  ToneMapping *toneMapping;
  Material *colorLUTMaterial;
};

/* 2139 */
struct __cppobj visionSetVars_t : visionSetVarsBase_t
{
  ColorGrading colorGrading;
};

/* 2140 */
struct __cppobj interpolationVisionSetVars_t : visionSetVarsBase_t
{
  GfxColorGrading colorGrading;
};

/* 2141 */
struct visionSetLerpData_t
{
  int timeStart;
  int timeDuration;
  visionSetLerpStyle_t style;
};

/* 2142 */
struct FogBase
{
  float startDist;
  float maxOpacity;
  bool sunFogEnabled;
  float sunBeginFadeAngle;
  float sunEndFadeAngle;
  float sunFogScale;
  float sunDir[3];
  float skyFogIntensity;
  float skyFogMinAngle;
  float skyFogMaxAngle;
};

/* 2143 */
struct __cppobj GfxFog : FogBase
{
  int startTime;
  int finishTime;
  GfxColor color;
  float density;
  GfxColor sunColor;
};

/* 2144 */
struct ClientVisionSetData
{
  visionSetVars_t visionSetPreLoaded[4];
  char visionSetPreLoadedName[4][64];
  int visionSetPreLoadedUsedTime[4];
  interpolationVisionSetVars_t visionSetFrom[7];
  interpolationVisionSetVars_t visionSetTo[7];
  interpolationVisionSetVars_t visionSetCurrent[7];
  interpolationVisionSetVars_t visionSetPrevious;
  visionSetLerpData_t visionSetLerpData[7];
  char visionName[7][64];
  bool visionBlendActive[7];
  bool thermalVisionActive;
  bool remoteMissileCam;
  bool painVisionActive;
  float painVisionLerp;
  int postApplyLerpTimeStart;
  int postApplyLerpTimeDuration;
  float postApplyLerpStart;
  float postApplyLerpDest;
  float postApplyLerpCurrent;
  GfxFog lastClientFog;
  bool scriptFogActive;
  int scriptFogLerpStartTime;
  int scriptFogLerpEndTime;
};

/* 2145 */
struct $BE9F66374A020A9809EEAF403416A176
{
  float aimSpreadScale;
};

/* 2146 */
struct transPlayerState_t
{
  int otherFlags;
  int damageEvent;
  int eventSequence;
  int events[4];
  int unpredictableEventSequence;
  int unpredictableEvents[4];
};

/* 2147 */
struct __declspec(align(8)) HudGrenade
{
  float origin[3];
  Material *material;
  float lerpColorAmount;
};

/* 2148 */
struct HudSplash
{
  int splashIndex;
  int splashStartTime;
  int splashDuration;
  int optionalNumParam;
};

/* 2149 */
struct ShieldHitDelayedEvent
{
  unsigned int eventParm;
};

/* 2150 */
struct CG_HudLighting_State
{
  unsigned __int16 lightingHandle;
  int primaryLightEnvIndex;
  int previousPrimaryLightEnvIndex;
  int lightChangeTime;
  float forceAdditiveColor[3];
  float forceAdditiveColorStart[3];
  float forceAdditiveColorEnd[3];
  int forceAdditiveChangeTime;
  int forceAdditiveChangeDuration;
};

/* 2151 */
struct ContextLeanInfo
{
  bool wasADS;
  bool wasLeaning;
  bool leanLeft;
  bool canLeanLeft;
  bool canLeanRight;
  bool adsWallInFront;
  float gunTiltFraction;
  float initialLeanPosition[3];
};

/* 2152 */
struct __declspec(align(4)) SpawnTraceRecord
{
  SpawnPointVisibility isVisible;
  float origin[3];
  bool shouldSkip;
};

/* 2153 */
struct __declspec(align(16)) workerTrace_t
{
  trace_t trace;
  volatile unsigned int state;
  float start[3];
  float end[3];
};

/* 2154 */
struct __declspec(align(64)) SpawnWorkerTrace
{
  workerTrace_t workerTrace;
  SpawnTraceRecord *record;
};

/* 2155 */
struct SpawnTraceGlob
{
  unsigned __int16 cachedEntIndex;
  scr_string_t cachedEntName;
  unsigned __int16 count;
  SpawnTraceRecord *next;
  SpawnTraceRecord spawns[32];
  __declspec(align(128)) SpawnWorkerTrace traces[6];
};

/* 2156 */
struct ClientVehicleData
{
  float acceleration[4];
};

/* 2157 */
struct GfxSSRGlobals
{
  char source;
  float fade;
};

/* 2158 */
struct $053570D54990368B0C72ECA5BD25B9D9
{
  _BYTE gap0[340016];
  cpose_t viewModelPose;
};

/* 2159 */
union $F403D5229D5513D258B3A51E5E74C1EB
{
  _BYTE bgs[340080];
  $053570D54990368B0C72ECA5BD25B9D9 __s1;
};

/* 2160 */
struct cg_s
{
  playerState_s predictedPlayerState;
  centity_s *predictedPlayerEntity;
  playerEntity_t playerEntity;
  int predictedErrorTime;
  float predictedError[3];
  int clientNum;
  LocalClientNum_t localClientNum;
  DemoType demoType;
  CubemapShot cubemapShot;
  int cubemapSize;
  int hiResShotMode;
  int renderScreen;
  int latestSnapshotNum;
  int latestSnapshotTime;
  snapshot_s *snap;
  snapshot_s *nextSnap;
  snapshot_s activeSnapshots[2];
  float frameInterpolation;
  int frametime;
  int time;
  int oldTime;
  int physicsTime;
  int groundEntityTime;
  unsigned int lastGroundSurfaceType;
  int mapRestart;
  int spectatingThirdPerson;
  int renderingThirdPerson;
  float landChange;
  int landTime;
  int lastMantleflags;
  int lastProneCrawlInputTime;
  float heightToCeiling;
  refdef_t refdef;
  float refdefViewAngles[3];
  float baseGunAngles[3];
  float aimAssistEyeOrigin[3];
  float aimAssistViewOrigin[3];
  float aimAssistViewAngles[3];
  float thirdPersonGunPitch;
  float thirdPersonGunYaw;
  float thirdPersonAdsLerp;
  float swayViewAngles[3];
  float swayAngles[3];
  float swayOffset[3];
  float recoilAngles[3];
  float recoilSpeed[3];
  int iEntityLastType[2048];
  XModel *pEntityLastXModel[2048];
  Weapon iEntityLastWeaponID[2048];
  float zoomSensitivity;
  int vehicleInitView;
  float prevVehicleInvAxis[3][3];
  char objectiveText[1024];
  char scriptMainMenu[256];
  int scoresRequestTime;
  int numScores;
  int teamScores[4];
  int teamPings[4];
  int teamPlayers[4];
  score_t scores[12];
  int showScores;
  int scoreFadeTime;
  int scoresTop;
  int scoresOffBottom;
  int scoresBottom;
  Material *statusIconCache[8];
  int crosshairClientNum;
  unsigned int crosshairTraceDistance;
  int cursorHintType;
  int cursorHintEntType;
  int cursorHintTime;
  int cursorHintFade;
  unsigned int cursorHintString;
  int cursorHintDualWield;
  int lastClipFlashTime;
  InvalidCmdHintType invalidCmdHintType;
  Weapon invalidCmdHintWeapon;
  int invalidCmdHintTime;
  int lastHealthPulseTime;
  int lastHealthLerpDelay;
  int lastHealthClient;
  float lastHealth;
  int showHud;
  float bloodOverlayAlpha;
  int contactEntity;
  float platformAngleVelocity[3];
  int clientSideVisionSetsEnabled;
  int voiceTime;
  Weapon weaponSelect;
  int weaponSelectInAlt;
  int weaponSelectTime;
  int weaponForcedSelectTime;
  Weapon weaponLatestPrimary;
  Weapon fauxWeaponSelect;
  int lastWeaponState;
  ClientPlayerWeaponInfo playerWeaponInfo;
  Weapon prevViewmodelWeapon;
  int prevWeaponFlags;
  int prevDualWielding;
  int prevHybridScope;
  int hybridToggleScopeState;
  float hybridScopeFOVFrac;
  int weaponRecoilTime[2];
  int weaponWalkEndTime;
  Weapon equippedOffHand;
  viewDamage_t viewDamage[12];
  int damageTime;
  float damageX;
  float damageY;
  float damageValue;
  float viewFade;
  int v_dmg_time;
  int v_dmg_stun_time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float xyspeed;
  float kickAVel[3];
  float kickAngles[3];
  float offsetAngles[3];
  float gunPitch;
  float gunYaw;
  float gunXOfs;
  float gunYOfs;
  float gunZOfs;
  float viewModelAxis[4][3];
  float rumbleScale;
  float compassNorthYaw;
  float compassNorth[2];
  Material *compassMapMaterial;
  float compassMapUpperLeft[2];
  float compassMapWorldSize[2];
  int compassFadeTime;
  int healthFadeTime;
  int ammoFadeTime;
  int sprintFadeTime;
  int offhandFadeTime;
  int offhandFlashTime;
  shellshock_t shellshock;
  $F6DFD6D87F75480A1EF1906639406DF5 testShock;
  int holdBreathTime;
  int holdBreathInTime;
  int holdBreathDelay;
  float holdBreathFrac;
  bool painVisionSoundActive;
  PlayerDiveView diveView;
  float radarProgress;
  float selectedLocation[2];
  float selectedLocationAngle;
  int inKillCam;
  int killCamStartTime;
  int killCamEndTime;
  bool killCamFirstFrameRan;
  int killCamEntity;
  int invalidKillCamEntity;
  KillCamEntityType killCamEntityType;
  int killCamLastEntityNum;
  float killCamLastEntityOrg[3];
  float killCamLastEntityAngles[3];
  KillCamEntityRestState killCamEntityRestState;
  int killCamLookAtEntity;
  float killCamLookAt[3];
  float killCamHelicopterOffset[3];
  int killCamStoppedTime;
  float killCamStoppedDecelTime;
  float killCamStoppedPos[3];
  float killCamStoppedVel[3];
  float killCamPrevBombOrigin[3];
  int killCamLerpEndTime;
  float killCamOldViewAngles[3];
  float killCamOldViewOrg[3];
  $F403D5229D5513D258B3A51E5E74C1EB ___u170;
  cpose_t viewModelPoseLeftHand;
  ClientVisionSetData cvsData;
  int stagedVisionStateTo;
  int stagedVisionStateFrom;
  int stagedVisionStateEndTime;
  int stagedVisionStateStartTime;
  int lastClientTriggerDuration;
  int extraButtons;
  bool breathPressedLastFrame;
  bool playerTeleported;
  bool playerScriptTeleported;
  int stepViewStart;
  float stepViewChange;
  $BE9F66374A020A9809EEAF403416A176 lastFrame;
  float lastFrameViewPos[3];
  int oldCommandTime;
  float oldOrigin[3];
  float oldViewangles[3];
  transPlayerState_t oldTransPlayerState;
  playerEvents_t playerEvents;
  int weaponIdleTime;
  hudElemSoundInfo_t hudElemSound[32];
  HudGrenade hudGrenades[32];
  unsigned int hudGrenadeCount;
  HudSplash splashes[4];
  bool remoteMissileCamInitialized;
  float remoteMissileCamAngles[3];
  int remoteMissileCamEnt;
  unsigned int teamFxPlaying[2];
  Weapon killcamFXWeapons[5];
  float currentRadarJamLevel;
  float radarJammedDist;
  float turretFov;
  float motionTrackerPrevCenter[2];
  float motionTrackerProgress;
  float targetPosCached[2];
  int targetPosCachedTime;
  int delayedShieldHitEventsCount;
  ShieldHitDelayedEvent delayedShieldHitEvents[2];
  Material *thermalBodyMaterial;
  int explosiveStuckWarningTime;
  int recentKilledByClientNum;
  int recentKilledByTime;
  int recentVictimClientNums[8];
  int recentVictimTimes[8];
  int recentVictimIndex;
  int playerVehicleEntity;
  int playerVehicleAudioOverride;
  int cinematicAudioOverride;
  int prevViewIndex;
  CG_HudLighting_State hudLightingState;
  bool clientCollisionLinked;
  int sightedEnemyFools;
  PlayerWeaponAnimArrays weapAnimArrays;
  ContextLeanInfo leanInfo;
  int sprintBreathNextTime;
  int sprintBreathPrevLevel;
  bool sprintBreathOut;
  char slideSurfaceType[12];
  bool slideRumblePlaying;
  unsigned __int16 spawnTraceEntIndex;
  SpawnTraceGlob spawnTraceGlob;
  int scriptAudioZoneOverride;
  int scriptPrevAudioZoneOverride;
  int scriptAudioZoneFadeTargetTime;
  int scriptAudioZoneFadeStartTime;
  int scriptAudioZoneOverrideB;
  float scriptAudioZoneOverrideLerp;
  int scriptAudioZoneOverrideFlags;
  unsigned int ctOcclusionZoneA;
  unsigned int ctOcclusionZoneB;
  unsigned int ctFilterZoneA;
  unsigned int ctFilterZoneB;
  unsigned int ctReverbZoneA;
  unsigned int ctReverbZoneB;
  unsigned int ctMixZoneA;
  unsigned int ctMixZoneB;
  unsigned int ctAmbientZoneA;
  unsigned int ctAmbientZoneB;
  unsigned int ctAmbientEventZoneA;
  unsigned int ctAmbientEventZoneB;
  unsigned int ctPlayerAdsrZone;
  unsigned int bMotionTracker;
  int viewModelUVAnimTimeOverride;
  int viewModelUVAnimTimeOverrideEnabled;
  ClientVehicleData clientVehicle;
  team_t lastMLGSpectatedTeam;
  int MLGMinimapHighlightClientNum;
  bool outlineMLGPlayers;
  GfxSSRGlobals ssr;
};

/* 2161 */
struct cgs_t
{
  int viewX;
  int viewY;
  int viewWidth;
  int viewHeight;
  float viewAspect;
  float viewMult;
  int serverCommandSequence;
  int processedSnapshotNum;
  int localServer;
  char gametype[32];
  char szHostName[256];
  bool hardcore;
  int maxclients;
  int privateClients;
  char mapname[64];
  int gameEndTime;
  XModel *gameModels[1024];
  shellshock_parms_t holdBreathParams;
  char teamChatMsgs[8][160];
  int teamChatMsgTimes[8];
  int teamChatPos;
  int teamLastChatPos;
  float compassWidth;
  float compassHeight;
  float compassY;
  characterInfo_t corpseinfo[8];
  characterInfo_t agentCorpseInfo[8];
  bool entUpdateToggleContextKey;
  XAnim_s *helicopterAnims;
};

/* 2162 */
struct WeaponHand
{
  DObj *viewModelDObj;
  XAnimTree *tree;
  XModel *rocketModel;
  int iPrevAnim;
  int hasAnimTree;
};

/* 2163 */
struct $3D0F408E3DEECDDF5A7B6AF876E6F88B
{
  unsigned int entIndex;
};

/* 2164 */
union SndEntHandle
{
  $3D0F408E3DEECDDF5A7B6AF876E6F88B field;
  int handle;
};

/* 2165 */
struct CmdArgs
{
  int nesting;
  LocalClientNum_t localClientNum[8];
  int controllerIndex[8];
  int argc[8];
  const char **argv[8];
};

/* 2166 */
struct scr_const_t
{
  scr_string_t _;
  scr_string_t active;
  scr_string_t aim_highest_bone;
  scr_string_t aim_vis_bone;
  scr_string_t all;
  scr_string_t allies;
  scr_string_t angles;
  scr_string_t auto_ai;
  scr_string_t auto_nonai;
  scr_string_t axis;
  scr_string_t back;
  scr_string_t bad_guys;
  scr_string_t bad_path;
  scr_string_t no_path;
  scr_string_t begin_firing;
  scr_string_t begin_firing_left;
  scr_string_t cancel_location;
  scr_string_t chest;
  scr_string_t confirm_location;
  scr_string_t crouch;
  scr_string_t current;
  scr_string_t damage;
  scr_string_t dead;
  scr_string_t death;
  scr_string_t deathshield;
  scr_string_t entitydeleted;
  scr_string_t detonate;
  scr_string_t direct;
  scr_string_t dlight;
  scr_string_t done;
  scr_string_t empty;
  scr_string_t empty_offhand;
  scr_string_t offhand_end;
  scr_string_t end_firing;
  scr_string_t end_firing_left;
  scr_string_t entity;
  scr_string_t explode;
  scr_string_t failed;
  scr_string_t first_person;
  scr_string_t forward;
  scr_string_t fraction;
  scr_string_t free;
  scr_string_t goal;
  scr_string_t goal_changed;
  scr_string_t goal_yaw;
  scr_string_t grenade;
  scr_string_t grenadedanger;
  scr_string_t grenade_fire;
  scr_string_t glass_destroyed;
  scr_string_t missile_fire;
  scr_string_t grenade_pullback;
  scr_string_t missile_stuck;
  scr_string_t info_notnull;
  scr_string_t invisible;
  scr_string_t invalid_parent;
  scr_string_t key1;
  scr_string_t key2;
  scr_string_t killanimscript;
  scr_string_t left;
  scr_string_t light;
  scr_string_t manual;
  scr_string_t manual_ai;
  scr_string_t movedone;
  scr_string_t none;
  scr_string_t normal;
  scr_string_t origin;
  scr_string_t other;
  scr_string_t player;
  scr_string_t physics_finished;
  scr_string_t touching_platform;
  scr_string_t position;
  scr_string_t projectile_impact;
  scr_string_t predicted_projectile_impact;
  scr_string_t prone;
  scr_string_t right;
  scr_string_t reload;
  scr_string_t reload_start;
  scr_string_t result;
  scr_string_t reverse;
  scr_string_t rocket;
  scr_string_t rotatedone;
  scr_string_t script_brushmodel;
  scr_string_t script_goal_changed;
  scr_string_t script_model;
  scr_string_t script_origin;
  scr_string_t sentry;
  scr_string_t sentry_offline;
  scr_string_t snd_enveffectsprio_level;
  scr_string_t snd_enveffectsprio_shellshock;
  scr_string_t snd_channelvolprio_holdbreath;
  scr_string_t snd_channelvolprio_pain;
  scr_string_t snd_channelvolprio_shellshock;
  scr_string_t spawned;
  scr_string_t sprint_begin;
  scr_string_t sprint_end;
  scr_string_t stairs;
  scr_string_t stand;
  scr_string_t suppression;
  scr_string_t suppression_end;
  scr_string_t surfacetype;
  scr_string_t tag_ai_aim_target;
  scr_string_t tag_aim;
  scr_string_t tag_aim_animated;
  scr_string_t tag_aim_pivot;
  scr_string_t unresolved_collision;
  scr_string_t player_pushed;
  scr_string_t tag_brass;
  scr_string_t tag_butt;
  scr_string_t tag_clip;
  scr_string_t tag_eye;
  scr_string_t tag_flash;
  scr_string_t tag_flash_silenced;
  scr_string_t tag_flash_11;
  scr_string_t tag_flash_2;
  scr_string_t tag_flash_22;
  scr_string_t tag_flash_3;
  scr_string_t tag_fx;
  scr_string_t tag_inhand;
  scr_string_t tag_knife_fx;
  scr_string_t tag_blade_off;
  scr_string_t tag_laser;
  scr_string_t tag_origin;
  scr_string_t tag_weapon;
  scr_string_t tag_player;
  scr_string_t tag_ik_target;
  scr_string_t tag_camera;
  scr_string_t tag_weapon_left;
  scr_string_t tag_weapon_right;
  scr_string_t tag_weapon_chest;
  scr_string_t tag_stowed_back;
  scr_string_t tag_shield_back;
  scr_string_t tag_stowed_hip_rear;
  scr_string_t tag_gasmask;
  scr_string_t tag_gasmask2;
  scr_string_t tag_sync;
  scr_string_t tag_motion_tracker_tl;
  scr_string_t tag_motion_tracker_bl;
  scr_string_t tag_motion_tracker_br;
  scr_string_t tag_motion_tracker_fx;
  scr_string_t tag_reticle_acog;
  scr_string_t tag_reticle_red_dot;
  scr_string_t tag_reticle_tavor_scope;
  scr_string_t tag_reticle_thermal_scope;
  scr_string_t tag_eotech_reticle;
  scr_string_t tag_magnifier_eotech_reticle;
  scr_string_t target_script_trigger;
  scr_string_t teammode_ffa;
  scr_string_t teammode_axisallies;
  scr_string_t third_person;
  scr_string_t top;
  scr_string_t touch;
  scr_string_t trigger;
  scr_string_t trigger_use;
  scr_string_t trigger_use_touch;
  scr_string_t trigger_damage;
  scr_string_t truck_cam;
  scr_string_t weapon_change;
  scr_string_t weapon_model_change;
  scr_string_t weapon_fired;
  scr_string_t melee_fired;
  scr_string_t weapon_switch_started;
  scr_string_t weapon_taken;
  scr_string_t weapon_dropped;
  scr_string_t weapon_switch_invalid;
  scr_string_t worldspawn;
  scr_string_t flashbang;
  scr_string_t flash;
  scr_string_t smoke;
  scr_string_t frag;
  scr_string_t throwingknife;
  scr_string_t night_vision_on;
  scr_string_t night_vision_off;
  scr_string_t mod_unknown;
  scr_string_t mod_pistol_bullet;
  scr_string_t mod_rifle_bullet;
  scr_string_t mod_explosive_bullet;
  scr_string_t mod_grenade;
  scr_string_t mod_grenade_splash;
  scr_string_t mod_projectile;
  scr_string_t mod_projectile_splash;
  scr_string_t mod_melee;
  scr_string_t mod_head_shot;
  scr_string_t mod_melee_dog;
  scr_string_t mod_melee_alien;
  scr_string_t mod_crush;
  scr_string_t mod_falling;
  scr_string_t mod_suicide;
  scr_string_t mod_trigger_hurt;
  scr_string_t mod_explosive;
  scr_string_t mod_impact;
  scr_string_t script_vehicle;
  scr_string_t script_vehicle_collision;
  scr_string_t script_vehicle_collmap;
  scr_string_t script_vehicle_corpse;
  scr_string_t turret_deactivate;
  scr_string_t turret_fire;
  scr_string_t turret_no_vis;
  scr_string_t turret_not_on_target;
  scr_string_t turret_on_target;
  scr_string_t turret_on_vistarget;
  scr_string_t turret_pitch_clamped;
  scr_string_t turret_rotate_stopped;
  scr_string_t turret_yaw_clamped;
  scr_string_t turretstatechange;
  scr_string_t turretownerchange;
  scr_string_t reached_end_node;
  scr_string_t reached_wait_node;
  scr_string_t reached_wait_speed;
  scr_string_t near_goal;
  scr_string_t tag_wheel_front_left;
  scr_string_t tag_wheel_front_right;
  scr_string_t tag_wheel_back_left;
  scr_string_t tag_wheel_back_right;
  scr_string_t tag_wheel_middle_left;
  scr_string_t tag_wheel_middle_right;
  scr_string_t bl_rotor1;
  scr_string_t bl_rotor2;
  scr_string_t bl_rotor3;
  scr_string_t br_rotor1;
  scr_string_t br_rotor2;
  scr_string_t br_rotor3;
  scr_string_t fl_rotor1;
  scr_string_t fl_rotor2;
  scr_string_t fl_rotor3;
  scr_string_t fr_rotor1;
  scr_string_t fr_rotor2;
  scr_string_t fr_rotor3;
  scr_string_t tag_detach;
  scr_string_t tag_popout;
  scr_string_t tag_body;
  scr_string_t tag_turret;
  scr_string_t tag_turret_base;
  scr_string_t tag_barrel;
  scr_string_t front_left;
  scr_string_t front_right;
  scr_string_t back_left;
  scr_string_t back_right;
  scr_string_t middle_left;
  scr_string_t middle_right;
  scr_string_t veh_boatbounce;
  scr_string_t veh_collision;
  scr_string_t veh_predictedcollision;
  scr_string_t veh_leftground;
  scr_string_t veh_landed;
  scr_string_t veh_jolt;
  scr_string_t vehicle_mount;
  scr_string_t vehicle_dismount;
  scr_string_t constrained;
  scr_string_t follow;
  scr_string_t j_head;
  scr_string_t j_neck;
  scr_string_t j_spine4;
  scr_string_t j_spineupper;
  scr_string_t j_spinelower;
  scr_string_t j_mainroot;
  scr_string_t j_left_shoulder;
  scr_string_t j_left_elbow;
  scr_string_t j_left_hand;
  scr_string_t tag_ik_loc_le;
  scr_string_t tag_ik_loc_le_foregrip;
  scr_string_t tag_ik_loc_le_shotgun;
  scr_string_t tag_ik_loc_le_launcher;
  scr_string_t thermal;
  scr_string_t primary;
  scr_string_t offhand;
  scr_string_t item;
  scr_string_t altmode;
  scr_string_t exclusive;
  scr_string_t scavenger;
  scr_string_t primaryoffhand;
  scr_string_t secondaryoffhand;
  scr_string_t actionslot1;
  scr_string_t actionslot2;
  scr_string_t actionslot3;
  scr_string_t actionslot4;
  scr_string_t actionslot5;
  scr_string_t actionslot6;
  scr_string_t actionslot7;
  scr_string_t back_low;
  scr_string_t back_mid;
  scr_string_t back_up;
  scr_string_t pelvis;
  scr_string_t count;
  scr_string_t luinotifyserver;
  scr_string_t auto_change;
  scr_string_t begin;
  scr_string_t call_vote;
  scr_string_t freelook;
  scr_string_t intermission;
  scr_string_t manual_change;
  scr_string_t menuresponse;
  scr_string_t pistol;
  scr_string_t plane_waypoint;
  scr_string_t playing;
  scr_string_t spectator;
  scr_string_t spectating_cycle;
  scr_string_t vote;
  scr_string_t normal_radar;
  scr_string_t fast_radar;
  scr_string_t hardcoreModeOn;
  scr_string_t respawnDelay;
  scr_string_t showKillcam;
  scr_string_t healthRegen;
  scr_string_t friendlyFire;
  scr_string_t radarAlwaysOn;
  scr_string_t inUse;
  scr_string_t justClass;
  scr_string_t defaultClasses;
  scr_string_t tag_engine_left;
  scr_string_t tag_engine_right;
  scr_string_t knife_on;
  scr_string_t knife_off;
  scr_string_t grenade_on;
  scr_string_t grenade_off;
  scr_string_t phone_on;
  scr_string_t phone_off;
  scr_string_t rocket_on;
  scr_string_t rocket_off;
  scr_string_t tag_rocket;
  scr_string_t path_set;
  scr_string_t path_dir_change;
  scr_string_t face_angle_rel;
  scr_string_t face_angle_abs;
  scr_string_t face_motion;
  scr_string_t face_enemy;
  scr_string_t anim_deltas;
  scr_string_t anim_angle_delta;
  scr_string_t code_move;
  scr_string_t code_move_slide;
  scr_string_t gravity;
  scr_string_t no_gravity;
  scr_string_t noclip;
  scr_string_t waypoint_reached;
  scr_string_t goal_reached;
  scr_string_t path_blocked;
  scr_string_t stop_soon;
  scr_string_t traverse_soon;
  scr_string_t traverse_complete;
  scr_string_t traversesoonnotifydist;
  scr_string_t stopsoonnotifydist;
  scr_string_t sharpturnnotifydist;
  scr_string_t allowladders;
  scr_string_t allowjump;
  scr_string_t allowcrouch;
  scr_string_t allowprone;
  scr_string_t anim_will_finish;
  scr_string_t statelocked;
  scr_string_t jumpcost;
  scr_string_t traversecost;
  scr_string_t runcost;
  scr_string_t oriented;
  scr_string_t insolid;
  scr_string_t notinsolid;
  scr_string_t looktarget;
  scr_string_t fs_concrete;
  scr_string_t fs_dirt;
  scr_string_t fs_metal;
  scr_string_t fs_wood;
  scr_string_t up;
  scr_string_t slowmo_active;
  scr_string_t slowmo_passive;
  scr_string_t riotshield_damaged;
  scr_string_t ironsight_on;
  scr_string_t ironsight_off;
  scr_string_t weaponrail_on;
  scr_string_t foregrip_off;
  scr_string_t bipods;
  scr_string_t tag_tip;
  scr_string_t tag_reticle_hamr;
  scr_string_t tag_reticle_on;
  scr_string_t tag_reticle_reflex;
  scr_string_t tag_show_alt;
  scr_string_t tag_shotgun;
  scr_string_t tag_launcher;
  scr_string_t color_blind_toggled;
  scr_string_t name;
  scr_string_t headicon;
  scr_string_t headiconteam;
  scr_string_t maxhealth;
  scr_string_t blade_hide;
  scr_string_t blade_show;
  scr_string_t sessionteam;
  scr_string_t sessionstate;
  scr_string_t score;
  scr_string_t game_extrainfo;
  scr_string_t deaths;
  scr_string_t statusicon;
  scr_string_t kills;
  scr_string_t assists;
  scr_string_t extrascore0;
  scr_string_t extrascore1;
  scr_string_t playercardpatch;
  scr_string_t playercardpatchbacking;
  scr_string_t playercardbackground;
  scr_string_t hasradar;
  scr_string_t isradarblocked;
  scr_string_t radarstrength;
  scr_string_t radarshowenemydirection;
  scr_string_t radarmode;
  scr_string_t forcespectatorclient;
  scr_string_t spectatekillcam;
  scr_string_t killcamentity;
  scr_string_t killcamentitylookat;
  scr_string_t archivetime;
  scr_string_t psoffsettime;
  scr_string_t pers;
  scr_string_t x;
  scr_string_t y;
  scr_string_t z;
  scr_string_t fontscale;
  scr_string_t font;
  scr_string_t alignx;
  scr_string_t aligny;
  scr_string_t horzalign;
  scr_string_t vertalign;
  scr_string_t color;
  scr_string_t alpha;
  scr_string_t label;
  scr_string_t sort;
  scr_string_t foreground;
  scr_string_t lowresbackground;
  scr_string_t hidewhendead;
  scr_string_t hidewheninmenu;
  scr_string_t splatter;
  scr_string_t glowcolor;
  scr_string_t glowalpha;
  scr_string_t archived;
  scr_string_t showinkillcam;
  scr_string_t hidein3rdperson;
  scr_string_t hidewhenindemo;
  scr_string_t enablehudlighting;
  scr_string_t code_classname;
  scr_string_t classname;
  scr_string_t model;
  scr_string_t spawnflags;
  scr_string_t target;
  scr_string_t targetname;
  scr_string_t parentname;
  scr_string_t parentindex;
  scr_string_t health;
  scr_string_t dmg;
  scr_string_t birthtime;
  scr_string_t script_linkname;
  scr_string_t slidevelocity;
  scr_string_t script_noteworthy;
  scr_string_t speed;
  scr_string_t lookahead;
  scr_string_t veh_speed;
  scr_string_t veh_pathspeed;
  scr_string_t veh_transmission;
  scr_string_t veh_pathdir;
  scr_string_t veh_pathtype;
  scr_string_t veh_topspeed;
  scr_string_t veh_brake;
  scr_string_t veh_throttle;
  scr_string_t veh_boost_activated;
  scr_string_t veh_boost_deactivated;
  scr_string_t ai_event;
  scr_string_t animscript;
  scr_string_t attackeraccuracy;
  scr_string_t blockfriendlies;
  scr_string_t dodamagetoall;
  scr_string_t enemy;
  scr_string_t enemy_visible;
  scr_string_t gunshot;
  scr_string_t gunshot_teammate;
  scr_string_t ignoreall;
  scr_string_t ignoreme;
  scr_string_t ignorerandombulletdamage;
  scr_string_t known_event;
  scr_string_t lastattacker;
  scr_string_t maxvisibledist;
  scr_string_t minusedistsq;
  scr_string_t neutral;
  scr_string_t node;
  scr_string_t node_relinquished;
  scr_string_t onlygoodnearestnodes;
  scr_string_t over;
  scr_string_t owner;
  scr_string_t prevnode;
  scr_string_t radius;
  scr_string_t silenced_shot;
  scr_string_t surprisedbymedistsq;
  scr_string_t syncedmeleetarget;
  scr_string_t team3;
  scr_string_t team;
  scr_string_t threatbias;
  scr_string_t threatbiasgroup;
  scr_string_t turretinvulnerability;
  scr_string_t type;
  scr_string_t disableplayeradsloscheck;
  scr_string_t path_enemy;
  scr_string_t maxsightdistsqrd;
  scr_string_t ignoreclosefoliage;
  scr_string_t hindlegstraceoffset;
  scr_string_t bulletwhizby;
  scr_string_t weapon;
  scr_string_t reticle;
  scr_string_t only_sky;
  scr_string_t enemy_sighted;
  scr_string_t enemy_sighted_lost;
  scr_string_t agent;
  scr_string_t agentteam;
  scr_string_t agenthealth;
  scr_string_t agentname;
  scr_string_t ledge;
  scr_string_t falling;
  scr_string_t contact;
  scr_string_t return_pitch;
  scr_string_t land;
  scr_string_t start_blend;
  scr_string_t start_ragdoll;
  scr_string_t search_end;
  scr_string_t mag_eject;
  scr_string_t mag_eject_left;
  scr_string_t scope_center;
  scr_string_t scope_top;
  scr_string_t scope_cap;
  scr_string_t scriptable;
  scr_string_t body_animate_jnt;
  scr_string_t transients_synced;
  scr_string_t ladder_up;
  scr_string_t ladder_down;
  scr_string_t chyron_message1;
  scr_string_t chyron_message2;
  scr_string_t chyron_message3;
  scr_string_t manual_target;
  scr_string_t state_changed;
  scr_string_t customization_loaded;
  scr_string_t challengeTierNew;
  scr_string_t challengeState;
  scr_string_t challengeProgress;
  scr_string_t ch_prestige;
  scr_string_t ch_prestige_10;
  scr_string_t featureNew;
  scr_string_t killstreakUnlocked;
  scr_string_t iconUnlocked;
  scr_string_t titleUnlocked;
  scr_string_t iconNew;
  scr_string_t titleNew;
  scr_string_t weaponRank;
  scr_string_t playerXuidLow;
  scr_string_t playerXuidHigh;
  scr_string_t prestige;
  scr_string_t escaped;
  scr_string_t headShots;
  scr_string_t revives;
  scr_string_t prestigeShopTokens;
  scr_string_t experience;
  scr_string_t rank;
  scr_string_t extraCustomClassesPrestige;
  scr_string_t extraCustomClassesEntitlement;
  scr_string_t prestigeShopTokensEntitlement;
  scr_string_t hostFailures;
  scr_string_t hostQuits;
  scr_string_t hostSuccesses;
  scr_string_t lastPlayedTime;
  scr_string_t connectionIDChunkLow;
  scr_string_t connectionIDChunkHigh;
  scr_string_t consoleIDChunkLow;
  scr_string_t consoleIDChunkHigh;
  scr_string_t squadMembers;
  scr_string_t privateMatchSquadMembers;
  scr_string_t coopSquadMembers;
  scr_string_t loadouts;
  scr_string_t activeSquadMember;
  scr_string_t privateMatchActiveSquadMember;
  scr_string_t coopActiveSquadMember;
  scr_string_t prestigeDoubleXpMaxTimePlayed;
  scr_string_t prestigeDoubleXpTimePlayed;
  scr_string_t prestigeDoubleXp;
  scr_string_t perks;
  scr_string_t weaponSetups;
  scr_string_t camo;
  scr_string_t buff;
  scr_string_t attachment;
  scr_string_t assaultStreaks;
  scr_string_t supportStreaks;
  scr_string_t defenseStreaks;
  scr_string_t specialistStreaks;
  scr_string_t specialistBonusStreaks;
  scr_string_t abilitiesPicked;
  scr_string_t deathstreak;
  scr_string_t specialGrenade;
  scr_string_t weaponNew;
  scr_string_t attachmentNew;
  scr_string_t camoNew;
  scr_string_t head;
  scr_string_t helmet;
  scr_string_t body;
  scr_string_t patch;
  scr_string_t patchbacking;
  scr_string_t background;
  scr_string_t timePlayedTotal;
  scr_string_t squadMemXP;
  scr_string_t unlockPoints;
  scr_string_t points;
  scr_string_t bestWeapon;
  scr_string_t bestWeaponIndex;
  scr_string_t kdRatio;
  scr_string_t currentWinStreak;
  scr_string_t gamesPlayed;
  scr_string_t winLossRatio;
  scr_string_t playerConnectionHistory;
  scr_string_t nonMigrateableQuits;
  scr_string_t migrateableQuits;
  scr_string_t gameCount;
  scr_string_t deviceConnectionHistory;
  scr_string_t device_id_high;
  scr_string_t device_id_low;
  scr_string_t deviceUseFrequency;
  scr_string_t bandwidthTestCount;
  scr_string_t bandwidthDown;
  scr_string_t bandwidthUp;
  scr_string_t suckedAsHost;
  scr_string_t onWifi;
  scr_string_t map;
  scr_string_t matchID;
  scr_string_t players;
  scr_string_t playerIP;
  scr_string_t a;
  scr_string_t b;
  scr_string_t c;
  scr_string_t d;
  scr_string_t serverTimeTotal;
  scr_string_t serverTimeTotalExceed;
  scr_string_t serverTimeMax;
  scr_string_t serverTimeCount;
  scr_string_t serverTimeExceedCount;
  scr_string_t playerID;
  scr_string_t xuid;
  scr_string_t ucdIDHigh;
  scr_string_t ucdIDLow;
  scr_string_t clanIDHigh;
  scr_string_t clanIDLow;
  scr_string_t duration;
  scr_string_t lives;
  scr_string_t lifeCount;
  scr_string_t spawnPos;
  scr_string_t spawnTime;
  scr_string_t deathPos;
  scr_string_t deathAngles;
  scr_string_t dotOfDeath;
  scr_string_t attackerPos;
  scr_string_t wasTacticalInsertion;
  scr_string_t primaryWeapon;
  scr_string_t primaryAttachments;
  scr_string_t secondaryWeapon;
  scr_string_t secondaryAttachments;
  scr_string_t offhandWeapon;
  scr_string_t equipment;
  scr_string_t attachments;
  scr_string_t modifiers;
  scr_string_t mod;
  scr_string_t killstreak;
  scr_string_t attacker;
  scr_string_t attackerIsJuggernaut;
  scr_string_t kill_timestamp;
  scr_string_t totalXp;
  scr_string_t newEntitlement;
  scr_string_t persistentWeaponsUnlocked;
  scr_string_t persistentPerksUnlocked;
  scr_string_t xp_multiplier;
  scr_string_t xpMultiplier;
  scr_string_t xpMaxMultiplierTimePlayed;
  scr_string_t unlockedCamo;
  scr_string_t unlockedReticles;
  scr_string_t cardIcon;
  scr_string_t cardTitle;
  scr_string_t cardNameplate;
  scr_string_t weeklyChallengeId;
  scr_string_t dailyChallengeId;
  scr_string_t operationsDeadline;
  scr_string_t squadHQ;
  scr_string_t squad_name;
  scr_string_t squad_base;
  scr_string_t squad_mode;
  scr_string_t wins;
  scr_string_t loses;
  scr_string_t win_streak;
  scr_string_t xp;
  scr_string_t reportIndex;
  scr_string_t reports;
  scr_string_t won_match;
  scr_string_t squadName;
  scr_string_t enemyName;
  scr_string_t enemyXuidHigh;
  scr_string_t enemyXuidLow;
  scr_string_t enemyPlatform;
  scr_string_t your_score;
  scr_string_t their_score;
  scr_string_t aiSquadMembers;
  scr_string_t breadCrumbHeader;
  scr_string_t dataLength;
  scr_string_t frequency;
  scr_string_t playerPositions;
  scr_string_t alienPlayerLoadout;
  scr_string_t alienPlayerStats;
  scr_string_t alienSession;
  scr_string_t last_stand_count;
  scr_string_t munition_level;
  scr_string_t support_level;
  scr_string_t offense_level;
  scr_string_t defense_level;
  scr_string_t armor;
  scr_string_t currency;
  scr_string_t defense;
  scr_string_t munition;
  scr_string_t offense;
  scr_string_t skill_points;
  scr_string_t support;
  scr_string_t time;
  scr_string_t pastTitleData;
  scr_string_t playedmw3;
  scr_string_t playedblackops2;
  scr_string_t mw3prestige;
  scr_string_t blackops2prestige;
  scr_string_t nextreadmw3;
  scr_string_t nextreadblackops2;
  scr_string_t gametype;
  scr_string_t recipeName;
  scr_string_t commonOption;
  scr_string_t killstreakRestricted;
  scr_string_t killstreakClassRestricted;
  scr_string_t weaponRestricted;
  scr_string_t weaponClassRestricted;
  scr_string_t attachmentRestricted;
  scr_string_t attachmentClassRestricted;
  scr_string_t perkRestricted;
  scr_string_t perkClassRestricted;
  scr_string_t partyID;
  scr_string_t gamertag;
  scr_string_t splinePlaneReachedNode;
  scr_string_t sprint_slide_begin;
  scr_string_t sprint_slide_end;
  scr_string_t tag_rider;
  scr_string_t firstPlayedSPTime;
  scr_string_t reserved;
  scr_string_t ai_loadout;
  scr_string_t adrenaline;
};

/* 2167 */
struct ScreenPlacement
{
  float scaleVirtualToReal[2];
  float scaleVirtualToFull[2];
  float scaleRealToVirtual[2];
  float realViewportPosition[2];
  float realViewportSize[2];
  float virtualViewableMin[2];
  float virtualViewableMax[2];
  float realViewableMin[2];
  float realViewableMax[2];
  float virtualAdjustableMin[2];
  float virtualAdjustableMax[2];
  float realAdjustableMin[2];
  float realAdjustableMax[2];
  float subScreenLeft;
};

/* 2168 */
struct __declspec(align(2)) VehicleDef
{
  const char *name;
  VehicleType type;
  const char *useHintString;
  int health;
  int quadBarrel;
  int hitClientScriptables;
  float texScrollScale;
  float topSpeed;
  float accel;
  float rotRate;
  float rotAccel;
  float maxBodyPitch;
  float maxBodyRoll;
  float fakeBodyAccelPitch;
  float fakeBodyAccelRoll;
  float fakeBodyVelPitch;
  float fakeBodyVelRoll;
  float fakeBodySideVelPitch;
  float fakeBodyPitchStrength;
  float fakeBodyRollStrength;
  float fakeBodyPitchDampening;
  float fakeBodyRollDampening;
  float fakeBodyBoatRockingAmplitude;
  float fakeBodyBoatRockingPeriod;
  float fakeBodyBoatRockingRotationPeriod;
  float fakeBodyBoatRockingFadeoutSpeed;
  float boatBouncingMinForce;
  float boatBouncingMaxForce;
  float boatBouncingRate;
  float boatBouncingFadeinSpeed;
  float boatBouncingFadeoutSteeringAngle;
  float collisionDamage;
  float collisionSpeed;
  float killcamOffset[3];
  int playerProtected;
  int bulletDamage;
  int armorPiercingDamage;
  int grenadeDamage;
  int projectileDamage;
  int projectileSplashDamage;
  int heavyExplosiveDamage;
  VehiclePhysDef vehPhysDef;
  float boostDuration;
  float boostRechargeTime;
  float boostAcceleration;
  float suspensionTravel;
  float maxSteeringAngle;
  float steeringLerp;
  float minSteeringScale;
  float minSteeringSpeed;
  int disableWheelsTurning;
  int vehHelicopterIsASplinePlane;
  int vehHelicopterLockAltitude;
  int vehHelicopterOffsetFromMesh;
  float vehHelicopterAltitudeOffset;
  float vehHelicopterPitchOffset;
  float vehHelicopterBoundsRadius;
  float vehHelicopterMaxSpeed;
  float vehHelicopterMaxSpeedVertical;
  float vehHelicopterMaxAccel;
  float vehHelicopterMaxAccelVertical;
  float vehHelicopterDecelerationFwd;
  float vehHelicopterDecelerationSide;
  float vehHelicopterDecelerationUp;
  float vehHelicopterMaxYawRate;
  float vehHelicopterMaxYawAccel;
  float vehHelicopterTiltFromVelocity;
  float vehHelicopterTiltFromControllerAxes;
  float vehHelicopterTiltFromAcceleration;
  float vehHelicopterTiltFromDeceleration;
  float vehHelicopterTiltFromFwdAndYaw_VelAtMaxTilt;
  float vehHelicopterTiltFromFwdAndYaw;
  float vehHelicopterTiltMomentum;
  float vehHelicopterTiltSpeed;
  float vehHelicopterMaxPitch;
  float vehHelicopterMaxRoll;
  float vehHelicopterHoverSpeedThreshold;
  float vehHelicopterJitterJerkyness;
  float vehHelicopterLookaheadTime;
  int vehHelicopterSoftCollisions;
  int vehHelicopterUseGroundFX;
  FxEffectDef *vehHelicopterGroundFx;
  FxEffectDef *vehHelicopterGroundWaterFx;
  float vehHelicopterGroundFxDefaultRepeatRate;
  float vehHelicopterGroundFxSlowestRepeatRate;
  float vehHelicopterGroundFxFastestRepeatRate;
  float vehHelicopterGroundFxMinGroundDist;
  float vehHelicopterGroundFxMaxGroundDist;
  float vehSplinePlaneCorridorMaxXVel;
  float vehSplinePlaneCorridorMaxZVel;
  float vehSplinePlaneCorridorMaxXAccel;
  float vehSplinePlaneCorridorMaxZAccel;
  float vehSplinePlaneTangentLookAtRate;
  float vehSplinePlaneMaxPitchSpeed;
  float vehSplinePlaneMaxYawSpeed;
  float vehSplinePlaneMaxRollSpeed;
  float vehSplinePlanePitchSpeedRate;
  float vehSplinePlaneYawSpeedRate;
  float vehSplinePlaneRollSpeedRateUp;
  float vehSplinePlaneRollSpeedRateDown;
  float vehSplinePlaneMaxPitchAccel;
  float vehSplinePlaneMaxYawAccel;
  float vehSplinePlaneMaxRollAccel;
  float vehSplinePlaneYawToRollFactor;
  float vehSplinePlaneRollToYawFactor;
  float vehSplinePlaneRollToYawFactorBlend;
  float vehSplinePlaneMaxPitch;
  float vehSplinePlaneMaxRoll;
  float vehSplinePlaneMaxPitchFromRoll;
  float vehSplinePlaneMaxRollYawOffset;
  float vehSplinePlaneRollYawOffsetThreshold;
  float vehSplinePlaneMaxTiltRoll;
  float vehSplinePlaneMaxTiltPitch;
  float vehSplinePlaneTiltRollRate;
  float vehSplinePlaneTiltPitchRate;
  int camLookEnabled;
  int camRelativeControl;
  int camRemoteDrive;
  float camLerp;
  float camHeight;
  float camRadius;
  float camPitchInfluence;
  float camYawInfluence;
  float camRollInfluence;
  float camFovIncrease;
  float camFovOffset;
  float camFovSpeed;
  float camReturnSpeed;
  float camReturnLerp;
  float camVehicleAnglePitchRate;
  float camVehicleAngleYawRate;
  float camVehicleAngleRollRate;
  int vehCam_UseGDT;
  float vehCam_anglesPitch;
  float vehCam_anglesYaw;
  float vehCam_anglesRoll;
  float vehCam_offsetX;
  float vehCam_offsetY;
  float vehCam_offsetZ;
  float vehCam_radius;
  float vehCam_speedInfluence;
  float vehCam_pitchTurnRate;
  float vehCam_pitchClamp;
  float vehCam_yawTurnRate;
  float vehCam_yawClamp;
  VehCamZOffsetMode vehCam_zOffsetMode;
  float vehCam_anglesPitch3P;
  float vehCam_anglesYaw3P;
  float vehCam_anglesRoll3P;
  float vehCam_offsetX3P;
  float vehCam_offsetY3P;
  float vehCam_offsetZ3P;
  float vehCam_radius3P;
  float vehCam_speedInfluence3P;
  float vehCam_pitchTurnRate3P;
  float vehCam_pitchClamp3P;
  float vehCam_yawTurnRate3P;
  float vehCam_yawClamp3P;
  VehCamZOffsetMode vehCam_zOffsetMode3P;
  const char *turretWeaponName;
  WeaponCompleteDef *turretWeapon;
  float turretHorizSpanLeft;
  float turretHorizSpanRight;
  float turretVertSpanUp;
  float turretVertSpanDown;
  float turretHorizResistLeft;
  float turretHorizResistRight;
  float turretVertResistUp;
  float turretVertResistDown;
  float turretRotRate;
  VehicleTurretFireType turretFireType;
  snd_alias_list_t *turretSpinSnd;
  snd_alias_list_t *turretStopSnd;
  int trophyEnabled;
  float trophyRadius;
  float trophyInactiveRadius;
  int trophyAmmoCount;
  float trophyReloadTime;
  scr_string_t trophyTags[4];
  FxEffectDef *trophyExplodeFx;
  FxEffectDef *trophyFlashFx;
  Material *compassFriendlyIcon;
  Material *compassEnemyIcon;
  Material *compassFriendlyAltIcon;
  Material *compassEnemyAltIcon;
  int compassIconWidth;
  int compassIconHeight;
  snd_alias_list_t *idleLowSnd;
  snd_alias_list_t *idleHighSnd;
  snd_alias_list_t *engineLowSnd;
  snd_alias_list_t *engineHighSnd;
  float engineSndSpeed;
  scr_string_t audioOriginTag;
  snd_alias_list_t *idleLowSndAlt;
  snd_alias_list_t *idleHighSndAlt;
  snd_alias_list_t *engineLowSndAlt;
  snd_alias_list_t *engineHighSndAlt;
  float engineSndSpeedAlt;
  scr_string_t audioOriginTagAlt;
  snd_alias_list_t *turretSpinSndAlt;
  snd_alias_list_t *turretStopSndAlt;
  snd_alias_list_t *engineStartUpSnd;
  int engineStartUpLength;
  snd_alias_list_t *engineShutdownSnd;
  snd_alias_list_t *engineIdleSnd;
  snd_alias_list_t *engineSustainSnd;
  snd_alias_list_t *engineRampUpSnd;
  int engineRampUpLength;
  snd_alias_list_t *engineRampDownSnd;
  int engineRampDownLength;
  snd_alias_list_t *suspensionSoftSnd;
  float suspensionSoftCompression;
  snd_alias_list_t *suspensionHardSnd;
  float suspensionHardCompression;
  snd_alias_list_t *collisionSnd;
  float collisionBlendSpeed;
  snd_alias_list_t *speedSnd;
  float speedSndBlendSpeed;
  const char *surfaceSndPrefix;
  snd_alias_list_t *surfaceSnds[31];
  float surfaceSndBlendSpeed;
  float slideVolume;
  float slideBlendSpeed;
  float inAirPitch;
  const char *soundTriggerOverrideZone;
  bool soundTriggerOverrideReverb;
  bool soundTriggerOverrideMix;
  bool soundTriggerOverrideFilter;
  bool soundTriggerOverrideOcclusion;
  bool soundTriggerOverrideAmbient;
  bool soundTriggerOverrideAmbientEvents;
  bool soundTriggerOverrideADSR;
};

/* 2169 */
struct __declspec(align(4)) pmove_t
{
  playerState_s *ps;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int tracemask;
  int numtouch;
  int touchents[32];
  Bounds bounds;
  float speed;
  int contactEntity;
  int proneChange;
  bool mantleStarted;
  float mantleEndPos[3];
  int mantleDuration;
  float meleeEntOrigin[3];
  float meleeEntVelocity[3];
  int viewChangeTime;
  float viewChange;
  float fTorsoPitch;
  float fWaistPitch;
  int remoteTurretFireTime;
  int lastUpdateCMDServerTime;
  unsigned int groundSurfaceType;
  char handler;
};

/* 2170 */
struct VehicleState
{
  int entity;
  float origin[3];
  float angles[3];
  float velocity[3];
  float angVelocity[3];
  float previousOrigin[3];
  float previousAngles[3];
  float bodyVelocity[3];
  float tilt[2];
  float tiltVelocity[2];
  Bounds bounds;
  int clipmask;
  float groundNormal[3];
  unsigned __int16 splineId;
  unsigned __int16 splineNodeIndex;
  float splineLambda;
  float corridorSpeeds[2];
  float acceleration[3];
};

/* 2171 */
struct pml_t
{
  float forward[3];
  float right[3];
  float up[3];
  float frametime;
  int msec;
  int walking;
  int groundPlane;
  int almostGroundPlane;
  trace_t groundTrace;
  float impactSpeed;
  float previous_origin[3];
  float previous_velocity[3];
  float wishdir[3];
  unsigned int holdrand;
  float platformUp[3];
  int flinch;
  int turning;
};

/* 2172 */
struct GroundTrace
{
  trace_t trace;
  float location[3];
  int onGround;
  int hasGround;
  int validGroundNormal;
};

/* 2173 */
struct BandwidthTestInput
{
  bool clientPresence[12];
  int ourClientNum;
  int totalSlots;
  bool weAreArbitrating;
  void (__cdecl *callback_SendTestStartMsg)(BandwidthTestInput *, int, int);
  void (__cdecl *callback_SendResultMsg)(BandwidthTestInput *, int, int, int);
  void (__cdecl *callback_GenerateTestPacketMsg)(BandwidthTestInput *, char *, int, int, int *);
  void (__cdecl *callback_SendTestPacketMsg)(BandwidthTestInput *, int, char *, int);
  void (__cdecl *callback_CancelTest)(BandwidthTestInput *);
  float resultFudge;
  void *userData;
};

/* 2174 */
struct __cppobj __declspec(align(8)) MatchMakingInfo : bdMatchMakingInfo
{
  int m_memberPLAYLIST;
  int m_memberPLAYLIST_VERSION;
  int m_memberNETCODE_VERSION;
  int m_memberMAPPACKS;
  int m_memberSLOTS_NEEDED_ON_TEAM;
  int m_memberSKILL;
  unsigned int m_memberCOUNTRY_CODE;
  unsigned int m_memberASN;
  float m_memberLATITUDE;
  float m_memberLONGITUDE;
  int m_memberMAX_PRIVATE;
  int m_memberNUM_PRIVATE;
  char m_memberPLATFORM_SESSION_ID[16];
  unsigned int m_memberDATA_CENTRES;
  unsigned int m_memberCOOP_GAME_STATE;
  bdSecurityKey m_securityKey;
  bool m_allowOthersToJoin;
  bool m_dirty;
  bool m_active;
  unsigned int m_timeSinceUpdate;
  bool m_sessionCreated;
};

/* 2175 */
struct BandwidthTestPerClientData
{
  int bytesReceived;
};

/* 2176 */
struct BandwidthTestData
{
  int testIndex;
  int testClientNum;
  int startTimeArbitrator;
  int announceTime;
  int winnerClientNum;
  BandwidthTestPerClientData clientData[12];
  char testClientName[32];
  bool inProgress;
  int startTime;
  int roundsComplete;
  bool receiving;
  int receiveIndex;
  int receiveStartTime;
  int receiveBytes;
  int resultsSendTime;
};

/* 2177 */
struct ComErrorParams
{
  errorParm_t level;
  const char *error;
};

/* 2178 */
struct __declspec(align(8)) MatchRulesSaveHeader::SavedSlot
{
  unsigned __int16 dataLen;
  char *dataStart;
  unsigned int timestamp;
  unsigned int checksum;
  char gametype[10];
  char mlgVersion[20];
  char name[20];
};

/* 2179 */
struct MatchRulesSaveHeader
{
  unsigned int checksum;
  unsigned int fileVersion;
  unsigned int fileLen;
  MatchRulesSaveHeader::SavedSlot slot[10];
};

/* 2180 */
struct MatchRulesHeaderCache
{
  int inUse;
  unsigned int lastAccessedTime;
  MatchRulesSaveLocation saveLocation;
  char xuid[64];
  MatchRulesSaveHeader header;
};

/* 2181 */
struct MatchRulesRawfileCache
{
  int inUse;
  char recipeName[30];
  char data[3073];
  int length;
  unsigned int checksum;
};

/* 2182 */
struct MatchRulesPlaylistCache
{
  int inUse;
  int index;
  int length;
  char data[3072];
};

/* 2183 */
struct $77D3A2E2503DF0742434FD6F35F3BB5C
{
  unsigned int Offset;
  unsigned int OffsetHigh;
};

/* 2184 */
union $5D59812ED8347023FB6569C8E7147FCE
{
  $77D3A2E2503DF0742434FD6F35F3BB5C __s0;
  void *Pointer;
};

/* 2185 */
struct _OVERLAPPED
{
  unsigned __int64 Internal;
  unsigned __int64 InternalHigh;
  $5D59812ED8347023FB6569C8E7147FCE ___u2;
  void *hEvent;
};

/* 2186 */
struct MatchRulesFileData
{
  void *fileHandle;
  _OVERLAPPED overlapped;
};

/* 2187 */
struct __declspec(align(8)) StructuredDataBuffer
{
  char *data;
  unsigned int size;
};

/* 2188 */
union StructuredDataTypeUnion
{
  unsigned int stringDataLength;
  int enumIndex;
  int structIndex;
  int indexedArrayIndex;
  int enumedArrayIndex;
};

/* 2189 */
struct StructuredDataType
{
  StructuredDataTypeCategory type;
  StructuredDataTypeUnion u;
};

/* 2190 */
struct StructuredDataStructProperty
{
  scr_string_t name;
  StructuredDataType type;
  unsigned int offset;
  StructuredDataValidationType validation;
};

/* 2191 */
struct serverTimeStats_t
{
  float serverTimeTotal;
  float serverTimeTotalExceed;
  float serverTimeMax;
  unsigned int serverTimeCount;
  int serverTimeExceedCount;
  float clientMsgTimeTotal;
  int clientMsgCount;
  float clientMsgTimeMax;
};

/* 2192 */
struct _stat64i32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 2193 */
struct stat
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 2194 */
struct __cppobj __declspec(align(8)) bdRatingInfo : bdTaskResult
{
  unsigned __int64 m_entityID;
  char m_rating;
};

/* 2195 */
struct __cppobj __declspec(align(8)) bdVoteRankStatsInfo : bdStatsInfo
{
  unsigned __int64 m_fileOwnerID;
  char m_fileOwnerName[65];
  unsigned int m_totalVotes;
  unsigned int m_avgVoteValue;
};

/* 2196 */
struct dwFileTask
{
  const char *m_filename;
  bdLobbyErrorCode m_error;
  unsigned int m_fileSize;
  bdContextUserStorageFileInfo m_infoResult;
  bdFileInfo m_infoPublisherResult;
  bdFileData m_dataResult;
  unsigned int m_bufferSize;
  void *m_buffer;
  char m_context[16];
  bdUserAccountID m_userAccountID;
};

/* 2197 */
struct __cppobj std::_Nil
{
};

/* 2198 */
struct __cppobj std::_Wrap_int
{
};

/* 2199 */
struct __cppobj std::unary_function<float,unsigned __int64>
{
};

/* 2200 */
struct __cppobj std::_Bitwise_hash<float> : std::unary_function<float,unsigned __int64>
{
};

/* 2201 */
struct __cppobj std::hash<float> : std::_Bitwise_hash<float>
{
};

/* 2202 */
struct __cppobj std::unary_function<double,unsigned __int64>
{
};

/* 2203 */
struct __cppobj std::_Bitwise_hash<double> : std::unary_function<double,unsigned __int64>
{
};

/* 2204 */
struct __cppobj std::hash<double> : std::_Bitwise_hash<double>
{
};

/* 2205 */
struct __cppobj std::unary_function<long double,unsigned __int64>
{
};

/* 2206 */
struct __cppobj std::_Bitwise_hash<long double> : std::unary_function<long double,unsigned __int64>
{
};

/* 2207 */
struct __cppobj std::hash<long double> : std::_Bitwise_hash<long double>
{
};

/* 2208 */
struct stdext::exception
{
  stdext::exceptionVtbl *vfptr;
  const char *_Ptr;
};

/* 2209 */
struct stdext::exceptionVtbl
{
  void *(__cdecl *__vecDelDtor)(stdext::exception *this, unsigned int);
  const char *(__cdecl *what)(stdext::exception *this);
  void (__cdecl *_Doraise)(stdext::exception *this);
};

/* 2210 */
struct __cppobj stdext::bad_exception : stdext::exception
{
};

/* 2211 */
struct __cppobj stdext::bad_alloc : stdext::exception
{
};

/* 2212 */
struct __cppobj stdext::bad_array_new_length : stdext::bad_alloc
{
};

/* 2213 */
struct std::exception_ptr
{
  void *_Data1;
  void *_Data2;
};

/* 2214 */
struct std::_Bool_struct<std::exception_ptr>
{
  int _Member;
};

/* 2215 */
struct ExpressionString
{
  const char *string;
};

/* 2217 */
union operandInternalDataUnion
{
  int intVal;
  float floatVal;
  ExpressionString stringVal;
  Statement_s *function;
};

/* 2218 */
struct __unaligned __declspec(align(4)) Operand
{
  operandInternalDataUnion internals;
  expDataType dataType;
};

/* 2226 */
struct ExpressionPersistentState
{
  int flags;
  int playerDataKey[4];
  int lastExecuteTime[4];
  Operand lastResult[4];
};

/* 2216 */
struct __declspec(align(8)) Statement_s
{
  int numEntries;
  expressionEntry *entries;
  ExpressionSupportingData *supportingData;
  ExpressionPersistentState persistentState;
};

/* 2219 */
union entryInternalData
{
  operationEnum op;
  Operand operand;
};

/* 2220 */
struct expressionEntry
{
  entryInternalData data;
  int type;
};

/* 2221 */
struct UIFunctionList
{
  int totalFunctions;
  Statement_s **functions;
};

/* 2222 */
struct StaticDvar
{
  dvar_t *dvar;
  char *dvarName;
};

/* 2223 */
struct StaticDvarList
{
  int numStaticDvars;
  StaticDvar **staticDvars;
};

/* 2224 */
struct StringList
{
  int totalStrings;
  const char **strings;
};

/* 2225 */
struct ExpressionSupportingData
{
  UIFunctionList uifunctions;
  StaticDvarList staticDvarList;
  StringList uiStrings;
};

/* 2227 */
struct menuTransition
{
  int transitionType;
  int startTime;
  float startVal;
  float endVal;
  float time;
  int endTriggerType;
};

/* 2228 */
struct MenuEventHandlerSet
{
  int eventHandlerCount;
  MenuEventHandler **eventHandlers;
};

/* 2229 */
struct ConditionalScript
{
  MenuEventHandlerSet *eventHandlerSet;
  Statement_s *eventExpression;
};

/* 2230 */
struct SetLocalVarData
{
  const char *localVarName;
  Statement_s *expression;
};

/* 2231 */
union EventData
{
  const char *unconditionalScript;
  ConditionalScript *conditionalScript;
  MenuEventHandlerSet *elseScript;
  SetLocalVarData *setLocalVarData;
};

/* 2232 */
struct __declspec(align(8)) MenuEventHandler
{
  EventData eventData;
  char eventType;
};

/* 2233 */
struct columnInfo_s
{
  int xpos;
  int ypos;
  int width;
  int height;
  int maxChars;
  int alignment;
};

/* 2234 */
struct listBoxDef_s
{
  int startPos[1];
  int endPos[1];
  int drawPadding;
  float elementWidth;
  float elementHeight;
  int elementStyle;
  int numColumns;
  columnInfo_s columnInfo[16];
  MenuEventHandlerSet *onDoubleClick;
  int notselectable;
  int noScrollBars;
  int usePaging;
  float selectBorder[4];
  Material *selectIcon;
  Statement_s *elementHeightExp;
};

/* 2235 */
struct editFieldDef_s
{
  float minVal;
  float maxVal;
  float stepVal;
  float range;
  int maxChars;
  int maxCharsGotoNext;
  int maxPaintChars;
  int paintOffset;
};

/* 2236 */
struct multiDef_s
{
  const char *dvarList[32];
  const char *dvarStr[32];
  float dvarValue[32];
  int count;
  int strDef;
};

/* 2237 */
struct newsTickerDef_s
{
  int feedId;
  int speed;
  int spacing;
};

/* 2238 */
struct textScrollDef_s
{
  int startTime;
};

/* 2239 */
struct __declspec(align(4)) rectDef_s
{
  float x;
  float y;
  float w;
  float h;
  char horzAlign;
  char vertAlign;
};

/* 2240 */
struct windowDef_t
{
  const char *name;
  rectDef_s rect;
  rectDef_s rectClient;
  const char *group;
  int style;
  int border;
  int ownerDraw;
  int ownerDrawFlags;
  float borderSize;
  int staticFlags;
  int dynamicFlags[1];
  int nextTime;
  float foreColor[4];
  float backColor[4];
  float borderColor[4];
  float outlineColor[4];
  float disableColor[4];
  Material *background;
};

/* 2241 */
struct ItemKeyHandler
{
  int key;
  MenuEventHandlerSet *action;
  ItemKeyHandler *next;
};

/* 2242 */
struct __declspec(align(8)) menuData_t
{
  int fullScreen;
  int fadeCycle;
  float fadeClamp;
  float fadeAmount;
  float fadeInAmount;
  float blurRadius;
  MenuEventHandlerSet *onOpen;
  MenuEventHandlerSet *onCloseRequest;
  MenuEventHandlerSet *onClose;
  MenuEventHandlerSet *onESC;
  MenuEventHandlerSet *onFocusDueToClose;
  ItemKeyHandler *onKey;
  Statement_s *visibleExp;
  const char *allowedBinding;
  const char *soundName;
  float focusColor[4];
  Statement_s *rectXExp;
  Statement_s *rectYExp;
  Statement_s *rectWExp;
  Statement_s *rectHExp;
  Statement_s *openSoundExp;
  Statement_s *closeSoundExp;
  Statement_s *soundLoopExp;
  int cursorItem[1];
  menuTransition scaleTransition[1];
  menuTransition alphaTransition[1];
  menuTransition xTransition[1];
  menuTransition yTransition[1];
  ExpressionSupportingData *expressionData;
  char priority;
};

/* 2245 */
union itemDefData_t
{
  listBoxDef_s *listBox;
  editFieldDef_s *editField;
  multiDef_s *multi;
  const char *enumDvarName;
  newsTickerDef_s *ticker;
  textScrollDef_s *scroll;
  void *data;
};

/* 2243 */
struct itemDef_t
{
  windowDef_t window;
  rectDef_s textRect[1];
  int type;
  int dataType;
  int alignment;
  int fontEnum;
  int textAlignMode;
  float textalignx;
  float textaligny;
  float textscale;
  int textStyle;
  int gameMsgWindowIndex;
  int gameMsgWindowMode;
  const char *text;
  int itemFlags;
  menuDef_t *parent;
  MenuEventHandlerSet *mouseEnterText;
  MenuEventHandlerSet *mouseExitText;
  MenuEventHandlerSet *mouseEnter;
  MenuEventHandlerSet *mouseExit;
  MenuEventHandlerSet *action;
  MenuEventHandlerSet *accept;
  MenuEventHandlerSet *onFocus;
  MenuEventHandlerSet *hasFocus;
  MenuEventHandlerSet *leaveFocus;
  const char *dvar;
  const char *dvarTest;
  ItemKeyHandler *onKey;
  const char *enableDvar;
  const char *localVar;
  int dvarFlags;
  snd_alias_list_t *focusSound;
  float special;
  int cursorPos[1];
  itemDefData_t typeData;
  int floatExpressionCount;
  ItemFloatExpression *floatExpressions;
  Statement_s *visibleExp;
  Statement_s *disabledExp;
  Statement_s *textExp;
  Statement_s *materialExp;
  float glowColor[4];
  bool decayActive;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  int lastSoundPlayedTime;
  Statement_s *textAlignYExp;
};

/* 2244 */
struct menuDef_t
{
  menuData_t *data;
  windowDef_t window;
  int itemCount;
  itemDef_t **items;
};

/* 2246 */
struct ItemFloatExpression
{
  int target;
  Statement_s *expression;
};

/* 2247 */
struct __cppobj bdLegacyStatsInfo : bdStatsInfo
{
};

/* 2248 */
struct $38C3DEC81229B66F67FB6D350D75FF5A
{
  float x;
  float y;
};

/* 2249 */
union $B42A88463653BDCDFC5664844B4491DA
{
  int integer;
  float value;
  const char *string;
};

/* 2250 */
struct UILocalVar
{
  UILocalVarType type;
  const char *name;
  $B42A88463653BDCDFC5664844B4491DA u;
};

/* 2251 */
struct UILocalVarContext
{
  UILocalVar table[512];
};

/* 2252 */
struct UiContext
{
  LocalClientNum_t localClientNum;
  float bias;
  int realTime;
  int frameTime;
  $38C3DEC81229B66F67FB6D350D75FF5A cursor;
  int isCursorVisible;
  int paintFull;
  int screenWidth;
  int screenHeight;
  float screenAspect;
  float FPS;
  float blurRadiusOut;
  menuDef_t *Menus[640];
  int menuCount;
  menuDef_t *menuStack[16];
  int openMenuCount;
  UILocalVarContext localVars;
};

/* 2253 */
struct archivedEntityShared_t
{
  int svFlags;
  Bounds absBox;
};

/* 2254 */
struct archivedEntity_s
{
  entityState_s s;
  archivedEntityShared_t r;
};

/* 2255 */
struct svEntity_s
{
  unsigned __int16 worldSector;
  unsigned __int16 nextEntityInWorldSector;
  int linkcontents;
  float linkmin[2];
  float linkmax[2];
};

/* 2256 */
struct clientsPositionArchive_t
{
  int time;
  bool valid[36];
  float positions[36][3];
  float angles[36][3];
};

/* 2257 */
struct ClipMaterial
{
  const char *name;
  int surfaceFlags;
  int contents;
};

/* 2258 */
struct cLeafBrushNodeLeaf_t
{
  unsigned __int16 *brushes;
};

/* 2259 */
struct cLeafBrushNodeChildren_t
{
  float dist;
  float range;
  unsigned __int16 childOffset[2];
};

/* 2260 */
union __declspec(align(8)) cLeafBrushNodeData_t
{
  cLeafBrushNodeLeaf_t leaf;
  cLeafBrushNodeChildren_t children;
};

/* 2261 */
struct cLeafBrushNode_s
{
  char axis;
  __int16 leafBrushCount;
  int contents;
  cLeafBrushNodeData_t data;
};

/* 2262 */
struct ClipInfo
{
  int planeCount;
  cplane_s *planes;
  unsigned int numMaterials;
  ClipMaterial *materials;
  unsigned int numBrushSides;
  cbrushside_t *brushsides;
  unsigned int numBrushEdges;
  char *brushEdges;
  unsigned int leafbrushNodesCount;
  cLeafBrushNode_s *leafbrushNodes;
  unsigned int numLeafBrushes;
  unsigned __int16 *leafbrushes;
  unsigned __int16 numBrushes;
  cbrush_t *brushes;
  Bounds *brushBounds;
  int *brushContents;
};

/* 2263 */
struct cLeaf_t
{
  unsigned __int16 firstCollAabbIndex;
  unsigned __int16 collAabbCount;
  int brushContents;
  int terrainContents;
  Bounds bounds;
  int leafBrushNode;
};

/* 2264 */
struct cmodel_t
{
  Bounds bounds;
  float radius;
  ClipInfo *info;
  cLeaf_t leaf;
};

/* 2265 */
struct __declspec(align(8)) server_t
{
  serverState_t state;
  int timeResidual;
  bool inFrame;
  int levelTime;
  bool allowNetPackets;
  int restarting;
  int start_frameTime;
  cmodel_t *models[1024];
  scr_string_t emptyConfigString;
  scr_string_t configstrings[3428];
  svEntity_s svEntities[2048];
  int checksum;
  gentity_s *gentities;
  int num_entities;
  playerState_s *gameClients;
  int gameClientSize;
  int skelTimeStamp;
  int skelMemPos;
  int bpsTotalBytesForFrame;
  char gametype[64];
  bool killServer;
  const char *killReason;
  char matchDataDef[64];
  char matchData[131328];
  ClientMatchData clientMatchData;
  int mapcrc;
  int nextClientsPositionArchive;
  clientsPositionArchive_t clientsPositionArchive[100];
  serverTimeStats_t timeStats;
  unsigned int cachedNetDataChecksum;
};

/* 2266 */
struct clientSnapshot_s
{
  playerState_s ps;
  ScoreboardInfo scores;
  int omnvarsIdx;
  int num_entities;
  int num_clients;
  int first_entity;
  int first_client;
  int messageSent;
  int messageSentSequence;
  int messageAcked;
  int messageSize;
  int serverTime;
  int timeDelta;
  int baselineSnap;
  int num_agents;
  int first_agent;
  unsigned int scriptableCount;
  unsigned int scriptableFirstIndex;
};

/* 2267 */
struct serverSnapshot_t
{
  playerState_s *ps[12];
  int entityCount;
  int clientCount;
  int firstEntityIndex;
  int firstClientIndex;
  int agentCount;
  int firstAgentIndex;
  unsigned int scriptablesCount;
  unsigned int scriptablesFirstIndex;
};

/* 2268 */
struct cachedClient_s
{
  playerState_s ps;
  int playerStateExists;
  clientState_s cs;
  unsigned int pad[1];
};

/* 2269 */
struct cachedAgent_s
{
  agentState_s agentState;
};

/* 2270 */
struct cachedSnapshot_t
{
  int archivedFrame;
  int time;
  int num_entities;
  int first_entity;
  int num_clients;
  int first_client;
  int num_agents;
  int first_agent;
  unsigned int scriptableCount;
  unsigned int scriptableFirstIndex;
  int usesDelta;
};

/* 2271 */
struct svscmd_info_t
{
  int time;
  int type;
  char cmd[1024];
};

/* 2272 */
struct __declspec(align(4)) challenge_t
{
  netadr_s adr;
  int challenge;
  int time;
  int connected;
  char playerGuid[17];
};

/* 2273 */
struct archivedSnapshot_s
{
  int start;
  int size;
};

/* 2274 */
struct tempBanSlot_t
{
  char playerGuid[17];
  int banTime;
};

/* 2275 */
struct __declspec(align(8)) clientHeader_t
{
  int state;
  int sendAsActive;
  int deltaMessage;
  int rateDelayed;
  int hasAckedBaselineData;
  int hugeSnapshotSent;
  netchan_t netchan;
  float predictedOrigin[3];
  int predictedOriginServerTime;
  int migrationState;
  unsigned int predictedVehicleSplineId;
  int predictedVehicleTargetEntity;
  float predictedVehicleOrigin[3];
  int predictedVehicleServerTime;
  int ackedMessage[32];
  unsigned int ackedMessageCount;
  int sentMessage[32];
  int wasKillcam[32];
  unsigned int sendMessageCount;
  bool overrideDeltaMessage;
  int overrideSequenceNumber;
  int sequenceResume;
  int isInKillcam;
};

/* 2276 */
struct client_net_buffers_t
{
  svscmd_info_t reliableCommandInfo[128];
  char netchanOutgoingBuffer[131072];
  char netchanIncomingBuffer[2048];
};

/* 2277 */
struct client_t
{
  clientHeader_t header;
  const char *dropReason;
  char userinfo[1024];
  int reliableSequence;
  int reliableAcknowledge;
  int reliableSent;
  int messageAcknowledge;
  int largeCommandSequence;
  int gamestateMessageNum;
  int challenge;
  client_net_buffers_t netBuf;
  int cumulThinkTime;
  int beginCmdIndex;
  int currCmdIndex;
  usercmd_s lastUsercmd;
  usercmd_s cmds[8];
  int lastClientCommand;
  char lastClientCommandString[1024];
  gentity_s *gentity;
  char name[32];
  int lastPacketTime;
  int lastConnectTime;
  int nextSnapshotTime;
  int timeoutCount;
  int ping;
  int minPing;
  int currFramePing;
  int snapshotBackoffCount;
  int rate;
  int pureAuthentic;
  unsigned int streamSyncWaitBits;
  unsigned int streamSyncWaitTimeout;
  LiveClientDropType liveDropRequest;
  char playerGuid[17];
  unsigned __int16 scriptId;
  int bIsSplitscreenClient;
  TestClientType testClient;
  int serverId;
  bool usingOnlineStatsOffline;
  char stats[37888];
  char statsModifiedFlags[4736];
  bool statsModified;
  unsigned int statPacketsReceived;
  char loadouts[9240];
  unsigned int loadoutPacketsReceived;
  bool sendMatchData;
  int matchDataSendTime;
  int framePings[16];
  clientSnapshot_s frames[16];
};

/* 2278 */
struct __declspec(align(128)) serverArchive_t
{
  char archivedSnapshotBuffer[4194304];
  int nextArchivedSnapshotBuffer;
  int nextArchivedSnapshotFrames;
  archivedSnapshot_s archivedSnapshotFrames[1200];
};

/* 2279 */
struct CachedScriptableWorld
{
  ScriptableWorld scriptableState;
  char padding[4];
};

/* 2280 */
struct ScriptableWorldSnapData
{
  unsigned int snapCount;
  unsigned int snapNextIndex;
  unsigned int cachedSnapNextIndex;
  ScriptableWorld *firstWorld;
  unsigned int worldSize;
  ScriptableWorld *snapWorlds;
  CachedScriptableWorld *cachedSnapWorld;
  unsigned int numNoDeltaSnapWorlds;
  ScriptableWorld *noDeltaSnapWorld;
};

/* 2281 */
struct ScriptableStaticWorldSnapData
{
  ScriptableWorld snapWorlds[192];
  ScriptableWorld noDeltaSnapWorld;
  CachedScriptableWorld cachedSnapWorld[12];
};

/* 2282 */
struct AnimStateSnapData
{
  char animStateCount[16];
  char animEntryCount[16][128];
};

/* 2283 */
struct __declspec(align(8)) agent_t
{
  int entityNum;
  gentity_s *gentity;
  usercmd_s lastUsercmd;
};

/* 2284 */
struct __unaligned __declspec(align(4)) $6F121FE2AB0F500E1514E35EFBF2687B
{
  _BYTE gap0[1032];
  int agentCount;
  int numSnapshotAgents;
  int nextSnapshotAgents;
  int nextCachedSnapshotAgents;
  _BYTE gap418[4];
  agent_t agents[24];
};

/* 2285 */
union $F816CDFB71474E9F2432498979C19DF0
{
  AnimStateSnapData animStateData;
  $6F121FE2AB0F500E1514E35EFBF2687B __s1;
};

/* 2286 */
struct serverStatic_t
{
  cachedSnapshot_t cachedSnapshotFrames[512];
  archivedEntity_s cachedSnapshotEntities[10800];
  __declspec(align(128)) entityState_s snapshotEntities[47872];
  entityState_s noDeltaEntities[1024];
  serverArchive_t archive;
  int time;
  int loopbackProcessStopTime;
  int snapFlagServerBit;
  int clientCount;
  _BYTE clients[6424512];
  int numSnapshotEntities;
  int numSnapshotClients;
  int numNoDeltaEntities;
  int nextNoDeltaEntity;
  int nextSnapshotEntities;
  int nextSnapshotClients;
  clientState_s snapshotClients[2304];
  int nextCachedSnapshotEntities;
  int nextCachedSnapshotClients;
  int nextCachedSnapshotFrames;
  cachedClient_s cachedSnapshotClients[144];
  int nextStatusResponseTime;
  challenge_t challenges[1024];
  netProfileInfo_t OOBProf;
  tempBanSlot_t tempBans[16];
  float mapCenter[3];
  float mapCenterBoundsMin[3];
  float mapCenterBoundsMax[3];
  unsigned __int16 botport;
  serverSnapshot_t snapshots[16];
  int serverSnapshotTimes[16];
  int nextServerSnapshotIndex;
  int activeEntities;
  int archivedEntityCount;
  int oldestArchiveTime;
  int packetBackupCount;
  int packetBackupMask;
  int baselineCreated;
  ScriptableWorldSnapData scriptableSnapshots;
  ScriptableStaticWorldSnapData scriptableStaticSnapshots;
  $F816CDFB71474E9F2432498979C19DF0 ___u40;
  agentState_s snapshotAgents[4608];
  cachedAgent_s cachedSnapshotAgents[288];
  int nextOmnvarsIdx;
  int omnvarsCount;
  OmnvarData omnvars[49152];
  int constBaselineEntitesMax;
  entityState_s *constBaselineEntities;
};

/* 2287 */
struct MatchRules
{
  char data[3073];
  unsigned int checksum;
};

/* 2288 */
struct __declspec(align(4)) StructuredDataEnumEntry
{
  scr_string_t string;
  unsigned __int16 index;
};

/* 2289 */
struct StructuredDataEnum
{
  int entryCount;
  int reservedEntryCount;
  StructuredDataEnumEntry *entries;
};

/* 2290 */
struct StructuredDataStruct
{
  int propertyCount;
  StructuredDataStructProperty *properties;
  int size;
  unsigned int bitOffset;
};

/* 2291 */
struct StructuredDataIndexedArray
{
  int arraySize;
  StructuredDataType elementType;
  unsigned int elementSize;
};

/* 2292 */
struct StructuredDataEnumedArray
{
  int enumIndex;
  StructuredDataType elementType;
  unsigned int elementSize;
};

/* 2293 */
struct __declspec(align(8)) StructuredDataDef
{
  int version;
  unsigned int formatChecksum;
  int enumCount;
  StructuredDataEnum *enums;
  int structCount;
  StructuredDataStruct *structs;
  int indexedArrayCount;
  StructuredDataIndexedArray *indexedArrays;
  int enumedArrayCount;
  StructuredDataEnumedArray *enumedArrays;
  StructuredDataType rootType;
  unsigned int size;
};

/* 2294 */
struct __declspec(align(8)) GameStateInfo
{
  int init;
  CodPlayMode initCodPlayMode;
  int usingRecipe;
  MatchRules *matchRules;
  int usingBotsSystem;
  char usingBotsConnectType;
  char usingBotsDifficulty[2];
  char usingBotsTeamLimit[2];
  char agentCount;
};

/* 2295 */
struct __declspec(align(8)) StringTableCell
{
  const char *string;
  int hash;
};

/* 2296 */
struct StringTable
{
  const char *name;
  int columnCount;
  int rowCount;
  StringTableCell *values;
};

/* 2297 */
struct StructuredDataDefSet
{
  const char *name;
  unsigned int defCount;
  StructuredDataDef *defs;
};

/* 2298 */
struct StructuredDataLookup
{
  StructuredDataDef *def;
  StructuredDataType *type;
  unsigned int offset;
  LookupError error;
};

/* 2299 */
struct LargeLocal
{
  unsigned __int64 startPos;
  unsigned __int64 size;
};

/* 2300 */
struct __cppobj ID3D11ComputeShader : ID3D11DeviceChild
{
};

/* 2301 */
struct __declspec(align(8)) GfxComputeShaderLoadDef
{
  char *program;
  unsigned int programSize;
};

/* 2302 */
struct ComputeShaderProgram
{
  ID3D11ComputeShader *cs;
  GfxComputeShaderLoadDef loadDef;
};

/* 2303 */
struct ComputeShader
{
  const char *name;
  ComputeShaderProgram prog;
};

/* 2304 */
struct cStaticModel_s
{
  XModel *xmodel;
  float origin[3];
  float invScaledAxis[3][3];
  Bounds absBounds;
};

/* 2305 */
struct __declspec(align(8)) cNode_t
{
  cplane_s *plane;
  __int16 children[2];
};

/* 2306 */
struct CollisionBorder
{
  float distEq[3];
  float zBase;
  float zSlope;
  float start;
  float length;
};

/* 2307 */
struct CollisionPartition
{
  char triCount;
  char borderCount;
  char firstVertSegment;
  int firstTri;
  CollisionBorder *borders;
};

/* 2308 */
union CollisionAabbTreeIndex
{
  int firstChildIndex;
  int partitionIndex;
};

/* 2309 */
struct CollisionAabbTree
{
  float midPoint[3];
  unsigned __int16 materialIndex;
  unsigned __int16 childCount;
  float halfSize[3];
  CollisionAabbTreeIndex u;
};

/* 2310 */
struct TriggerModel
{
  int contents;
  unsigned __int16 hullCount;
  unsigned __int16 firstHull;
};

/* 2311 */
struct TriggerHull
{
  Bounds bounds;
  int contents;
  unsigned __int16 slabCount;
  unsigned __int16 firstSlab;
};

/* 2312 */
struct TriggerSlab
{
  float dir[3];
  float midPoint;
  float halfSize;
};

/* 2313 */
struct MapTriggers
{
  unsigned int count;
  TriggerModel *models;
  unsigned int hullCount;
  TriggerHull *hulls;
  unsigned int slabCount;
  TriggerSlab *slabs;
};

/* 2314 */
struct ClientTriggerAabbNode
{
  Bounds bounds;
  unsigned __int16 firstChild;
  unsigned __int16 childCount;
};

/* 2315 */
struct ClientTriggers
{
  MapTriggers trigger;
  unsigned __int16 numClientTriggerNodes;
  ClientTriggerAabbNode *clientTriggerAabbTree;
  unsigned int triggerStringLength;
  char *triggerString;
  __int16 *visionSetTriggers;
  char *triggerType;
  float (*origins)[3];
  float *scriptDelay;
  __int16 *audioTriggers;
  __int16 *blendLookup;
  __int16 *npcTriggers;
};

/* 2316 */
struct ClientTriggerBlendNode
{
  float pointA[3];
  float pointB[3];
  unsigned __int16 triggerA;
  unsigned __int16 triggerB;
};

/* 2317 */
struct ClientTriggerBlend
{
  unsigned __int16 numClientTriggerBlendNodes;
  ClientTriggerBlendNode *blendNodes;
};

/* 2318 */
struct SpawnPointEntityRecord
{
  unsigned __int16 index;
  scr_string_t name;
  scr_string_t target;
  scr_string_t script_noteworthy;
  float origin[3];
  float angles[3];
};

/* 2319 */
struct SpawnPointRecordList
{
  unsigned __int16 spawnsCount;
  SpawnPointEntityRecord *spawns;
};

/* 2320 */
struct SplinePointEntityRecord
{
  int splineId;
  int splineNodeId;
  char *splineNodeLabel;
  float splineNodeTension;
  float origin[3];
  float corridorDims[2];
  float tangent[3];
  float distToNextNode;
  float (*positionCubic)[3];
  float (*tangentQuadratic)[3];
};

/* 2321 */
struct SplinePointRecordList
{
  unsigned __int16 splinePointCount;
  float splineLength;
  SplinePointEntityRecord *splinePoints;
};

/* 2322 */
struct SplineRecordList
{
  unsigned __int16 splineCount;
  SplinePointRecordList *splines;
};

/* 2323 */
struct MapEnts
{
  const char *name;
  char *entityString;
  int numEntityChars;
  MapTriggers trigger;
  ClientTriggers clientTrigger;
  ClientTriggerBlend clientTriggerBlend;
  SpawnPointRecordList spawnList;
  SplineRecordList splineList;
};

/* 2324 */
struct __declspec(align(2)) Stage
{
  const char *name;
  float origin[3];
  unsigned __int16 triggerIndex;
  char sunPrimaryLightIndex;
};

/* 2325 */
struct SModelAabbNode
{
  Bounds bounds;
  unsigned __int16 firstChild;
  unsigned __int16 childCount;
};

/* 2326 */
struct GfxPlacement
{
  float quat[4];
  float origin[3];
};

/* 2327 */
struct DynEntityHingeDef
{
  float axisOrigin[3];
  float axisDir[3];
  bool isLimited;
  float angleMin;
  float angleMax;
  float momentOfInertia;
  float friction;
};

/* 2328 */
struct DynEntityLinkToDef
{
  int anchorIndex;
  float originOffset[3];
  float angleOffset[3];
};

/* 2329 */
struct DynEntityDef
{
  DynEntityType type;
  GfxPlacement pose;
  XModel *baseModel;
  unsigned __int16 brushModel;
  unsigned __int16 physicsBrushModel;
  unsigned __int16 scriptableIndex;
  unsigned __int16 health;
  FxEffectDef *destroyFx;
  PhysPreset *physPreset;
  DynEntityHingeDef *hinge;
  DynEntityLinkToDef *linkTo;
  PhysMass mass;
  int contents;
};

/* 2330 */
struct DynEntityPose
{
  GfxPlacement pose;
  float radius;
};

/* 2331 */
struct __declspec(align(8)) Hinge
{
  float angle;
  float quat[4];
  float angularVel;
  float torqueAccum;
  bool active;
  float autoDisableTimeLeft;
  DynEntityHingeDef *def;
  PhysPreset *physPreset;
  float centerOfMassRelToAxisOriginAtAngleZero[3];
};

/* 2332 */
struct __declspec(align(8)) DynEntityClient
{
  __int64 physObjId;
  unsigned __int16 flags;
  unsigned __int16 lightingHandle;
  unsigned __int16 health;
  Hinge *hinge;
  XModel *activeModel;
  int contents;
};

/* 2333 */
struct DynEntityColl
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  float linkMins[2];
  float linkMaxs[2];
};

/* 2334 */
struct ScriptableEventStateChangeDef
{
  char targetIndex;
  char delayStreamIndex;
  unsigned __int16 delayMin;
  unsigned __int16 delayMax;
};

/* 2335 */
struct ScriptableEventModelDef
{
  XModel *model;
};

/* 2336 */
struct ScriptableEventFxDef
{
  FxEffectDef *handle;
  scr_string_t tagName;
  unsigned __int16 loopTime;
  char loopTimeStreamIndex;
  bool tagUseAngles;
};

/* 2337 */
struct __declspec(align(8)) ScriptableEventSoundDef
{
  snd_alias_list_t *alias;
  bool looping;
};

/* 2338 */
struct __declspec(align(4)) ScriptableEventAnimationDef
{
  const char *animName;
  bool override;
  bool stateful;
  char animEntryIndex;
  char animPlaybackStreamIndex;
  unsigned __int16 timeOffsetMin;
  unsigned __int16 timeOffsetMax;
  unsigned __int16 playbackRateMin;
  unsigned __int16 playbackRateMax;
  unsigned __int16 blendTime;
};

/* 2339 */
struct __declspec(align(2)) ScriptableEventExplodeDef
{
  unsigned __int16 forceMin;
  unsigned __int16 forceMax;
  unsigned __int16 radius;
  unsigned __int16 damageMin;
  unsigned __int16 damageMax;
  bool aiAvoid;
};

/* 2340 */
struct __declspec(align(2)) ScriptableEventHealthDef
{
  unsigned __int16 amount;
  unsigned __int16 interval;
  unsigned __int16 badPlaceRadius;
  char streamIndex;
};

/* 2341 */
struct ScriptableEventPhysicsDef
{
  XModel *model;
  char launchDirX;
  char launchDirY;
  char launchDirZ;
  unsigned __int16 explForceScale;
  unsigned __int16 bulletForceScale;
};

/* 2342 */
struct __declspec(align(8)) ScriptableEventLightSettingsDef
{
  char color[4];
  char lightIndexConstIndex;
  char transStateStreamIndex;
  char useColor;
  char useStateTransitionTime;
  unsigned __int16 intensityScaleMin;
  unsigned __int16 intensityScaleMax;
  unsigned __int16 radiusScaleMin;
  unsigned __int16 radiusScaleMax;
  const char *noteworthy;
  unsigned __int16 transitionTimeMin;
  unsigned __int16 transitionTimeMax;
};

/* 2343 */
struct ScriptableEventSunlightSettingsDef
{
  char color[4];
  char transStateStreamIndex;
  char flags;
  unsigned __int16 intensityScaleMin;
  unsigned __int16 intensityScaleMax;
  unsigned __int16 pitchMin;
  unsigned __int16 pitchMax;
  unsigned __int16 headingMin;
  unsigned __int16 headingMax;
  unsigned __int16 transitionTimeMin;
  unsigned __int16 transitionTimeMax;
};

/* 2344 */
struct __declspec(align(8)) ScriptableEventShakeDef
{
  const char *rumbleName;
  unsigned __int16 duration;
  unsigned __int16 durationFadeUp;
  unsigned __int16 durationFadeDown;
  unsigned __int16 radius;
  unsigned __int16 exponent;
  unsigned __int16 scaleEarthquake;
  char scalePitch;
  char scaleYaw;
  char scaleRoll;
  char frequencyPitch;
  char frequencyYaw;
  char frequencyRoll;
  char flags;
};

/* 2345 */
union ScriptableEventDataUnion
{
  ScriptableEventStateChangeDef stateChange;
  ScriptableEventModelDef setModel;
  ScriptableEventFxDef playFx;
  ScriptableEventSoundDef playSound;
  ScriptableEventAnimationDef playAnim;
  ScriptableEventExplodeDef doExplosion;
  ScriptableEventHealthDef healthDrain;
  ScriptableEventPhysicsDef physicsLaunch;
  ScriptableEventLightSettingsDef lightSettings;
  ScriptableEventSunlightSettingsDef sunlightSettings;
  ScriptableEventShakeDef shake;
};

/* 2346 */
struct ScriptableEventDef
{
  ScriptableEventType type;
  ScriptableEventDataUnion data;
};

/* 2347 */
struct __declspec(align(4)) ScriptableStateDef
{
  scr_string_t name;
  scr_string_t tagName;
  ScriptableEventDef *onEnterEvents;
  char onEnterEventCount;
  char damageFlags;
  char damageParentTransferRate;
  char damageParentReceiveRate;
  unsigned __int16 maxHealth;
};

/* 2348 */
struct ScriptablePartDef
{
  ScriptableStateDef *states;
  scr_string_t name;
  char stateCount;
  char flags;
  char eventStreamTimeRemainIndex;
  char eventStreamNextChangeTimeIndex;
};

/* 2349 */
struct __declspec(align(4)) ScriptableNotetrackFxDef
{
  FxEffectDef *handle;
  scr_string_t tagName;
  bool useAngles;
};

/* 2350 */
struct ScriptableNotetrackSoundDef
{
  snd_alias_list_t *alias;
};

/* 2351 */
union ScriptableNotetrackDataUnion
{
  ScriptableNotetrackFxDef playFx;
  ScriptableNotetrackSoundDef playSound;
};

/* 2352 */
struct ScriptableNotetrackDef
{
  scr_string_t name;
  ScriptableNotetrackType type;
  ScriptableNotetrackDataUnion data;
};

/* 2353 */
struct __declspec(align(8)) ScriptableDef
{
  const char *name;
  XModel *baseModel;
  const char *baseCollisionBrush;
  const char *destroyedCollisionBrush;
  ScriptablePartDef *parts;
  ScriptableNotetrackDef *notetracks;
  ScriptableType type;
  char flags;
  char partCount;
  char serverInstancePartCount;
  char serverControlledPartCount;
  char notetrackCount;
  char eventStreamSize;
  char eventConstantsSize;
};

/* 2354 */
struct ScriptableInstancePartState
{
  unsigned __int16 curHealth;
  char lastExecutedStateIndex;
  char stateIndex;
};

/* 2355 */
struct ScriptableInstance
{
  ScriptableDef *def;
  char *eventConstantsBuf;
  float origin[3];
  float angles[3];
  scr_string_t targetname;
  unsigned __int16 preBrushModel;
  unsigned __int16 postBrushModel;
  char flags;
  XModel *currentModel;
  ScriptableInstancePartState *partStates;
  char *eventStreamBuf;
  unsigned int currentPartBits[6];
  unsigned int damageOwnerEntHandle;
  unsigned __int16 updateNextInstance;
  unsigned __int16 linkedObject;
};

/* 2356 */
struct ScriptableAnimationEntry
{
  const char *animName;
  unsigned __int64 runtimeBuf;
};

/* 2357 */
struct __declspec(align(8)) ScriptableMapEnts
{
  unsigned int instanceStateSize;
  unsigned int instanceCount;
  unsigned int reservedInstanceCount;
  ScriptableInstance *instances;
  unsigned int animEntryCount;
  ScriptableAnimationEntry *animEntries;
  unsigned int replicatedInstanceCount;
};

/* 2358 */
struct __declspec(align(128)) clipMap_t
{
  const char *name;
  int isInUse;
  ClipInfo info;
  ClipInfo *pInfo;
  unsigned int numStaticModels;
  cStaticModel_s *staticModelList;
  unsigned int numNodes;
  cNode_t *nodes;
  unsigned int numLeafs;
  cLeaf_t *leafs;
  unsigned int vertCount;
  float (*verts)[3];
  int triCount;
  unsigned __int16 *triIndices;
  char *triEdgeIsWalkable;
  int borderCount;
  CollisionBorder *borders;
  int partitionCount;
  CollisionPartition *partitions;
  int aabbTreeCount;
  CollisionAabbTree *aabbTrees;
  unsigned int numSubModels;
  cmodel_t *cmodels;
  MapEnts *mapEnts;
  Stage *stages;
  char stageCount;
  MapTriggers stageTrigger;
  unsigned __int16 smodelNodeCount;
  SModelAabbNode *smodelNodes;
  unsigned __int16 dynEntCount[2];
  DynEntityDef *dynEntDefList[2];
  DynEntityPose *dynEntPoseList[2];
  DynEntityClient *dynEntClientList[2];
  DynEntityColl *dynEntCollList[2];
  unsigned int dynEntAnchorCount;
  scr_string_t *dynEntAnchorNames;
  ScriptableMapEnts scriptableMapEnts;
  unsigned int checksum;
};

/* 2359 */
struct ComPrimaryLight
{
  char type;
  char canUseShadowMap;
  char exponent;
  char unused;
  float color[3];
  float dir[3];
  float up[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  float cosHalfFovExpanded;
  float rotationLimit;
  float translationLimit;
  float cucRotationOffsetRad;
  float cucRotationSpeedRad;
  float cucScrollVector[2];
  float cucScaleVector[2];
  float cucTransVector[2];
  const char *defName;
};

/* 2360 */
struct __declspec(align(2)) ComPrimaryLightEnv
{
  unsigned __int16 primaryLightIndices[4];
  char numIndices;
};

/* 2361 */
struct ComWorld
{
  const char *name;
  int isInUse;
  unsigned int primaryLightCount;
  ComPrimaryLight *primaryLights;
  unsigned int primaryLightEnvCount;
  ComPrimaryLightEnv *primaryLightEnvs;
};

/* 2362 */
struct __declspec(align(2)) G_GlassPiece
{
  unsigned __int16 damageTaken;
  unsigned __int16 collapseTime;
  int lastStateChangeTime;
  char impactDir;
  char impactPos[2];
};

/* 2363 */
struct G_GlassName
{
  char *nameStr;
  scr_string_t name;
  unsigned __int16 pieceCount;
  unsigned __int16 *pieceIndices;
};

/* 2364 */
struct __declspec(align(8)) G_GlassData
{
  G_GlassPiece *glassPieces;
  unsigned int pieceCount;
  unsigned __int16 damageToWeaken;
  unsigned __int16 damageToDestroy;
  unsigned int glassNameCount;
  G_GlassName *glassNames;
  char pad[108];
};

/* 2365 */
struct GlassWorld
{
  const char *name;
  G_GlassData *g_glassData;
};

/* 2367 */
struct pathnode_tree_nodes_t
{
  int nodeCount;
  unsigned __int16 *nodes;
};

/* 2368 */
union pathnode_tree_info_t
{
  pathnode_tree_t *child[2];
  pathnode_tree_nodes_t s;
};

/* 2366 */
struct pathnode_tree_t
{
  int axis;
  float dist;
  pathnode_tree_info_t u;
};

/* 2369 */
struct PathDynamicNodeGroup
{
  unsigned __int16 parentIndex;
  int nodeTreeCount;
  pathnode_tree_t *nodeTree;
};

/* 2370 */
struct PathData
{
  const char *name;
  unsigned int nodeCount;
  pathnode_t *nodes;
  bool parentIndexResolved;
  unsigned __int16 version;
  int visBytes;
  char *pathVis;
  int nodeTreeCount;
  pathnode_tree_t *nodeTree;
  int dynamicNodeGroupCount;
  PathDynamicNodeGroup *dynamicNodeGroups;
  int exposureBytes;
  char *pathExposure;
  int noPeekVisBytes;
  char *pathNoPeekVis;
  int zoneCount;
  int zonesBytes;
  char *pathZones;
  int dynStatesBytes;
  char *pathDynStates;
};

/* 2371 */
struct __declspec(align(8)) VehicleTrack
{
  const char *name;
  VehicleTrackSegment *segments;
  unsigned int segmentCount;
};

/* 2372 */
struct __declspec(align(4)) FxGlassDef
{
  float halfThickness;
  float texVecs[2][2];
  GfxColor color;
  Material *material;
  Material *materialShattered;
  PhysPreset *physPreset;
  FxEffectDef *pieceBreakEffect;
  FxEffectDef *shatterEffect;
  FxEffectDef *shatterSmallEffect;
  FxEffectDef *crackDecalEffect;
  snd_alias_list_t *damagedSound;
  snd_alias_list_t *destroyedSound;
  snd_alias_list_t *destroyedQuietSound;
  int numCrackRings;
  bool isOpaque;
};

/* 2373 */
struct $22A91E2F7C3E8916379233CBA2A7563D
{
  FxSpatialFrame frame;
  float radius;
};

/* 2374 */
union FxGlassPiecePlace
{
  $22A91E2F7C3E8916379233CBA2A7563D __s0;
  unsigned int nextFree;
};

/* 2375 */
struct FxGlassPieceState
{
  float texCoordOrigin[2];
  unsigned int supportMask;
  unsigned __int16 initIndex;
  unsigned __int16 geoDataStart;
  unsigned __int16 lightingIndex;
  char defIndex;
  char pad[3];
  char vertCount;
  char holeDataCount;
  char crackDataCount;
  char fanDataCount;
  unsigned __int16 flags;
  float areaX2;
};

/* 2376 */
struct FxGlassPieceDynamics
{
  int fallTime;
  __int64 physObjId;
  __int64 physJointId;
  float vel[3];
  float avel[3];
};

/* 2377 */
struct FxGlassVertex
{
  __int16 x;
  __int16 y;
};

/* 2378 */
struct FxGlassHoleHeader
{
  unsigned __int16 uniqueVertCount;
  char touchVert;
  char pad[1];
};

/* 2379 */
struct FxGlassCrackHeader
{
  unsigned __int16 uniqueVertCount;
  char beginVertIndex;
  char endVertIndex;
};

/* 2380 */
union FxGlassGeometryData
{
  FxGlassVertex vert;
  FxGlassHoleHeader hole;
  FxGlassCrackHeader crack;
  char asBytes[4];
  __int16 anonymous[2];
};

/* 2381 */
struct __declspec(align(4)) FxGlassInitPieceState
{
  FxSpatialFrame frame;
  float radius;
  float texCoordOrigin[2];
  unsigned int supportMask;
  float areaX2;
  unsigned __int16 lightingIndex;
  char defIndex;
  char vertCount;
  char fanDataCount;
  char pad[1];
};

/* 2382 */
struct __declspec(align(8)) FxGlassSystem
{
  int time;
  int prevTime;
  unsigned int defCount;
  unsigned int pieceLimit;
  unsigned int pieceWordCount;
  unsigned int initPieceCount;
  unsigned int cellCount;
  unsigned int activePieceCount;
  unsigned int firstFreePiece;
  unsigned int geoDataLimit;
  unsigned int geoDataCount;
  unsigned int initGeoDataCount;
  FxGlassDef *defs;
  FxGlassPiecePlace *piecePlaces;
  FxGlassPieceState *pieceStates;
  FxGlassPieceDynamics *pieceDynamics;
  FxGlassGeometryData *geoData;
  unsigned int *isInUse;
  unsigned int *cellBits;
  char *visData;
  float (*linkOrg)[3];
  float *halfThickness;
  unsigned __int16 *lightingHandles;
  FxGlassInitPieceState *initPieceStates;
  FxGlassGeometryData *initGeoData;
  bool needToCompactData;
  char initCount;
  float effectChanceAccum;
  int lastPieceDeletionTime;
};

/* 2383 */
struct FxWorld
{
  const char *name;
  FxGlassSystem glassSys;
};

/* 2384 */
struct __declspec(align(8)) GfxSky
{
  int skySurfCount;
  int *skyStartSurfs;
  GfxImage *skyImage;
  char skySamplerState;
};

/* 2385 */
struct GfxWorldDpvsPlanes
{
  int cellCount;
  cplane_s *planes;
  unsigned __int16 *nodes;
  unsigned int *sceneEntCellBits;
};

/* 2386 */
struct GfxCellTreeCount
{
  int aabbTreeCount;
};

/* 2387 */
struct __declspec(align(8)) GfxAabbTree
{
  Bounds bounds;
  unsigned __int16 childCount;
  unsigned __int16 surfaceCount;
  unsigned int startSurfIndex;
  unsigned __int16 smodelIndexCount;
  unsigned __int16 *smodelIndexes;
  int childrenOffset;
};

/* 2388 */
struct GfxCellTree
{
  GfxAabbTree *aabbTree;
};

/* 2390 */
struct GfxPortalWritable
{
  bool isQueued;
  bool isAncestor;
  char recursionDepth;
  char hullPointCount;
  float (*hullPoints)[2];
  GfxPortal *queuedParent;
};

/* 2391 */
struct DpvsPlane
{
  float coeffs[4];
};

/* 2389 */
struct GfxPortal
{
  GfxPortalWritable writable;
  DpvsPlane plane;
  float (*vertices)[3];
  unsigned __int16 cellIndex;
  unsigned __int16 closeDistance;
  char vertexCount;
  float hullAxis[2][3];
};

/* 2392 */
struct GfxCell
{
  Bounds bounds;
  int portalCount;
  GfxPortal *portals;
  char reflectionProbeCount;
  char *reflectionProbes;
  char reflectionProbeReferenceCount;
  char *reflectionProbeReferences;
};

/* 2393 */
struct GfxReflectionProbeVolumeData
{
  float volumePlanes[6][4];
};

/* 2394 */
struct __declspec(align(8)) GfxReflectionProbe
{
  float origin[3];
  GfxReflectionProbeVolumeData *probeVolumes;
  unsigned int probeVolumeCount;
};

/* 2395 */
struct GfxReflectionProbeReferenceOrigin
{
  float origin[3];
};

/* 2396 */
struct GfxReflectionProbeReference
{
  char index;
};

/* 2397 */
struct GfxLightmapArray
{
  GfxImage *primary;
  GfxImage *secondary;
};

/* 2398 */
struct GfxWorldVertex
{
  float xyz[3];
  float binormalSign;
  GfxColor color;
  float texCoord[2];
  float lmapCoord[2];
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 2399 */
struct GfxWorldVertexData
{
  GfxWorldVertex *vertices;
  ID3D11Buffer *worldVb;
};

/* 2400 */
struct GfxWorldVertexLayerData
{
  char *data;
  ID3D11Buffer *layerVb;
};

/* 2401 */
struct GfxWorldDraw
{
  unsigned int reflectionProbeCount;
  GfxImage **reflectionProbes;
  GfxReflectionProbe *reflectionProbeOrigins;
  GfxTexture *reflectionProbeTextures;
  unsigned int reflectionProbeReferenceCount;
  GfxReflectionProbeReferenceOrigin *reflectionProbeReferenceOrigins;
  GfxReflectionProbeReference *reflectionProbeReferences;
  int lightmapCount;
  GfxLightmapArray *lightmaps;
  GfxTexture *lightmapPrimaryTextures;
  GfxTexture *lightmapSecondaryTextures;
  GfxImage *lightmapOverridePrimary;
  GfxImage *lightmapOverrideSecondary;
  unsigned int trisType;
  unsigned int vertexCount;
  GfxWorldVertexData vd;
  unsigned int vertexLayerDataSize;
  GfxWorldVertexLayerData vld;
  unsigned int indexCount;
  unsigned __int16 *indices;
  ID3D11Buffer *indexBuffer;
};

/* 2402 */
struct GfxLightGridEntry
{
  unsigned int colorsIndex;
  unsigned __int16 primaryLightEnvIndex;
  char unused;
  char needsTrace;
};

/* 2403 */
struct GfxLightGridColors
{
  char rgb[56][3];
};

/* 2404 */
struct GfxLightGridColorsHDR
{
  float colorVec3[56][3];
};

/* 2405 */
struct GfxLightGridTree
{
  char maxDepth;
  int nodeCount;
  int leafCount;
  int coordMinGridSpace[3];
  int coordMaxGridSpace[3];
  int coordHalfSizeGridSpace[3];
  int defaultColorIndexBitCount;
  int defaultLightIndexBitCount;
  unsigned int *p_nodeTable;
  int leafTableSize;
  char *p_leafTable;
};

/* 2406 */
struct GfxLightGrid
{
  bool hasLightRegions;
  bool useSkyForLowZ;
  unsigned int lastSunPrimaryLightIndex;
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
  unsigned int rowAxis;
  unsigned int colAxis;
  unsigned __int16 *rowDataStart;
  unsigned int rawRowDataSize;
  char *rawRowData;
  unsigned int entryCount;
  GfxLightGridEntry *entries;
  unsigned int colorCount;
  GfxLightGridColors *colors;
  unsigned int missingGridColorIndex;
  int tableVersion;
  int paletteVersion;
  char rangeExponent8BitsEncoding;
  char rangeExponent12BitsEncoding;
  char rangeExponent16BitsEncoding;
  char stageCount;
  float *stageLightingContrastGain;
  unsigned int paletteEntryCount;
  int *paletteEntryAddress;
  unsigned int paletteBitstreamSize;
  char *paletteBitstream;
  GfxLightGridColorsHDR skyLightGridColors;
  GfxLightGridColorsHDR defaultLightGridColors;
  GfxLightGridTree tree;
};

/* 2407 */
struct GfxBrushModelWritable
{
  Bounds bounds;
};

/* 2408 */
struct __declspec(align(4)) GfxBrushModel
{
  GfxBrushModelWritable writable;
  Bounds bounds;
  float radius;
  unsigned int startSurfIndex;
  unsigned __int16 surfaceCount;
};

/* 2409 */
struct __declspec(align(8)) MaterialMemory
{
  Material *material;
  int memory;
};

/* 2410 */
struct __declspec(align(8)) sunflare_t
{
  bool hasValidData;
  Material *spriteMaterial;
  Material *flareMaterial;
  float spriteSize;
  float flareMinSize;
  float flareMinDot;
  float flareMaxSize;
  float flareMaxDot;
  float flareMaxAlpha;
  int flareFadeInTime;
  int flareFadeOutTime;
  float blindMinDot;
  float blindMaxDot;
  float blindMaxDarken;
  int blindFadeInTime;
  int blindFadeOutTime;
  float glareMinDot;
  float glareMaxDot;
  float glareMaxLighten;
  int glareFadeInTime;
  int glareFadeOutTime;
  float sunFxPosition[3];
};

/* 2411 */
struct XModelDrawInfo
{
  char hasGfxEntIndex;
  char lod;
  unsigned __int16 surfId;
};

/* 2412 */
struct GfxSceneDynModel
{
  XModelDrawInfo info;
  unsigned __int16 dynEntId;
};

/* 2413 */
struct BModelDrawInfo
{
  unsigned __int16 surfId;
};

/* 2414 */
struct GfxSceneDynBrush
{
  BModelDrawInfo info;
  unsigned __int16 dynEntId;
};

/* 2415 */
struct GfxShadowGeometry
{
  unsigned __int16 surfaceCount;
  unsigned __int16 smodelCount;
  unsigned int *sortedSurfIndex;
  unsigned __int16 *smodelIndex;
};

/* 2416 */
struct GfxLightRegionAxis
{
  float dir[3];
  float midPoint;
  float halfSize;
};

/* 2417 */
struct GfxLightRegionHull
{
  float kdopMidPoint[9];
  float kdopHalfSize[9];
  unsigned int axisCount;
  GfxLightRegionAxis *axis;
};

/* 2418 */
struct GfxLightRegion
{
  unsigned int hullCount;
  GfxLightRegionHull *hulls;
};

/* 2419 */
struct GfxStaticModelInst
{
  Bounds bounds;
  float lightingOrigin[3];
};

/* 2420 */
struct srfTriangles_t
{
  unsigned int vertexLayerData;
  unsigned int firstVertex;
  float maxEdgeLength;
  unsigned __int16 vertexCount;
  unsigned __int16 triCount;
  unsigned int baseIndex;
};

/* 2421 */
struct GfxSurfaceLightingAndFlagsFields
{
  char lightmapIndex;
  char reflectionProbeIndex;
  unsigned __int16 primaryLightEnvIndex;
  char flags;
  char unused[3];
};

/* 2422 */
union GfxSurfaceLightingAndFlags
{
  GfxSurfaceLightingAndFlagsFields fields;
  unsigned __int64 packed;
};

/* 2423 */
struct GfxSurface
{
  srfTriangles_t tris;
  Material *material;
  GfxSurfaceLightingAndFlags laf;
};

/* 2424 */
struct __declspec(align(4)) GfxSurfaceBounds
{
  Bounds bounds;
  char flags;
};

/* 2425 */
struct GfxPackedPlacement
{
  float origin[3];
  float axis[3][3];
  float scale;
};

/* 2426 */
struct GfxStaticModelVertexLighting
{
  char visibility[4];
  unsigned __int16 ambientColorFloat16[4];
  unsigned __int16 highlightColorFloat16[4];
};

/* 2427 */
struct __declspec(align(8)) GfxStaticModelVertexLightingInfo
{
  GfxStaticModelVertexLighting *lightingValues;
  ID3D11Buffer *lightingValuesVb;
  unsigned int numLightingValues;
};

/* 2428 */
struct GfxStaticModelLightmapInfo
{
  float offset[2];
  float scale[2];
  unsigned int lightmapIndex;
};

/* 2429 */
struct __declspec(align(8)) GfxStaticModelDrawInst
{
  GfxPackedPlacement placement;
  XModel *model;
  float groundLighting[4];
  GfxStaticModelVertexLightingInfo vertexLightingInfo;
  GfxStaticModelLightmapInfo modelLightmapInfo;
  unsigned __int16 lightingHandle;
  unsigned __int16 cullDist;
  unsigned __int16 flags;
  unsigned __int16 staticModelId;
  unsigned __int16 primaryLightEnvIndex;
  char reflectionProbeIndex;
  char firstMtlSkinIndex;
  char sunShadowFlags;
};

/* 2430 */
struct __declspec(align(8)) GfxWorldDpvsStatic
{
  unsigned int smodelCount;
  unsigned int staticSurfaceCount;
  unsigned int litOpaqueSurfsBegin;
  unsigned int litOpaqueSurfsEnd;
  unsigned int litDecalSurfsBegin;
  unsigned int litDecalSurfsEnd;
  unsigned int litTransSurfsBegin;
  unsigned int litTransSurfsEnd;
  unsigned int shadowCasterSurfsBegin;
  unsigned int shadowCasterSurfsEnd;
  unsigned int emissiveSurfsBegin;
  unsigned int emissiveSurfsEnd;
  unsigned int smodelVisDataCount;
  unsigned int surfaceVisDataCount;
  unsigned int *smodelVisData[3];
  unsigned int *surfaceVisData[3];
  unsigned int *tessellationCutoffVisData[3];
  unsigned int *sortedSurfIndex;
  GfxStaticModelInst *smodelInsts;
  GfxSurface *surfaces;
  GfxSurfaceBounds *surfacesBounds;
  GfxStaticModelDrawInst *smodelDrawInsts;
  GfxDrawSurf *surfaceMaterials;
  unsigned int *surfaceCastsSunShadow;
  unsigned int sunShadowOptCount;
  unsigned int sunSurfVisDataCount;
  unsigned int *surfaceCastsSunShadowOpt;
  void **constantBuffersLit;
  void **constantBuffersAmbient;
  volatile int usageCount;
};

/* 2431 */
struct GfxWorldDpvsDynamic
{
  unsigned int dynEntClientWordCount[2];
  unsigned int dynEntClientCount[2];
  unsigned int *dynEntCellBits[2];
  char *dynEntVisData[2][3];
};

/* 2432 */
struct GfxHeroOnlyLight
{
  char type;
  char unused[3];
  float color[3];
  float dir[3];
  float up[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
};

/* 2433 */
struct __declspec(align(8)) GfxWorld
{
  const char *name;
  const char *baseName;
  unsigned int bspVersion;
  int planeCount;
  int nodeCount;
  unsigned int surfaceCount;
  int skyCount;
  GfxSky *skies;
  unsigned int lastSunPrimaryLightIndex;
  unsigned int primaryLightCount;
  unsigned int primaryLightEnvCount;
  unsigned int sortKeyLitDecal;
  unsigned int sortKeyEffectDecal;
  unsigned int sortKeyTopDecal;
  unsigned int sortKeyEffectAuto;
  unsigned int sortKeyDistortion;
  GfxWorldDpvsPlanes dpvsPlanes;
  GfxCellTreeCount *aabbTreeCounts;
  GfxCellTree *aabbTrees;
  GfxCell *cells;
  GfxWorldDraw draw;
  GfxLightGrid lightGrid;
  int modelCount;
  GfxBrushModel *models;
  Bounds bounds;
  unsigned int checksum;
  int materialMemoryCount;
  MaterialMemory *materialMemory;
  sunflare_t sun;
  float outdoorLookupMatrix[4][4];
  GfxImage *outdoorImage;
  unsigned int *cellCasterBits;
  unsigned int *cellHasSunLitSurfsBits;
  GfxSceneDynModel *sceneDynModel;
  GfxSceneDynBrush *sceneDynBrush;
  unsigned int *primaryLightEntityShadowVis;
  unsigned int *primaryLightDynEntShadowVis[2];
  unsigned __int16 *nonSunPrimaryLightForModelDynEnt;
  GfxShadowGeometry *shadowGeom;
  GfxShadowGeometry *shadowGeomOptimized;
  GfxLightRegion *lightRegion;
  GfxWorldDpvsStatic dpvs;
  GfxWorldDpvsDynamic dpvsDyn;
  unsigned int mapVtxChecksum;
  unsigned int heroOnlyLightCount;
  GfxHeroOnlyLight *heroOnlyLights;
  char fogTypesAllowed;
};

/* 2434 */
struct MenuList
{
  const char *name;
  int menuCount;
  menuDef_t **menus;
};

/* 2435 */
struct AnimationAimSet
{
  scr_string_t name;
  scr_string_t rootName;
  scr_string_t animName[8];
  unsigned __int64 rootIndex;
  unsigned __int64 animIndices[8];
};

/* 2436 */
struct AnimationEntry
{
  scr_string_t alias;
  scr_string_t animName;
};

/* 2437 */
struct AnimationState
{
  scr_string_t name;
  scr_string_t notify;
  float blendTime;
  char flags;
  char entryCount;
  AnimationAimSet *aimSet;
  AnimationEntry *animEntries;
  unsigned __int64 *animIndices;
};

/* 2438 */
struct AnimationStateMachine
{
  scr_string_t name;
  unsigned __int16 stateCount;
  unsigned __int16 aimSetCount;
  AnimationState *states;
  AnimationAimSet *aimSets;
};

/* 2439 */
struct AnimationClass
{
  const char *className;
  AnimationStateMachine *stateMachine;
  AnimationController animCtrl;
  scr_string_t animTree;
  ScriptableDef *scriptable;
  unsigned __int16 soundCount;
  unsigned __int16 effectCount;
  scr_string_t *soundNotes;
  scr_string_t *soundNames;
  scr_string_t *soundOptions;
  scr_string_t *effectNotes;
  FxEffectDef **effectDefs;
  scr_string_t *effectTags;
};

/* 2440 */
struct LocalizeEntry
{
  const char *value;
  const char *name;
};

/* 2441 */
struct SndGlobalSettings_t
{
  float globalVolumeModifier;
};

/* 2442 */
struct XaReverbSettings
{
  int presetOverridden;
  XAUDIO2FX_REVERB_I3DL2_PARAMETERS reverbSettings;
};

/* 2443 */
struct SndDriverGlobals
{
  const char *name;
  SndGlobalSettings_t settings;
  XaReverbSettings *reverbSettings;
};

/* 2444 */
struct FxImpactEntry
{
  FxEffectDef *nonflesh[31];
  FxEffectDef *flesh[7];
};

/* 2445 */
struct FxImpactTable
{
  const char *name;
  FxImpactEntry *table;
};

/* 2446 */
struct SurfaceFxEntry
{
  FxEffectDef *surfaceEffect[31];
};

/* 2447 */
struct SurfaceFxTable
{
  const char *name;
  SurfaceFxEntry *table;
};

/* 2448 */
struct RawFile
{
  const char *name;
  int compressedLen;
  int len;
  const char *buffer;
};

/* 2449 */
struct ScriptFile
{
  const char *name;
  int compressedLen;
  int len;
  int bytecodeLen;
  const char *buffer;
  char *bytecode;
};

/* 2450 */
struct __declspec(align(8)) LbColumnDef
{
  const char *name;
  int id;
  int propertyId;
  bool hidden;
  StatsGroup statsGroup;
  const char *statName;
  LbColType type;
  int precision;
  LbAggType agg;
  int uiCalColX;
  int uiCalColY;
};

/* 2451 */
struct LeaderboardDef
{
  const char *name;
  int id;
  int columnCount;
  int xpColId;
  int prestigeColId;
  LbColumnDef *columns;
  LbUpdateType updateType;
  int trackTypes;
};

/* 2452 */
struct AddonMapEnts
{
  const char *name;
  char *entityString;
  int numEntityChars;
  MapTriggers trigger;
  ClipInfo *info;
  unsigned int numSubModels;
  cmodel_t *cmodels;
  GfxBrushModel *models;
};

/* 2453 */
struct NetConstStrings
{
  const char *name;
  NetConstStringType stringType;
  NetConstStringSource sourceType;
  unsigned int entryCount;
  const char **stringList;
};

/* 2454 */
struct ReverbPreset
{
  const char *p_name;
  float earlyTime;
  float lateTime;
  float earlyGain;
  float lateGain;
  float lateGainProx;
  float returnGain;
  float earlyLpf;
  float lateLpf;
  float inputLpf;
  float dampLpf;
  float wallReflect;
  float dryGain;
  float earlySize;
  float lateSize;
  float diffusion;
  float rearLevel;
};

/* 2455 */
struct LuaFile
{
  const char *name;
  int len;
  char strippingType;
  const char *buffer;
};

/* 2456 */
struct EquipmentClothData
{
  char *szName;
};

/* 2457 */
struct __declspec(align(8)) EquipmentWeaponRattleData
{
  char *szName;
  float priority;
};

/* 2458 */
struct EquipmentSndChance
{
  float rattleChance;
  float accentChance;
  float silentChance;
};

/* 2459 */
struct EquipmentChanceMoveTypes
{
  EquipmentSndChance *chances;
};

/* 2460 */
struct EquipmentChanceRattleTypes
{
  EquipmentChanceMoveTypes *chances;
};

/* 2461 */
struct EquipmentSoundSet
{
  snd_alias_list_t *soundPLR;
  snd_alias_list_t *soundNPC;
};

/* 2462 */
struct EquipSoundSetMoveTypes
{
  EquipmentSoundSet *soundSets;
};

/* 2463 */
struct EquipSoundSetMantleTypes
{
  EquipmentSoundSet soundSets[14];
};

/* 2464 */
struct EquipmentSoundTable
{
  const char *szName;
  unsigned int numClothTypes;
  unsigned int numWeaponRattleTypes;
  unsigned int numMoveTypes;
  EquipmentClothData *clothTypes;
  EquipmentWeaponRattleData *weaponRattleTypes;
  EquipmentChanceRattleTypes *chancesPLR;
  EquipmentChanceRattleTypes *chancesNPC;
  EquipSoundSetMoveTypes *mvmtClothSoundSets;
  EquipSoundSetMoveTypes *mvmtRattleSoundSets;
  EquipSoundSetMoveTypes mvmtAccentSoundSets;
  EquipSoundSetMantleTypes *mvmtMantleSoundSets;
};

/* 2465 */
struct ExtentBounds
{
  float mins[3];
  float maxs[3];
};

/* 2466 */
struct __declspec(align(8)) VectorField
{
  const char *name;
  float (*linearData)[4];
  ExtentBounds worldBounds;
  float ds[3];
  unsigned int numEntries[3];
  unsigned int flags;
  VectorFieldType type;
  unsigned int pad[1];
};

/* 2467 */
union XAssetHeader
{
  PhysPreset *physPreset;
  PhysCollmap *physCollmap;
  XAnimParts *parts;
  XModelSurfs *modelSurfs;
  XModel *model;
  Material *material;
  ComputeShader *computeShader;
  MaterialVertexShader *vertexShader;
  MaterialHullShader *hullShader;
  MaterialDomainShader *domainShader;
  MaterialPixelShader *pixelShader;
  MaterialVertexDeclaration *vertexDecl;
  MaterialTechniqueSet *techniqueSet;
  GfxImage *image;
  snd_alias_list_t *sound;
  SndCurve *sndCurve;
  SndCurve *lpfCurve;
  SndCurve *reverbCurve;
  LoadedSound *loadSnd;
  clipMap_t *clipMap;
  ComWorld *comWorld;
  GlassWorld *glassWorld;
  PathData *pathData;
  VehicleTrack *vehicleTrack;
  MapEnts *mapEnts;
  FxWorld *fxWorld;
  GfxWorld *gfxWorld;
  GfxLightDef *lightDef;
  Font_s *font;
  MenuList *menuList;
  menuDef_t *menu;
  AnimationClass *animClass;
  LocalizeEntry *localize;
  WeaponAttachment *attachment;
  WeaponCompleteDef *weapon;
  SndDriverGlobals *sndDriverGlobals;
  FxEffectDef *fx;
  FxImpactTable *impactFx;
  SurfaceFxTable *surfaceFx;
  RawFile *rawfile;
  ScriptFile *scriptfile;
  StringTable *stringTable;
  LeaderboardDef *leaderboardDef;
  StructuredDataDefSet *structuredDataDefSet;
  TracerDef *tracerDef;
  VehicleDef *vehDef;
  AddonMapEnts *addonMapEnts;
  NetConstStrings *netConstStrings;
  ReverbPreset *reverbPreset;
  LuaFile *luaFile;
  ScriptableDef *scriptable;
  Colorization *colorization;
  ColorizationSet *colorizationSet;
  ToneMapping *toneMapping;
  EquipmentSoundTable *equipSndTable;
  VectorField *vectorField;
  DopplerPreset *dopplerPreset;
  FxParticleSimAnimation *particleSimAnimation;
  void *data;
};

/* 2468 */
struct __declspec(align(4)) MatchRulesSnapshotDelta::Partition
{
  unsigned int len;
  char data[1225];
};

/* 2469 */
struct MatchRulesSnapshotDelta
{
  int fromSnapTime;
  int toSnapTime;
  unsigned int checksum;
  unsigned __int16 partitionCount;
  MatchRulesSnapshotDelta::Partition partition[3];
};

/* 2470 */
struct qtime_s
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

/* 2471 */
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};

/* 2472 */
struct stbi
{
  unsigned int img_x;
  unsigned int img_y;
  int img_n;
  int img_out_n;
  _iobuf *img_file;
  int buflen;
  char buffer_start[128];
  int from_file;
  char *img_buffer;
  char *img_buffer_end;
};

/* 2473 */
struct huffman
{
  char fast[512];
  unsigned __int16 code[256];
  char values[256];
  char size[257];
  unsigned int maxcode[18];
  int delta[17];
};

/* 2474 */
struct $72AA23BA268EB12AC8D96215C9EF282D
{
  int id;
  int h;
  int v;
  int tq;
  int hd;
  int ha;
  int dc_pred;
  int x;
  int y;
  int w2;
  int h2;
  char *data;
  void *raw_data;
  char *linebuf;
};

/* 2475 */
struct __declspec(align(8)) jpeg
{
  stbi s;
  huffman huff_dc[4];
  huffman huff_ac[4];
  char dequant[4][64];
  int img_h_max;
  int img_v_max;
  int img_mcu_x;
  int img_mcu_y;
  int img_mcu_w;
  int img_mcu_h;
  $72AA23BA268EB12AC8D96215C9EF282D img_comp[4];
  unsigned int code_buffer;
  int code_bits;
  char marker;
  int nomore;
  int scan_n;
  int order[4];
  int restart_interval;
  int todo;
};

/* 2476 */
struct __declspec(align(8)) stb_memory
{
  char *data;
  unsigned __int64 index;
  unsigned int size;
};

/* 2477 */
struct stbi_loader
{
  int (__cdecl *test_memory)(const char *, int);
  char *(__cdecl *load_from_memory)(const char *, int, int *, int *, int *, int);
  int (__cdecl *test_file)(_iobuf *);
  char *(__cdecl *load_from_file)(_iobuf *, int *, int *, int *, int);
};

/* 2478 */
struct pic_packet_t
{
  char size;
  char type;
  char channel;
};

/* 8295 */
typedef unsigned __int16 wchar_t;

/* 2479 */
struct localerefcount
{
  char *locale;
  wchar_t *wlocale;
  int *refcount;
  int *wrefcount;
};

/* 2480 */
struct lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
  unsigned __int16 *_W_decimal_point;
  unsigned __int16 *_W_thousands_sep;
  unsigned __int16 *_W_int_curr_symbol;
  unsigned __int16 *_W_currency_symbol;
  unsigned __int16 *_W_mon_decimal_point;
  unsigned __int16 *_W_mon_thousands_sep;
  unsigned __int16 *_W_positive_sign;
  unsigned __int16 *_W_negative_sign;
};

/* 2481 */
struct __lc_time_data
{
  char *wday_abbr[7];
  char *wday[7];
  char *month_abbr[12];
  char *month[12];
  char *ampm[2];
  char *ww_sdatefmt;
  char *ww_ldatefmt;
  char *ww_timefmt;
  int ww_caltype;
  int refcount;
  unsigned __int16 *_W_wday_abbr[7];
  unsigned __int16 *_W_wday[7];
  unsigned __int16 *_W_month_abbr[12];
  unsigned __int16 *_W_month[12];
  unsigned __int16 *_W_ampm[2];
  unsigned __int16 *_W_ww_sdatefmt;
  unsigned __int16 *_W_ww_ldatefmt;
  unsigned __int16 *_W_ww_timefmt;
  unsigned __int16 *_W_ww_locale_name;
};

/* 2482 */
struct threadlocaleinfostruct
{
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned int lc_time_cp;
  localerefcount lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  lconv *lconv;
  int *ctype1_refcount;
  unsigned __int16 *ctype1;
  const unsigned __int16 *pctype;
  const char *pclmap;
  const char *pcumap;
  __lc_time_data *lc_time_curr;
  wchar_t *locale_name[6];
};

/* 2483 */
struct threadmbcinfostruct
{
  int refcount;
  int mbcodepage;
  int ismbcodepage;
  unsigned __int16 mbulinfo[6];
  char mbctype[257];
  char mbcasemap[256];
  const wchar_t *mblocalename;
};

/* 2484 */
struct localeinfo_struct
{
  threadlocaleinfostruct *locinfo;
  threadmbcinfostruct *mbcinfo;
};

/* 2485 */
struct chunk
{
  unsigned int length;
  unsigned int type;
};

/* 2486 */
struct zhuffman
{
  unsigned __int16 fast[512];
  unsigned __int16 firstcode[16];
  int maxcode[17];
  unsigned __int16 firstsymbol[16];
  char size[288];
  unsigned __int16 value[288];
};

/* 2487 */
struct __declspec(align(8)) zbuf
{
  char *zbuffer;
  char *zbuffer_end;
  int num_bits;
  unsigned int code_buffer;
  char *zout;
  char *zout_start;
  char *zout_end;
  int z_expandable;
  zhuffman z_length;
  zhuffman z_distance;
};

/* 2488 */
struct __declspec(align(8)) stbi_resample
{
  char *(__cdecl *resample)(char *, char *, char *, int, int);
  char *line0;
  char *line1;
  int hs;
  int vs;
  int w_lores;
  int ystep;
  int ypos;
};

/* 2489 */
struct png
{
  stbi s;
  char *idata;
  char *expanded;
  char *out;
};

/* 2490 */
struct __declspec(align(8)) capture_d3d_s
{
  int width;
  int height;
  int windowWidth;
  int windowHeight;
  void *hScreenshotDone;
  void *hJpegDone;
  ID3D11Texture2D *backBufferCopy;
  int x;
  int y;
  void *backBuffer;
  float progress;
};

/* 2491 */
struct HINSTANCE__
{
  int unused;
};

/* 2492 */
struct __cppobj ID3D11Device : IUnknown
{
};

/* 2493 */
struct __cppobj ID3D11DeviceContext : ID3D11DeviceChild
{
};

/* 2494 */
struct __cppobj IDXGIObject : IUnknown
{
};

/* 2495 */
struct __cppobj IDXGIFactory : IDXGIObject
{
};

/* 2496 */
struct __cppobj IDXGIAdapter : IDXGIObject
{
};

/* 2497 */
struct __cppobj IDXGIOutput : IDXGIObject
{
};

/* 2498 */
struct __cppobj ID3D11DepthStencilState : ID3D11DeviceChild
{
};

/* 2499 */
struct __cppobj ID3D11BlendState : ID3D11DeviceChild
{
};

/* 2500 */
union GfxZoneTableEntry
{
  void *voidPtr;
  ID3D11Buffer *buffer;
  ID3D11DepthStencilState *depthStencilState;
  ID3D11BlendState *blendState;
};

/* 2501 */
struct __cppobj ID3D11RasterizerState : ID3D11DeviceChild
{
};

/* 2502 */
struct __cppobj ID3D11SamplerState : ID3D11DeviceChild
{
};

/* 2503 */
struct DXGI_RATIONAL
{
  unsigned int Numerator;
  unsigned int Denominator;
};

/* 2504 */
struct DXGI_MODE_DESC
{
  unsigned int Width;
  unsigned int Height;
  DXGI_RATIONAL RefreshRate;
  DXGI_FORMAT Format;
  DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
  DXGI_MODE_SCALING Scaling;
};

/* 2505 */
struct __cppobj ID3D11Asynchronous : ID3D11DeviceChild
{
};

/* 2506 */
struct __cppobj ID3D11Query : ID3D11Asynchronous
{
};

/* 2507 */
struct __cppobj ID3D11DepthStencilView : ID3D11View
{
};

/* 2508 */
struct HWND__
{
  int unused;
};

/* 2509 */
struct __cppobj IDXGIDeviceSubObject : IDXGIObject
{
};

/* 2510 */
struct __cppobj IDXGISwapChain : IDXGIDeviceSubObject
{
};

/* 2511 */
struct GfxWindowTarget
{
  HWND__ *hwnd;
  IDXGISwapChain *swapChain;
  ID3D11Texture2D *depthStencilTex;
  int width;
  int height;
};

/* 2512 */
struct DxGlobalSceneImageSet
{
  GfxImage *rawFloatZImage;
  GfxImage *rawStencilImage;
  GfxImage *rawPipFloatZImage;
};

/* 2513 */
struct DxGlobals
{
  HINSTANCE__ *hinst;
  ID3D11Device *d3d11device;
  ID3D11DeviceContext *immediateContext;
  int immediateContextLockCount;
  unsigned int immediateContextThreadId;
  IDXGIFactory *dxgiFactory;
  IDXGIAdapter *dxgiAdapter;
  IDXGIOutput *dxgiOutput;
  D3D_FEATURE_LEVEL d3d11FeatureLevel;
  ID3D11Buffer *reactiveTurbulenceEffectorBuffer;
  ID3D11Buffer *smodelWorldMatrixConstantBuffer;
  ID3D11Buffer *smodelLightingOrAmbientConstantBuffer;
  unsigned int constantBufferCounts[3][81];
  GfxZoneTableEntry *constantBufferTables[3][81];
  unsigned int depthStencilStateCounts[81];
  unsigned int blendStateCounts[81];
  GfxZoneTableEntry *depthStencilStateTables[81];
  GfxZoneTableEntry *blendStateTables[81];
  GfxZoneTableEntry defaultDepthStencilStates[256];
  GfxZoneTableEntry defaultBlendStates[64];
  unsigned __int64 defaultDepthStencilStateBits[256];
  unsigned int defaultBlendStateBits[64][1];
  ID3D11RasterizerState *rasterizerStates[32];
  GfxZoneTableEntry defaultConstantBuffers[3][128];
  ID3D11Buffer *precompiledConstantBuffer;
  ID3D11SamplerState *samplerStates[256];
  void *immediateContextMutex;
  unsigned int adapterIndex;
  bool adapterNativeIsValid;
  int adapterNativeWidth;
  int adapterNativeHeight;
  unsigned int displayModeCount;
  DXGI_MODE_DESC displayModes[256];
  const char *resolutionNameTable[257];
  const char *refreshRateNameTable[257];
  char modeText[5120];
  ID3D11Query *fencePool[32];
  unsigned int nextFence;
  D3DMULTISAMPLE_TYPE multiSampleType;
  int occlusionQuerySamples;
  ID3D11DepthStencilView *singleSampleDepthStencilSurface;
  ID3D11ShaderResourceView *singleSampleDepthShaderView;
  volatile bool deviceLost;
  bool allocedCachedSpotShadows;
  bool allocedCachedSunShadows;
  int targetWindowIndex;
  bool forceWindow;
  bool forceFullscreen;
  int windowCount;
  GfxWindowTarget windows[1];
  ID3D11Query *flushGpuFence;
  bool flushGpuFenceIssued;
  _D3DTEXTUREFILTERTYPE linearNonMippedMinFilter;
  _D3DTEXTUREFILTERTYPE linearNonMippedMagFilter;
  _D3DTEXTUREFILTERTYPE linearMippedMinFilter;
  _D3DTEXTUREFILTERTYPE linearMippedMagFilter;
  _D3DTEXTUREFILTERTYPE anisotropicMinFilter;
  _D3DTEXTUREFILTERTYPE anisotropicMagFilter;
  int linearMippedAnisotropy;
  int anisotropyFor2x;
  int anisotropyFor4x;
  int mipFilterMode;
  unsigned int mipBias;
  DxGlobalSceneImageSet sceneImageSets[1];
  ID3D11Query *swapFence;
};

/* 2514 */
struct D3D11_VIEWPORT
{
  float TopLeftX;
  float TopLeftY;
  float Width;
  float Height;
  float MinDepth;
  float MaxDepth;
};

/* 2515 */
struct tagRECT
{
  int left;
  int top;
  int right;
  int bottom;
};

/* 2516 */
struct __cppobj CD3D11_RECT : tagRECT
{
};

/* 2517 */
struct D3D11_BOX
{
  unsigned int left;
  unsigned int top;
  unsigned int front;
  unsigned int right;
  unsigned int bottom;
  unsigned int back;
};

/* 2518 */
struct __cppobj CD3D11_BOX : D3D11_BOX
{
};

/* 2519 */
struct D3D11_DEPTH_STENCILOP_DESC
{
  D3D11_STENCIL_OP StencilFailOp;
  D3D11_STENCIL_OP StencilDepthFailOp;
  D3D11_STENCIL_OP StencilPassOp;
  D3D11_COMPARISON_FUNC StencilFunc;
};

/* 2520 */
struct D3D11_DEPTH_STENCIL_DESC
{
  int DepthEnable;
  D3D11_DEPTH_WRITE_MASK DepthWriteMask;
  D3D11_COMPARISON_FUNC DepthFunc;
  int StencilEnable;
  char StencilReadMask;
  char StencilWriteMask;
  D3D11_DEPTH_STENCILOP_DESC FrontFace;
  D3D11_DEPTH_STENCILOP_DESC BackFace;
};

/* 2521 */
struct __cppobj CD3D11_DEPTH_STENCIL_DESC : D3D11_DEPTH_STENCIL_DESC
{
};

/* 2522 */
struct __cppobj CD3D11_DEFAULT
{
};

/* 2523 */
struct __declspec(align(4)) D3D11_RENDER_TARGET_BLEND_DESC
{
  int BlendEnable;
  D3D11_BLEND SrcBlend;
  D3D11_BLEND DestBlend;
  D3D11_BLEND_OP BlendOp;
  D3D11_BLEND SrcBlendAlpha;
  D3D11_BLEND DestBlendAlpha;
  D3D11_BLEND_OP BlendOpAlpha;
  char RenderTargetWriteMask;
};

/* 2524 */
struct D3D11_BLEND_DESC
{
  int AlphaToCoverageEnable;
  int IndependentBlendEnable;
  D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
};

/* 2525 */
struct __cppobj CD3D11_BLEND_DESC : D3D11_BLEND_DESC
{
};

/* 2526 */
struct D3D11_RASTERIZER_DESC
{
  D3D11_FILL_MODE FillMode;
  D3D11_CULL_MODE CullMode;
  int FrontCounterClockwise;
  int DepthBias;
  float DepthBiasClamp;
  float SlopeScaledDepthBias;
  int DepthClipEnable;
  int ScissorEnable;
  int MultisampleEnable;
  int AntialiasedLineEnable;
};

/* 2527 */
struct __cppobj CD3D11_RASTERIZER_DESC : D3D11_RASTERIZER_DESC
{
};

/* 2528 */
struct D3D11_BUFFER_DESC
{
  unsigned int ByteWidth;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
  unsigned int StructureByteStride;
};

/* 2529 */
struct __cppobj CD3D11_BUFFER_DESC : D3D11_BUFFER_DESC
{
};

/* 2530 */
struct D3D11_TEXTURE1D_DESC
{
  unsigned int Width;
  unsigned int MipLevels;
  unsigned int ArraySize;
  DXGI_FORMAT Format;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2531 */
struct __cppobj CD3D11_TEXTURE1D_DESC : D3D11_TEXTURE1D_DESC
{
};

/* 2532 */
struct DXGI_SAMPLE_DESC
{
  unsigned int Count;
  unsigned int Quality;
};

/* 2533 */
struct D3D11_TEXTURE2D_DESC
{
  unsigned int Width;
  unsigned int Height;
  unsigned int MipLevels;
  unsigned int ArraySize;
  DXGI_FORMAT Format;
  DXGI_SAMPLE_DESC SampleDesc;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2534 */
struct __cppobj CD3D11_TEXTURE2D_DESC : D3D11_TEXTURE2D_DESC
{
};

/* 2535 */
struct D3D11_TEXTURE3D_DESC
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int MipLevels;
  DXGI_FORMAT Format;
  D3D11_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2536 */
struct __cppobj CD3D11_TEXTURE3D_DESC : D3D11_TEXTURE3D_DESC
{
};

/* 2537 */
union $545C80804CFDAA65132ED5A8382CA602
{
  unsigned int FirstElement;
  unsigned int ElementOffset;
};

/* 2538 */
union $44D74FBD1C023638CFA48FB7FF47174A
{
  unsigned int NumElements;
  unsigned int ElementWidth;
};

/* 2539 */
struct D3D11_BUFFER_SRV
{
  $545C80804CFDAA65132ED5A8382CA602 ___u0;
  $44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 2540 */
struct D3D11_TEX1D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 2541 */
struct D3D11_TEX1D_ARRAY_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2542 */
struct D3D11_TEX2D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 2543 */
struct D3D11_TEX2D_ARRAY_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2544 */
struct D3D11_TEX2DMS_SRV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 2545 */
struct D3D11_TEX2DMS_ARRAY_SRV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2546 */
struct D3D11_TEX3D_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 2547 */
struct D3D11_TEXCUBE_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
};

/* 2548 */
struct D3D11_TEXCUBE_ARRAY_SRV
{
  unsigned int MostDetailedMip;
  unsigned int MipLevels;
  unsigned int First2DArrayFace;
  unsigned int NumCubes;
};

/* 2549 */
struct D3D11_BUFFEREX_SRV
{
  unsigned int FirstElement;
  unsigned int NumElements;
  unsigned int Flags;
};

/* 2550 */
union $DC981F4E0A9E4835C0CBFDB21C806AB2
{
  D3D11_BUFFER_SRV Buffer;
  D3D11_TEX1D_SRV Texture1D;
  D3D11_TEX1D_ARRAY_SRV Texture1DArray;
  D3D11_TEX2D_SRV Texture2D;
  D3D11_TEX2D_ARRAY_SRV Texture2DArray;
  D3D11_TEX2DMS_SRV Texture2DMS;
  D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
  D3D11_TEX3D_SRV Texture3D;
  D3D11_TEXCUBE_SRV TextureCube;
  D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
  D3D11_BUFFEREX_SRV BufferEx;
};

/* 2551 */
struct D3D11_SHADER_RESOURCE_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D_SRV_DIMENSION ViewDimension;
  $DC981F4E0A9E4835C0CBFDB21C806AB2 ___u2;
};

/* 2552 */
struct __cppobj CD3D11_SHADER_RESOURCE_VIEW_DESC : D3D11_SHADER_RESOURCE_VIEW_DESC
{
};

/* 2553 */
struct D3D11_SUBRESOURCE_DATA
{
  const void *pSysMem;
  unsigned int SysMemPitch;
  unsigned int SysMemSlicePitch;
};

/* 2554 */
struct D3D11_BUFFER_UAV
{
  unsigned int FirstElement;
  unsigned int NumElements;
  unsigned int Flags;
};

/* 2555 */
struct D3D11_TEX1D_UAV
{
  unsigned int MipSlice;
};

/* 2556 */
struct D3D11_TEX1D_ARRAY_UAV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2557 */
struct D3D11_TEX2D_UAV
{
  unsigned int MipSlice;
};

/* 2558 */
struct D3D11_TEX2D_ARRAY_UAV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2559 */
struct D3D11_TEX3D_UAV
{
  unsigned int MipSlice;
  unsigned int FirstWSlice;
  unsigned int WSize;
};

/* 2560 */
union $30AA1B540843B9F5D4F92D4B8C90C98C
{
  D3D11_BUFFER_UAV Buffer;
  D3D11_TEX1D_UAV Texture1D;
  D3D11_TEX1D_ARRAY_UAV Texture1DArray;
  D3D11_TEX2D_UAV Texture2D;
  D3D11_TEX2D_ARRAY_UAV Texture2DArray;
  D3D11_TEX3D_UAV Texture3D;
};

/* 2561 */
struct D3D11_UNORDERED_ACCESS_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_UAV_DIMENSION ViewDimension;
  $30AA1B540843B9F5D4F92D4B8C90C98C ___u2;
};

/* 2562 */
struct __cppobj ID3D11UnorderedAccessView : ID3D11View
{
};

/* 2563 */
struct D3D11_BUFFER_RTV
{
  $545C80804CFDAA65132ED5A8382CA602 ___u0;
  $44D74FBD1C023638CFA48FB7FF47174A ___u1;
};

/* 2564 */
struct D3D11_TEX1D_RTV
{
  unsigned int MipSlice;
};

/* 2565 */
struct D3D11_TEX1D_ARRAY_RTV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2566 */
struct D3D11_TEX2D_RTV
{
  unsigned int MipSlice;
};

/* 2567 */
struct D3D11_TEX2D_ARRAY_RTV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2568 */
struct D3D11_TEX2DMS_RTV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 2569 */
struct D3D11_TEX2DMS_ARRAY_RTV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2570 */
struct D3D11_TEX3D_RTV
{
  unsigned int MipSlice;
  unsigned int FirstWSlice;
  unsigned int WSize;
};

/* 2571 */
union $A65B2A4A11189CF93DF6302D7A2CE738
{
  D3D11_BUFFER_RTV Buffer;
  D3D11_TEX1D_RTV Texture1D;
  D3D11_TEX1D_ARRAY_RTV Texture1DArray;
  D3D11_TEX2D_RTV Texture2D;
  D3D11_TEX2D_ARRAY_RTV Texture2DArray;
  D3D11_TEX2DMS_RTV Texture2DMS;
  D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
  D3D11_TEX3D_RTV Texture3D;
};

/* 2572 */
struct D3D11_RENDER_TARGET_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_RTV_DIMENSION ViewDimension;
  $A65B2A4A11189CF93DF6302D7A2CE738 ___u2;
};

/* 2573 */
struct __cppobj ID3D11RenderTargetView : ID3D11View
{
};

/* 2574 */
struct D3D11_TEX1D_DSV
{
  unsigned int MipSlice;
};

/* 2575 */
struct D3D11_TEX1D_ARRAY_DSV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2576 */
struct D3D11_TEX2D_DSV
{
  unsigned int MipSlice;
};

/* 2577 */
struct D3D11_TEX2D_ARRAY_DSV
{
  unsigned int MipSlice;
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2578 */
struct D3D11_TEX2DMS_DSV
{
  unsigned int UnusedField_NothingToDefine;
};

/* 2579 */
struct D3D11_TEX2DMS_ARRAY_DSV
{
  unsigned int FirstArraySlice;
  unsigned int ArraySize;
};

/* 2580 */
union $6BD301D552056E7B2FE71F514D3069C7
{
  D3D11_TEX1D_DSV Texture1D;
  D3D11_TEX1D_ARRAY_DSV Texture1DArray;
  D3D11_TEX2D_DSV Texture2D;
  D3D11_TEX2D_ARRAY_DSV Texture2DArray;
  D3D11_TEX2DMS_DSV Texture2DMS;
  D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
};

/* 2581 */
struct D3D11_DEPTH_STENCIL_VIEW_DESC
{
  DXGI_FORMAT Format;
  D3D11_DSV_DIMENSION ViewDimension;
  unsigned int Flags;
  $6BD301D552056E7B2FE71F514D3069C7 ___u3;
};

/* 2582 */
struct D3D11_INPUT_ELEMENT_DESC
{
  const char *SemanticName;
  unsigned int SemanticIndex;
  DXGI_FORMAT Format;
  unsigned int InputSlot;
  unsigned int AlignedByteOffset;
  D3D11_INPUT_CLASSIFICATION InputSlotClass;
  unsigned int InstanceDataStepRate;
};

/* 2583 */
struct __cppobj ID3D11ClassLinkage : ID3D11DeviceChild
{
};

/* 2584 */
struct __cppobj ID3D11GeometryShader : ID3D11DeviceChild
{
};

/* 2585 */
struct __declspec(align(2)) D3D11_SO_DECLARATION_ENTRY
{
  unsigned int Stream;
  const char *SemanticName;
  unsigned int SemanticIndex;
  char StartComponent;
  char ComponentCount;
  char OutputSlot;
};

/* 2586 */
struct D3D11_SAMPLER_DESC
{
  D3D11_FILTER Filter;
  D3D11_TEXTURE_ADDRESS_MODE AddressU;
  D3D11_TEXTURE_ADDRESS_MODE AddressV;
  D3D11_TEXTURE_ADDRESS_MODE AddressW;
  float MipLODBias;
  unsigned int MaxAnisotropy;
  D3D11_COMPARISON_FUNC ComparisonFunc;
  float BorderColor[4];
  float MinLOD;
  float MaxLOD;
};

/* 2587 */
struct D3D11_QUERY_DESC
{
  D3D11_QUERY Query;
  unsigned int MiscFlags;
};

/* 2588 */
struct __cppobj ID3D11Predicate : ID3D11Query
{
};

/* 2589 */
struct D3D11_COUNTER_DESC
{
  D3D11_COUNTER Counter;
  unsigned int MiscFlags;
};

/* 2590 */
struct __cppobj ID3D11Counter : ID3D11Asynchronous
{
};

/* 2591 */
struct __declspec(align(4)) D3D11_COUNTER_INFO
{
  D3D11_COUNTER LastDeviceDependentCounter;
  unsigned int NumSimultaneousCounters;
  char NumDetectableParallelUnits;
};

/* 2592 */
struct __cppobj CD3D11_RENDER_TARGET_VIEW_DESC : D3D11_RENDER_TARGET_VIEW_DESC
{
};

/* 2593 */
struct __cppobj CD3D11_VIEWPORT : D3D11_VIEWPORT
{
};

/* 2594 */
struct __cppobj CD3D11_DEPTH_STENCIL_VIEW_DESC : D3D11_DEPTH_STENCIL_VIEW_DESC
{
};

/* 2595 */
struct __cppobj CD3D11_UNORDERED_ACCESS_VIEW_DESC : D3D11_UNORDERED_ACCESS_VIEW_DESC
{
};

/* 2596 */
struct __cppobj CD3D11_SAMPLER_DESC : D3D11_SAMPLER_DESC
{
};

/* 2597 */
struct __cppobj CD3D11_QUERY_DESC : D3D11_QUERY_DESC
{
};

/* 2598 */
struct __cppobj CD3D11_COUNTER_DESC : D3D11_COUNTER_DESC
{
};

/* 2599 */
struct D3D10_BUFFER_DESC
{
  unsigned int ByteWidth;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2600 */
struct __cppobj CD3D10_BUFFER_DESC : D3D10_BUFFER_DESC
{
};

/* 2601 */
struct D3D10_TEXTURE1D_DESC
{
  unsigned int Width;
  unsigned int MipLevels;
  unsigned int ArraySize;
  DXGI_FORMAT Format;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2602 */
struct __cppobj CD3D10_TEXTURE1D_DESC : D3D10_TEXTURE1D_DESC
{
};

/* 2603 */
struct D3D10_TEXTURE2D_DESC
{
  unsigned int Width;
  unsigned int Height;
  unsigned int MipLevels;
  unsigned int ArraySize;
  DXGI_FORMAT Format;
  DXGI_SAMPLE_DESC SampleDesc;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2604 */
struct __cppobj CD3D10_TEXTURE2D_DESC : D3D10_TEXTURE2D_DESC
{
};

/* 2605 */
struct D3D10_TEXTURE3D_DESC
{
  unsigned int Width;
  unsigned int Height;
  unsigned int Depth;
  unsigned int MipLevels;
  DXGI_FORMAT Format;
  D3D10_USAGE Usage;
  unsigned int BindFlags;
  unsigned int CPUAccessFlags;
  unsigned int MiscFlags;
};

/* 2606 */
struct __cppobj CD3D10_TEXTURE3D_DESC : D3D10_TEXTURE3D_DESC
{
};

/* 2607 */
struct __cppobj ID3D11ClassInstance : ID3D11DeviceChild
{
};

/* 2608 */
struct D3D11_MAPPED_SUBRESOURCE
{
  void *pData;
  unsigned int RowPitch;
  unsigned int DepthPitch;
};

/* 2609 */
struct __cppobj ID3D11CommandList : ID3D11DeviceChild
{
};

/* 2610 */
struct __declspec(align(8)) DXGI_SWAP_CHAIN_DESC
{
  DXGI_MODE_DESC BufferDesc;
  DXGI_SAMPLE_DESC SampleDesc;
  unsigned int BufferUsage;
  unsigned int BufferCount;
  HWND__ *OutputWindow;
  int Windowed;
  DXGI_SWAP_EFFECT SwapEffect;
  unsigned int Flags;
};

/* 2611 */
struct $FAF74743FBE1C8632047CFB668F7028A
{
  unsigned int LowPart;
  int HighPart;
};

/* 2612 */
union _LARGE_INTEGER
{
  $FAF74743FBE1C8632047CFB668F7028A __s0;
  $FAF74743FBE1C8632047CFB668F7028A u;
  __int64 QuadPart;
};

/* 2613 */
struct DXGI_FRAME_STATISTICS
{
  unsigned int PresentCount;
  unsigned int PresentRefreshCount;
  unsigned int SyncRefreshCount;
  _LARGE_INTEGER SyncQPCTime;
  _LARGE_INTEGER SyncGPUTime;
};

/* 2614 */
struct SpuIndexedIterator
{
  unsigned int indexCount;
  unsigned int index;
  const unsigned __int16 *indices;
};

/* 2615 */
struct __declspec(align(8)) SpuBitArrayIterator
{
  unsigned int index;
  unsigned int wordCount;
  unsigned int wordIndex;
  const unsigned int *bitArray;
  unsigned int bits;
};

/* 2616 */
struct GfxVertexBufferState
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  char *verts;
};

/* 2617 */
struct GfxRenderTargetSurface
{
  ID3D11RenderTargetView *color;
  ID3D11DepthStencilView *depthStencil;
  ID3D11RenderTargetView *colorGamma;
};

/* 2618 */
struct GfxImageAndSurface
{
  GfxImage *image;
  GfxRenderTargetSurface surface;
};

/* 2619 */
struct $C97F94A4C789505D3B539EA9ACA34DAD
{
  GfxImage *image;
  GfxRenderTargetSurface surface;
};

/* 2620 */
union $423C8210EF042887680E98C1CDD0DBC9
{
  $C97F94A4C789505D3B539EA9ACA34DAD __s0;
  GfxImageAndSurface imageAndSurfaces[1];
};

/* 2621 */
struct __declspec(align(8)) GfxRenderTarget
{
  $423C8210EF042887680E98C1CDD0DBC9 ___u0;
  unsigned int width;
  unsigned int height;
  DXGI_FORMAT format;
};

/* 2622 */
struct GfxDrawPrimArgs
{
  int primCount;
  int baseIndex;
  unsigned int vertIndexBase;
};

/* 2623 */
struct _LUID
{
  unsigned int LowPart;
  int HighPart;
};

/* 2624 */
struct DXGI_ADAPTER_DESC
{
  wchar_t Description[128];
  unsigned int VendorId;
  unsigned int DeviceId;
  unsigned int SubSysId;
  unsigned int Revision;
  unsigned __int64 DedicatedVideoMemory;
  unsigned __int64 DedicatedSystemMemory;
  unsigned __int64 SharedSystemMemory;
  _LUID AdapterLuid;
};

/* 2625 */
struct HMONITOR__
{
  int unused;
};

/* 2626 */
struct DXGI_OUTPUT_DESC
{
  wchar_t DeviceName[32];
  tagRECT DesktopCoordinates;
  int AttachedToDesktop;
  DXGI_MODE_ROTATION Rotation;
  HMONITOR__ *Monitor;
};

/* 2627 */
struct DXGI_GAMMA_CONTROL_CAPABILITIES
{
  int ScaleAndOffsetSupported;
  float MaxConvertedValue;
  float MinConvertedValue;
  unsigned int NumGammaControlPoints;
  float ControlPointPositions[1025];
};

/* 2628 */
struct DXGI_RGB
{
  float Red;
  float Green;
  float Blue;
};

/* 2629 */
struct DXGI_GAMMA_CONTROL
{
  DXGI_RGB Scale;
  DXGI_RGB Offset;
  DXGI_RGB GammaCurve[1025];
};

/* 2630 */
struct DXGI_SURFACE_DESC
{
  unsigned int Width;
  unsigned int Height;
  DXGI_FORMAT Format;
  DXGI_SAMPLE_DESC SampleDesc;
};

/* 2631 */
struct DXGI_MAPPED_RECT
{
  int Pitch;
  char *pBits;
};

/* 2632 */
struct __cppobj IDXGISurface : IDXGIDeviceSubObject
{
};

/* 2633 */
struct GfxWorldDpvsStaticExtended
{
  unsigned int *smodelVisData[21];
  unsigned int *surfaceVisData[21];
};

/* 2634 */
struct __declspec(align(64)) r_global_permanent_t
{
  unsigned __int16 sortedMaterials[128];
  unsigned __int16 mtlSortIndexBeginKey[64];
  int needSortMaterials;
  int waitSortMaterials;
  int transientMaterialSort;
  unsigned int materialCount;
  GfxImage *whiteImage;
  GfxImage *blackImage;
  GfxImage *defaultDepthImage;
  GfxImage *daltonizeCLUT;
  GfxImage *blackImage3D;
  GfxImage *whiteImage3D;
  GfxImage *blackImageCube;
  GfxImage *grayImage;
  GfxImage *identityNormalMapImage;
  GfxImage *specularityImage;
  GfxImage *outdoorImage;
  GfxImage *randomRotationsImage;
  GfxLightDef *dlightDef;
  Material *defaultMaterial;
  Material *whiteMaterial;
  Material *additiveMaterial;
  Material *pointMaterial;
  Material *lineMaterial;
  Material *lineMaterialNoDepth;
  Material *pipClearMaterial;
  Material *shadowCasterModelMaterial;
  Material *shadowOverlayMaterial;
  Material *depthPrepassMaterial;
  Material *glareBlindMaterial;
  Material *stencilShadowMaterial;
  Material *stencilDisplayMaterial;
  Material *floatZDisplayMaterial;
  Material *floatZMaterial;
  Material *floatZMSMaterial;
  Material *shadowClearMaterial;
  Material *floatZWriteDepthMaterial;
  Material *floatZWriteDepthClearStencilMaterial;
  Material *floatZWriteDepthStenciledMaterial;
  Material *floatZWriteDepthStenciledClearStencilMaterial;
  Material *lineNoDepthTestMaterial;
  Material *velocityStaticMaterial;
  Material *velocityStaticViewModelMaterial;
  Material *colorChannelMixerMaterial;
  Material *frameColorDebugMaterial;
  Material *frameAlphaDebugMaterial;
  GfxImage *rawImage;
  GfxWorld *world;
  GfxWorldDpvsStaticExtended *worldDpvsStaticExtended;
  Material *feedbackReplaceMaterial;
  Material *feedbackReplaceAlphaMaterial;
  Material *feedbackAdditiveMaterial;
  Material *feedbackReplaceGammaMaterial;
  Material *blurApplyMaterial;
  Material *blurApplyFilmMaterial[5];
  Material *blurApplyReplaceMaterial;
  Material *cinematicMaterial;
  Material *dofDownsampleMaterial;
  Material *dofNearCocMaterial;
  Material *smallBlurMaterial;
  Material *dofHqMask;
  Material *dofHqMaskDownsample;
  Material *dofHqMaskBlur;
  Material *dofHqBlur;
  Material *dofHqDownsample;
  Material *dofHqCocBlurMip1;
  Material *dofHqCocBlurMip2;
  Material *dofHqCocBlurMip3;
  Material *dofHqCocBlur;
  Material *dofHqFinal;
  Material *motionblurHQMaterial;
  Material *motionblurHQVelocityPass0Material;
  Material *motionblurHQVelocityPass1Material;
  Material *motionblurHQFastLowMaterial;
  Material *motionblurHQFastMedMaterial;
  Material *motionblurHQFastHighMaterial;
  Material *hdrPostFx0Materials[2];
  Material *hdrPostFx1Materials[16];
  Material *hdrPostFx2Materials[4];
  Material *legacyPostFxMaterials[16];
  Material *hdrPostFxMacroclutMaterials[4];
  Material *ssaoCalcMaterials[2];
  Material *ssaoVBlurMaterials[2];
  Material *fxaaMaterial;
  Material *smaaEdgeDetectionMaterial;
  Material *smaaBlendingWeightCalculationMaterial;
  Material *smaaNeighborboodBlendingMaterial;
  Material *volumeLightScatterBlur0Material;
  Material *volumeLightScatterBlur1Material;
  Material *volumeLightScatterBlur2Material;
  Material *volumeLightScatterApplyMaterial;
  Material *volumeLightScatterApplyWithDepthAttenMaterial;
  Material *symmetricFilterMaterial[2][16];
  Material *shellShockBlurredMaterial;
  Material *shellShockFlashedMaterial;
  Material *thermalBodyDefault;
  Material *waterSheetingFXMaterials[8];
  Material *pipSceneOverlayMaterial;
  Material *materialBloomSetupMaterial;
  Material *materialBloomApplyMaterials[1];
  Material *materialBloomHqSetupMaterial;
  Material *materialBloomHqBlurMaterial;
  Material *materialBloomHqApplyMaterials[1];
  Material *averageLuminanceSetupMaterial;
  Material *averageLuminanceDownsampleMaterial;
  Material *averageLuminanceAccumulateMaterial;
  Material *updateDynamicIrisAdaptation;
  Material *updateDynamicIrisAdaptationHQ;
  Material *postOpaqueFxMaterials[128];
  int savedScreenTimes[4];
};

/* 2635 */
struct D3D11_CLASS_INSTANCE_DESC
{
  unsigned int InstanceId;
  unsigned int InstanceIndex;
  unsigned int TypeId;
  unsigned int ConstantBuffer;
  unsigned int BaseConstantBufferOffset;
  unsigned int BaseTexture;
  unsigned int BaseSampler;
  int Created;
};

/* 2636 */
struct GfxCmdBufPrimState
{
  ID3D11DeviceContext *device;
  ID3D11Buffer *indexBuffer;
  MaterialVertexDeclType vertDeclType;
  unsigned int primType;
  unsigned int streamStrides[3];
  ID3D11Buffer *streamBuffers[3];
  unsigned int streamOffsets[3];
  ID3D11InputLayout *vertexDecl;
  char padding[8];
  __m128 perPrimConstantShadow[80];
  __m128 perObjectConstantShadow[64];
  __m128 stableConstantShadow[88];
  ID3D11Buffer *perPrimVSPSConstantBuffer;
  ID3D11Buffer *perPrimHSDSConstantBuffer;
  ID3D11Buffer *perObjectVSPSConstantBuffer;
  ID3D11Buffer *perObjectHSDSConstantBuffer;
  ID3D11Buffer *stableVSPSConstantBuffer;
  ID3D11Buffer *stableHSDSConstantBuffer;
  ID3D11Buffer *perMaterialVSConstantBuffer;
  ID3D11Buffer *perMaterialHSConstantBuffer;
  ID3D11Buffer *perMaterialDSConstantBuffer;
  ID3D11Buffer *perMaterialPSConstantBuffer;
};

/* 2637 */
struct GfxDeviceState
{
  float blendFactor[4];
  unsigned int sampleMask;
  bool srgbWrite;
  bool srgbRenderTarget;
  ID3D11RasterizerState *rasterizerState;
  ID3D11BlendState *blendState;
  ID3D11DepthStencilState *depthStencilState;
};

/* 2638 */
struct __declspec(align(16)) GfxCmdBufState
{
  GfxCmdBufPrimState prim;
  char vertexSamplerState[16];
  char domainSamplerState[16];
  char pixelSamplerState[16];
  GfxTexture *vertexTexture[128];
  GfxTexture *domainTexture[128];
  GfxTexture *pixelTexture[128];
  int firstVertexSamplerDirty;
  int lastVertexSamplerDirty;
  int firstDomainSamplerDirty;
  int lastDomainSamplerDirty;
  int firstPixelSamplerDirty;
  int lastPixelSamplerDirty;
  int firstVertexTextureDirty;
  int lastVertexTextureDirty;
  int firstDomainTextureDirty;
  int lastDomainTextureDirty;
  int firstPixelTextureDirty;
  int lastPixelTextureDirty;
  Material *material;
  MaterialTechniqueType techType;
  MaterialTechnique *technique;
  MaterialPass *pass;
  unsigned int passIndex;
  GfxDepthRangeType depthRangeType;
  float depthRangeNear;
  float depthRangeFar;
  unsigned __int64 perPrimConstantState[80];
  unsigned __int64 perObjectConstantState[64];
  unsigned __int64 stableConstantState[88];
  GfxDepthStencilMode depthStencilMode;
  bool forceNoDepthHack;
  unsigned int refStateBits[3];
  MaterialPixelShader *pixelShader;
  MaterialVertexShader *vertexShader;
  MaterialHullShader *hullShader;
  MaterialDomainShader *domainShader;
  ComputeShader *computeShader;
  GfxShaderMode shaderMode;
  int scissorX;
  int scissorY;
  int scissorW;
  int scissorH;
  GfxViewport viewport;
  GfxRenderTargetId renderTargetId;
  GfxRenderTargetSuiteId renderTargetSuiteId;
  GfxRenderTargetId renderTargetSuite[2];
  GfxDeviceState deviceState;
};

/* 2639 */
struct GfxPrecompiledConstants
{
  vector4 worldMat;
  __m128 lighting;
};

/* 2640 */
struct GfxMatrix
{
  float m[4][4];
};

/* 2641 */
struct GfxCodeMatrices
{
  GfxMatrix matrix[72];
};

/* 2642 */
struct GfxSparkSurfFields
{
  unsigned __int16 materialSortedIndex;
  unsigned __int16 sparkDataIndex;
};

/* 2643 */
union GfxSparkSurf
{
  GfxSparkSurfFields fields;
  unsigned int packed;
};

/* 2644 */
struct GfxCamera
{
  float origin[3];
  float axis[3][3];
  float subWindowMins[2];
  float subWindowMaxs[2];
  float tanHalfFovX;
  float tanHalfFovY;
  float zNear;
  float depthHackNearClip;
};

/* 2645 */
struct GfxViewParms
{
  GfxMatrix viewMatrix;
  GfxMatrix projectionMatrix;
  GfxMatrix viewProjectionMatrix;
  GfxMatrix inverseViewProjectionMatrix;
  GfxCamera camera;
};

/* 2646 */
struct __declspec(align(8)) GfxMeshData
{
  unsigned int indexCount;
  unsigned int totalIndexCount;
  ID3D11Buffer *ib;
  unsigned __int16 *indices;
  GfxVertexBufferState vb;
  unsigned int vertSize;
};

/* 2647 */
struct SkyOverride
{
  int isActive;
  float refPos[3];
  float ambientColor[3];
};

/* 2648 */
struct __cppobj GfxBackEndPrimitiveData
{
};

/* 2649 */
struct __declspec(align(16)) GfxReactiveMotionBufferState
{
  __m128 constants[1][1];
  ID3D11Buffer *cbs[1];
};

/* 2650 */
struct GfxCmdHeader
{
  unsigned __int16 id;
  unsigned __int16 byteCount;
};

/* 2651 */
struct GfxCmdArray
{
  char *cmds;
  unsigned __int64 usedTotal;
  unsigned __int64 usedCritical;
  GfxCmdHeader *lastCmd;
};

/* 2652 */
struct GfxSceneDef
{
  int time;
  float floatTime;
  float viewOffset[3];
  float viewOffsetPrev[3];
  GfxImage *sunShadowImage;
  float sunShadowPixelAdjust[4];
};

/* 2653 */
struct __declspec(align(8)) GfxStageInfo
{
  Stage activeStage;
  bool activeStageValid;
};

/* 2654 */
struct GfxQuadMeshData
{
  float x;
  float y;
  float width;
  float height;
  GfxMeshData meshData;
};

/* 2655 */
struct __declspec(align(16)) GfxCmdBufInput
{
  float consts[276][4];
  char codeImageSamplerStates[61];
  bool noLitPrepass;
  bool noLightMapPrepass;
  GfxRenderTargetId renderTargetSuites[2][2];
  GfxBackEndData *data;
};

/* 2656 */
struct GfxDigitalDistort
{
  float intensity;
  float timeScale;
};

/* 2657 */
struct __cppobj GfxSSAO : SSAOControls
{
  char mode;
  float diminish;
  float width;
  float depthScale;
  float depthScaleViewModel;
  float blurSharpness;
  float blurStep;
  float gapFalloff;
  float gradientFalloff;
  float fadeDepth;
  float rejectDepth;
  float minPixelWidth;
};

/* 2658 */
struct GfxPostAA
{
  unsigned __int16 mode;
  float fxaaSubpixel;
  float smaaThreshold;
};

/* 2659 */
struct GfxMotionBlurHQ
{
  bool enabled;
};

/* 2660 */
struct GfxBspSurfList
{
  unsigned int count;
  const unsigned int *stream;
};

/* 2661 */
struct GfxSModelSurfList
{
  unsigned int surfDataBytes;
  const char *surfData;
  const char *visData;
};

/* 2662 */
struct __declspec(align(8)) GfxDrawSurfList
{
  GfxDrawSurf *array;
  unsigned int count;
};

/* 2663 */
struct GfxDrawGroupSetupFields
{
  unsigned __int32 materialSortedIndex : 14;
  unsigned __int32 noTess : 1;
  unsigned __int32 useHeroLighting : 1;
  unsigned __int32 thermal : 1;
  unsigned __int32 sceneLightEnvIndex : 16;
  unsigned __int32 surfType : 7;
  unsigned __int32 viewModelRender : 1;
};

/* 2664 */
union GfxDrawGroupSetup
{
  GfxDrawGroupSetupFields fields;
  unsigned __int64 packed;
};

/* 2665 */
struct GfxCodeSurf
{
  GfxDrawGroupSetup drawGroup;
  unsigned int triCount;
  unsigned int vertIndexBase;
  unsigned __int16 *indices;
  unsigned __int16 argOffset;
  unsigned __int16 argCount;
  int reactiveTurbulenceGroup;
};

/* 2666 */
struct __declspec(align(8)) GfxCodeSurfList
{
  GfxCodeSurf *surfs;
  unsigned int count;
};

/* 2667 */
struct GfxMarkSurfLightingFields
{
  char lmapIndex;
  char reflectionProbeIndex;
  unsigned __int16 modelIndex;
};

/* 2668 */
union GfxMarkSurfLighting
{
  GfxMarkSurfLightingFields fields;
  unsigned int packed;
};

/* 2669 */
struct GfxMarkSurf
{
  GfxMarkDisplacementContext displacement[8];
  float sphere[4];
  GfxDrawGroupSetup drawGroup;
  unsigned __int16 *indices;
  unsigned __int16 triCount;
  char modelType;
  char pad;
  GfxMarkSurfLighting lighting;
};

/* 2670 */
struct __declspec(align(8)) GfxMarkSurfList
{
  GfxMarkSurf *surfs;
  unsigned int count;
};

/* 2671 */
struct __declspec(align(8)) GfxGlassSurf
{
  GfxDrawGroupSetup drawGroup;
  char pad;
  char reflectionProbeIndex;
  unsigned __int16 triCount;
  unsigned __int16 *indices;
  unsigned __int16 lightingHandle;
};

/* 2672 */
struct __declspec(align(8)) GfxGlassSurfList
{
  GfxGlassSurf *surfs;
  unsigned int count;
};

/* 2673 */
struct GfxScaledPlacement
{
  GfxPlacement base;
  float scale;
};

/* 2674 */
struct GfxParticleCloud
{
  GfxScaledPlacement placement;
  float endpos[3];
  GfxColorFloat color;
  char padding[4];
  float radius[2];
  unsigned int flags;
  float timeOffset;
};

/* 2675 */
struct GfxCloudSurfFields
{
  unsigned __int16 materialSortedIndex;
  char cloudDataIndex;
  char surfType;
};

/* 2676 */
union GfxCloudSurf
{
  GfxCloudSurfFields fields;
  unsigned int packed;
};

/* 2677 */
struct __declspec(align(8)) GfxCloudSurfList
{
  GfxParticleCloud *particles;
  GfxCloudSurf *surfs;
  unsigned int count;
};

/* 2678 */
struct __declspec(align(8)) GfxSparkSurfList
{
  GfxSparkSurf *surfs;
  unsigned int count;
};

/* 2680 */
struct __declspec(align(8)) GfxDrawListInfo
{
  MaterialTechniqueType baseTechType;
  GfxViewInfo *viewInfo;
  float eyeOffset[3];
  unsigned int sceneLightEnvIndex;
  int cameraView;
  int isNoSunShadow;
  GfxCodeSurfListType codeSurfListType;
};

/* 2681 */
struct GfxDrawList
{
  GfxBspSurfList bspSurfList;
  GfxBspSurfList bspLightMapSurfList;
  GfxSModelSurfList smodelSurfList[2];
  GfxDrawSurfList drawSurfList;
  GfxCodeSurfList codeSurfList;
  GfxMarkSurfList markSurfList;
  GfxGlassSurfList glassSurfList;
  GfxCloudSurfList cloudSurfList;
  GfxSparkSurfList sparkSurfList;
  GfxDrawListInfo info;
};

/* 2679 */
struct GfxViewInfo
{
  GfxViewParms viewParms;
  GfxViewport sceneViewport;
  GfxViewport displayViewport;
  GfxViewport scissorViewport;
  GfxSceneDef sceneDef;
  ShadowType dynamicShadowType;
  int thermalView;
  int thermalSetByWeapon;
  int needsDistortionResolve;
  int viewModelHasDistortion;
  char forceSunShadowsGenerate;
  char postFXColorMode;
  unsigned int sceneLightEnvCount;
  unsigned int sceneLightCount;
  float blurRadius;
  float frustumPlanes[4][4];
  GfxDepthOfField dof;
  GfxFilm film;
  GfxMaterialBloom materialBloom;
  GfxMaterialBloomHQ materialBloomHQ;
  GfxLightScale charPrimaryLightScale;
  GfxLightScale viewModelPrimaryLightScale;
  float charAmbience[3];
  float viewModelAmbience[3];
  GfxStageInfo stageInfo;
  GfxCompositeFx waterSheetingFx;
  const void *displayCmds;
  GfxQuadMeshData *fullSceneViewMesh;
  __declspec(align(16)) GfxCmdBufInput input;
  GfxRenderTargetId renderTargetId;
  int useShadows;
  int viewInfoIndex;
  int isPIPScene;
  LocalClientNum_t clientIndex;
  unsigned int sunShadowResolution;
  unsigned int sunShadowTileCount;
  GfxRenderTargetId sunShadowRenderTargetId;
  char useShadowGeomOpt;
  char sunShadowPrimaryLightIndex;
  int uiBlur;
  int postfxNightvisionUnused;
  GfxDigitalDistort digitalDistortUnused;
  GfxSSAO ssao;
  GfxPostAA postAA;
  GfxVolumeLightScatter volumeLightScatter;
  GfxColorGrading colorGrading;
  GfxRenderTargetId sceneResolveRenderTargetId;
  GfxRenderTargetId scenePingPongTargets[2];
  unsigned int scenePingPongTargetIndex;
  float ssrFade;
  GfxViewport ssrSourceSceneViewport;
  __declspec(align(8)) GfxViewParms prevFrameViewParms;
  GfxMotionBlurHQ motionBlurHQ;
  unsigned __int16 firstFlare;
  unsigned __int16 flareCount;
  int combinePostOpaqueFx;
  int useSunDirFog;
  unsigned int primaryLightsAnimated[1];
  int useCachedSpotShadow;
  int useCachedSunShadow;
  int daltonize;
  GfxDrawList drawList[48];
};

/* 2682 */
struct GfxCmdBuf
{
  ID3D11DeviceContext *device;
  ID3D11CommandList *cmdList;
};

/* 2683 */
struct __declspec(align(8)) GfxDrawCallOutput
{
  GfxCmdBuf cmdBuf;
  volatile int cmdCount;
};

/* 2684 */
struct GfxSunShadowProjection
{
  float switchPartition[4];
  float shadowmapScale[4];
};

/* 2685 */
struct GfxViewportParms
{
  GfxViewport viewport;
  GfxViewParms viewParms;
};

/* 2686 */
struct $E305121F7B69AB453FD3A8D77117EC2D
{
  unsigned __int16 smodelIndex;
  unsigned __int16 minX : 12;
  unsigned __int16 lod : 4;
  unsigned __int16 maxX : 15;
  unsigned __int16 lodChanged : 1;
  unsigned __int16 minY;
  unsigned __int16 maxY;
};

/* 2687 */
struct __declspec(align(16)) GfxCachedSunShadow
{
  bool needGen;
  float sunShadowLightDir[3];
  int gridX;
  int gridY;
  float gridSize;
  DpvsPlane planes[4];
  __declspec(align(8)) GfxViewParms viewParms;
  unsigned __int16 renderTargetIdOffset;
  unsigned __int16 smodelCount;
  $E305121F7B69AB453FD3A8D77117EC2D smodel[4096];
  GfxCachedSunShadow *prev;
  GfxCachedSunShadow *next;
};

/* 2688 */
struct $54B357E4A079BF078364E1DCACF34324
{
  unsigned __int16 minX;
  unsigned __int16 maxX;
  unsigned __int16 minY;
  unsigned __int16 maxY;
};

/* 2689 */
struct GfxCachedSunShadowOverlap
{
  GfxCachedSunShadow *entry;
  bool gen;
  unsigned int smodelExtentCount;
  $54B357E4A079BF078364E1DCACF34324 smodelExtent[4096];
  GfxViewport shadowmapPixels;
};

/* 2690 */
struct __declspec(align(16)) GfxSunShadowPartition
{
  GfxViewportParms viewportParms;
  unsigned int gfxCachedSunShadowOverlapCount;
  GfxCachedSunShadowOverlap gfxCachedSunShadowOverlap[9];
};

/* 2691 */
struct GfxSunShadow
{
  GfxMatrix lookupMatrix;
  GfxSunShadowProjection sunProj;
  GfxSunShadowPartition partition[2];
};

/* 2692 */
struct __declspec(align(16)) GfxSpotShadowSceneLight
{
  GfxMatrix lookupMatrix;
  float fade;
  float tileBiasV;
  unsigned int tileScaleV;
  GfxImage *image;
};

/* 2693 */
struct GfxExtents2D
{
  float minX;
  float maxX;
  float minY;
  float maxY;
};

/* 2694 */
struct GfxSpotShadow
{
  GfxSpotShadowSceneLight sceneLight;
  GfxViewportParms viewportParms;
  unsigned __int16 sceneLightIndex;
  char pad[2];
  GfxLight *light;
  GfxRenderTargetId renderTargetId;
  float pixelAdjust[4];
  int clearScreen;
  int isCachedLight;
  int cachedSpotNeedsUpdate;
  int cachedSpotRegenerateForLODs;
  int cachedSpotStencilNeedsUpdate;
  unsigned int cachedSpotShadowIndex;
  unsigned int smodelsChangedCount;
  GfxExtents2D smodelChangedBoundingBox[1024];
};

/* 2695 */
struct __declspec(align(8)) GfxFlareSurf
{
  Material *material;
  GfxDrawPrimArgs args;
};

/* 2696 */
struct __declspec(align(8)) GfxFlareSurfList
{
  GfxMeshData flareMesh;
  GfxFlareSurf flareSurfs[768];
  unsigned int flareCount;
};

/* 2697 */
struct GfxEntity
{
  unsigned int renderFlags;
  float materialTime;
  unsigned int genericMaterialData;
};

/* 2698 */
struct FxSparkMeshData
{
  unsigned int triCount;
  unsigned __int16 *indices;
  unsigned int baseVertex;
  char pad[4];
  GfxParticleCloud cloud;
  char padding[8];
};

/* 2699 */
union $275F476D4754BCE5F7664C303C36F2D6
{
  unsigned int colorsIndex[8];
  unsigned int sampleColorIndex[8];
};

/* 2700 */
union $8015EEF5C9160D4992CEB38558640D8A
{
  float primaryLightSharedVisibility;
  char primaryLightWeight;
};

/* 2701 */
union $77FEB9BD3C239A3C47FF2DDE6D4BA6C8
{
  float sampleWeight[8];
  unsigned __int16 colorsWeight[8];
};

/* 2702 */
struct __declspec(align(4)) GfxModelLightingPatch
{
  unsigned __int16 modelLightingIndex;
  char colorsCount;
  $275F476D4754BCE5F7664C303C36F2D6 ___u2;
  $8015EEF5C9160D4992CEB38558640D8A ___u3;
  $77FEB9BD3C239A3C47FF2DDE6D4BA6C8 ___u4;
  float sampleWeightSum;
  char groundLighting[4];
  float charLightOrigin[3];
  float heroAmbient[3];
  float viewModelAmbient[3];
  bool useHeroAmbient;
  bool useViewModelAmbient;
};

/* 2703 */
const struct GfxBackEndData
{
  unsigned __int16 sceneLightEnvTechType[15][1];
  GfxSparkSurf sparkSurfs[64];
  GfxViewParms viewParms[6];
  GfxMeshData mesh[6];
  volatile int modelLightingPatchCount;
  SkyOverride skyOverride;
  int localClientNum;
  int hasSunDirChanged;
  GfxBackEndPrimitiveData prim;
  volatile int bspSurfDataUsed;
  volatile int smodelSurfDataUsed;
  volatile int smodelSurfVisDataUsed;
  unsigned int sceneLightHasShadowMap[1];
  int drawSurfCount;
  volatile int surfPos;
  volatile int motionblurSurfPos;
  volatile int gfxEntCount;
  unsigned int codeSurfCount[3];
  unsigned int codeSurfArgsCount[3];
  volatile int cloudDataCount;
  unsigned int glassSurfCount;
  unsigned int markSurfCount;
  volatile int sparkSurfCount;
  bool hudLightingRequested;
  GfxVertexBufferState *skinnedCacheVbPrevFrame;
  GfxVertexBufferState *skinnedCacheVb;
  ID3D11Query *endFence;
  GfxReactiveMotionBufferState *rmBuf;
  int rmCbsUsed;
  int viewParmCount;
  GfxFog fogSettings;
  GfxCmdArray *commands;
  unsigned int viewInfoIndex;
  unsigned int viewInfoCount;
  unsigned int pipInfoCount;
  int isPIPClientView;
  bool isPIPRenderToTexture;
  GfxViewInfo *viewInfo;
  const void *cmds;
  float sunShadowLightDir[3];
  int hasApproxSunDirChanged;
  int cmdBufValid[64];
  GfxDrawCallOutput drawOutput[64];
  unsigned int drawType;
  int renderFromBackEnd;
  volatile int shadowReady;
  volatile int opaqueReady;
  volatile int emissiveReady;
  volatile int finishReady;
  volatile int abortReady;
  int endSwapFrame;
  GfxDrawList dynLightDrawList[4];
  unsigned int dynLightCount;
  GfxDrawList *emissiveSpotShadowDrawList[1];
  unsigned int emissiveSpotLightCount;
  GfxSunShadow sunShadow;
  unsigned int spotShadowCount;
  GfxSpotShadow spotShadows[4];
  GfxFlareSurfList *flareSurfList;
  __declspec(align(32)) char surfsBuffer[16];
  __declspec(align(128)) float codeSurfArgs[3][4];
  __declspec(align(128)) GfxCodeSurf codeEmissiveSurfs[32];
  GfxCodeSurf codeDecalSurfs[4];
  GfxCodeSurf codeTransSurfs[32];
  GfxMarkSurf markSurfs[16];
  GfxMarkSurf markTransSurfs[16];
  GfxGlassSurf glassSurfs[16];
  GfxGlassSurf glassOpaqueSurfs[16];
  unsigned int bspSurfData[128];
  char smodelSurfData[256];
  char smodelSurfVisData[128];
  unsigned __int16 smodelReactiveMotionCBIndices[65536];
  GfxCloudSurf cloudSurfs[32];
  GfxEntity gfxEnts[128];
  FxSparkMeshData sparkData[64];
  GfxParticleCloud cloudData[32];
  GfxDrawSurf drawSurfs[1];
  __declspec(align(128)) GfxLight sceneLights[6];
  __declspec(align(128)) char motionblurSurfsBuffer[65536];
  GfxModelLightingPatch modelLightingPatchList[2];
};

/* 2704 */
struct GfxCmdBufSourceState
{
  GfxCodeMatrices matrices;
  GfxCmdBufInput input;
  GfxViewParms viewParms;
  float eyeOffset[4];
  GfxMatrix shadowLookupMatrix[4];
  unsigned __int16 constVersions[348];
  unsigned __int16 matrixVersions[18];
  unsigned int sceneLightForShadowLookupMatrix[4];
  GfxPlacement *objectPlacement[3];
  GfxViewParms *viewParms3D;
  unsigned int renderFlags;
  char maxSamplerFilter;
  GfxScaledPlacement skinnedPlacement;
  GfxPlacement *objectPlacementPrevFrame;
  GfxScaledPlacement skinnedPlacementPrevFrame;
  int cameraView;
  GfxViewMode viewMode;
  GfxSceneDef sceneDef;
  GfxViewport sceneViewport;
  GfxDepthStencilMode depthStencilMode;
  float materialTime;
  unsigned int genericMaterialData;
  GfxViewportBehavior viewportBehavior;
  int renderTargetWidth;
  int renderTargetHeight;
  unsigned int sceneLightEnvIndex;
  unsigned int sceneLightCount;
  unsigned __int16 sceneLightIndices[4];
  __int8 viewportIsDirty : 1;
  __int8 useHeroLighting : 1;
  __int8 useTextureOverrides : 1;
  __int8 viewModelRender : 1;
  __int8 noPrepass : 1;
  float pixelAspect;
};

/* 2705 */
struct GfxCmdBufContext
{
  GfxCmdBufSourceState *source;
  GfxCmdBufState *state;
};

/* 2706 */
struct __declspec(align(8)) jpeg_encode_state
{
  unsigned __int16 *qt;
  unsigned __int16 *DcCode;
  unsigned __int16 *DcSize;
  unsigned __int16 *AcCode;
  unsigned __int16 *AcSize;
  __int16 ldc;
};

/* 2707 */
struct jpeg_encode
{
  char jpeg_Lqt[64];
  char jpeg_Cqt[64];
  unsigned __int16 jpeg_ILqt[64];
  unsigned __int16 jpeg_ICqt[64];
  unsigned int jpeg_lcode;
  unsigned __int16 jpeg_bitindex;
  jpeg_encode_state jpeg_encode_block_state_y;
  jpeg_encode_state jpeg_encode_block_state_u;
  jpeg_encode_state jpeg_encode_block_state_v;
};

/* 2708 */
struct jpeg_exif_face
{
  float x;
  float y;
  float w;
  float h;
  char *name;
};

/* 2709 */
struct jpeg_exif
{
  float gpsLat;
  float gpsLon;
  float gpsOffsetLat;
  float gpsOffsetLon;
  char *description;
  int numArtists;
  char **artists;
  int numFaces;
  jpeg_exif_face *faces;
};

/* 2710 */
struct __declspec(align(8)) _SECURITY_ATTRIBUTES
{
  unsigned int nLength;
  void *lpSecurityDescriptor;
  int bInheritHandle;
};

/* 2711 */
struct ZipInfo
{
  int offsetCount;
  int offsets[128];
  int size;
  char *buffer;
};

/* 2712 */
struct db_internal_state
{
  int dummy;
};

/* 2713 */
struct db_z_stream_s
{
  char *next_in;
  unsigned int avail_in;
  unsigned int total_in;
  char *next_out;
  unsigned int avail_out;
  unsigned int total_out;
  char *msg;
  db_internal_state *state;
  char *(__cdecl *zalloc)(char *, unsigned int, unsigned int);
  void (__cdecl *zfree)(char *, char *);
  char *opaque;
  int data_type;
  unsigned int adler;
};

/* 2714 */
struct $C95D6283330011CC4EEF9CC74F2A7D10
{
  char Exop;
  char Bits;
};

/* 2715 */
union $862C355B00F531366BDF85A7C1D16AB7
{
  $C95D6283330011CC4EEF9CC74F2A7D10 what;
  unsigned int pad;
};

/* 2716 */
struct db_inflate_huft_s
{
  $862C355B00F531366BDF85A7C1D16AB7 word;
  unsigned int base;
};

/* 2717 */
struct db_inflate_codes_state
{
  int dummy;
};

/* 2718 */
struct $12628995CC31E12F63CCABB296F2E1EF
{
  unsigned int table;
  unsigned int index;
  unsigned int *blens;
  unsigned int bb;
  db_inflate_huft_s *tb;
};

/* 2719 */
struct $FB4BAC9A8BC20C1966CEB08FECB5E3AA
{
  db_inflate_codes_state *codes;
};

/* 2720 */
union $CCCB494160E4550D1A06BAB74E3725F4
{
  unsigned int left;
  $12628995CC31E12F63CCABB296F2E1EF trees;
  $FB4BAC9A8BC20C1966CEB08FECB5E3AA decode;
};

/* 2721 */
struct __declspec(align(8)) db_inflate_blocks_state
{
  db_inflate_block_mode mode;
  $CCCB494160E4550D1A06BAB74E3725F4 sub;
  unsigned int last;
  unsigned int bitk;
  unsigned int bitb;
  db_inflate_huft_s *hufts;
  char *window;
  char *end;
  char *read;
  char *write;
  unsigned int (__cdecl *checkfn)(unsigned int, const char *, unsigned int);
  unsigned int check;
};

/* 2722 */
struct $A1AD60A7CB977A1DBF6E2660B1E40DE7
{
  unsigned int was;
  unsigned int need;
};

/* 2723 */
union $55D5AA3D0BA2E4FDB663CCC48594C6E3
{
  unsigned int method;
  $A1AD60A7CB977A1DBF6E2660B1E40DE7 check;
  unsigned int marker;
};

/* 2724 */
struct __declspec(align(8)) $4C4B4CFC5D32E585A96662F31BB08E73
{
  db_inflate_huft_s *tree;
  unsigned int need;
};

/* 2725 */
struct $A30D36EE59FB41C132336408835C9B9C
{
  unsigned int get;
  unsigned int dist;
};

/* 2726 */
union $A9D553C8C355FA9E259BF0B6043DB319
{
  $4C4B4CFC5D32E585A96662F31BB08E73 code;
  unsigned int lit;
  $A30D36EE59FB41C132336408835C9B9C copy;
};

/* 2735 */
union $985051285AB838B711572F193DE40719
{
  int i[8];
  char s[80];
};

/* 2727 */
struct jpeg_error_mgr
{
  void (__cdecl *error_exit)(jpeg_common_struct *);
  void (__cdecl *emit_message)(jpeg_common_struct *, int);
  void (__cdecl *output_message)(jpeg_common_struct *);
  void (__cdecl *format_message)(jpeg_common_struct *, char *);
  void (__cdecl *reset_error_mgr)(jpeg_common_struct *);
  int msg_code;
  $985051285AB838B711572F193DE40719 msg_parm;
  int trace_level;
  int num_warnings;
  const char *const *jpeg_message_table;
  int last_jpeg_message;
  const char *const *addon_message_table;
  int first_addon_message;
  int last_addon_message;
  void (__cdecl *exit)();
  void (__cdecl *printf)(char *);
};

/* 2734 */
struct jpeg_alloc
{
  void *(__cdecl *malloc)(unsigned __int64);
  void (__cdecl *free)(void *, unsigned __int64);
};

/* 2728 */
struct jpeg_common_struct
{
  jpeg_error_mgr *err;
  jpeg_memory_mgr *mem;
  jpeg_progress_mgr *progress;
  void *client_data;
  char is_decompressor;
  int global_state;
  jpeg_alloc alloc;
};

/* 2729 */
struct jvirt_sarray_control
{
  char **mem_buffer;
  unsigned int rows_in_array;
  unsigned int samplesperrow;
  unsigned int maxaccess;
  unsigned int rows_in_mem;
  unsigned int rowsperchunk;
  unsigned int cur_start_row;
  unsigned int first_undef_row;
  char pre_zero;
  char dirty;
  char b_s_open;
  jvirt_sarray_control *next;
  backing_store_struct b_s_info;
};

/* 2730 */
struct backing_store_struct
{
  void (__cdecl *read_backing_store)(jpeg_common_struct *, backing_store_struct *, void *, int, int);
  void (__cdecl *write_backing_store)(jpeg_common_struct *, backing_store_struct *, void *, int, int);
  void (__cdecl *close_backing_store)(jpeg_common_struct *, backing_store_struct *);
  _iobuf *temp_file;
  char temp_name[64];
};

/* 2731 */
struct jvirt_barray_control
{
  __int16 (**mem_buffer)[64];
  unsigned int rows_in_array;
  unsigned int blocksperrow;
  unsigned int maxaccess;
  unsigned int rows_in_mem;
  unsigned int rowsperchunk;
  unsigned int cur_start_row;
  unsigned int first_undef_row;
  char pre_zero;
  char dirty;
  char b_s_open;
  jvirt_barray_control *next;
  backing_store_struct b_s_info;
};

/* 2732 */
struct jpeg_memory_mgr
{
  void *(__cdecl *alloc_small)(jpeg_common_struct *, int, unsigned __int64);
  void *(__cdecl *alloc_large)(jpeg_common_struct *, int, unsigned __int64);
  char **(__cdecl *alloc_sarray)(jpeg_common_struct *, int, unsigned int, unsigned int);
  __int16 (**(__cdecl *alloc_barray)(jpeg_common_struct *, int, unsigned int, unsigned int))[64];
  jvirt_sarray_control *(__cdecl *request_virt_sarray)(jpeg_common_struct *, int, char, unsigned int, unsigned int, unsigned int);
  jvirt_barray_control *(__cdecl *request_virt_barray)(jpeg_common_struct *, int, char, unsigned int, unsigned int, unsigned int);
  void (__cdecl *realize_virt_arrays)(jpeg_common_struct *);
  char **(__cdecl *access_virt_sarray)(jpeg_common_struct *, jvirt_sarray_control *, unsigned int, unsigned int, char);
  __int16 (**(__cdecl *access_virt_barray)(jpeg_common_struct *, jvirt_barray_control *, unsigned int, unsigned int, char))[64];
  void (__cdecl *free_pool)(jpeg_common_struct *, int);
  void (__cdecl *self_destruct)(jpeg_common_struct *);
  int max_memory_to_use;
  int max_alloc_chunk;
};

/* 2733 */
struct jpeg_progress_mgr
{
  void (__cdecl *progress_monitor)(jpeg_common_struct *);
  int pass_counter;
  int pass_limit;
  int completed_passes;
  int total_passes;
};

/* 2736 */
struct jpeg_decompress_struct
{
  jpeg_error_mgr *err;
  jpeg_memory_mgr *mem;
  jpeg_progress_mgr *progress;
  void *client_data;
  char is_decompressor;
  int global_state;
  jpeg_alloc alloc;
  jpeg_source_mgr *src;
  unsigned int image_width;
  unsigned int image_height;
  int num_components;
  J_COLOR_SPACE jpeg_color_space;
  J_COLOR_SPACE out_color_space;
  unsigned int scale_num;
  unsigned int scale_denom;
  long double output_gamma;
  char buffered_image;
  char raw_data_out;
  J_DCT_METHOD dct_method;
  char do_fancy_upsampling;
  char do_block_smoothing;
  char quantize_colors;
  J_DITHER_MODE dither_mode;
  char two_pass_quantize;
  int desired_number_of_colors;
  char enable_1pass_quant;
  char enable_external_quant;
  char enable_2pass_quant;
  unsigned int output_width;
  unsigned int output_height;
  int out_color_components;
  int output_components;
  int rec_outbuf_height;
  int actual_number_of_colors;
  char **colormap;
  unsigned int output_scanline;
  int input_scan_number;
  unsigned int input_iMCU_row;
  int output_scan_number;
  unsigned int output_iMCU_row;
  int (*coef_bits)[64];
  JQUANT_TBL *quant_tbl_ptrs[4];
  JHUFF_TBL *dc_huff_tbl_ptrs[4];
  JHUFF_TBL *ac_huff_tbl_ptrs[4];
  int data_precision;
  jpeg_component_info *comp_info;
  char progressive_mode;
  char arith_code;
  char arith_dc_L[16];
  char arith_dc_U[16];
  char arith_ac_K[16];
  unsigned int restart_interval;
  char saw_JFIF_marker;
  char JFIF_major_version;
  char JFIF_minor_version;
  char density_unit;
  unsigned __int16 X_density;
  unsigned __int16 Y_density;
  char saw_Adobe_marker;
  char Adobe_transform;
  char CCIR601_sampling;
  jpeg_marker_struct *marker_list;
  int max_h_samp_factor;
  int max_v_samp_factor;
  int min_DCT_scaled_size;
  unsigned int total_iMCU_rows;
  char *sample_range_limit;
  int comps_in_scan;
  jpeg_component_info *cur_comp_info[4];
  unsigned int MCUs_per_row;
  unsigned int MCU_rows_in_scan;
  int blocks_in_MCU;
  int MCU_membership[10];
  int Ss;
  int Se;
  int Ah;
  int Al;
  int unread_marker;
  jpeg_decomp_master *master;
  jpeg_d_main_controller *main;
  jpeg_d_coef_controller *coef;
  jpeg_d_post_controller *post;
  jpeg_input_controller *inputctl;
  jpeg_marker_reader *marker;
  jpeg_entropy_decoder *entropy;
  jpeg_inverse_dct *idct;
  jpeg_upsampler *upsample;
  jpeg_color_deconverter *cconvert;
  jpeg_color_quantizer *cquantize;
};

/* 2737 */
struct jpeg_source_mgr
{
  const char *next_input_byte;
  unsigned __int64 bytes_in_buffer;
  void (__cdecl *init_source)(jpeg_decompress_struct *);
  char (__cdecl *fill_input_buffer)(jpeg_decompress_struct *);
  void (__cdecl *skip_input_data)(jpeg_decompress_struct *, int);
  char (__cdecl *resync_to_restart)(jpeg_decompress_struct *, int);
  void (__cdecl *term_source)(jpeg_decompress_struct *);
};

/* 2738 */
struct __declspec(align(2)) JQUANT_TBL
{
  unsigned __int16 quantval[64];
  char sent_table;
};

/* 2739 */
struct JHUFF_TBL
{
  char bits[17];
  char huffval[256];
  char sent_table;
};

/* 2740 */
struct jpeg_component_info
{
  int component_id;
  int component_index;
  int h_samp_factor;
  int v_samp_factor;
  int quant_tbl_no;
  int dc_tbl_no;
  int ac_tbl_no;
  unsigned int width_in_blocks;
  unsigned int height_in_blocks;
  int DCT_scaled_size;
  unsigned int downsampled_width;
  unsigned int downsampled_height;
  char component_needed;
  int MCU_width;
  int MCU_height;
  int MCU_blocks;
  int MCU_sample_width;
  int last_col_width;
  int last_row_height;
  JQUANT_TBL *quant_table;
  void *dct_table;
};

/* 2741 */
struct jpeg_marker_struct
{
  jpeg_marker_struct *next;
  char marker;
  unsigned int original_length;
  unsigned int data_length;
  char *data;
};

/* 2742 */
struct __declspec(align(8)) jpeg_decomp_master
{
  void (__cdecl *prepare_for_output_pass)(jpeg_decompress_struct *);
  void (__cdecl *finish_output_pass)(jpeg_decompress_struct *);
  char is_dummy_pass;
};

/* 2743 */
struct jpeg_d_main_controller
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *, J_BUF_MODE);
  void (__cdecl *process_data)(jpeg_decompress_struct *, char **, unsigned int *, unsigned int);
};

/* 2744 */
struct jpeg_d_coef_controller
{
  void (__cdecl *start_input_pass)(jpeg_decompress_struct *);
  int (__cdecl *consume_data)(jpeg_decompress_struct *);
  void (__cdecl *start_output_pass)(jpeg_decompress_struct *);
  int (__cdecl *decompress_data)(jpeg_decompress_struct *, char ***);
  jvirt_barray_control **coef_arrays;
};

/* 2745 */
struct jpeg_d_post_controller
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *, J_BUF_MODE);
  void (__cdecl *post_process_data)(jpeg_decompress_struct *, char ***, unsigned int *, unsigned int, char **, unsigned int *, unsigned int);
};

/* 2746 */
struct __declspec(align(8)) jpeg_input_controller
{
  int (__cdecl *consume_input)(jpeg_decompress_struct *);
  void (__cdecl *reset_input_controller)(jpeg_decompress_struct *);
  void (__cdecl *start_input_pass)(jpeg_decompress_struct *);
  void (__cdecl *finish_input_pass)(jpeg_decompress_struct *);
  char has_multiple_scans;
  char eoi_reached;
};

/* 2747 */
struct __declspec(align(8)) jpeg_marker_reader
{
  void (__cdecl *reset_marker_reader)(jpeg_decompress_struct *);
  int (__cdecl *read_markers)(jpeg_decompress_struct *);
  char (__cdecl *read_restart_marker)(jpeg_decompress_struct *);
  char saw_SOI;
  char saw_SOF;
  int next_restart_num;
  unsigned int discarded_bytes;
};

/* 2748 */
struct __declspec(align(8)) jpeg_entropy_decoder
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *);
  char (__cdecl *decode_mcu)(jpeg_decompress_struct *, __int16 (**)[64]);
  char insufficient_data;
};

/* 2749 */
struct jpeg_inverse_dct
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *);
  void (__cdecl *inverse_DCT[10])(jpeg_decompress_struct *, jpeg_component_info *, __int16 *, char **, unsigned int);
};

/* 2750 */
struct __declspec(align(8)) jpeg_upsampler
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *);
  void (__cdecl *upsample)(jpeg_decompress_struct *, char ***, unsigned int *, unsigned int, char **, unsigned int *, unsigned int);
  char need_context_rows;
};

/* 2751 */
struct jpeg_color_deconverter
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *);
  void (__cdecl *color_convert)(jpeg_decompress_struct *, char ***, unsigned int, char **, int);
};

/* 2752 */
struct jpeg_color_quantizer
{
  void (__cdecl *start_pass)(jpeg_decompress_struct *, char);
  void (__cdecl *color_quantize)(jpeg_decompress_struct *, char **, char **, int);
  void (__cdecl *finish_pass)(jpeg_decompress_struct *);
  void (__cdecl *new_color_map)(jpeg_decompress_struct *);
};

/* 2753 */
struct my_cquantizer
{
  jpeg_color_quantizer pub;
  char **sv_colormap;
  int desired;
  unsigned __int16 (**histogram)[32];
  char needs_zeroed;
  __int16 *fserrors;
  char on_odd_row;
  int *error_limiter;
};

/* 2754 */
struct box
{
  int c0min;
  int c0max;
  int c1min;
  int c1max;
  int c2min;
  int c2max;
  int volume;
  int colorcount;
};

/* 2756 */
struct $554BF289EF351B19BF8E7BE30D9C39FE
{
  small_pool_struct *next;
  unsigned __int64 bytes_used;
  unsigned __int64 bytes_left;
};

/* 2755 */
union small_pool_struct
{
  $554BF289EF351B19BF8E7BE30D9C39FE hdr;
  long double dummy;
};

/* 2758 */
struct $99D35BD0E4CF4B994F0B32325076D956
{
  large_pool_struct *next;
  unsigned __int64 bytes_used;
  unsigned __int64 bytes_left;
};

/* 2757 */
union large_pool_struct
{
  $99D35BD0E4CF4B994F0B32325076D956 hdr;
  long double dummy;
};

/* 2759 */
struct my_memory_mgr
{
  jpeg_memory_mgr pub;
  small_pool_struct *small_list[2];
  large_pool_struct *large_list[2];
  jvirt_sarray_control *virt_sarray_list;
  jvirt_barray_control *virt_barray_list;
  int total_space_allocated;
  unsigned int last_rowsperchunk;
};

/* 2760 */
struct __declspec(align(8)) my_upsampler
{
  jpeg_upsampler pub;
  char **color_buf[10];
  void (__cdecl *methods[10])(jpeg_decompress_struct *, jpeg_component_info *, char **, char ***);
  int next_row_out;
  unsigned int rows_to_go;
  int rowgroup_height[10];
  char h_expand[10];
  char v_expand[10];
};

/* 2761 */
struct __declspec(align(8)) my_post_controller
{
  jpeg_d_post_controller pub;
  jvirt_sarray_control *whole_image;
  char **buffer;
  unsigned int strip_height;
  unsigned int starting_row;
  unsigned int next_row;
};

/* 2762 */
struct bitread_perm_state
{
  int get_buffer;
  int bits_left;
};

/* 2763 */
struct savable_state
{
  int put_buffer;
  int put_bits;
  int last_dc_val[4];
};

/* 2764 */
struct d_derived_tbl
{
  int maxcode[18];
  int valoffset[17];
  JHUFF_TBL *pub;
  int look_nbits[256];
  char look_sym[256];
};

/* 2765 */
struct $FC74C3200E641A1E525D873EA83C0D29
{
  _BYTE gap0[20];
  unsigned int restarts_to_go;
};

/* 2766 */
union $0562DC74C91E9EB5D817E4F5DE49D486
{
  savable_state saved;
  $FC74C3200E641A1E525D873EA83C0D29 __s1;
};

/* 2767 */
struct phuff_entropy_decoder
{
  jpeg_entropy_decoder pub;
  bitread_perm_state bitstate;
  $0562DC74C91E9EB5D817E4F5DE49D486 ___u2;
  d_derived_tbl *derived_tbls[4];
  d_derived_tbl *ac_derived_tbl;
};

/* 2768 */
struct bitread_working_state
{
  const char *next_input_byte;
  unsigned __int64 bytes_in_buffer;
  int get_buffer;
  int bits_left;
  jpeg_decompress_struct *cinfo;
};

/* 2769 */
struct my_decomp_master
{
  jpeg_decomp_master pub;
  int pass_number;
  char using_merged_upsample;
  jpeg_color_quantizer *quantizer_1pass;
  jpeg_color_quantizer *quantizer_2pass;
};

/* 2770 */
struct __declspec(align(8)) my_marker_reader
{
  jpeg_marker_reader pub;
  char (__cdecl *process_COM)(jpeg_decompress_struct *);
  char (__cdecl *process_APPn[16])(jpeg_decompress_struct *);
  unsigned int length_limit_COM;
  unsigned int length_limit_APPn[16];
  jpeg_marker_struct *cur_marker;
  unsigned int bytes_read;
};

/* 2771 */
struct my_main_controller
{
  jpeg_d_main_controller pub;
  char **buffer[10];
  char buffer_full;
  unsigned int rowgroup_ctr;
  char ***xbuffer[2];
  int whichptr;
  int context_state;
  unsigned int rowgroups_avail;
  unsigned int iMCU_row_ctr;
};

/* 2772 */
struct __declspec(align(8)) my_input_controller
{
  jpeg_input_controller pub;
  char inheaders;
};

/* 2773 */
struct $16488923742FD3ABC134D2BECC0315DC
{
  _BYTE gap0[16];
  unsigned int restarts_to_go;
};

/* 2774 */
union $09B74DB20EE27E35F518EA03E72D0717
{
  savable_state saved;
  $16488923742FD3ABC134D2BECC0315DC __s1;
};

/* 2775 */
struct __declspec(align(8)) huff_entropy_decoder
{
  jpeg_entropy_decoder pub;
  bitread_perm_state bitstate;
  $09B74DB20EE27E35F518EA03E72D0717 ___u2;
  d_derived_tbl *dc_derived_tbls[4];
  d_derived_tbl *ac_derived_tbls[4];
  d_derived_tbl *dc_cur_tbls[10];
  d_derived_tbl *ac_cur_tbls[10];
  char dc_needed[10];
  char ac_needed[10];
};

/* 2776 */
struct my_idct_controller
{
  jpeg_inverse_dct pub;
  int cur_method[10];
};

/* 2777 */
struct my_color_deconverter
{
  jpeg_color_deconverter pub;
  int *Cr_r_tab;
  int *Cb_b_tab;
  int *Cr_g_tab;
  int *Cb_g_tab;
};

/* 2778 */
struct my_coef_controller
{
  jpeg_d_coef_controller pub;
  unsigned int MCU_ctr;
  int MCU_vert_offset;
  int MCU_rows_per_iMCU_row;
  __int16 (*MCU_buffer[10])[64];
  jvirt_barray_control *whole_image[10];
  int *coef_bits_latch;
};

/* 2779 */
struct __declspec(align(8)) my_source_mgr
{
  jpeg_source_mgr pub;
  char start_of_file;
};

/* 2780 */
struct __declspec(align(8)) jpeg_compress_struct
{
  jpeg_error_mgr *err;
  jpeg_memory_mgr *mem;
  jpeg_progress_mgr *progress;
  void *client_data;
  char is_decompressor;
  int global_state;
  jpeg_alloc alloc;
  jpeg_destination_mgr *dest;
  unsigned int image_width;
  unsigned int image_height;
  int input_components;
  J_COLOR_SPACE in_color_space;
  long double input_gamma;
  int data_precision;
  int num_components;
  J_COLOR_SPACE jpeg_color_space;
  jpeg_component_info *comp_info;
  JQUANT_TBL *quant_tbl_ptrs[4];
  JHUFF_TBL *dc_huff_tbl_ptrs[4];
  JHUFF_TBL *ac_huff_tbl_ptrs[4];
  char arith_dc_L[16];
  char arith_dc_U[16];
  char arith_ac_K[16];
  int num_scans;
  jpeg_scan_info *scan_info;
  char raw_data_in;
  char arith_code;
  char optimize_coding;
  char CCIR601_sampling;
  int smoothing_factor;
  J_DCT_METHOD dct_method;
  unsigned int restart_interval;
  int restart_in_rows;
  char write_JFIF_header;
  char JFIF_major_version;
  char JFIF_minor_version;
  char density_unit;
  unsigned __int16 X_density;
  unsigned __int16 Y_density;
  char write_Adobe_marker;
  unsigned int next_scanline;
  char progressive_mode;
  int max_h_samp_factor;
  int max_v_samp_factor;
  unsigned int total_iMCU_rows;
  int comps_in_scan;
  jpeg_component_info *cur_comp_info[4];
  unsigned int MCUs_per_row;
  unsigned int MCU_rows_in_scan;
  int blocks_in_MCU;
  int MCU_membership[10];
  int Ss;
  int Se;
  int Ah;
  int Al;
  jpeg_comp_master *master;
  jpeg_c_main_controller *main;
  jpeg_c_prep_controller *prep;
  jpeg_c_coef_controller *coef;
  jpeg_marker_writer *marker;
  jpeg_color_converter *cconvert;
  jpeg_downsampler *downsample;
  jpeg_forward_dct *fdct;
  jpeg_entropy_encoder *entropy;
  jpeg_scan_info *script_space;
  int script_space_size;
};

/* 2781 */
struct jpeg_destination_mgr
{
  char *next_output_byte;
  unsigned __int64 free_in_buffer;
  void (__cdecl *init_destination)(jpeg_compress_struct *);
  char (__cdecl *empty_output_buffer)(jpeg_compress_struct *);
  void (__cdecl *term_destination)(jpeg_compress_struct *);
};

/* 2782 */
const struct jpeg_scan_info
{
  int comps_in_scan;
  int component_index[4];
  int Ss;
  int Se;
  int Ah;
  int Al;
};

/* 2783 */
struct __declspec(align(8)) jpeg_comp_master
{
  void (__cdecl *prepare_for_pass)(jpeg_compress_struct *);
  void (__cdecl *pass_startup)(jpeg_compress_struct *);
  void (__cdecl *finish_pass)(jpeg_compress_struct *);
  char call_pass_startup;
  char is_last_pass;
};

/* 2784 */
struct jpeg_c_main_controller
{
  void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
  void (__cdecl *process_data)(jpeg_compress_struct *, char **, unsigned int *, unsigned int);
};

/* 2785 */
struct jpeg_c_prep_controller
{
  void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
  void (__cdecl *pre_process_data)(jpeg_compress_struct *, char **, unsigned int *, unsigned int, char ***, unsigned int *, unsigned int);
};

/* 2786 */
struct jpeg_c_coef_controller
{
  void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
  char (__cdecl *compress_data)(jpeg_compress_struct *, char ***);
};

/* 2787 */
struct jpeg_marker_writer
{
  void (__cdecl *write_file_header)(jpeg_compress_struct *);
  void (__cdecl *write_frame_header)(jpeg_compress_struct *);
  void (__cdecl *write_scan_header)(jpeg_compress_struct *);
  void (__cdecl *write_file_trailer)(jpeg_compress_struct *);
  void (__cdecl *write_tables_only)(jpeg_compress_struct *);
  void (__cdecl *write_marker_header)(jpeg_compress_struct *, int, unsigned int);
  void (__cdecl *write_marker_byte)(jpeg_compress_struct *, int);
};

/* 2788 */
struct jpeg_color_converter
{
  void (__cdecl *start_pass)(jpeg_compress_struct *);
  void (__cdecl *color_convert)(jpeg_compress_struct *, char **, char ***, unsigned int, int);
};

/* 2789 */
struct __declspec(align(8)) jpeg_downsampler
{
  void (__cdecl *start_pass)(jpeg_compress_struct *);
  void (__cdecl *downsample)(jpeg_compress_struct *, char ***, unsigned int, char ***, unsigned int);
  char need_context_rows;
};

/* 2790 */
struct jpeg_forward_dct
{
  void (__cdecl *start_pass)(jpeg_compress_struct *);
  void (__cdecl *forward_DCT)(jpeg_compress_struct *, jpeg_component_info *, char **, __int16 (*)[64], unsigned int, unsigned int, unsigned int);
};

/* 2791 */
struct jpeg_entropy_encoder
{
  void (__cdecl *start_pass)(jpeg_compress_struct *, char);
  char (__cdecl *encode_mcu)(jpeg_compress_struct *, __int16 (**)[64]);
  void (__cdecl *finish_pass)(jpeg_compress_struct *);
};

/* 2792 */
struct __declspec(align(8)) my_destination_mgr
{
  jpeg_destination_mgr pub;
  char *outfile;
  int size;
};

/* 2793 */
struct my_downsampler
{
  jpeg_downsampler pub;
  void (__cdecl *methods[10])(jpeg_compress_struct *, jpeg_component_info *, char **, char **);
};

/* 2794 */
struct my_prep_controller
{
  jpeg_c_prep_controller pub;
  char **color_buf[10];
  unsigned int rows_to_go;
  int next_buf_row;
  int this_row_group;
  int next_buf_stop;
};

/* 2795 */
struct c_derived_tbl
{
  unsigned int ehufco[256];
  char ehufsi[256];
};

/* 2796 */
struct phuff_entropy_encoder
{
  jpeg_entropy_encoder pub;
  char gather_statistics;
  char *next_output_byte;
  unsigned __int64 free_in_buffer;
  int put_buffer;
  int put_bits;
  jpeg_compress_struct *cinfo;
  int last_dc_val[4];
  int ac_tbl_no;
  unsigned int EOBRUN;
  unsigned int BE;
  char *bit_buffer;
  unsigned int restarts_to_go;
  int next_restart_num;
  c_derived_tbl *derived_tbls[4];
  int *count_ptrs[4];
};

/* 2797 */
struct my_comp_master
{
  jpeg_comp_master pub;
  c_pass_type pass_type;
  int pass_number;
  int total_passes;
  int scan_number;
};

/* 2798 */
struct __declspec(align(8)) my_marker_writer
{
  jpeg_marker_writer pub;
  unsigned int last_restart_interval;
};

/* 2799 */
struct working_state
{
  char *next_output_byte;
  unsigned __int64 free_in_buffer;
  savable_state cur;
  jpeg_compress_struct *cinfo;
};

/* 2800 */
struct huff_entropy_encoder
{
  jpeg_entropy_encoder pub;
  savable_state saved;
  unsigned int restarts_to_go;
  int next_restart_num;
  c_derived_tbl *dc_derived_tbls[4];
  c_derived_tbl *ac_derived_tbls[4];
  int *dc_count_ptrs[4];
  int *ac_count_ptrs[4];
};

/* 2801 */
struct my_fdct_controller
{
  jpeg_forward_dct pub;
  void (__cdecl *do_dct)(int *);
  int *divisors[4];
  void (__cdecl *do_float_dct)(float *);
  float *float_divisors[4];
};

/* 2802 */
struct my_color_converter
{
  jpeg_color_converter pub;
  int *rgb_ycc_tab;
};

/* 2803 */
struct GfxDrawMethod
{
  GfxDrawSceneMethod drawScene;
  MaterialTechniqueType baseTechType;
  MaterialTechniqueType emissiveTechType;
  MaterialTechniqueType forceTechType;
};

/* 2804 */
struct __cppobj std::piecewise_construct_t
{
};

/* 2805 */
struct __cppobj std::allocator_arg_t
{
};

/* 2806 */
struct __declspec(align(8)) $4CE927D0F995ABAB79420BE5F2EF6C08
{
  MaterialTechniqueSet *techSet[1];
  volatile unsigned int get;
  volatile unsigned int put;
  int fastUpload;
};

/* 2807 */
struct GfxPackedVertexHdr
{
  float xyz[3];
  float binormalSign;
  GfxColorFloat color;
  char pad[4];
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 2808 */
struct GfxIndexBufferState
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  unsigned __int16 *indices;
};

/* 2809 */
struct __declspec(align(16)) GfxBuffers
{
  unsigned int skinnedCacheFrameCount;
  GfxIndexBufferState dynamicIndexBufferPool[1];
  GfxIndexBufferState *dynamicIndexBuffer;
  GfxVertexBufferState skinnedCacheVbPool[3];
  char *skinnedCacheLockAddr;
  GfxReactiveMotionBufferState reactiveMotionCbPool[2];
  GfxVertexBufferState dynamicVertexBufferPool[1];
  GfxVertexBufferState *dynamicVertexBuffer;
  int skinnedCacheVbPoolFrame;
  int reactiveMotionCbPoolFrame;
};

/* 2810 */
struct mnode_t
{
  unsigned __int16 cellIndex;
  unsigned __int16 rightChildOffset;
};

/* 2811 */
struct __declspec(align(4)) GfxModelBaseSurface
{
  int skinnedCachedOffset;
  unsigned __int16 gfxEntIndex;
  unsigned __int16 lightingHandle;
  DObjAnimMat *modelBasePoseMat;
  char modelBoneIndex;
  char modelBoneCount;
  float ambientColor[4];
  unsigned __int16 motionblurSurf;
};

/* 2812 */
struct GfxModelRigidChildSurface
{
  GfxPlacement placement;
  unsigned __int16 triOffset;
  unsigned __int16 triCount;
};

/* 2813 */
struct __declspec(align(8)) GfxModelRigidSurface
{
  GfxModelBaseSurface base;
  XSurface *xsurf;
  float scale;
  GfxModelRigidChildSurface children[128];
};

/* 2814 */
struct ComputeCmdBufState
{
  ID3D11DeviceContext *device;
  GfxCmdBufState *refGfxState;
  ComputeShader *computeShader;
  GfxBackEndData *data;
};

/* 2815 */
struct r_double_index_t
{
  unsigned __int16 value[2];
};

/* 2816 */
struct __declspec(align(8)) GfxCodeSurfArgs
{
  Material *material;
  unsigned int vertIndexBase;
  r_double_index_t *indices;
  unsigned int indexCount;
  unsigned int argOffset;
  unsigned int argCount;
  const char *fxName;
  int reactiveTurbulenceGroup;
};

/* 2817 */
struct GfxVertex
{
  float xyzw[4];
  GfxColor color;
  float texCoord[2];
  PackedUnitVec normal;
};

/* 2818 */
struct __declspec(align(16)) materialCommands_t
{
  GfxVertex verts[16];
  unsigned __int16 indices[16];
  MaterialVertexDeclType vertDeclType;
  unsigned int vertexSize;
  unsigned int indexCount;
  unsigned int vertexCount;
  unsigned int firstVertex;
  unsigned int lastVertex;
};

/* 2819 */
union _Dconst
{
  unsigned __int16 _Word[8];
  float _Float;
  long double _Double;
  long double _Long_double;
};

/* 2820 */
struct __cppobj std::integral_constant<bool,0>
{
};

/* 2821 */
struct __cppobj std::_Num_base
{
};

/* 2822 */
struct __cppobj std::_Num_int_base : std::_Num_base
{
};

/* 2823 */
struct __cppobj std::numeric_limits<char> : std::_Num_int_base
{
};

/* 2824 */
struct __cppobj std::numeric_limits<wchar_t> : std::_Num_int_base
{
};

/* 2825 */
struct __cppobj std::numeric_limits<bool> : std::_Num_int_base
{
};

/* 2826 */
struct __cppobj std::numeric_limits<signed char> : std::_Num_int_base
{
};

/* 2827 */
struct __cppobj std::numeric_limits<unsigned char> : std::_Num_int_base
{
};

/* 2828 */
struct __cppobj std::numeric_limits<short> : std::_Num_int_base
{
};

/* 2829 */
struct __cppobj std::numeric_limits<unsigned short> : std::_Num_int_base
{
};

/* 2830 */
struct __cppobj std::numeric_limits<int> : std::_Num_int_base
{
};

/* 2831 */
struct __cppobj std::numeric_limits<unsigned int> : std::_Num_int_base
{
};

/* 2832 */
struct __cppobj std::numeric_limits<long> : std::_Num_int_base
{
};

/* 2833 */
struct __cppobj std::numeric_limits<unsigned long> : std::_Num_int_base
{
};

/* 2834 */
struct __cppobj std::numeric_limits<__int64> : std::_Num_int_base
{
};

/* 2835 */
struct __cppobj std::numeric_limits<unsigned __int64> : std::_Num_int_base
{
};

/* 2836 */
struct __cppobj std::_Num_float_base : std::_Num_base
{
};

/* 2837 */
struct __cppobj std::numeric_limits<float> : std::_Num_float_base
{
};

/* 2838 */
struct __cppobj std::numeric_limits<double> : std::_Num_float_base
{
};

/* 2839 */
struct __cppobj std::numeric_limits<long double> : std::_Num_float_base
{
};

/* 2840 */
struct __declspec(align(8)) std::fpos<int>
{
  __int64 _Myoff;
  __int64 _Fpos;
  int _Mystate;
};

/* 2841 */
struct __cppobj std::char_traits<wchar_t>
{
};

/* 2842 */
struct __cppobj std::char_traits<unsigned short>
{
};

/* 2843 */
struct __cppobj std::char_traits<char>
{
};

/* 2844 */
struct __cppobj std::_Container_base0
{
};

/* 2845 */
struct __cppobj std::_Iterator_base0
{
};

/* 2846 */
struct std::_Container_proxy
{
  std::_Container_base12 *_Mycont;
  std::_Iterator_base12 *_Myfirstiter;
};

/* 2847 */
const struct std::_Container_base12
{
  std::_Container_proxy *_Myproxy;
};

/* 2848 */
struct std::_Iterator_base12
{
  std::_Container_proxy *_Myproxy;
  std::_Iterator_base12 *_Mynextiter;
};

/* 2849 */
struct std::_Lockit
{
  int _Locktype;
};

/* 2850 */
struct __cppobj std::allocator<void>
{
};

/* 2851 */
union std::_String_val<std::_Simple_types<char> >::_Bxty
{
  char _Buf[16];
  char *_Ptr;
  char _Alias[16];
};

/* 2852 */
struct __cppobj std::_String_val<std::_Simple_types<char> > : std::_Container_base0
{
  std::_String_val<std::_Simple_types<char> >::_Bxty _Bx;
  unsigned __int64 _Mysize;
  unsigned __int64 _Myres;
};

/* 2853 */
struct __cppobj std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > > : std::_String_val<std::_Simple_types<char> >
{
};

/* 2854 */
struct __cppobj std::basic_string<char,std::char_traits<char>,std::allocator<char> > : std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
{
};

/* 2855 */
struct __cppobj std::_Allocator_base<char>
{
};

/* 2856 */
struct __cppobj std::allocator<char> : std::_Allocator_base<char>
{
};

/* 2857 */
struct __cppobj std::_Wrap_alloc<std::allocator<char> > : std::allocator<char>
{
};

/* 2858 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,char,__int64,char const *,char const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 2859 */
struct __cppobj std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > > : std::_Iterator012<std::random_access_iterator_tag,char,__int64,char const *,char const &,std::_Iterator_base0>
{
  const char *_Ptr;
};

/* 2860 */
struct __cppobj std::_String_iterator<std::_String_val<std::_Simple_types<char> > > : std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
{
};

/* 2861 */
struct __declspec(align(8)) std::exception
{
  std::exceptionVtbl *vfptr;
  const char *_Mywhat;
  bool _Mydofree;
};

/* 2862 */
struct std::exceptionVtbl
{
  void *(__cdecl *__vecDelDtor)(std::exception *this, unsigned int);
  const char *(__cdecl *what)(std::exception *this);
};

/* 2863 */
struct __cppobj std::logic_error : std::exception
{
};

/* 2864 */
struct __cppobj std::allocator_traits<std::allocator<char> >
{
};

/* 2865 */
struct __cppobj std::_Wrap_alloc<std::allocator<char> >::rebind<char>
{
};

/* 2866 */
struct __cppobj std::_Wrap_alloc<std::allocator<char> >::rebind<char *>
{
};

/* 2867 */
struct __cppobj std::allocator_traits<std::allocator<char> >::rebind_alloc<char>
{
};

/* 2868 */
struct __cppobj std::allocator_traits<std::allocator<char> >::rebind_alloc<char *>
{
};

/* 2869 */
struct __cppobj std::domain_error : std::logic_error
{
};

/* 2870 */
struct __cppobj std::invalid_argument : std::logic_error
{
};

/* 2871 */
struct __cppobj std::length_error : std::logic_error
{
};

/* 2872 */
struct __cppobj std::out_of_range : std::logic_error
{
};

/* 2873 */
struct __cppobj std::runtime_error : std::exception
{
};

/* 2874 */
struct __cppobj std::overflow_error : std::runtime_error
{
};

/* 2875 */
struct __cppobj std::underflow_error : std::runtime_error
{
};

/* 2876 */
struct __cppobj std::range_error : std::runtime_error
{
};

/* 2877 */
struct GfxDrawConsts
{
  float outdoorLookupMatrix[4][4];
  GfxScaledPlacement identityPlacement;
  float scaleViewport;
  ID3D11Buffer *particleCloudVertexBuffer;
  ID3D11Buffer *particleCloudIndexBuffer;
  ID3D11Buffer *particleCloudSparkVertexBuffer;
  ID3D11Buffer *particleCloudSparkIndexBuffer;
  __declspec(align(128)) char sortedMaterialKeys[128];
};

/* 2878 */
struct GfxBspSurfIter
{
  const unsigned int *current;
  const unsigned int *end;
  const unsigned int *mark;
};

/* 2879 */
struct __cppobj GfxBspLightMapSurfIter : GfxBspSurfIter
{
};

/* 2880 */
struct GfxSModelSurfIter
{
  const char *visData;
  const char *current;
  const char *end;
  const char *mark;
};

/* 2881 */
struct __cppobj GfxSModelRigidSurfIter : GfxSModelSurfIter
{
};

/* 2882 */
struct __cppobj GfxSModelInstancedSurfIter : GfxSModelSurfIter
{
};

/* 2883 */
struct GfxDrawSurfIter
{
  GfxDrawSurf *current;
  GfxDrawSurf *end;
  GfxDrawSurf *mark;
};

/* 2884 */
struct GfxCodeSurfIter
{
  GfxCodeSurf *current;
  GfxCodeSurf *end;
};

/* 2885 */
struct GfxMarkSurfIter
{
  GfxMarkSurf *current;
  GfxMarkSurf *end;
  GfxMarkSurf *mark;
};

/* 2886 */
struct GfxGlassSurfIter
{
  GfxGlassSurf *current;
  GfxGlassSurf *end;
  GfxGlassSurf *mark;
};

/* 2887 */
struct GfxCloudSurfIter
{
  GfxCloudSurf *current;
  GfxCloudSurf *end;
};

/* 2888 */
struct GfxSparkSurfIter
{
  GfxSparkSurf *current;
  GfxSparkSurf *end;
};

/* 2889 */
struct GfxDrawListIter
{
  GfxBspSurfIter bspSurfIter;
  GfxBspLightMapSurfIter bspLightMapSurfIter;
  GfxSModelRigidSurfIter smodelRigidSurfIter;
  GfxSModelInstancedSurfIter smodelInstancedSurfIter;
  GfxDrawSurfIter drawSurfIter;
  GfxCodeSurfIter codeSurfIter;
  GfxMarkSurfIter markSurfIter;
  GfxGlassSurfIter glassSurfIter;
  GfxCloudSurfIter cloudSurfIter;
  GfxSparkSurfIter sparkSurfIter;
};

/* 2890 */
struct GfxBspSurfFields
{
  unsigned __int32 countLessOne : 16;
  unsigned __int32 restart : 1;
  unsigned __int32 tessellation : 3;
  unsigned __int32 unused : 12;
};

/* 2891 */
union GfxBspSurfHeader
{
  GfxBspSurfFields fields;
  unsigned int packed;
};

/* 2892 */
struct __cppobj GfxBspNoSunShadowsSurfIter : GfxBspSurfIter
{
};

/* 2893 */
struct __declspec(align(8)) GfxDrawListArgs
{
  GfxCmdBufContext context;
  GfxDrawListInfo *listInfo;
  MaterialTechniqueType baseTechType;
};

/* 2894 */
struct GfxModelSkinnedSurface
{
  GfxModelBaseSurface base;
  XSurface *xsurf;
};

/* 2895 */
struct GfxModelMotionblurSkinnedSurface
{
  int cacheOffset[1];
};

/* 2896 */
struct BModelSurface
{
  GfxPlacement *placement;
  GfxSurface *surf;
  GfxPlacement *prevPlacement;
};

/* 2897 */
struct __declspec(align(8)) GfxGlobals
{
  bool mainThreadHasOwnership;
  bool startedRenderThread;
  bool isRenderingRemoteUpdate;
  volatile int screenUpdateNotify;
  volatile int remoteScreenUpdateNesting;
  int backEndFrameCount;
  GfxBackEndData *volatile freezeDrawData;
  volatile int freezeDrawLock;
  int curFrameSkelTimeStamp;
  int prevSkelTimeStampMaxDifference;
};

/* 2898 */
struct SSAO_RotationDir
{
  unsigned __int16 x;
  unsigned __int16 y;
};

/* 2899 */
struct GfxBatchedQuadMeshData
{
  GfxMeshData meshData;
};

/* 2900 */
struct GfxMeshGlobals
{
  GfxQuadMeshData fullSceneViewMesh[6];
  GfxQuadMeshData spotShadowViewMeshSmall;
  GfxQuadMeshData spotShadowViewMeshLarge;
  GfxBatchedQuadMeshData spotShadowBatchedQuadMesh[6][4];
  GfxBatchedQuadMeshData sunShadowBatchedQuadMesh[6][2][9];
  GfxQuadMeshData sunShadowCacheQuadMesh[6][2][9];
};

/* 2901 */
struct SpotShadowMapUserData
{
  unsigned int spotShadowIndex;
  int isCachedList;
  int useCachedSpotShadow;
  GfxSpotShadow *spotShadow;
  GfxDrawList *drawList;
  GfxBackEndData *data;
};

/* 2902 */
struct __declspec(align(4)) SunFlareDynamic
{
  float flareIntensity;
  float currentBlind;
  float currentGlare;
  int lastTime;
  float lastVisibility;
  float lastDot;
  unsigned __int16 occlusionQueryHandle;
};

/* 2903 */
struct OcclusionQuery
{
  bool enabled;
  bool error;
  bool isWorldPos;
  bool isValidPos;
  float position[3];
  float depthBias;
  float lastVisibility;
  int localClientNum;
  int hitNum;
  bool issued[4];
  ID3D11Query *query[4];
  int nextQueryIndexPlusOne;
  unsigned __int64 prevQueryData;
};

/* 2904 */
struct __declspec(align(8)) $05BF5B17EEA459B9C609171D002E693B
{
  unsigned __int16 (*history)[3];
  int count;
};

/* 2905 */
union $C0E5C6500529C793BBDBB9E0107019E6
{
  GfxLightGridColors backupColors;
  char backupEncodedSH[56];
};

/* 2906 */
struct $C0FB382BA27B4BB6E758E3869D719D95
{
  SkyOverride state;
  char primaryLightIndex;
  char pad[3];
  $C0E5C6500529C793BBDBB9E0107019E6 ___u3;
};

/* 2907 */
struct LightGridNodeIndexRaw
{
  char indexBitCount;
  char indexTableSize;
  char indexTableSizeBitCount;
  int indexMin;
  int indexDefault;
  int indexTable[15];
};

/* 2908 */
struct BuildBounds
{
  __m128 mins;
  __m128 maxs;
};

/* 2909 */
struct GfxLightGridEncoderConfig
{
  char rangeExponent8BitsEncoding;
  char rangeExponent12BitsEncoding;
  char rangeExponent16BitsEncoding;
};

/* 2910 */
struct GfxLightGridSphericalHarmonics
{
  __m128 coeffs[9];
};

/* 2911 */
struct GfxLightGridRow
{
  unsigned __int16 colStart;
  unsigned __int16 colCount;
  unsigned __int16 zStart;
  unsigned __int16 zCount;
  unsigned int firstEntry;
};

/* 2912 */
struct __declspec(align(2)) GfxLightGridRaw
{
  unsigned int colorIndex;
  unsigned __int16 lightIndex;
  char voxel;
};

/* 2913 */
struct GfxLightingAtPointParams
{
  unsigned __int16 textureBlockHandle;
  GfxModelLightExtrapolation extrapolateBehavior;
  unsigned int nonSunPrimaryLightIndex;
  unsigned int defaultColorIndex;
  unsigned int flags;
  int ambientColorFunc;
  bool ambientColorWithOcclusion;
  const float *samplePos;
  const float *referencePos;
  const float *heroLightSamplePos;
  const float (*viewModelAmbient)[3];
  const float (*heroAmbient)[3];
};

/* 2914 */
struct GfxLightingAtPointOutput
{
  bool missingLightGrid;
  unsigned int sampleCount;
  unsigned int sampleColorIndex[8];
  float sampleWeight[8];
  float sampleWeightSum;
  unsigned int primaryLightIndexOrEnv;
  float primaryLightSharedVisibility;
  GfxLightGridSphericalHarmonics sh;
  float ambientColor[4];
};

/* 2915 */
struct __declspec(align(4)) GfxImageFilterPass
{
  Material *material;
  int tapHalfCount;
  float tapOffsetsAndWeights[16][4];
  char maxSamplerFilter;
};

/* 2916 */
struct GfxImageFilter
{
  int passCount;
  __declspec(align(8)) GfxImageFilterPass passes[32];
  GfxImage *sourceImage;
  GfxRenderTargetId finalTarget;
  unsigned int pingPongCount;
  GfxRenderTargetId pingPongTargets[2];
  int useGammaReadsAfterFirstPass;
  int useSrgbReads;
};

/* 2917 */
struct GfxLodRamp
{
  float scale;
  float bias;
};

/* 2918 */
struct GfxLodParms
{
  float origin[3];
  GfxLodRamp ramp[2];
  float invFovScale;
  float cappedLodScale;
};

/* 2919 */
struct __declspec(align(16)) r_globals_t
{
  GfxViewParms identityViewParms;
  bool forbidDelayLoadImages;
  bool ignorePrecacheErrors;
  float viewOrg[3];
  float viewDir[3];
  unsigned int frontEndFrameCount;
  int totalImageMemory;
  GfxFog fogSettings[2][8];
  int fogIndex[2];
  GfxColor colorMyTeam;
  GfxColor colorEnemyTeam;
  GfxColor colorMyParty;
  GfxColor colorFacebookBlue;
  GfxLodParms lodParms;
  GfxLodParms correctedLodParms;
  bool hasAnyImageOverrides;
  bool useSunDirFog;
  bool useSunLightOverride;
  bool useSunIntensityOverride;
  bool useSunDirOverride;
  bool useSunDirLerp;
  bool useSunDirOverrideAllowSlowRecomputeShadows;
  float sunLightOverride[3];
  float sunIntensityOverride;
  float sunDirOverride[3];
  float sunDirOverrideTarget[3];
  int sunDirLerpBeginTime;
  int sunDirLerpEndTime;
  int sunDirLerpAccelTime;
  int sunDirLerpDecelTime;
  GfxViewParms *debugViewParms;
  int endTime;
  bool distortion;
  int tessellation;
  float tessellationCutoffDistanceSq;
  int colorMap;
  unsigned int viewInfoCount;
  unsigned int pipInfoCount;
  int sunShadowFull;
  float sunShadowmapScale;
  unsigned int sunShadowSize;
  int qualitySpotShadow;
  float sunSampleSizeNear;
  int skinnedCacheReachedThreshold;
  float waterFloatTime;
  unsigned int textureAtlasTime;
  bool thermalView;
  bool thermalSetByWeapon;
  Material *thermalBody;
  bool thermalViewShadowEffect;
  bool offchipTessellationAllowed;
  float offchipTesellationTfThreshold;
  int offchipTesellationWaveThreshold;
  bool patchCountAllowed;
  int subdivPatchCount;
  int displacementPatchCount;
  int defaultPatchCount;
  bool lateAllocParamCacheAllowed;
  int lateAllocParamCacheSubdiv;
  int lateAllocParamCacheDisplacement;
  int lateAllocParamCacheDefault;
  int renderHiResShot;
  float hiResShotScaleX;
  float hiResShotScaleY;
  float hiResShotX;
  float hiResShotY;
};

/* 2920 */
struct NVDX_ObjectHandle__
{
  int unused;
};

/* 2921 */
struct NVDX_SwapChainHandle__
{
  int unused;
};

/* 2922 */
struct GfxDrawDepthPrepassUserData
{
  GfxViewInfo *viewInfo;
  GfxDrawList *drawList;
};

/* 2923 */
struct __declspec(align(8)) R_DepthPrepassLitDecalOrTransContext
{
  GfxViewInfo *viewInfo;
  GfxDrawList *drawList;
  R_SplitDecalTrans_Layer sdtLayer;
};

/* 2924 */
struct $991D2685922BDC4CF4252355F9940DB3
{
  char drawListID;
};

/* 2925 */
struct R_SplitDecalTrans_LayerInfo
{
  $991D2685922BDC4CF4252355F9940DB3 forward;
};

/* 2926 */
struct HHOOK__
{
  int unused;
};

/* 2927 */
struct __declspec(align(8)) WinVars_t
{
  HINSTANCE__ *reflib_library;
  int reflib_active;
  HWND__ *hWnd;
  HINSTANCE__ *hInstance;
  int activeApp;
  int isMinimized;
  int hasFocus;
  int activationStateChanged;
  int recenterMouse;
  HHOOK__ *lowLevelKeyboardHook;
  unsigned int sysMsgTime;
};

/* 2928 */
struct r_backEndGlobals_t
{
  int glowCount;
  GfxImage *glowImage;
  Font_s *debugFont;
};

/* 2929 */
struct GfxRenderCommandExecState
{
  const void *cmd;
};

/* 2930 */
struct GfxPointVertex
{
  float xyz[3];
  char color[4];
};

/* 2931 */
struct GfxSModelSurfHeaderFields
{
  char pad1[1];
  char reflectionProbeIndex;
  unsigned __int16 sceneLightEnvIndex;
  unsigned __int16 materialSortedIndex;
  char visDataRefCountLessOne;
  char pad2;
};

/* 2932 */
union GfxSModelSurfHeader
{
  GfxSModelSurfHeaderFields fields;
  unsigned __int64 packed;
  unsigned __int16 array[4];
};

/* 2933 */
struct GfxSModelSurfVisDataRefFields
{
  unsigned __int16 surfIndex : 4;
  unsigned __int16 visDataIndexPacked : 12;
};

/* 2934 */
union GfxSModelSurfVisDataRef
{
  GfxSModelSurfVisDataRefFields fields;
  unsigned __int16 packed;
};

/* 2935 */
struct __declspec(align(8)) GfxSModelSurf
{
  GfxSModelSurfHeader header;
  GfxSModelSurfVisDataRef visDataRefs[1];
};

/* 2936 */
struct __cppobj GfxSModelRigidNoSunShadowsSurfIter : GfxSModelRigidSurfIter
{
};

/* 2937 */
struct __cppobj GfxSModelInstancedNoSunShadowsSurfIter : GfxSModelInstancedSurfIter
{
};

/* 2938 */
struct __declspec(align(8)) PerfTimer
{
  unsigned int beginTime;
  unsigned int totalTime;
  unsigned int firstRange;
  unsigned int rangeCount;
  PerfTimer *parent;
  PerfTimer *nextSibling;
  bool hasChild;
  bool isActive;
  bool hide;
  char bucket;
};

/* 2939 */
struct PerfTimerFrame
{
  unsigned int beginTime;
  unsigned int totalTime;
  PerfTimer *timers[80];
  unsigned int *rangeBegins;
  unsigned int *rangeEnds;
  bool *rangeIsRunDrawList;
};

/* 2940 */
struct PerfTimerFrameHistory
{
  unsigned int currentFrame;
  unsigned int frameCount;
  PerfTimerFrame frames[64];
};

/* 2941 */
struct __declspec(align(8)) GfxCmdStretchPic
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w;
  float h;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

/* 2942 */
struct GfxCmdStretchPicRotateXY
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w;
  float h;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
  float rotation;
};

/* 2943 */
struct GfxCmdStretchPicRotateST
{
  GfxCmdHeader header;
  Material *material;
  float x;
  float y;
  float w;
  float h;
  float centerS;
  float centerT;
  float scaleFinalS;
  float scaleFinalT;
  float minS;
  float maxS;
  float minT;
  float maxT;
  GfxColor color;
  float rotation;
};

/* 2944 */
struct __declspec(align(8)) GfxCmdDrawQuadPic
{
  GfxCmdHeader header;
  Material *material;
  float verts[4][2];
  GfxColor color;
};

/* 2945 */
struct __declspec(align(8)) GfxCmdDrawQuadPicST
{
  GfxCmdHeader header;
  Material *material;
  float verts[4][2];
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

/* 2946 */
struct __declspec(align(8)) GfxCmdDrawFullScreenColoredQuad
{
  GfxCmdHeader header;
  Material *material;
  float s0;
  float t0;
  float s1;
  float t1;
  GfxColor color;
};

/* 2947 */
struct GfxCmdStretchRaw
{
  GfxCmdHeader header;
  int x;
  int y;
  int w;
  int h;
  int cols;
  int rows;
  const char *data;
  int client;
  int dirty;
};

/* 2948 */
struct __cppobj GfxBspSurfTessCallback
{
};

/* 2949 */
struct __cppobj GfxBspLightMapSurfTessCallback
{
};

/* 2950 */
struct __cppobj GfxSModelRigidSurfTessCallback
{
};

/* 2951 */
struct __cppobj GfxSModelInstancedSurfTessCallback
{
};

/* 2952 */
struct __cppobj GfxDrawSurfTessCallback
{
};

/* 2953 */
struct __cppobj GfxCodeSurfTessCallback
{
};

/* 2954 */
struct __cppobj GfxMarkSurfTessCallback
{
};

/* 2955 */
struct __cppobj GfxGlassSurfTessCallback
{
};

/* 2956 */
struct __cppobj GfxCloudSurfTessCallback
{
};

/* 2957 */
struct __cppobj GfxSparkSurfTessCallback
{
};

/* 2958 */
struct $C0F43AD34CA8FB6FD6CB78F0C8ABF61F
{
  unsigned int unused;
  unsigned int spliceIndex;
  unsigned __int64 sortKey;
};

/* 2959 */
union GfxSurfsIteratorSortKey
{
  $C0F43AD34CA8FB6FD6CB78F0C8ABF61F fields;
  Packed128 packed;
};

/* 2960 */
struct GfxSurfsIterator
{
  GfxSurfsIteratorSortKey key;
  unsigned __int64 (__cdecl *GetSortKeyCallback)(GfxDrawListIter *);
  bool (__cdecl *RenderDrawGroupCallback)(GfxDrawListArgs *, GfxDrawListIter *);
  bool (__cdecl *RenderDrawGroupNoRenderCallback)(GfxDrawListIter *);
};

/* 2961 */
struct $D60363E57F8D0043080919C9ACA869F2
{
  unsigned __int64 materialSortedIndex : 13;
  unsigned __int64 noTess : 1;
  unsigned __int64 useHeroLighting : 1;
  unsigned __int64 sceneLightEnvIndex : 16;
  unsigned __int64 surfType : 4;
  unsigned __int64 primarySortKey : 6;
  unsigned __int64 unused : 23;
};

/* 2962 */
union GfxDrawGroupSortKey
{
  $D60363E57F8D0043080919C9ACA869F2 fields;
  unsigned __int64 packed;
};

/* 2963 */
struct GfxSpliceSurfs
{
  unsigned int iteratorBegin;
  unsigned int iteratorCount;
  unsigned int spliceCount;
  GfxDrawListIter drawListIter[5];
  GfxViewport scissorViewport[5];
  int isSceneScissorViewport[5];
  GfxDrawListInfo *dynLightDrawListInfo[5];
  GfxSurfsIterator iteratorPool[45];
};

/* 2964 */
struct GfxSurfsIterGroup
{
  unsigned int iteratorBegin;
  unsigned int iteratorCount;
  GfxDrawListIter drawListIter;
  GfxSurfsIterator iteratorPool[9];
};

/* 2965 */
struct GfxCmdClearScreen
{
  GfxCmdHeader header;
  char whichToClear;
  char stencil;
  float depth;
  float color[4];
};

/* 2966 */
struct GfxCmdSaveScreen
{
  GfxCmdHeader header;
  int screenTimerId;
};

/* 2967 */
struct GfxCmdSaveScreenSection
{
  GfxCmdHeader header;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
};

/* 2968 */
struct GfxCmdBlendSavedScreenBlurred
{
  GfxCmdHeader header;
  int fadeMsec;
  float s0;
  float t0;
  float ds;
  float dt;
  int screenTimerId;
};

/* 2969 */
struct GfxCmdBlendSavedScreenFlashed
{
  GfxCmdHeader header;
  bool replace;
  float intensityWhiteout;
  float intensityScreengrab;
  float s0;
  float t0;
  float ds;
  float dt;
};

/* 2970 */
struct GfxCmdDrawPoints
{
  GfxCmdHeader header;
  __int16 pointCount;
  char size;
  char dimensions;
  GfxPointVertex verts[1];
};

/* 2971 */
struct GfxCmdDrawLines
{
  GfxCmdHeader header;
  __int16 lineCount;
  char width;
  char dimensions;
  GfxPointVertex verts[2];
};

/* 2972 */
struct __declspec(align(8)) GfxCmdDrawTriangles
{
  GfxCmdHeader header;
  Material *material;
  MaterialTechniqueType techType;
  char dimensions;
  __int16 indexCount;
  __int16 vertexCount;
};

/* 2973 */
struct GfxCmdSetCodeConstant
{
  GfxCmdHeader header;
  unsigned int constant;
  float value[4];
};

/* 2974 */
struct GfxCmdSetMaterialColor
{
  GfxCmdHeader header;
  float color[4];
};

/* 2975 */
struct $49DF5C3157363D52426CA962B9E059C2
{
  float specColor[3];
  float specExponent;
};

/* 2976 */
union $212E6E2538A69A8A6BEC9320AACC2A99
{
  $49DF5C3157363D52426CA962B9E059C2 __s0;
  float specColor_specExponent[4];
};

/* 2977 */
struct GfxLit2DShaderState::ModeState
{
  float ambientColor[3];
  float diffuseColor[3];
  $212E6E2538A69A8A6BEC9320AACC2A99 ___u2;
  float additiveColor[3];
};

/* 2978 */
struct GfxLit2DShaderState
{
  float fadeSharpness;
  float lightDirX2[3];
  float specHalfAngleDirX2[3];
  GfxLit2DShaderState::ModeState modes[2];
};

/* 2979 */
struct GfxCmdSetLightProperties2d
{
  GfxCmdHeader header;
  GfxLit2DShaderState shaderState;
};

/* 2980 */
struct GfxCmdSetViewport
{
  GfxCmdHeader header;
  GfxViewport viewport;
};

/* 2981 */
struct GfxCmdSetScissor
{
  GfxCmdHeader header;
  GfxViewport viewport;
};

/* 2982 */
struct __declspec(align(2)) GfxCmdDrawText2D
{
  GfxCmdHeader header;
  float x;
  float y;
  float rotation;
  Font_s *font;
  float xScale;
  float yScale;
  GfxColor color;
  int maxChars;
  int renderFlags;
  int cursorPos;
  char cursorLetter;
  GfxColor glowForceColor;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  Material *fxMaterial;
  Material *fxMaterialGlow;
  float padding;
  char text[3];
};

/* 2983 */
struct GfxCmdDrawText3D
{
  GfxCmdHeader header;
  float org[3];
  Font_s *font;
  float xPixelStep[3];
  float yPixelStep[3];
  GfxColor color;
  char text[4];
};

/* 2984 */
struct GfxCmdProjectionSet
{
  GfxCmdHeader header;
  GfxProjectionTypes projection;
};

/* 2985 */
struct __cppobj std::_Rand_urng_from_func
{
};

/* 2986 */
struct $6FA1FDFB2B1EE55584AC9F3E4D613566
{
  char write;
  char read;
  char request;
  char pad;
};

/* 2987 */
struct $C6704CF0268C62E3AD79643C2A271A7D
{
  unsigned __int16 writeRead;
  unsigned __int16 requestPad;
};

/* 2988 */
union FxAccessLock
{
  $6FA1FDFB2B1EE55584AC9F3E4D613566 m;
  $C6704CF0268C62E3AD79643C2A271A7D u;
  volatile int data;
  char pad0[128];
};

/* 2989 */
struct FxSpriteInfo
{
  r_double_index_t *indices;
  Material *material;
  const char *name;
  unsigned int indexCount;
  unsigned int vertIndexBase;
};

/* 2990 */
struct __declspec(align(4)) FxTrail
{
  unsigned int nextTrailHandle;
  unsigned int firstTrailElemHandle;
  unsigned int lastTrailElemHandle;
  char defIndex;
  char sequence;
  float distanceAccumulator;
  char pad[2];
};

/* 2991 */
union $050B91100251974B5761A644CD816058
{
  int nextFree;
  FxTrail item;
};

/* 2992 */
struct FxPool<FxTrail>
{
  $050B91100251974B5761A644CD816058 ___u0;
};

/* 2993 */
struct FxBolt
{
  unsigned __int32 dobjHandle : 12;
  unsigned __int32 temporalBits : 1;
  unsigned __int32 boneIndex : 11;
  unsigned __int32 unused : 7;
  FxSpatialFrame offset;
};

/* 2994 */
union $C83C7707AF1213EB34210861B58E6915
{
  int nextFree;
  FxBolt item;
};

/* 2995 */
struct FxPool<FxBolt>
{
  $C83C7707AF1213EB34210861B58E6915 ___u0;
};

/* 2996 */
struct FxSparkFountainHeader
{
  unsigned int nextFountainInEffect;
  __int16 defIndex;
  char isValid;
  char clusterCount;
  char computedClusterCount;
  char computedClusterPortion;
  char pad[2];
};

/* 2997 */
struct FxSparkFountain
{
  FxSparkFountainHeader header;
  unsigned int clusters[16];
};

/* 2998 */
union $5F7053F47422FED074FF84F764C6BC21
{
  int nextFree;
  FxSparkFountain item;
};

/* 2999 */
struct FxPool<FxSparkFountain>
{
  $5F7053F47422FED074FF84F764C6BC21 ___u0;
};

/* 3000 */
struct FxSpark
{
  float time[4];
  float pos[4][3];
  float vel[4][3];
};

/* 3001 */
struct FxSparkFountainCluster
{
  FxSpark sparks[64];
};

/* 3002 */
union $33EC50B0937A7D2A8D4141059E974F8E
{
  int nextFree;
  FxSparkFountainCluster item;
};

/* 3003 */
struct FxPool<FxSparkFountainCluster>
{
  $33EC50B0937A7D2A8D4141059E974F8E ___u0;
};

/* 3004 */
struct FxSparkCloud
{
  unsigned int frameBegin;
  unsigned int frameEnd;
  float lastTime;
  unsigned int pad[1];
  GfxParticleCloud frames[32];
};

/* 3005 */
union $09C860A355A25621D258055135696D1D
{
  int nextFree;
  FxSparkCloud item;
};

/* 3006 */
struct FxPool<FxSparkCloud>
{
  $09C860A355A25621D258055135696D1D ___u0;
};

/* 3007 */
struct FxTrailElem
{
  float origin[3];
  float spawnDist;
  int msecBegin;
  unsigned int nextTrailElemHandle;
  __int16 baseVelZ;
  char basis[2][3];
  char sequence;
  float lastFrameColor[3];
  int timeLightingLastCalculated;
};

/* 3008 */
union $F1CB96CDEE40F6ADCE69B2B289F60406
{
  int nextFree;
  FxTrailElem item;
};

/* 3009 */
struct FxPool<FxTrailElem>
{
  $F1CB96CDEE40F6ADCE69B2B289F60406 ___u0;
};

/* 3010 */
union __unaligned __declspec(align(4)) $D6F7674679A25CF275947FE3AD875D0D
{
  __int64 physObjId;
  float origin[3];
};

/* 3011 */
struct FxElem
{
  __int8 defIndex : 6;
  __int8 defer : 1;
  __int8 valid : 1;
  char sequence;
  char atRestFraction;
  char emitResidual;
  int msecBegin;
  float baseVel[3];
  __declspec(align(8)) $D6F7674679A25CF275947FE3AD875D0D ___u8;
  __declspec(align(8)) float lastFrameColor[4][3];
  int timeLightingLastCalculated;
};

/* 3012 */
union $6536E5100FA33CC8F01DDA5285ED2712
{
  int nextFree;
  FxElem item;
};

/* 3013 */
struct FxPool<FxElem>
{
  $6536E5100FA33CC8F01DDA5285ED2712 ___u0;
};

/* 3014 */
union FxElemChild
{
  unsigned __int16 lightingHandle;
  unsigned int sparkCloudHandle;
  unsigned int sparkFountainHandle;
  unsigned int childEffectHandle;
  unsigned int spotlightEffectHandle;
};

/* 3015 */
struct FxVisBlocker
{
  float origin[3];
  unsigned __int16 radius;
  unsigned __int16 visibility;
};

/* 3016 */
struct FxVisState
{
  FxVisBlocker blocker[256];
  volatile int blockerCount;
  unsigned int pad[3];
};

/* 3017 */
struct __declspec(align(4)) SpawnEffectInfo
{
  FxEffectDef *remoteDef;
  FxSpatialFrame frame;
  FxSpatialFrame boltOffset;
  int msecBegin;
  int dobjHandle;
  int boneIndex;
  int runnerSortOrder;
  unsigned int owner;
  unsigned int markEntnum;
  int markViewmodelClientIndex;
  unsigned __int16 effectFlags;
};

/* 3018 */
struct __declspec(align(4)) FXSpawnCmd
{
  SpawnEffectInfo info;
  int removeRef;
  unsigned int elemHandle;
  unsigned int elemParent;
  unsigned int elemClass;
  int entnum;
  int timeValue;
  int nextCmd;
  char pad[2];
};

/* 3019 */
union $E8D810FB520D0FBFD9DE1A36F7BC6485
{
  int elemDefIndex;
  int physObjId;
};

/* 3020 */
struct ElemDeferDelete
{
  unsigned int effectHandle;
  unsigned int elemHandle;
  $E8D810FB520D0FBFD9DE1A36F7BC6485 ___u2;
};

/* 3021 */
struct ElemDeferSpawn
{
  unsigned int effectHandle;
  unsigned int elemHandle;
  int elemDefIndex;
  int randomSeed;
};

/* 3022 */
struct ElemUpdate
{
  unsigned int effectHandle;
  unsigned int elemHandle;
};

/* 3023 */
struct StopBoltedEffectsRequest
{
  FxEffectDef *defHandle;
  unsigned int dobjHandle;
  unsigned __int32 boneIndex : 31;
  unsigned __int32 killFlag : 1;
};

/* 3024 */
struct __declspec(align(8)) KillEffectDefRequest
{
  FxEffectDef *defHandle;
  int time;
};

/* 3025 */
struct RetriggerEffectRequest
{
  unsigned int effectHandle;
  int msecBegin;
};

/* 3026 */
struct FxCamera
{
  float origin[3];
  volatile int isValid;
  float frustum[6][4];
  float axis[3][3];
  char frustumPlaneCount;
  bool thermal;
  float viewOffset[3];
  float tanHalfFov[2];
  float znear;
};

/* 3027 */
struct FxSystemCommand
{
  FXSpawnCmd spawnCmdList[1024];
  volatile int spawnCmdRead;
  char padding3[124];
  volatile int spawnCmdWrite;
  char padding4[124];
  FxAccessLock accessLock;
  unsigned int updatePass0[1024];
  unsigned int updatePass4[1024];
  ElemDeferDelete deleteElementRequest[32];
  ElemDeferSpawn spawnElementRequest[32];
  ElemUpdate updateElement[32];
  StopBoltedEffectsRequest stopBoltedEffectsRequest[2][256];
  FxEffect *throughWithEffectRequest[2][1024];
  KillEffectDefRequest killEffectDefRequest[2][64];
  RetriggerEffectRequest retriggerEffectRequest[2][1024];
  int requestIndex;
  FxCamera camera;
  int numUpdatePass0;
  int numUpdatePass4;
  int numStopBoltedEffectsRequest;
  int numThroughWithEffectIndex;
  int numKillEffectDefIndex;
  int numRetriggerEffectRequest;
  volatile int pass5iterator;
  volatile int pass5count;
  int pad0[11];
};

/* 3028 */
struct __declspec(align(8)) FxSystem
{
  FxSpriteInfo sprite;
  FxEffect *effects;
  FxPool<FxTrail> *trails;
  FxPool<FxBolt> *bolts;
  FxPool<FxSparkFountain> *sparkFountains;
  FxPool<FxSparkFountainCluster> *sparkFountainClusters;
  int firstFreeTrail;
  int firstFreeBolt;
  int firstFreeSparkFountain;
  int firstFreeSparkFountainCluster;
  FxPool<FxSparkCloud> *sparkClouds;
  FxPool<FxTrailElem> *trailElems;
  FxPool<FxElem> *elems;
  FxElemChild *elemChild;
  unsigned int *nextElemHandleInEffect;
  unsigned int *prevElemHandleInEffect;
  int firstFreeElem;
  int firstFreeSparkCloud;
  int firstFreeTrailElem;
  volatile int gfxCloudCount;
  FxVisState *visState;
  FxVisState *visStateBufferRead;
  FxVisState *visStateBufferWrite;
  int firstActiveEffect;
  int firstNewEffect;
  int firstFreeEffect;
  unsigned int *allEffectHandles;
  int activeSpotLightEffectCount;
  int activeSpotLightElemCount;
  unsigned int activeSpotLightEffectHandle;
  unsigned int activeSpotLightElemHandle;
  __int16 activeSpotLightBoltDobj;
  __int16 pad2;
  int msecNow;
  int msecDelta;
  int msecDraw;
  int frameCount;
  LocalClientNum_t localClientNum;
  FxEffect **restartEffectsList;
  unsigned int restartCount;
  FXSpawnCmd *spawnCmdList;
  volatile int *spawnCmdRead;
  volatile int *spawnCmdWrite;
  FxAccessLock *lock;
  unsigned int systemFlags;
  FxSystemCommand *command;
  ElemDeferDelete *deleteElementRequest;
  int numDeleteElementRequest;
  ElemDeferSpawn *spawnElementRequest;
  int numSpawnElementRequest;
  ElemUpdate *updateElement;
  int numUpdateElement;
  FxCamera camera;
  FxCamera cameraPrevArray[1];
  float unlitSurfaceHDRScalar;
  float litSurfaceHDRScalar;
  int pad1[2];
};

/* 3029 */
struct __declspec(align(4)) FxCmd
{
  FxSystem *system;
  LocalClientNum_t localClientNum;
  int cgameClientNum;
  void *lock;
  int isLocked;
  char lockRequest;
};

/* 3030 */
struct orientation_t
{
  float origin[3];
  float axis[3][3];
};

/* 3031 */
struct __declspec(align(4)) FxUpdateElem
{
  unsigned int effectHandle;
  FxEffect *effect;
  int elemIndex;
  int atRestFraction;
  orientation_t orient;
  int randomSeed;
  int sequence;
  float msecLifeSpan;
  int msecElemBegin;
  int msecElemEnd;
  int msecUpdateBegin;
  int msecUpdateEnd;
  float msecElapsed;
  float invMsecLifeSpan;
  float *elemOrigin;
  float *elemBaseVel;
  float posWorld[3];
  bool onGround;
  bool hasNonBoltedEmitter;
};

/* 3032 */
struct GfxSkinnedXModelSurfs
{
  void *firstSurf;
};

/* 3033 */
struct GfxSceneEntityCull
{
  volatile unsigned int state;
  Bounds bounds;
  GfxSkinnedXModelSurfs skinnedSurfs;
};

/* 3034 */
union GfxSceneEntityInfo
{
  cpose_t *pose;
  unsigned __int16 *cachedLightingHandle;
};

/* 3035 */
struct __declspec(align(8)) GfxSceneEntity
{
  float lightingOrigin[3];
  GfxPlacement placement;
  GfxPlacement prevPlacement;
  GfxSceneEntityCull cull;
  char lods[32];
  unsigned __int32 gfxEntIndex : 7;
  unsigned __int32 entnum : 12;
  unsigned __int32 renderFlags : 14;
  DObj *obj;
  GfxSceneEntityInfo info;
  char reflectionProbeIndex;
  unsigned __int16 primaryLightEnvIndex;
};

/* 3036 */
struct __cppobj FxPass0Cmd : FxCmd
{
  unsigned int *updatePass;
  int skipBolt;
  int isDeferred;
};

/* 3037 */
struct __cppobj FxPass2Cmd : FxCmd
{
  unsigned int *boltPass;
  FxPass0Cmd updateCmd;
};

/* 3038 */
struct __cppobj FxPass4Cmd : FxCmd
{
  unsigned int *createPass;
  StopBoltedEffectsRequest *stopBoltedEffectsRequest;
  FxEffect **throughWithEffectRequest;
  KillEffectDefRequest *killEffectDefRequest;
  RetriggerEffectRequest *retriggerEffectRequest;
  volatile int *effectIter;
  int numStopBoltedEffectsRequest;
  int numThroughWithEffectIndex;
  int numKillEffectDefIndex;
  int numRetriggerEffectRequest;
};

/* 3039 */
struct __cppobj FxPass5Cmd : FxCmd
{
  volatile int *effectIter;
  volatile int *count;
};

/* 3040 */
struct CG_GlassPiece
{
  char state;
};

/* 3041 */
struct __declspec(align(4)) worldContents_s
{
  int contentsEntities;
  int linkcontentsEntities;
  unsigned __int16 entities;
};

/* 3042 */
union $222A11CE4B6EBFDB75E74DF742F9BFF1
{
  unsigned __int16 parent;
  unsigned __int16 nextFree;
};

/* 3043 */
struct worldTree_s
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 3044 */
struct worldSector_s
{
  worldContents_s contents;
  worldTree_s tree;
};

/* 3045 */
struct DynEntityCollTree
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 3046 */
struct __declspec(align(4)) DynEntityCollSector
{
  DynEntityCollTree tree;
  int contents;
  unsigned __int16 entListHead;
};

/* 3047 */
struct DynEntityCollWorld
{
  Bounds bounds;
  unsigned __int16 freeHead;
  DynEntityCollSector *sectors;
};

/* 3048 */
struct TraceExtents
{
  float midPoint[3];
  float midPointPad;
  float halfDelta[3];
  float halfDeltaPad;
  float halfDeltaAbs[3];
  float halfDeltaAbsPad;
  float invDeltaAbs[3];
  float invDeltaAbsPad;
  float start[3];
  float startPad;
  float end[3];
  float endPad;
};

/* 3049 */
struct moveclip_t
{
  Bounds bounds;
  float outerSize[3];
  __declspec(align(16)) TraceExtents extents;
  int passEntityNum;
  int passOwnerNum;
  int contentmask;
};

/* 3050 */
const struct IgnoreEntParams
{
  int baseEntity;
  int parentEntity;
  bool ignoreSelf;
  bool ignoreParent;
  bool ignoreSiblings;
  bool ignoreChildren;
};

/* 3051 */
struct pointtrace_t
{
  TraceExtents extents;
  IgnoreEntParams *ignoreEntParams;
  int contentmask;
  int bLocational;
  int bCalcDObjPose;
  char *priorityMap;
};

/* 3052 */
union $FDCBDAF24AD1364B2131DD3BD346BCB6
{
  moveclip_t moveClip;
  pointtrace_t pointTrace;
};

/* 3053 */
struct __declspec(align(16)) TraceWorkerCmd
{
  workerTrace_t *results;
  unsigned int tracemask;
  float start[3];
  float end[3];
  Bounds bounds;
  int brushmask;
  float viewOffset[3];
  LocalClientNum_t localClientNum;
  int skelTimeStamp;
  clipMap_t *cm;
  CG_GlassPiece *glassPieces;
  void *cgEntCollWorld;
  void *cgEntCollNodes;
  worldSector_s *worldSectors;
  svEntity_s *svEntities;
  gentity_s *gentities;
  __int16 *clientObjMap;
  __int16 *serverObjMap;
  void *objBuf;
  DynEntityCollWorld *collWorlds;
  $FDCBDAF24AD1364B2131DD3BD346BCB6 ___u20;
  IgnoreEntParams ignoreEntParams;
  int entIndex;
  scr_string_t tagName;
};

/* 3054 */
struct PhysicsCmd
{
  unsigned int type;
  PhysWorld worldIndex;
  int timeNow;
  unsigned int msecStep;
};

/* 3055 */
struct FxBeamTracerData
{
  float wiggleDist;
};

/* 3056 */
struct FxBeamLaserData
{
  float endRadius;
};

/* 3057 */
union $E50D9B41B0CE2F009B2BEC249EF690A8
{
  FxBeamTracerData tracer;
  FxBeamLaserData laser;
};

/* 3058 */
struct FxBeam
{
  char type;
  float begin[3];
  float end[3];
  GfxColorFloat colors[5];
  float radius;
  Material *material;
  char segmentCount;
  $E50D9B41B0CE2F009B2BEC249EF690A8 ___u7;
};

/* 3059 */
const struct FxBeamInfo
{
  FxBeam beams[48];
  int beamCount;
  int playerLaserExists;
};

/* 3060 */
struct FxPostLight
{
  float begin[3];
  float end[3];
  float radius;
  GfxColor color;
  Material *material;
};

/* 3061 */
const struct __declspec(align(8)) FxPostLightInfo
{
  FxPostLight postLights[96];
  int postLightCount;
};

/* 3062 */
struct FxSprite
{
  Material *material;
  float rgbaColor[4];
  float pos[3];
  float radius;
  float minScreenRadius;
  int flags;
};

/* 3063 */
const struct FxSpriteSet
{
  int spriteCount;
  int pad[3];
  FxSprite sprites[44];
};

/* 3064 */
struct __declspec(align(8)) FxTriGroup
{
  GfxMarkContext context;
  unsigned __int16 indices[2][3];
  char triCount;
  unsigned int next;
};

/* 3065 */
union FxTriGroupPool
{
  FxTriGroup triGroup;
  FxTriGroupPool *nextFreeTriGroup;
};

/* 3066 */
struct FxMarkPoint
{
  float xyz[3];
  float lmapCoord[2];
  float normal[3];
  float displacementTexelDensity[8];
  float displacementCoord[8][2];
  char displacementWeights[8];
};

/* 3067 */
struct FxPointGroup
{
  FxMarkPoint points[2];
  unsigned int next;
};

/* 3068 */
union __declspec(align(8)) FxPointGroupPool
{
  FxPointGroup pointGroup;
  FxPointGroupPool *nextFreePointGroup;
};

/* 3069 */
struct __declspec(align(8)) FxMark
{
  unsigned int prevMark;
  unsigned int nextMark;
  int timeDrawn;
  int timeAlloced;
  float origin[3];
  float radius;
  float texCoordAxis[3];
  char nativeColor[4];
  Material *material;
  GfxMarkContext context;
  char fadeInfo;
  unsigned __int16 triCount;
  unsigned __int16 pointCount;
  unsigned int tris;
  unsigned int points;
  char padding[2];
};

/* 3070 */
struct FxMarksSystem
{
  int time;
  unsigned int firstFreeMarkHandle;
  unsigned int firstActiveWorldMarkHandle;
  unsigned int firstGlassMarkHandle;
  unsigned int entFirstMarkHandles[2048];
  unsigned int firstViewmodelMarkHandle[4];
  FxTriGroupPool *firstFreeTriGroup;
  FxPointGroupPool *firstFreePointGroup;
  FxMark *marks;
  FxTriGroupPool *triGroups;
  FxPointGroupPool *pointGroups;
  unsigned int allocedMarkCount;
  unsigned int freedMarkCount;
  char viewmodelMarksCount[4];
  unsigned __int16 carryIndex;
  bool noMarks;
  bool hasCarryIndex;
};

/* 3071 */
struct __declspec(align(8)) FxGenerateVertsCmd
{
  FxSystem *system;
  FxBeamInfo *beamInfo;
  FxPostLightInfo *postLightInfo;
  FxSpriteSet *spriteSet;
  FxMarksSystem *marksSystem;
  int localClientNum;
  float vieworg[3];
  float viewaxis[3][3];
};

/* 3072 */
struct FxGlassPieceVisRef
{
  unsigned __int16 pieceIndex;
  char drawFlags;
  char pad;
  float distSq;
};

/* 3073 */
struct __declspec(align(2)) GfxLightingInfo
{
  unsigned __int16 primaryLightEnvIndex;
  char reflectionProbeIndex;
};

/* 3074 */
struct $5517CE94E6CB880852205EC3F34753D3
{
  unsigned int visCount;
  int sorted;
};

/* 3075 */
union $2957846C1D70C571931B6388C479B014
{
  $5517CE94E6CB880852205EC3F34753D3 __s0;
  unsigned __int64 packedSortedCount;
};

/* 3076 */
struct FxGlassVisInfo
{
  FxGlassPieceVisRef visList[2048];
  GfxLightingInfo lightingInfo[1536];
  $2957846C1D70C571931B6388C479B014 ___u2;
  unsigned int pad[2];
};

/* 3077 */
struct FxGenerateGlassVertsCmd
{
  float viewOrg[3];
  bool thermalView;
  GfxLodParms lodParms;
  FxGlassSystem *glassSystem;
  float *glassDist;
  volatile int *glassDistUpdatedPtr;
  float shatteredScale;
  void *modelLightEA;
  FxGlassVisInfo *visInfo;
};

/* 3078 */
struct R_Macroclut_GenerateCmd
{
  char cacheIndex;
};

/* 3079 */
struct __declspec(align(8)) SceneEntCmd
{
  GfxViewInfo *viewInfo;
  int sortSurfs;
  int sceneDObjBegin;
  int sceneDObjEnd;
  int sceneModelBegin;
  int sceneModelEnd;
  int sceneBrushBegin;
  int sceneBrushEnd;
  int sceneDynModelBegin;
  int sceneDynModelEnd;
  int sceneDynBrushBegin;
  int sceneDynBrushEnd;
};

/* 3080 */
struct GfxSpotShadowEntCmd
{
  GfxSceneEntity *sceneEnt;
  GfxLight *light;
};

/* 3081 */
struct __declspec(align(8)) SkinXModelCmd
{
  void *modelSurfs;
  DObjAnimMat *mat;
  int surfacePartBits[6];
  unsigned __int16 surfCount;
};

/* 3082 */
struct __declspec(align(8)) GfxSceneMarkDrawData
{
  const unsigned int *smodelVisLods;
  const char *dObjVisData;
  const char *modelVisData;
  const char *brushVisData;
  LocalClientNum_t dpvsLocalClientNum;
  int dObjViewmodelIndex;
  int smodelCount;
  int dObjCount;
  int brushCount;
  int modelCount;
  unsigned __int16 entnumOrdinaryEnd;
};

/* 3083 */
struct __declspec(align(2)) FxGenerateModelMarksCmd
{
  GfxSceneMarkDrawData sceneDrawData;
  FxSystem *system;
  FxMarksSystem *marksSystem;
  LocalClientNum_t localClientNum;
  bool marksEnabled;
  bool marksSmodels;
  bool marksEnts;
};

/* 3084 */
struct FxGlassPieceLightingCmd
{
  float viewOrg[3];
  FxGlassVisInfo *visInfo;
};

/* 3085 */
const struct GfxSceneParms
{
  LocalClientNum_t localClientNum;
  float blurRadius;
  bool uiBlur;
  bool playerTeleported;
  bool viewModelHasDistortion;
  char forceSunShadowsGenerate;
  bool daltonize;
  GfxDepthOfField dof;
  GfxFilm film;
  GfxMaterialBloom materialBloom;
  GfxMaterialBloomHQ materialBloomHQ;
  GfxLightScale charPrimaryLightScale;
  GfxLightScale viewModelPrimaryLightScale;
  GfxVolumeLightScatter volumeLightScatter;
  float charAmbience[3];
  float viewModelAmbience[3];
  GfxColorGrading colorGrading;
  SSAOControls ssao;
  RimLightingControls rimLighting;
  float ssrFade;
  GfxViewport ssrSourceSceneViewport;
  float hdrSkyIntensity;
  float hdrSkyColorTint[3];
  unsigned int drawType;
  GfxStageInfo stageInfo;
  GfxCompositeFx waterSheetingFx;
  GfxViewport sceneViewport;
  GfxViewport displayViewport;
  GfxViewport scissorViewport;
  GfxLight primaryLights[1];
  unsigned int primaryLightsAnimated[1];
  unsigned int numPrimaryLights;
};

/* 3086 */
struct __declspec(align(4)) DrawSurfsCmd
{
  unsigned int type;
  LocalClientNum_t localClientNum;
  GfxSceneParms *sceneParms;
  GfxViewParms *viewParmsDpvs;
  GfxViewParms *viewParmsDraw;
  GfxViewInfo *viewInfo;
  ShadowType dynamicShadowType;
  bool doMotionTrackerOnWeapon;
};

/* 3087 */
struct WorkerCmds
{
  volatile int startPos;
  volatile int endPos;
  volatile int syncedEndPos;
  volatile int inSize;
  volatile int outSize;
  unsigned int dataSize;
  char *buf;
  int bufSize;
  int bufCount;
  unsigned int pad[22];
};

/* 3088 */
struct __declspec(align(8)) DrawWorkerCmd
{
  GfxBackEndData *data;
  GfxViewInfo *viewInfo;
  unsigned int drawListType;
};

/* 3089 */
struct __declspec(align(8)) DpvsStaticCellCmd
{
  DpvsPlane *planes;
  GfxAabbTree *tree;
  char planeCount;
  char frustumPlaneCount;
  unsigned __int16 sceneViewType;
};

/* 3090 */
struct DpvsDynamicCellCmd
{
  DpvsPlane *planes;
  unsigned int cellIndex;
  char planeCount;
  char frustumPlaneCount;
  unsigned __int16 sceneViewType;
};

/* 3091 */
struct DpvsGlassCellCmd
{
  DpvsPlane *planes;
  unsigned __int16 planeCount;
  unsigned __int16 cellIndex;
  float viewOrg[3];
  FxGlassVisInfo *visInfo;
};

/* 3092 */
struct DpvsEntityCmd
{
  GfxSceneEntity *sceneEnt;
  DpvsPlane *planes;
  unsigned __int16 planeCount;
  unsigned __int16 cellIndex;
  char *entVisData;
};

/* 3093 */
struct WaterGlob
{
  float HX[4096];
  float HY[4096];
  char pixels[4096];
};

/* 3094 */
struct complex_s
{
  float real;
  float imag;
};

/* 3095 */
struct WaterGlobStatic
{
  float sinTable[1024];
  complex_s fftTrigTable[256];
  int fftBitswap[256];
};

/* 3096 */
struct WaterWorkerCmd
{
  water_t *water;
};

/* 3097 */
struct GfxVisibleLight
{
  int drawSurfCount;
  GfxDrawSurf drawSurfs[1024];
};

/* 3098 */
struct GfxSceneModel
{
  XModelDrawInfo info;
  XModel *model;
  DObj *obj;
  GfxScaledPlacement placement;
  GfxScaledPlacement prevPlacement;
  unsigned __int32 gfxEntIndex : 7;
  unsigned __int32 entnum : 12;
  unsigned __int32 renderFlags : 14;
  float radius;
  unsigned __int16 *cachedLightingHandle;
  float lightingOrigin[3];
  char reflectionProbeIndex;
  char lod;
  unsigned __int16 primaryLightEnvIndex;
};

/* 3099 */
struct __declspec(align(4)) GfxSceneBrush
{
  BModelDrawInfo info;
  unsigned __int16 entnum;
  GfxBrushModel *bmodel;
  GfxPlacement placement;
  GfxPlacement prevPlacement;
  unsigned int renderFlags;
  char reflectionProbeIndex;
};

/* 3100 */
struct $B90059D1C8A198D71AC7FE1F0877B470
{
  bool rendered;
  char reflectionProbeIndex;
  unsigned __int16 lightingHandle;
};

/* 3101 */
union GfxSceneGlass
{
  $B90059D1C8A198D71AC7FE1F0877B470 __s0;
  unsigned int packed;
};

/* 3102 */
union GfxEntCellRefInfo
{
  float radius;
  GfxBrushModel *bmodel;
};

/* 3103 */
struct GfxSceneDpvs
{
  LocalClientNum_t localClientNum;
  char *entVisData[7];
  unsigned __int16 *sceneXModelIndex;
  unsigned __int16 *sceneDObjIndex;
  GfxEntCellRefInfo *entInfo[1];
};

/* 3104 */
struct __declspec(align(64)) GfxScene
{
  GfxCodeSurf codeEmissiveSurfs[32];
  GfxCodeSurf codeDecalSurfs[4];
  GfxCodeSurf codeTransSurfs[32];
  GfxMarkSurf markSurfs[16];
  GfxMarkSurf markTransSurfs[16];
  GfxGlassSurf glassSurfs[16];
  GfxGlassSurf glassOpaqueSurfs[16];
  GfxCloudSurf cloudSurfs[32];
  GfxDrawSurf drawSurfsDepthHack[8];
  GfxDrawSurf drawSurfsLitOpaque[8];
  GfxDrawSurf drawSurfsLitDecal[8];
  GfxDrawSurf drawSurfsLitTrans[8];
  GfxDrawSurf drawSurfsEmissive[8];
  GfxDrawSurf drawSurfsSunShadow0[8];
  GfxDrawSurf drawSurfsSunShadow1[8];
  GfxDrawSurf drawSurfsSpotShadow0[8];
  GfxDrawSurf drawSurfsSpotShadow1[8];
  GfxDrawSurf drawSurfsSpotShadow2[8];
  GfxDrawSurf drawSurfsSpotShadow3[8];
  GfxDrawSurf drawSurfsMotionblur[8];
  unsigned int sceneLightIsUsedByDrawSurfs[32];
  unsigned int sceneLightIsUsedBySModels[32];
  unsigned int sceneLightIsUsedByDLights[32];
  unsigned int sceneLightIsUsedByBModels[32];
  unsigned int cachedSceneLightIsUsed[6][32];
  unsigned int cachedSceneLightIsUsedByModelsOnly[6][32];
  GfxFlareSurf flareSurfs[128];
  GfxSparkSurf sparkSurfs[64];
  unsigned int drawSurfLimit[12];
  volatile int drawSurfCount[12];
  GfxDrawSurf *drawSurfs[12];
  volatile int codeSurfUser[3];
  volatile int markMeshGuard;
  unsigned int codeEmissiveSurfCount;
  unsigned int codeDecalSurfCount;
  unsigned int codeTransSurfCount;
  unsigned int markSurfCount;
  unsigned int markTransSurfCount;
  unsigned int glassSurfCount;
  unsigned int glassOpaqueSurfCount;
  unsigned int flareCount;
  volatile int flareSurfLock;
  GfxSceneDef def;
  int addedSpotLightCount;
  int dlightLimit;
  GfxLight addedSpotLight[1];
  int isAddedSpotLightCulled[1];
  float dynamicSpotLightNearPlaneOffset;
  float dynamicSpotLightLength;
  volatile int addedLightCount;
  GfxLight addedLight[32];
  bool isAddedLightCulled[32];
  GfxVisibleLight visLight[4];
  GfxVisibleLight visLightShadow[1];
  unsigned int visibleDynamicLightCountForFx;
  GfxLight *visibleDynamicLightsForFx[4];
  unsigned int *entOverflowedDrawBuf;
  volatile int gfxEntCount;
  GfxEntity gfxEnts[128];
  int sceneDObjCount;
  int sceneDObjCountAtMark;
  GfxSceneEntity sceneDObj[512];
  char sceneDObjVisData[7][512];
  int sceneDObjMarkableViewmodelIndex;
  unsigned int sceneDObjFirstViewmodelIndex;
  unsigned int sceneDObjViewmodelCount;
  volatile int sceneModelCount;
  int sceneModelCountAtMark;
  int sceneDObjModelCount;
  GfxSceneModel sceneModel[1024];
  char sceneModelVisData[7][1024];
  volatile int sceneBrushCount;
  int sceneBrushCountAtMark;
  GfxSceneBrush sceneBrush[512];
  char sceneBrushVisData[3][512];
  GfxSceneGlass sceneGlass[2048];
  unsigned int sceneDynModelCount;
  unsigned int sceneDynBrushCount;
  int gfxEntCountAtMark;
  GfxSceneDpvs dpvs;
  int updateSound;
  float sceneSMLightScoreEyeProjectDist;
  float sceneSMlightScorespotProjectFrac;
};

/* 3105 */
struct GfxSunShadowProjectionSetup
{
  float sunAxis[3][3];
  float nearShadowMinDist;
  float frustumRayDistToEdgeOfNearMap;
  float cameraShadowPos[3];
  float shadowOrg[2];
  float shadowOrgPixelCenter[2];
  float snappedShadowOrg[2][2];
  float sampleSize[2];
};

/* 3106 */
struct GfxSunShadowMapMetrics
{
  unsigned int pixelsPerTile;
  unsigned int tilesPerTexture;
  unsigned int usefulSize;
  unsigned int minCoord;
  float nearClip;
  float farClip;
};

/* 3107 */
struct GfxSunShadowFrustumRays
{
  float worldRays[4][3];
  float shadowRays[4][2];
  float sinInteriorAngle[4];
  float sinMin;
  float sinMax;
  float mins[2];
  float maxs[2];
  unsigned int boundingArcRay[2];
  unsigned int interiorArcRay[2];
};

/* 3108 */
struct GfxSunShadowClip
{
  unsigned int planeCount[2];
  unsigned int frustumPlaneCount[2];
  DpvsPlane planes[2][10];
};

/* 3109 */
struct ShadowRayDistRange
{
  float enter;
  float leave;
};

/* 3110 */
struct MaterialStreamDestInfo
{
  char Usage;
  char UsageIndex;
};

/* 3111 */
struct MaterialStreamSourceInfo
{
  char Stream;
  char Offset;
  DXGI_FORMAT Type;
};

/* 3112 */
struct MaterialVertexFormat
{
  char stride[3];
  MaterialStreamSourceInfo sources[22];
};

/* 3113 */
struct ReactiveTurbulenceCapsuleEffector
{
  float pos[3];
  float pad0;
  float dir[3];
  float radius;
  float velDir[3];
  float velMag;
};

/* 3114 */
struct GfxCachedSpotShadow
{
  unsigned int cachedSpotShadowIndex;
  unsigned __int16 sceneLightIndex;
  GfxRenderTargetId renderTargetId;
  int dynamic;
  GfxCachedSpotShadow *prev;
  GfxCachedSpotShadow *next;
  char cachedSmodelLOD[4096];
};

/* 3115 */
struct GfxPosTexVertex
{
  float xyz[3];
  float texCoord[2];
};

/* 3116 */
struct __cppobj GfxSortSparkSurfsInterface
{
};

/* 3117 */
struct $2D0986E098253A34E95013388C2C22ED
{
  MaterialArgumentCodeConst codeConst;
  unsigned __int32 row : 2;
  unsigned __int32 version : 30;
};

/* 3118 */
union GfxShaderConstantState
{
  $2D0986E098253A34E95013388C2C22ED fields;
  unsigned __int64 packed;
};

/* 3119 */
struct GfxConfiguration
{
  bool inited;
  unsigned int maxClientViews;
  unsigned int maxClientRenderViews;
  unsigned int entCount;
  unsigned int entnumNone;
  unsigned int entnumOrdinaryEnd;
  int threadContextCount;
  int critSectCount;
  const char *codeFastFileName;
  const char *uiFastFileName;
  const char *nvidiaFastFileName;
  const char *commonTechsetFastFileName;
  const char *commonFastFileName;
  const char *commonCoreTechsetFastFileName;
  const char *commonCoreFastFileName;
  const char *commonCoreDlcFastFileName;
  const char *commonAlienTechsetFastFileName;
  const char *commonAlienFastFileName;
  const char *commonAlienDlcFastFileName;
  unsigned int defaultDisplayMode;
  unsigned __int16 defaultDisplayModeFlags;
  int defaultMode;
  unsigned int textureMinVRamTier1;
};

/* 3120 */
struct R_ToneMapStates
{
  float toeStrengthToeNumerator[3];
  float toeStrengthToeDenominator[3];
  float toeAngle[3];
  float linearStrength[3];
  float linearAngle[3];
  float shoulderStrength[3];
  float whitePoint[4];
};

/* 3121 */
struct __declspec(align(8)) LaunchData
{
  int version;
  char startupText[900];
  InviteState inviteState;
  unsigned __int64 invitedXUID;
  bool skipMovies;
  bool fromGameInvite;
  bool aliensMode;
  bool squadVsSquadMode;
};

/* 3122 */
struct GfxBspSurfListOut
{
  unsigned int dataLimit;
  GfxBspSurfList *bspSurfList;
};

/* 3123 */
struct GfxSceneViewParms
{
  float subpixelOffset[2];
};

/* 3124 */
struct GfxShadowedLightEntry
{
  unsigned __int16 sceneLightIndex;
  bool isFadingOut;
  float score;
  float fade;
};

/* 3125 */
struct GfxShadowedLightHistory
{
  unsigned int sceneLightWasUsed[1];
  GfxShadowedLightEntry entries[4];
  unsigned int entryCount;
  unsigned int lastUpdateTime;
};

/* 3126 */
struct GfxCandidateShadowedLight
{
  unsigned int sceneLightIndex;
  float score;
};

/* 3127 */
struct __declspec(align(4)) GfxLightGridMaskTable
{
  int refCount;
  int mask;
  char bitCount;
  char bitIndex[16];
};

/* 3128 */
struct __declspec(align(4)) Masked8BitList
{
  int mask;
  char bitCount;
  char bitIndex[8];
};

/* 3129 */
struct __declspec(align(4)) GfxLightGridBlockCacheEntry
{
  unsigned __int16 coord[3];
  unsigned __int16 voxel[2];
  unsigned int colorIndex[16];
  unsigned __int16 lightIndex[16];
  char occupied;
};

/* 3130 */
struct GfxLightGridBlockCache
{
  volatile int entryStatus[509];
  GfxLightGridBlockCacheEntry table[509];
};

/* 3131 */
struct GfxLightGridSupressionCacheEntry
{
  unsigned __int16 coord[3];
  char suppression;
  char occupied;
};

/* 3132 */
struct GfxLightGridSuppressionCache
{
  volatile int entryStatus[509];
  GfxLightGridSupressionCacheEntry table[509];
};

/* 3133 */
struct __declspec(align(4)) LightGridLeafIndexEncoded
{
  int encodedIndexDefault;
  int encodedIndexMin;
  int encodedIndex[16];
  char encodedIndexBitCount;
};

/* 3134 */
struct LightGridBlockCommand
{
  int command;
  int blockSize;
  int mask;
  int data[16];
};

/* 3135 */
struct LightGridLeafIndexRaw
{
  int indexMin;
  int indexBitCount;
  int indexDefault;
  int indexTable[16];
};

/* 3136 */
struct LightGridLeafRaw
{
  char format;
  LightGridLeafIndexRaw colorIndex;
  LightGridLeafIndexRaw lightIndex;
  unsigned int voxels;
};

/* 3137 */
struct LightGridLeafEncoded
{
  char format;
  LightGridLeafIndexEncoded colorIndex;
  LightGridLeafIndexEncoded lightIndex;
  unsigned int voxels;
};

/* 3138 */
struct LightGridNodeRaw
{
  LightGridNodeIndexRaw colorIndex;
  LightGridNodeIndexRaw lightIndex;
};

/* 3139 */
struct LightGridNodeIndexEncoded
{
  char indexBitCount;
  char indexTableSize;
  char indexTableSizeBitCount;
  int indexMin;
  int encodedIndexDefault;
  int encodedIndexTable[15];
};

/* 3140 */
struct LightGridNodeEncoded
{
  char format;
  int leafSize[8];
  LightGridNodeIndexEncoded colorIndex;
  LightGridNodeIndexEncoded lightIndex;
};

/* 3141 */
struct LightGridLeafCommand
{
  int colorCommandCount;
  int lightCommandCount;
  LightGridBlockCommand colorIndex[8];
  LightGridBlockCommand lightIndex[8];
};

/* 3142 */
struct Com_BitStream
{
  int byteCount;
  int byteIndex;
  int bitCount;
  int bitIndex;
  char *bitStream;
};

/* 3143 */
struct PerfTimerStyle
{
  Font_s *font;
  float fontWidth;
  float fontHeight;
  PerfTimerDisplayMode displayMode;
  PerfTimerDisplayType displayType;
  float (__cdecl *convertTime)(unsigned int);
  unsigned int timerCount;
  unsigned int timerNameCharCount;
  const char **timerNames;
  GfxColor *timerColors;
  float totalBarY;
  float budgetMs;
  float budgetPixels;
  unsigned int bucketCount;
  const char **bucketNames;
};

/* 3144 */
struct DObjSkelDQ
{
  float dq[2][4];
};

/* 3145 */
struct Float4Bounds
{
  __m128 midPoint;
  __m128 halfSize;
};

/* 3146 */
struct SpuLocalStructPtr<cpose_t const ,31>
{
  cpose_t *localPtr;
};

/* 3147 */
struct $C0CA3B974904C861AAB130DFE76B59FA
{
  unsigned __int16 smodelIndex[7168];
  unsigned int usedFrameCount[7168];
  unsigned int entryLimit;
  unsigned int assignedCount;
  unsigned int freeableCount;
  unsigned int frameCount;
  int anyNewLighting;
  unsigned int pad[27];
};

/* 3148 */
struct GfxSmodelLightGlob
{
  unsigned __int16 freeableHandles[7168];
  unsigned int lightingBits[2048];
  $C0CA3B974904C861AAB130DFE76B59FA local;
};

/* 3149 */
struct $D83B18AC5ED51685DB5F92059A920C50
{
  unsigned int baseIndex;
};

/* 3150 */
struct $B24E4EB96785D971908BEAF48920A666
{
  float invImageHeight;
  $D83B18AC5ED51685DB5F92059A920C50 xmodel;
  unsigned int totalEntryLimit;
  unsigned int entryBitsY;
  unsigned int imageHeight;
  unsigned int modFrameCount;
  GfxImage *lightImage;
  GfxImage *updateImages[2];
  int updateRowStart[2];
  int updateRowEnd[2];
  char *updateBuffer;
  int currentImage;
  GfxImage *image;
  unsigned int xmodelEntryLimit;
  GfxLightingInfo *lightingInfo;
  float (*lightingOrigins)[3];
  float (*ambientColor)[4];
  int allocModelFail;
  unsigned int *dynamicAmbientBits;
  unsigned int *pixelFreeBits[4];
  unsigned int *prevPrevPixelFreeBits;
  unsigned int *prevPixelFreeBits;
  unsigned int *currPixelFreeBits;
  unsigned int pixelFreeBitsSize;
  unsigned int pixelFreeBitsWordCount;
  unsigned int pixelFreeRover;
  D3D11_MAPPED_SUBRESOURCE lockedBox;
};

/* 3151 */
struct GfxFindLightForBox
{
  Bounds bounds;
};

/* 3152 */
struct GfxFindLightForSphere
{
  float origin[3];
  float radius;
};

/* 3153 */
struct GfxModelMotionblurRigidSurface
{
  float scalePrevFrame;
  GfxPlacement childPlacementPrevFrame[128];
};

/* 3154 */
struct GfxBoxMeshData
{
  float x;
  float y;
  float z;
  float width;
  float height;
  float depth;
  GfxMeshData meshData;
};

/* 3155 */
union $4410DF0FF4BFB3AFD79BC51BC536EF76
{
  long double d;
  int i;
  char *s;
};

/* 3156 */
struct EvalValue
{
  EvalValueType type;
  $4410DF0FF4BFB3AFD79BC51BC536EF76 u;
};

/* 3157 */
struct __declspec(align(4)) Eval
{
  EvalOperatorType opStack[1024];
  EvalValue valStack[1024];
  int opStackPos;
  int valStackPos;
  int parenCount;
  bool pushedOp;
  char error[256];
};

/* 3158 */
struct __cppobj std::_Iosb<int>
{
};

/* 3159 */
struct __cppobj std::ios_base : std::_Iosb<int>
{
  std::ios_baseVtbl *vfptr;
  unsigned __int64 _Stdstr;
  int _Mystate;
  int _Except;
  int _Fmtfl;
  __int64 _Prec;
  __int64 _Wide;
  std::ios_base::_Iosarray *_Arr;
  std::ios_base::_Fnarray *_Calls;
  std::locale *_Ploc;
};

/* 3160 */
struct std::ios_baseVtbl
{
  void *(__cdecl *__vecDelDtor)(std::ios_base *this, unsigned int);
};

/* 3161 */
struct std::ios_base::_Iosarray
{
  std::ios_base::_Iosarray *_Next;
  int _Index;
  int _Lo;
  void *_Vp;
};

/* 3162 */
struct std::ios_base::_Fnarray
{
  std::ios_base::_Fnarray *_Next;
  int _Index;
  void (__cdecl *_Pfn)(std::ios_base::event, std::ios_base *, int);
};

/* 3163 */
struct __cppobj std::_Locbase<int>
{
};

/* 3164 */
struct std::_Facet_base
{
  std::_Facet_baseVtbl *vfptr;
};

/* 3165 */
struct std::_Facet_baseVtbl
{
  void *(__cdecl *__vecDelDtor)(std::_Facet_base *this, unsigned int);
  void (__cdecl *_Incref)(std::_Facet_base *this);
  std::_Facet_base *(__cdecl *_Decref)(std::_Facet_base *this);
};

/* 3166 */
struct __cppobj __declspec(align(8)) std::locale::facet : std::_Facet_base
{
  unsigned int _Refs;
};

/* 3167 */
struct __declspec(align(8)) std::_Yarn<char>
{
  char *_Myptr;
  char _Nul;
};

/* 3168 */
struct __cppobj std::locale::_Locimp : std::locale::facet
{
  std::locale::facet **_Facetvec;
  unsigned __int64 _Facetcount;
  int _Catmask;
  bool _Xparent;
  std::_Yarn<char> _Name;
};

/* 3169 */
struct __cppobj std::locale : std::_Locbase<int>
{
  std::locale::_Locimp *_Ptr;
};

/* 3170 */
struct std::basic_streambuf<char,std::char_traits<char> >
{
  std::basic_streambuf<char,std::char_traits<char> >Vtbl *vfptr;
  char *_Gfirst;
  char *_Pfirst;
  char **_IGfirst;
  char **_IPfirst;
  char *_Gnext;
  char *_Pnext;
  char **_IGnext;
  char **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 3171 */
struct std::basic_streambuf<char,std::char_traits<char> >Vtbl
{
  void *(__cdecl *__vecDelDtor)(std::basic_streambuf<char,std::char_traits<char> > *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *_Unlock)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__cdecl *overflow)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
  int (__cdecl *pbackfail)(std::basic_streambuf<char,std::char_traits<char> > *this, int);
  __int64 (__cdecl *showmanyc)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__cdecl *underflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
  int (__cdecl *uflow)(std::basic_streambuf<char,std::char_traits<char> > *this);
  __int64 (__cdecl *xsgetn)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, __int64);
  __int64 (__cdecl *xsputn)(std::basic_streambuf<char,std::char_traits<char> > *this, const char *, __int64);
  std::fpos<int> *(__cdecl *seekoff)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, __int64, int, int);
  std::fpos<int> *(__cdecl *seekpos)(std::basic_streambuf<char,std::char_traits<char> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<char,std::char_traits<char> > *(__cdecl *setbuf)(std::basic_streambuf<char,std::char_traits<char> > *this, char *, __int64);
  int (__cdecl *sync)(std::basic_streambuf<char,std::char_traits<char> > *this);
  void (__cdecl *imbue)(std::basic_streambuf<char,std::char_traits<char> > *this, std::locale *);
};

/* 3172 */
struct __cppobj std::basic_ostream<char,std::char_traits<char> >
{
  _BYTE gap0[112];
};

/* 3173 */
struct __cppobj __declspec(align(8)) std::basic_ios<char,std::char_traits<char> > : std::ios_base
{
  std::basic_streambuf<char,std::char_traits<char> > *_Mystrbuf;
  std::basic_ostream<char,std::char_traits<char> > *_Tiestr;
  char _Fillch;
};

/* 3174 */
struct std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  std::basic_ostream<char,std::char_traits<char> > *_Myostr;
};

/* 3175 */
struct __cppobj __declspec(align(8)) std::basic_ostream<char,std::char_traits<char> >::sentry : std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  bool _Ok;
};

/* 3176 */
union std::_String_val<std::_Simple_types<wchar_t> >::_Bxty
{
  wchar_t _Buf[8];
  wchar_t *_Ptr;
  char _Alias[8];
};

/* 3177 */
struct __cppobj std::_String_val<std::_Simple_types<wchar_t> > : std::_Container_base0
{
  std::_String_val<std::_Simple_types<wchar_t> >::_Bxty _Bx;
  unsigned __int64 _Mysize;
  unsigned __int64 _Myres;
};

/* 3178 */
struct __cppobj std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > > : std::_String_val<std::_Simple_types<wchar_t> >
{
};

/* 3179 */
struct __cppobj std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > : std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
{
};

/* 3180 */
struct __cppobj std::_Allocator_base<wchar_t>
{
};

/* 3181 */
struct __cppobj std::allocator<wchar_t> : std::_Allocator_base<wchar_t>
{
};

/* 3182 */
struct __cppobj std::_Wrap_alloc<std::allocator<wchar_t> > : std::allocator<wchar_t>
{
};

/* 3183 */
struct __cppobj std::_Iterator012<std::random_access_iterator_tag,wchar_t,__int64,wchar_t const *,wchar_t const &,std::_Iterator_base0> : std::_Iterator_base0
{
};

/* 3184 */
struct __cppobj std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > > : std::_Iterator012<std::random_access_iterator_tag,wchar_t,__int64,wchar_t const *,wchar_t const &,std::_Iterator_base0>
{
  const wchar_t *_Ptr;
};

/* 3185 */
struct __cppobj std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > > : std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
{
};

/* 3186 */
struct __cppobj std::input_iterator_tag
{
};

/* 3187 */
struct __cppobj std::output_iterator_tag
{
};

/* 3188 */
struct __cppobj std::forward_iterator_tag : std::input_iterator_tag, std::output_iterator_tag
{
  _BYTE gap0[1];
};

/* 3189 */
struct __cppobj std::bidirectional_iterator_tag : std::forward_iterator_tag
{
};

/* 3190 */
struct __cppobj std::random_access_iterator_tag : std::bidirectional_iterator_tag
{
};

/* 3191 */
struct __declspec(align(8)) type_info
{
  type_infoVtbl *vfptr;
  void *_M_data;
  char _M_d_name[1];
};

/* 3192 */
struct type_infoVtbl
{
  void *(__cdecl *__vecDelDtor)(type_info *this, unsigned int);
};

/* 3193 */
struct __type_info_node
{
  void *_MemPtr;
  __type_info_node *_Next;
};

/* 3194 */
struct __cppobj std::bad_cast : std::exception
{
};

/* 3195 */
struct __cppobj std::bad_typeid : std::exception
{
};

/* 3196 */
struct __cppobj std::__non_rtti_object : std::bad_typeid
{
};

/* 3197 */
struct std::_Timevec
{
  void *_Timeptr;
};

/* 3198 */
struct _Collvec
{
  unsigned int _Page;
  wchar_t *_LocaleName;
};

/* 3199 */
struct _Ctypevec
{
  unsigned int _Page;
  const __int16 *_Table;
  int _Delfl;
  wchar_t *_LocaleName;
};

/* 3200 */
struct _Cvtvec
{
  unsigned int _Page;
  unsigned int _Mbcurmax;
  int _Isclocale;
  char _Isleadbyte[32];
};

/* 3201 */
struct __declspec(align(8)) std::_Yarn<wchar_t>
{
  wchar_t *_Myptr;
  wchar_t _Nul;
};

/* 3202 */
struct std::_Locinfo
{
  std::_Lockit _Lock;
  std::_Yarn<char> _Days;
  std::_Yarn<char> _Months;
  std::_Yarn<wchar_t> _W_Days;
  std::_Yarn<wchar_t> _W_Months;
  std::_Yarn<char> _Oldlocname;
  std::_Yarn<char> _Newlocname;
};

/* 3203 */
struct std::locale::id
{
  unsigned __int64 _Id;
};

/* 3204 */
struct __cppobj std::codecvt_base : std::locale::facet
{
};

/* 3205 */
struct __cppobj __declspec(align(8)) std::codecvt<wchar_t,char,int> : std::codecvt_base
{
  _Cvtvec _Cvt;
};

/* 3206 */
struct __cppobj __declspec(align(8)) std::codecvt<unsigned short,char,int> : std::codecvt_base
{
  _Cvtvec _Cvt;
};

/* 3207 */
struct __cppobj std::ctype_base : std::locale::facet
{
};

/* 3208 */
struct __cppobj std::ctype<char> : std::ctype_base
{
  _Ctypevec _Ctype;
};

/* 3209 */
struct __cppobj __declspec(align(8)) std::ctype<wchar_t> : std::ctype_base
{
  _Ctypevec _Ctype;
  _Cvtvec _Cvt;
};

/* 3210 */
struct __cppobj __declspec(align(8)) std::ctype<unsigned short> : std::ctype_base
{
  _Ctypevec _Ctype;
  _Cvtvec _Cvt;
};

/* 3211 */
struct __cppobj std::ctype_byname<char> : std::ctype<char>
{
};

/* 3212 */
struct std::error_category
{
  std::error_categoryVtbl *vfptr;
};

/* 3213 */
struct std::error_condition
{
  int _Myval;
  std::error_category *_Mycat;
};

/* 3214 */
const struct std::error_code
{
  int _Myval;
  std::error_category *_Mycat;
};

/* 3215 */
struct std::error_categoryVtbl
{
  void *(__cdecl *__vecDelDtor)(std::error_category *this, unsigned int);
  const char *(__cdecl *name)(std::error_category *this);
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > *(__cdecl *message)(std::error_category *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result, int);
  std::error_condition *(__cdecl *default_error_condition)(std::error_category *this, std::error_condition *result, int);
  bool (__cdecl *equivalent)(std::error_category *this, std::error_code *, int);
  bool (__cdecl *equivalent)(std::error_category *this, int, std::error_condition *);
};

/* 3216 */
struct std::_Bool_struct<std::error_condition>
{
  int _Member;
};

/* 3217 */
struct std::_Bool_struct<std::error_code>
{
  int _Member;
};

/* 3218 */
struct __cppobj std::unary_function<std::error_code,unsigned __int64>
{
};

/* 3219 */
struct __cppobj std::hash<std::error_code> : std::unary_function<std::error_code,unsigned __int64>
{
};

/* 3220 */
struct __cppobj std::unary_function<int,unsigned __int64>
{
};

/* 3221 */
struct __cppobj std::_Bitwise_hash<int> : std::unary_function<int,unsigned __int64>
{
};

/* 3222 */
struct __cppobj std::hash<int> : std::_Bitwise_hash<int>
{
};

/* 3223 */
struct __cppobj std::system_error : std::runtime_error
{
  std::error_code _Mycode;
};

/* 3224 */
struct __cppobj std::_Generic_error_category : std::error_category
{
};

/* 3225 */
struct __cppobj std::_Iostream_error_category : std::_Generic_error_category
{
};

/* 3226 */
struct __cppobj std::_System_error_category : std::_Generic_error_category
{
};

/* 3227 */
struct __cppobj std::ios_base::failure : std::system_error
{
};

/* 3228 */
struct __cppobj std::ios_base::Init
{
};

/* 3229 */
struct std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >
{
  int _Member;
};

/* 3230 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >
{
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl *vfptr;
  wchar_t *_Gfirst;
  wchar_t *_Pfirst;
  wchar_t **_IGfirst;
  wchar_t **_IPfirst;
  wchar_t *_Gnext;
  wchar_t *_Pnext;
  wchar_t **_IGnext;
  wchar_t **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 3231 */
struct std::basic_streambuf<wchar_t,std::char_traits<wchar_t> >Vtbl
{
  void *(__cdecl *__vecDelDtor)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *_Unlock)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__cdecl *overflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
  unsigned __int16 (__cdecl *pbackfail)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, unsigned __int16);
  __int64 (__cdecl *showmanyc)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__cdecl *underflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  unsigned __int16 (__cdecl *uflow)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  __int64 (__cdecl *xsgetn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, __int64);
  __int64 (__cdecl *xsputn)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, const wchar_t *, __int64);
  std::fpos<int> *(__cdecl *seekoff)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, __int64, int, int);
  std::fpos<int> *(__cdecl *seekpos)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *(__cdecl *setbuf)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, wchar_t *, __int64);
  int (__cdecl *sync)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this);
  void (__cdecl *imbue)(std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *this, std::locale *);
};

/* 3232 */
struct __cppobj std::basic_ostream<wchar_t,std::char_traits<wchar_t> >
{
  _BYTE gap0[112];
};

/* 3233 */
struct __cppobj __declspec(align(8)) std::basic_ios<wchar_t,std::char_traits<wchar_t> > : std::ios_base
{
  std::basic_streambuf<wchar_t,std::char_traits<wchar_t> > *_Mystrbuf;
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Tiestr;
  wchar_t _Fillch;
};

/* 3234 */
struct std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  std::basic_ostream<wchar_t,std::char_traits<wchar_t> > *_Myostr;
};

/* 3235 */
struct __cppobj __declspec(align(8)) std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry : std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  bool _Ok;
};

/* 3236 */
struct std::_Bool_struct<std::basic_ostream<wchar_t,std::char_traits<wchar_t> > >
{
  int _Member;
};

/* 3237 */
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >
{
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl *vfptr;
  unsigned __int16 *_Gfirst;
  unsigned __int16 *_Pfirst;
  unsigned __int16 **_IGfirst;
  unsigned __int16 **_IPfirst;
  unsigned __int16 *_Gnext;
  unsigned __int16 *_Pnext;
  unsigned __int16 **_IGnext;
  unsigned __int16 **_IPnext;
  int _Gcount;
  int _Pcount;
  int *_IGcount;
  int *_IPcount;
  std::locale *_Plocale;
};

/* 3238 */
struct std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >Vtbl
{
  void *(__cdecl *__vecDelDtor)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *_Unlock)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  unsigned __int16 (__cdecl *overflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16);
  unsigned __int16 (__cdecl *pbackfail)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16);
  __int64 (__cdecl *showmanyc)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  unsigned __int16 (__cdecl *underflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  unsigned __int16 (__cdecl *uflow)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  __int64 (__cdecl *xsgetn)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16 *, __int64);
  __int64 (__cdecl *xsputn)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, const unsigned __int16 *, __int64);
  std::fpos<int> *(__cdecl *seekoff)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::fpos<int> *result, __int64, int, int);
  std::fpos<int> *(__cdecl *seekpos)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::fpos<int> *result, std::fpos<int>, int);
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *(__cdecl *setbuf)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, unsigned __int16 *, __int64);
  int (__cdecl *sync)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this);
  void (__cdecl *imbue)(std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *this, std::locale *);
};

/* 3239 */
struct __cppobj std::basic_ostream<unsigned short,std::char_traits<unsigned short> >
{
  _BYTE gap0[112];
};

/* 3240 */
struct __cppobj __declspec(align(8)) std::basic_ios<unsigned short,std::char_traits<unsigned short> > : std::ios_base
{
  std::basic_streambuf<unsigned short,std::char_traits<unsigned short> > *_Mystrbuf;
  std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *_Tiestr;
  unsigned __int16 _Fillch;
};

/* 3241 */
struct std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  std::basic_ostream<unsigned short,std::char_traits<unsigned short> > *_Myostr;
};

/* 3242 */
struct __cppobj __declspec(align(8)) std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry : std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  bool _Ok;
};

/* 3243 */
struct std::_Bool_struct<std::basic_ostream<unsigned short,std::char_traits<unsigned short> > >
{
  int _Member;
};

/* 3244 */
struct __declspec(align(8)) std::basic_istream<char,std::char_traits<char> >
{
  _BYTE gap0[8];
  __int64 _Chcount;
  _BYTE gap10[104];
};

/* 3245 */
struct std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  std::basic_istream<char,std::char_traits<char> > *_Myistr;
};

/* 3246 */
struct __cppobj __declspec(align(8)) std::basic_istream<char,std::char_traits<char> >::sentry : std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  bool _Ok;
};

/* 3247 */
struct std::_Bool_struct<std::basic_istream<char,std::char_traits<char> > >
{
  int _Member;
};

/* 3248 */
struct __declspec(align(8)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >
{
  _BYTE gap0[8];
  __int64 _Chcount;
  _BYTE gap10[104];
};

/* 3249 */
struct std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  std::basic_istream<wchar_t,std::char_traits<wchar_t> > *_Myistr;
};

/* 3250 */
struct __cppobj __declspec(align(8)) std::basic_istream<wchar_t,std::char_traits<wchar_t> >::sentry : std::basic_istream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base
{
  bool _Ok;
};

/* 3251 */
struct std::_Bool_struct<std::basic_istream<wchar_t,std::char_traits<wchar_t> > >
{
  int _Member;
};

/* 3252 */
struct __declspec(align(8)) std::basic_istream<unsigned short,std::char_traits<unsigned short> >
{
  _BYTE gap0[8];
  __int64 _Chcount;
  _BYTE gap10[104];
};

/* 3253 */
struct std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  std::basic_istream<unsigned short,std::char_traits<unsigned short> > *_Myistr;
};

/* 3254 */
struct __cppobj __declspec(align(8)) std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry : std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  bool _Ok;
};

/* 3255 */
struct std::_Bool_struct<std::basic_istream<unsigned short,std::char_traits<unsigned short> > >
{
  int _Member;
};

/* 3256 */
struct __cppobj std::allocator_traits<std::allocator<wchar_t> >
{
};

/* 3257 */
struct __cppobj std::_Wrap_alloc<std::allocator<wchar_t> >::rebind<wchar_t>
{
};

/* 3258 */
struct __cppobj std::_Wrap_alloc<std::allocator<wchar_t> >::rebind<wchar_t *>
{
};

/* 3259 */
struct __cppobj std::numpunct<char> : std::locale::facet
{
  const char *_Grouping;
  char _Dp;
  char _Kseparator;
  const char *_Falsename;
  const char *_Truename;
};

/* 3260 */
struct __cppobj std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > : std::locale::facet
{
};

/* 3261 */
struct __cppobj std::iterator<std::output_iterator_tag,void,void,void,void>
{
};

/* 3262 */
struct __cppobj std::_Outit : std::iterator<std::output_iterator_tag,void,void,void,void>
{
};

/* 3263 */
struct __cppobj std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > : std::_Outit
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > *container;
};

/* 3264 */
struct __cppobj std::numpunct<wchar_t> : std::locale::facet
{
  const char *_Grouping;
  wchar_t _Dp;
  wchar_t _Kseparator;
  const wchar_t *_Falsename;
  const wchar_t *_Truename;
};

/* 3265 */
struct __cppobj std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > : std::locale::facet
{
};

/* 3266 */
struct __cppobj std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > : std::_Outit
{
  std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > *container;
};

/* 3267 */
struct __cppobj std::allocator_traits<std::allocator<wchar_t> >::rebind_alloc<wchar_t>
{
};

/* 3268 */
struct __cppobj std::allocator_traits<std::allocator<wchar_t> >::rebind_alloc<wchar_t *>
{
};

/* 3269 */
struct std::pair<unsigned short *,unsigned short *>
{
  unsigned __int16 *first;
  unsigned __int16 *second;
};

/* 3270 */
struct __cppobj std::tuple<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>
{
};

/* 3271 */
struct __cppobj std::_Scalar_ptr_iterator_tag
{
};

/* 3272 */
struct GfxShaderConstantBlock
{
  unsigned int count;
  unsigned __int16 dest[32];
  const float *value[32];
};

/* 3273 */
struct BuiltInMaterialTable
{
  const char *name;
  Material **material;
};

/* 3274 */
struct __cppobj GfxWorldVertexDisplacedDecal : GfxWorldVertex
{
  float texCoord2[8][2];
  float displacementTexelDensity[7];
  char displacementWeights[8];
};

/* 3275 */
struct $30809686847FC7259C72BFF0687BB2EE
{
  unsigned int surfCount;
  unsigned int transSurfCount;
  unsigned int vertCount;
  unsigned int indexCount;
  GfxWorldVertexDisplacedDecal *verts;
  unsigned __int16 *indices;
};

/* 3276 */
struct __cppobj GfxSortMarkSurfsInterface
{
};

/* 3277 */
struct TriangleVisitorVertex
{
  float xyz[3];
  float normal[3];
};

/* 3278 */
struct FxMarkTri
{
  unsigned __int16 indices[3];
  GfxMarkContext context;
};

/* 3279 */
struct Sphere
{
  float origin[3];
  float radius;
  float radiusSq;
};

/* 3280 */
struct __declspec(align(8)) MarkInfoCollidedDObj
{
  DObj *dObj;
  cpose_t *pose;
  unsigned __int16 entnum;
};

/* 3281 */
struct __declspec(align(8)) MarkInfoCollidedBModel
{
  GfxBrushModel *brushModel;
  cpose_t *pose;
  unsigned __int16 entnum;
};

/* 3282 */
struct MarkInfo
{
  Sphere bounds;
  unsigned int *bspSetBits;
  unsigned int *smodelSetBits;
  float localOrigin[3];
  float localTexCoordAxis[3];
  float axis[3][3];
  Material *material;
  Material *displacementMaterial;
  int maxTris;
  FxMarkTri *tris;
  int maxPoints;
  FxMarkPoint *points;
  float planes[6][4];
  float viewOffset[3];
  bool markHasLightmap;
  bool markHasReflection;
  MarkFragmentsAgainstEnum markAgainst;
  unsigned __int16 smodelsCollided[32];
  int smodelCollidedCount;
  MarkInfoCollidedDObj sceneDObjsCollided[32];
  int sceneDObjCollidedCount;
  MarkInfoCollidedBModel sceneBModelsCollided[32];
  int sceneBModelCollidedCount;
  MarkInfoCollidedDObj viewmodelDObjsCollided[1];
  int viewmodelDObjsCollidedCount;
  int viewmodelClientIndex;
  int usedTriCount;
  int usedPointCount;
  void (__cdecl *callback)(void *, int, FxMarkTri *, int, FxMarkPoint *, const float *, const float *);
  void *callbackContext;
};

/* 3283 */
struct FxModelMarkPoint
{
  float xyz[3];
  float vertWeights[3];
};

/* 3284 */
struct FxWorldMarkPoint
{
  float xyz[3];
  float vertWeights[3];
};

/* 3285 */
struct GlassTri
{
  unsigned __int16 indices[3];
};

/* 3286 */
struct MarkModelCoreContext
{
  MarkInfo *markInfo;
  GfxMarkContext *markContext;
  const float *markOrigin;
  const float *markDir;
  const float (*clipPlanes)[4];
  const float (*transformMatrix)[3];
  const float (*transformNormalMatrix)[3];
};

/* 3287 */
struct StaticModelLightCallback
{
  const unsigned int *smodelVisData;
  float planes[6][4];
};

/* 3288 */
struct BspSpotLightCallback
{
  const unsigned int *surfaceVisData;
  float planes[6][4];
};

/* 3289 */
struct BspOmniLightCallback
{
  const unsigned int *surfaceVisData;
};

/* 3290 */
struct __declspec(align(8)) R_CollInfo
{
  unsigned int *bspSetBits;
  unsigned int *smodelSetBits;
  Sphere sphere;
  unsigned int cellBits[32];
};

/* 3291 */
struct __declspec(align(2)) GfxMetrics
{
  unsigned __int16 cubemapShotRes;
  unsigned __int16 cubemapShotPixelBorder;
  bool captureHDR;
};

/* 3292 */
struct GfxAssets
{
  ID3D11Query *pixelCountQuery;
};

/* 3293 */
struct NvPhysicalGpuHandle__
{
  int unused;
};

/* 3294 */
struct NV_DISPLAY_DRIVER_MEMORY_INFO_V2
{
  unsigned int version;
  unsigned int dedicatedVideoMemory;
  unsigned int availableDedicatedVideoMemory;
  unsigned int systemVideoMemory;
  unsigned int sharedSystemMemory;
  unsigned int curAvailableDedicatedVideoMemory;
};

/* 3295 */
struct GfxRefreshRate
{
  unsigned int Numerator;
  unsigned int Denominator;
};

/* 3296 */
struct __cppobj IDXGIDevice : IDXGIObject
{
};

/* 3297 */
struct DXGI_SHARED_RESOURCE
{
  void *Handle;
};

/* 3298 */
struct __declspec(align(8)) GfxWindowParms
{
  HWND__ *hwnd;
  GfxRefreshRate hz;
  GfxDisplayMode displayMode;
  int x;
  int y;
  float aspectRatioWindow;
  unsigned __int16 shadowTileResSmall;
  unsigned __int16 shadowTileResLarge;
  int sceneWidth;
  int sceneHeight;
  int displayWidth;
  int displayHeight;
  char omitRTFlags;
  int aaSamples;
};

/* 3299 */
struct GfxEnumMonitors
{
  int monitorIndex;
  HMONITOR__ *foundMonitor;
};

/* 3300 */
struct __declspec(align(4)) GfxWindowInput
{
  GfxDisplayMode displayMode;
  GfxAspectRatio aspectRatio;
  GfxImageQuality imageQuality;
  GfxAAMode aaMode;
  int x;
  int y;
  const char *resolutionName;
  const char *refreshRateName;
  GfxSSAOMode ssaoMode;
  bool mbEnable;
  bool omitUnusedRenderTargets;
};

/* 3301 */
struct WaveletHuffmanDecode
{
  __int16 value;
  __int16 bits;
};

/* 3302 */
struct __declspec(align(4)) WaveletDecode
{
  unsigned __int16 value;
  unsigned __int16 bit;
  const char *data;
  int width;
  int height;
  int channels;
  int bpp;
  int mipLevel;
  bool dataInitialized;
};

/* 3303 */
struct GfxImageFileHeader
{
  char tag[3];
  char version;
  unsigned int flags;
  char format;
  char numElements;
  __int16 dimensions[3];
  int fileSizeForPicmip[4];
};

/* 3304 */
struct $56F4E4E7597355C63D93D06DAD9BEA3B
{
  int picmip;
  int picmipBump;
  int picmipSpec;
  CardMemory totalMemory;
};

/* 3305 */
struct ImageList
{
  unsigned int count;
  GfxImage *image[8192];
};

/* 3306 */
struct Image_MemUsage
{
  int total;
  int minspec;
};

/* 3307 */
struct std::pair<GfxImage * *,GfxImage * *>
{
  GfxImage **first;
  GfxImage **second;
};

/* 3308 */
struct $B8DA2663A9C1658F80A04F10232F342D
{
  unsigned int surfCount;
  unsigned int opaqueSurfCount;
  unsigned int vertCount;
  unsigned int indexCount;
  GfxPackedVertex *verts;
  unsigned __int16 *indices;
};

/* 3309 */
struct __cppobj GfxSortGlassSurfsInterface
{
};

/* 3310 */
struct GfxSortSurfBin
{
  unsigned __int16 mtlSortIndex;
  unsigned __int16 first;
  unsigned int last;
};

/* 3311 */
struct __cppobj dev_dvar_t
{
};

/* 3312 */
struct __cppobj GfxSortDrawSurfsInterface
{
};

/* 3313 */
struct R_SortStaticModels_HashBucket
{
  unsigned __int16 headIndex;
  unsigned __int16 tailIndex;
};

/* 3314 */
struct R_SortStaticModels_HashNode
{
  unsigned __int16 nextIndex;
};

/* 3315 */
struct GfxXModelDrawStream
{
  GfxDrawSurfIter *drawSurfIter;
  unsigned int precompiledIndex;
  GfxTexture *reflectionProbeTexture;
  unsigned int customSamplerFlags;
  float eyeOffset[3];
  GfxBackEndData *data;
  XSurface *localSurf;
};

/* 3316 */
struct SunShadowMapUserData
{
  unsigned int partitionIndex;
  GfxSunShadowPartition *partition;
  GfxDrawList *drawList;
  unsigned int resolution;
  GfxRenderTargetId renderTargetId;
  GfxBackEndData *data;
  int useCachedSpotShadow;
  int useCachedSunShadow;
};

/* 3317 */
struct CachedSunShadowMapUserData
{
  unsigned int partitionIndex;
  unsigned int cellIndex;
  GfxDrawList *drawList;
  GfxBackEndData *data;
};

/* 3318 */
struct GfxStaticModelDrawStream
{
  GfxSModelSurfIter *smodelSurfIter;
  unsigned int precompiledIndex;
  float eyeOffset[3];
  GfxSModelSurfHeader smodelSurfHeader;
  const char *smodelSurfVisData;
  GfxTexture *reflectionProbeTexture;
  GfxTexture *lightmapPrimaryTexture;
  GfxTexture *lightmapSecondaryTexture;
  unsigned int customSamplerFlags;
  XSurface *localSurf;
  unsigned int smodelCount;
  const unsigned __int16 *smodelList;
  GfxBackEndData *data;
};

/* 3319 */
struct __declspec(align(8)) GfxSModelSurfVisDataHeader
{
  XSurface *surfs;
  unsigned __int16 smodelCount;
  unsigned __int16 smodelIndexes[1];
};

/* 3320 */
struct __cppobj GfxSModelArrayCallback_NoPrepass
{
};

/* 3321 */
struct __cppobj GfxSModelArrayCallback_Instanced
{
};

/* 3322 */
struct __declspec(align(8)) GfxDrawOpaqueUserData
{
  GfxViewInfo *viewInfo;
  GfxDrawList *drawList;
  unsigned int drawListType;
};

/* 3323 */
struct GfxDrawUserData
{
  GfxViewInfo *viewInfo;
  GfxDrawList *drawList;
};

/* 3324 */
struct __declspec(align(8)) R_DrawLitDecalOrTransContext
{
  GfxViewInfo *viewInfo;
  GfxDrawList *drawList;
  R_SplitDecalTrans_Layer sdtLayer;
};

/* 3325 */
struct GfxDrawEmissiveUserData
{
  GfxViewInfo *viewInfo;
  GfxDrawList *drawList;
};

/* 3326 */
struct __declspec(align(8)) GfxTrianglesDrawStream
{
  GfxMatrix *viewProjectionMatrix;
  GfxMatrix *projectionMatrix;
  float viewOrigin[3];
  int needSubdomain;
  GfxBspSurfIter *bspSurfIter;
  GfxTexture *reflectionProbeTexture;
  GfxTexture *lightmapPrimaryTexture;
  GfxTexture *lightmapSecondaryTexture;
  unsigned int customSamplerFlags;
};

/* 3327 */
struct DpvsClipPlane
{
  __m128 coeffs;
  __m128 signs;
};

/* 3328 */
struct __declspec(align(8)) DpvsClipPlaneSet
{
  DpvsClipPlane *planes[16];
  unsigned int count;
};

/* 3329 */
struct __declspec(align(8)) DpvsPlanes
{
  DpvsPlane *planes;
  int count;
};

/* 3330 */
struct __declspec(align(8)) SpuArrayIteratorLookup<unsigned char>
{
  const char *entry;
  unsigned int index;
};

/* 3331 */
struct __declspec(align(8)) PortalHeapNode
{
  GfxPortal *portal;
  float dist;
};

/* 3332 */
union GfxHullPointsPool
{
  GfxHullPointsPool *nextFree;
  float points[64][2];
};

/* 3333 */
struct DpvsView
{
  unsigned int renderFxFlagsCull;
  DpvsPlane frustumPlanes[14];
  int frustumPlaneCount;
};

/* 3334 */
struct $67CEDA4D9099761644AE61484F5FCDD3
{
  GfxMatrix viewProjMtx;
  GfxMatrix invViewProjMtx;
  DpvsPlane viewPlane;
  DpvsPlane fogPlane;
  DpvsPlane *nearPlane;
  DpvsPlane *farPlane;
  float viewOrg[4];
  int viewOrgIsDir;
  int queuedCount;
  PortalHeapNode *portalQueue;
  GfxHullPointsPool *nextFreeHullPoints;
  float cullDist;
  DpvsPlane childPlanes[2048];
  DpvsView views[6][3];
  DpvsPlane *sideFrustumPlanes;
  unsigned int *entVisBits[2];
  unsigned int *cellBits;
  unsigned int cellVisibleBits[6][32];
};

/* 3335 */
struct __declspec(align(8)) FilterEntInfo
{
  unsigned int localClientNum;
  unsigned int entnum;
  GfxEntCellRefInfo info;
  unsigned int cellOffset;
};

/* 3336 */
struct __declspec(align(8)) GfxMotionBlurSurfBuildInfo
{
  char *surfBegin;
  unsigned int surfUsed;
  unsigned int surfCapacity;
  DObjAnimMat *prevSkinningSkel;
  GfxSkinCacheEntry *skinCacheEntry;
  bool isMotionblurDObj;
};

/* 3337 */
struct $770A1B545A898CADDB6CC56874FE5313
{
  bool cubeDirsInited;
  int imageSize;
  float (*cubemapPixelDirs[6])[3];
};

/* 3338 */
union $5DA10D02FB66DFDDE46126628527458F
{
  void *imageBufferTypeless;
  char *imageBuffer;
  unsigned int *imageBufferINT32;
  unsigned __int16 *imageBufferFP16;
  float *imageBufferFP32;
  float (*imageBufferVec4)[4];
};

/* 3339 */
struct ImageDesc
{
  $5DA10D02FB66DFDDE46126628527458F ___u0;
  int pixelSize;
  int pixelFormat;
  int imageWidth;
  int imageHeight;
  int imageBufferSize;
  int rowPitch;
};

/* 3340 */
struct __declspec(align(8)) GfxCodeSurfGlob
{
  unsigned int surfCount;
  unsigned int vertCount;
  unsigned int vertIndexBase;
  unsigned int indexCount;
  unsigned int argsCount;
  GfxPackedVertexHdr *verts;
  unsigned __int16 *indices;
  GfxCodeSurf *codeSurfsMain;
  unsigned int *codeSurfCountMain;
  float (*outCodeSurfArgsMain)[4];
  unsigned int surfLimit;
  unsigned int vertLimit;
  unsigned int indexLimit;
  unsigned int argsLimit;
  GfxWarningType surfLimitWarn;
  GfxWarningType vertLimitWarn;
  GfxWarningType indexLimitWarn;
  GfxWarningType argsLimitWarn;
  GfxCodeSurfListType surfList;
};

/* 3341 */
struct __declspec(align(8)) GfxCodeSurfBuffers
{
  unsigned int vertIndexBase;
  unsigned __int16 vertIndexOffset;
  r_double_index_t *indices;
  unsigned int argOffset;
};

/* 3342 */
struct __cppobj GfxSortCodeSurfsInterface
{
};

/* 3343 */
struct cmd_function_s
{
  cmd_function_s *next;
  const char *name;
  void (__cdecl *function)();
};

/* 3344 */
struct __cppobj GfxSortCloudSurfsInterface
{
};

/* 3345 */
struct SaveHeader
{
  int saveVersion;
  int gameCheckSum;
  int saveCheckSum;
  int saveId;
  bool demoPlayback;
  bool splitscreen;
  int scrCheckSum[3];
  char mapName[256];
  char buildNumber[128];
  unsigned int omnvarPerGameCount;
  unsigned int omnvarPerClientCount;
  char gametype[128];
  char buildVersionSuffix[16];
  unsigned int networkProtocol;
  char screenShotName[64];
  char description[256];
  char filename[64];
  SaveType saveType;
  qtime_s time;
  int bodySize;
  unsigned int pad[6];
};

/* 3346 */
struct __declspec(align(128)) SaveGame
{
  SaveHeader header;
  MemoryFile memFile;
};

/* 3347 */
struct GfxDynamicIndices
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  unsigned __int16 *indices;
};

/* 3348 */
struct GfxComputeBufferState
{
  volatile int used;
  int total;
  ID3D11Buffer *buffer;
  ID3D11ShaderResourceView *bufferView;
  ID3D11UnorderedAccessView *bufferRWView;
};

/* 3349 */
struct SunLightParseParams
{
  char name[64];
  float ambientScale;
  float ambientColor[3];
  float skyLight;
  float sunLight;
  float sunColor[3];
  float skyColor[3];
  bool skyColorHasBeenSet;
  float angles[3];
};

/* 3350 */
struct CameraRegionSmodelSurfInfo
{
  unsigned __int16 dataLimit;
  unsigned __int16 delaySurfLimit;
};

/* 3351 */
struct GfxSModelSurfDelaySortFields
{
  char pad[6];
  GfxSModelSurfVisDataRef visDataRef;
  GfxSModelSurfHeader header;
};

/* 3352 */
union GfxSModelSurfDelaySort
{
  GfxSModelSurfDelaySortFields fields;
  Packed128 packed;
};

/* 3353 */
struct GfxSModelSurfBuildList
{
  GfxSModelSurfHeader lastSurfHeader;
  GfxSModelSurf *lastSModelSurf;
  unsigned int visDataRefCount;
  char *surfDataBegin;
  char *surfDataPos;
  char *surfDataEnd;
  GfxSModelSurfHeader minDelaySortKey;
  GfxSModelSurfDelaySort *delaySurfList;
  unsigned int delaySurfCount;
  unsigned int delaySurfLimit;
};

/* 3354 */
struct GfxSModelSurfDrawData
{
  unsigned int shadowCasterMaterialIndex;
  char *visData;
  unsigned int visDataUsed;
  unsigned int visDataLimit;
  GfxSModelSurfBuildList buildList[8][2];
};

/* 3355 */
struct $B2F401A5FAE514397B6DCDB99E78508F
{
  unsigned __int16 sceneLightEnvIndex;
  char reflectionProbeIndex;
  __int8 thermalView : 1;
  __int8 unused : 7;
};

/* 3356 */
union GfxSModelEmitKey
{
  $B2F401A5FAE514397B6DCDB99E78508F fields;
  unsigned int packed;
};

/* 3357 */
struct GfxSModelEmitInfo
{
  unsigned __int16 smodelIndexForSurf[24][128];
  unsigned int smodelCountForSurf[24];
  XModel *localModel;
  unsigned int firstMtlSkinIndex;
  GfxSModelEmitKey key;
};

/* 3358 */
struct __declspec(align(8)) SpuArrayIteratorLookup<GfxStaticModelDrawInst>
{
  GfxStaticModelDrawInst *entry;
  unsigned int index;
};

/* 3359 */
struct GfxBspSurfListBuild
{
  unsigned int *start;
  unsigned int *end;
  unsigned int *pos;
};

/* 3360 */
struct GfxBspSurfMergeState
{
  GfxDrawSurf drawSurf;
  unsigned int surfIndex;
  unsigned int firstVertex;
  unsigned int baseIndex;
  GfxSurfaceLightingAndFlags laf;
};

/* 3361 */
struct __cppobj GfxGetBspSurfListCameraLitInterfaceBase
{
};

/* 3362 */
struct GfxGetBspSurfListCameraLitData
{
  unsigned int *surfaceVisData;
  unsigned int *shadowedSurfaceVisData0;
  unsigned int *shadowedSurfaceVisData1;
};

/* 3363 */
struct __cppobj GfxGetBspSurfListCameraLitInterface : GfxGetBspSurfListCameraLitInterfaceBase
{
};

/* 3364 */
struct __cppobj GfxAddBspSurfacesCameraNonlitInterface
{
};

/* 3365 */
struct __cppobj GfxGetSunShadowBspSurfListInterface_SlowShadow
{
};

/* 3366 */
struct __declspec(align(8)) GfxGetSunShadowBspSurfListData
{
  const unsigned int *surfaceVisData;
  const unsigned int *surfaceCastsSunShadow;
  GfxSceneViewType sceneViewType;
};

/* 3367 */
struct __cppobj GfxGetSunShadowBspSurfListInterface_FastShadow
{
};

/* 3368 */
struct __cppobj GfxGetSunShadowBspSurfListInterface_SlowShadow_AnimatedVerts : GfxGetSunShadowBspSurfListInterface_SlowShadow
{
};

/* 3369 */
struct __cppobj GfxGetSunShadowBspSurfListInterface_SlowShadow_NonAnimatedVerts : GfxGetSunShadowBspSurfListInterface_SlowShadow
{
};

/* 3370 */
struct __cppobj GfxGetSunShadowBspSurfListInterface_FastShadow_AnimatedVerts : GfxGetSunShadowBspSurfListInterface_FastShadow
{
};

/* 3371 */
struct __cppobj GfxGetSunShadowBspSurfListInterface_FastShadow_NonAnimatedVerts : GfxGetSunShadowBspSurfListInterface_FastShadow
{
};

/* 3372 */
struct __cppobj GfxGetSpotShadowBspSurfListInterface
{
};

/* 3373 */
struct __declspec(align(8)) GfxGetSpotShadowBspSurfListData
{
  GfxShadowGeometry *shadowGeom;
  GfxSceneViewType sceneViewType;
};

/* 3374 */
struct __cppobj GfxGetSpotShadowBspSurfListInterface_AnimatedVerts : GfxGetSpotShadowBspSurfListInterface
{
};

/* 3375 */
struct __cppobj GfxGetSpotShadowBspSurfListInterface_NonAnimatedVerts : GfxGetSpotShadowBspSurfListInterface
{
};

/* 3376 */
struct __cppobj GfxGetSortedBspSurfListInterface
{
};

/* 3377 */
struct std::pair<GfxSurface * *,GfxSurface * *>
{
  GfxSurface **first;
  GfxSurface **second;
};

/* 3378 */
struct EightWayInfo
{
  unsigned __int64 initialKey;
  unsigned __int64 cumulativeState;
};

/* 3379 */
union $71F919D5CFC8165E2C6A03AA6C1E9FEA
{
  Hash_state hashState;
  EightWayInfo eightWayState;
};

/* 3380 */
struct MemoryHashInfo
{
  challengeTest_t type;
  unsigned __int64 start;
  unsigned int length;
  unsigned int position;
  unsigned int blockSize;
  unsigned int index;
  unsigned int startProcessingTime;
  unsigned int cumulativeProcessingTime;
  unsigned __int64 state;
  $71F919D5CFC8165E2C6A03AA6C1E9FEA ___u9;
};

/* 3381 */
struct ltc_hash_descriptor
{
  char *name;
  char ID;
  unsigned int hashsize;
  unsigned int blocksize;
  unsigned int OID[16];
  unsigned int OIDlen;
  int (__cdecl *init)(Hash_state *);
  int (__cdecl *process)(Hash_state *, const char *, unsigned int);
  int (__cdecl *done)(Hash_state *, char *);
  int (__cdecl *test)();
  int (__cdecl *hmac_block)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
};

/* 3382 */
struct trackerItem_s
{
  __int16 col;
  unsigned __int64 ent;
  int val;
  trackerColType_e type;
};

/* 3383 */
struct trackerQueue_s
{
  trackerItem_s items[96];
  bool dirty;
  int lastUploadTime;
};

/* 3384 */
struct __cppobj __declspec(align(8)) LeaderBoardRow<10> : bdStatsInfo
{
  int m_columns[10];
  unsigned int m_columnsCount;
};

/* 3385 */
struct __declspec(align(8)) trackerTask_s
{
  LeaderBoardRow<10> rows[24];
  bdStatsInfo *statsInfo[24];
  int count;
};

/* 3386 */
struct __cppobj __declspec(align(8)) bdTimeStamp : bdTaskResult
{
  unsigned int m_timeStamp;
};

/* 3387 */
struct __cppobj __declspec(align(8)) bdOnlineUserInfo : bdTaskResult
{
  unsigned __int64 m_userID;
  bool m_isOnline;
};

/* 3388 */
struct __cppobj bdUserInfo : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
};

/* 3389 */
struct __cppobj __declspec(align(8)) bdVerifyString : bdTaskResult
{
  bool m_verified;
};

/* 3390 */
struct __cppobj __declspec(align(8)) bdTitleStats : bdTaskResult
{
  unsigned int m_numOnlineSessions;
  unsigned int m_numTotalUsers;
  unsigned int m_numOnlineUsers;
};

/* 3391 */
struct __cppobj bdMessageSigning : bdTaskResult
{
  unsigned int m_timeStamp;
  char m_messageAuthenticationCode[44];
  char m_macPiggyback[512];
};

/* 3392 */
struct __declspec(align(8)) SessionStaticData
{
  const char *sessionName;
  bool registerUsersWithVoice;
};

/* 3393 */
struct XSESSION_INFO
{
  bdSecurityID sessionID;
  XNADDR hostAddress;
  bdSecurityKey keyExchangeKey;
};

/* 3394 */
struct __declspec(align(8)) ClientInfo
{
  bool registered;
  bool voiceRegistered;
  unsigned __int64 xuid;
  int natType;
  netadr_s addr;
  int usrVoiceConnectivityBits;
  int nextConnectivityTestTime[1];
  bool muted;
  bool privateSlot;
};

/* 3395 */
struct __declspec(align(8)) RegisteredUser
{
  bool active;
  unsigned __int64 xuid;
  bool privateSlot;
};

/* 3396 */
struct SessionDynamicData
{
  bool sessionHandle;
  XSESSION_INFO sessionInfo;
  bool keysGenerated;
  bool sessionStartCalled;
  unsigned __int64 sessionNonce;
  int privateSlots;
  int publicSlots;
  int flags;
  bool qosListenEnabled;
  ClientInfo users[12];
  int localVoiceConnectivityBits;
  int sessionCreateController;
  int sessionDeleteTime;
  bool allowJoining;
  RegisteredUser internalRegisteredUsers[12];
};

/* 3397 */
struct SessionData
{
  SessionStaticData staticData;
  SessionDynamicData dyn;
};

/* 3398 */
struct UI_LiveDialogStateInfo
{
  UI_LiveDialogState desiredMenuState;
  UI_LiveDialogState activeMenuState;
  unsigned int lastStateTransition;
};

/* 3399 */
struct __cppobj bdCounterValue : bdTaskResult
{
  unsigned int m_counterID;
  __int64 m_counterValue;
};

/* 3400 */
struct LiveAntiCheatExpressionStoreSettings
{
  int statementindex;
  int expressionentryindex;
  int expressionsupportingdataindex;
  int staticdvarindex;
  int staticdvarptrindex;
  int stringbufferindex;
};

/* 3401 */
struct LiveAntiCheatExpressionStore
{
  LiveAntiCheatExpressionStoreSettings settings;
  Statement_s statementarray[6];
  expressionEntry expressionentryarray[64];
  ExpressionSupportingData expressionsupportingdataarray[6];
  StaticDvar staticdvararray[20];
  StaticDvar *staticdvarptrarray[20];
  char stringbufferarray[4096];
};

/* 3402 */
struct bdLeaderBoardResult<LeaderBoardRow<10>,100>
{
  LeaderBoardRow<10> m_leaderBoardEntries[100];
  unsigned int numResults;
  unsigned int totalResults;
};

/* 3403 */
struct CSteamID::SteamID_t::SteamIDComponent_t
{
  unsigned __int32 m_unAccountID : 32;
  unsigned __int32 m_unAccountInstance : 20;
  unsigned __int32 m_EAccountType : 4;
  __int32 m_EUniverse : 8;
};

/* 3404 */
union CSteamID::SteamID_t
{
  CSteamID::SteamID_t::SteamIDComponent_t m_comp;
  unsigned __int64 m_unAll64Bits;
};

/* 3405 */
struct CSteamID
{
  CSteamID::SteamID_t m_steamid;
};

/* 3406 */
struct CGameID::GameID_t
{
  unsigned __int32 m_nAppID : 24;
  unsigned __int32 m_nType : 8;
  unsigned __int32 m_nModID : 32;
};

/* 3407 */
union $3CEB26943AD35CACD6D350A77B24A8C0
{
  unsigned __int64 m_ulGameID;
  CGameID::GameID_t m_gameID;
};

/* 3408 */
struct CGameID
{
  $3CEB26943AD35CACD6D350A77B24A8C0 ___u0;
};

/* 3409 */
struct MatchMakingKeyValuePair_t
{
  char m_szKey[256];
  char m_szValue[256];
};

/* 3410 */
struct servernetadr_t
{
  unsigned __int16 m_usConnectionPort;
  unsigned __int16 m_usQueryPort;
  unsigned int m_unIP;
};

/* 3411 */
struct __unaligned __declspec(align(4)) gameserveritem_t
{
  servernetadr_t m_NetAdr;
  int m_nPing;
  bool m_bHadSuccessfulResponse;
  bool m_bDoNotRefresh;
  char m_szGameDir[32];
  char m_szMap[32];
  char m_szGameDescription[64];
  __declspec(align(4)) unsigned int m_nAppID;
  int m_nPlayers;
  int m_nMaxPlayers;
  int m_nBotPlayers;
  bool m_bPassword;
  bool m_bSecure;
  __declspec(align(4)) unsigned int m_ulTimeLastPlayed;
  int m_nServerVersion;
  char m_szServerName[64];
  char m_szGameTags[128];
  CSteamID m_steamID;
};

/* 3412 */
struct CCallbackBase
{
  CCallbackBaseVtbl *vfptr;
  char m_nCallbackFlags;
  int m_iCallback;
};

/* 3413 */
struct CCallbackBaseVtbl
{
  void (__cdecl *Run)(CCallbackBase *this, void *, bool, unsigned __int64);
  void (__cdecl *Run)(CCallbackBase *this, void *);
  int (__cdecl *GetCallbackSizeBytes)(CCallbackBase *this);
};

/* 3414 */
struct LiveAntiCheatQuickBuf
{
  char *bufferptr;
  int buffersize;
  char *currentptr;
  int numbytesleft;
  int numbytestraversed;
};

/* 3415 */
struct LiveAntiCheatMemoryInfo
{
  unsigned __int64 scan_key;
  unsigned __int64 scan_start;
  unsigned int scan_size;
  unsigned __int64 scan_end;
  unsigned __int64 memory_text_start;
  unsigned int memory_text_size;
  unsigned __int64 memory_text_end;
};

/* 3416 */
struct __cppobj bdPlatformTiming
{
};

/* 3417 */
struct LiveAntiCheatMaxRateGovernorData
{
  unsigned int maxFramesPerSec;
  int timeStamp;
  unsigned int counter;
};

/* 3418 */
struct __cppobj LegacyLeaderBoardRow<10> : bdLegacyStatsInfo
{
  int m_columns[10];
};

/* 3419 */
struct ConversionArguments
{
  int argCount;
  const char *args[9];
};

/* 3420 */
struct __cppobj bdProfileInfo : bdTaskResult
{
  unsigned __int64 m_entityID;
};

/* 3421 */
struct __cppobj __declspec(align(8)) PublicProfileInfo : bdProfileInfo
{
  char m_memberplayer_card[65];
};

/* 3422 */
struct CachedPlayercard
{
  bool has_data;
  unsigned __int64 userID;
  char card[65];
  int time;
};

/* 3423 */
struct __declspec(align(4)) PlayercardCacheStore
{
  PLAYERCARD_CACHE_SCREEN screen;
  int last_pivot;
  int last_size;
  PublicProfileInfo publicProfile;
  CachedPlayercard cached_playercards[100];
  PublicProfileInfo downloading_buffer[20];
  unsigned __int64 downloading_users[20];
  int downloading_count;
  bool do_initial_cache;
};

/* 3424 */
struct PlayerCardData
{
  unsigned int lastUpdateTime;
  int rank_mp;
  int prestige_mp;
  int rank_alien;
  int prestige_alien;
  team_t team;
  char name[32];
  char clanAbbrev[5];
  int myParty;
  int customization_patch[2];
  int customization_background[2];
  int head;
  int body;
  unsigned __int64 ucdID;
};

/* 3425 */
struct __cppobj bdKeyValuePair : bdTaskResult
{
  char m_updateType;
  unsigned __int16 m_index;
  __int64 m_value;
};

/* 3426 */
struct __cppobj dwLobbyEventHandler<0> : bdLobbyEventHandler
{
};

/* 3427 */
struct __cppobj dwLobbyEventHandler<1> : bdLobbyEventHandler
{
};

/* 3428 */
struct __cppobj dwLobbyEventHandler<2> : bdLobbyEventHandler
{
};

/* 3429 */
struct __cppobj dwLobbyEventHandler<3> : bdLobbyEventHandler
{
};

/* 3430 */
struct __cppobj dwLobbyEventHandler<4> : bdLobbyEventHandler
{
};

/* 3431 */
struct __cppobj dwLobbyEventHandler<5> : bdLobbyEventHandler
{
};

/* 3432 */
struct __cppobj dwLobbyEventHandler<6> : bdLobbyEventHandler
{
};

/* 3433 */
struct __cppobj dwLobbyEventHandler<7> : bdLobbyEventHandler
{
};

/* 3434 */
struct overlappedTask::taskShim
{
  bdReference<bdRemoteTask> remoteTask;
};

/* 3435 */
struct overlappedTask
{
  TaskSubsystem subsystem;
  overlappedTask::taskShim u;
  int type;
  bool active;
  char controllerIndex;
  void *data;
};

/* 3436 */
struct dwCSListTask
{
  bdFileMetaData *m_descriptors;
  unsigned __int64 m_ownerID;
  int m_startDate;
  int m_bufferLocation;
  unsigned __int16 m_category;
  unsigned __int16 m_maxNumResults;
  unsigned __int16 m_offset;
  char *m_fileName;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(const int, contentServerPrivateData *);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3437 */
struct dwCSDescriptorsTask
{
  bdFileMetaData *m_descriptors;
  bdFileID *m_fileIDs;
  unsigned int m_numFiles;
  int m_cacheLoadedFileCount;
  int *m_descriptorCount;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3438 */
struct dwCSSearchTask
{
  bdTag *m_tags;
  bdFileID *m_resultFileIDs;
  unsigned int m_startIndex;
  unsigned int m_maxNumResults;
  unsigned int m_numTags;
  int *m_resultFileCount;
  int *m_resultTotalFileCount;
  bool m_orderNewestFirst;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3439 */
struct dwCSReadFileTask
{
  unsigned __int64 m_fileID;
  bdFileMetaData m_descriptor;
  unsigned int m_fileSize;
  void *m_buffer;
  void *m_cacheBuffer;
  unsigned int m_bufferSize;
  unsigned int m_bytesDownloaded;
  bool m_loadedFromCache;
  bdLobbyErrorCode m_error;
  bdDownloadInterceptor *m_downloadHandler;
  void (__cdecl *m_dataCallback)(void *, unsigned int, unsigned int, unsigned int);
  void (__cdecl *m_successCallback)(const int, dwCSReadFileTask *);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3440 */
struct dwCSRemoveFileTask
{
  unsigned __int16 m_fileSlot;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3441 */
struct dwCSWriteFileTask
{
  bdTag *m_tags;
  bdFileID m_outFileID;
  unsigned __int16 m_fileSlot;
  void *m_fileData;
  unsigned int m_fileSize;
  const char *m_fileName;
  unsigned __int16 m_category;
  const void *m_thumbData;
  unsigned int m_thumbDataSize;
  unsigned int m_numTags;
  bdLobbyErrorCode m_error;
  bdUploadInterceptor *m_uploadHandler;
  unsigned int (__cdecl *m_dataCallback)(void *, unsigned int, unsigned int);
  void (__cdecl *m_successCallback)(const int, unsigned __int64);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3442 */
struct dwCSTagTask
{
  unsigned __int64 m_entityID;
  bdTag *m_tags;
  unsigned int m_numTags;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3443 */
struct dwCSCopyFileTask
{
  unsigned __int64 m_userFileID;
  unsigned __int16 m_fileSlot;
  char *m_fileName;
  unsigned __int16 m_category;
  void *m_metaData;
  unsigned int m_metaDataSize;
  unsigned int m_numTags;
  bdTag *m_tags;
  bdFileID *m_outFileID;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3444 */
struct dwCSUploadSummaryTask
{
  unsigned __int64 m_fileID;
  void *m_summaryData;
  unsigned int m_summaryDataSize;
  void *m_metaData;
  unsigned int m_metaDataSize;
  unsigned int m_numTags;
  bdTag *m_tags;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3445 */
struct dwCSDownloadSummaryTask
{
  unsigned __int64 m_fileID;
  void *m_summaryData;
  unsigned int m_summaryDataSize;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(int, dwCSDownloadSummaryTask *);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3446 */
struct dwCSListPublisherFilesTask
{
  unsigned int m_startDate;
  unsigned __int16 m_category;
  bdFileMetaData *m_outDescriptors;
  unsigned __int16 m_maxNumResults;
  int *m_descriptorCount;
  unsigned __int16 m_offset;
  char *m_fileName;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_successCallback)(const int, const int);
  void (__cdecl *m_failureCallback)(const int, const int, bdLobbyErrorCode);
};

/* 3447 */
struct dwCSReadPublisherFileTask
{
  unsigned __int64 m_fileID;
  unsigned int m_fileSize;
  void *m_buffer;
  unsigned int m_bufferSize;
  bdFileMetaData *m_outDescriptors;
  unsigned int m_startByte;
  unsigned int m_endByte;
  unsigned int m_bytesDownloaded;
  void *m_cacheBuffer;
  bool m_loadedFromCache;
  bdDownloadInterceptor *m_downloadHandler;
  bdLobbyErrorCode m_error;
  void (__cdecl *m_dataCallback)(void *, unsigned int, unsigned int, unsigned int);
  void (__cdecl *m_successCallback)(const int, dwCSReadPublisherFileTask *);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 3448 */
struct CacheLbTaskData
{
  int lbReadCount;
  unsigned int lbReadIDs[5];
  bdStatsInfoEx statsResults[5];
  bdStatsInfoEx *statsResultsPtr[5];
};

/* 3449 */
struct __cppobj bdEventLogID : bdTaskResult
{
  unsigned __int64 m_eventLogID;
};

/* 3450 */
struct __cppobj bdEventInfo : bdTaskResult
{
  bool m_isBinary;
  unsigned int m_category;
  unsigned int m_length;
  char *m_eventDesc;
};

/* 3451 */
struct Heap
{
  HeapRegion *parentRegion;
  HeapDirection direction;
  void *topPtr;
  HeapBlockHeader *freeList;
  unsigned __int64 numUsedBlocks;
  unsigned __int64 numFreeBlocks;
  unsigned __int64 usedMem;
  unsigned __int64 freeMem;
  unsigned __int64 usedMemMax;
  unsigned __int64 freeMemMin;
};

/* 3452 */
struct HeapRegion
{
  void *startPtr;
  void *endPtr;
  Heap *heap[2];
};

/* 3454 */
union $99E75AB61B1A64E62F47AA44A3B7AE0D
{
  Heap *parentHeap;
  HeapBlockHeader *nextFreeBlock;
};

/* 3453 */
struct HeapBlockHeader
{
  $99E75AB61B1A64E62F47AA44A3B7AE0D ___u0;
  unsigned __int64 allocSize;
  unsigned int magicId;
  unsigned int padSize;
};

/* 3455 */
struct _FILETIME
{
  unsigned int dwLowDateTime;
  unsigned int dwHighDateTime;
};

/* 3456 */
struct $BD85036DCC0442AA317E9171D0F2179B
{
  char s_b1;
  char s_b2;
  char s_b3;
  char s_b4;
};

/* 3457 */
struct $CC608A129C88F312E26B04B0A6BA5EDC
{
  unsigned __int16 s_w1;
  unsigned __int16 s_w2;
};

/* 3458 */
union $0841393C87B3792EF22D52907180B2EE
{
  $BD85036DCC0442AA317E9171D0F2179B S_un_b;
  $CC608A129C88F312E26B04B0A6BA5EDC S_un_w;
  unsigned int S_addr;
};

/* 3459 */
struct in_addr
{
  $0841393C87B3792EF22D52907180B2EE S_un;
};

/* 3460 */
struct __declspec(align(4)) DSLicenseData
{
  char magic[8];
  unsigned int version;
  _FILETIME keyCreateTime;
  in_addr keyCreateHost;
  int keyLifetimeSeconds;
  unsigned __int64 hashKey;
  char licenseKey[86];
};

/* 3461 */
struct DSLicense
{
  void *hFile;
  char fileName[260];
  __declspec(align(8)) DSLicenseData licenseData;
};

/* 3462 */
struct __declspec(align(4)) _WIN32_FIND_DATAA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  char cFileName[260];
  char cAlternateFileName[14];
};

/* 3463 */
struct _BY_HANDLE_FILE_INFORMATION
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int dwVolumeSerialNumber;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int nNumberOfLinks;
  unsigned int nFileIndexHigh;
  unsigned int nFileIndexLow;
};

/* 3464 */
struct _SYSTEMTIME
{
  unsigned __int16 wYear;
  unsigned __int16 wMonth;
  unsigned __int16 wDayOfWeek;
  unsigned __int16 wDay;
  unsigned __int16 wHour;
  unsigned __int16 wMinute;
  unsigned __int16 wSecond;
  unsigned __int16 wMilliseconds;
};

/* 3465 */
struct OverlappedTaskSet
{
  unsigned int registeredIndex;
  overlappedTask tasks[32];
};

/* 3466 */
struct CompassTurretMedia
{
  Material *enemy;
  Material *enemy_firing;
  Material *friendly;
  Material *friendly_firing;
};

/* 3467 */
struct CompassMedia
{
  Material *self_arrow;
  Material *mlg_hl_arrow;
  Material *friendly_arrow;
  Material *friendly_firing;
  Material *friendly_chatting;
  Material *friendly_yelling;
  Material *party_arrow;
  Material *party_firing;
  Material *party_chatting;
  Material *party_yelling;
  Material *squad_arrow;
  Material *squad_firing;
  Material *enemy_blip[2][3];
  Material *enemy_arrow;
  Material *enemy_arrow_firing;
  Material *enemy_predatormissile;
  Material *friendly_predatormissile;
  CompassTurretMedia turretMedia[2];
  Material *enemy_juggernaut;
  Material *friendly_juggernaut;
};

/* 3468 */
struct PhysCollisionSoundInfo
{
  snd_alias_list_t *sound[31];
  float minMomentum;
  float maxMomentum;
  float minVolume;
  float maxVolume;
  float minPitch;
  float maxPitch;
  PhysPresetScaling volumeType;
  PhysPresetScaling pitchType;
};

/* 3469 */
struct OverheadNamesMedia
{
  Material *enemy;
  Material *friendly;
};

/* 3470 */
struct cgMedia_t
{
  Material *whiteMaterial;
  Material *teamStatusBar;
  Material *balloonMaterial;
  Material *youInKillCamMaterial;
  XModel *killstreakTriggerModel;
  TracerDef *tracerDefault;
  Material *tracerThermalOverrideMat;
  Material *laserMaterial;
  Material *laserLightMaterial;
  Material *lagometerMaterial;
  Material *hintMaterials[166];
  CompassMedia compass[2];
  Material *objectiveMaterials[1];
  Material *damageMaterial;
  Material *damageMaterialStun;
  Material *damageMaterialWhizby;
  Material *mantleHint;
  const char *translatedDisplayName[160];
  const char *translatedModename[160];
  const char *translatedAttachmentDisplayName[96];
  const char *translatedCustom;
  Font_s *smallDevFont;
  Font_s *bigDevFont;
  snd_alias_list_t *landDmgSound;
  snd_alias_list_t *landDmgSoundPlayer;
  snd_alias_list_t *grenadeExplodeSound[31];
  snd_alias_list_t *rocketExplodeSound[31];
  snd_alias_list_t *bulletExplodeSound[31];
  snd_alias_list_t *trophyExplodeSound;
  snd_alias_list_t *bulletHitSmallSound[31];
  snd_alias_list_t *bulletHitLargeSound[31];
  snd_alias_list_t *bulletHitAPSound[31];
  snd_alias_list_t *shotgunHitSound[31];
  snd_alias_list_t *bulletExitSmallSound[31];
  snd_alias_list_t *bulletExitLargeSound[31];
  snd_alias_list_t *bulletExitAPSound[31];
  snd_alias_list_t *shotgunExitSound[31];
  snd_alias_list_t *stepSprintSound[31];
  snd_alias_list_t *stepSprintSoundPlayer[31];
  snd_alias_list_t *stepRunSound[31];
  snd_alias_list_t *stepRunSoundPlayer[31];
  snd_alias_list_t *stepWalkSound[31];
  snd_alias_list_t *stepWalkSoundPlayer[31];
  snd_alias_list_t *landSound[31];
  snd_alias_list_t *landSoundPlayer[31];
  snd_alias_list_t *bulletWhizbyNearLeft[16];
  snd_alias_list_t *bulletWhizbyNearRight[16];
  snd_alias_list_t *bulletWhizbyMediumLeft[16];
  snd_alias_list_t *bulletWhizbyMediumRight[16];
  snd_alias_list_t *bulletWhizbyFarLeft[16];
  snd_alias_list_t *bulletWhizbyFarRight[16];
  snd_alias_list_t *bulletWhizby;
  snd_alias_list_t *slideStartSound[31];
  snd_alias_list_t *slideStartSoundPlayer[31];
  snd_alias_list_t *slideEaseOutSound[31];
  snd_alias_list_t *slideEaseOutSoundPlayer[31];
  snd_alias_list_t *slideLoopSound[31];
  snd_alias_list_t *slideLoopSoundPlayer[31];
  snd_alias_list_t *meleeHit;
  snd_alias_list_t *meleeHitOther;
  snd_alias_list_t *meleeKnifeHit;
  snd_alias_list_t *meleeKnifeHitOther;
  snd_alias_list_t *meleeKnifeHitShield;
  snd_alias_list_t *meleeKnifeHitWorld[31];
  snd_alias_list_t *meleeKnifeStartStand;
  snd_alias_list_t *meleeKnifeStartStandPlayer;
  snd_alias_list_t *meleeKnifeStartCrouch;
  snd_alias_list_t *meleeKnifeStartCrouchPlayer;
  snd_alias_list_t *meleeKnifeHitStand;
  snd_alias_list_t *meleeKnifeHitStandPlayer;
  snd_alias_list_t *meleeKnifeHitCrouch;
  snd_alias_list_t *meleeKnifeHitCrouchPlayer;
  snd_alias_list_t *nightVisionOn;
  snd_alias_list_t *nightVisionOff;
  snd_alias_list_t *playerHeartBeatSound;
  snd_alias_list_t *playerBreathInSound;
  snd_alias_list_t *playerBreathOutSound;
  snd_alias_list_t *playerBreathGaspSound;
  snd_alias_list_t *playerSwapOffhand;
  snd_alias_list_t *playerBreathSprintInhaleSounds[2];
  snd_alias_list_t *playerBreathSprintExhaleSounds[2];
  snd_alias_list_t *playerBreathNoSprintInhaleSounds[2];
  snd_alias_list_t *playerBreathNoSprintExhaleSounds[2];
  PhysCollisionSoundInfo physCollisionSoundInfo[128];
  snd_alias_list_t *uavPing;
  Material *compassping_grenade;
  Material *compassping_explosion;
  Material *compassping_portable_radar_sweep;
  Material *compass_radarline;
  Material *compassping_scrambler_friendly;
  Material *compass_dogtags;
  Material *grenadeIconFrag;
  Material *grenadeIconFlash;
  Material *grenadeIconThrowBack;
  Material *grenadePointer;
  Material *leanReticleHint;
  Material *offscreenObjectivePointer;
  FxImpactTable *fx;
  SurfaceFxTable *surfaceFx;
  FxEffectDef *fxNoBloodFleshHit;
  FxEffectDef *fxKnifeBlood;
  FxEffectDef *fxKnifeNoBlood;
  FxEffectDef *fxRiotShieldImpact;
  FxEffectDef *fxBloodOnRiotshield;
  FxEffectDef *heliDustEffect;
  FxEffectDef *heliWaterEffect;
  Material *nightVisionOverlay;
  Material *hudDpadArrow;
  Material *ammoCounterBullet;
  Material *ammoCounterBeltBullet;
  Material *ammoCounterRifleBullet;
  Material *ammoCounterRocket;
  Material *ammoCounterShotgunShell;
  Material *mapLocationSelectorArrow;
  Material *FOFTargetBox_Hostile;
  Material *FOFTargetBox_HostileVehicle;
  Material *FOFTargetBox_Self;
  Material *objectiveLine;
  OverheadNamesMedia overheadNames[2];
  FxEffectDef *fxs[256];
  FxEffectDef *smokeGrenadeFx;
  FxEffectDef *thermalTeamFx;
  FxEffectDef *fishEyeFx;
  FxEffectDef *odinExplodeLarge;
  FxEffectDef *odinExplodeSmall;
  EquipmentSoundTable *equipmentSoundTable;
};

/* 3472 */
struct TracerInfo
{
  Material *material;
  float clipDist;
  float length;
  float width;
  float screwDist;
  float screwRadius;
  float colors[5][4];
  int isClientEmitter;
};

/* 3471 */
struct localEntity_s
{
  localEntity_s *prev;
  localEntity_s *next;
  leType_t leType;
  trajectory_t pos;
  int endTime;
  TracerInfo tracer;
};

/* 3473 */
struct rdbgWelcomePacket_t
{
  char key[4];
  unsigned int protocolVersion;
};

/* 3474 */
struct $22B49E86152CCDD300B5BD5E797F21CB
{
  char msgBuf[4092];
};

/* 3475 */
struct __declspec(align(8)) TrackType
{
  const char *trackType;
  bool prestige;
};

/* 3476 */
struct Leaderboard
{
  bdLeaderBoardResult<LeaderBoardRow<10>,100> userStats;
  LeaderBoardRow<10> playerStats;
  int playerStatsLeaderboardID;
  LeaderboardDef *lbDef;
  int offset;
  int curIdx;
  bool forceRefresh;
  bool isUpdating;
  bool notSameFilter;
  int lastUpdate;
  int filter;
  int readDelay;
};

/* 3477 */
struct LbGlob
{
  OverlappedTaskSet tasks;
  Leaderboard leaderboard;
  char feederText[163];
  LeaderboardDef *writeLeaderboards[16];
  int writeCount;
  LegacyLeaderBoardRow<10> pastTitleUserStats[1];
};

/* 3478 */
struct LbTaskMask
{
  unsigned int mask;
};

/* 3479 */
struct LbGetColData
{
  bdLeaderBoardResult<LeaderBoardRow<10>,100> *userStats;
  LbColumnDef *lbColDef;
};

/* 3480 */
struct __declspec(align(8)) G_StepSlideMoveParams
{
  float deltaTime;
  float *origin;
  float *velocity;
  Bounds *bounds;
  bool gravity;
  bool hasGround;
  bool zerog;
  bool *inSolid;
  float *groundNormal;
  int passEntityNum;
  int clipMask;
  void (__cdecl *clipVelocityFunc)(const float *, const float *, float *);
  int bumpEntityNum;
};

/* 3481 */
struct OmnvarClientData
{
  OmnvarData omnvars[256];
};

/* 3482 */
struct OmnvarGameData
{
  OmnvarData omnvars[256];
};

/* 3483 */
struct __declspec(align(8)) SpawnVar
{
  bool spawnVarsValid;
  int numSpawnVars;
  unsigned int spawnVarsKey[64];
  char *spawnVarsValue[64];
  int numSpawnVarChars;
  char spawnVarChars[2048];
};

/* 3484 */
struct trigger_info_t
{
  unsigned __int16 entnum;
  unsigned __int16 otherEntnum;
  int useCount;
  int otherUseCount;
};

/* 3485 */
struct com_parse_mark_t
{
  int lines;
  const char *text;
  int ungetToken;
  int backup_lines;
  const char *backup_text;
};

/* 3486 */
struct cached_tag_mat_t
{
  int time;
  int entnum;
  scr_string_t name;
  float tagMat[4][3];
};

/* 3487 */
struct outline_data_t
{
  int refCount;
  char colorIndexForClient[12];
  bool depthEnableForClient[12];
  unsigned int enabledForClientMask;
};

/* 3488 */
struct __declspec(align(8)) level_locals_t
{
  gclient_s *clients;
  OmnvarClientData *clientOmnvars;
  OmnvarGameData *gameOmnvars;
  gentity_s *gentities;
  int num_entities;
  gentity_s *firstFreeEnt;
  gentity_s *lastFreeEnt;
  Turret *turrets;
  sentient_s *sentients;
  int iSearchFrame;
  gagent_s *agents;
  int initializing;
  int clientIsSpawning;
  objective_t objectives[32];
  int maxclients;
  int maxagents;
  int framenum;
  int time;
  int previousTime;
  int frametime;
  int startTime;
  int teamScores[4];
  teammode_t teammode;
  int pingUpdateTime;
  bool teamHasRadar[4];
  bool teamRadarBlocked[4];
  int teamRadarStrength[4];
  int markedForEyesOn;
  int manualNameChange;
  int numConnectedClients;
  int sortedClients[12];
  SpawnVar spawnVar;
  int savepersist;
  EntHandle droppedWeaponCue[32];
  float fFogOpaqueDist;
  float fFogOpaqueDistSqrd;
  int currentPlayerClone;
  int currentAgentClone;
  trigger_info_t pendingTriggerList[256];
  trigger_info_t currentTriggerList[256];
  int pendingTriggerListSize;
  int currentTriggerListSize;
  int finished;
  int bPlayerIgnoreRadiusDamage;
  int bPlayerIgnoreRadiusDamageLatched;
  int currentEntityThink;
  __int64 openScriptIOFileHandles[1];
  char *openScriptIOFileBuffers[1];
  com_parse_mark_t currentScriptIOLineMark[1];
  cached_tag_mat_t cachedTagMat;
  int scriptPrintChannel;
  float compassMapUpperLeft[2];
  float compassMapWorldSize[2];
  float compassNorth[2];
  float pathnodeWorldSize[3];
  Vehicle *vehicles;
  int hudElemLastAssignedSoundID;
  outline_data_t outlineData[32];
};

/* 3489 */
struct scr_entref_t
{
  unsigned __int16 entnum;
  unsigned __int16 classnum;
};

/* 3490 */
struct __declspec(align(8)) BuiltinMethodDef
{
  unsigned int name;
  void (__cdecl *actionFunc)(scr_entref_t);
  int type;
};

/* 3491 */
struct VehicleScriptField
{
  scr_string_t *name;
  unsigned int canonicalString;
  __int64 ofs;
  fieldtype_t type;
  void (__cdecl *setter)(Vehicle *, VehicleScriptField *);
  void (__cdecl *getter)(Vehicle *, VehicleScriptField *);
};

/* 3492 */
struct HeliPathNodeData
{
  bool setAirResistance;
  float airResistance;
  bool setSpeed;
  float speed;
  bool hasAccel;
  float accel;
  bool hasDecel;
  float decel;
  bool hasDelay;
  bool stopNode;
  bool unload;
  bool flagWait;
  bool endOfPath;
  bool setGoalYaw;
  bool goalYawDefined;
  bool angleVehicleDefined;
  float yaw;
  float origin[3];
};

/* 3493 */
struct weaponParms
{
  float forward[3];
  float right[3];
  float up[3];
  float muzzleTrace[3];
  float gunForward[3];
  Weapon weapon;
  bool isAlternate;
  WeaponDef *weapDef;
  WeaponCompleteDef *weapCompleteDef;
};

/* 3494 */
struct __declspec(align(8)) missileFireParms
{
  gentity_s *target;
  float targetPosOrOffset[3];
  float autoDetonateTime;
  bool lockon;
  bool topFire;
};

/* 3495 */
struct __declspec(align(8)) VehicleNodeField
{
  scr_string_t *name;
  unsigned int canonicalString;
  __int64 ofs;
  fieldtype_t type;
};

/* 3496 */
struct SmoothedPathNodeInfo
{
  float perpToBisector[3];
  float distanceToBisector;
  float normalizedBisector[3];
  int straightLine;
  float frontPlane[3];
};

/* 3497 */
struct __declspec(align(4)) VehicleAudioState
{
  float entOrigin[3];
  bool throttle;
  int stateTime;
  int spawnTime;
  int spawnTimeDelay;
  float spawnVolumeScale;
  float inAirPitch;
  VehicleEngineState engineState;
  int engineRampUpTime;
  bool engineRampUpDelay;
  float engineRampUpDelayFrac;
  int engineRampDownTime;
  bool turretMoving;
  int lastImpactTime;
  float lastImpactScale;
  char surfaceType;
};

/* 3498 */
struct VehicleClient
{
  int index;
  int defIndex;
  int entIndex;
  LocalClientNum_t localClientNum;
  int frameTime;
  int time;
  int fireBarrel;
  unsigned int flags;
  float localSpeed[3];
  float rotateSpeed[3];
  float materialTime;
  int playerIndex;
  VehicleAudioState audioState;
};

/* 3499 */
struct PathBlockPlanes
{
  float vNormal[4][2];
  float fDist[4];
  int iPlaneCount;
};

/* 3500 */
struct __declspec(align(8)) NearestNodeInput
{
  const float *vOrigin;
  int traceMask;
  int typeFlags;
  float fMaxDist;
  PathBlockPlanes *blockPlanes;
  Bounds *baseBounds;
  nearestNodeHeightCheck heightCheck;
  int entNum;
  bool bAllowCrouch;
  bool bAllowProne;
  bool bAllowFailedUnuseable;
};

/* 3501 */
struct PathFindInput
{
  path_s *pPath;
  const float *vStartPos;
  const float *vGoalPos;
  pathnode_t *pNodeFrom;
  pathnode_t *pNodeTo;
  int bAllowNegotiationLinks;
  int bAllowJumpLinks;
  int bAllowLadderNodes;
  int useChokePoints;
  int searchEntNum;
  float badplacePercent;
  int avoidExpStances;
  pathnode_t *avoidExpPosNode[5];
  float avoidExpPosDir[5][3];
  float avoidExpPosDot[5];
  float avoidExpPosPercent[5];
  float avoidExpPosRadiusSq[5];
  float avoidExpSkyPercent;
  float avoidExpGenPercent;
  float avoidExpLOSPercent;
  float avoidExpTrafficPercent;
  unsigned __int16 *pathZoneCosts;
  int pathZoneCostsCount;
  float pathSpreadPercent;
  float avoidLocationPos[3];
  float avoidLocationPercent;
  float avoidLocationMaxDist;
  float traversalCostPercent;
};

/* 3502 */
struct VehicleCameraParams
{
  float angles[3];
  float offset[3];
  float radius;
  float speedInfluence;
  float pitchTurnRate;
  float pitchClamp;
  float yawTurnRate;
  float yawClamp;
  VehCamZOffsetMode zOffsetMode;
};

/* 3503 */
struct __declspec(align(4)) VehicleCamera
{
  VehCamMode mode;
  float angles[3];
  float offset[3];
  float userAngles[3];
  float vehicleAngles[3];
  float radius;
  float fov;
  float fovOffset;
  bool initialized;
};

/* 3504 */
struct entityHandler_t
{
  void (__cdecl *think)(gentity_s *);
  void (__cdecl *reached)(gentity_s *);
  void (__cdecl *blocked)(gentity_s *, gentity_s *);
  void (__cdecl *touch)(gentity_s *, gentity_s *, int);
  void (__cdecl *use)(gentity_s *, gentity_s *, gentity_s *);
  void (__cdecl *pain)(gentity_s *, gentity_s *, int, const float *, const int, const float *, hitLocation_t, Weapon, bool);
  void (__cdecl *die)(gentity_s *, gentity_s *, gentity_s *, int, int, Weapon, bool, const float *, hitLocation_t, int);
  void (__cdecl *controller)(gentity_s *, int *);
  meansOfDeath_t methodOfDeath;
  meansOfDeath_t splashMethodOfDeath;
};

/* 3505 */
struct VehicleHandler
{
  void (__cdecl *trace)(trace_t *, const float *, const float *, Bounds *, int, int, TraceData *);
  VehicleDef *(__cdecl *vehicle)(playerState_s *);
  int (__cdecl *bone)(LocalClientNum_t, int, VehicleBone);
  int (__cdecl *world_matrix)(LocalClientNum_t, int, int, float (*)[3]);
};

/* 3506 */
struct __declspec(align(8)) saveField_t
{
  __int64 ofs;
  saveFieldtype_t type;
};

/* 3507 */
struct VehicleLocalPhysics
{
  trace_t groundTrace;
  int hasGround;
  int onGround;
};

/* 3508 */
struct VehiclePhysicsBackup
{
  VehiclePathPos pathPos;
  vehicle_physic_t phys;
};

/* 3509 */
struct gameTypeScript_t
{
  char pszScript[64];
  char pszName[64];
  int bTeamBased;
};

/* 3510 */
struct $854D37C18392E6EB2091D9CC591B46CE
{
  int main;
  int startupgametype;
  int playerconnect;
  int playerdisconnect;
  int playerdamage;
  int playerkilled;
  int vehicleDamage;
  int votecalled;
  int playervote;
  int codeendgame;
  int playerlaststand;
  int playermigrated;
  int hostmigration;
  volatile int updateGameTypeList;
  int iNumGameTypes;
  gameTypeScript_t list[32];
};

/* 3511 */
struct __declspec(align(8)) corpseInfo_t
{
  XAnimTree *tree;
  int entnum;
  int time;
  characterInfo_t ci;
  bool falling;
  bool skippedRagdoll;
};

/* 3512 */
struct scr_data_t
{
  int levelscript;
  int gametypescript;
  int botMain;
  int botGameTypeMain;
  int agentMain;
  int agentGameTypeMain;
  int agentAdded;
  int agentDamaged;
  int agentKilled;
  int leaderDialog;
  int scriptedAgentOnEnterState;
  int scriptedAgentOnDeactivate;
  $854D37C18392E6EB2091D9CC591B46CE gametype;
  int delete_;
  int initstructs;
  int createstruct;
  corpseInfo_t playerCorpseInfo[8];
  corpseInfo_t agentCorpseInfo[8];
};

/* 3513 */
struct __cppobj dwQoSMultiProbeListener : bdQoSProbeListener
{
  bdQoSRemoteAddr m_probeAddrs[50];
  bool m_probeSucceeded[50];
  unsigned int m_numProbes;
  bdQoSProbeInfo m_successes[50];
  bdSecurityID m_successIDs[50];
  unsigned int m_numSuccesses;
  unsigned int m_numFailures;
};

/* 3514 */
struct IndexedAddrHandle
{
  bdReference<bdAddrHandle> m_addrHandle;
  unsigned int m_priorityValue;
  int m_destroyTime;
};

/* 3515 */
struct MD4_CTX
{
  unsigned int state[4];
  unsigned int count[2];
  char buffer[64];
};

/* 3516 */
struct Joint
{
  __int64 joint;
  __int64 joint2;
};

/* 3517 */
struct BoneOrientation
{
  float origin[3];
  int boneFlags;
  float orientation[4];
};

/* 3518 */
struct __declspec(align(8)) Bone
{
  int parentBone;
  char animBones[2];
  __int64 rigidBody;
  float length;
};

/* 3519 */
struct __declspec(align(4)) LerpBone
{
  int parentBone;
  char animBone;
};

/* 3520 */
struct RagdollBodyState
{
  BodyState state;
  int msec;
  int frames;
  int velCaptureMsec;
  float prevCentroidPosition[3];
  float centroidPosition[3];
  float centroidVelocityEstimate[3];
  int curOrientationBuffer;
  BoneOrientation boneOrientations[2][26];
  BoneOrientation lerpBoneOffsets[9];
  Bone bones[17];
  LerpBone lerpBones[9];
  int hitLocation;
  float impactVector[3];
};

/* 3521 */
struct RagdollBody
{
  int references;
  int ragdollDef;
  int dobj;
  LocalClientNum_t localClientNum;
  bool hasBeenShared;
  int numBones;
  int numLerpBones;
  int numJoints;
  Joint joints[16];
  RagdollBodyState state;
};

/* 3522 */
struct StateEnt
{
  bool (__cdecl *enterFunc)(RagdollBody *, BodyState, BodyState);
  bool (__cdecl *exitFunc)(RagdollBody *, BodyState, BodyState);
  void (__cdecl *updateFunc)(RagdollBody *);
};

/* 3523 */
struct BoneDef
{
  char animBoneTextNames[2][20];
  scr_string_t animBoneNames[2];
  float radius;
  bool mirror;
  float percent;
  float mass;
  float friction;
  int parentBone;
  float parentBoneDistSq;
  PhysicsGeomType geomType;
  float additionalLength;
};

/* 3524 */
struct BaseLerpBoneDef
{
  char animBoneTextName[20];
  scr_string_t animBoneName;
  unsigned int parentBoneIndex;
  int lerpTime;
};

/* 3525 */
struct JointDef
{
  char bone;
  JointType type;
  int numLimitAxes;
  float limitAxes[3][3];
  float minAngles[3];
  float maxAngles[3];
  float axisFriction[3];
};

/* 3526 */
struct SelfPairDef
{
  char bones[2];
};

/* 3527 */
struct RagdollDef
{
  bool inUse;
  bool bound;
  int numBones;
  BoneDef boneDefs[17];
  int numBaseLerpBones;
  BaseLerpBoneDef baseLerpBoneDefs[9];
  int numJoints;
  JointDef jointDefs[16];
  int numSelfPairs;
  SelfPairDef selfPairDefs[39];
  int hitLocMapping[22];
};

/* 3528 */
struct PhysContact
{
  float pos[3];
  float normal[3];
  float depth;
  float friction;
  float bounce;
};

/* 3529 */
struct __declspec(align(8)) $75B003D47B958F33E43466466E58AE3E
{
  const char *name;
  float axis[3];
};

/* 3530 */
struct dxJoint::Info1
{
  int m;
  int nub;
};

/* 3531 */
struct dxJoint::Info2
{
  float fps;
  float erp;
  float *J1l;
  float *J1a;
  float *J2l;
  float *J2a;
  int rowskip;
  float *c;
  float *cfm;
  float *lo;
  float *hi;
  unsigned int *oneSided;
  int *findex;
};

/* 3532 */
struct __declspec(align(8)) ShouldNotRemoveJoint
{
  dxBody *const *body;
  int bodyCount;
};

/* 3533 */
struct __cppobj __declspec(align(16)) dxUserGeom : dxGeom
{
  char user_data[24];
};

/* 3534 */
struct ConstraintForce
{
  float linear[3];
  float padding0;
  float angular[3];
  float padding1;
};

/* 3535 */
struct odeGlob_t
{
  dxUserGeom worldGeom;
};

/* 3536 */
struct dSurfaceParameters
{
  int mode;
  float mu;
  float mu2;
  float bounce;
  float bounce_vel;
  float soft_erp;
  float soft_cfm;
  float motion1;
  float motion2;
  float slip1;
  float slip2;
};

/* 3537 */
struct dContactGeom
{
  float pos[3];
  float normal[3];
  float depth;
  int surfFlags;
};

/* 3538 */
struct dContact
{
  dSurfaceParameters surface;
  dContactGeom geom;
  float fdir1[4];
};

/* 3539 */
struct __cppobj dxJointContact : dxJoint
{
  int the_m;
  dContact contact;
};

/* 3540 */
struct dxJointGroup
{
  unsigned int useCount;
  unsigned int max;
  dxJointContact *joints;
};

/* 3541 */
struct Jitter
{
  float origin[3];
  float innerRadiusSq;
  float outerRadiusSq;
  float innerRadius;
  float outerRadius;
  float minDisplacement;
  float maxDisplacement;
};

/* 3542 */
struct PhysWorldData
{
  int timeLastSnapshot;
  int timeLastUpdate;
  float timeNowLerpFrac;
  void (__cdecl *collisionCallback)();
  void (__cdecl *postFrameCallback)();
  void (__cdecl *impactCallback)(__int64, const float *, const float *, float, bool, int);
  void (__cdecl *glassCallback)(const float *, const float *);
  void (__cdecl *onCollisionCallback)(__int64, __int64);
  int numJitterRegions;
  Jitter jitterRegions[5];
  float gravityDirection[3];
  int clipMask;
  bool useContactCentroids;
  bool doInterBodyCollisions;
  float contactSurfaceLevel;
  float frictionScale;
  float constraintForceMixing;
  float errorReduction;
  float constraintForceMixingRagdoll;
  float errorReductionRagdoll;
  float constraintForceMixingVehicle;
  float errorReductionVehicle;
  float constraintForceMixingVehicleSoft;
  float errorReductionVehicleSoft;
  unsigned int randSeed;
};

/* 3543 */
struct __cppobj dxSimpleSpace : dxSpace
{
};

/* 3544 */
struct dxJointLimitMotor
{
  float vel;
  float fmax;
  float lostop;
  float histop;
  float fudge_factor;
  float normal_cfm;
  float stop_erp;
  float stop_cfm;
  float bounce;
  int limit;
  float limit_err;
};

/* 3545 */
struct __cppobj __declspec(align(8)) dxJointHinge : dxJoint
{
  float anchor1[4];
  float anchor2[4];
  float axis1[4];
  float axis2[4];
  float qrel[4];
  dxJointLimitMotor limot;
};

/* 3546 */
struct PhysStaticArray<dxJointHinge,192>
{
  int freeEntry;
  dxJointHinge entries[192];
};

/* 3547 */
struct __cppobj dxJointBall : dxJoint
{
  float anchor1[4];
  float anchor2[4];
};

/* 3548 */
struct PhysStaticArray<dxJointBall,160>
{
  int freeEntry;
  dxJointBall entries[160];
};

/* 3549 */
struct __cppobj dxJointAMotor : dxJoint
{
  int num;
  int mode;
  int rel[3];
  float axis[3][4];
  dxJointLimitMotor limot[3];
  float reference1[4];
  float reference2[4];
};

/* 3550 */
struct PhysStaticArray<dxJointAMotor,160>
{
  int freeEntry;
  dxJointAMotor entries[160];
};

/* 3551 */
struct PhysGlob
{
  dxWorld world[5];
  PhysWorldData worldData[5];
  dxSimpleSpace space[5];
  dxJointContact contactBufferDynents[400];
  dxJointContact contactBufferFX[1000];
  dxJointContact contactBufferRagdoll[700];
  dxJointContact contactBufferVehicle[100];
  dxJointContact contactBufferWeapon[100];
  dxGeom *worldGeom;
  int pad[3];
  PhysStaticArray<dxJointHinge,192> hingeArray;
  PhysStaticArray<dxJointBall,160> ballArray;
  PhysStaticArray<dxJointAMotor,160> aMotorArray;
};

/* 3552 */
struct __cppobj __declspec(align(8)) dxJointSlider : dxJoint
{
  float axis1[4];
  float qrel[4];
  float offset[4];
  dxJointLimitMotor limot;
};

/* 3553 */
struct __cppobj dxJointUniversal : dxJoint
{
  float anchor1[4];
  float anchor2[4];
  float axis1[4];
  float axis2[4];
  float qrel1[4];
  float qrel2[4];
  dxJointLimitMotor limot1;
  dxJointLimitMotor limot2;
};

/* 3554 */
struct __cppobj dxJointFixed : dxJoint
{
  float qrel[4];
  float offset[4];
};

/* 3555 */
struct __cppobj dxJointNull : dxJoint
{
};

/* 3556 */
struct collData_t
{
  float mHullBoxRot[12];
  float vHullBoxPos[4];
  float vBoxHalfSize[4];
  float vBestNormal[4];
  float fBestDepth;
  int iBestAxis;
  float triangleEdge0[4];
  float triangleEdge1[4];
  float triangleEdge2[4];
  float triangleNormal[4];
  int iFlags;
  dContactGeom *ContactGeoms;
  int iStride;
  dxGeom *Geom1;
  dxGeom *Geom2;
  int ctContacts;
  const float *bodyCenter;
};

/* 3557 */
struct __cppobj __declspec(align(16)) dxGeomTransform : dxGeom
{
  dxGeom *obj;
  int cleanup;
  int infomode;
  float localR[12];
  float localPos[3];
  float finalR[12];
  float finalPos[3];
};

/* 3558 */
struct __cppobj dxBox : dxGeom
{
  float side[4];
};

/* 3559 */
struct __declspec(align(8)) dGeomClass
{
  unsigned int bytes;
  int (__cdecl *(__cdecl *collider)(int))(dxGeom *, dxGeom *, int, dContactGeom *, int);
  void (__cdecl *aabb)(dxGeom *, float *);
  int (__cdecl *aabb_test)(dxGeom *, dxGeom *, float *);
  bool isPlaceable;
};

/* 3560 */
struct __declspec(align(8)) dColliderEntry
{
  int (__cdecl *fn)(dxGeom *, dxGeom *, int, dContactGeom *, int);
  int reverse;
};

/* 3561 */
struct __declspec(align(8)) SpaceGeomColliderData
{
  int flags;
  dContactGeom *contact;
  int skip;
};

/* 3562 */
struct __declspec(align(8)) GeomStateGlass
{
  FxGlassSystem *glassSys;
  unsigned int pieceIndex;
  float halfThickness;
  unsigned int convexHullMask;
};

/* 3563 */
struct TraceCheckCount
{
  int global;
  int *partitions;
};

/* 3564 */
struct TraceThreadInfo
{
  trace_t *results;
  TraceCheckCount checkcount;
};

/* 3565 */
union __declspec(align(8)) $4B234FD632E4D6D34DA28E0350B0DF6F
{
  float sideExtents[3];
  cmodel_t *brushModel;
  BrushWrapper *brushWrapper;
  GeomStateGlass *glass;
};

/* 3566 */
struct __declspec(align(8)) objInfo
{
  int clipMask;
  int cylDirection;
  TraceThreadInfo threadInfo;
  Bounds bounds;
  float radius;
  PhysicsGeomType type;
  float pos[3];
  float R[3][3];
  float RTransposed[3][3];
  $4B234FD632E4D6D34DA28E0350B0DF6F u;
  float bodyCenter[3];
  bool isNarrow;
  PhysWorld worldIndex;
};

/* 3567 */
struct __declspec(align(8)) Results
{
  dContactGeom *contacts;
  int contactCount;
  int maxContacts;
  int stride;
};

/* 3568 */
struct InputOutput
{
  objInfo *Input;
  Results *Output;
};

/* 3569 */
struct leafList_t
{
  int count;
  int maxcount;
  int overflowed;
  unsigned __int16 *list;
  Bounds bounds;
};

/* 3570 */
union $88B0170600E8C765E9039EDB32AD0895
{
  unsigned __int16 brushModel;
  PhysCollmap *collmap;
};

/* 3571 */
struct __declspec(align(8)) BrushInfo
{
  $88B0170600E8C765E9039EDB32AD0895 u;
  float centerOfMass[3];
};

/* 3572 */
struct __declspec(align(8)) PhysObjUserData
{
  float translation[3];
  dxBody *body;
  float savedPos[3];
  float savedRot[3][3];
  float lastTunnelTracePos[3];
  int tunnelTraceFailCount;
  int sndClass;
  float friction;
  float bounce;
  physStuckState_t state;
  float contactCentroid[3];
  unsigned int flags;
  int externalId;
};

/* 3573 */
struct GeomStateCylinder
{
  int direction;
  float radius;
  float halfHeight;
};

/* 3574 */
struct Capsule
{
  float p0[3];
  float p1[3];
  float center[3];
  float axis[3];
  float radius;
  float sqRadius;
  float halfLength;
  float halfHeight;
};

/* 3575 */
struct pooldata_t
{
  char *bufferStart;
  int itemSize;
  int bufferSize;
  __int16 *freeList;
  int freeIndex;
  int activeCount;
};

/* 3576 */
struct PhysVehicleGlob
{
  PhysVehicle physVehicles[8];
  __int16 physVehiclesFree[8];
  pooldata_t physVehiclePool;
};

/* 3577 */
struct PhysGeneralPool
{
  dxBody bodies[504];
  char geoms[516096];
  PhysObjUserData userData[504];
  __int16 bodiesFree[504];
  __int16 geomsFree[2016];
  __int16 userDataFree[504];
  pooldata_t bodyPool;
  pooldata_t geomPool;
  pooldata_t userDataPool;
};

/* 3578 */
struct PhysVehiclePool
{
  dxBody bodies[8];
  char geoms[2048];
  PhysObjUserData userData[8];
  __int16 bodiesFree[8];
  __int16 geomsFree[8];
  __int16 userDataFree[8];
  pooldata_t bodyPool;
  pooldata_t geomPool;
  pooldata_t userDataPool;
};

/* 3579 */
struct FxGlassInertiaTensor
{
  float xx;
  float yy;
  float zz;
  float xy;
};

/* 3580 */
struct GeomStateBox
{
  float extent[3];
};

/* 3581 */
struct GeomStateBrush
{
  $88B0170600E8C765E9039EDB32AD0895 u;
  float momentsOfInertia[3];
  float productsOfInertia[3];
};

/* 3582 */
union $59DCCC5252FFFC2FEA313B295E473D80
{
  GeomStateCylinder cylinderState;
  GeomStateBox boxState;
  GeomStateBrush brushState;
  GeomStateGlass glassState;
};

/* 3583 */
struct GeomState
{
  PhysicsGeomType type;
  bool isOriented;
  float orientation[3][3];
  $59DCCC5252FFFC2FEA313B295E473D80 u;
};

/* 3584 */
struct FrameInfo
{
  int worldIndex;
  float timestep;
};

/* 3585 */
struct ContactList
{
  dContactGeom contacts[128];
  int contactCount;
};

/* 3586 */
struct __declspec(align(8)) Poly
{
  float (*pts)[3];
  unsigned int ptCount;
};

/* 3587 */
struct SeparatingAxisInfo
{
  float bestDepth;
  unsigned int bestAxis;
  float bestContactNormal[3];
};

/* 3588 */
struct LocalContactData
{
  float pos[3];
  float normal[3];
  float depth;
  int surfFlags;
  int inUse;
};

/* 3589 */
struct LocalContactBuffer
{
  LocalContactData contacts[32];
  int numContacts;
};

/* 3590 */
struct AxisTestResults
{
  float bestDepth;
  float bestCenter;
  int bestAxis;
  float bestRt;
  float normal[3];
};

/* 3591 */
struct BrushBrushData
{
  Bounds *fixedBounds;
  cbrush_t *fixedBrush;
  objInfo *input;
  Results *results;
};

/* 3592 */
struct BrushTrimeshData
{
  const unsigned __int16 *indices;
  const float (*verts)[3];
  int triCount;
  objInfo *input;
  int surfaceFlags;
  Results *results;
};

/* 3595 */
union $3FED14670831426F78C1F126725788C0
{
  unsigned __int16 freq;
  unsigned __int16 code;
};

/* 3596 */
union $2467CA9704E0472D4CCF1296A763D23A
{
  unsigned __int16 dad;
  unsigned __int16 len;
};

/* 3597 */
struct ct_data_s
{
  $3FED14670831426F78C1F126725788C0 fc;
  $2467CA9704E0472D4CCF1296A763D23A dl;
};

/* 3599 */
struct tree_desc_s
{
  ct_data_s *dyn_tree;
  int max_code;
  static_tree_desc_s *stat_desc;
};

/* 3593 */
struct internal_state
{
  z_stream_s *strm;
  int status;
  char *pending_buf;
  unsigned int pending_buf_size;
  char *pending_out;
  int pending;
  int noheader;
  char data_type;
  char method;
  int last_flush;
  unsigned int w_size;
  unsigned int w_bits;
  unsigned int w_mask;
  char *window;
  unsigned int window_size;
  unsigned __int16 *prev;
  unsigned __int16 *head;
  unsigned int ins_h;
  unsigned int hash_size;
  unsigned int hash_bits;
  unsigned int hash_mask;
  unsigned int hash_shift;
  int block_start;
  unsigned int match_length;
  unsigned int prev_match;
  int match_available;
  unsigned int strstart;
  unsigned int match_start;
  unsigned int lookahead;
  unsigned int prev_length;
  unsigned int max_chain_length;
  unsigned int max_lazy_match;
  int level;
  int strategy;
  unsigned int good_match;
  int nice_match;
  ct_data_s dyn_ltree[573];
  ct_data_s dyn_dtree[61];
  ct_data_s bl_tree[39];
  tree_desc_s l_desc;
  tree_desc_s d_desc;
  tree_desc_s bl_desc;
  unsigned __int16 bl_count[16];
  int heap[573];
  int heap_len;
  int heap_max;
  char depth[573];
  char *l_buf;
  unsigned int lit_bufsize;
  unsigned int last_lit;
  unsigned __int16 *d_buf;
  unsigned int opt_len;
  unsigned int static_len;
  unsigned int matches;
  int last_eob_len;
  unsigned __int16 bi_buf;
  int bi_valid;
};

/* 3594 */
struct z_stream_s
{
  char *next_in;
  unsigned int avail_in;
  unsigned int total_in;
  char *next_out;
  unsigned int avail_out;
  unsigned int total_out;
  char *msg;
  internal_state *state;
  char *(__cdecl *zalloc)(char *, unsigned int, unsigned int);
  void (__cdecl *zfree)(char *, char *);
  char *opaque;
  int data_type;
  unsigned int adler;
};

/* 3598 */
struct static_tree_desc_s
{
  int dummy;
};

/* 3600 */
struct unz_global_info_s
{
  unsigned int number_entry;
  unsigned int size_comment;
};

/* 3601 */
struct tm_unz_s
{
  unsigned int tm_sec;
  unsigned int tm_min;
  unsigned int tm_hour;
  unsigned int tm_mday;
  unsigned int tm_mon;
  unsigned int tm_year;
};

/* 3602 */
struct unz_file_info_s
{
  unsigned int version;
  unsigned int version_needed;
  unsigned int flag;
  unsigned int compression_method;
  unsigned int dosDate;
  unsigned int crc;
  unsigned int compressed_size;
  unsigned int uncompressed_size;
  unsigned int size_filename;
  unsigned int size_file_extra;
  unsigned int size_file_comment;
  unsigned int disk_num_start;
  unsigned int internal_fa;
  unsigned int external_fa;
  tm_unz_s tmu_date;
};

/* 3603 */
struct unz_file_info_internal_s
{
  unsigned int offset_curfile;
};

/* 3604 */
struct file_in_zip_read_info_s
{
  char *read_buffer;
  z_stream_s stream;
  unsigned int pos_in_zipfile;
  unsigned int stream_initialised;
  unsigned int offset_local_extrafield;
  unsigned int size_local_extrafield;
  unsigned int pos_local_extrafield;
  unsigned int crc32;
  unsigned int crc32_wait;
  unsigned int rest_read_compressed;
  unsigned int rest_read_uncompressed;
  _iobuf *file;
  unsigned int compression_method;
  unsigned int byte_before_the_zipfile;
};

/* 3605 */
struct unz_s
{
  _iobuf *file;
  unz_global_info_s gi;
  unsigned int byte_before_the_zipfile;
  unsigned int num_file;
  unsigned int pos_in_central_dir;
  unsigned int current_file_ok;
  unsigned int central_pos;
  unsigned int size_central_dir;
  unsigned int offset_central_dir;
  unz_file_info_s cur_file_info;
  unz_file_info_internal_s cur_file_info_internal;
  file_in_zip_read_info_s *pfile_in_zip_read;
};

/* 3606 */
struct inflate_huft_s
{
  $862C355B00F531366BDF85A7C1D16AB7 word;
  unsigned int base;
};

/* 3607 */
struct $445CEDBF9B00B58E15D4044D621CBF23
{
  unsigned int table;
  unsigned int index;
  unsigned int *blens;
  unsigned int bb;
  inflate_huft_s *tb;
};

/* 3608 */
struct inflate_codes_state
{
  int dummy;
};

/* 3609 */
struct $7DE16734CDE8789FA8ADFAFBAB352CA7
{
  inflate_codes_state *codes;
};

/* 3610 */
union $58167D71E42C80CC246D1E327B30C577
{
  unsigned int left;
  $445CEDBF9B00B58E15D4044D621CBF23 trees;
  $7DE16734CDE8789FA8ADFAFBAB352CA7 decode;
};

/* 3611 */
struct __declspec(align(8)) inflate_blocks_state
{
  inflate_block_mode mode;
  $58167D71E42C80CC246D1E327B30C577 sub;
  unsigned int last;
  unsigned int bitk;
  unsigned int bitb;
  inflate_huft_s *hufts;
  char *window;
  char *end;
  char *read;
  char *write;
  unsigned int (__cdecl *checkfn)(unsigned int, const char *, unsigned int);
  unsigned int check;
};

/* 3612 */
struct __declspec(align(8)) $C75AF76428E972562095D6371AB77BDA
{
  inflate_huft_s *tree;
  unsigned int need;
};

/* 3613 */
union $2FA7218D6F159B54C7CF1FA1603943FF
{
  $C75AF76428E972562095D6371AB77BDA code;
  unsigned int lit;
  $A30D36EE59FB41C132336408835C9B9C copy;
};

/* 3614 */
struct config_s
{
  unsigned __int16 good_length;
  unsigned __int16 max_lazy;
  unsigned __int16 nice_length;
  unsigned __int16 max_chain;
  block_state (__cdecl *func)(internal_state *, int);
};

/* 3615 */
struct xtrace_t
{
  float normal[3];
  float fraction;
};

/* 3616 */
struct QueueElement
{
  unsigned int beginIndex;
  unsigned int count;
};

/* 3617 */
struct XSurfaceGetTriCandidatesLocals
{
  int mins[3];
  int maxs[3];
  XSurfaceCollisionTree *tree;
  const unsigned __int16 *inIndices;
  GfxVertexUnion0 inVertices0;
  bool (__cdecl *visitorFunc)(void *, TriangleVisitorVertex *);
  void *visitorContext;
  unsigned int surfaceFlags;
  unsigned int vert0Size;
  unsigned int nodeQueueBegin;
  unsigned int nodeQueueEnd;
  unsigned int leafQueueBegin;
  unsigned int leafQueueEnd;
  unsigned int triangleQueueBegin;
  unsigned int triangleQueueEnd;
  unsigned int vertexQueueBegin;
  unsigned int vertexQueueEnd;
  QueueElement nodeQueue[256];
  QueueElement leafQueue[4];
  QueueElement triangleQueue[4];
  unsigned __int16 vertexQueue[4][3];
};

/* 3618 */
struct XSurfaceTraceLineData
{
  __m128 startVec;
  __m128 deltaVec;
  __m128 fraction;
  __m128 normalScaledByAreaX2;
};

/* 3619 */
struct VariableStackBuffer
{
  const char *pos;
  unsigned __int16 size;
  unsigned __int16 bufLen;
  unsigned __int16 localId;
  char time;
  char buf[1];
};

/* 3620 */
union VariableUnion
{
  int intValue;
  unsigned int uintValue;
  float floatValue;
  unsigned int stringValue;
  const float *vectorValue;
  const char *codePosValue;
  unsigned int pointerValue;
  VariableStackBuffer *stackValue;
  unsigned int entityOffset;
};

/* 3621 */
struct __declspec(align(8)) VariableValue
{
  VariableUnion u;
  int type;
};

/* 3622 */
struct __declspec(align(8)) HunkUser
{
  HunkUser *current;
  HunkUser *next;
  unsigned __int64 maxSize;
  unsigned __int64 end;
  unsigned __int64 pos;
  const char *name;
  bool fixed;
  int type;
  int pad[2];
  char buf[1];
};

/* 3623 */
struct scrVarPub_t
{
  const char *fieldBuffer;
  bool evaluate;
  unsigned int time;
  unsigned int timeArrayId;
  unsigned int pauseArrayId;
  unsigned int notifyArrayId;
  unsigned int objectStackId;
  unsigned int levelId;
  unsigned int gameId;
  unsigned int animId;
  unsigned int freeEntList;
  unsigned int tempVariable;
  unsigned int numScriptValues[2];
  bool bInited;
  bool abort;
  unsigned __int16 savecount;
  unsigned __int16 savecountMark;
  unsigned int entId;
  unsigned int entFieldName;
  unsigned int checksum;
  HunkUser *programHunkUser;
  HunkUser *canonicalStringHunkUser;
  const char *programBuffer;
  unsigned __int16 saveIdMap[36864];
  unsigned __int16 saveIdMapRev[36864];
};

/* 3624 */
struct IKTagTableType
{
  IK_TAG_PRIORITIES priority;
  scr_string_t *tagName;
  int (__cdecl *checkWeaponCallback)(Weapon);
};

/* 3625 */
struct __declspec(align(8)) XAnimIKSettings
{
  __m128 cosineMaxHingeAngle;
  __m128 cosineMinHingeAngle;
  const char *typeName;
  scr_string_t *firstBoneName;
  scr_string_t *secondBoneName;
  scr_string_t *thirdBoneName;
  scr_string_t *targetBoneName;
  int rotateToTarget;
  scr_string_t blendInStartNotetrack;
  scr_string_t blendInEndNotetrack;
  scr_string_t blendOutStartNotetrack;
  scr_string_t blendOutEndNotetrack;
};

/* 3626 */
struct bitarray<192>
{
  int array[6];
};

/* 3627 */
struct XAnimIKDataItem
{
  float weight;
  int allBonesFound;
  unsigned int childBones[6];
  unsigned int secondJointChildBones[6];
  unsigned int thirdJointChildBones[6];
  unsigned int firstBoneIndex;
  unsigned int secondBoneIndex;
  unsigned int thirdBoneIndex;
  unsigned int targetBoneIndex;
};

/* 3628 */
struct XAnimIKData
{
  XAnimIKDataItem data[1];
  XAnimIKSettings *settingsArray;
};

/* 3629 */
struct __declspec(align(4)) XAnimToXModel
{
  bitarray<192> partBits;
  char boneCount;
  char boneIndex[192];
};

/* 3630 */
struct XAnimTime
{
  float time;
  float frameFrac;
  int frameIndex;
};

/* 3631 */
struct XAnimCalcAnimInfo
{
  DObjAnimMat rotTransArray[1152];
  bitarray<192> animPartBits;
  bitarray<192> ignorePartBits;
};

/* 3632 */
struct XAnimNotify_s
{
  const char *name;
  unsigned int type;
  float timeFrac;
};

/* 3633 */
struct XAnimSimpleTree_s
{
  XAnimTree tree;
  XAnim_s anim;
};

/* 3634 */
struct XAnimRotPos
{
  float rot[4];
  float posWeight;
  float pos[3];
};

/* 3635 */
struct __declspec(align(4)) XModelNameMap
{
  scr_string_t name;
  unsigned __int16 index;
};

/* 3636 */
struct XAnimDeltaInfo
{
  bool bClear;
  bool bNormQuat;
  bool bAbs;
  bool bUseGoalWeight;
};

/* 3637 */
struct __declspec(align(8)) DSkelRecord
{
  DSkel skel;
  int numBones;
};

/* 3638 */
struct __declspec(align(4)) DObjTrace_s
{
  float fraction;
  int surfaceflags;
  float normal[3];
  unsigned __int16 modelIndex;
  scr_string_t partName;
  unsigned __int16 partGroup;
};

/* 3639 */
struct SavedDObjModel
{
  scr_string_t boneName;
};

/* 3640 */
struct SavedDObj
{
  SavedDObjModel dobjModels[32];
  XModel **models;
  int locked;
  unsigned int ignoreCollision;
  unsigned __int16 numModels;
  unsigned __int16 entnum;
  XAnimTree *tree;
  unsigned int hidePartBits[6];
};

/* 3641 */
struct PyramidDescriptor
{
  int pyramidLengths[32];
  int level;
  int lowPassLength;
  int highPassLength;
};

/* 3642 */
struct SimplePlaneIntersection
{
  float xyz[3];
  int planeIndex[3];
};

/* 3643 */
struct adjacencyWinding_t
{
  int numsides;
  int sides[12];
};

/* 3644 */
struct search_node_s
{
  SimplePlaneIntersection *edge;
  int plane;
  int depth;
  search_node_s *prevNode;
};

/* 3645 */
struct tagSTICKYKEYS
{
  unsigned int cbSize;
  unsigned int dwFlags;
};

/* 3646 */
struct tagTOGGLEKEYS
{
  unsigned int cbSize;
  unsigned int dwFlags;
};

/* 3647 */
struct tagFILTERKEYS
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iWaitMSec;
  unsigned int iDelayMSec;
  unsigned int iRepeatMSec;
  unsigned int iBounceMSec;
};

/* 3648 */
struct __cppobj IDirectSoundCaptureBuffer : IUnknown
{
};

/* 3649 */
struct __cppobj IDirectSoundBuffer : IUnknown
{
};

/* 3650 */
struct __declspec(align(4)) dsound_sample_t
{
  IDirectSoundCaptureBuffer *DSCB;
  IDirectSoundBuffer *DSB;
  unsigned int dwBufferSize;
  unsigned int dwCaptureOffset;
  unsigned int currentOffset;
  unsigned int lastOffset;
  unsigned int currentBufferLength;
  int stopPosition;
  unsigned int lastPlayPos;
  int bytesBuffered;
  int mode;
  int frequency;
  int volume;
  int pan;
  int channels;
  bool playing;
  int channel;
  char playMode;
};

/* 3651 */
struct WaveInLineInfo
{
  int isValid;
  unsigned int mixerID;
  unsigned int dstWaveInLineID;
  int oldRecLevel;
  int oldMuteState;
};

/* 3652 */
struct __cppobj IDirectSound : IUnknown
{
};

/* 3653 */
struct __cppobj IDirectSoundCapture : IUnknown
{
};

/* 3654 */
struct _DSCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwMinSecondarySampleRate;
  unsigned int dwMaxSecondarySampleRate;
  unsigned int dwPrimaryBuffers;
  unsigned int dwMaxHwMixingAllBuffers;
  unsigned int dwMaxHwMixingStaticBuffers;
  unsigned int dwMaxHwMixingStreamingBuffers;
  unsigned int dwFreeHwMixingAllBuffers;
  unsigned int dwFreeHwMixingStaticBuffers;
  unsigned int dwFreeHwMixingStreamingBuffers;
  unsigned int dwMaxHw3DAllBuffers;
  unsigned int dwMaxHw3DStaticBuffers;
  unsigned int dwMaxHw3DStreamingBuffers;
  unsigned int dwFreeHw3DAllBuffers;
  unsigned int dwFreeHw3DStaticBuffers;
  unsigned int dwFreeHw3DStreamingBuffers;
  unsigned int dwTotalHwMemBytes;
  unsigned int dwFreeHwMemBytes;
  unsigned int dwMaxContigFreeHwMemBytes;
  unsigned int dwUnlockTransferRateHwBuffers;
  unsigned int dwPlayCpuOverheadSwBuffers;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
};

/* 3655 */
struct _DSBCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwBufferBytes;
  unsigned int dwUnlockTransferRate;
  unsigned int dwPlayCpuOverhead;
};

/* 3656 */
struct _DSCEFFECTDESC
{
  unsigned int dwSize;
  unsigned int dwFlags;
  _GUID guidDSCFXClass;
  _GUID guidDSCFXInstance;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
};

/* 3657 */
struct _DSBUFFERDESC
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwBufferBytes;
  unsigned int dwReserved;
  tWAVEFORMATEX *lpwfxFormat;
  _GUID guid3DAlgorithm;
};

/* 3658 */
struct _DSCCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwFormats;
  unsigned int dwChannels;
};

/* 3659 */
struct _DSCBUFFERDESC
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwBufferBytes;
  unsigned int dwReserved;
  tWAVEFORMATEX *lpwfxFormat;
  unsigned int dwFXCount;
  _DSCEFFECTDESC *lpDSCFXDesc;
};

/* 3660 */
struct _DSCBCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwBufferBytes;
  unsigned int dwReserved;
};

/* 3661 */
struct HFONT__
{
  int unused;
};

/* 3662 */
struct _RTL_CRITICAL_SECTION
{
  _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
  int LockCount;
  int RecursionCount;
  void *OwningThread;
  void *LockSemaphore;
  unsigned __int64 SpinCount;
};

/* 3663 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 3664 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  unsigned __int16 Type;
  unsigned __int16 CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  _LIST_ENTRY ProcessLocksList;
  unsigned int EntryCount;
  unsigned int ContentionCount;
  unsigned int Flags;
  unsigned __int16 CreatorBackTraceIndexHigh;
  unsigned __int16 SpareWORD;
};

/* 3665 */
struct __declspec(align(8)) WinConData
{
  HWND__ *hWnd;
  HWND__ *hwndBuffer;
  HWND__ *codLogo;
  HFONT__ *hfBufferFont;
  HWND__ *hwndInputLine;
  char errorString[512];
  char consoleText[512];
  char returnedText[512];
  char consoleHistory[64][512];
  int consoleHistoryPos;
  int consoleHistoryCount;
  int windowWidth;
  int windowHeight;
  __int64 (__cdecl *SysInputLineWndProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  char cleanBuffer[65536];
  char buffer[32768];
  unsigned __int64 bufferLen;
  _RTL_CRITICAL_SECTION critSect;
  bool disabled;
};

/* 3666 */
struct HICON__
{
  int unused;
};

/* 3667 */
struct HBRUSH__
{
  int unused;
};

/* 3668 */
struct tagWNDCLASSA
{
  unsigned int style;
  __int64 (__cdecl *lpfnWndProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const char *lpszMenuName;
  const char *lpszClassName;
};

/* 3669 */
struct HDC__
{
  int unused;
};

/* 3670 */
struct HMENU__
{
  int unused;
};

/* 3671 */
struct PlayerStats
{
  char data[37888];
  bool statsFetched;
  bool onlineStatWritePending;
  bool statWriteNeeded;
  bool firstTimeRunning;
  bool allowSavingProgress;
};

/* 3672 */
struct PlayerLoadouts
{
  char data[9240];
  bool statsFetched;
};

/* 3673 */
struct PlayerStatNetworkData
{
  PlayerStats playerStats[1];
  volatile bool writeStatsBufferInUse;
  __declspec(align(4)) char writeStatsBuffer[37892];
  PlayerLoadouts playerLoadouts[1];
  __declspec(align(4)) char writeStatsBufferLoadouts[9244];
  int loadoutWriteDataSize;
  bool createFile;
  dwFileTask *fileTask;
  bool createfileLoadouts;
  dwFileTask *fileTaskLoadouts;
};

/* 3674 */
struct $B950AFB169DC87688B328897744C612F
{
  unsigned int LowPart;
  unsigned int HighPart;
};

/* 3675 */
union _ULARGE_INTEGER
{
  $B950AFB169DC87688B328897744C612F __s0;
  $B950AFB169DC87688B328897744C612F u;
  unsigned __int64 QuadPart;
};

/* 3676 */
struct __declspec(align(2)) SysInfo
{
  long double cpuGHz;
  long double configureGHz;
  int logicalCpuCount;
  int physicalCpuCount;
  int sysMB;
  char gpuDescription[512];
  unsigned __int64 videoMemory;
  bool SSE;
  char cpuVendor[13];
  char cpuName[49];
};

/* 3677 */
struct sysEvent_t
{
  int evPortIndex;
  int evTime;
  sysEventType_t evType;
  int evValue;
  int evValue2;
  int evPtrLength;
  void *evPtr;
};

/* 3678 */
struct tagPOINT
{
  int x;
  int y;
};

/* 3679 */
struct __declspec(align(8)) tagMSG
{
  HWND__ *hwnd;
  unsigned int message;
  unsigned __int64 wParam;
  __int64 lParam;
  unsigned int time;
  tagPOINT pt;
};

/* 3680 */
struct _OSVERSIONINFOA
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  char szCSDVersion[128];
};

/* 3681 */
struct _STARTUPINFOA
{
  unsigned int cb;
  char *lpReserved;
  char *lpDesktop;
  char *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  char *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 3682 */
struct _PROCESS_INFORMATION
{
  void *hProcess;
  void *hThread;
  unsigned int dwProcessId;
  unsigned int dwThreadId;
};

/* 3683 */
struct $FC4206DE9BE06F31D321A81A489B3B56
{
  char *strings;
};

/* 3684 */
struct bdBandwidthTestResults
{
  unsigned int m_bytesReceived;
  unsigned int m_receivePeriodMs;
  unsigned int m_avgSeqNumber;
  unsigned int m_minSeqNumber;
  unsigned int m_maxSeqNumber;
};

/* 3685 */
struct bdBandwidthTestClient
{
  bdSocket m_socket;
  bdReference<bdRemoteTask> m_remoteTask;
  unsigned int m_packetSize;
  unsigned int m_numPackets;
  unsigned int m_senderInitialWait;
  unsigned int m_sendDuration;
  unsigned int m_receiverInitialWait;
  unsigned int m_receiveDuration;
  unsigned int m_lingerDuration;
  unsigned __int16 m_lsgPort;
  unsigned int m_lsgAddr;
  char m_cookie[8];
  bdStopwatch m_timer;
  bdStopwatch m_recvTimeoutTimer;
  char *m_packetBuffer;
  unsigned int m_nextPacketNum;
  unsigned int m_actualNumSent;
  unsigned int m_seqNumberTotal;
  bdLobbyService *m_lobbyService;
  bdBandwidthTestInitStatus m_initStatus;
  bdBandwidthTestStatus m_testStatus;
  bdBandwidthTestResults m_uploadResults;
  bdBandwidthTestResults m_downloadResults;
  bdLobbyErrorCode m_error;
  bdBandwidthTestType m_type;
};

/* 3686 */
struct XenonUserData
{
  int signinState;
  char gamertag[32];
  unsigned __int64 xuid;
  char xuidString[17];
  unsigned __int64 xuidOffline;
  char xuidOfflineString[17];
  voiceCommunicationSetting voiceCommunicationSetting;
};

/* 3687 */
struct QoSStatus
{
  int firstMS;
  int updateMS;
  unsigned int prevNumSuccesses;
  int startTime;
};

/* 3688 */
struct Com_ListNode
{
  Com_ListNode *prev;
  Com_ListNode *next;
};

/* 3689 */
struct __cppobj bdNotification : bdTaskResult
{
  bdNotificationType m_type;
  unsigned int m_timeStamp;
  unsigned __int64 m_ID;
  unsigned __int64 m_sourceUser;
  char m_sourceUserName[64];
  unsigned __int64 m_affectedUser;
  char m_affectedUserName[64];
  unsigned __int64 m_teamID;
  char m_teamName[64];
};

/* 3690 */
struct __cppobj bdMailInboxInfo : bdTaskResult
{
  unsigned int m_priority;
  unsigned int m_count;
};

/* 3691 */
struct __cppobj bdMailHeader : bdTaskResult
{
  unsigned __int64 m_senderID;
  char m_senderName[64];
  unsigned __int64 m_mailID;
  unsigned int m_timeStamp;
  unsigned int m_size;
};

/* 3692 */
struct __cppobj __declspec(align(8)) bdMailHeaderPriority : bdTaskResult
{
  unsigned __int64 m_senderID;
  char m_senderName[64];
  unsigned __int64 m_mailID;
  unsigned int m_timeStamp;
  unsigned int m_mailPriority;
  unsigned int m_size;
};

/* 3693 */
struct __cppobj bdMailBody : bdTaskResult
{
  void *m_mailBody;
  unsigned int m_size;
  unsigned __int64 m_mailID;
};

/* 3694 */
struct __cppobj bdBlockedUser : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
};

/* 3695 */
struct IP_ADDRESS_STRING
{
  char String[16];
};

/* 3696 */
struct __declspec(align(8)) _IP_ADDR_STRING
{
  _IP_ADDR_STRING *Next;
  IP_ADDRESS_STRING IpAddress;
  IP_ADDRESS_STRING IpMask;
  unsigned int Context;
};

/* 3697 */
struct _IP_ADAPTER_INFO
{
  _IP_ADAPTER_INFO *Next;
  unsigned int ComboIndex;
  char AdapterName[260];
  char Description[132];
  unsigned int AddressLength;
  char Address[8];
  unsigned int Index;
  unsigned int Type;
  unsigned int DhcpEnabled;
  _IP_ADDR_STRING *CurrentIpAddress;
  _IP_ADDR_STRING IpAddressList;
  _IP_ADDR_STRING GatewayList;
  _IP_ADDR_STRING DhcpServer;
  int HaveWins;
  _IP_ADDR_STRING PrimaryWinsServer;
  _IP_ADDR_STRING SecondaryWinsServer;
  __int64 LeaseObtained;
  __int64 LeaseExpires;
};

/* 3698 */
struct __declspec(align(4)) WinMouseVars_t
{
  int oldButtonState;
  tagPOINT oldPos;
  bool mouseActive;
  bool mouseInitialized;
};

/* 3699 */
struct ButtonToCodeMap_t
{
  GamePadButton padButton;
  int code;
};

/* 3700 */
struct StickToCodeMap_t
{
  GamePadStick padStick;
  GamePadStickDir padStickDir;
  int code;
};

/* 3701 */
struct __cppobj IDirectInputA : IUnknown
{
};

/* 3702 */
struct DIDEVCAPS
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwDevType;
  unsigned int dwAxes;
  unsigned int dwButtons;
  unsigned int dwPOVs;
  unsigned int dwFFSamplePeriod;
  unsigned int dwFFMinTimeResolution;
  unsigned int dwFirmwareRevision;
  unsigned int dwHardwareRevision;
  unsigned int dwFFDriverVersion;
};

/* 3703 */
struct __declspec(align(8)) _DIOBJECTDATAFORMAT
{
  _GUID *pguid;
  unsigned int dwOfs;
  unsigned int dwType;
  unsigned int dwFlags;
};

/* 3704 */
struct _DIDATAFORMAT
{
  unsigned int dwSize;
  unsigned int dwObjSize;
  unsigned int dwFlags;
  unsigned int dwDataSize;
  unsigned int dwNumObjs;
  _DIOBJECTDATAFORMAT *rgodf;
};

/* 3705 */
struct DIDEVICEOBJECTINSTANCEA
{
  unsigned int dwSize;
  _GUID guidType;
  unsigned int dwOfs;
  unsigned int dwType;
  unsigned int dwFlags;
  char tszName[260];
  unsigned int dwFFMaxForce;
  unsigned int dwFFForceResolution;
  unsigned __int16 wCollectionNumber;
  unsigned __int16 wDesignatorIndex;
  unsigned __int16 wUsagePage;
  unsigned __int16 wUsage;
  unsigned int dwDimension;
  unsigned __int16 wExponent;
  unsigned __int16 wReportId;
};

/* 3706 */
struct DIPROPHEADER
{
  unsigned int dwSize;
  unsigned int dwHeaderSize;
  unsigned int dwObj;
  unsigned int dwHow;
};

/* 3707 */
struct DIDEVICEOBJECTDATA
{
  unsigned int dwOfs;
  unsigned int dwData;
  unsigned int dwTimeStamp;
  unsigned int dwSequence;
  unsigned __int64 uAppData;
};

/* 3708 */
struct DIDEVICEINSTANCEA
{
  unsigned int dwSize;
  _GUID guidInstance;
  _GUID guidProduct;
  unsigned int dwDevType;
  char tszInstanceName[260];
  char tszProductName[260];
  _GUID guidFFDriver;
  unsigned __int16 wUsagePage;
  unsigned __int16 wUsage;
};

/* 3709 */
struct __cppobj IDirectInputDeviceA : IUnknown
{
};

/* 3710 */
struct _PROCESSOR_POWER_INFORMATION
{
  unsigned int Number;
  unsigned int MaxMhz;
  unsigned int CurrentMhz;
  unsigned int MhzLimit;
  unsigned int MaxIdleState;
  unsigned int CurrentIdleState;
};

/* 3711 */
union $29E190BBE8E98CE3FABB39C727CA92F9
{
  unnamed-1388 s;
  char string[52];
};

/* 3712 */
union $F25418EF80FF5580F9E4076AD92DC409
{
  unnamed-1390 reg;
  char name[12];
};

/* 3713 */
struct $8B82BF8D68A19282BC6E2911FE3C05C3
{
  unsigned int ebx;
  unsigned int edx;
  unsigned int ecx;
};

/* 3714 */
struct __declspec(align(16)) $ADB56C22EDC5FEB9314A16ED4E3ED965
{
  unnamed-1393 reg0;
  _BYTE gap0[16];
  unnamed-1393 reg1;
  _BYTE gap10[16];
  unnamed-1393 reg2;
  _BYTE gap20[16];
};

/* 3715 */
struct $0BE088860890CE3314C51CDC88CB3743
{
  unsigned int eax;
  unsigned int ebx;
  unsigned int ecx;
  unsigned int edx;
};

/* 3716 */
struct $409DFF2A380C4FFE2B587D0390AC124E
{
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wReserved;
};

/* 3717 */
union $548E64F0BE88F69E8AA975FD658AFD54
{
  unsigned int dwOemId;
  $409DFF2A380C4FFE2B587D0390AC124E __s1;
};

/* 3718 */
struct _SYSTEM_INFO
{
  $548E64F0BE88F69E8AA975FD658AFD54 ___u0;
  unsigned int dwPageSize;
  void *lpMinimumApplicationAddress;
  void *lpMaximumApplicationAddress;
  unsigned __int64 dwActiveProcessorMask;
  unsigned int dwNumberOfProcessors;
  unsigned int dwProcessorType;
  unsigned int dwAllocationGranularity;
  unsigned __int16 wProcessorLevel;
  unsigned __int16 wProcessorRevision;
};

/* 3719 */
struct _MEMORYSTATUS
{
  unsigned int dwLength;
  unsigned int dwMemoryLoad;
  unsigned __int64 dwTotalPhys;
  unsigned __int64 dwAvailPhys;
  unsigned __int64 dwTotalPageFile;
  unsigned __int64 dwAvailPageFile;
  unsigned __int64 dwTotalVirtual;
  unsigned __int64 dwAvailVirtual;
};

/* 3720 */
struct _MEMORYSTATUSEX
{
  unsigned int dwLength;
  unsigned int dwMemoryLoad;
  unsigned __int64 ullTotalPhys;
  unsigned __int64 ullAvailPhys;
  unsigned __int64 ullTotalPageFile;
  unsigned __int64 ullAvailPageFile;
  unsigned __int64 ullTotalVirtual;
  unsigned __int64 ullAvailVirtual;
  unsigned __int64 ullAvailExtendedVirtual;
};

/* 3721 */
struct _EXCEPTION_RECORD
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  unsigned __int64 ExceptionInformation[15];
};

/* 3722 */
struct _M128A
{
  unsigned __int64 Low;
  __int64 High;
};

/* 3723 */
struct _XSAVE_FORMAT
{
  unsigned __int16 ControlWord;
  unsigned __int16 StatusWord;
  char TagWord;
  char Reserved1;
  unsigned __int16 ErrorOpcode;
  unsigned int ErrorOffset;
  unsigned __int16 ErrorSelector;
  unsigned __int16 Reserved2;
  unsigned int DataOffset;
  unsigned __int16 DataSelector;
  unsigned __int16 Reserved3;
  unsigned int MxCsr;
  unsigned int MxCsr_Mask;
  _M128A FloatRegisters[8];
  _M128A XmmRegisters[16];
  char Reserved4[96];
};

/* 3724 */
struct $F1C7D183FF433352C1AAC9703D4690C7
{
  _M128A Header[2];
  _M128A Legacy[8];
  _M128A Xmm0;
  _M128A Xmm1;
  _M128A Xmm2;
  _M128A Xmm3;
  _M128A Xmm4;
  _M128A Xmm5;
  _M128A Xmm6;
  _M128A Xmm7;
  _M128A Xmm8;
  _M128A Xmm9;
  _M128A Xmm10;
  _M128A Xmm11;
  _M128A Xmm12;
  _M128A Xmm13;
  _M128A Xmm14;
  _M128A Xmm15;
};

/* 3725 */
union $C529F98CEDBC3822062A21C972A50454
{
  _XSAVE_FORMAT FltSave;
  $F1C7D183FF433352C1AAC9703D4690C7 __s1;
};

/* 3726 */
struct _CONTEXT
{
  unsigned __int64 P1Home;
  unsigned __int64 P2Home;
  unsigned __int64 P3Home;
  unsigned __int64 P4Home;
  unsigned __int64 P5Home;
  unsigned __int64 P6Home;
  unsigned int ContextFlags;
  unsigned int MxCsr;
  unsigned __int16 SegCs;
  unsigned __int16 SegDs;
  unsigned __int16 SegEs;
  unsigned __int16 SegFs;
  unsigned __int16 SegGs;
  unsigned __int16 SegSs;
  unsigned int EFlags;
  unsigned __int64 Dr0;
  unsigned __int64 Dr1;
  unsigned __int64 Dr2;
  unsigned __int64 Dr3;
  unsigned __int64 Dr6;
  unsigned __int64 Dr7;
  unsigned __int64 Rax;
  unsigned __int64 Rcx;
  unsigned __int64 Rdx;
  unsigned __int64 Rbx;
  unsigned __int64 Rsp;
  unsigned __int64 Rbp;
  unsigned __int64 Rsi;
  unsigned __int64 Rdi;
  unsigned __int64 R8;
  unsigned __int64 R9;
  unsigned __int64 R10;
  unsigned __int64 R11;
  unsigned __int64 R12;
  unsigned __int64 R13;
  unsigned __int64 R14;
  unsigned __int64 R15;
  unsigned __int64 Rip;
  $C529F98CEDBC3822062A21C972A50454 ___u38;
  _M128A VectorRegister[26];
  unsigned __int64 VectorControl;
  unsigned __int64 DebugControl;
  unsigned __int64 LastBranchToRip;
  unsigned __int64 LastBranchFromRip;
  unsigned __int64 LastExceptionToRip;
  unsigned __int64 LastExceptionFromRip;
};

/* 3727 */
struct _EXCEPTION_POINTERS
{
  _EXCEPTION_RECORD *ExceptionRecord;
  _CONTEXT *ContextRecord;
};

/* 3728 */
struct __declspec(align(8)) miniDumper
{
  _EXCEPTION_POINTERS *m_pExceptionInfo;
  char m_szMiniDumpPath[260];
  char m_szMiniDumpDir[260];
  char m_szAppPath[260];
  char m_szAppBaseName[260];
  bool m_bPromptUserForMiniDump;
};

/* 3729 */
struct _MINIDUMP_EXCEPTION_INFORMATION
{
  unsigned int ThreadId;
  __unaligned __declspec(align(1)) _EXCEPTION_POINTERS *ExceptionPointers;
  int ClientPointers;
};

/* 3730 */
struct _MINIDUMP_MEMORY_INFO
{
  unsigned __int64 BaseAddress;
  unsigned __int64 AllocationBase;
  unsigned int AllocationProtect;
  unsigned int __alignment1;
  unsigned __int64 RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
  unsigned int __alignment2;
};

/* 3731 */
struct _MINIDUMP_USER_STREAM
{
  unsigned int Type;
  unsigned int BufferSize;
  void *Buffer;
};

/* 3732 */
struct __unaligned __declspec(align(4)) _MINIDUMP_USER_STREAM_INFORMATION
{
  unsigned int UserStreamCount;
  _MINIDUMP_USER_STREAM *UserStreamArray;
};

/* 3733 */
struct __declspec(align(16)) _MINIDUMP_THREAD_CALLBACK
{
  unsigned int ThreadId;
  __unaligned __declspec(align(1)) void *ThreadHandle;
  _CONTEXT Context;
  unsigned int SizeOfContext;
  __unaligned __declspec(align(1)) unsigned __int64 StackBase;
  __unaligned __declspec(align(1)) unsigned __int64 StackEnd;
};

/* 3734 */
struct __declspec(align(16)) _MINIDUMP_THREAD_EX_CALLBACK
{
  unsigned int ThreadId;
  __unaligned __declspec(align(1)) void *ThreadHandle;
  _CONTEXT Context;
  unsigned int SizeOfContext;
  __unaligned __declspec(align(1)) unsigned __int64 StackBase;
  __unaligned __declspec(align(1)) unsigned __int64 StackEnd;
  __unaligned __declspec(align(1)) unsigned __int64 BackingStoreBase;
  __unaligned __declspec(align(1)) unsigned __int64 BackingStoreEnd;
};

/* 3735 */
struct _MINIDUMP_INCLUDE_THREAD_CALLBACK
{
  unsigned int ThreadId;
};

/* 3736 */
struct tagVS_FIXEDFILEINFO
{
  unsigned int dwSignature;
  unsigned int dwStrucVersion;
  unsigned int dwFileVersionMS;
  unsigned int dwFileVersionLS;
  unsigned int dwProductVersionMS;
  unsigned int dwProductVersionLS;
  unsigned int dwFileFlagsMask;
  unsigned int dwFileFlags;
  unsigned int dwFileOS;
  unsigned int dwFileType;
  unsigned int dwFileSubtype;
  unsigned int dwFileDateMS;
  unsigned int dwFileDateLS;
};

/* 3737 */
struct _MINIDUMP_MODULE_CALLBACK
{
  wchar_t *FullPath;
  unsigned __int64 BaseOfImage;
  unsigned int SizeOfImage;
  unsigned int CheckSum;
  unsigned int TimeDateStamp;
  tagVS_FIXEDFILEINFO VersionInfo;
  void *CvRecord;
  unsigned int SizeOfCvRecord;
  __unaligned __declspec(align(1)) void *MiscRecord;
  unsigned int SizeOfMiscRecord;
};

/* 3738 */
struct _MINIDUMP_INCLUDE_MODULE_CALLBACK
{
  unsigned __int64 BaseOfImage;
};

/* 3739 */
struct __unaligned __declspec(align(4)) _MINIDUMP_IO_CALLBACK
{
  void *Handle;
  unsigned __int64 Offset;
  void *Buffer;
  unsigned int BufferBytes;
};

/* 3740 */
struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
{
  unsigned __int64 Offset;
  unsigned int Bytes;
  HRESULT FailureStatus;
};

/* 3741 */
union $2798184923910EE1B9F465434A6D761A
{
  HRESULT Status;
  _MINIDUMP_THREAD_CALLBACK Thread;
  _MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
  _MINIDUMP_MODULE_CALLBACK Module;
  _MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
  _MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
  _MINIDUMP_IO_CALLBACK Io;
  _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
  unsigned int SecondaryFlags;
};

/* 3742 */
struct _MINIDUMP_CALLBACK_INPUT
{
  unsigned int ProcessId;
  __unaligned __declspec(align(1)) void *ProcessHandle;
  unsigned int CallbackType;
  $2798184923910EE1B9F465434A6D761A ___u3;
};

/* 3743 */
struct $C3E071958E7BDFB53859BF79F284BD3C
{
  unsigned int ModuleWriteFlags;
  int Cancel;
  unsigned int MemorySize;
};

/* 3744 */
union $1B30238AE95DCFE2079F67FC646FA977
{
  $C3E071958E7BDFB53859BF79F284BD3C __s0;
  unsigned int ThreadWriteFlags;
  unsigned int SecondaryFlags;
  unsigned __int64 MemoryBase;
  int CheckCancel;
  void *Handle;
  _MINIDUMP_MEMORY_INFO VmRegion;
  HRESULT Status;
};

/* 3745 */
struct __unaligned __declspec(align(4)) _MINIDUMP_CALLBACK_OUTPUT
{
  $1B30238AE95DCFE2079F67FC646FA977 ___u0;
  int Continue;
};

/* 3746 */
struct _MINIDUMP_CALLBACK_INFORMATION
{
  int (__cdecl *CallbackRoutine)(void *, _MINIDUMP_CALLBACK_INPUT *, _MINIDUMP_CALLBACK_OUTPUT *);
  void *CallbackParam;
};

/* 3747 */
struct _INTERNET_BUFFERSA
{
  unsigned int dwStructSize;
  _INTERNET_BUFFERSA *Next;
  const char *lpcszHeader;
  unsigned int dwHeadersLength;
  unsigned int dwHeadersTotal;
  void *lpvBuffer;
  unsigned int dwBufferLength;
  unsigned int dwBufferTotal;
  unsigned int dwOffsetLow;
  unsigned int dwOffsetHigh;
};

/* 3748 */
struct _LUID_AND_ATTRIBUTES
{
  _LUID Luid;
  unsigned int Attributes;
};

/* 3749 */
struct _TOKEN_PRIVILEGES
{
  unsigned int PrivilegeCount;
  _LUID_AND_ATTRIBUTES Privileges[1];
};

/* 3750 */
struct _finddata64i32_t
{
  unsigned int attrib;
  __int64 time_create;
  __int64 time_access;
  __int64 time_write;
  unsigned int size;
  char name[260];
};

/* 3751 */
struct TomGameMemGlob
{
  char *memAt;
  char *memEnd;
};

/* 3752 */
struct infoParm_t
{
  const char *name;
  int clearSolid;
  int surfaceFlags;
  int contents;
  int toolFlags;
};

/* 3753 */
struct __declspec(align(8)) StreamFile
{
  void *handle;
  __int64 length;
  __int64 startOffset;
  bool isPacked;
};

/* 3754 */
struct CacheFileNameRaw
{
  char name[64];
};

/* 3755 */
union $61EF59C4A085BB8363CE6B86D3864685
{
  CacheFileNameRaw raw;
  StreamFileNamePacked packed;
};

/* 3756 */
struct CacheFileName
{
  unsigned __int16 isLocalized;
  unsigned __int16 fileIndex;
  $61EF59C4A085BB8363CE6B86D3864685 ___u2;
};

/* 3757 */
struct CacheFileNameRaw2
{
  char *name;
};

/* 3758 */
union $535DCB8262B7D9FEAF5CCA4FBB9BF8FC
{
  CacheFileNameRaw2 raw;
  StreamFileNamePacked packed;
};

/* 3759 */
struct CacheFileName2
{
  unsigned __int16 isLocalized;
  unsigned __int16 fileIndex;
  $535DCB8262B7D9FEAF5CCA4FBB9BF8FC ___u2;
};

/* 3760 */
struct msg_t
{
  int overflowed;
  int readOnly;
  char *data;
  char *splitData;
  int maxsize;
  int cursize;
  int splitSize;
  int readcount;
  int bit;
  int lastEntityRef;
  netsrc_t targetLocalNetID;
  int useZlib;
};

/* 3761 */
struct __declspec(align(8)) RMsgMessage
{
  bool active;
  netsrc_t fromLocalNetID;
  unsigned int sequenceNum;
  msg_t msg;
  unsigned int sendHandle;
};

/* 3762 */
struct RMsgClient
{
  netadr_s addr;
  int lastSendTime;
  int lastAddTime;
  unsigned int nextSequence;
  unsigned int oldestSequence;
  int bufferUsed;
  int bytesAckd;
  char reliableBuf[8192];
  RMsgMessage msgs[32];
};

/* 3763 */
struct RMsgClientId
{
  netadr_s addr;
};

/* 3764 */
struct RMsgUniqueId
{
  unsigned int sequence;
};

/* 3765 */
struct RMsgSendHandler
{
  RMsgClientId clientUID;
  RMsgUniqueId msgUID;
  RMsgSendStatus status;
};

/* 3766 */
struct va_info_t
{
  char va_string[2][2048];
  int index;
};

/* 3767 */
struct _SETJMP_FLOAT128
{
  unsigned __int64 Part[2];
};

/* 3768 */
struct cspField_t
{
  const char *szName;
  __int64 iOffset;
  int iFieldType;
  unsigned int nameCRC;
};

/* 3769 */
union $E5C6A92FB9EC742DB48E2EDC7CE289A3
{
  float f;
  int n;
  char b[4];
};

/* 3770 */
struct parseInfo_t
{
  char token[1024];
  int lines;
  bool ungetToken;
  bool spaceDelimited;
  bool commaDelimited;
  bool keepStringQuotes;
  bool csv;
  bool negativeNumbers;
  const char *errorPrefix;
  const char *warningPrefix;
  int backup_lines;
  const char *backup_text;
  const char *parseFile;
};

/* 3771 */
struct ParseThreadInfo
{
  parseInfo_t parseInfo[16];
  int parseInfoNum;
  const char *tokenPos;
  const char *prevTokenPos;
  char line[1024];
};

/* 3772 */
struct PhysicalMemoryAllocation
{
  const char *name;
  unsigned __int64 pos;
};

/* 3773 */
struct PhysicalMemoryPrim
{
  const char *allocName;
  unsigned int allocListCount;
  unsigned __int64 pos;
  PhysicalMemoryAllocation allocList[32];
};

/* 3774 */
struct PhysicalMemory
{
  char *buf;
  PhysicalMemoryPrim prim[2];
};

/* 3775 */
struct __cppobj std::nothrow_t
{
};

/* 3776 */
struct complex4_t
{
  float real[4];
  float imag[4];
};

/* 3777 */
union FloatToInt
{
  float fValue;
  int iValue;
};

/* 3778 */
struct _lldiv_t
{
  __int64 quot;
  __int64 rem;
};

/* 3779 */
struct _ldiv_t
{
  int quot;
  int rem;
};

/* 3780 */
union __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  char m64_i8[8];
  __int16 m64_i16[4];
  int m64_i32[2];
  __int64 m64_i64;
  char m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned int m64_u32[2];
};

/* 3781 */
struct std::pair<dvar_t const * *,dvar_t const * *>
{
  dvar_t **first;
  dvar_t **second;
};

/* 3782 */
struct __declspec(align(4)) ContentPackList
{
  int contentPack;
  bool mounted;
};

/* 3783 */
struct __declspec(align(4)) KnownContentPackData
{
  char contentName[128];
  int contentPack;
  bool available;
};

/* 3784 */
struct __declspec(align(8)) GameContentPackInfo
{
  const char *contentStrRef;
  const char *packName;
  const char *trialName;
  int contentPack;
};

/* 3785 */
struct DataIntegrityRange
{
  unsigned int startByteOffset;
  unsigned int endByteOffset;
};

/* 3786 */
struct __declspec(align(8)) CompareSettings
{
  StructuredDataLookup lookup;
  StructuredDataValidationType validation;
  StructuredDataBuffer *bufferOld;
  StructuredDataBuffer *bufferNew;
  DataIntegrityRange *dataRanges;
  unsigned int dataRangeCount;
};

/* 3787 */
struct SoundAliasGlobals
{
  char initialized[3];
  int randSeed;
};

/* 3788 */
struct GametypeRichPresenceInfo
{
  char gametype[32];
  int context;
};

/* 3789 */
struct MapnameRichPresenceInfo
{
  const char *mapname;
  int context;
  int mapPack;
};

/* 3790 */
struct sockaddr
{
  unsigned __int16 sa_family;
  char sa_data[14];
};

/* 3791 */
struct hostent
{
  char *h_name;
  char **h_aliases;
  __int16 h_addrtype;
  __int16 h_length;
  char **h_addr_list;
};

/* 3792 */
struct __declspec(align(8)) fileData_s
{
  void *data;
  fileData_s *next;
  char type;
  char name[1];
};

/* 3793 */
struct hunkUsed_t
{
  unsigned __int64 permanent;
  unsigned __int64 temp;
};

/* 3794 */
struct hunkHeader_t
{
  unsigned __int64 size;
  unsigned int magic;
  int padding;
  unsigned __int64 padding2;
  unsigned __int64 padding3;
};

/* 3795 */
struct AddonMapDef
{
  const char *prefix;
  unsigned int prefixLen;
  int optionalBaseMap;
};

/* 3796 */
struct searchpath_s
{
  searchpath_s *next;
  iwd_t *iwd;
  directory_t *dir;
  int bLocalized;
  int ignore;
  int ignorePureCheck;
  int language;
};

/* 3797 */
struct fileInIwd_s
{
  unsigned int pos;
  char *name;
  fileInIwd_s *next;
};

/* 3798 */
struct iwd_t
{
  char iwdFilename[256];
  char iwdBasename[256];
  char iwdGamename[256];
  char *handle;
  volatile int hasOpenFile;
  int numfiles;
  char referenced;
  unsigned int hashSize;
  fileInIwd_s **hashTable;
  fileInIwd_s *buildBuffer;
};

/* 3799 */
struct directory_t
{
  char path[256];
  char gamedir[256];
};

/* 3800 */
union qfile_gus
{
  _iobuf *o;
  char *z;
};

/* 3801 */
struct __declspec(align(8)) qfile_us
{
  qfile_gus file;
  int iwdIsClone;
};

/* 3802 */
struct fileHandleData_t
{
  qfile_us handleFiles;
  int handleSync;
  __int64 fileSize;
  int zipFilePos;
  iwd_t *zipFile;
  int streamed;
  searchpath_s *searchPath;
  char name[256];
};

/* 3805 */
struct __declspec(align(8)) RedBlackTreeNode<void *,void *>
{
  RedBlackTreeNode<void *,void *> *parent;
  RedBlackTreeNode<void *,void *> *left;
  RedBlackTreeNode<void *,void *> *right;
  void *data;
  void *key;
  unsigned __int16 color;
};

/* 3803 */
struct PoolInfo
{
  PoolInfo *next;
  char *poolData;
  PoolInfoHeader *header;
  RedBlackTreeNode<void *,void *> rbnode;
  unsigned __int16 memTop;
  unsigned __int16 freeMem;
  unsigned __int16 blocksUsed;
  unsigned __int16 poolTableIndex;
};

/* 3804 */
struct PoolInfoHeader
{
  PoolInfoHeader *next;
  unsigned __int16 numUsedInfos;
  unsigned __int16 freeInfo;
  unsigned __int16 infoTop;
  unsigned __int16 unused;
};

/* 3806 */
struct __declspec(align(8)) PoolTable
{
  PoolInfo *firstPool;
  PoolInfo *exhaustedPool;
  unsigned __int16 blockSize;
  unsigned __int16 maxBlocks;
};

/* 3807 */
struct SystemTable
{
  SystemTable *next;
};

/* 3808 */
struct RedBlackTree<void *,void *>
{
  RedBlackTreeNode<void *,void *> *root;
  RedBlackTreeNode<void *,void *> *(__cdecl *AllocNodeCallback)(void *);
  void *customData;
};

/* 3809 */
struct BucketAllocator
{
  PoolTable poolTable[49];
  SystemTable *systemTable;
  PoolInfoHeader *poolInfoTable;
  void *(__cdecl *SystemPageAllocator)(unsigned __int64, void *);
  void (__cdecl *SystemPageFree)(void *, void *);
  RedBlackTree<void *,void *> allocatedPageMap;
  void *threadSafe;
  void *customData;
};

/* 3810 */
struct BlockHeader
{
  unsigned int prev;
  unsigned int next;
  unsigned int length;
};

/* 3811 */
struct AllocatedHeader
{
  unsigned int length;
};

/* 3812 */
struct BlockMemoryPool
{
  unsigned int poolSize;
  void *pool;
};

/* 3813 */
struct _POINTL
{
  int x;
  int y;
};

/* 3814 */
struct $5ACE225D4D14CE0550A9F5A217E306C5
{
  __int16 dmOrientation;
  __int16 dmPaperSize;
  __int16 dmPaperLength;
  __int16 dmPaperWidth;
};

/* 3815 */
union $91B95E9343A7AF31126A57818C43791E
{
  $5ACE225D4D14CE0550A9F5A217E306C5 __s0;
  _POINTL dmPosition;
};

/* 3816 */
struct $84BDF2D0EF3E6D92B6C33770B276E406
{
  __int16 dmScale;
  __int16 dmCopies;
};

/* 3817 */
union $3B68C57CF07206FB951B4B780FF3EE54
{
  $84BDF2D0EF3E6D92B6C33770B276E406 __s0;
  unsigned int dmDisplayOrientation;
};

/* 3818 */
struct $319163E49F0A6F35652FDFBFBA0FF503
{
  __int16 dmDefaultSource;
  __int16 dmPrintQuality;
};

/* 3819 */
union $985B1EB5BDCAB500C12F7BB27DC26AE2
{
  $319163E49F0A6F35652FDFBFBA0FF503 __s0;
  unsigned int dmDisplayFixedOutput;
};

/* 3820 */
union $309666D137CBB19809FA597AD348B415
{
  unsigned int dmDisplayFlags;
  unsigned int dmNup;
};

/* 3821 */
struct _devicemodeA
{
  char dmDeviceName[32];
  unsigned __int16 dmSpecVersion;
  unsigned __int16 dmDriverVersion;
  unsigned __int16 dmSize;
  unsigned __int16 dmDriverExtra;
  unsigned int dmFields;
  $91B95E9343A7AF31126A57818C43791E ___u6;
  $3B68C57CF07206FB951B4B780FF3EE54 ___u7;
  $985B1EB5BDCAB500C12F7BB27DC26AE2 ___u8;
  __int16 dmColor;
  __int16 dmDuplex;
  __int16 dmYResolution;
  __int16 dmTTOption;
  __int16 dmCollate;
  char dmFormName[32];
  unsigned __int16 dmLogPixels;
  unsigned int dmBitsPerPel;
  unsigned int dmPelsWidth;
  unsigned int dmPelsHeight;
  $309666D137CBB19809FA597AD348B415 ___u19;
  unsigned int dmDisplayFrequency;
  unsigned int dmICMMethod;
  unsigned int dmICMIntent;
  unsigned int dmMediaType;
  unsigned int dmDitherType;
  unsigned int dmReserved1;
  unsigned int dmReserved2;
  unsigned int dmPanningWidth;
  unsigned int dmPanningHeight;
};

/* 3822 */
union $59CCFF581848741B94568963B318ACCF
{
  int underflowBits;
  int value;
};

/* 3823 */
struct __declspec(align(4)) ArithmeticEncoderStats1Bit
{
  int low;
  int high;
  $59CCFF581848741B94568963B318ACCF ___u2;
  int freq[2];
  int cfreq[3];
  bool readInit;
};

/* 3824 */
struct __declspec(align(4)) ArithmeticEncoderStats2Bit
{
  int low;
  int high;
  $59CCFF581848741B94568963B318ACCF ___u2;
  int freq[4];
  int cfreq[5];
  bool readInit;
};

/* 3825 */
struct __declspec(align(4)) ArithmeticEncoderStats3Bit
{
  int low;
  int high;
  $59CCFF581848741B94568963B318ACCF ___u2;
  int freq[8];
  int cfreq[9];
  bool readInit;
};

/* 3826 */
struct __declspec(align(4)) ArithmeticEncoderStats8Bit
{
  int low;
  int high;
  $59CCFF581848741B94568963B318ACCF ___u2;
  int numSymbols;
  int freq[256];
  int cfreq[257];
  bool readInit;
};

/* 3827 */
struct InputBitStream
{
  char *buffer;
  int bufferLen;
  int bufferTopByte;
  int bufferTopBit;
  void *userData;
  void (__cdecl *ReadCallback)(char *, unsigned int, void *);
};

/* 3828 */
struct GenericAabbTree
{
  int firstItem;
  int itemCount;
  int firstChild;
  int childCount;
};

/* 3829 */
struct __declspec(align(8)) GenericAabbTreeOptions
{
  void *items;
  int itemCount;
  int itemSize;
  int maintainValidBounds;
  Bounds *bounds;
  GenericAabbTree *treeNodePool;
  int treeNodeLimit;
  int minItemsPerLeaf;
  int maxItemsPerLeaf;
};

/* 3830 */
struct stringDef_s
{
  stringDef_s *next;
  const char *str;
};

/* 3831 */
struct commandDef_t
{
  const char *name;
  void (__cdecl *handler)(UiContext *, itemDef_t *, const char **);
};

/* 3832 */
struct newsTickerInfo_s
{
  int lastTime;
  int nextStateTime;
  float x;
  float y;
  TickerState state;
};

/* 3833 */
struct CachedAssets_t
{
  Material *scrollBarArrowUp;
  Material *scrollBarArrowDown;
  Material *scrollBarArrowLeft;
  Material *scrollBarArrowRight;
  Material *scrollBar;
  Material *scrollBarThumb;
  Material *sliderBar;
  Material *sliderThumb;
  Material *whiteMaterial;
  Material *cursor;
  Material *gameScrollBarArrowUp;
  Material *gameScrollBarArrowUpOver;
  Material *gameScrollBarArrowDown;
  Material *gameScrollBarArrowDownOver;
  Material *textDecodeCharacters;
  Material *textDecodeCharactersGlow;
  Font_s *bigFont;
  Font_s *smallFont;
  Font_s *consoleFont;
  Font_s *boldFont;
  Font_s *textFont;
  Font_s *extraBigFont;
  Font_s *objectiveFont;
  Font_s *hudBigFont;
  Font_s *hudSmallFont;
  snd_alias_list_t *itemFocusSound;
};

/* 3834 */
struct gameTypeInfo
{
  char gameType[12];
  char gameTypeName[32];
  char customizedGameTypeName[32];
  char customizedGameTypeDesc[32];
};

/* 3835 */
struct UISpawnPos
{
  float allySpawnPos[2];
  float axisSpawnPos[2];
  float objectives[5][2];
};

/* 3836 */
struct mapInfo
{
  char mapName[32];
  char mapLoadName[16];
  char mapDescription[32];
  char mapLoadImage[32];
  char mapCustomKey[32][16];
  char mapCustomValue[32][64];
  int mapCustomCount;
  char mapCamoTypes[2][16];
  int isAliensMap;
  int mapPack;
  UISpawnPos mapSpawnPos[32];
};

/* 3837 */
struct pinglist_t
{
  char adrstr[64];
  int start;
};

/* 3838 */
struct serverStatus_s
{
  pinglist_t pingList[16];
  int numqueriedservers;
  int currentping;
  int nextpingtime;
  int maxservers;
  int refreshtime;
  int numServers;
  int sortKey;
  int sortDir;
  int lastCount;
  int refreshActive;
  int currentServer;
  int displayServers[20000];
  int numDisplayServers;
  int serverCount;
  int numPlayersOnServers;
  int nextDisplayRefresh;
  int nextSortTime;
  int motdLen;
  int motdWidth;
  int motdPaintX;
  int motdPaintX2;
  int motdOffset;
  int motdTime;
  char cl_motd[1024];
};

/* 3839 */
struct serverStatusInfo_t
{
  char address[64];
  const char *lines[128][4];
  char text[1024];
  char pings[36];
  int numLines;
};

/* 3840 */
struct pendingServer_t
{
  char adrstr[64];
  char name[64];
  int startTime;
  int serverNum;
  int valid;
};

/* 3841 */
struct pendingServerStatus_t
{
  int num;
  pendingServer_t server[16];
};

/* 3842 */
struct sharedUiInfo_t
{
  CachedAssets_t assets;
  int playerCount;
  char playerNames[12][32];
  char teamNames[12][32];
  int playerClientNums[12];
  volatile int updateGameTypeList;
  int numGameTypes;
  gameTypeInfo gameTypes[32];
  int numCustomGameTypes;
  gameTypeInfo customGameTypes[32];
  char customGameTypeCancelState[2048];
  int numJoinGameTypes;
  gameTypeInfo joinGameTypes[32];
  volatile int updateArenas;
  int mapCount;
  mapInfo mapList[128];
  int mapIndexSorted[128];
  bool mapsAreSorted;
  serverStatus_s serverStatus;
  char serverStatusAddress[64];
  serverStatusInfo_t serverStatusInfo;
  int nextServerStatusRefresh;
  pendingServerStatus_t pendingServerStatus;
};

/* 3843 */
struct __cppobj std::iterator<std::random_access_iterator_tag,char,__int64,char *,char &>
{
};

/* 3844 */
struct __cppobj std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,__int64,char *,char &> > : std::iterator<std::random_access_iterator_tag,char,__int64,char *,char &>
{
  char *current;
};

/* 3845 */
struct __cppobj std::reverse_iterator<char *> : std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,__int64,char *,char &> >
{
};

/* 3846 */
struct StringBuffer
{
  char buffer[102400];
  char *tail;
};

/* 3847 */
struct __declspec(align(8)) playlistInfo
{
  char name[64];
  char description[256];
  char image[32];
  char video[32];
  char *rules;
  int unlockXp;
  unsigned int requiredDLCMask;
  bool requiresElite;
  int flags;
  unsigned __int16 firstEntry;
  unsigned __int16 numEntries;
  char maxPartySize;
  char minPartySize;
  char numRounds;
  char maxHumanPlayers;
  bool ranked;
  bool clan;
  bool user_generated;
  int squad_mode;
  bool show_only_when_have_maps;
};

/* 3848 */
struct playlistEntry
{
  char mapindex;
  char gametype;
  char fullWeight;
  char remainingWeight;
};

/* 3849 */
struct __declspec(align(4)) categoryEntry
{
  $E547BE8FDF07D7076C655C73C4CB2F48 type;
  char num;
};

/* 3850 */
struct __declspec(align(4)) categoryInfo
{
  char name[64];
  char description[256];
  char image[32];
  categoryEntry entries[20];
  char numEntries;
  unsigned int unlockXp;
  unsigned int requiredDLCMask;
  int categoryClass;
  bool requiresElite;
};

/* 3851 */
struct __declspec(align(8)) playlistMapInfo
{
  char *name[128];
  char numEntries;
};

/* 3852 */
struct __declspec(align(8)) playlistGametype
{
  char scriptName[16];
  char internalName[16];
  char localizedName[64];
  char abbrvName[16];
  char *rules;
  char recipeIndex;
  bool teamBased;
  bool hardcore;
};

/* 3853 */
struct PlaylistUIStackItem
{
  unsigned int category;
  unsigned int selected;
};

/* 3854 */
struct PlaylistUIStack
{
  unsigned int count;
  PlaylistUIStackItem stack[2];
};

/* 3855 */
struct mapvoteDVarInfoTable
{
  const char *uiMapnameDVar;
  const char *uiGameTypeDVar;
  const char *partyMapnameDVar;
};

/* 3856 */
struct __declspec(align(4)) uiInfo_s
{
  UiContext uiDC;
  int myTeamCount;
  int playerRefresh;
  int playerIndex;
  int timeIndex;
  int previousTimes[4];
  uiMenuCommand_t currentMenuType;
  bool allowScriptMenuResponse;
};

/* 3857 */
struct uiClientState_s
{
  connstate_t connState;
  int connectPacketCount;
  char servername[1024];
  char messageString[1024];
};

/* 3858 */
struct ValidOperation
{
  operationEnum op;
  expDataType leftSide;
  expDataType rightSide;
  void (__cdecl *function)(Operand *, Operand *, Operand *);
};

/* 3859 */
struct UiExpressionState
{
  int milliseconds;
};

/* 3860 */
struct OperandList
{
  Operand operands[10];
  int operandCount;
};

/* 3861 */
struct OperandStack
{
  OperandList *stack;
  int numOperandLists;
  int maxOperandLists;
};

/* 3862 */
struct OperatorStack
{
  operationEnum stack[60];
  int numOperators;
  int skipGroups;
  operationEnum skipOp;
};

/* 3863 */
struct __declspec(align(8)) languageInfo_t
{
  const char *pszName;
  const char *pszCode;
  int bPresent;
};

/* 3864 */
struct SquadMessage
{
  char header[4];
  int time;
  unsigned __int16 won_match;
  char playerSquadName[17];
  char enemySquadName[17];
  char enemyClanTag[5];
  int score[2];
  int kills;
  int deaths;
  int earnedXP;
  char squad_base[32];
  char squad_mode[16];
};

/* 3865 */
struct Squad_Info
{
  char gamertag[21];
  int rank;
  int prestige;
  __int16 head;
  __int16 helmet;
  __int16 body;
  __int16 patch;
  __int16 patchbacking;
  __int16 background;
  int weapon;
  int weaponAttach1;
  int weaponAttach2;
  int weaponAttach3;
  int weaponCamo;
};

/* 3866 */
struct Squad_CompareInfo
{
  int friendlyWins;
  int friendlyLosses;
  int friendlyWinStreak;
  int enemyWins;
  int enemyLosses;
  int enemyWinStreak;
};

/* 3867 */
struct Squad_MatchInfo
{
  char squad_base[32];
  char squad_mode[16];
  char friendlySquadName[13];
  char enemySquadName[13];
  Squad_CompareInfo compareInfo;
};

/* 3868 */
struct SquadHostData
{
  bool host_found_match;
  Squad_Info host_squad[6];
  Squad_Info host_enemy_squad[6];
  Squad_MatchInfo match_info;
  int ui_squad_mode;
};

/* 3869 */
struct __cppobj bdMailCategoryCount : bdTaskResult
{
  unsigned __int16 m_category;
  unsigned int m_count;
};

/* 3870 */
struct __cppobj __declspec(align(8)) bdMailInfo : bdTaskResult
{
  bdUserAccountID m_senderID;
  char m_senderName[64];
  unsigned __int64 m_mailID;
  unsigned int m_timeStamp;
  unsigned int m_size;
  unsigned __int16 m_mailCategory;
};

/* 3871 */
struct ParamSmoother
{
  float A;
  float precalcB;
  float currentVal;
};

/* 3872 */
struct VectorParamSmoother
{
  __m128 A;
  __m128 precalcB;
  __m128 currentVal;
};

/* 3873 */
struct __declspec(align(4)) SndEqParams
{
  SND_EQTYPE type;
  float gain;
  float freq;
  float q;
  bool enabled;
};

/* 3874 */
struct SndBiquadEQ
{
  float coeffs[5];
  SndEqParams curParams;
  float xn1[2];
  float xn2[2];
  float yn1[2];
  float yn2[2];
};

/* 3875 */
struct SndEQBankParams
{
  float eqLerp;
  float lpfCutoff;
  SndEqParams params[2][2];
};

/* 3876 */
struct __declspec(align(4)) SndEQBank
{
  SndBiquadEQ eq[2][2];
  bool isAnyEqBandEnabled;
};

/* 3877 */
struct OnePoleLPF_t
{
  float m_delay;
  float m_delay2;
  float m_fade_time;
  ParamSmoother m_a;
  ParamSmoother m_b;
};

/* 3878 */
union $37ADA529738089CDBAF569832E76B5BA
{
  unsigned int header;
  char header_str[4];
};

/* 3879 */
struct ChunkHeader
{
  $37ADA529738089CDBAF569832E76B5BA ___u0;
  unsigned int size;
};

/* 3880 */
struct ThrottleData
{
  int returnTimeMs;
};

/* 3881 */
struct DWSessionCreateData
{
  bool active;
  SessionData *session;
  bdSessionID createSessionResult;
};

/* 3882 */
struct SessionGraveYard
{
  bool active;
  SessionData sessionData;
};

/* 3883 */
struct __cppobj bdSecurityInfo
{
};

/* 3884 */
struct sightpointtrace_t
{
  float start[3];
  float end[3];
  int passEntityNum[2];
  int contentmask;
  int locational;
  char *priorityMap;
};

/* 3885 */
struct sightclip_t
{
  Bounds bounds;
  float outerSize[3];
  float start[3];
  float end[3];
  int passEntityNum[2];
  int contentmask;
};

/* 3886 */
struct CM_WorldTraceCallbacks
{
  bool (__cdecl *isGlassSolid)(unsigned int);
};

/* 3887 */
struct __declspec(align(2)) ComStreamSyncModel
{
  unsigned __int16 modelIndex;
  char alternateIndex;
};

/* 3888 */
struct SvStreamSyncItem
{
  ComStreamSyncModel model;
  char refCount;
  SvStreamSyncLoadState loadedState;
};

/* 3889 */
struct SvStreamSyncList
{
  unsigned int modelCount;
  SvStreamSyncItem models[12];
};

/* 3890 */
struct SvStreamSyncGlobalData
{
  SvStreamSyncList modelLists[2];
  unsigned int packagesChanged[2];
  ClientCustomizationInfo presetCustomizationInfo[12];
  unsigned int presetCustomizationIndex;
  unsigned int presetCustomizationCount;
};

/* 3891 */
struct SvStreamSyncClientData
{
  SvStreamSyncList modelLists[3];
  unsigned int packagesRemoved[3];
  unsigned int packagesAdded[3];
  int active;
};

/* 3892 */
struct ComStreamedSyncModelList
{
  unsigned int modelCount;
  ComStreamSyncModel models[12];
};

/* 3893 */
struct $AB1CB54E153B48B0A02DA569E8E791DA
{
  _BYTE gap0[1032];
  agent_t *agents;
  int maxagents;
  int agentSize;
  int numSnapshotAgents;
  int nextSnapshotAgents;
  int nextCachedSnapshotAgents;
  agentState_s *firstAgentState;
  agentState_s *snapshotAgents;
  cachedAgent_s *cachedSnapshotAgents;
  bool constBaselineIsValid;
  int constBaselineEntitesCount;
  int constBaselineEntitesMax;
  entityState_s *constBaselineEntities;
};

/* 3894 */
union $40C8F339214AAD7C860A01721AA87F17
{
  AnimStateSnapData animStateData;
  $AB1CB54E153B48B0A02DA569E8E791DA __s1;
};

/* 3895 */
struct serverStaticHeader_t
{
  client_t *clients;
  int time;
  int snapFlagServerBit;
  int numSnapshotEntities;
  int numSnapshotClients;
  int numNoDeltaEntities;
  int nextNoDeltaEntity;
  int nextSnapshotEntities;
  int nextSnapshotClients;
  entityState_s *snapshotEntities;
  entityState_s *noDeltaEntities;
  clientState_s *snapshotClients;
  int omnvarsCount;
  int nextOmnvarsIdx;
  OmnvarData *omnvars;
  OmnvarDef *omnvarDefs;
  OmnvarData *omnvarDefaults;
  unsigned int omnvarPerPlayerstateCount;
  unsigned int omnvarPerSnapCount;
  unsigned int omnvarPerPlayerstateIdxBitsNeeded;
  unsigned int omnvarPerSnapIdxBitsNeeded;
  svEntity_s *svEntities;
  float mapCenter[3];
  archivedEntity_s *cachedSnapshotEntities;
  cachedClient_s *cachedSnapshotClients;
  char *archivedSnapshotBuffer;
  cachedSnapshot_t *cachedSnapshotFrames;
  int nextCachedSnapshotFrames;
  int nextArchivedSnapshotFrames;
  int nextCachedSnapshotEntities;
  int nextCachedSnapshotClients;
  int num_entities;
  int maxclients;
  int clientArchive;
  gentity_s *gentities;
  clientState_s *firstClientState;
  playerState_s *firstPlayerState;
  int clientSize;
  int archivedEntityCount;
  int packetBackupCount;
  int packetBackupMask;
  ScriptableWorldSnapData scriptables;
  _BYTE ___u42[1120];
};

/* 3896 */
struct __declspec(align(8)) SnapshotInfo_s
{
  int clientNum;
  float mapCenter[3];
  clientHeader_t *client;
  int snapshotDeltaTime;
  bool fromBaseline;
  bool archived;
  bool packetIsDelta;
  bool demoSnapshot;
  bool entJustUnlinked;
  bool entNeverChanges;
  bool movingPlatform;
};

/* 3897 */
struct ai_goal_t
{
  float pos[3];
  float radius;
  float height;
  pathnode_t *node;
  gentity_s *volume;
};

/* 3898 */
struct __cppobj bot_goal_t : ai_goal_t
{
  float yaw;
  char type;
  bot_path_t pathStyle;
  float objectiveRadius;
  pathnode_t *nearestNode;
};

/* 3899 */
struct bot_enemy_track_t
{
  bot_track_t trackType;
  float predictOrigin[3];
  float aimOffset[3];
  float aimOffsetLength;
  int aimOffsetNext;
  int lastEnemyEntNum;
  int lastEnemyTime;
  int lastVisTime;
  float lastOrigin[3];
  float lastVelocity[3];
  float lastDist;
  float regOrigin[3];
  float regVelocity[3];
  int regNext;
  float awarePoint[3];
  int awarePointNext;
  int awareTime;
  int deadEnemyThreat;
  int lastFireTime;
};

/* 3900 */
struct AimTweakables
{
  float slowdownRegionWidth;
  float slowdownRegionHeight;
  float autoMeleeRegionWidth;
  float autoMeleeRegionHeight;
  float lockOnRegionWidth;
  float lockOnRegionHeight;
};

/* 3901 */
struct AimScreenTarget
{
  int entIndex;
  float clipMins[2];
  float clipMaxs[2];
  float aimPos[3];
  float velocity[3];
  float distSqr;
  float crosshairDistSqr;
  int isCharacter;
};

/* 3902 */
struct AimAssistSharedGlobals
{
  float eyeOrigin[3];
  float viewAngles[3];
  int prevButtons;
  AimTweakables tweakables;
  AutoMeleeState autoMeleeState;
  int autoMeleeTargetEnt;
  float autoMeleePitch;
  float autoMeleePitchTarget;
  float autoMeleeYaw;
  float autoMeleeYawTarget;
  AimScreenTarget screenTargets[64];
  int screenTargetCount;
};

/* 3903 */
struct bot_sentient_info_t
{
  int lastKnownFacingTime;
  float lastKnownFacingYaw;
  float lastPathFacingYaw;
  int lastUpdateTime;
  int nextSightValueUpdate;
  float totalSightValue;
  float nextSightThreshold;
  int firstKnownTime;
  int searchedKnownTime;
  int lastThreatValue;
  int lastHardwareSightCheckTime;
  unsigned __int32 canSeeHardware : 1;
  int lastTargetCheckTime;
  unsigned __int32 canTargetSentient : 1;
  unsigned __int32 hasLOStoAerialEntity : 1;
};

/* 3904 */
struct ai_search_node_t
{
  unsigned __int32 nodeIndex : 14;
  unsigned __int32 priority : 13;
  unsigned __int32 framesVisible : 5;
};

/* 3905 */
struct ai_search_t
{
  float searchOrigin[3];
  pathnode_t *nodeNearestSearchOrigin;
  unsigned __int16 totalNodeCount;
  unsigned __int16 currentNodeCount;
  int currentNodePicked;
  float percentofNodesToSearch;
  float highestPriorityDistScalar;
  float maxSearchDistScalar;
  ai_search_type_t mode;
  ai_search_node_t nodes[128];
};

/* 3906 */
struct __cppobj __declspec(align(8)) bot_info_t : ai_common_t
{
  playerState_s *playerState;
  usercmd_s *lastUserCmd;
  int flags;
  bot_goal_t scriptGoal;
  bot_goal_t activeGoal;
  int scriptGoalNotified;
  int stuckReactionTime;
  unsigned __int16 stuckFrames;
  __int16 stuckPathLen;
  int stuckCheckGroundTime;
  int traversal;
  float stuckFinalGoal[3];
  int lastPathCalcTime;
  int noPathFoundTime;
  int noPathFoundTimeLast;
  int scriptGoalIdleLast;
  int scriptGoalIdleTime;
  int scriptGoalReachedTime;
  int pathProgressTime;
  float pathProgressLast[3];
  int hideFromEntNum;
  float hideFromLastPos[3];
  int hideFromTime;
  float hideFromRange;
  int hideFromLastNode;
  bot_path_t scriptPathStyle;
  int aerialEnemyLockOnNode;
  int lastBadPath;
  char pathNodeMask[512];
  int scriptMoveTime;
  float scriptMoveYaw;
  float scriptMoveSpeed;
  int scriptMoveRemoteControl;
  int scriptMoveStickSwap;
  int scriptUseButtonEndTime;
  int scriptADSButtonEndTime;
  float scriptedGrenadeTarget[3];
  int scriptedGrenadeStopTime;
  int scriptedGrenadeTime;
  bot_scripted_grenade_type_t scriptedGrenadeType;
  int scriptFlags;
  int scriptPress;
  bot_enemy_track_t enemyTrack;
  float inaccuracy;
  float twitchOffsetPos[2];
  float twitchOffsetRot[2];
  float awareness;
  float targetHeadBias;
  AimAssistSharedGlobals aaSharedGlob;
  float eyeAngles[3];
  bot_sentient_info_t botSentientInfo[60];
  Weapon scriptWeapon;
  int weaponDelayGraceTime;
  int weaponDelayGraceTimeReset;
  int weaponDelayEndTime;
  int weaponDelayAdsTime;
  int weaponDelayForOffhand;
  float weaponFireWaitArcCos;
  float kickAVel[3];
  float kickAngles[3];
  int canHoldBreath;
  int checkedCanHoldBreath;
  int weaponRiotShieldTime;
  float grenadeThrowTarget[3];
  int grenadeDelayTime;
  int grenadeCheckTime;
  int grenadeStartTime;
  int grenadeHangTime;
  float grenadeLaunchVel[3];
  Weapon grenadeWeap;
  float grenadePitch;
  float grenadePitchDesired;
  int grenadePitchLastCheck;
  int grenadeFiredTime;
  int grenadeFlags;
  int grenadeLastInSightCheck;
  int nodeNegotStart;
  int nodeNegotEnd;
  int traverseStartTime;
  int traverseEndTime;
  int lastTimeOnLadder;
  int traverseJumpTime;
  int traverseProgressTime;
  int traverseProgressJumps;
  float traverseProgressLoc[3];
  int traverseAvoidTime;
  int traverseWaitingTime;
  int strafeCheckTime;
  float strafeDir[3];
  char combatStrafeDir;
  int combatStrafeCheckTime;
  char currentStanceFlags;
  char currentForceStance;
  int nextProneTime;
  int nextCrouchTime;
  int nextStandTime;
  int crouchEndTime;
  int proneEndTime;
  int nextCrouchCheckTime;
  int lastDiveCheckTime;
  int slideDesiredTime;
  float lookAtPoint[3];
  int lookAtTime;
  int forceFireTime;
  bot_look_t lookAtType;
  ai_search_t currentAISearch;
  int aiSearchScriptGoalType;
  float aiSearchScriptGoalPos[3];
  int movementFrozenUntil;
  int nextTimeCanFreezeMovement;
  float anglesWhenFrozen[3];
  int searchLookNext;
  float searchLookPoint[3];
  unsigned __int16 searchLookNearestNode;
  unsigned __int16 searchLookNodeCount;
  int searchLookNodes[10];
  int searchLookVisTime[10];
  int lastAllyCalcTime;
  int lastFrozenTime;
  int randomInputEndTime;
  int lastRadarPing;
  int lastXRayUpdate;
  int lastADSPressTime;
  int lastHybridPressTime;
  int lastLongRangeTime;
  int lastFireFromHipRangeTime;
  int lastBreakAttack;
  int lastCornerCombat;
  int lastAudioDistraction;
  int lastTwitchPosition;
  int lastTwitchAngles;
  int lastKnifeThrowCheck;
};

/* 3907 */
struct __cppobj __declspec(align(8)) scripted_agent_goal_t : ai_goal_t
{
  EntHandle hEnt;
};

/* 3908 */
struct __declspec(align(4)) ScrAgent_TrajectoryInfo_t
{
  float startPos[3];
  float endPos[3];
  float initialVelXY;
  float initialVelZ;
  unsigned int startTime;
  unsigned int endTime;
  unsigned int notifyTime;
  bool bNotified;
  bool bComplete;
};

/* 3909 */
struct ScrAgent_LerpInfo_t
{
  float startPos[3];
  float endPos[3];
  unsigned int startTime;
  unsigned int endTime;
  float accumulatedZ;
};

/* 3910 */
struct __declspec(align(4)) ScrAgent_AnimRelativeInfo_t
{
  float mtx[4][3];
  float originError[3];
  unsigned __int16 animIdx;
};

/* 3911 */
union $8E4EC21F690985810DE39B13EA3B9AB1
{
  ScrAgent_TrajectoryInfo_t trajectory;
  ScrAgent_LerpInfo_t lerp;
  ScrAgent_AnimRelativeInfo_t relative;
};

/* 3912 */
struct ScrAgent_AnimMovement_t
{
  $8E4EC21F690985810DE39B13EA3B9AB1 ___u0;
};

/* 3913 */
struct __cppobj __declspec(align(8)) scripted_agent_info_t : ai_common_t
{
  ScriptedAgentState_t state;
  ScriptedAgentAnimMode_t animMode;
  ScriptedAgentPhysicsMode_t physicsMode;
  ScriptedAgentOrientMode_t orientMode;
  unsigned __int16 onEnterScriptThread;
  scripted_agent_goal_t scriptGoal;
  float waypoint[3];
  unsigned __int16 avoidEntNum;
  float xyAnimScale;
  float zAnimScale;
  float finalDesiredAngles[3];
  float moveHistory[10][3];
  int moveHistoryIndex;
  float maxTurnSpeed;
  float maxTurnSpeedForSmoothing;
  float jumpCost;
  float traverseCost;
  float runCost;
  float wallrunCost;
  ScrAgent_AnimMovement_t movementInfo;
  unsigned __int16 surfaceType;
  __int16 traverseSoonNotifyDist;
  __int16 stopSoonNotifyDist;
  __int16 sharpTurnNotifyDist;
  unsigned __int16 pathTraversalPermissions;
  bool bUse3DNav;
  bool bUseWaypoint;
  bool bStopSoonNotified;
  bool bTraverseSoonNotified;
  bool bUseFinalDesiredAngles;
  bool bOrientedNav;
  bool bInSolid;
  bool bStateLocked;
  EntHandle lookTargetEnt;
  float hindLegsTraceOffset;
};

/* 3914 */
struct __declspec(align(2)) bot_mem_event_t
{
  bot_mem_type_t type;
  int time;
  float location1[3];
  float location2[3];
  Weapon weapon;
  __int16 entNum;
  char flags;
};

/* 3915 */
struct bot_mem_t
{
  bot_mem_event_t events[32];
  int eventNext;
};

/* 3916 */
struct bot_match_data_t
{
  bot_difficulty_t difficulty;
  bot_personality_t personality;
  bot_mem_t botMemory;
  unsigned int playerCard[2];
  int flags;
  float minInaccuracy;
  float maxInaccuracy;
  float sniperInaccuracyScale;
  float minAimResponse;
  float maxAimResponse;
  float minFireTime;
  float maxFireTime;
  float minGraceDelayFireTime;
  float maxGraceDelayFireTime;
  float adsDelayFireTime;
  float adsDelayFireTimeScoped;
  float fireAtDeadTime;
  float lookAtDeadTime;
  float averageEnemySightTime;
  float reactionTime;
  float meleeReactionTime;
  float strafeChance;
  float diveChance;
  float slideChance;
  float cornerFireChance;
  float cornerJumpChance;
  float throwKnifeChance;
  float meleeDist;
  float meleeChargeDist;
  float fireFromHipDist;
  float sprintDistance;
  float crouchDistance;
  float goalRadius;
  float diveDelay;
  float targetLeadBias;
  float yawSpeed;
  float yawSpeedAds;
  float pitchSpeed;
  float pitchSpeedAds;
  float minCrouchTime;
  float maxCrouchTime;
  float grenadeCookPrecision;
  float breakMelee;
  float visionBlinded;
  float hearingDeaf;
  float turnAroundPenalty;
  float awareViewAngle;
  float strategyLevel;
  float intelligentSprintLevel;
  float seeHardwareChance;
  float targetHardwareChance;
  float targetVehicleChance;
  float holdBreathChance;
  float launcherRespawnChance;
  float avoidDangerousNodesChance;
  float avoidSkyPercent;
  float intelligentReload;
};

/* 3917 */
union $7DECB25CCCFDEBBB1553DC48CD2C370A
{
  bot_info_t botInfo;
  scripted_agent_info_t scriptedAgentInfo;
};

/* 3918 */
struct __declspec(align(8)) bot_data_t
{
  $7DECB25CCCFDEBBB1553DC48CD2C370A ___u0;
  bot_match_data_t botMatchData;
  int bIsScriptedAgent;
};

/* 3919 */
struct __declspec(align(8)) pathsort_s
{
  pathnode_t *node;
  float metric;
};

/* 3920 */
struct __declspec(align(4)) MigrationClient
{
  MigrationClientState state;
  int attempts;
  int msgTimeout;
  int rating;
  int cantTalkToClientCount;
  int nextSendTime;
  bool timedOut;
  bool complete;
};

/* 3921 */
struct Block
{
  int num;
  int size;
  int timeout;
};

/* 3922 */
struct __declspec(align(4)) MigrationGlobals
{
  MigrationState state;
  MigrationClient clients[12];
  Block window[32];
  int newHost;
  int totalSize;
  int block;
  unsigned int windowIndex;
  bool active;
  int blocksPerFrame;
  int migrationCount;
  int migrationTime;
  char reason[64];
  int giveUpTime;
  int flags;
  BandwidthTestData bandwidthTestData;
  BandwidthTestInput bandwidthTestInput;
  int startTime;
  int broadcastTime;
  MigrationVerboseState verboseState;
  int verboseData;
  int sendDuration;
  bool eventLogged;
};

/* 3923 */
struct MigrationMessage
{
  const char *string;
  void (__cdecl *func)(const int, msg_t *);
};

/* 3924 */
struct PlayerPartyData
{
  bdSecurityID partyID;
  bool areWeHost;
};

/* 3925 */
struct RegisteredPartiesInMatch
{
  PlayerPartyData record[30];
};

/* 3926 */
struct __declspec(align(8)) ucmd_t
{
  const char *name;
  void (__cdecl *func)(client_t *);
  int allowFromOldServer;
};

/* 3927 */
struct bot_score_item_s
{
  int object;
  int score;
};

/* 3928 */
struct bot_score_parms_s
{
  int entityNum;
  bot_score_type_t scoreType;
  int integer1;
  int integer2;
  float vector1[3];
  float vector2[3];
  int flags;
};

/* 3929 */
struct bot_zone_count_cmp_t
{
  bot_zone_count_t count;
  bot_zone_count_cmp_type_t type;
  int value;
};

/* 3930 */
struct bot_mem_iterator_t
{
  char index[36];
  char stopIndex[36];
};

/* 3931 */
struct bot_score_func_s
{
  int (__cdecl *scoreFunc)(int, bot_score_parms_s *);
  void (__cdecl *prepFunc)(bot_score_item_s *, int, bot_score_parms_s *);
};

/* 3932 */
struct std::pair<pathsort_s *,pathsort_s *>
{
  pathsort_s *first;
  pathsort_s *second;
};

/* 3933 */
struct std::pair<bot_score_item_s *,bot_score_item_s *>
{
  bot_score_item_s *first;
  bot_score_item_s *second;
};

/* 3934 */
struct __cppobj std::_Nonscalar_ptr_iterator_tag
{
};

/* 3935 */
struct __declspec(align(4)) bot_zone_data_t
{
  unsigned __int16 team;
  float indoorPercent;
  char count[10];
};

/* 3936 */
struct bot_sentient_history_t
{
  int lastCampCheckTime;
  float lastCampCheckPosition[3];
};

/* 3937 */
struct __declspec(align(8)) bot_match_data_setting_t
{
  const char *name;
  int offset;
  int flag;
  int hash;
};

/* 3938 */
struct __declspec(align(2)) AimInput
{
  float deltaTime;
  float deltaTimeScaled;
  float pitch;
  float pitchAxis;
  float pitchMax;
  float yaw;
  float yawAxis;
  float yawMax;
  float forwardAxis;
  float rightAxis;
  int buttons;
  LocalClientNum_t localClientNum;
  unsigned __int16 meleeChargeEnt;
  char meleeChargeDist;
};

/* 3939 */
struct __declspec(align(2)) AimOutput
{
  float pitch;
  float yaw;
  unsigned __int16 meleeChargeEnt;
  char meleeChargeDist;
};

/* 3940 */
struct badplace_arc_t
{
  float origin[3];
  float radius;
  float halfheight;
  float angle0;
  float angle1;
};

/* 3941 */
struct __declspec(align(4)) AimAssistSharedPlayerState
{
  Weapon weapon;
  int weaponState;
  int weapFlags;
  int meleeChargeEnt;
  int pm_flags;
  bool isThirdPerson;
  bool isExtendedMelee;
};

/* 3942 */
struct weaponState_t
{
  playerState_s *ps;
  float xyspeed;
  float frametime;
  float fLastIdleFactor;
  int time;
  int damageTime;
  float v_dmg_pitch;
  float v_dmg_roll;
  float baseAngles[3];
  float baseOrigin[3];
  float recoilAngles[3];
  float recoilSpeed[3];
  float swayAngles[3];
  float swayOrigin[3];
  float swayViewAngles[3];
  float bobAngles[3];
  int shellShockStart;
  int shellShockDuration;
  int shellShockFadeTime;
};

/* 3943 */
struct __declspec(align(8)) viewState_t
{
  playerState_s *ps;
  int damageTime;
  int time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float xyspeed;
  float frametime;
  float fLastIdleFactor;
};

/* 3944 */
struct agent_fields_s
{
  scr_string_t *name;
  unsigned int canonicalString;
  int ofs;
  fieldtype_t type;
  void (__cdecl *setter)(gagent_s *, agent_fields_s *);
  void (__cdecl *getter)(gagent_s *, agent_fields_s *);
};

/* 3945 */
struct function_stack_t
{
  const char *pos;
  unsigned int localId;
  unsigned int localVarCount;
  VariableValue *top;
  VariableValue *startTop;
};

/* 3946 */
struct __declspec(align(8)) function_frame_t
{
  function_stack_t fs;
  int topType;
};

/* 3947 */
struct scrVmPub_t
{
  unsigned int *localVars;
  VariableValue *maxstack;
  int function_count;
  function_frame_t *function_frame;
  VariableValue *top;
  unsigned int inparamcount;
  unsigned int outparamcount;
  function_frame_t function_frame_start[32];
  VariableValue stack[2048];
};

/* 3948 */
struct scrVmDebugPub_t
{
  int dummy;
};

/* 3949 */
struct CanonicalString
{
  unsigned int stringOffsets[4096];
  char stringBuffer[49152];
};

/* 3950 */
struct __declspec(align(8)) scrCompilePub_t
{
  unsigned int loadedscripts;
  unsigned int scriptsPos;
  unsigned int scriptsCount;
  CanonicalString *canonicalString;
  unsigned int canonicalStringBufferSize;
  unsigned int programLen;
  unsigned __int16 canonicalStringForOrigin;
  bool script_loading;
};

/* 3951 */
struct __declspec(align(4)) scrAnimPub_t
{
  unsigned int animtrees;
  unsigned int animtree_node;
  unsigned int animTreeNames;
  scr_animtree_t xanim_lookup[2][128];
  unsigned int xanim_num[2];
  unsigned int animTreeIndex;
  bool animtree_loading;
};

/* 3952 */
struct scrVmGlob_t
{
  int loading;
  int starttime;
  unsigned int localVarsStack[2048];
  VariableValue eval_stack[2];
};

/* 3953 */
struct scrVarDebugPub_t
{
  bool dummy;
};

/* 3954 */
struct scr_classStruct_t
{
  unsigned __int16 id;
  unsigned __int16 entArrayId;
  char charId;
  const char *name;
};

/* 3955 */
struct $850776BF090FAFF484F9CD75F25DE23D
{
  unsigned __int16 prev;
  unsigned __int16 next;
};

/* 3956 */
union $4DDD577F5C85114F40967F144B35CFEC
{
  unsigned __int16 size;
  unsigned __int16 entnum;
  unsigned __int16 nextEntId;
  unsigned __int16 self;
};

/* 3957 */
struct $1A7C66D104963BD704879DC67E537689
{
  unsigned __int16 refCount;
  $4DDD577F5C85114F40967F144B35CFEC u;
};

/* 3958 */
union $E685E6A6306E9046DA3B6C4F11F454A1
{
  $850776BF090FAFF484F9CD75F25DE23D f;
  $1A7C66D104963BD704879DC67E537689 o;
};

/* 3959 */
union $B5C6943E030A6311D0C375231C48B654
{
  unsigned int type;
  unsigned int classnum;
  unsigned int notifyName;
  unsigned int waitTime;
  unsigned int parentLocalId;
};

/* 3960 */
struct ObjectVariableValue
{
  $E685E6A6306E9046DA3B6C4F11F454A1 u;
  $B5C6943E030A6311D0C375231C48B654 w;
};

/* 3961 */
struct ObjectVariableChildren
{
  unsigned __int16 firstChild;
  unsigned __int16 lastChild;
};

/* 3962 */
union $30B2441433378ED6011FB6FDA1664897
{
  $850776BF090FAFF484F9CD75F25DE23D f;
  VariableUnion u;
};

/* 3963 */
struct $56D04237E6FDF8AF9F8BC894CC36B067
{
  unsigned __int16 name_hi;
  unsigned __int16 parentId;
};

/* 3964 */
union ChildBucketMatchKeys
{
  $56D04237E6FDF8AF9F8BC894CC36B067 keys;
  unsigned int match;
};

/* 3965 */
struct __declspec(align(8)) ChildVariableValue
{
  $30B2441433378ED6011FB6FDA1664897 u;
  unsigned __int16 next;
  char type;
  char name_lo;
  ChildBucketMatchKeys k;
  unsigned __int16 nextSibling;
  unsigned __int16 prevSibling;
};

/* 3966 */
struct scrVarGlob_t
{
  ObjectVariableValue objectVariableValue[36864];
  ObjectVariableChildren objectVariableChildren[36864];
  unsigned __int16 childVariableBucket[65536];
  ChildVariableValue childVariableValue[102400];
};

/* 3967 */
union $FA152364550AB5CDF6142CD3B51D5E84
{
  unsigned int prev;
  unsigned int str;
};

/* 3968 */
struct HashEntry
{
  unsigned int status_next;
  $FA152364550AB5CDF6142CD3B51D5E84 u;
};

/* 3969 */
struct __declspec(align(128)) scrStringGlob_t
{
  HashEntry hashTable[65536];
  bool inited;
  HashEntry *nextFreeEntry;
};

/* 3970 */
struct __declspec(align(8)) SourceBufferInfo
{
  const char *codePos;
  char *buf;
  const char *sourceBuf;
  int len;
  int sortedIndex;
  bool archive;
};

/* 3971 */
struct MemoryNode
{
  unsigned int padding[3];
};

/* 3972 */
struct __declspec(align(128)) scrMemTreeGlob_t
{
  MemoryNode nodes[262144];
  unsigned int nodeBits[8192];
  unsigned int sizeBits[5];
  unsigned int head[19];
  unsigned int backtrackAmount[19];
};

/* 3973 */
struct PrecacheEntry
{
  scr_string_t filename;
};

/* 3974 */
struct scrCompileGlob_t
{
  unsigned int filePosId;
  PrecacheEntry *precachescriptList;
};

/* 3975 */
struct __declspec(align(8)) scrAnimGlob_t
{
  const char *start;
  const char *pos;
  unsigned __int16 using_xanim_lookup[2][128];
  int bAnimCheck;
};

/* 3976 */
struct ScriptableWorldMap
{
  unsigned __int16 partCount;
  unsigned __int16 indices[992];
};

/* 3977 */
struct ScriptableEventExpireItem
{
  unsigned __int16 prevItemIndex;
  unsigned __int16 nextItemIndex;
};

/* 3978 */
struct __declspec(align(2)) ScriptableEventExpireList
{
  unsigned __int16 headPartIndex[6];
  char currentIndex;
};

/* 3979 */
struct ScriptableWorldEvents
{
  ScriptableEventExpireItem itemData[992];
  ScriptableEventExpireList itemList;
};

/* 3980 */
struct __declspec(align(8)) ScriptableEventParams
{
  ScriptableContext context;
  ScriptableEventCallbackTable *callbacks;
  ScriptableInstance *instance;
  ScriptableDamageEvent *damageEvent;
  unsigned int scriptableIndex;
  unsigned int partIndex;
  unsigned int objectIndex;
};

/* 3981 */
struct ScriptableEventCallbackTable
{
  void (__cdecl *shutdownEventsCallback)(ScriptableEventParams *);
  void (__cdecl *runEventsCallback)(ScriptableEventParams *);
  void (__cdecl *updateVisibilityCallback)(ScriptableEventParams *);
  void (__cdecl *updateWorldCallback)(ScriptableEventParams *);
  void (__cdecl *damageNotifyCallback)(ScriptableEventParams *, const unsigned int, const unsigned int, const unsigned int);
};

/* 3982 */
const struct __declspec(align(8)) ScriptableDamageEvent
{
  ScriptableContext context;
  ScriptableEventCallbackTable *callbacks;
  ScriptableInstance *instance;
  unsigned int hitObjectId;
  unsigned int scriptableIndex;
  unsigned int inflictorEntNum;
  unsigned int inflictorScriptableIndex;
  entityState_s *inflictorEntState;
  unsigned int attackerEntNum;
  entityState_s *attackerEntState;
  float start[3];
  float end[3];
  scr_string_t partName;
  int mod;
  int damage;
  int dFlags;
  unsigned int modelIndex;
  Weapon weapon;
  int isAlternate;
};

/* 3983 */
struct ScriptableRadiusDamageCallbackTable
{
  void (__cdecl *getInstance)(ScriptableContext, const unsigned int, ScriptableInstance **, unsigned int *);
  void (__cdecl *damage)(ScriptableContext, const unsigned int, const unsigned int, const unsigned int, const unsigned int, const float *, const float *, const int, Weapon, const bool, const int);
  unsigned int (__cdecl *areaScriptables)(ScriptableContext, Bounds *, unsigned int *, unsigned int);
  int (__cdecl *brushTrace)(int, const float *, const float *, Bounds *, unsigned int, int);
  int (__cdecl *staticTrace)(const float *, const float *, int);
};

/* 3984 */
struct ScriptableAreaParams
{
  Bounds *bounds;
  unsigned int *list;
  unsigned int count;
  unsigned int maxcount;
};

/* 3985 */
struct ScriptableEventTypeData
{
  const char *fullName;
  const char *parseName;
};

/* 3986 */
struct ScriptableEventParseParameter
{
  ScriptableEventType eventType;
  const char *name;
  char *sourceFolder;
};

/* 3987 */
struct __declspec(align(8)) ScriptableFieldData
{
  const char *name;
  ScriptableFieldType fieldType;
  int offset;
  int copyOffset;
  void (__cdecl *setter)(char *, const char *, int, unsigned int);
  unsigned int setterParam;
};

/* 3988 */
struct __declspec(align(8)) ScriptableFieldSet
{
  ScriptableFieldData *fields;
  unsigned int numFields;
};

/* 3989 */
struct __declspec(align(2)) ScriptableAnimPlayback
{
  int serverTime;
  unsigned __int16 newStartTime;
  unsigned __int16 newPlaybackRate;
  unsigned __int16 oldStartTime;
  unsigned __int16 oldPlaybackRate;
  char oldAnimStateIndex;
  char oldAnimEventIndex;
  bool useBlending;
};

/* 3990 */
struct ScriptableLightTrans
{
  int startTime;
  float color[3];
  float radius;
  float tgtIntensity;
  float tgtRadius;
  int transTime;
};

/* 3991 */
struct ScriptableSunlightTrans
{
  int startTime;
  float startColor[3];
  float startIntensity;
  float targetIntensity;
  float startAngles[3];
  float targetAngles[3];
  int transTime;
};

/* 3992 */
struct ScriptableUpdateList
{
  unsigned __int16 head;
  unsigned __int16 tail;
};

/* 3993 */
struct CgEntCollTree
{
  float dist;
  unsigned __int16 axis;
  $222A11CE4B6EBFDB75E74DF742F9BFF1 u;
  unsigned __int16 child[2];
};

/* 3994 */
struct __declspec(align(4)) CgEntCollSector
{
  CgEntCollTree tree;
  unsigned __int16 entListHead;
};

/* 3995 */
struct CgEntCollNode
{
  unsigned __int16 sector;
  unsigned __int16 nextEntInSector;
  float linkMins[2];
  float linkMaxs[2];
};

/* 3996 */
struct tagTHREADNAME_INFO
{
  unsigned int type;
  const char *name;
  unsigned int threadId;
  unsigned int flags;
};

/* 3997 */
struct __declspec(align(4)) NetField
{
  int offset;
  int bits;
  char changeHints;
};

/* 3998 */
struct __declspec(align(8)) NetFieldList
{
  NetField *array;
  unsigned int count;
};

/* 3999 */
struct PastTitleConstants
{
  unsigned int titleID;
  unsigned int viewID;
  int prestigeColumnID;
};

/* 4000 */
struct loopmsg_t
{
  char data[1264];
  int datalen;
  int port;
};

/* 4001 */
struct sv_loopback_t
{
  loopmsg_t msgs[64];
  volatile int get;
  volatile int send;
};

/* 4002 */
struct cl_loopback_t
{
  loopmsg_t msgs[12];
  volatile int get;
  volatile int send;
};

/* 4003 */
struct DeferredMsg
{
  netadr_s addr;
  char data[1264];
  int datalen;
  netsrc_t targetLocalNetID;
};

/* 4004 */
struct DeferredQueue
{
  DeferredMsg msgs[16];
  volatile int get;
  volatile int send;
};

/* 4005 */
struct AdrToStringBuffers
{
  char adrToStringBuffers[3][64];
};

/* 4006 */
struct ip4adr_s
{
  char ip[4];
  unsigned __int16 port;
};

/* 4007 */
struct __declspec(align(8)) MigrationGlob
{
  char *buffer;
  int size;
};

/* 4008 */
struct StringHashFNV1a64_t
{
  unsigned __int64 m_hash;
};

/* 4009 */
struct StringHashFNV1a32_t
{
  unsigned int m_hash;
};

/* 4010 */
struct StringHashSDBM_t
{
  unsigned int m_hash;
};

/* 4011 */
struct StringHashDJB2_t
{
  unsigned int m_hash;
};

/* 4012 */
struct StringHashDVar_t
{
  int m_hash;
};

/* 4013 */
struct DvarSetConfigInfo
{
  int start;
  int max;
  int bit;
};

/* 4014 */
struct GamePadCheat
{
  GamePadButton codeButtons[10];
  GamePadButton holdButtons[2];
  void (__cdecl *unlockFunc)();
  const char *unlockCmd;
  const char *menu;
  const char *sound;
  int buttonTimer;
  int codeIndex;
};

/* 4015 */
struct SlowMotionCommon
{
  bool enable;
  int type;
  float startTimescale;
  float endTimescale;
  int startMsec;
  int endMsec;
  float viewTimescale;
  bool viewEnable;
  int viewType;
  float viewStartTimescale;
  float viewEndTimescale;
  int viewStartMsec;
  int viewEndMsec;
};

/* 4016 */
struct field_t
{
  int cursor;
  int scroll;
  int drawWidth;
  int widthInPixels;
  float charHeight;
  int fixedSize;
  char buffer[256];
};

/* 4017 */
struct XZoneInfo
{
  const char *name;
  int allocFlags;
  int freeFlags;
};

/* 4018 */
struct __cppobj bdCore
{
};

/* 4019 */
struct TaskManagerGlob
{
  unsigned int constructedTaskSetCount;
  OverlappedTaskSet *constructedTaskSets[32];
  const char *constructedTaskSetNames[32];
};

/* 4020 */
struct ComStreamedSyncSwapBuffer
{
  ComStreamedSyncModelList modelLists[2];
};

/* 4021 */
struct __declspec(align(8)) DSPlayerData
{
  DSPlayerState state;
  DSPlayerState oldState;
  unsigned __int64 xuid;
  bdSecurityID privSessionId;
  int isGuestAccount;
  int team;
  int natType;
  bool snapshotProcessed;
  unsigned int score;
  unsigned int deaths;
  ClientCustomizationInfo customization;
};

/* 4022 */
struct contentServerSearchInfo
{
  bdTag *m_tags;
  int m_numTags;
  int m_startIndex;
  int m_maxFileIDs;
  bdFileID *m_outFileIDs;
  int *m_outFileCount;
  int *m_outTotalFileCount;
  bool m_orderNewestFirst;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4023 */
struct contentServerWriteFileInfo
{
  unsigned __int16 m_fileSlot;
  void *m_fileData;
  unsigned int m_fileSize;
  const char *m_fileName;
  unsigned __int16 m_category;
  const void *m_thumbData;
  unsigned int m_thumbDataSize;
  unsigned int m_numTags;
  bdTag *m_tags;
  bdUploadInterceptor *m_uploadHandler;
  unsigned int (__cdecl *m_dataCallback)(void *, unsigned int, unsigned int);
  void (__cdecl *m_successCallback)(const int, unsigned __int64);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4024 */
struct contentServerSetTagsInfo
{
  unsigned __int64 m_entityID;
  bdTag *m_tags;
  int m_numTags;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4025 */
struct contentServerCopyFromOtherUserInfo
{
  unsigned __int64 m_userFileID;
  unsigned __int16 m_fileSlot;
  char *m_fileName;
  unsigned __int16 m_category;
  void *m_metaData;
  unsigned int m_metaDataSize;
  unsigned int m_numTags;
  bdTag *m_tags;
  bdFileID *m_outFileID;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4026 */
struct contentServerUploadSummaryInfo
{
  unsigned __int64 m_fileID;
  void *m_summaryData;
  unsigned int m_summaryDataSize;
  void *m_metaData;
  unsigned int m_metaDataSize;
  unsigned int m_numTags;
  bdTag *m_tags;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4027 */
struct contentServerGetDescriptorsInfo
{
  bdFileID *m_fileIDs;
  int m_numFiles;
  bdFileMetaData *m_outDescriptors;
  int *m_outDescriptorCount;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4028 */
struct contentServerReadFileInfo
{
  unsigned __int64 m_fileID;
  unsigned int m_fileSize;
  char *m_buffer;
  unsigned int m_bufferSize;
  void *m_cacheBuffer;
  bool m_isStreamed;
  bdDownloadInterceptor *m_downloadHandler;
  void (__cdecl *m_dataCallback)(void *, unsigned int, unsigned int, unsigned int);
  void (__cdecl *m_successCallback)(const int, dwCSReadFileTask *);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4029 */
struct contentServerRemoveFileInfo
{
  unsigned __int16 m_fileSlot;
  void (__cdecl *m_successCallback)(const int);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4030 */
struct contentServerListAllPublisherFilesInfo
{
  unsigned int m_startDate;
  unsigned __int16 m_category;
  bdFileMetaData *m_outDescriptors;
  unsigned __int16 m_maxNumResults;
  int *m_outDescriptorCount;
  unsigned __int16 m_offset;
  char *m_fileName;
  void (__cdecl *m_successCallback)(const int, const int);
  void (__cdecl *m_failureCallback)(const int, const int, bdLobbyErrorCode);
};

/* 4031 */
struct contentServerReadPublisherFileInfo
{
  unsigned __int64 m_fileID;
  unsigned int m_fileSize;
  char *m_buffer;
  unsigned int m_bufferSize;
  bdFileMetaData *m_outDescriptors;
  unsigned int m_startByte;
  unsigned int m_endByte;
  void *m_cacheBuffer;
  bool m_loadedFromCache;
  bool m_isStreamed;
  bdDownloadInterceptor *m_downloadHandler;
  void (__cdecl *m_dataCallback)(void *, unsigned int, unsigned int, unsigned int);
  void (__cdecl *m_successCallback)(const int, dwCSReadPublisherFileTask *);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4032 */
struct __cppobj csDownloadInterceptor : bdDownloadInterceptor
{
  dwCSReadFileTask *task;
  unsigned int (__cdecl *callback)(void *, unsigned int, dwCSReadFileTask *);
};

/* 4033 */
struct __cppobj csUploadInterceptor : bdUploadInterceptor
{
  dwCSWriteFileTask *task;
  unsigned int (__cdecl *callback)(void *, unsigned int, unsigned int, dwCSWriteFileTask *);
};

/* 4034 */
struct __cppobj csReadPublisherFileInterceptor : bdDownloadInterceptor
{
  dwCSReadPublisherFileTask *task;
  unsigned int (__cdecl *callback)(void *, unsigned int, dwCSReadPublisherFileTask *);
};

/* 4035 */
struct contentServerDownloadSummaryInfo
{
  unsigned __int64 m_fileID;
  void *m_summaryData;
  unsigned int m_summaryDataSize;
  void (__cdecl *m_successCallback)(int, dwCSDownloadSummaryTask *);
  void (__cdecl *m_failureCallback)(const int, bdLobbyErrorCode);
};

/* 4036 */
struct __declspec(align(4)) EliteCACData
{
  bool checkedForECACFile[1];
  bool checkingForECACFile;
  dwFileTask eliteCACFileTask;
  int activeControllerUI;
  bool disabledControllersForPopup;
};

/* 4037 */
struct MatchDataGlob
{
  int size;
  char matchData[65536];
};

/* 4038 */
struct __declspec(align(8)) MatchDataTags
{
  bdEventLogID matchId;
  bdEventLogID recipieId;
  bdTag tags[60];
  int numTags;
};

/* 4039 */
struct ReservedDataMapping
{
  char mappingName[32];
  int byteOffset;
  int dataSize;
};

/* 4040 */
struct RequiredTask
{
  int failures;
  int backoffs;
  int interval;
  int lastTime;
};

/* 4041 */
struct __declspec(align(2)) playerStorageData
{
  bool useGameStatsSource;
  bool resettingStats;
  StatsSource resetStatsSource;
  bool dontDownloadAtMainMenu;
  bool generateChallenges;
  bool generateExtinctionBonusPool;
};

/* 4042 */
union GamerProfileDataUnion
{
  char byteVal;
  bool boolVal;
  __int16 shortVal;
  int intVal;
  float floatVal;
  const char *stringVal;
};

/* 4043 */
struct GamerProfileData
{
  GamerProfileDataType type;
  GamerProfileDataUnion u;
};

/* 4044 */
struct UIWeaponSetupDef
{
  unsigned int weaponEnum;
  unsigned int attachEnum1;
  unsigned int attachEnum2;
  unsigned int attachEnum3;
  unsigned int camoEnum;
};

/* 4045 */
struct GroupMembership
{
  unsigned int bits[32];
  int dirty;
  int updateTime;
};

/* 4046 */
struct GroupSet
{
  const char *name;
  bool exclusive;
  const char **groupNames;
  int capacity;
  unsigned int start;
};

/* 4047 */
struct csCacheFileDetails_t
{
  bdFileMetaData descriptor;
};

/* 4048 */
struct CmdArgsPrivate
{
  char textPool[8192];
  const char *argvPool[512];
  int usedTextPool[8];
  int totalUsedArgvPool;
  int totalUsedTextPool;
};

/* 4049 */
struct CmdText
{
  char *data;
  int maxsize;
  int cmdsize;
};

/* 4050 */
struct CmdScriptNotify
{
  int clientNum;
  unsigned __int16 cmdIndex;
  scr_string_t notify;
};

/* 4051 */
struct cm_world_t
{
  Bounds bounds;
  unsigned __int16 freeHead;
  worldSector_s sectors[1024];
};

/* 4052 */
struct __declspec(align(8)) areaParms_t
{
  Bounds *bounds;
  unsigned __int16 *list;
  unsigned int count;
  unsigned int maxcount;
  int contentmask;
};

/* 4053 */
struct locTraceWork_t
{
  int contents;
  __declspec(align(16)) TraceExtents extents;
};

/* 4054 */
struct __declspec(align(16)) staticmodeltrace_t
{
  TraceExtents extents;
  int contents;
};

/* 4055 */
struct TriggerCapsuleTest
{
  Bounds bounds;
  float radius;
  float halfHeight;
};

/* 4056 */
struct TriggerCapsuleTrace
{
  Bounds bounds;
  float radius;
  float halfHeight;
  float halfDelta[3];
};

/* 4057 */
struct TriggerCapsuleTraceResults
{
  float enterNumer;
  float enterDenom;
  float leaveNumer;
  float leaveDenom;
};

/* 4058 */
struct TraceCapsuleWork
{
  float start[3];
  float end[3];
  float delta[3];
  float deltaLenSq;
  Bounds bounds;
  float radius;
  float offsetZ;
};

/* 4059 */
struct __declspec(align(8)) traceWork_t
{
  TraceExtents extents;
  float size[3];
  float sizePad;
  float delta[3];
  float deltaLen;
  float deltaLenSq;
  float delta2DLen;
  float delta2DLenSq;
  Bounds bounds;
  int contents;
  bool isPoint;
  bool axialCullOnly;
  ClipInfo *info;
  float radius;
  float offset[3];
  float radiusOffset[3];
  float boundingRadius;
  TraceThreadInfo threadInfo;
  CM_WorldTraceCallbacks *callbacks;
  bool hasZeroDelta[3];
};

/* 4060 */
struct tagEMR
{
  unsigned int iType;
  unsigned int nSize;
};

/* 4061 */
struct _RECTL
{
  int left;
  int top;
  int right;
  int bottom;
};

/* 4062 */
struct tagEMRPOLYLINE
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cptl;
  _POINTL aptl[1];
};

/* 4063 */
struct tagXFORM
{
  float eM11;
  float eM12;
  float eM21;
  float eM22;
  float eDx;
  float eDy;
};

/* 4064 */
struct tagEMRTRANSPARENTBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int cxSrc;
  int cySrc;
};

/* 4065 */
struct tagMIDIINCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4066 */
struct _CLASS_MEDIA_CHANGE_CONTEXT
{
  unsigned int MediaChangeCount;
  unsigned int NewState;
};

/* 4067 */
struct __declspec(align(8)) tagIDLDESC
{
  unsigned __int64 dwReserved;
  unsigned __int16 wIDLFlags;
};

/* 4068 */
struct _SERVICE_PRESHUTDOWN_INFO
{
  unsigned int dwPreshutdownTimeout;
};

/* 4069 */
struct $0C2FFF853753AF47D3E2EB2FEEFA0C96
{
  unsigned int BeginAddress;
  unsigned int EndAddress;
  unsigned int HandlerAddress;
  unsigned int JumpTarget;
};

/* 4070 */
struct _SCOPE_TABLE_ARM
{
  unsigned int Count;
  $0C2FFF853753AF47D3E2EB2FEEFA0C96 ScopeRecord[1];
};

/* 4071 */
struct _TAPE_SET_DRIVE_PARAMETERS
{
  char ECC;
  char Compression;
  char DataPadding;
  char ReportSetmarks;
  unsigned int EOTWarningZoneSize;
};

/* 4072 */
struct tagCBTACTIVATESTRUCT
{
  int fMouse;
  HWND__ *hWndActive;
};

/* 4073 */
struct _NETRESOURCEW
{
  unsigned int dwScope;
  unsigned int dwType;
  unsigned int dwDisplayType;
  unsigned int dwUsage;
  wchar_t *lpLocalName;
  wchar_t *lpRemoteName;
  wchar_t *lpComment;
  wchar_t *lpProvider;
};

/* 4074 */
struct midiproptempo_tag
{
  unsigned int cbStruct;
  unsigned int dwTempo;
};

/* 4075 */
struct _CRYPTOAPI_BLOB
{
  unsigned int cbData;
  char *pbData;
};

/* 4076 */
struct _CRYPT_ALGORITHM_IDENTIFIER
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Parameters;
};

/* 4077 */
struct __declspec(align(8)) _CRYPT_BIT_BLOB
{
  unsigned int cbData;
  char *pbData;
  unsigned int cUnusedBits;
};

/* 4078 */
struct _CERT_PUBLIC_KEY_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
  _CRYPT_BIT_BLOB PublicKey;
};

/* 4079 */
struct _CERT_EXTENSION
{
  char *pszObjId;
  int fCritical;
  _CRYPTOAPI_BLOB Value;
};

/* 4080 */
struct _CERT_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB SerialNumber;
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPTOAPI_BLOB Issuer;
  _FILETIME NotBefore;
  _FILETIME NotAfter;
  _CRYPTOAPI_BLOB Subject;
  _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
  _CRYPT_BIT_BLOB IssuerUniqueId;
  _CRYPT_BIT_BLOB SubjectUniqueId;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 4081 */
struct _CMSG_ENVELOPED_ENCODE_INFO
{
  unsigned int cbSize;
  unsigned __int64 hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *pvEncryptionAuxInfo;
  unsigned int cRecipients;
  _CERT_INFO **rgpRecipients;
};

/* 4082 */
struct _DWORD_BLOB
{
  unsigned int clSize;
  unsigned int alData[1];
};

/* 4083 */
struct __declspec(align(4)) tagRemHGLOBAL
{
  int fNullHGlobal;
  unsigned int cbData;
  char data[1];
};

/* 4084 */
struct _WRITE_USN_REASON_INPUT
{
  unsigned int Flags;
  unsigned int UsnReasonToWrite;
};

/* 4085 */
struct _WSAVersion
{
  unsigned int dwVersion;
  _WSAEcomparator ecHow;
};

/* 4086 */
struct _AFPROTOCOLS
{
  int iAddressFamily;
  int iProtocol;
};

/* 4087 */
struct __declspec(align(8)) _SOCKET_ADDRESS
{
  sockaddr *lpSockaddr;
  int iSockaddrLength;
};

/* 4088 */
struct _CSADDR_INFO
{
  _SOCKET_ADDRESS LocalAddr;
  _SOCKET_ADDRESS RemoteAddr;
  int iSocketType;
  int iProtocol;
};

/* 4089 */
struct tagBLOB
{
  unsigned int cbSize;
  char *pBlobData;
};

/* 4090 */
struct _WSAQuerySetA
{
  unsigned int dwSize;
  char *lpszServiceInstanceName;
  _GUID *lpServiceClassId;
  _WSAVersion *lpVersion;
  char *lpszComment;
  unsigned int dwNameSpace;
  _GUID *lpNSProviderId;
  char *lpszContext;
  unsigned int dwNumberOfProtocols;
  _AFPROTOCOLS *lpafpProtocols;
  char *lpszQueryString;
  unsigned int dwNumberOfCsAddrs;
  _CSADDR_INFO *lpcsaBuffer;
  unsigned int dwOutputFlags;
  tagBLOB *lpBlob;
};

/* 4091 */
struct _CRYPT_ECC_PRIVATE_KEY_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB PrivateKey;
  char *szCurveOid;
  _CRYPT_BIT_BLOB PublicKey;
};

/* 4092 */
struct _QUERY_SERVICE_CONFIGA
{
  unsigned int dwServiceType;
  unsigned int dwStartType;
  unsigned int dwErrorControl;
  char *lpBinaryPathName;
  char *lpLoadOrderGroup;
  unsigned int dwTagId;
  char *lpDependencies;
  char *lpServiceStartName;
  char *lpDisplayName;
};

/* 4093 */
struct _WSANAMESPACE_INFOEXA
{
  _GUID NSProviderId;
  unsigned int dwNameSpace;
  int fActive;
  unsigned int dwVersion;
  char *lpszIdentifier;
  tagBLOB ProviderSpecific;
};

/* 4094 */
struct _TOKEN_PRIMARY_GROUP
{
  void *PrimaryGroup;
};

/* 4095 */
struct PPM_IDLE_STATE_ACCOUNTING
{
  unsigned int IdleTransitions;
  unsigned int FailedTransitions;
  unsigned int InvalidBucketIndex;
  unsigned __int64 TotalTime;
  unsigned int IdleTimeBuckets[6];
};

/* 4096 */
struct __declspec(align(8)) $657719958A12E9A295BC2F4D5264781A
{
  void *hMem;
  unsigned int dwReserved[3];
};

/* 4097 */
struct $03A236B16FC15461493BD6ADF5082600
{
  unsigned int dwCommittedSize;
  unsigned int dwUnCommittedSize;
  void *lpFirstBlock;
  void *lpLastBlock;
};

/* 4098 */
union $08F1FA9143B6DF87167A78038DC7529B
{
  $657719958A12E9A295BC2F4D5264781A Block;
  $03A236B16FC15461493BD6ADF5082600 Region;
};

/* 4099 */
struct _PROCESS_HEAP_ENTRY
{
  void *lpData;
  unsigned int cbData;
  char cbOverhead;
  char iRegionIndex;
  unsigned __int16 wFlags;
  $08F1FA9143B6DF87167A78038DC7529B ___u5;
};

/* 4100 */
struct tagEMREOF
{
  tagEMR emr;
  unsigned int nPalEntries;
  unsigned int offPalEntries;
  unsigned int nSizeLast;
};

/* 4101 */
struct _CERT_ISSUER_SERIAL_NUMBER
{
  _CRYPTOAPI_BLOB Issuer;
  _CRYPTOAPI_BLOB SerialNumber;
};

/* 4102 */
union $1312BEBBAF8E0549E3ECF88356601585
{
  _CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
  _CRYPTOAPI_BLOB KeyId;
  _CRYPTOAPI_BLOB HashId;
};

/* 4103 */
struct _CERT_ID
{
  unsigned int dwIdChoice;
  $1312BEBBAF8E0549E3ECF88356601585 ___u1;
};

/* 4104 */
struct _CRYPT_ATTRIBUTE_TYPE_VALUE
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Value;
};

/* 4105 */
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_BIT_BLOB RecipientPublicKey;
  _CERT_ID RecipientId;
  _FILETIME Date;
  _CRYPT_ATTRIBUTE_TYPE_VALUE *pOtherAttr;
};

/* 4106 */
union $32F296E86B7A2A886BB64B590785DDC4
{
  _CRYPT_ALGORITHM_IDENTIFIER *pEphemeralAlgorithm;
  _CERT_ID *pSenderId;
};

/* 4107 */
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  void *pvKeyEncryptionAuxInfo;
  _CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
  void *pvKeyWrapAuxInfo;
  unsigned __int64 hCryptProv;
  unsigned int dwKeySpec;
  unsigned int dwKeyChoice;
  $32F296E86B7A2A886BB64B590785DDC4 ___u8;
  _CRYPTOAPI_BLOB UserKeyingMaterial;
  unsigned int cRecipientEncryptedKeys;
  _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO **rgpRecipientEncryptedKeys;
};

/* 4108 */
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
{
  _CERT_ID RecipientId;
  _CRYPTOAPI_BLOB EncryptedKey;
  _FILETIME Date;
  _CRYPT_ATTRIBUTE_TYPE_VALUE *pOtherAttr;
};

/* 4109 */
struct __declspec(align(8)) _FILE_INITIATE_REPAIR_OUTPUT_BUFFER
{
  unsigned __int64 Hint1;
  unsigned __int64 Hint2;
  unsigned __int64 Clsn;
  unsigned int Status;
};

/* 4110 */
struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
{
  unsigned __int64 GptAttributes;
};

/* 4111 */
struct __cppobj IPropertyBag : IUnknown
{
};

/* 4112 */
struct __declspec(align(8)) tagPARAMDATA
{
  wchar_t *szName;
  unsigned __int16 vt;
};

/* 4113 */
struct __declspec(align(8)) tagMETHODDATA
{
  wchar_t *szName;
  tagPARAMDATA *ppdata;
  int dispid;
  unsigned int iMeth;
  tagCALLCONV cc;
  unsigned int cArgs;
  unsigned __int16 wFlags;
  unsigned __int16 vtReturn;
};

/* 4114 */
struct __declspec(align(8)) _SID_AND_ATTRIBUTES
{
  void *Sid;
  unsigned int Attributes;
};

/* 4115 */
struct _MEMORY_BASIC_INFORMATION64
{
  unsigned __int64 BaseAddress;
  unsigned __int64 AllocationBase;
  unsigned int AllocationProtect;
  unsigned int __alignment1;
  unsigned __int64 RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
  unsigned int __alignment2;
};

/* 4116 */
struct tagMCI_SAVE_PARMSA
{
  unsigned __int64 dwCallback;
  const char *lpfilename;
};

/* 4117 */
struct _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
{
  unsigned int cbSize;
  int (__cdecl *pfnGet)(void *, _CRYPTOAPI_BLOB *, unsigned int, _CRYPTOAPI_BLOB *, char **, unsigned int *, const wchar_t **, _CRYPTOAPI_BLOB **);
  void (__cdecl *pfnRelease)(unsigned int, void *);
  void (__cdecl *pfnFreePassword)(void *, const wchar_t *);
  void (__cdecl *pfnFree)(void *, char *);
  void (__cdecl *pfnFreeIdentifier)(void *, _CRYPTOAPI_BLOB *);
};

/* 4118 */
struct __declspec(align(4)) tagRemHMETAFILEPICT
{
  int mm;
  int xExt;
  int yExt;
  unsigned int cbData;
  char data[1];
};

/* 4119 */
struct _FAT_STATISTICS
{
  unsigned int CreateHits;
  unsigned int SuccessfulCreates;
  unsigned int FailedCreates;
  unsigned int NonCachedReads;
  unsigned int NonCachedReadBytes;
  unsigned int NonCachedWrites;
  unsigned int NonCachedWriteBytes;
  unsigned int NonCachedDiskReads;
  unsigned int NonCachedDiskWrites;
};

/* 4120 */
struct __cppobj IUriBuilderFactory : IUnknown
{
};

/* 4121 */
struct __cppobj IUriBuilder : IUnknown
{
};

/* 4122 */
struct _ACCESS_REASONS
{
  unsigned int Data[32];
};

/* 4123 */
struct _PRIVILEGE_SET
{
  unsigned int PrivilegeCount;
  unsigned int Control;
  _LUID_AND_ATTRIBUTES Privilege[1];
};

/* 4124 */
struct _SE_ACCESS_REPLY
{
  unsigned int Size;
  unsigned int ResultListCount;
  unsigned int *GrantedAccess;
  unsigned int *AccessStatus;
  _ACCESS_REASONS *AccessReason;
  _PRIVILEGE_SET **Privileges;
};

/* 4125 */
struct PPM_PERFSTATE_EVENT
{
  unsigned int State;
  unsigned int Status;
  unsigned int Latency;
  unsigned int Speed;
  unsigned int Processor;
};

/* 4126 */
struct _PROCESSOR_POWER_POLICY_INFO
{
  unsigned int TimeCheck;
  unsigned int DemoteLimit;
  unsigned int PromoteLimit;
  char DemotePercent;
  char PromotePercent;
  char Spare[2];
  unsigned __int32 AllowDemotion : 1;
  unsigned __int32 AllowPromotion : 1;
  unsigned __int32 Reserved : 30;
};

/* 4127 */
struct _PROCESSOR_POWER_POLICY
{
  unsigned int Revision;
  char DynamicThrottle;
  char Spare[3];
  unsigned __int32 DisableCStates : 1;
  unsigned __int32 Reserved : 31;
  unsigned int PolicyCount;
  _PROCESSOR_POWER_POLICY_INFO Policy[3];
};

/* 4128 */
struct _RTL_SRWLOCK
{
  void *Ptr;
};

/* 4129 */
struct HDRVR__
{
  int unused;
};

/* 4130 */
struct __unaligned __declspec(align(4)) tagMCI_SEEK_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwTo;
};

/* 4131 */
struct _FULL_PTR_XLAT_TABLES
{
  void *RefIdToPointer;
  void *PointerToRefId;
  unsigned int NextRefId;
  XLAT_SIDE XlatSide;
};

/* 4132 */
struct _DOC_INFO_1W
{
  wchar_t *pDocName;
  wchar_t *pOutputFile;
  wchar_t *pDatatype;
};

/* 4133 */
struct _DOC_INFO_2W
{
  wchar_t *pDocName;
  wchar_t *pOutputFile;
  wchar_t *pDatatype;
  unsigned int dwMode;
  unsigned int JobId;
};

/* 4134 */
struct __declspec(align(8)) tagNMHDR
{
  HWND__ *hwndFrom;
  unsigned __int64 idFrom;
  unsigned int code;
};

/* 4135 */
struct tagOFNA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const char *lpstrFilter;
  char *lpstrCustomFilter;
  unsigned int nMaxCustFilter;
  unsigned int nFilterIndex;
  char *lpstrFile;
  unsigned int nMaxFile;
  char *lpstrFileTitle;
  unsigned int nMaxFileTitle;
  const char *lpstrInitialDir;
  const char *lpstrTitle;
  unsigned int Flags;
  unsigned __int16 nFileOffset;
  unsigned __int16 nFileExtension;
  const char *lpstrDefExt;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const char *lpTemplateName;
  void *pvReserved;
  unsigned int dwReserved;
  unsigned int FlagsEx;
};

/* 4136 */
struct _OFNOTIFYEXA
{
  tagNMHDR hdr;
  tagOFNA *lpOFN;
  void *psf;
  void *pidl;
};

/* 4137 */
struct tagPRINTPAGERANGE
{
  unsigned int nFromPage;
  unsigned int nToPage;
};

/* 4138 */
struct tagPDEXA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  HDC__ *hDC;
  unsigned int Flags;
  unsigned int Flags2;
  unsigned int ExclusionFlags;
  unsigned int nPageRanges;
  unsigned int nMaxPageRanges;
  tagPRINTPAGERANGE *lpPageRanges;
  unsigned int nMinPage;
  unsigned int nMaxPage;
  unsigned int nCopies;
  HINSTANCE__ *hInstance;
  const char *lpPrintTemplateName;
  IUnknown *lpCallback;
  unsigned int nPropertyPages;
  _PSP **lphPropertyPages;
  unsigned int nStartPage;
  unsigned int dwResultAction;
};

/* 4139 */
struct __unaligned __declspec(align(2)) tagBITMAPFILEHEADER
{
  unsigned __int16 bfType;
  unsigned int bfSize;
  unsigned __int16 bfReserved1;
  unsigned __int16 bfReserved2;
  unsigned int bfOffBits;
};

/* 4140 */
struct DISPLAYCONFIG_SOURCE_MODE
{
  unsigned int width;
  unsigned int height;
  DISPLAYCONFIG_PIXELFORMAT pixelFormat;
  _POINTL position;
};

/* 4142 */
struct $7479113E2E039E240C688214AA2552D5
{
  void (__cdecl *NotificationRoutine)(_RPC_ASYNC_STATE *, void *, _RPC_ASYNC_EVENT);
  void *hThread;
};

/* 4143 */
struct $EE6D63C028347ABF405051B98DFC5DCC
{
  void *hIOPort;
  unsigned int dwNumberOfBytesTransferred;
  unsigned __int64 dwCompletionKey;
  _OVERLAPPED *lpOverlapped;
};

/* 4144 */
struct __declspec(align(8)) $BC1F97826DE2EDA9F91AB600C63E4ED2
{
  HWND__ *hWnd;
  unsigned int Msg;
};

/* 4145 */
union _RPC_ASYNC_NOTIFICATION_INFO
{
  $7479113E2E039E240C688214AA2552D5 APC;
  $EE6D63C028347ABF405051B98DFC5DCC IOC;
  $BC1F97826DE2EDA9F91AB600C63E4ED2 HWND;
  void *hEvent;
  void (__cdecl *NotificationRoutine)(_RPC_ASYNC_STATE *, void *, _RPC_ASYNC_EVENT);
};

/* 4141 */
struct _RPC_ASYNC_STATE
{
  unsigned int Size;
  unsigned int Signature;
  int Lock;
  unsigned int Flags;
  void *StubInfo;
  void *UserInfo;
  void *RuntimeInfo;
  _RPC_ASYNC_EVENT Event;
  _RPC_NOTIFICATION_TYPES NotificationType;
  _RPC_ASYNC_NOTIFICATION_INFO u;
  __int64 Reserved[4];
};

/* 4146 */
struct __unaligned __declspec(align(2)) DLGTEMPLATE
{
  unsigned int style;
  unsigned int dwExtendedStyle;
  unsigned __int16 cdit;
  __int16 x;
  __int16 y;
  __int16 cx;
  __int16 cy;
};

/* 4149 */
union $03E6EEA160A4BF287FB0A80FBB3D7757
{
  const char *pszTemplate;
  DLGTEMPLATE *pResource;
};

/* 4150 */
union $57038144EE260AFAA32682BDDA1565B6
{
  HICON__ *hIcon;
  const char *pszIcon;
};

/* 4151 */
union $7FFB55FC795D8252EE658A80FE57D74D
{
  HBITMAP__ *hbmHeader;
  const char *pszbmHeader;
};

/* 4147 */
struct _PROPSHEETPAGEA
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $03E6EEA160A4BF287FB0A80FBB3D7757 ___u3;
  $57038144EE260AFAA32682BDDA1565B6 ___u4;
  const char *pszTitle;
  __int64 (__cdecl *pfnDlgProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  __int64 lParam;
  unsigned int (__cdecl *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);
  unsigned int *pcRefParent;
  const char *pszHeaderTitle;
  const char *pszHeaderSubTitle;
  void *hActCtx;
  $7FFB55FC795D8252EE658A80FE57D74D ___u13;
};

/* 4148 */
struct HBITMAP__
{
  int unused;
};

/* 4152 */
struct __declspec(align(8)) _PRINTER_INFO_5A
{
  char *pPrinterName;
  char *pPortName;
  unsigned int Attributes;
  unsigned int DeviceNotSelectedTimeout;
  unsigned int TransmissionRetryTimeout;
};

/* 4153 */
struct tagEMRARC
{
  tagEMR emr;
  _RECTL rclBox;
  _POINTL ptlStart;
  _POINTL ptlEnd;
};

/* 4154 */
struct tagLOGFONTW
{
  int lfHeight;
  int lfWidth;
  int lfEscapement;
  int lfOrientation;
  int lfWeight;
  char lfItalic;
  char lfUnderline;
  char lfStrikeOut;
  char lfCharSet;
  char lfOutPrecision;
  char lfClipPrecision;
  char lfQuality;
  char lfPitchAndFamily;
  wchar_t lfFaceName[32];
};

/* 4155 */
struct tagICONMETRICSW
{
  unsigned int cbSize;
  int iHorzSpacing;
  int iVertSpacing;
  int iTitleWrap;
  tagLOGFONTW lfFont;
};

/* 4156 */
struct _currencyfmtA
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  char *lpDecimalSep;
  char *lpThousandSep;
  unsigned int NegativeOrder;
  unsigned int PositiveOrder;
  char *lpCurrencySymbol;
};

/* 4157 */
struct val_context
{
  int valuelen;
  void *value_context;
  void *val_buff_ptr;
};

/* 4158 */
struct _CERT_CONTEXT
{
  unsigned int dwCertEncodingType;
  char *pbCertEncoded;
  unsigned int cbCertEncoded;
  _CERT_INFO *pCertInfo;
  void *hCertStore;
};

/* 4159 */
struct _CERT_TRUST_STATUS
{
  unsigned int dwErrorStatus;
  unsigned int dwInfoStatus;
};

/* 4160 */
struct _CRL_ENTRY
{
  _CRYPTOAPI_BLOB SerialNumber;
  _FILETIME RevocationDate;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 4161 */
struct _CRL_INFO
{
  unsigned int dwVersion;
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPTOAPI_BLOB Issuer;
  _FILETIME ThisUpdate;
  _FILETIME NextUpdate;
  unsigned int cCRLEntry;
  _CRL_ENTRY *rgCRLEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 4162 */
const struct _CRL_CONTEXT
{
  unsigned int dwCertEncodingType;
  char *pbCrlEncoded;
  unsigned int cbCrlEncoded;
  _CRL_INFO *pCrlInfo;
  void *hCertStore;
};

/* 4163 */
struct __declspec(align(8)) _CERT_REVOCATION_CRL_INFO
{
  unsigned int cbSize;
  _CRL_CONTEXT *pBaseCrlContext;
  _CRL_CONTEXT *pDeltaCrlContext;
  _CRL_ENTRY *pCrlEntry;
  int fDeltaCrlEntry;
};

/* 4164 */
struct _CERT_REVOCATION_INFO
{
  unsigned int cbSize;
  unsigned int dwRevocationResult;
  const char *pszRevocationOid;
  void *pvOidSpecificInfo;
  int fHasFreshnessTime;
  unsigned int dwFreshnessTime;
  _CERT_REVOCATION_CRL_INFO *pCrlInfo;
};

/* 4165 */
struct _CTL_USAGE
{
  unsigned int cUsageIdentifier;
  char **rgpszUsageIdentifier;
};

/* 4166 */
struct _CERT_CHAIN_ELEMENT
{
  unsigned int cbSize;
  _CERT_CONTEXT *pCertContext;
  _CERT_TRUST_STATUS TrustStatus;
  _CERT_REVOCATION_INFO *pRevocationInfo;
  _CTL_USAGE *pIssuanceUsage;
  _CTL_USAGE *pApplicationUsage;
  const wchar_t *pwszExtendedErrorInfo;
};

/* 4167 */
struct MFT_ENUM_DATA_V0
{
  unsigned __int64 StartFileReferenceNumber;
  __int64 LowUsn;
  __int64 HighUsn;
};

/* 4168 */
struct $FEAB62C056B7B19C610CD18E991278A7
{
  unsigned int cbBuf;
  void *pBuf;
};

/* 4169 */
union $BDAA72E4A0728DC43CBE3A729C3A5C3C
{
  unsigned int adwData[2];
  $FEAB62C056B7B19C610CD18E991278A7 Data;
};

/* 4170 */
struct _PRINTER_NOTIFY_INFO_DATA
{
  unsigned __int16 Type;
  unsigned __int16 Field;
  unsigned int Reserved;
  unsigned int Id;
  $BDAA72E4A0728DC43CBE3A729C3A5C3C NotifyData;
};

/* 4171 */
struct CO_MTA_USAGE_COOKIE__
{
  int unused;
};

/* 4172 */
struct _ACTIVATION_CONTEXT_QUERY_INDEX
{
  unsigned int ulAssemblyIndex;
  unsigned int ulFileIndexInAssembly;
};

/* 4173 */
struct tagJOYCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  char szPname[32];
  unsigned int wXmin;
  unsigned int wXmax;
  unsigned int wYmin;
  unsigned int wYmax;
  unsigned int wZmin;
  unsigned int wZmax;
  unsigned int wNumButtons;
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
  unsigned int wRmin;
  unsigned int wRmax;
  unsigned int wUmin;
  unsigned int wUmax;
  unsigned int wVmin;
  unsigned int wVmax;
  unsigned int wCaps;
  unsigned int wMaxAxes;
  unsigned int wNumAxes;
  unsigned int wMaxButtons;
  char szRegKey[32];
  char szOEMVxD[260];
};

/* 4174 */
struct _STARTUPINFOW
{
  unsigned int cb;
  unsigned __int16 *lpReserved;
  unsigned __int16 *lpDesktop;
  unsigned __int16 *lpTitle;
  unsigned int dwX;
  unsigned int dwY;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwXCountChars;
  unsigned int dwYCountChars;
  unsigned int dwFillAttribute;
  unsigned int dwFlags;
  unsigned __int16 wShowWindow;
  unsigned __int16 cbReserved2;
  char *lpReserved2;
  void *hStdInput;
  void *hStdOutput;
  void *hStdError;
};

/* 4175 */
struct _SHCREATEPROCESSINFOW
{
  unsigned int cbSize;
  unsigned int fMask;
  HWND__ *hwnd;
  const wchar_t *pszFile;
  const wchar_t *pszParameters;
  const wchar_t *pszCurrentDirectory;
  void *hUserToken;
  _SECURITY_ATTRIBUTES *lpProcessAttributes;
  _SECURITY_ATTRIBUTES *lpThreadAttributes;
  int bInheritHandles;
  unsigned int dwCreationFlags;
  _STARTUPINFOW *lpStartupInfo;
  _PROCESS_INFORMATION *lpProcessInformation;
};

/* 4176 */
struct _CRYPT_INTERFACE_REG
{
  unsigned int dwInterface;
  unsigned int dwFlags;
  unsigned int cFunctions;
  wchar_t **rgpszFunctions;
};

/* 4177 */
struct _CRYPT_IMAGE_REG
{
  wchar_t *pszImage;
  unsigned int cInterfaces;
  _CRYPT_INTERFACE_REG **rgpInterfaces;
};

/* 4178 */
struct _CRYPT_PROVIDER_REG
{
  unsigned int cAliases;
  wchar_t **rgpszAliases;
  _CRYPT_IMAGE_REG *pUM;
  _CRYPT_IMAGE_REG *pKM;
};

/* 4179 */
struct _CERT_ECC_SIGNATURE
{
  _CRYPTOAPI_BLOB r;
  _CRYPTOAPI_BLOB s;
};

/* 4180 */
struct _CRYPT_ATTRIBUTE
{
  char *pszObjId;
  unsigned int cValue;
  _CRYPTOAPI_BLOB *rgValue;
};

/* 4181 */
struct _CRYPT_ATTRIBUTES
{
  unsigned int cAttr;
  _CRYPT_ATTRIBUTE *rgAttr;
};

/* 4182 */
struct __declspec(align(4)) _FLAGGED_BYTE_BLOB
{
  unsigned int fFlags;
  unsigned int clSize;
  char abData[1];
};

/* 4183 */
union _userHGLOBAL::__MIDL_IWinTypes_0003
{
  int hInproc;
  _FLAGGED_BYTE_BLOB *hRemote;
  __int64 hInproc64;
};

/* 4184 */
struct _userHGLOBAL
{
  int fContext;
  _userHGLOBAL::__MIDL_IWinTypes_0003 u;
};

/* 4185 */
struct HPALETTE__
{
  int unused;
};

/* 4186 */
union $E3CAD8411F77256CCB020CE77D197F57
{
  unsigned int nStartPage;
  const char *pStartPage;
};

/* 4187 */
union $7439137C589281D8AD31E8BAABBB0A0E
{
  _PROPSHEETPAGEA *ppsp;
  _PSP **phpage;
};

/* 4188 */
union $1E8C116C23A2DB11D8EFA040565D0454
{
  HBITMAP__ *hbmWatermark;
  const char *pszbmWatermark;
};

/* 4189 */
struct _PROPSHEETHEADERA_V2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HWND__ *hwndParent;
  HINSTANCE__ *hInstance;
  $57038144EE260AFAA32682BDDA1565B6 ___u4;
  const char *pszCaption;
  unsigned int nPages;
  $E3CAD8411F77256CCB020CE77D197F57 ___u7;
  $7439137C589281D8AD31E8BAABBB0A0E ___u8;
  int (__cdecl *pfnCallback)(HWND__ *, unsigned int, __int64);
  $1E8C116C23A2DB11D8EFA040565D0454 ___u10;
  HPALETTE__ *hplWatermark;
  $7FFB55FC795D8252EE658A80FE57D74D ___u12;
};

/* 4190 */
struct __cppobj IInternetProtocolSinkStackable : IUnknown
{
};

/* 4191 */
struct tagOFNW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const wchar_t *lpstrFilter;
  wchar_t *lpstrCustomFilter;
  unsigned int nMaxCustFilter;
  unsigned int nFilterIndex;
  wchar_t *lpstrFile;
  unsigned int nMaxFile;
  wchar_t *lpstrFileTitle;
  unsigned int nMaxFileTitle;
  const wchar_t *lpstrInitialDir;
  const wchar_t *lpstrTitle;
  unsigned int Flags;
  unsigned __int16 nFileOffset;
  unsigned __int16 nFileExtension;
  const wchar_t *lpstrDefExt;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const wchar_t *lpTemplateName;
  void *pvReserved;
  unsigned int dwReserved;
  unsigned int FlagsEx;
};

/* 4192 */
struct __declspec(align(4)) tagRAWHID
{
  unsigned int dwSizeHid;
  unsigned int dwCount;
  char bRawData[1];
};

/* 4193 */
struct tagMIDIOUTCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wVoices;
  unsigned __int16 wNotes;
  unsigned __int16 wChannelMask;
  unsigned int dwSupport;
};

/* 4194 */
union $30417D6DC3305618FB171BBBD15A8541
{
  unsigned int uTimeout;
  unsigned int uVersion;
};

/* 4195 */
struct _NOTIFYICONDATAA
{
  unsigned int cbSize;
  HWND__ *hWnd;
  unsigned int uID;
  unsigned int uFlags;
  unsigned int uCallbackMessage;
  HICON__ *hIcon;
  char szTip[128];
  unsigned int dwState;
  unsigned int dwStateMask;
  char szInfo[256];
  $30417D6DC3305618FB171BBBD15A8541 ___u10;
  char szInfoTitle[64];
  unsigned int dwInfoFlags;
  _GUID guidItem;
  HICON__ *hBalloonIcon;
};

/* 4196 */
struct _CMC_ADD_EXTENSIONS_INFO
{
  unsigned int dwCmcDataReference;
  unsigned int cCertReference;
  unsigned int *rgdwCertReference;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 4197 */
struct _CRYPT_URL_ARRAY
{
  unsigned int cUrl;
  wchar_t **rgwszUrl;
};

/* 4198 */
struct _CHANGER_ELEMENT
{
  _ELEMENT_TYPE ElementType;
  unsigned int ElementAddress;
};

/* 4199 */
struct _PRINTER_NOTIFY_OPTIONS_TYPE
{
  unsigned __int16 Type;
  unsigned __int16 Reserved0;
  unsigned int Reserved1;
  unsigned int Reserved2;
  unsigned int Count;
  unsigned __int16 *pFields;
};

/* 4200 */
struct _PRINTER_NOTIFY_OPTIONS
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int Count;
  _PRINTER_NOTIFY_OPTIONS_TYPE *pTypes;
};

/* 4201 */
struct __cppobj IOleCacheControl : IUnknown
{
};

/* 4202 */
struct _OSVERSIONINFOEXW
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  wchar_t szCSDVersion[128];
  unsigned __int16 wServicePackMajor;
  unsigned __int16 wServicePackMinor;
  unsigned __int16 wSuiteMask;
  char wProductType;
  char wReserved;
};

/* 4203 */
struct _DCB
{
  unsigned int DCBlength;
  unsigned int BaudRate;
  unsigned __int32 fBinary : 1;
  unsigned __int32 fParity : 1;
  unsigned __int32 fOutxCtsFlow : 1;
  unsigned __int32 fOutxDsrFlow : 1;
  unsigned __int32 fDtrControl : 2;
  unsigned __int32 fDsrSensitivity : 1;
  unsigned __int32 fTXContinueOnXoff : 1;
  unsigned __int32 fOutX : 1;
  unsigned __int32 fInX : 1;
  unsigned __int32 fErrorChar : 1;
  unsigned __int32 fNull : 1;
  unsigned __int32 fRtsControl : 2;
  unsigned __int32 fAbortOnError : 1;
  unsigned __int32 fDummy2 : 17;
  unsigned __int16 wReserved;
  unsigned __int16 XonLim;
  unsigned __int16 XoffLim;
  char ByteSize;
  char Parity;
  char StopBits;
  char XonChar;
  char XoffChar;
  char ErrorChar;
  char EofChar;
  char EvtChar;
  unsigned __int16 wReserved1;
};

/* 4204 */
struct __declspec(align(4)) _COMMCONFIG
{
  unsigned int dwSize;
  unsigned __int16 wVersion;
  unsigned __int16 wReserved;
  _DCB dcb;
  unsigned int dwProviderSubType;
  unsigned int dwProviderOffset;
  unsigned int dwProviderSize;
  wchar_t wcProviderData[1];
};

/* 4205 */
struct tagPALETTEENTRY
{
  char peRed;
  char peGreen;
  char peBlue;
  char peFlags;
};

/* 4206 */
struct tagPANOSE
{
  char bFamilyType;
  char bSerifStyle;
  char bWeight;
  char bProportion;
  char bContrast;
  char bStrokeVariation;
  char bArmStyle;
  char bLetterform;
  char bMidline;
  char bXHeight;
};

/* 4207 */
struct __declspec(align(4)) tagEXTLOGFONTW
{
  tagLOGFONTW elfLogFont;
  wchar_t elfFullName[64];
  wchar_t elfStyle[32];
  unsigned int elfVersion;
  unsigned int elfStyleSize;
  unsigned int elfMatch;
  unsigned int elfReserved;
  char elfVendorId[4];
  unsigned int elfCulture;
  tagPANOSE elfPanose;
};

/* 4208 */
struct tagEMREXTCREATEFONTINDIRECTW
{
  tagEMR emr;
  unsigned int ihFont;
  tagEXTLOGFONTW elfw;
};

/* 4209 */
struct __declspec(align(8)) tagRPC_CALL_ATTRIBUTES_V1_A
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ServerPrincipalNameBufferLength;
  char *ServerPrincipalName;
  unsigned int ClientPrincipalNameBufferLength;
  char *ClientPrincipalName;
  unsigned int AuthenticationLevel;
  unsigned int AuthenticationService;
  int NullSession;
};

/* 4210 */
struct _CERT_QC_STATEMENT
{
  char *pszStatementId;
  _CRYPTOAPI_BLOB StatementInfo;
};

/* 4211 */
struct _CRYPT_KEY_PROV_PARAM
{
  unsigned int dwParam;
  char *pbData;
  unsigned int cbData;
  unsigned int dwFlags;
};

/* 4212 */
struct __declspec(align(8)) _CRYPT_KEY_PROV_INFO
{
  wchar_t *pwszContainerName;
  wchar_t *pwszProvName;
  unsigned int dwProvType;
  unsigned int dwFlags;
  unsigned int cProvParam;
  _CRYPT_KEY_PROV_PARAM *rgProvParam;
  unsigned int dwKeySpec;
};

/* 4213 */
struct addrinfoW
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  unsigned __int64 ai_addrlen;
  wchar_t *ai_canonname;
  sockaddr *ai_addr;
  addrinfoW *ai_next;
};

/* 4214 */
struct _SID_IDENTIFIER_AUTHORITY
{
  char Value[6];
};

/* 4215 */
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
  unsigned int TimeDateStamp;
  unsigned __int16 OffsetModuleName;
  unsigned __int16 NumberOfModuleForwarderRefs;
};

/* 4216 */
struct tagEMROFFSETCLIPRGN
{
  tagEMR emr;
  _POINTL ptlOffset;
};

/* 4217 */
struct tagSCROLLINFO
{
  unsigned int cbSize;
  unsigned int fMask;
  int nMin;
  int nMax;
  unsigned int nPage;
  int nPos;
  int nTrackPos;
};

/* 4218 */
struct _BCRYPT_KEY_BLOB
{
  unsigned int Magic;
};

/* 4219 */
union $6B5E0B9D6673BA135121EF621843DDF2
{
  unsigned __int64 hKeyEncryptionKey;
  void *pvKeyEncryptionKey;
};

/* 4220 */
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  void *pvKeyEncryptionAuxInfo;
  unsigned __int64 hCryptProv;
  unsigned int dwKeyChoice;
  $6B5E0B9D6673BA135121EF621843DDF2 ___u5;
  _CRYPTOAPI_BLOB KeyId;
  _FILETIME Date;
  _CRYPT_ATTRIBUTE_TYPE_VALUE *pOtherAttr;
};

/* 4221 */
struct __declspec(align(8)) _CERT_SERVER_OCSP_RESPONSE_CONTEXT
{
  unsigned int cbSize;
  char *pbEncodedOcspResponse;
  unsigned int cbEncodedOcspResponse;
};

/* 4222 */
struct _VIRTUAL_STORAGE_TYPE
{
  unsigned int DeviceId;
  _GUID VendorId;
};

/* 4223 */
struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
{
  unsigned int EntryLength;
  unsigned int DependencyTypeFlags;
  unsigned int ProviderSpecificFlags;
  _VIRTUAL_STORAGE_TYPE VirtualStorageType;
};

/* 4224 */
struct _PORT_INFO_1A
{
  char *pName;
};

/* 4225 */
struct _MONITOR_INFO_2A
{
  char *pName;
  char *pEnvironment;
  char *pDLLName;
};

/* 4226 */
struct __cppobj IGlobalOptions : IUnknown
{
};

/* 4227 */
struct __cppobj ISynchronize : IUnknown
{
};

/* 4228 */
struct _tagPROTOCOL_ARGUMENT
{
  const wchar_t *szMethod;
  const wchar_t *szTargetUrl;
};

/* 4229 */
struct tagFINDREPLACEA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  unsigned int Flags;
  char *lpstrFindWhat;
  char *lpstrReplaceWith;
  unsigned __int16 wFindWhatLen;
  unsigned __int16 wReplaceWithLen;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const char *lpTemplateName;
};

/* 4230 */
struct tagREGISTERWORDW
{
  wchar_t *lpReading;
  wchar_t *lpWord;
};

/* 4231 */
union $2C177DDEB22292785570970034678B30
{
  unsigned int UnwindInfoAddress;
  unsigned int UnwindData;
};

/* 4232 */
struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
  unsigned int BeginAddress;
  unsigned int EndAddress;
  $2C177DDEB22292785570970034678B30 ___u2;
};

/* 4233 */
struct _UNWIND_HISTORY_TABLE_ENTRY
{
  unsigned __int64 ImageBase;
  _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionEntry;
};

/* 4234 */
struct _UNWIND_HISTORY_TABLE
{
  unsigned int Count;
  char LocalHint;
  char GlobalHint;
  char Search;
  char Once;
  unsigned __int64 LowAddress;
  unsigned __int64 HighAddress;
  _UNWIND_HISTORY_TABLE_ENTRY Entry[12];
};

/* 4235 */
struct _KCRM_MARSHAL_HEADER
{
  unsigned int VersionMajor;
  unsigned int VersionMinor;
  unsigned int NumProtocols;
  unsigned int Unused;
};

/* 4236 */
struct tagPOLYTEXTA
{
  int x;
  int y;
  unsigned int n;
  const char *lpstr;
  unsigned int uiFlags;
  tagRECT rcl;
  int *pdx;
};

/* 4237 */
struct tagEMRSELECTOBJECT
{
  tagEMR emr;
  unsigned int ihObject;
};

/* 4238 */
struct __declspec(align(4)) tagEMRPOLYDRAW
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cptl;
  _POINTL aptl[1];
  char abTypes[1];
};

/* 4239 */
struct tagMIXERCONTROLDETAILS_LISTTEXTA
{
  unsigned int dwParam1;
  unsigned int dwParam2;
  char szName[64];
};

/* 4240 */
struct _DEVICE_LB_PROVISIONING_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  __int8 ThinProvisioningEnabled : 1;
  __int8 ThinProvisioningReadZeros : 1;
  __int8 AnchorSupported : 3;
  __int8 UnmapGranularityAlignmentValid : 1;
  __int8 Reserved0 : 2;
  char Reserved1[7];
  unsigned __int64 OptimalUnmapGranularity;
  unsigned __int64 UnmapGranularityAlignment;
};

/* 4241 */
struct _DISK_GEOMETRY
{
  _LARGE_INTEGER Cylinders;
  _MEDIA_TYPE MediaType;
  unsigned int TracksPerCylinder;
  unsigned int SectorsPerTrack;
  unsigned int BytesPerSector;
};

/* 4242 */
struct tagCOPYDATASTRUCT
{
  unsigned __int64 dwData;
  unsigned int cbData;
  void *lpData;
};

/* 4243 */
struct tagREGISTERWORDA
{
  char *lpReading;
  char *lpWord;
};

/* 4244 */
struct _IMAGE_BOUND_FORWARDER_REF
{
  unsigned int TimeDateStamp;
  unsigned __int16 OffsetModuleName;
  unsigned __int16 Reserved;
};

/* 4245 */
struct tagMINMAXINFO
{
  tagPOINT ptReserved;
  tagPOINT ptMaxSize;
  tagPOINT ptMaxPosition;
  tagPOINT ptMinTrackSize;
  tagPOINT ptMaxTrackSize;
};

/* 4246 */
struct __unaligned __declspec(align(4)) tagMCI_ANIM_WINDOW_PARMSA
{
  unsigned __int64 dwCallback;
  HWND__ *hWnd;
  unsigned int nCmdShow;
  const char *lpstrText;
};

/* 4247 */
struct tagWAVEOUTCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4248 */
struct _PORT_INFO_2A
{
  char *pPortName;
  char *pMonitorName;
  char *pDescription;
  unsigned int fPortType;
  unsigned int Reserved;
};

/* 4249 */
struct __cppobj IUri : IUnknown
{
};

/* 4250 */
struct _SERVICE_TABLE_ENTRYW
{
  wchar_t *lpServiceName;
  void (__cdecl *lpServiceProc)(unsigned int, wchar_t **);
};

/* 4251 */
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
  unsigned int EndOfJobTimeAction;
};

/* 4252 */
struct __declspec(align(8)) tagDEBUGHOOKINFO
{
  unsigned int idThread;
  unsigned int idThreadInstaller;
  __int64 lParam;
  unsigned __int64 wParam;
  int code;
};

/* 4253 */
struct HRAWINPUT__
{
  int unused;
};

/* 4254 */
struct _CRYPT_SIGN_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgEncodingType;
  _CERT_CONTEXT *pSigningCert;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
  unsigned int cMsgCert;
  _CERT_CONTEXT **rgpMsgCert;
  unsigned int cMsgCrl;
  _CRL_CONTEXT **rgpMsgCrl;
  unsigned int cAuthAttr;
  _CRYPT_ATTRIBUTE *rgAuthAttr;
  unsigned int cUnauthAttr;
  _CRYPT_ATTRIBUTE *rgUnauthAttr;
  unsigned int dwFlags;
  unsigned int dwInnerContentType;
};

/* 4255 */
struct _ENCRYPTED_DATA_INFO
{
  unsigned __int64 StartingFileOffset;
  unsigned int OutputBufferOffset;
  unsigned int BytesWithinFileSize;
  unsigned int BytesWithinValidDataLength;
  unsigned __int16 CompressionFormat;
  char DataUnitShift;
  char ChunkShift;
  char ClusterShift;
  char EncryptionFormat;
  unsigned __int16 NumberOfDataBlocks;
  unsigned int DataBlockSize[1];
};

/* 4256 */
struct __declspec(align(8)) _DRIVER_INFO_5A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  unsigned int dwDriverAttributes;
  unsigned int dwConfigVersion;
  unsigned int dwDriverVersion;
};

/* 4257 */
struct tagSIZE
{
  int cx;
  int cy;
};

/* 4258 */
struct __declspec(align(8)) _FORM_INFO_2A
{
  unsigned int Flags;
  const char *pName;
  tagSIZE Size;
  _RECTL ImageableArea;
  const char *pKeyword;
  unsigned int StringType;
  const char *pMuiDll;
  unsigned int dwResourceId;
  const char *pDisplayName;
  unsigned __int16 wLangId;
};

/* 4259 */
struct __cppobj IDropTarget : IUnknown
{
};

/* 4260 */
struct __cppobj IDataObject : IUnknown
{
};

/* 4261 */
struct _CREATEFILE2_EXTENDED_PARAMETERS
{
  unsigned int dwSize;
  unsigned int dwFileAttributes;
  unsigned int dwFileFlags;
  unsigned int dwSecurityQosFlags;
  _SECURITY_ATTRIBUTES *lpSecurityAttributes;
  void *hTemplateFile;
};

/* 4262 */
struct tagWINDOWINFO
{
  unsigned int cbSize;
  tagRECT rcWindow;
  tagRECT rcClient;
  unsigned int dwStyle;
  unsigned int dwExStyle;
  unsigned int dwWindowStatus;
  unsigned int cxWindowBorders;
  unsigned int cyWindowBorders;
  unsigned __int16 atomWindowType;
  unsigned __int16 wCreatorVersion;
};

/* 4263 */
struct _CMSG_KEY_TRANS_RECIPIENT_INFO
{
  unsigned int dwVersion;
  _CERT_ID RecipientId;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedKey;
};

/* 4264 */
union $B7075A1E500382C072E0E8E43F08E19E
{
  _CERT_ID OriginatorCertId;
  _CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
};

/* 4265 */
struct _CMSG_KEY_AGREE_RECIPIENT_INFO
{
  unsigned int dwVersion;
  unsigned int dwOriginatorChoice;
  $B7075A1E500382C072E0E8E43F08E19E ___u2;
  _CRYPTOAPI_BLOB UserKeyingMaterial;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  unsigned int cRecipientEncryptedKeys;
  _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO **rgpRecipientEncryptedKeys;
};

/* 4266 */
struct _CMSG_MAIL_LIST_RECIPIENT_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB KeyId;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedKey;
  _FILETIME Date;
  _CRYPT_ATTRIBUTE_TYPE_VALUE *pOtherAttr;
};

/* 4267 */
union $E56E85DD3C14690D07B29F3922097CEC
{
  _CMSG_KEY_TRANS_RECIPIENT_INFO *pKeyTrans;
  _CMSG_KEY_AGREE_RECIPIENT_INFO *pKeyAgree;
  _CMSG_MAIL_LIST_RECIPIENT_INFO *pMailList;
};

/* 4268 */
struct _CMSG_CMS_RECIPIENT_INFO
{
  unsigned int dwRecipientChoice;
  $E56E85DD3C14690D07B29F3922097CEC ___u1;
};

/* 4269 */
struct _EXFAT_STATISTICS
{
  unsigned int CreateHits;
  unsigned int SuccessfulCreates;
  unsigned int FailedCreates;
  unsigned int NonCachedReads;
  unsigned int NonCachedReadBytes;
  unsigned int NonCachedWrites;
  unsigned int NonCachedWriteBytes;
  unsigned int NonCachedDiskReads;
  unsigned int NonCachedDiskWrites;
};

/* 4270 */
struct __cppobj IWinInetInfo : IUnknown
{
};

/* 4271 */
struct __cppobj IWinInetHttpInfo : IWinInetInfo
{
};

/* 4272 */
struct tagRGBTRIPLE
{
  char rgbtBlue;
  char rgbtGreen;
  char rgbtRed;
};

/* 4273 */
struct tagEMRSELECTCLIPPATH
{
  tagEMR emr;
  unsigned int iMode;
};

/* 4274 */
struct tagWAVEOUTCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4275 */
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA
{
  unsigned int cbSize;
  const char *pszUsageIdentifier;
  unsigned int dwKeySpec;
  unsigned int dwAcquirePrivateKeyFlags;
  unsigned int cIssuer;
  _CRYPTOAPI_BLOB *rgIssuer;
  int (__cdecl *pfnFindCallback)(_CERT_CONTEXT *, void *);
  void *pvFindArg;
};

/* 4276 */
struct _DEVICEDUMP_RESTRICTED_SUBSECTION
{
  char bData[1];
};

/* 4277 */
struct _MONITOR_INFO_1W
{
  wchar_t *pName;
};

/* 4278 */
struct _COMSTAT
{
  unsigned __int32 fCtsHold : 1;
  unsigned __int32 fDsrHold : 1;
  unsigned __int32 fRlsdHold : 1;
  unsigned __int32 fXoffHold : 1;
  unsigned __int32 fXoffSent : 1;
  unsigned __int32 fEof : 1;
  unsigned __int32 fTxim : 1;
  unsigned __int32 fReserved : 25;
  unsigned int cbInQue;
  unsigned int cbOutQue;
};

/* 4279 */
struct __unaligned __declspec(align(2)) DLGITEMTEMPLATE
{
  unsigned int style;
  unsigned int dwExtendedStyle;
  __int16 x;
  __int16 y;
  __int16 cx;
  __int16 cy;
  unsigned __int16 id;
};

/* 4280 */
struct __declspec(align(8)) _HMAC_Info
{
  unsigned int HashAlgid;
  char *pbInnerString;
  unsigned int cbInnerString;
  char *pbOuterString;
  unsigned int cbOuterString;
};

/* 4281 */
struct __declspec(align(4)) _TXFS_CREATE_MINIVERSION_INFO
{
  unsigned __int16 StructureVersion;
  unsigned __int16 StructureLength;
  unsigned int BaseVersion;
  unsigned __int16 MiniVersion;
};

/* 4282 */
struct _TOKEN_SOURCE
{
  char SourceName[8];
  _LUID SourceIdentifier;
};

/* 4283 */
struct _TOKEN_CONTROL
{
  _LUID TokenId;
  _LUID AuthenticationId;
  _LUID ModifiedId;
  _TOKEN_SOURCE TokenSource;
};

/* 4284 */
struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
{
  unsigned __int64 Version;
  wchar_t *Name;
};

/* 4285 */
struct __declspec(align(8)) _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
  void *pValue;
  unsigned int ValueLength;
};

/* 4286 */
union $6DBBD14A2CEFD709CED0FCB2A14449AD
{
  __int64 *pInt64;
  unsigned __int64 *pUint64;
  wchar_t **ppString;
  _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE *pFqbn;
  _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE *pOctetString;
};

/* 4287 */
struct _CLAIM_SECURITY_ATTRIBUTE_V1
{
  wchar_t *Name;
  unsigned __int16 ValueType;
  unsigned __int16 Reserved;
  unsigned int Flags;
  unsigned int ValueCount;
  $6DBBD14A2CEFD709CED0FCB2A14449AD Values;
};

/* 4288 */
union $F3AF61C434D89B3A67EBBC522EC48F52
{
  _CLAIM_SECURITY_ATTRIBUTE_V1 *pAttributeV1;
};

/* 4289 */
struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
{
  unsigned __int16 Version;
  unsigned __int16 Reserved;
  unsigned int AttributeCount;
  $F3AF61C434D89B3A67EBBC522EC48F52 Attribute;
};

/* 4290 */
struct _DISPLAY_DEVICEW
{
  unsigned int cb;
  wchar_t DeviceName[32];
  wchar_t DeviceString[128];
  unsigned int StateFlags;
  wchar_t DeviceID[128];
  wchar_t DeviceKey[128];
};

/* 4291 */
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{
  unsigned int Size;
  unsigned int Action;
  unsigned int Flags;
  unsigned int ParameterBlockOffset;
  unsigned int ParameterBlockLength;
  unsigned int DataSetRangesOffset;
  unsigned int DataSetRangesLength;
};

/* 4292 */
struct __declspec(align(8)) _DOC_INFO_3A
{
  char *pDocName;
  char *pOutputFile;
  char *pDatatype;
  unsigned int dwFlags;
};

/* 4293 */
struct _RTL_BARRIER
{
  unsigned int Reserved1;
  unsigned int Reserved2;
  unsigned __int64 Reserved3[2];
  unsigned int Reserved4;
  unsigned int Reserved5;
};

/* 4294 */
struct tagABORTPATH
{
  tagEMR emr;
};

/* 4295 */
struct _COORD
{
  __int16 X;
  __int16 Y;
};

/* 4296 */
struct _SMALL_RECT
{
  __int16 Left;
  __int16 Top;
  __int16 Right;
  __int16 Bottom;
};

/* 4297 */
struct _CONSOLE_SCREEN_BUFFER_INFO
{
  _COORD dwSize;
  _COORD dwCursorPosition;
  unsigned __int16 wAttributes;
  _SMALL_RECT srWindow;
  _COORD dwMaximumWindowSize;
};

/* 4298 */
struct _CRYPT_OID_FUNC_ENTRY
{
  const char *pszOID;
  void *pvFuncAddr;
};

/* 4299 */
struct __declspec(align(8)) _FORM_INFO_2W
{
  unsigned int Flags;
  const wchar_t *pName;
  tagSIZE Size;
  _RECTL ImageableArea;
  const char *pKeyword;
  unsigned int StringType;
  const wchar_t *pMuiDll;
  unsigned int dwResourceId;
  const wchar_t *pDisplayName;
  unsigned __int16 wLangId;
};

/* 4300 */
struct tagCOLORCORRECTPALETTE
{
  tagEMR emr;
  unsigned int ihPalette;
  unsigned int nFirstEntry;
  unsigned int nPalEntries;
  unsigned int nReserved;
};

/* 4301 */
struct __declspec(align(8)) tagCREATESTRUCTA
{
  void *lpCreateParams;
  HINSTANCE__ *hInstance;
  HMENU__ *hMenu;
  HWND__ *hwndParent;
  int cy;
  int cx;
  int y;
  int x;
  int style;
  const char *lpszName;
  const char *lpszClass;
  unsigned int dwExStyle;
};

/* 4302 */
struct tagMINIMIZEDMETRICS
{
  unsigned int cbSize;
  int iWidth;
  int iHorzGap;
  int iVertGap;
  int iArrange;
};

/* 4303 */
struct HMIDIIN__
{
  int unused;
};

/* 4304 */
struct _CRYPT_DECRYPT_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgAndCertEncodingType;
  unsigned int cCertStore;
  void **rghCertStore;
};

/* 4305 */
struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION
{
  unsigned int VolumeFlags;
  unsigned int FlagMask;
  unsigned int Version;
  unsigned int Reserved;
};

/* 4306 */
struct _TypeDescriptor
{
  const void *pVFTable;
  void *spare;
  char name[];
};

/* 4307 */
struct _PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 4308 */
struct __unaligned __declspec(align(4)) _s__CatchableType
{
  unsigned int properties;
  _TypeDescriptor *pType;
  _PMD thisDisplacement;
  int sizeOrOffset;
  void (__cdecl *copyFunction)(void *);
};

/* 4309 */
struct __unaligned __declspec(align(4)) _s__CatchableTypeArray
{
  int nCatchableTypes;
  _s__CatchableType *arrayOfCatchableTypes[];
};

/* 4310 */
struct _OPERATION_END_PARAMETERS
{
  unsigned int Version;
  unsigned int OperationId;
  unsigned int Flags;
};

/* 4311 */
struct tagJOYCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  wchar_t szPname[32];
  unsigned int wXmin;
  unsigned int wXmax;
  unsigned int wYmin;
  unsigned int wYmax;
  unsigned int wZmin;
  unsigned int wZmax;
  unsigned int wNumButtons;
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
  unsigned int wRmin;
  unsigned int wRmax;
  unsigned int wUmin;
  unsigned int wUmax;
  unsigned int wVmin;
  unsigned int wVmax;
  unsigned int wCaps;
  unsigned int wMaxAxes;
  unsigned int wNumAxes;
  unsigned int wMaxButtons;
  wchar_t szRegKey[32];
  wchar_t szOEMVxD[260];
};

/* 4312 */
struct _FSCTL_OFFLOAD_WRITE_OUTPUT
{
  unsigned int Size;
  unsigned int Flags;
  unsigned __int64 LengthWritten;
};

/* 4313 */
struct tagCIEXYZ
{
  int ciexyzX;
  int ciexyzY;
  int ciexyzZ;
};

/* 4314 */
struct tagICEXYZTRIPLE
{
  tagCIEXYZ ciexyzRed;
  tagCIEXYZ ciexyzGreen;
  tagCIEXYZ ciexyzBlue;
};

/* 4315 */
struct tagLOGCOLORSPACEW
{
  unsigned int lcsSignature;
  unsigned int lcsVersion;
  unsigned int lcsSize;
  int lcsCSType;
  int lcsIntent;
  tagICEXYZTRIPLE lcsEndpoints;
  unsigned int lcsGammaRed;
  unsigned int lcsGammaGreen;
  unsigned int lcsGammaBlue;
  wchar_t lcsFilename[260];
};

/* 4316 */
struct __declspec(align(4)) tagEMRCREATECOLORSPACEW
{
  tagEMR emr;
  unsigned int ihCS;
  tagLOGCOLORSPACEW lcs;
  unsigned int dwFlags;
  unsigned int cbData;
  char Data[1];
};

/* 4317 */
struct __unaligned __declspec(align(4)) tagMCI_SYSINFO_PARMSA
{
  unsigned __int64 dwCallback;
  char *lpstrReturn;
  unsigned int dwRetSize;
  unsigned int dwNumber;
  unsigned int wDeviceType;
};

/* 4318 */
struct __declspec(align(8)) _OPEN_PRINTER_PROPS_INFOA
{
  unsigned int dwSize;
  char *pszSheetName;
  unsigned int uSheetIndex;
  unsigned int dwFlags;
  int bModal;
};

/* 4319 */
struct _CTL_ENTRY
{
  _CRYPTOAPI_BLOB SubjectIdentifier;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 4320 */
struct _CTL_INFO
{
  unsigned int dwVersion;
  _CTL_USAGE SubjectUsage;
  _CRYPTOAPI_BLOB ListIdentifier;
  _CRYPTOAPI_BLOB SequenceNumber;
  _FILETIME ThisUpdate;
  _FILETIME NextUpdate;
  _CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
  unsigned int cCTLEntry;
  _CTL_ENTRY *rgCTLEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 4321 */
struct __declspec(align(8)) _CTL_CONTEXT
{
  unsigned int dwMsgAndCertEncodingType;
  char *pbCtlEncoded;
  unsigned int cbCtlEncoded;
  _CTL_INFO *pCtlInfo;
  void *hCertStore;
  void *hCryptMsg;
  char *pbCtlContent;
  unsigned int cbCtlContent;
};

/* 4322 */
struct __declspec(align(8)) _CTL_VERIFY_USAGE_STATUS
{
  unsigned int cbSize;
  unsigned int dwError;
  unsigned int dwFlags;
  _CTL_CONTEXT **ppCtl;
  unsigned int dwCtlEntryIndex;
  _CERT_CONTEXT **ppSigner;
  unsigned int dwSignerIndex;
};

/* 4323 */
struct _CRYPT_BLOB_ARRAY
{
  unsigned int cBlob;
  _CRYPTOAPI_BLOB *rgBlob;
};

/* 4324 */
struct _CERT_TRUST_LIST_INFO
{
  unsigned int cbSize;
  _CTL_ENTRY *pCtlEntry;
  _CTL_CONTEXT *pCtlContext;
};

/* 4325 */
struct _CERT_SIMPLE_CHAIN
{
  unsigned int cbSize;
  _CERT_TRUST_STATUS TrustStatus;
  unsigned int cElement;
  _CERT_CHAIN_ELEMENT **rgpElement;
  _CERT_TRUST_LIST_INFO *pTrustListInfo;
  int fHasRevocationFreshnessTime;
  unsigned int dwRevocationFreshnessTime;
};

/* 4326 */
struct __declspec(align(8)) _CERT_CHAIN_CONTEXT
{
  unsigned int cbSize;
  _CERT_TRUST_STATUS TrustStatus;
  unsigned int cChain;
  _CERT_SIMPLE_CHAIN **rgpChain;
  unsigned int cLowerQualityChainContext;
  _CERT_CHAIN_CONTEXT **rgpLowerQualityChainContext;
  int fHasRevocationFreshnessTime;
  unsigned int dwRevocationFreshnessTime;
  unsigned int dwCreateFlags;
  _GUID ChainId;
};

/* 4327 */
struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
{
  unsigned int EntryLength;
  unsigned int DependencyTypeFlags;
  unsigned int ProviderSpecificFlags;
  _VIRTUAL_STORAGE_TYPE VirtualStorageType;
  unsigned int AncestorLevel;
  unsigned int HostVolumeNameOffset;
  unsigned int HostVolumeNameSize;
  unsigned int DependentVolumeNameOffset;
  unsigned int DependentVolumeNameSize;
  unsigned int RelativePathOffset;
  unsigned int RelativePathSize;
  unsigned int DependentDeviceNameOffset;
  unsigned int DependentDeviceNameSize;
};

/* 4328 */
struct __declspec(align(8)) _CSV_NAMESPACE_INFO
{
  unsigned int Version;
  unsigned int DeviceNumber;
  _LARGE_INTEGER StartingOffset;
  unsigned int SectorSize;
};

/* 4329 */
struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER
{
  unsigned __int16 ChecksumAlgorithm;
  unsigned __int16 Reserved;
  unsigned int Flags;
  unsigned int ChecksumChunkSizeInBytes;
  unsigned int ClusterSizeInBytes;
};

/* 4330 */
struct _PRINTPROCESSOR_INFO_1A
{
  char *pName;
};

/* 4331 */
struct __cppobj IInternetThreadSwitch : IUnknown
{
};

/* 4332 */
struct tagCABSTR
{
  unsigned int cElems;
  wchar_t **pElems;
};

/* 4333 */
struct __declspec(align(4)) tagEMRFILLRGN
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cbRgnData;
  unsigned int ihBrush;
  char RgnData[1];
};

/* 4334 */
struct tagMULTIKEYHELPW
{
  unsigned int mkSize;
  wchar_t mkKeylist;
  wchar_t szKeyphrase[1];
};

/* 4335 */
struct __declspec(align(4)) tagHELPWININFOA
{
  int wStructSize;
  int x;
  int y;
  int dx;
  int dy;
  int wMax;
  char rgchMember[2];
};

/* 4336 */
struct $373B5F0746FD9CFA9B04F2ADB9D9774C
{
  unsigned int dwType;
  unsigned int dwDeviceID;
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
};

/* 4337 */
struct __unaligned __declspec(align(4)) tagMIXERLINEW
{
  unsigned int cbStruct;
  unsigned int dwDestination;
  unsigned int dwSource;
  unsigned int dwLineID;
  unsigned int fdwLine;
  unsigned __int64 dwUser;
  unsigned int dwComponentType;
  unsigned int cChannels;
  unsigned int cConnections;
  unsigned int cControls;
  wchar_t szShortName[16];
  wchar_t szName[64];
  $373B5F0746FD9CFA9B04F2ADB9D9774C Target;
};

/* 4338 */
struct __declspec(align(4)) tagRemHENHMETAFILE
{
  unsigned int cbData;
  char data[1];
};

/* 4339 */
struct addrinfoexW
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  unsigned __int64 ai_addrlen;
  wchar_t *ai_canonname;
  sockaddr *ai_addr;
  void *ai_blob;
  unsigned __int64 ai_bloblen;
  _GUID *ai_provider;
  addrinfoexW *ai_next;
};

/* 4340 */
struct __declspec(align(4)) _TIME_DYNAMIC_ZONE_INFORMATION
{
  int Bias;
  wchar_t StandardName[32];
  _SYSTEMTIME StandardDate;
  int StandardBias;
  wchar_t DaylightName[32];
  _SYSTEMTIME DaylightDate;
  int DaylightBias;
  wchar_t TimeZoneKeyName[128];
  char DynamicDaylightTimeDisabled;
};

/* 4341 */
struct __declspec(align(4)) tagEMRFRAMERGN
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cbRgnData;
  unsigned int ihBrush;
  tagSIZE szlStroke;
  char RgnData[1];
};

/* 4342 */
struct tagMEASUREITEMSTRUCT
{
  unsigned int CtlType;
  unsigned int CtlID;
  unsigned int itemID;
  unsigned int itemWidth;
  unsigned int itemHeight;
  unsigned __int64 itemData;
};

/* 4343 */
struct DRVCONFIGINFOEX
{
  unsigned int dwDCISize;
  __unaligned __declspec(align(1)) const wchar_t *lpszDCISectionName;
  __unaligned __declspec(align(1)) const wchar_t *lpszDCIAliasName;
  unsigned int dnDevNode;
};

/* 4344 */
struct _CERT_LDAP_STORE_OPENED_PARA
{
  void *pvLdapSessionHandle;
  const wchar_t *pwszLdapUrl;
};

/* 4345 */
struct _PRINTER_INFO_1A
{
  unsigned int Flags;
  char *pDescription;
  char *pName;
  char *pComment;
};

/* 4346 */
struct tagOLEVERB
{
  int lVerb;
  wchar_t *lpszVerbName;
  unsigned int fuFlags;
  unsigned int grfAttribs;
};

/* 4347 */
struct __cppobj IRecordInfo : IUnknown
{
};

/* 4348 */
struct _wireBRECORD
{
  unsigned int fFlags;
  unsigned int clSize;
  IRecordInfo *pRecInfo;
  char *pRecord;
};

/* 4349 */
struct _wireSAFEARR_BRECORD
{
  unsigned int Size;
  _wireBRECORD **aRecord;
};

/* 4350 */
struct $983F061E0B702DD8AE0B4B955735A6A3
{
  unsigned int Lo;
  int Hi;
};

/* 4351 */
union tagCY
{
  $983F061E0B702DD8AE0B4B955735A6A3 __s0;
  __int64 int64;
};

/* 4352 */
struct __cppobj IDispatch : IUnknown
{
};

/* 4353 */
struct tagSAFEARRAYBOUND
{
  unsigned int cElements;
  int lLbound;
};

/* 4354 */
struct tagSAFEARRAY
{
  unsigned __int16 cDims;
  unsigned __int16 fFeatures;
  unsigned int cbElements;
  unsigned int cLocks;
  void *pvData;
  tagSAFEARRAYBOUND rgsabound[1];
};

/* 4361 */
struct $E2F13C0D8C7A5E44CBEA2DDC2BADB614
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  __int64 llVal;
};

/* 4356 */
struct $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA
{
  char scale;
  char sign;
};

/* 4357 */
union $C61D66F673FED5402B449AC70D591ABD
{
  $5CC4D6FD2BF4E5B80FE1FD714DCA0CFA __s0;
  unsigned __int16 signscale;
};

/* 4358 */
struct $A04CD8C0331024E133CCEC4B0AB36956
{
  unsigned int Lo32;
  unsigned int Mid32;
};

/* 4359 */
union $87CE2071F870103A2F8966F8D2639CE3
{
  $A04CD8C0331024E133CCEC4B0AB36956 __s0;
  unsigned __int64 Lo64;
};

/* 4360 */
struct tagDEC
{
  unsigned __int16 wReserved;
  $C61D66F673FED5402B449AC70D591ABD ___u1;
  unsigned int Hi32;
  $87CE2071F870103A2F8966F8D2639CE3 ___u3;
};

/* 4362 */
struct $6D336DA143C556260FF80C12817B08DB
{
  _BYTE gap0[8];
  int lVal;
};

/* 4363 */
struct $F28A51B4B40B0D33C72915D739D42B4B
{
  _BYTE gap0[8];
  char bVal;
};

/* 4364 */
struct $31126B8528A05AF3606C6D495FD178E8
{
  _BYTE gap0[8];
  __int16 iVal;
};

/* 4365 */
struct $50230A970D9734D4E9774CFC619DF0F6
{
  _BYTE gap0[8];
  float fltVal;
};

/* 4366 */
struct $4C0EC2258454B893CE739DAE89D8DB7B
{
  _BYTE gap0[8];
  long double dblVal;
};

/* 4367 */
struct $6DB36323059316E675433BB10D285009
{
  _BYTE gap0[8];
  __int16 boolVal;
};

/* 4368 */
struct $8E3C8731874D1B3BC66617C4DD3163A6
{
  _BYTE gap0[8];
  int scode;
};

/* 4369 */
struct $043D6BDE15F78F1CC187FFC35D427BED
{
  _BYTE gap0[8];
  tagCY cyVal;
};

/* 4370 */
struct $E94952165EEA9EEA990FEB33603E1B19
{
  _BYTE gap0[8];
  long double date;
};

/* 4371 */
struct $7B1C2AA558A72DB3909F7F0B6C8C78B2
{
  _BYTE gap0[8];
  wchar_t *bstrVal;
};

/* 4372 */
struct $8092A495FC1DF9F642E7C056E8075E5C
{
  _BYTE gap0[8];
  IUnknown *punkVal;
};

/* 4373 */
struct $EEBE84C900CEEA6F3A4342ACE5306C62
{
  _BYTE gap0[8];
  IDispatch *pdispVal;
};

/* 4374 */
struct $E8A8ADACC4F63AB4ECBC5D09F8E24689
{
  _BYTE gap0[8];
  tagSAFEARRAY *parray;
};

/* 4375 */
struct $166B1F81F6EA96F97683A65F38FB1A59
{
  _BYTE gap0[8];
  char *pbVal;
};

/* 4376 */
struct $76732A64405C0E287FCB302687644550
{
  _BYTE gap0[8];
  __int16 *piVal;
};

/* 4377 */
struct $E5FC128E66C26C95254032BA69D36E74
{
  _BYTE gap0[8];
  int *plVal;
};

/* 4378 */
struct $E9CDCC48CD0BB58E8F361AA17BFDA76E
{
  _BYTE gap0[8];
  __int64 *pllVal;
};

/* 4379 */
struct $BF8CC88CDF129BD6E4FA4ABA13F521AD
{
  _BYTE gap0[8];
  float *pfltVal;
};

/* 4380 */
struct $2CABE618CF1C2625A4479554E4967E0A
{
  _BYTE gap0[8];
  long double *pdblVal;
};

/* 4381 */
struct $AAA92DA1D6E1B0E8462F69216B62027C
{
  _BYTE gap0[8];
  __int16 *pboolVal;
};

/* 4382 */
struct $F7167AE7A8ABA03C094C204FB1564A28
{
  _BYTE gap0[8];
  int *pscode;
};

/* 4383 */
struct $FB6980A5287B5B2DFCE93144582BA274
{
  _BYTE gap0[8];
  tagCY *pcyVal;
};

/* 4384 */
struct $6857AE69DB7C952EEFD665431A7B503A
{
  _BYTE gap0[8];
  long double *pdate;
};

/* 4385 */
struct $BE56ADCB97A5F80C4E840DC3FCEE04D4
{
  _BYTE gap0[8];
  wchar_t **pbstrVal;
};

/* 4386 */
struct $373BB333679CCAAE77F4F5B3D7936D3C
{
  _BYTE gap0[8];
  IUnknown **ppunkVal;
};

/* 4387 */
struct $813863DAA8596C1765EBBA43E9C0757D
{
  _BYTE gap0[8];
  IDispatch **ppdispVal;
};

/* 4388 */
struct $010A8ABA11B5501E04A23952008593E1
{
  _BYTE gap0[8];
  tagSAFEARRAY **pparray;
};

/* 4389 */
struct $5AB6D856A0FBD8EFC70B9E456056DFCA
{
  _BYTE gap0[8];
  tagVARIANT *pvarVal;
};

/* 4390 */
struct $6C39A09D97B880131B2C5BB4943CBB45
{
  _BYTE gap0[8];
  void *byref;
};

/* 4391 */
struct $E898A5260D8380431CCAA47FCC291563
{
  _BYTE gap0[8];
  char cVal;
};

/* 4392 */
struct $48802A31D3D0701BC13CEF9CEA041E7B
{
  _BYTE gap0[8];
  unsigned __int16 uiVal;
};

/* 4393 */
struct $B644145F46FF1F932B106BFA6CC3F6D9
{
  _BYTE gap0[8];
  unsigned int ulVal;
};

/* 4394 */
struct $EA00B0D50EAA1933F67C45009B664198
{
  _BYTE gap0[8];
  unsigned __int64 ullVal;
};

/* 4395 */
struct $5CA90CF57237397281FB12BFD52C1905
{
  _BYTE gap0[8];
  int intVal;
};

/* 4396 */
struct $E7F48E2F4EAA3149E57D87E5D1B2C6B8
{
  _BYTE gap0[8];
  unsigned int uintVal;
};

/* 4397 */
struct $08C289CC69B385203DA3368FE72D6D10
{
  _BYTE gap0[8];
  tagDEC *pdecVal;
};

/* 4398 */
struct $E1D71D20C3D01115E20D79FAE9629CE8
{
  _BYTE gap0[8];
  char *pcVal;
};

/* 4399 */
struct $5669F5A4AD19EF2CB42A5602080CB0A6
{
  _BYTE gap0[8];
  unsigned __int16 *puiVal;
};

/* 4400 */
struct $886F8AE9D7C8B1B861B6CA58D67B682A
{
  _BYTE gap0[8];
  unsigned int *pulVal;
};

/* 4401 */
struct $ADBB94A21537A8461C6168A5B871A740
{
  _BYTE gap0[8];
  unsigned __int64 *pullVal;
};

/* 4402 */
struct $CDA73A427DD2A30CDA26CA3394C33CF0
{
  _BYTE gap0[8];
  int *pintVal;
};

/* 4403 */
struct $2516E53E690D8CC5659AAB7EDC49E664
{
  _BYTE gap0[8];
  unsigned int *puintVal;
};

/* 4404 */
struct $17B4421FDC73B39569D8A12F584CB67F
{
  _BYTE gap0[8];
  void *pvRecord;
};

/* 4405 */
union $742DD928D8FEF2DD2B8CAEAC0A7A8C6B
{
  $E2F13C0D8C7A5E44CBEA2DDC2BADB614 __s0;
  tagDEC decVal;
  $6D336DA143C556260FF80C12817B08DB __s2;
  $F28A51B4B40B0D33C72915D739D42B4B __s3;
  $31126B8528A05AF3606C6D495FD178E8 __s4;
  $50230A970D9734D4E9774CFC619DF0F6 __s5;
  $4C0EC2258454B893CE739DAE89D8DB7B __s6;
  $6DB36323059316E675433BB10D285009 __s7;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s8;
  $043D6BDE15F78F1CC187FFC35D427BED __s9;
  $E94952165EEA9EEA990FEB33603E1B19 __s10;
  $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s11;
  $8092A495FC1DF9F642E7C056E8075E5C __s12;
  $EEBE84C900CEEA6F3A4342ACE5306C62 __s13;
  $E8A8ADACC4F63AB4ECBC5D09F8E24689 __s14;
  $166B1F81F6EA96F97683A65F38FB1A59 __s15;
  $76732A64405C0E287FCB302687644550 __s16;
  $E5FC128E66C26C95254032BA69D36E74 __s17;
  $E9CDCC48CD0BB58E8F361AA17BFDA76E __s18;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s19;
  $2CABE618CF1C2625A4479554E4967E0A __s20;
  $AAA92DA1D6E1B0E8462F69216B62027C __s21;
  $F7167AE7A8ABA03C094C204FB1564A28 __s22;
  $FB6980A5287B5B2DFCE93144582BA274 __s23;
  $6857AE69DB7C952EEFD665431A7B503A __s24;
  $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s25;
  $373BB333679CCAAE77F4F5B3D7936D3C __s26;
  $813863DAA8596C1765EBBA43E9C0757D __s27;
  $010A8ABA11B5501E04A23952008593E1 __s28;
  $5AB6D856A0FBD8EFC70B9E456056DFCA __s29;
  $6C39A09D97B880131B2C5BB4943CBB45 __s30;
  $E898A5260D8380431CCAA47FCC291563 __s31;
  $48802A31D3D0701BC13CEF9CEA041E7B __s32;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s33;
  $EA00B0D50EAA1933F67C45009B664198 __s34;
  $5CA90CF57237397281FB12BFD52C1905 __s35;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s36;
  $08C289CC69B385203DA3368FE72D6D10 __s37;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s38;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s39;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s40;
  $ADBB94A21537A8461C6168A5B871A740 __s41;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s42;
  $2516E53E690D8CC5659AAB7EDC49E664 __s43;
  $17B4421FDC73B39569D8A12F584CB67F __s44;
};

/* 4355 */
struct tagVARIANT
{
  $742DD928D8FEF2DD2B8CAEAC0A7A8C6B ___u0;
  IRecordInfo *pRecInfo;
};

/* 4406 */
struct tagCUSTDATAITEM
{
  _GUID guid;
  tagVARIANT varValue;
};

/* 4407 */
struct _TRANSACTION_ENLISTMENT_PAIR
{
  _GUID EnlistmentId;
  _GUID ResourceManagerId;
};

/* 4408 */
struct _TRANSACTION_ENLISTMENTS_INFORMATION
{
  unsigned int NumberOfEnlistments;
  _TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
};

/* 4409 */
struct __declspec(align(8)) _CREATE_PROCESS_DEBUG_INFO
{
  void *hFile;
  void *hProcess;
  void *hThread;
  void *lpBaseOfImage;
  unsigned int dwDebugInfoFileOffset;
  unsigned int nDebugInfoSize;
  void *lpThreadLocalBase;
  unsigned int (__cdecl *lpStartAddress)(void *);
  void *lpImageName;
  unsigned __int16 fUnicode;
};

/* 4410 */
struct $0D057425CB83406CCB6CB71DF3FA0A4C
{
  int lMinimum;
  int lMaximum;
};

/* 4411 */
struct $E50C0F09BB6F8C50FF087E1E76EA2CA0
{
  unsigned int dwMinimum;
  unsigned int dwMaximum;
};

/* 4412 */
union $37B5D8F0F9A4772C2CA930FE812CEDB0
{
  $0D057425CB83406CCB6CB71DF3FA0A4C __s0;
  $E50C0F09BB6F8C50FF087E1E76EA2CA0 __s1;
  unsigned int dwReserved[6];
};

/* 4413 */
union $D57FBB56CFB6CB9AA7C272D88EF9A29F
{
  unsigned int cSteps;
  unsigned int cbCustomData;
  unsigned int dwReserved[6];
};

/* 4414 */
struct tagMIXERCONTROLW
{
  unsigned int cbStruct;
  unsigned int dwControlID;
  unsigned int dwControlType;
  unsigned int fdwControl;
  unsigned int cMultipleItems;
  wchar_t szShortName[16];
  wchar_t szName[64];
  $37B5D8F0F9A4772C2CA930FE812CEDB0 Bounds;
  $D57FBB56CFB6CB9AA7C272D88EF9A29F Metrics;
};

/* 4415 */
union $476D211351DA30503E50D2F0E6E515B0
{
  unsigned int dwControlID;
  unsigned int dwControlType;
};

/* 4416 */
struct __unaligned __declspec(align(4)) tagMIXERLINECONTROLSW
{
  unsigned int cbStruct;
  unsigned int dwLineID;
  $476D211351DA30503E50D2F0E6E515B0 ___u2;
  unsigned int cControls;
  unsigned int cbmxctrl;
  tagMIXERCONTROLW *pamxctrl;
};

/* 4417 */
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
{
  char *pszOrganization;
  unsigned int cNoticeNumbers;
  int *rgNoticeNumbers;
};

/* 4418 */
struct _CERT_POLICY_QUALIFIER_USER_NOTICE
{
  _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
  wchar_t *pszDisplayText;
};

/* 4419 */
struct _CERT_HASHED_URL
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPTOAPI_BLOB Hash;
  wchar_t *pwszUrl;
};

/* 4420 */
struct _CERT_LOGOTYPE_DETAILS
{
  wchar_t *pwszMimeType;
  unsigned int cHashedUrl;
  _CERT_HASHED_URL *rgHashedUrl;
};

/* 4421 */
union $3C8120B90EF6903C0B2E2DA025F6B029
{
  unsigned int dwNumBits;
  unsigned int dwTableSize;
};

/* 4422 */
struct _CERT_LOGOTYPE_IMAGE_INFO
{
  unsigned int dwLogotypeImageInfoChoice;
  unsigned int dwFileSize;
  unsigned int dwXSize;
  unsigned int dwYSize;
  unsigned int dwLogotypeImageResolutionChoice;
  $3C8120B90EF6903C0B2E2DA025F6B029 ___u5;
  wchar_t *pwszLanguage;
};

/* 4423 */
struct _CERT_LOGOTYPE_IMAGE
{
  _CERT_LOGOTYPE_DETAILS LogotypeDetails;
  _CERT_LOGOTYPE_IMAGE_INFO *pLogotypeImageInfo;
};

/* 4424 */
struct _CERT_LOGOTYPE_AUDIO_INFO
{
  unsigned int dwFileSize;
  unsigned int dwPlayTime;
  unsigned int dwChannels;
  unsigned int dwSampleRate;
  wchar_t *pwszLanguage;
};

/* 4425 */
struct _CERT_LOGOTYPE_AUDIO
{
  _CERT_LOGOTYPE_DETAILS LogotypeDetails;
  _CERT_LOGOTYPE_AUDIO_INFO *pLogotypeAudioInfo;
};

/* 4426 */
struct _CERT_LOGOTYPE_DATA
{
  unsigned int cLogotypeImage;
  _CERT_LOGOTYPE_IMAGE *rgLogotypeImage;
  unsigned int cLogotypeAudio;
  _CERT_LOGOTYPE_AUDIO *rgLogotypeAudio;
};

/* 4427 */
struct _CERT_LOGOTYPE_REFERENCE
{
  unsigned int cHashedUrl;
  _CERT_HASHED_URL *rgHashedUrl;
};

/* 4428 */
union $A4D8A23174699983B419C647D9691DFA
{
  _CERT_LOGOTYPE_DATA *pLogotypeDirectInfo;
  _CERT_LOGOTYPE_REFERENCE *pLogotypeIndirectInfo;
};

/* 4429 */
struct _CERT_LOGOTYPE_INFO
{
  unsigned int dwLogotypeInfoChoice;
  $A4D8A23174699983B419C647D9691DFA ___u1;
};

/* 4430 */
struct _CERT_OTHER_LOGOTYPE_INFO
{
  char *pszObjId;
  _CERT_LOGOTYPE_INFO LogotypeInfo;
};

/* 4431 */
struct __declspec(align(8)) _TAPE_STATISTICS
{
  unsigned int Version;
  unsigned int Flags;
  _LARGE_INTEGER RecoveredWrites;
  _LARGE_INTEGER UnrecoveredWrites;
  _LARGE_INTEGER RecoveredReads;
  _LARGE_INTEGER UnrecoveredReads;
  char CompressionRatioReads;
  char CompressionRatioWrites;
};

/* 4432 */
struct _ACE_HEADER
{
  char AceType;
  char AceFlags;
  unsigned __int16 AceSize;
};

/* 4433 */
struct HGLRC__
{
  int unused;
};

/* 4434 */
struct tagEMREXCLUDECLIPRECT
{
  tagEMR emr;
  _RECTL rclClip;
};

/* 4435 */
struct tagEMRPOLYPOLYLINE
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int nPolys;
  unsigned int cptl;
  unsigned int aPolyCounts[1];
  _POINTL aptl[1];
};

/* 4436 */
struct tagUSEROBJECTFLAGS
{
  int fInherit;
  int fReserved;
  unsigned int dwFlags;
};

/* 4437 */
struct midistrmbuffver_tag
{
  unsigned int dwVersion;
  unsigned int dwMid;
  unsigned int dwOEMVersion;
};

/* 4438 */
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
{
  unsigned int cbSize;
  unsigned __int64 hCryptProv;
  _CMSG_MAIL_LIST_RECIPIENT_INFO *pMailList;
  unsigned int dwRecipientIndex;
  unsigned int dwKeyChoice;
  $6B5E0B9D6673BA135121EF621843DDF2 ___u5;
};

/* 4439 */
struct __declspec(align(4)) _CHANGER_EXCHANGE_MEDIUM
{
  _CHANGER_ELEMENT Transport;
  _CHANGER_ELEMENT Source;
  _CHANGER_ELEMENT Destination1;
  _CHANGER_ELEMENT Destination2;
  char Flip1;
  char Flip2;
};

/* 4440 */
struct fd_set
{
  unsigned int fd_count;
  unsigned __int64 fd_array[64];
};

/* 4441 */
struct _NON_PAGED_DEBUG_INFO
{
  unsigned __int16 Signature;
  unsigned __int16 Flags;
  unsigned int Size;
  unsigned __int16 Machine;
  unsigned __int16 Characteristics;
  unsigned int TimeDateStamp;
  unsigned int CheckSum;
  unsigned int SizeOfImage;
  unsigned __int64 ImageBase;
};

/* 4442 */
struct _CRYPT_CREDENTIALS
{
  unsigned int cbSize;
  const char *pszCredentialsOid;
  void *pvCredentials;
};

/* 4443 */
struct tagPDA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  HDC__ *hDC;
  unsigned int Flags;
  unsigned __int16 nFromPage;
  unsigned __int16 nToPage;
  unsigned __int16 nMinPage;
  unsigned __int16 nMaxPage;
  unsigned __int16 nCopies;
  HINSTANCE__ *hInstance;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnPrintHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  unsigned __int64 (__cdecl *lpfnSetupHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const char *lpPrintTemplateName;
  const char *lpSetupTemplateName;
  void *hPrintTemplate;
  void *hSetupTemplate;
};

/* 4444 */
struct _SCRUB_DATA_INPUT
{
  unsigned int Size;
  unsigned int Flags;
  unsigned int MaximumIos;
  unsigned int Reserved[17];
  char ResumeContext[816];
};

/* 4445 */
struct _CRYPT_HASH_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPTOAPI_BLOB Hash;
};

/* 4446 */
struct _CERT_OTHER_NAME
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Value;
};

/* 4447 */
union $AE56573D01722389916782BDDEBF5991
{
  _CERT_OTHER_NAME *pOtherName;
  wchar_t *pwszRfc822Name;
  wchar_t *pwszDNSName;
  _CRYPTOAPI_BLOB DirectoryName;
  wchar_t *pwszURL;
  _CRYPTOAPI_BLOB IPAddress;
  char *pszRegisteredID;
};

/* 4448 */
struct _CERT_ALT_NAME_ENTRY
{
  unsigned int dwAltNameChoice;
  $AE56573D01722389916782BDDEBF5991 ___u1;
};

/* 4449 */
struct _CERT_ACCESS_DESCRIPTION
{
  char *pszAccessMethod;
  _CERT_ALT_NAME_ENTRY AccessLocation;
};

/* 4450 */
struct __cppobj IStorage : IUnknown
{
};

/* 4451 */
struct HRGN__
{
  int unused;
};

/* 4452 */
struct tagCHANGEFILTERSTRUCT
{
  unsigned int cbSize;
  unsigned int ExtStatus;
};

/* 4453 */
struct tMIXERCONTROLDETAILS_UNSIGNED
{
  unsigned int dwValue;
};

/* 4454 */
struct _CRYPT_TIMESTAMP_ACCURACY
{
  unsigned int dwSeconds;
  unsigned int dwMillis;
  unsigned int dwMicros;
};

/* 4455 */
struct _CRYPT_TIMESTAMP_INFO
{
  unsigned int dwVersion;
  char *pszTSAPolicyId;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPTOAPI_BLOB HashedMessage;
  _CRYPTOAPI_BLOB SerialNumber;
  _FILETIME ftTime;
  _CRYPT_TIMESTAMP_ACCURACY *pvAccuracy;
  int fOrdering;
  _CRYPTOAPI_BLOB Nonce;
  _CRYPTOAPI_BLOB Tsa;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 4456 */
struct _CRYPT_TIMESTAMP_CONTEXT
{
  unsigned int cbEncoded;
  char *pbEncoded;
  _CRYPT_TIMESTAMP_INFO *pTimeStamp;
};

/* 4457 */
struct __declspec(align(4)) _BYTE_BLOB
{
  unsigned int clSize;
  char abData[1];
};

/* 4458 */
union _userHENHMETAFILE::__MIDL_IWinTypes_0006
{
  int hInproc;
  _BYTE_BLOB *hRemote;
  __int64 hInproc64;
};

/* 4459 */
struct _userHENHMETAFILE
{
  int fContext;
  _userHENHMETAFILE::__MIDL_IWinTypes_0006 u;
};

/* 4460 */
struct USN_JOURNAL_DATA_V0
{
  unsigned __int64 UsnJournalID;
  __int64 FirstUsn;
  __int64 NextUsn;
  __int64 LowestValidUsn;
  __int64 MaxUsn;
  unsigned __int64 MaximumSize;
  unsigned __int64 AllocationDelta;
};

/* 4461 */
struct __cppobj IXMLDOMNode : IDispatch
{
};

/* 4462 */
struct __cppobj IXMLDOMDocumentFragment : IXMLDOMNode
{
};

/* 4463 */
struct _CERT_SIGNED_CONTENT_INFO
{
  _CRYPTOAPI_BLOB ToBeSigned;
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPT_BIT_BLOB Signature;
};

/* 4464 */
struct _CMC_TAGGED_ATTRIBUTE
{
  unsigned int dwBodyPartID;
  _CRYPT_ATTRIBUTE Attribute;
};

/* 4465 */
struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
  unsigned int (__cdecl *pfnBufferSize)(unsigned int *, unsigned int, void *);
  char *(__cdecl *pfnMarshall)(unsigned int *, char *, void *);
  char *(__cdecl *pfnUnmarshall)(unsigned int *, char *, void *);
  void (__cdecl *pfnFree)(unsigned int *, void *);
};

/* 4466 */
struct _tagpropertykey
{
  _GUID fmtid;
  unsigned int pid;
};

/* 4467 */
struct _STORAGE_ADAPTER_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned int MaximumTransferLength;
  unsigned int MaximumPhysicalPages;
  unsigned int AlignmentMask;
  char AdapterUsesPio;
  char AdapterScansDown;
  char CommandQueueing;
  char AcceleratedTransfer;
  char BusType;
  unsigned __int16 BusMajorVersion;
  unsigned __int16 BusMinorVersion;
  char SrbType;
  char AddressType;
};

/* 4468 */
struct tagOFN_NT4W
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const wchar_t *lpstrFilter;
  wchar_t *lpstrCustomFilter;
  unsigned int nMaxCustFilter;
  unsigned int nFilterIndex;
  wchar_t *lpstrFile;
  unsigned int nMaxFile;
  wchar_t *lpstrFileTitle;
  unsigned int nMaxFileTitle;
  const wchar_t *lpstrInitialDir;
  const wchar_t *lpstrTitle;
  unsigned int Flags;
  unsigned __int16 nFileOffset;
  unsigned __int16 nFileExtension;
  const wchar_t *lpstrDefExt;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const wchar_t *lpTemplateName;
};

/* 4469 */
struct _JOBOBJECT_JOBSET_INFORMATION
{
  unsigned int MemberLevel;
};

/* 4470 */
struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
  _LUID adapterId;
  unsigned int id;
  unsigned int modeInfoIdx;
  unsigned int statusFlags;
};

/* 4471 */
struct tagRAWINPUTHEADER
{
  unsigned int dwType;
  unsigned int dwSize;
  void *hDevice;
  unsigned __int64 wParam;
};

/* 4472 */
struct $0BEE17049826DA8EAC4E51F5C14BEE1D
{
  unsigned __int16 usButtonFlags;
  unsigned __int16 usButtonData;
};

/* 4473 */
union $EC9D08B709EA9D8FBFEF9867631668FD
{
  unsigned int ulButtons;
  $0BEE17049826DA8EAC4E51F5C14BEE1D __s1;
};

/* 4474 */
struct tagRAWMOUSE
{
  unsigned __int16 usFlags;
  $EC9D08B709EA9D8FBFEF9867631668FD ___u1;
  unsigned int ulRawButtons;
  int lLastX;
  int lLastY;
  unsigned int ulExtraInformation;
};

/* 4475 */
struct tagRAWKEYBOARD
{
  unsigned __int16 MakeCode;
  unsigned __int16 Flags;
  unsigned __int16 Reserved;
  unsigned __int16 VKey;
  unsigned int Message;
  unsigned int ExtraInformation;
};

/* 4476 */
union $A63284F453DCF42B626AC45F2F1C28A4
{
  tagRAWMOUSE mouse;
  tagRAWKEYBOARD keyboard;
  tagRAWHID hid;
};

/* 4477 */
struct tagRAWINPUT
{
  tagRAWINPUTHEADER header;
  $A63284F453DCF42B626AC45F2F1C28A4 data;
};

/* 4478 */
struct CM_Power_Data_s
{
  unsigned int PD_Size;
  _DEVICE_POWER_STATE PD_MostRecentPowerState;
  unsigned int PD_Capabilities;
  unsigned int PD_D1Latency;
  unsigned int PD_D2Latency;
  unsigned int PD_D3Latency;
  _DEVICE_POWER_STATE PD_PowerStateMapping[7];
  _SYSTEM_POWER_STATE PD_DeepestSystemWake;
};

/* 4479 */
struct BITMAPV5HEADER
{
  unsigned int bV5Size;
  int bV5Width;
  int bV5Height;
  unsigned __int16 bV5Planes;
  unsigned __int16 bV5BitCount;
  unsigned int bV5Compression;
  unsigned int bV5SizeImage;
  int bV5XPelsPerMeter;
  int bV5YPelsPerMeter;
  unsigned int bV5ClrUsed;
  unsigned int bV5ClrImportant;
  unsigned int bV5RedMask;
  unsigned int bV5GreenMask;
  unsigned int bV5BlueMask;
  unsigned int bV5AlphaMask;
  unsigned int bV5CSType;
  tagICEXYZTRIPLE bV5Endpoints;
  unsigned int bV5GammaRed;
  unsigned int bV5GammaGreen;
  unsigned int bV5GammaBlue;
  unsigned int bV5Intent;
  unsigned int bV5ProfileData;
  unsigned int bV5ProfileSize;
  unsigned int bV5Reserved;
};

/* 4480 */
struct tagANIMATIONINFO
{
  unsigned int cbSize;
  int iMinAnimate;
};

/* 4481 */
struct tagWAVEOUTCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
};

/* 4482 */
struct _CTL_FIND_USAGE_PARA
{
  unsigned int cbSize;
  _CTL_USAGE SubjectUsage;
  _CRYPTOAPI_BLOB ListIdentifier;
  _CERT_INFO *pSigner;
};

/* 4483 */
struct _CTL_FIND_SUBJECT_PARA
{
  unsigned int cbSize;
  _CTL_FIND_USAGE_PARA *pUsagePara;
  unsigned int dwSubjectType;
  void *pvSubject;
};

/* 4484 */
struct _FILE_QUERY_SPARING_BUFFER
{
  unsigned int SparingUnitBytes;
  char SoftwareSparing;
  unsigned int TotalSpareBlocks;
  unsigned int FreeSpareBlocks;
};

/* 4485 */
struct _SET_PURGE_FAILURE_MODE_INPUT
{
  unsigned int Flags;
};

/* 4486 */
struct _VIDEOPARAMETERS
{
  _GUID Guid;
  unsigned int dwOffset;
  unsigned int dwCommand;
  unsigned int dwFlags;
  unsigned int dwMode;
  unsigned int dwTVStandard;
  unsigned int dwAvailableModes;
  unsigned int dwAvailableTVStandard;
  unsigned int dwFlickerFilter;
  unsigned int dwOverScanX;
  unsigned int dwOverScanY;
  unsigned int dwMaxUnscaledX;
  unsigned int dwMaxUnscaledY;
  unsigned int dwPositionX;
  unsigned int dwPositionY;
  unsigned int dwBrightness;
  unsigned int dwContrast;
  unsigned int dwCPType;
  unsigned int dwCPCommand;
  unsigned int dwCPStandard;
  unsigned int dwCPKey;
  unsigned int bCP_APSTriggerBits;
  char bOEMCopyProtection[256];
};

/* 4487 */
struct _CMC_TAGGED_CONTENT_INFO
{
  unsigned int dwBodyPartID;
  _CRYPTOAPI_BLOB EncodedContentInfo;
};

/* 4488 */
struct _CMC_TAGGED_OTHER_MSG
{
  unsigned int dwBodyPartID;
  char *pszObjId;
  _CRYPTOAPI_BLOB Value;
};

/* 4489 */
struct _CMC_RESPONSE_INFO
{
  unsigned int cTaggedAttribute;
  _CMC_TAGGED_ATTRIBUTE *rgTaggedAttribute;
  unsigned int cTaggedContentInfo;
  _CMC_TAGGED_CONTENT_INFO *rgTaggedContentInfo;
  unsigned int cTaggedOtherMsg;
  _CMC_TAGGED_OTHER_MSG *rgTaggedOtherMsg;
};

/* 4490 */
struct _OCSP_CERT_ID
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPTOAPI_BLOB IssuerNameHash;
  _CRYPTOAPI_BLOB IssuerKeyHash;
  _CRYPTOAPI_BLOB SerialNumber;
};

/* 4491 */
struct _PRINTER_CONNECTION_INFO_1A
{
  unsigned int dwFlags;
  char *pszDriverName;
};

/* 4492 */
struct sockaddr_in
{
  unsigned __int16 sin_family;
  unsigned __int16 sin_port;
  in_addr sin_addr;
  char sin_zero[8];
};

/* 4493 */
union $DE86D403B28CFDB22944C7C883F19EFF
{
  char Byte[16];
  unsigned __int16 Word[8];
};

/* 4494 */
struct in6_addr
{
  $DE86D403B28CFDB22944C7C883F19EFF u;
};

/* 4495 */
struct sockaddr_in6_old
{
  __int16 sin6_family;
  unsigned __int16 sin6_port;
  unsigned int sin6_flowinfo;
  in6_addr sin6_addr;
};

/* 4496 */
union sockaddr_gen
{
  sockaddr Address;
  sockaddr_in AddressIn;
  sockaddr_in6_old AddressIn6;
};

/* 4497 */
struct _PROCESSOR_GROUP_INFO
{
  char MaximumProcessorCount;
  char ActiveProcessorCount;
  char Reserved[38];
  unsigned __int64 ActiveProcessorMask;
};

/* 4498 */
struct _GROUP_RELATIONSHIP
{
  unsigned __int16 MaximumGroupCount;
  unsigned __int16 ActiveGroupCount;
  char Reserved[20];
  _PROCESSOR_GROUP_INFO GroupInfo[1];
};

/* 4499 */
struct tagBITMAPCOREHEADER
{
  unsigned int bcSize;
  unsigned __int16 bcWidth;
  unsigned __int16 bcHeight;
  unsigned __int16 bcPlanes;
  unsigned __int16 bcBitCount;
};

/* 4500 */
struct __declspec(align(2)) tagBITMAPCOREINFO
{
  tagBITMAPCOREHEADER bmciHeader;
  tagRGBTRIPLE bmciColors[1];
};

/* 4501 */
struct tagPIXELFORMATDESCRIPTOR
{
  unsigned __int16 nSize;
  unsigned __int16 nVersion;
  unsigned int dwFlags;
  char iPixelType;
  char cColorBits;
  char cRedBits;
  char cRedShift;
  char cGreenBits;
  char cGreenShift;
  char cBlueBits;
  char cBlueShift;
  char cAlphaBits;
  char cAlphaShift;
  char cAccumBits;
  char cAccumRedBits;
  char cAccumGreenBits;
  char cAccumBlueBits;
  char cAccumAlphaBits;
  char cDepthBits;
  char cStencilBits;
  char cAuxBuffers;
  char iLayerType;
  char bReserved;
  unsigned int dwLayerMask;
  unsigned int dwVisibleMask;
  unsigned int dwDamageMask;
};

/* 4502 */
struct tagEMRFILLPATH
{
  tagEMR emr;
  _RECTL rclBounds;
};

/* 4503 */
struct _CHANGER_SET_ACCESS
{
  _CHANGER_ELEMENT Element;
  unsigned int Control;
};

/* 4504 */
struct _REMSECURITY_ATTRIBUTES
{
  unsigned int nLength;
  unsigned int lpSecurityDescriptor;
  int bInheritHandle;
};

/* 4505 */
struct _WSAPROTOCOLCHAIN
{
  int ChainLen;
  unsigned int ChainEntries[7];
};

/* 4506 */
struct _WSAPROTOCOL_INFOA
{
  unsigned int dwServiceFlags1;
  unsigned int dwServiceFlags2;
  unsigned int dwServiceFlags3;
  unsigned int dwServiceFlags4;
  unsigned int dwProviderFlags;
  _GUID ProviderId;
  unsigned int dwCatalogEntryId;
  _WSAPROTOCOLCHAIN ProtocolChain;
  int iVersion;
  int iAddressFamily;
  int iMaxSockAddr;
  int iMinSockAddr;
  int iSocketType;
  int iProtocol;
  int iProtocolMaxOffset;
  int iNetworkByteOrder;
  int iSecurityScheme;
  unsigned int dwMessageSize;
  unsigned int dwProviderReserved;
  char szProtocol[256];
};

/* 4507 */
struct _FLOAT128
{
  __int64 LowPart;
  __int64 HighPart;
};

/* 4508 */
struct $5D1C4EAAE7086A2FC0593357DF78FB95
{
  char BaseMid;
  char Flags1;
  char Flags2;
  char BaseHi;
};

/* 4509 */
struct $A3BAC9569453E46653D4C53B8339026E
{
  unsigned __int32 BaseMid : 8;
  unsigned __int32 Type : 5;
  unsigned __int32 Dpl : 2;
  unsigned __int32 Pres : 1;
  unsigned __int32 LimitHi : 4;
  unsigned __int32 Sys : 1;
  unsigned __int32 Reserved_0 : 1;
  unsigned __int32 Default_Big : 1;
  unsigned __int32 Granularity : 1;
  unsigned __int32 BaseHi : 8;
};

/* 4510 */
union $02B27C53EFB0D5AD428062CA5D3A2A22
{
  $5D1C4EAAE7086A2FC0593357DF78FB95 Bytes;
  $A3BAC9569453E46653D4C53B8339026E Bits;
};

/* 4511 */
struct _LDT_ENTRY
{
  unsigned __int16 LimitLow;
  unsigned __int16 BaseLow;
  $02B27C53EFB0D5AD428062CA5D3A2A22 HighWord;
};

/* 4512 */
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION
{
  _LARGE_INTEGER PerProcessUserTimeLimit;
  _LARGE_INTEGER PerJobUserTimeLimit;
  unsigned int LimitFlags;
  unsigned __int64 MinimumWorkingSetSize;
  unsigned __int64 MaximumWorkingSetSize;
  unsigned int ActiveProcessLimit;
  unsigned __int64 Affinity;
  unsigned int PriorityClass;
  unsigned int SchedulingClass;
};

/* 4513 */
struct __unaligned __declspec(align(2)) tagMETAHEADER
{
  unsigned __int16 mtType;
  unsigned __int16 mtHeaderSize;
  unsigned __int16 mtVersion;
  unsigned int mtSize;
  unsigned __int16 mtNoObjects;
  unsigned int mtMaxRecord;
  unsigned __int16 mtNoParameters;
};

/* 4514 */
struct tagWNDCLASSEXA
{
  unsigned int cbSize;
  unsigned int style;
  __int64 (__cdecl *lpfnWndProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const char *lpszMenuName;
  const char *lpszClassName;
  HICON__ *hIconSm;
};

/* 4515 */
struct _CRYPT_SMIME_CAPABILITY
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Parameters;
};

/* 4516 */
struct _CRYPT_SMIME_CAPABILITIES
{
  unsigned int cCapability;
  _CRYPT_SMIME_CAPABILITY *rgCapability;
};

/* 4517 */
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
{
  unsigned int cbSize;
  unsigned int dwRegPolicySettings;
  int fCommercial;
};

/* 4518 */
struct _DEVICE_DATA_SET_RANGE
{
  __int64 StartingOffset;
  unsigned __int64 LengthInBytes;
};

/* 4519 */
struct _CREATE_DISK_GPT
{
  _GUID DiskId;
  unsigned int MaxPartitionCount;
};

/* 4520 */
struct SCARD_READERSTATEA
{
  const char *szReader;
  void *pvUserData;
  unsigned int dwCurrentState;
  unsigned int dwEventState;
  unsigned int cbAtr;
  char rgbAtr[36];
};

/* 4521 */
struct _PRINTER_OPTIONSW
{
  unsigned int cbSize;
  unsigned int dwFlags;
};

/* 4522 */
struct addrinfoex2W
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  unsigned __int64 ai_addrlen;
  wchar_t *ai_canonname;
  sockaddr *ai_addr;
  void *ai_blob;
  unsigned __int64 ai_bloblen;
  _GUID *ai_provider;
  addrinfoex2W *ai_next;
  int ai_version;
  wchar_t *ai_fqdn;
};

/* 4523 */
struct _FILE_ID_128
{
  char Identifier[16];
};

/* 4524 */
struct HKL__
{
  int unused;
};

/* 4525 */
struct tagLOGFONTA
{
  int lfHeight;
  int lfWidth;
  int lfEscapement;
  int lfOrientation;
  int lfWeight;
  char lfItalic;
  char lfUnderline;
  char lfStrikeOut;
  char lfCharSet;
  char lfOutPrecision;
  char lfClipPrecision;
  char lfQuality;
  char lfPitchAndFamily;
  char lfFaceName[32];
};

/* 4526 */
struct tagCWPRETSTRUCT
{
  __int64 lResult;
  __int64 lParam;
  unsigned __int64 wParam;
  unsigned int message;
  HWND__ *hwnd;
};

/* 4527 */
struct _SERVICE_STATUS_PROCESS
{
  unsigned int dwServiceType;
  unsigned int dwCurrentState;
  unsigned int dwControlsAccepted;
  unsigned int dwWin32ExitCode;
  unsigned int dwServiceSpecificExitCode;
  unsigned int dwCheckPoint;
  unsigned int dwWaitHint;
  unsigned int dwProcessId;
  unsigned int dwServiceFlags;
};

/* 4528 */
struct _SERVICE_NOTIFY_2A
{
  unsigned int dwVersion;
  void (__cdecl *pfnNotifyCallback)(void *);
  void *pContext;
  unsigned int dwNotificationStatus;
  _SERVICE_STATUS_PROCESS ServiceStatus;
  unsigned int dwNotificationTriggered;
  char *pszServiceNames;
};

/* 4529 */
struct HIMCC__
{
  int unused;
};

/* 4530 */
struct _MEMORY_BASIC_INFORMATION32
{
  unsigned int BaseAddress;
  unsigned int AllocationBase;
  unsigned int AllocationProtect;
  unsigned int RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
};

/* 4531 */
struct tagENHMETARECORD
{
  unsigned int iType;
  unsigned int nSize;
  unsigned int dParm[1];
};

/* 4532 */
struct __declspec(align(4)) tagTEXTMETRICA
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  char tmFirstChar;
  char tmLastChar;
  char tmDefaultChar;
  char tmBreakChar;
  char tmItalic;
  char tmUnderlined;
  char tmStruckOut;
  char tmPitchAndFamily;
  char tmCharSet;
};

/* 4533 */
struct tagAUXCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4534 */
struct tagMIXERCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4535 */
struct OPENCARD_SEARCH_CRITERIAA
{
  unsigned int dwStructSize;
  char *lpstrGroupNames;
  unsigned int nMaxGroupNames;
  _GUID *rgguidInterfaces;
  unsigned int cguidInterfaces;
  char *lpstrCardNames;
  unsigned int nMaxCardNames;
  int (__cdecl *lpfnCheck)(unsigned __int64, unsigned __int64, void *);
  unsigned __int64 (__cdecl *lpfnConnect)(unsigned __int64, char *, char *, void *);
  void (__cdecl *lpfnDisconnect)(unsigned __int64, unsigned __int64, void *);
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
};

/* 4536 */
struct OPENCARDNAME_EXA
{
  unsigned int dwStructSize;
  unsigned __int64 hSCardContext;
  HWND__ *hwndOwner;
  unsigned int dwFlags;
  const char *lpstrTitle;
  const char *lpstrSearchDesc;
  HICON__ *hIcon;
  OPENCARD_SEARCH_CRITERIAA *pOpenCardSearchCriteria;
  unsigned __int64 (__cdecl *lpfnConnect)(unsigned __int64, char *, char *, void *);
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  char *lpstrRdr;
  unsigned int nMaxRdr;
  char *lpstrCard;
  unsigned int nMaxCard;
  unsigned int dwActiveProtocol;
  unsigned __int64 hCardHandle;
};

/* 4537 */
struct _FILE_ATTRIBUTE_TAG_INFO
{
  unsigned int FileAttributes;
  unsigned int ReparseTag;
};

/* 4538 */
struct _SEC_WINNT_AUTH_IDENTITY_W
{
  unsigned __int16 *User;
  unsigned int UserLength;
  unsigned __int16 *Domain;
  unsigned int DomainLength;
  unsigned __int16 *Password;
  unsigned int PasswordLength;
  unsigned int Flags;
};

/* 4539 */
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
  _SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
  unsigned int Flags;
  unsigned int AuthenticationTarget;
  unsigned int NumberOfAuthnSchemes;
  unsigned int *AuthnSchemes;
  unsigned __int16 *ServerCertificateSubject;
};

/* 4540 */
union $FE051B784B8BB8B8D4262884B1E07CD3
{
  _RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
};

/* 4541 */
struct _RPC_SECURITY_QOS_V3_W
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  $FE051B784B8BB8B8D4262884B1E07CD3 u;
  void *Sid;
};

/* 4542 */
struct _RPC_VERSION
{
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
};

/* 4543 */
struct _RPC_SYNTAX_IDENTIFIER
{
  _GUID SyntaxGUID;
  _RPC_VERSION SyntaxVersion;
};

/* 4544 */
struct _RDR_CALLOUT_STATE
{
  int LastError;
  void *LastEEInfo;
  _RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
  unsigned __int16 *ServerName;
  unsigned __int16 *ServerPort;
  unsigned __int16 *RemoteUser;
  unsigned __int16 *AuthType;
  char ResourceTypePresent;
  char SessionIdPresent;
  char InterfacePresent;
  _GUID ResourceType;
  _GUID SessionId;
  _RPC_SYNTAX_IDENTIFIER Interface;
  void *CertContext;
};

/* 4545 */
struct __declspec(align(8)) _DRIVE_LAYOUT_INFORMATION_GPT
{
  _GUID DiskId;
  _LARGE_INTEGER StartingUsableOffset;
  _LARGE_INTEGER UsableLength;
  unsigned int MaxPartitionCount;
};

/* 4546 */
struct _CORE_PRINTER_DRIVERW
{
  _GUID CoreDriverGUID;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  wchar_t szPackageID[260];
};

/* 4547 */
struct HWINSTA__
{
  int unused;
};

/* 4548 */
struct _OFSTRUCT
{
  char cBytes;
  char fFixedDisk;
  unsigned __int16 nErrCode;
  unsigned __int16 Reserved1;
  unsigned __int16 Reserved2;
  char szPathName[128];
};

/* 4549 */
struct DISPLAYCONFIG_RATIONAL
{
  unsigned int Numerator;
  unsigned int Denominator;
};

/* 4550 */
struct _FIXED
{
  unsigned __int16 fract;
  __int16 value;
};

/* 4551 */
struct _MAT2
{
  _FIXED eM11;
  _FIXED eM12;
  _FIXED eM21;
  _FIXED eM22;
};

/* 4552 */
struct _CREATE_DISK_MBR
{
  unsigned int Signature;
};

/* 4553 */
union $6AD998B43084758369F87598424484BC
{
  _CREATE_DISK_MBR Mbr;
  _CREATE_DISK_GPT Gpt;
};

/* 4554 */
struct _CREATE_DISK
{
  _PARTITION_STYLE PartitionStyle;
  $6AD998B43084758369F87598424484BC ___u1;
};

/* 4555 */
struct _DISK_CONTROLLER_NUMBER
{
  unsigned int ControllerNumber;
  unsigned int DiskNumber;
};

/* 4556 */
struct __declspec(align(4)) tagEMRNAMEDESCAPE
{
  tagEMR emr;
  int iEscape;
  int cbDriver;
  int cbEscData;
  char EscData[1];
};

/* 4557 */
struct tagHELPINFO
{
  unsigned int cbSize;
  int iContextType;
  int iCtrlId;
  void *hItemHandle;
  unsigned __int64 dwContextId;
  tagPOINT MousePos;
};

/* 4558 */
struct __declspec(align(8)) tagMSGBOXPARAMSA
{
  unsigned int cbSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const char *lpszText;
  const char *lpszCaption;
  unsigned int dwStyle;
  const char *lpszIcon;
  unsigned __int64 dwContextHelpId;
  void (__cdecl *lpfnMsgBoxCallback)(tagHELPINFO *);
  unsigned int dwLanguageId;
};

/* 4559 */
struct __declspec(align(8)) tagCLIENTCREATESTRUCT
{
  void *hWindowMenu;
  unsigned int idFirstChild;
};

/* 4560 */
struct _FORM_INFO_1W
{
  unsigned int Flags;
  wchar_t *pName;
  tagSIZE Size;
  _RECTL ImageableArea;
};

/* 4561 */
struct __declspec(align(8)) _tagSOFTDISTINFO
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int dwAdState;
  wchar_t *szTitle;
  wchar_t *szAbstract;
  wchar_t *szHREF;
  unsigned int dwInstalledVersionMS;
  unsigned int dwInstalledVersionLS;
  unsigned int dwUpdateVersionMS;
  unsigned int dwUpdateVersionLS;
  unsigned int dwAdvertisedVersionMS;
  unsigned int dwAdvertisedVersionLS;
  unsigned int dwReserved;
};

/* 4562 */
struct _TOKEN_MANDATORY_LABEL
{
  _SID_AND_ATTRIBUTES Label;
};

/* 4563 */
struct __declspec(align(8)) _OUTPUT_DEBUG_STRING_INFO
{
  char *lpDebugStringData;
  unsigned __int16 fUnicode;
  unsigned __int16 nDebugStringLength;
};

/* 4564 */
struct _FILE_COMPRESSION_INFO
{
  _LARGE_INTEGER CompressedFileSize;
  unsigned __int16 CompressionFormat;
  char CompressionUnitShift;
  char ChunkShift;
  char ClusterShift;
  char Reserved[3];
};

/* 4565 */
struct __cppobj IWaitMultiple : IUnknown
{
};

/* 4568 */
union $6262645CFB0994A5BAF75D8E62A90258
{
  tagTYPEDESC *lptdesc;
  tagARRAYDESC *lpadesc;
  unsigned int hreftype;
};

/* 4566 */
struct __declspec(align(8)) tagTYPEDESC
{
  $6262645CFB0994A5BAF75D8E62A90258 ___u0;
  unsigned __int16 vt;
};

/* 4567 */
struct __declspec(align(8)) tagARRAYDESC
{
  tagTYPEDESC tdescElem;
  unsigned __int16 cDims;
  tagSAFEARRAYBOUND rgbounds[1];
};

/* 4569 */
struct tagPARAMDESCEX
{
  unsigned int cBytes;
  tagVARIANT varDefaultValue;
};

/* 4570 */
struct __declspec(align(8)) tagPARAMDESC
{
  tagPARAMDESCEX *pparamdescex;
  unsigned __int16 wParamFlags;
};

/* 4571 */
union $077E5AF70D09B73B0B2470DDDD18E756
{
  tagIDLDESC idldesc;
  tagPARAMDESC paramdesc;
};

/* 4572 */
struct tagELEMDESC
{
  tagTYPEDESC tdesc;
  $077E5AF70D09B73B0B2470DDDD18E756 ___u1;
};

/* 4573 */
struct __declspec(align(8)) tagFUNCDESC
{
  int memid;
  int *lprgscode;
  tagELEMDESC *lprgelemdescParam;
  tagFUNCKIND funckind;
  tagINVOKEKIND invkind;
  tagCALLCONV callconv;
  __int16 cParams;
  __int16 cParamsOpt;
  __int16 oVft;
  __int16 cScodes;
  tagELEMDESC elemdescFunc;
  unsigned __int16 wFuncFlags;
};

/* 4574 */
struct tagEVENTMSG
{
  unsigned int message;
  unsigned int paramL;
  unsigned int paramH;
  unsigned int time;
  HWND__ *hwnd;
};

/* 4575 */
struct _UNIVERSAL_NAME_INFOA
{
  char *lpUniversalName;
};

/* 4576 */
struct tagMCI_STATUS_PARMS
{
  unsigned __int64 dwCallback;
  unsigned __int64 dwReturn;
  unsigned int dwItem;
  unsigned int dwTrack;
};

/* 4577 */
struct __declspec(align(4)) _WORD_BLOB
{
  unsigned int clSize;
  unsigned __int16 asData[1];
};

/* 4578 */
struct _IMAGE_DATA_DIRECTORY
{
  unsigned int VirtualAddress;
  unsigned int Size;
};

/* 4579 */
struct _IMAGE_OPTIONAL_HEADER64
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned __int64 ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned __int64 SizeOfStackReserve;
  unsigned __int64 SizeOfStackCommit;
  unsigned __int64 SizeOfHeapReserve;
  unsigned __int64 SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 4580 */
struct tagEMRSETVIEWPORTEXTEX
{
  tagEMR emr;
  tagSIZE szlExtent;
};

/* 4581 */
struct __declspec(align(8)) tagTRACKMOUSEEVENT
{
  unsigned int cbSize;
  unsigned int dwFlags;
  HWND__ *hwndTrack;
  unsigned int dwHoverTime;
};

/* 4582 */
struct tagCOMBOBOXINFO
{
  unsigned int cbSize;
  tagRECT rcItem;
  tagRECT rcButton;
  unsigned int stateButton;
  HWND__ *hwndCombo;
  HWND__ *hwndItem;
  HWND__ *hwndList;
};

/* 4583 */
struct _SEC_WINNT_AUTH_IDENTITY_A
{
  char *User;
  unsigned int UserLength;
  char *Domain;
  unsigned int DomainLength;
  char *Password;
  unsigned int PasswordLength;
  unsigned int Flags;
};

/* 4584 */
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
  _SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
  unsigned int Flags;
  unsigned int AuthenticationTarget;
  unsigned int NumberOfAuthnSchemes;
  unsigned int *AuthnSchemes;
  char *ServerCertificateSubject;
};

/* 4585 */
union $438283C8A9CA248D8498A5EDEE1E59DB
{
  _RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
};

/* 4586 */
struct _RPC_SECURITY_QOS_V2_A
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  $438283C8A9CA248D8498A5EDEE1E59DB u;
};

/* 4587 */
struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER
{
  unsigned __int16 ChecksumAlgorithm;
  unsigned __int16 Reserved;
  unsigned int Flags;
};

/* 4588 */
struct __declspec(align(8)) tagCHOOSEFONTA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HDC__ *hDC;
  tagLOGFONTA *lpLogFont;
  int iPointSize;
  unsigned int Flags;
  unsigned int rgbColors;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const char *lpTemplateName;
  HINSTANCE__ *hInstance;
  char *lpszStyle;
  unsigned __int16 nFontType;
  unsigned __int16 ___MISSING_ALIGNMENT__;
  int nSizeMin;
  int nSizeMax;
};

/* 4589 */
struct $9F5F1B3B62BF9BBBAE65D06E22EF4EC0
{
  unsigned __int16 Linenumber;
  unsigned __int16 Size;
};

/* 4590 */
union $4A2CCB37DD0A2FA6CC9F69E7A32D11F3
{
  $9F5F1B3B62BF9BBBAE65D06E22EF4EC0 LnSz;
  unsigned int TotalSize;
};

/* 4591 */
struct $0267EABC91DDCC621C08D74192F36445
{
  unsigned int PointerToLinenumber;
  unsigned int PointerToNextFunction;
};

/* 4592 */
struct $72A87AE534D1DC1A4B7CCA877B33F564
{
  unsigned __int16 Dimension[4];
};

/* 4593 */
union $F39041087BDB7CBACD70ABCE7DF95075
{
  $0267EABC91DDCC621C08D74192F36445 Function;
  $72A87AE534D1DC1A4B7CCA877B33F564 Array;
};

/* 4594 */
struct __unaligned __declspec(align(2)) $C5D5C54E144C3A3819421AAC86528A94
{
  unsigned int TagIndex;
  $4A2CCB37DD0A2FA6CC9F69E7A32D11F3 Misc;
  $F39041087BDB7CBACD70ABCE7DF95075 FcnAry;
  unsigned __int16 TvIndex;
};

/* 4595 */
struct $66EA94121FC5BA9E8F572A953AB6FE87
{
  char Name[18];
};

/* 4596 */
struct __unaligned __declspec(align(2)) $6BC8BB93DCE6F8CAF31D23A54AB6DD1F
{
  unsigned int Length;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int CheckSum;
  __int16 Number;
  char Selection;
  char bReserved;
  __int16 HighNumber;
};

/* 4597 */
struct __unaligned __declspec(align(2)) IMAGE_AUX_SYMBOL_TOKEN_DEF
{
  char bAuxType;
  char bReserved;
  unsigned int SymbolTableIndex;
  char rgbReserved[12];
};

/* 4598 */
struct __unaligned __declspec(align(2)) $F6F421F1EF697500A866C638CFA1FC7E
{
  unsigned int crc;
  char rgbReserved[14];
};

/* 4599 */
union _IMAGE_AUX_SYMBOL
{
  $C5D5C54E144C3A3819421AAC86528A94 Sym;
  $66EA94121FC5BA9E8F572A953AB6FE87 File;
  $6BC8BB93DCE6F8CAF31D23A54AB6DD1F Section;
  IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
  $F6F421F1EF697500A866C638CFA1FC7E CRC;
};

/* 4600 */
struct _CRYPT_X942_OTHER_INFO
{
  char *pszContentEncryptionObjId;
  char rgbCounter[4];
  char rgbKeyLength[4];
  _CRYPTOAPI_BLOB PubInfo;
};

/* 4601 */
struct _CERT_USAGE_MATCH
{
  unsigned int dwType;
  _CTL_USAGE Usage;
};

/* 4602 */
struct _CERT_CHAIN_PARA
{
  unsigned int cbSize;
  _CERT_USAGE_MATCH RequestedUsage;
};

/* 4603 */
struct __declspec(align(8)) _CERT_SELECT_CHAIN_PARA
{
  void *hChainEngine;
  _FILETIME *pTime;
  void *hAdditionalStore;
  _CERT_CHAIN_PARA *pChainPara;
  unsigned int dwFlags;
};

/* 4604 */
struct __declspec(align(8)) _CORE_PRINTER_DRIVERA
{
  _GUID CoreDriverGUID;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  char szPackageID[260];
};

/* 4605 */
struct tagCACLSID
{
  unsigned int cElems;
  _GUID *pElems;
};

/* 4606 */
struct _EVENTLOGRECORD
{
  unsigned int Length;
  unsigned int Reserved;
  unsigned int RecordNumber;
  unsigned int TimeGenerated;
  unsigned int TimeWritten;
  unsigned int EventID;
  unsigned __int16 EventType;
  unsigned __int16 NumStrings;
  unsigned __int16 EventCategory;
  unsigned __int16 ReservedFlags;
  unsigned int ClosingRecordNumber;
  unsigned int StringOffset;
  unsigned int UserSidLength;
  unsigned int UserSidOffset;
  unsigned int DataLength;
  unsigned int DataOffset;
};

/* 4607 */
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
{
  unsigned int PropagationCookie;
  _GUID UOW;
  _GUID TmIdentity;
  unsigned int BufferLength;
};

/* 4608 */
struct tagSTYLESTRUCT
{
  unsigned int styleOld;
  unsigned int styleNew;
};

/* 4609 */
struct _cpinfoexA
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
  wchar_t UnicodeDefaultChar;
  unsigned int CodePage;
  char CodePageName[260];
};

/* 4610 */
struct tagMCI_OVLY_SAVE_PARMSW
{
  unsigned __int64 dwCallback;
  const wchar_t *lpfilename;
  tagRECT rc;
};

/* 4611 */
struct tagAUXCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
};

/* 4612 */
struct timecaps_tag
{
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
};

/* 4613 */
struct _GET_LENGTH_INFORMATION
{
  _LARGE_INTEGER Length;
};

/* 4614 */
struct tagCADBL
{
  unsigned int cElems;
  long double *pElems;
};

/* 4615 */
struct tagMCI_VD_ESCAPE_PARMSA
{
  unsigned __int64 dwCallback;
  const char *lpstrCommand;
};

/* 4616 */
struct _BCRYPT_DSA_PARAMETER_HEADER
{
  unsigned int cbLength;
  unsigned int dwMagic;
  unsigned int cbKeyLength;
  char Count[4];
  char Seed[20];
  char q[20];
};

/* 4617 */
struct _GET_DISK_ATTRIBUTES
{
  unsigned int Version;
  unsigned int Reserved1;
  unsigned __int64 Attributes;
};

/* 4618 */
struct tagEMRMODIFYWORLDTRANSFORM
{
  tagEMR emr;
  tagXFORM xform;
  unsigned int iMode;
};

/* 4619 */
struct SChannelHookCallInfo
{
  _GUID iid;
  unsigned int cbSize;
  _GUID uCausality;
  unsigned int dwServerPid;
  unsigned int iMethod;
  void *pObject;
};

/* 4620 */
struct __declspec(align(4)) tagEXTLOGFONTA
{
  tagLOGFONTA elfLogFont;
  char elfFullName[64];
  char elfStyle[32];
  unsigned int elfVersion;
  unsigned int elfStyleSize;
  unsigned int elfMatch;
  unsigned int elfReserved;
  char elfVendorId[4];
  unsigned int elfCulture;
  tagPANOSE elfPanose;
};

/* 4621 */
struct _RPC_SECURITY_QOS_V5_W
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  $FE051B784B8BB8B8D4262884B1E07CD3 u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
};

/* 4622 */
struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned int BytesPerCacheLine;
  unsigned int BytesOffsetForCacheAlignment;
  unsigned int BytesPerLogicalSector;
  unsigned int BytesPerPhysicalSector;
  unsigned int BytesOffsetForSectorAlignment;
};

/* 4623 */
struct _FILE_REFERENCE_RANGE
{
  unsigned __int64 StartingFileReferenceNumber;
  unsigned __int64 EndingFileReferenceNumber;
};

/* 4624 */
struct __declspec(align(8)) _PORT_INFO_3W
{
  unsigned int dwStatus;
  wchar_t *pszStatus;
  unsigned int dwSeverity;
};

/* 4625 */
struct __declspec(align(8)) _tagPROTOCOLDATA
{
  unsigned int grfFlags;
  unsigned int dwState;
  void *pData;
  unsigned int cbData;
};

/* 4626 */
struct tagMENUITEMINFOA
{
  unsigned int cbSize;
  unsigned int fMask;
  unsigned int fType;
  unsigned int fState;
  unsigned int wID;
  HMENU__ *hSubMenu;
  HBITMAP__ *hbmpChecked;
  HBITMAP__ *hbmpUnchecked;
  unsigned __int64 dwItemData;
  char *dwTypeData;
  unsigned int cch;
  HBITMAP__ *hbmpItem;
};

/* 4627 */
struct __declspec(align(8)) _ICONINFOEXW
{
  unsigned int cbSize;
  int fIcon;
  unsigned int xHotspot;
  unsigned int yHotspot;
  HBITMAP__ *hbmMask;
  HBITMAP__ *hbmColor;
  unsigned __int16 wResID;
  wchar_t szModName[260];
  wchar_t szResName[260];
};

/* 4628 */
struct tagWAVEINCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4629 */
struct _CERT_ALT_NAME_INFO
{
  unsigned int cAltEntry;
  _CERT_ALT_NAME_ENTRY *rgAltEntry;
};

/* 4630 */
struct _STORAGE_DEVICE_NUMBER
{
  unsigned int DeviceType;
  unsigned int DeviceNumber;
  unsigned int PartitionNumber;
};

/* 4631 */
struct __declspec(align(4)) _DEVICE_SEEK_PENALTY_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  char IncursSeekPenalty;
};

/* 4632 */
struct _XSAVE_AREA_HEADER
{
  unsigned __int64 Mask;
  unsigned __int64 Reserved[7];
};

/* 4633 */
struct _currencyfmtW
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  wchar_t *lpDecimalSep;
  wchar_t *lpThousandSep;
  unsigned int NegativeOrder;
  unsigned int PositiveOrder;
  wchar_t *lpCurrencySymbol;
};

/* 4634 */
struct __unaligned __declspec(align(4)) tagMCI_OPEN_PARMSW
{
  unsigned __int64 dwCallback;
  unsigned int wDeviceID;
  const wchar_t *lpstrDeviceType;
  const wchar_t *lpstrElementName;
  const wchar_t *lpstrAlias;
};

/* 4635 */
struct _CERT_BASIC_CONSTRAINTS2_INFO
{
  int fCA;
  int fPathLenConstraint;
  unsigned int dwPathLenConstraint;
};

/* 4636 */
struct __declspec(align(4)) _DEVICE_WRITE_AGGREGATION_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  char BenefitsFromWriteAggregation;
};

/* 4637 */
struct _BIN_RANGE
{
  _LARGE_INTEGER StartValue;
  _LARGE_INTEGER Length;
};

/* 4638 */
struct __declspec(align(8)) _BIN_COUNT
{
  _BIN_RANGE BinRange;
  unsigned int BinCount;
};

/* 4639 */
struct _BIN_RESULTS
{
  unsigned int NumberOfBins;
  _BIN_COUNT BinCounts[1];
};

/* 4640 */
struct __cppobj IDataAdviseHolder : IUnknown
{
};

/* 4641 */
struct __declspec(align(4)) tagDVTARGETDEVICE
{
  unsigned int tdSize;
  unsigned __int16 tdDriverNameOffset;
  unsigned __int16 tdDeviceNameOffset;
  unsigned __int16 tdPortNameOffset;
  unsigned __int16 tdExtDevmodeOffset;
  char tdData[1];
};

/* 4642 */
struct __declspec(align(8)) tagFORMATETC
{
  unsigned __int16 cfFormat;
  tagDVTARGETDEVICE *ptd;
  unsigned int dwAspect;
  int lindex;
  unsigned int tymed;
};

/* 4643 */
struct __cppobj IAdviseSink : IUnknown
{
};

/* 4644 */
struct __cppobj IEnumSTATDATA : IUnknown
{
};

/* 4645 */
struct tagBIND_OPTS
{
  unsigned int cbStruct;
  unsigned int grfFlags;
  unsigned int grfMode;
  unsigned int dwTickCountDeadline;
};

/* 4646 */
struct __cppobj IXMLDOMNodeList : IDispatch
{
};

/* 4647 */
struct __cppobj IXMLDOMNamedNodeMap : IDispatch
{
};

/* 4648 */
struct __cppobj IXMLDOMDocument : IXMLDOMNode
{
};

/* 4649 */
struct _SERVICE_REQUIRED_PRIVILEGES_INFOW
{
  wchar_t *pmszRequiredPrivileges;
};

/* 4650 */
struct _ACL
{
  char AclRevision;
  char Sbz1;
  unsigned __int16 AclSize;
  unsigned __int16 AceCount;
  unsigned __int16 Sbz2;
};

/* 4651 */
struct _TOKEN_DEFAULT_DACL
{
  _ACL *DefaultDacl;
};

/* 4652 */
struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
{
  _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
};

/* 4653 */
struct tagEMRLINETO
{
  tagEMR emr;
  _POINTL ptl;
};

/* 4654 */
struct _CERT_LOGOTYPE_EXT_INFO
{
  unsigned int cCommunityLogo;
  _CERT_LOGOTYPE_INFO *rgCommunityLogo;
  _CERT_LOGOTYPE_INFO *pIssuerLogo;
  _CERT_LOGOTYPE_INFO *pSubjectLogo;
  unsigned int cOtherLogo;
  _CERT_OTHER_LOGOTYPE_INFO *rgOtherLogo;
};

/* 4655 */
struct __declspec(align(4)) tagRemBRUSH
{
  unsigned int cbData;
  char data[1];
};

/* 4656 */
struct _SET_PARTITION_INFORMATION
{
  char PartitionType;
};

/* 4657 */
struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
  unsigned int dwDataType;
  unsigned int cbData;
  char *pData;
};

/* 4658 */
struct QOS_OBJECT_HDR
{
  unsigned int ObjectType;
  unsigned int ObjectLength;
};

/* 4659 */
struct $6E35CCFC02D81E31BD4C6BEDD77CB20A
{
  unsigned __int32 NameOffset : 31;
  unsigned __int32 NameIsString : 1;
};

/* 4660 */
union $17AA19AB1846BB8A8CB862FEAB7F8B86
{
  $6E35CCFC02D81E31BD4C6BEDD77CB20A __s0;
  unsigned int Name;
  unsigned __int16 Id;
};

/* 4661 */
struct $B2E03ED94C06E2E681F8D03FF7FF5CB3
{
  unsigned __int32 OffsetToDirectory : 31;
  unsigned __int32 DataIsDirectory : 1;
};

/* 4662 */
union $FF5B3C436225B6512DC88C41A78C4BE6
{
  unsigned int OffsetToData;
  $B2E03ED94C06E2E681F8D03FF7FF5CB3 __s1;
};

/* 4663 */
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
  $17AA19AB1846BB8A8CB862FEAB7F8B86 ___u0;
  $FF5B3C436225B6512DC88C41A78C4BE6 ___u1;
};

/* 4664 */
struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
{
  unsigned int ulFlags;
  ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
  unsigned int UiAccess;
};

/* 4665 */
struct _GRADIENT_TRIANGLE
{
  unsigned int Vertex1;
  unsigned int Vertex2;
  unsigned int Vertex3;
};

/* 4666 */
struct tagEMRROUNDRECT
{
  tagEMR emr;
  _RECTL rclBox;
  tagSIZE szlCorner;
};

/* 4667 */
struct tagMIXERCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
};

/* 4668 */
struct _RPC_CALL_LOCAL_ADDRESS_V1
{
  unsigned int Version;
  void *Buffer;
  unsigned int BufferSize;
  tagRpcLocalAddressFormat AddressFormat;
};

/* 4669 */
struct tagRPC_CALL_ATTRIBUTES_V3_A
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ServerPrincipalNameBufferLength;
  char *ServerPrincipalName;
  unsigned int ClientPrincipalNameBufferLength;
  char *ClientPrincipalName;
  unsigned int AuthenticationLevel;
  unsigned int AuthenticationService;
  int NullSession;
  int KernelModeCaller;
  unsigned int ProtocolSequence;
  unsigned int IsClientLocal;
  void *ClientPID;
  unsigned int CallStatus;
  tagRpcCallType CallType;
  _RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
  unsigned __int16 OpNum;
  _GUID InterfaceUuid;
  unsigned int ClientIdentifierBufferLength;
  char *ClientIdentifier;
};

/* 4670 */
struct __cppobj IGetBindHandle : IUnknown
{
};

/* 4671 */
struct __declspec(align(4)) _POWER_SESSION_WINLOGON
{
  unsigned int SessionId;
  char Console;
  char Locked;
};

/* 4672 */
struct _ADMINISTRATOR_POWER_POLICY
{
  _SYSTEM_POWER_STATE MinSleep;
  _SYSTEM_POWER_STATE MaxSleep;
  unsigned int MinVideoTimeout;
  unsigned int MaxVideoTimeout;
  unsigned int MinSpindownTimeout;
  unsigned int MaxSpindownTimeout;
};

/* 4673 */
struct _IMAGE_FILE_HEADER
{
  unsigned __int16 Machine;
  unsigned __int16 NumberOfSections;
  unsigned int TimeDateStamp;
  unsigned int PointerToSymbolTable;
  unsigned int NumberOfSymbols;
  unsigned __int16 SizeOfOptionalHeader;
  unsigned __int16 Characteristics;
};

/* 4674 */
struct _IMAGE_NT_HEADERS64
{
  unsigned int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

/* 4675 */
struct _ASSEMBLY_FILE_DETAILED_INFORMATION
{
  unsigned int ulFlags;
  unsigned int ulFilenameLength;
  unsigned int ulPathLength;
  const wchar_t *lpFileName;
  const wchar_t *lpFilePath;
};

/* 4676 */
struct _UNLOAD_DLL_DEBUG_INFO
{
  void *lpBaseOfDll;
};

/* 4677 */
struct tagLOGPEN
{
  unsigned int lopnStyle;
  tagPOINT lopnWidth;
  unsigned int lopnColor;
};

/* 4678 */
struct _REMOTE_NAME_INFOW
{
  wchar_t *lpUniversalName;
  wchar_t *lpConnectionName;
  wchar_t *lpRemainingPath;
};

/* 4679 */
struct tagMIDIOUTCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wVoices;
  unsigned __int16 wNotes;
  unsigned __int16 wChannelMask;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4680 */
struct _CRL_FIND_ISSUED_FOR_PARA
{
  _CERT_CONTEXT *pSubjectCert;
  _CERT_CONTEXT *pIssuerCert;
};

/* 4682 */
union $B5A51C4AFFF5DDC4103EC1CA2C54B662
{
  const wchar_t *pszTemplate;
  DLGTEMPLATE *pResource;
};

/* 4683 */
union $BEA4071AF47773B46964588E62B2512B
{
  HICON__ *hIcon;
  const wchar_t *pszIcon;
};

/* 4684 */
union $E43559917C4AF128126878F9E8C4A9DA
{
  HBITMAP__ *hbmHeader;
  const wchar_t *pszbmHeader;
};

/* 4681 */
struct _PROPSHEETPAGEW
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $B5A51C4AFFF5DDC4103EC1CA2C54B662 ___u3;
  $BEA4071AF47773B46964588E62B2512B ___u4;
  const wchar_t *pszTitle;
  __int64 (__cdecl *pfnDlgProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  __int64 lParam;
  unsigned int (__cdecl *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);
  unsigned int *pcRefParent;
  const wchar_t *pszHeaderTitle;
  const wchar_t *pszHeaderSubTitle;
  void *hActCtx;
  $E43559917C4AF128126878F9E8C4A9DA ___u13;
};

/* 4685 */
union $83C8E2C911F5E2587ECBCD922D9E85F5
{
  unsigned int nStartPage;
  const wchar_t *pStartPage;
};

/* 4686 */
union $3420120626918F904254E12063978B8E
{
  _PROPSHEETPAGEW *ppsp;
  _PSP **phpage;
};

/* 4687 */
union $77E0927EF36D41AFF4F525213C36C6FF
{
  HBITMAP__ *hbmWatermark;
  const wchar_t *pszbmWatermark;
};

/* 4688 */
struct _PROPSHEETHEADERW_V2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HWND__ *hwndParent;
  HINSTANCE__ *hInstance;
  $BEA4071AF47773B46964588E62B2512B ___u4;
  const wchar_t *pszCaption;
  unsigned int nPages;
  $83C8E2C911F5E2587ECBCD922D9E85F5 ___u7;
  $3420120626918F904254E12063978B8E ___u8;
  int (__cdecl *pfnCallback)(HWND__ *, unsigned int, __int64);
  $77E0927EF36D41AFF4F525213C36C6FF ___u10;
  HPALETTE__ *hplWatermark;
  $E43559917C4AF128126878F9E8C4A9DA ___u12;
};

/* 4689 */
struct tagCHOOSECOLORA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HWND__ *hInstance;
  unsigned int rgbResult;
  unsigned int *lpCustColors;
  unsigned int Flags;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const char *lpTemplateName;
};

/* 4690 */
struct _CONSOLE_READCONSOLE_CONTROL
{
  unsigned int nLength;
  unsigned int nInitialChars;
  unsigned int dwCtrlWakeupMask;
  unsigned int dwControlKeyState;
};

/* 4691 */
struct HTASK__
{
  int unused;
};

/* 4692 */
struct HMMIO__
{
  int unused;
};

/* 4693 */
struct __unaligned __declspec(align(4)) _MMIOINFO
{
  unsigned int dwFlags;
  unsigned int fccIOProc;
  __int64 (__cdecl *pIOProc)(char *, unsigned int, __int64, __int64);
  unsigned int wErrorRet;
  HTASK__ *htask;
  int cchBuffer;
  char *pchBuffer;
  char *pchNext;
  char *pchEndRead;
  char *pchEndWrite;
  int lBufOffset;
  int lDiskOffset;
  unsigned int adwInfo[3];
  unsigned int dwReserved1;
  unsigned int dwReserved2;
  HMMIO__ *hmmio;
};

/* 4694 */
struct _CMSG_SIGNER_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB Issuer;
  _CRYPTOAPI_BLOB SerialNumber;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedHash;
  _CRYPT_ATTRIBUTES AuthAttrs;
  _CRYPT_ATTRIBUTES UnauthAttrs;
};

/* 4695 */
struct __declspec(align(8)) _JOB_INFO_2A
{
  unsigned int JobId;
  char *pPrinterName;
  char *pMachineName;
  char *pUserName;
  char *pDocument;
  char *pNotifyName;
  char *pDatatype;
  char *pPrintProcessor;
  char *pParameters;
  char *pDriverName;
  _devicemodeA *pDevMode;
  char *pStatus;
  void *pSecurityDescriptor;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int TotalPages;
  unsigned int Size;
  _SYSTEMTIME Submitted;
  unsigned int Time;
  unsigned int PagesPrinted;
};

/* 4696 */
struct _JOB_INFO_3
{
  unsigned int JobId;
  unsigned int NextJobId;
  unsigned int Reserved;
};

/* 4697 */
struct __declspec(align(8)) _ADDJOB_INFO_1W
{
  wchar_t *Path;
  unsigned int JobId;
};

/* 4698 */
struct __declspec(align(4)) SET_POWER_SETTING_VALUE
{
  unsigned int Version;
  _GUID Guid;
  SYSTEM_POWER_CONDITION PowerCondition;
  unsigned int DataLength;
  char Data[1];
};

/* 4699 */
struct _RIP_INFO
{
  unsigned int dwError;
  unsigned int dwType;
};

/* 4700 */
struct tagLOGBRUSH32
{
  unsigned int lbStyle;
  unsigned int lbColor;
  unsigned int lbHatch;
};

/* 4701 */
struct tagKBDLLHOOKSTRUCT
{
  unsigned int vkCode;
  unsigned int scanCode;
  unsigned int flags;
  unsigned int time;
  unsigned __int64 dwExtraInfo;
};

/* 4702 */
struct _FILE_LEVEL_TRIM_RANGE
{
  unsigned __int64 Offset;
  unsigned __int64 Length;
};

/* 4703 */
struct _SCARD_IO_REQUEST
{
  unsigned int dwProtocol;
  unsigned int cbPciLength;
};

/* 4704 */
struct tagLOGBRUSH
{
  unsigned int lbStyle;
  unsigned int lbColor;
  unsigned __int64 lbHatch;
};

/* 4705 */
struct __unaligned __declspec(align(2)) waveformat_tag
{
  unsigned __int16 wFormatTag;
  unsigned __int16 nChannels;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
};

/* 4706 */
struct _REQUEST_OPLOCK_INPUT_BUFFER
{
  unsigned __int16 StructureVersion;
  unsigned __int16 StructureLength;
  unsigned int RequestedOplockLevel;
  unsigned int Flags;
};

/* 4707 */
struct _CSV_MGMT_LOCK
{
  unsigned int Flags;
};

/* 4708 */
struct _PROVIDOR_INFO_1A
{
  char *pName;
  char *pEnvironment;
  char *pDLLName;
};

/* 4709 */
struct _SID
{
  char Revision;
  char SubAuthorityCount;
  _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  unsigned int SubAuthority[1];
};

/* 4710 */
struct _EFS_HASH_BLOB
{
  unsigned int cbData;
  char *pbData;
};

/* 4711 */
struct _ENCRYPTION_CERTIFICATE_HASH
{
  unsigned int cbTotalLength;
  _SID *pUserSid;
  _EFS_HASH_BLOB *pHash;
  wchar_t *lpDisplayInformation;
};

/* 4712 */
struct _ENCRYPTION_CERTIFICATE_HASH_LIST
{
  unsigned int nCert_Hash;
  _ENCRYPTION_CERTIFICATE_HASH **pUsers;
};

/* 4713 */
struct _CERTIFICATE_BLOB
{
  unsigned int dwCertEncodingType;
  unsigned int cbData;
  char *pbData;
};

/* 4714 */
struct _ENCRYPTION_CERTIFICATE
{
  unsigned int cbTotalLength;
  _SID *pUserSid;
  _CERTIFICATE_BLOB *pCertBlob;
};

/* 4715 */
struct _EFS_RPC_BLOB
{
  unsigned int cbData;
  char *pbData;
};

/* 4716 */
struct _ENCRYPTED_FILE_METADATA_SIGNATURE
{
  unsigned int dwEfsAccessType;
  _ENCRYPTION_CERTIFICATE_HASH_LIST *pCertificatesAdded;
  _ENCRYPTION_CERTIFICATE *pEncryptionCertificate;
  _EFS_RPC_BLOB *pEfsStreamSignature;
};

/* 4717 */
struct _XSAVE_AREA
{
  _XSAVE_FORMAT LegacyState;
  _XSAVE_AREA_HEADER Header;
};

/* 4718 */
struct _XSTATE_CONTEXT
{
  unsigned __int64 Mask;
  unsigned int Length;
  unsigned int Reserved1;
  _XSAVE_AREA *Area;
  void *Buffer;
};

/* 4719 */
struct __declspec(align(4)) tagCOLORMATCHTOTARGET
{
  tagEMR emr;
  unsigned int dwAction;
  unsigned int dwFlags;
  unsigned int cbName;
  unsigned int cbData;
  char Data[1];
};

/* 4720 */
struct tagMIXERCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4721 */
struct _CERT_POLICY_ID
{
  unsigned int cCertPolicyElementId;
  char **rgpszCertPolicyElementId;
};

/* 4722 */
struct _CERT_KEY_USAGE_RESTRICTION_INFO
{
  unsigned int cCertPolicyId;
  _CERT_POLICY_ID *rgCertPolicyId;
  _CRYPT_BIT_BLOB RestrictedKeyUsage;
};

/* 4723 */
struct _PRINTER_INFO_1W
{
  unsigned int Flags;
  wchar_t *pDescription;
  wchar_t *pName;
  wchar_t *pComment;
};

/* 4724 */
struct __cppobj IRpcOptions : IUnknown
{
};

/* 4725 */
struct __declspec(align(4)) _FILE_RENAME_INFO
{
  char ReplaceIfExists;
  void *RootDirectory;
  unsigned int FileNameLength;
  wchar_t FileName[1];
};

/* 4726 */
struct _ABC
{
  int abcA;
  unsigned int abcB;
  int abcC;
};

/* 4727 */
struct tagMCI_ANIM_OPEN_PARMSA
{
  unsigned __int64 dwCallback;
  unsigned int wDeviceID;
  __unaligned __declspec(align(1)) const char *lpstrDeviceType;
  __unaligned __declspec(align(1)) const char *lpstrElementName;
  __unaligned __declspec(align(1)) const char *lpstrAlias;
  unsigned int dwStyle;
  HWND__ *hWndParent;
};

/* 4728 */
struct tagJOYCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  char szPname[32];
  unsigned int wXmin;
  unsigned int wXmax;
  unsigned int wYmin;
  unsigned int wYmax;
  unsigned int wZmin;
  unsigned int wZmax;
  unsigned int wNumButtons;
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
  unsigned int wRmin;
  unsigned int wRmax;
  unsigned int wUmin;
  unsigned int wUmax;
  unsigned int wVmin;
  unsigned int wVmax;
  unsigned int wCaps;
  unsigned int wMaxAxes;
  unsigned int wNumAxes;
  unsigned int wMaxButtons;
  char szRegKey[32];
  char szOEMVxD[260];
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 4729 */
struct _CRYPT_PROPERTY_REF
{
  wchar_t *pszProperty;
  unsigned int cbValue;
  char *pbValue;
};

/* 4730 */
struct __declspec(align(8)) _CRYPT_IMAGE_REF
{
  wchar_t *pszImage;
  unsigned int dwFlags;
};

/* 4731 */
struct _CRYPT_PROVIDER_REF
{
  unsigned int dwInterface;
  wchar_t *pszFunction;
  wchar_t *pszProvider;
  unsigned int cProperties;
  _CRYPT_PROPERTY_REF **rgpProperties;
  _CRYPT_IMAGE_REF *pUM;
  _CRYPT_IMAGE_REF *pKM;
};

/* 4732 */
struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
{
  unsigned int LimitFlags;
  unsigned int ViolationLimitFlags;
  unsigned __int64 IoReadBytes;
  unsigned __int64 IoReadBytesLimit;
  unsigned __int64 IoWriteBytes;
  unsigned __int64 IoWriteBytesLimit;
  _LARGE_INTEGER PerJobUserTime;
  _LARGE_INTEGER PerJobUserTimeLimit;
  unsigned __int64 JobMemory;
  unsigned __int64 JobMemoryLimit;
  _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
  _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
};

/* 4733 */
struct __declspec(align(8)) _NETINFOSTRUCT
{
  unsigned int cbStructure;
  unsigned int dwProviderVersion;
  unsigned int dwStatus;
  unsigned int dwCharacteristics;
  unsigned __int64 dwHandle;
  unsigned __int16 wNetType;
  unsigned int dwPrinters;
  unsigned int dwDrives;
};

/* 4734 */
struct _SCHANNEL_ALG
{
  unsigned int dwUse;
  unsigned int Algid;
  unsigned int cBits;
  unsigned int dwFlags;
  unsigned int dwReserved;
};

/* 4735 */
struct _CERT_CREATE_CONTEXT_PARA
{
  unsigned int cbSize;
  void (__cdecl *pfnFree)(void *);
  void *pvFree;
  int (__cdecl *pfnSort)(unsigned int, unsigned int, unsigned int, void *);
  void *pvSort;
};

/* 4736 */
struct __declspec(align(8)) _RPC_MESSAGE
{
  void *Handle;
  unsigned int DataRepresentation;
  void *Buffer;
  unsigned int BufferLength;
  unsigned int ProcNum;
  _RPC_SYNTAX_IDENTIFIER *TransferSyntax;
  void *RpcInterfaceInformation;
  void *ReservedForRuntime;
  void *ManagerEpv;
  void *ImportContext;
  unsigned int RpcFlags;
};

/* 4737 */
struct RPC_DISPATCH_TABLE
{
  unsigned int DispatchTableCount;
  void (__cdecl **DispatchTable)(_RPC_MESSAGE *);
  __int64 Reserved;
};

/* 4738 */
struct _MIDL_SYNTAX_INFO
{
  _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  RPC_DISPATCH_TABLE *DispatchTable;
  const char *ProcString;
  const unsigned __int16 *FmtStringOffset;
  const char *TypeString;
  const void *aUserMarshalQuadruple;
  unsigned __int64 pReserved1;
  unsigned __int64 pReserved2;
};

/* 4739 */
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 4740 */
struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
{
  _GUID TmIdentity;
  unsigned int Flags;
};

/* 4741 */
struct HKEY__
{
  int unused;
};

/* 4742 */
struct __declspec(align(8)) _OVERLAPPED_ENTRY
{
  unsigned __int64 lpCompletionKey;
  _OVERLAPPED *lpOverlapped;
  unsigned __int64 Internal;
  unsigned int dwNumberOfBytesTransferred;
};

/* 4743 */
struct tagEMRSELECTPALETTE
{
  tagEMR emr;
  unsigned int ihPal;
};

/* 4744 */
struct _DSSSEED
{
  unsigned int counter;
  char seed[20];
};

/* 4745 */
struct _PUBKEYVER3
{
  unsigned int magic;
  unsigned int bitlenP;
  unsigned int bitlenQ;
  unsigned int bitlenJ;
  _DSSSEED DSSSeed;
};

/* 4746 */
struct _CERT_REGISTRY_STORE_ROAMING_PARA
{
  HKEY__ *hKey;
  wchar_t *pwszStoreDirectory;
};

/* 4747 */
struct __cppobj IRpcChannelBuffer : IUnknown
{
};

/* 4748 */
struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
  void *Buffer;
  unsigned int BufferSize;
  void *(__cdecl *pfnAllocate)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
  IRpcChannelBuffer *pRpcChannelBuffer;
  unsigned __int64 Reserved[5];
};

/* 4749 */
struct _FILE_ZERO_DATA_INFORMATION
{
  _LARGE_INTEGER FileOffset;
  _LARGE_INTEGER BeyondFinalZero;
};

/* 4750 */
struct _DATATYPES_INFO_1A
{
  char *pName;
};

/* 4751 */
struct __declspec(align(4)) _userBITMAP
{
  int bmType;
  int bmWidth;
  int bmHeight;
  int bmWidthBytes;
  unsigned __int16 bmPlanes;
  unsigned __int16 bmBitsPixel;
  unsigned int cbSize;
  char pBuffer[1];
};

/* 4752 */
union _userHBITMAP::__MIDL_IWinTypes_0007
{
  int hInproc;
  _userBITMAP *hRemote;
  __int64 hInproc64;
};

/* 4753 */
struct _userHBITMAP
{
  int fContext;
  _userHBITMAP::__MIDL_IWinTypes_0007 u;
};

/* 4754 */
struct tagLOGPALETTE
{
  unsigned __int16 palVersion;
  unsigned __int16 palNumEntries;
  tagPALETTEENTRY palPalEntry[1];
};

/* 4755 */
union _userHPALETTE::__MIDL_IWinTypes_0008
{
  int hInproc;
  tagLOGPALETTE *hRemote;
  __int64 hInproc64;
};

/* 4756 */
struct _userHPALETTE
{
  int fContext;
  _userHPALETTE::__MIDL_IWinTypes_0008 u;
};

/* 4757 */
union _GDI_OBJECT::__MIDL_IAdviseSink_0002
{
  _userHBITMAP *hBitmap;
  _userHPALETTE *hPalette;
  _userHGLOBAL *hGeneric;
};

/* 4758 */
struct _GDI_OBJECT
{
  unsigned int ObjectType;
  _GDI_OBJECT::__MIDL_IAdviseSink_0002 u;
};

/* 4759 */
struct _RPC_SECURITY_QOS_V3_A
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  $438283C8A9CA248D8498A5EDEE1E59DB u;
  void *Sid;
};

/* 4760 */
struct _RPC_BINDING_HANDLE_OPTIONS_V1
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ComTimeout;
  unsigned int CallTimeout;
};

/* 4761 */
struct $214C729617269F7BA437BE270B95ADB9
{
  __int8 ServiceAction : 5;
  __int8 Reserved1 : 3;
  unsigned __int16 AllocationLength;
};

/* 4762 */
struct $2D2B8BA2F044F5BF84F53ADB56B0719D
{
  __int8 ServiceAction : 5;
  __int8 Reserved1 : 3;
  __int8 Type : 4;
  __int8 Scope : 4;
  char ParameterList[];
};

/* 4763 */
union $211EC7B538B93A81D2937A78FDB7FDB3
{
  $214C729617269F7BA437BE270B95ADB9 PR_IN;
  $2D2B8BA2F044F5BF84F53ADB56B0719D PR_OUT;
};

/* 4764 */
struct _PERSISTENT_RESERVE_COMMAND
{
  unsigned int Version;
  unsigned int Size;
  $211EC7B538B93A81D2937A78FDB7FDB3 ___u2;
};

/* 4765 */
struct __declspec(align(4)) _ENCRYPTION_BUFFER
{
  unsigned int EncryptionOperation;
  char Private[1];
};

/* 4766 */
struct __cppobj IComThreadingInfo : IUnknown
{
};

/* 4767 */
struct _COAUTHIDENTITY
{
  unsigned __int16 *User;
  unsigned int UserLength;
  unsigned __int16 *Domain;
  unsigned int DomainLength;
  unsigned __int16 *Password;
  unsigned int PasswordLength;
  unsigned int Flags;
};

/* 4768 */
struct __declspec(align(8)) _COAUTHINFO
{
  unsigned int dwAuthnSvc;
  unsigned int dwAuthzSvc;
  wchar_t *pwszServerPrincName;
  unsigned int dwAuthnLevel;
  unsigned int dwImpersonationLevel;
  _COAUTHIDENTITY *pAuthIdentityData;
  unsigned int dwCapabilities;
};

/* 4769 */
struct __declspec(align(8)) _COSERVERINFO
{
  unsigned int dwReserved1;
  wchar_t *pwszName;
  _COAUTHINFO *pAuthInfo;
  unsigned int dwReserved2;
};

/* 4770 */
struct __cppobj tagBIND_OPTS2 : tagBIND_OPTS
{
  unsigned int dwTrackFlags;
  unsigned int dwClassContext;
  unsigned int locale;
  _COSERVERINFO *pServerInfo;
};

/* 4771 */
struct __cppobj tagBIND_OPTS3 : tagBIND_OPTS2
{
  HWND__ *hwnd;
};

/* 4772 */
struct tagCAUB
{
  unsigned int cElems;
  char *pElems;
};

/* 4773 */
struct _OLESTREAM
{
  _OLESTREAMVTBL *lpstbl;
};

/* 4774 */
struct _OLESTREAMVTBL
{
  unsigned int (__cdecl *Get)(_OLESTREAM *, void *, unsigned int);
  unsigned int (__cdecl *Put)(_OLESTREAM *, const void *, unsigned int);
};

/* 4775 */
struct _WOW64_FLOATING_SAVE_AREA
{
  unsigned int ControlWord;
  unsigned int StatusWord;
  unsigned int TagWord;
  unsigned int ErrorOffset;
  unsigned int ErrorSelector;
  unsigned int DataOffset;
  unsigned int DataSelector;
  char RegisterArea[80];
  unsigned int Cr0NpxState;
};

/* 4776 */
struct _WOW64_CONTEXT
{
  unsigned int ContextFlags;
  unsigned int Dr0;
  unsigned int Dr1;
  unsigned int Dr2;
  unsigned int Dr3;
  unsigned int Dr6;
  unsigned int Dr7;
  _WOW64_FLOATING_SAVE_AREA FloatSave;
  unsigned int SegGs;
  unsigned int SegFs;
  unsigned int SegEs;
  unsigned int SegDs;
  unsigned int Edi;
  unsigned int Esi;
  unsigned int Ebx;
  unsigned int Edx;
  unsigned int Ecx;
  unsigned int Eax;
  unsigned int Ebp;
  unsigned int Eip;
  unsigned int SegCs;
  unsigned int EFlags;
  unsigned int Esp;
  unsigned int SegSs;
  char ExtendedRegisters[512];
};

/* 4777 */
struct tagENUMLOGFONTEXA
{
  tagLOGFONTA elfLogFont;
  char elfFullName[64];
  char elfStyle[32];
  char elfScript[32];
};

/* 4778 */
struct tagDESIGNVECTOR
{
  unsigned int dvReserved;
  unsigned int dvNumAxes;
  int dvValues[16];
};

/* 4779 */
struct tagENUMLOGFONTEXDVA
{
  tagENUMLOGFONTEXA elfEnumLogfontEx;
  tagDESIGNVECTOR elfDesignVector;
};

/* 4780 */
struct tagDRAWTEXTPARAMS
{
  unsigned int cbSize;
  int iTabLength;
  int iLeftMargin;
  int iRightMargin;
  unsigned int uiLengthDrawn;
};

/* 4781 */
struct _PRINTPROCESSOR_CAPS_2
{
  unsigned int dwLevel;
  unsigned int dwNupOptions;
  unsigned int dwPageOrderFlags;
  unsigned int dwNumberOfCopies;
  unsigned int dwDuplexHandlingCaps;
  unsigned int dwNupDirectionCaps;
  unsigned int dwNupBorderCaps;
  unsigned int dwBookletHandlingCaps;
  unsigned int dwScalingCaps;
};

/* 4782 */
struct _TOKEN_ORIGIN
{
  _LUID OriginatingLogonSession;
};

/* 4783 */
struct _PRINTER_INFO_8A
{
  _devicemodeA *pDevMode;
};

/* 4784 */
struct _PROCESSOR_NUMBER
{
  unsigned __int16 Group;
  char Number;
  char Reserved;
};

/* 4785 */
struct _SOCKET_PROCESSOR_AFFINITY
{
  _PROCESSOR_NUMBER Processor;
  unsigned __int16 NumaNodeId;
  unsigned __int16 Reserved;
};

/* 4786 */
struct _WSAQuerySetW
{
  unsigned int dwSize;
  wchar_t *lpszServiceInstanceName;
  _GUID *lpServiceClassId;
  _WSAVersion *lpVersion;
  wchar_t *lpszComment;
  unsigned int dwNameSpace;
  _GUID *lpNSProviderId;
  wchar_t *lpszContext;
  unsigned int dwNumberOfProtocols;
  _AFPROTOCOLS *lpafpProtocols;
  wchar_t *lpszQueryString;
  unsigned int dwNumberOfCsAddrs;
  _CSADDR_INFO *lpcsaBuffer;
  unsigned int dwOutputFlags;
  tagBLOB *lpBlob;
};

/* 4787 */
struct _HARDWARE_COUNTER_DATA
{
  _HARDWARE_COUNTER_TYPE Type;
  unsigned int Reserved;
  unsigned __int64 Value;
};

/* 4788 */
struct __declspec(align(4)) tagPELARRAY
{
  int paXCount;
  int paYCount;
  int paXExt;
  int paYExt;
  char paRGBs;
};

/* 4789 */
struct tagMDICREATESTRUCTA
{
  const char *szClass;
  const char *szTitle;
  void *hOwner;
  int x;
  int y;
  int cx;
  int cy;
  unsigned int style;
  __int64 lParam;
};

/* 4790 */
struct __unaligned __declspec(align(4)) tagMCI_OPEN_PARMSA
{
  unsigned __int64 dwCallback;
  unsigned int wDeviceID;
  const char *lpstrDeviceType;
  const char *lpstrElementName;
  const char *lpstrAlias;
};

/* 4791 */
struct tagMCI_SAVE_PARMSW
{
  unsigned __int64 dwCallback;
  const wchar_t *lpfilename;
};

/* 4792 */
struct __GENERIC_BINDING_INFO
{
  void *pObj;
  unsigned int Size;
  void *(__cdecl *pfnBind)(void *);
  void (__cdecl *pfnUnbind)(void *, char *);
};

/* 4793 */
union $80D19E0D71BF027111A8050807D2768A
{
  void **pAutoHandle;
  void **pPrimitiveHandle;
  __GENERIC_BINDING_INFO *pGenericBindingInfo;
};

/* 4794 */
struct _GENERIC_BINDING_ROUTINE_PAIR
{
  void *(__cdecl *pfnBind)(void *);
  void (__cdecl *pfnUnbind)(void *, char *);
};

/* 4795 */
struct _MIDL_STUB_MESSAGE
{
  _RPC_MESSAGE *RpcMsg;
  char *Buffer;
  char *BufferStart;
  char *BufferEnd;
  char *BufferMark;
  unsigned int BufferLength;
  unsigned int MemorySize;
  char *Memory;
  char IsClient;
  char Pad;
  unsigned __int16 uFlags2;
  int ReuseBuffer;
  struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
  struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
  int IgnoreEmbeddedPointers;
  char *PointerBufferMark;
  char CorrDespIncrement;
  char uFlags;
  unsigned __int16 UniquePtrCount;
  unsigned __int64 MaxCount;
  unsigned int Offset;
  unsigned int ActualCount;
  void *(__cdecl *pfnAllocate)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
  char *StackTop;
  char *pPresentedType;
  char *pTransmitType;
  void *SavedHandle;
  _MIDL_STUB_DESC *StubDesc;
  _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
  unsigned int FullPtrRefId;
  unsigned int PointerLength;
  __int32 fInDontFree : 1;
  __int32 fDontCallFreeInst : 1;
  __int32 fInOnlyParam : 1;
  __int32 fHasReturn : 1;
  __int32 fHasExtensions : 1;
  __int32 fHasNewCorrDesc : 1;
  __int32 fIsIn : 1;
  __int32 fIsOut : 1;
  __int32 fIsOicf : 1;
  __int32 fBufferValid : 1;
  __int32 fHasMemoryValidateCallback : 1;
  __int32 fInFree : 1;
  __int32 fNeedMCCP : 1;
  __int32 fUnused : 3;
  __int32 fUnused2 : 16;
  unsigned int dwDestContext;
  void *pvDestContext;
  $3FA64165D15A4602C29B2D9B0DA4A5E9 **SavedContextHandles;
  int ParamNumber;
  IRpcChannelBuffer *pRpcChannelBuffer;
  ARRAY_INFO *pArrayInfo;
  unsigned int *SizePtrCountArray;
  unsigned int *SizePtrOffsetArray;
  unsigned int *SizePtrLengthArray;
  void *pArgQueue;
  unsigned int dwStubPhase;
  void *LowStackMark;
  struct _NDR_ASYNC_MESSAGE *pAsyncMsg;
  _NDR_CORRELATION_INFO *pCorrInfo;
  char *pCorrMemory;
  void *pMemoryList;
  __int64 pCSInfo;
  char *ConformanceMark;
  char *VarianceMark;
  __int64 Unused;
  struct _NDR_PROC_CONTEXT *pContext;
  void *ContextHandleHash;
  void *pUserMarshalList;
  __int64 Reserved51_3;
  __int64 Reserved51_4;
  __int64 Reserved51_5;
};

/* 4796 */
const struct _XMIT_ROUTINE_QUINTUPLE
{
  void (__cdecl *pfnTranslateToXmit)(_MIDL_STUB_MESSAGE *);
  void (__cdecl *pfnTranslateFromXmit)(_MIDL_STUB_MESSAGE *);
  void (__cdecl *pfnFreeXmit)(_MIDL_STUB_MESSAGE *);
  void (__cdecl *pfnFreeInst)(_MIDL_STUB_MESSAGE *);
};

/* 4797 */
struct _MALLOC_FREE_STRUCT
{
  void *(__cdecl *pfnAllocate)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
};

/* 4798 */
const struct _COMM_FAULT_OFFSETS
{
  __int16 CommOffset;
  __int16 FaultOffset;
};

/* 4799 */
struct _NDR_CS_SIZE_CONVERT_ROUTINES
{
  void (__cdecl *pfnNetSize)(void *, unsigned int, unsigned int, _IDL_CS_CONVERT *, unsigned int *, unsigned int *);
  void (__cdecl *pfnToNetCs)(void *, unsigned int, void *, unsigned int, char *, unsigned int *, unsigned int *);
  void (__cdecl *pfnLocalSize)(void *, unsigned int, unsigned int, _IDL_CS_CONVERT *, unsigned int *, unsigned int *);
  void (__cdecl *pfnFromNetCs)(void *, unsigned int, char *, unsigned int, unsigned int, void *, unsigned int *, unsigned int *);
};

/* 4800 */
const struct _NDR_CS_ROUTINES
{
  _NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
  void (__cdecl **pTagGettingRoutines)(void *, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
};

/* 4801 */
const struct _NDR_EXPR_DESC
{
  const unsigned __int16 *pOffset;
  const char *pFormatExpr;
};

/* 4802 */
const struct _MIDL_STUB_DESC
{
  void *RpcInterfaceInformation;
  void *(__cdecl *pfnAllocate)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
  $80D19E0D71BF027111A8050807D2768A IMPLICIT_HANDLE_INFO;
  void (__cdecl *const *apfnNdrRundownRoutines)(void *);
  _GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
  void (__cdecl *const *apfnExprEval)(_MIDL_STUB_MESSAGE *);
  _XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
  const char *pFormatTypes;
  int fCheckBounds;
  unsigned int Version;
  _MALLOC_FREE_STRUCT *pMallocFreeStruct;
  int MIDLVersion;
  _COMM_FAULT_OFFSETS *CommFaultOffsets;
  _USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
  void (__cdecl *const *NotifyRoutineTable)();
  unsigned __int64 mFlags;
  _NDR_CS_ROUTINES *CsRoutineTables;
  void *ProxyServerInfo;
  _NDR_EXPR_DESC *pExprInfo;
};

/* 4803 */
struct $3FA64165D15A4602C29B2D9B0DA4A5E9
{
  void *pad[2];
  void *userContext;
};

/* 4804 */
struct ARRAY_INFO
{
  int Dimension;
  unsigned int *BufferConformanceMark;
  unsigned int *BufferVarianceMark;
  unsigned int *MaxCountArray;
  unsigned int *OffsetArray;
  unsigned int *ActualCountArray;
};

/* 4805 */
struct __declspec(align(8)) _FILE_LAYOUT_NAME_ENTRY
{
  unsigned int NextNameOffset;
  unsigned int Flags;
  unsigned __int64 ParentFileReferenceNumber;
  unsigned int FileNameLength;
  unsigned int Reserved;
  wchar_t FileName[1];
};

/* 4806 */
struct tagSTYLEBUFW
{
  unsigned int dwStyle;
  wchar_t szDescription[32];
};

/* 4807 */
struct _WSANSClassInfoA
{
  char *lpszName;
  unsigned int dwNameSpace;
  unsigned int dwValueType;
  unsigned int dwValueSize;
  void *lpValue;
};

/* 4808 */
struct _GROUP_AFFINITY
{
  unsigned __int64 Mask;
  unsigned __int16 Group;
  unsigned __int16 Reserved[3];
};

/* 4809 */
struct _PROCESSOR_RELATIONSHIP
{
  char Flags;
  char Reserved[21];
  unsigned __int16 GroupCount;
  _GROUP_AFFINITY GroupMask[1];
};

/* 4810 */
struct _POINTFLOAT
{
  float x;
  float y;
};

/* 4811 */
struct _GLYPHMETRICSFLOAT
{
  float gmfBlackBoxX;
  float gmfBlackBoxY;
  _POINTFLOAT gmfptGlyphOrigin;
  float gmfCellIncX;
  float gmfCellIncY;
};

/* 4812 */
union $598610CC988E402B9A82B84B75BDDF21
{
  unsigned int dwValue;
  unsigned int Algid;
  unsigned int dwLength;
};

/* 4813 */
struct _CRYPT_OID_INFO
{
  unsigned int cbSize;
  const char *pszOID;
  const wchar_t *pwszName;
  unsigned int dwGroupId;
  $598610CC988E402B9A82B84B75BDDF21 ___u4;
  _CRYPTOAPI_BLOB ExtraInfo;
};

/* 4814 */
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION
{
  void (__cdecl *pfnCompletion)(void *, unsigned int, const char *, char *, void *);
  void *pvCompletion;
};

/* 4815 */
struct in_pktinfo
{
  in_addr ipi_addr;
  unsigned int ipi_ifindex;
};

/* 4816 */
struct _SYSTEM_ALARM_CALLBACK_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 4817 */
struct _IMAGE_FUNCTION_ENTRY
{
  unsigned int StartingAddress;
  unsigned int EndingAddress;
  unsigned int EndOfPrologue;
};

/* 4818 */
struct tagFONTSIGNATURE
{
  unsigned int fsUsb[4];
  unsigned int fsCsb[2];
};

/* 4819 */
struct _STORAGE_PRIORITY_HINT_SUPPORT
{
  unsigned int SupportFlags;
};

/* 4820 */
struct _DRIVERSTATUS
{
  char bDriverError;
  char bIDEError;
  char bReserved[2];
  unsigned int dwReserved[2];
};

/* 4821 */
struct _SERVICE_NOTIFY_2W
{
  unsigned int dwVersion;
  void (__cdecl *pfnNotifyCallback)(void *);
  void *pContext;
  unsigned int dwNotificationStatus;
  _SERVICE_STATUS_PROCESS ServiceStatus;
  unsigned int dwNotificationTriggered;
  wchar_t *pszServiceNames;
};

/* 4822 */
struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  unsigned __int64 ai_addrlen;
  char *ai_canonname;
  sockaddr *ai_addr;
  addrinfo *ai_next;
};

/* 4823 */
struct __unaligned __declspec(align(4)) _s__RTTIClassHierarchyDescriptor
{
  unsigned int signature;
  unsigned int attributes;
  unsigned int numBaseClasses;
  _s__RTTIBaseClassArray *pBaseClassArray;
};

/* 4824 */
const struct __unaligned __declspec(align(4)) _s__RTTIBaseClassDescriptor2
{
  _TypeDescriptor *pTypeDescriptor;
  unsigned int numContainedBases;
  _PMD where;
  unsigned int attributes;
  _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
};

/* 4825 */
const struct __unaligned __declspec(align(4)) _s__RTTIBaseClassArray
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[];
  _BYTE gap0[4];
};

/* 4826 */
struct __unaligned __declspec(align(4)) _s__RTTICompleteObjectLocator2
{
  unsigned int signature;
  unsigned int offset;
  unsigned int cdOffset;
  _TypeDescriptor *pTypeDescriptor;
  _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
  _s__RTTICompleteObjectLocator2 *pSelf;
};

/* 4827 */
struct POWER_ACTION_POLICY
{
  POWER_ACTION Action;
  unsigned int Flags;
  unsigned int EventCode;
};

/* 4828 */
struct SYSTEM_POWER_LEVEL
{
  char Enable;
  char Spare[3];
  unsigned int BatteryLevel;
  POWER_ACTION_POLICY PowerPolicy;
  _SYSTEM_POWER_STATE MinSystemState;
};

/* 4829 */
struct _IMAGE_OS2_HEADER
{
  unsigned __int16 ne_magic;
  char ne_ver;
  char ne_rev;
  unsigned __int16 ne_enttab;
  unsigned __int16 ne_cbenttab;
  int ne_crc;
  unsigned __int16 ne_flags;
  unsigned __int16 ne_autodata;
  unsigned __int16 ne_heap;
  unsigned __int16 ne_stack;
  int ne_csip;
  int ne_sssp;
  unsigned __int16 ne_cseg;
  unsigned __int16 ne_cmod;
  unsigned __int16 ne_cbnrestab;
  unsigned __int16 ne_segtab;
  unsigned __int16 ne_rsrctab;
  unsigned __int16 ne_restab;
  unsigned __int16 ne_modtab;
  unsigned __int16 ne_imptab;
  int ne_nrestab;
  unsigned __int16 ne_cmovent;
  unsigned __int16 ne_align;
  unsigned __int16 ne_cres;
  char ne_exetyp;
  char ne_flagsothers;
  unsigned __int16 ne_pretthunks;
  unsigned __int16 ne_psegrefbytes;
  unsigned __int16 ne_swaparea;
  unsigned __int16 ne_expver;
};

/* 4830 */
struct _MESSAGE_RESOURCE_BLOCK
{
  unsigned int LowId;
  unsigned int HighId;
  unsigned int OffsetToEntries;
};

/* 4831 */
struct tagACTCTXA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  const char *lpSource;
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wLangId;
  const char *lpAssemblyDirectory;
  const char *lpResourceName;
  const char *lpApplicationName;
  HINSTANCE__ *hModule;
};

/* 4832 */
struct __declspec(align(8)) _STREAM_LAYOUT_ENTRY
{
  unsigned int Version;
  unsigned int NextStreamOffset;
  unsigned int Flags;
  unsigned int ExtentInformationOffset;
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  unsigned __int64 Reserved;
  unsigned int AttributeFlags;
  unsigned int StreamIdentifierLength;
  wchar_t StreamIdentifier[1];
};

/* 4833 */
struct SCARD_T1_REQUEST
{
  _SCARD_IO_REQUEST ioRequest;
};

/* 4834 */
struct _DRIVER_INFO_4A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  char *pHelpFile;
  char *pDependentFiles;
  char *pMonitorName;
  char *pDefaultDataType;
  char *pszzPreviousNames;
};

/* 4835 */
struct _WSANAMESPACE_INFOA
{
  _GUID NSProviderId;
  unsigned int dwNameSpace;
  int fActive;
  unsigned int dwVersion;
  char *lpszIdentifier;
};

/* 4836 */
struct _ENLISTMENT_CRM_INFORMATION
{
  _GUID CrmTransactionManagerId;
  _GUID CrmResourceManagerId;
  _GUID CrmEnlistmentId;
};

/* 4837 */
struct tagEMRSETDIBITSTODEVICE
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int xSrc;
  int ySrc;
  int cxSrc;
  int cySrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  unsigned int iUsageSrc;
  unsigned int iStartScan;
  unsigned int cScans;
};

/* 4838 */
struct tagOBJECTDESCRIPTOR
{
  unsigned int cbSize;
  _GUID clsid;
  unsigned int dwDrawAspect;
  tagSIZE sizel;
  _POINTL pointl;
  unsigned int dwStatus;
  unsigned int dwFullUserTypeName;
  unsigned int dwSrcOfCopy;
};

/* 4839 */
struct _OFNOTIFYW
{
  tagNMHDR hdr;
  tagOFNW *lpOFN;
  wchar_t *pszFile;
};

/* 4840 */
struct _SERVICE_DELAYED_AUTO_START_INFO
{
  int fDelayedAutostart;
};

/* 4841 */
struct HSZ__
{
  int unused;
};

/* 4842 */
struct HCONV__
{
  int unused;
};

/* 4843 */
struct tagMONCONVSTRUCT
{
  unsigned int cb;
  int fConnect;
  unsigned int dwTime;
  void *hTask;
  HSZ__ *hszSvc;
  HSZ__ *hszTopic;
  HCONV__ *hConvClient;
  HCONV__ *hConvServer;
};

/* 4844 */
struct tagMCI_PLAY_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
};

/* 4845 */
struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS
{
  unsigned int cbSize;
  unsigned int dwQualifiers;
  unsigned int dwIssuanceUsageIndex;
};

/* 4846 */
struct $D4F62C83CEB61BB52196E20F7ADC32CF
{
  unsigned __int16 Minimum;
  unsigned __int16 Maximum;
  unsigned __int16 MaximumBlocks;
};

/* 4847 */
struct $B28CD077D686A6FB9CE039A2B335CFF9
{
  unsigned __int16 Minimum;
  unsigned __int16 Maximum;
};

/* 4848 */
union $BBFC605E5679680B0A93484CA5F96DB8
{
  $D4F62C83CEB61BB52196E20F7ADC32CF ScalarPrefetch;
  $B28CD077D686A6FB9CE039A2B335CFF9 BlockPrefetch;
};

/* 4849 */
struct __declspec(align(4)) _DISK_CACHE_INFORMATION
{
  char ParametersSavable;
  char ReadCacheEnabled;
  char WriteCacheEnabled;
  DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
  DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
  unsigned __int16 DisablePrefetchTransferLength;
  char PrefetchScalar;
  $BBFC605E5679680B0A93484CA5F96DB8 ___u7;
};

/* 4850 */
struct tagACTCTXW
{
  unsigned int cbSize;
  unsigned int dwFlags;
  const wchar_t *lpSource;
  unsigned __int16 wProcessorArchitecture;
  unsigned __int16 wLangId;
  const wchar_t *lpAssemblyDirectory;
  const wchar_t *lpResourceName;
  const wchar_t *lpApplicationName;
  HINSTANCE__ *hModule;
};

/* 4851 */
struct _FILE_ALLOCATION_INFO
{
  _LARGE_INTEGER AllocationSize;
};

/* 4852 */
struct NCryptProviderName
{
  wchar_t *pszName;
  wchar_t *pszComment;
};

/* 4853 */
struct _ACCESS_ALLOWED_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 4854 */
union _CLIENT_CALL_RETURN
{
  void *Pointer;
  __int64 Simple;
};

/* 4855 */
struct _PROPSHEETHEADERW_V1
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HWND__ *hwndParent;
  HINSTANCE__ *hInstance;
  $BEA4071AF47773B46964588E62B2512B ___u4;
  const wchar_t *pszCaption;
  unsigned int nPages;
  $83C8E2C911F5E2587ECBCD922D9E85F5 ___u7;
  $3420120626918F904254E12063978B8E ___u8;
  int (__cdecl *pfnCallback)(HWND__ *, unsigned int, __int64);
};

/* 4856 */
struct __declspec(align(8)) _ADDJOB_INFO_1A
{
  char *Path;
  unsigned int JobId;
};

/* 4857 */
struct tagCACY
{
  unsigned int cElems;
  tagCY *pElems;
};

/* 4858 */
struct _WSAQuerySet2W
{
  unsigned int dwSize;
  wchar_t *lpszServiceInstanceName;
  _WSAVersion *lpVersion;
  wchar_t *lpszComment;
  unsigned int dwNameSpace;
  _GUID *lpNSProviderId;
  wchar_t *lpszContext;
  unsigned int dwNumberOfProtocols;
  _AFPROTOCOLS *lpafpProtocols;
  wchar_t *lpszQueryString;
  unsigned int dwNumberOfCsAddrs;
  _CSADDR_INFO *lpcsaBuffer;
  unsigned int dwOutputFlags;
  tagBLOB *lpBlob;
};

/* 4859 */
struct tagMCI_WAVE_OPEN_PARMSA
{
  unsigned __int64 dwCallback;
  unsigned int wDeviceID;
  __unaligned __declspec(align(1)) const char *lpstrDeviceType;
  __unaligned __declspec(align(1)) const char *lpstrElementName;
  __unaligned __declspec(align(1)) const char *lpstrAlias;
  unsigned int dwBufferSeconds;
};

/* 4860 */
struct _CERT_RDN_ATTR
{
  char *pszObjId;
  unsigned int dwValueType;
  _CRYPTOAPI_BLOB Value;
};

/* 4861 */
struct _CERT_RDN
{
  unsigned int cRDNAttr;
  _CERT_RDN_ATTR *rgRDNAttr;
};

/* 4862 */
struct _CERT_STORE_PROV_INFO
{
  unsigned int cbSize;
  unsigned int cStoreProvFunc;
  void **rgpvStoreProvFunc;
  void *hStoreProv;
  unsigned int dwStoreProvFlags;
  void *hStoreProvFuncAddr2;
};

/* 4863 */
struct __cppobj IXMLDOMAttribute : IXMLDOMNode
{
};

/* 4864 */
struct sockaddr_storage
{
  unsigned __int16 ss_family;
  char __ss_pad1[6];
  __int64 __ss_align;
  char __ss_pad2[112];
};

/* 4865 */
struct _NUMA_NODE_RELATIONSHIP
{
  unsigned int NodeNumber;
  char Reserved[20];
  _GROUP_AFFINITY GroupMask;
};

/* 4866 */
struct _CACHE_RELATIONSHIP
{
  char Level;
  char Associativity;
  unsigned __int16 LineSize;
  unsigned int CacheSize;
  _PROCESSOR_CACHE_TYPE Type;
  char Reserved[20];
  _GROUP_AFFINITY GroupMask;
};

/* 4867 */
union $6CE7C57F5FFC3274F5E32CF2C4310E97
{
  _PROCESSOR_RELATIONSHIP Processor;
  _NUMA_NODE_RELATIONSHIP NumaNode;
  _CACHE_RELATIONSHIP Cache;
  _GROUP_RELATIONSHIP Group;
};

/* 4868 */
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
  _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  unsigned int Size;
  $6CE7C57F5FFC3274F5E32CF2C4310E97 ___u2;
};

/* 4869 */
struct __declspec(align(8)) VOLUME_BITMAP_BUFFER
{
  _LARGE_INTEGER StartingLcn;
  _LARGE_INTEGER BitmapSize;
  char Buffer[1];
};

/* 4870 */
struct _SHRINK_VOLUME_INFORMATION
{
  _SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
  unsigned __int64 Flags;
  __int64 NewNumberOfSectors;
};

/* 4871 */
struct __cppobj ITypeMarshal : IUnknown
{
};

/* 4872 */
struct sockaddr_storage_xp
{
  __int16 ss_family;
  char __ss_pad1[6];
  __int64 __ss_align;
  char __ss_pad2[112];
};

/* 4873 */
struct LIST_ENTRY32
{
  unsigned int Flink;
  unsigned int Blink;
};

/* 4874 */
struct PROCESSOR_IDLESTATE_INFO
{
  unsigned int TimeCheck;
  char DemotePercent;
  char PromotePercent;
  char Spare[2];
};

/* 4875 */
union $E0927F6BE2F1645595F211B37EFD8766
{
  unsigned __int64 EndOfPrologue;
  unsigned __int64 UnwindInfoAddress;
};

/* 4876 */
struct _IMAGE_FUNCTION_ENTRY64
{
  unsigned __int64 StartingAddress;
  unsigned __int64 EndingAddress;
  $E0927F6BE2F1645595F211B37EFD8766 ___u2;
};

/* 4877 */
struct _EXIT_THREAD_DEBUG_INFO
{
  unsigned int dwExitCode;
};

/* 4878 */
struct tagMCI_GENERIC_PARMS
{
  unsigned __int64 dwCallback;
};

/* 4879 */
struct _PRINTER_INFO_2A
{
  char *pServerName;
  char *pPrinterName;
  char *pShareName;
  char *pPortName;
  char *pDriverName;
  char *pComment;
  char *pLocation;
  _devicemodeA *pDevMode;
  char *pSepFile;
  char *pPrintProcessor;
  char *pDatatype;
  char *pParameters;
  void *pSecurityDescriptor;
  unsigned int Attributes;
  unsigned int Priority;
  unsigned int DefaultPriority;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int Status;
  unsigned int cJobs;
  unsigned int AveragePPM;
};

/* 4880 */
struct __cppobj IParseDisplayName : IUnknown
{
};

/* 4881 */
struct __cppobj IOleContainer : IParseDisplayName
{
};

/* 4882 */
struct __cppobj IOleItemContainer : IOleContainer
{
};

/* 4883 */
struct __declspec(align(8)) _ENUM_SERVICE_STATUS_PROCESSA
{
  char *lpServiceName;
  char *lpDisplayName;
  _SERVICE_STATUS_PROCESS ServiceStatusProcess;
};

/* 4884 */
struct __declspec(align(8)) servent
{
  char *s_name;
  char **s_aliases;
  char *s_proto;
  __int16 s_port;
};

/* 4885 */
struct __cppobj IWindowForBindingUI : IUnknown
{
};

/* 4886 */
struct SERVICE_TRIGGER_CUSTOM_STATE_ID
{
  unsigned int Data[2];
};

/* 4887 */
struct __declspec(align(4)) $04A95F07FDF4BC2E92A94510EBA02EF7
{
  unsigned int DataOffset;
  char Data[1];
};

/* 4888 */
union $AF46F45479D7C5F14BE5C98525A12D99
{
  SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
  $04A95F07FDF4BC2E92A94510EBA02EF7 s;
};

/* 4889 */
struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
{
  $AF46F45479D7C5F14BE5C98525A12D99 u;
};

/* 4890 */
struct tagACCEL
{
  char fVirt;
  unsigned __int16 key;
  unsigned __int16 cmd;
};

/* 4891 */
struct _CMC_PEND_INFO
{
  _CRYPTOAPI_BLOB PendToken;
  _FILETIME PendTime;
};

/* 4892 */
union $9C1B55F3BB1E53FD9BE93BB58775679B
{
  unsigned int dwFailInfo;
  _CMC_PEND_INFO *pPendInfo;
};

/* 4893 */
struct _CMC_STATUS_INFO
{
  unsigned int dwStatus;
  unsigned int cBodyList;
  unsigned int *rgdwBodyList;
  wchar_t *pwszStatusString;
  unsigned int dwOtherInfoChoice;
  $9C1B55F3BB1E53FD9BE93BB58775679B ___u5;
};

/* 4894 */
struct _QUOTA_LIMITS
{
  unsigned __int64 PagedPoolLimit;
  unsigned __int64 NonPagedPoolLimit;
  unsigned __int64 MinimumWorkingSetSize;
  unsigned __int64 MaximumWorkingSetSize;
  unsigned __int64 PagefileLimit;
  _LARGE_INTEGER TimeLimit;
};

/* 4895 */
union _RTL_RUN_ONCE
{
  void *Ptr;
};

/* 4896 */
struct __declspec(align(8)) tagSERIALKEYSW
{
  unsigned int cbSize;
  unsigned int dwFlags;
  wchar_t *lpszActivePort;
  wchar_t *lpszPort;
  unsigned int iBaudRate;
  unsigned int iPortState;
  unsigned int iActive;
};

/* 4897 */
struct tagMCI_ANIM_OPEN_PARMSW
{
  unsigned __int64 dwCallback;
  unsigned int wDeviceID;
  __unaligned __declspec(align(1)) const wchar_t *lpstrDeviceType;
  __unaligned __declspec(align(1)) const wchar_t *lpstrElementName;
  __unaligned __declspec(align(1)) const wchar_t *lpstrAlias;
  unsigned int dwStyle;
  HWND__ *hWndParent;
};

/* 4898 */
union $23183F715972D75F676738B275E20F89
{
  unsigned int dwPredefined;
  char *pszObjId;
};

/* 4899 */
struct _CERT_BIOMETRIC_DATA
{
  unsigned int dwTypeOfBiometricDataChoice;
  $23183F715972D75F676738B275E20F89 ___u1;
  _CERT_HASHED_URL HashedUrl;
};

/* 4900 */
struct _CERT_BIOMETRIC_EXT_INFO
{
  unsigned int cBiometricData;
  _CERT_BIOMETRIC_DATA *rgBiometricData;
};

/* 4901 */
struct $632928EDE71210F3E12687783AFF1BE4
{
  _LARGE_INTEGER Cylinders;
  _STORAGE_MEDIA_TYPE MediaType;
  unsigned int TracksPerCylinder;
  unsigned int SectorsPerTrack;
  unsigned int BytesPerSector;
  unsigned int NumberMediaSides;
  unsigned int MediaCharacteristics;
};

/* 4902 */
struct $9F5105A7C64D80EC6D4D8D1774F44889
{
  char MediumType;
  char DensityCode;
};

/* 4903 */
union $EC390562B7B88D8615E498EFCC3DBACA
{
  $9F5105A7C64D80EC6D4D8D1774F44889 ScsiInformation;
};

/* 4904 */
struct __declspec(align(4)) $50236DCC52AD7361A65B30E6DA435362
{
  _STORAGE_MEDIA_TYPE MediaType;
  unsigned int MediaCharacteristics;
  unsigned int CurrentBlockSize;
  _STORAGE_BUS_TYPE BusType;
  $EC390562B7B88D8615E498EFCC3DBACA BusSpecificData;
};

/* 4905 */
union $47C47065343DD050BDAB298A2331579D
{
  $632928EDE71210F3E12687783AFF1BE4 DiskInfo;
  $632928EDE71210F3E12687783AFF1BE4 RemovableDiskInfo;
  $50236DCC52AD7361A65B30E6DA435362 TapeInfo;
};

/* 4906 */
struct _DEVICE_MEDIA_INFO
{
  $47C47065343DD050BDAB298A2331579D DeviceSpecific;
};

/* 4907 */
struct _GET_MEDIA_TYPES
{
  unsigned int DeviceType;
  unsigned int MediaInfoCount;
  _DEVICE_MEDIA_INFO MediaInfo[1];
};

/* 4908 */
struct __cppobj IInternetZoneManager : IUnknown
{
};

/* 4909 */
struct _ZONEATTRIBUTES
{
  unsigned int cbSize;
  wchar_t szDisplayName[260];
  wchar_t szDescription[200];
  wchar_t szIconPath[260];
  unsigned int dwTemplateMinLevel;
  unsigned int dwTemplateRecommended;
  unsigned int dwTemplateCurrentLevel;
  unsigned int dwFlags;
};

/* 4910 */
struct __cppobj ICreateTypeLib : IUnknown
{
};

/* 4911 */
struct __cppobj ICreateTypeLib2 : ICreateTypeLib
{
};

/* 4912 */
struct tagPSDA
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  unsigned int Flags;
  tagPOINT ptPaperSize;
  tagRECT rtMinMargin;
  tagRECT rtMargin;
  HINSTANCE__ *hInstance;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnPageSetupHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  unsigned __int64 (__cdecl *lpfnPagePaintHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const char *lpPageSetupTemplateName;
  void *hPageSetupTemplate;
};

/* 4913 */
struct _PROPSHEETHEADERA_V1
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HWND__ *hwndParent;
  HINSTANCE__ *hInstance;
  $57038144EE260AFAA32682BDDA1565B6 ___u4;
  const char *pszCaption;
  unsigned int nPages;
  $E3CAD8411F77256CCB020CE77D197F57 ___u7;
  $7439137C589281D8AD31E8BAABBB0A0E ___u8;
  int (__cdecl *pfnCallback)(HWND__ *, unsigned int, __int64);
};

/* 4914 */
struct __declspec(align(8)) _PRINTER_DEFAULTSA
{
  char *pDatatype;
  _devicemodeA *pDevMode;
  unsigned int DesiredAccess;
};

/* 4915 */
struct _TOKEN_LINKED_TOKEN
{
  void *LinkedToken;
};

/* 4916 */
struct _NETCONNECTINFOSTRUCT
{
  unsigned int cbStructure;
  unsigned int dwFlags;
  unsigned int dwSpeed;
  unsigned int dwDelay;
  unsigned int dwOptDataSize;
};

/* 4917 */
struct _CMS_DH_KEY_INFO
{
  unsigned int dwVersion;
  unsigned int Algid;
  char *pszContentEncObjId;
  _CRYPTOAPI_BLOB PubInfo;
  void *pReserved;
};

/* 4918 */
struct _FILE_LAYOUT_ENTRY
{
  unsigned int Version;
  unsigned int NextFileOffset;
  unsigned int Flags;
  unsigned int FileAttributes;
  unsigned __int64 FileReferenceNumber;
  unsigned int FirstNameOffset;
  unsigned int FirstStreamOffset;
  unsigned int ExtraInfoOffset;
  unsigned int Reserved;
};

/* 4919 */
struct _SERVICE_TRIGGER
{
  unsigned int dwTriggerType;
  unsigned int dwAction;
  _GUID *pTriggerSubtype;
  unsigned int cDataItems;
  _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM *pDataItems;
};

/* 4920 */
struct _WSABUF
{
  unsigned int len;
  char *buf;
};

/* 4921 */
struct __declspec(align(8)) _WSAMSG
{
  sockaddr *name;
  int namelen;
  _WSABUF *lpBuffers;
  unsigned int dwBufferCount;
  _WSABUF Control;
  unsigned int dwFlags;
};

/* 4922 */
struct $507ECED6EFA5CFD5AC2C04C0BCDE222D
{
  unsigned int Short;
  unsigned int Long;
};

/* 4923 */
union $6BF88A6FA0008955672A9BD2D75B41B7
{
  char ShortName[8];
  $507ECED6EFA5CFD5AC2C04C0BCDE222D Name;
  unsigned int LongName[2];
};

/* 4924 */
struct __unaligned __declspec(align(2)) _IMAGE_SYMBOL
{
  $6BF88A6FA0008955672A9BD2D75B41B7 N;
  unsigned int Value;
  __int16 SectionNumber;
  unsigned __int16 Type;
  char StorageClass;
  char NumberOfAuxSymbols;
};

/* 4925 */
struct __declspec(align(8)) _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
{
  unsigned int ulFlags;
  unsigned int ulEncodedAssemblyIdentityLength;
  unsigned int ulManifestPathType;
  unsigned int ulManifestPathLength;
  _LARGE_INTEGER liManifestLastWriteTime;
  unsigned int ulPolicyPathType;
  unsigned int ulPolicyPathLength;
  _LARGE_INTEGER liPolicyLastWriteTime;
  unsigned int ulMetadataSatelliteRosterIndex;
  unsigned int ulManifestVersionMajor;
  unsigned int ulManifestVersionMinor;
  unsigned int ulPolicyVersionMajor;
  unsigned int ulPolicyVersionMinor;
  unsigned int ulAssemblyDirectoryNameLength;
  const wchar_t *lpAssemblyEncodedAssemblyIdentity;
  const wchar_t *lpAssemblyManifestPath;
  const wchar_t *lpAssemblyPolicyPath;
  const wchar_t *lpAssemblyDirectoryName;
  unsigned int ulFileCount;
};

/* 4926 */
struct tagTouchPredictionParameters
{
  unsigned int cbSize;
  unsigned int dwLatency;
  unsigned int dwSampleTime;
  unsigned int bUseHWTimeStamp;
};

/* 4927 */
struct _UUID_VECTOR
{
  unsigned int Count;
  _GUID *Uuid[1];
};

/* 4928 */
struct RPC_INTERFACE_TEMPLATEA
{
  unsigned int Version;
  void *IfSpec;
  _GUID *MgrTypeUuid;
  void *MgrEpv;
  unsigned int Flags;
  unsigned int MaxCalls;
  unsigned int MaxRpcSize;
  int (__cdecl *IfCallback)(void *, void *);
  _UUID_VECTOR *UuidVector;
  char *Annotation;
  void *SecurityDescriptor;
};

/* 4929 */
struct __cppobj IInternetProtocolRoot : IUnknown
{
};

/* 4930 */
struct __cppobj IInternetProtocol : IInternetProtocolRoot
{
};

/* 4931 */
struct __declspec(align(8)) tagDROPSTRUCT
{
  HWND__ *hwndSource;
  HWND__ *hwndSink;
  unsigned int wFmt;
  unsigned __int64 dwData;
  tagPOINT ptDrop;
  unsigned int dwControlData;
};

/* 4932 */
struct __declspec(align(4)) _SECURITY_QUALITY_OF_SERVICE
{
  unsigned int Length;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  char ContextTrackingMode;
  char EffectiveOnly;
};

/* 4933 */
struct tagCONVCONTEXT
{
  unsigned int cb;
  unsigned int wFlags;
  unsigned int wCountryID;
  int iCodePage;
  unsigned int dwLangID;
  unsigned int dwSecurity;
  _SECURITY_QUALITY_OF_SERVICE qos;
};

/* 4934 */
struct __unaligned __declspec(align(1)) _SENDCMDOUTPARAMS
{
  unsigned int cBufferSize;
  _DRIVERSTATUS DriverStatus;
  char bBuffer[1];
};

/* 4935 */
struct __declspec(align(4)) _PATHNAME_BUFFER
{
  unsigned int PathNameLength;
  wchar_t Name[1];
};

/* 4936 */
struct __declspec(align(8)) _JOB_INFO_1A
{
  unsigned int JobId;
  char *pPrinterName;
  char *pMachineName;
  char *pUserName;
  char *pDocument;
  char *pDatatype;
  char *pStatus;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int TotalPages;
  unsigned int PagesPrinted;
  _SYSTEMTIME Submitted;
};

/* 4937 */
struct _TOKEN_GROUPS_AND_PRIVILEGES
{
  unsigned int SidCount;
  unsigned int SidLength;
  _SID_AND_ATTRIBUTES *Sids;
  unsigned int RestrictedSidCount;
  unsigned int RestrictedSidLength;
  _SID_AND_ATTRIBUTES *RestrictedSids;
  unsigned int PrivilegeCount;
  unsigned int PrivilegeLength;
  _LUID_AND_ATTRIBUTES *Privileges;
  _LUID AuthenticationId;
};

/* 4938 */
struct _FILE_ALIGNMENT_INFO
{
  unsigned int AlignmentRequirement;
};

/* 4939 */
struct tagMSLLHOOKSTRUCT
{
  tagPOINT pt;
  unsigned int mouseData;
  unsigned int flags;
  unsigned int time;
  unsigned __int64 dwExtraInfo;
};

/* 4940 */
struct _RPC_SECURITY_QOS_V2_W
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  $FE051B784B8BB8B8D4262884B1E07CD3 u;
};

/* 4941 */
struct _STORAGE_PREDICT_FAILURE
{
  unsigned int PredictFailure;
  char VendorSpecific[512];
};

/* 4942 */
struct _devicemodeW
{
  wchar_t dmDeviceName[32];
  unsigned __int16 dmSpecVersion;
  unsigned __int16 dmDriverVersion;
  unsigned __int16 dmSize;
  unsigned __int16 dmDriverExtra;
  unsigned int dmFields;
  $91B95E9343A7AF31126A57818C43791E ___u6;
  $3B68C57CF07206FB951B4B780FF3EE54 ___u7;
  $985B1EB5BDCAB500C12F7BB27DC26AE2 ___u8;
  __int16 dmColor;
  __int16 dmDuplex;
  __int16 dmYResolution;
  __int16 dmTTOption;
  __int16 dmCollate;
  wchar_t dmFormName[32];
  unsigned __int16 dmLogPixels;
  unsigned int dmBitsPerPel;
  unsigned int dmPelsWidth;
  unsigned int dmPelsHeight;
  $309666D137CBB19809FA597AD348B415 ___u19;
  unsigned int dmDisplayFrequency;
  unsigned int dmICMMethod;
  unsigned int dmICMIntent;
  unsigned int dmMediaType;
  unsigned int dmDitherType;
  unsigned int dmReserved1;
  unsigned int dmReserved2;
  unsigned int dmPanningWidth;
  unsigned int dmPanningHeight;
};

/* 4943 */
struct _JOB_INFO_4W
{
  unsigned int JobId;
  wchar_t *pPrinterName;
  wchar_t *pMachineName;
  wchar_t *pUserName;
  wchar_t *pDocument;
  wchar_t *pNotifyName;
  wchar_t *pDatatype;
  wchar_t *pPrintProcessor;
  wchar_t *pParameters;
  wchar_t *pDriverName;
  _devicemodeW *pDevMode;
  wchar_t *pStatus;
  void *pSecurityDescriptor;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int TotalPages;
  unsigned int Size;
  _SYSTEMTIME Submitted;
  unsigned int Time;
  unsigned int PagesPrinted;
  int SizeHigh;
};

/* 4944 */
struct tagIMEMENUITEMINFOA
{
  unsigned int cbSize;
  unsigned int fType;
  unsigned int fState;
  unsigned int wID;
  HBITMAP__ *hbmpChecked;
  HBITMAP__ *hbmpUnchecked;
  unsigned int dwItemData;
  char szString[80];
  HBITMAP__ *hbmpItem;
};

/* 4945 */
struct tagEXTLOGPEN
{
  unsigned int elpPenStyle;
  unsigned int elpWidth;
  unsigned int elpBrushStyle;
  unsigned int elpColor;
  unsigned __int64 elpHatch;
  unsigned int elpNumEntries;
  unsigned int elpStyleEntry[1];
};

/* 4946 */
struct midievent_tag
{
  unsigned int dwDeltaTime;
  unsigned int dwStreamID;
  unsigned int dwEvent;
  unsigned int dwParms[1];
};

/* 4947 */
struct _OUTLINETEXTMETRICA
{
  unsigned int otmSize;
  tagTEXTMETRICA otmTextMetrics;
  char otmFiller;
  tagPANOSE otmPanoseNumber;
  unsigned int otmfsSelection;
  unsigned int otmfsType;
  int otmsCharSlopeRise;
  int otmsCharSlopeRun;
  int otmItalicAngle;
  unsigned int otmEMSquare;
  int otmAscent;
  int otmDescent;
  unsigned int otmLineGap;
  unsigned int otmsCapEmHeight;
  unsigned int otmsXHeight;
  tagRECT otmrcFontBox;
  int otmMacAscent;
  int otmMacDescent;
  unsigned int otmMacLineGap;
  unsigned int otmusMinimumPPEM;
  tagPOINT otmptSubscriptSize;
  tagPOINT otmptSubscriptOffset;
  tagPOINT otmptSuperscriptSize;
  tagPOINT otmptSuperscriptOffset;
  unsigned int otmsStrikeoutSize;
  int otmsStrikeoutPosition;
  int otmsUnderscoreSize;
  int otmsUnderscorePosition;
  char *otmpFamilyName;
  char *otmpFaceName;
  char *otmpStyleName;
  char *otmpFullName;
};

/* 4948 */
struct tagAUXCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
};

/* 4949 */
struct _CERT_SELECT_CRITERIA
{
  unsigned int dwType;
  unsigned int cPara;
  void **ppPara;
};

/* 4950 */
union _userCLIPFORMAT::__MIDL_IWinTypes_0001
{
  unsigned int dwValue;
  wchar_t *pwszName;
};

/* 4951 */
struct _userCLIPFORMAT
{
  int fContext;
  _userCLIPFORMAT::__MIDL_IWinTypes_0001 u;
};

/* 4952 */
struct addrinfoexA
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  unsigned __int64 ai_addrlen;
  char *ai_canonname;
  sockaddr *ai_addr;
  void *ai_blob;
  unsigned __int64 ai_bloblen;
  _GUID *ai_provider;
  addrinfoexA *ai_next;
};

/* 4953 */
struct _CERT_OR_CRL_BLOB
{
  unsigned int dwChoice;
  unsigned int cbEncoded;
  char *pbEncoded;
};

/* 4954 */
struct _CRYPT_RC2_CBC_PARAMETERS
{
  unsigned int dwVersion;
  int fIV;
  char rgbIV[8];
};

/* 4955 */
struct _PREVENT_MEDIA_REMOVAL
{
  char PreventMediaRemoval;
};

/* 4956 */
struct REFS_VOLUME_DATA_BUFFER
{
  unsigned int ByteCount;
  unsigned int MajorVersion;
  unsigned int MinorVersion;
  unsigned int BytesPerPhysicalSector;
  _LARGE_INTEGER VolumeSerialNumber;
  _LARGE_INTEGER NumberSectors;
  _LARGE_INTEGER TotalClusters;
  _LARGE_INTEGER FreeClusters;
  _LARGE_INTEGER TotalReserved;
  unsigned int BytesPerSector;
  unsigned int BytesPerCluster;
  _LARGE_INTEGER MaximumSizeOfResidentFile;
  _LARGE_INTEGER Reserved[10];
};

/* 4957 */
struct _DOC_INFO_2A
{
  char *pDocName;
  char *pOutputFile;
  char *pDatatype;
  unsigned int dwMode;
  unsigned int JobId;
};

/* 4958 */
struct _RASTERIZER_STATUS
{
  __int16 nSize;
  __int16 wFlags;
  __int16 nLanguageID;
};

/* 4959 */
struct $52C799A0E2E72A96868A6ABF01275F3C
{
  char BirthVolumeId[16];
  char BirthObjectId[16];
  char DomainId[16];
};

/* 4960 */
union $DE820EFA81138E1B24C1D82397F482A2
{
  $52C799A0E2E72A96868A6ABF01275F3C __s0;
  char ExtendedInfo[48];
};

/* 4961 */
struct _FILE_OBJECTID_BUFFER
{
  char ObjectId[16];
  $DE820EFA81138E1B24C1D82397F482A2 ___u1;
};

/* 4962 */
struct _TXFS_SAVEPOINT_INFORMATION
{
  void *KtmTransaction;
  unsigned int ActionCode;
  unsigned int SavepointId;
};

/* 4963 */
struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
{
  unsigned int RequestLevel;
  unsigned int RequestFlags;
};

/* 4964 */
struct _PROPSHEETPAGEW_V3
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $B5A51C4AFFF5DDC4103EC1CA2C54B662 ___u3;
  $BEA4071AF47773B46964588E62B2512B ___u4;
  const wchar_t *pszTitle;
  __int64 (__cdecl *pfnDlgProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  __int64 lParam;
  unsigned int (__cdecl *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);
  unsigned int *pcRefParent;
  const wchar_t *pszHeaderTitle;
  const wchar_t *pszHeaderSubTitle;
  void *hActCtx;
};

/* 4965 */
struct __declspec(align(8)) _PRINTER_INFO_4A
{
  char *pPrinterName;
  char *pServerName;
  unsigned int Attributes;
};

/* 4966 */
struct tagOFN_NT4A
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const char *lpstrFilter;
  char *lpstrCustomFilter;
  unsigned int nMaxCustFilter;
  unsigned int nFilterIndex;
  char *lpstrFile;
  unsigned int nMaxFile;
  char *lpstrFileTitle;
  unsigned int nMaxFileTitle;
  const char *lpstrInitialDir;
  const char *lpstrTitle;
  unsigned int Flags;
  unsigned __int16 nFileOffset;
  unsigned __int16 nFileExtension;
  const char *lpstrDefExt;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const char *lpTemplateName;
};

/* 4967 */
struct _OFNOTIFYA
{
  tagNMHDR hdr;
  tagOFNA *lpOFN;
  char *pszFile;
};

/* 4968 */
struct _WIN32_FIND_DATAW
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
  unsigned int dwReserved0;
  unsigned int dwReserved1;
  wchar_t cFileName[260];
  wchar_t cAlternateFileName[14];
};

/* 4969 */
struct _CERT_FORTEZZA_DATA_PROP
{
  char SerialNumber[8];
  int CertIndex;
  char CertLabel[36];
};

/* 4970 */
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
{
  unsigned int cbSize;
  unsigned int dwSignerIndex;
  unsigned int dwUnauthAttrIndex;
};

/* 4971 */
struct _GETVERSIONINPARAMS
{
  char bVersion;
  char bRevision;
  char bReserved;
  char bIDEDeviceMap;
  unsigned int fCapabilities;
  unsigned int dwReserved[4];
};

/* 4972 */
struct _PRINTER_INFO_8W
{
  _devicemodeW *pDevMode;
};

/* 4973 */
struct tagEMRTEXT
{
  _POINTL ptlReference;
  unsigned int nChars;
  unsigned int offString;
  unsigned int fOptions;
  _RECTL rcl;
  unsigned int offDx;
};

/* 4974 */
struct tagEMRPOLYTEXTOUTA
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int iGraphicsMode;
  float exScale;
  float eyScale;
  int cStrings;
  tagEMRTEXT aemrtext[1];
};

/* 4975 */
struct __declspec(align(8)) _ICONINFOEXA
{
  unsigned int cbSize;
  int fIcon;
  unsigned int xHotspot;
  unsigned int yHotspot;
  HBITMAP__ *hbmMask;
  HBITMAP__ *hbmColor;
  unsigned __int16 wResID;
  char szModName[260];
  char szResName[260];
};

/* 4976 */
struct tagMCI_OVLY_OPEN_PARMSW
{
  unsigned __int64 dwCallback;
  unsigned int wDeviceID;
  __unaligned __declspec(align(1)) const wchar_t *lpstrDeviceType;
  __unaligned __declspec(align(1)) const wchar_t *lpstrElementName;
  __unaligned __declspec(align(1)) const wchar_t *lpstrAlias;
  unsigned int dwStyle;
  HWND__ *hWndParent;
};

/* 4977 */
struct pcmwaveformat_tag
{
  waveformat_tag wf;
  unsigned __int16 wBitsPerSample;
};

/* 4978 */
struct _DRIVER_INFO_1A
{
  char *pName;
};

/* 4979 */
struct __declspec(align(8)) _PRINTER_DEFAULTSW
{
  wchar_t *pDatatype;
  _devicemodeW *pDevMode;
  unsigned int DesiredAccess;
};

/* 4980 */
struct HLSURF__
{
  int unused;
};

/* 4981 */
struct tagBITMAPINFOHEADER
{
  unsigned int biSize;
  int biWidth;
  int biHeight;
  unsigned __int16 biPlanes;
  unsigned __int16 biBitCount;
  unsigned int biCompression;
  unsigned int biSizeImage;
  int biXPelsPerMeter;
  int biYPelsPerMeter;
  unsigned int biClrUsed;
  unsigned int biClrImportant;
};

/* 4982 */
struct tagNEWTEXTMETRICA
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  char tmFirstChar;
  char tmLastChar;
  char tmDefaultChar;
  char tmBreakChar;
  char tmItalic;
  char tmUnderlined;
  char tmStruckOut;
  char tmPitchAndFamily;
  char tmCharSet;
  unsigned int ntmFlags;
  unsigned int ntmSizeEM;
  unsigned int ntmCellHeight;
  unsigned int ntmAvgWidth;
};

/* 4983 */
struct tagNEWTEXTMETRICEXA
{
  tagNEWTEXTMETRICA ntmTm;
  tagFONTSIGNATURE ntmFontSig;
};

/* 4984 */
struct tagAXISINFOA
{
  int axMinValue;
  int axMaxValue;
  char axAxisName[16];
};

/* 4985 */
struct tagAXESLISTA
{
  unsigned int axlReserved;
  unsigned int axlNumAxes;
  tagAXISINFOA axlAxisInfo[16];
};

/* 4986 */
struct tagENUMTEXTMETRICA
{
  tagNEWTEXTMETRICEXA etmNewTextMetricEx;
  tagAXESLISTA etmAxesList;
};

/* 4987 */
struct _BCRYPT_ECCKEY_BLOB
{
  unsigned int dwMagic;
  unsigned int cbKey;
};

/* 4988 */
struct __declspec(align(8)) _CRYPT_ECC_CMS_SHARED_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
  _CRYPTOAPI_BLOB EntityUInfo;
  char rgbSuppPubInfo[4];
};

/* 4989 */
struct _EFS_PIN_BLOB
{
  unsigned int cbPadding;
  unsigned int cbData;
  char *pbData;
};

/* 4990 */
struct __cppobj IInternet : IUnknown
{
};

/* 4991 */
struct __cppobj IInternetProtocolInfo : IUnknown
{
};

/* 4992 */
struct tagEMRSTRETCHDIBITS
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int xSrc;
  int ySrc;
  int cxSrc;
  int cySrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  unsigned int iUsageSrc;
  unsigned int dwRop;
  int cxDest;
  int cyDest;
};

/* 4993 */
struct _BINARY_CONTAINER
{
  unsigned int cbBuf;
  char *pData;
};

/* 4994 */
union $CCB5AEDDAB729EC8DA8162CE063F40C7
{
  int bData;
  int iData;
  wchar_t *sData;
  float fData;
  _BINARY_CONTAINER biData;
};

/* 4995 */
struct _BIDI_DATA
{
  unsigned int dwBidiType;
  $CCB5AEDDAB729EC8DA8162CE063F40C7 u;
};

/* 4996 */
struct _BIDI_RESPONSE_DATA
{
  unsigned int dwResult;
  unsigned int dwReqNumber;
  wchar_t *pSchema;
  _BIDI_DATA data;
};

/* 4997 */
struct _BIDI_RESPONSE_CONTAINER
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int Count;
  _BIDI_RESPONSE_DATA aData[1];
};

/* 4998 */
struct __cppobj IBindCtx : IUnknown
{
};

/* 4999 */
struct __cppobj IRunningObjectTable : IUnknown
{
};

/* 5000 */
struct __cppobj IEnumString : IUnknown
{
};

/* 5001 */
struct _TP_POOL_STACK_INFORMATION
{
  unsigned __int64 StackReserve;
  unsigned __int64 StackCommit;
};

/* 5002 */
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
{
  void *TransportCredentials;
  unsigned int Flags;
  unsigned int AuthenticationTarget;
  unsigned int NumberOfAuthnSchemes;
  unsigned int *AuthnSchemes;
  unsigned __int16 *ServerCertificateSubject;
  void *ProxyCredentials;
  unsigned int NumberOfProxyAuthnSchemes;
  unsigned int *ProxyAuthnSchemes;
};

/* 5003 */
struct _STORAGE_HOTPLUG_INFO
{
  unsigned int Size;
  char MediaRemovable;
  char MediaHotplug;
  char DeviceHotplug;
  char WriteCacheEnableOverride;
};

/* 5004 */
struct $D8AFEAC9F4117607D401C87AE9A38567
{
  char Reserved2[504];
};

/* 5005 */
union $C7EF403167468EA23A6AA7107C23787F
{
  $D8AFEAC9F4117607D401C87AE9A38567 StorageOffloadZeroDataToken;
  char Token[504];
};

/* 5006 */
struct _STORAGE_OFFLOAD_TOKEN
{
  char TokenType[4];
  char Reserved[2];
  char TokenIdLength[2];
  $C7EF403167468EA23A6AA7107C23787F ___u3;
};

/* 5007 */
struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
{
  unsigned int Flags;
  unsigned int Reserved;
  unsigned __int64 TokenOffset;
  _STORAGE_OFFLOAD_TOKEN Token;
};

/* 5008 */
struct __cppobj IPropertyStorage : IUnknown
{
};

/* 5009 */
union $BCD5257052F2DAAF91A32A374615C63E
{
  unsigned int propid;
  wchar_t *lpwstr;
};

/* 5010 */
struct tagPROPSPEC
{
  unsigned int ulKind;
  $BCD5257052F2DAAF91A32A374615C63E ___u1;
};

/* 5011 */
struct tagCLIPDATA
{
  unsigned int cbSize;
  int ulClipFmt;
  char *pClipData;
};

/* 5012 */
struct tagBSTRBLOB
{
  unsigned int cbSize;
  char *pData;
};

/* 5013 */
struct __cppobj ISequentialStream : IUnknown
{
};

/* 5014 */
struct __cppobj IStream : ISequentialStream
{
};

/* 5015 */
struct tagVersionedStream
{
  _GUID guidVersion;
  IStream *pStream;
};

/* 5016 */
struct tagCAC
{
  unsigned int cElems;
  char *pElems;
};

/* 5017 */
struct tagCAI
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 5018 */
struct tagCAUI
{
  unsigned int cElems;
  unsigned __int16 *pElems;
};

/* 5019 */
struct tagCAL
{
  unsigned int cElems;
  int *pElems;
};

/* 5020 */
struct tagCAUL
{
  unsigned int cElems;
  unsigned int *pElems;
};

/* 5021 */
struct tagCAH
{
  unsigned int cElems;
  _LARGE_INTEGER *pElems;
};

/* 5022 */
struct tagCAUH
{
  unsigned int cElems;
  _ULARGE_INTEGER *pElems;
};

/* 5023 */
struct tagCAFLT
{
  unsigned int cElems;
  float *pElems;
};

/* 5024 */
struct tagCABOOL
{
  unsigned int cElems;
  __int16 *pElems;
};

/* 5025 */
struct tagCASCODE
{
  unsigned int cElems;
  int *pElems;
};

/* 5026 */
struct tagCADATE
{
  unsigned int cElems;
  long double *pElems;
};

/* 5027 */
struct tagCAFILETIME
{
  unsigned int cElems;
  _FILETIME *pElems;
};

/* 5028 */
struct tagCACLIPDATA
{
  unsigned int cElems;
  tagCLIPDATA *pElems;
};

/* 5029 */
struct tagCABSTRBLOB
{
  unsigned int cElems;
  tagBSTRBLOB *pElems;
};

/* 5030 */
struct tagCALPSTR
{
  unsigned int cElems;
  char **pElems;
};

/* 5031 */
struct tagCALPWSTR
{
  unsigned int cElems;
  wchar_t **pElems;
};

/* 5034 */
struct __unaligned __declspec(align(1)) $5DF3780F58367B9F2537DF425A8A812E
{
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  char cVal;
};

/* 5035 */
struct $9B22A5EF7AB70AF1D8B5C3185EEA8BE6
{
  _BYTE gap0[8];
  _LARGE_INTEGER hVal;
};

/* 5036 */
struct $AB776A95FA4525482D4F459F913CCC22
{
  _BYTE gap0[8];
  _ULARGE_INTEGER uhVal;
};

/* 5037 */
struct $998E47185E2F8ABF3A61346E7EEE14B9
{
  _BYTE gap0[8];
  _FILETIME filetime;
};

/* 5038 */
struct $B8CBACF0B7C123315D768C144860D5B6
{
  _BYTE gap0[8];
  _GUID *puuid;
};

/* 5039 */
struct $7F92C7992700440667C1853B99B80B88
{
  _BYTE gap0[8];
  tagCLIPDATA *pclipdata;
};

/* 5040 */
struct $97524D57318AB4459FE66A9A0F53E04D
{
  _BYTE gap0[8];
  tagBSTRBLOB bstrblobVal;
};

/* 5041 */
struct $0ECA15056D5F7EF75BA68C03A0E022DD
{
  _BYTE gap0[8];
  tagBLOB blob;
};

/* 5042 */
struct $17BA733FE6B8BEB3CC80B954432F0727
{
  _BYTE gap0[8];
  char *pszVal;
};

/* 5043 */
struct $A123DDE5155BABE8656CED1ACF96B10E
{
  _BYTE gap0[8];
  wchar_t *pwszVal;
};

/* 5044 */
struct $D3C80A699214E4AB361390AB678999AE
{
  _BYTE gap0[8];
  IStream *pStream;
};

/* 5045 */
struct $00B3C40F874FFB6FF0798AA083BA08B9
{
  _BYTE gap0[8];
  IStorage *pStorage;
};

/* 5046 */
struct $02D0484AD97FAACD49BC1D9010F0E962
{
  _BYTE gap0[8];
  tagVersionedStream *pVersionedStream;
};

/* 5047 */
struct $1C7CC1D53AA5685064927FF152C06F9D
{
  _BYTE gap0[8];
  tagCAC cac;
};

/* 5048 */
struct $43CFC4AF1C63A89BD0521A021CEC20F9
{
  _BYTE gap0[8];
  tagCAUB caub;
};

/* 5049 */
struct $94381817B219E2FFC8834798D3B3AA0C
{
  _BYTE gap0[8];
  tagCAI cai;
};

/* 5050 */
struct $FB52FC71387C6F192B0AD078A8FE9D6D
{
  _BYTE gap0[8];
  tagCAUI caui;
};

/* 5051 */
struct $6C92A2CB929E948E3DD7861DCBF1F5FC
{
  _BYTE gap0[8];
  tagCAL cal;
};

/* 5052 */
struct $D53F6677020BEB29DD6BC4296813788F
{
  _BYTE gap0[8];
  tagCAUL caul;
};

/* 5053 */
struct $CE92B6883CEE70E1527F4F0861B93299
{
  _BYTE gap0[8];
  tagCAH cah;
};

/* 5054 */
struct $2A277094393AADEED21C3E4D528B5C22
{
  _BYTE gap0[8];
  tagCAUH cauh;
};

/* 5055 */
struct $A24AF095FA8F5675C76EE417D49820E7
{
  _BYTE gap0[8];
  tagCAFLT caflt;
};

/* 5056 */
struct $1CC447711B98138461589FF070B6CDE4
{
  _BYTE gap0[8];
  tagCADBL cadbl;
};

/* 5057 */
struct $0AA88FDDEAB7876781C777AE0B51F3FA
{
  _BYTE gap0[8];
  tagCABOOL cabool;
};

/* 5058 */
struct $8444939FEFB34F1312F5F41CA778D849
{
  _BYTE gap0[8];
  tagCASCODE cascode;
};

/* 5059 */
struct $DEB7D1EE86E6E3D0FDB24CF8EC671374
{
  _BYTE gap0[8];
  tagCACY cacy;
};

/* 5060 */
struct $61873B403F48F4C9B2792E95FB369A5B
{
  _BYTE gap0[8];
  tagCADATE cadate;
};

/* 5061 */
struct $9E390E865EF2667D9BE47913DD39371C
{
  _BYTE gap0[8];
  tagCAFILETIME cafiletime;
};

/* 5062 */
struct $AEB952791582F2572FF1C8A1EA9E0866
{
  _BYTE gap0[8];
  tagCACLSID cauuid;
};

/* 5063 */
struct $337C6EDDED2E40005165D7F18889C55B
{
  _BYTE gap0[8];
  tagCACLIPDATA caclipdata;
};

/* 5064 */
struct $5FA91227F6A97EB6BCF0B8FB9CA6D9FA
{
  _BYTE gap0[8];
  tagCABSTR cabstr;
};

/* 5065 */
struct $2DD859208FCC624EBDEA16DEE865DB76
{
  _BYTE gap0[8];
  tagCABSTRBLOB cabstrblob;
};

/* 5066 */
struct $4992F22FE72F282338CE10C8962F02CA
{
  _BYTE gap0[8];
  tagCALPSTR calpstr;
};

/* 5067 */
struct $F4538ED7F28B55853165A7CD7EB0F7F8
{
  _BYTE gap0[8];
  tagCALPWSTR calpwstr;
};

/* 5033 */
struct tagCAPROPVARIANT
{
  unsigned int cElems;
  tagPROPVARIANT *pElems;
};

/* 5068 */
struct $8B9E8D441FF822726FC5CC87A53D454E
{
  _BYTE gap0[8];
  tagCAPROPVARIANT capropvar;
};

/* 5069 */
struct $4BB0965DB23528175139147BEBE1F43D
{
  _BYTE gap0[8];
  tagPROPVARIANT *pvarVal;
};

/* 5070 */
union $3F46030E103A3C087A652D3FC886C603
{
  $5DF3780F58367B9F2537DF425A8A812E __s0;
  tagDEC decVal;
  $F28A51B4B40B0D33C72915D739D42B4B __s2;
  $31126B8528A05AF3606C6D495FD178E8 __s3;
  $48802A31D3D0701BC13CEF9CEA041E7B __s4;
  $6D336DA143C556260FF80C12817B08DB __s5;
  $B644145F46FF1F932B106BFA6CC3F6D9 __s6;
  $5CA90CF57237397281FB12BFD52C1905 __s7;
  $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s8;
  $9B22A5EF7AB70AF1D8B5C3185EEA8BE6 __s9;
  $AB776A95FA4525482D4F459F913CCC22 __s10;
  $50230A970D9734D4E9774CFC619DF0F6 __s11;
  $4C0EC2258454B893CE739DAE89D8DB7B __s12;
  $6DB36323059316E675433BB10D285009 __s13;
  $8E3C8731874D1B3BC66617C4DD3163A6 __s14;
  $043D6BDE15F78F1CC187FFC35D427BED __s15;
  $E94952165EEA9EEA990FEB33603E1B19 __s16;
  $998E47185E2F8ABF3A61346E7EEE14B9 __s17;
  $B8CBACF0B7C123315D768C144860D5B6 __s18;
  $7F92C7992700440667C1853B99B80B88 __s19;
  $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s20;
  $97524D57318AB4459FE66A9A0F53E04D __s21;
  $0ECA15056D5F7EF75BA68C03A0E022DD __s22;
  $17BA733FE6B8BEB3CC80B954432F0727 __s23;
  $A123DDE5155BABE8656CED1ACF96B10E __s24;
  $8092A495FC1DF9F642E7C056E8075E5C __s25;
  $EEBE84C900CEEA6F3A4342ACE5306C62 __s26;
  $D3C80A699214E4AB361390AB678999AE __s27;
  $00B3C40F874FFB6FF0798AA083BA08B9 __s28;
  $02D0484AD97FAACD49BC1D9010F0E962 __s29;
  $E8A8ADACC4F63AB4ECBC5D09F8E24689 __s30;
  $1C7CC1D53AA5685064927FF152C06F9D __s31;
  $43CFC4AF1C63A89BD0521A021CEC20F9 __s32;
  $94381817B219E2FFC8834798D3B3AA0C __s33;
  $FB52FC71387C6F192B0AD078A8FE9D6D __s34;
  $6C92A2CB929E948E3DD7861DCBF1F5FC __s35;
  $D53F6677020BEB29DD6BC4296813788F __s36;
  $CE92B6883CEE70E1527F4F0861B93299 __s37;
  $2A277094393AADEED21C3E4D528B5C22 __s38;
  $A24AF095FA8F5675C76EE417D49820E7 __s39;
  $1CC447711B98138461589FF070B6CDE4 __s40;
  $0AA88FDDEAB7876781C777AE0B51F3FA __s41;
  $8444939FEFB34F1312F5F41CA778D849 __s42;
  $DEB7D1EE86E6E3D0FDB24CF8EC671374 __s43;
  $61873B403F48F4C9B2792E95FB369A5B __s44;
  $9E390E865EF2667D9BE47913DD39371C __s45;
  $AEB952791582F2572FF1C8A1EA9E0866 __s46;
  $337C6EDDED2E40005165D7F18889C55B __s47;
  $5FA91227F6A97EB6BCF0B8FB9CA6D9FA __s48;
  $2DD859208FCC624EBDEA16DEE865DB76 __s49;
  $4992F22FE72F282338CE10C8962F02CA __s50;
  $F4538ED7F28B55853165A7CD7EB0F7F8 __s51;
  $8B9E8D441FF822726FC5CC87A53D454E __s52;
  $E1D71D20C3D01115E20D79FAE9629CE8 __s53;
  $166B1F81F6EA96F97683A65F38FB1A59 __s54;
  $76732A64405C0E287FCB302687644550 __s55;
  $5669F5A4AD19EF2CB42A5602080CB0A6 __s56;
  $E5FC128E66C26C95254032BA69D36E74 __s57;
  $886F8AE9D7C8B1B861B6CA58D67B682A __s58;
  $CDA73A427DD2A30CDA26CA3394C33CF0 __s59;
  $2516E53E690D8CC5659AAB7EDC49E664 __s60;
  $BF8CC88CDF129BD6E4FA4ABA13F521AD __s61;
  $2CABE618CF1C2625A4479554E4967E0A __s62;
  $AAA92DA1D6E1B0E8462F69216B62027C __s63;
  $08C289CC69B385203DA3368FE72D6D10 __s64;
  $F7167AE7A8ABA03C094C204FB1564A28 __s65;
  $FB6980A5287B5B2DFCE93144582BA274 __s66;
  $6857AE69DB7C952EEFD665431A7B503A __s67;
  $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s68;
  $373BB333679CCAAE77F4F5B3D7936D3C __s69;
  $813863DAA8596C1765EBBA43E9C0757D __s70;
  $010A8ABA11B5501E04A23952008593E1 __s71;
  $4BB0965DB23528175139147BEBE1F43D __s72;
};

/* 5032 */
struct tagPROPVARIANT
{
  $3F46030E103A3C087A652D3FC886C603 ___u0;
};

/* 5071 */
struct __cppobj IEnumSTATPROPSTG : IUnknown
{
};

/* 5072 */
struct tagSTATPROPSETSTG
{
  _GUID fmtid;
  _GUID clsid;
  unsigned int grfFlags;
  _FILETIME mtime;
  _FILETIME ctime;
  _FILETIME atime;
  unsigned int dwOSVersion;
};

/* 5073 */
struct tagPDW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  HDC__ *hDC;
  unsigned int Flags;
  unsigned __int16 nFromPage;
  unsigned __int16 nToPage;
  unsigned __int16 nMinPage;
  unsigned __int16 nMaxPage;
  unsigned __int16 nCopies;
  HINSTANCE__ *hInstance;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnPrintHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  unsigned __int64 (__cdecl *lpfnSetupHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const wchar_t *lpPrintTemplateName;
  const wchar_t *lpSetupTemplateName;
  void *hPrintTemplate;
  void *hSetupTemplate;
};

/* 5074 */
struct IMAGE_LOAD_CONFIG_DIRECTORY32
{
  unsigned int Size;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned int DeCommitFreeBlockThreshold;
  unsigned int DeCommitTotalFreeThreshold;
  unsigned int LockPrefixTable;
  unsigned int MaximumAllocationSize;
  unsigned int VirtualMemoryThreshold;
  unsigned int ProcessHeapFlags;
  unsigned int ProcessAffinityMask;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned int EditList;
  unsigned int SecurityCookie;
  unsigned int SEHandlerTable;
  unsigned int SEHandlerCount;
};

/* 5075 */
struct _TRIVERTEX
{
  int x;
  int y;
  unsigned __int16 Red;
  unsigned __int16 Green;
  unsigned __int16 Blue;
  unsigned __int16 Alpha;
};

/* 5076 */
struct _ACCESS_DENIED_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 5077 */
struct __declspec(align(8)) _MEMORY_BASIC_INFORMATION
{
  void *BaseAddress;
  void *AllocationBase;
  unsigned int AllocationProtect;
  unsigned __int64 RegionSize;
  unsigned int State;
  unsigned int Protect;
  unsigned int Type;
};

/* 5078 */
struct $63D8AC276564BEA69DF63EBD86FDB811
{
  unsigned __int32 friendlyNameFromEdid : 1;
  unsigned __int32 friendlyNameForced : 1;
  unsigned __int32 edidIdsValid : 1;
  unsigned __int32 reserved : 29;
};

/* 5079 */
union $2E18F6B7E9296C0629ABC192F9D34A14
{
  $63D8AC276564BEA69DF63EBD86FDB811 __s0;
  unsigned int value;
};

/* 5080 */
struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
  $2E18F6B7E9296C0629ABC192F9D34A14 ___u0;
};

/* 5081 */
struct __declspec(align(4)) tagTEXTMETRICW
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  wchar_t tmFirstChar;
  wchar_t tmLastChar;
  wchar_t tmDefaultChar;
  wchar_t tmBreakChar;
  char tmItalic;
  char tmUnderlined;
  char tmStruckOut;
  char tmPitchAndFamily;
  char tmCharSet;
};

/* 5082 */
struct _OUTLINETEXTMETRICW
{
  unsigned int otmSize;
  tagTEXTMETRICW otmTextMetrics;
  char otmFiller;
  tagPANOSE otmPanoseNumber;
  unsigned int otmfsSelection;
  unsigned int otmfsType;
  int otmsCharSlopeRise;
  int otmsCharSlopeRun;
  int otmItalicAngle;
  unsigned int otmEMSquare;
  int otmAscent;
  int otmDescent;
  unsigned int otmLineGap;
  unsigned int otmsCapEmHeight;
  unsigned int otmsXHeight;
  tagRECT otmrcFontBox;
  int otmMacAscent;
  int otmMacDescent;
  unsigned int otmMacLineGap;
  unsigned int otmusMinimumPPEM;
  tagPOINT otmptSubscriptSize;
  tagPOINT otmptSubscriptOffset;
  tagPOINT otmptSuperscriptSize;
  tagPOINT otmptSuperscriptOffset;
  unsigned int otmsStrikeoutSize;
  int otmsStrikeoutPosition;
  int otmsUnderscoreSize;
  int otmsUnderscorePosition;
  char *otmpFamilyName;
  char *otmpFaceName;
  char *otmpStyleName;
  char *otmpFullName;
};

/* 5083 */
struct _CERT_CRL_CONTEXT_PAIR
{
  _CERT_CONTEXT *pCertContext;
  _CRL_CONTEXT *pCrlContext;
};

/* 5084 */
struct __declspec(align(4)) tagRemHPALETTE
{
  unsigned int cbData;
  char data[1];
};

/* 5085 */
struct _FSCTL_OFFLOAD_READ_OUTPUT
{
  unsigned int Size;
  unsigned int Flags;
  unsigned __int64 TransferLength;
  char Token[512];
};

/* 5086 */
struct __declspec(align(8)) _DOCINFOA
{
  int cbSize;
  const char *lpszDocName;
  const char *lpszOutput;
  const char *lpszDatatype;
  unsigned int fwType;
};

/* 5087 */
struct MENUITEMTEMPLATEHEADER
{
  unsigned __int16 versionNumber;
  unsigned __int16 offset;
};

/* 5088 */
struct HDDEDATA__
{
  int unused;
};

/* 5089 */
struct _BCRYPT_INTERFACE_VERSION
{
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
};

/* 5090 */
struct _DRIVER_INFO_6W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  wchar_t *pHelpFile;
  wchar_t *pDependentFiles;
  wchar_t *pMonitorName;
  wchar_t *pDefaultDataType;
  wchar_t *pszzPreviousNames;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  wchar_t *pszMfgName;
  wchar_t *pszOEMUrl;
  wchar_t *pszHardwareID;
  wchar_t *pszProvider;
};

/* 5091 */
struct ipv6_mreq
{
  in6_addr ipv6mr_multiaddr;
  unsigned int ipv6mr_interface;
};

/* 5092 */
struct _SYSTEM_AUDIT_CALLBACK_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 5093 */
struct _IMAGE_OPTIONAL_HEADER
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned int BaseOfData;
  unsigned int ImageBase;
  unsigned int SectionAlignment;
  unsigned int FileAlignment;
  unsigned __int16 MajorOperatingSystemVersion;
  unsigned __int16 MinorOperatingSystemVersion;
  unsigned __int16 MajorImageVersion;
  unsigned __int16 MinorImageVersion;
  unsigned __int16 MajorSubsystemVersion;
  unsigned __int16 MinorSubsystemVersion;
  unsigned int Win32VersionValue;
  unsigned int SizeOfImage;
  unsigned int SizeOfHeaders;
  unsigned int CheckSum;
  unsigned __int16 Subsystem;
  unsigned __int16 DllCharacteristics;
  unsigned int SizeOfStackReserve;
  unsigned int SizeOfStackCommit;
  unsigned int SizeOfHeapReserve;
  unsigned int SizeOfHeapCommit;
  unsigned int LoaderFlags;
  unsigned int NumberOfRvaAndSizes;
  _IMAGE_DATA_DIRECTORY DataDirectory[16];
};

/* 5094 */
struct __declspec(align(8)) _ACTIVATION_CONTEXT_BASIC_INFORMATION
{
  void *hActCtx;
  unsigned int dwFlags;
};

/* 5095 */
struct HTOUCHINPUT__
{
  int unused;
};

/* 5096 */
struct _RPC_SECURITY_QOS
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
};

/* 5097 */
struct _RPC_BINDING_HANDLE_SECURITY_V1_W
{
  unsigned int Version;
  unsigned __int16 *ServerPrincName;
  unsigned int AuthnLevel;
  unsigned int AuthnSvc;
  _SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
  _RPC_SECURITY_QOS *SecurityQos;
};

/* 5098 */
struct _PARTITION_INFORMATION_MBR
{
  char PartitionType;
  char BootIndicator;
  char RecognizedPartition;
  unsigned int HiddenSectors;
};

/* 5099 */
struct _PARTITION_INFORMATION_GPT
{
  _GUID PartitionType;
  _GUID PartitionId;
  unsigned __int64 Attributes;
  wchar_t Name[36];
};

/* 5100 */
union $C86997DDCD4CBA513A1CBCF8486790EE
{
  _PARTITION_INFORMATION_MBR Mbr;
  _PARTITION_INFORMATION_GPT Gpt;
};

/* 5101 */
struct _PARTITION_INFORMATION_EX
{
  _PARTITION_STYLE PartitionStyle;
  _LARGE_INTEGER StartingOffset;
  _LARGE_INTEGER PartitionLength;
  unsigned int PartitionNumber;
  char RewritePartition;
  $C86997DDCD4CBA513A1CBCF8486790EE ___u5;
};

/* 5102 */
struct __declspec(align(4)) _FLAGGED_WORD_BLOB
{
  unsigned int fFlags;
  unsigned int clSize;
  unsigned __int16 asData[1];
};

/* 5103 */
struct _DEVICEDUMP_STRUCTURE_VERSION
{
  unsigned int dwSignature;
  unsigned int dwVersion;
  unsigned int dwSize;
};

/* 5104 */
struct _CHANGER_ELEMENT_LIST
{
  _CHANGER_ELEMENT Element;
  unsigned int NumberOfElements;
};

/* 5105 */
struct __declspec(align(4)) _CHANGER_READ_ELEMENT_STATUS
{
  _CHANGER_ELEMENT_LIST ElementList;
  char VolumeTagInfo;
};

/* 5106 */
struct _DECRYPTION_STATUS_BUFFER
{
  char NoEncryptedStreams;
};

/* 5107 */
struct __cppobj IUrlMon : IUnknown
{
};

/* 5108 */
struct BITMAPV4HEADER
{
  unsigned int bV4Size;
  int bV4Width;
  int bV4Height;
  unsigned __int16 bV4Planes;
  unsigned __int16 bV4BitCount;
  unsigned int bV4V4Compression;
  unsigned int bV4SizeImage;
  int bV4XPelsPerMeter;
  int bV4YPelsPerMeter;
  unsigned int bV4ClrUsed;
  unsigned int bV4ClrImportant;
  unsigned int bV4RedMask;
  unsigned int bV4GreenMask;
  unsigned int bV4BlueMask;
  unsigned int bV4AlphaMask;
  unsigned int bV4CSType;
  tagICEXYZTRIPLE bV4Endpoints;
  unsigned int bV4GammaRed;
  unsigned int bV4GammaGreen;
  unsigned int bV4GammaBlue;
};

/* 5109 */
struct _BLENDFUNCTION
{
  char BlendOp;
  char BlendFlags;
  char SourceConstantAlpha;
  char AlphaFormat;
};

/* 5110 */
struct _RPC_PROTSEQ_VECTORW
{
  unsigned int Count;
  unsigned __int16 *Protseq[1];
};

/* 5111 */
struct _PUBKEY
{
  unsigned int magic;
  unsigned int bitlen;
};

/* 5112 */
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  void *pvKeyEncryptionAuxInfo;
  unsigned __int64 hCryptProv;
  _CRYPT_BIT_BLOB RecipientPublicKey;
  _CERT_ID RecipientId;
};

/* 5113 */
union $E0A9953423B40E5DC50A9E8FAAE68DC6
{
  _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *pKeyTrans;
  _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *pKeyAgree;
  _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *pMailList;
};

/* 5114 */
struct _CMSG_RECIPIENT_ENCODE_INFO
{
  unsigned int dwRecipientChoice;
  $E0A9953423B40E5DC50A9E8FAAE68DC6 ___u1;
};

/* 5115 */
union $29E7AFE46382F21EE8FA988164F75458
{
  unsigned __int64 hContentEncryptKey;
  void *hCNGContentEncryptKey;
};

/* 5116 */
struct __declspec(align(8)) _CMSG_CONTENT_ENCRYPT_INFO
{
  unsigned int cbSize;
  unsigned __int64 hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *pvEncryptionAuxInfo;
  unsigned int cRecipients;
  _CMSG_RECIPIENT_ENCODE_INFO *rgCmsRecipients;
  void *(__cdecl *pfnAlloc)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
  unsigned int dwEncryptFlags;
  $29E7AFE46382F21EE8FA988164F75458 ___u9;
  unsigned int dwFlags;
  int fCNG;
  char *pbCNGContentEncryptKeyObject;
  char *pbContentEncryptKey;
  unsigned int cbContentEncryptKey;
};

/* 5117 */
struct __cppobj IPSFactoryBuffer : IUnknown
{
};

/* 5118 */
struct __cppobj IRpcProxyBuffer : IUnknown
{
};

/* 5119 */
struct __cppobj IRpcStubBuffer : IUnknown
{
};

/* 5120 */
struct __cppobj IInternetProtocolSink : IUnknown
{
};

/* 5121 */
struct tagGESTURECONFIG
{
  unsigned int dwID;
  unsigned int dwWant;
  unsigned int dwBlock;
};

/* 5122 */
struct _FILEMUIINFO
{
  unsigned int dwSize;
  unsigned int dwVersion;
  unsigned int dwFileType;
  char pChecksum[16];
  char pServiceChecksum[16];
  unsigned int dwLanguageNameOffset;
  unsigned int dwTypeIDMainSize;
  unsigned int dwTypeIDMainOffset;
  unsigned int dwTypeNameMainOffset;
  unsigned int dwTypeIDMUISize;
  unsigned int dwTypeIDMUIOffset;
  unsigned int dwTypeNameMUIOffset;
  char abBuffer[8];
};

/* 5123 */
struct _SD_CHANGE_MACHINE_SID_INPUT
{
  unsigned __int16 CurrentMachineSIDOffset;
  unsigned __int16 CurrentMachineSIDLength;
  unsigned __int16 NewMachineSIDOffset;
  unsigned __int16 NewMachineSIDLength;
};

/* 5124 */
struct __cppobj IXMLElement2 : IDispatch
{
};

/* 5125 */
struct __cppobj IXMLElementCollection : IDispatch
{
};

/* 5126 */
struct _TRANSACTION_BIND_INFORMATION
{
  void *TmHandle;
};

/* 5127 */
struct _SHFILEOPSTRUCTW
{
  HWND__ *hwnd;
  unsigned int wFunc;
  const wchar_t *pFrom;
  const wchar_t *pTo;
  unsigned __int16 fFlags;
  int fAnyOperationsAborted;
  void *hNameMappings;
  const wchar_t *lpszProgressTitle;
};

/* 5128 */
struct HUMPD__
{
  int unused;
};

/* 5129 */
struct _CERT_PRIVATE_KEY_VALIDITY
{
  _FILETIME NotBefore;
  _FILETIME NotAfter;
};

/* 5130 */
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
{
  unsigned int cbSize;
  _CRYPTOAPI_BLOB EncryptedKey;
};

/* 5131 */
struct __declspec(align(8)) _CMSG_KEY_AGREE_ENCRYPT_INFO
{
  unsigned int cbSize;
  unsigned int dwRecipientIndex;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB UserKeyingMaterial;
  unsigned int dwOriginatorChoice;
  $B7075A1E500382C072E0E8E43F08E19E ___u5;
  unsigned int cKeyAgreeKeyEncryptInfo;
  _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO **rgpKeyAgreeKeyEncryptInfo;
  unsigned int dwFlags;
};

/* 5132 */
struct __declspec(align(8)) tagRPCOLEMESSAGE
{
  void *reserved1;
  unsigned int dataRepresentation;
  void *Buffer;
  unsigned int cbBuffer;
  unsigned int iMethod;
  void *reserved2[5];
  unsigned int rpcFlags;
};

/* 5133 */
struct _FILE_SET_SPARSE_BUFFER
{
  char SetSparse;
};

/* 5134 */
struct _PROVIDOR_INFO_2W
{
  wchar_t *pOrder;
};

/* 5135 */
struct in6_pktinfo
{
  in6_addr ipi6_addr;
  unsigned int ipi6_ifindex;
};

/* 5136 */
struct _NETRESOURCEA
{
  unsigned int dwScope;
  unsigned int dwType;
  unsigned int dwDisplayType;
  unsigned int dwUsage;
  char *lpLocalName;
  char *lpRemoteName;
  char *lpComment;
  char *lpProvider;
};

/* 5137 */
struct _KEY_TYPE_SUBTYPE
{
  unsigned int dwKeySpec;
  _GUID Type;
  _GUID Subtype;
};

/* 5138 */
struct $3C5B0C4720CCBBB9E7E48366D9C24C6E
{
  unsigned int dwReserved;
};

/* 5139 */
struct $DA82A06F493A41ACDA13BE67667DF5BB
{
  unsigned int dwAtaPortSpecific;
};

/* 5140 */
struct $E4B5DF6E5325D9336A442CAD4D7DA3DA
{
  unsigned int SrbTag;
};

/* 5141 */
union $87CCDFA386D918E99E5CD76C868BFFD2
{
  $3C5B0C4720CCBBB9E7E48366D9C24C6E ExternalStack;
  $DA82A06F493A41ACDA13BE67667DF5BB AtaPort;
  $E4B5DF6E5325D9336A442CAD4D7DA3DA StorPort;
};

/* 5142 */
struct __unaligned __declspec(align(4)) _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
{
  char Cdb[16];
  char Command[16];
  unsigned __int64 StartTime;
  unsigned __int64 EndTime;
  unsigned int OperationStatus;
  unsigned int OperationError;
  $87CCDFA386D918E99E5CD76C868BFFD2 StackSpecific;
};

/* 5143 */
struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
{
  _DEVICEDUMP_STRUCTURE_VERSION Descriptor;
  unsigned int dwReasonForCollection;
  char cDriverName[16];
  unsigned int uiNumRecords;
  _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];
};

/* 5144 */
struct __cppobj IProcessInitControl : IUnknown
{
};

/* 5145 */
struct _STARTUPINFOEXW
{
  _STARTUPINFOW StartupInfo;
  _PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList;
};

/* 5146 */
struct tagEMRCREATEDIBPATTERNBRUSHPT
{
  tagEMR emr;
  unsigned int ihBrush;
  unsigned int iUsage;
  unsigned int offBmi;
  unsigned int cbBmi;
  unsigned int offBits;
  unsigned int cbBits;
};

/* 5147 */
struct tagAUXCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 5148 */
struct _CHANGER_ELEMENT_STATUS_EX
{
  _CHANGER_ELEMENT Element;
  _CHANGER_ELEMENT SrcElementAddress;
  unsigned int Flags;
  unsigned int ExceptionCode;
  char TargetId;
  char Lun;
  unsigned __int16 Reserved;
  char PrimaryVolumeID[36];
  char AlternateVolumeID[36];
  char VendorIdentification[8];
  char ProductIdentification[16];
  char SerialNumber[32];
};

/* 5149 */
struct __declspec(align(4)) tagRemSTGMEDIUM
{
  unsigned int tymed;
  unsigned int dwHandleType;
  unsigned int pData;
  unsigned int pUnkForRelease;
  unsigned int cbData;
  char data[1];
};

/* 5150 */
struct SC_HANDLE__
{
  int unused;
};

/* 5151 */
struct _KTMOBJECT_CURSOR
{
  _GUID LastQuery;
  unsigned int ObjectIdCount;
  _GUID ObjectIds[1];
};

/* 5152 */
struct tagPOINTS
{
  __int16 x;
  __int16 y;
};

/* 5153 */
struct tagMOUSEINPUT
{
  int dx;
  int dy;
  unsigned int mouseData;
  unsigned int dwFlags;
  unsigned int time;
  unsigned __int64 dwExtraInfo;
};

/* 5154 */
struct tagKEYBDINPUT
{
  unsigned __int16 wVk;
  unsigned __int16 wScan;
  unsigned int dwFlags;
  unsigned int time;
  unsigned __int64 dwExtraInfo;
};

/* 5155 */
struct tagHARDWAREINPUT
{
  unsigned int uMsg;
  unsigned __int16 wParamL;
  unsigned __int16 wParamH;
};

/* 5156 */
union $8A5C52D4FF6434EC32D874DF971F8D73
{
  tagMOUSEINPUT mi;
  tagKEYBDINPUT ki;
  tagHARDWAREINPUT hi;
};

/* 5157 */
struct tagINPUT
{
  unsigned int type;
  $8A5C52D4FF6434EC32D874DF971F8D73 ___u1;
};

/* 5158 */
struct _RPC_PROTSEQ_ENDPOINT
{
  char *RpcProtocolSequence;
  char *Endpoint;
};

/* 5159 */
struct _DEVICE_DSM_NOTIFICATION_PARAMETERS
{
  unsigned int Size;
  unsigned int Flags;
  unsigned int NumFileTypeIDs;
  _GUID FileTypeID[1];
};

/* 5160 */
struct __declspec(align(8)) _DRIVER_INFO_5W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  unsigned int dwDriverAttributes;
  unsigned int dwConfigVersion;
  unsigned int dwDriverVersion;
};

/* 5161 */
struct __cppobj IPersistMoniker : IUnknown
{
};

/* 5162 */
struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
  unsigned __int16 score;
  tagPOINT adjustedPoint;
};

/* 5163 */
struct __cppobj IBindCallbackRedirect : IUnknown
{
};

/* 5164 */
struct _KCRM_PROTOCOL_BLOB
{
  _GUID ProtocolId;
  unsigned int StaticInfoLength;
  unsigned int TransactionIdInfoLength;
  unsigned int Unused1;
  unsigned int Unused2;
};

/* 5165 */
struct _CRYPT_AES_128_KEY_STATE
{
  char Key[16];
  char IV[16];
  char EncryptionState[11][16];
  char DecryptionState[11][16];
  char Feedback[16];
};

/* 5166 */
union $225C3330B498D83575F3FA759E68D0AA
{
  _SET_PARTITION_INFORMATION Mbr;
  _PARTITION_INFORMATION_GPT Gpt;
};

/* 5167 */
struct _SET_PARTITION_INFORMATION_EX
{
  _PARTITION_STYLE PartitionStyle;
  $225C3330B498D83575F3FA759E68D0AA ___u1;
};

/* 5168 */
struct _FILE_LEVEL_TRIM_OUTPUT
{
  unsigned int NumRangesProcessed;
};

/* 5169 */
struct READER_SEL_RESPONSE
{
  unsigned int cbReaderNameOffset;
  unsigned int cchReaderNameLength;
  unsigned int cbCardNameOffset;
  unsigned int cchCardNameLength;
};

/* 5170 */
struct _POWER_SESSION_CONNECT
{
  char Connected;
  char Console;
};

/* 5171 */
struct tagPOINTFX
{
  _FIXED x;
  _FIXED y;
};

/* 5172 */
struct _PROV_ENUMALGS_EX
{
  unsigned int aiAlgid;
  unsigned int dwDefaultLen;
  unsigned int dwMinLen;
  unsigned int dwMaxLen;
  unsigned int dwProtocols;
  unsigned int dwNameLen;
  char szName[20];
  unsigned int dwLongNameLen;
  char szLongName[40];
};

/* 5173 */
struct __declspec(align(8)) _CERT_X942_DH_VALIDATION_PARAMS
{
  _CRYPT_BIT_BLOB seed;
  unsigned int pgenCounter;
};

/* 5174 */
struct _CERT_X942_DH_PARAMETERS
{
  _CRYPTOAPI_BLOB p;
  _CRYPTOAPI_BLOB g;
  _CRYPTOAPI_BLOB q;
  _CRYPTOAPI_BLOB j;
  _CERT_X942_DH_VALIDATION_PARAMS *pValidationParams;
};

/* 5175 */
struct __cppobj IOleWindow : IUnknown
{
};

/* 5176 */
struct __cppobj IOleInPlaceActiveObject : IOleWindow
{
};

/* 5177 */
struct __cppobj IOleInPlaceUIWindow : IOleWindow
{
};

/* 5178 */
struct ip_mreq_source
{
  in_addr imr_multiaddr;
  in_addr imr_sourceaddr;
  in_addr imr_interface;
};

/* 5179 */
struct PPM_WMI_PERF_STATE
{
  unsigned int Frequency;
  unsigned int Power;
  char PercentFrequency;
  char IncreaseLevel;
  char DecreaseLevel;
  char Type;
  unsigned int IncreaseTime;
  unsigned int DecreaseTime;
  unsigned __int64 Control;
  unsigned __int64 Status;
  unsigned int HitCount;
  unsigned int Reserved1;
  unsigned __int64 Reserved2;
  unsigned __int64 Reserved3;
};

/* 5180 */
struct PPM_WMI_PERF_STATES_EX
{
  unsigned int Count;
  unsigned int MaxFrequency;
  unsigned int CurrentState;
  unsigned int MaxPerfState;
  unsigned int MinPerfState;
  unsigned int LowestPerfState;
  unsigned int ThermalConstraint;
  char BusyAdjThreshold;
  char PolicyType;
  char Type;
  char Reserved;
  unsigned int TimerInterval;
  void *TargetProcessors;
  unsigned int PStateHandler;
  unsigned int PStateContext;
  unsigned int TStateHandler;
  unsigned int TStateContext;
  unsigned int FeedbackHandler;
  unsigned int Reserved1;
  unsigned __int64 Reserved2;
  PPM_WMI_PERF_STATE State[1];
};

/* 5181 */
struct __declspec(align(4)) _COMMPROP
{
  unsigned __int16 wPacketLength;
  unsigned __int16 wPacketVersion;
  unsigned int dwServiceMask;
  unsigned int dwReserved1;
  unsigned int dwMaxTxQueue;
  unsigned int dwMaxRxQueue;
  unsigned int dwMaxBaud;
  unsigned int dwProvSubType;
  unsigned int dwProvCapabilities;
  unsigned int dwSettableParams;
  unsigned int dwSettableBaud;
  unsigned __int16 wSettableData;
  unsigned __int16 wSettableStopParity;
  unsigned int dwCurrentTxQueue;
  unsigned int dwCurrentRxQueue;
  unsigned int dwProvSpec1;
  unsigned int dwProvSpec2;
  wchar_t wcProvChar[1];
};

/* 5182 */
struct tagGUITHREADINFO
{
  unsigned int cbSize;
  unsigned int flags;
  HWND__ *hwndActive;
  HWND__ *hwndFocus;
  HWND__ *hwndCapture;
  HWND__ *hwndMenuOwner;
  HWND__ *hwndMoveSize;
  HWND__ *hwndCaret;
  tagRECT rcCaret;
};

/* 5183 */
struct __declspec(align(4)) _CHANGER_INITIALIZE_ELEMENT_STATUS
{
  _CHANGER_ELEMENT_LIST ElementList;
  char BarCodeScan;
};

/* 5184 */
struct __declspec(align(8)) _PRINTER_ENUM_VALUESW
{
  wchar_t *pValueName;
  unsigned int cbValueName;
  unsigned int dwType;
  char *pData;
  unsigned int cbData;
};

/* 5185 */
struct _KCRM_TRANSACTION_BLOB
{
  _GUID UOW;
  _GUID TmIdentity;
  unsigned int IsolationLevel;
  unsigned int IsolationFlags;
  unsigned int Timeout;
  wchar_t Description[64];
};

/* 5186 */
struct _WIN32_MEMORY_RANGE_ENTRY
{
  void *VirtualAddress;
  unsigned __int64 NumberOfBytes;
};

/* 5187 */
struct tagEXTLOGPEN32
{
  unsigned int elpPenStyle;
  unsigned int elpWidth;
  unsigned int elpBrushStyle;
  unsigned int elpColor;
  unsigned int elpHatch;
  unsigned int elpNumEntries;
  unsigned int elpStyleEntry[1];
};

/* 5188 */
struct __declspec(align(8)) tagPAINTSTRUCT
{
  HDC__ *hdc;
  int fErase;
  tagRECT rcPaint;
  int fRestore;
  int fIncUpdate;
  char rgbReserved[32];
};

/* 5189 */
struct __declspec(align(8)) _DISCDLGSTRUCTA
{
  unsigned int cbStructure;
  HWND__ *hwndOwner;
  char *lpLocalName;
  char *lpRemoteName;
  unsigned int dwFlags;
};

/* 5190 */
struct _QUERY_SERVICE_CONFIGW
{
  unsigned int dwServiceType;
  unsigned int dwStartType;
  unsigned int dwErrorControl;
  wchar_t *lpBinaryPathName;
  wchar_t *lpLoadOrderGroup;
  unsigned int dwTagId;
  wchar_t *lpDependencies;
  wchar_t *lpServiceStartName;
  wchar_t *lpDisplayName;
};

/* 5191 */
struct __cppobj IWinInetCacheHints : IUnknown
{
};

/* 5192 */
struct _SINGLE_LIST_ENTRY
{
  _SINGLE_LIST_ENTRY *Next;
};

/* 5193 */
struct _SCOPE_TABLE_AMD64
{
  unsigned int Count;
  $0C2FFF853753AF47D3E2EB2FEEFA0C96 ScopeRecord[1];
};

/* 5194 */
struct _SYSTEM_ALARM_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 5195 */
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 5196 */
struct tagWNDCLASSEXW
{
  unsigned int cbSize;
  unsigned int style;
  __int64 (__cdecl *lpfnWndProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const wchar_t *lpszMenuName;
  const wchar_t *lpszClassName;
  HICON__ *hIconSm;
};

/* 5197 */
struct tagMONITORINFO
{
  unsigned int cbSize;
  tagRECT rcMonitor;
  tagRECT rcWork;
  unsigned int dwFlags;
};

/* 5198 */
struct __cppobj tagMONITORINFOEXA : tagMONITORINFO
{
  char szDevice[32];
};

/* 5199 */
struct _STARTUPINFOEXA
{
  _STARTUPINFOA StartupInfo;
  _PROC_THREAD_ATTRIBUTE_LIST *lpAttributeList;
};

/* 5200 */
struct _NAME_BUFFER
{
  char name[16];
  char name_num;
  char name_flags;
};

/* 5201 */
struct _CMSG_ENCRYPTED_ENCODE_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *pvEncryptionAuxInfo;
};

/* 5202 */
struct __declspec(align(8)) _PARTITION_INFORMATION
{
  _LARGE_INTEGER StartingOffset;
  _LARGE_INTEGER PartitionLength;
  unsigned int HiddenSectors;
  unsigned int PartitionNumber;
  char PartitionType;
  char BootIndicator;
  char RecognizedPartition;
  char RewritePartition;
};

/* 5203 */
struct __declspec(align(8)) MFT_ENUM_DATA_V1
{
  unsigned __int64 StartFileReferenceNumber;
  __int64 LowUsn;
  __int64 HighUsn;
  unsigned __int16 MinMajorVersion;
  unsigned __int16 MaxMajorVersion;
};

/* 5204 */
struct _DOC_INFO_1A
{
  char *pDocName;
  char *pOutputFile;
  char *pDatatype;
};

/* 5205 */
struct __declspec(align(8)) tagEXCEPINFO
{
  unsigned __int16 wCode;
  unsigned __int16 wReserved;
  wchar_t *bstrSource;
  wchar_t *bstrDescription;
  wchar_t *bstrHelpFile;
  unsigned int dwHelpContext;
  void *pvReserved;
  HRESULT (__cdecl *pfnDeferredFillIn)(tagEXCEPINFO *);
  int scode;
};

/* 5206 */
struct $013671E5920392F7B68C675C97F9F7D8
{
  unsigned __int32 Zone : 28;
  unsigned __int32 Level : 4;
};

/* 5207 */
union $5F046E86757DD051806091ADF7944EC6
{
  $013671E5920392F7B68C675C97F9F7D8 __s0;
  unsigned int Value;
};

/* 5208 */
struct SCOPE_ID
{
  $5F046E86757DD051806091ADF7944EC6 ___u0;
};

/* 5209 */
union $D00C92105ABE2D4F8FC331577923E9CE
{
  unsigned int sin6_scope_id;
  SCOPE_ID sin6_scope_struct;
};

/* 5210 */
struct sockaddr_in6
{
  unsigned __int16 sin6_family;
  unsigned __int16 sin6_port;
  unsigned int sin6_flowinfo;
  in6_addr sin6_addr;
  $D00C92105ABE2D4F8FC331577923E9CE ___u4;
};

/* 5211 */
struct _sockaddr_in6_pair
{
  sockaddr_in6 *SourceAddress;
  sockaddr_in6 *DestinationAddress;
};

/* 5212 */
struct __declspec(align(4)) tagEMRINVERTRGN
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cbRgnData;
  char RgnData[1];
};

/* 5213 */
struct _BCRYPT_OID
{
  unsigned int cbOID;
  char *pbOID;
};

/* 5214 */
struct _BCRYPT_OID_LIST
{
  unsigned int dwOIDCount;
  _BCRYPT_OID *pOIDs;
};

/* 5215 */
struct _WSANAMESPACE_INFOEXW
{
  _GUID NSProviderId;
  unsigned int dwNameSpace;
  int fActive;
  unsigned int dwVersion;
  wchar_t *lpszIdentifier;
  tagBLOB ProviderSpecific;
};

/* 5216 */
struct tagMCI_VD_ESCAPE_PARMSW
{
  unsigned __int64 dwCallback;
  const wchar_t *lpstrCommand;
};

/* 5217 */
struct __declspec(align(4)) _MODEMSETTINGS
{
  unsigned int dwActualSize;
  unsigned int dwRequiredSize;
  unsigned int dwDevSpecificOffset;
  unsigned int dwDevSpecificSize;
  unsigned int dwCallSetupFailTimer;
  unsigned int dwInactivityTimeout;
  unsigned int dwSpeakerVolume;
  unsigned int dwSpeakerMode;
  unsigned int dwPreferredModemOptions;
  unsigned int dwNegotiatedModemOptions;
  unsigned int dwNegotiatedDCERate;
  char abVariablePortion[1];
};

/* 5218 */
struct _OCSP_BASIC_REVOKED_INFO
{
  _FILETIME RevocationDate;
  unsigned int dwCrlReasonCode;
};

/* 5219 */
struct __declspec(align(8)) _LOOKUP_STREAM_FROM_CLUSTER_ENTRY
{
  unsigned int OffsetToNext;
  unsigned int Flags;
  _LARGE_INTEGER Reserved;
  _LARGE_INTEGER Cluster;
  wchar_t FileName[1];
};

/* 5220 */
struct _DRIVER_INFO_4W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  wchar_t *pHelpFile;
  wchar_t *pDependentFiles;
  wchar_t *pMonitorName;
  wchar_t *pDefaultDataType;
  wchar_t *pszzPreviousNames;
};

/* 5221 */
struct tagRGBQUAD
{
  char rgbBlue;
  char rgbGreen;
  char rgbRed;
  char rgbReserved;
};

/* 5222 */
struct tagBITMAPINFO
{
  tagBITMAPINFOHEADER bmiHeader;
  tagRGBQUAD bmiColors[1];
};

/* 5223 */
struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT
{
  unsigned int Offset;
  unsigned int NumberOfMatches;
  unsigned int BufferSizeRequired;
};

/* 5224 */
struct tagMIDIOUTCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wVoices;
  unsigned __int16 wNotes;
  unsigned __int16 wChannelMask;
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 5225 */
struct _CERT_REVOCATION_PARA
{
  unsigned int cbSize;
  _CERT_CONTEXT *pIssuerCert;
  unsigned int cCertStore;
  void **rgCertStore;
  void *hCrlStore;
  _FILETIME *pftTimeToUse;
};

/* 5226 */
struct __declspec(align(4)) _DISK_RECORD
{
  _LARGE_INTEGER ByteOffset;
  _LARGE_INTEGER StartTime;
  _LARGE_INTEGER EndTime;
  void *VirtualAddress;
  unsigned int NumberOfBytes;
  char DeviceNumber;
  char ReadRequest;
};

/* 5227 */
struct _CRYPT_DES_KEY_STATE
{
  char Key[8];
  char IV[8];
  char Feedback[8];
};

/* 5228 */
union $4BCA99CF3AFC900CAD02FCA6999AF57A
{
  unsigned __int64 hCryptProv;
  unsigned __int64 hNCryptKey;
};

/* 5229 */
struct _CMSG_CTRL_DECRYPT_PARA
{
  unsigned int cbSize;
  $4BCA99CF3AFC900CAD02FCA6999AF57A ___u1;
  unsigned int dwKeySpec;
  unsigned int dwRecipientIndex;
};

/* 5230 */
struct _IMAGE_ROM_OPTIONAL_HEADER
{
  unsigned __int16 Magic;
  char MajorLinkerVersion;
  char MinorLinkerVersion;
  unsigned int SizeOfCode;
  unsigned int SizeOfInitializedData;
  unsigned int SizeOfUninitializedData;
  unsigned int AddressOfEntryPoint;
  unsigned int BaseOfCode;
  unsigned int BaseOfData;
  unsigned int BaseOfBss;
  unsigned int GprMask;
  unsigned int CprMask[4];
  unsigned int GpValue;
};

/* 5231 */
struct _IMAGE_ROM_HEADERS
{
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
};

/* 5232 */
struct tagSCROLLBARINFO
{
  unsigned int cbSize;
  tagRECT rcScrollBar;
  int dxyLineButton;
  int xyThumbTop;
  int xyThumbBottom;
  int reserved;
  unsigned int rgstate[6];
};

/* 5233 */
struct tagMCI_WAVE_SET_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwTimeFormat;
  unsigned int dwAudio;
  unsigned int wInput;
  unsigned int wOutput;
  unsigned __int16 wFormatTag;
  unsigned __int16 wReserved2;
  unsigned __int16 nChannels;
  unsigned __int16 wReserved3;
  unsigned int nSamplesPerSec;
  unsigned int nAvgBytesPerSec;
  unsigned __int16 nBlockAlign;
  unsigned __int16 wReserved4;
  unsigned __int16 wBitsPerSample;
  unsigned __int16 wReserved5;
};

/* 5234 */
struct tagMIDIINCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwSupport;
};

/* 5235 */
struct _HISTOGRAM_BUCKET
{
  unsigned int Reads;
  unsigned int Writes;
};

/* 5236 */
struct __declspec(align(8)) pollfd
{
  unsigned __int64 fd;
  __int16 events;
  __int16 revents;
};

/* 5237 */
struct $BCD5979DB57D6BCF3659E87529701EC7
{
  _M128A *Xmm0;
  _M128A *Xmm1;
  _M128A *Xmm2;
  _M128A *Xmm3;
  _M128A *Xmm4;
  _M128A *Xmm5;
  _M128A *Xmm6;
  _M128A *Xmm7;
  _M128A *Xmm8;
  _M128A *Xmm9;
  _M128A *Xmm10;
  _M128A *Xmm11;
  _M128A *Xmm12;
  _M128A *Xmm13;
  _M128A *Xmm14;
  _M128A *Xmm15;
};

/* 5238 */
union $0EDC55F11137F0101EDC48A78C725B40
{
  _M128A *FloatingContext[16];
  $BCD5979DB57D6BCF3659E87529701EC7 __s1;
};

/* 5239 */
struct $B880F4003ED9CFDEA03B4A50C2D0D35E
{
  unsigned __int64 *Rax;
  unsigned __int64 *Rcx;
  unsigned __int64 *Rdx;
  unsigned __int64 *Rbx;
  unsigned __int64 *Rsp;
  unsigned __int64 *Rbp;
  unsigned __int64 *Rsi;
  unsigned __int64 *Rdi;
  unsigned __int64 *R8;
  unsigned __int64 *R9;
  unsigned __int64 *R10;
  unsigned __int64 *R11;
  unsigned __int64 *R12;
  unsigned __int64 *R13;
  unsigned __int64 *R14;
  unsigned __int64 *R15;
};

/* 5240 */
union $542EDF5B004AB19EAE57C5FCDB52713D
{
  unsigned __int64 *IntegerContext[16];
  $B880F4003ED9CFDEA03B4A50C2D0D35E __s1;
};

/* 5241 */
struct _KNONVOLATILE_CONTEXT_POINTERS
{
  $0EDC55F11137F0101EDC48A78C725B40 ___u0;
  $542EDF5B004AB19EAE57C5FCDB52713D ___u1;
};

/* 5242 */
struct _IMAGE_DEBUG_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int Type;
  unsigned int SizeOfData;
  unsigned int AddressOfRawData;
  unsigned int PointerToRawData;
};

/* 5243 */
struct __declspec(align(8)) pvalueA
{
  char *pv_valuename;
  int pv_valuelen;
  void *pv_value_context;
  unsigned int pv_type;
};

/* 5244 */
union $629CF2513A1A8843486AC3E5E1E2FE60
{
  char *Reserved;
};

/* 5245 */
struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ProtocolSequence;
  char *NetworkAddress;
  char *StringEndpoint;
  $629CF2513A1A8843486AC3E5E1E2FE60 u1;
  _GUID ObjectUuid;
};

/* 5246 */
struct _STORAGE_BUS_RESET_REQUEST
{
  char PathId;
};

/* 5247 */
struct __declspec(align(8)) _PRINTER_INFO_4W
{
  wchar_t *pPrinterName;
  wchar_t *pServerName;
  unsigned int Attributes;
};

/* 5248 */
struct _TOKEN_USER
{
  _SID_AND_ATTRIBUTES User;
};

/* 5249 */
struct tagEMREXTTEXTOUTA
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int iGraphicsMode;
  float exScale;
  float eyScale;
  tagEMRTEXT emrtext;
};

/* 5250 */
struct _CMSG_CMS_SIGNER_INFO
{
  unsigned int dwVersion;
  _CERT_ID SignerId;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedHash;
  _CRYPT_ATTRIBUTES AuthAttrs;
  _CRYPT_ATTRIBUTES UnauthAttrs;
};

/* 5251 */
union $E7BE440C3FA621D41FDDEEAD26FC6069
{
  unsigned int oInst;
  tagVARIANT *lpvarValue;
};

/* 5252 */
struct tagVARDESC
{
  int memid;
  wchar_t *lpstrSchema;
  $E7BE440C3FA621D41FDDEEAD26FC6069 ___u2;
  tagELEMDESC elemdescVar;
  unsigned __int16 wVarFlags;
  tagVARKIND varkind;
};

/* 5253 */
struct __cppobj IPropertySetStorage : IUnknown
{
};

/* 5254 */
struct HCONVLIST__
{
  int unused;
};

/* 5255 */
struct tagCONVINFO
{
  unsigned int cb;
  unsigned __int64 hUser;
  HCONV__ *hConvPartner;
  HSZ__ *hszSvcPartner;
  HSZ__ *hszServiceReq;
  HSZ__ *hszTopic;
  HSZ__ *hszItem;
  unsigned int wFmt;
  unsigned int wType;
  unsigned int wStatus;
  unsigned int wConvst;
  unsigned int wLastError;
  HCONVLIST__ *hConvList;
  tagCONVCONTEXT ConvCtxt;
  HWND__ *hwnd;
  HWND__ *hwndPartner;
};

/* 5256 */
struct _PROPSHEETPAGEW_V2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $B5A51C4AFFF5DDC4103EC1CA2C54B662 ___u3;
  $BEA4071AF47773B46964588E62B2512B ___u4;
  const wchar_t *pszTitle;
  __int64 (__cdecl *pfnDlgProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  __int64 lParam;
  unsigned int (__cdecl *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);
  unsigned int *pcRefParent;
  const wchar_t *pszHeaderTitle;
  const wchar_t *pszHeaderSubTitle;
};

/* 5257 */
struct __cppobj IEnumSTATPROPSETSTG : IUnknown
{
};

/* 5258 */
struct tagEMRANGLEARC
{
  tagEMR emr;
  _POINTL ptlCenter;
  unsigned int nRadius;
  float eStartAngle;
  float eSweepAngle;
};

/* 5259 */
struct __declspec(align(8)) RPC_ENDPOINT_TEMPLATEW
{
  unsigned int Version;
  unsigned __int16 *ProtSeq;
  unsigned __int16 *Endpoint;
  void *SecurityDescriptor;
  unsigned int Backlog;
};

/* 5260 */
struct __declspec(align(4)) _STORAGE_IDENTIFIER
{
  _STORAGE_IDENTIFIER_CODE_SET CodeSet;
  _STORAGE_IDENTIFIER_TYPE Type;
  unsigned __int16 IdentifierSize;
  unsigned __int16 NextOffset;
  _STORAGE_ASSOCIATION_TYPE Association;
  char Identifier[1];
};

/* 5261 */
struct _PROPSHEETPAGEA_V1
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $03E6EEA160A4BF287FB0A80FBB3D7757 ___u3;
  $57038144EE260AFAA32682BDDA1565B6 ___u4;
  const char *pszTitle;
  __int64 (__cdecl *pfnDlgProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  __int64 lParam;
  unsigned int (__cdecl *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);
  unsigned int *pcRefParent;
};

/* 5262 */
struct __cppobj IWrappedProtocol : IUnknown
{
};

/* 5263 */
struct tagCANDIDATEFORM
{
  unsigned int dwIndex;
  unsigned int dwStyle;
  tagPOINT ptCurrentPos;
  tagRECT rcArea;
};

/* 5264 */
struct tagEMRSETARCDIRECTION
{
  tagEMR emr;
  unsigned int iArcDirection;
};

/* 5265 */
struct midihdr_tag
{
  char *lpData;
  unsigned int dwBufferLength;
  unsigned int dwBytesRecorded;
  unsigned __int64 dwUser;
  unsigned int dwFlags;
  __unaligned __declspec(align(1)) midihdr_tag *lpNext;
  __unaligned __declspec(align(1)) unsigned __int64 reserved;
  unsigned int dwOffset;
  unsigned __int64 dwReserved[8];
};

/* 5266 */
struct __declspec(align(8)) _RPC_SECURITY_QOS_V4_W
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  $FE051B784B8BB8B8D4262884B1E07CD3 u;
  void *Sid;
  unsigned int EffectiveOnly;
};

/* 5267 */
struct tagLAYERPLANEDESCRIPTOR
{
  unsigned __int16 nSize;
  unsigned __int16 nVersion;
  unsigned int dwFlags;
  char iPixelType;
  char cColorBits;
  char cRedBits;
  char cRedShift;
  char cGreenBits;
  char cGreenShift;
  char cBlueBits;
  char cBlueShift;
  char cAlphaBits;
  char cAlphaShift;
  char cAccumBits;
  char cAccumRedBits;
  char cAccumGreenBits;
  char cAccumBlueBits;
  char cAccumAlphaBits;
  char cDepthBits;
  char cStencilBits;
  char cAuxBuffers;
  char iLayerPlane;
  char bReserved;
  unsigned int crTransparent;
};

/* 5268 */
struct tagMCI_WAVE_DELETE_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
};

/* 5269 */
struct __declspec(align(8)) _TAPE_SET_POSITION
{
  unsigned int Method;
  unsigned int Partition;
  _LARGE_INTEGER Offset;
  char Immediate;
};

/* 5270 */
struct __declspec(align(8)) _numberfmtW
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  wchar_t *lpDecimalSep;
  wchar_t *lpThousandSep;
  unsigned int NegativeOrder;
};

/* 5271 */
struct _CONNECTDLGSTRUCTA
{
  unsigned int cbStructure;
  HWND__ *hwndOwner;
  _NETRESOURCEA *lpConnRes;
  unsigned int dwFlags;
  unsigned int dwDevNum;
};

/* 5272 */
struct _CRYPT_PASSWORD_CREDENTIALSA
{
  unsigned int cbSize;
  char *pszUsername;
  char *pszPassword;
};

/* 5273 */
struct __cppobj IPersist : IUnknown
{
};

/* 5274 */
struct __cppobj IPersistStream : IPersist
{
};

/* 5275 */
struct __cppobj IMoniker : IPersistStream
{
};

/* 5276 */
struct group_req
{
  unsigned int gr_interface;
  sockaddr_storage gr_group;
};

/* 5277 */
struct _POWER_USER_PRESENCE
{
  POWER_USER_PRESENCE_TYPE UserPresence;
};

/* 5278 */
struct tagRID_DEVICE_INFO_MOUSE
{
  unsigned int dwId;
  unsigned int dwNumberOfButtons;
  unsigned int dwSampleRate;
  int fHasHorizontalWheel;
};

/* 5279 */
struct tagRID_DEVICE_INFO_KEYBOARD
{
  unsigned int dwType;
  unsigned int dwSubType;
  unsigned int dwKeyboardMode;
  unsigned int dwNumberOfFunctionKeys;
  unsigned int dwNumberOfIndicators;
  unsigned int dwNumberOfKeysTotal;
};

/* 5280 */
struct tagRID_DEVICE_INFO_HID
{
  unsigned int dwVendorId;
  unsigned int dwProductId;
  unsigned int dwVersionNumber;
  unsigned __int16 usUsagePage;
  unsigned __int16 usUsage;
};

/* 5281 */
union $86A6FC6185809651D296E80EE32833F0
{
  tagRID_DEVICE_INFO_MOUSE mouse;
  tagRID_DEVICE_INFO_KEYBOARD keyboard;
  tagRID_DEVICE_INFO_HID hid;
};

/* 5282 */
struct tagRID_DEVICE_INFO
{
  unsigned int cbSize;
  unsigned int dwType;
  $86A6FC6185809651D296E80EE32833F0 ___u2;
};

/* 5283 */
struct _CERT_REQUEST_INFO
{
  unsigned int dwVersion;
  _CRYPTOAPI_BLOB Subject;
  _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 5284 */
struct _STORAGE_GET_BC_PROPERTIES_OUTPUT
{
  unsigned int MaximumRequestsPerPeriod;
  unsigned int MinimumPeriod;
  unsigned __int64 MaximumRequestSize;
  unsigned int EstimatedTimePerRequest;
  unsigned int NumOutStandingRequests;
  unsigned __int64 RequestSize;
};

/* 5285 */
struct __declspec(align(4)) _CSV_QUERY_REDIRECT_STATE
{
  unsigned int MdsNodeId;
  unsigned int DsNodeId;
  char FileRedirected;
};

/* 5286 */
struct _PRINTPROCESSOR_CAPS_1
{
  unsigned int dwLevel;
  unsigned int dwNupOptions;
  unsigned int dwPageOrderFlags;
  unsigned int dwNumberOfCopies;
};

/* 5287 */
struct __declspec(align(8)) _PORT_INFO_3A
{
  unsigned int dwStatus;
  char *pszStatus;
  unsigned int dwSeverity;
};

/* 5288 */
union $024A9AD87DA22F97CCD4130050D7BF17
{
  unsigned int SymbolTableIndex;
  unsigned int VirtualAddress;
};

/* 5289 */
struct __unaligned __declspec(align(2)) _IMAGE_LINENUMBER
{
  $024A9AD87DA22F97CCD4130050D7BF17 Type;
  unsigned __int16 Linenumber;
};

/* 5290 */
struct $428257C9868A469D077AA3A343E95D70
{
  unsigned int dwType;
  unsigned int dwDeviceID;
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
};

/* 5291 */
struct __unaligned __declspec(align(4)) tagMIXERLINEA
{
  unsigned int cbStruct;
  unsigned int dwDestination;
  unsigned int dwSource;
  unsigned int dwLineID;
  unsigned int fdwLine;
  unsigned __int64 dwUser;
  unsigned int dwComponentType;
  unsigned int cChannels;
  unsigned int cConnections;
  unsigned int cControls;
  char szShortName[16];
  char szName[64];
  $428257C9868A469D077AA3A343E95D70 Target;
};

/* 5292 */
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
{
  unsigned int Size;
  unsigned int Action;
  unsigned int Flags;
  unsigned int OperationStatus;
  unsigned int ExtendedError;
  unsigned int TargetDetailedError;
  unsigned int ReservedStatus;
  unsigned int OutputBlockOffset;
  unsigned int OutputBlockLength;
};

/* 5293 */
struct __declspec(align(8)) _EXCEPTION_DEBUG_INFO
{
  _EXCEPTION_RECORD ExceptionRecord;
  unsigned int dwFirstChance;
};

/* 5294 */
struct _CERT_POLICY_QUALIFIER_INFO
{
  char *pszPolicyQualifierId;
  _CRYPTOAPI_BLOB Qualifier;
};

/* 5295 */
struct _CERT_POLICY_INFO
{
  char *pszPolicyIdentifier;
  unsigned int cPolicyQualifier;
  _CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
};

/* 5296 */
struct _CERT_POLICIES_INFO
{
  unsigned int cPolicyInfo;
  _CERT_POLICY_INFO *rgPolicyInfo;
};

/* 5297 */
struct __declspec(align(8)) _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
{
  unsigned int cbSize;
  $4BCA99CF3AFC900CAD02FCA6999AF57A ___u1;
  unsigned int dwKeySpec;
  _CMSG_KEY_TRANS_RECIPIENT_INFO *pKeyTrans;
  unsigned int dwRecipientIndex;
};

/* 5298 */
struct _STORAGE_IDLE_POWER
{
  unsigned int Version;
  unsigned int Size;
  unsigned __int32 WakeCapableHint : 1;
  unsigned __int32 D3ColdSupported : 1;
  unsigned __int32 Reserved : 30;
  unsigned int D3IdleTimeout;
};

/* 5299 */
struct _MONITOR_INFO_1A
{
  char *pName;
};

/* 5300 */
struct _DISPLAY_DEVICEA
{
  unsigned int cb;
  char DeviceName[32];
  char DeviceString[128];
  unsigned int StateFlags;
  char DeviceID[128];
  char DeviceKey[128];
};

/* 5301 */
struct tagWCRANGE
{
  wchar_t wcLow;
  unsigned __int16 cGlyphs;
};

/* 5302 */
struct _PRINTER_INFO_6
{
  unsigned int dwStatus;
};

/* 5303 */
struct __cppobj AsyncIPipeDouble : IUnknown
{
};

/* 5304 */
struct _OFNOTIFYEXW
{
  tagNMHDR hdr;
  tagOFNW *lpOFN;
  void *psf;
  void *pidl;
};

/* 5305 */
struct __declspec(align(4)) _IMAGE_DEBUG_MISC
{
  unsigned int DataType;
  unsigned int Length;
  char Unicode;
  char Reserved[3];
  char Data[1];
};

/* 5306 */
struct _TRANSACTION_LIST_ENTRY
{
  _GUID UOW;
};

/* 5307 */
struct _ROOT_INFO_LUID
{
  unsigned int LowPart;
  int HighPart;
};

/* 5308 */
struct _CRYPT_SMART_CARD_ROOT_INFO
{
  char rgbCardID[16];
  _ROOT_INFO_LUID luid;
};

/* 5309 */
struct __unaligned __declspec(align(4)) tagMCI_BREAK_PARMS
{
  unsigned __int64 dwCallback;
  int nVirtKey;
  HWND__ *hwndBreak;
};

/* 5310 */
struct _CERT_PHYSICAL_STORE_INFO
{
  unsigned int cbSize;
  char *pszOpenStoreProvider;
  unsigned int dwOpenEncodingType;
  unsigned int dwOpenFlags;
  _CRYPTOAPI_BLOB OpenParameters;
  unsigned int dwFlags;
  unsigned int dwPriority;
};

/* 5311 */
struct _FILESYSTEM_STATISTICS
{
  unsigned __int16 FileSystemType;
  unsigned __int16 Version;
  unsigned int SizeOfCompleteStructure;
  unsigned int UserFileReads;
  unsigned int UserFileReadBytes;
  unsigned int UserDiskReads;
  unsigned int UserFileWrites;
  unsigned int UserFileWriteBytes;
  unsigned int UserDiskWrites;
  unsigned int MetaDataReads;
  unsigned int MetaDataReadBytes;
  unsigned int MetaDataDiskReads;
  unsigned int MetaDataWrites;
  unsigned int MetaDataWriteBytes;
  unsigned int MetaDataDiskWrites;
};

/* 5312 */
struct _SERVICE_REQUIRED_PRIVILEGES_INFOA
{
  char *pmszRequiredPrivileges;
};

/* 5313 */
struct HENHMETAFILE__
{
  int unused;
};

/* 5314 */
struct tagINPUT_MESSAGE_SOURCE
{
  tagINPUT_MESSAGE_DEVICE_TYPE deviceType;
  tagINPUT_MESSAGE_ORIGIN_ID originId;
};

/* 5315 */
struct __unaligned __declspec(align(4)) tagMCI_ANIM_WINDOW_PARMSW
{
  unsigned __int64 dwCallback;
  HWND__ *hWnd;
  unsigned int nCmdShow;
  const wchar_t *lpstrText;
};

/* 5316 */
struct _CERT_KEYGEN_REQUEST_INFO
{
  unsigned int dwVersion;
  _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
  wchar_t *pwszChallengeString;
};

/* 5317 */
struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 5318 */
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
  unsigned int BeginAddress;
  unsigned int EndAddress;
  unsigned int ExceptionHandler;
  unsigned int HandlerData;
  unsigned int PrologEndAddress;
};

/* 5319 */
struct __declspec(align(4)) _RESOURCEMANAGER_BASIC_INFORMATION
{
  _GUID ResourceManagerId;
  unsigned int DescriptionLength;
  wchar_t Description[1];
};

/* 5320 */
struct _COMPATIBILITY_CONTEXT_ELEMENT
{
  _GUID Id;
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
};

/* 5321 */
struct _CRYPT_TIMESTAMP_RESPONSE
{
  unsigned int dwStatus;
  unsigned int cFreeText;
  wchar_t **rgFreeText;
  _CRYPT_BIT_BLOB FailureInfo;
  _CRYPTOAPI_BLOB ContentInfo;
};

/* 5322 */
struct $CDD2232B0F5859219E4E3B74573CBE05
{
  unsigned int Signature;
  unsigned int CheckSum;
};

/* 5323 */
struct $1B55B000C24159C7159EAD80F64A35B4
{
  _GUID DiskId;
};

/* 5324 */
union $2E307C075369B88FACD0255F767B8113
{
  $CDD2232B0F5859219E4E3B74573CBE05 Mbr;
  $1B55B000C24159C7159EAD80F64A35B4 Gpt;
};

/* 5325 */
struct _DISK_PARTITION_INFO
{
  unsigned int SizeOfPartitionInfo;
  _PARTITION_STYLE PartitionStyle;
  $2E307C075369B88FACD0255F767B8113 ___u2;
};

/* 5326 */
struct __cppobj IEnumMoniker : IUnknown
{
};

/* 5327 */
struct __cppobj IClassActivator : IUnknown
{
};

/* 5328 */
struct _SOCKET_ADDRESS_LIST
{
  int iAddressCount;
  _SOCKET_ADDRESS Address[1];
};

/* 5329 */
struct _INTERFACE_INFO
{
  unsigned int iiFlags;
  sockaddr_gen iiAddress;
  sockaddr_gen iiBroadcastAddress;
  sockaddr_gen iiNetmask;
};

/* 5330 */
struct _IMAGE_NT_HEADERS
{
  unsigned int Signature;
  _IMAGE_FILE_HEADER FileHeader;
  _IMAGE_OPTIONAL_HEADER OptionalHeader;
};

/* 5331 */
struct _SHFILEINFOW
{
  HICON__ *hIcon;
  int iIcon;
  unsigned int dwAttributes;
  wchar_t szDisplayName[260];
  wchar_t szTypeName[80];
};

/* 5332 */
struct _SCRUB_DATA_OUTPUT
{
  unsigned int Size;
  unsigned int Flags;
  unsigned int Status;
  unsigned __int64 ErrorFileOffset;
  unsigned __int64 ErrorLength;
  unsigned __int64 NumberOfBytesRepaired;
  unsigned __int64 NumberOfBytesFailed;
  unsigned __int64 InternalFileReference;
  unsigned int Reserved[6];
  char ResumeContext[816];
};

/* 5333 */
struct _OSVERSIONINFOW
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  wchar_t szCSDVersion[128];
};

/* 5334 */
struct _HEAP_SUMMARY
{
  unsigned int cb;
  unsigned __int64 cbAllocated;
  unsigned __int64 cbCommitted;
  unsigned __int64 cbReserved;
  unsigned __int64 cbMaxReserve;
};

/* 5335 */
struct __BCRYPT_KEY_LENGTHS_STRUCT
{
  unsigned int dwMinLength;
  unsigned int dwMaxLength;
  unsigned int dwIncrement;
};

/* 5336 */
struct tagRECONVERTSTRING
{
  unsigned int dwSize;
  unsigned int dwVersion;
  unsigned int dwStrLen;
  unsigned int dwStrOffset;
  unsigned int dwCompStrLen;
  unsigned int dwCompStrOffset;
  unsigned int dwTargetStrLen;
  unsigned int dwTargetStrOffset;
};

/* 5337 */
struct _EXCEPTION_RECORD32
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  unsigned int ExceptionRecord;
  unsigned int ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int ExceptionInformation[15];
};

/* 5338 */
struct _CRYPT_ENCODE_PARA
{
  unsigned int cbSize;
  void *(__cdecl *pfnAlloc)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
};

/* 5339 */
struct _EFS_ENCRYPTION_STATUS_INFO
{
  int bHasCurrentKey;
  unsigned int dwEncryptionError;
};

/* 5340 */
struct __declspec(align(8)) _DOC_INFO_3W
{
  wchar_t *pDocName;
  wchar_t *pOutputFile;
  wchar_t *pDatatype;
  unsigned int dwFlags;
};

/* 5341 */
struct _SD_CHANGE_MACHINE_SID_OUTPUT
{
  unsigned __int64 NumSDChangedSuccess;
  unsigned __int64 NumSDChangedFail;
  unsigned __int64 NumSDUnused;
  unsigned __int64 NumSDTotal;
  unsigned __int64 NumMftSDChangedSuccess;
  unsigned __int64 NumMftSDChangedFail;
  unsigned __int64 NumMftSDTotal;
};

/* 5342 */
struct _REPAIR_COPIES_INPUT
{
  unsigned int Size;
  unsigned int Flags;
  _LARGE_INTEGER FileOffset;
  unsigned int Length;
  unsigned int SourceCopy;
  unsigned int NumberOfRepairCopies;
  unsigned int RepairCopies[1];
};

/* 5343 */
struct __cppobj IAddrExclusionControl : IUnknown
{
};

/* 5344 */
struct __cppobj IPrintDialogServices : IUnknown
{
};

/* 5345 */
struct _IMAGE_SYMBOL_EX
{
  $6BF88A6FA0008955672A9BD2D75B41B7 N;
  unsigned int Value;
  int SectionNumber;
  unsigned __int16 Type;
  char StorageClass;
  char NumberOfAuxSymbols;
};

/* 5346 */
struct __declspec(align(4)) tagEMREXTSELECTCLIPRGN
{
  tagEMR emr;
  unsigned int cbRgnData;
  unsigned int iMode;
  char RgnData[1];
};

/* 5347 */
struct __declspec(align(8)) _CERT_TEMPLATE_EXT
{
  char *pszObjId;
  unsigned int dwMajorVersion;
  int fMinorVersion;
  unsigned int dwMinorVersion;
};

/* 5348 */
struct _FORM_INFO_1A
{
  unsigned int Flags;
  char *pName;
  tagSIZE Size;
  _RECTL ImageableArea;
};

/* 5349 */
struct tagTITLEBARINFO
{
  unsigned int cbSize;
  tagRECT rcTitleBar;
  unsigned int rgstate[6];
};

/* 5350 */
struct __unaligned __declspec(align(4)) tagMCI_SEQ_SET_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwTimeFormat;
  unsigned int dwAudio;
  unsigned int dwTempo;
  unsigned int dwPort;
  unsigned int dwSlave;
  unsigned int dwMaster;
  unsigned int dwOffset;
};

/* 5351 */
struct _RPC_IF_ID
{
  _GUID Uuid;
  unsigned __int16 VersMajor;
  unsigned __int16 VersMinor;
};

/* 5352 */
struct _CERT_KEY_ATTRIBUTES_INFO
{
  _CRYPTOAPI_BLOB KeyId;
  _CRYPT_BIT_BLOB IntendedKeyUsage;
  _CERT_PRIVATE_KEY_VALIDITY *pPrivateKeyUsagePeriod;
};

/* 5353 */
struct _DRIVER_INFO_2W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
};

/* 5354 */
struct _TRANSACTION_BASIC_INFORMATION
{
  _GUID TransactionId;
  unsigned int State;
  unsigned int Outcome;
};

/* 5355 */
union _userHMETAFILE::__MIDL_IWinTypes_0004
{
  int hInproc;
  _BYTE_BLOB *hRemote;
  __int64 hInproc64;
};

/* 5356 */
struct _userHMETAFILE
{
  int fContext;
  _userHMETAFILE::__MIDL_IWinTypes_0004 u;
};

/* 5357 */
struct tagAXISINFOW
{
  int axMinValue;
  int axMaxValue;
  wchar_t axAxisName[16];
};

/* 5358 */
struct _DRIVER_INFO_3A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  char *pHelpFile;
  char *pDependentFiles;
  char *pMonitorName;
  char *pDefaultDataType;
};

/* 5359 */
struct _PORT_INFO_2W
{
  wchar_t *pPortName;
  wchar_t *pMonitorName;
  wchar_t *pDescription;
  unsigned int fPortType;
  unsigned int Reserved;
};

/* 5360 */
struct tagRemFORMATETC
{
  unsigned int cfFormat;
  unsigned int ptd;
  unsigned int dwAspect;
  int lindex;
  unsigned int tymed;
};

/* 5361 */
struct _INTERFACE_INFO_EX
{
  unsigned int iiFlags;
  _SOCKET_ADDRESS iiAddress;
  _SOCKET_ADDRESS iiBroadcastAddress;
  _SOCKET_ADDRESS iiNetmask;
};

/* 5362 */
struct tagENUMLOGFONTA
{
  tagLOGFONTA elfLogFont;
  char elfFullName[64];
  char elfStyle[32];
};

/* 5363 */
struct tagEMRALPHABLEND
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int cxSrc;
  int cySrc;
};

/* 5364 */
struct tagMOUSEHOOKSTRUCT
{
  tagPOINT pt;
  HWND__ *hwnd;
  unsigned int wHitTestCode;
  unsigned __int64 dwExtraInfo;
};

/* 5365 */
struct tagUPDATELAYEREDWINDOWINFO
{
  unsigned int cbSize;
  HDC__ *hdcDst;
  tagPOINT *pptDst;
  tagSIZE *psize;
  HDC__ *hdcSrc;
  tagPOINT *pptSrc;
  unsigned int crKey;
  _BLENDFUNCTION *pblend;
  unsigned int dwFlags;
  tagRECT *prcDirty;
};

/* 5366 */
struct tagMIXERCONTROLA
{
  unsigned int cbStruct;
  unsigned int dwControlID;
  unsigned int dwControlType;
  unsigned int fdwControl;
  unsigned int cMultipleItems;
  char szShortName[16];
  char szName[64];
  $37B5D8F0F9A4772C2CA930FE812CEDB0 Bounds;
  $D57FBB56CFB6CB9AA7C272D88EF9A29F Metrics;
};

/* 5367 */
struct _CRYPT_CONTENT_INFO
{
  char *pszObjId;
  _CRYPTOAPI_BLOB Content;
};

/* 5368 */
struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES
{
  unsigned int Size;
  unsigned int Version;
  __int8 AvailableMappingResourcesValid : 1;
  __int8 UsedMappingResourcesValid : 1;
  __int8 Reserved0 : 6;
  char Reserved1[3];
  __int8 AvailableMappingResourcesScope : 2;
  __int8 UsedMappingResourcesScope : 2;
  __int8 Reserved2 : 4;
  char Reserved3[3];
  unsigned __int64 AvailableMappingResources;
  unsigned __int64 UsedMappingResources;
};

/* 5369 */
struct __cppobj IPersistStorage : IPersist
{
};

/* 5370 */
struct __declspec(align(4)) tagEMRGLSRECORD
{
  tagEMR emr;
  unsigned int cbData;
  char Data[1];
};

/* 5371 */
struct tagMOUSEKEYS
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iMaxSpeed;
  unsigned int iTimeToMaxSpeed;
  unsigned int iCtrlSpeed;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
};

/* 5372 */
struct __declspec(align(8)) tagDDEML_MSG_HOOK_DATA
{
  unsigned __int64 uiLo;
  unsigned __int64 uiHi;
  unsigned int cbData;
  unsigned int Data[8];
};

/* 5373 */
struct tagMONMSGSTRUCT
{
  unsigned int cb;
  HWND__ *hwndTo;
  unsigned int dwTime;
  void *hTask;
  unsigned int wMsg;
  unsigned __int64 wParam;
  __int64 lParam;
  tagDDEML_MSG_HOOK_DATA dmhd;
};

/* 5374 */
struct _PSHNOTIFY
{
  tagNMHDR hdr;
  __int64 lParam;
};

/* 5375 */
struct HACCEL__
{
  int unused;
};

/* 5376 */
struct _RPC_POLICY
{
  unsigned int Length;
  unsigned int EndpointFlags;
  unsigned int NICFlags;
};

/* 5377 */
struct tagEMRSTRETCHBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int cxSrc;
  int cySrc;
};

/* 5378 */
struct _ACCESS_DENIED_CALLBACK_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 5379 */
struct _TOKEN_GROUPS
{
  unsigned int GroupCount;
  _SID_AND_ATTRIBUTES Groups[1];
};

/* 5380 */
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{
  unsigned int SecurityLimitFlags;
  void *JobToken;
  _TOKEN_GROUPS *SidsToDisable;
  _TOKEN_PRIVILEGES *PrivilegesToDelete;
  _TOKEN_GROUPS *RestrictedSids;
};

/* 5381 */
union $8A1BACC021C66AF9C87EF89D24DFF5FD
{
  unsigned int CpuRate;
  unsigned int Weight;
};

/* 5382 */
struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
{
  unsigned int ControlFlags;
  $8A1BACC021C66AF9C87EF89D24DFF5FD ___u1;
};

/* 5383 */
union $E6E24A7F5B6F8B597C18331DB62781EC
{
  unsigned int ForwarderString;
  unsigned int Function;
  unsigned int Ordinal;
  unsigned int AddressOfData;
};

/* 5384 */
struct _IMAGE_THUNK_DATA32
{
  $E6E24A7F5B6F8B597C18331DB62781EC u1;
};

/* 5385 */
struct _remoteMETAFILEPICT
{
  int mm;
  int xExt;
  int yExt;
  _userHMETAFILE *hMF;
};

/* 5386 */
union _userHMETAFILEPICT::__MIDL_IWinTypes_0005
{
  int hInproc;
  _remoteMETAFILEPICT *hRemote;
  __int64 hInproc64;
};

/* 5387 */
struct _userHMETAFILEPICT
{
  int fContext;
  _userHMETAFILEPICT::__MIDL_IWinTypes_0005 u;
};

/* 5388 */
union _userSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003
{
  _userHMETAFILEPICT *hMetaFilePict;
  _userHENHMETAFILE *hHEnhMetaFile;
  _GDI_OBJECT *hGdiHandle;
  _userHGLOBAL *hGlobal;
  wchar_t *lpszFileName;
  _BYTE_BLOB *pstm;
  _BYTE_BLOB *pstg;
};

/* 5389 */
struct _userSTGMEDIUM::_STGMEDIUM_UNION
{
  unsigned int tymed;
  _userSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003 u;
};

/* 5390 */
struct _userSTGMEDIUM
{
  IUnknown *pUnkForRelease;
};

/* 5391 */
struct in_pktinfo_ex
{
  in_pktinfo pkt_info;
  SCOPE_ID scope_id;
};

/* 5392 */
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
  unsigned int FuncStart;
  unsigned __int32 PrologLen : 8;
  unsigned __int32 FuncLen : 22;
  unsigned __int32 ThirtyTwoBit : 1;
  unsigned __int32 ExceptionFlag : 1;
};

/* 5393 */
struct _REASSIGN_BLOCKS
{
  unsigned __int16 Reserved;
  unsigned __int16 Count;
  unsigned int BlockNumber[1];
};

/* 5394 */
struct __declspec(align(8)) tagSERIALKEYSA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  char *lpszActivePort;
  char *lpszPort;
  unsigned int iBaudRate;
  unsigned int iPortState;
  unsigned int iActive;
};

/* 5395 */
struct _DISK_EXTENT
{
  unsigned int DiskNumber;
  _LARGE_INTEGER StartingOffset;
  _LARGE_INTEGER ExtentLength;
};

/* 5396 */
struct _VOLUME_DISK_EXTENTS
{
  unsigned int NumberOfDiskExtents;
  _DISK_EXTENT Extents[1];
};

/* 5397 */
struct _RESOURCEMANAGER_COMPLETION_INFORMATION
{
  void *IoCompletionPortHandle;
  unsigned __int64 CompletionKey;
};

/* 5398 */
struct __cppobj IInternetPriority : IUnknown
{
};

/* 5399 */
struct $2320E6AE41A9EFC02390E4A2F1E4BF1D
{
  _LARGE_INTEGER NextVcn;
  _LARGE_INTEGER Lcn;
};

/* 5400 */
struct RETRIEVAL_POINTERS_BUFFER
{
  unsigned int ExtentCount;
  _LARGE_INTEGER StartingVcn;
  $2320E6AE41A9EFC02390E4A2F1E4BF1D Extents[1];
};

/* 5401 */
union $46CF7C823C63AC36E11465EC529776B5
{
  RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
};

/* 5402 */
struct _STREAM_EXTENT_ENTRY
{
  unsigned int Flags;
  $46CF7C823C63AC36E11465EC529776B5 ExtentInformation;
};

/* 5403 */
struct _wireSAFEARR_HAVEIID
{
  unsigned int Size;
  IUnknown **apUnknown;
  _GUID iid;
};

/* 5404 */
struct ANON_OBJECT_HEADER
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  _GUID ClassID;
  unsigned int SizeOfData;
};

/* 5405 */
struct __declspec(align(8)) _TXFS_ROLLFORWARD_REDO_INFORMATION
{
  _LARGE_INTEGER LastVirtualClock;
  unsigned __int64 LastRedoLsn;
  unsigned __int64 HighestRecoveryLsn;
  unsigned int Flags;
};

/* 5406 */
struct __declspec(align(4)) tagEMREXTESCAPE
{
  tagEMR emr;
  int iEscape;
  int cbEscData;
  char EscData[1];
};

/* 5407 */
struct tagMCI_ANIM_RECT_PARMS
{
  unsigned __int64 dwCallback;
  tagRECT rc;
};

/* 5408 */
struct __declspec(align(4)) _FILE_NAME_INFO
{
  unsigned int FileNameLength;
  wchar_t FileName[1];
};

/* 5409 */
struct tagLOGCOLORSPACEA
{
  unsigned int lcsSignature;
  unsigned int lcsVersion;
  unsigned int lcsSize;
  int lcsCSType;
  int lcsIntent;
  tagICEXYZTRIPLE lcsEndpoints;
  unsigned int lcsGammaRed;
  unsigned int lcsGammaGreen;
  unsigned int lcsGammaBlue;
  char lcsFilename[260];
};

/* 5410 */
struct tagEMRCREATECOLORSPACE
{
  tagEMR emr;
  unsigned int ihCS;
  tagLOGCOLORSPACEA lcs;
};

/* 5411 */
struct tagMIDIINCAPS2A
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwSupport;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 5412 */
struct __NCRYPT_SUPPORTED_LENGTHS
{
  unsigned int dwMinLength;
  unsigned int dwMaxLength;
  unsigned int dwIncrement;
  unsigned int dwDefaultLength;
};

/* 5413 */
struct midiproptimediv_tag
{
  unsigned int cbStruct;
  unsigned int dwTimeDiv;
};

/* 5414 */
struct _SESSION_HEADER
{
  char sess_name;
  char num_sess;
  char rcv_dg_outstanding;
  char rcv_any_outstanding;
};

/* 5415 */
struct __cppobj IErrorLog : IUnknown
{
};

/* 5416 */
struct tagCUSTDATA
{
  unsigned int cCustData;
  tagCUSTDATAITEM *prgCustData;
};

/* 5417 */
struct _WSAPROTOCOL_INFOW
{
  unsigned int dwServiceFlags1;
  unsigned int dwServiceFlags2;
  unsigned int dwServiceFlags3;
  unsigned int dwServiceFlags4;
  unsigned int dwProviderFlags;
  _GUID ProviderId;
  unsigned int dwCatalogEntryId;
  _WSAPROTOCOLCHAIN ProtocolChain;
  int iVersion;
  int iAddressFamily;
  int iMaxSockAddr;
  int iMinSockAddr;
  int iSocketType;
  int iProtocol;
  int iProtocolMaxOffset;
  int iNetworkByteOrder;
  int iSecurityScheme;
  unsigned int dwMessageSize;
  unsigned int dwProviderReserved;
  wchar_t szProtocol[256];
};

/* 5418 */
struct _IMAGE_VXD_HEADER
{
  unsigned __int16 e32_magic;
  char e32_border;
  char e32_worder;
  unsigned int e32_level;
  unsigned __int16 e32_cpu;
  unsigned __int16 e32_os;
  unsigned int e32_ver;
  unsigned int e32_mflags;
  unsigned int e32_mpages;
  unsigned int e32_startobj;
  unsigned int e32_eip;
  unsigned int e32_stackobj;
  unsigned int e32_esp;
  unsigned int e32_pagesize;
  unsigned int e32_lastpagesize;
  unsigned int e32_fixupsize;
  unsigned int e32_fixupsum;
  unsigned int e32_ldrsize;
  unsigned int e32_ldrsum;
  unsigned int e32_objtab;
  unsigned int e32_objcnt;
  unsigned int e32_objmap;
  unsigned int e32_itermap;
  unsigned int e32_rsrctab;
  unsigned int e32_rsrccnt;
  unsigned int e32_restab;
  unsigned int e32_enttab;
  unsigned int e32_dirtab;
  unsigned int e32_dircnt;
  unsigned int e32_fpagetab;
  unsigned int e32_frectab;
  unsigned int e32_impmod;
  unsigned int e32_impmodcnt;
  unsigned int e32_impproc;
  unsigned int e32_pagesum;
  unsigned int e32_datapage;
  unsigned int e32_preload;
  unsigned int e32_nrestab;
  unsigned int e32_cbnrestab;
  unsigned int e32_nressum;
  unsigned int e32_autodata;
  unsigned int e32_debuginfo;
  unsigned int e32_debuglen;
  unsigned int e32_instpreload;
  unsigned int e32_instdemand;
  unsigned int e32_heapsize;
  char e32_res3[12];
  unsigned int e32_winresoff;
  unsigned int e32_winreslen;
  unsigned __int16 e32_devid;
  unsigned __int16 e32_ddkver;
};

/* 5419 */
union _RemotableHandle::__MIDL_IWinTypes_0009
{
  int hInproc;
  int hRemote;
};

/* 5420 */
struct _RemotableHandle
{
  int fContext;
  _RemotableHandle::__MIDL_IWinTypes_0009 u;
};

/* 5421 */
struct _DISK_HISTOGRAM
{
  _LARGE_INTEGER DiskSize;
  _LARGE_INTEGER Start;
  _LARGE_INTEGER End;
  _LARGE_INTEGER Average;
  _LARGE_INTEGER AverageRead;
  _LARGE_INTEGER AverageWrite;
  unsigned int Granularity;
  unsigned int Size;
  unsigned int ReadCount;
  unsigned int WriteCount;
  _HISTOGRAM_BUCKET *Histogram;
};

/* 5422 */
struct __cppobj IAuthenticate : IUnknown
{
};

/* 5423 */
struct __cppobj IAuthenticateEx : IAuthenticate
{
};

/* 5424 */
struct tagEMRSETWORLDTRANSFORM
{
  tagEMR emr;
  tagXFORM xform;
};

/* 5425 */
struct _CERT_POLICY_MAPPING
{
  char *pszIssuerDomainPolicy;
  char *pszSubjectDomainPolicy;
};

/* 5426 */
struct _CERT_POLICY_MAPPINGS_INFO
{
  unsigned int cPolicyMapping;
  _CERT_POLICY_MAPPING *rgPolicyMapping;
};

/* 5427 */
struct _FILE_MAKE_COMPATIBLE_BUFFER
{
  char CloseDisc;
};

/* 5428 */
struct __cppobj ISynchronizeHandle : IUnknown
{
};

/* 5429 */
struct __cppobj ISynchronizeEvent : ISynchronizeHandle
{
};

/* 5430 */
struct _CACHE_DESCRIPTOR
{
  char Level;
  char Associativity;
  unsigned __int16 LineSize;
  unsigned int Size;
  _PROCESSOR_CACHE_TYPE Type;
};

/* 5431 */
struct _RTL_CONDITION_VARIABLE
{
  void *Ptr;
};

/* 5432 */
struct __declspec(align(4)) tagMULTIKEYHELPA
{
  unsigned int mkSize;
  char mkKeylist;
  char szKeyphrase[1];
};

/* 5433 */
struct __declspec(align(8)) _CMSG_MAIL_LIST_ENCRYPT_INFO
{
  unsigned int cbSize;
  unsigned int dwRecipientIndex;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedKey;
  unsigned int dwFlags;
};

/* 5434 */
struct _TRANSACTIONMANAGER_BASIC_INFORMATION
{
  _GUID TmIdentity;
  _LARGE_INTEGER VirtualClock;
};

/* 5435 */
struct _CERT_CHAIN_POLICY_PARA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  void *pvExtraPolicyPara;
};

/* 5436 */
struct __cppobj IViewObject : IUnknown
{
};

/* 5437 */
struct _CERT_POLICY_CONSTRAINTS_INFO
{
  int fRequireExplicitPolicy;
  unsigned int dwRequireExplicitPolicySkipCerts;
  int fInhibitPolicyMapping;
  unsigned int dwInhibitPolicyMappingSkipCerts;
};

/* 5438 */
struct __declspec(align(4)) USN_RECORD_V2
{
  unsigned int RecordLength;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned __int64 FileReferenceNumber;
  unsigned __int64 ParentFileReferenceNumber;
  __int64 Usn;
  _LARGE_INTEGER TimeStamp;
  unsigned int Reason;
  unsigned int SourceInfo;
  unsigned int SecurityId;
  unsigned int FileAttributes;
  unsigned __int16 FileNameLength;
  unsigned __int16 FileNameOffset;
  wchar_t FileName[1];
};

/* 5439 */
struct _MONITOR_INFO_2W
{
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDLLName;
};

/* 5440 */
struct _WIN32_FILE_ATTRIBUTE_DATA
{
  unsigned int dwFileAttributes;
  _FILETIME ftCreationTime;
  _FILETIME ftLastAccessTime;
  _FILETIME ftLastWriteTime;
  unsigned int nFileSizeHigh;
  unsigned int nFileSizeLow;
};

/* 5441 */
struct _FILE_STORAGE_INFO
{
  unsigned int LogicalBytesPerSector;
  unsigned int PhysicalBytesPerSectorForAtomicity;
  unsigned int PhysicalBytesPerSectorForPerformance;
  unsigned int FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
  unsigned int Flags;
  unsigned int ByteOffsetForSectorAlignment;
  unsigned int ByteOffsetForPartitionAlignment;
};

/* 5442 */
struct _MMCKINFO
{
  unsigned int ckid;
  unsigned int cksize;
  unsigned int fccType;
  unsigned int dwDataOffset;
  unsigned int dwFlags;
};

/* 5443 */
struct _PRINTER_INFO_9A
{
  _devicemodeA *pDevMode;
};

/* 5444 */
struct __declspec(align(8)) _JOB_INFO_1W
{
  unsigned int JobId;
  wchar_t *pPrinterName;
  wchar_t *pMachineName;
  wchar_t *pUserName;
  wchar_t *pDocument;
  wchar_t *pDatatype;
  wchar_t *pStatus;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int TotalPages;
  unsigned int PagesPrinted;
  _SYSTEMTIME Submitted;
};

/* 5445 */
struct __declspec(align(8)) _PRINTER_ENUM_VALUESA
{
  char *pValueName;
  unsigned int cbValueName;
  unsigned int dwType;
  char *pData;
  unsigned int cbData;
};

/* 5446 */
struct PPM_WMI_IDLE_STATE
{
  unsigned int Latency;
  unsigned int Power;
  unsigned int TimeCheck;
  char PromotePercent;
  char DemotePercent;
  char StateType;
  char Reserved;
  unsigned int StateFlags;
  unsigned int Context;
  unsigned int IdleHandler;
  unsigned int Reserved1;
};

/* 5447 */
struct PPM_WMI_IDLE_STATES
{
  unsigned int Type;
  unsigned int Count;
  unsigned int TargetState;
  unsigned int OldState;
  unsigned __int64 TargetProcessors;
  PPM_WMI_IDLE_STATE State[1];
};

/* 5448 */
struct __declspec(align(8)) _FILE_BASIC_INFO
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  unsigned int FileAttributes;
};

/* 5449 */
struct _BCryptBuffer
{
  unsigned int cbBuffer;
  unsigned int BufferType;
  void *pvBuffer;
};

/* 5450 */
struct _BCryptBufferDesc
{
  unsigned int ulVersion;
  unsigned int cBuffers;
  _BCryptBuffer *pBuffers;
};

/* 5451 */
struct _CRL_DIST_POINT_NAME
{
  unsigned int dwDistPointNameChoice;
  _CERT_ALT_NAME_INFO FullName;
};

/* 5452 */
struct _CRYPT_PASSWORD_CREDENTIALSW
{
  unsigned int cbSize;
  wchar_t *pszUsername;
  wchar_t *pszPassword;
};

/* 5453 */
struct _OSVERSIONINFOEXA
{
  unsigned int dwOSVersionInfoSize;
  unsigned int dwMajorVersion;
  unsigned int dwMinorVersion;
  unsigned int dwBuildNumber;
  unsigned int dwPlatformId;
  char szCSDVersion[128];
  unsigned __int16 wServicePackMajor;
  unsigned __int16 wServicePackMinor;
  unsigned __int16 wSuiteMask;
  char wProductType;
  char wReserved;
};

/* 5454 */
struct tMIXERCONTROLDETAILS_SIGNED
{
  int lValue;
};

/* 5455 */
struct _OCSP_SIGNATURE_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
  _CRYPT_BIT_BLOB Signature;
  unsigned int cCertEncoded;
  _CRYPTOAPI_BLOB *rgCertEncoded;
};

/* 5456 */
struct _OCSP_BASIC_SIGNED_RESPONSE_INFO
{
  _CRYPTOAPI_BLOB ToBeSigned;
  _OCSP_SIGNATURE_INFO SignatureInfo;
};

/* 5457 */
struct _IMAGE_COFF_SYMBOLS_HEADER
{
  unsigned int NumberOfSymbols;
  unsigned int LvaToFirstSymbol;
  unsigned int NumberOfLinenumbers;
  unsigned int LvaToFirstLinenumber;
  unsigned int RvaToFirstByteOfCode;
  unsigned int RvaToLastByteOfCode;
  unsigned int RvaToFirstByteOfData;
  unsigned int RvaToLastByteOfData;
};

/* 5458 */
struct _ImageArchitectureHeader
{
  unsigned __int32 AmaskValue : 1;
  unsigned __int32 : 7;
  unsigned __int32 AmaskShift : 8;
  unsigned int FirstEntryRVA;
};

/* 5459 */
struct _SYSTEM_POWER_STATUS
{
  char ACLineStatus;
  char BatteryFlag;
  char BatteryLifePercent;
  char Reserved1;
  unsigned int BatteryLifeTime;
  unsigned int BatteryFullLifeTime;
};

/* 5460 */
struct tagEMRPOLYLINE16
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cpts;
  tagPOINTS apts[1];
};

/* 5461 */
struct _OCSP_RESPONSE_INFO
{
  unsigned int dwStatus;
  char *pszObjId;
  _CRYPTOAPI_BLOB Value;
};

/* 5462 */
struct __cppobj IEncodingFilterFactory : IUnknown
{
};

/* 5463 */
struct __declspec(align(8)) tagMENUBARINFO
{
  unsigned int cbSize;
  tagRECT rcBar;
  HMENU__ *hMenu;
  HWND__ *hwndMenu;
  __int32 fBarFocused : 1;
  __int32 fFocused : 1;
};

/* 5464 */
struct _BYTE_SIZEDARR
{
  unsigned int clSize;
  char *pData;
};

/* 5465 */
struct _CLUSTER_RANGE
{
  _LARGE_INTEGER StartingCluster;
  _LARGE_INTEGER ClusterCount;
};

/* 5466 */
struct _DRIVER_INFO_3W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  wchar_t *pHelpFile;
  wchar_t *pDependentFiles;
  wchar_t *pMonitorName;
  wchar_t *pDefaultDataType;
};

/* 5467 */
struct tagWTSSESSION_NOTIFICATION
{
  unsigned int cbSize;
  unsigned int dwSessionId;
};

/* 5468 */
struct __declspec(align(4)) tagPOINTER_DEVICE_INFO
{
  unsigned int displayOrientation;
  void *device;
  tagPOINTER_DEVICE_TYPE pointerDeviceType;
  HMONITOR__ *monitor;
  unsigned int startingCursorId;
  unsigned __int16 maxActiveContacts;
  wchar_t productString[520];
};

/* 5469 */
struct __declspec(align(8)) tagINTERFACEINFO
{
  IUnknown *pUnk;
  _GUID iid;
  unsigned __int16 wMethod;
};

/* 5470 */
struct __cppobj IXMLDOMEntityReference : IXMLDOMNode
{
};

/* 5471 */
struct __declspec(align(8)) PPM_IDLE_STATE_BUCKET_EX
{
  unsigned __int64 TotalTimeUs;
  unsigned int MinTimeUs;
  unsigned int MaxTimeUs;
  unsigned int Count;
};

/* 5472 */
struct PPM_IDLE_STATE_ACCOUNTING_EX
{
  unsigned __int64 TotalTime;
  unsigned int IdleTransitions;
  unsigned int FailedTransitions;
  unsigned int InvalidBucketIndex;
  unsigned int MinTimeUs;
  unsigned int MaxTimeUs;
  unsigned int CancelledTransitions;
  PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
};

/* 5473 */
struct HWAVEIN__
{
  int unused;
};

/* 5474 */
struct _CRYPT_CONTEXT_FUNCTION_CONFIG
{
  unsigned int dwFlags;
  unsigned int dwReserved;
};

/* 5475 */
struct sockaddr_in6_w2ksp1
{
  __int16 sin6_family;
  unsigned __int16 sin6_port;
  unsigned int sin6_flowinfo;
  in6_addr sin6_addr;
  unsigned int sin6_scope_id;
};

/* 5476 */
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 5477 */
struct __declspec(align(8)) _DRAGINFOA
{
  unsigned int uSize;
  tagPOINT pt;
  int fNC;
  char *lpFileList;
  unsigned int grfKeyState;
};

/* 5478 */
struct tagMIXERCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int fdwSupport;
  unsigned int cDestinations;
};

/* 5479 */
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
{
  char *pszObjId;
  unsigned int cValue;
  _CRYPTOAPI_BLOB *rgValue;
};

/* 5480 */
struct group_filter
{
  unsigned int gf_interface;
  sockaddr_storage gf_group;
  MULTICAST_MODE_TYPE gf_fmode;
  unsigned int gf_numsrc;
  sockaddr_storage gf_slist[1];
};

/* 5481 */
struct tagEMRSCALEVIEWPORTEXTEX
{
  tagEMR emr;
  int xNum;
  int xDenom;
  int yNum;
  int yDenom;
};

/* 5482 */
struct tagJOYCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  wchar_t szPname[32];
  unsigned int wXmin;
  unsigned int wXmax;
  unsigned int wYmin;
  unsigned int wYmax;
  unsigned int wZmin;
  unsigned int wZmax;
  unsigned int wNumButtons;
  unsigned int wPeriodMin;
  unsigned int wPeriodMax;
  unsigned int wRmin;
  unsigned int wRmax;
  unsigned int wUmin;
  unsigned int wUmax;
  unsigned int wVmin;
  unsigned int wVmax;
  unsigned int wCaps;
  unsigned int wMaxAxes;
  unsigned int wNumAxes;
  unsigned int wMaxButtons;
  wchar_t szRegKey[32];
  wchar_t szOEMVxD[260];
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 5483 */
struct joyinfoex_tag
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwXpos;
  unsigned int dwYpos;
  unsigned int dwZpos;
  unsigned int dwRpos;
  unsigned int dwUpos;
  unsigned int dwVpos;
  unsigned int dwButtons;
  unsigned int dwButtonNumber;
  unsigned int dwPOV;
  unsigned int dwReserved1;
  unsigned int dwReserved2;
};

/* 5484 */
union $BDD972C3AD5CBB6F30CECCBBD23C76ED
{
  unsigned __int16 *Reserved;
};

/* 5485 */
struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ProtocolSequence;
  unsigned __int16 *NetworkAddress;
  unsigned __int16 *StringEndpoint;
  $BDD972C3AD5CBB6F30CECCBBD23C76ED u1;
  _GUID ObjectUuid;
};

/* 5486 */
struct _CRYPT_MASK_GEN_ALGORITHM
{
  char *pszObjId;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
};

/* 5487 */
struct _CRYPT_RSA_SSA_PSS_PARAMETERS
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
  unsigned int dwSaltLength;
  unsigned int dwTrailerField;
};

/* 5488 */
struct __declspec(align(8)) _PRINTER_INFO_5W
{
  wchar_t *pPrinterName;
  wchar_t *pPortName;
  unsigned int Attributes;
  unsigned int DeviceNotSelectedTimeout;
  unsigned int TransmissionRetryTimeout;
};

/* 5489 */
struct tagEMRELLIPSE
{
  tagEMR emr;
  _RECTL rclBox;
};

/* 5490 */
struct _ACCESS_ALLOWED_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 5491 */
struct $79FA692AF2D868318B7516C685A0638E
{
  unsigned __int32 RatePercent : 7;
  unsigned __int32 Reserved0 : 25;
};

/* 5492 */
union _RATE_QUOTA_LIMIT
{
  unsigned int RateData;
  $79FA692AF2D868318B7516C685A0638E __s1;
};

/* 5493 */
struct $70D636CC6D3E102A1CB1CECA38555A4E
{
  char Flags;
};

/* 5494 */
struct $E7FD15DFD778E8FFF937F659685E7981
{
  unsigned int NodeNumber;
};

/* 5495 */
union $689B3A93474EF06D5CE18882FF565D68
{
  $70D636CC6D3E102A1CB1CECA38555A4E ProcessorCore;
  $E7FD15DFD778E8FFF937F659685E7981 NumaNode;
  _CACHE_DESCRIPTOR Cache;
  unsigned __int64 Reserved[2];
};

/* 5496 */
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
  unsigned __int64 ProcessorMask;
  _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  $689B3A93474EF06D5CE18882FF565D68 ___u2;
};

/* 5497 */
struct tagENHMETAHEADER
{
  unsigned int iType;
  unsigned int nSize;
  _RECTL rclBounds;
  _RECTL rclFrame;
  unsigned int dSignature;
  unsigned int nVersion;
  unsigned int nBytes;
  unsigned int nRecords;
  unsigned __int16 nHandles;
  unsigned __int16 sReserved;
  unsigned int nDescription;
  unsigned int offDescription;
  unsigned int nPalEntries;
  tagSIZE szlDevice;
  tagSIZE szlMillimeters;
  unsigned int cbPixelFormat;
  unsigned int offPixelFormat;
  unsigned int bOpenGL;
  tagSIZE szlMicrometers;
};

/* 5498 */
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
{
  unsigned int cbSize;
  $4BCA99CF3AFC900CAD02FCA6999AF57A ___u1;
  unsigned int dwKeySpec;
  _CMSG_KEY_AGREE_RECIPIENT_INFO *pKeyAgree;
  unsigned int dwRecipientIndex;
  unsigned int dwRecipientEncryptedKeyIndex;
  _CRYPT_BIT_BLOB OriginatorPublicKey;
};

/* 5499 */
struct _TAPE_WMI_OPERATIONS
{
  unsigned int Method;
  unsigned int DataBufferSize;
  void *DataBuffer;
};

/* 5500 */
struct __unaligned __declspec(align(4)) tagMCI_SYSINFO_PARMSW
{
  unsigned __int64 dwCallback;
  wchar_t *lpstrReturn;
  unsigned int dwRetSize;
  unsigned int dwNumber;
  unsigned int wDeviceType;
};

/* 5501 */
struct _SD_QUERY_STATS_INPUT
{
  unsigned int Reserved;
};

/* 5502 */
struct _SD_ENUM_SDS_INPUT
{
  unsigned __int64 StartingOffset;
  unsigned __int64 MaxSDEntriesToReturn;
};

/* 5503 */
union $9DDA9238673D435239D0DF2574159E07
{
  _SD_CHANGE_MACHINE_SID_INPUT SdChange;
  _SD_QUERY_STATS_INPUT SdQueryStats;
  _SD_ENUM_SDS_INPUT SdEnumSds;
};

/* 5504 */
struct _SD_GLOBAL_CHANGE_INPUT
{
  unsigned int Flags;
  unsigned int ChangeType;
  $9DDA9238673D435239D0DF2574159E07 ___u2;
};

/* 5505 */
struct __declspec(align(8)) tagGESTUREINFO
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int dwID;
  HWND__ *hwndTarget;
  tagPOINTS ptsLocation;
  unsigned int dwInstanceID;
  unsigned int dwSequenceID;
  unsigned __int64 ullArguments;
  unsigned int cbExtraArgs;
};

/* 5506 */
struct OPENCARD_SEARCH_CRITERIAW
{
  unsigned int dwStructSize;
  wchar_t *lpstrGroupNames;
  unsigned int nMaxGroupNames;
  _GUID *rgguidInterfaces;
  unsigned int cguidInterfaces;
  wchar_t *lpstrCardNames;
  unsigned int nMaxCardNames;
  int (__cdecl *lpfnCheck)(unsigned __int64, unsigned __int64, void *);
  unsigned __int64 (__cdecl *lpfnConnect)(unsigned __int64, wchar_t *, wchar_t *, void *);
  void (__cdecl *lpfnDisconnect)(unsigned __int64, unsigned __int64, void *);
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
};

/* 5507 */
struct __cppobj IAgileObject : IUnknown
{
};

/* 5508 */
struct _WSAQuerySet2A
{
  unsigned int dwSize;
  char *lpszServiceInstanceName;
  _WSAVersion *lpVersion;
  char *lpszComment;
  unsigned int dwNameSpace;
  _GUID *lpNSProviderId;
  char *lpszContext;
  unsigned int dwNumberOfProtocols;
  _AFPROTOCOLS *lpafpProtocols;
  char *lpszQueryString;
  unsigned int dwNumberOfCsAddrs;
  _CSADDR_INFO *lpcsaBuffer;
  unsigned int dwOutputFlags;
  tagBLOB *lpBlob;
};

/* 5509 */
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
{
  unsigned int cOID;
  char **rgpszOID;
};

/* 5510 */
struct _PRINTER_NOTIFY_INFO
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int Count;
  _PRINTER_NOTIFY_INFO_DATA aData[1];
};

/* 5511 */
struct __cppobj ISurrogate : IUnknown
{
};

/* 5512 */
struct _SE_SECURITY_DESCRIPTOR
{
  unsigned int Size;
  unsigned int Flags;
  void *SecurityDescriptor;
};

/* 5513 */
union $0055FF1BE34206123B9C488F0A43FAA0
{
  unsigned __int64 ForwarderString;
  unsigned __int64 Function;
  unsigned __int64 Ordinal;
  unsigned __int64 AddressOfData;
};

/* 5514 */
struct _IMAGE_THUNK_DATA64
{
  $0055FF1BE34206123B9C488F0A43FAA0 u1;
};

/* 5515 */
struct NCRYPT_ALLOC_PARA
{
  unsigned int cbSize;
  void *(__cdecl *pfnAlloc)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
};

/* 5516 */
struct _QUERY_FILE_LAYOUT_OUTPUT
{
  unsigned int FileEntryCount;
  unsigned int FirstFileOffset;
  unsigned int Flags;
  unsigned int Reserved;
};

/* 5517 */
struct _WSANAMESPACE_INFOW
{
  _GUID NSProviderId;
  unsigned int dwNameSpace;
  int fActive;
  unsigned int dwVersion;
  wchar_t *lpszIdentifier;
};

/* 5518 */
struct __declspec(align(16)) _SLIST_ENTRY
{
  _SLIST_ENTRY *Next;
};

/* 5519 */
struct __unaligned __declspec(align(4)) tagMCI_OVLY_WINDOW_PARMSA
{
  unsigned __int64 dwCallback;
  HWND__ *hWnd;
  unsigned int nCmdShow;
  const char *lpstrText;
};

/* 5520 */
struct __declspec(align(8)) _PRINTER_INFO_7A
{
  char *pszObjectGUID;
  unsigned int dwAction;
};

/* 5521 */
struct tagMOUSEMOVEPOINT
{
  int x;
  int y;
  unsigned int time;
  unsigned __int64 dwExtraInfo;
};

/* 5522 */
struct tagHIGHCONTRASTA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  char *lpszDefaultScheme;
};

/* 5523 */
struct _CERT_AUTHORITY_INFO_ACCESS
{
  unsigned int cAccDescr;
  _CERT_ACCESS_DESCRIPTION *rgAccDescr;
};

/* 5524 */
struct _CERT_STRONG_SIGN_SERIALIZED_INFO
{
  unsigned int dwFlags;
  wchar_t *pwszCNGSignHashAlgids;
  wchar_t *pwszCNGPubKeyMinBitLengths;
};

/* 5525 */
union $BA1756B610417A2528C81A939799B4D1
{
  void *pvInfo;
  _CERT_STRONG_SIGN_SERIALIZED_INFO *pSerializedInfo;
  char *pszOID;
};

/* 5526 */
struct _CERT_STRONG_SIGN_PARA
{
  unsigned int cbSize;
  unsigned int dwInfoChoice;
  $BA1756B610417A2528C81A939799B4D1 ___u2;
};

/* 5527 */
struct _CMSG_CNG_CONTENT_DECRYPT_INFO
{
  unsigned int cbSize;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *(__cdecl *pfnAlloc)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
  unsigned __int64 hNCryptKey;
  char *pbContentEncryptKey;
  unsigned int cbContentEncryptKey;
  void *hCNGContentEncryptKey;
  char *pbCNGContentEncryptKeyObject;
};

/* 5528 */
struct _WSANSClassInfoW
{
  wchar_t *lpszName;
  unsigned int dwNameSpace;
  unsigned int dwValueType;
  unsigned int dwValueSize;
  void *lpValue;
};

/* 5529 */
struct _JIT_DEBUG_INFO
{
  unsigned int dwSize;
  unsigned int dwProcessorArchitecture;
  unsigned int dwThreadID;
  unsigned int dwReserved0;
  unsigned __int64 lpExceptionAddress;
  unsigned __int64 lpExceptionRecord;
  unsigned __int64 lpContextRecord;
};

/* 5530 */
struct _FILE_IO_PRIORITY_HINT_INFO
{
  _PRIORITY_HINT PriorityHint;
};

/* 5531 */
struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA
{
  unsigned int cbSize;
  unsigned int dwRootProgramQualifierFlags;
};

/* 5532 */
struct _PRINTER_OPTIONSA
{
  unsigned int cbSize;
  unsigned int dwFlags;
};

/* 5533 */
struct __declspec(align(4)) tagEMRSETICMPROFILE
{
  tagEMR emr;
  unsigned int dwFlags;
  unsigned int cbName;
  unsigned int cbData;
  char Data[1];
};

/* 5534 */
struct __declspec(align(8)) _CERT_GENERAL_SUBTREE
{
  _CERT_ALT_NAME_ENTRY Base;
  unsigned int dwMinimum;
  int fMaximum;
  unsigned int dwMaximum;
};

/* 5535 */
struct __declspec(align(8)) _CERT_KEY_CONTEXT
{
  unsigned int cbSize;
  $4BCA99CF3AFC900CAD02FCA6999AF57A ___u1;
  unsigned int dwKeySpec;
};

/* 5536 */
struct _TAPE_GET_STATISTICS
{
  unsigned int Operation;
};

/* 5537 */
struct _PROVIDOR_INFO_1W
{
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDLLName;
};

/* 5538 */
struct __cppobj IDataFilter : IUnknown
{
};

/* 5539 */
struct __cppobj ITypeLib : IUnknown
{
};

/* 5540 */
struct __cppobj ITypeLib2 : ITypeLib
{
};

/* 5541 */
struct _IMAGE_BASE_RELOCATION
{
  unsigned int VirtualAddress;
  unsigned int SizeOfBlock;
};

/* 5542 */
struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION
{
  unsigned __int64 LastRecoveredLsn;
};

/* 5543 */
struct _PERF_COUNTER_DEFINITION
{
  unsigned int ByteLength;
  unsigned int CounterNameTitleIndex;
  unsigned int CounterNameTitle;
  unsigned int CounterHelpTitleIndex;
  unsigned int CounterHelpTitle;
  int DefaultScale;
  unsigned int DetailLevel;
  unsigned int CounterType;
  unsigned int CounterSize;
  unsigned int CounterOffset;
};

/* 5544 */
union $B5432B5766EACA8D7A891B0C9CA17601
{
  unsigned int cbStruct;
  unsigned int cbSize;
};

/* 5545 */
struct _HTTPSPolicyCallbackData
{
  $B5432B5766EACA8D7A891B0C9CA17601 ___u0;
  unsigned int dwAuthType;
  unsigned int fdwChecks;
  wchar_t *pwszServerName;
};

/* 5546 */
struct __declspec(align(4)) _FILE_STANDARD_INFO
{
  _LARGE_INTEGER AllocationSize;
  _LARGE_INTEGER EndOfFile;
  unsigned int NumberOfLinks;
  char DeletePending;
  char Directory;
};

/* 5547 */
struct tagWAVEINCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
};

/* 5548 */
struct __declspec(align(8)) _CERT_REVOCATION_CHAIN_PARA
{
  unsigned int cbSize;
  void *hChainEngine;
  void *hAdditionalStore;
  unsigned int dwChainFlags;
  unsigned int dwUrlRetrievalTimeout;
  _FILETIME *pftCurrentTime;
  _FILETIME *pftCacheResync;
  unsigned int cbMaxUrlRetrievalByteCount;
};

/* 5549 */
struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
{
  unsigned int cbSize;
  int iDeltaCrlIndicator;
  _FILETIME *pftCacheResync;
  _FILETIME *pLastSyncTime;
  _FILETIME *pMaxAgeTime;
  _CERT_REVOCATION_CHAIN_PARA *pChainPara;
  _CRYPTOAPI_BLOB *pDeltaCrlIndicator;
};

/* 5550 */
struct _POWER_SESSION_TIMEOUTS
{
  unsigned int InputTimeout;
  unsigned int DisplayTimeout;
};

/* 5551 */
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
{
  _GUID EnlistmentId;
  _GUID UOW;
};

/* 5552 */
struct tagMCI_OVLY_LOAD_PARMSA
{
  unsigned __int64 dwCallback;
  const char *lpfilename;
  tagRECT rc;
};

/* 5553 */
struct _wireSAFEARR_BSTR
{
  unsigned int Size;
  _FLAGGED_WORD_BLOB **aBstr;
};

/* 5554 */
struct _wireSAFEARR_UNKNOWN
{
  unsigned int Size;
  IUnknown **apUnknown;
};

/* 5555 */
struct _wireSAFEARR_DISPATCH
{
  unsigned int Size;
  IDispatch **apDispatch;
};

/* 5561 */
struct _wireSAFEARR_VARIANT
{
  unsigned int Size;
  _wireVARIANT **aVariant;
};

/* 5562 */
struct _SHORT_SIZEDARR
{
  unsigned int clSize;
  unsigned __int16 *pData;
};

/* 5563 */
struct _LONG_SIZEDARR
{
  unsigned int clSize;
  unsigned int *pData;
};

/* 5564 */
struct _HYPER_SIZEDARR
{
  unsigned int clSize;
  __int64 *pData;
};

/* 5556 */
union _wireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001
{
  _wireSAFEARR_BSTR BstrStr;
  _wireSAFEARR_UNKNOWN UnknownStr;
  _wireSAFEARR_DISPATCH DispatchStr;
  _wireSAFEARR_VARIANT VariantStr;
  _wireSAFEARR_BRECORD RecordStr;
  _wireSAFEARR_HAVEIID HaveIidStr;
  _BYTE_SIZEDARR ByteStr;
  _SHORT_SIZEDARR WordStr;
  _LONG_SIZEDARR LongStr;
  _HYPER_SIZEDARR HyperStr;
};

/* 5557 */
struct _wireSAFEARRAY_UNION
{
  unsigned int sfType;
  _wireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001 u;
};

/* 5558 */
struct _wireSAFEARRAY
{
  unsigned __int16 cDims;
  unsigned __int16 fFeatures;
  unsigned int cbElements;
  unsigned int cLocks;
  _wireSAFEARRAY_UNION uArrayStructs;
  tagSAFEARRAYBOUND rgsabound[1];
};

/* 5560 */
union $A24258997CF49729319391044A9A4EAC
{
  __int64 llVal;
  int lVal;
  char bVal;
  __int16 iVal;
  float fltVal;
  long double dblVal;
  __int16 boolVal;
  int scode;
  tagCY cyVal;
  long double date;
  _FLAGGED_WORD_BLOB *bstrVal;
  IUnknown *punkVal;
  IDispatch *pdispVal;
  _wireSAFEARRAY **parray;
  _wireBRECORD *brecVal;
  char *pbVal;
  __int16 *piVal;
  int *plVal;
  __int64 *pllVal;
  float *pfltVal;
  long double *pdblVal;
  __int16 *pboolVal;
  int *pscode;
  tagCY *pcyVal;
  long double *pdate;
  _FLAGGED_WORD_BLOB **pbstrVal;
  IUnknown **ppunkVal;
  IDispatch **ppdispVal;
  _wireSAFEARRAY ***pparray;
  _wireVARIANT **pvarVal;
  char cVal;
  unsigned __int16 uiVal;
  unsigned int ulVal;
  unsigned __int64 ullVal;
  int intVal;
  unsigned int uintVal;
  tagDEC decVal;
  tagDEC *pdecVal;
  char *pcVal;
  unsigned __int16 *puiVal;
  unsigned int *pulVal;
  unsigned __int64 *pullVal;
  int *pintVal;
  unsigned int *puintVal;
};

/* 5559 */
struct _wireVARIANT
{
  unsigned int clSize;
  unsigned int rpcReserved;
  unsigned __int16 vt;
  unsigned __int16 wReserved1;
  unsigned __int16 wReserved2;
  unsigned __int16 wReserved3;
  $A24258997CF49729319391044A9A4EAC ___u6;
};

/* 5565 */
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
{
  unsigned int MarshalCookie;
  _GUID UOW;
};

/* 5566 */
struct __declspec(align(8)) WSAData
{
  unsigned __int16 wVersion;
  unsigned __int16 wHighVersion;
  unsigned __int16 iMaxSockets;
  unsigned __int16 iMaxUdpDg;
  char *lpVendorInfo;
  char szDescription[257];
  char szSystemStatus[129];
};

/* 5567 */
struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
  DISPLAYCONFIG_DEVICE_INFO_TYPE type;
  unsigned int size;
  _LUID adapterId;
  unsigned int id;
};

/* 5568 */
struct DISPLAYCONFIG_2DREGION
{
  unsigned int cx;
  unsigned int cy;
};

/* 5569 */
struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
  unsigned __int64 pixelRate;
  DISPLAYCONFIG_RATIONAL hSyncFreq;
  DISPLAYCONFIG_RATIONAL vSyncFreq;
  DISPLAYCONFIG_2DREGION activeSize;
  DISPLAYCONFIG_2DREGION totalSize;
  unsigned int videoStandard;
  DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
};

/* 5570 */
struct DISPLAYCONFIG_TARGET_MODE
{
  DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
};

/* 5571 */
struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
  DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  unsigned int width;
  unsigned int height;
  DISPLAYCONFIG_TARGET_MODE targetMode;
};

/* 5572 */
struct __declspec(align(8)) tagPOINTER_INFO
{
  unsigned int pointerType;
  unsigned int pointerId;
  unsigned int frameId;
  unsigned int pointerFlags;
  void *sourceDevice;
  HWND__ *hwndTarget;
  tagPOINT ptPixelLocation;
  tagPOINT ptHimetricLocation;
  tagPOINT ptPixelLocationRaw;
  tagPOINT ptHimetricLocationRaw;
  unsigned int dwTime;
  unsigned int historyCount;
  int InputData;
  unsigned int dwKeyStates;
  unsigned __int64 PerformanceCount;
  tagPOINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
};

/* 5573 */
struct tagPOINTER_TOUCH_INFO
{
  tagPOINTER_INFO pointerInfo;
  unsigned int touchFlags;
  unsigned int touchMask;
  tagRECT rcContact;
  tagRECT rcContactRaw;
  unsigned int orientation;
  unsigned int pressure;
};

/* 5574 */
struct _BCRYPT_KEY_DATA_BLOB_HEADER
{
  unsigned int dwMagic;
  unsigned int dwVersion;
  unsigned int cbKeyData;
};

/* 5575 */
struct __declspec(align(8)) _DISK_GEOMETRY_EX
{
  _DISK_GEOMETRY Geometry;
  _LARGE_INTEGER DiskSize;
  char Data[1];
};

/* 5576 */
struct tagCANDIDATELIST
{
  unsigned int dwSize;
  unsigned int dwStyle;
  unsigned int dwCount;
  unsigned int dwSelection;
  unsigned int dwPageStart;
  unsigned int dwPageSize;
  unsigned int dwOffset[1];
};

/* 5577 */
struct tagACCESSTIMEOUT
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iTimeOutMSec;
};

/* 5578 */
struct _NCRYPT_KEY_BLOB_HEADER
{
  unsigned int cbSize;
  unsigned int dwMagic;
  unsigned int cbAlgName;
  unsigned int cbKeyData;
};

/* 5579 */
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
{
  unsigned int cbSize;
  unsigned int dwSignerIndex;
  _CRYPTOAPI_BLOB blob;
};

/* 5580 */
struct $128DC6859D4F5F31EFC1A0E86BC4A24B
{
  wchar_t *pPackageName;
  _GUID PolicyId;
};

/* 5581 */
struct $A1D77A31BE262EBBCF096EE9A6559FB5
{
  _GUID ObjectId;
  _GUID PolicyId;
};

/* 5582 */
union __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005
{
  _GUID clsid;
  wchar_t *pFileExt;
  wchar_t *pMimeType;
  wchar_t *pProgId;
  wchar_t *pFileName;
  $128DC6859D4F5F31EFC1A0E86BC4A24B ByName;
  $A1D77A31BE262EBBCF096EE9A6559FB5 ByObjectId;
};

/* 5583 */
struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
{
  unsigned int tyspec;
  __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005 tagged_union;
};

/* 5584 */
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
  void *CompletionKey;
  void *CompletionPort;
};

/* 5585 */
struct HWINEVENTHOOK__
{
  int unused;
};

/* 5586 */
struct tagMCI_OVLY_OPEN_PARMSA
{
  unsigned __int64 dwCallback;
  unsigned int wDeviceID;
  __unaligned __declspec(align(1)) const char *lpstrDeviceType;
  __unaligned __declspec(align(1)) const char *lpstrElementName;
  __unaligned __declspec(align(1)) const char *lpstrAlias;
  unsigned int dwStyle;
  HWND__ *hWndParent;
};

/* 5587 */
struct _CMC_TAGGED_CERT_REQUEST
{
  unsigned int dwBodyPartID;
  _CRYPTOAPI_BLOB SignedCertRequest;
};

/* 5588 */
struct _CMC_TAGGED_REQUEST
{
  unsigned int dwTaggedRequestChoice;
  _CMC_TAGGED_CERT_REQUEST *pTaggedCertRequest;
};

/* 5589 */
struct _userFLAG_STGMEDIUM
{
  int ContextFlags;
  int fPassOwnership;
  _userSTGMEDIUM Stgmed;
};

/* 5590 */
struct __cppobj IInternetBindInfo : IUnknown
{
};

/* 5591 */
struct tagMENUGETOBJECTINFO
{
  unsigned int dwFlags;
  unsigned int uPos;
  HMENU__ *hmenu;
  void *riid;
  void *pvObj;
};

/* 5592 */
struct __declspec(align(8)) _CMS_KEY_INFO
{
  unsigned int dwVersion;
  unsigned int Algid;
  char *pbOID;
  unsigned int cbOID;
};

/* 5593 */
struct _CTL_VERIFY_USAGE_PARA
{
  unsigned int cbSize;
  _CRYPTOAPI_BLOB ListIdentifier;
  unsigned int cCtlStore;
  void **rghCtlStore;
  unsigned int cSignerStore;
  void **rghSignerStore;
};

/* 5594 */
struct _JOB_INFO_4A
{
  unsigned int JobId;
  char *pPrinterName;
  char *pMachineName;
  char *pUserName;
  char *pDocument;
  char *pNotifyName;
  char *pDatatype;
  char *pPrintProcessor;
  char *pParameters;
  char *pDriverName;
  _devicemodeA *pDevMode;
  char *pStatus;
  void *pSecurityDescriptor;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int TotalPages;
  unsigned int Size;
  _SYSTEMTIME Submitted;
  unsigned int Time;
  unsigned int PagesPrinted;
  int SizeHigh;
};

/* 5595 */
struct __declspec(align(8)) _CMSG_KEY_TRANS_ENCRYPT_INFO
{
  unsigned int cbSize;
  unsigned int dwRecipientIndex;
  _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedKey;
  unsigned int dwFlags;
};

/* 5596 */
struct __declspec(align(2)) _MESSAGE_RESOURCE_ENTRY
{
  unsigned __int16 Length;
  unsigned __int16 Flags;
  char Text[1];
};

/* 5597 */
struct tagHIGHCONTRASTW
{
  unsigned int cbSize;
  unsigned int dwFlags;
  wchar_t *lpszDefaultScheme;
};

/* 5598 */
struct tagMCI_LOAD_PARMSA
{
  unsigned __int64 dwCallback;
  const char *lpfilename;
};

/* 5599 */
struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO
{
  unsigned int cbSize;
  unsigned int dwObjectType;
  unsigned int dwError;
  unsigned int dwReserved;
  _FILETIME ThisUpdateTime;
  _FILETIME NextUpdateTime;
  _FILETIME PublishTime;
};

/* 5600 */
struct _CRYPTNET_URL_CACHE_FLUSH_INFO
{
  unsigned int cbSize;
  unsigned int dwExemptSeconds;
  _FILETIME ExpireTime;
};

/* 5601 */
struct __declspec(align(8)) _CRYPTNET_URL_CACHE_RESPONSE_INFO
{
  unsigned int cbSize;
  unsigned __int16 wResponseType;
  unsigned __int16 wResponseFlags;
  _FILETIME LastModifiedTime;
  unsigned int dwMaxAge;
  const wchar_t *pwszETag;
  unsigned int dwProxyId;
};

/* 5602 */
struct _CRYPT_RETRIEVE_AUX_INFO
{
  unsigned int cbSize;
  _FILETIME *pLastSyncTime;
  unsigned int dwMaxUrlRetrievalByteCount;
  _CRYPTNET_URL_CACHE_PRE_FETCH_INFO *pPreFetchInfo;
  _CRYPTNET_URL_CACHE_FLUSH_INFO *pFlushInfo;
  _CRYPTNET_URL_CACHE_RESPONSE_INFO **ppResponseInfo;
  wchar_t *pwszCacheFileNamePrefix;
  _FILETIME *pftCacheResync;
  int fProxyCacheRetrieval;
  unsigned int dwHttpStatusCode;
};

/* 5603 */
struct tagSOLE_AUTHENTICATION_INFO
{
  unsigned int dwAuthnSvc;
  unsigned int dwAuthzSvc;
  void *pAuthInfo;
};

/* 5604 */
union $22971E98F1DCAE471B592EC18ECB1551
{
  unsigned int PhysicalAddress;
  unsigned int VirtualSize;
};

/* 5605 */
struct _IMAGE_SECTION_HEADER
{
  char Name[8];
  $22971E98F1DCAE471B592EC18ECB1551 Misc;
  unsigned int VirtualAddress;
  unsigned int SizeOfRawData;
  unsigned int PointerToRawData;
  unsigned int PointerToRelocations;
  unsigned int PointerToLinenumbers;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int Characteristics;
};

/* 5606 */
struct tagPOLYTEXTW
{
  int x;
  int y;
  unsigned int n;
  const wchar_t *lpstr;
  unsigned int uiFlags;
  tagRECT rcl;
  int *pdx;
};

/* 5607 */
struct __declspec(align(8)) _BCRYPT_PSS_PADDING_INFO
{
  const wchar_t *pszAlgId;
  unsigned int cbSalt;
};

/* 5608 */
struct OPENCARDNAMEW
{
  unsigned int dwStructSize;
  HWND__ *hwndOwner;
  unsigned __int64 hSCardContext;
  wchar_t *lpstrGroupNames;
  unsigned int nMaxGroupNames;
  wchar_t *lpstrCardNames;
  unsigned int nMaxCardNames;
  _GUID *rgguidInterfaces;
  unsigned int cguidInterfaces;
  wchar_t *lpstrRdr;
  unsigned int nMaxRdr;
  wchar_t *lpstrCard;
  unsigned int nMaxCard;
  const wchar_t *lpstrTitle;
  unsigned int dwFlags;
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  unsigned int dwActiveProtocol;
  unsigned __int64 (__cdecl *lpfnConnect)(unsigned __int64, wchar_t *, wchar_t *, void *);
  int (__cdecl *lpfnCheck)(unsigned __int64, unsigned __int64, void *);
  void (__cdecl *lpfnDisconnect)(unsigned __int64, unsigned __int64, void *);
  unsigned __int64 hCardHandle;
};

/* 5609 */
struct _CRYPT_PSOURCE_ALGORITHM
{
  char *pszObjId;
  _CRYPTOAPI_BLOB EncodingParameters;
};

/* 5610 */
struct _CRYPT_RSAES_OAEP_PARAMETERS
{
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
  _CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
};

/* 5611 */
struct $C4BD13166B83843322B5F643C76A1047
{
  __int64 LowPart;
  __int64 HighPart;
};

/* 5612 */
struct __declspec(align(8)) _TXFS_GET_METADATA_INFO_OUT
{
  $C4BD13166B83843322B5F643C76A1047 TxfFileId;
  _GUID LockingTransaction;
  unsigned __int64 LastLsn;
  unsigned int TransactionState;
};

/* 5613 */
struct _PORT_INFO_1W
{
  wchar_t *pName;
};

/* 5614 */
struct _LONGDOUBLE
{
  long double x;
};

/* 5615 */
struct PPM_PERFSTATE_DOMAIN_EVENT
{
  unsigned int State;
  unsigned int Latency;
  unsigned int Speed;
  unsigned __int64 Processors;
};

/* 5616 */
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
{
  unsigned int SavepointId;
};

/* 5617 */
struct tagGESTURENOTIFYSTRUCT
{
  unsigned int cbSize;
  unsigned int dwFlags;
  HWND__ *hwndTarget;
  tagPOINTS ptsLocation;
  unsigned int dwInstanceID;
};

/* 5618 */
struct tagWAVEINCAPSA
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  char szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
};

/* 5619 */
struct _CRL_REVOCATION_INFO
{
  _CRL_ENTRY *pCrlEntry;
  _CRL_CONTEXT *pCrlContext;
  _CERT_CHAIN_CONTEXT *pCrlIssuerChain;
};

/* 5620 */
struct _IDEREGS
{
  char bFeaturesReg;
  char bSectorCountReg;
  char bSectorNumberReg;
  char bCylLowReg;
  char bCylHighReg;
  char bDriveHeadReg;
  char bCommandReg;
  char bReserved;
};

/* 5621 */
struct __unaligned __declspec(align(1)) _SENDCMDINPARAMS
{
  unsigned int cBufferSize;
  _IDEREGS irDriveRegs;
  char bDriveNumber;
  char bReserved[3];
  unsigned int dwReserved[4];
  char bBuffer[1];
};

/* 5622 */
struct _BIDI_REQUEST_DATA
{
  unsigned int dwReqNumber;
  wchar_t *pSchema;
  _BIDI_DATA data;
};

/* 5623 */
struct _BIDI_REQUEST_CONTAINER
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int Count;
  _BIDI_REQUEST_DATA aData[1];
};

/* 5624 */
struct __cppobj IDropSource : IUnknown
{
};

/* 5625 */
struct _RETRIEVAL_POINTER_BASE
{
  _LARGE_INTEGER FileAreaOffset;
};

/* 5626 */
struct tagFINDREPLACEW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  unsigned int Flags;
  wchar_t *lpstrFindWhat;
  wchar_t *lpstrReplaceWith;
  unsigned __int16 wFindWhatLen;
  unsigned __int16 wReplaceWithLen;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const wchar_t *lpTemplateName;
};

/* 5627 */
struct _flowspec
{
  unsigned int TokenRate;
  unsigned int TokenBucketSize;
  unsigned int PeakBandwidth;
  unsigned int Latency;
  unsigned int DelayVariation;
  unsigned int ServiceType;
  unsigned int MaxSduSize;
  unsigned int MinimumPolicedSize;
};

/* 5628 */
struct _QualityOfService
{
  _flowspec SendingFlowspec;
  _flowspec ReceivingFlowspec;
  _WSABUF ProviderSpecific;
};

/* 5629 */
struct SYSTEM_BATTERY_STATE
{
  char AcOnLine;
  char BatteryPresent;
  char Charging;
  char Discharging;
  char Spare1[3];
  char Tag;
  unsigned int MaxCapacity;
  unsigned int RemainingCapacity;
  unsigned int Rate;
  unsigned int EstimatedTime;
  unsigned int DefaultAlert1;
  unsigned int DefaultAlert2;
};

/* 5630 */
struct _SYSTEM_SCOPED_POLICY_ID_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 5631 */
struct tagICONMETRICSA
{
  unsigned int cbSize;
  int iHorzSpacing;
  int iVertSpacing;
  int iTitleWrap;
  tagLOGFONTA lfFont;
};

/* 5632 */
struct wavehdr_tag
{
  char *lpData;
  unsigned int dwBufferLength;
  unsigned int dwBytesRecorded;
  unsigned __int64 dwUser;
  unsigned int dwFlags;
  unsigned int dwLoops;
  wavehdr_tag *lpNext;
  unsigned __int64 reserved;
};

/* 5633 */
struct _nlsversioninfo
{
  unsigned int dwNLSVersionInfoSize;
  unsigned int dwNLSVersion;
  unsigned int dwDefinedVersion;
  unsigned int dwEffectiveId;
  _GUID guidCustomVersion;
};

/* 5634 */
struct _RPC_SECURITY_QOS_V5_A
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  $438283C8A9CA248D8498A5EDEE1E59DB u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
};

/* 5635 */
struct __declspec(align(8)) _TRANSACTION_PROPERTIES_INFORMATION
{
  unsigned int IsolationLevel;
  unsigned int IsolationFlags;
  _LARGE_INTEGER Timeout;
  unsigned int Outcome;
  unsigned int DescriptionLength;
  wchar_t Description[1];
};

/* 5636 */
struct HMETAFILE__
{
  int unused;
};

/* 5637 */
struct tagMETAFILEPICT
{
  int mm;
  int xExt;
  int yExt;
  HMETAFILE__ *hMF;
};

/* 5638 */
struct tagAXESLISTW
{
  unsigned int axlReserved;
  unsigned int axlNumAxes;
  tagAXISINFOW axlAxisInfo[16];
};

/* 5639 */
struct __cppobj ITypeComp : IUnknown
{
};

/* 5640 */
struct __cppobj ITypeInfo : IUnknown
{
};

/* 5641 */
union tagBINDPTR
{
  tagFUNCDESC *lpfuncdesc;
  tagVARDESC *lpvardesc;
  ITypeComp *lptcomp;
};

/* 5642 */
struct _FOCUS_EVENT_RECORD
{
  int bSetFocus;
};

/* 5643 */
union $E5EC784184F61E2D1DB730C15D65FB8F
{
  void *hIcon;
  void *hMonitor;
};

/* 5644 */
struct _SHELLEXECUTEINFOA
{
  unsigned int cbSize;
  unsigned int fMask;
  HWND__ *hwnd;
  const char *lpVerb;
  const char *lpFile;
  const char *lpParameters;
  const char *lpDirectory;
  int nShow;
  HINSTANCE__ *hInstApp;
  void *lpIDList;
  const char *lpClass;
  HKEY__ *hkeyClass;
  unsigned int dwHotKey;
  $E5EC784184F61E2D1DB730C15D65FB8F ___u13;
  void *hProcess;
};

/* 5645 */
struct _CRYPT_HASH_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgEncodingType;
  unsigned __int64 hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
};

/* 5646 */
struct _CERT_BASIC_CONSTRAINTS_INFO
{
  _CRYPT_BIT_BLOB SubjectType;
  int fPathLenConstraint;
  unsigned int dwPathLenConstraint;
  unsigned int cSubtreesConstraint;
  _CRYPTOAPI_BLOB *rgSubtreesConstraint;
};

/* 5647 */
struct tagHELPWININFOW
{
  int wStructSize;
  int x;
  int y;
  int dx;
  int dy;
  int wMax;
  wchar_t rgchMember[2];
};

/* 5648 */
struct __declspec(align(8)) _numberfmtA
{
  unsigned int NumDigits;
  unsigned int LeadingZero;
  unsigned int Grouping;
  char *lpDecimalSep;
  char *lpThousandSep;
  unsigned int NegativeOrder;
};

/* 5649 */
struct _CERT_STORE_PROV_FIND_INFO
{
  unsigned int cbSize;
  unsigned int dwMsgAndCertEncodingType;
  unsigned int dwFindFlags;
  unsigned int dwFindType;
  const void *pvFindPara;
};

/* 5650 */
struct __declspec(align(8)) _BCRYPT_OAEP_PADDING_INFO
{
  const wchar_t *pszAlgId;
  char *pbLabel;
  unsigned int cbLabel;
};

/* 5651 */
struct _WSAServiceClassInfoW
{
  _GUID *lpServiceClassId;
  wchar_t *lpszServiceClassName;
  unsigned int dwCount;
  _WSANSClassInfoW *lpClassInfos;
};

/* 5652 */
struct tagHANDLETABLE
{
  void *objectHandle[1];
};

/* 5653 */
struct __declspec(align(8)) tagBinaryParam
{
  void *Buffer;
  __int16 Size;
};

/* 5654 */
struct _OCSP_REQUEST_ENTRY
{
  _OCSP_CERT_ID CertId;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 5655 */
struct _OCSP_REQUEST_INFO
{
  unsigned int dwVersion;
  _CERT_ALT_NAME_ENTRY *pRequestorName;
  unsigned int cRequestEntry;
  _OCSP_REQUEST_ENTRY *rgRequestEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 5656 */
struct $7C924936EBD9EC1686BC09279527D86D
{
  unsigned __int16 Write;
  unsigned __int16 Create;
  unsigned __int16 SetInfo;
  unsigned __int16 Flush;
};

/* 5657 */
struct $C659373CAE9F9E74FDBB0AC0E68C9269
{
  unsigned __int16 Write;
  unsigned __int16 Create;
  unsigned __int16 SetInfo;
};

/* 5658 */
struct $A9C6E7883B3D8C453F1F4181F1444E70
{
  unsigned int Calls;
  unsigned int Clusters;
  unsigned int Hints;
  unsigned int RunsReturned;
  unsigned int HintsHonored;
  unsigned int HintsClusters;
  unsigned int Cache;
  unsigned int CacheClusters;
  unsigned int CacheMiss;
  unsigned int CacheMissClusters;
};

/* 5659 */
struct _NTFS_STATISTICS
{
  unsigned int LogFileFullExceptions;
  unsigned int OtherExceptions;
  unsigned int MftReads;
  unsigned int MftReadBytes;
  unsigned int MftWrites;
  unsigned int MftWriteBytes;
  $7C924936EBD9EC1686BC09279527D86D MftWritesUserLevel;
  unsigned __int16 MftWritesFlushForLogFileFull;
  unsigned __int16 MftWritesLazyWriter;
  unsigned __int16 MftWritesUserRequest;
  unsigned int Mft2Writes;
  unsigned int Mft2WriteBytes;
  $7C924936EBD9EC1686BC09279527D86D Mft2WritesUserLevel;
  unsigned __int16 Mft2WritesFlushForLogFileFull;
  unsigned __int16 Mft2WritesLazyWriter;
  unsigned __int16 Mft2WritesUserRequest;
  unsigned int RootIndexReads;
  unsigned int RootIndexReadBytes;
  unsigned int RootIndexWrites;
  unsigned int RootIndexWriteBytes;
  unsigned int BitmapReads;
  unsigned int BitmapReadBytes;
  unsigned int BitmapWrites;
  unsigned int BitmapWriteBytes;
  unsigned __int16 BitmapWritesFlushForLogFileFull;
  unsigned __int16 BitmapWritesLazyWriter;
  unsigned __int16 BitmapWritesUserRequest;
  $C659373CAE9F9E74FDBB0AC0E68C9269 BitmapWritesUserLevel;
  unsigned int MftBitmapReads;
  unsigned int MftBitmapReadBytes;
  unsigned int MftBitmapWrites;
  unsigned int MftBitmapWriteBytes;
  unsigned __int16 MftBitmapWritesFlushForLogFileFull;
  unsigned __int16 MftBitmapWritesLazyWriter;
  unsigned __int16 MftBitmapWritesUserRequest;
  $7C924936EBD9EC1686BC09279527D86D MftBitmapWritesUserLevel;
  unsigned int UserIndexReads;
  unsigned int UserIndexReadBytes;
  unsigned int UserIndexWrites;
  unsigned int UserIndexWriteBytes;
  unsigned int LogFileReads;
  unsigned int LogFileReadBytes;
  unsigned int LogFileWrites;
  unsigned int LogFileWriteBytes;
  $A9C6E7883B3D8C453F1F4181F1444E70 Allocate;
};

/* 5660 */
struct __declspec(align(8)) tagSOUNDSENTRYA
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iFSTextEffect;
  unsigned int iFSTextEffectMSec;
  unsigned int iFSTextEffectColorBits;
  unsigned int iFSGrafEffect;
  unsigned int iFSGrafEffectMSec;
  unsigned int iFSGrafEffectColor;
  unsigned int iWindowsEffect;
  unsigned int iWindowsEffectMSec;
  char *lpszWindowsEffectDLL;
  unsigned int iWindowsEffectOrdinal;
};

/* 5661 */
struct _IMAGE_RESOURCE_DATA_ENTRY
{
  unsigned int OffsetToData;
  unsigned int Size;
  unsigned int CodePage;
  unsigned int Reserved;
};

/* 5662 */
struct _COMMTIMEOUTS
{
  unsigned int ReadIntervalTimeout;
  unsigned int ReadTotalTimeoutMultiplier;
  unsigned int ReadTotalTimeoutConstant;
  unsigned int WriteTotalTimeoutMultiplier;
  unsigned int WriteTotalTimeoutConstant;
};

/* 5663 */
struct tagAUDIODESCRIPTION
{
  unsigned int cbSize;
  int Enabled;
  unsigned int Locale;
};

/* 5664 */
union _SOCKADDR_INET
{
  sockaddr_in Ipv4;
  sockaddr_in6 Ipv6;
  unsigned __int16 si_family;
};

/* 5665 */
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 5666 */
struct _EXIT_PROCESS_DEBUG_INFO
{
  unsigned int dwExitCode;
};

/* 5667 */
struct _SHNAMEMAPPINGA
{
  char *pszOldPath;
  char *pszNewPath;
  int cchOldPath;
  int cchNewPath;
};

/* 5668 */
struct _CMC_ADD_ATTRIBUTES_INFO
{
  unsigned int dwCmcDataReference;
  unsigned int cCertReference;
  unsigned int *rgdwCertReference;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 5669 */
struct _ImageArchitectureEntry
{
  unsigned int FixupInstRVA;
  unsigned int NewInst;
};

/* 5670 */
union $4CFA15F5CE489CDF0BD78DFB308FEF36
{
  unsigned __int16 Ordinal;
  unsigned __int16 Hint;
};

/* 5671 */
struct IMPORT_OBJECT_HEADER
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  unsigned int SizeOfData;
  $4CFA15F5CE489CDF0BD78DFB308FEF36 ___u6;
  unsigned __int16 Type : 2;
  unsigned __int16 NameType : 3;
  unsigned __int16 Reserved : 11;
};

/* 5672 */
struct __declspec(align(8)) tagMSGBOXPARAMSW
{
  unsigned int cbSize;
  HWND__ *hwndOwner;
  HINSTANCE__ *hInstance;
  const wchar_t *lpszText;
  const wchar_t *lpszCaption;
  unsigned int dwStyle;
  const wchar_t *lpszIcon;
  unsigned __int64 dwContextHelpId;
  void (__cdecl *lpfnMsgBoxCallback)(tagHELPINFO *);
  unsigned int dwLanguageId;
};

/* 5673 */
struct __cppobj IContinue : IUnknown
{
};

/* 5674 */
struct _CRYPT_TIME_STAMP_REQUEST_INFO
{
  char *pszTimeStampAlgorithm;
  char *pszContentType;
  _CRYPTOAPI_BLOB Content;
  unsigned int cAttribute;
  _CRYPT_ATTRIBUTE *rgAttribute;
};

/* 5675 */
struct _CERT_AUTHORITY_KEY_ID2_INFO
{
  _CRYPTOAPI_BLOB KeyId;
  _CERT_ALT_NAME_INFO AuthorityCertIssuer;
  _CRYPTOAPI_BLOB AuthorityCertSerialNumber;
};

/* 5676 */
struct _WSAServiceClassInfoA
{
  _GUID *lpServiceClassId;
  char *lpszServiceClassName;
  unsigned int dwCount;
  _WSANSClassInfoA *lpClassInfos;
};

/* 5677 */
struct tagNONCLIENTMETRICSA
{
  unsigned int cbSize;
  int iBorderWidth;
  int iScrollWidth;
  int iScrollHeight;
  int iCaptionWidth;
  int iCaptionHeight;
  tagLOGFONTA lfCaptionFont;
  int iSmCaptionWidth;
  int iSmCaptionHeight;
  tagLOGFONTA lfSmCaptionFont;
  int iMenuWidth;
  int iMenuHeight;
  tagLOGFONTA lfMenuFont;
  tagLOGFONTA lfStatusFont;
  tagLOGFONTA lfMessageFont;
  int iPaddedBorderWidth;
};

/* 5678 */
struct tagRAWINPUTDEVICE
{
  unsigned __int16 usUsagePage;
  unsigned __int16 usUsage;
  unsigned int dwFlags;
  HWND__ *hwndTarget;
};

/* 5679 */
struct FIND_BY_SID_DATA
{
  unsigned int Restart;
  _SID Sid;
};

/* 5680 */
struct __declspec(align(8)) tagCREATESTRUCTW
{
  void *lpCreateParams;
  HINSTANCE__ *hInstance;
  HMENU__ *hMenu;
  HWND__ *hwndParent;
  int cy;
  int cx;
  int y;
  int x;
  int style;
  const wchar_t *lpszName;
  const wchar_t *lpszClass;
  unsigned int dwExStyle;
};

/* 5681 */
struct tagCBT_CREATEWNDW
{
  tagCREATESTRUCTW *lpcs;
  HWND__ *hwndInsertAfter;
};

/* 5682 */
struct __declspec(align(8)) USN_JOURNAL_DATA_V1
{
  unsigned __int64 UsnJournalID;
  __int64 FirstUsn;
  __int64 NextUsn;
  __int64 LowestValidUsn;
  __int64 MaxUsn;
  unsigned __int64 MaximumSize;
  unsigned __int64 AllocationDelta;
  unsigned __int16 MinSupportedMajorVersion;
  unsigned __int16 MaxSupportedMajorVersion;
};

/* 5683 */
struct __cppobj ICancelMethodCalls : IUnknown
{
};

/* 5684 */
union $9147EEC2A6A0D6D18E77123073749E92
{
  HBITMAP__ *hBitmap;
  void *hMetaFilePict;
  HENHMETAFILE__ *hEnhMetaFile;
  void *hGlobal;
  wchar_t *lpszFileName;
  IStream *pstm;
  IStorage *pstg;
};

/* 5685 */
struct tagSTGMEDIUM
{
  unsigned int tymed;
  $9147EEC2A6A0D6D18E77123073749E92 ___u1;
  IUnknown *pUnkForRelease;
};

/* 5686 */
struct _SECURITY_CAPABILITIES
{
  void *AppContainerSid;
  _SID_AND_ATTRIBUTES *Capabilities;
  unsigned int CapabilityCount;
  unsigned int Reserved;
};

/* 5687 */
struct tagMONERRSTRUCT
{
  unsigned int cb;
  unsigned int wLastError;
  unsigned int dwTime;
  void *hTask;
};

/* 5688 */
struct _PRINTPROCESSOR_INFO_1W
{
  wchar_t *pName;
};

/* 5689 */
struct __declspec(align(8)) tagACTCTX_SECTION_KEYED_DATA_2600
{
  unsigned int cbSize;
  unsigned int ulDataFormatVersion;
  void *lpData;
  unsigned int ulLength;
  void *lpSectionGlobalData;
  unsigned int ulSectionGlobalDataLength;
  void *lpSectionBase;
  unsigned int ulSectionTotalLength;
  void *hActCtx;
  unsigned int ulAssemblyRosterIndex;
};

/* 5690 */
struct __declspec(align(8)) _RPC_SERVER_INTERFACE
{
  unsigned int Length;
  _RPC_SYNTAX_IDENTIFIER InterfaceId;
  _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  RPC_DISPATCH_TABLE *DispatchTable;
  unsigned int RpcProtseqEndpointCount;
  _RPC_PROTSEQ_ENDPOINT *RpcProtseqEndpoint;
  void *DefaultManagerEpv;
  const void *InterpreterInfo;
  unsigned int Flags;
};

/* 5691 */
struct _FSCTL_OFFLOAD_WRITE_INPUT
{
  unsigned int Size;
  unsigned int Flags;
  unsigned __int64 FileOffset;
  unsigned __int64 CopyLength;
  unsigned __int64 TransferOffset;
  char Token[512];
};

/* 5692 */
struct _FILE_REGION_INFO
{
  __int64 FileOffset;
  __int64 Length;
  unsigned int Usage;
  unsigned int Reserved;
};

/* 5693 */
struct _FILE_REGION_OUTPUT
{
  unsigned int Flags;
  unsigned int TotalRegionEntryCount;
  unsigned int RegionEntryCount;
  unsigned int Reserved;
  _FILE_REGION_INFO Region[1];
};

/* 5694 */
struct __cppobj IServiceProvider : IUnknown
{
};

/* 5695 */
struct __cppobj IStdMarshalInfo : IUnknown
{
};

/* 5696 */
struct _PERFORMANCE_DATA
{
  unsigned __int16 Size;
  char Version;
  char HwCountersCount;
  unsigned int ContextSwitchCount;
  unsigned __int64 WaitReasonBitMap;
  unsigned __int64 CycleTime;
  unsigned int RetryCount;
  unsigned int Reserved;
  _HARDWARE_COUNTER_DATA HwCounters[16];
};

/* 5697 */
struct tagENUMUILANG
{
  unsigned int NumOfEnumUILang;
  unsigned int SizeOfEnumUIBuffer;
  unsigned __int16 *pEnumUIBuffer;
};

/* 5698 */
struct __declspec(align(8)) FLASHWINFO
{
  unsigned int cbSize;
  HWND__ *hwnd;
  unsigned int dwFlags;
  unsigned int uCount;
  unsigned int dwTimeout;
};

/* 5699 */
struct _CRYPT_OBJID_TABLE
{
  unsigned int dwAlgId;
  const char *pszObjId;
};

/* 5700 */
struct _DRIVE_LAYOUT_INFORMATION_MBR
{
  unsigned int Signature;
};

/* 5701 */
union $4F077125B7172EC8AD11F9623311A553
{
  _DRIVE_LAYOUT_INFORMATION_MBR Mbr;
  _DRIVE_LAYOUT_INFORMATION_GPT Gpt;
};

/* 5702 */
struct _DRIVE_LAYOUT_INFORMATION_EX
{
  unsigned int PartitionStyle;
  unsigned int PartitionCount;
  $4F077125B7172EC8AD11F9623311A553 ___u2;
  _PARTITION_INFORMATION_EX PartitionEntry[1];
};

/* 5703 */
struct _TXFS_WRITE_BACKUP_INFORMATION
{
  char Buffer[1];
};

/* 5704 */
struct _PERF_DATA_BLOCK
{
  wchar_t Signature[4];
  unsigned int LittleEndian;
  unsigned int Version;
  unsigned int Revision;
  unsigned int TotalByteLength;
  unsigned int HeaderLength;
  unsigned int NumObjectTypes;
  int DefaultObject;
  _SYSTEMTIME SystemTime;
  _LARGE_INTEGER PerfTime;
  _LARGE_INTEGER PerfFreq;
  _LARGE_INTEGER PerfTime100nSec;
  unsigned int SystemNameLength;
  unsigned int SystemNameOffset;
};

/* 5705 */
struct $FA729D9C7077E54C9287D7CBC1D6C8E2
{
  _LARGE_INTEGER Offset;
};

/* 5706 */
struct _BOOT_AREA_INFO
{
  unsigned int BootSectorCount;
  $FA729D9C7077E54C9287D7CBC1D6C8E2 BootSectors[2];
};

/* 5707 */
struct __declspec(align(4)) _MODEMDEVCAPS
{
  unsigned int dwActualSize;
  unsigned int dwRequiredSize;
  unsigned int dwDevSpecificOffset;
  unsigned int dwDevSpecificSize;
  unsigned int dwModemProviderVersion;
  unsigned int dwModemManufacturerOffset;
  unsigned int dwModemManufacturerSize;
  unsigned int dwModemModelOffset;
  unsigned int dwModemModelSize;
  unsigned int dwModemVersionOffset;
  unsigned int dwModemVersionSize;
  unsigned int dwDialOptions;
  unsigned int dwCallSetupFailTimer;
  unsigned int dwInactivityTimeout;
  unsigned int dwSpeakerVolume;
  unsigned int dwSpeakerMode;
  unsigned int dwModemOptions;
  unsigned int dwMaxDTERate;
  unsigned int dwMaxDCERate;
  char abVariablePortion[1];
};

/* 5708 */
struct tagWAVEOUTCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  unsigned int dwSupport;
};

/* 5709 */
struct _CERT_AUTHORITY_KEY_ID_INFO
{
  _CRYPTOAPI_BLOB KeyId;
  _CRYPTOAPI_BLOB CertIssuer;
  _CRYPTOAPI_BLOB CertSerialNumber;
};

/* 5710 */
struct _CERT_PAIR
{
  _CRYPTOAPI_BLOB Forward;
  _CRYPTOAPI_BLOB Reverse;
};

/* 5711 */
struct _DEVICE_DATA_SET_SCRUB_OUTPUT
{
  unsigned __int64 BytesProcessed;
  unsigned __int64 BytesRepaired;
  unsigned __int64 BytesFailed;
};

/* 5712 */
struct pc_token_s
{
  int type;
  int subtype;
  int intvalue;
  float floatvalue;
  char string[1024];
};

/* 5713 */
struct _EXCEPTION_REGISTRATION_RECORD
{
  _EXCEPTION_REGISTRATION_RECORD *Next;
  _EXCEPTION_DISPOSITION (__cdecl *Handler)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
};

/* 5715 */
union $7A727655067EA29DD1B3C3F7D79CBFD1
{
  void *FiberData;
  unsigned int Version;
};

/* 5714 */
struct _NT_TIB
{
  _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
  void *StackBase;
  void *StackLimit;
  void *SubSystemTib;
  $7A727655067EA29DD1B3C3F7D79CBFD1 ___u4;
  void *ArbitraryUserPointer;
  _NT_TIB *Self;
};

/* 5716 */
struct tagWINDOWPLACEMENT
{
  unsigned int length;
  unsigned int flags;
  unsigned int showCmd;
  tagPOINT ptMinPosition;
  tagPOINT ptMaxPosition;
  tagRECT rcNormalPosition;
};

/* 5717 */
struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
  unsigned int cbSize;
  _COORD dwSize;
  _COORD dwCursorPosition;
  unsigned __int16 wAttributes;
  _SMALL_RECT srWindow;
  _COORD dwMaximumWindowSize;
  unsigned __int16 wPopupAttributes;
  int bFullscreenSupported;
  unsigned int ColorTable[16];
};

/* 5718 */
struct __declspec(align(8)) _DISK_EX_INT13_INFO
{
  unsigned __int16 ExBufferSize;
  unsigned __int16 ExFlags;
  unsigned int ExCylinders;
  unsigned int ExHeads;
  unsigned int ExSectorsPerTrack;
  unsigned __int64 ExSectorsPerDrive;
  unsigned __int16 ExSectorSize;
  unsigned __int16 ExReserved;
};

/* 5719 */
struct _SERVICE_STATUS
{
  unsigned int dwServiceType;
  unsigned int dwCurrentState;
  unsigned int dwControlsAccepted;
  unsigned int dwWin32ExitCode;
  unsigned int dwServiceSpecificExitCode;
  unsigned int dwCheckPoint;
  unsigned int dwWaitHint;
};

/* 5720 */
struct __declspec(align(8)) _ENUM_SERVICE_STATUSW
{
  wchar_t *lpServiceName;
  wchar_t *lpDisplayName;
  _SERVICE_STATUS ServiceStatus;
};

/* 5721 */
union PackedLightingCoords
{
  unsigned int packed;
  char array[4];
};

/* 5722 */
struct _CONSOLE_FONT_INFOEX
{
  unsigned int cbSize;
  unsigned int nFont;
  _COORD dwFontSize;
  unsigned int FontFamily;
  unsigned int FontWeight;
  wchar_t FaceName[32];
};

/* 5723 */
struct __declspec(align(8)) value_entW
{
  wchar_t *ve_valuename;
  unsigned int ve_valuelen;
  unsigned __int64 ve_valueptr;
  unsigned int ve_type;
};

/* 5724 */
struct __unaligned __declspec(align(4)) tagMCI_INFO_PARMSW
{
  unsigned __int64 dwCallback;
  wchar_t *lpstrReturn;
  unsigned int dwRetSize;
};

/* 5725 */
struct _CRYPT_CONTEXT_FUNCTIONS
{
  unsigned int cFunctions;
  wchar_t **rgpszFunctions;
};

/* 5726 */
struct _CROSS_CERT_DIST_POINTS_INFO
{
  unsigned int dwSyncDeltaTime;
  unsigned int cDistPoint;
  _CERT_ALT_NAME_INFO *rgDistPoint;
};

/* 5727 */
struct __declspec(align(4)) _CHANGER_MOVE_MEDIUM
{
  _CHANGER_ELEMENT Transport;
  _CHANGER_ELEMENT Source;
  _CHANGER_ELEMENT Destination;
  char Flip;
};

/* 5728 */
struct _PACKEDEVENTINFO
{
  unsigned int ulSize;
  unsigned int ulNumEventsForLogFile;
  unsigned int ulOffsets[];
};

/* 5729 */
struct _RPC_BINDING_HANDLE_SECURITY_V1_A
{
  unsigned int Version;
  char *ServerPrincName;
  unsigned int AuthnLevel;
  unsigned int AuthnSvc;
  _SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
  _RPC_SECURITY_QOS *SecurityQos;
};

/* 5730 */
struct _ENCRYPTION_CERTIFICATE_LIST
{
  unsigned int nUsers;
  _ENCRYPTION_CERTIFICATE **pUsers;
};

/* 5731 */
struct sockproto
{
  unsigned __int16 sp_family;
  unsigned __int16 sp_protocol;
};

/* 5732 */
struct _POWER_SESSION_RIT_STATE
{
  char Active;
  unsigned int LastInputTime;
};

/* 5733 */
struct __declspec(align(8)) tagMULTI_QI
{
  _GUID *pIID;
  IUnknown *pItf;
  HRESULT hr;
};

/* 5734 */
struct _XSTATE_FEATURE
{
  unsigned int Offset;
  unsigned int Size;
};

/* 5735 */
struct _PSINJECTDATA
{
  unsigned int DataBytes;
  unsigned __int16 InjectionPoint;
  unsigned __int16 PageNumber;
};

/* 5736 */
struct tagMENUITEMINFOW
{
  unsigned int cbSize;
  unsigned int fMask;
  unsigned int fType;
  unsigned int fState;
  unsigned int wID;
  HMENU__ *hSubMenu;
  HBITMAP__ *hbmpChecked;
  HBITMAP__ *hbmpUnchecked;
  unsigned __int64 dwItemData;
  wchar_t *dwTypeData;
  unsigned int cch;
  HBITMAP__ *hbmpItem;
};

/* 5737 */
struct __cppobj IHttpNegotiate : IUnknown
{
};

/* 5738 */
struct __cppobj IHttpNegotiate2 : IHttpNegotiate
{
};

/* 5739 */
struct $1D6DC8237BA491DDA746AC6A0CA5DF74
{
  unsigned __int32 DisallowWin32kSystemCalls : 1;
  unsigned __int32 ReservedFlags : 31;
};

/* 5740 */
union $0F59C96983B1D6CCC08420273B2E100F
{
  unsigned int Flags;
  $1D6DC8237BA491DDA746AC6A0CA5DF74 __s1;
};

/* 5741 */
struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
{
  $0F59C96983B1D6CCC08420273B2E100F ___u0;
};

/* 5742 */
struct __declspec(align(8)) _FILE_ID_EXTD_DIR_INFO
{
  unsigned int NextEntryOffset;
  unsigned int FileIndex;
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  _LARGE_INTEGER EndOfFile;
  _LARGE_INTEGER AllocationSize;
  unsigned int FileAttributes;
  unsigned int FileNameLength;
  unsigned int EaSize;
  unsigned int ReparsePointTag;
  _FILE_ID_128 FileId;
  wchar_t FileName[1];
};

/* 5743 */
struct tagGCP_RESULTSA
{
  unsigned int lStructSize;
  char *lpOutString;
  unsigned int *lpOrder;
  int *lpDx;
  int *lpCaretPos;
  char *lpClass;
  wchar_t *lpGlyphs;
  unsigned int nGlyphs;
  int nMaxFit;
};

/* 5744 */
struct __cppobj IPersistFile : IPersist
{
};

/* 5745 */
struct _SERVICE_NOTIFY_1
{
  unsigned int dwVersion;
  void (__cdecl *pfnNotifyCallback)(void *);
  void *pContext;
  unsigned int dwNotificationStatus;
  _SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 5746 */
struct tagEMRFORMAT
{
  unsigned int dSignature;
  unsigned int nVersion;
  unsigned int cbData;
  unsigned int offData;
};

/* 5747 */
struct __unaligned __declspec(align(4)) tagMCI_VD_STEP_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwFrames;
};

/* 5748 */
struct _CRL_DIST_POINT
{
  _CRL_DIST_POINT_NAME DistPointName;
  _CRYPT_BIT_BLOB ReasonFlags;
  _CERT_ALT_NAME_INFO CRLIssuer;
};

/* 5749 */
struct _CRL_DIST_POINTS_INFO
{
  unsigned int cDistPoint;
  _CRL_DIST_POINT *rgDistPoint;
};

/* 5750 */
struct __declspec(align(8)) _FILE_REGION_INPUT
{
  __int64 FileOffset;
  __int64 Length;
  unsigned int DesiredUsage;
};

/* 5751 */
struct tagMETARECORD
{
  unsigned int rdSize;
  unsigned __int16 rdFunction;
  unsigned __int16 rdParm[1];
};

/* 5752 */
struct tagRPC_ERROR_ENUM_HANDLE
{
  unsigned int Signature;
  void *CurrentPos;
  void *Head;
};

/* 5753 */
struct _PERF_BIN
{
  unsigned int NumberOfBins;
  unsigned int TypeOfBin;
  _BIN_RANGE BinsRanges[1];
};

/* 5754 */
struct $69906765B125F119FB73678B07701BCC
{
  unsigned int cbReaderNameOffset;
  unsigned int cchReaderNameLength;
  unsigned int cbContainerNameOffset;
  unsigned int cchContainerNameLength;
  unsigned int dwDesiredCardModuleVersion;
  unsigned int dwCspFlags;
};

/* 5755 */
struct $B1B1FDCEC296BCE57FFAAF14CAD0F017
{
  unsigned int cbSerialNumberOffset;
  unsigned int cbSerialNumberLength;
  unsigned int dwDesiredCardModuleVersion;
};

/* 5756 */
union $55ABBCCDDD4849279665CB686FCABA69
{
  $69906765B125F119FB73678B07701BCC ReaderAndContainerParameter;
  $B1B1FDCEC296BCE57FFAAF14CAD0F017 SerialNumberParameter;
};

/* 5757 */
struct READER_SEL_REQUEST
{
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  READER_SEL_REQUEST_MATCH_TYPE MatchType;
  $55ABBCCDDD4849279665CB686FCABA69 ___u3;
};

/* 5758 */
struct SCARD_T0_COMMAND
{
  char bCla;
  char bIns;
  char bP1;
  char bP2;
  char bP3;
};

/* 5759 */
struct tagDISPPARAMS
{
  tagVARIANT *rgvarg;
  int *rgdispidNamedArgs;
  unsigned int cArgs;
  unsigned int cNamedArgs;
};

/* 5760 */
struct _GENERIC_MAPPING
{
  unsigned int GenericRead;
  unsigned int GenericWrite;
  unsigned int GenericExecute;
  unsigned int GenericAll;
};

/* 5761 */
struct _EFS_KEY_INFO
{
  unsigned int dwVersion;
  unsigned int Entropy;
  unsigned int Algorithm;
  unsigned int KeyLength;
};

/* 5762 */
struct __declspec(align(8)) _heapinfo
{
  int *_pentry;
  unsigned __int64 _size;
  int _useflag;
};

/* 5763 */
struct __declspec(align(8)) tagMONHSZSTRUCTW
{
  unsigned int cb;
  int fsAction;
  unsigned int dwTime;
  HSZ__ *hsz;
  void *hTask;
  wchar_t str[1];
};

/* 5764 */
struct tagTITLEBARINFOEX
{
  unsigned int cbSize;
  tagRECT rcTitleBar;
  unsigned int rgstate[6];
  tagRECT rgrect[6];
};

/* 5765 */
struct _SCONTEXT_QUEUE
{
  unsigned int NumberOfObjects;
  $3FA64165D15A4602C29B2D9B0DA4A5E9 **ArrayOfObjects;
};

/* 5766 */
struct __cppobj IMallocSpy : IUnknown
{
};

/* 5767 */
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
{
  void *TransportCredentials;
  unsigned int Flags;
  unsigned int AuthenticationTarget;
  unsigned int NumberOfAuthnSchemes;
  unsigned int *AuthnSchemes;
  char *ServerCertificateSubject;
  void *ProxyCredentials;
  unsigned int NumberOfProxyAuthnSchemes;
  unsigned int *ProxyAuthnSchemes;
};

/* 5768 */
struct tagServerInformation
{
  unsigned int dwServerPid;
  unsigned int dwServerTid;
  unsigned __int64 ui64ServerAddress;
};

/* 5769 */
struct tagMCI_WAVE_OPEN_PARMSW
{
  unsigned __int64 dwCallback;
  unsigned int wDeviceID;
  __unaligned __declspec(align(1)) const wchar_t *lpstrDeviceType;
  __unaligned __declspec(align(1)) const wchar_t *lpstrElementName;
  __unaligned __declspec(align(1)) const wchar_t *lpstrAlias;
  unsigned int dwBufferSeconds;
};

/* 5770 */
struct tagMIDIOUTCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned __int16 wTechnology;
  unsigned __int16 wVoices;
  unsigned __int16 wNotes;
  unsigned __int16 wChannelMask;
  unsigned int dwSupport;
};

/* 5771 */
struct _RPC_TRANSFER_SYNTAX
{
  _GUID Uuid;
  unsigned __int16 VersMajor;
  unsigned __int16 VersMinor;
};

/* 5772 */
struct _CRYPT_PROVIDER_REFS
{
  unsigned int cProviders;
  _CRYPT_PROVIDER_REF **rgpProviders;
};

/* 5773 */
struct _CRYPT_VERIFY_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgAndCertEncodingType;
  unsigned __int64 hCryptProv;
  _CERT_CONTEXT *(__cdecl *pfnGetSignerCertificate)(void *, unsigned int, _CERT_INFO *, void *);
  void *pvGetArg;
};

/* 5774 */
struct _SC_ACTION
{
  _SC_ACTION_TYPE Type;
  unsigned int Delay;
};

/* 5775 */
struct _SERVICE_FAILURE_ACTIONSA
{
  unsigned int dwResetPeriod;
  char *lpRebootMsg;
  char *lpCommand;
  unsigned int cActions;
  _SC_ACTION *lpsaActions;
};

/* 5776 */
struct HIMC__
{
  int unused;
};

/* 5777 */
struct _CMSG_SIGNER_ENCODE_INFO
{
  unsigned int cbSize;
  _CERT_INFO *pCertInfo;
  $4BCA99CF3AFC900CAD02FCA6999AF57A ___u2;
  unsigned int dwKeySpec;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
  unsigned int cAuthAttr;
  _CRYPT_ATTRIBUTE *rgAuthAttr;
  unsigned int cUnauthAttr;
  _CRYPT_ATTRIBUTE *rgUnauthAttr;
};

/* 5778 */
struct _CMSG_SIGNED_ENCODE_INFO
{
  unsigned int cbSize;
  unsigned int cSigners;
  _CMSG_SIGNER_ENCODE_INFO *rgSigners;
  unsigned int cCertEncoded;
  _CRYPTOAPI_BLOB *rgCertEncoded;
  unsigned int cCrlEncoded;
  _CRYPTOAPI_BLOB *rgCrlEncoded;
};

/* 5779 */
struct _CHANGER_PRODUCT_DATA
{
  char VendorId[8];
  char ProductId[16];
  char Revision[4];
  char SerialNumber[32];
  char DeviceType;
};

/* 5780 */
struct __declspec(align(8)) _FILE_ID_BOTH_DIR_INFO
{
  unsigned int NextEntryOffset;
  unsigned int FileIndex;
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  _LARGE_INTEGER EndOfFile;
  _LARGE_INTEGER AllocationSize;
  unsigned int FileAttributes;
  unsigned int FileNameLength;
  unsigned int EaSize;
  char ShortNameLength;
  wchar_t ShortName[12];
  _LARGE_INTEGER FileId;
  wchar_t FileName[1];
};

/* 5781 */
struct tagEMREXTCREATEPEN
{
  tagEMR emr;
  unsigned int ihPen;
  unsigned int offBmi;
  unsigned int cbBmi;
  unsigned int offBits;
  unsigned int cbBits;
  tagEXTLOGPEN32 elp;
};

/* 5782 */
struct tagMCI_OVLY_SAVE_PARMSA
{
  unsigned __int64 dwCallback;
  const char *lpfilename;
  tagRECT rc;
};

/* 5783 */
struct __cppobj IBindHost : IUnknown
{
};

/* 5784 */
union $66A2FC5ED47CB5912809650DAB14E256
{
  unsigned int VirtualAddress;
  unsigned int RelocCount;
};

/* 5785 */
struct __unaligned __declspec(align(2)) _IMAGE_RELOCATION
{
  $66A2FC5ED47CB5912809650DAB14E256 ___u0;
  unsigned int SymbolTableIndex;
  unsigned __int16 Type;
};

/* 5786 */
struct STARTING_LCN_INPUT_BUFFER
{
  _LARGE_INTEGER StartingLcn;
};

/* 5787 */
struct __declspec(align(8)) tagCHOOSEFONTW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HDC__ *hDC;
  tagLOGFONTW *lpLogFont;
  int iPointSize;
  unsigned int Flags;
  unsigned int rgbColors;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const wchar_t *lpTemplateName;
  HINSTANCE__ *hInstance;
  wchar_t *lpszStyle;
  unsigned __int16 nFontType;
  unsigned __int16 ___MISSING_ALIGNMENT__;
  int nSizeMin;
  int nSizeMax;
};

/* 5788 */
struct PPM_WMI_PERF_STATES
{
  unsigned int Count;
  unsigned int MaxFrequency;
  unsigned int CurrentState;
  unsigned int MaxPerfState;
  unsigned int MinPerfState;
  unsigned int LowestPerfState;
  unsigned int ThermalConstraint;
  char BusyAdjThreshold;
  char PolicyType;
  char Type;
  char Reserved;
  unsigned int TimerInterval;
  unsigned __int64 TargetProcessors;
  unsigned int PStateHandler;
  unsigned int PStateContext;
  unsigned int TStateHandler;
  unsigned int TStateContext;
  unsigned int FeedbackHandler;
  unsigned int Reserved1;
  unsigned __int64 Reserved2;
  PPM_WMI_PERF_STATE State[1];
};

/* 5789 */
struct _CRYPT_CONTEXT_CONFIG
{
  unsigned int dwFlags;
  unsigned int dwReserved;
};

/* 5790 */
struct __declspec(align(4)) _STORAGE_PROPERTY_QUERY
{
  _STORAGE_PROPERTY_ID PropertyId;
  _STORAGE_QUERY_TYPE QueryType;
  char AdditionalParameters[1];
};

/* 5791 */
struct _TXFS_LIST_TRANSACTION_LOCKED_FILES
{
  _GUID KtmTransaction;
  unsigned __int64 NumberOfFiles;
  unsigned __int64 BufferSizeRequired;
  unsigned __int64 Offset;
};

/* 5792 */
struct _SCARD_ATRMASK
{
  unsigned int cbAtr;
  char rgbAtr[36];
  char rgbMask[36];
};

/* 5793 */
struct _SET_DISK_ATTRIBUTES
{
  unsigned int Version;
  char Persist;
  char Reserved1[3];
  unsigned __int64 Attributes;
  unsigned __int64 AttributesMask;
  unsigned int Reserved2[4];
};

/* 5794 */
struct tagWNDCLASSW
{
  unsigned int style;
  __int64 (__cdecl *lpfnWndProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE__ *hInstance;
  HICON__ *hIcon;
  HICON__ *hCursor;
  HBRUSH__ *hbrBackground;
  const wchar_t *lpszMenuName;
  const wchar_t *lpszClassName;
};

/* 5795 */
struct _LANA_ENUM
{
  char length;
  char lana[255];
};

/* 5796 */
struct _CSV_QUERY_FILE_REVISION
{
  __int64 FileId;
  __int64 FileRevision[3];
};

/* 5797 */
struct __declspec(align(8)) _QUERY_SERVICE_LOCK_STATUSW
{
  unsigned int fIsLocked;
  wchar_t *lpLockOwner;
  unsigned int dwLockDuration;
};

/* 5798 */
struct _MOUSE_EVENT_RECORD
{
  _COORD dwMousePosition;
  unsigned int dwButtonState;
  unsigned int dwControlKeyState;
  unsigned int dwEventFlags;
};

/* 5799 */
struct __declspec(align(8)) _PRINTER_INFO_7W
{
  wchar_t *pszObjectGUID;
  unsigned int dwAction;
};

/* 5800 */
struct __cppobj IEnumUnknown : IUnknown
{
};

/* 5801 */
struct __cppobj ISupportErrorInfo : IUnknown
{
};

/* 5802 */
struct _TRANSACTIONMANAGER_OLDEST_INFORMATION
{
  _GUID OldestTransactionGuid;
};

/* 5803 */
struct $EDD1EC08CDF0EA53DE2B4E29DE21D19C
{
  unsigned int dwStreamNumber;
  unsigned int dwReserved;
  void *hSourceFile;
  void *hDestinationFile;
  _ULARGE_INTEGER uliChunkNumber;
  _ULARGE_INTEGER uliChunkSize;
  _ULARGE_INTEGER uliStreamSize;
  _ULARGE_INTEGER uliTotalFileSize;
};

/* 5804 */
struct $F6F029DD30B49FE4F001FCC6E36AAF6B
{
  unsigned int dwStreamNumber;
  unsigned int dwFlags;
  void *hSourceFile;
  void *hDestinationFile;
  _ULARGE_INTEGER uliChunkNumber;
  _ULARGE_INTEGER uliChunkSize;
  _ULARGE_INTEGER uliStreamSize;
  _ULARGE_INTEGER uliStreamBytesTransferred;
  _ULARGE_INTEGER uliTotalFileSize;
  _ULARGE_INTEGER uliTotalBytesTransferred;
};

/* 5805 */
struct $5799ED134DFDA3BF8853A4423A6E7897
{
  unsigned int dwStreamNumber;
  unsigned int dwReserved;
  void *hSourceFile;
  void *hDestinationFile;
  _ULARGE_INTEGER uliStreamSize;
  _ULARGE_INTEGER uliTotalFileSize;
};

/* 5806 */
struct $FEB07E945419F05E5A53AA3E037CD8BB
{
  unsigned int dwStreamNumber;
  unsigned int dwReserved;
  void *hSourceFile;
  void *hDestinationFile;
  _ULARGE_INTEGER uliStreamSize;
  _ULARGE_INTEGER uliStreamBytesTransferred;
  _ULARGE_INTEGER uliTotalFileSize;
  _ULARGE_INTEGER uliTotalBytesTransferred;
};

/* 5807 */
struct $0456DF57639FEDDCA6CE33A41A1E0359
{
  _COPYFILE2_COPY_PHASE CopyPhase;
  unsigned int dwStreamNumber;
  HRESULT hrFailure;
  unsigned int dwReserved;
  _ULARGE_INTEGER uliChunkNumber;
  _ULARGE_INTEGER uliStreamSize;
  _ULARGE_INTEGER uliStreamBytesTransferred;
  _ULARGE_INTEGER uliTotalFileSize;
  _ULARGE_INTEGER uliTotalBytesTransferred;
};

/* 5808 */
union $6C79B56FE459ED283EDC5E921D123F4A
{
  $EDD1EC08CDF0EA53DE2B4E29DE21D19C ChunkStarted;
  $F6F029DD30B49FE4F001FCC6E36AAF6B ChunkFinished;
  $5799ED134DFDA3BF8853A4423A6E7897 StreamStarted;
  $FEB07E945419F05E5A53AA3E037CD8BB StreamFinished;
  $3C5B0C4720CCBBB9E7E48366D9C24C6E PollContinue;
  $0456DF57639FEDDCA6CE33A41A1E0359 Error;
};

/* 5809 */
struct COPYFILE2_MESSAGE
{
  _COPYFILE2_MESSAGE_TYPE Type;
  unsigned int dwPadding;
  $6C79B56FE459ED283EDC5E921D123F4A Info;
};

/* 5810 */
struct tagMCI_OVLY_LOAD_PARMSW
{
  unsigned __int64 dwCallback;
  const wchar_t *lpfilename;
  tagRECT rc;
};

/* 5811 */
struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned int MaximumTokenLifetime;
  unsigned int DefaultTokenLifetime;
  unsigned __int64 MaximumTransferSize;
  unsigned __int64 OptimalTransferCount;
  unsigned int MaximumDataDescriptors;
  unsigned int MaximumTransferLengthPerDescriptor;
  unsigned int OptimalTransferLengthPerDescriptor;
  unsigned __int16 OptimalTransferLengthGranularity;
  char Reserved[2];
};

/* 5812 */
struct __cppobj IXMLDOMCharacterData : IXMLDOMNode
{
};

/* 5813 */
struct tagLOCALESIGNATURE
{
  unsigned int lsUsb[4];
  unsigned int lsCsbDefault[2];
  unsigned int lsCsbSupported[2];
};

/* 5814 */
struct _CONNECTDLGSTRUCTW
{
  unsigned int cbStructure;
  HWND__ *hwndOwner;
  _NETRESOURCEW *lpConnRes;
  unsigned int dwFlags;
  unsigned int dwDevNum;
};

/* 5815 */
struct tagRPC_CALL_ATTRIBUTES_V3_W
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ServerPrincipalNameBufferLength;
  unsigned __int16 *ServerPrincipalName;
  unsigned int ClientPrincipalNameBufferLength;
  unsigned __int16 *ClientPrincipalName;
  unsigned int AuthenticationLevel;
  unsigned int AuthenticationService;
  int NullSession;
  int KernelModeCaller;
  unsigned int ProtocolSequence;
  tagRpcCallClientLocality IsClientLocal;
  void *ClientPID;
  unsigned int CallStatus;
  tagRpcCallType CallType;
  _RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
  unsigned __int16 OpNum;
  _GUID InterfaceUuid;
  unsigned int ClientIdentifierBufferLength;
  char *ClientIdentifier;
};

/* 5816 */
struct _GP_LOG_PAGE_DESCRIPTOR
{
  unsigned __int16 LogAddress;
  unsigned __int16 LogSectors;
};

/* 5817 */
struct __declspec(align(8)) tagWINDOWPOS
{
  HWND__ *hwnd;
  HWND__ *hwndInsertAfter;
  int x;
  int y;
  int cx;
  int cy;
  unsigned int flags;
};

/* 5818 */
struct tagNCCALCSIZE_PARAMS
{
  tagRECT rgrc[3];
  tagWINDOWPOS *lppos;
};

/* 5819 */
struct __declspec(align(8)) tagMONHSZSTRUCTA
{
  unsigned int cb;
  int fsAction;
  unsigned int dwTime;
  HSZ__ *hsz;
  void *hTask;
  char str[1];
};

/* 5820 */
union $124274EBC4FC1E36E517B2E36B56E09E
{
  unsigned int UsnSourceInfo;
  unsigned int CopyNumber;
};

/* 5821 */
struct __declspec(align(8)) MARK_HANDLE_INFO
{
  $124274EBC4FC1E36E517B2E36B56E09E ___u0;
  void *VolumeHandle;
  unsigned int HandleInfo;
};

/* 5822 */
struct __cppobj IClientSecurity : IUnknown
{
};

/* 5823 */
struct __declspec(align(8)) tagSOLE_AUTHENTICATION_SERVICE
{
  unsigned int dwAuthnSvc;
  unsigned int dwAuthzSvc;
  wchar_t *pPrincipalName;
  HRESULT hr;
};

/* 5824 */
struct $80E11EBE8E28E910F394B6BB44847A0B
{
  HWND__ *hWnd;
  unsigned int uMsg;
  unsigned __int64 context;
};

/* 5825 */
struct $D0B881808D8A63BBE4023EE9F92EA15D
{
  _OVERLAPPED *lpOverlapped;
};

/* 5826 */
struct $EC97A16E5139569A90340232476FBFE6
{
  _OVERLAPPED *lpOverlapped;
  void (__cdecl *lpfnCompletionProc)(unsigned int, unsigned int, _OVERLAPPED *, unsigned int);
};

/* 5827 */
struct $52FF2EDDACDF239F51BD16D0437572D7
{
  _OVERLAPPED *lpOverlapped;
  void *hPort;
  unsigned __int64 Key;
};

/* 5828 */
union $3AEFE7A0D10A897198A758FD04ADFB45
{
  $80E11EBE8E28E910F394B6BB44847A0B WindowMessage;
  $D0B881808D8A63BBE4023EE9F92EA15D Event;
  $EC97A16E5139569A90340232476FBFE6 Apc;
  $52FF2EDDACDF239F51BD16D0437572D7 Port;
};

/* 5829 */
struct _WSACOMPLETION
{
  _WSACOMPLETIONTYPE Type;
  $3AEFE7A0D10A897198A758FD04ADFB45 Parameters;
};

/* 5830 */
struct _IMAGE_SEPARATE_DEBUG_HEADER
{
  unsigned __int16 Signature;
  unsigned __int16 Flags;
  unsigned __int16 Machine;
  unsigned __int16 Characteristics;
  unsigned int TimeDateStamp;
  unsigned int CheckSum;
  unsigned int ImageBase;
  unsigned int SizeOfImage;
  unsigned int NumberOfSections;
  unsigned int ExportedNamesSize;
  unsigned int DebugDirectorySize;
  unsigned int SectionAlignment;
  unsigned int Reserved[2];
};

/* 5831 */
struct __declspec(align(8)) tagCOMPAREITEMSTRUCT
{
  unsigned int CtlType;
  unsigned int CtlID;
  HWND__ *hwndItem;
  unsigned int itemID1;
  unsigned __int64 itemData1;
  unsigned int itemID2;
  unsigned __int64 itemData2;
  unsigned int dwLocaleId;
};

/* 5832 */
struct tagPOINTER_DEVICE_PROPERTY
{
  int logicalMin;
  int logicalMax;
  int physicalMin;
  int physicalMax;
  unsigned int unit;
  unsigned int unitExponent;
  unsigned __int16 usagePageId;
  unsigned __int16 usageId;
};

/* 5833 */
struct $F10B7358C253DFE8D052089404AC5994
{
  char hour;
  char min;
  char sec;
  char frame;
  char fps;
  char dummy;
  char pad[2];
};

/* 5834 */
struct $34B59DAB5B49726BB742663EC7E89904
{
  unsigned int songptrpos;
};

/* 5835 */
union $F177B12552B6DFE34035C83079706508
{
  unsigned int ms;
  unsigned int sample;
  unsigned int cb;
  unsigned int ticks;
  $F10B7358C253DFE8D052089404AC5994 smpte;
  $34B59DAB5B49726BB742663EC7E89904 midi;
};

/* 5836 */
struct mmtime_tag
{
  unsigned int wType;
  $F177B12552B6DFE34035C83079706508 u;
};

/* 5837 */
struct tagCHOOSECOLORW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  HWND__ *hInstance;
  unsigned int rgbResult;
  unsigned int *lpCustColors;
  unsigned int Flags;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const wchar_t *lpTemplateName;
};

/* 5838 */
struct __unaligned __declspec(align(4)) tagMCI_OVLY_WINDOW_PARMSW
{
  unsigned __int64 dwCallback;
  HWND__ *hWnd;
  unsigned int nCmdShow;
  const wchar_t *lpstrText;
};

/* 5839 */
struct __cppobj IMarshal : IUnknown
{
};

/* 5840 */
struct __cppobj IMarshal2 : IMarshal
{
};

/* 5841 */
struct ASSOCIATIONELEMENT
{
  ASSOCCLASS ac;
  HKEY__ *hkClass;
  const wchar_t *pszClass;
};

/* 5842 */
struct _TXFS_LIST_TRANSACTIONS_ENTRY
{
  _GUID TransactionId;
  unsigned int TransactionState;
  unsigned int Reserved1;
  unsigned int Reserved2;
  __int64 Reserved3;
};

/* 5843 */
struct __cppobj IClassFactory : IUnknown
{
};

/* 5844 */
struct __cppobj ICallFactory : IUnknown
{
};

/* 5845 */
struct __cppobj IRootStorage : IUnknown
{
};

/* 5846 */
struct __cppobj IWinInetCacheHints2 : IWinInetCacheHints
{
};

/* 5847 */
struct __declspec(align(8)) _ENUM_SERVICE_STATUSA
{
  char *lpServiceName;
  char *lpDisplayName;
  _SERVICE_STATUS ServiceStatus;
};

/* 5848 */
struct tagEMRRESTOREDC
{
  tagEMR emr;
  int iRelative;
};

/* 5849 */
struct __declspec(align(8)) READ_USN_JOURNAL_DATA_V1
{
  __int64 StartUsn;
  unsigned int ReasonMask;
  unsigned int ReturnOnlyOnClose;
  unsigned __int64 Timeout;
  unsigned __int64 BytesToWaitFor;
  unsigned __int64 UsnJournalID;
  unsigned __int16 MinMajorVersion;
  unsigned __int16 MaxMajorVersion;
};

/* 5850 */
struct __cppobj IXMLDSOControl : IDispatch
{
};

/* 5851 */
struct tagDEVNAMES
{
  unsigned __int16 wDriverOffset;
  unsigned __int16 wDeviceOffset;
  unsigned __int16 wOutputOffset;
  unsigned __int16 wDefault;
};

/* 5852 */
struct STORAGE_BREAK_RESERVATION_REQUEST
{
  unsigned int Length;
  char _unused;
  char PathId;
  char TargetId;
  char Lun;
};

/* 5853 */
struct _UMS_CREATE_THREAD_ATTRIBUTES
{
  unsigned int UmsVersion;
  void *UmsContext;
  void *UmsCompletionList;
};

/* 5854 */
struct _MESSAGE_RESOURCE_DATA
{
  unsigned int NumberOfBlocks;
  _MESSAGE_RESOURCE_BLOCK Blocks[1];
};

/* 5855 */
struct _cpinfoexW
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
  wchar_t UnicodeDefaultChar;
  unsigned int CodePage;
  wchar_t CodePageName[260];
};

/* 5856 */
struct tagIMECHARPOSITION
{
  unsigned int dwSize;
  unsigned int dwCharPos;
  tagPOINT pt;
  unsigned int cLineHeight;
  tagRECT rcDocument;
};

/* 5857 */
struct $3F637E9514009DECFE5B852E9243EE23
{
  unsigned __int64 Depth : 16;
  unsigned __int64 Sequence : 9;
  unsigned __int64 NextEntry : 39;
  unsigned __int64 HeaderType : 1;
  unsigned __int64 Init : 1;
  unsigned __int64 Reserved : 59;
  unsigned __int64 Region : 3;
};

/* 5858 */
struct $81D0B81343CD6A575F52E6033C50E59F
{
  unsigned __int64 Depth : 16;
  unsigned __int64 Sequence : 48;
  unsigned __int64 HeaderType : 1;
  unsigned __int64 Reserved : 3;
  unsigned __int64 NextEntry : 60;
};

/* 5859 */
struct $37C35E5C8CCF236A60767E3040AC49D0
{
  unsigned __int64 Alignment;
  unsigned __int64 Region;
};

/* 5860 */
union _SLIST_HEADER
{
  $37C35E5C8CCF236A60767E3040AC49D0 __s0;
  $3F637E9514009DECFE5B852E9243EE23 Header8;
  $81D0B81343CD6A575F52E6033C50E59F HeaderX64;
};

/* 5861 */
struct _UNIVERSAL_NAME_INFOW
{
  wchar_t *lpUniversalName;
};

/* 5862 */
struct __declspec(align(4)) _TAPE_WRITE_MARKS
{
  unsigned int Type;
  unsigned int Count;
  char Immediate;
};

/* 5863 */
struct tagSTYLEBUFA
{
  unsigned int dwStyle;
  char szDescription[32];
};

/* 5864 */
struct tagCURSORINFO
{
  unsigned int cbSize;
  unsigned int flags;
  HICON__ *hCursor;
  tagPOINT ptScreenPos;
};

/* 5865 */
struct __declspec(align(8)) value_entA
{
  char *ve_valuename;
  unsigned int ve_valuelen;
  unsigned __int64 ve_valueptr;
  unsigned int ve_type;
};

/* 5866 */
struct tagENUMLOGFONTEXW
{
  tagLOGFONTW elfLogFont;
  wchar_t elfFullName[64];
  wchar_t elfStyle[32];
  wchar_t elfScript[32];
};

/* 5867 */
struct tagENUMLOGFONTEXDVW
{
  tagENUMLOGFONTEXW elfEnumLogfontEx;
  tagDESIGNVECTOR elfDesignVector;
};

/* 5868 */
struct _STORAGE_READ_CAPACITY
{
  unsigned int Version;
  unsigned int Size;
  unsigned int BlockLength;
  _LARGE_INTEGER NumberOfBlocks;
  _LARGE_INTEGER DiskLength;
};

/* 5869 */
struct __cppobj ITypeChangeEvents : IUnknown
{
};

/* 5870 */
struct _IO_COUNTERS
{
  unsigned __int64 ReadOperationCount;
  unsigned __int64 WriteOperationCount;
  unsigned __int64 OtherOperationCount;
  unsigned __int64 ReadTransferCount;
  unsigned __int64 WriteTransferCount;
  unsigned __int64 OtherTransferCount;
};

/* 5871 */
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{
  _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
  _IO_COUNTERS IoInfo;
  unsigned __int64 ProcessMemoryLimit;
  unsigned __int64 JobMemoryLimit;
  unsigned __int64 PeakProcessMemoryUsed;
  unsigned __int64 PeakJobMemoryUsed;
};

/* 5872 */
struct tagPSDW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  unsigned int Flags;
  tagPOINT ptPaperSize;
  tagRECT rtMinMargin;
  tagRECT rtMargin;
  HINSTANCE__ *hInstance;
  __int64 lCustData;
  unsigned __int64 (__cdecl *lpfnPageSetupHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  unsigned __int64 (__cdecl *lpfnPagePaintHook)(HWND__ *, unsigned int, unsigned __int64, __int64);
  const wchar_t *lpPageSetupTemplateName;
  void *hPageSetupTemplate;
};

/* 5873 */
struct _STORAGE_DESCRIPTOR_HEADER
{
  unsigned int Version;
  unsigned int Size;
};

/* 5874 */
struct tagMIXERCONTROLDETAILS_LISTTEXTW
{
  unsigned int dwParam1;
  unsigned int dwParam2;
  wchar_t szName[64];
};

/* 5875 */
struct __declspec(align(8)) _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
{
  unsigned __int64 Offset;
  unsigned int NameFlags;
  __int64 FileId;
  unsigned int Reserved1;
  unsigned int Reserved2;
  __int64 Reserved3;
  wchar_t FileName[1];
};

/* 5876 */
struct tagTOUCHINPUT
{
  int x;
  int y;
  void *hSource;
  unsigned int dwID;
  unsigned int dwFlags;
  unsigned int dwMask;
  unsigned int dwTime;
  unsigned __int64 dwExtraInfo;
  unsigned int cxContact;
  unsigned int cyContact;
};

/* 5877 */
struct _FSCTL_QUERY_FAT_BPB_BUFFER
{
  char First0x24BytesOfBootSector[36];
};

/* 5878 */
struct _DRIVER_INFO_6A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  char *pHelpFile;
  char *pDependentFiles;
  char *pMonitorName;
  char *pDefaultDataType;
  char *pszzPreviousNames;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  char *pszMfgName;
  char *pszOEMUrl;
  char *pszHardwareID;
  char *pszProvider;
};

/* 5879 */
struct __cppobj AsyncIMultiQI : IUnknown
{
};

/* 5880 */
struct __cppobj IApartmentShutdown : IUnknown
{
};

/* 5881 */
struct _nlsversioninfoex
{
  unsigned int dwNLSVersionInfoSize;
  unsigned int dwNLSVersion;
  unsigned int dwDefinedVersion;
  unsigned int dwEffectiveId;
  _GUID guidCustomVersion;
};

/* 5882 */
struct __declspec(align(8)) _tagBINDINFO
{
  unsigned int cbSize;
  wchar_t *szExtraInfo;
  tagSTGMEDIUM stgmedData;
  unsigned int grfBindInfoF;
  unsigned int dwBindVerb;
  wchar_t *szCustomVerb;
  unsigned int cbstgmedData;
  unsigned int dwOptions;
  unsigned int dwOptionsFlags;
  unsigned int dwCodePage;
  _SECURITY_ATTRIBUTES securityAttributes;
  _GUID iid;
  IUnknown *pUnk;
  unsigned int dwReserved;
};

/* 5883 */
struct __declspec(align(8)) _WGLSWAP
{
  HDC__ *hdc;
  unsigned int uiFlags;
};

/* 5884 */
struct _SHELLEXECUTEINFOW
{
  unsigned int cbSize;
  unsigned int fMask;
  HWND__ *hwnd;
  const wchar_t *lpVerb;
  const wchar_t *lpFile;
  const wchar_t *lpParameters;
  const wchar_t *lpDirectory;
  int nShow;
  HINSTANCE__ *hInstApp;
  void *lpIDList;
  const wchar_t *lpClass;
  HKEY__ *hkeyClass;
  unsigned int dwHotKey;
  $E5EC784184F61E2D1DB730C15D65FB8F ___u13;
  void *hProcess;
};

/* 5885 */
struct _CERT_NAME_CONSTRAINTS_INFO
{
  unsigned int cPermittedSubtree;
  _CERT_GENERAL_SUBTREE *rgPermittedSubtree;
  unsigned int cExcludedSubtree;
  _CERT_GENERAL_SUBTREE *rgExcludedSubtree;
};

/* 5886 */
struct __declspec(align(8)) _STORAGE_OFFLOAD_READ_OUTPUT
{
  unsigned int OffloadReadFlags;
  unsigned int Reserved;
  unsigned __int64 LengthProtected;
  unsigned int TokenLength;
  _STORAGE_OFFLOAD_TOKEN Token;
};

/* 5887 */
struct HMIDIOUT__
{
  int unused;
};

/* 5888 */
struct __declspec(align(8)) tagCLEANLOCALSTORAGE
{
  IUnknown *pInterface;
  void *pStorage;
  unsigned int flags;
};

/* 5889 */
struct _TOKEN_APPCONTAINER_INFORMATION
{
  void *TokenAppContainer;
};

/* 5890 */
struct tagCHARSETINFO
{
  unsigned int ciCharset;
  unsigned int ciACP;
  tagFONTSIGNATURE fs;
};

/* 5891 */
struct tagTTPOLYGONHEADER
{
  unsigned int cb;
  unsigned int dwType;
  tagPOINTFX pfxStart;
};

/* 5892 */
struct __cppobj IBindProtocol : IUnknown
{
};

/* 5893 */
struct __cppobj IBinding : IUnknown
{
};

/* 5894 */
struct __declspec(align(8)) _SERVICE_CONTROL_STATUS_REASON_PARAMSA
{
  unsigned int dwReason;
  char *pszComment;
  _SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 5895 */
struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
  char Name[16];
  char Date[12];
  char UserID[6];
  char GroupID[6];
  char Mode[8];
  char Size[10];
  char EndHeader[2];
};

/* 5896 */
struct __unaligned __declspec(align(1)) _DEVICEDUMP_PUBLIC_SUBSECTION
{
  unsigned int dwFlags;
  _GP_LOG_PAGE_DESCRIPTOR GPLogTable[16];
  char szDescription[16];
  char bData[1];
};

/* 5897 */
struct __declspec(align(8)) _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
{
  unsigned int cbSize;
  unsigned int dwInfoVersion;
  char *pbNonce;
  unsigned int cbNonce;
  char *pbAuthData;
  unsigned int cbAuthData;
  char *pbTag;
  unsigned int cbTag;
  char *pbMacContext;
  unsigned int cbMacContext;
  unsigned int cbAAD;
  unsigned __int64 cbData;
  unsigned int dwFlags;
};

/* 5898 */
struct _CERT_DSS_PARAMETERS
{
  _CRYPTOAPI_BLOB p;
  _CRYPTOAPI_BLOB q;
  _CRYPTOAPI_BLOB g;
};

/* 5899 */
struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS
{
  unsigned int Flags;
  unsigned int TimeToLive;
  unsigned int Reserved[2];
};

/* 5900 */
struct __cppobj IInternetSecurityManager : IUnknown
{
};

/* 5901 */
struct __cppobj IInternetSecurityManagerEx : IInternetSecurityManager
{
};

/* 5902 */
struct __cppobj IInternetSecurityManagerEx2 : IInternetSecurityManagerEx
{
};

/* 5903 */
struct _NCB
{
  char ncb_command;
  char ncb_retcode;
  char ncb_lsn;
  char ncb_num;
  char *ncb_buffer;
  unsigned __int16 ncb_length;
  char ncb_callname[16];
  char ncb_name[16];
  char ncb_rto;
  char ncb_sto;
  void (__cdecl *ncb_post)(_NCB *);
  char ncb_lana_num;
  char ncb_cmd_cplt;
  char ncb_reserve[18];
  void *ncb_event;
};

/* 5904 */
struct _CERT_CHAIN
{
  unsigned int cCerts;
  _CRYPTOAPI_BLOB *certs;
  _CRYPT_KEY_PROV_INFO keyLocatorInfo;
};

/* 5905 */
struct _FSCTL_OFFLOAD_READ_INPUT
{
  unsigned int Size;
  unsigned int Flags;
  unsigned int TokenTimeToLive;
  unsigned int Reserved;
  unsigned __int64 FileOffset;
  unsigned __int64 CopyLength;
};

/* 5906 */
union $D0FAA225C480F7E79DE0C59B79FF3D5C
{
  unsigned int EntryPointToken;
  unsigned int EntryPointRVA;
};

/* 5907 */
struct IMAGE_COR20_HEADER
{
  unsigned int cb;
  unsigned __int16 MajorRuntimeVersion;
  unsigned __int16 MinorRuntimeVersion;
  _IMAGE_DATA_DIRECTORY MetaData;
  unsigned int Flags;
  $D0FAA225C480F7E79DE0C59B79FF3D5C ___u5;
  _IMAGE_DATA_DIRECTORY Resources;
  _IMAGE_DATA_DIRECTORY StrongNameSignature;
  _IMAGE_DATA_DIRECTORY CodeManagerTable;
  _IMAGE_DATA_DIRECTORY VTableFixups;
  _IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
  _IMAGE_DATA_DIRECTORY ManagedNativeHeader;
};

/* 5908 */
struct _EFS_COMPATIBILITY_INFO
{
  unsigned int EfsVersion;
};

/* 5909 */
struct __declspec(align(4)) FIND_BY_SID_OUTPUT
{
  unsigned int NextEntryOffset;
  unsigned int FileIndex;
  unsigned int FileNameLength;
  wchar_t FileName[1];
};

/* 5910 */
struct _TXFS_TRANSACTION_ACTIVE_INFO
{
  char TransactionsActiveAtSnapshot;
};

/* 5911 */
struct __m256d
{
  long double m256d_f64[4];
};

/* 5912 */
struct _SHFILEOPSTRUCTA
{
  HWND__ *hwnd;
  unsigned int wFunc;
  const char *pFrom;
  const char *pTo;
  unsigned __int16 fFlags;
  int fAnyOperationsAborted;
  void *hNameMappings;
  const char *lpszProgressTitle;
};

/* 5913 */
struct _DRIVER_INFO_8A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
  char *pHelpFile;
  char *pDependentFiles;
  char *pMonitorName;
  char *pDefaultDataType;
  char *pszzPreviousNames;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  char *pszMfgName;
  char *pszOEMUrl;
  char *pszHardwareID;
  char *pszProvider;
  char *pszPrintProcessor;
  char *pszVendorSetup;
  char *pszzColorProfiles;
  char *pszInfPath;
  unsigned int dwPrinterDriverAttributes;
  char *pszzCoreDriverDependencies;
  _FILETIME ftMinInboxDriverVerDate;
  unsigned __int64 dwlMinInboxDriverVerVersion;
};

/* 5914 */
struct __declspec(align(2)) _SERVICE_PREFERRED_NODE_INFO
{
  unsigned __int16 usPreferredNode;
  char fDelete;
};

/* 5915 */
struct _IMAGE_EXPORT_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int Name;
  unsigned int Base;
  unsigned int NumberOfFunctions;
  unsigned int NumberOfNames;
  unsigned int AddressOfFunctions;
  unsigned int AddressOfNames;
  unsigned int AddressOfNameOrdinals;
};

/* 5916 */
struct tagNEWTEXTMETRICW
{
  int tmHeight;
  int tmAscent;
  int tmDescent;
  int tmInternalLeading;
  int tmExternalLeading;
  int tmAveCharWidth;
  int tmMaxCharWidth;
  int tmWeight;
  int tmOverhang;
  int tmDigitizedAspectX;
  int tmDigitizedAspectY;
  wchar_t tmFirstChar;
  wchar_t tmLastChar;
  wchar_t tmDefaultChar;
  wchar_t tmBreakChar;
  char tmItalic;
  char tmUnderlined;
  char tmStruckOut;
  char tmPitchAndFamily;
  char tmCharSet;
  unsigned int ntmFlags;
  unsigned int ntmSizeEM;
  unsigned int ntmCellHeight;
  unsigned int ntmAvgWidth;
};

/* 5917 */
struct tagNEWTEXTMETRICEXW
{
  tagNEWTEXTMETRICW ntmTm;
  tagFONTSIGNATURE ntmFontSig;
};

/* 5918 */
struct tagENUMTEXTMETRICW
{
  tagNEWTEXTMETRICEXW etmNewTextMetricEx;
  tagAXESLISTW etmAxesList;
};

/* 5919 */
struct _CHANGER_ELEMENT_STATUS
{
  _CHANGER_ELEMENT Element;
  _CHANGER_ELEMENT SrcElementAddress;
  unsigned int Flags;
  unsigned int ExceptionCode;
  char TargetId;
  char Lun;
  unsigned __int16 Reserved;
  char PrimaryVolumeID[36];
  char AlternateVolumeID[36];
};

/* 5920 */
struct _READ_ELEMENT_ADDRESS_INFO
{
  unsigned int NumberOfElements;
  _CHANGER_ELEMENT_STATUS ElementStatus[1];
};

/* 5921 */
struct __declspec(align(8)) tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
  void *lpInformation;
  void *lpSectionBase;
  unsigned int ulSectionLength;
  void *lpSectionGlobalDataBase;
  unsigned int ulSectionGlobalDataLength;
};

/* 5922 */
struct tagACTCTX_SECTION_KEYED_DATA
{
  unsigned int cbSize;
  unsigned int ulDataFormatVersion;
  void *lpData;
  unsigned int ulLength;
  void *lpSectionGlobalData;
  unsigned int ulSectionGlobalDataLength;
  void *lpSectionBase;
  unsigned int ulSectionTotalLength;
  void *hActCtx;
  unsigned int ulAssemblyRosterIndex;
  unsigned int ulFlags;
  tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
};

/* 5923 */
struct _CRYPT_KEY_SIGN_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgAndCertEncodingType;
  $4BCA99CF3AFC900CAD02FCA6999AF57A ___u2;
  unsigned int dwKeySpec;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
  _CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
};

/* 5924 */
struct _STORAGE_EVENT_NOTIFICATION
{
  unsigned int Version;
  unsigned int Size;
  unsigned __int64 Events;
};

/* 5925 */
struct __cppobj IOleInPlaceObject : IOleWindow
{
};

/* 5926 */
struct tagEMRPLGBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  _POINTL aptlDest[3];
  int xSrc;
  int ySrc;
  int cxSrc;
  int cySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int xMask;
  int yMask;
  unsigned int iUsageMask;
  unsigned int offBmiMask;
  unsigned int cbBmiMask;
  unsigned int offBitsMask;
  unsigned int cbBitsMask;
};

/* 5927 */
struct __declspec(align(8)) _LOAD_DLL_DEBUG_INFO
{
  void *hFile;
  void *lpBaseOfDll;
  unsigned int dwDebugInfoFileOffset;
  unsigned int nDebugInfoSize;
  void *lpImageName;
  unsigned __int16 fUnicode;
};

/* 5928 */
struct _tagAUTHENTICATEINFO
{
  unsigned int dwFlags;
  unsigned int dwReserved;
};

/* 5929 */
struct _CMSG_HASHED_ENCODE_INFO
{
  unsigned int cbSize;
  unsigned __int64 hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  void *pvHashAuxInfo;
};

/* 5930 */
struct _DRIVE_LAYOUT_INFORMATION
{
  unsigned int PartitionCount;
  unsigned int Signature;
  _PARTITION_INFORMATION PartitionEntry[1];
};

/* 5931 */
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
{
  unsigned int cbSize;
  unsigned __int64 hCryptProv;
  unsigned int dwSignerIndex;
  unsigned int dwSignerType;
  void *pvSigner;
};

/* 5932 */
struct $4513DC3CCFACECD09C8EAC7B805F6919
{
  unsigned int WeakDefaultSymIndex;
  unsigned int WeakSearchType;
  char rgbReserved[12];
};

/* 5933 */
struct $94989A3E9A435ED97145FE1E68FB2FC6
{
  char Name[20];
};

/* 5934 */
struct $47B47A2EB50216D404F2F0D49488C8F4
{
  unsigned int Length;
  unsigned __int16 NumberOfRelocations;
  unsigned __int16 NumberOfLinenumbers;
  unsigned int CheckSum;
  __int16 Number;
  char Selection;
  char bReserved;
  __int16 HighNumber;
  char rgbReserved[2];
};

/* 5935 */
struct $95EC2160EE73DEF8E63B3C99B8227654
{
  unsigned int crc;
  char rgbReserved[16];
};

/* 5936 */
struct $42B4E238457DBD90816C6FE38034D988
{
  IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
  char rgbReserved[2];
};

/* 5937 */
union _IMAGE_AUX_SYMBOL_EX
{
  $4513DC3CCFACECD09C8EAC7B805F6919 Sym;
  $94989A3E9A435ED97145FE1E68FB2FC6 File;
  $47B47A2EB50216D404F2F0D49488C8F4 Section;
  $42B4E238457DBD90816C6FE38034D988 __s3;
  $95EC2160EE73DEF8E63B3C99B8227654 CRC;
};

/* 5938 */
struct DDEADVISE
{
  unsigned __int16 reserved : 14;
  unsigned __int16 fDeferUpd : 1;
  unsigned __int16 fAckReq : 1;
  __int16 cfFormat;
};

/* 5939 */
struct __cppobj IServerSecurity : IUnknown
{
};

/* 5940 */
struct __cppobj IXMLDOMElement : IXMLDOMNode
{
};

/* 5941 */
struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
{
  unsigned __int64 CycleTime;
};

/* 5942 */
struct tagEMRCREATEMONOBRUSH
{
  tagEMR emr;
  unsigned int ihBrush;
  unsigned int iUsage;
  unsigned int offBmi;
  unsigned int cbBmi;
  unsigned int offBits;
  unsigned int cbBits;
};

/* 5943 */
struct HDESK__
{
  int unused;
};

/* 5944 */
struct BSMINFO
{
  unsigned int cbSize;
  HDESK__ *hdesk;
  HWND__ *hwnd;
  _LUID luid;
};

/* 5945 */
union $7A361697FC21B8AFEB815F440314896C
{
  char *AnsiString;
  wchar_t *UnicodeString;
  int LVal;
  __int16 SVal;
  unsigned __int64 PVal;
  tagBinaryParam BVal;
};

/* 5946 */
struct tagRPC_EE_INFO_PARAM
{
  tagExtendedErrorParamTypes ParameterType;
  $7A361697FC21B8AFEB815F440314896C u;
};

/* 5947 */
struct __declspec(align(8)) tagRPC_CALL_ATTRIBUTES_V2_W
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ServerPrincipalNameBufferLength;
  unsigned __int16 *ServerPrincipalName;
  unsigned int ClientPrincipalNameBufferLength;
  unsigned __int16 *ClientPrincipalName;
  unsigned int AuthenticationLevel;
  unsigned int AuthenticationService;
  int NullSession;
  int KernelModeCaller;
  unsigned int ProtocolSequence;
  tagRpcCallClientLocality IsClientLocal;
  void *ClientPID;
  unsigned int CallStatus;
  tagRpcCallType CallType;
  _RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
  unsigned __int16 OpNum;
  _GUID InterfaceUuid;
};

/* 5948 */
union _FILE_SEGMENT_ELEMENT
{
  void *Buffer;
  unsigned __int64 Alignment;
};

/* 5949 */
struct __declspec(align(4)) _SI_COPYFILE
{
  unsigned int SourceFileNameLength;
  unsigned int DestinationFileNameLength;
  unsigned int Flags;
  wchar_t FileNameBuffer[1];
};

/* 5950 */
struct _div_t
{
  int quot;
  int rem;
};

/* 5951 */
struct _SID_AND_ATTRIBUTES_HASH
{
  unsigned int SidCount;
  _SID_AND_ATTRIBUTES *SidAttr;
  unsigned __int64 Hash[32];
};

/* 5952 */
struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
{
  unsigned int ElementCount;
  _COMPATIBILITY_CONTEXT_ELEMENT Elements[];
};

/* 5953 */
struct READ_USN_JOURNAL_DATA_V0
{
  __int64 StartUsn;
  unsigned int ReasonMask;
  unsigned int ReturnOnlyOnClose;
  unsigned __int64 Timeout;
  unsigned __int64 BytesToWaitFor;
  unsigned __int64 UsnJournalID;
};

/* 5954 */
struct tagStorageLayout
{
  unsigned int LayoutType;
  wchar_t *pwcsElementName;
  _LARGE_INTEGER cOffset;
  _LARGE_INTEGER cBytes;
};

/* 5955 */
struct _SERVICE_FAILURE_ACTIONS_FLAG
{
  int fFailureActionsOnNonCrashFailures;
};

/* 5956 */
struct _GLYPHMETRICS
{
  unsigned int gmBlackBoxX;
  unsigned int gmBlackBoxY;
  tagPOINT gmptGlyphOrigin;
  __int16 gmCellIncX;
  __int16 gmCellIncY;
};

/* 5957 */
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
  _SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
  unsigned int Flags;
  unsigned int AuthenticationTarget;
  unsigned int NumberOfAuthnSchemes;
  unsigned int *AuthnSchemes;
  char *ServerCertificateSubject;
  _SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
  unsigned int NumberOfProxyAuthnSchemes;
  unsigned int *ProxyAuthnSchemes;
};

/* 5958 */
struct __unaligned __declspec(align(1)) _DEVICEDUMP_PRIVATE_SUBSECTION
{
  unsigned int dwFlags;
  _GP_LOG_PAGE_DESCRIPTOR GPLogId;
  char bData[1];
};

/* 5959 */
struct _JOB_SET_ARRAY
{
  void *JobHandle;
  unsigned int MemberLevel;
  unsigned int Flags;
};

/* 5960 */
struct _DEVICEDUMP_SUBSECTION_POINTER
{
  unsigned int dwSize;
  unsigned int dwFlags;
  unsigned int dwOffset;
};

/* 5961 */
struct __declspec(align(8)) $D60A59C91F9DF1EAF75271BC4353FAD2
{
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  unsigned int FileAttributes;
};

/* 5962 */
struct _FILE_LAYOUT_INFO_ENTRY
{
  $D60A59C91F9DF1EAF75271BC4353FAD2 BasicInformation;
  unsigned int OwnerId;
  unsigned int SecurityId;
  __int64 Usn;
};

/* 5963 */
struct __declspec(align(4)) _FORMAT_EX_PARAMETERS
{
  _MEDIA_TYPE MediaType;
  unsigned int StartCylinderNumber;
  unsigned int EndCylinderNumber;
  unsigned int StartHeadNumber;
  unsigned int EndHeadNumber;
  unsigned __int16 FormatGapLength;
  unsigned __int16 SectorsPerTrack;
  unsigned __int16 SectorNumber[1];
};

/* 5964 */
struct $9C09AA0718D32C548B2DB406C6D4D093
{
  HINSTANCE__ *LocalizedReasonModule;
  unsigned int LocalizedReasonId;
  unsigned int ReasonStringCount;
  wchar_t **ReasonStrings;
};

/* 5965 */
union $96CC750CD1AFF4FB2D66F591EE1739CB
{
  $9C09AA0718D32C548B2DB406C6D4D093 Detailed;
  wchar_t *SimpleReasonString;
};

/* 5966 */
struct _REASON_CONTEXT
{
  unsigned int Version;
  unsigned int Flags;
  $96CC750CD1AFF4FB2D66F591EE1739CB Reason;
};

/* 5967 */
struct _MIDL_FORMAT_STRING
{
  __int16 Pad;
  char Format[];
};

/* 5968 */
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
  _LARGE_INTEGER TotalUserTime;
  _LARGE_INTEGER TotalKernelTime;
  _LARGE_INTEGER ThisPeriodTotalUserTime;
  _LARGE_INTEGER ThisPeriodTotalKernelTime;
  unsigned int TotalPageFaultCount;
  unsigned int TotalProcesses;
  unsigned int ActiveProcesses;
  unsigned int TotalTerminatedProcesses;
};

/* 5969 */
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{
  _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
  _IO_COUNTERS IoInfo;
};

/* 5970 */
struct _RESUME_PERFORMANCE
{
  unsigned int PostTimeMs;
  unsigned __int64 TotalResumeTimeMs;
  unsigned __int64 ResumeCompleteTimestamp;
};

/* 5971 */
struct tagEMRSETMITERLIMIT
{
  tagEMR emr;
  float eMiterLimit;
};

/* 5972 */
struct tagEMRCREATEBRUSHINDIRECT
{
  tagEMR emr;
  unsigned int ihBrush;
  tagLOGBRUSH32 lb;
};

/* 5973 */
struct _BCRYPT_DSA_KEY_BLOB_V2
{
  unsigned int dwMagic;
  unsigned int cbKey;
  HASHALGORITHM_ENUM hashAlgorithm;
  DSAFIPSVERSION_ENUM standardVersion;
  unsigned int cbSeedLength;
  unsigned int cbGroupSize;
  char Count[4];
};

/* 5974 */
struct __unaligned __declspec(align(4)) tagMCI_ANIM_STEP_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwFrames;
};

/* 5975 */
struct _CERT_DH_PARAMETERS
{
  _CRYPTOAPI_BLOB p;
  _CRYPTOAPI_BLOB g;
};

/* 5976 */
struct _STORAGE_ALLOCATE_BC_STREAM_INPUT
{
  unsigned int Version;
  unsigned int RequestsPerPeriod;
  unsigned int Period;
  char RetryFailures;
  char Discardable;
  char Reserved1[2];
  unsigned int AccessType;
  unsigned int AccessMode;
};

/* 5977 */
struct __cppobj IInternetSecurityMgrSite : IUnknown
{
};

/* 5978 */
struct READ_FILE_USN_DATA
{
  unsigned __int16 MinMajorVersion;
  unsigned __int16 MaxMajorVersion;
};

/* 5979 */
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION
{
  unsigned int dwFlags;
  unsigned int ulFormatVersion;
  unsigned int ulAssemblyCount;
  unsigned int ulRootManifestPathType;
  unsigned int ulRootManifestPathChars;
  unsigned int ulRootConfigurationPathType;
  unsigned int ulRootConfigurationPathChars;
  unsigned int ulAppDirPathType;
  unsigned int ulAppDirPathChars;
  const wchar_t *lpRootManifestPath;
  const wchar_t *lpRootConfigurationPath;
  const wchar_t *lpAppDirPath;
};

/* 5980 */
struct _CREATE_THREAD_DEBUG_INFO
{
  void *hThread;
  void *lpThreadLocalBase;
  unsigned int (__cdecl *lpStartAddress)(void *);
};

/* 5981 */
union $C053BBC443CC8E179B0605B6D17F2484
{
  _EXCEPTION_DEBUG_INFO Exception;
  _CREATE_THREAD_DEBUG_INFO CreateThread;
  _CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
  _EXIT_THREAD_DEBUG_INFO ExitThread;
  _EXIT_PROCESS_DEBUG_INFO ExitProcess;
  _LOAD_DLL_DEBUG_INFO LoadDll;
  _UNLOAD_DLL_DEBUG_INFO UnloadDll;
  _OUTPUT_DEBUG_STRING_INFO DebugString;
  _RIP_INFO RipInfo;
};

/* 5982 */
struct _DEBUG_EVENT
{
  unsigned int dwDebugEventCode;
  unsigned int dwProcessId;
  unsigned int dwThreadId;
  $C053BBC443CC8E179B0605B6D17F2484 u;
};

/* 5983 */
struct _SECURITY_DESCRIPTOR_RELATIVE
{
  char Revision;
  char Sbz1;
  unsigned __int16 Control;
  unsigned int Owner;
  unsigned int Group;
  unsigned int Sacl;
  unsigned int Dacl;
};

/* 5984 */
struct __declspec(align(8)) _SHFILEINFOA
{
  HICON__ *hIcon;
  int iIcon;
  unsigned int dwAttributes;
  char szDisplayName[260];
  char szTypeName[80];
};

/* 5985 */
struct _CRYPT_3DES_KEY_STATE
{
  char Key[24];
  char IV[8];
  char Feedback[8];
};

/* 5986 */
struct _CERT_REVOCATION_STATUS
{
  unsigned int cbSize;
  unsigned int dwIndex;
  unsigned int dwError;
  unsigned int dwReason;
  int fHasFreshnessTime;
  unsigned int dwFreshnessTime;
};

/* 5987 */
struct tagTYPEATTR
{
  _GUID guid;
  unsigned int lcid;
  unsigned int dwReserved;
  int memidConstructor;
  int memidDestructor;
  wchar_t *lpstrSchema;
  unsigned int cbSizeInstance;
  tagTYPEKIND typekind;
  unsigned __int16 cFuncs;
  unsigned __int16 cVars;
  unsigned __int16 cImplTypes;
  unsigned __int16 cbSizeVft;
  unsigned __int16 cbAlignment;
  unsigned __int16 wTypeFlags;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  tagTYPEDESC tdescAlias;
  tagIDLDESC idldescType;
};

/* 5988 */
struct __declspec(align(8)) _FILE_STREAM_INFO
{
  unsigned int NextEntryOffset;
  unsigned int StreamNameLength;
  _LARGE_INTEGER StreamSize;
  _LARGE_INTEGER StreamAllocationSize;
  wchar_t StreamName[1];
};

/* 5989 */
struct _TOKEN_STATISTICS
{
  _LUID TokenId;
  _LUID AuthenticationId;
  _LARGE_INTEGER ExpirationTime;
  _TOKEN_TYPE TokenType;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  unsigned int DynamicCharged;
  unsigned int DynamicAvailable;
  unsigned int GroupCount;
  unsigned int PrivilegeCount;
  _LUID ModifiedId;
};

/* 5990 */
struct __cppobj IInternetBindInfoEx : IInternetBindInfo
{
};

/* 5991 */
struct __unaligned __declspec(align(4)) tagMIXERLINECONTROLSA
{
  unsigned int cbStruct;
  unsigned int dwLineID;
  $476D211351DA30503E50D2F0E6E515B0 ___u2;
  unsigned int cControls;
  unsigned int cbmxctrl;
  tagMIXERCONTROLA *pamxctrl;
};

/* 5992 */
struct __cppobj IXMLDOMComment : IXMLDOMCharacterData
{
};

/* 5993 */
struct tagCSPLATFORM
{
  unsigned int dwPlatformId;
  unsigned int dwVersionHi;
  unsigned int dwVersionLo;
  unsigned int dwProcessorArch;
};

/* 5994 */
struct tagQUERYCONTEXT
{
  unsigned int dwContext;
  tagCSPLATFORM Platform;
  unsigned int Locale;
  unsigned int dwVersionHi;
  unsigned int dwVersionLo;
};

/* 5995 */
struct _SHNAMEMAPPINGW
{
  wchar_t *pszOldPath;
  wchar_t *pszNewPath;
  int cchOldPath;
  int cchNewPath;
};

/* 5996 */
struct _TAPE_GET_POSITION
{
  unsigned int Type;
  unsigned int Partition;
  _LARGE_INTEGER Offset;
};

/* 5997 */
struct _CERT_CHAIN_POLICY_STATUS
{
  unsigned int cbSize;
  unsigned int dwError;
  int lChainIndex;
  int lElementIndex;
  void *pvExtraPolicyStatus;
};

/* 5998 */
struct __declspec(align(4)) _DEVICE_TRIM_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  char TrimEnabled;
};

/* 5999 */
struct _CRYPT_PKCS8_EXPORT_PARAMS
{
  unsigned __int64 hCryptProv;
  unsigned int dwKeySpec;
  char *pszPrivateKeyObjId;
  int (__cdecl *pEncryptPrivateKeyFunc)(_CRYPT_ALGORITHM_IDENTIFIER *, _CRYPTOAPI_BLOB *, char *, unsigned int *, void *);
  void *pVoidEncryptFunc;
};

/* 6000 */
struct _CSV_CONTROL_PARAM
{
  _CSV_CONTROL_OP Operation;
  __int64 Unused;
};

/* 6001 */
struct _REPAIR_COPIES_OUTPUT
{
  unsigned int Size;
  unsigned int Status;
  _LARGE_INTEGER ResumeFileOffset;
};

/* 6002 */
struct __cppobj IChannelHook : IUnknown
{
};

/* 6003 */
struct tagMCI_GETDEVCAPS_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwReturn;
  unsigned int dwItem;
};

/* 6004 */
struct _CSV_IS_OWNED_BY_CSVFS
{
  char OwnedByCSVFS;
};

/* 6005 */
struct _PROPSHEETPAGEA_V3
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $03E6EEA160A4BF287FB0A80FBB3D7757 ___u3;
  $57038144EE260AFAA32682BDDA1565B6 ___u4;
  const char *pszTitle;
  __int64 (__cdecl *pfnDlgProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  __int64 lParam;
  unsigned int (__cdecl *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);
  unsigned int *pcRefParent;
  const char *pszHeaderTitle;
  const char *pszHeaderSubTitle;
  void *hActCtx;
};

/* 6006 */
struct _tagHIT_LOGGING_INFO
{
  unsigned int dwStructSize;
  char *lpszLoggedUrlName;
  _SYSTEMTIME StartTime;
  _SYSTEMTIME EndTime;
  char *lpszExtendedInfo;
};

/* 6007 */
struct __declspec(align(8)) tagRPC_CALL_ATTRIBUTES_V1_W
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ServerPrincipalNameBufferLength;
  unsigned __int16 *ServerPrincipalName;
  unsigned int ClientPrincipalNameBufferLength;
  unsigned __int16 *ClientPrincipalName;
  unsigned int AuthenticationLevel;
  unsigned int AuthenticationService;
  int NullSession;
};

/* 6008 */
struct PPM_IDLE_ACCOUNTING
{
  unsigned int StateCount;
  unsigned int TotalTransitions;
  unsigned int ResetCount;
  unsigned __int64 StartTime;
  PPM_IDLE_STATE_ACCOUNTING State[1];
};

/* 6009 */
struct __cppobj __declspec(align(8)) tagMOUSEHOOKSTRUCTEX : tagMOUSEHOOKSTRUCT
{
  unsigned int mouseData;
};

/* 6010 */
struct tagMCI_LOAD_PARMSW
{
  unsigned __int64 dwCallback;
  const wchar_t *lpfilename;
};

/* 6011 */
struct __cppobj IErrorInfo : IUnknown
{
};

/* 6012 */
struct tagCWPSTRUCT
{
  __int64 lParam;
  unsigned __int64 wParam;
  unsigned int message;
  HWND__ *hwnd;
};

/* 6013 */
struct tagPOINTER_PEN_INFO
{
  tagPOINTER_INFO pointerInfo;
  unsigned int penFlags;
  unsigned int penMask;
  unsigned int pressure;
  unsigned int rotation;
  int tiltX;
  int tiltY;
};

/* 6014 */
struct tagALTTABINFO
{
  unsigned int cbSize;
  int cItems;
  int cColumns;
  int cRows;
  int iColFocus;
  int iRowFocus;
  int cxItem;
  int cyItem;
  tagPOINT ptStart;
};

/* 6015 */
struct _RSAPUBKEY
{
  unsigned int magic;
  unsigned int bitlen;
  unsigned int pubexp;
};

/* 6016 */
struct _IMAGE_TLS_DIRECTORY32
{
  unsigned int StartAddressOfRawData;
  unsigned int EndAddressOfRawData;
  unsigned int AddressOfIndex;
  unsigned int AddressOfCallBacks;
  unsigned int SizeOfZeroFill;
  unsigned int Characteristics;
};

/* 6017 */
struct __declspec(align(4)) tagEMRPOLYDRAW16
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cpts;
  tagPOINTS apts[1];
  char abTypes[1];
};

/* 6018 */
struct __declspec(align(8)) _VERIFY_INFORMATION
{
  _LARGE_INTEGER StartingOffset;
  unsigned int Length;
};

/* 6019 */
struct _SD_QUERY_STATS_OUTPUT
{
  unsigned __int64 SdsStreamSize;
  unsigned __int64 SdsAllocationSize;
  unsigned __int64 SiiStreamSize;
  unsigned __int64 SiiAllocationSize;
  unsigned __int64 SdhStreamSize;
  unsigned __int64 SdhAllocationSize;
  unsigned __int64 NumSDTotal;
  unsigned __int64 NumSDUnused;
};

/* 6020 */
struct __declspec(align(4)) _SD_ENUM_SDS_ENTRY
{
  unsigned int Hash;
  unsigned int SecurityId;
  unsigned __int64 Offset;
  unsigned int Length;
  char Descriptor[1];
};

/* 6021 */
struct _SD_ENUM_SDS_OUTPUT
{
  unsigned __int64 NextOffset;
  unsigned __int64 NumSDEntriesReturned;
  unsigned __int64 NumSDBytesReturned;
  _SD_ENUM_SDS_ENTRY SDEntry[1];
};

/* 6022 */
union $E2F94E1AECB6F7B7AB00EEE4BE7312C2
{
  _SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
  _SD_QUERY_STATS_OUTPUT SdQueryStats;
  _SD_ENUM_SDS_OUTPUT SdEnumSds;
};

/* 6023 */
struct _SD_GLOBAL_CHANGE_OUTPUT
{
  unsigned int Flags;
  unsigned int ChangeType;
  $E2F94E1AECB6F7B7AB00EEE4BE7312C2 ___u2;
};

/* 6024 */
struct _GRADIENT_RECT
{
  unsigned int UpperLeft;
  unsigned int LowerRight;
};

/* 6025 */
struct NTFS_EXTENDED_VOLUME_DATA
{
  unsigned int ByteCount;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int BytesPerPhysicalSector;
  unsigned __int16 LfsMajorVersion;
  unsigned __int16 LfsMinorVersion;
};

/* 6026 */
struct _SESSION_BUFFER
{
  char lsn;
  char state;
  char local_name[16];
  char remote_name[16];
  char rcvs_outstanding;
  char sends_outstanding;
};

/* 6027 */
struct __cppobj IOleLink : IUnknown
{
};

/* 6028 */
struct _QOS_SHAPING_RATE
{
  QOS_OBJECT_HDR ObjectHdr;
  unsigned int ShapingRate;
};

/* 6029 */
struct _SYSTEM_MANDATORY_LABEL_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 6030 */
struct __declspec(align(4)) _TAPE_ERASE
{
  unsigned int Type;
  char Immediate;
};

/* 6031 */
struct HRSRC__
{
  int unused;
};

/* 6032 */
struct _DEDUP_CHUNK_INFORMATION_HASH32
{
  unsigned int ChunkFlags;
  __int64 ChunkOffsetInFile;
  __int64 ChunkSize;
  char HashVal[32];
};

/* 6033 */
struct ip_msfilter
{
  in_addr imsf_multiaddr;
  in_addr imsf_interface;
  MULTICAST_MODE_TYPE imsf_fmode;
  unsigned int imsf_numsrc;
  in_addr imsf_slist[1];
};

/* 6034 */
struct _ACL_SIZE_INFORMATION
{
  unsigned int AceCount;
  unsigned int AclBytesInUse;
  unsigned int AclBytesFree;
};

/* 6035 */
struct _OCSP_BASIC_RESPONSE_ENTRY
{
  _OCSP_CERT_ID CertId;
  unsigned int dwCertStatus;
  _OCSP_BASIC_REVOKED_INFO *pRevokedInfo;
  _FILETIME ThisUpdate;
  _FILETIME NextUpdate;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 6036 */
struct _CMSG_SP3_COMPATIBLE_AUX_INFO
{
  unsigned int cbSize;
  unsigned int dwFlags;
};

/* 6037 */
struct __cppobj IOleCache : IUnknown
{
};

/* 6038 */
struct tagEMRPOLYPOLYLINE16
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int nPolys;
  unsigned int cpts;
  unsigned int aPolyCounts[1];
  tagPOINTS apts[1];
};

/* 6039 */
struct _CRYPT_PRIVATE_KEY_INFO
{
  unsigned int Version;
  _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
  _CRYPTOAPI_BLOB PrivateKey;
  _CRYPT_ATTRIBUTES *pAttributes;
};

/* 6040 */
struct _FLAG_STGMEDIUM
{
  int ContextFlags;
  int fPassOwnership;
  tagSTGMEDIUM Stgmed;
};

/* 6041 */
struct _PRINTER_INFO_9W
{
  _devicemodeW *pDevMode;
};

/* 6042 */
struct __cppobj IViewObject2 : IViewObject
{
};

/* 6043 */
struct __cppobj IRunnableObject : IUnknown
{
};

/* 6044 */
struct _TRANSACTIONMANAGER_LOG_INFORMATION
{
  _GUID LogIdentity;
};

/* 6045 */
struct __unaligned __declspec(align(4)) tagDRVCONFIGINFO
{
  unsigned int dwDCISize;
  const wchar_t *lpszDCISectionName;
  const wchar_t *lpszDCIAliasName;
};

/* 6046 */
struct __declspec(align(2)) tagHW_PROFILE_INFOA
{
  unsigned int dwDockInfo;
  char szHwProfileGuid[39];
  char szHwProfileName[80];
};

/* 6047 */
struct _FILE_PREFETCH
{
  unsigned int Type;
  unsigned int Count;
  unsigned __int64 Prefetch[1];
};

/* 6048 */
struct _CMSG_RC2_AUX_INFO
{
  unsigned int cbSize;
  unsigned int dwBitLen;
};

/* 6049 */
struct __declspec(align(8)) _ENUM_SERVICE_STATUS_PROCESSW
{
  wchar_t *lpServiceName;
  wchar_t *lpDisplayName;
  _SERVICE_STATUS_PROCESS ServiceStatusProcess;
};

/* 6050 */
struct __cppobj IMultiQI : IUnknown
{
};

/* 6051 */
struct tagKERNINGPAIR
{
  unsigned __int16 wFirst;
  unsigned __int16 wSecond;
  int iKernAmount;
};

/* 6052 */
struct _CRYPT_PROVIDERS
{
  unsigned int cProviders;
  wchar_t **rgpszProviders;
};

/* 6053 */
struct addrinfoex2A
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  unsigned __int64 ai_addrlen;
  char *ai_canonname;
  sockaddr *ai_addr;
  void *ai_blob;
  unsigned __int64 ai_bloblen;
  _GUID *ai_provider;
  addrinfoex2A *ai_next;
  int ai_version;
  char *ai_fqdn;
};

/* 6054 */
struct PPM_IDLE_ACCOUNTING_EX
{
  unsigned int StateCount;
  unsigned int TotalTransitions;
  unsigned int ResetCount;
  unsigned int AbortCount;
  unsigned __int64 StartTime;
  PPM_IDLE_STATE_ACCOUNTING_EX State[1];
};

/* 6055 */
struct _ENLISTMENT_BASIC_INFORMATION
{
  _GUID EnlistmentId;
  _GUID TransactionId;
  _GUID ResourceManagerId;
};

/* 6056 */
struct _SERVICE_START_REASON
{
  unsigned int dwReason;
};

/* 6057 */
struct $12EDD93CAC4208332C3108DBB4839320
{
  unsigned __int16 AllowScaling : 1;
  unsigned __int16 Disabled : 1;
  unsigned __int16 Reserved : 14;
};

/* 6058 */
union $8579DB7E1D90B058D4812258E5038E09
{
  unsigned __int16 AsWORD;
  $12EDD93CAC4208332C3108DBB4839320 __s1;
};

/* 6059 */
struct PROCESSOR_IDLESTATE_POLICY
{
  unsigned __int16 Revision;
  $8579DB7E1D90B058D4812258E5038E09 Flags;
  unsigned int PolicyCount;
  PROCESSOR_IDLESTATE_INFO Policy[3];
};

/* 6060 */
struct __declspec(align(8)) _STORAGE_ALLOCATE_BC_STREAM_OUTPUT
{
  unsigned __int64 RequestSize;
  unsigned int NumOutStandingRequests;
};

/* 6061 */
struct __cppobj IBindStatusCallback : IUnknown
{
};

/* 6062 */
struct __cppobj IBindStatusCallbackEx : IBindStatusCallback
{
};

/* 6063 */
struct tagEMRCREATEPEN
{
  tagEMR emr;
  unsigned int ihPen;
  tagLOGPEN lopn;
};

/* 6064 */
struct _MIDL_STUBLESS_PROXY_INFO
{
  _MIDL_STUB_DESC *pStubDesc;
  const char *ProcFormatString;
  const unsigned __int16 *FormatStringOffset;
  _RPC_SYNTAX_IDENTIFIER *pTransferSyntax;
  unsigned __int64 nCount;
  _MIDL_SYNTAX_INFO *pSyntaxInfo;
};

/* 6065 */
struct _GET_CHANGER_PARAMETERS
{
  unsigned int Size;
  unsigned __int16 NumberTransportElements;
  unsigned __int16 NumberStorageElements;
  unsigned __int16 NumberCleanerSlots;
  unsigned __int16 NumberIEElements;
  unsigned __int16 NumberDataTransferElements;
  unsigned __int16 NumberOfDoors;
  unsigned __int16 FirstSlotNumber;
  unsigned __int16 FirstDriveNumber;
  unsigned __int16 FirstTransportNumber;
  unsigned __int16 FirstIEPortNumber;
  unsigned __int16 FirstCleanerSlotAddress;
  unsigned __int16 MagazineSize;
  unsigned int DriveCleanTimeout;
  unsigned int Features0;
  unsigned int Features1;
  char MoveFromTransport;
  char MoveFromSlot;
  char MoveFromIePort;
  char MoveFromDrive;
  char ExchangeFromTransport;
  char ExchangeFromSlot;
  char ExchangeFromIePort;
  char ExchangeFromDrive;
  char LockUnlockCapabilities;
  char PositionCapabilities;
  char Reserved1[2];
  unsigned int Reserved2[2];
};

/* 6066 */
struct $7C60618F8DDAB6C9415DCB902B86CBEA
{
  unsigned __int32 Enable : 1;
  unsigned __int32 DisableAtlThunkEmulation : 1;
  unsigned __int32 ReservedFlags : 30;
};

/* 6067 */
union $23825822EED8E0DA257CB271E266B74E
{
  unsigned int Flags;
  $7C60618F8DDAB6C9415DCB902B86CBEA __s1;
};

/* 6068 */
struct __declspec(align(4)) _PROCESS_MITIGATION_DEP_POLICY
{
  $23825822EED8E0DA257CB271E266B74E ___u0;
  char Permanent;
};

/* 6069 */
union $D73D647711E0D18BB6EFDDF78E7AEEC6
{
  wchar_t UnicodeChar;
  char AsciiChar;
};

/* 6070 */
struct _KEY_EVENT_RECORD
{
  int bKeyDown;
  unsigned __int16 wRepeatCount;
  unsigned __int16 wVirtualKeyCode;
  unsigned __int16 wVirtualScanCode;
  $D73D647711E0D18BB6EFDDF78E7AEEC6 uChar;
  unsigned int dwControlKeyState;
};

/* 6071 */
struct _PROPSHEETPAGEW_V1
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $B5A51C4AFFF5DDC4103EC1CA2C54B662 ___u3;
  $BEA4071AF47773B46964588E62B2512B ___u4;
  const wchar_t *pszTitle;
  __int64 (__cdecl *pfnDlgProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  __int64 lParam;
  unsigned int (__cdecl *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);
  unsigned int *pcRefParent;
};

/* 6072 */
struct tagGLYPHSET
{
  unsigned int cbThis;
  unsigned int flAccel;
  unsigned int cGlyphsSupported;
  unsigned int cRanges;
  tagWCRANGE ranges[1];
};

/* 6073 */
struct __cppobj IXMLDOMDocumentType : IXMLDOMNode
{
};

/* 6074 */
struct _PERF_INSTANCE_DEFINITION
{
  unsigned int ByteLength;
  unsigned int ParentObjectTitleIndex;
  unsigned int ParentObjectInstance;
  int UniqueID;
  unsigned int NameOffset;
  unsigned int NameLength;
};

/* 6075 */
struct _CRYPT_RC4_KEY_STATE
{
  char Key[16];
  char SBox[256];
  char i;
  char j;
};

/* 6076 */
struct __declspec(align(4)) _DISK_INT13_INFO
{
  unsigned __int16 DriveSelect;
  unsigned int MaxCylinders;
  unsigned __int16 SectorsPerTrack;
  unsigned __int16 MaxHeads;
  unsigned __int16 NumberDrives;
};

/* 6077 */
struct _DISK_DETECTION_INFO
{
  unsigned int SizeOfDetectInfo;
  _DETECTION_TYPE DetectionType;
  _DISK_INT13_INFO Int13;
  _DISK_EX_INT13_INFO ExInt13;
};

/* 6078 */
struct __declspec(align(8)) MOVE_FILE_DATA
{
  void *FileHandle;
  _LARGE_INTEGER StartingVcn;
  _LARGE_INTEGER StartingLcn;
  unsigned int ClusterCount;
};

/* 6079 */
struct _DRIVER_INFO_8W
{
  unsigned int cVersion;
  wchar_t *pName;
  wchar_t *pEnvironment;
  wchar_t *pDriverPath;
  wchar_t *pDataFile;
  wchar_t *pConfigFile;
  wchar_t *pHelpFile;
  wchar_t *pDependentFiles;
  wchar_t *pMonitorName;
  wchar_t *pDefaultDataType;
  wchar_t *pszzPreviousNames;
  _FILETIME ftDriverDate;
  unsigned __int64 dwlDriverVersion;
  wchar_t *pszMfgName;
  wchar_t *pszOEMUrl;
  wchar_t *pszHardwareID;
  wchar_t *pszProvider;
  wchar_t *pszPrintProcessor;
  wchar_t *pszVendorSetup;
  wchar_t *pszzColorProfiles;
  wchar_t *pszInfPath;
  unsigned int dwPrinterDriverAttributes;
  wchar_t *pszzCoreDriverDependencies;
  _FILETIME ftMinInboxDriverVerDate;
  unsigned __int64 dwlMinInboxDriverVerVersion;
};

/* 6080 */
struct _PROVIDOR_INFO_2A
{
  char *pOrder;
};

/* 6081 */
struct __declspec(align(8)) _QUERY_SERVICE_LOCK_STATUSA
{
  unsigned int fIsLocked;
  char *lpLockOwner;
  unsigned int dwLockDuration;
};

/* 6082 */
struct _CONSOLE_HISTORY_INFO
{
  unsigned int cbSize;
  unsigned int HistoryBufferSize;
  unsigned int NumberOfHistoryBuffers;
  unsigned int dwFlags;
};

/* 6083 */
struct HMIDISTRM__
{
  int unused;
};

/* 6084 */
struct _CERT_OR_CRL_BUNDLE
{
  unsigned int cItem;
  _CERT_OR_CRL_BLOB *rgItem;
};

/* 6085 */
struct __declspec(align(4)) _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
{
  unsigned int ResponseLevel;
  unsigned int NumberEntries;
  _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
  _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
  _BYTE gap8[68];
};

/* 6086 */
struct _OBJECTID
{
  _GUID Lineage;
  unsigned int Uniquifier;
};

/* 6087 */
struct _SYSTEM_ALARM_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 6088 */
struct IMAGE_LOAD_CONFIG_DIRECTORY64
{
  unsigned int Size;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned __int64 DeCommitFreeBlockThreshold;
  unsigned __int64 DeCommitTotalFreeThreshold;
  unsigned __int64 LockPrefixTable;
  unsigned __int64 MaximumAllocationSize;
  unsigned __int64 VirtualMemoryThreshold;
  unsigned __int64 ProcessAffinityMask;
  unsigned int ProcessHeapFlags;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned __int64 EditList;
  unsigned __int64 SecurityCookie;
  unsigned __int64 SEHandlerTable;
  unsigned __int64 SEHandlerCount;
};

/* 6089 */
struct _MEMORY_PRIORITY_INFORMATION
{
  unsigned int MemoryPriority;
};

/* 6090 */
struct tagEMRSETPIXELV
{
  tagEMR emr;
  _POINTL ptlPixel;
  unsigned int crColor;
};

/* 6091 */
struct _STORAGE_MINIPORT_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  _STORAGE_PORT_CODE_SET Portdriver;
  char LUNResetSupported;
  char TargetResetSupported;
  unsigned __int16 IoTimeoutValue;
};

/* 6092 */
struct linger
{
  unsigned __int16 l_onoff;
  unsigned __int16 l_linger;
};

/* 6093 */
union $8662F439D215AAEDBB1F787C8B649648
{
  unsigned __int64 FiberData;
  unsigned int Version;
};

/* 6094 */
struct _NT_TIB64
{
  unsigned __int64 ExceptionList;
  unsigned __int64 StackBase;
  unsigned __int64 StackLimit;
  unsigned __int64 SubSystemTib;
  $8662F439D215AAEDBB1F787C8B649648 ___u4;
  unsigned __int64 ArbitraryUserPointer;
  unsigned __int64 Self;
};

/* 6095 */
struct _UMS_SCHEDULER_STARTUP_INFO
{
  unsigned int UmsVersion;
  void *CompletionList;
  void (__cdecl *SchedulerProc)(_RTL_UMS_SCHEDULER_REASON, unsigned __int64, void *);
  void *SchedulerParam;
};

/* 6096 */
struct _ABCFLOAT
{
  float abcfA;
  float abcfB;
  float abcfC;
};

/* 6097 */
struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT
{
  unsigned int Flags;
  unsigned int NumberOfClusters;
  _LARGE_INTEGER Cluster[1];
};

/* 6098 */
struct __declspec(align(4)) _TXFS_START_RM_INFORMATION
{
  unsigned int Flags;
  unsigned __int64 LogContainerSize;
  unsigned int LogContainerCountMin;
  unsigned int LogContainerCountMax;
  unsigned int LogGrowthIncrement;
  unsigned int LogAutoShrinkPercentage;
  unsigned int TmLogPathOffset;
  unsigned __int16 TmLogPathLength;
  unsigned __int16 LoggingMode;
  unsigned __int16 LogPathLength;
  unsigned __int16 Reserved;
  wchar_t LogPath[1];
};

/* 6099 */
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
  unsigned __int64 BeginAddress;
  unsigned __int64 EndAddress;
  unsigned __int64 ExceptionHandler;
  unsigned __int64 HandlerData;
  unsigned __int64 PrologEndAddress;
};

/* 6100 */
struct _CONSOLE_CURSOR_INFO
{
  unsigned int dwSize;
  int bVisible;
};

/* 6101 */
struct _CERT_NAME_VALUE
{
  unsigned int dwValueType;
  _CRYPTOAPI_BLOB Value;
};

/* 6102 */
struct _CPS_URLS
{
  wchar_t *pszURL;
  _CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
  _CRYPTOAPI_BLOB *pDigest;
};

/* 6103 */
union $BB45F81CFB31ED0FF710230D391A9A84
{
  _CLUSTER_RANGE ClusterRanges[1];
  _FILE_REFERENCE_RANGE FileReferenceRanges[1];
};

/* 6104 */
struct _QUERY_FILE_LAYOUT_INPUT
{
  unsigned int NumberOfPairs;
  unsigned int Flags;
  _QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
  unsigned int Reserved;
  $BB45F81CFB31ED0FF710230D391A9A84 Filter;
};

/* 6105 */
struct __cppobj IMessageFilter : IUnknown
{
};

/* 6106 */
struct __declspec(align(8)) _TAPE_GET_MEDIA_PARAMETERS
{
  _LARGE_INTEGER Capacity;
  _LARGE_INTEGER Remaining;
  unsigned int BlockSize;
  unsigned int PartitionCount;
  char WriteProtected;
};

/* 6107 */
struct _PROV_ENUMALGS
{
  unsigned int aiAlgid;
  unsigned int dwBitLen;
  unsigned int dwNameLen;
  char szName[20];
};

/* 6108 */
struct __cppobj IAsyncManager : IUnknown
{
};

/* 6109 */
struct __cppobj IReleaseMarshalBuffers : IUnknown
{
};

/* 6110 */
struct _TOKEN_ELEVATION
{
  unsigned int TokenIsElevated;
};

/* 6111 */
struct __declspec(align(8)) _CRL_ISSUING_DIST_POINT
{
  _CRL_DIST_POINT_NAME DistPointName;
  int fOnlyContainsUserCerts;
  int fOnlyContainsCACerts;
  _CRYPT_BIT_BLOB OnlySomeReasonFlags;
  int fIndirectCRL;
};

/* 6112 */
struct _FILE_PREFETCH_EX
{
  unsigned int Type;
  unsigned int Count;
  void *Context;
  unsigned __int64 Prefetch[1];
};

/* 6113 */
struct __declspec(align(8)) tagSTATDATA
{
  tagFORMATETC formatetc;
  unsigned int advf;
  IAdviseSink *pAdvSink;
  unsigned int dwConnection;
};

/* 6114 */
struct _SERVICE_DESCRIPTIONA
{
  char *lpDescription;
};

/* 6115 */
struct __declspec(align(8)) tagRAWINPUTDEVICELIST
{
  void *hDevice;
  unsigned int dwType;
};

/* 6116 */
struct _XSTATE_CONFIGURATION
{
  unsigned __int64 EnabledFeatures;
  unsigned __int64 EnabledVolatileFeatures;
  unsigned int Size;
  unsigned __int32 OptimizedSave : 1;
  _XSTATE_FEATURE Features[64];
};

/* 6117 */
struct tagCRGB
{
  char bRed;
  char bGreen;
  char bBlue;
  char bExtra;
};

/* 6118 */
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR
{
  wchar_t *pwszName;
  wchar_t *pwszValue;
};

/* 6119 */
struct __cppobj IOleObject : IUnknown
{
};

/* 6120 */
struct timeval
{
  int tv_sec;
  int tv_usec;
};

/* 6121 */
struct tagBITMAP
{
  int bmType;
  int bmWidth;
  int bmHeight;
  int bmWidthBytes;
  unsigned __int16 bmPlanes;
  unsigned __int16 bmBitsPixel;
  void *bmBits;
};

/* 6122 */
struct __declspec(align(8)) tagDIBSECTION
{
  tagBITMAP dsBm;
  tagBITMAPINFOHEADER dsBmih;
  unsigned int dsBitfields[3];
  void *dshSection;
  unsigned int dsOffset;
};

/* 6123 */
struct __declspec(align(4)) tagRemHBITMAP
{
  unsigned int cbData;
  char data[1];
};

/* 6124 */
struct _WOW64_LDT_ENTRY
{
  unsigned __int16 LimitLow;
  unsigned __int16 BaseLow;
  $02B27C53EFB0D5AD428062CA5D3A2A22 HighWord;
};

/* 6125 */
struct __declspec(align(4)) _WIN32_STREAM_ID
{
  unsigned int dwStreamId;
  unsigned int dwStreamAttributes;
  _LARGE_INTEGER Size;
  unsigned int dwStreamNameSize;
  wchar_t cStreamName[1];
};

/* 6126 */
struct _TOKEN_OWNER
{
  void *Owner;
};

/* 6127 */
struct _CMSG_RC4_AUX_INFO
{
  unsigned int cbSize;
  unsigned int dwBitLen;
};

/* 6128 */
struct __declspec(align(8)) _tagRemBINDINFO
{
  unsigned int cbSize;
  wchar_t *szExtraInfo;
  unsigned int grfBindInfoF;
  unsigned int dwBindVerb;
  wchar_t *szCustomVerb;
  unsigned int cbstgmedData;
  unsigned int dwOptions;
  unsigned int dwOptionsFlags;
  unsigned int dwCodePage;
  _REMSECURITY_ATTRIBUTES securityAttributes;
  _GUID iid;
  IUnknown *pUnk;
  unsigned int dwReserved;
};

/* 6129 */
struct _EVENTSFORLOGFILE
{
  unsigned int ulSize;
  wchar_t szLogicalLogFile[256];
  unsigned int ulNumRecords;
  _EVENTLOGRECORD pEventLogRecords[];
};

/* 6130 */
struct __cppobj IXMLHttpRequest : IDispatch
{
};

/* 6131 */
struct _SUPPORTED_OS_INFO
{
  unsigned __int16 OsCount;
  unsigned __int16 MitigationExist;
  unsigned __int16 OsList[4];
};

/* 6132 */
struct tMIXERCONTROLDETAILS_BOOLEAN
{
  int fValue;
};

/* 6133 */
struct __declspec(align(2)) _IMAGE_RESOURCE_DIRECTORY_STRING
{
  unsigned __int16 Length;
  char NameString[1];
};

/* 6134 */
struct tagPOINTER_DEVICE_CURSOR_INFO
{
  unsigned int cursorId;
  tagPOINTER_DEVICE_CURSOR_TYPE cursor;
};

/* 6135 */
struct sockaddr_dl
{
  unsigned __int16 sdl_family;
  char sdl_data[8];
  char sdl_zero[4];
};

/* 6136 */
struct _CRYPT_CSP_PROVIDER
{
  unsigned int dwKeySpec;
  wchar_t *pwszProviderName;
  _CRYPT_BIT_BLOB Signature;
};

/* 6137 */
struct _ACCESS_DENIED_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 6138 */
struct _IMAGE_DOS_HEADER
{
  unsigned __int16 e_magic;
  unsigned __int16 e_cblp;
  unsigned __int16 e_cp;
  unsigned __int16 e_crlc;
  unsigned __int16 e_cparhdr;
  unsigned __int16 e_minalloc;
  unsigned __int16 e_maxalloc;
  unsigned __int16 e_ss;
  unsigned __int16 e_sp;
  unsigned __int16 e_csum;
  unsigned __int16 e_ip;
  unsigned __int16 e_cs;
  unsigned __int16 e_lfarlc;
  unsigned __int16 e_ovno;
  unsigned __int16 e_res[4];
  unsigned __int16 e_oemid;
  unsigned __int16 e_oeminfo;
  unsigned __int16 e_res2[10];
  int e_lfanew;
};

/* 6139 */
struct _FILE_DISPOSITION_INFO
{
  char DeleteFileA;
};

/* 6140 */
struct _ADAPTER_STATUS
{
  char adapter_address[6];
  char rev_major;
  char reserved0;
  char adapter_type;
  char rev_minor;
  unsigned __int16 duration;
  unsigned __int16 frmr_recv;
  unsigned __int16 frmr_xmit;
  unsigned __int16 iframe_recv_err;
  unsigned __int16 xmit_aborts;
  unsigned int xmit_success;
  unsigned int recv_success;
  unsigned __int16 iframe_xmit_err;
  unsigned __int16 recv_buff_unavail;
  unsigned __int16 t1_timeouts;
  unsigned __int16 ti_timeouts;
  unsigned int reserved1;
  unsigned __int16 free_ncbs;
  unsigned __int16 max_cfg_ncbs;
  unsigned __int16 max_ncbs;
  unsigned __int16 xmit_buf_unavail;
  unsigned __int16 max_dgram_size;
  unsigned __int16 pending_sess;
  unsigned __int16 max_cfg_sess;
  unsigned __int16 max_sess;
  unsigned __int16 max_sess_pkt_size;
  unsigned __int16 name_count;
};

/* 6141 */
struct _CTL_ANY_SUBJECT_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
  _CRYPTOAPI_BLOB SubjectIdentifier;
};

/* 6142 */
struct _DISPATCHER_CONTEXT
{
  unsigned __int64 ControlPc;
  unsigned __int64 ImageBase;
  _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionEntry;
  unsigned __int64 EstablisherFrame;
  unsigned __int64 TargetIp;
  _CONTEXT *ContextRecord;
  _EXCEPTION_DISPOSITION (__cdecl *LanguageHandler)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
  void *HandlerData;
  _UNWIND_HISTORY_TABLE *HistoryTable;
  unsigned int ScopeIndex;
  unsigned int Fill0;
};

/* 6143 */
struct $1570E6E652654060C308A778ED15CE16
{
  unsigned __int32 bootPersistenceOn : 1;
  unsigned __int32 reserved : 31;
};

/* 6144 */
union $E9D2643901B909F30E3B0844AF4E4AED
{
  $1570E6E652654060C308A778ED15CE16 __s0;
  unsigned int value;
};

/* 6145 */
struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
  DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  $E9D2643901B909F30E3B0844AF4E4AED ___u1;
};

/* 6146 */
struct _NOTIFYICONDATAW
{
  unsigned int cbSize;
  HWND__ *hWnd;
  unsigned int uID;
  unsigned int uFlags;
  unsigned int uCallbackMessage;
  HICON__ *hIcon;
  wchar_t szTip[128];
  unsigned int dwState;
  unsigned int dwStateMask;
  wchar_t szInfo[256];
  $30417D6DC3305618FB171BBBD15A8541 ___u10;
  wchar_t szInfoTitle[64];
  unsigned int dwInfoFlags;
  _GUID guidItem;
  HICON__ *hBalloonIcon;
};

/* 6147 */
struct _PRIVKEYVER3
{
  unsigned int magic;
  unsigned int bitlenP;
  unsigned int bitlenQ;
  unsigned int bitlenJ;
  unsigned int bitlenX;
  _DSSSEED DSSSeed;
};

/* 6148 */
struct STARTING_VCN_INPUT_BUFFER
{
  _LARGE_INTEGER StartingVcn;
};

/* 6149 */
struct HDROP__
{
  int unused;
};

/* 6150 */
struct _FORMAT_PARAMETERS
{
  _MEDIA_TYPE MediaType;
  unsigned int StartCylinderNumber;
  unsigned int EndCylinderNumber;
  unsigned int StartHeadNumber;
  unsigned int EndHeadNumber;
};

/* 6151 */
struct tagLASTINPUTINFO
{
  unsigned int cbSize;
  unsigned int dwTime;
};

/* 6152 */
struct __declspec(align(8)) _DRAGINFOW
{
  unsigned int uSize;
  tagPOINT pt;
  int fNC;
  wchar_t *lpFileList;
  unsigned int grfKeyState;
};

/* 6153 */
struct __declspec(align(4)) _STORAGE_DEVICE_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  char DeviceType;
  char DeviceTypeModifier;
  char RemovableMedia;
  char CommandQueueing;
  unsigned int VendorIdOffset;
  unsigned int ProductIdOffset;
  unsigned int ProductRevisionOffset;
  unsigned int SerialNumberOffset;
  _STORAGE_BUS_TYPE BusType;
  unsigned int RawPropertiesLength;
  char RawDeviceProperties[1];
};

/* 6154 */
struct __declspec(align(8)) DELETE_USN_JOURNAL_DATA
{
  unsigned __int64 UsnJournalID;
  unsigned int DeleteFlags;
};

/* 6155 */
struct tagIMEMENUITEMINFOW
{
  unsigned int cbSize;
  unsigned int fType;
  unsigned int fState;
  unsigned int wID;
  HBITMAP__ *hbmpChecked;
  HBITMAP__ *hbmpUnchecked;
  unsigned int dwItemData;
  wchar_t szString[80];
  HBITMAP__ *hbmpItem;
};

/* 6156 */
struct in6_pktinfo_ex
{
  in6_pktinfo pkt_info;
  SCOPE_ID scope_id;
};

/* 6157 */
struct tagCOLORADJUSTMENT
{
  unsigned __int16 caSize;
  unsigned __int16 caFlags;
  unsigned __int16 caIlluminantIndex;
  unsigned __int16 caRedGamma;
  unsigned __int16 caGreenGamma;
  unsigned __int16 caBlueGamma;
  unsigned __int16 caReferenceBlack;
  unsigned __int16 caReferenceWhite;
  __int16 caContrast;
  __int16 caBrightness;
  __int16 caColorfulness;
  __int16 caRedGreenTint;
};

/* 6158 */
struct tagEMRSETCOLORADJUSTMENT
{
  tagEMR emr;
  tagCOLORADJUSTMENT ColorAdjustment;
};

/* 6159 */
struct _CERT_NAME_INFO
{
  unsigned int cRDN;
  _CERT_RDN *rgRDN;
};

/* 6160 */
struct _FPO_DATA
{
  unsigned int ulOffStart;
  unsigned int cbProcSize;
  unsigned int cdwLocals;
  unsigned __int16 cdwParams;
  unsigned __int16 cbProlog : 8;
  unsigned __int16 cbRegs : 3;
  unsigned __int16 fHasSEH : 1;
  unsigned __int16 fUseBP : 1;
  unsigned __int16 reserved : 1;
  unsigned __int16 cbFrame : 2;
};

/* 6161 */
struct tagNONCLIENTMETRICSW
{
  unsigned int cbSize;
  int iBorderWidth;
  int iScrollWidth;
  int iScrollHeight;
  int iCaptionWidth;
  int iCaptionHeight;
  tagLOGFONTW lfCaptionFont;
  int iSmCaptionWidth;
  int iSmCaptionHeight;
  tagLOGFONTW lfSmCaptionFont;
  int iMenuWidth;
  int iMenuHeight;
  tagLOGFONTW lfMenuFont;
  tagLOGFONTW lfStatusFont;
  tagLOGFONTW lfMessageFont;
  int iPaddedBorderWidth;
};

/* 6162 */
struct _BCRYPT_DSA_KEY_BLOB
{
  unsigned int dwMagic;
  unsigned int cbKey;
  char Count[4];
  char Seed[20];
  char q[20];
};

/* 6163 */
struct __declspec(align(8)) _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
{
  unsigned __int64 IoReadBytesLimit;
  unsigned __int64 IoWriteBytesLimit;
  _LARGE_INTEGER PerJobUserTimeLimit;
  unsigned __int64 JobMemoryLimit;
  _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
  _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
  unsigned int LimitFlags;
};

/* 6164 */
struct _NDR_USER_MARSHAL_INFO
{
  unsigned int InformationLevel;
  _NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
};

/* 6165 */
struct _TOKEN_MANDATORY_POLICY
{
  unsigned int Policy;
};

/* 6166 */
struct _TOKEN_ACCESS_INFORMATION
{
  _SID_AND_ATTRIBUTES_HASH *SidHash;
  _SID_AND_ATTRIBUTES_HASH *RestrictedSidHash;
  _TOKEN_PRIVILEGES *Privileges;
  _LUID AuthenticationId;
  _TOKEN_TYPE TokenType;
  _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  _TOKEN_MANDATORY_POLICY MandatoryPolicy;
  unsigned int Flags;
  unsigned int AppContainerNumber;
  void *PackageSid;
  _SID_AND_ATTRIBUTES_HASH *CapabilitiesHash;
};

/* 6167 */
struct tagEMRSETVIEWPORTORGEX
{
  tagEMR emr;
  _POINTL ptlOrigin;
};

/* 6168 */
struct _WOW64_DESCRIPTOR_TABLE_ENTRY
{
  unsigned int Selector;
  _WOW64_LDT_ENTRY Descriptor;
};

/* 6169 */
struct __declspec(align(8)) _OPEN_PRINTER_PROPS_INFOW
{
  unsigned int dwSize;
  wchar_t *pszSheetName;
  unsigned int uSheetIndex;
  unsigned int dwFlags;
  int bModal;
};

/* 6170 */
struct _SERVICE_TABLE_ENTRYA
{
  char *lpServiceName;
  void (__cdecl *lpServiceProc)(unsigned int, char **);
};

/* 6171 */
struct _RPC_PROTSEQ_VECTORA
{
  unsigned int Count;
  char *Protseq[1];
};

/* 6172 */
struct _DEVICEDUMP_SECTION_HEADER
{
  _GUID guidDeviceDataId;
  char sOrganizationID[16];
  unsigned int dwFirmwareRevision;
  char sModelNumber[32];
  char szDeviceManufacturingID[32];
  unsigned int dwFlags;
  unsigned int bRestrictedPrivateDataVersion;
  unsigned int dwFirmwareIssueId;
  char szIssueDescriptionString[132];
};

/* 6173 */
struct _PLEX_READ_DATA_REQUEST
{
  _LARGE_INTEGER ByteOffset;
  unsigned int ByteLength;
  unsigned int PlexNumber;
};

/* 6174 */
struct _MENU_EVENT_RECORD
{
  unsigned int dwCommandId;
};

/* 6175 */
struct _RGNDATAHEADER
{
  unsigned int dwSize;
  unsigned int iType;
  unsigned int nCount;
  unsigned int nRgnSize;
  tagRECT rcBound;
};

/* 6176 */
struct __declspec(align(4)) _RGNDATA
{
  _RGNDATAHEADER rdh;
  char Buffer[1];
};

/* 6177 */
struct _REMOTE_NAME_INFOA
{
  char *lpUniversalName;
  char *lpConnectionName;
  char *lpRemainingPath;
};

/* 6178 */
struct _CMSG_STREAM_INFO
{
  unsigned int cbContent;
  int (__cdecl *pfnStreamOutput)(const void *, char *, unsigned int, int);
  void *pvArg;
};

/* 6179 */
struct _DATATYPES_INFO_1W
{
  wchar_t *pName;
};

/* 6180 */
struct _FIND_NAME_HEADER
{
  unsigned __int16 node_count;
  char reserved;
  char unique_group;
};

/* 6181 */
struct __declspec(align(8)) _TRANSACTION_NOTIFICATION
{
  void *TransactionKey;
  unsigned int TransactionNotification;
  _LARGE_INTEGER TmVirtualClock;
  unsigned int ArgumentLength;
};

/* 6182 */
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
{
  unsigned int cbSize;
  _CMSG_SIGNED_ENCODE_INFO SignedInfo;
  _CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
};

/* 6183 */
struct tagEMRSETTEXTCOLOR
{
  tagEMR emr;
  unsigned int crColor;
};

/* 6184 */
struct _FIND_NAME_BUFFER
{
  char length;
  char access_control;
  char frame_control;
  char destination_addr[6];
  char source_addr[6];
  char routing_info[18];
};

/* 6185 */
struct _ACTION_HEADER
{
  unsigned int transport_id;
  unsigned __int16 action_code;
  unsigned __int16 reserved;
};

/* 6186 */
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
{
  unsigned int cbSize;
  unsigned int dwRegPolicySettings;
  _CMSG_SIGNER_INFO *pSignerInfo;
};

/* 6187 */
struct __cppobj IOleCache2 : IOleCache
{
};

/* 6188 */
struct __declspec(align(8)) _DOCINFOW
{
  int cbSize;
  const wchar_t *lpszDocName;
  const wchar_t *lpszOutput;
  const wchar_t *lpszDatatype;
  unsigned int fwType;
};

/* 6189 */
struct __cppobj ISynchronizeMutex : ISynchronize
{
};

/* 6190 */
struct __cppobj IDropSourceNotify : IUnknown
{
};

/* 6191 */
struct __declspec(align(4)) tagSTATPROPSTG
{
  wchar_t *lpwstrName;
  unsigned int propid;
  unsigned __int16 vt;
};

/* 6192 */
struct __cppobj INoMarshal : IUnknown
{
};

/* 6193 */
struct HMIDI__
{
  int unused;
};

/* 6194 */
struct tagDELETEITEMSTRUCT
{
  unsigned int CtlType;
  unsigned int CtlID;
  unsigned int itemID;
  HWND__ *hwndItem;
  unsigned __int64 itemData;
};

/* 6195 */
struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
  unsigned int BufferSize;
  char *Buffer;
};

/* 6196 */
struct tagHSZPAIR
{
  HSZ__ *hszSvc;
  HSZ__ *hszTopic;
};

/* 6197 */
struct __declspec(align(4)) POWERBROADCAST_SETTING
{
  _GUID PowerSetting;
  unsigned int DataLength;
  char Data[1];
};

/* 6198 */
struct _WSANETWORKEVENTS
{
  int lNetworkEvents;
  int iErrorCode[10];
};

/* 6199 */
struct __unaligned __declspec(align(4)) _s__ThrowInfo
{
  unsigned int attributes;
  void (__cdecl *pmfnUnwind)(void *);
  int (__cdecl *pForwardCompat)();
  _s__CatchableTypeArray *pCatchableTypeArray;
};

/* 6200 */
struct __declspec(align(4)) _TRANSACTIONMANAGER_LOGPATH_INFORMATION
{
  unsigned int LogPathLength;
  wchar_t LogPath[1];
};

/* 6201 */
struct __cppobj tagMONITORINFOEXW : tagMONITORINFO
{
  wchar_t szDevice[32];
};

/* 6202 */
struct _CRYPT_TIMESTAMP_PARA
{
  const char *pszTSAPolicyId;
  int fRequestCerts;
  _CRYPTOAPI_BLOB Nonce;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 6203 */
union $2076ECFE87663F036E6AF9D31F165B51
{
  _SYSTEMTIME SystemTime;
  _FILETIME FileTime;
};

/* 6204 */
struct tagRPC_EXTENDED_ERROR_INFO
{
  unsigned int Version;
  wchar_t *ComputerName;
  unsigned int ProcessID;
  $2076ECFE87663F036E6AF9D31F165B51 u;
  unsigned int GeneratingComponent;
  unsigned int Status;
  unsigned __int16 DetectionLocation;
  unsigned __int16 Flags;
  int NumberOfParameters;
  tagRPC_EE_INFO_PARAM Parameters[4];
};

/* 6205 */
struct BULK_SECURITY_TEST_DATA
{
  unsigned int DesiredAccess;
  unsigned int SecurityIds[1];
};

/* 6206 */
struct __cppobj IOleInPlaceFrame : IOleInPlaceUIWindow
{
};

/* 6207 */
struct tagOleMenuGroupWidths
{
  int width[6];
};

/* 6208 */
struct _SYSTEM_POWER_POLICY
{
  unsigned int Revision;
  POWER_ACTION_POLICY PowerButton;
  POWER_ACTION_POLICY SleepButton;
  POWER_ACTION_POLICY LidClose;
  _SYSTEM_POWER_STATE LidOpenWake;
  unsigned int Reserved;
  POWER_ACTION_POLICY Idle;
  unsigned int IdleTimeout;
  char IdleSensitivity;
  char DynamicThrottle;
  char Spare2[2];
  _SYSTEM_POWER_STATE MinSleep;
  _SYSTEM_POWER_STATE MaxSleep;
  _SYSTEM_POWER_STATE ReducedLatencySleep;
  unsigned int WinLogonFlags;
  unsigned int Spare3;
  unsigned int DozeS4Timeout;
  unsigned int BroadcastCapacityResolution;
  SYSTEM_POWER_LEVEL DischargePolicy[4];
  unsigned int VideoTimeout;
  char VideoDimDisplay;
  unsigned int VideoReserved[3];
  unsigned int SpindownTimeout;
  char OptimizeForPower;
  char FanThrottleTolerance;
  char ForcedThrottle;
  char MinThrottle;
  POWER_ACTION_POLICY OverThrottled;
};

/* 6209 */
struct _IMAGE_RESOURCE_DIR_STRING_U
{
  unsigned __int16 Length;
  wchar_t NameString[1];
};

/* 6210 */
struct _TRANSACTION_LIST_INFORMATION
{
  unsigned int NumberOfTransactions;
  _TRANSACTION_LIST_ENTRY TransactionInformation[1];
};

/* 6211 */
struct tagEMRMASKBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
  int xMask;
  int yMask;
  unsigned int iUsageMask;
  unsigned int offBmiMask;
  unsigned int cbBmiMask;
  unsigned int offBitsMask;
  unsigned int cbBitsMask;
};

/* 6212 */
struct HMIXER__
{
  int unused;
};

/* 6213 */
struct _DEVICE_POWER_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  char DeviceAttentionSupported;
  char AsynchronousNotificationSupported;
  char IdlePowerManagementEnabled;
  char D3ColdEnabled;
  char D3ColdSupported;
  char Reserved[3];
  unsigned int IdleTimeoutInMS;
};

/* 6214 */
struct __declspec(align(8)) _SERVICE_CONTROL_STATUS_REASON_PARAMSW
{
  unsigned int dwReason;
  wchar_t *pszComment;
  _SERVICE_STATUS_PROCESS ServiceStatus;
};

/* 6215 */
struct __cppobj IAdviseSink2 : IAdviseSink
{
};

/* 6216 */
struct _APPLICATIONLAUNCH_SETTING_VALUE
{
  _LARGE_INTEGER ActivationTime;
  unsigned int Flags;
  unsigned int ButtonInstanceID;
};

/* 6217 */
struct __cppobj IOleAdviseHolder : IUnknown
{
};

/* 6218 */
struct $C849F87CCAF06F124EC48524C532BAAF
{
  __int8 NoDomainAccounting : 1;
  __int8 IncreasePolicy : 2;
  __int8 DecreasePolicy : 2;
  __int8 Reserved : 3;
};

/* 6219 */
union $38DC9C53399601EC60CB8E4BD765D5D8
{
  char AsBYTE;
  $C849F87CCAF06F124EC48524C532BAAF __s1;
};

/* 6220 */
union $ABBB45BE29EA123141AC22BBBF0028BD
{
  char Spare;
  $38DC9C53399601EC60CB8E4BD765D5D8 Flags;
};

/* 6221 */
struct PROCESSOR_PERFSTATE_POLICY
{
  unsigned int Revision;
  char MaxThrottle;
  char MinThrottle;
  char BusyAdjThreshold;
  $ABBB45BE29EA123141AC22BBBF0028BD ___u4;
  unsigned int TimeCheck;
  unsigned int IncreaseTime;
  unsigned int DecreaseTime;
  unsigned int IncreasePercent;
  unsigned int DecreasePercent;
};

/* 6222 */
struct __cppobj IInternetProtocolEx : IInternetProtocol
{
};

/* 6223 */
struct _SERVICE_SID_INFO
{
  unsigned int dwServiceSidType;
};

/* 6224 */
struct BATTERY_REPORTING_SCALE
{
  unsigned int Granularity;
  unsigned int Capacity;
};

/* 6225 */
struct $19436C2F0C0C306A8BFD7B32BBC2825D
{
  unsigned __int32 DisableExtensionPoints : 1;
  unsigned __int32 ReservedFlags : 31;
};

/* 6226 */
union $4E85036B5DEAC703AEF5110EDD0EF655
{
  unsigned int Flags;
  $19436C2F0C0C306A8BFD7B32BBC2825D __s1;
};

/* 6227 */
struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
{
  $4E85036B5DEAC703AEF5110EDD0EF655 ___u0;
};

/* 6228 */
struct _complex
{
  long double x;
  long double y;
};

/* 6229 */
struct tagEMRPIXELFORMAT
{
  tagEMR emr;
  tagPIXELFORMATDESCRIPTOR pfd;
};

/* 6230 */
struct _SYSTEM_AUDIT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 6231 */
struct tagMCI_OVLY_RECT_PARMS
{
  unsigned __int64 dwCallback;
  tagRECT rc;
};

/* 6232 */
struct _TXFS_LIST_TRANSACTIONS
{
  unsigned __int64 NumberOfTransactions;
  unsigned __int64 BufferSizeRequired;
};

/* 6233 */
struct $CDB9B99D549B790D4C735D013865E181
{
  unsigned __int32 RvaBased : 1;
  unsigned __int32 ReservedAttributes : 31;
};

/* 6234 */
union $408FF06AC255D8671D98F6DADC71059B
{
  unsigned int AllAttributes;
  $CDB9B99D549B790D4C735D013865E181 __s1;
};

/* 6235 */
struct _IMAGE_DELAYLOAD_DESCRIPTOR
{
  $408FF06AC255D8671D98F6DADC71059B Attributes;
  unsigned int DllNameRVA;
  unsigned int ModuleHandleRVA;
  unsigned int ImportAddressTableRVA;
  unsigned int ImportNameTableRVA;
  unsigned int BoundImportAddressTableRVA;
  unsigned int UnloadInformationTableRVA;
  unsigned int TimeDateStamp;
};

/* 6236 */
struct tagMCI_RECORD_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
};

/* 6237 */
struct __cppobj ITypeInfo2 : ITypeInfo
{
};

/* 6238 */
struct __declspec(align(4)) tagTLIBATTR
{
  _GUID guid;
  unsigned int lcid;
  tagSYSKIND syskind;
  unsigned __int16 wMajorVerNum;
  unsigned __int16 wMinorVerNum;
  unsigned __int16 wLibFlags;
};

/* 6239 */
struct SERVICE_STATUS_HANDLE__
{
  int unused;
};

/* 6240 */
struct __cppobj IEnumSTATSTG : IUnknown
{
};

/* 6241 */
struct tagSTATSTG
{
  wchar_t *pwcsName;
  unsigned int type;
  _ULARGE_INTEGER cbSize;
  _FILETIME mtime;
  _FILETIME ctime;
  _FILETIME atime;
  unsigned int grfMode;
  unsigned int grfLocksSupported;
  _GUID clsid;
  unsigned int grfStateBits;
  unsigned int reserved;
};

/* 6242 */
struct tagMENUINFO
{
  unsigned int cbSize;
  unsigned int fMask;
  unsigned int dwStyle;
  unsigned int cyMax;
  HBRUSH__ *hbrBack;
  unsigned int dwContextHelpID;
  unsigned __int64 dwMenuData;
};

/* 6243 */
struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE
{
  unsigned int Size;
  unsigned int Version;
  unsigned __int64 SlabSizeInBytes;
  unsigned int SlabOffsetDeltaInBytes;
  unsigned int SlabAllocationBitMapBitCount;
  unsigned int SlabAllocationBitMapLength;
  unsigned int SlabAllocationBitMap[1];
};

/* 6244 */
struct __declspec(align(8)) _REQUEST_RAW_ENCRYPTED_DATA
{
  __int64 FileOffset;
  unsigned int Length;
};

/* 6245 */
struct __declspec(align(8)) tagINTERFACEDATA
{
  tagMETHODDATA *pmethdata;
  unsigned int cMembers;
};

/* 6246 */
struct _SERVICE_TIMECHANGE_INFO
{
  _LARGE_INTEGER liNewTime;
  _LARGE_INTEGER liOldTime;
};

/* 6247 */
struct _ICONINFO
{
  int fIcon;
  unsigned int xHotspot;
  unsigned int yHotspot;
  HBITMAP__ *hbmMask;
  HBITMAP__ *hbmColor;
};

/* 6248 */
struct __unaligned __declspec(align(4)) tagMCI_VD_PLAY_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
  unsigned int dwSpeed;
};

/* 6249 */
struct _DRIVER_INFO_1W
{
  wchar_t *pName;
};

/* 6250 */
struct _OBJECT_TYPE_LIST
{
  unsigned __int16 Level;
  unsigned __int16 Sbz;
  _GUID *ObjectType;
};

/* 6251 */
struct _SE_ACCESS_REQUEST
{
  unsigned int Size;
  _SE_SECURITY_DESCRIPTOR *SeSecurityDescriptor;
  unsigned int DesiredAccess;
  unsigned int PreviouslyGrantedAccess;
  void *PrincipalSelfSid;
  _GENERIC_MAPPING *GenericMapping;
  unsigned int ObjectTypeListCount;
  _OBJECT_TYPE_LIST *ObjectTypeList;
};

/* 6252 */
struct _CRYPTPROTECT_PROMPTSTRUCT
{
  unsigned int cbSize;
  unsigned int dwPromptFlags;
  HWND__ *hwndApp;
  const wchar_t *szPrompt;
};

/* 6253 */
struct __declspec(align(4)) NTFS_FILE_RECORD_OUTPUT_BUFFER
{
  _LARGE_INTEGER FileReferenceNumber;
  unsigned int FileRecordLength;
  char FileRecordBuffer[1];
};

/* 6254 */
struct OPENCARDNAME_EXW
{
  unsigned int dwStructSize;
  unsigned __int64 hSCardContext;
  HWND__ *hwndOwner;
  unsigned int dwFlags;
  const wchar_t *lpstrTitle;
  const wchar_t *lpstrSearchDesc;
  HICON__ *hIcon;
  OPENCARD_SEARCH_CRITERIAW *pOpenCardSearchCriteria;
  unsigned __int64 (__cdecl *lpfnConnect)(unsigned __int64, wchar_t *, wchar_t *, void *);
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  wchar_t *lpstrRdr;
  unsigned int nMaxRdr;
  wchar_t *lpstrCard;
  unsigned int nMaxCard;
  unsigned int dwActiveProtocol;
  unsigned __int64 hCardHandle;
};

/* 6255 */
struct __cppobj IExternalConnection : IUnknown
{
};

/* 6256 */
struct NTFS_FILE_RECORD_INPUT_BUFFER
{
  _LARGE_INTEGER FileReferenceNumber;
};

/* 6257 */
struct _exception
{
  int type;
  char *name;
  long double arg1;
  long double arg2;
  long double retval;
};

/* 6258 */
struct _OPERATION_START_PARAMETERS
{
  unsigned int Version;
  unsigned int OperationId;
  unsigned int Flags;
};

/* 6259 */
struct __cppobj IOleClientSite : IUnknown
{
};

/* 6260 */
struct HWAVE__
{
  int unused;
};

/* 6261 */
struct _DRIVER_INFO_2A
{
  unsigned int cVersion;
  char *pName;
  char *pEnvironment;
  char *pDriverPath;
  char *pDataFile;
  char *pConfigFile;
};

/* 6262 */
struct __declspec(align(4)) _cpinfo
{
  unsigned int MaxCharSize;
  char DefaultChar[2];
  char LeadByte[12];
};

/* 6263 */
struct __cppobj IXMLDOMParseError : IDispatch
{
};

/* 6264 */
struct _CRYPT_SEQUENCE_OF_ANY
{
  unsigned int cValue;
  _CRYPTOAPI_BLOB *rgValue;
};

/* 6265 */
struct _CERT_QC_STATEMENTS_EXT_INFO
{
  unsigned int cStatement;
  _CERT_QC_STATEMENT *rgStatement;
};

/* 6266 */
struct __declspec(align(8)) tagRPC_CALL_ATTRIBUTES_V2_A
{
  unsigned int Version;
  unsigned int Flags;
  unsigned int ServerPrincipalNameBufferLength;
  char *ServerPrincipalName;
  unsigned int ClientPrincipalNameBufferLength;
  char *ClientPrincipalName;
  unsigned int AuthenticationLevel;
  unsigned int AuthenticationService;
  int NullSession;
  int KernelModeCaller;
  unsigned int ProtocolSequence;
  unsigned int IsClientLocal;
  void *ClientPID;
  unsigned int CallStatus;
  tagRpcCallType CallType;
  _RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
  unsigned __int16 OpNum;
  _GUID InterfaceUuid;
};

/* 6267 */
struct SHELLHOOKINFO
{
  HWND__ *hwnd;
  tagRECT rc;
};

/* 6268 */
struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
{
  unsigned int cProviders;
  wchar_t **rgpszProviders;
};

/* 6269 */
struct __cppobj IMonikerProp : IUnknown
{
};

/* 6270 */
struct _PSFEATURE_OUTPUT
{
  int bPageIndependent;
  int bSetPageDevice;
};

/* 6271 */
struct tagMIDIINCAPSW
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwSupport;
};

/* 6272 */
struct __cppobj IEnumVARIANT : IUnknown
{
};

/* 6273 */
struct _SYSTEM_AUDIT_OBJECT_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int Flags;
  _GUID ObjectType;
  _GUID InheritedObjectType;
  unsigned int SidStart;
};

/* 6274 */
struct tagTOUCH_HIT_TESTING_INPUT
{
  unsigned int pointerId;
  tagPOINT point;
  tagRECT boundingBox;
  tagRECT nonOccludedBoundingBox;
  unsigned int orientation;
};

/* 6275 */
struct tagMONCBSTRUCT
{
  unsigned int cb;
  unsigned int dwTime;
  void *hTask;
  unsigned int dwRet;
  unsigned int wType;
  unsigned int wFmt;
  HCONV__ *hConv;
  HSZ__ *hsz1;
  HSZ__ *hsz2;
  HDDEDATA__ *hData;
  unsigned __int64 dwData1;
  unsigned __int64 dwData2;
  tagCONVCONTEXT cc;
  unsigned int cbData;
  unsigned int Data[8];
};

/* 6276 */
struct netent
{
  char *n_name;
  char **n_aliases;
  __int16 n_addrtype;
  unsigned int n_net;
};

/* 6277 */
struct _CRYPT_PKCS8_IMPORT_PARAMS
{
  _CRYPTOAPI_BLOB PrivateKey;
  int (__cdecl *pResolvehCryptProvFunc)(_CRYPT_PRIVATE_KEY_INFO *, unsigned __int64 *, void *);
  void *pVoidResolveFunc;
  int (__cdecl *pDecryptPrivateKeyFunc)(_CRYPT_ALGORITHM_IDENTIFIER, _CRYPTOAPI_BLOB, char *, unsigned int *, void *);
  void *pVoidDecryptFunc;
};

/* 6278 */
struct __cppobj __vc_attributes::immediatebindAttribute
{
};

/* 6279 */
struct __cppobj __vc_attributes::inAttribute
{
};

/* 6280 */
struct __cppobj __vc_attributes::publicAttribute
{
};

/* 6281 */
struct __vc_attributes::size_isAttribute
{
  const char *expression;
};

/* 6282 */
struct __cppobj __vc_attributes::exportAttribute
{
};

/* 6283 */
struct __cppobj __vc_attributes::controlAttribute
{
};

/* 6284 */
struct __vc_attributes::helpstringcontextAttribute
{
  int contextid;
};

/* 6285 */
struct __vc_attributes::rangeAttribute
{
  int low_val;
  int high_val;
};

/* 6286 */
struct __cppobj __vc_attributes::displaybindAttribute
{
};

/* 6287 */
struct __vc_attributes::hookAttribute
{
  const char *event;
  const char *source;
  const char *handler;
  const char *receiver;
};

/* 6288 */
struct __cppobj __vc_attributes::uidefaultAttribute
{
};

/* 6289 */
struct __cppobj __vc_attributes::defaultbindAttribute
{
};

/* 6290 */
struct __cppobj __vc_attributes::outAttribute
{
};

/* 6291 */
struct __vc_attributes::defaultvalueAttribute
{
  const char *value;
};

/* 6292 */
struct __vc_attributes::pointer_defaultAttribute
{
  __vc_attributes::pointer_defaultAttribute::type_e type;
};

/* 6293 */
struct __vc_attributes::uuidAttribute
{
  const char *value;
};

/* 6294 */
struct __vc_attributes::threadingAttribute
{
  __vc_attributes::threadingAttribute::threading_e value;
};

/* 6295 */
struct __cppobj __vc_attributes::localAttribute
{
};

/* 6296 */
struct __vc_attributes::idAttribute
{
  int id_num;
};

/* 6297 */
struct __cppobj __vc_attributes::nonbrowsableAttribute
{
};

/* 6298 */
struct __vc_attributes::importlibAttribute
{
  const char *tlb_file;
};

/* 6299 */
struct __vc_attributes::call_asAttribute
{
  void *local_proc;
};

/* 6300 */
struct __cppobj __vc_attributes::dispinterfaceAttribute
{
};

/* 6301 */
struct __cppobj __vc_attributes::dualAttribute
{
};

/* 6302 */
struct __vc_attributes::switch_typeAttribute
{
  const char *switch_type_specifier;
};

/* 6303 */
struct __declspec(align(8)) __vc_attributes::idl_moduleAttribute
{
  const char *name;
  const char *dllname;
  const char *version;
  const char *uuid;
  const char *helpstring;
  int helpstringcontext;
  int helpcontext;
  bool hidden;
  bool restricted;
};

/* 6304 */
struct __cppobj __vc_attributes::coclassAttribute
{
};

/* 6305 */
struct __vc_attributes::defaultAttribute
{
  const char *value;
};

/* 6306 */
struct __cppobj __vc_attributes::requesteditAttribute
{
};

/* 6307 */
struct __declspec(align(8)) __vc_attributes::providerAttribute
{
  const char *name;
  const char *uuid;
  int cookies;
};

/* 6308 */
struct __vc_attributes::max_isAttribute
{
  const char *expression;
};

/* 6309 */
struct __vc_attributes::importAttribute
{
  const char *idl_file;
};

/* 6310 */
struct __vc_attributes::satypeAttribute
{
  const char *type;
};

/* 6311 */
struct __cppobj __vc_attributes::propgetAttribute
{
};

/* 6312 */
struct __cppobj __vc_attributes::propputAttribute
{
};

/* 6313 */
struct __declspec(align(4)) __vc_attributes::event_receiverAttribute
{
  __vc_attributes::event_receiverAttribute::type_e type;
  bool layout_dependent;
};

/* 6314 */
struct __vc_attributes::async_uuidAttribute
{
  const char *uuid;
};

/* 6315 */
struct __vc_attributes::idl_quoteAttribute
{
  const char *text;
};

/* 6316 */
struct __cppobj __vc_attributes::usesgetlasterrorAttribute
{
};

/* 6317 */
struct __vc_attributes::unhookAttribute
{
  const char *event;
  const char *source;
  const char *handler;
  const char *receiver;
};

/* 6318 */
struct __cppobj __vc_attributes::nonextensibleAttribute
{
};

/* 6319 */
struct __cppobj __vc_attributes::objectAttribute
{
};

/* 6320 */
struct __vc_attributes::aggregatableAttribute
{
  __vc_attributes::aggregatableAttribute::type_e type;
};

/* 6321 */
struct __vc_attributes::iid_isAttribute
{
  const char *limited_expression;
};

/* 6322 */
struct __vc_attributes::progidAttribute
{
  const char *name;
};

/* 6323 */
struct __cppobj __vc_attributes::readonlyAttribute
{
};

/* 6324 */
struct __vc_attributes::wire_marshalAttribute
{
  const char *wire_type;
};

/* 6325 */
struct __vc_attributes::pragmaAttribute
{
  const char *token_sequence;
};

/* 6326 */
struct __cppobj __vc_attributes::propputrefAttribute
{
};

/* 6327 */
struct __vc_attributes::vi_progidAttribute
{
  const char *value;
};

/* 6328 */
struct __cppobj __vc_attributes::odlAttribute
{
};

/* 6329 */
struct __cppobj __vc_attributes::bindableAttribute
{
};

/* 6330 */
struct __cppobj __vc_attributes::oleautomationAttribute
{
};

/* 6331 */
struct __vc_attributes::helpstringdllAttribute
{
  const char *dllname;
};

/* 6332 */
struct __cppobj __vc_attributes::defaultcollelemAttribute
{
};

/* 6333 */
struct __cppobj __vc_attributes::retvalAttribute
{
};

/* 6334 */
struct __vc_attributes::length_isAttribute
{
  const char *expression;
};

/* 6335 */
struct __vc_attributes::atl::db_commandAttribute
{
  const char *command;
  const char *name;
  const char *source_name;
  const char *hresult;
  const char *bindings;
  const char *bulk_fetch;
};

/* 6336 */
struct __vc_attributes::atl::db_sourceAttribute
{
  const char *source;
  const char *name;
  const char *hresult;
};

/* 6337 */
struct __vc_attributes::atl::db_columnAttribute
{
  const char *ordinal;
  const char *dbtype;
  const char *precision;
  const char *scale;
  const char *status;
  const char *length;
};

/* 6338 */
struct __vc_attributes::atl::soap_namespaceAttribute
{
  const char *value;
};

/* 6339 */
struct __vc_attributes::atl::db_tableAttribute
{
  const char *table;
  const char *name;
  const char *source_name;
  const char *hresult;
  const char *bulk_fetch;
};

/* 6340 */
struct __vc_attributes::atl::implements_categoryAttribute
{
  const char *value;
};

/* 6341 */
struct __vc_attributes::atl::aggregatesAttribute
{
  const char *clsid;
};

/* 6342 */
struct __declspec(align(8)) __vc_attributes::atl::soap_headerAttribute
{
  const char *value;
  bool required;
  bool in;
  bool out;
};

/* 6343 */
struct __vc_attributes::atl::requires_categoryAttribute
{
  const char *value;
};

/* 6344 */
struct __declspec(align(8)) __vc_attributes::atl::perf_objectAttribute
{
  int name_res;
  int help_res;
  const char *namestring;
  const char *helpstring;
  int detail;
  bool no_instances;
  const char *class_;
  int maxinstnamelen;
};

/* 6345 */
struct __vc_attributes::atl::rdxAttribute
{
  const char *key;
  const char *valuename;
  const char *regtype;
};

/* 6346 */
struct __declspec(align(8)) __vc_attributes::atl::perfmonAttribute
{
  const char *name;
  bool register;
};

/* 6347 */
struct __declspec(align(4)) __vc_attributes::atl::db_accessorAttribute
{
  int id;
  bool auto_;
};

/* 6348 */
struct __vc_attributes::atl::soap_handlerAttribute
{
  const char *name;
  const char *namespace;
  const char *protocol;
  const char *style;
  const char *use;
};

/* 6349 */
struct __vc_attributes::atl::support_error_infoAttribute
{
  const char *error_interface;
};

/* 6350 */
struct __vc_attributes::atl::tag_nameAttribute
{
  const char *name;
  const char *parse_func;
};

/* 6351 */
struct __vc_attributes::atl::com_interface_entryAttribute
{
  const char *value;
};

/* 6352 */
struct __vc_attributes::atl::db_paramAttribute
{
  const char *ordinal;
  const char *paramtype;
  const char *dbtype;
  const char *precision;
  const char *scale;
  const char *status;
  const char *length;
};

/* 6353 */
struct __vc_attributes::atl::perf_counterAttribute
{
  const char *namestring;
  const char *helpstring;
  int name_res;
  int help_res;
  int countertype;
  int defscale;
  bool default_counter;
  int detail;
  int max_counter_size;
  const char *countertype_string;
};

/* 6354 */
struct __vc_attributes::atl::soap_methodAttribute
{
  const char *name;
};

/* 6355 */
struct __vc_attributes::atl::request_handlerAttribute
{
  const char *name;
  const char *sdl;
};

/* 6356 */
struct __cppobj __vc_attributes::atl::synchronizeAttribute
{
};

/* 6357 */
struct __vc_attributes::atl::registration_scriptAttribute
{
  const char *script;
};

/* 6358 */
struct __vc_attributes::no_injected_textAttribute
{
  bool value;
};

/* 6359 */
struct __vc_attributes::caseAttribute
{
  int value;
};

/* 6360 */
struct __vc_attributes::helpstringAttribute
{
  const char *help_text_string;
};

/* 6361 */
struct __vc_attributes::entryAttribute
{
  const char *entry_id;
};

/* 6362 */
struct __vc_attributes::defaultvtableAttribute
{
  const char *value;
};

/* 6363 */
struct __declspec(align(4)) __vc_attributes::emitidlAttribute
{
  int value;
  bool defaultimports;
};

/* 6364 */
struct __cppobj __vc_attributes::stringAttribute
{
};

/* 6365 */
struct __cppobj __vc_attributes::varargAttribute
{
};

/* 6366 */
struct __declspec(align(4)) __vc_attributes::event_sourceAttribute
{
  __vc_attributes::event_sourceAttribute::type_e type;
  __vc_attributes::event_sourceAttribute::optimize_e optimize;
  bool decorate;
};

/* 6367 */
struct __vc_attributes::includeAttribute
{
  const char *include_file;
};

/* 6368 */
struct __vc_attributes::implementsAttribute
{
  const char *interfaces;
  const char *dispinterfaces;
};

/* 6369 */
struct __vc_attributes::moduleAttribute
{
  __vc_attributes::moduleAttribute::type_e type;
  const char *name;
  const char *version;
  const char *uuid;
  int lcid;
  bool control;
  const char *helpstring;
  int helpstringcontext;
  const char *helpstringdll;
  const char *helpfile;
  int helpcontext;
  bool hidden;
  bool restricted;
  const char *custom;
  const char *resource_name;
};

/* 6370 */
struct __vc_attributes::last_isAttribute
{
  const char *expression;
};

/* 6371 */
struct __cppobj __vc_attributes::ptrAttribute
{
};

/* 6372 */
struct __cppobj __vc_attributes::helper_attributes::v1_earlyAttribute
{
};

/* 6373 */
struct __declspec(align(4)) __vc_attributes::helper_attributes::source_annotation_attributeAttribute
{
  int ValidOn;
  bool AllowMultiple;
};

/* 6374 */
struct __cppobj __vc_attributes::helper_attributes::requires_valueAttribute
{
};

/* 6375 */
struct __cppobj __vc_attributes::helper_attributes::as_stringAttribute
{
};

/* 6376 */
struct __vc_attributes::helper_attributes::usageAttribute
{
  unsigned int value;
};

/* 6377 */
struct __cppobj __vc_attributes::helper_attributes::multi_valueAttribute
{
};

/* 6378 */
struct __cppobj __vc_attributes::helper_attributes::repeatableAttribute
{
};

/* 6379 */
struct __cppobj __vc_attributes::helper_attributes::notify_atlprovAttribute
{
};

/* 6380 */
struct __declspec(align(4)) __vc_attributes::helper_attributes::attributeAttribute
{
  int ValidOn;
  bool AllowMultiple;
  bool Inherited;
};

/* 6381 */
struct __vc_attributes::helper_attributes::v1_alttypeAttribute
{
  __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
};

/* 6382 */
struct __cppobj __vc_attributes::helper_attributes::process_earlyAttribute
{
};

/* 6383 */
struct __vc_attributes::helper_attributes::help_stringAttribute
{
  const char *value;
};

/* 6384 */
struct __vc_attributes::helper_attributes::v1_nameAttribute
{
  const char *name;
};

/* 6385 */
struct __vc_attributes::helper_attributes::default_valueAttribute
{
  void *value;
};

/* 6386 */
struct __vc_attributes::first_isAttribute
{
  const char *value;
};

/* 6387 */
struct __cppobj __vc_attributes::noncreatableAttribute
{
};

/* 6388 */
struct __cppobj __vc_attributes::appobjectAttribute
{
};

/* 6389 */
struct __vc_attributes::restrictedAttribute
{
  const char *value;
};

/* 6390 */
struct __vc_attributes::importidlAttribute
{
  const char *value;
};

/* 6391 */
struct __vc_attributes::cpp_quoteAttribute
{
  const char *string;
};

/* 6392 */
struct __cppobj __vc_attributes::v1_enumAttribute
{
};

/* 6393 */
struct __cppobj __vc_attributes::refAttribute
{
};

/* 6394 */
struct __cppobj __vc_attributes::licensedAttribute
{
};

/* 6395 */
struct __cppobj __vc_attributes::lcidAttribute
{
};

/* 6396 */
struct __vc_attributes::versionAttribute
{
  const char *value;
};

/* 6397 */
struct __vc_attributes::helpcontextAttribute
{
  const char *helpcontext_value;
};

/* 6398 */
struct __vc_attributes::helpfileAttribute
{
  const char *filename;
};

/* 6399 */
struct __vc_attributes::sourceAttribute
{
  const char *value;
};

/* 6400 */
struct __vc_attributes::transmit_asAttribute
{
  const char *xmit_type;
};

/* 6401 */
struct __cppobj __vc_attributes::hiddenAttribute
{
};

/* 6402 */
struct __cppobj __vc_attributes::library_blockAttribute
{
};

/* 6403 */
struct __vc_attributes::customAttribute
{
  char *value;
};

/* 6404 */
struct __vc_attributes::switch_isAttribute
{
  const char *limited_expression;
};

/* 6405 */
struct __cppobj __vc_attributes::ms_unionAttribute
{
};

/* 6406 */
struct __cppobj __vc_attributes::uniqueAttribute
{
};

/* 6407 */
struct __vc_attributes::includelibAttribute
{
  const char *value;
};

/* 6408 */
struct __cppobj __vc_attributes::optionalAttribute
{
};

/* 6409 */
struct _DEVICEDUMP_STORAGEDEVICE_DATA
{
  _DEVICEDUMP_STRUCTURE_VERSION Descriptor;
  _DEVICEDUMP_SECTION_HEADER SectionHeader;
  unsigned int dwBufferSize;
  unsigned int dwReasonForCollection;
  _DEVICEDUMP_SUBSECTION_POINTER PublicData;
  _DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
  _DEVICEDUMP_SUBSECTION_POINTER PrivateData;
};

/* 6410 */
struct __declspec(align(4)) tagEMRGDICOMMENT
{
  tagEMR emr;
  unsigned int cbData;
  char Data[1];
};

/* 6411 */
struct _BCRYPT_ALGORITHM_IDENTIFIER
{
  wchar_t *pszName;
  unsigned int dwClass;
  unsigned int dwFlags;
};

/* 6412 */
struct _CRYPT_ENCRYPT_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgEncodingType;
  unsigned __int64 hCryptProv;
  _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
  void *pvEncryptionAuxInfo;
  unsigned int dwFlags;
  unsigned int dwInnerContentType;
};

/* 6413 */
struct __declspec(align(4)) tagCURSORSHAPE
{
  int xHotSpot;
  int yHotSpot;
  int cx;
  int cy;
  int cbWidth;
  char Planes;
  char BitsPixel;
};

/* 6414 */
struct _FILE_LEVEL_TRIM
{
  unsigned int Key;
  unsigned int NumRanges;
  _FILE_LEVEL_TRIM_RANGE Ranges[1];
};

/* 6415 */
struct provider_info
{
  unsigned int (__cdecl *pi_R0_1val)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
  unsigned int (__cdecl *pi_R0_allvals)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
  unsigned int (__cdecl *pi_R3_1val)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
  unsigned int (__cdecl *pi_R3_allvals)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);
  unsigned int pi_flags;
  void *pi_key_context;
};

/* 6416 */
struct _CERT_SYSTEM_STORE_INFO
{
  unsigned int cbSize;
};

/* 6417 */
struct HCOLORSPACE__
{
  int unused;
};

/* 6418 */
struct __declspec(align(4)) USN_RECORD_V3
{
  unsigned int RecordLength;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  _FILE_ID_128 FileReferenceNumber;
  _FILE_ID_128 ParentFileReferenceNumber;
  __int64 Usn;
  _LARGE_INTEGER TimeStamp;
  unsigned int Reason;
  unsigned int SourceInfo;
  unsigned int SecurityId;
  unsigned int FileAttributes;
  unsigned __int16 FileNameLength;
  unsigned __int16 FileNameOffset;
  wchar_t FileName[1];
};

/* 6419 */
struct __cppobj ICodeInstall : IWindowForBindingUI
{
};

/* 6420 */
struct _POWER_PLATFORM_INFORMATION
{
  char AoAc;
};

/* 6421 */
struct __cppobj XMLDOMDocumentEvents : IDispatch
{
};

/* 6422 */
struct _TAPE_CREATE_PARTITION
{
  unsigned int Method;
  unsigned int Count;
  unsigned int Size;
};

/* 6423 */
struct $D44EEF9BD0742DBE20D87C837DCD5E88
{
  unsigned __int32 IsUmsSchedulerThread : 1;
  unsigned __int32 IsUmsWorkerThread : 1;
};

/* 6424 */
union $D15AE0991DE2FA21E8639F4DC5EE7C89
{
  $D44EEF9BD0742DBE20D87C837DCD5E88 __s0;
  unsigned int ThreadUmsFlags;
};

/* 6425 */
struct _UMS_SYSTEM_THREAD_INFORMATION
{
  unsigned int UmsVersion;
  $D15AE0991DE2FA21E8639F4DC5EE7C89 ___u1;
};

/* 6426 */
struct tagEMRSETCOLORSPACE
{
  tagEMR emr;
  unsigned int ihCS;
};

/* 6427 */
struct joyinfo_tag
{
  unsigned int wXpos;
  unsigned int wYpos;
  unsigned int wZpos;
  unsigned int wButtons;
};

/* 6428 */
struct __declspec(align(8)) _JOB_INFO_2W
{
  unsigned int JobId;
  wchar_t *pPrinterName;
  wchar_t *pMachineName;
  wchar_t *pUserName;
  wchar_t *pDocument;
  wchar_t *pNotifyName;
  wchar_t *pDatatype;
  wchar_t *pPrintProcessor;
  wchar_t *pParameters;
  wchar_t *pDriverName;
  _devicemodeW *pDevMode;
  wchar_t *pStatus;
  void *pSecurityDescriptor;
  unsigned int Status;
  unsigned int Priority;
  unsigned int Position;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int TotalPages;
  unsigned int Size;
  _SYSTEMTIME Submitted;
  unsigned int Time;
  unsigned int PagesPrinted;
};

/* 6429 */
struct _PRINTER_CONNECTION_INFO_1W
{
  unsigned int dwFlags;
  wchar_t *pszDriverName;
};

/* 6430 */
struct CREATE_USN_JOURNAL_DATA
{
  unsigned __int64 MaximumSize;
  unsigned __int64 AllocationDelta;
};

/* 6431 */
struct _FILE_ALLOCATED_RANGE_BUFFER
{
  _LARGE_INTEGER FileOffset;
  _LARGE_INTEGER Length;
};

/* 6432 */
struct PPM_IDLESTATE_EVENT
{
  unsigned int NewState;
  unsigned int OldState;
  unsigned __int64 Processors;
};

/* 6433 */
struct $8C32E5D3ED1763EA38B94549972C5F20
{
  unsigned __int32 LongFunction : 1;
  unsigned __int32 Persistent : 1;
  unsigned __int32 Private : 30;
};

/* 6434 */
union $CB6D2800E947F9C027721D927096E7C6
{
  unsigned int Flags;
  $8C32E5D3ED1763EA38B94549972C5F20 s;
};

/* 6435 */
struct __declspec(align(8)) _TP_CALLBACK_ENVIRON_V3
{
  unsigned int Version;
  _TP_POOL *Pool;
  _TP_CLEANUP_GROUP *CleanupGroup;
  void (__cdecl *CleanupGroupCancelCallback)(void *, void *);
  void *RaceDll;
  _ACTIVATION_CONTEXT *ActivationContext;
  void (__cdecl *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
  $CB6D2800E947F9C027721D927096E7C6 u;
  _TP_CALLBACK_PRIORITY CallbackPriority;
  unsigned int Size;
};

/* 6436 */
struct __declspec(align(8)) _NOTIFYICONIDENTIFIER
{
  unsigned int cbSize;
  HWND__ *hWnd;
  unsigned int uID;
  _GUID guidItem;
};

/* 6437 */
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION
{
  _CHANGER_ELEMENT StartingElement;
  unsigned int ActionCode;
  char VolumeIDTemplate[40];
};

/* 6438 */
struct __declspec(align(8)) tagSOUNDSENTRYW
{
  unsigned int cbSize;
  unsigned int dwFlags;
  unsigned int iFSTextEffect;
  unsigned int iFSTextEffectMSec;
  unsigned int iFSTextEffectColorBits;
  unsigned int iFSGrafEffect;
  unsigned int iFSGrafEffectMSec;
  unsigned int iFSGrafEffectColor;
  unsigned int iWindowsEffect;
  unsigned int iWindowsEffectMSec;
  wchar_t *lpszWindowsEffectDLL;
  unsigned int iWindowsEffectOrdinal;
};

/* 6439 */
struct tagMCI_SET_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwTimeFormat;
  unsigned int dwAudio;
};

/* 6440 */
struct __declspec(align(8)) _NCRYPT_CIPHER_PADDING_INFO
{
  unsigned int cbSize;
  unsigned int dwFlags;
  char *pbIV;
  unsigned int cbIV;
  char *pbOtherInfo;
  unsigned int cbOtherInfo;
};

/* 6441 */
struct HGESTUREINFO__
{
  int unused;
};

/* 6442 */
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA
{
  HKEY__ *hKeyBase;
  wchar_t *pwszRegPath;
};

/* 6443 */
struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO
{
  _CRYPTOAPI_BLOB CertSignHashCNGAlgPropData;
  _CRYPTOAPI_BLOB CertIssuerPubKeyBitLengthPropData;
};

/* 6444 */
struct __cppobj IDummyHICONIncluder : IUnknown
{
};

/* 6445 */
struct PPM_THERMALCHANGE_EVENT
{
  unsigned int ThermalConstraint;
  unsigned __int64 Processors;
};

/* 6446 */
struct tagENUMLOGFONTW
{
  tagLOGFONTW elfLogFont;
  wchar_t elfFullName[64];
  wchar_t elfStyle[32];
};

/* 6447 */
struct _DEVICE_DATA_SET_REPAIR_PARAMETERS
{
  unsigned int NumberOfRepairCopies;
  unsigned int SourceCopy;
  unsigned int RepairCopies[1];
};

/* 6448 */
struct _PRINTER_INFO_3
{
  void *pSecurityDescriptor;
};

/* 6449 */
struct __cppobj IRpcHelper : IUnknown
{
};

/* 6450 */
struct _TOKEN_AUDIT_POLICY
{
  char PerUserPolicy[29];
};

/* 6451 */
struct _SHSTOCKICONINFO
{
  unsigned int cbSize;
  HICON__ *hIcon;
  int iSysImageIndex;
  int iIcon;
  wchar_t szPath[260];
};

/* 6452 */
struct _CONSOLE_FONT_INFO
{
  unsigned int nFont;
  _COORD dwFontSize;
};

/* 6453 */
struct tagSTGOPTIONS
{
  unsigned __int16 usVersion;
  unsigned __int16 reserved;
  unsigned int ulSectorSize;
  const wchar_t *pwcsTemplateFile;
};

/* 6454 */
struct __declspec(align(8)) _DISCDLGSTRUCTW
{
  unsigned int cbStructure;
  HWND__ *hwndOwner;
  wchar_t *lpLocalName;
  wchar_t *lpRemoteName;
  unsigned int dwFlags;
};

/* 6455 */
struct __declspec(align(8)) _TXFS_QUERY_RM_INFORMATION
{
  unsigned int BytesRequired;
  unsigned __int64 TailLsn;
  unsigned __int64 CurrentLsn;
  unsigned __int64 ArchiveTailLsn;
  unsigned __int64 LogContainerSize;
  _LARGE_INTEGER HighestVirtualClock;
  unsigned int LogContainerCount;
  unsigned int LogContainerCountMax;
  unsigned int LogContainerCountMin;
  unsigned int LogGrowthIncrement;
  unsigned int LogAutoShrinkPercentage;
  unsigned int Flags;
  unsigned __int16 LoggingMode;
  unsigned __int16 Reserved;
  unsigned int RmState;
  unsigned __int64 LogCapacity;
  unsigned __int64 LogFree;
  unsigned __int64 TopsSize;
  unsigned __int64 TopsUsed;
  unsigned __int64 TransactionCount;
  unsigned __int64 OnePCCount;
  unsigned __int64 TwoPCCount;
  unsigned __int64 NumberLogFileFull;
  unsigned __int64 OldestTransactionAge;
  _GUID RMName;
  unsigned int TmLogPathOffset;
};

/* 6456 */
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST
{
  unsigned int NumberOfAssignedProcesses;
  unsigned int NumberOfProcessIdsInList;
  unsigned __int64 ProcessIdList[1];
};

/* 6457 */
struct _FILE_ID_INFO
{
  unsigned __int64 VolumeSerialNumber;
  _FILE_ID_128 FileId;
};

/* 6458 */
struct __cppobj IMalloc : IUnknown
{
};

/* 6459 */
struct __declspec(align(4)) _FILE_NOTIFY_INFORMATION
{
  unsigned int NextEntryOffset;
  unsigned int Action;
  unsigned int FileNameLength;
  wchar_t FileName[1];
};

/* 6460 */
struct NOTIFY_USER_POWER_SETTING
{
  _GUID Guid;
};

/* 6461 */
struct cmsghdr
{
  unsigned __int64 cmsg_len;
  int cmsg_level;
  int cmsg_type;
};

/* 6462 */
struct $63C64F7D5703FAD7B76B7BD1AFA1ED4F
{
  unsigned __int32 Flag : 2;
  unsigned __int32 FunctionLength : 11;
  unsigned __int32 Ret : 2;
  unsigned __int32 H : 1;
  unsigned __int32 Reg : 3;
  unsigned __int32 R : 1;
  unsigned __int32 L : 1;
  unsigned __int32 C : 1;
  unsigned __int32 StackAdjust : 10;
};

/* 6463 */
union $93EB305F90249DBB3E8A2F66438F96C3
{
  unsigned int UnwindData;
  $63C64F7D5703FAD7B76B7BD1AFA1ED4F __s1;
};

/* 6464 */
struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
{
  unsigned int BeginAddress;
  $93EB305F90249DBB3E8A2F66438F96C3 ___u1;
};

/* 6465 */
struct _SERVICE_TRIGGER_INFO
{
  unsigned int cTriggers;
  _SERVICE_TRIGGER *pTriggers;
  char *pReserved;
};

/* 6466 */
struct NUMPARSE
{
  int cDig;
  unsigned int dwInFlags;
  unsigned int dwOutFlags;
  int cchUsed;
  int nBaseShift;
  int nPwr10;
};

/* 6467 */
struct _OCSP_SIGNED_REQUEST_INFO
{
  _CRYPTOAPI_BLOB ToBeSigned;
  _OCSP_SIGNATURE_INFO *pOptionalSignatureInfo;
};

/* 6468 */
struct _IMAGE_RESOURCE_DIRECTORY
{
  unsigned int Characteristics;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned __int16 NumberOfNamedEntries;
  unsigned __int16 NumberOfIdEntries;
};

/* 6469 */
struct _PERF_OBJECT_TYPE
{
  unsigned int TotalByteLength;
  unsigned int DefinitionLength;
  unsigned int HeaderLength;
  unsigned int ObjectNameTitleIndex;
  unsigned int ObjectNameTitle;
  unsigned int ObjectHelpTitleIndex;
  unsigned int ObjectHelpTitle;
  unsigned int DetailLevel;
  unsigned int NumCounters;
  int DefaultCounter;
  int NumInstances;
  unsigned int CodePage;
  _LARGE_INTEGER PerfTime;
  _LARGE_INTEGER PerfFreq;
};

/* 6470 */
struct _FILE_SET_DEFECT_MGMT_BUFFER
{
  char Disable;
};

/* 6471 */
struct _FILE_SYSTEM_RECOGNITION_INFORMATION
{
  char FileSystem[9];
};

/* 6472 */
struct _STORAGE_OFFLOAD_WRITE_OUTPUT
{
  unsigned int OffloadWriteFlags;
  unsigned int Reserved;
  unsigned __int64 LengthCopied;
};

/* 6473 */
struct tagCOMPOSITIONFORM
{
  unsigned int dwStyle;
  tagPOINT ptCurrentPos;
  tagRECT rcArea;
};

/* 6474 */
struct __cppobj IForegroundTransfer : IUnknown
{
};

/* 6475 */
struct __declspec(align(8)) _tagPROTOCOLFILTERDATA
{
  unsigned int cbSize;
  IInternetProtocolSink *pProtocolSink;
  IInternetProtocol *pProtocol;
  IUnknown *pUnk;
  unsigned int dwFilterFlags;
};

/* 6476 */
struct _BCRYPT_DH_PARAMETER_HEADER
{
  unsigned int cbLength;
  unsigned int dwMagic;
  unsigned int cbKeyLength;
};

/* 6477 */
struct _SERVICE_DESCRIPTIONW
{
  wchar_t *lpDescription;
};

/* 6478 */
union $E38888FFFF2E8047BDBD55C921E86469
{
  unsigned int FiberData;
  unsigned int Version;
};

/* 6479 */
struct _NT_TIB32
{
  unsigned int ExceptionList;
  unsigned int StackBase;
  unsigned int StackLimit;
  unsigned int SubSystemTib;
  $E38888FFFF2E8047BDBD55C921E86469 ___u4;
  unsigned int ArbitraryUserPointer;
  unsigned int Self;
};

/* 6480 */
struct _BCRYPT_DH_KEY_BLOB
{
  unsigned int dwMagic;
  unsigned int cbKey;
};

/* 6481 */
struct __declspec(align(4)) _STORAGE_DEVICE_ID_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned int NumberOfIdentifiers;
  char Identifiers[1];
};

/* 6482 */
struct _IMAGE_TLS_DIRECTORY64
{
  unsigned __int64 StartAddressOfRawData;
  unsigned __int64 EndAddressOfRawData;
  unsigned __int64 AddressOfIndex;
  unsigned __int64 AddressOfCallBacks;
  unsigned int SizeOfZeroFill;
  unsigned int Characteristics;
};

/* 6483 */
struct _CERT_EXTENSIONS
{
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 6484 */
struct _CMC_DATA_INFO
{
  unsigned int cTaggedAttribute;
  _CMC_TAGGED_ATTRIBUTE *rgTaggedAttribute;
  unsigned int cTaggedRequest;
  _CMC_TAGGED_REQUEST *rgTaggedRequest;
  unsigned int cTaggedContentInfo;
  _CMC_TAGGED_CONTENT_INFO *rgTaggedContentInfo;
  unsigned int cTaggedOtherMsg;
  _CMC_TAGGED_OTHER_MSG *rgTaggedOtherMsg;
};

/* 6485 */
struct PRINT_EXECUTION_DATA
{
  PRINT_EXECUTION_CONTEXT context;
  unsigned int clientAppPID;
};

/* 6486 */
struct HWAVEOUT__
{
  int unused;
};

/* 6487 */
struct __declspec(align(8)) tagOIFI
{
  unsigned int cb;
  int fMDIApp;
  HWND__ *hwndFrame;
  HACCEL__ *haccel;
  unsigned int cAccelEntries;
};

/* 6488 */
struct _FILE_END_OF_FILE_INFO
{
  _LARGE_INTEGER EndOfFile;
};

/* 6489 */
struct tagEMRGRADIENTFILL
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int nVer;
  unsigned int nTri;
  unsigned int ulMode;
  _TRIVERTEX Ver[1];
};

/* 6490 */
struct DDEDATA
{
  unsigned __int16 unused : 12;
  unsigned __int16 fResponse : 1;
  unsigned __int16 fRelease : 1;
  unsigned __int16 reserved : 1;
  unsigned __int16 fAckReq : 1;
  __int16 cfFormat;
  char Value[1];
};

/* 6491 */
struct _CRYPT_DECODE_PARA
{
  unsigned int cbSize;
  void *(__cdecl *pfnAlloc)(unsigned __int64);
  void (__cdecl *pfnFree)(void *);
};

/* 6492 */
union $324667EFE599145882FAD47B2440C0A8
{
  HWND__ *hwndOwner;
  unsigned int cMultipleItems;
};

/* 6493 */
struct tMIXERCONTROLDETAILS
{
  unsigned int cbStruct;
  unsigned int dwControlID;
  unsigned int cChannels;
  __unaligned __declspec(align(1)) $324667EFE599145882FAD47B2440C0A8 ___u3;
  unsigned int cbDetails;
  void *paDetails;
};

/* 6494 */
struct _SE_IMPERSONATION_STATE
{
  void *Token;
  char CopyOnOpen;
  char EffectiveOnly;
  _SECURITY_IMPERSONATION_LEVEL Level;
};

/* 6495 */
struct __cppobj IXMLDOMText : IXMLDOMCharacterData
{
};

/* 6496 */
struct __cppobj IXMLDOMCDATASection : IXMLDOMText
{
};

/* 6497 */
struct _POWER_MONITOR_INVOCATION
{
  char On;
  char Console;
  POWER_MONITOR_REQUEST_REASON RequestReason;
};

/* 6498 */
struct tagEMREXTFLOODFILL
{
  tagEMR emr;
  _POINTL ptlStart;
  unsigned int crColor;
  unsigned int iMode;
};

/* 6499 */
struct _ACCESS_ALLOWED_CALLBACK_ACE
{
  _ACE_HEADER Header;
  unsigned int Mask;
  unsigned int SidStart;
};

/* 6500 */
struct _EVENTLOG_FULL_INFORMATION
{
  unsigned int dwFull;
};

/* 6501 */
struct tagWAVEINCAPS2W
{
  unsigned __int16 wMid;
  unsigned __int16 wPid;
  unsigned int vDriverVersion;
  wchar_t szPname[32];
  unsigned int dwFormats;
  unsigned __int16 wChannels;
  unsigned __int16 wReserved1;
  _GUID ManufacturerGuid;
  _GUID ProductGuid;
  _GUID NameGuid;
};

/* 6502 */
struct __cppobj IEnumOLEVERB : IUnknown
{
};

/* 6503 */
struct tagCBT_CREATEWNDA
{
  tagCREATESTRUCTA *lpcs;
  HWND__ *hwndInsertAfter;
};

/* 6504 */
struct __cppobj AsyncIAdviseSink : IUnknown
{
};

/* 6505 */
struct __cppobj AsyncIAdviseSink2 : AsyncIAdviseSink
{
};

/* 6506 */
struct __declspec(align(8)) DvarValueStringBuf
{
  const char *pad;
  char string[12];
};

/* 6507 */
struct __cppobj ILockBytes : IUnknown
{
};

/* 6508 */
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
{
  unsigned int cbSize;
  int fCommercial;
};

/* 6509 */
struct $6177A0AD8E9F0D390D62242D769E2CDF
{
  char DataBuffer[1];
};

/* 6510 */
struct __declspec(align(4)) _REPARSE_GUID_DATA_BUFFER
{
  unsigned int ReparseTag;
  unsigned __int16 ReparseDataLength;
  unsigned __int16 Reserved;
  _GUID ReparseGuid;
  $6177A0AD8E9F0D390D62242D769E2CDF GenericReparseBuffer;
};

/* 6511 */
struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
{
  unsigned __int64 VetoedFromAltitudeIntegral;
  unsigned __int64 VetoedFromAltitudeDecimal;
  wchar_t Reason[256];
};

/* 6512 */
struct _CRYPT_TIMESTAMP_REQUEST
{
  unsigned int dwVersion;
  _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
  _CRYPTOAPI_BLOB HashedMessage;
  char *pszTSAPolicyId;
  _CRYPTOAPI_BLOB Nonce;
  int fCertReq;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 6513 */
struct _SECURITY_DESCRIPTOR
{
  char Revision;
  char Sbz1;
  unsigned __int16 Control;
  void *Owner;
  void *Group;
  _ACL *Sacl;
  _ACL *Dacl;
};

/* 6514 */
struct _WIN32_FIND_STREAM_DATA
{
  _LARGE_INTEGER StreamSize;
  wchar_t cStreamName[296];
};

/* 6515 */
struct __declspec(align(4)) _FILE_FULL_DIR_INFO
{
  unsigned int NextEntryOffset;
  unsigned int FileIndex;
  _LARGE_INTEGER CreationTime;
  _LARGE_INTEGER LastAccessTime;
  _LARGE_INTEGER LastWriteTime;
  _LARGE_INTEGER ChangeTime;
  _LARGE_INTEGER EndOfFile;
  _LARGE_INTEGER AllocationSize;
  unsigned int FileAttributes;
  unsigned int FileNameLength;
  unsigned int EaSize;
  wchar_t FileName[1];
};

/* 6516 */
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
{
  _CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
  _CRYPTOAPI_BLOB EncryptedPrivateKey;
};

/* 6517 */
union $EB67D5490B3167D77DBB4E3F607DD6DA
{
  char propertyByte;
  wchar_t *propertyString;
  int propertyInt32;
  __int64 propertyInt64;
  $FEAB62C056B7B19C610CD18E991278A7 propertyBlob;
};

/* 6518 */
struct PrintPropertyValue
{
  EPrintPropertyType ePropertyType;
  $EB67D5490B3167D77DBB4E3F607DD6DA value;
};

/* 6519 */
struct PrintNamedProperty
{
  wchar_t *propertyName;
  PrintPropertyValue propertyValue;
};

/* 6520 */
struct _USER_MARSHAL_CB
{
  unsigned int Flags;
  _MIDL_STUB_MESSAGE *pStubMsg;
  const char *pReserve;
  unsigned int Signature;
  _USER_MARSHAL_CB_TYPE CBType;
  const char *pFormat;
  const char *pTypeFormat;
};

/* 6521 */
struct __cppobj iw::padding<0>
{
};

/* 6522 */
struct __cppobj iw::unsigned_type<1>
{
};

/* 6523 */
struct __cppobj iw::is_pointer<char const * *>
{
};

/* 6524 */
struct __cppobj iw::unsigned_type<2>
{
};

/* 6525 */
struct __cppobj iw::unsigned_type<8>
{
};

/* 6526 */
struct __cppobj iw::unsigned_type<4>
{
};

/* 6527 */
struct _EXTENDED_ENCRYPTED_DATA_INFO
{
  unsigned int ExtendedCode;
  unsigned int Length;
  unsigned int Flags;
  unsigned int Reserved;
};

/* 6528 */
struct $E68E69178BF9C90E9AD3136A5DA83667
{
  unsigned __int32 RaiseExceptionOnInvalidHandleReference : 1;
  unsigned __int32 HandleExceptionsPermanentlyEnabled : 1;
  unsigned __int32 ReservedFlags : 30;
};

/* 6529 */
union $6911913B7C97A928E1548681C4C236D3
{
  unsigned int Flags;
  $E68E69178BF9C90E9AD3136A5DA83667 __s1;
};

/* 6530 */
struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
{
  $6911913B7C97A928E1548681C4C236D3 ___u0;
};

/* 6531 */
struct HSPRITE__
{
  int unused;
};

/* 6532 */
struct tagTTPOLYCURVE
{
  unsigned __int16 wType;
  unsigned __int16 cpfx;
  tagPOINTFX apfx[1];
};

/* 6533 */
struct OPENCARDNAMEA
{
  unsigned int dwStructSize;
  HWND__ *hwndOwner;
  unsigned __int64 hSCardContext;
  char *lpstrGroupNames;
  unsigned int nMaxGroupNames;
  char *lpstrCardNames;
  unsigned int nMaxCardNames;
  _GUID *rgguidInterfaces;
  unsigned int cguidInterfaces;
  char *lpstrRdr;
  unsigned int nMaxRdr;
  char *lpstrCard;
  unsigned int nMaxCard;
  const char *lpstrTitle;
  unsigned int dwFlags;
  void *pvUserData;
  unsigned int dwShareMode;
  unsigned int dwPreferredProtocols;
  unsigned int dwActiveProtocol;
  unsigned __int64 (__cdecl *lpfnConnect)(unsigned __int64, char *, char *, void *);
  int (__cdecl *lpfnCheck)(unsigned __int64, unsigned __int64, void *);
  void (__cdecl *lpfnDisconnect)(unsigned __int64, unsigned __int64, void *);
  unsigned __int64 hCardHandle;
};

/* 6534 */
struct _CRYPT_PKCS12_PBE_PARAMS
{
  int iIterations;
  unsigned int cbSalt;
};

/* 6535 */
struct __declspec(align(4)) tagHW_PROFILE_INFOW
{
  unsigned int dwDockInfo;
  wchar_t szHwProfileGuid[39];
  wchar_t szHwProfileName[80];
};

/* 6536 */
struct _PERF_COUNTER_BLOCK
{
  unsigned int ByteLength;
};

/* 6537 */
struct __NCRYPT_UI_POLICY
{
  unsigned int dwVersion;
  unsigned int dwFlags;
  const wchar_t *pszCreationTitle;
  const wchar_t *pszFriendlyName;
  const wchar_t *pszDescription;
};

/* 6538 */
struct _DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER
{
  unsigned int Version;
  unsigned int QueryFlags;
  unsigned int HashAlgorithm;
  _LARGE_INTEGER RangeOffsetInFile;
  _LARGE_INTEGER RangeLength;
};

/* 6539 */
struct __declspec(align(4)) _CSV_QUERY_MDS_PATH
{
  unsigned int MdsNodeId;
  unsigned int DsNodeId;
  unsigned int PathLength;
  wchar_t Path[1];
};

/* 6540 */
struct __declspec(align(4)) _TAPE_PREPARE
{
  unsigned int Operation;
  char Immediate;
};

/* 6541 */
struct _CHAR_INFO
{
  $D73D647711E0D18BB6EFDDF78E7AEEC6 Char;
  unsigned __int16 Attributes;
};

/* 6542 */
struct __declspec(align(8)) _TXFS_MODIFY_RM
{
  unsigned int Flags;
  unsigned int LogContainerCountMax;
  unsigned int LogContainerCountMin;
  unsigned int LogContainerCount;
  unsigned int LogGrowthIncrement;
  unsigned int LogAutoShrinkPercentage;
  unsigned __int64 Reserved;
  unsigned __int16 LoggingMode;
};

/* 6543 */
struct _STORAGE_IDLE_POWERUP_REASON
{
  unsigned int Version;
  unsigned int Size;
  _STORAGE_POWERUP_REASON_TYPE PowerupReason;
};

/* 6544 */
union $54DEF7DB795AAF94831BC9BAC2F3F848
{
  SCARD_T0_COMMAND CmdBytes;
  char rgbHeader[5];
};

/* 6545 */
struct __declspec(align(2)) SCARD_T0_REQUEST
{
  _SCARD_IO_REQUEST ioRequest;
  char bSw1;
  char bSw2;
  $54DEF7DB795AAF94831BC9BAC2F3F848 ___u3;
};

/* 6546 */
struct __cppobj ICatalogFileInfo : IUnknown
{
};

/* 6547 */
struct MARK_HANDLE_INFO32
{
  $124274EBC4FC1E36E517B2E36B56E09E ___u0;
  unsigned int VolumeHandle;
  unsigned int HandleInfo;
};

/* 6548 */
struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
  DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  wchar_t viewGdiDeviceName[32];
};

/* 6549 */
struct tagEMRCREATEPALETTE
{
  tagEMR emr;
  unsigned int ihPal;
  tagLOGPALETTE lgpl;
};

/* 6550 */
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS
{
  unsigned int UIRestrictionsClass;
};

/* 6551 */
struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR
{
  unsigned int Version;
  unsigned int Size;
  unsigned int NameOffset;
  unsigned int NumberOfLogicalCopies;
  unsigned int NumberOfPhysicalCopies;
  unsigned int PhysicalDiskRedundancy;
  unsigned int NumberOfColumns;
  unsigned int Interleave;
};

/* 6552 */
struct PPM_WMI_IDLE_STATES_EX
{
  unsigned int Type;
  unsigned int Count;
  unsigned int TargetState;
  unsigned int OldState;
  void *TargetProcessors;
  PPM_WMI_IDLE_STATE State[1];
};

/* 6553 */
struct RPC_CLIENT_INFORMATION1
{
  char *UserName;
  char *ComputerName;
  unsigned __int16 Privilege;
  unsigned int AuthFlags;
};

/* 6554 */
struct __declspec(align(8)) RPC_ENDPOINT_TEMPLATEA
{
  unsigned int Version;
  char *ProtSeq;
  char *Endpoint;
  void *SecurityDescriptor;
  unsigned int Backlog;
};

/* 6555 */
struct __cppobj IBlockingLock : IUnknown
{
};

/* 6556 */
struct LIST_ENTRY64
{
  unsigned __int64 Flink;
  unsigned __int64 Blink;
};

/* 6557 */
struct _RPC_SEC_CONTEXT_KEY_INFO
{
  unsigned int EncryptAlgorithm;
  unsigned int KeySize;
  unsigned int SignatureAlgorithm;
};

/* 6558 */
struct HPEN__
{
  int unused;
};

/* 6559 */
struct __declspec(align(4)) _CHANGER_SET_POSITION
{
  _CHANGER_ELEMENT Transport;
  _CHANGER_ELEMENT Destination;
  char Flip;
};

/* 6560 */
struct __cppobj ICreateTypeInfo : IUnknown
{
};

/* 6561 */
struct __cppobj ITimeAndNoticeControl : IUnknown
{
};

/* 6562 */
struct tagDRAWITEMSTRUCT
{
  unsigned int CtlType;
  unsigned int CtlID;
  unsigned int itemID;
  unsigned int itemAction;
  unsigned int itemState;
  HWND__ *hwndItem;
  HDC__ *hDC;
  tagRECT rcItem;
  unsigned __int64 itemData;
};

/* 6563 */
struct tagI_RpcProxyCallbackInterface
{
  int (__cdecl *IsValidMachineFn)(unsigned __int16 *, unsigned __int16 *, unsigned int);
  int (__cdecl *GetClientAddressFn)(void *, char *, unsigned int *);
  int (__cdecl *GetConnectionTimeoutFn)(unsigned int *);
  int (__cdecl *PerformCalloutFn)(void *, _RDR_CALLOUT_STATE *, _RPC_HTTP_REDIRECTOR_STAGE);
  void (__cdecl *FreeCalloutStateFn)(_RDR_CALLOUT_STATE *);
  int (__cdecl *GetClientSessionAndResourceUUIDFn)(void *, int *, _GUID *, int *, _GUID *);
  int (__cdecl *ProxyFilterIfFn)(void *, _GUID *, unsigned __int16, int *);
  void (__cdecl *RpcProxyUpdatePerfCounterFn)(RpcProxyPerfCounters, int, unsigned int);
  void (__cdecl *RpcProxyUpdatePerfCounterBackendServerFn)(unsigned __int16 *, int);
};

/* 6564 */
struct _tagStartParam
{
  _GUID iid;
  IBindCtx *pIBindCtx;
  IUnknown *pItf;
};

/* 6565 */
struct tagPDEXW
{
  unsigned int lStructSize;
  HWND__ *hwndOwner;
  void *hDevMode;
  void *hDevNames;
  HDC__ *hDC;
  unsigned int Flags;
  unsigned int Flags2;
  unsigned int ExclusionFlags;
  unsigned int nPageRanges;
  unsigned int nMaxPageRanges;
  tagPRINTPAGERANGE *lpPageRanges;
  unsigned int nMinPage;
  unsigned int nMaxPage;
  unsigned int nCopies;
  HINSTANCE__ *hInstance;
  const wchar_t *lpPrintTemplateName;
  IUnknown *lpCallback;
  unsigned int nPropertyPages;
  _PSP **lphPropertyPages;
  unsigned int nStartPage;
  unsigned int dwResultAction;
};

/* 6566 */
struct __cppobj AsyncIUnknown : IUnknown
{
};

/* 6567 */
struct __cppobj IEnumFORMATETC : IUnknown
{
};

/* 6568 */
struct __declspec(align(8)) _tagCODEBASEHOLD
{
  unsigned int cbSize;
  wchar_t *szDistUnit;
  wchar_t *szCodeBase;
  unsigned int dwVersionMS;
  unsigned int dwVersionLS;
  unsigned int dwStyle;
};

/* 6569 */
struct _PRINTER_INFO_2W
{
  wchar_t *pServerName;
  wchar_t *pPrinterName;
  wchar_t *pShareName;
  wchar_t *pPortName;
  wchar_t *pDriverName;
  wchar_t *pComment;
  wchar_t *pLocation;
  _devicemodeW *pDevMode;
  wchar_t *pSepFile;
  wchar_t *pPrintProcessor;
  wchar_t *pDatatype;
  wchar_t *pParameters;
  void *pSecurityDescriptor;
  unsigned int Attributes;
  unsigned int Priority;
  unsigned int DefaultPriority;
  unsigned int StartTime;
  unsigned int UntilTime;
  unsigned int Status;
  unsigned int cJobs;
  unsigned int AveragePPM;
};

/* 6570 */
struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER
{
  _LARGE_INTEGER DirectoryCount;
  _LARGE_INTEGER FileCount;
  unsigned __int16 FsFormatMajVersion;
  unsigned __int16 FsFormatMinVersion;
  wchar_t FsFormatName[12];
  _LARGE_INTEGER FormatTime;
  _LARGE_INTEGER LastUpdateTime;
  wchar_t CopyrightInfo[34];
  wchar_t AbstractInfo[34];
  wchar_t FormattingImplementationInfo[34];
  wchar_t LastModifyingImplementationInfo[34];
};

/* 6571 */
struct _CRYPT_URL_INFO
{
  unsigned int cbSize;
  unsigned int dwSyncDeltaTime;
  unsigned int cGroup;
  unsigned int *rgcGroupEntry;
};

/* 6572 */
struct __cppobj IXMLDOMProcessingInstruction : IXMLDOMNode
{
};

/* 6573 */
struct _TAPE_GET_DRIVE_PARAMETERS
{
  char ECC;
  char Compression;
  char DataPadding;
  char ReportSetmarks;
  unsigned int DefaultBlockSize;
  unsigned int MaximumBlockSize;
  unsigned int MinimumBlockSize;
  unsigned int MaximumPartitionCount;
  unsigned int FeaturesLow;
  unsigned int FeaturesHigh;
  unsigned int EOTWarningZoneSize;
};

/* 6574 */
struct __cppobj ISurrogateService : IUnknown
{
};

/* 6575 */
struct __cppobj IProcessLock : IUnknown
{
};

/* 6576 */
struct ANON_OBJECT_HEADER_V2
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  _GUID ClassID;
  unsigned int SizeOfData;
  unsigned int Flags;
  unsigned int MetaDataSize;
  unsigned int MetaDataOffset;
};

/* 6577 */
struct tagMONLINKSTRUCT
{
  unsigned int cb;
  unsigned int dwTime;
  void *hTask;
  int fEstablished;
  int fNoData;
  HSZ__ *hszSvc;
  HSZ__ *hszTopic;
  HSZ__ *hszItem;
  unsigned int wFmt;
  int fServer;
  HCONV__ *hConvServer;
  HCONV__ *hConvClient;
};

/* 6578 */
struct __cppobj IInternetZoneManagerEx : IInternetZoneManager
{
};

/* 6579 */
struct __cppobj IInternetZoneManagerEx2 : IInternetZoneManagerEx
{
};

/* 6580 */
struct RPC_IF_ID_VECTOR
{
  unsigned int Count;
  _RPC_IF_ID *IfId[1];
};

/* 6581 */
struct __declspec(align(8)) _RPC_CLIENT_INTERFACE
{
  unsigned int Length;
  _RPC_SYNTAX_IDENTIFIER InterfaceId;
  _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  RPC_DISPATCH_TABLE *DispatchTable;
  unsigned int RpcProtseqEndpointCount;
  _RPC_PROTSEQ_ENDPOINT *RpcProtseqEndpoint;
  unsigned __int64 Reserved;
  const void *InterpreterInfo;
  unsigned int Flags;
};

/* 6582 */
struct _AppBarData
{
  unsigned int cbSize;
  HWND__ *hWnd;
  unsigned int uCallbackMessage;
  unsigned int uEdge;
  tagRECT rc;
  __int64 lParam;
};

/* 6583 */
struct _CTL_USAGE_MATCH
{
  unsigned int dwType;
  _CTL_USAGE Usage;
};

/* 6584 */
struct __declspec(align(4)) _TXFS_GET_TRANSACTED_VERSION
{
  unsigned int ThisBaseVersion;
  unsigned int LatestVersion;
  unsigned __int16 ThisMiniVersion;
  unsigned __int16 FirstMiniVersion;
  unsigned __int16 LatestMiniVersion;
};

/* 6585 */
struct COPYFILE2_EXTENDED_PARAMETERS
{
  unsigned int dwSize;
  unsigned int dwCopyFlags;
  int *pfCancel;
  _COPYFILE2_MESSAGE_ACTION (__cdecl *pProgressRoutine)(COPYFILE2_MESSAGE *, void *);
  void *pvCallbackContext;
};

/* 6586 */
struct _TAPE_SET_MEDIA_PARAMETERS
{
  unsigned int BlockSize;
};

/* 6587 */
struct DDEACK
{
  unsigned __int16 bAppReturnCode : 8;
  unsigned __int16 reserved : 6;
  unsigned __int16 fBusy : 1;
  unsigned __int16 fAck : 1;
};

/* 6588 */
struct _RPC_BINDING_VECTOR
{
  unsigned int Count;
  void *BindingH[1];
};

/* 6589 */
struct RPC_IMPORT_CONTEXT_P
{
  void *LookupContext;
  void *ProposedHandle;
  _RPC_BINDING_VECTOR *Bindings;
};

/* 6590 */
struct __declspec(align(2)) _STORAGE_WRITE_CACHE_PROPERTY
{
  unsigned int Version;
  unsigned int Size;
  _WRITE_CACHE_TYPE WriteCacheType;
  _WRITE_CACHE_ENABLE WriteCacheEnabled;
  _WRITE_CACHE_CHANGE WriteCacheChangeable;
  _WRITE_THROUGH WriteThroughSupported;
  char FlushCacheSupported;
  char UserDefinedPowerProtection;
  char NVCacheEnabled;
};

/* 6591 */
struct PPM_WMI_LEGACY_PERFSTATE
{
  unsigned int Frequency;
  unsigned int Flags;
  unsigned int PercentFrequency;
};

/* 6592 */
struct tagMDICREATESTRUCTW
{
  const wchar_t *szClass;
  const wchar_t *szTitle;
  void *hOwner;
  int x;
  int y;
  int cx;
  int cy;
  unsigned int style;
  __int64 lParam;
};

/* 6593 */
struct __unaligned __declspec(align(4)) tagMCI_ANIM_PLAY_PARMS
{
  unsigned __int64 dwCallback;
  unsigned int dwFrom;
  unsigned int dwTo;
  unsigned int dwSpeed;
};

/* 6594 */
struct __declspec(align(8)) _RPC_SECURITY_QOS_V4_A
{
  unsigned int Version;
  unsigned int Capabilities;
  unsigned int IdentityTracking;
  unsigned int ImpersonationType;
  unsigned int AdditionalSecurityInfoType;
  $438283C8A9CA248D8498A5EDEE1E59DB u;
  void *Sid;
  unsigned int EffectiveOnly;
};

/* 6595 */
struct __declspec(align(8)) _NCryptAlgorithmName
{
  wchar_t *pszName;
  unsigned int dwClass;
  unsigned int dwAlgOperations;
  unsigned int dwFlags;
};

/* 6596 */
struct ScriptStringList
{
  int count;
  const char **strings;
};

/* 6597 */
struct DISPLAYCONFIG_PATH_TARGET_INFO
{
  _LUID adapterId;
  unsigned int id;
  unsigned int modeInfoIdx;
  DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
  DISPLAYCONFIG_ROTATION rotation;
  DISPLAYCONFIG_SCALING scaling;
  DISPLAYCONFIG_RATIONAL refreshRate;
  DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
  int targetAvailable;
  unsigned int statusFlags;
};

/* 6598 */
struct DISPLAYCONFIG_PATH_INFO
{
  DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
  DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
  unsigned int flags;
};

/* 6599 */
struct _CONSOLE_SELECTION_INFO
{
  unsigned int dwFlags;
  _COORD dwSelectionAnchor;
  _SMALL_RECT srSelection;
};

/* 6600 */
struct SYSTEM_POWER_CAPABILITIES
{
  char PowerButtonPresent;
  char SleepButtonPresent;
  char LidPresent;
  char SystemS1;
  char SystemS2;
  char SystemS3;
  char SystemS4;
  char SystemS5;
  char HiberFilePresent;
  char FullWake;
  char VideoDimPresent;
  char ApmPresent;
  char UpsPresent;
  char ThermalControl;
  char ProcessorThrottle;
  char ProcessorMinThrottle;
  char ProcessorMaxThrottle;
  char FastSystemS4;
  char Hiberboot;
  char WakeAlarmPresent;
  char AoAc;
  char DiskSpinDown;
  char spare3[8];
  char SystemBatteriesPresent;
  char BatteriesAreShortTerm;
  BATTERY_REPORTING_SCALE BatteryScale[3];
  _SYSTEM_POWER_STATE AcOnLineWake;
  _SYSTEM_POWER_STATE SoftLidWake;
  _SYSTEM_POWER_STATE RtcWake;
  _SYSTEM_POWER_STATE MinDeviceWakeState;
  _SYSTEM_POWER_STATE DefaultLowLatencyWake;
};

/* 6601 */
struct __cppobj IGlobalInterfaceTable : IUnknown
{
};

/* 6602 */
struct __cppobj IDirectWriterLock : IUnknown
{
};

/* 6603 */
struct SCARD_READERSTATEW
{
  const wchar_t *szReader;
  void *pvUserData;
  unsigned int dwCurrentState;
  unsigned int dwEventState;
  unsigned int cbAtr;
  char rgbAtr[36];
};

/* 6604 */
struct _JUMP_BUFFER
{
  unsigned __int64 Frame;
  unsigned __int64 Rbx;
  unsigned __int64 Rsp;
  unsigned __int64 Rbp;
  unsigned __int64 Rsi;
  unsigned __int64 Rdi;
  unsigned __int64 R12;
  unsigned __int64 R13;
  unsigned __int64 R14;
  unsigned __int64 R15;
  unsigned __int64 Rip;
  unsigned int MxCsr;
  unsigned __int16 FpCsr;
  unsigned __int16 Spare;
  _SETJMP_FLOAT128 Xmm6;
  _SETJMP_FLOAT128 Xmm7;
  _SETJMP_FLOAT128 Xmm8;
  _SETJMP_FLOAT128 Xmm9;
  _SETJMP_FLOAT128 Xmm10;
  _SETJMP_FLOAT128 Xmm11;
  _SETJMP_FLOAT128 Xmm12;
  _SETJMP_FLOAT128 Xmm13;
  _SETJMP_FLOAT128 Xmm14;
  _SETJMP_FLOAT128 Xmm15;
};

/* 6605 */
union $BE44A4FCE80D7C8ECAC3D77A2C4713B9
{
  unsigned int pInt64[1];
  unsigned int pUint64[1];
  unsigned int ppString[1];
  unsigned int pFqbn[1];
  unsigned int pOctetString[1];
};

/* 6606 */
struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
{
  unsigned int Name;
  unsigned __int16 ValueType;
  unsigned __int16 Reserved;
  unsigned int Flags;
  unsigned int ValueCount;
  $BE44A4FCE80D7C8ECAC3D77A2C4713B9 Values;
};

/* 6607 */
struct __unaligned __declspec(align(4)) _REASSIGN_BLOCKS_EX
{
  unsigned __int16 Reserved;
  unsigned __int16 Count;
  _LARGE_INTEGER BlockNumber[1];
};

/* 6608 */
struct __declspec(align(4)) tagEMRGLSBOUNDEDRECORD
{
  tagEMR emr;
  _RECTL rclBounds;
  unsigned int cbData;
  char Data[1];
};

/* 6609 */
struct _CRYPT_AES_256_KEY_STATE
{
  char Key[32];
  char IV[16];
  char EncryptionState[15][16];
  char DecryptionState[15][16];
  char Feedback[16];
};

/* 6610 */
union __m256i
{
  char m256i_i8[32];
  __int16 m256i_i16[16];
  int m256i_i32[8];
  __int64 m256i_i64[4];
  char m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned int m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

/* 6611 */
union $980F6A28C67C8F3640106D01D4C85A6A
{
  unsigned int Characteristics;
  unsigned int OriginalFirstThunk;
};

/* 6612 */
struct _IMAGE_IMPORT_DESCRIPTOR
{
  $980F6A28C67C8F3640106D01D4C85A6A ___u0;
  unsigned int TimeDateStamp;
  unsigned int ForwarderChain;
  unsigned int Name;
  unsigned int FirstThunk;
};

/* 6613 */
struct __cppobj ILayoutStorage : IUnknown
{
};

/* 6614 */
struct _DRAWPATRECT
{
  tagPOINT ptPosition;
  tagPOINT ptSize;
  unsigned __int16 wStyle;
  unsigned __int16 wPattern;
};

/* 6615 */
union $AF9251F092CF7607DCE8EB3B1EC18635
{
  DISPLAYCONFIG_TARGET_MODE targetMode;
  DISPLAYCONFIG_SOURCE_MODE sourceMode;
};

/* 6616 */
struct DISPLAYCONFIG_MODE_INFO
{
  DISPLAYCONFIG_MODE_INFO_TYPE infoType;
  unsigned int id;
  _LUID adapterId;
  $AF9251F092CF7607DCE8EB3B1EC18635 ___u3;
};

/* 6617 */
struct _tagDATAINFO
{
  unsigned int ulTotalSize;
  unsigned int ulavrPacketSize;
  unsigned int ulConnectSpeed;
  unsigned int ulProcessorSpeed;
};

/* 6618 */
struct _BCRYPT_DSA_PARAMETER_HEADER_V2
{
  unsigned int cbLength;
  unsigned int dwMagic;
  unsigned int cbKeyLength;
  HASHALGORITHM_ENUM hashAlgorithm;
  DSAFIPSVERSION_ENUM standardVersion;
  unsigned int cbSeedLength;
  unsigned int cbGroupSize;
  char Count[4];
};

/* 6619 */
struct tagEMRBITBLT
{
  tagEMR emr;
  _RECTL rclBounds;
  int xDest;
  int yDest;
  int cxDest;
  int cyDest;
  unsigned int dwRop;
  int xSrc;
  int ySrc;
  tagXFORM xformSrc;
  unsigned int crBkColorSrc;
  unsigned int iUsageSrc;
  unsigned int offBmiSrc;
  unsigned int cbBmiSrc;
  unsigned int offBitsSrc;
  unsigned int cbBitsSrc;
};

/* 6620 */
struct _SERVICE_FAILURE_ACTIONSW
{
  unsigned int dwResetPeriod;
  wchar_t *lpRebootMsg;
  wchar_t *lpCommand;
  unsigned int cActions;
  _SC_ACTION *lpsaActions;
};

/* 6621 */
struct tagEMRSETMAPPERFLAGS
{
  tagEMR emr;
  unsigned int dwFlags;
};

/* 6622 */
struct _CRT_FLOAT
{
  float f;
};

/* 6623 */
struct tagMDINEXTMENU
{
  HMENU__ *hmenuIn;
  HMENU__ *hmenuNext;
  HWND__ *hwndNext;
};

/* 6624 */
struct __cppobj IXMLDocument : IDispatch
{
};

/* 6625 */
struct __cppobj IXMLElement : IDispatch
{
};

/* 6626 */
struct UDATE
{
  _SYSTEMTIME st;
  unsigned __int16 wDayOfYear;
};

/* 6627 */
struct __declspec(align(8)) _DISK_LOGGING
{
  char Function;
  void *BufferAddress;
  unsigned int BufferSize;
};

/* 6628 */
struct _LDOUBLE
{
  char ld[10];
};

/* 6629 */
struct tagEMRSETPALETTEENTRIES
{
  tagEMR emr;
  unsigned int ihPal;
  unsigned int iStart;
  unsigned int cEntries;
  tagPALETTEENTRY aPalEntries[1];
};

/* 6630 */
struct ip_mreq
{
  in_addr imr_multiaddr;
  in_addr imr_interface;
};

/* 6631 */
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
  _SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
  unsigned int Flags;
  unsigned int AuthenticationTarget;
  unsigned int NumberOfAuthnSchemes;
  unsigned int *AuthnSchemes;
  unsigned __int16 *ServerCertificateSubject;
  _SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
  unsigned int NumberOfProxyAuthnSchemes;
  unsigned int *ProxyAuthnSchemes;
};

/* 6632 */
struct __declspec(align(8)) CONFIRMSAFETY
{
  _GUID clsid;
  IUnknown *pUnk;
  unsigned int dwFlags;
};

/* 6633 */
struct _EXCEPTION_RECORD64
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  unsigned __int64 ExceptionRecord;
  unsigned __int64 ExceptionAddress;
  unsigned int NumberParameters;
  unsigned int __unusedAlignment;
  unsigned __int64 ExceptionInformation[15];
};

/* 6634 */
struct __unaligned __declspec(align(1)) VoicePacket_t
{
  char talker;
  char data[256];
  int dataSize;
};

/* 6635 */
struct __cppobj IXMLDocument2 : IDispatch
{
};

/* 6636 */
struct tagEMRRESIZEPALETTE
{
  tagEMR emr;
  unsigned int ihPal;
  unsigned int cEntries;
};

/* 6637 */
struct __cppobj ICreateTypeInfo2 : ICreateTypeInfo
{
};

/* 6638 */
struct _TIME_ZONE_INFORMATION
{
  int Bias;
  wchar_t StandardName[32];
  _SYSTEMTIME StandardDate;
  int StandardBias;
  wchar_t DaylightName[32];
  _SYSTEMTIME DaylightDate;
  int DaylightBias;
};

/* 6639 */
struct _CERT_POLICY95_QUALIFIER1
{
  wchar_t *pszPracticesReference;
  char *pszNoticeIdentifier;
  char *pszNSINoticeIdentifier;
  unsigned int cCPSURLs;
  _CPS_URLS *rgCPSURLs;
};

/* 6640 */
struct group_source_req
{
  unsigned int gsr_interface;
  sockaddr_storage gsr_group;
  sockaddr_storage gsr_source;
};

/* 6641 */
struct $5FDB0C128CAE6B510A580B0DF7449C28
{
  unsigned __int32 EnableBottomUpRandomization : 1;
  unsigned __int32 EnableForceRelocateImages : 1;
  unsigned __int32 EnableHighEntropy : 1;
  unsigned __int32 DisallowStrippedImages : 1;
  unsigned __int32 ReservedFlags : 28;
};

/* 6642 */
union $860AD41638058D8B7855397FFBE4B2B5
{
  unsigned int Flags;
  $5FDB0C128CAE6B510A580B0DF7449C28 __s1;
};

/* 6643 */
struct _PROCESS_MITIGATION_ASLR_POLICY
{
  $860AD41638058D8B7855397FFBE4B2B5 ___u0;
};

/* 6644 */
struct _DISK_GROW_PARTITION
{
  unsigned int PartitionNumber;
  _LARGE_INTEGER BytesToGrow;
};

/* 6645 */
struct tagTPMPARAMS
{
  unsigned int cbSize;
  tagRECT rcExclude;
};

/* 6646 */
struct __declspec(align(8)) pvalueW
{
  wchar_t *pv_valuename;
  int pv_valuelen;
  void *pv_value_context;
  unsigned int pv_type;
};

/* 6647 */
struct __unaligned __declspec(align(4)) tagMCI_INFO_PARMSA
{
  unsigned __int64 dwCallback;
  char *lpstrReturn;
  unsigned int dwRetSize;
};

/* 6648 */
union $D8D8294F7EE27C40636DBD742CC63A68
{
  unsigned int BufferLength;
  char Buffer[1];
};

/* 6649 */
struct _TXFS_READ_BACKUP_INFORMATION_OUT
{
  $D8D8294F7EE27C40636DBD742CC63A68 ___u0;
};

/* 6650 */
struct __cppobj IFillLockBytes : IUnknown
{
};

/* 6651 */
struct _WINDOW_BUFFER_SIZE_RECORD
{
  _COORD dwSize;
};

/* 6652 */
union $A8E4566BBD8A4C5E90B08804A1D07EEF
{
  _KEY_EVENT_RECORD KeyEvent;
  _MOUSE_EVENT_RECORD MouseEvent;
  _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
  _MENU_EVENT_RECORD MenuEvent;
  _FOCUS_EVENT_RECORD FocusEvent;
};

/* 6653 */
struct _INPUT_RECORD
{
  unsigned __int16 EventType;
  $A8E4566BBD8A4C5E90B08804A1D07EEF Event;
};

/* 6654 */
struct RPC_INTERFACE_TEMPLATEW
{
  unsigned int Version;
  void *IfSpec;
  _GUID *MgrTypeUuid;
  void *MgrEpv;
  unsigned int Flags;
  unsigned int MaxCalls;
  unsigned int MaxRpcSize;
  int (__cdecl *IfCallback)(void *, void *);
  _UUID_VECTOR *UuidVector;
  unsigned __int16 *Annotation;
  void *SecurityDescriptor;
};

/* 6655 */
struct _SHQUERYRBINFO
{
  unsigned int cbSize;
  __int64 i64Size;
  __int64 i64NumItems;
};

/* 6656 */
struct _CRT_DOUBLE
{
  long double x;
};

/* 6657 */
struct _TOKEN_DEVICE_CLAIMS
{
  void *DeviceClaims;
};

/* 6658 */
struct PPM_THERMAL_POLICY_EVENT
{
  char Mode;
  unsigned __int64 Processors;
};

/* 6659 */
union $B96333073B03EBB92F2CA435D44AD63F
{
  HKEY__ *hKeyBase;
  void *pvBase;
};

/* 6660 */
union $9AD97B11DC562691EDED97C604BFB552
{
  void *pvSystemStore;
  const char *pszSystemStore;
  const wchar_t *pwszSystemStore;
};

/* 6661 */
struct _CERT_SYSTEM_STORE_RELOCATE_PARA
{
  $B96333073B03EBB92F2CA435D44AD63F ___u0;
  $9AD97B11DC562691EDED97C604BFB552 ___u1;
};

/* 6662 */
struct __cppobj IInternetSession : IUnknown
{
};

/* 6663 */
union $1A529701DF9244C3E59609BE702ECF63
{
  _CRYPTOAPI_BLOB ByNameResponderId;
  _CRYPTOAPI_BLOB ByKeyResponderId;
};

/* 6664 */
struct _OCSP_BASIC_RESPONSE_INFO
{
  unsigned int dwVersion;
  unsigned int dwResponderIdChoice;
  $1A529701DF9244C3E59609BE702ECF63 ___u2;
  _FILETIME ProducedAt;
  unsigned int cResponseEntry;
  _OCSP_BASIC_RESPONSE_ENTRY *rgResponseEntry;
  unsigned int cExtension;
  _CERT_EXTENSION *rgExtension;
};

/* 6665 */
struct tagSOLE_AUTHENTICATION_LIST
{
  unsigned int cAuthInfo;
  tagSOLE_AUTHENTICATION_INFO *aAuthInfo;
};

/* 6666 */
struct __cppobj IXMLDOMImplementation : IDispatch
{
};

/* 6667 */
struct __declspec(align(8)) _DISK_PERFORMANCE
{
  _LARGE_INTEGER BytesRead;
  _LARGE_INTEGER BytesWritten;
  _LARGE_INTEGER ReadTime;
  _LARGE_INTEGER WriteTime;
  _LARGE_INTEGER IdleTime;
  unsigned int ReadCount;
  unsigned int WriteCount;
  unsigned int QueueDepth;
  unsigned int SplitCount;
  _LARGE_INTEGER QueryTime;
  unsigned int StorageDeviceNumber;
  wchar_t StorageManagerName[8];
};

/* 6668 */
struct _PSFEATURE_CUSTPAPER
{
  int lOrientation;
  int lWidth;
  int lHeight;
  int lWidthOffset;
  int lHeightOffset;
};

/* 6669 */
struct _MIDL_SERVER_INFO_
{
  _MIDL_STUB_DESC *pStubDesc;
  int (__cdecl *const *DispatchTable)();
  const char *ProcString;
  const unsigned __int16 *FmtStringOffset;
  void (__cdecl *const *ThunkTable)(_MIDL_STUB_MESSAGE *);
  _RPC_SYNTAX_IDENTIFIER *pTransferSyntax;
  unsigned __int64 nCount;
  _MIDL_SYNTAX_INFO *pSyntaxInfo;
};

/* 6670 */
struct __cppobj IProgressNotify : IUnknown
{
};

/* 6671 */
struct _xml_error
{
  unsigned int _nLine;
  wchar_t *_pchBuf;
  unsigned int _cchBuf;
  unsigned int _ich;
  wchar_t *_pszFound;
  wchar_t *_pszExpected;
  unsigned int _reserved1;
  unsigned int _reserved2;
};

/* 6672 */
struct __declspec(align(8)) protoent
{
  char *p_name;
  char **p_aliases;
  __int16 p_proto;
};

/* 6673 */
struct _QOS_SD_MODE
{
  QOS_OBJECT_HDR ObjectHdr;
  unsigned int ShapeDiscardMode;
};

/* 6674 */
struct _EFS_DECRYPTION_STATUS_INFO
{
  unsigned int dwDecryptionError;
  unsigned int dwHashOffset;
  unsigned int cbHash;
};

/* 6675 */
struct __cppobj IWinInetHttpTimeouts : IUnknown
{
};

/* 6676 */
struct __declspec(align(4)) tagRemSNB
{
  unsigned int ulCntStr;
  unsigned int ulCntChar;
  wchar_t rgString[1];
};

/* 6677 */
struct _PUBLICKEYSTRUC
{
  char bType;
  char bVersion;
  unsigned __int16 reserved;
  unsigned int aiKeyAlg;
};

/* 6678 */
struct __cppobj IOleInPlaceSite : IOleWindow
{
};

/* 6679 */
struct __cppobj IRpcChannelBuffer2 : IRpcChannelBuffer
{
};

/* 6680 */
struct __cppobj AsyncIPipeByte : IUnknown
{
};

/* 6681 */
struct ANON_OBJECT_HEADER_BIGOBJ
{
  unsigned __int16 Sig1;
  unsigned __int16 Sig2;
  unsigned __int16 Version;
  unsigned __int16 Machine;
  unsigned int TimeDateStamp;
  _GUID ClassID;
  unsigned int SizeOfData;
  unsigned int Flags;
  unsigned int MetaDataSize;
  unsigned int MetaDataOffset;
  unsigned int NumberOfSections;
  unsigned int PointerToSymbolTable;
  unsigned int NumberOfSymbols;
};

/* 6682 */
struct __declspec(align(4)) _REQUEST_OPLOCK_OUTPUT_BUFFER
{
  unsigned __int16 StructureVersion;
  unsigned __int16 StructureLength;
  unsigned int OriginalOplockLevel;
  unsigned int NewOplockLevel;
  unsigned int Flags;
  unsigned int AccessMode;
  unsigned __int16 ShareMode;
};

/* 6683 */
struct __cppobj IFastRundown : IUnknown
{
};

/* 6684 */
struct __cppobj IOplockStorage : IUnknown
{
};

/* 6685 */
struct PrintPropertiesCollection
{
  unsigned int numberOfProperties;
  PrintNamedProperty *propertiesCollection;
};

/* 6686 */
struct DISPLAYCONFIG_ADAPTER_NAME
{
  DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  wchar_t adapterDevicePath[128];
};

/* 6687 */
struct tagGCP_RESULTSW
{
  unsigned int lStructSize;
  wchar_t *lpOutString;
  unsigned int *lpOrder;
  int *lpDx;
  int *lpCaretPos;
  char *lpClass;
  wchar_t *lpGlyphs;
  unsigned int nGlyphs;
  int nMaxFit;
};

/* 6688 */
struct tagHARDWAREHOOKSTRUCT
{
  HWND__ *hwnd;
  unsigned int message;
  unsigned __int64 wParam;
  __int64 lParam;
};

/* 6689 */
struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA
{
  unsigned __int16 Reserved;
  unsigned __int16 SerialNumberLength;
  char SerialNumber[];
};

/* 6690 */
struct __cppobj IInitializeSpy : IUnknown
{
};

/* 6691 */
struct _POWER_IDLE_RESILIENCY
{
  unsigned int CoalescingTimeout;
  unsigned int IdleResiliencyPeriod;
};

/* 6692 */
struct __cppobj IPrintDialogCallback : IUnknown
{
};

/* 6693 */
struct _QUOTA_LIMITS_EX
{
  unsigned __int64 PagedPoolLimit;
  unsigned __int64 NonPagedPoolLimit;
  unsigned __int64 MinimumWorkingSetSize;
  unsigned __int64 MaximumWorkingSetSize;
  unsigned __int64 PagefileLimit;
  _LARGE_INTEGER TimeLimit;
  unsigned __int64 WorkingSetLimit;
  unsigned __int64 Reserved2;
  unsigned __int64 Reserved3;
  unsigned __int64 Reserved4;
  unsigned int Flags;
  _RATE_QUOTA_LIMIT CpuRateLimit;
};

/* 6694 */
struct __declspec(align(2)) _IMAGE_IMPORT_BY_NAME
{
  unsigned __int16 Hint;
  char Name[1];
};

/* 6695 */
struct RPC_STATS_VECTOR
{
  unsigned int Count;
  unsigned int Stats[1];
};

/* 6696 */
struct __cppobj IRpcChannelBuffer3 : IRpcChannelBuffer2
{
};

/* 6697 */
struct __declspec(align(4)) tagSERIALIZEDPROPERTYVALUE
{
  unsigned int dwType;
  char rgb[1];
};

/* 6698 */
struct __cppobj IPipeByte : IUnknown
{
};

/* 6699 */
struct __cppobj IHttpNegotiate3 : IHttpNegotiate2
{
};

/* 6700 */
struct __cppobj IAddrTrackingControl : IUnknown
{
};

/* 6701 */
struct __cppobj IXTLRuntime : IXMLDOMNode
{
};

/* 6702 */
struct DDELN
{
  unsigned __int16 unused : 13;
  unsigned __int16 fRelease : 1;
  unsigned __int16 fDeferUpd : 1;
  unsigned __int16 fAckReq : 1;
  __int16 cfFormat;
};

/* 6703 */
struct _LDBL12
{
  char ld12[12];
};

/* 6704 */
struct MENUITEMTEMPLATE
{
  unsigned __int16 mtOption;
  unsigned __int16 mtID;
  wchar_t mtString[1];
};

/* 6705 */
struct DDEPOKE
{
  unsigned __int16 unused : 13;
  unsigned __int16 fRelease : 1;
  unsigned __int16 fReserved : 2;
  __int16 cfFormat;
  char Value[1];
};

/* 6706 */
struct DDEUP
{
  unsigned __int16 unused : 12;
  unsigned __int16 fAck : 1;
  unsigned __int16 fRelease : 1;
  unsigned __int16 fReserved : 1;
  unsigned __int16 fAckReq : 1;
  __int16 cfFormat;
  char rgb[1];
};

/* 6707 */
struct NTFS_VOLUME_DATA_BUFFER
{
  _LARGE_INTEGER VolumeSerialNumber;
  _LARGE_INTEGER NumberSectors;
  _LARGE_INTEGER TotalClusters;
  _LARGE_INTEGER FreeClusters;
  _LARGE_INTEGER TotalReserved;
  unsigned int BytesPerSector;
  unsigned int BytesPerCluster;
  unsigned int BytesPerFileRecordSegment;
  unsigned int ClustersPerFileRecordSegment;
  _LARGE_INTEGER MftValidDataLength;
  _LARGE_INTEGER MftStartLcn;
  _LARGE_INTEGER Mft2StartLcn;
  _LARGE_INTEGER MftZoneStart;
  _LARGE_INTEGER MftZoneEnd;
};

/* 6708 */
struct MOVE_FILE_RECORD_DATA
{
  void *FileHandle;
  _LARGE_INTEGER SourceFileRecord;
  _LARGE_INTEGER TargetFileRecord;
};

/* 6709 */
struct __cppobj IRpcSyntaxNegotiate : IUnknown
{
};

/* 6710 */
struct __cppobj ISynchronizeContainer : IUnknown
{
};

/* 6711 */
struct _CRYPT_CONTEXTS
{
  unsigned int cContexts;
  wchar_t **rgpszContexts;
};

/* 6712 */
struct __cppobj IUriContainer : IUnknown
{
};

/* 6713 */
struct __cppobj IHttpSecurity : IWindowForBindingUI
{
};

/* 6714 */
struct _FILE_TYPE_NOTIFICATION_INPUT
{
  unsigned int Flags;
  unsigned int NumFileTypeIDs;
  _GUID FileTypeID[1];
};

/* 6715 */
struct _BCRYPT_PKCS1_PADDING_INFO
{
  const wchar_t *pszAlgId;
};

/* 6716 */
struct __s_GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  char Data4[8];
};

/* 6717 */
struct tagMCI_ANIM_UPDATE_PARMS
{
  unsigned __int64 dwCallback;
  tagRECT rc;
  HDC__ *hDC;
};

/* 6718 */
struct __declspec(align(8)) tagNC_ADDRESS
{
  struct NET_ADDRESS_INFO_ *pAddrInfo;
  unsigned __int16 PortNumber;
  char PrefixLength;
};

/* 6719 */
struct $98803199E4ED0D38E8056567793943D1
{
  unsigned int Reserved[8];
};

/* 6720 */
struct $B9EA8C8806581CD9DE50B1D1E8164479
{
  unsigned int Capabilities;
};

/* 6721 */
struct $637B206C6ACC65AA280AB64407E5255D
{
  unsigned int Capabilities;
  unsigned int CachingFlags;
};

/* 6722 */
struct $2D23DADDA45FC777BF3B6031D98CDF1E
{
  $B9EA8C8806581CD9DE50B1D1E8164479 Server;
  $637B206C6ACC65AA280AB64407E5255D Share;
};

/* 6723 */
union $2504668CB7E09BFDFB4ED2C49E679F90
{
  $2D23DADDA45FC777BF3B6031D98CDF1E Smb2;
  unsigned int Reserved[16];
};

/* 6724 */
struct _FILE_REMOTE_PROTOCOL_INFO
{
  unsigned __int16 StructureVersion;
  unsigned __int16 StructureSize;
  unsigned int Protocol;
  unsigned __int16 ProtocolMajorVersion;
  unsigned __int16 ProtocolMinorVersion;
  unsigned __int16 ProtocolRevision;
  unsigned __int16 Reserved;
  unsigned int Flags;
  $98803199E4ED0D38E8056567793943D1 GenericReserved;
  $2504668CB7E09BFDFB4ED2C49E679F90 ProtocolSpecific;
};

/* 6725 */
struct __cppobj IXMLDOMNotation : IXMLDOMNode
{
};

/* 6726 */
struct __cppobj IXMLDOMEntity : IXMLDOMNode
{
};

/* 6727 */
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA
{
  unsigned int cbSize;
  unsigned int dwMsgEncodingType;
  unsigned __int64 hCryptProv;
};

/* 6728 */
struct __cppobj IMarshalingStream : IStream
{
};

/* 6729 */
struct __cppobj IWinInetFileStream : IUnknown
{
};

/* 6730 */
union $7BABBF589876F233083FEC848E85BB52
{
  _LARGE_INTEGER FileId;
  _GUID ObjectId;
  _FILE_ID_128 ExtendedFileId;
};

/* 6731 */
struct FILE_ID_DESCRIPTOR
{
  unsigned int dwSize;
  _FILE_ID_TYPE Type;
  $7BABBF589876F233083FEC848E85BB52 ___u2;
};

/* 6732 */
struct __cppobj IAsyncRpcChannelBuffer : IRpcChannelBuffer2
{
};

/* 6733 */
struct _BCRYPT_PROVIDER_NAME
{
  wchar_t *pszProviderName;
};

/* 6734 */
struct __cppobj IThumbnailExtractor : IUnknown
{
};

/* 6735 */
struct __declspec(align(8)) _CERT_CHAIN_ENGINE_CONFIG
{
  unsigned int cbSize;
  void *hRestrictedRoot;
  void *hRestrictedTrust;
  void *hRestrictedOther;
  unsigned int cAdditionalStore;
  void **rghAdditionalStore;
  unsigned int dwFlags;
  unsigned int dwUrlRetrievalTimeout;
  unsigned int MaximumCachedCertificates;
  unsigned int CycleDetectionModulus;
  void *hExclusiveRoot;
  void *hExclusiveTrustedPeople;
  unsigned int dwExclusiveFlags;
};

/* 6736 */
struct _TOKEN_USER_CLAIMS
{
  void *UserClaims;
};

/* 6737 */
struct __m128d
{
  long double m128d_f64[2];
};

/* 6738 */
struct __declspec(align(8)) _MOVE_FILE_DATA32
{
  unsigned int FileHandle;
  _LARGE_INTEGER StartingVcn;
  _LARGE_INTEGER StartingLcn;
  unsigned int ClusterCount;
};

/* 6739 */
struct __cppobj AsyncIPipeLong : IUnknown
{
};

/* 6740 */
struct __cppobj ITypeFactory : IUnknown
{
};

/* 6741 */
struct NCryptKeyName
{
  wchar_t *pszName;
  wchar_t *pszAlgid;
  unsigned int dwLegacyKeySpec;
  unsigned int dwFlags;
};

/* 6742 */
struct __cppobj IInternetHostSecurityManager : IUnknown
{
};

/* 6743 */
struct _PROPSHEETPAGEA_V2
{
  unsigned int dwSize;
  unsigned int dwFlags;
  HINSTANCE__ *hInstance;
  $03E6EEA160A4BF287FB0A80FBB3D7757 ___u3;
  $57038144EE260AFAA32682BDDA1565B6 ___u4;
  const char *pszTitle;
  __int64 (__cdecl *pfnDlgProc)(HWND__ *, unsigned int, unsigned __int64, __int64);
  __int64 lParam;
  unsigned int (__cdecl *pfnCallback)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);
  unsigned int *pcRefParent;
  const char *pszHeaderTitle;
  const char *pszHeaderSubTitle;
};

/* 6744 */
union _GDI_NONREMOTE::__MIDL_IWinTypes_0002
{
  int hInproc;
  _DWORD_BLOB *hRemote;
};

/* 6745 */
struct _GDI_NONREMOTE
{
  int fContext;
  _GDI_NONREMOTE::__MIDL_IWinTypes_0002 u;
};

/* 6746 */
struct __cppobj ICreateErrorInfo : IUnknown
{
};

/* 6747 */
struct HSTR__
{
  int unused;
};

/* 6748 */
struct _BCRYPT_RSAKEY_BLOB
{
  unsigned int Magic;
  unsigned int BitLength;
  unsigned int cbPublicExp;
  unsigned int cbModulus;
  unsigned int cbPrime1;
  unsigned int cbPrime2;
};

/* 6749 */
struct _ACL_REVISION_INFORMATION
{
  unsigned int AclRevision;
};

/* 6750 */
struct __cppobj IInternalUnknown : IUnknown
{
};

/* 6751 */
struct __cppobj IROTData : IUnknown
{
};

/* 6752 */
struct HMIXEROBJ__
{
  int unused;
};

/* 6753 */
struct __cppobj IXMLError : IUnknown
{
};

/* 6754 */
struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
  DISPLAYCONFIG_DEVICE_INFO_HEADER header;
  DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
  DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
  unsigned __int16 edidManufactureId;
  unsigned __int16 edidProductCodeId;
  unsigned int connectorInstance;
  wchar_t monitorFriendlyDeviceName[64];
  wchar_t monitorDevicePath[128];
};

/* 6755 */
struct __cppobj ISoftDistExt : IUnknown
{
};

/* 6756 */
struct __cppobj IZoneIdentifier : IUnknown
{
};

/* 6757 */
struct __cppobj IXMLAttribute : IDispatch
{
};

/* 6758 */
struct __cppobj IPipeLong : IUnknown
{
};

/* 6759 */
struct __cppobj IPipeDouble : IUnknown
{
};

/* 6760 */
union __m256
{
  float m256_f32[8];
};

/* 6761 */
struct __declspec(align(8)) audioSample_t
{
  char *buffer;
  int lengthInBytes;
  int lengthInSamples;
  int bytesPerSample;
  int frequency;
  bool stereo;
  int channels;
  int sampleOffset;
};

/* 6762 */
struct __cppobj IDirectSound8 : IDirectSound
{
};

/* 6763 */
struct SpeexBits
{
  char *chars;
  int nbBits;
  int charPtr;
  int bitPtr;
  int owner;
  int overflow;
  int buf_size;
  int reserved1;
  void *reserved2;
};

/* 6764 */
struct SpeexMode
{
  const void *mode;
  int (__cdecl *query)(const void *, int, void *);
  const char *modeName;
  int modeID;
  int bitstream_version;
  void *(__cdecl *enc_init)(SpeexMode *);
  void (__cdecl *enc_destroy)(void *);
  int (__cdecl *enc)(void *, void *, SpeexBits *);
  void *(__cdecl *dec_init)(SpeexMode *);
  void (__cdecl *dec_destroy)(void *);
  int (__cdecl *dec)(void *, SpeexBits *, void *);
  int (__cdecl *enc_ctl)(void *, int, void *);
  int (__cdecl *dec_ctl)(void *, int, void *);
};

/* 6765 */
struct SaveMemoryGlob
{
  SaveGame migration;
};

/* 6766 */
struct ButtonData
{
  int *buttons;
  int *oldbuttons;
  int *latched_buttons;
  EntHandle *useHoldEntity;
  int *useHoldTime;
  int *useButtonDone;
};

/* 6767 */
struct __declspec(align(8)) useList_t
{
  gentity_s *ent;
  float score;
};

/* 6768 */
struct AntilagClientStore
{
  float realClientPositions[36][3];
  float realClientAngles[36][3];
  bool clientMoved[36];
};

/* 6769 */
struct ipFilter_s
{
  unsigned int mask;
  unsigned int compare;
};

/* 6770 */
struct ent_field_t
{
  scr_string_t *name;
  unsigned int canonicalString;
  __int64 ofs;
  fieldtype_t type;
  void (__cdecl *setter)(gentity_s *, int);
  void (__cdecl *getter)(gentity_s *, int);
};

/* 6771 */
struct SpawnFuncEntry
{
  const char *classname;
  void (__cdecl *callback)(gentity_s *);
};

/* 6772 */
struct game_hudelem_s
{
  hudelem_s elem;
  int clientNum;
  int team;
  int archived;
  int currentShowInKillcam;
};

/* 6773 */
struct __declspec(align(8)) BuiltinFunctionDef
{
  unsigned int name;
  void (__cdecl *actionFunc)();
  int type;
};

/* 6774 */
struct DSData
{
  bool dirty;
  bool everDirty;
  bool qosNoJIPScore;
  bool qosNoJIPTime;
};

/* 6775 */
struct EntityOrigin
{
  float origin[3];
  unsigned int obj;
};

/* 6776 */
struct PathJumpLinkWorkData
{
  float pointA[3];
  float pointB[3];
  float pointCenter[3];
  float pointA1[3];
  float pointB1[3];
};

/* 6777 */
struct std::pair<EntityOrigin *,EntityOrigin *>
{
  EntityOrigin *first;
  EntityOrigin *second;
};

/* 6778 */
struct threat_bias_t
{
  scr_string_t groupName[16];
  int threatTable[16][16];
  int threatGroupCount;
};

/* 6779 */
struct __declspec(align(8)) badplace_brush_t
{
  gentity_s *volume;
  float radius;
};

/* 6780 */
union __declspec(align(8)) badplace_parms_t
{
  badplace_arc_t arc;
  badplace_brush_t brush;
};

/* 6781 */
struct badplace_t
{
  int endtime;
  int pingTime;
  scr_string_t name;
  char type;
  char teamflags;
  char flags;
  badplace_parms_t parms;
};

/* 6782 */
struct dynexp_sight_ents_t
{
  int count;
  int ents[32];
};

/* 6783 */
struct SplitscreenOnlineMigrationCache
{
  bool splitscreen;
  bool splitscreen_ingame;
};

/* 6784 */
struct pushed_t
{
  gentity_s *ent;
  float origin[3];
  float angles[3];
  float surfaceNormal[3];
  float deltayaw;
};

/* 6785 */
struct DeferredMovingPlatformData
{
  float deltaOrigin[3];
  float deltaAngles[3];
  int platformId;
};

/* 6786 */
struct __declspec(align(8)) MovingPlatformData
{
  Bounds *bound;
  float platformOrigin[3];
  float platformAngles[3];
  float platformOldOrigin[3];
  float platformOldAngles[3];
  float playerCurrentOrigin[3];
  int platformId;
  int platformBrushId;
  int handler;
  int clipMask;
  float deltaTime;
  int push;
  int jumping;
  playerState_s *ps;
  float transformedOrigin[3];
  int actorResolve;
  int failedTraceHitId;
};

/* 6787 */
struct EntInfoUnionPlatform
{
  float angles[3];
  float origin[3];
  int brushId;
};

/* 6788 */
struct EntInfoCharacter
{
  float angles[3];
  float origin[3];
  Bounds *bound;
};

/* 6789 */
union EntInfoUnion
{
  EntInfoUnionPlatform platform;
  EntInfoCharacter character;
};

/* 6790 */
struct EntInfo
{
  BGEntInfoType type;
  EntInfoUnion u;
};

/* 6791 */
struct AttractorRepulsor_t
{
  bool inUse;
  bool isAttractor;
  int entnum;
  unsigned int attacker;
  float origin[3];
  float strength;
  float maxDist;
};

/* 6792 */
struct $EC4F90F47551975D99B17DA44CCD97D8
{
  AttractorRepulsor_t attractors[32];
};

/* 6793 */
struct loadAnim_t
{
  scr_anim_s anim;
  int iNameHash;
  char szAnimName[36];
};

/* 6794 */
struct game_hudelem_field_t
{
  scr_string_t *name;
  unsigned int canonicalString;
  __int64 ofs;
  fieldtype_t type;
  int mask;
  int shift;
  void (__cdecl *setter)(game_hudelem_s *, int);
  void (__cdecl *getter)(game_hudelem_s *, int);
};

/* 6795 */
struct MantleResults
{
  float dir[3];
  float startPos[3];
  float ledgePos[3];
  float endPos[3];
  float distanceToMantleSurface;
  int flags;
  int endGroundEnt;
  int duration;
};

/* 6796 */
struct client_fields_s
{
  scr_string_t *name;
  unsigned int canonicalString;
  __int64 ofs;
  fieldtype_t type;
  void (__cdecl *setter)(gclient_s *, client_fields_s *);
  void (__cdecl *getter)(gclient_s *, client_fields_s *);
};

/* 6797 */
struct sentient_fields_s
{
  scr_string_t *name;
  unsigned int canonicalString;
  __int64 ofs;
  fieldtype_t type;
  void (__cdecl *setter)(sentient_s *, sentient_fields_s *);
  void (__cdecl *getter)(sentient_s *, sentient_fields_s *);
};

/* 6798 */
struct PathLinkInfo
{
  unsigned __int16 from;
  unsigned __int16 to;
  unsigned __int16 prev;
  unsigned __int16 next;
};

/* 6799 */
struct NodeDisconnectInfo
{
  unsigned __int16 node;
  unsigned __int16 nodeFrom;
  unsigned __int16 pathLinkIndex;
};

/* 6800 */
struct __declspec(align(8)) dynexp_buffers_t
{
  char *buffer[3];
  int size[3];
};

/* 6801 */
struct $B07709486CEDFEBFD5C73F093D598771
{
  float origin[3];
  float enemyPos[2];
  int checkEnemyPos;
  float maxDist;
  float maxDistSq;
  float maxHeightSq;
  int typeFlags;
  pathsort_s *nodes;
  int maxNodes;
  int nodeCount;
};

/* 6802 */
struct __declspec(align(16)) pathlocal_t
{
  PathLinkInfo pathLinkInfoArray[2048];
  int pathLinkInfoArrayInited;
  NodeDisconnectInfo nodeDisconnectInfoArray[128];
  unsigned __int16 nodeDisconnectIndex;
  unsigned int actualNodeCount;
  unsigned int aiSightLineStateMask;
  dynexp_sight_ents_t aiSightLineEnts;
  dynexp_buffers_t aiSightLineDynBuffers;
  $B07709486CEDFEBFD5C73F093D598771 circle;
};

/* 6803 */
struct node_field_t
{
  scr_string_t *name;
  unsigned int canonicalString;
  __int64 ofs;
  fieldtype_t type;
  void (__cdecl *getter)(pathnode_t *, int);
};

/* 6804 */
struct NodeTypeToName
{
  unsigned __int16 type;
  const char *name;
};

/* 6805 */
struct __declspec(align(8)) EntHandleInfo
{
  void *handle;
  unsigned __int16 next;
  unsigned __int16 prev;
};

/* 6806 */
struct EntHandleList
{
  unsigned __int16 infoIndex;
};

/* 6807 */
struct BulletTraceResults
{
  trace_t trace;
  gentity_s *hitEnt;
  float hitPos[3];
  bool ignoreHitEnt;
  int depthSurfaceType;
  int hitClientNum;
};

/* 6808 */
struct BulletFireParams
{
  int weaponEntIndex;
  int ignoreEntIndex;
  float damageMultiplier;
  meansOfDeath_t methodOfDeath;
  bool noRicochet;
  float origStart[3];
  float start[3];
  float end[3];
  float dir[3];
};

/* 6809 */
struct PotentialTargetData
{
  gentity_s *entity;
  int threat;
  float distToEnt;
  float dirToEnt[2];
};

/* 6810 */
struct sentient_sort_t
{
  sentient_s *sentient;
  float fMetric;
  float distSqrd;
};

/* 6811 */
struct path_trim_t
{
  int iIndex;
  int iDelta;
};

/* 6812 */
struct PathHeap
{
  unsigned __int16 index[8192];
  unsigned __int16 nodes[8192];
  unsigned int size;
};

/* 6813 */
struct __declspec(align(8)) CustomSearchInfo_FindCloseNode
{
  float localGoalPos[3];
  pathnode_t *closestNode;
  float closestDistSq;
};

/* 6814 */
struct __declspec(align(8)) CustomSearchInfo_FindPath
{
  pathnode_t *m_pNodeTo;
  float startPos[3];
  int randomWeightIndex;
  float randomNodeCosts[4];
  float chokePointWeights[4];
  float negotiationOverlapCost;
  int avoidExpStances;
  pathnode_t *avoidExpPosNode[5];
  float avoidExpPosDir[5][3];
  float avoidExpPosDot[5];
  float avoidExpPosPercent[5];
  float avoidExpPosRadiusSq[5];
  float avoidExpSkyPercent;
  float avoidExpGenPercent;
  float avoidExpLOSPercent;
  float avoidExpTrafficPercent;
  unsigned __int16 *pathZoneCosts;
  int pathZoneCostsCount;
  float pathSpreadPercent;
  team_t pathSpreadTeam;
  float avoidLocationPos[3];
  float avoidLocationPercent;
  float avoidLocationMaxDist;
  float traversalCostPercent;
};

/* 6815 */
struct __declspec(align(8)) CustomSearchInfo_FindPathWithWidth
{
  pathnode_t *m_pNodeTo;
  float width;
  float perp[2];
};

/* 6816 */
struct __cppobj CustomSearchInfo_FindPathNotCrossPlanes : CustomSearchInfo_FindPath
{
  int m_iPlaneCount;
  float (*m_vNormal)[2];
  float *m_fDist;
};

/* 6817 */
struct CustomSearchInfo_FindPathAway
{
  float m_vAwayFromPos[3];
  float m_fDistAway;
  float m_fDistAwaySqrd;
  float m_fInitialDistAwaySq;
  float m_fBestScore;
  pathnode_t *m_pBestNode;
};

/* 6818 */
struct __cppobj CustomSearchInfo_FindPathAwayNotCrossPlanes : CustomSearchInfo_FindPathAway
{
  int m_iPlaneCount;
  float (*m_vNormal)[2];
  float *m_fDist;
};

/* 6819 */
struct __declspec(align(8)) CustomSearchInfo_FindPathWithLOS
{
  pathnode_t *m_pNodeTo;
  float m_fWithinDistSqrd;
  float startPos[3];
  float negotiationOverlapCost;
};

/* 6820 */
struct __cppobj CustomSearchInfo_FindPathInCylinderWithLOS : CustomSearchInfo_FindPathWithLOS
{
  ai_goal_t *goal;
};

/* 6821 */
struct __cppobj CustomSearchInfo_FindPathInCylinderWithLOSNotCrossPlanes : CustomSearchInfo_FindPathWithLOS
{
  ai_goal_t *goal;
  int m_iPlaneCount;
  float (*m_vNormal)[2];
  float *m_fDist;
};

/* 6822 */
struct __cppobj __declspec(align(8)) CustomSearchInfo_FindPathInCylinder : CustomSearchInfo_FindPath
{
  float m_vOrigin[3];
  float m_fRadiusSqrd;
  float m_fHalfHeightSqrd;
};

/* 6823 */
struct __cppobj CustomSearchInfo_FindPathInCylinderNotCrossPlanes : CustomSearchInfo_FindPath
{
  float m_vOrigin[3];
  float m_fRadiusSqrd;
  float m_fHalfHeightSqrd;
  int m_iPlaneCount;
  float (*m_vNormal)[2];
  float *m_fDist;
};

/* 6824 */
struct CustomSearchInfo_CouldAttack
{
  pathnode_t *m_pNodeTo;
  pathnode_t *attackNode;
};

/* 6825 */
struct __declspec(align(8)) CustomSearchInfo_FindPathClosestPossible
{
  float m_fBestScore;
  pathnode_t *m_pBestNode;
  pathnode_t *m_pNodeTo;
  float negotiationOverlapCost;
};

/* 6826 */
struct CustomSearchInfo_FindPathAlien
{
  pathnode_t *m_pNodeTo;
  float startPos[3];
  int randomWeightIndex;
  float randomNodeCosts[4];
  float chokePointWeights[4];
  float negotiationOverlapCost;
  float jumpCost;
  float runCost;
  float traverseCost;
  float dangerousCost;
  float wallrunCost;
};

/* 6827 */
struct CustomSearchInfo_FindPathWithinRadius
{
  pathnode_t *m_pNodeFrom;
  pathnode_t *m_pNodeTo;
  float m_vStartPos[3];
  float m_vGoalPos[3];
  float m_RadiusSq;
  float m_PathLength;
};

/* 6828 */
struct PathDirectionChangeParams
{
  float turnLookaheadDist;
  float postTurnLookaheadDist;
  float tooCloseToDestDist;
};

/* 6829 */
struct AIEventListener
{
  int entIndex;
  unsigned int events;
};

/* 6830 */
struct __declspec(align(8)) $93504F0ED25C46429D8064F72DD441BC
{
  const char *name;
  float defaultDist;
  float busyDist;
  float defaultHeight;
  int variableRadius;
  int notifySelf;
};

/* 6831 */
const struct __declspec(align(8)) $EC0BAFB70AD08E1DF8769800AA3C3703
{
  const char *name;
  float defaultDist;
  float busyDist;
  float defaultHeight;
  int variableRadius;
  int notifySelf;
};

/* 6832 */
struct FxCurve
{
  int dimensionCount;
  int keyCount;
  float keys[1];
};

/* 6833 */
struct __declspec(align(8)) FxCurveIterator
{
  FxCurve *master;
  int currentKeyIndex;
};

/* 6834 */
struct __declspec(align(8)) FxElemPreVisualState
{
  float sampleLerp;
  float sampleLerpInv;
  FxElemDef *elemDef;
  FxEffect *effect;
  FxElemVisStateSample *refState;
  int randomSeed;
  float distanceFade;
  float occlusionFade;
};

/* 6835 */
struct __declspec(align(8)) FxTrailSegmentDrawState
{
  FxTrailDef *trailDef;
  float posWorld[3];
  float basis[2][3];
  float rotation;
  float size[2];
  float uCoord;
  float color[4];
};

/* 6836 */
struct GfxCodeMeshState
{
  char *verts;
  unsigned __int16 *indices;
  unsigned int vertIndexBase;
  unsigned int vertStride;
  unsigned int vertCount;
  unsigned int indexCount;
  unsigned int vertLimit;
  unsigned int indexLimit;
  GfxWarningType vertWarning;
  GfxWarningType indexWarning;
};

/* 6837 */
struct GfxFlareSurfGlob
{
  unsigned int surfCount;
  GfxFlareSurf *surfs;
  GfxCodeMeshState meshState;
  GfxMeshData *remoteMesh;
};

/* 6838 */
struct FxDrawState
{
  FxSystem *system;
  FxEffect *effect;
  FxElem *elem;
  FxElemDef *elemDef;
  GfxCodeSurfGlob *codeSurfGlob;
  orientation_t orient;
  FxCamera *camera;
  int randomSeed;
  float msecLifeSpan;
  float msecElapsed;
  float normTimeUpdateEnd;
  float posWorld[3];
  float velDirWorld[3];
  FxElemVisualState visState;
  FxElemPreVisualState preVisState;
  float physicsLerpFrac;
  int msecDraw;
  unsigned int elemHandle;
  int reactiveTurbulenceGroup;
  __m128 negCameraNormal;
  __m128 negCameraTangent;
  __m128 cameraBitangent;
  GfxFlareSurfGlob *flareSurfGlob;
  float litMaxColorChange;
  float (*lastFrameColor)[3];
  int *timeLightingLastCalculated;
};

/* 6839 */
struct FxSystemBuffers
{
  unsigned int allEffectHandles[1024];
  FxEffect effects[1024];
  FxPool<FxElem> elems[32];
  FxElemChild elemChild[32];
  unsigned int nextElemHandleInEffect[32];
  unsigned int prevElemHandleInEffect[32];
  FxPool<FxTrail> trails[128];
  FxPool<FxTrailElem> trailElems[128];
  FxPool<FxBolt> bolts[256];
  FxPool<FxSparkCloud> sparkClouds[8];
  FxPool<FxSparkFountain> sparkFountains[4];
  FxPool<FxSparkFountainCluster> sparkFountainClusters[1];
  FxVisState visState[2];
  char padding2[96];
  FxEffect *restartEffectsList[1024];
};

/* 6840 */
struct __declspec(align(4)) FxInsertSortElem
{
  int defSortOrder;
  float distToCamSq;
  int msecBegin;
  int defIndex;
  char elemType;
};

/* 6841 */
struct FxMarksSystemBuffers
{
  FxMark marksBuf[512];
  FxTriGroupPool triGroupsBuf[2048];
  FxPointGroupPool pointGroupsBuf[3072];
};

/* 6842 */
struct MarkGenContext
{
  LocalClientNum_t localClientNum;
  Material *material;
  Material *displacementMaterial;
  float radius;
  const char *nativeColor;
  char fadeInfo;
  int viewmodelClientIndex;
};

/* 6843 */
struct FxMarkDObjUpdateContext
{
  XModel *models[32];
  const char *modelParentBones[32];
  int modelCount;
  bool isBrush;
  unsigned __int16 brushIndex;
};

/* 6844 */
struct FxActiveMarkSurf
{
  Material *material;
  GfxMarkContext context;
  int indexCount;
  unsigned __int16 *indices;
};

/* 6845 */
struct SpuLocalStructPtr<FxSystem,31>
{
  FxSystem *localPtr;
};

/* 6846 */
struct SpuLocalStructPtr<FxMarksSystem,31>
{
  FxMarksSystem *localPtr;
};

/* 6847 */
struct std::pair<FxMarkTri *,FxMarkTri *>
{
  FxMarkTri *first;
  FxMarkTri *second;
};

/* 6848 */
union $67F8806314ED4E1309359B6E5E5D272E
{
  float constantValue;
  float *sampleValue;
};

/* 6849 */
struct FxGraph1D
{
  int intervalCount;
  $67F8806314ED4E1309359B6E5E5D272E u;
};

/* 6850 */
union __declspec(align(8)) $43CD2BA7D71864F90277BD7CAFF61717
{
  float constantValue[3];
  float (*sampleValue)[3];
};

/* 6851 */
struct FxGraph3D
{
  int intervalCount;
  $43CD2BA7D71864F90277BD7CAFF61717 u;
};

/* 6852 */
struct FxGlassTraceHit
{
  FxGlassVertex breakOrg;
  unsigned int pieceIndex;
  float dist;
  float axis[3][3];
};

/* 6853 */
struct FxGlassTrace
{
  float start[3];
  float dir[3];
  float len;
  unsigned int hitCount;
  FxGlassTraceHit hits[5];
};

/* 6854 */
struct std::pair<FxGlassTraceHit *,FxGlassTraceHit *>
{
  FxGlassTraceHit *first;
  FxGlassTraceHit *second;
};

/* 6855 */
struct SpuLocalStructPtr<FxGlassVisInfo,31>
{
  FxGlassVisInfo *localPtr;
};

/* 6856 */
struct SpuLocalStructPtr<FxGlassSystem,31>
{
  FxGlassSystem *localPtr;
};

/* 6857 */
struct __declspec(align(16)) FxGlassDrawState
{
  float localVerts[128][3];
  PackedTexCoords texCoords[128];
  float origin[3];
  float axis[3][3];
  float texCoordOrigin[2];
  FxGlassDef *def;
  const float (*texVecs)[2];
  unsigned int vertCount;
  float thicknessOffset[3];
  PackedUnitVec packedTangent;
  r_double_index_t *dstIndices;
  unsigned __int16 baseVertex;
  unsigned int totalVertCount;
  unsigned int totalIndexCount;
  float shatteredScale;
};

/* 6858 */
struct FxGlassFaceDef
{
  float offset[3];
  float binormalSign;
  GfxColor color;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 6859 */
union FxGlassTwoTris
{
  r_double_index_t read[3];
  unsigned __int16 write[2][3];
};

/* 6860 */
struct std::pair<FxGlassPieceVisRef *,FxGlassPieceVisRef *>
{
  FxGlassPieceVisRef *first;
  FxGlassPieceVisRef *second;
};

/* 6861 */
struct __declspec(align(8)) SpuArrayIteratorLookup<FxGlassPiecePlace>
{
  FxGlassPiecePlace *entry;
  unsigned int index;
};

/* 6862 */
struct FxGlassShardPointMetric
{
  int quadrant;
  int tanNumer;
  int tanDenom;
};

/* 6863 */
struct $2861D48BBA54E338333741DA5DA3A8D2
{
  char i0;
  char i1;
};

/* 6864 */
union FxGlassShardEdge
{
  $2861D48BBA54E338333741DA5DA3A8D2 fields;
  unsigned __int16 packed;
};

/* 6865 */
struct FxGlassShardTriangulate
{
  FxGlassShardPointMetric metric[255];
  char evalTime[255];
  float awayFromPoint[2];
  unsigned int edgeCount;
  FxGlassShardEdge edges[512];
  unsigned int fanDataUsed;
  unsigned int fanDataLimit;
  char *fanData;
};

/* 6867 */
struct $FD304D591E416FD31DDAED2D04E2693B
{
  char i0;
  char i1;
  char loopIndex;
  char type;
  float len;
};

/* 6868 */
union $C9D8B3669F2A0CF74FA9EA4C08449569
{
  $FD304D591E416FD31DDAED2D04E2693B __s0;
  FxGlassCrackEdge *nextFree;
};

/* 6866 */
struct FxGlassCrackEdge
{
  $C9D8B3669F2A0CF74FA9EA4C08449569 ___u0;
  float dir[2];
  FxGlassCrackEdge *twin;
  FxGlassCrackEdge *next;
};

/* 6869 */
struct FxGlassCrackPoint
{
  float xy[2];
};

/* 6870 */
struct FxGlassCrackLoop
{
  FxGlassCrackEdge *firstEdge;
  float mins[2];
  float maxs[2];
};

/* 6871 */
struct FxGlassCrackBranch
{
  FxGlassCrackEdge *afterEdge;
  unsigned int startIndex;
  float dir[2];
  float len;
  float baseDir[2];
  float deflectLimit;
  float priorCrackLength;
};

/* 6872 */
struct FxGlassCrackWork
{
  FxGlassVertex packedPts[255];
  FxGlassCrackPoint pts[255];
  unsigned int ptCount;
  FxGlassCrackEdge edges[512];
  unsigned int edgeCount;
  FxGlassCrackEdge *firstFreeEdge;
  unsigned int loopCount;
  FxGlassCrackLoop loops[32];
  unsigned int pieceIndex;
  FxGlassPiecePlace *piecePlace;
  FxGlassPieceState *pieceState;
  FxGlassDef *def;
  FxGlassSystem *glassSys;
  FxGlassCrackEdge *breakOrgLoop;
  unsigned int breakOrgIndex;
  float crackLengthMin;
  float crackLengthMax;
  float originalRadius;
  float impactPos[3];
  float impactDir[3];
  const float (*axis)[3];
  float angleSign;
  float playerOrigin[3];
  FxGlassCrackBranch branchStack[32];
  unsigned int branchStackLevel;
  float maxPieceArea;
  float maxEdgePieceArea;
  unsigned __int16 pieceStack[32];
  unsigned int pieceStackLevel;
  unsigned __int16 fringePieces[32];
  unsigned int fringePieceCount;
  float fringeAreaX2;
};

/* 6873 */
struct FxGlassCrackAngleEval
{
  int org[2];
  int delta[2];
};

/* 6874 */
struct FxGlassShardSeenEdge
{
  unsigned __int16 i0;
  unsigned __int16 i1;
  int lineEq[3];
};

/* 6875 */
struct __declspec(align(8)) FxGlassShardEdgeLoop
{
  FxGlassCrackEdge *firstEdge;
  unsigned __int16 vertCount;
  unsigned __int16 parentLoopIndex;
};

/* 6876 */
struct FxGlassShard
{
  float areaX2;
  float radius;
  float centroid[2];
  FxGlassVertex packedCentroid;
  unsigned int loopCount;
  FxGlassShardEdgeLoop loops[16];
  unsigned int crackCount;
  FxGlassCrackEdge *cracks[64];
  char ptCount;
  char ptIndexMap[255];
  unsigned int supportMask;
  unsigned int holeDataCount;
  unsigned int crackDataCount;
  unsigned int fanDataCount;
  unsigned int geoDataUsed;
  FxGlassGeometryData geoData[231];
};

/* 6877 */
struct std::pair<unsigned int *,unsigned int *>
{
  unsigned int *first;
  unsigned int *second;
};

/* 6878 */
struct FxGlassClipSegment
{
  unsigned int startIndex;
  float len;
  float dir[2];
  float deflectLimit;
  float baseDir[2];
  float deflectDir[2];
  float deflectLen;
  int isBad;
  int wasDeflected;
  int hitAtVertex;
  FxGlassCrackEdge *hitEdge;
  FxGlassCrackEdge *hitEdgePrev;
};

/* 6879 */
struct FxGlassCrackWalk
{
  float cutoffCrackLength;
  unsigned int loopIndex;
  float totalCrackLength;
  FxGlassClipSegment clip;
  FxGlassCrackEdge *frontHead;
  FxGlassCrackEdge *backHead;
  FxGlassCrackEdge *frontTail;
  FxGlassCrackEdge *backTail;
  FxGlassCrackEdge *clippedEdge;
};

/* 6880 */
struct __declspec(align(8)) FxGlassSeedDirResults
{
  float minDistSq;
  float *seedDir;
  FxGlassCrackEdge *hitEdgePrev;
  float hitEdgeLen;
};

/* 6881 */
struct __declspec(align(4)) FxGlassInitialCrackVert
{
  float pos[3];
  bool valid;
};

/* 6882 */
struct Glass_BreakData
{
  int brokenPieceCount;
  float totalAreaX2;
  const float *playerOrigin;
};

/* 6883 */
struct __declspec(align(8)) FxGlassActiveList
{
  FxGlassPieceState *states[2048];
  unsigned int count;
};

/* 6884 */
struct PiecePriority
{
  unsigned __int16 index;
  unsigned __int16 priority;
};

/* 6885 */
struct RemovePiecesData
{
  PiecePriority priorities[2048];
  unsigned int priorityCount;
  const float *playerOrigin;
  int piecesNeeded;
  int geoDataNeeded;
};

/* 6886 */
struct PartitionPriorityPred
{
  unsigned __int16 value;
};

/* 6887 */
struct __declspec(align(4)) FindInitialPieceData
{
  unsigned int initialPieceIndex;
  int resultPieceIndex;
  bool foundOne;
};

/* 6888 */
struct std::pair<FxGlassPieceState * *,FxGlassPieceState * *>
{
  FxGlassPieceState **first;
  FxGlassPieceState **second;
};

/* 6889 */
struct FXCodeSurf
{
  Material *material;
  unsigned int vertIndexBase;
  unsigned __int16 indexOffset;
  unsigned __int16 indexCount;
  int reactiveTurbulenceGroup;
  const char *name;
};

/* 6890 */
struct __declspec(align(4)) FxParticleSimAnimationSortInfo
{
  float distanceSquared;
  unsigned __int16 vertIndexOffset;
};

/* 6891 */
struct FxParticleSimAnimationInterpolatedData
{
  float position[3];
  float width;
  float height;
  float orientation;
  GfxColorFloat color;
  float lifetime;
};

/* 6892 */
struct FxEffectDefTableEntry
{
  unsigned __int64 key;
  FxEffectDef *effectDef;
};

/* 6893 */
struct FxEffectDefTable
{
  int count;
  FxEffectDefTableEntry entries[2048];
};

/* 6894 */
struct __declspec(align(4)) DynEntityProps
{
  const char *name;
  bool clientOnly;
  bool clipMove;
  bool usePhysics;
  bool destroyable;
  bool initInactive;
};

/* 6895 */
struct DynEntityAreaParms
{
  float origin[3];
  float radiusSq;
  float radius;
  int contentMask;
  unsigned __int16 *list;
  unsigned int maxCount;
  unsigned int count;
};

/* 6896 */
struct __declspec(align(4)) DynEntSortStruct
{
  float distSq;
  unsigned __int16 id;
};

/* 6897 */
struct std::pair<DynEntSortStruct *,DynEntSortStruct *>
{
  DynEntSortStruct *first;
  DynEntSortStruct *second;
};

/* 6898 */
struct XAsset
{
  XAssetType type;
  XAssetHeader header;
};

/* 6899 */
struct XGfxGlobals
{
  unsigned int depthStencilStateCount;
  unsigned int blendStateCount;
  unsigned __int64 *depthStencilStateBits;
  unsigned int (*blendStateBits)[1];
  GfxZoneTableEntry *depthStencilStates;
  GfxZoneTableEntry *blendStates;
  unsigned int perPrimConstantBufferCount;
  unsigned int perObjConstantBufferCount;
  unsigned int stableConstantBufferCount;
  unsigned int *perPrimConstantBufferSizes;
  unsigned int *perObjConstantBufferSizes;
  unsigned int *stableConstantBufferSizes;
  GfxZoneTableEntry *perPrimConstantBuffers;
  GfxZoneTableEntry *perObjConstantBuffers;
  GfxZoneTableEntry *stableConstantBuffers;
};

/* 6900 */
struct XGlobals
{
  XGfxGlobals *gfxGlobals;
};

/* 6901 */
struct XAssetList
{
  ScriptStringList stringList;
  int assetCount;
  XAsset *assets;
  XGlobals *globals;
};

/* 6902 */
struct XBlock
{
  char *data;
  unsigned __int64 size;
};

/* 6903 */
struct XZoneMemory
{
  XBlock blocks[7];
};

/* 6904 */
struct __declspec(align(8)) StreamPosInfo
{
  char *pos;
  unsigned int index;
};

/* 6905 */
union XAssetPoolEntry<ToneMapping>
{
  ToneMapping entry;
  XAssetPoolEntry<ToneMapping> *next;
};

/* 6906 */
struct XAssetPool<ToneMapping,128>
{
  XAssetPoolEntry<ToneMapping> *freeHead;
  XAssetPoolEntry<ToneMapping> entries[128];
};

/* 6907 */
union XAssetPoolEntry<MaterialHullShader>
{
  MaterialHullShader entry;
  XAssetPoolEntry<MaterialHullShader> *next;
};

/* 6908 */
struct XAssetPool<MaterialHullShader,1>
{
  XAssetPoolEntry<MaterialHullShader> *freeHead;
  XAssetPoolEntry<MaterialHullShader> entries[1];
};

/* 6909 */
union XAssetPoolEntry<EquipmentSoundTable>
{
  EquipmentSoundTable entry;
  XAssetPoolEntry<EquipmentSoundTable> *next;
};

/* 6910 */
struct XAssetPool<EquipmentSoundTable,1>
{
  XAssetPoolEntry<EquipmentSoundTable> *freeHead;
  XAssetPoolEntry<EquipmentSoundTable> entries[1];
};

/* 6911 */
union XAssetPoolEntry<MaterialDomainShader>
{
  MaterialDomainShader entry;
  XAssetPoolEntry<MaterialDomainShader> *next;
};

/* 6912 */
struct XAssetPool<MaterialDomainShader,1>
{
  XAssetPoolEntry<MaterialDomainShader> *freeHead;
  XAssetPoolEntry<MaterialDomainShader> entries[1];
};

/* 6913 */
union XAssetPoolEntry<VectorField>
{
  VectorField entry;
  XAssetPoolEntry<VectorField> *next;
};

/* 6914 */
struct XAssetPool<VectorField,128>
{
  XAssetPoolEntry<VectorField> *freeHead;
  __declspec(align(16)) XAssetPoolEntry<VectorField> entries[128];
};

/* 6915 */
union XAssetPoolEntry<MaterialPixelShader>
{
  MaterialPixelShader entry;
  XAssetPoolEntry<MaterialPixelShader> *next;
};

/* 6916 */
struct XAssetPool<MaterialPixelShader,1>
{
  XAssetPoolEntry<MaterialPixelShader> *freeHead;
  XAssetPoolEntry<MaterialPixelShader> entries[1];
};

/* 6917 */
union XAssetPoolEntry<FxParticleSimAnimation>
{
  FxParticleSimAnimation entry;
  XAssetPoolEntry<FxParticleSimAnimation> *next;
};

/* 6918 */
struct XAssetPool<FxParticleSimAnimation,32>
{
  XAssetPoolEntry<FxParticleSimAnimation> *freeHead;
  XAssetPoolEntry<FxParticleSimAnimation> entries[32];
};

/* 6919 */
union XAssetPoolEntry<MaterialVertexDeclaration>
{
  MaterialVertexDeclaration entry;
  XAssetPoolEntry<MaterialVertexDeclaration> *next;
};

/* 6920 */
struct XAssetPool<MaterialVertexDeclaration,1>
{
  XAssetPoolEntry<MaterialVertexDeclaration> *freeHead;
  XAssetPoolEntry<MaterialVertexDeclaration> entries[1];
};

/* 6921 */
union XAssetPoolEntry<DopplerPreset>
{
  DopplerPreset entry;
  XAssetPoolEntry<DopplerPreset> *next;
};

/* 6922 */
struct XAssetPool<DopplerPreset,64>
{
  XAssetPoolEntry<DopplerPreset> *freeHead;
  XAssetPoolEntry<DopplerPreset> entries[64];
};

/* 6923 */
struct XAssetEntry
{
  XAsset asset;
  char zoneIndex;
  volatile char inuseMask;
  unsigned int nextHash;
  unsigned int nextOverride;
  unsigned int nextPoolEntry;
};

/* 6924 */
struct DBFile
{
  void *handle;
  unsigned __int64 memoryBufferSize;
  char *memoryBuffer;
  char name[64];
};

/* 6925 */
struct XZone
{
  DBFile file;
  int flags;
  int loadComplete;
  int unloadComplete;
  PMem_Direction allocDir;
  XZoneMemory mem;
};

/* 6926 */
union XAssetPoolEntry<MaterialTechniqueSet>
{
  MaterialTechniqueSet entry;
  XAssetPoolEntry<MaterialTechniqueSet> *next;
};

/* 6927 */
struct XAssetPool<MaterialTechniqueSet,1>
{
  XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
  XAssetPoolEntry<MaterialTechniqueSet> entries[1];
};

/* 6928 */
struct XZoneInfoInternal
{
  char name[64];
  int flags;
  int isBaseMap;
};

/* 6929 */
union XAssetPoolEntry<GfxImage>
{
  GfxImage entry;
  XAssetPoolEntry<GfxImage> *next;
};

/* 6930 */
struct XAssetPool<GfxImage,5952>
{
  XAssetPoolEntry<GfxImage> *freeHead;
  XAssetPoolEntry<GfxImage> entries[5952];
};

/* 6931 */
struct MatchRulesSnapshot
{
  int snapTime;
  char data[3072];
};

/* 6932 */
union XAssetPoolEntry<snd_alias_list_t>
{
  snd_alias_list_t entry;
  XAssetPoolEntry<snd_alias_list_t> *next;
};

/* 6933 */
struct XAssetPool<snd_alias_list_t,16000>
{
  XAssetPoolEntry<snd_alias_list_t> *freeHead;
  XAssetPoolEntry<snd_alias_list_t> entries[16000];
};

/* 6934 */
union XAssetPoolEntry<SndCurve>
{
  SndCurve entry;
  XAssetPoolEntry<SndCurve> *next;
};

/* 6935 */
struct XAssetPool<SndCurve,64>
{
  XAssetPoolEntry<SndCurve> *freeHead;
  XAssetPoolEntry<SndCurve> entries[64];
};

/* 6936 */
union XAssetPoolEntry<LoadedSound>
{
  LoadedSound entry;
  XAssetPoolEntry<LoadedSound> *next;
};

/* 6937 */
struct XAssetPool<LoadedSound,2500>
{
  XAssetPoolEntry<LoadedSound> *freeHead;
  XAssetPoolEntry<LoadedSound> entries[2500];
};

/* 6938 */
union XAssetPoolEntry<MapEnts>
{
  MapEnts entry;
  XAssetPoolEntry<MapEnts> *next;
};

/* 6939 */
struct XAssetPool<MapEnts,2>
{
  XAssetPoolEntry<MapEnts> *freeHead;
  XAssetPoolEntry<MapEnts> entries[2];
};

/* 6940 */
union XAssetPoolEntry<GfxLightDef>
{
  GfxLightDef entry;
  XAssetPoolEntry<GfxLightDef> *next;
};

/* 6941 */
struct XAssetPool<GfxLightDef,32>
{
  XAssetPoolEntry<GfxLightDef> *freeHead;
  XAssetPoolEntry<GfxLightDef> entries[32];
};

/* 6942 */
union XAssetPoolEntry<Font_s>
{
  Font_s entry;
  XAssetPoolEntry<Font_s> *next;
};

/* 6943 */
struct XAssetPool<Font_s,16>
{
  XAssetPoolEntry<Font_s> *freeHead;
  XAssetPoolEntry<Font_s> entries[16];
};

/* 6944 */
union XAssetPoolEntry<MenuList>
{
  MenuList entry;
  XAssetPoolEntry<MenuList> *next;
};

/* 6945 */
struct XAssetPool<MenuList,64>
{
  XAssetPoolEntry<MenuList> *freeHead;
  XAssetPoolEntry<MenuList> entries[64];
};

/* 6946 */
union XAssetPoolEntry<menuDef_t>
{
  menuDef_t entry;
  XAssetPoolEntry<menuDef_t> *next;
};

/* 6947 */
struct XAssetPool<menuDef_t,256>
{
  XAssetPoolEntry<menuDef_t> *freeHead;
  XAssetPoolEntry<menuDef_t> entries[256];
};

/* 6948 */
union XAssetPoolEntry<AnimationClass>
{
  AnimationClass entry;
  XAssetPoolEntry<AnimationClass> *next;
};

/* 6949 */
struct XAssetPool<AnimationClass,8>
{
  XAssetPoolEntry<AnimationClass> *freeHead;
  XAssetPoolEntry<AnimationClass> entries[8];
};

/* 6950 */
union XAssetPoolEntry<LocalizeEntry>
{
  LocalizeEntry entry;
  XAssetPoolEntry<LocalizeEntry> *next;
};

/* 6951 */
struct XAssetPool<LocalizeEntry,8800>
{
  XAssetPoolEntry<LocalizeEntry> *freeHead;
  XAssetPoolEntry<LocalizeEntry> entries[8800];
};

/* 6952 */
union XAssetPoolEntry<WeaponAttachment>
{
  WeaponAttachment entry;
  XAssetPoolEntry<WeaponAttachment> *next;
};

/* 6953 */
struct XAssetPool<WeaponAttachment,96>
{
  XAssetPoolEntry<WeaponAttachment> *freeHead;
  XAssetPoolEntry<WeaponAttachment> entries[96];
};

/* 6954 */
union XAssetPoolEntry<WeaponDef>
{
  WeaponDef entry;
  XAssetPoolEntry<WeaponDef> *next;
};

/* 6955 */
struct XAssetPool<WeaponDef,160>
{
  XAssetPoolEntry<WeaponDef> *freeHead;
  XAssetPoolEntry<WeaponDef> entries[160];
};

/* 6956 */
union XAssetPoolEntry<SndDriverGlobals>
{
  SndDriverGlobals entry;
  XAssetPoolEntry<SndDriverGlobals> *next;
};

/* 6957 */
struct XAssetPool<SndDriverGlobals,1>
{
  XAssetPoolEntry<SndDriverGlobals> *freeHead;
  XAssetPoolEntry<SndDriverGlobals> entries[1];
};

/* 6958 */
union XAssetPoolEntry<FxEffectDef>
{
  FxEffectDef entry;
  XAssetPoolEntry<FxEffectDef> *next;
};

/* 6959 */
struct XAssetPool<FxEffectDef,2048>
{
  XAssetPoolEntry<FxEffectDef> *freeHead;
  XAssetPoolEntry<FxEffectDef> entries[2048];
};

/* 6960 */
union XAssetPoolEntry<FxImpactTable>
{
  FxImpactTable entry;
  XAssetPoolEntry<FxImpactTable> *next;
};

/* 6961 */
struct XAssetPool<FxImpactTable,4>
{
  XAssetPoolEntry<FxImpactTable> *freeHead;
  XAssetPoolEntry<FxImpactTable> entries[4];
};

/* 6962 */
union XAssetPoolEntry<SurfaceFxTable>
{
  SurfaceFxTable entry;
  XAssetPoolEntry<SurfaceFxTable> *next;
};

/* 6963 */
struct XAssetPool<SurfaceFxTable,6>
{
  XAssetPoolEntry<SurfaceFxTable> *freeHead;
  XAssetPoolEntry<SurfaceFxTable> entries[6];
};

/* 6964 */
union XAssetPoolEntry<RawFile>
{
  RawFile entry;
  XAssetPoolEntry<RawFile> *next;
};

/* 6965 */
struct XAssetPool<RawFile,1024>
{
  XAssetPoolEntry<RawFile> *freeHead;
  XAssetPoolEntry<RawFile> entries[1024];
};

/* 6966 */
union XAssetPoolEntry<ScriptFile>
{
  ScriptFile entry;
  XAssetPoolEntry<ScriptFile> *next;
};

/* 6967 */
struct XAssetPool<ScriptFile,768>
{
  XAssetPoolEntry<ScriptFile> *freeHead;
  XAssetPoolEntry<ScriptFile> entries[768];
};

/* 6968 */
union XAssetPoolEntry<StringTable>
{
  StringTable entry;
  XAssetPoolEntry<StringTable> *next;
};

/* 6969 */
struct XAssetPool<StringTable,400>
{
  XAssetPoolEntry<StringTable> *freeHead;
  XAssetPoolEntry<StringTable> entries[400];
};

/* 6970 */
struct XAssetCopyInfo
{
  unsigned int existingEntryIndex;
  unsigned int newEntryIndex;
};

/* 6971 */
union XAssetPoolEntry<LeaderboardDef>
{
  LeaderboardDef entry;
  XAssetPoolEntry<LeaderboardDef> *next;
};

/* 6972 */
struct XAssetPool<LeaderboardDef,128>
{
  XAssetPoolEntry<LeaderboardDef> *freeHead;
  XAssetPoolEntry<LeaderboardDef> entries[128];
};

/* 6973 */
struct __declspec(align(4)) XTransientAsset
{
  unsigned int hashIndex;
  char zoneIndex;
};

/* 6974 */
struct GiveImageCache
{
  char *memory;
  char *end;
};

/* 6975 */
union XAssetPoolEntry<StructuredDataDefSet>
{
  StructuredDataDefSet entry;
  XAssetPoolEntry<StructuredDataDefSet> *next;
};

/* 6976 */
struct XAssetPool<StructuredDataDefSet,24>
{
  XAssetPoolEntry<StructuredDataDefSet> *freeHead;
  XAssetPoolEntry<StructuredDataDefSet> entries[24];
};

/* 6977 */
union XAssetPoolEntry<TracerDef>
{
  TracerDef entry;
  XAssetPoolEntry<TracerDef> *next;
};

/* 6978 */
struct XAssetPool<TracerDef,32>
{
  XAssetPoolEntry<TracerDef> *freeHead;
  XAssetPoolEntry<TracerDef> entries[32];
};

/* 6979 */
union XAssetPoolEntry<VehicleDef>
{
  VehicleDef entry;
  XAssetPoolEntry<VehicleDef> *next;
};

/* 6980 */
struct XAssetPool<VehicleDef,32>
{
  XAssetPoolEntry<VehicleDef> *freeHead;
  XAssetPoolEntry<VehicleDef> entries[32];
};

/* 6981 */
union XAssetPoolEntry<PhysPreset>
{
  PhysPreset entry;
  XAssetPoolEntry<PhysPreset> *next;
};

/* 6982 */
struct XAssetPool<PhysPreset,128>
{
  XAssetPoolEntry<PhysPreset> *freeHead;
  XAssetPoolEntry<PhysPreset> entries[128];
};

/* 6983 */
struct XAssetPool<VehicleDef,1>
{
  XAssetPoolEntry<VehicleDef> *freeHead;
  XAssetPoolEntry<VehicleDef> entries[1];
};

/* 6984 */
union XAssetPoolEntry<PhysCollmap>
{
  PhysCollmap entry;
  XAssetPoolEntry<PhysCollmap> *next;
};

/* 6985 */
struct XAssetPool<PhysCollmap,256>
{
  XAssetPoolEntry<PhysCollmap> *freeHead;
  XAssetPoolEntry<PhysCollmap> entries[256];
};

/* 6986 */
union XAssetPoolEntry<NetConstStrings>
{
  NetConstStrings entry;
  XAssetPoolEntry<NetConstStrings> *next;
};

/* 6987 */
struct XAssetPool<NetConstStrings,128>
{
  XAssetPoolEntry<NetConstStrings> *freeHead;
  XAssetPoolEntry<NetConstStrings> entries[128];
};

/* 6988 */
union XAssetPoolEntry<XAnimParts>
{
  XAnimParts entry;
  XAssetPoolEntry<XAnimParts> *next;
};

/* 6989 */
struct XAssetPool<XAnimParts,4160>
{
  XAssetPoolEntry<XAnimParts> *freeHead;
  XAssetPoolEntry<XAnimParts> entries[4160];
};

/* 6990 */
union XAssetPoolEntry<ReverbPreset>
{
  ReverbPreset entry;
  XAssetPoolEntry<ReverbPreset> *next;
};

/* 6991 */
struct XAssetPool<ReverbPreset,64>
{
  XAssetPoolEntry<ReverbPreset> *freeHead;
  XAssetPoolEntry<ReverbPreset> entries[64];
};

/* 6992 */
union XAssetPoolEntry<XModelSurfs>
{
  XModelSurfs entry;
  XAssetPoolEntry<XModelSurfs> *next;
};

/* 6993 */
struct XAssetPool<XModelSurfs,4096>
{
  XAssetPoolEntry<XModelSurfs> *freeHead;
  XAssetPoolEntry<XModelSurfs> entries[4096];
};

/* 6994 */
union XAssetPoolEntry<LuaFile>
{
  LuaFile entry;
  XAssetPoolEntry<LuaFile> *next;
};

/* 6995 */
struct XAssetPool<LuaFile,256>
{
  XAssetPoolEntry<LuaFile> *freeHead;
  XAssetPoolEntry<LuaFile> entries[256];
};

/* 6996 */
union XAssetPoolEntry<XModel>
{
  XModel entry;
  XAssetPoolEntry<XModel> *next;
};

/* 6997 */
struct XAssetPool<XModel,2208>
{
  XAssetPoolEntry<XModel> *freeHead;
  XAssetPoolEntry<XModel> entries[2208];
};

/* 6998 */
union XAssetPoolEntry<ScriptableDef>
{
  ScriptableDef entry;
  XAssetPoolEntry<ScriptableDef> *next;
};

/* 6999 */
struct XAssetPool<ScriptableDef,128>
{
  XAssetPoolEntry<ScriptableDef> *freeHead;
  XAssetPoolEntry<ScriptableDef> entries[128];
};

/* 7000 */
union XAssetPoolEntry<Material>
{
  Material entry;
  XAssetPoolEntry<Material> *next;
};

/* 7001 */
struct XAssetPool<Material,128>
{
  XAssetPoolEntry<Material> *freeHead;
  XAssetPoolEntry<Material> entries[128];
};

/* 7002 */
union XAssetPoolEntry<Colorization>
{
  Colorization entry;
  XAssetPoolEntry<Colorization> *next;
};

/* 7003 */
struct XAssetPool<Colorization,256>
{
  XAssetPoolEntry<Colorization> *freeHead;
  XAssetPoolEntry<Colorization> entries[256];
};

/* 7004 */
union XAssetPoolEntry<ComputeShader>
{
  ComputeShader entry;
  XAssetPoolEntry<ComputeShader> *next;
};

/* 7005 */
struct XAssetPool<ComputeShader,1>
{
  XAssetPoolEntry<ComputeShader> *freeHead;
  XAssetPoolEntry<ComputeShader> entries[1];
};

/* 7006 */
union XAssetPoolEntry<ColorizationSet>
{
  ColorizationSet entry;
  XAssetPoolEntry<ColorizationSet> *next;
};

/* 7007 */
struct XAssetPool<ColorizationSet,128>
{
  XAssetPoolEntry<ColorizationSet> *freeHead;
  XAssetPoolEntry<ColorizationSet> entries[128];
};

/* 7008 */
union XAssetPoolEntry<MaterialVertexShader>
{
  MaterialVertexShader entry;
  XAssetPoolEntry<MaterialVertexShader> *next;
};

/* 7009 */
struct XAssetPool<MaterialVertexShader,1>
{
  XAssetPoolEntry<MaterialVertexShader> *freeHead;
  XAssetPoolEntry<MaterialVertexShader> entries[1];
};

/* 7010 */
union __declspec(align(128)) XAssetSize
{
  XAnimParts parts;
  XModel model;
  Material material;
  MaterialPixelShader pixelShader;
  MaterialVertexShader vertexShader;
  MaterialTechniqueSet techniqueSet;
  GfxImage image;
  snd_alias_list_t sound;
  SndCurve sndCurve;
  clipMap_t clipMap;
  ComWorld comWorld;
  MapEnts mapEnts;
  GfxWorld gfxWorld;
  GfxLightDef lightDef;
  Font_s font;
  MenuList menuList;
  menuDef_t menu;
  LocalizeEntry localize;
  WeaponAttachment attachment;
  WeaponDef weapon;
  SndDriverGlobals sndDriverGlobals;
  FxEffectDef *fx;
  FxImpactTable impactFx;
  SurfaceFxTable surfaceFx;
  RawFile rawfile;
  StringTable stringTable;
  LeaderboardDef leaderboardDef;
  TracerDef tracerDef;
  VehicleDef vehDef;
  ReverbPreset reverbPresetDef;
  DopplerPreset dopplerPresetDef;
};

/* 7011 */
struct __declspec(align(8)) LevelLoad
{
  XZoneInfo info[24];
  unsigned __int64 sizeEstimate[24];
  char names[24][64];
  unsigned int numZones;
  unsigned int loadPhaseCount[3];
  unsigned int numPhases;
};

/* 7012 */
struct TransientAssetListData
{
  char data[98304];
};

/* 7013 */
struct XAssetPool<XModel,1>
{
  XAssetPoolEntry<XModel> *freeHead;
  XAssetPoolEntry<XModel> entries[1];
};

/* 7014 */
struct XAssetPool<Material,1>
{
  XAssetPoolEntry<Material> *freeHead;
  XAssetPoolEntry<Material> entries[1];
};

/* 7015 */
struct XAssetPool<GfxImage,1>
{
  XAssetPoolEntry<GfxImage> *freeHead;
  XAssetPoolEntry<GfxImage> entries[1];
};

/* 7016 */
struct XAssetPool<PhysPreset,1>
{
  XAssetPoolEntry<PhysPreset> *freeHead;
  XAssetPoolEntry<PhysPreset> entries[1];
};

/* 7017 */
struct XAssetPool<PhysCollmap,1>
{
  XAssetPoolEntry<PhysCollmap> *freeHead;
  XAssetPoolEntry<PhysCollmap> entries[1];
};

/* 7018 */
struct XAssetPool<XAnimParts,1>
{
  XAssetPoolEntry<XAnimParts> *freeHead;
  XAssetPoolEntry<XAnimParts> entries[1];
};

/* 7019 */
struct XAssetPool<XModelSurfs,1>
{
  XAssetPoolEntry<XModelSurfs> *freeHead;
  XAssetPoolEntry<XModelSurfs> entries[1];
};

/* 7020 */
struct XAssetPool<snd_alias_list_t,1>
{
  XAssetPoolEntry<snd_alias_list_t> *freeHead;
  XAssetPoolEntry<snd_alias_list_t> entries[1];
};

/* 7021 */
struct XAssetPool<SndCurve,1>
{
  XAssetPoolEntry<SndCurve> *freeHead;
  XAssetPoolEntry<SndCurve> entries[1];
};

/* 7022 */
struct XAssetPool<LoadedSound,1>
{
  XAssetPoolEntry<LoadedSound> *freeHead;
  XAssetPoolEntry<LoadedSound> entries[1];
};

/* 7023 */
struct XAssetPool<MapEnts,1>
{
  XAssetPoolEntry<MapEnts> *freeHead;
  XAssetPoolEntry<MapEnts> entries[1];
};

/* 7024 */
struct XAssetPool<GfxLightDef,1>
{
  XAssetPoolEntry<GfxLightDef> *freeHead;
  XAssetPoolEntry<GfxLightDef> entries[1];
};

/* 7025 */
struct XAssetPool<Font_s,1>
{
  XAssetPoolEntry<Font_s> *freeHead;
  XAssetPoolEntry<Font_s> entries[1];
};

/* 7026 */
struct XAssetPool<MenuList,1>
{
  XAssetPoolEntry<MenuList> *freeHead;
  XAssetPoolEntry<MenuList> entries[1];
};

/* 7027 */
struct XAssetPool<menuDef_t,1>
{
  XAssetPoolEntry<menuDef_t> *freeHead;
  XAssetPoolEntry<menuDef_t> entries[1];
};

/* 7028 */
struct XAssetPool<AnimationClass,1>
{
  XAssetPoolEntry<AnimationClass> *freeHead;
  XAssetPoolEntry<AnimationClass> entries[1];
};

/* 7029 */
struct XAssetPool<LocalizeEntry,1>
{
  XAssetPoolEntry<LocalizeEntry> *freeHead;
  XAssetPoolEntry<LocalizeEntry> entries[1];
};

/* 7030 */
struct XAssetPool<WeaponAttachment,1>
{
  XAssetPoolEntry<WeaponAttachment> *freeHead;
  XAssetPoolEntry<WeaponAttachment> entries[1];
};

/* 7031 */
struct XAssetPool<WeaponDef,1>
{
  XAssetPoolEntry<WeaponDef> *freeHead;
  XAssetPoolEntry<WeaponDef> entries[1];
};

/* 7032 */
struct XAssetPool<FxEffectDef,1>
{
  XAssetPoolEntry<FxEffectDef> *freeHead;
  XAssetPoolEntry<FxEffectDef> entries[1];
};

/* 7033 */
struct XAssetPool<FxImpactTable,1>
{
  XAssetPoolEntry<FxImpactTable> *freeHead;
  XAssetPoolEntry<FxImpactTable> entries[1];
};

/* 7034 */
struct XAssetPool<SurfaceFxTable,1>
{
  XAssetPoolEntry<SurfaceFxTable> *freeHead;
  XAssetPoolEntry<SurfaceFxTable> entries[1];
};

/* 7035 */
struct XAssetPool<RawFile,1>
{
  XAssetPoolEntry<RawFile> *freeHead;
  XAssetPoolEntry<RawFile> entries[1];
};

/* 7036 */
struct XAssetPool<ScriptFile,1>
{
  XAssetPoolEntry<ScriptFile> *freeHead;
  XAssetPoolEntry<ScriptFile> entries[1];
};

/* 7037 */
struct XAssetPool<StringTable,1>
{
  XAssetPoolEntry<StringTable> *freeHead;
  XAssetPoolEntry<StringTable> entries[1];
};

/* 7038 */
struct XAssetPool<LeaderboardDef,1>
{
  XAssetPoolEntry<LeaderboardDef> *freeHead;
  XAssetPoolEntry<LeaderboardDef> entries[1];
};

/* 7039 */
struct XAssetPool<StructuredDataDefSet,1>
{
  XAssetPoolEntry<StructuredDataDefSet> *freeHead;
  XAssetPoolEntry<StructuredDataDefSet> entries[1];
};

/* 7040 */
struct XAssetPool<TracerDef,1>
{
  XAssetPoolEntry<TracerDef> *freeHead;
  XAssetPoolEntry<TracerDef> entries[1];
};

/* 7041 */
struct XAssetPool<NetConstStrings,1>
{
  XAssetPoolEntry<NetConstStrings> *freeHead;
  XAssetPoolEntry<NetConstStrings> entries[1];
};

/* 7042 */
struct XAssetPool<ReverbPreset,1>
{
  XAssetPoolEntry<ReverbPreset> *freeHead;
  XAssetPoolEntry<ReverbPreset> entries[1];
};

/* 7043 */
struct XAssetPool<LuaFile,1>
{
  XAssetPoolEntry<LuaFile> *freeHead;
  XAssetPoolEntry<LuaFile> entries[1];
};

/* 7044 */
struct XAssetPool<ScriptableDef,1>
{
  XAssetPoolEntry<ScriptableDef> *freeHead;
  XAssetPoolEntry<ScriptableDef> entries[1];
};

/* 7045 */
struct XAssetPool<Colorization,1>
{
  XAssetPoolEntry<Colorization> *freeHead;
  XAssetPoolEntry<Colorization> entries[1];
};

/* 7046 */
struct XAssetPool<ColorizationSet,1>
{
  XAssetPoolEntry<ColorizationSet> *freeHead;
  XAssetPoolEntry<ColorizationSet> entries[1];
};

/* 7047 */
struct XAssetPool<ToneMapping,1>
{
  XAssetPoolEntry<ToneMapping> *freeHead;
  XAssetPoolEntry<ToneMapping> entries[1];
};

/* 7048 */
struct XAssetPool<VectorField,1>
{
  XAssetPoolEntry<VectorField> *freeHead;
  __declspec(align(16)) XAssetPoolEntry<VectorField> entries[1];
};

/* 7049 */
struct XAssetPool<DopplerPreset,1>
{
  XAssetPoolEntry<DopplerPreset> *freeHead;
  XAssetPoolEntry<DopplerPreset> entries[1];
};

/* 7050 */
struct XAssetPool<FxParticleSimAnimation,1>
{
  XAssetPoolEntry<FxParticleSimAnimation> *freeHead;
  XAssetPoolEntry<FxParticleSimAnimation> entries[1];
};

/* 7051 */
struct DB_MemoryTypeInfo
{
  unsigned int alignment;
  unsigned int physicalType;
  PMem_Source physicalSource;
};

/* 7052 */
struct GfxImageStreamData
{
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned int pixelSize;
};

/* 7053 */
struct DynEntityServer
{
  GfxPlacement pose;
  unsigned __int16 flags;
  unsigned __int16 health;
  int contents;
};

/* 7054 */
struct __declspec(align(8)) DB_LoadData
{
  DBFile *file;
  char *fileBuffer;
  unsigned __int64 readSize;
  unsigned __int64 completedReadSize;
  unsigned __int64 offset;
  char *start_in;
  _OVERLAPPED overlapped;
  unsigned int readError;
  db_z_stream_s stream;
  int readingResident;
};

/* 7055 */
struct XFile
{
  unsigned __int64 size;
  unsigned __int64 externalSize;
  unsigned __int64 blockSize[7];
};

/* 7056 */
struct DB_AuthHash
{
  char bytes[32];
};

/* 7057 */
struct DB_AuthSignature
{
  char bytes[256];
};

/* 7058 */
struct $51302E22177A815ECDB36367B447B72E
{
  char fastfileName[32];
  unsigned int reserved;
  DB_AuthHash masterBlockHashes[244];
};

/* 7059 */
struct DB_AuthHeader
{
  char magic[8];
  unsigned int reserved;
  DB_AuthHash subheaderHash;
  DB_AuthSignature signedSubheaderHash;
  $51302E22177A815ECDB36367B447B72E subheader;
};

/* 7060 */
struct DB_MasterBlock
{
  DB_AuthHash chunkHashes[256];
};

/* 7061 */
struct __declspec(align(8)) DB_AuthLoadGlob
{
  int isSecure;
  char expectedFastfileName[32];
  DB_AuthHeader header;
  char pad0[12];
  DB_MasterBlock masterBlock;
  unsigned int authedGroupCount;
  unsigned int authedChunkInGroupCount;
  db_z_stream_s stream;
  unsigned int copyBufferEnd;
  char pad1[4];
  char pad2[4];
  char copyBuffer[8192];
};

/* 7062 */
struct ltc_math_descriptor
{
  char *name;
  int bits_per_digit;
  int (__cdecl *init)(void **);
  int (__cdecl *init_copy)(void **, void *);
  void (__cdecl *deinit)(void *);
  int (__cdecl *neg)(void *, void *);
  int (__cdecl *copy)(void *, void *);
  int (__cdecl *set_int)(void *, unsigned int);
  unsigned int (__cdecl *get_int)(void *);
  unsigned int (__cdecl *get_digit)(void *, int);
  int (__cdecl *get_digit_count)(void *);
  int (__cdecl *compare)(void *, void *);
  int (__cdecl *compare_d)(void *, unsigned int);
  int (__cdecl *count_bits)(void *);
  int (__cdecl *count_lsb_bits)(void *);
  int (__cdecl *twoexpt)(void *, int);
  int (__cdecl *read_radix)(void *, const char *, int);
  int (__cdecl *write_radix)(void *, char *, int);
  unsigned int (__cdecl *unsigned_size)(void *);
  int (__cdecl *unsigned_write)(void *, char *);
  int (__cdecl *unsigned_read)(void *, char *, unsigned int);
  int (__cdecl *add)(void *, void *, void *);
  int (__cdecl *addi)(void *, unsigned int, void *);
  int (__cdecl *sub)(void *, void *, void *);
  int (__cdecl *subi)(void *, unsigned int, void *);
  int (__cdecl *mul)(void *, void *, void *);
  int (__cdecl *muli)(void *, unsigned int, void *);
  int (__cdecl *sqr)(void *, void *);
  int (__cdecl *mpdiv)(void *, void *, void *, void *);
  int (__cdecl *div_2)(void *, void *);
  int (__cdecl *modi)(void *, unsigned int, unsigned int *);
  int (__cdecl *gcd)(void *, void *, void *);
  int (__cdecl *lcm)(void *, void *, void *);
  int (__cdecl *mulmod)(void *, void *, void *, void *);
  int (__cdecl *sqrmod)(void *, void *, void *);
  int (__cdecl *invmod)(void *, void *, void *);
  int (__cdecl *montgomery_setup)(void *, void **);
  int (__cdecl *montgomery_normalization)(void *, void *);
  int (__cdecl *montgomery_reduce)(void *, void *, void *);
  void (__cdecl *montgomery_deinit)(void *);
  int (__cdecl *exptmod)(void *, void *, void *, void *);
  int (__cdecl *isprime)(void *, int *);
  int (__cdecl *ecc_ptmul)(void *, ecc_point *, ecc_point *, void *, int);
  int (__cdecl *ecc_ptadd)(ecc_point *, ecc_point *, ecc_point *, void *, void *);
  int (__cdecl *ecc_ptdbl)(ecc_point *, ecc_point *, void *, void *);
  int (__cdecl *ecc_map)(ecc_point *, void *, void *);
  int (__cdecl *ecc_mul2add)(ecc_point *, void *, ecc_point *, void *, ecc_point *, void *);
  int (__cdecl *rsa_keygen)(Prng_state *, int, int, int, Rsa_key *);
  int (__cdecl *rsa_me)(const char *, unsigned int, char *, unsigned int *, int, Rsa_key *);
};

/* 7063 */
struct PrintChannel
{
  char name[32];
  bool allowScript;
};

/* 7064 */
struct PrintChannelGlob
{
  PrintChannel openChannels[256];
  unsigned int filters[4][8];
};

/* 7065 */
struct ping_t
{
  netadr_s adr;
  int start;
  int time;
  char info[1024];
};

/* 7066 */
struct KeyState
{
  int down;
  int repeats;
  int binding;
};

/* 7067 */
struct PlayerKeyState
{
  field_t chatField;
  int chat_team;
  int overstrikeMode;
  int anyKeyDown;
  KeyState keys[256];
  LocSelInputState locSelInputState;
};

/* 7068 */
struct __declspec(align(8)) keyname_t
{
  const char *name;
  int keynum;
};

/* 7069 */
struct __declspec(align(4)) kbutton_t
{
  int down[2];
  unsigned int downtime;
  unsigned int msec;
  bool active;
  bool wasPressed;
};

/* 7070 */
struct GamepadVirtualAxisMapping
{
  GamepadPhysicalAxis physicalAxis;
  GamepadMapping mapType;
};

/* 7071 */
struct GpadAxesGlob
{
  int axesValues[6];
  GamepadVirtualAxisMapping virtualAxes[6];
};

/* 7072 */
struct StickToCodeMap
{
  GamepadPhysicalAxis physicalAxis;
  int posCode;
  int negCode;
};

/* 7073 */
struct MessageLine
{
  int messageIndex;
  int textBufPos;
  int textBufSize;
  int typingStartTime;
  int lastTypingSoundTime;
  int flags;
};

/* 7074 */
struct Message
{
  int startTime;
  int endTime;
};

/* 7075 */
struct MessageWindow
{
  MessageLine *lines;
  Message *messages;
  char *circularTextBuffer;
  int textBufSize;
  int lineCount;
  int padding;
  int scrollTime;
  int fadeIn;
  int fadeOut;
  int textBufPos;
  int firstLineIndex;
  int activeLineCount;
  int messageIndex;
};

/* 7076 */
struct MessageBuffer
{
  char gamemsgText[4][2048];
  MessageWindow gamemsgWindows[4];
  MessageLine gamemsgLines[4][12];
  Message gamemsgMessages[4][12];
};

/* 7077 */
struct Console
{
  char textTempLine[512];
  unsigned int lineOffset;
  int prevChannel;
  int fontHeight;
  int visibleLineCount;
  int visiblePixelWidth;
  float screenMin[2];
  float screenMax[2];
  MessageBuffer messageBuffer[1];
  float color[4];
};

/* 7078 */
struct __declspec(align(8)) AdditiveAnimInfo
{
  const char *rootName;
  weapAnimFiles_t additiveRoot;
  weapAnimFiles_t additiveChildStart;
  weapAnimFiles_t additiveChildEnd;
};

/* 7079 */
struct AnimBlendTimes
{
  weapAnimFiles_t animBlendOut;
  weapAnimFiles_t animBlendIn;
  float animBlendTimeOut;
  float animBlendTimeIn;
};

/* 7080 */
struct __declspec(align(8)) visField_t
{
  const char *name;
  const char *fallbackName;
  __int64 offset;
  int fieldType;
};

/* 7081 */
struct ClientViewParams
{
  float x;
  float y;
  float width;
  float height;
  float viewMultSD;
  float viewMultHD;
};

/* 7082 */
struct TestEffect
{
  char name[64];
  float pos[3];
  int time;
  int respawnTime;
};

/* 7083 */
struct __declspec(align(4)) vehicleEffects
{
  bool active;
  int lastAccessed;
  int entityNum;
  int nextDustFx;
  int nextSmokeFx;
  bool soundPlaying;
  float barrelVelocity;
  float barrelPos;
  int lastBarrelUpdateTime;
  char tag_engine_left;
  char tag_engine_right;
};

/* 7084 */
struct __cppobj __declspec(align(4)) ClientSideVisionAndFogSet : FogBase
{
  char name[64];
  float halfwayDist;
  float transitionTime;
  float color[3];
  float sunColor[3];
  unsigned __int16 stagedVisionSetList[16];
  char numStagedVisionSets;
};

/* 7085 */
struct ReverbDef
{
  char roomType[64];
  float dryLevel;
  float wetLevel;
  unsigned int fadeTime;
};

/* 7086 */
struct ZoneDef
{
  char name[64];
  unsigned __int16 reverbIndex;
  unsigned __int16 startOcclusionIndex;
  unsigned __int16 endOcclusionIndex;
  unsigned __int16 startFilterIndex;
  unsigned __int16 endFilterIndex;
  unsigned __int16 startMixIndex;
  unsigned __int16 endMixIndex;
  snd_alias_list_t *ambientStream;
  unsigned __int16 adsrIndex;
  unsigned __int16 startAdsrZoneIndex;
  unsigned __int16 endAdsrZoneIndex;
  unsigned __int16 ambientNameIndex;
};

/* 7087 */
struct AdsrZoneEntry
{
  const char *name;
  const char *weaponName;
  unsigned int weaponIdx;
  int adsrIdx;
};

/* 7088 */
struct NPCZoneDef
{
  unsigned __int16 startAdsrZoneIndex;
  unsigned __int16 endAdsrZoneIndex;
};

/* 7089 */
struct __declspec(align(8)) AmbientElement
{
  snd_alias_list_t *alias;
  float rangeMin;
  float rangeMax;
  float coneMin;
  float coneMax;
  int timeMin;
  int timeMax;
  float weight;
};

/* 7090 */
struct __declspec(align(8)) AmbientEventsDef
{
  AmbientElement *ambientElements;
  unsigned __int16 numElements;
};

/* 7091 */
struct TriggerParseInfo_t
{
  char reverbNames[256][64];
  char filterNames[256][64];
  char occludeNames[256][64];
  char mixNames[256][64];
  char adsrNames[256][64];
  char playerAdsrZoneNames[750][64];
  char npcAdsrZoneNames[256][64];
  char ambientEventNames[256][64];
};

/* 7092 */
struct __declspec(align(4)) $59835072FC2CD3936CE4A4C9F556010B
{
  char name[64];
  int index;
  bool useMouse;
};

/* 7093 */
struct __declspec(align(4)) RumbleGraph
{
  char graphName[64];
  float knots[16][2];
  unsigned __int16 knotCount;
};

/* 7094 */
struct RumbleInfo
{
  int rumbleNameIndex;
  float duration;
  float range;
  RumbleGraph *highRumbleGraph;
  RumbleGraph *lowRumbleGraph;
  int fadeWithDistance;
  int broadcast;
};

/* 7095 */
union $72C9462F36F972EB135EFB7899102031
{
  int entityNum;
  float pos[3];
};

/* 7096 */
struct __declspec(align(8)) ActiveRumble
{
  RumbleInfo *rumbleInfo;
  int startTime;
  bool loop;
  RumbleSourceType sourceType;
  char scale;
  $72C9462F36F972EB135EFB7899102031 source;
};

/* 7097 */
struct RumbleGlobals
{
  RumbleGraph graphs[64];
  RumbleInfo infos[32];
  ActiveRumble activeRumbles[32];
  float receiverPos[3];
  int receiverEntNum;
};

/* 7098 */
struct CompassActor
{
  int lastUpdate;
  float lastPos[3];
  float lastEnemyPos[3];
  float lastEnemyYaw;
  float lastVel;
  float lastYaw;
  int pingTime;
  int beginFadeTime;
  int beginRadarFadeTime;
  int beginVoiceFadeTime;
  int flags;
  unsigned int perks[2];
  bool hadPerkRedBlip;
  bool wasSighted;
  int ownerNum;
};

/* 7099 */
struct MotionTrackerDisplayPos
{
  float dist;
  float yaw;
  float displayYawMin;
  float displayYawMax;
  int beginFadeTime;
};

/* 7100 */
struct MotionTrackerState
{
  int on;
  int stateChangeTime;
  bool playedPingSoundThisSweep;
  float aspectRatio;
};

/* 7101 */
struct MotionTrackerPingMedia
{
  Material *friendly_blip;
  Material *enemy_blip;
};

/* 7102 */
struct MotionTrackerMedia
{
  int loadState;
  snd_alias_list_t *motionTrackerPing;
  snd_alias_list_t *motionTrackerPong;
  Material *motiontracker3d_bg;
  Material *motiontracker3d_sweep;
  MotionTrackerPingMedia pingMedia[2];
  FxEffectDef *fx;
};

/* 7103 */
union EntityCustomData
{
  void *sndNotifyData;
  unsigned __int16 entityData[2];
};

/* 7104 */
struct __declspec(align(8)) cg_hudelem_t
{
  float x;
  float y;
  float width;
  float height;
  char hudElemLabel[256];
  float labelWidth;
  char hudElemText[256];
  float textWidth;
  Font_s *font;
  float fontScale;
  float fontHeight;
  float color[4];
  int timeNow;
};

/* 7105 */
struct __declspec(align(4)) WaypointDrawArgs
{
  const float *worldPos;
  Material *iconMaterial;
  const float *color4;
  const char *label;
  float offsetY;
  Material *arrowMaterial;
  float arrowWidth;
  float arrowHeight;
  bool arrowForceFullAlpha;
  float arrowFadeDistance;
  bool rotateAtEdge;
  bool fadeAtEdge;
  bool drawOffscreenOnly;
  bool alwaysDrawIcon;
  bool pinToEdge;
  bool isConstantSize;
};

/* 7106 */
struct CG_GlassPieceChange
{
  char state;
  char impactDir;
  char impactPos[2];
};

/* 7107 */
struct __declspec(align(4)) CG_GlassData
{
  CG_GlassPiece glassPieces[1536];
  CG_GlassPieceChange glassChanges[1536];
  int soundsThisFrame;
  bool recievedInitialState;
};

/* 7108 */
struct __declspec(align(8)) DelayListInfo
{
  centity_s *head;
  centity_s *latest;
  int size;
};

/* 7109 */
struct CenterPrint
{
  int time;
  char text[1024];
  int priority;
};

/* 7110 */
struct OverheadFade
{
  int lastTime;
  int startTime;
  __int8 visible : 1;
  __int8 locTraceThisFrame : 1;
  __int8 locTraceHeadOrPelvis : 1;
  __int8 locAcceptHead : 1;
  __int8 locAcceptPelvis : 1;
  __int8 worldRejectHead : 1;
  __int8 worldRejectPelvis : 1;
  __int8 worldTraceHeadOrPelvis : 1;
  __int8 bboxAcceptHead : 1;
  __int8 fxRejectHead : 1;
  int lastHitNum;
};

/* 7111 */
struct OverheadFadeGlob
{
  int visList[1][36];
  int visCount[1];
  int locTracePriorVisIndex[1];
  __declspec(align(128)) workerTrace_t workerTrace;
};

/* 7112 */
struct CrosshairTrace_t
{
  int valid;
  int isFlashed;
  float start[3];
  float end[3];
  __declspec(align(128)) workerTrace_t workerTrace;
};

/* 7113 */
struct CompassPlaneMedia
{
  Material *friendly;
  Material *enemy;
};

/* 7114 */
struct CompassPlane
{
  int entityNum;
  int lastUpdateTime;
  float lastPos[3];
  float lastYaw;
  int ownerNum;
  CompassPlaneMedia planeMedia[2];
};

/* 7115 */
struct __declspec(align(4)) CompassTurret
{
  int entityNum;
  int lastUpdateTime;
  int firePingTime;
  int radarPingTime;
  float positionCurrent[3];
  float positionLastKnown[3];
  float yawCurrent;
  float yawLastKnown;
  bool isFriendly;
};

/* 7116 */
struct CompassMissile
{
  int entityNum;
  int lastUpdateTime;
  float pos[3];
  float yaw;
  int ownerNum;
};

/* 7117 */
struct __declspec(align(4)) CompassPortableRadar
{
  int entIndex;
  int nextPing;
  int pingIdx;
  bool isActive;
};

/* 7118 */
struct CompassPortableRadarPing
{
  float pos[3];
  int startTime;
  int duration;
  float radius;
  bool actorPinged[44];
  bool turretPinged[32];
};

/* 7119 */
struct __declspec(align(4)) CompassScrambler
{
  float pos[3];
  bool isActive;
};

/* 7120 */
struct CgEntCollWorld
{
  Bounds box;
  unsigned __int16 freeHead;
  CgEntCollSector sectors[1024];
};

/* 7121 */
struct CgEntCollNodeList
{
  CgEntCollNode nodes[2048];
};

/* 7122 */
struct __declspec(align(8)) ClientEntSound
{
  float origin[3];
  snd_alias_list_t *aliasList;
  float angles[3];
};

/* 7123 */
struct ClientEntReactiveSound
{
  float origin[3];
  float angles[3];
  snd_alias_list_t *aliasList;
  float radius;
  unsigned int nextTime;
};

/* 7124 */
struct ClientEntReactiveSoundSort
{
  float distToPlayer;
  int soundIndex;
  ClientEntReactiveSound *reactiveSound;
};

/* 7125 */
struct __declspec(align(8)) ClientEntIntervalSound
{
  float origin[3];
  float angles[3];
  snd_alias_list_t *aliasList;
  int delayMinMS;
  int delayMaxMS;
  unsigned int nextTime;
};

/* 7126 */
struct ClientExploder
{
  float origin[3];
  float angles[3];
  int delay;
  FxEffectDef *fxDef;
  FxEffect *fxEffect;
};

/* 7127 */
struct ClientExploderList
{
  char name[256];
  unsigned __int16 numExploders;
  ClientExploder exploders[256];
};

/* 7128 */
struct EffectDefMap
{
  char name[64];
  char filename[64];
};

/* 7129 */
struct CameraShake
{
  int time;
  float scale;
  float length;
  float radius;
  float src[3];
  float size;
  float rumbleScale;
};

/* 7130 */
struct CameraShakeSet
{
  CameraShake shakes[4];
  float phase;
};

/* 7131 */
struct CameraShakeRuntime
{
  float scalePitch;
  float scaleYaw;
  float scaleRoll;
  float frequencyPitch;
  float frequencyYaw;
  float frequencyRoll;
};

/* 7132 */
struct ScreenBlur
{
  BlurPriority priority;
  BlurTime time;
  int timeStart;
  int timeEnd;
  float start;
  float end;
  float radius;
};

/* 7133 */
struct DrawClipAmmoParams
{
  float width;
  float height;
  float xInc;
  float yInc;
  int bullet_rowCnt;
  Material **image;
};

/* 7134 */
struct SurfaceTypeSoundList
{
  char *surfaceSoundBase;
  snd_alias_list_t **soundAliasList;
};

/* 7135 */
struct OffhandUnderbarrelModeData
{
  bool offhandUnderbarrelTempDisabled;
  bool restoreInAltMode;
  bool restoreUseAlternateFlag;
};

/* 7136 */
struct pmoveHandler_t
{
  void (__cdecl *trace)(trace_t *, const float *, const float *, Bounds *, int, int, TraceData *);
  int (__cdecl *entinfo)(int, int, EntInfo *);
  int (__cdecl *entityOrigin)(LocalClientNum_t, int, float *);
  int (__cdecl *entityVelocity)(LocalClientNum_t, int, float *);
  int (__cdecl *entityWorldTagPosition)(LocalClientNum_t, int, scr_string_t, float *);
  void (__cdecl *playerEvent)(int, int);
  Weapon (__cdecl *playerTurret)(playerState_s *, LocalClientNum_t);
  entityState_s *(__cdecl *entityState)(LocalClientNum_t, int);
  void (__cdecl *botStuckCheck)(const float *, const float *, playerState_s *, float, int);
};

/* 7137 */
struct viewLerpWaypoint_s
{
  int iFrac;
  float fViewHeight;
  int iOffset;
};

/* 7138 */
struct MantleAnimTransition
{
  int animIndex[2];
  float height;
  float mantleInPitchClamp;
  float mantleOutPitchClamp;
};

/* 7139 */
struct __declspec(align(8)) animStringItem_t
{
  const char *string;
  int hash;
};

/* 7140 */
struct __declspec(align(8)) animConditionTable_t
{
  animScriptConditionTypes_t type;
  animStringItem_t *values;
  int numStringItems;
};

/* 7141 */
struct aimAnimValues_t
{
  float fTime1;
  float fTime2;
  float fTime3;
  float fTime4;
  float fTime6;
  float fTime7;
  float fTime8;
  float fTime9;
  float fStrength1;
  float fStrength2;
  float fStrength3;
  float fStrength4;
  float fStrength6;
  float fStrength7;
  float fStrength8;
  float fStrength9;
};

/* 7142 */
struct __declspec(align(8)) NetConstStringTypeData
{
  const char *assetParseString;
  const char *constStringTypeTag;
  XAssetType actualAssetType;
};

/* 7143 */
struct NetConstStringMapList
{
  NetConstStrings *ncs;
  NetConstStringMapList *next;
};

/* 7144 */
struct __declspec(align(8)) NetConstStringMap
{
  NetConstStringMapList *head;
  unsigned int ncsCount;
};

/* 7145 */
struct NetConstStringConfigStringTypeData
{
  ConfigString csIndex;
  unsigned int csMax;
};

/* 7146 */
struct __declspec(align(4)) ConstBaselineEntitiesData
{
  entityState_s ents[300];
  char rawBufferPadding;
};

/* 7147 */
struct hks::GenericChunkHeader
{
  unsigned __int64 m_flags;
};

/* 7148 */
struct __cppobj hks::ChunkHeader : hks::GenericChunkHeader
{
  hks::ChunkHeader *m_next;
};

/* 7149 */
struct hks::ChunkList
{
  hks::ChunkHeader m_prevToStart;
};

/* 7211 */
struct __declspec(align(8)) hks::CallStack
{
  hks::CallStack::ActivationRecord *m_records;
  hks::CallStack::ActivationRecord *m_lastrecord;
  hks::CallStack::ActivationRecord *m_current;
  hksInstruction *m_current_lua_pc;
  hksInstruction *m_hook_return_addr;
  int m_hook_level;
};

/* 7212 */
struct hks::ApiStack
{
  HksObject *top;
  HksObject *base;
  HksObject *alloc_top;
  HksObject *bottom;
};

/* 7174 */
union HksValue
{
  hks::cclosure *cClosure;
  hks::HksClosure *closure;
  hks::UserData *userData;
  hks::HashTable *table;
  hks::StructInst *tstruct;
  hks::InternString *str;
  lua_State *thread;
  void *ptr;
  float number;
  unsigned int native;
  int boolean;
};

/* 7155 */
struct HksObject
{
  unsigned int t;
  HksValue v;
};

/* 7215 */
struct hks::DebugHook
{
  void (__cdecl *m_callback)(lua_State *, lua_Debug *);
  int m_mask;
  int m_count;
  int m_counter;
  bool m_inuse;
  hksInstruction *m_prevPC;
};

/* 7150 */
struct __cppobj lua_State : hks::ChunkHeader
{
  hks::HksGlobal *m_global;
  hks::CallStack m_callStack;
  hks::ApiStack m_apistack;
  hks::UpValue *pending;
  HksObject globals;
  HksObject m_cEnv;
  hks::CallSite *m_callsites;
  int m_numberOfCCalls;
  void *m_context;
  hks::InternString *m_name;
  lua_State *m_nextState;
  lua_State *m_nextStateStack;
  lua_State::Status m_status;
  HksError m_error;
  hks::DebugHook m_debugHook;
};

/* 7151 */
struct hks::MemoryManager
{
  void *(__cdecl *m_allocator)(void *, void *, unsigned __int64, unsigned __int64);
  void *m_allocatorUd;
  hks::MemoryManager::ChunkColor m_chunkColor;
  unsigned __int64 m_used;
  unsigned __int64 m_highwatermark;
  hks::ChunkList m_allocationList;
  hks::ChunkList m_sweepList;
  hks::ChunkHeader *m_lastKeptChunk;
  lua_State *m_state;
  hks::ChunkList m_deletedList;
  int m_deleteMode;
  Hks_DeleteCheckingMode m_deleteCheckingMode;
};

/* 7152 */
struct hks::HksGcWeights
{
  int m_removeString;
  int m_finalizeUserdataNoMM;
  int m_finalizeUserdataGcMM;
  int m_cleanCoroutine;
  int m_removeWeak;
  int m_markObject;
  int m_traverseString;
  int m_traverseUserdata;
  int m_traverseCoroutine;
  int m_traverseWeakTable;
  int m_freeChunk;
  int m_sweepTraverse;
};

/* 7153 */
struct hks::ResumeData_Header
{
  HksObjectType m_type;
};

/* 7154 */
struct __cppobj hks::Metatable
{
};

/* 7156 */
struct hks::HashTable::Node
{
  HksObject m_key;
  HksObject m_value;
};

/* 7157 */
struct __cppobj hks::HashTable : hks::ChunkHeader
{
  hks::Metatable *m_meta;
  unsigned int m_version;
  unsigned int m_mask;
  hks::HashTable::Node *m_hashPart;
  HksObject *m_arrayPart;
  unsigned int m_arraySize;
  hks::HashTable::Node *m_freeNode;
};

/* 7158 */
struct __cppobj __declspec(align(8)) hks::InternString : hks::GenericChunkHeader
{
  unsigned __int64 m_lengthbits;
  unsigned int m_hash;
  char m_data[30];
};

/* 7159 */
struct __cppobj hks::cclosure : hks::ChunkHeader
{
  int (__cdecl *m_function)(lua_State *);
  hks::HashTable *m_env;
  __int16 m_numUpvalues;
  __int16 m_flags;
  hks::InternString *m_name;
  HksObject m_upvalues[1];
};

/* 7160 */
const struct hksInstruction
{
  unsigned int code;
};

/* 7161 */
struct hks::Method::Array<hksInstruction const >
{
  unsigned int size;
  hksInstruction *data;
};

/* 7162 */
struct hks::Method::Array<HksObject>
{
  unsigned int size;
  HksObject *data;
};

/* 7164 */
struct hks::Method::Array<hks::Method *>
{
  unsigned int size;
  hks::Method **data;
};

/* 7163 */
struct __cppobj hks::Method : hks::ChunkHeader
{
  unsigned __int16 num_upvals;
  unsigned __int16 m_numRegisters;
  char num_params;
  char m_flags;
  hks::Method::Array<hksInstruction const > instructions;
  hks::Method::Array<HksObject> constants;
  hks::Method::Array<hks::Method *> children;
  hks::Method::DebugInfo *m_debug;
};

/* 7165 */
struct hks::Method::Array<unsigned int>
{
  unsigned int size;
  unsigned int *data;
};

/* 7166 */
struct hks::Method::Array<hks::InternString *>
{
  unsigned int size;
  hks::InternString **data;
};

/* 7167 */
struct hks::Method::LocalInfo
{
  hks::InternString *name;
  int start_pc;
  int end_pc;
};

/* 7168 */
struct hks::Method::Array<hks::Method::LocalInfo>
{
  unsigned int size;
  hks::Method::LocalInfo *data;
};

/* 7169 */
struct hks::Method::DebugInfo
{
  unsigned int line_defined;
  unsigned int last_line_defined;
  hks::Method::Array<unsigned int> lineInfo;
  hks::Method::Array<hks::InternString *> upvalInfo;
  hks::InternString *source;
  hks::InternString *name;
  hks::Method::Array<hks::Method::LocalInfo> localInfo;
};

/* 7170 */
struct __unaligned __declspec(align(4)) hks::HksClosure::MethodCache
{
  HksObject *consts;
  hksInstruction *inst;
  unsigned __int16 m_numRegisters;
  char m_flags;
  char num_params;
};

/* 7171 */
struct __cppobj hks::UpValue : hks::ChunkHeader
{
  HksObject m_storage;
  HksObject *loc;
  hks::UpValue *m_next;
};

/* 7172 */
struct __cppobj hks::HksClosure : hks::ChunkHeader
{
  hks::Method *m_method;
  hks::HashTable *m_env;
  char m_mayHaveUpvalues;
  __unaligned __declspec(align(1)) hks::HksClosure::MethodCache m_cache;
  hks::UpValue *m_upvalues[1];
};

/* 7173 */
struct __cppobj hks::UserData : hks::ChunkHeader
{
  unsigned __int64 m_envAndSizeOffsetHighBits;
  unsigned __int64 m_metaAndSizeOffsetLowBits;
  char m_data[8];
};

/* 7175 */
struct __cppobj hks::StructInst : hks::ChunkHeader
{
  HksValue m_slotStorage[2];
};

/* 7176 */
struct hks::ResumeData_State
{
  hks::ResumeData_Header h;
  lua_State *m_state;
  hks::GCResumePhase m_phase;
  hks::UpValue *m_pending;
};

/* 7177 */
struct __declspec(align(8)) hks::ResumeData_Table
{
  hks::ResumeData_Header h;
  hks::HashTable *m_table;
  unsigned int m_arrayIndex;
  unsigned int m_hashIndex;
  int m_weakness;
};

/* 7178 */
struct __declspec(align(8)) hks::ResumeData_Closure
{
  hks::ResumeData_Header h;
  hks::HksClosure *m_closure;
  int m_index;
};

/* 7179 */
struct __declspec(align(8)) hks::ResumeData_CClosure
{
  hks::ResumeData_Header h;
  hks::cclosure *m_cclosure;
  int m_upvalueIndex;
};

/* 7180 */
struct hks::ResumeData_Userdata
{
  hks::ResumeData_Header h;
  hks::UserData *m_data;
};

/* 7181 */
struct __declspec(align(8)) hks::ResumeData_StructInst
{
  hks::ResumeData_Header h;
  hks::StructInst *m_struct;
  unsigned int m_slotIndex;
};

/* 7182 */
struct hks::ResumeData_GenericChunk
{
  hks::ResumeData_Header h;
  hks::GenericChunkHeader *m_chunk;
};

/* 7183 */
union hks::ResumeData_Entry
{
  hks::ResumeData_State State;
  hks::ResumeData_Table HashTable;
  hks::ResumeData_Closure Closure;
  hks::ResumeData_CClosure CClosure;
  hks::ResumeData_Userdata Userdata;
  hks::ResumeData_StructInst StructInst;
  hks::ResumeData_GenericChunk Chunk;
};

/* 7184 */
struct hks::GarbageCollector::ResumeStack
{
  hks::ResumeData_Entry *m_storage;
  unsigned int m_numEntries;
  unsigned int m_numAllocated;
};

/* 7185 */
struct hks::GarbageCollector::GreyStack
{
  HksObject *m_storage;
  unsigned int m_numEntries;
  unsigned int m_numAllocated;
};

/* 7186 */
struct hks::GarbageCollector::RemarkStack
{
  hks::HashTable **m_storage;
  unsigned int m_numAllocated;
  unsigned int m_numEntries;
};

/* 7187 */
struct hks::WeakStack_Entry
{
  int m_weakness;
  hks::HashTable *m_table;
};

/* 7188 */
struct hks::GarbageCollector::WeakStack
{
  hks::WeakStack_Entry *m_storage;
  unsigned int m_numEntries;
  unsigned int m_numAllocated;
};

/* 7189 */
struct hks::GarbageCollector
{
  int m_target;
  int m_stepsLeft;
  int m_stepLimit;
  hks::HksGcWeights m_costs;
  int m_unit;
  _SETJMP_FLOAT128 (*m_jumpPoint)[16];
  lua_State *m_mainState;
  lua_State *m_finalizerState;
  hks::MemoryManager *m_memory;
  int m_phase;
  hks::GarbageCollector::ResumeStack m_resumeStack;
  hks::GarbageCollector::GreyStack m_greyStack;
  hks::GarbageCollector::RemarkStack m_remarkStack;
  hks::GarbageCollector::WeakStack m_weakStack;
  int m_finalizing;
  HksObject m_safeTableValue;
  lua_State *m_startOfStateStackList;
  lua_State *m_endOfStateStackList;
  lua_State *m_currentState;
  HksObject m_safeValue;
  void *m_compiler;
  void *m_bytecodeReader;
  void *m_bytecodeWriter;
  int m_pauseMultiplier;
  int m_stepMultiplier;
  bool m_stopped;
  int (__cdecl *m_gcPolicy)(lua_State *);
  unsigned __int64 m_pauseTriggerMemoryUsage;
  int m_stepTriggerCountdown;
  unsigned int m_stringTableIndex;
  unsigned int m_stringTableSize;
  hks::UserData *m_lastBlackUD;
  hks::UserData *m_activeUD;
};

/* 7191 */
struct hks::StringPinner::Node
{
  hks::InternString *m_strings[32];
  hks::StringPinner::Node *m_prev;
};

/* 7190 */
struct hks::StringPinner
{
  lua_State *const m_state;
  hks::StringPinner *const m_prev;
  hks::InternString **m_nextStringsPlace;
  hks::StringPinner::Node m_firstNode;
  hks::StringPinner::Node *m_currentNode;
};

/* 7192 */
struct hks::StringTable
{
  hks::InternString **m_data;
  unsigned int m_count;
  unsigned int m_mask;
  hks::StringPinner *m_pinnedStrings;
};

/* 7193 */
struct __declspec(align(8)) hks::StructSlot
{
  hks::InternString *m_name;
  unsigned __int16 m_protoIndex;
  char m_type;
  hks::StructSlotType m_specialSlot;
  char m_slotIndex;
  char m_slotPosIndex;
};

/* 7194 */
struct hks::StructProto
{
  unsigned __int64 m_slotsSize;
  int m_hasMeta;
  int m_hasBacking;
  int m_isForward;
  unsigned __int16 m_protoIndex;
  hks::InternString *m_name;
  hks::StructSlot m_slots[1];
};

/* 7195 */
struct __declspec(align(8)) hks::ProtoList
{
  hks::StructProto **m_protoList;
  unsigned __int16 m_protoSize;
  unsigned __int16 m_protoAllocSize;
};

/* 7196 */
struct hks::StaticStringCache
{
  HksObject m_objects[41];
};

/* 7200 */
struct hks::DebugInstance::RuntimeProfilerStats
{
  int hksTime;
  int callbackTime;
  int gcTime;
  int cFinalizerTime;
  __int64 heapSize;
  __int64 num_newuserdata;
  __int64 num_pushstring;
};

/* 7197 */
struct hks::DebugInstance
{
  int m_savedObjects;
  int m_keepAliveObjects;
  lua_State *m_activeState;
  lua_State *m_mainState;
  hks::Debugger *m_owner;
  int m_DebuggerLevel;
  int stored_Hook_level;
  bool m_clearHook;
  hksInstruction *stored_Hook_return_addr;
  int m_debugStepLastLine;
  hks::DebugInstance *m_next;
  hksInstruction *m_activePC;
  int runtimeProfileSendBufferWritePosition;
  hks::DebugInstance::RuntimeProfilerStats runtimeProfileSendBuffer[30];
};

/* 7203 */
struct hks::BreakpointList
{
  hks::Breakpoint *m_list[128];
  hks::Debugger *m_parent;
  hks::Breakpoint *m_first;
};

/* 7198 */
struct __declspec(align(8)) hks::Debugger
{
  hks::DebuggerVtbl *vfptr;
  hksInstruction *m_entryPC;
  hks::Debugger::RunMode m_runMode;
  int m_targetCallstackLevel;
  lua_State *m_targetState;
  int m_stackLevelLineNumTracking[64];
  void *(__cdecl *m_allocatorFunction)(void *, void *, unsigned __int64, unsigned __int64);
  void *m_allocatorUserData;
  unsigned __int64 m_allocated;
  hks::BreakpointList m_breakpoints;
  hks::DebugInstance *m_head;
  lua_State *m_profilerState;
  int m_isDebugging;
  unsigned __int64 m_lastTime;
  int m_ToggleProfile;
};

/* 7199 */
const struct hks::Breakpoint
{
  char m_file[512];
  char m_expression[512];
  hks::Breakpoint *m_next;
  hks::Breakpoint *m_nextInChain;
  lua_State *m_coroutine;
  int m_targetHitCount;
  int m_hitCount;
  int m_line;
  int m_refCount;
  hks::Breakpoint::bpStates m_bpState;
  hks::Breakpoint::expressionTypes m_hitCountExpression;
};

/* 7201 */
union $59E955C8DCC55D6506D8B27DA9399AF8
{
  void (__cdecl *~Debugger)(hks::Debugger *this);
  void *(__cdecl *__vecDelDtor)(hks::Debugger *this, unsigned int);
};

/* 7202 */
struct hks::DebuggerVtbl
{
  void (__cdecl *OnRegisterCallBack)(hks::Debugger *this, hks::DebugInstance *);
  _BYTE gap8[16];
  void (__cdecl *OnTick)(hks::Debugger *this, hks::DebugInstance *);
  void (__cdecl *OnFileLoadCallback)(hks::Debugger *this, hks::DebugInstance *, const char *);
  void (__cdecl *OnLoadNamedStringCallback)(hks::Debugger *this, hks::DebugInstance *, const char *, unsigned __int64, const char *, char *, unsigned __int64);
  bool (__cdecl *OnPrintCallBack)(hks::Debugger *this, hks::DebugInstance *, int);
  hks::Debugger::CallBackActions (__cdecl *OnPausedCallBack)(hks::Debugger *this, hks::DebugInstance *, const char *, int);
  hks::Debugger::CallBackActions (__cdecl *OnSteppingCallBack)(hks::Debugger *this, hks::DebugInstance *, const char *, int);
  bool (__cdecl *OnCFunctionCallBack)(hks::Debugger *this, hks::DebugInstance *, hks::cclosure *);
  hks::Debugger::CallBackActions (__cdecl *OnBreakpointCallBack)(hks::Debugger *this, hks::DebugInstance *, hks::Breakpoint *);
  hks::Debugger::CallBackActions (__cdecl *OnLuaExceptionCallBack)(hks::Debugger *this, hks::DebugInstance *, const char *, int, const int, const char *);
  void (__cdecl *OnRuntimeProfileStatsCallBack)(hks::Debugger *this, hks::DebugInstance *, hks::DebugInstance::RuntimeProfilerStats *);
  void (__cdecl *OnMethodCreated)(hks::Debugger *this, hks::DebugInstance *, lua_State *, hks::Method *);
  void (__cdecl *OnMethodReleased)(hks::Debugger *this, hks::DebugInstance *, lua_State *, hks::Method *);
  hks::Debugger::CallBackActions (__cdecl *OnLuaAssertionCallBack)(hks::Debugger *this, hks::DebugInstance *, const char *, int, const char *);
  void (__cdecl *SendValidateBreakpoint)(hks::Debugger *this, hks::Breakpoint *, bool);
  void (__cdecl *Release)(hks::Debugger *this);
  $59E955C8DCC55D6506D8B27DA9399AF8 ___u16;
  int (__cdecl *isActive)(hks::Debugger *this);
};

/* 7204 */
struct __declspec(align(8)) hks::RuntimeProfileData::Stats
{
  unsigned __int64 hksTime;
  unsigned __int64 callbackTime;
  unsigned __int64 gcTime;
  unsigned __int64 cFinalizerTime;
  unsigned __int64 compilerTime;
  unsigned int hkssTimeSamples;
  unsigned int callbackTimeSamples;
  unsigned int gcTimeSamples;
  unsigned int compilerTimeSamples;
  unsigned int num_newuserdata;
  unsigned int num_tablerehash;
  unsigned int num_pushstring;
  unsigned int num_pushcfunction;
  unsigned int num_newtables;
};

/* 7205 */
struct hks::RuntimeProfileData
{
  __int64 stackDepth;
  __int64 callbackDepth;
  unsigned __int64 lastTimer;
  hks::RuntimeProfileData::Stats frameStats;
  unsigned __int64 gcStartTime;
  unsigned __int64 finalizerStartTime;
  unsigned __int64 compilerStartTime;
  unsigned __int64 compilerStartGCTime;
  unsigned __int64 compilerStartGCFinalizerTime;
  unsigned __int64 compilerCallbackStartTime;
  __int64 compilerDepth;
  void *outFile;
  lua_State *rootState;
};

/* 7206 */
struct HksCompilerSettings
{
  int m_emitStructCode;
  const char **m_stripNames;
  int m_emitGlobalMemoization;
  int _m_isHksGlobalMemoTestingMode;
  HksCompilerSettings::BytecodeSharingFormat m_bytecodeSharingFormat;
  HksCompilerSettings::IntLiteralOptions m_enableIntLiterals;
  int (__cdecl *m_debugMap)(const char *, int);
};

/* 7207 */
struct __cppobj LuaPlus::LuaState
{
};

/* 7208 */
struct LuaPlus::LuaObject
{
  LuaPlus::LuaState *m_state;
  HksObject m_object;
  LuaPlus::LuaObject *m_next;
  LuaPlus::LuaObject *m_prev;
};

/* 7209 */
struct __declspec(align(8)) hks::HksGlobal
{
  hks::MemoryManager m_memory;
  hks::GarbageCollector m_collector;
  hks::StringTable m_stringTable;
  HksBytecodeSharingMode m_bytecodeSharingMode;
  unsigned int m_tableVersionInitializer;
  HksObject m_registry;
  hks::ProtoList m_protoList;
  hks::HashTable *m_structProtoByName;
  hks::ChunkList m_userDataList;
  lua_State *m_root;
  hks::StaticStringCache m_staticStringCache;
  hks::DebugInstance *m_debugger;
  void *m_profiler;
  hks::RuntimeProfileData m_runProfilerData;
  HksCompilerSettings m_compilerSettings;
  int (__cdecl *m_panicFunction)(lua_State *);
  LuaPlus::LuaObject *m_luaplusObjectList;
  int m_heapAssertionFrequency;
  int m_heapAssertionCount;
  void (*m_logFunction)(lua_State *, const char *, ...);
  HksBytecodeEndianness m_bytecodeDumpEndianness;
};

/* 7210 */
struct hks::CallStack::ActivationRecord
{
  HksObject *m_base;
  hksInstruction *m_returnAddress;
  __int16 m_tailCallDepth;
  __int16 m_numVarargs;
  int m_numExpectedReturns;
};

/* 7213 */
struct __declspec(align(16)) hks::CallSite
{
  _SETJMP_FLOAT128 m_jumpBuffer[16];
  hks::CallSite *m_prev;
};

/* 7214 */
struct lua_Debug
{
  int event;
  const char *name;
  const char *namewhat;
  const char *what;
  const char *source;
  int currentline;
  int nups;
  int nparams;
  int ishksfunc;
  int linedefined;
  int lastlinedefined;
  char short_src[512];
  int callstack_level;
  int is_tail_call;
};

/* 7216 */
struct hks::VisitData_Header
{
  hks::VisitData_Header *m_prev;
};

/* 7217 */
struct hks::VisitData_Userdata
{
  hks::VisitData_Header h2;
  hks::ResumeData_Userdata m_data;
};

/* 7218 */
struct hks::VisitData_State
{
  hks::VisitData_Header h2;
  hks::ResumeData_State m_data;
};

/* 7219 */
struct hks::VisitData_CClosure
{
  hks::VisitData_Header h2;
  hks::ResumeData_CClosure m_data;
};

/* 7220 */
struct hks::VisitData_Table
{
  hks::VisitData_Header h2;
  hks::ResumeData_Table m_data;
};

/* 7221 */
struct hks::VisitData_StructInst
{
  hks::VisitData_Header h2;
  hks::ResumeData_StructInst m_data;
};

/* 7222 */
struct hks::VisitData_Closure
{
  hks::VisitData_Header h2;
  hks::ResumeData_Closure m_data;
};

/* 7223 */
struct hks::BytecodeWriter
{
  lua_State *const m_state;
  int (__cdecl *const m_writer)(lua_State *, const void *, unsigned __int64, void *);
  void *const m_writerData;
  const int m_stripLevel;
  int m_swapEndian;
  int m_status;
  hks::HashTable *m_prototypesTable;
  int m_seenPrototypes;
  hks::BytecodeWriter *m_gcPrev;
  unsigned __int64 m_offset;
};

/* 7224 */
struct hks::BytecodeReader
{
  lua_State *const m_state;
  hks::BytecodeReader *m_next;
  hks::BytecodeReader::Reader m_reader;
  unsigned int m_ccallDepth;
  const char *m_chunkName;
  hks::Method *m_method;
  HksCompilerSettings *m_compilerSettings;
  char m_formatVersion;
  int m_prototypesDataPlace;
};

/* 7225 */
struct hks::BytecodeReader::Reader
{
  hks::BytecodeReader *m_owner;
  lua_State *const m_state;
  const char *(__cdecl *const m_reader)(lua_State *, void *, unsigned __int64 *);
  void *const m_readerData;
  unsigned __int64 m_bytesRemaining;
  const char *m_bufferPos;
  hks::BytecodeReader::Reader::StreamState m_streamState;
  int m_endianSwap;
  unsigned int m_sizeTSize;
  char *m_stringbuffer;
  unsigned __int64 m_stringbuffersize;
  unsigned __int64 m_offset;
};

/* 7226 */
struct __declspec(align(8)) LuaPlus::LuaStackObject
{
  LuaPlus::LuaState *m_state;
  int m_stackIndex;
};

/* 7227 */
struct __declspec(align(8)) hks::HksOpcodeDesc
{
  hks::Opcode m_opcode;
  hks::HksArgMode m_argMode;
  const int m_useRA;
  hks::HksArgMask m_opb;
  hks::HksArgMask m_opc;
  const char *const m_name;
  const int m_makeR1;
  hks::HksArgR1UseRegister m_useR1;
  hks::Opcode m_r1Version;
};

/* 7228 */
struct __cppobj hks::_hks_rawsetslotv_translator<float>
{
};

/* 7229 */
struct __cppobj hks::_hks_rawsetslotv_translator<char const *>
{
};

/* 7230 */
struct __cppobj hks::_hks_rawgetslotv_translator<float>
{
};

/* 7231 */
struct __cppobj hks::_hks_rawgetslotv_translator<char const *>
{
};

/* 7232 */
struct __declspec(align(8)) HksStateSettings
{
  int m_gcPause;
  int m_gcStepMul;
  void *(__cdecl *m_allocator)(void *, void *, unsigned __int64, unsigned __int64);
  void *m_allocatorData;
  int (__cdecl *m_panicFunction)(lua_State *);
  void (*m_logFunction)(lua_State *, const char *, ...);
  const char *m_name;
  unsigned int m_initialRegistryArraySize;
  unsigned int m_initialRegistryHashSize;
  unsigned int m_initialGlobalSize;
  unsigned int m_initialStringTableSize;
  HksCompilerSettings m_compilerSettings;
  hks::Debugger *m_debugObject;
  int m_heapAssertionFrequency;
  int (__cdecl *m_gcPolicy)(lua_State *);
  HksBytecodeSharingMode m_bytecodeSharingMode;
  HksBytecodeEndianness m_bytecodeDumpEndianness;
  unsigned int m_gcWeakStackSize;
};

/* 7233 */
struct __declspec(align(8)) LuaPlus::LuaStateOutFile
{
  LuaPlus::LuaStateOutFileVtbl *vfptr;
  HksFile *m_file;
  bool m_fileOwner;
};

/* 7234 */
struct LuaPlus::LuaStateOutFileVtbl
{
  void *(__cdecl *__vecDelDtor)(LuaPlus::LuaStateOutFile *this, unsigned int);
  bool (__cdecl *Open)(LuaPlus::LuaStateOutFile *this, lua_State *, const char *);
  void (__cdecl *Close)(LuaPlus::LuaStateOutFile *this);
  void (*Print)(LuaPlus::LuaStateOutFile *this, const char *, ...);
};

/* 7235 */
struct HksFile
{
  _iobuf *m_file;
  void *(__cdecl *m_allocator)(void *, void *, unsigned __int64, unsigned __int64);
  void *m_allocatorUD;
};

/* 7236 */
struct LuaPlus::LuaStateAuto
{
  LuaPlus::LuaState *m_state;
};

/* 7237 */
struct __cppobj LuaPlus::LuaStateOwner : LuaPlus::LuaStateAuto
{
};

/* 7238 */
struct LPCD::LuaLightUserData
{
  const void *m_value;
};

/* 7239 */
struct LPCD::LuaUserData
{
  const void *m_value;
};

/* 7240 */
struct __cppobj LPCD::LuaNil
{
};

/* 7241 */
struct __cppobj LPCD::TypeWrapper<bool>
{
};

/* 7242 */
struct __cppobj LPCD::TypeWrapper<char>
{
};

/* 7243 */
struct __cppobj LPCD::TypeWrapper<unsigned char>
{
};

/* 7244 */
struct __cppobj LPCD::TypeWrapper<short>
{
};

/* 7245 */
struct __cppobj LPCD::TypeWrapper<unsigned short>
{
};

/* 7246 */
struct __cppobj LPCD::TypeWrapper<int>
{
};

/* 7247 */
struct __cppobj LPCD::TypeWrapper<unsigned int>
{
};

/* 7248 */
struct __cppobj LPCD::TypeWrapper<long>
{
};

/* 7249 */
struct __cppobj LPCD::TypeWrapper<unsigned long>
{
};

/* 7250 */
struct __cppobj LPCD::TypeWrapper<float>
{
};

/* 7251 */
struct __cppobj LPCD::TypeWrapper<double>
{
};

/* 7252 */
struct __cppobj LPCD::TypeWrapper<char const *>
{
};

/* 7253 */
struct __cppobj LPCD::TypeWrapper<lua_State *>
{
};

/* 7254 */
struct __cppobj LPCD::TypeWrapper<void *>
{
};

/* 7255 */
struct __cppobj LPCD::TypeWrapper<LuaPlus::LuaState *>
{
};

/* 7256 */
struct __cppobj LPCD::TypeWrapper<void>
{
};

/* 7257 */
struct __cppobj LPCD::TypeWrapper<LPCD::LuaNil>
{
};

/* 7258 */
struct __cppobj LPCD::TypeWrapper<int (__cdecl*)(lua_State *)>
{
};

/* 7259 */
struct __cppobj LPCD::ReturnSpecialization<void>
{
};

/* 7260 */
struct LuaPlus::LuaStack
{
  LuaPlus::LuaState *m_state;
};

/* 7261 */
struct __cppobj LPCD::TypeWrapper<LuaPlus::LuaStackObject>
{
};

/* 7262 */
struct __declspec(align(8)) LuaPlus::LuaAutoBlock
{
  lua_State *m_state;
  const int m_top;
};

/* 7263 */
struct __declspec(align(8)) LuaPlus::LuaPluaApiStackCheck
{
  lua_State *m_state;
  const int m_top;
};

/* 7264 */
struct LuaPlus::LuaRun
{
  int m_numResults;
  int m_alertStackPos;
};

/* 7265 */
struct __declspec(align(8)) LuaPlus::LuaCall
{
  LuaPlus::LuaObject m_functionObj;
  int m_numArgs;
};

/* 7266 */
struct __cppobj LPCD::TypeWrapper<LuaPlus::LuaObject>
{
};

/* 7267 */
struct __declspec(align(8)) LuaPlus::LuaTableIterator
{
  LuaPlus::LuaObject m_table;
  LuaPlus::LuaObject m_key;
  LuaPlus::LuaObject m_value;
  bool m_finished;
};

/* 7268 */
struct __declspec(align(4)) LuaPlus::LuaStackTableIterator
{
  LuaPlus::LuaStackObject m_tableObject;
  int m_initialStackIndex;
  const bool m_autoManageStack;
};

/* 7269 */
struct hks::DebugInstance_restorePC
{
  lua_State *m_luaState;
  int m_callstackLevel;
  hksInstruction *m_savedPc;
};

/* 7270 */
struct __cppobj hks::_hks_rawsetslotv_translator<void const *>
{
};

/* 7271 */
struct luaL_Reg
{
  const char *name;
  int (__cdecl *func)(lua_State *);
};

/* 7272 */
struct hks::Parser::OperatorPriorityDesc
{
  char left;
  char right;
};

/* 7273 */
struct __declspec(align(8)) hks::dlmalloc::malloc_params
{
  volatile unsigned __int64 magic;
  unsigned __int64 page_size;
  unsigned __int64 granularity;
  unsigned __int64 mmap_threshold;
  unsigned __int64 trim_threshold;
  unsigned int default_mflags;
};

/* 7274 */
struct hks::TrivialHash::TokenData
{
  int m_id;
  char m_str[11];
  char m_size;
};

/* 7275 */
struct hks::Debugger_manageEntryPC
{
  hks::Debugger *m_debugger;
};

/* 7276 */
struct __declspec(align(8)) hks::netTransport
{
  hks::netTransportVtbl *vfptr;
  hks::Debugger *m_parent;
  hks::netTransport::Status m_status;
  char *m_recvBuffer;
  unsigned __int64 m_recvBufferSize;
  bool m_haveDataOnSock;
};

/* 7277 */
struct hks::netTransportVtbl
{
  void *(__cdecl *__vecDelDtor)(hks::netTransport *this, unsigned int);
  int (__cdecl *Receive)(hks::netTransport *this, unsigned __int64 *, char **);
  int (__cdecl *Send)(hks::netTransport *this, unsigned __int64, const char *);
  int (__cdecl *Poll)(hks::netTransport *this, int);
  int (__cdecl *CheckForNewClient)(hks::netTransport *this);
  void (__cdecl *Shutdown)(hks::netTransport *this);
  int (__cdecl *Disconnect)(hks::netTransport *this);
  int (__cdecl *StartNetworking)(hks::netTransport *this);
};

/* 7278 */
struct hks::netTransport::packetHeader
{
  unsigned __int64 m_sentinel;
  __int64 m_length;
};

/* 7279 */
union hks::ui64layout
{
  unsigned __int64 ui64;
  unsigned int ui32[2];
};

/* 7280 */
struct __cppobj hks::netTransportTCPIP : hks::netTransport
{
  unsigned __int64 m_sock;
  int m_port;
  int m_errorCode;
};

/* 7281 */
struct LuaPlus::LuaFunction<void>
{
  LuaPlus::LuaObject m_functionObj;
};

/* 7282 */
struct LuaPlus::KeyValue
{
  LuaPlus::LuaObject key;
  LuaPlus::LuaObject value;
};

/* 7283 */
struct LuaPlus::SimpleList<LuaPlus::KeyValue>::CNode
{
  LuaPlus::SimpleList<LuaPlus::KeyValue>::CNode *m_pNext;
  LuaPlus::SimpleList<LuaPlus::KeyValue>::CNode *m_pPrev;
  LuaPlus::KeyValue m_element;
};

/* 7284 */
struct LuaPlus::SimpleList<LuaPlus::KeyValue>
{
  LuaPlus::SimpleList<LuaPlus::KeyValue>::CNode *m_pHead;
  LuaPlus::SimpleList<LuaPlus::KeyValue>::CNode *m_pTail;
};

/* 7285 */
struct hks::dlmalloc::malloc_chunk
{
  unsigned __int64 prev_foot;
  unsigned __int64 head;
  hks::dlmalloc::malloc_chunk *fd;
  hks::dlmalloc::malloc_chunk *bk;
};

/* 7286 */
struct __declspec(align(8)) hks::dlmalloc::malloc_tree_chunk
{
  unsigned __int64 prev_foot;
  unsigned __int64 head;
  hks::dlmalloc::malloc_tree_chunk *fd;
  hks::dlmalloc::malloc_tree_chunk *bk;
  hks::dlmalloc::malloc_tree_chunk *child[2];
  hks::dlmalloc::malloc_tree_chunk *parent;
  unsigned int index;
};

/* 7287 */
struct __declspec(align(8)) hks::dlmalloc::malloc_segment
{
  char *base;
  unsigned __int64 size;
  hks::dlmalloc::malloc_segment *next;
  unsigned int sflags;
};

/* 7288 */
struct hks::dlmalloc::malloc_state
{
  unsigned int smallmap;
  unsigned int treemap;
  unsigned __int64 dvsize;
  unsigned __int64 topsize;
  char *least_addr;
  hks::dlmalloc::malloc_chunk *dv;
  hks::dlmalloc::malloc_chunk *top;
  unsigned __int64 trim_check;
  unsigned __int64 release_checks;
  unsigned __int64 magic;
  hks::dlmalloc::malloc_chunk *smallbins[66];
  hks::dlmalloc::malloc_tree_chunk *treebins[32];
  unsigned __int64 footprint;
  unsigned __int64 max_footprint;
  unsigned int mflags;
  hks::dlmalloc::malloc_segment seg;
  void *(__cdecl *hksAllocator)(void *, void *, unsigned __int64, unsigned __int64);
  void *hksAllocatorUserdata;
  void *hksBase;
  unsigned __int64 hksCurrentSize;
  unsigned __int64 hks_size;
  unsigned __int64 (__cdecl *hksOutOfMemory)(void *, unsigned __int64);
  unsigned int hksLowMemoryWarningPercent;
  void (__cdecl *hksLowMemoryWarn)(void *, unsigned __int64, unsigned __int64);
};

/* 7289 */
struct HksFixedHeapSettings
{
  unsigned __int64 m_size;
  void *(__cdecl *m_allocator)(void *, void *, unsigned __int64, unsigned __int64);
  void *m_userdata;
  unsigned __int64 (__cdecl *m_outofmemory)(void *, unsigned __int64);
  unsigned int m_lowMemoryWarningPercent;
  void (__cdecl *m_lowMemoryWarn)(void *, unsigned __int64, unsigned __int64);
};

/* 7290 */
struct __declspec(align(8)) hks::ApiStackCheck
{
  lua_State *m_state;
  int m_delta1;
  int m_delta2;
  int m_top;
};

/* 7291 */
struct hks::WithBalancedStack
{
  lua_State *m_state;
  const int m_top;
  HksError m_error;
};

/* 7292 */
struct hks::LookaheadReader
{
  lua_State *const m_state;
  const char *(__cdecl *const m_reader)(lua_State *, void *, unsigned __int64 *);
  void *const m_userData;
  int m_read;
  const char *m_lastReadData;
  unsigned __int64 m_lastReadSize;
};

/* 7293 */
union $6D15D867BBEF99A6DE04BA3EBBEE680F
{
  float m_number;
  hks::InternString *m_string;
  unsigned __int64 m_literalInt;
};

/* 7294 */
struct hks::CompilerToken
{
  int m_id;
  $6D15D867BBEF99A6DE04BA3EBBEE680F ___u1;
};

/* 7295 */
struct hks::HksCharacterBuffer
{
  lua_State *const m_state;
  char *m_buffer;
  unsigned __int64 m_bufferSize;
  unsigned __int64 m_dataLen;
};

/* 7296 */
struct __cppobj hks::CompilerTokens
{
};

/* 7297 */
struct __declspec(align(4)) hks::CompilerReader
{
  lua_State *const m_state;
  const char *(__cdecl *const m_reader)(lua_State *, void *, unsigned __int64 *);
  void *const m_userData;
  unsigned __int64 m_bytesRemaining;
  const char *m_bufferPos;
  hks::CompilerReader::StreamState m_streamState;
  char m_currentByte;
  char m_lastByte;
};

/* 7298 */
struct hks::CompilerStateInterface
{
  hks::CompilerStateInterfaceVtbl *vfptr;
};

/* 7299 */
struct __cppobj hks::CompilerLexer : hks::CompilerTokens
{
  lua_State *const m_state;
  hks::HksCharacterBuffer m_currentBuffer;
  hks::CompilerReader m_reader;
  unsigned int m_lineNumber;
  unsigned int m_lastLineNumber;
  hks::CompilerToken m_curToken;
  hks::CompilerToken m_nextToken;
  const char *const m_sourceName;
  hks::CompilerStateInterface *const m_compilerState;
  char m_localeDecPoint;
  hks::CompilerLexer::TextModes m_textMode;
};

/* 7300 */
struct hks::CompilerStateInterfaceVtbl
{
  void *(__cdecl *__vecDelDtor)(hks::CompilerStateInterface *this, unsigned int);
  _BYTE gap8[8];
  void (__cdecl *signalError)(hks::CompilerStateInterface *this, const char *, hks::CompilerToken *);
  unsigned int (__cdecl *getCurrentLine)(hks::CompilerStateInterface *this);
  hks::InternString *(__cdecl *getSourceName)(hks::CompilerStateInterface *this);
  unsigned int (__cdecl *getLastLine)(hks::CompilerStateInterface *this);
  void (__cdecl *setLexer)(hks::CompilerStateInterface *this, hks::CompilerLexer *);
  hks::CompilerToken *(__cdecl *getCurrentToken)(hks::CompilerStateInterface *this);
  hks::CompilerLexer *(__cdecl *getLexer)(hks::CompilerStateInterface *this);
};

/* 7301 */
struct hks::CompilerParseAcceptor
{
  hks::CompilerParseAcceptorVtbl *vfptr;
};

/* 7302 */
struct hks::CompilerParseAcceptorVtbl
{
  void *(__cdecl *__vecDelDtor)(hks::CompilerParseAcceptor *this, unsigned int);
  _BYTE gap8[144];
  void (__cdecl *onForStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForBody)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForBodyStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForBodyEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericStart)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onForNumericEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericIterator)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onForNumericInitValueStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericInitValueEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericLimitValueStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericLimitValueEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericStepValueStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericStepValueEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericDefaultStep)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForListStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForListEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForListIteratorsStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForListIteratorsEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForListIterator)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onForListIterSourceStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForListIterSourceEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onRepeatStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onRepeatEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onRepeatBodyStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onRepeatBodyEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onRepeatConditionalStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onRepeatConditionalEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onFunctionFirstName)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onFunctionNameField)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onFunctionNeedsSelf)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onFunctionArglistStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionArglistEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionParam)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onFunctionParamVararg)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionArglistEmpty)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionBodyStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionBodyEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionCall)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onLocalFunctionStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onLocalFunctionName)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onLocalFunctionEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onLocalDefStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onLocalDefEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onLocalDefined)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onLocalDefAssignmentStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onLocalDefAssignmentEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onLocalDefNoAssignment)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onReturnEmpty)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onReturnListStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onReturnListEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onBreak)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onPrefixSubExpressionStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onPrefixSubExpressionEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onPrefixIdent)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onFieldSeparator)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onField)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onIndexStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onIndexEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionArgumentsStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionArgumentsEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onFunctionArgumentsEmpty)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionArgumentsTable)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionArgumentsLiteral)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onFunctionArgumentsListStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionArgumentsListEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionBodystatStart)(hks::CompilerParseAcceptor *this, const int, const unsigned int);
  void (__cdecl *onFunctionBodystatEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onFunctionNameParsed)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onConstructorStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onConstructorEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onConstructorNextField)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onConstructorListFieldStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onConstructorListFieldEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onRecordFieldStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onRecordFieldEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onRecordFieldIdent)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onRecordFieldAssignment)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionNumber)(hks::CompilerParseAcceptor *this, const float);
  void (__cdecl *onExpressionString)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onExpressionIntLiteral)(hks::CompilerParseAcceptor *this, const unsigned __int64, const int);
  void (__cdecl *onExpressionNil)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionTrue)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionFalse)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionDots)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionListNext)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onSingleExpressionStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onSingleExpressionEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onSubexpressionStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onUnaryOperatorStart)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onUnaryOperatorEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onInfixOperatorStart)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onInfixOperatorEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onSubexpressionEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionIndexStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onExpressionIndexEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onPrimaryExpressionStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onPrimaryExpressionEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onSelfCall)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onAssignmentStart)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onAssignmentEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onAssignmentNextStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onAssignmentNextEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onAssignmentBodyStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onAssignmentBodyEnd)(hks::CompilerParseAcceptor *this, const unsigned int);
  void (__cdecl *onStatementStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onStatementEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onSimpleStatementStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onSimpleStatementEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onSimpleStatementFuncall)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onConditionalStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onConditionalEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onDeleteStart)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onDeleteExpression)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onDeleteEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onForNumericIteratorTyped)(hks::CompilerParseAcceptor *this, hks::InternString *, hks::InternString *);
  void (__cdecl *onForListIteratorTyped)(hks::CompilerParseAcceptor *this, hks::InternString *, hks::InternString *);
  void (__cdecl *onFunctionParamTyped)(hks::CompilerParseAcceptor *this, hks::InternString *, hks::InternString *);
  void (__cdecl *onLocalDefinedTyped)(hks::CompilerParseAcceptor *this, hks::InternString *, hks::InternString *);
  void (__cdecl *onDefstruct)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onDefstructBacktable)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onDefstructMetaslot)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onDefstructDefSlot)(hks::CompilerParseAcceptor *this, hks::InternString *, hks::InternString *);
  void (__cdecl *onDefstructEnd)(hks::CompilerParseAcceptor *this);
  void (__cdecl *onMkStructStart)(hks::CompilerParseAcceptor *this, hks::InternString *);
  void (__cdecl *onMkStructEnd)(hks::CompilerParseAcceptor *this);
  hks::Method *(__cdecl *getCompiledFunction)(hks::CompilerParseAcceptor *this);
  hks::CompilerStateInterface *(__cdecl *setStateInterface)(hks::CompilerParseAcceptor *this, hks::CompilerStateInterface *);
};

/* 7303 */
struct __cppobj hks::BinOperatorEnum
{
};

/* 7304 */
struct __cppobj hks::UnOperatorEnum
{
};

/* 7311 */
struct hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>::Node
{
  unsigned __int64 m_bufferStorage[136];
  hks::CodeGenerator::ConstructorState *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>::Node *m_prevNode;
};

/* 7312 */
struct hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>::Node *m_currentNode;
  hks::CodeGenerator::ConstructorState *m_bufferCurrentPlace;
  hks::CodeGenerator::ConstructorState *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7313 */
struct __cppobj hks::HksDynamicDestructVector<hks::CodeGenerator::ConstructorState,4,2> : hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>
{
};

/* 7315 */
struct hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>::Node
{
  unsigned __int64 m_bufferStorage[8];
  hks::CodeGenerator::NamePart *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>::Node *m_prevNode;
};

/* 7316 */
struct hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>::Node *m_currentNode;
  hks::CodeGenerator::NamePart *m_bufferCurrentPlace;
  hks::CodeGenerator::NamePart *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7363 */
struct hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>::Node
{
  unsigned __int64 m_bufferStorage[3848];
  hks::CodeGenerator::FunctionGenerationState *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>::Node *m_prevNode;
};

/* 7364 */
struct hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>::Node *m_currentNode;
  hks::CodeGenerator::FunctionGenerationState *m_bufferCurrentPlace;
  hks::CodeGenerator::FunctionGenerationState *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7365 */
struct __cppobj hks::HksDynamicDestructVector<hks::CodeGenerator::FunctionGenerationState,4,4> : hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>
{
};

/* 7305 */
struct __cppobj hks::CodeGenerator : hks::CompilerParseAcceptor, hks::BinOperatorEnum, hks::UnOperatorEnum
{
  _BYTE gap8[1];
  lua_State *const m_state;
  hks::CodeGenerator *m_next;
  hks::CompilerStateInterface *m_stateInterface;
  HksCompilerSettings m_settings;
  hks::HksDynamicDestructVector<hks::CodeGenerator::ConstructorState,4,2> m_tableConstructors;
  hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2> m_functionNameStack;
  hks::HksDynamicDestructVector<hks::CodeGenerator::FunctionGenerationState,4,4> m_fungenStack;
  int m_assignmentSkipStore;
  unsigned int m_assignmentNumExpressions;
  hks::Method *m_parseResult;
  hks::StructProto m_structProto;
  hks::StructSlot m_dummySlots[223];
  hks::StructProto *m_mkStructProto;
};

/* 7306 */
struct $954E6201672D19F0EC7F6E62FED5DF53
{
  int m_info;
  int m_aux;
  hks::StructProto *m_proto;
  HksObject m_structIndex;
  hks::CodeGenerator::IntrinsicType m_intrinsicType;
  unsigned int m_a;
  unsigned int m_b;
  unsigned int m_c;
};

/* 7307 */
union $5ED970DBC86B3F62F54635EAFA17FE47
{
  $954E6201672D19F0EC7F6E62FED5DF53 d;
  float m_numericValue;
};

/* 7308 */
struct hks::HksStaticVector<unsigned char,16>
{
  unsigned __int64 m_dataStorage[2];
  char *m_data;
  char *m_currentPosition;
};

/* 7309 */
struct hks::CodeGenerator::ExpDescription
{
  hks::CodeGenerator::ExpressionKind m_kind;
  $5ED970DBC86B3F62F54635EAFA17FE47 m_data;
  int m_trueExitsJumpList;
  int m_falseExitsJumpList;
  hks::HksStaticVector<unsigned char,16> m_structLookupChain;
  HksObjectType m_inferredType;
  hks::StructProto *m_inferredProto;
};

/* 7310 */
struct hks::CodeGenerator::ConstructorState
{
  hks::CodeGenerator::ExpDescription m_lastListItem;
  hks::CodeGenerator::ExpDescription *m_tableExp;
  unsigned int m_recordSize;
  unsigned int m_arraySize;
  unsigned int m_pendingArrayStores;
  unsigned int m_recordStartRegisters;
  unsigned int m_recordKeyRegister;
  hks::CodeGenerator::ExpDescription m_recordKey;
  unsigned int m_newtableInstruction;
  hks::StructProto *m_structProto;
};

/* 7314 */
struct __declspec(align(8)) hks::CodeGenerator::NamePart
{
  hks::InternString *m_name;
  hks::CodeGenerator::NamePart::Type m_type;
};

/* 7317 */
struct hks::HksDynamicVector<HksObject,32,2>::Node
{
  unsigned __int64 m_bufferStorage[64];
  HksObject *m_buffer;
  hks::HksDynamicVector<HksObject,32,2>::Node *m_nextNode;
  hks::HksDynamicVector<HksObject,32,2>::Node *m_prevNode;
};

/* 7318 */
struct hks::HksDynamicVector<HksObject,32,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<HksObject,32,2>::Node m_stackNode;
  hks::HksDynamicVector<HksObject,32,2>::Node *m_firstNode;
  hks::HksDynamicVector<HksObject,32,2>::Node *m_currentNode;
  HksObject *m_bufferCurrentPlace;
  HksObject *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7319 */
struct __declspec(align(4)) hks::CodeGenerator::BlockState
{
  int m_breakList;
  int m_hasUpvals;
  int m_isBreakable;
  unsigned __int16 m_numActVars;
};

/* 7320 */
struct hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>::Node
{
  unsigned __int64 m_bufferStorage[32];
  hks::CodeGenerator::BlockState *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>::Node *m_prevNode;
};

/* 7321 */
struct hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>::Node *m_currentNode;
  hks::CodeGenerator::BlockState *m_bufferCurrentPlace;
  hks::CodeGenerator::BlockState *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7322 */
struct __cppobj hks::HksDynamicDestructVector<hks::CodeGenerator::BlockState,16,2> : hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>
{
};

/* 7323 */
struct hks::HksDynamicVector<hksInstruction,256,2>::Node
{
  unsigned __int64 m_bufferStorage[128];
  hksInstruction *m_buffer;
  hks::HksDynamicVector<hksInstruction,256,2>::Node *m_nextNode;
  hks::HksDynamicVector<hksInstruction,256,2>::Node *m_prevNode;
};

/* 7324 */
struct hks::HksDynamicVector<hksInstruction,256,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hksInstruction,256,2>::Node m_stackNode;
  hks::HksDynamicVector<hksInstruction,256,2>::Node *m_firstNode;
  hks::HksDynamicVector<hksInstruction,256,2>::Node *m_currentNode;
  hksInstruction *m_bufferCurrentPlace;
  hksInstruction *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7325 */
struct hks::HksDynamicVector<unsigned int,256,2>::Node
{
  unsigned __int64 m_bufferStorage[128];
  unsigned int *m_buffer;
  hks::HksDynamicVector<unsigned int,256,2>::Node *m_nextNode;
  hks::HksDynamicVector<unsigned int,256,2>::Node *m_prevNode;
};

/* 7326 */
struct hks::HksDynamicVector<unsigned int,256,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<unsigned int,256,2>::Node m_stackNode;
  hks::HksDynamicVector<unsigned int,256,2>::Node *m_firstNode;
  hks::HksDynamicVector<unsigned int,256,2>::Node *m_currentNode;
  unsigned int *m_bufferCurrentPlace;
  unsigned int *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7327 */
struct hks::HksDynamicVector<hks::Method *,8,2>::Node
{
  unsigned __int64 m_bufferStorage[8];
  hks::Method **m_buffer;
  hks::HksDynamicVector<hks::Method *,8,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::Method *,8,2>::Node *m_prevNode;
};

/* 7328 */
struct hks::HksDynamicVector<hks::Method *,8,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::Method *,8,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::Method *,8,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::Method *,8,2>::Node *m_currentNode;
  hks::Method **m_bufferCurrentPlace;
  hks::Method **m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7329 */
struct hks::HksDynamicVector<hks::Method::LocalInfo,16,2>::Node
{
  unsigned __int64 m_bufferStorage[32];
  hks::Method::LocalInfo *m_buffer;
  hks::HksDynamicVector<hks::Method::LocalInfo,16,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::Method::LocalInfo,16,2>::Node *m_prevNode;
};

/* 7330 */
struct hks::HksDynamicVector<hks::Method::LocalInfo,16,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::Method::LocalInfo,16,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::Method::LocalInfo,16,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::Method::LocalInfo,16,2>::Node *m_currentNode;
  hks::Method::LocalInfo *m_bufferCurrentPlace;
  hks::Method::LocalInfo *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7331 */
struct __cppobj hks::HksDynamicDestructVector<hks::Method::LocalInfo,16,2> : hks::HksDynamicVector<hks::Method::LocalInfo,16,2>
{
};

/* 7332 */
struct hks::HksDynamicVector<unsigned short,16,2>::Node
{
  unsigned __int64 m_bufferStorage[4];
  unsigned __int16 *m_buffer;
  hks::HksDynamicVector<unsigned short,16,2>::Node *m_nextNode;
  hks::HksDynamicVector<unsigned short,16,2>::Node *m_prevNode;
};

/* 7333 */
struct hks::HksDynamicVector<unsigned short,16,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<unsigned short,16,2>::Node m_stackNode;
  hks::HksDynamicVector<unsigned short,16,2>::Node *m_firstNode;
  hks::HksDynamicVector<unsigned short,16,2>::Node *m_currentNode;
  unsigned __int16 *m_bufferCurrentPlace;
  unsigned __int16 *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7334 */
struct hks::CodeGenerator::UpvalueDescription
{
  hks::InternString *m_name;
  unsigned int m_index;
  int m_isLocal;
};

/* 7335 */
struct hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>::Node
{
  unsigned __int64 m_bufferStorage[16];
  hks::CodeGenerator::UpvalueDescription *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>::Node *m_prevNode;
};

/* 7336 */
struct hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>::Node *m_currentNode;
  hks::CodeGenerator::UpvalueDescription *m_bufferCurrentPlace;
  hks::CodeGenerator::UpvalueDescription *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7337 */
struct __cppobj hks::HksDynamicDestructVector<hks::CodeGenerator::UpvalueDescription,8,2> : hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>
{
};

/* 7338 */
struct __declspec(align(8)) hks::CodeGenerator::FunctionGenerationState::TypeInfo
{
  HksObjectType m_type;
  hks::StructProto *m_proto;
  int m_isStaticType;
};

/* 7339 */
struct hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>::Node
{
  unsigned __int64 m_bufferStorage[48];
  hks::CodeGenerator::FunctionGenerationState::TypeInfo *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>::Node *m_prevNode;
};

/* 7340 */
struct hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>::Node *m_currentNode;
  hks::CodeGenerator::FunctionGenerationState::TypeInfo *m_bufferCurrentPlace;
  hks::CodeGenerator::FunctionGenerationState::TypeInfo *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7341 */
struct hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>::Node
{
  unsigned __int64 m_bufferStorage[56];
  hks::CodeGenerator::ExpDescription *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>::Node *m_prevNode;
};

/* 7342 */
struct hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>::Node *m_currentNode;
  hks::CodeGenerator::ExpDescription *m_bufferCurrentPlace;
  hks::CodeGenerator::ExpDescription *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7343 */
struct __cppobj hks::HksDynamicDestructVector<hks::CodeGenerator::ExpDescription,4,2> : hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>
{
};

/* 7344 */
struct hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>::Node
{
  unsigned __int64 m_bufferStorage[112];
  hks::CodeGenerator::ExpDescription *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>::Node *m_prevNode;
};

/* 7345 */
struct hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>::Node *m_currentNode;
  hks::CodeGenerator::ExpDescription *m_bufferCurrentPlace;
  hks::CodeGenerator::ExpDescription *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7346 */
struct __cppobj hks::HksDynamicDestructVector<hks::CodeGenerator::ExpDescription,8,2> : hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>
{
};

/* 7347 */
struct $A151B702737FB838745102D86FE61D55
{
  unsigned int m_firstLine;
  unsigned int m_prepInstructionPC;
  unsigned __int16 m_firstRegister;
  unsigned __int16 m_numVars;
  int m_isNumeric;
};

/* 7348 */
struct $49D34AAD3E1A10AAE4EE877A8439F019
{
  unsigned int m_firstLine;
  unsigned int m_whileInitLabel;
};

/* 7349 */
struct $2832C4EF91315B4B0A5CB88CCB9CF80C
{
  int m_repeatInitLabel;
};

/* 7350 */
struct $3E5E69F359EC3BA1F1F8CC248FC25130
{
  int m_ifEscapeList;
  int m_ifFlist;
};

/* 7351 */
union $4B2AFB26A77644748EDDB9F16D9046D5
{
  $A151B702737FB838745102D86FE61D55 m_fordata;
  $49D34AAD3E1A10AAE4EE877A8439F019 m_whiledata;
  $2832C4EF91315B4B0A5CB88CCB9CF80C m_repeatdata;
  $3E5E69F359EC3BA1F1F8CC248FC25130 m_ifdata;
};

/* 7352 */
struct hks::CodeGenerator::LoopState
{
  hks::CodeGenerator::LoopState::LoopKind m_kind;
  $4B2AFB26A77644748EDDB9F16D9046D5 ___u1;
  int m_conditionalFalseJump;
};

/* 7353 */
struct hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>::Node
{
  unsigned __int64 m_bufferStorage[12];
  hks::CodeGenerator::LoopState *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>::Node *m_prevNode;
};

/* 7354 */
struct hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>::Node *m_currentNode;
  hks::CodeGenerator::LoopState *m_bufferCurrentPlace;
  hks::CodeGenerator::LoopState *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7355 */
struct __cppobj hks::HksDynamicDestructVector<hks::CodeGenerator::LoopState,4,2> : hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>
{
};

/* 7356 */
struct hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>::Node
{
  unsigned __int64 m_bufferStorage[12];
  hks::CodeGenerator::FunctionGenerationState::TypeInfo *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>::Node *m_prevNode;
};

/* 7357 */
struct hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>::Node *m_currentNode;
  hks::CodeGenerator::FunctionGenerationState::TypeInfo *m_bufferCurrentPlace;
  hks::CodeGenerator::FunctionGenerationState::TypeInfo *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7358 */
struct hks::CodeGenerator::FunctionGenerationState::ExpListEntry
{
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2> m_listTyping;
  int m_hasTypeConstraints;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2> m_typeConstraints;
};

/* 7359 */
struct hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>::Node
{
  unsigned __int64 m_bufferStorage[172];
  hks::CodeGenerator::FunctionGenerationState::ExpListEntry *m_buffer;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>::Node *m_prevNode;
};

/* 7360 */
struct hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>::Node *m_currentNode;
  hks::CodeGenerator::FunctionGenerationState::ExpListEntry *m_bufferCurrentPlace;
  hks::CodeGenerator::FunctionGenerationState::ExpListEntry *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7361 */
struct __cppobj hks::HksDynamicDestructVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2> : hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>
{
};

/* 7362 */
struct hks::CodeGenerator::FunctionGenerationState
{
  lua_State *m_state;
  hks::Method *m_method;
  hks::HashTable *m_constantsHash;
  hks::HksDynamicVector<HksObject,32,2> m_constants;
  hks::HksDynamicDestructVector<hks::CodeGenerator::BlockState,16,2> m_localBlocks;
  hks::HksDynamicVector<hksInstruction,256,2> m_instructions;
  hks::HksDynamicVector<unsigned int,256,2> m_debugLineNumbers;
  hks::InternString *m_name;
  int m_listJpc;
  unsigned int m_firstFreeReg;
  unsigned int m_maxStackSize;
  hks::HksDynamicVector<hks::Method *,8,2> m_childMethods;
  hks::HksDynamicDestructVector<hks::Method::LocalInfo,16,2> m_localVarsDebugInfo;
  hks::HksDynamicVector<unsigned short,16,2> m_localVars;
  unsigned int m_numActiveLocals;
  hks::HksDynamicDestructVector<hks::CodeGenerator::UpvalueDescription,8,2> m_upvalues;
  char m_flags;
  unsigned int m_lineDefined;
  unsigned int m_numParams;
  unsigned int m_lastLineDefined;
  unsigned int m_forIteratorsCount;
  int m_lastJumpTarget;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2> m_localVarsTyping;
  hks::HksDynamicDestructVector<hks::CodeGenerator::ExpDescription,4,2> m_assignLHS;
  hks::HksDynamicDestructVector<hks::CodeGenerator::ExpDescription,8,2> m_expressionStack;
  hks::HksDynamicDestructVector<hks::CodeGenerator::LoopState,4,2> m_loopStack;
  unsigned int m_localsLHSCount;
  hks::CodeGenerator *m_owner;
  hks::HksDynamicDestructVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2> m_expListStack;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2> m_assignmentLHSTypes;
};

/* 7366 */
struct __declspec(align(8)) hks::CodeGenerator::StructResolutionChain::Entry
{
  hks::StructProto *m_proto;
  hks::StructSlot *m_slot;
  int m_isAbortOnNil;
};

/* 7367 */
struct hks::HksStaticVector<hks::CodeGenerator::StructResolutionChain::Entry,15>
{
  unsigned __int64 m_dataStorage[45];
  hks::CodeGenerator::StructResolutionChain::Entry *m_data;
  hks::CodeGenerator::StructResolutionChain::Entry *m_currentPosition;
};

/* 7368 */
struct hks::CodeGenerator::StructResolutionChain
{
  int m_isConsistentTypes;
  HksObjectType m_resultType;
  hks::StructProto *m_resultProto;
  hks::HksStaticVector<hks::CodeGenerator::StructResolutionChain::Entry,15> m_chain;
};

/* 7369 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState,4,4>::Node *m_iterNode;
  hks::CodeGenerator::FunctionGenerationState *m_iterPos;
  unsigned int m_index;
};

/* 7370 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::ConstructorState,4,2>::Node *m_iterNode;
  hks::CodeGenerator::ConstructorState *m_iterPos;
  unsigned int m_index;
};

/* 7371 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::NamePart,4,2>::Node *m_iterNode;
  hks::CodeGenerator::NamePart *m_iterPos;
  unsigned int m_index;
};

/* 7372 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,4,2>::Node *m_iterNode;
  hks::CodeGenerator::ExpDescription *m_iterPos;
  unsigned int m_index;
};

/* 7373 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::LoopState,4,2>::Node *m_iterNode;
  hks::CodeGenerator::LoopState *m_iterPos;
  unsigned int m_index;
};

/* 7374 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::ExpDescription,8,2>::Node *m_iterNode;
  hks::CodeGenerator::ExpDescription *m_iterPos;
  unsigned int m_index;
};

/* 7375 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,4,2>::Node *m_iterNode;
  hks::CodeGenerator::FunctionGenerationState::TypeInfo *m_iterPos;
  unsigned int m_index;
};

/* 7376 */
struct $D48A8A03901FA954A16AB8853B836269
{
  int static_assertion_failed_line_314[1];
};

/* 7377 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::BlockState,16,2>::Node *m_iterNode;
  hks::CodeGenerator::BlockState *m_iterPos;
  unsigned int m_index;
};

/* 7378 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::Method *,8,2>::iterator
{
  hks::HksDynamicVector<hks::Method *,8,2> *m_container;
  hks::HksDynamicVector<hks::Method *,8,2>::Node *m_iterNode;
  hks::Method **m_iterPos;
  unsigned int m_index;
};

/* 7379 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::Method::LocalInfo,16,2>::iterator
{
  hks::HksDynamicVector<hks::Method::LocalInfo,16,2> *m_container;
  hks::HksDynamicVector<hks::Method::LocalInfo,16,2>::Node *m_iterNode;
  hks::Method::LocalInfo *m_iterPos;
  unsigned int m_index;
};

/* 7380 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::UpvalueDescription,8,2>::Node *m_iterNode;
  hks::CodeGenerator::UpvalueDescription *m_iterPos;
  unsigned int m_index;
};

/* 7381 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::TypeInfo,16,2>::Node *m_iterNode;
  hks::CodeGenerator::FunctionGenerationState::TypeInfo *m_iterPos;
  unsigned int m_index;
};

/* 7382 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>::iterator
{
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2> *m_container;
  hks::HksDynamicVector<hks::CodeGenerator::FunctionGenerationState::ExpListEntry,4,2>::Node *m_iterNode;
  hks::CodeGenerator::FunctionGenerationState::ExpListEntry *m_iterPos;
  unsigned int m_index;
};

/* 7383 */
struct __cppobj hks::SimpleCompilerState : hks::CompilerStateInterface
{
  lua_State *m_state;
  hks::CompilerLexer *m_lexer;
  hks::InternString *m_internedSourceName;
};

/* 7384 */
struct __cppobj hks::Preprocessor::PreprocessorStateProxy : hks::SimpleCompilerState
{
  hks::Preprocessor *m_owner;
};

/* 7385 */
struct $ED40017FD0465CF20560A2E75BF0FDA7
{
  int arg1;
};

/* 7386 */
struct $664661F7804C184F71E9DFFB2A357DBF
{
  unsigned int arg1;
};

/* 7387 */
struct $F8C8189509C7F6A942C5101D29C42533
{
  hks::InternString *arg1;
};

/* 7388 */
struct $2A71376917282ABD7602EE8061BB3C4F
{
  hks::InternString *arg1;
  hks::InternString *arg2;
};

/* 7389 */
struct $2B8610FFD12DB083A32D3E0FD65838D2
{
  int arg1;
  unsigned int arg2;
};

/* 7390 */
struct $DB95930B34F5688D125D71D94560E7A9
{
  float arg1;
};

/* 7391 */
struct __declspec(align(8)) $67DBE3A3F9B0F16E1FDCA9383AEBBA4A
{
  unsigned __int64 arg1;
  int arg2;
};

/* 7392 */
union $736E5A0605C87D14D1A7C5DE2732DDCF
{
  $ED40017FD0465CF20560A2E75BF0FDA7 ArgBool;
  $664661F7804C184F71E9DFFB2A357DBF ArgUint;
  $F8C8189509C7F6A942C5101D29C42533 ArgString;
  $2A71376917282ABD7602EE8061BB3C4F ArgStringString;
  $2B8610FFD12DB083A32D3E0FD65838D2 ArgBoolUint;
  $DB95930B34F5688D125D71D94560E7A9 ArgNumber;
  $664661F7804C184F71E9DFFB2A357DBF ArgUnOpr;
  $664661F7804C184F71E9DFFB2A357DBF ArgBinOpr;
  $67DBE3A3F9B0F16E1FDCA9383AEBBA4A ArgUint64Tid;
};

/* 7393 */
struct hks::Preprocessor::Action
{
  hks::Preprocessor::ActionType m_type;
  unsigned int m_currentLine;
  unsigned int m_lastLine;
  hks::CompilerToken m_token;
  $736E5A0605C87D14D1A7C5DE2732DDCF m_args;
};

/* 7394 */
struct hks::HksDynamicVector<hks::Preprocessor::Action,32,2>::Node
{
  unsigned __int64 m_bufferStorage[192];
  hks::Preprocessor::Action *m_buffer;
  hks::HksDynamicVector<hks::Preprocessor::Action,32,2>::Node *m_nextNode;
  hks::HksDynamicVector<hks::Preprocessor::Action,32,2>::Node *m_prevNode;
};

/* 7395 */
struct hks::HksDynamicVector<hks::Preprocessor::Action,32,2>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::Preprocessor::Action,32,2>::Node m_stackNode;
  hks::HksDynamicVector<hks::Preprocessor::Action,32,2>::Node *m_firstNode;
  hks::HksDynamicVector<hks::Preprocessor::Action,32,2>::Node *m_currentNode;
  hks::Preprocessor::Action *m_bufferCurrentPlace;
  hks::Preprocessor::Action *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7396 */
struct hks::Preprocessor::StrippableAssertMatcher
{
  hks::Preprocessor::StrippableAssertMatcher::State m_state;
};

/* 7397 */
struct __declspec(align(8)) hks::Preprocessor::Statement
{
  hks::HksDynamicVector<hks::Preprocessor::Action,32,2> m_buffer;
  unsigned __int64 m_skippedStatements;
  hks::Preprocessor::StrippableAssertMatcher m_assertMatcher;
};

/* 7398 */
struct hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>::Node
{
  unsigned __int64 m_bufferStorage[812];
  hks::Preprocessor::Statement *m_buffer;
  hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>::Node *m_nextNode;
  hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>::Node *m_prevNode;
};

/* 7399 */
struct hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>
{
  lua_State *const m_state;
  hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>::Node m_stackNode;
  hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>::Node *m_firstNode;
  hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>::Node *m_currentNode;
  hks::Preprocessor::Statement *m_bufferCurrentPlace;
  hks::Preprocessor::Statement *m_bufferNextPlace;
  unsigned int m_size;
  unsigned int m_storageSize;
};

/* 7400 */
struct __cppobj hks::HksDynamicDestructVector<hks::Preprocessor::Statement,4,1> : hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>
{
};

/* 7401 */
struct __cppobj hks::Preprocessor : hks::CompilerParseAcceptor
{
  lua_State *m_state;
  hks::CompilerStateInterface *m_stateInterface;
  hks::CompilerParseAcceptor *m_nextAcceptor;
  hks::Preprocessor::PreprocessorStateProxy m_stateProxy;
  hks::InternString **m_stripNames;
  unsigned __int64 m_stripNamesSize;
  hks::Preprocessor::Action *m_currentlyDispatchingAction;
  hks::HksDynamicDestructVector<hks::Preprocessor::Statement,4,1> m_statements;
};

/* 7402 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::Preprocessor::Action,32,2>::iterator
{
  hks::HksDynamicVector<hks::Preprocessor::Action,32,2> *m_container;
  hks::HksDynamicVector<hks::Preprocessor::Action,32,2>::Node *m_iterNode;
  hks::Preprocessor::Action *m_iterPos;
  unsigned int m_index;
};

/* 7403 */
struct __declspec(align(8)) hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>::iterator
{
  hks::HksDynamicVector<hks::Preprocessor::Statement,4,1> *m_container;
  hks::HksDynamicVector<hks::Preprocessor::Statement,4,1>::Node *m_iterNode;
  hks::Preprocessor::Statement *m_iterPos;
  unsigned int m_index;
};

/* 7404 */
struct __cppobj hks::Parser : hks::CompilerTokens, hks::BinOperatorEnum, hks::UnOperatorEnum
{
  _BYTE gap0[1];
  lua_State *const m_state;
  hks::CompilerStateInterface *const m_compilerState;
  hks::CompilerLexer *const m_lexer;
  hks::CompilerParseAcceptor *const m_acceptor;
  unsigned int m_numLevels;
  hks::InternString *m_internedSource;
};

/* 7405 */
struct hks::CompilerFuncInnerArg
{
  hks::Parser *m_parser;
  hks::CompilerParseAcceptor *m_generator;
};

/* 7406 */
struct hks::BytecodeLoaderFuncInnerArg
{
  hks::BytecodeReader *m_reader;
  const char *m_chunkName;
};

/* 7407 */
struct hks::CompilerFuncObject
{
  hks::CompilerReader m_reader;
  hks::SimpleCompilerState m_compilerState;
  hks::CompilerLexer m_lexer;
  hks::CodeGenerator m_generator;
  hks::Preprocessor m_preprocessor;
  hks::CompilerParseAcceptor *m_acceptor;
  hks::Parser m_parser;
};

/* 7408 */
struct hks::CompilerFuncArg
{
  HksCompilerSettings *m_options;
  const char *(__cdecl *m_reader)(lua_State *, void *, unsigned __int64 *);
  void *m_readerData;
  const char *m_chunkName;
};

/* 7409 */
struct __cppobj hks::TrivialHash
{
};

/* 7410 */
struct __cppobj hks::OpcodeAdd
{
};

/* 7411 */
struct __cppobj hks::OpcodeSub
{
};

/* 7412 */
struct __cppobj hks::OpcodeMul
{
};

/* 7413 */
struct __cppobj hks::OpcodeDiv
{
};

/* 7414 */
struct __cppobj hks::OpcodeMod
{
};

/* 7415 */
struct __cppobj hks::OpcodePow
{
};

/* 7416 */
struct __cppobj hks::OpcodeUnm
{
};

/* 7417 */
struct hks::base_load_reader_userdata
{
  int ref_string;
  int ref_func;
};

/* 7418 */
struct __declspec(align(8)) hks::io_file_handle
{
  HksFile *f;
  int type;
};

/* 7419 */
struct luaL_Buffer
{
  char *p;
  int lvl;
  lua_State *L;
  char buffer[512];
};

/* 7420 */
struct hks::MemoryBuffer
{
  char *m_data;
  unsigned __int64 m_size;
  unsigned __int64 m_curr;
  lua_State *m_state;
};

/* 7421 */
struct hks::StringReader
{
  char *m_data;
  unsigned __int64 m_dataSize;
  unsigned __int64 m_size;
  lua_State *m_state;
};

/* 7422 */
struct __declspec(align(8)) hks::rg_state
{
  hks::state_type op;
  int value;
  unsigned int *r;
  hks::rg_state *out0;
  hks::rg_state *out1;
  int num_captures;
};

/* 7423 */
struct hks::RegexCapture
{
  int startp;
  int endp;
};

/* 7424 */
struct hks::match_stack
{
  unsigned __int64 index;
  hks::rg_state *repeat;
};

/* 7425 */
struct __declspec(align(8)) hks::VisitData_Common
{
  hks::VisitData_Header h2;
  hks::ResumeData_Header m_data;
};

/* 7426 */
struct __cppobj hks::getMemoryNoSweepAllocator
{
};

/* 7427 */
struct __cppobj hks::getMemoryNoHeaderAllocator
{
};

/* 7428 */
struct __cppobj hks::getMemoryAllocator
{
};

/* 7429 */
struct __cppobj hks::getMemoryAllocatorUD
{
};

/* 7430 */
struct hks::IProfiler
{
  hks::IProfilerVtbl *vfptr;
  const char *m_opcodeName;
};

/* 7431 */
struct hks::IProfilerVtbl
{
  void *(__cdecl *__vecDelDtor)(hks::IProfiler *this, unsigned int);
  void (__cdecl *destroy)(hks::IProfiler *this, lua_State *);
  void (__cdecl *profile)(hks::IProfiler *this, lua_State *, HksObject *, HksObject *, unsigned int);
  void (__cdecl *dump)(hks::IProfiler *this, lua_State *, void (*)(lua_State *, const char *, ...));
  unsigned __int64 (__cdecl *opcodeFrequency)(hks::IProfiler *this);
};

/* 7432 */
struct __cppobj hks::FrequencyProfiler : hks::IProfiler
{
  unsigned __int64 m_freq;
};

/* 7433 */
struct hks::GettableProfiler::NodeC
{
  unsigned __int64 m_freq[14];
};

/* 7434 */
struct hks::GettableProfiler::NodeB
{
  hks::GettableProfiler::NodeC *m_children[14];
  unsigned __int64 m_mtFreq[14];
};

/* 7435 */
struct __cppobj hks::GettableProfiler : hks::IProfiler
{
  hks::GettableProfiler::NodeB m_operandTypeFreq;
};

/* 7436 */
struct hks::InstructionProfiler
{
  hks::IProfiler *m_opcodes[94];
};

/* 7437 */
struct hks::Serializer::Header
{
  char m_tag[4];
  unsigned int m_version;
};

/* 7438 */
struct hks::Serializer
{
  lua_State *m_state;
  const char *(__cdecl *m_reader)(lua_State *, void *, unsigned __int64 *);
  int (__cdecl *m_writer)(lua_State *, const void *, unsigned __int64, void *);
  void *m_readerData;
  void *m_writerData;
  unsigned __int64 m_reference;
  const char *m_buffer;
  unsigned __int64 m_bufferSize;
  unsigned __int64 m_bufferPos;
};

/* 7439 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<lua_State>
{
};

/* 7440 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::UpValue>
{
};

/* 7441 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::InternString>
{
};

/* 7442 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::HashTable>
{
};

/* 7443 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::UserData>
{
};

/* 7444 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::cclosure>
{
};

/* 7445 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::HksClosure>
{
};

/* 7446 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method>
{
};

/* 7447 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::WeakStack_Entry>
{
};

/* 7448 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::GarbageCollector::WeakStack>
{
};

/* 7449 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::GarbageCollector::GreyStack>
{
};

/* 7450 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::HksGlobal>
{
};

/* 7451 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::MemoryManager>
{
};

/* 7452 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::GarbageCollector>
{
};

/* 7453 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::ApiStack>
{
};

/* 7454 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<HksObject>
{
};

/* 7455 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::StringTable>
{
};

/* 7456 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::HksClosure::MethodCache>
{
};

/* 7457 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method::Array<hksInstruction const > >
{
};

/* 7458 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method::Array<HksObject> >
{
};

/* 7459 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method::Array<hks::Method *> >
{
};

/* 7460 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::CallStack>
{
};

/* 7461 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::CallStack::ActivationRecord>
{
};

/* 7462 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::GarbageCollector::ResumeStack>
{
};

/* 7463 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::ResumeData_Entry>
{
};

/* 7464 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::ResumeData_State>
{
};

/* 7465 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::ResumeData_Table>
{
};

/* 7466 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::ResumeData_Closure>
{
};

/* 7467 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::ResumeData_CClosure>
{
};

/* 7468 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::ResumeData_Userdata>
{
};

/* 7469 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method::DebugInfo>
{
};

/* 7470 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method::Array<unsigned int> >
{
};

/* 7471 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method::Array<hks::InternString *> >
{
};

/* 7472 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method::Array<hks::Method::LocalInfo> >
{
};

/* 7473 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::Method::LocalInfo>
{
};

/* 7474 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<LuaPlus::LuaObject>
{
};

/* 7475 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::StructInst>
{
};

/* 7476 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::StructProto>
{
};

/* 7477 */
struct __cppobj hks::VisitorTypes::VisitorTypeTrait<hks::ProtoList>
{
};

/* 7481 */
struct hks::Visitor::EdgeInfo
{
  unsigned int m_data;
  hks::VisitorEdges::EdgeTag m_edgeTag;
};

/* 7478 */
struct hks::Visitor
{
  hks::VisitorVtbl *vfptr;
  hks::Visitor::Node *m_visited;
  lua_State *m_state;
  hks::Visitor::EdgeInfo m_edgeToHere;
};

/* 7479 */
struct hks::VisitorVtbl
{
  void *(__cdecl *__vecDelDtor)(hks::Visitor *this, unsigned int);
  _BYTE gap8[112];
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::CallStack::ActivationRecord *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::CallStack *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::Method::Array<hks::Method *> *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::Method::Array<HksObject> *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::Method::Array<hksInstruction const > *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::HksClosure::MethodCache *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::StringTable *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, HksObject *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::ApiStack *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::GarbageCollector *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::MemoryManager *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, LuaPlus::LuaObject *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::HksGlobal *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::GarbageCollector::GreyStack *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::GarbageCollector::WeakStack *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::WeakStack_Entry *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::Method *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::HksClosure *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::cclosure *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::UserData *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::StructInst *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::HashTable *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::InternString *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, hks::UpValue *);
  void (__cdecl *everyVisitCallback)(hks::Visitor *this, lua_State *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::ProtoList *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::StructProto **);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method::LocalInfo *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method::Array<hks::Method::LocalInfo> *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method::Array<hks::InternString *> *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method::Array<unsigned int> *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method::DebugInfo *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::ResumeData_Userdata *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::ResumeData_CClosure *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::ResumeData_Closure *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::ResumeData_Table *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::ResumeData_State *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::ResumeData_Entry *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::GarbageCollector::ResumeStack *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::CallStack::ActivationRecord *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::CallStack *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method::Array<hks::Method *> *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method::Array<HksObject> *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method::Array<hksInstruction const > *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::HksClosure::MethodCache *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::StringTable *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, HksObject *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::ApiStack *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::GarbageCollector *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::MemoryManager *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, LuaPlus::LuaObject *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::HksGlobal *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::GarbageCollector::GreyStack *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::GarbageCollector::WeakStack *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::WeakStack_Entry *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::Method *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::HksClosure *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::cclosure *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::UserData *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::StructInst *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::HashTable *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::InternString *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, hks::UpValue *);
  int (__cdecl *firstVisitCallback_pre)(hks::Visitor *this, lua_State *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::ProtoList *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::StructProto **);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method::LocalInfo *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method::Array<hks::Method::LocalInfo> *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method::Array<hks::InternString *> *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method::Array<unsigned int> *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method::DebugInfo *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::ResumeData_Userdata *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::ResumeData_CClosure *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::ResumeData_Closure *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::ResumeData_Table *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::ResumeData_State *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::ResumeData_Entry *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::GarbageCollector::ResumeStack *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::CallStack::ActivationRecord *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::CallStack *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method::Array<hks::Method *> *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method::Array<HksObject> *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method::Array<hksInstruction const > *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::HksClosure::MethodCache *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::StringTable *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, HksObject *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::ApiStack *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::GarbageCollector *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::MemoryManager *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, LuaPlus::LuaObject *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::HksGlobal *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::GarbageCollector::GreyStack *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::GarbageCollector::WeakStack *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::WeakStack_Entry *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::Method *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::HksClosure *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::cclosure *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::UserData *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::StructInst *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::HashTable *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::InternString *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, hks::UpValue *);
  void (__cdecl *firstVisitCallback_post)(hks::Visitor *this, lua_State *);
};

/* 7480 */
struct hks::Visitor::Node
{
  const void *obj;
  hks::Visitor::Node *left;
  hks::Visitor::Node *right;
};

/* 7482 */
struct __cppobj hks::LoggingVisitor : hks::Visitor
{
  void (*m_log)(lua_State *, const char *, ...);
};

/* 7483 */
struct __declspec(align(8)) hks::DeleteChecker::StackEntry
{
  hks::Visitor::EdgeInfo m_edgeInfo;
  const void *m_objAddress;
  hks::VisitorTypes::TypeTag m_type;
};

/* 7484 */
struct __cppobj hks::DeleteChecker : hks::LoggingVisitor
{
  hks::DeleteChecker::StackEntry *m_stack;
  int m_stackCapacity;
  int m_stackIndex;
  Hks_DeleteCheckingMode m_mode;
  int m_numDeletedObjectsFound;
};

/* 7485 */
struct __cppobj __declspec(align(8)) hks::GarbageInspector : hks::LoggingVisitor
{
  int m_numGarbageObjectsFound;
};

/* 7486 */
struct __cppobj hks::ChunkVisitor : hks::Visitor
{
};

/* 7487 */
struct __cppobj hks::ReachableChunksAreValid : hks::ChunkVisitor
{
};

/* 7488 */
struct hks::HeapAssertions
{
  lua_State *state;
};

/* 7489 */
struct __cppobj hks::HeapVisualizer : hks::Visitor
{
  HksFile *m_file;
  lua_State *m_root;
};

/* 7490 */
struct __cppobj hks::MemoryAllocationsByType : hks::Visitor
{
  unsigned __int64 m_bytes[23];
  unsigned __int64 m_count[23];
};

/* 7491 */
struct fileReaderData
{
  int specialFirstLine;
  HksFile *file;
  char buffer[2048];
};

/* 7492 */
struct bufferReaderData
{
  const char *m_data;
  unsigned __int64 m_size;
};

/* 7493 */
struct __declspec(align(16)) ReactiveTurbulenceEffectorEntry
{
  float pos[3];
  float origRadius;
  float dir[3];
  float radius;
  float velDir[3];
  float velMag;
  float lifetime;
  float spawnTime;
  float ambientWorldVel[3];
  float ambientWorldScale;
  unsigned int id;
  float maxExtendedLength;
  float velMagClamp;
  unsigned int pad1[1];
};

/* 7494 */
struct ReactiveTurbulenceEffectorGroup
{
  int numEffectors;
  int effectorEntries[16];
};

/* 7495 */
struct ReactiveMotionExplosion
{
  float origin[3];
  float origRadius;
  float curRadius;
  float createTimeSec;
  float lifetimeSec;
};

/* 7496 */
struct ReactiveMotionSphere
{
  float pos[3];
  float radius;
  float velDir[3];
  float velMag;
  float distFromCamera;
  int entIndex;
  float pad[2];
};

/* 7497 */
struct ReactiveMotionWindTunnel
{
  float pos[3];
  float radius;
  float amplitudeScale[4];
};

/* 7498 */
struct ReactiveMotionEffector
{
  float pos[3];
  float radius;
  float velDir[3];
  float velMag;
};

/* 7499 */
struct ReactiveMotionParams
{
  float windDir[3];
  float windStrength;
  float windAreaScale;
  float windAmplitudeScale;
  float windTimeSec;
  float velocityTailScale;
  float effectorStrengthScale;
  unsigned int pad[1];
  unsigned int numEffectors;
  unsigned int numWindTunnels;
  ReactiveMotionEffector effectors[15];
  ReactiveMotionWindTunnel tunnels[4];
};

/* 7500 */
struct __cppobj Cos<1000000,69813>
{
};

/* 7501 */
struct __cppobj Cos<1000000,6108652>
{
};

/* 7502 */
struct __cppobj Cos<1000000,261799>
{
};

/* 7503 */
struct __cppobj SinCosSeries<1,23,1000000,69813>
{
};

/* 7504 */
struct __cppobj SinCosSeries<1,23,1000000,6108652>
{
};

/* 7505 */
struct __cppobj SinCosSeries<1,23,1000000,261799>
{
};

/* 7506 */
struct __cppobj SinCosSeries<3,23,1000000,69813>
{
};

/* 7507 */
struct __cppobj SinCosSeries<3,23,1000000,6108652>
{
};

/* 7508 */
struct __cppobj SinCosSeries<3,23,1000000,261799>
{
};

/* 7509 */
struct __cppobj SinCosSeries<5,23,1000000,69813>
{
};

/* 7510 */
struct __cppobj SinCosSeries<5,23,1000000,6108652>
{
};

/* 7511 */
struct __cppobj SinCosSeries<5,23,1000000,261799>
{
};

/* 7512 */
struct __cppobj SinCosSeries<7,23,1000000,69813>
{
};

/* 7513 */
struct __cppobj SinCosSeries<7,23,1000000,6108652>
{
};

/* 7514 */
struct __cppobj SinCosSeries<7,23,1000000,261799>
{
};

/* 7515 */
struct __cppobj SinCosSeries<9,23,1000000,69813>
{
};

/* 7516 */
struct __cppobj SinCosSeries<9,23,1000000,6108652>
{
};

/* 7517 */
struct __cppobj SinCosSeries<9,23,1000000,261799>
{
};

/* 7518 */
struct __cppobj SinCosSeries<11,23,1000000,69813>
{
};

/* 7519 */
struct __cppobj SinCosSeries<11,23,1000000,6108652>
{
};

/* 7520 */
struct __cppobj SinCosSeries<11,23,1000000,261799>
{
};

/* 7521 */
struct __cppobj SinCosSeries<13,23,1000000,69813>
{
};

/* 7522 */
struct __cppobj SinCosSeries<13,23,1000000,6108652>
{
};

/* 7523 */
struct __cppobj SinCosSeries<13,23,1000000,261799>
{
};

/* 7524 */
struct __cppobj SinCosSeries<15,23,1000000,69813>
{
};

/* 7525 */
struct __cppobj SinCosSeries<15,23,1000000,6108652>
{
};

/* 7526 */
struct __cppobj SinCosSeries<15,23,1000000,261799>
{
};

/* 7527 */
struct __cppobj SinCosSeries<17,23,1000000,69813>
{
};

/* 7528 */
struct __cppobj SinCosSeries<17,23,1000000,6108652>
{
};

/* 7529 */
struct __cppobj SinCosSeries<17,23,1000000,261799>
{
};

/* 7530 */
struct __cppobj SinCosSeries<19,23,1000000,69813>
{
};

/* 7531 */
struct __cppobj SinCosSeries<19,23,1000000,6108652>
{
};

/* 7532 */
struct __cppobj SinCosSeries<19,23,1000000,261799>
{
};

/* 7533 */
struct __cppobj SinCosSeries<21,23,1000000,69813>
{
};

/* 7534 */
struct __cppobj SinCosSeries<21,23,1000000,6108652>
{
};

/* 7535 */
struct __cppobj SinCosSeries<21,23,1000000,261799>
{
};

/* 7536 */
struct __cppobj SinCosSeries<23,23,1000000,69813>
{
};

/* 7537 */
struct __cppobj SinCosSeries<23,23,1000000,6108652>
{
};

/* 7538 */
struct __cppobj SinCosSeries<23,23,1000000,261799>
{
};

/* 7539 */
struct __cppobj GfxSortFlareSurfsInterface
{
};

/* 7540 */
struct R_Macroclut_Cache
{
  unsigned int lastUsedFrameIndex;
  GfxImage *image;
  GfxColorizationSet colorizationSet;
};

/* 7541 */
struct R_Macroclut_SrcColor
{
  float r;
  float g;
  float b;
};

/* 7542 */
struct R_Macroclut_Internal
{
  unsigned int frameIndex;
  R_Macroclut_Cache caches[6];
  R_Macroclut_SrcColor srcTexels[4096];
  unsigned int intermediateBuffer[4096];
};

/* 7543 */
struct BspDisplacementGlobals
{
  ID3D11Buffer *subdomainMappingBuffer;
};

/* 7544 */
struct DialogQueueItem
{
  unsigned __int16 soundIndex;
  scr_string_t soundGroup;
  scr_string_t dialogName;
  float location[3];
  int startTime;
  int duration;
};

/* 7545 */
struct DialogQueue
{
  DialogQueueItem items[16];
  int front;
  int size;
};

/* 7546 */
struct SentientCmdHelper
{
  sentient_s *mSelf;
};

/* 7547 */
struct HingeGlob
{
  Hinge hinges[64];
};

/* 7548 */
struct __cppobj __declspec(align(8)) MatchMaking_ASN_REGION_LAT_LONG_BASED_WEIGHT_Query : bdSessionParams
{
  int m_memberPARAM_PLAYLIST;
  int m_memberPARAM_PLAYLIST_VERSION;
  int m_memberPARAM_NETCODE_VERSION;
  int m_memberPARAM_MAPPACKS;
  int m_memberPARAM_SLOTS_NEEDED_ON_TEAM;
  unsigned int m_memberPARAM_SKILL;
  float m_memberPARAM_COUNTRY_CODE_WEIGHT;
  unsigned int m_memberPARAM_COUNTRY_CODE;
  unsigned int m_memberPARAM_ASN;
  float m_memberPARAM_ASN_WEIGHT;
  float m_memberPARAM_LATITUDE;
  float m_memberPARAM_LONGITUDE;
  float m_memberPARAM_LAT_LONG_WEIGHT;
  unsigned int m_memberPARAM_COOP_GAME_STATE;
  QueryId m_queryID;
};

/* 7549 */
struct __cppobj MatchMaking_ASN_REGION_LAT_LONG_BASED_WEIGHT_FILTERED_Query : bdSessionParams
{
  int m_memberPARAM_PLAYLIST;
  int m_memberPARAM_PLAYLIST_VERSION;
  int m_memberPARAM_NETCODE_VERSION;
  int m_memberPARAM_MAPPACKS;
  int m_memberPARAM_SLOTS_NEEDED_ON_TEAM;
  unsigned int m_memberPARAM_SKILL;
  float m_memberPARAM_COUNTRY_CODE_WEIGHT;
  unsigned int m_memberPARAM_COUNTRY_CODE;
  unsigned int m_memberPARAM_ASN;
  float m_memberPARAM_ASN_WEIGHT;
  float m_memberPARAM_LATITUDE;
  float m_memberPARAM_LONGITUDE;
  float m_memberPARAM_LAT_LONG_WEIGHT;
  unsigned int m_memberPARAM_COOP_GAME_STATE;
};

/* 7550 */
struct dwMatchMakingSettings
{
  int pings[10][2];
  int start_to_host_time;
  int ignore_skill_time;
  int game_limit;
  int dedicated_server_max_ping;
  int start_dedicated_server_time;
};

/* 7551 */
struct DS_SHMEM_FileHeader
{
  unsigned int m_ffVersion;
  unsigned int m_shmemVersion;
  char m_name[128];
  unsigned int m_entryCt;
};

/* 7552 */
struct __declspec(align(8)) DS_SHMEM_File
{
  void *m_file;
  void *m_fileMapping;
  DS_SHMEM_FileHeader *m_header;
  const char *m_base;
  unsigned int m_curIdx;
};

/* 7553 */
struct DS_SHMEM_FileEntry
{
  unsigned int m_nameOffset;
  unsigned int m_offset;
  unsigned int m_size;
};

/* 7554 */
struct DSMigrateData
{
  bool migratingHost;
  bool inGameMigration;
  int migrationIndex;
  int migrationStartCount;
  DSMigrateState state;
};

/* 7555 */
struct DSListener
{
  DSLState state;
  DSLTransitionState transitionState;
  netadr_s lobbyHostAddr;
  netadr_s clientAddrs[12];
  unsigned int challenge;
  unsigned int acquireTime;
  unsigned int gameStartTime;
  unsigned int lastHeartbeat;
  unsigned int lastStateChangeTime;
  unsigned int createDelay;
  DSMigrateData migrateData;
  unsigned int gameStartMessageHandles[12];
  unsigned int gameEndMessageHandles[12];
};

/* 7556 */
struct __cppobj std::integral_constant<bool,1>
{
};

/* 7557 */
struct __cppobj std::_Vector_val<std::_Simple_types<unsigned int> > : std::_Container_base0
{
  unsigned int *_Myfirst;
  unsigned int *_Mylast;
  unsigned int *_Myend;
};

/* 7558 */
struct __cppobj std::_Vector_alloc<0,std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > > : std::_Vector_val<std::_Simple_types<unsigned int> >
{
};

/* 7559 */
struct __cppobj std::vector<unsigned int,std::allocator<unsigned int> > : std::_Vector_alloc<0,std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >
{
};

/* 7560 */
struct std::seed_seq
{
  std::vector<unsigned int,std::allocator<unsigned int> > _Myvec;
};

/* 7561 */
struct __cppobj std::_Allocator_base<unsigned int>
{
};

/* 7562 */
struct __cppobj std::allocator<unsigned int> : std::_Allocator_base<unsigned int>
{
};

/* 7563 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int> > : std::allocator<unsigned int>
{
};

/* 7564 */
struct __cppobj std::allocator_traits<std::allocator<unsigned int> >
{
};

/* 7565 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int> >::rebind<unsigned int>
{
};

/* 7566 */
struct __cppobj std::_Wrap_alloc<std::allocator<unsigned int> >::rebind<unsigned int *>
{
};

/* 7567 */
struct std::bernoulli_distribution::param_type
{
  long double _Px;
};

/* 7568 */
struct std::bernoulli_distribution
{
  std::bernoulli_distribution::param_type _Par;
};

/* 7569 */
struct std::_Circ_buf<unsigned int,624>
{
  unsigned int _Idx;
  unsigned int _Ax[1248];
};

/* 7570 */
struct __cppobj std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18> : std::_Circ_buf<unsigned int,624>
{
  unsigned int _Dxval;
};

/* 7571 */
struct __cppobj std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> : std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>
{
};

/* 7572 */
struct __cppobj std::random_device
{
};

/* 7573 */
struct std::uniform_int<int>::param_type
{
  int _Min;
  int _Max;
};

/* 7574 */
struct std::uniform_int<int>
{
  std::uniform_int<int>::param_type _Par;
};

/* 7575 */
struct __cppobj std::uniform_int_distribution<int> : std::uniform_int<int>
{
};

/* 7576 */
struct __cppobj std::allocator_traits<std::allocator<unsigned int> >::rebind_alloc<unsigned int>
{
};

/* 7577 */
struct __cppobj std::allocator_traits<std::allocator<unsigned int> >::rebind_alloc<unsigned int *>
{
};

/* 7578 */
struct __declspec(align(8)) std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
{
  std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> *_Ref;
  unsigned __int64 _Bits;
  unsigned int _Bmask;
};

/* 7579 */
struct __cppobj std::_Cat_base<1> : std::integral_constant<bool,1>
{
};

/* 7580 */
struct __cppobj std::is_signed<int> : std::_Cat_base<1>
{
};

/* 7581 */
struct __declspec(align(8)) DSGameData
{
  int playlist;
  int playlistEntry;
  char mapName[1024];
  int hostIdx;
  int playerCount;
  DSPlayerData players[12];
  int wins[4];
  bool teamBased;
};

/* 7582 */
struct DSGame
{
  DSGameData data;
};

/* 7583 */
struct DSCommandLineOption
{
  const char *optname;
  char optvalue[256];
};

/* 7584 */
struct __declspec(align(8)) LoadingBarJob
{
  LoadJobType type;
  float barSize;
  unsigned __int64 byteSize;
  unsigned int hashName;
};

/* 7585 */
struct __declspec(align(8)) LoadingBar
{
  LoadingBarJob jobs[32];
  unsigned int numJobs;
  unsigned int currentJob;
  float jobDoneSize;
  float actualDoneSize;
  float uiDoneSize;
  int loadingFastfile;
  int loadingTransient;
  unsigned __int64 loadCountResident;
  volatile int loadCountAlwaysLoaded;
  unsigned __int64 loadCountStream;
  unsigned int loadCountMPTransients;
  unsigned int totalMPTransients;
  unsigned int startShaderGet;
  float shaderProgress;
  float shaderBarSize;
};

/* 7586 */
struct __declspec(align(4)) TransientAssetEntry
{
  unsigned int nameAndTypeHash;
  unsigned __int16 nextHashTableIndex;
  unsigned __int16 fileIndex;
  char referenceCount;
  char alwaysLoadedState;
};

/* 7587 */
struct __declspec(align(4)) TransientFile
{
  unsigned int nameHash;
  unsigned __int16 nextHashTableIndex;
  char poolIndex;
  char slotIndex;
  char filename[35];
  char state;
  char referenceCount;
};

/* 7588 */
struct __declspec(align(8)) TransientQueueEntry
{
  TransientFile *file;
  unsigned int gpuUnloadFrame;
};

/* 7589 */
struct __declspec(align(8)) TransientPoolSlot
{
  unsigned __int64 usedSize[1];
  char parentPoolIndex;
  char nextFreeSlotIndex;
};

/* 7590 */
struct __declspec(align(8)) TransientPool
{
  char name[64];
  unsigned __int64 entrySize[1];
  unsigned int numSlots;
  char *poolMemStart[1];
  TransientPoolSlot *firstSlot;
  char freeSlotIndex;
};

/* 7591 */
struct ClStreamSyncItem
{
  ComStreamSyncModel model;
  CLStreamSyncItemState loadState;
};

/* 7592 */
struct ClStreamSyncList
{
  unsigned int modelCount;
  ClStreamSyncItem models[12];
};

/* 7593 */
struct ClStreamSyncLatch
{
  char latchedModels[3][64];
  int hasModelLatch;
};

/* 7594 */
struct ClStreamSyncData
{
  ClStreamSyncList modelLists[3];
  ClStreamSyncLatch modelLatch[12];
  unsigned int maxPackageCount[3];
  unsigned int connectWaitPeerBits;
  int connectTimeout;
  int isActive;
};

/* 7595 */
struct ComStreamedSyncConnectInfo
{
  ComStreamedSyncModelList modelLists[3];
  unsigned int maxPackageCounts[3];
  unsigned int waitPeerBits;
  int isActive;
};

/* 7596 */
struct __declspec(align(8)) Watermark
{
  bool valid;
  bool consoleId128bit;
  unsigned __int64 consoleIdHigh;
  unsigned __int64 consoleIdLow;
  unsigned int ip;
};

/* 7597 */
struct WatermarkDrawState
{
  char *imagePtr;
  bool linear;
  unsigned int pitch;
  GfxImage *image;
  unsigned int xPos;
  unsigned int yPos;
};

/* 7598 */
struct __declspec(align(8)) VectorFieldInstance
{
  VectorField *vf;
  orientation_t orient;
  float strengthScale;
  int inUse;
  unsigned int effectHandle;
};

/* 7599 */
struct CG_HudLighting_ModeConfig::LumScaleOffset
{
  float scale;
  float offset;
};

/* 7600 */
struct CG_HudLighting_ModeConfig::ColorScaleOffset
{
  float scale[3];
  float offset[3];
};

/* 7601 */
struct CG_HudLighting_ModeConfig::Light
{
  CG_HudLighting_ModeConfig::LumScaleOffset lum;
  CG_HudLighting_ModeConfig::ColorScaleOffset color;
};

/* 7602 */
struct CG_HudLighting_ModeConfig
{
  float specExponent;
  CG_HudLighting_ModeConfig::Light lights[4];
};

/* 7603 */
struct CG_HudLighting_Dvars::ScaleOffset
{
  dvar_t *scale;
  dvar_t *offset;
};

/* 7604 */
struct CG_HudLighting_Dvars::Light
{
  CG_HudLighting_Dvars::ScaleOffset lum;
  CG_HudLighting_Dvars::ScaleOffset color;
};

/* 7605 */
struct CG_HudLighting_Dvars::Mode
{
  dvar_t *specExponent;
  CG_HudLighting_Dvars::Light lights[4];
};

/* 7606 */
struct CG_HudLighting_Dvars
{
  dvar_t *fadeSharpness;
  CG_HudLighting_Dvars::Mode modes[2];
};

/* 7607 */
struct CG_HudLighting_Private::DrawContext
{
  LocalClientNum_t localClientIndex;
  float cameraOrigin[3];
  float cameraAxis[3][3];
  GfxLit2DShaderState shaderState;
};

/* 7608 */
struct CG_HudLighting_Private
{
  CG_HudLighting_Private::DrawContext drawContext;
};

/* 7609 */
struct __declspec(align(4)) CustomizationPackageData
{
  const char *packageBaseName;
  const char *packageSuffix;
  unsigned int nameHash;
  unsigned __int16 nextHashTablePackageIndex;
  unsigned __int16 primaryIndex;
  unsigned __int16 secondaryIndex;
  CustomizationCategory category;
  unsigned __int16 otherPackageIndex;
  bool useCamoSwap;
  bool alwaysLoaded;
  bool availableForRandom;
};

/* 7610 */
struct CustomizationPackageList
{
  unsigned __int16 firstAssetIndex;
  unsigned int modelCount;
  unsigned int availableRandomModelCount[3];
};

/* 7611 */
struct CustomizationCamoVariation
{
  char bodysuffix[12];
  char headsuffix[12];
  unsigned int bodysuffixLen;
  unsigned int headsuffixLen;
};

/* 7612 */
struct AimTarget
{
  int entIndex;
  float worldDistSqr;
  Bounds box;
  float velocity[3];
};

/* 7613 */
struct AimTargetGlob
{
  AimTarget targets[64];
  int targetCount;
};

/* 7614 */
struct __declspec(align(64)) AimVis
{
  workerTrace_t workerTrace;
  centity_s *targetEnt;
};

/* 7615 */
struct AimVisGlob
{
  int potentiallyVisibleCount;
};

/* 7616 */
struct __declspec(align(4)) AimAssistPlayerState
{
  AimAssistSharedPlayerState sharedPS;
  float velocity[3];
  int eFlags;
  int linkFlags;
  float fWeaponPosFrac;
  float frametime;
  int movingPlatformEntity;
  int commandTime;
  float angleVelocity[3];
  bool hasAmmo;
  bool isDualWielding;
};

/* 7617 */
struct AimTargetExt
{
  float prevOrigin[3];
};

/* 7618 */
struct __declspec(align(16)) AimAssistGlobals
{
  AimAssistPlayerState ps;
  __declspec(align(8)) float screenMtx[4][4];
  float invScreenMtx[4][4];
  bool initialized;
  float viewOrigin[3];
  float viewAxis[3][3];
  float fovTurnRateScale;
  float fovScaleInv;
  float adsLerp;
  float pitchDelta;
  float yawDelta;
  float screenWidth;
  float screenHeight;
  AimTargetExt aimTargetExt[64];
  bool aimTargetExtValid[64];
  AimAssistSharedGlobals aaSharedGlob;
  int lockOnTargetEnt;
};

/* 7619 */
struct DiskMaterial
{
  unsigned int name;
  int surfaceFlags;
  int contents;
};

/* 7620 */
struct PrimaryLightEnvironmentHashEntry
{
  unsigned int primaryLightEnvIndex;
  PrimaryLightEnvironmentHashEntry *nextHash;
};

/* 7621 */
struct __declspec(align(8)) _NVAPI_INTERFACE_POINTER
{
  __int64 (__cdecl *fp)();
  unsigned int refCount;
};

/* 7622 */
struct NV_EDID_V3
{
  unsigned int version;
  char EDID_Data[256];
  unsigned int sizeofEDID;
  unsigned int edidId;
  unsigned int offset;
};

/* 7623 */
struct NV_GPU_CONNECTOR_DATA
{
  _NV_GPU_CONNECTOR_TYPE type;
  unsigned int locationIndex;
};

/* 7624 */
struct NV_GPU_CONNECTOR_INFO
{
  unsigned int version;
  _NV_GPU_CONNECTOR_PLATFORM connectorPlatform;
  unsigned int connectorCount;
  NV_GPU_CONNECTOR_DATA connector[4];
};

/* 7625 */
struct NvDisplayHandle__
{
  int unused;
};

/* 7626 */
struct NV_DISPLAY_TV_OUTPUT_INFO
{
  unsigned int version;
  unsigned int supportedFormats;
  _NV_DISPLAY_TV_FORMAT currentFormat;
  _NV_GPU_CONNECTOR_TYPE currentConnector;
};

/* 7627 */
struct NV_VIEWPORTF
{
  float x;
  float y;
  float w;
  float h;
};

/* 7628 */
struct tagNV_TIMINGEXT
{
  unsigned int flag;
  unsigned __int16 rr;
  unsigned int rrx1k;
  unsigned int aspect;
  unsigned __int16 rep;
  unsigned int status;
  char name[40];
};

/* 7629 */
struct _NV_TIMING
{
  unsigned __int16 HVisible;
  unsigned __int16 HBorder;
  unsigned __int16 HFrontPorch;
  unsigned __int16 HSyncWidth;
  unsigned __int16 HTotal;
  char HSyncPol;
  unsigned __int16 VVisible;
  unsigned __int16 VBorder;
  unsigned __int16 VFrontPorch;
  unsigned __int16 VSyncWidth;
  unsigned __int16 VTotal;
  char VSyncPol;
  unsigned __int16 interlaced;
  unsigned int pclk;
  tagNV_TIMINGEXT etc;
};

/* 7630 */
struct NV_DISP_PATH_V2
{
  unsigned int version;
  unsigned int device;
  _NV_GPU_CONNECTOR_TYPE connector;
  unsigned int srcID;
  unsigned int srcImportance;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  _NV_ROTATE rotation;
  _NV_FORMAT colorFormat;
  NV_VIEWPORTF srcPartition;
  NV_VIEWPORTF viewportIn;
  _NV_SCALING scaling;
  NV_VIEWPORTF viewportOut;
  _NV_TIMING_OVERRIDE timingOverride;
  unsigned int refreshRate;
  unsigned __int32 interlaced : 1;
  unsigned __int32 hwModeSetOnly : 1;
  unsigned __int32 SelectCustomTiming : 1;
  unsigned __int32 needNullModeset : 1;
  unsigned __int32 need6x4Modeset : 1;
  unsigned __int32 forceModeSet : 1;
  unsigned __int32 gpuId : 24;
  unsigned __int32 isSliFocusDisplay : 1;
  unsigned __int32 forceModeEnum : 1;
  _NV_DISPLAY_TV_FORMAT tvFormat;
  _NV_TIMING timing;
  unsigned int refreshRate1K;
};

/* 7631 */
struct $D0AF64E0C8C5530041D1DB9CDEA56CFB
{
  unsigned int deviceMask;
  unsigned int sourceId;
  unsigned __int32 bPrimary : 1;
  unsigned __int32 bInterlaced : 1;
  unsigned __int32 bGDIPrimary : 1;
  unsigned __int32 bForceModeSet : 1;
};

/* 7632 */
struct NV_VIEW_TARGET_INFO
{
  unsigned int version;
  unsigned int count;
  $D0AF64E0C8C5530041D1DB9CDEA56CFB target[2];
};

/* 7633 */
struct NV_DISPLAY_PATH
{
  unsigned int deviceMask;
  unsigned int sourceId;
  unsigned __int32 bPrimary : 1;
  _NV_GPU_CONNECTOR_TYPE connector;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  _NV_FORMAT colorFormat;
  _NV_ROTATE rotation;
  _NV_SCALING scaling;
  unsigned int refreshRate;
  unsigned __int32 interlaced : 1;
  _NV_DISPLAY_TV_FORMAT tvFormat;
  unsigned int posx;
  unsigned int posy;
  unsigned __int32 bGDIPrimary : 1;
  unsigned __int32 bForceModeSet : 1;
  unsigned __int32 bFocusDisplay : 1;
  unsigned __int32 gpuId : 24;
};

/* 7634 */
struct NV_DISPLAY_PATH_INFO
{
  unsigned int version;
  unsigned int count;
  NV_DISPLAY_PATH path[4];
};

/* 7635 */
struct $244ADC6D4CF6D7D50764A79F24C26411
{
  char revMin;
  char revMaj;
  char verMin;
  char verMaj;
};

/* 7636 */
union $EBE6C31D643077F7FB7ED5DD8D6441A5
{
  unsigned int data1;
  $244ADC6D4CF6D7D50764A79F24C26411 ver;
};

/* 7637 */
struct NV_UID
{
  $EBE6C31D643077F7FB7ED5DD8D6441A5 ___u0;
  unsigned __int16 data2;
  unsigned __int16 data3;
  char data4[8];
};

/* 7638 */
struct NV_HDCP_CN
{
  unsigned __int64 uSessionID : 37;
  unsigned __int64 uDisplay : 3;
  unsigned __int64 uReserved : 24;
};

/* 7639 */
struct $C62676791B9D75A67CA909B85FD700B3
{
  unsigned __int64 hugePart : 40;
  unsigned __int64 unusedPart : 24;
};

/* 7640 */
union $DCA17053D1E344B65AE3A83A4D56C18C
{
  unsigned __int64 quadWord;
  $C62676791B9D75A67CA909B85FD700B3 parts;
};

/* 7641 */
struct NV_U40
{
  $DCA17053D1E344B65AE3A83A4D56C18C ___u0;
};

/* 7642 */
struct NV_HDCP_BSTATUS
{
  unsigned __int32 ucDeviceCount : 7;
  unsigned __int32 bMaxDevicesExceeded : 1;
  unsigned __int32 bRepeaterDepth : 3;
  unsigned __int32 bMaxCascadeExceeded : 1;
  unsigned __int32 bHDMImode : 1;
  unsigned __int32 bReserved : 19;
};

/* 7643 */
struct __unaligned __declspec(align(4)) NV_HDCP_STATUS
{
  unsigned __int64 bEncrypting : 1;
  unsigned __int64 bRepeater : 1;
  unsigned __int64 bUserAccessible : 1;
  unsigned __int64 bExtUnprotected : 1;
  unsigned __int64 uPortIndex : 4;
  unsigned __int64 uNumPorts : 4;
  unsigned __int64 bInternalPanel : 1;
  unsigned __int64 bWideScope : 1;
  unsigned __int64 bHasCs : 1;
  unsigned __int64 bReadZ : 1;
  unsigned __int64 uReserved : 24;
  unsigned __int64 bDualLinkEven : 1;
  unsigned __int64 bDualLinkOdd : 1;
  unsigned __int64 bDualLinkCapable : 1;
  unsigned __int64 reserved : 21;
  unsigned int DisplayId;
};

/* 7644 */
struct NV_HDCP_CS
{
  unsigned __int64 uAttachPoints : 16;
  unsigned __int64 bNonHDCP : 1;
  unsigned __int64 uHeadIndex : 4;
  unsigned __int64 uRFUPlanes : 8;
  unsigned __int64 uNumberOfActiveHeads : 2;
  unsigned __int64 uReserved2 : 9;
  unsigned __int64 uAttachedPlanes : 8;
  unsigned __int64 bCloneMode : 1;
  unsigned __int64 bSpanMode : 1;
  unsigned __int64 reserved : 14;
};

/* 7645 */
struct $8F82E6ADFB7B211EB57AFEEDA6D5BC8A
{
  unsigned __int64 hugePart : 56;
  unsigned __int64 unusedPart : 8;
};

/* 7646 */
union $F309D92F59E7D59F1CE97697984AA8EC
{
  unsigned __int64 quadWord;
  $8F82E6ADFB7B211EB57AFEEDA6D5BC8A parts;
};

/* 7647 */
struct NV_U56
{
  $F309D92F59E7D59F1CE97697984AA8EC ___u0;
};

/* 7648 */
struct NV_HDCP_PACKET
{
  NV_UID uidHDCP;
  unsigned int packetSize;
  unsigned int hDisplayContext;
  NV_HDCP_COMMANDS cmdCommand;
  NV_HDCP_FLAGS flFlags;
  NV_HDCP_RET_STATUS hdcpPacketStatus;
  unsigned int apIndex;
  NV_HDCP_CN cN;
  NV_U40 cKsv;
  NV_HDCP_BSTATUS bStatus[16];
  NV_HDCP_STATUS hdcpStatus[16];
  NV_HDCP_CS cS;
  NV_U56 kP[2];
  NV_U40 aN[2];
  NV_U40 aKsv[2];
  NV_U40 dKsv[2];
  char vP[20];
  __unaligned __declspec(align(1)) unsigned __int64 mP;
  unsigned int numBKSVs;
  NV_U40 bKsvList[127];
};

/* 7649 */
struct __unaligned __declspec(align(4)) NV_HDCP_INFO
{
  unsigned int version;
  NV_HDCP_PACKET nvHdcpPacket;
};

/* 7650 */
struct NV_3D_APP_INFO_V2
{
  unsigned int version;
  unsigned int processId;
  char processName[256];
};

/* 7651 */
struct NV_DISPLAY_DRIVER_VERSION
{
  unsigned int version;
  unsigned int drvVersion;
  unsigned int bldChangeListNum;
  char szBuildBranchString[64];
  char szAdapterString[64];
};

/* 7652 */
struct NV_DRIVER_MEMORY_INFO
{
  unsigned int version;
  unsigned int dedicatedVideoMemory;
  unsigned int systemVideoMemory;
  unsigned int sharedSystemMemory;
};

/* 7653 */
struct NV_3D_SETTING
{
  unsigned int version;
  NV_3D_PROPERTY settingName;
  unsigned int flags;
  unsigned int defaultValue;
  unsigned int currentValue;
};

/* 7654 */
struct NV_3D_SETTING_RANGE
{
  unsigned int version;
  NV_3D_PROPERTY settingName;
  unsigned int value[25];
  unsigned int validRangeCount;
};

/* 7655 */
struct NvLogicalGpuHandle__
{
  int unused;
};

/* 7656 */
struct NvUnAttachedDisplayHandle__
{
  int unused;
};

/* 7657 */
struct _NV_GPU_DISPLAYIDS
{
  unsigned int version;
  NV_MONITOR_CONN_TYPE connectorType;
  unsigned int displayId;
  unsigned __int32 isDynamic : 1;
  unsigned __int32 isMultiStreamRootNode : 1;
  unsigned __int32 isActive : 1;
  unsigned __int32 isCluster : 1;
  unsigned __int32 isOSVisible : 1;
  unsigned __int32 isWFD : 1;
  unsigned __int32 isConnected : 1;
  unsigned __int32 reserved : 25;
};

/* 7658 */
struct NV_GPU_DISPLAY_MODE
{
  unsigned int version;
  unsigned int activeWidth;
  unsigned int activeHeight;
  unsigned int totalWidth;
  unsigned int totalHeight;
  unsigned int depth;
  unsigned int frequency;
};

/* 7659 */
struct NV_GPU_FLAT_PANEL_INFO
{
  unsigned int version;
  _NV_GPU_FLATPANEL_SIGNAL_TYPE signalType;
  _NV_GPU_FLATPANEL_SIGNAL_LINK linkType;
  _NV_GPU_FLATPANEL_SIGNAL_DISPLAYPORT_LANES displayPortLanes;
  unsigned int colorFlags;
  unsigned __int32 hdmiCapable : 1;
  unsigned __int32 scalerDisabled : 1;
  unsigned __int32 refreshRateLocked : 1;
};

/* 7660 */
struct _NV_BOARD_INFO
{
  unsigned int version;
  char BoardNum[16];
};

/* 7661 */
struct $2967F9ADF857008EAD5203E062D3EF37
{
  unsigned __int32 bIsPresent : 1;
  unsigned __int32 reserved : 31;
  unsigned int frequency;
};

/* 7662 */
struct NV_GPU_CLOCK_FREQUENCIES_V2
{
  unsigned int version;
  unsigned __int32 ClockType : 2;
  unsigned __int32 reserved : 22;
  unsigned __int32 reserved1 : 8;
  $2967F9ADF857008EAD5203E062D3EF37 domain[32];
};

/* 7663 */
struct $1FFB0EDAA3ED702F04801C4398FCAC30
{
  _NV_GPU_PUBLIC_CLOCK_ID domainId;
  unsigned int domainFlags;
  unsigned int currentFreq;
  unsigned int defaultFreq;
  unsigned int minFreq;
  unsigned int maxFreq;
  unsigned __int32 bSetClock : 1;
};

/* 7664 */
struct $FAC21E01C85902F74ABDA2E965E11B54
{
  unsigned int level;
  unsigned int flags;
  $1FFB0EDAA3ED702F04801C4398FCAC30 domain[32];
};

/* 7665 */
struct NV_GPU_PERF_CLOCK_TABLE
{
  unsigned int version;
  unsigned int levelCount;
  unsigned int gpuPerflevel;
  unsigned int domainCount;
  unsigned int gpuPerfFlags;
  $FAC21E01C85902F74ABDA2E965E11B54 perfLevel[12];
};

/* 7666 */
struct NV_COOLER_TACHOMETER
{
  unsigned int speedRPM;
  char bSupported;
  unsigned int maxSpeedRPM;
  unsigned int minSpeedRPM;
};

/* 7667 */
struct $B7D2321CDD78A089530A180F6D354607
{
  NV_COOLER_TYPE type;
  NV_COOLER_CONTROLLER controller;
  unsigned int defaultMinLevel;
  unsigned int defaultMaxLevel;
  unsigned int currentMinLevel;
  unsigned int currentMaxLevel;
  unsigned int currentLevel;
  NV_COOLER_POLICY defaultPolicy;
  NV_COOLER_POLICY currentPolicy;
  NV_COOLER_TARGET target;
  NV_COOLER_CONTROL controlType;
  NV_COOLER_ACTIVITY_LEVEL active;
  NV_COOLER_TACHOMETER tachometer;
};

/* 7668 */
struct NV_GPU_GETCOOLER_SETTINGS_V3
{
  unsigned int version;
  unsigned int count;
  $B7D2321CDD78A089530A180F6D354607 cooler[20];
};

/* 7669 */
struct $DDB7195CE71C014F6A7703AA200476A9
{
  unsigned int currentLevel;
  NV_COOLER_POLICY currentPolicy;
};

/* 7670 */
struct NV_GPU_SETCOOLER_LEVEL_V2
{
  unsigned int version;
  $DDB7195CE71C014F6A7703AA200476A9 cooler[20];
};

/* 7671 */
struct $5ABF9899634A8368E0A634A5E460F652
{
  unsigned int levelId;
  unsigned int currentLevel;
  unsigned int defaultLevel;
};

/* 7672 */
struct NV_GPU_COOLER_POLICY_TABLE
{
  unsigned int version;
  NV_COOLER_POLICY policy;
  $5ABF9899634A8368E0A634A5E460F652 policyCoolerLevel[24];
};

/* 7673 */
struct $A8C0359685AF2AC6EA3FE17FDA5D3280
{
  _NV_GPU_PUBLIC_CLOCK_ID domainId;
  unsigned int flags;
  unsigned int freq;
};

/* 7674 */
struct $E7C65BD2ACF891AE5AC3D8D3453AA2C6
{
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned int flags;
  unsigned int mvolt;
};

/* 7675 */
struct $5A1F49BF045106C9F3462347E8DCEA01
{
  _NV_GPU_PERF_PSTATE_ID pstateId;
  unsigned int flags;
  $A8C0359685AF2AC6EA3FE17FDA5D3280 clocks[32];
  $E7C65BD2ACF891AE5AC3D8D3453AA2C6 voltages[16];
};

/* 7676 */
struct NV_GPU_PERF_PSTATES_INFO_V2
{
  unsigned int version;
  unsigned int flags;
  unsigned int numPstates;
  unsigned int numClocks;
  unsigned int numVoltages;
  $5A1F49BF045106C9F3462347E8DCEA01 pstates[16];
};

/* 7677 */
struct NV_GPU_PERF_PSTATES20_PARAM_DELTA
{
  int value;
  $9CA192F9DB66A3CB7E01DE78A0DEA53D valueRange;
};

/* 7678 */
struct $98DDB77205874C0FBCC91A34C1CC80BA
{
  unsigned int freq_kHz;
};

/* 7679 */
struct $422DACB9D623A11ECD6E3D578F772225
{
  unsigned int minFreq_kHz;
  unsigned int maxFreq_kHz;
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned int minVoltage_uV;
  unsigned int maxVoltage_uV;
};

/* 7680 */
union $4B788DDFD2F2CFC9549EFAE26BA5A48B
{
  $98DDB77205874C0FBCC91A34C1CC80BA single;
  $422DACB9D623A11ECD6E3D578F772225 range;
};

/* 7681 */
struct NV_GPU_PSTATE20_CLOCK_ENTRY_V1
{
  _NV_GPU_PUBLIC_CLOCK_ID domainId;
  NV_GPU_PERF_PSTATE20_CLOCK_TYPE_ID typeId;
  unsigned __int32 bIsEditable : 1;
  unsigned __int32 reserved : 31;
  NV_GPU_PERF_PSTATES20_PARAM_DELTA freqDelta_kHz;
  $4B788DDFD2F2CFC9549EFAE26BA5A48B data;
};

/* 7682 */
struct NV_GPU_PSTATE20_BASE_VOLTAGE_ENTRY_V1
{
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned __int32 bIsEditable : 1;
  unsigned __int32 reserved : 31;
  unsigned int volt_uV;
  NV_GPU_PERF_PSTATES20_PARAM_DELTA voltDelta_uV;
};

/* 7683 */
struct $F3795E106601E0F24485055A2A0546C8
{
  _NV_GPU_PERF_PSTATE_ID pstateId;
  unsigned __int32 bIsEditable : 1;
  unsigned __int32 reserved : 31;
  NV_GPU_PSTATE20_CLOCK_ENTRY_V1 clocks[8];
  NV_GPU_PSTATE20_BASE_VOLTAGE_ENTRY_V1 baseVoltages[4];
};

/* 7684 */
struct $9006C26F51E876A3C7232E601EA9EA31
{
  unsigned int numVoltages;
  NV_GPU_PSTATE20_BASE_VOLTAGE_ENTRY_V1 voltages[4];
};

/* 7685 */
struct _NV_GPU_PERF_PSTATES20_INFO_V2
{
  unsigned int version;
  unsigned __int32 bIsEditable : 1;
  unsigned __int32 reserved : 31;
  unsigned int numPstates;
  unsigned int numClocks;
  unsigned int numBaseVoltages;
  $F3795E106601E0F24485055A2A0546C8 pstates[16];
  $9006C26F51E876A3C7232E601EA9EA31 ov;
};

/* 7686 */
struct NV_GPU_PERF_POLICIES_INFO_PARAMS_V1
{
  unsigned int version;
  unsigned int supportedPointMask;
  unsigned int supportedPolicyMask;
  unsigned int rsvd[16];
};

/* 7687 */
struct NV_GPU_PERF_POLICY_STATUS_V1
{
  unsigned int perfPointMask;
  unsigned __int64 perfPointTimeNs[6];
  unsigned int rsvd[8];
};

/* 7688 */
struct NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1
{
  unsigned int version;
  unsigned int requestedPolicyMask;
  unsigned __int64 referenceTimeNs;
  unsigned int limitingPoliciesMask;
  NV_GPU_PERF_POLICY_STATUS_V1 global;
  NV_GPU_PERF_POLICY_STATUS_V1 policies[12];
  unsigned int rsvd[48];
};

/* 7689 */
struct $CDEC7010D6D15894C8AF725C46E551CB
{
  unsigned __int32 bIsPresent : 1;
  unsigned int percentage;
};

/* 7690 */
struct NV_GPU_DYNAMIC_PSTATES_INFO_EX
{
  unsigned int version;
  unsigned int flags;
  $CDEC7010D6D15894C8AF725C46E551CB utilization[8];
};

/* 7691 */
struct $872BA6997EE1994483CCD2C803516C06
{
  unsigned int flags;
  unsigned int mvolt;
};

/* 7692 */
struct $93622030B7BA8C9E0D2E53070C204E19
{
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned int flags;
  unsigned int numVoltages;
  $872BA6997EE1994483CCD2C803516C06 voltages[128];
};

/* 7693 */
struct NV_GPU_PERF_VOLTAGES
{
  unsigned int version;
  unsigned int flags;
  unsigned int numDomains;
  $93622030B7BA8C9E0D2E53070C204E19 domains[16];
};

/* 7694 */
struct $76954872C66CE3FD7BE4E2217D08CDD8
{
  NV_THERMAL_CONTROLLER controller;
  int defaultMinTemp;
  int defaultMaxTemp;
  int currentTemp;
  NV_THERMAL_TARGET target;
};

/* 7695 */
struct NV_GPU_THERMAL_SETTINGS_V2
{
  unsigned int version;
  unsigned int count;
  $76954872C66CE3FD7BE4E2217D08CDD8 sensor[3];
};

/* 7696 */
struct __declspec(align(4)) NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_INFO_V2
{
  NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_ID policyId;
  NV_GPU_CLIENT_THERMAL_READING_ID channelId;
  int thermalLimitMin;
  int thermalLimitDefault;
  int thermalLimitMax;
  __int8 acousticPreferenceAvailable : 1;
  __int8 reserved : 7;
};

/* 7697 */
struct _NV_GPU_CLIENT_THERMAL_POLICIES_INFO_V2
{
  unsigned int version;
  __int8 isSupported : 1;
  __int8 reserved : 7;
  char numPolicies;
  NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_INFO_V2 policies[4];
};

/* 7698 */
struct __declspec(align(4)) _NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_STATUS_V2
{
  NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_ID policyId;
  int thermalLimit;
  __int8 preferAcoustics : 1;
  __int8 reserved : 7;
};

/* 7699 */
struct _NV_GPU_CLIENT_THERMAL_POLICIES_STATUS_V2
{
  unsigned int version;
  char numPolicies;
  _NV_GPU_CLIENT_THERMAL_POLICIES_POLICY_STATUS_V2 policies[4];
};

/* 7700 */
struct _NV_GPU_DITHER_CONTROL_V1
{
  unsigned int version;
  _NVAPI_DITHER_TYPE ditherEnable;
  _NVAPI_DITHER_BITS ditherBitDepth;
  _NVAPI_DITHER_MODE ditherMode;
  unsigned int ditherBitDepths;
  unsigned int ditherModes;
};

/* 7701 */
struct _NVAPI_CSC_MATRIX
{
  unsigned __int32 useCustomMatrix : 1;
  unsigned __int32 reserved : 31;
  float aCSCCoeff[3][4];
};

/* 7702 */
struct _NV_GPU_COLORSPACE_CONVERSION_V1
{
  unsigned int version;
  _NV_STANDARD_COLORSPACE sourceColorSpace;
  _NV_STANDARD_COLORSPACE outputColorSpace;
  unsigned int flags;
  unsigned int clientID;
  _NVAPI_CSC_MATRIX MatrixPre;
  _NVAPI_CSC_MATRIX MatrixPost;
};

/* 7703 */
union $A0A761839A47BD11BF3B303A6C31496D
{
  unsigned int displayOutputTargetMask;
  unsigned int displayId;
};

/* 7704 */
struct __declspec(align(8)) NV_GPU_TOPOLOGY_V2
{
  unsigned int version;
  unsigned int gpuCount;
  NvPhysicalGpuHandle__ *hPhysicalGpu[8];
  unsigned int displayGpuIndex;
  $A0A761839A47BD11BF3B303A6C31496D ___u4;
  unsigned int noDisplayGpuMask;
  unsigned int flags;
  unsigned int status;
};

/* 7705 */
struct __declspec(align(8)) NV_SLI_GROUP
{
  unsigned int version;
  unsigned __int64 topologyMask;
  unsigned int flags;
};

/* 7706 */
struct NV_GPU_TOPOLOGIES
{
  unsigned int version;
  unsigned int gpuTopoCount;
  NV_GPU_TOPOLOGY_V2 gpuTopo[256];
  unsigned int sliGroupCount;
  NV_SLI_GROUP sliGroup[256];
};

/* 7707 */
struct __declspec(align(8)) NV_I2C_INFO_V3
{
  unsigned int version;
  unsigned int displayMask;
  char bIsDDCPort;
  char i2cDevAddress;
  char *pbI2cRegAddress;
  unsigned int regAddrSize;
  char *pbData;
  unsigned int cbSize;
  unsigned int i2cSpeed;
  NV_I2C_SPEED i2cSpeedKhz;
  char portId;
  unsigned int bIsPortIdSet;
};

/* 7708 */
struct NV_I2C_INFO_EX
{
  unsigned int flags;
  unsigned int encrClientID;
};

/* 7709 */
struct $8F8B1FF37B6B19987690045AD8F99965
{
  unsigned int displayMask;
};

/* 7710 */
struct $1211F6E03DC85995226816F48BC2DDF2
{
  unsigned __int32 isDP2DVI : 1;
  unsigned __int32 isDP2HDMI : 1;
  unsigned __int32 reserved : 30;
};

/* 7711 */
struct NV_NVAPI_GET_DP_DONGLE_INFO
{
  unsigned int version;
  $8F8B1FF37B6B19987690045AD8F99965 input;
  $1211F6E03DC85995226816F48BC2DDF2 output;
};

/* 7712 */
struct _NV_GPU_VOLTAGE_DOMAIN_INFO_V1
{
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned int stepSizeuV;
};

/* 7713 */
struct _NV_GPU_VOLTAGE_DOMAINS_INFO_V1
{
  unsigned int version;
  unsigned int flags;
  unsigned int numDomains;
  _NV_GPU_VOLTAGE_DOMAIN_INFO_V1 domains[16];
};

/* 7714 */
struct NV_GPU_VOLTAGE_DOMAIN_STATUS_V1
{
  _NV_GPU_PERF_VOLTAGE_INFO_DOMAIN_ID domainId;
  unsigned int voltageuV;
};

/* 7715 */
struct NV_GPU_VOLTAGE_DOMAINS_STATUS_V1
{
  unsigned int version;
  unsigned int flags;
  unsigned int numDomains;
  NV_GPU_VOLTAGE_DOMAIN_STATUS_V1 domains[16];
};

/* 7716 */
struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_INFO_V1
{
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
};

/* 7717 */
struct NV_GPU_CLIENT_POWER_TOPOLOGY_INFO_V1
{
  unsigned int version;
  char bSupported;
  char numChannels;
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_INFO_V1 channels[4];
};

/* 7718 */
struct NV_GPU_CLIENT_POWER_READING_V1
{
  unsigned __int32 bMilliWattValid : 1;
  unsigned __int32 reserved : 31;
  unsigned int mp;
  unsigned int mW;
};

/* 7719 */
struct NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_STATUS_V1
{
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
  NV_GPU_CLIENT_POWER_READING_V1 power;
};

/* 7720 */
struct NV_GPU_CLIENT_POWER_TOPOLOGY_STATUS_V1
{
  unsigned int version;
  char numChannels;
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_STATUS_V1 channels[4];
};

/* 7721 */
struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_INFO_V1
{
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID policyId;
  NV_GPU_CLIENT_POWER_TOPOLOGY_CHANNEL_ID channelId;
  NV_GPU_CLIENT_POWER_READING_V1 powerLimitMin;
  NV_GPU_CLIENT_POWER_READING_V1 powerLimitDefault;
  NV_GPU_CLIENT_POWER_READING_V1 powerLimitMax;
};

/* 7722 */
struct NV_GPU_CLIENT_POWER_POLICIES_INFO_V1
{
  unsigned int version;
  char bSupported;
  char numPolicies;
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_INFO_V1 policies[4];
};

/* 7723 */
struct NV_GPU_CLIENT_POWER_POLICIES_POLICY_STATUS_V1
{
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_ID policyId;
  NV_GPU_CLIENT_POWER_READING_V1 powerLimit;
};

/* 7724 */
struct NV_GPU_CLIENT_POWER_POLICIES_STATUS_V1
{
  unsigned int version;
  char numPolicies;
  NV_GPU_CLIENT_POWER_POLICIES_POLICY_STATUS_V1 policies[4];
};

/* 7725 */
struct NV_GPU_GPIO_LEGAL_PINS
{
  unsigned int version;
  unsigned int gpioPinCount;
  unsigned int gpioLegalPins[32];
};

/* 7726 */
struct NV_GPU_GPIO_PIN_DATA
{
  unsigned int version;
  unsigned int gpioPinNumber;
  unsigned int gpioDataReadWrite;
  NVAPI_GPIO_DIRECTION gpioDirection;
};

/* 7727 */
struct NV_GPU_GET_HDCP_SUPPORT_STATUS
{
  unsigned int version;
  _NV_GPU_HDCP_FUSE_STATE hdcpFuseState;
  _NV_GPU_HDCP_KEY_SOURCE hdcpKeySource;
  _NV_GPU_HDCP_KEY_SOURCE_STATE hdcpKeySourceState;
};

/* 7728 */
struct _NV_DP_BRANCH_DEVICE_PORTS_INFO
{
  unsigned __int16 validPortsMask;
  unsigned __int16 inputPortsMask;
  unsigned __int16 internalPortsMask;
};

/* 7729 */
struct _NV_DP_ADDRESS
{
  unsigned int hopCount;
  unsigned int hop[15];
};

/* 7730 */
struct NvGUID
{
  unsigned int data1;
  unsigned __int16 data2;
  unsigned __int16 data3;
  char data4[8];
};

/* 7731 */
struct NV_DP_NODE_FLAGS
{
  unsigned __int64 isOsVisible : 1;
  unsigned __int64 isStreamCloned : 1;
  unsigned __int64 reservedDD : 30;
  unsigned __int64 isMultistream : 1;
  unsigned __int64 isVideoSink : 1;
  unsigned __int64 isAudioSink : 1;
  unsigned __int64 isLoop : 1;
  unsigned __int64 isRedundant : 1;
  unsigned __int64 isMustDisconnect : 1;
  unsigned __int64 isZombie : 1;
  unsigned __int64 isCableOk : 1;
  unsigned __int64 isPowerSuspended : 1;
  unsigned __int64 isActive : 1;
  unsigned __int64 isHdcpCapable : 1;
  unsigned __int64 isPathHdcpCapable : 1;
  unsigned __int64 isHdcpActive : 1;
  unsigned __int64 isRevoked : 1;
  unsigned __int64 reservedLibrary : 18;
};

/* 7732 */
struct __declspec(align(8)) _NV_DP_NODE_INFO
{
  unsigned int version;
  unsigned int displayId;
  _NV_DP_BRANCH_DEVICE_PORTS_INFO branchDevicePortsInfo;
  _NV_DP_ADDRESS auxAddress;
  NvGUID guid;
  NV_DP_NODE_FLAGS flags;
  _NV_DP_NODE_TYPE nodeType;
};

/* 7733 */
struct _NV_GPS_GET_THERMAL_LIMIT_PARM
{
  unsigned int version;
  NV_GPS_SENSOR_INDEX sensorIndex;
  unsigned int limit;
  unsigned int lowerBound;
  unsigned int upperBound;
  NV_GPS_THERM_LIMIT_SRC limitSource;
};

/* 7734 */
struct _NV_GPS_SET_THERMAL_LIMIT_PARM
{
  unsigned int version;
  NV_GPS_SENSOR_INDEX sensorIndex;
  unsigned int newLimit;
};

/* 7735 */
struct _NV_GPS_GET_PERF_SENSOR_COUNTERS_PARAM_V1
{
  unsigned int version;
  unsigned int objHndl;
  unsigned __int16 blockId;
  unsigned int nextExpectedSampleTime;
  unsigned int countersReq;
  unsigned int countersReturned;
  unsigned int counterBlock[32];
};

/* 7736 */
struct NV_PCLK_RANGE
{
  unsigned int uMaxPixClk;
  unsigned int uMinPixClk;
};

/* 7737 */
struct NV_GET_PCLK
{
  unsigned int uOrgPixelClock;
  unsigned int uCurrPixelClock;
  unsigned int uCurrSpreadSpectrum;
  NV_PCLK_RANGE uFineAdjustBounds;
  NV_PCLK_RANGE uCourseAdjustBounds;
};

/* 7738 */
struct NV_SET_PCLK
{
  NV_PCLK_RANGE uAllowedRanges[10];
  NV_PCLK_RANGE uDisallowedRanges[10];
};

/* 7739 */
struct NV_GPU_ECC_STATUS_INFO
{
  unsigned int version;
  unsigned __int32 isSupported : 1;
  _NV_ECC_CONFIGURATION configurationOptions;
  unsigned __int32 isEnabled : 1;
};

/* 7740 */
struct $4A90A34DA496A580581F78BD9386ECBD
{
  unsigned __int64 singleBitErrors;
  unsigned __int64 doubleBitErrors;
};

/* 7741 */
struct NV_GPU_ECC_ERROR_INFO
{
  unsigned int version;
  $4A90A34DA496A580581F78BD9386ECBD current;
  $4A90A34DA496A580581F78BD9386ECBD aggregate;
};

/* 7742 */
struct NV_GPU_ECC_CONFIGURATION_INFO
{
  unsigned int version;
  unsigned __int32 isEnabled : 1;
  unsigned __int32 isEnabledByDefault : 1;
};

/* 7743 */
union $8DB7E5A2600512E767041A9E6E7100BE
{
  void (__cdecl *nvThermalCallback)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL, void *);
  void (__cdecl *nvFanSpeedCallback)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL, void *);
};

/* 7744 */
struct NV_EVENT_REGISTER_CALLBACK
{
  unsigned int version;
  NV_EVENT_TYPE eventId;
  void *callbackParam;
  $8DB7E5A2600512E767041A9E6E7100BE nvCallBackFunc;
};

/* 7745 */
struct NvEventHandle__
{
  int unused;
};

/* 7746 */
struct __declspec(align(8)) NV_SCANOUT_INTENSITY_DATA_V2
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  float *blendingTexture;
  float *offsetTexture;
  unsigned int offsetTexChannels;
};

/* 7747 */
struct _NV_SCANOUT_INTENSITY_STATE_DATA
{
  unsigned int version;
  unsigned int bEnabled;
};

/* 7748 */
struct NvSBox
{
  int sX;
  int sY;
  int sWidth;
  int sHeight;
};

/* 7749 */
struct NV_SCANOUT_WARPING_DATA
{
  unsigned int version;
  float *vertices;
  NV_GPU_WARPING_VERTICE_FORMAT vertexFormat;
  int numVertices;
  NvSBox *textureRect;
};

/* 7750 */
struct _NV_SCANOUT_WARPING_STATE_DATA
{
  unsigned int version;
  unsigned int bEnabled;
};

/* 7751 */
struct _NV_GPU_QUERY_ILLUMINATION_SUPPORT_PARM_V1
{
  unsigned int version;
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  unsigned int bSupported;
};

/* 7752 */
struct _NV_GPU_GET_ILLUMINATION_PARM_V1
{
  unsigned int version;
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  unsigned int Value;
};

/* 7753 */
struct _NV_GPU_SET_ILLUMINATION_PARM_V1
{
  unsigned int version;
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  _NV_GPU_ILLUMINATION_ATTRIB Attribute;
  unsigned int Value;
};

/* 7754 */
struct NV_DISPLAY_PORT_INFO
{
  unsigned int version;
  unsigned int dpcd_ver;
  _NV_DP_LINK_RATE maxLinkRate;
  _NV_DP_LANE_COUNT maxLaneCount;
  _NV_DP_LINK_RATE curLinkRate;
  _NV_DP_LANE_COUNT curLaneCount;
  _NV_DP_COLOR_FORMAT colorFormat;
  _NV_DP_DYNAMIC_RANGE dynamicRange;
  _NV_DP_COLORIMETRY colorimetry;
  _NV_DP_BPC bpc;
  unsigned __int32 isDp : 1;
  unsigned __int32 isInternalDp : 1;
  unsigned __int32 isColorCtrlSupported : 1;
  unsigned __int32 is6BPCSupported : 1;
  unsigned __int32 is8BPCSupported : 1;
  unsigned __int32 is10BPCSupported : 1;
  unsigned __int32 is12BPCSupported : 1;
  unsigned __int32 is16BPCSupported : 1;
  unsigned __int32 isYCrCb422Supported : 1;
  unsigned __int32 isYCrCb444Supported : 1;
};

/* 7755 */
struct NV_DISPLAY_PORT_CONFIG
{
  unsigned int version;
  _NV_DP_LINK_RATE linkRate;
  _NV_DP_LANE_COUNT laneCount;
  _NV_DP_COLOR_FORMAT colorFormat;
  _NV_DP_DYNAMIC_RANGE dynamicRange;
  _NV_DP_COLORIMETRY colorimetry;
  _NV_DP_BPC bpc;
  unsigned __int32 isHPD : 1;
  unsigned __int32 isSetDeferred : 1;
  unsigned __int32 isChromaLpfOff : 1;
  unsigned __int32 isDitherOff : 1;
  unsigned __int32 testLinkTrain : 1;
  unsigned __int32 testColorChange : 1;
};

/* 7756 */
struct NV_HDMI_SUPPORT_INFO
{
  unsigned int version;
  unsigned __int32 isGpuHDMICapable : 1;
  unsigned __int32 isMonUnderscanCapable : 1;
  unsigned __int32 isMonBasicAudioCapable : 1;
  unsigned __int32 isMonYCbCr444Capable : 1;
  unsigned __int32 isMonYCbCr422Capable : 1;
  unsigned __int32 isMonxvYCC601Capable : 1;
  unsigned __int32 isMonxvYCC709Capable : 1;
  unsigned __int32 isMonHDMI : 1;
  unsigned int EDID861ExtRev;
};

/* 7757 */
struct NV_HDMI_STEREO_MODE
{
  unsigned __int16 HVisible;
  unsigned __int16 VVisible;
  unsigned __int16 HActive;
  unsigned __int16 VActive;
  unsigned __int16 VActiveSpace[2];
  unsigned __int16 rr;
  NV_HDMI_STEREO_TYPE stereoType;
};

/* 7758 */
struct NV_HDMI_STEREO_MODES_LIST_V1
{
  unsigned int version;
  unsigned int displayId;
  unsigned __int16 enumIndex;
  unsigned __int16 count;
  unsigned int width;
  unsigned int height;
  unsigned int refreshRate;
  unsigned __int32 bMatchDimension : 1;
  unsigned __int32 bMatchRR : 1;
  unsigned __int32 bPassThroughMode : 1;
  unsigned __int32 reserved : 29;
  unsigned __int16 numberOfModes;
  NV_HDMI_STEREO_MODE modeList[256];
};

/* 7759 */
struct NV_INFOFRAME_HEADER
{
  char type;
  char version;
  char length;
};

/* 7760 */
struct NV_AUDIO_INFOFRAME
{
  __int8 channelCount : 3;
  __int8 rsvd_bits_byte1 : 1;
  __int8 codingType : 4;
  __int8 sampleSize : 2;
  __int8 sampleRate : 3;
  __int8 rsvd_bits_byte2 : 3;
  __int8 codingExtensionType : 5;
  __int8 rsvd_bits_byte3 : 3;
  char speakerPlacement;
  __int8 lfePlaybackLevel : 2;
  __int8 rsvd_bits_byte5 : 1;
  __int8 levelShift : 4;
  __int8 downmixInhibit : 1;
  char rsvd_byte6;
  char rsvd_byte7;
  char rsvd_byte8;
  char rsvd_byte9;
  char rsvd_byte10;
};

/* 7761 */
struct NV_VIDEO_INFOFRAME
{
  __int8 scanInfo : 2;
  __int8 barInfo : 2;
  __int8 activeFormatInfoPresent : 1;
  __int8 colorSpace : 2;
  __int8 rsvd_bits_byte1 : 1;
  __int8 activeFormatAspectRatio : 4;
  __int8 picAspectRatio : 2;
  __int8 colorimetry : 2;
  __int8 nonuniformScaling : 2;
  __int8 rgbQuantizationRange : 2;
  __int8 extendedColorimetry : 3;
  __int8 itContent : 1;
  __int8 vic : 7;
  __int8 rsvd_bits_byte4 : 1;
  __int8 pixelRepeat : 4;
  __int8 contentTypes : 2;
  __int8 yccQuantizationRange : 2;
  char topBarLow;
  char topBarHigh;
  char bottomBarLow;
  char bottomBarHigh;
  char leftBarLow;
  char leftBarHigh;
  char rightBarLow;
  char rightBarHigh;
};

/* 7762 */
union $EA32965FDF2B6D2C306E005D7D57055B
{
  NV_AUDIO_INFOFRAME audio;
  NV_VIDEO_INFOFRAME video;
};

/* 7763 */
struct NV_INFOFRAME
{
  NV_INFOFRAME_HEADER header;
  $EA32965FDF2B6D2C306E005D7D57055B u;
};

/* 7764 */
struct _NV_INFOFRAME_STATE
{
  unsigned __int32 bDisabled : 1;
  unsigned __int32 bDriverCtrl : 1;
  unsigned __int32 reserved : 30;
};

/* 7765 */
struct NV_INFOFRAME_PROPERTY
{
  unsigned __int32 mode : 4;
  unsigned __int32 blackList : 2;
  unsigned __int32 reserved : 10;
  unsigned __int32 version : 8;
  unsigned __int32 length : 8;
};

/* 7766 */
struct NV_INFOFRAME_AUDIO
{
  unsigned __int32 codingType : 5;
  unsigned __int32 codingExtensionType : 6;
  unsigned __int32 sampleSize : 3;
  unsigned __int32 sampleRate : 4;
  unsigned __int32 channelCount : 4;
  unsigned __int32 speakerPlacement : 9;
  unsigned __int32 downmixInhibit : 2;
  unsigned __int32 lfePlaybackLevel : 3;
  unsigned __int32 levelShift : 5;
  unsigned __int32 Future12 : 2;
  unsigned __int32 Future2x : 4;
  unsigned __int32 Future3x : 4;
  unsigned __int32 Future52 : 2;
  unsigned __int32 Future6 : 9;
  unsigned __int32 Future7 : 9;
  unsigned __int32 Future8 : 9;
  unsigned __int32 Future9 : 9;
  unsigned __int32 Future10 : 9;
};

/* 7767 */
struct NV_INFOFRAME_VIDEO
{
  unsigned __int32 vic : 8;
  unsigned __int32 pixelRepeat : 5;
  unsigned __int32 colorSpace : 3;
  unsigned __int32 colorimetry : 3;
  unsigned __int32 extendedColorimetry : 4;
  unsigned __int32 rgbQuantizationRange : 3;
  unsigned __int32 yccQuantizationRange : 3;
  unsigned __int32 itContent : 2;
  unsigned __int32 contentTypes : 3;
  unsigned __int32 scanInfo : 3;
  unsigned __int32 activeFormatInfoPresent : 2;
  unsigned __int32 activeFormatAspectRatio : 5;
  unsigned __int32 picAspectRatio : 3;
  unsigned __int32 nonuniformScaling : 3;
  unsigned __int32 barInfo : 3;
  unsigned __int32 top_bar : 17;
  unsigned __int32 bottom_bar : 17;
  unsigned __int32 left_bar : 17;
  unsigned __int32 right_bar : 17;
  unsigned __int32 Future17 : 2;
  unsigned __int32 Future47 : 2;
};

/* 7768 */
union $049994686955FA250DFC82A5FB8D3FA7
{
  NV_INFOFRAME_PROPERTY property;
  NV_INFOFRAME_AUDIO audio;
  NV_INFOFRAME_VIDEO video;
};

/* 7769 */
struct NV_INFOFRAME_DATA
{
  unsigned int version;
  unsigned __int16 size;
  char cmd;
  char type;
  $049994686955FA250DFC82A5FB8D3FA7 infoframe;
};

/* 7770 */
struct $A5A76D0751E306F1617F4F8DACBEFB52
{
  char colorFormat;
  char colorimetry;
};

/* 7771 */
struct __declspec(align(4)) NV_COLOR_DATA
{
  unsigned int version;
  unsigned __int16 size;
  char cmd;
  $A5A76D0751E306F1617F4F8DACBEFB52 data;
};

/* 7772 */
struct NV_VIRTUALMODE_INFO
{
  unsigned __int32 isCapableOfVirtualMode : 1;
  unsigned __int32 isInVirtualMode : 1;
  unsigned __int32 reserved : 30;
};

/* 7773 */
union $DC93B181A743D6C62B73B50487B8C860
{
  NV_VIRTUALMODE_INFO virtualModeInfo;
};

/* 7774 */
struct NV_VIRTUALMODE_DATA
{
  unsigned int version;
  NV_VIRTUALMODE_CMD cmd;
  $DC93B181A743D6C62B73B50487B8C860 data;
};

/* 7775 */
struct _NV_DISPLAY_MODE_INFO
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int refreshRate1K;
  unsigned __int32 preferred : 1;
  unsigned __int32 reserved : 31;
};

/* 7776 */
struct NV_DISPLAY_DVC_INFO
{
  unsigned int version;
  unsigned int currentLevel;
  unsigned int minLevel;
  unsigned int maxLevel;
};

/* 7777 */
struct NV_DISPLAY_DVC_INFO_EX
{
  unsigned int version;
  int currentLevel;
  int minLevel;
  int maxLevel;
  int defaultLevel;
};

/* 7778 */
struct NV_DISPLAY_HUE_INFO
{
  unsigned int version;
  unsigned int currentHueAngle;
  unsigned int defaultHueAngle;
};

/* 7779 */
struct NV_DISPLAY_IMAGE_SHARPENING_INFO
{
  unsigned int version;
  unsigned int currentLevel;
  unsigned int minLevel;
  unsigned int maxLevel;
};

/* 7780 */
struct $13A640FD96384EE4AFA230DAAD9FD630
{
  unsigned int defaultLevel;
  unsigned int currentLevel;
  unsigned int minLevel;
  unsigned int maxLevel;
};

/* 7781 */
struct NV_TV_ENCODER_CONTROLS
{
  unsigned int version;
  $13A640FD96384EE4AFA230DAAD9FD630 flicker;
  $13A640FD96384EE4AFA230DAAD9FD630 saturation;
};

/* 7782 */
struct $61AFAF7C75EA4367E0DBADF714F35922
{
  unsigned __int32 isInterlaced : 4;
  unsigned __int32 reserved0 : 12;
  unsigned __int32 : 16;
  unsigned __int32 tvFormat : 8;
  unsigned __int32 : 24;
  unsigned __int32 scaling : 8;
};

/* 7783 */
struct $8805127EC27D1E9C17713C1C8B4EB2EE
{
  _BYTE gap0[4];
  unsigned __int32 ceaId : 8;
};

/* 7784 */
struct $DC7A541B450CB0765955C3307DCD7AC9
{
  _BYTE gap0[4];
  unsigned __int32 nvPsfId : 8;
};

/* 7785 */
union $BE4037AA5DFB3E9E7069606D8DC73DEF
{
  $61AFAF7C75EA4367E0DBADF714F35922 __s0;
  $8805127EC27D1E9C17713C1C8B4EB2EE __s1;
  $DC7A541B450CB0765955C3307DCD7AC9 __s2;
};

/* 7786 */
struct NV_TIMING_FLAG
{
  $BE4037AA5DFB3E9E7069606D8DC73DEF ___u0;
};

/* 7787 */
struct _NV_TIMING_INPUT
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  float rr;
  NV_TIMING_FLAG flag;
  _NV_TIMING_OVERRIDE type;
};

/* 7788 */
struct _NV_MONITOR_CAPS_VSDB
{
  __int8 sourcePhysicalAddressB : 4;
  __int8 sourcePhysicalAddressA : 4;
  __int8 sourcePhysicalAddressD : 4;
  __int8 sourcePhysicalAddressC : 4;
  __int8 supportDualDviOperation : 1;
  __int8 reserved6 : 2;
  __int8 supportDeepColorYCbCr444 : 1;
  __int8 supportDeepColor30bits : 1;
  __int8 supportDeepColor36bits : 1;
  __int8 supportDeepColor48bits : 1;
  __int8 supportAI : 1;
  char maxTmdsClock;
  __int8 cnc0SupportGraphicsTextContent : 1;
  __int8 cnc1SupportPhotoContent : 1;
  __int8 cnc2SupportCinemaContent : 1;
  __int8 cnc3SupportGameContent : 1;
  __int8 reserved8 : 1;
  __int8 hasVicEntries : 1;
  __int8 hasInterlacedLatencyField : 1;
  __int8 hasLatencyField : 1;
  char videoLatency;
  char audioLatency;
  char interlacedVideoLatency;
  char interlacedAudioLatency;
  __int8 reserved13 : 7;
  __int8 has3dEntries : 1;
  __int8 hdmi3dLength : 5;
  __int8 hdmiVicLength : 3;
  char hdmi_vic[7];
  char hdmi_3d[31];
};

/* 7789 */
struct _NV_MONITOR_CAPS_VCDB
{
  __int8 quantizationRangeYcc : 1;
  __int8 quantizationRangeRgb : 1;
  __int8 scanInfoPreferredVideoFormat : 2;
  __int8 scanInfoITVideoFormats : 2;
  __int8 scanInfoCEVideoFormats : 2;
};

/* 7790 */
union $07FD22A00D87862D176A463657378545
{
  _NV_MONITOR_CAPS_VSDB vsdb;
  _NV_MONITOR_CAPS_VCDB vcdb;
};

/* 7791 */
struct __declspec(align(4)) _NV_MONITOR_CAPABILITIES
{
  unsigned int version;
  unsigned __int16 size;
  unsigned int infoType;
  unsigned int connectorType;
  __int8 bIsValidInfo : 1;
  $07FD22A00D87862D176A463657378545 data;
};

/* 7792 */
struct _NV_MONITOR_COLOR_DATA
{
  unsigned int version;
  _NV_DP_COLOR_FORMAT colorFormat;
  _NV_DP_BPC backendBitDepths;
};

/* 7793 */
struct NV_CUSTOM_DISPLAY
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  _NV_FORMAT colorFormat;
  NV_VIEWPORTF srcPartition;
  float xRatio;
  float yRatio;
  _NV_TIMING timing;
  unsigned __int32 hwModeSetOnly : 1;
};

/* 7794 */
struct NV_UNDERSCAN_CAP
{
  unsigned int version;
  float xRatioMin;
  float xRatioMax;
  float yRatioMin;
  float yRatioMax;
  unsigned __int32 supportSourceUnderscan : 1;
  unsigned __int32 supportScalerUnderscan : 1;
  unsigned __int32 supportMonitorIdMatch : 1;
  unsigned __int32 supportDisplayOutputIdMatch : 1;
  unsigned __int32 supportXYIndependentCtrl : 1;
  unsigned __int32 isSourceUnderscanRecommended : 1;
  unsigned __int32 isScalerUnderscanRecommended : 1;
};

/* 7795 */
struct NV_UNDERSCAN_CONFIG
{
  unsigned int version;
  float xRatio;
  float yRatio;
  unsigned int nativeWidth;
  unsigned int nativeHeight;
  unsigned int nativeRR;
  unsigned __int32 isInterlaced : 1;
  unsigned __int32 isScalerUnderscan : 1;
  unsigned __int32 isOnThisMonitorOnly : 1;
  unsigned __int32 isOnThisDisplayOutputIdOnly : 1;
  unsigned __int32 isEnabled : 1;
  unsigned __int32 reserved : 27;
};

/* 7796 */
struct _NV_DISPLAY_FEATURE
{
  unsigned __int32 enableScalerUnderscan : 1;
  unsigned __int32 enableCEoverHDMI : 1;
  unsigned __int32 reservedOEM : 1;
  unsigned __int32 isDriverCtrlCEoverHDMI : 1;
  unsigned __int32 reserved : 28;
};

/* 7797 */
struct _NV_DPCD_PARAMS_V2
{
  unsigned int version;
  unsigned int displayId;
  _NV_DPCD_CMD cmd;
  unsigned int addr;
  char data[16];
  unsigned int size;
  _NV_DPCD_REPLY_TYPE replyType;
  _NV_DP_ADDRESS auxAddress;
};

/* 7798 */
struct NV_COPROC_FLAGS_EX
{
  unsigned int version;
  unsigned __int32 is_IGPU_MODE_ONLY : 1;
  unsigned __int32 is_DGPU_MODE_ONLY : 1;
  unsigned __int32 reserved : 30;
};

/* 7799 */
struct NV_COPROC_APP_INFO
{
  unsigned int version;
  unsigned int appStatus;
};

/* 7800 */
struct NV_HYBRID_APP_INFO
{
  unsigned int version;
  char appName[256];
  char friendlyName[256];
};

/* 7801 */
struct _NV_PIVOT_V1
{
  unsigned int version;
  _NV_TIMING timing;
  _NV_DP_COLOR_FORMAT colorFormat;
  _NV_DP_BPC backendBitDepth;
};

/* 7802 */
struct __declspec(align(8)) _NV_CLUSTER_V1
{
  unsigned int version;
  unsigned int id;
  unsigned int displayId;
  unsigned int priority;
  _NV_PIVOT_V1 pivot;
  _NV_CLUSTER_TYPE type;
  _NV_CLUSTER_DISCOVERY_MODE discoveryMode;
  _NV_CLUSTER_STATE state;
  unsigned int numOfNodeEntries;
  _NV_DP_NODE_INFO *pDPNodeEntries;
  unsigned __int32 isCEDevice : 1;
  unsigned __int32 isAudioCapable : 1;
  unsigned __int32 reserved : 30;
};

/* 7803 */
struct _NV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1
{
  unsigned int version;
  _NV_ROTATE rotation;
  _NV_SCALING scaling;
  unsigned int refreshRate1K;
  unsigned __int32 interlaced : 1;
  unsigned __int32 primary : 1;
  unsigned __int32 reserved : 30;
  _NV_GPU_CONNECTOR_TYPE connector;
  _NV_DISPLAY_TV_FORMAT tvFormat;
  _NV_TIMING_OVERRIDE timingOverride;
  _NV_TIMING timing;
};

/* 7804 */
struct __declspec(align(8)) _NV_DISPLAYCONFIG_PATH_TARGET_INFO_V2
{
  unsigned int displayId;
  _NV_DISPLAYCONFIG_PATH_ADVANCED_TARGET_INFO_V1 *details;
  unsigned int targetId;
};

/* 7805 */
struct _NV_RESOLUTION
{
  unsigned int width;
  unsigned int height;
  unsigned int colorDepth;
};

/* 7806 */
struct _NV_POSITION
{
  int x;
  int y;
};

/* 7807 */
struct _NV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1
{
  _NV_RESOLUTION resolution;
  _NV_FORMAT colorFormat;
  _NV_POSITION position;
  _NV_DISPLAYCONFIG_SPANNING_ORIENTATION spanningOrientation;
  unsigned __int32 bGDIPrimary : 1;
  unsigned __int32 bSLIFocus : 1;
  unsigned __int32 reserved : 30;
};

/* 7808 */
union $229D68C1EBF1FEF4899E8AEF7CD422F1
{
  unsigned int sourceId;
  unsigned int reserved_sourceId;
};

/* 7809 */
struct _NV_DISPLAYCONFIG_PATH_INFO
{
  unsigned int version;
  $229D68C1EBF1FEF4899E8AEF7CD422F1 ___u1;
  unsigned int targetInfoCount;
  _NV_DISPLAYCONFIG_PATH_TARGET_INFO_V2 *targetInfo;
  _NV_DISPLAYCONFIG_SOURCE_MODE_INFO_V1 *sourceModeInfo;
  unsigned __int32 IsNonNVIDIAAdapter : 1;
  unsigned __int32 reserved : 31;
  void *pOSAdapterID;
};

/* 7810 */
struct NV_DISPLAY_TARGET_ORIGIN
{
  unsigned __int32 gvo : 1;
  unsigned __int32 sdtv : 1;
  unsigned __int32 lenovoSlowRefreshRate : 1;
  unsigned __int32 virtualMode : 1;
  unsigned __int32 hybridList : 1;
  unsigned __int32 nbsi : 1;
  unsigned __int32 infStandard : 1;
  unsigned __int32 infCustom : 1;
  unsigned __int32 hdtv : 1;
  unsigned __int32 fallbackNvmode : 1;
  unsigned __int32 fallbackHdtv : 1;
  unsigned __int32 underscan : 1;
  unsigned __int32 custom : 1;
  unsigned __int32 osAdditionalMode : 1;
  unsigned __int32 nativeRotation : 1;
  unsigned __int32 hSpan : 1;
  unsigned __int32 vSpan : 1;
  unsigned __int32 edid : 1;
  unsigned __int32 edidNativeRefreshRate : 1;
  unsigned __int32 edidDTD : 1;
  unsigned __int32 edidSTD : 1;
  unsigned __int32 edidEST : 1;
  unsigned __int32 edidCVT : 1;
  unsigned __int32 edid861ST : 1;
  unsigned __int32 edidExtDTD : 1;
  unsigned __int32 edidExtVTB : 1;
  unsigned __int32 edidHdmiExt : 1;
  unsigned __int32 reserved : 5;
};

/* 7811 */
struct NV_BACKEND_TIMING_INFO_V1
{
  unsigned int version;
  NV_DISPLAY_TARGET_ORIGIN targetOrigin;
  _NV_TIMING timingInfo;
};

/* 7812 */
struct _NV_DISPLAY_BLANKING_INFO_V1
{
  unsigned int version;
  unsigned __int32 blankingState : 1;
  unsigned __int32 persistBlankingAcrossHotPlugUnplug : 1;
  unsigned __int32 reserved : 30;
};

/* 7813 */
struct NV_DISPLAY_REFRESH_RATE
{
  unsigned int numerator;
  unsigned int denominator;
};

/* 7814 */
struct NV_DISPLAY_SETTING
{
  unsigned int width;
  unsigned int height;
  _NV_FORMAT colorFormat;
  NV_DISPLAY_REFRESH_RATE refreshRate;
  unsigned int reserved;
};

/* 7815 */
union $578DDD834B579922849BDE64D45EDAAA
{
  unsigned int targetId;
  unsigned int displayId;
};

/* 7816 */
struct NV_HCLONE_PATH_V1
{
  unsigned int version;
  unsigned __int32 isNonNVIDIA : 1;
  unsigned __int32 isAttachedToDesktop : 1;
  unsigned __int32 reserved : 30;
  unsigned int sourceId;
  $578DDD834B579922849BDE64D45EDAAA ___u5;
  NV_DISPLAY_SETTING dispSetting;
  unsigned int reserved1;
};

/* 7817 */
struct __declspec(align(8)) NV_HCLONE_NODE_V1
{
  unsigned int version;
  unsigned int numPaths;
  NV_HCLONE_PATH_V1 *pHClonePathArray;
  unsigned int reserved1;
};

/* 7818 */
struct NV_HCLONE_TOPOLOGY_V1
{
  unsigned int version;
  unsigned int numHCloneNodes;
  NV_HCLONE_NODE_V1 *pHCloneNodeArray;
  unsigned __int32 isMultiHClonePairsEnabled : 1;
  unsigned __int32 isNWayHCloneNodesEnabled : 1;
  unsigned __int32 reserved1 : 30;
  NV_HCLONE_HOTPLUG_BEHAVIOR HCloneHotPlugBehavior;
};

/* 7819 */
struct _NV_RESOLUTION_EX_V1
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  unsigned int colorDepth;
  unsigned int refreshRate;
  unsigned __int16 isInterlaced : 1;
  unsigned __int16 isNative : 1;
  unsigned __int16 is3D : 1;
  unsigned __int16 reserved : 13;
  _NV_RESOLUTION_SPEC originSpec;
};

/* 7820 */
struct NV_MOSAIC_TOPO_BRIEF
{
  unsigned int version;
  NV_MOSAIC_TOPO topo;
  unsigned int enabled;
  unsigned int isPossible;
};

/* 7821 */
struct NV_MOSAIC_DISPLAY_SETTING
{
  unsigned int version;
  unsigned int width;
  unsigned int height;
  unsigned int bpp;
  unsigned int freq;
};

/* 7822 */
struct NV_MOSAIC_SUPPORTED_TOPO_INFO
{
  unsigned int version;
  unsigned int topoBriefsCount;
  NV_MOSAIC_TOPO_BRIEF topoBriefs[35];
  unsigned int displaySettingsCount;
  NV_MOSAIC_DISPLAY_SETTING displaySettings[40];
};

/* 7823 */
struct __declspec(align(8)) $7C38170ACE87142DC7D7993E260160E6
{
  NvPhysicalGpuHandle__ *hPhysicalGPU;
  unsigned int displayOutputId;
  int overlapX;
  int overlapY;
};

/* 7824 */
struct NV_MOSAIC_TOPO_DETAILS
{
  unsigned int version;
  NvLogicalGpuHandle__ *hLogicalGPU;
  unsigned int validityMask;
  unsigned int rowCount;
  unsigned int colCount;
  $7C38170ACE87142DC7D7993E260160E6 gpuLayout[8][8];
};

/* 7825 */
struct NV_MOSAIC_TOPO_GROUP
{
  unsigned int version;
  NV_MOSAIC_TOPO_BRIEF brief;
  unsigned int count;
  NV_MOSAIC_TOPO_DETAILS topos[2];
};

/* 7826 */
struct NV_MOSAIC_GRID_TOPO_DISPLAY
{
  unsigned int displayId;
  int overlapX;
  int overlapY;
  _NV_ROTATE rotation;
  unsigned int cloneGroup;
};

/* 7827 */
struct NV_MOSAIC_GRID_TOPO
{
  unsigned int version;
  unsigned int rows;
  unsigned int columns;
  unsigned int displayCount;
  unsigned __int32 applyWithBezelCorrect : 1;
  unsigned __int32 immersiveGaming : 1;
  unsigned __int32 baseMosaic : 1;
  unsigned __int32 driverReloadAllowed : 1;
  unsigned __int32 acceleratePrimaryDisplay : 1;
  unsigned __int32 reserved : 27;
  NV_MOSAIC_GRID_TOPO_DISPLAY displays[64];
  NV_MOSAIC_DISPLAY_SETTING displaySettings;
};

/* 7828 */
struct NV_MOSAIC_CAPS_V2
{
  unsigned int version;
  unsigned __int32 bSupportsImmersiveGaming : 1;
  unsigned __int32 bSupportsMosaic : 1;
  unsigned __int32 bSupportsGlobalRotation : 1;
  unsigned __int32 bSupportsPerDisplayRotation : 1;
  unsigned __int32 bSupportsPerDisplaySettings : 1;
  unsigned __int32 bSupportsOverlap : 1;
  unsigned __int32 bSupportsGaps : 1;
  unsigned __int32 bSupportsUnevenGapping : 1;
  unsigned __int32 bSupportsPassiveStereo : 1;
  unsigned __int32 reserved : 23;
};

/* 7829 */
struct NV_MOSAIC_DISPLAY_DETAILS
{
  unsigned int displayId;
  unsigned int problemFlags;
  unsigned __int32 supportsRotation : 1;
  unsigned __int32 reserved : 31;
};

/* 7830 */
struct NV_MOSAIC_DISPLAY_CAPS_V2
{
  unsigned int version;
  unsigned int displayCount;
  NV_MOSAIC_DISPLAY_DETAILS displays[128];
  unsigned int displaySettingsCount;
  NV_MOSAIC_DISPLAY_SETTING displaySettings[1600];
  unsigned int problemFlags;
};

/* 7831 */
struct _NV_RECT
{
  unsigned int left;
  unsigned int top;
  unsigned int right;
  unsigned int bottom;
};

/* 7832 */
struct $3A7CB163F53085FA2852910C6013A6C6
{
  unsigned int displayId;
  unsigned int errorFlags;
  unsigned int warningFlags;
  unsigned __int32 supportsRotation : 1;
  unsigned __int32 reserved : 31;
};

/* 7833 */
struct NV_MOSAIC_DISPLAY_TOPO_STATUS
{
  unsigned int version;
  unsigned int errorFlags;
  unsigned int warningFlags;
  unsigned int displayCount;
  $3A7CB163F53085FA2852910C6013A6C6 displays[128];
};

/* 7834 */
struct NV_MOSAIC_TOPOLOGY
{
  unsigned int version;
  unsigned int rowCount;
  unsigned int colCount;
  $7C38170ACE87142DC7D7993E260160E6 gpuLayout[8][8];
};

/* 7835 */
struct NV_MOSAIC_SUPPORTED_TOPOLOGIES
{
  unsigned int version;
  unsigned int totalCount;
  NV_MOSAIC_TOPOLOGY topos[16];
};

/* 7836 */
struct NvGSyncDeviceHandle__
{
  int unused;
};

/* 7837 */
struct _NV_GSYNC_CAPABILITIES
{
  unsigned int version;
  unsigned int boardId;
  unsigned int revision;
  unsigned int capFlags;
};

/* 7838 */
struct __declspec(align(8)) _NV_GSYNC_GPU
{
  unsigned int version;
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  _NVAPI_GSYNC_GPU_TOPOLOGY_CONNECTOR connector;
  NvPhysicalGpuHandle__ *hProxyPhysicalGpu;
  unsigned __int32 isSynced : 1;
  unsigned __int32 reserved : 31;
};

/* 7839 */
struct _NV_GSYNC_DISPLAY
{
  unsigned int version;
  unsigned int displayId;
  unsigned __int32 isMasterable : 1;
  unsigned __int32 reserved : 31;
  _NVAPI_GSYNC_DISPLAY_SYNC_STATE syncState;
};

/* 7840 */
struct _NV_GSYNC_DELAY
{
  unsigned int version;
  unsigned int numLines;
  unsigned int numPixels;
  unsigned int maxLines;
  unsigned int minPixels;
};

/* 7841 */
struct _NV_GSYNC_CONTROL_PARAMS
{
  unsigned int version;
  _NVAPI_GSYNC_POLARITY polarity;
  _NVAPI_GSYNC_VIDEO_MODE vmode;
  unsigned int interval;
  _NVAPI_GSYNC_SYNC_SOURCE source;
  unsigned __int32 interlaceMode : 1;
  unsigned __int32 reserved : 31;
  _NV_GSYNC_DELAY syncSkew;
  _NV_GSYNC_DELAY startupDelay;
};

/* 7842 */
struct _NV_GSYNC_STATUS
{
  unsigned int version;
  unsigned int bIsSynced;
  unsigned int bIsStereoSynced;
  unsigned int bIsSyncSignalAvailable;
};

/* 7843 */
struct _NV_GSYNC_STATUS_PARAMS
{
  unsigned int version;
  unsigned int refreshRate;
  _NVAPI_GSYNC_RJ45_IO RJ45_IO[2];
  unsigned int RJ45_Ethernet[2];
  unsigned int houseSyncIncoming;
  unsigned int bHouseSync;
};

/* 7844 */
struct NV_GET_CURRENT_SLI_STATE
{
  unsigned int version;
  unsigned int maxNumAFRGroups;
  unsigned int numAFRGroups;
  unsigned int currentAFRIndex;
  unsigned int nextFrameAFRIndex;
  unsigned int previousFrameAFRIndex;
  unsigned int bIsCurAFRGroupNew;
};

/* 7845 */
struct __declspec(align(8)) _NV_OVLY_SURFS_INFO
{
  NVDX_ObjectHandle__ *handle[6];
  unsigned int numSurfs;
};

/* 7846 */
struct NV_DX_CREATE_VIDEO_PARAMS2
{
  unsigned int version;
  unsigned int cvFlags;
  unsigned int flipQueueHint;
  unsigned int maxSrcWidth;
  unsigned int maxSrcHeight;
  unsigned int dwNumOvlSurfs;
  NVDX_ObjectHandle__ *hOvlSurfs[6];
};

/* 7847 */
struct __declspec(align(8)) NV_DX_PRESENT_VIDEO_PARAMS1
{
  unsigned int version;
  NVDX_ObjectHandle__ *surfaceHandle;
  unsigned int pvFlags;
  unsigned int colourKey;
  unsigned int timeStampLow;
  unsigned int timeStampHigh;
  unsigned int flipRate;
  NvSBox srcUnclipped;
  NvSBox srcClipped;
  NvSBox dst;
};

/* 7848 */
struct __declspec(align(8)) _NV_DX_VIDEO_STEREO_INFO
{
  unsigned int dwVersion;
  NVDX_ObjectHandle__ *hSurface;
  NVDX_ObjectHandle__ *hLinkedSurface;
  _NV_STEREO_VIDEO_FORMAT eFormat;
  int sViewOffset;
  int bStereoEnable;
};

/* 7849 */
struct _NV_GAMUT_METADATA_RANGE
{
  unsigned __int32 GBD_Color_Space : 3;
  unsigned __int32 GBD_Color_Precision : 2;
  unsigned __int32 Rsvd : 2;
  unsigned __int32 Format_Flag : 1;
  unsigned __int32 Min_Red_Data : 12;
  unsigned __int32 Max_Red_Data : 12;
  unsigned __int32 Min_Green_Data : 12;
  unsigned __int32 Max_Green_Data : 12;
  unsigned __int32 Min_Blue_Data : 12;
  unsigned __int32 Max_Blue_Data : 12;
};

/* 7850 */
struct _NV_GAMUT_METADATA_VERTICES
{
  unsigned __int32 GBD_Color_Space : 3;
  unsigned __int32 GBD_Color_Precision : 2;
  unsigned __int32 Rsvd : 1;
  unsigned __int32 Facet_Mode : 1;
  unsigned __int32 Format_Flag : 1;
  unsigned __int32 Number_Vertices_H : 8;
  unsigned __int32 Number_Vertices_L : 8;
  unsigned __int32 Black_Y_R : 12;
  unsigned __int32 Black_Cb_G : 12;
  unsigned __int32 Black_Cr_B : 12;
  unsigned __int32 Red_Y_R : 12;
  unsigned __int32 Red_Cb_G : 12;
  unsigned __int32 Red_Cr_B : 12;
  unsigned __int32 Green_Y_R : 12;
  unsigned __int32 Green_Cb_G : 12;
  unsigned __int32 Green_Cr_B : 12;
  unsigned __int32 Blue_Y_R : 12;
  unsigned __int32 Blue_Cb_G : 12;
  unsigned __int32 Blue_Cr_B : 12;
};

/* 7851 */
union $1D85440967913AB66AA052D2A1B05096
{
  _NV_GAMUT_METADATA_RANGE rangeData;
  _NV_GAMUT_METADATA_VERTICES verticesData;
};

/* 7852 */
struct _NV_GAMUT_METADATA
{
  $1D85440967913AB66AA052D2A1B05096 data;
};

/* 7853 */
struct _NVAPI_SURFACE_LAYOUT_STRUCT
{
  int bEnableLayoutOverride;
  _NVAPI_SURFACE_LAYOUT slLayout;
  unsigned int reserved[4];
};

/* 7854 */
struct _NVAPI_VIDEO_SRC_INFO
{
  unsigned int srcWidth;
  unsigned int srcHeight;
  _NV_CODEC codecType;
  unsigned int avgBitrate;
  unsigned __int64 reserved1;
  unsigned __int64 reserved2;
};

/* 7855 */
struct _NVAPI_DESKTOP_RES
{
  unsigned int width;
  unsigned int height;
  unsigned int bitsPerPixel;
  unsigned int refreshRate;
  unsigned __int64 reserved1;
  unsigned __int64 reserved2;
};

/* 7856 */
struct _NVAPI_VIDEO_PROCESSING_CAPS
{
  unsigned __int64 deinterlaceMode;
  unsigned __int64 videoEnhance;
  unsigned __int64 colorControl;
  unsigned __int64 gamma;
  unsigned __int64 miscCaps;
  unsigned __int64 reserved1;
  unsigned __int64 reserved2;
  unsigned __int64 reserved3;
};

/* 7857 */
struct _NVAPI_VIDEO_CAPS
{
  unsigned int maxFlipRate;
  _NV_CODEC hwDecode;
  unsigned __int64 vidFeature;
  unsigned int perfLevel;
  unsigned int numVidProfiles;
  unsigned int maxResPixels;
  unsigned int reserved1;
  _NVAPI_VIDEO_PROCESSING_CAPS vidProcCaps[4];
};

/* 7858 */
struct _NVAPI_VIDEO_CAPS_PACKET
{
  unsigned int packetVer;
  unsigned int numVidStreams;
  _NVAPI_VIDEO_SRC_INFO vidSrcInfo[4];
  _NVAPI_DESKTOP_RES res[4];
  unsigned __int64 renderMode;
  unsigned __int64 totalFB;
  unsigned __int16 NumExtOvlBufNeeded;
  unsigned __int16 reserved1;
  unsigned int reserved2;
  _NVAPI_VIDEO_CAPS videoCaps[4];
};

/* 7859 */
struct _NV_DX_VIDEO_CAPS
{
  unsigned int version;
  _NVAPI_VIDEO_CAPS_PACKET videoCapsPacket;
};

/* 7860 */
struct _NVAPI_QUERY_STEREO_INFO
{
  unsigned int dwFormats;
  unsigned __int32 bIsSupported : 1;
  unsigned __int32 bIsEnabled : 1;
  unsigned __int32 dwReserved1 : 30;
  unsigned int dwReserved2[4];
};

/* 7861 */
struct _NVAPI_QUERY_COLOR_INFO
{
  unsigned int dwColorSpaces;
  unsigned int dwReserved[4];
};

/* 7862 */
union $CA51E7DE8EA50BE274EE4A140B8CBEBE
{
  _NVAPI_QUERY_STEREO_INFO stStereoInfo;
  _NVAPI_QUERY_COLOR_INFO stColorInfo;
};

/* 7863 */
struct _NVAPI_DX_QUERY_VIDEO_INFO
{
  unsigned int dwVersion;
  _NVAPI_D3D9_QUERY_COMMAND eQueryCommand;
  $CA51E7DE8EA50BE274EE4A140B8CBEBE ___u2;
};

/* 7864 */
struct __declspec(align(8)) $7650FE024129BBF0EE74962EE44101DA
{
  unsigned __int64 pData;
  unsigned int dwSize;
};

/* 7865 */
struct $1C5743CC244ACB03D1EC5E94785A8143
{
  unsigned int dwAppKey;
  unsigned __int32 bTopPriority : 1;
  unsigned __int32 bHasCustomAlgo : 1;
  unsigned __int32 bReserved : 30;
  $7650FE024129BBF0EE74962EE44101DA customAlgo;
};

/* 7866 */
union $442A4FC6E283E1904087165F27B1EECB
{
  unsigned __int64 qwReserved[9];
  $1C5743CC244ACB03D1EC5E94785A8143 appInfo;
};

/* 7867 */
struct _NVAPI_GET_VIDEO_STATE_COMPONENT
{
  unsigned int version;
  unsigned int componentID;
  unsigned __int32 bIsSupported : 1;
  unsigned __int32 bIsOverridenByUser : 1;
  unsigned __int32 reserved1 : 30;
  unsigned int isEnabled;
  unsigned int minValue;
  unsigned int maxValue;
  unsigned int totalSteps;
  unsigned int defaultValue;
  unsigned int unityValue;
  unsigned int currentValueActive;
  unsigned __int64 defaultAlgo;
  unsigned __int64 currentAlgoActive;
  $442A4FC6E283E1904087165F27B1EECB ___u14;
};

/* 7868 */
union $2C33DA4B459D703F678D3484BE13FEEF
{
  unsigned __int64 qwReserved[4];
  $1C5743CC244ACB03D1EC5E94785A8143 appInfo;
};

/* 7869 */
struct _NVAPI_SET_VIDEO_STATE_COMPONENT
{
  unsigned int version;
  unsigned int componentID;
  unsigned int enable;
  unsigned int setToValue;
  unsigned __int64 setToAlgo;
  unsigned int retStatus;
  unsigned int reserved;
  $2C33DA4B459D703F678D3484BE13FEEF ___u7;
};

/* 7870 */
struct _NVAPI_VIDEO_FEATURE_DETAILS
{
  _NVAPI_VIDEO_FEATURE eFeature;
  _NVAPI_VIDEO_ENGINES eEngine;
  _NVAPI_VIDEO_DRIVER_ENTRY_POINT eEntryPoint;
  unsigned int dwReserved;
};

/* 7871 */
struct _NVAPI_VIDEO_FEATURE_DESCRIPTOR
{
  unsigned int version;
  _NVAPI_VIDEO_FEATURE_GET_FLAG eVideoFeatureGetID;
  unsigned int dwVFCount;
  unsigned int dwStartVFCount;
  _NVAPI_VIDEO_FEATURE_DETAILS astFeatureDetails[3];
  unsigned int adwReserved[4];
};

/* 7872 */
struct _NVAPI_VID_FEATURE_STRINGS
{
  _NVAPI_VIDEO_FEATURE eFeature;
  char szFeature[64];
  char szEngine[64];
  char szDrvEntryPoint[64];
  char szReserved1[64];
};

/* 7873 */
struct _NVAPI_DX_VIDEO_FEATURE_DETAILS
{
  unsigned int version;
  _NVAPI_VIDEO_FEATURE_DESCRIPTOR videoFeaturesPacket;
  _NVAPI_VID_FEATURE_STRINGS astFeatureDescNames[3];
};

/* 7874 */
struct NV_SLI_INFO
{
  unsigned int version;
  _NV_SLI_MODE mode;
  unsigned int gpus;
};

/* 7875 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUID_COUNT
{
  unsigned int dwGuidCount;
};

/* 7876 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUIDS
{
  _GUID guids[4];
};

/* 7877 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_GUID
{
  _GUID guid;
};

/* 7878 */
struct __declspec(align(8)) NVAPI_VIDSURF_ENCRYPT_CTRL_ENABLE
{
  unsigned int *pSurface;
  unsigned int bEnable;
};

/* 7879 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_KEY
{
  unsigned int dwEncryptKeyProtectionMode;
  unsigned int dwEncryptKeyProtectionIdentifier;
  unsigned int dwKey[4];
};

/* 7880 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_SET_IV
{
  unsigned int dwEncryptKeyProtectionMode;
  unsigned int dwEncryptKeyProtectionIdentifier;
  unsigned int dwIV[4];
};

/* 7881 */
union $A4D3B79A0AB56ABF71FA216B8AB0D329
{
  NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUID_COUNT GetGuidCount;
  NVAPI_VIDSURF_ENCRYPT_CTRL_GET_GUIDS GetGuids;
  NVAPI_VIDSURF_ENCRYPT_CTRL_SET_GUID SetGuid;
  NVAPI_VIDSURF_ENCRYPT_CTRL_ENABLE Enable;
  NVAPI_VIDSURF_ENCRYPT_CTRL_SET_KEY SetKey;
  NVAPI_VIDSURF_ENCRYPT_CTRL_SET_IV SetIV;
};

/* 7882 */
struct NVAPI_VIDSURF_ENCRYPT_CTRL_PARAMS
{
  unsigned int version;
  unsigned int dwCommand;
  $A4D3B79A0AB56ABF71FA216B8AB0D329 ___u2;
};

/* 7883 */
struct _NVAPI_D3D9_DMA_DESCRIBE_PARAMS
{
  unsigned int dwWidth;
  unsigned int dwHeight;
  unsigned int dwFormat;
  unsigned int dwPitch;
  unsigned int dwSize;
  unsigned int dwAlignment;
};

/* 7884 */
struct _NVAPI_D3D9_DMA_MAP_PARAMS
{
  unsigned int dwWidth;
  unsigned int dwHeight;
  unsigned int dwFormat;
  void *pMemory;
  NVDX_ObjectHandle__ *hSysmemSurface;
};

/* 7885 */
struct _NVAPI_D3D9_DMA_UNMAP_PARAMS
{
  NVDX_ObjectHandle__ *hSysmemSurface;
};

/* 7886 */
struct _NVAPI_D3D9_DMA_EVENT_PARAMS
{
  void *hCompletionEvent;
};

/* 7887 */
struct _NVAPI_D3D9_DMA_TRANSFER_PARAMS
{
  _NVAPI_D3D9_DMA_TRANSFER_DIR direction;
  NVDX_ObjectHandle__ *hSysmemSurface;
  tagRECT *pSysmemSurfaceRect;
  NVDX_ObjectHandle__ *hD3D9Surface;
  tagRECT *pD3D9SurfaceRect;
  void *hCompletionEvent;
  _NVAPI_D3D9_DMA_TRANSFER_TYPE transferType;
  unsigned __int32 floatSrcRectFlag : 1;
  unsigned __int32 smoothingLevel : 2;
  unsigned __int32 reserved : 17;
  unsigned __int32 reservedFlagValid : 12;
};

/* 7888 */
struct _NVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS
{
  unsigned int colorMatrixFlags;
  float *colorMatrix;
};

/* 7889 */
union $78045DD62E89D9B8ACA48A19E9180605
{
  _NVAPI_D3D9_DMA_DESCRIBE_PARAMS DescribeParams;
  _NVAPI_D3D9_DMA_MAP_PARAMS MapParams;
  _NVAPI_D3D9_DMA_UNMAP_PARAMS UnmapParams;
  _NVAPI_D3D9_DMA_EVENT_PARAMS EventParams;
  _NVAPI_D3D9_DMA_TRANSFER_PARAMS TransferParams;
  _NVAPI_D3D9_DMA_COLOR_MATRIX_PARAMS ColorMatrixParams;
};

/* 7890 */
struct _NVAPI_D3D9_DMA_PARAMS
{
  unsigned int version;
  unsigned int dwCommand;
  $78045DD62E89D9B8ACA48A19E9180605 ___u2;
};

/* 7891 */
struct _NVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS
{
  char challenge[16];
};

/* 7892 */
struct _NVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS
{
  NvGUID vendorGUID;
  char response[20];
};

/* 7893 */
union $3126E6EC3687207A95FD02D0320D2D07
{
  _NVAPI_D3D9_ENABLE_STEREO_CHALLENGE_PARAMS ChallengeParams;
  _NVAPI_D3D9_ENABLE_STEREO_RESPONSE_PARAMS ResponseParams;
};

/* 7894 */
struct _NVAPI_D3D9_ENABLE_STEREO_PARAMS
{
  unsigned int version;
  unsigned int dwCommand;
  $3126E6EC3687207A95FD02D0320D2D07 ___u2;
};

/* 7895 */
struct NVAPI_FLIP_CHAIN_CALLBACK_PARAMS
{
  unsigned int version;
  void (__cdecl *pPrimaryFlipped)(unsigned int);
  void (__cdecl *pPrimaryFlipChainModified)(unsigned int);
  void (__cdecl *pPrimaryAliasInvalid)(unsigned int);
  void (__cdecl *pPrimaryAliasOperationDropped)(unsigned int);
  void (__cdecl *pCursorVisibleUpdated)(unsigned int);
  void (__cdecl *pCursorShapeUpdated)(unsigned int);
};

/* 7896 */
struct _NVAPI_RENDERED_CURSOR_BITMAP_DATA
{
  unsigned int version;
  unsigned int headIndex;
  unsigned int bufferSize;
  tagBITMAP *pBitmap;
  unsigned int xHot;
  unsigned int yHot;
  NV_HW_CURSOR_COLOR_FORMAT_FLAGS formatFlag;
  unsigned int bVisible;
};

/* 7897 */
struct NvIFRCheckDeviceSupportParams
{
  unsigned __int32 bSupported : 1;
  unsigned __int32 bReservedBits : 31;
  unsigned int dwPrivateDataSize;
  void *pPrivateData;
  IUnknown *pDevice;
  unsigned int dwVersion;
  unsigned int dwReserved[29];
  void *pReserved[30];
};

/* 7898 */
struct NvVioHandle__
{
  int unused;
};

/* 7899 */
struct $C102DB7C2CA4B80E1EEA9F460C0C0E50
{
  unsigned int majorVersion;
  unsigned int minorVersion;
};

/* 7900 */
struct _NVVIOCAPS
{
  unsigned int version;
  char adapterName[4096];
  unsigned int adapterClass;
  unsigned int adapterCaps;
  unsigned int dipSwitch;
  unsigned int dipSwitchReserved;
  unsigned int boardID;
  $C102DB7C2CA4B80E1EEA9F460C0C0E50 driver;
  $C102DB7C2CA4B80E1EEA9F460C0C0E50 firmWare;
  unsigned int ownerId;
  _NVVIOOWNERTYPE ownerType;
};

/* 7901 */
struct _NVVIOCHANNELSTATUS
{
  unsigned int smpte352;
  _NVVIOSIGNALFORMAT signalFormat;
  _NVVIOBITSPERCOMPONENT bitsPerComponent;
  _NVVIOCOMPONENTSAMPLING samplingFormat;
  _NVVIOCOLORSPACE colorSpace;
  _NVVIOLINKID linkID;
};

/* 7902 */
struct _NVVIOINPUTSTATUS
{
  _NVVIOCHANNELSTATUS vidIn[4][2];
  _NVVIOCAPTURESTATUS captureStatus;
};

/* 7903 */
struct _NVVIOOUTPUTSTATUS
{
  _NVVIOINPUTOUTPUTSTATUS vid1Out;
  _NVVIOINPUTOUTPUTSTATUS vid2Out;
  _NVVIOSYNCSTATUS sdiSyncIn;
  _NVVIOSYNCSTATUS compSyncIn;
  unsigned int syncEnable;
  _NVVIOSYNCSOURCE syncSource;
  _NVVIOSIGNALFORMAT syncFormat;
  unsigned int frameLockEnable;
  unsigned int outputVideoLocked;
  unsigned int dataIntegrityCheckErrorCount;
  unsigned int dataIntegrityCheckEnabled;
  unsigned int dataIntegrityCheckFailed;
  unsigned int uSyncSourceLocked;
  unsigned int uPowerOn;
};

/* 7904 */
union $8655AB37AF943661B020D14B51498F13
{
  _NVVIOINPUTSTATUS inStatus;
  _NVVIOOUTPUTSTATUS outStatus;
};

/* 7905 */
struct _NVVIOSTATUS
{
  unsigned int version;
  _NVVIOSTATUSTYPE nvvioStatusType;
  $8655AB37AF943661B020D14B51498F13 vioStatus;
};

/* 7906 */
struct $B3A53DD4FE82F5E1E055AAA1FEBA2371
{
  unsigned int jack;
  unsigned int channel;
};

/* 7907 */
struct _NVVIOSTREAM
{
  unsigned int bitsPerComponent;
  _NVVIOCOMPONENTSAMPLING sampling;
  unsigned int expansionEnable;
  unsigned int numLinks;
  $B3A53DD4FE82F5E1E055AAA1FEBA2371 links[2];
};

/* 7908 */
struct _NVVIOINPUTCONFIG
{
  unsigned int numRawCaptureImages;
  _NVVIOSIGNALFORMAT signalFormat;
  unsigned int numStreams;
  _NVVIOSTREAM streams[4];
  unsigned int bTestMode;
};

/* 7909 */
struct _NVVIOOUTPUTREGION
{
  unsigned int x;
  unsigned int y;
  unsigned int width;
  unsigned int height;
};

/* 7910 */
struct _NVVIOCOLORCONVERSION
{
  unsigned int version;
  float colorMatrix[3][3];
  float colorOffset[3];
  float colorScale[3];
  unsigned int compositeSafe;
};

/* 7911 */
struct _NVVIOGAMMARAMP8
{
  unsigned __int16 uRed[256];
  unsigned __int16 uGreen[256];
  unsigned __int16 uBlue[256];
};

/* 7912 */
struct _NVVIOGAMMARAMP10
{
  unsigned __int16 uRed[1024];
  unsigned __int16 uGreen[1024];
  unsigned __int16 uBlue[1024];
};

/* 7913 */
union $3D8C552115147FDDAC4122CB5FAAF563
{
  _NVVIOGAMMARAMP8 gammaRamp8;
  _NVVIOGAMMARAMP10 gammaRamp10;
};

/* 7914 */
struct _NVVIOGAMMACORRECTION
{
  unsigned int version;
  unsigned int vioGammaCorrectionType;
  $3D8C552115147FDDAC4122CB5FAAF563 gammaRamp;
  float fGammaValueR;
  float fGammaValueG;
  float fGammaValueB;
};

/* 7915 */
struct _NVVIOSYNCDELAY
{
  unsigned int version;
  unsigned int horizontalDelay;
  unsigned int verticalDelay;
};

/* 7916 */
struct _NVVIOCOMPOSITERANGE
{
  unsigned int uRange;
  unsigned int uEnabled;
  unsigned int uMin;
  unsigned int uMax;
};

/* 7917 */
struct _NVVIOOUTPUTCONFIG_V3
{
  _NVVIOSIGNALFORMAT signalFormat;
  _NVVIODATAFORMAT dataFormat;
  _NVVIOOUTPUTREGION outputRegion;
  _NVVIOOUTPUTAREA outputArea;
  _NVVIOCOLORCONVERSION colorConversion;
  _NVVIOGAMMACORRECTION gammaCorrection;
  unsigned int syncEnable;
  _NVVIOSYNCSOURCE syncSource;
  _NVVIOSYNCDELAY syncDelay;
  _NVVIOCOMPSYNCTYPE compositeSyncType;
  unsigned int frameLockEnable;
  unsigned int psfSignalFormat;
  unsigned int enable422Filter;
  unsigned int compositeTerminate;
  unsigned int enableDataIntegrityCheck;
  unsigned int cscOverride;
  unsigned int flipQueueLength;
  unsigned int enableANCTimeCodeGeneration;
  unsigned int enableComposite;
  unsigned int enableAlphaKeyComposite;
  _NVVIOCOMPOSITERANGE compRange;
  char reservedData[256];
  unsigned int enableFullColorRange;
  unsigned int enableRGBData;
  _NVVIOANCPARITYCOMPUTATION ancParityComputation;
  unsigned int enableAudioBlanking;
};

/* 7918 */
union $23D00D9244353AF47AA28300520681F8
{
  _NVVIOINPUTCONFIG inConfig;
  _NVVIOOUTPUTCONFIG_V3 outConfig;
};

/* 7919 */
struct _NVVIOCONFIG_V3
{
  unsigned int version;
  unsigned int fields;
  _NVVIOCONFIGTYPE nvvioConfigType;
  $23D00D9244353AF47AA28300520681F8 vioConfig;
};

/* 7920 */
struct _NVVIOPCIINFO
{
  unsigned int version;
  unsigned int pciDeviceId;
  unsigned int pciSubSystemId;
  unsigned int pciRevisionId;
  unsigned int pciDomain;
  unsigned int pciBus;
  unsigned int pciSlot;
  _NVVIOPCILINKWIDTH pciLinkWidth;
  _NVVIOPCILINKRATE pciLinkRate;
};

/* 7921 */
struct NVVIOTOPOLOGYTARGET
{
  NvPhysicalGpuHandle__ *hPhysicalGpu;
  NvVioHandle__ *hVioHandle;
  unsigned int vioId;
  unsigned int outputId;
};

/* 7922 */
struct _NV_VIO_TOPOLOGY
{
  unsigned int version;
  unsigned int vioTotalDeviceCount;
  NVVIOTOPOLOGYTARGET vioTarget[8];
};

/* 7923 */
struct _NVVIOVIDEOMODE
{
  unsigned int horizontalPixels;
  unsigned int verticalLines;
  float fFrameRate;
  _NVVIOINTERLACEMODE interlaceMode;
  _NVVIOVIDEOSTANDARD videoStandard;
  _NVVIOVIDEOTYPE videoType;
};

/* 7924 */
struct _NVVIOSIGNALFORMATDETAIL
{
  _NVVIOSIGNALFORMAT signalFormat;
  _NVVIOVIDEOMODE videoMode;
};

/* 7925 */
struct _NVVIODATAFORMATDETAIL
{
  _NVVIODATAFORMAT dataFormat;
  unsigned int vioCaps;
};

/* 7926 */
struct NvMonitorHandle__
{
  int unused;
};

/* 7927 */
struct _NVAPI_STEREO_CAPS
{
  unsigned int version;
  unsigned __int32 supportsWindowedModeOff : 1;
  unsigned __int32 supportsWindowedModeAutomatic : 1;
  unsigned __int32 supportsWindowedModePersistent : 1;
  unsigned __int32 reserved : 29;
  unsigned int reserved2[3];
};

/* 7928 */
struct _NVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS
{
  char challenge[16];
};

/* 7929 */
struct _NVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS
{
  NvGUID vendorGUID;
  char response[20];
  unsigned int flags;
};

/* 7930 */
union $B31BC46AE0FAB4D0B0EB8A6FF3F35F30
{
  _NVAPI_STEREO_HANDSHAKE_CHALLENGE_PARAMS ChallengeParams;
  _NVAPI_STEREO_HANDSHAKE_RESPONSE_PARAMS ResponseParams;
};

/* 7931 */
struct _NVAPI_STEREO_HANDSHAKE_PARAMS
{
  unsigned int version;
  unsigned int dwCommand;
  $B31BC46AE0FAB4D0B0EB8A6FF3F35F30 ___u2;
};

/* 7932 */
struct __declspec(align(8)) _NVAPI_FRAME_RATE_NOTIFY_INFO
{
  unsigned int version;
  unsigned __int64 hWnd;
  unsigned __int32 bEnable : 1;
  unsigned __int32 bReserved : 31;
};

/* 7933 */
struct _NV_VIDEO_STEREO_INFO
{
  unsigned int dwVersion;
  _NV_STEREO_VIDEO_FORMAT eFormat;
  int sViewOffset;
  unsigned __int32 bStereoEnable : 1;
};

/* 7934 */
struct NvDRSSessionHandle__
{
  int unused;
};

/* 7935 */
struct _NVDRS_GPU_SUPPORT
{
  unsigned __int32 geforce : 1;
  unsigned __int32 quadro : 1;
  unsigned __int32 nvs : 1;
  unsigned __int32 reserved4 : 1;
  unsigned __int32 reserved5 : 1;
  unsigned __int32 reserved6 : 1;
  unsigned __int32 reserved7 : 1;
  unsigned __int32 reserved8 : 1;
  unsigned __int32 reserved9 : 1;
  unsigned __int32 reserved10 : 1;
  unsigned __int32 reserved11 : 1;
  unsigned __int32 reserved12 : 1;
  unsigned __int32 reserved13 : 1;
  unsigned __int32 reserved14 : 1;
  unsigned __int32 reserved15 : 1;
  unsigned __int32 reserved16 : 1;
  unsigned __int32 reserved17 : 1;
  unsigned __int32 reserved18 : 1;
  unsigned __int32 reserved19 : 1;
  unsigned __int32 reserved20 : 1;
  unsigned __int32 reserved21 : 1;
  unsigned __int32 reserved22 : 1;
  unsigned __int32 reserved23 : 1;
  unsigned __int32 reserved24 : 1;
  unsigned __int32 reserved25 : 1;
  unsigned __int32 reserved26 : 1;
  unsigned __int32 reserved27 : 1;
  unsigned __int32 reserved28 : 1;
  unsigned __int32 reserved29 : 1;
  unsigned __int32 reserved30 : 1;
  unsigned __int32 reserved31 : 1;
  unsigned __int32 reserved32 : 1;
};

/* 7936 */
struct _NVDRS_PROFILE
{
  unsigned int version;
  unsigned __int16 profileName[2048];
  _NVDRS_GPU_SUPPORT gpuSupport;
  unsigned int isPredefined;
  unsigned int numOfApps;
  unsigned int numOfSettings;
};

/* 7937 */
struct NvDRSProfileHandle__
{
  int unused;
};

/* 7938 */
struct _NVDRS_APPLICATION_V3
{
  unsigned int version;
  unsigned int isPredefined;
  unsigned __int16 appName[2048];
  unsigned __int16 userFriendlyName[2048];
  unsigned __int16 launcher[2048];
  unsigned __int16 fileInFolder[2048];
  unsigned __int32 isMetro : 1;
  unsigned __int32 reserved : 31;
};

/* 7939 */
struct _NVDRS_BINARY_SETTING
{
  unsigned int valueLength;
  char valueData[4096];
};

/* 7940 */
union $84E399B93649A12A7A6A43C00494D95F
{
  unsigned int u32PredefinedValue;
  _NVDRS_BINARY_SETTING binaryPredefinedValue;
  unsigned __int16 wszPredefinedValue[2048];
};

/* 7941 */
union $680814AACCB8733244CB3F3245AC043D
{
  unsigned int u32CurrentValue;
  _NVDRS_BINARY_SETTING binaryCurrentValue;
  unsigned __int16 wszCurrentValue[2048];
};

/* 7942 */
struct _NVDRS_SETTING
{
  unsigned int version;
  unsigned __int16 settingName[2048];
  unsigned int settingId;
  _NVDRS_SETTING_TYPE settingType;
  _NVDRS_SETTING_LOCATION settingLocation;
  unsigned int isCurrentPredefined;
  unsigned int isPredefinedValid;
  $84E399B93649A12A7A6A43C00494D95F ___u7;
  $680814AACCB8733244CB3F3245AC043D ___u8;
};

/* 7943 */
union $7EC5A46ADD92944453D9BE3987B09656
{
  unsigned int u32Value;
  _NVDRS_BINARY_SETTING binaryValue;
  unsigned __int16 wszValue[2048];
};

/* 7944 */
union $6C080288CED9E0865D21D070E730F769
{
  unsigned int u32DefaultValue;
  _NVDRS_BINARY_SETTING binaryDefaultValue;
  unsigned __int16 wszDefaultValue[2048];
};

/* 7945 */
struct _NVDRS_SETTING_VALUES
{
  unsigned int version;
  unsigned int numSettingValues;
  _NVDRS_SETTING_TYPE settingType;
  $6C080288CED9E0865D21D070E730F769 ___u3;
  $7EC5A46ADD92944453D9BE3987B09656 settingValues[100];
};

/* 7946 */
struct NV_CHIPSET_INFO_v4
{
  unsigned int version;
  unsigned int vendorId;
  unsigned int deviceId;
  char szVendorName[64];
  char szChipsetName[64];
  unsigned int flags;
  unsigned int subSysVendorId;
  unsigned int subSysDeviceId;
  char szSubSysVendorName[64];
  unsigned int HBvendorId;
  unsigned int HBdeviceId;
  unsigned int HBsubSysVendorId;
  unsigned int HBsubSysDeviceId;
};

/* 7947 */
struct NV_LID_DOCK_PARAMS
{
  unsigned int version;
  unsigned int currentLidState;
  unsigned int currentDockState;
  unsigned int currentLidPolicy;
  unsigned int currentDockPolicy;
  unsigned int forcedLidMechanismPresent;
  unsigned int forcedDockMechanismPresent;
};

/* 7948 */
struct g_MODULE_PRIVATEDATA
{
  unsigned int checksum;
  unsigned int TimeDateStamp;
};

/* 7949 */
struct bdChunk::bdChunkData
{
  char m_type;
  char m_flags;
  unsigned __int16 m_length;
};

/* 7950 */
struct __cppobj bdChunk : bdReferencable
{
  bdChunkTypes m_type;
  bdChunk::bdChunkData m_headerData;
};

/* 7951 */
struct __cppobj bdBytePacker
{
};

/* 7952 */
struct __cppobj bdCookie : bdReferencable
{
  unsigned int m_localTag;
  unsigned int m_peerTag;
  unsigned int m_localTieTag;
  unsigned int m_peerTieTag;
};

/* 7953 */
struct __cppobj __declspec(align(8)) bdCookieAckChunk : bdChunk
{
  bdCookieAckChunk::bdCookieAckFlags m_flags;
};

/* 7954 */
struct bdReference<bdCookie>
{
  bdCookie *m_ptr;
};

/* 7955 */
struct __cppobj bdCookieEchoChunk : bdChunk
{
  bdCookieEchoChunk::bdCookieEchoFlags m_flags;
  bdReference<bdCookie> m_cookie;
  bdReference<bdByteBuffer> m_cookieBuffer;
};

/* 7956 */
struct __cppobj __declspec(align(8)) bdDataChunk : bdChunk
{
  bdReference<bdMessage> m_message;
  char m_flags;
  unsigned __int16 m_seqNum;
};

/* 7957 */
struct __cppobj __declspec(align(8)) bdHeartbeatAckChunk : bdChunk
{
  bdHeartbeatAckChunk::bdHeartbeatAckFlags m_flags;
};

/* 7958 */
struct __cppobj __declspec(align(8)) bdHeartbeatChunk : bdChunk
{
  bdHeartbeatChunk::bdHeartbeatFlags m_flags;
};

/* 7959 */
struct __cppobj bdInitChunk : bdChunk
{
  unsigned int m_initTag;
  bdInitChunk::bdInitChunkFlags m_flags;
  bdSecurityID m_id;
  bdReference<bdByteBuffer> m_theirKey;
  __int64 m_windowCredit;
};

/* 7960 */
struct __cppobj __declspec(align(8)) bdInitAckChunk : bdChunk
{
  unsigned int m_initTag;
  bdInitAckChunk::bdInitAckChunkFlags m_flags;
  bdReference<bdByteBuffer> m_cookieBuffer;
  bdReference<bdCookie> m_cookie;
  __int64 m_windowCredit;
  unsigned int m_peerTag;
};

/* 7961 */
struct __cppobj __declspec(align(8)) bdShutdownAckChunk : bdChunk
{
  bdShutdownAckChunk::bdShutdownAckFlags m_flags;
};

/* 7962 */
struct __cppobj __declspec(align(8)) bdShutdownCompleteChunk : bdChunk
{
  bdShutdownCompleteChunk::bdShutdownCompleteFlags m_flags;
};

/* 7963 */
struct bdReference<bdDataChunk>
{
  bdDataChunk *m_ptr;
};

/* 7964 */
struct bdReference<bdChunk>
{
  bdChunk *m_ptr;
};

/* 7965 */
struct bdSAckChunk::bdGapAckBlock
{
  unsigned int m_start;
  unsigned int m_end;
};

/* 7966 */
struct bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node
{
  bdSAckChunk::bdGapAckBlock m_data;
  bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node *m_next;
  bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node *m_prev;
};

/* 7967 */
struct __declspec(align(8)) bdLinkedList<bdSAckChunk::bdGapAckBlock>
{
  bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node *m_head;
  bdLinkedList<bdSAckChunk::bdGapAckBlock>::Node *m_tail;
  unsigned int m_size;
};

/* 7968 */
struct __cppobj bdSAckChunk : bdChunk
{
  bdSAckChunk::bdSAckFlags m_flags;
  unsigned __int16 m_cumulativeAck;
  bdLinkedList<bdSAckChunk::bdGapAckBlock> m_gaps;
  __int64 m_windowCredit;
};

/* 7972 */
struct __declspec(align(8)) bdLinkedList<bdReference<bdChunk> >
{
  bdLinkedList<bdReference<bdChunk> >::Node *m_head;
  bdLinkedList<bdReference<bdChunk> >::Node *m_tail;
  unsigned int m_size;
};

/* 7969 */
struct __declspec(align(8)) bdPacket
{
  bdPacketVtbl *vfptr;
  bdLinkedList<bdReference<bdChunk> > m_chunks;
  bdReference<bdCommonAddr> m_me;
  unsigned int m_tag;
  unsigned int m_bufferSize;
  unsigned int m_currentSize;
};

/* 7970 */
struct bdPacketVtbl
{
  void *(__cdecl *__vecDelDtor)(bdPacket *this, unsigned int);
};

/* 7971 */
struct bdLinkedList<bdReference<bdChunk> >::Node
{
  bdReference<bdChunk> m_data;
  bdLinkedList<bdReference<bdChunk> >::Node *m_next;
  bdLinkedList<bdReference<bdChunk> >::Node *m_prev;
};

/* 7973 */
struct __cppobj __declspec(align(8)) bdShutdownChunk : bdChunk
{
  bdShutdownChunk::bdShutdownFlags m_flags;
};

/* 7974 */
struct bdReference<bdSAckChunk>
{
  bdSAckChunk *m_ptr;
};

/* 7975 */
struct bdReliableReceiveWindow
{
  bdSequenceNumber m_newest;
  bdSequenceNumber m_lastCumulative;
  bdSequenceNumber m_lastDispatched;
  bdReference<bdDataChunk> m_frame[128];
  bool m_shouldAck;
  __int64 m_recvWindowCredit;
  __int64 m_recvWindowUsedCredit;
  bdReference<bdSAckChunk> m_sack;
};

/* 7976 */
struct __declspec(align(8)) bdReliableSendWindow::bdMessageFrame
{
  bdReference<bdDataChunk> m_chunk;
  bdStopwatch m_timer;
  char m_sendCount;
  char m_missingCount;
  bool m_gapAcked;
};

/* 7977 */
struct bdReliableSendWindow
{
  bdSequenceNumber m_lastAcked;
  bdSequenceNumber m_nextFree;
  float m_timeoutPeriod;
  char m_retransmitCountThreshold;
  bdReliableSendWindow::bdMessageFrame m_frame[128];
  __int64 m_remoteReceiveWindowCredit;
  __int64 m_flightSize;
  __int64 m_partialBytesAcked;
  __int64 m_slowStartThresh;
  __int64 m_congestionWindow;
  bdStopwatch m_lastSent;
};

/* 7981 */
struct __declspec(align(8)) bdLinkedList<bdReference<bdDataChunk> >
{
  bdLinkedList<bdReference<bdDataChunk> >::Node *m_head;
  bdLinkedList<bdReference<bdDataChunk> >::Node *m_tail;
  unsigned int m_size;
};

/* 7982 */
struct bdQueue<bdReference<bdDataChunk> >
{
  bdLinkedList<bdReference<bdDataChunk> > m_list;
};

/* 7978 */
struct bdUnreliableReceiveWindow
{
  bdUnreliableReceiveWindowVtbl *vfptr;
  bdSequenceNumber m_seqNumber;
  bdQueue<bdReference<bdDataChunk> > m_recvQueue;
};

/* 7979 */
struct bdUnreliableReceiveWindowVtbl
{
  void *(__cdecl *__vecDelDtor)(bdUnreliableReceiveWindow *this, unsigned int);
};

/* 7980 */
struct bdLinkedList<bdReference<bdDataChunk> >::Node
{
  bdReference<bdDataChunk> m_data;
  bdLinkedList<bdReference<bdDataChunk> >::Node *m_next;
  bdLinkedList<bdReference<bdDataChunk> >::Node *m_prev;
};

/* 7983 */
struct bdUnreliableSendWindow
{
  bdUnreliableSendWindowVtbl *vfptr;
  unsigned __int16 m_seqNumber;
  bdQueue<bdReference<bdDataChunk> > m_sendQueue;
};

/* 7984 */
struct bdUnreliableSendWindowVtbl
{
  void *(__cdecl *__vecDelDtor)(bdUnreliableSendWindow *this, unsigned int);
};

/* 7985 */
struct bdConnectionStatistics
{
  unsigned int m_bytesSent;
  unsigned int m_bytesSentPerSecond;
  unsigned int m_avgBytesSent;
  unsigned int m_lastBytesSent;
  unsigned int m_bytesRecv;
  unsigned int m_avgPacketSentSize;
  unsigned int m_avgPacketRecvSize;
  unsigned int m_maxPacketSizeSent;
  unsigned int m_minPacketSizeSent;
  unsigned int m_maxPacketSizeRecv;
  unsigned int m_minPacketSizeRecv;
  unsigned int m_packetsSent;
  unsigned int m_packetsRecv;
  float m_maxRTT;
  float m_minRTT;
  float m_avgRTT;
};

/* 7986 */
struct bdLinkedList<bdReference<bdMessage> >::Node
{
  bdReference<bdMessage> m_data;
  bdLinkedList<bdReference<bdMessage> >::Node *m_next;
  bdLinkedList<bdReference<bdMessage> >::Node *m_prev;
};

/* 7987 */
struct __declspec(align(8)) bdLinkedList<bdReference<bdMessage> >
{
  bdLinkedList<bdReference<bdMessage> >::Node *m_head;
  bdLinkedList<bdReference<bdMessage> >::Node *m_tail;
  unsigned int m_size;
};

/* 7988 */
struct bdQueue<bdReference<bdMessage> >
{
  bdLinkedList<bdReference<bdMessage> > m_list;
};

/* 7989 */
struct __cppobj bdLoopbackConnection : bdConnection
{
  bdQueue<bdReference<bdMessage> > m_messages;
};

/* 7990 */
struct bdArray<bdReference<bdConnection> >
{
  bdReference<bdConnection> *m_data;
  unsigned int m_capacity;
  unsigned int m_size;
};

/* 7991 */
struct bdReference<bdInitAckChunk>
{
  bdInitAckChunk *m_ptr;
};

/* 7992 */
struct bdLinkedList<bdReference<bdConnection> >::Node
{
  bdReference<bdConnection> m_data;
  bdLinkedList<bdReference<bdConnection> >::Node *m_next;
  bdLinkedList<bdReference<bdConnection> >::Node *m_prev;
};

/* 7993 */
struct __declspec(align(8)) bdLinkedList<bdReference<bdConnection> >
{
  bdLinkedList<bdReference<bdConnection> >::Node *m_head;
  bdLinkedList<bdReference<bdConnection> >::Node *m_tail;
  unsigned int m_size;
};

/* 7994 */
struct bdQueue<bdReference<bdConnection> >
{
  bdLinkedList<bdReference<bdConnection> > m_list;
};

/* 7995 */
struct bdReference<bdInitChunk>
{
  bdInitChunk *m_ptr;
};

/* 7996 */
struct __declspec(align(8)) bdUnicastConnection::bdControlChunkStore
{
  bdReference<bdChunk> m_chunk;
  bool m_lone;
};

/* 7997 */
struct bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node
{
  bdUnicastConnection::bdControlChunkStore m_data;
  bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node *m_next;
  bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node *m_prev;
};

/* 7998 */
struct __declspec(align(8)) bdLinkedList<bdUnicastConnection::bdControlChunkStore>
{
  bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node *m_head;
  bdLinkedList<bdUnicastConnection::bdControlChunkStore>::Node *m_tail;
  unsigned int m_size;
};

/* 7999 */
struct bdQueue<bdUnicastConnection::bdControlChunkStore>
{
  bdLinkedList<bdUnicastConnection::bdControlChunkStore> m_list;
};

/* 8000 */
struct __cppobj bdUnicastConnection : bdConnection
{
  bdConnectionStatistics m_stats;
  bdReliableSendWindow *m_reliableSendWindow;
  bdReliableReceiveWindow *m_reliableRecvWindow;
  bdUnreliableSendWindow m_unreliableSendWindow;
  bdUnreliableReceiveWindow m_unreliableReceiveWindow;
  bdQueue<bdUnicastConnection::bdControlChunkStore> m_outQueue;
  bdStopwatch m_sendTimer;
  bdStopwatch m_receiveTimer;
  bdUnicastConnection::bdUnicastConnectionStatus m_state;
  unsigned int m_localTag;
  unsigned int m_peerTag;
  bdStopwatch m_initTimer;
  char m_initResends;
  bdStopwatch m_cookieTimer;
  char m_cookieResends;
  bdStopwatch m_shutdownTimer;
  char m_shutdownResends;
  bdStopwatch m_shutdownGuard;
  bdReference<bdInitAckChunk> m_initAckChunk;
  float m_smoothedRTT;
  float m_RTTVariation;
  bdAddressMap *m_addrMap;
};

/* 8001 */
struct bdReference<bdCookieAckChunk>
{
  bdCookieAckChunk *m_ptr;
};

/* 8002 */
struct bdReference<bdHeartbeatChunk>
{
  bdHeartbeatChunk *m_ptr;
};

/* 8003 */
struct bdReference<bdCookieEchoChunk>
{
  bdCookieEchoChunk *m_ptr;
};

/* 8004 */
struct bdReference<bdHeartbeatAckChunk>
{
  bdHeartbeatAckChunk *m_ptr;
};

/* 8005 */
struct __cppobj bdCryptoUtils
{
};

/* 8006 */
struct __cppobj bdHashTiger192 : bdHash
{
};

/* 8007 */
struct ltc_cipher_descriptor
{
  char *name;
  char ID;
  int min_key_length;
  int max_key_length;
  int block_length;
  int default_rounds;
  int (__cdecl *setup)(const char *, int, int, Symmetric_key *);
  int (__cdecl *ecb_encrypt)(const char *, char *, Symmetric_key *);
  int (__cdecl *ecb_decrypt)(const char *, char *, Symmetric_key *);
  int (__cdecl *test)();
  void (__cdecl *done)(Symmetric_key *);
  int (__cdecl *keysize)(int *);
  int (__cdecl *accel_ecb_encrypt)(const char *, char *, unsigned int, Symmetric_key *);
  int (__cdecl *accel_ecb_decrypt)(const char *, char *, unsigned int, Symmetric_key *);
  int (__cdecl *accel_cbc_encrypt)(const char *, char *, unsigned int, char *, Symmetric_key *);
  int (__cdecl *accel_cbc_decrypt)(const char *, char *, unsigned int, char *, Symmetric_key *);
  int (__cdecl *accel_ctr_encrypt)(const char *, char *, unsigned int, char *, int, Symmetric_key *);
  int (__cdecl *accel_lrw_encrypt)(const char *, char *, unsigned int, char *, const char *, Symmetric_key *);
  int (__cdecl *accel_lrw_decrypt)(const char *, char *, unsigned int, char *, const char *, Symmetric_key *);
  int (__cdecl *accel_ccm_memory)(const char *, unsigned int, Symmetric_key *, const char *, unsigned int, const char *, unsigned int, char *, unsigned int, char *, char *, unsigned int *, int);
  int (__cdecl *accel_gcm_memory)(const char *, unsigned int, const char *, unsigned int, const char *, unsigned int, char *, unsigned int, char *, char *, unsigned int *, int);
  int (__cdecl *omac_memory)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
  int (__cdecl *xcbc_memory)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
  int (__cdecl *f9_memory)(const char *, unsigned int, const char *, unsigned int, char *, unsigned int *);
};

/* 8008 */
struct ltc_prng_descriptor
{
  char *name;
  int export_size;
  int (__cdecl *start)(Prng_state *);
  int (__cdecl *add_entropy)(const char *, unsigned int, Prng_state *);
  int (__cdecl *ready)(Prng_state *);
  unsigned int (__cdecl *read)(char *, unsigned int, Prng_state *);
  int (__cdecl *done)(Prng_state *);
  int (__cdecl *pexport)(char *, unsigned int *, Prng_state *);
  int (__cdecl *pimport)(const char *, unsigned int, Prng_state *);
  int (__cdecl *test)();
};

/* 8009 */
struct __cppobj bdBase64
{
};

/* 8010 */
struct bdMallocMemory::bdMemoryChainElement
{
  unsigned __int16 m_magic;
  unsigned __int64 m_size;
  bool m_aligned;
  bdMallocMemory::bdMemoryChainElement *m_prev;
  bdMallocMemory::bdMemoryChainElement *m_next;
};

/* 8011 */
struct __cppobj bdMallocMemory
{
};

/* 8012 */
struct __cppobj bdPlatformStreamSocket
{
};

/* 8013 */
struct __declspec(align(8)) bdEmptyStringStatic
{
  bdStringData m_stringData;
  char m_stringByte;
};

/* 8014 */
struct __cppobj bdPlatformMutex
{
};

/* 8015 */
struct __cppobj bdPlatformSemaphore
{
};

/* 8016 */
struct __cppobj bdPlatformThread
{
};

/* 8017 */
struct __cppobj bdGetFilesResult : bdTaskResult
{
  unsigned __int64 m_ID;
  bdFileData m_data;
};

/* 8018 */
struct __cppobj bdAuthUtility
{
};

/* 8019 */
struct __cppobj bdUnlockContentInfo : bdTaskResult
{
  unsigned int m_contentKey;
  unsigned __int64 m_hardwareID;
};

/* 8020 */
struct __cppobj __declspec(align(8)) bdContentStatus : bdTaskResult
{
  unsigned __int64 m_unlockKey;
  bdContentStatusCode m_status;
};

/* 8021 */
struct __cppobj bdRichPresence : bdTaskResult
{
  unsigned int m_dataSize;
  void *m_data;
};

/* 8022 */
struct __cppobj __declspec(align(8)) bdFriendProposal : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
  char m_attachment[1024];
  unsigned int m_attachmentSize;
};

/* 8023 */
struct __cppobj __declspec(align(8)) bdGroupInfo : bdTaskResult
{
  char m_groupID;
  char m_groupName[32];
};

/* 8024 */
struct __cppobj __declspec(align(8)) bdFriendInfo : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
  bool m_isOnline;
  char m_groupID;
};

/* 8025 */
struct __cppobj bdFriendAndRichPresence : bdTaskResult
{
  unsigned __int64 m_userID;
  char m_userName[64];
  char m_groupID;
  bool m_isOnline;
  char m_richPresence[255];
  unsigned int m_richPresenceSize;
};

/* 8026 */
struct curl_certinfo
{
  int num_of_certs;
  curl_slist **certinfo;
};

/* 8027 */
union $6D4A2656004727BD525FB981A3A8E929
{
  void *whatever;
  CURLcode result;
};

/* 8028 */
struct CURLMsg
{
  CURLMSG msg;
  void *easy_handle;
  $6D4A2656004727BD525FB981A3A8E929 data;
};

/* 8029 */
struct __cppobj __declspec(align(8)) bdLink : bdTaskResult
{
  unsigned __int64 m_entityID;
  unsigned int m_category;
  char m_linkCode[64];
};

/* 8030 */
struct __cppobj __declspec(align(8)) bdLinkedAccountsResult : bdTaskResult
{
  bdUserAccountID m_userAccount;
  bdUserAccountID m_linkedAccountsResult[16];
  unsigned int m_numLinkedAccounts;
};

/* 8033 */
struct __cppobj __declspec(align(8)) bdDataIdentifier : bdTaskResult
{
  bdUserAccountID m_userAccountID;
  char m_context[16];
  bool m_isValid;
};

/* 8031 */
struct bdDataIdentifiers
{
  bdDataIdentifiersVtbl *vfptr;
  bdDataIdentifier m_identifiers[32];
};

/* 8032 */
struct bdDataIdentifiersVtbl
{
  void *(__cdecl *__vecDelDtor)(bdDataIdentifiers *this, unsigned int);
};

/* 8034 */
struct bdAuthMigrateAccountPlainText
{
  unsigned __int64 m_licenseID;
};

/* 8035 */
struct bdAuthChangeUserKeyCypherText
{
  unsigned int m_magicNumber;
  char m_userKey[24];
};

/* 8036 */
struct bdAuthChangeUserKeyPlainText
{
  unsigned __int64 m_userID;
};

/* 8037 */
struct bdAuthHostToServicePlainText
{
  unsigned __int64 m_licenseID;
};

/* 8038 */
struct bdAuthMigrateAccountCypherText
{
  unsigned int m_magicNumber;
  unsigned int m_oldTitleID;
  unsigned __int64 m_oldLicenseID;
};

/* 8039 */
struct bdAuthResetAccountCypherText
{
  unsigned int m_magicNumber;
  char m_userKey[24];
};

/* 8040 */
struct bdAuthCreateAccountCypherText
{
  unsigned int m_magicNumber;
  char m_username[64];
  char m_userKey[24];
};

/* 8041 */
struct bdAuthGetUsernamesForLicensePlainText
{
  unsigned __int64 m_licenseID;
};

/* 8042 */
struct bdAuthResetAccountPlainText
{
  unsigned __int64 m_userID;
};

/* 8043 */
struct bdAuthDeleteAccountCypherText
{
  unsigned int m_magicNumber;
};

/* 8044 */
struct bdAuthUserToServicePlainText
{
  unsigned __int64 m_userID;
};

/* 8045 */
struct bdAuthDeleteAccountPlainText
{
  unsigned __int64 m_userID;
};

/* 8046 */
struct bdAuthUserToHostPlainText
{
  unsigned __int64 m_userID;
  unsigned __int64 m_hostLicenseID;
};

/* 8047 */
struct bdAuthCreateAccountPlainText
{
  unsigned __int64 m_licenseID;
};

/* 8048 */
struct __cppobj __declspec(align(8)) bdMarketplaceProductItem : bdTaskResult
{
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
  char m_itemData[16];
  unsigned int m_itemDataSize;
};

/* 8049 */
struct __cppobj bdMarketplaceCurrency : bdTaskResult
{
  char m_currencyCode[20];
  unsigned int m_value;
};

/* 8050 */
struct __cppobj bdMarketplaceSku : bdTaskResult
{
  unsigned int m_skuId;
  unsigned int m_productId;
  char m_isEnabled;
  char m_skuData[64];
  char m_skuDataSize;
  char m_ignoreEntitlements;
  char m_couponEnabled;
  unsigned int m_saleStartDateTime;
  unsigned int m_saleEndDateTime;
  unsigned int m_rentalDuration;
  char m_promotionalText[135];
  char m_promotionalTextSize;
  unsigned int m_origSkuId;
  unsigned __int16 m_collisionField;
  unsigned int m_modDateTime;
  char m_numPrices;
  bdMarketplaceCurrency m_skuPrices[10];
};

/* 8051 */
struct __cppobj __declspec(align(8)) bdMarketplacePurchase : bdTaskResult
{
  unsigned int m_purchaseId;
};

/* 8052 */
struct __cppobj bdMarketplaceProduct : bdTaskResult
{
  unsigned int m_productId;
  char m_productName[45];
  char m_description[80];
  unsigned __int16 m_collisionField;
  unsigned int m_modDateTime;
  unsigned int m_numItems;
  bdMarketplaceProductItem m_productItems[10];
};

/* 8053 */
struct __cppobj bdMarketplaceInventory : bdTaskResult
{
  unsigned int m_inventoryId;
  unsigned int m_productId;
  unsigned int m_itemId;
  unsigned int m_itemQuantity;
  unsigned int m_expireDateTime;
  unsigned __int64 m_purchasePlayerId;
  unsigned __int16 m_purchaseId;
  unsigned __int16 m_collisionField;
  unsigned int m_modDateTime;
};

/* 8054 */
struct __cppobj bdPresenceInfo : bdTaskResult
{
  bdUserAccountID m_onlineUserAccountID;
  char m_platform[10];
  bool m_online;
  char m_presenceData[32];
  unsigned int m_presenceSize;
};

/* 8055 */
struct __cppobj bdRelayCredentials : bdTaskResult
{
  char m_credentialsBlob[513];
  unsigned int m_credentialsBlobSize;
};

/* 8056 */
struct __cppobj bdTeamMemberProfile : bdProfileInfo
{
};

/* 8057 */
struct __cppobj bdTeamProfile : bdTaskResult
{
  unsigned __int64 m_teamID;
};

/* 8058 */
struct __cppobj __declspec(align(8)) bdTeamProposal : bdTaskResult
{
  bdUserAccountID m_userID;
  unsigned __int64 m_teamID;
  char m_userName[64];
  char m_teamName[64];
  char m_attachment[1024];
  unsigned int m_attachmentSize;
};

/* 8059 */
struct __cppobj __declspec(align(8)) bdTeamInfo : bdTaskResult
{
  unsigned __int64 m_teamID;
  bdUserAccountID m_ownerUserID;
  char m_teamName[64];
  char m_memberStatus;
};

/* 8060 */
struct __cppobj __declspec(align(8)) bdTeamMember : bdTaskResult
{
  unsigned __int64 m_teamID;
  bdUserAccountID m_userID;
  char m_userName[64];
  bool m_isOnline;
  char m_status;
};

/* 8061 */
struct bdTeamProfileSearchParams
{
  bdTeamProfileSearchParamsVtbl *vfptr;
};

/* 8062 */
struct bdTeamProfileSearchParamsVtbl
{
  void *(__cdecl *__vecDelDtor)(bdTeamProfileSearchParams *this, unsigned int);
  bool (__cdecl *serialize)(bdTeamProfileSearchParams *this, bdByteBuffer *);
};

/* 8063 */
struct __cppobj __declspec(align(8)) bdTwitterUserAttribute : bdTaskResult
{
  unsigned int m_name;
  char m_value[512];
};

/* 8064 */
struct __cppobj bdTwitterAccount : bdTaskResult
{
  unsigned __int64 m_accountID;
  char m_accountName[128];
};

/* 8065 */
struct __cppobj __declspec(align(8)) bdTwitterIsRegistered : bdTaskResult
{
  bool m_isRegistered;
};

/* 8066 */
struct __cppobj __declspec(align(8)) bdTwitterSearchResult : bdTaskResult
{
  char m_screenName[1024];
  char m_profileImageURL[560];
  char m_text[560];
  unsigned int m_createdTimestamp;
};

/* 8067 */
struct __cppobj __declspec(align(8)) bdUCDAccountStatus : bdTaskResult
{
  bool m_hasUCDAccount;
  bool m_marketingOptIn;
  bool m_emailVerified;
  bool m_isEliteMember;
  bool m_isEliteFounder;
  int m_isElitePaid;
};

/* 8068 */
struct __cppobj __declspec(align(8)) bdUCDAccountInfo : bdTaskResult
{
  unsigned __int64 m_ucdID;
  char m_accountName[256];
  char m_firstName[256];
  char m_lastName[256];
  char m_emailAddress[128];
  bool m_marketingOptIn;
  char m_dateOfBirth[12];
  char m_countryCode[4];
  char m_zipCode[64];
  char m_aesKey[24];
};

/* 8069 */
struct __cppobj bdUCDAccountID : bdTaskResult
{
  unsigned __int64 m_ucdID;
};

/* 8070 */
struct __cppobj bdRichPresenceInfo : bdTaskResult
{
  bool m_online;
  char m_richPresence[32];
  unsigned int m_count;
};

/* 8071 */
struct __cppobj __declspec(align(4)) bdSubscriptionInfo : bdTaskResult
{
  unsigned __int64 m_userID;
  unsigned int m_subscriptionType;
  unsigned int m_subscriptionLevel;
  int m_daysToExpiry;
  bool m_canExpire;
};

/* 8072 */
struct __cppobj bdHashSHA1 : bdHash
{
};

/* 8073 */
struct __cppobj bdThreadedSocket : bdSocket
{
  bdThread *m_receiveThread;
  struct bdReceiveThread *m_receiver;
  bdThread *m_sendThread;
  struct bdSendThread *m_sender;
  unsigned int m_incomingBufferSize;
  unsigned int m_threadStackSize;
};

/* 8074 */
struct __cppobj bdDummySocket : bdThreadedSocket
{
};

/* 8075 */
struct bdLinkable
{
  bdLinkableVtbl *vfptr;
  bdLinkable *m_previous;
  bdLinkable *m_next;
  bdLinkable **m_headPtr;
};

/* 8076 */
struct bdLinkableVtbl
{
  void *(__cdecl *__vecDelDtor)(bdLinkable *this, unsigned int);
};

/* 8077 */
struct __cppobj bdLogSubscriber : bdLinkable
{
  const char *m_channels[5];
};

/* 8078 */
struct __cppobj bdPlatformTrulyRandomInit
{
};

/* 8079 */
struct $544C465746ABD2ED274E8E3554A6B2A0
{
  int mpi_code;
  int ltc_code;
};

/* 8080 */
const struct $106433AFD2FD8B8AFFAADFA20F3E808F
{
  int mpi_code;
  int ltc_code;
};

/* 8081 */
struct mp_int
{
  int used;
  int alloc;
  int sign;
  unsigned int *dp;
};

/* 8082 */
struct ltc_asn1_list_
{
  int type;
  void *data;
  unsigned int size;
  int used;
  ltc_asn1_list_ *prev;
  ltc_asn1_list_ *next;
  ltc_asn1_list_ *child;
  ltc_asn1_list_ *parent;
};

/* 8083 */
struct ltc_utctime
{
  unsigned int YY;
  unsigned int MM;
  unsigned int DD;
  unsigned int hh;
  unsigned int mm;
  unsigned int ss;
  unsigned int off_dir;
  unsigned int off_hh;
  unsigned int off_mm;
};

/* 8084 */
struct $0AF07E63238CFA584ACF93EEEF14C9B0
{
  int code;
  int value;
};

/* 8085 */
const struct $27FA1CBF2E036788A821DBB7539FC087
{
  int code;
  int value;
};

/* 8086 */
struct __declspec(align(8)) edge
{
  char *start;
  unsigned int size;
};

/* 8087 */
struct split_cb_params
{
  int subvect_size;
  int nb_subvect;
  const char *shape_cb;
  int shape_bits;
  int have_sign;
};

/* 8088 */
struct CombFilterMem
{
  int last_pitch;
  float last_pitch_gain[3];
  float smooth_gain;
};

/* 8089 */
struct ltp_params
{
  const char *gain_cdbk;
  int gain_bits;
  int pitch_bits;
};

/* 8090 */
struct __declspec(align(8)) SpeexSubmode
{
  int lbr_pitch;
  int forced_pitch_gain;
  int have_subframe_gain;
  int double_codebook;
  void (__cdecl *lsp_quant)(float *, float *, int, SpeexBits *);
  void (__cdecl *lsp_unquant)(float *, int, SpeexBits *);
  int (__cdecl *ltp_quant)(float *, float *, float *, float *, float *, float *, const void *, int, int, float, int, int, SpeexBits *, char *, float *, float *, int, int, int);
  void (__cdecl *ltp_unquant)(float *, int, int, float, const void *, int, int *, float *, SpeexBits *, char *, int, int, float, int);
  const void *ltp_params;
  void (__cdecl *innovation_quant)(float *, float *, float *, float *, const void *, int, int, float *, float *, SpeexBits *, char *, int, int);
  void (__cdecl *innovation_unquant)(float *, const void *, int, SpeexBits *, char *);
  const void *innovation_params;
  float lpc_enh_k1;
  float lpc_enh_k2;
  float lpc_enh_k3;
  float comb_gain;
  int bits_per_frame;
};

/* 8091 */
struct SpeexNBMode
{
  int frameSize;
  int subframeSize;
  int lpcSize;
  int pitchStart;
  int pitchEnd;
  float gamma1;
  float gamma2;
  float lag_factor;
  float lpc_floor;
  SpeexSubmode *submodes[16];
  int defaultSubmode;
  int quality_map[11];
};

/* 8092 */
struct __declspec(align(8)) SpeexSBMode
{
  SpeexMode *nb_mode;
  int frameSize;
  int subframeSize;
  int lpcSize;
  int bufSize;
  float gamma1;
  float gamma2;
  float lag_factor;
  float lpc_floor;
  float folding_gain;
  SpeexSubmode *submodes[8];
  int defaultSubmode;
  int low_quality_map[11];
  int quality_map[11];
  const float (*vbr_thresh)[11];
  int nb_modes;
};

/* 8093 */
struct __declspec(align(8)) SpeexCallback
{
  int callback_id;
  int (__cdecl *func)(SpeexBits *, void *, void *);
  void *data;
  void *reserved1;
  int reserved2;
};

/* 8094 */
struct __declspec(align(8)) DecState
{
  SpeexMode *mode;
  int first;
  int count_lost;
  int frameSize;
  int subframeSize;
  int nbSubframes;
  int lpcSize;
  int min_pitch;
  int max_pitch;
  int sampling_rate;
  float last_ol_gain;
  char *stack;
  float *inBuf;
  float *frame;
  float *excBuf;
  float *exc;
  float *innov;
  float *qlsp;
  float *old_qlsp;
  float *interp_qlsp;
  float *interp_qlpc;
  float *mem_sp;
  float *pi_gain;
  int last_pitch;
  float last_pitch_gain;
  float pitch_gain_buf[3];
  int pitch_gain_buf_idx;
  float level;
  float max_level;
  float min_level;
  int encode_submode;
  SpeexSubmode *const *submodes;
  int submodeID;
  int lpc_enh_enabled;
  CombFilterMem *comb_mem;
  SpeexCallback speex_callbacks[16];
  SpeexCallback user_callback;
  float voc_m1;
  float voc_m2;
  float voc_mean;
  int voc_offset;
  int dtx_enabled;
};

/* 8095 */
struct VBRState
{
  float energy_alpha;
  float average_energy;
  float last_energy;
  float last_log_energy[5];
  float accum_sum;
  float last_pitch_coef;
  float soft_pitch;
  float last_quality;
  float noise_level;
  float noise_accum;
  float noise_accum_count;
  int consec_noise;
};

/* 8096 */
struct EncState
{
  SpeexMode *mode;
  int first;
  int frameSize;
  int subframeSize;
  int nbSubframes;
  int windowSize;
  int lpcSize;
  int min_pitch;
  int max_pitch;
  int safe_pitch;
  int bounded_pitch;
  int ol_pitch;
  int ol_voiced;
  int *pitch;
  float gamma1;
  float gamma2;
  float lag_factor;
  float lpc_floor;
  char *stack;
  float *inBuf;
  float *frame;
  float *excBuf;
  float *exc;
  float *swBuf;
  float *sw;
  float *innov;
  float *window;
  float *autocorr;
  float *lagWindow;
  float *lpc;
  float *lsp;
  float *qlsp;
  float *old_lsp;
  float *old_qlsp;
  float *interp_lsp;
  float *interp_qlsp;
  float *interp_lpc;
  float *interp_qlpc;
  float *bw_lpc1;
  float *bw_lpc2;
  float *mem_sp;
  float *mem_sw;
  float *mem_sw_whole;
  float *mem_exc;
  float *pi_gain;
  VBRState *vbr;
  float vbr_quality;
  float relative_quality;
  int vbr_enabled;
  int vad_enabled;
  int dtx_enabled;
  int dtx_count;
  int abr_enabled;
  float abr_drift;
  float abr_drift2;
  float abr_count;
  int complexity;
  int sampling_rate;
  int plc_tuning;
  int encode_submode;
  SpeexSubmode *const *submodes;
  int submodeID;
  int submodeSelect;
};

/* 8097 */
struct __declspec(align(8)) SBDecState
{
  SpeexMode *mode;
  void *st_low;
  int full_frame_size;
  int frame_size;
  int subframeSize;
  int nbSubframes;
  int lpcSize;
  int first;
  int sampling_rate;
  int lpc_enh_enabled;
  char *stack;
  float *x0d;
  float *x1d;
  float *high;
  float *y0;
  float *y1;
  float *g0_mem;
  float *g1_mem;
  float *exc;
  float *qlsp;
  float *old_qlsp;
  float *interp_qlsp;
  float *interp_qlpc;
  float *mem_sp;
  float *pi_gain;
  int encode_submode;
  SpeexSubmode *const *submodes;
  int submodeID;
};

/* 8098 */
struct SBEncState
{
  SpeexMode *mode;
  void *st_low;
  int full_frame_size;
  int frame_size;
  int subframeSize;
  int nbSubframes;
  int windowSize;
  int lpcSize;
  int bufSize;
  int first;
  float lag_factor;
  float lpc_floor;
  float gamma1;
  float gamma2;
  char *stack;
  float *x0d;
  float *x1d;
  float *high;
  float *y0;
  float *y1;
  float *h0_mem;
  float *h1_mem;
  float *g0_mem;
  float *g1_mem;
  float *excBuf;
  float *exc;
  float *buf;
  float *res;
  float *sw;
  float *target;
  float *window;
  float *lagWindow;
  float *autocorr;
  float *lpc;
  float *lsp;
  float *qlsp;
  float *old_lsp;
  float *old_qlsp;
  float *interp_lsp;
  float *interp_qlsp;
  float *interp_lpc;
  float *interp_qlpc;
  float *bw_lpc1;
  float *bw_lpc2;
  float *mem_sp;
  float *mem_sp2;
  float *mem_sw;
  float *pi_gain;
  float vbr_quality;
  int vbr_enabled;
  int abr_enabled;
  float abr_drift;
  float abr_drift2;
  float abr_count;
  int vad_enabled;
  float relative_quality;
  int encode_submode;
  SpeexSubmode *const *submodes;
  int submodeID;
  int submodeSelect;
  int complexity;
  int sampling_rate;
};

/* 8099 */
struct std::_Win_errtab_t
{
  int _Errcode;
  const char *_Name;
};

/* 8100 */
struct std::_Sys_errtab_t
{
  std::errc::errc _Errcode;
  const char *_Name;
};

/* 8101 */
struct __declspec(align(8)) _TP_CALLBACK_ENVIRON_V1
{
  unsigned int Version;
  _TP_POOL *Pool;
  _TP_CLEANUP_GROUP *CleanupGroup;
  void (__cdecl *CleanupGroupCancelCallback)(void *, void *);
  void *RaceDll;
  _ACTIVATION_CONTEXT *ActivationContext;
  void (__cdecl *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
  $CB6D2800E947F9C027721D927096E7C6 u;
};

/* 8102 */
struct __unaligned __declspec(align(4)) $_s__RTTIBaseClassArray$_extraBytes_16
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[2];
  _BYTE gap10[4];
};

/* 8103 */
struct __cppobj std::bad_exception : std::exception
{
};

/* 8104 */
struct __cppobj std::bad_alloc : std::exception
{
};

/* 8105 */
struct __cppobj std::bad_array_new_length : std::bad_alloc
{
};

/* 8106 */
struct __unaligned __declspec(align(4)) $_s__RTTIBaseClassArray$_extraBytes_24
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[3];
  _BYTE gap18[4];
};

/* 8107 */
struct $_TypeDescriptor$_extraBytes_24
{
  const void *pVFTable;
  void *spare;
  char name[24];
};

/* 8108 */
struct __unaligned __declspec(align(4)) $_s__RTTIBaseClassArray$_extraBytes_8
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[1];
  _BYTE gap8[4];
};

/* 8109 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_26
{
  const void *pVFTable;
  void *spare;
  char name[26];
};

/* 8110 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_33
{
  const void *pVFTable;
  void *spare;
  char name[33];
};

/* 8111 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_35
{
  const void *pVFTable;
  void *spare;
  char name[35];
};

/* 8112 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_22
{
  const void *pVFTable;
  void *spare;
  char name[22];
};

/* 8113 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_31
{
  const void *pVFTable;
  void *spare;
  char name[31];
};

/* 8114 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_23
{
  const void *pVFTable;
  void *spare;
  char name[23];
};

/* 8115 */
struct __unaligned __declspec(align(4)) $_TypeDescriptor$_extraBytes_20
{
  const void *pVFTable;
  void *spare;
  char name[20];
};

/* 8116 */
struct __cppobj std::_Ignore
{
};

/* 8117 */
struct __cppobj std::_Tuple_alloc_t
{
};

/* 8118 */
struct __unaligned __declspec(align(4)) $_TypeDescriptor$_extraBytes_28
{
  const void *pVFTable;
  void *spare;
  char name[28];
};

/* 8119 */
struct __cppobj std::_Regex_traits_base
{
};

/* 8120 */
struct __cppobj std::_Regex_traits<wchar_t> : std::_Regex_traits_base
{
  const struct std::collate<wchar_t> *_Pcoll;
  std::ctype<wchar_t> *_Pctype;
  std::locale _Loc;
};

/* 8121 */
struct __declspec(align(4)) std::_Cl_names<wchar_t>
{
  const wchar_t *_Ptr;
  unsigned int _Len;
  __int16 _Ctype;
};

/* 8122 */
struct std::money_base::pattern
{
  char field[4];
};

/* 8123 */
struct __cppobj std::money_base : std::locale::facet
{
};

/* 8124 */
struct std::_Node_base
{
  std::_Node_baseVtbl *vfptr;
  std::_Node_type _Kind;
  std::_Node_flags _Flags;
  std::_Node_base *_Next;
  std::_Node_base *_Prev;
};

/* 8125 */
struct std::_Node_baseVtbl
{
  void *(__cdecl *__vecDelDtor)(std::_Node_base *this, unsigned int);
};

/* 8126 */
struct __cppobj std::_Node_rep : std::_Node_base
{
  const int _Min;
  const int _Max;
  std::_Node_end_rep *_End_rep;
  unsigned int _Loop_number;
  int _Simple_loop;
};

/* 8127 */
struct __cppobj std::_Node_end_rep : std::_Node_base
{
  std::_Node_rep *_Begin_rep;
};

/* 8128 */
struct __cppobj std::regex_traits<wchar_t> : std::_Regex_traits<wchar_t>
{
};

/* 8129 */
struct __cppobj __declspec(align(8)) std::_Node_capture : std::_Node_base
{
  unsigned int _Idx;
};

/* 8130 */
struct __cppobj std::_Root_node : std::_Node_base
{
  std::regex_constants::syntax_option_type _Fl;
  unsigned int _Loops;
  unsigned int _Marks;
  unsigned int _Refs;
};

/* 8131 */
struct __cppobj std::bad_function_call : std::exception
{
};

/* 8132 */
struct __cppobj std::_Node_assert : std::_Node_base
{
  std::_Node_base *_Child;
};

/* 8133 */
struct __cppobj std::_Node_end_group : std::_Node_base
{
  std::_Node_base *_Back;
};

/* 8134 */
struct __cppobj std::messages_base : std::locale::facet
{
};

/* 8135 */
struct __cppobj std::time_base : std::locale::facet
{
};

/* 8136 */
struct __cppobj std::_Regex_traits<char> : std::_Regex_traits_base
{
  const struct std::collate<char> *_Pcoll;
  std::ctype<char> *_Pctype;
  std::locale _Loc;
};

/* 8137 */
struct __declspec(align(4)) std::_Cl_names<char>
{
  const char *_Ptr;
  unsigned int _Len;
  __int16 _Ctype;
};

/* 8138 */
struct __cppobj __declspec(align(8)) std::_Node_back : std::_Node_base
{
  unsigned int _Idx;
};

/* 8139 */
struct __cppobj std::_Node_endif : std::_Node_base
{
};

/* 8140 */
struct __cppobj std::_Node_if : std::_Node_base
{
  std::_Node_endif *_Endif;
  std::_Node_if *_Child;
};

/* 8141 */
struct std::_Bitmap
{
  char _Chrs[32];
};

/* 8142 */
struct __cppobj std::regex_traits<char> : std::_Regex_traits<char>
{
};

/* 8143 */
struct __cppobj __declspec(align(8)) std::regex_error : std::runtime_error
{
  std::regex_constants::error_type _Err;
};

/* 8144 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_50
{
  const void *pVFTable;
  void *spare;
  char name[50];
};

/* 8145 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_21
{
  const void *pVFTable;
  void *spare;
  char name[21];
};

/* 8146 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_118
{
  const void *pVFTable;
  void *spare;
  char name[118];
};

/* 8147 */
struct __unaligned __declspec(align(4)) $_TypeDescriptor$_extraBytes_52
{
  const void *pVFTable;
  void *spare;
  char name[52];
};

/* 8148 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_27
{
  const void *pVFTable;
  void *spare;
  char name[27];
};

/* 8149 */
struct __unaligned __declspec(align(4)) $_s__CatchableTypeArray$_extraBytes_16
{
  int nCatchableTypes;
  _s__CatchableType *arrayOfCatchableTypes[2];
};

/* 8150 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_19
{
  const void *pVFTable;
  void *spare;
  char name[19];
};

/* 8151 */
struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_46
{
  const void *pVFTable;
  void *spare;
  char name[46];
};

/* 8152 */
struct __unaligned __declspec(align(4)) $_s__RTTIBaseClassArray$_extraBytes_32
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[4];
  _BYTE gap20[4];
};

/* 8153 */
struct __unaligned __declspec(align(4)) $_s__RTTIBaseClassArray$_extraBytes_40
{
  _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[5];
  _BYTE gap28[4];
};

/* 8154 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_25
{
  const void *pVFTable;
  void *spare;
  char name[25];
};

/* 8155 */
struct _UNICODE_STRING
{
  unsigned __int16 Length;
  unsigned __int16 MaximumLength;
  unsigned __int16 *Buffer;
};

/* 8156 */
struct _PEB_LDR_DATA
{
  char Reserved1[8];
  void *Reserved2[3];
  _LIST_ENTRY InMemoryOrderModuleList;
};

/* 8157 */
struct _RTL_USER_PROCESS_PARAMETERS
{
  char Reserved1[16];
  void *Reserved2[10];
  _UNICODE_STRING ImagePathName;
  _UNICODE_STRING CommandLine;
};

/* 8158 */
struct __declspec(align(8)) _PEB
{
  char Reserved1[2];
  char BeingDebugged;
  char Reserved2[1];
  void *Reserved3[2];
  _PEB_LDR_DATA *Ldr;
  _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
  void *Reserved4[3];
  void *AtlThunkSListPtr;
  void *Reserved5;
  unsigned int Reserved6;
  void *Reserved7;
  unsigned int Reserved8;
  unsigned int AtlThunkSListPtr32;
  void *Reserved9[45];
  char Reserved10[96];
  void (__cdecl *PostProcessInitRoutine)();
  char Reserved11[128];
  void *Reserved12[1];
  unsigned int SessionId;
};

/* 8159 */
struct _TEB
{
  void *Reserved1[12];
  _PEB *ProcessEnvironmentBlock;
  void *Reserved2[399];
  char Reserved3[1952];
  void *TlsSlots[64];
  char Reserved4[8];
  void *Reserved5[26];
  void *ReservedForOle;
  void *Reserved6[4];
  void *TlsExpansionSlots;
};

/* 8160 */
struct $A3D4C8CA49A37EEA19BC4C584E6B7873
{
  _BYTE gap0[1];
  __int8 UnwindOp : 4;
  __int8 OpInfo : 4;
};

/* 8161 */
union _UNWIND_CODE
{
  char CodeOffset;
  unsigned __int16 FrameOffset;
  $A3D4C8CA49A37EEA19BC4C584E6B7873 __s2;
};

/* 8162 */
struct _UNWIND_INFO
{
  __int8 Version : 3;
  __int8 Flags : 5;
  char SizeOfProlog;
  char CountOfCodes;
  __int8 FrameRegister : 4;
  __int8 FrameOffset : 4;
  _UNWIND_CODE UnwindCode[1];
};

/* 8163 */
struct $41FAD49F36BA17CD782970E11D2A1387
{
  unsigned __int32 EHandler : 1;
  unsigned __int32 UHandler : 1;
  unsigned __int32 HasAlignment : 1;
};

/* 8164 */
union $2E62C6126135020DDBC3F62C41B04FAD
{
  $41FAD49F36BA17CD782970E11D2A1387 Bits;
  int CookieOffset;
};

/* 8165 */
struct _GS_HANDLER_DATA
{
  $2E62C6126135020DDBC3F62C41B04FAD u;
  int AlignedBaseOffset;
  int Alignment;
};

/* 8166 */
struct LjFrame
{
  unsigned __int64 P1Home;
  unsigned __int64 P2Home;
  unsigned __int64 P3Home;
  unsigned __int64 P4Home;
  unsigned __int64 P5Home;
  unsigned __int64 P6Home;
  unsigned int Excode;
  unsigned int Flags;
  unsigned __int64 Associate;
  unsigned __int64 Address;
  unsigned int Number;
  unsigned int Fill1;
  unsigned __int64 Jmpbuf;
  unsigned __int64 Fill2;
  char Context;
  _BYTE gap61[1231];
  unsigned __int64 Fill3;
};

/* 8167 */
struct _strflt
{
  int sign;
  int decpt;
  int flag;
  char *mantissa;
};

/* 8168 */
struct _finddata32_t
{
  unsigned int attrib;
  int time_create;
  int time_access;
  int time_write;
  unsigned int size;
  char name[260];
};

/* 8169 */
struct errentry
{
  unsigned int oscode;
  int errnocode;
};

/* 8170 */
struct setloc_downlevel_struct
{
  int iLcidState;
  unsigned int lcidLanguage;
  unsigned int lcidCountry;
};

/* 8171 */
struct _is_ctype_compatible
{
  unsigned int id;
  int is_clike;
};

/* 8172 */
struct __declspec(align(8)) setloc_struct
{
  wchar_t *pchLanguage;
  wchar_t *pchCountry;
  int iLocState;
  int iPrimaryLen;
  int bAbbrevLanguage;
  int bAbbrevCountry;
  unsigned int _cachecp;
  wchar_t _cachein[131];
  wchar_t _cacheout[131];
  _is_ctype_compatible _Loc_c[5];
  wchar_t _cacheLocaleName[85];
};

/* 8173 */
struct _tiddata
{
  unsigned int _tid;
  unsigned __int64 _thandle;
  int _terrno;
  unsigned int _tdoserrno;
  unsigned int _fpds;
  unsigned int _holdrand;
  char *_token;
  wchar_t *_wtoken;
  char *_mtoken;
  char *_errmsg;
  wchar_t *_werrmsg;
  char *_namebuf0;
  wchar_t *_wnamebuf0;
  char *_namebuf1;
  wchar_t *_wnamebuf1;
  char *_asctimebuf;
  wchar_t *_wasctimebuf;
  void *_gmtimebuf;
  char *_cvtbuf;
  char _con_ch_buf[5];
  unsigned __int16 _ch_buf_used;
  void *_initaddr;
  void *_initarg;
  void *_pxcptacttab;
  void *_tpxcptinfoptrs;
  int _tfpecode;
  threadmbcinfostruct *ptmbcinfo;
  threadlocaleinfostruct *ptlocinfo;
  int _ownlocale;
  unsigned int _NLG_dwCode;
  void *_terminate;
  void *_unexpected;
  void *_translator;
  void *_purecall;
  void *_curexception;
  void *_curcontext;
  int _ProcessingThrow;
  void *_curexcspec;
  void *_pExitContext;
  void *_pUnwindContext;
  void *_pFrameInfoChain;
  unsigned __int64 _ImageBase;
  unsigned __int64 _ThrowImageBase;
  void *_pForeignException;
  setloc_struct _setloc_data;
  void *_reserved1;
  void *_reserved2;
  void *_reserved3;
  int _cxxReThrow;
  unsigned int __initDomain;
  int _initapartment;
  setloc_downlevel_struct *_setloc_downlevel_data;
};

/* 8174 */
struct _stat64
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  __int64 st_size;
  __int64 st_atime;
  __int64 st_mtime;
  __int64 st_ctime;
};

/* 8175 */
struct _stat32
{
  unsigned int st_dev;
  unsigned __int16 st_ino;
  unsigned __int16 st_mode;
  __int16 st_nlink;
  __int16 st_uid;
  __int16 st_gid;
  unsigned int st_rdev;
  int st_size;
  int st_atime;
  int st_mtime;
  int st_ctime;
};

/* 8176 */
struct __declspec(align(8)) ioinfo
{
  __int64 osfhnd;
  char osfile;
  char pipech;
  int lockinitflag;
  _RTL_CRITICAL_SECTION lock;
  __int8 textmode : 7;
  __int8 unicode : 1;
  char pipech2[2];
  __int64 startpos;
  int utf8translations;
  char dbcsBuffer;
  int dbcsBufferUsed;
};

/* 8177 */
struct CharPair
{
  char LeadChar;
  char SecondChar;
};

/* 8178 */
struct EnhKeyVals
{
  unsigned __int16 ScanCode;
  CharPair RegChars;
  CharPair ShiftChars;
  CharPair CtrlChars;
  CharPair AltChars;
};

/* 8179 */
struct NormKeyVals
{
  CharPair RegChars;
  CharPair ShiftChars;
  CharPair CtrlChars;
  CharPair AltChars;
};

/* 8180 */
struct IMAGE_LOAD_CONFIG_DIRECTORY64_2
{
  unsigned int Size;
  unsigned int TimeDateStamp;
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
  unsigned int GlobalFlagsClear;
  unsigned int GlobalFlagsSet;
  unsigned int CriticalSectionDefaultTimeout;
  unsigned __int64 DeCommitFreeBlockThreshold;
  unsigned __int64 DeCommitTotalFreeThreshold;
  unsigned __int64 LockPrefixTable;
  unsigned __int64 MaximumAllocationSize;
  unsigned __int64 VirtualMemoryThreshold;
  unsigned __int64 ProcessAffinityMask;
  unsigned int ProcessHeapFlags;
  unsigned __int16 CSDVersion;
  unsigned __int16 Reserved1;
  unsigned __int64 EditList;
  unsigned __int64 *SecurityCookie;
  unsigned __int64 SEHandlerTable;
  unsigned __int64 SEHandlerCount;
};

/* 8181 */
struct _MessageBoxArgsW
{
  int (__cdecl *dpfnMessageBox)(HWND__ *, const wchar_t *, const wchar_t *, unsigned int);
  const wchar_t *lpText;
  const wchar_t *lpCaption;
  unsigned int uType;
  int iMsgBoxReturn;
};

/* 8182 */
struct tagLC_STRINGS
{
  wchar_t szLanguage[64];
  wchar_t szCountry[64];
  wchar_t szCodePage[16];
  wchar_t szLocaleName[85];
};

/* 8183 */
struct tagLOCALETAB
{
  unsigned __int16 *szName;
  wchar_t chAbbrev[4];
};

/* 8184 */
union FT
{
  unsigned __int64 ft_scalar;
  _FILETIME ft_struct;
};

/* 8185 */
struct _XCPT_ACTION
{
  unsigned int XcptNum;
  int SigNum;
  void (__cdecl *XcptAction)(int);
};

/* 8186 */
struct __declspec(align(8)) LocaleNameIndex
{
  unsigned __int16 *name;
  int index;
};

/* 8187 */
struct LcidToLocaleName
{
  unsigned int lcid;
  unsigned __int16 *localeName;
};

/* 8188 */
struct $5031E5A143373D1D831A2DDDE288DB54
{
  const wchar_t *catname;
  unsigned __int16 *locale;
  int (__cdecl *init)(threadlocaleinfostruct *);
};

/* 8189 */
const struct $A3C0AC3CCEB25FE3C10FAE06D619F269
{
  const wchar_t *catname;
  unsigned __int16 *locale;
  int (__cdecl *init)(threadlocaleinfostruct *);
};

/* 8190 */
struct _FILEX
{
  _iobuf f;
  _RTL_CRITICAL_SECTION lock;
};

/* 8191 */
struct IDpair
{
  _iobuf *stream;
  __int64 prochnd;
};

/* 8192 */
struct __declspec(align(4)) __timeb64
{
  __int64 time;
  unsigned __int16 millitm;
  __int16 timezone;
  __int16 dstflag;
};

/* 8193 */
struct __declspec(align(4)) timeb
{
  __int64 time;
  unsigned __int16 millitm;
  __int16 timezone;
  __int16 dstflag;
};

/* 8194 */
struct transitiondate
{
  int yr;
  int yd;
  int ms;
};

/* 8195 */
struct __cppobj <CrtImplementationDetails>::NativeDll
{
};

/* 8196 */
struct __declspec(align(8)) _LocaleUpdate
{
  localeinfo_struct localeinfo;
  _tiddata *ptd;
  bool updated;
};

/* 8197 */
struct _flt
{
  int flags;
  int nbytes;
  int lval;
  long double dval;
};

/* 8198 */
struct code_page_info
{
  int code_page;
  unsigned __int16 mbulinfo[6];
  char rgrange[4][8];
};

/* 8199 */
union $C8014B43F160BFD769FAE3F15553333C
{
  char sz[512];
};

/* 8200 */
union $12F061FBE778B92DEB8200A0ACF7A038
{
  char *sz;
  wchar_t *wz;
};

/* 8201 */
struct _output_l::__l77::_count_string
{
  __int16 Length;
  __int16 MaximumLength;
  char *Buffer;
};

/* 8202 */
struct positional_paramA
{
  ARG_TYPE arg_type;
  char *arg_ptr;
  char type;
  int flags;
};

/* 8203 */
struct _output_s_l::__l83::_count_string
{
  __int16 Length;
  __int16 MaximumLength;
  char *Buffer;
};

/* 8204 */
union $B4FF2100EA110D8CD0B9C89F852FB035
{
  char sz[512];
  wchar_t wz[512];
};

/* 8205 */
struct _woutput_l::__l66::_count_string
{
  __int16 Length;
  __int16 MaximumLength;
  char *Buffer;
};

/* 8206 */
struct __declspec(align(8)) $56B5CE0DB002A9D57337ECC5EEC08B90
{
  _RTL_CRITICAL_SECTION *lock;
  $1DD7A03358E0D01DD359262876E6A0F0 kind;
};

/* 8207 */
struct rterrmsgs
{
  int rterrno;
  const wchar_t *rterrtxt;
};

/* 8208 */
struct CsFrame
{
  unsigned __int64 SavedR10;
  unsigned __int64 SavedR11;
};

/* 8209 */
struct $81FF3B5A01E2ACE59F672A6F9CB6F2F8
{
  unsigned __int64 mantissa : 52;
  unsigned __int64 exponent : 11;
  unsigned __int64 sign : 1;
};

/* 8210 */
union _CRT_DOUBLE_COMPONENTS
{
  long double d;
  $81FF3B5A01E2ACE59F672A6F9CB6F2F8 __s1;
};

/* 8211 */
struct _FloatOutStruct
{
  __int16 exp;
  char sign;
  char ManLen;
  char man[22];
};

/* 8212 */
struct FpFormatDescriptor
{
  int max_exp;
  int min_exp;
  int precision;
  int exp_width;
  int format_width;
  int bias;
};

/* 8213 */
union UT64_
{
  long double f64;
  unsigned __int64 u64;
  float f32[2];
  unsigned int u32[2];
};

/* 8214 */
union $1746DB8044E13A972AB894BDCF98BFAD
{
  long double d;
  unsigned __int64 i;
};

/* 8215 */
union $22B65FFAC679BFAF0338F8172339BD18
{
  float f;
  unsigned int i;
};

/* 8216 */
union UT32_
{
  float f32;
  unsigned int u32;
};

/* 8217 */
struct _U32ARRAY
{
  unsigned int W[4];
};

/* 8218 */
struct _U64
{
  unsigned int W[2];
};

/* 8219 */
struct _FP128
{
  unsigned int W[4];
};

/* 8220 */
struct _FPIEEE_EXCEPTION_FLAGS
{
  unsigned __int32 Inexact : 1;
  unsigned __int32 Underflow : 1;
  unsigned __int32 Overflow : 1;
  unsigned __int32 ZeroDivide : 1;
  unsigned __int32 InvalidOperation : 1;
};

/* 8221 */
struct _FP80
{
  unsigned __int16 W[5];
};

/* 8222 */
struct _I64
{
  unsigned int W[2];
};

/* 8223 */
struct _BCD80
{
  unsigned __int16 W[5];
};

/* 8224 */
struct _FPQ64
{
  __int64 W[2];
};

/* 8225 */
union $42B3ED9F57DC1A75EF3BD0175A57AA1A
{
  float Fp32Value;
  long double Fp64Value;
  _FP80 Fp80Value;
  _FP128 Fp128Value;
  __int16 I16Value;
  int I32Value;
  _I64 I64Value;
  unsigned __int16 U16Value;
  unsigned int U32Value;
  _U64 U64Value;
  _BCD80 Bcd80Value;
  char *StringValue;
  int CompareValue;
  _U32ARRAY U32ArrayValue;
  __int64 Q64Value;
  _FPQ64 Fpq64Value;
};

/* 8226 */
struct __declspec(align(16)) _FPIEEE_VALUE
{
  $42B3ED9F57DC1A75EF3BD0175A57AA1A Value;
  unsigned __int32 OperandValid : 1;
  unsigned __int32 Format : 4;
};

/* 8227 */
struct _FPIEEE_RECORD
{
  unsigned __int32 RoundingMode : 2;
  unsigned __int32 Precision : 3;
  unsigned __int32 Operation : 12;
  _FPIEEE_EXCEPTION_FLAGS Cause;
  _FPIEEE_EXCEPTION_FLAGS Enable;
  _FPIEEE_EXCEPTION_FLAGS Status;
  _FPIEEE_VALUE Operand1;
  _FPIEEE_VALUE Operand2;
  _FPIEEE_VALUE Result;
};

/* 8228 */
union _dbl
{
  int lng[2];
  long double dbl;
};

/* 8229 */
struct _s_ThrowInfo
{
  unsigned int attributes;
  int pmfnUnwind;
  int pForwardCompat;
  int pCatchableTypeArray;
};

/* 8230 */
struct EHExceptionRecord::EHParameters
{
  unsigned int magicNumber;
  void *pExceptionObject;
  _s_ThrowInfo *pThrowInfo;
  void *pThrowImageBase;
};

/* 8231 */
struct EHExceptionRecord
{
  unsigned int ExceptionCode;
  unsigned int ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  void *ExceptionAddress;
  unsigned int NumberParameters;
  EHExceptionRecord::EHParameters params;
};

/* 8232 */
struct _s_FuncInfo
{
  unsigned __int32 magicNumber : 29;
  unsigned __int32 bbtFlags : 3;
  int maxState;
  int dispUnwindMap;
  unsigned int nTryBlocks;
  int dispTryBlockMap;
  unsigned int nIPMapEntries;
  int dispIPtoStateMap;
  int dispUwindHelp;
  int dispESTypeList;
  int EHFlags;
};

/* 8233 */
struct _xDISPATCHER_CONTEXT
{
  __int64 ControlPc;
  __int64 ImageBase;
  _IMAGE_RUNTIME_FUNCTION_ENTRY *FunctionEntry;
  unsigned __int64 EstablisherFrame;
  unsigned __int64 TargetIp;
  _CONTEXT *ContextRecord;
  void *LanguageHandler;
  void *HandlerData;
  _UNWIND_HISTORY_TABLE *HistoryTable;
};

/* 8234 */
struct _s_TryBlockMapEntry
{
  int tryLow;
  int tryHigh;
  int catchHigh;
  int nCatches;
  int dispHandlerArray;
};

/* 8235 */
struct _s_HandlerType
{
  unsigned int adjectives;
  int dispType;
  int dispCatchObj;
  int dispOfHandler;
  int dispFrame;
};

/* 8236 */
struct IptoStateMapEntry
{
  int Ip;
  int State;
};

/* 8237 */
struct _HeapManager::Block
{
  _HeapManager::Block *next;
  char memBlock[4096];
};

/* 8238 */
struct _HeapManager
{
  void *(__cdecl *pOpNew)(unsigned __int64);
  void (__cdecl *pOpDelete)(void *);
  _HeapManager::Block *head;
  _HeapManager::Block *tail;
  unsigned __int64 blockLeft;
};

/* 8239 */
struct DNameNode
{
  DNameNodeVtbl *vfptr;
};

/* 8240 */
struct DNameNodeVtbl
{
  int (__cdecl *length)(DNameNode *this);
  char (__cdecl *getLastChar)(DNameNode *this);
  char *(__cdecl *getString)(DNameNode *this, char *, char *);
};

/* 8241 */
struct __declspec(align(8)) DName
{
  DNameNode *node;
  __int32 stat : 8;
  unsigned __int32 isIndir : 1;
  unsigned __int32 isAUDC : 1;
  unsigned __int32 isAUDTThunk : 1;
  unsigned __int32 isArrayType : 1;
  unsigned __int32 NoTE : 1;
  unsigned __int32 pinPtr : 1;
  unsigned __int32 comArray : 1;
  unsigned __int32 vcallThunk : 1;
};

/* 8242 */
struct Replicator
{
  int index;
  DName *dNameBuffer[10];
};

/* 8243 */
struct __cppobj __declspec(align(8)) charNode : DNameNode
{
  char me;
};

/* 8244 */
struct __cppobj __declspec(align(8)) pcharNode : DNameNode
{
  char *me;
  int myLen;
};

/* 8245 */
struct UnDecorator
{
  Replicator ArgList;
  Replicator ZNameList;
};

/* 8246 */
struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_15
{
  const void *pVFTable;
  void *spare;
  char name[15];
};

/* 8247 */
struct __cppobj pDNameNode : DNameNode
{
  DName *me;
};

/* 8248 */
struct __cppobj __declspec(align(8)) pairNode : DNameNode
{
  DNameNode *left;
  DNameNode *right;
  int myLen;
};

/* 8249 */
struct __cppobj DNameStatusNode : DNameNode
{
  DNameStatus me;
  int myLen;
};

/* 8250 */
struct WinRTExceptionInfo
{
  void *description;
  void *restrictedErrorString;
  void *restrictedErrorReference;
  void *capabilitySid;
  int hr;
  void *restrictedInfo;
  _s_ThrowInfo *throwInfo;
};

/* 8251 */
struct _s_ESTypeList
{
  int nCount;
  int dispTypeArray;
};

/* 8252 */
struct PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};

/* 8253 */
struct _s_CatchableType
{
  unsigned int properties;
  int pType;
  PMD thisDisplacement;
  int sizeOrOffset;
  int copyFunction;
};

/* 8254 */
struct _s_UnwindMapEntry
{
  int toState;
  int action;
};

/* 8255 */
struct _s_CatchableTypeArray
{
  int nCatchableTypes;
  int arrayOfCatchableTypes[];
};

/* 8256 */
struct TypeDescriptor
{
  const void *pVFTable;
  void *spare;
  char name[];
};

/* 8257 */
struct XAssetPool<LocalizeEntry,8900>
{
  XAssetPoolEntry<LocalizeEntry> *freeHead;
  XAssetPoolEntry<LocalizeEntry> entries[8900];
};

/* 8258 */
struct ShaderFloat2
{
  float x;
  float y;
};

/* 8259 */
struct ShaderFloat3
{
  float x;
  float y;
  float z;
};

/* 8260 */
struct ShaderFloat4
{
  float x;
  float y;
  float z;
  float w;
};

/* 8261 */
struct ShaderFloat3x3
{
  ShaderFloat3 rows[3];
};

/* 8262 */
struct GfxSceneInternal
{
  bool haveOmnvarIndices;
  unsigned int predatorThermalOmnvarIndex;
};

/* 8263 */
struct XAssetPool<GfxImage,6304>
{
  XAssetPoolEntry<GfxImage> *freeHead;
  XAssetPoolEntry<GfxImage> entries[6304];
};

/* 8264 */
struct XAssetPool<AnimationClass,16>
{
  XAssetPoolEntry<AnimationClass> *freeHead;
  XAssetPoolEntry<AnimationClass> entries[16];
};

/* 8265 */
struct antilagInfo_t
{
  int rewindCount;
  int rewindSum;
  int rewindSumSq;
  int clusterCount;
  int failCount;
  int clampCount;
  int lastGameTime;
  int failHitCount;
  int clampHitCount;
  int clusterHitCount;
  int minRewind;
  int maxRewind;
};

/* 8266 */
struct XAssetPool<LocalizeEntry,8950>
{
  XAssetPoolEntry<LocalizeEntry> *freeHead;
  XAssetPoolEntry<LocalizeEntry> entries[8950];
};

/* 8267 */
struct LiveAntiCheatPendingChallenge
{
  bdAntiCheatChallenge challenge;
  __int64 response;
  int receivedTime;
  MemoryHashInfo *memoryHashInfo;
  char controllers;
  AntiCheatChallengeStatus status;
};

/* 8268 */
struct LiveAntiCheatSender
{
  int challengesReceived;
  int responsesReady;
  bdAntiCheatResponses responses;
  bdReference<bdRemoteTask> remoteTask;
  int sendTime;
  int failureCount;
};

/* 8269 */
typedef _SERVICE_NOTIFY_2W *PSERVICE_NOTIFYW;

/* 8270 */
typedef tagMSGBOXPARAMSW *PMSGBOXPARAMSW;

/* 8271 */
typedef _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;

/* 8272 */
typedef void (__cdecl *WAITORTIMERCALLBACKFUNC)(void *, char);

/* 8273 */
typedef HDC__ *HDC;

/* 8274 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPHYSICALGPUSFROMDISPLAY)(NvDisplayHandle__ *, NvPhysicalGpuHandle__ **, unsigned int *);

/* 8275 */
typedef tagAUXCAPS2A *NPAUXCAPS2A;

/* 8276 */
typedef tagMIXERCAPSA *PMIXERCAPS;

/* 8277 */
typedef tagEMRSELECTCLIPPATH *PEMRSELECTCLIPPATH;

/* 8278 */
typedef tagAUXCAPS2A *LPAUXCAPS2A;

/* 8279 */
typedef void *PCLAIMS_BLOB;

/* 8280 */
typedef _PORT_INFO_1W *LPPORT_INFO_1W;

/* 8281 */
typedef int (__cdecl *Bot_Score_Routine_f)(int, bot_score_parms_s *);

/* 8282 */
typedef _POWER_SESSION_CONNECT *PPOWER_SESSION_CONNECT;

/* 8283 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCOOLERPOLICYTABLE)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_COOLER_POLICY_TABLE *, unsigned int *);

/* 8284 */
typedef _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;

/* 8285 */
typedef _PORT_INFO_3W *LPPORT_INFO_3W;

/* 8286 */
typedef _PRINTER_INFO_1A *LPPRINTER_INFO_1A;

/* 8287 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_FIND_CERT)(void *, _CERT_STORE_PROV_FIND_INFO *, _CERT_CONTEXT *, unsigned int, void **, _CERT_CONTEXT **);

/* 8288 */
typedef _PORT_INFO_2W *LPPORT_INFO_2W;

/* 8289 */
typedef char _Ty;

/* 8290 */
typedef _CTL_ENTRY *PCTL_ENTRY;

/* 8291 */
typedef tagAUXCAPS2W *LPAUXCAPS2W;

/* 8292 */
typedef _DOC_INFO_3A *PDOC_INFO_3A;

/* 8293 */
typedef tagEVENTMSG *PEVENTMSGMSG;

/* 8294 */
typedef unsigned int visdata_t;

/* 8296 */
typedef tagAUXCAPS2W *NPAUXCAPS2W;

/* 8297 */
typedef PPM_THERMAL_POLICY_EVENT *PPPM_THERMAL_POLICY_EVENT;

/* 8298 */
typedef char *LPBYTE;

/* 8299 */
typedef IUnknown *LPUNKNOWN;

/* 8300 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETBUSTYPE)(NvPhysicalGpuHandle__ *, _NV_GPU_BUS_TYPE *);

/* 8301 */
typedef char *pchar_t;

/* 8302 */
typedef PrecacheEntry PrecacheEntry_array[1280];

/* 8303 */
typedef _NON_PAGED_DEBUG_INFO *PNON_PAGED_DEBUG_INFO;

/* 8304 */
typedef tagMIXERCAPS2A *PMIXERCAPS2;

/* 8305 */
typedef _TRANSACTION_LIST_ENTRY *PTRANSACTION_LIST_ENTRY;

/* 8306 */
typedef void __cdecl RPCNOTIFICATION_ROUTINE(_RPC_ASYNC_STATE *, void *, _RPC_ASYNC_EVENT);

/* 8307 */
typedef unsigned __int64 HCRYPTHASH;

/* 8308 */
typedef unsigned __int64 (__cdecl *LPOFNHOOKPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 8309 */
typedef SCARD_READERSTATEA *LPSCARD_READERSTATEA;

/* 8310 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHCLEARDEPTHNV)(unsigned int, float);

/* 8311 */
typedef _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

/* 8312 */
typedef _PRINTER_INFO_1W *LPPRINTER_INFO_1W;

/* 8313 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETCOOLERPOLICYTABLE)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_COOLER_POLICY_TABLE *, unsigned int);

/* 8314 */
typedef tagIMEMENUITEMINFOA *PIMEMENUITEMINFO;

/* 8315 */
typedef void (__cdecl *bdAlignedDeallocateFunc)(void *);

/* 8316 */
typedef sockaddr *PSOCKADDR;

/* 8317 */
typedef _TRANSACTION_NOTIFICATION *PTRANSACTION_NOTIFICATION;

/* 8318 */
typedef int openmode;

/* 8319 */
typedef tagEMRLINETO *PEMRLINETO;

/* 8320 */
typedef _CRYPT_MASK_GEN_ALGORITHM *PCRYPT_MASK_GEN_ALGORITHM;

/* 8321 */
typedef tagEVENTMSG *PEVENTMSG;

/* 8322 */
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;

/* 8323 */
typedef HKEY__ **PHKEY;

/* 8324 */
typedef tagMCI_LOAD_PARMSW *LPMCI_LOAD_PARMSW;

/* 8325 */
typedef _DISK_GEOMETRY *PDISK_GEOMETRY;

/* 8326 */
typedef const char *LPCTCH;

/* 8327 */
typedef tagHIGHCONTRASTA *LPHIGHCONTRASTA;

/* 8328 */
typedef _SET_DISK_ATTRIBUTES *PSET_DISK_ATTRIBUTES;

/* 8329 */
typedef unsigned __int16 PROPVAR_PAD2;

/* 8330 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTORINFO)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_CONNECTOR_INFO *);

/* 8331 */
typedef _RIP_INFO *LPRIP_INFO;

/* 8332 */
typedef tagKERNINGPAIR *LPKERNINGPAIR;

/* 8333 */
typedef _CRYPTNET_URL_CACHE_FLUSH_INFO *PCRYPTNET_URL_CACHE_FLUSH_INFO;

/* 8334 */
typedef unsigned __int64 raw_uint64;

/* 8335 */
typedef _OSVERSIONINFOW *POSVERSIONINFOW;

/* 8336 */
typedef int (__cdecl *TIMEFMT_ENUMPROCEX)(wchar_t *, __int64);

/* 8337 */
typedef tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMS;

/* 8338 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_DELETEPATHNV)(unsigned int);

/* 8339 */
typedef tagVARDESC *LPVARDESC;

/* 8340 */
typedef tagMCI_WAVE_DELETE_PARMS *PMCI_WAVE_DELETE_PARMS;

/* 8341 */
typedef int *LPFXPT16DOT16;

/* 8342 */
typedef _PRINTER_ENUM_VALUESW *LPPRINTER_ENUM_VALUESW;

/* 8343 */
typedef _DOC_INFO_2A *PDOC_INFO_2A;

/* 8344 */
typedef _PROVIDOR_INFO_2W *LPPROVIDOR_INFO_2W;

/* 8345 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_GETCUSTOMFORMATGUID)(NvGUID *);

/* 8346 */
typedef _PORT_INFO_3A *PPORT_INFO_3;

/* 8347 */
typedef _PROVIDOR_INFO_1W *LPPROVIDOR_INFO_1W;

/* 8348 */
typedef tagHIGHCONTRASTW *LPHIGHCONTRASTW;

/* 8349 */
typedef tagRAWHID *PRAWHID;

/* 8350 */
typedef _SD_ENUM_SDS_ENTRY *PSD_ENUM_SDS_ENTRY;

/* 8351 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDVCLEVELEX)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_DVC_INFO_EX *);

/* 8352 */
typedef my_main_controller *my_main_ptr;

/* 8353 */
typedef tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMSA;

/* 8354 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMLOGICALGPUS)(NvLogicalGpuHandle__ **, unsigned int *);

/* 8355 */
typedef tagEMRPOLYLINE *PEMRPOLYBEZIER;

/* 8356 */
typedef _BOOT_AREA_INFO *PBOOT_AREA_INFO;

/* 8357 */
typedef void (__cdecl *PIMAGE_TLS_CALLBACK)(void *, unsigned int, void *);

/* 8358 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETPIXELSHADERCONSTANTF)(void *, unsigned int, float *, float *, float *, unsigned int);

/* 8359 */
typedef HWINSTA__ *HWINSTA;

/* 8360 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETPIXELSHADERCONSTANTB)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 8361 */
typedef _CRYPT_HASH_MESSAGE_PARA *PCRYPT_HASH_MESSAGE_PARA;

/* 8362 */
typedef _OSVERSIONINFOA *POSVERSIONINFOA;

/* 8363 */
typedef unsigned __int64 *PDWORDLONG;

/* 8364 */
typedef char (__cdecl *PFNCREATESYMBOLICLINK)(const wchar_t *, const wchar_t *, unsigned int);

/* 8365 */
typedef _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;

/* 8366 */
typedef tagMINMAXINFO *LPMINMAXINFO;

/* 8367 */
typedef _currencyfmtA *LPCURRENCYFMTA;

/* 8368 */
typedef _ADDJOB_INFO_1A *LPADDJOB_INFO_1;

/* 8369 */
typedef _RPC_PROTSEQ_ENDPOINT *PRPC_PROTSEQ_ENDPOINT;

/* 8370 */
typedef ITypeLib2 *LPTYPELIB2;

/* 8371 */
typedef tagMIXERCAPSA *PMIXERCAPSA;

/* 8372 */
typedef tagMIXERLINEA *LPMIXERLINEA;

/* 8373 */
typedef tagAUXCAPS2A *NPAUXCAPS2;

/* 8374 */
typedef tagEMREXTFLOODFILL *PEMREXTFLOODFILL;

/* 8375 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_FORCETOSCREENDEPTH)(void *, char);

/* 8376 */
typedef tagAUXCAPS2A *LPAUXCAPS2;

/* 8377 */
typedef _FILEMUIINFO *PFILEMUIINFO;

/* 8378 */
typedef _BIDI_RESPONSE_CONTAINER *PBIDI_RESPONSE_CONTAINER;

/* 8379 */
typedef _TRIVERTEX *PTRIVERTEX;

/* 8380 */
typedef _BIN_RANGE *PBIN_RANGE;

/* 8381 */
typedef tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW;

/* 8382 */
typedef _FSCTL_QUERY_FAT_BPB_BUFFER *PFSCTL_QUERY_FAT_BPB_BUFFER;

/* 8383 */
typedef void *LOCALHANDLE;

/* 8384 */
typedef _PRINTER_INFO_1A *LPPRINTER_INFO_1;

/* 8385 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETTVENCODERCONTROLS)(NvDisplayHandle__ *, unsigned int, NV_TV_ENCODER_CONTROLS *);

/* 8386 */
typedef __int64 (__cdecl *FARPROC)();

/* 8387 */
typedef _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;

/* 8388 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMUNDERSCANCONFIG)(NvDisplayHandle__ *, unsigned int, unsigned int, NV_UNDERSCAN_CONFIG *);

/* 8389 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTOTALTPCCOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8390 */
typedef char value_type;

/* 8391 */
typedef unsigned int _Unsigned;

/* 8392 */
typedef tagMIXERCAPSW *PMIXERCAPSW;

/* 8393 */
typedef _DOC_INFO_1A *PDOC_INFO_1A;

/* 8394 */
typedef _PEB_LDR_DATA *PPEB_LDR_DATA;

/* 8395 */
typedef _BINARY_CONTAINER *PBINARY_CONTAINER;

/* 8396 */
typedef void (__cdecl *luaplus_ErrorCallback)(lua_State *, const char *);

/* 8397 */
typedef _SYSTEM_INFO *LPSYSTEM_INFO;

/* 8398 */
typedef _OPERATION_END_PARAMETERS *POPERATION_END_PARAMETERS;

/* 8399 */
typedef DLGTEMPLATE *LPDLGTEMPLATEA;

/* 8400 */
typedef _EXCEPTION_RECORD *LPEXCEPTION_RECORD;

/* 8401 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETTVENCODERCONTROLS)(NvDisplayHandle__ *, unsigned int, NV_TV_ENCODER_CONTROLS *);

/* 8402 */
typedef _BIDI_RESPONSE_CONTAINER *LPBIDI_RESPONSE_CONTAINER;

/* 8403 */
typedef GfxPackedMotionVertex *GfxPackedMotionVertexUnion;

/* 8404 */
typedef tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA;

/* 8405 */
typedef tagOLERENDER *LPOLERENDER;

/* 8406 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETDISPLAYVIEWPORTSBYRESOLUTION)(unsigned int, unsigned int, unsigned int, _NV_RECT *, char *);

/* 8407 */
typedef addrinfoexA *PADDRINFOEXA;

/* 8408 */
typedef unsigned __int64 (__cdecl *hks_outofmemory)(void *, unsigned __int64);

/* 8409 */
typedef tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMSA;

/* 8410 */
typedef char raw_byte16;

/* 8411 */
typedef void *bdMutexHandle;

/* 8412 */
typedef POWER_ACTION *PPOWER_ACTION;

/* 8413 */
typedef tagGUITHREADINFO *LPGUITHREADINFO;

/* 8414 */
typedef tagHIGHCONTRASTA *LPHIGHCONTRAST;

/* 8415 */
typedef _PORT_INFO_3W *PPORT_INFO_3W;

/* 8416 */
typedef char *voidpf;

/* 8417 */
typedef _PRINTER_INFO_8A *PPRINTER_INFO_8;

/* 8418 */
typedef _PRINTER_INFO_9A *PPRINTER_INFO_9;

/* 8419 */
typedef void (__cdecl *ltp_unquant_func)(float *, int, int, float, const void *, int, int *, float *, SpeexBits *, char *, int, int, float, int);

/* 8420 */
typedef _FILE_LEVEL_TRIM_RANGE *PFILE_LEVEL_TRIM_RANGE;

/* 8421 */
typedef _PRINTER_INFO_6 *PPRINTER_INFO_6;

/* 8422 */
typedef my_destination_mgr *my_dest_ptr;

/* 8423 */
typedef void *HCERTSTOREPROV;

/* 8424 */
typedef _PRINTER_INFO_7A *PPRINTER_INFO_7;

/* 8425 */
typedef void (__cdecl *I_RpcProxyUpdatePerfCounterBackendServerFn)(unsigned __int16 *, int);

/* 8426 */
typedef _PRINTER_INFO_4A *PPRINTER_INFO_4;

/* 8427 */
typedef _PRINTER_INFO_5A *PPRINTER_INFO_5;

/* 8428 */
typedef _GS_HANDLER_DATA *PGS_HANDLER_DATA;

/* 8429 */
typedef _RTL_RUN_ONCE *PINIT_ONCE;

/* 8430 */
typedef _PRINTER_INFO_2A *PPRINTER_INFO_2;

/* 8431 */
typedef tagGESTURENOTIFYSTRUCT *PGESTURENOTIFYSTRUCT;

/* 8432 */
typedef _PRINTER_INFO_3 *PPRINTER_INFO_3;

/* 8433 */
typedef tagGCP_RESULTSW *LPGCP_RESULTSW;

/* 8434 */
typedef _UMS_CREATE_THREAD_ATTRIBUTES *PUMS_CREATE_THREAD_ATTRIBUTES;

/* 8435 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETAPPLICATIONINFO)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned __int16 *, _NVDRS_APPLICATION_V3 *);

/* 8436 */
typedef tagHELPINFO *LPHELPINFO;

/* 8437 */
typedef _PRINTER_INFO_1A *PPRINTER_INFO_1;

/* 8438 */
typedef char *PTCH;

/* 8439 */
typedef tagCANDIDATELIST *PCANDIDATELIST;

/* 8440 */
typedef _NCB *PNCB;

/* 8441 */
typedef _STARTUPINFOA *LPSTARTUPINFOA;

/* 8442 */
typedef _PORT_INFO_3A *PPORT_INFO_3A;

/* 8443 */
typedef unsigned int NOTIFICATION_MASK;

/* 8444 */
typedef tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMS;

/* 8445 */
typedef int __cdecl dColliderFn(dxGeom *, dxGeom *, int, dContactGeom *, int);

/* 8446 */
typedef int (__cdecl *encoder_ctl_func)(void *, int, void *);

/* 8447 */
typedef int (__cdecl *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH)(void *, _CRYPTOAPI_BLOB **, unsigned int);

/* 8448 */
typedef unsigned __int64 *PUINT64;

/* 8449 */
typedef tagBITMAP *NPBITMAP;

/* 8450 */
typedef void *hunkFileHandle_t;

/* 8451 */
typedef tagBITMAP *LPBITMAP;

/* 8452 */
typedef char (__cdecl *PREGISTERCLASSNAMEW)(const wchar_t *);

/* 8453 */
typedef tagMCI_SYSINFO_PARMSW *LPMCI_SYSINFO_PARMSW;

/* 8454 */
typedef _OSVERSIONINFOA *POSVERSIONINFO;

/* 8455 */
typedef tagDDEML_MSG_HOOK_DATA *PDDEML_MSG_HOOK_DATA;

/* 8456 */
typedef __int64 (__cdecl *DRIVERPROC)(unsigned __int64, HDRVR__ *, unsigned int, __int64, __int64);

/* 8457 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETASSOCIATEDNVIDIADISPLAYHANDLE)(const char *, NvDisplayHandle__ **);

/* 8458 */
typedef void *HGDIOBJ;

/* 8459 */
typedef tagINPUT *PINPUT;

/* 8460 */
typedef int (__cdecl *decode_func)(void *, SpeexBits *, void *);

/* 8461 */
typedef GfxLightDef *GfxLightDefPtr;

/* 8462 */
typedef char byte32;

/* 8463 */
typedef _userHMETAFILE *wireHMETAFILE;

/* 8464 */
typedef const char *(__cdecl *lbFeederItemTextFn)(LbColumnDef *, LeaderBoardRow<10> *, Material **);

/* 8465 */
typedef NetConstStrings *NetConstStringsPtr;

/* 8466 */
typedef void *BCRYPT_KEY_HANDLE;

/* 8467 */
typedef _CMSG_CTRL_DECRYPT_PARA *PCMSG_CTRL_DECRYPT_PARA;

/* 8468 */
typedef tagRAWKEYBOARD *LPRAWKEYBOARD;

/* 8469 */
typedef PPM_IDLE_STATE_BUCKET_EX *PPPM_IDLE_STATE_BUCKET_EX;

/* 8470 */
typedef _CMSG_CONTENT_ENCRYPT_INFO *PCMSG_CONTENT_ENCRYPT_INFO;

/* 8471 */
typedef unsigned int HAuthTicket;

/* 8472 */
typedef unsigned __int64 NCRYPT_KEY_HANDLE;

/* 8473 */
typedef _GET_CHANGER_PARAMETERS *PGET_CHANGER_PARAMETERS;

/* 8474 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETCAPABILITIES)(NvVioHandle__ *, _NVVIOCAPS *);

/* 8475 */
typedef tagEMRSTRETCHDIBITS *PEMRSTRETCHDIBITS;

/* 8476 */
typedef _WSAServiceClassInfoA *LPWSASERVICECLASSINFOA;

/* 8477 */
typedef _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

/* 8478 */
typedef tagAXISINFOA *PAXISINFOA;

/* 8479 */
typedef tagMIXERCAPS2A *LPMIXERCAPS2;

/* 8480 */
typedef _OSVERSIONINFOEXA *POSVERSIONINFOEX;

/* 8481 */
typedef _CERT_CHAIN_ENGINE_CONFIG *PCERT_CHAIN_ENGINE_CONFIG;

/* 8482 */
typedef char max_cmdff_buf[98304];

/* 8483 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(void *, _CTL_CONTEXT *, void *, unsigned int);

/* 8484 */
typedef _WSACOMPLETIONTYPE *PWSACOMPLETIONTYPE;

/* 8485 */
typedef void (__cdecl *fn_touch)(gentity_s *, gentity_s *, int);

/* 8486 */
typedef tagSCROLLBARINFO *PSCROLLBARINFO;

/* 8487 */
typedef IInternetProtocol *LPIINTERNETPROTOCOL;

/* 8488 */
typedef _FILE_LAYOUT_ENTRY *PFILE_LAYOUT_ENTRY;

/* 8489 */
typedef _HTTPSPolicyCallbackData *PHTTPSPolicyCallbackData;

/* 8490 */
typedef fd_set *PFD_SET;

/* 8491 */
typedef _CERT_X942_DH_VALIDATION_PARAMS *PCERT_X942_DH_VALIDATION_PARAMS;

/* 8492 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERTOPOLOGYGETINFO)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_TOPOLOGY_INFO_V1 *);

/* 8493 */
typedef unsigned int uIntf;

/* 8494 */
typedef char byte128;

/* 8495 */
typedef ID3D11Buffer *GfxBuffer;

/* 8496 */
typedef tagENUMTEXTMETRICA *LPENUMTEXTMETRIC;

/* 8497 */
typedef tagMDICREATESTRUCTA *LPMDICREATESTRUCTA;

/* 8498 */
typedef _CERT_ALT_NAME_INFO *PCERT_ALT_NAME_INFO;

/* 8499 */
typedef _MONITOR_INFO_2W *LPMONITOR_INFO_2W;

/* 8500 */
typedef __int64 hksPtrDiff;

/* 8501 */
typedef __int16 (**JBLOCKARRAY)[64];

/* 8502 */
typedef unsigned int __cdecl PM_QUERY_PROC(unsigned int *, void **, unsigned int *, unsigned int *);

/* 8503 */
typedef void (__cdecl *I_RpcFreeCalloutStateFn)(_RDR_CALLOUT_STATE *);

/* 8504 */
typedef unsigned int db_hash_t;

/* 8505 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ENUMVIDEOFEATURES)(unsigned int *, _NVAPI_DX_VIDEO_FEATURE_DETAILS *);

/* 8506 */
typedef _STORAGE_PRIORITY_HINT_SUPPORT *PSTORAGE_PRIORITY_HINT_SUPPORT;

/* 8507 */
typedef HMIXEROBJ__ **LPHMIXEROBJ;

/* 8508 */
typedef _REASSIGN_BLOCKS *PREASSIGN_BLOCKS;

/* 8509 */
typedef unsigned int *PULONG32;

/* 8510 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETGDIPRIMARYDISPLAYID)(unsigned int *);

/* 8511 */
typedef void (__cdecl *LPSERVICE_MAIN_FUNCTIONW)(unsigned int, wchar_t **);

/* 8512 */
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;

/* 8513 */
typedef _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;

/* 8514 */
typedef tagPARAMDESC *LPPARAMDESC;

/* 8515 */
typedef IErrorLog *LPERRORLOG;

/* 8516 */
typedef _STREAM_LAYOUT_ENTRY *PSTREAM_LAYOUT_ENTRY;

/* 8517 */
typedef HCONV__ *HCONV;

/* 8518 */
typedef tagLOGCOLORSPACEW *LPLOGCOLORSPACEW;

/* 8519 */
typedef tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;

/* 8520 */
typedef tagEMRTEXT *PEMRTEXT;

/* 8521 */
typedef char NvU8;

/* 8522 */
typedef int *PBOOL;

/* 8523 */
typedef _MONITOR_INFO_2A *LPMONITOR_INFO_2A;

/* 8524 */
typedef ARRAY_INFO *PARRAY_INFO;

/* 8525 */
typedef _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFO;

/* 8526 */
typedef HICON__ *HCURSOR;

/* 8527 */
typedef tagPOINT *PPOINT;

/* 8528 */
typedef _IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

/* 8529 */
typedef void (__cdecl *fn_die)(gentity_s *, gentity_s *, gentity_s *, int, int, Weapon, bool, const float *, hitLocation_t, int);

/* 8530 */
typedef _RTL_USER_PROCESS_PARAMETERS *PRTL_USER_PROCESS_PARAMETERS;

/* 8531 */
typedef protoent *LPPROTOENT;

/* 8532 */
typedef void (__cdecl *lsp_quant_func)(float *, float *, int, SpeexBits *);

/* 8533 */
typedef float FLOAT;

/* 8534 */
typedef bool _Bool;

/* 8535 */
typedef _PERF_BIN *PPERF_BIN;

/* 8536 */
typedef _TOKEN_ORIGIN *PTOKEN_ORIGIN;

/* 8537 */
typedef _OUTLINETEXTMETRICW *NPOUTLINETEXTMETRICW;

/* 8538 */
typedef tagVARIANT *LPVARIANT;

/* 8539 */
typedef _OUTLINETEXTMETRICW *LPOUTLINETEXTMETRICW;

/* 8540 */
typedef char uint8;

/* 8541 */
typedef char UINT8;

/* 8542 */
typedef RETRIEVAL_POINTERS_BUFFER *PRETRIEVAL_POINTERS_BUFFER;

/* 8543 */
typedef volatile int volatile_int32;

/* 8544 */
typedef unsigned int SAVEPOINT_ID;

/* 8545 */
typedef char *PINT8;

/* 8546 */
typedef tagMIXERCAPS2W *LPMIXERCAPS2W;

/* 8547 */
typedef _OSVERSIONINFOEXW *POSVERSIONINFOEXW;

/* 8548 */
typedef void (__cdecl *PFN_RPCNOTIFICATION_ROUTINE)(_RPC_ASYNC_STATE *, void *, _RPC_ASYNC_EVENT);

/* 8549 */
typedef unsigned int (__cdecl *USER_MARSHAL_SIZING_ROUTINE)(unsigned int *, unsigned int, void *);

/* 8550 */
typedef _CRL_ENTRY *PCRL_ENTRY;

/* 8551 */
typedef unsigned int UINT4;

/* 8552 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETQUADROSTATUS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8553 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

/* 8554 */
typedef _RTL_RUN_ONCE *LPINIT_ONCE;

/* 8555 */
typedef IClassFactory *LPCLASSFACTORY;

/* 8556 */
typedef _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW;

/* 8557 */
typedef tagEMRSETARCDIRECTION *PEMRSETARCDIRECTION;

/* 8558 */
typedef _OCSP_BASIC_RESPONSE_INFO *POCSP_BASIC_RESPONSE_INFO;

/* 8559 */
typedef tagMIXERCAPS2A *LPMIXERCAPS2A;

/* 8560 */
typedef _OSVERSIONINFOEXA *POSVERSIONINFOEXA;

/* 8561 */
typedef tagGESTUREINFO *PCGESTUREINFO;

/* 8562 */
typedef tagEMRGRADIENTFILL *PEMRGRADIENTFILL;

/* 8563 */
typedef _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;

/* 8564 */
typedef float *PFLOAT;

/* 8565 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETACTIVEOUTPUTS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8566 */
typedef unsigned int uint;

/* 8567 */
typedef unsigned int uInt;

/* 8568 */
typedef unsigned int UINT;

/* 8569 */
typedef void (__cdecl *LPDRVCALLBACK)(HDRVR__ *, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 8570 */
typedef PPM_WMI_PERF_STATES *PPPM_WMI_PERF_STATES;

/* 8571 */
typedef unsigned int *PULONG;

/* 8572 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_CREATEHANDLEFROMIUNKNOWN)(IUnknown *, void **);

/* 8573 */
typedef tagLOCALESIGNATURE *PLOCALESIGNATURE;

/* 8574 */
typedef _BCryptBufferDesc *PBCryptBufferDesc;

/* 8575 */
typedef unsigned __int16 BAD_TRACK_NUMBER;

/* 8576 */
typedef _ACCESS_DENIED_CALLBACK_ACE *PACCESS_DENIED_CALLBACK_ACE;

/* 8577 */
typedef int *PINT;

/* 8578 */
typedef _RATE_QUOTA_LIMIT *PRATE_QUOTA_LIMIT;

/* 8579 */
typedef tagMINIMIZEDMETRICS *PMINIMIZEDMETRICS;

/* 8580 */
typedef _CMSG_SIGNER_ENCODE_INFO *PCMSG_SIGNER_ENCODE_INFO;

/* 8581 */
typedef char __C_ASSERT__[1];

/* 8582 */
typedef tagEMRPOLYLINE *PEMRPOLYLINE;

/* 8583 */
typedef _FILE_STREAM_INFO *PFILE_STREAM_INFO;

/* 8584 */
typedef tagENUMTEXTMETRICA *LPENUMTEXTMETRICA;

/* 8585 */
typedef tagMCI_WAVE_SET_PARMS *LPMCI_WAVE_SET_PARMS;

/* 8586 */
typedef tagLC_STRINGS *LPLC_STRINGS;

/* 8587 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETCONVERGENCE)(void *, float *);

/* 8588 */
typedef char BD_PLATFORM_CHAR;

/* 8589 */
typedef hostent *LPHOSTENT;

/* 8590 */
typedef _EFS_HASH_BLOB *PEFS_HASH_BLOB;

/* 8591 */
typedef _GLYPHMETRICS *LPGLYPHMETRICS;

/* 8592 */
typedef _FILE_FS_PERSISTENT_VOLUME_INFORMATION *PFILE_FS_PERSISTENT_VOLUME_INFORMATION;

/* 8593 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYCONFIG)(unsigned int *, _NV_DISPLAYCONFIG_PATH_INFO *);

/* 8594 */
typedef _QOS_SD_MODE *LPQOS_SD_MODE;

/* 8595 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETHCLONETOPOLOGY)(NV_HCLONE_TOPOLOGY_V1 *);

/* 8596 */
typedef tagNC_ADDRESS *PNC_ADDRESS;

/* 8597 */
typedef READ_USN_JOURNAL_DATA_V0 *PREAD_USN_JOURNAL_DATA_V0;

/* 8598 */
typedef _CMSG_KEY_AGREE_RECIPIENT_INFO *PCMSG_KEY_AGREE_RECIPIENT_INFO;

/* 8599 */
typedef tagPOINTS *PPOINTS;

/* 8600 */
typedef _TP_TIMER *PTP_TIMER;

/* 8601 */
typedef sockaddr_in6 *LPSOCKADDR_IN6;

/* 8602 */
typedef READ_USN_JOURNAL_DATA_V1 *PREAD_USN_JOURNAL_DATA_V1;

/* 8603 */
typedef HRGN__ *HRGN;

/* 8604 */
typedef void (__cdecl *lua_Caller)(lua_State *, void *, int, hksInstruction *);

/* 8605 */
typedef unsigned int EXECUTION_STATE;

/* 8606 */
typedef unsigned int RPC_LENGTH;

/* 8607 */
typedef void *(__cdecl *curl_malloc_callback)(unsigned __int64);

/* 8608 */
typedef void (__cdecl *Bot_Score_Routine_Helper_f)(bot_score_item_s *, int, bot_score_parms_s *);

/* 8609 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETSETTINGIDFROMNAME)(unsigned __int16 *, unsigned int *);

/* 8610 */
typedef _GET_LENGTH_INFORMATION *PGET_LENGTH_INFORMATION;

/* 8611 */
typedef char max_msg_buf[131072];

/* 8612 */
typedef _MONITOR_INFO_2A *LPMONITOR_INFO_2;

/* 8613 */
typedef _POINTL *PPOINTL;

/* 8614 */
typedef tagWNDCLASSEXW *PWNDCLASSEXW;

/* 8615 */
typedef _FILE_FULL_DIR_INFO *PFILE_FULL_DIR_INFO;

/* 8616 */
typedef _BCRYPT_INTERFACE_VERSION *PBCRYPT_INTERFACE_VERSION;

/* 8617 */
typedef tagENUMTEXTMETRICW *LPENUMTEXTMETRICW;

/* 8618 */
typedef void (*HksLogFunc)(lua_State *, const char *, ...);

/* 8619 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_CONTROL)(void *, unsigned int, unsigned int, const void *);

/* 8620 */
typedef int (__cdecl *PFNGETTIMEFORMATEX)(const wchar_t *, unsigned int, _SYSTEMTIME *, const wchar_t *, unsigned __int16 *, int);

/* 8621 */
typedef _SERVICE_DESCRIPTIONW *LPSERVICE_DESCRIPTIONW;

/* 8622 */
typedef _PRINTPROCESSOR_CAPS_1 *PPRINTPROCESSOR_CAPS_1;

/* 8623 */
typedef unsigned __int64 HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;

/* 8624 */
typedef _numberfmtW *LPNUMBERFMTW;

/* 8625 */
typedef tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN;

/* 8626 */
typedef float dQuaternion[4];

/* 8627 */
typedef _SOCKET_ADDRESS *PSOCKET_ADDRESS;

/* 8628 */
typedef _PROCESSOR_GROUP_INFO *PPROCESSOR_GROUP_INFO;

/* 8629 */
typedef unsigned int FOURCC;

/* 8630 */
typedef midihdr_tag *LPMIDIHDR;

/* 8631 */
typedef _FLOAT128 *PFLOAT128;

/* 8632 */
typedef _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;

/* 8633 */
typedef _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;

/* 8634 */
typedef char max_raw_buf[98304];

/* 8635 */
typedef _IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA;

/* 8636 */
typedef _CHANGER_DEVICE_PROBLEM_TYPE *PCHANGER_DEVICE_PROBLEM_TYPE;

/* 8637 */
typedef midihdr_tag *NPMIDIHDR;

/* 8638 */
typedef int *LPFXPT2DOT30;

/* 8639 */
typedef HMONITOR__ *HMONITOR;

/* 8640 */
typedef tagHELPWININFOA *PHELPWININFOA;

/* 8641 */
typedef HBRUSH__ *HBRUSH;

/* 8642 */
typedef _RGNDATAHEADER *PRGNDATAHEADER;

/* 8643 */
typedef tagIMECHARPOSITION *PIMECHARPOSITION;

/* 8644 */
typedef _CLAIM_SECURITY_ATTRIBUTES_INFORMATION *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;

/* 8645 */
typedef char gametype_buf[2048];

/* 8646 */
typedef PPM_WMI_LEGACY_PERFSTATE *PPPM_WMI_LEGACY_PERFSTATE;

/* 8647 */
typedef _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUS;

/* 8648 */
typedef _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

/* 8649 */
typedef IPPROTO *PIPROTO;

/* 8650 */
typedef _CROSS_CERT_DIST_POINTS_INFO *PCROSS_CERT_DIST_POINTS_INFO;

/* 8651 */
typedef _FILE_NAME_INFO *PFILE_NAME_INFO;

/* 8652 */
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;

/* 8653 */
typedef _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;

/* 8654 */
typedef tagMETAHEADER *PMETAHEADER;

/* 8655 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETCONFIG)(NvVioHandle__ *, _NVVIOCONFIG_V3 *);

/* 8656 */
typedef _DEVICE_LB_PROVISIONING_DESCRIPTOR *PDEVICE_LB_PROVISIONING_DESCRIPTOR;

/* 8657 */
typedef _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA;

/* 8658 */
typedef _SD_GLOBAL_CHANGE_OUTPUT *PSD_GLOBAL_CHANGE_OUTPUT;

/* 8659 */
typedef int LCSCSTYPE;

/* 8660 */
typedef _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;

/* 8661 */
typedef int (__cdecl *PFN_IMPORT_PRIV_KEY_FUNC)(unsigned __int64, _CRYPT_PRIVATE_KEY_INFO *, unsigned int, void *);

/* 8662 */
typedef _FILE_LEVEL_TRIM *PFILE_LEVEL_TRIM;

/* 8663 */
typedef tagHELPWININFOW *PHELPWININFOW;

/* 8664 */
typedef _PROVIDOR_INFO_2A *PPROVIDOR_INFO_2;

/* 8665 */
typedef int LCSGAMUTMATCH;

/* 8666 */
typedef tagCLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT;

/* 8667 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SETCONFIG)(NvVioHandle__ *, _NVVIOCONFIG_V3 *);

/* 8668 */
typedef __int64 (__cdecl *HOOKPROC)(int, unsigned __int64, __int64);

/* 8669 */
typedef _DISPLAY_DEVICEW *PDISPLAY_DEVICEW;

/* 8670 */
typedef tagEMRFILLRGN *PEMRFILLRGN;

/* 8671 */
typedef HLSURF__ *HLSURF;

/* 8672 */
typedef tagNEWTEXTMETRICA *PNEWTEXTMETRICA;

/* 8673 */
typedef _KEY_EVENT_RECORD *PKEY_EVENT_RECORD;

/* 8674 */
typedef RPC_DISPATCH_TABLE *PRPC_DISPATCH_TABLE;

/* 8675 */
typedef _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS *PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;

/* 8676 */
typedef unsigned int _U32;

/* 8677 */
typedef _POWER_IDLE_RESILIENCY *PPOWER_IDLE_RESILIENCY;

/* 8678 */
typedef _COMMCONFIG *LPCOMMCONFIG;

/* 8679 */
typedef tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMSA;

/* 8680 */
typedef unsigned __int64 bdUInt64;

/* 8681 */
typedef unsigned __int16 PROPVAR_PAD3;

/* 8682 */
typedef _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1;

/* 8683 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETECCERRORINFO)(NvPhysicalGpuHandle__ *, NV_GPU_ECC_ERROR_INFO *);

/* 8684 */
typedef _CERT_NAME_VALUE *PCERT_NAME_VALUE;

/* 8685 */
typedef _STORAGE_MEDIA_TYPE *PSTORAGE_MEDIA_TYPE;

/* 8686 */
typedef int __cdecl RPC_IF_CALLBACK_FN(void *, void *);

/* 8687 */
typedef _OCSP_BASIC_SIGNED_RESPONSE_INFO *POCSP_BASIC_SIGNED_RESPONSE_INFO;

/* 8688 */
typedef _DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER *PDEDUP_QUERY_FILE_HASHES_INPUT_BUFFER;

/* 8689 */
typedef _SHNAMEMAPPINGW *LPSHNAMEMAPPINGW;

/* 8690 */
typedef _FILE_STANDARD_INFO *PFILE_STANDARD_INFO;

/* 8691 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_RESTORECOOLERSETTINGS)(NvPhysicalGpuHandle__ *, unsigned int *, unsigned int);

/* 8692 */
typedef _SHRINK_VOLUME_INFORMATION *PSHRINK_VOLUME_INFORMATION;

/* 8693 */
typedef _RGNDATA *LPRGNDATA;

/* 8694 */
typedef _RGNDATA *NPRGNDATA;

/* 8695 */
typedef __int16 hksShort16;

/* 8696 */
typedef _PORT_INFO_2A *PPORT_INFO_2;

/* 8697 */
typedef unsigned __int64 *LPSCARDCONTEXT;

/* 8698 */
typedef AddonMapEnts *AddonMapEntsPtr;

/* 8699 */
typedef tagNEWTEXTMETRICW *PNEWTEXTMETRICW;

/* 8700 */
typedef backing_store_struct *backing_store_ptr;

/* 8701 */
typedef _JOBOBJECT_JOBSET_INFORMATION *PJOBOBJECT_JOBSET_INFORMATION;

/* 8702 */
typedef ICreateErrorInfo *LPCREATEERRORINFO;

/* 8703 */
typedef IParseDisplayName *LPPARSEDISPLAYNAME;

/* 8704 */
typedef _RTL_UMS_SCHEDULER_REASON *PRTL_UMS_SCHEDULER_REASON;

/* 8705 */
typedef tagMONCONVSTRUCT *PMONCONVSTRUCT;

/* 8706 */
typedef tagMCI_SAVE_PARMSW *PMCI_SAVE_PARMSW;

/* 8707 */
typedef unsigned int COLORREF;

/* 8708 */
typedef void *(__cdecl *GENERIC_BINDING_ROUTINE)(void *);

/* 8709 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_WRITE_CTL)(void *, _CTL_CONTEXT *, unsigned int);

/* 8710 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_COPYTOSHAREDSURFACE)(unsigned int *, void *, unsigned int *);

/* 8711 */
typedef wchar_t *PWCHAR;

/* 8712 */
typedef unsigned int uint_fast16_t;

/* 8713 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_UNLOAD)();

/* 8714 */
typedef _CERT_CONTEXT *PCERT_CONTEXT;

/* 8715 */
typedef ICodeInstall *LPCODEINSTALL;

/* 8716 */
typedef tagMULTIKEYHELPW *PMULTIKEYHELPW;

/* 8717 */
typedef clipMap_t *clipMap_ptr;

/* 8718 */
typedef tagHELPWININFOA *PHELPWININFO;

/* 8719 */
typedef _SOCKET_ADDRESS_LIST *LPSOCKET_ADDRESS_LIST;

/* 8720 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETALLDISPLAYIDS)(NvPhysicalGpuHandle__ *, _NV_GPU_DISPLAYIDS *, unsigned int *);

/* 8721 */
typedef bool (__cdecl *RenderDrawGroupCallback_type)(GfxDrawListArgs *, GfxDrawListIter *);

/* 8722 */
typedef OPENCARDNAMEW *POPENCARDNAMEW;

/* 8723 */
typedef tagEMRPIXELFORMAT *PEMRPIXELFORMAT;

/* 8724 */
typedef _currencyfmtA *LPCURRENCYFMT;

/* 8725 */
typedef _CSV_MGMT_LOCK *PCSV_MGMT_LOCK;

/* 8726 */
typedef _CRYPTOAPI_BLOB *PCRYPT_HASH_BLOB;

/* 8727 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETCURRENTMOSAICTOPOLOGY)(NV_MOSAIC_TOPOLOGY *, unsigned int *);

/* 8728 */
typedef unsigned __int16 bdPort;

/* 8729 */
typedef _REQUEST_OPLOCK_OUTPUT_BUFFER *PREQUEST_OPLOCK_OUTPUT_BUFFER;

/* 8730 */
typedef void (__cdecl *NVAPI_PRIMARY_FLIP_CHAIN_CALLBACK)(unsigned int);

/* 8731 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *PIMAGE_RUNTIME_FUNCTION_ENTRY;

/* 8732 */
typedef void __cdecl cmd_func(LocalClientNum_t);

/* 8733 */
typedef _PROVIDOR_INFO_2W *PPROVIDOR_INFO_2W;

/* 8734 */
typedef _WGLSWAP *LPWGLSWAP;

/* 8735 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_READ_CRL)(void *, _CRL_CONTEXT *, unsigned int, _CRL_CONTEXT **);

/* 8736 */
typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned __int64);

/* 8737 */
typedef _EVENTSFORLOGFILE *PEVENTSFORLOGFILE;

/* 8738 */
typedef int XPartBits[6];

/* 8739 */
typedef unsigned __int64 _ULonglong;

/* 8740 */
typedef _ASSEMBLY_FILE_DETAILED_INFORMATION *PASSEMBLY_FILE_DETAILED_INFORMATION;

/* 8741 */
typedef unsigned __int16 EnumIndexType;

/* 8742 */
typedef char *(__cdecl *USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned int *, char *, void *);

/* 8743 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETFBWIDTHANDLOCATION)(NvPhysicalGpuHandle__ *, unsigned int *, _NV_GPU_FB_LOCATION *);

/* 8744 */
typedef int (__cdecl *PFNFLSFREE)(unsigned int);

/* 8745 */
typedef _PROVIDOR_INFO_2A *PPROVIDOR_INFO_2A;

/* 8746 */
typedef unsigned __int64 *PULONGLONG;

/* 8747 */
typedef tagSAFEARRAY *LPSAFEARRAY;

/* 8748 */
typedef IPersistFile *LPPERSISTFILE;

/* 8749 */
typedef unsigned __int16 uint_least16_t;

/* 8750 */
typedef DLGTEMPLATE *LPDLGTEMPLATE;

/* 8751 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETCURRENTMOSAICTOPOLOGY)(NV_MOSAIC_TOPOLOGY *);

/* 8752 */
typedef IAuthenticateEx *LPAUTHENTICATIONEX;

/* 8753 */
typedef _CRYPT_KEY_PROV_INFO *PCRYPT_KEY_PROV_INFO;

/* 8754 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPHYSICALFRAMEBUFFERSIZE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8755 */
typedef tagNEWTEXTMETRICA *PNEWTEXTMETRIC;

/* 8756 */
typedef _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER;

/* 8757 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETCHIPSETINFO)(NV_CHIPSET_INFO_v4 *);

/* 8758 */
typedef _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

/* 8759 */
typedef _CRYPT_TIMESTAMP_REQUEST *PCRYPT_TIMESTAMP_REQUEST;

/* 8760 */
typedef _PORT_INFO_2W *PPORT_INFO_2W;

/* 8761 */
typedef _SD_GLOBAL_CHANGE_INPUT *PSD_GLOBAL_CHANGE_INPUT;

/* 8762 */
typedef _ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;

/* 8763 */
typedef _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1A;

/* 8764 */
typedef __int64 bdInt64;

/* 8765 */
typedef tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMS;

/* 8766 */
typedef void (__cdecl *PFN_SC_NOTIFY_CALLBACK)(void *);

/* 8767 */
typedef _NCRYPT_CIPHER_PADDING_INFO *PNCRYPT_CIPHER_PADDING_INFO;

/* 8768 */
typedef tagACTCTXW *PACTCTXW;

/* 8769 */
typedef SET_POWER_SETTING_VALUE *PSET_POWER_SETTING_VALUE;

/* 8770 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVIEW)(NvDisplayHandle__ *, NV_VIEW_TARGET_INFO *, unsigned int *, _NV_TARGET_VIEW_MODE *);

/* 8771 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETTVOUTPUTBORDERCOLOR)(NvDisplayHandle__ *, unsigned int, NV_TV_BORDER_COLOR *);

/* 8772 */
typedef _QualityOfService *LPQOS;

/* 8773 */
typedef tagEMRCREATEBRUSHINDIRECT *PEMRCREATEBRUSHINDIRECT;

/* 8774 */
typedef _RPC_BINDING_HANDLE_TEMPLATE_V1_A *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

/* 8775 */
typedef unsigned __int16 OcclusionQueryHandle;

/* 8776 */
typedef _CRYPT_PRIVATE_KEY_INFO *PCRYPT_PRIVATE_KEY_INFO;

/* 8777 */
typedef unsigned __int16 *PUSHORT;

/* 8778 */
typedef _PRINTPROCESSOR_INFO_1W *PPRINTPROCESSOR_INFO_1W;

/* 8779 */
typedef char GfxZoneRasterizerStateHandle;

/* 8780 */
typedef _ACL *PACL;

/* 8781 */
typedef tagMCI_OVLY_OPEN_PARMSW *LPMCI_OVLY_OPEN_PARMSW;

/* 8782 */
typedef _PORT_INFO_2A *PPORT_INFO_2A;

/* 8783 */
typedef unsigned __int64 BD_UINT_64;

/* 8784 */
typedef void __cdecl GfxDrawCallback(const void *, GfxCmdBufContext);

/* 8785 */
typedef void (__cdecl *FX_DrawElemHandler)(FxDrawState *);

/* 8786 */
typedef void (__cdecl *dwCSFailureCallback)(const int, bdLobbyErrorCode);

/* 8787 */
typedef void (__cdecl *WAITORTIMERCALLBACK)(void *, char);

/* 8788 */
typedef tagTEXTMETRICA *PTEXTMETRICA;

/* 8789 */
typedef tagEMRGDICOMMENT *PEMRGDICOMMENT;

/* 8790 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_OGL_EXPERTMODEGET)(unsigned int *, unsigned int *, unsigned int *, void (__cdecl **)(unsigned int, unsigned int, unsigned int, int, const char *));

/* 8791 */
typedef _DEDUP_CHUNK_INFORMATION_HASH32 *PDEDUP_CHUNK_INFORMATION_HASH32;

/* 8792 */
typedef int iostate;

/* 8793 */
typedef int (__cdecl *ICMENUMPROCA)(char *, __int64);

/* 8794 */
typedef int IFAST_MULT_TYPE;

/* 8795 */
typedef IOleContainer *LPOLECONTAINER;

/* 8796 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETVIEW)(NvDisplayHandle__ *, NV_VIEW_TARGET_INFO *, _NV_TARGET_VIEW_MODE);

/* 8797 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETTVOUTPUTBORDERCOLOR)(NvDisplayHandle__ *, unsigned int, NV_TV_BORDER_COLOR);

/* 8798 */
typedef _RPC_BINDING_HANDLE_TEMPLATE_V1_W *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

/* 8799 */
typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;

/* 8800 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_GETCOPROCINFOFLAGSEX)(NV_COPROC_FLAGS_EX *);

/* 8801 */
typedef _STARTUPINFOA *LPSTARTUPINFO;

/* 8802 */
typedef tagTRACKMOUSEEVENT *LPTRACKMOUSEEVENT;

/* 8803 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_DESTROYQUERY)(NVDX_ObjectHandle__ *);

/* 8804 */
typedef _SCARD_ATRMASK *PSCARD_ATRMASK;

/* 8805 */
typedef tagRAWINPUTDEVICE *PCRAWINPUTDEVICE;

/* 8806 */
typedef __int16 INT16;

/* 8807 */
typedef HMIXEROBJ__ *HMIXEROBJ;

/* 8808 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_NEGOTIATEDHEXCHANGE)(const unsigned __int16 *, char *, char *);

/* 8809 */
typedef _FILE_LAYOUT_NAME_ENTRY *PFILE_LAYOUT_NAME_ENTRY;

/* 8810 */
typedef tagMENUITEMINFOW *LPCMENUITEMINFOW;

/* 8811 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHENABLEDEPTHTESTNV)(unsigned int, bool);

/* 8812 */
typedef unsigned int __cdecl PM_COLLECT_PROC(wchar_t *, void **, unsigned int *, unsigned int *);

/* 8813 */
typedef unsigned int *PSECURITY_INFORMATION;

/* 8814 */
typedef const char *XString;

/* 8815 */
typedef joyinfoex_tag *LPJOYINFOEX;

/* 8816 */
typedef void (__cdecl *ScriptCallbackEnt)(gentity_s *, int);

/* 8817 */
typedef int _off_t;

/* 8818 */
typedef joyinfoex_tag *NPJOYINFOEX;

/* 8819 */
typedef _PROCESS_MITIGATION_ASLR_POLICY *PPROCESS_MITIGATION_ASLR_POLICY;

/* 8820 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_ENUMCLUSTERTOPOLOGIES)(unsigned int, _NV_PIVOT_V1 *, unsigned int, _NV_CLUSTER_V1 *);

/* 8821 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURASETCOOLINGBUDGET)(unsigned int);

/* 8822 */
typedef void *(__cdecl *Alloc_t)(unsigned __int64);

/* 8823 */
typedef _PARTITION_INFORMATION_GPT *PPARTITION_INFORMATION_GPT;

/* 8824 */
typedef SetLocalVarData *SetLocalVarDataPtr;

/* 8825 */
typedef _CRYPT_3DES_KEY_STATE *PCRYPT_3DES_KEY_STATE;

/* 8826 */
typedef tagHANDLETABLE *LPHANDLETABLE;

/* 8827 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_READ_CTL)(void *, _CTL_CONTEXT *, unsigned int, _CTL_CONTEXT **);

/* 8828 */
typedef _CMS_KEY_INFO *PCMS_KEY_INFO;

/* 8829 */
typedef _XSAVE_FORMAT *PXMM_SAVE_AREA32;

/* 8830 */
typedef _WSAServiceClassInfoA *LPWSASERVICECLASSINFO;

/* 8831 */
typedef tagAXISINFOA *PAXISINFO;

/* 8832 */
typedef _INPUT_RECORD *PINPUT_RECORD;

/* 8833 */
typedef tagRAWINPUTDEVICE *PRAWINPUTDEVICE;

/* 8834 */
typedef void (__cdecl *_inconsistency_function)();

/* 8835 */
typedef _EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

/* 8836 */
typedef _WSANSClassInfoA *PWSANSCLASSINFOA;

/* 8837 */
typedef unsigned __int16 alignCompBufUShort_t;

/* 8838 */
typedef unsigned __int16 raw_ushort;

/* 8839 */
typedef void (__cdecl *fn_use)(gentity_s *, gentity_s *, gentity_s *);

/* 8840 */
typedef __int64 LRESULT;

/* 8841 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETASSOCIATEDDISPLAYOUTPUTID)(NvDisplayHandle__ *, unsigned int *);

/* 8842 */
typedef int (__cdecl *R_TimeoutFunction)();

/* 8843 */
typedef _userSTGMEDIUM *wireASYNC_STGMEDIUM;

/* 8844 */
typedef bool (__cdecl *TestBoxInSolidFunc_t)(const float *, const float *, void *);

/* 8846 */
typedef VOLUME_BITMAP_BUFFER *PVOLUME_BITMAP_BUFFER;

/* 8847 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SAVESETTINGSTOFILE)(NvDRSSessionHandle__ *, unsigned __int16 *);

/* 8848 */
typedef unsigned __int64 *PKAFFINITY;

/* 8849 */
typedef float float16;

/* 8850 */
typedef float shared_vec3_t[3];

/* 8851 */
typedef tagCBTACTIVATESTRUCT *LPCBTACTIVATESTRUCT;

/* 8852 */
typedef _DIOBJECTDATAFORMAT *LPDIOBJECTDATAFORMAT;

/* 8853 */
typedef tagMDICREATESTRUCTA *LPMDICREATESTRUCT;

/* 8854 */
typedef _FILE_ATTRIBUTE_TAG_INFO *PFILE_ATTRIBUTE_TAG_INFO;

/* 8855 */
typedef int GEOID;

/* 8856 */
typedef _RPC_BINDING_HANDLE_SECURITY_V1_W *PRPC_BINDING_HANDLE_SECURITY_V1_W;

/* 8857 */
typedef __int64 bdWord;

/* 8858 */
typedef _DRAGINFOA *LPDRAGINFOA;

/* 8859 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETSETTINGNAMEFROMID)(unsigned int, unsigned __int16 (*)[2048]);

/* 8860 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DESTROYHANDLE)(void *);

/* 8861 */
typedef tagBIND_OPTS *LPBIND_OPTS;

/* 8862 */
typedef _REPAIR_COPIES_INPUT *PREPAIR_COPIES_INPUT;

/* 8863 */
typedef tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTA;

/* 8864 */
typedef ID3D11Buffer *GfxVertexBufferHandle;

/* 8865 */
typedef int (__cdecl *CODEPAGE_ENUMPROCW)(wchar_t *);

/* 8866 */
typedef _DRIVE_LAYOUT_INFORMATION_GPT *PDRIVE_LAYOUT_INFORMATION_GPT;

/* 8867 */
typedef _DRAGINFOW *LPDRAGINFOW;

/* 8868 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_STRETCHRECTEX)(unsigned int *, unsigned int *, tagRECT *, unsigned int *, tagRECT *, unsigned int);

/* 8869 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ISFRAMELOCKMODECOMPATIBLE)(NvVioHandle__ *, unsigned int, unsigned int, unsigned int *);

/* 8870 */
typedef _SENDCMDINPARAMS *PSENDCMDINPARAMS;

/* 8871 */
typedef _RPC_BINDING_HANDLE_SECURITY_V1_A *PRPC_BINDING_HANDLE_SECURITY_V1_A;

/* 8872 */
typedef unsigned int *PDWORD;

/* 8873 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX;

/* 8874 */
typedef LIST_ENTRY32 *PLIST_ENTRY32;

/* 8875 */
typedef void (__cdecl *PFNSETTHREADPOOLWAIT)(_TP_WAIT *, void *, _FILETIME *);

/* 8876 */
typedef _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA;

/* 8877 */
typedef NvDRSProfileHandle__ *NvDRSProfileHandle;

/* 8878 */
typedef unsigned int LCTYPE;

/* 8879 */
typedef ID3D11ComputeShader *GfxComputeShader;

/* 8880 */
typedef int (__cdecl *PFN_CMSG_IMPORT_MAIL_LIST)(_CRYPT_ALGORITHM_IDENTIFIER *, _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *, unsigned int, void *, unsigned __int64 *);

/* 8881 */
typedef int qhandle_t;

/* 8882 */
typedef wchar_t *PUNZWCH;

/* 8883 */
typedef waveformat_tag *PWAVEFORMAT;

/* 8884 */
typedef _DISK_DETECTION_INFO *PDISK_DETECTION_INFO;

/* 8885 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SETSYNCDELAY)(NvVioHandle__ *, _NVVIOSYNCDELAY *);

/* 8886 */
typedef char *PUNZTCH;

/* 8887 */
typedef unsigned int *PDWORD32;

/* 8888 */
typedef int (__cdecl *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(_CERT_CONTEXT *, void *);

/* 8889 */
typedef dxWorld *dWorldID;

/* 8890 */
typedef tagINTERFACEDATA *LPINTERFACEDATA;

/* 8891 */
typedef unsigned __int64 uintptr_t;

/* 8892 */
typedef _RPC_BINDING_HANDLE_OPTIONS_V1 *PRPC_BINDING_HANDLE_OPTIONS_V1;

/* 8893 */
typedef unsigned int mp_digit;

/* 8894 */
typedef _WSANAMESPACE_INFOW *LPWSANAMESPACE_INFOW;

/* 8895 */
typedef unsigned int FxSparkFountainHandle;

/* 8896 */
typedef void (__cdecl *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(void *, void *);

/* 8897 */
typedef tagRECONVERTSTRING *PRECONVERTSTRING;

/* 8898 */
typedef _DRIVERSTATUS *PDRIVERSTATUS;

/* 8899 */
typedef tagENUMLOGFONTEXW *LPENUMLOGFONTEXW;

/* 8900 */
typedef _NAME_BUFFER *PNAME_BUFFER;

/* 8901 */
typedef __int64 LONG64;

/* 8902 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_POLLOOSDSTATE)(const unsigned __int16 *);

/* 8903 */
typedef _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

/* 8904 */
typedef void (__cdecl *R_ExecFailed)();

/* 8905 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETSYNCDELAY)(NvVioHandle__ *, _NVVIOSYNCDELAY *);

/* 8906 */
typedef _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;

/* 8907 */
typedef USN_JOURNAL_DATA_V1 *PUSN_JOURNAL_DATA;

/* 8908 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETHDCPLINKPARAMETERS)(NvDisplayHandle__ *, NV_HDCP_INFO *);

/* 8909 */
typedef tagENUMTEXTMETRICA *PENUMTEXTMETRIC;

/* 8910 */
typedef tagWINDOWPLACEMENT *LPWINDOWPLACEMENT;

/* 8911 */
typedef _XSAVE_AREA_HEADER *PXSAVE_AREA_HEADER;

/* 8912 */
typedef tagLOGBRUSH *LPPATTERN;

/* 8913 */
typedef _CRL_CONTEXT *PCCRL_CONTEXT;

/* 8914 */
typedef tagLOGBRUSH *NPPATTERN;

/* 8915 */
typedef _PRINTER_NOTIFY_INFO *PPRINTER_NOTIFY_INFO;

/* 8916 */
typedef tagCURSORSHAPE *LPCURSORSHAPE;

/* 8917 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PCRITICAL_SECTION_DEBUG;

/* 8918 */
typedef void (__cdecl *CS_TYPE_TO_NETCS_ROUTINE)(void *, unsigned int, void *, unsigned int, char *, unsigned int *, unsigned int *);

/* 8919 */
typedef void (__cdecl *PRTL_UMS_SCHEDULER_ENTRY_POINT)(_RTL_UMS_SCHEDULER_REASON, unsigned __int64, void *);

/* 8920 */
typedef _RECTL *PRECTL;

/* 8921 */
typedef unsigned int RPCOLEDATAREP;

/* 8922 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETFRUSTUMADJUSTMODE)(void *, _NV_FrustumAdjustMode *);

/* 8923 */
typedef FIND_BY_SID_OUTPUT *PFIND_BY_SID_OUTPUT;

/* 8924 */
typedef int (__cdecl *PFNENUMLOCALESPROCEX)(unsigned __int16 *, unsigned int, __int64);

/* 8925 */
typedef _DRAGINFOA *LPDRAGINFO;

/* 8926 */
typedef void (__cdecl *WORKERCALLBACKFUNC)(void *);

/* 8927 */
typedef _CERT_CHAIN_ELEMENT *PCCERT_CHAIN_ELEMENT;

/* 8928 */
typedef unsigned int *PEXECUTION_STATE;

/* 8929 */
typedef tagMONITORINFOEXW *LPMONITORINFOEXW;

/* 8930 */
typedef int expressionEntryType;

/* 8931 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPERFDECREASEINFO)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 8932 */
typedef tagDEVNAMES *LPDEVNAMES;

/* 8933 */
typedef tagEXTLOGFONTA *PEXTLOGFONT;

/* 8934 */
typedef IDispatch *LPDISPATCH;

/* 8935 */
typedef void (__cdecl *PTP_WIN32_IO_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *, void *, unsigned int, unsigned __int64, _TP_IO *);

/* 8936 */
typedef tagJOYCAPS2W *PJOYCAPS2W;

/* 8937 */
typedef _SCONTEXT_QUEUE *PSCONTEXT_QUEUE;

/* 8938 */
typedef _CERTIFICATE_BLOB *PEFS_CERTIFICATE_BLOB;

/* 8939 */
typedef unsigned __int16 DynEntityId;

/* 8940 */
typedef IOleClientSite *LPOLECLIENTSITE;

/* 8941 */
typedef SCARD_T0_COMMAND *LPSCARD_T0_COMMAND;

/* 8942 */
typedef MenuEventHandler *MenuEventHandlerPtr;

/* 8943 */
typedef _SYSTEM_SCOPED_POLICY_ID_ACE *PSYSTEM_SCOPED_POLICY_ID_ACE;

/* 8944 */
typedef char *va_list;

/* 8945 */
typedef void (__cdecl *WINEVENTPROC)(HWINEVENTHOOK__ *, unsigned int, HWND__ *, int, int, unsigned int, unsigned int);

/* 8946 */
typedef _DATATYPES_INFO_1A *PDATATYPES_INFO_1;

/* 8947 */
typedef _EXCEPTION_POINTERS *LPEXCEPTION_POINTERS;

/* 8948 */
typedef _DOCINFOW *LPDOCINFOW;

/* 8949 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETVERTEXSHADERCONSTANTI)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 8950 */
typedef char *PNZCH;

/* 8951 */
typedef unsigned int PartnerId_t;

/* 8952 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_DRAWPATHNV)(unsigned int, _NV_PATH_MODE);

/* 8953 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_SETCURRENTTOPO)(NV_MOSAIC_TOPO_BRIEF *, NV_MOSAIC_DISPLAY_SETTING *, int, int, unsigned int);

/* 8954 */
typedef char type;

/* 8955 */
typedef _INTERFACE_INFO_EX *LPINTERFACE_INFO_EX;

/* 8956 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ALIASSURFACEASTEXTURE)(unsigned int *, unsigned int *, unsigned int **, unsigned int);

/* 8957 */
typedef PROCESSOR_IDLESTATE_POLICY *PPROCESSOR_IDLESTATE_POLICY;

/* 8958 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETVERTEXSHADERCONSTANTB)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 8959 */
typedef tagBLOB *LPBLOB;

/* 8960 */
typedef _nlsversioninfoex *LPNLSVERSIONINFOEX;

/* 8961 */
typedef _UNWIND_HISTORY_TABLE *PUNWIND_HISTORY_TABLE;

/* 8962 */
typedef unsigned __int16 childVariableBucketArray_t[65536];

/* 8963 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETVERTEXSHADERCONSTANTF)(void *, unsigned int, float *, float *, float *, unsigned int);

/* 8964 */
typedef void (__cdecl *PFV)();

/* 8965 */
typedef const wchar_t *PUWSTR_C;

/* 8966 */
typedef int HALF_PTR;

/* 8967 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_HYBRID_ISAPPMIGRATIONSTATECHANGEABLE)(NV_HYBRID_APP_INFO, unsigned int *);

/* 8968 */
typedef tagWINDOWPOS *LPWINDOWPOS;

/* 8969 */
typedef tagRGBTRIPLE *NPRGBTRIPLE;

/* 8970 */
typedef _CRYPT_PASSWORD_CREDENTIALSW *PCRYPT_PASSWORD_CREDENTIALSW;

/* 8971 */
typedef tagRGBTRIPLE *LPRGBTRIPLE;

/* 8972 */
typedef _STREAM_EXTENT_ENTRY *PSTREAM_EXTENT_ENTRY;

/* 8973 */
typedef int (__cdecl *PFNLCMAPSTRINGEX)(const wchar_t *, unsigned int, const wchar_t *, int, unsigned __int16 *, int, _nlsversioninfo *, void *, __int64);

/* 8974 */
typedef tagBITMAPINFOHEADER *PBITMAPINFOHEADER;

/* 8975 */
typedef _FILE_ALLOCATION_INFO *PFILE_ALLOCATION_INFO;

/* 8976 */
typedef tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMS;

/* 8977 */
typedef CO_MTA_USAGE_COOKIE__ *CO_MTA_USAGE_COOKIE;

/* 8978 */
typedef char *xBlockDataPtr_t;

/* 8979 */
typedef tagCBT_CREATEWNDA *LPCBT_CREATEWNDA;

/* 8980 */
typedef _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1;

/* 8981 */
typedef PPM_PERFSTATE_EVENT *PPPM_PERFSTATE_EVENT;

/* 8982 */
typedef _BIDI_REQUEST_DATA *PBIDI_REQUEST_DATA;

/* 8983 */
typedef _CERT_STORE_PROV_INFO *PCERT_STORE_PROV_INFO;

/* 8984 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETCONFIGURATIONPROFILEVALUE)(_NV_StereoRegistryProfileType, _NV_StereoRegistryID, void *);

/* 8985 */
typedef in6_addr *LPIN6_ADDR;

/* 8986 */
typedef unsigned int open_mode;

/* 8987 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_INCREASESEPARATION)(void *);

/* 8988 */
typedef tagPOLYTEXTW *PPOLYTEXTW;

/* 8989 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPERFCLOCKS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_PERF_CLOCK_TABLE *);

/* 8990 */
typedef const wchar_t *LPCUWCHAR;

/* 8991 */
typedef char **JSAMPARRAY;

/* 8992 */
typedef _CRYPT_PROVIDER_REG *PCRYPT_PROVIDER_REG;

/* 8993 */
typedef _CRYPT_RC4_KEY_STATE *PCRYPT_RC4_KEY_STATE;

/* 8994 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_INITINTERFACE)();

/* 8995 */
typedef _CRYPT_PROVIDER_REF *PCRYPT_PROVIDER_REF;

/* 8996 */
typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;

/* 8997 */
typedef tagSOUNDSENTRYA *LPSOUNDSENTRY;

/* 8998 */
typedef void *bdThreadHandle;

/* 8999 */
typedef _TOKEN_ELEVATION *PTOKEN_ELEVATION;

/* 9000 */
typedef HACCEL__ *HACCEL;

/* 9001 */
typedef tagICEXYZTRIPLE *LPCIEXYZTRIPLE;

/* 9002 */
typedef IWinInetHttpInfo *LPWININETHTTPINFO;

/* 9003 */
typedef _PROPSHEETHEADERW_V2 *LPPROPSHEETHEADERW;

/* 9004 */
typedef tagSIZE *LPSIZE;

/* 9005 */
typedef unsigned int (__cdecl *LPFNPSPCALLBACKW)(HWND__ *, unsigned int, _PROPSHEETPAGEW *);

/* 9006 */
typedef void (__cdecl *CS_TYPE_FROM_NETCS_ROUTINE)(void *, unsigned int, char *, unsigned int, unsigned int, void *, unsigned int *, unsigned int *);

/* 9007 */
typedef _PORT_INFO_1A *PPORT_INFO_1;

/* 9008 */
typedef int (__cdecl *LPDIENUMDEVICEOBJECTSCALLBACKA)(DIDEVICEOBJECTINSTANCEA *, void *);

/* 9009 */
typedef char _TCHAR;

/* 9010 */
typedef tagLOGFONTA *NPLOGFONTA;

/* 9011 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPERFCLOCKS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_PERF_CLOCK_TABLE *);

/* 9012 */
typedef _RPC_SECURITY_QOS_V2_W *PRPC_SECURITY_QOS_V2_W;

/* 9013 */
typedef tagLOGFONTA *LPLOGFONTA;

/* 9014 */
typedef void *LPLDT_ENTRY;

/* 9015 */
typedef tagMIXERCONTROLA *LPMIXERCONTROL;

/* 9016 */
typedef void *handle_t;

/* 9017 */
typedef _RPC_SECURITY_QOS_V4_A *PRPC_SECURITY_QOS_V4_A;

/* 9018 */
typedef char (__cdecl *jpeg_marker_parser_method)(jpeg_decompress_struct *);

/* 9019 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ISWINDOWEDMODESUPPORTED)(char *);

/* 9020 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_HYBRID_QUERYBLOCKEDMIGRATABLEAPPS)(NV_HYBRID_APP_INFO *, unsigned int *);

/* 9021 */
typedef char *PTCHAR;

/* 9022 */
typedef tagABORTPATH *PEMRBEGINPATH;

/* 9023 */
typedef tagABORTPATH *PEMRFLATTENPATH;

/* 9024 */
typedef _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];

/* 9025 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCMAPTEXBUFFER)(unsigned int *, unsigned int *, void *);

/* 9026 */
typedef const char *PCZZSTR;

/* 9027 */
typedef tagMCI_ANIM_OPEN_PARMSW *PMCI_ANIM_OPEN_PARMSW;

/* 9028 */
typedef _CERT_CRL_CONTEXT_PAIR *PCERT_CRL_CONTEXT_PAIR;

/* 9029 */
typedef unsigned __int64 U64;

/* 9030 */
typedef void *PUMS_COMPLETION_LIST;

/* 9031 */
typedef _STORAGE_PROPERTY_QUERY *PSTORAGE_PROPERTY_QUERY;

/* 9032 */
typedef tagAUXCAPSA *LPAUXCAPS;

/* 9033 */
typedef void *DBFileHandle;

/* 9034 */
typedef unsigned int FxEffectHandle;

/* 9035 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_FREEVIDEO)(unsigned int *);

/* 9036 */
typedef ITypeLib *LPTYPELIB;

/* 9037 */
typedef int (__cdecl *PFNISVALIDLOCALENAME)(const wchar_t *);

/* 9038 */
typedef box *boxptr;

/* 9039 */
typedef tagAUXCAPSA *NPAUXCAPS;

/* 9040 */
typedef IViewObject2 *LPVIEWOBJECT2;

/* 9041 */
typedef _IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;

/* 9042 */
typedef tagABORTPATH *PEMRWIDENPATH;

/* 9043 */
typedef _OCSP_SIGNATURE_INFO *POCSP_SIGNATURE_INFO;

/* 9044 */
typedef _PRINTER_INFO_3 *LPPRINTER_INFO_3;

/* 9045 */
typedef _CERT_KEY_CONTEXT *PCERT_KEY_CONTEXT;

/* 9046 */
typedef addrinfo *LPADDRINFO;

/* 9047 */
typedef _TP_TIMER *(__cdecl *PFNCREATETHREADPOOLTIMER)(void (__cdecl *)(_TP_CALLBACK_INSTANCE *, void *, _TP_TIMER *), void *, _TP_CALLBACK_ENVIRON_V1 *);

/* 9048 */
typedef _SOCKET_PROCESSOR_AFFINITY *PSOCKET_PROCESSOR_AFFINITY;

/* 9049 */
typedef _PRINTER_INFO_9A *PPRINTER_INFO_9A;

/* 9050 */
typedef _PROVIDOR_INFO_1W *PPROVIDOR_INFO_1W;

/* 9051 */
typedef _STORAGE_PROPERTY_ID *PSTORAGE_PROPERTY_ID;

/* 9052 */
typedef long double F64;

/* 9053 */
typedef _IMAGE_SYMBOL *PIMAGE_SYMBOL;

/* 9054 */
typedef _FILE_COMPRESSION_INFO *PFILE_COMPRESSION_INFO;

/* 9055 */
typedef _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;

/* 9056 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_TRYCUSTOMDISPLAY)(NvDisplayHandle__ *, unsigned int *, NV_CUSTOM_DISPLAY *, unsigned int, unsigned int);

/* 9057 */
typedef tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMSA;

/* 9058 */
typedef _READ_ELEMENT_ADDRESS_INFO *PREAD_ELEMENT_ADDRESS_INFO;

/* 9059 */
typedef unsigned int HksNativeValueAsInt;

/* 9060 */
typedef _CMC_ADD_ATTRIBUTES_INFO *PCMC_ADD_ATTRIBUTES_INFO;

/* 9061 */
typedef void (__cdecl *PRPC_RUNDOWN)(void *);

/* 9062 */
typedef _FILE_ZERO_DATA_INFORMATION *PFILE_ZERO_DATA_INFORMATION;

/* 9063 */
typedef _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1A;

/* 9064 */
typedef IViewObject *LPVIEWOBJECT;

/* 9065 */
typedef int (__cdecl *PFNGETLOCALEINFOEX)(const wchar_t *, unsigned int, unsigned __int16 *, int);

/* 9066 */
typedef tagMCI_ANIM_PLAY_PARMS *LPMCI_ANIM_PLAY_PARMS;

/* 9067 */
typedef _CERT_POLICY95_QUALIFIER1 *PCERT_POLICY95_QUALIFIER1;

/* 9068 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

/* 9069 */
typedef _TRANSACTIONMANAGER_OLDEST_INFORMATION *PTRANSACTIONMANAGER_OLDEST_INFORMATION;

/* 9070 */
typedef _SCOPE_TABLE_ARM *PSCOPE_TABLE_ARM;

/* 9071 */
typedef _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP *PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;

/* 9072 */
typedef DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;

/* 9073 */
typedef POWER_ACTION_POLICY *PPOWER_ACTION_POLICY;

/* 9074 */
typedef _REPAIR_COPIES_OUTPUT *PREPAIR_COPIES_OUTPUT;

/* 9075 */
typedef tagWCRANGE *LPWCRANGE;

/* 9076 */
typedef void (__cdecl *pmove_trace)(trace_t *, const float *, const float *, Bounds *, int, int, TraceData *);

/* 9077 */
typedef READER_SEL_RESPONSE *PREADER_SEL_RESPONSE;

/* 9078 */
typedef tagMIXERCONTROLW *LPMIXERCONTROLW;

/* 9079 */
typedef tagRAWINPUTDEVICE *LPRAWINPUTDEVICE;

/* 9080 */
typedef int (__cdecl *speex_callback_func)(SpeexBits *, void *, void *);

/* 9081 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETSTEREOSUPPORT)(NvMonitorHandle__ *, _NVAPI_STEREO_CAPS *);

/* 9082 */
typedef tagSIZE *LPSIZEL;

/* 9083 */
typedef _CERT_CHAIN_POLICY_PARA *PCERT_CHAIN_POLICY_PARA;

/* 9084 */
typedef _PORT_INFO_1W *PPORT_INFO_1W;

/* 9085 */
typedef _PROCESSOR_POWER_POLICY_INFO *PPROCESSOR_POWER_POLICY_INFO;

/* 9086 */
typedef char max_matchrules_savefile[31128];

/* 9087 */
typedef my_fdct_controller *my_fdct_ptr;

/* 9088 */
typedef tagEMRINVERTRGN *PEMRINVERTRGN;

/* 9089 */
typedef _PRINTER_INFO_8A *PPRINTER_INFO_8A;

/* 9090 */
typedef void (__cdecl *NDR_NOTIFY2_ROUTINE)(char);

/* 9091 */
typedef IPersist *LPPERSIST;

/* 9092 */
typedef _WSAQuerySetW *LPWSAQUERYSETW;

/* 9093 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DECREASECONVERGENCE)(void *);

/* 9094 */
typedef _PORT_INFO_1A *PPORT_INFO_1A;

/* 9095 */
typedef _STORAGE_OFFLOAD_WRITE_OUTPUT *PSTORAGE_OFFLOAD_WRITE_OUTPUT;

/* 9096 */
typedef _GUID *LPCGUID;

/* 9097 */
typedef tagMIXERCONTROLA *LPMIXERCONTROLA;

/* 9098 */
typedef const void *const_void_pointer;

/* 9099 */
typedef _CRYPT_RC2_CBC_PARAMETERS *PCRYPT_RC2_CBC_PARAMETERS;

/* 9100 */
typedef _BIDI_RESPONSE_DATA *PBIDI_RESPONSE_DATA;

/* 9101 */
typedef char msg_buf_t[131072];

/* 9102 */
typedef unsigned int *LPCOLORREF;

/* 9103 */
typedef PROCESSOR_IDLESTATE_INFO *PPROCESSOR_IDLESTATE_INFO;

/* 9104 */
typedef tagMENUBARINFO *LPMENUBARINFO;

/* 9105 */
typedef tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDV;

/* 9106 */
typedef bool __cdecl TriangleVisitorFunc(void *, TriangleVisitorVertex *);

/* 9107 */
typedef _WSANAMESPACE_INFOEXA *LPWSANAMESPACE_INFOEXA;

/* 9108 */
typedef char byte4;

/* 9109 */
typedef small_pool_struct *small_pool_ptr;

/* 9110 */
typedef void (__cdecl *MSGBOXCALLBACK)(tagHELPINFO *);

/* 9111 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETFRAMERATENOTIFY)(NvDisplayHandle__ *, _NVAPI_FRAME_RATE_NOTIFY_INFO *);

/* 9112 */
typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;

/* 9113 */
typedef SCARD_READERSTATEA *PSCARD_READERSTATEA;

/* 9114 */
typedef _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER;

/* 9115 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_GETSYNCSTATUS)(NvGSyncDeviceHandle__ *, NvPhysicalGpuHandle__ *, _NV_GSYNC_STATUS *);

/* 9116 */
typedef int FXPT16DOT16;

/* 9117 */
typedef unsigned int _Uty;

/* 9118 */
typedef tagRGBTRIPLE *PRGBTRIPLE;

/* 9119 */
typedef tagMIDIINCAPS2A *LPMIDIINCAPS2;

/* 9120 */
typedef tagMIDIINCAPS2A *NPMIDIINCAPS2;

/* 9121 */
typedef _STORAGE_MINIPORT_DESCRIPTOR *PSTORAGE_MINIPORT_DESCRIPTOR;

/* 9122 */
typedef tagWINDOWPOS *PWINDOWPOS;

/* 9123 */
typedef SCARD_READERSTATEW *PSCARD_READERSTATEW;

/* 9124 */
typedef int (__cdecl *PGET_MODULE_HANDLE_EXA)(unsigned int, const char *, HINSTANCE__ **);

/* 9125 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTHERMALSETTINGS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_THERMAL_SETTINGS_V2 *);

/* 9126 */
typedef char Byte;

/* 9127 */
typedef char byte;

/* 9128 */
typedef char BYTE;

/* 9129 */
typedef void (__cdecl *LPFIBER_START_ROUTINE)(void *);

/* 9130 */
typedef LoadedSound *LoadedSoundPtr;

/* 9131 */
typedef _DRIVER_INFO_8A *PDRIVER_INFO_8;

/* 9132 */
typedef SHELLHOOKINFO *LPSHELLHOOKINFO;

/* 9133 */
typedef unsigned __int64 (__cdecl *LPPAGEPAINTHOOK)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 9134 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_CHECKDEVICESUPPORT)(NvIFRCheckDeviceSupportParams *);

/* 9135 */
typedef tagMIDIINCAPSA *NPMIDIINCAPS;

/* 9136 */
typedef int (__cdecl *PFNPROPSHEETCALLBACK)(HWND__ *, unsigned int, __int64);

/* 9137 */
typedef tagMIDIINCAPSA *LPMIDIINCAPS;

/* 9138 */
typedef _CRYPT_KEY_PROV_PARAM *PCRYPT_KEY_PROV_PARAM;

/* 9139 */
typedef _HEAP_SUMMARY *PHEAP_SUMMARY;

/* 9140 */
typedef _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

/* 9141 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATESWAPCHAIN)(void *, unsigned int *, unsigned int **, _NV_StereoSwapChainMode);

/* 9142 */
typedef _RTL_SRWLOCK *PRTL_SRWLOCK;

/* 9143 */
typedef void *(__cdecl *BucketAllocCallback)(unsigned __int64, void *);

/* 9144 */
typedef void (__cdecl *encoder_destroy_func)(void *);

/* 9145 */
typedef _SENDCMDOUTPARAMS *LPSENDCMDOUTPARAMS;

/* 9146 */
typedef tagMOUSEHOOKSTRUCTEX *PMOUSEHOOKSTRUCTEX;

/* 9147 */
typedef tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMS;

/* 9148 */
typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;

/* 9149 */
typedef editFieldDef_s *editFieldDef_ptr;

/* 9150 */
typedef _CHANGER_INITIALIZE_ELEMENT_STATUS *PCHANGER_INITIALIZE_ELEMENT_STATUS;

/* 9151 */
typedef tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS;

/* 9152 */
typedef void *SndLengthNotifyData;

/* 9153 */
typedef _CRYPT_TIMESTAMP_ACCURACY *PCRYPT_TIMESTAMP_ACCURACY;

/* 9154 */
typedef __int16 FSERROR;

/* 9155 */
typedef HMIXER__ **LPHMIXER;

/* 9156 */
typedef int lua_Integer;

/* 9157 */
typedef XAnimParts *XAnimPartsPtr;

/* 9158 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSMMASK)(NvPhysicalGpuHandle__ *, unsigned int, unsigned int *);

/* 9159 */
typedef HPEN__ *HPEN;

/* 9160 */
typedef unsigned __int64 *PSID_HASH_ENTRY;

/* 9161 */
typedef _IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;

/* 9162 */
typedef IMessageFilter *LPMESSAGEFILTER;

/* 9163 */
typedef _CSV_QUERY_FILE_REVISION *PCSV_QUERY_FILE_REVISION;

/* 9164 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETMONITORCAPABILITIES)(unsigned int, _NV_MONITOR_CAPABILITIES *);

/* 9165 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_JOINSWAPGROUP)(IUnknown *, unsigned int *, unsigned int, int);

/* 9166 */
typedef int (__cdecl *I_RpcProxyFilterIfFn)(void *, _GUID *, unsigned __int16, int *);

/* 9167 */
typedef void (__cdecl *ScriptCallbackHudElem)(game_hudelem_s *, int);

/* 9168 */
typedef char byte8192;

/* 9169 */
typedef _ENCRYPTION_CERTIFICATE_HASH *PENCRYPTION_CERTIFICATE_HASH;

/* 9170 */
typedef tagTITLEBARINFOEX *PTITLEBARINFOEX;

/* 9171 */
typedef sockaddr_storage *PSOCKADDR_STORAGE_LH;

/* 9172 */
typedef _ENUM_SERVICE_STATUSW *LPENUM_SERVICE_STATUSW;

/* 9173 */
typedef _CERT_OTHER_NAME *PCERT_OTHER_NAME;

/* 9174 */
typedef void *PVOID;

/* 9175 */
typedef _SERVICE_STATUS_PROCESS *LPSERVICE_STATUS_PROCESS;

/* 9176 */
typedef _TRANSACTIONMANAGER_RECOVERY_INFORMATION *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;

/* 9177 */
typedef _DRIVER_INFO_8W *PDRIVER_INFO_8W;

/* 9178 */
typedef void (__cdecl *GENERIC_UNBIND_ROUTINE)(void *, char *);

/* 9179 */
typedef void (__cdecl *PhysCallback)();

/* 9180 */
typedef _FILE_PREFETCH *PFILE_PREFETCH;

/* 9181 */
typedef unsigned int Filter[8];

/* 9182 */
typedef unsigned __int16 hksUshort16;

/* 9183 */
typedef _userHGLOBAL *wireHGLOBAL;

/* 9184 */
typedef SCARD_READERSTATEA *PSCARD_READERSTATE;

/* 9185 */
typedef void (__cdecl *I_RpcProxyUpdatePerfCounterFn)(RpcProxyPerfCounters, int, unsigned int);

/* 9186 */
typedef void (__cdecl *dwCSListPublisherFilesTaskFailureCallback)(const int, const int, bdLobbyErrorCode);

/* 9187 */
typedef unsigned int uint32;

/* 9188 */
typedef unsigned int UINT32;

/* 9189 */
typedef tagMOUSEINPUT *PMOUSEINPUT;

/* 9190 */
typedef tagMIDIINCAPSW *LPMIDIINCAPSW;

/* 9191 */
typedef BITMAPV4HEADER *PBITMAPV4HEADER;

/* 9192 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_SETDISPLAYBLANKINGSTATE)(unsigned int, _NV_DISPLAY_BLANKING_INFO_V1 *);

/* 9193 */
typedef tagMIDIINCAPSW *NPMIDIINCAPSW;

/* 9194 */
typedef BITMAPV5HEADER *PBITMAPV5HEADER;

/* 9195 */
typedef int *PINT32;

/* 9196 */
typedef tagWAVEINCAPS2W *NPWAVEINCAPS2W;

/* 9197 */
typedef _FAT_STATISTICS *PFAT_STATISTICS;

/* 9198 */
typedef _DEVICEDUMP_SECTION_HEADER *PDEVICEDUMP_SECTION_HEADER;

/* 9199 */
typedef tagWAVEINCAPS2W *LPWAVEINCAPS2W;

/* 9200 */
typedef _SERVICE_PRESHUTDOWN_INFO *LPSERVICE_PRESHUTDOWN_INFO;

/* 9201 */
typedef _TXFS_GET_METADATA_INFO_OUT *PTXFS_GET_METADATA_INFO_OUT;

/* 9202 */
typedef _CMSG_CNG_CONTENT_DECRYPT_INFO *PCMSG_CNG_CONTENT_DECRYPT_INFO;

/* 9203 */
typedef _CERT_EXTENSION *PCERT_EXTENSION;

/* 9204 */
typedef _CERT_CREATE_CONTEXT_PARA *PCERT_CREATE_CONTEXT_PARA;

/* 9205 */
typedef _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT *PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT;

/* 9206 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_RESTOREPROFILEDEFAULTSETTING)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int);

/* 9207 */
typedef int (__cdecl *mode_query_func)(const void *, int, void *);

/* 9208 */
typedef tagBITMAPINFOHEADER *LPBITMAPINFOHEADER;

/* 9209 */
typedef _CERT_STORE_PROV_FIND_INFO *PCERT_STORE_PROV_FIND_INFO;

/* 9210 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETPITCHSURFACECREATION)(unsigned int *, unsigned int);

/* 9211 */
typedef char Bytef;

/* 9212 */
typedef _SECURITY_CAPABILITIES *LPSECURITY_CAPABILITIES;

/* 9213 */
typedef IMonikerProp *LPMONIKERPROP;

/* 9214 */
typedef _DRIVER_INFO_8A *PDRIVER_INFO_8A;

/* 9215 */
typedef int (__cdecl *EDITWORDBREAKPROC)(char *, int, int, int);

/* 9216 */
typedef int (__cdecl *ENHMFENUMPROC)(HDC__ *, tagHANDLETABLE *, tagENHMETARECORD *, int, __int64);

/* 9217 */
typedef unsigned int GfxPackedColor;

/* 9218 */
typedef unsigned int MCIERROR;

/* 9219 */
typedef tagEMRSELECTCLIPPATH *PEMRSETICMMODE;

/* 9220 */
typedef tagMIDIINCAPSA *NPMIDIINCAPSA;

/* 9221 */
typedef _CRYPTOAPI_BLOB *PCRYPT_UINT_BLOB;

/* 9222 */
typedef _AFPROTOCOLS *PAFPROTOCOLS;

/* 9223 */
typedef _PRINTER_OPTIONSW *LPPRINTER_OPTIONSW;

/* 9224 */
typedef __int64 curl_off_t;

/* 9225 */
typedef tagMIDIINCAPSA *LPMIDIINCAPSA;

/* 9226 */
typedef _CRL_REVOCATION_INFO *PCRL_REVOCATION_INFO;

/* 9227 */
typedef _VIDEOPARAMETERS *LPVIDEOPARAMETERS;

/* 9228 */
typedef addrinfoexA *LPADDRINFOEXA;

/* 9229 */
typedef RPC_ENDPOINT_TEMPLATEW *PRPC_ENDPOINT_TEMPLATEW;

/* 9230 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GPIOWRITETOPIN)(NvPhysicalGpuHandle__ *, NV_GPU_GPIO_PIN_DATA *);

/* 9231 */
typedef _CMC_DATA_INFO *PCMC_DATA_INFO;

/* 9232 */
typedef _WSANETWORKEVENTS *LPWSANETWORKEVENTS;

/* 9233 */
typedef _CRYPT_OID_FUNC_ENTRY *PCRYPT_OID_FUNC_ENTRY;

/* 9234 */
typedef _DEVICEDUMP_COLLECTION_TYPE *PDEVICEDUMP_COLLECTION_TYPE;

/* 9235 */
typedef int (__cdecl *MFENUMPROC)(HDC__ *, tagHANDLETABLE *, tagMETARECORD *, int, __int64);

/* 9236 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_QUERYTOPOLOGY)(_NV_VIO_TOPOLOGY *);

/* 9237 */
typedef void __cdecl worldAABBCollideCallback(void *, __int64);

/* 9238 */
typedef const wchar_t *LPCUWSTR;

/* 9239 */
typedef tagDEVNAMES *PCDEVNAMES;

/* 9240 */
typedef tagCWPSTRUCT *PCWPSTRUCT;

/* 9241 */
typedef _SOCKET_ADDRESS_LIST *PSOCKET_ADDRESS_LIST;

/* 9242 */
typedef PPM_IDLE_STATE_ACCOUNTING *PPPM_IDLE_STATE_ACCOUNTING;

/* 9243 */
typedef const char *LPCUTSTR;

/* 9244 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG;

/* 9245 */
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

/* 9246 */
typedef midiproptimediv_tag *LPMIDIPROPTIMEDIV;

/* 9247 */
typedef group_source_req *PGROUP_SOURCE_REQ;

/* 9248 */
typedef _CERT_SELECT_CRITERIA *PCERT_SELECT_CRITERIA;

/* 9249 */
typedef _PERF_COUNTER_DEFINITION *PPERF_COUNTER_DEFINITION;

/* 9250 */
typedef tagEMRPOLYLINE16 *PEMRPOLYGON16;

/* 9251 */
typedef void (__cdecl *upsample1_ptr)(jpeg_decompress_struct *, jpeg_component_info *, char **, char ***);

/* 9252 */
typedef PPM_WMI_IDLE_STATES_EX *PPPM_WMI_IDLE_STATES_EX;

/* 9253 */
typedef _SCRUB_DATA_INPUT *PSCRUB_DATA_INPUT;

/* 9254 */
typedef void **PDLL_DIRECTORY_COOKIE;

/* 9255 */
typedef _DRIVE_LAYOUT_INFORMATION_MBR *PDRIVE_LAYOUT_INFORMATION_MBR;

/* 9256 */
typedef addrinfoexW *LPADDRINFOEXW;

/* 9257 */
typedef ID3D11Buffer *GfxBufferHandle;

/* 9258 */
typedef RPC_ENDPOINT_TEMPLATEA *PRPC_ENDPOINT_TEMPLATEA;

/* 9259 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_FBC_CHECKSUPPORT)(unsigned int *, void *);

/* 9260 */
typedef unsigned int AccountID_t;

/* 9261 */
typedef unsigned __int64 hksUint64;

/* 9262 */
typedef my_prep_controller *my_prep_ptr;

/* 9263 */
typedef void (__cdecl *PFNWAITFORTHREADPOOLTIMERCALLBACKS)(_TP_TIMER *, int);

/* 9264 */
typedef unsigned int SERVICETYPE;

/* 9265 */
typedef void (__cdecl *LINEDDAPROC)(int, int, __int64);

/* 9266 */
typedef _SYSTEM_RESOURCE_ATTRIBUTE_ACE *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

/* 9267 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETNOTIFICATIONMESSAGE)(void *, unsigned __int64, unsigned __int64);

/* 9268 */
typedef dxBody *dBodyID;

/* 9269 */
typedef char xlspServerTag[20];

/* 9270 */
typedef _CRYPT_IMAGE_REF *PCRYPT_IMAGE_REF;

/* 9271 */
typedef _RPC_SECURITY_QOS *PRPC_SECURITY_QOS;

/* 9272 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTW *PMIXERCONTROLDETAILS_LISTTEXTW;

/* 9273 */
typedef _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW;

/* 9274 */
typedef addrinfoex2W *PADDRINFOEX2W;

/* 9275 */
typedef tagFONTSIGNATURE *PFONTSIGNATURE;

/* 9276 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYPORTINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_PORT_INFO *);

/* 9277 */
typedef unsigned __int16 GfxModelLightingHandle;

/* 9278 */
typedef int (__cdecl *INPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

/* 9279 */
typedef const char **PZPCSTR;

/* 9280 */
typedef _IP_ADDR_STRING *PIP_ADDR_STRING;

/* 9281 */
typedef _DATATYPES_INFO_1A *PDATATYPES_INFO_1A;

/* 9282 */
typedef _PRINTER_INFO_2A *LPPRINTER_INFO_2A;

/* 9283 */
typedef tagMCI_GENERIC_PARMS *LPMCI_GENERIC_PARMS;

/* 9284 */
typedef DRVCONFIGINFOEX *PDRVCONFIGINFOEX;

/* 9285 */
typedef int (__cdecl *DATEFMT_ENUMPROCA)(char *);

/* 9286 */
typedef _CORE_PRINTER_DRIVERA *PCORE_PRINTER_DRIVERA;

/* 9287 */
typedef void (__cdecl *NVAPI_CALLBACK_THERMALEVENT)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL, void *);

/* 9288 */
typedef IBindHost *LPBINDHOST;

/* 9289 */
typedef _TOKEN_TYPE *PTOKEN_TYPE;

/* 9290 */
typedef void (__cdecl *USER_MARSHAL_FREEING_ROUTINE)(unsigned int *, void *);

/* 9291 */
typedef addrinfoex2A *PADDRINFOEX2A;

/* 9292 */
typedef _ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

/* 9293 */
typedef HRESULT (__cdecl *PFNSHOWSHAREFOLDERUIW)(HWND__ *, const wchar_t *);

/* 9294 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETGPUTYPE)(NvPhysicalGpuHandle__ *, _NV_GPU_TYPE *);

/* 9295 */
typedef _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA;

/* 9296 */
typedef _CORE_PRINTER_DRIVERW *PCORE_PRINTER_DRIVERW;

/* 9297 */
typedef int (__cdecl *DATEFMT_ENUMPROCW)(wchar_t *);

/* 9298 */
typedef tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT;

/* 9299 */
typedef char FxGlassDefHandle;

/* 9300 */
typedef _PRINTER_INFO_2W *LPPRINTER_INFO_2W;

/* 9301 */
typedef OPENCARDNAMEA *LPOPENCARDNAME;

/* 9302 */
typedef _FILE_ID_BOTH_DIR_INFO *PFILE_ID_BOTH_DIR_INFO;

/* 9303 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_ENUMCUSTOMDISPLAY)(unsigned int, unsigned int, NV_CUSTOM_DISPLAY *);

/* 9304 */
typedef unsigned int *PUUCSSTR;

/* 9305 */
typedef _PRINTER_INFO_2A *PPRINTER_INFO_2A;

/* 9306 */
typedef char JOCTET;

/* 9307 */
typedef const wchar_t *LPCWCH;

/* 9308 */
typedef unsigned __int16 PROPVAR_PAD1;

/* 9309 */
typedef tagLAYERPLANEDESCRIPTOR *PLAYERPLANEDESCRIPTOR;

/* 9310 */
typedef tagSOUNDSENTRYA *LPSOUNDSENTRYA;

/* 9311 */
typedef _RTL_UMS_THREAD_INFO_CLASS *PUMS_THREAD_INFO_CLASS;

/* 9312 */
typedef unsigned int __cdecl QUERYHANDLER(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);

/* 9313 */
typedef _CRYPT_DES_KEY_STATE *PCRYPT_DES_KEY_STATE;

/* 9314 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTPCMASK)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 9315 */
typedef unsigned __int64 hash_t;

/* 9316 */
typedef unsigned int DiskStringRef;

/* 9317 */
typedef _SERVICE_TRIGGER *PSERVICE_TRIGGER;

/* 9318 */
typedef my_coef_controller *my_coef_ptr;

/* 9319 */
typedef int DISPID;

/* 9320 */
typedef _RPC_SECURITY_QOS_V3_W *PRPC_SECURITY_QOS_V3_W;

/* 9321 */
typedef unsigned __int16 GfxSceneLightEnvIndex;

/* 9322 */
typedef _RPC_SECURITY_QOS_V5_A *PRPC_SECURITY_QOS_V5_A;

/* 9323 */
typedef int (__cdecl *RPC_NEW_HTTP_PROXY_CHANNEL)(_RPC_HTTP_REDIRECTOR_STAGE, unsigned __int16 *, unsigned __int16 *, unsigned __int16 *, unsigned __int16 *, void *, void *, void *, void *, unsigned int, unsigned __int16 **, unsigned __int16 **);

/* 9324 */
typedef void **PHPOWERNOTIFY;

/* 9325 */
typedef char *PUCHAR;

/* 9326 */
typedef unsigned int _Uint32t;

/* 9327 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_REGISTERAPP)(IUnknown *, unsigned int);

/* 9328 */
typedef tagLOGFONTA *NPLOGFONT;

/* 9329 */
typedef tagLOGFONTA *LPLOGFONT;

/* 9330 */
typedef NTFS_VOLUME_DATA_BUFFER *PNTFS_VOLUME_DATA_BUFFER;

/* 9331 */
typedef tagRID_DEVICE_INFO_KEYBOARD *PRID_DEVICE_INFO_KEYBOARD;

/* 9332 */
typedef int (__cdecl *__cdecl dGetColliderFnFn(int))(dxGeom *, dxGeom *, int, dContactGeom *, int);

/* 9333 */
typedef _CHANGER_ELEMENT_STATUS_EX *PCHANGER_ELEMENT_STATUS_EX;

/* 9334 */
typedef tagEXTLOGPEN *LPEXTLOGPEN;

/* 9335 */
typedef _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;

/* 9336 */
typedef tagEXTLOGPEN *NPEXTLOGPEN;

/* 9337 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPARTITIONCOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 9338 */
typedef unsigned __int64 DWORDLONG;

/* 9339 */
typedef _PRINTER_INFO_1A *PPRINTER_INFO_1A;

/* 9340 */
typedef int (__cdecl *PFN_CMSG_STREAM_OUTPUT)(const void *, char *, unsigned int, int);

/* 9341 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_CAPTUREJPEGIMAGE)(void *, unsigned int);

/* 9342 */
typedef OPENCARDNAMEW *LPOPENCARDNAMEW;

/* 9343 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(void *, _CRL_CONTEXT *, unsigned int, unsigned int, const void *);

/* 9344 */
typedef _PRINTER_INFO_2A *LPPRINTER_INFO_2;

/* 9345 */
typedef char *reference;

/* 9346 */
typedef tagAUXCAPSA *LPAUXCAPSA;

/* 9347 */
typedef _CRL_DIST_POINT_NAME *PCRL_DIST_POINT_NAME;

/* 9348 */
typedef int (__cdecl *LOCALE_ENUMPROCA)(char *);

/* 9349 */
typedef _CORE_PRINTER_DRIVERA *PCORE_PRINTER_DRIVER;

/* 9350 */
typedef _WSABUF *LPWSABUF;

/* 9351 */
typedef tagAUXCAPSA *NPAUXCAPSA;

/* 9352 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVOLTAGES)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_VOLTAGES *);

/* 9353 */
typedef tagEMRCREATEDIBPATTERNBRUSHPT *PEMRCREATEDIBPATTERNBRUSHPT;

/* 9354 */
typedef _WOW64_DESCRIPTOR_TABLE_ENTRY *PWOW64_DESCRIPTOR_TABLE_ENTRY;

/* 9355 */
typedef _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;

/* 9356 */
typedef unsigned __int64 PublishedFileUpdateHandle_t;

/* 9357 */
typedef _CERT_CONTEXT *PCCERT_CONTEXT;

/* 9358 */
typedef unsigned __int64 scr_ptr_t;

/* 9359 */
typedef _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCT;

/* 9360 */
typedef _POWER_MONITOR_INVOCATION *PPOWER_MONITOR_INVOCATION;

/* 9361 */
typedef unsigned int (__cdecl *bdThreadProc)(void *);

/* 9362 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETBOARDINFO)(NvPhysicalGpuHandle__ *, _NV_BOARD_INFO *);

/* 9363 */
typedef _ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;

/* 9364 */
typedef _GROUP_RELATIONSHIP *PGROUP_RELATIONSHIP;

/* 9365 */
typedef OPENCARDNAMEA *LPOPENCARDNAMEA;

/* 9366 */
typedef char raw_byte4096;

/* 9367 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(void *, _CRL_CONTEXT *, unsigned int, unsigned int, void *, unsigned int *);

/* 9368 */
typedef tagMIXERCAPS2A *PMIXERCAPS2A;

/* 9369 */
typedef in6_pktinfo_ex *PIN6_PKTINFO_EX;

/* 9370 */
typedef _CERT_USAGE_MATCH *PCERT_USAGE_MATCH;

/* 9371 */
typedef _AFPROTOCOLS *LPAFPROTOCOLS;

/* 9372 */
typedef void (__cdecl *BandwidthTest_Callback_SendResultMsg)(BandwidthTestInput *, int, int, int);

/* 9373 */
typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;

/* 9374 */
typedef __int64 LPARAM;

/* 9375 */
typedef itemDef_t *itemDef_ptr;

/* 9376 */
typedef _ADDJOB_INFO_1A *LPADDJOB_INFO_1A;

/* 9377 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_ENUMDISPLAYMODES)(NV_MOSAIC_GRID_TOPO *, NV_MOSAIC_DISPLAY_SETTING *, unsigned int *);

/* 9378 */
typedef char FxElemType;

/* 9379 */
typedef char hksByte;

/* 9380 */
typedef const void *LPCVOID;

/* 9381 */
typedef unsigned int (__cdecl *PQUERYHANDLER)(void *, val_context *, unsigned int, void *, unsigned int *, unsigned int);

/* 9382 */
typedef pvalueA *PPVALUEA;

/* 9383 */
typedef wchar_t *PWCH;

/* 9384 */
typedef tagELEMDESC *LPELEMDESC;

/* 9385 */
typedef unsigned int __cdecl OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK(void *, void *, unsigned int *, _IMAGE_RUNTIME_FUNCTION_ENTRY **);

/* 9386 */
typedef int *LPINT;

/* 9387 */
typedef unsigned int flag_t;

/* 9388 */
typedef _SYSTEMTIME *LPSYSTEMTIME;

/* 9389 */
typedef void (__cdecl *PFNFLUSHPROCESSWRITEBUFFERS)();

/* 9390 */
typedef tagPAINTSTRUCT *NPPAINTSTRUCT;

/* 9391 */
typedef tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED;

/* 9392 */
typedef __int16 *JCOEFPTR;

/* 9393 */
typedef tagPAINTSTRUCT *LPPAINTSTRUCT;

/* 9394 */
typedef _DOC_INFO_3A *PDOC_INFO_3;

/* 9395 */
typedef unsigned int scr_objectIdArray_t[2048];

/* 9396 */
typedef IWinInetCacheHints2 *LPWININETCACHEHINTS2;

/* 9397 */
typedef _DOC_INFO_2A *PDOC_INFO_2;

/* 9398 */
typedef void *(__cdecl *PFN_CMSG_ALLOC)(unsigned __int64);

/* 9399 */
typedef _SERVICE_FAILURE_ACTIONS_FLAG *LPSERVICE_FAILURE_ACTIONS_FLAG;

/* 9400 */
typedef _DOC_INFO_1A *PDOC_INFO_1;

/* 9401 */
typedef unsigned __int64 WPARAM;

/* 9402 */
typedef unsigned int D3DFORMAT;

/* 9403 */
typedef _BCryptBuffer *PNCryptBuffer;

/* 9404 */
typedef __int64 _Q64;

/* 9405 */
typedef tagPOLYTEXTW *LPPOLYTEXTW;

/* 9406 */
typedef _PRINTER_INFO_7A *PPRINTER_INFO_7A;

/* 9407 */
typedef tagPOLYTEXTW *NPPOLYTEXTW;

/* 9408 */
typedef _OSVERSIONINFOA *LPOSVERSIONINFOA;

/* 9409 */
typedef SYSTEM_POWER_CAPABILITIES *PSYSTEM_POWER_CAPABILITIES;

/* 9410 */
typedef int INT32;

/* 9411 */
typedef int int32;

/* 9412 */
typedef tagMIDIINCAPS2A *LPMIDIINCAPS2A;

/* 9413 */
typedef tagMIDIINCAPS2A *NPMIDIINCAPS2A;

/* 9414 */
typedef _FILE_ID_INFO *PFILE_ID_INFO;

/* 9415 */
typedef tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDVA;

/* 9416 */
typedef _WSANAMESPACE_INFOEXA *LPWSANAMESPACE_INFOEX;

/* 9417 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA *LPSERVICE_REQUIRED_PRIVILEGES_INFO;

/* 9418 */
typedef tagWAVEINCAPSW *PWAVEINCAPSW;

/* 9419 */
typedef tagWAVEOUTCAPS2W *PWAVEOUTCAPS2W;

/* 9420 */
typedef ISurrogate *LPSURROGATE;

/* 9421 */
typedef _EXTENDED_ENCRYPTED_DATA_INFO *PEXTENDED_ENCRYPTED_DATA_INFO;

/* 9422 */
typedef _CREATE_DISK *PCREATE_DISK;

/* 9423 */
typedef _NETCONNECTINFOSTRUCT *LPNETCONNECTINFOSTRUCT;

/* 9424 */
typedef _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

/* 9425 */
typedef unsigned __int64 GfxImageFlagsArg;

/* 9426 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTPCIEDOWNSTREAMWIDTH)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 9427 */
typedef huff_entropy_decoder *huff_entropy_ptr;

/* 9428 */
typedef tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMS;

/* 9429 */
typedef unsigned int GEOCLASS;

/* 9430 */
typedef tagPOLYTEXTA *NPPOLYTEXTA;

/* 9431 */
typedef int (__cdecl *LPCONDITIONPROC)(_WSABUF *, _WSABUF *, _QualityOfService *, _QualityOfService *, _WSABUF *, _WSABUF *, unsigned int *, unsigned __int64);

/* 9432 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCMAPSURFACEBUFFER)(unsigned int *, unsigned int *, void *);

/* 9433 */
typedef void __cdecl XAssetEnum(XAssetHeader, void *);

/* 9434 */
typedef unsigned int IDirect3DVertexBuffer9;

/* 9435 */
typedef tagPOLYTEXTA *LPPOLYTEXTA;

/* 9436 */
typedef tagMIXERCAPSA *LPMIXERCAPSA;

/* 9437 */
typedef tagEMRSETTEXTCOLOR *PEMRSETBKCOLOR;

/* 9438 */
typedef bool (__cdecl *StateTransitionFunc)(RagdollBody *, BodyState, BodyState);

/* 9439 */
typedef void (__cdecl *StateUpdateFunc)(RagdollBody *);

/* 9440 */
typedef _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO;

/* 9441 */
typedef tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;

/* 9442 */
typedef value_entA *PVALENTA;

/* 9443 */
typedef tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMSA;

/* 9444 */
typedef tagEMRARC *PEMRPIE;

/* 9445 */
typedef _MONITOR_INFO_1W *LPMONITOR_INFO_1W;

/* 9446 */
typedef phuff_entropy_decoder *phuff_entropy_ptr;

/* 9447 */
typedef _UMS_SYSTEM_THREAD_INFORMATION *PUMS_SYSTEM_THREAD_INFORMATION;

/* 9448 */
typedef _ICONINFOEXA *PICONINFOEXA;

/* 9449 */
typedef tagAXESLISTW *LPAXESLISTW;

/* 9450 */
typedef _SHELLEXECUTEINFOW *LPSHELLEXECUTEINFOW;

/* 9451 */
typedef _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

/* 9452 */
typedef ip_mreq *PIP_MREQ;

/* 9453 */
typedef unsigned int UnOpr;

/* 9454 */
typedef unsigned int MMVERSION;

/* 9455 */
typedef tagRGBQUAD *LPRGBQUAD;

/* 9456 */
typedef int (__cdecl *pmove_getEntityWorldTagPosition)(LocalClientNum_t, int, scr_string_t, float *);

/* 9457 */
typedef const char *bdLPCTSTR;

/* 9458 */
typedef pcmwaveformat_tag *PPCMWAVEFORMAT;

/* 9459 */
typedef tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMSA;

/* 9460 */
typedef _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_ISSUER_PARA;

/* 9461 */
typedef _MONITOR_INFO_1A *LPMONITOR_INFO_1A;

/* 9462 */
typedef _CRYPT_KEY_VERIFY_MESSAGE_PARA *PCRYPT_KEY_VERIFY_MESSAGE_PARA;

/* 9463 */
typedef tagMCI_SYSINFO_PARMSW *PMCI_SYSINFO_PARMSW;

/* 9464 */
typedef void (__cdecl *ExecHandlerCallback)(LocalClientNum_t, int, const char *);

/* 9465 */
typedef ObjectVariableValue objectVariableValueArray_t[36864];

/* 9466 */
typedef _CERT_LOGOTYPE_IMAGE *PCERT_LOGOTYPE_IMAGE;

/* 9467 */
typedef tagIMECHARPOSITION *NPIMECHARPOSITION;

/* 9468 */
typedef _FSCTL_OFFLOAD_READ_OUTPUT *PFSCTL_OFFLOAD_READ_OUTPUT;

/* 9469 */
typedef addrinfoex2A *LPADDRINFOEX2A;

/* 9470 */
typedef _RTL_RUN_ONCE *PRTL_RUN_ONCE;

/* 9471 */
typedef unsigned __int64 uint_least64_t;

/* 9472 */
typedef tagSCROLLBARINFO *LPSCROLLBARINFO;

/* 9473 */
typedef tagIMECHARPOSITION *LPIMECHARPOSITION;

/* 9474 */
typedef void (__cdecl *CS_TYPE_NET_SIZE_ROUTINE)(void *, unsigned int, unsigned int, _IDL_CS_CONVERT *, unsigned int *, unsigned int *);

/* 9475 */
typedef _SYSTEM_ALARM_CALLBACK_OBJECT_ACE *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;

/* 9476 */
typedef _MENU_EVENT_RECORD *PMENU_EVENT_RECORD;

/* 9477 */
typedef tagAXESLISTA *LPAXESLISTA;

/* 9478 */
typedef _CERT_LOGOTYPE_EXT_INFO *PCERT_LOGOTYPE_EXT_INFO;

/* 9479 */
typedef unsigned int uint_fast32_t;

/* 9480 */
typedef _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFOA;

/* 9481 */
typedef unsigned __int16 bdUInt16;

/* 9482 */
typedef _STORAGE_ADAPTER_DESCRIPTOR *PSTORAGE_ADAPTER_DESCRIPTOR;

/* 9483 */
typedef IRecordInfo *LPRECORDINFO;

/* 9484 */
typedef _PRINTER_INFO_5A *PPRINTER_INFO_5A;

/* 9485 */
typedef tagMCI_OVLY_SAVE_PARMSW *PMCI_OVLY_SAVE_PARMSW;

/* 9486 */
typedef _MMCKINFO *NPMMCKINFO;

/* 9487 */
typedef _MMCKINFO *LPMMCKINFO;

/* 9488 */
typedef int (__cdecl *DESKTOPENUMPROC)(char *, __int64);

/* 9489 */
typedef unsigned int D3DPRESENT_PARAMETERS;

/* 9490 */
typedef int NTSTATUS;

/* 9491 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;

/* 9492 */
typedef int (__cdecl *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC)(unsigned __int64, unsigned int, char *, unsigned int, void *, _CERT_PUBLIC_KEY_INFO *, unsigned int *);

/* 9493 */
typedef void (__cdecl *PAPCFUNC)(unsigned __int64);

/* 9494 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DELETECONFIGURATIONPROFILEVALUE)(_NV_StereoRegistryProfileType, _NV_StereoRegistryID);

/* 9495 */
typedef _PROPSHEETPAGEW *LPCPROPSHEETPAGEW_LATEST;

/* 9496 */
typedef __int64 off_type;

/* 9497 */
typedef unsigned __int16 bdSeqNumber;

/* 9498 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_APPHANDSHAKE)(void *, _NVAPI_STEREO_HANDSHAKE_PARAMS *);

/* 9499 */
typedef ID3D11PixelShader *GfxPixelShader;

/* 9500 */
typedef _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

/* 9501 */
typedef __int64 (__cdecl *NEARPROC)();

/* 9502 */
typedef char *PBOOLEAN;

/* 9503 */
typedef int qboolean;

/* 9504 */
typedef tagRECT *LPCBORDERWIDTHS;

/* 9505 */
typedef _EXCEPTION_RECORD64 *PEXCEPTION_RECORD64;

/* 9506 */
typedef tagPOLYTEXTA *NPPOLYTEXT;

/* 9507 */
typedef unsigned __int64 SCARDCONTEXT;

/* 9508 */
typedef tagDIBSECTION *LPDIBSECTION;

/* 9509 */
typedef tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMSA;

/* 9510 */
typedef _OCSP_BASIC_REVOKED_INFO *POCSP_BASIC_REVOKED_INFO;

/* 9511 */
typedef tagPOLYTEXTA *LPPOLYTEXT;

/* 9512 */
typedef _DISK_LOGGING *PDISK_LOGGING;

/* 9513 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_DMA)(unsigned int *, _NVAPI_D3D9_DMA_PARAMS *);

/* 9514 */
typedef tagPOINTFX *LPPOINTFX;

/* 9515 */
typedef _HMAC_Info *PHMAC_INFO;

/* 9516 */
typedef _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

/* 9517 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ISENABLED)(char *);

/* 9518 */
typedef PPM_IDLE_ACCOUNTING_EX *PPPM_IDLE_ACCOUNTING_EX;

/* 9519 */
typedef _PROPSHEETPAGEA *LPCPROPSHEETPAGEA_LATEST;

/* 9520 */
typedef int (__cdecl *EDITWORDBREAKPROCA)(char *, int, int, int);

/* 9521 */
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOW *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

/* 9522 */
typedef tagCWPSTRUCT *NPCWPSTRUCT;

/* 9523 */
typedef void __cdecl PathNodeCallBack(pathnode_t *, void *);

/* 9524 */
typedef void *SC_LOCK;

/* 9525 */
typedef tagCWPSTRUCT *LPCWPSTRUCT;

/* 9526 */
typedef tagICONMETRICSW *LPICONMETRICSW;

/* 9527 */
typedef tagDRVCONFIGINFO *PDRVCONFIGINFO;

/* 9528 */
typedef _PRINTER_INFO_4A *PPRINTER_INFO_4A;

/* 9529 */
typedef _CERT_REVOCATION_INFO *PCERT_REVOCATION_INFO;

/* 9530 */
typedef void (__cdecl *innovation_unquant_func)(float *, const void *, int, SpeexBits *, char *);

/* 9531 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_OGL_EXPERTMODESET)(unsigned int, unsigned int, unsigned int, void (__cdecl *)(unsigned int, unsigned int, unsigned int, int, const char *));

/* 9532 */
typedef _CHANGER_ELEMENT *PCHANGER_ELEMENT;

/* 9533 */
typedef tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMS;

/* 9534 */
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;

/* 9535 */
typedef void (__cdecl *RPCLT_PDU_FILTER_FUNC)(void *, unsigned int, int);

/* 9536 */
typedef tagLOGPEN *PLOGPEN;

/* 9537 */
typedef unsigned int *PUUCSCHAR;

/* 9538 */
typedef _IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;

/* 9539 */
typedef _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;

/* 9540 */
typedef _GRADIENT_RECT *PGRADIENT_RECT;

/* 9541 */
typedef IDataFilter *LPDATAFILTER;

/* 9542 */
typedef IInternetPriority *LPIINTERNETPRIORITY;

/* 9543 */
typedef _CERT_LOGOTYPE_AUDIO_INFO *PCERT_LOGOTYPE_AUDIO_INFO;

/* 9544 */
typedef _MONITOR_INFO_1A *LPMONITOR_INFO_1;

/* 9545 */
typedef tagENUMUILANG *PENUMUILANG;

/* 9546 */
typedef tagACCESSTIMEOUT *LPACCESSTIMEOUT;

/* 9547 */
typedef _TOKEN_APPCONTAINER_INFORMATION *PTOKEN_APPCONTAINER_INFORMATION;

/* 9548 */
typedef unsigned __int16 histcell;

/* 9549 */
typedef _RemotableHandle *wireHFONT;

/* 9550 */
typedef POWER_USER_PRESENCE_TYPE *PPOWER_USER_PRESENCE_TYPE;

/* 9551 */
typedef _CMSG_SIGNER_INFO *PCMSG_SIGNER_INFO;

/* 9552 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETTIMINGINFO)(unsigned int, unsigned int *, NV_BACKEND_TIMING_INFO_V1 *);

/* 9553 */
typedef _PRINTPROCESSOR_CAPS_2 *PPRINTPROCESSOR_CAPS_2;

/* 9554 */
typedef int (__cdecl *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY)(_CMSG_CNG_CONTENT_DECRYPT_INFO *, unsigned int, void *);

/* 9555 */
typedef int ClientNum_t;

/* 9556 */
typedef _WOW64_LDT_ENTRY *PWOW64_LDT_ENTRY;

/* 9557 */
typedef tagEMRPOLYLINE16 *PEMRPOLYBEZIERTO16;

/* 9558 */
typedef _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR *PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR;

/* 9559 */
typedef _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;

/* 9560 */
typedef float spx_mem_t;

/* 9561 */
typedef NvVioHandle__ *NvVioHandle;

/* 9562 */
typedef unsigned int *LPUINT;

/* 9563 */
typedef _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFO;

/* 9564 */
typedef tagMCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;

/* 9565 */
typedef tagAXESLISTA *LPAXESLIST;

/* 9566 */
typedef _CRYPT_IMAGE_REG *PCRYPT_IMAGE_REG;

/* 9567 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETCURSORSEPARATION)(void *, float *);

/* 9568 */
typedef __int64 LONGLONG;

/* 9569 */
typedef _DOCINFOA *LPDOCINFOA;

/* 9570 */
typedef int (__cdecl *DRAWSTATEPROC)(HDC__ *, __int64, unsigned __int64, int, int);

/* 9571 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETDRIVERMODE)(_NV_StereoDriverMode);

/* 9572 */
typedef _MMCKINFO *LPCMMCKINFO;

/* 9573 */
typedef tagEMRPOLYLINE16 *PEMRPOLYBEZIER16;

/* 9574 */
typedef void *bdSemaphoreHandle;

/* 9575 */
typedef _DISK_CACHE_INFORMATION *PDISK_CACHE_INFORMATION;

/* 9576 */
typedef char bdByte8;

/* 9577 */
typedef _TOKEN_GROUPS_AND_PRIVILEGES *PTOKEN_GROUPS_AND_PRIVILEGES;

/* 9578 */
typedef char **PZPTSTR;

/* 9579 */
typedef _PRINTER_INFO_5A *LPPRINTER_INFO_5A;

/* 9580 */
typedef _CRYPT_DECODE_PARA *PCRYPT_DECODE_PARA;

/* 9581 */
typedef tagMCI_SEQ_SET_PARMS *PMCI_SEQ_SET_PARMS;

/* 9582 */
typedef _CTL_ANY_SUBJECT_INFO *PCTL_ANY_SUBJECT_INFO;

/* 9583 */
typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

/* 9584 */
typedef tagMSGBOXPARAMSA *LPMSGBOXPARAMSA;

/* 9585 */
typedef char *PTBYTE;

/* 9586 */
typedef HMIDI__ **LPHMIDI;

/* 9587 */
typedef _SCOPE_TABLE_AMD64 *PSCOPE_TABLE;

/* 9588 */
typedef _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALSA;

/* 9589 */
typedef _TRANSACTION_PROPERTIES_INFORMATION *PTRANSACTION_PROPERTIES_INFORMATION;

/* 9590 */
typedef sockaddr *LPSOCKADDR;

/* 9591 */
typedef _EFS_ENCRYPTION_STATUS_INFO *PEFS_ENCRYPTION_STATUS_INFO;

/* 9592 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_DELETECUSTOMDISPLAY)(unsigned int *, unsigned int, NV_CUSTOM_DISPLAY *);

/* 9593 */
typedef unsigned __int16 *PARAM_OFFSETTABLE;

/* 9594 */
typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;

/* 9595 */
typedef int (__cdecl *PFN_CMSG_EXPORT_KEY_AGREE)(_CMSG_CONTENT_ENCRYPT_INFO *, _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *, _CMSG_KEY_AGREE_ENCRYPT_INFO *, unsigned int, void *);

/* 9596 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERPOLICIESGETINFO)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_POLICIES_INFO_V1 *);

/* 9597 */
typedef char *PZZSTR;

/* 9598 */
typedef unsigned int perk_t[2];

/* 9599 */
typedef _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

/* 9600 */
typedef _TAPE_GET_POSITION *PTAPE_GET_POSITION;

/* 9601 */
typedef unsigned int (__cdecl *LPFNDEVMODE)(HWND__ *, HINSTANCE__ *, _devicemodeA *, char *, char *, _devicemodeA *, char *, unsigned int);

/* 9602 */
typedef tagMSGBOXPARAMSW *LPMSGBOXPARAMSW;

/* 9603 */
typedef _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER;

/* 9604 */
typedef tagCBT_CREATEWNDW *LPCBT_CREATEWNDW;

/* 9605 */
typedef int (__cdecl *PFN_EXPORT_PRIV_KEY_FUNC)(unsigned __int64, unsigned int, char *, unsigned int, void *, _CRYPT_PRIVATE_KEY_INFO *, unsigned int *);

/* 9606 */
typedef tagFUNCDESC *LPFUNCDESC;

/* 9607 */
typedef _PSP *HPROPSHEETPAGE;

/* 9608 */
typedef ObjectVariableChildren objectVariableChildrenArray_t[36864];

/* 9609 */
typedef _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

/* 9610 */
typedef _PRINTER_INFO_5W *LPPRINTER_INFO_5W;

/* 9611 */
typedef tagPOLYTEXTA *PPOLYTEXTA;

/* 9612 */
typedef unsigned __int16 ADDRESS_FAMILY;

/* 9613 */
typedef tagHANDLETABLE *PHANDLETABLE;

/* 9614 */
typedef tagLOGPEN *NPLOGPEN;

/* 9615 */
typedef tagLOGPEN *LPLOGPEN;

/* 9616 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETHDMISUPPORTINFO)(NvDisplayHandle__ *, unsigned int, NV_HDMI_SUPPORT_INFO *);

/* 9617 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEVIDEOEND)(unsigned int *);

/* 9618 */
typedef float dMatrix3[12];

/* 9619 */
typedef unsigned __int64 sortkey_t;

/* 9620 */
typedef _GET_DISK_ATTRIBUTES *PGET_DISK_ATTRIBUTES;

/* 9621 */
typedef _PROPSHEETHEADERA_V2 *LPPROPSHEETHEADERA;

/* 9622 */
typedef int (__cdecl *WNDENUMPROC)(HWND__ *, __int64);

/* 9623 */
typedef _FORM_INFO_1A *PFORM_INFO_1;

/* 9624 */
typedef _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;

/* 9625 */
typedef _STARTUPINFOEXA *LPSTARTUPINFOEX;

/* 9626 */
typedef HWAVEIN__ *HWAVEIN;

/* 9627 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_WRITE_CERT)(void *, _CERT_CONTEXT *, unsigned int);

/* 9628 */
typedef unsigned int (__cdecl *LPFNPSPCALLBACKA)(HWND__ *, unsigned int, _PROPSHEETPAGEA *);

/* 9629 */
typedef int (__cdecl *PGENRANDOM)(void *, unsigned int);

/* 9630 */
typedef tagSTICKYKEYS *LPSTICKYKEYS;

/* 9631 */
typedef _DEVICE_DSM_NOTIFICATION_PARAMETERS *PDEVICE_DSM_NOTIFICATION_PARAMETERS;

/* 9632 */
typedef _CERT_LOGOTYPE_DETAILS *PCERT_LOGOTYPE_DETAILS;

/* 9633 */
typedef tagLOGFONTW *LPLOGFONTW;

/* 9634 */
typedef _HTTPSPolicyCallbackData *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;

/* 9635 */
typedef tagLOGFONTA *PLOGFONT;

/* 9636 */
typedef Colorization *ColorizationPtr;

/* 9637 */
typedef _RPC_SECURITY_QOS_V4_W *PRPC_SECURITY_QOS_V4_W;

/* 9638 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETVIDEOCAPABILITIES)(unsigned int *, _NV_DX_VIDEO_CAPS *);

/* 9639 */
typedef tagLOGFONTW *NPLOGFONTW;

/* 9640 */
typedef _CERT_REQUEST_INFO *PCERT_REQUEST_INFO;

/* 9641 */
typedef _RPC_SECURITY_QOS_V2_A *PRPC_SECURITY_QOS_V2_A;

/* 9642 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_GETSECUREAUDIOAPIREVISION)(unsigned int *);

/* 9643 */
typedef _STORAGE_OFFLOAD_TOKEN *PSTORAGE_OFFLOAD_TOKEN;

/* 9644 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETPIXELSHADERCONSTANTB)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 9645 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETPIXELSHADERCONSTANTF)(void *, unsigned int, float *, float *, float *, unsigned int);

/* 9646 */
typedef dxSpace *dSpaceID;

/* 9647 */
typedef unsigned int raw_uint;

/* 9648 */
typedef tagEMRSETWORLDTRANSFORM *PEMRSETWORLDTRANSFORM;

/* 9649 */
typedef _CTL_FIND_SUBJECT_PARA *PCTL_FIND_SUBJECT_PARA;

/* 9650 */
typedef int (__cdecl *RPC_BLOCKING_FN)(void *, void *, void *);

/* 9651 */
typedef _STORAGE_PORT_CODE_SET *PSTORAGE_PORT_CODE_SET;

/* 9652 */
typedef USN_JOURNAL_DATA_V0 *PUSN_JOURNAL_DATA_V0;

/* 9653 */
typedef void *bdFileHandle;

/* 9654 */
typedef _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;

/* 9655 */
typedef char stbi_uc;

/* 9656 */
typedef unsigned int (__cdecl *GetAdaptersInfo_t)(_IP_ADAPTER_INFO *, unsigned int *);

/* 9657 */
typedef int (__cdecl *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(_CRYPT_PRIVATE_KEY_INFO *, unsigned __int64 *, void *);

/* 9658 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETACTIVEEYE)(void *, _NV_StereoActiveEye);

/* 9659 */
typedef _PRINTER_INFO_5A *LPPRINTER_INFO_5;

/* 9660 */
typedef _IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;

/* 9661 */
typedef _PRINTER_INFO_9W *PPRINTER_INFO_9W;

/* 9662 */
typedef _POWER_REQUEST_TYPE *PPOWER_REQUEST_TYPE;

/* 9663 */
typedef int (__cdecl *pmove_getEntityOrigin)(LocalClientNum_t, int, float *);

/* 9664 */
typedef _OSVERSIONINFOEXW *PRTL_OSVERSIONINFOEXW;

/* 9665 */
typedef tagMSGBOXPARAMSA *LPMSGBOXPARAMS;

/* 9666 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *(__cdecl *PGET_RUNTIME_FUNCTION_CALLBACK)(unsigned __int64, void *);

/* 9667 */
typedef __int64 *PLONGLONG;

/* 9668 */
typedef tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT;

/* 9669 */
typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;

/* 9670 */
typedef void *(__cdecl *curl_realloc_callback)(void *, unsigned __int64);

/* 9671 */
typedef _CRYPT_OID_INFO *PCRYPT_OID_INFO;

/* 9672 */
typedef tWAVEFORMATEX *NPWAVEFORMATEX;

/* 9673 */
typedef unsigned __int64 ULONGLONG;

/* 9674 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_TRANSFERRENDERTARGETTONV12BLVIDEOSURFACE)(IUnknown *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);

/* 9675 */
typedef tWAVEFORMATEX *LPWAVEFORMATEX;

/* 9676 */
typedef _AppBarData *PAPPBARDATA;

/* 9677 */
typedef void (__cdecl *_purecall_handler)();

/* 9678 */
typedef float raw_float;

/* 9679 */
typedef _CLUSTER_RANGE *PCLUSTER_RANGE;

/* 9680 */
typedef _FILESYSTEM_STATISTICS *PFILESYSTEM_STATISTICS;

/* 9681 */
typedef void *(__cdecl *PFNFLSGETVALUE)(unsigned int);

/* 9682 */
typedef _SID_AND_ATTRIBUTES (*PSID_AND_ATTRIBUTES_ARRAY)[1];

/* 9683 */
typedef __int64 _Longlong;

/* 9684 */
typedef _WIN32_MEMORY_RANGE_ENTRY *PWIN32_MEMORY_RANGE_ENTRY;

/* 9685 */
typedef int (__cdecl *CALINFO_ENUMPROCA)(char *);

/* 9686 */
typedef _TRANSACTION_BASIC_INFORMATION *PTRANSACTION_BASIC_INFORMATION;

/* 9687 */
typedef tagEVENTMSG *NPEVENTMSG;

/* 9688 */
typedef my_post_controller *my_post_ptr;

/* 9689 */
typedef _CRYPT_SMART_CARD_ROOT_INFO *PCRYPT_SMART_CARD_ROOT_INFO;

/* 9690 */
typedef tagMSG *PMSG;

/* 9691 */
typedef _GUID *LPIID;

/* 9692 */
typedef tagLOGFONTW *PLOGFONTW;

/* 9693 */
typedef tagEVENTMSG *LPEVENTMSG;

/* 9694 */
typedef __int64 streamsize;

/* 9695 */
typedef _RemotableHandle *wireHACCEL;

/* 9696 */
typedef hks::dlmalloc::malloc_segment *msegmentptr;

/* 9697 */
typedef ip_msfilter *PIP_MSFILTER;

/* 9698 */
typedef _NUMA_NODE_RELATIONSHIP *PNUMA_NODE_RELATIONSHIP;

/* 9699 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETINDEXBUFFERHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 9700 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVOLTAGEDOMAINSINFO)(NvPhysicalGpuHandle__ *, _NV_GPU_VOLTAGE_DOMAINS_INFO_V1 *);

/* 9701 */
typedef HMIDIIN__ **LPHMIDIIN;

/* 9702 */
typedef _FORM_INFO_1A *PFORM_INFO_1A;

/* 9703 */
typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

/* 9704 */
typedef HMIDI__ *HMIDI;

/* 9705 */
typedef unsigned __int64 HANDLE_PTR;

/* 9706 */
typedef _KCRM_MARSHAL_HEADER *PKCRM_MARSHAL_HEADER;

/* 9707 */
typedef _TRANSACTIONMANAGER_BASIC_INFORMATION *PTRANSACTIONMANAGER_BASIC_INFORMATION;

/* 9708 */
typedef _CHANGER_SET_ACCESS *PCHANGER_SET_ACCESS;

/* 9709 */
typedef tagMCI_ANIM_STEP_PARMS *LPMCI_ANIM_STEP_PARMS;

/* 9710 */
typedef char *LPCH;

/* 9711 */
typedef _PRINTER_INFO_8W *PPRINTER_INFO_8W;

/* 9712 */
typedef int bdInt32;

/* 9713 */
typedef void (__cdecl *ScriptCallbackSentient)(sentient_s *, sentient_fields_s *);

/* 9714 */
typedef _CMC_TAGGED_ATTRIBUTE *PCMC_TAGGED_ATTRIBUTE;

/* 9715 */
typedef float FxColor;

/* 9716 */
typedef _CRL_DIST_POINTS_INFO *PCRL_DIST_POINTS_INFO;

/* 9717 */
typedef _CREATEFILE2_EXTENDED_PARAMETERS *LPCREATEFILE2_EXTENDED_PARAMETERS;

/* 9718 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETDISPLAYIDFROMGPUANDOUTPUTID)(NvPhysicalGpuHandle__ *, unsigned int, unsigned int *);

/* 9719 */
typedef _WINDOW_BUFFER_SIZE_RECORD *PWINDOW_BUFFER_SIZE_RECORD;

/* 9720 */
typedef _WSAQuerySetA *LPWSAQUERYSETA;

/* 9721 */
typedef tagLOGFONTA *PLOGFONTA;

/* 9722 */
typedef _PREVENT_MEDIA_REMOVAL *PPREVENT_MEDIA_REMOVAL;

/* 9723 */
typedef tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE;

/* 9724 */
typedef NTFS_EXTENDED_VOLUME_DATA *PNTFS_EXTENDED_VOLUME_DATA;

/* 9725 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPSTATESINFOEX)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_PSTATES_INFO_V2 *, unsigned int);

/* 9726 */
typedef int (__cdecl *CALINFO_ENUMPROCW)(wchar_t *);

/* 9727 */
typedef void **PHDEVNOTIFY;

/* 9728 */
typedef _CMSG_KEY_AGREE_ENCRYPT_INFO *PCMSG_KEY_AGREE_ENCRYPT_INFO;

/* 9729 */
typedef _EV_EXTRA_CERT_CHAIN_POLICY_PARA *PEV_EXTRA_CERT_CHAIN_POLICY_PARA;

/* 9730 */
typedef _EFS_DECRYPTION_STATUS_INFO *PEFS_DECRYPTION_STATUS_INFO;

/* 9731 */
typedef void (__cdecl *PFNCLOSETHREADPOOLTIMER)(_TP_TIMER *);

/* 9732 */
typedef tagSIZE *PSIZE;

/* 9733 */
typedef unsigned int SECURITY_INFORMATION;

/* 9734 */
typedef _FORM_INFO_1W *PFORM_INFO_1W;

/* 9735 */
typedef __int16 mask;

/* 9736 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_I2CREAD)(NvPhysicalGpuHandle__ *, NV_I2C_INFO_V3 *);

/* 9737 */
typedef void *(__cdecl *bdReallocateFunc)(void *, const unsigned __int64);

/* 9738 */
typedef tagWAVEOUTCAPS2A *PWAVEOUTCAPS2;

/* 9739 */
typedef _WSANAMESPACE_INFOEXW *LPWSANAMESPACE_INFOEXW;

/* 9740 */
typedef _CRYPT_AES_128_KEY_STATE *PCRYPT_AES_128_KEY_STATE;

/* 9741 */
typedef void *HGLOBAL;

/* 9742 */
typedef IDropSource *LPDROPSOURCE;

/* 9743 */
typedef void **LPHANDLE;

/* 9744 */
typedef char byte16;

/* 9745 */
typedef NVDX_ObjectHandle__ *NVDX_ObjectHandle;

/* 9746 */
typedef void (__cdecl *innovation_quant_func)(float *, float *, float *, float *, const void *, int, int, float *, float *, SpeexBits *, char *, int, int);

/* 9747 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPSTATECLIENTLIMITS)(NvPhysicalGpuHandle__ *, _NV_PERF_PSTATE_CLIENT_LIMIT_ID, _NV_GPU_PERF_PSTATE_ID);

/* 9748 */
typedef tagFONTSIGNATURE *LPFONTSIGNATURE;

/* 9749 */
typedef void *HCRYPTDEFAULTCONTEXT;

/* 9750 */
typedef _IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;

/* 9751 */
typedef void *BCRYPT_ALG_HANDLE;

/* 9752 */
typedef unsigned __int16 wint_t;

/* 9753 */
typedef float alignCompBufFloat_t;

/* 9754 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPSTATESINFO)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_PSTATES_INFO_V2 *);

/* 9755 */
typedef unsigned int (__cdecl *DRIVERMSGPROC)(unsigned int, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 9756 */
typedef CREATE_USN_JOURNAL_DATA *PCREATE_USN_JOURNAL_DATA;

/* 9757 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_CREATEDEVICEANDSWAPCHAIN)(unsigned int *, unsigned int, HINSTANCE__ *, unsigned int, const unsigned int *, unsigned int, unsigned int, const unsigned int *, unsigned int **, unsigned int **, unsigned int *, unsigned int **, NVAPI_DEVICE_FEATURE_LEVEL *);

/* 9758 */
typedef _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;

/* 9759 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_CREATEDEVICEANDSWAPCHAIN)(unsigned int *, unsigned int, HINSTANCE__ *, unsigned int, unsigned int, unsigned int, unsigned int *, unsigned int **, unsigned int **, NVAPI_DEVICE_FEATURE_LEVEL *);

/* 9760 */
typedef tagEMRARC *PEMRARCTO;

/* 9761 */
typedef unsigned int GfxBlendStateBits[1];

/* 9762 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPSTATECLIENTLIMITS)(NvPhysicalGpuHandle__ *, _NV_PERF_PSTATE_CLIENT_LIMIT_ID, _NV_GPU_PERF_PSTATE_ID *);

/* 9763 */
typedef tagWAVEOUTCAPSA *PWAVEOUTCAPS;

/* 9764 */
typedef int (__cdecl *PGET_MODULE_HANDLE_EXW)(unsigned int, const wchar_t *, HINSTANCE__ **);

/* 9765 */
typedef _CMC_TAGGED_CONTENT_INFO *PCMC_TAGGED_CONTENT_INFO;

/* 9766 */
typedef _WOW64_CONTEXT *PWOW64_CONTEXT;

/* 9767 */
typedef _SHCREATEPROCESSINFOW *PSHCREATEPROCESSINFOW;

/* 9768 */
typedef tagDRVCONFIGINFO *LPDRVCONFIGINFO;

/* 9769 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETREFRESHRATEOVERRIDE)(NvDisplayHandle__ *, unsigned int, float, unsigned int);

/* 9770 */
typedef tagEXTLOGFONTA *LPEXTLOGFONT;

/* 9771 */
typedef tagDRVCONFIGINFO *NPDRVCONFIGINFO;

/* 9772 */
typedef _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO;

/* 9773 */
typedef void **SPHANDLE;

/* 9774 */
typedef tagEXTLOGFONTA *NPEXTLOGFONT;

/* 9775 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPSTATESINFO)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_PSTATES_INFO_V2 *);

/* 9776 */
typedef unsigned int __cdecl PM_CLOSE_PROC();

/* 9777 */
typedef void (__cdecl *NVAPI_OGLEXPERT_CALLBACK)(unsigned int, unsigned int, unsigned int, int, const char *);

/* 9778 */
typedef _OSVERSIONINFOW *PRTL_OSVERSIONINFOW;

/* 9779 */
typedef _DEVICEDUMP_SUBSECTION_POINTER *PDEVICEDUMP_SUBSECTION_POINTER;

/* 9780 */
typedef _CRYPTOAPI_BLOB *PCERT_BLOB;

/* 9781 */
typedef void *(__cdecl *PFNCREATESEMAPHOREEXW)(_SECURITY_ATTRIBUTES *, int, int, const wchar_t *, unsigned int, unsigned int);

/* 9782 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DEBUG_WASLASTDRAWSTEREOIZED)(void *, char *);

/* 9783 */
typedef tagEMRSELECTOBJECT *PEMRDELETEOBJECT;

/* 9784 */
typedef unsigned int PEN_FLAGS;

/* 9785 */
typedef __int16 Short3[3];

/* 9786 */
typedef tagGLYPHSET *PGLYPHSET;

/* 9787 */
typedef void (__cdecl *RPC_DISPATCH_FUNCTION)(_RPC_MESSAGE *);

/* 9788 */
typedef _OCSP_CERT_ID *POCSP_CERT_ID;

/* 9789 */
typedef _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;

/* 9790 */
typedef _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;

/* 9791 */
typedef IWinInetInfo *LPWININETINFO;

/* 9792 */
typedef _SHFILEOPSTRUCTW *LPSHFILEOPSTRUCTW;

/* 9793 */
typedef void *PVOID64;

/* 9794 */
typedef unsigned int HashIndex;

/* 9795 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DEACTIVATE)(void *);

/* 9796 */
typedef void (__cdecl *fn_controller)(gentity_s *, int *);

/* 9797 */
typedef _OUTLINETEXTMETRICA *POUTLINETEXTMETRIC;

/* 9798 */
typedef _SE_ACCESS_REPLY *PSE_ACCESS_REPLY;

/* 9799 */
typedef tagEXCEPINFO *LPEXCEPINFO;

/* 9800 */
typedef _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUSA;

/* 9801 */
typedef ipv6_mreq *PIPV6_MREQ;

/* 9802 */
typedef _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;

/* 9803 */
typedef unsigned int ACCESS_REASON;

/* 9804 */
typedef void (__cdecl *TIMERPROC)(HWND__ *, unsigned int, unsigned __int64, unsigned int);

/* 9805 */
typedef LIST_ENTRY64 *PLIST_ENTRY64;

/* 9806 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_LOADSETTINGSFROMFILE)(NvDRSSessionHandle__ *, unsigned __int16 *);

/* 9807 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_OPEN)(NvVioHandle__ *, unsigned int, _NVVIOOWNERTYPE);

/* 9808 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_CLOSE)(NvVioHandle__ *, unsigned int);

/* 9809 */
typedef _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCTA;

/* 9810 */
typedef OPENCARD_SEARCH_CRITERIAA *LPOPENCARD_SEARCH_CRITERIA;

/* 9811 */
typedef unsigned int GfxBackendStateBits[3];

/* 9812 */
typedef int bdDNSHandle;

/* 9813 */
typedef unsigned int POINTER_INPUT_TYPE;

/* 9814 */
typedef tagEMREXTCREATEPEN *PEMREXTCREATEPEN;

/* 9815 */
typedef tagEMRCREATEPALETTE *PEMRCREATEPALETTE;

/* 9816 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_ENUMGRIDTOPOLOGIES)(unsigned int, unsigned int, NV_MOSAIC_GRID_TOPO *, char *);

/* 9817 */
typedef tagWAVEOUTCAPSW *PWAVEOUTCAPSW;

/* 9818 */
typedef FxEffectDef *FxEffectDefHandle;

/* 9819 */
typedef void (__cdecl *VehicleScriptFieldCallBack)(Vehicle *, VehicleScriptField *);

/* 9820 */
typedef jpeg_decompress_struct *j_decompress_ptr;

/* 9821 */
typedef _KCRM_MARSHAL_HEADER *PRKCRM_MARSHAL_HEADER;

/* 9822 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETALLCLOCKFREQUENCIES)(NvPhysicalGpuHandle__ *, NV_GPU_CLOCK_FREQUENCIES_V2 *);

/* 9823 */
typedef __int64 *PINT64;

/* 9824 */
typedef my_marker_reader *my_marker_ptr;

/* 9825 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_GETTHERMALLIMIT)(_NV_GPS_GET_THERMAL_LIMIT_PARM *);

/* 9826 */
typedef unsigned __int64 uint64;

/* 9827 */
typedef unsigned __int64 UINT64;

/* 9828 */
typedef tagEXTLOGFONTW *NPEXTLOGFONTW;

/* 9829 */
typedef tagWAVEINCAPS2A *LPWAVEINCAPS2A;

/* 9830 */
typedef IMultiQI *LPMULTIQI;

/* 9831 */
typedef tagEXTLOGFONTW *LPEXTLOGFONTW;

/* 9832 */
typedef tagWAVEINCAPS2A *NPWAVEINCAPS2A;

/* 9833 */
typedef _CREATE_DISK_MBR *PCREATE_DISK_MBR;

/* 9834 */
typedef _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS;

/* 9835 */
typedef jvirt_barray_control *jvirt_barray_ptr;

/* 9836 */
typedef unsigned __int16 LeafBrush;

/* 9837 */
typedef tagWAVEOUTCAPSA *PWAVEOUTCAPSA;

/* 9838 */
typedef tagNMHDR *LPNMHDR;

/* 9839 */
typedef tagWINDOWINFO *LPWINDOWINFO;

/* 9840 */
typedef _ENCRYPTION_CERTIFICATE_HASH_LIST *PENCRYPTION_CERTIFICATE_HASH_LIST;

/* 9841 */
typedef _IDEREGS *LPIDEREGS;

/* 9842 */
typedef tagHARDWAREINPUT *LPHARDWAREINPUT;

/* 9843 */
typedef tagEXTLOGFONTA *LPEXTLOGFONTA;

/* 9844 */
typedef unsigned __int16 nodeType_t;

/* 9845 */
typedef db_z_stream_s *db_z_streamp;

/* 9846 */
typedef tagNEWTEXTMETRICA *LPNEWTEXTMETRIC;

/* 9847 */
typedef tagEXTLOGFONTA *NPEXTLOGFONTA;

/* 9848 */
typedef tagNEWTEXTMETRICA *NPNEWTEXTMETRIC;

/* 9849 */
typedef joyinfo_tag *LPJOYINFO;

/* 9850 */
typedef _PRINTER_OPTIONSA *LPPRINTER_OPTIONSA;

/* 9851 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_QUERYSWAPGROUP)(IUnknown *, unsigned int *, unsigned int *, unsigned int *);

/* 9852 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_SETTHERMALLIMIT)(_NV_GPS_SET_THERMAL_LIMIT_PARM *);

/* 9853 */
typedef _CRYPT_RSAES_OAEP_PARAMETERS *PCRYPT_RSAES_OAEP_PARAMETERS;

/* 9854 */
typedef const wchar_t *PCUNZWCH;

/* 9855 */
typedef joyinfo_tag *NPJOYINFO;

/* 9856 */
typedef _STORAGE_IDENTIFIER *PSTORAGE_IDENTIFIER;

/* 9857 */
typedef IErrorInfo *LPERRORINFO;

/* 9858 */
typedef void (__cdecl *scriptableDamageEventCallback)(ScriptableEventParams *);

/* 9859 */
typedef _CONSOLE_SCREEN_BUFFER_INFO *PCONSOLE_SCREEN_BUFFER_INFO;

/* 9860 */
typedef _BIDI_REQUEST_DATA *LPBIDI_REQUEST_DATA;

/* 9861 */
typedef _OUTLINETEXTMETRICW *POUTLINETEXTMETRICW;

/* 9862 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETCONVERGENCE)(void *, float);

/* 9863 */
typedef _SCARD_IO_REQUEST *LPSCARD_IO_REQUEST;

/* 9864 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUBASEDCPUSLEEP)(unsigned int *, unsigned __int64);

/* 9865 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_TRIGGER_ACTIVATION)(void *);

/* 9866 */
typedef tagICONMETRICSA *LPICONMETRICS;

/* 9867 */
typedef _OFSTRUCT *LPOFSTRUCT;

/* 9868 */
typedef _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;

/* 9869 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_SETDISPLAYCONFIG)(unsigned int, _NV_DISPLAYCONFIG_PATH_INFO *, unsigned int);

/* 9870 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_SETHCLONETOPOLOGY)(NV_HCLONE_TOPOLOGY_V1 *);

/* 9871 */
typedef OPENCARD_SEARCH_CRITERIAW *LPOPENCARD_SEARCH_CRITERIAW;

/* 9872 */
typedef unsigned __int16 ATOM;

/* 9873 */
typedef char __static_assert_t[1];

/* 9874 */
typedef _FILE_SET_SPARSE_BUFFER *PFILE_SET_SPARSE_BUFFER;

/* 9875 */
typedef void *raw_ptr;

/* 9876 */
typedef _CSV_QUERY_REDIRECT_STATE *PCSV_QUERY_REDIRECT_STATE;

/* 9877 */
typedef _OUTLINETEXTMETRICA *POUTLINETEXTMETRICA;

/* 9878 */
typedef _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PKCS8_IMPORT_PARAMS;

/* 9879 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETSURFACEHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 9880 */
typedef _DEVICEDUMP_RESTRICTED_SUBSECTION *PDEVICEDUMP_RESTRICTED_SUBSECTION;

/* 9881 */
typedef unsigned int (__cdecl *scriptableAreaScriptables)(ScriptableContext, Bounds *, unsigned int *, unsigned int);

/* 9882 */
typedef int (__cdecl *PFNENUMSYSTEMLOCALESEX)(int (__cdecl *)(unsigned __int16 *, unsigned int, __int64), unsigned int, __int64, void *);

/* 9883 */
typedef _CSADDR_INFO *PCSADDR_INFO;

/* 9884 */
typedef _DSBCAPS *LPDSBCAPS;

/* 9885 */
typedef _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCT;

/* 9886 */
typedef OPENCARD_SEARCH_CRITERIAA *LPOPENCARD_SEARCH_CRITERIAA;

/* 9887 */
typedef _DSCCAPS *LPDSCCAPS;

/* 9888 */
typedef tagEMRCREATEMONOBRUSH *PEMRCREATEMONOBRUSH;

/* 9889 */
typedef _CMSG_RECIPIENT_ENCODE_INFO *PCMSG_RECIPIENT_ENCODE_INFO;

/* 9890 */
typedef threadmbcinfostruct *pthreadmbcinfo;

/* 9891 */
typedef _SD_QUERY_STATS_OUTPUT *PSD_QUERY_STATS_OUTPUT;

/* 9892 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXTA;

/* 9893 */
typedef __int64 (__cdecl *LPMMIOPROC)(char *, unsigned int, __int64, __int64);

/* 9894 */
typedef void (__cdecl *ScriptCallbackNode)(pathnode_t *, int);

/* 9895 */
typedef _CRYPT_SMIME_CAPABILITY *PCRYPT_SMIME_CAPABILITY;

/* 9896 */
typedef _TXFS_SAVEPOINT_INFORMATION *PTXFS_SAVEPOINT_INFORMATION;

/* 9897 */
typedef tagDEBUGHOOKINFO *LPDEBUGHOOKINFO;

/* 9898 */
typedef _CRYPT_ENCODE_PARA *PCRYPT_ENCODE_PARA;

/* 9899 */
typedef _GETVERSIONINPARAMS *LPGETVERSIONINPARAMS;

/* 9900 */
typedef unsigned int (__cdecl *PGET_SYSTEM_WOW64_DIRECTORY_W)(wchar_t *, unsigned int);

/* 9901 */
typedef tagDEBUGHOOKINFO *NPDEBUGHOOKINFO;

/* 9902 */
typedef tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

/* 9903 */
typedef unsigned __int64 (__cdecl *LPSETUPHOOKPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 9904 */
typedef _POWER_SESSION_WINLOGON *PPOWER_SESSION_WINLOGON;

/* 9905 */
typedef tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED;

/* 9906 */
typedef _DOCINFOA *LPDOCINFO;

/* 9907 */
typedef _EFS_RPC_BLOB *PEFS_RPC_BLOB;

/* 9908 */
typedef z_stream_s *z_streamp;

/* 9909 */
typedef _PRINTER_INFO_4A *LPPRINTER_INFO_4A;

/* 9910 */
typedef HDROP__ *HDROP;

/* 9911 */
typedef _NOTIFYICONDATAA *PNOTIFYICONDATA;

/* 9912 */
typedef _DATATYPES_INFO_1W *PDATATYPES_INFO_1W;

/* 9913 */
typedef unsigned int NVVIOOWNERID;

/* 9914 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETGAMUTDATA)(unsigned int *, unsigned int, _NV_GAMUT_FORMAT, _NV_GAMUT_METADATA *);

/* 9915 */
typedef _CERT_SYSTEM_STORE_RELOCATE_PARA *PCERT_SYSTEM_STORE_RELOCATE_PARA;

/* 9916 */
typedef _CONSOLE_FONT_INFOEX *PCONSOLE_FONT_INFOEX;

/* 9917 */
typedef __int64 PhysJointId;

/* 9918 */
typedef tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMS;

/* 9919 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_DELETE_CTL)(void *, _CTL_CONTEXT *, unsigned int);

/* 9920 */
typedef DIPROPHEADER *LPDIPROPHEADER;

/* 9921 */
typedef tagPALETTEENTRY *LPPALETTEENTRY;

/* 9922 */
typedef tagPOLYTEXTA *PPOLYTEXT;

/* 9923 */
typedef setloc_struct *_psetloc_struct;

/* 9924 */
typedef _CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;

/* 9925 */
typedef unsigned int (__cdecl *PGET_SYSTEM_WOW64_DIRECTORY_A)(char *, unsigned int);

/* 9926 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_DELETE_CRL)(void *, _CRL_CONTEXT *, unsigned int);

/* 9927 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETSUPPORTEDMOSAICTOPOLOGIES)(NV_MOSAIC_SUPPORTED_TOPOLOGIES *);

/* 9928 */
typedef mmtime_tag *NPMMTIME;

/* 9929 */
typedef char max_msg_buf_char[131072];

/* 9930 */
typedef _SD_ENUM_SDS_OUTPUT *PSD_ENUM_SDS_OUTPUT;

/* 9931 */
typedef mmtime_tag *LPMMTIME;

/* 9932 */
typedef _TAPE_STATISTICS *PTAPE_STATISTICS;

/* 9933 */
typedef _WRITE_USN_REASON_INPUT *PWRITE_USN_REASON_INPUT;

/* 9934 */
typedef _CLAIM_SECURITY_ATTRIBUTE_V1 *PCLAIM_SECURITY_ATTRIBUTE_V1;

/* 9935 */
typedef _PRINTER_INFO_4W *LPPRINTER_INFO_4W;

/* 9936 */
typedef ID3D11Buffer *GfxConstantBufferHandle;

/* 9937 */
typedef _LDT_ENTRY *PLDT_ENTRY;

/* 9938 */
typedef void (__cdecl *PTP_WORK_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *, _TP_WORK *);

/* 9939 */
typedef unsigned int uint_least32_t;

/* 9940 */
typedef char GfxZoneDepthStencilStateHandle;

/* 9941 */
typedef tagENHMETAHEADER *PENHMETAHEADER;

/* 9942 */
typedef _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

/* 9943 */
typedef const unsigned int *PCUCSSTR;

/* 9944 */
typedef tagNCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS;

/* 9945 */
typedef _GENERIC_BINDING_ROUTINE_PAIR *PGENERIC_BINDING_ROUTINE_PAIR;

/* 9946 */
typedef _PRINTER_CONNECTION_INFO_1A *PPRINTER_CONNECTION_INFO_1;

/* 9947 */
typedef _POINTFLOAT *PPOINTFLOAT;

/* 9948 */
typedef __int16 *FSERRPTR;

/* 9949 */
typedef _PRINTER_INFO_2W *PPRINTER_INFO_2W;

/* 9950 */
typedef _CERT_LOGOTYPE_IMAGE_INFO *PCERT_LOGOTYPE_IMAGE_INFO;

/* 9951 */
typedef BATTERY_REPORTING_SCALE *PBATTERY_REPORTING_SCALE;

/* 9952 */
typedef tagEMRELLIPSE *PEMRELLIPSE;

/* 9953 */
typedef void (__cdecl *PTIMERAPCROUTINE)(void *, unsigned int, unsigned int);

/* 9954 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYFEATURECONFIGDEFAULTS)(NvDisplayHandle__ *, _NV_DISPLAY_FEATURE *);

/* 9955 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATERENDERTARGET)(unsigned int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, int, unsigned int **, NVDX_ObjectHandle__ **);

/* 9956 */
typedef unsigned int FxElemHandle;

/* 9957 */
typedef tagSOUNDSENTRYW *LPSOUNDSENTRYW;

/* 9958 */
typedef _TXFS_START_RM_INFORMATION *PTXFS_START_RM_INFORMATION;

/* 9959 */
typedef _TRIVERTEX *LPTRIVERTEX;

/* 9960 */
typedef _OCSP_REQUEST_ENTRY *POCSP_REQUEST_ENTRY;

/* 9961 */
typedef tagACTCTX_SECTION_KEYED_DATA *PACTCTX_SECTION_KEYED_DATA;

/* 9962 */
typedef hks::dlmalloc::malloc_chunk *sbinptr;

/* 9963 */
typedef _SD_ENUM_SDS_INPUT *PSD_ENUM_SDS_INPUT;

/* 9964 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_QUERYACTIVEAPPS)(NvPhysicalGpuHandle__ *, NV_3D_APP_INFO_V2 *, unsigned int *);

/* 9965 */
typedef hks::dlmalloc::malloc_tree_chunk *tbinptr;

/* 9966 */
typedef _CRYPTOAPI_BLOB *PDATA_BLOB;

/* 9967 */
typedef _RPC_SECURITY_QOS_V5_W *PRPC_SECURITY_QOS_V5_W;

/* 9968 */
typedef _MMCKINFO *PMMCKINFO;

/* 9969 */
typedef _RPC_SECURITY_QOS_V3_A *PRPC_SECURITY_QOS_V3_A;

/* 9970 */
typedef void *StereoHandle;

/* 9971 */
typedef loadAnim_t playerAnims_t[1640];

/* 9972 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDOUTPUTS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 9973 */
typedef PPM_IDLESTATE_EVENT *PPPM_IDLESTATE_EVENT;

/* 9974 */
typedef _HARDWARE_COUNTER_DATA *PHARDWARE_COUNTER_DATA;

/* 9975 */
typedef unsigned __int64 *LPSCARDHANDLE;

/* 9976 */
typedef int *PSCODE;

/* 9977 */
typedef unsigned int RMsgSendHandle;

/* 9978 */
typedef char *PZZTSTR;

/* 9979 */
typedef unsigned int _Atomic_counter_t;

/* 9980 */
typedef void (__cdecl *APC_CALLBACK_FUNCTION)(unsigned int, void *, void *);

/* 9981 */
typedef void *Iterator;

/* 9982 */
typedef char xnaddrstr_t[73];

/* 9983 */
typedef tagKEYBDINPUT *LPKEYBDINPUT;

/* 9984 */
typedef void *PUMS_CONTEXT;

/* 9985 */
typedef USN_JOURNAL_DATA_V1 *PUSN_JOURNAL_DATA_V1;

/* 9986 */
typedef __int16 *PSHORT;

/* 9987 */
typedef unsigned __int16 WORD;

/* 9988 */
typedef _TAPE_PREPARE *PTAPE_PREPARE;

/* 9989 */
typedef READER_SEL_REQUEST *PREADER_SEL_REQUEST;

/* 9990 */
typedef _PRINTER_INFO_1W *PPRINTER_INFO_1W;

/* 9991 */
typedef unsigned __int16 ushort;

/* 9992 */
typedef unsigned __int16 USHORT;

/* 9993 */
typedef tagMCI_OPEN_PARMSW *LPMCI_OPEN_PARMSW;

/* 9994 */
typedef _CERT_ECC_SIGNATURE *PCERT_ECC_SIGNATURE;

/* 9995 */
typedef _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;

/* 9996 */
typedef int (__cdecl *get_matrix)(LocalClientNum_t, int, int, float (*)[3]);

/* 9997 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(void *, _CTL_CONTEXT *, unsigned int, unsigned int, const void *);

/* 9998 */
typedef _PRINTER_INFO_4A *LPPRINTER_INFO_4;

/* 9999 */
typedef ID3D11UnorderedAccessView *GfxShaderRWViewHandle;

/* 10000 */
typedef int (__cdecl *LOCALE_ENUMPROCW)(wchar_t *);

/* 10001 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETINTERFACEVERSIONSTRING)(char *);

/* 10002 */
typedef tagAUXCAPSW *NPAUXCAPSW;

/* 10003 */
typedef _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO;

/* 10004 */
typedef float raw_float16;

/* 10005 */
typedef tagAUXCAPSW *LPAUXCAPSW;

/* 10006 */
typedef _RPC_MESSAGE *PRPC_MESSAGE;

/* 10007 */
typedef int (*ODITHER_MATRIX_PTR)[16];

/* 10008 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DELETEPROFILESETTING)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int);

/* 10009 */
typedef tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT;

/* 10010 */
typedef tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMSA;

/* 10011 */
typedef in_pktinfo *PIN_PKTINFO;

/* 10012 */
typedef tagMCI_ANIM_UPDATE_PARMS *LPMCI_ANIM_UPDATE_PARMS;

/* 10013 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETHUEANGLE)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 10014 */
typedef unsigned __int16 FSHORT;

/* 10015 */
typedef _EV_EXTRA_CERT_CHAIN_POLICY_STATUS *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;

/* 10016 */
typedef tagKBDLLHOOKSTRUCT *PKBDLLHOOKSTRUCT;

/* 10017 */
typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATA;

/* 10018 */
typedef _CTL_USAGE *PCCERT_ENHKEY_USAGE;

/* 10019 */
typedef in_addr *PIN_ADDR;

/* 10020 */
typedef tagDELETEITEMSTRUCT *PDELETEITEMSTRUCT;

/* 10021 */
typedef tagMIXERCAPS2W *PMIXERCAPS2W;

/* 10022 */
typedef void (__cdecl *NetConstStrings_ConfigStringCallback)(const unsigned int, const char *);

/* 10023 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(void *, _CTL_CONTEXT *, unsigned int, unsigned int, void *, unsigned int *);

/* 10024 */
typedef char **PZPSTR;

/* 10025 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMNVIDIADISPLAYHANDLE)(unsigned int, NvDisplayHandle__ **);

/* 10026 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYSETTINGS)(NvDisplayHandle__ *, NV_DISP_PATH_V2 *, unsigned int *);

/* 10027 */
typedef _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER *PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER;

/* 10028 */
typedef void (__cdecl *PUMS_SCHEDULER_ENTRY_POINT)(_RTL_UMS_SCHEDULER_REASON, unsigned __int64, void *);

/* 10029 */
typedef _RPC_SEC_CONTEXT_KEY_INFO *PRPC_SEC_CONTEXT_KEY_INFO;

/* 10030 */
typedef _PRINTER_CONNECTION_INFO_1A *PPRINTER_CONNECTION_INFO_1A;

/* 10031 */
typedef tagWINDOWPLACEMENT *PWINDOWPLACEMENT;

/* 10032 */
typedef unsigned __int16 _U16;

/* 10033 */
typedef int (__cdecl *SERVER_ROUTINE)();

/* 10034 */
typedef my_downsampler *my_downsample_ptr;

/* 10035 */
typedef _ADDJOB_INFO_1W *LPADDJOB_INFO_1W;

/* 10036 */
typedef tagEMRSETCOLORADJUSTMENT *PEMRSETCOLORADJUSTMENT;

/* 10037 */
typedef char GfxZoneBlendStateHandle;

/* 10038 */
typedef PROCESSOR_PERFSTATE_POLICY *PPROCESSOR_PERFSTATE_POLICY;

/* 10039 */
typedef pvalueW *PPVALUEW;

/* 10040 */
typedef tagCY *LPCY;

/* 10041 */
typedef _CERT_LOGOTYPE_AUDIO *PCERT_LOGOTYPE_AUDIO;

/* 10042 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 10043 */
typedef servent *PSERVENT;

/* 10044 */
typedef _CERT_POLICY_CONSTRAINTS_INFO *PCERT_POLICY_CONSTRAINTS_INFO;

/* 10045 */
typedef bool __cdecl RMsgPacketCallback(LocalClientNum_t, netadr_s, const char *, msg_t *, int);

/* 10046 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_INITACTIVATION)(void *, _NVAPI_STEREO_INIT_ACTIVATION_FLAGS);

/* 10047 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENABLECURRENTMOSAICTOPOLOGY)(unsigned int);

/* 10048 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDISPLAYSETTINGS)(NvDisplayHandle__ *, NV_DISP_PATH_V2 *, unsigned int);

/* 10049 */
typedef _PRINTER_CONNECTION_INFO_1W *PPRINTER_CONNECTION_INFO_1W;

/* 10050 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVALIDGPUTOPOLOGIES)(NV_GPU_TOPOLOGIES *, unsigned int *);

/* 10051 */
typedef tagRECONVERTSTRING *NPRECONVERTSTRING;

/* 10052 */
typedef NvLogicalGpuHandle__ *NvLogicalGpuHandle;

/* 10053 */
typedef _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;

/* 10054 */
typedef tagRECONVERTSTRING *LPRECONVERTSTRING;

/* 10055 */
typedef void __cdecl RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN(void *, void *, unsigned int);

/* 10056 */
typedef void *HCRYPTASYNC;

/* 10057 */
typedef _WSAQuerySetA *LPWSAQUERYSET;

/* 10058 */
typedef _GLYPHMETRICSFLOAT *LPGLYPHMETRICSFLOAT;

/* 10059 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_SETCOPROCINFOFLAGSEX)(NV_COPROC_FLAGS_EX *);

/* 10060 */
typedef _XSAVE_FORMAT *PXSAVE_FORMAT;

/* 10061 */
typedef unsigned int *PUINT32;

/* 10062 */
typedef tagGESTURECONFIG *PGESTURECONFIG;

/* 10063 */
typedef _CERT_STRONG_SIGN_PARA *PCERT_STRONG_SIGN_PARA;

/* 10064 */
typedef provider_info *PPROVIDER;

/* 10065 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_SETVERTICALSYNCMODE)(IUnknown *, NVAPI_VSYNC_MODE);

/* 10066 */
typedef tagWAVEINCAPSW *LPWAVEINCAPSW;

/* 10067 */
typedef _OSVERSIONINFOW *LPOSVERSIONINFOW;

/* 10068 */
typedef unsigned __int16 transientAssetIndex_t;

/* 10069 */
typedef _FIND_NAME_BUFFER *PFIND_NAME_BUFFER;

/* 10070 */
typedef _CHANGER_ELEMENT_LIST *PCHANGER_ELEMENT_LIST;

/* 10071 */
typedef tagWAVEINCAPSW *NPWAVEINCAPSW;

/* 10072 */
typedef _PRINTER_INFO_7W *PPRINTER_INFO_7W;

/* 10073 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHVERTICESNV)(unsigned int, const void *);

/* 10074 */
typedef IAdviseSink2 *LPADVISESINK2;

/* 10075 */
typedef tagMIDIINCAPS2W *NPMIDIINCAPS2W;

/* 10076 */
typedef char TextureSemantic;

/* 10077 */
typedef const unsigned int *PCUUCSSTR;

/* 10078 */
typedef tagCHOOSEFONTA *PCCHOOSEFONTA;

/* 10079 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(void *, _CERT_CONTEXT *, void *, unsigned int);

/* 10080 */
typedef unsigned int result_type;

/* 10081 */
typedef tagMIDIINCAPS2W *LPMIDIINCAPS2W;

/* 10082 */
typedef _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;

/* 10083 */
typedef _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;

/* 10084 */
typedef unsigned int (__cdecl *POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK)(void *, void *, unsigned int *, _IMAGE_RUNTIME_FUNCTION_ENTRY **);

/* 10085 */
typedef const unsigned __int16 *NvAPI_LPCWSTR;

/* 10086 */
typedef tagCUSTDATAITEM *LPCUSTDATAITEM;

/* 10087 */
typedef tagWAVEOUTCAPS2A *PWAVEOUTCAPS2A;

/* 10088 */
typedef tagENUMLOGFONTEXDVW *LPENUMLOGFONTEXDVW;

/* 10089 */
typedef _CTL_USAGE *PCERT_ENHKEY_USAGE;

/* 10090 */
typedef tagWAVEINCAPSA *PWAVEINCAPSA;

/* 10091 */
typedef tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMSA;

/* 10092 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURAGETCOOLINGBUDGET)(unsigned int *);

/* 10093 */
typedef int MEMBERID;

/* 10094 */
typedef SurfaceFxTable *SurfaceFxTablePtr;

/* 10095 */
typedef NvGSyncDeviceHandle__ *NvGSyncDeviceHandle;

/* 10096 */
typedef int __cdecl RPC_FORWARD_FUNCTION(_GUID *, _RPC_VERSION *, _GUID *, char *, void **);

/* 10097 */
typedef _CRYPTOAPI_BLOB *PCRL_BLOB;

/* 10098 */
typedef tagCHOOSEFONTW *PCCHOOSEFONTW;

/* 10099 */
typedef GfxWorld *GfxWorldPtr;

/* 10100 */
typedef GlassWorld *GlassWorldPtr;

/* 10101 */
typedef tagWAVEINCAPSA *NPWAVEINCAPSA;

/* 10102 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_PRESENT)(IUnknown *, unsigned int *, unsigned int, unsigned int);

/* 10103 */
typedef __int16 nullptr_t;

/* 10104 */
typedef IAdviseSink *LPADVISESINK;

/* 10105 */
typedef _CHANGER_SET_POSITION *PCHANGER_SET_POSITION;

/* 10106 */
typedef tagWAVEINCAPSA *LPWAVEINCAPSA;

/* 10107 */
typedef _PROC_THREAD_ATTRIBUTE_LIST *LPPROC_THREAD_ATTRIBUTE_LIST;

/* 10108 */
typedef void *LPVOID;

/* 10109 */
typedef WSAData *LPWSADATA;

/* 10110 */
typedef _WSAPROTOCOLCHAIN *LPWSAPROTOCOLCHAIN;

/* 10111 */
typedef __int64 SHANDLE_PTR;

/* 10112 */
typedef unsigned __int64 uintmax_t;

/* 10113 */
typedef tagMIXERCAPSW *LPMIXERCAPSW;

/* 10114 */
typedef tagMCI_VD_ESCAPE_PARMSW *PMCI_VD_ESCAPE_PARMSW;

/* 10115 */
typedef int HksInteger;

/* 10116 */
typedef tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMS;

/* 10117 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_NVFBC_GETSTATUS)(void *);

/* 10118 */
typedef _CRYPT_X942_OTHER_INFO *PCRYPT_X942_OTHER_INFO;

/* 10119 */
typedef HMIDIOUT__ *HMIDIOUT;

/* 10120 */
typedef _cpinfo *LPCPINFO;

/* 10121 */
typedef value_entW *PVALENTW;

/* 10122 */
typedef unsigned __int16 *LPWORD;

/* 10123 */
typedef tagEMREXTTEXTOUTA *PEMREXTTEXTOUTA;

/* 10124 */
typedef _EVENTLOG_FULL_INFORMATION *LPEVENTLOG_FULL_INFORMATION;

/* 10125 */
typedef tagMIXERLINECONTROLSW *LPMIXERLINECONTROLSW;

/* 10126 */
typedef _COORD *PCOORD;

/* 10127 */
typedef tagEMRSELECTOBJECT *PEMRSELECTOBJECT;

/* 10128 */
typedef tagCUSTDATA *LPCUSTDATA;

/* 10129 */
typedef tagMENUITEMINFOA *LPMENUITEMINFOA;

/* 10130 */
typedef _ICONINFOEXW *PICONINFOEXW;

/* 10131 */
typedef _PRINTER_NOTIFY_OPTIONS *PPRINTER_NOTIFY_OPTIONS;

/* 10132 */
typedef _REASSIGN_BLOCKS_EX *PREASSIGN_BLOCKS_EX;

/* 10133 */
typedef _ACTIVATION_CONTEXT_BASIC_INFORMATION *PACTIVATION_CONTEXT_BASIC_INFORMATION;

/* 10134 */
typedef ITypeComp *LPTYPECOMP;

/* 10135 */
typedef _WSACOMPLETION *LPWSACOMPLETION;

/* 10136 */
typedef tagMCI_VD_ESCAPE_PARMSW *LPMCI_VD_ESCAPE_PARMSW;

/* 10137 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_GETVPSTATECAP)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 10138 */
typedef tagEMRFILLPATH *PEMRFILLPATH;

/* 10139 */
typedef tagDESIGNVECTOR *PDESIGNVECTOR;

/* 10140 */
typedef tagMENUITEMINFOW *LPMENUITEMINFOW;

/* 10141 */
typedef _SERVICE_TRIGGER_INFO *PSERVICE_TRIGGER_INFO;

/* 10142 */
typedef HFONT__ *HFONT;

/* 10143 */
typedef _FILE_LEVEL_TRIM_OUTPUT *PFILE_LEVEL_TRIM_OUTPUT;

/* 10144 */
typedef tagEMREXTTEXTOUTA *PEMREXTTEXTOUTW;

/* 10145 */
typedef tagEMREOF *PEMREOF;

/* 10146 */
typedef addrinfoex2W *LPADDRINFOEX2W;

/* 10147 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_SETVPSTATECAP)(NvPhysicalGpuHandle__ *, unsigned int);

/* 10148 */
typedef ICreateTypeLib2 *LPCREATETYPELIB2;

/* 10149 */
typedef _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUS;

/* 10150 */
typedef tagEMRPOLYPOLYLINE *PEMRPOLYPOLYGON;

/* 10151 */
typedef _PRINTER_INFO_5W *PPRINTER_INFO_5W;

/* 10152 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETPVEXTNAME)(NvDisplayHandle__ *, const char *);

/* 10153 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_DESTROYSHAREDSURFACE)(unsigned int *, void *);

/* 10154 */
typedef int LONG;

/* 10155 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTFANSPEEDLEVEL)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL *);

/* 10156 */
typedef tagCHOOSEFONTA *PCCHOOSEFONT;

/* 10157 */
typedef int (__cdecl *hks_debug_map)(const char *, int);

/* 10158 */
typedef tagWAVEINCAPS2A *LPWAVEINCAPS2;

/* 10159 */
typedef _TXFS_QUERY_RM_INFORMATION *PTXFS_QUERY_RM_INFORMATION;

/* 10160 */
typedef int *LPLONG;

/* 10161 */
typedef _EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 10162 */
typedef tagWAVEINCAPS2A *NPWAVEINCAPS2;

/* 10163 */
typedef tagMENUINFO *LPMENUINFO;

/* 10164 */
typedef unsigned __int16 *PPARAM_OFFSETTABLE;

/* 10165 */
typedef unsigned int CALID;

/* 10166 */
typedef tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMS;

/* 10167 */
typedef char db_zlib_inflate_buf[131072];

/* 10168 */
typedef int (__cdecl *_PNH)(unsigned __int64);

/* 10169 */
typedef int (__cdecl *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(const char *, unsigned int, unsigned __int64, unsigned int, const void *, void *, _CERT_STORE_PROV_INFO *);

/* 10170 */
typedef tagWAVEINCAPSA *NPWAVEINCAPS;

/* 10171 */
typedef _PRINTER_OPTIONSA *LPPRINTER_OPTIONS;

/* 10172 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPVEXTNAME)(NvDisplayHandle__ *, char *);

/* 10173 */
typedef tagWAVEINCAPSA *LPWAVEINCAPS;

/* 10174 */
typedef tagEMRLINETO *PEMRMOVETOEX;

/* 10175 */
typedef unsigned __int64 HCRYPTPROV_LEGACY;

/* 10176 */
typedef PPM_WMI_PERF_STATES_EX *PPPM_WMI_PERF_STATES_EX;

/* 10177 */
typedef _CHANGER_READ_ELEMENT_STATUS *PCHANGER_READ_ELEMENT_STATUS;

/* 10178 */
typedef int (__cdecl *EDITWORDBREAKPROCW)(wchar_t *, int, int, int);

/* 10179 */
typedef IExternalConnection *LPEXTERNALCONNECTION;

/* 10180 */
typedef tagPRINTPAGERANGE *PCPRINTPAGERANGE;

/* 10181 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_PROCESSCALLBACKS)(unsigned int *, unsigned int);

/* 10182 */
typedef tagICONMETRICSA *LPICONMETRICSA;

/* 10183 */
typedef _PRINTER_INFO_4W *PPRINTER_INFO_4W;

/* 10184 */
typedef _CONSOLE_FONT_INFO *PCONSOLE_FONT_INFO;

/* 10185 */
typedef tagEMRSETVIEWPORTEXTEX *PEMRSETVIEWPORTEXTEX;

/* 10186 */
typedef _CMC_ADD_EXTENSIONS_INFO *PCMC_ADD_EXTENSIONS_INFO;

/* 10187 */
typedef int FxElemDefFlags;

/* 10188 */
typedef tagMENUITEMINFOA *LPMENUITEMINFO;

/* 10189 */
typedef _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;

/* 10190 */
typedef tagEMRPOLYLINE *PEMRPOLYBEZIERTO;

/* 10191 */
typedef tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

/* 10192 */
typedef const unsigned int *PCUCSCHAR;

/* 10193 */
typedef __int64 time_t;

/* 10194 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETFRUSTUMADJUSTMODE)(void *, _NV_FrustumAdjustMode);

/* 10195 */
typedef tagCURSORINFO *PCURSORINFO;

/* 10196 */
typedef _CERT_ISSUER_SERIAL_NUMBER *PCERT_ISSUER_SERIAL_NUMBER;

/* 10197 */
typedef _TOKEN_GROUPS *PTOKEN_GROUPS;

/* 10198 */
typedef void (__cdecl *LPTIMECALLBACK)(unsigned int, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 10199 */
typedef threadlocaleinfostruct *pthreadlocinfo;

/* 10200 */
typedef _SHRINK_VOLUME_REQUEST_TYPES *PSHRINK_VOLUME_REQUEST_TYPES;

/* 10201 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_HANDSHAKE_TRIGGER_ACTIVATION)(void *);

/* 10202 */
typedef IMarshal2 *LPMARSHAL2;

/* 10203 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETERRORMESSAGE)(_NvAPI_Status, char *);

/* 10204 */
typedef _POWER_SESSION_RIT_STATE *PPOWER_SESSION_RIT_STATE;

/* 10205 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXT;

/* 10206 */
typedef unsigned int (__cdecl *PFNFLSALLOC)(void (__cdecl *)(void *));

/* 10207 */
typedef float spx_coef_t;

/* 10208 */
typedef unsigned __int16 SECURITY_DESCRIPTOR_CONTROL;

/* 10209 */
typedef unsigned int THREAD_ID;

/* 10210 */
typedef MaterialVertexDeclaration *MaterialVertexDeclarationPtr;

/* 10211 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_GETCOPROCSTATUS)(unsigned int *, _NV_COPROC_STATE *);

/* 10212 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETVERTEXSHADERCONSTANTI)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 10213 */
typedef SndCurve *LpfCurvePtr;

/* 10214 */
typedef tagCOMPOSITIONFORM *NPCOMPOSITIONFORM;

/* 10215 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFYA;

/* 10216 */
typedef tagMSGBOXPARAMSA *PMSGBOXPARAMSA;

/* 10217 */
typedef tagCOMPOSITIONFORM *LPCOMPOSITIONFORM;

/* 10218 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETCURRENTTOPO)(NV_MOSAIC_TOPO_BRIEF *, NV_MOSAIC_DISPLAY_SETTING *, int *, int *);

/* 10219 */
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;

/* 10220 */
typedef _PORT_INFO_3A *LPPORT_INFO_3A;

/* 10221 */
typedef NvUnAttachedDisplayHandle__ *NvUnAttachedDisplayHandle;

/* 10222 */
typedef _PORT_INFO_2A *LPPORT_INFO_2A;

/* 10223 */
typedef _FILE_REFERENCE_RANGE *PFILE_REFERENCE_RANGE;

/* 10224 */
typedef _PORT_INFO_1A *LPPORT_INFO_1A;

/* 10225 */
typedef _PRINTER_INFO_7A *LPPRINTER_INFO_7A;

/* 10226 */
typedef char StructuredDataTranslationBuffer[37884];

/* 10227 */
typedef _CRYPT_KEY_SIGN_MESSAGE_PARA *PCRYPT_KEY_SIGN_MESSAGE_PARA;

/* 10228 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETVERTEXSHADERCONSTANTB)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 10229 */
typedef unsigned __int64 *PULONG64;

/* 10230 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_I2CWRITE)(NvPhysicalGpuHandle__ *, NV_I2C_INFO_V3 *);

/* 10231 */
typedef _FILE_DISPOSITION_INFO *PFILE_DISPOSITION_INFO;

/* 10232 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETVERTEXSHADERCONSTANTF)(void *, unsigned int, float *, float *, float *, unsigned int);

/* 10233 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSCANOUTWARPINGSTATE)(unsigned int, _NV_SCANOUT_WARPING_STATE_DATA *);

/* 10234 */
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;

/* 10235 */
typedef IEnumString *LPENUMSTRING;

/* 10236 */
typedef _DOC_INFO_3W *PDOC_INFO_3W;

/* 10237 */
typedef _TRANSACTIONMANAGER_LOGPATH_INFORMATION *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

/* 10238 */
typedef _WSACOMPLETION *PWSACOMPLETION;

/* 10239 */
typedef _FILETIME *LPFILETIME;

/* 10240 */
typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

/* 10241 */
typedef SCARD_READERSTATEW *LPSCARD_READERSTATEW;

/* 10242 */
typedef _PRINTER_INFO_7W *LPPRINTER_INFO_7W;

/* 10243 */
typedef timeval *PTIMEVAL;

/* 10244 */
typedef void *(__cdecl *bdAlignedReallocateFunc)(void *, const unsigned __int64, const unsigned __int64);

/* 10245 */
typedef __int64 ffOffset_t;

/* 10246 */
typedef char byte65536;

/* 10247 */
typedef _STORAGE_QUERY_TYPE *PSTORAGE_QUERY_TYPE;

/* 10248 */
typedef _ACCESS_DENIED_CALLBACK_OBJECT_ACE *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

/* 10249 */
typedef char CHAR;

/* 10250 */
typedef float vec_t;

/* 10251 */
typedef tagRAWINPUTDEVICELIST *PRAWINPUTDEVICELIST;

/* 10252 */
typedef _SCARD_IO_REQUEST *PSCARD_IO_REQUEST;

/* 10253 */
typedef NV_EVENT_REGISTER_CALLBACK *PNV_EVENT_REGISTER_CALLBACK;

/* 10254 */
typedef tagMENUGETOBJECTINFO *PMENUGETOBJECTINFO;

/* 10255 */
typedef unsigned int FxSparkCloudHandle;

/* 10256 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETAGPAPERTURE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 10257 */
typedef tagINPUT *LPINPUT;

/* 10258 */
typedef _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;

/* 10259 */
typedef __int64 PhysObjId;

/* 10260 */
typedef _OCSP_RESPONSE_INFO *POCSP_RESPONSE_INFO;

/* 10261 */
typedef void (__cdecl *BandwidthTest_Callback_SendTestPacketMsg)(BandwidthTestInput *, int, char *, int);

/* 10262 */
typedef int (__cdecl *WINSTAENUMPROC)(char *, __int64);

/* 10263 */
typedef IBinding *LPBINDING;

/* 10264 */
typedef _RTL_SRWLOCK *PSRWLOCK;

/* 10265 */
typedef unsigned int (__cdecl *check_func)(unsigned int, const char *, unsigned int);

/* 10266 */
typedef _RTL_CRITICAL_SECTION *PCRITICAL_SECTION;

/* 10267 */
typedef _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;

/* 10268 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_VALIDATEDISPLAYGRIDSWITHSLI)(NV_GPU_TOPOLOGIES *, NV_MOSAIC_GRID_TOPO *, NV_MOSAIC_DISPLAY_TOPO_STATUS *, unsigned int);

/* 10269 */
typedef _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1A;

/* 10270 */
typedef unsigned int binmap_t;

/* 10271 */
typedef _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUESA;

/* 10272 */
typedef _DOC_INFO_2W *PDOC_INFO_2W;

/* 10273 */
typedef _PROVIDOR_INFO_2A *LPPROVIDOR_INFO_2A;

/* 10274 */
typedef unsigned int raw_uint128;

/* 10275 */
typedef _MODEMDEVCAPS *LPMODEMDEVCAPS;

/* 10276 */
typedef void (__cdecl *_se_translator_function)(unsigned int, _EXCEPTION_POINTERS *);

/* 10277 */
typedef my_decomp_master *my_master_ptr;

/* 10278 */
typedef _COMMPROP *LPCOMMPROP;

/* 10279 */
typedef tagSTYLESTRUCT *LPSTYLESTRUCT;

/* 10280 */
typedef tagMULTIKEYHELPA *PMULTIKEYHELP;

/* 10281 */
typedef _CERT_NAME_CONSTRAINTS_INFO *PCERT_NAME_CONSTRAINTS_INFO;

/* 10282 */
typedef void **PHANDLE;

/* 10283 */
typedef _QUOTA_LIMITS *PQUOTA_LIMITS;

/* 10284 */
typedef IDirectSoundCapture *LPDIRECTSOUNDCAPTURE;

/* 10285 */
typedef _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;

/* 10286 */
typedef MapEnts *MapEntsPtr;

/* 10287 */
typedef tagPAINTSTRUCT *PPAINTSTRUCT;

/* 10288 */
typedef _userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

/* 10289 */
typedef wchar_t *PZZWSTR;

/* 10290 */
typedef _currencyfmtW *LPCURRENCYFMTW;

/* 10291 */
typedef float spx_lsp_t;

/* 10292 */
typedef tagMIXERLINEW *LPMIXERLINEW;

/* 10293 */
typedef _RemotableHandle *wireHDC;

/* 10294 */
typedef char *(__cdecl *GetParameter_t)(int);

/* 10295 */
typedef IRootStorage *LPROOTSTORAGE;

/* 10296 */
typedef DIDEVICEINSTANCEA *LPDIDEVICEINSTANCEA;

/* 10297 */
typedef unsigned int *PTP_VERSION;

/* 10298 */
typedef tagUSEROBJECTFLAGS *PUSEROBJECTFLAGS;

/* 10299 */
typedef _CRYPT_URL_INFO *PCRYPT_URL_INFO;

/* 10300 */
typedef _DRIVE_LAYOUT_INFORMATION *PDRIVE_LAYOUT_INFORMATION;

/* 10301 */
typedef HKL__ **LPHKL;

/* 10302 */
typedef _PRINTER_INFO_7A *LPPRINTER_INFO_7;

/* 10303 */
typedef OPENCARDNAMEA *POPENCARDNAME;

/* 10304 */
typedef _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO;

/* 10305 */
typedef void *DS_SHMEM_FileHandle;

/* 10306 */
typedef void (__cdecl *MigrationMessageHandler)(const int, msg_t *);

/* 10307 */
typedef tagFILTERKEYS *LPFILTERKEYS;

/* 10308 */
typedef _DOC_INFO_1W *PDOC_INFO_1W;

/* 10309 */
typedef char int_least8_t;

/* 10310 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_REVERTCUSTOMDISPLAYTRIAL)(unsigned int *, unsigned int);

/* 10311 */
typedef unsigned int FxTriGroupHandle;

/* 10312 */
typedef void (__cdecl *bdDeallocateFunc)(void *);

/* 10313 */
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

/* 10314 */
typedef const char *_Unchecked_type;

/* 10315 */
typedef tagEMREXTESCAPE *PEMREXTESCAPE;

/* 10316 */
typedef tagBITMAPFILEHEADER *PBITMAPFILEHEADER;

/* 10317 */
typedef _CERT_LOGOTYPE_DATA *PCERT_LOGOTYPE_DATA;

/* 10318 */
typedef int (__cdecl *MINIDUMP_CALLBACK_ROUTINE)(void *, _MINIDUMP_CALLBACK_INPUT *, _MINIDUMP_CALLBACK_OUTPUT *);

/* 10319 */
typedef tagHSZPAIR *PHSZPAIR;

/* 10320 */
typedef dxJointGroup *dJointGroupID;

/* 10321 */
typedef _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS;

/* 10322 */
typedef void __cdecl RPC_SECURITY_CALLBACK_FN(void *);

/* 10323 */
typedef addrinfoexW *PADDRINFOEXW;

/* 10324 */
typedef _IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY;

/* 10325 */
typedef tagMCI_OVLY_WINDOW_PARMSW *LPMCI_OVLY_WINDOW_PARMSW;

/* 10326 */
typedef void (__cdecl *BandwidthTest_Callback_SendTestStartMsg)(BandwidthTestInput *, int, int);

/* 10327 */
typedef unsigned int (__cdecl *LPHANDLER_FUNCTION_EX)(unsigned int, unsigned int, void *, void *);

/* 10328 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_SETUPTARGETBUFFERTOSYS)(unsigned int *, NVFBC_BUFFER_FORMAT, unsigned int, char **);

/* 10329 */
typedef tagEMRGLSRECORD *PEMRGLSRECORD;

/* 10330 */
typedef _BCRYPT_ECCKEY_BLOB *PBCRYPT_ECCKEY_BLOB;

/* 10331 */
typedef _ENCRYPTION_CERTIFICATE *PENCRYPTION_CERTIFICATE;

/* 10332 */
typedef tagABORTPATH *PEMRCLOSEFIGURE;

/* 10333 */
typedef char charf;

/* 10334 */
typedef tagCONVINFO *PCONVINFO;

/* 10335 */
typedef __int16 bdInt16;

/* 10336 */
typedef int (__cdecl *WINSTAENUMPROCA)(char *, __int64);

/* 10337 */
typedef tagGCP_RESULTSA *LPGCP_RESULTSA;

/* 10338 */
typedef _STORAGE_ALLOCATE_BC_STREAM_OUTPUT *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;

/* 10339 */
typedef tagEMRTRANSPARENTBLT *PEMRTRANSPARENTBLT;

/* 10340 */
typedef unsigned int *PUINT;

/* 10341 */
typedef char *voidp;

/* 10342 */
typedef in6_pktinfo *PIN6_PKTINFO;

/* 10343 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_INFOFRAMECONTROL)(unsigned int, NV_INFOFRAME_DATA *);

/* 10344 */
typedef int (__cdecl *LANGUAGEGROUP_ENUMPROCA)(unsigned int, char *, char *, unsigned int, __int64);

/* 10345 */
typedef _STARTUPINFOW *LPSTARTUPINFOW;

/* 10346 */
typedef tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;

/* 10347 */
typedef _STORAGE_GET_BC_PROPERTIES_OUTPUT *PSTORAGE_GET_BC_PROPERTIES_OUTPUT;

/* 10348 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_GETTOPOLOGY)(NvGSyncDeviceHandle__ *, unsigned int *, _NV_GSYNC_GPU *, unsigned int *, _NV_GSYNC_DISPLAY *);

/* 10349 */
typedef char raw_byte;

/* 10350 */
typedef _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;

/* 10351 */
typedef unsigned int IDirect3DSurface9;

/* 10352 */
typedef MFT_ENUM_DATA_V1 *PMFT_ENUM_DATA_V1;

/* 10353 */
typedef _FOCUS_EVENT_RECORD *PFOCUS_EVENT_RECORD;

/* 10354 */
typedef MFT_ENUM_DATA_V0 *PMFT_ENUM_DATA_V0;

/* 10355 */
typedef _CTL_VERIFY_USAGE_PARA *PCTL_VERIFY_USAGE_PARA;

/* 10356 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_RESETFRAMECOUNT)(unsigned int *);

/* 10357 */
typedef _KCRM_PROTOCOL_BLOB *PKCRM_PROTOCOL_BLOB;

/* 10358 */
typedef tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMS;

/* 10359 */
typedef HMIDIOUT__ **LPHMIDIOUT;

/* 10360 */
typedef unsigned __int64 uint_fast64_t;

/* 10361 */
typedef tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMSA;

/* 10362 */
typedef int (__cdecl *LANGUAGEGROUP_ENUMPROCW)(unsigned int, wchar_t *, wchar_t *, unsigned int, __int64);

/* 10363 */
typedef tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

/* 10364 */
typedef _MINIDUMP_CALLBACK_INFORMATION *PMINIDUMP_CALLBACK_INFORMATION;

/* 10365 */
typedef int (__cdecl *WINSTAENUMPROCW)(wchar_t *, __int64);

/* 10366 */
typedef _ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

/* 10367 */
typedef void (__cdecl *curl_free_callback)(void *);

/* 10368 */
typedef tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMSA;

/* 10369 */
typedef char byte64;

/* 10370 */
typedef tagPOINTS *LPPOINTS;

/* 10371 */
typedef tagWAVEINCAPS2A *PWAVEINCAPS2;

/* 10372 */
typedef __int64 INT64;

/* 10373 */
typedef _TAPE_SET_POSITION *PTAPE_SET_POSITION;

/* 10374 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETDRIVERANDBRANCHVERSION)(unsigned int *, char *);

/* 10375 */
typedef tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;

/* 10376 */
typedef void (__cdecl *db_free_func)(char *, char *);

/* 10377 */
typedef tagBITMAPCOREINFO *PBITMAPCOREINFO;

/* 10378 */
typedef _NETINFOSTRUCT *LPNETINFOSTRUCT;

/* 10379 */
typedef _STORAGE_WRITE_CACHE_PROPERTY *PSTORAGE_WRITE_CACHE_PROPERTY;

/* 10380 */
typedef tagMCI_STATUS_PARMS *PMCI_STATUS_PARMS;

/* 10381 */
typedef tagCHOOSEFONTW *LPCHOOSEFONTW;

/* 10382 */
typedef HCONVLIST__ *HCONVLIST;

/* 10383 */
typedef tagXFORM *PXFORM;

/* 10384 */
typedef tagMCI_SEEK_PARMS *LPMCI_SEEK_PARMS;

/* 10385 */
typedef tagAXISINFOW *PAXISINFOW;

/* 10386 */
typedef int __cdecl dAABBTestFn(dxGeom *, dxGeom *, float *);

/* 10387 */
typedef unsigned __int16 FILEOP_FLAGS;

/* 10388 */
typedef unsigned __int16 *LPCLIPFORMAT;

/* 10389 */
typedef CM_Power_Data_s *PCM_POWER_DATA;

/* 10390 */
typedef _REASON_CONTEXT *PPOWER_REQUEST_CONTEXT;

/* 10391 */
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

/* 10392 */
typedef __int16 AxialMaterialNum[3];

/* 10393 */
typedef sockaddr_in6 *PSOCKADDR_IN6_LH;

/* 10394 */
typedef _WSAServiceClassInfoW *LPWSASERVICECLASSINFOW;

/* 10395 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(void *, _CRL_CONTEXT *, void *, unsigned int);

/* 10396 */
typedef tagMCI_ANIM_WINDOW_PARMSW *PMCI_ANIM_WINDOW_PARMSW;

/* 10397 */
typedef void *Position;

/* 10398 */
typedef _NT_TIB *PNT_TIB;

/* 10399 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVIRTUALFRAMEBUFFERSIZE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 10400 */
typedef tagCHOOSEFONTA *LPCHOOSEFONTA;

/* 10401 */
typedef int intf;

/* 10402 */
typedef float *dRealMutablePtr;

/* 10403 */
typedef void (__cdecl *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE)(unsigned int, void *);

/* 10404 */
typedef tagEMRFORMAT *PEMRFORMAT;

/* 10405 */
typedef tagMDICREATESTRUCTW *LPMDICREATESTRUCTW;

/* 10406 */
typedef int (__cdecl *LPTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/* 10407 */
typedef _CERT_OR_CRL_BUNDLE *PCERT_OR_CRL_BUNDLE;

/* 10408 */
typedef tagMCI_OVLY_RECT_PARMS *PMCI_OVLY_RECT_PARMS;

/* 10409 */
typedef _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY *PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

/* 10410 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_CREATECONFIGURATIONPROFILEREGISTRYKEY)(_NV_StereoRegistryProfileType);

/* 10411 */
typedef tagSTATDATA *LPSTATDATA;

/* 10412 */
typedef IPropertyBag *LPPROPERTYBAG;

/* 10413 */
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE *PDEVICE_DATA_SET_LB_PROVISIONING_STATE;

/* 10414 */
typedef int (__cdecl *GEO_ENUMPROC)(int);

/* 10415 */
typedef WeaponAttachment *WeaponAttachmentPtr;

/* 10416 */
typedef my_color_deconverter *my_cconvert_ptr;

/* 10417 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SETPROFILEINFO)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_PROFILE *);

/* 10418 */
typedef _RemotableHandle *wireHRGN;

/* 10419 */
typedef _PACKEDEVENTINFO *PPACKEDEVENTINFO;

/* 10420 */
typedef _CERT_BIOMETRIC_DATA *PCERT_BIOMETRIC_DATA;

/* 10421 */
typedef int (__cdecl *PROPENUMPROCEXW)(HWND__ *, wchar_t *, void *, unsigned __int64);

/* 10422 */
typedef void (__cdecl *LPSERVICE_MAIN_FUNCTIONA)(unsigned int, char **);

/* 10423 */
typedef tagJOYCAPSA *PJOYCAPSA;

/* 10424 */
typedef unsigned int FxPointGroupHandle;

/* 10425 */
typedef _CERT_REVOCATION_CRL_INFO *PCERT_REVOCATION_CRL_INFO;

/* 10426 */
typedef GfxHullPointsPool GfxHullPointsPoolArray[256];

/* 10427 */
typedef MaterialPixelShader *MaterialPixelShaderPtr;

/* 10428 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_SETRESOURCEHINT)(IUnknown *, NVDX_ObjectHandle__ *, _NVAPI_D3D_SETRESOURCEHINT_CATEGORY, unsigned int, unsigned int *);

/* 10429 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETTEXTUREHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 10430 */
typedef XModel *XModelPtr;

/* 10431 */
typedef IEnumOLEVERB *LPENUMOLEVERB;

/* 10432 */
typedef tagLOGCOLORSPACEA *LPLOGCOLORSPACEA;

/* 10433 */
typedef void *(__cdecl *bdAlignedAllocateFunc)(const unsigned __int64, const unsigned __int64);

/* 10434 */
typedef _ENCRYPTION_CERTIFICATE_LIST *PENCRYPTION_CERTIFICATE_LIST;

/* 10435 */
typedef pollfd *PWSAPOLLFD;

/* 10436 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETPROFILEINFO)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_PROFILE *);

/* 10437 */
typedef _OPERATION_START_PARAMETERS *POPERATION_START_PARAMETERS;

/* 10438 */
typedef _DEVICEDUMP_STORAGEDEVICE_DATA *PDEVICEDUMP_STORAGEDEVICE_DATA;

/* 10439 */
typedef unsigned int *PUHALF_PTR;

/* 10440 */
typedef midihdr_tag *PMIDIHDR;

/* 10441 */
typedef _MEMORY_PRIORITY_INFORMATION *PMEMORY_PRIORITY_INFORMATION;

/* 10442 */
typedef unsigned int R_Macroclut_DstColor;

/* 10443 */
typedef tagJOYCAPSW *PJOYCAPSW;

/* 10444 */
typedef _CMC_RESPONSE_INFO *PCMC_RESPONSE_INFO;

/* 10445 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_ENUMSYNCDEVICES)(NvGSyncDeviceHandle__ **, unsigned int *);

/* 10446 */
typedef char *(__cdecl *USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned int *, char *, void *);

/* 10447 */
typedef int (__cdecl *PROPENUMPROCEXA)(HWND__ *, char *, void *, unsigned __int64);

/* 10448 */
typedef _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRICA;

/* 10449 */
typedef _PROCESS_INFORMATION *LPPROCESS_INFORMATION;

/* 10450 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_3D_GETPROPERTYRANGE)(char *, NV_3D_SETTING_RANGE *);

/* 10451 */
typedef _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRICA;

/* 10452 */
typedef int category;

/* 10453 */
typedef unsigned int DXGI_USAGE;

/* 10454 */
typedef tagWAVEINCAPS2A *PWAVEINCAPS2A;

/* 10455 */
typedef _FILE_BASIC_INFO *PFILE_BASIC_INFO;

/* 10456 */
typedef tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMS;

/* 10457 */
typedef HMETAFILE__ *HMETAFILE;

/* 10458 */
typedef HTOUCHINPUT__ *HTOUCHINPUT;

/* 10459 */
typedef tagPRINTPAGERANGE *LPPRINTPAGERANGE;

/* 10460 */
typedef volatile __int64 volatile_int64;

/* 10461 */
typedef MOVE_FILE_DATA *PMOVE_FILE_DATA;

/* 10462 */
typedef _SET_PARTITION_INFORMATION *PSET_PARTITION_INFORMATION;

/* 10463 */
typedef int (__cdecl *PFNFLSSETVALUE)(unsigned int, void *);

/* 10464 */
typedef _RETRIEVAL_POINTER_BASE *PRETRIEVAL_POINTER_BASE;

/* 10465 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYBLANKINGSTATE)(unsigned int, _NV_DISPLAY_BLANKING_INFO_V1 *);

/* 10466 */
typedef BITMAPV4HEADER *LPBITMAPV4HEADER;

/* 10467 */
typedef int (__cdecl *PFN_CERT_ENUM_PHYSICAL_STORE)(const void *, unsigned int, const wchar_t *, _CERT_PHYSICAL_STORE_INFO *, void *, void *);

/* 10468 */
typedef unsigned __int16 uint16;

/* 10469 */
typedef unsigned __int16 UINT16;

/* 10470 */
typedef _OLESTREAMVTBL *LPOLESTREAMVTBL;

/* 10471 */
typedef void *RPC_AUTH_IDENTITY_HANDLE;

/* 10472 */
typedef _PRINTER_NOTIFY_OPTIONS_TYPE *PPRINTER_NOTIFY_OPTIONS_TYPE;

/* 10473 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SETSETTING)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_SETTING *);

/* 10474 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;

/* 10475 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_QUERYUNDERSCANCAP)(NvDisplayHandle__ *, unsigned int, NV_UNDERSCAN_CAP *);

/* 10476 */
typedef __int16 *PINT16;

/* 10477 */
typedef _CERT_POLICY_ID *PCERT_POLICY_ID;

/* 10478 */
typedef void *PMIDL_XMIT_TYPE;

/* 10479 */
typedef tagIDLDESC *LPIDLDESC;

/* 10480 */
typedef unsigned int __cdecl PM_OPEN_PROC(wchar_t *);

/* 10481 */
typedef void (__cdecl *fn_reached)(gentity_s *);

/* 10482 */
typedef IServiceProvider *LPSERVICEPROVIDER;

/* 10483 */
typedef unsigned __int64 KSPIN_LOCK;

/* 10484 */
typedef tagMCI_RECORD_PARMS *LPMCI_RECORD_PARMS;

/* 10485 */
typedef PPM_IDLE_ACCOUNTING *PPPM_IDLE_ACCOUNTING;

/* 10486 */
typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA;

/* 10487 */
typedef int (__cdecl *PFN_CMSG_IMPORT_KEY_TRANS)(_CRYPT_ALGORITHM_IDENTIFIER *, _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *, unsigned int, void *, unsigned __int64 *);

/* 10488 */
typedef cmsghdr *LPWSACMSGHDR;

/* 10489 */
typedef _EXCEPTION_RECORD32 *PEXCEPTION_RECORD32;

/* 10490 */
typedef unsigned __int64 GfxQueryDataOcclusion;

/* 10491 */
typedef unsigned int _Udiff;

/* 10492 */
typedef tagWAVEINCAPS2W *PWAVEINCAPS2W;

/* 10493 */
typedef MaterialDomainShader *MaterialDomainShaderPtr;

/* 10494 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_CREATESHAREDSURFACE)(unsigned int *, unsigned int, unsigned int, void **);

/* 10495 */
typedef _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;

/* 10496 */
typedef unsigned int TP_VERSION;

/* 10497 */
typedef unsigned __int16 alignIndBufUShort_t;

/* 10498 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETSETTING)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int, _NVDRS_SETTING *);

/* 10499 */
typedef tagCHOOSEFONTA *LPCHOOSEFONT;

/* 10500 */
typedef _CERT_KEY_USAGE_RESTRICTION_INFO *PCERT_KEY_USAGE_RESTRICTION_INFO;

/* 10501 */
typedef char ***JSAMPIMAGE;

/* 10502 */
typedef tagTOUCHINPUT *PTOUCHINPUT;

/* 10503 */
typedef _BIDI_REQUEST_CONTAINER *LPBIDI_REQUEST_CONTAINER;

/* 10504 */
typedef _CMSG_SIGNED_ENCODE_INFO *PCMSG_SIGNED_ENCODE_INFO;

/* 10505 */
typedef unsigned int FxTrailHandle;

/* 10506 */
typedef _CSV_QUERY_MDS_PATH *PCSV_QUERY_MDS_PATH;

/* 10507 */
typedef tagEMRMASKBLT *PEMRMASKBLT;

/* 10508 */
typedef void (__cdecl *RPC_AUTH_KEY_RETRIEVAL_FN)(void *, unsigned __int16 *, unsigned int, void **, int *);

/* 10509 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_GETPERFSENSORS)(_NV_GPS_GET_PERF_SENSOR_COUNTERS_PARAM_V1 *);

/* 10510 */
typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;

/* 10511 */
typedef char alignVertBufByte_t;

/* 10512 */
typedef _SERVICE_DELAYED_AUTO_START_INFO *LPSERVICE_DELAYED_AUTO_START_INFO;

/* 10513 */
typedef _CHANGER_PRODUCT_DATA *PCHANGER_PRODUCT_DATA;

/* 10514 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDISPLAYFEATURECONFIG)(NvDisplayHandle__ *, _NV_DISPLAY_FEATURE);

/* 10515 */
typedef _FILE_ID_EXTD_DIR_INFO *PFILE_ID_EXTD_DIR_INFO;

/* 10516 */
typedef unsigned __int64 UGCHandle_t;

/* 10517 */
typedef _DSCBUFFERDESC *LPCDSCBUFFERDESC;

/* 10518 */
typedef _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;

/* 10519 */
typedef _IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;

/* 10520 */
typedef sockaddr_in *LPSOCKADDR_IN;

/* 10521 */
typedef _DISK_EX_INT13_INFO *PDISK_EX_INT13_INFO;

/* 10522 */
typedef tagJOYCAPSA *PJOYCAPS;

/* 10523 */
typedef _SESSION_HEADER *PSESSION_HEADER;

/* 10524 */
typedef _CERT_PRIVATE_KEY_VALIDITY *PCERT_PRIVATE_KEY_VALIDITY;

/* 10525 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_TRYCUSTOMDISPLAY)(unsigned int *, unsigned int, NV_CUSTOM_DISPLAY *);

/* 10526 */
typedef char hksUbyte;

/* 10527 */
typedef tagEMRPOLYLINE16 *PEMRPOLYLINE16;

/* 10528 */
typedef _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;

/* 10529 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYFEATURECONFIG)(NvDisplayHandle__ *, _NV_DISPLAY_FEATURE *);

/* 10530 */
typedef _EFS_KEY_INFO *PEFS_KEY_INFO;

/* 10531 */
typedef long double DOUBLE;

/* 10532 */
typedef tagFORMATETC *LPFORMATETC;

/* 10533 */
typedef tagWNDCLASSEXA *PWNDCLASSEXA;

/* 10534 */
typedef _SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;

/* 10535 */
typedef tagPIXELFORMATDESCRIPTOR *PPIXELFORMATDESCRIPTOR;

/* 10536 */
typedef _MODEMSETTINGS *PMODEMSETTINGS;

/* 10537 */
typedef _TOKEN_LINKED_TOKEN *PTOKEN_LINKED_TOKEN;

/* 10538 */
typedef _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTIONA;

/* 10539 */
typedef _numberfmtA *LPNUMBERFMTA;

/* 10540 */
typedef int (__cdecl *lua_CFunction)(lua_State *);

/* 10541 */
typedef int (__cdecl *PROPENUMPROCEX)(HWND__ *, char *, void *, unsigned __int64);

/* 10542 */
typedef unsigned __int16 XBlendInfo;

/* 10543 */
typedef tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMS;

/* 10544 */
typedef tagJOYCAPS2A *PJOYCAPS2;

/* 10545 */
typedef jvirt_sarray_control *jvirt_sarray_ptr;

/* 10546 */
typedef void *HPOWERNOTIFY;

/* 10547 */
typedef char *PSZ;

/* 10548 */
typedef _PORT_INFO_3A *LPPORT_INFO_3;

/* 10549 */
typedef _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;

/* 10550 */
typedef _PORT_INFO_2A *LPPORT_INFO_2;

/* 10551 */
typedef _CRYPT_SEQUENCE_OF_ANY *PCRYPT_SEQUENCE_OF_ANY;

/* 10552 */
typedef _PORT_INFO_1A *LPPORT_INFO_1;

/* 10553 */
typedef int (__cdecl *pmove_getEntityVelocity)(LocalClientNum_t, int, float *);

/* 10554 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_GETSTATUSPARAMETERS)(NvGSyncDeviceHandle__ *, _NV_GSYNC_STATUS_PARAMS *);

/* 10555 */
typedef _JOBOBJECT_LIMIT_VIOLATION_INFORMATION *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

/* 10556 */
typedef _DEVICEDUMP_PRIVATE_SUBSECTION *PDEVICEDUMP_PRIVATE_SUBSECTION;

/* 10557 */
typedef _INTERFACE_INFO *LPINTERFACE_INFO;

/* 10558 */
typedef _CERT_SYSTEM_STORE_INFO *PCERT_SYSTEM_STORE_INFO;

/* 10559 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_GETCURRENTSLISTATE)(IUnknown *, NV_GET_CURRENT_SLI_STATE *);

/* 10560 */
typedef wchar_t **PZPWSTR;

/* 10561 */
typedef tagMSGBOXPARAMSA *PMSGBOXPARAMS;

/* 10562 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETHUEINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_HUE_INFO *);

/* 10563 */
typedef _TOKEN_USER *PTOKEN_USER;

/* 10564 */
typedef _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW;

/* 10565 */
typedef unsigned __int64 bdUserGroupID;

/* 10566 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETHDCPSUPPORTSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_GET_HDCP_SUPPORT_STATUS *);

/* 10567 */
typedef char *PCH;

/* 10568 */
typedef __int64 USN;

/* 10569 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETTOPOGROUP)(NV_MOSAIC_TOPO_BRIEF *, NV_MOSAIC_TOPO_GROUP *);

/* 10570 */
typedef unsigned int JDIMENSION;

/* 10571 */
typedef _DISK_PARTITION_INFO *PDISK_PARTITION_INFO;

/* 10572 */
typedef _MINIDUMP_EXCEPTION_INFORMATION *PMINIDUMP_EXCEPTION_INFORMATION;

/* 10573 */
typedef char uch;

/* 10574 */
typedef sockaddr_in6 *LPSOCKADDR_IN6_LH;

/* 10575 */
typedef _STORAGE_IDLE_POWERUP_REASON *PSTORAGE_IDLE_POWERUP_REASON;

/* 10576 */
typedef IStorage *LPSTORAGE;

/* 10577 */
typedef int (__cdecl *LOCALE_ENUMPROCEX)(wchar_t *, unsigned int, __int64);

/* 10578 */
typedef unsigned __int16 ush;

/* 10579 */
typedef HSZ__ *HSZ;

/* 10580 */
typedef unsigned int HELPPOLY;

/* 10581 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETUPCLUSTERTOPOLOGY)(unsigned int, _NV_CLUSTER_V1 *, unsigned int *);

/* 10582 */
typedef _CTL_INFO *PCTL_INFO;

/* 10583 */
typedef IDirectSound *LPDIRECTSOUND;

/* 10584 */
typedef int (__cdecl *LPOCNCHKPROC)(unsigned __int64, unsigned __int64, void *);

/* 10585 */
typedef HDDEDATA__ *HDDEDATA;

/* 10586 */
typedef char OmnvarFlags;

/* 10587 */
typedef _DISPLAY_DEVICEA *PDISPLAY_DEVICEA;

/* 10588 */
typedef tagTTPOLYGONHEADER *LPTTPOLYGONHEADER;

/* 10589 */
typedef unsigned __int64 size_t;

/* 10590 */
typedef unsigned __int64 SIZE_T;

/* 10591 */
typedef char cbrushedge_t;

/* 10592 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_SETPRIMARYFLIPCHAINCALLBACKS)(unsigned int *, NVAPI_FLIP_CHAIN_CALLBACK_PARAMS *);

/* 10593 */
typedef void CURLM;

/* 10594 */
typedef tagTOGGLEKEYS *LPTOGGLEKEYS;

/* 10595 */
typedef _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIGA;

/* 10596 */
typedef _SOCKET_ADDRESS *LPSOCKET_ADDRESS;

/* 10597 */
typedef _CMSG_ENCRYPTED_ENCODE_INFO *PCMSG_ENCRYPTED_ENCODE_INFO;

/* 10598 */
typedef tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS;

/* 10599 */
typedef _CRYPT_TIMESTAMP_INFO *PCRYPT_TIMESTAMP_INFO;

/* 10600 */
typedef _PRINTER_NOTIFY_OPTIONS_TYPE *LPPRINTER_NOTIFY_OPTIONS_TYPE;

/* 10601 */
typedef RPC_IMPORT_CONTEXT_P *PRPC_IMPORT_CONTEXT_P;

/* 10602 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDOUTPUTSWITHLIDSTATE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 10603 */
typedef char ipadr_t[4];

/* 10604 */
typedef tagMCI_OVLY_LOAD_PARMSW *LPMCI_OVLY_LOAD_PARMSW;

/* 10605 */
typedef char *list_t[8192];

/* 10606 */
typedef _FORM_INFO_2A *PFORM_INFO_2;

/* 10607 */
typedef _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;

/* 10608 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ISRUNNING)(NvVioHandle__ *);

/* 10609 */
typedef tagTOUCH_HIT_TESTING_INPUT *PTOUCH_HIT_TESTING_INPUT;

/* 10610 */
typedef _LUID_AND_ATTRIBUTES (*PLUID_AND_ATTRIBUTES_ARRAY)[1];

/* 10611 */
typedef _TOKEN_MANDATORY_POLICY *PTOKEN_MANDATORY_POLICY;

/* 10612 */
typedef _WSAQuerySet2W *LPWSAQUERYSET2W;

/* 10613 */
typedef _CRYPT_ATTRIBUTES *PCRYPT_ATTRIBUTES;

/* 10614 */
typedef _SHNAMEMAPPINGA *LPSHNAMEMAPPINGA;

/* 10615 */
typedef unsigned __int16 *LPPATCHARRAY;

/* 10616 */
typedef joyinfo_tag *PJOYINFO;

/* 10617 */
typedef _CLASS_MEDIA_CHANGE_CONTEXT *PCLASS_MEDIA_CHANGE_CONTEXT;

/* 10618 */
typedef tagRID_DEVICE_INFO *LPRID_DEVICE_INFO;

/* 10619 */
typedef unsigned int bindex_t;

/* 10620 */
typedef tagABORTPATH *PEMRSAVEDC;

/* 10621 */
typedef _QUERY_SERVICE_CONFIGW *LPQUERY_SERVICE_CONFIGW;

/* 10622 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSYSTEMTYPE)(NvPhysicalGpuHandle__ *, NV_SYSTEM_TYPE *);

/* 10623 */
typedef _WSAQuerySet2A *LPWSAQUERYSET2A;

/* 10624 */
typedef _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1;

/* 10625 */
typedef _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY;

/* 10626 */
typedef _STORAGE_DEVICE_ID_DESCRIPTOR *PSTORAGE_DEVICE_ID_DESCRIPTOR;

/* 10627 */
typedef _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUES;

/* 10628 */
typedef tagLAYERPLANEDESCRIPTOR *LPLAYERPLANEDESCRIPTOR;

/* 10629 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETBASEPROFILE)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ **);

/* 10630 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_WRITE_CRL)(void *, _CRL_CONTEXT *, unsigned int);

/* 10631 */
typedef const float *dRealPtr;

/* 10632 */
typedef tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMSA;

/* 10633 */
typedef _PROVIDOR_INFO_2A *LPPROVIDOR_INFO_2;

/* 10634 */
typedef _REASON_CONTEXT *LPPOWER_REQUEST_CONTEXT;

/* 10635 */
typedef int (__cdecl *PFN_GetCurrentPackageId)(unsigned int *, char *);

/* 10636 */
typedef __int16 VARIANT_BOOL;

/* 10637 */
typedef tagMULTIKEYHELPA *PMULTIKEYHELPA;

/* 10638 */
typedef tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;

/* 10639 */
typedef NvDRSSessionHandle__ *NvDRSSessionHandle;

/* 10640 */
typedef void (__cdecl *unexpected_function)();

/* 10641 */
typedef OPENCARDNAMEA *POPENCARDNAMEA;

/* 10642 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETINFOFRAMESTATE)(NvDisplayHandle__ *, unsigned int, _NV_INFOFRAME_TYPE, _NV_INFOFRAME_STATE *);

/* 10643 */
typedef unsigned int U32;

/* 10644 */
typedef float TracerColor[4];

/* 10645 */
typedef _RemotableHandle *wireHMONITOR;

/* 10646 */
typedef _RemotableHandle *wireHBRUSH;

/* 10647 */
typedef _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;

/* 10648 */
typedef _COMMTIMEOUTS *LPCOMMTIMEOUTS;

/* 10649 */
typedef _PRINTER_INFO_6 *LPPRINTER_INFO_6;

/* 10650 */
typedef tagEMRSETTEXTCOLOR *PEMRSETTEXTCOLOR;

/* 10651 */
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;

/* 10652 */
typedef _FORMAT_EX_PARAMETERS *PFORMAT_EX_PARAMETERS;

/* 10653 */
typedef _CERT_CHAIN_PARA *PCERT_CHAIN_PARA;

/* 10654 */
typedef char dsmsgbuf_t[1152];

/* 10655 */
typedef _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;

/* 10656 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETINFOFRAMESTATE)(NvDisplayHandle__ *, unsigned int, _NV_INFOFRAME_TYPE, _NV_INFOFRAME_STATE *);

/* 10657 */
typedef _ACTIVATION_CONTEXT_QUERY_INDEX *PACTIVATION_CONTEXT_QUERY_INDEX;

/* 10658 */
typedef void CURL;

/* 10659 */
typedef _FILETIME *PFILETIME;

/* 10660 */
typedef _INTERNET_BUFFERSA *LPINTERNET_BUFFERSA;

/* 10661 */
typedef void __cdecl MarkFragmentCallback(void *, int, FxMarkTri *, int, FxMarkPoint *, const float *, const float *);

/* 10662 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETTVOUTPUTINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_TV_OUTPUT_INFO *);

/* 10663 */
typedef _CMS_DH_KEY_INFO *PCMS_DH_KEY_INFO;

/* 10664 */
typedef _REQUEST_OPLOCK_INPUT_BUFFER *PREQUEST_OPLOCK_INPUT_BUFFER;

/* 10665 */
typedef float F32;

/* 10666 */
typedef void __cdecl TIMECALLBACK(unsigned int, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 10667 */
typedef _CRYPTOAPI_BLOB *PCRYPT_OBJID_BLOB;

/* 10668 */
typedef _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE *PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;

/* 10669 */
typedef unsigned int ID3D10Texture2D;

/* 10670 */
typedef int (__cdecl *get_bone)(LocalClientNum_t, int, VehicleBone);

/* 10671 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETFULLNAME)(NvPhysicalGpuHandle__ *, char *);

/* 10672 */
typedef int _TINT;

/* 10673 */
typedef unsigned __int16 hist1d[32];

/* 10674 */
typedef _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIG;

/* 10675 */
typedef unsigned __int16 Posf;

/* 10676 */
typedef unsigned __int16 (*hist2d)[32];

/* 10677 */
typedef _CRYPT_CONTEXT_FUNCTIONS *PCRYPT_CONTEXT_FUNCTIONS;

/* 10678 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETSTEREOCAPS)(_NVAPI_STEREO_CAPS *);

/* 10679 */
typedef unsigned __int16 (**hist3d)[32];

/* 10680 */
typedef tagGCP_RESULTSA *LPGCP_RESULTS;

/* 10681 */
typedef void (__cdecl *PTP_WAIT_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *, _TP_WAIT *, unsigned int);

/* 10682 */
typedef int HFILE;

/* 10683 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_BINDSWAPBARRIER)(IUnknown *, unsigned int, unsigned int);

/* 10684 */
typedef void (__cdecl *lsp_unquant_func)(float *, int, SpeexBits *);

/* 10685 */
typedef _CERT_OTHER_LOGOTYPE_INFO *PCERT_OTHER_LOGOTYPE_INFO;

/* 10686 */
typedef _CMSG_SP3_COMPATIBLE_AUX_INFO *PCMSG_SP3_COMPATIBLE_AUX_INFO;

/* 10687 */
typedef char hksChar;

/* 10688 */
typedef tagACTCTXA *PACTCTXA;

/* 10689 */
typedef unsigned __int64 *PDWORD64;

/* 10690 */
typedef _FORM_INFO_2A *PFORM_INFO_2A;

/* 10691 */
typedef void (__cdecl *XMIT_HELPER_ROUTINE)(_MIDL_STUB_MESSAGE *);

/* 10692 */
typedef unsigned __int16 CustomizationPackageIndex;

/* 10693 */
typedef _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

/* 10694 */
typedef unsigned __int64 *PUINT_PTR;

/* 10695 */
typedef tagEMRSELECTCLIPPATH *PEMRSETROP2;

/* 10696 */
typedef _CSV_CONTROL_OP *PCSV_CONTROL_OP;

/* 10697 */
typedef unsigned __int16 *histptr;

/* 10698 */
typedef tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMSA;

/* 10699 */
typedef FLASHWINFO *PFLASHWINFO;

/* 10700 */
typedef int (__cdecl *PFN_CMSG_CNG_IMPORT_KEY_AGREE)(_CMSG_CNG_CONTENT_DECRYPT_INFO *, _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *, unsigned int, void *);

/* 10701 */
typedef const char *PCCH;

/* 10702 */
typedef fd_set *LPFD_SET;

/* 10703 */
typedef tagTEXTMETRICW *PTEXTMETRICW;

/* 10704 */
typedef int (__cdecl *PFN_CMSG_IMPORT_ENCRYPT_KEY)(unsigned __int64, unsigned int, _CRYPT_ALGORITHM_IDENTIFIER *, _CRYPT_ALGORITHM_IDENTIFIER *, char *, unsigned int, unsigned __int64 *);

/* 10705 */
typedef int (__cdecl *ICMENUMPROCW)(wchar_t *, __int64);

/* 10706 */
typedef ID3D11Buffer *GfxConstantBuffer;

/* 10707 */
typedef _CSADDR_INFO *LPCSADDR_INFO;

/* 10708 */
typedef void __cdecl RPC_OBJECT_INQ_FN(_GUID *, _GUID *, int *);

/* 10709 */
typedef int (__cdecl *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC)(void *, unsigned int, char *, unsigned int, void *, _CERT_PUBLIC_KEY_INFO *, unsigned int *);

/* 10710 */
typedef _WSAQuerySet2A *LPWSAQUERYSET2;

/* 10711 */
typedef unsigned __int16 *PUINT16;

/* 10712 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETSURFACECREATIONLAYOUT)(unsigned int *, _NVAPI_SURFACE_LAYOUT_STRUCT *);

/* 10713 */
typedef _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE;

/* 10714 */
typedef int (__cdecl *PFN_CMSG_GEN_ENCRYPT_KEY)(unsigned __int64 *, _CRYPT_ALGORITHM_IDENTIFIER *, void *, _CERT_PUBLIC_KEY_INFO *, void *(__cdecl *)(unsigned __int64), unsigned __int64 *, char **, unsigned int *);

/* 10715 */
typedef int bdInt;

/* 10716 */
typedef _FORM_INFO_2W *PFORM_INFO_2W;

/* 10717 */
typedef _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;

/* 10718 */
typedef unsigned int bdUInt32;

/* 10719 */
typedef _NCRYPT_KEY_BLOB_HEADER *PNCRYPT_KEY_BLOB_HEADER;

/* 10720 */
typedef DIDEVICEOBJECTINSTANCEA *LPDIDEVICEOBJECTINSTANCEA;

/* 10721 */
typedef tagMENUITEMINFOA *LPCMENUITEMINFOA;

/* 10722 */
typedef int (__cdecl *FONTENUMPROC)(tagLOGFONTA *, tagTEXTMETRICA *, unsigned int, __int64);

/* 10723 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_OVERRIDEDISPLAYMODELIST)(unsigned int, unsigned int, _NV_DISPLAY_MODE_INFO *, unsigned int);

/* 10724 */
typedef char ByteVec[3];

/* 10725 */
typedef char SECURITY_CONTEXT_TRACKING_MODE;

/* 10726 */
typedef tagLOGBRUSH *NPLOGBRUSH;

/* 10727 */
typedef _CRYPT_RETRIEVE_AUX_INFO *PCRYPT_RETRIEVE_AUX_INFO;

/* 10728 */
typedef _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

/* 10729 */
typedef tagLOGBRUSH *LPLOGBRUSH;

/* 10730 */
typedef _CONTEXT *LPCONTEXT;

/* 10731 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISABLEHWCURSOR)(NvDisplayHandle__ *);

/* 10732 */
typedef _STORAGE_IDENTIFIER_TYPE *PSTORAGE_IDENTIFIER_TYPE;

/* 10733 */
typedef char byte256;

/* 10734 */
typedef _PARTITION_INFORMATION_EX *PPARTITION_INFORMATION_EX;

/* 10735 */
typedef IMoniker *LPMONIKER;

/* 10736 */
typedef tagMCI_GETDEVCAPS_PARMS *LPMCI_GETDEVCAPS_PARMS;

/* 10737 */
typedef tagEMRSELECTCLIPPATH *PEMRSETBKMODE;

/* 10738 */
typedef _CRYPT_ECC_CMS_SHARED_INFO *PCRYPT_ECC_CMS_SHARED_INFO;

/* 10739 */
typedef _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;

/* 10740 */
typedef _DSCAPS *LPDSCAPS;

/* 10741 */
typedef _wireSAFEARRAY *wireSAFEARRAY;

/* 10742 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCINIT)(unsigned int *, void *);

/* 10743 */
typedef _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFO;

/* 10744 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTOTALSMCOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 10745 */
typedef _WSANSClassInfoW *PWSANSCLASSINFOW;

/* 10746 */
typedef tagCOLORMATCHTOTARGET *PEMRCOLORMATCHTOTARGET;

/* 10747 */
typedef tagEMRFILLPATH *PEMRSTROKEANDFILLPATH;

/* 10748 */
typedef unsigned int PEN_MASK;

/* 10749 */
typedef ExpressionSupportingData *ExpressionSupportingDataPtr;

/* 10750 */
typedef unsigned int vectorFieldHandle_t;

/* 10751 */
typedef HIMC__ *HIMC;

/* 10752 */
typedef _RTL_UMS_THREAD_INFO_CLASS *PRTL_UMS_THREAD_INFO_CLASS;

/* 10753 */
typedef char animUseArray[1640];

/* 10754 */
typedef __int16 SHORT;

/* 10755 */
typedef tagPARAMDATA *LPPARAMDATA;

/* 10756 */
typedef _DATATYPES_INFO_1W *LPDATATYPES_INFO_1W;

/* 10757 */
typedef void (__cdecl *PFIBER_START_ROUTINE)(void *);

/* 10758 */
typedef tagEXTLOGPEN *PEXTLOGPEN;

/* 10759 */
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;

/* 10760 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ENABLE)();

/* 10761 */
typedef _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;

/* 10762 */
typedef _DSCBCAPS *LPDSCBCAPS;

/* 10763 */
typedef tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTW;

/* 10764 */
typedef _WSAPROTOCOL_INFOA *LPWSAPROTOCOL_INFO;

/* 10765 */
typedef tagMCI_SEQ_SET_PARMS *LPMCI_SEQ_SET_PARMS;

/* 10766 */
typedef wavehdr_tag *LPWAVEHDR;

/* 10767 */
typedef tagMETARECORD *LPMETARECORD;

/* 10768 */
typedef int (__cdecl *CODEPAGE_ENUMPROCA)(char *);

/* 10769 */
typedef wavehdr_tag *NPWAVEHDR;

/* 10770 */
typedef char byte4096;

/* 10771 */
typedef int (__cdecl *PHANDLER_ROUTINE)(unsigned int);

/* 10772 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_SETUPTARGETBUFFERTONV12BLVIDEOSURFACE)(unsigned int *, unsigned int, void **, unsigned int, unsigned int);

/* 10773 */
typedef _DATATYPES_INFO_1A *LPDATATYPES_INFO_1A;

/* 10774 */
typedef int (__cdecl *ltp_quant_func)(float *, float *, float *, float *, float *, float *, const void *, int, int, float, int, int, SpeexBits *, char *, float *, float *, int, int, int);

/* 10775 */
typedef _DEVICE_TRIM_DESCRIPTOR *PDEVICE_TRIM_DESCRIPTOR;

/* 10776 */
typedef int (__cdecl *scriptableStaticModelTrace)(const float *, const float *, int);

/* 10777 */
typedef __int64 fileHandle_t;

/* 10778 */
typedef _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW;

/* 10779 */
typedef _DEVICE_WRITE_AGGREGATION_DESCRIPTOR *PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;

/* 10780 */
typedef _BIDI_DATA *LPBIDI_DATA;

/* 10781 */
typedef unsigned int REGSAM;

/* 10782 */
typedef tagENHMETAHEADER *LPENHMETAHEADER;

/* 10783 */
typedef _CERT_PUBLIC_KEY_INFO *PCERT_PUBLIC_KEY_INFO;

/* 10784 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_SETUPTARGETBUFFERTONV12BLVIDEOSURFACE)(IUnknown *, unsigned int, void **, unsigned int, unsigned int);

/* 10785 */
typedef VehicleTrack *VehicleTrackPtr;

/* 10786 */
typedef _FILE_TYPE_NOTIFICATION_INPUT *PFILE_TYPE_NOTIFICATION_INPUT;

/* 10787 */
typedef _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD *PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;

/* 10788 */
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATE;

/* 10789 */
typedef DLGTEMPLATE *PROPSHEETPAGE_RESOURCE;

/* 10790 */
typedef bool (__cdecl *DvarCustomLimit)(dvar_t *, DvarValue);

/* 10791 */
typedef int (__cdecl *FONTENUMPROCA)(tagLOGFONTA *, tagTEXTMETRICA *, unsigned int, __int64);

/* 10792 */
typedef _OCSP_BASIC_RESPONSE_ENTRY *POCSP_BASIC_RESPONSE_ENTRY;

/* 10793 */
typedef const char *PCNZTCH;

/* 10794 */
typedef tagMETHODDATA *LPMETHODDATA;

/* 10795 */
typedef BITMAPV5HEADER *LPBITMAPV5HEADER;

/* 10796 */
typedef const wchar_t *PCNZWCH;

/* 10797 */
typedef wchar_t *const *PCZPWSTR;

/* 10798 */
typedef _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW;

/* 10799 */
typedef _MMIOINFO *LPMMIOINFO;

/* 10800 */
typedef my_input_controller *my_inputctl_ptr;

/* 10801 */
typedef void (__cdecl *SpawnFuncCallback)(gentity_s *);

/* 10802 */
typedef dxJoint *dJointID;

/* 10803 */
typedef _MMIOINFO *NPMMIOINFO;

/* 10804 */
typedef int (__cdecl *IMCENUMPROC)(HIMC__ *, __int64);

/* 10805 */
typedef _WSANAMESPACE_INFOA *LPWSANAMESPACE_INFOA;

/* 10806 */
typedef int (__cdecl *FONTENUMPROCW)(tagLOGFONTW *, tagTEXTMETRICW *, unsigned int, __int64);

/* 10807 */
typedef int LONG32;

/* 10808 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *PRUNTIME_FUNCTION;

/* 10809 */
typedef _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;

/* 10810 */
typedef void *RPC_BINDING_HANDLE;

/* 10811 */
typedef _DEVICE_POWER_DESCRIPTOR *PDEVICE_POWER_DESCRIPTOR;

/* 10812 */
typedef tagMCI_SET_PARMS *LPMCI_SET_PARMS;

/* 10813 */
typedef int (__cdecl *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(unsigned int, _CERT_PUBLIC_KEY_INFO *, _CRYPT_ALGORITHM_IDENTIFIER *, void *, const wchar_t *, const wchar_t *, char *, unsigned int, char *, unsigned int);

/* 10814 */
typedef tagALTTABINFO *LPALTTABINFO;

/* 10815 */
typedef tagENUMLOGFONTEXA *LPENUMLOGFONTEXA;

/* 10816 */
typedef PhysPreset *PhysPresetPtr;

/* 10817 */
typedef __int64 __cdecl MMIOPROC(char *, unsigned int, __int64, __int64);

/* 10818 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_LOADSETTINGS)(NvDRSSessionHandle__ *);

/* 10819 */
typedef int (__cdecl *I_RpcProxyGetConnectionTimeoutFn)(unsigned int *);

/* 10820 */
typedef SCOPE_ID *PSCOPE_ID;

/* 10821 */
typedef IInternetZoneManager *LPURLZONEMANAGER;

/* 10822 */
typedef _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA;

/* 10823 */
typedef _OSVERSIONINFOEXA *LPOSVERSIONINFOEX;

/* 10824 */
typedef _CERT_TRUST_STATUS *PCERT_TRUST_STATUS;

/* 10825 */
typedef _CERT_CHAIN_CONTEXT *PCERT_CHAIN_CONTEXT;

/* 10826 */
typedef _CRL_INFO *PCRL_INFO;

/* 10827 */
typedef _IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;

/* 10828 */
typedef const char *PCUNZTCH;

/* 10829 */
typedef tagEXTLOGPEN32 *PEXTLOGPEN32;

/* 10830 */
typedef IOleItemContainer *LPOLEITEMCONTAINER;

/* 10831 */
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_A *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;

/* 10832 */
typedef _CTL_CONTEXT *PCCTL_CONTEXT;

/* 10833 */
typedef _TOKEN_DEVICE_CLAIMS *PTOKEN_DEVICE_CLAIMS;

/* 10834 */
typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;

/* 10835 */
typedef _WSAPROTOCOL_INFOW *LPWSAPROTOCOL_INFOW;

/* 10836 */
typedef large_pool_struct *large_pool_ptr;

/* 10837 */
typedef PhysCollmap *PhysCollmapPtr;

/* 10838 */
typedef tagTITLEBARINFO *PTITLEBARINFO;

/* 10839 */
typedef tagMIDIINCAPSA *PMIDIINCAPS;

/* 10840 */
typedef _EVENTLOGRECORD *PEVENTLOGRECORD;

/* 10841 */
typedef _RESUME_PERFORMANCE *PRESUME_PERFORMANCE;

/* 10842 */
typedef void *HCERT_SERVER_OCSP_RESPONSE;

/* 10843 */
typedef HIMCC__ *HIMCC;

/* 10844 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETLOGICALGPUFROMDISPLAY)(NvDisplayHandle__ *, NvLogicalGpuHandle__ **);

/* 10845 */
typedef _TAPE_GET_STATISTICS *PTAPE_GET_STATISTICS;

/* 10846 */
typedef _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

/* 10847 */
typedef _MANDATORY_LEVEL *PMANDATORY_LEVEL;

/* 10848 */
typedef void (__cdecl *ClipVelocityFunc)(const float *, const float *, float *);

/* 10849 */
typedef _TXFS_GET_TRANSACTED_VERSION *PTXFS_GET_TRANSACTED_VERSION;

/* 10850 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMAVAILABLESETTINGVALUES)(unsigned int, unsigned int *, _NVDRS_SETTING_VALUES *);

/* 10851 */
typedef tagEMRSELECTPALETTE *PEMRSELECTPALETTE;

/* 10852 */
typedef sockaddr_in6_w2ksp1 *PSOCKADDR_IN6_W2KSP1;

/* 10853 */
typedef void *I_RPC_MUTEX;

/* 10854 */
typedef _SID_NAME_USE *PSID_NAME_USE;

/* 10855 */
typedef unsigned int bdUInt;

/* 10856 */
typedef tagMONITORINFOEXA *LPMONITORINFOEXA;

/* 10857 */
typedef _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTION;

/* 10858 */
typedef _SENDCMDOUTPARAMS *PSENDCMDOUTPARAMS;

/* 10859 */
typedef _WSAPROTOCOL_INFOA *LPWSAPROTOCOL_INFOA;

/* 10860 */
typedef tagJOYCAPS2A *PJOYCAPS2A;

/* 10861 */
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_W *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

/* 10862 */
typedef IMarshal *LPMARSHAL;

/* 10863 */
typedef tagCANDIDATELIST *NPCANDIDATELIST;

/* 10864 */
typedef void *(__cdecl *decoder_init_func)(SpeexMode *);

/* 10865 */
typedef char ipadrstr_t[16];

/* 10866 */
typedef STORAGE_BREAK_RESERVATION_REQUEST *PSTORAGE_BREAK_RESERVATION_REQUEST;

/* 10867 */
typedef tagCANDIDATELIST *LPCANDIDATELIST;

/* 10868 */
typedef _DISK_INT13_INFO *PDISK_INT13_INFO;

/* 10869 */
typedef PPM_WMI_IDLE_STATES *PPPM_WMI_IDLE_STATES;

/* 10870 */
typedef _DATATYPES_INFO_1A *LPDATATYPES_INFO_1;

/* 10871 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_SAVECUSTOMDISPLAY)(unsigned int *, unsigned int, unsigned int, unsigned int);

/* 10872 */
typedef unsigned int hksUint32;

/* 10873 */
typedef tagLOGBRUSH32 *NPLOGBRUSH32;

/* 10874 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETCURSORSEPARATION)(void *, float);

/* 10875 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_BEGINSHARERESOURCE)(unsigned int *, void **);

/* 10876 */
typedef tagLOGBRUSH32 *LPLOGBRUSH32;

/* 10877 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_BEGINSHARERESOURCE)(unsigned int *, unsigned int, void **);

/* 10878 */
typedef unsigned __int16 KEYARRAY[128];

/* 10879 */
typedef void (__cdecl *PFN_FREE_ENCODED_OBJECT_FUNC)(const char *, _CRYPT_BLOB_ARRAY *, void *);

/* 10880 */
typedef tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMS;

/* 10881 */
typedef tagEMRPOLYDRAW *PEMRPOLYDRAW;

/* 10882 */
typedef _strflt *STRFLT;

/* 10883 */
typedef _CERT_SIMPLE_CHAIN *PCERT_SIMPLE_CHAIN;

/* 10884 */
typedef int (__cdecl *GOBJENUMPROC)(void *, __int64);

/* 10885 */
typedef int (__cdecl *UILANGUAGE_ENUMPROCA)(char *, __int64);

/* 10886 */
typedef unsigned int AppId_t;

/* 10887 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY64 *PIMAGE_LOAD_CONFIG_DIRECTORY64;

/* 10888 */
typedef int (__cdecl *PFNGETLOGICALPROCESSORINFORMATION)(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION *, unsigned int *);

/* 10889 */
typedef _PRINTER_INFO_9A *LPPRINTER_INFO_9A;

/* 10890 */
typedef addrinfoW *PADDRINFOW;

/* 10891 */
typedef int (__cdecl *PFNGETUSERDEFAULTLOCALENAME)(unsigned __int16 *, int);

/* 10892 */
typedef _DRIVER_INFO_5A *LPDRIVER_INFO_5A;

/* 10893 */
typedef tagEMRANGLEARC *PEMRANGLEARC;

/* 10894 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_ENUMHDMISTEREOMODES)(NV_HDMI_STEREO_MODES_LIST_V1 *);

/* 10895 */
typedef tagEMRPLGBLT *PEMRPLGBLT;

/* 10896 */
typedef void __cdecl SERVICE_MAIN_FUNCTIONW(unsigned int, wchar_t **);

/* 10897 */
typedef _SERVICE_NOTIFY_1 *PSERVICE_NOTIFY_1;

/* 10898 */
typedef _FILE_INITIATE_REPAIR_OUTPUT_BUFFER *PFILE_INITIATE_REPAIR_OUTPUT_BUFFER;

/* 10899 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY_2;

/* 10900 */
typedef _SD_CHANGE_MACHINE_SID_OUTPUT *PSD_CHANGE_MACHINE_SID_OUTPUT;

/* 10901 */
typedef _TXFS_CREATE_MINIVERSION_INFO *PTXFS_CREATE_MINIVERSION_INFO;

/* 10902 */
typedef unsigned __int64 (__cdecl *LPOCNCONNPROCW)(unsigned __int64, wchar_t *, wchar_t *, void *);

/* 10903 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_QUERYNONMIGRATABLEAPPS)(NV_3D_APP_INFO_V2 *, unsigned int *);

/* 10904 */
typedef _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;

/* 10905 */
typedef _CERT_EXTENSIONS *PCERT_EXTENSIONS;

/* 10906 */
typedef _flt *FLT;

/* 10907 */
typedef unsigned int ulg;

/* 10908 */
typedef char uchf;

/* 10909 */
typedef int RPC_STATUS;

/* 10910 */
typedef _PRINTER_INFO_9W *LPPRINTER_INFO_9W;

/* 10911 */
typedef tagTEXTMETRICA *PTEXTMETRIC;

/* 10912 */
typedef _RPC_ASYNC_STATE *PRPC_ASYNC_STATE;

/* 10913 */
typedef _COPYFILE2_MESSAGE_ACTION (__cdecl *PCOPYFILE2_PROGRESS_ROUTINE)(COPYFILE2_MESSAGE *, void *);

/* 10914 */
typedef unsigned __int16 ushf;

/* 10915 */
typedef _TOKEN_SOURCE *PTOKEN_SOURCE;

/* 10916 */
typedef int (__cdecl *ENUMRESTYPEPROCA)(HINSTANCE__ *, char *, __int64);

/* 10917 */
typedef _HISTOGRAM_BUCKET *PHISTOGRAM_BUCKET;

/* 10918 */
typedef _ACCESS_REASONS *PACCESS_REASONS;

/* 10919 */
typedef _STARTUPINFOEXW *LPSTARTUPINFOEXW;

/* 10920 */
typedef void (__cdecl *LPNVAPICALLSTART)(unsigned int, unsigned __int64 *);

/* 10921 */
typedef sockaddr_storage_xp *PSOCKADDR_STORAGE_XP;

/* 10922 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHDEPTHNV)(unsigned int, float);

/* 10923 */
typedef void (__cdecl *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER)(void *, _CRYPTOAPI_BLOB *);

/* 10924 */
typedef tagJOYCAPSA *LPJOYCAPSA;

/* 10925 */
typedef int (__cdecl *TIMEFMT_ENUMPROCA)(char *);

/* 10926 */
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST *PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;

/* 10927 */
typedef tagJOYCAPSA *NPJOYCAPSA;

/* 10928 */
typedef IInternetSession *LPIINTERNETSESSION;

/* 10929 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ALIASPRIMARYFROMDEVICE)(unsigned int *, unsigned int *, unsigned int, unsigned int **, NVDX_ObjectHandle__ **);

/* 10930 */
typedef _WSAQuerySetA *PWSAQUERYSETA;

/* 10931 */
typedef DRVCONFIGINFOEX *LPDRVCONFIGINFOEX;

/* 10932 */
typedef ChildVariableValue childVariableValueArray_t[102400];

/* 10933 */
typedef tagWNDCLASSA *LPWNDCLASS;

/* 10934 */
typedef _SET_PARTITION_INFORMATION_EX *PSET_PARTITION_INFORMATION_EX;

/* 10935 */
typedef float vec5_t[5];

/* 10936 */
typedef value_entA *PVALENT;

/* 10937 */
typedef DRVCONFIGINFOEX *NPDRVCONFIGINFOEX;

/* 10938 */
typedef _CREATEFILE2_EXTENDED_PARAMETERS *PCREATEFILE2_EXTENDED_PARAMETERS;

/* 10939 */
typedef tagWNDCLASSA *NPWNDCLASS;

/* 10940 */
typedef _GRADIENT_RECT *LPGRADIENT_RECT;

/* 10941 */
typedef tagMIDIOUTCAPS2A *LPMIDIOUTCAPS2;

/* 10942 */
typedef _DRIVER_INFO_4A *LPDRIVER_INFO_4A;

/* 10943 */
typedef tagMIDIOUTCAPS2A *NPMIDIOUTCAPS2;

/* 10944 */
typedef _CERT_POLICIES_INFO *PCERT_POLICIES_INFO;

/* 10945 */
typedef MenuEventHandlerSet *MenuEventHandlerSetPtr;

/* 10946 */
typedef _CERT_CONTEXT *(__cdecl *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *, unsigned int, _CERT_INFO *, void *);

/* 10947 */
typedef void (__cdecl *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE)(void *, char *);

/* 10948 */
typedef RPC_CLIENT_INFORMATION1 *PRPC_CLIENT_INFORMATION1;

/* 10949 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_DPAUXCHANNELCONTROL)(NvDisplayHandle__ *, _NV_DPCD_PARAMS_V2 *, unsigned int);

/* 10950 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_CHOOSEGPUTOPOLOGIES)(NV_MOSAIC_GRID_TOPO *, unsigned int, unsigned int, NV_GPU_TOPOLOGIES *);

/* 10951 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DELETECONFIGURATIONPROFILEREGISTRYKEY)(_NV_StereoRegistryProfileType);

/* 10952 */
typedef int (__cdecl *TIMEFMT_ENUMPROCW)(wchar_t *);

/* 10953 */
typedef _DISPATCHER_CONTEXT *PDISPATCHER_CONTEXT;

/* 10954 */
typedef _ADMINISTRATOR_POWER_POLICY *PADMINISTRATOR_POWER_POLICY;

/* 10955 */
typedef unsigned int hksBytecodeInstruction;

/* 10956 */
typedef int ControllerIndex_t;

/* 10957 */
typedef char MaterialStreamDest;

/* 10958 */
typedef tagAR_STATE *PAR_STATE;

/* 10959 */
typedef tagMCI_WAVE_SET_PARMS *PMCI_WAVE_SET_PARMS;

/* 10960 */
typedef _PSFEATURE_CUSTPAPER *PPSFEATURE_CUSTPAPER;

/* 10961 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETSURFACECREATIONMODE)(void *, _NVAPI_STEREO_SURFACECREATEMODE *);

/* 10962 */
typedef _WSAServiceClassInfoA *PWSASERVICECLASSINFO;

/* 10963 */
typedef _devicemodeA *NPDEVMODEA;

/* 10964 */
typedef tagABORTPATH *PEMRENDPATH;

/* 10965 */
typedef _WSAQuerySetW *PWSAQUERYSETW;

/* 10966 */
typedef int hksInt;

/* 10967 */
typedef _devicemodeA *LPDEVMODEA;

/* 10968 */
typedef int (__cdecl *MONITORENUMPROC)(HMONITOR__ *, HDC__ *, tagRECT *, __int64);

/* 10969 */
typedef _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;

/* 10970 */
typedef wchar_t *NWPSTR;

/* 10971 */
typedef void (__cdecl *compassActorCallbackFunc_t)(LocalClientNum_t, const float *, float);

/* 10972 */
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;

/* 10973 */
typedef tagEMRSETPALETTEENTRIES *PEMRSETPALETTEENTRIES;

/* 10974 */
typedef void (__cdecl *_Prhand)(stdext::exception *);

/* 10975 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETILLUMINATION)(_NV_GPU_SET_ILLUMINATION_PARM_V1 *);

/* 10976 */
typedef char *const *PCZPSTR;

/* 10977 */
typedef const wchar_t *LPCOLESTR;

/* 10978 */
typedef int (__cdecl *PFN_CERT_ENUM_SYSTEM_STORE)(const void *, unsigned int, _CERT_SYSTEM_STORE_INFO *, void *, void *);

/* 10979 */
typedef STARTING_VCN_INPUT_BUFFER *PSTARTING_VCN_INPUT_BUFFER;

/* 10980 */
typedef _PRINTER_NOTIFY_OPTIONS *LPPRINTER_NOTIFY_OPTIONS;

/* 10981 */
typedef int (__cdecl *ENUMRESLANGPROCW)(HINSTANCE__ *, const wchar_t *, const wchar_t *, unsigned __int16, __int64);

/* 10982 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_ENABLECURRENTTOPO)(unsigned int);

/* 10983 */
typedef _PRINTER_INFO_9A *LPPRINTER_INFO_9;

/* 10984 */
typedef sockaddr_in *PSOCKADDR_IN;

/* 10985 */
typedef tagRID_DEVICE_INFO_MOUSE *PRID_DEVICE_INFO_MOUSE;

/* 10986 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_WORKSTATIONFEATUREQUERY)(NvPhysicalGpuHandle__ *, unsigned int *, unsigned int *);

/* 10987 */
typedef int hksInt32;

/* 10988 */
typedef tagMOUSEMOVEPOINT *PMOUSEMOVEPOINT;

/* 10989 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETLIDANDDOCKINFO)(NV_LID_DOCK_PARAMS *);

/* 10990 */
typedef _RTL_BARRIER *LPSYNCHRONIZATION_BARRIER;

/* 10991 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETMOSAICVIEWPORTS)(NV_MOSAIC_GRID_TOPO *, unsigned int, unsigned int, char, unsigned int *, unsigned int *, _NV_RECT *);

/* 10992 */
typedef unsigned int *PUCSCHAR;

/* 10993 */
typedef __int64 bdChallengeResponse;

/* 10994 */
typedef _CONSOLE_SCREEN_BUFFER_INFOEX *PCONSOLE_SCREEN_BUFFER_INFOEX;

/* 10995 */
typedef unsigned __int64 UINT_PTR;

/* 10996 */
typedef tagABORTPATH *PEMRSETMETARGN;

/* 10997 */
typedef IInitializeSpy *LPINITIALIZESPY;

/* 10998 */
typedef IPersistStorage *LPPERSISTSTORAGE;

/* 10999 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_CREATEAPPLICATION)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_APPLICATION_V3 *);

/* 11000 */
typedef __int64 *PINT_PTR;

/* 11001 */
typedef _CERT_SELECT_CHAIN_PARA *PCERT_SELECT_CHAIN_PARA;

/* 11002 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETILLUMINATION)(_NV_GPU_GET_ILLUMINATION_PARM_V1 *);

/* 11003 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_OGL_EXPERTMODEDEFAULTSGET)(unsigned int *, unsigned int *, unsigned int *);

/* 11004 */
typedef unsigned __int64 *PDWORD_PTR;

/* 11005 */
typedef _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;

/* 11006 */
typedef int (__cdecl *CheckWeaponCallback)(Weapon);

/* 11007 */
typedef _LOOKUP_STREAM_FROM_CLUSTER_INPUT *PLOOKUP_STREAM_FROM_CLUSTER_INPUT;

/* 11008 */
typedef tagCURSORINFO *LPCURSORINFO;

/* 11009 */
typedef sockaddr_in6 *PSOCKADDR_IN6;

/* 11010 */
typedef PPM_PERFSTATE_DOMAIN_EVENT *PPPM_PERFSTATE_DOMAIN_EVENT;

/* 11011 */
typedef SndCurve *SndCurvePtr;

/* 11012 */
typedef VectorField *VectorFieldPtr;

/* 11013 */
typedef _CRYPT_CONTEXT_FUNCTION_PROVIDERS *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;

/* 11014 */
typedef DELETE_USN_JOURNAL_DATA *PDELETE_USN_JOURNAL_DATA;

/* 11015 */
typedef unsigned __int64 bdEntityID;

/* 11016 */
typedef group_filter *PGROUP_FILTER;

/* 11017 */
typedef unsigned __int64 SID_HASH_ENTRY;

/* 11018 */
typedef unsigned __int16 *LPKEYARRAY;

/* 11019 */
typedef void *void_pointer;

/* 11020 */
typedef HRAWINPUT__ *HRAWINPUT;

/* 11021 */
typedef _CERT_BIOMETRIC_EXT_INFO *PCERT_BIOMETRIC_EXT_INFO;

/* 11022 */
typedef int (__cdecl *PFN_CMSG_EXPORT_KEY_TRANS)(_CMSG_CONTENT_ENCRYPT_INFO *, _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *, _CMSG_KEY_TRANS_ENCRYPT_INFO *, unsigned int, void *);

/* 11023 */
typedef tagWNDCLASSA *LPWNDCLASSA;

/* 11024 */
typedef void (__cdecl *PFNSETTHREADPOOLTIMER)(_TP_TIMER *, _FILETIME *, unsigned int, unsigned int);

/* 11025 */
typedef tagDEC *LPDECIMAL;

/* 11026 */
typedef _WSAQuerySetA *PWSAQUERYSET;

/* 11027 */
typedef tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

/* 11028 */
typedef _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_BY_ISSUER_PARA;

/* 11029 */
typedef tagWNDCLASSA *NPWNDCLASSA;

/* 11030 */
typedef _WSAServiceClassInfoW *PWSASERVICECLASSINFOW;

/* 11031 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ENUMDEVICES)(NvVioHandle__ **, unsigned int *);

/* 11032 */
typedef tagENHMETARECORD *PENHMETARECORD;

/* 11033 */
typedef tagMIDIOUTCAPS2A *LPMIDIOUTCAPS2A;

/* 11034 */
typedef _CHAR_INFO *PCHAR_INFO;

/* 11035 */
typedef unsigned __int16 UnsignedShort;

/* 11036 */
typedef _DRIVER_INFO_6A *LPDRIVER_INFO_6A;

/* 11037 */
typedef void *DLL_DIRECTORY_COOKIE;

/* 11038 */
typedef tagMIDIOUTCAPS2A *NPMIDIOUTCAPS2A;

/* 11039 */
typedef _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;

/* 11040 */
typedef int hksBool;

/* 11041 */
typedef void (__cdecl *PFN_NCRYPT_FREE)(void *);

/* 11042 */
typedef _WSACOMPLETIONTYPE *LPWSACOMPLETIONTYPE;

/* 11043 */
typedef _TRANSACTION_ENLISTMENT_PAIR *PTRANSACTION_ENLISTMENT_PAIR;

/* 11044 */
typedef int __cdecl ReadFromDemo(void *, int, int);

/* 11045 */
typedef void (__cdecl *dwCSListPublisherFilesTaskSuccessCallback)(const int, const int);

/* 11046 */
typedef _CTL_USAGE_MATCH *PCTL_USAGE_MATCH;

/* 11047 */
typedef void (__cdecl *terminate_function)();

/* 11048 */
typedef _XMIT_ROUTINE_QUINTUPLE *PXMIT_ROUTINE_QUINTUPLE;

/* 11049 */
typedef tagSIZE *PSIZEL;

/* 11050 */
typedef _tagCODEBASEHOLD *LPCODEBASEHOLD;

/* 11051 */
typedef tagEMRINVERTRGN *PEMRPAINTRGN;

/* 11052 */
typedef ToneMapping *ToneMappingPtr;

/* 11053 */
typedef tagMIDIOUTCAPS2W *NPMIDIOUTCAPS2W;

/* 11054 */
typedef _M128A *PM128A;

/* 11055 */
typedef unsigned __int16 ModelLightingDest;

/* 11056 */
typedef unsigned int *PACCESS_MASK;

/* 11057 */
typedef _WSAQuerySet2A *PWSAQUERYSET2;

/* 11058 */
typedef tagMIDIOUTCAPS2W *LPMIDIOUTCAPS2W;

/* 11059 */
typedef OPENCARD_SEARCH_CRITERIAA *POPENCARD_SEARCH_CRITERIAA;

/* 11060 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_SETDISPLAYGRIDS)(NV_MOSAIC_GRID_TOPO *, unsigned int, unsigned int);

/* 11061 */
typedef char _TSCHAR;

/* 11062 */
typedef tagWNDCLASSW *NPWNDCLASSW;

/* 11063 */
typedef _SCRUB_DATA_OUTPUT *PSCRUB_DATA_OUTPUT;

/* 11064 */
typedef _WSAServiceClassInfoA *PWSASERVICECLASSINFOA;

/* 11065 */
typedef int (__cdecl *I_RpcProxyGetClientAddressFn)(void *, char *, unsigned int *);

/* 11066 */
typedef tagWNDCLASSW *LPWNDCLASSW;

/* 11067 */
typedef _MINIDUMP_USER_STREAM_INFORMATION *PMINIDUMP_USER_STREAM_INFORMATION;

/* 11068 */
typedef tagRAWINPUT *PRAWINPUT;

/* 11069 */
typedef _RemotableHandle *wireHWND;

/* 11070 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_ENABLEDYNAMICPSTATES)(NvPhysicalGpuHandle__ *, char);

/* 11071 */
typedef _QUERY_FILE_LAYOUT_INPUT *PQUERY_FILE_LAYOUT_INPUT;

/* 11072 */
typedef void (__cdecl *_PVFI)(int);

/* 11073 */
typedef ID3D11Query *GfxOcclusionQuery;

/* 11074 */
typedef textScrollDef_s *textScrollDef_ptr;

/* 11075 */
typedef int (__cdecl *PQUERYACTCTXW_FUNC)(unsigned int, void *, void *, unsigned int, void *, unsigned __int64, unsigned __int64 *);

/* 11076 */
typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATA;

/* 11077 */
typedef tagWNDCLASSEXA *NPWNDCLASSEXA;

/* 11078 */
typedef float GfxModelAmbientColor[4];

/* 11079 */
typedef const wchar_t *PCUWCHAR;

/* 11080 */
typedef tagWNDCLASSEXA *LPWNDCLASSEXA;

/* 11081 */
typedef _DRIVER_INFO_1A *LPDRIVER_INFO_1A;

/* 11082 */
typedef tagEMRSELECTCLIPPATH *PEMRSETPOLYFILLMODE;

/* 11083 */
typedef float __cdecl PerfTimerConvertFunc(unsigned int);

/* 11084 */
typedef _tagSOFTDISTINFO *LPSOFTDISTINFO;

/* 11085 */
typedef void (__cdecl *LPHANDLER_FUNCTION)(unsigned int);

/* 11086 */
typedef _ENLISTMENT_CRM_INFORMATION *PENLISTMENT_CRM_INFORMATION;

/* 11087 */
typedef tagENUMLOGFONTA *LPENUMLOGFONT;

/* 11088 */
typedef int (__cdecl *PFN_CRYPT_ENUM_KEYID_PROP)(_CRYPTOAPI_BLOB *, unsigned int, void *, void *, unsigned int, unsigned int *, void **, unsigned int *);

/* 11089 */
typedef tagWNDCLASSEXW *LPWNDCLASSEXW;

/* 11090 */
typedef _FULL_PTR_XLAT_TABLES *PFULL_PTR_XLAT_TABLES;

/* 11091 */
typedef tagWNDCLASSEXW *NPWNDCLASSEXW;

/* 11092 */
typedef int hksTokenId;

/* 11093 */
typedef tagKEYBDINPUT *PKEYBDINPUT;

/* 11094 */
typedef _DRIVER_INFO_2A *PDRIVER_INFO_2;

/* 11095 */
typedef char INT8;

/* 11096 */
typedef tagREGISTERWORDA *PREGISTERWORDA;

/* 11097 */
typedef FxImpactTable *FxImpactTablePtr;

/* 11098 */
typedef unsigned int D3D10_DRIVER_TYPE;

/* 11099 */
typedef unsigned int CALTYPE;

/* 11100 */
typedef _CRYPT_ENCRYPT_MESSAGE_PARA *PCRYPT_ENCRYPT_MESSAGE_PARA;

/* 11101 */
typedef _MONITOR_INFO_1A *PMONITOR_INFO_1;

/* 11102 */
typedef _SERVICE_START_REASON *PSERVICE_START_REASON;

/* 11103 */
typedef void (__cdecl *_PVFV)();

/* 11104 */
typedef _MONITOR_INFO_2A *PMONITOR_INFO_2;

/* 11105 */
typedef tagMCI_GENERIC_PARMS *PMCI_GENERIC_PARMS;

/* 11106 */
typedef tagPROPVARIANT *LPPROPVARIANT;

/* 11107 */
typedef NOTIFY_USER_POWER_SETTING *PNOTIFY_USER_POWER_SETTING;

/* 11108 */
typedef _SI_COPYFILE *PSI_COPYFILE;

/* 11109 */
typedef tagENHMETARECORD *LPENHMETARECORD;

/* 11110 */
typedef _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1A;

/* 11111 */
typedef _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;

/* 11112 */
typedef protoent *PPROTOENT;

/* 11113 */
typedef IStdMarshalInfo *LPSTDMARSHALINFO;

/* 11114 */
typedef _MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;

/* 11115 */
typedef IPersistStream *LPPERSISTSTREAM;

/* 11116 */
typedef tagWNDCLASSA *PWNDCLASSA;

/* 11117 */
typedef tagEMREXTESCAPE *PEMRDRAWESCAPE;

/* 11118 */
typedef int mp_err;

/* 11119 */
typedef _SCARD_ATRMASK *LPSCARD_ATRMASK;

/* 11120 */
typedef _SYSTEM_MANDATORY_LABEL_ACE *PSYSTEM_MANDATORY_LABEL_ACE;

/* 11121 */
typedef tagMONITORINFO *LPMONITORINFO;

/* 11122 */
typedef tagMSLLHOOKSTRUCT *LPMSLLHOOKSTRUCT;

/* 11123 */
typedef BSMINFO *PBSMINFO;

/* 11124 */
typedef timecaps_tag *NPTIMECAPS;

/* 11125 */
typedef _VOLUME_DISK_EXTENTS *PVOLUME_DISK_EXTENTS;

/* 11126 */
typedef unsigned int DWORD;

/* 11127 */
typedef timecaps_tag *LPTIMECAPS;

/* 11128 */
typedef tagAUXCAPS2W *PAUXCAPS2W;

/* 11129 */
typedef int (__cdecl *NAMEENUMPROCA)(char *, __int64);

/* 11130 */
typedef _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS;

/* 11131 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(void *, _CERT_CONTEXT *, unsigned int, unsigned int, const void *);

/* 11132 */
typedef _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

/* 11133 */
typedef int FxEffectFlags;

/* 11134 */
typedef float FLOAT_MULT_TYPE;

/* 11135 */
typedef unsigned __int16 StaticModelIndex;

/* 11136 */
typedef unsigned int bdULong;

/* 11137 */
typedef tagEMRARC *PEMRARC;

/* 11138 */
typedef unsigned __int64 KAFFINITY;

/* 11139 */
typedef tagENUMTEXTMETRICA *PENUMTEXTMETRICA;

/* 11140 */
typedef int (__cdecl *NAMEENUMPROCW)(wchar_t *, __int64);

/* 11141 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPHYSICALGPUFROMUNATTACHEDDISPLAY)(NvUnAttachedDisplayHandle__ *, NvPhysicalGpuHandle__ **);

/* 11142 */
typedef char _TUCHAR;

/* 11143 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_VALIDATEHCLONETOPOLOGY)(NV_HCLONE_TOPOLOGY_V1 *, unsigned int *);

/* 11144 */
typedef unsigned __int16 *PWORD;

/* 11145 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GPIOREADFROMPIN)(NvPhysicalGpuHandle__ *, NV_GPU_GPIO_PIN_DATA *);

/* 11146 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(void *, _CERT_CONTEXT *, unsigned int, unsigned int, void *, unsigned int *);

/* 11147 */
typedef unsigned __int16 UWORD;

/* 11148 */
typedef _SERVICE_FAILURE_ACTIONSW *LPSERVICE_FAILURE_ACTIONSW;

/* 11149 */
typedef const char *TempString;

/* 11150 */
typedef tagDEBUGHOOKINFO *PDEBUGHOOKINFO;

/* 11151 */
typedef _DRIVER_INFO_2W *PDRIVER_INFO_2W;

/* 11152 */
typedef _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;

/* 11153 */
typedef HGLRC__ *HGLRC;

/* 11154 */
typedef tagWNDCLASSEXA *NPWNDCLASSEX;

/* 11155 */
typedef _WGLSWAP *PWGLSWAP;

/* 11156 */
typedef XAnimParts *WeaponAnimList[124];

/* 11157 */
typedef tagWNDCLASSEXA *LPWNDCLASSEX;

/* 11158 */
typedef _FILE_MAKE_COMPATIBLE_BUFFER *PFILE_MAKE_COMPATIBLE_BUFFER;

/* 11159 */
typedef pcmwaveformat_tag *NPPCMWAVEFORMAT;

/* 11160 */
typedef tagMIXERLINECONTROLSA *LPMIXERLINECONTROLS;

/* 11161 */
typedef pcmwaveformat_tag *LPPCMWAVEFORMAT;

/* 11162 */
typedef _DRIVER_INFO_3A *LPDRIVER_INFO_3A;

/* 11163 */
typedef void (__cdecl *PFN_EXIT_PROCESS)(unsigned int);

/* 11164 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETDITHERCONTROL)(unsigned int, _NV_GPU_DITHER_CONTROL_V1 *);

/* 11165 */
typedef void (__cdecl *PTP_TIMER_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *, _TP_TIMER *);

/* 11166 */
typedef _NT_TIB64 *PNT_TIB64;

/* 11167 */
typedef _GUID *LPFMTID;

/* 11168 */
typedef int spx_int32_t;

/* 11169 */
typedef _CERT_OR_CRL_BLOB *PCERT_OR_CRL_BLOB;

/* 11170 */
typedef _FIND_NAME_HEADER *PFIND_NAME_HEADER;

/* 11171 */
typedef _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;

/* 11172 */
typedef tagBIND_OPTS3 *LPBIND_OPTS3;

/* 11173 */
typedef _DRIVER_INFO_2A *PDRIVER_INFO_2A;

/* 11174 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_FINDAPPLICATIONBYNAME)(NvDRSSessionHandle__ *, unsigned __int16 *, NvDRSProfileHandle__ **, _NVDRS_APPLICATION_V3 *);

/* 11175 */
typedef _CERT_POLICY_QUALIFIER_USER_NOTICE *PCERT_POLICY_QUALIFIER_USER_NOTICE;

/* 11176 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETDITHERCONTROL)(NvPhysicalGpuHandle__ *, unsigned int, _NVAPI_DITHER_TYPE, _NVAPI_DITHER_BITS, _NVAPI_DITHER_MODE);

/* 11177 */
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

/* 11178 */
typedef unsigned int GfxRawStateBits[3];

/* 11179 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETALLOUTPUTS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 11180 */
typedef _flowspec *PFLOWSPEC;

/* 11181 */
typedef const char *const_reference;

/* 11182 */
typedef tagUPDATELAYEREDWINDOWINFO *PUPDATELAYEREDWINDOWINFO;

/* 11183 */
typedef _PSHNOTIFY *LPPSHNOTIFY;

/* 11184 */
typedef HUMPD__ *HUMPD;

/* 11185 */
typedef _CERT_STRONG_SIGN_PARA *PCCERT_STRONG_SIGN_PARA;

/* 11186 */
typedef _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;

/* 11187 */
typedef _PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA;

/* 11188 */
typedef char *RPC_CSTR;

/* 11189 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYVIDEOINFO)(unsigned int *, _NVAPI_DX_QUERY_VIDEO_INFO *);

/* 11190 */
typedef float spx_word16_t;

/* 11191 */
typedef tagFINDREPLACEA *LPFINDREPLACEA;

/* 11192 */
typedef _CRYPT_BLOB_ARRAY *PCRYPT_BLOB_ARRAY;

/* 11193 */
typedef _PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

/* 11194 */
typedef void (__cdecl *scriptableDamageNotifyCallback)(ScriptableEventParams *, const unsigned int, const unsigned int, const unsigned int);

/* 11195 */
typedef MENUITEMTEMPLATE *PMENUITEMTEMPLATE;

/* 11196 */
typedef int (__cdecl *ABORTPROC)(HDC__ *, int);

/* 11197 */
typedef _DRIVER_INFO_2A *LPDRIVER_INFO_2A;

/* 11198 */
typedef float dVector4[4];

/* 11199 */
typedef tagEMRROUNDRECT *PEMRROUNDRECT;

/* 11200 */
typedef _TOKEN_STATISTICS *PTOKEN_STATISTICS;

/* 11201 */
typedef void (__cdecl *dwCSSuccessCallback)(const int);

/* 11202 */
typedef tagMIXERCAPSA *LPMIXERCAPS;

/* 11203 */
typedef _PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW;

/* 11204 */
typedef char *(__cdecl *db_alloc_func)(char *, unsigned int, unsigned int);

/* 11205 */
typedef _CERT_X942_DH_PARAMETERS *PCERT_X942_DH_PARAMETERS;

/* 11206 */
typedef unsigned __int16 *RPC_WSTR;

/* 11207 */
typedef _OCSP_SIGNED_REQUEST_INFO *POCSP_SIGNED_REQUEST_INFO;

/* 11208 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DESTROYSESSION)(NvDRSSessionHandle__ *);

/* 11209 */
typedef _FILE_SYSTEM_RECOGNITION_INFORMATION *PFILE_SYSTEM_RECOGNITION_INFORMATION;

/* 11210 */
typedef unsigned __int64 NCRYPT_PROV_HANDLE;

/* 11211 */
typedef _TXFS_WRITE_BACKUP_INFORMATION *PTXFS_WRITE_BACKUP_INFORMATION;

/* 11212 */
typedef tagMCI_LOAD_PARMSW *PMCI_LOAD_PARMSW;

/* 11213 */
typedef IRunnableObject *LPRUNNABLEOBJECT;

/* 11214 */
typedef void (__cdecl *RPC_SETFILTER_FUNC)(void (__cdecl *)(void *, unsigned int, int));

/* 11215 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_RESETFRAMECOUNT)(IUnknown *);

/* 11216 */
typedef char DSkelRecordBufEntry[120];

/* 11217 */
typedef _CERT_REVOCATION_STATUS *PCERT_REVOCATION_STATUS;

/* 11218 */
typedef char *(__cdecl *resample_row_func)(char *, char *, char *, int, int);

/* 11219 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PRESENT)(unsigned int *, unsigned int *, tagRECT *, tagRECT *, HWND__ *, _RGNDATA *);

/* 11220 */
typedef _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

/* 11221 */
typedef void (__cdecl *fn_pain)(gentity_s *, gentity_s *, int, const float *, const int, const float *, hitLocation_t, Weapon, bool);

/* 11222 */
typedef GfxImage *GfxImagePtr;

/* 11223 */
typedef _PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

/* 11224 */
typedef HINSTANCE__ *HMODULE;

/* 11225 */
typedef _CRYPT_OBJID_TABLE *PCRYPT_OBJID_TABLE;

/* 11226 */
typedef _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;

/* 11227 */
typedef localeinfo_struct *_locale_t;

/* 11228 */
typedef int (__cdecl *ENUMRESNAMEPROCW)(HINSTANCE__ *, const wchar_t *, wchar_t *, __int64);

/* 11229 */
typedef my_cquantizer *my_cquantize_ptr;

/* 11230 */
typedef tagEMRRESIZEPALETTE *PEMRRESIZEPALETTE;

/* 11231 */
typedef tagMCI_WAVE_DELETE_PARMS *LPMCI_WAVE_DELETE_PARMS;

/* 11232 */
typedef _PRINTER_INFO_8A *LPPRINTER_INFO_8A;

/* 11233 */
typedef tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMSA;

/* 11234 */
typedef timeval *LPTIMEVAL;

/* 11235 */
typedef _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

/* 11236 */
typedef _ADDJOB_INFO_1A *PADDJOB_INFO_1A;

/* 11237 */
typedef _PROPSHEETPAGEA_V1 *LPPROPSHEETPAGEA_V1;

/* 11238 */
typedef IAuthenticate *LPAUTHENTICATION;

/* 11239 */
typedef _PROPSHEETPAGEA_V3 *LPPROPSHEETPAGEA_V3;

/* 11240 */
typedef unsigned int (__cdecl *LPTHREAD_START_ROUTINE)(void *);

/* 11241 */
typedef _PROPSHEETPAGEA_V2 *LPPROPSHEETPAGEA_V2;

/* 11242 */
typedef tagEMRARC *PEMRCHORD;

/* 11243 */
typedef tagEMRCREATECOLORSPACEW *PEMRCREATECOLORSPACEW;

/* 11244 */
typedef _PROPSHEETPAGEA *LPPROPSHEETPAGEA_V4;

/* 11245 */
typedef _SEC_WINNT_AUTH_IDENTITY_A *PSEC_WINNT_AUTH_IDENTITY_A;

/* 11246 */
typedef _SETJMP_FLOAT128 jmp_buf[16];

/* 11247 */
typedef tagMSLLHOOKSTRUCT *PMSLLHOOKSTRUCT;

/* 11248 */
typedef _DISK_CONTROLLER_NUMBER *PDISK_CONTROLLER_NUMBER;

/* 11249 */
typedef ComputeShader *ComputeShaderPtr;

/* 11250 */
typedef _ADDJOB_INFO_1W *PADDJOB_INFO_1W;

/* 11251 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY_2A;

/* 11252 */
typedef _SYSTEM_POWER_STATE *PSYSTEM_POWER_STATE;

/* 11253 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETGPUANDOUTPUTIDFROMDISPLAYID)(unsigned int, NvPhysicalGpuHandle__ **, unsigned int *);

/* 11254 */
typedef PathData *PathDataPtr;

/* 11255 */
typedef _PRINTER_INFO_8W *LPPRINTER_INFO_8W;

/* 11256 */
typedef StringTable *StringTablePtr;

/* 11257 */
typedef _ROOT_INFO_LUID *PROOT_INFO_LUID;

/* 11258 */
typedef char snapshot_key_t[8192];

/* 11259 */
typedef NvDisplayHandle__ *NvDisplayHandle;

/* 11260 */
typedef tagPSDA *LPPAGESETUPDLG;

/* 11261 */
typedef float vec4_t[4];

/* 11262 */
typedef linger *LPLINGER;

/* 11263 */
typedef _WSANAMESPACE_INFOEXW *PWSANAMESPACE_INFOEXW;

/* 11264 */
typedef _PROCESS_MITIGATION_DEP_POLICY *PPROCESS_MITIGATION_DEP_POLICY;

/* 11265 */
typedef _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;

/* 11266 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_BINDSWAPBARRIER)(unsigned int *, unsigned int, unsigned int);

/* 11267 */
typedef tagJOYCAPSA *LPJOYCAPS;

/* 11268 */
typedef tagJOYCAPSA *NPJOYCAPS;

/* 11269 */
typedef int *_Bool_type;

/* 11270 */
typedef _EFS_PIN_BLOB *PEFS_PIN_BLOB;

/* 11271 */
typedef unsigned __int64 *PULONG_PTR;

/* 11272 */
typedef _JOB_INFO_2W *PJOB_INFO_2W;

/* 11273 */
typedef tagCOMPOSITIONFORM *PCOMPOSITIONFORM;

/* 11274 */
typedef _PLEX_READ_DATA_REQUEST *PPLEX_READ_DATA_REQUEST;

/* 11275 */
typedef const char *PCSTR;

/* 11276 */
typedef _OPEN_PRINTER_PROPS_INFOA *POPEN_PRINTER_PROPS_INFO;

/* 11277 */
typedef _FSCTL_OFFLOAD_READ_INPUT *PFSCTL_OFFLOAD_READ_INPUT;

/* 11278 */
typedef _devicemodeA *NPDEVMODE;

/* 11279 */
typedef unsigned int *PLCID;

/* 11280 */
typedef char *pointer;

/* 11281 */
typedef char *POINTER;

/* 11282 */
typedef _devicemodeA *LPDEVMODE;

/* 11283 */
typedef _CERT_KEYGEN_REQUEST_INFO *PCERT_KEYGEN_REQUEST_INFO;

/* 11284 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETPHYSICALGPUFROMDISPLAYID)(unsigned int, NvPhysicalGpuHandle__ **);

/* 11285 */
typedef _STORAGE_PREDICT_FAILURE *PSTORAGE_PREDICT_FAILURE;

/* 11286 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETFLATPANELINFO)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_FLAT_PANEL_INFO *);

/* 11287 */
typedef char transientSlotIndex_t;

/* 11288 */
typedef _WSANAMESPACE_INFOEXA *PWSANAMESPACE_INFOEXA;

/* 11289 */
typedef _TP_WAIT *PTP_WAIT;

/* 11290 */
typedef _PROCESS_MITIGATION_POLICY *PPROCESS_MITIGATION_POLICY;

/* 11291 */
typedef char u_char;

/* 11292 */
typedef ID3D11Buffer *GfxVertexBuffer;

/* 11293 */
typedef tagRAWINPUTHEADER *LPRAWINPUTHEADER;

/* 11294 */
typedef MARK_HANDLE_INFO32 *PMARK_HANDLE_INFO32;

/* 11295 */
typedef long double bdFloat64;

/* 11296 */
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

/* 11297 */
typedef DIDEVCAPS *LPDIDEVCAPS;

/* 11298 */
typedef void *RPC_NS_HANDLE;

/* 11299 */
typedef _CERT_POLICY_INFO *PCERT_POLICY_INFO;

/* 11300 */
typedef tagEMRCREATECOLORSPACE *PEMRCREATECOLORSPACE;

/* 11301 */
typedef void *(__cdecl *LPNVAPIQUERYINTERFACE)(unsigned int);

/* 11302 */
typedef _CERT_AUTHORITY_INFO_ACCESS *PCERT_SUBJECT_INFO_ACCESS;

/* 11303 */
typedef _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

/* 11304 */
typedef void (__cdecl *free_func)(char *, char *);

/* 11305 */
typedef _DRIVERSTATUS *LPDRIVERSTATUS;

/* 11306 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATETEXTURE)(unsigned int *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int **, NVDX_ObjectHandle__ **);

/* 11307 */
typedef _PRINTER_INFO_8A *LPPRINTER_INFO_8;

/* 11308 */
typedef int (__cdecl *OUTPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);

/* 11309 */
typedef _ADDJOB_INFO_1A *PADDJOB_INFO_1;

/* 11310 */
typedef StructuredDataDefSet *StructuredDataDefSetPtr;

/* 11311 */
typedef const wchar_t *LPCWCHAR;

/* 11312 */
typedef int int_fast16_t;

/* 11313 */
typedef tagMONHSZSTRUCTW *PMONHSZSTRUCTW;

/* 11314 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_I2CREADEX)(NvPhysicalGpuHandle__ *, NV_I2C_INFO_V3 *, NV_I2C_INFO_EX *);

/* 11315 */
typedef _JOB_INFO_1W *PJOB_INFO_1W;

/* 11316 */
typedef int (__cdecl *PFNINITIALIZECRITICALSECTIONEX)(_RTL_CRITICAL_SECTION *, unsigned int, unsigned int);

/* 11317 */
typedef void *mspace;

/* 11318 */
typedef _SMALL_RECT *PSMALL_RECT;

/* 11319 */
typedef _PROPSHEETPAGEW *LPPROPSHEETPAGEW;

/* 11320 */
typedef _STORAGE_DEVICE_DESCRIPTOR *PSTORAGE_DEVICE_DESCRIPTOR;

/* 11321 */
typedef unsigned int PhysicalItemId_t;

/* 11322 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_TRANSFERRENDERTARGET)(IUnknown *, void **, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);

/* 11323 */
typedef _CERT_LOGOTYPE_INFO *PCERT_LOGOTYPE_INFO;

/* 11324 */
typedef _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO;

/* 11325 */
typedef _RTL_BARRIER *PSYNCHRONIZATION_BARRIER;

/* 11326 */
typedef _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;

/* 11327 */
typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;

/* 11328 */
typedef char edgeCount_t[3];

/* 11329 */
typedef tagCHARSETINFO *PCHARSETINFO;

/* 11330 */
typedef char _Byte;

/* 11331 */
typedef _OPEN_PRINTER_PROPS_INFOW *POPEN_PRINTER_PROPS_INFOW;

/* 11332 */
typedef __int16 _I16;

/* 11333 */
typedef int (__cdecl *LANGGROUPLOCALE_ENUMPROCW)(unsigned int, unsigned int, wchar_t *, __int64);

/* 11334 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SYNCFORMATDETECT)(NvVioHandle__ *, unsigned int *);

/* 11335 */
typedef tagPSDA *LPPAGESETUPDLGA;

/* 11336 */
typedef char TBYTE;

/* 11337 */
typedef _CRYPT_SMIME_CAPABILITIES *PCRYPT_SMIME_CAPABILITIES;

/* 11338 */
typedef IHttpSecurity *LPHTTPSECURITY;

/* 11339 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSCANOUTCONFIGURATION)(unsigned int, NvSBox *, NvSBox *);

/* 11340 */
typedef char *PBYTE;

/* 11341 */
typedef tagEMRELLIPSE *PEMRRECTANGLE;

/* 11342 */
typedef tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYLINE16;

/* 11343 */
typedef unsigned int UHALF_PTR;

/* 11344 */
typedef IPersistMoniker *LPPERSISTMONIKER;

/* 11345 */
typedef _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;

/* 11346 */
typedef tagMCI_WAVE_OPEN_PARMSW *LPMCI_WAVE_OPEN_PARMSW;

/* 11347 */
typedef _GUID *LPCLSID;

/* 11348 */
typedef _OPEN_PRINTER_PROPS_INFOA *POPEN_PRINTER_PROPS_INFOA;

/* 11349 */
typedef unsigned __int64 NCRYPT_HANDLE;

/* 11350 */
typedef _WSAQuerySet2A *PWSAQUERYSET2A;

/* 11351 */
typedef OPENCARD_SEARCH_CRITERIAA *POPENCARD_SEARCH_CRITERIA;

/* 11352 */
typedef int *PHALF_PTR;

/* 11353 */
typedef char GfxSamplerState;

/* 11354 */
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

/* 11355 */
typedef _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

/* 11356 */
typedef tagLOGBRUSH *PPATTERN;

/* 11357 */
typedef unsigned int spx_uint32_t;

/* 11358 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_HYBRID_QUERYUNBLOCKEDNONMIGRATABLEAPPS)(NV_HYBRID_APP_INFO *, unsigned int *);

/* 11359 */
typedef _WSANSClassInfoA *PWSANSCLASSINFO;

/* 11360 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETECCCONFIGURATIONINFO)(NvPhysicalGpuHandle__ *, NV_GPU_ECC_CONFIGURATION_INFO *);

/* 11361 */
typedef tagAUDIODESCRIPTION *LPAUDIODESCRIPTION;

/* 11362 */
typedef void (__cdecl *PBAD_MEMORY_CALLBACK_ROUTINE)();

/* 11363 */
typedef tagEMRFRAMERGN *PEMRFRAMERGN;

/* 11364 */
typedef _PARTITION_INFORMATION *PPARTITION_INFORMATION;

/* 11365 */
typedef _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

/* 11366 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_STATUS)(NvVioHandle__ *, _NVVIOSTATUS *);

/* 11367 */
typedef _WSANAMESPACE_INFOEXA *PWSANAMESPACE_INFOEX;

/* 11368 */
typedef unsigned __int16 uint16_t;

/* 11369 */
typedef int (__cdecl *LANGGROUPLOCALE_ENUMPROCA)(unsigned int, unsigned int, char *, __int64);

/* 11370 */
typedef void *BCRYPT_HANDLE;

/* 11371 */
typedef tagPSDW *LPPAGESETUPDLGW;

/* 11372 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMPROFILES)(NvDRSSessionHandle__ *, unsigned int, NvDRSProfileHandle__ **);

/* 11373 */
typedef int (__cdecl *PFN_CRYPT_CANCEL_RETRIEVAL)(unsigned int, void *);

/* 11374 */
typedef _GP_LOG_PAGE_DESCRIPTOR *PGP_LOG_PAGE_DESCRIPTOR;

/* 11375 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ACTIVATE)(void *);

/* 11376 */
typedef _CERT_BASIC_CONSTRAINTS2_INFO *PCERT_BASIC_CONSTRAINTS2_INFO;

/* 11377 */
typedef tagMINIMIZEDMETRICS *LPMINIMIZEDMETRICS;

/* 11378 */
typedef jpeg_compress_struct *j_compress_ptr;

/* 11379 */
typedef _CRYPT_AES_256_KEY_STATE *PCRYPT_AES_256_KEY_STATE;

/* 11380 */
typedef tagDROPSTRUCT *LPDROPSTRUCT;

/* 11381 */
typedef unsigned __int64 AssetClassId_t;

/* 11382 */
typedef _CMSG_CMS_SIGNER_INFO *PCMSG_CMS_SIGNER_INFO;

/* 11383 */
typedef tagENUMLOGFONTA *LPENUMLOGFONTA;

/* 11384 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETVIDEOSTATE)(unsigned int *, _NVAPI_SET_VIDEO_STATE_COMPONENT *);

/* 11385 */
typedef _CRYPT_ATTRIBUTE_TYPE_VALUE *PCRYPT_ATTRIBUTE_TYPE_VALUE;

/* 11386 */
typedef unsigned int *LPDWORD;

/* 11387 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETBUSSLOTID)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 11388 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *__cdecl GET_RUNTIME_FUNCTION_CALLBACK(unsigned __int64, void *);

/* 11389 */
typedef _PROPSHEETHEADERA_V1 *LPPROPSHEETHEADERA_V1;

/* 11390 */
typedef _LIST_ENTRY *PLIST_ENTRY;

/* 11391 */
typedef int SndPlaybackId;

/* 11392 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPVEXTPROFILE)(NvDisplayHandle__ *, unsigned int *);

/* 11393 */
typedef const unsigned int *PCUUCSCHAR;

/* 11394 */
typedef _PROPSHEETHEADERA_V2 *LPPROPSHEETHEADERA_V2;

/* 11395 */
typedef _CRYPT_DECRYPT_MESSAGE_PARA *PCRYPT_DECRYPT_MESSAGE_PARA;

/* 11396 */
typedef tagREGISTERWORDA *PREGISTERWORD;

/* 11397 */
typedef _WSANAMESPACE_INFOA *PWSANAMESPACE_INFO;

/* 11398 */
typedef void (__cdecl *ScriptableCallbackSetter)(char *, const char *, int, unsigned int);

/* 11399 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETSUPPORTEDTOPOINFO)(NV_MOSAIC_SUPPORTED_TOPO_INFO *, NV_MOSAIC_TOPO_TYPE);

/* 11400 */
typedef tagEXTLOGPEN32 *LPEXTLOGPEN32;

/* 11401 */
typedef _CERT_REVOCATION_CHAIN_PARA *PCERT_REVOCATION_CHAIN_PARA;

/* 11402 */
typedef unsigned int BinOpr;

/* 11403 */
typedef HCOLORSPACE__ *HCOLORSPACE;

/* 11404 */
typedef tagEXTLOGPEN32 *NPEXTLOGPEN32;

/* 11405 */
typedef _DRIVER_INFO_3A *PDRIVER_INFO_3;

/* 11406 */
typedef int LSTATUS;

/* 11407 */
typedef unsigned __int16 int_type;

/* 11408 */
typedef _PRINTER_NOTIFY_INFO_DATA *PPRINTER_NOTIFY_INFO_DATA;

/* 11409 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETPVEXTPROFILE)(NvDisplayHandle__ *, unsigned int);

/* 11410 */
typedef _CRYPTOAPI_BLOB *PCERT_NAME_BLOB;

/* 11411 */
typedef char bdNChar8;

/* 11412 */
typedef DIPROPHEADER *LPCDIPROPHEADER;

/* 11413 */
typedef _GROUP_AFFINITY *PGROUP_AFFINITY;

/* 11414 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSW *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

/* 11415 */
typedef _DRIVER_INFO_8A *LPDRIVER_INFO_8A;

/* 11416 */
typedef _POWER_PLATFORM_ROLE *PPOWER_PLATFORM_ROLE;

/* 11417 */
typedef _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;

/* 11418 */
typedef unsigned __int16 NvU16;

/* 11419 */
typedef void (__cdecl *decoder_destroy_func)(void *);

/* 11420 */
typedef _TXFS_TRANSACTION_ACTIVE_INFO *PTXFS_TRANSACTION_ACTIVE_INFO;

/* 11421 */
typedef _STORAGE_LB_PROVISIONING_MAP_RESOURCES *PSTORAGE_LB_PROVISIONING_MAP_RESOURCES;

/* 11422 */
typedef tagICONMETRICSA *PICONMETRICS;

/* 11423 */
typedef OPENCARDNAME_EXA *POPENCARDNAME_EX;

/* 11424 */
typedef void __cdecl HANDLER_FUNCTION(unsigned int);

/* 11425 */
typedef _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;

/* 11426 */
typedef unsigned __int64 ulong64;

/* 11427 */
typedef unsigned __int64 ULONG64;

/* 11428 */
typedef unsigned __int64 DWORD_PTR;

/* 11429 */
typedef _ICONINFOEXA *PICONINFOEX;

/* 11430 */
typedef _TRANSACTION_LIST_INFORMATION *PTRANSACTION_LIST_INFORMATION;

/* 11431 */
typedef __int64 *PLONG64;

/* 11432 */
typedef tagWNDCLASSA *PWNDCLASS;

/* 11433 */
typedef unsigned int BSPSURF_COUNT_TYPE;

/* 11434 */
typedef tagTPMPARAMS *LPTPMPARAMS;

/* 11435 */
typedef _DRIVE_LAYOUT_INFORMATION_EX *PDRIVE_LAYOUT_INFORMATION_EX;

/* 11436 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_GETCONTROLPARAMETERS)(NvGSyncDeviceHandle__ *, _NV_GSYNC_CONTROL_PARAMS *);

/* 11437 */
typedef unsigned int *intrnman;

/* 11438 */
typedef SCARD_READERSTATEA *LPSCARD_READERSTATE;

/* 11439 */
typedef _SERVICE_TABLE_ENTRYW *LPSERVICE_TABLE_ENTRYW;

/* 11440 */
typedef tagBITMAPINFO *LPBITMAPINFO;

/* 11441 */
typedef char GfxZoneConstantBufferHandle;

/* 11442 */
typedef unsigned int uLongf;

/* 11443 */
typedef char NvAPI_ShortString[64];

/* 11444 */
typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;

/* 11445 */
typedef _BYTE_BLOB *UP_BYTE_BLOB;

/* 11446 */
typedef void (__cdecl *PFNFREELIBRARYWHENCALLBACKRETURNS)(_TP_CALLBACK_INSTANCE *, HINSTANCE__ *);

/* 11447 */
typedef mmtime_tag *PMMTIME;

/* 11448 */
typedef void **RPC_EP_INQ_HANDLE;

/* 11449 */
typedef _RemotableHandle *wireHMENU;

/* 11450 */
typedef _CSV_NAMESPACE_INFO *PCSV_NAMESPACE_INFO;

/* 11451 */
typedef unsigned int IDirect3DDevice9;

/* 11452 */
typedef void (__cdecl *CS_TAG_GETTING_ROUTINE)(void *, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

/* 11453 */
typedef tagPELARRAY *PPELARRAY;

/* 11454 */
typedef XModelSurfs *XModelSurfsPtr;

/* 11455 */
typedef int (__cdecl *PFN_CMSG_EXPORT_ENCRYPT_KEY)(unsigned __int64, unsigned __int64, _CERT_PUBLIC_KEY_INFO *, char *, unsigned int *);

/* 11456 */
typedef _DRIVER_INFO_3W *PDRIVER_INFO_3W;

/* 11457 */
typedef tagEMRSETPIXELV *PEMRSETPIXELV;

/* 11458 */
typedef _WSANAMESPACE_INFOW *PWSANAMESPACE_INFOW;

/* 11459 */
typedef void (__cdecl *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(char *, void *);

/* 11460 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCGETHANDLESIZE)(unsigned int *, unsigned int *, unsigned int *);

/* 11461 */
typedef hks::dlmalloc::malloc_state *mstate;

/* 11462 */
typedef _CERT_SIGNED_CONTENT_INFO *PCERT_SIGNED_CONTENT_INFO;

/* 11463 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYIDBYDISPLAYNAME)(const char *, unsigned int *);

/* 11464 */
typedef _CRYPT_CONTENT_INFO *PCRYPT_CONTENT_INFO;

/* 11465 */
typedef void (__cdecl *LPFN_FREEADDRINFOEXW)(addrinfoexW *);

/* 11466 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_LOCK)(unsigned int *, NVDX_ObjectHandle__ *, unsigned int, void **, unsigned int *);

/* 11467 */
typedef void (__cdecl *PPS_POST_PROCESS_INIT_ROUTINE)();

/* 11468 */
typedef _FLAGGED_WORD_BLOB *wireBSTR;

/* 11469 */
typedef _TOKEN_AUDIT_POLICY *PTOKEN_AUDIT_POLICY;

/* 11470 */
typedef _WSANAMESPACE_INFOA *PWSANAMESPACE_INFOA;

/* 11471 */
typedef tagRID_DEVICE_INFO_HID *PRID_DEVICE_INFO_HID;

/* 11472 */
typedef tagBIND_OPTS2 *LPBIND_OPTS2;

/* 11473 */
typedef void *(__cdecl *PFN_CRYPT_ALLOC)(unsigned __int64);

/* 11474 */
typedef _DRIVER_INFO_3A *PDRIVER_INFO_3A;

/* 11475 */
typedef int ISLOW_MULT_TYPE;

/* 11476 */
typedef _FILE_ALLOCATED_RANGE_BUFFER *PFILE_ALLOCATED_RANGE_BUFFER;

/* 11477 */
typedef _QUOTA_LIMITS_EX *PQUOTA_LIMITS_EX;

/* 11478 */
typedef void *(__cdecl *bdAllocateFunc)(const unsigned __int64);

/* 11479 */
typedef tagEMREXTCREATEFONTINDIRECTW *PEMREXTCREATEFONTINDIRECTW;

/* 11480 */
typedef __int64 int64_t;

/* 11481 */
typedef int scr_func_t;

/* 11482 */
typedef LuaFile *LuaFilePtr;

/* 11483 */
typedef void __cdecl copy_rgb_to_output(char *, char, char, char);

/* 11484 */
typedef _SE_SECURITY_DESCRIPTOR *PSE_SECURITY_DESCRIPTOR;

/* 11485 */
typedef _FSCTL_OFFLOAD_WRITE_OUTPUT *PFSCTL_OFFLOAD_WRITE_OUTPUT;

/* 11486 */
typedef _wireBRECORD *wireBRECORD;

/* 11487 */
typedef tagFINDREPLACEA *LPFINDREPLACE;

/* 11488 */
typedef tagMCI_PLAY_PARMS *PMCI_PLAY_PARMS;

/* 11489 */
typedef unsigned int FxSparkFountainClusterHandle;

/* 11490 */
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;

/* 11491 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_TRANSFERRENDERTARGETTONV12BLVIDEOSURFACE)(unsigned int *, unsigned int, unsigned int, unsigned int);

/* 11492 */
typedef tagBITMAPCOREINFO *LPBITMAPCOREINFO;

/* 11493 */
typedef int __time32_t;

/* 11494 */
typedef tagICONMETRICSA *PICONMETRICSA;

/* 11495 */
typedef OPENCARDNAME_EXA *POPENCARDNAME_EXA;

/* 11496 */
typedef _PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;

/* 11497 */
typedef _RPC_POLICY *PRPC_POLICY;

/* 11498 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO64;

/* 11499 */
typedef _CRYPT_PROVIDER_REFS *PCRYPT_PROVIDER_REFS;

/* 11500 */
typedef _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;

/* 11501 */
typedef HMMIO__ *HMMIO;

/* 11502 */
typedef tagMIXERLINEA *LPMIXERLINE;

/* 11503 */
typedef tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT;

/* 11504 */
typedef _UNWIND_HISTORY_TABLE_ENTRY *PUNWIND_HISTORY_TABLE_ENTRY;

/* 11505 */
typedef tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX;

/* 11506 */
typedef _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];

/* 11507 */
typedef _JOB_INFO_4W *PJOB_INFO_4W;

/* 11508 */
typedef tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX;

/* 11509 */
typedef _DEVICE_MEDIA_INFO *PDEVICE_MEDIA_INFO;

/* 11510 */
typedef _OCSP_REQUEST_INFO *POCSP_REQUEST_INFO;

/* 11511 */
typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;

/* 11512 */
typedef _FSCTL_OFFLOAD_WRITE_INPUT *PFSCTL_OFFLOAD_WRITE_INPUT;

/* 11513 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETCOOLERLEVELS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_SETCOOLER_LEVEL_V2 *);

/* 11514 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_STRETCHRECT)(unsigned int *, NVDX_ObjectHandle__ *, tagRECT *, NVDX_ObjectHandle__ *, tagRECT *, unsigned int);

/* 11515 */
typedef __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO;

/* 11516 */
typedef _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;

/* 11517 */
typedef _MEMORY_BASIC_INFORMATION32 *PMEMORY_BASIC_INFORMATION32;

/* 11518 */
typedef _MINIDUMP_CALLBACK_INPUT *PMINIDUMP_CALLBACK_INPUT;

/* 11519 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_QUERYMAXSWAPGROUP)(IUnknown *, unsigned int *, unsigned int *);

/* 11520 */
typedef VehicleDef *VehicleDefPtr;

/* 11521 */
typedef _CMC_TAGGED_OTHER_MSG *PCMC_TAGGED_OTHER_MSG;

/* 11522 */
typedef tagICONMETRICSW *PICONMETRICSW;

/* 11523 */
typedef unsigned __int64 (__cdecl *LPPRINTHOOKPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 11524 */
typedef OPENCARDNAME_EXW *POPENCARDNAME_EXW;

/* 11525 */
typedef _PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;

/* 11526 */
typedef unsigned __int64 *PSCARDCONTEXT;

/* 11527 */
typedef _SESSION_BUFFER *PSESSION_BUFFER;

/* 11528 */
typedef tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMSA;

/* 11529 */
typedef NvMonitorHandle__ *NvMonitorHandle;

/* 11530 */
typedef bool (__cdecl *isGlassSolidCallback_t)(unsigned int);

/* 11531 */
typedef _APPLICATIONLAUNCH_SETTING_VALUE *PAPPLICATIONLAUNCH_SETTING_VALUE;

/* 11532 */
typedef char uint_fast8_t;

/* 11533 */
typedef const char *const_pointer;

/* 11534 */
typedef USN_RECORD_V3 *PUSN_RECORD_V3;

/* 11535 */
typedef tagEMROFFSETCLIPRGN *PEMROFFSETCLIPRGN;

/* 11536 */
typedef _WSAESETSERVICEOP *LPWSAESETSERVICEOP;

/* 11537 */
typedef _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUESA;

/* 11538 */
typedef _CMSG_KEY_TRANS_ENCRYPT_INFO *PCMSG_KEY_TRANS_ENCRYPT_INFO;

/* 11539 */
typedef _CERT_TEMPLATE_EXT *PCERT_TEMPLATE_EXT;

/* 11540 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTPSTATE)(NvPhysicalGpuHandle__ *, _NV_GPU_PERF_PSTATE_ID *);

/* 11541 */
typedef XGlobals *XGlobalsPtr;

/* 11542 */
typedef _CRYPTOAPI_BLOB *PCRYPT_DIGEST_BLOB;

/* 11543 */
typedef _PRINTER_NOTIFY_INFO *LPPRINTER_NOTIFY_INFO;

/* 11544 */
typedef tagNONCLIENTMETRICSW *PNONCLIENTMETRICSW;

/* 11545 */
typedef int INT;

/* 11546 */
typedef int (__cdecl *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET)(void *, _CRYPTOAPI_BLOB *, unsigned int, _CRYPTOAPI_BLOB *, char **, unsigned int *, const wchar_t **, _CRYPTOAPI_BLOB **);

/* 11547 */
typedef _RPC_SERVER_INTERFACE *PRPC_SERVER_INTERFACE;

/* 11548 */
typedef _MINIDUMP_CALLBACK_OUTPUT *PMINIDUMP_CALLBACK_OUTPUT;

/* 11549 */
typedef _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESS;

/* 11550 */
typedef wchar_t **SNB;

/* 11551 */
typedef tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMS;

/* 11552 */
typedef char (__cdecl *PSECURE_MEMORY_CACHE_CALLBACK)(void *, unsigned __int64);

/* 11553 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVBIOSREVISION)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 11554 */
typedef _PRINTER_ENUM_VALUESW *PPRINTER_ENUM_VALUESW;

/* 11555 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURAGETSTATE)(_NVAPI_VENTURA_STATE *);

/* 11556 */
typedef tagEMRPOLYLINE *PEMRPOLYGON;

/* 11557 */
typedef _NOTIFYICONDATAW *PNOTIFYICONDATAW;

/* 11558 */
typedef char *(__cdecl *curl_strdup_callback)(const char *);

/* 11559 */
typedef linger *PLINGER;

/* 11560 */
typedef char min_msg_buf[2048];

/* 11561 */
typedef tagMETAFILEPICT *LPMETAFILEPICT;

/* 11562 */
typedef midiproptempo_tag *LPMIDIPROPTEMPO;

/* 11563 */
typedef _MINIDUMP_USER_STREAM *PMINIDUMP_USER_STREAM;

/* 11564 */
typedef _FILE_END_OF_FILE_INFO *PFILE_END_OF_FILE_INFO;

/* 11565 */
typedef unsigned int LCID;

/* 11566 */
typedef HICON__ *HICON;

/* 11567 */
typedef int result;

/* 11568 */
typedef TracerDef *TracerDefPtr;

/* 11569 */
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

/* 11570 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDSLIOUTPUTSWITHLIDSTATE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 11571 */
typedef tagACCEL *LPACCEL;

/* 11572 */
typedef void (__cdecl *PhysOnCollisionCallback)(__int64, __int64);

/* 11573 */
typedef char *HPSTR;

/* 11574 */
typedef unsigned __int16 FxChildHandle;

/* 11575 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETSUPPORTEDVIEWS)(NvDisplayHandle__ *, _NV_TARGET_VIEW_MODE *, unsigned int *);

/* 11576 */
typedef _SLIST_ENTRY *PSLIST_ENTRY;

/* 11577 */
typedef tagMIDIOUTCAPSA *NPMIDIOUTCAPS;

/* 11578 */
typedef char *LPSTR;

/* 11579 */
typedef __int64 int_least64_t;

/* 11580 */
typedef tagBITMAP *PBITMAP;

/* 11581 */
typedef tagMIDIOUTCAPSA *LPMIDIOUTCAPS;

/* 11582 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEVIDEO)(unsigned int *, NV_DX_CREATE_VIDEO_PARAMS2 *);

/* 11583 */
typedef char *NPSTR;

/* 11584 */
typedef MARK_HANDLE_INFO *PMARK_HANDLE_INFO;

/* 11585 */
typedef int (__cdecl *PFNCOMPARESTRINGEX)(const wchar_t *, unsigned int, const wchar_t *, int, const wchar_t *, int, _nlsversioninfo *, void *, __int64);

/* 11586 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SAVESETTINGS)(NvDRSSessionHandle__ *);

/* 11587 */
typedef _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;

/* 11588 */
typedef HWINEVENTHOOK__ *HWINEVENTHOOK;

/* 11589 */
typedef _PROCESSOR_RELATIONSHIP *PPROCESSOR_RELATIONSHIP;

/* 11590 */
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;

/* 11591 */
typedef tagMONLINKSTRUCT *PMONLINKSTRUCT;

/* 11592 */
typedef HBITMAP__ *HBITMAP;

/* 11593 */
typedef void *PSID;

/* 11594 */
typedef _ELEMENT_TYPE *PELEMENT_TYPE;

/* 11595 */
typedef char FxElemLitType;

/* 11596 */
typedef char transientPoolIndex_t;

/* 11597 */
typedef _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;

/* 11598 */
typedef _TP_IO *PTP_IO;

/* 11599 */
typedef IMalloc *LPMALLOC;

/* 11600 */
typedef IMallocSpy *LPMALLOCSPY;

/* 11601 */
typedef _JOB_SET_ARRAY *PJOB_SET_ARRAY;

/* 11602 */
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;

/* 11603 */
typedef _nlsversioninfo *LPNLSVERSIONINFO;

/* 11604 */
typedef _CRYPT_PKCS8_EXPORT_PARAMS *PCRYPT_PKCS8_EXPORT_PARAMS;

/* 11605 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_EVENT_UNREGISTERCALLBACK)(NvEventHandle__ *);

/* 11606 */
typedef _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUES;

/* 11607 */
typedef _CERT_POLICY_MAPPINGS_INFO *PCERT_POLICY_MAPPINGS_INFO;

/* 11608 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILE;

/* 11609 */
typedef _CRYPT_VERIFY_MESSAGE_PARA *PCRYPT_VERIFY_MESSAGE_PARA;

/* 11610 */
typedef IStream *LPSTREAM;

/* 11611 */
typedef tagMCI_OVLY_OPEN_PARMSW *PMCI_OVLY_OPEN_PARMSW;

/* 11612 */
typedef const volatile int const_volatile_int32;

/* 11613 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYSWAPGROUP)(unsigned int *, unsigned int *, unsigned int *, unsigned int *);

/* 11614 */
typedef const unsigned __int16 *RPC_CWSTR;

/* 11615 */
typedef sockaddr_storage *LPSOCKADDR_STORAGE_LH;

/* 11616 */
typedef addrinfoexA *PADDRINFOEX;

/* 11617 */
typedef int (__cdecl *PFN_CRYPT_ENUM_OID_FUNC)(unsigned int, const char *, const char *, unsigned int, const unsigned int *, const wchar_t *const *, const char *const *, const unsigned int *, void *);

/* 11618 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_SETDEPTHBOUNDSTEST)(unsigned int *, unsigned int, float, float);

/* 11619 */
typedef unsigned int TP_WAIT_RESULT;

/* 11620 */
typedef tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMSA;

/* 11621 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_SETDEPTHBOUNDSTEST)(unsigned int *, unsigned int, float, float);

/* 11622 */
typedef _WSAEcomparator *LPWSAECOMPARATOR;

/* 11623 */
typedef _DEVICE_DATA_SET_REPAIR_PARAMETERS *PDEVICE_DATA_SET_REPAIR_PARAMETERS;

/* 11624 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETDEFAULTPROFILE)(const char *);

/* 11625 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTTHERMALPOLICIESSETSTATUS)(NvPhysicalGpuHandle__ *, _NV_GPU_CLIENT_THERMAL_POLICIES_STATUS_V2 *);

/* 11626 */
typedef _CRYPT_CONTEXT_CONFIG *PCRYPT_CONTEXT_CONFIG;

/* 11627 */
typedef tagRAWKEYBOARD *PRAWKEYBOARD;

/* 11628 */
typedef RPC_INTERFACE_TEMPLATEW *PRPC_INTERFACE_TEMPLATEW;

/* 11629 */
typedef unsigned int (__cdecl *PFE_IMPORT_FUNC)(char *, void *, unsigned int *);

/* 11630 */
typedef void (__cdecl *pmove_botStuckCheck)(const float *, const float *, playerState_s *, float, int);

/* 11631 */
typedef _NETRESOURCEW *LPNETRESOURCEW;

/* 11632 */
typedef _RTL_CRITICAL_SECTION_DEBUG *LPCRITICAL_SECTION_DEBUG;

/* 11633 */
typedef __int64 intmax_t;

/* 11634 */
typedef tagRAWHID *LPRAWHID;

/* 11635 */
typedef _RGNDATA *PRGNDATA;

/* 11636 */
typedef _RTL_CRITICAL_SECTION *LPCRITICAL_SECTION;

/* 11637 */
typedef void __cdecl MIDICALLBACK(HDRVR__ *, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 11638 */
typedef _CMSG_STREAM_INFO *PCMSG_STREAM_INFO;

/* 11639 */
typedef int LOCFSERROR;

/* 11640 */
typedef ScriptableDef *ScriptableDefPtr;

/* 11641 */
typedef void (__cdecl *CS_TYPE_LOCAL_SIZE_ROUTINE)(void *, unsigned int, unsigned int, _IDL_CS_CONVERT *, unsigned int *, unsigned int *);

/* 11642 */
typedef HMIXER__ *HMIXER;

/* 11643 */
typedef tagWAVEOUTCAPSW *LPWAVEOUTCAPSW;

/* 11644 */
typedef _CACHE_DESCRIPTOR *PCACHE_DESCRIPTOR;

/* 11645 */
typedef tagEMRSETCOLORSPACE *PEMRSELECTCOLORSPACE;

/* 11646 */
typedef tagWAVEOUTCAPSW *NPWAVEOUTCAPSW;

/* 11647 */
typedef tagAXESLISTW *PAXESLISTW;

/* 11648 */
typedef _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUSA;

/* 11649 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETMONITORCOLORCAPABILITIES)(unsigned int, _NV_MONITOR_COLOR_DATA *, unsigned int *);

/* 11650 */
typedef _PROPSHEETPAGEW *LPPROPSHEETPAGEW_LATEST;

/* 11651 */
typedef wchar_t *LPOLESTR;

/* 11652 */
typedef _CERT_GENERAL_SUBTREE *PCERT_GENERAL_SUBTREE;

/* 11653 */
typedef _SERVICE_PREFERRED_NODE_INFO *LPSERVICE_PREFERRED_NODE_INFO;

/* 11654 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMNVIDIAUNATTACHEDDISPLAYHANDLE)(unsigned int, NvUnAttachedDisplayHandle__ **);

/* 11655 */
typedef _FILE_ID_TYPE *PFILE_ID_TYPE;

/* 11656 */
typedef _CRYPTNET_URL_CACHE_RESPONSE_INFO *PCRYPTNET_URL_CACHE_RESPONSE_INFO;

/* 11657 */
typedef _STORAGE_OFFLOAD_READ_OUTPUT *PSTORAGE_OFFLOAD_READ_OUTPUT;

/* 11658 */
typedef unsigned __int64 (__cdecl *LPCCHOOKPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 11659 */
typedef unsigned int (__cdecl *db_check_func)(unsigned int, const char *, unsigned int);

/* 11660 */
typedef tagEXTLOGFONTA *PEXTLOGFONTA;

/* 11661 */
typedef tagHELPWININFOW *LPHELPWININFOW;

/* 11662 */
typedef const char *LPCBYTE;

/* 11663 */
typedef _EXCEPTION_DISPOSITION __cdecl EXCEPTION_ROUTINE(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

/* 11664 */
typedef void (__cdecl *VehicleUpdateFunc)(Vehicle *);

/* 11665 */
typedef unsigned __int64 u_int64;

/* 11666 */
typedef _QOS_SHAPING_RATE *LPQOS_SHAPING_RATE;

/* 11667 */
typedef unsigned int statPacketsBitmask_t;

/* 11668 */
typedef my_upsampler *my_upsample_ptr;

/* 11669 */
typedef int (__cdecl *LPDIENUMDEVICESCALLBACKA)(DIDEVICEINSTANCEA *, void *);

/* 11670 */
typedef _WSAESETSERVICEOP *PWSAESETSERVICEOP;

/* 11671 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DELETEAPPLICATION)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned __int16 *);

/* 11672 */
typedef _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

/* 11673 */
typedef const char ConstChar;

/* 11674 */
typedef tagMCI_INFO_PARMSW *LPMCI_INFO_PARMSW;

/* 11675 */
typedef tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA;

/* 11676 */
typedef _CERT_SERVER_OCSP_RESPONSE_CONTEXT *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;

/* 11677 */
typedef tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA;

/* 11678 */
typedef _STORAGE_READ_CAPACITY *PSTORAGE_READ_CAPACITY;

/* 11679 */
typedef tagMIXERLINECONTROLSA *PMIXERLINECONTROLSA;

/* 11680 */
typedef _PRINTER_DEFAULTSA *PPRINTER_DEFAULTSA;

/* 11681 */
typedef IOleLink *LPOLELINK;

/* 11682 */
typedef _DISCDLGSTRUCTA *LPDISCDLGSTRUCT;

/* 11683 */
typedef void (__cdecl *NDR_RUNDOWN)(void *);

/* 11684 */
typedef _ACCESS_ALLOWED_CALLBACK_ACE *PACCESS_ALLOWED_CALLBACK_ACE;

/* 11685 */
typedef const char *pcchar_t;

/* 11686 */
typedef tagMIDIINCAPSW *PMIDIINCAPSW;

/* 11687 */
typedef _WORD_BLOB *UP_WORD_BLOB;

/* 11688 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCACQUIRE)(unsigned int *, void *);

/* 11689 */
typedef int _Statype;

/* 11690 */
typedef _BIN_COUNT *PBIN_COUNT;

/* 11691 */
typedef tagMIDIOUTCAPS2W *PMIDIOUTCAPS2W;

/* 11692 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYMAXSWAPGROUP)(unsigned int *, unsigned int *, unsigned int *);

/* 11693 */
typedef long double DATE;

/* 11694 */
typedef void (__cdecl *EXPR_EVAL)(_MIDL_STUB_MESSAGE *);

/* 11695 */
typedef tagMIXERLINECONTROLSW *PMIXERLINECONTROLSW;

/* 11696 */
typedef tagWCRANGE *PWCRANGE;

/* 11697 */
typedef tagMCI_BREAK_PARMS *LPMCI_BREAK_PARMS;

/* 11698 */
typedef tagCWPRETSTRUCT *PCWPRETSTRUCT;

/* 11699 */
typedef tagMCI_INFO_PARMSA *LPMCI_INFO_PARMSA;

/* 11700 */
typedef unsigned int (__cdecl *PTHREAD_START_ROUTINE)(void *);

/* 11701 */
typedef _SYSTEMTIME *PSYSTEMTIME;

/* 11702 */
typedef void (__cdecl *LPNVAPICALLRETURN)(unsigned int, unsigned __int64, _NvAPI_Status);

/* 11703 */
typedef _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER;

/* 11704 */
typedef _CRYPT_CSP_PROVIDER *PCRYPT_CSP_PROVIDER;

/* 11705 */
typedef unsigned __int16 UShortVec[3];

/* 11706 */
typedef tagSTYLEBUFA *NPSTYLEBUF;

/* 11707 */
typedef _CREATE_DISK_GPT *PCREATE_DISK_GPT;

/* 11708 */
typedef void (__cdecl *PFLS_CALLBACK_FUNCTION)(void *);

/* 11709 */
typedef _JOB_INFO_4A *LPJOB_INFO_4;

/* 11710 */
typedef tagSTYLEBUFA *LPSTYLEBUF;

/* 11711 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTOTALSPCOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 11712 */
typedef int (__cdecl *DESKTOPENUMPROCA)(char *, __int64);

/* 11713 */
typedef int (__cdecl *PFN_CMSG_IMPORT_KEY_AGREE)(_CRYPT_ALGORITHM_IDENTIFIER *, _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *, unsigned int, void *, unsigned __int64 *);

/* 11714 */
typedef void *HCRYPTMSG;

/* 11715 */
typedef _CTL_USAGE *PCTL_USAGE;

/* 11716 */
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;

/* 11717 */
typedef tagMCI_WAVE_OPEN_PARMSW *PMCI_WAVE_OPEN_PARMSW;

/* 11718 */
typedef int (__cdecl *PEXCEPTION_FILTER)(_EXCEPTION_POINTERS *, void *);

/* 11719 */
typedef tagOFNA *LPOPENFILENAME;

/* 11720 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_3D_GETPROPERTY)(char *, NV_3D_SETTING *);

/* 11721 */
typedef unsigned int SlicedIntCount[25];

/* 11722 */
typedef HHOOK__ *HHOOK;

/* 11723 */
typedef void (__cdecl *PDRVCALLBACK)(HDRVR__ *, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 11724 */
typedef tagEMRSETCOLORSPACE *PEMRSETCOLORSPACE;

/* 11725 */
typedef void __cdecl dGetAABBFn(dxGeom *, float *);

/* 11726 */
typedef _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;

/* 11727 */
typedef void (__cdecl *float_DCT_method_ptr)(float *);

/* 11728 */
typedef unsigned int STGFMT;

/* 11729 */
typedef _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;

/* 11730 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCEND)(unsigned int *, void *);

/* 11731 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GET_DISPLAYPORT_DONGLEINFO)(NvPhysicalGpuHandle__ *, NV_NVAPI_GET_DP_DONGLE_INFO *);

/* 11732 */
typedef tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMSA;

/* 11733 */
typedef NTFS_FILE_RECORD_OUTPUT_BUFFER *PNTFS_FILE_RECORD_OUTPUT_BUFFER;

/* 11734 */
typedef _CERT_CHAIN_ELEMENT *PCERT_CHAIN_ELEMENT;

/* 11735 */
typedef _FILE_SET_DEFECT_MGMT_BUFFER *PFILE_SET_DEFECT_MGMT_BUFFER;

/* 11736 */
typedef unsigned int GROUP;

/* 11737 */
typedef int SCODE;

/* 11738 */
typedef wchar_t *PUWSTR;

/* 11739 */
typedef _STORAGE_BUS_TYPE *PSTORAGE_BUS_TYPE;

/* 11740 */
typedef _userHMETAFILEPICT *wireHMETAFILEPICT;

/* 11741 */
typedef tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMSA;

/* 11742 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETMEMORYINFO)(NvPhysicalGpuHandle__ *, NV_DISPLAY_DRIVER_MEMORY_INFO_V2 *);

/* 11743 */
typedef __int64 fpos_t;

/* 11744 */
typedef IOleCacheControl *LPOLECACHECONTROL;

/* 11745 */
typedef tagEMR *PEMR;

/* 11746 */
typedef _TRANSACTION_BIND_INFORMATION *PTRANSACTION_BIND_INFORMATION;

/* 11747 */
typedef setloc_downlevel_struct *_psetloc_downlevel_struct;

/* 11748 */
typedef int (__cdecl *PTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);

/* 11749 */
typedef void (__cdecl *LPMIDICALLBACK)(HDRVR__ *, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 11750 */
typedef float lua_Number;

/* 11751 */
typedef unsigned __int64 UGCFileWriteStreamHandle_t;

/* 11752 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_OGL_EXPERTMODEDEFAULTSSET)(unsigned int, unsigned int, unsigned int);

/* 11753 */
typedef snd_alias_list_t *snd_alias_list_name;

/* 11754 */
typedef _PROCESSOR_NUMBER *PPROCESSOR_NUMBER;

/* 11755 */
typedef tagMIXERLINECONTROLSA *PMIXERLINECONTROLS;

/* 11756 */
typedef _CTL_USAGE *PCCTL_USAGE;

/* 11757 */
typedef unsigned __int16 SModelIndex;

/* 11758 */
typedef tagCHOOSECOLORW *LPCHOOSECOLORW;

/* 11759 */
typedef pvalueA *PPVALUE;

/* 11760 */
typedef _CERT_INFO *PCERT_INFO;

/* 11761 */
typedef _WSAEcomparator *PWSAECOMPARATOR;

/* 11762 */
typedef tagSTYLEBUFW *LPSTYLEBUFW;

/* 11763 */
typedef _JOB_INFO_4W *LPJOB_INFO_4W;

/* 11764 */
typedef tagSTYLEBUFW *NPSTYLEBUFW;

/* 11765 */
typedef unsigned __int64 (__cdecl *GetSortKeyCallback_type)(GfxDrawListIter *);

/* 11766 */
typedef _LANA_ENUM *PLANA_ENUM;

/* 11767 */
typedef tagANIMATIONINFO *LPANIMATIONINFO;

/* 11768 */
typedef float raw_vec3_t[3];

/* 11769 */
typedef tagServerInformation *PServerInformation;

/* 11770 */
typedef void (__cdecl *LPLOOKUPSERVICE_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *);

/* 11771 */
typedef tagCWPRETSTRUCT *NPCWPRETSTRUCT;

/* 11772 */
typedef _DSCEFFECTDESC *LPDSCEFFECTDESC;

/* 11773 */
typedef AnimationClass *AnimationClassPtr;

/* 11774 */
typedef _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

/* 11775 */
typedef tagMOUSEHOOKSTRUCTEX *LPMOUSEHOOKSTRUCTEX;

/* 11776 */
typedef tagCWPRETSTRUCT *LPCWPRETSTRUCT;

/* 11777 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSHADERPIPECOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 11778 */
typedef unsigned int DepotId_t;

/* 11779 */
typedef _IMAGE_DELAYLOAD_DESCRIPTOR *PIMAGE_DELAYLOAD_DESCRIPTOR;

/* 11780 */
typedef _VIDEOPARAMETERS *PVIDEOPARAMETERS;

/* 11781 */
typedef unsigned __int64 GID_t;

/* 11782 */
typedef tagMENUINFO *LPCMENUINFO;

/* 11783 */
typedef __int16 spx_int16_t;

/* 11784 */
typedef tagMCI_INFO_PARMSA *LPMCI_INFO_PARMS;

/* 11785 */
typedef _JOBOBJECT_EXTENDED_LIMIT_INFORMATION *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

/* 11786 */
typedef _STORAGE_ID_NAA_FORMAT *PSTORAGE_ID_NAA_FORMAT;

/* 11787 */
typedef ScriptFile *ScriptFilePtr;

/* 11788 */
typedef char *PUTSTR;

/* 11789 */
typedef int s_long;

/* 11790 */
typedef tagSTYLEBUFA *NPSTYLEBUFA;

/* 11791 */
typedef unsigned int u_long;

/* 11792 */
typedef tagSTYLEBUFA *LPSTYLEBUFA;

/* 11793 */
typedef void (__cdecl *scriptableGetInstance)(ScriptableContext, const unsigned int, ScriptableInstance **, unsigned int *);

/* 11794 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_CREATESWAPCHAIN)(void *, unsigned int *, unsigned int **, _NV_StereoSwapChainMode);

/* 11795 */
typedef _JOB_INFO_4A *LPJOB_INFO_4A;

/* 11796 */
typedef void *void_ptr_t;

/* 11797 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYHANDLEFROMDISPLAYID)(unsigned int, NvDisplayHandle__ **);

/* 11798 */
typedef _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE;

/* 11799 */
typedef unsigned __int16 NvAPI_UnicodeString[2048];

/* 11800 */
typedef int (__cdecl *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC)(unsigned int, _CERT_PUBLIC_KEY_INFO *, unsigned int, void *, void **);

/* 11801 */
typedef void (__cdecl *NDR_NOTIFY_ROUTINE)();

/* 11802 */
typedef tagCOMBOBOXINFO *LPCOMBOBOXINFO;

/* 11803 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_GETRENDEREDCURSORASBITMAP)(unsigned int *, _NVAPI_RENDERED_CURSOR_BITMAP_DATA *);

/* 11804 */
typedef tagOFNA *LPOPENFILENAMEA;

/* 11805 */
typedef char cs_byte;

/* 11806 */
typedef void *HCONTEXT;

/* 11807 */
typedef _ABCFLOAT *NPABCFLOAT;

/* 11808 */
typedef tagMOUSEHOOKSTRUCT *PMOUSEHOOKSTRUCT;

/* 11809 */
typedef unsigned __int64 *PSCARDHANDLE;

/* 11810 */
typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;

/* 11811 */
typedef _ABCFLOAT *LPABCFLOAT;

/* 11812 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMPHYSICALGPUS)(NvPhysicalGpuHandle__ **, unsigned int *);

/* 11813 */
typedef _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;

/* 11814 */
typedef unsigned int _dev_t;

/* 11815 */
typedef _ABCFLOAT *PABCFLOAT;

/* 11816 */
typedef ITypeInfo *LPTYPEINFO;

/* 11817 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_RESTOREPROFILEDEFAULT)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *);

/* 11818 */
typedef float spx_word64_t;

/* 11819 */
typedef tagMCI_ANIM_PLAY_PARMS *PMCI_ANIM_PLAY_PARMS;

/* 11820 */
typedef _CONTEXT *PCONTEXT;

/* 11821 */
typedef tagOFNW *LPOPENFILENAMEW;

/* 11822 */
typedef int (__cdecl *PFNGETDATEFORMATEX)(const wchar_t *, unsigned int, _SYSTEMTIME *, const wchar_t *, unsigned __int16 *, int, const wchar_t *);

/* 11823 */
typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST;

/* 11824 */
typedef unsigned __int64 mp_word;

/* 11825 */
typedef tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMS;

/* 11826 */
typedef _MIDL_SYNTAX_INFO *PMIDL_SYNTAX_INFO;

/* 11827 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_CREATEQUERY)(IUnknown *, _NVAPI_D3D_QUERY_TYPE, NVDX_ObjectHandle__ **);

/* 11828 */
typedef _XSTATE_FEATURE *PXSTATE_FEATURE;

/* 11829 */
typedef OPENCARDNAME_EXW *LPOPENCARDNAME_EXW;

/* 11830 */
typedef tagEMRSETMAPPERFLAGS *PEMRSETMAPPERFLAGS;

/* 11831 */
typedef NvEventHandle__ *NvEventHandle;

/* 11832 */
typedef SYSTEM_POWER_LEVEL *PSYSTEM_POWER_LEVEL;

/* 11833 */
typedef ITypeInfo2 *LPTYPEINFO2;

/* 11834 */
typedef void *HDWP;

/* 11835 */
typedef tagMCI_VD_STEP_PARMS *LPMCI_VD_STEP_PARMS;

/* 11836 */
typedef _ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;

/* 11837 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETRESOURCEHINT)(unsigned int *, NVDX_ObjectHandle__ *, _NVAPI_SETRESOURCEHINT_CATEGORY, unsigned int, unsigned int *);

/* 11838 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SECUREAUDIO_CHECKAPICOMPATIBILITY)(const unsigned __int16 *, unsigned int);

/* 11839 */
typedef _GETVERSIONINPARAMS *PGETVERSIONINPARAMS;

/* 11840 */
typedef int (__cdecl *PFN_CMSG_CNG_IMPORT_KEY_TRANS)(_CMSG_CNG_CONTENT_DECRYPT_INFO *, _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *, unsigned int, void *);

/* 11841 */
typedef _BCRYPT_DSA_KEY_BLOB *PBCRYPT_DSA_KEY_BLOB;

/* 11842 */
typedef unsigned int HandleType;

/* 11843 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIDEOGETSTEREOINFO)(NvDisplayHandle__ *, _NV_VIDEO_STEREO_INFO *);

/* 11844 */
typedef USN_RECORD_V2 *PUSN_RECORD_V2;

/* 11845 */
typedef tagOFN_NT4A *LPOPENFILENAME_NT4A;

/* 11846 */
typedef bool bdBool;

/* 11847 */
typedef tagPELARRAY *LPPELARRAY;

/* 11848 */
typedef menuDef_t *menuDef_ptr;

/* 11849 */
typedef char MapType;

/* 11850 */
typedef unsigned int DEVICE_DATA_MANAGEMENT_SET_ACTION;

/* 11851 */
typedef unsigned __int16 Pos;

/* 11852 */
typedef int (__cdecl *_onexit_t)();

/* 11853 */
typedef tagPELARRAY *NPPELARRAY;

/* 11854 */
typedef addrinfo *PADDRINFOT;

/* 11855 */
typedef tagMOUSEKEYS *LPMOUSEKEYS;

/* 11856 */
typedef void (__cdecl *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(void *, unsigned int, const char *, char *, void *);

/* 11857 */
typedef unsigned __int64 SModelMask;

/* 11858 */
typedef HRESULT (__cdecl *LPFNCANUNLOADNOW)();

/* 11859 */
typedef _RTL_BARRIER *PRTL_BARRIER;

/* 11860 */
typedef IEnumVARIANT *LPENUMVARIANT;

/* 11861 */
typedef int (__cdecl *I_RpcProxyIsValidMachineFn)(unsigned __int16 *, unsigned __int16 *, unsigned int);

/* 11862 */
typedef tagTEXTMETRICA *NPTEXTMETRIC;

/* 11863 */
typedef tagOFN_NT4W *LPOPENFILENAME_NT4W;

/* 11864 */
typedef int (__cdecl *RPC_MGMT_AUTHORIZATION_FN)(void *, unsigned int, int *);

/* 11865 */
typedef __int64 BD_INT_64;

/* 11866 */
typedef tagTEXTMETRICA *LPTEXTMETRIC;

/* 11867 */
typedef _XSTATE_CONTEXT *PXSTATE_CONTEXT;

/* 11868 */
typedef tagMCI_STATUS_PARMS *LPMCI_STATUS_PARMS;

/* 11869 */
typedef float _FP32;

/* 11870 */
typedef tagMETAHEADER *LPMETAHEADER;

/* 11871 */
typedef IWinInetCacheHints *LPWININETCACHEHINTS;

/* 11872 */
typedef _USER_ACTIVITY_PRESENCE *PUSER_ACTIVITY_PRESENCE;

/* 11873 */
typedef _TRANSACTIONMANAGER_LOG_INFORMATION *PTRANSACTIONMANAGER_LOG_INFORMATION;

/* 11874 */
typedef HSPRITE__ *HSPRITE;

/* 11875 */
typedef tagXFORM *LPXFORM;

/* 11876 */
typedef _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESSA;

/* 11877 */
typedef STARTING_LCN_INPUT_BUFFER *PSTARTING_LCN_INPUT_BUFFER;

/* 11878 */
typedef unsigned __int64 rsize_t;

/* 11879 */
typedef __int64 SSIZE_T;

/* 11880 */
typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;

/* 11881 */
typedef unsigned __int64 *PSIZE_T;

/* 11882 */
typedef _OFSTRUCT *POFSTRUCT;

/* 11883 */
typedef tagENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW;

/* 11884 */
typedef tagMINMAXINFO *PMINMAXINFO;

/* 11885 */
typedef HGESTUREINFO__ *HGESTUREINFO;

/* 11886 */
typedef tagMIDIOUTCAPSA *NPMIDIOUTCAPSA;

/* 11887 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_SETCONTROLPARAMETERS)(NvGSyncDeviceHandle__ *, _NV_GSYNC_CONTROL_PARAMS *);

/* 11888 */
typedef POWERBROADCAST_SETTING *PPOWERBROADCAST_SETTING;

/* 11889 */
typedef tagMIDIOUTCAPSA *LPMIDIOUTCAPSA;

/* 11890 */
typedef LocalizeEntry *LocalizeEntryPtr;

/* 11891 */
typedef _WSAVersion *PWSAVERSION;

/* 11892 */
typedef tagSERIALKEYSW *LPSERIALKEYSW;

/* 11893 */
typedef tagPDEXA *LPPRINTDLGEX;

/* 11894 */
typedef tagRECT *LPBORDERWIDTHS;

/* 11895 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETOVERLAPLIMITS)(NV_MOSAIC_TOPO_BRIEF *, NV_MOSAIC_DISPLAY_SETTING *, int *, int *, int *, int *);

/* 11896 */
typedef unsigned __int64 EHRegistrationNode;

/* 11897 */
typedef tagJOYCAPS2A *NPJOYCAPS2;

/* 11898 */
typedef _LIST_ENTRY *PRLIST_ENTRY;

/* 11899 */
typedef _HARDWARE_COUNTER_TYPE *PHARDWARE_COUNTER_TYPE;

/* 11900 */
typedef _UMS_SCHEDULER_STARTUP_INFO *PUMS_SCHEDULER_STARTUP_INFO;

/* 11901 */
typedef tagJOYCAPS2A *LPJOYCAPS2;

/* 11902 */
typedef Weapon (__cdecl *pmove_getPlayerTurretWeapon)(playerState_s *, LocalClientNum_t);

/* 11903 */
typedef _DISK_RECORD *PDISK_RECORD;

/* 11904 */
typedef _RTL_CONDITION_VARIABLE *PRTL_CONDITION_VARIABLE;

/* 11905 */
typedef void *PACCESS_TOKEN;

/* 11906 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_REVERSESTEREOBLITCONTROL)(void *, char);

/* 11907 */
typedef tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDVA;

/* 11908 */
typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

/* 11909 */
typedef tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMS;

/* 11910 */
typedef void (__cdecl *downsample1_ptr)(jpeg_compress_struct *, jpeg_component_info *, char **, char **);

/* 11911 */
typedef _WSANSClassInfoA *LPWSANSCLASSINFO;

/* 11912 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETPIXELSHADERCONSTANTI)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 11913 */
typedef tagCOLORCORRECTPALETTE *PEMRCOLORCORRECTPALETTE;

/* 11914 */
typedef tagGESTUREINFO *PGESTUREINFO;

/* 11915 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDISPLAYPORT)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_PORT_CONFIG *);

/* 11916 */
typedef void *EVENT_HANDLE;

/* 11917 */
typedef _CRYPT_PROVIDERS *PCRYPT_PROVIDERS;

/* 11918 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERTOPOLOGYGETSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_TOPOLOGY_STATUS_V1 *);

/* 11919 */
typedef const char **XStringPtr;

/* 11920 */
typedef tagSERIALKEYSA *LPSERIALKEYSA;

/* 11921 */
typedef tagMDINEXTMENU *PMDINEXTMENU;

/* 11922 */
typedef int (__cdecl *DATEFMT_ENUMPROCEXA)(char *, unsigned int);

/* 11923 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILEA;

/* 11924 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_GETTYPE)(NVDX_ObjectHandle__ *, _NVAPI_D3D_QUERY_TYPE *);

/* 11925 */
typedef _TP_WORK *PTP_WORK;

/* 11926 */
typedef _GET_MEDIA_TYPES *PGET_MEDIA_TYPES;

/* 11927 */
typedef _CONSOLE_CURSOR_INFO *PCONSOLE_CURSOR_INFO;

/* 11928 */
typedef tagTEXTMETRICW *LPTEXTMETRICW;

/* 11929 */
typedef _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;

/* 11930 */
typedef _DEVICE_DSM_OFFLOAD_READ_PARAMETERS *PDEVICE_DSM_OFFLOAD_READ_PARAMETERS;

/* 11931 */
typedef tagTEXTMETRICW *NPTEXTMETRICW;

/* 11932 */
typedef tagMIXERCONTROLW *PMIXERCONTROLW;

/* 11933 */
typedef tagOFN_NT4A *LPOPENFILENAME_NT4;

/* 11934 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYAAOVERRIDEMODE)(unsigned int *, unsigned int *, unsigned int *, unsigned int *);

/* 11935 */
typedef __int64 int_fast64_t;

/* 11936 */
typedef void *__cdecl RPC_CLIENT_ALLOC(unsigned __int64);

/* 11937 */
typedef char *unzFile;

/* 11938 */
typedef tagBITMAPCOREHEADER *LPBITMAPCOREHEADER;

/* 11939 */
typedef _DEVICEDUMP_STRUCTURE_VERSION *PDEVICEDUMP_STRUCTURE_VERSION;

/* 11940 */
typedef _CERT_POLICY_QUALIFIER_INFO *PCERT_POLICY_QUALIFIER_INFO;

/* 11941 */
typedef tagTITLEBARINFO *LPTITLEBARINFO;

/* 11942 */
typedef unsigned __int16 VARTYPE;

/* 11943 */
typedef unsigned int DvarFlags;

/* 11944 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;

/* 11945 */
typedef tagTEXTMETRICA *NPTEXTMETRICA;

/* 11946 */
typedef tagEMRCREATEPEN *PEMRCREATEPEN;

/* 11947 */
typedef jpeg_marker_struct *jpeg_saved_marker_ptr;

/* 11948 */
typedef tagOLEUPDATE *POLEUPDATE;

/* 11949 */
typedef tagTEXTMETRICA *LPTEXTMETRICA;

/* 11950 */
typedef _CRYPTOAPI_BLOB *PCRYPT_DER_BLOB;

/* 11951 */
typedef tagHW_PROFILE_INFOW *LPHW_PROFILE_INFOW;

/* 11952 */
typedef int (__cdecl *DATEFMT_ENUMPROCEXW)(wchar_t *, unsigned int);

/* 11953 */
typedef int (__cdecl *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(_CMSG_CONTENT_ENCRYPT_INFO *, unsigned int, void *);

/* 11954 */
typedef void *IFRSharedSurfaceHandle;

/* 11955 */
typedef _MEDIA_TYPE *PMEDIA_TYPE;

/* 11956 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_DELETE_CERT)(void *, _CERT_CONTEXT *, unsigned int);

/* 11957 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETVIRTUALMODEDATA)(unsigned int, NV_VIRTUALMODE_DATA *);

/* 11958 */
typedef ID3D11HullShader *GfxHullShader;

/* 11959 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTTHERMALLEVEL)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL *);

/* 11960 */
typedef tagBSTRBLOB *LPBSTRBLOB;

/* 11961 */
typedef int (__cdecl *lua_Writer)(lua_State *, const void *, unsigned __int64, void *);

/* 11962 */
typedef void __cdecl DRVCALLBACK(HDRVR__ *, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 11963 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_VIDEOSETSTEREOINFO)(unsigned int *, _NV_DX_VIDEO_STEREO_INFO *);

/* 11964 */
typedef _CRYPT_BIT_BLOB *PCRYPT_BIT_BLOB;

/* 11965 */
typedef void (__cdecl *xcommand_t)();

/* 11966 */
typedef _WSAMSG *PWSAMSG;

/* 11967 */
typedef void (__cdecl *LPOCNDSCPROC)(unsigned __int64, unsigned __int64, void *);

/* 11968 */
typedef _CRYPTOAPI_BLOB *PCRYPT_DATA_BLOB;

/* 11969 */
typedef _CRL_FIND_ISSUED_FOR_PARA *PCRL_FIND_ISSUED_FOR_PARA;

/* 11970 */
typedef _BCRYPT_KEY_DATA_BLOB_HEADER *PBCRYPT_KEY_DATA_BLOB_HEADER;

/* 11971 */
typedef int (__cdecl *_PIFV)();

/* 11972 */
typedef HTASK__ *HTASK;

/* 11973 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMCUSTOMDISPLAY)(NvDisplayHandle__ *, unsigned int, unsigned int, NV_CUSTOM_DISPLAY *);

/* 11974 */
typedef _CRL_DIST_POINT *PCRL_DIST_POINT;

/* 11975 */
typedef tagEMRNAMEDESCAPE *PEMRNAMEDESCAPE;

/* 11976 */
typedef int NvS32;

/* 11977 */
typedef _FILE_QUERY_SPARING_BUFFER *PFILE_QUERY_SPARING_BUFFER;

/* 11978 */
typedef _SUPPORTED_OS_INFO *PSUPPORTED_OS_INFO;

/* 11979 */
typedef unsigned int D3DCOLOR;

/* 11980 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETSEPARATION)(void *, float);

/* 11981 */
typedef tagPDEXA *LPPRINTDLGEXA;

/* 11982 */
typedef _OSVERSIONINFOA *LPOSVERSIONINFO;

/* 11983 */
typedef _QUERY_FILE_LAYOUT_OUTPUT *PQUERY_FILE_LAYOUT_OUTPUT;

/* 11984 */
typedef tagJOYCAPS2A *NPJOYCAPS2A;

/* 11985 */
typedef _WSANSClassInfoW *LPWSANSCLASSINFOW;

/* 11986 */
typedef tagEMREXCLUDECLIPRECT *PEMREXCLUDECLIPRECT;

/* 11987 */
typedef tagJOYCAPS2A *LPJOYCAPS2A;

/* 11988 */
typedef _PRIVILEGE_SET *PPRIVILEGE_SET;

/* 11989 */
typedef tagEMRSETCOLORSPACE *PEMRDELETECOLORSPACE;

/* 11990 */
typedef _CRYPT_URL_ARRAY *PCRYPT_URL_ARRAY;

/* 11991 */
typedef _OLESTREAM *LPOLESTREAM;

/* 11992 */
typedef _STORAGE_BUS_RESET_REQUEST *PSTORAGE_BUS_RESET_REQUEST;

/* 11993 */
typedef _userCLIPFORMAT *wireCLIPFORMAT;

/* 11994 */
typedef int SECURITY_STATUS;

/* 11995 */
typedef PPM_WMI_PERF_STATE *PPPM_WMI_PERF_STATE;

/* 11996 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_GETOBJECTHANDLEFORRESOURCE)(IUnknown *, IUnknown *, NVDX_ObjectHandle__ **);

/* 11997 */
typedef __int16 s_short;

/* 11998 */
typedef unsigned __int64 SteamAPICall_t;

/* 11999 */
typedef tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDV;

/* 12000 */
typedef unsigned __int16 u_short;

/* 12001 */
typedef void *RPC_AUTHZ_HANDLE;

/* 12002 */
typedef void *BCRYPT_SECRET_HANDLE;

/* 12003 */
typedef int (__cdecl *decoder_ctl_func)(void *, int, void *);

/* 12004 */
typedef void *HDEVNOTIFY;

/* 12005 */
typedef unsigned __int64 uint64_t;

/* 12006 */
typedef tagJOYCAPS2W *LPJOYCAPS2W;

/* 12007 */
typedef tagRemFORMATETC *LPREMFORMATETC;

/* 12008 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETUNDERSCANCONFIG)(NvDisplayHandle__ *, unsigned int, NV_UNDERSCAN_CONFIG *, unsigned int);

/* 12009 */
typedef unsigned __int64 NCRYPT_SECRET_HANDLE;

/* 12010 */
typedef tagJOYCAPS2W *NPJOYCAPS2W;

/* 12011 */
typedef _WSANSClassInfoA *LPWSANSCLASSINFOA;

/* 12012 */
typedef tagPDEXW *LPPRINTDLGEXW;

/* 12013 */
typedef tagSERIALKEYSA *LPSERIALKEYS;

/* 12014 */
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST;

/* 12015 */
typedef float HksNumber;

/* 12016 */
typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST;

/* 12017 */
typedef int (__cdecl *encode_func)(void *, void *, SpeexBits *);

/* 12018 */
typedef void (__cdecl *vehicleHudHostilesCallbackFunc_t)(LocalClientNum_t, DObj *, const float *);

/* 12019 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCMAPINDEXBUFFER)(unsigned int *, unsigned int *, void *);

/* 12020 */
typedef tagSTYLEBUFW *PSTYLEBUFW;

/* 12021 */
typedef tagPDA *LPPRINTDLGA;

/* 12022 */
typedef tagGUITHREADINFO *PGUITHREADINFO;

/* 12023 */
typedef void (__cdecl *PFN_CERT_STORE_PROV_CLOSE)(void *, unsigned int);

/* 12024 */
typedef unsigned __int16 *PBAD_TRACK_NUMBER;

/* 12025 */
typedef _SERVICE_STATUS *LPSERVICE_STATUS;

/* 12026 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETHYBRIDMODE)(_NV_HYBRID_MODE);

/* 12027 */
typedef tagIMEMENUITEMINFOA *NPIMEMENUITEMINFO;

/* 12028 */
typedef unsigned int _fsize_t;

/* 12029 */
typedef tagMCI_ANIM_STEP_PARMS *PMCI_ANIM_STEP_PARMS;

/* 12030 */
typedef tagIMEMENUITEMINFOA *LPIMEMENUITEMINFO;

/* 12031 */
typedef _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1;

/* 12032 */
typedef tagEMRPOLYLINE16 *PEMRPOLYLINETO16;

/* 12033 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXT;

/* 12034 */
typedef int mbstate_t;

/* 12035 */
typedef tagMULTIKEYHELPA *LPMULTIKEYHELPA;

/* 12036 */
typedef _PRINTER_DEFAULTSA *PPRINTER_DEFAULTS;

/* 12037 */
typedef _CONSOLE_HISTORY_INFO *PCONSOLE_HISTORY_INFO;

/* 12038 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETSCANOUTWARPING)(unsigned int, NV_SCANOUT_WARPING_DATA *, int *, int *);

/* 12039 */
typedef tagEMRSETDIBITSTODEVICE *PEMRSETDIBITSTODEVICE;

/* 12040 */
typedef tagCBT_CREATEWNDA *LPCBT_CREATEWND;

/* 12041 */
typedef _CRYPT_RSA_SSA_PSS_PARAMETERS *PCRYPT_RSA_SSA_PSS_PARAMETERS;

/* 12042 */
typedef unsigned __int64 ffSize_t;

/* 12043 */
typedef tagPDW *LPPRINTDLGW;

/* 12044 */
typedef tagRPCOLEMESSAGE *PRPCOLEMESSAGE;

/* 12045 */
typedef snd_alias_list_t *snd_alias_list_ptr;

/* 12046 */
typedef _CERT_NAME_INFO *PCERT_NAME_INFO;

/* 12047 */
typedef IWinInetFileStream *LPWININETFILESTREAM;

/* 12048 */
typedef _CERT_LOGOTYPE_REFERENCE *PCERT_LOGOTYPE_REFERENCE;

/* 12049 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_QUERYILLUMINATIONSUPPORT)(_NV_GPU_QUERY_ILLUMINATION_SUPPORT_PARM_V1 *);

/* 12050 */
typedef tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;

/* 12051 */
typedef _DRIVER_INFO_1A *PDRIVER_INFO_1;

/* 12052 */
typedef tagVersionedStream *LPVERSIONEDSTREAM;

/* 12053 */
typedef __int64 INT_PTR;

/* 12054 */
typedef tagMCI_ANIM_WINDOW_PARMSW *LPMCI_ANIM_WINDOW_PARMSW;

/* 12055 */
typedef tagMULTIKEYHELPW *LPMULTIKEYHELPW;

/* 12056 */
typedef _DEBUG_EVENT *LPDEBUG_EVENT;

/* 12057 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETHYBRIDMODE)(_NV_HYBRID_MODE *);

/* 12058 */
typedef servent *LPSERVENT;

/* 12059 */
typedef EquipmentSoundTable *EquipmentSoundTablePtr;

/* 12060 */
typedef _SERVICE_TIMECHANGE_INFO *PSERVICE_TIMECHANGE_INFO;

/* 12061 */
typedef int (__cdecl *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(unsigned int, _CRYPT_ALGORITHM_IDENTIFIER *, void **, wchar_t **);

/* 12062 */
typedef _MIDL_STUB_DESC *PMIDL_STUB_DESC;

/* 12063 */
typedef _CERT_DH_PARAMETERS *PCERT_DH_PARAMETERS;

/* 12064 */
typedef unsigned int NvU32;

/* 12065 */
typedef _DRIVER_INFO_1A *LPDRIVER_INFO_1;

/* 12066 */
typedef tagTITLEBARINFOEX *LPTITLEBARINFOEX;

/* 12067 */
typedef _DRIVER_INFO_2A *LPDRIVER_INFO_2;

/* 12068 */
typedef _TP_CALLBACK_INSTANCE *PTP_CALLBACK_INSTANCE;

/* 12069 */
typedef __int16 JCOEF;

/* 12070 */
typedef _COMSTAT *LPCOMSTAT;

/* 12071 */
typedef IEnumUnknown *LPENUMUNKNOWN;

/* 12072 */
typedef _DRIVER_INFO_3A *LPDRIVER_INFO_3;

/* 12073 */
typedef _DRIVER_INFO_4A *LPDRIVER_INFO_4;

/* 12074 */
typedef _CERT_SELECT_CRITERIA *PCCERT_SELECT_CRITERIA;

/* 12075 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDISPLAYPOSITION)(NvDisplayHandle__ *, unsigned int, unsigned int, unsigned int);

/* 12076 */
typedef unsigned int ALG_ID;

/* 12077 */
typedef _DRIVER_INFO_5A *LPDRIVER_INFO_5;

/* 12078 */
typedef _DRIVER_INFO_6A *LPDRIVER_INFO_6;

/* 12079 */
typedef _CERT_PHYSICAL_STORE_INFO *PCERT_PHYSICAL_STORE_INFO;

/* 12080 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPOWERMIZERINFO)(NvPhysicalGpuHandle__ *, _NV_PWR_SOURCE_INFO, _NV_SELECT_INFO, _NV_LEVEL_INFO *);

/* 12081 */
typedef int seekdir;

/* 12082 */
typedef _DRIVER_INFO_8A *LPDRIVER_INFO_8;

/* 12083 */
typedef _DISPLAY_DEVICEW *LPDISPLAY_DEVICEW;

/* 12084 */
typedef char BD_CHAR8;

/* 12085 */
typedef $3FA64165D15A4602C29B2D9B0DA4A5E9 *NDR_SCONTEXT;

/* 12086 */
typedef void (__cdecl *bdSingletonDestroyFunction)();

/* 12087 */
typedef __int16 FxGlassVertexCoord;

/* 12088 */
typedef _PRINTER_DEFAULTSW *LPPRINTER_DEFAULTSW;

/* 12089 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYPOSITION)(NvDisplayHandle__ *, unsigned int, unsigned int *, unsigned int *);

/* 12090 */
typedef tagNEWTEXTMETRICW *NPNEWTEXTMETRICW;

/* 12091 */
typedef void (__cdecl *terminate_handler)();

/* 12092 */
typedef tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMS;

/* 12093 */
typedef tagNEWTEXTMETRICW *LPNEWTEXTMETRICW;

/* 12094 */
typedef _CMSG_HASHED_ENCODE_INFO *PCMSG_HASHED_ENCODE_INFO;

/* 12095 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPOWERMIZERINFO)(NvPhysicalGpuHandle__ *, _NV_PWR_SOURCE_INFO, _NV_SELECT_INFO, _NV_LEVEL_INFO);

/* 12096 */
typedef _MONITOR_INFO_1A *PMONITOR_INFO_1A;

/* 12097 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERPOLICIESSETSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_POLICIES_STATUS_V1 *);

/* 12098 */
typedef _TOKEN_MANDATORY_LABEL *PTOKEN_MANDATORY_LABEL;

/* 12099 */
typedef void (__cdecl *BuiltinMethod)(scr_entref_t);

/* 12100 */
typedef _NTFS_STATISTICS *PNTFS_STATISTICS;

/* 12101 */
typedef _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTSA;

/* 12102 */
typedef HPALETTE__ *HPALETTE;

/* 12103 */
typedef int FXPT2DOT30;

/* 12104 */
typedef _ENLISTMENT_BASIC_INFORMATION *PENLISTMENT_BASIC_INFORMATION;

/* 12105 */
typedef void *NDR_CCONTEXT;

/* 12106 */
typedef int (__cdecl *PFNMessageBoxW)(HWND__ *, const wchar_t *, const wchar_t *, unsigned int);

/* 12107 */
typedef _DISPLAY_DEVICEA *LPDISPLAY_DEVICEA;

/* 12108 */
typedef unsigned int PROPID;

/* 12109 */
typedef __int64 filePos_t;

/* 12110 */
typedef void *RPC_SS_THREAD_HANDLE;

/* 12111 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_HYBRID_SETAPPMIGRATIONSTATE)(NV_HYBRID_APP_INFO, unsigned int);

/* 12112 */
typedef unsigned int DWORD32;

/* 12113 */
typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;

/* 12114 */
typedef int HksGcCost;

/* 12115 */
typedef _DRIVER_INFO_1W *PDRIVER_INFO_1W;

/* 12116 */
typedef IOleInPlaceSite *LPOLEINPLACESITE;

/* 12117 */
typedef int (__cdecl *OLDFONTENUMPROCW)(tagLOGFONTW *, tagTEXTMETRICW *, unsigned int, __int64);

/* 12118 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETEDID)(NvPhysicalGpuHandle__ *, unsigned int, NV_EDID_V3 *);

/* 12119 */
typedef _STORAGE_DESCRIPTOR_HEADER *PSTORAGE_DESCRIPTOR_HEADER;

/* 12120 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETECCSTATUSINFO)(NvPhysicalGpuHandle__ *, NV_GPU_ECC_STATUS_INFO *);

/* 12121 */
typedef tagPDA *LPPRINTDLG;

/* 12122 */
typedef _CERT_CHAIN *PCERT_CHAIN;

/* 12123 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEPATHCONTEXTNV)(unsigned int *, unsigned int *);

/* 12124 */
typedef hks::CallSite *ErrorHandler;

/* 12125 */
typedef _CRYPT_TIMESTAMP_PARA *PCRYPT_TIMESTAMP_PARA;

/* 12126 */
typedef _CERT_SELECT_CHAIN_PARA *PCCERT_SELECT_CHAIN_PARA;

/* 12127 */
typedef wchar_t *PUZZWSTR;

/* 12128 */
typedef _GLYPHMETRICSFLOAT *PGLYPHMETRICSFLOAT;

/* 12129 */
typedef _CMSG_MAIL_LIST_RECIPIENT_INFO *PCMSG_MAIL_LIST_RECIPIENT_INFO;

/* 12130 */
typedef void (__cdecl *lua_Hook)(lua_State *, lua_Debug *);

/* 12131 */
typedef char *PUZZTSTR;

/* 12132 */
typedef __int16 JBLOCK[64];

/* 12133 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA;

/* 12134 */
typedef _EFS_COMPATIBILITY_INFO *PEFS_COMPATIBILITY_INFO;

/* 12135 */
typedef tagMULTIKEYHELPA *LPMULTIKEYHELP;

/* 12136 */
typedef void (__cdecl *BG_RegisterWeapon)(unsigned int);

/* 12137 */
typedef unsigned __int64 (__cdecl *LPFRHOOKPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 12138 */
typedef _userSTGMEDIUM *wireSTGMEDIUM;

/* 12139 */
typedef MFT_ENUM_DATA_V1 *PMFT_ENUM_DATA;

/* 12140 */
typedef _ACTION_HEADER *PACTION_HEADER;

/* 12141 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETTOPOLOGYFOCUSDISPLAYANDVIEW)(NvLogicalGpuHandle__ *, unsigned int, NV_DISPLAY_PATH_INFO *, _NV_TARGET_VIEW_MODE);

/* 12142 */
typedef HENHMETAFILE__ *HENHMETAFILE;

/* 12143 */
typedef unsigned int error_status_t;

/* 12144 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETEDID)(NvPhysicalGpuHandle__ *, unsigned int, NV_EDID_V3 *);

/* 12145 */
typedef _DRIVER_INFO_1A *PDRIVER_INFO_1A;

/* 12146 */
typedef void *HCERTCHAINENGINE;

/* 12147 */
typedef _MONITOR_INFO_2A *PMONITOR_INFO_2A;

/* 12148 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETTIMING)(unsigned int, _NV_TIMING_INPUT *, _NV_TIMING *);

/* 12149 */
typedef tagRAWINPUT *LPRAWINPUT;

/* 12150 */
typedef char XZoneHandle;

/* 12151 */
typedef void (__cdecl *fn_blocked)(gentity_s *, gentity_s *);

/* 12152 */
typedef tagEMRSELECTCLIPPATH *PEMRSETMAPMODE;

/* 12153 */
typedef tagEMRMODIFYWORLDTRANSFORM *PEMRMODIFYWORLDTRANSFORM;

/* 12154 */
typedef void (__cdecl *ScriptCallbackClient)(gagent_s *, agent_fields_s *);

/* 12155 */
typedef _CERT_BASIC_CONSTRAINTS_INFO *PCERT_BASIC_CONSTRAINTS_INFO;

/* 12156 */
typedef tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED;

/* 12157 */
typedef tagMIXERCONTROLDETAILS_LISTTEXTW *LPMIXERCONTROLDETAILS_LISTTEXTW;

/* 12158 */
typedef unsigned int ID3D10Resource;

/* 12159 */
typedef _FORM_INFO_1W *LPFORM_INFO_1W;

/* 12160 */
typedef _FORM_INFO_2W *LPFORM_INFO_2W;

/* 12161 */
typedef void (__cdecl *NVAPI_CALLBACK_FANSPEEDEVENT)(NvPhysicalGpuHandle__ *, NV_EVENT_LEVEL, void *);

/* 12162 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_REGISTERRESOURCE)(unsigned int *);

/* 12163 */
typedef _LUID *PLUID;

/* 12164 */
typedef tagEMREXTSELECTCLIPRGN *PEMREXTSELECTCLIPRGN;

/* 12165 */
typedef HDESK__ *HDESK;

/* 12166 */
typedef int socklen_t;

/* 12167 */
typedef _CERT_SIMPLE_CHAIN *PCCERT_SIMPLE_CHAIN;

/* 12168 */
typedef sockaddr_dl *PSOCKADDR_DL;

/* 12169 */
typedef _PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

/* 12170 */
typedef _RPC_CLIENT_INTERFACE *PRPC_CLIENT_INTERFACE;

/* 12171 */
typedef void (__cdecl *threadFunction_t)(unsigned int);

/* 12172 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETSCANOUTINTENSITY)(unsigned int, NV_SCANOUT_INTENSITY_DATA_V2 *, int *);

/* 12173 */
typedef int (__cdecl *DATEFMT_ENUMPROCEXEX)(wchar_t *, unsigned int, __int64);

/* 12174 */
typedef char MaterialStreamSource;

/* 12175 */
typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST;

/* 12176 */
typedef _CERT_PAIR *PCERT_PAIR;

/* 12177 */
typedef tagMCI_ANIM_UPDATE_PARMS *PMCI_ANIM_UPDATE_PARMS;

/* 12178 */
typedef void (__cdecl *STUB_THUNK)(_MIDL_STUB_MESSAGE *);

/* 12179 */
typedef in_pktinfo_ex *PIN_PKTINFO_EX;

/* 12180 */
typedef _DEVICE_DATA_SET_SCRUB_OUTPUT *PDEVICE_DATA_SET_SCRUB_OUTPUT;

/* 12181 */
typedef IBindProtocol *LPBINDPROTOCOL;

/* 12182 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETBUSID)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 12183 */
typedef _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;

/* 12184 */
typedef SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;

/* 12185 */
typedef int (__cdecl *scriptableBrushModelTrace)(int, const float *, const float *, Bounds *, unsigned int, int);

/* 12186 */
typedef _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTS;

/* 12187 */
typedef _SD_CHANGE_MACHINE_SID_INPUT *PSD_CHANGE_MACHINE_SID_INPUT;

/* 12188 */
typedef IEnumSTATSTG *LPENUMSTATSTG;

/* 12189 */
typedef _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;

/* 12190 */
typedef int (__cdecl *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE)(int (__cdecl *)(void *, _CRYPTOAPI_BLOB **, unsigned int), void *, unsigned int *, _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE **, void **);

/* 12191 */
typedef MOVE_FILE_RECORD_DATA *PMOVE_FILE_RECORD_DATA;

/* 12192 */
typedef tagRAWMOUSE *LPRAWMOUSE;

/* 12193 */
typedef tagMONCBSTRUCT *PMONCBSTRUCT;

/* 12194 */
typedef _DISPLAY_DEVICEA *LPDISPLAY_DEVICE;

/* 12195 */
typedef void (__cdecl *_PMFN)(void *);

/* 12196 */
typedef _PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

/* 12197 */
typedef _RECTL *LPCRECTL;

/* 12198 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_VALIDATEDISPLAYGRIDS)(unsigned int, NV_MOSAIC_GRID_TOPO *, NV_MOSAIC_DISPLAY_TOPO_STATUS *, unsigned int);

/* 12199 */
typedef _OVERLAPPED *LPWSAOVERLAPPED;

/* 12200 */
typedef PPM_IDLE_STATE_ACCOUNTING_EX *PPPM_IDLE_STATE_ACCOUNTING_EX;

/* 12201 */
typedef char bdUByte8;

/* 12202 */
typedef cmsghdr *PWSACMSGHDR;

/* 12203 */
typedef tagMCI_OPEN_PARMSW *PMCI_OPEN_PARMSW;

/* 12204 */
typedef _FILE_STORAGE_INFO *PFILE_STORAGE_INFO;

/* 12205 */
typedef _SOCKADDR_INET *PSOCKADDR_INET;

/* 12206 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETTACHREADING)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 12207 */
typedef _DOC_INFO_3W *LPDOC_INFO_3W;

/* 12208 */
typedef _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB;

/* 12209 */
typedef tagLOCALESIGNATURE *LPLOCALESIGNATURE;

/* 12210 */
typedef unsigned int IDirect3DSwapChain9;

/* 12211 */
typedef HDRVR__ *HDRVR;

/* 12212 */
typedef tagEMRGLSBOUNDEDRECORD *PEMRGLSBOUNDEDRECORD;

/* 12213 */
typedef _IO_COUNTERS *PIO_COUNTERS;

/* 12214 */
typedef _DOC_INFO_3A *LPDOC_INFO_3A;

/* 12215 */
typedef _SYSTEM_POWER_STATUS *LPSYSTEM_POWER_STATUS;

/* 12216 */
typedef tagNONCLIENTMETRICSA *PNONCLIENTMETRICSA;

/* 12217 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SAVECUSTOMDISPLAY)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 12218 */
typedef tagTTPOLYCURVE *LPTTPOLYCURVE;

/* 12219 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_COLORCONTROL)(unsigned int, NV_COLOR_DATA *);

/* 12220 */
typedef MENUITEMTEMPLATEHEADER *PMENUITEMTEMPLATEHEADER;

/* 12221 */
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;

/* 12222 */
typedef char colorizationFlags_t;

/* 12223 */
typedef waveformat_tag *LPWAVEFORMAT;

/* 12224 */
typedef _HEAP_SUMMARY *LPHEAP_SUMMARY;

/* 12225 */
typedef waveformat_tag *NPWAVEFORMAT;

/* 12226 */
typedef _EXFAT_STATISTICS *PEXFAT_STATISTICS;

/* 12227 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETTIMING)(NvDisplayHandle__ *, unsigned int, unsigned int, float, NV_TIMING_FLAG, unsigned int, _NV_TIMING_OVERRIDE, _NV_TIMING *);

/* 12228 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY64 *PIMAGE_LOAD_CONFIG_DIRECTORY;

/* 12229 */
typedef _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

/* 12230 */
typedef _TOKEN_USER_CLAIMS *PTOKEN_USER_CLAIMS;

/* 12231 */
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;

/* 12232 */
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;

/* 12233 */
typedef _NOTIFYICONDATAA *PNOTIFYICONDATAA;

/* 12234 */
typedef IEnumMoniker *LPENUMMONIKER;

/* 12235 */
typedef _TXFS_LIST_TRANSACTIONS *PTXFS_LIST_TRANSACTIONS;

/* 12236 */
typedef unsigned __int64 sock_t;

/* 12237 */
typedef void (__cdecl *turret_trace_func)(trace_t *, const float *, const float *, Bounds *, int, int);

/* 12238 */
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;

/* 12239 */
typedef block_state (__cdecl *compress_func)(internal_state *, int);

/* 12240 */
typedef tagMCI_VD_STEP_PARMS *PMCI_VD_STEP_PARMS;

/* 12241 */
typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

/* 12242 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PRESENTVIDEO)(unsigned int *, NV_DX_PRESENT_VIDEO_PARAMS1 *);

/* 12243 */
typedef _DECRYPTION_STATUS_BUFFER *PDECRYPTION_STATUS_BUFFER;

/* 12244 */
typedef _SERVICE_NOTIFY_2A *PSERVICE_NOTIFY;

/* 12245 */
typedef unsigned __int64 size_type;

/* 12246 */
typedef _FILE_PREFETCH_EX *PFILE_PREFETCH_EX;

/* 12247 */
typedef HRESULT (__cdecl *LPFNGETCLASSOBJECT)(_GUID *, _GUID *, void **);

/* 12248 */
typedef _LARGE_INTEGER *PLARGE_INTEGER;

/* 12249 */
typedef int (__cdecl *CALINFO_ENUMPROCEXA)(char *, unsigned int);

/* 12250 */
typedef void __cdecl WAVECALLBACK(HDRVR__ *, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 12251 */
typedef _PERSISTENT_RESERVE_COMMAND *PPERSISTENT_RESERVE_COMMAND;

/* 12252 */
typedef int (__cdecl *R_SphereSurfacesCallback)(int, void *);

/* 12253 */
typedef unsigned __int64 XUID;

/* 12254 */
typedef HMIDISTRM__ **LPHMIDISTRM;

/* 12255 */
typedef _CACHE_RELATIONSHIP *PCACHE_RELATIONSHIP;

/* 12256 */
typedef MaterialVertexShader *MaterialVertexShaderPtr;

/* 12257 */
typedef int (__cdecl *CALINFO_ENUMPROCEXW)(wchar_t *, unsigned int);

/* 12258 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETSURFACECREATIONMODE)(void *, _NVAPI_STEREO_SURFACECREATEMODE);

/* 12259 */
typedef int (__cdecl *GRAYSTRINGPROC)(HDC__ *, __int64, int);

/* 12260 */
typedef unsigned __int64 SOCKET;

/* 12261 */
typedef _devicemodeA *PDEVMODE;

/* 12262 */
typedef float bdFloat32;

/* 12263 */
typedef FxParticleSimAnimation *FxParticleSimAnimationPtr;

/* 12264 */
typedef void *RPC_IF_HANDLE;

/* 12265 */
typedef unsigned int raw_DWORD;

/* 12266 */
typedef void **PRPC_INTERFACE_GROUP;

/* 12267 */
typedef newsTickerDef_s *newsTickerDef_ptr;

/* 12268 */
typedef _DISK_GROW_PARTITION *PDISK_GROW_PARTITION;

/* 12269 */
typedef _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;

/* 12270 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHPARAMETERFNV)(unsigned int, _NV_PATH_PARAMTYPE, float);

/* 12271 */
typedef tagMIXERCONTROLA *PMIXERCONTROL;

/* 12272 */
typedef unsigned int NLS_FUNCTION;

/* 12273 */
typedef _PSFEATURE_OUTPUT *PPSFEATURE_OUTPUT;

/* 12274 */
typedef _PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1;

/* 12275 */
typedef tagCIEXYZ *LPCIEXYZ;

/* 12276 */
typedef HDDEDATA__ *(__cdecl *PFNCALLBACK)(unsigned int, unsigned int, HCONV__ *, HSZ__ *, HSZ__ *, HDDEDATA__ *, unsigned __int64, unsigned __int64);

/* 12277 */
typedef _FILE_RENAME_INFO *PFILE_RENAME_INFO;

/* 12278 */
typedef _SERVICE_SID_INFO *LPSERVICE_SID_INFO;

/* 12279 */
typedef PPM_WMI_IDLE_STATE *PPPM_WMI_IDLE_STATE;

/* 12280 */
typedef _DOC_INFO_3A *LPDOC_INFO_3;

/* 12281 */
typedef void (__cdecl *PhysImactCallback)(__int64, const float *, const float *, float, bool, int);

/* 12282 */
typedef tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

/* 12283 */
typedef _STORAGE_POWERUP_REASON_TYPE *PSTORAGE_POWERUP_REASON_TYPE;

/* 12284 */
typedef tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMS;

/* 12285 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PRESENTSURFACETODESKTOP)(unsigned int *, NVDX_ObjectHandle__ *, unsigned int, unsigned int);

/* 12286 */
typedef _OVERLAPPED_ENTRY *LPOVERLAPPED_ENTRY;

/* 12287 */
typedef int bit_buf_type;

/* 12288 */
typedef _PERF_OBJECT_TYPE *PPERF_OBJECT_TYPE;

/* 12289 */
typedef int (__cdecl *R_BusyFunction)(void *);

/* 12290 */
typedef HINSTANCE__ *HINSTANCE;

/* 12291 */
typedef _DISK_PERFORMANCE *PDISK_PERFORMANCE;

/* 12292 */
typedef tagRemSNB *wireSNB;

/* 12293 */
typedef RPC_INTERFACE_TEMPLATEA *PRPC_INTERFACE_TEMPLATEA;

/* 12294 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_GETDATA)(NVDX_ObjectHandle__ *, void *, unsigned int, unsigned int);

/* 12295 */
typedef tagHW_PROFILE_INFOA *LPHW_PROFILE_INFO;

/* 12296 */
typedef _RemotableHandle *wireHICON;

/* 12297 */
typedef _CERT_REGISTRY_STORE_ROAMING_PARA *PCERT_REGISTRY_STORE_ROAMING_PARA;

/* 12298 */
typedef _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS;

/* 12299 */
typedef _FILE_LAYOUT_INFO_ENTRY *PFILE_LAYOUT_INFO_ENTRY;

/* 12300 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_SETCURRENTGLOBALPROFILE)(NvDRSSessionHandle__ *, unsigned __int16 *);

/* 12301 */
typedef _NETRESOURCEA *LPNETRESOURCEA;

/* 12302 */
typedef const char *LPCTSTR;

/* 12303 */
typedef _CMC_PEND_INFO *PCMC_PEND_INFO;

/* 12304 */
typedef unsigned __int16 r_index16_t;

/* 12305 */
typedef _SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

/* 12306 */
typedef BULK_SECURITY_TEST_DATA *PBULK_SECURITY_TEST_DATA;

/* 12307 */
typedef _devicemodeW *PDEVMODEW;

/* 12308 */
typedef unsigned int u_int;

/* 12309 */
typedef tagWAVEOUTCAPSA *NPWAVEOUTCAPSA;

/* 12310 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_FIND_CTL)(void *, _CERT_STORE_PROV_FIND_INFO *, _CTL_CONTEXT *, unsigned int, void **, _CTL_CONTEXT **);

/* 12311 */
typedef tagAXESLISTA *PAXESLISTA;

/* 12312 */
typedef tWAVEFORMATEX *LPCWAVEFORMATEX;

/* 12313 */
typedef _QUERY_SERVICE_LOCK_STATUSW *LPQUERY_SERVICE_LOCK_STATUSW;

/* 12314 */
typedef tagWAVEOUTCAPSA *LPWAVEOUTCAPSA;

/* 12315 */
typedef unsigned __int64 CLSN;

/* 12316 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_GETDATASIZE)(NVDX_ObjectHandle__ *, unsigned int *);

/* 12317 */
typedef MaterialTechnique *MaterialTechniquePtr;

/* 12318 */
typedef _userHBITMAP *wireHBITMAP;

/* 12319 */
typedef _PROPSHEETPAGEA *LPPROPSHEETPAGEA_LATEST;

/* 12320 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_QUERYFRAMECOUNT)(unsigned int *, unsigned int *);

/* 12321 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_START)(NvVioHandle__ *);

/* 12322 */
typedef _SECURITY_CAPABILITIES *PSECURITY_CAPABILITIES;

/* 12323 */
typedef _ENCRYPTED_FILE_METADATA_SIGNATURE *PENCRYPTED_FILE_METADATA_SIGNATURE;

/* 12324 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETCURRENTGLOBALPROFILE)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ **);

/* 12325 */
typedef ID3D11Query *GfxFence;

/* 12326 */
typedef _JOB_INFO_2A *PJOB_INFO_2;

/* 12327 */
typedef tagEXTLOGFONTW *PEXTLOGFONTW;

/* 12328 */
typedef tagHELPWININFOA *LPHELPWININFOA;

/* 12329 */
typedef unsigned __int64 HCRYPTKEY;

/* 12330 */
typedef _JOB_INFO_3 *PJOB_INFO_3;

/* 12331 */
typedef _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;

/* 12332 */
typedef tagMCI_GETDEVCAPS_PARMS *PMCI_GETDEVCAPS_PARMS;

/* 12333 */
typedef _JOB_INFO_1A *PJOB_INFO_1;

/* 12334 */
typedef sockaddr_storage *PSOCKADDR_STORAGE;

/* 12335 */
typedef tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;

/* 12336 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_SETFPSINDICATORSTATE)(IUnknown *, char);

/* 12337 */
typedef tagKBDLLHOOKSTRUCT *LPKBDLLHOOKSTRUCT;

/* 12338 */
typedef _devicemodeA *PDEVMODEA;

/* 12339 */
typedef _JOB_INFO_4A *PJOB_INFO_4;

/* 12340 */
typedef unsigned __int64 hksSize;

/* 12341 */
typedef const wchar_t **PZPCWSTR;

/* 12342 */
typedef tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW;

/* 12343 */
typedef int (__cdecl *CALINFO_ENUMPROCEXEX)(wchar_t *, unsigned int, wchar_t *, __int64);

/* 12344 */
typedef tagEMRSELECTCLIPPATH *PEMRSETLAYOUT;

/* 12345 */
typedef ID3D11VertexShader *GfxVertexShader;

/* 12346 */
typedef tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW;

/* 12347 */
typedef IOleCache *LPOLECACHE;

/* 12348 */
typedef _PRINTER_DEFAULTSW *PPRINTER_DEFAULTSW;

/* 12349 */
typedef tagRAWINPUTHEADER *PRAWINPUTHEADER;

/* 12350 */
typedef unsigned int APARTMENTID;

/* 12351 */
typedef tagACTCTX_SECTION_KEYED_DATA_2600 *PACTCTX_SECTION_KEYED_DATA_2600;

/* 12352 */
typedef float _Kty;

/* 12353 */
typedef char NvAPI_String[4096];

/* 12354 */
typedef int _Mbstatet;

/* 12355 */
typedef _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;

/* 12356 */
typedef _STORAGE_DEVICE_NUMBER *PSTORAGE_DEVICE_NUMBER;

/* 12357 */
typedef unsigned __int16 INTERNET_PORT;

/* 12358 */
typedef tagMIDIOUTCAPS2A *PMIDIOUTCAPS2A;

/* 12359 */
typedef unsigned int IDirect3DIndexBuffer9;

/* 12360 */
typedef _CRYPT_ECC_PRIVATE_KEY_INFO *PCRYPT_ECC_PRIVATE_KEY_INFO;

/* 12361 */
typedef unsigned int ACCESS_MASK;

/* 12362 */
typedef void *(__cdecl *PFN_NCRYPT_ALLOC)(unsigned __int64);

/* 12363 */
typedef float (*GfxModelAmbientColorPtr)[4];

/* 12364 */
typedef tagMIDIINCAPSA *PMIDIINCAPSA;

/* 12365 */
typedef tagSTYLEBUFA *PSTYLEBUF;

/* 12366 */
typedef tagNONCLIENTMETRICSA *LPNONCLIENTMETRICSA;

/* 12367 */
typedef int __ehstate_t;

/* 12368 */
typedef _ENCRYPTION_BUFFER *PENCRYPTION_BUFFER;

/* 12369 */
typedef int (__cdecl *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(unsigned int, unsigned int, unsigned int, void *);

/* 12370 */
typedef _POWER_USER_PRESENCE *PPOWER_USER_PRESENCE;

/* 12371 */
typedef unsigned __int16 PATCHARRAY[128];

/* 12372 */
typedef IOleCache2 *LPOLECACHE2;

/* 12373 */
typedef void *hks_fixedheap;

/* 12374 */
typedef _DRIVER_INFO_6A *PDRIVER_INFO_6;

/* 12375 */
typedef _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE;

/* 12376 */
typedef const char *PCNZCH;

/* 12377 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETLOGICALGPUFROMPHYSICALGPU)(NvPhysicalGpuHandle__ *, NvLogicalGpuHandle__ **);

/* 12378 */
typedef _SHQUERYRBINFO *LPSHQUERYRBINFO;

/* 12379 */
typedef tagNONCLIENTMETRICSW *LPNONCLIENTMETRICSW;

/* 12380 */
typedef HWAVEOUT__ *HWAVEOUT;

/* 12381 */
typedef tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMS;

/* 12382 */
typedef _CMC_STATUS_INFO *PCMC_STATUS_INFO;

/* 12383 */
typedef _JOB_INFO_2A *LPJOB_INFO_2;

/* 12384 */
typedef int (__cdecl *DESKTOPENUMPROCW)(wchar_t *, __int64);

/* 12385 */
typedef _STORAGE_ASSOCIATION_TYPE *PSTORAGE_ASSOCIATION_TYPE;

/* 12386 */
typedef void *THREAD_START_ROUTINE_PARAM;

/* 12387 */
typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

/* 12388 */
typedef _SLIST_HEADER *PSLIST_HEADER;

/* 12389 */
typedef VehicleTrackSegment *VehicleTrackSegment_ptr;

/* 12390 */
typedef unsigned int __cdecl HANDLER_FUNCTION_EX(unsigned int, unsigned int, void *, void *);

/* 12391 */
typedef _CONSOLE_READCONSOLE_CONTROL *PCONSOLE_READCONSOLE_CONTROL;

/* 12392 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETOUTPUTTYPE)(NvPhysicalGpuHandle__ *, unsigned int, _NV_GPU_OUTPUT_TYPE *);

/* 12393 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETDISPLAYIDFROMDISPLAYHANDLE)(NvDisplayHandle__ *, unsigned int *);

/* 12394 */
typedef int *PLONG32;

/* 12395 */
typedef char *bdVaList;

/* 12396 */
typedef _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;

/* 12397 */
typedef _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;

/* 12398 */
typedef _STORAGE_IDENTIFIER_CODE_SET *PSTORAGE_IDENTIFIER_CODE_SET;

/* 12399 */
typedef unsigned int (__cdecl *YIELDPROC)(unsigned int, unsigned int);

/* 12400 */
typedef DopplerPreset *DopplerPresetPtr;

/* 12401 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CLEARRT)(unsigned int *, unsigned int, tagRECT *, float, float, float, float);

/* 12402 */
typedef _TOKEN_ACCESS_INFORMATION *PTOKEN_ACCESS_INFORMATION;

/* 12403 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_FIND_CRL)(void *, _CERT_STORE_PROV_FIND_INFO *, _CRL_CONTEXT *, unsigned int, void **, _CRL_CONTEXT **);

/* 12404 */
typedef unsigned int ulong32;

/* 12405 */
typedef unsigned int ULONG32;

/* 12406 */
typedef tagVARIANT *LPVARIANTARG;

/* 12407 */
typedef void (__cdecl *BandwidthTest_Callback_GenerateTestPacketMsg)(BandwidthTestInput *, char *, int, int, int *);

/* 12408 */
typedef _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

/* 12409 */
typedef _PERF_DATA_BLOCK *PPERF_DATA_BLOCK;

/* 12410 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_UNLOCK)(unsigned int *, NVDX_ObjectHandle__ *);

/* 12411 */
typedef _SCOPE_TABLE_AMD64 *PSCOPE_TABLE_AMD64;

/* 12412 */
typedef _TOKEN_OWNER *PTOKEN_OWNER;

/* 12413 */
typedef unsigned __int16 ScriptablePartWorldIndex;

/* 12414 */
typedef tagMCI_ANIM_OPEN_PARMSW *LPMCI_ANIM_OPEN_PARMSW;

/* 12415 */
typedef _DEVICEDUMP_PUBLIC_SUBSECTION *PDEVICEDUMP_PUBLIC_SUBSECTION;

/* 12416 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_PERFPOLICIESGETINFO)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_POLICIES_INFO_PARAMS_V1 *);

/* 12417 */
typedef IPropertyStorage *LPPROPERTYSTORAGE;

/* 12418 */
typedef void (__cdecl *pmove_PlayerEvent)(int, int);

/* 12419 */
typedef _DIDATAFORMAT *LPCDIDATAFORMAT;

/* 12420 */
typedef _STORAGE_HOTPLUG_INFO *PSTORAGE_HOTPLUG_INFO;

/* 12421 */
typedef const wchar_t *PCWSTR;

/* 12422 */
typedef _KCRM_TRANSACTION_BLOB *PKCRM_TRANSACTION_BLOB;

/* 12423 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETUNATTACHEDASSOCIATEDDISPLAYNAME)(NvUnAttachedDisplayHandle__ *, char *);

/* 12424 */
typedef _CERT_RDN *PCERT_RDN;

/* 12425 */
typedef _REASON_CONTEXT *PREASON_CONTEXT;

/* 12426 */
typedef tagPIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR;

/* 12427 */
typedef GfxRenderTargetId GfxRenderTargetSuite[2];

/* 12428 */
typedef _CRYPTNET_URL_CACHE_PRE_FETCH_INFO *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;

/* 12429 */
typedef listBoxDef_s *listBoxDef_ptr;

/* 12430 */
typedef _DRIVER_INFO_6W *PDRIVER_INFO_6W;

/* 12431 */
typedef void (__cdecl *PTP_SIMPLE_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *);

/* 12432 */
typedef _TRANSACTION_ENLISTMENTS_INFORMATION *PTRANSACTION_ENLISTMENTS_INFORMATION;

/* 12433 */
typedef char int8_t;

/* 12434 */
typedef _RASTERIZER_STATUS *LPRASTERIZER_STATUS;

/* 12435 */
typedef tagCHOOSECOLORA *LPCHOOSECOLORA;

/* 12436 */
typedef ConditionalScript *ConditionalScriptPtr;

/* 12437 */
typedef char BD_UCHAR8;

/* 12438 */
typedef _CRYPT_ATTRIBUTES *PCMSG_ATTR;

/* 12439 */
typedef unsigned __int16 COLOR16;

/* 12440 */
typedef _JOB_INFO_2W *LPJOB_INFO_2W;

/* 12441 */
typedef tagMCI_SAVE_PARMSW *LPMCI_SAVE_PARMSW;

/* 12442 */
typedef _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;

/* 12443 */
typedef _FILE_OBJECTID_BUFFER *PFILE_OBJECTID_BUFFER;

/* 12444 */
typedef tagNONCLIENTMETRICSA *LPNONCLIENTMETRICS;

/* 12445 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDSLIOUTPUTS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 12446 */
typedef void __cdecl operation(Operand *, Operand *, Operand *);

/* 12447 */
typedef _XSTATE_CONFIGURATION *PXSTATE_CONFIGURATION;

/* 12448 */
typedef _CRL_ISSUING_DIST_POINT *PCRL_ISSUING_DIST_POINT;

/* 12449 */
typedef void (__cdecl *event_callback)(std::ios_base::event, std::ios_base *, int);

/* 12450 */
typedef _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;

/* 12451 */
typedef _FORM_INFO_2A *LPFORM_INFO_2;

/* 12452 */
typedef int (__cdecl *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(_CRYPT_ALGORITHM_IDENTIFIER *, _CRYPTOAPI_BLOB *, char *, unsigned int *, void *);

/* 12453 */
typedef _ACE_HEADER *PACE_HEADER;

/* 12454 */
typedef _FORM_INFO_1A *LPFORM_INFO_1;

/* 12455 */
typedef _DRIVER_INFO_6A *PDRIVER_INFO_6A;

/* 12456 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCURRENTAGPRATE)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 12457 */
typedef const char *PCTSTR;

/* 12458 */
typedef _TP_CALLBACK_ENVIRON_V3 *PTP_CALLBACK_ENVIRON;

/* 12459 */
typedef WeaponCompleteDef *WeaponCompleteDefPtr;

/* 12460 */
typedef _BCryptBufferDesc *PNCryptBufferDesc;

/* 12461 */
typedef int int32_t;

/* 12462 */
typedef tagABORTPATH *PEMRREALIZEPALETTE;

/* 12463 */
typedef int (__cdecl *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(void *);

/* 12464 */
typedef tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMSA;

/* 12465 */
typedef unsigned __int16 GfxShaderConstVersion;

/* 12466 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENABLEHWCURSOR)(NvDisplayHandle__ *);

/* 12467 */
typedef _CERT_DSS_PARAMETERS *PCERT_DSS_PARAMETERS;

/* 12468 */
typedef _CERT_EXTENSION *PCCERT_EXTENSION;

/* 12469 */
typedef _JOB_INFO_2A *LPJOB_INFO_2A;

/* 12470 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEPATHNV)(unsigned int, _NV_PATH_DATATYPE, unsigned int, const char *, unsigned int *);

/* 12471 */
typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

/* 12472 */
typedef void *(__cdecl *lua_Alloc)(void *, void *, unsigned __int64, unsigned __int64);

/* 12473 */
typedef tagRID_DEVICE_INFO *PRID_DEVICE_INFO;

/* 12474 */
typedef _CRYPT_ALGORITHM_IDENTIFIER *PCRYPT_ALGORITHM_IDENTIFIER;

/* 12475 */
typedef tagCANDIDATEFORM *LPCANDIDATEFORM;

/* 12476 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETDVCLEVEL)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 12477 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETPCIINFO)(NvVioHandle__ *, _NVVIOPCIINFO *);

/* 12478 */
typedef int __cdecl ParseSpecialFieldTypeCB(char *, const char *, const int, const __int64);

/* 12479 */
typedef _CERT_AUTHORITY_INFO_ACCESS *PCERT_AUTHORITY_INFO_ACCESS;

/* 12480 */
typedef val_context *PVALCONTEXT;

/* 12481 */
typedef tagCANDIDATEFORM *NPCANDIDATEFORM;

/* 12482 */
typedef tagOIFI *LPOLEINPLACEFRAMEINFO;

/* 12483 */
typedef _STORAGE_ALLOCATE_BC_STREAM_INPUT *PSTORAGE_ALLOCATE_BC_STREAM_INPUT;

/* 12484 */
typedef _CTL_FIND_USAGE_PARA *PCTL_FIND_USAGE_PARA;

/* 12485 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_SETSLIMODE)(unsigned int *, _NV_SLI_MODE);

/* 12486 */
typedef tagMDINEXTMENU *LPMDINEXTMENU;

/* 12487 */
typedef char *RPC_BUFPTR;

/* 12488 */
typedef float spx_word32_t;

/* 12489 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETVIEWPORTORGEX;

/* 12490 */
typedef _BIDI_DATA *PBIDI_DATA;

/* 12491 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPIXELCLOCKRANGE)(NvPhysicalGpuHandle__ *, unsigned int, NV_GET_PCLK *);

/* 12492 */
typedef _CRYPT_CONTEXT_FUNCTION_CONFIG *PCRYPT_CONTEXT_FUNCTION_CONFIG;

/* 12493 */
typedef _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO;

/* 12494 */
typedef void (__cdecl *unexpected_handler)();

/* 12495 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_GETASSOCIATEDUNATTACHEDNVIDIADISPLAYHANDLE)(const char *, NvUnAttachedDisplayHandle__ **);

/* 12496 */
typedef IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;

/* 12497 */
typedef _STORAGE_IDLE_POWER *PSTORAGE_IDLE_POWER;

/* 12498 */
typedef tagTYPEATTR *LPTYPEATTR;

/* 12499 */
typedef IMAGE_COR20_HEADER *PIMAGE_COR20_HEADER;

/* 12500 */
typedef tagHARDWAREHOOKSTRUCT *LPHARDWAREHOOKSTRUCT;

/* 12501 */
typedef void *(__cdecl *encoder_init_func)(SpeexMode *);

/* 12502 */
typedef _CRYPTPROTECT_PROMPTSTRUCT *PCRYPTPROTECT_PROMPTSTRUCT;

/* 12503 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPIXELCLOCKRANGE)(NvPhysicalGpuHandle__ *, unsigned int, NV_SET_PCLK *);

/* 12504 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_ALIASPRIMARYASTEXTURE)(unsigned int *, unsigned int, unsigned int **);

/* 12505 */
typedef __int16 XQuat2[2];

/* 12506 */
typedef OPENCARDNAME_EXA *LPOPENCARDNAME_EXA;

/* 12507 */
typedef char max_fog_buf[32768];

/* 12508 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTTHERMALPOLICIESGETINFO)(NvPhysicalGpuHandle__ *, _NV_GPU_CLIENT_THERMAL_POLICIES_INFO_V2 *);

/* 12509 */
typedef unsigned int GEOTYPE;

/* 12510 */
typedef void (__cdecl *LPOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *);

/* 12511 */
typedef __int64 (__cdecl *PROC)();

/* 12512 */
typedef _ICONINFO *PICONINFO;

/* 12513 */
typedef void *HMETAFILEPICT;

/* 12514 */
typedef _MEMORY_BASIC_INFORMATION64 *PMEMORY_BASIC_INFORMATION64;

/* 12515 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_VALIDATEOUTPUTCOMBINATION)(NvPhysicalGpuHandle__ *, unsigned int);

/* 12516 */
typedef tagWNDCLASSEXA *PWNDCLASSEX;

/* 12517 */
typedef ID3D11ShaderResourceView *GfxShaderView;

/* 12518 */
typedef int (__cdecl *pmove_getentityinfo)(int, int, EntInfo *);

/* 12519 */
typedef _CERT_REGISTRY_STORE_CLIENT_GPT_PARA *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;

/* 12520 */
typedef _BIN_RESULTS *PBIN_RESULTS;

/* 12521 */
typedef tagLOGBRUSH *PLOGBRUSH;

/* 12522 */
typedef unsigned int IDirect3DResource9;

/* 12523 */
typedef tagOLEVERB *LPOLEVERB;

/* 12524 */
typedef char *PNZTCH;

/* 12525 */
typedef _DOC_INFO_2W *LPDOC_INFO_2W;

/* 12526 */
typedef _KTMOBJECT_CURSOR *PKTMOBJECT_CURSOR;

/* 12527 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DISP_APPLYANDSAVECUSTOMRESOLUTION)(unsigned int, _NV_RESOLUTION_EX_V1 *);

/* 12528 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDVCINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_DVC_INFO *);

/* 12529 */
typedef _FILE_REGION_INPUT *PFILE_REGION_INPUT;

/* 12530 */
typedef char NvAPI_LongString[256];

/* 12531 */
typedef unsigned int _Atomic_integral_t;

/* 12532 */
typedef REFS_VOLUME_DATA_BUFFER *PREFS_VOLUME_DATA_BUFFER;

/* 12533 */
typedef ChannelMap SpeakerMapChannel[2];

/* 12534 */
typedef wchar_t **LPBSTR;

/* 12535 */
typedef _DOC_INFO_2A *LPDOC_INFO_2A;

/* 12536 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATE;

/* 12537 */
typedef void (__cdecl *PTERMINATION_HANDLER)(char, void *);

/* 12538 */
typedef tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMS;

/* 12539 */
typedef _VIRTUAL_STORAGE_TYPE *PVIRTUAL_STORAGE_TYPE;

/* 12540 */
typedef IEnumSTATDATA *LPENUMSTATDATA;

/* 12541 */
typedef _WIN32_STREAM_ID *LPWIN32_STREAM_ID;

/* 12542 */
typedef void __cdecl RPC_ADDRESS_CHANGE_FN(void *);

/* 12543 */
typedef _PERF_INSTANCE_DEFINITION *PPERF_INSTANCE_DEFINITION;

/* 12544 */
typedef _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;

/* 12545 */
typedef tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;

/* 12546 */
typedef int (__cdecl *LPFNADDPROPSHEETPAGE)(_PSP *, __int64);

/* 12547 */
typedef tagNONCLIENTMETRICSA *PNONCLIENTMETRICS;

/* 12548 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_IFR_SETUPTARGETBUFFERTOSYS)(IUnknown *, NVFBC_BUFFER_FORMAT, unsigned int, void **);

/* 12549 */
typedef _ENUM_SERVICE_STATUS_PROCESSW *LPENUM_SERVICE_STATUS_PROCESSW;

/* 12550 */
typedef unsigned int LGRPID;

/* 12551 */
typedef EntityOrigin entityOriginArray_t[2048];

/* 12552 */
typedef _CPS_URLS *PCPS_URLS;

/* 12553 */
typedef _PRINTER_OPTIONSA *PPRINTER_OPTIONS;

/* 12554 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETMEMPARTITIONMASK)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 12555 */
typedef _FILE_REGION_OUTPUT *PFILE_REGION_OUTPUT;

/* 12556 */
typedef _TXFS_ROLLFORWARD_REDO_INFORMATION *PTXFS_ROLLFORWARD_REDO_INFORMATION;

/* 12557 */
typedef tagMIDIOUTCAPSW *LPMIDIOUTCAPSW;

/* 12558 */
typedef _SYSTEM_ALARM_CALLBACK_ACE *PSYSTEM_ALARM_CALLBACK_ACE;

/* 12559 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_UNREGISTERRESOURCE)(unsigned int *);

/* 12560 */
typedef tagCOMBOBOXINFO *PCOMBOBOXINFO;

/* 12561 */
typedef tagMIDIOUTCAPSW *NPMIDIOUTCAPSW;

/* 12562 */
typedef tagWTSSESSION_NOTIFICATION *PWTSSESSION_NOTIFICATION;

/* 12563 */
typedef int _I32;

/* 12564 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMAVAILABLESETTINGIDS)(unsigned int *, unsigned int *);

/* 12565 */
typedef void (__cdecl *new_handler)();

/* 12566 */
typedef DLGTEMPLATE *LPCDLGTEMPLATE;

/* 12567 */
typedef _KTMOBJECT_TYPE *PKTMOBJECT_TYPE;

/* 12568 */
typedef _KCRM_TRANSACTION_BLOB *PRKCRM_TRANSACTION_BLOB;

/* 12569 */
typedef tagSOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

/* 12570 */
typedef _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO *PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;

/* 12571 */
typedef HMIDIIN__ *HMIDIIN;

/* 12572 */
typedef wchar_t *PWSTR;

/* 12573 */
typedef const char *LPCSTR;

/* 12574 */
typedef _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;

/* 12575 */
typedef tagLOGPALETTE *LPLOGPALETTE;

/* 12576 */
typedef _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;

/* 12577 */
typedef unsigned __int16 CLIPFORMAT;

/* 12578 */
typedef tagLOGPALETTE *NPLOGPALETTE;

/* 12579 */
typedef _CRYPT_CONTEXTS *PCRYPT_CONTEXTS;

/* 12580 */
typedef FIND_BY_SID_DATA *PFIND_BY_SID_DATA;

/* 12581 */
typedef _CMC_TAGGED_REQUEST *PCMC_TAGGED_REQUEST;

/* 12582 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_ENDSHARERESOURCE)(unsigned int *);

/* 12583 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_ENDSHARERESOURCE)(unsigned int *);

/* 12584 */
typedef _CERT_POLICY_MAPPING *PCERT_POLICY_MAPPING;

/* 12585 */
typedef ID3D11Buffer *GfxIndexBuffer;

/* 12586 */
typedef _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION;

/* 12587 */
typedef int (__cdecl *PFN_CRYPT_ENUM_OID_INFO)(_CRYPT_OID_INFO *, void *);

/* 12588 */
typedef IHttpNegotiate *LPHTTPNEGOTIATE;

/* 12589 */
typedef tagEMRSETICMPROFILE *PEMRSETICMPROFILEW;

/* 12590 */
typedef tagEMRSELECTCLIPPATH *PEMRSETTEXTALIGN;

/* 12591 */
typedef _BCRYPT_DSA_KEY_BLOB_V2 *PBCRYPT_DSA_KEY_BLOB_V2;

/* 12592 */
typedef int errno_t;

/* 12593 */
typedef int (__cdecl *LPFNADDPROPSHEETPAGES)(void *, int (__cdecl *)(_PSP *, __int64), __int64);

/* 12594 */
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;

/* 12595 */
typedef tagDIBSECTION *PDIBSECTION;

/* 12596 */
typedef tagMIXERCONTROLA *PMIXERCONTROLA;

/* 12597 */
typedef IEnumFORMATETC *LPENUMFORMATETC;

/* 12598 */
typedef _TOKEN_ELEVATION_TYPE *PTOKEN_ELEVATION_TYPE;

/* 12599 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMSETTINGS)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int, unsigned int *, _NVDRS_SETTING *);

/* 12600 */
typedef _CERT_STRONG_SIGN_SERIALIZED_INFO *PCERT_STRONG_SIGN_SERIALIZED_INFO;

/* 12601 */
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

/* 12602 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

/* 12603 */
typedef __int64 LONG_PTR;

/* 12604 */
typedef int int_fast32_t;

/* 12605 */
typedef tagDESIGNVECTOR *LPDESIGNVECTOR;

/* 12606 */
typedef _DISK_EXTENT *PDISK_EXTENT;

/* 12607 */
typedef SYSTEM_BATTERY_STATE *PSYSTEM_BATTERY_STATE;

/* 12608 */
typedef void (__cdecl *PFNCLOSETHREADPOOLWAIT)(_TP_WAIT *);

/* 12609 */
typedef READ_USN_JOURNAL_DATA_V1 *PREAD_USN_JOURNAL_DATA;

/* 12610 */
typedef const char *(__cdecl *lua_Reader)(lua_State *, void *, unsigned __int64 *);

/* 12611 */
typedef _DOC_INFO_2A *LPDOC_INFO_2;

/* 12612 */
typedef _CERT_HASHED_URL *PCERT_HASHED_URL;

/* 12613 */
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;

/* 12614 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSCANOUTINTENSITYSTATE)(unsigned int, _NV_SCANOUT_INTENSITY_STATE_DATA *);

/* 12615 */
typedef _CERT_TRUST_LIST_INFO *PCERT_TRUST_LIST_INFO;

/* 12616 */
typedef int (__cdecl *PVECTORED_EXCEPTION_HANDLER)(_EXCEPTION_POINTERS *);

/* 12617 */
typedef int *PNTSTATUS;

/* 12618 */
typedef tagHW_PROFILE_INFOA *LPHW_PROFILE_INFOA;

/* 12619 */
typedef _CHANGER_MOVE_MEDIUM *PCHANGER_MOVE_MEDIUM;

/* 12620 */
typedef _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO;

/* 12621 */
typedef void (__cdecl *PhysGlassCallback)(const float *, const float *);

/* 12622 */
typedef tagBITMAPCOREHEADER *PBITMAPCOREHEADER;

/* 12623 */
typedef SndCurve *ReverbCurvePtr;

/* 12624 */
typedef tagACTCTXA *PACTCTX;

/* 12625 */
typedef unsigned __int64 (__cdecl *LPPAGESETUPHOOK)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 12626 */
typedef int (__cdecl *PFNSETTHREADSTACKGUARANTEE)(unsigned int *);

/* 12627 */
typedef _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

/* 12628 */
typedef HDDEDATA__ *__cdecl FNCALLBACK(unsigned int, unsigned int, HCONV__ *, HSZ__ *, HSZ__ *, HDDEDATA__ *, unsigned __int64, unsigned __int64);

/* 12629 */
typedef ID3D11UnorderedAccessView *GfxShaderRWView;

/* 12630 */
typedef const char *PFORMAT_STRING;

/* 12631 */
typedef _PRINTER_OPTIONSA *PPRINTER_OPTIONSA;

/* 12632 */
typedef unsigned __int16 SoundAlias;

/* 12633 */
typedef tagWAVEOUTCAPSA *NPWAVEOUTCAPS;

/* 12634 */
typedef tagAXESLISTA *PAXESLIST;

/* 12635 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_TRANSFERRENDERTARGET)(unsigned int *, void **, unsigned int, unsigned int, unsigned int);

/* 12636 */
typedef tagWAVEOUTCAPSA *LPWAVEOUTCAPS;

/* 12637 */
typedef unsigned __int64 ClientUnifiedMessageHandle;

/* 12638 */
typedef NTFS_FILE_RECORD_INPUT_BUFFER *PNTFS_FILE_RECORD_INPUT_BUFFER;

/* 12639 */
typedef tagPALETTEENTRY *PPALETTEENTRY;

/* 12640 */
typedef _CHANGER_EXCHANGE_MEDIUM *PCHANGER_EXCHANGE_MEDIUM;

/* 12641 */
typedef my_idct_controller *my_idct_ptr;

/* 12642 */
typedef _NETRESOURCEA *LPNETRESOURCE;

/* 12643 */
typedef DLGTEMPLATE *LPCDLGTEMPLATEA;

/* 12644 */
typedef tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYGON16;

/* 12645 */
typedef tagHARDWAREHOOKSTRUCT *PHARDWAREHOOKSTRUCT;

/* 12646 */
typedef HWAVE__ *HWAVE;

/* 12647 */
typedef _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;

/* 12648 */
typedef COMPARTMENT_ID *PCOMPARTMENT_ID;

/* 12649 */
typedef _CRYPTOAPI_BLOB *PCERT_RDN_VALUE_BLOB;

/* 12650 */
typedef sockaddr_in6_w2ksp1 *LPSOCKADDR_IN6_W2KSP1;

/* 12651 */
typedef __int16 int_least16_t;

/* 12652 */
typedef tagMCI_BREAK_PARMS *PMCI_BREAK_PARMS;

/* 12653 */
typedef _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS;

/* 12654 */
typedef tagHELPWININFOA *LPHELPWININFO;

/* 12655 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DELETEPROFILE)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *);

/* 12656 */
typedef unsigned __int16 r_index_t;

/* 12657 */
typedef _numberfmtA *LPNUMBERFMT;

/* 12658 */
typedef unsigned int (__cdecl *LPPROGRESS_ROUTINE)(_LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, unsigned int, unsigned int, void *, void *, void *);

/* 12659 */
typedef _MOUSE_EVENT_RECORD *PMOUSE_EVENT_RECORD;

/* 12660 */
typedef __int64 intptr_t;

/* 12661 */
typedef unsigned int io_state;

/* 12662 */
typedef _PRINTER_OPTIONSW *PPRINTER_OPTIONSW;

/* 12663 */
typedef tagRECT *LPCRECT;

/* 12664 */
typedef _VERIFY_INFORMATION *PVERIFY_INFORMATION;

/* 12665 */
typedef void (__cdecl *PFN_CRYPT_FREE)(void *);

/* 12666 */
typedef IBindCtx *LPBINDCTX;

/* 12667 */
typedef unsigned int uint32_t;

/* 12668 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ENUMDATAFORMATS)(NvVioHandle__ *, unsigned int, _NVVIODATAFORMATDETAIL *);

/* 12669 */
typedef char uint_least8_t;

/* 12670 */
typedef DLGTEMPLATE *LPCDLGTEMPLATEW;

/* 12671 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETASSOCIATEDNVIDIADISPLAYNAME)(NvDisplayHandle__ *, char *);

/* 12672 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPCIIDENTIFIERS)(NvPhysicalGpuHandle__ *, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

/* 12673 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_ADJUSTSYNCDELAY)(NvGSyncDeviceHandle__ *, _NVAPI_GSYNC_DELAY_TYPE, _NV_GSYNC_DELAY *, unsigned int *);

/* 12674 */
typedef void *HANDLE;

/* 12675 */
typedef _CERT_RDN_ATTR *PCERT_RDN_ATTR;

/* 12676 */
typedef _PARTITION_INFORMATION_MBR *PPARTITION_INFORMATION_MBR;

/* 12677 */
typedef unsigned int seek_dir;

/* 12678 */
typedef tagMIDIOUTCAPS2A *PMIDIOUTCAPS2;

/* 12679 */
typedef _FILE_ALIGNMENT_INFO *PFILE_ALIGNMENT_INFO;

/* 12680 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETVIDEOSTATE)(unsigned int *, _NVAPI_GET_VIDEO_STATE_COMPONENT *);

/* 12681 */
typedef _CERT_AUTHORITY_KEY_ID_INFO *PCERT_AUTHORITY_KEY_ID_INFO;

/* 12682 */
typedef _CMSG_ENVELOPED_ENCODE_INFO *PCMSG_ENVELOPED_ENCODE_INFO;

/* 12683 */
typedef tagSTYLEBUFA *PSTYLEBUFA;

/* 12684 */
typedef __int64 (__cdecl *WNDPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 12685 */
typedef _WSAMSG *LPWSAMSG;

/* 12686 */
typedef __int64 difference_type;

/* 12687 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_RESETECCERRORINFO)(NvPhysicalGpuHandle__ *, char, char);

/* 12688 */
typedef void (__cdecl *LPWAVECALLBACK)(HDRVR__ *, unsigned int, unsigned __int64, unsigned __int64, unsigned __int64);

/* 12689 */
typedef _PRINTER_NOTIFY_INFO_DATA *LPPRINTER_NOTIFY_INFO_DATA;

/* 12690 */
typedef _BLENDFUNCTION *PBLENDFUNCTION;

/* 12691 */
typedef _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;

/* 12692 */
typedef _MODEMSETTINGS *LPMODEMSETTINGS;

/* 12693 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_BEGIN)(NVDX_ObjectHandle__ *);

/* 12694 */
typedef void __cdecl BAD_MEMORY_CALLBACK_ROUTINE();

/* 12695 */
typedef tagACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

/* 12696 */
typedef _userHENHMETAFILE *wireHENHMETAFILE;

/* 12697 */
typedef _XSAVE_AREA *PXSAVE_AREA;

/* 12698 */
typedef int (__cdecl *PINIT_ONCE_FN)(_RTL_RUN_ONCE *, void *, void **);

/* 12699 */
typedef tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMSA;

/* 12700 */
typedef tagMIDIOUTCAPSA *PMIDIOUTCAPS;

/* 12701 */
typedef int bot_score_obj_t;

/* 12702 */
typedef _FILE_IO_PRIORITY_HINT_INFO *PFILE_IO_PRIORITY_HINT_INFO;

/* 12703 */
typedef int (__cdecl *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(unsigned __int64, unsigned int, _CRYPT_ALGORITHM_IDENTIFIER *, void *, const wchar_t *, const wchar_t *, char *, unsigned int, char *, unsigned int *);

/* 12704 */
typedef _BIDI_REQUEST_CONTAINER *PBIDI_REQUEST_CONTAINER;

/* 12705 */
typedef _CRYPT_TIMESTAMP_RESPONSE *PCRYPT_TIMESTAMP_RESPONSE;

/* 12706 */
typedef int DCTELEM;

/* 12707 */
typedef unsigned __int16 GridSamplePoint[3];

/* 12708 */
typedef _BIDI_RESPONSE_DATA *LPBIDI_RESPONSE_DATA;

/* 12709 */
typedef _PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2;

/* 12710 */
typedef int __cdecl HandleSpecialCaseThreeWayMergeCB(const char *, char *, char *, char *, int);

/* 12711 */
typedef const char *PCUZZTSTR;

/* 12712 */
typedef tagPARAMDESCEX *LPPARAMDESCEX;

/* 12713 */
typedef _FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

/* 12714 */
typedef _JOB_INFO_3 *LPJOB_INFO_3;

/* 12715 */
typedef unsigned __int64 db_anim_data_t;

/* 12716 */
typedef _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;

/* 12717 */
typedef dxGeom *dGeomID;

/* 12718 */
typedef tagCHANGEFILTERSTRUCT *PCHANGEFILTERSTRUCT;

/* 12719 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCONNECTEDDISPLAYIDS)(NvPhysicalGpuHandle__ *, _NV_GPU_DISPLAYIDS *, unsigned int *, unsigned int);

/* 12720 */
typedef tagMCI_VD_PLAY_PARMS *PMCI_VD_PLAY_PARMS;

/* 12721 */
typedef unsigned __int16 *PSECURITY_DESCRIPTOR_CONTROL;

/* 12722 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHPARAMETERINV)(unsigned int, _NV_PATH_PARAMTYPE, int);

/* 12723 */
typedef void (__cdecl *PFN_CMSG_FREE)(void *);

/* 12724 */
typedef _FILE_REMOTE_PROTOCOL_INFO *PFILE_REMOTE_PROTOCOL_INFO;

/* 12725 */
typedef tagEMRSTRETCHBLT *PEMRSTRETCHBLT;

/* 12726 */
typedef _SENDCMDINPARAMS *LPSENDCMDINPARAMS;

/* 12727 */
typedef _GUID *LPGUID;

/* 12728 */
typedef _IP_ADAPTER_INFO *PIP_ADAPTER_INFO;

/* 12729 */
typedef _ULARGE_INTEGER *PULARGE_INTEGER;

/* 12730 */
typedef const char *PCUTSTR;

/* 12731 */
typedef char alignCompBufByte_t;

/* 12732 */
typedef sockaddr_storage *LPSOCKADDR_STORAGE;

/* 12733 */
typedef _CERT_AUTHORITY_KEY_ID2_INFO *PCERT_AUTHORITY_KEY_ID2_INFO;

/* 12734 */
typedef _cpinfoexA *LPCPINFOEXA;

/* 12735 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_ISACTIVATED)(void *, char *);

/* 12736 */
typedef wchar_t *LPWCH;

/* 12737 */
typedef tagNEWTEXTMETRICA *LPNEWTEXTMETRICA;

/* 12738 */
typedef wchar_t *LPUWSTR;

/* 12739 */
typedef tagACTCTXA *PCACTCTX;

/* 12740 */
typedef unsigned __int16 PRINTEROP_FLAGS;

/* 12741 */
typedef void *HCRYPTOIDFUNCSET;

/* 12742 */
typedef tagNEWTEXTMETRICA *NPNEWTEXTMETRICA;

/* 12743 */
typedef _IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;

/* 12744 */
typedef _CRYPT_TIME_STAMP_REQUEST_INFO *PCRYPT_TIME_STAMP_REQUEST_INFO;

/* 12745 */
typedef int (__cdecl *MINIDUMPWRITEDUMP)(void *, unsigned int, void *, _MINIDUMP_TYPE, _MINIDUMP_EXCEPTION_INFORMATION *const , _MINIDUMP_USER_STREAM_INFORMATION *const , _MINIDUMP_CALLBACK_INFORMATION *const );

/* 12746 */
typedef tagDELETEITEMSTRUCT *LPDELETEITEMSTRUCT;

/* 12747 */
typedef _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;

/* 12748 */
typedef IDirectInputA *LPDIRECTINPUT;

/* 12749 */
typedef _MONITOR_INFO_1W *PMONITOR_INFO_1W;

/* 12750 */
typedef _cpinfoexW *LPCPINFOEXW;

/* 12751 */
typedef tagEMRFILLPATH *PEMRSTROKEPATH;

/* 12752 */
typedef _CERT_STORE_PROV_FIND_INFO *PCCERT_STORE_PROV_FIND_INFO;

/* 12753 */
typedef _CERT_CHAIN_POLICY_STATUS *PCERT_CHAIN_POLICY_STATUS;

/* 12754 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_BEGINRESOURCERENDERING)(IUnknown *, NVDX_ObjectHandle__ *, unsigned int);

/* 12755 */
typedef tagMIDIOUTCAPSW *PMIDIOUTCAPSW;

/* 12756 */
typedef void *(__cdecl *MantleAnimAlloc)(unsigned __int64);

/* 12757 */
typedef int (__cdecl *OLDFONTENUMPROCA)(tagLOGFONTA *, tagTEXTMETRICA *, unsigned int, __int64);

/* 12758 */
typedef _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

/* 12759 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETPHYSICALGPUSFROMLOGICALGPU)(NvLogicalGpuHandle__ *, NvPhysicalGpuHandle__ **, unsigned int *);

/* 12760 */
typedef _TAPE_WMI_OPERATIONS *PTAPE_WMI_OPERATIONS;

/* 12761 */
typedef _IMAGE_RELOCATION *PIMAGE_RELOCATION;

/* 12762 */
typedef const char *PCZZTSTR;

/* 12763 */
typedef _NT_TIB32 *PNT_TIB32;

/* 12764 */
typedef _ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;

/* 12765 */
typedef const wchar_t *PCZZWSTR;

/* 12766 */
typedef char stbi_dequantize_t;

/* 12767 */
typedef float raw_vec4_t[4];

/* 12768 */
typedef tagCHOOSECOLORA *LPCHOOSECOLOR;

/* 12769 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SETCSC)(NvVioHandle__ *, _NVVIOCOLORCONVERSION *);

/* 12770 */
typedef _CHANGER_SEND_VOLUME_TAG_INFORMATION *PCHANGER_SEND_VOLUME_TAG_INFORMATION;

/* 12771 */
typedef tagDROPSTRUCT *PDROPSTRUCT;

/* 12772 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_SETGRIDTOPOLOGY)(NV_MOSAIC_GRID_TOPO *, unsigned int);

/* 12773 */
typedef ILockBytes *LPLOCKBYTES;

/* 12774 */
typedef void (__cdecl *inverse_DCT_method_ptr)(jpeg_decompress_struct *, jpeg_component_info *, __int16 *, char **, unsigned int);

/* 12775 */
typedef _POWER_PLATFORM_INFORMATION *PPOWER_PLATFORM_INFORMATION;

/* 12776 */
typedef char *LPTCH;

/* 12777 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DELETEUNDERSCANCONFIG)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 12778 */
typedef _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;

/* 12779 */
typedef _MONITOR_INFO_2W *PMONITOR_INFO_2W;

/* 12780 */
typedef unsigned int _Uint4_t;

/* 12781 */
typedef tagMIDIOUTCAPSA *PMIDIOUTCAPSA;

/* 12782 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETCSC)(NvVioHandle__ *, _NVVIOCOLORCONVERSION *);

/* 12783 */
typedef unsigned int GfxDecodedSamplerState;

/* 12784 */
typedef _CRYPT_INTERFACE_REG *PCRYPT_INTERFACE_REG;

/* 12785 */
typedef _FORM_INFO_2A *LPFORM_INFO_2A;

/* 12786 */
typedef _FIRMWARE_TYPE *PFIRMWARE_TYPE;

/* 12787 */
typedef tagENUMLOGFONTEXA *LPENUMLOGFONTEX;

/* 12788 */
typedef int (__cdecl *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(_CRYPT_ALGORITHM_IDENTIFIER, _CRYPTOAPI_BLOB, char *, unsigned int *, void *);

/* 12789 */
typedef _OVERLAPPED *LPOVERLAPPED;

/* 12790 */
typedef _FORM_INFO_1A *LPFORM_INFO_1A;

/* 12791 */
typedef tagMONMSGSTRUCT *PMONMSGSTRUCT;

/* 12792 */
typedef _CERT_KEY_ATTRIBUTES_INFO *PCERT_KEY_ATTRIBUTES_INFO;

/* 12793 */
typedef tagRECT *PRECT;

/* 12794 */
typedef tagACTCTXW *PCACTCTXW;

/* 12795 */
typedef _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

/* 12796 */
typedef ColorizationSet *ColorizationSetPtr;

/* 12797 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDVCINFOEX)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_DVC_INFO_EX *);

/* 12798 */
typedef __int64 streamoff;

/* 12799 */
typedef void *Sys_File;

/* 12800 */
typedef tagMCI_PLAY_PARMS *LPMCI_PLAY_PARMS;

/* 12801 */
typedef void (__cdecl *SendFunction)(msg_t *, int, unsigned int *);

/* 12802 */
typedef HWAVEIN__ **LPHWAVEIN;

/* 12803 */
typedef _cpinfoexA *LPCPINFOEX;

/* 12804 */
typedef int (__cdecl *PFN_CERT_STORE_PROV_READ_CERT)(void *, _CERT_CONTEXT *, unsigned int, _CERT_CONTEXT **);

/* 12805 */
typedef OPENCARDNAME_EXA *LPOPENCARDNAME_EX;

/* 12806 */
typedef tagACTCTXA *PCACTCTXA;

/* 12807 */
typedef void __cdecl dNearCallback(void *, dxGeom *, dxGeom *);

/* 12808 */
typedef _MOVE_FILE_DATA32 *PMOVE_FILE_DATA32;

/* 12809 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_IS3DCURSORSUPPORTED)(void *, char *);

/* 12810 */
typedef _CERT_ALT_NAME_ENTRY *PCERT_ALT_NAME_ENTRY;

/* 12811 */
typedef int clock_t;

/* 12812 */
typedef tagMONITORINFOEXA *LPMONITORINFOEX;

/* 12813 */
typedef _CRYPTOAPI_BLOB *PCRYPT_INTEGER_BLOB;

/* 12814 */
typedef int UIContextIndex_t;

/* 12815 */
typedef _userHPALETTE *wireHPALETTE;

/* 12816 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO;

/* 12817 */
typedef ID3D11Buffer *GfxIndexBufferHandle;

/* 12818 */
typedef IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;

/* 12819 */
typedef _CRYPT_ASYNC_RETRIEVAL_COMPLETION *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;

/* 12820 */
typedef StaticDvar *StaticDvarPtr;

/* 12821 */
typedef _PATHNAME_BUFFER *PPATHNAME_BUFFER;

/* 12822 */
typedef _PERFORMANCE_DATA *PPERFORMANCE_DATA;

/* 12823 */
typedef _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

/* 12824 */
typedef unsigned int bdLeaderBoardID;

/* 12825 */
typedef _TP_CLEANUP_GROUP *PTP_CLEANUP_GROUP;

/* 12826 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_IFR_COPYFROMSHAREDSURFACE)(unsigned int *, void *, unsigned int *);

/* 12827 */
typedef jpeg_common_struct *j_common_ptr;

/* 12828 */
typedef _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;

/* 12829 */
typedef wchar_t *PNZWCH;

/* 12830 */
typedef unsigned int (__cdecl *LPFNDEVCAPS)(char *, char *, unsigned int, char *, _devicemodeA *);

/* 12831 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETSHADERSUBPIPECOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 12832 */
typedef _DOC_INFO_1W *LPDOC_INFO_1W;

/* 12833 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETRAMTYPE)(NvPhysicalGpuHandle__ *, NV_GPU_RAM_TYPE *);

/* 12834 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_HANDSHAKE_MESSAGE_CONTROL)(void *, char);

/* 12835 */
typedef _DRAWPATRECT *PDRAWPATRECT;

/* 12836 */
typedef tagCONVCONTEXT *PCONVCONTEXT;

/* 12837 */
typedef _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE;

/* 12838 */
typedef int (__cdecl *UILANGUAGE_ENUMPROCW)(wchar_t *, __int64);

/* 12839 */
typedef int (__cdecl *REGISTERWORDENUMPROCA)(const char *, unsigned int, const char *, void *);

/* 12840 */
typedef tagSCROLLINFO *LPCSCROLLINFO;

/* 12841 */
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 *PIMAGE_LOAD_CONFIG_DIRECTORY32;

/* 12842 */
typedef _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY;

/* 12843 */
typedef void __cdecl SERVICE_MAIN_FUNCTIONA(unsigned int, char **);

/* 12844 */
typedef addrinfo *PADDRINFOA;

/* 12845 */
typedef _DRIVER_INFO_5W *LPDRIVER_INFO_5W;

/* 12846 */
typedef _DOC_INFO_1A *LPDOC_INFO_1A;

/* 12847 */
typedef long double _FP64;

/* 12848 */
typedef tagLOGBRUSH32 *PLOGBRUSH32;

/* 12849 */
typedef tagMETARECORD *PMETARECORD;

/* 12850 */
typedef unsigned int ScriptableWorldData;

/* 12851 */
typedef unsigned __int64 (__cdecl *LPOCNCONNPROCA)(unsigned __int64, char *, char *, void *);

/* 12852 */
typedef pollfd *LPWSAPOLLFD;

/* 12853 */
typedef tagEMRPOLYDRAW16 *PEMRPOLYDRAW16;

/* 12854 */
typedef tWAVEFORMATEX *PWAVEFORMATEX;

/* 12855 */
typedef _SYSTEM_POWER_POLICY *PSYSTEM_POWER_POLICY;

/* 12856 */
typedef IDataObject *LPDATAOBJECT;

/* 12857 */
typedef tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEVIEWPORTEXTEX;

/* 12858 */
typedef _FILE_ID_128 *PFILE_ID_128;

/* 12859 */
typedef _RESOURCEMANAGER_COMPLETION_INFORMATION *PRESOURCEMANAGER_COMPLETION_INFORMATION;

/* 12860 */
typedef unsigned __int64 HCRYPTPROV;

/* 12861 */
typedef int (__cdecl *REGISTERWORDENUMPROCW)(const wchar_t *, unsigned int, const wchar_t *, void *);

/* 12862 */
typedef _DEVICE_SEEK_PENALTY_DESCRIPTOR *PDEVICE_SEEK_PENALTY_DESCRIPTOR;

/* 12863 */
typedef _wireVARIANT *wireVARIANT;

/* 12864 */
typedef int (__cdecl *ENUMRESTYPEPROCW)(HINSTANCE__ *, wchar_t *, __int64);

/* 12865 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURASETSTATE)(_NVAPI_VENTURA_STATE);

/* 12866 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D1X_QUERYFRAMECOUNT)(IUnknown *, unsigned int *);

/* 12867 */
typedef void **PHCRYPTASYNC;

/* 12868 */
typedef _STARTUPINFOEXA *LPSTARTUPINFOEXA;

/* 12869 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHMATRIXNV)(unsigned int, _NV_PATH_TARGETTYPE, const float *);

/* 12870 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_CREATEDISPLAYFROMUNATTACHEDDISPLAY)(NvUnAttachedDisplayHandle__ *, NvDisplayHandle__ **);

/* 12871 */
typedef hostent *PHOSTENT;

/* 12872 */
typedef tagJOYCAPSW *NPJOYCAPSW;

/* 12873 */
typedef ComWorld *ComWorldPtr;

/* 12874 */
typedef tagJOYCAPSW *LPJOYCAPSW;

/* 12875 */
typedef _SID *PISID;

/* 12876 */
typedef Material *MaterialHandle;

/* 12877 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_CREATESESSION)(NvDRSSessionHandle__ **);

/* 12878 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCRELEASE)(unsigned int *, void *);

/* 12879 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GPIOQUERYLEGALPINS)(NvPhysicalGpuHandle__ *, NV_GPU_GPIO_LEGAL_PINS *);

/* 12880 */
typedef float vec3_t[3];

/* 12881 */
typedef tagSCROLLINFO *LPSCROLLINFO;

/* 12882 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_ENUMDISPLAYGRIDS)(NV_MOSAIC_GRID_TOPO *, unsigned int *);

/* 12883 */
typedef SC_HANDLE__ *SC_HANDLE;

/* 12884 */
typedef _DRIVER_INFO_4W *LPDRIVER_INFO_4W;

/* 12885 */
typedef _SID_AND_ATTRIBUTES_HASH *PSID_AND_ATTRIBUTES_HASH;

/* 12886 */
typedef _TXFS_READ_BACKUP_INFORMATION_OUT *PTXFS_READ_BACKUP_INFORMATION_OUT;

/* 12887 */
typedef char *PTSTR;

/* 12888 */
typedef QOS_OBJECT_HDR *LPQOS_OBJECT_HDR;

/* 12889 */
typedef char JSAMPLE;

/* 12890 */
typedef char GfxImageCategory;

/* 12891 */
typedef tagMCI_OVLY_RECT_PARMS *LPMCI_OVLY_RECT_PARMS;

/* 12892 */
typedef _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

/* 12893 */
typedef _OFNOTIFYA *LPOFNOTIFY;

/* 12894 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDRIVERMEMORYINFO)(NvDisplayHandle__ *, NV_DRIVER_MEMORY_INFO *);

/* 12895 */
typedef _GUID *__rcGUID_t;

/* 12896 */
typedef HRSRC__ *HRSRC;

/* 12897 */
typedef tagCANDIDATEFORM *PCANDIDATEFORM;

/* 12898 */
typedef unsigned int threadId_t;

/* 12899 */
typedef void (__cdecl *fn_think)(gentity_s *);

/* 12900 */
typedef _devicemodeW *LPDEVMODEW;

/* 12901 */
typedef _devicemodeW *NPDEVMODEW;

/* 12902 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_I2CWRITEEX)(NvPhysicalGpuHandle__ *, NV_I2C_INFO_V3 *, NV_I2C_INFO_EX *);

/* 12903 */
typedef _DEVICE_DATA_SET_RANGE *PDEVICE_DATA_SET_RANGE;

/* 12904 */
typedef char *PSECURITY_CONTEXT_TRACKING_MODE;

/* 12905 */
typedef _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;

/* 12906 */
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;

/* 12907 */
typedef _CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

/* 12908 */
typedef _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;

/* 12909 */
typedef void *HOLEMENU;

/* 12910 */
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;

/* 12911 */
typedef int (__cdecl *ENUMRESLANGPROCA)(HINSTANCE__ *, const char *, const char *, unsigned __int16, __int64);

/* 12912 */
typedef hks::dlmalloc::malloc_chunk *mchunkptr;

/* 12913 */
typedef SndDriverGlobals *SndDriverGlobalsPtr;

/* 12914 */
typedef sockaddr_storage_xp *LPSOCKADDR_STORAGE_XP;

/* 12915 */
typedef _STORAGE_EVENT_NOTIFICATION *PSTORAGE_EVENT_NOTIFICATION;

/* 12916 */
typedef tagMENUBARINFO *PMENUBARINFO;

/* 12917 */
typedef _sockaddr_in6_pair *PSOCKADDR_IN6_PAIR;

/* 12918 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_ENABLEOVERCLOCKEDPSTATES)(NvPhysicalGpuHandle__ *, char);

/* 12919 */
typedef DIDEVICEOBJECTDATA *LPDIDEVICEOBJECTDATA;

/* 12920 */
typedef unsigned int (__cdecl *PFNGETCURRENTPROCESSORNUMBER)();

/* 12921 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_RESTORECOOLERPOLICYTABLE)(NvPhysicalGpuHandle__ *, unsigned int *, unsigned int, NV_COOLER_POLICY);

/* 12922 */
typedef hks::dlmalloc::malloc_tree_chunk *tchunkptr;

/* 12923 */
typedef _DOC_INFO_1A *LPDOC_INFO_1;

/* 12924 */
typedef _ABC *PABC;

/* 12925 */
typedef _WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

/* 12926 */
typedef void *HINTERNET;

/* 12927 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETDEFAULTPROFILE)(unsigned int, char *, unsigned int *);

/* 12928 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTTHERMALPOLICIESGETSTATUS)(NvPhysicalGpuHandle__ *, _NV_GPU_CLIENT_THERMAL_POLICIES_STATUS_V2 *);

/* 12929 */
typedef tagMONHSZSTRUCTA *PMONHSZSTRUCT;

/* 12930 */
typedef tagCOPYDATASTRUCT *PCOPYDATASTRUCT;

/* 12931 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETCURRENTZBUFFERHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 12932 */
typedef unsigned int TOUCH_MASK;

/* 12933 */
typedef tagMONERRSTRUCT *PMONERRSTRUCT;

/* 12934 */
typedef _OFNOTIFYW *LPOFNOTIFYW;

/* 12935 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_GETNUMPROFILES)(NvDRSSessionHandle__ *, unsigned int *);

/* 12936 */
typedef _IDEREGS *PIDEREGS;

/* 12937 */
typedef unsigned int bdTitleID;

/* 12938 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_PERFPOLICIESGETSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_PERF_POLICIES_STATUS_PARAMS_V1 *);

/* 12939 */
typedef tagEMRALPHABLEND *PEMRALPHABLEND;

/* 12940 */
typedef _CHANGER_ELEMENT_STATUS *PCHANGER_ELEMENT_STATUS;

/* 12941 */
typedef _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;

/* 12942 */
typedef _ABC *LPABC;

/* 12943 */
typedef unsigned int hksUint;

/* 12944 */
typedef _DRIVER_INFO_6W *LPDRIVER_INFO_6W;

/* 12945 */
typedef _MIDL_SERVER_INFO_ *PMIDL_SERVER_INFO;

/* 12946 */
typedef void (__cdecl *BEM_FREE_INTERFACE_CALLBACK)(void *);

/* 12947 */
typedef char *PUINT8;

/* 12948 */
typedef unsigned __int16 wctype_t;

/* 12949 */
typedef _ABC *NPABC;

/* 12950 */
typedef _TXFS_MODIFY_RM *PTXFS_MODIFY_RM;

/* 12951 */
typedef _KCRM_PROTOCOL_BLOB *PRKCRM_PROTOCOL_BLOB;

/* 12952 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETDEVICEDISPLAYMODE)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_DISPLAY_MODE *);

/* 12953 */
typedef _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;

/* 12954 */
typedef entityState_s *(__cdecl *pmove_getEntityState)(LocalClientNum_t, int);

/* 12955 */
typedef void *HCERTSTORE;

/* 12956 */
typedef unsigned int TOUCH_FLAGS;

/* 12957 */
typedef _OFNOTIFYA *LPOFNOTIFYA;

/* 12958 */
typedef _SD_QUERY_STATS_INPUT *PSD_QUERY_STATS_INPUT;

/* 12959 */
typedef unsigned __int16 dcid_t;

/* 12960 */
typedef unsigned int *PUCSSTR;

/* 12961 */
typedef void *THREAD_HANDLE;

/* 12962 */
typedef tagMOUSEMOVEPOINT *LPMOUSEMOVEPOINT;

/* 12963 */
typedef OPENCARD_SEARCH_CRITERIAW *POPENCARD_SEARCH_CRITERIAW;

/* 12964 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_FINDPROFILEBYNAME)(NvDRSSessionHandle__ *, unsigned __int16 *, NvDRSProfileHandle__ **);

/* 12965 */
typedef tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMS;

/* 12966 */
typedef _DWORD_BLOB *UP_DWORD_BLOB;

/* 12967 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DELETECUSTOMDISPLAY)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 12968 */
typedef __int16 (*JBLOCKROW)[64];

/* 12969 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_CREATEVIDEOBEGIN)(unsigned int *);

/* 12970 */
typedef DIDEVICEOBJECTINSTANCEA *LPCDIDEVICEOBJECTINSTANCEA;

/* 12971 */
typedef __int64 *PSSIZE_T;

/* 12972 */
typedef _MMIOINFO *LPCMMIOINFO;

/* 12973 */
typedef _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;

/* 12974 */
typedef void *volatile volatile_ptr;

/* 12975 */
typedef _DRIVER_INFO_1W *LPDRIVER_INFO_1W;

/* 12976 */
typedef tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMSA;

/* 12977 */
typedef void (__cdecl *MethodMarker)(lua_State *, hks::Method *);

/* 12978 */
typedef _OFNOTIFYEXW *LPOFNOTIFYEXW;

/* 12979 */
typedef void (__cdecl *hks_lowmemorywarning)(void *, unsigned __int64, unsigned __int64);

/* 12980 */
typedef _DSBUFFERDESC *LPCDSBUFFERDESC;

/* 12981 */
typedef IInternetBindInfo *LPIINTERNETBINDINFO;

/* 12982 */
typedef unsigned int (__cdecl *APPLICATION_RECOVERY_CALLBACK)(void *);

/* 12983 */
typedef unsigned __int16 modelNameIndex_t;

/* 12984 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA *PSERVICE_CONTROL_STATUS_REASON_PARAMS;

/* 12985 */
typedef _DRIVER_INFO_4A *PDRIVER_INFO_4;

/* 12986 */
typedef tagBITMAPFILEHEADER *LPBITMAPFILEHEADER;

/* 12987 */
typedef ID3D11ShaderResourceView *GfxShaderViewHandle;

/* 12988 */
typedef _KEY_TYPE_SUBTYPE *PKEY_TYPE_SUBTYPE;

/* 12989 */
typedef _OFNOTIFYEXA *LPOFNOTIFYEXA;

/* 12990 */
typedef _PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1;

/* 12991 */
typedef _CMSG_KEY_TRANS_RECIPIENT_INFO *PCMSG_KEY_TRANS_RECIPIENT_INFO;

/* 12992 */
typedef unsigned __int64 POINTER_64_INT;

/* 12993 */
typedef tagREGISTERWORDW *PREGISTERWORDW;

/* 12994 */
typedef _CRYPT_PROPERTY_REF *PCRYPT_PROPERTY_REF;

/* 12995 */
typedef tagMCI_OVLY_WINDOW_PARMSW *PMCI_OVLY_WINDOW_PARMSW;

/* 12996 */
typedef const wchar_t *PCUZZWSTR;

/* 12997 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYDRIVERMEMORYINFO)(NvDisplayHandle__ *, NV_DISPLAY_DRIVER_MEMORY_INFO_V2 *);

/* 12998 */
typedef _TAPE_ERASE *PTAPE_ERASE;

/* 12999 */
typedef _RESOURCEMANAGER_BASIC_INFORMATION *PRESOURCEMANAGER_BASIC_INFORMATION;

/* 13000 */
typedef _PRINTPROCESSOR_INFO_1W *LPPRINTPROCESSOR_INFO_1W;

/* 13001 */
typedef tagWNDCLASSW *PWNDCLASSW;

/* 13002 */
typedef IDropTarget *LPDROPTARGET;

/* 13003 */
typedef tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT;

/* 13004 */
typedef unsigned int OPERATION_ID;

/* 13005 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_3D_SETPROPERTY)(char *, NV_3D_SETTING *);

/* 13006 */
typedef multiDef_s *multiDef_ptr;

/* 13007 */
typedef void (__cdecl *UI_KeyboardCallback)(LocalClientNum_t, bool, const char *);

/* 13008 */
typedef unsigned __int64 NvU64;

/* 13009 */
typedef unsigned int HREFTYPE;

/* 13010 */
typedef float spx_sig_t;

/* 13011 */
typedef _FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

/* 13012 */
typedef _CSV_IS_OWNED_BY_CSVFS *PCSV_IS_OWNED_BY_CSVFS;

/* 13013 */
typedef _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;

/* 13014 */
typedef unsigned int colorindex_t;

/* 13015 */
typedef void (__cdecl *BandwidthTest_Callback_CancelTest)(BandwidthTestInput *);

/* 13016 */
typedef tagMOUSEINPUT *LPMOUSEINPUT;

/* 13017 */
typedef void *PSECURITY_DESCRIPTOR;

/* 13018 */
typedef LeaderboardDef *LeaderboardDefPtr;

/* 13019 */
typedef const wchar_t *PCUWSTR;

/* 13020 */
typedef tagAUXCAPS2A *PAUXCAPS2A;

/* 13021 */
typedef void *HLOCAL;

/* 13022 */
typedef unsigned __int16 sceneLightEnvTechType_t[1];

/* 13023 */
typedef HKEY__ *HKEY;

/* 13024 */
typedef const wchar_t *PCWCH;

/* 13025 */
typedef tagMCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;

/* 13026 */
typedef tagMCI_SET_PARMS *PMCI_SET_PARMS;

/* 13027 */
typedef _CONSOLE_SELECTION_INFO *PCONSOLE_SELECTION_INFO;

/* 13028 */
typedef int (__cdecl *HksErrorFunctionType)(const char *, const int, const char *, const unsigned int, const char *, const char *);

/* 13029 */
typedef char *LPUTSTR;

/* 13030 */
typedef int (__cdecl *PROPENUMPROC)(HWND__ *, const char *, void *);

/* 13031 */
typedef _DISPLAY_DEVICEA *PDISPLAY_DEVICE;

/* 13032 */
typedef _FILE_INFO_BY_HANDLE_CLASS *PFILE_INFO_BY_HANDLE_CLASS;

/* 13033 */
typedef MenuList *MenuListPtr;

/* 13034 */
typedef tagENUMTEXTMETRICW *PENUMTEXTMETRICW;

/* 13035 */
typedef tagGLYPHSET *LPGLYPHSET;

/* 13036 */
typedef _PEB *PPEB;

/* 13037 */
typedef _EXCEPTION_DISPOSITION (__cdecl *PEXCEPTION_ROUTINE)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);

/* 13038 */
typedef _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRY;

/* 13039 */
typedef unsigned __int64 DWORD64;

/* 13040 */
typedef _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;

/* 13041 */
typedef tagACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;

/* 13042 */
typedef _NOTIFYICONIDENTIFIER *PNOTIFYICONIDENTIFIER;

/* 13043 */
typedef tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

/* 13044 */
typedef __int64 *PLONG_PTR;

/* 13045 */
typedef unsigned int D3D10_FEATURE_LEVEL1;

/* 13046 */
typedef _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

/* 13047 */
typedef _PSINJECTDATA *PPSINJECTDATA;

/* 13048 */
typedef _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONSA;

/* 13049 */
typedef unsigned __int64 ULONG_PTR;

/* 13050 */
typedef tagALTTABINFO *PALTTABINFO;

/* 13051 */
typedef tagWINDOWINFO *PWINDOWINFO;

/* 13052 */
typedef unsigned int MMRESULT;

/* 13053 */
typedef tagEVENTMSG *NPEVENTMSGMSG;

/* 13054 */
typedef _DRIVER_INFO_4W *PDRIVER_INFO_4W;

/* 13055 */
typedef void (__cdecl *BucketFreeCallback)(void *, void *);

/* 13056 */
typedef tagEVENTMSG *LPEVENTMSGMSG;

/* 13057 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETGPUCORECOUNT)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 13058 */
typedef HWND__ *HWND;

/* 13059 */
typedef _SHNAMEMAPPINGA *LPSHNAMEMAPPING;

/* 13060 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETVIEWEX)(NvDisplayHandle__ *, NV_DISPLAY_PATH_INFO *, _NV_TARGET_VIEW_MODE);

/* 13061 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_VIDEOSURFACEENCRYPTIONCONTROL)(unsigned int *, NVAPI_VIDSURF_ENCRYPT_CTRL_PARAMS *);

/* 13062 */
typedef _DRIVER_INFO_3W *LPDRIVER_INFO_3W;

/* 13063 */
typedef unsigned __int16 lightindex_t;

/* 13064 */
typedef _DISK_GEOMETRY_EX *PDISK_GEOMETRY_EX;

/* 13065 */
typedef const char *PCTCH;

/* 13066 */
typedef tagINTERFACEINFO *LPINTERFACEINFO;

/* 13067 */
typedef tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMS;

/* 13068 */
typedef _REQUEST_RAW_ENCRYPTED_DATA *PREQUEST_RAW_ENCRYPTED_DATA;

/* 13069 */
typedef void *I_RPC_HANDLE;

/* 13070 */
typedef _SE_ACCESS_REQUEST *PSE_ACCESS_REQUEST;

/* 13071 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_REVERTCUSTOMDISPLAYTRIAL)(NvDisplayHandle__ *);

/* 13072 */
typedef tagSTGMEDIUM *LPSTGMEDIUM;

/* 13073 */
typedef _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

/* 13074 */
typedef _DISK_HISTOGRAM *PDISK_HISTOGRAM;

/* 13075 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_CAPTUREPNGIMAGE)(void *);

/* 13076 */
typedef IOleWindow *LPOLEWINDOW;

/* 13077 */
typedef _SCHANNEL_ALG *PSCHANNEL_ALG;

/* 13078 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETGPUTOPOLOGIES)(NV_GPU_TOPOLOGIES *, unsigned int);

/* 13079 */
typedef char *JSAMPROW;

/* 13080 */
typedef _DRIVER_INFO_4A *PDRIVER_INFO_4A;

/* 13081 */
typedef _OFNOTIFYEXA *LPOFNOTIFYEX;

/* 13082 */
typedef HRESULT (__cdecl *PFNCANSHAREFOLDERW)(const wchar_t *);

/* 13083 */
typedef USN_RECORD_V2 *PUSN_RECORD;

/* 13084 */
typedef _TOKEN_CONTROL *PTOKEN_CONTROL;

/* 13085 */
typedef _SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

/* 13086 */
typedef unsigned int EventParm;

/* 13087 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVIEWEX)(NvDisplayHandle__ *, NV_DISPLAY_PATH_INFO *, unsigned int *, _NV_TARGET_VIEW_MODE *);

/* 13088 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVBIOSVERSIONSTRING)(NvPhysicalGpuHandle__ *, char *);

/* 13089 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETMOSAICCAPABILITIES)(NV_GPU_TOPOLOGIES *, NV_MOSAIC_CAPS_V2 *);

/* 13090 */
typedef __int16 int16_t;

/* 13091 */
typedef _CMSG_RC4_AUX_INFO *PCMSG_RC4_AUX_INFO;

/* 13092 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETSLIINFO)(unsigned int *, NV_SLI_INFO *);

/* 13093 */
typedef tagWAVEINCAPSA *PWAVEINCAPS;

/* 13094 */
typedef tagMSG *NPMSG;

/* 13095 */
typedef _FORMAT_PARAMETERS *PFORMAT_PARAMETERS;

/* 13096 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPSTATES20)(NvPhysicalGpuHandle__ *, _NV_GPU_PERF_PSTATES20_INFO_V2 *);

/* 13097 */
typedef int (__cdecl *PROPENUMPROCW)(HWND__ *, const wchar_t *, void *);

/* 13098 */
typedef _CERT_QC_STATEMENT *PCERT_QC_STATEMENT;

/* 13099 */
typedef unsigned int IPos;

/* 13100 */
typedef tagMSG *LPMSG;

/* 13101 */
typedef group_req *PGROUP_REQ;

/* 13102 */
typedef unsigned int pMemType_t;

/* 13103 */
typedef _CMSG_RC2_AUX_INFO *PCMSG_RC2_AUX_INFO;

/* 13104 */
typedef _DRIVER_INFO_2W *LPDRIVER_INFO_2W;

/* 13105 */
typedef _PROPSHEETPAGEA *LPCPROPSHEETPAGEA_V4;

/* 13106 */
typedef tagFINDREPLACEW *LPFINDREPLACEW;

/* 13107 */
typedef __int64 hksInt64;

/* 13108 */
typedef tagMCI_VD_PLAY_PARMS *LPMCI_VD_PLAY_PARMS;

/* 13109 */
typedef int BOOL;

/* 13110 */
typedef void *(__cdecl *curl_calloc_callback)(unsigned __int64, unsigned __int64);

/* 13111 */
typedef in_addr *LPIN_ADDR;

/* 13112 */
typedef tagTLIBATTR *LPTLIBATTR;

/* 13113 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETPSTATES20)(NvPhysicalGpuHandle__ *, _NV_GPU_PERF_PSTATES20_INFO_V2 *);

/* 13114 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_ENUMSIGNALFORMATS)(NvVioHandle__ *, unsigned int, _NVVIOSIGNALFORMATDETAIL *);

/* 13115 */
typedef int (__cdecl *I_RpcPerformCalloutFn)(void *, _RDR_CALLOUT_STATE *, _RPC_HTTP_REDIRECTOR_STAGE);

/* 13116 */
typedef int (__cdecl *PROPENUMPROCA)(HWND__ *, const char *, void *);

/* 13117 */
typedef _MAT2 *LPMAT2;

/* 13118 */
typedef tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMSA;

/* 13119 */
typedef void (__cdecl *RPC_HTTP_PROXY_FREE_STRING)(unsigned __int16 *);

/* 13120 */
typedef _flowspec *LPFLOWSPEC;

/* 13121 */
typedef IGetBindHandle *LPGETBINDHANDLE;

/* 13122 */
typedef _BCRYPT_DH_KEY_BLOB *PBCRYPT_DH_KEY_BLOB;

/* 13123 */
typedef tagOLEUPDATE *LPOLEUPDATE;

/* 13124 */
typedef unsigned __int16 scr_thread_t;

/* 13125 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETIMAGESHARPENINGLEVEL)(NvDisplayHandle__ *, unsigned int, unsigned int);

/* 13126 */
typedef __int16 XQuat[4];

/* 13127 */
typedef void *(__cdecl *PFN_CreateFile2)(const wchar_t *, unsigned int, unsigned int, unsigned int, _CREATEFILE2_EXTENDED_PARAMETERS *);

/* 13128 */
typedef _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;

/* 13129 */
typedef __int64 BD_WORD;

/* 13130 */
typedef _PROPSHEETPAGEW *LPCPROPSHEETPAGEW_V4;

/* 13131 */
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE *PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;

/* 13132 */
typedef tagAXISINFOA *LPAXISINFOA;

/* 13133 */
typedef unsigned int MCIDEVICEID;

/* 13134 */
typedef _CERT_REVOCATION_PARA *PCERT_REVOCATION_PARA;

/* 13135 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETDISPLAYDRIVERVERSION)(NvDisplayHandle__ *, NV_DISPLAY_DRIVER_VERSION *);

/* 13136 */
typedef tagBINDPTR *LPBINDPTR;

/* 13137 */
typedef int (__cdecl *ENUMRESNAMEPROCA)(HINSTANCE__ *, const char *, char *, __int64);

/* 13138 */
typedef pathnode_tree_t *pathnode_tree_ptr;

/* 13139 */
typedef FILE_ID_DESCRIPTOR *LPFILE_ID_DESCRIPTOR;

/* 13140 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIDEOSETSTEREOINFO)(NvDisplayHandle__ *, _NV_VIDEO_STEREO_INFO *);

/* 13141 */
typedef _STORAGE_MEDIA_SERIAL_NUMBER_DATA *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;

/* 13142 */
typedef tagPOINT *NPPOINT;

/* 13143 */
typedef unsigned int POINTER_FLAGS;

/* 13144 */
typedef float alignVertBufVec2_t[2];

/* 13145 */
typedef tagMCI_OVLY_SAVE_PARMSW *LPMCI_OVLY_SAVE_PARMSW;

/* 13146 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_SETSYNCSTATESETTINGS)(unsigned int, _NV_GSYNC_DISPLAY *, unsigned int);

/* 13147 */
typedef int *LPBOOL;

/* 13148 */
typedef void (__cdecl *_PHNDLR)(int);

/* 13149 */
typedef tagPOINT *LPPOINT;

/* 13150 */
typedef _PERF_COUNTER_BLOCK *PPERF_COUNTER_BLOCK;

/* 13151 */
typedef HKL__ *HKL;

/* 13152 */
typedef _SC_ACTION *LPSC_ACTION;

/* 13153 */
typedef char *(__cdecl *alloc_func)(char *, unsigned int, unsigned int);

/* 13154 */
typedef _PROPSHEETPAGEW_V3 *LPPROPSHEETPAGEW_V3;

/* 13155 */
typedef _PROPSHEETPAGEW_V2 *LPPROPSHEETPAGEW_V2;

/* 13156 */
typedef Statement_s *StatementPtr;

/* 13157 */
typedef _PROPSHEETPAGEW_V1 *LPPROPSHEETPAGEW_V1;

/* 13158 */
typedef tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED;

/* 13159 */
typedef RawFile *RawFilePtr;

/* 13160 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVBLANKCOUNTER)(NvDisplayHandle__ *, unsigned int *);

/* 13161 */
typedef _CRYPT_PSOURCE_ALGORITHM *PCRYPT_PSOURCE_ALGORITHM;

/* 13162 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETIMAGESHARPENINGINFO)(NvDisplayHandle__ *, unsigned int, NV_DISPLAY_IMAGE_SHARPENING_INFO *);

/* 13163 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DECREASESEPARATION)(void *);

/* 13164 */
typedef _CRYPT_ENROLLMENT_NAME_VALUE_PAIR *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;

/* 13165 */
typedef tagRECT *LPRECT;

/* 13166 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_WORKSTATIONFEATURESETUP)(NvPhysicalGpuHandle__ *, unsigned int, unsigned int);

/* 13167 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ENABLESTEREO)(unsigned int *, _NVAPI_D3D9_ENABLE_STEREO_PARAMS *);

/* 13168 */
typedef tagRECT *NPRECT;

/* 13169 */
typedef tagAXISINFOW *LPAXISINFOW;

/* 13170 */
typedef _PROPSHEETPAGEW *LPPROPSHEETPAGEW_V4;

/* 13171 */
typedef _SEC_WINNT_AUTH_IDENTITY_W *PSEC_WINNT_AUTH_IDENTITY_W;

/* 13172 */
typedef _MODEMDEVCAPS *PMODEMDEVCAPS;

/* 13173 */
typedef IDirectSound8 *LPDIRECTSOUND8;

/* 13174 */
typedef _SERVICE_NOTIFY_2W *PSERVICE_NOTIFY_2W;

/* 13175 */
typedef _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;

/* 13176 */
typedef tagLOGCOLORSPACEA *LPLOGCOLORSPACE;

/* 13177 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_QUERYDPTOPOLOGY)(unsigned int, _NV_DP_NODE_INFO *, unsigned int *);

/* 13178 */
typedef char snapshot_value_t[8192];

/* 13179 */
typedef _FILE_REGION_INFO *PFILE_REGION_INFO;

/* 13180 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_EVENT_REGISTERCALLBACK)(NV_EVENT_REGISTER_CALLBACK *, NvEventHandle__ **);

/* 13181 */
typedef _KNONVOLATILE_CONTEXT_POINTERS *PKNONVOLATILE_CONTEXT_POINTERS;

/* 13182 */
typedef in6_addr *PIN6_ADDR;

/* 13183 */
typedef unsigned __int64 SCARDHANDLE;

/* 13184 */
typedef void (__cdecl *DSMessageHandler)(LocalClientNum_t, netadr_s *, msg_t *);

/* 13185 */
typedef _CSV_CONTROL_PARAM *PCSV_CONTROL_PARAM;

/* 13186 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_MOSAIC_GETDISPLAYCAPABILITIES)(NV_MOSAIC_DISPLAY_CAPS_V2 *);

/* 13187 */
typedef tagTOUCHINPUT *PCTOUCHINPUT;

/* 13188 */
typedef _POWER_SESSION_TIMEOUTS *PPOWER_SESSION_TIMEOUTS;

/* 13189 */
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;

/* 13190 */
typedef const char *LPCCH;

/* 13191 */
typedef tagWAVEOUTCAPS2A *LPWAVEOUTCAPS2A;

/* 13192 */
typedef PPM_THERMALCHANGE_EVENT *PPPM_THERMALCHANGE_EVENT;

/* 13193 */
typedef tagWAVEOUTCAPS2A *NPWAVEOUTCAPS2A;

/* 13194 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETINFOFRAME)(NvDisplayHandle__ *, unsigned int, _NV_INFOFRAME_TYPE, NV_INFOFRAME *);

/* 13195 */
typedef void *RPC_INTERFACE_GROUP;

/* 13196 */
typedef float vec2_t[2];

/* 13197 */
typedef tagMCI_OVLY_LOAD_PARMSW *PMCI_OVLY_LOAD_PARMSW;

/* 13198 */
typedef ID3D11DomainShader *GfxDomainShader;

/* 13199 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_QUERY_END)(NVDX_ObjectHandle__ *);

/* 13200 */
typedef unsigned int __cdecl swizzle_coord(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void *);

/* 13201 */
typedef tagBITMAPINFO *PBITMAPINFO;

/* 13202 */
typedef tagABORTPATH *PEMRABORTPATH;

/* 13203 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_GETGAMMA)(NvVioHandle__ *, _NVVIOGAMMACORRECTION *);

/* 13204 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_DELETEAPPLICATIONEX)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, _NVDRS_APPLICATION_V3 *);

/* 13205 */
typedef _JOB_INFO_2A *PJOB_INFO_2A;

/* 13206 */
typedef unsigned int FxMarkHandle;

/* 13207 */
typedef tagWAVEOUTCAPS2W *NPWAVEOUTCAPS2W;

/* 13208 */
typedef _MMIOINFO *PMMIOINFO;

/* 13209 */
typedef tagWAVEOUTCAPS2W *LPWAVEOUTCAPS2W;

/* 13210 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETINFOFRAME)(NvDisplayHandle__ *, unsigned int, _NV_INFOFRAME_TYPE, NV_INFOFRAME *);

/* 13211 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_RESTOREALLDEFAULTS)(NvDRSSessionHandle__ *);

/* 13212 */
typedef void *BCRYPT_HASH_HANDLE;

/* 13213 */
typedef _CERT_SERVER_OCSP_RESPONSE_CONTEXT *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;

/* 13214 */
typedef ICreateTypeInfo *LPCREATETYPEINFO;

/* 13215 */
typedef tagEMRRESTOREDC *PEMRRESTOREDC;

/* 13216 */
typedef FxWorld *FxWorldPtr;

/* 13217 */
typedef _WSANAMESPACE_INFOA *LPWSANAMESPACE_INFO;

/* 13218 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_SETPIXELSHADERCONSTANTI)(void *, unsigned int, int *, int *, int *, unsigned int);

/* 13219 */
typedef unsigned __int64 NCRYPT_HASH_HANDLE;

/* 13220 */
typedef GfxPackedVertex *GfxPackedVertexUnion;

/* 13221 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_SETGAMMA)(NvVioHandle__ *, _NVVIOGAMMACORRECTION *);

/* 13222 */
typedef unsigned int BD_ULONG;

/* 13223 */
typedef tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMSA;

/* 13224 */
typedef cmsghdr *PCMSGHDR;

/* 13225 */
typedef tagAXISINFOA *LPAXISINFO;

/* 13226 */
typedef my_source_mgr *my_src_ptr;

/* 13227 */
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;

/* 13228 */
typedef unsigned int IDirect3DTexture9;

/* 13229 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETOVERLAYSURFACEHANDLES)(unsigned int *, _NV_OVLY_SURFS_INFO *);

/* 13230 */
typedef _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT *PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;

/* 13231 */
typedef ip_mreq_source *PIP_MREQ_SOURCE;

/* 13232 */
typedef _CRYPT_TIMESTAMP_CONTEXT *PCRYPT_TIMESTAMP_CONTEXT;

/* 13233 */
typedef MaterialTechniqueSet *MaterialTechniqueSetPtr;

/* 13234 */
typedef Font_s *FontHandle;

/* 13235 */
typedef char *PCHAR;

/* 13236 */
typedef SC_HANDLE__ **LPSC_HANDLE;

/* 13237 */
typedef IBindCtx *LPBC;

/* 13238 */
typedef __int64 __time64_t;

/* 13239 */
typedef char TCHAR;

/* 13240 */
typedef char UCHAR;

/* 13241 */
typedef timecaps_tag *PTIMECAPS;

/* 13242 */
typedef _PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2;

/* 13243 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_CREATEDEVICE)(unsigned int *, unsigned int, HINSTANCE__ *, unsigned int, unsigned int, unsigned int, unsigned int **, NVAPI_DEVICE_FEATURE_LEVEL *);

/* 13244 */
typedef _CERT_LDAP_STORE_OPENED_PARA *PCERT_LDAP_STORE_OPENED_PARA;

/* 13245 */
typedef unsigned int (__cdecl *PFE_EXPORT_FUNC)(char *, void *, unsigned int);

/* 13246 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D11_CREATEDEVICE)(unsigned int *, unsigned int, HINSTANCE__ *, unsigned int, const unsigned int *, unsigned int, unsigned int, unsigned int **, unsigned int *, unsigned int **, NVAPI_DEVICE_FEATURE_LEVEL *);

/* 13247 */
typedef tagMONHSZSTRUCTA *PMONHSZSTRUCTA;

/* 13248 */
typedef type_info *__RTtypeidReturnType;

/* 13249 */
typedef _JOB_INFO_1A *PJOB_INFO_1A;

/* 13250 */
typedef _PROPSHEETPAGEA *LPPROPSHEETPAGEA;

/* 13251 */
typedef my_memory_mgr *my_mem_ptr;

/* 13252 */
typedef void (__cdecl *scriptableRadiusDamageCallback)(ScriptableContext, const unsigned int, const unsigned int, const unsigned int, const unsigned int, const float *, const float *, const int, Weapon, const bool, const int);

/* 13253 */
typedef char BCHAR;

/* 13254 */
typedef char CCHAR;

/* 13255 */
typedef _RECTL *LPRECTL;

/* 13256 */
typedef _CRYPT_CREDENTIALS *PCRYPT_CREDENTIALS;

/* 13257 */
typedef MaterialHullShader *MaterialHullShaderPtr;

/* 13258 */
typedef _CMSG_MAIL_LIST_ENCRYPT_INFO *PCMSG_MAIL_LIST_ENCRYPT_INFO;

/* 13259 */
typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;

/* 13260 */
typedef char FCHAR;

/* 13261 */
typedef _GUID *PCRM_PROTOCOL_ID;

/* 13262 */
typedef _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO;

/* 13263 */
typedef _IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;

/* 13264 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_CREATEPROFILE)(NvDRSSessionHandle__ *, _NVDRS_PROFILE *, NvDRSProfileHandle__ **);

/* 13265 */
typedef ICatalogFileInfo *LPCATALOGFILEINFO;

/* 13266 */
typedef tagEMRSETMITERLIMIT *PEMRSETMITERLIMIT;

/* 13267 */
typedef _DEVICE_COPY_OFFLOAD_DESCRIPTOR *PDEVICE_COPY_OFFLOAD_DESCRIPTOR;

/* 13268 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_ALIASPRIMARYASTEXTURE)(unsigned int *, unsigned int, unsigned int **, NVDX_ObjectHandle__ **);

/* 13269 */
typedef _PROPSHEETPAGEW *LPCPROPSHEETPAGEW;

/* 13270 */
typedef READ_FILE_USN_DATA *PREAD_FILE_USN_DATA;

/* 13271 */
typedef char _Valty;

/* 13272 */
typedef tagPANOSE *LPPANOSE;

/* 13273 */
typedef _SET_PURGE_FAILURE_MODE_INPUT *PSET_PURGE_FAILURE_MODE_INPUT;

/* 13274 */
typedef void *GLOBALHANDLE;

/* 13275 */
typedef const wchar_t *LPCWSTR;

/* 13276 */
typedef tagWAVEOUTCAPS2A *LPWAVEOUTCAPS2;

/* 13277 */
typedef tagCOLORADJUSTMENT *LPCOLORADJUSTMENT;

/* 13278 */
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION *PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

/* 13279 */
typedef tagWAVEOUTCAPS2A *NPWAVEOUTCAPS2;

/* 13280 */
typedef _wireSAFEARRAY **wirePSAFEARRAY;

/* 13281 */
typedef tagCOLORADJUSTMENT *PCOLORADJUSTMENT;

/* 13282 */
typedef _CRYPT_HASH_INFO *PCRYPT_HASH_INFO;

/* 13283 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETSEPARATION)(void *, float *);

/* 13284 */
typedef ReverbPreset *ReverbPresetPtr;

/* 13285 */
typedef tagMENUITEMINFOA *LPCMENUITEMINFO;

/* 13286 */
typedef tagEMRBITBLT *PEMRBITBLT;

/* 13287 */
typedef unsigned int *PSAVEPOINT_ID;

/* 13288 */
typedef _WSAQuerySet2W *PWSAQUERYSET2W;

/* 13289 */
typedef _TXFS_LIST_TRANSACTION_LOCKED_FILES *PTXFS_LIST_TRANSACTION_LOCKED_FILES;

/* 13290 */
typedef tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMSA;

/* 13291 */
typedef unsigned int UCSCHAR;

/* 13292 */
typedef void (__cdecl *forward_DCT_method_ptr)(int *);

/* 13293 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_NOTIFYCOPROCPOWERSTATE)(unsigned int, unsigned __int64, unsigned int *);

/* 13294 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCOOLERSETTINGS)(NvPhysicalGpuHandle__ *, unsigned int, NV_GPU_GETCOOLER_SETTINGS_V3 *);

/* 13295 */
typedef unsigned __int64 (__cdecl *LPCFHOOKPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 13296 */
typedef _PROPSHEETPAGEA *LPCPROPSHEETPAGEA;

/* 13297 */
typedef int (__cdecl *PFN_CMSG_EXPORT_MAIL_LIST)(_CMSG_CONTENT_ENCRYPT_INFO *, _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *, _CMSG_MAIL_LIST_ENCRYPT_INFO *, unsigned int, void *);

/* 13298 */
typedef _GENERIC_MAPPING *PGENERIC_MAPPING;

/* 13299 */
typedef _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALS;

/* 13300 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_INCREASECONVERGENCE)(void *);

/* 13301 */
typedef tagLOGPALETTE *PLOGPALETTE;

/* 13302 */
typedef unsigned int CellID_t;

/* 13303 */
typedef int fmtflags;

/* 13304 */
typedef _CTL_CONTEXT *PCTL_CONTEXT;

/* 13305 */
typedef _FPO_DATA *PFPO_DATA;

/* 13306 */
typedef joyinfoex_tag *PJOYINFOEX;

/* 13307 */
typedef tagEMRPOLYPOLYLINE *PEMRPOLYPOLYLINE;

/* 13308 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVOLTAGEDOMAINSSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_VOLTAGE_DOMAINS_STATUS_V1 *);

/* 13309 */
typedef void *umbraTomePtr_t;

/* 13310 */
typedef _MEMORYSTATUSEX *LPMEMORYSTATUSEX;

/* 13311 */
typedef tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMS;

/* 13312 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_JOINSWAPGROUP)(unsigned int *, unsigned int *, unsigned int, int);

/* 13313 */
typedef _BCryptBuffer *PBCryptBuffer;

/* 13314 */
typedef unsigned int FxTrailElemHandle;

/* 13315 */
typedef unsigned int ID3D10Device1;

/* 13316 */
typedef tagREGISTERWORDA *LPREGISTERWORD;

/* 13317 */
typedef tagHARDWAREINPUT *PHARDWAREINPUT;

/* 13318 */
typedef tagMOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT;

/* 13319 */
typedef tagREGISTERWORDA *NPREGISTERWORD;

/* 13320 */
typedef _PROCESSOR_POWER_POLICY *PPROCESSOR_POWER_POLICY;

/* 13321 */
typedef unsigned __int16 LANGID;

/* 13322 */
typedef _CERT_QC_STATEMENTS_EXT_INFO *PCERT_QC_STATEMENTS_EXT_INFO;

/* 13323 */
typedef char *PSTR;

/* 13324 */
typedef unsigned __int16 _ino_t;

/* 13325 */
typedef tagMIDIINCAPS2A *PMIDIINCAPS2;

/* 13326 */
typedef tagENUMLOGFONTW *LPENUMLOGFONTW;

/* 13327 */
typedef _TXFS_LIST_TRANSACTIONS_ENTRY *PTXFS_LIST_TRANSACTIONS_ENTRY;

/* 13328 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GPUSYNCMAPVERTEXBUFFER)(unsigned int *, unsigned int *, void *);

/* 13329 */
typedef _COMPATIBILITY_CONTEXT_ELEMENT *PCOMPATIBILITY_CONTEXT_ELEMENT;

/* 13330 */
typedef tagCHARSETINFO *LPCHARSETINFO;

/* 13331 */
typedef void (__cdecl *BuiltinFunction)();

/* 13332 */
typedef _CERT_ID *PCERT_ID;

/* 13333 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_GETEYESEPARATION)(void *, float *);

/* 13334 */
typedef tagCHARSETINFO *NPCHARSETINFO;

/* 13335 */
typedef _CMC_TAGGED_CERT_REQUEST *PCMC_TAGGED_CERT_REQUEST;

/* 13336 */
typedef unsigned __int16 transientFileIndex_t;

/* 13337 */
typedef _PROPSHEETHEADERW_V2 *LPPROPSHEETHEADERW_V2;

/* 13338 */
typedef _PROPSHEETHEADERW_V1 *LPPROPSHEETHEADERW_V1;

/* 13339 */
typedef _DEVICE_POWER_STATE *PDEVICE_POWER_STATE;

/* 13340 */
typedef unsigned int ID3D10Device;

/* 13341 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETIRQ)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 13342 */
typedef _MEMORYSTATUS *LPMEMORYSTATUS;

/* 13343 */
typedef void (__cdecl *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *, unsigned int);

/* 13344 */
typedef _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

/* 13345 */
typedef wchar_t *BSTR;

/* 13346 */
typedef _DRIVER_INFO_5A *PDRIVER_INFO_5;

/* 13347 */
typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;

/* 13348 */
typedef _RPC_CALL_LOCAL_ADDRESS_V1 *PRPC_CALL_LOCAL_ADDRESS_V1;

/* 13349 */
typedef _SYSTEM_AUDIT_CALLBACK_ACE *PSYSTEM_AUDIT_CALLBACK_ACE;

/* 13350 */
typedef _RPC_ASYNC_NOTIFICATION_INFO *PRPC_ASYNC_NOTIFICATION_INFO;

/* 13351 */
typedef unsigned __int64 *PKSPIN_LOCK;

/* 13352 */
typedef _CERT_ACCESS_DESCRIPTION *PCERT_ACCESS_DESCRIPTION;

/* 13353 */
typedef tagLASTINPUTINFO *PLASTINPUTINFO;

/* 13354 */
typedef HSTR__ *HSTR;

/* 13355 */
typedef void (__cdecl *ExecSingleCmd_FuncPtr)(LocalClientNum_t, int, const char *);

/* 13356 */
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;

/* 13357 */
typedef _JOB_INFO_1A *LPJOB_INFO_1;

/* 13358 */
typedef _UNWIND_INFO *PUNWIND_INFO;

/* 13359 */
typedef void __cdecl RTL_UMS_SCHEDULER_ENTRY_POINT(_RTL_UMS_SCHEDULER_REASON, unsigned __int64, void *);

/* 13360 */
typedef char uint8_t;

/* 13361 */
typedef IInternet *LPIINTERNET;

/* 13362 */
typedef _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

/* 13363 */
typedef tagMIXERLINEW *PMIXERLINEW;

/* 13364 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETVIDEOSTATE)(NvDisplayHandle__ *, _NVAPI_GET_VIDEO_STATE_COMPONENT *);

/* 13365 */
typedef tagCREATESTRUCTW *LPCREATESTRUCTW;

/* 13366 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_GETPOWERSTEERINGSTATUS)(NV_GPS_PS_STATUS *);

/* 13367 */
typedef _DRIVER_INFO_8W *LPDRIVER_INFO_8W;

/* 13368 */
typedef _WSAVersion *LPWSAVERSION;

/* 13369 */
typedef void MENUTEMPLATEA;

/* 13370 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETECCCONFIGURATION)(NvPhysicalGpuHandle__ *, char, char);

/* 13371 */
typedef _TIME_DYNAMIC_ZONE_INFORMATION *PDYNAMIC_TIME_ZONE_INFORMATION;

/* 13372 */
typedef wchar_t *LPWSTR;

/* 13373 */
typedef tagAUXCAPS2A *PAUXCAPS2;

/* 13374 */
typedef void *LPMENUTEMPLATEA;

/* 13375 */
typedef _ADAPTER_STATUS *PADAPTER_STATUS;

/* 13376 */
typedef _WIN32_FIND_STREAM_DATA *PWIN32_FIND_STREAM_DATA;

/* 13377 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETVBIOSOEMREVISION)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 13378 */
typedef _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;

/* 13379 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_DESTROYPATHCONTEXTNV)(unsigned int);

/* 13380 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_COPROC_GETAPPLICATIONCOPROCINFO)(NV_COPROC_APP_INFO *);

/* 13381 */
typedef void __cdecl ParseStrcpyCB(char *, const char *);

/* 13382 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETDYNAMICPSTATESINFOEX)(NvPhysicalGpuHandle__ *, NV_GPU_DYNAMIC_PSTATES_INFO_EX *);

/* 13383 */
typedef int (__cdecl *I_RpcProxyGetClientSessionAndResourceUUID)(void *, int *, _GUID *, int *, _GUID *);

/* 13384 */
typedef unsigned int FLONG;

/* 13385 */
typedef char int_fast8_t;

/* 13386 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_SETCOLORSPACECONVERSION)(unsigned int, _NV_GPU_COLORSPACE_CONVERSION_V1 *);

/* 13387 */
typedef _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRYA;

/* 13388 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GETINVALIDGPUTOPOLOGIES)(NV_GPU_TOPOLOGIES *);

/* 13389 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D10_BEGINSHARERESOURCEEX)(unsigned int *, unsigned int, void **);

/* 13390 */
typedef VehicleDef *(__cdecl *vehicle_def)(playerState_s *);

/* 13391 */
typedef _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;

/* 13392 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETPERGPUTOPOLOGYSTATUS)(NvPhysicalGpuHandle__ *, unsigned int *);

/* 13393 */
typedef wavehdr_tag *PWAVEHDR;

/* 13394 */
typedef void *LPMENUTEMPLATEW;

/* 13395 */
typedef unsigned __int64 bdUWord;

/* 13396 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SETVIDEOSTATE)(NvDisplayHandle__ *, _NVAPI_SET_VIDEO_STATE_COMPONENT *);

/* 13397 */
typedef _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONS;

/* 13398 */
typedef IDirectSoundCaptureBuffer *LPDIRECTSOUNDCAPTUREBUFFER;

/* 13399 */
typedef void MENUTEMPLATEW;

/* 13400 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPS_SETPOWERSTEERINGSTATUS)(NV_GPS_PS_STATUS);

/* 13401 */
typedef tagMIXERLINEA *PMIXERLINEA;

/* 13402 */
typedef _TP_POOL_STACK_INFORMATION *PTP_POOL_STACK_INFORMATION;

/* 13403 */
typedef _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

/* 13404 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_CLIENTPOWERPOLICIESGETSTATUS)(NvPhysicalGpuHandle__ *, NV_GPU_CLIENT_POWER_POLICIES_STATUS_V1 *);

/* 13405 */
typedef tagAUXCAPSA *PAUXCAPS;

/* 13406 */
typedef tagCREATESTRUCTA *LPCREATESTRUCTA;

/* 13407 */
typedef void __cdecl RPC_CLIENT_FREE(void *);

/* 13408 */
typedef int *PLONG;

/* 13409 */
typedef _PROCESS_INFORMATION *PPROCESS_INFORMATION;

/* 13410 */
typedef tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

/* 13411 */
typedef _RTL_CONDITION_VARIABLE *PCONDITION_VARIABLE;

/* 13412 */
typedef unsigned __int64 BD_UWORD;

/* 13413 */
typedef _CRYPT_OID_INFO *PCCRYPT_OID_INFO;

/* 13414 */
typedef tagTouchPredictionParameters *PTOUCHPREDICTIONPARAMETERS;

/* 13415 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GPU_GETCOLORSPACECONVERSION)(unsigned int, _NV_GPU_COLORSPACE_CONVERSION_V1 *);

/* 13416 */
typedef _CRL_CONTEXT *PCRL_CONTEXT;

/* 13417 */
typedef unsigned int uLong;

/* 13418 */
typedef unsigned int ULONG;

/* 13419 */
typedef IOleObject *LPOLEOBJECT;

/* 13420 */
typedef unsigned __int64 bdTeamID;

/* 13421 */
typedef tagEMRPOLYLINE *PEMRPOLYLINETO;

/* 13422 */
typedef void *HCRYPTOIDFUNCADDR;

/* 13423 */
typedef _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST;

/* 13424 */
typedef tagREGISTERWORDA *LPREGISTERWORDA;

/* 13425 */
typedef _DRIVER_INFO_5W *PDRIVER_INFO_5W;

/* 13426 */
typedef unsigned __int16 FxBoltHandle;

/* 13427 */
typedef tagREGISTERWORDA *NPREGISTERWORDA;

/* 13428 */
typedef tagMIDIINCAPS2A *PMIDIINCAPS2A;

/* 13429 */
typedef char *LPTSTR;

/* 13430 */
typedef _DCB *LPDCB;

/* 13431 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_STEREO_DISABLE)();

/* 13432 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_GSYNC_QUERYCAPABILITIES)(NvGSyncDeviceHandle__ *, _NV_GSYNC_CAPABILITIES *);

/* 13433 */
typedef _JOB_INFO_1W *LPJOB_INFO_1W;

/* 13434 */
typedef int (__cdecl *R_SphereStaticModelsCallback)(int, void *);

/* 13435 */
typedef _MONITOR_DISPLAY_STATE *PMONITOR_DISPLAY_STATE;

/* 13436 */
typedef unsigned int PackageId_t;

/* 13437 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_GETCHIPSETTOPOLOGYSTATUS)(unsigned int *);

/* 13438 */
typedef char min_msg_buf_char[2048];

/* 13439 */
typedef tagRAWMOUSE *PRAWMOUSE;

/* 13440 */
typedef void (__cdecl *LPFN_FREEADDRINFOEXA)(addrinfoexA *);

/* 13441 */
typedef int (__cdecl *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(const wchar_t *, unsigned int, void *, void *);

/* 13442 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_ENUMTCCPHYSICALGPUS)(NvPhysicalGpuHandle__ **, unsigned int *);

/* 13443 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_DRS_ENUMAPPLICATIONS)(NvDRSSessionHandle__ *, NvDRSProfileHandle__ *, unsigned int, unsigned int *, _NVDRS_APPLICATION_V3 *);

/* 13444 */
typedef tagMIDIINCAPS2W *PMIDIINCAPS2W;

/* 13445 */
typedef _CMSG_CMS_RECIPIENT_INFO *PCMSG_CMS_RECIPIENT_INFO;

/* 13446 */
typedef void __cdecl WriteToDemo(const void *, int, int);

/* 13447 */
typedef tagREGISTERWORDW *NPREGISTERWORDW;

/* 13448 */
typedef _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRIC;

/* 13449 */
typedef int PMFN;

/* 13450 */
typedef tagREGISTERWORDW *LPREGISTERWORDW;

/* 13451 */
typedef _DRIVER_INFO_5A *PDRIVER_INFO_5A;

/* 13452 */
typedef _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRIC;

/* 13453 */
typedef __int64 ptrdiff_t;

/* 13454 */
typedef bool (__cdecl *queryPacketHandler)(netadr_s *, msg_t *);

/* 13455 */
typedef tagMCI_SEEK_PARMS *PMCI_SEEK_PARMS;

/* 13456 */
typedef unsigned __int64 bdOnlineUserID;

/* 13457 */
typedef _JOB_INFO_1A *LPJOB_INFO_1A;

/* 13458 */
typedef _LOOKUP_STREAM_FROM_CLUSTER_ENTRY *PLOOKUP_STREAM_FROM_CLUSTER_ENTRY;

/* 13459 */
typedef tagAUXCAPSW *PAUXCAPSW;

/* 13460 */
typedef unsigned int alignCompBufUInt_t;

/* 13461 */
typedef void MENUTEMPLATE;

/* 13462 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D_ENDRESOURCERENDERING)(IUnknown *, NVDX_ObjectHandle__ *, unsigned int);

/* 13463 */
typedef void *LPMENUTEMPLATE;

/* 13464 */
typedef char bdMessageType;

/* 13465 */
typedef tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX;

/* 13466 */
typedef void (__cdecl *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD)(void *, const wchar_t *);

/* 13467 */
typedef int int_least32_t;

/* 13468 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_VIO_STOP)(NvVioHandle__ *);

/* 13469 */
typedef _JIT_DEBUG_INFO *LPJIT_DEBUG_INFO32;

/* 13470 */
typedef _IMAGE_LINENUMBER *PIMAGE_LINENUMBER;

/* 13471 */
typedef char boolean;

/* 13472 */
typedef char BOOLEAN;

/* 13473 */
typedef float dVector3[4];

/* 13474 */
typedef _tiddata *_ptiddata;

/* 13475 */
typedef float dReal;

/* 13476 */
typedef tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;

/* 13477 */
typedef HMIDISTRM__ *HMIDISTRM;

/* 13478 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_SYS_VENTURAGETPOWERREADING)(_NVAPI_VENTURA_DEVICE, unsigned int *);

/* 13479 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETCURRENTRENDERTARGETHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 13480 */
typedef _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;

/* 13481 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_GETVERTEXBUFFERHANDLE)(unsigned int *, NVDX_ObjectHandle__ **);

/* 13482 */
typedef char objBufEntry[184];

/* 13483 */
typedef _CRYPT_SIGN_MESSAGE_PARA *PCRYPT_SIGN_MESSAGE_PARA;

/* 13484 */
typedef _NvAPI_Status (__cdecl *LPNVAPI_D3D9_PATHENABLECOLORWRITENV)(unsigned int, bool);

/* 13485 */
typedef void (__cdecl *Free_t)(void *, unsigned __int64);

/* 13486 */
typedef const wchar_t *PCWCHAR;

/* 13487 */
typedef void (__cdecl *dwCSListTaskSuccessCallback)(const int, contentServerPrivateData *);

/* 13488 */
typedef tagAUXCAPSA *PAUXCAPSA;

/* 13489 */
typedef _JOB_INFO_4A *PJOB_INFO_4A;

/* 13490 */
typedef tagCREATESTRUCTA *LPCREATESTRUCT;

/* 13491 */
typedef NvPhysicalGpuHandle__ *NvPhysicalGpuHandle;

/* 13492 */
typedef tagMIXERLINEA *PMIXERLINE;

/* 13493 */
typedef void (__cdecl *SENDASYNCPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 13494 */
typedef _ZONEATTRIBUTES *LPZONEATTRIBUTES;

/* 13495 */
typedef HMENU__ *HMENU;

/* 13496 */
typedef __int64 (__cdecl *DLGPROC)(HWND__ *, unsigned int, unsigned __int64, __int64);

/* 13497 */
typedef _CTL_VERIFY_USAGE_STATUS *PCTL_VERIFY_USAGE_STATUS;

/* 13498 */
typedef NVDX_SwapChainHandle__ *NVDX_SwapChainHandle;

/* 13499 */
typedef _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS;

/* 13500 */
typedef HWAVEOUT__ **LPHWAVEOUT;

/* 13501 */
typedef _TP_WAIT *(__cdecl *PFNCREATETHREADPOOLWAIT)(void (__cdecl *)(_TP_CALLBACK_INSTANCE *, void *, _TP_WAIT *, unsigned int), void *, _TP_CALLBACK_ENVIRON_V1 *);

/* 13502 */
typedef _TP_POOL *PTP_POOL;

/* 13503 */
typedef ICreateTypeLib *LPCREATETYPELIB;

/* 13504 */
typedef _GUID *PUOW;

/* 13505 */
struct Concurrency::details::UMSFreeVirtualProcessorRoot;

/* 13506 */
struct __ExceptionPtr;

/* 13507 */
struct Concurrency::details::_CancellationTokenRegistration;

/* 13508 */
struct Concurrency::details::WorkQueue;

/* 13509 */
#pragma pack(push, 1)
struct RUNTIME_FUNCTION
{
  void *__ptr32 FunctionStart;
  void *__ptr32 FunctionEnd;
  void *__ptr32 UnwindInfo;
};
#pragma pack(pop)

/* 13510 */
#pragma pack(push, 1)
struct UNWIND_INFO
{
  char Ver3_Flags;
  char PrologSize;
  char CntUnwindCodes;
  char FrReg_FrRegOff;
};
#pragma pack(pop)

/* 13511 */
#pragma pack(push, 1)
struct UNWIND_CODE
{
  char PrologOff;
  char OpCode_OpInfo;
};
#pragma pack(pop)

/* 13512 */
#pragma pack(push, 1)
struct C_SCOPE_TABLE
{
  void *__ptr32 Begin;
  void *__ptr32 End;
  void *__ptr32 Handler;
  void *__ptr32 Target;
};
#pragma pack(pop)

/* 13513 */
#pragma pack(push, 1)
struct _msEhRef
{
  int Id;
  int Cnt1;
  void *__ptr32 Tbl1;
  int Cnt2;
  void *__ptr32 Tbl2;
  int Cnt3;
  void *__ptr32 Tbl3;
  int _unk;
};
#pragma pack(pop)

/* 13514 */
#pragma pack(push, 1)
struct _msEhDsc1
{
  int Mode;
  void *__ptr32 Entry;
};
#pragma pack(pop)

/* 13515 */
#pragma pack(push, 1)
struct _msEhDsc2
{
  void *__ptr32 Entry;
  int Mode;
};
#pragma pack(pop)

